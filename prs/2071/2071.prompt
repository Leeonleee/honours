You will be provided with a partial code base and an issue statement explaining a problem to resolve.
In your output, give nothing but the code (no markdown) so that your output can be copy pasted and run immediately with no changes

<issue>
Unable to drop column
If you try to drop column from the table which has been created from CSV-file you will get a Catalog error.

```
D CREATE TABLE ontime AS SELECT * FROM read_csv_auto('test.csv');
D DESCRIBE ontime;
┌────────────────┬─────────┬──────┬─────┬─────────┬───────┐
│     Field      │  Type   │ Null │ Key │ Default │ Extra │
├────────────────┼─────────┼──────┼─────┼─────────┼───────┤
│ FlightDate     │ DATE    │ YES  │     │         │       │
│ UniqueCarrier  │ VARCHAR │ YES  │     │         │       │
│ OriginCityName │ VARCHAR │ YES  │     │         │       │
│ DestCityName   │ VARCHAR │ YES  │     │         │       │
└────────────────┴─────────┴──────┴─────┴─────────┴───────┘
D ALTER TABLE ontime DROP FlighDate;
Error: Catalog Error: Table does not have a column with name "flighdate"

```
This is happening on Windows with client 0.2.7


</issue>
<code>
[start of README.md]
1: <img src="https://duckdb.org/images/DuckDB_Logo_dl.png" height="50">
2: 
3: ![.github/workflows/main.yml](https://github.com/cwida/duckdb/workflows/.github/workflows/main.yml/badge.svg?branch=master)
4: [![CodeFactor](https://www.codefactor.io/repository/github/cwida/duckdb/badge)](https://www.codefactor.io/repository/github/cwida/duckdb)
5: [![codecov](https://codecov.io/gh/duckdb/duckdb/branch/master/graph/badge.svg?token=FaxjcfFghN)](https://codecov.io/gh/duckdb/duckdb)
6: 
7: 
8: ## Installation
9: If you just want to install and use DuckDB, please see [our website](https://www.duckdb.org) for installation and usage instructions.
10: 
11: ## Development
12: For development, DuckDB requires [CMake](https://cmake.org), Python3 and a `C++11` compliant compiler. Run `make` in the root directory to compile the sources. For development, use `make debug` to build a non-optimized debug version. You should run `make unit` and `make allunit` to verify that your version works properly after making changes. To test performance, you can run several standard benchmarks from the root directory by executing `./build/release/benchmark/benchmark_runner`.
13: 
14: Please also refer to our [Contribution Guide](CONTRIBUTING.md).
15: 
16: 
[end of README.md]
[start of src/catalog/catalog_entry/table_catalog_entry.cpp]
1: #include "duckdb/catalog/catalog_entry/table_catalog_entry.hpp"
2: 
3: #include "duckdb/catalog/catalog.hpp"
4: #include "duckdb/catalog/catalog_entry/schema_catalog_entry.hpp"
5: #include "duckdb/common/exception.hpp"
6: #include "duckdb/common/serializer.hpp"
7: #include "duckdb/main/connection.hpp"
8: #include "duckdb/main/database.hpp"
9: #include "duckdb/parser/constraints/list.hpp"
10: #include "duckdb/parser/parsed_data/alter_table_info.hpp"
11: #include "duckdb/planner/constraints/bound_not_null_constraint.hpp"
12: #include "duckdb/planner/constraints/bound_unique_constraint.hpp"
13: #include "duckdb/planner/constraints/bound_check_constraint.hpp"
14: #include "duckdb/planner/expression/bound_constant_expression.hpp"
15: #include "duckdb/planner/parsed_data/bound_create_table_info.hpp"
16: #include "duckdb/storage/storage_manager.hpp"
17: #include "duckdb/planner/binder.hpp"
18: 
19: #include "duckdb/execution/index/art/art.hpp"
20: #include "duckdb/parser/expression/columnref_expression.hpp"
21: #include "duckdb/planner/expression/bound_reference_expression.hpp"
22: #include "duckdb/parser/parsed_expression_iterator.hpp"
23: #include "duckdb/planner/expression_binder/alter_binder.hpp"
24: #include "duckdb/parser/keyword_helper.hpp"
25: 
26: #include <algorithm>
27: #include <sstream>
28: 
29: namespace duckdb {
30: 
31: void TableCatalogEntry::AddLowerCaseAliases(unordered_map<string, column_t> &name_map) {
32: 	unordered_map<string, column_t> extra_lowercase_names;
33: 	for (auto &entry : name_map) {
34: 		auto lcase = StringUtil::Lower(entry.first);
35: 		// check the lowercase name map if there already exists a lowercase version
36: 		if (extra_lowercase_names.find(lcase) == extra_lowercase_names.end()) {
37: 			// not yet: add the mapping
38: 			extra_lowercase_names[lcase] = entry.second;
39: 		} else {
40: 			// the lowercase already exists: set it to invalid index
41: 			extra_lowercase_names[lcase] = INVALID_INDEX;
42: 		}
43: 	}
44: 	// for any new lowercase names, add them to the original name map
45: 	for (auto &entry : extra_lowercase_names) {
46: 		if (entry.second != INVALID_INDEX) {
47: 			name_map[entry.first] = entry.second;
48: 		}
49: 	}
50: }
51: 
52: TableCatalogEntry::TableCatalogEntry(Catalog *catalog, SchemaCatalogEntry *schema, BoundCreateTableInfo *info,
53:                                      std::shared_ptr<DataTable> inherited_storage)
54:     : StandardEntry(CatalogType::TABLE_ENTRY, schema, catalog, info->Base().table), storage(move(inherited_storage)),
55:       columns(move(info->Base().columns)), constraints(move(info->Base().constraints)),
56:       bound_constraints(move(info->bound_constraints)), name_map(info->name_map) {
57: 	this->temporary = info->Base().temporary;
58: 	// add lower case aliases
59: 	AddLowerCaseAliases(name_map);
60: 	// add the "rowid" alias, if there is no rowid column specified in the table
61: 	if (name_map.find("rowid") == name_map.end()) {
62: 		name_map["rowid"] = COLUMN_IDENTIFIER_ROW_ID;
63: 	}
64: 	if (!storage) {
65: 		// create the physical storage
66: 		storage = make_shared<DataTable>(catalog->db, schema->name, name, GetTypes(), move(info->data));
67: 
68: 		// create the unique indexes for the UNIQUE and PRIMARY KEY constraints
69: 		for (idx_t i = 0; i < bound_constraints.size(); i++) {
70: 			auto &constraint = bound_constraints[i];
71: 			if (constraint->type == ConstraintType::UNIQUE) {
72: 				// unique constraint: create a unique index
73: 				auto &unique = (BoundUniqueConstraint &)*constraint;
74: 				// fetch types and create expressions for the index from the columns
75: 				vector<column_t> column_ids;
76: 				vector<unique_ptr<Expression>> unbound_expressions;
77: 				vector<unique_ptr<Expression>> bound_expressions;
78: 				idx_t key_nr = 0;
79: 				for (auto &key : unique.keys) {
80: 					D_ASSERT(key < columns.size());
81: 
82: 					unbound_expressions.push_back(make_unique<BoundColumnRefExpression>(
83: 					    columns[key].name, columns[key].type, ColumnBinding(0, column_ids.size())));
84: 
85: 					bound_expressions.push_back(make_unique<BoundReferenceExpression>(columns[key].type, key_nr++));
86: 					column_ids.push_back(key);
87: 				}
88: 				// create an adaptive radix tree around the expressions
89: 				auto art = make_unique<ART>(column_ids, move(unbound_expressions), true, unique.is_primary_key);
90: 				storage->AddIndex(move(art), bound_expressions);
91: 			}
92: 		}
93: 	}
94: }
95: 
96: bool TableCatalogEntry::ColumnExists(const string &name) {
97: 	return name_map.find(name) != name_map.end();
98: }
99: 
100: unique_ptr<CatalogEntry> TableCatalogEntry::AlterEntry(ClientContext &context, AlterInfo *info) {
101: 	D_ASSERT(!internal);
102: 	if (info->type != AlterType::ALTER_TABLE) {
103: 		throw CatalogException("Can only modify table with ALTER TABLE statement");
104: 	}
105: 	auto table_info = (AlterTableInfo *)info;
106: 	switch (table_info->alter_table_type) {
107: 	case AlterTableType::RENAME_COLUMN: {
108: 		auto rename_info = (RenameColumnInfo *)table_info;
109: 		return RenameColumn(context, *rename_info);
110: 	}
111: 	case AlterTableType::RENAME_TABLE: {
112: 		auto rename_info = (RenameTableInfo *)table_info;
113: 		auto copied_table = Copy(context);
114: 		copied_table->name = rename_info->new_table_name;
115: 		return copied_table;
116: 	}
117: 	case AlterTableType::ADD_COLUMN: {
118: 		auto add_info = (AddColumnInfo *)table_info;
119: 		return AddColumn(context, *add_info);
120: 	}
121: 	case AlterTableType::REMOVE_COLUMN: {
122: 		auto remove_info = (RemoveColumnInfo *)table_info;
123: 		return RemoveColumn(context, *remove_info);
124: 	}
125: 	case AlterTableType::SET_DEFAULT: {
126: 		auto set_default_info = (SetDefaultInfo *)table_info;
127: 		return SetDefault(context, *set_default_info);
128: 	}
129: 	case AlterTableType::ALTER_COLUMN_TYPE: {
130: 		auto change_type_info = (ChangeColumnTypeInfo *)table_info;
131: 		return ChangeColumnType(context, *change_type_info);
132: 	}
133: 	default:
134: 		throw InternalException("Unrecognized alter table type!");
135: 	}
136: }
137: 
138: static void RenameExpression(ParsedExpression &expr, RenameColumnInfo &info) {
139: 	if (expr.type == ExpressionType::COLUMN_REF) {
140: 		auto &colref = (ColumnRefExpression &)expr;
141: 		if (colref.column_name == info.old_name) {
142: 			colref.column_name = info.new_name;
143: 		}
144: 	}
145: 	ParsedExpressionIterator::EnumerateChildren(
146: 	    expr, [&](const ParsedExpression &child) { RenameExpression((ParsedExpression &)child, info); });
147: }
148: 
149: unique_ptr<CatalogEntry> TableCatalogEntry::RenameColumn(ClientContext &context, RenameColumnInfo &info) {
150: 	auto create_info = make_unique<CreateTableInfo>(schema->name, name);
151: 	create_info->temporary = temporary;
152: 	bool found = false;
153: 	for (idx_t i = 0; i < columns.size(); i++) {
154: 		ColumnDefinition copy = columns[i].Copy();
155: 
156: 		create_info->columns.push_back(move(copy));
157: 		if (info.old_name == columns[i].name) {
158: 			D_ASSERT(!found);
159: 			create_info->columns[i].name = info.new_name;
160: 			found = true;
161: 		}
162: 	}
163: 	if (!found) {
164: 		throw CatalogException("Table does not have a column with name \"%s\"", info.name);
165: 	}
166: 	for (idx_t c_idx = 0; c_idx < constraints.size(); c_idx++) {
167: 		auto copy = constraints[c_idx]->Copy();
168: 		switch (copy->type) {
169: 		case ConstraintType::NOT_NULL:
170: 			// NOT NULL constraint: no adjustments necessary
171: 			break;
172: 		case ConstraintType::CHECK: {
173: 			// CHECK constraint: need to rename column references that refer to the renamed column
174: 			auto &check = (CheckConstraint &)*copy;
175: 			RenameExpression(*check.expression, info);
176: 			break;
177: 		}
178: 		case ConstraintType::UNIQUE: {
179: 			// UNIQUE constraint: possibly need to rename columns
180: 			auto &unique = (UniqueConstraint &)*copy;
181: 			for (idx_t i = 0; i < unique.columns.size(); i++) {
182: 				if (unique.columns[i] == info.old_name) {
183: 					unique.columns[i] = info.new_name;
184: 				}
185: 			}
186: 			break;
187: 		}
188: 		default:
189: 			throw InternalException("Unsupported constraint for entry!");
190: 		}
191: 		create_info->constraints.push_back(move(copy));
192: 	}
193: 	auto binder = Binder::CreateBinder(context);
194: 	auto bound_create_info = binder->BindCreateTableInfo(move(create_info));
195: 	return make_unique<TableCatalogEntry>(catalog, schema, (BoundCreateTableInfo *)bound_create_info.get(), storage);
196: }
197: 
198: unique_ptr<CatalogEntry> TableCatalogEntry::AddColumn(ClientContext &context, AddColumnInfo &info) {
199: 	auto create_info = make_unique<CreateTableInfo>(schema->name, name);
200: 	create_info->temporary = temporary;
201: 	for (idx_t i = 0; i < columns.size(); i++) {
202: 		create_info->columns.push_back(columns[i].Copy());
203: 	}
204: 	info.new_column.oid = columns.size();
205: 	create_info->columns.push_back(info.new_column.Copy());
206: 
207: 	auto binder = Binder::CreateBinder(context);
208: 	auto bound_create_info = binder->BindCreateTableInfo(move(create_info));
209: 	auto new_storage =
210: 	    make_shared<DataTable>(context, *storage, info.new_column, bound_create_info->bound_defaults.back().get());
211: 	return make_unique<TableCatalogEntry>(catalog, schema, (BoundCreateTableInfo *)bound_create_info.get(),
212: 	                                      new_storage);
213: }
214: 
215: unique_ptr<CatalogEntry> TableCatalogEntry::RemoveColumn(ClientContext &context, RemoveColumnInfo &info) {
216: 	idx_t removed_index = INVALID_INDEX;
217: 	auto create_info = make_unique<CreateTableInfo>(schema->name, name);
218: 	create_info->temporary = temporary;
219: 	for (idx_t i = 0; i < columns.size(); i++) {
220: 		if (columns[i].name == info.removed_column) {
221: 			D_ASSERT(removed_index == INVALID_INDEX);
222: 			removed_index = i;
223: 			continue;
224: 		}
225: 		create_info->columns.push_back(columns[i].Copy());
226: 	}
227: 	if (removed_index == INVALID_INDEX) {
228: 		if (!info.if_exists) {
229: 			throw CatalogException("Table does not have a column with name \"%s\"", info.removed_column);
230: 		}
231: 		return nullptr;
232: 	}
233: 	if (create_info->columns.empty()) {
234: 		throw CatalogException("Cannot drop column: table only has one column remaining!");
235: 	}
236: 	// handle constraints for the new table
237: 	D_ASSERT(constraints.size() == bound_constraints.size());
238: 	for (idx_t constr_idx = 0; constr_idx < constraints.size(); constr_idx++) {
239: 		auto &constraint = constraints[constr_idx];
240: 		auto &bound_constraint = bound_constraints[constr_idx];
241: 		switch (bound_constraint->type) {
242: 		case ConstraintType::NOT_NULL: {
243: 			auto &not_null_constraint = (BoundNotNullConstraint &)*bound_constraint;
244: 			if (not_null_constraint.index != removed_index) {
245: 				// the constraint is not about this column: we need to copy it
246: 				// we might need to shift the index back by one though, to account for the removed column
247: 				idx_t new_index = not_null_constraint.index;
248: 				if (not_null_constraint.index > removed_index) {
249: 					new_index -= 1;
250: 				}
251: 				create_info->constraints.push_back(make_unique<NotNullConstraint>(new_index));
252: 			}
253: 			break;
254: 		}
255: 		case ConstraintType::CHECK: {
256: 			// CHECK constraint
257: 			auto &bound_check = (BoundCheckConstraint &)*bound_constraint;
258: 			// check if the removed column is part of the check constraint
259: 			if (bound_check.bound_columns.find(removed_index) != bound_check.bound_columns.end()) {
260: 				if (bound_check.bound_columns.size() > 1) {
261: 					// CHECK constraint that concerns mult
262: 					throw CatalogException(
263: 					    "Cannot drop column \"%s\" because there is a CHECK constraint that depends on it",
264: 					    info.removed_column);
265: 				} else {
266: 					// CHECK constraint that ONLY concerns this column, strip the constraint
267: 				}
268: 			} else {
269: 				// check constraint does not concern the removed column: simply re-add it
270: 				create_info->constraints.push_back(constraint->Copy());
271: 			}
272: 			break;
273: 		}
274: 		case ConstraintType::UNIQUE: {
275: 			auto copy = constraint->Copy();
276: 			auto &unique = (UniqueConstraint &)*copy;
277: 			if (unique.index != INVALID_INDEX) {
278: 				if (unique.index == removed_index) {
279: 					throw CatalogException(
280: 					    "Cannot drop column \"%s\" because there is a UNIQUE constraint that depends on it",
281: 					    info.removed_column);
282: 				} else if (unique.index > removed_index) {
283: 					unique.index--;
284: 				}
285: 			}
286: 			create_info->constraints.push_back(move(copy));
287: 			break;
288: 		}
289: 		default:
290: 			throw InternalException("Unsupported constraint for entry!");
291: 		}
292: 	}
293: 
294: 	auto binder = Binder::CreateBinder(context);
295: 	auto bound_create_info = binder->BindCreateTableInfo(move(create_info));
296: 	auto new_storage = make_shared<DataTable>(context, *storage, removed_index);
297: 	return make_unique<TableCatalogEntry>(catalog, schema, (BoundCreateTableInfo *)bound_create_info.get(),
298: 	                                      new_storage);
299: }
300: 
301: unique_ptr<CatalogEntry> TableCatalogEntry::SetDefault(ClientContext &context, SetDefaultInfo &info) {
302: 	auto create_info = make_unique<CreateTableInfo>(schema->name, name);
303: 	bool found = false;
304: 	for (idx_t i = 0; i < columns.size(); i++) {
305: 		auto copy = columns[i].Copy();
306: 		if (info.column_name == copy.name) {
307: 			// set the default value of this column
308: 			copy.default_value = info.expression ? info.expression->Copy() : nullptr;
309: 			found = true;
310: 		}
311: 		create_info->columns.push_back(move(copy));
312: 	}
313: 	if (!found) {
314: 		throw BinderException("Table \"%s\" does not have a column with name \"%s\"", info.name, info.column_name);
315: 	}
316: 
317: 	for (idx_t i = 0; i < constraints.size(); i++) {
318: 		auto constraint = constraints[i]->Copy();
319: 		create_info->constraints.push_back(move(constraint));
320: 	}
321: 
322: 	auto binder = Binder::CreateBinder(context);
323: 	auto bound_create_info = binder->BindCreateTableInfo(move(create_info));
324: 	return make_unique<TableCatalogEntry>(catalog, schema, (BoundCreateTableInfo *)bound_create_info.get(), storage);
325: }
326: 
327: unique_ptr<CatalogEntry> TableCatalogEntry::ChangeColumnType(ClientContext &context, ChangeColumnTypeInfo &info) {
328: 	auto create_info = make_unique<CreateTableInfo>(schema->name, name);
329: 	idx_t change_idx = INVALID_INDEX;
330: 	for (idx_t i = 0; i < columns.size(); i++) {
331: 		auto copy = columns[i].Copy();
332: 		if (info.column_name == copy.name) {
333: 			// set the default value of this column
334: 			change_idx = i;
335: 			copy.type = info.target_type;
336: 		}
337: 		create_info->columns.push_back(move(copy));
338: 	}
339: 	if (change_idx == INVALID_INDEX) {
340: 		throw BinderException("Table \"%s\" does not have a column with name \"%s\"", info.name, info.column_name);
341: 	}
342: 
343: 	for (idx_t i = 0; i < constraints.size(); i++) {
344: 		auto constraint = constraints[i]->Copy();
345: 		switch (constraint->type) {
346: 		case ConstraintType::CHECK: {
347: 			auto &bound_check = (BoundCheckConstraint &)*bound_constraints[i];
348: 			if (bound_check.bound_columns.find(change_idx) != bound_check.bound_columns.end()) {
349: 				throw BinderException("Cannot change the type of a column that has a CHECK constraint specified");
350: 			}
351: 			break;
352: 		}
353: 		case ConstraintType::NOT_NULL:
354: 			break;
355: 		case ConstraintType::UNIQUE: {
356: 			auto &bound_unique = (BoundUniqueConstraint &)*bound_constraints[i];
357: 			if (bound_unique.key_set.find(change_idx) != bound_unique.key_set.end()) {
358: 				throw BinderException(
359: 				    "Cannot change the type of a column that has a UNIQUE or PRIMARY KEY constraint specified");
360: 			}
361: 			break;
362: 		}
363: 		default:
364: 			throw InternalException("Unsupported constraint for entry!");
365: 		}
366: 		create_info->constraints.push_back(move(constraint));
367: 	}
368: 
369: 	auto binder = Binder::CreateBinder(context);
370: 	// bind the specified expression
371: 	vector<column_t> bound_columns;
372: 	AlterBinder expr_binder(*binder, context, name, columns, bound_columns, info.target_type);
373: 	auto expression = info.expression->Copy();
374: 	auto bound_expression = expr_binder.Bind(expression);
375: 	auto bound_create_info = binder->BindCreateTableInfo(move(create_info));
376: 	if (bound_columns.empty()) {
377: 		bound_columns.push_back(COLUMN_IDENTIFIER_ROW_ID);
378: 	}
379: 
380: 	auto new_storage =
381: 	    make_shared<DataTable>(context, *storage, change_idx, info.target_type, move(bound_columns), *bound_expression);
382: 	return make_unique<TableCatalogEntry>(catalog, schema, (BoundCreateTableInfo *)bound_create_info.get(),
383: 	                                      new_storage);
384: }
385: 
386: ColumnDefinition &TableCatalogEntry::GetColumn(const string &name) {
387: 	auto entry = name_map.find(name);
388: 	if (entry == name_map.end() || entry->second == COLUMN_IDENTIFIER_ROW_ID) {
389: 		throw CatalogException("Column with name %s does not exist!", name);
390: 	}
391: 	return columns[entry->second];
392: }
393: 
394: vector<LogicalType> TableCatalogEntry::GetTypes() {
395: 	vector<LogicalType> types;
396: 	for (auto &it : columns) {
397: 		types.push_back(it.type);
398: 	}
399: 	return types;
400: }
401: 
402: void TableCatalogEntry::Serialize(Serializer &serializer) {
403: 	D_ASSERT(!internal);
404: 	serializer.WriteString(schema->name);
405: 	serializer.WriteString(name);
406: 	D_ASSERT(columns.size() <= NumericLimits<uint32_t>::Maximum());
407: 	serializer.Write<uint32_t>((uint32_t)columns.size());
408: 	for (auto &column : columns) {
409: 		column.Serialize(serializer);
410: 	}
411: 	D_ASSERT(constraints.size() <= NumericLimits<uint32_t>::Maximum());
412: 	serializer.Write<uint32_t>((uint32_t)constraints.size());
413: 	for (auto &constraint : constraints) {
414: 		constraint->Serialize(serializer);
415: 	}
416: }
417: 
418: string TableCatalogEntry::ToSQL() {
419: 	std::stringstream ss;
420: 
421: 	ss << "CREATE TABLE ";
422: 
423: 	if (schema->name != DEFAULT_SCHEMA) {
424: 		ss << KeywordHelper::WriteOptionallyQuoted(schema->name) << ".";
425: 	}
426: 
427: 	ss << KeywordHelper::WriteOptionallyQuoted(name) << "(";
428: 
429: 	// find all columns that have NOT NULL specified, but are NOT primary key columns
430: 	unordered_set<idx_t> not_null_columns;
431: 	unordered_set<idx_t> unique_columns;
432: 	unordered_set<idx_t> pk_columns;
433: 	unordered_set<string> multi_key_pks;
434: 	vector<string> extra_constraints;
435: 	for (auto &constraint : constraints) {
436: 		if (constraint->type == ConstraintType::NOT_NULL) {
437: 			auto &not_null = (NotNullConstraint &)*constraint;
438: 			not_null_columns.insert(not_null.index);
439: 		} else if (constraint->type == ConstraintType::UNIQUE) {
440: 			auto &pk = (UniqueConstraint &)*constraint;
441: 			vector<string> constraint_columns = pk.columns;
442: 			if (pk.index != INVALID_INDEX) {
443: 				// no columns specified: single column constraint
444: 				if (pk.is_primary_key) {
445: 					pk_columns.insert(pk.index);
446: 				} else {
447: 					unique_columns.insert(pk.index);
448: 				}
449: 			} else {
450: 				// multi-column constraint, this constraint needs to go at the end after all columns
451: 				if (pk.is_primary_key) {
452: 					// multi key pk column: insert set of columns into multi_key_pks
453: 					for (auto &col : pk.columns) {
454: 						multi_key_pks.insert(col);
455: 					}
456: 				}
457: 				extra_constraints.push_back(constraint->ToString());
458: 			}
459: 		} else {
460: 			extra_constraints.push_back(constraint->ToString());
461: 		}
462: 	}
463: 
464: 	for (idx_t i = 0; i < columns.size(); i++) {
465: 		if (i > 0) {
466: 			ss << ", ";
467: 		}
468: 		auto &column = columns[i];
469: 		ss << KeywordHelper::WriteOptionallyQuoted(column.name) << " " << column.type.ToString();
470: 		bool not_null = not_null_columns.find(column.oid) != not_null_columns.end();
471: 		bool is_single_key_pk = pk_columns.find(column.oid) != pk_columns.end();
472: 		bool is_multi_key_pk = multi_key_pks.find(column.name) != multi_key_pks.end();
473: 		bool is_unique = unique_columns.find(column.oid) != unique_columns.end();
474: 		if (not_null && !is_single_key_pk && !is_multi_key_pk) {
475: 			// NOT NULL but not a primary key column
476: 			ss << " NOT NULL";
477: 		}
478: 		if (is_single_key_pk) {
479: 			// single column pk: insert constraint here
480: 			ss << " PRIMARY KEY";
481: 		}
482: 		if (is_unique) {
483: 			// single column unique: insert constraint here
484: 			ss << " UNIQUE";
485: 		}
486: 		if (column.default_value) {
487: 			ss << " DEFAULT(" << column.default_value->ToString() << ")";
488: 		}
489: 	}
490: 	// print any extra constraints that still need to be printed
491: 	for (auto &extra_constraint : extra_constraints) {
492: 		ss << ", ";
493: 		ss << extra_constraint;
494: 	}
495: 
496: 	ss << ");";
497: 	return ss.str();
498: }
499: 
500: unique_ptr<CreateTableInfo> TableCatalogEntry::Deserialize(Deserializer &source) {
501: 	auto info = make_unique<CreateTableInfo>();
502: 
503: 	info->schema = source.Read<string>();
504: 	info->table = source.Read<string>();
505: 	auto column_count = source.Read<uint32_t>();
506: 
507: 	for (uint32_t i = 0; i < column_count; i++) {
508: 		auto column = ColumnDefinition::Deserialize(source);
509: 		info->columns.push_back(move(column));
510: 	}
511: 	auto constraint_count = source.Read<uint32_t>();
512: 
513: 	for (uint32_t i = 0; i < constraint_count; i++) {
514: 		auto constraint = Constraint::Deserialize(source);
515: 		info->constraints.push_back(move(constraint));
516: 	}
517: 	return info;
518: }
519: 
520: unique_ptr<CatalogEntry> TableCatalogEntry::Copy(ClientContext &context) {
521: 	auto create_info = make_unique<CreateTableInfo>(schema->name, name);
522: 	for (idx_t i = 0; i < columns.size(); i++) {
523: 		create_info->columns.push_back(columns[i].Copy());
524: 	}
525: 
526: 	for (idx_t i = 0; i < constraints.size(); i++) {
527: 		auto constraint = constraints[i]->Copy();
528: 		create_info->constraints.push_back(move(constraint));
529: 	}
530: 
531: 	auto binder = Binder::CreateBinder(context);
532: 	auto bound_create_info = binder->BindCreateTableInfo(move(create_info));
533: 	return make_unique<TableCatalogEntry>(catalog, schema, (BoundCreateTableInfo *)bound_create_info.get(), storage);
534: }
535: 
536: void TableCatalogEntry::SetAsRoot() {
537: 	storage->SetAsRoot();
538: }
539: 
540: void TableCatalogEntry::CommitAlter(AlterInfo &info) {
541: 	D_ASSERT(info.type == AlterType::ALTER_TABLE);
542: 	auto &alter_table = (AlterTableInfo &)info;
543: 	string column_name;
544: 	switch (alter_table.alter_table_type) {
545: 	case AlterTableType::REMOVE_COLUMN: {
546: 		auto &remove_info = (RemoveColumnInfo &)alter_table;
547: 		column_name = remove_info.removed_column;
548: 		break;
549: 	}
550: 	case AlterTableType::ALTER_COLUMN_TYPE: {
551: 		auto &change_info = (ChangeColumnTypeInfo &)alter_table;
552: 		column_name = change_info.column_name;
553: 		break;
554: 	}
555: 	default:
556: 		break;
557: 	}
558: 	if (column_name.empty()) {
559: 		return;
560: 	}
561: 	idx_t removed_index = INVALID_INDEX;
562: 	for (idx_t i = 0; i < columns.size(); i++) {
563: 		if (columns[i].name == column_name) {
564: 			D_ASSERT(removed_index == INVALID_INDEX);
565: 			removed_index = i;
566: 			continue;
567: 		}
568: 	}
569: 	D_ASSERT(removed_index != INVALID_INDEX);
570: 	storage->CommitDropColumn(removed_index);
571: }
572: 
573: void TableCatalogEntry::CommitDrop() {
574: 	storage->CommitDropTable();
575: }
576: 
577: } // namespace duckdb
[end of src/catalog/catalog_entry/table_catalog_entry.cpp]
[start of src/include/duckdb/catalog/catalog_entry/table_catalog_entry.hpp]
1: //===----------------------------------------------------------------------===//
2: //                         DuckDB
3: //
4: // duckdb/catalog/catalog_entry/table_catalog_entry.hpp
5: //
6: //
7: //===----------------------------------------------------------------------===//
8: 
9: #pragma once
10: 
11: #include "duckdb/catalog/standard_entry.hpp"
12: #include "duckdb/common/unordered_map.hpp"
13: #include "duckdb/parser/column_definition.hpp"
14: #include "duckdb/parser/constraint.hpp"
15: #include "duckdb/planner/bound_constraint.hpp"
16: #include "duckdb/planner/expression.hpp"
17: 
18: namespace duckdb {
19: 
20: class ColumnStatistics;
21: class DataTable;
22: struct CreateTableInfo;
23: struct BoundCreateTableInfo;
24: 
25: struct RenameColumnInfo;
26: struct AddColumnInfo;
27: struct RemoveColumnInfo;
28: struct SetDefaultInfo;
29: struct ChangeColumnTypeInfo;
30: 
31: //! A table catalog entry
32: class TableCatalogEntry : public StandardEntry {
33: public:
34: 	//! Create a real TableCatalogEntry and initialize storage for it
35: 	TableCatalogEntry(Catalog *catalog, SchemaCatalogEntry *schema, BoundCreateTableInfo *info,
36: 	                  std::shared_ptr<DataTable> inherited_storage = nullptr);
37: 
38: 	//! A reference to the underlying storage unit used for this table
39: 	std::shared_ptr<DataTable> storage;
40: 	//! A list of columns that are part of this table
41: 	vector<ColumnDefinition> columns;
42: 	//! A list of constraints that are part of this table
43: 	vector<unique_ptr<Constraint>> constraints;
44: 	//! A list of constraints that are part of this table
45: 	vector<unique_ptr<BoundConstraint>> bound_constraints;
46: 	//! A map of column name to column index
47: 	unordered_map<string, column_t> name_map;
48: 
49: public:
50: 	unique_ptr<CatalogEntry> AlterEntry(ClientContext &context, AlterInfo *info) override;
51: 	//! Returns whether or not a column with the given name exists
52: 	bool ColumnExists(const string &name);
53: 	//! Returns a reference to the column of the specified name. Throws an
54: 	//! exception if the column does not exist.
55: 	ColumnDefinition &GetColumn(const string &name);
56: 	//! Returns a list of types of the table
57: 	vector<LogicalType> GetTypes();
58: 	string ToSQL() override;
59: 
60: 	//! Add lower case aliases to a name map (e.g. "Hello" -> "hello" is also acceptable)
61: 	static void AddLowerCaseAliases(unordered_map<string, column_t> &name_map);
62: 
63: 	//! Serialize the meta information of the TableCatalogEntry a serializer
64: 	virtual void Serialize(Serializer &serializer);
65: 	//! Deserializes to a CreateTableInfo
66: 	static unique_ptr<CreateTableInfo> Deserialize(Deserializer &source);
67: 
68: 	unique_ptr<CatalogEntry> Copy(ClientContext &context) override;
69: 
70: 	void SetAsRoot() override;
71: 
72: 	void CommitAlter(AlterInfo &info);
73: 	void CommitDrop();
74: 
75: private:
76: 	unique_ptr<CatalogEntry> RenameColumn(ClientContext &context, RenameColumnInfo &info);
77: 	unique_ptr<CatalogEntry> AddColumn(ClientContext &context, AddColumnInfo &info);
78: 	unique_ptr<CatalogEntry> RemoveColumn(ClientContext &context, RemoveColumnInfo &info);
79: 	unique_ptr<CatalogEntry> SetDefault(ClientContext &context, SetDefaultInfo &info);
80: 	unique_ptr<CatalogEntry> ChangeColumnType(ClientContext &context, ChangeColumnTypeInfo &info);
81: };
82: } // namespace duckdb
[end of src/include/duckdb/catalog/catalog_entry/table_catalog_entry.hpp]
[start of src/include/duckdb/planner/expression_binder/alter_binder.hpp]
1: //===----------------------------------------------------------------------===//
2: //                         DuckDB
3: //
4: // duckdb/planner/expression_binder/alter_binder.hpp
5: //
6: //
7: //===----------------------------------------------------------------------===//
8: 
9: #pragma once
10: 
11: #include "duckdb/parser/column_definition.hpp"
12: #include "duckdb/planner/expression_binder.hpp"
13: 
14: namespace duckdb {
15: //! The ALTER binder is responsible for binding an expression within alter statements
16: class AlterBinder : public ExpressionBinder {
17: public:
18: 	AlterBinder(Binder &binder, ClientContext &context, string table, vector<ColumnDefinition> &columns,
19: 	            vector<column_t> &bound_columns, LogicalType target_type);
20: 
21: 	string table;
22: 	vector<ColumnDefinition> &columns;
23: 	vector<column_t> &bound_columns;
24: 
25: protected:
26: 	BindResult BindExpression(unique_ptr<ParsedExpression> *expr_ptr, idx_t depth,
27: 	                          bool root_expression = false) override;
28: 
29: 	BindResult BindColumn(ColumnRefExpression &expr);
30: 
31: 	string UnsupportedAggregateMessage() override;
32: };
33: 
34: } // namespace duckdb
[end of src/include/duckdb/planner/expression_binder/alter_binder.hpp]
[start of src/include/duckdb/planner/table_binding.hpp]
1: //===----------------------------------------------------------------------===//
2: //                         DuckDB
3: //
4: // duckdb/planner/table_binding.hpp
5: //
6: //
7: //===----------------------------------------------------------------------===//
8: 
9: #pragma once
10: 
11: #include "duckdb/common/common.hpp"
12: #include "duckdb/common/unordered_map.hpp"
13: #include "duckdb/parser/column_definition.hpp"
14: #include "duckdb/parser/parsed_expression.hpp"
15: #include "duckdb/planner/expression_binder.hpp"
16: 
17: namespace duckdb {
18: class BindContext;
19: class BoundQueryNode;
20: class ColumnRefExpression;
21: class SubqueryRef;
22: class LogicalGet;
23: class TableCatalogEntry;
24: class TableFunctionCatalogEntry;
25: class BoundTableFunction;
26: 
27: //! A Binding represents a binding to a table, table-producing function or subquery with a specified table index.
28: struct Binding {
29: 	Binding(const string &alias, vector<LogicalType> types, vector<string> names, idx_t index);
30: 	virtual ~Binding() = default;
31: 
32: 	//! The alias of the binding
33: 	string alias;
34: 	//! The table index of the binding
35: 	idx_t index;
36: 	vector<LogicalType> types;
37: 	//! Column names of the subquery
38: 	vector<string> names;
39: 	//! Name -> index for the names
40: 	unordered_map<string, column_t> name_map;
41: 
42: public:
43: 	bool HasMatchingBinding(const string &column_name);
44: 	virtual BindResult Bind(ColumnRefExpression &colref, idx_t depth);
45: };
46: 
47: //! TableBinding is exactly like the Binding, except it keeps track of which columns were bound in the linked LogicalGet
48: //! node for projection pushdown purposes.
49: struct TableBinding : public Binding {
50: 	TableBinding(const string &alias, vector<LogicalType> types, vector<string> names, LogicalGet &get, idx_t index,
51: 	             bool add_row_id = false);
52: 
53: 	//! the underlying LogicalGet
54: 	LogicalGet &get;
55: 
56: public:
57: 	BindResult Bind(ColumnRefExpression &colref, idx_t depth) override;
58: };
59: 
60: //! MacroBinding is like the Binding, except the alias and index are set by default. Used for binding Macro
61: //! Params/Arguments.
62: struct MacroBinding : public Binding {
63: 	MacroBinding(vector<LogicalType> types_p, vector<string> names_p, string macro_name);
64: 
65: 	//! Arguments
66: 	vector<unique_ptr<ParsedExpression>> arguments;
67: 	//! The name of the macro
68: 	string macro_name;
69: 
70: public:
71: 	BindResult Bind(ColumnRefExpression &colref, idx_t depth) override;
72: 
73: 	//! Given the parameter colref, returns a copy of the argument that was supplied for this parameter
74: 	unique_ptr<ParsedExpression> ParamToArg(ColumnRefExpression &colref);
75: };
76: 
77: } // namespace duckdb
[end of src/include/duckdb/planner/table_binding.hpp]
[start of src/planner/expression_binder/alter_binder.cpp]
1: #include "duckdb/planner/expression_binder/alter_binder.hpp"
2: 
3: #include "duckdb/parser/expression/columnref_expression.hpp"
4: #include "duckdb/planner/expression/bound_reference_expression.hpp"
5: 
6: namespace duckdb {
7: 
8: AlterBinder::AlterBinder(Binder &binder, ClientContext &context, string table, vector<ColumnDefinition> &columns,
9:                          vector<column_t> &bound_columns, LogicalType target_type)
10:     : ExpressionBinder(binder, context), table(move(table)), columns(columns), bound_columns(bound_columns) {
11: 	this->target_type = move(target_type);
12: }
13: 
14: BindResult AlterBinder::BindExpression(unique_ptr<ParsedExpression> *expr_ptr, idx_t depth, bool root_expression) {
15: 	auto &expr = **expr_ptr;
16: 	switch (expr.GetExpressionClass()) {
17: 	case ExpressionClass::WINDOW:
18: 		return BindResult("window functions are not allowed in alter statement");
19: 	case ExpressionClass::SUBQUERY:
20: 		return BindResult("cannot use subquery in alter statement");
21: 	case ExpressionClass::COLUMN_REF:
22: 		return BindColumn((ColumnRefExpression &)expr);
23: 	default:
24: 		return ExpressionBinder::BindExpression(expr_ptr, depth);
25: 	}
26: }
27: 
28: string AlterBinder::UnsupportedAggregateMessage() {
29: 	return "aggregate functions are not allowed in alter statement";
30: }
31: 
32: BindResult AlterBinder::BindColumn(ColumnRefExpression &colref) {
33: 	if (!colref.table_name.empty() && colref.table_name != table) {
34: 		throw BinderException("Cannot reference table %s from within alter statement for table %s!", colref.table_name,
35: 		                      table);
36: 	}
37: 	for (idx_t i = 0; i < columns.size(); i++) {
38: 		if (colref.column_name == columns[i].name) {
39: 			bound_columns.push_back(i);
40: 			return BindResult(make_unique<BoundReferenceExpression>(columns[i].type, bound_columns.size() - 1));
41: 		}
42: 	}
43: 	throw BinderException("Table does not contain column %s referenced in alter statement!", colref.column_name);
44: }
45: 
46: } // namespace duckdb
[end of src/planner/expression_binder/alter_binder.cpp]
[start of src/planner/table_binding.cpp]
1: #include "duckdb/planner/table_binding.hpp"
2: 
3: #include "duckdb/common/string_util.hpp"
4: #include "duckdb/catalog/catalog_entry/table_catalog_entry.hpp"
5: #include "duckdb/catalog/catalog_entry/table_function_catalog_entry.hpp"
6: #include "duckdb/parser/expression/columnref_expression.hpp"
7: #include "duckdb/parser/tableref/subqueryref.hpp"
8: #include "duckdb/planner/bind_context.hpp"
9: #include "duckdb/planner/bound_query_node.hpp"
10: #include "duckdb/planner/expression/bound_columnref_expression.hpp"
11: #include "duckdb/planner/operator/logical_get.hpp"
12: 
13: namespace duckdb {
14: 
15: Binding::Binding(const string &alias, vector<LogicalType> coltypes, vector<string> colnames, idx_t index)
16:     : alias(alias), index(index), types(move(coltypes)), names(move(colnames)) {
17: 	D_ASSERT(types.size() == names.size());
18: 	for (idx_t i = 0; i < names.size(); i++) {
19: 		auto &name = names[i];
20: 		D_ASSERT(!name.empty());
21: 		if (name_map.find(name) != name_map.end()) {
22: 			throw BinderException("table \"%s\" has duplicate column name \"%s\"", alias, name);
23: 		}
24: 		name_map[name] = i;
25: 	}
26: 	TableCatalogEntry::AddLowerCaseAliases(name_map);
27: }
28: 
29: bool Binding::HasMatchingBinding(const string &column_name) {
30: 	auto entry = name_map.find(column_name);
31: 	return entry != name_map.end();
32: }
33: 
34: BindResult Binding::Bind(ColumnRefExpression &colref, idx_t depth) {
35: 	auto column_entry = name_map.find(colref.column_name);
36: 	if (column_entry == name_map.end()) {
37: 		return BindResult(StringUtil::Format("Values list \"%s\" does not have a column named \"%s\"", alias.c_str(),
38: 		                                     colref.column_name.c_str()));
39: 	}
40: 	ColumnBinding binding;
41: 	binding.table_index = index;
42: 	binding.column_index = column_entry->second;
43: 	LogicalType sql_type = types[column_entry->second];
44: 	if (colref.alias.empty()) {
45: 		colref.alias = names[column_entry->second];
46: 	}
47: 	return BindResult(make_unique<BoundColumnRefExpression>(colref.GetName(), sql_type, binding, depth));
48: }
49: 
50: TableBinding::TableBinding(const string &alias, vector<LogicalType> types_p, vector<string> names_p, LogicalGet &get,
51:                            idx_t index, bool add_row_id)
52:     : Binding(alias, move(types_p), move(names_p), index), get(get) {
53: 	if (add_row_id) {
54: 		if (name_map.find("rowid") == name_map.end()) {
55: 			name_map["rowid"] = COLUMN_IDENTIFIER_ROW_ID;
56: 		}
57: 	}
58: }
59: 
60: BindResult TableBinding::Bind(ColumnRefExpression &colref, idx_t depth) {
61: 	auto entry = name_map.find(colref.column_name);
62: 	if (entry == name_map.end()) {
63: 		return BindResult(StringUtil::Format("Table \"%s\" does not have a column named \"%s\"", colref.table_name,
64: 		                                     colref.column_name));
65: 	}
66: 	auto col_index = entry->second;
67: 	// fetch the type of the column
68: 	LogicalType col_type;
69: 	if (entry->second == COLUMN_IDENTIFIER_ROW_ID) {
70: 		// row id: BIGINT type
71: 		col_type = LogicalType::BIGINT;
72: 	} else {
73: 		// normal column: fetch type from base column
74: 		col_type = types[col_index];
75: 		if (colref.alias.empty()) {
76: 			colref.alias = names[entry->second];
77: 		}
78: 	}
79: 
80: 	auto &column_ids = get.column_ids;
81: 	// check if the entry already exists in the column list for the table
82: 	ColumnBinding binding;
83: 
84: 	binding.column_index = column_ids.size();
85: 	for (idx_t i = 0; i < column_ids.size(); i++) {
86: 		if (column_ids[i] == col_index) {
87: 			binding.column_index = i;
88: 			break;
89: 		}
90: 	}
91: 	if (binding.column_index == column_ids.size()) {
92: 		// column binding not found: add it to the list of bindings
93: 		column_ids.push_back(col_index);
94: 	}
95: 	binding.table_index = index;
96: 	return BindResult(make_unique<BoundColumnRefExpression>(colref.GetName(), col_type, binding, depth));
97: }
98: 
99: MacroBinding::MacroBinding(vector<LogicalType> types_p, vector<string> names_p, string macro_name_p)
100:     : Binding("0_macro_parameters", move(types_p), move(names_p), -1), macro_name(move(macro_name_p)) {
101: }
102: 
103: BindResult MacroBinding::Bind(ColumnRefExpression &colref, idx_t depth) {
104: 	auto entry = name_map.find(colref.column_name);
105: 	if (entry == name_map.end()) {
106: 		return BindResult(
107: 		    StringUtil::Format("Macro \"%s\" does not have a parameter named \"%s\"", macro_name, colref.column_name));
108: 	}
109: 	ColumnBinding binding;
110: 	binding.table_index = index;
111: 	binding.column_index = entry->second;
112: 
113: 	// we are binding a parameter to create the macro, no arguments are supplied
114: 	return BindResult(make_unique<BoundColumnRefExpression>(colref.GetName(), types[entry->second], binding, depth));
115: }
116: 
117: unique_ptr<ParsedExpression> MacroBinding::ParamToArg(ColumnRefExpression &colref) {
118: 	auto entry = name_map.find(colref.column_name);
119: 	if (entry == name_map.end()) {
120: 		throw BinderException("Macro \"%s\" does not have a parameter named \"%s\"", macro_name, colref.column_name);
121: 	}
122: 	auto arg = arguments[entry->second]->Copy();
123: 	arg->alias = colref.alias;
124: 	return arg;
125: }
126: 
127: } // namespace duckdb
[end of src/planner/table_binding.cpp]
[start of third_party/libpg_query/grammar/statements/alter_table.y]
1: /*****************************************************************************
2:  *
3:  *	ALTER [ TABLE | INDEX | SEQUENCE | VIEW | MATERIALIZED VIEW ] variations
4:  *
5:  * Note: we accept all subcommands for each of the five variants, and sort
6:  * out what's really legal at execution time.
7:  *****************************************************************************/
8: AlterTableStmt:
9: 			ALTER TABLE relation_expr alter_table_cmds
10: 				{
11: 					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
12: 					n->relation = $3;
13: 					n->cmds = $4;
14: 					n->relkind = PG_OBJECT_TABLE;
15: 					n->missing_ok = false;
16: 					$$ = (PGNode *)n;
17: 				}
18: 		|	ALTER TABLE IF_P EXISTS relation_expr alter_table_cmds
19: 				{
20: 					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
21: 					n->relation = $5;
22: 					n->cmds = $6;
23: 					n->relkind = PG_OBJECT_TABLE;
24: 					n->missing_ok = true;
25: 					$$ = (PGNode *)n;
26: 				}
27: 		|	ALTER INDEX qualified_name alter_table_cmds
28: 				{
29: 					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
30: 					n->relation = $3;
31: 					n->cmds = $4;
32: 					n->relkind = PG_OBJECT_INDEX;
33: 					n->missing_ok = false;
34: 					$$ = (PGNode *)n;
35: 				}
36: 		|	ALTER INDEX IF_P EXISTS qualified_name alter_table_cmds
37: 				{
38: 					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
39: 					n->relation = $5;
40: 					n->cmds = $6;
41: 					n->relkind = PG_OBJECT_INDEX;
42: 					n->missing_ok = true;
43: 					$$ = (PGNode *)n;
44: 				}
45: 		|	ALTER SEQUENCE qualified_name alter_table_cmds
46: 				{
47: 					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
48: 					n->relation = $3;
49: 					n->cmds = $4;
50: 					n->relkind = PG_OBJECT_SEQUENCE;
51: 					n->missing_ok = false;
52: 					$$ = (PGNode *)n;
53: 				}
54: 		|	ALTER SEQUENCE IF_P EXISTS qualified_name alter_table_cmds
55: 				{
56: 					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
57: 					n->relation = $5;
58: 					n->cmds = $6;
59: 					n->relkind = PG_OBJECT_SEQUENCE;
60: 					n->missing_ok = true;
61: 					$$ = (PGNode *)n;
62: 				}
63: 		|	ALTER VIEW qualified_name alter_table_cmds
64: 				{
65: 					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
66: 					n->relation = $3;
67: 					n->cmds = $4;
68: 					n->relkind = PG_OBJECT_VIEW;
69: 					n->missing_ok = false;
70: 					$$ = (PGNode *)n;
71: 				}
72: 		|	ALTER VIEW IF_P EXISTS qualified_name alter_table_cmds
73: 				{
74: 					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
75: 					n->relation = $5;
76: 					n->cmds = $6;
77: 					n->relkind = PG_OBJECT_VIEW;
78: 					n->missing_ok = true;
79: 					$$ = (PGNode *)n;
80: 				}
81: 		;
82: 
83: 
84: alter_identity_column_option_list:
85: 			alter_identity_column_option
86: 				{ $$ = list_make1($1); }
87: 			| alter_identity_column_option_list alter_identity_column_option
88: 				{ $$ = lappend($1, $2); }
89: 		;
90: 
91: 
92: alter_column_default:
93: 			SET DEFAULT a_expr			{ $$ = $3; }
94: 			| DROP DEFAULT				{ $$ = NULL; }
95: 		;
96: 
97: 
98: alter_identity_column_option:
99: 			RESTART
100: 				{
101: 					$$ = makeDefElem("restart", NULL, @1);
102: 				}
103: 			| RESTART opt_with NumericOnly
104: 				{
105: 					$$ = makeDefElem("restart", (PGNode *)$3, @1);
106: 				}
107: 			| SET SeqOptElem
108: 				{
109: 					if (strcmp($2->defname, "as") == 0 ||
110: 						strcmp($2->defname, "restart") == 0 ||
111: 						strcmp($2->defname, "owned_by") == 0)
112: 						ereport(ERROR,
113: 								(errcode(PG_ERRCODE_SYNTAX_ERROR),
114: 								 errmsg("sequence option \"%s\" not supported here", $2->defname),
115: 								 parser_errposition(@2)));
116: 					$$ = $2;
117: 				}
118: 			| SET GENERATED generated_when
119: 				{
120: 					$$ = makeDefElem("generated", (PGNode *) makeInteger($3), @1);
121: 				}
122: 		;
123: 
124: 
125: alter_generic_option_list:
126: 			alter_generic_option_elem
127: 				{
128: 					$$ = list_make1($1);
129: 				}
130: 			| alter_generic_option_list ',' alter_generic_option_elem
131: 				{
132: 					$$ = lappend($1, $3);
133: 				}
134: 		;
135: 
136: 
137: alter_table_cmd:
138: 			/* ALTER TABLE <name> ADD <coldef> */
139: 			ADD_P columnDef
140: 				{
141: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
142: 					n->subtype = PG_AT_AddColumn;
143: 					n->def = $2;
144: 					n->missing_ok = false;
145: 					$$ = (PGNode *)n;
146: 				}
147: 			/* ALTER TABLE <name> ADD IF NOT EXISTS <coldef> */
148: 			| ADD_P IF_P NOT EXISTS columnDef
149: 				{
150: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
151: 					n->subtype = PG_AT_AddColumn;
152: 					n->def = $5;
153: 					n->missing_ok = true;
154: 					$$ = (PGNode *)n;
155: 				}
156: 			/* ALTER TABLE <name> ADD COLUMN <coldef> */
157: 			| ADD_P COLUMN columnDef
158: 				{
159: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
160: 					n->subtype = PG_AT_AddColumn;
161: 					n->def = $3;
162: 					n->missing_ok = false;
163: 					$$ = (PGNode *)n;
164: 				}
165: 			/* ALTER TABLE <name> ADD COLUMN IF NOT EXISTS <coldef> */
166: 			| ADD_P COLUMN IF_P NOT EXISTS columnDef
167: 				{
168: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
169: 					n->subtype = PG_AT_AddColumn;
170: 					n->def = $6;
171: 					n->missing_ok = true;
172: 					$$ = (PGNode *)n;
173: 				}
174: 			/* ALTER TABLE <name> ALTER [COLUMN] <colname> {SET DEFAULT <expr>|DROP DEFAULT} */
175: 			| ALTER opt_column ColId alter_column_default
176: 				{
177: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
178: 					n->subtype = PG_AT_ColumnDefault;
179: 					n->name = $3;
180: 					n->def = $4;
181: 					$$ = (PGNode *)n;
182: 				}
183: 			/* ALTER TABLE <name> ALTER [COLUMN] <colname> DROP NOT NULL */
184: 			| ALTER opt_column ColId DROP NOT NULL_P
185: 				{
186: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
187: 					n->subtype = PG_AT_DropNotNull;
188: 					n->name = $3;
189: 					$$ = (PGNode *)n;
190: 				}
191: 			/* ALTER TABLE <name> ALTER [COLUMN] <colname> SET NOT NULL */
192: 			| ALTER opt_column ColId SET NOT NULL_P
193: 				{
194: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
195: 					n->subtype = PG_AT_SetNotNull;
196: 					n->name = $3;
197: 					$$ = (PGNode *)n;
198: 				}
199: 			/* ALTER TABLE <name> ALTER [COLUMN] <colname> SET STATISTICS <SignedIconst> */
200: 			| ALTER opt_column ColId SET STATISTICS SignedIconst
201: 				{
202: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
203: 					n->subtype = PG_AT_SetStatistics;
204: 					n->name = $3;
205: 					n->def = (PGNode *) makeInteger($6);
206: 					$$ = (PGNode *)n;
207: 				}
208: 			/* ALTER TABLE <name> ALTER [COLUMN] <colname> SET ( column_parameter = value [, ... ] ) */
209: 			| ALTER opt_column ColId SET reloptions
210: 				{
211: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
212: 					n->subtype = PG_AT_SetOptions;
213: 					n->name = $3;
214: 					n->def = (PGNode *) $5;
215: 					$$ = (PGNode *)n;
216: 				}
217: 			/* ALTER TABLE <name> ALTER [COLUMN] <colname> RESET ( column_parameter = value [, ... ] ) */
218: 			| ALTER opt_column ColId RESET reloptions
219: 				{
220: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
221: 					n->subtype = PG_AT_ResetOptions;
222: 					n->name = $3;
223: 					n->def = (PGNode *) $5;
224: 					$$ = (PGNode *)n;
225: 				}
226: 			/* ALTER TABLE <name> ALTER [COLUMN] <colname> SET STORAGE <storagemode> */
227: 			| ALTER opt_column ColId SET STORAGE ColId
228: 				{
229: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
230: 					n->subtype = PG_AT_SetStorage;
231: 					n->name = $3;
232: 					n->def = (PGNode *) makeString($6);
233: 					$$ = (PGNode *)n;
234: 				}
235: 			/* ALTER TABLE <name> ALTER [COLUMN] <colname> ADD GENERATED ... AS IDENTITY ... */
236: 			| ALTER opt_column ColId ADD_P GENERATED generated_when AS IDENTITY_P OptParenthesizedSeqOptList
237: 				{
238: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
239: 					PGConstraint *c = makeNode(PGConstraint);
240: 
241: 					c->contype = PG_CONSTR_IDENTITY;
242: 					c->generated_when = $6;
243: 					c->options = $9;
244: 					c->location = @5;
245: 
246: 					n->subtype = PG_AT_AddIdentity;
247: 					n->name = $3;
248: 					n->def = (PGNode *) c;
249: 
250: 					$$ = (PGNode *)n;
251: 				}
252: 			/* ALTER TABLE <name> ALTER [COLUMN] <colname> SET <sequence options>/RESET */
253: 			| ALTER opt_column ColId alter_identity_column_option_list
254: 				{
255: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
256: 					n->subtype = PG_AT_SetIdentity;
257: 					n->name = $3;
258: 					n->def = (PGNode *) $4;
259: 					$$ = (PGNode *)n;
260: 				}
261: 			/* ALTER TABLE <name> ALTER [COLUMN] <colname> DROP IDENTITY */
262: 			| ALTER opt_column ColId DROP IDENTITY_P
263: 				{
264: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
265: 					n->subtype = AT_DropIdentity;
266: 					n->name = $3;
267: 					n->missing_ok = false;
268: 					$$ = (PGNode *)n;
269: 				}
270: 			/* ALTER TABLE <name> ALTER [COLUMN] <colname> DROP IDENTITY IF EXISTS */
271: 			| ALTER opt_column ColId DROP IDENTITY_P IF_P EXISTS
272: 				{
273: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
274: 					n->subtype = AT_DropIdentity;
275: 					n->name = $3;
276: 					n->missing_ok = true;
277: 					$$ = (PGNode *)n;
278: 				}
279: 			/* ALTER TABLE <name> DROP [COLUMN] IF EXISTS <colname> [RESTRICT|CASCADE] */
280: 			| DROP opt_column IF_P EXISTS ColId opt_drop_behavior
281: 				{
282: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
283: 					n->subtype = PG_AT_DropColumn;
284: 					n->name = $5;
285: 					n->behavior = $6;
286: 					n->missing_ok = true;
287: 					$$ = (PGNode *)n;
288: 				}
289: 			/* ALTER TABLE <name> DROP [COLUMN] <colname> [RESTRICT|CASCADE] */
290: 			| DROP opt_column ColId opt_drop_behavior
291: 				{
292: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
293: 					n->subtype = PG_AT_DropColumn;
294: 					n->name = $3;
295: 					n->behavior = $4;
296: 					n->missing_ok = false;
297: 					$$ = (PGNode *)n;
298: 				}
299: 			/*
300: 			 * ALTER TABLE <name> ALTER [COLUMN] <colname> [SET DATA] TYPE <typename>
301: 			 *		[ USING <expression> ]
302: 			 */
303: 			| ALTER opt_column ColId opt_set_data TYPE_P Typename opt_collate_clause alter_using
304: 				{
305: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
306: 					PGColumnDef *def = makeNode(PGColumnDef);
307: 					n->subtype = PG_AT_AlterColumnType;
308: 					n->name = $3;
309: 					n->def = (PGNode *) def;
310: 					/* We only use these fields of the PGColumnDef node */
311: 					def->typeName = $6;
312: 					def->collClause = (PGCollateClause *) $7;
313: 					def->raw_default = $8;
314: 					def->location = @3;
315: 					$$ = (PGNode *)n;
316: 				}
317: 			/* ALTER FOREIGN TABLE <name> ALTER [COLUMN] <colname> OPTIONS */
318: 			| ALTER opt_column ColId alter_generic_options
319: 				{
320: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
321: 					n->subtype = PG_AT_AlterColumnGenericOptions;
322: 					n->name = $3;
323: 					n->def = (PGNode *) $4;
324: 					$$ = (PGNode *)n;
325: 				}
326: 			/* ALTER TABLE <name> ADD CONSTRAINT ... */
327: 			| ADD_P TableConstraint
328: 				{
329: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
330: 					n->subtype = PG_AT_AddConstraint;
331: 					n->def = $2;
332: 					$$ = (PGNode *)n;
333: 				}
334: 			/* ALTER TABLE <name> ALTER CONSTRAINT ... */
335: 			| ALTER CONSTRAINT name ConstraintAttributeSpec
336: 				{
337: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
338: 					PGConstraint *c = makeNode(PGConstraint);
339: 					n->subtype = PG_AT_AlterConstraint;
340: 					n->def = (PGNode *) c;
341: 					c->contype = PG_CONSTR_FOREIGN; /* others not supported, yet */
342: 					c->conname = $3;
343: 					processCASbits($4, @4, "ALTER CONSTRAINT statement",
344: 									&c->deferrable,
345: 									&c->initdeferred,
346: 									NULL, NULL, yyscanner);
347: 					$$ = (PGNode *)n;
348: 				}
349: 			/* ALTER TABLE <name> VALIDATE CONSTRAINT ... */
350: 			| VALIDATE CONSTRAINT name
351: 				{
352: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
353: 					n->subtype = PG_AT_ValidateConstraint;
354: 					n->name = $3;
355: 					$$ = (PGNode *)n;
356: 				}
357: 			/* ALTER TABLE <name> DROP CONSTRAINT IF EXISTS <name> [RESTRICT|CASCADE] */
358: 			| DROP CONSTRAINT IF_P EXISTS name opt_drop_behavior
359: 				{
360: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
361: 					n->subtype = PG_AT_DropConstraint;
362: 					n->name = $5;
363: 					n->behavior = $6;
364: 					n->missing_ok = true;
365: 					$$ = (PGNode *)n;
366: 				}
367: 			/* ALTER TABLE <name> DROP CONSTRAINT <name> [RESTRICT|CASCADE] */
368: 			| DROP CONSTRAINT name opt_drop_behavior
369: 				{
370: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
371: 					n->subtype = PG_AT_DropConstraint;
372: 					n->name = $3;
373: 					n->behavior = $4;
374: 					n->missing_ok = false;
375: 					$$ = (PGNode *)n;
376: 				}
377: 			/* ALTER TABLE <name> SET LOGGED  */
378: 			| SET LOGGED
379: 				{
380: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
381: 					n->subtype = PG_AT_SetLogged;
382: 					$$ = (PGNode *)n;
383: 				}
384: 			/* ALTER TABLE <name> SET UNLOGGED  */
385: 			| SET UNLOGGED
386: 				{
387: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
388: 					n->subtype = PG_AT_SetUnLogged;
389: 					$$ = (PGNode *)n;
390: 				}
391: 			/* ALTER TABLE <name> SET (...) */
392: 			| SET reloptions
393: 				{
394: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
395: 					n->subtype = PG_AT_SetRelOptions;
396: 					n->def = (PGNode *)$2;
397: 					$$ = (PGNode *)n;
398: 				}
399: 			/* ALTER TABLE <name> RESET (...) */
400: 			| RESET reloptions
401: 				{
402: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
403: 					n->subtype = PG_AT_ResetRelOptions;
404: 					n->def = (PGNode *)$2;
405: 					$$ = (PGNode *)n;
406: 				}
407: 			| alter_generic_options
408: 				{
409: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
410: 					n->subtype = PG_AT_GenericOptions;
411: 					n->def = (PGNode *)$1;
412: 					$$ = (PGNode *) n;
413: 				}
414: 		;
415: 
416: 
417: alter_using:
418: 			USING a_expr				{ $$ = $2; }
419: 			| /* EMPTY */				{ $$ = NULL; }
420: 		;
421: 
422: 
423: alter_generic_option_elem:
424: 			generic_option_elem
425: 				{
426: 					$$ = $1;
427: 				}
428: 			| SET generic_option_elem
429: 				{
430: 					$$ = $2;
431: 					$$->defaction = PG_DEFELEM_SET;
432: 				}
433: 			| ADD_P generic_option_elem
434: 				{
435: 					$$ = $2;
436: 					$$->defaction = PG_DEFELEM_ADD;
437: 				}
438: 			| DROP generic_option_name
439: 				{
440: 					$$ = makeDefElemExtended(NULL, $2, NULL, DEFELEM_DROP, @2);
441: 				}
442: 		;
443: 
444: 
445: alter_table_cmds:
446: 			alter_table_cmd							{ $$ = list_make1($1); }
447: 			| alter_table_cmds ',' alter_table_cmd	{ $$ = lappend($1, $3); }
448: 		;
449: 
450: 
451: alter_generic_options:
452: 			OPTIONS	'(' alter_generic_option_list ')'		{ $$ = $3; }
453: 		;
454: 
455: 
456: opt_set_data: SET DATA_P							{ $$ = 1; }
457: 			| /*EMPTY*/								{ $$ = 0; }
458: 		;
[end of third_party/libpg_query/grammar/statements/alter_table.y]
[start of third_party/libpg_query/src_backend_parser_gram.cpp]
1: /* A Bison parser, made by GNU Bison 2.3.  */
2: 
3: /* Skeleton implementation for Bison's Yacc-like parsers in C
4: 
5:    Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004, 2005, 2006
6:    Free Software Foundation, Inc.
7: 
8:    This program is free software; you can redistribute it and/or modify
9:    it under the terms of the GNU General Public License as published by
10:    the Free Software Foundation; either version 2, or (at your option)
11:    any later version.
12: 
13:    This program is distributed in the hope that it will be useful,
14:    but WITHOUT ANY WARRANTY; without even the implied warranty of
15:    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
16:    GNU General Public License for more details.
17: 
18:    You should have received a copy of the GNU General Public License
19:    along with this program; if not, write to the Free Software
20:    Foundation, Inc., 51 Franklin Street, Fifth Floor,
21:    Boston, MA 02110-1301, USA.  */
22: 
23: /* As a special exception, you may create a larger work that contains
24:    part or all of the Bison parser skeleton and distribute that work
25:    under terms of your choice, so long as that work isn't itself a
26:    parser generator using the skeleton or a modified version thereof
27:    as a parser skeleton.  Alternatively, if you modify or redistribute
28:    the parser skeleton itself, you may (at your option) remove this
29:    special exception, which will cause the skeleton and the resulting
30:    Bison output files to be licensed under the GNU General Public
31:    License without this special exception.
32: 
33:    This special exception was added by the Free Software Foundation in
34:    version 2.2 of Bison.  */
35: 
36: /* C LALR(1) parser skeleton written by Richard Stallman, by
37:    simplifying the original so-called "semantic" parser.  */
38: 
39: /* All symbols defined below should begin with yy or YY, to avoid
40:    infringing on user name space.  This should be done even for local
41:    variables, as they might otherwise be expanded by user macros.
42:    There are some unavoidable exceptions within include files to
43:    define necessary library symbols; they are noted "INFRINGES ON
44:    USER NAME SPACE" below.  */
45: 
46: /* Identify Bison output.  */
47: #define YYBISON 1
48: 
49: /* Bison version.  */
50: #define YYBISON_VERSION "2.3"
51: 
52: /* Skeleton name.  */
53: #define YYSKELETON_NAME "yacc.c"
54: 
55: /* Pure parsers.  */
56: #define YYPURE 1
57: 
58: /* Using locations.  */
59: #define YYLSP_NEEDED 1
60: 
61: /* Substitute the variable and function names.  */
62: #define yyparse base_yyparse
63: #define yylex   base_yylex
64: #define yyerror base_yyerror
65: #define yylval  base_yylval
66: #define yychar  base_yychar
67: #define yydebug base_yydebug
68: #define yynerrs base_yynerrs
69: #define yylloc base_yylloc
70: 
71: /* Tokens.  */
72: #ifndef YYTOKENTYPE
73: # define YYTOKENTYPE
74:    /* Put the tokens into the symbol table, so that GDB and other debuggers
75:       know about them.  */
76:    enum yytokentype {
77:      IDENT = 258,
78:      FCONST = 259,
79:      SCONST = 260,
80:      BCONST = 261,
81:      XCONST = 262,
82:      Op = 263,
83:      ICONST = 264,
84:      PARAM = 265,
85:      TYPECAST = 266,
86:      DOT_DOT = 267,
87:      COLON_EQUALS = 268,
88:      EQUALS_GREATER = 269,
89:      LAMBDA_ARROW = 270,
90:      LESS_EQUALS = 271,
91:      GREATER_EQUALS = 272,
92:      NOT_EQUALS = 273,
93:      ABORT_P = 274,
94:      ABSOLUTE_P = 275,
95:      ACCESS = 276,
96:      ACTION = 277,
97:      ADD_P = 278,
98:      ADMIN = 279,
99:      AFTER = 280,
100:      AGGREGATE = 281,
101:      ALL = 282,
102:      ALSO = 283,
103:      ALTER = 284,
104:      ALWAYS = 285,
105:      ANALYSE = 286,
106:      ANALYZE = 287,
107:      AND = 288,
108:      ANY = 289,
109:      ARRAY = 290,
110:      AS = 291,
111:      ASC_P = 292,
112:      ASSERTION = 293,
113:      ASSIGNMENT = 294,
114:      ASYMMETRIC = 295,
115:      AT = 296,
116:      ATTACH = 297,
117:      ATTRIBUTE = 298,
118:      AUTHORIZATION = 299,
119:      BACKWARD = 300,
120:      BEFORE = 301,
121:      BEGIN_P = 302,
122:      BETWEEN = 303,
123:      BIGINT = 304,
124:      BINARY = 305,
125:      BIT = 306,
126:      BOOLEAN_P = 307,
127:      BOTH = 308,
128:      BY = 309,
129:      CACHE = 310,
130:      CALL_P = 311,
131:      CALLED = 312,
132:      CASCADE = 313,
133:      CASCADED = 314,
134:      CASE = 315,
135:      CAST = 316,
136:      CATALOG_P = 317,
137:      CHAIN = 318,
138:      CHAR_P = 319,
139:      CHARACTER = 320,
140:      CHARACTERISTICS = 321,
141:      CHECK_P = 322,
142:      CHECKPOINT = 323,
143:      CLASS = 324,
144:      CLOSE = 325,
145:      CLUSTER = 326,
146:      COALESCE = 327,
147:      COLLATE = 328,
148:      COLLATION = 329,
149:      COLUMN = 330,
150:      COLUMNS = 331,
151:      COMMENT = 332,
152:      COMMENTS = 333,
153:      COMMIT = 334,
154:      COMMITTED = 335,
155:      CONCURRENTLY = 336,
156:      CONFIGURATION = 337,
157:      CONFLICT = 338,
158:      CONNECTION = 339,
159:      CONSTRAINT = 340,
160:      CONSTRAINTS = 341,
161:      CONTENT_P = 342,
162:      CONTINUE_P = 343,
163:      CONVERSION_P = 344,
164:      COPY = 345,
165:      COST = 346,
166:      CREATE_P = 347,
167:      CROSS = 348,
168:      CSV = 349,
169:      CUBE = 350,
170:      CURRENT_P = 351,
171:      CURRENT_CATALOG = 352,
172:      CURRENT_DATE = 353,
173:      CURRENT_ROLE = 354,
174:      CURRENT_SCHEMA = 355,
175:      CURRENT_TIME = 356,
176:      CURRENT_TIMESTAMP = 357,
177:      CURRENT_USER = 358,
178:      CURSOR = 359,
179:      CYCLE = 360,
180:      DATA_P = 361,
181:      DATABASE = 362,
182:      DAY_P = 363,
183:      DAYS_P = 364,
184:      DEALLOCATE = 365,
185:      DEC = 366,
186:      DECIMAL_P = 367,
187:      DECLARE = 368,
188:      DEFAULT = 369,
189:      DEFAULTS = 370,
190:      DEFERRABLE = 371,
191:      DEFERRED = 372,
192:      DEFINER = 373,
193:      DELETE_P = 374,
194:      DELIMITER = 375,
195:      DELIMITERS = 376,
196:      DEPENDS = 377,
197:      DESC_P = 378,
198:      DESCRIBE = 379,
199:      DETACH = 380,
200:      DICTIONARY = 381,
201:      DISABLE_P = 382,
202:      DISCARD = 383,
203:      DISTINCT = 384,
204:      DO = 385,
205:      DOCUMENT_P = 386,
206:      DOMAIN_P = 387,
207:      DOUBLE_P = 388,
208:      DROP = 389,
209:      EACH = 390,
210:      ELSE = 391,
211:      ENABLE_P = 392,
212:      ENCODING = 393,
213:      ENCRYPTED = 394,
214:      END_P = 395,
215:      ENUM_P = 396,
216:      ESCAPE = 397,
217:      EVENT = 398,
218:      EXCEPT = 399,
219:      EXCLUDE = 400,
220:      EXCLUDING = 401,
221:      EXCLUSIVE = 402,
222:      EXECUTE = 403,
223:      EXISTS = 404,
224:      EXPLAIN = 405,
225:      EXPORT_P = 406,
226:      EXTENSION = 407,
227:      EXTERNAL = 408,
228:      EXTRACT = 409,
229:      FALSE_P = 410,
230:      FAMILY = 411,
231:      FETCH = 412,
232:      FILTER = 413,
233:      FIRST_P = 414,
234:      FLOAT_P = 415,
235:      FOLLOWING = 416,
236:      FOR = 417,
237:      FORCE = 418,
238:      FOREIGN = 419,
239:      FORWARD = 420,
240:      FREEZE = 421,
241:      FROM = 422,
242:      FULL = 423,
243:      FUNCTION = 424,
244:      FUNCTIONS = 425,
245:      GENERATED = 426,
246:      GLOB = 427,
247:      GLOBAL = 428,
248:      GRANT = 429,
249:      GRANTED = 430,
250:      GROUP_P = 431,
251:      GROUPING = 432,
252:      HANDLER = 433,
253:      HAVING = 434,
254:      HEADER_P = 435,
255:      HOLD = 436,
256:      HOUR_P = 437,
257:      HOURS_P = 438,
258:      IDENTITY_P = 439,
259:      IF_P = 440,
260:      ILIKE = 441,
261:      IMMEDIATE = 442,
262:      IMMUTABLE = 443,
263:      IMPLICIT_P = 444,
264:      IMPORT_P = 445,
265:      IN_P = 446,
266:      INCLUDING = 447,
267:      INCREMENT = 448,
268:      INDEX = 449,
269:      INDEXES = 450,
270:      INHERIT = 451,
271:      INHERITS = 452,
272:      INITIALLY = 453,
273:      INLINE_P = 454,
274:      INNER_P = 455,
275:      INOUT = 456,
276:      INPUT_P = 457,
277:      INSENSITIVE = 458,
278:      INSERT = 459,
279:      INSTEAD = 460,
280:      INT_P = 461,
281:      INTEGER = 462,
282:      INTERSECT = 463,
283:      INTERVAL = 464,
284:      INTO = 465,
285:      INVOKER = 466,
286:      IS = 467,
287:      ISNULL = 468,
288:      ISOLATION = 469,
289:      JOIN = 470,
290:      KEY = 471,
291:      LABEL = 472,
292:      LANGUAGE = 473,
293:      LARGE_P = 474,
294:      LAST_P = 475,
295:      LATERAL_P = 476,
296:      LEADING = 477,
297:      LEAKPROOF = 478,
298:      LEFT = 479,
299:      LEVEL = 480,
300:      LIKE = 481,
301:      LIMIT = 482,
302:      LISTEN = 483,
303:      LOAD = 484,
304:      LOCAL = 485,
305:      LOCALTIME = 486,
306:      LOCALTIMESTAMP = 487,
307:      LOCATION = 488,
308:      LOCK_P = 489,
309:      LOCKED = 490,
310:      LOGGED = 491,
311:      MACRO = 492,
312:      MAP = 493,
313:      MAPPING = 494,
314:      MATCH = 495,
315:      MATERIALIZED = 496,
316:      MAXVALUE = 497,
317:      METHOD = 498,
318:      MICROSECOND_P = 499,
319:      MICROSECONDS_P = 500,
320:      MILLISECOND_P = 501,
321:      MILLISECONDS_P = 502,
322:      MINUTE_P = 503,
323:      MINUTES_P = 504,
324:      MINVALUE = 505,
325:      MODE = 506,
326:      MONTH_P = 507,
327:      MONTHS_P = 508,
328:      MOVE = 509,
329:      NAME_P = 510,
330:      NAMES = 511,
331:      NATIONAL = 512,
332:      NATURAL = 513,
333:      NCHAR = 514,
334:      NEW = 515,
335:      NEXT = 516,
336:      NO = 517,
337:      NONE = 518,
338:      NOT = 519,
339:      NOTHING = 520,
340:      NOTIFY = 521,
341:      NOTNULL = 522,
342:      NOWAIT = 523,
343:      NULL_P = 524,
344:      NULLIF = 525,
345:      NULLS_P = 526,
346:      NUMERIC = 527,
347:      OBJECT_P = 528,
348:      OF = 529,
349:      OFF = 530,
350:      OFFSET = 531,
351:      OIDS = 532,
352:      OLD = 533,
353:      ON = 534,
354:      ONLY = 535,
355:      OPERATOR = 536,
356:      OPTION = 537,
357:      OPTIONS = 538,
358:      OR = 539,
359:      ORDER = 540,
360:      ORDINALITY = 541,
361:      OUT_P = 542,
362:      OUTER_P = 543,
363:      OVER = 544,
364:      OVERLAPS = 545,
365:      OVERLAY = 546,
366:      OVERRIDING = 547,
367:      OWNED = 548,
368:      OWNER = 549,
369:      PARALLEL = 550,
370:      PARSER = 551,
371:      PARTIAL = 552,
372:      PARTITION = 553,
373:      PASSING = 554,
374:      PASSWORD = 555,
375:      PERCENT = 556,
376:      PLACING = 557,
377:      PLANS = 558,
378:      POLICY = 559,
379:      POSITION = 560,
380:      PRAGMA_P = 561,
381:      PRECEDING = 562,
382:      PRECISION = 563,
383:      PREPARE = 564,
384:      PREPARED = 565,
385:      PRESERVE = 566,
386:      PRIMARY = 567,
387:      PRIOR = 568,
388:      PRIVILEGES = 569,
389:      PROCEDURAL = 570,
390:      PROCEDURE = 571,
391:      PROGRAM = 572,
392:      PUBLICATION = 573,
393:      QUOTE = 574,
394:      RANGE = 575,
395:      READ_P = 576,
396:      REAL = 577,
397:      REASSIGN = 578,
398:      RECHECK = 579,
399:      RECURSIVE = 580,
400:      REF = 581,
401:      REFERENCES = 582,
402:      REFERENCING = 583,
403:      REFRESH = 584,
404:      REINDEX = 585,
405:      RELATIVE_P = 586,
406:      RELEASE = 587,
407:      RENAME = 588,
408:      REPEATABLE = 589,
409:      REPLACE = 590,
410:      REPLICA = 591,
411:      RESET = 592,
412:      RESTART = 593,
413:      RESTRICT = 594,
414:      RETURNING = 595,
415:      RETURNS = 596,
416:      REVOKE = 597,
417:      RIGHT = 598,
418:      ROLE = 599,
419:      ROLLBACK = 600,
420:      ROLLUP = 601,
421:      ROW = 602,
422:      ROWS = 603,
423:      RULE = 604,
424:      SAMPLE = 605,
425:      SAVEPOINT = 606,
426:      SCHEMA = 607,
427:      SCHEMAS = 608,
428:      SCROLL = 609,
429:      SEARCH = 610,
430:      SECOND_P = 611,
431:      SECONDS_P = 612,
432:      SECURITY = 613,
433:      SELECT = 614,
434:      SEQUENCE = 615,
435:      SEQUENCES = 616,
436:      SERIALIZABLE = 617,
437:      SERVER = 618,
438:      SESSION = 619,
439:      SESSION_USER = 620,
440:      SET = 621,
441:      SETOF = 622,
442:      SETS = 623,
443:      SHARE = 624,
444:      SHOW = 625,
445:      SIMILAR = 626,
446:      SIMPLE = 627,
447:      SKIP = 628,
448:      SMALLINT = 629,
449:      SNAPSHOT = 630,
450:      SOME = 631,
451:      SQL_P = 632,
452:      STABLE = 633,
453:      STANDALONE_P = 634,
454:      START = 635,
455:      STATEMENT = 636,
456:      STATISTICS = 637,
457:      STDIN = 638,
458:      STDOUT = 639,
459:      STORAGE = 640,
460:      STRICT_P = 641,
461:      STRIP_P = 642,
462:      STRUCT = 643,
463:      SUBSCRIPTION = 644,
464:      SUBSTRING = 645,
465:      SYMMETRIC = 646,
466:      SYSID = 647,
467:      SYSTEM_P = 648,
468:      TABLE = 649,
469:      TABLES = 650,
470:      TABLESAMPLE = 651,
471:      TABLESPACE = 652,
472:      TEMP = 653,
473:      TEMPLATE = 654,
474:      TEMPORARY = 655,
475:      TEXT_P = 656,
476:      THEN = 657,
477:      TIME = 658,
478:      TIMESTAMP = 659,
479:      TO = 660,
480:      TRAILING = 661,
481:      TRANSACTION = 662,
482:      TRANSFORM = 663,
483:      TREAT = 664,
484:      TRIGGER = 665,
485:      TRIM = 666,
486:      TRUE_P = 667,
487:      TRUNCATE = 668,
488:      TRUSTED = 669,
489:      TRY_CAST = 670,
490:      TYPE_P = 671,
491:      TYPES_P = 672,
492:      UNBOUNDED = 673,
493:      UNCOMMITTED = 674,
494:      UNENCRYPTED = 675,
495:      UNION = 676,
496:      UNIQUE = 677,
497:      UNKNOWN = 678,
498:      UNLISTEN = 679,
499:      UNLOGGED = 680,
500:      UNTIL = 681,
501:      UPDATE = 682,
502:      USER = 683,
503:      USING = 684,
504:      VACUUM = 685,
505:      VALID = 686,
506:      VALIDATE = 687,
507:      VALIDATOR = 688,
508:      VALUE_P = 689,
509:      VALUES = 690,
510:      VARCHAR = 691,
511:      VARIADIC = 692,
512:      VARYING = 693,
513:      VERBOSE = 694,
514:      VERSION_P = 695,
515:      VIEW = 696,
516:      VIEWS = 697,
517:      VOLATILE = 698,
518:      WHEN = 699,
519:      WHERE = 700,
520:      WHITESPACE_P = 701,
521:      WINDOW = 702,
522:      WITH = 703,
523:      WITHIN = 704,
524:      WITHOUT = 705,
525:      WORK = 706,
526:      WRAPPER = 707,
527:      WRITE_P = 708,
528:      XML_P = 709,
529:      XMLATTRIBUTES = 710,
530:      XMLCONCAT = 711,
531:      XMLELEMENT = 712,
532:      XMLEXISTS = 713,
533:      XMLFOREST = 714,
534:      XMLNAMESPACES = 715,
535:      XMLPARSE = 716,
536:      XMLPI = 717,
537:      XMLROOT = 718,
538:      XMLSERIALIZE = 719,
539:      XMLTABLE = 720,
540:      YEAR_P = 721,
541:      YEARS_P = 722,
542:      YES_P = 723,
543:      ZONE = 724,
544:      NOT_LA = 725,
545:      NULLS_LA = 726,
546:      WITH_LA = 727,
547:      POSTFIXOP = 728,
548:      UMINUS = 729
549:    };
550: #endif
551: /* Tokens.  */
552: #define IDENT 258
553: #define FCONST 259
554: #define SCONST 260
555: #define BCONST 261
556: #define XCONST 262
557: #define Op 263
558: #define ICONST 264
559: #define PARAM 265
560: #define TYPECAST 266
561: #define DOT_DOT 267
562: #define COLON_EQUALS 268
563: #define EQUALS_GREATER 269
564: #define LAMBDA_ARROW 270
565: #define LESS_EQUALS 271
566: #define GREATER_EQUALS 272
567: #define NOT_EQUALS 273
568: #define ABORT_P 274
569: #define ABSOLUTE_P 275
570: #define ACCESS 276
571: #define ACTION 277
572: #define ADD_P 278
573: #define ADMIN 279
574: #define AFTER 280
575: #define AGGREGATE 281
576: #define ALL 282
577: #define ALSO 283
578: #define ALTER 284
579: #define ALWAYS 285
580: #define ANALYSE 286
581: #define ANALYZE 287
582: #define AND 288
583: #define ANY 289
584: #define ARRAY 290
585: #define AS 291
586: #define ASC_P 292
587: #define ASSERTION 293
588: #define ASSIGNMENT 294
589: #define ASYMMETRIC 295
590: #define AT 296
591: #define ATTACH 297
592: #define ATTRIBUTE 298
593: #define AUTHORIZATION 299
594: #define BACKWARD 300
595: #define BEFORE 301
596: #define BEGIN_P 302
597: #define BETWEEN 303
598: #define BIGINT 304
599: #define BINARY 305
600: #define BIT 306
601: #define BOOLEAN_P 307
602: #define BOTH 308
603: #define BY 309
604: #define CACHE 310
605: #define CALL_P 311
606: #define CALLED 312
607: #define CASCADE 313
608: #define CASCADED 314
609: #define CASE 315
610: #define CAST 316
611: #define CATALOG_P 317
612: #define CHAIN 318
613: #define CHAR_P 319
614: #define CHARACTER 320
615: #define CHARACTERISTICS 321
616: #define CHECK_P 322
617: #define CHECKPOINT 323
618: #define CLASS 324
619: #define CLOSE 325
620: #define CLUSTER 326
621: #define COALESCE 327
622: #define COLLATE 328
623: #define COLLATION 329
624: #define COLUMN 330
625: #define COLUMNS 331
626: #define COMMENT 332
627: #define COMMENTS 333
628: #define COMMIT 334
629: #define COMMITTED 335
630: #define CONCURRENTLY 336
631: #define CONFIGURATION 337
632: #define CONFLICT 338
633: #define CONNECTION 339
634: #define CONSTRAINT 340
635: #define CONSTRAINTS 341
636: #define CONTENT_P 342
637: #define CONTINUE_P 343
638: #define CONVERSION_P 344
639: #define COPY 345
640: #define COST 346
641: #define CREATE_P 347
642: #define CROSS 348
643: #define CSV 349
644: #define CUBE 350
645: #define CURRENT_P 351
646: #define CURRENT_CATALOG 352
647: #define CURRENT_DATE 353
648: #define CURRENT_ROLE 354
649: #define CURRENT_SCHEMA 355
650: #define CURRENT_TIME 356
651: #define CURRENT_TIMESTAMP 357
652: #define CURRENT_USER 358
653: #define CURSOR 359
654: #define CYCLE 360
655: #define DATA_P 361
656: #define DATABASE 362
657: #define DAY_P 363
658: #define DAYS_P 364
659: #define DEALLOCATE 365
660: #define DEC 366
661: #define DECIMAL_P 367
662: #define DECLARE 368
663: #define DEFAULT 369
664: #define DEFAULTS 370
665: #define DEFERRABLE 371
666: #define DEFERRED 372
667: #define DEFINER 373
668: #define DELETE_P 374
669: #define DELIMITER 375
670: #define DELIMITERS 376
671: #define DEPENDS 377
672: #define DESC_P 378
673: #define DESCRIBE 379
674: #define DETACH 380
675: #define DICTIONARY 381
676: #define DISABLE_P 382
677: #define DISCARD 383
678: #define DISTINCT 384
679: #define DO 385
680: #define DOCUMENT_P 386
681: #define DOMAIN_P 387
682: #define DOUBLE_P 388
683: #define DROP 389
684: #define EACH 390
685: #define ELSE 391
686: #define ENABLE_P 392
687: #define ENCODING 393
688: #define ENCRYPTED 394
689: #define END_P 395
690: #define ENUM_P 396
691: #define ESCAPE 397
692: #define EVENT 398
693: #define EXCEPT 399
694: #define EXCLUDE 400
695: #define EXCLUDING 401
696: #define EXCLUSIVE 402
697: #define EXECUTE 403
698: #define EXISTS 404
699: #define EXPLAIN 405
700: #define EXPORT_P 406
701: #define EXTENSION 407
702: #define EXTERNAL 408
703: #define EXTRACT 409
704: #define FALSE_P 410
705: #define FAMILY 411
706: #define FETCH 412
707: #define FILTER 413
708: #define FIRST_P 414
709: #define FLOAT_P 415
710: #define FOLLOWING 416
711: #define FOR 417
712: #define FORCE 418
713: #define FOREIGN 419
714: #define FORWARD 420
715: #define FREEZE 421
716: #define FROM 422
717: #define FULL 423
718: #define FUNCTION 424
719: #define FUNCTIONS 425
720: #define GENERATED 426
721: #define GLOB 427
722: #define GLOBAL 428
723: #define GRANT 429
724: #define GRANTED 430
725: #define GROUP_P 431
726: #define GROUPING 432
727: #define HANDLER 433
728: #define HAVING 434
729: #define HEADER_P 435
730: #define HOLD 436
731: #define HOUR_P 437
732: #define HOURS_P 438
733: #define IDENTITY_P 439
734: #define IF_P 440
735: #define ILIKE 441
736: #define IMMEDIATE 442
737: #define IMMUTABLE 443
738: #define IMPLICIT_P 444
739: #define IMPORT_P 445
740: #define IN_P 446
741: #define INCLUDING 447
742: #define INCREMENT 448
743: #define INDEX 449
744: #define INDEXES 450
745: #define INHERIT 451
746: #define INHERITS 452
747: #define INITIALLY 453
748: #define INLINE_P 454
749: #define INNER_P 455
750: #define INOUT 456
751: #define INPUT_P 457
752: #define INSENSITIVE 458
753: #define INSERT 459
754: #define INSTEAD 460
755: #define INT_P 461
756: #define INTEGER 462
757: #define INTERSECT 463
758: #define INTERVAL 464
759: #define INTO 465
760: #define INVOKER 466
761: #define IS 467
762: #define ISNULL 468
763: #define ISOLATION 469
764: #define JOIN 470
765: #define KEY 471
766: #define LABEL 472
767: #define LANGUAGE 473
768: #define LARGE_P 474
769: #define LAST_P 475
770: #define LATERAL_P 476
771: #define LEADING 477
772: #define LEAKPROOF 478
773: #define LEFT 479
774: #define LEVEL 480
775: #define LIKE 481
776: #define LIMIT 482
777: #define LISTEN 483
778: #define LOAD 484
779: #define LOCAL 485
780: #define LOCALTIME 486
781: #define LOCALTIMESTAMP 487
782: #define LOCATION 488
783: #define LOCK_P 489
784: #define LOCKED 490
785: #define LOGGED 491
786: #define MACRO 492
787: #define MAP 493
788: #define MAPPING 494
789: #define MATCH 495
790: #define MATERIALIZED 496
791: #define MAXVALUE 497
792: #define METHOD 498
793: #define MICROSECOND_P 499
794: #define MICROSECONDS_P 500
795: #define MILLISECOND_P 501
796: #define MILLISECONDS_P 502
797: #define MINUTE_P 503
798: #define MINUTES_P 504
799: #define MINVALUE 505
800: #define MODE 506
801: #define MONTH_P 507
802: #define MONTHS_P 508
803: #define MOVE 509
804: #define NAME_P 510
805: #define NAMES 511
806: #define NATIONAL 512
807: #define NATURAL 513
808: #define NCHAR 514
809: #define NEW 515
810: #define NEXT 516
811: #define NO 517
812: #define NONE 518
813: #define NOT 519
814: #define NOTHING 520
815: #define NOTIFY 521
816: #define NOTNULL 522
817: #define NOWAIT 523
818: #define NULL_P 524
819: #define NULLIF 525
820: #define NULLS_P 526
821: #define NUMERIC 527
822: #define OBJECT_P 528
823: #define OF 529
824: #define OFF 530
825: #define OFFSET 531
826: #define OIDS 532
827: #define OLD 533
828: #define ON 534
829: #define ONLY 535
830: #define OPERATOR 536
831: #define OPTION 537
832: #define OPTIONS 538
833: #define OR 539
834: #define ORDER 540
835: #define ORDINALITY 541
836: #define OUT_P 542
837: #define OUTER_P 543
838: #define OVER 544
839: #define OVERLAPS 545
840: #define OVERLAY 546
841: #define OVERRIDING 547
842: #define OWNED 548
843: #define OWNER 549
844: #define PARALLEL 550
845: #define PARSER 551
846: #define PARTIAL 552
847: #define PARTITION 553
848: #define PASSING 554
849: #define PASSWORD 555
850: #define PERCENT 556
851: #define PLACING 557
852: #define PLANS 558
853: #define POLICY 559
854: #define POSITION 560
855: #define PRAGMA_P 561
856: #define PRECEDING 562
857: #define PRECISION 563
858: #define PREPARE 564
859: #define PREPARED 565
860: #define PRESERVE 566
861: #define PRIMARY 567
862: #define PRIOR 568
863: #define PRIVILEGES 569
864: #define PROCEDURAL 570
865: #define PROCEDURE 571
866: #define PROGRAM 572
867: #define PUBLICATION 573
868: #define QUOTE 574
869: #define RANGE 575
870: #define READ_P 576
871: #define REAL 577
872: #define REASSIGN 578
873: #define RECHECK 579
874: #define RECURSIVE 580
875: #define REF 581
876: #define REFERENCES 582
877: #define REFERENCING 583
878: #define REFRESH 584
879: #define REINDEX 585
880: #define RELATIVE_P 586
881: #define RELEASE 587
882: #define RENAME 588
883: #define REPEATABLE 589
884: #define REPLACE 590
885: #define REPLICA 591
886: #define RESET 592
887: #define RESTART 593
888: #define RESTRICT 594
889: #define RETURNING 595
890: #define RETURNS 596
891: #define REVOKE 597
892: #define RIGHT 598
893: #define ROLE 599
894: #define ROLLBACK 600
895: #define ROLLUP 601
896: #define ROW 602
897: #define ROWS 603
898: #define RULE 604
899: #define SAMPLE 605
900: #define SAVEPOINT 606
901: #define SCHEMA 607
902: #define SCHEMAS 608
903: #define SCROLL 609
904: #define SEARCH 610
905: #define SECOND_P 611
906: #define SECONDS_P 612
907: #define SECURITY 613
908: #define SELECT 614
909: #define SEQUENCE 615
910: #define SEQUENCES 616
911: #define SERIALIZABLE 617
912: #define SERVER 618
913: #define SESSION 619
914: #define SESSION_USER 620
915: #define SET 621
916: #define SETOF 622
917: #define SETS 623
918: #define SHARE 624
919: #define SHOW 625
920: #define SIMILAR 626
921: #define SIMPLE 627
922: #define SKIP 628
923: #define SMALLINT 629
924: #define SNAPSHOT 630
925: #define SOME 631
926: #define SQL_P 632
927: #define STABLE 633
928: #define STANDALONE_P 634
929: #define START 635
930: #define STATEMENT 636
931: #define STATISTICS 637
932: #define STDIN 638
933: #define STDOUT 639
934: #define STORAGE 640
935: #define STRICT_P 641
936: #define STRIP_P 642
937: #define STRUCT 643
938: #define SUBSCRIPTION 644
939: #define SUBSTRING 645
940: #define SYMMETRIC 646
941: #define SYSID 647
942: #define SYSTEM_P 648
943: #define TABLE 649
944: #define TABLES 650
945: #define TABLESAMPLE 651
946: #define TABLESPACE 652
947: #define TEMP 653
948: #define TEMPLATE 654
949: #define TEMPORARY 655
950: #define TEXT_P 656
951: #define THEN 657
952: #define TIME 658
953: #define TIMESTAMP 659
954: #define TO 660
955: #define TRAILING 661
956: #define TRANSACTION 662
957: #define TRANSFORM 663
958: #define TREAT 664
959: #define TRIGGER 665
960: #define TRIM 666
961: #define TRUE_P 667
962: #define TRUNCATE 668
963: #define TRUSTED 669
964: #define TRY_CAST 670
965: #define TYPE_P 671
966: #define TYPES_P 672
967: #define UNBOUNDED 673
968: #define UNCOMMITTED 674
969: #define UNENCRYPTED 675
970: #define UNION 676
971: #define UNIQUE 677
972: #define UNKNOWN 678
973: #define UNLISTEN 679
974: #define UNLOGGED 680
975: #define UNTIL 681
976: #define UPDATE 682
977: #define USER 683
978: #define USING 684
979: #define VACUUM 685
980: #define VALID 686
981: #define VALIDATE 687
982: #define VALIDATOR 688
983: #define VALUE_P 689
984: #define VALUES 690
985: #define VARCHAR 691
986: #define VARIADIC 692
987: #define VARYING 693
988: #define VERBOSE 694
989: #define VERSION_P 695
990: #define VIEW 696
991: #define VIEWS 697
992: #define VOLATILE 698
993: #define WHEN 699
994: #define WHERE 700
995: #define WHITESPACE_P 701
996: #define WINDOW 702
997: #define WITH 703
998: #define WITHIN 704
999: #define WITHOUT 705
1000: #define WORK 706
1001: #define WRAPPER 707
1002: #define WRITE_P 708
1003: #define XML_P 709
1004: #define XMLATTRIBUTES 710
1005: #define XMLCONCAT 711
1006: #define XMLELEMENT 712
1007: #define XMLEXISTS 713
1008: #define XMLFOREST 714
1009: #define XMLNAMESPACES 715
1010: #define XMLPARSE 716
1011: #define XMLPI 717
1012: #define XMLROOT 718
1013: #define XMLSERIALIZE 719
1014: #define XMLTABLE 720
1015: #define YEAR_P 721
1016: #define YEARS_P 722
1017: #define YES_P 723
1018: #define ZONE 724
1019: #define NOT_LA 725
1020: #define NULLS_LA 726
1021: #define WITH_LA 727
1022: #define POSTFIXOP 728
1023: #define UMINUS 729
1024: 
1025: 
1026: 
1027: 
1028: /* Copy the first part of user declarations.  */
1029: #line 1 "third_party/libpg_query/grammar/grammar.y.tmp"
1030: 
1031: #line 1 "third_party/libpg_query/grammar/grammar.hpp"
1032: /*#define YYDEBUG 1*/
1033: /*-------------------------------------------------------------------------
1034:  *
1035:  * gram.y
1036:  *	  POSTGRESQL BISON rules/actions
1037:  *
1038:  * Portions Copyright (c) 1996-2017, PostgreSQL Global Development PGGroup
1039:  * Portions Copyright (c) 1994, Regents of the University of California
1040:  *
1041:  *
1042:  * IDENTIFICATION
1043:  *	  src/backend/parser/gram.y
1044:  *
1045:  * HISTORY
1046:  *	  AUTHOR			DATE			MAJOR EVENT
1047:  *	  Andrew Yu			Sept, 1994		POSTQUEL to SQL conversion
1048:  *	  Andrew Yu			Oct, 1994		lispy code conversion
1049:  *
1050:  * NOTES
1051:  *	  CAPITALS are used to represent terminal symbols.
1052:  *	  non-capitals are used to represent non-terminals.
1053:  *
1054:  *	  In general, nothing in this file should initiate database accesses
1055:  *	  nor depend on changeable state (such as SET variables).  If you do
1056:  *	  database accesses, your code will fail when we have aborted the
1057:  *	  current transaction and are just parsing commands to find the next
1058:  *	  ROLLBACK or COMMIT.  If you make use of SET variables, then you
1059:  *	  will do the wrong thing in multi-query strings like this:
1060:  *			SET constraint_exclusion TO off; SELECT * FROM foo;
1061:  *	  because the entire string is parsed by gram.y before the SET gets
1062:  *	  executed.  Anything that depends on the database or changeable state
1063:  *	  should be handled during parse analysis so that it happens at the
1064:  *	  right time not the wrong time.
1065:  *
1066:  * WARNINGS
1067:  *	  If you use a list, make sure the datum is a node so that the printing
1068:  *	  routines work.
1069:  *
1070:  *	  Sometimes we assign constants to makeStrings. Make sure we don't free
1071:  *	  those.
1072:  *
1073:  *-------------------------------------------------------------------------
1074:  */
1075: #include "pg_functions.hpp"
1076: #include <string.h>
1077: 
1078: #include <ctype.h>
1079: #include <limits.h>
1080: 
1081: #include "nodes/makefuncs.hpp"
1082: #include "nodes/nodeFuncs.hpp"
1083: #include "parser/gramparse.hpp"
1084: #include "parser/parser.hpp"
1085: #include "utils/datetime.hpp"
1086: 
1087: namespace duckdb_libpgquery {
1088: #define DEFAULT_SCHEMA "main"
1089: 
1090: /*
1091:  * Location tracking support --- simpler than bison's default, since we only
1092:  * want to track the start position not the end position of each nonterminal.
1093:  */
1094: #define YYLLOC_DEFAULT(Current, Rhs, N) \
1095: 	do { \
1096: 		if ((N) > 0) \
1097: 			(Current) = (Rhs)[1]; \
1098: 		else \
1099: 			(Current) = (-1); \
1100: 	} while (0)
1101: 
1102: /*
1103:  * The above macro assigns -1 (unknown) as the parse location of any
1104:  * nonterminal that was reduced from an empty rule, or whose leftmost
1105:  * component was reduced from an empty rule.  This is problematic
1106:  * for nonterminals defined like
1107:  *		OptFooList: / * EMPTY * / { ... } | OptFooList Foo { ... } ;
1108:  * because we'll set -1 as the location during the first reduction and then
1109:  * copy it during each subsequent reduction, leaving us with -1 for the
1110:  * location even when the list is not empty.  To fix that, do this in the
1111:  * action for the nonempty rule(s):
1112:  *		if (@$ < 0) @$ = @2;
1113:  * (Although we have many nonterminals that follow this pattern, we only
1114:  * bother with fixing @$ like this when the nonterminal's parse location
1115:  * is actually referenced in some rule.)
1116:  *
1117:  * A cleaner answer would be to make YYLLOC_DEFAULT scan all the Rhs
1118:  * locations until it's found one that's not -1.  Then we'd get a correct
1119:  * location for any nonterminal that isn't entirely empty.  But this way
1120:  * would add overhead to every rule reduction, and so far there's not been
1121:  * a compelling reason to pay that overhead.
1122:  */
1123: 
1124: /*
1125:  * Bison doesn't allocate anything that needs to live across parser calls,
1126:  * so we can easily have it use palloc instead of malloc.  This prevents
1127:  * memory leaks if we error out during parsing.  Note this only works with
1128:  * bison >= 2.0.  However, in bison 1.875 the default is to use alloca()
1129:  * if possible, so there's not really much problem anyhow, at least if
1130:  * you're building with gcc.
1131:  */
1132: #define YYMALLOC palloc
1133: #define YYFREE   pfree
1134: #define YYINITDEPTH 1000
1135: 
1136: /* yields an integer bitmask of these flags: */
1137: #define CAS_NOT_DEFERRABLE			0x01
1138: #define CAS_DEFERRABLE				0x02
1139: #define CAS_INITIALLY_IMMEDIATE		0x04
1140: #define CAS_INITIALLY_DEFERRED		0x08
1141: #define CAS_NOT_VALID				0x10
1142: #define CAS_NO_INHERIT				0x20
1143: 
1144: 
1145: #define parser_yyerror(msg)  scanner_yyerror(msg, yyscanner)
1146: #define parser_errposition(pos)  scanner_errposition(pos, yyscanner)
1147: 
1148: static void base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner,
1149: 						 const char *msg);
1150: static PGRawStmt *makeRawStmt(PGNode *stmt, int stmt_location);
1151: static void updateRawStmtEnd(PGRawStmt *rs, int end_location);
1152: static PGNode *makeColumnRef(char *colname, PGList *indirection,
1153: 						   int location, core_yyscan_t yyscanner);
1154: static PGNode *makeTypeCast(PGNode *arg, PGTypeName *tpname, int trycast, int location);
1155: static PGNode *makeStringConst(char *str, int location);
1156: static PGNode *makeStringConstCast(char *str, int location, PGTypeName *tpname);
1157: static PGNode *makeIntervalNode(char *str, int location, PGList *typmods);
1158: static PGNode *makeIntervalNode(int val, int location, PGList *typmods);
1159: static PGNode *makeIntervalNode(PGNode *arg, int location, PGList *typmods);
1160: static PGNode *makeSampleSize(PGValue *sample_size, bool is_percentage);
1161: static PGNode *makeSampleOptions(PGNode *sample_size, char *method, int seed, int location);
1162: static PGNode *makeIntConst(int val, int location);
1163: static PGNode *makeFloatConst(char *str, int location);
1164: static PGNode *makeBitStringConst(char *str, int location);
1165: static PGNode *makeNullAConst(int location);
1166: static PGNode *makeAConst(PGValue *v, int location);
1167: static PGNode *makeBoolAConst(bool state, int location);
1168: static PGNode *makeParamRef(int number, int location);
1169: static void check_qualified_name(PGList *names, core_yyscan_t yyscanner);
1170: static PGList *check_func_name(PGList *names, core_yyscan_t yyscanner);
1171: static PGList *check_indirection(PGList *indirection, core_yyscan_t yyscanner);
1172: static void insertSelectOptions(PGSelectStmt *stmt,
1173: 								PGList *sortClause, PGList *lockingClause,
1174: 								PGNode *limitOffset, PGNode *limitCount,
1175: 								PGWithClause *withClause,
1176: 								core_yyscan_t yyscanner);
1177: static PGNode *makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg);
1178: static PGNode *doNegate(PGNode *n, int location);
1179: static void doNegateFloat(PGValue *v);
1180: static PGNode *makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location);
1181: static PGNode *makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location);
1182: static PGNode *makeNotExpr(PGNode *expr, int location);
1183: static PGNode *makeSQLValueFunction(PGSQLValueFunctionOp op, int32_t typmod,
1184: 								  int location);
1185: static void SplitColQualList(PGList *qualList,
1186: 							 PGList **constraintList, PGCollateClause **collClause,
1187: 							 core_yyscan_t yyscanner);
1188: static void processCASbits(int cas_bits, int location, const char *constrType,
1189: 			   bool *deferrable, bool *initdeferred, bool *not_valid,
1190: 			   bool *no_inherit, core_yyscan_t yyscanner);
1191: static PGNode *makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query);
1192: 
1193: 
1194: 
1195: /* Enabling traces.  */
1196: #ifndef YYDEBUG
1197: # define YYDEBUG 0
1198: #endif
1199: 
1200: /* Enabling verbose error messages.  */
1201: #ifdef YYERROR_VERBOSE
1202: # undef YYERROR_VERBOSE
1203: # define YYERROR_VERBOSE 1
1204: #else
1205: # define YYERROR_VERBOSE 0
1206: #endif
1207: 
1208: /* Enabling the token table.  */
1209: #ifndef YYTOKEN_TABLE
1210: # define YYTOKEN_TABLE 0
1211: #endif
1212: 
1213: #if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
1214: typedef union YYSTYPE
1215: #line 14 "third_party/libpg_query/grammar/grammar.y"
1216: {
1217: 	core_YYSTYPE		core_yystype;
1218: 	/* these fields must match core_YYSTYPE: */
1219: 	int					ival;
1220: 	char				*str;
1221: 	const char			*keyword;
1222: 	const char          *conststr;
1223: 
1224: 	char				chr;
1225: 	bool				boolean;
1226: 	PGJoinType			jtype;
1227: 	PGDropBehavior		dbehavior;
1228: 	PGOnCommitAction		oncommit;
1229: 	PGList				*list;
1230: 	PGNode				*node;
1231: 	PGValue				*value;
1232: 	PGObjectType			objtype;
1233: 	PGTypeName			*typnam;
1234: 	PGObjectWithArgs		*objwithargs;
1235: 	PGDefElem				*defelt;
1236: 	PGSortBy				*sortby;
1237: 	PGWindowDef			*windef;
1238: 	PGJoinExpr			*jexpr;
1239: 	PGIndexElem			*ielem;
1240: 	PGAlias				*alias;
1241: 	PGRangeVar			*range;
1242: 	PGIntoClause			*into;
1243: 	PGWithClause			*with;
1244: 	PGInferClause			*infer;
1245: 	PGOnConflictClause	*onconflict;
1246: 	PGAIndices			*aind;
1247: 	PGResTarget			*target;
1248: 	PGInsertStmt			*istmt;
1249: 	PGVariableSetStmt		*vsetstmt;
1250: 	PGOverridingKind       override;
1251: 	PGSortByDir            sortorder;
1252: 	PGSortByNulls          nullorder;
1253: 	PGLockClauseStrength lockstrength;
1254: 	PGLockWaitPolicy lockwaitpolicy;
1255: 	PGSubLinkType subquerytype;
1256: 	PGViewCheckOption viewcheckoption;
1257: }
1258: /* Line 193 of yacc.c.  */
1259: #line 1260 "third_party/libpg_query/grammar/grammar_out.cpp"
1260: 	YYSTYPE;
1261: # define yystype YYSTYPE /* obsolescent; will be withdrawn */
1262: # define YYSTYPE_IS_DECLARED 1
1263: # define YYSTYPE_IS_TRIVIAL 1
1264: #endif
1265: 
1266: #if ! defined YYLTYPE && ! defined YYLTYPE_IS_DECLARED
1267: typedef struct YYLTYPE
1268: {
1269:   int first_line;
1270:   int first_column;
1271:   int last_line;
1272:   int last_column;
1273: } YYLTYPE;
1274: # define yyltype YYLTYPE /* obsolescent; will be withdrawn */
1275: # define YYLTYPE_IS_DECLARED 1
1276: # define YYLTYPE_IS_TRIVIAL 1
1277: #endif
1278: 
1279: 
1280: /* Copy the second part of user declarations.  */
1281: 
1282: 
1283: /* Line 216 of yacc.c.  */
1284: #line 1285 "third_party/libpg_query/grammar/grammar_out.cpp"
1285: 
1286: #ifdef short
1287: # undef short
1288: #endif
1289: 
1290: #ifdef YYTYPE_UINT8
1291: typedef YYTYPE_UINT8 yytype_uint8;
1292: #else
1293: typedef unsigned char yytype_uint8;
1294: #endif
1295: 
1296: #ifdef YYTYPE_INT8
1297: typedef YYTYPE_INT8 yytype_int8;
1298: #elif (defined __STDC__ || defined __C99__FUNC__ \
1299:      || defined __cplusplus || defined _MSC_VER)
1300: typedef signed char yytype_int8;
1301: #else
1302: typedef short int yytype_int8;
1303: #endif
1304: 
1305: #ifdef YYTYPE_UINT16
1306: typedef YYTYPE_UINT16 yytype_uint16;
1307: #else
1308: typedef unsigned short int yytype_uint16;
1309: #endif
1310: 
1311: #ifdef YYTYPE_INT16
1312: typedef YYTYPE_INT16 yytype_int16;
1313: #else
1314: typedef short int yytype_int16;
1315: #endif
1316: 
1317: #ifndef YYSIZE_T
1318: # ifdef __SIZE_TYPE__
1319: #  define YYSIZE_T __SIZE_TYPE__
1320: # elif defined size_t
1321: #  define YYSIZE_T size_t
1322: # elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
1323:      || defined __cplusplus || defined _MSC_VER)
1324: #  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
1325: #  define YYSIZE_T size_t
1326: # else
1327: #  define YYSIZE_T unsigned int
1328: # endif
1329: #endif
1330: 
1331: #define YYSIZE_MAXIMUM ((YYSIZE_T) -1)
1332: 
1333: #ifndef YY_
1334: # if defined YYENABLE_NLS && YYENABLE_NLS
1335: #  if ENABLE_NLS
1336: #   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
1337: #   define YY_(msgid) dgettext ("bison-runtime", msgid)
1338: #  endif
1339: # endif
1340: # ifndef YY_
1341: #  define YY_(msgid) msgid
1342: # endif
1343: #endif
1344: 
1345: /* Suppress unused-variable warnings by "using" E.  */
1346: #if ! defined lint || defined __GNUC__
1347: # define YYUSE(e) ((void) (e))
1348: #else
1349: # define YYUSE(e) /* empty */
1350: #endif
1351: 
1352: /* Identity function, used to suppress warnings about constant conditions.  */
1353: #ifndef lint
1354: # define YYID(n) (n)
1355: #else
1356: #if (defined __STDC__ || defined __C99__FUNC__ \
1357:      || defined __cplusplus || defined _MSC_VER)
1358: static int
1359: YYID (int i)
1360: #else
1361: static int
1362: YYID (i)
1363:     int i;
1364: #endif
1365: {
1366:   return i;
1367: }
1368: #endif
1369: 
1370: #if ! defined yyoverflow || YYERROR_VERBOSE
1371: 
1372: /* The parser invokes alloca or malloc; define the necessary symbols.  */
1373: 
1374: # ifdef YYSTACK_USE_ALLOCA
1375: #  if YYSTACK_USE_ALLOCA
1376: #   ifdef __GNUC__
1377: #    define YYSTACK_ALLOC __builtin_alloca
1378: #   elif defined __BUILTIN_VA_ARG_INCR
1379: #    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
1380: #   elif defined _AIX
1381: #    define YYSTACK_ALLOC __alloca
1382: #   elif defined _MSC_VER
1383: #    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
1384: #    define alloca _alloca
1385: #   else
1386: #    define YYSTACK_ALLOC alloca
1387: #    if ! defined _ALLOCA_H && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
1388:      || defined __cplusplus || defined _MSC_VER)
1389: #     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
1390: #     ifndef _STDLIB_H
1391: #      define _STDLIB_H 1
1392: #     endif
1393: #    endif
1394: #   endif
1395: #  endif
1396: # endif
1397: 
1398: # ifdef YYSTACK_ALLOC
1399:    /* Pacify GCC's `empty if-body' warning.  */
1400: #  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
1401: #  ifndef YYSTACK_ALLOC_MAXIMUM
1402:     /* The OS might guarantee only one guard page at the bottom of the stack,
1403:        and a page size can be as small as 4096 bytes.  So we cannot safely
1404:        invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
1405:        to allow for a few compiler-allocated temporary stack slots.  */
1406: #   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
1407: #  endif
1408: # else
1409: #  define YYSTACK_ALLOC YYMALLOC
1410: #  define YYSTACK_FREE YYFREE
1411: #  ifndef YYSTACK_ALLOC_MAXIMUM
1412: #   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
1413: #  endif
1414: #  if (defined __cplusplus && ! defined _STDLIB_H \
1415:        && ! ((defined YYMALLOC || defined malloc) \
1416: 	     && (defined YYFREE || defined free)))
1417: #   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
1418: #   ifndef _STDLIB_H
1419: #    define _STDLIB_H 1
1420: #   endif
1421: #  endif
1422: #  ifndef YYMALLOC
1423: #   define YYMALLOC malloc
1424: #   if ! defined malloc && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
1425:      || defined __cplusplus || defined _MSC_VER)
1426: void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
1427: #   endif
1428: #  endif
1429: #  ifndef YYFREE
1430: #   define YYFREE free
1431: #   if ! defined free && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
1432:      || defined __cplusplus || defined _MSC_VER)
1433: void free (void *); /* INFRINGES ON USER NAME SPACE */
1434: #   endif
1435: #  endif
1436: # endif
1437: #endif /* ! defined yyoverflow || YYERROR_VERBOSE */
1438: 
1439: 
1440: #if (! defined yyoverflow \
1441:      && (! defined __cplusplus \
1442: 	 || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
1443: 	     && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))
1444: 
1445: /* A type that is properly aligned for any stack member.  */
1446: union yyalloc
1447: {
1448:   yytype_int16 yyss;
1449:   YYSTYPE yyvs;
1450:     YYLTYPE yyls;
1451: };
1452: 
1453: /* The size of the maximum gap between one aligned stack and the next.  */
1454: # define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)
1455: 
1456: /* The size of an array large to enough to hold all stacks, each with
1457:    N elements.  */
1458: # define YYSTACK_BYTES(N) \
1459:      ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE) + sizeof (YYLTYPE)) \
1460:       + 2 * YYSTACK_GAP_MAXIMUM)
1461: 
1462: /* Copy COUNT objects from FROM to TO.  The source and destination do
1463:    not overlap.  */
1464: # ifndef YYCOPY
1465: #  if defined __GNUC__ && 1 < __GNUC__
1466: #   define YYCOPY(To, From, Count) \
1467:       __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
1468: #  else
1469: #   define YYCOPY(To, From, Count)		\
1470:       do					\
1471: 	{					\
1472: 	  YYSIZE_T yyi;				\
1473: 	  for (yyi = 0; yyi < (Count); yyi++)	\
1474: 	    (To)[yyi] = (From)[yyi];		\
1475: 	}					\
1476:       while (YYID (0))
1477: #  endif
1478: # endif
1479: 
1480: /* Relocate STACK from its old location to the new one.  The
1481:    local variables YYSIZE and YYSTACKSIZE give the old and new number of
1482:    elements in the stack, and YYPTR gives the new location of the
1483:    stack.  Advance YYPTR to a properly aligned location for the next
1484:    stack.  */
1485: # define YYSTACK_RELOCATE(Stack)					\
1486:     do									\
1487:       {									\
1488: 	YYSIZE_T yynewbytes;						\
1489: 	YYCOPY (&yyptr->Stack, Stack, yysize);				\
1490: 	Stack = &yyptr->Stack;						\
1491: 	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
1492: 	yyptr += yynewbytes / sizeof (*yyptr);				\
1493:       }									\
1494:     while (YYID (0))
1495: 
1496: #endif
1497: 
1498: /* YYFINAL -- State number of the termination state.  */
1499: #define YYFINAL  578
1500: /* YYLAST -- Last index in YYTABLE.  */
1501: #define YYLAST   49293
1502: 
1503: /* YYNTOKENS -- Number of terminals.  */
1504: #define YYNTOKENS  496
1505: /* YYNNTS -- Number of nonterminals.  */
1506: #define YYNNTS  369
1507: /* YYNRULES -- Number of rules.  */
1508: #define YYNRULES  1750
1509: /* YYNRULES -- Number of states.  */
1510: #define YYNSTATES  2868
1511: 
1512: /* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
1513: #define YYUNDEFTOK  2
1514: #define YYMAXUTOK   729
1515: 
1516: #define YYTRANSLATE(YYX)						\
1517:   ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)
1518: 
1519: /* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
1520: static const yytype_uint16 yytranslate[] =
1521: {
1522:        0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
1523:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
1524:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
1525:        2,     2,     2,     2,     2,   493,     2,   481,     2,     2,
1526:      486,   487,   479,   477,   490,   478,   488,   480,     2,     2,
1527:        2,     2,     2,     2,     2,     2,     2,     2,   495,   489,
1528:      473,   475,   474,   494,     2,     2,     2,     2,     2,     2,
1529:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
1530:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
1531:        2,   484,     2,   485,   482,     2,     2,     2,     2,     2,
1532:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
1533:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
1534:        2,     2,     2,   491,     2,   492,     2,     2,     2,     2,
1535:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
1536:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
1537:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
1538:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
1539:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
1540:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
1541:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
1542:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
1543:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
1544:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
1545:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
1546:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
1547:        2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
1548:        5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
1549:       15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
1550:       25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
1551:       35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
1552:       45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
1553:       55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
1554:       65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
1555:       75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
1556:       85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
1557:       95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
1558:      105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
1559:      115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
1560:      125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
1561:      135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
1562:      145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
1563:      155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
1564:      165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
1565:      175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
1566:      185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
1567:      195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
1568:      205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
1569:      215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
1570:      225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
1571:      235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
1572:      245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
1573:      255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
1574:      265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
1575:      275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
1576:      285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
1577:      295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
1578:      305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
1579:      315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
1580:      325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
1581:      335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
1582:      345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
1583:      355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
1584:      365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
1585:      375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
1586:      385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
1587:      395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
1588:      405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
1589:      415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
1590:      425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
1591:      435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
1592:      445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
1593:      455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
1594:      465,   466,   467,   468,   469,   470,   471,   472,   476,   483
1595: };
1596: 
1597: #if YYDEBUG
1598: /* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
1599:    YYRHS.  */
1600: static const yytype_uint16 yyprhs[] =
1601: {
1602:        0,     0,     3,     5,     9,    11,    13,    15,    17,    19,
1603:       21,    23,    25,    27,    29,    31,    33,    35,    37,    39,
1604:       41,    43,    45,    47,    49,    51,    53,    55,    57,    59,
1605:       61,    63,    65,    67,    69,    71,    73,    75,    77,    78,
1606:       83,    90,    95,   102,   107,   114,   119,   126,   128,   131,
1607:      135,   138,   140,   144,   147,   151,   153,   157,   160,   166,
1608:      170,   177,   182,   189,   196,   203,   209,   215,   222,   232,
1609:      237,   243,   251,   258,   263,   272,   277,   280,   285,   289,
1610:      296,   301,   304,   307,   310,   313,   315,   318,   319,   321,
1611:      324,   327,   330,   332,   336,   341,   344,   345,   348,   352,
1612:      355,   359,   366,   373,   382,   389,   398,   405,   414,   421,
1613:      430,   439,   450,   459,   470,   472,   473,   481,   483,   488,
1614:      493,   501,   504,   506,   510,   515,   519,   520,   522,   523,
1615:      526,   530,   536,   545,   551,   552,   558,   564,   572,   575,
1616:      576,   578,   580,   582,   586,   589,   590,   592,   593,   595,
1617:      599,   601,   605,   607,   611,   614,   617,   622,   628,   634,
1618:      643,   645,   646,   650,   660,   673,   677,   678,   683,   690,
1619:      692,   695,   697,   699,   700,   702,   705,   708,   710,   713,
1620:      716,   718,   721,   725,   728,   731,   734,   737,   741,   745,
1621:      749,   751,   755,   757,   758,   760,   763,   766,   769,   772,
1622:      775,   778,   781,   784,   786,   788,   789,   799,   812,   813,
1623:      816,   818,   820,   822,   824,   826,   828,   832,   833,   835,
1624:      838,   840,   842,   845,   848,   852,   854,   856,   859,   862,
1625:      864,   867,   871,   877,   880,   886,   892,   895,   899,   901,
1626:      903,   906,   909,   910,   915,   916,   920,   925,   930,   931,
1627:      935,   938,   939,   943,   945,   947,   949,   951,   953,   955,
1628:      957,   959,   961,   963,   967,   971,   973,   976,   979,   982,
1629:      985,   988,   991,   992,   996,  1000,  1004,  1005,  1007,  1010,
1630:     1012,  1015,  1018,  1021,  1024,  1029,  1031,  1035,  1037,  1041,
1631:     1043,  1045,  1047,  1049,  1053,  1055,  1058,  1059,  1061,  1062,
1632:     1064,  1068,  1069,  1072,  1073,  1077,  1081,  1083,  1089,  1093,
1633:     1095,  1099,  1101,  1106,  1112,  1118,  1125,  1129,  1137,  1142,
1634:     1154,  1156,  1160,  1163,  1166,  1169,  1170,  1174,  1176,  1178,
1635:     1181,  1184,  1187,  1190,  1192,  1193,  1195,  1198,  1205,  1210,
1636:     1217,  1222,  1229,  1238,  1240,  1242,  1244,  1246,  1248,  1251,
1637:     1253,  1256,  1258,  1260,  1262,  1266,  1270,  1274,  1278,  1281,
1638:     1284,  1286,  1290,  1292,  1294,  1296,  1298,  1302,  1304,  1306,
1639:     1307,  1309,  1311,  1313,  1320,  1322,  1324,  1327,  1331,  1340,
1640:     1352,  1362,  1364,  1366,  1370,  1371,  1373,  1377,  1379,  1380,
1641:     1382,  1383,  1385,  1386,  1388,  1392,  1394,  1396,  1398,  1402,
1642:     1403,  1406,  1409,  1410,  1413,  1414,  1416,  1417,  1419,  1421,
1643:     1423,  1427,  1431,  1433,  1435,  1439,  1443,  1447,  1451,  1456,
1644:     1460,  1463,  1465,  1467,  1469,  1471,  1473,  1477,  1479,  1481,
1645:     1485,  1489,  1491,  1494,  1499,  1504,  1507,  1511,  1517,  1523,
1646:     1525,  1527,  1538,  1549,  1551,  1554,  1559,  1564,  1569,  1572,
1647:     1575,  1579,  1581,  1585,  1592,  1595,  1596,  1600,  1604,  1609,
1648:     1614,  1619,  1624,  1628,  1631,  1633,  1635,  1636,  1638,  1640,
1649:     1641,  1643,  1649,  1651,  1652,  1654,  1655,  1659,  1661,  1665,
1650:     1670,  1674,  1676,  1678,  1679,  1682,  1685,  1686,  1689,  1692,
1651:     1694,  1696,  1698,  1699,  1702,  1707,  1713,  1718,  1721,  1725,
1652:     1728,  1731,  1734,  1737,  1739,  1742,  1746,  1747,  1749,  1750,
1653:     1756,  1758,  1763,  1770,  1773,  1775,  1776,  1781,  1782,  1784,
1654:     1786,  1788,  1790,  1793,  1796,  1798,  1800,  1802,  1804,  1806,
1655:     1808,  1812,  1813,  1815,  1819,  1821,  1823,  1826,  1829,  1830,
1656:     1832,  1836,  1838,  1839,  1841,  1844,  1848,  1851,  1856,  1859,
1657:     1863,  1866,  1867,  1869,  1872,  1873,  1878,  1884,  1887,  1888,
1658:     1890,  1894,  1898,  1902,  1906,  1910,  1914,  1916,  1921,  1925,
1659:     1930,  1936,  1941,  1947,  1952,  1958,  1961,  1966,  1968,  1970,
1660:     1971,  1973,  1978,  1984,  1989,  1990,  1993,  1996,  1999,  2001,
1661:     2003,  2004,  2009,  2012,  2014,  2017,  2020,  2025,  2028,  2035,
1662:     2038,  2040,  2044,  2049,  2050,  2053,  2054,  2057,  2058,  2060,
1663:     2064,  2068,  2071,  2072,  2075,  2080,  2082,  2084,  2087,  2091,
1664:     2097,  2104,  2107,  2111,  2117,  2123,  2127,  2132,  2133,  2135,
1665:     2137,  2139,  2141,  2143,  2146,  2151,  2153,  2155,  2157,  2159,
1666:     2162,  2166,  2167,  2169,  2171,  2173,  2175,  2177,  2180,  2183,
1667:     2186,  2189,  2192,  2194,  2198,  2199,  2201,  2203,  2205,  2207,
1668:     2213,  2216,  2218,  2220,  2222,  2224,  2229,  2231,  2234,  2237,
1669:     2239,  2243,  2247,  2250,  2252,  2253,  2259,  2262,  2268,  2271,
1670:     2273,  2277,  2281,  2282,  2284,  2286,  2288,  2290,  2292,  2294,
1671:     2296,  2298,  2300,  2302,  2304,  2306,  2308,  2310,  2312,  2314,
1672:     2316,  2318,  2320,  2322,  2324,  2326,  2328,  2330,  2334,  2338,
1673:     2342,  2346,  2350,  2354,  2358,  2359,  2361,  2365,  2369,  2375,
1674:     2378,  2381,  2385,  2389,  2393,  2397,  2401,  2405,  2409,  2413,
1675:     2417,  2421,  2425,  2429,  2433,  2436,  2439,  2443,  2447,  2450,
1676:     2453,  2457,  2461,  2467,  2472,  2479,  2483,  2489,  2494,  2501,
1677:     2506,  2513,  2519,  2527,  2531,  2534,  2539,  2543,  2546,  2548,
1678:     2552,  2556,  2560,  2564,  2568,  2572,  2577,  2581,  2586,  2590,
1679:     2595,  2601,  2608,  2615,  2623,  2630,  2638,  2645,  2653,  2657,
1680:     2662,  2667,  2674,  2676,  2681,  2683,  2687,  2690,  2693,  2697,
1681:     2701,  2705,  2709,  2713,  2717,  2721,  2725,  2729,  2733,  2737,
1682:     2741,  2745,  2748,  2751,  2757,  2764,  2771,  2779,  2781,  2783,
1683:     2786,  2789,  2792,  2797,  2799,  2802,  2804,  2807,  2810,  2814,
1684:     2820,  2827,  2836,  2843,  2850,  2855,  2860,  2862,  2864,  2866,
1685:     2872,  2874,  2876,  2881,  2883,  2888,  2890,  2895,  2897,  2902,
1686:     2904,  2906,  2908,  2910,  2912,  2914,  2921,  2928,  2933,  2938,
1687:     2943,  2948,  2955,  2961,  2967,  2973,  2978,  2985,  2990,  2996,
1688:     2997,  3003,  3004,  3007,  3008,  3010,  3014,  3018,  3021,  3024,
1689:     3025,  3032,  3034,  3035,  3039,  3040,  3043,  3046,  3047,  3049,
1690:     3054,  3057,  3060,  3063,  3066,  3069,  3074,  3078,  3080,  3086,
1691:     3090,  3092,  3096,  3098,  3100,  3102,  3104,  3106,  3108,  3110,
1692:     3112,  3114,  3116,  3118,  3120,  3122,  3124,  3126,  3128,  3130,
1693:     3132,  3137,  3139,  3144,  3146,  3151,  3153,  3156,  3158,  3161,
1694:     3163,  3166,  3168,  3172,  3174,  3178,  3180,  3181,  3183,  3187,
1695:     3189,  3193,  3197,  3199,  3203,  3207,  3208,  3210,  3212,  3214,
1696:     3216,  3218,  3220,  3222,  3224,  3226,  3228,  3233,  3237,  3240,
1697:     3244,  3245,  3249,  3253,  3256,  3259,  3261,  3262,  3265,  3268,
1698:     3272,  3275,  3277,  3279,  3283,  3289,  3291,  3294,  3299,  3302,
1699:     3303,  3305,  3306,  3308,  3311,  3314,  3317,  3321,  3327,  3329,
1700:     3330,  3332,  3335,  3336,  3339,  3341,  3342,  3344,  3345,  3347,
1701:     3351,  3355,  3358,  3360,  3362,  3364,  3368,  3370,  3373,  3375,
1702:     3379,  3381,  3383,  3385,  3388,  3390,  3392,  3395,  3397,  3399,
1703:     3402,  3409,  3412,  3418,  3422,  3426,  3428,  3430,  3432,  3434,
1704:     3436,  3438,  3440,  3442,  3444,  3446,  3448,  3450,  3452,  3454,
1705:     3456,  3458,  3460,  3462,  3464,  3466,  3469,  3472,  3476,  3480,
1706:     3481,  3483,  3485,  3487,  3489,  3491,  3493,  3495,  3501,  3505,
1707:     3506,  3508,  3510,  3512,  3514,  3519,  3527,  3530,  3531,  3533,
1708:     3535,  3537,  3539,  3553,  3570,  3572,  3575,  3576,  3578,  3579,
1709:     3581,  3582,  3585,  3586,  3588,  3589,  3596,  3605,  3612,  3621,
1710:     3628,  3637,  3640,  3642,  3647,  3651,  3654,  3659,  3663,  3669,
1711:     3671,  3672,  3674,  3676,  3677,  3679,  3681,  3683,  3685,  3687,
1712:     3689,  3691,  3693,  3695,  3697,  3699,  3703,  3705,  3707,  3709,
1713:     3711,  3713,  3715,  3718,  3720,  3722,  3725,  3729,  3733,  3735,
1714:     3739,  3743,  3746,  3750,  3754,  3758,  3762,  3764,  3766,  3768,
1715:     3770,  3774,  3780,  3782,  3784,  3786,  3788,  3792,  3795,  3797,
1716:     3802,  3808,  3814,  3819,  3826,  3828,  3830,  3832,  3834,  3836,
1717:     3838,  3839,  3841,  3845,  3847,  3848,  3856,  3858,  3861,  3865,
1718:     3868,  3869,  3872,  3873,  3876,  3881,  3884,  3886,  3888,  3890,
1719:     3893,  3897,  3900,  3903,  3907,  3912,  3915,  3917,  3919,  3921,
1720:     3925,  3928,  3938,  3950,  3963,  3978,  3982,  3987,  3992,  3993,
1721:     4001,  4012,  4015,  4019,  4020,  4025,  4027,  4029,  4031,  4033,
1722:     4035,  4037,  4039,  4041,  4043,  4045,  4047,  4049,  4051,  4053,
1723:     4055,  4057,  4059,  4061,  4063,  4065,  4067,  4069,  4071,  4073,
1724:     4075,  4077,  4079,  4081,  4083,  4085,  4087,  4089,  4091,  4093,
1725:     4095,  4097,  4099,  4101,  4103,  4105,  4107,  4109,  4111,  4113,
1726:     4115,  4117,  4119,  4121,  4123,  4125,  4127,  4129,  4131,  4133,
1727:     4135,  4137,  4139,  4141,  4143,  4145,  4147,  4149,  4151,  4153,
1728:     4155,  4157,  4159,  4161,  4163,  4165,  4167,  4169,  4171,  4173,
1729:     4175,  4177,  4179,  4181,  4183,  4185,  4187,  4189,  4191,  4193,
1730:     4195,  4197,  4199,  4201,  4203,  4205,  4207,  4209,  4211,  4213,
1731:     4215,  4217,  4219,  4221,  4223,  4225,  4227,  4229,  4231,  4233,
1732:     4235,  4237,  4239,  4241,  4243,  4245,  4247,  4249,  4251,  4253,
1733:     4255,  4257,  4259,  4261,  4263,  4265,  4267,  4269,  4271,  4273,
1734:     4275,  4277,  4279,  4281,  4283,  4285,  4287,  4289,  4291,  4293,
1735:     4295,  4297,  4299,  4301,  4303,  4305,  4307,  4309,  4311,  4313,
1736:     4315,  4317,  4319,  4321,  4323,  4325,  4327,  4329,  4331,  4333,
1737:     4335,  4337,  4339,  4341,  4343,  4345,  4347,  4349,  4351,  4353,
1738:     4355,  4357,  4359,  4361,  4363,  4365,  4367,  4369,  4371,  4373,
1739:     4375,  4377,  4379,  4381,  4383,  4385,  4387,  4389,  4391,  4393,
1740:     4395,  4397,  4399,  4401,  4403,  4405,  4407,  4409,  4411,  4413,
1741:     4415,  4417,  4419,  4421,  4423,  4425,  4427,  4429,  4431,  4433,
1742:     4435,  4437,  4439,  4441,  4443,  4445,  4447,  4449,  4451,  4453,
1743:     4455,  4457,  4459,  4461,  4463,  4465,  4467,  4469,  4471,  4473,
1744:     4475,  4477,  4479,  4481,  4483,  4485,  4487,  4489,  4491,  4493,
1745:     4495,  4497,  4499,  4501,  4503,  4505,  4507,  4509,  4511,  4513,
1746:     4515,  4517,  4519,  4521,  4523,  4525,  4527,  4529,  4531,  4533,
1747:     4535,  4537,  4539,  4541,  4543,  4545,  4547,  4549,  4551,  4553,
1748:     4555,  4557,  4559,  4561,  4563,  4565,  4567,  4569,  4571,  4573,
1749:     4575,  4577,  4579,  4581,  4583,  4585,  4587,  4589,  4591,  4593,
1750:     4595,  4597,  4599,  4601,  4603,  4605,  4607,  4609,  4611,  4613,
1751:     4615,  4617,  4619,  4621,  4623,  4625,  4627,  4629,  4631,  4633,
1752:     4635,  4637,  4639,  4641,  4643,  4645,  4647,  4649,  4651,  4653,
1753:     4655,  4657,  4659,  4661,  4663,  4665,  4667,  4669,  4671,  4673,
1754:     4675,  4677,  4679,  4681,  4683,  4685,  4687,  4689,  4691,  4693,
1755:     4695,  4697,  4699,  4701,  4703,  4705,  4707,  4709,  4711,  4713,
1756:     4715,  4717,  4719,  4721,  4723,  4725,  4727,  4729,  4731,  4733,
1757:     4735,  4737,  4739,  4741,  4743,  4745,  4747,  4749,  4751,  4753,
1758:     4755,  4757,  4759,  4761,  4763,  4765,  4767,  4769,  4771,  4773,
1759:     4775,  4777,  4779,  4781,  4783,  4785,  4787,  4789,  4791,  4793,
1760:     4795,  4797,  4799,  4801,  4803,  4805,  4807,  4809,  4811,  4813,
1761:     4815,  4817,  4819,  4821,  4823,  4825,  4827,  4829,  4831,  4833,
1762:     4835,  4837,  4839,  4841,  4843,  4845,  4847,  4849,  4851,  4853,
1763:     4855,  4857,  4859,  4861,  4863,  4865,  4867,  4869,  4871,  4873,
1764:     4875,  4877,  4879,  4881,  4883,  4885,  4887,  4889,  4891,  4893,
1765:     4895,  4897,  4899,  4901,  4903,  4905,  4907,  4909,  4911,  4913,
1766:     4915,  4917,  4919,  4921,  4923,  4925,  4927,  4929,  4931,  4933,
1767:     4935,  4937,  4939,  4941,  4943,  4945,  4947,  4949,  4951,  4953,
1768:     4955,  4957,  4959,  4961,  4963,  4965,  4967,  4969,  4971,  4973,
1769:     4975,  4977,  4979,  4981,  4983,  4985,  4987,  4989,  4991,  4993,
1770:     4995,  4997,  4999,  5001,  5003,  5005,  5007,  5009,  5011,  5013,
1771:     5015,  5017,  5019,  5021,  5023,  5025,  5027,  5029,  5031,  5033,
1772:     5035,  5037,  5039,  5041,  5043,  5045,  5047,  5049,  5051,  5053,
1773:     5055,  5057,  5059,  5061,  5063,  5065,  5067,  5069,  5071,  5073,
1774:     5075,  5077,  5079,  5081,  5083,  5085,  5087,  5089,  5091,  5093,
1775:     5095,  5097,  5099,  5101,  5103,  5105,  5107,  5109,  5111,  5113,
1776:     5115,  5117,  5119,  5121,  5123,  5125,  5127,  5129,  5131,  5133,
1777:     5135
1778: };
1779: 
1780: /* YYRHS -- A `-1'-separated list of the rules' RHS.  */
1781: static const yytype_int16 yyrhs[] =
1782: {
1783:      497,     0,    -1,   498,    -1,   498,   489,   499,    -1,   499,
1784:       -1,   813,    -1,   537,    -1,   500,    -1,   845,    -1,   852,
1785:       -1,   814,    -1,   602,    -1,   855,    -1,   598,    -1,   803,
1786:       -1,   533,    -1,   546,    -1,   511,    -1,   841,    -1,   592,
1787:       -1,   535,    -1,   817,    -1,   815,    -1,   816,    -1,   806,
1788:       -1,   514,    -1,   834,    -1,   532,    -1,   800,    -1,   512,
1789:       -1,   619,    -1,   544,    -1,   601,    -1,   836,    -1,   846,
1790:       -1,   828,    -1,   849,    -1,   853,    -1,    -1,    29,   394,
1791:      679,   508,    -1,    29,   394,   185,   149,   679,   508,    -1,
1792:       29,   194,   781,   508,    -1,    29,   194,   185,   149,   781,
1793:      508,    -1,    29,   360,   781,   508,    -1,    29,   360,   185,
1794:      149,   781,   508,    -1,    29,   441,   781,   508,    -1,    29,
1795:      441,   185,   149,   781,   508,    -1,   503,    -1,   501,   503,
1796:       -1,   366,   114,   721,    -1,   134,   114,    -1,   338,    -1,
1797:      338,   539,   540,    -1,   366,   541,    -1,   366,   171,   591,
1798:       -1,   507,    -1,   504,   490,   507,    -1,    23,   571,    -1,
1799:       23,   185,   264,   149,   571,    -1,    23,    75,   571,    -1,
1800:       23,    75,   185,   264,   149,   571,    -1,    29,   513,   789,
1801:      502,    -1,    29,   513,   789,   134,   264,   269,    -1,    29,
1802:      513,   789,   366,   264,   269,    -1,    29,   513,   789,   366,
1803:      382,   543,    -1,    29,   513,   789,   366,   559,    -1,    29,
1804:      513,   789,   337,   559,    -1,    29,   513,   789,   366,   385,
1805:      789,    -1,    29,   513,   789,    23,   171,   591,    36,   184,
1806:      549,    -1,    29,   513,   789,   501,    -1,    29,   513,   789,
1807:      134,   184,    -1,    29,   513,   789,   134,   184,   185,   149,
1808:       -1,   134,   513,   185,   149,   789,   596,    -1,   134,   513,
1809:      789,   596,    -1,    29,   513,   789,   510,   416,   691,   688,
1810:      506,    -1,    29,   513,   789,   509,    -1,    23,   561,    -1,
1811:       29,    85,   783,   547,    -1,   432,    85,   783,    -1,   134,
1812:       85,   185,   149,   783,   596,    -1,   134,    85,   783,   596,
1813:       -1,   366,   236,    -1,   366,   425,    -1,   366,   559,    -1,
1814:      337,   559,    -1,   509,    -1,   429,   721,    -1,    -1,   554,
1815:       -1,   366,   554,    -1,    23,   554,    -1,   134,   569,    -1,
1816:      505,    -1,   508,   490,   505,    -1,   283,   486,   504,   487,
1817:       -1,   366,   106,    -1,    -1,   110,   783,    -1,   110,   309,
1818:      783,    -1,   110,    27,    -1,   110,   309,    27,    -1,    29,
1819:      352,   783,   333,   405,   783,    -1,    29,   394,   679,   333,
1820:      405,   783,    -1,    29,   394,   185,   149,   679,   333,   405,
1821:      783,    -1,    29,   360,   781,   333,   405,   783,    -1,    29,
1822:      360,   185,   149,   781,   333,   405,   783,    -1,    29,   441,
1823:      781,   333,   405,   783,    -1,    29,   441,   185,   149,   781,
1824:      333,   405,   783,    -1,    29,   194,   781,   333,   405,   783,
1825:       -1,    29,   194,   185,   149,   781,   333,   405,   783,    -1,
1826:       29,   394,   679,   333,   513,   783,   405,   783,    -1,    29,
1827:      394,   185,   149,   679,   333,   513,   783,   405,   783,    -1,
1828:       29,   394,   679,   333,    85,   783,   405,   783,    -1,    29,
1829:      394,   185,   149,   679,   333,    85,   783,   405,   783,    -1,
1830:       75,    -1,    -1,   518,   204,   210,   516,   515,   521,   523,
1831:       -1,   619,    -1,   292,   524,   434,   619,    -1,   486,   528,
1832:      487,   619,    -1,   486,   528,   487,   292,   524,   434,   619,
1833:       -1,   114,   435,    -1,   781,    -1,   781,    36,   789,    -1,
1834:      486,   530,   487,   685,    -1,   279,    85,   783,    -1,    -1,
1835:      624,    -1,    -1,   789,   775,    -1,   531,   475,   721,    -1,
1836:      486,   525,   487,   475,   721,    -1,   279,    83,   517,   130,
1837:      427,   366,   529,   685,    -1,   279,    83,   517,   130,   265,
1838:       -1,    -1,   789,   526,   527,   637,   638,    -1,   726,   526,
1839:      527,   637,   638,    -1,   486,   721,   487,   526,   527,   637,
1840:      638,    -1,   340,   778,    -1,    -1,   428,    -1,   393,    -1,
1841:      531,    -1,   525,   490,   531,    -1,    73,   794,    -1,    -1,
1842:      794,    -1,    -1,   519,    -1,   528,   490,   519,    -1,   520,
1843:       -1,   529,   490,   520,    -1,   522,    -1,   530,   490,   522,
1844:       -1,   789,   775,    -1,   306,   789,    -1,   306,   789,   475,
1845:      833,    -1,   306,   789,   486,   753,   487,    -1,    92,   590,
1846:      360,   781,   534,    -1,    92,   590,   360,   185,   264,   149,
1847:      781,   534,    -1,   538,    -1,    -1,   148,   783,   536,    -1,
1848:       92,   590,   394,   857,    36,   148,   783,   536,   856,    -1,
1849:       92,   590,   394,   185,   264,   149,   857,    36,   148,   783,
1850:      536,   856,    -1,   486,   751,   487,    -1,    -1,    29,   360,
1851:      781,   538,    -1,    29,   360,   185,   149,   781,   538,    -1,
1852:      541,    -1,   538,   541,    -1,   448,    -1,   472,    -1,    -1,
1853:        4,    -1,   477,     4,    -1,   478,     4,    -1,   543,    -1,
1854:       36,   693,    -1,    55,   540,    -1,   105,    -1,   262,   105,
1855:       -1,   193,   542,   540,    -1,   242,   540,    -1,   250,   540,
1856:       -1,   262,   242,    -1,   262,   250,    -1,   293,    54,   794,
1857:       -1,   360,   255,   794,    -1,   380,   539,   540,    -1,   338,
1858:       -1,   338,   539,   540,    -1,    54,    -1,    -1,   787,    -1,
1859:      477,   787,    -1,   478,   787,    -1,    19,   545,    -1,    47,
1860:      545,    -1,   380,   545,    -1,    79,   545,    -1,   140,   545,
1861:       -1,   345,   545,    -1,   451,    -1,   407,    -1,    -1,    92,
1862:      590,   394,   781,   486,   578,   487,   566,   558,    -1,    92,
1863:      590,   394,   185,   264,   149,   781,   486,   578,   487,   566,
1864:      558,    -1,    -1,   547,   570,    -1,   585,    -1,   864,    -1,
1865:      748,    -1,   540,    -1,   788,    -1,   263,    -1,   486,   538,
1866:      487,    -1,    -1,   788,    -1,   262,    22,    -1,   339,    -1,
1867:       58,    -1,   366,   269,    -1,   366,   114,    -1,    85,   783,
1868:      553,    -1,   553,    -1,   565,    -1,    73,   794,    -1,   264,
1869:      269,    -1,   269,    -1,   422,   577,    -1,   312,   216,   577,
1870:       -1,    67,   486,   721,   487,   560,    -1,   114,   722,    -1,
1871:      171,   591,    36,   184,   549,    -1,   327,   781,   580,   588,
1872:      556,    -1,   569,   550,    -1,   279,   427,   551,    -1,   555,
1873:       -1,   582,    -1,   555,   582,    -1,   582,   555,    -1,    -1,
1874:      283,   486,   572,   487,    -1,    -1,   279,    79,   134,    -1,
1875:      279,    79,   119,   348,    -1,   279,    79,   311,   348,    -1,
1876:       -1,   486,   563,   487,    -1,   262,   196,    -1,    -1,    85,
1877:      783,   586,    -1,   586,    -1,    78,    -1,    86,    -1,   115,
1878:       -1,   184,    -1,   195,    -1,   382,    -1,   385,    -1,    27,
1879:       -1,   583,    -1,   563,   490,   583,    -1,   429,   194,   574,
1880:       -1,   116,    -1,   264,   116,    -1,   198,   117,    -1,   198,
1881:      187,    -1,   448,   559,    -1,   448,   277,    -1,   450,   277,
1882:       -1,    -1,   486,   573,   487,    -1,   568,   192,   562,    -1,
1883:      568,   146,   562,    -1,    -1,   798,    -1,   264,   116,    -1,
1884:      116,    -1,   198,   187,    -1,   198,   117,    -1,   264,   431,
1885:       -1,   262,   196,    -1,   789,   691,   557,   581,    -1,   554,
1886:       -1,   572,   490,   554,    -1,   576,    -1,   573,   490,   576,
1887:       -1,   789,    -1,   571,    -1,   589,    -1,   561,    -1,   798,
1888:      475,   548,    -1,   798,    -1,   448,   567,    -1,    -1,   587,
1889:       -1,    -1,   789,    -1,   486,   584,   487,    -1,    -1,   581,
1890:      552,    -1,    -1,   279,   119,   551,    -1,   798,   475,   548,
1891:       -1,   798,    -1,   798,   488,   798,   475,   548,    -1,   798,
1892:      488,   798,    -1,   579,    -1,   584,   490,   579,    -1,   691,
1893:       -1,   791,   795,   481,   416,    -1,   367,   791,   795,   481,
1894:      416,    -1,    67,   486,   721,   487,   547,    -1,   422,   486,
1895:      584,   487,   577,   547,    -1,   422,   564,   547,    -1,   312,
1896:      216,   486,   584,   487,   577,   547,    -1,   312,   216,   564,
1897:      547,    -1,   164,   216,   486,   584,   487,   327,   781,   580,
1898:      588,   556,   547,    -1,   575,    -1,   587,   490,   575,    -1,
1899:      240,   168,    -1,   240,   297,    -1,   240,   372,    -1,    -1,
1900:      226,   781,   568,    -1,   400,    -1,   398,    -1,   230,   400,
1901:       -1,   230,   398,    -1,   173,   400,    -1,   173,   398,    -1,
1902:      425,    -1,    -1,    30,    -1,    54,   114,    -1,   134,   593,
1903:      185,   149,   595,   596,    -1,   134,   593,   595,   596,    -1,
1904:      134,   594,   185,   149,   782,   596,    -1,   134,   594,   782,
1905:      596,    -1,   134,   597,   783,   279,   794,   596,    -1,   134,
1906:      597,   185,   149,   783,   279,   794,   596,    -1,   394,    -1,
1907:      360,    -1,   169,    -1,   237,    -1,   441,    -1,   241,   441,
1908:       -1,   194,    -1,   164,   394,    -1,    74,    -1,    89,    -1,
1909:      382,    -1,   401,   355,   296,    -1,   401,   355,   126,    -1,
1910:      401,   355,   399,    -1,   401,   355,    82,    -1,    21,   243,
1911:       -1,   143,   410,    -1,   152,    -1,   164,   106,   452,    -1,
1912:      318,    -1,   352,    -1,   363,    -1,   794,    -1,   595,   490,
1913:      794,    -1,    58,    -1,   339,    -1,    -1,   304,    -1,   349,
1914:       -1,   410,    -1,    92,   599,   781,   600,    36,   721,    -1,
1915:      169,    -1,   237,    -1,   486,   487,    -1,   486,   753,   487,
1916:       -1,   518,   427,   842,   366,   529,   669,   843,   523,    -1,
1917:       90,   614,   781,   580,   612,   603,   608,   617,   604,   539,
1918:      609,    -1,    90,   486,   802,   487,   405,   608,   617,   539,
1919:      609,    -1,   167,    -1,   405,    -1,   606,   121,   788,    -1,
1920:       -1,   616,    -1,   605,   490,   616,    -1,   429,    -1,    -1,
1921:       36,    -1,    -1,   317,    -1,    -1,   613,    -1,   486,   618,
1922:      487,    -1,   825,    -1,   540,    -1,   479,    -1,   486,   605,
1923:      487,    -1,    -1,   798,   610,    -1,   448,   277,    -1,    -1,
1924:      613,   615,    -1,    -1,    50,    -1,    -1,    50,    -1,   277,
1925:       -1,   166,    -1,   120,   607,   788,    -1,   269,   607,   788,
1926:       -1,    94,    -1,   180,    -1,   319,   607,   788,    -1,   142,
1927:      607,   788,    -1,   163,   319,   584,    -1,   163,   319,   479,
1928:       -1,   163,   264,   269,   584,    -1,   163,   269,   584,    -1,
1929:      138,   788,    -1,   825,    -1,   788,    -1,   383,    -1,   384,
1930:       -1,   611,    -1,   618,   490,   611,    -1,   621,    -1,   620,
1931:       -1,   486,   621,   487,    -1,   486,   620,   487,    -1,   623,
1932:       -1,   622,   634,    -1,   622,   633,   661,   640,    -1,   622,
1933:      633,   639,   662,    -1,   624,   622,    -1,   624,   622,   634,
1934:       -1,   624,   622,   633,   661,   640,    -1,   624,   622,   633,
1935:      639,   662,    -1,   623,    -1,   620,    -1,   359,   632,   777,
1936:      627,   669,   685,   656,   660,   730,   644,    -1,   359,   631,
1937:      778,   627,   669,   685,   656,   660,   730,   644,    -1,   668,
1938:       -1,   394,   679,    -1,   622,   421,   630,   622,    -1,   622,
1939:      208,   630,   622,    -1,   622,   144,   630,   622,    -1,   448,
1940:      625,    -1,   472,   625,    -1,   448,   325,   625,    -1,   626,
1941:       -1,   625,   490,   626,    -1,   783,   796,    36,   486,   802,
1942:      487,    -1,   210,   628,    -1,    -1,   400,   629,   781,    -1,
1943:      398,   629,   781,    -1,   230,   400,   629,   781,    -1,   230,
1944:      398,   629,   781,    -1,   173,   400,   629,   781,    -1,   173,
1945:      398,   629,   781,    -1,   425,   629,   781,    -1,   394,   781,
1946:       -1,   781,    -1,   394,    -1,    -1,    27,    -1,   129,    -1,
1947:       -1,   129,    -1,   129,   279,   486,   751,   487,    -1,    27,
1948:       -1,    -1,   634,    -1,    -1,   285,    54,   635,    -1,   636,
1949:       -1,   635,   490,   636,    -1,   721,   429,   748,   638,    -1,
1950:      721,   637,   638,    -1,    37,    -1,   123,    -1,    -1,   471,
1951:      159,    -1,   471,   220,    -1,    -1,   641,   642,    -1,   642,
1952:      641,    -1,   641,    -1,   642,    -1,   639,    -1,    -1,   227,
1953:      650,    -1,   227,   650,   490,   651,    -1,   157,   655,   652,
1954:      654,   280,    -1,   157,   655,   654,   280,    -1,   276,   651,
1955:       -1,   276,   652,   654,    -1,     4,   481,    -1,     9,   481,
1956:       -1,     4,   301,    -1,     9,   301,    -1,     9,    -1,     9,
1957:      348,    -1,   429,   350,   646,    -1,    -1,   789,    -1,    -1,
1958:      645,   486,   643,   487,   649,    -1,   643,    -1,   643,   486,
1959:      789,   487,    -1,   643,   486,   789,   490,     9,   487,    -1,
1960:      396,   646,    -1,   647,    -1,    -1,   334,   486,     9,   487,
1961:       -1,    -1,   721,    -1,    27,    -1,   721,    -1,   723,    -1,
1962:      477,   653,    -1,   478,   653,    -1,   787,    -1,     4,    -1,
1963:      347,    -1,   348,    -1,   159,    -1,   261,    -1,   176,    54,
1964:      657,    -1,    -1,   658,    -1,   657,   490,   658,    -1,   721,
1965:       -1,   659,    -1,   486,   487,    -1,   179,   721,    -1,    -1,
1966:      663,    -1,   162,   321,   280,    -1,   661,    -1,    -1,   664,
1967:       -1,   663,   664,    -1,   665,   666,   667,    -1,   162,   427,
1968:       -1,   162,   262,   216,   427,    -1,   162,   369,    -1,   162,
1969:      216,   369,    -1,   274,   780,    -1,    -1,   268,    -1,   373,
1970:      235,    -1,    -1,   435,   486,   751,   487,    -1,   668,   490,
1971:      486,   751,   487,    -1,   167,   670,    -1,    -1,   671,    -1,
1972:      670,   490,   671,    -1,   679,   674,   648,    -1,   680,   675,
1973:      648,    -1,   221,   680,   675,    -1,   620,   674,   648,    -1,
1974:      221,   620,   674,    -1,   672,    -1,   486,   672,   487,   673,
1975:       -1,   486,   672,   487,    -1,   671,    93,   215,   671,    -1,
1976:      671,   676,   215,   671,   678,    -1,   671,   215,   671,   678,
1977:       -1,   671,   258,   676,   215,   671,    -1,   671,   258,   215,
1978:      671,    -1,    36,   789,   486,   782,   487,    -1,    36,   790,
1979:       -1,   789,   486,   782,   487,    -1,   789,    -1,   673,    -1,
1980:       -1,   673,    -1,    36,   486,   686,   487,    -1,    36,   789,
1981:      486,   686,   487,    -1,   789,   486,   686,   487,    -1,    -1,
1982:      168,   677,    -1,   224,   677,    -1,   343,   677,    -1,   200,
1983:       -1,   288,    -1,    -1,   429,   486,   782,   487,    -1,   279,
1984:      721,    -1,   781,    -1,   781,   479,    -1,   280,   781,    -1,
1985:      280,   486,   781,   487,    -1,   726,   684,    -1,   348,   167,
1986:      486,   682,   487,   684,    -1,   726,   683,    -1,   681,    -1,
1987:      682,   490,   681,    -1,    36,   486,   686,   487,    -1,    -1,
1988:      472,   286,    -1,    -1,   445,   721,    -1,    -1,   687,    -1,
1989:      686,   490,   687,    -1,   789,   691,   688,    -1,    73,   794,
1990:       -1,    -1,   789,   691,    -1,   689,   490,   789,   691,    -1,
1991:      347,    -1,   388,    -1,   693,   692,    -1,   367,   693,   692,
1992:       -1,   693,    35,   484,   787,   485,    -1,   367,   693,    35,
1993:      484,   787,   485,    -1,   693,    35,    -1,   367,   693,    35,
1994:       -1,   690,   486,   689,   487,   692,    -1,   238,   486,   755,
1995:      487,   692,    -1,   692,   484,   485,    -1,   692,   484,   787,
1996:      485,    -1,    -1,   695,    -1,   697,    -1,   699,    -1,   703,
1997:       -1,   709,    -1,   710,   720,    -1,   710,   486,   787,   487,
1998:       -1,   697,    -1,   700,    -1,   704,    -1,   709,    -1,   793,
1999:      696,    -1,   486,   751,   487,    -1,    -1,   206,    -1,   207,
2000:       -1,   374,    -1,    49,    -1,   322,    -1,   160,   698,    -1,
2001:      133,   308,    -1,   112,   696,    -1,   111,   696,    -1,   272,
2002:      696,    -1,    52,    -1,   486,   787,   487,    -1,    -1,   701,
2003:       -1,   702,    -1,   701,    -1,   702,    -1,    51,   708,   486,
2004:      751,   487,    -1,    51,   708,    -1,   705,    -1,   706,    -1,
2005:      705,    -1,   706,    -1,   707,   486,   787,   487,    -1,   707,
2006:       -1,    65,   708,    -1,    64,   708,    -1,   436,    -1,   257,
2007:       65,   708,    -1,   257,    64,   708,    -1,   259,   708,    -1,
2008:      438,    -1,    -1,   404,   486,   787,   487,   711,    -1,   404,
2009:      711,    -1,   403,   486,   787,   487,   711,    -1,   403,   711,
2010:       -1,   209,    -1,   472,   403,   469,    -1,   450,   403,   469,
2011:       -1,    -1,   466,    -1,   467,    -1,   252,    -1,   253,    -1,
2012:      108,    -1,   109,    -1,   182,    -1,   183,    -1,   248,    -1,
2013:      249,    -1,   356,    -1,   357,    -1,   246,    -1,   247,    -1,
2014:      244,    -1,   245,    -1,   712,    -1,   713,    -1,   714,    -1,
2015:      715,    -1,   716,    -1,   717,    -1,   718,    -1,   719,    -1,
2016:      712,   405,   713,    -1,   714,   405,   715,    -1,   714,   405,
2017:      716,    -1,   714,   405,   717,    -1,   715,   405,   716,    -1,
2018:      715,   405,   717,    -1,   716,   405,   717,    -1,    -1,   723,
2019:       -1,   721,    11,   691,    -1,   721,    73,   794,    -1,   721,
2020:       41,   403,   469,   721,    -1,   477,   721,    -1,   478,   721,
2021:       -1,   721,   477,   721,    -1,   721,   478,   721,    -1,   721,
2022:      479,   721,    -1,   721,   480,   721,    -1,   721,   481,   721,
2023:       -1,   721,   482,   721,    -1,   721,   473,   721,    -1,   721,
2024:      474,   721,    -1,   721,   475,   721,    -1,   721,    16,   721,
2025:       -1,   721,    17,   721,    -1,   721,    18,   721,    -1,   721,
2026:      747,   721,    -1,   747,   721,    -1,   721,   747,    -1,   721,
2027:       33,   721,    -1,   721,   284,   721,    -1,   264,   721,    -1,
2028:      470,   721,    -1,   721,   172,   721,    -1,   721,   226,   721,
2029:       -1,   721,   226,   721,   142,   721,    -1,   721,   470,   226,
2030:      721,    -1,   721,   470,   226,   721,   142,   721,    -1,   721,
2031:      186,   721,    -1,   721,   186,   721,   142,   721,    -1,   721,
2032:      470,   186,   721,    -1,   721,   470,   186,   721,   142,   721,
2033:       -1,   721,   371,   405,   721,    -1,   721,   371,   405,   721,
2034:      142,   721,    -1,   721,   470,   371,   405,   721,    -1,   721,
2035:      470,   371,   405,   721,   142,   721,    -1,   721,   212,   269,
2036:       -1,   721,   213,    -1,   721,   212,   264,   269,    -1,   721,
2037:      264,   269,    -1,   721,   267,    -1,   741,    -1,   491,   743,
2038:      492,    -1,   484,   752,   485,    -1,   741,    15,   721,    -1,
2039:      771,    15,   721,    -1,   741,   290,   741,    -1,   721,   212,
2040:      412,    -1,   721,   212,   264,   412,    -1,   721,   212,   155,
2041:       -1,   721,   212,   264,   155,    -1,   721,   212,   423,    -1,
2042:      721,   212,   264,   423,    -1,   721,   212,   129,   167,   721,
2043:       -1,   721,   212,   264,   129,   167,   721,    -1,   721,   212,
2044:      274,   486,   755,   487,    -1,   721,   212,   264,   274,   486,
2045:      755,   487,    -1,   721,    48,   776,   722,    33,   721,    -1,
2046:      721,   470,    48,   776,   722,    33,   721,    -1,   721,    48,
2047:      391,   722,    33,   721,    -1,   721,   470,    48,   391,   722,
2048:       33,   721,    -1,   721,   191,   765,    -1,   721,   470,   191,
2049:      765,    -1,   721,   749,   744,   620,    -1,   721,   749,   744,
2050:      486,   721,   487,    -1,   114,    -1,    35,   484,   752,   485,
2051:       -1,   723,    -1,   722,    11,   691,    -1,   477,   722,    -1,
2052:      478,   722,    -1,   722,   477,   722,    -1,   722,   478,   722,
2053:       -1,   722,   479,   722,    -1,   722,   480,   722,    -1,   722,
2054:      481,   722,    -1,   722,   482,   722,    -1,   722,   473,   722,
2055:       -1,   722,   474,   722,    -1,   722,   475,   722,    -1,   722,
2056:       16,   722,    -1,   722,    17,   722,    -1,   722,    18,   722,
2057:       -1,   722,   747,   722,    -1,   747,   722,    -1,   722,   747,
2058:       -1,   722,   212,   129,   167,   722,    -1,   722,   212,   264,
2059:      129,   167,   722,    -1,   722,   212,   274,   486,   755,   487,
2060:       -1,   722,   212,   264,   274,   486,   755,   487,    -1,   771,
2061:       -1,   786,    -1,   493,     9,    -1,   494,   775,    -1,    10,
2062:      775,    -1,   486,   721,   487,   775,    -1,   766,    -1,   725,
2063:      775,    -1,   620,    -1,   620,   774,    -1,   149,   620,    -1,
2064:      785,   486,   487,    -1,   785,   486,   753,   633,   487,    -1,
2065:      785,   486,   437,   754,   633,   487,    -1,   785,   486,   753,
2066:      490,   437,   754,   633,   487,    -1,   785,   486,    27,   753,
2067:      633,   487,    -1,   785,   486,   129,   753,   633,   487,    -1,
2068:      785,   486,   479,   487,    -1,   724,   728,   729,   733,    -1,
2069:      727,    -1,   724,    -1,   727,    -1,    74,   162,   486,   721,
2070:      487,    -1,    98,    -1,   101,    -1,   101,   486,   787,   487,
2071:       -1,   102,    -1,   102,   486,   787,   487,    -1,   231,    -1,
2072:      231,   486,   787,   487,    -1,   232,    -1,   232,   486,   787,
2073:      487,    -1,    99,    -1,   103,    -1,   365,    -1,   428,    -1,
2074:       97,    -1,   100,    -1,    61,   486,   721,    36,   691,   487,
2075:       -1,   415,   486,   721,    36,   691,   487,    -1,   154,   486,
2076:      756,   487,    -1,   291,   486,   758,   487,    -1,   305,   486,
2077:      760,   487,    -1,   390,   486,   761,   487,    -1,   409,   486,
2078:      721,    36,   691,   487,    -1,   411,   486,    53,   764,   487,
2079:       -1,   411,   486,   222,   764,   487,    -1,   411,   486,   406,
2080:      764,   487,    -1,   411,   486,   764,   487,    -1,   270,   486,
2081:      721,   490,   721,   487,    -1,    72,   486,   751,   487,    -1,
2082:      449,   176,   486,   634,   487,    -1,    -1,   158,   486,   445,
2083:      721,   487,    -1,    -1,   447,   731,    -1,    -1,   732,    -1,
2084:      731,   490,   732,    -1,   789,    36,   734,    -1,   289,   734,
2085:       -1,   289,   789,    -1,    -1,   486,   735,   736,   633,   737,
2086:      487,    -1,   789,    -1,    -1,   298,    54,   751,    -1,    -1,
2087:      320,   738,    -1,   348,   738,    -1,    -1,   739,    -1,    48,
2088:      739,    33,   739,    -1,   418,   307,    -1,   418,   161,    -1,
2089:       96,   347,    -1,   721,   307,    -1,   721,   161,    -1,   347,
2090:      486,   751,   487,    -1,   347,   486,   487,    -1,   740,    -1,
2091:      486,   751,   490,   721,   487,    -1,   790,   495,   721,    -1,
2092:      742,    -1,   743,   490,   742,    -1,    34,    -1,   376,    -1,
2093:       27,    -1,     8,    -1,   746,    -1,   477,    -1,   478,    -1,
2094:      479,    -1,   480,    -1,   481,    -1,   482,    -1,   473,    -1,
2095:      474,    -1,   475,    -1,    16,    -1,    17,    -1,    18,    -1,
2096:        8,    -1,   281,   486,   750,   487,    -1,   745,    -1,   281,
2097:      486,   750,   487,    -1,   745,    -1,   281,   486,   750,   487,
2098:       -1,   226,    -1,   470,   226,    -1,   172,    -1,   470,   172,
2099:       -1,   186,    -1,   470,   186,    -1,   745,    -1,   789,   488,
2100:      750,    -1,   721,    -1,   751,   490,   721,    -1,   751,    -1,
2101:       -1,   754,    -1,   753,   490,   754,    -1,   721,    -1,   797,
2102:       13,   721,    -1,   797,    14,   721,    -1,   691,    -1,   755,
2103:      490,   691,    -1,   757,   167,   721,    -1,    -1,     3,    -1,
2104:      712,    -1,   713,    -1,   714,    -1,   715,    -1,   716,    -1,
2105:      717,    -1,   718,    -1,   719,    -1,   788,    -1,   721,   759,
2106:      762,   763,    -1,   721,   759,   762,    -1,   302,   721,    -1,
2107:      722,   191,   722,    -1,    -1,   721,   762,   763,    -1,   721,
2108:      763,   762,    -1,   721,   762,    -1,   721,   763,    -1,   751,
2109:       -1,    -1,   167,   721,    -1,   162,   721,    -1,   721,   167,
2110:      751,    -1,   167,   751,    -1,   751,    -1,   620,    -1,   486,
2111:      751,   487,    -1,    60,   770,   767,   769,   140,    -1,   768,
2112:       -1,   767,   768,    -1,   444,   721,   402,   721,    -1,   136,
2113:      721,    -1,    -1,   721,    -1,    -1,   789,    -1,   789,   774,
2114:       -1,   488,   784,    -1,   488,   479,    -1,   484,   721,   485,
2115:       -1,   484,   773,   495,   773,   485,    -1,   721,    -1,    -1,
2116:      772,    -1,   774,   772,    -1,    -1,   775,   772,    -1,    40,
2117:       -1,    -1,   778,    -1,    -1,   779,    -1,   778,   490,   779,
2118:       -1,   721,    36,   799,    -1,   721,     3,    -1,   721,    -1,
2119:      479,    -1,   781,    -1,   780,   490,   781,    -1,   790,    -1,
2120:      789,   774,    -1,   783,    -1,   782,   490,   783,    -1,   789,
2121:       -1,   798,    -1,   792,    -1,   789,   774,    -1,   787,    -1,
2122:        4,    -1,   788,   775,    -1,     6,    -1,     7,    -1,   785,
2123:      788,    -1,   785,   486,   753,   633,   487,   788,    -1,   694,
2124:      788,    -1,   710,   486,   721,   487,   720,    -1,   710,   787,
2125:      720,    -1,   710,   788,   720,    -1,   412,    -1,   155,    -1,
2126:      269,    -1,     9,    -1,     5,    -1,     3,    -1,   858,    -1,
2127:      859,    -1,   789,    -1,     5,    -1,     3,    -1,   858,    -1,
2128:      863,    -1,     3,    -1,   858,    -1,   860,    -1,     3,    -1,
2129:      858,    -1,   861,    -1,   789,    -1,   789,   795,    -1,   488,
2130:      784,    -1,   795,   488,   784,    -1,   486,   782,   487,    -1,
2131:       -1,   791,    -1,     3,    -1,   862,    -1,   858,    -1,   864,
2132:       -1,   798,    -1,     5,    -1,   309,   783,   801,    36,   802,
2133:       -1,   486,   755,   487,    -1,    -1,   619,    -1,   514,    -1,
2134:      601,    -1,   841,    -1,    92,   352,   789,   804,    -1,    92,
2135:      352,   185,   264,   149,   789,   804,    -1,   804,   805,    -1,
2136:       -1,   546,    -1,   806,    -1,   533,    -1,   853,    -1,    92,
2137:      812,   194,   809,   810,   279,   781,   808,   486,   530,   487,
2138:      811,   685,    -1,    92,   812,   194,   809,   185,   264,   149,
2139:      574,   279,   781,   808,   486,   530,   487,   811,   685,    -1,
2140:      789,    -1,   429,   807,    -1,    -1,    81,    -1,    -1,   574,
2141:       -1,    -1,   448,   559,    -1,    -1,   422,    -1,    -1,    29,
2142:      394,   679,   366,   352,   783,    -1,    29,   394,   185,   149,
2143:      679,   366,   352,   783,    -1,    29,   360,   781,   366,   352,
2144:      783,    -1,    29,   360,   185,   149,   781,   366,   352,   783,
2145:       -1,    29,   441,   781,   366,   352,   783,    -1,    29,   441,
2146:      185,   149,   781,   366,   352,   783,    -1,   163,    68,    -1,
2147:       68,    -1,   151,   107,   788,   609,    -1,   190,   107,   788,
2148:       -1,   150,   820,    -1,   150,   824,   818,   820,    -1,   150,
2149:      439,   820,    -1,   150,   486,   823,   487,   820,    -1,   439,
2150:       -1,    -1,   825,    -1,   540,    -1,    -1,   619,    -1,   514,
2151:       -1,   601,    -1,   841,    -1,   855,    -1,     3,    -1,   858,
2152:       -1,   862,    -1,   821,    -1,   788,    -1,   826,    -1,   823,
2153:      490,   826,    -1,    32,    -1,    31,    -1,   412,    -1,   155,
2154:       -1,   279,    -1,   822,    -1,   827,   819,    -1,   821,    -1,
2155:      824,    -1,   366,   829,    -1,   366,   230,   829,    -1,   366,
2156:      364,   829,    -1,   830,    -1,   851,   167,    96,    -1,   403,
2157:      469,   832,    -1,   352,   788,    -1,   851,   405,   833,    -1,
2158:      851,   475,   833,    -1,   851,   405,   114,    -1,   851,   475,
2159:      114,    -1,   825,    -1,   540,    -1,   788,    -1,     3,    -1,
2160:      710,   788,   720,    -1,   710,   486,   787,   487,   788,    -1,
2161:      540,    -1,   114,    -1,   230,    -1,   831,    -1,   833,   490,
2162:      831,    -1,   229,   835,    -1,   788,    -1,   430,   838,   840,
2163:      818,    -1,   430,   838,   840,   818,   781,    -1,   430,   838,
2164:      840,   818,   845,    -1,   430,   486,   839,   487,    -1,   430,
2165:      486,   839,   487,   781,   796,    -1,   824,    -1,   439,    -1,
2166:      166,    -1,   168,    -1,     3,    -1,   168,    -1,    -1,   837,
2167:       -1,   839,   490,   837,    -1,   166,    -1,    -1,   518,   119,
2168:      167,   842,   844,   843,   523,    -1,   679,    -1,   679,   789,
2169:       -1,   679,    36,   789,    -1,   445,   721,    -1,    -1,   429,
2170:      670,    -1,    -1,   824,   818,    -1,   824,   818,   781,   796,
2171:       -1,   337,   848,    -1,   851,    -1,    27,    -1,   847,    -1,
2172:      403,   469,    -1,   407,   214,   225,    -1,   850,   619,    -1,
2173:      850,   851,    -1,   850,   403,   469,    -1,   850,   407,   214,
2174:      225,    -1,   850,    27,    -1,   370,    -1,   124,    -1,   789,
2175:       -1,   851,   488,   789,    -1,    56,   724,    -1,    92,   590,
2176:      441,   781,   580,   811,    36,   619,   854,    -1,    92,   284,
2177:      335,   590,   441,   781,   580,   811,    36,   619,   854,    -1,
2178:       92,   590,   325,   441,   781,   486,   584,   487,   811,    36,
2179:      619,   854,    -1,    92,   284,   335,   590,   325,   441,   781,
2180:      486,   584,   487,   811,    36,   619,   854,    -1,   448,    67,
2181:      282,    -1,   448,    59,    67,   282,    -1,   448,   230,    67,
2182:      282,    -1,    -1,    92,   590,   394,   857,    36,   619,   856,
2183:       -1,    92,   590,   394,   185,   264,   149,   857,    36,   619,
2184:      856,    -1,   448,   106,    -1,   448,   262,   106,    -1,    -1,
2185:      781,   580,   566,   558,    -1,    19,    -1,    20,    -1,    21,
2186:       -1,    22,    -1,    23,    -1,    24,    -1,    25,    -1,    26,
2187:       -1,    28,    -1,    29,    -1,    30,    -1,    38,    -1,    39,
2188:       -1,    41,    -1,    42,    -1,    43,    -1,    45,    -1,    46,
2189:       -1,    47,    -1,    54,    -1,    55,    -1,    56,    -1,    57,
2190:       -1,    58,    -1,    59,    -1,    62,    -1,    63,    -1,    66,
2191:       -1,    68,    -1,    69,    -1,    70,    -1,    71,    -1,    76,
2192:       -1,    77,    -1,    78,    -1,    79,    -1,    80,    -1,    82,
2193:       -1,    83,    -1,    84,    -1,    86,    -1,    87,    -1,    88,
2194:       -1,    89,    -1,    90,    -1,    91,    -1,    94,    -1,    95,
2195:       -1,    96,    -1,   104,    -1,   105,    -1,   106,    -1,   107,
2196:       -1,   108,    -1,   109,    -1,   110,    -1,   113,    -1,   115,
2197:       -1,   117,    -1,   118,    -1,   119,    -1,   120,    -1,   121,
2198:       -1,   122,    -1,   124,    -1,   125,    -1,   126,    -1,   127,
2199:       -1,   128,    -1,   131,    -1,   132,    -1,   133,    -1,   134,
2200:       -1,   135,    -1,   137,    -1,   138,    -1,   139,    -1,   141,
2201:       -1,   142,    -1,   143,    -1,   145,    -1,   146,    -1,   147,
2202:       -1,   148,    -1,   150,    -1,   151,    -1,   152,    -1,   153,
2203:       -1,   156,    -1,   158,    -1,   159,    -1,   161,    -1,   163,
2204:       -1,   165,    -1,   169,    -1,   170,    -1,   171,    -1,   173,
2205:       -1,   175,    -1,   178,    -1,   180,    -1,   181,    -1,   182,
2206:       -1,   183,    -1,   184,    -1,   185,    -1,   187,    -1,   188,
2207:       -1,   189,    -1,   190,    -1,   192,    -1,   193,    -1,   194,
2208:       -1,   195,    -1,   196,    -1,   197,    -1,   199,    -1,   202,
2209:       -1,   203,    -1,   204,    -1,   205,    -1,   211,    -1,   214,
2210:       -1,   216,    -1,   217,    -1,   218,    -1,   219,    -1,   220,
2211:       -1,   223,    -1,   225,    -1,   228,    -1,   229,    -1,   230,
2212:       -1,   233,    -1,   234,    -1,   235,    -1,   236,    -1,   237,
2213:       -1,   239,    -1,   240,    -1,   241,    -1,   242,    -1,   243,
2214:       -1,   244,    -1,   245,    -1,   246,    -1,   247,    -1,   248,
2215:       -1,   249,    -1,   250,    -1,   251,    -1,   252,    -1,   253,
2216:       -1,   254,    -1,   255,    -1,   256,    -1,   260,    -1,   261,
2217:       -1,   262,    -1,   265,    -1,   266,    -1,   268,    -1,   271,
2218:       -1,   273,    -1,   274,    -1,   275,    -1,   277,    -1,   278,
2219:       -1,   281,    -1,   282,    -1,   283,    -1,   286,    -1,   289,
2220:       -1,   292,    -1,   293,    -1,   294,    -1,   295,    -1,   296,
2221:       -1,   297,    -1,   298,    -1,   299,    -1,   300,    -1,   301,
2222:       -1,   303,    -1,   304,    -1,   306,    -1,   307,    -1,   309,
2223:       -1,   310,    -1,   311,    -1,   313,    -1,   314,    -1,   315,
2224:       -1,   316,    -1,   317,    -1,   318,    -1,   319,    -1,   320,
2225:       -1,   321,    -1,   323,    -1,   324,    -1,   325,    -1,   326,
2226:       -1,   328,    -1,   329,    -1,   330,    -1,   331,    -1,   332,
2227:       -1,   333,    -1,   334,    -1,   335,    -1,   336,    -1,   337,
2228:       -1,   338,    -1,   339,    -1,   341,    -1,   342,    -1,   344,
2229:       -1,   345,    -1,   346,    -1,   348,    -1,   349,    -1,   350,
2230:       -1,   351,    -1,   352,    -1,   353,    -1,   354,    -1,   355,
2231:       -1,   356,    -1,   357,    -1,   358,    -1,   360,    -1,   361,
2232:       -1,   362,    -1,   363,    -1,   364,    -1,   366,    -1,   368,
2233:       -1,   369,    -1,   370,    -1,   372,    -1,   373,    -1,   375,
2234:       -1,   377,    -1,   378,    -1,   379,    -1,   380,    -1,   381,
2235:       -1,   382,    -1,   383,    -1,   384,    -1,   385,    -1,   386,
2236:       -1,   387,    -1,   389,    -1,   392,    -1,   393,    -1,   395,
2237:       -1,   397,    -1,   398,    -1,   399,    -1,   400,    -1,   401,
2238:       -1,   407,    -1,   408,    -1,   410,    -1,   413,    -1,   414,
2239:       -1,   416,    -1,   417,    -1,   418,    -1,   419,    -1,   420,
2240:       -1,   423,    -1,   424,    -1,   425,    -1,   426,    -1,   427,
2241:       -1,   430,    -1,   431,    -1,   432,    -1,   433,    -1,   434,
2242:       -1,   438,    -1,   440,    -1,   441,    -1,   442,    -1,   443,
2243:       -1,   446,    -1,   449,    -1,   450,    -1,   451,    -1,   452,
2244:       -1,   453,    -1,   454,    -1,   466,    -1,   467,    -1,   468,
2245:       -1,   469,    -1,    48,    -1,    49,    -1,    51,    -1,    52,
2246:       -1,    64,    -1,    65,    -1,    72,    -1,   111,    -1,   112,
2247:       -1,   149,    -1,   154,    -1,   160,    -1,   177,    -1,   201,
2248:       -1,   206,    -1,   207,    -1,   209,    -1,   238,    -1,   257,
2249:       -1,   259,    -1,   263,    -1,   270,    -1,   272,    -1,   287,
2250:       -1,   291,    -1,   305,    -1,   308,    -1,   322,    -1,   347,
2251:       -1,   367,    -1,   374,    -1,   388,    -1,   390,    -1,   403,
2252:       -1,   404,    -1,   409,    -1,   411,    -1,   415,    -1,   435,
2253:       -1,   436,    -1,   455,    -1,   456,    -1,   457,    -1,   458,
2254:       -1,   459,    -1,   460,    -1,   461,    -1,   462,    -1,   463,
2255:       -1,   464,    -1,   465,    -1,    44,    -1,    50,    -1,    74,
2256:       -1,    81,    -1,    93,    -1,   100,    -1,   166,    -1,   168,
2257:       -1,   172,    -1,   186,    -1,   200,    -1,   212,    -1,   213,
2258:       -1,   215,    -1,   224,    -1,   226,    -1,   238,    -1,   258,
2259:       -1,   267,    -1,   288,    -1,   290,    -1,   343,    -1,   371,
2260:       -1,   388,    -1,   396,    -1,   439,    -1,    44,    -1,    50,
2261:       -1,    74,    -1,    81,    -1,    93,    -1,   100,    -1,   166,
2262:       -1,   168,    -1,   172,    -1,   186,    -1,   200,    -1,   212,
2263:       -1,   213,    -1,   215,    -1,   224,    -1,   226,    -1,   258,
2264:       -1,   267,    -1,   288,    -1,   290,    -1,   343,    -1,   371,
2265:       -1,   396,    -1,   415,    -1,   439,    -1,    48,    -1,    49,
2266:       -1,    51,    -1,    52,    -1,    65,    -1,    64,    -1,    72,
2267:       -1,   111,    -1,   112,    -1,   149,    -1,   154,    -1,   160,
2268:       -1,   177,    -1,   201,    -1,   207,    -1,   209,    -1,   206,
2269:       -1,   238,    -1,   257,    -1,   259,    -1,   263,    -1,   270,
2270:       -1,   272,    -1,   287,    -1,   291,    -1,   305,    -1,   308,
2271:       -1,   322,    -1,   347,    -1,   367,    -1,   374,    -1,   388,
2272:       -1,   390,    -1,   403,    -1,   404,    -1,   409,    -1,   411,
2273:       -1,   415,    -1,   435,    -1,   436,    -1,   455,    -1,   456,
2274:       -1,   457,    -1,   458,    -1,   459,    -1,   460,    -1,   461,
2275:       -1,   462,    -1,   463,    -1,   464,    -1,   465,    -1,    44,
2276:       -1,    50,    -1,    74,    -1,    81,    -1,    93,    -1,   100,
2277:       -1,   166,    -1,   168,    -1,   172,    -1,   186,    -1,   200,
2278:       -1,   212,    -1,   213,    -1,   215,    -1,   224,    -1,   226,
2279:       -1,   238,    -1,   258,    -1,   267,    -1,   288,    -1,   290,
2280:       -1,   343,    -1,   371,    -1,   388,    -1,   396,    -1,   415,
2281:       -1,   439,    -1,    27,    -1,    31,    -1,    32,    -1,    33,
2282:       -1,    34,    -1,    35,    -1,    36,    -1,    37,    -1,    40,
2283:       -1,    53,    -1,    60,    -1,    61,    -1,    67,    -1,    73,
2284:       -1,    75,    -1,    85,    -1,    92,    -1,    97,    -1,    98,
2285:       -1,    99,    -1,   101,    -1,   102,    -1,   103,    -1,   114,
2286:       -1,   116,    -1,   123,    -1,   129,    -1,   130,    -1,   136,
2287:       -1,   140,    -1,   144,    -1,   155,    -1,   157,    -1,   162,
2288:       -1,   164,    -1,   167,    -1,   174,    -1,   176,    -1,   179,
2289:       -1,   191,    -1,   198,    -1,   208,    -1,   210,    -1,   221,
2290:       -1,   222,    -1,   227,    -1,   231,    -1,   232,    -1,   264,
2291:       -1,   269,    -1,   276,    -1,   279,    -1,   280,    -1,   284,
2292:       -1,   285,    -1,   302,    -1,   312,    -1,   327,    -1,   340,
2293:       -1,   359,    -1,   365,    -1,   376,    -1,   391,    -1,   394,
2294:       -1,   402,    -1,   405,    -1,   406,    -1,   412,    -1,   421,
2295:       -1,   422,    -1,   428,    -1,   429,    -1,   437,    -1,   444,
2296:       -1,   445,    -1,   447,    -1,   448,    -1
2297: };
2298: 
2299: /* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
2300: static const yytype_uint16 yyrline[] =
2301: {
2302:        0,   459,   459,   475,   487,   496,   497,   498,   499,   500,
2303:      501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
2304:      511,   512,   513,   514,   515,   516,   517,   518,   519,   520,
2305:      521,   522,   523,   524,   525,   526,   527,   528,   530,     9,
2306:       18,    27,    36,    45,    54,    63,    72,    85,    87,    93,
2307:       94,    99,   103,   107,   118,   126,   130,   139,   148,   157,
2308:      166,   175,   184,   192,   200,   209,   218,   227,   236,   253,
2309:      262,   271,   280,   290,   303,   318,   327,   335,   350,   358,
2310:      368,   378,   385,   392,   400,   407,   418,   419,   424,   428,
2311:      433,   438,   446,   447,   452,   456,   457,     7,    13,    19,
2312:       25,     6,    15,    25,    35,    45,    55,    65,    75,    85,
2313:       95,   106,   117,   127,   140,   141,     8,    21,    27,    34,
2314:       40,    47,    57,    61,    70,    79,    88,    95,    96,   101,
2315:      113,   118,   143,   153,   163,   169,   180,   191,   206,   207,
2316:      213,   214,   219,   220,   226,   227,   231,   232,   237,   239,
2317:      245,   246,   250,   251,   256,     7,    14,    22,     9,    19,
2318:       32,    33,     7,    14,    31,    51,    52,     9,    17,    29,
2319:       30,    34,    35,    36,    41,    42,    43,    48,    52,    56,
2320:       60,    64,    68,    72,    76,    80,    84,    88,    92,    97,
2321:      101,   105,   112,   113,   117,   118,   119,     2,     9,    15,
2322:       21,    28,    35,    45,    46,    47,     7,    21,    41,    42,
2323:       69,    70,    71,    72,    73,    74,    78,    79,    84,    89,
2324:       90,    91,    92,    93,    98,   105,   106,   107,   124,   131,
2325:      138,   148,   158,   170,   179,   188,   207,   214,   219,   221,
2326:      223,   225,   228,   233,   234,   238,   239,   240,   241,   246,
2327:      250,   251,   256,   263,   268,   269,   270,   271,   272,   273,
2328:      274,   275,   281,   282,   286,   291,   298,   305,   312,   324,
2329:      325,   326,   327,   331,   336,   337,   338,   343,   348,   349,
2330:      350,   351,   352,   353,   358,   381,   385,   392,   393,   397,
2331:      401,   402,   403,   407,   411,   419,   420,   425,   426,   430,
2332:      438,   439,   444,   445,   449,   454,   458,   462,   467,   475,
2333:      476,   480,   481,   487,   498,   511,   525,   539,   553,   567,
2334:      590,   594,   601,   605,   613,   618,   625,   635,   636,   637,
2335:      638,   639,   646,   653,   654,   659,   660,     9,    19,    29,
2336:       39,    49,    59,    73,    74,    75,    76,    77,    78,    79,
2337:       80,    81,    82,    83,    84,    85,    86,    87,    92,    93,
2338:       94,    95,    96,    97,    98,   103,   104,   109,   110,   111,
2339:      116,   117,   118,     7,    18,    19,    23,    27,     7,     1,
2340:       30,    53,    54,    59,    63,    68,    72,    80,    81,    85,
2341:       86,    91,    92,    96,    97,   102,   103,   104,   105,   106,
2342:      111,   119,   123,   128,   129,   134,   138,   143,   147,   151,
2343:      155,   159,   163,   167,   171,   175,   179,   183,   187,   191,
2344:      195,   203,   209,   210,   211,   216,   220,    47,    48,    52,
2345:       53,    68,    69,    76,    84,    92,   100,   108,   116,   127,
2346:      128,   155,   170,   186,   187,   206,   210,   214,   231,   238,
2347:      245,   255,   256,   259,   271,   282,   290,   295,   300,   305,
2348:      310,   318,   326,   331,   336,   343,   344,   348,   349,   350,
2349:      357,   358,   362,   363,   367,   368,   372,   376,   377,   380,
2350:      389,   400,   401,   402,   405,   406,   407,   411,   412,   413,
2351:      414,   418,   419,   423,   425,   441,   443,   448,   451,   459,
2352:      463,   467,   471,   475,   479,   486,   491,   498,   499,   503,
2353:      507,   511,   515,   522,   529,   530,   535,   536,   540,   541,
2354:      549,   569,   570,   572,   577,   578,   582,   583,   586,   587,
2355:      612,   613,   617,   618,   622,   623,   627,   640,   641,   645,
2356:      646,   650,   651,   655,   656,   660,   671,   672,   673,   674,
2357:      678,   679,   684,   685,   686,   695,   701,   719,   720,   724,
2358:      725,   731,   737,   745,   753,   789,   815,   819,   845,   849,
2359:      862,   876,   891,   903,   919,   925,   930,   936,   943,   944,
2360:      952,   956,   960,   966,   973,   978,   979,   980,   981,   985,
2361:      986,   998,   999,  1004,  1011,  1018,  1025,  1057,  1068,  1081,
2362:     1086,  1087,  1090,  1091,  1094,  1095,  1100,  1101,  1106,  1110,
2363:     1116,  1137,  1145,  1158,  1161,  1165,  1165,  1167,  1172,  1179,
2364:     1184,  1190,  1195,  1201,  1207,  1216,  1218,  1221,  1225,  1226,
2365:     1227,  1228,  1229,  1230,  1235,  1255,  1256,  1257,  1258,  1269,
2366:     1283,  1284,  1290,  1295,  1300,  1305,  1310,  1315,  1320,  1325,
2367:     1331,  1337,  1343,  1350,  1372,  1381,  1385,  1393,  1397,  1405,
2368:     1417,  1438,  1442,  1448,  1452,  1465,  1473,  1483,  1485,  1487,
2369:     1489,  1491,  1493,  1498,  1499,  1506,  1515,  1523,  1532,  1543,
2370:     1551,  1552,  1553,  1557,  1557,  1560,  1560,  1563,  1563,  1566,
2371:     1566,  1569,  1569,  1572,  1572,  1575,  1575,  1578,  1578,  1581,
2372:     1583,  1585,  1587,  1589,  1591,  1593,  1595,  1597,  1602,  1607,
2373:     1613,  1620,  1625,  1631,  1637,  1668,  1670,  1672,  1680,  1695,
2374:     1697,  1699,  1701,  1703,  1705,  1707,  1709,  1711,  1713,  1715,
2375:     1717,  1719,  1721,  1724,  1726,  1728,  1731,  1733,  1735,  1737,
2376:     1740,  1745,  1750,  1757,  1762,  1769,  1774,  1782,  1787,  1796,
2377:     1804,  1812,  1820,  1838,  1846,  1854,  1862,  1870,  1878,  1882,
2378:     1886,  1890,  1898,  1906,  1922,  1930,  1938,  1946,  1954,  1962,
2379:     1970,  1974,  1978,  1982,  1986,  1994,  2002,  2010,  2018,  2038,
2380:     2060,  2071,  2078,  2092,  2108,  2110,  2112,  2114,  2116,  2118,
2381:     2120,  2122,  2124,  2126,  2128,  2130,  2132,  2134,  2136,  2138,
2382:     2140,  2142,  2144,  2146,  2150,  2154,  2158,  2172,  2173,  2174,
2383:     2181,  2193,  2208,  2220,  2222,  2234,  2245,  2269,  2282,  2286,
2384:     2292,  2299,  2306,  2316,  2323,  2351,  2386,  2397,  2398,  2405,
2385:     2411,  2415,  2419,  2423,  2427,  2431,  2435,  2439,  2443,  2447,
2386:     2451,  2455,  2459,  2463,  2467,  2471,  2473,  2475,  2479,  2488,
2387:     2493,  2500,  2515,  2522,  2526,  2530,  2534,  2538,  2552,  2553,
2388:     2557,  2558,  2566,  2567,  2571,  2572,  2577,  2585,  2587,  2601,
2389:     2604,  2631,  2632,  2635,  2636,  2647,  2653,  2660,  2669,  2686,
2390:     2731,  2739,  2747,  2755,  2763,  2784,  2785,  2788,  2789,  2793,
2391:     2803,  2804,  2806,  2807,  2808,  2811,  2812,  2815,  2816,  2817,
2392:     2818,  2819,  2820,  2821,  2822,  2823,  2824,  2825,  2826,  2829,
2393:     2831,  2836,  2838,  2843,  2845,  2847,  2849,  2851,  2853,  2855,
2394:     2857,  2871,  2873,  2877,  2881,  2888,  2893,  2900,  2904,  2910,
2395:     2914,  2923,  2934,  2935,  2939,  2943,  2950,  2951,  2952,  2953,
2396:     2954,  2955,  2956,  2957,  2958,  2959,  2969,  2973,  2980,  2987,
2397:     2988,  3004,  3008,  3013,  3017,  3032,  3037,  3041,  3044,  3047,
2398:     3048,  3049,  3052,  3059,  3069,  3083,  3084,  3088,  3099,  3100,
2399:     3103,  3104,  3107,  3111,  3118,  3122,  3126,  3134,  3145,  3146,
2400:     3150,  3151,  3155,  3156,  3159,  3160,  3170,  3171,  3175,  3176,
2401:     3179,  3195,  3203,  3211,  3233,  3234,  3245,  3249,  3276,  3278,
2402:     3283,  3285,  3295,  3298,  3309,  3313,  3317,  3329,  3333,  3342,
2403:     3349,  3381,  3385,  3389,  3393,  3397,  3401,  3405,  3411,  3412,
2404:     3428,  3429,  3430,  3433,  3434,  3440,  3441,  3442,  3445,  3446,
2405:     3447,  3450,  3451,  3452,  3455,  3456,  3459,  3461,  3466,  3467,
2406:     3470,  3478,  3479,  3480,  3481,  3484,  3485,     7,    18,    19,
2407:       23,    24,    25,    26,     7,    16,    34,    41,    46,    47,
2408:       48,    49,     8,    33,    62,    66,    67,    72,    73,    78,
2409:       79,    83,    84,    89,    90,     7,    16,    25,    34,    43,
2410:       52,     5,    11,     7,    20,     9,    16,    26,    33,    44,
2411:       45,    50,    51,    52,    57,    58,    59,    60,    61,    65,
2412:       66,    67,    72,    73,    78,    82,    90,    91,    96,    97,
2413:       98,   104,   109,   117,   118,    10,    16,    22,    32,    33,
2414:       41,    52,    64,    72,    80,    87,    97,    99,   105,   109,
2415:      113,   128,   135,   136,   137,   141,   142,     7,    16,     8,
2416:       22,    36,    48,    56,    70,    71,    72,    73,    74,    87,
2417:       88,    93,    94,    98,    99,     7,    21,    25,    32,    43,
2418:       44,    50,    51,     9,    19,     2,     7,    14,    24,    25,
2419:       32,     3,    10,    16,    22,    28,    37,    37,    39,    40,
2420:        6,     8,    21,    34,    52,    74,    75,    76,    77,    11,
2421:       24,    41,    42,    43,    48,    61,    61,    61,    61,    61,
2422:       61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
2423:       61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
2424:       61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
2425:       61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
2426:       61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
2427:       61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
2428:       61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
2429:       61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
2430:       61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
2431:       61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
2432:       61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
2433:       61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
2434:       61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
2435:       61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
2436:       61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
2437:       61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
2438:       61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
2439:       61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
2440:       61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
2441:       61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
2442:       61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
2443:       61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
2444:       61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
2445:       61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
2446:       61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
2447:       61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
2448:       61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
2449:       61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
2450:       61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
2451:       61,    61,    61,    61,    62,    62,    62,    62,    62,    62,
2452:       62,    62,    62,    62,    62,    62,    62,    62,    62,    62,
2453:       62,    62,    62,    62,    62,    62,    62,    62,    62,    62,
2454:       62,    62,    62,    62,    62,    62,    62,    62,    62,    62,
2455:       62,    62,    62,    62,    62,    62,    62,    62,    62,    62,
2456:       62,    62,    62,    62,    62,    63,    63,    63,    63,    63,
2457:       63,    63,    63,    63,    63,    63,    63,    63,    63,    63,
2458:       63,    63,    63,    63,    63,    63,    63,    63,    63,    63,
2459:       63,    64,    64,    64,    64,    64,    64,    64,    64,    64,
2460:       64,    64,    64,    64,    64,    64,    64,    64,    64,    64,
2461:       64,    64,    64,    64,    64,    64,    65,    65,    65,    65,
2462:       65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
2463:       65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
2464:       65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
2465:       65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
2466:       65,    65,    65,    65,    65,    65,    65,    66,    66,    66,
2467:       66,    66,    66,    66,    66,    66,    66,    66,    66,    66,
2468:       66,    66,    66,    66,    66,    66,    66,    66,    66,    66,
2469:       66,    66,    66,    66,    67,    67,    67,    67,    67,    67,
2470:       67,    67,    67,    67,    67,    67,    67,    67,    67,    67,
2471:       67,    67,    67,    67,    67,    67,    67,    67,    67,    67,
2472:       67,    67,    67,    67,    67,    67,    67,    67,    67,    67,
2473:       67,    67,    67,    67,    67,    67,    67,    67,    67,    67,
2474:       67,    67,    67,    67,    67,    67,    67,    67,    67,    67,
2475:       67,    67,    67,    67,    67,    67,    67,    67,    67,    67,
2476:       67,    67,    67,    67,    67,    67,    67,    67,    67,    67,
2477:       67
2478: };
2479: #endif
2480: 
2481: #if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
2482: /* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
2483:    First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
2484: static const char *const yytname[] =
2485: {
2486:   "$end", "error", "$undefined", "IDENT", "FCONST", "SCONST", "BCONST",
2487:   "XCONST", "Op", "ICONST", "PARAM", "TYPECAST", "DOT_DOT", "COLON_EQUALS",
2488:   "EQUALS_GREATER", "LAMBDA_ARROW", "LESS_EQUALS", "GREATER_EQUALS",
2489:   "NOT_EQUALS", "ABORT_P", "ABSOLUTE_P", "ACCESS", "ACTION", "ADD_P",
2490:   "ADMIN", "AFTER", "AGGREGATE", "ALL", "ALSO", "ALTER", "ALWAYS",
2491:   "ANALYSE", "ANALYZE", "AND", "ANY", "ARRAY", "AS", "ASC_P", "ASSERTION",
2492:   "ASSIGNMENT", "ASYMMETRIC", "AT", "ATTACH", "ATTRIBUTE", "AUTHORIZATION",
2493:   "BACKWARD", "BEFORE", "BEGIN_P", "BETWEEN", "BIGINT", "BINARY", "BIT",
2494:   "BOOLEAN_P", "BOTH", "BY", "CACHE", "CALL_P", "CALLED", "CASCADE",
2495:   "CASCADED", "CASE", "CAST", "CATALOG_P", "CHAIN", "CHAR_P", "CHARACTER",
2496:   "CHARACTERISTICS", "CHECK_P", "CHECKPOINT", "CLASS", "CLOSE", "CLUSTER",
2497:   "COALESCE", "COLLATE", "COLLATION", "COLUMN", "COLUMNS", "COMMENT",
2498:   "COMMENTS", "COMMIT", "COMMITTED", "CONCURRENTLY", "CONFIGURATION",
2499:   "CONFLICT", "CONNECTION", "CONSTRAINT", "CONSTRAINTS", "CONTENT_P",
2500:   "CONTINUE_P", "CONVERSION_P", "COPY", "COST", "CREATE_P", "CROSS", "CSV",
2501:   "CUBE", "CURRENT_P", "CURRENT_CATALOG", "CURRENT_DATE", "CURRENT_ROLE",
2502:   "CURRENT_SCHEMA", "CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_USER",
2503:   "CURSOR", "CYCLE", "DATA_P", "DATABASE", "DAY_P", "DAYS_P", "DEALLOCATE",
2504:   "DEC", "DECIMAL_P", "DECLARE", "DEFAULT", "DEFAULTS", "DEFERRABLE",
2505:   "DEFERRED", "DEFINER", "DELETE_P", "DELIMITER", "DELIMITERS", "DEPENDS",
2506:   "DESC_P", "DESCRIBE", "DETACH", "DICTIONARY", "DISABLE_P", "DISCARD",
2507:   "DISTINCT", "DO", "DOCUMENT_P", "DOMAIN_P", "DOUBLE_P", "DROP", "EACH",
2508:   "ELSE", "ENABLE_P", "ENCODING", "ENCRYPTED", "END_P", "ENUM_P", "ESCAPE",
2509:   "EVENT", "EXCEPT", "EXCLUDE", "EXCLUDING", "EXCLUSIVE", "EXECUTE",
2510:   "EXISTS", "EXPLAIN", "EXPORT_P", "EXTENSION", "EXTERNAL", "EXTRACT",
2511:   "FALSE_P", "FAMILY", "FETCH", "FILTER", "FIRST_P", "FLOAT_P",
2512:   "FOLLOWING", "FOR", "FORCE", "FOREIGN", "FORWARD", "FREEZE", "FROM",
2513:   "FULL", "FUNCTION", "FUNCTIONS", "GENERATED", "GLOB", "GLOBAL", "GRANT",
2514:   "GRANTED", "GROUP_P", "GROUPING", "HANDLER", "HAVING", "HEADER_P",
2515:   "HOLD", "HOUR_P", "HOURS_P", "IDENTITY_P", "IF_P", "ILIKE", "IMMEDIATE",
2516:   "IMMUTABLE", "IMPLICIT_P", "IMPORT_P", "IN_P", "INCLUDING", "INCREMENT",
2517:   "INDEX", "INDEXES", "INHERIT", "INHERITS", "INITIALLY", "INLINE_P",
2518:   "INNER_P", "INOUT", "INPUT_P", "INSENSITIVE", "INSERT", "INSTEAD",
2519:   "INT_P", "INTEGER", "INTERSECT", "INTERVAL", "INTO", "INVOKER", "IS",
2520:   "ISNULL", "ISOLATION", "JOIN", "KEY", "LABEL", "LANGUAGE", "LARGE_P",
2521:   "LAST_P", "LATERAL_P", "LEADING", "LEAKPROOF", "LEFT", "LEVEL", "LIKE",
2522:   "LIMIT", "LISTEN", "LOAD", "LOCAL", "LOCALTIME", "LOCALTIMESTAMP",
2523:   "LOCATION", "LOCK_P", "LOCKED", "LOGGED", "MACRO", "MAP", "MAPPING",
2524:   "MATCH", "MATERIALIZED", "MAXVALUE", "METHOD", "MICROSECOND_P",
2525:   "MICROSECONDS_P", "MILLISECOND_P", "MILLISECONDS_P", "MINUTE_P",
2526:   "MINUTES_P", "MINVALUE", "MODE", "MONTH_P", "MONTHS_P", "MOVE", "NAME_P",
2527:   "NAMES", "NATIONAL", "NATURAL", "NCHAR", "NEW", "NEXT", "NO", "NONE",
2528:   "NOT", "NOTHING", "NOTIFY", "NOTNULL", "NOWAIT", "NULL_P", "NULLIF",
2529:   "NULLS_P", "NUMERIC", "OBJECT_P", "OF", "OFF", "OFFSET", "OIDS", "OLD",
2530:   "ON", "ONLY", "OPERATOR", "OPTION", "OPTIONS", "OR", "ORDER",
2531:   "ORDINALITY", "OUT_P", "OUTER_P", "OVER", "OVERLAPS", "OVERLAY",
2532:   "OVERRIDING", "OWNED", "OWNER", "PARALLEL", "PARSER", "PARTIAL",
2533:   "PARTITION", "PASSING", "PASSWORD", "PERCENT", "PLACING", "PLANS",
2534:   "POLICY", "POSITION", "PRAGMA_P", "PRECEDING", "PRECISION", "PREPARE",
2535:   "PREPARED", "PRESERVE", "PRIMARY", "PRIOR", "PRIVILEGES", "PROCEDURAL",
2536:   "PROCEDURE", "PROGRAM", "PUBLICATION", "QUOTE", "RANGE", "READ_P",
2537:   "REAL", "REASSIGN", "RECHECK", "RECURSIVE", "REF", "REFERENCES",
2538:   "REFERENCING", "REFRESH", "REINDEX", "RELATIVE_P", "RELEASE", "RENAME",
2539:   "REPEATABLE", "REPLACE", "REPLICA", "RESET", "RESTART", "RESTRICT",
2540:   "RETURNING", "RETURNS", "REVOKE", "RIGHT", "ROLE", "ROLLBACK", "ROLLUP",
2541:   "ROW", "ROWS", "RULE", "SAMPLE", "SAVEPOINT", "SCHEMA", "SCHEMAS",
2542:   "SCROLL", "SEARCH", "SECOND_P", "SECONDS_P", "SECURITY", "SELECT",
2543:   "SEQUENCE", "SEQUENCES", "SERIALIZABLE", "SERVER", "SESSION",
2544:   "SESSION_USER", "SET", "SETOF", "SETS", "SHARE", "SHOW", "SIMILAR",
2545:   "SIMPLE", "SKIP", "SMALLINT", "SNAPSHOT", "SOME", "SQL_P", "STABLE",
2546:   "STANDALONE_P", "START", "STATEMENT", "STATISTICS", "STDIN", "STDOUT",
2547:   "STORAGE", "STRICT_P", "STRIP_P", "STRUCT", "SUBSCRIPTION", "SUBSTRING",
2548:   "SYMMETRIC", "SYSID", "SYSTEM_P", "TABLE", "TABLES", "TABLESAMPLE",
2549:   "TABLESPACE", "TEMP", "TEMPLATE", "TEMPORARY", "TEXT_P", "THEN", "TIME",
2550:   "TIMESTAMP", "TO", "TRAILING", "TRANSACTION", "TRANSFORM", "TREAT",
2551:   "TRIGGER", "TRIM", "TRUE_P", "TRUNCATE", "TRUSTED", "TRY_CAST", "TYPE_P",
2552:   "TYPES_P", "UNBOUNDED", "UNCOMMITTED", "UNENCRYPTED", "UNION", "UNIQUE",
2553:   "UNKNOWN", "UNLISTEN", "UNLOGGED", "UNTIL", "UPDATE", "USER", "USING",
2554:   "VACUUM", "VALID", "VALIDATE", "VALIDATOR", "VALUE_P", "VALUES",
2555:   "VARCHAR", "VARIADIC", "VARYING", "VERBOSE", "VERSION_P", "VIEW",
2556:   "VIEWS", "VOLATILE", "WHEN", "WHERE", "WHITESPACE_P", "WINDOW", "WITH",
2557:   "WITHIN", "WITHOUT", "WORK", "WRAPPER", "WRITE_P", "XML_P",
2558:   "XMLATTRIBUTES", "XMLCONCAT", "XMLELEMENT", "XMLEXISTS", "XMLFOREST",
2559:   "XMLNAMESPACES", "XMLPARSE", "XMLPI", "XMLROOT", "XMLSERIALIZE",
2560:   "XMLTABLE", "YEAR_P", "YEARS_P", "YES_P", "ZONE", "NOT_LA", "NULLS_LA",
2561:   "WITH_LA", "'<'", "'>'", "'='", "POSTFIXOP", "'+'", "'-'", "'*'", "'/'",
2562:   "'%'", "'^'", "UMINUS", "'['", "']'", "'('", "')'", "'.'", "';'", "','",
2563:   "'{'", "'}'", "'#'", "'?'", "':'", "$accept", "stmtblock", "stmtmulti",
2564:   "stmt", "AlterTableStmt", "alter_identity_column_option_list",
2565:   "alter_column_default", "alter_identity_column_option",
2566:   "alter_generic_option_list", "alter_table_cmd", "alter_using",
2567:   "alter_generic_option_elem", "alter_table_cmds", "alter_generic_options",
2568:   "opt_set_data", "DeallocateStmt", "RenameStmt", "opt_column",
2569:   "InsertStmt", "insert_rest", "insert_target", "opt_conf_expr",
2570:   "opt_with_clause", "insert_column_item", "set_clause", "opt_on_conflict",
2571:   "index_elem", "returning_clause", "override_kind", "set_target_list",
2572:   "opt_collate", "opt_class", "insert_column_list", "set_clause_list",
2573:   "index_params", "set_target", "PragmaStmt", "CreateSeqStmt",
2574:   "OptSeqOptList", "ExecuteStmt", "execute_param_clause", "AlterSeqStmt",
2575:   "SeqOptList", "opt_with", "NumericOnly", "SeqOptElem", "opt_by",
2576:   "SignedIconst", "TransactionStmt", "opt_transaction", "CreateStmt",
2577:   "ConstraintAttributeSpec", "def_arg", "OptParenthesizedSeqOptList",
2578:   "generic_option_arg", "key_action", "ColConstraint", "ColConstraintElem",
2579:   "generic_option_elem", "key_update", "key_actions",
2580:   "create_generic_options", "OnCommitOption", "reloptions",
2581:   "opt_no_inherit", "TableConstraint", "TableLikeOption", "reloption_list",
2582:   "ExistingIndex", "ConstraintAttr", "OptWith", "definition",
2583:   "TableLikeOptionList", "generic_option_name", "ConstraintAttributeElem",
2584:   "columnDef", "generic_option_list", "def_list", "index_name",
2585:   "TableElement", "def_elem", "opt_definition", "OptTableElementList",
2586:   "columnElem", "opt_column_list", "ColQualList", "key_delete",
2587:   "reloption_elem", "columnList", "func_type", "ConstraintElem",
2588:   "TableElementList", "key_match", "TableLikeClause", "OptTemp",
2589:   "generated_when", "DropStmt", "drop_type_any_name", "drop_type_name",
2590:   "any_name_list", "opt_drop_behavior", "drop_type_name_on_any_name",
2591:   "CreateFunctionStmt", "macro_alias", "param_list", "UpdateStmt",
2592:   "CopyStmt", "copy_from", "copy_delimiter", "copy_generic_opt_arg_list",
2593:   "opt_using", "opt_as", "opt_program", "copy_options",
2594:   "copy_generic_opt_arg", "copy_generic_opt_elem", "opt_oids",
2595:   "copy_opt_list", "opt_binary", "copy_opt_item",
2596:   "copy_generic_opt_arg_list_item", "copy_file_name",
2597:   "copy_generic_opt_list", "SelectStmt", "select_with_parens",
2598:   "select_no_parens", "select_clause", "simple_select", "with_clause",
2599:   "cte_list", "common_table_expr", "into_clause", "OptTempTableName",
2600:   "opt_table", "all_or_distinct", "distinct_clause", "opt_all_clause",
2601:   "opt_sort_clause", "sort_clause", "sortby_list", "sortby",
2602:   "opt_asc_desc", "opt_nulls_order", "select_limit", "opt_select_limit",
2603:   "limit_clause", "offset_clause", "sample_count", "sample_clause",
2604:   "opt_sample_func", "tablesample_entry", "tablesample_clause",
2605:   "opt_tablesample_clause", "opt_repeatable_clause", "select_limit_value",
2606:   "select_offset_value", "select_fetch_first_value", "I_or_F_const",
2607:   "row_or_rows", "first_or_next", "group_clause", "group_by_list",
2608:   "group_by_item", "empty_grouping_set", "having_clause",
2609:   "for_locking_clause", "opt_for_locking_clause", "for_locking_items",
2610:   "for_locking_item", "for_locking_strength", "locked_rels_list",
2611:   "opt_nowait_or_skip", "values_clause", "from_clause", "from_list",
2612:   "table_ref", "joined_table", "alias_clause", "opt_alias_clause",
2613:   "func_alias_clause", "join_type", "join_outer", "join_qual",
2614:   "relation_expr", "func_table", "rowsfrom_item", "rowsfrom_list",
2615:   "opt_col_def_list", "opt_ordinality", "where_clause",
2616:   "TableFuncElementList", "TableFuncElement", "opt_collate_clause",
2617:   "colid_type_list", "RowOrStruct", "Typename", "opt_array_bounds",
2618:   "SimpleTypename", "ConstTypename", "GenericType", "opt_type_modifiers",
2619:   "Numeric", "opt_float", "Bit", "ConstBit", "BitWithLength",
2620:   "BitWithoutLength", "Character", "ConstCharacter", "CharacterWithLength",
2621:   "CharacterWithoutLength", "character", "opt_varying", "ConstDatetime",
2622:   "ConstInterval", "opt_timezone", "year_keyword", "month_keyword",
2623:   "day_keyword", "hour_keyword", "minute_keyword", "second_keyword",
2624:   "millisecond_keyword", "microsecond_keyword", "opt_interval", "a_expr",
2625:   "b_expr", "c_expr", "func_application", "func_expr",
2626:   "func_expr_windowless", "func_expr_common_subexpr",
2627:   "within_group_clause", "filter_clause", "window_clause",
2628:   "window_definition_list", "window_definition", "over_clause",
2629:   "window_specification", "opt_existing_window_name",
2630:   "opt_partition_clause", "opt_frame_clause", "frame_extent",
2631:   "frame_bound", "qualified_row", "row", "dict_arg", "dict_arguments",
2632:   "sub_type", "all_Op", "MathOp", "qual_Op", "qual_all_Op", "subquery_Op",
2633:   "any_operator", "expr_list", "opt_expr_list", "func_arg_list",
2634:   "func_arg_expr", "type_list", "extract_list", "extract_arg",
2635:   "overlay_list", "overlay_placing", "position_list", "substr_list",
2636:   "substr_from", "substr_for", "trim_list", "in_expr", "case_expr",
2637:   "when_clause_list", "when_clause", "case_default", "case_arg",
2638:   "columnref", "indirection_el", "opt_slice_bound", "indirection",
2639:   "opt_indirection", "opt_asymmetric", "opt_target_list", "target_list",
2640:   "target_el", "qualified_name_list", "qualified_name", "name_list",
2641:   "name", "attr_name", "func_name", "AexprConst", "Iconst", "Sconst",
2642:   "ColId", "ColIdOrString", "type_function_name", "function_name_token",
2643:   "type_name_token", "any_name", "attrs", "opt_name_list", "param_name",
2644:   "ColLabel", "ColLabelOrString", "PrepareStmt", "prep_type_clause",
2645:   "PreparableStmt", "CreateSchemaStmt", "OptSchemaEltList", "schema_stmt",
2646:   "IndexStmt", "access_method", "access_method_clause", "opt_concurrently",
2647:   "opt_index_name", "opt_reloptions", "opt_unique",
2648:   "AlterObjectSchemaStmt", "CheckPointStmt", "ExportStmt", "ImportStmt",
2649:   "ExplainStmt", "opt_verbose", "explain_option_arg", "ExplainableStmt",
2650:   "NonReservedWord", "NonReservedWord_or_Sconst", "explain_option_list",
2651:   "analyze_keyword", "opt_boolean_or_string", "explain_option_elem",
2652:   "explain_option_name", "VariableSetStmt", "set_rest", "generic_set",
2653:   "var_value", "zone_value", "var_list", "LoadStmt", "file_name",
2654:   "VacuumStmt", "vacuum_option_elem", "opt_full", "vacuum_option_list",
2655:   "opt_freeze", "DeleteStmt", "relation_expr_opt_alias",
2656:   "where_or_current_clause", "using_clause", "AnalyzeStmt",
2657:   "VariableResetStmt", "generic_reset", "reset_rest", "VariableShowStmt",
2658:   "show_or_describe", "var_name", "CallStmt", "ViewStmt",
2659:   "opt_check_option", "CreateAsStmt", "opt_with_data", "create_as_target",
2660:   "unreserved_keyword", "col_name_keyword", "func_name_keyword",
2661:   "type_name_keyword", "other_keyword", "type_func_name_keyword",
2662:   "reserved_keyword", 0
2663: };
2664: #endif
2665: 
2666: # ifdef YYPRINT
2667: /* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
2668:    token YYLEX-NUM.  */
2669: static const yytype_uint16 yytoknum[] =
2670: {
2671:        0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
2672:      265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
2673:      275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
2674:      285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
2675:      295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
2676:      305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
2677:      315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
2678:      325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
2679:      335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
2680:      345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
2681:      355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
2682:      365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
2683:      375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
2684:      385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
2685:      395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
2686:      405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
2687:      415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
2688:      425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
2689:      435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
2690:      445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
2691:      455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
2692:      465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
2693:      475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
2694:      485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
2695:      495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
2696:      505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
2697:      515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
2698:      525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
2699:      535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
2700:      545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
2701:      555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
2702:      565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
2703:      575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
2704:      585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
2705:      595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
2706:      605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
2707:      615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
2708:      625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
2709:      635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
2710:      645,   646,   647,   648,   649,   650,   651,   652,   653,   654,
2711:      655,   656,   657,   658,   659,   660,   661,   662,   663,   664,
2712:      665,   666,   667,   668,   669,   670,   671,   672,   673,   674,
2713:      675,   676,   677,   678,   679,   680,   681,   682,   683,   684,
2714:      685,   686,   687,   688,   689,   690,   691,   692,   693,   694,
2715:      695,   696,   697,   698,   699,   700,   701,   702,   703,   704,
2716:      705,   706,   707,   708,   709,   710,   711,   712,   713,   714,
2717:      715,   716,   717,   718,   719,   720,   721,   722,   723,   724,
2718:      725,   726,   727,    60,    62,    61,   728,    43,    45,    42,
2719:       47,    37,    94,   729,    91,    93,    40,    41,    46,    59,
2720:       44,   123,   125,    35,    63,    58
2721: };
2722: # endif
2723: 
2724: /* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
2725: static const yytype_uint16 yyr1[] =
2726: {
2727:        0,   496,   497,   498,   498,   499,   499,   499,   499,   499,
2728:      499,   499,   499,   499,   499,   499,   499,   499,   499,   499,
2729:      499,   499,   499,   499,   499,   499,   499,   499,   499,   499,
2730:      499,   499,   499,   499,   499,   499,   499,   499,   499,   500,
2731:      500,   500,   500,   500,   500,   500,   500,   501,   501,   502,
2732:      502,   503,   503,   503,   503,   504,   504,   505,   505,   505,
2733:      505,   505,   505,   505,   505,   505,   505,   505,   505,   505,
2734:      505,   505,   505,   505,   505,   505,   505,   505,   505,   505,
2735:      505,   505,   505,   505,   505,   505,   506,   506,   507,   507,
2736:      507,   507,   508,   508,   509,   510,   510,   511,   511,   511,
2737:      511,   512,   512,   512,   512,   512,   512,   512,   512,   512,
2738:      512,   512,   512,   512,   513,   513,   514,   515,   515,   515,
2739:      515,   515,   516,   516,   517,   517,   517,   518,   518,   519,
2740:      520,   520,   521,   521,   521,   522,   522,   522,   523,   523,
2741:      524,   524,   525,   525,   526,   526,   527,   527,   528,   528,
2742:      529,   529,   530,   530,   531,   532,   532,   532,   533,   533,
2743:      534,   534,   535,   535,   535,   536,   536,   537,   537,   538,
2744:      538,   539,   539,   539,   540,   540,   540,   540,   541,   541,
2745:      541,   541,   541,   541,   541,   541,   541,   541,   541,   541,
2746:      541,   541,   542,   542,   543,   543,   543,   544,   544,   544,
2747:      544,   544,   544,   545,   545,   545,   546,   546,   547,   547,
2748:      548,   548,   548,   548,   548,   548,   549,   549,   550,   551,
2749:      551,   551,   551,   551,   552,   552,   552,   552,   553,   553,
2750:      553,   553,   553,   553,   553,   553,   554,   555,   556,   556,
2751:      556,   556,   556,   557,   557,   558,   558,   558,   558,   559,
2752:      560,   560,   561,   561,   562,   562,   562,   562,   562,   562,
2753:      562,   562,   563,   563,   564,   565,   565,   565,   565,   566,
2754:      566,   566,   566,   567,   568,   568,   568,   569,   570,   570,
2755:      570,   570,   570,   570,   571,   572,   572,   573,   573,   574,
2756:      575,   575,   575,   576,   576,   577,   577,   578,   578,   579,
2757:      580,   580,   581,   581,   582,   583,   583,   583,   583,   584,
2758:      584,   585,   585,   585,   586,   586,   586,   586,   586,   586,
2759:      587,   587,   588,   588,   588,   588,   589,   590,   590,   590,
2760:      590,   590,   590,   590,   590,   591,   591,   592,   592,   592,
2761:      592,   592,   592,   593,   593,   593,   593,   593,   593,   593,
2762:      593,   593,   593,   593,   593,   593,   593,   593,   594,   594,
2763:      594,   594,   594,   594,   594,   595,   595,   596,   596,   596,
2764:      597,   597,   597,   598,   599,   599,   600,   600,   601,   602,
2765:      602,   603,   603,   604,   604,   605,   605,   606,   606,   607,
2766:      607,   608,   608,   609,   609,   610,   610,   610,   610,   610,
2767:      611,   612,   612,   613,   613,   614,   614,   615,   615,   615,
2768:      615,   615,   615,   615,   615,   615,   615,   615,   615,   615,
2769:      615,   616,   617,   617,   617,   618,   618,   619,   619,   620,
2770:      620,   621,   621,   621,   621,   621,   621,   621,   621,   622,
2771:      622,   623,   623,   623,   623,   623,   623,   623,   624,   624,
2772:      624,   625,   625,   626,   627,   627,   628,   628,   628,   628,
2773:      628,   628,   628,   628,   628,   629,   629,   630,   630,   630,
2774:      631,   631,   632,   632,   633,   633,   634,   635,   635,   636,
2775:      636,   637,   637,   637,   638,   638,   638,   639,   639,   639,
2776:      639,   640,   640,   641,   641,   641,   641,   642,   642,   643,
2777:      643,   643,   643,   643,   643,   644,   644,   645,   645,   646,
2778:      646,   646,   646,   647,   648,   648,   649,   649,   650,   650,
2779:      651,   652,   652,   652,   653,   653,   654,   654,   655,   655,
2780:      656,   656,   657,   657,   658,   658,   659,   660,   660,   661,
2781:      661,   662,   662,   663,   663,   664,   665,   665,   665,   665,
2782:      666,   666,   667,   667,   667,   668,   668,   669,   669,   670,
2783:      670,   671,   671,   671,   671,   671,   671,   671,   672,   672,
2784:      672,   672,   672,   672,   673,   673,   673,   673,   674,   674,
2785:      675,   675,   675,   675,   675,   676,   676,   676,   676,   677,
2786:      677,   678,   678,   679,   679,   679,   679,   680,   680,   681,
2787:      682,   682,   683,   683,   684,   684,   685,   685,   686,   686,
2788:      687,   688,   688,   689,   689,   690,   690,   691,   691,   691,
2789:      691,   691,   691,   691,   691,   692,   692,   692,   693,   693,
2790:      693,   693,   693,   693,   693,   694,   694,   694,   694,   695,
2791:      696,   696,   697,   697,   697,   697,   697,   697,   697,   697,
2792:      697,   697,   697,   698,   698,   699,   699,   700,   700,   701,
2793:      702,   703,   703,   704,   704,   705,   706,   707,   707,   707,
2794:      707,   707,   707,   708,   708,   709,   709,   709,   709,   710,
2795:      711,   711,   711,   712,   712,   713,   713,   714,   714,   715,
2796:      715,   716,   716,   717,   717,   718,   718,   719,   719,   720,
2797:      720,   720,   720,   720,   720,   720,   720,   720,   720,   720,
2798:      720,   720,   720,   720,   720,   721,   721,   721,   721,   721,
2799:      721,   721,   721,   721,   721,   721,   721,   721,   721,   721,
2800:      721,   721,   721,   721,   721,   721,   721,   721,   721,   721,
2801:      721,   721,   721,   721,   721,   721,   721,   721,   721,   721,
2802:      721,   721,   721,   721,   721,   721,   721,   721,   721,   721,
2803:      721,   721,   721,   721,   721,   721,   721,   721,   721,   721,
2804:      721,   721,   721,   721,   721,   721,   721,   721,   721,   721,
2805:      721,   721,   721,   721,   722,   722,   722,   722,   722,   722,
2806:      722,   722,   722,   722,   722,   722,   722,   722,   722,   722,
2807:      722,   722,   722,   722,   722,   722,   722,   723,   723,   723,
2808:      723,   723,   723,   723,   723,   723,   723,   723,   724,   724,
2809:      724,   724,   724,   724,   724,   725,   725,   726,   726,   727,
2810:      727,   727,   727,   727,   727,   727,   727,   727,   727,   727,
2811:      727,   727,   727,   727,   727,   727,   727,   727,   727,   727,
2812:      727,   727,   727,   727,   727,   727,   727,   727,   728,   728,
2813:      729,   729,   730,   730,   731,   731,   732,   733,   733,   733,
2814:      734,   735,   735,   736,   736,   737,   737,   737,   738,   738,
2815:      739,   739,   739,   739,   739,   740,   740,   741,   741,   742,
2816:      743,   743,   744,   744,   744,   745,   745,   746,   746,   746,
2817:      746,   746,   746,   746,   746,   746,   746,   746,   746,   747,
2818:      747,   748,   748,   749,   749,   749,   749,   749,   749,   749,
2819:      749,   750,   750,   751,   751,   752,   752,   753,   753,   754,
2820:      754,   754,   755,   755,   756,   756,   757,   757,   757,   757,
2821:      757,   757,   757,   757,   757,   757,   758,   758,   759,   760,
2822:      760,   761,   761,   761,   761,   761,   761,   762,   763,   764,
2823:      764,   764,   765,   765,   766,   767,   767,   768,   769,   769,
2824:      770,   770,   771,   771,   772,   772,   772,   772,   773,   773,
2825:      774,   774,   775,   775,   776,   776,   777,   777,   778,   778,
2826:      779,   779,   779,   779,   780,   780,   781,   781,   782,   782,
2827:      783,   784,   785,   785,   786,   786,   786,   786,   786,   786,
2828:      786,   786,   786,   786,   786,   786,   786,   786,   787,   788,
2829:      789,   789,   789,   790,   790,   791,   791,   791,   792,   792,
2830:      792,   793,   793,   793,   794,   794,   795,   795,   796,   796,
2831:      797,   798,   798,   798,   798,   799,   799,   800,   801,   801,
2832:      802,   802,   802,   802,   803,   803,   804,   804,   805,   805,
2833:      805,   805,   806,   806,   807,   808,   808,   809,   809,   810,
2834:      810,   811,   811,   812,   812,   813,   813,   813,   813,   813,
2835:      813,   814,   814,   815,   816,   817,   817,   817,   817,   818,
2836:      818,   819,   819,   819,   820,   820,   820,   820,   820,   821,
2837:      821,   821,   822,   822,   823,   823,   824,   824,   825,   825,
2838:      825,   825,   826,   827,   827,   828,   828,   828,   829,   829,
2839:      829,   829,   830,   830,   830,   830,   831,   831,   832,   832,
2840:      832,   832,   832,   832,   832,   833,   833,   834,   835,   836,
2841:      836,   836,   836,   836,   837,   837,   837,   837,   837,   838,
2842:      838,   839,   839,   840,   840,   841,   842,   842,   842,   843,
2843:      843,   844,   844,   845,   845,   846,   847,   847,   848,   848,
2844:      848,   849,   849,   849,   849,   849,   850,   850,   851,   851,
2845:      852,   853,   853,   853,   853,   854,   854,   854,   854,   855,
2846:      855,   856,   856,   856,   857,   858,   858,   858,   858,   858,
2847:      858,   858,   858,   858,   858,   858,   858,   858,   858,   858,
2848:      858,   858,   858,   858,   858,   858,   858,   858,   858,   858,
2849:      858,   858,   858,   858,   858,   858,   858,   858,   858,   858,
2850:      858,   858,   858,   858,   858,   858,   858,   858,   858,   858,
2851:      858,   858,   858,   858,   858,   858,   858,   858,   858,   858,
2852:      858,   858,   858,   858,   858,   858,   858,   858,   858,   858,
2853:      858,   858,   858,   858,   858,   858,   858,   858,   858,   858,
2854:      858,   858,   858,   858,   858,   858,   858,   858,   858,   858,
2855:      858,   858,   858,   858,   858,   858,   858,   858,   858,   858,
2856:      858,   858,   858,   858,   858,   858,   858,   858,   858,   858,
2857:      858,   858,   858,   858,   858,   858,   858,   858,   858,   858,
2858:      858,   858,   858,   858,   858,   858,   858,   858,   858,   858,
2859:      858,   858,   858,   858,   858,   858,   858,   858,   858,   858,
2860:      858,   858,   858,   858,   858,   858,   858,   858,   858,   858,
2861:      858,   858,   858,   858,   858,   858,   858,   858,   858,   858,
2862:      858,   858,   858,   858,   858,   858,   858,   858,   858,   858,
2863:      858,   858,   858,   858,   858,   858,   858,   858,   858,   858,
2864:      858,   858,   858,   858,   858,   858,   858,   858,   858,   858,
2865:      858,   858,   858,   858,   858,   858,   858,   858,   858,   858,
2866:      858,   858,   858,   858,   858,   858,   858,   858,   858,   858,
2867:      858,   858,   858,   858,   858,   858,   858,   858,   858,   858,
2868:      858,   858,   858,   858,   858,   858,   858,   858,   858,   858,
2869:      858,   858,   858,   858,   858,   858,   858,   858,   858,   858,
2870:      858,   858,   858,   858,   858,   858,   858,   858,   858,   858,
2871:      858,   858,   858,   858,   858,   858,   858,   858,   858,   858,
2872:      858,   858,   858,   858,   858,   858,   858,   858,   858,   858,
2873:      858,   858,   858,   858,   858,   858,   858,   858,   858,   858,
2874:      858,   858,   858,   858,   858,   858,   858,   858,   858,   858,
2875:      858,   858,   858,   858,   858,   858,   858,   858,   858,   858,
2876:      858,   858,   858,   858,   859,   859,   859,   859,   859,   859,
2877:      859,   859,   859,   859,   859,   859,   859,   859,   859,   859,
2878:      859,   859,   859,   859,   859,   859,   859,   859,   859,   859,
2879:      859,   859,   859,   859,   859,   859,   859,   859,   859,   859,
2880:      859,   859,   859,   859,   859,   859,   859,   859,   859,   859,
2881:      859,   859,   859,   859,   859,   860,   860,   860,   860,   860,
2882:      860,   860,   860,   860,   860,   860,   860,   860,   860,   860,
2883:      860,   860,   860,   860,   860,   860,   860,   860,   860,   860,
2884:      860,   861,   861,   861,   861,   861,   861,   861,   861,   861,
2885:      861,   861,   861,   861,   861,   861,   861,   861,   861,   861,
2886:      861,   861,   861,   861,   861,   861,   862,   862,   862,   862,
2887:      862,   862,   862,   862,   862,   862,   862,   862,   862,   862,
2888:      862,   862,   862,   862,   862,   862,   862,   862,   862,   862,
2889:      862,   862,   862,   862,   862,   862,   862,   862,   862,   862,
2890:      862,   862,   862,   862,   862,   862,   862,   862,   862,   862,
2891:      862,   862,   862,   862,   862,   862,   862,   863,   863,   863,
2892:      863,   863,   863,   863,   863,   863,   863,   863,   863,   863,
2893:      863,   863,   863,   863,   863,   863,   863,   863,   863,   863,
2894:      863,   863,   863,   863,   864,   864,   864,   864,   864,   864,
2895:      864,   864,   864,   864,   864,   864,   864,   864,   864,   864,
2896:      864,   864,   864,   864,   864,   864,   864,   864,   864,   864,
2897:      864,   864,   864,   864,   864,   864,   864,   864,   864,   864,
2898:      864,   864,   864,   864,   864,   864,   864,   864,   864,   864,
2899:      864,   864,   864,   864,   864,   864,   864,   864,   864,   864,
2900:      864,   864,   864,   864,   864,   864,   864,   864,   864,   864,
2901:      864,   864,   864,   864,   864,   864,   864,   864,   864,   864,
2902:      864
2903: };
2904: 
2905: /* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
2906: static const yytype_uint8 yyr2[] =
2907: {
2908:        0,     2,     1,     3,     1,     1,     1,     1,     1,     1,
2909:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
2910:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
2911:        1,     1,     1,     1,     1,     1,     1,     1,     0,     4,
2912:        6,     4,     6,     4,     6,     4,     6,     1,     2,     3,
2913:        2,     1,     3,     2,     3,     1,     3,     2,     5,     3,
2914:        6,     4,     6,     6,     6,     5,     5,     6,     9,     4,
2915:        5,     7,     6,     4,     8,     4,     2,     4,     3,     6,
2916:        4,     2,     2,     2,     2,     1,     2,     0,     1,     2,
2917:        2,     2,     1,     3,     4,     2,     0,     2,     3,     2,
2918:        3,     6,     6,     8,     6,     8,     6,     8,     6,     8,
2919:        8,    10,     8,    10,     1,     0,     7,     1,     4,     4,
2920:        7,     2,     1,     3,     4,     3,     0,     1,     0,     2,
2921:        3,     5,     8,     5,     0,     5,     5,     7,     2,     0,
2922:        1,     1,     1,     3,     2,     0,     1,     0,     1,     3,
2923:        1,     3,     1,     3,     2,     2,     4,     5,     5,     8,
2924:        1,     0,     3,     9,    12,     3,     0,     4,     6,     1,
2925:        2,     1,     1,     0,     1,     2,     2,     1,     2,     2,
2926:        1,     2,     3,     2,     2,     2,     2,     3,     3,     3,
2927:        1,     3,     1,     0,     1,     2,     2,     2,     2,     2,
2928:        2,     2,     2,     1,     1,     0,     9,    12,     0,     2,
2929:        1,     1,     1,     1,     1,     1,     3,     0,     1,     2,
2930:        1,     1,     2,     2,     3,     1,     1,     2,     2,     1,
2931:        2,     3,     5,     2,     5,     5,     2,     3,     1,     1,
2932:        2,     2,     0,     4,     0,     3,     4,     4,     0,     3,
2933:        2,     0,     3,     1,     1,     1,     1,     1,     1,     1,
2934:        1,     1,     1,     3,     3,     1,     2,     2,     2,     2,
2935:        2,     2,     0,     3,     3,     3,     0,     1,     2,     1,
2936:        2,     2,     2,     2,     4,     1,     3,     1,     3,     1,
2937:        1,     1,     1,     3,     1,     2,     0,     1,     0,     1,
2938:        3,     0,     2,     0,     3,     3,     1,     5,     3,     1,
2939:        3,     1,     4,     5,     5,     6,     3,     7,     4,    11,
2940:        1,     3,     2,     2,     2,     0,     3,     1,     1,     2,
2941:        2,     2,     2,     1,     0,     1,     2,     6,     4,     6,
2942:        4,     6,     8,     1,     1,     1,     1,     1,     2,     1,
2943:        2,     1,     1,     1,     3,     3,     3,     3,     2,     2,
2944:        1,     3,     1,     1,     1,     1,     3,     1,     1,     0,
2945:        1,     1,     1,     6,     1,     1,     2,     3,     8,    11,
2946:        9,     1,     1,     3,     0,     1,     3,     1,     0,     1,
2947:        0,     1,     0,     1,     3,     1,     1,     1,     3,     0,
2948:        2,     2,     0,     2,     0,     1,     0,     1,     1,     1,
2949:        3,     3,     1,     1,     3,     3,     3,     3,     4,     3,
2950:        2,     1,     1,     1,     1,     1,     3,     1,     1,     3,
2951:        3,     1,     2,     4,     4,     2,     3,     5,     5,     1,
2952:        1,    10,    10,     1,     2,     4,     4,     4,     2,     2,
2953:        3,     1,     3,     6,     2,     0,     3,     3,     4,     4,
2954:        4,     4,     3,     2,     1,     1,     0,     1,     1,     0,
2955:        1,     5,     1,     0,     1,     0,     3,     1,     3,     4,
2956:        3,     1,     1,     0,     2,     2,     0,     2,     2,     1,
2957:        1,     1,     0,     2,     4,     5,     4,     2,     3,     2,
2958:        2,     2,     2,     1,     2,     3,     0,     1,     0,     5,
2959:        1,     4,     6,     2,     1,     0,     4,     0,     1,     1,
2960:        1,     1,     2,     2,     1,     1,     1,     1,     1,     1,
2961:        3,     0,     1,     3,     1,     1,     2,     2,     0,     1,
2962:        3,     1,     0,     1,     2,     3,     2,     4,     2,     3,
2963:        2,     0,     1,     2,     0,     4,     5,     2,     0,     1,
2964:        3,     3,     3,     3,     3,     3,     1,     4,     3,     4,
2965:        5,     4,     5,     4,     5,     2,     4,     1,     1,     0,
2966:        1,     4,     5,     4,     0,     2,     2,     2,     1,     1,
2967:        0,     4,     2,     1,     2,     2,     4,     2,     6,     2,
2968:        1,     3,     4,     0,     2,     0,     2,     0,     1,     3,
2969:        3,     2,     0,     2,     4,     1,     1,     2,     3,     5,
2970:        6,     2,     3,     5,     5,     3,     4,     0,     1,     1,
2971:        1,     1,     1,     2,     4,     1,     1,     1,     1,     2,
2972:        3,     0,     1,     1,     1,     1,     1,     2,     2,     2,
2973:        2,     2,     1,     3,     0,     1,     1,     1,     1,     5,
2974:        2,     1,     1,     1,     1,     4,     1,     2,     2,     1,
2975:        3,     3,     2,     1,     0,     5,     2,     5,     2,     1,
2976:        3,     3,     0,     1,     1,     1,     1,     1,     1,     1,
2977:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
2978:        1,     1,     1,     1,     1,     1,     1,     3,     3,     3,
2979:        3,     3,     3,     3,     0,     1,     3,     3,     5,     2,
2980:        2,     3,     3,     3,     3,     3,     3,     3,     3,     3,
2981:        3,     3,     3,     3,     2,     2,     3,     3,     2,     2,
2982:        3,     3,     5,     4,     6,     3,     5,     4,     6,     4,
2983:        6,     5,     7,     3,     2,     4,     3,     2,     1,     3,
2984:        3,     3,     3,     3,     3,     4,     3,     4,     3,     4,
2985:        5,     6,     6,     7,     6,     7,     6,     7,     3,     4,
2986:        4,     6,     1,     4,     1,     3,     2,     2,     3,     3,
2987:        3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
2988:        3,     2,     2,     5,     6,     6,     7,     1,     1,     2,
2989:        2,     2,     4,     1,     2,     1,     2,     2,     3,     5,
2990:        6,     8,     6,     6,     4,     4,     1,     1,     1,     5,
2991:        1,     1,     4,     1,     4,     1,     4,     1,     4,     1,
2992:        1,     1,     1,     1,     1,     6,     6,     4,     4,     4,
2993:        4,     6,     5,     5,     5,     4,     6,     4,     5,     0,
2994:        5,     0,     2,     0,     1,     3,     3,     2,     2,     0,
2995:        6,     1,     0,     3,     0,     2,     2,     0,     1,     4,
2996:        2,     2,     2,     2,     2,     4,     3,     1,     5,     3,
2997:        1,     3,     1,     1,     1,     1,     1,     1,     1,     1,
2998:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
2999:        4,     1,     4,     1,     4,     1,     2,     1,     2,     1,
3000:        2,     1,     3,     1,     3,     1,     0,     1,     3,     1,
3001:        3,     3,     1,     3,     3,     0,     1,     1,     1,     1,
3002:        1,     1,     1,     1,     1,     1,     4,     3,     2,     3,
3003:        0,     3,     3,     2,     2,     1,     0,     2,     2,     3,
3004:        2,     1,     1,     3,     5,     1,     2,     4,     2,     0,
3005:        1,     0,     1,     2,     2,     2,     3,     5,     1,     0,
3006:        1,     2,     0,     2,     1,     0,     1,     0,     1,     3,
3007:        3,     2,     1,     1,     1,     3,     1,     2,     1,     3,
3008:        1,     1,     1,     2,     1,     1,     2,     1,     1,     2,
3009:        6,     2,     5,     3,     3,     1,     1,     1,     1,     1,
3010:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3011:        1,     1,     1,     1,     1,     2,     2,     3,     3,     0,
3012:        1,     1,     1,     1,     1,     1,     1,     5,     3,     0,
3013:        1,     1,     1,     1,     4,     7,     2,     0,     1,     1,
3014:        1,     1,    13,    16,     1,     2,     0,     1,     0,     1,
3015:        0,     2,     0,     1,     0,     6,     8,     6,     8,     6,
3016:        8,     2,     1,     4,     3,     2,     4,     3,     5,     1,
3017:        0,     1,     1,     0,     1,     1,     1,     1,     1,     1,
3018:        1,     1,     1,     1,     1,     3,     1,     1,     1,     1,
3019:        1,     1,     2,     1,     1,     2,     3,     3,     1,     3,
3020:        3,     2,     3,     3,     3,     3,     1,     1,     1,     1,
3021:        3,     5,     1,     1,     1,     1,     3,     2,     1,     4,
3022:        5,     5,     4,     6,     1,     1,     1,     1,     1,     1,
3023:        0,     1,     3,     1,     0,     7,     1,     2,     3,     2,
3024:        0,     2,     0,     2,     4,     2,     1,     1,     1,     2,
3025:        3,     2,     2,     3,     4,     2,     1,     1,     1,     3,
3026:        2,     9,    11,    12,    14,     3,     4,     4,     0,     7,
3027:       10,     2,     3,     0,     4,     1,     1,     1,     1,     1,
3028:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3029:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3030:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3031:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3032:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3033:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3034:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3035:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3036:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3037:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3038:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3039:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3040:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3041:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3042:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3043:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3044:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3045:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3046:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3047:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3048:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3049:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3050:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3051:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3052:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3053:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3054:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3055:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3056:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3057:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3058:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3059:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3060:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3061:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3062:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3063:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3064:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3065:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3066:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3067:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3068:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3069:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3070:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3071:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3072:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3073:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3074:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3075:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3076:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3077:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3078:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3079:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3080:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3081:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3082:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3083:        1
3084: };
3085: 
3086: /* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
3087:    STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
3088:    means the default is an error.  */
3089: static const yytype_uint16 yydefact[] =
3090: {
3091:      128,   205,     0,  1107,  1106,   205,     0,  1082,   205,   406,
3092:      334,     0,  1177,     0,   205,     0,   128,     0,     0,     0,
3093:        0,     0,     0,     0,   205,   473,     0,  1176,   205,     0,
3094:     1150,     0,     0,     0,     0,     0,     2,     4,     7,    17,
3095:       29,    25,     0,    27,    15,    20,     6,    31,    16,    19,
3096:       13,    32,    11,    30,   440,   427,   475,   439,   127,   443,
3097:       28,    14,    24,     5,    10,    22,    23,    21,  1090,    35,
3098:       26,    33,    18,     8,    34,    36,     0,     9,    37,    12,
3099:      204,   203,   197,     0,     0,     0,     0,     0,   198,  1020,
3100:     1195,  1196,  1197,  1198,  1199,  1200,  1201,  1202,  1203,  1204,
3101:     1205,  1206,  1207,  1208,  1209,  1210,  1545,  1211,  1212,  1213,
3102:     1494,  1495,  1546,  1496,  1497,  1214,  1215,  1216,  1217,  1218,
3103:     1219,  1220,  1221,  1498,  1499,  1222,  1223,  1224,  1225,  1226,
3104:     1500,  1547,  1227,  1228,  1229,  1230,  1231,  1548,  1232,  1233,
3105:     1234,  1235,  1236,  1237,  1238,  1239,  1240,  1549,  1241,  1242,
3106:     1243,  1550,  1244,  1245,  1246,  1247,  1248,  1249,  1250,  1501,
3107:     1502,  1251,  1252,  1253,  1254,  1255,  1256,  1257,  1258,  1259,
3108:     1260,  1261,  1262,  1263,  1264,  1265,  1266,  1267,  1268,  1269,
3109:     1270,  1271,  1272,  1273,  1274,  1275,  1276,  1277,  1278,  1503,
3110:     1279,  1280,  1281,  1282,  1504,  1283,  1284,  1285,  1505,  1286,
3111:     1287,  1288,  1551,  1552,  1289,  1290,  1291,  1553,  1292,  1293,
3112:     1506,  1294,  1295,  1296,  1297,  1298,  1299,  1300,  1554,  1301,
3113:     1302,  1303,  1304,  1305,  1306,  1307,  1308,  1309,  1310,  1311,
3114:     1555,  1507,  1312,  1313,  1314,  1315,  1508,  1509,  1510,  1316,
3115:     1556,  1557,  1317,  1558,  1318,  1319,  1320,  1321,  1322,  1323,
3116:     1559,  1324,  1560,  1325,  1326,  1327,  1328,  1329,  1330,  1331,
3117:     1332,  1511,  1333,  1334,  1335,  1336,  1337,  1338,  1339,  1340,
3118:     1341,  1342,  1343,  1344,  1345,  1346,  1347,  1348,  1349,  1350,
3119:     1512,  1562,  1513,  1351,  1352,  1353,  1514,  1354,  1355,  1563,
3120:     1356,  1515,  1357,  1516,  1358,  1359,  1360,  1361,  1362,  1363,
3121:     1364,  1365,  1366,  1517,  1564,  1367,  1565,  1518,  1368,  1369,
3122:     1370,  1371,  1372,  1373,  1374,  1375,  1376,  1377,  1378,  1379,
3123:     1519,  1380,  1381,  1520,  1382,  1383,  1384,  1385,  1386,  1387,
3124:     1388,  1389,  1390,  1391,  1392,  1393,  1521,  1394,  1395,  1396,
3125:     1397,  1398,  1399,  1400,  1401,  1402,  1403,  1404,  1405,  1406,
3126:     1407,  1408,  1409,  1410,  1411,  1566,  1412,  1413,  1414,  1522,
3127:     1415,  1416,  1417,  1418,  1419,  1420,  1421,  1422,  1423,  1424,
3128:     1425,  1426,  1427,  1428,  1429,  1430,  1431,  1523,  1432,  1433,
3129:     1434,  1567,  1435,  1436,  1524,  1437,  1438,  1439,  1440,  1441,
3130:     1442,  1443,  1444,  1445,  1446,  1447,  1448,  1525,  1449,  1526,
3131:     1450,  1451,  1452,  1569,  1453,  1454,  1455,  1456,  1457,  1527,
3132:     1528,  1458,  1459,  1529,  1460,  1530,  1461,  1462,  1531,  1463,
3133:     1464,  1465,  1466,  1467,  1468,  1469,  1470,  1471,  1472,  1473,
3134:     1474,  1475,  1476,  1477,  1532,  1533,  1478,  1570,  1479,  1480,
3135:     1481,  1482,  1483,  1484,  1485,  1486,  1487,  1488,  1489,  1534,
3136:     1535,  1536,  1537,  1538,  1539,  1540,  1541,  1542,  1543,  1544,
3137:     1490,  1491,  1492,  1493,  1180,     0,     0,  1002,  1021,  1022,
3138:     1030,   200,   405,   128,     0,   374,     0,     0,   375,     0,
3139:        0,   328,   327,  1073,   333,     0,     0,     0,  1020,    99,
3140:     1511,  1382,  1525,    97,  1000,  1021,     0,   351,   352,     0,
3141:      360,     0,   345,   349,   346,     0,   370,   362,   371,   363,
3142:      344,   364,   353,   343,     0,   372,   347,     0,     0,     0,
3143:      201,   166,   334,   128,     0,  1095,  1096,  1094,  1085,  1090,
3144:     1097,  1098,     0,  1081,     0,  1019,  1138,  1137,   155,  1049,
3145:     1167,  1527,  1458,  1178,  1168,  1165,  1166,   202,   472,   470,
3146:        0,   987,  1327,  1419,  1430,  1527,  1115,  1118,     0,   199,
3147:     1024,     0,   444,   593,  1023,   996,  1149,     0,  1154,     0,
3148:     1396,   448,   451,  1039,   449,   440,     0,     0,     1,   128,
3149:        0,     0,     0,   469,   469,     0,   469,     0,   432,   440,
3150:      435,   439,     0,  1089,  1163,  1175,  1527,  1458,  1532,  1171,
3151:     1172,  1300,     0,     0,  1300,     0,  1300,     0,  1300,     0,
3152:        0,   979,     0,   980,  1003,  1051,  1052,  1050,     0,  1053,
3153:      301,   332,   331,   330,   329,   334,  1300,  1057,     0,     0,
3154:        0,     0,     0,  1068,   100,    98,   358,   359,     0,   350,
3155:      348,     0,  1300,   369,  1034,   365,  1300,   369,   998,  1300,
3156:        0,     0,   162,     0,  1087,  1099,  1596,  1597,  1598,  1599,
3157:     1601,  1600,  1602,  1603,  1604,  1605,  1606,  1607,  1608,  1609,
3158:     1612,  1610,  1611,  1613,  1614,  1615,  1616,  1617,  1618,  1619,
3159:     1620,  1621,  1622,  1623,  1624,  1625,  1626,  1627,  1628,  1629,
3160:     1630,  1631,  1632,  1633,  1634,  1635,  1636,  1637,  1638,  1639,
3161:     1640,  1641,  1642,  1643,  1644,  1645,  1646,  1113,     0,  1114,
3162:     1104,  1093,  1100,  1101,   128,   404,  1084,     0,     0,     0,
3163:        0,  1169,     0,     0,     0,  1005,  1007,  1008,   909,  1018,
3164:      982,     0,  1495,  1496,  1497,   971,     0,  1498,  1499,  1500,
3165:     1547,   843,   830,   839,   844,   831,   833,   840,  1501,  1502,
3166:      782,  1266,  1503,  1504,  1016,  1505,  1508,  1509,  1510,   835,
3167:      837,  1512,  1513,     0,  1017,  1515,  1516,  1363,  1518,  1519,
3168:     1521,  1522,   841,  1524,  1526,  1527,  1528,  1529,  1530,  1015,
3169:     1531,   842,  1533,     0,     0,     0,   993,   926,     0,     0,
3170:        0,   982,   815,     0,   635,   636,   657,   658,   637,   663,
3171:      664,   666,   638,     0,   992,   715,   859,   982,   826,   887,
3172:      758,     0,   813,   807,   455,   988,     0,   808,  1004,   982,
3173:      972,   455,   986,  1116,  1121,  1117,     0,     0,     0,     0,
3174:        0,   595,   594,   997,  1148,  1146,  1147,  1145,  1144,  1151,
3175:        0,  1153,  1090,   923,     0,   450,     0,     0,     0,   430,
3176:      429,     3,     0,     0,  1156,     0,   467,   468,     0,     0,
3177:        0,     0,     0,     0,     0,     0,   542,   489,   490,   492,
3178:      539,   543,   551,     0,   436,     0,  1039,  1173,     0,     0,
3179:        0,   115,   115,     0,     0,     0,     0,     0,    92,    41,
3180:       85,     0,     0,     0,     0,   180,   193,     0,     0,     0,
3181:        0,     0,   190,     0,     0,   173,    43,   167,   169,     0,
3182:      115,     0,    39,     0,     0,     0,    45,  1020,     0,  1545,
3183:     1546,  1547,  1548,  1549,   844,     0,  1551,  1552,  1553,  1554,
3184:     1555,  1556,  1557,  1558,  1559,  1560,  1511,  1562,  1563,  1564,
3185:     1565,  1566,  1567,  1525,  1569,  1531,     0,  1570,     0,   818,
3186:      929,   475,   927,  1040,     0,  1021,  1027,   978,     0,  1041,
3187:     1674,  1675,  1676,  1677,  1678,  1679,  1680,  1681,  1682,  1683,
3188:     1684,  1685,  1686,  1687,  1688,  1689,  1690,  1691,  1692,  1693,
3189:     1694,  1695,  1696,  1697,  1698,  1699,  1700,  1701,  1702,  1703,
3190:     1704,  1705,  1706,  1707,  1708,  1709,  1710,  1711,  1712,  1713,
3191:     1714,  1715,  1716,  1717,  1718,  1719,  1720,  1721,  1722,  1723,
3192:     1724,  1725,  1726,  1727,  1728,  1729,  1730,  1731,  1732,  1733,
3193:     1734,  1735,  1736,  1737,  1738,  1739,  1740,  1741,  1742,  1743,
3194:     1744,  1745,  1634,  1746,  1747,  1748,  1749,  1750,   975,   974,
3195:     1001,  1043,  1042,  1044,   981,     0,     0,   402,     0,     0,
3196:     1054,     0,  1300,   161,  1300,   301,     0,   301,     0,     0,
3197:     1067,  1070,   361,   357,   355,   354,   356,     0,   367,   368,
3198:        0,   338,     0,  1035,     0,     0,   340,     0,     0,     0,
3199:        0,   128,     0,   174,  1109,  1110,  1108,     0,     0,  1092,
3200:      177,   194,  1103,  1112,  1102,  1111,  1091,  1086,     0,  1083,
3201:      393,  1127,  1126,  1135,   156,     0,  1031,  1571,   645,  1572,
3202:      674,   652,   674,   674,  1573,  1574,  1575,  1576,   641,   641,
3203:      654,  1577,  1578,  1579,  1580,  1581,   642,   643,   679,  1582,
3204:     1583,  1584,  1585,  1586,     0,     0,  1587,   674,  1588,   641,
3205:     1589,  1590,   646,  1591,   615,     0,  1592,   644,   616,  1593,
3206:      682,   682,  1594,   669,  1595,     0,   932,   627,   628,   629,
3207:      630,   655,   656,   631,   661,   662,   632,   714,     0,   641,
3208:     1032,  1033,   128,  1170,  1179,     0,   811,   926,   673,   660,
3209:      970,     0,     0,   668,   667,     0,     0,     0,     0,     0,
3210:      650,   649,   648,   817,   935,     0,   647,     0,     0,   674,
3211:      674,   672,   738,     0,   651,     0,     0,   950,     0,   956,
3212:        0,     0,     0,   678,     0,   676,     0,     0,     0,   739,
3213:      719,   720,   925,     0,   815,   923,     0,   890,     0,  1023,
3214:        0,   809,   810,   816,  1011,     0,     0,   714,   714,   991,
3215:      909,     0,   906,   907,   908,     0,     0,     0,   985,     0,
3216:      917,   919,     0,     0,   754,   915,     0,   757,     0,     0,
3217:        0,     0,   903,   904,   905,   897,   898,   899,   900,   901,
3218:      902,   913,   896,   735,     0,     0,   861,   814,     0,     0,
3219:      734,     0,     0,     0,   558,     0,  1009,  1006,   973,   558,
3220:     1129,  1133,  1134,  1132,     0,  1128,  1120,  1119,  1124,  1122,
3221:     1125,  1123,     0,  1142,     0,  1139,   555,     0,   452,     0,
3222:        0,  1162,     0,   122,     0,  1157,     0,   447,   446,   476,
3223:      477,   483,   445,   528,   529,     0,     0,     0,     0,   548,
3224:      546,   519,   493,   518,     0,     0,   497,     0,   520,   715,
3225:      541,   434,   487,   488,   491,   433,     0,   544,     0,   554,
3226:      542,   492,     0,  1164,  1174,     0,     0,     0,     0,     0,
3227:     1300,     0,     0,    76,    57,   253,     0,   114,     0,     0,
3228:        0,     0,     0,     0,     0,    84,    81,    82,    83,     0,
3229:        0,     0,     0,   178,   179,   192,     0,   183,   184,   181,
3230:      185,   186,     0,     0,   171,   172,     0,     0,     0,     0,
3231:      170,     0,     0,     0,     0,     0,     0,     0,     0,   475,
3232:      475,   475,   824,     0,     0,   474,     0,     0,   976,   979,
3233:      392,   309,     0,   299,     0,     0,     0,     0,     0,   334,
3234:     1060,  1058,  1056,  1059,  1061,     0,     0,   158,   160,     0,
3235:      298,   272,     0,  1072,   376,     0,     0,  1300,  1069,   289,
3236:        0,   369,   366,  1036,     0,   369,   999,     0,   369,   165,
3237:     1300,   301,     0,  1088,  1105,   175,   195,   176,   196,   425,
3238:        0,   399,   407,   412,   390,     0,   390,     0,   409,   413,
3239:      390,   408,   390,   403,     0,   157,     0,     0,   627,     0,
3240:      621,   617,   687,   688,   689,   690,   697,   698,   695,   696,
3241:      691,   692,   685,   686,   693,   694,   683,   684,     0,   699,
3242:      700,   701,   702,   703,   704,   705,   706,   633,  1048,     0,
3243:      639,  1047,     0,   983,     0,     0,     0,   969,   965,     0,
3244:        0,     0,     0,     0,     0,   936,   937,   938,   939,   940,
3245:      941,   942,   943,   944,     0,     0,   945,     0,     0,     0,
3246:      671,   670,     0,   895,   906,   907,   908,   903,   904,   905,
3247:      897,   898,   899,   900,   901,   902,   921,     0,     0,     0,
3248:        0,     0,     0,     0,     0,   784,     0,     0,   807,   886,
3249:        0,   923,   955,     0,     0,     0,     0,     0,     0,     0,
3250:        0,     0,     0,   923,   961,     0,     0,   760,   982,     0,
3251:        0,   759,     0,     0,     0,  1013,  1014,   716,   730,   731,
3252:      732,   736,  1046,  1045,   990,     0,   984,     0,     0,   717,
3253:      740,   745,     0,   962,   778,     0,   766,     0,   753,     0,
3254:      764,   768,   741,   756,     0,   737,     0,   985,   918,   920,
3255:        0,   916,     0,   727,   728,   729,   721,   722,   723,   724,
3256:      725,   726,   733,   894,   892,   893,     0,     0,     0,   869,
3257:      761,     0,     0,   763,   762,  1292,  1327,     0,   466,   466,
3258:      466,   454,   464,   989,     0,   607,   475,   607,     0,   714,
3259:      596,  1039,  1152,  1140,  1141,   924,  1038,   128,     0,  1160,
3260:        0,     0,     0,   134,   117,     0,  1158,     0,   150,   558,
3261:        0,   982,     0,   481,   482,     0,   486,  1522,  1415,     0,
3262:        0,     0,     0,   521,   549,     0,   540,     0,  1005,   522,
3263:     1004,   523,   526,   527,   498,   550,   994,   552,     0,   545,
3264:      438,   437,   556,     0,    42,     0,  1300,    59,     0,     0,
3265:        0,     0,     0,     0,   208,   244,   208,    96,  1300,   369,
3266:     1300,   369,  1199,  1267,  1431,     0,    55,    88,     0,   277,
3267:      108,     0,   262,   306,    78,    93,   101,     0,     0,    44,
3268:      168,   182,   187,   104,   191,   188,  1077,   189,   115,     0,
3269:       40,     0,   102,     0,  1075,     0,     0,    46,   106,  1079,
3270:        0,     0,     0,     0,   928,   819,   930,   931,   978,     0,
3271:      391,     0,   300,     0,   401,   381,   382,   392,     0,   301,
3272:     1057,     0,     0,     0,     0,     0,   292,   290,   320,     0,
3273:      297,   291,   299,     0,     0,   248,     0,  1193,     0,     0,
3274:      377,   373,     0,     0,   337,  1037,   339,     0,   341,     0,
3275:        0,   394,     0,   397,     0,   396,   400,   395,   389,     0,
3276:      420,     0,     0,     0,     0,     0,     0,  1136,     0,   622,
3277:      618,     0,     0,     0,     0,     0,     0,     0,     0,     0,
3278:      933,   471,   783,     0,     0,     0,   966,     0,     0,   857,
3279:        0,   832,   834,   640,   847,     0,   653,   836,   838,     0,
3280:      910,     0,     0,     0,   848,   786,   787,     0,     0,     0,
3281:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
3282:        0,     0,     0,     0,   802,   801,   849,   885,     0,     0,
3283:      953,   954,   850,   681,   680,   682,   682,     0,     0,   960,
3284:        0,     0,     0,   855,     0,   812,   924,   891,   889,   665,
3285:      714,     0,     0,     0,     0,     0,     0,     0,   767,   755,
3286:        0,   765,   769,     0,     0,     0,   749,     0,     0,   747,
3287:      779,   743,     0,     0,   780,     0,     0,     0,   825,   466,
3288:      466,   466,   466,   463,   465,     0,     0,     0,     0,  1415,
3289:        0,   579,   557,   559,   566,   579,   584,   827,   605,   828,
3290:     1023,     0,   531,     0,   531,     0,  1130,  1143,     0,  1161,
3291:        0,   139,   121,   141,   140,     0,   148,     0,   982,     0,
3292:      139,   123,     0,   142,     0,  1160,     0,   154,   478,     0,
3293:      911,   486,     0,   480,   525,   524,     0,   496,   547,   494,
3294:        0,   553,     0,     0,     0,   252,     0,     0,     0,   208,
3295:        0,     0,   316,     0,   303,    77,     0,     0,     0,    51,
3296:        0,    69,    61,    47,    75,     0,     0,    80,     0,    73,
3297:       90,    91,    89,    94,     0,   236,   218,   249,     0,     0,
3298:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
3299:        0,   822,   823,   820,   475,   977,   423,   424,   173,   422,
3300:      310,     0,     0,  1072,  1055,     0,     0,   161,   301,     0,
3301:      276,   272,     0,   270,   269,   271,     0,  1194,   166,     0,
3302:     1189,  1071,     0,     0,  1066,   369,     0,   426,     0,   385,
3303:      421,   410,   415,     0,   419,   417,   416,   411,   414,   627,
3304:        0,   627,     0,   613,     0,   625,     0,   634,   707,   708,
3305:      709,   710,   711,   712,   713,   659,     0,   968,   964,     0,
3306:      829,   934,     0,   922,   948,   947,   785,   797,   798,   799,
3307:      949,     0,     0,     0,   794,   795,   796,   788,   789,   790,
3308:      791,   792,   793,   800,   958,   957,   951,   952,   677,   675,
3309:        0,   852,   853,   854,   959,     0,   888,  1012,   718,     0,
3310:        0,   746,   963,   770,     0,     0,     0,   742,   910,     0,
3311:        0,     0,     0,     0,   751,     0,     0,     0,   872,   867,
3312:      868,     0,     0,     0,     0,   457,   456,   462,   579,   584,
3313:        0,   440,     0,   566,     0,   578,   515,   577,     0,     0,
3314:      590,   588,     0,   590,     0,   590,     0,   515,     0,   580,
3315:      515,   577,     0,   597,   997,   606,     0,   538,   819,   538,
3316:        0,   453,  1159,     0,  1155,     0,     0,     0,   129,   126,
3317:      116,     0,     0,   151,   139,   130,     0,   479,   484,   485,
3318:      495,   995,   109,   208,     0,     0,    58,     0,   318,   264,
3319:      296,   279,     0,     0,     0,   209,     0,   284,     0,    50,
3320:       70,     0,    66,     0,    95,     0,     0,     0,     0,     0,
3321:       53,    65,     0,    48,     0,   369,   369,    56,   263,  1031,
3322:     1571,  1572,  1573,  1574,  1575,  1576,  1577,  1578,  1579,  1580,
3323:     1581,  1582,  1583,  1584,  1585,  1586,  1663,  1587,   215,  1588,
3324:     1363,  1589,  1590,  1591,     0,  1592,   616,  1593,  1594,  1595,
3325:      897,   898,   213,   305,   210,   311,   212,   214,     0,  1032,
3326:      211,   308,   105,  1078,     0,   103,     0,  1076,   112,   110,
3327:      107,  1080,     0,   404,   384,     0,     0,  1300,     0,  1072,
3328:      159,   298,     0,   326,   248,   321,     0,  1193,  1191,     0,
3329:     1188,     0,     0,     0,   342,     0,   398,     0,   418,   624,
3330:        0,   623,     0,   619,   626,   967,   845,   856,   946,     0,
3331:        0,     0,     0,   851,   846,   776,   774,   771,     0,   772,
3332:      750,     0,     0,   748,   744,     0,   781,   858,     0,   874,
3333:      871,   461,   460,   459,   458,   565,   563,     0,   568,  1023,
3334:      575,   508,   514,   564,     0,   560,     0,   589,   585,     0,
3335:      586,     0,     0,   587,     0,   561,     0,  1023,   562,     0,
3336:      604,     0,     0,   863,  1010,   863,  1131,   138,   118,     0,
3337:      119,   149,     0,     0,     0,     0,   143,   378,     0,   314,
3338:       60,     0,   296,     0,   208,   281,   280,   283,   278,   282,
3339:      285,     0,     0,     0,     0,     0,   265,     0,     0,     0,
3340:      229,     0,     0,   296,   302,   225,   226,   335,     0,     0,
3341:        0,    62,    52,    49,    54,    63,     0,     0,    64,    67,
3342:      612,    79,    72,  1663,  1670,     0,     0,     0,     0,     0,
3343:      821,   380,   387,   173,     0,     0,     0,     0,   298,     0,
3344:        0,     0,  1193,     0,     0,   206,     0,   245,     0,   163,
3345:     1192,     0,  1181,     0,  1064,  1065,     0,     0,   386,   620,
3346:      614,   803,     0,     0,     0,   773,   777,   775,   752,   860,
3347:        0,   475,   600,     0,   603,   567,     0,     0,   503,   510,
3348:        0,   513,   507,     0,   569,     0,     0,   571,   573,     0,
3349:        0,     0,   608,     0,     0,     0,  1000,     0,   530,   532,
3350:      535,   534,   537,     0,   506,   506,     0,     0,     0,   152,
3351:        0,   145,   145,     0,   131,   912,     0,   208,     0,   295,
3352:      315,   243,     0,     0,   227,     0,   233,     0,   267,   268,
3353:      266,   228,   296,   301,   230,   336,     0,    71,     0,    87,
3354:        0,     0,   307,   113,   111,   404,     0,  1072,  1188,     0,
3355:        0,   272,   166,  1190,   261,   254,   255,   256,   257,   258,
3356:      259,   260,   275,   274,   246,   247,     0,     0,     0,  1066,
3357:        0,   804,     0,   805,     0,   877,   605,     0,     0,   599,
3358:        0,   501,   499,   502,   504,   500,     0,     0,   576,   592,
3359:        0,   572,   570,   581,     0,   612,     0,   583,   536,     0,
3360:      862,   864,     0,     0,   442,   441,     0,   125,     0,   607,
3361:        0,     0,   147,   147,   133,     0,   301,   317,     0,   287,
3362:      294,   286,     0,     0,   224,     0,   231,   325,   217,   611,
3363:        0,    74,     0,   312,   379,   383,     0,  1182,     0,  1188,
3364:      248,  1193,     0,  1185,     0,     0,  1072,   806,   873,     0,
3365:        0,     0,   598,   601,     0,   574,     0,     0,     0,   609,
3366:      610,   582,   533,     0,     0,   508,   120,   145,   124,   153,
3367:      144,   483,   146,   483,     0,   325,   273,     0,     0,   251,
3368:      217,     0,   242,     0,    68,    86,   313,     0,   298,  1183,
3369:      207,   164,  1186,  1187,     0,   607,  1494,  1243,  1465,     0,
3370:      875,   878,   876,   870,     0,   511,     0,   517,   591,   865,
3371:      866,   505,   147,   486,   486,   607,   242,   288,   293,     0,
3372:      232,   234,   322,   323,   324,     0,   238,   235,   239,     0,
3373:     1188,     0,  1062,     0,   882,   881,   880,   884,   883,   602,
3374:        0,     0,   509,   483,   136,   135,   132,   208,   250,     0,
3375:        0,     0,   240,     0,   241,   216,  1184,  1072,     0,   512,
3376:        0,   486,   319,   221,     0,   220,     0,   304,   237,   607,
3377:      879,     0,   137,   219,   223,   222,  1063,   516
3378: };
3379: 
3380: /* YYDEFGOTO[NTERM-NUM].  */
3381: static const yytype_int16 yydefgoto[] =
3382: {
3383:       -1,    35,    36,    37,    38,  2051,  2052,  2053,  1755,   888,
3384:     2721,  1756,   889,   890,  2055,    39,    40,  1369,   525,  1693,
3385:     1312,  2464,    42,  2006,  1698,  2010,  2599,  2254,  2005,  2012,
3386:     2702,  2761,  2007,  1699,  2600,  1700,    43,    44,  1437,    45,
3387:      652,    46,  1438,  1396,  1101,   908,  1386,  1090,    47,    82,
3388:       48,  2042,  2343,  2774,  2065,  2857,  2494,  2495,  1757,  2816,
3389:     2817,  2044,  2107,  1378,  2810,  1816,  2652,  1761,  1744,  2496,
3390:     1825,  2609,  2373,  1758,  2285,  1817,  2481,  2708,  1448,  1818,
3391:     2709,  2474,  1819,  1421,  1441,  2287,  2818,  1762,  1422,  2344,
3392:     1365,  1820,  2772,  1821,   485,  2499,    49,   517,   518,   643,
3393:     1071,   519,    50,   486,  1059,   526,    52,  1807,  2523,  2118,
3394:     2524,  1849,  1801,  1099,  1846,  1469,  1425,  1100,   474,  1483,
3395:     2119,  2088,  1470,   527,   792,    55,    56,    57,   577,   571,
3396:      572,  1284,  1671,  1975,   858,   550,   551,   587,  1415,  1319,
3397:     1320,  1706,  2023,  1344,  1345,   867,   868,  2569,  2694,  2570,
3398:     2571,  2432,  2433,  2832,  1332,  1336,  1337,  1719,  1712,  1325,
3399:     2247,  2588,  2589,  2590,  2453,  1340,  1341,   870,   871,   872,
3400:     1349,  1729,    59,  1675,  1982,  1983,  1984,  2225,  2226,  2240,
3401:     2236,  2438,  2577,  1985,  1986,  2562,  2563,  2669,  2243,  1992,
3402:     2581,  2582,  2629,  1861,  1155,  1156,  1491,  1157,   793,  1158,
3403:     1190,   794,  1196,  1160,   795,   796,   797,  1163,   798,   799,
3404:      800,   801,  1179,   802,   803,  1213,  1509,  1510,  1511,  1512,
3405:     1513,  1514,  1515,  1516,  1517,   843,  1574,   805,   806,   807,
3406:     1988,   808,  1276,  1659,  2594,  2690,  2691,  1968,  2209,  2419,
3407:     2561,  2741,  2790,  2791,   809,   810,  1227,  1228,  1656,  1271,
3408:     1272,   811,  2346,  1274,  1567,  1594,  1223,   951,   952,  1168,
3409:     1544,  1545,  1570,  1893,  1577,  1583,  1920,  1921,  1595,  1624,
3410:      812,  1527,  1528,  1877,  1181,   813,   613,   958,   614,  1176,
3411:     1618,   821,   814,   815,  1725,   563,  2573,   648,  1039,   816,
3412:      817,   818,   819,   820,   565,   953,   467,  1169,  2762,  1073,
3413:      848,   954,  1759,  1614,    60,   720,   618,    61,  1050,  1432,
3414:       62,  2545,  2383,  1061,  1450,  1829,   487,    63,    64,    65,
3415:       66,    67,   594,  1093,   528,  1094,  1095,   708,    68,  1102,
3416:      710,   711,    69,   556,   557,  1103,  1296,  1104,    70,   537,
3417:       71,   839,   568,   840,   842,   530,   855,  2001,  1689,    73,
3418:       74,   544,   545,    75,    76,   558,    77,    78,  2542,   531,
3419:     2110,  1056,   495,   469,   470,  1171,  1042,   956,  1043
3420: };
3421: 
3422: /* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
3423:    STATE-NUM.  */
3424: #define YYPACT_NINF -2446
3425: static const int yypact[] =
3426: {
3427:     4928,   -98,    -2, -2446, -2446,   -98, 30641, -2446,   -98,    48,
3428:     2466, 35311, -2446,  2230,   -98, 41382,  1727,   207,   238,   215,
3429:      343, 41382, 41382, 35778,   -98,   246, 41849, -2446,   -98, 32976,
3430:      -32,  -132, 42316, 41382,  1092,   417,   -33, -2446, -2446, -2446,
3431:    -2446, -2446,    94, -2446, -2446, -2446, -2446, -2446, -2446, -2446,
3432:    -2446, -2446, -2446, -2446,   125, -2446,    62,   132,  -116,   -14,
3433:    -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446,    64, -2446,
3434:    -2446, -2446, -2446, -2446, -2446, -2446, 20347, -2446, -2446, -2446,
3435:    -2446, -2446, -2446, 36245, 41382, 36712, 33443, 37179, -2446,   113,
3436:    -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446,
3437:    -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446,
3438:    -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446,
3439:    -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446,
3440:    -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446,
3441:    -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446,
3442:    -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446,
3443:    -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446,
3444:    -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446,
3445:    -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446,
3446:    -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446,
3447:    -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446,
3448:    -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446,
3449:    -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446,
3450:    -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446,
3451:    -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446,
3452:    -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446,
3453:    -2446,   115, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446,
3454:    -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446,
3455:    -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446,
3456:    -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446,
3457:    -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446,
3458:    -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446,
3459:    -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446,
3460:    -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446,
3461:    -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446,
3462:    -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446,
3463:    -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446,
3464:    -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446,
3465:    -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446,
3466:    -2446, -2446, -2446, -2446, -2446, -2446, -2446,   123, -2446, -2446,
3467:    -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446,
3468:    -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446,
3469:    -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446,
3470:    -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446,
3471:    -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446,
3472:    -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446,
3473:    -2446, -2446, -2446, -2446, -2446,    26,   412, -2446,   134, -2446,
3474:    -2446, -2446, -2446,  1092, 37646, -2446,   319,   614, -2446,   208,
3475:    42783, -2446, -2446, -2446, -2446,   568, 37646,   301, -2446, -2446,
3476:    -2446, 38113, -2446, -2446, -2446, -2446,   311, -2446, -2446,   180,
3477:    -2446,    34, -2446, -2446, -2446,   363, -2446, -2446, -2446, -2446,
3478:    -2446, -2446, -2446, -2446,   256, -2446, -2446, 43250, 43717, 44184,
3479:    -2446,   274,   580,   556, 19879, -2446, -2446, -2446, -2446,    64,
3480:    -2446, -2446,   343, -2446,   343, -2446, -2446, -2446,  -135,   298,
3481:    -2446,   356,   618, -2446, -2446, -2446,   351, -2446, -2446,   606,
3482:     8244,  8244, 44651,   343, 44651,   378, -2446, -2446,   -18, -2446,
3483:    -2446, 21283, -2446,   452,   412, -2446, -2446,   121,   778, 11196,
3484:    41382,   461, -2446,   473,   461,   482,   501,  -116, -2446,  4928,
3485:      886,   792, 32976,   267,   267,   979,   267,   592,   894, -2446,
3486:     1274, -2446,   553, -2446, 37646, -2446,   600,   867,  -132, -2446,
3487:      351,   928,   529,   773,   966,  4259,   974,   881,   978,  1091,
3488:     6276, 11196, 25146, -2446,   412, -2446, -2446, -2446,   645, -2446,
3489:      626, -2446, -2446, -2446, -2446,   580,   873, -2446,   700, 38580,
3490:    39047, 37646,   667,  1124, -2446, -2446, -2446, -2446,   769, -2446,
3491:    -2446,    93,  1066,    59,   735, -2446,  1068,    96, -2446,  1085,
3492:      972, 11196, -2446,   813, -2446, -2446, -2446, -2446, -2446, -2446,
3493:    -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446,
3494:    -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446,
3495:    -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446,
3496:    -2446, -2446, -2446, -2446,  -132, -2446, -2446, -2446, -2446, -2446,
3497:    -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446,   377, -2446,
3498:    -2446, 27014, -2446, -2446,   556,   794, -2446, 27014, 11688, 47453,
3499:     1249, -2446,  1073, 41382,   826, -2446, -2446, -2446, -2446, -2446,
3500:    -2446,   834,  1321,    92,  1325, 11196,   857,    92,    92,   861,
3501:     1189, -2446, -2446, -2446,   136,   877,   879, -2446,   137,   137,
3502:    -2446,  1061,   885,   891, -2446,   138,  1362,  1377,    79,   904,
3503:      908,   220,    92, 11196, -2446,   917,   137,   930,   941,   957,
3504:     1400,   982, -2446,  1428,   987,    81,    90,   991,   999, -2446,
3505:     1003, -2446,   139, 11196, 11196, 11196, -2446, 11196,  7260, 37646,
3506:     1432, -2446,   412,   343, -2446, -2446, -2446, -2446, -2446, -2446,
3507:    -2446,  1008, -2446,   114,  4962, -2446,  1009, -2446, -2446, -2446,
3508:      171, 11196, -2446,  1464,   -28, -2446,   141, -2446, -2446, -2446,
3509:      412,  1273,  1016, -2446, -2446, -2446,   160,  1426, 26080, 26547,
3510:    37646, -2446, -2446,   412, -2446, -2446, -2446, -2446, -2446, -2446,
3511:      407, -2446,    64, 28165,   495,   461, 41382, 41382,  1488, -2446,
3512:    -2446, -2446, 32976, 37646, 45118,  1160, -2446, -2446,  -116,  -116,
3513:    11196,  -116,   172,   -13,  8736, 12180,  1370,  1263,   133,   494,
3514:     1385, -2446,  1294,   592,   894, 11196,   473, -2446,  1338, 37646,
3515:    31108,   569,   623,  1094,  1177,  1104,   204,  1510, -2446,  1109,
3516:    -2446,  1198, 37646, 48824,   162, -2446,  1556,   162,   162,   564,
3517:     1573,  1235,   184,  1388,    55,    87,  1109,  1832, -2446, 32976,
3518:       83,   421,  1109, 37646,  1240,   613,  1109,    88, 11688,   651,
3519:      863,   244,   950,   994,    91, 11688,  1005,  1154,  1214,  1252,
3520:     1289,  1297,  1342,  1491,  1538,  1541,    95,  1543,  1547,  1558,
3521:     1560,  1563,  1575,   102,  1610,    97, 11688,  1612,  1167, -2446,
3522:    28165,   -78, -2446, -2446,  1618,   108, -2446, 24678,  1168, -2446,
3523:    -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446,
3524:    -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446,
3525:    -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446,
3526:    -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446,
3527:    -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446,
3528:    -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446,
3529:    -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446,
3530:    -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446,
3531:    -2446, -2446, -2446, -2446, -2446,  1265, 41382,  1224,   -84,  1534,
3532:     1592, 37646,  1424,  1832,  1427,  1208,  1666,   626,  9228,  1670,
3533:    -2446, 45585, -2446, -2446, -2446, -2446, -2446, 41382, -2446, -2446,
3534:    41382, -2446, 29240,  1219, 41382, 41382, -2446, 41382, 41382,   507,
3535:    39514,   556, 33910, -2446, -2446, -2446, -2446,   755,   820, -2446,
3536:    -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446, 29240, -2446,
3537:     2802, -2446, -2446, -2446,  1226,   533, -2446, -2446, -2446, -2446,
3538:     1271, -2446,  1271,  1271, -2446, -2446, -2446, -2446,  1228,  1228,
3539:     1229, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446,
3540:    -2446, -2446, -2446, -2446,  1231,   220, -2446,  1271, -2446,  1228,
3541:    -2446, -2446, -2446, -2446, -2446, 48824, -2446, -2446, -2446, -2446,
3542:      196,   217, -2446, -2446, -2446,  1232, -2446,  1684, -2446, -2446,
3543:    -2446, -2446, -2446, -2446, -2446, -2446, -2446,  1898,   570,  1228,
3544:    -2446, -2446,  1092, -2446, -2446, 11196,   412, 11196, -2446,  1236,
3545:    28165,  1277, 11196, -2446, -2446, 11196,  1237,  1715,  1715, 11196,
3546:    -2446, -2446, -2446, -2446,  3962,  1715, -2446,  1715,  1715,  1271,
3547:     1271, -2446, 28262, 11196, -2446, 23626, 11196, 15132,  9720, 11196,
3548:     1322,  1323,  1715, -2446,  1715, -2446, 11196,  7752, 11196, 28262,
3549:     1716,  1716,  1238,  1245,  1851,  5390,  1241, -2446,   511, -2446,
3550:     1239, -2446,   412,   412, -2446,  1715, 11196,  3659,  3659, -2446,
3551:      150, 47453, 11196, 11196, 11196, 11196, 28773,  1329,   105, 41382,
3552:    11196, 11196,  1247,   763, -2446, 11196,  1466, -2446,  1250, 11196,
3553:     1332,   111, 11196, 11196, 11196, 11196, 11196, 11196, 11196, 11196,
3554:    11196, -2446, -2446, 16594,   156,  1562,  1582,   412, 11196,   -59,
3555:      194, 11196, 34377,  8244,  1574,  6276, -2446,   412,    82,  1574,
3556:    -2446, -2446, -2446, -2446,   145, -2446, -2446, -2446, -2446,  1226,
3557:    -2446,  1226,  1255, 37646,   121, 32509, -2446, 11196, -2446,   571,
3558:     1257,  1315,   539,  1709, 41382, -2446, 22219,  1542, -2446,  1259,
3559:    -2446, 27477,  1542, -2446, -2446, 15610,  1382,  1537,  1474, -2446,
3560:    -2446, -2446,  1266, 28165, 12672, 12672, -2446,  1299, 28165,  1301,
3561:    -2446, -2446, -2446, -2446, -2446, -2446,   586, -2446, 37646,    68,
3562:     1370,   494,   575, -2446, -2446,  1137,  1269, 46052, 41382,  1544,
3563:     1493,  1545,  -166, -2446, -2446, -2446, 47453, -2446, 41382, 41382,
3564:    46519, 46986, 29707, 41382, 29240, -2446, -2446, -2446, -2446, 41382,
3565:     1605, 41382,  4679, -2446, -2446, -2446,   162, -2446, -2446, -2446,
3566:    -2446, -2446, 41382, 41382, -2446, -2446,   162, 41382, 41382,   162,
3567:    -2446,  1225, 41382, 41382, 41382, 41382,  1552, 41382, 41382,   -69,
3568:      -69,  1477, -2446, 10212,  1276, -2446, 11196, 11196, -2446, 11196,
3569:     1448, -2446,   581, -2446,  1489,    27,  1327, 37646, 41382,  2219,
3570:    -2446, -2446, -2446, -2446, -2446,  1284,  1633, -2446,  1832,  1634,
3571:    31575,   654,   544,  1336, -2446,   603, 11196,  1524, -2446, -2446,
3572:     1513,    59, -2446, -2446, 29240,    96, -2446,  1521,   127, -2446,
3573:     1539,   626,  1765, -2446, -2446, -2446, -2446, -2446, -2446, -2446,
3574:      608, 19411, -2446, -2446,  1766,   343,  1766,   499, -2446, -2446,
3575:     1766, -2446,  1766, -2446, 27014, -2446, 11688, 47453,  1769, 41382,
3576:     1324,  1326, -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446,
3577:    -2446, -2446, -2446, -2446, -2446, -2446, -2446, -2446,  1715,  1402,
3578:    -2446,  1404,  1406,  1407, -2446, -2446, -2446, -2446, -2446, 47453,
3579:    -2446, -2446,   635, -2446,  1320, 11196, 11196,    40, -2446, 27541,
3580:      646, 11196,  1328,  1339,   659, -2446, -2446, -2446, -2446, -2446,
3581:    -2446, -2446, -2446, -2446,  1340,  1646, -2446,  1341,  1343,  1344,
3582:    -2446, -2446,  4915, -2446, -2446, -2446, -2446, -2446, -2446, -2446,
3583:    -2446, -2446, -2446, -2446, -2446, -2446, -2446,  1345,  1335, 27577,
3584:     1346, 15132, 15132,  7260,   918, -2446, 15132,  1347, -2446, -2446,
3585:      665, 27495,  1238,  1350,  1348,  1356,  1352,  1355, 27661, 10704,
3586:    11196, 10704, 10704, 27893,  1238,  1359, 28028, -2446, -2446, 11196,
3587:    37646, -2446, 11196,  1360,  5443, -2446, -2446, -2446,  1316,  1316,
3588:     1316, 28262, -2446, -2446, -2446,  1374, -2446, 15132, 15132, -2446,
3589:     2728,  2494,  7260, -2446, -2446,  1647, -2446,   801, -2446,  1368,
3590:    -2446, -2446,  2645, -2446, 23626, 28204, 11196,   107, -2446, 11196,
3591:     1247, 11196,  1443,  1316,  1316,  1316,   199,   199,   161,   161,
3592:      161,   288,   194, -2446, -2446, -2446,  1369,  1371,  1372,  1570,
3593:    28165,   982, 11196, -2446, 28165,   731,   774, 37646,  2228,  3003,
3594:     4378, -2446, -2446, -2446, 18007,  1415,   -78,  1415,  1715,  3659,
3595:    -2446,   473, -2446, -2446, -2446, 28165, -2446,  1092, 18007,  1416,
3596:     1429,   392, 20815,  1584, -2446, 41382, -2446, 41382, -2446,   -16,
3597:     1390, -2446, 11196, -2446, -2446,  1127,  1399,  1591,  1593,   916,
3598:      916,  1299,  1594, -2446, -2446,  1449, -2446, 11196,  1311, -2446,
3599:     1313, -2446, -2446, -2446, -2446,  1408, -2446, -2446,  1640, -2446,
3600:    -2446, -2446, -2446,  1473,  1109, 11196,  1616, -2446,    89,  1423,
3601:     1741,    56,  1720, 41382, -2446,  1627, -2446,   403,  1767,   127,
3602:     1771,   127, 29240, 29240, 29240,   675, -2446, -2446,   343, -2446,
3603:    -2446,   719, -2446,   328, -2446, -2446, -2446,  1518,   621,  1109,
3604:     1832, -2446, -2446, -2446, -2446, -2446, -2446, -2446,   177,   624,
3605:     1109,  1519, -2446,  1522, -2446,  1525,   625,  1109, -2446, -2446,
3606:     1442,  1445,  1452, 11688, -2446, -2446, 28165, 28165, 28165,  1430,
3607:    -2446,   124, -2446, 41382, -2446, -2446, -2446,  1448, 37646,   626,
3608:    -2446,   650, 41382, 37646, 37646, 37646, -2446, -2446, -2446,  1454,
3609:     1446, -2446, 47453,   -66,  1667,  1664, 41382,  1497,  1104,  1910,
3610:    -2446, 28165,  1800, 37646, -2446, -2446, -2446, 41382, -2446,  1804,
3611:     1092, -2446, 29240, -2446, 32042, -2446, -2446, -2446, -2446,   343,
3612:    -2446,   343,  1685, 41382, 25613,   343,   343, -2446,   729,  1471,
3613:     1326,   742, 47453,  1715,    71,  1475,  1384,   839,   993,  1310,
3614:    -2446, -2446, -2446,   765, 28074, 11196, -2446,  1818, 47453, -2446,
3615:     5668, -2446, -2446, -2446, -2446, 11196, -2446, -2446, -2446, 11196,
3616:    -2446, 23626, 11196,  1793, -2446,  1950,  1950,  5390, 47453, 15132,
3617:    15132, 15132, 15132,   642,   930, 15132, 15132, 15132, 15132, 15132,
3618:    15132, 15132, 15132, 15132, 16102,   255, -2446, -2446, 11196, 11196,
3619:     1801,  1793, -2446, -2446, -2446,   183,   183, 47453,  1479,  1238,
3620:     1480,  1482, 11196, -2446, 47453,   412, 24101, -2446, 28165, -2446,
3621:     3659, 11196,   906,  1056, 11196,   783, 11196,  1797, -2446, -2446,
3622:     1484, -2446, -2446, 47453, 11196,  1492,  2711, 15132, 15132,  2757,
3623:    -2446,  3447, 11196,  7260, -2446,  1477,  1531, 22687, -2446,  1587,
3624:     1587,  1587,  1587, -2446, -2446, 37646, 37646, 37646, 18475,  1816,
3625:    17539, 39981,  1501,   144, -2446, 39981, 40448, -2446,  1515, -2446,
3626:      412, 11196,  1822,  1505,  1822,  1514, -2446, -2446,  1527,  1501,
3627:    11196,  1675, -2446, -2446, -2446,  1583, -2446,   810, -2446,  1937,
3628:     1675, -2446,   817, -2446, 22219,  1416, 11196,   412, -2446,  1546,
3629:    -2446,  1399,   146, -2446, -2446, -2446,  1744, -2446, -2446, -2446,
3630:    37646, -2446, 41382, 24119,  1878, -2446, 41382, 41382, 41382, -2446,
3631:    41382,   833,   486,  1548, -2446,   486,  1858,   131,  1104,   184,
3632:     3360,   400, -2446, -2446, -2446,  1614, 41382, -2446, 41382, -2446,
3633:    -2446, -2446, -2446, -2446, 29707, -2446, -2446, -2446, 29240, 23158,
3634:    29240, 41382, 41382, 41382, 41382, 41382, 41382, 41382, 41382, 41382,
3635:    41382, -2446, -2446, -2446,  1477, -2446, -2446, -2446,    87, -2446,
3636:    -2446,   124,  1549,  1336,  1592, 40915,   835,  1832,  1550,  1995,
3637:    -2446,   654, 31575, -2446, -2446, -2446,  1954, -2446,   274,   163,
3638:    -2446, -2446,  1092, 41382,  1609,   127, 37646, -2446,   855, -2446,
3639:    -2446, -2446, -2446, 41382,  1551, -2446,  1551, -2446, -2446, -2446,
3640:     1715, -2446, 41382, -2446,  1554, -2446,  1555, -2446, -2446, -2446,
3641:    -2446, -2446, -2446, -2446, -2446, -2446, 11196, 28165, -2446,  1559,
3642:    -2446, 28165, 24137, -2446, 28165,  1801, -2446,  1018,  1018,  1018,
3643:     1298,  1880,   135,  1569,  1018,  1018,  1018,   214,   214,   126,
3644:      126,   126,  1950,   255, 28165, 28165, -2446, -2446, -2446, -2446,
3645:     1561, -2446, -2446, -2446,  1238,  1578, -2446, -2446,   269, 11196,
3646:    11196,  2728, -2446, 28309, 11196, 47453,   914,  2728,   170, 11196,
3647:     1140,  1833, 11196, 11196,  3550, 24165,  1579, 11196, 47905, -2446,
3648:    -2446, 37646, 37646, 37646, 37646, -2446, -2446, -2446, 39981, 40448,
3649:     1571, 17070,   144,  1585, 37646, -2446,  1660,  1598, 18007,  1845,
3650:     1773, -2446, 18007,  1773,   128,  1773,  1864,  1660, 21751, -2446,
3651:     1660,  1599,  1787, -2446,   559, 28165,  2033,  1912,   343,  1912,
3652:      343, -2446, 28165,  8244, -2446,  1092,  1683, 41382,   412,   -64,
3653:    -2446,  1617, 41382, -2446,  1675, 28165, 23626, -2446, -2446, -2446,
3654:    -2446, -2446, -2446, -2446, 41382,   919, -2446,   925,   486, -2446,
3655:     1641, -2446,   159,  1897,    44, -2446, 29240,  2165,   655, -2446,
3656:     1911,  1829, -2446,   162, -2446, 11196,   655,  1830,   164, 41382,
3657:    -2446, -2446,  1826, -2446, 47453,   127,   127, -2446, -2446,  1613,
3658:     1615,  1619,  1620,  1622,  1623,  1624,  1625,  1628,  1632,  1635,
3659:     1636,  1638,  1642,  1644,  1645,  1649,  1231,  1650, -2446,  1665,
3660:     1546,  1668,  1671,  1672, 48372,  1673,  1679,  1686,  1688,  1689,
3661:      755,   820, -2446, -2446, -2446, -2446, -2446, -2446,   735,  1690,
3662:    -2446,  1631, -2446, -2446,  1695, -2446,  1697, -2446, -2446, -2446,
3663:    -2446, -2446,  1648,   794,   100, 41382,  2079,  1865,  1655,  1336,
3664:    -2446, 31575,  1405,   531,  1664, -2446,   104,  1497, -2446,  2022,
3665:     1700,  1873, 41382,  1693, -2446,  2118, -2446, 32042,  1551,  1326,
3666:     1687,  1326, 47453, -2446, -2446, 28165, -2446, -2446, -2446, 15132,
3667:     1991,  1694, 47453, -2446, -2446,  2728,  2728, 28309,   927, -2446,
3668:     2728, 11196, 11196,  2728,  2728, 11196, -2446, -2446, 24183,  1883,
3669:    -2446, -2446, -2446, -2446, -2446, -2446, -2446, 30174, 39981,  1696,
3670:    -2446, 34844, -2446, -2446, 41382,   144, 18007, -2446, -2446,  2101,
3671:    -2446, 18007,  1972, -2446, 18007, -2446, 41382,  1704, -2446, 41382,
3672:    -2446, 13164, 11196,  1751, -2446,  1751, -2446,  1016, -2446,   392,
3673:    -2446, -2446,  2115, 18943,  2072, 11196, -2446, -2446,  1721,   486,
3674:    -2446,  1876,  1641,  1724, -2446, -2446, -2446, -2446, -2446, -2446,
3675:    -2446,   935,  1725, 41382, 41382, 15132, -2446,   655,   250,   130,
3676:    -2446,  1999, 37646,  1641, -2446, -2446, -2446, -2446,  2093,  2180,
3677:     2068, -2446, -2446, 28165, -2446, -2446,  1715,  1715, -2446, -2446,
3678:     2145, -2446, -2446, -2446, -2446,   735,   327, 23158, 41382, 41382,
3679:    -2446, -2446, -2446,    87,  2098,   936,  1092,  2071, 31575,  2187,
3680:     1737, 41382,  1497,   140,   140, -2446,  1877, -2446,  1879, -2446,
3681:    -2446,   189, -2446, 37646, -2446, -2446, 18943,  1092, -2446, -2446,
3682:    -2446,  3497, 15132, 47453,   947, -2446,  2728,  2728,  2728, -2446,
3683:     2175,  1477, -2446,   948,  2195, -2446, 41382,   -81,   -47,  1747,
3684:     1748, -2446, -2446,   955, -2446, 11196,  1749, -2446, -2446, 18007,
3685:     2101,   963, -2446, 47453, 41382,   965, 47453,  6768,  1753, -2446,
3686:    -2446, 28165, 28165, 41382,  1808,  1808,  1805, 41382, 11196, -2446,
3687:      969,  2168,     9,   -34, 28165, -2446, 37646, -2446, 29240, -2446,
3688:      486, -2446, 29240, 11196, -2446,  1653,  1298,  2208, -2446, -2446,
3689:    -2446, -2446,  1641,   626, -2446, -2446,  2061, -2446, 41382,  1817,
3690:      340,  1843, -2446, -2446, -2446,   794,   343,  1336,  1700, 37646,
3691:     1092,   654,   274, -2446, -2446, -2446, -2446, -2446, -2446, -2446,
3692:    -2446, -2446, -2446, -2446, -2446, -2446,  2181,  1980,  2182,  1609,
3693:      976,  3497,   977, -2446, 11196,   435,  1515, 30174,  1777, -2446,
3694:      985, -2446, -2446, -2446, -2446, -2446, 41382,   937, -2446, 28165,
3695:    41382, -2446, -2446, -2446, 41382,  2145,   997, -2446, -2446, 13164,
3696:     1774, -2446,  2229,  1916, -2446, -2446,  1092, -2446, 24201,  1415,
3697:    18943, 41382, 41382, 41382, -2446,  1901,   626,   486,  1024, -2446,
3698:     1795, -2446, 24512,  2004, -2446,  2084, -2446,  2034,  1789, -2446,
3699:    11196, -2446,  1860, -2446, -2446, -2446,  2241, -2446,  1796,  1700,
3700:     1664,  1497,  2001, -2446,  2002,  1799,  1336, -2446,  1238, 13656,
3701:    13656,  1803, -2446, -2446, 41382, -2446,  1031,  1806,  1054, -2446,
3702:    -2446, -2446, -2446, 41382,  1802, 34844, -2446,  2168, -2446, -2446,
3703:    -2446,   240, -2446,   240, 22219,  2034, -2446, 29240, 23158,  2024,
3704:     1789,    41,  2008,  1832, -2446, 28165, -2446,  1092, 31575, -2446,
3705:    -2446, -2446, -2446, -2446, 18943,  1415, 14640,  1944,    98, 27513,
3706:    -2446, -2446, -2446, -2446,  1058, -2446,  2283,  1960, -2446, -2446,
3707:    -2446, -2446, 41382,  1399,  1399,  -145,  2008, -2446, -2446,  2099,
3708:    -2446, -2446, -2446, -2446, -2446,   120,  2017, -2446,  2018,   866,
3709:     1700,  1059, -2446,  2266, -2446, -2446, -2446, -2446, -2446, -2446,
3710:     1813,  1819, -2446,   240, -2446, -2446, -2446, -2446, -2446,   103,
3711:      103,  2183, -2446,  1882, -2446, -2446, -2446,  1336, 14148, -2446,
3712:     2308,  1399,   486, -2446,  2296, -2446,   119, -2446, -2446,  1415,
3713:    -2446,  1834, -2446, -2446, -2446, -2446, -2446, -2446
3714: };
3715: 
3716: /* YYPGOTO[NTERM-NUM].  */
3717: static const yytype_int16 yypgoto[] =
3718: {
3719:    -2446, -2446, -2446,  1743, -2446, -2446, -2446,   273, -2446,   946,
3720:    -2446,   265,  -474,   583, -2446, -2446, -2446,  -836,     6, -2446,
3721:    -2446, -2446, -2446,    74,   318, -2446,  -367, -1821,  -125, -2446,
3722:    -2366, -2252, -2446,  -427, -2346, -1626, -2446, -1014,   243, -2446,
3723:    -2029, -2446,  -602,  -868,  -699,  -900, -2446,    43, -2446,  1330,
3724:    -1012, -1718, -2321,  -418, -2446,  -487, -2446,  -261, -1699,  -460,
3725:     -446, -2446, -2244,  -856, -2446,  1481,  -172, -2446,   627, -2446,
3726:    -2024, -2446, -2446,   616, -2446,  -855, -2446, -2446, -1790,   264,
3727:     -400, -2228, -2265,   567,  -611, -2446,  -445,   307, -1674, -2446,
3728:      638, -2446,  -387, -2446,  -477, -2064, -2446, -2446, -2446,  1312,
3729:     -625, -2446, -2446, -2446, -2446,    17, -2446, -2446, -2446, -2446,
3730:    -2446,  -571,   576, -2185, -2446,   545, -2446, -2446, -2446, -2446,
3731:        1,   300, -2446,     5,   517,   -30,    -8,    14,    16,    45,
3732:     1557,  1568, -2446, -1225,   577, -2446, -2446,  -575,   -54, -2446,
3733:      695, -1950, -1961,  -413,  1047,  1532,  1535,  -276,  -187, -2446,
3734:     -345, -2446, -1251, -2446, -2446,   694,  1087, -1201, -1234, -2446,
3735:      420, -2446,  -273, -2446,   169,  -406,  1070, -2446,  1553, -2446,
3736:    -2446, -2446, -2446, -1198,   734, -1921,   445, -1901, -1763,   209,
3737:      192, -1093,  -153,    28,   453,  -235, -2446, -2446,  -233, -1651,
3738:    -2292,  -247,  -246, -2446, -2446, -1071, -1413,  -874, -2446, -2446,
3739:     -417,   989, -2446, -2446, -2446,  1133,  1178, -2446, -2446,  1988,
3740:     2032, -2446,   317,  2372,   287,  -741,  1246, -1127,  1248, -1136,
3741:    -1140, -1143,  1254,  1256, -1173,  2891, -1528,  -618,    24, -2446,
3742:    -2236, -1562, -2446, -2446,   -12, -2446,  -299, -2446,  -298, -2446,
3743:    -2446, -2446,  -278, -2445, -2446,  1184,   864, -2446, -2446, -1181,
3744:    -2446,  3631,   767, -2446, -1578,  -559,  1293,  -650,  -894, -1453,
3745:    -2446, -2446, -2446, -2446, -2446, -2446, -1084, -1719,  -644,   838,
3746:    -2446, -2446,   954, -2446, -2446, -1113,  -573,  1055,  -541,  -758,
3747:      846, -2446,  -543,  1192, -2446,  1191,  -517,   271,  -973,    25,
3748:    -2446,  2222,   167,  1967,  -762, -2007, -2446, -2446,  -506, -2118,
3749:     -829, -2446,  -599, -2446, -2446, -2446, -1089, -2446,   679, -2446,
3750:    -1011, -2446,  -169, -2446, -2446, -2030, -2446, -2446, -2446, -2446,
3751:    -2446, -2446,  -374, -2446,  -453,  -448, -2446, -2446,     4,  -697,
3752:     1409, -2446, -2446,   639, -2446,  1014, -2446,   872, -2446, -2446,
3753:    -2446,  1196, -2446, -2446, -2446,    18,  1654,   478, -2446,  1204,
3754:    -2446, -2446, -2446, -2446, -2446,   258, -2446, -1010, -2396,    73,
3755:    -2215, -1038,    -6, -2446, -2446, -2446,  -503, -2446, -2003
3756: };
3757: 
3758: /* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
3759:    positive, shift that token.  If negative, reduce the rule which
3760:    number is the opposite.  If zero, do what YYDEFACT says.
3761:    If YYTABLE_NINF, syntax error.  */
3762: #define YYTABLE_NINF -1674
3763: static const yytype_int16 yytable[] =
3764: {
3765:      468,   647,   588,   907,   576,    53,    41,  1400,   822,  1047,
3766:      844,   645,  1089,  1040,  1096,   873,    58,    51,    72,  1383,
3767:      529,   713,  1076,   833,  1566,  1364,  1994,  1230,  2045,  1375,
3768:      464,   465,    58,  1232,  1858,  1215,  1430,  1399,  1431,  1433,
3769:     1434,  1044,  1462,  1895,  1896,   653,  1371,  1353,  1915,  1277,
3770:      590,  1541,  1411,  2060,  1540,  2062,  1955,   562,  1539,  2222,
3771:     2267,  1287,  2348,  2366,  1605,  1606,  2350,  1537,  1105,  2041,
3772:      654,  2013,   591,    79,  1404,  1860,   707,  2374,   574,  2377,
3773:      729,   599,  2701,  1521,  -679,  2239,  -682, -1003,  -679,  1942,
3774:     1943,  1677,  1079, -1028,  1578,  -682, -1550,  -674,   472,  1453,
3775:    -1561, -1025, -1025,  1724, -1652, -1652,  2530, -1568, -1663, -1663,
3776:    -1672, -1672,  1989, -1029,   607, -1670, -1670,  1068, -1028,   535,
3777:    -1561, -1026, -1026,   729,   834,  -428,  1989,  1293, -1568,   535,
3778:     2535,   906,  -431,   912,  1721,   916,   566,  1898,  2096, -1029,
3779:      638, -1550,  -641,  -654,  -669,  1616,   535,  1616,  1048,   827,
3780:      535,  1674,     3,     4,  1068,   714,  1356,  2585,  1367,  1637,
3781:     2478,  2853,  2539,  1290,  1083,   535,  1083,  2644,  1402,   729,
3782:     1607,   729,  1241,   729,   866,  1063,  1875,  -895,  2521,  2124,
3783:     2126,   869,  1282,  1653,  -895,  1068,  1278,   536,  -173,  2260,
3784:     1654,  2564,    83,  -173,  1805,  1384,  2632,  -914,  1387,  1388,
3785:     2660,  2176,  1247,  1326,  -914,  1241,   583,   585,   713,  2812,
3786:     1241,  2103,  1578,   580,   713,  2462,   585,  -428,  2645,  1064,
3787:     2671,  -388,  2237,  2536,  -431,  1898,  2646,  2601,  1222,  1226,
3788:     2516,  2704,  2504,  2864,  1249,  1247,  2703,  2229,  2537,  2839,
3789:     1247,  1426,  2727,    25,  2607,  2289,  2620,  1339,  2656,  1327,
3790:     2279,  1233,  1367,  1359,  2673,  2647,  2657, -1649, -1649,  2825,
3791:     1044,  1097,  2073,  1742,  2400,  2624,  1898,  1249,  1409,  2378,
3792:      584,  1488,  1249,   548,  1291,  1410,  2475,  1703,    29,  1288,
3793:     1241,   546,   493,  1638,  1199,  1200,   521,   835,  1661,   836,
3794:      862,  1376,  2686,   539,   856,  1745,  2230,  1639,   581,  1241,
3795:     1991,  2674,  1640,   573,   573,  2268,   533,  2435,  1328,    80,
3796:     2601,  2439,  2230,  2153,   532,  2290,  1352,  2643,  2239,    31,
3797:     1743,  2278,   534,  2381,  2648,   713,   713,  2515,  2231,  1247,
3798:     1309,  1323,  1191,  2779,   600,  2649,  1727,  1641,  2813,  2529,
3799:      717,  2823,  1249,  2441,  2231,  2014,  2476,   585,   535,  1204,
3800:       84,   718,  2233,    81,   569,   603,  1329,  1427,    85,  2232,
3801:      864,  1249,  2275,  1704,  2277,  2854,  2269,  2618,  2233,  1128,
3802:       34,  2157,  2158,  2159,  2160,   549,  1414,  2164,  2165,  2166,
3803:     2167,  2168,  2169,  2170,  2171,  2172,  2173,   828,  2865,  1065,
3804:     1292,  2802,    86,  2705,  2716,  2291,   857,  2630,  1069,  2621,
3805:     2672,  1361,  2234,  2860,  -428,  2826,  1186,  1398,  1445,  2401,
3806:     1215,  -431,  1413,  2814,  1330,  2538,  1989,   578,  1989,  2658,
3807:     1374,  1486,  2463,  2617,  2846,  2379,  2046,  1662,   639,  2200,
3808:     2201,  2564,  1806,  1324,  2675,  1069,  2398,  2619,  2821,    87,
3809:     1376,  1728,  2855,  2467,  1976,  1977,  1443,  2808,  1870,  2388,
3810:     2724,  2763,  2794,  1566,   567,  2425,   579,   829,  1578,  1578,
3811:     1350,  1279,  1283,  1578,  2601,  -428,  1069,  1351,  1305,  2856,
3812:      723,  2235,  -431,  1040,  2014,  2479,   592,  2026,   617,   615,
3813:     1377,  1835,  1642,   586,  1526,  1742,  2780,  2235,  1403,    58,
3814:      616,   619,  1066,   611,   576,   633,  1617,   612,  1957,  1471,
3815:     2196,  2015,  1737,   593,  1578,  1578,  1996,  2086,  2087,  1721,
3816:     2348,  1362,   610,  2530,  2350,  2574,  2781,    54,   712,  1794,
3817:     2578,   582,  2650,  2580,  2020,  2651,  -895,  2565,   709,  2522,
3818:     1178,  1210,  1655,    54,   473,  1394,   874,  2047,  1400,    58,
3819:     1210,  1374,  2038,   625,   468,   468,  -914,  2840,  2601,  1070,
3820:     2833,   575,   880,  1211,   636,  2469,  2135,  1455,   881,  1395,
3821:      837,   645,  1211,   468,  1452,  -679,   611,  1212, -1003,   590,
3822:      612,   838,  1458,  -428, -1028,   589,  1214, -1550,  -674,   713,
3823:     -431, -1561,  2074,  1218,    53,    41,  1075,  2480, -1568,  1575,
3824:      637,   591,  1794,    54, -1029,    58,    51,    72,  1998, -1028,
3825:     1236, -1561,  2281,  1523,   955,   468,  1041,  2726,  1913, -1568,
3826:      854,   641,  -428,  2731,  -428,   845,  1522,  2730,  1222,  -431,
3827:    -1029,  -431, -1550,  1189,  1195,  -669,  1530,  1285,  1463,  1377,
3828:     1534,  1678,  1394,  1210,   707,  1676,  2466,  1087,  1088,  1087,
3829:     1088,  2506,  2507,  1270,  1367,   468,  1210,  1613,   522,  1580,
3830:     1582,   862,    79,  1690,  1368,  1211,  1395,  1376,  2681,  1523,
3831:     1044,  -173,  -173,   882, -1647, -1647,  1989,  1210,  1211,  1389,
3832:     1989,  1265,  1266,  1267,  1268,  1269,  1270,  2533,  1267,  1268,
3833:     1269,  1270,  1212,  1233,  2282,  2497,   883,  1771,  2468,  1211,
3834:     1374,  2525,  1826,  1910,  1911,  1912,  1913,  1774,  1367,   715,
3835:     1777,   716,  1191,  1214,  1523,   712,  2785,  1713,  1370,  2498,
3836:     1566,   712,   955,  1170,  1523,  1044,  2389,   621,  2391,   622,
3837:      824,   864,  1204,  2534,  2141,  2143,  2144,  2140,  2142,   468,
3838:       58,  2139,  1908,  1909,  1910,  1911,  1912,  1913,  2049,  2138,
3839:     2048,  2049,  2408,  1619,  2211,  2212,  2213,  2214,  2283,   862,
3840:     2284,  1745,  1520,   476,   863,  2739,  2610,   468,   576,  1465,
3841:      651,  2348,   635,  1852,   729,  2350,  2302,  2187,  1853,  2050,
3842:      865,  2161,  1845,  1405,  1847,  1763,  2099,   468,   468,   468,
3843:     1770,   468,   468,  2740,   719,  2003,  1578,  1578,  1578,  1578,
3844:      650,  2133,  1578,  1578,  1578,  1578,  1578,  1578,  1578,  1578,
3845:     1578,  1578,  1326,  2069,   640,   468,  1390,  2149,  2631,  2155,
3846:      477,  2803,   883,  2804,  1391,  1454,  2070,  2859,  1854,   864,
3847:     2004,  2722,   712,   712,  1467,   721,  1834,  2156,  1454,   729,
3848:     1836,  1691,   722,  1838,  1790,  1791,  1792,  2177,  1230,   723,
3849:     1935,   573,  2834,  2835,  1578,  1578,  1377,   826,  1327,  1376,
3850:     1317,  1318,  1997,  1322,   468,  1040,  2180,  1376,   468,   468,
3851:     1376,  1376,   884,  2185,  1081,  1989,   885,  1082,   865,   468,
3852:     1400,  2551,   591,   591,  1989,   591, -1648, -1648,  1092,  1989,
3853:      854,  1734,  1989,  2851,  1092,   724,  1772,  1170,  2020,  2707,
3854:     2862,  1775,  1625,   628,  1303,   886,   611,  1304,    25,  2084,
3855:      612,  1989,   893,    25,   880,  1851,  2162,  1374,  1769,  1855,
3856:      881,  1856,   955,  2711,   728,    25,  2163,  1898,  1626,   955,
3857:     2024,   894,  1899,  1900,  1901,   729,   728,  1780,   629,  1898,
3858:     1947,   832,  1787,    29,  1899,  1900,  1901,  1401,    29,  2189,
3859:      955,  2567,  2075,  2017,   841,  1928,  2568,  1930,  1931,  2554,
3860:       29,   846,  1811,  1575,  1575,  1329,  1948,  2616,  1575,   847,
3861:     1234,   887,   630, -1650, -1650,  1408,  1873,  2104,   713,   849,
3862:     1238,   895,  2111,  2072,    31,   628,  2076,  2080,   481,    31,
3863:      482,   713,  1306,  1286,  1989,  1307,  2445,    32,   850,  2448,
3864:       54,    31,    32,  1295,  1459,  1092,  1092,  1307,  2345,  1575,
3865:     1575,  1600,   853,  1601,    32,   484,  1167, -1651, -1651,   631,
3866:      629,    33,   623,  1330,   624,   882,    33,  1989, -1653, -1653,
3867:     1485,  1494,  1495,  1486,  2661,  1692,   728,  1627,    33,  1898,
3868:       34,  1929,  1628,   860, -1674, -1674, -1674,  1629,  1377,   875,
3869:       54,   575,    34,   611,  2095, -1003,  1377,   612,  2758,  1377,
3870:     1377,  -474,   955,   852,  1183,  1184,  -474,  1518,  1686,   896,
3871:     1519,  1075,  1732,  1945,   728,  1307,  1041,  1898,  1802,   877,
3872:     1949,  1803,  1899,  1900,  1901,  1950,   712,   879,  2385,  1201,
3873:     1430,   878,  1431,  1433,  1434,  1566,   709,  1500,  1501,  2190,
3874:     1830,   631,  1041,  1486,   589,  1841,    54,    58,  1842,  1374,
3875:     2662,  1993,  1823,  1226,  1824,  1989,   891,  1374,   897,  1902,
3876:     1374,  1374,  1046,  1294,   880,   892,   898,   573,  1903,  2852,
3877:      881,  -474,  1871,   909,  2057,  1307,  2059,   913,   899,  1969,
3878:     1903,  1970,  1045,  1879,  2822,  1553,  1307,  1049,  1989,  1170,
3879:     2440,  1051,  2443,  1554,  1555,  1556,  1883,  2120,   728,  1307,
3880:     2300,  1898,  1917,  1058,  2836,  1307,  1899,  1900,  1901,   900,
3881:      880,   859,  2063,   861,   883,  2064,   881, -1654, -1654,   468,
3882:     -474,   468,  1971,  2411,  1972,  1630,   468,   617,   615,   468,
3883:     1167,  2293,  2276,   468,  2178,  2179,  1631,  1904,    58,   616,
3884:      619,   823,  2292,   825,  2301,  1504,  1505,   468,  2093,  1904,
3885:      468,   468,   468,   468,   902,  1060,  2067,  1080,  2866,  2068,
3886:      468,   468,   468,  1951,   910,  1067,  2129,  1074,   885,  1519,
3887:     2363,  1062,  1989,  1072,  1952,   882,   903, -1655, -1655,  2131,
3888:      468,    54,  2132,  2510,  1077,  1170,   468,   468,   468,   468,
3889:     1041,  1500,  1501,  1471,   468,   468,   905,   911,   880,   468,
3890:     2258,  1078,  2145,   468,   881,  1307,   468,   468,   468,   468,
3891:      468,   468,   468,   468,   468, -1656, -1656,   468,  1903,  1193,
3892:     2192,   882,   468,  1307,   602,   468,   605,   468,   609,   955,
3893:     1098,  1575,  1575,  1575,  1575,  1172,  1578,  1575,  1575,  1575,
3894:     1575,  1575,  1575,  1575,  1575,  1575,  1575,  2256,  1173,  1904,
3895:     2257,   468, -1657, -1657,  2261,  1224,   728,  2262,   838,  1898,
3896:    -1658, -1658,  1175,   887,  1899,  1900,  1901,  1694,  1177,   468,
3897:     2280,  2550,  2369,  1803,  1240,  1803,  -645,  1241,   468,   468,
3898:     -652,  2115, -1674, -1674, -1674,    88,  2020,  1904,   471,  1575,
3899:     1575,   713,  2386,  1182,   520,  2387,  1456,  1185,  1457,  1504,
3900:     1505,  1186,  1903,  2845,   547, -1659, -1659,  1247,   559,   882,
3901:     1170,  1546,  1523,  1187,  1248,  1188,  1041,  -642,  1041,  1192,
3902:     2342,    34,  1578,  2184,   883,   589,   589,  1194,   589,  1905,
3903:     1906,  1907,  -643,  1908,  1909,  1910,  1911,  1912,  1913,  1249,
3904:     1197,  1905,  1906,  1907,  1198,  1908,  1909,  1910,  1911,  1912,
3905:     1913,  2409,  2300,  1203,  1519,  -646,  2471,   955,  2019,  1803,
3906:      468,   468,  2472,   468,  2555,  1803,  1205,  1519,   583,  2470,
3907:      883,  1904,  2611,  2637,   914,  2612,  1803,  1206,   885,  1183,
3908:     1184,  -475,  1167,  -644,  2663,  2666,  -475,  1519,  2667,  1578,
3909:      468,  1231,  2678,  1207,  1523,  1075,  2345,  1827,  1041,  2244,
3910:     2683,    25,  2687,  2684,  1201,  2684,  2699,   915,  1275,  2700,
3911:     1488,  1679,  2430,  2736,  2737,   712,  2700,  1519,  1208,  1763,
3912:     1733,  2351,  2745,  1209,   885,  1075,  2430,  1216,   712,  1281,
3913:      955,  1170,   584,  1282,  2751,  1217,    29,  2684,  1250,  1218,
3914:     2384, -1674, -1674, -1674,  1235,  1908,  1909,  1910,  1911,  1912,
3915:     1913,  -475,  1251,   886, -1660, -1660,  1283,  1252,   883,  2362,
3916:     1903,  2766,  2685,  1170,  2767,  2685,  1550,  1551,  2795,   468,
3917:      468,  2796,  1297,   887,  1310,   468,  1316,    31,  1167,  1905,
3918:     1906,  1907,   863,  1908,  1909,  1910,  1911,  1912,  1913,   865,
3919:       32,  2798,  1255,   576,  1075,  2829,  2847,  1346,  2684,  2700,
3920:     -475, -1661, -1661,  2531, -1662, -1662, -1664, -1664,  1778,   585,
3921:    -1665, -1665,   885,  1354,    33,   468,   468,   468,  1348,   887,
3922:      468, -1666, -1666, -1667, -1667,   880, -1668, -1668,    34,  1904,
3923:     1372,   881,  1373,   468,   468,   468,   468,  2020, -1669, -1669,
3924:     1374,  1779,   576,   468,  2502,  1379,   468,  1258,    54,  1380,
3925:     1557,  1558,  1559,  1381,  1560,  1561,  1562,  1563,  1564,  1565,
3926:     1385,   468,   468,  1905,  1906,  1907,   468,  1908,  1909,  1910,
3927:     1911,  1912,  1913, -1671, -1671, -1673, -1673,  1392,   880,  1738,
3928:      468,  1416,  1417,   468,   881,   468,  1502,  1503,  1092,  1746,
3929:     1393,  1749,  1850,  1397,  1760,  1407,  1722,  1723,  -521,  -521,
3930:     1764,  1092,  1766,  1167,  1412,  2635,   468,   887,  -525,  -525,
3931:     -524,  -524,   576,  1419,  1773,   620,  1504,  1505,   468,  1776,
3932:     1420,  1044,  1424,  1781,  1782,  1783,  1784,   632,  1788,  1789,
3933:     2511,  2512,   468,  1428,  1429,  1523,   882,  1260,  1436,    54,
3934:     2120,  1439,   617,   615,  1440,   586,   468,  2345,  1987,   465,
3935:     1299,  1301,  1442,    58,   616,   619,  1446,  1454,  1159,  1178,
3936:     2457,   468,  1987,   465,  1189,  1195,  1484,  1487,  1489,  1490,
3937:     2482,  1526,  1525,  1531,   729,  1584,  1585,  1241,  1307,   468,
3938:     1597,  1599,  1615,  1622,  1602,  1633,  1634,  1636,  1657,   882,
3939:     1658,  1674,  1680,  1687,  1688,  1695,  1041,  1041,  1041,  1702,
3940:      584,  1714,   831,  1715,  1716,  1735,  1717,  1740,     3,     4,
3941:     1739,  1741,   585,  1795,    25,  1800,  1804,  2485,  1808,  1623,
3942:     1812,  1905,  1906,  1907,  1167,  1908,  1909,  1910,  1911,  1912,
3943:     1913,  1575,  1813,  1814,  1828,   876,  1261,   955,  1832, -1674,
3944:    -1674, -1674,  1833,  1265,  1266,  1267,  1268,  1269,  1270,    29,
3945:     1837,  1840,  1848,  1839,  1859,  1872,  1167,  1866,  1863,  1867,
3946:     1864,  1868,  1869,  1885,  1946,  1881,  1170,  1923,  2342,   522,
3947:     1053,  1055,  1057,  1891,  2487,  1924,  1882,  1884,  1886,    54,
3948:     1887,  1888,  1890,  1894,  1916,   883,  1041,  1922,   712,  1925,
3949:       31,   728,  1926,  1941,  1898,  1827,  1933,  1939,  1962,  1899,
3950:     1900,  1901,  1161,    32,  1953,  1963,  1170,  1965,  1966,  1967,
3951:     1991,  2000,   893,  2009,  2002,  2016,  2412,  1575,   893,   468,
3952:     2022,  -526,  1170,  -527,  2027,  2031,  2028,    33,  2032,   468,
3953:     2034,   894,  1159,   468,   713,  1785,   468,   894,   883,   885,
3954:     2037,    34,  1170,   468,   468,   468,   468,  1162,  2030,   468,
3955:      468,   468,   468,   468,   468,   468,   468,   468,   468,  2036,
3956:     2043,  2206,   468,   468,  2040,  2085,  2056,  2713,  1786,  1400,
3957:     2058,  1170,  2490,  2071,  2077,  2066,   468,  2078,  1170,  2081,
3958:     2079,   895,  2082,   576,  1575,   468,  2102,   895,   468,  2083,
3959:      468,  2101,   885,  2106,  2105,  2109,  2112,  1170,   468,  2113,
3960:      576,   468,   468,  2116,  2123,  2130,   468,   468,  2148,    54,
3961:     1919,  1898,  2137,  1918,  2194,  2491,  2181,  2182,  2089,  2183,
3962:     2195,   886,   468,   466,   468,  2459,  2207,  2614,   494,  2198,
3963:     2492,  1974,   494,  2220,   887,   468,  2665,  2242,   538,   494,
3964:      543,  2228,  2248,   543,   468,  -440,   564,  2296,  2246,   494,
3965:      494,  2250,  1987,   465,  1987,   465,  1492,  1493,  -440,  2710,
3966:      468,  1092,  2717,  -440,  2251,  2253,  2121,  2255,  2122,   896,
3967:     2259,  1302,  2127,  2128,  2270,   896,  1161,  2274,  1226,  2288,
3968:     2304,  2372,  2266,  2376,  2286,  2365,  2371,   887,  2382,  2393,
3969:     2394,  1803,    25,   543,  1313,  1903,  2396,  2399,  2403,  2670,
3970:      564,   494,   564,   564,   564,  2402,  2431,  2427,  1041,  -440,
3971:     2436,  2437,  1041,  2349,  1041,  2404,  2417,  2670,   897,  2342,
3972:     1355,  1162,  2428,  2450,   897,  2493,   898,    29,  -440,  2444,
3973:     1494,  1495,   898,  1382,  2434,  2449,    25,  2451,   899,  2473,
3974:     1224,  2452,  2465,  2477,   899,  2765,  2500,  2108,  2501,  2505,
3975:     2518, -1025,  2519, -1647,  1406,  2738,  2517, -1648, -1649,  1167,
3976:    -1650, -1651, -1652, -1653,  1904,  2526, -1654,  2380,    31,   900,
3977:    -1655,    29,  2719, -1656, -1657,   900, -1658,  -440,  2540,  2527,
3978:    -1659,    32, -1660, -1661,  1159,  2520,  -440, -1662, -1664,  1224,
3979:      468,  2528,  1496,  1497,  1498,  1499,  1500,  1501,  2541,  1167,
3980:     1502,  1503,  2543, -1665,  2547,    33, -1666,  1623,  2552, -1667,
3981:    -1668, -1669,    31,  2748,   902,  1167,   523, -1670,  2710,    34,
3982:      902,  2819,  2549,  1964, -1671,    32, -1672, -1673, -1026,  2546,
3983:     2553,  2560,  2566,   468,   468,  1167,   903,  2579,   468,  1170,
3984:     2584,  1981,   903,   468,  2229,  2760,   468,   468,  2593,    33,
3985:     2597,   468,  2603,  2606,    54,  1981,   905,  2625,  2605,   575,
3986:     2608,  2613,   905,   524,  1167,  2622,  2626,  2627,  2628,  2636,
3987:     2639,  1167,   468,  2640,  2641,  2654,   468,  2655, -1454,  2664,
3988:     1159,  2668,  2482,  2676,  2677,  2680,  2347,  2693,  2483,  2696,
3989:     1167,  2701,  1435,  2689,  2715,  2718,  2720,   468,  2732,  2734,
3990:     2484,   496,  1987,   465,  1504,  1505,  1987,   465,  2089,  2723,
3991:     2458,  2460,  2733,  2744,  2753,  2754,  2755,  2764,  2770,  2230,
3992:     2768,  1461,  -440,  2621,  2771,  2773,  2776,  2777,  1161,  2485,
3993:     1041,  2486,  2778,  2782,  2783,  2784,  2809,  2815,  2208,   468,
3994:     2793,  2824,  2830,  2797,  2831,  2838,  2841,  2843,  1170,  2848,
3995:     2849,  2231,  2839,  2272,   497,  2850,  1905,  1906,  1907,  2840,
3996:     1908,  1909,  1910,  1911,  1912,  1913,  2232,  2861,  2863,   498,
3997:    -1454,  2867,   851,  1162,  2303,  2233,  1765,  2305,  2349,  2307,
3998:     2054,  2461,  2263,  2759,  2596,   611,  2487,  2805,   849,   612,
3999:     2370,  2508,  2352,  2353,  2354,  2355,  2356,  2357,  2358,  2359,
4000:     2360,  2361,  2811,  2858,  2714,  1159,  1167,    54,  2844,  2234,
4001:     2837,  1363,  2653,  2488,  1506,  1507,  2375,  2807,  2039,  2061,
4002:     2090,  2842, -1454,   499,  1161,  2308,  2035,  2532,  2806,  1451,
4003:     2575,   712,   500,  2091,  1508, -1454,  1170,  2117,  2548,  1289,
4004:    -1454,  2364,   476,   468,   501, -1454,  1170,  2018,  1731,   502,
4005:     1343,  2747,  1342,  1308, -1454,   468,   468, -1454,  2695,   468,
4006:     2801,  2029,  1711, -1074,  2249,  2454,  2752,  2456,  2455,  1162,
4007:     1730,   468,  1999,  1347,   503,  2223,  2442,  2682,  2426,  2489,
4008:      468,  2219,  2743,  2742,  2490,   468, -1454,  2749,   468,  2750,
4009:     1536,   564,  1538,  2595,  2235,   468,   468,   627,  1542,   477,
4010:     1543,  1987,   465,   564,  2799, -1454,  2800,   468,   494,   468,
4011:     1987,   465,  2792,  1663,  1937,  1987,   465,   504,  1987,   465,
4012:     1524,   505,  2021,  1672,  1799,  1673,  1159,  2491,  1960,   468,
4013:     1224,  1876,  1167,  1958,   644,   494,   494,  1987,   465,  2094,
4014:     2735,  1464,  2492,  2264,  1681,  2218,  1683,  2221,  1857,  1161,
4015:     1682,     0,  1240,   479, -1454,  1241,  1311, -1454,  1159,  1684,
4016:        0,  2349,     0, -1454,     0,     0,     0,     0,     0,   543,
4017:        0,   543,     0,     0,     0,     0,     0,     0,   564,     0,
4018:     2576,  2638,     0,     0,   506,  1247,     0,   494,     0,  1726,
4019:      468,     0, -1674,     0,  1162,     0,   468,  1170,   507,   564,
4020:        0,     0,  2532,     0,  1092,     0,     0,   576,     0,     0,
4021:        0,   564,     0,     0,     0,     0,     0,  1249, -1454,   468,
4022:     1987,   465,     0,   468,     0,     0,     0,  1170,     0,   508,
4023:     1170,   468,   509,     0,     0,     0,     0,  2493,     0,     0,
4024:      510,  1167,   468,   511,     0,     0,   564,   564,   564,     0,
4025:        0,     0,  1041,  1987,   465,     0,  1041,   468,     0,     0,
4026:        0,     0,   512,     0,     0,     0,     0,   481,  1809,   482,
4027:     1161,  1167,  1974,     0,   513,     0,     0,     0,     0,    54,
4028:        0,   514,     0,     0,     0,   475,  1944,     0,     0,   476,
4029:      515,   483,     0,     0,   484,  2729,     0,     0,     0, -1454,
4030:        0,     0,  1161,  1240,     0,     0,  1241, -1454,   468,     0,
4031:    -1074,   468,     0,     0,     0,  1162, -1674,     0,     0,     0,
4032:        0,   516,     0, -1454,     0, -1454, -1454,     0,     0,  1167,
4033:    -1674,     0,     0,   468,  2347, -1674,  1247,     0,     0,  1167,
4034:     1174,  1987,   465, -1674,   468,     0,   477,  1162,     0,     0,
4035:        0,  2756,     0,   478,     0,     0,     0,  1164,     0,     0,
4036:        0,     0, -1454,     0,   468, -1454, -1454, -1454,  1249,  1240,
4037:    -1674,     0,  1241,     0,  1987,   465,     0,     0,     0,     0,
4038:        0,     0,     0,   468,   468,     0,  1240,     0,     0,  1241,
4039:        0,     0,     0,     0,     0,  1981,     0,     0,     0,  1981,
4040:      479,  1165,  1247,     0,     0,  2615,  1229,     0,     0, -1674,
4041:        0,  1041,  2349,     0,     0,  1240,     0,     0,  1241,  1247,
4042:        0,     0,    54,    54,     0,  1258, -1674,     0,   468,     0,
4043:      468,     0,  2820,     0,  1249,     0,     0,  1954,     0,  2633,
4044:     2634,     0,     0,     0,     0,     0,     0,   564,  1247,     0,
4045:        0,  1249,  2642,  2725,  1167, -1674,     0,     0,  1987,   465,
4046:        0,  1159,     0,   494,   494,     0,     0, -1674,   480,   564,
4047:      564,  1315,     0,     0,     0,     0,     0,     0,     0,     0,
4048:     1249, -1674,     0,     0,     0,     0, -1674,     0,     0,     0,
4049:     1167,     0,   468,     0,     0,     0,   564,  1366,     0,     0,
4050:        0,  1159,  1472,  2199,     0,     0,     0,     0,  1973,   564,
4051:        0,     0,     0,     0,   481, -1674,   482,  1159,  2697,     0,
4052:     1167, -1674,     0,  1167,     0,     0,   564,     0,     0,     0,
4053:      564,  1164,     0, -1674,     0,     0,     0,  1159,   483,    54,
4054:        0,   484,     0,     0,     0,     0,  1473, -1674,     0,  2202,
4055:    -1674,     0, -1674,     0,     0,     0,     0,     0,     0,     0,
4056:        0,     0,     0,     0, -1674,     0,  1159,     0,     0, -1674,
4057:        0,     0,  1474,  1159,     0,  1165,  1258,     0,     0, -1674,
4058:        0,     0,     0,  1091,     0,  2347,     0, -1674,     0,  1091,
4059:     1475,     0,  1159, -1674,  1476,     0,     0,     0, -1674,     0,
4060:        0,     0,     0,  1981, -1674,  1161,     0,     0,  1981,     0,
4061:        0,  1981,     0,     0, -1674,  1477,     0,     0,  1478,     0,
4062:        0,  1265,  1266,  1267,  1268,  1269,  1270,     0,     0,     0,
4063:        0,     0,  1479, -1674,     0,     0,     0,     0,     0,     0,
4064:        0,     0,  1258,     0,     0,  1161,     0,     0,     0,  2092,
4065:     1162,     0,     0, -1456,  2097,  2098,  2100,     0,     0,  1258,
4066:        0,  1161,     0,  1423,     0,     0, -1674,     0,   564,     0,
4067:        0,     0,     0,     0,  2114,  1237,     0,     0,  1449,     0,
4068:        0,  1161,     0,     0,   644,     0,     0,   644,  1258,     0,
4069:     1162,   494,   494,    54,   494,   644,     0,   564,  1091,     0,
4070:     1091,  1091,     0,     0,     0,  1167,  1162,     0,  1159,     0,
4071:     1161,     0,     0,     0,    54,     0,     0,  1161,     0,     0,
4072:        0,  1480,     0,     0,     0,     0,  1162,     0,     0,  1481,
4073:        0,     0, -1674,     0,     0,     0,  1161,     0,     0,     0,
4074:        0,  1166,     0,     0,     0, -1456,  1981,     0,     0, -1674,
4075:        0,     0,     0,     0,  1224,  1162,     0,     0,     0,     0,
4076:        0,     0,  1162,     0,     0, -1674,  1091,     0,     0,  1091,
4077:     1091,  1482,  1265,  1266,  1267,  1268,  1269,  1270, -1674,     0,
4078:        0,  1162,     0,  1164,     0,     0,     0,     0,     0,     0,
4079:        0,     0,     0,     0,     0,     0,     0, -1456,     0,     0,
4080:        0,     0,     0,     0,     0,     0,     0,    54,     0,     0,
4081:    -1456,     0,     0,     0,     0, -1456,  2215,  2216,  2217,     0,
4082:    -1456,     0,  1568,     0,     0,     0,     0,  1165,     0, -1456,
4083:        0, -1674, -1456,     0,  1159,     0,     0,     0,  1265,  1266,
4084:     1267,  1268,  1269,  1270,     0,     0,     0,     0, -1674,     0,
4085:        0,     0,  1161,     0,     0,  1265,  1266,  1267,  1268,  1269,
4086:     1270, -1456,     0,    54,     0,     0,   644,     0,     0,     0,
4087:        0,  2271,     0,     0,     0,     0,     0, -1674,     0,  1164,
4088:    -1456,     0,     0,     0,  1265,  1266,  1267,  1268,  1269,  1270,
4089:        0,     0,     0,     0,     0,     0,     0,  1162,     0,   564,
4090:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4091:        0,     0,     0,     0,     0,  1166,     0,     0,     0,     0,
4092:      564,     0,   564,  1165,     0,     0,     0,     0,     0, -1456,
4093:        0,  1696, -1456,  1701,     0,     0,  2368,     0, -1456,     0,
4094:        0,     0,     0,  1159,    54,     0,     0,     0,     0,     0,
4095:        0,     0,     0,     0,     0,     0,     0,  1461,     0,  1466,
4096:     1468,     0,     0,     0,     0,   564,     0,     0,     0,     0,
4097:        0,     0,     0,  1159,  1366,   494,     0,     0,  1161,     0,
4098:        0,     0,     0,     0,     0,   494,  1747,   494,  1751,     0,
4099:      494,     0,     0, -1456,     0,     0,   494,     0,   494,     0,
4100:        0,     0,     0,     0,  1164,     0,     0,     0,     0,   644,
4101:      494,     0,     0,     0,   644,   494,     0,     0,     0,   494,
4102:      494,   494,   494,  1162,   494,   494,     0,     0,     0,     0,
4103:        0,  1159,     0,     0,     0,     0,     0,     0,     0,     0,
4104:        0,  1159,     0,     0,   564,  1810,   893,  1974,  1165,     0,
4105:        0,     0,  2421,  2422,  2423,  2424,     0,  1822,     0,  1532,
4106:     1533,     0,     0,     0,     0,   894,     0,  1547,     0,  1548,
4107:     1549,     0,     0,     0, -1456,     0,     0,     0,     0,     0,
4108:        0,     0, -1456,     0,  1586,     0,  1587,  1161,     0,     0,
4109:        0,   804,   804,     0,     0,     0,     0,     0, -1456,     0,
4110:    -1456, -1456,     0,     0,     0,  1240,  1862,  1603,  1241,     0,
4111:        0,     0,     0,     0,     0,   895,  2294,  1161,     0,     0,
4112:        0,     0,     0,     0,  2295,  1164,     0,     0,     0,     0,
4113:        0,     0,  1162,     0,     0,     0,     0, -1456,  1247,     0,
4114:    -1456, -1456, -1456,     0,     0, -1674,     0,     0,     0,     0,
4115:        0,   950,   957,     0,     0,   728,  1159,  1164,  1898,     0,
4116:        0,     0,  1162,  1899,  1900,  1901,     0,  1166,     0,  1165,
4117:     1249,     0,     0,     0,     0,  1161,     0,     0,     0,     0,
4118:        0,  2296,     0,     0,     0,  1161,     0,     0,     0,     0,
4119:        0,     0,  1159,     0,     0,     0,     0,     0,     0,     0,
4120:        0,  1165,     0,   896,     0,     0,  1720,  1720,  1240,     0,
4121:        0,  1241,     0,     0,     0,     0,     0,  1229,     0,     0,
4122:     1162,     0,  1159,     0,     0,  1159,     0,     0,     0,     0,
4123:     1162,     0,     0,     0,     0,     0,     0,     0,     0,  2203,
4124:        0,  1247,     0,     0,     0,     0,     0,     0, -1674,     0,
4125:        0,  1568,   897,     0,     0,     0,     0,     0,  1091,   950,
4126:      898,     0,     0,  1166,     0,     0,     0,     0,  1091, -1674,
4127:        0,  1091,   899,  1249,  2297,     0,  1180,     0,     0,     0,
4128:        0,     0,     0, -1674,   564,     0,     0,     0, -1674,     0,
4129:        0,  1990,     0,     0,     0,     0,     0,     0,     0,     0,
4130:     1161,     0,     0,   900,  1202,  1990,     0,     0,     0,  2008,
4131:        0,     0,  2011,     0,  1701,     0,     0,     0,     0,     0,
4132:        0,     0,     0, -1674,  1219,  1220,  1221,     0,     0,  1225,
4133:        0,     0,     0,  2623,     0,     0,  1161,     0,     0,     0,
4134:        0,     0,  2415,  1091,     0,  1162,     0,     0,   902,     0,
4135:        0,     0,  1280,     0,     0,     0,  1091,     0,     0, -1674,
4136:     1423,     0,     0,     0,     0,     0,  1161,     0,     0,  1161,
4137:      903,     0, -1674,     0,     0,     0,     0,     0,  1258,     0,
4138:     1865,  1162,     0,     0,  2659,     0, -1674,     0,  1166,     0,
4139:      905, -1674,  2298,     0,     0,  2299,     0,     0,     0,     0,
4140:        0,  1321,     0,     0,     0,  1333,  1338,  1159,     0,     0,
4141:        0,  1162,     0,     0,  1162,     0,     0,  1492,  1493,     0,
4142:     1423,     0,     0,     0,     0,   564, -1674,     0,  1904,  1423,
4143:      564,   564,   564,     0,     0,     0,     0,     0,     0,     0,
4144:        0,     0,     0,   494,     0,     0,     0,  2706,     0,     0,
4145:      564,     0,     0,     0,   644,     0,     0,     0,     0,   950,
4146:     1164,     0,     0,     0,     0,     0,   950,     0, -1674,     0,
4147:     1423,  1423,     0,     0,     0,     0,     0,     0,     0,     0,
4148:     2728,  1258,     0,     0,     0,     0,     0,   950,     0,     0,
4149:        0,  1494,  1495,     0,     0,     0,  1374,     0,     0,     0,
4150:     1164,     0,     0,     0,  1165,     0,     0,     0,  1568,  1166,
4151:        0,     0,     0,     0,     0,     0,  1164,     0,     0,     0,
4152:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4153:        0,     0,     0,     0,     0,     0,  1164,     0,     0,     0,
4154:        0,  1166,     0,     0,  1165,     0,     0,     0,     0,     0,
4155:     1995,  1161,     0,  1496,  1497,  1498,  1499,  1500,  1501,     0,
4156:     1165,  1502,  1503,     0,     0,  1164,     0, -1674,     0,     0,
4157:        0, -1674,  1164,     0,  1265,  1266,  1267,  1268,  1269,  1270,
4158:     1165,  2025,  2025,     0,  2210,     0,     0,     0,     0,     0,
4159:        0,  1164,   564,   564,   564,   466,  1162,  1990,  2227,   950,
4160:        0,     0,  2227,  2241,     0,     0,     0,     0,     0,  1165,
4161:        0,     0,     0,     0,     0,  1535,  1165,   535,     0,     0,
4162:     1905,  1906,  1907,     0,  1908,  1909,  1910,  1911,  1912,  1913,
4163:        0,  1701,     0,     0,     0,  1165,     0,     0,     0,     0,
4164:        0,     0,     0,     0,     0,     0,     0,   564,     0,   494,
4165:        0,     0,     0,  1423,  1366,  1423,     0,  1449,     0,     0,
4166:        0,     0,     0,     0,     0,  1504,  1505,     0,     0,     0,
4167:    -1674,     0,     0,   494,     0,  2306,     0,  1265,  1266,  1267,
4168:     1268,  1269,  1270,     0,     0,     0,     0,     0,   494,   494,
4169:      494,   494,   494,   494,   494,   494,   494,   494,     0,     0,
4170:        0,     0,     0,     0,     0,     0,     0,  1164,     0,     0,
4171:        0,     0,   564,     0,     0,     0,     0,     0,     0,  1366,
4172:     1492,  1493,     0,  1529,     0,     0,     0,     0,     0,     0,
4173:     1449,     0,     0,   564,     0,  2134,  2136,     0,     0,     0,
4174:     1423,     0,     0,     0,  1552,     0,     0,  1569,     0,  2392,
4175:     1581,  1165,     0,     0,     0,     0,     0,  1588,  1593,  1596,
4176:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4177:        0,     0,     0,     0,     0,  1506,  1507,  1604,     0,     0,
4178:        0,     0,     0,  1608,  1609,  1610,  1611,     0,     0,     0,
4179:        0,  1620,  1621,     0,  1494,  1495,  1632,     0,     0,     0,
4180:     1635,     0,     0,  1643,  1644,  1645,  1646,  1647,  1648,  1649,
4181:     1650,  1651,     0,     0,  1652,     0,     0,     0,     0,  1660,
4182:        0,     0,  1664,     0,   804,  2420,   950,     0,   564,   564,
4183:      564,   564,     0,  1164,     0,  2227,  2241,     0,  2227,     0,
4184:        0,  2429,     0,     0,  1166,  1990,     0,     0,  1685,  1990,
4185:        0,     0,     0,     0,     0,  2447,  1496,  1497,  1498,  1499,
4186:     1500,  1501,     0,     0,  1502,  1503,     0,     0,     0,     0,
4187:        0,     0,     0,     0,  2008,  1220,  1221,  1165,     0,  1701,
4188:        0,     0,     0,  1568,  1166,     0,     0,     0,     0,     0,
4189:        0,  1366,     0,     0,     0,     0,     0,     0,     0,     0,
4190:     1166,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4191:        0,     0,     0,     0,     0,     0,  2509,     0,     0,     0,
4192:     1166,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4193:        0,     0,   880,     0,     0,     0,     0,     0,   881,     0,
4194:        0,  1091,  1164,     0,     0,   893,     0,     0,     0,  1166,
4195:        0,     0,     0,     0,   950,     0,  1166,  1796,  1797,     0,
4196:     1798,     0,     0,     0,   894,     0,     0,     0,  1504,  1505,
4197:        0,     0,  1164,     0,     0,  1166,     0,     0,     0,     0,
4198:        0,     0,  1423,     0,     0,     0,  1165,  1831,  1822,     0,
4199:        0,     0,     0,     0,     0,     0,     0,     0,     0,  2544,
4200:        0,     0,  2390,     0,     0,     0,     0,     0,     0,     0,
4201:        0,     0,     0,     0,   895,     0,  1165,     0,     0,     0,
4202:        0,     0,     0,     0,     0,     0,     0,   950, -1470,     0,
4203:     1164,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4204:     1164,     0,     0,   882,   466,  2227,     0,     0,  2572,     0,
4205:        0,   494,     0,  1990,     0,     0,     0,     0,  1990,     0,
4206:        0,  1990,     0,  2583,     0,     0,  2586,  1874,     0,     0,
4207:        0,     0,  1880,     0,  1165,     0,     0,     0,  1506,  1507,
4208:     2602,     0,     0,     0,  1165,  1273,     0,     0,     0,     0,
4209:        0,  1166,     0,     0,     0,     0,     0,     0,     0,     0,
4210:      644,   494,   896,     0,     0,     0,     0,     0,     0,   564,
4211:        0,     0,     0,     0,  1897,     0,     0,     0,     0,     0,
4212:    -1470,     0,     0,     0,  1273,     0,     0,     0,     0,     0,
4213:     1593,     0,  1593,  1593,     0,   494,   494,     0,     0,     0,
4214:     1936,     0,     0,  1938,     0,  1366,     0,     0,   494,     0,
4215:        0,   897,     0,     0,     0,  1164,     0,     0,     0,   898,
4216:      564,     0,     0,  2602,     0,  1091,     0,     0,     0,     0,
4217:     1091,   899, -1470,     0,     0,     0,     0,  1956,     0,     0,
4218:     1959,     0,  1961,   494,     0, -1470,     0,     0,     0,     0,
4219:    -1470,  1164,   883,     0,     0, -1470,  1990,     0,     0,  1165,
4220:        0,  2586,   900,     0, -1470,     0,     0, -1470,     0,     0,
4221:     2692,     0,  1466,  1468,   494,     0,     0,  1166,     0,     0,
4222:        0,  1164,     0,   564,  1164,     0,     0,     0,     0,     0,
4223:        0,  1273,     0,     0,     0,  1165, -1470,     0,  1273,     0,
4224:        0,     0,   901,  1321,     0,   644,   885,   902,     0,     0,
4225:        0,     0,     0,     0,     0, -1470,   564,     0,  1338,     0,
4226:        0,     0,     0,     0,     0,  1165,     0,     0,  1165,   903,
4227:        0,     0,     0,     0,     0,   904,  2033,     0,     0,     0,
4228:        0,     0,     0,     0,   466,     0,     0,     0,     0,   905,
4229:        0,     0,     0,  2746,     0,     0,     0,   494,     0,     0,
4230:        0,  2583,     0,     0, -1470,     0,     0, -1470,     0,     0,
4231:        0,     0,     0, -1470,     0,     0,     0,  2602,   644,   644,
4232:      644,     0,     0,     0,     0,     0,  1166,     0,     0,     0,
4233:        0,     0,     0,     0,   950,     0,     0,     0,     0,     0,
4234:        0,   887,     0,     0,     0,     0,     0,     0,     0,     0,
4235:        0,     0,   880,     0,     0,     0,  1166,     0,   881,     0,
4236:        0,  2583,     0,     0,     0,   893,     0,     0, -1470,     0,
4237:     2692,     0,  2572,     0,     0,     0,     0,     0,  1466,  1468,
4238:        0,  1701,     0,     0,   894,     0,     0,     0,     0,  1091,
4239:        0,     0,     0,     0,     0,  1366,     0,     0,     0,     0,
4240:        0,  2602,     0,     0,     0,     0,  1164,     0,     0,     0,
4241:        0,     0,     0,     0,  1166,     0,  2147,     0,     0,   644,
4242:        0,     0,  1974,     0,  1166,     0,  2151,     0,     0,     0,
4243:     2152,     0,     0,  2154,   895,     0,     0,     0,     0,     0,
4244:        0,     0,     0,     0,     0,     0,     0,     0,     0, -1470,
4245:     1165,     0,     0,     0,     0,     0,     0, -1470,     0,  2174,
4246:     2175,  1273,     0,   882,     0,     0,     0,     0,     0,     0,
4247:        0,     0,     0, -1470,     0, -1470, -1470,     0,     0,     0,
4248:        0,     0,  2188,  1273,     0,  2191,     0,  2193,  1576,     0,
4249:        0,     0,     0,     0,     0,  2197,     0,     0,     0,     0,
4250:     1273,  1273,  1273,  2204,  2205,     0,  1273,     0,     0,     0,
4251:        0,     0, -1470,     0,     0, -1470, -1470, -1470,     0,     0,
4252:        0,     0,   896,     0,     0,     0,     0,     0,     0,     0,
4253:        0,     0,  2245,     0,     0,     0,     0,     0,     0,  1166,
4254:        0,  2252,     0,     0,     0,     0,     0,     0,     0,     0,
4255:        0,     0,     0,     0,     0,     0,     0,  2265,     0,     0,
4256:        0,  1273,     0,     0,     0,     0,     0,     0,     0,     0,
4257:        0,   897,     0,  1240,     0,  1166,  1241,     0,   -38,   898,
4258:        0,  1242,  1243,  1244,     0,     0,     0,     0,     0,     0,
4259:        0,   899,     0,     0,     0,     0,     0,     1,  1245,     0,
4260:        0,     0,  1273,     0,     0,  1166,  1247,     2,  1166,     3,
4261:        4,     0,   883,  1248,  1273,  1239,     0,     0,     0,  1273,
4262:     1240,     0,   900,  1241,     0,     5,     0,     0,  1242,  1243,
4263:     1244,     0,     0,     0,     6,     0,     0,     0,  1249,     0,
4264:     1091,     0,     0,     0,     0,  1245,     7,     0,  1246,     0,
4265:        0,     0,     0,  1247,     0,     0,     0,     8,     0,     0,
4266:     1248,     0,  1767,     0,     0,     0,   885,   902,     9,     0,
4267:       10,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4268:        0,     0,     0,     0,     0,  1249,     0,  2395,    11,   903,
4269:        0,     0,     0,     0,     0,  1768,     0,     0,     0,     0,
4270:        0,     0,    12,     0,     0,     0,     0,     0,     0,   905,
4271:        0,     0,    13,     0,     0,     0,     0,     0,    14,     0,
4272:        0,     0,     0,     0,     0,     0,    15,     0,    16,    17,
4273:     2405,  2406,     0,     0,     0,  2407,     0,  1250,     0,     0,
4274:     2410,    18,     0,  2413,  2414,     0,     0,     0,  2418,     0,
4275:        0,  1251,     0,     0,     0,     0,  1252,     0,     0,     0,
4276:        0,   887,     0,     0,     0,     0,     0,     0,    19,     0,
4277:        0,     0,     0,     0,     0,     0,     0,  1253,  1254,     0,
4278:        0,     0,     0,     0,  1250,     0,     0,     0,     0,     0,
4279:     1166,  1255,     0,     0,   804,     0,     0,     0,  1251,     0,
4280:        0,     0,     0,  1252,     0,     0,     0,    20,     0,     0,
4281:     1273,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4282:        0,     0,     0,     0,  1253,  1254,     0,     0,     0,  1256,
4283:        0,     0,  1257,  1273,     0,     0,  2503,     0,  1255,     0,
4284:        0,     0,     0,     0,     0,     0,  1258,     0,     0,  1259,
4285:     1273,     0,  1576,  1576,     0,  1914,     0,  1576,     0,     0,
4286:        0,     0,  1273,     0,     0,     0,     0,     0,     0,  1273,
4287:        0,     0,     0,     0,  1273,     0,  1256,  1273,     0,  1257,
4288:        0,     0,     0,     0,    21,  1273,     0,    22,     0,  1273,
4289:     1273,  1273,  1273,  1258,     0,     0,  1259,     0,  1576,  1576,
4290:        0,  1273,  1273,     0,     0,     0,     0,     0,     0,     0,
4291:        0,     0,     0,  1273,     0,    23,  1273,     0,     0,     0,
4292:        0,     0,     0,    24,  1273,  1273,  1273,  1273,  1273,  1273,
4293:     1273,  1273,  1273,  1273,     0,     0,  1260,    25,     0,     0,
4294:        0,  1273,     0,     0,    26,  1273,     0,     0,    27,     0,
4295:        0,     0,  2556,  2557,     0,     0,  2558,     0,    28,     0,
4296:        0,     0,     0,     0,     0,     0,  1273,     0,     0,     0,
4297:        0,     0,    29,     0,     0,     0,     0,     0,     0,     0,
4298:        0,     0,     0,  1260,     0,     0,     0,     0,     0,     0,
4299:        0,     0,  2591,  2592,     0,     0,     0,     0,     0,     0,
4300:        0,     0,     0,     0,     0,     0,  2604,     0,    30,     0,
4301:        0,     0,     0,    31,     0,     0,     0,     0,     0,     0,
4302:        0,     0,     0,     0,     0,     0,    32,     0,     0,     0,
4303:        0,     0,     0,     0,     0,  1261,     0,     0,  1262,  1263,
4304:     1264,     0,  1265,  1266,  1267,  1268,  1269,  1270,  1240,     0,
4305:       33,  1241,     0,     0,     0,  1889,  1242,  1243,  1244,     0,
4306:        0,     0,     0,     0,    34,     0,     0,   -38,     0,     0,
4307:        0,     0,     0,  1245,     0,     0,     0,  1273,  1273,  1273,
4308:        0,  1247,  1261,     0,     0,  1262,  1263,  1264,  1248,  1265,
4309:     1266,  1267,  1268,  1269,  1270,     0,     0,     0,     0,     0,
4310:        0,  1240,     0,     0,  1241,     0,     0,     0,     0,  1242,
4311:     1243,  1244,  1273,  1249,     0,     0,  2679,     0,     0,     0,
4312:        0,     0,     0,     0,     0,     0,  1245,     0,  1225,     0,
4313:        0,     0,     0,     0,  1247,     0,     0,     0,     0,  2698,
4314:        0,  1248,     0,     0,     0,     0,     0,     0,     0,     0,
4315:        0,     0,     0,     0,  2712,  1273,     0,     0,     0,     0,
4316:        0,  1273,     0,     0,     0,     0,  1249,     0,     0,     0,
4317:        0,     0,     0,     0,     0,     0,  1914,  1914,  1273,     0,
4318:     1576,  1576,  1576,  1576,     0,     0,  1576,  1576,  1576,  1576,
4319:     1576,  1576,  1576,  1576,  1576,  1576,  1914,     0,     0,     0,
4320:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4321:        0,     0,  1250,     0,     0,     0,     0,  1273,     0,  1273,
4322:        0,     0,     0,  1914,  1914,     0,  1251,     0,     0,     0,
4323:     2591,  1252,     0,     0,     0,     0,     0,  1273,  1576,  1576,
4324:     1273,     0,  1273,     0,     0,     0,     0,     0,     0,     0,
4325:        0,     0,  1253,  1254,     0,     0,     0,     0,     0,     0,
4326:        0,  2775,     0,     0,     0,  1250,  1255,     0,     0,     0,
4327:        0,     0,     0,     0,     0,     0,     0,     0,     0,  1251,
4328:     2789,  2789,     0,     0,  1252,     0,     0,     0,     0,     0,
4329:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4330:        0,     0,     0,     0,  1256,  1253,  1254,  1257,     0,     0,
4331:        0,     0,     0,     0,  1273,     0,     0,     0,     0,  1255,
4332:        0,  1258,     0,     0,  1259,     0,  1240,  2789,     0,  1241,
4333:        0,     0,     0,     0,  1242,  1243,  1244,     0,     0,     0,
4334:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4335:        0,  1245,     0,     0,     0,     0,     0,  1256,     0,  1247,
4336:     1257,     0,     0,     0,     0,     0,  1248,     0,     0,     0,
4337:        0,     0,     0,     0,  1258,     0,     0,  1259,     0,     0,
4338:        0,     0,     0,     0,     0,     0,     0,     0,     0,  2789,
4339:        0,  1249,     0,     0,     0,     0,     0,     0,     0,     0,
4340:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4341:        0,  1260,     0,     0,     0,     0,     0,     0,     0,     0,
4342:        0,     0,     0,     0,     0,     0,     0,     0,  1273,     0,
4343:        0,     0,  1273,  1273,     0,  1273,     0,     0,  1914,  1914,
4344:     1914,  1914,     0,     0,     0,  1914,  1914,  1914,  1914,  1914,
4345:     1914,  1914,  1914,  1914,  1914,  1273,  1273,     0,     0,     0,
4346:        0,     0,     0,     0,  1260,     0,     0,     0,     0,  1273,
4347:        0,     0,  1273,     0,  1273,     0,     0,     0,  1273,     0,
4348:        0,  1914,  1914,     0,     0,  1273,  1273,     0,     0,     0,
4349:     1250,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4350:        0,     0,     0,     0,  1251,     0,     0,     0,     0,  1252,
4351:     1261,     0,     0,  1262,  1263,  1264,     0,  1265,  1266,  1267,
4352:     1268,  1269,  1270,     0,     0,     0,  1273,  1598,     0,     0,
4353:     1253,  1254,     0,  1273,     0,     0,     0,     0,     0,     0,
4354:        0,     0,     0,     0,  1255,     0,  1273,     0,     0,     0,
4355:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4356:        0,     0,     0,  1261,     0,     0,  1262,  1263,  1264,     0,
4357:     1265,  1266,  1267,  1268,  1269,  1270,     0,     0,     0,     0,
4358:     1940,     0,  1256,     0,     0,  1257,     0,     0,     0,     0,
4359:        0,     0,     0,     0,     0,     0,     0,     0,     0,  1258,
4360:        0,     0,  1259,     0,     0,     0,     0,     0,     0,     0,
4361:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4362:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4363:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4364:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4365:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4366:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4367:        0,     0,     0,     0,     0,     0,  1273,     0,     0,     0,
4368:     1576,     0,     0,     0,     0,     0,  1273,  1273,  1273,  1260,
4369:        0,  1273,     0,     0,  1273,  1273,     0,     0,     0,  1273,
4370:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4371:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4372:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4373:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4374:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4375:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4376:        0,     0,     0,     0,     0,     0,  1576,     0,     0,     0,
4377:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4378:        0,     0,     0,     0,  1273,     0,     0,     0,  1261,     0,
4379:        0,  1262,  1263,  1264,     0,  1265,  1266,  1267,  1268,  1269,
4380:     1270,     0,     0,     0,     0,  2150,     0,     0,     0,     0,
4381:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4382:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4383:        0,     0,  1914,  1576,     0,     0,     0,  1273,  1273,  1273,
4384:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4385:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4386:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4387:        0,     0,  1273,  1273,     0,     0,     0,     0,     0,     0,
4388:        0,     0,     0,     0,     0,  1273,     0,     0,     0,     0,
4389:        0,     0,     0,     0,     0,     0,     0,  1914,     0,     0,
4390:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4391:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4392:        0,     0,     0,     0,     0,     0,     0,     0,     0,   917,
4393:      725,   535,   726,   727,   728,   729,   730,     0,     0,     0,
4394:        0,     0,  1914,     0,     0,    90,    91,    92,    93,    94,
4395:       95,    96,    97,   918,    98,    99,   100,     0,     0,     0,
4396:     1273,   731,     0,     0,   101,   102,     0,   103,   104,   105,
4397:      919,   107,   108,   109,   110,   732,   920,   733,   734,  1273,
4398:      115,   116,   117,   118,   119,   120,   735,   736,   121,   122,
4399:      737,   738,   125,  1273,   126,   127,   128,   129,   739,     0,
4400:      921,     0,   132,   133,   134,   135,   136,   922,   138,   139,
4401:      140,     0,   141,   142,   143,   144,   145,   146,     0,   923,
4402:      148,   149,   150,   741,   742,   743,   924,   745,   746,   747,
4403:      152,   153,   154,   155,   156,   157,   158,   748,   749,   161,
4404:      750,   162,     0,   163,   164,   165,   166,   167,   168,     0,
4405:      169,   170,   171,   172,   173,   925,  1273,   174,   175,   751,
4406:      177,   178,     0,   179,   180,   181,     0,   182,   183,   184,
4407:     1273,   185,   186,   187,   188,   752,   190,   191,   192,   193,
4408:      753,   754,   195,     0,   196,   197,   755,   199,     0,   200,
4409:        0,   201,   926,     0,   927,   204,   205,   206,   928,   208,
4410:        0,   209,     0,   210,   211,     0,   212,   213,   214,   215,
4411:      216,   217,   929,   219,   220,   221,   222,     0,   223,   224,
4412:      225,   226,   227,   228,     0,   229,   930,   231,   232,   233,
4413:      234,   235,   756,   757,     0,   758,     0,   239,   931,   932,
4414:      242,   933,   244,   245,   246,   247,   248,     0,     0,   249,
4415:      934,   251,   935,     0,   253,   254,   255,   759,   760,   256,
4416:      257,   258,   259,   260,   936,   262,   263,   264,   265,   266,
4417:      267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
4418:      277,   278,   279,   761,   937,   762,   283,   284,   285,   286,
4419:      763,   287,   288,   938,   290,   764,   765,   292,   766,   294,
4420:      295,   296,     0,   297,   298,     0,     0,   767,   300,   301,
4421:        0,     0,   302,   303,   939,   305,   940,   768,   308,   309,
4422:      310,   311,   312,   313,   314,   315,   316,   317,     0,   318,
4423:      319,   769,   321,   322,   323,   324,   325,   326,     0,   327,
4424:      328,   329,   330,   331,   332,   333,   334,   335,   770,   337,
4425:      338,   339,   340,     0,   341,   342,   343,   344,   345,   346,
4426:      347,   348,   349,   350,   351,   352,     0,   353,   354,   941,
4427:      356,   357,   358,   771,   360,   361,   362,   363,   364,   365,
4428:      366,   367,   368,   369,   370,     0,   371,   372,   373,   374,
4429:      375,   772,   376,   377,   378,   379,   380,   942,   382,   383,
4430:      773,   385,     0,   386,   387,   388,   389,   390,   391,   392,
4431:      393,   394,   395,   396,   943,   398,   774,     0,   400,   401,
4432:        0,   402,   944,   404,   405,   406,   407,   408,     0,   775,
4433:      776,     0,     0,   411,   412,   777,   414,   778,   779,   416,
4434:      417,   945,   419,   420,   421,   422,   423,     0,     0,   424,
4435:      425,   426,   427,   428,   781,     0,   429,   430,   431,   432,
4436:      433,   434,   782,   946,   436,   947,   438,   439,   440,   441,
4437:        0,     0,   442,     0,     0,   443,   444,   445,   446,   447,
4438:      448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
4439:      458,   459,   460,   461,   462,   463,   783,     0,     0,     0,
4440:        0,     0,     0,   784,   785,   948,     0,     0,     0,     0,
4441:      787,     0,   788,   949,     0,     0,     0,   789,     0,   790,
4442:      791,    89,   725,   535,   726,   727,   728,   729,   730,     0,
4443:        0,     0,     0,     0,     0,     0,     0,    90,    91,    92,
4444:       93,    94,    95,    96,    97,     0,    98,    99,   100,     0,
4445:        0,     0,     0,   731,     0,     0,   101,   102,     0,   103,
4446:      104,   105,   106,   107,   108,   109,   110,   732,   112,   733,
4447:      734,     0,   115,   116,   117,   118,   119,   120,   735,   736,
4448:      121,   122,   737,   738,   125,     0,   126,   127,   128,   129,
4449:      739,     0,   740,     0,   132,   133,   134,   135,   136,   137,
4450:      138,   139,   140,     0,   141,   142,   143,   144,   145,   146,
4451:        0,   147,   148,   149,   150,   741,   742,   743,   744,   745,
4452:      746,   747,   152,   153,   154,   155,   156,   157,   158,   748,
4453:      749,   161,   750,   162,     0,   163,   164,   165,   166,   167,
4454:      168,     0,   169,   170,   171,   172,   173,     0,     0,   174,
4455:      175,   751,   177,   178,     0,   179,   180,   181,     0,   182,
4456:      183,   184,     0,   185,   186,   187,   188,   752,   190,   191,
4457:      192,   193,   753,   754,   195,     0,   196,   197,   755,   199,
4458:        0,   200,     0,   201,   202,     0,   203,   204,   205,   206,
4459:      207,   208,     0,   209,     0,   210,   211,     0,   212,   213,
4460:      214,   215,   216,   217,   218,   219,   220,   221,   222,     0,
4461:      223,   224,   225,   226,   227,   228,     0,   229,   230,   231,
4462:      232,   233,   234,   235,   756,   757,     0,   758,     0,   239,
4463:      240,   241,   242,   243,   244,   245,   246,   247,   248,     0,
4464:        0,   249,   250,   251,   252,     0,   253,   254,   255,   759,
4465:      760,   256,   257,   258,   259,   260,   261,   262,   263,   264,
4466:      265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
4467:      275,   276,   277,   278,   279,   761,   281,   762,   283,   284,
4468:      285,   286,   763,   287,   288,   289,   290,   764,   765,   292,
4469:      766,   294,   295,   296,     0,   297,   298,     0,     0,   767,
4470:      300,   301,     0,     0,   302,   303,   304,   305,   306,   768,
4471:      308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
4472:        0,   318,   319,   769,   321,   322,   323,   324,   325,   326,
4473:        0,   327,   328,   329,   330,   331,   332,   333,   334,   335,
4474:      770,   337,   338,   339,   340,     0,   341,   342,   343,   344,
4475:      345,   346,   347,   348,   349,   350,   351,   352,     0,   353,
4476:      354,   355,   356,   357,   358,   771,   360,   361,   362,   363,
4477:      364,   365,   366,   367,   368,   369,   370,    25,   371,   372,
4478:      373,   374,   375,   772,   376,   377,   378,   379,   380,   381,
4479:      382,   383,   773,   385,     0,   386,   387,   388,   389,   390,
4480:      391,   392,   393,   394,   395,   396,   397,   398,   774,     0,
4481:      400,   401,    29,   402,   403,   404,   405,   406,   407,   408,
4482:        0,   775,   776,     0,     0,   411,   412,   777,   414,   778,
4483:      779,   416,   417,   780,   419,   420,   421,   422,   423,     0,
4484:        0,   424,   425,   426,   427,   428,   781,     0,   429,   430,
4485:      431,   432,   433,   598,   782,     0,   436,   437,   438,   439,
4486:      440,   441,     0,     0,   442,     0,    32,   443,   444,   445,
4487:      446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
4488:      456,   457,   458,   459,   460,   461,   462,   463,   783,     0,
4489:       33,     0,     0,     0,     0,   784,   785,     0,     0,     0,
4490:        0,     0,   787,     0,   788,  2688,     0,     0,     0,   789,
4491:        0,   790,   791,    89,   725,   535,   726,   727,   728,   729,
4492:      730,     0,     0,     0,     0,     0,     0,     0,     0,    90,
4493:       91,    92,    93,    94,    95,    96,    97,     0,    98,    99,
4494:      100,     0,     0,     0,     0,   731,     0,     0,   101,   102,
4495:        0,   103,   104,   105,   106,   107,   108,   109,   110,   732,
4496:      112,   733,   734,     0,   115,   116,   117,   118,   119,   120,
4497:      735,   736,   121,   122,   737,   738,   125,     0,   126,   127,
4498:      128,   129,   739,     0,   740,     0,   132,   133,   134,   135,
4499:      136,   137,   138,   139,   140,     0,   141,   142,   143,   144,
4500:      145,   146,     0,   147,   148,   149,   150,   741,   742,   743,
4501:      744,   745,   746,   747,   152,   153,   154,   155,   156,   157,
4502:      158,   748,   749,   161,   750,   162,     0,   163,   164,   165,
4503:      166,   167,   168,     0,   169,   170,   171,   172,   173,     0,
4504:        0,   174,   175,   751,   177,   178,     0,   179,   180,   181,
4505:        0,   182,   183,   184,     0,   185,   186,   187,   188,   752,
4506:      190,   191,   192,   193,   753,   754,   195,     0,   196,   197,
4507:      755,   199,     0,   200,     0,   201,   202,     0,   203,   204,
4508:      205,   206,   207,   208,     0,   209,     0,   210,   211,     0,
4509:      212,   213,   214,   215,   216,   217,   218,   219,   220,   221,
4510:      222,     0,   223,   224,   225,   226,   227,   228,     0,   229,
4511:      230,   231,   232,   233,   234,   235,   756,   757,     0,   758,
4512:        0,   239,   240,   241,   242,   243,   244,   245,   246,   247,
4513:      248,     0,     0,   249,   250,   251,   252,     0,   253,   254,
4514:      255,   759,   760,   256,   257,   258,   259,   260,   261,   262,
4515:      263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
4516:      273,   274,   275,   276,   277,   278,   279,   761,   281,   762,
4517:      283,   284,   285,   286,   763,   287,   288,   289,   290,   764,
4518:      765,   292,   766,   294,   295,   296,     0,   297,   298,     0,
4519:        0,   767,   300,   301,     0,     0,   302,   303,   304,   305,
4520:      306,   768,   308,   309,   310,   311,   312,   313,   314,   315,
4521:      316,   317,     0,   318,   319,   769,   321,   322,   323,   324,
4522:      325,   326,     0,   327,   328,   329,   330,   331,   332,   333,
4523:      334,   335,   770,   337,   338,   339,   340,     0,   341,   342,
4524:      343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
4525:        0,   353,   354,   355,   356,   357,   358,   771,   360,   361,
4526:      362,   363,   364,   365,   366,   367,   368,   369,   370,    25,
4527:      371,   372,   373,   374,   375,   772,   376,   377,   378,   379,
4528:      380,   381,   382,   383,   773,   385,     0,   386,   387,   388,
4529:      389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
4530:      774,     0,   400,   401,    29,   402,   403,   404,   405,   406,
4531:      407,   408,     0,   775,   776,     0,     0,   411,   412,   777,
4532:      414,   778,   779,   416,   417,   780,   419,   420,   421,   422,
4533:      423,     0,     0,   424,   425,   426,   427,   428,   781,     0,
4534:      429,   430,   431,   432,   433,   598,   782,     0,   436,   437,
4535:      438,   439,   440,   441,     0,     0,   442,     0,    32,   443,
4536:      444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
4537:      454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
4538:      783,     0,    33,     0,     0,     0,     0,   784,   785,     0,
4539:        0,     0,     0,     0,   787,     0,   788,     0,     0,     0,
4540:        0,   789,     0,   790,   791,    89,   725,   535,   726,   727,
4541:      728,   729,   730,     0,     0,     0,     0,     0,     0,     0,
4542:        0,    90,    91,    92,    93,    94,    95,    96,    97,     0,
4543:       98,    99,   100,     0,     0,     0,     0,   731,     0,     0,
4544:      101,   102,     0,   103,   104,   105,   106,   107,   108,   109,
4545:      110,   732,   112,   733,   734,  1589,   115,   116,   117,   118,
4546:      119,   120,   735,   736,   121,   122,   737,   738,   125,     0,
4547:      126,   127,   128,   129,   739,     0,   740,     0,   132,   133,
4548:      134,   135,   136,   137,   138,   139,   140,     0,   141,   142,
4549:      143,   144,   145,   146,     0,   147,   148,   149,   150,   741,
4550:      742,   743,   744,   745,   746,   747,   152,   153,   154,   155,
4551:      156,   157,   158,   748,   749,   161,   750,   162,     0,   163,
4552:      164,   165,   166,   167,   168,     0,   169,   170,   171,   172,
4553:      173,     0,     0,   174,   175,   751,   177,   178,     0,   179,
4554:      180,   181,     0,   182,   183,   184,     0,   185,   186,   187,
4555:      188,   752,   190,   191,   192,   193,   753,   754,   195,     0,
4556:      196,   197,   755,   199,     0,   200,     0,   201,   202,  1590,
4557:      203,   204,   205,   206,   207,   208,     0,   209,     0,   210,
4558:      211,     0,   212,   213,   214,   215,   216,   217,   218,   219,
4559:      220,   221,   222,     0,   223,   224,   225,   226,   227,   228,
4560:        0,   229,   230,   231,   232,   233,   234,   235,   756,   757,
4561:        0,   758,     0,   239,   240,   241,   242,   243,   244,   245,
4562:      246,   247,   248,     0,  1591,   249,   250,   251,   252,     0,
4563:      253,   254,   255,   759,   760,   256,   257,   258,   259,   260,
4564:      261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
4565:      271,   272,   273,   274,   275,   276,   277,   278,   279,   761,
4566:      281,   762,   283,   284,   285,   286,   763,   287,   288,   289,
4567:      290,   764,   765,   292,   766,   294,   295,   296,     0,   297,
4568:      298,     0,     0,   767,   300,   301,     0,     0,   302,   303,
4569:      304,   305,   306,   768,   308,   309,   310,   311,   312,   313,
4570:      314,   315,   316,   317,     0,   318,   319,   769,   321,   322,
4571:      323,   324,   325,   326,     0,   327,   328,   329,   330,   331,
4572:      332,   333,   334,   335,   770,   337,   338,   339,   340,     0,
4573:      341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
4574:      351,   352,     0,   353,   354,   355,   356,   357,   358,   771,
4575:      360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
4576:      370,     0,   371,   372,   373,   374,   375,   772,   376,   377,
4577:      378,   379,   380,   381,   382,   383,   773,   385,     0,   386,
4578:      387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
4579:      397,   398,   774,     0,   400,   401,     0,   402,   403,   404,
4580:      405,   406,   407,   408,     0,   775,   776,     0,  1592,   411,
4581:      412,   777,   414,   778,   779,   416,   417,   780,   419,   420,
4582:      421,   422,   423,     0,     0,   424,   425,   426,   427,   428,
4583:      781,     0,   429,   430,   431,   432,   433,   434,   782,     0,
4584:      436,   437,   438,   439,   440,   441,     0,     0,   442,     0,
4585:        0,   443,   444,   445,   446,   447,   448,   449,   450,   451,
4586:      452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
4587:      462,   463,   783,     0,     0,     0,     0,     0,     0,   784,
4588:      785,     0,     0,     0,     0,     0,   787,     0,   788,     0,
4589:        0,     0,     0,   789,     0,   790,   791,    89,   725,   535,
4590:      726,   727,   728,   729,   730,     0,     0,     0,     0,     0,
4591:        0,     0,     0,    90,    91,    92,    93,    94,    95,    96,
4592:       97,     0,    98,    99,   100,     0,     0,     0,     0,   731,
4593:        0,     0,   101,   102,     0,   103,   104,   105,   106,   107,
4594:      108,   109,   110,   732,   112,   733,   734,     0,   115,   116,
4595:      117,   118,   119,   120,   735,   736,   121,   122,   737,   738,
4596:      125,     0,   126,   127,   128,   129,   739,     0,   740,     0,
4597:      132,   133,   134,   135,   136,   137,   138,   139,   140,     0,
4598:      141,   142,   143,   144,   145,   146,     0,   147,   148,   149,
4599:      150,   741,   742,   743,   744,   745,   746,   747,   152,   153,
4600:      154,   155,   156,   157,   158,   748,   749,   161,   750,   162,
4601:        0,   163,   164,   165,   166,   167,   168,     0,   169,   170,
4602:      171,   172,   173,     0,     0,   174,   175,   751,   177,   178,
4603:        0,   179,   180,   181,     0,   182,   183,   184,     0,   185,
4604:      186,   187,   188,   752,   190,   191,   192,   193,   753,   754,
4605:      195,     0,   196,   197,   755,   199,     0,   200,     0,   201,
4606:      202,     0,   203,   204,   205,   206,   207,   208,     0,   209,
4607:        0,   210,   211,     0,   212,   213,   214,   215,   216,   217,
4608:      218,   219,   220,   221,   222,     0,   223,   224,   225,   226,
4609:      227,   228,     0,   229,   230,   231,   232,   233,   234,   235,
4610:      756,   757,     0,   758,     0,   239,   240,   241,   242,   243,
4611:      244,   245,   246,   247,   248,     0,     0,   249,   250,   251,
4612:      252,     0,   253,   254,   255,   759,   760,   256,   257,   258,
4613:      259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
4614:      269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
4615:      279,   761,   281,   762,   283,   284,   285,   286,   763,   287,
4616:      288,   289,   290,   764,   765,   292,   766,   294,   295,   296,
4617:        0,   297,   298,     0,     0,   767,   300,   301,     0,     0,
4618:      302,   303,   304,   305,   306,   768,   308,   309,   310,   311,
4619:      312,   313,   314,   315,   316,   317,     0,   318,   319,   769,
4620:      321,   322,   323,   324,   325,   326,     0,   327,   328,   329,
4621:      330,   331,   332,   333,   334,   335,   770,   337,   338,   339,
4622:      340,     0,   341,   342,   343,   344,   345,   346,   347,   348,
4623:      349,   350,   351,   352,     0,   353,   354,   355,   356,   357,
4624:      358,   771,   360,   361,   362,   363,   364,   365,   366,   367,
4625:      368,   369,   370,     0,   371,   372,   373,   374,   375,   772,
4626:      376,   377,   378,   379,   380,   381,   382,   383,   773,   385,
4627:        0,   386,   387,   388,   389,   390,   391,   392,   393,   394,
4628:      395,   396,   397,   398,   774,     0,   400,   401,     0,   402,
4629:      403,   404,   405,   406,   407,   408,     0,   775,   776,     0,
4630:        0,   411,   412,   777,   414,   778,   779,   416,   417,   780,
4631:      419,   420,   421,   422,   423,     0,     0,   424,   425,   426,
4632:      427,   428,   781,     0,   429,   430,   431,   432,   433,   434,
4633:      782,     0,   436,   437,   438,   439,   440,   441,     0,     0,
4634:      442,     0,     0,   443,   444,   445,   446,   447,   448,   449,
4635:      450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
4636:      460,   461,   462,   463,   783,     0,     0,     0,     0,     0,
4637:        0,   784,   785,   786,     0,     0,     0,     0,   787,     0,
4638:      788,     0,     0,     0,     0,   789,     0,   790,   791,    89,
4639:      725,   535,   726,   727,   728,   729,   730,     0,     0,     0,
4640:        0,     0,     0,     0,     0,    90,    91,    92,    93,    94,
4641:       95,    96,    97,  1331,    98,    99,   100,     0,     0,     0,
4642:        0,   731,     0,     0,   101,   102,     0,   103,   104,   105,
4643:      106,   107,   108,   109,   110,   732,   112,   733,   734,     0,
4644:      115,   116,   117,   118,   119,   120,   735,   736,   121,   122,
4645:      737,   738,   125,     0,   126,   127,   128,   129,   739,     0,
4646:      740,     0,   132,   133,   134,   135,   136,   137,   138,   139,
4647:      140,     0,   141,   142,   143,   144,   145,   146,     0,   147,
4648:      148,   149,   150,   741,   742,   743,   744,   745,   746,   747,
4649:      152,   153,   154,   155,   156,   157,   158,   748,   749,   161,
4650:      750,   162,     0,   163,   164,   165,   166,   167,   168,     0,
4651:      169,   170,   171,   172,   173,     0,     0,   174,   175,   751,
4652:      177,   178,     0,   179,   180,   181,     0,   182,   183,   184,
4653:        0,   185,   186,   187,   188,   752,   190,   191,   192,   193,
4654:      753,   754,   195,     0,   196,   197,   755,   199,     0,   200,
4655:        0,   201,   202,     0,   203,   204,   205,   206,   207,   208,
4656:        0,   209,     0,   210,   211,     0,   212,   213,   214,   215,
4657:      216,   217,   218,   219,   220,   221,   222,     0,   223,   224,
4658:      225,   226,   227,   228,     0,   229,   230,   231,   232,   233,
4659:      234,   235,   756,   757,     0,   758,     0,   239,   240,   241,
4660:      242,   243,   244,   245,   246,   247,   248,     0,     0,   249,
4661:      250,   251,   252,     0,   253,   254,   255,   759,   760,   256,
4662:      257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
4663:      267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
4664:      277,   278,   279,   761,   281,   762,   283,   284,   285,   286,
4665:      763,   287,   288,   289,   290,   764,   765,   292,   766,   294,
4666:      295,   296,     0,   297,   298,     0,     0,   767,   300,   301,
4667:        0,     0,   302,   303,   304,   305,   306,   768,   308,   309,
4668:      310,   311,   312,   313,   314,   315,   316,   317,     0,   318,
4669:      319,   769,   321,   322,   323,   324,   325,   326,     0,   327,
4670:      328,   329,   330,   331,   332,   333,   334,   335,   770,   337,
4671:      338,   339,   340,     0,   341,   342,   343,   344,   345,   346,
4672:      347,   348,   349,   350,   351,   352,     0,   353,   354,   355,
4673:      356,   357,   358,   771,   360,   361,   362,   363,   364,   365,
4674:      366,   367,   368,   369,   370,     0,   371,   372,   373,   374,
4675:      375,   772,   376,   377,   378,   379,   380,   381,   382,   383,
4676:      773,   385,     0,   386,   387,   388,   389,   390,   391,   392,
4677:      393,   394,   395,   396,   397,   398,   774,     0,   400,   401,
4678:        0,   402,   403,   404,   405,   406,   407,   408,     0,   775,
4679:      776,     0,     0,   411,   412,   777,   414,   778,   779,   416,
4680:      417,   780,   419,   420,   421,   422,   423,     0,     0,   424,
4681:      425,   426,   427,   428,   781,     0,   429,   430,   431,   432,
4682:      433,   434,   782,     0,   436,   437,   438,   439,   440,   441,
4683:        0,     0,   442,     0,     0,   443,   444,   445,   446,   447,
4684:      448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
4685:      458,   459,   460,   461,   462,   463,   783,     0,     0,     0,
4686:        0,     0,     0,   784,   785,     0,     0,     0,     0,     0,
4687:      787,     0,   788,     0,     0,     0,     0,   789,     0,   790,
4688:      791,   917,   725,   535,   726,   727,   728,   729,   730,     0,
4689:        0,     0,     0,     0,     0,     0,     0,    90,    91,    92,
4690:       93,    94,    95,    96,    97,     0,    98,    99,   100,     0,
4691:        0,     0,     0,   731,     0,     0,   101,   102,     0,   103,
4692:      104,   105,   919,   107,   108,   109,   110,   732,   920,   733,
4693:      734,     0,   115,   116,   117,   118,   119,   120,   735,   736,
4694:      121,   122,   737,   738,   125,     0,   126,   127,   128,   129,
4695:      739,     0,   921,     0,   132,   133,   134,   135,   136,   922,
4696:      138,   139,   140,     0,   141,   142,   143,   144,   145,   146,
4697:        0,   923,   148,   149,   150,   741,   742,   743,   924,   745,
4698:      746,   747,   152,   153,   154,   155,   156,   157,   158,   748,
4699:      749,   161,   750,   162,     0,   163,   164,   165,   166,   167,
4700:      168,     0,   169,   170,   171,   172,   173,     0,     0,   174,
4701:      175,   751,   177,   178,     0,   179,   180,   181,     0,   182,
4702:      183,   184,     0,   185,   186,   187,   188,   752,   190,   191,
4703:      192,   193,   753,   754,   195,     0,   196,   197,   755,   199,
4704:        0,   200,     0,   201,   926,     0,   927,   204,   205,   206,
4705:      928,   208,     0,   209,     0,   210,   211,     0,   212,   213,
4706:      214,   215,   216,   217,   929,   219,   220,   221,   222,     0,
4707:      223,   224,   225,   226,   227,   228,     0,   229,   930,   231,
4708:      232,   233,   234,   235,   756,   757,     0,   758,     0,   239,
4709:      931,   932,   242,   933,   244,   245,   246,   247,   248,     0,
4710:        0,   249,   934,   251,   935,     0,   253,   254,   255,   759,
4711:      760,   256,   257,   258,   259,   260,   936,   262,   263,   264,
4712:      265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
4713:      275,   276,   277,   278,   279,   761,   937,   762,   283,   284,
4714:      285,   286,   763,   287,   288,   938,   290,   764,   765,   292,
4715:      766,   294,   295,   296,     0,   297,   298,     0,     0,   767,
4716:      300,   301,     0,     0,   302,   303,   939,   305,   940,   768,
4717:      308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
4718:        0,   318,   319,   769,   321,   322,   323,   324,   325,   326,
4719:        0,   327,   328,   329,   330,   331,   332,   333,   334,   335,
4720:      770,   337,   338,   339,   340,     0,   341,   342,   343,   344,
4721:      345,   346,   347,   348,   349,   350,   351,   352,     0,   353,
4722:      354,   941,   356,   357,   358,   771,   360,   361,   362,   363,
4723:      364,   365,   366,   367,   368,   369,   370,     0,   371,   372,
4724:      373,   374,   375,   772,   376,   377,   378,   379,   380,   942,
4725:      382,   383,   773,   385,     0,   386,   387,   388,   389,   390,
4726:      391,   392,   393,   394,   395,   396,   943,   398,   774,     0,
4727:      400,   401,     0,   402,   944,   404,   405,   406,   407,   408,
4728:        0,   775,   776,     0,     0,   411,   412,   777,   414,   778,
4729:      779,   416,   417,   945,   419,   420,   421,   422,   423,     0,
4730:        0,   424,   425,   426,   427,   428,   781,     0,   429,   430,
4731:      431,   432,   433,   434,   782,     0,   436,   947,   438,   439,
4732:      440,   441,     0,     0,   442,     0,     0,   443,   444,   445,
4733:      446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
4734:      456,   457,   458,   459,   460,   461,   462,   463,   783,     0,
4735:        0,     0,     0,     0,     0,   784,   785,     0,     0,     0,
4736:        0,     0,   787,     0,   788,  1444,     0,     0,     0,   789,
4737:        0,   790,   791,    89,   725,   535,   726,   727,   728,   729,
4738:      730,     0,     0,     0,     0,     0,     0,     0,     0,    90,
4739:       91,    92,    93,    94,    95,    96,    97,     0,    98,    99,
4740:      100,     0,     0,     0,     0,   731,     0,     0,   101,   102,
4741:        0,   103,   104,   105,   106,   107,   108,   109,   110,   732,
4742:      112,   733,   734,     0,   115,   116,   117,   118,   119,   120,
4743:      735,   736,   121,   122,   737,   738,   125,     0,   126,   127,
4744:      128,   129,   739,     0,   740,     0,   132,   133,   134,   135,
4745:      136,   137,   138,   139,   140,     0,   141,   142,   143,   144,
4746:      145,   146,     0,   147,   148,   149,   150,   741,   742,   743,
4747:      744,   745,   746,   747,   152,   153,   154,   155,   156,   157,
4748:      158,   748,   749,   161,   750,   162,     0,   163,   164,   165,
4749:      166,   167,   168,     0,   169,   170,   171,   172,   173,     0,
4750:        0,   174,   175,   751,   177,   178,     0,   179,   180,   181,
4751:        0,   182,   183,   184,     0,   185,   186,   187,   188,   752,
4752:      190,   191,   192,   193,   753,   754,   195,     0,   196,   197,
4753:      755,   199,     0,   200,     0,   201,   202,     0,   203,   204,
4754:      205,   206,   207,   208,     0,   209,     0,   210,   211,     0,
4755:      212,   213,   214,   215,   216,   217,   218,   219,   220,   221,
4756:      222,     0,   223,   224,   225,   226,   227,   228,     0,   229,
4757:      230,   231,   232,   233,   234,   235,   756,   757,     0,   758,
4758:        0,   239,   240,   241,   242,   243,   244,   245,   246,   247,
4759:      248,     0,     0,   249,   250,   251,   252,     0,   253,   254,
4760:      255,   759,   760,   256,   257,   258,   259,   260,   261,   262,
4761:      263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
4762:      273,   274,   275,   276,   277,   278,   279,   761,   281,   762,
4763:      283,   284,   285,   286,   763,   287,   288,   289,   290,   764,
4764:      765,   292,   766,   294,   295,   296,     0,   297,   298,     0,
4765:        0,   767,   300,   301,     0,     0,   302,   303,   304,   305,
4766:      306,   768,   308,   309,   310,   311,   312,   313,   314,   315,
4767:      316,   317,     0,   318,   319,   769,   321,   322,   323,   324,
4768:      325,   326,     0,   327,   328,   329,   330,   331,   332,   333,
4769:      334,   335,   770,   337,   338,   339,   340,     0,   341,   342,
4770:      343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
4771:        0,   353,   354,   355,   356,   357,   358,   771,   360,   361,
4772:      362,   363,   364,   365,   366,   367,   368,   369,   370,     0,
4773:      371,   372,   373,   374,   375,   772,   376,   377,   378,   379,
4774:      380,   381,   382,   383,   773,   385,     0,   386,   387,   388,
4775:      389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
4776:      774,     0,   400,   401,     0,   402,   403,   404,   405,   406,
4777:      407,   408,     0,   775,   776,     0,     0,   411,   412,   777,
4778:      414,   778,   779,   416,   417,   780,   419,   420,   421,   422,
4779:      423,     0,     0,   424,   425,   426,   427,   428,   781,     0,
4780:      429,   430,   431,   432,   433,   434,   782,     0,   436,   437,
4781:      438,   439,   440,   441,     0,     0,   442,     0,     0,   443,
4782:      444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
4783:      454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
4784:      783,     0,     0,     0,     0,     0,     0,   784,   785,     0,
4785:        0,     0,     0,     0,   787,     0,   788,  1579,     0,     0,
4786:        0,   789,     0,   790,   791,   917,   725,   535,   726,   727,
4787:      728,   729,   730,     0,     0,     0,     0,     0,     0,     0,
4788:        0,    90,    91,    92,    93,    94,    95,    96,    97,     0,
4789:       98,    99,   100,     0,     0,     0,     0,   731,     0,     0,
4790:      101,   102,     0,   103,   104,   105,   919,   107,   108,   109,
4791:      110,   732,   920,   733,   734,     0,   115,   116,   117,   118,
4792:      119,   120,   735,   736,   121,   122,   737,   738,   125,     0,
4793:      126,   127,   128,   129,   739,     0,   921,     0,   132,   133,
4794:      134,   135,   136,   922,   138,   139,   140,     0,   141,   142,
4795:      143,   144,   145,   146,     0,   923,   148,   149,   150,   741,
4796:      742,   743,   924,   745,   746,   747,   152,   153,   154,   155,
4797:      156,   157,   158,   748,   749,   161,   750,   162,     0,   163,
4798:      164,   165,   166,   167,   168,     0,   169,   170,   171,   172,
4799:      173,     0,     0,   174,   175,   751,   177,   178,     0,   179,
4800:      180,   181,     0,   182,   183,   184,     0,   185,   186,   187,
4801:      188,   752,   190,   191,   192,   193,   753,   754,   195,     0,
4802:      196,   197,   755,   199,     0,   200,     0,   201,   926,     0,
4803:      927,   204,   205,   206,   928,   208,     0,   209,     0,   210,
4804:      211,     0,   212,   213,   214,   215,   216,   217,   929,   219,
4805:      220,   221,   222,     0,   223,   224,   225,   226,   227,   228,
4806:        0,   229,   930,   231,   232,   233,   234,   235,   756,   757,
4807:        0,   758,     0,   239,   931,   932,   242,   933,   244,   245,
4808:      246,   247,   248,     0,     0,   249,   934,   251,   935,     0,
4809:      253,   254,   255,   759,   760,   256,   257,   258,   259,   260,
4810:      936,   262,   263,   264,   265,   266,   267,   268,   269,   270,
4811:      271,   272,   273,   274,   275,   276,   277,   278,   279,   761,
4812:      937,   762,   283,   284,   285,   286,   763,   287,   288,   938,
4813:      290,   764,   765,   292,   766,   294,   295,   296,     0,   297,
4814:      298,     0,     0,   767,   300,   301,     0,     0,   302,   303,
4815:      939,   305,   940,   768,   308,   309,   310,   311,   312,   313,
4816:      314,   315,   316,   317,     0,   318,   319,   769,   321,   322,
4817:      323,   324,   325,   326,     0,   327,   328,   329,   330,   331,
4818:      332,   333,   334,   335,   770,   337,   338,   339,   340,     0,
4819:      341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
4820:      351,   352,     0,   353,   354,   941,   356,   357,   358,   771,
4821:      360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
4822:      370,     0,   371,   372,   373,   374,   375,   772,   376,   377,
4823:      378,   379,   380,   942,   382,   383,   773,   385,     0,   386,
4824:      387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
4825:      943,   398,   774,     0,   400,   401,     0,   402,   944,   404,
4826:      405,   406,   407,   408,     0,   775,   776,     0,     0,   411,
4827:      412,   777,   414,   778,   779,   416,   417,   945,   419,   420,
4828:      421,   422,   423,     0,     0,   424,   425,   426,   427,   428,
4829:      781,     0,   429,   430,   431,   432,   433,   434,   782,  1793,
4830:      436,   947,   438,   439,   440,   441,     0,     0,   442,     0,
4831:        0,   443,   444,   445,   446,   447,   448,   449,   450,   451,
4832:      452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
4833:      462,   463,   783,     0,     0,     0,     0,     0,     0,   784,
4834:      785,     0,     0,     0,     0,     0,   787,     0,   788,     0,
4835:        0,     0,     0,   789,     0,   790,   791,    89,   725,   535,
4836:      726,   727,   728,   729,   730,     0,     0,     0,     0,     0,
4837:        0,     0,     0,    90,    91,    92,    93,    94,    95,    96,
4838:       97,     0,    98,    99,   100,     0,     0,     0,     0,   731,
4839:        0,     0,   101,   102,     0,   103,   104,   105,   106,   107,
4840:      108,   109,   110,   732,   112,   733,   734,     0,   115,   116,
4841:      117,   118,   119,   120,   735,   736,   121,   122,   737,   738,
4842:      125,     0,   126,   127,   128,   129,   739,     0,   740,     0,
4843:      132,   133,   134,   135,   136,   137,   138,   139,   140,     0,
4844:      141,   142,   143,   144,   145,   146,     0,   147,   148,   149,
4845:      150,   741,   742,   743,   744,   745,   746,   747,   152,   153,
4846:      154,   155,   156,   157,   158,   748,   749,   161,   750,   162,
4847:        0,   163,   164,   165,   166,   167,   168,     0,   169,   170,
4848:      171,   172,   173,     0,     0,   174,   175,   751,   177,   178,
4849:        0,   179,   180,   181,     0,   182,   183,   184,     0,   185,
4850:      186,   187,   188,   752,   190,   191,   192,   193,   753,   754,
4851:      195,     0,   196,   197,   755,   199,     0,   200,     0,   201,
4852:      202,  1590,   203,   204,   205,   206,   207,   208,     0,   209,
4853:        0,   210,   211,     0,   212,   213,   214,   215,   216,   217,
4854:      218,   219,   220,   221,   222,     0,   223,   224,   225,   226,
4855:      227,   228,     0,   229,   230,   231,   232,   233,   234,   235,
4856:      756,   757,     0,   758,     0,   239,   240,   241,   242,   243,
4857:      244,   245,   246,   247,   248,     0,     0,   249,   250,   251,
4858:      252,     0,   253,   254,   255,   759,   760,   256,   257,   258,
4859:      259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
4860:      269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
4861:      279,   761,   281,   762,   283,   284,   285,   286,   763,   287,
4862:      288,   289,   290,   764,   765,   292,   766,   294,   295,   296,
4863:        0,   297,   298,     0,     0,   767,   300,   301,     0,     0,
4864:      302,   303,   304,   305,   306,   768,   308,   309,   310,   311,
4865:      312,   313,   314,   315,   316,   317,     0,   318,   319,   769,
4866:      321,   322,   323,   324,   325,   326,     0,   327,   328,   329,
4867:      330,   331,   332,   333,   334,   335,   770,   337,   338,   339,
4868:      340,     0,   341,   342,   343,   344,   345,   346,   347,   348,
4869:      349,   350,   351,   352,     0,   353,   354,   355,   356,   357,
4870:      358,   771,   360,   361,   362,   363,   364,   365,   366,   367,
4871:      368,   369,   370,     0,   371,   372,   373,   374,   375,   772,
4872:      376,   377,   378,   379,   380,   381,   382,   383,   773,   385,
4873:        0,   386,   387,   388,   389,   390,   391,   392,   393,   394,
4874:      395,   396,   397,   398,   774,     0,   400,   401,     0,   402,
4875:      403,   404,   405,   406,   407,   408,     0,   775,   776,     0,
4876:        0,   411,   412,   777,   414,   778,   779,   416,   417,   780,
4877:      419,   420,   421,   422,   423,     0,     0,   424,   425,   426,
4878:      427,   428,   781,     0,   429,   430,   431,   432,   433,   434,
4879:      782,     0,   436,   437,   438,   439,   440,   441,     0,     0,
4880:      442,     0,     0,   443,   444,   445,   446,   447,   448,   449,
4881:      450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
4882:      460,   461,   462,   463,   783,     0,     0,     0,     0,     0,
4883:        0,   784,   785,     0,     0,     0,     0,     0,   787,     0,
4884:      788,     0,     0,     0,     0,   789,     0,   790,   791,    89,
4885:      725,   535,   726,   727,   728,   729,   730,     0,     0,     0,
4886:        0,     0,     0,     0,     0,    90,    91,    92,    93,    94,
4887:       95,    96,    97,     0,    98,    99,   100,     0,     0,     0,
4888:        0,   731,     0,     0,   101,   102,     0,   103,   104,   105,
4889:      106,   107,   108,   109,   110,   732,   112,   733,   734,     0,
4890:      115,   116,   117,   118,   119,   120,   735,   736,   121,   122,
4891:      737,   738,   125,     0,   126,   127,   128,   129,   739,     0,
4892:      740,     0,   132,   133,   134,   135,   136,   137,   138,   139,
4893:      140,     0,   141,   142,   143,   144,   145,   146,     0,   147,
4894:      148,   149,   150,   741,   742,   743,   744,   745,   746,   747,
4895:      152,   153,   154,   155,   156,   157,   158,   748,   749,   161,
4896:      750,   162,     0,   163,   164,   165,   166,   167,   168,     0,
4897:      169,   170,   171,   172,   173,     0,     0,   174,   175,   751,
4898:      177,   178,     0,   179,   180,   181,     0,   182,   183,   184,
4899:        0,   185,   186,   187,   188,   752,   190,   191,   192,   193,
4900:      753,   754,   195,     0,   196,   197,   755,   199,     0,   200,
4901:        0,   201,   202,     0,   203,   204,   205,   206,   207,   208,
4902:        0,   209,     0,   210,   211,     0,   212,   213,   214,   215,
4903:      216,   217,   218,   219,   220,   221,   222,     0,   223,   224,
4904:      225,   226,   227,   228,     0,   229,   230,   231,   232,   233,
4905:      234,   235,   756,   757,     0,   758,     0,   239,   240,   241,
4906:      242,   243,   244,   245,   246,   247,   248,     0,     0,   249,
4907:      250,   251,   252,     0,   253,   254,   255,   759,   760,   256,
4908:      257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
4909:      267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
4910:      277,   278,   279,   761,   281,   762,   283,   284,   285,   286,
4911:      763,   287,   288,   289,   290,   764,   765,   292,   766,   294,
4912:      295,   296,     0,   297,   298,     0,     0,   767,   300,   301,
4913:        0,     0,   302,   303,   304,   305,   306,   768,   308,   309,
4914:      310,   311,   312,   313,   314,   315,   316,   317,     0,   318,
4915:      319,   769,   321,   322,   323,   324,   325,   326,     0,   327,
4916:      328,   329,   330,   331,   332,   333,   334,   335,   770,   337,
4917:      338,   339,   340,     0,   341,   342,   343,   344,   345,   346,
4918:      347,   348,   349,   350,   351,   352,     0,   353,   354,   355,
4919:      356,   357,   358,   771,   360,   361,   362,   363,   364,   365,
4920:      366,   367,   368,   369,   370,     0,   371,   372,   373,   374,
4921:      375,   772,   376,   377,   378,   379,   380,   381,   382,   383,
4922:      773,   385,     0,   386,   387,   388,   389,   390,   391,   392,
4923:      393,   394,   395,   396,   397,   398,   774,     0,   400,   401,
4924:        0,   402,   403,   404,   405,   406,   407,   408,     0,   775,
4925:      776,     0,     0,   411,   412,   777,   414,   778,   779,   416,
4926:      417,   780,   419,   420,   421,   422,   423,     0,     0,   424,
4927:      425,   426,   427,   428,   781,     0,   429,   430,   431,   432,
4928:      433,   434,   782,     0,   436,   437,   438,   439,   440,   441,
4929:        0,     0,   442,     0,     0,   443,   444,   445,   446,   447,
4930:      448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
4931:      458,   459,   460,   461,   462,   463,   783,     0,     0,     0,
4932:        0,     0,     0,   784,   785,     0,     0,     0,     0,     0,
4933:      787,     0,   788,     0,     0,     0,     0,   789,     0,   790,
4934:      791,   917,   725,   535,   726,   727,   728,   729,   730,     0,
4935:        0,     0,     0,     0,     0,     0,     0,    90,    91,    92,
4936:       93,    94,    95,    96,    97,     0,    98,    99,   100,     0,
4937:        0,     0,     0,   731,     0,     0,   101,   102,     0,   103,
4938:      104,   105,   919,   107,   108,   109,   110,   732,   920,   733,
4939:      734,     0,   115,   116,   117,   118,   119,   120,   735,   736,
4940:      121,   122,   737,   738,   125,     0,   126,   127,   128,   129,
4941:      739,     0,   921,     0,   132,   133,   134,   135,   136,   922,
4942:      138,   139,   140,     0,   141,   142,   143,   144,   145,   146,
4943:        0,   923,   148,   149,   150,   741,   742,   743,   924,   745,
4944:      746,   747,   152,   153,   154,   155,   156,   157,   158,   748,
4945:      749,   161,   750,   162,     0,   163,   164,   165,   166,   167,
4946:      168,     0,   169,   170,   171,   172,   173,     0,     0,   174,
4947:      175,   751,   177,   178,     0,   179,   180,   181,     0,   182,
4948:      183,   184,     0,   185,   186,   187,   188,   752,   190,   191,
4949:      192,   193,   753,   754,   195,     0,   196,   197,   755,   199,
4950:        0,   200,     0,   201,   926,     0,   927,   204,   205,   206,
4951:      928,   208,     0,   209,     0,   210,   211,     0,   212,   213,
4952:      214,   215,   216,   217,   929,   219,   220,   221,   222,     0,
4953:      223,   224,   225,   226,   227,   228,     0,   229,   930,   231,
4954:      232,   233,   234,   235,   756,   757,     0,   758,     0,   239,
4955:      931,   932,   242,   933,   244,   245,   246,   247,   248,     0,
4956:        0,   249,   934,   251,   935,     0,   253,   254,   255,   759,
4957:      760,   256,   257,   258,   259,   260,   936,   262,   263,   264,
4958:      265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
4959:      275,   276,   277,   278,   279,   761,   937,   762,   283,   284,
4960:      285,   286,   763,   287,   288,   938,   290,   764,   765,   292,
4961:      766,   294,   295,   296,     0,   297,   298,     0,     0,   767,
4962:      300,   301,     0,     0,   302,   303,   939,   305,   940,   768,
4963:      308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
4964:        0,   318,   319,   769,   321,   322,   323,   324,   325,   326,
4965:        0,   327,   328,   329,   330,   331,   332,   333,   334,   335,
4966:      770,   337,   338,   339,   340,     0,   341,   342,   343,   344,
4967:      345,   346,   347,   348,   349,   350,   351,   352,     0,   353,
4968:      354,   941,   356,   357,   358,   771,   360,   361,   362,   363,
4969:      364,   365,   366,   367,   368,   369,   370,     0,   371,   372,
4970:      373,   374,   375,   772,   376,   377,   378,   379,   380,   942,
4971:      382,   383,   773,   385,     0,   386,   387,   388,   389,   390,
4972:      391,   392,   393,   394,   395,   396,   943,   398,   774,     0,
4973:      400,   401,     0,   402,   944,   404,   405,   406,   407,   408,
4974:        0,   775,   776,     0,     0,   411,   412,   777,   414,   778,
4975:      779,   416,   417,   945,   419,   420,   421,   422,   423,     0,
4976:        0,   424,   425,   426,   427,   428,   781,     0,   429,   430,
4977:      431,   432,   433,   434,   782,     0,   436,   947,   438,   439,
4978:      440,   441,     0,     0,   442,     0,     0,   443,   444,   445,
4979:      446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
4980:      456,   457,   458,   459,   460,   461,   462,   463,   783,     0,
4981:        0,     0,     0,     0,     0,   784,   785,     0,     0,     0,
4982:        0,     0,   787,     0,   788,     0,     0,     0,     0,   789,
4983:        0,   790,   791,    89,   725,   535,   726,   727,   728,   729,
4984:      730,     0,     0,     0,     0,     0,     0,     0,     0,    90,
4985:       91,    92,    93,    94,    95,    96,    97,     0,    98,    99,
4986:      100,     0,     0,     0,     0,   731,     0,     0,   101,   102,
4987:        0,   103,   104,   105,   106,   107,   108,   109,   110,   732,
4988:      112,   733,   734,     0,   115,   116,   117,   118,   119,   120,
4989:      735,   736,   121,   122,   737,   738,   125,     0,   126,   127,
4990:      128,   129,   739,     0,   740,     0,   132,   133,   134,   135,
4991:      136,   137,   138,   139,   140,     0,   141,   142,   143,   144,
4992:      145,   146,     0,   147,   148,   149,   150,   741,   742,   743,
4993:      744,   745,   746,   747,   152,   153,   154,   155,   156,   157,
4994:      158,   748,   749,   161,   750,   162,     0,   163,   164,   165,
4995:      166,   167,   168,     0,   169,   170,   171,   172,   173,     0,
4996:        0,   174,   175,   751,   177,   178,     0,   179,   180,   181,
4997:        0,   182,   183,   184,     0,   185,   186,   187,   188,   752,
4998:      190,   191,   192,   193,   753,   754,   195,     0,   196,   197,
4999:      755,   199,     0,   200,     0,   201,   202,     0,   203,   204,
5000:      205,   206,   207,   208,     0,   209,     0,   210,   211,     0,
5001:      212,   213,   214,   215,   216,   217,   218,   219,   220,   221,
5002:      222,     0,   223,   224,   225,   226,   227,   228,     0,   229,
5003:      230,   231,   232,   233,   234,   235,   756,   757,     0,   758,
5004:        0,   239,   240,   241,   242,   243,   244,   245,   246,   247,
5005:      248,     0,     0,   249,   250,   251,   252,     0,   253,   254,
5006:      255,   759,   760,   256,   257,   258,   259,   260,   261,   262,
5007:      263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
5008:      273,   274,   275,   276,   277,   278,   279,   761,   281,   762,
5009:      283,   284,   285,   286,   763,   287,   288,   289,   290,   764,
5010:      765,   292,   766,   294,   295,   296,     0,   297,   298,     0,
5011:        0,   767,   300,   301,     0,     0,   302,   303,   304,   305,
5012:      306,   768,   308,   309,   310,   311,   312,   313,   314,   315,
5013:      316,   317,     0,   318,   319,   769,   321,   322,   323,   324,
5014:      325,   326,     0,   327,   328,   329,   330,   331,   332,   333,
5015:      334,   335,   770,   337,   338,   339,   340,     0,   341,   342,
5016:      343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
5017:        0,   353,   354,   355,   356,   357,   358,   771,   360,   361,
5018:      362,   363,   364,   365,   366,   367,   368,   369,   370,     0,
5019:      371,   372,   373,   374,   375,   772,   376,   377,   378,   379,
5020:      380,   381,   382,   383,   773,   385,     0,   386,   387,   388,
5021:      389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
5022:      774,     0,   400,   401,     0,   402,   403,   404,   405,   406,
5023:      407,   408,     0,   775,   776,     0,     0,   411,   412,   777,
5024:      414,   778,   779,   416,   417,   780,   419,   420,   421,   422,
5025:      423,     0,     0,   424,   425,   426,   427,   428,   781,     0,
5026:      429,   430,   431,   432,   433,   434,   782,     0,   436,   437,
5027:      438,   439,   440,   441,     0,     0,   442,     0,     0,   443,
5028:      444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
5029:      454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
5030:      783,     0,     0,     0,     0,     0,     0,  1334,  1335,     0,
5031:        0,     0,     0,     0,   787,     0,   788,     0,     0,     0,
5032:        0,   789,     0,   790,   791,    89,  1718,   535,   726,   727,
5033:      728,   729,   730,     0,     0,     0,     0,     0,     0,     0,
5034:        0,    90,    91,    92,    93,    94,    95,    96,    97,     0,
5035:       98,    99,   100,     0,     0,     0,     0,   731,     0,     0,
5036:      101,   102,     0,   103,   104,   105,   106,   107,   108,   109,
5037:      110,   732,   112,   733,   734,     0,   115,   116,   117,   118,
5038:      119,   120,   735,   736,   121,   122,   737,   738,   125,     0,
5039:      126,   127,   128,   129,   739,     0,   740,     0,   132,   133,
5040:      134,   135,   136,   137,   138,   139,   140,     0,   141,   142,
5041:      143,   144,   145,   146,     0,   147,   148,   149,   150,   741,
5042:      742,   743,   744,   745,   746,   747,   152,   153,   154,   155,
5043:      156,   157,   158,   748,   749,   161,   750,   162,     0,   163,
5044:      164,   165,   166,   167,   168,     0,   169,   170,   171,   172,
5045:      173,     0,     0,   174,   175,   751,   177,   178,     0,   179,
5046:      180,   181,     0,   182,   183,   184,     0,   185,   186,   187,
5047:      188,   752,   190,   191,   192,   193,   753,   754,   195,     0,
5048:      196,   197,   755,   199,     0,   200,     0,   201,   202,     0,
5049:      203,   204,   205,   206,   207,   208,     0,   209,     0,   210,
5050:      211,     0,   212,   213,   214,   215,   216,   217,   218,   219,
5051:      220,   221,   222,     0,   223,   224,   225,   226,   227,   228,
5052:        0,   229,   230,   231,   232,   233,   234,   235,   756,   757,
5053:        0,   758,     0,   239,   240,   241,   242,   243,   244,   245,
5054:      246,   247,   248,     0,     0,   249,   250,   251,   252,     0,
5055:      253,   254,   255,   759,   760,   256,   257,   258,   259,   260,
5056:      261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
5057:      271,   272,   273,   274,   275,   276,   277,   278,   279,   761,
5058:      281,   762,   283,   284,   285,   286,   763,   287,   288,   289,
5059:      290,   764,   765,   292,   766,   294,   295,   296,     0,   297,
5060:      298,     0,     0,   767,   300,   301,     0,     0,   302,   303,
5061:      304,   305,   306,   768,   308,   309,   310,   311,   312,   313,
5062:      314,   315,   316,   317,     0,   318,   319,   769,   321,   322,
5063:      323,   324,   325,   326,     0,   327,   328,   329,   330,   331,
5064:      332,   333,   334,   335,   770,   337,   338,   339,   340,     0,
5065:      341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
5066:      351,   352,     0,   353,   354,   355,   356,   357,   358,   771,
5067:      360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
5068:      370,     0,   371,   372,   373,   374,   375,   772,   376,   377,
5069:      378,   379,   380,   381,   382,   383,   773,   385,     0,   386,
5070:      387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
5071:      397,   398,   774,     0,   400,   401,     0,   402,   403,   404,
5072:      405,   406,   407,   408,     0,   775,   776,     0,     0,   411,
5073:      412,   777,   414,   778,   779,   416,   417,   780,   419,   420,
5074:      421,   422,   423,     0,     0,   424,   425,   426,   427,   428,
5075:      781,     0,   429,   430,   431,   432,   433,   434,   782,     0,
5076:      436,   437,   438,   439,   440,   441,     0,     0,   442,     0,
5077:        0,   443,   444,   445,   446,   447,   448,   449,   450,   451,
5078:      452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
5079:      462,   463,   783,     0,     0,     0,     0,     0,     0,   784,
5080:      785,     0,     0,     0,     0,     0,   787,     0,   788,     0,
5081:        0,     0,     0,   789,     0,   790,   791,    89,   725,   535,
5082:      726,   727,   728,   729,   730,     0,     0,     0,     0,     0,
5083:        0,     0,     0,    90,    91,    92,    93,    94,    95,    96,
5084:       97,     0,    98,    99,   100,     0,     0,     0,     0,   731,
5085:        0,     0,   101,   102,     0,   103,   104,   105,   106,   107,
5086:      108,   109,   110,   732,   112,   733,   734,     0,   115,   116,
5087:      117,   118,   119,   120,   735,   736,   121,   122,   737,   738,
5088:      125,     0,   126,   127,   128,   129,   739,     0,   740,     0,
5089:      132,   133,   134,   135,   136,   137,   138,   139,   140,     0,
5090:      141,   142,   143,   144,   145,   146,     0,   147,   148,   149,
5091:      150,   741,   742,   743,   744,   745,   746,   747,   152,   153,
5092:      154,   155,   156,   157,   158,   748,   749,   161,   750,   162,
5093:        0,   163,   164,   165,   166,   167,   168,     0,   169,   170,
5094:      171,   172,   173,     0,     0,   174,   175,   751,   177,   178,
5095:        0,   179,   180,   181,     0,   182,   183,   184,     0,   185,
5096:      186,   187,   188,   752,   190,   191,   192,   193,   753,   754,
5097:      195,     0,   196,   197,   755,   199,     0,   200,     0,   201,
5098:      202,     0,   203,   204,   205,   206,   207,   208,     0,   209,
5099:        0,   210,   211,     0,   212,   213,   214,   215,   216,   217,
5100:      218,   219,   220,   221,   222,     0,   223,   224,   225,   226,
5101:      227,   228,     0,   229,   230,   231,   232,   233,   234,   235,
5102:      756,   757,     0,   758,     0,   239,   240,   241,   242,   243,
5103:      244,   245,   246,   247,   248,     0,     0,   249,   250,   251,
5104:      252,     0,   253,   254,   255,   759,   760,   256,   257,   258,
5105:      259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
5106:      269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
5107:      279,   761,   281,   762,   283,   284,   285,   286,   763,   287,
5108:      288,   289,   290,   764,   765,   292,   766,   294,   295,   296,
5109:        0,   297,   298,     0,     0,   767,   300,   301,     0,     0,
5110:      302,   303,   304,   305,   306,   768,   308,   309,   310,   311,
5111:      312,   313,   314,   315,   316,   317,     0,   318,   319,   769,
5112:      321,   322,   323,   324,   325,   326,     0,   327,   328,   329,
5113:      330,   331,   332,   333,   334,   335,   770,   337,   338,   339,
5114:      340,     0,   341,   342,   343,   344,   345,   346,   347,   348,
5115:      349,   350,   351,   352,     0,   353,   354,   355,   356,   357,
5116:      358,   771,   360,   361,   362,   363,   364,   365,   366,   367,
5117:      368,   369,   370,     0,   371,   372,   373,   374,   375,   772,
5118:      376,   377,   378,   379,   380,   381,   382,   383,   773,   385,
5119:        0,   386,   387,   388,   389,   390,   391,   392,   393,   394,
5120:      395,   396,   397,   398,   774,     0,   400,   401,     0,   402,
5121:      403,   404,   405,   406,   407,   408,     0,   775,   776,     0,
5122:        0,   411,   412,   777,   414,   778,   779,   416,   417,   780,
5123:      419,   420,   421,   422,   423,     0,     0,   424,   425,   426,
5124:      427,   428,   781,     0,   429,   430,   431,   432,   433,   434,
5125:      782,     0,   436,   437,   438,   439,   440,   441,     0,     0,
5126:      442,     0,     0,   443,   444,   445,   446,   447,   448,   449,
5127:      450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
5128:      460,   461,   462,   463,   783,     0,     0,     0,     0,     0,
5129:        0,   784,   785,     0,     0,     0,     0,     0,   787,     0,
5130:     2587,     0,     0,     0,     0,   789,     0,   790,   791,    89,
5131:      725,   535,   726,   727,   728,   729,   730,     0,     0,     0,
5132:        0,     0,     0,     0,     0,    90,    91,    92,    93,    94,
5133:       95,    96,    97,     0,    98,    99,   100,     0,     0,     0,
5134:        0,   731,     0,     0,   101,   102,     0,   103,   104,   105,
5135:      106,   107,   108,   109,  2786,   732,   112,   733,   734,     0,
5136:      115,   116,   117,   118,   119,   120,   735,   736,   121,   122,
5137:      737,   738,   125,     0,   126,   127,   128,   129,   739,     0,
5138:      740,     0,   132,   133,   134,   135,   136,   137,   138,   139,
5139:      140,     0,   141,   142,   143,   144,   145,   146,     0,   147,
5140:      148,   149,  2787,   741,   742,   743,   744,   745,   746,   747,
5141:      152,   153,   154,   155,   156,   157,   158,   748,   749,   161,
5142:      750,   162,     0,   163,   164,   165,   166,   167,   168,     0,
5143:      169,   170,   171,   172,   173,     0,     0,   174,   175,   751,
5144:      177,   178,     0,   179,   180,   181,     0,   182,   183,   184,
5145:        0,   185,   186,   187,   188,   752,   190,   191,   192,   193,
5146:      753,   754,   195,     0,   196,   197,   755,   199,     0,   200,
5147:        0,   201,   202,     0,   203,   204,   205,   206,   207,   208,
5148:        0,   209,     0,   210,   211,     0,   212,   213,   214,   215,
5149:      216,   217,   218,   219,   220,   221,   222,     0,   223,   224,
5150:      225,   226,   227,   228,     0,   229,   230,   231,   232,   233,
5151:      234,   235,   756,   757,     0,   758,     0,   239,   240,   241,
5152:      242,   243,   244,   245,   246,   247,   248,     0,     0,   249,
5153:      250,   251,   252,     0,   253,   254,   255,   759,   760,   256,
5154:      257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
5155:      267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
5156:      277,   278,   279,   761,   281,   762,   283,   284,   285,   286,
5157:      763,   287,   288,   289,   290,   764,   765,   292,   766,   294,
5158:      295,   296,     0,   297,   298,     0,     0,   767,   300,   301,
5159:        0,     0,   302,   303,   304,   305,   306,   768,   308,   309,
5160:      310,   311,   312,   313,   314,   315,   316,   317,     0,   318,
5161:      319,   769,   321,   322,   323,   324,   325,   326,     0,   327,
5162:      328,   329,   330,   331,   332,   333,   334,   335,   770,   337,
5163:      338,   339,   340,     0,   341,   342,   343,   344,   345,   346,
5164:      347,   348,   349,   350,   351,   352,     0,   353,   354,   355,
5165:      356,   357,   358,   771,   360,   361,   362,   363,   364,   365,
5166:      366,   367,   368,   369,   370,     0,   371,   372,   373,   374,
5167:      375,   772,   376,   377,   378,   379,   380,   381,   382,   383,
5168:      773,   385,     0,   386,   387,   388,   389,   390,   391,   392,
5169:      393,   394,   395,   396,   397,   398,   774,     0,   400,   401,
5170:        0,   402,   403,   404,   405,   406,   407,   408,     0,   775,
5171:      776,     0,     0,   411,   412,   777,   414,   778,   779,   416,
5172:      417,   780,   419,   420,  2788,   422,   423,     0,     0,   424,
5173:      425,   426,   427,   428,   781,     0,   429,   430,   431,   432,
5174:      433,   434,   782,     0,   436,   437,   438,   439,   440,   441,
5175:        0,     0,   442,     0,     0,   443,   444,   445,   446,   447,
5176:      448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
5177:      458,   459,   460,   461,   462,   463,   783,     0,     0,     0,
5178:        0,     0,     0,   784,   785,     0,     0,     0,     0,     0,
5179:      787,     0,   788,     0,     0,     0,     0,   789,     0,   790,
5180:      791,    89,   725,   535,   726,   727,   728,   729,   730,     0,
5181:        0,     0,     0,     0,     0,     0,     0,    90,    91,    92,
5182:       93,    94,    95,    96,    97,     0,    98,    99,   100,     0,
5183:        0,     0,     0,   731,     0,     0,   101,   102,     0,   103,
5184:      104,   105,   106,   107,   108,   109,   110,   732,   112,   733,
5185:      734,     0,   115,   116,   117,   118,   119,   120,   735,   736,
5186:      121,   122,   737,   738,   125,     0,   126,   127,   128,   129,
5187:      739,     0,   740,     0,   132,   133,   134,   135,   136,   137,
5188:      138,   139,   140,     0,   141,   142,   143,   144,   145,   146,
5189:        0,   147,   148,   149,  2787,   741,   742,   743,   744,   745,
5190:      746,   747,   152,   153,   154,   155,   156,   157,   158,   748,
5191:      749,   161,   750,   162,     0,   163,   164,   165,   166,   167,
5192:      168,     0,   169,   170,   171,   172,   173,     0,     0,   174,
5193:      175,   751,   177,   178,     0,   179,   180,   181,     0,   182,
5194:      183,   184,     0,   185,   186,   187,   188,   752,   190,   191,
5195:      192,   193,   753,   754,   195,     0,   196,   197,   755,   199,
5196:        0,   200,     0,   201,   202,     0,   203,   204,   205,   206,
5197:      207,   208,     0,   209,     0,   210,   211,     0,   212,   213,
5198:      214,   215,   216,   217,   218,   219,   220,   221,   222,     0,
5199:      223,   224,   225,   226,   227,   228,     0,   229,   230,   231,
5200:      232,   233,   234,   235,   756,   757,     0,   758,     0,   239,
5201:      240,   241,   242,   243,   244,   245,   246,   247,   248,     0,
5202:        0,   249,   250,   251,   252,     0,   253,   254,   255,   759,
5203:      760,   256,   257,   258,   259,   260,   261,   262,   263,   264,
5204:      265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
5205:      275,   276,   277,   278,   279,   761,   281,   762,   283,   284,
5206:      285,   286,   763,   287,   288,   289,   290,   764,   765,   292,
5207:      766,   294,   295,   296,     0,   297,   298,     0,     0,   767,
5208:      300,   301,     0,     0,   302,   303,   304,   305,   306,   768,
5209:      308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
5210:        0,   318,   319,   769,   321,   322,   323,   324,   325,   326,
5211:        0,   327,   328,   329,   330,   331,   332,   333,   334,   335,
5212:      770,   337,   338,   339,   340,     0,   341,   342,   343,   344,
5213:      345,   346,   347,   348,   349,   350,   351,   352,     0,   353,
5214:      354,   355,   356,   357,   358,   771,   360,   361,   362,   363,
5215:      364,   365,   366,   367,   368,   369,   370,     0,   371,   372,
5216:      373,   374,   375,   772,   376,   377,   378,   379,   380,   381,
5217:      382,   383,   773,   385,     0,   386,   387,   388,   389,   390,
5218:      391,   392,   393,   394,   395,   396,   397,   398,   774,     0,
5219:      400,   401,     0,   402,   403,   404,   405,   406,   407,   408,
5220:        0,   775,   776,     0,     0,   411,   412,   777,   414,   778,
5221:      779,   416,   417,   780,   419,   420,  2788,   422,   423,     0,
5222:        0,   424,   425,   426,   427,   428,   781,     0,   429,   430,
5223:      431,   432,   433,   434,   782,     0,   436,   437,   438,   439,
5224:      440,   441,     0,     0,   442,     0,     0,   443,   444,   445,
5225:      446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
5226:      456,   457,   458,   459,   460,   461,   462,   463,   783,     0,
5227:        0,     0,     0,     0,     0,   784,   785,     0,     0,     0,
5228:        0,     0,   787,     0,   788,     0,     0,     0,     0,   789,
5229:        0,   790,   791,    89,   725,   535,   726,   727,   728,   729,
5230:      730,     0,     0,     0,     0,     0,     0,     0,     0,    90,
5231:       91,    92,    93,    94,    95,    96,    97,     0,    98,    99,
5232:      100,     0,     0,     0,     0,   731,     0,     0,   101,   102,
5233:        0,   103,   104,   105,   106,   107,   108,   109, -1674,   732,
5234:      112,   733,   734,     0,   115,   116,   117,   118,   119,   120,
5235:      735,   736,   121,   122,   737,   738,   125,     0,   126,   127,
5236:      128,   129,   739,     0,   740,     0,   132,   133,   134,   135,
5237:      136,   137,   138,   139,   140,     0,   141,   142,   143,   144,
5238:      145,   146,     0,   147,   148,   149,  2787,   741,   742,   743,
5239:      744,   745,   746,   747,   152,   153,   154,   155,   156,   157,
5240:      158,   748,   749,   161,   750,   162,     0,   163,   164,   165,
5241:      166,   167,   168,     0,   169,   170,   171,   172,   173,     0,
5242:        0,   174,   175,   751,   177,   178,     0,   179,   180,   181,
5243:        0,   182,   183,   184,     0,   185,   186,   187,   188,   752,
5244:      190,   191,   192,   193,   753,   754,   195,     0,   196,   197,
5245:      755,   199,     0,   200,     0,   201,   202,     0,   203,   204,
5246:      205,   206, -1674,   208,     0,   209,     0,   210,   211,     0,
5247:      212,   213,   214,   215,   216,   217, -1674,   219,   220,   221,
5248:      222,     0,   223,   224,   225,   226,   227,   228,     0,   229,
5249:      230,   231,   232,   233,   234,   235,   756,   757,     0,   758,
5250:        0,   239,     0,     0,   242,   243,   244,   245,   246,   247,
5251:      248,     0,     0,   249,   250,   251, -1674,     0,   253,   254,
5252:      255,   759,   760,   256,   257,   258,   259,   260,   261,   262,
5253:      263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
5254:      273,   274,   275,   276,   277,   278,   279,   761,   281,   762,
5255:      283,   284,   285,   286,     0,   287,   288,     0,   290,   764,
5256:      765,   292,   766,   294,   295,   296,     0,   297,   298,     0,
5257:        0,   767,   300,   301,     0,     0,   302,   303,   304,   305,
5258:      306,   768,   308,   309,   310,   311,   312,   313,   314,   315,
5259:      316,   317,     0,   318,   319,   769,   321,   322,   323,   324,
5260:      325,   326,     0,   327,   328,   329,   330,   331,   332,   333,
5261:      334,   335,   770,   337,   338,   339,   340,     0,   341,   342,
5262:      343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
5263:        0,   353,   354,   355,   356,   357,   358,   771,   360,   361,
5264:      362,   363,   364,   365,   366,   367,   368,   369,   370,     0,
5265:      371,   372,   373,   374,   375,   772,   376,   377,   378,   379,
5266:      380, -1674,   382,   383,   773,   385,     0,   386,   387,   388,
5267:      389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
5268:      774,     0,   400,   401,     0,   402,   403,   404,   405,   406,
5269:      407,   408,     0,   775,   776,     0,     0,   411,   412,   777,
5270:      414,   778,   779,   416,   417,   780,   419,   420,  2788,   422,
5271:      423,     0,     0,   424,   425,   426,   427,   428,   781,     0,
5272:      429,   430,   431,   432,   433,   434,   782,     0,   436,   437,
5273:      438,   439,   440,   441,     0,     0,   442,     0,     0,   443,
5274:      444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
5275:      454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
5276:    -1674,     0,     0,     0,     0,     0,     0,   784,   785,     0,
5277:        0,     0,     0,     0,   787,     0,   788,     0,     0,     0,
5278:        0,   789,     0,   790,   791,    89,   725,   535,   726,   727,
5279:      728,   729,   730,     0,     0,     0,     0,     0,     0,     0,
5280:        0,    90,    91,    92,    93,    94,    95,    96,    97,     0,
5281:       98,    99,   100,     0,     0,     0,     0,     0,     0,     0,
5282:      101,   102,     0,   103,   104,   105,   106,   107,   108,   109,
5283:      110,   732,   112,   733,   734,     0,   115,   116,   117,   118,
5284:      119,   120,   735,   736,   121,   122,   737,   738,   125,     0,
5285:      126,   127,   128,   129,   739,     0,   740,     0,   132,   133,
5286:      134,   135,   136,   137,   138,   139,   140,     0,   141,   142,
5287:      143,   144,   145,   146,     0,   147,   148,   149,   150,   741,
5288:      742,   743,   744,   745,   746,   747,   152,   153,   154,   155,
5289:      156,   157,   158,   748,   749,   161,     0,   162,     0,   163,
5290:      164,   165,   166,   167,   168,     0,   169,   170,   171,   172,
5291:      173,     0,     0,   174,   175,   751,   177,   178,     0,   179,
5292:      180,   181,     0,   182,   183,   184,     0,   185,   186,   187,
5293:      188,   752,   190,   191,   192,   193,   753,   754,   195,     0,
5294:      196,   197,   755,   199,     0,   200,     0,   201,   202,     0,
5295:      203,   204,   205,   206,   207,   208,     0,   209,     0,   210,
5296:      211,     0,   212,   213,   214,   215,   216,   217,   218,   219,
5297:      220,   221,   222,     0,   223,   224,   225,   226,   227,   228,
5298:        0,   229,   230,   231,   232,   233,   234,   235,   756,   757,
5299:        0,   758,     0,   239,   240,   241,   242,   243,   244,   245,
5300:      246,   247,   248,     0,     0,   249,   250,   251,   252,     0,
5301:      253,   254,   255,   759,   760,   256,   257,   258,   259,   260,
5302:      261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
5303:      271,   272,   273,   274,   275,   276,   277,   278,   279,   761,
5304:      281,   762,   283,   284,   285,   286,     0,   287,   288,   289,
5305:      290,   764,   765,   292,   766,   294,   295,   296,     0,   297,
5306:      298,     0,     0,   767,   300,   301,     0,     0,   302,   303,
5307:      304,   305,   306,   768,   308,   309,   310,   311,   312,   313,
5308:      314,   315,   316,   317,     0,   318,   319,   769,   321,   322,
5309:      323,   324,   325,   326,     0,   327,   328,   329,   330,   331,
5310:      332,   333,   334,   335,   770,   337,   338,   339,   340,     0,
5311:      341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
5312:      351,   352,     0,   353,   354,   355,   356,   357,   358,   359,
5313:      360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
5314:      370,     0,   371,   372,   373,   374,   375,   772,   376,   377,
5315:      378,   379,   380,   381,   382,   383,   773,   385,     0,   386,
5316:      387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
5317:      397,   398,   774,     0,   400,   401,     0,   402,   403,   404,
5318:      405,   406,   407,   408,     0,   775,   776,     0,     0,   411,
5319:      412,   777,   414,   778,   779,   416,   417,   780,   419,   420,
5320:      421,   422,   423,     0,     0,   424,   425,   426,   427,   428,
5321:      781,     0,   429,   430,   431,   432,   433,   434,   782,     0,
5322:      436,   437,   438,   439,   440,   441,     0,     0,   442,     0,
5323:        0,   443,   444,   445,   446,   447,   448,   449,   450,   451,
5324:      452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
5325:      462,   463,     0,     0,     0,     0,     0,     0,     0,  1571,
5326:     1572,     0,     0,    89,   725,   535,   726,   727,  1573,   729,
5327:      730,     0,     0,     0,     0,   790,   791,     0,     0,    90,
5328:       91,    92,    93,    94,    95,    96,    97,     0,    98,    99,
5329:      100,     0,     0,     0,     0,     0,     0,     0,   101,   102,
5330:        0,   103,   104,   105,   106,   107,   108,   109,   110,   732,
5331:      112,   733,   734,     0,   115,   116,   117,   118,   119,   120,
5332:      735,   736,   121,   122,   737,   738,   125,     0,   126,   127,
5333:      128,   129,   739,     0,   740,     0,   132,   133,   134,   135,
5334:      136,   137,   138,   139,   140,     0,   141,   142,   143,   144,
5335:      145,   146,     0,   147,   148,   149,   150,   741,   742,   743,
5336:      744,   745,   746,   747,   152,   153,   154,   155,   156,   157,
5337:      158,   748,   749,   161,     0,   162,     0,   163,   164,   165,
5338:      166,   167,   168,     0,   169,   170,   171,   172,   173,     0,
5339:        0,   174,   175,   751,   177,   178,     0,   179,   180,   181,
5340:        0,   182,   183,   184,     0,   185,   186,   187,   188,   752,
5341:      190,   191,   192,   193,   753,   754,   195,     0,   196,   197,
5342:      755,   199,     0,   200,     0,   201,   202,     0,   203,   204,
5343:      205,   206,   207,   208,     0,   209,     0,   210,   211,     0,
5344:      212,   213,   214,   215,   216,   217,   218,   219,   220,   221,
5345:      222,     0,   223,   224,   225,   226,   227,   228,     0,   229,
5346:      230,   231,   232,   233,   234,   235,   756,   757,     0,   758,
5347:        0,   239,   240,   241,   242,   243,   244,   245,   246,   247,
5348:      248,     0,     0,   249,   250,   251,   252,     0,   253,   254,
5349:      255,   759,   760,   256,   257,   258,   259,   260,   261,   262,
5350:      263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
5351:      273,   274,   275,   276,   277,   278,   279,   761,   281,   762,
5352:      283,   284,   285,   286,     0,   287,   288,   289,   290,   764,
5353:      765,   292,   766,   294,   295,   296,     0,   297,   298,     0,
5354:        0,   299,   300,   301,     0,     0,   302,   303,   304,   305,
5355:      306,   768,   308,   309,   310,   311,   312,   313,   314,   315,
5356:      316,   317,     0,   318,   319,   769,   321,   322,   323,   324,
5357:      325,   326,     0,   327,   328,   329,   330,   331,   332,   333,
5358:      334,   335,   770,   337,   338,   339,   340,     0,   341,   342,
5359:      343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
5360:        0,   353,   354,   355,   356,   357,   358,  1707,  1708,   361,
5361:      362,   363,   364,   365,   366,   367,   368,   369,   370,     0,
5362:      371,   372,   373,   374,   375,   772,   376,   377,   378,   379,
5363:      380,   381,   382,   383,   773,   385,     0,   386,   387,   388,
5364:      389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
5365:      774,     0,   400,   401,     0,   402,   403,   404,   405,   406,
5366:      407,   408,     0,   775,   776,     0,     0,   411,   412,   777,
5367:      414,   778,   779,   416,   417,   780,   419,   420,   421,   422,
5368:      423,     0,     0,   424,   425,   426,   427,   428,   781,     0,
5369:      429,   430,   431,   432,   433,   434,   782,     0,   436,   437,
5370:      438,   439,   440,   441,     0,     0,   442,     0,     0,   443,
5371:      444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
5372:      454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
5373:        0,     0,     0,     0,     0,     0,     0,  1709,  1710,     0,
5374:        0,     0,     0,     0,     0,     0,  1573,     0,     0,     0,
5375:        0,     0,     0,   790,   791,    89,   725,   535,   726,   727,
5376:      728,   729,   730,     0,     0,     0,     0,     0,     0,     0,
5377:        0,    90,    91,    92,    93,    94,    95,    96,    97,     0,
5378:       98,    99,   100,     0,     0,     0,     0,     0,     0,     0,
5379:      101,   102,     0,   103,   104,   105,   106,   107,   108,   109,
5380:      110,   732,   112,   733,   734,     0,   115,   116,   117,   118,
5381:      119,   120,   735,   736,   121,   122,   737,   738,   125,     0,
5382:      126,   127,   128,   129,   739,     0,   740,     0,   132,   133,
5383:      134,   135,   136,   137,   138,   139,   140,     0,   141,   142,
5384:      143,   144,   145,   146,     0,   147,   148,   149,   150,   741,
5385:      742,   743,   744,   745,   746,   747,   152,   153,   154,   155,
5386:      156,   157,   158,   748,   749,   161,     0,   162,     0,   163,
5387:      164,   165,   166,   167,   168,     0,   169,   170,   171,   172,
5388:      173,     0,     0,   174,   175,   751,   177,   178,     0,   179,
5389:      180,   181,     0,   182,   183,   184,     0,   185,   186,   187,
5390:      188,   752,   190,   191,   192,   193,   753,   754,   195,     0,
5391:      196,   197,   755,   199,     0,   200,     0,   201,   202,     0,
5392:      203,   204,   205,   206,   207,   208,     0,   209,     0,   210,
5393:      211,     0,   212,   213,   214,   215,   216,   217,   218,   219,
5394:      220,   221,   222,     0,   223,   224,   225,   226,   227,   228,
5395:        0,   229,   230,   231,   232,   233,   234,   235,   756,   757,
5396:        0,   758,     0,   239,     0,   241,   242,   243,   244,   245,
5397:      246,   247,   248,     0,     0,   249,   250,   251,   252,     0,
5398:      253,   254,   255,   759,   760,   256,   257,   258,   259,   260,
5399:      261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
5400:      271,   272,   273,   274,   275,   276,   277,   278,   279,   761,
5401:      281,   762,   283,   284,   285,   286,     0,   287,   288,   289,
5402:      290,   764,   765,   292,   766,   294,   295,   296,     0,   297,
5403:      298,     0,     0,   767,   300,   301,     0,     0,   302,   303,
5404:      304,   305,   306,   768,   308,   309,   310,   311,   312,   313,
5405:      314,   315,   316,   317,     0,   318,   319,   769,   321,   322,
5406:      323,   324,   325,   326,     0,   327,   328,   329,   330,   331,
5407:      332,   333,   334,   335,   770,   337,   338,   339,   340,     0,
5408:      341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
5409:      351,   352,     0,   353,   354,   355,   356,   357,   358,   359,
5410:      360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
5411:      370,     0,   371,   372,   373,   374,   375,   772,   376,   377,
5412:      378,   379,   380,   381,   382,   383,   773,   385,     0,   386,
5413:      387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
5414:      397,   398,   774,     0,   400,   401,     0,   402,   403,   404,
5415:      405,   406,   407,   408,     0,   775,   776,     0,     0,   411,
5416:      412,   777,   414,   778,   779,   416,   417,   780,   419,   420,
5417:      421,   422,   423,     0,     0,   424,   425,   426,   427,   428,
5418:      781,     0,   429,   430,   431,   432,   433,   434,   782,     0,
5419:      436,   437,   438,   439,   440,   441,     0,     0,   442,     0,
5420:        0,   443,   444,   445,   446,   447,   448,   449,   450,   451,
5421:      452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
5422:      462,   463,     0,     0,     0,     0,     0,     0,     0,  1571,
5423:     1572,     0,     0,     0,     0,     0,     0,     0,  1573,     0,
5424:        0,     0,     0,     0,     0,   790,   791,    89,   725,   535,
5425:      726,   727,   728,   729,   730,     0,     0,     0,     0,     0,
5426:        0,     0,     0,    90,    91,    92,    93,    94,    95,    96,
5427:       97,     0,    98,    99,   100,     0,     0,     0,     0,   731,
5428:        0,     0,   101,   102,     0,   103,   104,   105,   106,   107,
5429:      108,   109,     0,   732,   112,   733,   734,     0,   115,   116,
5430:      117,   118,   119,   120,   735,   736,   121,   122,   737,   738,
5431:      125,     0,   126,   127,   128,   129,   739,     0,   740,     0,
5432:      132,   133,   134,   135,   136,   137,   138,   139,   140,     0,
5433:      141,   142,   143,   144,   145,   146,     0,   147,   148,   149,
5434:      150,   741,   742,   743,   744,   745,   746,   747,   152,   153,
5435:      154,   155,   156,   157,   158,   748,   749,   161,   750,   162,
5436:        0,   163,   164,   165,   166,   167,   168,     0,   169,   170,
5437:      171,   172,   173,     0,     0,   174,   175,   751,   177,   178,
5438:        0,   179,   180,   181,     0,   182,     0,   184,     0,   185,
5439:      186,   187,   188,   752,   190,   191,   192,   193,   753,   754,
5440:      195,     0,   196,   197,   755,   199,     0,   200,     0,   201,
5441:      202,     0,   203,   204,   205,   206,     0,   208,     0,   209,
5442:        0,   210,   211,     0,   212,   213,   214,   215,   216,   217,
5443:        0,   219,   220,   221,   222,     0,   223,   224,   225,   226,
5444:      227,   228,     0,   229,   230,   231,   232,   233,   234,   235,
5445:      756,   757,     0,   758,     0,   239,     0,     0,   242,   243,
5446:      244,   245,   246,   247,   248,     0,     0,   249,   250,   251,
5447:        0,     0,   253,   254,   255,   759,   760,   256,   257,   258,
5448:      259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
5449:      269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
5450:      279,   761,   281,   762,   283,   284,   285,   286,     0,   287,
5451:      288,     0,   290,   764,   765,   292,   766,   294,   295,   296,
5452:        0,   297,   298,     0,     0,   767,   300,   301,     0,     0,
5453:      302,   303,   304,   305,   306,   768,   308,   309,   310,   311,
5454:      312,   313,   314,   315,   316,   317,     0,   318,   319,   769,
5455:      321,   322,   323,   324,   325,   326,     0,   327,   328,   329,
5456:      330,   331,   332,   333,   334,   335,   770,   337,   338,   339,
5457:      340,     0,   341,   342,   343,   344,   345,   346,   347,   348,
5458:      349,   350,   351,   352,     0,   353,   354,   355,   356,   357,
5459:      358,   771,   360,   361,   362,   363,   364,   365,   366,   367,
5460:      368,   369,   370,     0,   371,   372,   373,   374,   375,   772,
5461:      376,   377,   378,   379,   380,     0,   382,   383,   773,   385,
5462:        0,   386,   387,   388,   389,   390,   391,   392,   393,   394,
5463:      395,   396,   397,   398,   774,     0,   400,   401,     0,   402,
5464:      403,   404,   405,   406,   407,   408,     0,   775,   776,     0,
5465:        0,   411,   412,   777,   414,   778,   779,   416,   417,   780,
5466:      419,   420,   421,   422,   423,     0,     0,   424,   425,   426,
5467:      427,   428,   781,     0,   429,   430,   431,   432,   433,   434,
5468:      782,     0,   436,   437,   438,   439,   440,   441,     0,     0,
5469:      442,     0,     0,   443,   444,   445,   446,   447,   448,   449,
5470:      450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
5471:      460,   461,   462,   463,     0,     0,     0,     0,     0,     0,
5472:        0,   784,   785,   488,     0,     0,     0,     0,   787,     0,
5473:      788,     0,     0,     0,     0,   789,     0,   790,   791,    90,
5474:       91,    92,    93,    94,    95,    96,    97,     0,    98,    99,
5475:      100,     0,     0,     0,     0,     0,  2224,     0,   101,   102,
5476:        0,   103,   104,   105,     0,   107,   108,   109,   110,   111,
5477:        0,   113,   114,     0,   115,   116,   117,   118,   119,   120,
5478:        0,     0,   121,   122,   123,   124,   125,     0,   126,   127,
5479:      128,   129,   130,     0,     0,     0,   132,   133,   134,   135,
5480:      136,     0,   138,   139,   140,     0,   141,   142,   143,   144,
5481:      145,   146,     0,  -579,   148,   149,   150,     0,     0,     0,
5482:        0,     0,     0,     0,   152,   153,   154,   155,   156,   157,
5483:      158,   159,   160,   161,     0,   162,     0,   163,   164,   165,
5484:      166,   167,   168,     0,   169,   170,   171,   172,   173,     0,
5485:        0,   174,   175,   176,   177,   178,     0,   179,   180,   181,
5486:        0,   182,   183,   184,     0,   185,   186,   187,   188,   189,
5487:      190,   191,   192,   193,   194,     0,   195,     0,   196,   197,
5488:      198,   199,     0,   200,     0,   201,     0,     0,  -579,   204,
5489:      205,   206,     0,   208,     0,   209,     0,   210,   211,     0,
5490:      212,   213,   214,   215,   216,   217,     0,   219,   220,   221,
5491:      222,     0,   223,   224,   225,   226,   227,   228,     0,   229,
5492:     -579,   231,   232,   233,   234,   235,   236,   237,     0,   238,
5493:        0,   239,     0,     0,   242,  -579,   244,   245,   246,   247,
5494:      248,     0,     0,   249,  -579,   251,     0,     0,   253,   254,
5495:      255,     0,     0,   256,   257,   258,   259,   260,   490,   262,
5496:      263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
5497:      273,   274,   275,   276,   277,   278,   279,   280,  -579,   282,
5498:      283,   284,   285,   286,     0,   287,   288,     0,   290,     0,
5499:      291,   292,   293,   294,   295,   296,     0,   297,   298,     0,
5500:        0,   299,   300,   301,     0,     0,   302,   303,     0,   305,
5501:        0,   307,   308,   309,   310,   311,   312,   313,   314,   315,
5502:      316,   317,     0,   318,   319,   320,   321,   322,   323,   324,
5503:      325,   326,     0,   327,   328,   329,   330,   331,   332,   333,
5504:      334,   335,   336,   337,   338,   339,   340,     0,   341,   342,
5505:      343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
5506:        0,   353,   354,  -579,   356,   357,   358,   359,   360,   361,
5507:      362,   363,   364,   365,   366,   367,   368,   369,   370,     0,
5508:      371,   372,   373,   374,   375,     0,   376,   377,   378,   379,
5509:      380,     0,   382,   383,   384,   385,     0,   386,   387,   388,
5510:      389,   390,   391,   392,   393,   394,   395,   396,   492,   398,
5511:      399,     0,   400,   401,     0,   402,  -579,   404,   405,   406,
5512:      407,   408,     0,   409,   410,     0,     0,   411,   412,   413,
5513:      414,   415,     0,   416,   417,   418,   419,   420,   421,   422,
5514:      423,     0,     0,   424,   425,   426,   427,   428,     0,     0,
5515:      429,   430,   431,   432,   433,   434,   435,     0,   436,     0,
5516:      438,   439,   440,   441,     0,     0,   442,     0,     0,   443,
5517:      444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
5518:      454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
5519:        0,     0,    89,     0,   560,     0,     0,     0,     0,     0,
5520:        0,     0,     0,     0,     0,     0,     0,   849,    90,    91,
5521:       92,    93,    94,    95,    96,    97,     0,    98,    99,   100,
5522:        0,     0,     0,     0,     0,     0,     0,   101,   102,     0,
5523:      103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
5524:      113,   114,     0,   115,   116,   117,   118,   119,   120,     0,
5525:      736,   121,   122,   123,   124,   125,     0,   126,   127,   128,
5526:      129,   739,     0,   740,     0,   132,   133,   134,   135,   136,
5527:      137,   138,   139,   140,     0,   141,   142,   143,   144,   145,
5528:      146,     0,   147,   148,   149,   150,   741,   742,   743,   744,
5529:      745,   746,   747,   152,   153,   154,   155,   156,   157,   158,
5530:      159,   160,   161,     0,   162,     0,   163,   164,   165,   166,
5531:      167,   168,     0,   169,   170,   171,   172,   173,     0,     0,
5532:      174,   175,   176,   177,   178,     0,   179,   180,   181,     0,
5533:      182,   183,   184,     0,   185,   186,   187,   188,   189,   190,
5534:      191,   192,   193,   753,     0,   195,     0,   196,   197,   198,
5535:      199,     0,   200,     0,   201,   202,     0,   203,   204,   205,
5536:      206,   207,   208,     0,   209,     0,   210,   211,     0,   212,
5537:      213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
5538:        0,   223,   224,   225,   226,   227,   228,     0,   229,   230,
5539:      231,   232,   233,   234,   235,   236,   237,     0,   238,     0,
5540:      239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
5541:     1978,     0,   249,   250,   251,   252,     0,   253,   254,   255,
5542:      759,   760,   256,   257,   258,   259,   260,   261,   262,   263,
5543:      264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
5544:      274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
5545:      284,   285,   286,     0,   287,   288,   289,   290,     0,   765,
5546:      292,   293,   294,   295,   296,     0,   297,   298,     0,   561,
5547:      299,   300,   301,     0,     0,   302,   303,   304,   305,   306,
5548:      768,   308,   309,   310,   311,   312,   313,   314,   315,   316,
5549:      317,     0,   318,   319,   769,   321,   322,   323,   324,   325,
5550:      326,     0,   327,   328,   329,   330,   331,   332,   333,   334,
5551:      335,   336,   337,   338,   339,   340,     0,   341,   342,   343,
5552:      344,   345,   346,   347,   348,   349,   350,   351,   352,     0,
5553:      353,   354,   355,   356,   357,   358,   359,  1979,   361,   362,
5554:      363,   364,   365,   366,   367,   368,   369,   370,    25,   371,
5555:      372,   373,   374,   375,   772,   376,   377,   378,   379,   380,
5556:      381,   382,   383,   384,   385,     0,   386,   387,   388,   389,
5557:      390,   391,   392,   393,   394,   395,   396,   397,   398,   774,
5558:        0,   400,   401,    29,   402,   403,   404,   405,   406,   407,
5559:      408,     0,   409,   410,     0,     0,   411,   412,   777,   414,
5560:      778,     0,   416,   417,   780,   419,   420,   421,   422,   423,
5561:        0,     0,   424,   425,   426,   427,   428,   781,     0,   429,
5562:      430,   431,   432,   433,   598,   435,     0,   436,   437,   438,
5563:      439,   440,   441,     0,     0,   442,     0,    32,   443,   444,
5564:      445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
5565:      455,   456,   457,   458,   459,   460,   461,   462,   463,     0,
5566:       89,    33,   560,     0,     0,     0,     0,     0,     0,     0,
5567:        0,     0,     0,     0,     0,  1980,    90,    91,    92,    93,
5568:       94,    95,    96,    97,     0,    98,    99,   100,     0,     0,
5569:        0,     0,     0,     0,     0,   101,   102,     0,   103,   104,
5570:      105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
5571:        0,   115,   116,   117,   118,   119,   120,     0,   736,   121,
5572:      122,   123,   124,   125,     0,   126,   127,   128,   129,   739,
5573:        0,   740,     0,   132,   133,   134,   135,   136,   137,   138,
5574:      139,   140,     0,   141,   142,   143,   144,   145,   146,     0,
5575:      147,   148,   149,   150,   741,   742,   743,   744,   745,   746,
5576:      747,   152,   153,   154,   155,   156,   157,   158,   159,   160,
5577:      161,     0,   162,     0,   163,   164,   165,   166,   167,   168,
5578:        0,   169,   170,   171,   172,   173,     0,     0,   174,   175,
5579:      176,   177,   178,     0,   179,   180,   181,     0,   182,   183,
5580:      184,     0,   185,   186,   187,   188,   189,   190,   191,   192,
5581:      193,   753,     0,   195,     0,   196,   197,   198,   199,     0,
5582:      200,     0,   201,   202,     0,   203,   204,   205,   206,   207,
5583:      208,     0,   209,     0,   210,   211,     0,   212,   213,   214,
5584:      215,   216,   217,   218,   219,   220,   221,   222,     0,   223,
5585:      224,   225,   226,   227,   228,     0,   229,   230,   231,   232,
5586:      233,   234,   235,   236,   237,     0,   238,     0,   239,   240,
5587:      241,   242,   243,   244,   245,   246,   247,   248,  1978,     0,
5588:      249,   250,   251,   252,     0,   253,   254,   255,   759,   760,
5589:      256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
5590:      266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
5591:      276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
5592:      286,     0,   287,   288,   289,   290,     0,   765,   292,   293,
5593:      294,   295,   296,     0,   297,   298,     0,   561,   299,   300,
5594:      301,     0,     0,   302,   303,   304,   305,   306,   768,   308,
5595:      309,   310,   311,   312,   313,   314,   315,   316,   317,     0,
5596:      318,   319,   769,   321,   322,   323,   324,   325,   326,     0,
5597:      327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
5598:      337,   338,   339,   340,     0,   341,   342,   343,   344,   345,
5599:      346,   347,   348,   349,   350,   351,   352,     0,   353,   354,
5600:      355,   356,   357,   358,   359,  1979,   361,   362,   363,   364,
5601:      365,   366,   367,   368,   369,   370,     0,   371,   372,   373,
5602:      374,   375,   772,   376,   377,   378,   379,   380,   381,   382,
5603:      383,   384,   385,     0,   386,   387,   388,   389,   390,   391,
5604:      392,   393,   394,   395,   396,   397,   398,   774,     0,   400,
5605:      401,     0,   402,   403,   404,   405,   406,   407,   408,     0,
5606:      409,   410,     0,     0,   411,   412,   777,   414,   778,     0,
5607:      416,   417,   780,   419,   420,   421,   422,   423,     0,     0,
5608:      424,   425,   426,   427,   428,   781,     0,   429,   430,   431,
5609:      432,   433,   434,   435,     0,   436,   437,   438,   439,   440,
5610:      441,     0,     0,   442,     0,     0,   443,   444,   445,   446,
5611:      447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
5612:      457,   458,   459,   460,   461,   462,   463,     0,    89,     0,
5613:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
5614:        0,     0,     0,  1980,    90,    91,    92,    93,    94,    95,
5615:       96,    97,     0,    98,    99,   100,     0,     0,     0,     0,
5616:        0,     0,     0,   101,   102,     0,   103,   104,   105,   106,
5617:      107,   108,   109,   110,   111,   112,   113,   114,     0,   115,
5618:      116,   117,   118,   119,   120,     0,   736,   121,   122,   123,
5619:      124,   125,     0,   126,   127,   128,   129,   739,     0,   740,
5620:        0,   132,   133,   134,   135,   136,   137,   138,   139,   140,
5621:        0,   141,   142,   143,   144,   145,   146,     0,   147,   148,
5622:      149,   150,   741,   742,   743,   744,   745,   746,   747,   152,
5623:      153,   154,   155,   156,   157,   158,   159,   160,   161,     0,
5624:      162,     0,   163,   164,   165,   166,   167,   168,     0,   169,
5625:      170,   171,   172,   173,     0,     0,   174,   175,   176,   177,
5626:      178,     0,   179,   180,   181,     0,   182,   183,   184,     0,
5627:      185,   186,   187,   188,   189,   190,   191,   192,   193,   753,
5628:        0,   195,     0,   196,   197,   198,   199,     0,   200,     0,
5629:      201,   202,     0,   203,   204,   205,   206,   207,   208,     0,
5630:      209,     0,   210,   211,     0,   212,   213,   214,   215,   216,
5631:      217,   218,   219,   220,   221,   222,     0,   223,   224,   225,
5632:      226,   227,   228,     0,   229,   230,   231,   232,   233,   234,
5633:      235,   236,   237,     0,   238,     0,   239,   240,   241,   242,
5634:      243,   244,   245,   246,   247,   248,     0,     0,   249,   250,
5635:      251,   252,     0,   253,   254,   255,   759,   760,   256,   257,
5636:      258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
5637:      268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
5638:      278,   279,   280,   281,   282,   283,   284,   285,   286,     0,
5639:      287,   288,   289,   290,     0,   765,   292,   293,   294,   295,
5640:      296,     0,   297,   298,     0,     0,   299,   300,   301,     0,
5641:        0,   302,   303,   304,   305,   306,   768,   308,   309,   310,
5642:      311,   312,   313,   314,   315,   316,   317,     0,   318,   319,
5643:      769,   321,   322,   323,   324,   325,   326,     0,   327,   328,
5644:      329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
5645:      339,   340,     0,   341,   342,   343,   344,   345,   346,   347,
5646:      348,   349,   350,   351,   352,     0,   353,   354,   355,   356,
5647:      357,   358,   359,  1979,   361,   362,   363,   364,   365,   366,
5648:      367,   368,   369,   370,     0,   371,   372,   373,   374,   375,
5649:      772,   376,   377,   378,   379,   380,   381,   382,   383,   384,
5650:      385,     0,   386,   387,   388,   389,   390,   391,   392,   393,
5651:      394,   395,   396,   397,   398,   774,     0,   400,   401,     0,
5652:      402,   403,   404,   405,   406,   407,   408,     0,   409,   410,
5653:        0,     0,   411,   412,   777,   414,   778,     0,   416,   417,
5654:      780,   419,   420,   421,   422,   423,     0,     0,   424,   425,
5655:      426,   427,   428,   781,     0,   429,   430,   431,   432,   433,
5656:      434,   435,     0,   436,   437,   438,   439,   440,   441,     0,
5657:        0,   442,     0,     0,   443,   444,   445,   446,   447,   448,
5658:      449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
5659:      459,   460,   461,   462,   463,     0,    89,     0,     0,     0,
5660:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
5661:        0,    34,    90,    91,    92,    93,    94,    95,    96,    97,
5662:        0,    98,    99,   100,     0,     0,     0,     0,     0,     0,
5663:        0,   101,   102,     0,   103,   104,   105,   106,   107,   108,
5664:      109,   110,   111,   112,   113,   114,     0,   115,   116,   117,
5665:      118,   119,   120,     0,   736,   121,   122,   123,   124,   125,
5666:        0,   126,   127,   128,   129,   739,     0,   740,     0,   132,
5667:      133,   134,   135,   136,   137,   138,   139,   140,     0,   141,
5668:      142,   143,   144,   145,   146,     0,   147,   148,   149,   150,
5669:      741,   742,   743,   744,   745,   746,   747,   152,   153,   154,
5670:      155,   156,   157,   158,   159,   160,   161,     0,   162,     0,
5671:      163,   164,   165,   166,   167,   168,     0,   169,   170,   171,
5672:      172,   173,     0,     0,   174,   175,   176,   177,   178,     0,
5673:      179,   180,   181,     0,   182,   183,   184,     0,   185,   186,
5674:      187,   188,   189,   190,   191,   192,   193,   753,     0,   195,
5675:        0,   196,   197,   198,   199,     0,   200,     0,   201,   202,
5676:        0,   203,   204,   205,   206,   207,   208,     0,   209,     0,
5677:      210,   211,     0,   212,   213,   214,   215,   216,   217,   218,
5678:      219,   220,   221,   222,     0,   223,   224,   225,   226,   227,
5679:      228,     0,   229,   230,   231,   232,   233,   234,   235,   236,
5680:      237,     0,   238,     0,   239,   240,   241,   242,   243,   244,
5681:      245,   246,   247,   248,     0,     0,   249,   250,   251,   252,
5682:        0,   253,   254,   255,   759,   760,   256,   257,   258,   259,
5683:      260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
5684:      270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
5685:      280,   281,   282,   283,   284,   285,   286,     0,   287,   288,
5686:      289,   290,     0,   765,   292,   293,   294,   295,   296,     0,
5687:      297,   298,     0,     0,   299,   300,   301,     0,     0,   302,
5688:      303,   304,   305,   306,   768,   308,   309,   310,   311,   312,
5689:      313,   314,   315,   316,   317,     0,   318,   319,   769,   321,
5690:      322,   323,   324,   325,   326,     0,   327,   328,   329,   330,
5691:      331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
5692:        0,   341,   342,   343,   344,   345,   346,   347,   348,   349,
5693:      350,   351,   352,     0,   353,   354,   355,   356,   357,   358,
5694:      359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
5695:      369,   370,     0,   371,   372,   373,   374,   375,   772,   376,
5696:      377,   378,   379,   380,   381,   382,   383,   384,   385,     0,
5697:      386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
5698:      396,   397,   398,   774,     0,   400,   401,     0,   402,   403,
5699:      404,   405,   406,   407,   408,     0,   409,   410,     0,     0,
5700:      411,   412,   777,   414,   778,     0,   416,   417,   780,   419,
5701:      420,   421,   422,   423,     0,     0,   424,   425,   426,   427,
5702:      428,   781,     0,   429,   430,   431,   432,   433,   434,   435,
5703:        0,   436,   437,   438,   439,   440,   441,     0,     0,   442,
5704:        0,     0,   443,   444,   445,   446,   447,   448,   449,   450,
5705:      451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
5706:      461,   462,   463,     0,   655,  1083,   535,     0,     0,     0,
5707:      729,     0,     0,     0,     0,     0,     0,     0,     0,  2598,
5708:       90,    91,    92,    93,    94,    95,    96,    97,     0,    98,
5709:       99,   100,     0,     0,     0,     0,     0,     0,     0,   101,
5710:      102,     0,   103,   104,   105,     0,   107,   108,   109,   656,
5711:      657,     0,   658,   659,     0,   115,   116,   117,   118,   119,
5712:      120,     0,     0,   121,   122,   660,   661,   125,     0,   126,
5713:      127,   128,   129,   662,     0,     0,     0,   132,   133,   134,
5714:      135,   136,     0,   138,   139,   140,     0,   141,   142,   143,
5715:      144,   145,   146,     0,     0,   148,   149,   150,     0,     0,
5716:        0,     0,     0,     0,     0,   152,   153,   154,   155,   156,
5717:      157,   158,   663,   664,   161,     0,   162,     0,   163,   164,
5718:      165,   166,   167,   168,     0,   169,   170,   171,   172,   173,
5719:        0,     0,   174,   175,   176,   177,   178,     0,   179,   180,
5720:      181,     0,   182,   183,   184,     0,   185,   186,   187,   188,
5721:      665,   190,   191,   192,   193,   666,  1084,   195,     0,   196,
5722:      197,   667,   199,     0,   200,     0,   201,     0,     0,     0,
5723:      204,   205,   206,     0,   208,     0,   209,     0,   668,   211,
5724:        0,   212,   213,   214,   215,   216,   217,     0,   219,   220,
5725:      221,   222,     0,   223,   224,   225,   226,   227,   228,     0,
5726:      229,     0,   669,   232,   233,   234,   235,   670,   671,     0,
5727:      672,     0,   239,     0,     0,   242,     0,   244,   245,   246,
5728:      247,   248,     0,     0,   249,     0,   251,     0,     0,   253,
5729:      254,   255,     0,     0,   256,   257,   258,   259,   260,   673,
5730:      262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
5731:      272,   273,   274,   275,   276,   277,   278,   279,   674,     0,
5732:      675,   283,   284,   285,   676,     0,   287,   288,     0,   290,
5733:        0,   677,   292,   678,   294,   295,   296,     0,   297,   298,
5734:     1085,     0,   299,   300,   301,     0,     0,   302,   679,     0,
5735:      305,     0,   680,   308,   309,   310,   311,   312,   313,   314,
5736:      315,   316,   317,     0,   318,   319,   681,   321,   322,   682,
5737:      324,   325,   326,     0,   327,   328,   329,   330,   331,   332,
5738:      333,   334,   335,   683,   337,   338,   339,   340,     0,   341,
5739:      342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
5740:      352,     0,   353,   354,     0,   356,   357,   358,   684,   360,
5741:      361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
5742:        0,   371,   372,   373,   374,   375,     0,   376,   685,   378,
5743:      379,   380,     0,   382,   383,   686,   385,     0,   386,   387,
5744:      388,   389,   390,   391,   392,   393,   394,   395,   396,   687,
5745:      398,   688,     0,   400,   401,     0,   402,     0,   404,   405,
5746:      406,   407,   408,     0,   689,   690,     0,     0,   411,   412,
5747:      691,   414,   692,  1086,   416,   417,   693,   419,   420,   421,
5748:      422,   423,     0,     0,   424,   425,   426,   427,   428,     0,
5749:        0,   429,   430,   431,   432,   433,  1032,   695,     0,   436,
5750:        0,   438,   439,   440,   441,     0,     0,   442,     0,     0,
5751:      443,   444,   445,   446,   447,   448,   696,   697,   698,   699,
5752:      700,   701,   702,   703,   704,   705,   706,   460,   461,   462,
5753:      463,     0,   655,     0,     0,     0,     0,     0,  1087,  1088,
5754:     1843,     0,     0,     0,     0,     0,     0,  1844,    90,    91,
5755:       92,    93,    94,    95,    96,    97,     0,    98,    99,   100,
5756:        3,     4,     0,     0,     0,     0,     0,   101,   102,     0,
5757:      103,   104,   105,     0,   107,   108,   109,   656,   657,     0,
5758:      658,   659,     0,   115,   116,   117,   118,   119,   120,     0,
5759:        0,   121,   122,   660,   661,   125,     0,   126,   127,   128,
5760:      129,   662,     0,     0,     0,   132,   133,   134,   135,   136,
5761:        0,   138,   139,   140,     0,   141,   142,   143,   144,   145,
5762:      146,     0,     0,   148,   149,   150,     0,     0,     0,     0,
5763:        0,     0,     0,   152,   153,   154,   155,   156,   157,   158,
5764:      663,   664,   161,     0,   162,     0,   163,   164,   165,   166,
5765:      167,   168,     0,   169,   170,   171,   172,   173,     0,     0,
5766:      174,   175,   176,   177,   178,     0,   179,   180,   181,     0,
5767:      182,   183,   184,     0,   185,   186,   187,   188,   665,   190,
5768:      191,   192,   193,   666,     0,   195,     0,   196,   197,   667,
5769:      199,     0,   200,     0,   201,     0,     0,     0,   204,   205,
5770:      206,     0,   208,     0,   209,     0,   668,   211,     0,   212,
5771:      213,   214,   215,   216,   217,     0,   219,   220,   221,   222,
5772:        0,   223,   224,   225,   226,   227,   228,     0,   229,     0,
5773:      669,   232,   233,   234,   235,   670,   671,     0,   672,     0,
5774:      239,     0,     0,   242,     0,   244,   245,   246,   247,   248,
5775:        0,     0,   249,     0,   251,     0,     0,   253,   254,   255,
5776:        0,     0,   256,   257,   258,   259,   260,   673,   262,   263,
5777:      264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
5778:      274,   275,   276,   277,   278,   279,   674,     0,   675,   283,
5779:      284,   285,   676,     0,   287,   288,     0,   290,     0,   677,
5780:      292,   678,   294,   295,   296,     0,   297,   298,     0,     0,
5781:      299,   300,   301,     0,     0,   302,   679,     0,   305,     0,
5782:      680,   308,   309,   310,   311,   312,   313,   314,   315,   316,
5783:      317,     0,   318,   319,   681,   321,   322,   682,   324,   325,
5784:      326,     0,   327,   328,   329,   330,   331,   332,   333,   334,
5785:      335,   683,   337,   338,   339,   340,     0,   341,   342,   343,
5786:      344,   345,   346,   347,   348,   349,   350,   351,   352,     0,
5787:      353,   354,     0,   356,   357,   358,   684,   360,   361,   362,
5788:      363,   364,   365,   366,   367,   368,   369,   370,    25,   371,
5789:      372,   373,   374,   375,     0,   376,   685,   378,   379,   380,
5790:        0,   382,   383,   686,   385,     0,   386,   387,   388,   389,
5791:      390,   391,   392,   393,   394,   395,   396,   687,   398,   688,
5792:        0,   400,   401,    29,   402,     0,   404,   405,   406,   407,
5793:      408,     0,   689,   690,     0,     0,   411,   412,   691,   414,
5794:      692,     0,   416,   417,   693,   419,   420,   421,   422,   423,
5795:        0,     0,   424,   425,   426,   427,   428,     0,     0,   429,
5796:      430,   431,   432,   433,   694,   695,     0,   436,     0,   438,
5797:      439,   440,   441,     0,     0,   442,     0,    32,   443,   444,
5798:      445,   446,   447,   448,   696,   697,   698,   699,   700,   701,
5799:      702,   703,   704,   705,   706,   460,   461,   462,   463,     0,
5800:      488,    33,     0,     0,     0,     0,     0,     0,     0,     0,
5801:        0,     0,     0,     0,     0,    34,    90,    91,    92,    93,
5802:       94,    95,    96,    97,   595,    98,    99,   100,     0,     0,
5803:        0,     0,     0,     0,     0,   101,   102,     0,   103,   104,
5804:      105,     0,   107,   108,   109,   110,   111,     0,   113,   114,
5805:        0,   115,   116,   117,   118,   119,   120,     0,     0,   121,
5806:      122,   123,   124,   125,     0,   126,   127,   128,   129,   130,
5807:        0,     0,     0,   132,   133,   134,   135,   136,     0,   138,
5808:      139,   140,     0,   141,   142,   143,   144,   145,   146,     0,
5809:        0,   148,   149,   150,     0,     0,     0,     0,     0,     0,
5810:        0,   152,   153,   154,   155,   156,   157,   158,   159,   160,
5811:      161,     0,   162,     0,   163,   164,   165,   166,   167,   168,
5812:        0,   169,   170,   171,   172,   173,     0,     0,   174,   175,
5813:      176,   177,   178,     0,   179,   180,   181,     0,   182,   183,
5814:      184,     0,   185,   186,   187,   188,   189,   190,   191,   192,
5815:      193,   194,     0,   195,     0,   196,   197,   198,   199,     0,
5816:      200,     0,   201,     0,     0,     0,   204,   205,   206,     0,
5817:      208,     0,   209,     0,   210,   211,     0,   212,   213,   214,
5818:      215,   216,   217,     0,   219,   220,   221,   222,     0,   223,
5819:      224,   225,   226,   227,   228,     0,   229,     0,   231,   232,
5820:      233,   234,   235,   236,   237,     0,   238,     0,   239,     0,
5821:        0,   242,     0,   244,   245,   246,   247,   248,     0,     0,
5822:      249,     0,   251,     0,     0,   253,   254,   255,     0,     0,
5823:      256,   257,   258,   259,   260,   490,   262,   263,   264,   265,
5824:      266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
5825:      276,   277,   278,   279,   280,     0,   282,   283,   284,   285,
5826:      286,     0,   287,   288,     0,   290,     0,   291,   292,   293,
5827:      294,   295,   296,     0,   297,   298,     0,     0,   299,   300,
5828:      301,     0,     0,   302,   303,     0,   305,     0,   307,   308,
5829:      309,   310,   311,   312,   313,   314,   315,   316,   317,     0,
5830:      318,   319,   320,   321,   322,   323,   324,   325,   326,     0,
5831:      327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
5832:      337,   338,   339,   340,     0,   341,   342,   343,   344,   345,
5833:      346,   347,   348,   349,   350,   351,   352,     0,   353,   354,
5834:        0,   356,   357,   358,   359,   360,   361,   362,   363,   364,
5835:      365,   366,   367,   368,   369,   370,    25,   371,   372,   373,
5836:      374,   375,     0,   376,   377,   378,   379,   380,     0,   382,
5837:      383,   384,   385,     0,   386,   387,   388,   389,   390,   391,
5838:      392,   393,   394,   395,   396,   492,   398,   399,     0,   400,
5839:      401,    29,   402,     0,   404,   405,   406,   407,   408,     0,
5840:      596,   410,     0,     0,   597,   412,   413,   414,   415,     0,
5841:      416,   417,   418,   419,   420,   421,   422,   423,     0,     0,
5842:      424,   425,   426,   427,   428,     0,     0,   429,   430,   431,
5843:      432,   433,   598,   435,     0,   436,     0,   438,   439,   440,
5844:      441,     0,     0,   442,     0,    32,   443,   444,   445,   446,
5845:      447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
5846:      457,   458,   459,   460,   461,   462,   463,     0,   488,    33,
5847:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
5848:        0,     0,     0,    34,    90,    91,    92,    93,    94,    95,
5849:       96,    97,     0,    98,    99,   100,     0,     0,     0,     0,
5850:        0,     0,     0,   101,   102,     0,   103,   104,   105,     0,
5851:      107,   108,   109,   110,   111,     0,   113,   114,     0,   115,
5852:      116,   117,   118,   119,   120,     0,     0,   121,   122,   123,
5853:      124,   125,     0,   126,   127,   128,   129,   130,     0,     0,
5854:        0,   132,   133,   134,   135,   136,     0,   138,   139,   140,
5855:        0,   141,   142,   143,   144,   145,   146,     0,     0,   148,
5856:      149,   150,     0,     0,     0,     0,     0,     0,     0,   152,
5857:      153,   154,   155,   156,   157,   158,   159,   160,   161,     0,
5858:      162,     0,   163,   164,   165,   166,   167,   168,     0,   169,
5859:      170,   171,   172,   173,     0,     0,   174,   175,   176,   177,
5860:      178,     0,   179,   180,   181,     0,   182,   183,   184,     0,
5861:      185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
5862:        0,   195,     0,   196,   197,   198,   199,     0,   200,     0,
5863:      201,     0,     0,     0,   204,   205,   206,     0,   208,     0,
5864:      209,     0,   210,   211,     0,   212,   213,   214,   215,   216,
5865:      217,     0,   219,   220,   221,   222,     0,   223,   224,   225,
5866:      226,   227,   228,     0,   229,     0,   231,   232,   233,   234,
5867:      235,   236,   237,     0,   238,     0,   239,     0,     0,   242,
5868:        0,   244,   245,   246,   247,   248,     0,     0,   249,     0,
5869:      251,     0,     0,   253,   254,   255,     0,     0,   256,   257,
5870:      258,   259,   260,   490,   262,   263,   264,   265,   266,   267,
5871:      268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
5872:      278,   279,   280,     0,   282,   283,   284,   285,   286,     0,
5873:      287,   288,     0,   290,     0,   291,   292,   293,   294,   295,
5874:      296,     0,   297,   298,     0,     0,   299,   300,   301,     0,
5875:        0,   302,   303,     0,   305,     0,   307,   308,   309,   310,
5876:      311,   312,   313,   314,   315,   316,   317,     0,   318,   319,
5877:      320,   321,   322,   323,   324,   325,   326,     0,   327,   328,
5878:      329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
5879:      339,   340,     0,   341,   342,   343,   344,   345,   346,   347,
5880:      348,   349,   350,   351,   352,     0,   353,   354,     0,   356,
5881:      357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
5882:      367,   368,   369,   370,    25,   371,   372,   373,   374,   375,
5883:        0,   376,   377,   378,   379,   380,     0,   382,   383,   384,
5884:      385,     0,   386,   387,   388,   389,   390,   391,   392,   393,
5885:      394,   395,   396,   492,   398,   399,     0,   400,   401,    29,
5886:      402,     0,   404,   405,   406,   407,   408,     0,   409,   410,
5887:        0,     0,   411,   412,   413,   414,   415,     0,   416,   417,
5888:      418,   419,   420,   421,   422,   423,     0,     0,   424,   425,
5889:      426,   427,   428,     0,     0,   429,   430,   431,   432,   433,
5890:      598,   435,     0,   436,     0,   438,   439,   440,   441,     0,
5891:        0,   442,     0,    32,   443,   444,   445,   446,   447,   448,
5892:      449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
5893:      459,   460,   461,   462,   463,     0,   488,    33,   560,     0,
5894:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
5895:        0,    34,    90,    91,    92,    93,    94,    95,    96,    97,
5896:        0,    98,    99,   100,     0,     0,     0,     0,     0,     0,
5897:        0,   101,   102,     0,   103,   104,   105,     0,   107,   108,
5898:      109,   110,   111,     0,   113,   114,     0,   115,   116,   117,
5899:      118,   119,   120,     0,     0,   121,   122,   123,   124,   125,
5900:        0,   126,   127,   128,   129,   130,     0,     0,     0,   132,
5901:      133,   134,   135,   136,     0,   138,   139,   140,     0,   141,
5902:      142,   143,   144,   145,   146,     0,     0,   148,   149,   150,
5903:        0,     0,     0,     0,     0,     0,     0,   152,   153,   154,
5904:      155,   156,   157,   158,   159,   160,   161,     0,   162,     0,
5905:      163,   164,   165,   166,   167,   168,     0,   169,   170,   171,
5906:      172,   173,     0,     0,   174,   175,   176,   177,   178,     0,
5907:      179,   180,   181,     0,   182,   183,   184,     0,   185,   186,
5908:      187,   188,   189,   190,   191,   192,   193,   194,     0,   195,
5909:        0,   196,   197,   198,   199,     0,   200,     0,   201,     0,
5910:        0,     0,   204,   205,   206,     0,   208,     0,   209,     0,
5911:      210,   211,     0,   212,   213,   214,   215,   216,   217,     0,
5912:      219,   220,   221,   222,     0,   223,   224,   225,   226,   227,
5913:      228,     0,   229,     0,   231,   232,   233,   234,   235,   236,
5914:      237,     0,   238,     0,   239,     0,     0,   242,     0,   244,
5915:      245,   246,   247,   248,     0,     0,   249,     0,   251,     0,
5916:        0,   253,   254,   255,     0,     0,   256,   257,   258,   259,
5917:      260,   490,   262,   263,   264,   265,   266,   267,   268,   269,
5918:      270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
5919:      280,     0,   282,   283,   284,   285,   286,     0,   287,   288,
5920:        0,   290,     0,   291,   292,   293,   294,   295,   296,     0,
5921:      297,   298,     0,     0,   299,   300,   301,     0,     0,   302,
5922:      303,     0,   305,     0,   307,   308,   309,   310,   311,   312,
5923:      313,   314,   315,   316,   317,     0,   318,   319,   320,   321,
5924:      322,   323,   324,   325,   326,     0,   327,   328,   329,   330,
5925:      331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
5926:        0,   341,   342,   343,   344,   345,   346,   347,   348,   349,
5927:      350,   351,   352,     0,   353,   354,     0,   356,   357,   358,
5928:      359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
5929:      369,   370,     0,   371,   372,   373,   374,   375,     0,   376,
5930:      377,   378,   379,   380,     0,   382,   383,   384,   385,     0,
5931:      386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
5932:      396,   492,   398,   399,     0,   400,   401,     0,   402,     0,
5933:      404,   405,   406,   407,   408,     0,   409,   410,     0,     0,
5934:      411,   412,   413,   414,   415,     0,   416,   417,   418,   419,
5935:      420,   421,   422,   423,     0,     0,   424,   425,   426,   427,
5936:      428,     0,     0,   429,   430,   431,   432,   433,   434,   435,
5937:        0,   436,     0,   438,   439,   440,   441,     0,     0,   442,
5938:        0,     0,   443,   444,   445,   446,   447,   448,   449,   450,
5939:      451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
5940:      461,   462,   463,     0,   488,     0,   560,     0,     0,     0,
5941:        0,     0,     0,     0,     0,     0,     0,     0,     0,   830,
5942:       90,    91,    92,    93,    94,    95,    96,    97,     0,    98,
5943:       99,   100,     0,     0,     0,     0,     0,     0,     0,   101,
5944:      102,     0,   103,   104,   105,     0,   107,   108,   109,   110,
5945:      111,     0,   113,   114,     0,   115,   116,   117,   118,   119,
5946:      120,     0,     0,   121,   122,   123,   124,   125,     0,   126,
5947:      127,   128,   129,   130,     0,     0,     0,   132,   133,   134,
5948:      135,   136,     0,   138,   139,   140,     0,   141,   142,   143,
5949:      144,   145,   146,     0,     0,   148,   149,   150,     0,     0,
5950:        0,     0,     0,     0,     0,   152,   153,   154,   155,   156,
5951:      157,   158,   159,   160,   161,     0,   162,     0,   163,   164,
5952:      165,   166,   167,   168,     0,   169,   170,   171,   172,   173,
5953:        0,     0,   174,   175,   176,   177,   178,     0,   179,   180,
5954:      181,     0,   182,   183,   184,     0,   185,   186,   187,   188,
5955:      189,   190,   191,   192,   193,   194,     0,   195,     0,   196,
5956:      197,   198,   199,     0,   200,     0,   201,     0,     0,     0,
5957:      204,   205,   206,     0,   208,     0,   209,     0,   210,   211,
5958:        0,   212,   213,   214,   215,   216,   217,     0,   219,   220,
5959:      221,   222,     0,   223,   224,   225,   226,   227,   228,     0,
5960:      229,     0,   231,   232,   233,   234,   235,   236,   237,     0,
5961:      238,     0,   239,     0,     0,   242,     0,   244,   245,   246,
5962:      247,   248,     0,     0,   249,     0,   251,     0,     0,   253,
5963:      254,   255,     0,     0,   256,   257,   258,   259,   260,   490,
5964:      262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
5965:      272,   273,   274,   275,   276,   277,   278,   279,   280,     0,
5966:      282,   283,   284,   285,   286,     0,   287,   288,     0,   290,
5967:        0,   291,   292,   293,   294,   295,   296,     0,   297,   298,
5968:        0,     0,   299,   300,   301,     0,     0,   302,   303,     0,
5969:      305,     0,   307,   308,   309,   310,   311,   312,   313,   314,
5970:      315,   316,   317,     0,   318,   319,   320,   321,   322,   323,
5971:      324,   325,   326,     0,   327,   328,   329,   330,   331,   332,
5972:      333,   334,   335,   336,   337,   338,   339,   340,     0,   341,
5973:      342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
5974:      352,     0,   353,   354,     0,   356,   357,   358,   359,   360,
5975:      361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
5976:        0,   371,   372,   373,   374,   375,     0,   376,   377,   378,
5977:      379,   380,     0,   382,   383,   384,   385,     0,   386,   387,
5978:      388,   389,   390,   391,   392,   393,   394,   395,   396,   492,
5979:      398,   399,     0,   400,   401,     0,   402,     0,   404,   405,
5980:      406,   407,   408,     0,   409,   410,     0,     0,   411,   412,
5981:      413,   414,   415,     0,   416,   417,   418,   419,   420,   421,
5982:      422,   423,     0,     0,   424,   425,   426,   427,   428,     0,
5983:        0,   429,   430,   431,   432,   433,   434,   435,     0,   436,
5984:        0,   438,   439,   440,   441,     0,     0,   442,     0,     0,
5985:      443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
5986:      453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
5987:      463,     0,   488,     0,     0,     0,     0,     0,     0,     0,
5988:        0,     0,     0,     0,     0,     0,     0,  2446,    90,    91,
5989:       92,    93,    94,    95,    96,    97,     0,    98,    99,   100,
5990:        0,     0,     0,     0,     0,     0,     0,   101,   102,     0,
5991:      103,   104,   105,     0,   107,   108,   109,   110,   111,     0,
5992:      113,   114,     0,   115,   116,   117,   118,   119,   120,     0,
5993:        0,   121,   122,   123,   124,   125,     0,   126,   127,   128,
5994:      129,   130,     0,     0,     0,   132,   133,   134,   135,   136,
5995:        0,   138,   139,   140,     0,   141,   142,   143,   144,   145,
5996:      146,     0,     0,   148,   149,   150,     0,     0,     0,     0,
5997:        0,     0,     0,   152,   153,   154,   155,   156,   157,   158,
5998:      159,   160,   161,     0,   162,     0,   163,   164,   165,   166,
5999:      167,   168,     0,   169,   170,   171,   172,   173,     0,     0,
6000:      174,   175,   176,   177,   178,     0,   179,   180,   181,     0,
6001:      182,   183,   184,     0,   185,   186,   187,   188,   189,   190,
6002:      191,   192,   193,   194,     0,   195,     0,   196,   197,   198,
6003:      199,     0,   200,     0,   201,     0,     0,     0,   204,   205,
6004:      206,     0,   208,     0,   209,     0,   210,   211,     0,   212,
6005:      213,   214,   215,   216,   217,     0,   219,   220,   221,   222,
6006:        0,   223,   224,   225,   226,   227,   228,     0,   229,     0,
6007:      231,   232,   233,   234,   235,   236,   237,     0,   238,     0,
6008:      239,     0,     0,   242,     0,   244,   245,   246,   247,   248,
6009:        0,     0,   249,     0,   251,     0,     0,   253,   254,   255,
6010:        0,     0,   256,   257,   258,   259,   260,   490,   262,   263,
6011:      264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
6012:      274,   275,   276,   277,   278,   279,   280,     0,   282,   283,
6013:      284,   285,   286,     0,   287,   288,     0,   290,     0,   291,
6014:      292,   293,   294,   295,   296,     0,   297,   298,     0,     0,
6015:      299,   300,   301,     0,     0,   302,   303,     0,   305,     0,
6016:      307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
6017:      317,     0,   318,   319,   320,   321,   322,   323,   324,   325,
6018:      326,     0,   327,   328,   329,   330,   331,   332,   333,   334,
6019:      335,   336,   337,   338,   339,   340,     0,   341,   342,   343,
6020:      344,   345,   346,   347,   348,   349,   350,   351,   352,     0,
6021:      353,   354,     0,   356,   357,   358,   359,   360,   361,   362,
6022:      363,   364,   365,   366,   367,   368,   369,   370,     0,   371,
6023:      372,   373,   374,   375,     0,   376,   377,   378,   379,   380,
6024:        0,   382,   383,   384,   385,     0,   386,   387,   388,   389,
6025:      390,   391,   392,   393,   394,   395,   396,   492,   398,   399,
6026:        0,   400,   401,     0,   402,     0,   404,   405,   406,   407,
6027:      408,     0,   409,   410,     0,     0,   411,   412,   413,   414,
6028:      415,     0,   416,   417,   418,   419,   420,   421,   422,   423,
6029:        0,     0,   424,   425,   426,   427,   428,     0,     0,   429,
6030:      430,   431,   432,   433,   434,   435,     0,   436,     0,   438,
6031:      439,   440,   441,     0,     0,   442,     0,     0,   443,   444,
6032:      445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
6033:      455,   456,   457,   458,   459,   460,   461,   462,   463,     0,
6034:      488,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6035:        0,     0,     0,     0,     0,  1697,    90,    91,    92,    93,
6036:       94,    95,    96,    97,     0,    98,    99,   100,     0,     0,
6037:        0,     0,     0,     0,     0,   101,   102,     0,   103,   104,
6038:      105,     0,   107,   108,   109,   110,   111,     0,   113,   114,
6039:        0,   115,   116,   117,   118,   119,   120,     0,     0,   121,
6040:      122,   123,   124,   125,     0,   126,   127,   128,   129,   130,
6041:        0,     0,     0,   132,   133,   134,   135,   136,     0,   138,
6042:      139,   140,     0,   141,   142,   143,   144,   145,   146,     0,
6043:        0,   148,   149,   150,     0,     0,     0,     0,     0,     0,
6044:        0,   152,   153,   154,   155,   156,   157,   158,   159,   160,
6045:      161,     0,   162,     0,   163,   164,   165,   166,   167,   168,
6046:        0,   169,   170,   171,   172,   173,     0,     0,   174,   175,
6047:      176,   177,   178,     0,   179,   180,   181,     0,   182,   183,
6048:      184,     0,   185,   186,   187,   188,   189,   190,   191,   192,
6049:      193,   194,     0,   195,     0,   196,   197,   198,   199,     0,
6050:      200,     0,   201,     0,     0,     0,   204,   205,   206,     0,
6051:      208,     0,   209,     0,   210,   211,     0,   212,   213,   214,
6052:      215,   216,   217,     0,   219,   220,   221,   222,     0,   223,
6053:      224,   225,   226,   227,   228,     0,   229,     0,   231,   232,
6054:      233,   234,   235,   236,   237,     0,   238,     0,   239,     0,
6055:        0,   242,     0,   244,   245,   246,   247,   248,     0,     0,
6056:      249,     0,   251,     0,     0,   253,   254,   255,     0,     0,
6057:      256,   257,   258,   259,   260,   490,   262,   263,   264,   265,
6058:      266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
6059:      276,   277,   278,   279,   280,     0,   282,   283,   284,   285,
6060:      286,     0,   287,   288,     0,   290,     0,   291,   292,   293,
6061:      294,   295,   296,     0,   297,   298,     0,     0,   299,   300,
6062:      301,     0,     0,   302,   303,     0,   305,     0,   307,   308,
6063:      309,   310,   311,   312,   313,   314,   315,   316,   317,     0,
6064:      318,   319,   320,   321,   322,   323,   324,   325,   326,     0,
6065:      327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
6066:      337,   338,   339,   340,     0,   341,   342,   343,   344,   345,
6067:      346,   347,   348,   349,   350,   351,   352,     0,   353,   354,
6068:        0,   356,   357,   358,   359,   360,   361,   362,   363,   364,
6069:      365,   366,   367,   368,   369,   370,     0,   371,   372,   373,
6070:      374,   375,     0,   376,   377,   378,   379,   380,     0,   382,
6071:      383,   384,   385,     0,   386,   387,   388,   389,   390,   391,
6072:      392,   393,   394,   395,   396,   492,   398,   399,     0,   400,
6073:      401,     0,   402,     0,   404,   405,   406,   407,   408,     0,
6074:      409,   410,     0,     0,   411,   412,   413,   414,   415,     0,
6075:      416,   417,   418,   419,   420,   421,   422,   423,     0,     0,
6076:      424,   425,   426,   427,   428,     0,     0,   429,   430,   431,
6077:      432,   433,   434,   435,     0,   436,     0,   438,   439,   440,
6078:      441,     0,     0,   442,     0,     0,   443,   444,   445,   446,
6079:      447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
6080:      457,   458,   459,   460,   461,   462,   463,     0,     0,     0,
6081:        0,  2309,  1083,   535,     0,     0,  1553,   729,     0,     0,
6082:        0,     0,     0,  2208,  1554,  1555,  1556,    90,    91,    92,
6083:       93,    94,    95,    96,    97,   960,    98,    99,   100,   961,
6084:      962,   963,   964,   965,   966,   967,   101,   102,   968,   103,
6085:      104,   105,  2310,   107,   108,   109,     0,  1108,  2311,  1110,
6086:     1111,   969,   115,   116,   117,   118,   119,   120,   970,   971,
6087:      121,   122,  1112,  1113,   125,   972,   126,   127,   128,   129,
6088:        0,   973,  2312,   974,   132,   133,   134,   135,   136,  2313,
6089:      138,   139,   140,   975,   141,   142,   143,   144,   145,   146,
6090:      976,  2314,   148,   149,   150,   977,   978,   979,  2315,   980,
6091:      981,   982,   152,   153,   154,   155,   156,   157,   158,  1118,
6092:     1119,   161,   983,   162,   984,   163,   164,   165,   166,   167,
6093:      168,   985,   169,   170,   171,   172,   173,   986,   987,   174,
6094:      175,   751,   177,   178,   988,   179,   180,   181,   989,   182,
6095:      183,   184,   990,   185,   186,   187,   188,     0,   190,   191,
6096:      192,   193,     0,   991,   195,   992,   196,   197,  1120,   199,
6097:      993,   200,   994,   201,  2316,   995,  2317,   204,   205,   206,
6098:     2318,   208,   996,   209,   997,     0,   211,   998,   212,   213,
6099:      214,   215,   216,   217,  2319,   219,   220,   221,   222,   999,
6100:      223,   224,   225,   226,   227,   228,  1000,   229,  2320,     0,
6101:      232,   233,   234,   235,  1126,  1127,  1001,  1128,  1002,   239,
6102:     2321,  2322,   242,  2323,   244,   245,   246,   247,   248,  1003,
6103:     1004,   249,  2324,   251,  2325,  1005,   253,   254,   255,  1006,
6104:     1007,   256,   257,   258,   259,   260,  2326,   262,   263,   264,
6105:      265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
6106:      275,   276,   277,   278,   279,  1135,  2327,  1137,   283,   284,
6107:      285,  2328,  1008,   287,   288,  2329,   290,  1009,     0,   292,
6108:     1139,   294,   295,   296,  1010,   297,   298,  1011,  1012,  2330,
6109:      300,   301,  1013,  1014,   302,     0,  2331,   305,  2332,     0,
6110:      308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
6111:     1015,   318,   319,     0,   321,   322,     0,   324,   325,   326,
6112:     1016,   327,   328,   329,   330,   331,   332,   333,   334,   335,
6113:     1142,   337,   338,   339,   340,  1017,   341,   342,   343,   344,
6114:      345,   346,   347,   348,   349,   350,   351,   352,  1018,   353,
6115:      354,  2333,   356,   357,   358,  1144,   360,   361,   362,   363,
6116:      364,   365,   366,   367,   368,   369,   370,  1019,   371,   372,
6117:      373,   374,   375,  1020,   376,  2334,   378,   379,   380,  2335,
6118:      382,   383,  1147,   385,  1021,   386,   387,   388,   389,   390,
6119:      391,   392,   393,   394,   395,   396,  2336,   398,     0,  1022,
6120:      400,   401,  1023,   402,  2337,   404,   405,   406,   407,   408,
6121:     1024,  1150,  1151,  1025,  1026,   411,   412,     0,   414,     0,
6122:     1027,   416,   417,  2338,   419,   420,   421,   422,   423,  1028,
6123:     1029,   424,   425,   426,   427,   428,  1030,  1031,   429,   430,
6124:      431,   432,   433,     0,  1153,  1033,   436,  2339,   438,   439,
6125:      440,   441,  1034,  1035,   442,  1036,  1037,   443,   444,   445,
6126:      446,   447,   448,     0,     0,     0,     0,     0,     0,     0,
6127:        0,     0,     0,     0,   460,   461,   462,   463,     0,   488,
6128:        0,  1557,  1558,  1559,  1553,  2340,  2341,  1562,  1563,  1564,
6129:     1565,     0,  1554,  1555,  1556,    90,    91,    92,    93,    94,
6130:       95,    96,    97,     0,    98,    99,   100,     0,     0,     0,
6131:        0,     0,     0,     0,   101,   102,     0,   103,   104,   105,
6132:        0,   107,   108,   109,   110,   111,     0,   113,   114,     0,
6133:      115,   116,   117,   118,   119,   120,     0,     0,   121,   122,
6134:      123,   124,   125,     0,   126,   127,   128,   129,   130,     0,
6135:        0,     0,   132,   133,   134,   135,   136,     0,   138,   139,
6136:      140,     0,   141,   142,   143,   144,   145,   146,     0,     0,
6137:      148,   149,   150,     0,     0,     0,     0,     0,     0,     0,
6138:      152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
6139:        0,   162,     0,   163,   164,   165,   166,   167,   168,     0,
6140:      169,   170,   171,   172,   173,     0,     0,   174,   175,   176,
6141:      177,   178,     0,   179,   180,   181,     0,   182,   183,   184,
6142:        0,   185,   186,   187,   188,   189,   190,   191,   192,   193,
6143:      194,     0,   195,     0,   196,   197,   198,   199,     0,   200,
6144:        0,   201,     0,     0,     0,   204,   205,   206,     0,   208,
6145:        0,   209,     0,   210,   211,     0,   212,   213,   214,   215,
6146:      216,   217,     0,   219,   220,   221,   222,     0,   223,   224,
6147:      225,   226,   227,   228,     0,   229,     0,   231,   232,   233,
6148:      234,   235,   236,   237,     0,   238,     0,   239,     0,     0,
6149:      242,     0,   244,   245,   246,   247,   248,     0,     0,   249,
6150:        0,   251,     0,     0,   253,   254,   255,     0,     0,   256,
6151:      257,   258,   259,   260,   490,   262,   263,   264,   265,   266,
6152:      267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
6153:      277,   278,   279,   280,     0,   282,   283,   284,   285,   286,
6154:        0,   287,   288,     0,   290,     0,   291,   292,   293,   294,
6155:      295,   296,     0,   297,   298,     0,     0,   299,   300,   301,
6156:        0,     0,   302,   303,     0,   305,     0,   307,   308,   309,
6157:      310,   311,   312,   313,   314,   315,   316,   317,     0,   318,
6158:      319,   320,   321,   322,   323,   324,   325,   326,     0,   327,
6159:      328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
6160:      338,   339,   340,     0,   341,   342,   343,   344,   345,   346,
6161:      347,   348,   349,   350,   351,   352,     0,   353,   354,     0,
6162:      356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
6163:      366,   367,   368,   369,   370,     0,   371,   372,   373,   374,
6164:      375,     0,   376,   377,   378,   379,   380,     0,   382,   383,
6165:      384,   385,     0,   386,   387,   388,   389,   390,   391,   392,
6166:      393,   394,   395,   396,   492,   398,   399,     0,   400,   401,
6167:        0,   402,     0,   404,   405,   406,   407,   408,     0,   409,
6168:      410,     0,     0,   411,   412,   413,   414,   415,     0,   416,
6169:      417,   418,   419,   420,   421,   422,   423,     0,     0,   424,
6170:      425,   426,   427,   428,     0,     0,   429,   430,   431,   432,
6171:      433,   434,   435,     0,   436,     0,   438,   439,   440,   441,
6172:        0,     0,   442,     0,     0,   443,   444,   445,   446,   447,
6173:      448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
6174:      458,   459,   460,   461,   462,   463,     0,     0,     0,  1557,
6175:     1558,  1559,     0,  1560,  1561,  1562,  1563,  1564,  1565,  1240,
6176:        0,     0,  1241,     0,     0,     0,     0,  1242,  1243,  1244,
6177:        0,     0,     0,     0,     0,     0,     0,  1240,     0,     0,
6178:     1241,     0,     0,     0,  1245,  1242,  1243,  1244,     0,     0,
6179:        0,     0,  1247,     0,     0,  1240,     0,     0,  1241,  1248,
6180:        0,     0,  1245,  1242,  1243,  1244,     0,     0,     0,     0,
6181:     1247,     0,     0,     0,     0,     0,     0,  1248,     0,     0,
6182:     1245,     0,     0,  1240,  1249,     0,  1241,     0,  1247,     0,
6183:        0,  1242,  1243,  1244,     0,  1248,     0,     0,     0,     0,
6184:        0,  1240,  1249,     0,  1241,     0,     0,     0,  1245,  1242,
6185:     1243,  1244,     0,     0,     0,     0,  1247,     0,     0,  1240,
6186:     1249,     0,  1241,  1248,     0,     0,  1245,  1242,  1243,  1244,
6187:        0,     0,     0,     0,  1247,     0,     0,     0,     0,     0,
6188:        0,  1248,     0,     0,  1245,     0,     0,     0,  1249,     0,
6189:        0,     0,  1247,     0,     0,     0,     0,     0,     0,  1248,
6190:        0,     0,     0,     0,     0,     0,  1249,     0,     0,     0,
6191:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6192:        0,     0,     0,  1250,  1249,     0,     0,     0,     0,     0,
6193:        0,     0,     0,     0,     0,     0,     0,  1251,     0,     0,
6194:        0,  1250,  1252,     0,     0,     0,     0,     0,     0,     0,
6195:        0,     0,     0,     0,     0,  1251,     0,     0,     0,  1250,
6196:     1252,     0,     0,  1253,  1254,     0,     0,     0,     0,     0,
6197:        0,     0,     0,  1251,     0,     0,     0,  1255,  1252,     0,
6198:        0,  1253,  1254,     0,     0,     0,     0,  1250,     0,     0,
6199:        0,     0,     0,     0,     0,  1255,     0,     0,     0,  1253,
6200:     1254,  1251,     0,     0,     0,  1250,  1252,     0,     0,     0,
6201:        0,     0,     0,  1255,     0,  1256,     0,     0,  1257,  1251,
6202:        0,     0,     0,  1250,  1252,     0,     0,  1253,  1254,     0,
6203:        0,     0,  1258,  1256,     0,  1259,  1257,  1251,     0,     0,
6204:        0,  1255,  1252,     0,     0,  1253,  1254,     0,     0,     0,
6205:     1258,  1256,     0,  1259,  1257,     0,     0,     0,     0,  1255,
6206:        0,     0,     0,  1253,  1254,     0,     0,     0,  1258,     0,
6207:        0,  1259,     0,     0,     0,     0,     0,  1255,     0,  1256,
6208:        0,     0,  1257,     0,     0,     0,     0,     0,     0,     0,
6209:        0,     0,     0,     0,     0,     0,  1258,  1256,     0,  1259,
6210:     1257,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6211:        0,     0,     0,     0,  1258,  1256,     0,  1259,  1257,     0,
6212:        0,     0,  1260,     0,     0,     0,     0,     0,     0,     0,
6213:        0,     0,  1258,     0,     0,  1259,     0,     0,     0,     0,
6214:     1260,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6215:        0,     0,     0,     0,     0,     0,     0,     0,  1260,     0,
6216:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6217:     1240,     0,     0,  1241,     0,     0,     0,     0,  1242,  1243,
6218:     1244,     0,     0,     0,     0,     0,  1260,     0,     0,     0,
6219:        0,     0,     0,     0,     0,  1245,     0,     0,     0,     0,
6220:        0,     0,     0,  1247,  1260,     0,     0,     0,     0,     0,
6221:     1248,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6222:        0,  1261,  1260,     0,  1262,  1263,  1264,     0,  1265,  1266,
6223:     1267,  1268,  1269,  1270,     0,  1249,     0,     0,  2186,  1261,
6224:        0,     0,  1262,  1263,  1264,     0,  1265,  1266,  1267,  1268,
6225:     1269,  1270,     0,     0,     0,     0,  2273,  1261,     0,     0,
6226:     1262,  1263,  1264,     0,  1265,  1266,  1267,  1268,  1269,  1270,
6227:        0,     0,     0,     0,  2397,     0,     0,     0,     0,     0,
6228:        0,     0,     0,     0,     0,  1261,     0,     0,  1262,  1263,
6229:     1264,     0,  1265,  1266,  1267,  1268,  1269,  1270,     0,     0,
6230:        0,     0,  2416,  1261,     0,     0,  1262,  1263,  1264,     0,
6231:     1265,  1266,  1267,  1268,  1269,  1270,     0,     0,     0,     0,
6232:     2559,  1261,     0,     0,  1262,  1263,  1264,     0,  1265,  1266,
6233:     1267,  1268,  1269,  1270,  1250,     0,  1240,     0,  2757,  1241,
6234:        0,     0,     0,     0,  1242,  1243,  1244,     0,  1251,     0,
6235:        0,     0,     0,  1252,     0,     0,     0,     0,     0,     0,
6236:        0,  1245,     0,     0,     0,     0,     0,     0,     0,  1247,
6237:        0,     0,     0,     0,  1253,  1254,  1248,     0,     0,     0,
6238:        0,     0,     0,     0,     0,     0,     0,     0,  1255,     0,
6239:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6240:        0,  1249,     0,     0,     0,     0,     0,     0,     0,     0,
6241:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6242:        0,     0,     0,     0,     0,     0,  1256,     0,     0,  1257,
6243:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6244:        0,     0,     0,  1258,     0,     0,  1259,     0,     0,     0,
6245:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6246:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6247:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6248:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6249:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6250:     1250,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6251:        0,     0,     0,     0,  1251,     0,     0,     0,     0,  1252,
6252:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6253:        0,     0,     0,  1260,     0,     0,     0,     0,     0,     0,
6254:     1253,  1254,     0,     0,     0,     0,     0,     0,     0,     0,
6255:        0,     0,     0,     0,  1255,     0,     0,     0,     0,     0,
6256:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6257:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6258:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6259:        0,     0,  1256,     0,     0,  1257,     0,     0,     0,     0,
6260:        0,     0,     0,     0,     0,     0,     0,     0,     0,  1258,
6261:        0,     0,  1259,     0,     0,     0,     0,     0,     0,     0,
6262:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6263:        0,     0,  1261,     0,     0,  1262,  1263,  1264,     0,  1265,
6264:     1266,  1267,  1268,  1269,  1270,     0,     0,     0,     0,  2769,
6265:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6266:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6267:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6268:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6269:        0,     0,     0,     0,     0,     0,     0,     0,     0,  1260,
6270:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6271:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6272:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6273:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6274:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6275:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6276:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6277:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6278:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6279:        0,     0,     0,     0,     0,     0,     0,     0,  1261,   959,
6280:        0,  1262,  1263,  1264,     0,  1265,  1266,  1267,  1268,  1269,
6281:     1270,     0,     0,  1418,     0,    90,    91,    92,    93,    94,
6282:       95,    96,    97,   960,    98,    99,   100,   961,   962,   963,
6283:      964,   965,   966,   967,   101,   102,   968,   103,   104,   105,
6284:        0,   107,   108,   109,   656,   657,     0,   658,   659,   969,
6285:      115,   116,   117,   118,   119,   120,   970,   971,   121,   122,
6286:      660,   661,   125,   972,   126,   127,   128,   129,   662,   973,
6287:        0,   974,   132,   133,   134,   135,   136,     0,   138,   139,
6288:      140,   975,   141,   142,   143,   144,   145,   146,   976,     0,
6289:      148,   149,   150,   977,   978,   979,     0,   980,   981,   982,
6290:      152,   153,   154,   155,   156,   157,   158,   663,   664,   161,
6291:      983,   162,   984,   163,   164,   165,   166,   167,   168,   985,
6292:      169,   170,   171,   172,   173,   986,   987,   174,   175,   176,
6293:      177,   178,   988,   179,   180,   181,   989,   182,   183,   184,
6294:      990,   185,   186,   187,   188,   665,   190,   191,   192,   193,
6295:      666,   991,   195,   992,   196,   197,   667,   199,   993,   200,
6296:      994,   201,     0,   995,     0,   204,   205,   206,     0,   208,
6297:      996,   209,   997,   668,   211,   998,   212,   213,   214,   215,
6298:      216,   217,     0,   219,   220,   221,   222,   999,   223,   224,
6299:      225,   226,   227,   228,  1000,   229,     0,   669,   232,   233,
6300:      234,   235,   670,   671,  1001,   672,  1002,   239,     0,     0,
6301:      242,     0,   244,   245,   246,   247,   248,  1003,  1004,   249,
6302:        0,   251,     0,  1005,   253,   254,   255,  1006,  1007,   256,
6303:      257,   258,   259,   260,   673,   262,   263,   264,   265,   266,
6304:      267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
6305:      277,   278,   279,   674,     0,   675,   283,   284,   285,   676,
6306:     1008,   287,   288,     0,   290,  1009,   677,   292,   678,   294,
6307:      295,   296,  1010,   297,   298,  1011,  1012,   299,   300,   301,
6308:     1013,  1014,   302,   679,     0,   305,     0,   680,   308,   309,
6309:      310,   311,   312,   313,   314,   315,   316,   317,  1015,   318,
6310:      319,   681,   321,   322,   682,   324,   325,   326,  1016,   327,
6311:      328,   329,   330,   331,   332,   333,   334,   335,   683,   337,
6312:      338,   339,   340,  1017,   341,   342,   343,   344,   345,   346,
6313:      347,   348,   349,   350,   351,   352,  1018,   353,   354,     0,
6314:      356,   357,   358,   684,   360,   361,   362,   363,   364,   365,
6315:      366,   367,   368,   369,   370,  1019,   371,   372,   373,   374,
6316:      375,  1020,   376,   685,   378,   379,   380,     0,   382,   383,
6317:      686,   385,  1021,   386,   387,   388,   389,   390,   391,   392,
6318:      393,   394,   395,   396,   687,   398,   688,  1022,   400,   401,
6319:     1023,   402,     0,   404,   405,   406,   407,   408,  1024,   689,
6320:      690,  1025,  1026,   411,   412,   691,   414,   692,  1027,   416,
6321:      417,   693,   419,   420,   421,   422,   423,  1028,  1029,   424,
6322:      425,   426,   427,   428,  1030,  1031,   429,   430,   431,   432,
6323:      433,  1032,   695,  1033,   436,     0,   438,   439,   440,   441,
6324:     1034,  1035,   442,  1036,  1037,   443,   444,   445,   446,   447,
6325:      448,   696,   697,   698,   699,   700,   701,   702,   703,   704,
6326:      705,   706,   460,   461,   462,   463,   488,     0,     0,     0,
6327:        0,     0,     0,     0,     0,  1038,     0,     0,     0,     0,
6328:        0,     0,    90,    91,    92,    93,    94,    95,    96,    97,
6329:        0,    98,    99,   100,     0,     0,     0,     0,     0,     0,
6330:        0,   101,   102,     0,   103,   104,   105,     0,   107,   108,
6331:      109,   110,   111,     0,   113,   114,     0,   115,   116,   117,
6332:      118,   119,   120,     0,     0,   121,   122,   123,   124,   125,
6333:        0,   126,   127,   128,   129,   130,     0,     0,     0,   132,
6334:      133,   134,   135,   136,     0,   138,   139,   140,     0,   141,
6335:      142,   143,   144,   145,   146,     0,     0,   148,   149,   150,
6336:        0,     0,     0,     0,     0,     0,     0,   152,   153,   154,
6337:      155,   156,   157,   158,   159,   160,   161,     0,   162,     0,
6338:      163,   164,   165,   166,   167,   168,     0,   169,   170,   171,
6339:      172,   173,     0,     0,   174,   175,   176,   177,   178,     0,
6340:      179,   180,   181,     0,   182,   183,   184,     0,   185,   186,
6341:      187,   188,   189,   190,   191,   192,   193,   194,     0,   195,
6342:        0,   196,   197,   198,   199,     0,   200,     0,   201,     0,
6343:        0,     0,   204,   205,   206,     0,   208,     0,   209,     0,
6344:      210,   211,     0,   212,   213,   214,   215,   216,   217,     0,
6345:      219,   220,   221,   222,     0,   223,   224,   225,   226,   227,
6346:      228,     0,   229,     0,   231,   232,   233,   234,   235,   236,
6347:      237,     0,   238,     0,   239,     0,     0,   242,     0,   244,
6348:      245,   246,   247,   248,     0,     0,   249,     0,   251,     0,
6349:        0,   253,   254,   255,     0,     0,   256,   257,   258,   259,
6350:      260,   490,   262,   263,   264,   265,   266,   267,   268,   269,
6351:      270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
6352:      280,     0,   282,   283,   284,   285,   286,     0,   287,   288,
6353:        0,   290,     0,   291,   292,   293,   294,   295,   296,     0,
6354:      297,   298,     0,     0,   299,   300,   301,     0,     0,   302,
6355:      303,     0,   305,     0,   307,   308,   309,   310,   311,   312,
6356:      313,   314,   315,   316,   317,     0,   318,   319,   320,   321,
6357:      322,   323,   324,   325,   326,     0,   327,   328,   329,   330,
6358:      331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
6359:        0,   341,   342,   343,   344,   345,   346,   347,   348,   349,
6360:      350,   351,   352,     0,   353,   354,     0,   356,   357,   358,
6361:      359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
6362:      369,   370,     0,   371,   372,   373,   374,   375,     0,   376,
6363:      377,   378,   379,   380,     0,   382,   383,   384,   385,     0,
6364:      386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
6365:      396,   492,   398,   399,     0,   400,   401,     0,   402,     0,
6366:      404,   405,   406,   407,   408,     0,   409,   410,     0,     0,
6367:      411,   412,   413,   414,   415,     0,   416,   417,   418,   419,
6368:      420,   421,   422,   423,     0,     0,   424,   425,   426,   427,
6369:      428,     0,     0,   429,   430,   431,   432,   433,   434,   435,
6370:        0,   436,     0,   438,   439,   440,   441,     0,     0,   442,
6371:        0,     0,   443,   444,   445,   446,   447,   448,   449,   450,
6372:      451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
6373:      461,   462,   463,   655,  1083,   535,     0,     0,     0,   729,
6374:        0,     0,  2125,     0,     0,     0,     0,     0,     0,    90,
6375:       91,    92,    93,    94,    95,    96,    97,     0,    98,    99,
6376:      100,     0,     0,     0,     0,     0,     0,     0,   101,   102,
6377:        0,   103,   104,   105,     0,   107,   108,   109,   656,   657,
6378:        0,   658,   659,     0,   115,   116,   117,   118,   119,   120,
6379:        0,     0,   121,   122,   660,   661,   125,     0,   126,   127,
6380:      128,   129,   662,     0,     0,     0,   132,   133,   134,   135,
6381:      136,     0,   138,   139,   140,     0,   141,   142,   143,   144,
6382:      145,   146,     0,     0,   148,   149,   150,     0,     0,     0,
6383:        0,     0,     0,     0,   152,   153,   154,   155,   156,   157,
6384:      158,   663,   664,   161,  1298,   162,     0,   163,   164,   165,
6385:      166,   167,   168,     0,   169,   170,   171,   172,   173,     0,
6386:        0,   174,   175,   176,   177,   178,     0,   179,   180,   181,
6387:        0,   182,   183,   184,     0,   185,   186,   187,   188,   665,
6388:      190,   191,   192,   193,   666,  1084,   195,     0,   196,   197,
6389:      667,   199,     0,   200,     0,   201,     0,     0,     0,   204,
6390:      205,   206,     0,   208,     0,   209,     0,   668,   211,     0,
6391:      212,   213,   214,   215,   216,   217,     0,   219,   220,   221,
6392:      222,     0,   223,   224,   225,   226,   227,   228,     0,   229,
6393:        0,   669,   232,   233,   234,   235,   670,   671,     0,   672,
6394:        0,   239,     0,     0,   242,     0,   244,   245,   246,   247,
6395:      248,     0,     0,   249,     0,   251,     0,     0,   253,   254,
6396:      255,     0,     0,   256,   257,   258,   259,   260,   673,   262,
6397:      263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
6398:      273,   274,   275,   276,   277,   278,   279,   674,     0,   675,
6399:      283,   284,   285,   676,     0,   287,   288,     0,   290,     0,
6400:      677,   292,   678,   294,   295,   296,     0,   297,   298,  1085,
6401:        0,   299,   300,   301,     0,     0,   302,   679,     0,   305,
6402:        0,   680,   308,   309,   310,   311,   312,   313,   314,   315,
6403:      316,   317,     0,   318,   319,   681,   321,   322,   682,   324,
6404:      325,   326,     0,   327,   328,   329,   330,   331,   332,   333,
6405:      334,   335,   683,   337,   338,   339,   340,     0,   341,   342,
6406:      343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
6407:        0,   353,   354,     0,   356,   357,   358,   684,   360,   361,
6408:      362,   363,   364,   365,   366,   367,   368,   369,   370,     0,
6409:      371,   372,   373,   374,   375,     0,   376,   685,   378,   379,
6410:      380,     0,   382,   383,   686,   385,     0,   386,   387,   388,
6411:      389,   390,   391,   392,   393,   394,   395,   396,   687,   398,
6412:      688,     0,   400,   401,     0,   402,     0,   404,   405,   406,
6413:      407,   408,     0,   689,   690,     0,     0,   411,   412,   691,
6414:      414,   692,  1086,   416,   417,   693,   419,   420,   421,   422,
6415:      423,     0,     0,   424,   425,   426,   427,   428,     0,     0,
6416:      429,   430,   431,   432,   433,  1032,   695,     0,   436,     0,
6417:      438,   439,   440,   441,     0,     0,   442,     0,     0,   443,
6418:      444,   445,   446,   447,   448,   696,   697,   698,   699,   700,
6419:      701,   702,   703,   704,   705,   706,   460,   461,   462,   463,
6420:      655,  1083,   535,     0,     0,     0,   729,  1087,  1088,     0,
6421:        0,     0,     0,     0,     0,     0,    90,    91,    92,    93,
6422:       94,    95,    96,    97,     0,    98,    99,   100,     0,     0,
6423:        0,     0,     0,     0,     0,   101,   102,     0,   103,   104,
6424:      105,     0,   107,   108,   109,   656,   657,     0,   658,   659,
6425:        0,   115,   116,   117,   118,   119,   120,     0,     0,   121,
6426:      122,   660,   661,   125,     0,   126,   127,   128,   129,   662,
6427:        0,     0,     0,   132,   133,   134,   135,   136,     0,   138,
6428:      139,   140,     0,   141,   142,   143,   144,   145,   146,     0,
6429:        0,   148,   149,   150,     0,     0,     0,     0,     0,     0,
6430:        0,   152,   153,   154,   155,   156,   157,   158,   663,   664,
6431:      161,  1300,   162,     0,   163,   164,   165,   166,   167,   168,
6432:        0,   169,   170,   171,   172,   173,     0,     0,   174,   175,
6433:      176,   177,   178,     0,   179,   180,   181,     0,   182,   183,
6434:      184,     0,   185,   186,   187,   188,   665,   190,   191,   192,
6435:      193,   666,  1084,   195,     0,   196,   197,   667,   199,     0,
6436:      200,     0,   201,     0,     0,     0,   204,   205,   206,     0,
6437:      208,     0,   209,     0,   668,   211,     0,   212,   213,   214,
6438:      215,   216,   217,     0,   219,   220,   221,   222,     0,   223,
6439:      224,   225,   226,   227,   228,     0,   229,     0,   669,   232,
6440:      233,   234,   235,   670,   671,     0,   672,     0,   239,     0,
6441:        0,   242,     0,   244,   245,   246,   247,   248,     0,     0,
6442:      249,     0,   251,     0,     0,   253,   254,   255,     0,     0,
6443:      256,   257,   258,   259,   260,   673,   262,   263,   264,   265,
6444:      266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
6445:      276,   277,   278,   279,   674,     0,   675,   283,   284,   285,
6446:      676,     0,   287,   288,     0,   290,     0,   677,   292,   678,
6447:      294,   295,   296,     0,   297,   298,  1085,     0,   299,   300,
6448:      301,     0,     0,   302,   679,     0,   305,     0,   680,   308,
6449:      309,   310,   311,   312,   313,   314,   315,   316,   317,     0,
6450:      318,   319,   681,   321,   322,   682,   324,   325,   326,     0,
6451:      327,   328,   329,   330,   331,   332,   333,   334,   335,   683,
6452:      337,   338,   339,   340,     0,   341,   342,   343,   344,   345,
6453:      346,   347,   348,   349,   350,   351,   352,     0,   353,   354,
6454:        0,   356,   357,   358,   684,   360,   361,   362,   363,   364,
6455:      365,   366,   367,   368,   369,   370,     0,   371,   372,   373,
6456:      374,   375,     0,   376,   685,   378,   379,   380,     0,   382,
6457:      383,   686,   385,     0,   386,   387,   388,   389,   390,   391,
6458:      392,   393,   394,   395,   396,   687,   398,   688,     0,   400,
6459:      401,     0,   402,     0,   404,   405,   406,   407,   408,     0,
6460:      689,   690,     0,     0,   411,   412,   691,   414,   692,  1086,
6461:      416,   417,   693,   419,   420,   421,   422,   423,     0,     0,
6462:      424,   425,   426,   427,   428,     0,     0,   429,   430,   431,
6463:      432,   433,  1032,   695,     0,   436,     0,   438,   439,   440,
6464:      441,     0,     0,   442,     0,     0,   443,   444,   445,   446,
6465:      447,   448,   696,   697,   698,   699,   700,   701,   702,   703,
6466:      704,   705,   706,   460,   461,   462,   463,   655,  1083,   535,
6467:        0,     0,     0,   729,  1087,  1088,     0,     0,     0,     0,
6468:        0,     0,     0,    90,    91,    92,    93,    94,    95,    96,
6469:       97,     0,    98,    99,   100,     0,     0,     0,     0,     0,
6470:        0,     0,   101,   102,     0,   103,   104,   105,     0,   107,
6471:      108,   109,   656,   657,     0,   658,   659,     0,   115,   116,
6472:      117,   118,   119,   120,     0,     0,   121,   122,   660,   661,
6473:      125,     0,   126,   127,   128,   129,   662,     0,     0,     0,
6474:      132,   133,   134,   135,   136,     0,   138,   139,   140,     0,
6475:      141,   142,   143,   144,   145,   146,     0,     0,   148,   149,
6476:      150,     0,     0,     0,     0,     0,     0,     0,   152,   153,
6477:      154,   155,   156,   157,   158,   663,   664,   161,     0,   162,
6478:        0,   163,   164,   165,   166,   167,   168,     0,   169,   170,
6479:      171,   172,   173,     0,     0,   174,   175,   176,   177,   178,
6480:        0,   179,   180,   181,     0,   182,   183,   184,     0,   185,
6481:      186,   187,   188,   665,   190,   191,   192,   193,   666,  1084,
6482:      195,     0,   196,   197,   667,   199,     0,   200,     0,   201,
6483:        0,     0,     0,   204,   205,   206,     0,   208,     0,   209,
6484:        0,   668,   211,     0,   212,   213,   214,   215,   216,   217,
6485:        0,   219,   220,   221,   222,     0,   223,   224,   225,   226,
6486:      227,   228,     0,   229,     0,   669,   232,   233,   234,   235,
6487:      670,   671,     0,   672,     0,   239,     0,     0,   242,     0,
6488:      244,   245,   246,   247,   248,     0,     0,   249,     0,   251,
6489:        0,     0,   253,   254,   255,     0,     0,   256,   257,   258,
6490:      259,   260,   673,   262,   263,   264,   265,   266,   267,   268,
6491:      269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
6492:      279,   674,     0,   675,   283,   284,   285,   676,     0,   287,
6493:      288,     0,   290,     0,   677,   292,   678,   294,   295,   296,
6494:        0,   297,   298,  1085,     0,   299,   300,   301,     0,     0,
6495:      302,   679,     0,   305,     0,   680,   308,   309,   310,   311,
6496:      312,   313,   314,   315,   316,   317,     0,   318,   319,   681,
6497:      321,   322,   682,   324,   325,   326,     0,   327,   328,   329,
6498:      330,   331,   332,   333,   334,   335,   683,   337,   338,   339,
6499:      340,     0,   341,   342,   343,   344,   345,   346,   347,   348,
6500:      349,   350,   351,   352,     0,   353,   354,     0,   356,   357,
6501:      358,   684,   360,   361,   362,   363,   364,   365,   366,   367,
6502:      368,   369,   370,     0,   371,   372,   373,   374,   375,     0,
6503:      376,   685,   378,   379,   380,     0,   382,   383,   686,   385,
6504:        0,   386,   387,   388,   389,   390,   391,   392,   393,   394,
6505:      395,   396,   687,   398,   688,     0,   400,   401,     0,   402,
6506:        0,   404,   405,   406,   407,   408,     0,   689,   690,     0,
6507:        0,   411,   412,   691,   414,   692,  1086,   416,   417,   693,
6508:      419,   420,   421,   422,   423,     0,     0,   424,   425,   426,
6509:      427,   428,     0,     0,   429,   430,   431,   432,   433,  1032,
6510:      695,     0,   436,     0,   438,   439,   440,   441,     0,     0,
6511:      442,     0,     0,   443,   444,   445,   446,   447,   448,   696,
6512:      697,   698,   699,   700,   701,   702,   703,   704,   705,   706,
6513:      460,   461,   462,   463,     0,  1240,     0,     0,  1241,     0,
6514:        0,  1087,  1088,  1242,  1243,  1244,     0,     0,     0,     0,
6515:        0,     0,     0,  1240,     0,     0,  1241,     0,     0,     0,
6516:     1245,  1242,  1243,  1244,  1703,     0,     0,     0,  1247,     0,
6517:        0,  1240,     0,     0,  1241,  1248,     0,     0,  1245,  1242,
6518:     1243,  1244,     0,     0,     0,     0,  1247,     0,     0,     0,
6519:        0,     0,     0,  1248,     0,     0,  1245,     0,     0,  1240,
6520:     1249,     0,  1241,     0,  1247,     0,     0,  1242,  1243,  1244,
6521:        0,  1248,     0,     0,     0,     0,     0,     0,  1249,     0,
6522:        0,     0,     0,     0,  1245,     0,     0,  1878,     0,     0,
6523:        0,     0,  1247,     0,     0,  1240,  1249,     0,  1241,  1248,
6524:        0,     0,     0,  1242,  1243,  1244,     0,     0,     0,     0,
6525:     1704,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6526:     1245,     0,     0,     0,  1249,     0,     0,     0,  1247,     0,
6527:        0,     0,     0,     0,     0,  1248,     0,     0,     0,     0,
6528:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6529:        0,     0,     0,     0,     0,     0,     0,     0,     0,  1250,
6530:     1249,     0,     0,     0,     0,     0,     0,  1918,     0,     0,
6531:        0,     0,  1919,  1251,     0,     0,     0,  1250,  1252,  1240,
6532:        0,     0,  1241,     0,  2827,     0,     0,  1242,  1243,  1244,
6533:        0,  1251,     0,     0,     0,  1250,  1252,     0,     0,  1253,
6534:     1254,     0,     0,     0,  1245,     0,     0,  1927,     0,  1251,
6535:        0,     0,  1247,  1255,  1252,     0,     0,  1253,  1254,  1248,
6536:        0,     0,     0,  1250,     0,     0,     0,     0,     0,     0,
6537:        0,  1255,     0,     0,     0,  1253,  1254,  1251,     0,     0,
6538:        0,     0,  1252,     0,  1249,     0,     0,     0,     0,  1255,
6539:        0,  1256,     0,     0,  1257,     0,     0,     0,     0,  1250,
6540:        0,     0,     0,  1253,  1254,     0,     0,     0,  1258,  1256,
6541:        0,  1259,  1257,  1251,     0,     0,     0,  1255,  1252,     0,
6542:        0,     0,     0,     0,     0,     0,  1258,  1256,     0,  1259,
6543:     1257,     0,     0,     0,     0,     0,     0,     0,     0,  1253,
6544:     1254,     0,     0,     0,  1258,     0,     0,  1259,     0,     0,
6545:        0,     0,     0,  1255,     0,  1256,     0,     0,  1257,     0,
6546:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6547:     2828,     0,  1258,     0,     0,  1259,     0,     0,     0,     0,
6548:        0,     0,     0,  1250,     0,     0,     0,     0,     0,     0,
6549:        0,  1256,     0,     0,  1257,     0,     0,  1251,  1260,     0,
6550:        0,     0,  1252,     0,     0,     0,     0,     0,  1258,     0,
6551:        0,  1259,     0,     0,     0,     0,  1260,     0,     0,     0,
6552:        0,     0,     0,  1253,  1254,     0,     0,     0,     0,  1892,
6553:        0,     0,     0,     0,  1260,     0,     0,  1255,     0,     0,
6554:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6555:        0,  1240,     0,     0,  1241,     0,  1705,     0,     0,  1242,
6556:     1243,  1244,  1260,     0,     0,     0,     0,     0,     0,     0,
6557:        0,     0,     0,     0,     0,  1256,  1245,     0,  1257,     0,
6558:        0,     0,     0,     0,  1247,     0,     0,     0,     0,     0,
6559:        0,  1248,  1258,     0,     0,  1259,     0,  1261,  1260,     0,
6560:     1262,  1263,  1264,     0,  1265,  1266,  1267,  1268,  1269,  1270,
6561:        0,     0,     0,     0,     0,  1261,  1249,     0,  1262,  1263,
6562:     1264,     0,  1265,  1266,  1267,  1268,  1269,  1270,     0,     0,
6563:        0,     0,     0,  1261,     0,     0,  1262,  1263,  1264,     0,
6564:     1265,  1266,  1267,  1268,  1269,  1270,     0,     0,     0,     0,
6565:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6566:        0,  1261,     0,     0,  1262,  1263,  1264,     0,  1265,  1266,
6567:     1267,  1268,  1269,  1270,     0,     0,     0,     0,     0,     0,
6568:        0,     0,  1260,     0,     0,     0,  1240,     0,     0,  1241,
6569:        0,     0,     0,     0,  1242,  1243,  1244,  1261,     0,     0,
6570:     1262,  1263,  1264,     0,  1265,  1266,  1267,  1268,  1269,  1270,
6571:     1932,  1245,     0,     0,  1934,  1250,     0,     0,     0,  1247,
6572:        0,     0,     0,     0,     0,     0,  1248,     0,     0,  1251,
6573:        0,     0,  1240,     0,  1252,  1241,     0,     0,     0,     0,
6574:     1242,  1243,  1244,     0,     0,     0,     0,     0,     0,     0,
6575:        0,  1249,     0,     0,     0,  1253,  1254,  1245,     0,     0,
6576:        0,     0,     0,     0,     0,  1247,     0,     0,     0,  1255,
6577:        0,     0,  1248,     0,     0,     0,     0,     0,     0,     0,
6578:        0,  1261,     0,     0,  1262,  1263,  1264,     0,  1265,  1266,
6579:     1267,  1268,  1269,  1270,     0,     0,     0,  1249,     0,     0,
6580:        0,     0,     0,     0,     0,     0,     0,  1256,     0,     0,
6581:     1257,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6582:        0,     0,     0,  1240,  1258,     0,  1241,  1259,     0,     0,
6583:        0,  1242,  1243,  1244,     0,     0,     0,     0,     0,     0,
6584:        0,     0,     0,     0,     0,     0,     0,     0,  1245,     0,
6585:     1250,     0,     0,     0,     0,     0,  1247,     0,     0,     0,
6586:        0,     0,  1240,  1248,  1251,  1241,     0,     0,     0,  1252,
6587:     1242,  1243,  1244,     0,     0,     0,     0,     0,     0,     0,
6588:        0,     0,     0,     0,     0,     0,     0,  1245,  1249,     0,
6589:     1253,  1254,     0,     0,     0,  1247,  1250,     0,     0,     0,
6590:        0,     0,  1248,     0,  1255,     0,     0,     0,     0,     0,
6591:     1251,     0,     0,     0,  1260,  1252,     0,     0,     0,     0,
6592:     1240,     0,     0,  1241,     0,     0,     0,  1249,  1242,  1243,
6593:     1244,     0,     0,     0,     0,     0,  1253,  1254,     0,     0,
6594:        0,     0,  1256,     0,     0,  1257,     0,     0,     0,     0,
6595:     1255,     0,     0,  1247,     0,     0,     0,     0,     0,  1258,
6596:     1248,     0,  1259,     0,     0,     0,     0,  1240,     0,     0,
6597:     1241,     0,     0,     0,     0,  1242,  1243,  1244,     0,     0,
6598:        0,     0,     0,     0,     0,  1249,     0,  1250,  1256,     0,
6599:        0,  1257,     0,     0,     0,     0,     0,     0,     0,     0,
6600:     1247,  1251,     0,     0,     0,  1258,  1252,  1248,  1259,     0,
6601:        0,     0,     0,  1261,     0,     0,  1262,  1263,  1264,     0,
6602:     1265,  1266,  1267,  1268,  1269,  1270,  1250,  1253,  1254,     0,
6603:        0,     0,  1249,     0,     0,     0,     0,     0,     0,     0,
6604:     1251,  1255,     0,     0,     0,  1252,     0,     0,     0,  1260,
6605:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6606:        0,     0,     0,     0,     0,     0,  1253,  1254,     0,     0,
6607:        0,     0,     0,     0,     0,     0,     0,     0,     0,  1256,
6608:     1255,     0,  1257,     0,  1250,     0,     0,     0,     0,     0,
6609:        0,     0,     0,     0,     0,  1260,  1258,     0,  1251,  1259,
6610:        0,     0,     0,  1252,     0,     0,     0,     0,     0,     0,
6611:        0,     0,     0,     0,     0,     0,     0,     0,  1256,     0,
6612:        0,  1257,     0,     0,  1253,  1254,  2146,     0,     0,     0,
6613:        0,  1250,     0,     0,     0,  1258,     0,     0,  1255,     0,
6614:        0,     0,     0,     0,     0,  1251,     0,     0,  1261,     0,
6615:     1252,  1262,  1263,  1264,     0,  1265,  1266,  1267,  1268,  1269,
6616:     1270,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6617:        0, -1674, -1674,     0,     0,     0,  1256,     0,     0,  1257,
6618:        0,     0,     0,     0,     0,  1255,  1260,     0,     0,     0,
6619:        0,     0,     0,  1258,  1261,     0,     0,  1262,  1263,  1264,
6620:        0,  1265,  1266,  1267,  1268,  1269,  1270,     0,     0,     0,
6621:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6622:        0,     0,     0,     0,     0,  1260, -1674,     0,     0,     0,
6623:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6624:     1258,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6625:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6626:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6627:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6628:        0,     0,     0,  1260,     0,  1261,     0,     0,  1262,  1263,
6629:     1264,     0,  1265,  1266,  1267,  1268,  1269,  1270,     0,     0,
6630:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6631:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6632:        0,     0,     0,     0,  1261,     0,     0,  1262,  1263,  1264,
6633:     1260,  1265,  1266,  1267,  1268,  1269,  1270,     0,     0,     0,
6634:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6635:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6636:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6637:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6638:        0,     0,  1261,     0,     0,  1262,  1263,  1264,     0,  1265,
6639:     1266,  1267,  1268,  1269,  1270,     0,     0,     0,     0,     0,
6640:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6641:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6642:        0,     0,     0,     0,     0,     0,   959,     0,  1612,  1261,
6643:        0,     0,  1262,  1263,  1264,     0,  1265,  1266,  1267,  1268,
6644:     1269,  1270,    90,    91,    92,    93,    94,    95,    96,    97,
6645:      960,    98,    99,   100,   961,   962,   963,   964,   965,   966,
6646:      967,   101,   102,   968,   103,   104,   105,     0,   107,   108,
6647:      109,   656,   657,     0,   658,   659,   969,   115,   116,   117,
6648:      118,   119,   120,   970,   971,   121,   122,   660,   661,   125,
6649:      972,   126,   127,   128,   129,   662,   973,     0,   974,   132,
6650:      133,   134,   135,   136,     0,   138,   139,   140,   975,   141,
6651:      142,   143,   144,   145,   146,   976,     0,   148,   149,   150,
6652:      977,   978,   979,     0,   980,   981,   982,   152,   153,   154,
6653:      155,   156,   157,   158,   663,   664,   161,   983,   162,   984,
6654:      163,   164,   165,   166,   167,   168,   985,   169,   170,   171,
6655:      172,   173,   986,   987,   174,   175,   176,   177,   178,   988,
6656:      179,   180,   181,   989,   182,   183,   184,   990,   185,   186,
6657:      187,   188,   665,   190,   191,   192,   193,   666,   991,   195,
6658:      992,   196,   197,   667,   199,   993,   200,   994,   201,     0,
6659:      995,     0,   204,   205,   206,     0,   208,   996,   209,   997,
6660:      668,   211,   998,   212,   213,   214,   215,   216,   217,     0,
6661:      219,   220,   221,   222,   999,   223,   224,   225,   226,   227,
6662:      228,  1000,   229,     0,   669,   232,   233,   234,   235,   670,
6663:      671,  1001,   672,  1002,   239,     0,     0,   242,     0,   244,
6664:      245,   246,   247,   248,  1003,  1004,   249,     0,   251,     0,
6665:     1005,   253,   254,   255,  1006,  1007,   256,   257,   258,   259,
6666:      260,   673,   262,   263,   264,   265,   266,   267,   268,   269,
6667:      270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
6668:      674,     0,   675,   283,   284,   285,   676,  1008,   287,   288,
6669:        0,   290,  1009,   677,   292,   678,   294,   295,   296,  1010,
6670:      297,   298,  1011,  1012,   299,   300,   301,  1013,  1014,   302,
6671:      679,     0,   305,     0,   680,   308,   309,   310,   311,   312,
6672:      313,   314,   315,   316,   317,  1015,   318,   319,   681,   321,
6673:      322,   682,   324,   325,   326,  1016,   327,   328,   329,   330,
6674:      331,   332,   333,   334,   335,   683,   337,   338,   339,   340,
6675:     1017,   341,   342,   343,   344,   345,   346,   347,   348,   349,
6676:      350,   351,   352,  1018,   353,   354,     0,   356,   357,   358,
6677:      684,   360,   361,   362,   363,   364,   365,   366,   367,   368,
6678:      369,   370,  1019,   371,   372,   373,   374,   375,  1020,   376,
6679:      685,   378,   379,   380,     0,   382,   383,   686,   385,  1021,
6680:      386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
6681:      396,   687,   398,   688,  1022,   400,   401,  1023,   402,     0,
6682:      404,   405,   406,   407,   408,  1024,   689,   690,  1025,  1026,
6683:      411,   412,   691,   414,   692,  1027,   416,   417,   693,   419,
6684:      420,   421,   422,   423,  1028,  1029,   424,   425,   426,   427,
6685:      428,  1030,  1031,   429,   430,   431,   432,   433,  1032,   695,
6686:     1033,   436,     0,   438,   439,   440,   441,  1034,  1035,   442,
6687:     1036,  1037,   443,   444,   445,   446,   447,   448,   696,   697,
6688:      698,   699,   700,   701,   702,   703,   704,   705,   706,   460,
6689:      461,   462,   463,   959,     0,     0,     0,     0,     0,     0,
6690:        0,     0,     0,     0,     0,     0,     0,     0,     0,    90,
6691:       91,    92,    93,    94,    95,    96,    97,   960,    98,    99,
6692:      100,   961,   962,   963,   964,   965,   966,   967,   101,   102,
6693:      968,   103,   104,   105,     0,   107,   108,   109,   656,   657,
6694:        0,   658,   659,   969,   115,   116,   117,   118,   119,   120,
6695:      970,   971,   121,   122,   660,   661,   125,   972,   126,   127,
6696:      128,   129,   662,   973,     0,   974,   132,   133,   134,   135,
6697:      136,     0,   138,   139,   140,   975,   141,   142,   143,   144,
6698:      145,   146,   976,     0,   148,   149,   150,   977,   978,   979,
6699:        0,   980,   981,   982,   152,   153,   154,   155,   156,   157,
6700:      158,   663,   664,   161,   983,   162,   984,   163,   164,   165,
6701:      166,   167,   168,   985,   169,   170,   171,   172,   173,   986,
6702:      987,   174,   175,   176,   177,   178,   988,   179,   180,   181,
6703:      989,   182,   183,   184,   990,   185,   186,   187,   188,   665,
6704:      190,   191,   192,   193,   666,   991,   195,   992,   196,   197,
6705:      667,   199,   993,   200,   994,   201,     0,   995,     0,   204,
6706:      205,   206,     0,   208,   996,   209,   997,   668,   211,   998,
6707:      212,   213,   214,   215,   216,   217,     0,   219,   220,   221,
6708:      222,   999,   223,   224,   225,   226,   227,   228,  1000,   229,
6709:        0,   669,   232,   233,   234,   235,   670,   671,  1001,   672,
6710:     1002,   239,     0,     0,   242,     0,   244,   245,   246,   247,
6711:      248,  1003,  1004,   249,     0,   251,     0,  1005,   253,   254,
6712:      255,  1006,  1007,   256,   257,   258,   259,   260,   673,   262,
6713:      263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
6714:      273,   274,   275,   276,   277,   278,   279,   674,     0,   675,
6715:      283,   284,   285,   676,  1008,   287,   288,     0,   290,  1009,
6716:      677,   292,   678,   294,   295,   296,  1010,   297,   298,  1011,
6717:     1012,   299,   300,   301,  1013,  1014,   302,   679,     0,   305,
6718:        0,   680,   308,   309,   310,   311,   312,   313,   314,   315,
6719:      316,   317,  1015,   318,   319,   681,   321,   322,   682,   324,
6720:      325,   326,  1016,   327,   328,   329,   330,   331,   332,   333,
6721:      334,   335,   683,   337,   338,   339,   340,  1017,   341,   342,
6722:      343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
6723:     1018,   353,   354,     0,   356,   357,   358,   684,   360,   361,
6724:      362,   363,   364,   365,   366,   367,   368,   369,   370,  1019,
6725:      371,   372,   373,   374,   375,  1020,   376,   685,   378,   379,
6726:      380,     0,   382,   383,   686,   385,  1021,   386,   387,   388,
6727:      389,   390,   391,   392,   393,   394,   395,   396,   687,   398,
6728:      688,  1022,   400,   401,  1023,   402,     0,   404,   405,   406,
6729:      407,   408,  1024,   689,   690,  1025,  1026,   411,   412,   691,
6730:      414,   692,  1027,   416,   417,   693,   419,   420,   421,   422,
6731:      423,  1028,  1029,   424,   425,   426,   427,   428,  1030,  1031,
6732:      429,   430,   431,   432,   433,  1032,   695,  1033,   436,     0,
6733:      438,   439,   440,   441,  1034,  1035,   442,  1036,  1037,   443,
6734:      444,   445,   446,   447,   448,   696,   697,   698,   699,   700,
6735:      701,   702,   703,   704,   705,   706,   460,   461,   462,   463,
6736:      959,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6737:        0,     0,     0,     0,     0,     0,    90,    91,    92,    93,
6738:     1752,    95,    96,    97,   960,    98,    99,   100,   961,   962,
6739:      963,   964,   965,   966,   967,   101,   102,   968,   103,   104,
6740:      105,     0,   107,   108,   109,   656,   657,     0,   658,   659,
6741:      969,   115,   116,   117,   118,   119,   120,   970,   971,   121,
6742:      122,   660,   661,   125,   972,   126,   127,   128,   129,   662,
6743:      973,     0,   974,   132,   133,   134,   135,   136,     0,   138,
6744:      139,   140,   975,   141,   142,   143,   144,   145,   146,   976,
6745:        0,   148,   149,   150,   977,   978,   979,     0,   980,   981,
6746:      982,   152,   153,   154,   155,   156,   157,   158,   663,   664,
6747:      161,   983,   162,   984,   163,   164,   165,   166,   167,   168,
6748:      985,   169,   170,   171,   172,   173,   986,   987,   174,   175,
6749:      176,  1753,   178,   988,   179,   180,   181,   989,   182,   183,
6750:      184,   990,   185,   186,   187,   188,   665,   190,   191,   192,
6751:      193,   666,   991,   195,   992,   196,   197,   667,   199,   993,
6752:      200,   994,   201,     0,   995,     0,   204,   205,   206,     0,
6753:      208,   996,   209,   997,   668,   211,   998,   212,   213,   214,
6754:      215,   216,   217,     0,   219,   220,   221,   222,   999,   223,
6755:      224,   225,   226,   227,   228,  1000,   229,     0,   669,   232,
6756:      233,   234,   235,   670,   671,  1001,   672,  1002,   239,     0,
6757:        0,   242,     0,   244,   245,   246,   247,   248,  1003,  1004,
6758:      249,     0,   251,     0,  1005,   253,   254,   255,  1006,  1007,
6759:      256,   257,   258,   259,   260,   673,   262,   263,   264,   265,
6760:      266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
6761:      276,   277,   278,   279,   674,     0,   675,   283,   284,   285,
6762:      676,  1008,   287,   288,     0,   290,  1009,   677,   292,   678,
6763:      294,   295,   296,  1010,   297,   298,  1011,  1012,   299,   300,
6764:      301,  1013,  1014,   302,   679,     0,   305,     0,   680,   308,
6765:      309,   310,   311,   312,   313,   314,   315,   316,   317,  1015,
6766:      318,   319,   681,   321,   322,   682,   324,   325,   326,  1016,
6767:      327,   328,   329,   330,   331,   332,   333,   334,   335,   683,
6768:      337,   338,   339,   340,  1017,   341,   342,   343,   344,   345,
6769:      346,   347,   348,   349,   350,   351,   352,  1018,   353,   354,
6770:        0,   356,   357,   358,   684,   360,   361,   362,   363,   364,
6771:      365,   366,   367,   368,   369,   370,  1019,   371,   372,   373,
6772:      374,   375,  1020,  1754,   685,   378,   379,   380,     0,   382,
6773:      383,   686,   385,  1021,   386,   387,   388,   389,   390,   391,
6774:      392,   393,   394,   395,   396,   687,   398,   688,  1022,   400,
6775:      401,  1023,   402,     0,   404,   405,   406,   407,   408,  1024,
6776:      689,   690,  1025,  1026,   411,   412,   691,   414,   692,  1027,
6777:      416,   417,   693,   419,   420,   421,   422,   423,  1028,  1029,
6778:      424,   425,   426,   427,   428,  1030,  1031,   429,   430,   431,
6779:      432,   433,  1032,   695,  1033,   436,     0,   438,   439,   440,
6780:      441,  1034,  1035,   442,  1036,  1037,   443,   444,   445,   446,
6781:      447,   448,   696,   697,   698,   699,   700,   701,   702,   703,
6782:      704,   705,   706,   460,   461,   462,   463,    89,     0,     0,
6783:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6784:        0,     0,     0,    90,    91,    92,    93,    94,    95,    96,
6785:       97,     0,    98,    99,   100,     0,     0,     0,     0,     0,
6786:        0,     0,   101,   102,     0,   103,   104,   105,   106,   107,
6787:      108,   109,   110,   111,   112,   113,   114,     0,   115,   116,
6788:      117,   118,   119,   120,     0,   736,   121,   122,   123,   124,
6789:      125,     0,   126,   127,   128,   129,   739,     0,   740,     0,
6790:      132,   133,   134,   135,   136,   137,   138,   139,   140,     0,
6791:      141,   142,   143,   144,   145,   146,     0,   147,   148,   149,
6792:      150,   741,   742,   743,   744,   745,   746,   747,   152,   153,
6793:      154,   155,   156,   157,   158,   159,   160,   161,     0,   162,
6794:        0,   163,   164,   165,   166,   167,   168,     0,   169,   170,
6795:      171,   172,   173,     0,     0,   174,   175,   176,   177,   178,
6796:        0,   179,   180,   181,     0,   182,   183,   184,     0,   185,
6797:      186,   187,   188,   189,   190,   191,   192,   193,   753,     0,
6798:      195,     0,   196,   197,   198,   199,     0,   200,     0,   201,
6799:      202,     0,   203,   204,   205,   206,   207,   208,     0,   209,
6800:        0,   210,   211,     0,   212,   213,   214,   215,   216,   217,
6801:      218,   219,   220,   221,   222,     0,   223,   224,   225,   226,
6802:      227,   228,     0,   229,   230,   231,   232,   233,   234,   235,
6803:      236,   237,     0,   238,     0,   239,   240,   241,   242,   243,
6804:      244,   245,   246,   247,   248,     0,     0,   249,   250,   251,
6805:      252,     0,   253,   254,   255,   759,   760,   256,   257,   258,
6806:      259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
6807:      269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
6808:      279,   280,   281,   282,   283,   284,   285,   286,     0,   287,
6809:      288,   289,   290,     0,   765,   292,   293,   294,   295,   296,
6810:        0,   297,   298,     0,     0,   299,   300,   301,     0,     0,
6811:      302,   303,   304,   305,   306,   768,   308,   309,   310,   311,
6812:      312,   313,   314,   315,   316,   317,     0,   318,   319,   769,
6813:      321,   322,   323,   324,   325,   326,     0,   327,   328,   329,
6814:      330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
6815:      340,     0,   341,   342,   343,   344,   345,   346,   347,   348,
6816:      349,   350,   351,   352,     0,   353,   354,   355,   356,   357,
6817:      358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
6818:      368,   369,   370,     0,   371,   372,   373,   374,   375,   772,
6819:      376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
6820:        0,   386,   387,   388,   389,   390,   391,   392,   393,   394,
6821:      395,   396,   397,   398,   774,     0,   400,   401,     0,   402,
6822:      403,   404,   405,   406,   407,   408,     0,   409,   410,     0,
6823:        0,   411,   412,   777,   414,   778,     0,   416,   417,   780,
6824:      419,   420,   421,   422,   423,     0,     0,   424,   425,   426,
6825:      427,   428,   781,     0,   429,   430,   431,   432,   433,   434,
6826:      435,     0,   436,   437,   438,   439,   440,   441,     0,     0,
6827:      442,     0,     0,   443,   444,   445,   446,   447,   448,   449,
6828:      450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
6829:      460,   461,   462,   463,    89,     0,     0,     0,     0,     0,
6830:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6831:       90,    91,    92,    93,    94,    95,    96,    97,     0,    98,
6832:       99,   100,     0,     0,     0,     0,     0,     0,     0,   101,
6833:      102,     0,   103,   104,   105,   106,   107,   108,   109,   110,
6834:      111,   112,   113,   114,     0,   115,   116,   117,   118,   119,
6835:      120,     0,     0,   121,   122,   123,   124,   125,     0,   126,
6836:      127,   128,   129,   130,     0,   131,     0,   132,   133,   134,
6837:      135,   136,   137,   138,   139,   140,     0,   141,   142,   143,
6838:      144,   145,   146,     0,   147,   148,   149,   150,     0,     0,
6839:        0,   151,     0,     0,     0,   152,   153,   154,   155,   156,
6840:      157,   158,   159,   160,   161,     0,   162,     0,   163,   164,
6841:      165,   166,   167,   168,     0,   169,   170,   171,   172,   173,
6842:        0,     0,   174,   175,   176,   177,   178,     0,   179,   180,
6843:      181,     0,   182,   183,   184,     0,   185,   186,   187,   188,
6844:      189,   190,   191,   192,   193,   194,     0,   195,     0,   196,
6845:      197,   198,   199,     0,   200,     0,   201,   202,     0,   203,
6846:      204,   205,   206,   207,   208,     0,   209,     0,   210,   211,
6847:        0,   212,   213,   214,   215,   216,   217,   218,   219,   220,
6848:      221,   222,     0,   223,   224,   225,   226,   227,   228,     0,
6849:      229,   230,   231,   232,   233,   234,   235,   236,   237,     0,
6850:      238,     0,   239,   240,   241,   242,   243,   244,   245,   246,
6851:      247,   248,     0,     0,   249,   250,   251,   252,     0,   253,
6852:      254,   255,     0,     0,   256,   257,   258,   259,   260,   261,
6853:      262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
6854:      272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
6855:      282,   283,   284,   285,   286,     0,   287,   288,   289,   290,
6856:        0,   291,   292,   293,   294,   295,   296,     0,   297,   298,
6857:        0,     0,   299,   300,   301,     0,     0,   302,   303,   304,
6858:      305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
6859:      315,   316,   317,     0,   318,   319,   320,   321,   322,   323,
6860:      324,   325,   326,     0,   327,   328,   329,   330,   331,   332,
6861:      333,   334,   335,   336,   337,   338,   339,   340,     0,   341,
6862:      342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
6863:      352,     0,   353,   354,   355,   356,   357,   358,   359,   360,
6864:      361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
6865:        0,   371,   372,   373,   374,   375,     0,   376,   377,   378,
6866:      379,   380,   381,   382,   383,   384,   385,     0,   386,   387,
6867:      388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
6868:      398,   399,     0,   400,   401,     0,   402,   403,   404,   405,
6869:      406,   407,   408,     0,   409,   410,     0,     0,   411,   412,
6870:      413,   414,   415,     0,   416,   417,   418,   419,   420,   421,
6871:      422,   423,     0,     0,   424,   425,   426,   427,   428,     0,
6872:        0,   429,   430,   431,   432,   433,   434,   435,     0,   436,
6873:      437,   438,   439,   440,   441,     0,     0,   442,     0,     0,
6874:      443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
6875:      453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
6876:      463,   488,     0,     0,     0,     0,     0,     0,     0,     0,
6877:        0,     0,     0,     0,     0,     0,     0,    90,    91,    92,
6878:       93,    94,    95,    96,    97,     0,    98,    99,   100,     0,
6879:        0,     0,     0,     0,     0,     0,   101,   102,     0,   103,
6880:      104,   105,     0,   107,   108,   109,   110,   111,     0,   113,
6881:      114,     0,   115,   116,   117,   118,   119,   120,     0,     0,
6882:      121,   122,   123,   124,   125,  1356,   126,   127,   128,   129,
6883:      130,     0,     0,  1357,   132,   133,   134,   135,   136,     0,
6884:      138,   139,   140,  1358,   141,   142,   143,   144,   145,   146,
6885:        0,     0,   148,   149,   150,     0,     0,     0,     0,     0,
6886:        0,     0,   152,   153,   154,   155,   156,   157,   158,   159,
6887:      160,   161,     0,   162,     0,   163,   164,   165,   166,   167,
6888:      168,     0,   169,   170,   171,   172,   173,     0,     0,   174,
6889:      175,   176,   177,   178,     0,   179,   180,   181,     0,   182,
6890:      183,   184,     0,   185,   186,   187,   188,   189,   190,   191,
6891:      192,   193,   194,     0,   195,     0,   196,   197,   198,   199,
6892:        0,   200,  1359,   201,     0,     0,     0,   204,   205,   206,
6893:        0,   208,     0,   209,     0,   210,   211,     0,   212,   213,
6894:      214,   215,   216,  1360,     0,   219,   220,   221,   222,     0,
6895:      223,   224,   225,   226,   227,   228,     0,   229,     0,   231,
6896:      232,   233,   234,   235,   236,   237,     0,   238,     0,   239,
6897:        0,     0,   242,     0,   244,   245,   246,   247,   248,     0,
6898:        0,   249,     0,   251,     0,     0,   253,   254,   255,     0,
6899:        0,   256,   257,   258,   259,   260,   490,   262,   263,   264,
6900:      265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
6901:      275,   276,   277,   278,   279,   280,     0,   282,   283,   284,
6902:      285,   286,     0,   287,   288,     0,   290,     0,   291,   292,
6903:      293,   294,   295,   296,     0,   297,   298,     0,     0,   299,
6904:      300,   301,     0,     0,   302,   303,     0,   305,     0,   307,
6905:      308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
6906:        0,   318,   319,   320,   321,   322,   323,   324,   325,   326,
6907:     1361,   327,   328,   329,   330,   331,   332,   333,   334,   335,
6908:      336,   337,   338,   339,   340,     0,   341,   342,   343,   344,
6909:      345,   346,   347,   348,   349,   350,   351,   352,     0,   353,
6910:      354,     0,   356,   357,   358,   359,   360,   361,   362,   363,
6911:      364,   365,   366,   367,   368,   369,   370,     0,   371,   372,
6912:      373,   374,   375,     0,   376,   377,   378,   379,   380,     0,
6913:      382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
6914:      391,   392,   393,   394,   395,   396,   492,   398,   399,     0,
6915:      400,   401,     0,   402,     0,   404,   405,   406,   407,   408,
6916:        0,   409,   410,     0,     0,   411,   412,   413,   414,   415,
6917:        0,   416,   417,   418,   419,   420,   421,   422,   423,     0,
6918:     1362,   424,   425,   426,   427,   428,     0,     0,   429,   430,
6919:      431,   432,   433,   434,   435,     0,   436,     0,   438,   439,
6920:      440,   441,     0,     0,   442,     0,     0,   443,   444,   445,
6921:      446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
6922:      456,   457,   458,   459,   460,   461,   462,   463,   488,     0,
6923:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6924:        0,     0,     0,     0,    90,    91,    92,    93,    94,    95,
6925:       96,    97,     0,    98,    99,   100,     0,     0,     0,     0,
6926:        0,     0,     0,   101,   102,     0,   103,   104,   105,     0,
6927:      107,   108,   109,   110,   111,     0,   113,   114,     0,   115,
6928:      116,   117,   118,   119,   120,     0,     0,   121,   122,   123,
6929:      124,   125,  1356,   126,   127,   128,   129,   130,     0,     0,
6930:        0,   132,   133,   134,   135,   136,     0,   138,   139,   140,
6931:     1358,   141,   142,   143,   144,   145,   146,     0,     0,   148,
6932:      149,   150,     0,     0,     0,     0,     0,     0,     0,   152,
6933:      153,   154,   155,   156,   157,   158,   159,   160,   161,     0,
6934:      162,     0,   163,   164,   165,   166,   167,   168,     0,   169,
6935:      170,   171,   172,   173,     0,     0,   174,   175,   176,   177,
6936:      178,     0,   179,   180,   181,     0,   182,   183,   184,     0,
6937:      185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
6938:        0,   195,     0,   196,   197,   198,   199,     0,   200,  1359,
6939:      201,     0,     0,     0,   204,   205,   206,     0,   208,     0,
6940:      209,     0,   210,   211,     0,   212,   213,   214,   215,   216,
6941:      217,     0,   219,   220,   221,   222,     0,   223,   224,   225,
6942:      226,   227,   228,     0,   229,     0,   231,   232,   233,   234,
6943:      235,   236,   237,     0,   238,     0,   239,     0,     0,   242,
6944:        0,   244,   245,   246,   247,   248,     0,     0,   249,     0,
6945:      251,  1815,     0,   253,   254,   255,     0,     0,   256,   257,
6946:      258,   259,   260,   490,   262,   263,   264,   265,   266,   267,
6947:      268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
6948:      278,   279,   280,     0,   282,   283,   284,   285,   286,     0,
6949:      287,   288,     0,   290,     0,   291,   292,   293,   294,   295,
6950:      296,     0,   297,   298,     0,     0,   299,   300,   301,     0,
6951:        0,   302,   303,     0,   305,     0,   307,   308,   309,   310,
6952:      311,   312,   313,   314,   315,   316,   317,     0,   318,   319,
6953:      320,   321,   322,   323,   324,   325,   326,  1361,   327,   328,
6954:      329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
6955:      339,   340,     0,   341,   342,   343,   344,   345,   346,   347,
6956:      348,   349,   350,   351,   352,     0,   353,   354,     0,   356,
6957:      357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
6958:      367,   368,   369,   370,     0,   371,   372,   373,   374,   375,
6959:        0,   376,   377,   378,   379,   380,     0,   382,   383,   384,
6960:      385,     0,   386,   387,   388,   389,   390,   391,   392,   393,
6961:      394,   395,   396,   492,   398,   399,     0,   400,   401,     0,
6962:      402,     0,   404,   405,   406,   407,   408,     0,   409,   410,
6963:        0,     0,   411,   412,   413,   414,   415,     0,   416,   417,
6964:      418,   419,   420,   421,   422,   423,     0,  1362,   424,   425,
6965:      426,   427,   428,     0,     0,   429,   430,   431,   432,   433,
6966:      434,   435,     0,   436,     0,   438,   439,   440,   441,     0,
6967:        0,   442,     0,     0,   443,   444,   445,   446,   447,   448,
6968:      449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
6969:      459,   460,   461,   462,   463,   655,     0,   535,     0,     0,
6970:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6971:        0,    90,    91,    92,    93,    94,    95,    96,    97,     0,
6972:       98,    99,   100,     0,     0,     0,     0,     0,     0,     0,
6973:      101,   102,     0,   103,   104,   105,     0,   107,   108,   109,
6974:      656,   657,     0,   658,   659,     0,   115,   116,   117,   118,
6975:      119,   120,     0,     0,   121,   122,   660,   661,   125,     0,
6976:      126,   127,   128,   129,   662,     0,     0,     0,   132,   133,
6977:      134,   135,   136,     0,   138,   139,   140,     0,   141,   142,
6978:      143,   144,   145,   146,     0,     0,   148,   149,   150,     0,
6979:        0,     0,     0,     0,     0,     0,   152,   153,   154,   155,
6980:      156,   157,   158,   663,   664,   161,     0,   162,     0,   163,
6981:      164,   165,   166,   167,   168,     0,   169,   170,   171,   172,
6982:      173,     0,     0,   174,   175,   176,   177,   178,     0,   179,
6983:      180,   181,     0,   182,   183,   184,     0,   185,   186,   187,
6984:      188,   665,   190,   191,   192,   193,   666,  1084,   195,     0,
6985:      196,   197,   667,   199,     0,   200,     0,   201,     0,     0,
6986:        0,   204,   205,   206,     0,   208,     0,   209,     0,   668,
6987:      211,     0,   212,   213,   214,   215,   216,   217,     0,   219,
6988:      220,   221,   222,     0,   223,   224,   225,   226,   227,   228,
6989:        0,   229,     0,   669,   232,   233,   234,   235,   670,   671,
6990:        0,   672,     0,   239,     0,     0,   242,     0,   244,   245,
6991:      246,   247,   248,     0,     0,   249,     0,   251,     0,     0,
6992:      253,   254,   255,     0,     0,   256,   257,   258,   259,   260,
6993:      673,   262,   263,   264,   265,   266,   267,   268,   269,   270,
6994:      271,   272,   273,   274,   275,   276,   277,   278,   279,   674,
6995:        0,   675,   283,   284,   285,   676,     0,   287,   288,     0,
6996:      290,     0,   677,   292,   678,   294,   295,   296,     0,   297,
6997:      298,  1085,     0,   299,   300,   301,     0,     0,   302,   679,
6998:        0,   305,     0,   680,   308,   309,   310,   311,   312,   313,
6999:      314,   315,   316,   317,     0,   318,   319,   681,   321,   322,
7000:      682,   324,   325,   326,     0,   327,   328,   329,   330,   331,
7001:      332,   333,   334,   335,   683,   337,   338,   339,   340,     0,
7002:      341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
7003:      351,   352,     0,   353,   354,     0,   356,   357,   358,   684,
7004:      360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
7005:      370,     0,   371,   372,   373,   374,   375,     0,   376,   685,
7006:      378,   379,   380,     0,   382,   383,   686,   385,     0,   386,
7007:      387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
7008:      687,   398,   688,     0,   400,   401,     0,   402,     0,   404,
7009:      405,   406,   407,   408,     0,   689,   690,     0,     0,   411,
7010:      412,   691,   414,   692,  1086,   416,   417,   693,   419,   420,
7011:      421,   422,   423,     0,     0,   424,   425,   426,   427,   428,
7012:        0,     0,   429,   430,   431,   432,   433,  1032,   695,     0,
7013:      436,     0,   438,   439,   440,   441,     0,     0,   442,     0,
7014:        0,   443,   444,   445,   446,   447,   448,   696,   697,   698,
7015:      699,   700,   701,   702,   703,   704,   705,   706,   460,   461,
7016:      462,   463,   488,     0,   560,     0,     0,     0,     0,     0,
7017:        0,     0,     0,     0,     0,     0,     0,     0,    90,    91,
7018:       92,    93,    94,    95,    96,    97,     0,    98,    99,   100,
7019:        3,     4,     0,     0,     0,     0,     0,   101,   102,     0,
7020:      103,   104,   105,     0,   107,   108,   109,   110,   111,     0,
7021:      113,   114,     0,   115,   116,   117,   118,   119,   120,     0,
7022:        0,   121,   122,   123,   124,   125,     0,   126,   127,   128,
7023:      129,   130,     0,     0,     0,   132,   133,   134,   135,   136,
7024:        0,   138,   139,   140,     0,   141,   142,   143,   144,   145,
7025:      146,     0,     0,   148,   149,   150,     0,     0,     0,     0,
7026:        0,     0,     0,   152,   153,   154,   155,   156,   157,   158,
7027:      159,   160,   161,     0,   162,     0,   163,   164,   165,   166,
7028:      167,   168,     0,   169,   170,   171,   172,   173,     0,     0,
7029:      174,   175,   176,   177,   178,     0,   179,   180,   181,     0,
7030:      182,   183,   184,     0,   185,   186,   187,   188,   189,   190,
7031:      191,   192,   193,   194,     0,   195,     0,   196,   197,   198,
7032:      199,     0,   200,     0,   201,     0,     0,     0,   204,   205,
7033:      206,     0,   208,     0,   209,     0,   210,   211,     0,   212,
7034:      213,   214,   215,   216,   217,     0,   219,   220,   221,   222,
7035:        0,   223,   224,   225,   226,   227,   228,     0,   229,     0,
7036:      231,   232,   233,   234,   235,   236,   237,     0,   238,     0,
7037:      239,     0,     0,   242,     0,   244,   245,   246,   247,   248,
7038:        0,     0,   249,     0,   251,     0,     0,   253,   254,   255,
7039:        0,     0,   256,   257,   258,   259,   260,   490,   262,   263,
7040:      264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
7041:      274,   275,   276,   277,   278,   279,   280,     0,   282,   283,
7042:      284,   285,   286,     0,   287,   288,     0,   290,     0,   291,
7043:      292,   293,   294,   295,   296,     0,   297,   298,     0,     0,
7044:      299,   300,   301,     0,     0,   302,   303,     0,   305,     0,
7045:      307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
7046:      317,     0,   318,   319,   320,   321,   322,   323,   324,   325,
7047:      326,     0,   327,   328,   329,   330,   331,   332,   333,   334,
7048:      335,   336,   337,   338,   339,   340,     0,   341,   342,   343,
7049:      344,   345,   346,   347,   348,   349,   350,   351,   352,     0,
7050:      353,   354,     0,   356,   357,   358,   359,   360,   361,   362,
7051:      363,   364,   365,   366,   367,   368,   369,   370,     0,   371,
7052:      372,   373,   374,   375,     0,   376,   377,   378,   379,   380,
7053:        0,   382,   383,   384,   385,     0,   386,   387,   388,   389,
7054:      390,   391,   392,   393,   394,   395,   396,   492,   398,   399,
7055:        0,   400,   401,     0,   402,     0,   404,   405,   406,   407,
7056:      408,     0,   409,   410,     0,     0,   411,   412,   413,   414,
7057:      415,     0,   416,   417,   418,   419,   420,   421,   422,   423,
7058:        0,     0,   424,   425,   426,   427,   428,     0,     0,   429,
7059:      430,   431,   432,   433,   434,   435,     0,   436,     0,   438,
7060:      439,   440,   441,     0,     0,   442,     0,     0,   443,   444,
7061:      445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
7062:      455,   456,   457,   458,   459,   460,   461,   462,   463,   488,
7063:        0,   560,     0,     0,     0,     0,     0,     0,     0,     0,
7064:        0,     0,     0,     0,     0,    90,    91,    92,    93,    94,
7065:       95,    96,    97,     0,    98,    99,   100,     0,     0,     0,
7066:        0,     0,     0,     0,   101,   102,     0,   103,   104,   105,
7067:        0,   107,   108,   109,   110,   111,     0,   113,   114,     0,
7068:      115,   116,   117,   118,   119,   120,     0,     0,   121,   122,
7069:      123,   124,   125,     0,   126,   127,   128,   129,   130,     0,
7070:        0,     0,   132,   133,   134,   135,   136,     0,   138,   139,
7071:      140,     0,   141,   142,   143,   144,   145,   146,     0,     0,
7072:      148,   149,   150,     0,     0,     0,     0,     0,     0,     0,
7073:      152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
7074:        0,   162,     0,   163,   164,   165,   166,   167,   168,     0,
7075:      169,   170,   171,   172,   173,     0,     0,   174,   175,   176,
7076:      177,   178,     0,   179,   180,   181,     0,   182,   183,   184,
7077:        0,   185,   186,   187,   188,   189,   190,   191,   192,   193,
7078:      194,     0,   195,     0,   196,   197,   198,   199,     0,   200,
7079:        0,   201,     0,     0,     0,   204,   205,   206,     0,   208,
7080:        0,   209,     0,   210,   211,     0,   212,   213,   214,   215,
7081:      216,   217,     0,   219,   220,   221,   222,     0,   223,   224,
7082:      225,   226,   227,   228,     0,   229,     0,   231,   232,   233,
7083:      234,   235,   236,   237,     0,   238,     0,   239,     0,     0,
7084:      242,     0,   244,   245,   246,   247,   248,     0,     0,   249,
7085:        0,   251,     0,     0,   253,   254,   255,     0,     0,   256,
7086:      257,   258,   259,   260,   490,   262,   263,   264,   265,   266,
7087:      267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
7088:      277,   278,   279,   280,     0,   282,   283,   284,   285,   286,
7089:        0,   287,   288,     0,   290,     0,   291,   292,   293,   294,
7090:      295,   296,     0,   297,   298,     0,   561,   299,   300,   301,
7091:        0,     0,   302,   303,     0,   305,     0,   307,   308,   309,
7092:      310,   311,   312,   313,   314,   315,   316,   317,     0,   318,
7093:      319,   320,   321,   322,   323,   324,   325,   326,     0,   327,
7094:      328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
7095:      338,   339,   340,     0,   341,   342,   343,   344,   345,   346,
7096:      347,   348,   349,   350,   351,   352,     0,   353,   354,     0,
7097:      356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
7098:      366,   367,   368,   369,   370,     0,   371,   372,   373,   374,
7099:      375,     0,   376,   377,   378,   379,   380,     0,   382,   383,
7100:      384,   385,     0,   386,   387,   388,   389,   390,   391,   392,
7101:      393,   394,   395,   396,   492,   398,   399,     0,   400,   401,
7102:        0,   402,     0,   404,   405,   406,   407,   408,     0,   409,
7103:      410,     0,     0,   411,   412,   413,   414,   415,     0,   416,
7104:      417,   418,   419,   420,   421,   422,   423,     0,     0,   424,
7105:      425,   426,   427,   428,     0,     0,   429,   430,   431,   432,
7106:      433,   434,   435,     0,   436,     0,   438,   439,   440,   441,
7107:        0,     0,   442,     0,     0,   443,   444,   445,   446,   447,
7108:      448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
7109:      458,   459,   460,   461,   462,   463,   488,     0,   560,     0,
7110:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
7111:        0,     0,    90,    91,    92,    93,    94,    95,    96,    97,
7112:        0,    98,    99,   100,     0,     0,     0,     0,     0,     0,
7113:        0,   101,   102,     0,   103,   104,   105,     0,   107,   108,
7114:      109,   110,   111,     0,   113,   114,     0,   115,   116,   117,
7115:      118,   119,   120,     0,     0,   121,   122,   123,   124,   125,
7116:        0,   126,   127,   128,   129,   130,     0,     0,     0,   132,
7117:      133,   134,   135,   136,     0,   138,   139,   140,     0,   141,
7118:      142,   143,   144,   145,   146,     0,     0,   148,   149,   150,
7119:        0,     0,     0,     0,     0,     0,     0,   152,   153,   154,
7120:      155,   156,   157,   158,   159,   160,   161,     0,   162,     0,
7121:      163,   164,   165,   166,   167,   168,     0,   169,   170,   171,
7122:      172,   173,     0,     0,   174,   175,   176,   177,   178,     0,
7123:      179,   180,   181,     0,   182,   183,   184,     0,   185,   186,
7124:      187,   188,   189,   190,   191,   192,   193,   194,     0,   195,
7125:        0,   196,   197,   198,   199,     0,   200,     0,   201,     0,
7126:        0,     0,   204,   205,   206,     0,   208,     0,   209,     0,
7127:      210,   211,     0,   212,   213,   214,   215,   216,   606,     0,
7128:      219,   220,   221,   222,     0,   223,   224,   225,   226,   227,
7129:      228,     0,   229,     0,   231,   232,   233,   234,   235,   236,
7130:      237,     0,   238,     0,   239,     0,     0,   242,     0,   244,
7131:      245,   246,   247,   248,     0,     0,   249,     0,   251,     0,
7132:        0,   253,   254,   255,     0,     0,   256,   257,   258,   259,
7133:      260,   490,   262,   263,   264,   265,   266,   267,   268,   269,
7134:      270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
7135:      280,     0,   282,   283,   284,   285,   286,     0,   287,   288,
7136:        0,   290,     0,   291,   292,   293,   294,   295,   296,     0,
7137:      297,   298,     0,   561,   299,   300,   301,     0,     0,   302,
7138:      303,     0,   305,     0,   307,   308,   309,   310,   311,   312,
7139:      313,   314,   315,   316,   317,     0,   318,   319,   320,   321,
7140:      322,   323,   324,   325,   326,     0,   327,   328,   329,   330,
7141:      331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
7142:        0,   341,   342,   343,   344,   345,   346,   347,   348,   349,
7143:      350,   351,   352,     0,   353,   354,     0,   356,   357,   358,
7144:      359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
7145:      369,   370,     0,   371,   372,   373,   374,   375,     0,   376,
7146:      377,   378,   379,   380,     0,   382,   383,   384,   385,     0,
7147:      386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
7148:      396,   492,   398,   399,     0,   400,   401,     0,   402,     0,
7149:      404,   405,   406,   407,   408,     0,   409,   410,     0,     0,
7150:      411,   412,   413,   414,   415,     0,   416,   417,   418,   419,
7151:      420,   421,   422,   423,     0,     0,   424,   425,   426,   427,
7152:      428,     0,     0,   429,   430,   431,   432,   433,   434,   435,
7153:        0,   436,     0,   438,   439,   440,   441,     0,     0,   442,
7154:        0,     0,   443,   444,   445,   446,   447,   448,   449,   450,
7155:      451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
7156:      461,   462,   463,   655,     0,     0,     0,     0,     0,     0,
7157:        0,     0,     0,     0,     0,     0,     0,     0,     0,    90,
7158:       91,    92,    93,    94,    95,    96,    97,     0,    98,    99,
7159:      100,     3,     4,     0,     0,     0,     0,     0,   101,   102,
7160:        0,   103,   104,   105,     0,   107,   108,   109,   656,   657,
7161:        0,   658,   659,     0,   115,   116,   117,   118,   119,   120,
7162:        0,     0,   121,   122,   660,   661,   125,     0,   126,   127,
7163:      128,   129,   662,     0,     0,     0,   132,   133,   134,   135,
7164:      136,     0,   138,   139,   140,     0,   141,   142,   143,   144,
7165:      145,   146,     0,     0,   148,   149,   150,     0,     0,     0,
7166:        0,     0,     0,     0,   152,   153,   154,   155,   156,   157,
7167:      158,   663,   664,   161,     0,   162,     0,   163,   164,   165,
7168:      166,   167,   168,     0,   169,   170,   171,   172,   173,     0,
7169:        0,   174,   175,   176,   177,   178,     0,   179,   180,   181,
7170:        0,   182,   183,   184,     0,   185,   186,   187,   188,   665,
7171:      190,   191,   192,   193,   666,     0,   195,     0,   196,   197,
7172:      667,   199,     0,   200,     0,   201,     0,     0,     0,   204,
7173:      205,   206,     0,   208,     0,   209,     0,   668,   211,     0,
7174:      212,   213,   214,   215,   216,   217,     0,   219,   220,   221,
7175:      222,     0,   223,   224,   225,   226,   227,   228,     0,   229,
7176:        0,   669,   232,   233,   234,   235,   670,   671,     0,   672,
7177:        0,   239,     0,     0,   242,     0,   244,   245,   246,   247,
7178:      248,     0,     0,   249,     0,   251,     0,     0,   253,   254,
7179:      255,     0,     0,   256,   257,   258,   259,   260,   673,   262,
7180:      263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
7181:      273,   274,   275,   276,   277,   278,   279,   674,     0,   675,
7182:      283,   284,   285,   676,     0,   287,   288,     0,   290,     0,
7183:      677,   292,   678,   294,   295,   296,     0,   297,   298,     0,
7184:        0,   299,   300,   301,     0,     0,   302,   679,     0,   305,
7185:        0,   680,   308,   309,   310,   311,   312,   313,   314,   315,
7186:      316,   317,     0,   318,   319,   681,   321,   322,   682,   324,
7187:      325,   326,     0,   327,   328,   329,   330,   331,   332,   333,
7188:      334,   335,   683,   337,   338,   339,   340,     0,   341,   342,
7189:      343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
7190:        0,   353,   354,     0,   356,   357,   358,   684,   360,   361,
7191:      362,   363,   364,   365,   366,   367,   368,   369,   370,     0,
7192:      371,   372,   373,   374,   375,     0,   376,   685,   378,   379,
7193:      380,     0,   382,   383,   686,   385,     0,   386,   387,   388,
7194:      389,   390,   391,   392,   393,   394,   395,   396,   687,   398,
7195:      688,     0,   400,   401,     0,   402,     0,   404,   405,   406,
7196:      407,   408,     0,   689,   690,     0,     0,   411,   412,   691,
7197:      414,   692,     0,   416,   417,   693,   419,   420,   421,   422,
7198:      423,     0,     0,   424,   425,   426,   427,   428,     0,     0,
7199:      429,   430,   431,   432,   433,  1032,   695,     0,   436,     0,
7200:      438,   439,   440,   441,     0,     0,   442,     0,     0,   443,
7201:      444,   445,   446,   447,   448,   696,   697,   698,   699,   700,
7202:      701,   702,   703,   704,   705,   706,   460,   461,   462,   463,
7203:      488,     0,   560,     0,     0,     0,     0,     0,     0,     0,
7204:        0,     0,     0,     0,     0,     0,    90,    91,    92,    93,
7205:       94,    95,    96,    97,     0,    98,    99,   100,     0,     0,
7206:        0,     0,     0,     0,     0,   101,   102,     0,   103,   104,
7207:      105,     0,   107,   108,   109,   110,   111,     0,   113,   114,
7208:        0,   115,   116,   117,   118,   119,   120,     0,     0,   121,
7209:      122,   123,   124,   125,     0,   126,   127,   128,   129,   130,
7210:        0,     0,     0,   132,   133,   134,   135,   136,     0,   138,
7211:      139,   140,     0,   141,   142,   143,   144,   145,   146,     0,
7212:        0,   148,   149,   150,     0,     0,     0,     0,     0,     0,
7213:        0,   152,   153,   154,   155,   156,   157,   158,   159,   160,
7214:      161,     0,   162,     0,   163,   164,   165,   166,   167,   168,
7215:        0,   169,   170,   171,   172,   173,     0,     0,   174,   175,
7216:      176,   177,   178,     0,   179,   180,   181,     0,   182,   183,
7217:      184,     0,   185,   186,   187,   188,   189,   190,   191,   192,
7218:      193,   194,     0,   195,     0,   196,   197,   198,   199,     0,
7219:      200,     0,   201,     0,     0,     0,   204,   205,   206,     0,
7220:     1665,     0,   209,     0,   210,   211,     0,   212,   213,   214,
7221:      215,   216,   217,     0,   219,   220,   221,   222,     0,   223,
7222:      224,   225,   226,   227,   228,     0,   229,     0,   231,   232,
7223:      233,   234,   235,   236,   237,     0,   238,     0,   239,     0,
7224:        0,   242,     0,   244,   245,   246,   247,   248,     0,     0,
7225:      249,     0,   251,     0,     0,   253,   254,  1666,     0,     0,
7226:      256,   257,   258,   259,   260,   490,   262,   263,   264,   265,
7227:      266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
7228:      276,   277,   278,   279,   280,     0,   282,   283,   284,   285,
7229:      286,     0,   287,   288,     0,   290,     0,   291,   292,   293,
7230:      294,   295,   296,     0,   297,   298,     0,     0,   299,   300,
7231:      301,     0,     0,   302,   303,     0,   305,     0,   307,   308,
7232:      309,   310,   311,   312,   313,   314,   315,   316,   317,     0,
7233:      318,   319,   320,   321,   322,   323,   324,   325,   326,     0,
7234:      327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
7235:      337,   338,   339,   340,     0,   341,   342,   343,   344,   345,
7236:      346,   347,   348,   349,   350,   351,   352,     0,   353,   354,
7237:        0,   356,   357,   358,   359,   360,   361,   362,   363,   364,
7238:      365,   366,   367,   368,   369,   370,     0,   371,   372,   373,
7239:      374,   375,     0,   376,   377,   378,   379,   380,     0,   382,
7240:      383,   384,   385,     0,   386,   387,   388,   389,   390,   391,
7241:      392,   393,   394,   395,   396,   492,   398,   399,     0,   400,
7242:      401,  1667,   402,     0,   404,  1668,   406,  1669,   408,     0,
7243:      409,   410,     0,     0,   411,   412,   413,   414,   415,     0,
7244:      416,   417,   418,   419,   420,   421,   422,   423,     0,     0,
7245:      424,   425,  1670,   427,   428,     0,     0,   429,   430,   431,
7246:      432,   433,   434,   435,     0,   436,     0,   438,   439,   440,
7247:      441,     0,     0,   442,     0,     0,   443,   444,   445,   446,
7248:      447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
7249:      457,   458,   459,   460,   461,   462,   463,   488,  2567,     0,
7250:        0,     0,     0,  2568,     0,     0,     0,     0,     0,     0,
7251:        0,     0,     0,    90,    91,    92,    93,    94,    95,    96,
7252:       97,     0,    98,    99,   100,     0,     0,     0,     0,     0,
7253:        0,     0,   101,   102,     0,   103,   104,   105,     0,   107,
7254:      108,   109,   110,   111,     0,   113,   114,     0,   115,   116,
7255:      117,   118,   119,   120,     0,     0,   121,   122,   123,   124,
7256:      125,     0,   126,   127,   128,   129,   130,     0,     0,     0,
7257:      132,   133,   134,   135,   136,     0,   138,   139,   140,     0,
7258:      141,   142,   143,   144,   145,   146,     0,     0,   148,   149,
7259:      150,     0,     0,     0,     0,     0,     0,     0,   152,   153,
7260:      154,   155,   156,   157,   158,   159,   160,   161,     0,   162,
7261:        0,   163,   164,   165,   166,   167,   168,     0,   169,   170,
7262:      171,   172,   173,     0,     0,   174,   175,   176,   177,   178,
7263:        0,   179,   180,   181,     0,   182,   183,   184,     0,   185,
7264:      186,   187,   188,   189,   190,   191,   192,   193,   194,     0,
7265:      195,     0,   196,   197,   198,   199,     0,   200,     0,   201,
7266:        0,     0,     0,   204,   205,   206,     0,   208,     0,   209,
7267:        0,   210,   211,     0,   212,   213,   214,   215,   216,   217,
7268:        0,   219,   220,   221,   222,     0,   223,   224,   225,   226,
7269:      227,   228,     0,   229,     0,   231,   232,   233,   234,   235,
7270:      236,   237,     0,   238,     0,   239,     0,     0,   242,     0,
7271:      244,   245,   246,   247,   248,     0,     0,   249,     0,   251,
7272:        0,     0,   253,   254,   255,     0,     0,   256,   257,   258,
7273:      259,   260,   490,   262,   263,   264,   265,   266,   267,   268,
7274:      269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
7275:      279,   280,     0,   282,   283,   284,   285,   286,     0,   287,
7276:      288,     0,   290,     0,   291,   292,   293,   294,   295,   296,
7277:        0,   297,   298,     0,     0,   299,   300,   301,     0,     0,
7278:      302,   303,     0,   305,     0,   307,   308,   309,   310,   311,
7279:      312,   313,   314,   315,   316,   317,     0,   318,   319,   320,
7280:      321,   322,   323,   324,   325,   326,     0,   327,   328,   329,
7281:      330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
7282:      340,     0,   341,   342,   343,   344,   345,   346,   347,   348,
7283:      349,   350,   351,   352,     0,   353,   354,     0,   356,   357,
7284:      358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
7285:      368,   369,   370,     0,   371,   372,   373,   374,   375,     0,
7286:      376,   377,   378,   379,   380,     0,   382,   383,   384,   385,
7287:        0,   386,   387,   388,   389,   390,   391,   392,   393,   394,
7288:      395,   396,   492,   398,   399,     0,   400,   401,     0,   402,
7289:        0,   404,   405,   406,   407,   408,     0,   409,   410,     0,
7290:        0,   411,   412,   413,   414,   415,     0,   416,   417,   418,
7291:      419,   420,   421,   422,   423,     0,     0,   424,   425,   426,
7292:      427,   428,     0,     0,   429,   430,   431,   432,   433,   434,
7293:      435,     0,   436,     0,   438,   439,   440,   441,     0,     0,
7294:      442,     0,     0,   443,   444,   445,   446,   447,   448,   449,
7295:      450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
7296:      460,   461,   462,   463,   488,     0,     0,     0,     0,     0,
7297:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
7298:       90,    91,    92,    93,    94,    95,    96,    97,   489,    98,
7299:       99,   100,     0,     0,     0,     0,     0,     0,     0,   101,
7300:      102,     0,   103,   104,   105,     0,   107,   108,   109,   110,
7301:      111,     0,   113,   114,     0,   115,   116,   117,   118,   119,
7302:      120,     0,     0,   121,   122,   123,   124,   125,     0,   126,
7303:      127,   128,   129,   130,     0,     0,     0,   132,   133,   134,
7304:      135,   136,     0,   138,   139,   140,     0,   141,   142,   143,
7305:      144,   145,   146,     0,     0,   148,   149,   150,     0,     0,
7306:        0,     0,     0,     0,     0,   152,   153,   154,   155,   156,
7307:      157,   158,   159,   160,   161,     0,   162,     0,   163,   164,
7308:      165,   166,   167,   168,     0,   169,   170,   171,   172,   173,
7309:        0,     0,   174,   175,   176,   177,   178,     0,   179,   180,
7310:      181,     0,   182,   183,   184,     0,   185,   186,   187,   188,
7311:      189,   190,   191,   192,   193,   194,     0,   195,     0,   196,
7312:      197,   198,   199,     0,   200,     0,   201,     0,     0,     0,
7313:      204,   205,   206,     0,   208,     0,   209,     0,   210,   211,
7314:        0,   212,   213,   214,   215,   216,   217,     0,   219,   220,
7315:      221,   222,     0,   223,   224,   225,   226,   227,   228,     0,
7316:      229,     0,   231,   232,   233,   234,   235,   236,   237,     0,
7317:      238,     0,   239,     0,     0,   242,     0,   244,   245,   246,
7318:      247,   248,     0,     0,   249,     0,   251,     0,     0,   253,
7319:      254,   255,     0,     0,   256,   257,   258,   259,   260,   490,
7320:      262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
7321:      272,   273,   274,   275,   276,   277,   278,   279,   280,     0,
7322:      282,   283,   284,   285,   286,     0,   287,   288,     0,   290,
7323:        0,   291,   292,   293,   294,   295,   296,     0,   297,   298,
7324:        0,     0,   299,   300,   301,     0,     0,   302,   303,     0,
7325:      305,     0,   307,   308,   309,   310,   311,   312,   313,   314,
7326:      315,   316,   317,     0,   318,   319,   320,   321,   322,   323,
7327:      491,   325,   326,     0,   327,   328,   329,   330,   331,   332,
7328:      333,   334,   335,   336,   337,   338,   339,   340,     0,   341,
7329:      342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
7330:      352,     0,   353,   354,     0,   356,   357,   358,   359,   360,
7331:      361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
7332:        0,   371,   372,   373,   374,   375,     0,   376,   377,   378,
7333:      379,   380,     0,   382,   383,   384,   385,     0,   386,   387,
7334:      388,   389,   390,   391,   392,   393,   394,   395,   396,   492,
7335:      398,   399,     0,   400,   401,     0,   402,     0,   404,   405,
7336:      406,   407,   408,     0,   409,   410,     0,     0,   411,   412,
7337:      413,   414,   415,     0,   416,   417,   418,   419,   420,   421,
7338:      422,   423,     0,     0,   424,   425,   426,   427,   428,     0,
7339:        0,   429,   430,   431,   432,   433,   434,   435,     0,   436,
7340:        0,   438,   439,   440,   441,     0,     0,   442,     0,     0,
7341:      443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
7342:      453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
7343:      463,   488,     0,     0,     0,     0,     0,     0,     0,     0,
7344:        0,     0,     0,     0,     0,     0,     0,    90,    91,    92,
7345:       93,    94,    95,    96,    97,   540,    98,    99,   100,     0,
7346:        0,     0,     0,     0,     0,     0,   101,   102,     0,   103,
7347:      104,   105,     0,   107,   108,   109,   110,   111,     0,   113,
7348:      114,     0,   115,   116,   117,   118,   119,   120,     0,     0,
7349:      121,   122,   123,   124,   125,     0,   126,   127,   128,   129,
7350:      130,     0,     0,     0,   132,   133,   134,   135,   136,     0,
7351:      138,   139,   140,     0,   141,   142,   143,   144,   145,   146,
7352:        0,     0,   148,   149,   150,     0,     0,     0,     0,     0,
7353:        0,     0,   152,   153,   154,   155,   156,   157,   158,   159,
7354:      160,   161,     0,   162,     0,   163,   164,   165,   166,   167,
7355:      168,     0,   169,   170,   171,   172,   173,     0,     0,   174,
7356:      175,   176,   177,   178,     0,   179,   180,   181,     0,   182,
7357:      183,   184,     0,   185,   186,   187,   188,   189,   190,   191,
7358:      192,   193,   194,     0,   195,     0,   196,   197,   198,   199,
7359:        0,   200,     0,   201,     0,     0,     0,   204,   205,   206,
7360:        0,   208,     0,   209,     0,   210,   211,     0,   212,   213,
7361:      214,   215,   216,   217,     0,   219,   220,   221,   222,     0,
7362:      223,   224,   225,   226,   227,   228,     0,   229,     0,   231,
7363:      232,   233,   234,   235,   236,   237,     0,   238,     0,   239,
7364:        0,     0,   242,     0,   244,   245,   246,   247,   248,     0,
7365:        0,   249,     0,   251,     0,     0,   253,   254,   255,     0,
7366:        0,   256,   257,   258,   259,   260,   490,   262,   263,   264,
7367:      265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
7368:      275,   276,   277,   278,   279,   280,     0,   282,   283,   284,
7369:      285,   286,     0,   287,   288,     0,   290,     0,   291,   292,
7370:      293,   294,   295,   296,     0,   297,   298,     0,     0,   299,
7371:      300,   301,     0,     0,   302,   303,     0,   305,     0,   307,
7372:      308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
7373:        0,   318,   319,   320,   321,   322,   323,   324,   325,   326,
7374:        0,   327,   328,   329,   330,   331,   332,   333,   334,   335,
7375:      336,   337,   338,   339,   340,     0,   341,   342,   343,   344,
7376:      345,   346,   347,   348,   349,   350,   351,   352,     0,   353,
7377:      354,     0,   356,   357,   358,   359,   360,   361,   362,   363,
7378:      364,   365,   366,   367,   368,   369,   370,     0,   371,   372,
7379:      373,   374,   375,     0,   376,   377,   378,   379,   380,     0,
7380:      382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
7381:      391,   392,   393,   394,   395,   396,   492,   398,   399,     0,
7382:      400,   401,     0,   402,     0,   404,   405,   406,   407,   408,
7383:        0,   541,   410,     0,     0,   542,   412,   413,   414,   415,
7384:        0,   416,   417,   418,   419,   420,   421,   422,   423,     0,
7385:        0,   424,   425,   426,   427,   428,     0,     0,   429,   430,
7386:      431,   432,   433,   434,   435,     0,   436,     0,   438,   439,
7387:      440,   441,     0,     0,   442,     0,     0,   443,   444,   445,
7388:      446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
7389:      456,   457,   458,   459,   460,   461,   462,   463,   488,     0,
7390:      560,     0,     0,     0,     0,     0,     0,     0,     0,     0,
7391:        0,     0,     0,     0,    90,    91,    92,    93,    94,    95,
7392:       96,    97,     0,    98,    99,   100,     0,     0,     0,     0,
7393:        0,     0,     0,   101,   102,     0,   103,   104,   105,     0,
7394:      107,   108,   109,   110,   111,     0,   113,   114,     0,   115,
7395:      116,   117,   118,   119,   120,     0,     0,   121,   122,   123,
7396:      124,   125,     0,   126,   127,   128,   129,   130,     0,     0,
7397:        0,   132,   133,   134,   135,   136,     0,   138,   139,   140,
7398:        0,   141,   142,   143,   144,   145,   146,     0,     0,   148,
7399:      149,   150,     0,     0,     0,     0,     0,     0,     0,   152,
7400:      153,   154,   155,   156,   157,   158,   159,   160,   161,     0,
7401:      162,     0,   163,   164,   165,   166,   167,   168,     0,   169,
7402:      170,   171,   172,   173,     0,     0,   174,   175,   176,   177,
7403:      178,     0,   179,   180,   181,     0,   182,   183,   184,     0,
7404:      185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
7405:        0,   195,     0,   196,   197,   198,   199,     0,   200,     0,
7406:      201,     0,     0,     0,   204,   205,   206,     0,   208,     0,
7407:      209,     0,   210,   211,     0,   212,   213,   214,   215,   216,
7408:      601,     0,   219,   220,   221,   222,     0,   223,   224,   225,
7409:      226,   227,   228,     0,   229,     0,   231,   232,   233,   234,
7410:      235,   236,   237,     0,   238,     0,   239,     0,     0,   242,
7411:        0,   244,   245,   246,   247,   248,     0,     0,   249,     0,
7412:      251,     0,     0,   253,   254,   255,     0,     0,   256,   257,
7413:      258,   259,   260,   490,   262,   263,   264,   265,   266,   267,
7414:      268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
7415:      278,   279,   280,     0,   282,   283,   284,   285,   286,     0,
7416:      287,   288,     0,   290,     0,   291,   292,   293,   294,   295,
7417:      296,     0,   297,   298,     0,     0,   299,   300,   301,     0,
7418:        0,   302,   303,     0,   305,     0,   307,   308,   309,   310,
7419:      311,   312,   313,   314,   315,   316,   317,     0,   318,   319,
7420:      320,   321,   322,   323,   324,   325,   326,     0,   327,   328,
7421:      329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
7422:      339,   340,     0,   341,   342,   343,   344,   345,   346,   347,
7423:      348,   349,   350,   351,   352,     0,   353,   354,     0,   356,
7424:      357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
7425:      367,   368,   369,   370,     0,   371,   372,   373,   374,   375,
7426:        0,   376,   377,   378,   379,   380,     0,   382,   383,   384,
7427:      385,     0,   386,   387,   388,   389,   390,   391,   392,   393,
7428:      394,   395,   396,   492,   398,   399,     0,   400,   401,     0,
7429:      402,     0,   404,   405,   406,   407,   408,     0,   409,   410,
7430:        0,     0,   411,   412,   413,   414,   415,     0,   416,   417,
7431:      418,   419,   420,   421,   422,   423,     0,     0,   424,   425,
7432:      426,   427,   428,     0,     0,   429,   430,   431,   432,   433,
7433:      434,   435,     0,   436,     0,   438,   439,   440,   441,     0,
7434:        0,   442,     0,     0,   443,   444,   445,   446,   447,   448,
7435:      449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
7436:      459,   460,   461,   462,   463,   488,     0,   560,     0,     0,
7437:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
7438:        0,    90,    91,    92,    93,    94,    95,    96,    97,     0,
7439:       98,    99,   100,     0,     0,     0,     0,     0,     0,     0,
7440:      101,   102,     0,   103,   104,   105,     0,   107,   108,   109,
7441:      110,   111,     0,   113,   114,     0,   115,   116,   117,   118,
7442:      119,   120,     0,     0,   121,   122,   123,   124,   125,     0,
7443:      126,   127,   128,   129,   130,     0,     0,     0,   132,   133,
7444:      134,   135,   136,     0,   138,   139,   140,     0,   141,   142,
7445:      143,   144,   145,   146,     0,     0,   148,   149,   150,     0,
7446:        0,     0,     0,     0,     0,     0,   152,   153,   154,   155,
7447:      156,   157,   158,   159,   160,   161,     0,   162,     0,   163,
7448:      164,   165,   166,   167,   168,     0,   169,   170,   171,   172,
7449:      173,     0,     0,   174,   175,   176,   177,   178,     0,   179,
7450:      180,   181,     0,   182,   183,   184,     0,   185,   186,   187,
7451:      188,   189,   190,   191,   192,   193,   194,     0,   195,     0,
7452:      196,   197,   198,   199,     0,   200,     0,   201,     0,     0,
7453:        0,   204,   205,   206,     0,   208,     0,   209,     0,   210,
7454:      211,     0,   212,   213,   214,   215,   216,   604,     0,   219,
7455:      220,   221,   222,     0,   223,   224,   225,   226,   227,   228,
7456:        0,   229,     0,   231,   232,   233,   234,   235,   236,   237,
7457:        0,   238,     0,   239,     0,     0,   242,     0,   244,   245,
7458:      246,   247,   248,     0,     0,   249,     0,   251,     0,     0,
7459:      253,   254,   255,     0,     0,   256,   257,   258,   259,   260,
7460:      490,   262,   263,   264,   265,   266,   267,   268,   269,   270,
7461:      271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
7462:        0,   282,   283,   284,   285,   286,     0,   287,   288,     0,
7463:      290,     0,   291,   292,   293,   294,   295,   296,     0,   297,
7464:      298,     0,     0,   299,   300,   301,     0,     0,   302,   303,
7465:        0,   305,     0,   307,   308,   309,   310,   311,   312,   313,
7466:      314,   315,   316,   317,     0,   318,   319,   320,   321,   322,
7467:      323,   324,   325,   326,     0,   327,   328,   329,   330,   331,
7468:      332,   333,   334,   335,   336,   337,   338,   339,   340,     0,
7469:      341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
7470:      351,   352,     0,   353,   354,     0,   356,   357,   358,   359,
7471:      360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
7472:      370,     0,   371,   372,   373,   374,   375,     0,   376,   377,
7473:      378,   379,   380,     0,   382,   383,   384,   385,     0,   386,
7474:      387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
7475:      492,   398,   399,     0,   400,   401,     0,   402,     0,   404,
7476:      405,   406,   407,   408,     0,   409,   410,     0,     0,   411,
7477:      412,   413,   414,   415,     0,   416,   417,   418,   419,   420,
7478:      421,   422,   423,     0,     0,   424,   425,   426,   427,   428,
7479:        0,     0,   429,   430,   431,   432,   433,   434,   435,     0,
7480:      436,     0,   438,   439,   440,   441,     0,     0,   442,     0,
7481:        0,   443,   444,   445,   446,   447,   448,   449,   450,   451,
7482:      452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
7483:      462,   463,   488,     0,   560,     0,     0,     0,     0,     0,
7484:        0,     0,     0,     0,     0,     0,     0,     0,    90,    91,
7485:       92,    93,    94,    95,    96,    97,     0,    98,    99,   100,
7486:        0,     0,     0,     0,     0,     0,     0,   101,   102,     0,
7487:      103,   104,   105,     0,   107,   108,   109,   110,   111,     0,
7488:      113,   114,     0,   115,   116,   117,   118,   119,   120,     0,
7489:        0,   121,   122,   123,   124,   125,     0,   126,   127,   128,
7490:      129,   130,     0,     0,     0,   132,   133,   134,   135,   136,
7491:        0,   138,   139,   140,     0,   141,   142,   143,   144,   145,
7492:      146,     0,     0,   148,   149,   150,     0,     0,     0,     0,
7493:        0,     0,     0,   152,   153,   154,   155,   156,   157,   158,
7494:      159,   160,   161,     0,   162,     0,   163,   164,   165,   166,
7495:      167,   168,     0,   169,   170,   171,   172,   173,     0,     0,
7496:      174,   175,   176,   177,   178,     0,   179,   180,   181,     0,
7497:      182,   183,   184,     0,   185,   186,   187,   188,   189,   190,
7498:      191,   192,   193,   194,     0,   195,     0,   196,   197,   198,
7499:      199,     0,   200,     0,   201,     0,     0,     0,   204,   205,
7500:      206,     0,   208,     0,   209,     0,   210,   211,     0,   212,
7501:      213,   214,   215,   216,   608,     0,   219,   220,   221,   222,
7502:        0,   223,   224,   225,   226,   227,   228,     0,   229,     0,
7503:      231,   232,   233,   234,   235,   236,   237,     0,   238,     0,
7504:      239,     0,     0,   242,     0,   244,   245,   246,   247,   248,
7505:        0,     0,   249,     0,   251,     0,     0,   253,   254,   255,
7506:        0,     0,   256,   257,   258,   259,   260,   490,   262,   263,
7507:      264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
7508:      274,   275,   276,   277,   278,   279,   280,     0,   282,   283,
7509:      284,   285,   286,     0,   287,   288,     0,   290,     0,   291,
7510:      292,   293,   294,   295,   296,     0,   297,   298,     0,     0,
7511:      299,   300,   301,     0,     0,   302,   303,     0,   305,     0,
7512:      307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
7513:      317,     0,   318,   319,   320,   321,   322,   323,   324,   325,
7514:      326,     0,   327,   328,   329,   330,   331,   332,   333,   334,
7515:      335,   336,   337,   338,   339,   340,     0,   341,   342,   343,
7516:      344,   345,   346,   347,   348,   349,   350,   351,   352,     0,
7517:      353,   354,     0,   356,   357,   358,   359,   360,   361,   362,
7518:      363,   364,   365,   366,   367,   368,   369,   370,     0,   371,
7519:      372,   373,   374,   375,     0,   376,   377,   378,   379,   380,
7520:        0,   382,   383,   384,   385,     0,   386,   387,   388,   389,
7521:      390,   391,   392,   393,   394,   395,   396,   492,   398,   399,
7522:        0,   400,   401,     0,   402,     0,   404,   405,   406,   407,
7523:      408,     0,   409,   410,     0,     0,   411,   412,   413,   414,
7524:      415,     0,   416,   417,   418,   419,   420,   421,   422,   423,
7525:        0,     0,   424,   425,   426,   427,   428,     0,     0,   429,
7526:      430,   431,   432,   433,   434,   435,     0,   436,     0,   438,
7527:      439,   440,   441,     0,     0,   442,     0,     0,   443,   444,
7528:      445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
7529:      455,   456,   457,   458,   459,   460,   461,   462,   463,   488,
7530:        0,   560,     0,     0,     0,     0,     0,     0,     0,     0,
7531:        0,     0,     0,     0,     0,    90,    91,    92,    93,    94,
7532:       95,    96,    97,     0,    98,    99,   100,     0,     0,     0,
7533:        0,     0,     0,     0,   101,   102,     0,   103,   104,   105,
7534:        0,   107,   108,   109,   110,   111,     0,   113,   114,     0,
7535:      115,   116,   117,   118,   119,   120,     0,     0,   121,   122,
7536:      123,   124,   125,     0,   126,   127,   128,   129,   130,     0,
7537:        0,     0,   132,   133,   134,   135,   136,     0,   138,   139,
7538:      140,     0,   141,   142,   143,   144,   145,   146,     0,     0,
7539:      148,   149,   150,     0,     0,     0,     0,     0,     0,     0,
7540:      152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
7541:        0,   162,     0,   163,   164,   165,   166,   167,   168,     0,
7542:      169,   170,   171,   172,   173,     0,     0,   174,   175,   176,
7543:      177,   178,     0,   179,   180,   181,     0,   182,   183,   184,
7544:        0,   185,   186,   187,   188,   189,   190,   191,   192,   193,
7545:      194,     0,   195,     0,   196,   197,   198,   199,     0,   200,
7546:        0,   201,     0,     0,     0,   204,   205,   206,     0,   208,
7547:        0,   209,     0,   210,   211,     0,   212,   213,   214,   215,
7548:      216,   217,     0,   219,   220,   221,   222,     0,   223,   224,
7549:      225,   226,   227,   228,     0,   229,     0,   231,   232,   233,
7550:      234,   235,   236,   237,     0,   238,     0,   239,     0,     0,
7551:      242,     0,   244,   245,   246,   247,   248,     0,     0,   249,
7552:        0,   251,     0,     0,   253,   254,   255,     0,     0,   256,
7553:      257,   258,   259,   260,   490,   262,   263,   264,   265,   266,
7554:      267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
7555:      277,   278,   279,   280,     0,   282,   283,   284,   285,   286,
7556:        0,   287,   288,     0,   290,     0,   291,   292,   293,   294,
7557:      295,   296,     0,   297,   298,     0,     0,   299,   300,   301,
7558:        0,     0,   302,   303,     0,   305,     0,   307,   308,   309,
7559:      310,   311,   312,   313,   314,   315,   316,   317,     0,   318,
7560:      319,   320,   321,   322,   323,   324,   325,   326,     0,   327,
7561:      328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
7562:      338,   339,   340,     0,   341,   342,   343,   344,   345,   346,
7563:      347,   348,   349,   350,   351,   352,     0,   353,   354,     0,
7564:      356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
7565:      366,   367,   368,   369,   370,     0,   371,   372,   373,   374,
7566:      375,     0,   376,   377,   378,   379,   380,     0,   382,   383,
7567:      384,   385,     0,   386,   387,   388,   389,   390,   391,   392,
7568:      393,   394,   395,   396,   492,   398,   399,     0,   400,   401,
7569:        0,   402,     0,   404,   405,   406,   407,   408,     0,   409,
7570:      410,     0,     0,   411,   412,   413,   414,   415,     0,   416,
7571:      417,   418,   419,   420,   421,   422,   423,     0,     0,   424,
7572:      425,   426,   427,   428,     0,     0,   429,   430,   431,   432,
7573:      433,   434,   435,     0,   436,     0,   438,   439,   440,   441,
7574:        0,     0,   442,     0,     0,   443,   444,   445,   446,   447,
7575:      448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
7576:      458,   459,   460,   461,   462,   463,   488,     0,     0,     0,
7577:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
7578:        0,     0,    90,    91,    92,    93,    94,    95,    96,    97,
7579:      634,    98,    99,   100,     0,     0,     0,     0,     0,     0,
7580:        0,   101,   102,     0,   103,   104,   105,     0,   107,   108,
7581:      109,   110,   111,     0,   113,   114,     0,   115,   116,   117,
7582:      118,   119,   120,     0,     0,   121,   122,   123,   124,   125,
7583:        0,   126,   127,   128,   129,   130,     0,     0,     0,   132,
7584:      133,   134,   135,   136,     0,   138,   139,   140,     0,   141,
7585:      142,   143,   144,   145,   146,     0,     0,   148,   149,   150,
7586:        0,     0,     0,     0,     0,     0,     0,   152,   153,   154,
7587:      155,   156,   157,   158,   159,   160,   161,     0,   162,     0,
7588:      163,   164,   165,   166,   167,   168,     0,   169,   170,   171,
7589:      172,   173,     0,     0,   174,   175,   176,   177,   178,     0,
7590:      179,   180,   181,     0,   182,   183,   184,     0,   185,   186,
7591:      187,   188,   189,   190,   191,   192,   193,   194,     0,   195,
7592:        0,   196,   197,   198,   199,     0,   200,     0,   201,     0,
7593:        0,     0,   204,   205,   206,     0,   208,     0,   209,     0,
7594:      210,   211,     0,   212,   213,   214,   215,   216,   217,     0,
7595:      219,   220,   221,   222,     0,   223,   224,   225,   226,   227,
7596:      228,     0,   229,     0,   231,   232,   233,   234,   235,   236,
7597:      237,     0,   238,     0,   239,     0,     0,   242,     0,   244,
7598:      245,   246,   247,   248,     0,     0,   249,     0,   251,     0,
7599:        0,   253,   254,   255,     0,     0,   256,   257,   258,   259,
7600:      260,   490,   262,   263,   264,   265,   266,   267,   268,   269,
7601:      270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
7602:      280,     0,   282,   283,   284,   285,   286,     0,   287,   288,
7603:        0,   290,     0,   291,   292,   293,   294,   295,   296,     0,
7604:      297,   298,     0,     0,   299,   300,   301,     0,     0,   302,
7605:      303,     0,   305,     0,   307,   308,   309,   310,   311,   312,
7606:      313,   314,   315,   316,   317,     0,   318,   319,   320,   321,
7607:      322,   323,   324,   325,   326,     0,   327,   328,   329,   330,
7608:      331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
7609:        0,   341,   342,   343,   344,   345,   346,   347,   348,   349,
7610:      350,   351,   352,     0,   353,   354,     0,   356,   357,   358,
7611:      359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
7612:      369,   370,     0,   371,   372,   373,   374,   375,     0,   376,
7613:      377,   378,   379,   380,     0,   382,   383,   384,   385,     0,
7614:      386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
7615:      396,   492,   398,   399,     0,   400,   401,     0,   402,     0,
7616:      404,   405,   406,   407,   408,     0,   409,   410,     0,     0,
7617:      411,   412,   413,   414,   415,     0,   416,   417,   418,   419,
7618:      420,   421,   422,   423,     0,     0,   424,   425,   426,   427,
7619:      428,     0,     0,   429,   430,   431,   432,   433,   434,   435,
7620:        0,   436,     0,   438,   439,   440,   441,     0,     0,   442,
7621:        0,     0,   443,   444,   445,   446,   447,   448,   449,   450,
7622:      451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
7623:      461,   462,   463,   488,     0,   560,     0,     0,     0,     0,
7624:        0,     0,     0,     0,     0,     0,     0,     0,     0,    90,
7625:       91,    92,    93,    94,    95,    96,    97,     0,    98,    99,
7626:      100,     0,     0,     0,     0,     0,     0,     0,   101,   102,
7627:        0,   103,   104,   105,     0,   107,   108,   109,   110,   111,
7628:        0,   113,   114,     0,   115,   116,   117,   118,   119,   120,
7629:        0,     0,   121,   122,   123,   124,   125,     0,   126,   127,
7630:      128,   129,   130,     0,     0,     0,   132,   133,   134,   135,
7631:      136,     0,   138,   139,   140,     0,   141,   142,   143,   144,
7632:      145,   146,     0,     0,   148,   149,   150,     0,     0,     0,
7633:        0,     0,     0,     0,   152,   153,   154,   155,   156,   157,
7634:      158,   159,   160,   161,     0,   162,     0,   163,   164,   165,
7635:      166,   167,   168,     0,   169,   170,   171,   172,   173,     0,
7636:        0,   174,   175,   176,   177,   178,     0,   179,   180,   181,
7637:        0,   182,   183,   184,     0,   185,   186,   187,   188,   189,
7638:      190,   191,   192,   193,   194,     0,   195,     0,   196,   197,
7639:      198,   199,     0,   200,     0,   201,     0,     0,     0,   204,
7640:      205,   206,     0,   208,     0,   209,     0,   210,   211,     0,
7641:      212,   213,   214,   215,   216,  1052,     0,   219,   220,   221,
7642:      222,     0,   223,   224,   225,   226,   227,   228,     0,   229,
7643:        0,   231,   232,   233,   234,   235,   236,   237,     0,   238,
7644:        0,   239,     0,     0,   242,     0,   244,   245,   246,   247,
7645:      248,     0,     0,   249,     0,   251,     0,     0,   253,   254,
7646:      255,     0,     0,   256,   257,   258,   259,   260,   490,   262,
7647:      263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
7648:      273,   274,   275,   276,   277,   278,   279,   280,     0,   282,
7649:      283,   284,   285,   286,     0,   287,   288,     0,   290,     0,
7650:      291,   292,   293,   294,   295,   296,     0,   297,   298,     0,
7651:        0,   299,   300,   301,     0,     0,   302,   303,     0,   305,
7652:        0,   307,   308,   309,   310,   311,   312,   313,   314,   315,
7653:      316,   317,     0,   318,   319,   320,   321,   322,   323,   324,
7654:      325,   326,     0,   327,   328,   329,   330,   331,   332,   333,
7655:      334,   335,   336,   337,   338,   339,   340,     0,   341,   342,
7656:      343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
7657:        0,   353,   354,     0,   356,   357,   358,   359,   360,   361,
7658:      362,   363,   364,   365,   366,   367,   368,   369,   370,     0,
7659:      371,   372,   373,   374,   375,     0,   376,   377,   378,   379,
7660:      380,     0,   382,   383,   384,   385,     0,   386,   387,   388,
7661:      389,   390,   391,   392,   393,   394,   395,   396,   492,   398,
7662:      399,     0,   400,   401,     0,   402,     0,   404,   405,   406,
7663:      407,   408,     0,   409,   410,     0,     0,   411,   412,   413,
7664:      414,   415,     0,   416,   417,   418,   419,   420,   421,   422,
7665:      423,     0,     0,   424,   425,   426,   427,   428,     0,     0,
7666:      429,   430,   431,   432,   433,   434,   435,     0,   436,     0,
7667:      438,   439,   440,   441,     0,     0,   442,     0,     0,   443,
7668:      444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
7669:      454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
7670:      488,     0,   560,     0,     0,     0,     0,     0,     0,     0,
7671:        0,     0,     0,     0,     0,     0,    90,    91,    92,    93,
7672:       94,    95,    96,    97,     0,    98,    99,   100,     0,     0,
7673:        0,     0,     0,     0,     0,   101,   102,     0,   103,   104,
7674:      105,     0,   107,   108,   109,   110,   111,     0,   113,   114,
7675:        0,   115,   116,   117,   118,   119,   120,     0,     0,   121,
7676:      122,   123,   124,   125,     0,   126,   127,   128,   129,   130,
7677:        0,     0,     0,   132,   133,   134,   135,   136,     0,   138,
7678:      139,   140,     0,   141,   142,   143,   144,   145,   146,     0,
7679:        0,   148,   149,   150,     0,     0,     0,     0,     0,     0,
7680:        0,   152,   153,   154,   155,   156,   157,   158,   159,   160,
7681:      161,     0,   162,     0,   163,   164,   165,   166,   167,   168,
7682:        0,   169,   170,   171,   172,   173,     0,     0,   174,   175,
7683:      176,   177,   178,     0,   179,   180,   181,     0,   182,   183,
7684:      184,     0,   185,   186,   187,   188,   189,   190,   191,   192,
7685:      193,   194,     0,   195,     0,   196,   197,   198,   199,     0,
7686:      200,     0,   201,     0,     0,     0,   204,   205,   206,     0,
7687:      208,     0,   209,     0,   210,   211,     0,   212,   213,   214,
7688:      215,   216,  1054,     0,   219,   220,   221,   222,     0,   223,
7689:      224,   225,   226,   227,   228,     0,   229,     0,   231,   232,
7690:      233,   234,   235,   236,   237,     0,   238,     0,   239,     0,
7691:        0,   242,     0,   244,   245,   246,   247,   248,     0,     0,
7692:      249,     0,   251,     0,     0,   253,   254,   255,     0,     0,
7693:      256,   257,   258,   259,   260,   490,   262,   263,   264,   265,
7694:      266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
7695:      276,   277,   278,   279,   280,     0,   282,   283,   284,   285,
7696:      286,     0,   287,   288,     0,   290,     0,   291,   292,   293,
7697:      294,   295,   296,     0,   297,   298,     0,     0,   299,   300,
7698:      301,     0,     0,   302,   303,     0,   305,     0,   307,   308,
7699:      309,   310,   311,   312,   313,   314,   315,   316,   317,     0,
7700:      318,   319,   320,   321,   322,   323,   324,   325,   326,     0,
7701:      327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
7702:      337,   338,   339,   340,     0,   341,   342,   343,   344,   345,
7703:      346,   347,   348,   349,   350,   351,   352,     0,   353,   354,
7704:        0,   356,   357,   358,   359,   360,   361,   362,   363,   364,
7705:      365,   366,   367,   368,   369,   370,     0,   371,   372,   373,
7706:      374,   375,     0,   376,   377,   378,   379,   380,     0,   382,
7707:      383,   384,   385,     0,   386,   387,   388,   389,   390,   391,
7708:      392,   393,   394,   395,   396,   492,   398,   399,     0,   400,
7709:      401,     0,   402,     0,   404,   405,   406,   407,   408,     0,
7710:      409,   410,     0,     0,   411,   412,   413,   414,   415,     0,
7711:      416,   417,   418,   419,   420,   421,   422,   423,     0,     0,
7712:      424,   425,   426,   427,   428,     0,     0,   429,   430,   431,
7713:      432,   433,   434,   435,     0,   436,     0,   438,   439,   440,
7714:      441,     0,     0,   442,     0,     0,   443,   444,   445,   446,
7715:      447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
7716:      457,   458,   459,   460,   461,   462,   463,   488,     0,   560,
7717:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
7718:        0,     0,     0,    90,    91,    92,    93,    94,    95,    96,
7719:       97,     0,    98,    99,   100,     0,     0,     0,     0,     0,
7720:        0,     0,   101,   102,     0,   103,   104,   105,     0,   107,
7721:      108,   109,   110,   111,     0,   113,   114,     0,   115,   116,
7722:      117,   118,   119,   120,     0,     0,   121,   122,   123,   124,
7723:      125,     0,   126,   127,   128,   129,   130,     0,     0,     0,
7724:      132,   133,   134,   135,   136,     0,   138,   139,   140,     0,
7725:      141,   142,   143,   144,   145,   146,     0,     0,   148,   149,
7726:      150,     0,     0,     0,     0,     0,     0,     0,   152,   153,
7727:      154,   155,   156,   157,   158,   159,   160,   161,     0,   162,
7728:        0,   163,   164,   165,   166,   167,   168,     0,   169,   170,
7729:      171,   172,   173,     0,     0,   174,   175,   176,   177,   178,
7730:        0,   179,   180,   181,     0,   182,   183,   184,     0,   185,
7731:      186,   187,   188,   189,   190,   191,   192,   193,   194,     0,
7732:      195,     0,   196,   197,   198,   199,     0,   200,     0,   201,
7733:        0,     0,     0,   204,   205,   206,     0,   208,     0,   209,
7734:        0,   210,   211,     0,   212,   213,   214,   215,   216,  1460,
7735:        0,   219,   220,   221,   222,     0,   223,   224,   225,   226,
7736:      227,   228,     0,   229,     0,   231,   232,   233,   234,   235,
7737:      236,   237,     0,   238,     0,   239,     0,     0,   242,     0,
7738:      244,   245,   246,   247,   248,     0,     0,   249,     0,   251,
7739:        0,     0,   253,   254,   255,     0,     0,   256,   257,   258,
7740:      259,   260,   490,   262,   263,   264,   265,   266,   267,   268,
7741:      269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
7742:      279,   280,     0,   282,   283,   284,   285,   286,     0,   287,
7743:      288,     0,   290,     0,   291,   292,   293,   294,   295,   296,
7744:        0,   297,   298,     0,     0,   299,   300,   301,     0,     0,
7745:      302,   303,     0,   305,     0,   307,   308,   309,   310,   311,
7746:      312,   313,   314,   315,   316,   317,     0,   318,   319,   320,
7747:      321,   322,   323,   324,   325,   326,     0,   327,   328,   329,
7748:      330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
7749:      340,     0,   341,   342,   343,   344,   345,   346,   347,   348,
7750:      349,   350,   351,   352,     0,   353,   354,     0,   356,   357,
7751:      358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
7752:      368,   369,   370,     0,   371,   372,   373,   374,   375,     0,
7753:      376,   377,   378,   379,   380,     0,   382,   383,   384,   385,
7754:        0,   386,   387,   388,   389,   390,   391,   392,   393,   394,
7755:      395,   396,   492,   398,   399,     0,   400,   401,     0,   402,
7756:        0,   404,   405,   406,   407,   408,     0,   409,   410,     0,
7757:        0,   411,   412,   413,   414,   415,     0,   416,   417,   418,
7758:      419,   420,   421,   422,   423,     0,     0,   424,   425,   426,
7759:      427,   428,     0,     0,   429,   430,   431,   432,   433,   434,
7760:      435,     0,   436,     0,   438,   439,   440,   441,     0,     0,
7761:      442,     0,     0,   443,   444,   445,   446,   447,   448,   449,
7762:      450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
7763:      460,   461,   462,   463,   488,     0,     0,     0,     0,     0,
7764:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
7765:       90,    91,    92,    93,    94,    95,    96,    97,     0,    98,
7766:       99,   100,     0,     0,     0,     0,     0,  2224,     0,   101,
7767:      102,     0,   103,   104,   105,     0,   107,   108,   109,   110,
7768:      111,     0,   113,   114,     0,   115,   116,   117,   118,   119,
7769:      120,     0,     0,   121,   122,   123,   124,   125,     0,   126,
7770:      127,   128,   129,   130,     0,     0,     0,   132,   133,   134,
7771:      135,   136,     0,   138,   139,   140,     0,   141,   142,   143,
7772:      144,   145,   146,     0,     0,   148,   149,   150,     0,     0,
7773:        0,     0,     0,     0,     0,   152,   153,   154,   155,   156,
7774:      157,   158,   159,   160,   161,     0,   162,     0,   163,   164,
7775:      165,   166,   167,   168,     0,   169,   170,   171,   172,   173,
7776:        0,     0,   174,   175,   176,   177,   178,     0,   179,   180,
7777:      181,     0,   182,   183,   184,     0,   185,   186,   187,   188,
7778:      189,   190,   191,   192,   193,   194,     0,   195,     0,   196,
7779:      197,   198,   199,     0,   200,     0,   201,     0,     0,     0,
7780:      204,   205,   206,     0,   208,     0,   209,     0,   210,   211,
7781:        0,   212,   213,   214,   215,   216,   217,     0,   219,   220,
7782:      221,   222,     0,   223,   224,   225,   226,   227,   228,     0,
7783:      229,     0,   231,   232,   233,   234,   235,   236,   237,     0,
7784:      238,     0,   239,     0,     0,   242,     0,   244,   245,   246,
7785:      247,   248,     0,     0,   249,     0,   251,     0,     0,   253,
7786:      254,   255,     0,     0,   256,   257,   258,   259,   260,   490,
7787:      262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
7788:      272,   273,   274,   275,   276,   277,   278,   279,   280,     0,
7789:      282,   283,   284,   285,   286,     0,   287,   288,     0,   290,
7790:        0,   291,   292,   293,   294,   295,   296,     0,   297,   298,
7791:        0,     0,   299,   300,   301,     0,     0,   302,   303,     0,
7792:      305,     0,   307,   308,   309,   310,   311,   312,   313,   314,
7793:      315,   316,   317,     0,   318,   319,   320,   321,   322,   323,
7794:      324,   325,   326,     0,   327,   328,   329,   330,   331,   332,
7795:      333,   334,   335,   336,   337,   338,   339,   340,     0,   341,
7796:      342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
7797:      352,     0,   353,   354,     0,   356,   357,   358,   359,   360,
7798:      361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
7799:        0,   371,   372,   373,   374,   375,     0,   376,   377,   378,
7800:      379,   380,     0,   382,   383,   384,   385,     0,   386,   387,
7801:      388,   389,   390,   391,   392,   393,   394,   395,   396,   492,
7802:      398,   399,     0,   400,   401,     0,   402,     0,   404,   405,
7803:      406,   407,   408,     0,   409,   410,     0,     0,   411,   412,
7804:      413,   414,   415,     0,   416,   417,   418,   419,   420,   421,
7805:      422,   423,     0,     0,   424,   425,   426,   427,   428,     0,
7806:        0,   429,   430,   431,   432,   433,   434,   435,     0,   436,
7807:        0,   438,   439,   440,   441,     0,     0,   442,     0,     0,
7808:      443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
7809:      453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
7810:      463,   488,     0,     0,     0,     0,     0,     0,     0,     0,
7811:        0,     0,     0,     0,     0,     0,     0,    90,    91,    92,
7812:       93,    94,    95,    96,    97,     0,    98,    99,   100,     0,
7813:        0,     0,     0,     0,  2238,     0,   101,   102,     0,   103,
7814:      104,   105,     0,   107,   108,   109,   110,   111,     0,   113,
7815:      114,     0,   115,   116,   117,   118,   119,   120,     0,     0,
7816:      121,   122,   123,   124,   125,     0,   126,   127,   128,   129,
7817:      130,     0,     0,     0,   132,   133,   134,   135,   136,     0,
7818:      138,   139,   140,     0,   141,   142,   143,   144,   145,   146,
7819:        0,     0,   148,   149,   150,     0,     0,     0,     0,     0,
7820:        0,     0,   152,   153,   154,   155,   156,   157,   158,   159,
7821:      160,   161,     0,   162,     0,   163,   164,   165,   166,   167,
7822:      168,     0,   169,   170,   171,   172,   173,     0,     0,   174,
7823:      175,   176,   177,   178,     0,   179,   180,   181,     0,   182,
7824:      183,   184,     0,   185,   186,   187,   188,   189,   190,   191,
7825:      192,   193,   194,     0,   195,     0,   196,   197,   198,   199,
7826:        0,   200,     0,   201,     0,     0,     0,   204,   205,   206,
7827:        0,   208,     0,   209,     0,   210,   211,     0,   212,   213,
7828:      214,   215,   216,   217,     0,   219,   220,   221,   222,     0,
7829:      223,   224,   225,   226,   227,   228,     0,   229,     0,   231,
7830:      232,   233,   234,   235,   236,   237,     0,   238,     0,   239,
7831:        0,     0,   242,     0,   244,   245,   246,   247,   248,     0,
7832:        0,   249,     0,   251,     0,     0,   253,   254,   255,     0,
7833:        0,   256,   257,   258,   259,   260,   490,   262,   263,   264,
7834:      265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
7835:      275,   276,   277,   278,   279,   280,     0,   282,   283,   284,
7836:      285,   286,     0,   287,   288,     0,   290,     0,   291,   292,
7837:      293,   294,   295,   296,     0,   297,   298,     0,     0,   299,
7838:      300,   301,     0,     0,   302,   303,     0,   305,     0,   307,
7839:      308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
7840:        0,   318,   319,   320,   321,   322,   323,   324,   325,   326,
7841:        0,   327,   328,   329,   330,   331,   332,   333,   334,   335,
7842:      336,   337,   338,   339,   340,     0,   341,   342,   343,   344,
7843:      345,   346,   347,   348,   349,   350,   351,   352,     0,   353,
7844:      354,     0,   356,   357,   358,   359,   360,   361,   362,   363,
7845:      364,   365,   366,   367,   368,   369,   370,     0,   371,   372,
7846:      373,   374,   375,     0,   376,   377,   378,   379,   380,     0,
7847:      382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
7848:      391,   392,   393,   394,   395,   396,   492,   398,   399,     0,
7849:      400,   401,     0,   402,     0,   404,   405,   406,   407,   408,
7850:        0,   409,   410,     0,     0,   411,   412,   413,   414,   415,
7851:        0,   416,   417,   418,   419,   420,   421,   422,   423,     0,
7852:        0,   424,   425,   426,   427,   428,     0,     0,   429,   430,
7853:      431,   432,   433,   434,   435,     0,   436,     0,   438,   439,
7854:      440,   441,     0,     0,   442,     0,     0,   443,   444,   445,
7855:      446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
7856:      456,   457,   458,   459,   460,   461,   462,   463,   488,     0,
7857:      560,     0,     0,     0,     0,     0,     0,     0,     0,     0,
7858:        0,     0,     0,     0,    90,    91,    92,    93,    94,    95,
7859:       96,    97,     0,    98,    99,   100,     0,     0,     0,     0,
7860:        0,     0,     0,   101,   102,     0,   103,   104,   105,     0,
7861:      107,   108,   109,   110,   111,     0,   113,   114,     0,   115,
7862:      116,   117,   118,   119,   120,     0,     0,   121,   122,   123,
7863:      124,   125,     0,   126,   127,   128,   129,   130,     0,     0,
7864:        0,   132,   133,   134,   135,   136,     0,   138,   139,   140,
7865:        0,   141,   142,   143,   144,   145,   146,     0,     0,   148,
7866:      149,   150,     0,     0,     0,     0,     0,     0,     0,   152,
7867:      153,   154,   155,   156,   157,   158,   159,   160,   161,     0,
7868:      162,     0,   163,   164,   165,   166,   167,   168,     0,   169,
7869:      170,   171,   172,   173,     0,     0,   174,   175,   176,   177,
7870:      178,     0,   179,   180,   181,     0,   182,   183,   184,     0,
7871:      185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
7872:        0,   195,     0,   196,   197,   198,   199,     0,   200,     0,
7873:      201,     0,     0,     0,   204,   205,   206,     0,   208,     0,
7874:      209,     0,   210,   211,     0,   212,   213,   214,   215,   216,
7875:     2367,     0,   219,   220,   221,   222,     0,   223,   224,   225,
7876:      226,   227,   228,     0,   229,     0,   231,   232,   233,   234,
7877:      235,   236,   237,     0,   238,     0,   239,     0,     0,   242,
7878:        0,   244,   245,   246,   247,   248,     0,     0,   249,     0,
7879:      251,     0,     0,   253,   254,   255,     0,     0,   256,   257,
7880:      258,   259,   260,   490,   262,   263,   264,   265,   266,   267,
7881:      268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
7882:      278,   279,   280,     0,   282,   283,   284,   285,   286,     0,
7883:      287,   288,     0,   290,     0,   291,   292,   293,   294,   295,
7884:      296,     0,   297,   298,     0,     0,   299,   300,   301,     0,
7885:        0,   302,   303,     0,   305,     0,   307,   308,   309,   310,
7886:      311,   312,   313,   314,   315,   316,   317,     0,   318,   319,
7887:      320,   321,   322,   323,   324,   325,   326,     0,   327,   328,
7888:      329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
7889:      339,   340,     0,   341,   342,   343,   344,   345,   346,   347,
7890:      348,   349,   350,   351,   352,     0,   353,   354,     0,   356,
7891:      357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
7892:      367,   368,   369,   370,     0,   371,   372,   373,   374,   375,
7893:        0,   376,   377,   378,   379,   380,     0,   382,   383,   384,
7894:      385,     0,   386,   387,   388,   389,   390,   391,   392,   393,
7895:      394,   395,   396,   492,   398,   399,     0,   400,   401,     0,
7896:      402,     0,   404,   405,   406,   407,   408,     0,   409,   410,
7897:        0,     0,   411,   412,   413,   414,   415,     0,   416,   417,
7898:      418,   419,   420,   421,   422,   423,     0,     0,   424,   425,
7899:      426,   427,   428,     0,     0,   429,   430,   431,   432,   433,
7900:      434,   435,     0,   436,     0,   438,   439,   440,   441,     0,
7901:        0,   442,     0,     0,   443,   444,   445,   446,   447,   448,
7902:      449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
7903:      459,   460,   461,   462,   463,   488,     0,     0,     0,     0,
7904:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
7905:        0,    90,    91,    92,    93,    94,    95,    96,    97,     0,
7906:       98,    99,   100,     0,     0,     0,     0,     0,     0,     0,
7907:      101,   102,     0,   103,   104,   105,     0,   107,   108,   109,
7908:      110,   111,     0,   113,   114,     0,   115,   116,   117,   118,
7909:      119,   120,     0,     0,   121,   122,   123,   124,   125,     0,
7910:      126,   127,   128,   129,   130,     0,     0,     0,   132,   133,
7911:      134,   135,   136,     0,   138,   139,   140,     0,   141,   142,
7912:      143,   144,   145,   146,     0,     0,   148,   149,   150,     0,
7913:        0,     0,     0,     0,     0,     0,   152,   153,   154,   155,
7914:      156,   157,   158,   159,   160,   161,     0,   162,     0,   163,
7915:      164,   165,   166,   167,   168,     0,   169,   170,   171,   172,
7916:      173,     0,     0,   174,   175,   176,   177,   178,     0,   179,
7917:      180,   181,     0,   182,   183,   184,     0,   185,   186,   187,
7918:      188,   189,   190,   191,   192,   193,   194,     0,   195,     0,
7919:      196,   197,   198,   199,     0,   200,     0,   201,     0,     0,
7920:        0,   204,   205,   206,     0,   208,     0,   209,     0,   210,
7921:      211,     0,   212,   213,   214,   215,   216,   217,     0,   219,
7922:      220,   221,   222,     0,   223,   224,   225,   226,   227,   228,
7923:        0,   229,     0,   231,   232,   233,   234,   235,   236,   237,
7924:        0,   238,     0,   239,     0,     0,   242,     0,   244,   245,
7925:      246,   247,   248,     0,     0,   249,     0,   251,     0,     0,
7926:      253,   254,   255,     0,     0,   256,   257,   258,   259,   260,
7927:      490,   262,   263,   264,   265,   266,   267,   268,   269,   270,
7928:      271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
7929:        0,   282,   283,   284,   285,   286,     0,   287,   288,     0,
7930:      290,     0,   291,   292,   293,   294,   295,   296,     0,   297,
7931:      298,     0,     0,   299,   300,   301,     0,     0,   302,   303,
7932:        0,   305,     0,   307,   308,   309,   310,   311,   312,   313,
7933:      314,   315,   316,   317,     0,   318,   319,   320,   321,   322,
7934:      323,   324,   325,   326,     0,   327,   328,   329,   330,   331,
7935:      332,   333,   334,   335,   336,   337,   338,   339,   340,     0,
7936:      341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
7937:      351,   352,     0,   353,   354,     0,   356,   357,   358,   359,
7938:      360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
7939:      370,     0,   371,   372,   373,   374,   375,     0,   376,   377,
7940:      378,   379,   380,     0,   382,   383,   384,   385,     0,   386,
7941:      387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
7942:      492,   398,   399,     0,   400,   401,     0,   402,     0,   404,
7943:      405,   406,   407,   408,     0,   409,   410,     0,     0,   411,
7944:      412,   413,   414,   415,     0,   416,   417,   418,   419,   420,
7945:      421,   422,   423,     0,     0,   424,   425,   426,   427,   428,
7946:        0,     0,   429,   430,   431,   432,   433,   434,   435,     0,
7947:      436,     0,   438,   439,   440,   441,     0,     0,   442,     0,
7948:        0,   443,   444,   445,   446,   447,   448,   449,   450,   451,
7949:      452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
7950:      462,   463,   488,     0,     0,     0,     0,     0,     0,     0,
7951:        0,     0,     0,     0,     0,     0,     0,     0,    90,    91,
7952:       92,    93,    94,    95,    96,    97,     0,    98,    99,   100,
7953:        0,     0,     0,     0,     0,     0,     0,   101,   102,     0,
7954:      103,   104,   105,     0,   107,   108,   109,   110,   111,     0,
7955:      113,   114,     0,   115,   116,   117,   118,   119,   120,     0,
7956:        0,   121,   122,   123,   124,   125,     0,   126,   127,   128,
7957:      129,   130,     0,     0,     0,   132,   133,   134,   135,   136,
7958:        0,   138,   139,   140,     0,   141,   142,   143,   144,   145,
7959:      146,     0,     0,   148,   149,   150,     0,     0,     0,     0,
7960:        0,     0,     0,   152,   153,   154,   155,   156,   157,   158,
7961:      159,   160,   161,     0,   162,     0,   163,   164,   165,   166,
7962:      167,   168,     0,   169,   170,   171,   172,   173,     0,     0,
7963:      174,   175,   176,   177,   178,     0,   179,   180,   181,     0,
7964:      182,   183,   184,     0,   185,   186,   187,   188,   189,   190,
7965:      191,   192,   193,   194,     0,   195,     0,   196,   197,   198,
7966:      199,     0,   200,     0,   201,     0,     0,     0,   204,   205,
7967:      206,     0,   208,     0,   209,     0,   210,   211,     0,   212,
7968:      213,   214,   215,   216,   217,     0,   219,   220,   221,   222,
7969:        0,   223,   224,   225,   226,   227,   228,     0,   229,     0,
7970:      231,   232,   233,   234,   235,   236,   237,     0,   238,     0,
7971:      239,     0,     0,   242,     0,   244,   245,   246,   247,   248,
7972:        0,     0,   249,     0,   251,     0,     0,   253,   254,   552,
7973:        0,     0,   256,   257,   258,   259,   260,   490,   262,   263,
7974:      264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
7975:      274,   275,   276,   277,   278,   279,   280,     0,   282,   283,
7976:      284,   285,   286,     0,   287,   288,     0,   290,     0,   291,
7977:      292,   293,   294,   295,   296,     0,   297,   298,     0,     0,
7978:      299,   300,   301,     0,     0,   302,   303,     0,   305,     0,
7979:      307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
7980:      317,     0,   318,   319,   320,   321,   322,   323,   324,   325,
7981:      326,     0,   327,   328,   329,   330,   331,   332,   333,   334,
7982:      335,   336,   337,   338,   339,   340,     0,   341,   342,   343,
7983:      344,   345,   346,   347,   348,   349,   350,   351,   352,     0,
7984:      353,   354,     0,   356,   357,   358,   359,   360,   361,   362,
7985:      363,   553,   365,   366,   367,   368,   369,   370,     0,   371,
7986:      372,   373,   374,   554,     0,   376,   377,   378,   379,   380,
7987:        0,   382,   383,   384,   385,     0,   386,   387,   388,   389,
7988:      390,   391,   392,   393,   394,   395,   396,   492,   398,   399,
7989:        0,   400,   401,     0,   402,     0,   404,   405,   406,   407,
7990:      408,     0,   555,   410,     0,     0,   411,   412,   413,   414,
7991:      415,     0,   416,   417,   418,   419,   420,   421,   422,   423,
7992:        0,     0,   424,   425,   426,   427,   428,     0,     0,   429,
7993:      430,   431,   432,   433,   434,   435,     0,   436,     0,   438,
7994:      439,   440,   441,     0,     0,   442,     0,     0,   443,   444,
7995:      445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
7996:      455,   456,   457,   458,   459,   460,   461,   462,   463,   488,
7997:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
7998:        0,     0,     0,     0,     0,    90,    91,    92,    93,    94,
7999:       95,    96,    97,     0,    98,    99,   100,     0,     0,     0,
8000:        0,     0,     0,     0,   101,   102,     0,   103,   104,   105,
8001:        0,   107,   108,   109,   110,   111,     0,   113,   114,     0,
8002:      115,   116,   117,   118,   119,   120,     0,     0,   121,   122,
8003:      123,   124,   125,     0,   126,   127,   128,   129,   130,     0,
8004:        0,     0,   132,   133,   134,   135,   136,     0,   138,   139,
8005:      140,     0,   141,   142,   143,   144,   145,   146,     0,     0,
8006:      148,   149,   150,     0,     0,     0,     0,     0,     0,     0,
8007:      152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
8008:        0,   162,     0,   163,   164,   165,   166,   167,   168,     0,
8009:      169,   170,   171,   172,   173,     0,     0,   174,   175,   176,
8010:      177,   178,     0,   179,   180,   181,     0,   182,   183,   184,
8011:        0,   185,   186,   187,   188,   189,   190,   191,   192,   193,
8012:      194,     0,   195,     0,   196,   197,   198,   199,     0,   200,
8013:        0,   201,     0,     0,     0,   204,   205,   206,     0,   208,
8014:        0,   209,     0,   210,   211,     0,   212,   213,   214,   215,
8015:      216,   217,     0,   219,   220,   221,   222,     0,   223,   224,
8016:      225,   226,   227,   228,     0,   229,     0,   231,   232,   233,
8017:      234,   235,   236,   237,     0,   238,     0,   239,     0,     0,
8018:      242,     0,   244,   245,   246,   247,   248,     0,     0,   249,
8019:        0,   251,     0,     0,   253,   254,   255,     0,     0,   256,
8020:      257,   258,   259,   260,   490,   262,   263,   264,   265,   266,
8021:      267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
8022:      277,   278,   279,   280,     0,   282,   283,   284,   285,   286,
8023:        0,   287,   288,     0,   290,     0,   291,   292,   293,   294,
8024:      295,   296,     0,   297,   298,     0,     0,   299,   300,   301,
8025:        0,     0,   302,   303,     0,   305,     0,   307,   308,   309,
8026:      310,   311,   312,   313,   314,   315,   316,   317,     0,   318,
8027:      319,   320,   321,   322,   323,   324,   325,   326,     0,   327,
8028:      328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
8029:      338,   570,   340,     0,   341,   342,   343,   344,   345,   346,
8030:      347,   348,   349,   350,   351,   352,     0,   353,   354,     0,
8031:      356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
8032:      366,   367,   368,   369,   370,     0,   371,   372,   373,   374,
8033:      375,     0,   376,   377,   378,   379,   380,     0,   382,   383,
8034:      384,   385,     0,   386,   387,   388,   389,   390,   391,   392,
8035:      393,   394,   395,   396,   492,   398,   399,     0,   400,   401,
8036:        0,   402,     0,   404,   405,   406,   407,   408,     0,   409,
8037:      410,     0,     0,   411,   412,   413,   414,   415,     0,   416,
8038:      417,   418,   419,   420,   421,   422,   423,     0,     0,   424,
8039:      425,   426,   427,   428,     0,     0,   429,   430,   431,   432,
8040:      433,   434,   435,     0,   436,     0,   438,   439,   440,   441,
8041:        0,     0,   442,     0,     0,   443,   444,   445,   446,   447,
8042:      448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
8043:      458,   459,   460,   461,   462,   463,   488,     0,     0,     0,
8044:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
8045:        0,     0,    90,    91,    92,    93,    94,    95,    96,    97,
8046:        0,    98,    99,   100,     0,     0,     0,     0,     0,     0,
8047:        0,   101,   102,     0,   103,   104,   105,     0,   107,   108,
8048:      109,   110,   111,     0,   113,   114,     0,   115,   116,   117,
8049:      118,   119,   120,     0,     0,   121,   122,   123,   124,   125,
8050:        0,   126,   127,   128,   129,   130,     0,     0,     0,   132,
8051:      133,   134,   135,   136,     0,   138,   139,   140,     0,   141,
8052:      142,   143,   144,   145,   146,     0,     0,   148,   149,   150,
8053:        0,     0,     0,     0,     0,     0,     0,   152,   153,   154,
8054:      155,   156,   157,   158,   159,   160,   161,     0,   162,     0,
8055:      163,   164,   165,   166,   167,   168,     0,   169,   170,   171,
8056:      172,   173,     0,     0,   174,   175,   176,   177,   178,     0,
8057:      179,   180,   181,     0,   182,   183,   184,     0,   185,   186,
8058:      187,   188,   189,   190,   191,   192,   193,   194,     0,   195,
8059:        0,   196,   197,   198,   199,     0,   200,     0,   201,     0,
8060:        0,     0,   204,   205,   206,     0,   208,     0,   209,     0,
8061:      210,   211,     0,   212,   213,   214,   215,   216,   626,     0,
8062:      219,   220,   221,   222,     0,   223,   224,   225,   226,   227,
8063:      228,     0,   229,     0,   231,   232,   233,   234,   235,   236,
8064:      237,     0,   238,     0,   239,     0,     0,   242,     0,   244,
8065:      245,   246,   247,   248,     0,     0,   249,     0,   251,     0,
8066:        0,   253,   254,   255,     0,     0,   256,   257,   258,   259,
8067:      260,   490,   262,   263,   264,   265,   266,   267,   268,   269,
8068:      270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
8069:      280,     0,   282,   283,   284,   285,   286,     0,   287,   288,
8070:        0,   290,     0,   291,   292,   293,   294,   295,   296,     0,
8071:      297,   298,     0,     0,   299,   300,   301,     0,     0,   302,
8072:      303,     0,   305,     0,   307,   308,   309,   310,   311,   312,
8073:      313,   314,   315,   316,   317,     0,   318,   319,   320,   321,
8074:      322,   323,   324,   325,   326,     0,   327,   328,   329,   330,
8075:      331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
8076:        0,   341,   342,   343,   344,   345,   346,   347,   348,   349,
8077:      350,   351,   352,     0,   353,   354,     0,   356,   357,   358,
8078:      359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
8079:      369,   370,     0,   371,   372,   373,   374,   375,     0,   376,
8080:      377,   378,   379,   380,     0,   382,   383,   384,   385,     0,
8081:      386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
8082:      396,   492,   398,   399,     0,   400,   401,     0,   402,     0,
8083:      404,   405,   406,   407,   408,     0,   409,   410,     0,     0,
8084:      411,   412,   413,   414,   415,     0,   416,   417,   418,   419,
8085:      420,   421,   422,   423,     0,     0,   424,   425,   426,   427,
8086:      428,     0,     0,   429,   430,   431,   432,   433,   434,   435,
8087:        0,   436,     0,   438,   439,   440,   441,     0,     0,   442,
8088:        0,     0,   443,   444,   445,   446,   447,   448,   449,   450,
8089:      451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
8090:      461,   462,   463,   488,     0,     0,     0,     0,     0,     0,
8091:        0,     0,     0,     0,     0,     0,     0,     0,     0,    90,
8092:       91,    92,    93,    94,    95,    96,    97,     0,    98,    99,
8093:      100,     0,     0,     0,     0,     0,     0,     0,   101,   102,
8094:        0,   103,   104,   105,     0,   107,   108,   109,   110,   111,
8095:        0,   113,   114,     0,   115,   116,   117,   118,   119,   120,
8096:        0,     0,   121,   122,   123,   124,   125,     0,   126,   127,
8097:      128,   129,   130,     0,     0,     0,   132,   133,   134,   135,
8098:      136,     0,   138,   139,   140,     0,   141,   142,   143,   144,
8099:      145,   146,     0,     0,   148,   149,   150,     0,     0,     0,
8100:        0,     0,     0,     0,   152,   153,   154,   155,   156,   157,
8101:      158,   159,   160,   161,     0,   162,     0,   163,   164,   165,
8102:      166,   167,   168,     0,   169,   170,   171,   172,   173,     0,
8103:        0,   174,   175,   176,   177,   178,     0,   179,   180,   181,
8104:        0,   182,   183,   184,     0,   185,   186,   187,   188,   189,
8105:      190,   191,   192,   193,   194,     0,   195,     0,   196,   197,
8106:      198,   199,     0,   200,     0,   201,     0,     0,     0,   204,
8107:      205,   206,     0,   208,     0,   209,     0,   210,   211,     0,
8108:      212,   213,   214,   215,   216,   642,     0,   219,   220,   221,
8109:      222,     0,   223,   224,   225,   226,   227,   228,     0,   229,
8110:        0,   231,   232,   233,   234,   235,   236,   237,     0,   238,
8111:        0,   239,     0,     0,   242,     0,   244,   245,   246,   247,
8112:      248,     0,     0,   249,     0,   251,     0,     0,   253,   254,
8113:      255,     0,     0,   256,   257,   258,   259,   260,   490,   262,
8114:      263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
8115:      273,   274,   275,   276,   277,   278,   279,   280,     0,   282,
8116:      283,   284,   285,   286,     0,   287,   288,     0,   290,     0,
8117:      291,   292,   293,   294,   295,   296,     0,   297,   298,     0,
8118:        0,   299,   300,   301,     0,     0,   302,   303,     0,   305,
8119:        0,   307,   308,   309,   310,   311,   312,   313,   314,   315,
8120:      316,   317,     0,   318,   319,   320,   321,   322,   323,   324,
8121:      325,   326,     0,   327,   328,   329,   330,   331,   332,   333,
8122:      334,   335,   336,   337,   338,   339,   340,     0,   341,   342,
8123:      343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
8124:        0,   353,   354,     0,   356,   357,   358,   359,   360,   361,
8125:      362,   363,   364,   365,   366,   367,   368,   369,   370,     0,
8126:      371,   372,   373,   374,   375,     0,   376,   377,   378,   379,
8127:      380,     0,   382,   383,   384,   385,     0,   386,   387,   388,
8128:      389,   390,   391,   392,   393,   394,   395,   396,   492,   398,
8129:      399,     0,   400,   401,     0,   402,     0,   404,   405,   406,
8130:      407,   408,     0,   409,   410,     0,     0,   411,   412,   413,
8131:      414,   415,     0,   416,   417,   418,   419,   420,   421,   422,
8132:      423,     0,     0,   424,   425,   426,   427,   428,     0,     0,
8133:      429,   430,   431,   432,   433,   434,   435,     0,   436,     0,
8134:      438,   439,   440,   441,     0,     0,   442,     0,     0,   443,
8135:      444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
8136:      454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
8137:      488,     0,     0,     0,     0,     0,     0,     0,     0,     0,
8138:        0,     0,     0,     0,     0,     0,    90,    91,    92,    93,
8139:       94,    95,    96,    97,     0,    98,    99,   100,     0,     0,
8140:        0,     0,     0,     0,     0,   101,   102,     0,   103,   104,
8141:      105,     0,   107,   108,   109,   110,   111,     0,   113,   114,
8142:        0,   115,   116,   117,   118,   119,   120,     0,     0,   121,
8143:      122,   123,   124,   125,     0,   126,   127,   128,   129,   130,
8144:        0,     0,     0,   132,   133,   134,   135,   136,     0,   138,
8145:      139,   140,     0,   141,   142,   143,   144,   145,   146,     0,
8146:        0,   148,   149,   150,     0,     0,     0,     0,     0,     0,
8147:        0,   152,   153,   154,   155,   156,   157,   158,   159,   160,
8148:      161,     0,   162,     0,   163,   164,   165,   166,   167,   168,
8149:        0,   169,   170,   171,   172,   173,     0,     0,   174,   175,
8150:      176,   177,   178,     0,   179,   180,   181,     0,   182,   183,
8151:      184,     0,   185,   186,   187,   188,   189,   190,   191,   192,
8152:      193,   194,     0,   195,     0,   196,   197,   198,   199,     0,
8153:      200,     0,   201,     0,     0,     0,   204,   205,   206,     0,
8154:      208,     0,   209,     0,   210,   211,     0,   212,   213,   214,
8155:      215,   216,   646,     0,   219,   220,   221,   222,     0,   223,
8156:      224,   225,   226,   227,   228,     0,   229,     0,   231,   232,
8157:      233,   234,   235,   236,   237,     0,   238,     0,   239,     0,
8158:        0,   242,     0,   244,   245,   246,   247,   248,     0,     0,
8159:      249,     0,   251,     0,     0,   253,   254,   255,     0,     0,
8160:      256,   257,   258,   259,   260,   490,   262,   263,   264,   265,
8161:      266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
8162:      276,   277,   278,   279,   280,     0,   282,   283,   284,   285,
8163:      286,     0,   287,   288,     0,   290,     0,   291,   292,   293,
8164:      294,   295,   296,     0,   297,   298,     0,     0,   299,   300,
8165:      301,     0,     0,   302,   303,     0,   305,     0,   307,   308,
8166:      309,   310,   311,   312,   313,   314,   315,   316,   317,     0,
8167:      318,   319,   320,   321,   322,   323,   324,   325,   326,     0,
8168:      327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
8169:      337,   338,   339,   340,     0,   341,   342,   343,   344,   345,
8170:      346,   347,   348,   349,   350,   351,   352,     0,   353,   354,
8171:        0,   356,   357,   358,   359,   360,   361,   362,   363,   364,
8172:      365,   366,   367,   368,   369,   370,     0,   371,   372,   373,
8173:      374,   375,     0,   376,   377,   378,   379,   380,     0,   382,
8174:      383,   384,   385,     0,   386,   387,   388,   389,   390,   391,
8175:      392,   393,   394,   395,   396,   492,   398,   399,     0,   400,
8176:      401,     0,   402,     0,   404,   405,   406,   407,   408,     0,
8177:      409,   410,     0,     0,   411,   412,   413,   414,   415,     0,
8178:      416,   417,   418,   419,   420,   421,   422,   423,     0,     0,
8179:      424,   425,   426,   427,   428,     0,     0,   429,   430,   431,
8180:      432,   433,   434,   435,     0,   436,     0,   438,   439,   440,
8181:      441,     0,     0,   442,     0,     0,   443,   444,   445,   446,
8182:      447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
8183:      457,   458,   459,   460,   461,   462,   463,   488,     0,     0,
8184:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
8185:        0,     0,     0,    90,    91,    92,    93,    94,    95,    96,
8186:       97,     0,    98,    99,   100,     0,     0,     0,     0,     0,
8187:        0,     0,   101,   102,     0,   103,   104,   105,     0,   107,
8188:      108,   109,   110,   111,     0,   113,   114,     0,   115,   116,
8189:      117,   118,   119,   120,     0,     0,   121,   122,   123,   124,
8190:      125,     0,   126,   127,   128,   129,   130,     0,     0,     0,
8191:      132,   133,   134,   135,   136,     0,   138,   139,   140,     0,
8192:      141,   142,   143,   144,   145,   146,     0,     0,   148,   149,
8193:      150,     0,     0,     0,     0,     0,     0,     0,   152,   153,
8194:      154,   155,   156,   157,   158,   159,   160,   161,     0,   162,
8195:        0,   163,   164,   165,   166,   167,   168,     0,   169,   170,
8196:      171,   172,   173,     0,     0,   174,   175,   176,   177,   178,
8197:        0,   179,   180,   181,     0,   182,   183,   184,     0,   185,
8198:      186,   187,   188,   189,   190,   191,   192,   193,   194,     0,
8199:      195,     0,   196,   197,   198,   199,     0,   200,     0,   201,
8200:        0,     0,     0,   204,   205,   206,     0,   208,     0,   209,
8201:        0,   210,   211,     0,   212,   213,   214,   215,   216,   649,
8202:        0,   219,   220,   221,   222,     0,   223,   224,   225,   226,
8203:      227,   228,     0,   229,     0,   231,   232,   233,   234,   235,
8204:      236,   237,     0,   238,     0,   239,     0,     0,   242,     0,
8205:      244,   245,   246,   247,   248,     0,     0,   249,     0,   251,
8206:        0,     0,   253,   254,   255,     0,     0,   256,   257,   258,
8207:      259,   260,   490,   262,   263,   264,   265,   266,   267,   268,
8208:      269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
8209:      279,   280,     0,   282,   283,   284,   285,   286,     0,   287,
8210:      288,     0,   290,     0,   291,   292,   293,   294,   295,   296,
8211:        0,   297,   298,     0,     0,   299,   300,   301,     0,     0,
8212:      302,   303,     0,   305,     0,   307,   308,   309,   310,   311,
8213:      312,   313,   314,   315,   316,   317,     0,   318,   319,   320,
8214:      321,   322,   323,   324,   325,   326,     0,   327,   328,   329,
8215:      330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
8216:      340,     0,   341,   342,   343,   344,   345,   346,   347,   348,
8217:      349,   350,   351,   352,     0,   353,   354,     0,   356,   357,
8218:      358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
8219:      368,   369,   370,     0,   371,   372,   373,   374,   375,     0,
8220:      376,   377,   378,   379,   380,     0,   382,   383,   384,   385,
8221:        0,   386,   387,   388,   389,   390,   391,   392,   393,   394,
8222:      395,   396,   492,   398,   399,     0,   400,   401,     0,   402,
8223:        0,   404,   405,   406,   407,   408,     0,   409,   410,     0,
8224:        0,   411,   412,   413,   414,   415,     0,   416,   417,   418,
8225:      419,   420,   421,   422,   423,     0,     0,   424,   425,   426,
8226:      427,   428,     0,     0,   429,   430,   431,   432,   433,   434,
8227:      435,     0,   436,     0,   438,   439,   440,   441,     0,     0,
8228:      442,     0,     0,   443,   444,   445,   446,   447,   448,   449,
8229:      450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
8230:      460,   461,   462,   463,   488,     0,     0,     0,     0,     0,
8231:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
8232:       90,    91,    92,    93,    94,    95,    96,    97,     0,    98,
8233:       99,   100,     0,     0,     0,     0,     0,     0,     0,   101,
8234:      102,     0,   103,   104,   105,     0,   107,   108,   109,   110,
8235:      111,     0,   113,   114,     0,   115,   116,   117,   118,   119,
8236:      120,     0,     0,   121,   122,   123,   124,   125,     0,   126,
8237:      127,   128,   129,   130,     0,     0,     0,   132,   133,   134,
8238:      135,   136,     0,   138,   139,   140,     0,   141,   142,   143,
8239:      144,   145,   146,     0,     0,   148,   149,   150,     0,     0,
8240:        0,     0,     0,     0,     0,   152,   153,   154,   155,   156,
8241:      157,   158,   159,   160,   161,     0,   162,     0,   163,   164,
8242:      165,   166,   167,   168,     0,   169,   170,   171,   172,   173,
8243:        0,     0,   174,   175,   176,   177,   178,     0,   179,   180,
8244:      181,     0,   182,   183,   184,     0,   185,   186,   187,   188,
8245:      189,   190,   191,   192,   193,   194,     0,   195,     0,   196,
8246:      197,   198,   199,     0,   200,     0,   201,     0,     0,     0,
8247:      204,   205,   206,     0,   208,     0,   209,     0,   210,   211,
8248:        0,   212,   213,   214,   215,   216,   217,     0,   219,   220,
8249:      221,   222,     0,   223,   224,   225,   226,   227,   228,     0,
8250:      229,     0,   231,   232,   233,   234,   235,   236,   237,     0,
8251:      238,     0,   239,     0,     0,   242,     0,   244,   245,   246,
8252:      247,   248,     0,     0,   249,     0,   251,     0,     0,   253,
8253:      254,   255,     0,     0,   256,   257,   258,   259,   260,   490,
8254:      262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
8255:      272,   273,   274,   275,   276,   277,   278,   279,   280,     0,
8256:      282,   283,   284,   285,   286,     0,   287,   288,     0,   290,
8257:        0,   291,   292,   293,   294,   295,   296,     0,   297,   298,
8258:        0,     0,   299,   300,   301,     0,     0,   302,   303,     0,
8259:      305,     0,   307,   308,   309,   310,   311,   312,   313,   314,
8260:      315,   316,   317,     0,   318,   319,   320,   321,   322,   323,
8261:      324,   325,   326,     0,   327,   328,   329,   330,   331,   332,
8262:      333,   334,   335,   336,   337,   338,   339,   340,     0,   341,
8263:      342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
8264:      352,     0,   353,   354,     0,   356,   357,   358,   359,   360,
8265:      361,   362,   363,   553,   365,   366,   367,   368,   369,   370,
8266:        0,   371,   372,   373,   374,   375,     0,   376,   377,   378,
8267:      379,   380,     0,   382,   383,   384,   385,     0,   386,   387,
8268:      388,   389,   390,   391,   392,   393,   394,   395,   396,   492,
8269:      398,   399,     0,   400,   401,     0,   402,     0,   404,   405,
8270:      406,   407,   408,     0,   555,   410,     0,     0,   411,   412,
8271:      413,   414,   415,     0,   416,   417,   418,   419,   420,   421,
8272:      422,   423,     0,     0,   424,   425,   426,   427,   428,     0,
8273:        0,   429,   430,   431,   432,   433,   434,   435,     0,   436,
8274:        0,   438,   439,   440,   441,     0,     0,   442,     0,     0,
8275:      443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
8276:      453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
8277:      463,   488,     0,     0,     0,     0,     0,     0,     0,     0,
8278:        0,     0,     0,     0,     0,     0,     0,    90,    91,    92,
8279:       93,    94,    95,    96,    97,     0,    98,    99,   100,     0,
8280:        0,     0,     0,     0,  1314,     0,   101,   102,     0,   103,
8281:      104,   105,     0,   107,   108,   109,   110,   111,     0,   113,
8282:      114,     0,   115,   116,   117,   118,   119,   120,     0,     0,
8283:      121,   122,   123,   124,   125,     0,   126,   127,   128,   129,
8284:      130,     0,     0,     0,   132,   133,   134,   135,   136,     0,
8285:      138,   139,   140,     0,   141,   142,   143,   144,   145,   146,
8286:        0,     0,   148,   149,   150,     0,     0,     0,     0,     0,
8287:        0,     0,   152,   153,   154,   155,   156,   157,   158,   159,
8288:      160,   161,     0,   162,     0,   163,   164,   165,   166,   167,
8289:      168,     0,   169,   170,   171,   172,   173,     0,     0,   174,
8290:      175,   176,   177,   178,     0,   179,   180,   181,     0,   182,
8291:      183,   184,     0,   185,   186,   187,   188,   189,   190,   191,
8292:      192,   193,   194,     0,   195,     0,   196,   197,   198,   199,
8293:        0,   200,     0,   201,     0,     0,     0,   204,   205,   206,
8294:        0,   208,     0,   209,     0,   210,   211,     0,   212,   213,
8295:      214,   215,   216,   217,     0,   219,   220,   221,   222,     0,
8296:      223,   224,   225,   226,   227,   228,     0,   229,     0,   231,
8297:      232,   233,   234,   235,   236,   237,     0,   238,     0,   239,
8298:        0,     0,   242,     0,   244,   245,   246,   247,   248,     0,
8299:        0,   249,     0,   251,     0,     0,   253,   254,   255,     0,
8300:        0,   256,   257,   258,   259,   260,   490,   262,   263,   264,
8301:      265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
8302:      275,   276,   277,   278,   279,   280,     0,   282,   283,   284,
8303:      285,   286,     0,   287,   288,     0,   290,     0,   291,   292,
8304:      293,   294,   295,   296,     0,   297,   298,     0,     0,   299,
8305:      300,   301,     0,     0,   302,   303,     0,   305,     0,   307,
8306:      308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
8307:        0,   318,   319,   320,   321,   322,   323,   324,   325,   326,
8308:        0,   327,   328,   329,   330,   331,   332,   333,   334,   335,
8309:      336,   337,   338,   339,   340,     0,   341,   342,   343,   344,
8310:      345,   346,   347,   348,   349,   350,   351,   352,     0,   353,
8311:      354,     0,   356,   357,   358,   359,   360,   361,   362,   363,
8312:      364,   365,   366,   367,   368,   369,   370,     0,   371,   372,
8313:      373,   374,   375,     0,     0,   377,   378,   379,   380,     0,
8314:      382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
8315:      391,   392,   393,   394,   395,   396,   492,   398,   399,     0,
8316:      400,   401,     0,   402,     0,   404,   405,   406,   407,   408,
8317:        0,   409,   410,     0,     0,   411,   412,   413,   414,   415,
8318:        0,   416,   417,   418,   419,   420,   421,   422,   423,     0,
8319:        0,   424,   425,   426,   427,   428,     0,     0,   429,   430,
8320:      431,   432,   433,   434,   435,     0,   436,     0,   438,   439,
8321:      440,   441,     0,     0,   442,     0,     0,   443,   444,   445,
8322:      446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
8323:      456,   457,   458,   459,   460,   461,   462,   463,   488,     0,
8324:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
8325:        0,     0,     0,     0,    90,    91,    92,    93,    94,    95,
8326:       96,    97,     0,    98,    99,   100,     0,     0,     0,     0,
8327:        0,     0,     0,   101,   102,     0,   103,   104,   105,     0,
8328:      107,   108,   109,   110,   111,     0,   113,   114,     0,   115,
8329:      116,   117,   118,   119,   120,     0,     0,   121,   122,   123,
8330:      124,   125,     0,   126,   127,   128,   129,   130,     0,     0,
8331:        0,   132,   133,   134,   135,   136,     0,   138,   139,   140,
8332:        0,   141,   142,   143,   144,   145,   146,     0,     0,   148,
8333:      149,   150,     0,     0,     0,     0,     0,     0,     0,   152,
8334:      153,   154,   155,   156,   157,   158,   159,   160,   161,     0,
8335:      162,     0,   163,   164,   165,   166,   167,   168,     0,   169,
8336:      170,   171,   172,   173,     0,     0,   174,   175,   176,   177,
8337:      178,     0,   179,   180,   181,     0,   182,   183,   184,     0,
8338:      185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
8339:        0,   195,     0,   196,   197,   198,   199,     0,   200,     0,
8340:      201,     0,     0,     0,   204,   205,   206,     0,   208,     0,
8341:      209,     0,   210,   211,     0,   212,   213,   214,   215,   216,
8342:     1447,     0,   219,   220,   221,   222,     0,   223,   224,   225,
8343:      226,   227,   228,     0,   229,     0,   231,   232,   233,   234,
8344:      235,   236,   237,     0,   238,     0,   239,     0,     0,   242,
8345:        0,   244,   245,   246,   247,   248,     0,     0,   249,     0,
8346:      251,     0,     0,   253,   254,   255,     0,     0,   256,   257,
8347:      258,   259,   260,   490,   262,   263,   264,   265,   266,   267,
8348:      268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
8349:      278,   279,   280,     0,   282,   283,   284,   285,   286,     0,
8350:      287,   288,     0,   290,     0,   291,   292,   293,   294,   295,
8351:      296,     0,   297,   298,     0,     0,   299,   300,   301,     0,
8352:        0,   302,   303,     0,   305,     0,   307,   308,   309,   310,
8353:      311,   312,   313,   314,   315,   316,   317,     0,   318,   319,
8354:      320,   321,   322,   323,   324,   325,   326,     0,   327,   328,
8355:      329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
8356:      339,   340,     0,   341,   342,   343,   344,   345,   346,   347,
8357:      348,   349,   350,   351,   352,     0,   353,   354,     0,   356,
8358:      357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
8359:      367,   368,   369,   370,     0,   371,   372,   373,   374,   375,
8360:        0,   376,   377,   378,   379,   380,     0,   382,   383,   384,
8361:      385,     0,   386,   387,   388,   389,   390,   391,   392,   393,
8362:      394,   395,   396,   492,   398,   399,     0,   400,   401,     0,
8363:      402,     0,   404,   405,   406,   407,   408,     0,   409,   410,
8364:        0,     0,   411,   412,   413,   414,   415,     0,   416,   417,
8365:      418,   419,   420,   421,   422,   423,     0,     0,   424,   425,
8366:      426,   427,   428,     0,     0,   429,   430,   431,   432,   433,
8367:      434,   435,     0,   436,     0,   438,   439,   440,   441,     0,
8368:        0,   442,     0,     0,   443,   444,   445,   446,   447,   448,
8369:      449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
8370:      459,   460,   461,   462,   463,   488,     0,     0,     0,     0,
8371:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
8372:        0,    90,    91,    92,    93,    94,    95,    96,    97,     0,
8373:       98,    99,   100,     0,     0,     0,     0,     0,     0,     0,
8374:      101,   102,     0,   103,   104,   105,     0,   107,   108,   109,
8375:      110,   111,     0,   113,   114,     0,   115,   116,   117,   118,
8376:      119,   120,     0,     0,   121,   122,   123,   124,   125,     0,
8377:      126,   127,   128,   129,   130,     0,     0,     0,   132,   133,
8378:      134,   135,   136,     0,   138,   139,   140,     0,   141,   142,
8379:      143,   144,   145,   146,     0,     0,   148,   149,   150,     0,
8380:        0,     0,     0,     0,     0,     0,   152,   153,   154,   155,
8381:      156,   157,   158,   159,   160,   161,     0,   162,     0,   163,
8382:      164,   165,   166,   167,   168,     0,   169,   170,   171,   172,
8383:      173,     0,     0,   174,   175,   176,   177,   178,     0,   179,
8384:      180,   181,     0,   182,   183,   184,     0,   185,   186,   187,
8385:      188,   189,   190,   191,   192,   193,   194,     0,   195,     0,
8386:      196,   197,   198,   199,     0,   200,     0,   201,     0,     0,
8387:        0,   204,   205,   206,     0,   208,     0,   209,     0,   210,
8388:      211,     0,   212,   213,   214,   215,   216,  1736,     0,   219,
8389:      220,   221,   222,     0,   223,   224,   225,   226,   227,   228,
8390:        0,   229,     0,   231,   232,   233,   234,   235,   236,   237,
8391:        0,   238,     0,   239,     0,     0,   242,     0,   244,   245,
8392:      246,   247,   248,     0,     0,   249,     0,   251,     0,     0,
8393:      253,   254,   255,     0,     0,   256,   257,   258,   259,   260,
8394:      490,   262,   263,   264,   265,   266,   267,   268,   269,   270,
8395:      271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
8396:        0,   282,   283,   284,   285,   286,     0,   287,   288,     0,
8397:      290,     0,   291,   292,   293,   294,   295,   296,     0,   297,
8398:      298,     0,     0,   299,   300,   301,     0,     0,   302,   303,
8399:        0,   305,     0,   307,   308,   309,   310,   311,   312,   313,
8400:      314,   315,   316,   317,     0,   318,   319,   320,   321,   322,
8401:      323,   324,   325,   326,     0,   327,   328,   329,   330,   331,
8402:      332,   333,   334,   335,   336,   337,   338,   339,   340,     0,
8403:      341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
8404:      351,   352,     0,   353,   354,     0,   356,   357,   358,   359,
8405:      360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
8406:      370,     0,   371,   372,   373,   374,   375,     0,   376,   377,
8407:      378,   379,   380,     0,   382,   383,   384,   385,     0,   386,
8408:      387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
8409:      492,   398,   399,     0,   400,   401,     0,   402,     0,   404,
8410:      405,   406,   407,   408,     0,   409,   410,     0,     0,   411,
8411:      412,   413,   414,   415,     0,   416,   417,   418,   419,   420,
8412:      421,   422,   423,     0,     0,   424,   425,   426,   427,   428,
8413:        0,     0,   429,   430,   431,   432,   433,   434,   435,     0,
8414:      436,     0,   438,   439,   440,   441,     0,     0,   442,     0,
8415:        0,   443,   444,   445,   446,   447,   448,   449,   450,   451,
8416:      452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
8417:      462,   463,   488,     0,     0,     0,     0,     0,     0,     0,
8418:        0,     0,     0,     0,     0,     0,     0,     0,    90,    91,
8419:       92,    93,    94,    95,    96,    97,     0,    98,    99,   100,
8420:        0,     0,     0,     0,     0,     0,     0,   101,   102,     0,
8421:      103,   104,   105,     0,   107,   108,   109,   110,   111,     0,
8422:      113,   114,     0,   115,   116,   117,   118,   119,   120,     0,
8423:        0,   121,   122,   123,   124,   125,     0,   126,   127,   128,
8424:      129,   130,     0,     0,     0,   132,   133,   134,   135,   136,
8425:        0,   138,   139,   140,     0,   141,   142,   143,   144,   145,
8426:      146,     0,     0,   148,   149,   150,     0,     0,     0,     0,
8427:        0,     0,     0,   152,   153,   154,   155,   156,   157,   158,
8428:      159,   160,   161,     0,   162,     0,   163,   164,   165,   166,
8429:      167,   168,     0,   169,   170,   171,   172,   173,     0,     0,
8430:      174,   175,   176,   177,   178,     0,   179,   180,   181,     0,
8431:      182,   183,   184,     0,   185,   186,   187,   188,   189,   190,
8432:      191,   192,   193,   194,     0,   195,     0,   196,   197,   198,
8433:      199,     0,   200,     0,   201,     0,     0,     0,   204,   205,
8434:      206,     0,   208,     0,   209,     0,   210,   211,     0,   212,
8435:      213,   214,   215,   216,  1748,     0,   219,   220,   221,   222,
8436:        0,   223,   224,   225,   226,   227,   228,     0,   229,     0,
8437:      231,   232,   233,   234,   235,   236,   237,     0,   238,     0,
8438:      239,     0,     0,   242,     0,   244,   245,   246,   247,   248,
8439:        0,     0,   249,     0,   251,     0,     0,   253,   254,   255,
8440:        0,     0,   256,   257,   258,   259,   260,   490,   262,   263,
8441:      264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
8442:      274,   275,   276,   277,   278,   279,   280,     0,   282,   283,
8443:      284,   285,   286,     0,   287,   288,     0,   290,     0,   291,
8444:      292,   293,   294,   295,   296,     0,   297,   298,     0,     0,
8445:      299,   300,   301,     0,     0,   302,   303,     0,   305,     0,
8446:      307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
8447:      317,     0,   318,   319,   320,   321,   322,   323,   324,   325,
8448:      326,     0,   327,   328,   329,   330,   331,   332,   333,   334,
8449:      335,   336,   337,   338,   339,   340,     0,   341,   342,   343,
8450:      344,   345,   346,   347,   348,   349,   350,   351,   352,     0,
8451:      353,   354,     0,   356,   357,   358,   359,   360,   361,   362,
8452:      363,   364,   365,   366,   367,   368,   369,   370,     0,   371,
8453:      372,   373,   374,   375,     0,   376,   377,   378,   379,   380,
8454:        0,   382,   383,   384,   385,     0,   386,   387,   388,   389,
8455:      390,   391,   392,   393,   394,   395,   396,   492,   398,   399,
8456:        0,   400,   401,     0,   402,     0,   404,   405,   406,   407,
8457:      408,     0,   409,   410,     0,     0,   411,   412,   413,   414,
8458:      415,     0,   416,   417,   418,   419,   420,   421,   422,   423,
8459:        0,     0,   424,   425,   426,   427,   428,     0,     0,   429,
8460:      430,   431,   432,   433,   434,   435,     0,   436,     0,   438,
8461:      439,   440,   441,     0,     0,   442,     0,     0,   443,   444,
8462:      445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
8463:      455,   456,   457,   458,   459,   460,   461,   462,   463,   488,
8464:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
8465:        0,     0,     0,     0,     0,    90,    91,    92,    93,    94,
8466:       95,    96,    97,     0,    98,    99,   100,     0,     0,     0,
8467:        0,     0,     0,     0,   101,   102,     0,   103,   104,   105,
8468:        0,   107,   108,   109,   110,   111,     0,   113,   114,     0,
8469:      115,   116,   117,   118,   119,   120,     0,     0,   121,   122,
8470:      123,   124,   125,     0,   126,   127,   128,   129,   130,     0,
8471:        0,     0,   132,   133,   134,   135,   136,     0,   138,   139,
8472:      140,     0,   141,   142,   143,   144,   145,   146,     0,     0,
8473:      148,   149,   150,     0,     0,     0,     0,     0,     0,     0,
8474:      152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
8475:        0,   162,     0,   163,   164,   165,   166,   167,   168,     0,
8476:      169,   170,   171,   172,   173,     0,     0,   174,   175,   176,
8477:      177,   178,     0,   179,   180,   181,     0,   182,   183,   184,
8478:        0,   185,   186,   187,   188,   189,   190,   191,   192,   193,
8479:      194,     0,   195,     0,   196,   197,   198,   199,     0,   200,
8480:        0,   201,     0,     0,     0,   204,   205,   206,     0,   208,
8481:        0,   209,     0,   210,   211,     0,   212,   213,   214,   215,
8482:      216,  1750,     0,   219,   220,   221,   222,     0,   223,   224,
8483:      225,   226,   227,   228,     0,   229,     0,   231,   232,   233,
8484:      234,   235,   236,   237,     0,   238,     0,   239,     0,     0,
8485:      242,     0,   244,   245,   246,   247,   248,     0,     0,   249,
8486:        0,   251,     0,     0,   253,   254,   255,     0,     0,   256,
8487:      257,   258,   259,   260,   490,   262,   263,   264,   265,   266,
8488:      267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
8489:      277,   278,   279,   280,     0,   282,   283,   284,   285,   286,
8490:        0,   287,   288,     0,   290,     0,   291,   292,   293,   294,
8491:      295,   296,     0,   297,   298,     0,     0,   299,   300,   301,
8492:        0,     0,   302,   303,     0,   305,     0,   307,   308,   309,
8493:      310,   311,   312,   313,   314,   315,   316,   317,     0,   318,
8494:      319,   320,   321,   322,   323,   324,   325,   326,     0,   327,
8495:      328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
8496:      338,   339,   340,     0,   341,   342,   343,   344,   345,   346,
8497:      347,   348,   349,   350,   351,   352,     0,   353,   354,     0,
8498:      356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
8499:      366,   367,   368,   369,   370,     0,   371,   372,   373,   374,
8500:      375,     0,   376,   377,   378,   379,   380,     0,   382,   383,
8501:      384,   385,     0,   386,   387,   388,   389,   390,   391,   392,
8502:      393,   394,   395,   396,   492,   398,   399,     0,   400,   401,
8503:        0,   402,     0,   404,   405,   406,   407,   408,     0,   409,
8504:      410,     0,     0,   411,   412,   413,   414,   415,     0,   416,
8505:      417,   418,   419,   420,   421,   422,   423,     0,     0,   424,
8506:      425,   426,   427,   428,     0,     0,   429,   430,   431,   432,
8507:      433,   434,   435,     0,   436,     0,   438,   439,   440,   441,
8508:        0,     0,   442,     0,     0,   443,   444,   445,   446,   447,
8509:      448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
8510:      458,   459,   460,   461,   462,   463,  1106,     0,     0,     0,
8511:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
8512:        0,     0,    90,    91,    92,    93,    94,    95,    96,    97,
8513:        0,    98,    99,   100,     0,     0,     0,     0,     0,     0,
8514:        0,   101,   102,     0,   103,   104,   105,  1107,   107,   108,
8515:      109,     0,  1108,  1109,  1110,  1111,     0,   115,   116,   117,
8516:      118,   119,   120,     0,     0,   121,   122,  1112,  1113,   125,
8517:        0,   126,   127,   128,   129,     0,     0,  1114,     0,   132,
8518:      133,   134,   135,   136,  1115,   138,   139,   140,     0,   141,
8519:      142,   143,   144,   145,   146,     0,  1116,   148,   149,   150,
8520:        0,     0,     0,  1117,     0,     0,     0,   152,   153,   154,
8521:      155,   156,   157,   158,  1118,  1119,   161,     0,   162,     0,
8522:      163,   164,   165,   166,   167,   168,     0,   169,   170,   171,
8523:      172,   173,     0,     0,   174,   175,   751,   177,   178,     0,
8524:      179,   180,   181,     0,   182,   183,   184,     0,   185,   186,
8525:      187,   188,     0,   190,   191,   192,   193,     0,     0,   195,
8526:        0,   196,   197,  1120,   199,     0,   200,     0,   201,  1121,
8527:        0,  1122,   204,   205,   206,  1123,   208,     0,   209,     0,
8528:        0,   211,     0,   212,   213,   214,   215,   216,   217,  1124,
8529:      219,   220,   221,   222,     0,   223,   224,   225,   226,   227,
8530:      228,     0,   229,  1125,     0,   232,   233,   234,   235,  1126,
8531:     1127,     0,  1128,     0,   239,  1129,  1130,   242,  1131,   244,
8532:      245,   246,   247,   248,     0,     0,   249,  1132,   251,  1133,
8533:        0,   253,   254,   255,     0,     0,   256,   257,   258,   259,
8534:      260,  1134,   262,   263,   264,   265,   266,   267,   268,   269,
8535:      270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
8536:     1135,  1136,  1137,   283,   284,   285,     0,     0,   287,   288,
8537:     1138,   290,     0,     0,   292,  1139,   294,   295,   296,     0,
8538:      297,   298,     0,     0,   299,   300,   301,     0,     0,   302,
8539:        0,  1140,   305,  1141,     0,   308,   309,   310,   311,   312,
8540:      313,   314,   315,   316,   317,     0,   318,   319,     0,   321,
8541:      322,     0,   324,   325,   326,     0,   327,   328,   329,   330,
8542:      331,   332,   333,   334,   335,  1142,   337,   338,   339,   340,
8543:        0,   341,   342,   343,   344,   345,   346,   347,   348,   349,
8544:      350,   351,   352,     0,   353,   354,  1143,   356,   357,   358,
8545:     1144,   360,   361,   362,   363,   364,   365,   366,   367,   368,
8546:      369,   370,     0,   371,   372,   373,   374,   375,     0,   376,
8547:     1145,   378,   379,   380,  1146,   382,   383,  1147,   385,     0,
8548:      386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
8549:      396,  1148,   398,     0,     0,   400,   401,     0,   402,  1149,
8550:      404,   405,   406,   407,   408,     0,  1150,  1151,     0,     0,
8551:      411,   412,     0,   414,     0,     0,   416,   417,  1152,   419,
8552:      420,   421,   422,   423,     0,     0,   424,   425,   426,   427,
8553:      428,     0,     0,   429,   430,   431,   432,   433,     0,  1153,
8554:        0,   436,  1154,   438,   439,   440,   441,     0,     0,   442,
8555:        0,     0,   443,   444,   445,   446,   447,   448,   488,     0,
8556:        0,     0,     0,     0,     0,     0,     0,     0,     0,   460,
8557:      461,   462,   463,     0,    90,    91,    92,    93,    94,    95,
8558:       96,    97,     0,    98,    99,   100,     0,     0,     0,     0,
8559:        0,     0,     0,   101,   102,     0,   103,   104,   105,     0,
8560:      107,   108,   109,   110,   111,     0,   113,   114,     0,   115,
8561:      116,   117,   118,   119,   120,     0,     0,   121,   122,   123,
8562:      124,   125,     0,   126,   127,   128,   129,   130,     0,     0,
8563:        0,   132,   133,   134,   135,   136,     0,   138,   139,   140,
8564:        0,   141,   142,   143,   144,   145,   146,     0,     0,   148,
8565:      149,   150,     0,     0,     0,     0,     0,     0,     0,   152,
8566:      153,   154,   155,   156,   157,   158,   159,   160,   161,     0,
8567:      162,     0,   163,   164,   165,   166,   167,   168,     0,   169,
8568:      170,   171,   172,   173,     0,     0,   174,   175,   176,   177,
8569:      178,     0,   179,   180,   181,     0,   182,   183,   184,     0,
8570:      185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
8571:        0,   195,     0,   196,   197,   198,   199,     0,   200,     0,
8572:      201,     0,     0,     0,   204,   205,   206,     0,   208,     0,
8573:      209,     0,   210,   211,     0,   212,   213,   214,   215,   216,
8574:      217,     0,   219,   220,   221,   222,     0,   223,   224,   225,
8575:      226,   227,   228,     0,   229,     0,   231,   232,   233,   234,
8576:      235,   236,   237,     0,   238,     0,   239,     0,     0,   242,
8577:        0,   244,   245,   246,   247,   248,     0,     0,   249,     0,
8578:      251,     0,     0,   253,   254,   255,     0,     0,   256,   257,
8579:      258,   259,   260,   490,   262,   263,   264,   265,   266,   267,
8580:      268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
8581:      278,   279,   280,     0,   282,   283,   284,   285,   286,     0,
8582:      287,   288,     0,   290,     0,   291,   292,   293,   294,   295,
8583:      296,     0,   297,   298,     0,     0,   299,   300,   301,     0,
8584:        0,   302,   303,     0,   305,     0,   307,   308,   309,   310,
8585:      311,   312,   313,     0,   315,   316,   317,     0,   318,   319,
8586:      320,   321,   322,   323,   324,   325,   326,     0,   327,   328,
8587:      329,   330,   331,   332,   333,     0,   335,   336,   337,   338,
8588:      339,   340,     0,   341,   342,   343,   344,   345,   346,   347,
8589:      348,   349,   350,   351,   352,     0,   353,   354,     0,   356,
8590:      357,   358,   359,     0,   361,   362,   363,   364,   365,   366,
8591:      367,   368,   369,   370,     0,   371,   372,   373,   374,   375,
8592:        0,   376,   377,   378,   379,   380,     0,   382,   383,   384,
8593:      385,     0,   386,   387,   388,   389,   390,   391,   392,   393,
8594:      394,   395,   396,   492,   398,   399,     0,   400,   401,     0,
8595:      402,     0,   404,   405,   406,   407,   408,     0,   409,   410,
8596:        0,     0,   411,   412,   413,   414,   415,     0,   416,   417,
8597:      418,   419,   420,   421,   422,   423,     0,     0,   424,   425,
8598:      426,   427,   428,     0,     0,   429,   430,   431,   432,   433,
8599:      434,   435,     0,   436,     0,   438,   439,   440,   441,     0,
8600:        0,   442,     0,     0,   443,   444,   445,   446,   447,   448,
8601:      449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
8602:      459,   460,   461,   462,   463,  2309,     0,     0,     0,     0,
8603:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
8604:        0,    90,    91,    92,    93,    94,    95,    96,    97,     0,
8605:       98,    99,   100,     0,     0,     0,     0,     0,     0,     0,
8606:      101,   102,     0,   103,   104,   105,  2310,   107,   108,   109,
8607:        0,  1108,  2311,  1110,  1111,     0,   115,   116,   117,   118,
8608:      119,   120,     0,     0,   121,   122,  1112,  1113,   125,     0,
8609:      126,   127,   128,   129,     0,     0,  2312,     0,   132,   133,
8610:      134,   135,   136,  2313,   138,   139,   140,     0,   141,   142,
8611:      143,   144,   145,   146,     0,  2314,   148,   149,   150,     0,
8612:        0,     0,  2315,     0,     0,     0,   152,   153,   154,   155,
8613:      156,   157,   158,  1118,  1119,   161,     0,   162,     0,   163,
8614:      164,   165,   166,   167,   168,     0,   169,   170,   171,   172,
8615:      173,     0,     0,   174,   175,   751,   177,   178,     0,   179,
8616:      180,   181,     0,   182,   183,   184,     0,   185,   186,   187,
8617:      188,     0,   190,   191,   192,   193,     0,     0,   195,     0,
8618:      196,   197,  1120,   199,     0,   200,     0,   201,  2316,     0,
8619:     2317,   204,   205,   206,  2318,   208,     0,   209,     0,     0,
8620:      211,     0,   212,   213,   214,   215,   216,   217,  2319,   219,
8621:      220,   221,   222,     0,   223,   224,   225,   226,   227,   228,
8622:        0,   229,  2320,     0,   232,   233,   234,   235,  1126,  1127,
8623:        0,  1128,     0,   239,  2321,  2322,   242,  2323,   244,   245,
8624:      246,   247,   248,     0,     0,   249,  2324,   251,  2325,     0,
8625:      253,   254,   255,     0,     0,   256,   257,   258,   259,   260,
8626:     2513,   262,   263,   264,   265,   266,   267,   268,   269,   270,
8627:      271,   272,   273,   274,   275,   276,   277,   278,   279,  1135,
8628:     2327,  1137,   283,   284,   285,     0,     0,   287,   288,  2329,
8629:      290,     0,     0,   292,  1139,   294,   295,   296,     0,   297,
8630:      298,     0,     0,   299,   300,   301,     0,     0,   302,     0,
8631:     2331,   305,  2332,     0,   308,   309,   310,   311,   312,   313,
8632:      314,   315,   316,   317,     0,   318,   319,     0,   321,   322,
8633:        0,   324,   325,   326,     0,   327,   328,   329,   330,   331,
8634:      332,   333,   334,   335,  1142,   337,   338,   339,   340,     0,
8635:      341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
8636:      351,   352,     0,   353,   354,  2333,   356,   357,   358,     0,
8637:      360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
8638:      370,     0,   371,   372,   373,   374,   375,     0,   376,     0,
8639:      378,   379,   380,  2335,   382,   383,  1147,   385,     0,   386,
8640:      387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
8641:     2514,   398,     0,     0,   400,   401,     0,   402,  2337,   404,
8642:      405,   406,   407,   408,     0,  1150,  1151,     0,     0,   411,
8643:      412,     0,   414,     0,     0,   416,   417,  2338,   419,   420,
8644:      421,   422,   423,     0,     0,   424,   425,   426,   427,   428,
8645:        0,     0,   429,   430,   431,   432,   433,     0,  1153,     0,
8646:      436,  2339,   438,   439,   440,   441,     0,     0,   442,     0,
8647:        0,   443,   444,   445,   446,   447,   448,  1106,     0,     0,
8648:        0,     0,     0,     0,     0,     0,     0,     0,   460,   461,
8649:      462,   463,     0,    90,    91,    92,    93,    94,    95,    96,
8650:       97,     0,    98,    99,   100,     0,     0,     0,     0,     0,
8651:        0,     0,   101,   102,     0,   103,   104,   105,  1107,   107,
8652:      108,   109,     0,  1108,  1109,  1110,  1111,     0,   115,   116,
8653:      117,   118,   119,   120,     0,     0,   121,   122,  1112,  1113,
8654:      125,     0,   126,   127,   128,   129,     0,     0,  1114,     0,
8655:      132,   133,   134,   135,   136,  1115,   138,   139,   140,     0,
8656:      141,   142,   143,   144,   145,   146,     0,  1116,   148,   149,
8657:      150,     0,     0,     0,  1117,     0,     0,     0,   152,   153,
8658:      154,   155,   156,   157,   158,  1118,  1119,   161,     0,   162,
8659:        0,   163,   164,   165,   166,   167,   168,     0,   169,   170,
8660:      171,   172,   173,     0,     0,   174,   175,   751,   177,   178,
8661:        0,   179,   180,   181,     0,   182,   183,   184,     0,   185,
8662:      186,   187,   188,     0,   190,   191,   192,   193,     0,     0,
8663:      195,     0,   196,   197,  1120,   199,     0,   200,     0,   201,
8664:     1121,     0,  1122,   204,   205,   206,  1123,   208,     0,   209,
8665:        0,     0,   211,     0,   212,   213,   214,   215,   216,   217,
8666:     1124,   219,   220,   221,   222,     0,   223,   224,   225,   226,
8667:      227,   228,     0,   229,  1125,     0,   232,   233,   234,   235,
8668:     1126,  1127,     0,  1128,     0,   239,  1129,  1130,   242,  1131,
8669:      244,   245,   246,   247,   248,     0,     0,   249,  1132,   251,
8670:     1133,     0,   253,   254,   255,     0,     0,   256,   257,   258,
8671:      259,   260,     0,   262,   263,   264,   265,   266,   267,   268,
8672:      269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
8673:      279,  1135,  1136,  1137,   283,   284,   285,     0,     0,   287,
8674:      288,  1138,   290,     0,     0,   292,  1139,   294,   295,   296,
8675:        0,   297,   298,     0,     0,   299,   300,   301,     0,     0,
8676:      302,     0,  1140,   305,  1141,     0,   308,   309,   310,   311,
8677:      312,   313,   314,   315,   316,   317,     0,   318,   319,     0,
8678:      321,   322,     0,   324,   325,   326,     0,   327,   328,   329,
8679:      330,   331,   332,   333,   334,   335,  1142,   337,   338,   339,
8680:      340,     0,   341,   342,   343,   344,   345,   346,   347,   348,
8681:      349,   350,   351,   352,     0,   353,   354,  1143,   356,   357,
8682:      358,     0,   360,   361,   362,   363,   364,   365,   366,   367,
8683:      368,   369,   370,     0,   371,   372,   373,   374,   375,     0,
8684:      376,     0,   378,   379,   380,  1146,   382,   383,  1147,   385,
8685:        0,   386,   387,   388,   389,   390,   391,   392,   393,   394,
8686:      395,   396,     0,   398,     0,     0,   400,   401,     0,   402,
8687:     1149,   404,   405,   406,   407,   408,     0,  1150,  1151,     0,
8688:        0,   411,   412,     0,   414,     0,     0,   416,   417,  1152,
8689:      419,   420,   421,   422,   423,     0,     0,   424,   425,   426,
8690:      427,   428,     0,     0,   429,   430,   431,   432,   433,     0,
8691:     1153,     0,   436,  1154,   438,   439,   440,   441,     0,     0,
8692:      442,     0,     0,   443,   444,   445,   446,   447,   448,     0,
8693:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
8694:      460,   461,   462,   463
8695: };
8696: 
8697: static const yytype_int16 yycheck[] =
8698: {
8699:        6,   518,    56,   605,    34,     0,     0,   907,   551,   620,
8700:      569,   517,   711,   612,   711,   590,     0,     0,     0,   893,
8701:       16,   524,   647,   564,  1205,   880,  1677,   789,  1746,   885,
8702:        6,     6,    16,   791,  1487,   776,  1050,   905,  1050,  1050,
8703:     1050,   614,  1080,  1571,  1572,   522,   882,   876,  1576,   807,
8704:       58,  1194,   946,  1752,  1194,  1754,  1634,    29,  1194,  1980,
8705:     2021,   819,  2069,  2093,  1237,  1238,  2069,  1194,   718,  1743,
8706:      523,  1697,    58,     0,   910,  1488,   524,  2101,    33,  2108,
8707:        9,    76,    73,  1172,     5,  1986,     5,     5,     9,  1617,
8708:     1618,  1289,   651,     5,  1207,     5,     5,     5,    50,  1072,
8709:        5,    13,    14,  1337,    13,    14,  2371,     5,    13,    14,
8710:       13,    14,  1674,     5,    86,    13,    14,    58,     5,     5,
8711:        5,    13,    14,     9,     3,     0,  1688,   826,     5,     5,
8712:     2374,   605,     0,   607,  1335,   609,   168,    11,  1812,     5,
8713:      106,     5,     5,     5,     5,    40,     5,    40,   625,   167,
8714:        5,   167,    31,    32,    58,   529,    67,  2449,    75,    48,
8715:      116,    58,  2377,     3,     4,     5,     4,    27,    85,     9,
8716:     1241,     9,    11,     9,   587,    82,   136,    27,  2363,  1853,
8717:     1854,   587,   210,    27,    34,    58,    15,    20,     4,  2010,
8718:       34,  2427,   194,     9,   167,   894,  2517,    27,   897,   898,
8719:     2546,  1920,    41,   216,    34,    11,   144,   285,   711,   168,
8720:       11,   277,  1325,   119,   717,   279,   285,    92,    78,   126,
8721:      301,   121,  1985,   119,    92,    11,    86,  2463,   787,   788,
8722:     2348,   265,  2296,   114,    73,    41,  2602,    93,   134,   119,
8723:       41,   325,  2638,   359,  2472,   114,   116,   865,    59,   262,
8724:     2040,   792,    75,   164,   301,   115,    67,    13,    14,   161,
8725:      833,   714,    85,   429,   129,  2493,    11,    73,   918,   106,
8726:      208,  1145,    73,    27,   114,   925,   117,    37,   394,   820,
8727:       11,    23,    11,   172,    64,    65,    15,   166,   347,   168,
8728:      157,   236,  2584,    22,    27,  1366,   168,   186,   204,    11,
8729:      445,   348,   191,    32,    33,   159,    68,  2228,   321,   407,
8730:     2546,  2232,   168,  1891,   107,   184,   875,  2532,  2219,   435,
8731:      486,  2039,   107,  2113,   184,   828,   829,  2334,   200,    41,
8732:      847,   159,   749,  2729,    76,   195,   268,   226,   297,  2369,
8733:      475,  2786,    73,   215,   200,   490,   187,   285,     5,   766,
8734:      352,   486,   224,   451,   486,    84,   369,   441,   360,   215,
8735:      227,    73,  2036,   123,  2038,   262,   220,   117,   224,   209,
8736:      486,  1899,  1900,  1901,  1902,   129,   951,  1905,  1906,  1907,
8737:     1908,  1909,  1910,  1911,  1912,  1913,  1914,   405,   269,   296,
8738:      230,  2757,   394,   427,  2622,   264,   129,  2515,   339,   269,
8739:      481,   312,   258,  2848,   279,   307,   162,   352,  1058,   274,
8740:     1151,   279,   490,   372,   427,   311,  1978,     0,  1980,   230,
8741:      486,   490,   486,  2487,  2820,   262,    23,   486,   394,  1957,
8742:     1958,  2667,   405,   261,   481,   339,  2155,   187,  2784,   441,
8743:      236,   373,   339,  2264,  1669,  1670,  1057,  2768,  1519,  2123,
8744:     2635,  2703,  2744,  1634,   486,  2218,   489,   475,  1571,  1572,
8745:      873,   290,   490,  1576,  2700,   340,   339,   873,   842,   366,
8746:      488,   343,   340,  1072,   490,   431,   490,  1711,   473,   473,
8747:      425,  1454,   371,   421,   444,   429,  2730,   343,   405,   473,
8748:      473,   473,   399,   484,   524,   194,   391,   488,   391,  1098,
8749:     1953,  1699,  1357,   439,  1617,  1618,  1679,   383,   384,  1710,
8750:     2517,   422,   486,  2778,  2517,  2436,  2731,     0,   524,  1413,
8751:     2441,   427,   382,  2444,  1705,   385,   376,  2428,   524,   429,
8752:      438,   450,   376,    16,   486,   448,   590,   134,  1438,   523,
8753:      450,   486,   486,   335,   550,   551,   376,   427,  2784,   490,
8754:     2802,    34,    23,   472,   243,  2273,   485,  1074,    29,   472,
8755:      439,  1067,   472,   569,  1070,   486,   484,   486,   486,   577,
8756:      488,   567,  1078,   448,   486,    58,   486,   486,   486,  1082,
8757:      448,   486,   405,   486,   579,   579,   490,  2286,   486,  1207,
8758:      410,   577,  1486,    76,   486,   579,   579,   579,  1687,   486,
8759:      486,   486,   116,  1176,   610,   611,   612,  2637,   482,   486,
8760:      582,   355,   487,  2642,   489,   570,  1175,  2641,  1177,   487,
8761:      486,   489,   486,   486,   486,   486,  1185,   486,  1081,   425,
8762:     1189,   486,   448,   450,  1082,  1285,  2262,   477,   478,   477,
8763:      478,   477,   478,   482,    75,   651,   450,  1246,    92,  1208,
8764:     1209,   157,   579,   114,    85,   472,   472,   236,  2579,  1232,
8765:     1233,   477,   478,   134,    13,    14,  2228,   450,   472,   105,
8766:     2232,   477,   478,   479,   480,   481,   482,   146,   479,   480,
8767:      481,   482,   486,  1224,   198,    30,   283,  1386,  2266,   472,
8768:      486,  2365,   148,   479,   480,   481,   482,  1396,    75,   532,
8769:     1399,   534,  1119,   486,  1277,   711,  2736,  1325,    85,    54,
8770:     1891,   717,   718,   719,  1287,  1288,  2129,   398,  2131,   400,
8771:      553,   227,  1139,   192,  1867,  1868,  1869,  1867,  1868,   735,
8772:      714,  1867,   477,   478,   479,   480,   481,   482,   338,  1866,
8773:      337,   338,  2195,  1249,  1969,  1970,  1971,  1972,   262,   157,
8774:      264,  1822,  1169,   173,   162,   320,  2474,   763,   788,     4,
8775:      486,  2768,   491,   264,     9,  2768,   366,  1940,   269,   366,
8776:      276,   129,  1471,   352,  1471,  1374,  1814,   783,   784,   785,
8777:     1382,   787,   788,   348,   486,   393,  1899,  1900,  1901,  1902,
8778:      519,  1862,  1905,  1906,  1907,  1908,  1909,  1910,  1911,  1912,
8779:     1913,  1914,   216,   475,   441,   811,   242,  1878,   481,  1893,
8780:      230,  2761,   283,  2763,   250,   488,   488,  2847,   319,   227,
8781:      428,   481,   828,   829,     4,   469,  1451,  1898,   488,     9,
8782:     1455,   292,   214,  1458,  1409,  1410,  1411,  1921,  1600,   488,
8783:     1598,   570,  2803,  2804,  1957,  1958,   425,   469,   262,   236,
8784:      858,   859,  1681,   861,   860,  1454,  1927,   236,   864,   865,
8785:      236,   236,   333,  1934,   487,  2427,   337,   490,   276,   875,
8786:     1770,  2399,   858,   859,  2436,   861,    13,    14,   711,  2441,
8787:      852,  1355,  2444,  2833,   717,   279,  1392,   893,  2069,  2607,
8788:     2851,  1397,   129,   325,   487,   366,   484,   490,   359,  1793,
8789:      488,  2463,    36,   359,    23,  1476,   264,   486,  1382,  1480,
8790:       29,  1482,   918,  2612,     8,   359,   274,    11,   155,   925,
8791:        4,    55,    16,    17,    18,     9,     8,  1401,   360,    11,
8792:      129,   479,  1406,   394,    16,    17,    18,   909,   394,    33,
8793:      946,     4,  1778,  1701,   166,  1589,     9,  1591,  1592,  2402,
8794:      394,   490,  1429,  1571,  1572,   369,   155,  2485,  1576,   486,
8795:      793,   432,   394,    13,    14,   352,  1525,  1823,  1471,   487,
8796:      803,   105,  1828,   352,   435,   325,   352,   352,   398,   435,
8797:      400,  1484,   487,   816,  2546,   490,  2237,   448,   487,  2240,
8798:      473,   435,   448,   826,   487,   828,   829,   490,  2069,  1617,
8799:     1618,   490,   210,   492,   448,   425,   719,    13,    14,   441,
8800:      360,   472,   398,   427,   400,   134,   472,  2579,    13,    14,
8801:      487,   182,   183,   490,  2552,   486,     8,   264,   472,    11,
8802:      486,  1590,   269,    54,    16,    17,    18,   274,   425,   486,
8803:      523,   524,   486,   484,   394,   486,   425,   488,  2699,   425,
8804:      425,   157,  1058,   167,   737,   738,   162,   487,   487,   193,
8805:      490,   490,   487,  1622,     8,   490,  1072,    11,   487,   469,
8806:      269,   490,    16,    17,    18,   274,  1082,   149,  2116,   762,
8807:     2094,   214,  2094,  2094,  2094,  2266,  1082,   248,   249,    33,
8808:      487,   441,  1098,   490,   577,   487,   579,  1081,   490,   486,
8809:     2553,  1676,   448,  1662,   450,  2667,   333,   486,   242,   191,
8810:      486,   486,   486,   826,    23,   149,   250,   846,   212,  2837,
8811:       29,   227,   487,   149,  1749,   490,  1751,   149,   262,   398,
8812:      212,   400,   487,   487,  2785,     8,   490,   264,  2700,  1145,
8813:     2233,   441,  2235,    16,    17,    18,   487,  1844,     8,   490,
8814:     2050,    11,   487,   486,  2805,   490,    16,    17,    18,   293,
8815:       23,   584,   487,   586,   283,   490,    29,    13,    14,  1175,
8816:      276,  1177,   398,    33,   400,   412,  1182,  1172,  1172,  1185,
8817:      893,  2049,  2037,  1189,  1925,  1926,   423,   281,  1172,  1172,
8818:     1172,   552,  2048,   554,  2050,   356,   357,  1203,  1809,   281,
8819:     1206,  1207,  1208,  1209,   338,    81,   487,   394,  2859,   490,
8820:     1216,  1217,  1218,   412,   333,   149,   487,   149,   337,   490,
8821:     2088,   452,  2784,   488,   423,   134,   360,    13,    14,   487,
8822:     1236,   714,   490,  2304,   149,  1241,  1242,  1243,  1244,  1245,
8823:     1246,   248,   249,  1842,  1250,  1251,   380,   366,    23,  1255,
8824:     2008,   279,   487,  1259,    29,   490,  1262,  1263,  1264,  1265,
8825:     1266,  1267,  1268,  1269,  1270,    13,    14,  1273,   212,   752,
8826:      487,   134,  1278,   490,    83,  1281,    85,  1283,    87,  1285,
8827:      486,  1899,  1900,  1901,  1902,    36,  2399,  1905,  1906,  1907,
8828:     1908,  1909,  1910,  1911,  1912,  1913,  1914,   487,   225,   281,
8829:      490,  1307,    13,    14,   487,   788,     8,   490,  1304,    11,
8830:       13,    14,   486,   432,    16,    17,    18,  1312,   484,  1325,
8831:      487,  2392,   487,   490,     8,   490,     5,    11,  1334,  1335,
8832:        5,  1837,    16,    17,    18,     5,  2517,   281,     8,  1957,
8833:     1958,  1844,   487,   486,    14,   490,  1075,   486,  1077,   356,
8834:      357,   162,   212,   487,    24,    13,    14,    41,    28,   134,
8835:     1366,  1194,  1935,   486,    48,   486,  1372,     5,  1374,   308,
8836:     2069,   486,  2485,  1932,   283,   858,   859,   486,   861,   473,
8837:      474,   475,     5,   477,   478,   479,   480,   481,   482,    73,
8838:      486,   473,   474,   475,   486,   477,   478,   479,   480,   481,
8839:      482,   487,  2302,   486,   490,     5,   487,  1413,   281,   490,
8840:     1416,  1417,   487,  1419,   487,   490,   486,   490,   144,  2274,
8841:      283,   281,   487,   487,   333,   490,   490,   486,   337,  1112,
8842:     1113,   157,  1145,     5,   487,   487,   162,   490,   490,  2552,
8843:     1446,     9,   487,   486,  2017,   490,  2517,  1442,  1454,  1990,
8844:      487,   359,   487,   490,  1137,   490,   487,   366,   449,   490,
8845:     2334,  1294,  2224,   487,   487,  1471,   490,   490,   486,  2068,
8846:      333,  2070,   487,   486,   337,   490,  2238,   486,  1484,    15,
8847:     1486,  1487,   208,   210,   487,   486,   394,   490,   172,   486,
8848:     2115,   473,   474,   475,   486,   477,   478,   479,   480,   481,
8849:      482,   227,   186,   366,    13,    14,   490,   191,   283,  2084,
8850:      212,   487,  2583,  1519,   490,  2586,  1199,  1200,   487,  1525,
8851:     1526,   490,    96,   432,    36,  1531,   366,   435,  1241,   473,
8852:      474,   475,   162,   477,   478,   479,   480,   481,   482,   276,
8853:      448,   487,   226,  1573,   490,   487,   487,   162,   490,   490,
8854:      276,    13,    14,   148,    13,    14,    13,    14,   333,   285,
8855:       13,    14,   337,   225,   472,  1571,  1572,  1573,   274,   432,
8856:     1576,    13,    14,    13,    14,    23,    13,    14,   486,   281,
8857:      486,    29,   405,  1589,  1590,  1591,  1592,  2768,    13,    14,
8858:      486,   366,  1622,  1599,  2293,    85,  1602,   281,  1081,   490,
8859:      473,   474,   475,   405,   477,   478,   479,   480,   481,   482,
8860:       54,  1617,  1618,   473,   474,   475,  1622,   477,   478,   479,
8861:      480,   481,   482,    13,    14,    13,    14,    54,    23,  1358,
8862:     1636,    13,    14,  1639,    29,  1641,   252,   253,  1471,  1368,
8863:      405,  1370,  1475,   255,  1373,   405,   347,   348,   347,   348,
8864:     1379,  1484,  1381,  1366,   487,  2523,  1662,   432,   347,   348,
8865:      347,   348,  1692,   495,  1393,   474,   356,   357,  1674,  1398,
8866:      405,  2244,   448,  1402,  1403,  1404,  1405,   486,  1407,  1408,
8867:     2305,  2306,  1688,   149,    92,  2258,   134,   371,   264,  1172,
8868:     2387,   264,  1687,  1687,   486,   421,  1702,  2768,  1674,  1674,
8869:      828,   829,    36,  1687,  1687,  1687,    36,   488,   719,   438,
8870:     2253,  1717,  1688,  1688,   486,   486,   490,   486,   486,    35,
8871:       67,   444,   486,   486,     9,   403,   403,    11,   490,  1735,
8872:      485,   490,   403,   486,   495,   269,   486,   405,   176,   134,
8873:      158,   167,   487,   486,   429,    36,  1752,  1753,  1754,   490,
8874:      208,   369,   561,   216,   280,   486,   490,   264,    31,    32,
8875:      216,   216,   285,   487,   359,   317,   277,   114,   441,  1252,
8876:      486,   473,   474,   475,  1487,   477,   478,   479,   480,   481,
8877:      482,  2399,   149,   149,   448,   594,   470,  1793,   264,   473,
8878:      474,   475,   279,   477,   478,   479,   480,   481,   482,   394,
8879:      279,    36,    36,   264,    35,   485,  1519,   405,   484,   405,
8880:      484,   405,   405,   167,   167,   487,  1822,   469,  2517,    92,
8881:      629,   630,   631,   488,   171,   469,   487,   487,   487,  1312,
8882:      487,   487,   487,   487,   487,   283,  1842,   487,  1844,   487,
8883:      435,     8,   487,   469,    11,  1840,   487,   487,   405,    16,
8884:       17,    18,   719,   448,   486,   486,  1862,   486,   486,   289,
8885:      445,   445,    36,   279,   435,   475,    33,  2485,    36,  1875,
8886:      471,   280,  1878,   280,   280,   235,   427,   472,   405,  1885,
8887:      264,    55,   893,  1889,  2387,   333,  1892,    55,   283,   337,
8888:      149,   486,  1898,  1899,  1900,  1901,  1902,   719,   490,  1905,
8889:     1906,  1907,  1908,  1909,  1910,  1911,  1912,  1913,  1914,   486,
8890:      283,  1965,  1918,  1919,   194,   485,   149,   264,   366,  2819,
8891:      149,  1927,   269,   405,   405,  1758,  1932,   405,  1934,   487,
8892:      405,   105,   487,  1963,  2552,  1941,   490,   105,  1944,   487,
8893:     1946,   487,   337,   279,   277,   448,    36,  1953,  1954,   149,
8894:     1980,  1957,  1958,   149,   269,   484,  1962,  1963,   140,  1442,
8895:      167,    11,   487,   162,   167,   312,   487,   487,  1801,   487,
8896:      486,   366,  1978,     6,  1980,   292,   445,  2483,    11,   487,
8897:      327,   394,    15,   167,   432,  1991,  2561,   472,    21,    22,
8898:       23,   490,   487,    26,  2000,   144,    29,   171,   176,    32,
8899:       33,   487,  1978,  1978,  1980,  1980,   108,   109,   157,  2608,
8900:     2016,  1844,  2623,   162,   487,   340,  1849,   434,  1851,   193,
8901:       83,   830,  1855,  1856,   280,   193,   893,   149,  2587,   171,
8902:      416,    36,   486,    79,   486,   486,   486,   432,   429,   485,
8903:      485,   490,   359,    76,   853,   212,   487,   167,   487,  2566,
8904:       83,    84,    85,    86,    87,   486,   396,   486,  2064,   208,
8905:      215,   288,  2068,  2069,  2070,   487,   487,  2584,   242,  2768,
8906:      879,   893,   487,   286,   242,   422,   250,   394,   227,   215,
8907:      182,   183,   250,   892,   486,   486,   359,    54,   262,   448,
8908:     1573,   179,   475,   196,   262,  2706,   185,  1826,   269,   269,
8909:      405,   488,   405,   488,   913,  2664,   475,   488,   488,  1822,
8910:      488,   488,   488,   488,   281,    36,   488,  2112,   435,   293,
8911:      488,   394,  2628,   488,   488,   293,   488,   276,   106,   264,
8912:      488,   448,   488,   488,  1145,   487,   285,   488,   488,  1622,
8913:     2146,   486,   244,   245,   246,   247,   248,   249,   448,  1862,
8914:      252,   253,   279,   488,    36,   472,   488,  1640,   167,   488,
8915:      488,   488,   435,  2680,   338,  1878,   439,   488,  2767,   486,
8916:      338,  2773,   485,  1656,   488,   448,   488,   488,   488,   486,
8917:      486,   298,   486,  2189,  2190,  1898,   360,   215,  2194,  2195,
8918:      486,  1674,   360,  2199,    93,  2701,  2202,  2203,   447,   472,
8919:       85,  2207,   130,   327,  1687,  1688,   380,   114,   487,  1692,
8920:      486,   486,   380,   486,  1927,   216,    36,   149,    73,   121,
8921:      149,  1934,  2228,    36,   487,   348,  2232,   348,     0,    54,
8922:     1241,    36,    67,   486,   486,   486,  2069,   429,    73,   434,
8923:     1953,    73,  1051,   490,    36,   184,   429,  2253,    67,    67,
8924:       85,    21,  2228,  2228,   356,   357,  2232,  2232,  2091,   416,
8925:     2255,  2256,   282,   486,   490,    36,   350,   366,   184,   168,
8926:      475,  1080,   421,   269,   240,   486,   416,    36,  1145,   114,
8927:     2286,   116,   486,   282,   282,   486,   262,   279,   486,  2295,
8928:      487,   347,     9,   487,   334,   196,   279,   279,  2304,    33,
8929:      487,   200,   119,  2032,    74,   486,   473,   474,   475,   427,
8930:      477,   478,   479,   480,   481,   482,   215,     9,    22,    89,
8931:       92,   487,   579,  1145,  2051,   224,  1380,  2056,  2334,  2064,
8932:     1747,  2257,  2014,  2700,  2459,   484,   171,  2764,   487,   488,
8933:     2097,  2298,  2071,  2072,  2073,  2074,  2075,  2076,  2077,  2078,
8934:     2079,  2080,  2770,  2840,  2615,  1366,  2069,  1840,  2818,   258,
8935:     2806,   880,  2534,   198,   466,   467,  2102,  2767,  1741,  1753,
8936:     1803,  2816,   144,   143,  1241,  2068,  1738,  2372,  2765,  1067,
8937:      279,  2387,   152,  1807,   486,   157,  2392,  1842,  2387,   821,
8938:      162,  2091,   173,  2399,   164,   167,  2402,  1702,  1351,   169,
8939:      868,  2677,   867,   846,   176,  2411,  2412,   179,  2595,  2415,
8940:     2755,  1717,  1325,   194,  1994,  2248,  2689,  2250,  2249,  1241,
8941:     1350,  2427,  1688,   870,   194,  1980,  2234,  2580,  2219,   264,
8942:     2436,  1978,  2667,  2666,   269,  2441,   208,  2684,  2444,  2685,
8943:     1194,   474,  1194,  2455,   343,  2451,  2452,   480,  1194,   230,
8944:     1194,  2427,  2427,   486,  2753,   227,  2754,  2463,   491,  2465,
8945:     2436,  2436,  2740,  1279,  1600,  2441,  2441,   237,  2444,  2444,
8946:     1177,   241,  1705,  1282,  1419,  1283,  1487,   312,  1640,  2485,
8947:     1963,  1527,  2195,  1637,   517,   518,   519,  2463,  2463,  1810,
8948:     2659,  1082,   327,  2015,  1303,  1978,  1305,  1980,  1484,  1366,
8949:     1304,    -1,     8,   284,   276,    11,   852,   279,  1519,  1305,
8950:       -1,  2517,    -1,   285,    -1,    -1,    -1,    -1,    -1,   552,
8951:       -1,   554,    -1,    -1,    -1,    -1,    -1,    -1,   561,    -1,
8952:      429,  2526,    -1,    -1,   304,    41,    -1,   570,    -1,  1348,
8953:     2546,    -1,    48,    -1,  1366,    -1,  2552,  2553,   318,   582,
8954:       -1,    -1,  2547,    -1,  2387,    -1,    -1,  2587,    -1,    -1,
8955:       -1,   594,    -1,    -1,    -1,    -1,    -1,    73,   340,  2575,
8956:     2546,  2546,    -1,  2579,    -1,    -1,    -1,  2583,    -1,   349,
8957:     2586,  2587,   352,    -1,    -1,    -1,    -1,   422,    -1,    -1,
8958:      360,  2304,  2598,   363,    -1,    -1,   629,   630,   631,    -1,
8959:       -1,    -1,  2608,  2579,  2579,    -1,  2612,  2613,    -1,    -1,
8960:       -1,    -1,   382,    -1,    -1,    -1,    -1,   398,  1427,   400,
8961:     1487,  2334,   394,    -1,   394,    -1,    -1,    -1,    -1,  2112,
8962:       -1,   401,    -1,    -1,    -1,   169,   142,    -1,    -1,   173,
8963:      410,   422,    -1,    -1,   425,  2640,    -1,    -1,    -1,   421,
8964:       -1,    -1,  1519,     8,    -1,    -1,    11,   429,  2664,    -1,
8965:      194,  2667,    -1,    -1,    -1,  1487,   172,    -1,    -1,    -1,
8966:       -1,   441,    -1,   445,    -1,   447,   448,    -1,    -1,  2392,
8967:      186,    -1,    -1,  2689,  2517,   191,    41,    -1,    -1,  2402,
8968:      723,  2667,  2667,    48,  2700,    -1,   230,  1519,    -1,    -1,
8969:       -1,  2696,    -1,   237,    -1,    -1,    -1,   719,    -1,    -1,
8970:       -1,    -1,   484,    -1,  2720,   487,   488,   489,    73,     8,
8971:      226,    -1,    11,    -1,  2700,  2700,    -1,    -1,    -1,    -1,
8972:       -1,    -1,    -1,  2739,  2740,    -1,     8,    -1,    -1,    11,
8973:       -1,    -1,    -1,    -1,    -1,  2228,    -1,    -1,    -1,  2232,
8974:      284,   719,    41,    -1,    -1,  2484,   789,    -1,    -1,    48,
8975:       -1,  2767,  2768,    -1,    -1,     8,    -1,    -1,    11,    41,
8976:       -1,    -1,  2255,  2256,    -1,   281,    48,    -1,  2784,    -1,
8977:     2786,    -1,  2777,    -1,    73,    -1,    -1,   142,    -1,  2518,
8978:     2519,    -1,    -1,    -1,    -1,    -1,    -1,   830,    41,    -1,
8979:       -1,    73,  2531,  2636,  2517,    48,    -1,    -1,  2784,  2784,
8980:       -1,  1822,    -1,   846,   847,    -1,    -1,   172,   352,   852,
8981:      853,   854,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
8982:       73,   186,    -1,    -1,    -1,    -1,   191,    -1,    -1,    -1,
8983:     2553,    -1,  2848,    -1,    -1,    -1,   879,   880,    -1,    -1,
8984:       -1,  1862,    50,   142,    -1,    -1,    -1,    -1,  1667,   892,
8985:       -1,    -1,    -1,    -1,   398,   371,   400,  1878,  2597,    -1,
8986:     2583,   226,    -1,  2586,    -1,    -1,   909,    -1,    -1,    -1,
8987:      913,   893,    -1,   172,    -1,    -1,    -1,  1898,   422,  2372,
8988:       -1,   425,    -1,    -1,    -1,    -1,    94,   186,    -1,   142,
8989:      172,    -1,   191,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
8990:       -1,    -1,    -1,    -1,   186,    -1,  1927,    -1,    -1,   191,
8991:       -1,    -1,   120,  1934,    -1,   893,   281,    -1,    -1,   172,
8992:       -1,    -1,    -1,   711,    -1,  2768,    -1,   226,    -1,   717,
8993:      138,    -1,  1953,   186,   142,    -1,    -1,    -1,   191,    -1,
8994:       -1,    -1,    -1,  2436,   226,  1822,    -1,    -1,  2441,    -1,
8995:       -1,  2444,    -1,    -1,   470,   163,    -1,    -1,   166,    -1,
8996:       -1,   477,   478,   479,   480,   481,   482,    -1,    -1,    -1,
8997:       -1,    -1,   180,   226,    -1,    -1,    -1,    -1,    -1,    -1,
8998:       -1,    -1,   281,    -1,    -1,  1862,    -1,    -1,    -1,  1808,
8999:     1822,    -1,    -1,     0,  1813,  1814,  1815,    -1,    -1,   281,
9000:       -1,  1878,    -1,  1046,    -1,    -1,   371,    -1,  1051,    -1,
9001:       -1,    -1,    -1,    -1,  1833,   803,    -1,    -1,  1061,    -1,
9002:       -1,  1898,    -1,    -1,  1067,    -1,    -1,  1070,   281,    -1,
9003:     1862,  1074,  1075,  2526,  1077,  1078,    -1,  1080,   826,    -1,
9004:      828,   829,    -1,    -1,    -1,  2768,  1878,    -1,  2069,    -1,
9005:     1927,    -1,    -1,    -1,  2547,    -1,    -1,  1934,    -1,    -1,
9006:       -1,   269,    -1,    -1,    -1,    -1,  1898,    -1,    -1,   277,
9007:       -1,    -1,   371,    -1,    -1,    -1,  1953,    -1,    -1,    -1,
9008:       -1,   719,    -1,    -1,    -1,    92,  2579,    -1,    -1,   371,
9009:       -1,    -1,    -1,    -1,  2587,  1927,    -1,    -1,    -1,    -1,
9010:       -1,    -1,  1934,    -1,    -1,   470,   894,    -1,    -1,   897,
9011:      898,   319,   477,   478,   479,   480,   481,   482,   371,    -1,
9012:       -1,  1953,    -1,  1145,    -1,    -1,    -1,    -1,    -1,    -1,
9013:       -1,    -1,    -1,    -1,    -1,    -1,    -1,   144,    -1,    -1,
9014:       -1,    -1,    -1,    -1,    -1,    -1,    -1,  2640,    -1,    -1,
9015:      157,    -1,    -1,    -1,    -1,   162,  1975,  1976,  1977,    -1,
9016:      167,    -1,  1205,    -1,    -1,    -1,    -1,  1145,    -1,   176,
9017:       -1,   470,   179,    -1,  2195,    -1,    -1,    -1,   477,   478,
9018:      479,   480,   481,   482,    -1,    -1,    -1,    -1,   470,    -1,
9019:       -1,    -1,  2069,    -1,    -1,   477,   478,   479,   480,   481,
9020:      482,   208,    -1,  2696,    -1,    -1,  1249,    -1,    -1,    -1,
9021:       -1,  2030,    -1,    -1,    -1,    -1,    -1,   470,    -1,  1241,
9022:      227,    -1,    -1,    -1,   477,   478,   479,   480,   481,   482,
9023:       -1,    -1,    -1,    -1,    -1,    -1,    -1,  2069,    -1,  1282,
9024:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9025:       -1,    -1,    -1,    -1,    -1,   893,    -1,    -1,    -1,    -1,
9026:     1303,    -1,  1305,  1241,    -1,    -1,    -1,    -1,    -1,   276,
9027:       -1,  1314,   279,  1316,    -1,    -1,  2095,    -1,   285,    -1,
9028:       -1,    -1,    -1,  2304,  2777,    -1,    -1,    -1,    -1,    -1,
9029:       -1,    -1,    -1,    -1,    -1,    -1,    -1,  2116,    -1,  1087,
9030:     1088,    -1,    -1,    -1,    -1,  1348,    -1,    -1,    -1,    -1,
9031:       -1,    -1,    -1,  2334,  1357,  1358,    -1,    -1,  2195,    -1,
9032:       -1,    -1,    -1,    -1,    -1,  1368,  1369,  1370,  1371,    -1,
9033:     1373,    -1,    -1,   340,    -1,    -1,  1379,    -1,  1381,    -1,
9034:       -1,    -1,    -1,    -1,  1366,    -1,    -1,    -1,    -1,  1392,
9035:     1393,    -1,    -1,    -1,  1397,  1398,    -1,    -1,    -1,  1402,
9036:     1403,  1404,  1405,  2195,  1407,  1408,    -1,    -1,    -1,    -1,
9037:       -1,  2392,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9038:       -1,  2402,    -1,    -1,  1427,  1428,    36,   394,  1366,    -1,
9039:       -1,    -1,  2211,  2212,  2213,  2214,    -1,  1440,    -1,  1187,
9040:     1188,    -1,    -1,    -1,    -1,    55,    -1,  1195,    -1,  1197,
9041:     1198,    -1,    -1,    -1,   421,    -1,    -1,    -1,    -1,    -1,
9042:       -1,    -1,   429,    -1,  1212,    -1,  1214,  2304,    -1,    -1,
9043:       -1,   550,   551,    -1,    -1,    -1,    -1,    -1,   445,    -1,
9044:      447,   448,    -1,    -1,    -1,     8,  1489,  1235,    11,    -1,
9045:       -1,    -1,    -1,    -1,    -1,   105,   106,  2334,    -1,    -1,
9046:       -1,    -1,    -1,    -1,   114,  1487,    -1,    -1,    -1,    -1,
9047:       -1,    -1,  2304,    -1,    -1,    -1,    -1,   484,    41,    -1,
9048:      487,   488,   489,    -1,    -1,    48,    -1,    -1,    -1,    -1,
9049:       -1,   610,   611,    -1,    -1,     8,  2517,  1519,    11,    -1,
9050:       -1,    -1,  2334,    16,    17,    18,    -1,  1145,    -1,  1487,
9051:       73,    -1,    -1,    -1,    -1,  2392,    -1,    -1,    -1,    -1,
9052:       -1,   171,    -1,    -1,    -1,  2402,    -1,    -1,    -1,    -1,
9053:       -1,    -1,  2553,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9054:       -1,  1519,    -1,   193,    -1,    -1,  1334,  1335,     8,    -1,
9055:       -1,    11,    -1,    -1,    -1,    -1,    -1,  1600,    -1,    -1,
9056:     2392,    -1,  2583,    -1,    -1,  2586,    -1,    -1,    -1,    -1,
9057:     2402,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   142,
9058:       -1,    41,    -1,    -1,    -1,    -1,    -1,    -1,    48,    -1,
9059:       -1,  1634,   242,    -1,    -1,    -1,    -1,    -1,  1386,   718,
9060:      250,    -1,    -1,  1241,    -1,    -1,    -1,    -1,  1396,   172,
9061:       -1,  1399,   262,    73,   264,    -1,   735,    -1,    -1,    -1,
9062:       -1,    -1,    -1,   186,  1667,    -1,    -1,    -1,   191,    -1,
9063:       -1,  1674,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9064:     2517,    -1,    -1,   293,   763,  1688,    -1,    -1,    -1,  1692,
9065:       -1,    -1,  1695,    -1,  1697,    -1,    -1,    -1,    -1,    -1,
9066:       -1,    -1,    -1,   226,   783,   784,   785,    -1,    -1,   788,
9067:       -1,    -1,    -1,  2492,    -1,    -1,  2553,    -1,    -1,    -1,
9068:       -1,    -1,   142,  1471,    -1,  2517,    -1,    -1,   338,    -1,
9069:       -1,    -1,   811,    -1,    -1,    -1,  1484,    -1,    -1,   212,
9070:     1743,    -1,    -1,    -1,    -1,    -1,  2583,    -1,    -1,  2586,
9071:      360,    -1,   172,    -1,    -1,    -1,    -1,    -1,   281,    -1,
9072:     1508,  2553,    -1,    -1,  2543,    -1,   186,    -1,  1366,    -1,
9073:      380,   191,   382,    -1,    -1,   385,    -1,    -1,    -1,    -1,
9074:       -1,   860,    -1,    -1,    -1,   864,   865,  2768,    -1,    -1,
9075:       -1,  2583,    -1,    -1,  2586,    -1,    -1,   108,   109,    -1,
9076:     1803,    -1,    -1,    -1,    -1,  1808,   226,    -1,   281,  1812,
9077:     1813,  1814,  1815,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9078:       -1,    -1,    -1,  1826,    -1,    -1,    -1,  2606,    -1,    -1,
9079:     1833,    -1,    -1,    -1,  1837,    -1,    -1,    -1,    -1,   918,
9080:     1822,    -1,    -1,    -1,    -1,    -1,   925,    -1,   371,    -1,
9081:     1853,  1854,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9082:     2639,   281,    -1,    -1,    -1,    -1,    -1,   946,    -1,    -1,
9083:       -1,   182,   183,    -1,    -1,    -1,   486,    -1,    -1,    -1,
9084:     1862,    -1,    -1,    -1,  1822,    -1,    -1,    -1,  1891,  1487,
9085:       -1,    -1,    -1,    -1,    -1,    -1,  1878,    -1,    -1,    -1,
9086:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9087:       -1,    -1,    -1,    -1,    -1,    -1,  1898,    -1,    -1,    -1,
9088:       -1,  1519,    -1,    -1,  1862,    -1,    -1,    -1,    -1,    -1,
9089:     1678,  2768,    -1,   244,   245,   246,   247,   248,   249,    -1,
9090:     1878,   252,   253,    -1,    -1,  1927,    -1,   470,    -1,    -1,
9091:       -1,   371,  1934,    -1,   477,   478,   479,   480,   481,   482,
9092:     1898,  1709,  1710,    -1,  1967,    -1,    -1,    -1,    -1,    -1,
9093:       -1,  1953,  1975,  1976,  1977,  1978,  2768,  1980,  1981,  1058,
9094:       -1,    -1,  1985,  1986,    -1,    -1,    -1,    -1,    -1,  1927,
9095:       -1,    -1,    -1,    -1,    -1,     3,  1934,     5,    -1,    -1,
9096:      473,   474,   475,    -1,   477,   478,   479,   480,   481,   482,
9097:       -1,  2014,    -1,    -1,    -1,  1953,    -1,    -1,    -1,    -1,
9098:       -1,    -1,    -1,    -1,    -1,    -1,    -1,  2030,    -1,  2032,
9099:       -1,    -1,    -1,  2036,  2037,  2038,    -1,  2040,    -1,    -1,
9100:       -1,    -1,    -1,    -1,    -1,   356,   357,    -1,    -1,    -1,
9101:      470,    -1,    -1,  2056,    -1,  2058,    -1,   477,   478,   479,
9102:      480,   481,   482,    -1,    -1,    -1,    -1,    -1,  2071,  2072,
9103:     2073,  2074,  2075,  2076,  2077,  2078,  2079,  2080,    -1,    -1,
9104:       -1,    -1,    -1,    -1,    -1,    -1,    -1,  2069,    -1,    -1,
9105:       -1,    -1,  2095,    -1,    -1,    -1,    -1,    -1,    -1,  2102,
9106:      108,   109,    -1,  1182,    -1,    -1,    -1,    -1,    -1,    -1,
9107:     2113,    -1,    -1,  2116,    -1,  1863,  1864,    -1,    -1,    -1,
9108:     2123,    -1,    -1,    -1,  1203,    -1,    -1,  1206,    -1,  2132,
9109:     1209,  2069,    -1,    -1,    -1,    -1,    -1,  1216,  1217,  1218,
9110:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9111:       -1,    -1,    -1,    -1,    -1,   466,   467,  1236,    -1,    -1,
9112:       -1,    -1,    -1,  1242,  1243,  1244,  1245,    -1,    -1,    -1,
9113:       -1,  1250,  1251,    -1,   182,   183,  1255,    -1,    -1,    -1,
9114:     1259,    -1,    -1,  1262,  1263,  1264,  1265,  1266,  1267,  1268,
9115:     1269,  1270,    -1,    -1,  1273,    -1,    -1,    -1,    -1,  1278,
9116:       -1,    -1,  1281,    -1,  1283,  2208,  1285,    -1,  2211,  2212,
9117:     2213,  2214,    -1,  2195,    -1,  2218,  2219,    -1,  2221,    -1,
9118:       -1,  2224,    -1,    -1,  1822,  2228,    -1,    -1,  1307,  2232,
9119:       -1,    -1,    -1,    -1,    -1,  2238,   244,   245,   246,   247,
9120:      248,   249,    -1,    -1,   252,   253,    -1,    -1,    -1,    -1,
9121:       -1,    -1,    -1,    -1,  2257,  1334,  1335,  2195,    -1,  2262,
9122:       -1,    -1,    -1,  2266,  1862,    -1,    -1,    -1,    -1,    -1,
9123:       -1,  2274,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9124:     1878,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9125:       -1,    -1,    -1,    -1,    -1,    -1,  2299,    -1,    -1,    -1,
9126:     1898,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9127:       -1,    -1,    23,    -1,    -1,    -1,    -1,    -1,    29,    -1,
9128:       -1,  2069,  2304,    -1,    -1,    36,    -1,    -1,    -1,  1927,
9129:       -1,    -1,    -1,    -1,  1413,    -1,  1934,  1416,  1417,    -1,
9130:     1419,    -1,    -1,    -1,    55,    -1,    -1,    -1,   356,   357,
9131:       -1,    -1,  2334,    -1,    -1,  1953,    -1,    -1,    -1,    -1,
9132:       -1,    -1,  2365,    -1,    -1,    -1,  2304,  1446,  2371,    -1,
9133:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2382,
9134:       -1,    -1,  2130,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9135:       -1,    -1,    -1,    -1,   105,    -1,  2334,    -1,    -1,    -1,
9136:       -1,    -1,    -1,    -1,    -1,    -1,    -1,  1486,     0,    -1,
9137:     2392,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9138:     2402,    -1,    -1,   134,  2427,  2428,    -1,    -1,  2431,    -1,
9139:       -1,  2434,    -1,  2436,    -1,    -1,    -1,    -1,  2441,    -1,
9140:       -1,  2444,    -1,  2446,    -1,    -1,  2449,  1526,    -1,    -1,
9141:       -1,    -1,  1531,    -1,  2392,    -1,    -1,    -1,   466,   467,
9142:     2463,    -1,    -1,    -1,  2402,   804,    -1,    -1,    -1,    -1,
9143:       -1,  2069,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9144:     2483,  2484,   193,    -1,    -1,    -1,    -1,    -1,    -1,  2492,
9145:       -1,    -1,    -1,    -1,  1573,    -1,    -1,    -1,    -1,    -1,
9146:       92,    -1,    -1,    -1,   843,    -1,    -1,    -1,    -1,    -1,
9147:     1589,    -1,  1591,  1592,    -1,  2518,  2519,    -1,    -1,    -1,
9148:     1599,    -1,    -1,  1602,    -1,  2528,    -1,    -1,  2531,    -1,
9149:       -1,   242,    -1,    -1,    -1,  2517,    -1,    -1,    -1,   250,
9150:     2543,    -1,    -1,  2546,    -1,  2293,    -1,    -1,    -1,    -1,
9151:     2298,   262,   144,    -1,    -1,    -1,    -1,  1636,    -1,    -1,
9152:     1639,    -1,  1641,  2566,    -1,   157,    -1,    -1,    -1,    -1,
9153:      162,  2553,   283,    -1,    -1,   167,  2579,    -1,    -1,  2517,
9154:       -1,  2584,   293,    -1,   176,    -1,    -1,   179,    -1,    -1,
9155:     2593,    -1,  2340,  2341,  2597,    -1,    -1,  2195,    -1,    -1,
9156:       -1,  2583,    -1,  2606,  2586,    -1,    -1,    -1,    -1,    -1,
9157:       -1,   950,    -1,    -1,    -1,  2553,   208,    -1,   957,    -1,
9158:       -1,    -1,   333,  1702,    -1,  2628,   337,   338,    -1,    -1,
9159:       -1,    -1,    -1,    -1,    -1,   227,  2639,    -1,  1717,    -1,
9160:       -1,    -1,    -1,    -1,    -1,  2583,    -1,    -1,  2586,   360,
9161:       -1,    -1,    -1,    -1,    -1,   366,  1735,    -1,    -1,    -1,
9162:       -1,    -1,    -1,    -1,  2667,    -1,    -1,    -1,    -1,   380,
9163:       -1,    -1,    -1,  2676,    -1,    -1,    -1,  2680,    -1,    -1,
9164:       -1,  2684,    -1,    -1,   276,    -1,    -1,   279,    -1,    -1,
9165:       -1,    -1,    -1,   285,    -1,    -1,    -1,  2700,  2701,  2702,
9166:     2703,    -1,    -1,    -1,    -1,    -1,  2304,    -1,    -1,    -1,
9167:       -1,    -1,    -1,    -1,  1793,    -1,    -1,    -1,    -1,    -1,
9168:       -1,   432,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9169:       -1,    -1,    23,    -1,    -1,    -1,  2334,    -1,    29,    -1,
9170:       -1,  2744,    -1,    -1,    -1,    36,    -1,    -1,   340,    -1,
9171:     2753,    -1,  2755,    -1,    -1,    -1,    -1,    -1,  2506,  2507,
9172:       -1,  2764,    -1,    -1,    55,    -1,    -1,    -1,    -1,  2517,
9173:       -1,    -1,    -1,    -1,    -1,  2778,    -1,    -1,    -1,    -1,
9174:       -1,  2784,    -1,    -1,    -1,    -1,  2768,    -1,    -1,    -1,
9175:       -1,    -1,    -1,    -1,  2392,    -1,  1875,    -1,    -1,  2802,
9176:       -1,    -1,   394,    -1,  2402,    -1,  1885,    -1,    -1,    -1,
9177:     1889,    -1,    -1,  1892,   105,    -1,    -1,    -1,    -1,    -1,
9178:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   421,
9179:     2768,    -1,    -1,    -1,    -1,    -1,    -1,   429,    -1,  1918,
9180:     1919,  1180,    -1,   134,    -1,    -1,    -1,    -1,    -1,    -1,
9181:       -1,    -1,    -1,   445,    -1,   447,   448,    -1,    -1,    -1,
9182:       -1,    -1,  1941,  1202,    -1,  1944,    -1,  1946,  1207,    -1,
9183:       -1,    -1,    -1,    -1,    -1,  1954,    -1,    -1,    -1,    -1,
9184:     1219,  1220,  1221,  1962,  1963,    -1,  1225,    -1,    -1,    -1,
9185:       -1,    -1,   484,    -1,    -1,   487,   488,   489,    -1,    -1,
9186:       -1,    -1,   193,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9187:       -1,    -1,  1991,    -1,    -1,    -1,    -1,    -1,    -1,  2517,
9188:       -1,  2000,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9189:       -1,    -1,    -1,    -1,    -1,    -1,    -1,  2016,    -1,    -1,
9190:       -1,  1280,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9191:       -1,   242,    -1,     8,    -1,  2553,    11,    -1,     0,   250,
9192:       -1,    16,    17,    18,    -1,    -1,    -1,    -1,    -1,    -1,
9193:       -1,   262,    -1,    -1,    -1,    -1,    -1,    19,    33,    -1,
9194:       -1,    -1,  1321,    -1,    -1,  2583,    41,    29,  2586,    31,
9195:       32,    -1,   283,    48,  1333,     3,    -1,    -1,    -1,  1338,
9196:        8,    -1,   293,    11,    -1,    47,    -1,    -1,    16,    17,
9197:       18,    -1,    -1,    -1,    56,    -1,    -1,    -1,    73,    -1,
9198:     2768,    -1,    -1,    -1,    -1,    33,    68,    -1,    36,    -1,
9199:       -1,    -1,    -1,    41,    -1,    -1,    -1,    79,    -1,    -1,
9200:       48,    -1,   333,    -1,    -1,    -1,   337,   338,    90,    -1,
9201:       92,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9202:       -1,    -1,    -1,    -1,    -1,    73,    -1,  2146,   110,   360,
9203:       -1,    -1,    -1,    -1,    -1,   366,    -1,    -1,    -1,    -1,
9204:       -1,    -1,   124,    -1,    -1,    -1,    -1,    -1,    -1,   380,
9205:       -1,    -1,   134,    -1,    -1,    -1,    -1,    -1,   140,    -1,
9206:       -1,    -1,    -1,    -1,    -1,    -1,   148,    -1,   150,   151,
9207:     2189,  2190,    -1,    -1,    -1,  2194,    -1,   172,    -1,    -1,
9208:     2199,   163,    -1,  2202,  2203,    -1,    -1,    -1,  2207,    -1,
9209:       -1,   186,    -1,    -1,    -1,    -1,   191,    -1,    -1,    -1,
9210:       -1,   432,    -1,    -1,    -1,    -1,    -1,    -1,   190,    -1,
9211:       -1,    -1,    -1,    -1,    -1,    -1,    -1,   212,   213,    -1,
9212:       -1,    -1,    -1,    -1,   172,    -1,    -1,    -1,    -1,    -1,
9213:     2768,   226,    -1,    -1,  2253,    -1,    -1,    -1,   186,    -1,
9214:       -1,    -1,    -1,   191,    -1,    -1,    -1,   229,    -1,    -1,
9215:     1529,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9216:       -1,    -1,    -1,    -1,   212,   213,    -1,    -1,    -1,   264,
9217:       -1,    -1,   267,  1552,    -1,    -1,  2295,    -1,   226,    -1,
9218:       -1,    -1,    -1,    -1,    -1,    -1,   281,    -1,    -1,   284,
9219:     1569,    -1,  1571,  1572,    -1,  1574,    -1,  1576,    -1,    -1,
9220:       -1,    -1,  1581,    -1,    -1,    -1,    -1,    -1,    -1,  1588,
9221:       -1,    -1,    -1,    -1,  1593,    -1,   264,  1596,    -1,   267,
9222:       -1,    -1,    -1,    -1,   306,  1604,    -1,   309,    -1,  1608,
9223:     1609,  1610,  1611,   281,    -1,    -1,   284,    -1,  1617,  1618,
9224:       -1,  1620,  1621,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9225:       -1,    -1,    -1,  1632,    -1,   337,  1635,    -1,    -1,    -1,
9226:       -1,    -1,    -1,   345,  1643,  1644,  1645,  1646,  1647,  1648,
9227:     1649,  1650,  1651,  1652,    -1,    -1,   371,   359,    -1,    -1,
9228:       -1,  1660,    -1,    -1,   366,  1664,    -1,    -1,   370,    -1,
9229:       -1,    -1,  2411,  2412,    -1,    -1,  2415,    -1,   380,    -1,
9230:       -1,    -1,    -1,    -1,    -1,    -1,  1685,    -1,    -1,    -1,
9231:       -1,    -1,   394,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9232:       -1,    -1,    -1,   371,    -1,    -1,    -1,    -1,    -1,    -1,
9233:       -1,    -1,  2451,  2452,    -1,    -1,    -1,    -1,    -1,    -1,
9234:       -1,    -1,    -1,    -1,    -1,    -1,  2465,    -1,   430,    -1,
9235:       -1,    -1,    -1,   435,    -1,    -1,    -1,    -1,    -1,    -1,
9236:       -1,    -1,    -1,    -1,    -1,    -1,   448,    -1,    -1,    -1,
9237:       -1,    -1,    -1,    -1,    -1,   470,    -1,    -1,   473,   474,
9238:      475,    -1,   477,   478,   479,   480,   481,   482,     8,    -1,
9239:      472,    11,    -1,    -1,    -1,   490,    16,    17,    18,    -1,
9240:       -1,    -1,    -1,    -1,   486,    -1,    -1,   489,    -1,    -1,
9241:       -1,    -1,    -1,    33,    -1,    -1,    -1,  1796,  1797,  1798,
9242:       -1,    41,   470,    -1,    -1,   473,   474,   475,    48,   477,
9243:      478,   479,   480,   481,   482,    -1,    -1,    -1,    -1,    -1,
9244:       -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    -1,    16,
9245:       17,    18,  1831,    73,    -1,    -1,  2575,    -1,    -1,    -1,
9246:       -1,    -1,    -1,    -1,    -1,    -1,    33,    -1,  2587,    -1,
9247:       -1,    -1,    -1,    -1,    41,    -1,    -1,    -1,    -1,  2598,
9248:       -1,    48,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9249:       -1,    -1,    -1,    -1,  2613,  1874,    -1,    -1,    -1,    -1,
9250:       -1,  1880,    -1,    -1,    -1,    -1,    73,    -1,    -1,    -1,
9251:       -1,    -1,    -1,    -1,    -1,    -1,  1895,  1896,  1897,    -1,
9252:     1899,  1900,  1901,  1902,    -1,    -1,  1905,  1906,  1907,  1908,
9253:     1909,  1910,  1911,  1912,  1913,  1914,  1915,    -1,    -1,    -1,
9254:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9255:       -1,    -1,   172,    -1,    -1,    -1,    -1,  1936,    -1,  1938,
9256:       -1,    -1,    -1,  1942,  1943,    -1,   186,    -1,    -1,    -1,
9257:     2689,   191,    -1,    -1,    -1,    -1,    -1,  1956,  1957,  1958,
9258:     1959,    -1,  1961,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9259:       -1,    -1,   212,   213,    -1,    -1,    -1,    -1,    -1,    -1,
9260:       -1,  2720,    -1,    -1,    -1,   172,   226,    -1,    -1,    -1,
9261:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   186,
9262:     2739,  2740,    -1,    -1,   191,    -1,    -1,    -1,    -1,    -1,
9263:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9264:       -1,    -1,    -1,    -1,   264,   212,   213,   267,    -1,    -1,
9265:       -1,    -1,    -1,    -1,  2033,    -1,    -1,    -1,    -1,   226,
9266:       -1,   281,    -1,    -1,   284,    -1,     8,  2786,    -1,    11,
9267:       -1,    -1,    -1,    -1,    16,    17,    18,    -1,    -1,    -1,
9268:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9269:       -1,    33,    -1,    -1,    -1,    -1,    -1,   264,    -1,    41,
9270:      267,    -1,    -1,    -1,    -1,    -1,    48,    -1,    -1,    -1,
9271:       -1,    -1,    -1,    -1,   281,    -1,    -1,   284,    -1,    -1,
9272:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2848,
9273:       -1,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9274:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9275:       -1,   371,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9276:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2147,    -1,
9277:       -1,    -1,  2151,  2152,    -1,  2154,    -1,    -1,  2157,  2158,
9278:     2159,  2160,    -1,    -1,    -1,  2164,  2165,  2166,  2167,  2168,
9279:     2169,  2170,  2171,  2172,  2173,  2174,  2175,    -1,    -1,    -1,
9280:       -1,    -1,    -1,    -1,   371,    -1,    -1,    -1,    -1,  2188,
9281:       -1,    -1,  2191,    -1,  2193,    -1,    -1,    -1,  2197,    -1,
9282:       -1,  2200,  2201,    -1,    -1,  2204,  2205,    -1,    -1,    -1,
9283:      172,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9284:       -1,    -1,    -1,    -1,   186,    -1,    -1,    -1,    -1,   191,
9285:      470,    -1,    -1,   473,   474,   475,    -1,   477,   478,   479,
9286:      480,   481,   482,    -1,    -1,    -1,  2245,   487,    -1,    -1,
9287:      212,   213,    -1,  2252,    -1,    -1,    -1,    -1,    -1,    -1,
9288:       -1,    -1,    -1,    -1,   226,    -1,  2265,    -1,    -1,    -1,
9289:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9290:       -1,    -1,    -1,   470,    -1,    -1,   473,   474,   475,    -1,
9291:      477,   478,   479,   480,   481,   482,    -1,    -1,    -1,    -1,
9292:      487,    -1,   264,    -1,    -1,   267,    -1,    -1,    -1,    -1,
9293:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   281,
9294:       -1,    -1,   284,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9295:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9296:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9297:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9298:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9299:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9300:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9301:       -1,    -1,    -1,    -1,    -1,    -1,  2395,    -1,    -1,    -1,
9302:     2399,    -1,    -1,    -1,    -1,    -1,  2405,  2406,  2407,   371,
9303:       -1,  2410,    -1,    -1,  2413,  2414,    -1,    -1,    -1,  2418,
9304:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9305:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9306:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9307:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9308:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9309:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9310:       -1,    -1,    -1,    -1,    -1,    -1,  2485,    -1,    -1,    -1,
9311:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9312:       -1,    -1,    -1,    -1,  2503,    -1,    -1,    -1,   470,    -1,
9313:       -1,   473,   474,   475,    -1,   477,   478,   479,   480,   481,
9314:      482,    -1,    -1,    -1,    -1,   487,    -1,    -1,    -1,    -1,
9315:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9316:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9317:       -1,    -1,  2551,  2552,    -1,    -1,    -1,  2556,  2557,  2558,
9318:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9319:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9320:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9321:       -1,    -1,  2591,  2592,    -1,    -1,    -1,    -1,    -1,    -1,
9322:       -1,    -1,    -1,    -1,    -1,  2604,    -1,    -1,    -1,    -1,
9323:       -1,    -1,    -1,    -1,    -1,    -1,    -1,  2616,    -1,    -1,
9324:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9325:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9326:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,
9327:        4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
9328:       -1,    -1,  2661,    -1,    -1,    19,    20,    21,    22,    23,
9329:       24,    25,    26,    27,    28,    29,    30,    -1,    -1,    -1,
9330:     2679,    35,    -1,    -1,    38,    39,    -1,    41,    42,    43,
9331:       44,    45,    46,    47,    48,    49,    50,    51,    52,  2698,
9332:       54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
9333:       64,    65,    66,  2712,    68,    69,    70,    71,    72,    -1,
9334:       74,    -1,    76,    77,    78,    79,    80,    81,    82,    83,
9335:       84,    -1,    86,    87,    88,    89,    90,    91,    -1,    93,
9336:       94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
9337:      104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
9338:      114,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
9339:      124,   125,   126,   127,   128,   129,  2775,   131,   132,   133,
9340:      134,   135,    -1,   137,   138,   139,    -1,   141,   142,   143,
9341:     2789,   145,   146,   147,   148,   149,   150,   151,   152,   153,
9342:      154,   155,   156,    -1,   158,   159,   160,   161,    -1,   163,
9343:       -1,   165,   166,    -1,   168,   169,   170,   171,   172,   173,
9344:       -1,   175,    -1,   177,   178,    -1,   180,   181,   182,   183,
9345:      184,   185,   186,   187,   188,   189,   190,    -1,   192,   193,
9346:      194,   195,   196,   197,    -1,   199,   200,   201,   202,   203,
9347:      204,   205,   206,   207,    -1,   209,    -1,   211,   212,   213,
9348:      214,   215,   216,   217,   218,   219,   220,    -1,    -1,   223,
9349:      224,   225,   226,    -1,   228,   229,   230,   231,   232,   233,
9350:      234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
9351:      244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
9352:      254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
9353:      264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
9354:      274,   275,    -1,   277,   278,    -1,    -1,   281,   282,   283,
9355:       -1,    -1,   286,   287,   288,   289,   290,   291,   292,   293,
9356:      294,   295,   296,   297,   298,   299,   300,   301,    -1,   303,
9357:      304,   305,   306,   307,   308,   309,   310,   311,    -1,   313,
9358:      314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
9359:      324,   325,   326,    -1,   328,   329,   330,   331,   332,   333,
9360:      334,   335,   336,   337,   338,   339,    -1,   341,   342,   343,
9361:      344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
9362:      354,   355,   356,   357,   358,    -1,   360,   361,   362,   363,
9363:      364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
9364:      374,   375,    -1,   377,   378,   379,   380,   381,   382,   383,
9365:      384,   385,   386,   387,   388,   389,   390,    -1,   392,   393,
9366:       -1,   395,   396,   397,   398,   399,   400,   401,    -1,   403,
9367:      404,    -1,    -1,   407,   408,   409,   410,   411,   412,   413,
9368:      414,   415,   416,   417,   418,   419,   420,    -1,    -1,   423,
9369:      424,   425,   426,   427,   428,    -1,   430,   431,   432,   433,
9370:      434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
9371:       -1,    -1,   446,    -1,    -1,   449,   450,   451,   452,   453,
9372:      454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
9373:      464,   465,   466,   467,   468,   469,   470,    -1,    -1,    -1,
9374:       -1,    -1,    -1,   477,   478,   479,    -1,    -1,    -1,    -1,
9375:      484,    -1,   486,   487,    -1,    -1,    -1,   491,    -1,   493,
9376:      494,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
9377:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,
9378:       22,    23,    24,    25,    26,    -1,    28,    29,    30,    -1,
9379:       -1,    -1,    -1,    35,    -1,    -1,    38,    39,    -1,    41,
9380:       42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
9381:       52,    -1,    54,    55,    56,    57,    58,    59,    60,    61,
9382:       62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
9383:       72,    -1,    74,    -1,    76,    77,    78,    79,    80,    81,
9384:       82,    83,    84,    -1,    86,    87,    88,    89,    90,    91,
9385:       -1,    93,    94,    95,    96,    97,    98,    99,   100,   101,
9386:      102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
9387:      112,   113,   114,   115,    -1,   117,   118,   119,   120,   121,
9388:      122,    -1,   124,   125,   126,   127,   128,    -1,    -1,   131,
9389:      132,   133,   134,   135,    -1,   137,   138,   139,    -1,   141,
9390:      142,   143,    -1,   145,   146,   147,   148,   149,   150,   151,
9391:      152,   153,   154,   155,   156,    -1,   158,   159,   160,   161,
9392:       -1,   163,    -1,   165,   166,    -1,   168,   169,   170,   171,
9393:      172,   173,    -1,   175,    -1,   177,   178,    -1,   180,   181,
9394:      182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
9395:      192,   193,   194,   195,   196,   197,    -1,   199,   200,   201,
9396:      202,   203,   204,   205,   206,   207,    -1,   209,    -1,   211,
9397:      212,   213,   214,   215,   216,   217,   218,   219,   220,    -1,
9398:       -1,   223,   224,   225,   226,    -1,   228,   229,   230,   231,
9399:      232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
9400:      242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
9401:      252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
9402:      262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
9403:      272,   273,   274,   275,    -1,   277,   278,    -1,    -1,   281,
9404:      282,   283,    -1,    -1,   286,   287,   288,   289,   290,   291,
9405:      292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
9406:       -1,   303,   304,   305,   306,   307,   308,   309,   310,   311,
9407:       -1,   313,   314,   315,   316,   317,   318,   319,   320,   321,
9408:      322,   323,   324,   325,   326,    -1,   328,   329,   330,   331,
9409:      332,   333,   334,   335,   336,   337,   338,   339,    -1,   341,
9410:      342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
9411:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
9412:      362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
9413:      372,   373,   374,   375,    -1,   377,   378,   379,   380,   381,
9414:      382,   383,   384,   385,   386,   387,   388,   389,   390,    -1,
9415:      392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
9416:       -1,   403,   404,    -1,    -1,   407,   408,   409,   410,   411,
9417:      412,   413,   414,   415,   416,   417,   418,   419,   420,    -1,
9418:       -1,   423,   424,   425,   426,   427,   428,    -1,   430,   431,
9419:      432,   433,   434,   435,   436,    -1,   438,   439,   440,   441,
9420:      442,   443,    -1,    -1,   446,    -1,   448,   449,   450,   451,
9421:      452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
9422:      462,   463,   464,   465,   466,   467,   468,   469,   470,    -1,
9423:      472,    -1,    -1,    -1,    -1,   477,   478,    -1,    -1,    -1,
9424:       -1,    -1,   484,    -1,   486,   487,    -1,    -1,    -1,   491,
9425:       -1,   493,   494,     3,     4,     5,     6,     7,     8,     9,
9426:       10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,
9427:       20,    21,    22,    23,    24,    25,    26,    -1,    28,    29,
9428:       30,    -1,    -1,    -1,    -1,    35,    -1,    -1,    38,    39,
9429:       -1,    41,    42,    43,    44,    45,    46,    47,    48,    49,
9430:       50,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
9431:       60,    61,    62,    63,    64,    65,    66,    -1,    68,    69,
9432:       70,    71,    72,    -1,    74,    -1,    76,    77,    78,    79,
9433:       80,    81,    82,    83,    84,    -1,    86,    87,    88,    89,
9434:       90,    91,    -1,    93,    94,    95,    96,    97,    98,    99,
9435:      100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
9436:      110,   111,   112,   113,   114,   115,    -1,   117,   118,   119,
9437:      120,   121,   122,    -1,   124,   125,   126,   127,   128,    -1,
9438:       -1,   131,   132,   133,   134,   135,    -1,   137,   138,   139,
9439:       -1,   141,   142,   143,    -1,   145,   146,   147,   148,   149,
9440:      150,   151,   152,   153,   154,   155,   156,    -1,   158,   159,
9441:      160,   161,    -1,   163,    -1,   165,   166,    -1,   168,   169,
9442:      170,   171,   172,   173,    -1,   175,    -1,   177,   178,    -1,
9443:      180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
9444:      190,    -1,   192,   193,   194,   195,   196,   197,    -1,   199,
9445:      200,   201,   202,   203,   204,   205,   206,   207,    -1,   209,
9446:       -1,   211,   212,   213,   214,   215,   216,   217,   218,   219,
9447:      220,    -1,    -1,   223,   224,   225,   226,    -1,   228,   229,
9448:      230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
9449:      240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
9450:      250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
9451:      260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
9452:      270,   271,   272,   273,   274,   275,    -1,   277,   278,    -1,
9453:       -1,   281,   282,   283,    -1,    -1,   286,   287,   288,   289,
9454:      290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
9455:      300,   301,    -1,   303,   304,   305,   306,   307,   308,   309,
9456:      310,   311,    -1,   313,   314,   315,   316,   317,   318,   319,
9457:      320,   321,   322,   323,   324,   325,   326,    -1,   328,   329,
9458:      330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
9459:       -1,   341,   342,   343,   344,   345,   346,   347,   348,   349,
9460:      350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
9461:      360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
9462:      370,   371,   372,   373,   374,   375,    -1,   377,   378,   379,
9463:      380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
9464:      390,    -1,   392,   393,   394,   395,   396,   397,   398,   399,
9465:      400,   401,    -1,   403,   404,    -1,    -1,   407,   408,   409,
9466:      410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
9467:      420,    -1,    -1,   423,   424,   425,   426,   427,   428,    -1,
9468:      430,   431,   432,   433,   434,   435,   436,    -1,   438,   439,
9469:      440,   441,   442,   443,    -1,    -1,   446,    -1,   448,   449,
9470:      450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
9471:      460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
9472:      470,    -1,   472,    -1,    -1,    -1,    -1,   477,   478,    -1,
9473:       -1,    -1,    -1,    -1,   484,    -1,   486,    -1,    -1,    -1,
9474:       -1,   491,    -1,   493,   494,     3,     4,     5,     6,     7,
9475:        8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9476:       -1,    19,    20,    21,    22,    23,    24,    25,    26,    -1,
9477:       28,    29,    30,    -1,    -1,    -1,    -1,    35,    -1,    -1,
9478:       38,    39,    -1,    41,    42,    43,    44,    45,    46,    47,
9479:       48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
9480:       58,    59,    60,    61,    62,    63,    64,    65,    66,    -1,
9481:       68,    69,    70,    71,    72,    -1,    74,    -1,    76,    77,
9482:       78,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
9483:       88,    89,    90,    91,    -1,    93,    94,    95,    96,    97,
9484:       98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
9485:      108,   109,   110,   111,   112,   113,   114,   115,    -1,   117,
9486:      118,   119,   120,   121,   122,    -1,   124,   125,   126,   127,
9487:      128,    -1,    -1,   131,   132,   133,   134,   135,    -1,   137,
9488:      138,   139,    -1,   141,   142,   143,    -1,   145,   146,   147,
9489:      148,   149,   150,   151,   152,   153,   154,   155,   156,    -1,
9490:      158,   159,   160,   161,    -1,   163,    -1,   165,   166,   167,
9491:      168,   169,   170,   171,   172,   173,    -1,   175,    -1,   177,
9492:      178,    -1,   180,   181,   182,   183,   184,   185,   186,   187,
9493:      188,   189,   190,    -1,   192,   193,   194,   195,   196,   197,
9494:       -1,   199,   200,   201,   202,   203,   204,   205,   206,   207,
9495:       -1,   209,    -1,   211,   212,   213,   214,   215,   216,   217,
9496:      218,   219,   220,    -1,   222,   223,   224,   225,   226,    -1,
9497:      228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
9498:      238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
9499:      248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
9500:      258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
9501:      268,   269,   270,   271,   272,   273,   274,   275,    -1,   277,
9502:      278,    -1,    -1,   281,   282,   283,    -1,    -1,   286,   287,
9503:      288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
9504:      298,   299,   300,   301,    -1,   303,   304,   305,   306,   307,
9505:      308,   309,   310,   311,    -1,   313,   314,   315,   316,   317,
9506:      318,   319,   320,   321,   322,   323,   324,   325,   326,    -1,
9507:      328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
9508:      338,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
9509:      348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
9510:      358,    -1,   360,   361,   362,   363,   364,   365,   366,   367,
9511:      368,   369,   370,   371,   372,   373,   374,   375,    -1,   377,
9512:      378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
9513:      388,   389,   390,    -1,   392,   393,    -1,   395,   396,   397,
9514:      398,   399,   400,   401,    -1,   403,   404,    -1,   406,   407,
9515:      408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
9516:      418,   419,   420,    -1,    -1,   423,   424,   425,   426,   427,
9517:      428,    -1,   430,   431,   432,   433,   434,   435,   436,    -1,
9518:      438,   439,   440,   441,   442,   443,    -1,    -1,   446,    -1,
9519:       -1,   449,   450,   451,   452,   453,   454,   455,   456,   457,
9520:      458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
9521:      468,   469,   470,    -1,    -1,    -1,    -1,    -1,    -1,   477,
9522:      478,    -1,    -1,    -1,    -1,    -1,   484,    -1,   486,    -1,
9523:       -1,    -1,    -1,   491,    -1,   493,   494,     3,     4,     5,
9524:        6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
9525:       -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
9526:       26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,    35,
9527:       -1,    -1,    38,    39,    -1,    41,    42,    43,    44,    45,
9528:       46,    47,    48,    49,    50,    51,    52,    -1,    54,    55,
9529:       56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
9530:       66,    -1,    68,    69,    70,    71,    72,    -1,    74,    -1,
9531:       76,    77,    78,    79,    80,    81,    82,    83,    84,    -1,
9532:       86,    87,    88,    89,    90,    91,    -1,    93,    94,    95,
9533:       96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
9534:      106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
9535:       -1,   117,   118,   119,   120,   121,   122,    -1,   124,   125,
9536:      126,   127,   128,    -1,    -1,   131,   132,   133,   134,   135,
9537:       -1,   137,   138,   139,    -1,   141,   142,   143,    -1,   145,
9538:      146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
9539:      156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
9540:      166,    -1,   168,   169,   170,   171,   172,   173,    -1,   175,
9541:       -1,   177,   178,    -1,   180,   181,   182,   183,   184,   185,
9542:      186,   187,   188,   189,   190,    -1,   192,   193,   194,   195,
9543:      196,   197,    -1,   199,   200,   201,   202,   203,   204,   205,
9544:      206,   207,    -1,   209,    -1,   211,   212,   213,   214,   215,
9545:      216,   217,   218,   219,   220,    -1,    -1,   223,   224,   225,
9546:      226,    -1,   228,   229,   230,   231,   232,   233,   234,   235,
9547:      236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
9548:      246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
9549:      256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
9550:      266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
9551:       -1,   277,   278,    -1,    -1,   281,   282,   283,    -1,    -1,
9552:      286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
9553:      296,   297,   298,   299,   300,   301,    -1,   303,   304,   305,
9554:      306,   307,   308,   309,   310,   311,    -1,   313,   314,   315,
9555:      316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
9556:      326,    -1,   328,   329,   330,   331,   332,   333,   334,   335,
9557:      336,   337,   338,   339,    -1,   341,   342,   343,   344,   345,
9558:      346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
9559:      356,   357,   358,    -1,   360,   361,   362,   363,   364,   365,
9560:      366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
9561:       -1,   377,   378,   379,   380,   381,   382,   383,   384,   385,
9562:      386,   387,   388,   389,   390,    -1,   392,   393,    -1,   395,
9563:      396,   397,   398,   399,   400,   401,    -1,   403,   404,    -1,
9564:       -1,   407,   408,   409,   410,   411,   412,   413,   414,   415,
9565:      416,   417,   418,   419,   420,    -1,    -1,   423,   424,   425,
9566:      426,   427,   428,    -1,   430,   431,   432,   433,   434,   435,
9567:      436,    -1,   438,   439,   440,   441,   442,   443,    -1,    -1,
9568:      446,    -1,    -1,   449,   450,   451,   452,   453,   454,   455,
9569:      456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
9570:      466,   467,   468,   469,   470,    -1,    -1,    -1,    -1,    -1,
9571:       -1,   477,   478,   479,    -1,    -1,    -1,    -1,   484,    -1,
9572:      486,    -1,    -1,    -1,    -1,   491,    -1,   493,   494,     3,
9573:        4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
9574:       -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,
9575:       24,    25,    26,    27,    28,    29,    30,    -1,    -1,    -1,
9576:       -1,    35,    -1,    -1,    38,    39,    -1,    41,    42,    43,
9577:       44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
9578:       54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
9579:       64,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
9580:       74,    -1,    76,    77,    78,    79,    80,    81,    82,    83,
9581:       84,    -1,    86,    87,    88,    89,    90,    91,    -1,    93,
9582:       94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
9583:      104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
9584:      114,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
9585:      124,   125,   126,   127,   128,    -1,    -1,   131,   132,   133,
9586:      134,   135,    -1,   137,   138,   139,    -1,   141,   142,   143,
9587:       -1,   145,   146,   147,   148,   149,   150,   151,   152,   153,
9588:      154,   155,   156,    -1,   158,   159,   160,   161,    -1,   163,
9589:       -1,   165,   166,    -1,   168,   169,   170,   171,   172,   173,
9590:       -1,   175,    -1,   177,   178,    -1,   180,   181,   182,   183,
9591:      184,   185,   186,   187,   188,   189,   190,    -1,   192,   193,
9592:      194,   195,   196,   197,    -1,   199,   200,   201,   202,   203,
9593:      204,   205,   206,   207,    -1,   209,    -1,   211,   212,   213,
9594:      214,   215,   216,   217,   218,   219,   220,    -1,    -1,   223,
9595:      224,   225,   226,    -1,   228,   229,   230,   231,   232,   233,
9596:      234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
9597:      244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
9598:      254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
9599:      264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
9600:      274,   275,    -1,   277,   278,    -1,    -1,   281,   282,   283,
9601:       -1,    -1,   286,   287,   288,   289,   290,   291,   292,   293,
9602:      294,   295,   296,   297,   298,   299,   300,   301,    -1,   303,
9603:      304,   305,   306,   307,   308,   309,   310,   311,    -1,   313,
9604:      314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
9605:      324,   325,   326,    -1,   328,   329,   330,   331,   332,   333,
9606:      334,   335,   336,   337,   338,   339,    -1,   341,   342,   343,
9607:      344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
9608:      354,   355,   356,   357,   358,    -1,   360,   361,   362,   363,
9609:      364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
9610:      374,   375,    -1,   377,   378,   379,   380,   381,   382,   383,
9611:      384,   385,   386,   387,   388,   389,   390,    -1,   392,   393,
9612:       -1,   395,   396,   397,   398,   399,   400,   401,    -1,   403,
9613:      404,    -1,    -1,   407,   408,   409,   410,   411,   412,   413,
9614:      414,   415,   416,   417,   418,   419,   420,    -1,    -1,   423,
9615:      424,   425,   426,   427,   428,    -1,   430,   431,   432,   433,
9616:      434,   435,   436,    -1,   438,   439,   440,   441,   442,   443,
9617:       -1,    -1,   446,    -1,    -1,   449,   450,   451,   452,   453,
9618:      454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
9619:      464,   465,   466,   467,   468,   469,   470,    -1,    -1,    -1,
9620:       -1,    -1,    -1,   477,   478,    -1,    -1,    -1,    -1,    -1,
9621:      484,    -1,   486,    -1,    -1,    -1,    -1,   491,    -1,   493,
9622:      494,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
9623:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,
9624:       22,    23,    24,    25,    26,    -1,    28,    29,    30,    -1,
9625:       -1,    -1,    -1,    35,    -1,    -1,    38,    39,    -1,    41,
9626:       42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
9627:       52,    -1,    54,    55,    56,    57,    58,    59,    60,    61,
9628:       62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
9629:       72,    -1,    74,    -1,    76,    77,    78,    79,    80,    81,
9630:       82,    83,    84,    -1,    86,    87,    88,    89,    90,    91,
9631:       -1,    93,    94,    95,    96,    97,    98,    99,   100,   101,
9632:      102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
9633:      112,   113,   114,   115,    -1,   117,   118,   119,   120,   121,
9634:      122,    -1,   124,   125,   126,   127,   128,    -1,    -1,   131,
9635:      132,   133,   134,   135,    -1,   137,   138,   139,    -1,   141,
9636:      142,   143,    -1,   145,   146,   147,   148,   149,   150,   151,
9637:      152,   153,   154,   155,   156,    -1,   158,   159,   160,   161,
9638:       -1,   163,    -1,   165,   166,    -1,   168,   169,   170,   171,
9639:      172,   173,    -1,   175,    -1,   177,   178,    -1,   180,   181,
9640:      182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
9641:      192,   193,   194,   195,   196,   197,    -1,   199,   200,   201,
9642:      202,   203,   204,   205,   206,   207,    -1,   209,    -1,   211,
9643:      212,   213,   214,   215,   216,   217,   218,   219,   220,    -1,
9644:       -1,   223,   224,   225,   226,    -1,   228,   229,   230,   231,
9645:      232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
9646:      242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
9647:      252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
9648:      262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
9649:      272,   273,   274,   275,    -1,   277,   278,    -1,    -1,   281,
9650:      282,   283,    -1,    -1,   286,   287,   288,   289,   290,   291,
9651:      292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
9652:       -1,   303,   304,   305,   306,   307,   308,   309,   310,   311,
9653:       -1,   313,   314,   315,   316,   317,   318,   319,   320,   321,
9654:      322,   323,   324,   325,   326,    -1,   328,   329,   330,   331,
9655:      332,   333,   334,   335,   336,   337,   338,   339,    -1,   341,
9656:      342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
9657:      352,   353,   354,   355,   356,   357,   358,    -1,   360,   361,
9658:      362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
9659:      372,   373,   374,   375,    -1,   377,   378,   379,   380,   381,
9660:      382,   383,   384,   385,   386,   387,   388,   389,   390,    -1,
9661:      392,   393,    -1,   395,   396,   397,   398,   399,   400,   401,
9662:       -1,   403,   404,    -1,    -1,   407,   408,   409,   410,   411,
9663:      412,   413,   414,   415,   416,   417,   418,   419,   420,    -1,
9664:       -1,   423,   424,   425,   426,   427,   428,    -1,   430,   431,
9665:      432,   433,   434,   435,   436,    -1,   438,   439,   440,   441,
9666:      442,   443,    -1,    -1,   446,    -1,    -1,   449,   450,   451,
9667:      452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
9668:      462,   463,   464,   465,   466,   467,   468,   469,   470,    -1,
9669:       -1,    -1,    -1,    -1,    -1,   477,   478,    -1,    -1,    -1,
9670:       -1,    -1,   484,    -1,   486,   487,    -1,    -1,    -1,   491,
9671:       -1,   493,   494,     3,     4,     5,     6,     7,     8,     9,
9672:       10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,
9673:       20,    21,    22,    23,    24,    25,    26,    -1,    28,    29,
9674:       30,    -1,    -1,    -1,    -1,    35,    -1,    -1,    38,    39,
9675:       -1,    41,    42,    43,    44,    45,    46,    47,    48,    49,
9676:       50,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
9677:       60,    61,    62,    63,    64,    65,    66,    -1,    68,    69,
9678:       70,    71,    72,    -1,    74,    -1,    76,    77,    78,    79,
9679:       80,    81,    82,    83,    84,    -1,    86,    87,    88,    89,
9680:       90,    91,    -1,    93,    94,    95,    96,    97,    98,    99,
9681:      100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
9682:      110,   111,   112,   113,   114,   115,    -1,   117,   118,   119,
9683:      120,   121,   122,    -1,   124,   125,   126,   127,   128,    -1,
9684:       -1,   131,   132,   133,   134,   135,    -1,   137,   138,   139,
9685:       -1,   141,   142,   143,    -1,   145,   146,   147,   148,   149,
9686:      150,   151,   152,   153,   154,   155,   156,    -1,   158,   159,
9687:      160,   161,    -1,   163,    -1,   165,   166,    -1,   168,   169,
9688:      170,   171,   172,   173,    -1,   175,    -1,   177,   178,    -1,
9689:      180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
9690:      190,    -1,   192,   193,   194,   195,   196,   197,    -1,   199,
9691:      200,   201,   202,   203,   204,   205,   206,   207,    -1,   209,
9692:       -1,   211,   212,   213,   214,   215,   216,   217,   218,   219,
9693:      220,    -1,    -1,   223,   224,   225,   226,    -1,   228,   229,
9694:      230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
9695:      240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
9696:      250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
9697:      260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
9698:      270,   271,   272,   273,   274,   275,    -1,   277,   278,    -1,
9699:       -1,   281,   282,   283,    -1,    -1,   286,   287,   288,   289,
9700:      290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
9701:      300,   301,    -1,   303,   304,   305,   306,   307,   308,   309,
9702:      310,   311,    -1,   313,   314,   315,   316,   317,   318,   319,
9703:      320,   321,   322,   323,   324,   325,   326,    -1,   328,   329,
9704:      330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
9705:       -1,   341,   342,   343,   344,   345,   346,   347,   348,   349,
9706:      350,   351,   352,   353,   354,   355,   356,   357,   358,    -1,
9707:      360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
9708:      370,   371,   372,   373,   374,   375,    -1,   377,   378,   379,
9709:      380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
9710:      390,    -1,   392,   393,    -1,   395,   396,   397,   398,   399,
9711:      400,   401,    -1,   403,   404,    -1,    -1,   407,   408,   409,
9712:      410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
9713:      420,    -1,    -1,   423,   424,   425,   426,   427,   428,    -1,
9714:      430,   431,   432,   433,   434,   435,   436,    -1,   438,   439,
9715:      440,   441,   442,   443,    -1,    -1,   446,    -1,    -1,   449,
9716:      450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
9717:      460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
9718:      470,    -1,    -1,    -1,    -1,    -1,    -1,   477,   478,    -1,
9719:       -1,    -1,    -1,    -1,   484,    -1,   486,   487,    -1,    -1,
9720:       -1,   491,    -1,   493,   494,     3,     4,     5,     6,     7,
9721:        8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9722:       -1,    19,    20,    21,    22,    23,    24,    25,    26,    -1,
9723:       28,    29,    30,    -1,    -1,    -1,    -1,    35,    -1,    -1,
9724:       38,    39,    -1,    41,    42,    43,    44,    45,    46,    47,
9725:       48,    49,    50,    51,    52,    -1,    54,    55,    56,    57,
9726:       58,    59,    60,    61,    62,    63,    64,    65,    66,    -1,
9727:       68,    69,    70,    71,    72,    -1,    74,    -1,    76,    77,
9728:       78,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
9729:       88,    89,    90,    91,    -1,    93,    94,    95,    96,    97,
9730:       98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
9731:      108,   109,   110,   111,   112,   113,   114,   115,    -1,   117,
9732:      118,   119,   120,   121,   122,    -1,   124,   125,   126,   127,
9733:      128,    -1,    -1,   131,   132,   133,   134,   135,    -1,   137,
9734:      138,   139,    -1,   141,   142,   143,    -1,   145,   146,   147,
9735:      148,   149,   150,   151,   152,   153,   154,   155,   156,    -1,
9736:      158,   159,   160,   161,    -1,   163,    -1,   165,   166,    -1,
9737:      168,   169,   170,   171,   172,   173,    -1,   175,    -1,   177,
9738:      178,    -1,   180,   181,   182,   183,   184,   185,   186,   187,
9739:      188,   189,   190,    -1,   192,   193,   194,   195,   196,   197,
9740:       -1,   199,   200,   201,   202,   203,   204,   205,   206,   207,
9741:       -1,   209,    -1,   211,   212,   213,   214,   215,   216,   217,
9742:      218,   219,   220,    -1,    -1,   223,   224,   225,   226,    -1,
9743:      228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
9744:      238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
9745:      248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
9746:      258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
9747:      268,   269,   270,   271,   272,   273,   274,   275,    -1,   277,
9748:      278,    -1,    -1,   281,   282,   283,    -1,    -1,   286,   287,
9749:      288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
9750:      298,   299,   300,   301,    -1,   303,   304,   305,   306,   307,
9751:      308,   309,   310,   311,    -1,   313,   314,   315,   316,   317,
9752:      318,   319,   320,   321,   322,   323,   324,   325,   326,    -1,
9753:      328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
9754:      338,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
9755:      348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
9756:      358,    -1,   360,   361,   362,   363,   364,   365,   366,   367,
9757:      368,   369,   370,   371,   372,   373,   374,   375,    -1,   377,
9758:      378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
9759:      388,   389,   390,    -1,   392,   393,    -1,   395,   396,   397,
9760:      398,   399,   400,   401,    -1,   403,   404,    -1,    -1,   407,
9761:      408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
9762:      418,   419,   420,    -1,    -1,   423,   424,   425,   426,   427,
9763:      428,    -1,   430,   431,   432,   433,   434,   435,   436,   437,
9764:      438,   439,   440,   441,   442,   443,    -1,    -1,   446,    -1,
9765:       -1,   449,   450,   451,   452,   453,   454,   455,   456,   457,
9766:      458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
9767:      468,   469,   470,    -1,    -1,    -1,    -1,    -1,    -1,   477,
9768:      478,    -1,    -1,    -1,    -1,    -1,   484,    -1,   486,    -1,
9769:       -1,    -1,    -1,   491,    -1,   493,   494,     3,     4,     5,
9770:        6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
9771:       -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
9772:       26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,    35,
9773:       -1,    -1,    38,    39,    -1,    41,    42,    43,    44,    45,
9774:       46,    47,    48,    49,    50,    51,    52,    -1,    54,    55,
9775:       56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
9776:       66,    -1,    68,    69,    70,    71,    72,    -1,    74,    -1,
9777:       76,    77,    78,    79,    80,    81,    82,    83,    84,    -1,
9778:       86,    87,    88,    89,    90,    91,    -1,    93,    94,    95,
9779:       96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
9780:      106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
9781:       -1,   117,   118,   119,   120,   121,   122,    -1,   124,   125,
9782:      126,   127,   128,    -1,    -1,   131,   132,   133,   134,   135,
9783:       -1,   137,   138,   139,    -1,   141,   142,   143,    -1,   145,
9784:      146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
9785:      156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
9786:      166,   167,   168,   169,   170,   171,   172,   173,    -1,   175,
9787:       -1,   177,   178,    -1,   180,   181,   182,   183,   184,   185,
9788:      186,   187,   188,   189,   190,    -1,   192,   193,   194,   195,
9789:      196,   197,    -1,   199,   200,   201,   202,   203,   204,   205,
9790:      206,   207,    -1,   209,    -1,   211,   212,   213,   214,   215,
9791:      216,   217,   218,   219,   220,    -1,    -1,   223,   224,   225,
9792:      226,    -1,   228,   229,   230,   231,   232,   233,   234,   235,
9793:      236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
9794:      246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
9795:      256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
9796:      266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
9797:       -1,   277,   278,    -1,    -1,   281,   282,   283,    -1,    -1,
9798:      286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
9799:      296,   297,   298,   299,   300,   301,    -1,   303,   304,   305,
9800:      306,   307,   308,   309,   310,   311,    -1,   313,   314,   315,
9801:      316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
9802:      326,    -1,   328,   329,   330,   331,   332,   333,   334,   335,
9803:      336,   337,   338,   339,    -1,   341,   342,   343,   344,   345,
9804:      346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
9805:      356,   357,   358,    -1,   360,   361,   362,   363,   364,   365,
9806:      366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
9807:       -1,   377,   378,   379,   380,   381,   382,   383,   384,   385,
9808:      386,   387,   388,   389,   390,    -1,   392,   393,    -1,   395,
9809:      396,   397,   398,   399,   400,   401,    -1,   403,   404,    -1,
9810:       -1,   407,   408,   409,   410,   411,   412,   413,   414,   415,
9811:      416,   417,   418,   419,   420,    -1,    -1,   423,   424,   425,
9812:      426,   427,   428,    -1,   430,   431,   432,   433,   434,   435,
9813:      436,    -1,   438,   439,   440,   441,   442,   443,    -1,    -1,
9814:      446,    -1,    -1,   449,   450,   451,   452,   453,   454,   455,
9815:      456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
9816:      466,   467,   468,   469,   470,    -1,    -1,    -1,    -1,    -1,
9817:       -1,   477,   478,    -1,    -1,    -1,    -1,    -1,   484,    -1,
9818:      486,    -1,    -1,    -1,    -1,   491,    -1,   493,   494,     3,
9819:        4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
9820:       -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,
9821:       24,    25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,
9822:       -1,    35,    -1,    -1,    38,    39,    -1,    41,    42,    43,
9823:       44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
9824:       54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
9825:       64,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
9826:       74,    -1,    76,    77,    78,    79,    80,    81,    82,    83,
9827:       84,    -1,    86,    87,    88,    89,    90,    91,    -1,    93,
9828:       94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
9829:      104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
9830:      114,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
9831:      124,   125,   126,   127,   128,    -1,    -1,   131,   132,   133,
9832:      134,   135,    -1,   137,   138,   139,    -1,   141,   142,   143,
9833:       -1,   145,   146,   147,   148,   149,   150,   151,   152,   153,
9834:      154,   155,   156,    -1,   158,   159,   160,   161,    -1,   163,
9835:       -1,   165,   166,    -1,   168,   169,   170,   171,   172,   173,
9836:       -1,   175,    -1,   177,   178,    -1,   180,   181,   182,   183,
9837:      184,   185,   186,   187,   188,   189,   190,    -1,   192,   193,
9838:      194,   195,   196,   197,    -1,   199,   200,   201,   202,   203,
9839:      204,   205,   206,   207,    -1,   209,    -1,   211,   212,   213,
9840:      214,   215,   216,   217,   218,   219,   220,    -1,    -1,   223,
9841:      224,   225,   226,    -1,   228,   229,   230,   231,   232,   233,
9842:      234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
9843:      244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
9844:      254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
9845:      264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
9846:      274,   275,    -1,   277,   278,    -1,    -1,   281,   282,   283,
9847:       -1,    -1,   286,   287,   288,   289,   290,   291,   292,   293,
9848:      294,   295,   296,   297,   298,   299,   300,   301,    -1,   303,
9849:      304,   305,   306,   307,   308,   309,   310,   311,    -1,   313,
9850:      314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
9851:      324,   325,   326,    -1,   328,   329,   330,   331,   332,   333,
9852:      334,   335,   336,   337,   338,   339,    -1,   341,   342,   343,
9853:      344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
9854:      354,   355,   356,   357,   358,    -1,   360,   361,   362,   363,
9855:      364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
9856:      374,   375,    -1,   377,   378,   379,   380,   381,   382,   383,
9857:      384,   385,   386,   387,   388,   389,   390,    -1,   392,   393,
9858:       -1,   395,   396,   397,   398,   399,   400,   401,    -1,   403,
9859:      404,    -1,    -1,   407,   408,   409,   410,   411,   412,   413,
9860:      414,   415,   416,   417,   418,   419,   420,    -1,    -1,   423,
9861:      424,   425,   426,   427,   428,    -1,   430,   431,   432,   433,
9862:      434,   435,   436,    -1,   438,   439,   440,   441,   442,   443,
9863:       -1,    -1,   446,    -1,    -1,   449,   450,   451,   452,   453,
9864:      454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
9865:      464,   465,   466,   467,   468,   469,   470,    -1,    -1,    -1,
9866:       -1,    -1,    -1,   477,   478,    -1,    -1,    -1,    -1,    -1,
9867:      484,    -1,   486,    -1,    -1,    -1,    -1,   491,    -1,   493,
9868:      494,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
9869:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,
9870:       22,    23,    24,    25,    26,    -1,    28,    29,    30,    -1,
9871:       -1,    -1,    -1,    35,    -1,    -1,    38,    39,    -1,    41,
9872:       42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
9873:       52,    -1,    54,    55,    56,    57,    58,    59,    60,    61,
9874:       62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
9875:       72,    -1,    74,    -1,    76,    77,    78,    79,    80,    81,
9876:       82,    83,    84,    -1,    86,    87,    88,    89,    90,    91,
9877:       -1,    93,    94,    95,    96,    97,    98,    99,   100,   101,
9878:      102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
9879:      112,   113,   114,   115,    -1,   117,   118,   119,   120,   121,
9880:      122,    -1,   124,   125,   126,   127,   128,    -1,    -1,   131,
9881:      132,   133,   134,   135,    -1,   137,   138,   139,    -1,   141,
9882:      142,   143,    -1,   145,   146,   147,   148,   149,   150,   151,
9883:      152,   153,   154,   155,   156,    -1,   158,   159,   160,   161,
9884:       -1,   163,    -1,   165,   166,    -1,   168,   169,   170,   171,
9885:      172,   173,    -1,   175,    -1,   177,   178,    -1,   180,   181,
9886:      182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
9887:      192,   193,   194,   195,   196,   197,    -1,   199,   200,   201,
9888:      202,   203,   204,   205,   206,   207,    -1,   209,    -1,   211,
9889:      212,   213,   214,   215,   216,   217,   218,   219,   220,    -1,
9890:       -1,   223,   224,   225,   226,    -1,   228,   229,   230,   231,
9891:      232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
9892:      242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
9893:      252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
9894:      262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
9895:      272,   273,   274,   275,    -1,   277,   278,    -1,    -1,   281,
9896:      282,   283,    -1,    -1,   286,   287,   288,   289,   290,   291,
9897:      292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
9898:       -1,   303,   304,   305,   306,   307,   308,   309,   310,   311,
9899:       -1,   313,   314,   315,   316,   317,   318,   319,   320,   321,
9900:      322,   323,   324,   325,   326,    -1,   328,   329,   330,   331,
9901:      332,   333,   334,   335,   336,   337,   338,   339,    -1,   341,
9902:      342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
9903:      352,   353,   354,   355,   356,   357,   358,    -1,   360,   361,
9904:      362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
9905:      372,   373,   374,   375,    -1,   377,   378,   379,   380,   381,
9906:      382,   383,   384,   385,   386,   387,   388,   389,   390,    -1,
9907:      392,   393,    -1,   395,   396,   397,   398,   399,   400,   401,
9908:       -1,   403,   404,    -1,    -1,   407,   408,   409,   410,   411,
9909:      412,   413,   414,   415,   416,   417,   418,   419,   420,    -1,
9910:       -1,   423,   424,   425,   426,   427,   428,    -1,   430,   431,
9911:      432,   433,   434,   435,   436,    -1,   438,   439,   440,   441,
9912:      442,   443,    -1,    -1,   446,    -1,    -1,   449,   450,   451,
9913:      452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
9914:      462,   463,   464,   465,   466,   467,   468,   469,   470,    -1,
9915:       -1,    -1,    -1,    -1,    -1,   477,   478,    -1,    -1,    -1,
9916:       -1,    -1,   484,    -1,   486,    -1,    -1,    -1,    -1,   491,
9917:       -1,   493,   494,     3,     4,     5,     6,     7,     8,     9,
9918:       10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,
9919:       20,    21,    22,    23,    24,    25,    26,    -1,    28,    29,
9920:       30,    -1,    -1,    -1,    -1,    35,    -1,    -1,    38,    39,
9921:       -1,    41,    42,    43,    44,    45,    46,    47,    48,    49,
9922:       50,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
9923:       60,    61,    62,    63,    64,    65,    66,    -1,    68,    69,
9924:       70,    71,    72,    -1,    74,    -1,    76,    77,    78,    79,
9925:       80,    81,    82,    83,    84,    -1,    86,    87,    88,    89,
9926:       90,    91,    -1,    93,    94,    95,    96,    97,    98,    99,
9927:      100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
9928:      110,   111,   112,   113,   114,   115,    -1,   117,   118,   119,
9929:      120,   121,   122,    -1,   124,   125,   126,   127,   128,    -1,
9930:       -1,   131,   132,   133,   134,   135,    -1,   137,   138,   139,
9931:       -1,   141,   142,   143,    -1,   145,   146,   147,   148,   149,
9932:      150,   151,   152,   153,   154,   155,   156,    -1,   158,   159,
9933:      160,   161,    -1,   163,    -1,   165,   166,    -1,   168,   169,
9934:      170,   171,   172,   173,    -1,   175,    -1,   177,   178,    -1,
9935:      180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
9936:      190,    -1,   192,   193,   194,   195,   196,   197,    -1,   199,
9937:      200,   201,   202,   203,   204,   205,   206,   207,    -1,   209,
9938:       -1,   211,   212,   213,   214,   215,   216,   217,   218,   219,
9939:      220,    -1,    -1,   223,   224,   225,   226,    -1,   228,   229,
9940:      230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
9941:      240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
9942:      250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
9943:      260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
9944:      270,   271,   272,   273,   274,   275,    -1,   277,   278,    -1,
9945:       -1,   281,   282,   283,    -1,    -1,   286,   287,   288,   289,
9946:      290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
9947:      300,   301,    -1,   303,   304,   305,   306,   307,   308,   309,
9948:      310,   311,    -1,   313,   314,   315,   316,   317,   318,   319,
9949:      320,   321,   322,   323,   324,   325,   326,    -1,   328,   329,
9950:      330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
9951:       -1,   341,   342,   343,   344,   345,   346,   347,   348,   349,
9952:      350,   351,   352,   353,   354,   355,   356,   357,   358,    -1,
9953:      360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
9954:      370,   371,   372,   373,   374,   375,    -1,   377,   378,   379,
9955:      380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
9956:      390,    -1,   392,   393,    -1,   395,   396,   397,   398,   399,
9957:      400,   401,    -1,   403,   404,    -1,    -1,   407,   408,   409,
9958:      410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
9959:      420,    -1,    -1,   423,   424,   425,   426,   427,   428,    -1,
9960:      430,   431,   432,   433,   434,   435,   436,    -1,   438,   439,
9961:      440,   441,   442,   443,    -1,    -1,   446,    -1,    -1,   449,
9962:      450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
9963:      460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
9964:      470,    -1,    -1,    -1,    -1,    -1,    -1,   477,   478,    -1,
9965:       -1,    -1,    -1,    -1,   484,    -1,   486,    -1,    -1,    -1,
9966:       -1,   491,    -1,   493,   494,     3,     4,     5,     6,     7,
9967:        8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9968:       -1,    19,    20,    21,    22,    23,    24,    25,    26,    -1,
9969:       28,    29,    30,    -1,    -1,    -1,    -1,    35,    -1,    -1,
9970:       38,    39,    -1,    41,    42,    43,    44,    45,    46,    47,
9971:       48,    49,    50,    51,    52,    -1,    54,    55,    56,    57,
9972:       58,    59,    60,    61,    62,    63,    64,    65,    66,    -1,
9973:       68,    69,    70,    71,    72,    -1,    74,    -1,    76,    77,
9974:       78,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
9975:       88,    89,    90,    91,    -1,    93,    94,    95,    96,    97,
9976:       98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
9977:      108,   109,   110,   111,   112,   113,   114,   115,    -1,   117,
9978:      118,   119,   120,   121,   122,    -1,   124,   125,   126,   127,
9979:      128,    -1,    -1,   131,   132,   133,   134,   135,    -1,   137,
9980:      138,   139,    -1,   141,   142,   143,    -1,   145,   146,   147,
9981:      148,   149,   150,   151,   152,   153,   154,   155,   156,    -1,
9982:      158,   159,   160,   161,    -1,   163,    -1,   165,   166,    -1,
9983:      168,   169,   170,   171,   172,   173,    -1,   175,    -1,   177,
9984:      178,    -1,   180,   181,   182,   183,   184,   185,   186,   187,
9985:      188,   189,   190,    -1,   192,   193,   194,   195,   196,   197,
9986:       -1,   199,   200,   201,   202,   203,   204,   205,   206,   207,
9987:       -1,   209,    -1,   211,   212,   213,   214,   215,   216,   217,
9988:      218,   219,   220,    -1,    -1,   223,   224,   225,   226,    -1,
9989:      228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
9990:      238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
9991:      248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
9992:      258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
9993:      268,   269,   270,   271,   272,   273,   274,   275,    -1,   277,
9994:      278,    -1,    -1,   281,   282,   283,    -1,    -1,   286,   287,
9995:      288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
9996:      298,   299,   300,   301,    -1,   303,   304,   305,   306,   307,
9997:      308,   309,   310,   311,    -1,   313,   314,   315,   316,   317,
9998:      318,   319,   320,   321,   322,   323,   324,   325,   326,    -1,
9999:      328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
10000:      338,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
10001:      348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
10002:      358,    -1,   360,   361,   362,   363,   364,   365,   366,   367,
10003:      368,   369,   370,   371,   372,   373,   374,   375,    -1,   377,
10004:      378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
10005:      388,   389,   390,    -1,   392,   393,    -1,   395,   396,   397,
10006:      398,   399,   400,   401,    -1,   403,   404,    -1,    -1,   407,
10007:      408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
10008:      418,   419,   420,    -1,    -1,   423,   424,   425,   426,   427,
10009:      428,    -1,   430,   431,   432,   433,   434,   435,   436,    -1,
10010:      438,   439,   440,   441,   442,   443,    -1,    -1,   446,    -1,
10011:       -1,   449,   450,   451,   452,   453,   454,   455,   456,   457,
10012:      458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
10013:      468,   469,   470,    -1,    -1,    -1,    -1,    -1,    -1,   477,
10014:      478,    -1,    -1,    -1,    -1,    -1,   484,    -1,   486,    -1,
10015:       -1,    -1,    -1,   491,    -1,   493,   494,     3,     4,     5,
10016:        6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
10017:       -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
10018:       26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,    35,
10019:       -1,    -1,    38,    39,    -1,    41,    42,    43,    44,    45,
10020:       46,    47,    48,    49,    50,    51,    52,    -1,    54,    55,
10021:       56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
10022:       66,    -1,    68,    69,    70,    71,    72,    -1,    74,    -1,
10023:       76,    77,    78,    79,    80,    81,    82,    83,    84,    -1,
10024:       86,    87,    88,    89,    90,    91,    -1,    93,    94,    95,
10025:       96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
10026:      106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
10027:       -1,   117,   118,   119,   120,   121,   122,    -1,   124,   125,
10028:      126,   127,   128,    -1,    -1,   131,   132,   133,   134,   135,
10029:       -1,   137,   138,   139,    -1,   141,   142,   143,    -1,   145,
10030:      146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
10031:      156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
10032:      166,    -1,   168,   169,   170,   171,   172,   173,    -1,   175,
10033:       -1,   177,   178,    -1,   180,   181,   182,   183,   184,   185,
10034:      186,   187,   188,   189,   190,    -1,   192,   193,   194,   195,
10035:      196,   197,    -1,   199,   200,   201,   202,   203,   204,   205,
10036:      206,   207,    -1,   209,    -1,   211,   212,   213,   214,   215,
10037:      216,   217,   218,   219,   220,    -1,    -1,   223,   224,   225,
10038:      226,    -1,   228,   229,   230,   231,   232,   233,   234,   235,
10039:      236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
10040:      246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
10041:      256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
10042:      266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
10043:       -1,   277,   278,    -1,    -1,   281,   282,   283,    -1,    -1,
10044:      286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
10045:      296,   297,   298,   299,   300,   301,    -1,   303,   304,   305,
10046:      306,   307,   308,   309,   310,   311,    -1,   313,   314,   315,
10047:      316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
10048:      326,    -1,   328,   329,   330,   331,   332,   333,   334,   335,
10049:      336,   337,   338,   339,    -1,   341,   342,   343,   344,   345,
10050:      346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
10051:      356,   357,   358,    -1,   360,   361,   362,   363,   364,   365,
10052:      366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
10053:       -1,   377,   378,   379,   380,   381,   382,   383,   384,   385,
10054:      386,   387,   388,   389,   390,    -1,   392,   393,    -1,   395,
10055:      396,   397,   398,   399,   400,   401,    -1,   403,   404,    -1,
10056:       -1,   407,   408,   409,   410,   411,   412,   413,   414,   415,
10057:      416,   417,   418,   419,   420,    -1,    -1,   423,   424,   425,
10058:      426,   427,   428,    -1,   430,   431,   432,   433,   434,   435,
10059:      436,    -1,   438,   439,   440,   441,   442,   443,    -1,    -1,
10060:      446,    -1,    -1,   449,   450,   451,   452,   453,   454,   455,
10061:      456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
10062:      466,   467,   468,   469,   470,    -1,    -1,    -1,    -1,    -1,
10063:       -1,   477,   478,    -1,    -1,    -1,    -1,    -1,   484,    -1,
10064:      486,    -1,    -1,    -1,    -1,   491,    -1,   493,   494,     3,
10065:        4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
10066:       -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,
10067:       24,    25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,
10068:       -1,    35,    -1,    -1,    38,    39,    -1,    41,    42,    43,
10069:       44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
10070:       54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
10071:       64,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
10072:       74,    -1,    76,    77,    78,    79,    80,    81,    82,    83,
10073:       84,    -1,    86,    87,    88,    89,    90,    91,    -1,    93,
10074:       94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
10075:      104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
10076:      114,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
10077:      124,   125,   126,   127,   128,    -1,    -1,   131,   132,   133,
10078:      134,   135,    -1,   137,   138,   139,    -1,   141,   142,   143,
10079:       -1,   145,   146,   147,   148,   149,   150,   151,   152,   153,
10080:      154,   155,   156,    -1,   158,   159,   160,   161,    -1,   163,
10081:       -1,   165,   166,    -1,   168,   169,   170,   171,   172,   173,
10082:       -1,   175,    -1,   177,   178,    -1,   180,   181,   182,   183,
10083:      184,   185,   186,   187,   188,   189,   190,    -1,   192,   193,
10084:      194,   195,   196,   197,    -1,   199,   200,   201,   202,   203,
10085:      204,   205,   206,   207,    -1,   209,    -1,   211,   212,   213,
10086:      214,   215,   216,   217,   218,   219,   220,    -1,    -1,   223,
10087:      224,   225,   226,    -1,   228,   229,   230,   231,   232,   233,
10088:      234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
10089:      244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
10090:      254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
10091:      264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
10092:      274,   275,    -1,   277,   278,    -1,    -1,   281,   282,   283,
10093:       -1,    -1,   286,   287,   288,   289,   290,   291,   292,   293,
10094:      294,   295,   296,   297,   298,   299,   300,   301,    -1,   303,
10095:      304,   305,   306,   307,   308,   309,   310,   311,    -1,   313,
10096:      314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
10097:      324,   325,   326,    -1,   328,   329,   330,   331,   332,   333,
10098:      334,   335,   336,   337,   338,   339,    -1,   341,   342,   343,
10099:      344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
10100:      354,   355,   356,   357,   358,    -1,   360,   361,   362,   363,
10101:      364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
10102:      374,   375,    -1,   377,   378,   379,   380,   381,   382,   383,
10103:      384,   385,   386,   387,   388,   389,   390,    -1,   392,   393,
10104:       -1,   395,   396,   397,   398,   399,   400,   401,    -1,   403,
10105:      404,    -1,    -1,   407,   408,   409,   410,   411,   412,   413,
10106:      414,   415,   416,   417,   418,   419,   420,    -1,    -1,   423,
10107:      424,   425,   426,   427,   428,    -1,   430,   431,   432,   433,
10108:      434,   435,   436,    -1,   438,   439,   440,   441,   442,   443,
10109:       -1,    -1,   446,    -1,    -1,   449,   450,   451,   452,   453,
10110:      454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
10111:      464,   465,   466,   467,   468,   469,   470,    -1,    -1,    -1,
10112:       -1,    -1,    -1,   477,   478,    -1,    -1,    -1,    -1,    -1,
10113:      484,    -1,   486,    -1,    -1,    -1,    -1,   491,    -1,   493,
10114:      494,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
10115:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,
10116:       22,    23,    24,    25,    26,    -1,    28,    29,    30,    -1,
10117:       -1,    -1,    -1,    35,    -1,    -1,    38,    39,    -1,    41,
10118:       42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
10119:       52,    -1,    54,    55,    56,    57,    58,    59,    60,    61,
10120:       62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
10121:       72,    -1,    74,    -1,    76,    77,    78,    79,    80,    81,
10122:       82,    83,    84,    -1,    86,    87,    88,    89,    90,    91,
10123:       -1,    93,    94,    95,    96,    97,    98,    99,   100,   101,
10124:      102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
10125:      112,   113,   114,   115,    -1,   117,   118,   119,   120,   121,
10126:      122,    -1,   124,   125,   126,   127,   128,    -1,    -1,   131,
10127:      132,   133,   134,   135,    -1,   137,   138,   139,    -1,   141,
10128:      142,   143,    -1,   145,   146,   147,   148,   149,   150,   151,
10129:      152,   153,   154,   155,   156,    -1,   158,   159,   160,   161,
10130:       -1,   163,    -1,   165,   166,    -1,   168,   169,   170,   171,
10131:      172,   173,    -1,   175,    -1,   177,   178,    -1,   180,   181,
10132:      182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
10133:      192,   193,   194,   195,   196,   197,    -1,   199,   200,   201,
10134:      202,   203,   204,   205,   206,   207,    -1,   209,    -1,   211,
10135:      212,   213,   214,   215,   216,   217,   218,   219,   220,    -1,
10136:       -1,   223,   224,   225,   226,    -1,   228,   229,   230,   231,
10137:      232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
10138:      242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
10139:      252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
10140:      262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
10141:      272,   273,   274,   275,    -1,   277,   278,    -1,    -1,   281,
10142:      282,   283,    -1,    -1,   286,   287,   288,   289,   290,   291,
10143:      292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
10144:       -1,   303,   304,   305,   306,   307,   308,   309,   310,   311,
10145:       -1,   313,   314,   315,   316,   317,   318,   319,   320,   321,
10146:      322,   323,   324,   325,   326,    -1,   328,   329,   330,   331,
10147:      332,   333,   334,   335,   336,   337,   338,   339,    -1,   341,
10148:      342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
10149:      352,   353,   354,   355,   356,   357,   358,    -1,   360,   361,
10150:      362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
10151:      372,   373,   374,   375,    -1,   377,   378,   379,   380,   381,
10152:      382,   383,   384,   385,   386,   387,   388,   389,   390,    -1,
10153:      392,   393,    -1,   395,   396,   397,   398,   399,   400,   401,
10154:       -1,   403,   404,    -1,    -1,   407,   408,   409,   410,   411,
10155:      412,   413,   414,   415,   416,   417,   418,   419,   420,    -1,
10156:       -1,   423,   424,   425,   426,   427,   428,    -1,   430,   431,
10157:      432,   433,   434,   435,   436,    -1,   438,   439,   440,   441,
10158:      442,   443,    -1,    -1,   446,    -1,    -1,   449,   450,   451,
10159:      452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
10160:      462,   463,   464,   465,   466,   467,   468,   469,   470,    -1,
10161:       -1,    -1,    -1,    -1,    -1,   477,   478,    -1,    -1,    -1,
10162:       -1,    -1,   484,    -1,   486,    -1,    -1,    -1,    -1,   491,
10163:       -1,   493,   494,     3,     4,     5,     6,     7,     8,     9,
10164:       10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,
10165:       20,    21,    22,    23,    24,    25,    26,    -1,    28,    29,
10166:       30,    -1,    -1,    -1,    -1,    35,    -1,    -1,    38,    39,
10167:       -1,    41,    42,    43,    44,    45,    46,    47,    48,    49,
10168:       50,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
10169:       60,    61,    62,    63,    64,    65,    66,    -1,    68,    69,
10170:       70,    71,    72,    -1,    74,    -1,    76,    77,    78,    79,
10171:       80,    81,    82,    83,    84,    -1,    86,    87,    88,    89,
10172:       90,    91,    -1,    93,    94,    95,    96,    97,    98,    99,
10173:      100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
10174:      110,   111,   112,   113,   114,   115,    -1,   117,   118,   119,
10175:      120,   121,   122,    -1,   124,   125,   126,   127,   128,    -1,
10176:       -1,   131,   132,   133,   134,   135,    -1,   137,   138,   139,
10177:       -1,   141,   142,   143,    -1,   145,   146,   147,   148,   149,
10178:      150,   151,   152,   153,   154,   155,   156,    -1,   158,   159,
10179:      160,   161,    -1,   163,    -1,   165,   166,    -1,   168,   169,
10180:      170,   171,   172,   173,    -1,   175,    -1,   177,   178,    -1,
10181:      180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
10182:      190,    -1,   192,   193,   194,   195,   196,   197,    -1,   199,
10183:      200,   201,   202,   203,   204,   205,   206,   207,    -1,   209,
10184:       -1,   211,    -1,    -1,   214,   215,   216,   217,   218,   219,
10185:      220,    -1,    -1,   223,   224,   225,   226,    -1,   228,   229,
10186:      230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
10187:      240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
10188:      250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
10189:      260,   261,   262,   263,    -1,   265,   266,    -1,   268,   269,
10190:      270,   271,   272,   273,   274,   275,    -1,   277,   278,    -1,
10191:       -1,   281,   282,   283,    -1,    -1,   286,   287,   288,   289,
10192:      290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
10193:      300,   301,    -1,   303,   304,   305,   306,   307,   308,   309,
10194:      310,   311,    -1,   313,   314,   315,   316,   317,   318,   319,
10195:      320,   321,   322,   323,   324,   325,   326,    -1,   328,   329,
10196:      330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
10197:       -1,   341,   342,   343,   344,   345,   346,   347,   348,   349,
10198:      350,   351,   352,   353,   354,   355,   356,   357,   358,    -1,
10199:      360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
10200:      370,   371,   372,   373,   374,   375,    -1,   377,   378,   379,
10201:      380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
10202:      390,    -1,   392,   393,    -1,   395,   396,   397,   398,   399,
10203:      400,   401,    -1,   403,   404,    -1,    -1,   407,   408,   409,
10204:      410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
10205:      420,    -1,    -1,   423,   424,   425,   426,   427,   428,    -1,
10206:      430,   431,   432,   433,   434,   435,   436,    -1,   438,   439,
10207:      440,   441,   442,   443,    -1,    -1,   446,    -1,    -1,   449,
10208:      450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
10209:      460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
10210:      470,    -1,    -1,    -1,    -1,    -1,    -1,   477,   478,    -1,
10211:       -1,    -1,    -1,    -1,   484,    -1,   486,    -1,    -1,    -1,
10212:       -1,   491,    -1,   493,   494,     3,     4,     5,     6,     7,
10213:        8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
10214:       -1,    19,    20,    21,    22,    23,    24,    25,    26,    -1,
10215:       28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
10216:       38,    39,    -1,    41,    42,    43,    44,    45,    46,    47,
10217:       48,    49,    50,    51,    52,    -1,    54,    55,    56,    57,
10218:       58,    59,    60,    61,    62,    63,    64,    65,    66,    -1,
10219:       68,    69,    70,    71,    72,    -1,    74,    -1,    76,    77,
10220:       78,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
10221:       88,    89,    90,    91,    -1,    93,    94,    95,    96,    97,
10222:       98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
10223:      108,   109,   110,   111,   112,   113,    -1,   115,    -1,   117,
10224:      118,   119,   120,   121,   122,    -1,   124,   125,   126,   127,
10225:      128,    -1,    -1,   131,   132,   133,   134,   135,    -1,   137,
10226:      138,   139,    -1,   141,   142,   143,    -1,   145,   146,   147,
10227:      148,   149,   150,   151,   152,   153,   154,   155,   156,    -1,
10228:      158,   159,   160,   161,    -1,   163,    -1,   165,   166,    -1,
10229:      168,   169,   170,   171,   172,   173,    -1,   175,    -1,   177,
10230:      178,    -1,   180,   181,   182,   183,   184,   185,   186,   187,
10231:      188,   189,   190,    -1,   192,   193,   194,   195,   196,   197,
10232:       -1,   199,   200,   201,   202,   203,   204,   205,   206,   207,
10233:       -1,   209,    -1,   211,   212,   213,   214,   215,   216,   217,
10234:      218,   219,   220,    -1,    -1,   223,   224,   225,   226,    -1,
10235:      228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
10236:      238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
10237:      248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
10238:      258,   259,   260,   261,   262,   263,    -1,   265,   266,   267,
10239:      268,   269,   270,   271,   272,   273,   274,   275,    -1,   277,
10240:      278,    -1,    -1,   281,   282,   283,    -1,    -1,   286,   287,
10241:      288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
10242:      298,   299,   300,   301,    -1,   303,   304,   305,   306,   307,
10243:      308,   309,   310,   311,    -1,   313,   314,   315,   316,   317,
10244:      318,   319,   320,   321,   322,   323,   324,   325,   326,    -1,
10245:      328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
10246:      338,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
10247:      348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
10248:      358,    -1,   360,   361,   362,   363,   364,   365,   366,   367,
10249:      368,   369,   370,   371,   372,   373,   374,   375,    -1,   377,
10250:      378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
10251:      388,   389,   390,    -1,   392,   393,    -1,   395,   396,   397,
10252:      398,   399,   400,   401,    -1,   403,   404,    -1,    -1,   407,
10253:      408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
10254:      418,   419,   420,    -1,    -1,   423,   424,   425,   426,   427,
10255:      428,    -1,   430,   431,   432,   433,   434,   435,   436,    -1,
10256:      438,   439,   440,   441,   442,   443,    -1,    -1,   446,    -1,
10257:       -1,   449,   450,   451,   452,   453,   454,   455,   456,   457,
10258:      458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
10259:      468,   469,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   477,
10260:      478,    -1,    -1,     3,     4,     5,     6,     7,   486,     9,
10261:       10,    -1,    -1,    -1,    -1,   493,   494,    -1,    -1,    19,
10262:       20,    21,    22,    23,    24,    25,    26,    -1,    28,    29,
10263:       30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,
10264:       -1,    41,    42,    43,    44,    45,    46,    47,    48,    49,
10265:       50,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
10266:       60,    61,    62,    63,    64,    65,    66,    -1,    68,    69,
10267:       70,    71,    72,    -1,    74,    -1,    76,    77,    78,    79,
10268:       80,    81,    82,    83,    84,    -1,    86,    87,    88,    89,
10269:       90,    91,    -1,    93,    94,    95,    96,    97,    98,    99,
10270:      100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
10271:      110,   111,   112,   113,    -1,   115,    -1,   117,   118,   119,
10272:      120,   121,   122,    -1,   124,   125,   126,   127,   128,    -1,
10273:       -1,   131,   132,   133,   134,   135,    -1,   137,   138,   139,
10274:       -1,   141,   142,   143,    -1,   145,   146,   147,   148,   149,
10275:      150,   151,   152,   153,   154,   155,   156,    -1,   158,   159,
10276:      160,   161,    -1,   163,    -1,   165,   166,    -1,   168,   169,
10277:      170,   171,   172,   173,    -1,   175,    -1,   177,   178,    -1,
10278:      180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
10279:      190,    -1,   192,   193,   194,   195,   196,   197,    -1,   199,
10280:      200,   201,   202,   203,   204,   205,   206,   207,    -1,   209,
10281:       -1,   211,   212,   213,   214,   215,   216,   217,   218,   219,
10282:      220,    -1,    -1,   223,   224,   225,   226,    -1,   228,   229,
10283:      230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
10284:      240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
10285:      250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
10286:      260,   261,   262,   263,    -1,   265,   266,   267,   268,   269,
10287:      270,   271,   272,   273,   274,   275,    -1,   277,   278,    -1,
10288:       -1,   281,   282,   283,    -1,    -1,   286,   287,   288,   289,
10289:      290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
10290:      300,   301,    -1,   303,   304,   305,   306,   307,   308,   309,
10291:      310,   311,    -1,   313,   314,   315,   316,   317,   318,   319,
10292:      320,   321,   322,   323,   324,   325,   326,    -1,   328,   329,
10293:      330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
10294:       -1,   341,   342,   343,   344,   345,   346,   347,   348,   349,
10295:      350,   351,   352,   353,   354,   355,   356,   357,   358,    -1,
10296:      360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
10297:      370,   371,   372,   373,   374,   375,    -1,   377,   378,   379,
10298:      380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
10299:      390,    -1,   392,   393,    -1,   395,   396,   397,   398,   399,
10300:      400,   401,    -1,   403,   404,    -1,    -1,   407,   408,   409,
10301:      410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
10302:      420,    -1,    -1,   423,   424,   425,   426,   427,   428,    -1,
10303:      430,   431,   432,   433,   434,   435,   436,    -1,   438,   439,
10304:      440,   441,   442,   443,    -1,    -1,   446,    -1,    -1,   449,
10305:      450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
10306:      460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
10307:       -1,    -1,    -1,    -1,    -1,    -1,    -1,   477,   478,    -1,
10308:       -1,    -1,    -1,    -1,    -1,    -1,   486,    -1,    -1,    -1,
10309:       -1,    -1,    -1,   493,   494,     3,     4,     5,     6,     7,
10310:        8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
10311:       -1,    19,    20,    21,    22,    23,    24,    25,    26,    -1,
10312:       28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
10313:       38,    39,    -1,    41,    42,    43,    44,    45,    46,    47,
10314:       48,    49,    50,    51,    52,    -1,    54,    55,    56,    57,
10315:       58,    59,    60,    61,    62,    63,    64,    65,    66,    -1,
10316:       68,    69,    70,    71,    72,    -1,    74,    -1,    76,    77,
10317:       78,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
10318:       88,    89,    90,    91,    -1,    93,    94,    95,    96,    97,
10319:       98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
10320:      108,   109,   110,   111,   112,   113,    -1,   115,    -1,   117,
10321:      118,   119,   120,   121,   122,    -1,   124,   125,   126,   127,
10322:      128,    -1,    -1,   131,   132,   133,   134,   135,    -1,   137,
10323:      138,   139,    -1,   141,   142,   143,    -1,   145,   146,   147,
10324:      148,   149,   150,   151,   152,   153,   154,   155,   156,    -1,
10325:      158,   159,   160,   161,    -1,   163,    -1,   165,   166,    -1,
10326:      168,   169,   170,   171,   172,   173,    -1,   175,    -1,   177,
10327:      178,    -1,   180,   181,   182,   183,   184,   185,   186,   187,
10328:      188,   189,   190,    -1,   192,   193,   194,   195,   196,   197,
10329:       -1,   199,   200,   201,   202,   203,   204,   205,   206,   207,
10330:       -1,   209,    -1,   211,    -1,   213,   214,   215,   216,   217,
10331:      218,   219,   220,    -1,    -1,   223,   224,   225,   226,    -1,
10332:      228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
10333:      238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
10334:      248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
10335:      258,   259,   260,   261,   262,   263,    -1,   265,   266,   267,
10336:      268,   269,   270,   271,   272,   273,   274,   275,    -1,   277,
10337:      278,    -1,    -1,   281,   282,   283,    -1,    -1,   286,   287,
10338:      288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
10339:      298,   299,   300,   301,    -1,   303,   304,   305,   306,   307,
10340:      308,   309,   310,   311,    -1,   313,   314,   315,   316,   317,
10341:      318,   319,   320,   321,   322,   323,   324,   325,   326,    -1,
10342:      328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
10343:      338,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
10344:      348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
10345:      358,    -1,   360,   361,   362,   363,   364,   365,   366,   367,
10346:      368,   369,   370,   371,   372,   373,   374,   375,    -1,   377,
10347:      378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
10348:      388,   389,   390,    -1,   392,   393,    -1,   395,   396,   397,
10349:      398,   399,   400,   401,    -1,   403,   404,    -1,    -1,   407,
10350:      408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
10351:      418,   419,   420,    -1,    -1,   423,   424,   425,   426,   427,
10352:      428,    -1,   430,   431,   432,   433,   434,   435,   436,    -1,
10353:      438,   439,   440,   441,   442,   443,    -1,    -1,   446,    -1,
10354:       -1,   449,   450,   451,   452,   453,   454,   455,   456,   457,
10355:      458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
10356:      468,   469,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   477,
10357:      478,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   486,    -1,
10358:       -1,    -1,    -1,    -1,    -1,   493,   494,     3,     4,     5,
10359:        6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
10360:       -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
10361:       26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,    35,
10362:       -1,    -1,    38,    39,    -1,    41,    42,    43,    44,    45,
10363:       46,    47,    -1,    49,    50,    51,    52,    -1,    54,    55,
10364:       56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
10365:       66,    -1,    68,    69,    70,    71,    72,    -1,    74,    -1,
10366:       76,    77,    78,    79,    80,    81,    82,    83,    84,    -1,
10367:       86,    87,    88,    89,    90,    91,    -1,    93,    94,    95,
10368:       96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
10369:      106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
10370:       -1,   117,   118,   119,   120,   121,   122,    -1,   124,   125,
10371:      126,   127,   128,    -1,    -1,   131,   132,   133,   134,   135,
10372:       -1,   137,   138,   139,    -1,   141,    -1,   143,    -1,   145,
10373:      146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
10374:      156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
10375:      166,    -1,   168,   169,   170,   171,    -1,   173,    -1,   175,
10376:       -1,   177,   178,    -1,   180,   181,   182,   183,   184,   185,
10377:       -1,   187,   188,   189,   190,    -1,   192,   193,   194,   195,
10378:      196,   197,    -1,   199,   200,   201,   202,   203,   204,   205,
10379:      206,   207,    -1,   209,    -1,   211,    -1,    -1,   214,   215,
10380:      216,   217,   218,   219,   220,    -1,    -1,   223,   224,   225,
10381:       -1,    -1,   228,   229,   230,   231,   232,   233,   234,   235,
10382:      236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
10383:      246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
10384:      256,   257,   258,   259,   260,   261,   262,   263,    -1,   265,
10385:      266,    -1,   268,   269,   270,   271,   272,   273,   274,   275,
10386:       -1,   277,   278,    -1,    -1,   281,   282,   283,    -1,    -1,
10387:      286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
10388:      296,   297,   298,   299,   300,   301,    -1,   303,   304,   305,
10389:      306,   307,   308,   309,   310,   311,    -1,   313,   314,   315,
10390:      316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
10391:      326,    -1,   328,   329,   330,   331,   332,   333,   334,   335,
10392:      336,   337,   338,   339,    -1,   341,   342,   343,   344,   345,
10393:      346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
10394:      356,   357,   358,    -1,   360,   361,   362,   363,   364,   365,
10395:      366,   367,   368,   369,   370,    -1,   372,   373,   374,   375,
10396:       -1,   377,   378,   379,   380,   381,   382,   383,   384,   385,
10397:      386,   387,   388,   389,   390,    -1,   392,   393,    -1,   395,
10398:      396,   397,   398,   399,   400,   401,    -1,   403,   404,    -1,
10399:       -1,   407,   408,   409,   410,   411,   412,   413,   414,   415,
10400:      416,   417,   418,   419,   420,    -1,    -1,   423,   424,   425,
10401:      426,   427,   428,    -1,   430,   431,   432,   433,   434,   435,
10402:      436,    -1,   438,   439,   440,   441,   442,   443,    -1,    -1,
10403:      446,    -1,    -1,   449,   450,   451,   452,   453,   454,   455,
10404:      456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
10405:      466,   467,   468,   469,    -1,    -1,    -1,    -1,    -1,    -1,
10406:       -1,   477,   478,     3,    -1,    -1,    -1,    -1,   484,    -1,
10407:      486,    -1,    -1,    -1,    -1,   491,    -1,   493,   494,    19,
10408:       20,    21,    22,    23,    24,    25,    26,    -1,    28,    29,
10409:       30,    -1,    -1,    -1,    -1,    -1,    36,    -1,    38,    39,
10410:       -1,    41,    42,    43,    -1,    45,    46,    47,    48,    49,
10411:       -1,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
10412:       -1,    -1,    62,    63,    64,    65,    66,    -1,    68,    69,
10413:       70,    71,    72,    -1,    -1,    -1,    76,    77,    78,    79,
10414:       80,    -1,    82,    83,    84,    -1,    86,    87,    88,    89,
10415:       90,    91,    -1,    93,    94,    95,    96,    -1,    -1,    -1,
10416:       -1,    -1,    -1,    -1,   104,   105,   106,   107,   108,   109,
10417:      110,   111,   112,   113,    -1,   115,    -1,   117,   118,   119,
10418:      120,   121,   122,    -1,   124,   125,   126,   127,   128,    -1,
10419:       -1,   131,   132,   133,   134,   135,    -1,   137,   138,   139,
10420:       -1,   141,   142,   143,    -1,   145,   146,   147,   148,   149,
10421:      150,   151,   152,   153,   154,    -1,   156,    -1,   158,   159,
10422:      160,   161,    -1,   163,    -1,   165,    -1,    -1,   168,   169,
10423:      170,   171,    -1,   173,    -1,   175,    -1,   177,   178,    -1,
10424:      180,   181,   182,   183,   184,   185,    -1,   187,   188,   189,
10425:      190,    -1,   192,   193,   194,   195,   196,   197,    -1,   199,
10426:      200,   201,   202,   203,   204,   205,   206,   207,    -1,   209,
10427:       -1,   211,    -1,    -1,   214,   215,   216,   217,   218,   219,
10428:      220,    -1,    -1,   223,   224,   225,    -1,    -1,   228,   229,
10429:      230,    -1,    -1,   233,   234,   235,   236,   237,   238,   239,
10430:      240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
10431:      250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
10432:      260,   261,   262,   263,    -1,   265,   266,    -1,   268,    -1,
10433:      270,   271,   272,   273,   274,   275,    -1,   277,   278,    -1,
10434:       -1,   281,   282,   283,    -1,    -1,   286,   287,    -1,   289,
10435:       -1,   291,   292,   293,   294,   295,   296,   297,   298,   299,
10436:      300,   301,    -1,   303,   304,   305,   306,   307,   308,   309,
10437:      310,   311,    -1,   313,   314,   315,   316,   317,   318,   319,
10438:      320,   321,   322,   323,   324,   325,   326,    -1,   328,   329,
10439:      330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
10440:       -1,   341,   342,   343,   344,   345,   346,   347,   348,   349,
10441:      350,   351,   352,   353,   354,   355,   356,   357,   358,    -1,
10442:      360,   361,   362,   363,   364,    -1,   366,   367,   368,   369,
10443:      370,    -1,   372,   373,   374,   375,    -1,   377,   378,   379,
10444:      380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
10445:      390,    -1,   392,   393,    -1,   395,   396,   397,   398,   399,
10446:      400,   401,    -1,   403,   404,    -1,    -1,   407,   408,   409,
10447:      410,   411,    -1,   413,   414,   415,   416,   417,   418,   419,
10448:      420,    -1,    -1,   423,   424,   425,   426,   427,    -1,    -1,
10449:      430,   431,   432,   433,   434,   435,   436,    -1,   438,    -1,
10450:      440,   441,   442,   443,    -1,    -1,   446,    -1,    -1,   449,
10451:      450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
10452:      460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
10453:       -1,    -1,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
10454:       -1,    -1,    -1,    -1,    -1,    -1,    -1,   487,    19,    20,
10455:       21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
10456:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,
10457:       41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
10458:       51,    52,    -1,    54,    55,    56,    57,    58,    59,    -1,
10459:       61,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
10460:       71,    72,    -1,    74,    -1,    76,    77,    78,    79,    80,
10461:       81,    82,    83,    84,    -1,    86,    87,    88,    89,    90,
10462:       91,    -1,    93,    94,    95,    96,    97,    98,    99,   100,
10463:      101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
10464:      111,   112,   113,    -1,   115,    -1,   117,   118,   119,   120,
10465:      121,   122,    -1,   124,   125,   126,   127,   128,    -1,    -1,
10466:      131,   132,   133,   134,   135,    -1,   137,   138,   139,    -1,
10467:      141,   142,   143,    -1,   145,   146,   147,   148,   149,   150,
10468:      151,   152,   153,   154,    -1,   156,    -1,   158,   159,   160,
10469:      161,    -1,   163,    -1,   165,   166,    -1,   168,   169,   170,
10470:      171,   172,   173,    -1,   175,    -1,   177,   178,    -1,   180,
10471:      181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
10472:       -1,   192,   193,   194,   195,   196,   197,    -1,   199,   200,
10473:      201,   202,   203,   204,   205,   206,   207,    -1,   209,    -1,
10474:      211,   212,   213,   214,   215,   216,   217,   218,   219,   220,
10475:      221,    -1,   223,   224,   225,   226,    -1,   228,   229,   230,
10476:      231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
10477:      241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
10478:      251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
10479:      261,   262,   263,    -1,   265,   266,   267,   268,    -1,   270,
10480:      271,   272,   273,   274,   275,    -1,   277,   278,    -1,   280,
10481:      281,   282,   283,    -1,    -1,   286,   287,   288,   289,   290,
10482:      291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
10483:      301,    -1,   303,   304,   305,   306,   307,   308,   309,   310,
10484:      311,    -1,   313,   314,   315,   316,   317,   318,   319,   320,
10485:      321,   322,   323,   324,   325,   326,    -1,   328,   329,   330,
10486:      331,   332,   333,   334,   335,   336,   337,   338,   339,    -1,
10487:      341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
10488:      351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
10489:      361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
10490:      371,   372,   373,   374,   375,    -1,   377,   378,   379,   380,
10491:      381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
10492:       -1,   392,   393,   394,   395,   396,   397,   398,   399,   400,
10493:      401,    -1,   403,   404,    -1,    -1,   407,   408,   409,   410,
10494:      411,    -1,   413,   414,   415,   416,   417,   418,   419,   420,
10495:       -1,    -1,   423,   424,   425,   426,   427,   428,    -1,   430,
10496:      431,   432,   433,   434,   435,   436,    -1,   438,   439,   440,
10497:      441,   442,   443,    -1,    -1,   446,    -1,   448,   449,   450,
10498:      451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
10499:      461,   462,   463,   464,   465,   466,   467,   468,   469,    -1,
10500:        3,   472,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
10501:       -1,    -1,    -1,    -1,    -1,   486,    19,    20,    21,    22,
10502:       23,    24,    25,    26,    -1,    28,    29,    30,    -1,    -1,
10503:       -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,
10504:       43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
10505:       -1,    54,    55,    56,    57,    58,    59,    -1,    61,    62,
10506:       63,    64,    65,    66,    -1,    68,    69,    70,    71,    72,
10507:       -1,    74,    -1,    76,    77,    78,    79,    80,    81,    82,
10508:       83,    84,    -1,    86,    87,    88,    89,    90,    91,    -1,
10509:       93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
10510:      103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
10511:      113,    -1,   115,    -1,   117,   118,   119,   120,   121,   122,
10512:       -1,   124,   125,   126,   127,   128,    -1,    -1,   131,   132,
10513:      133,   134,   135,    -1,   137,   138,   139,    -1,   141,   142,
10514:      143,    -1,   145,   146,   147,   148,   149,   150,   151,   152,
10515:      153,   154,    -1,   156,    -1,   158,   159,   160,   161,    -1,
10516:      163,    -1,   165,   166,    -1,   168,   169,   170,   171,   172,
10517:      173,    -1,   175,    -1,   177,   178,    -1,   180,   181,   182,
10518:      183,   184,   185,   186,   187,   188,   189,   190,    -1,   192,
10519:      193,   194,   195,   196,   197,    -1,   199,   200,   201,   202,
10520:      203,   204,   205,   206,   207,    -1,   209,    -1,   211,   212,
10521:      213,   214,   215,   216,   217,   218,   219,   220,   221,    -1,
10522:      223,   224,   225,   226,    -1,   228,   229,   230,   231,   232,
10523:      233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
10524:      243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
10525:      253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
10526:      263,    -1,   265,   266,   267,   268,    -1,   270,   271,   272,
10527:      273,   274,   275,    -1,   277,   278,    -1,   280,   281,   282,
10528:      283,    -1,    -1,   286,   287,   288,   289,   290,   291,   292,
10529:      293,   294,   295,   296,   297,   298,   299,   300,   301,    -1,
10530:      303,   304,   305,   306,   307,   308,   309,   310,   311,    -1,
10531:      313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
10532:      323,   324,   325,   326,    -1,   328,   329,   330,   331,   332,
10533:      333,   334,   335,   336,   337,   338,   339,    -1,   341,   342,
10534:      343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
10535:      353,   354,   355,   356,   357,   358,    -1,   360,   361,   362,
10536:      363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
10537:      373,   374,   375,    -1,   377,   378,   379,   380,   381,   382,
10538:      383,   384,   385,   386,   387,   388,   389,   390,    -1,   392,
10539:      393,    -1,   395,   396,   397,   398,   399,   400,   401,    -1,
10540:      403,   404,    -1,    -1,   407,   408,   409,   410,   411,    -1,
10541:      413,   414,   415,   416,   417,   418,   419,   420,    -1,    -1,
10542:      423,   424,   425,   426,   427,   428,    -1,   430,   431,   432,
10543:      433,   434,   435,   436,    -1,   438,   439,   440,   441,   442,
10544:      443,    -1,    -1,   446,    -1,    -1,   449,   450,   451,   452,
10545:      453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
10546:      463,   464,   465,   466,   467,   468,   469,    -1,     3,    -1,
10547:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
10548:       -1,    -1,    -1,   486,    19,    20,    21,    22,    23,    24,
10549:       25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,
10550:       -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,    44,
10551:       45,    46,    47,    48,    49,    50,    51,    52,    -1,    54,
10552:       55,    56,    57,    58,    59,    -1,    61,    62,    63,    64,
10553:       65,    66,    -1,    68,    69,    70,    71,    72,    -1,    74,
10554:       -1,    76,    77,    78,    79,    80,    81,    82,    83,    84,
10555:       -1,    86,    87,    88,    89,    90,    91,    -1,    93,    94,
10556:       95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
10557:      105,   106,   107,   108,   109,   110,   111,   112,   113,    -1,
10558:      115,    -1,   117,   118,   119,   120,   121,   122,    -1,   124,
10559:      125,   126,   127,   128,    -1,    -1,   131,   132,   133,   134,
10560:      135,    -1,   137,   138,   139,    -1,   141,   142,   143,    -1,
10561:      145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
10562:       -1,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,
10563:      165,   166,    -1,   168,   169,   170,   171,   172,   173,    -1,
10564:      175,    -1,   177,   178,    -1,   180,   181,   182,   183,   184,
10565:      185,   186,   187,   188,   189,   190,    -1,   192,   193,   194,
10566:      195,   196,   197,    -1,   199,   200,   201,   202,   203,   204,
10567:      205,   206,   207,    -1,   209,    -1,   211,   212,   213,   214,
10568:      215,   216,   217,   218,   219,   220,    -1,    -1,   223,   224,
10569:      225,   226,    -1,   228,   229,   230,   231,   232,   233,   234,
10570:      235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
10571:      245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
10572:      255,   256,   257,   258,   259,   260,   261,   262,   263,    -1,
10573:      265,   266,   267,   268,    -1,   270,   271,   272,   273,   274,
10574:      275,    -1,   277,   278,    -1,    -1,   281,   282,   283,    -1,
10575:       -1,   286,   287,   288,   289,   290,   291,   292,   293,   294,
10576:      295,   296,   297,   298,   299,   300,   301,    -1,   303,   304,
10577:      305,   306,   307,   308,   309,   310,   311,    -1,   313,   314,
10578:      315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
10579:      325,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
10580:      335,   336,   337,   338,   339,    -1,   341,   342,   343,   344,
10581:      345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
10582:      355,   356,   357,   358,    -1,   360,   361,   362,   363,   364,
10583:      365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
10584:      375,    -1,   377,   378,   379,   380,   381,   382,   383,   384,
10585:      385,   386,   387,   388,   389,   390,    -1,   392,   393,    -1,
10586:      395,   396,   397,   398,   399,   400,   401,    -1,   403,   404,
10587:       -1,    -1,   407,   408,   409,   410,   411,    -1,   413,   414,
10588:      415,   416,   417,   418,   419,   420,    -1,    -1,   423,   424,
10589:      425,   426,   427,   428,    -1,   430,   431,   432,   433,   434,
10590:      435,   436,    -1,   438,   439,   440,   441,   442,   443,    -1,
10591:       -1,   446,    -1,    -1,   449,   450,   451,   452,   453,   454,
10592:      455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
10593:      465,   466,   467,   468,   469,    -1,     3,    -1,    -1,    -1,
10594:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
10595:       -1,   486,    19,    20,    21,    22,    23,    24,    25,    26,
10596:       -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,
10597:       -1,    38,    39,    -1,    41,    42,    43,    44,    45,    46,
10598:       47,    48,    49,    50,    51,    52,    -1,    54,    55,    56,
10599:       57,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
10600:       -1,    68,    69,    70,    71,    72,    -1,    74,    -1,    76,
10601:       77,    78,    79,    80,    81,    82,    83,    84,    -1,    86,
10602:       87,    88,    89,    90,    91,    -1,    93,    94,    95,    96,
10603:       97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
10604:      107,   108,   109,   110,   111,   112,   113,    -1,   115,    -1,
10605:      117,   118,   119,   120,   121,   122,    -1,   124,   125,   126,
10606:      127,   128,    -1,    -1,   131,   132,   133,   134,   135,    -1,
10607:      137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
10608:      147,   148,   149,   150,   151,   152,   153,   154,    -1,   156,
10609:       -1,   158,   159,   160,   161,    -1,   163,    -1,   165,   166,
10610:       -1,   168,   169,   170,   171,   172,   173,    -1,   175,    -1,
10611:      177,   178,    -1,   180,   181,   182,   183,   184,   185,   186,
10612:      187,   188,   189,   190,    -1,   192,   193,   194,   195,   196,
10613:      197,    -1,   199,   200,   201,   202,   203,   204,   205,   206,
10614:      207,    -1,   209,    -1,   211,   212,   213,   214,   215,   216,
10615:      217,   218,   219,   220,    -1,    -1,   223,   224,   225,   226,
10616:       -1,   228,   229,   230,   231,   232,   233,   234,   235,   236,
10617:      237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
10618:      247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
10619:      257,   258,   259,   260,   261,   262,   263,    -1,   265,   266,
10620:      267,   268,    -1,   270,   271,   272,   273,   274,   275,    -1,
10621:      277,   278,    -1,    -1,   281,   282,   283,    -1,    -1,   286,
10622:      287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
10623:      297,   298,   299,   300,   301,    -1,   303,   304,   305,   306,
10624:      307,   308,   309,   310,   311,    -1,   313,   314,   315,   316,
10625:      317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
10626:       -1,   328,   329,   330,   331,   332,   333,   334,   335,   336,
10627:      337,   338,   339,    -1,   341,   342,   343,   344,   345,   346,
10628:      347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
10629:      357,   358,    -1,   360,   361,   362,   363,   364,   365,   366,
10630:      367,   368,   369,   370,   371,   372,   373,   374,   375,    -1,
10631:      377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
10632:      387,   388,   389,   390,    -1,   392,   393,    -1,   395,   396,
10633:      397,   398,   399,   400,   401,    -1,   403,   404,    -1,    -1,
10634:      407,   408,   409,   410,   411,    -1,   413,   414,   415,   416,
10635:      417,   418,   419,   420,    -1,    -1,   423,   424,   425,   426,
10636:      427,   428,    -1,   430,   431,   432,   433,   434,   435,   436,
10637:       -1,   438,   439,   440,   441,   442,   443,    -1,    -1,   446,
10638:       -1,    -1,   449,   450,   451,   452,   453,   454,   455,   456,
10639:      457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
10640:      467,   468,   469,    -1,     3,     4,     5,    -1,    -1,    -1,
10641:        9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   486,
10642:       19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
10643:       29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
10644:       39,    -1,    41,    42,    43,    -1,    45,    46,    47,    48,
10645:       49,    -1,    51,    52,    -1,    54,    55,    56,    57,    58,
10646:       59,    -1,    -1,    62,    63,    64,    65,    66,    -1,    68,
10647:       69,    70,    71,    72,    -1,    -1,    -1,    76,    77,    78,
10648:       79,    80,    -1,    82,    83,    84,    -1,    86,    87,    88,
10649:       89,    90,    91,    -1,    -1,    94,    95,    96,    -1,    -1,
10650:       -1,    -1,    -1,    -1,    -1,   104,   105,   106,   107,   108,
10651:      109,   110,   111,   112,   113,    -1,   115,    -1,   117,   118,
10652:      119,   120,   121,   122,    -1,   124,   125,   126,   127,   128,
10653:       -1,    -1,   131,   132,   133,   134,   135,    -1,   137,   138,
10654:      139,    -1,   141,   142,   143,    -1,   145,   146,   147,   148,
10655:      149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
10656:      159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,
10657:      169,   170,   171,    -1,   173,    -1,   175,    -1,   177,   178,
10658:       -1,   180,   181,   182,   183,   184,   185,    -1,   187,   188,
10659:      189,   190,    -1,   192,   193,   194,   195,   196,   197,    -1,
10660:      199,    -1,   201,   202,   203,   204,   205,   206,   207,    -1,
10661:      209,    -1,   211,    -1,    -1,   214,    -1,   216,   217,   218,
10662:      219,   220,    -1,    -1,   223,    -1,   225,    -1,    -1,   228,
10663:      229,   230,    -1,    -1,   233,   234,   235,   236,   237,   238,
10664:      239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
10665:      249,   250,   251,   252,   253,   254,   255,   256,   257,    -1,
10666:      259,   260,   261,   262,   263,    -1,   265,   266,    -1,   268,
10667:       -1,   270,   271,   272,   273,   274,   275,    -1,   277,   278,
10668:      279,    -1,   281,   282,   283,    -1,    -1,   286,   287,    -1,
10669:      289,    -1,   291,   292,   293,   294,   295,   296,   297,   298,
10670:      299,   300,   301,    -1,   303,   304,   305,   306,   307,   308,
10671:      309,   310,   311,    -1,   313,   314,   315,   316,   317,   318,
10672:      319,   320,   321,   322,   323,   324,   325,   326,    -1,   328,
10673:      329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
10674:      339,    -1,   341,   342,    -1,   344,   345,   346,   347,   348,
10675:      349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
10676:       -1,   360,   361,   362,   363,   364,    -1,   366,   367,   368,
10677:      369,   370,    -1,   372,   373,   374,   375,    -1,   377,   378,
10678:      379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
10679:      389,   390,    -1,   392,   393,    -1,   395,    -1,   397,   398,
10680:      399,   400,   401,    -1,   403,   404,    -1,    -1,   407,   408,
10681:      409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
10682:      419,   420,    -1,    -1,   423,   424,   425,   426,   427,    -1,
10683:       -1,   430,   431,   432,   433,   434,   435,   436,    -1,   438,
10684:       -1,   440,   441,   442,   443,    -1,    -1,   446,    -1,    -1,
10685:      449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
10686:      459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
10687:      469,    -1,     3,    -1,    -1,    -1,    -1,    -1,   477,   478,
10688:      479,    -1,    -1,    -1,    -1,    -1,    -1,   486,    19,    20,
10689:       21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
10690:       31,    32,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,
10691:       41,    42,    43,    -1,    45,    46,    47,    48,    49,    -1,
10692:       51,    52,    -1,    54,    55,    56,    57,    58,    59,    -1,
10693:       -1,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
10694:       71,    72,    -1,    -1,    -1,    76,    77,    78,    79,    80,
10695:       -1,    82,    83,    84,    -1,    86,    87,    88,    89,    90,
10696:       91,    -1,    -1,    94,    95,    96,    -1,    -1,    -1,    -1,
10697:       -1,    -1,    -1,   104,   105,   106,   107,   108,   109,   110,
10698:      111,   112,   113,    -1,   115,    -1,   117,   118,   119,   120,
10699:      121,   122,    -1,   124,   125,   126,   127,   128,    -1,    -1,
10700:      131,   132,   133,   134,   135,    -1,   137,   138,   139,    -1,
10701:      141,   142,   143,    -1,   145,   146,   147,   148,   149,   150,
10702:      151,   152,   153,   154,    -1,   156,    -1,   158,   159,   160,
10703:      161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,
10704:      171,    -1,   173,    -1,   175,    -1,   177,   178,    -1,   180,
10705:      181,   182,   183,   184,   185,    -1,   187,   188,   189,   190,
10706:       -1,   192,   193,   194,   195,   196,   197,    -1,   199,    -1,
10707:      201,   202,   203,   204,   205,   206,   207,    -1,   209,    -1,
10708:      211,    -1,    -1,   214,    -1,   216,   217,   218,   219,   220,
10709:       -1,    -1,   223,    -1,   225,    -1,    -1,   228,   229,   230,
10710:       -1,    -1,   233,   234,   235,   236,   237,   238,   239,   240,
10711:      241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
10712:      251,   252,   253,   254,   255,   256,   257,    -1,   259,   260,
10713:      261,   262,   263,    -1,   265,   266,    -1,   268,    -1,   270,
10714:      271,   272,   273,   274,   275,    -1,   277,   278,    -1,    -1,
10715:      281,   282,   283,    -1,    -1,   286,   287,    -1,   289,    -1,
10716:      291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
10717:      301,    -1,   303,   304,   305,   306,   307,   308,   309,   310,
10718:      311,    -1,   313,   314,   315,   316,   317,   318,   319,   320,
10719:      321,   322,   323,   324,   325,   326,    -1,   328,   329,   330,
10720:      331,   332,   333,   334,   335,   336,   337,   338,   339,    -1,
10721:      341,   342,    -1,   344,   345,   346,   347,   348,   349,   350,
10722:      351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
10723:      361,   362,   363,   364,    -1,   366,   367,   368,   369,   370,
10724:       -1,   372,   373,   374,   375,    -1,   377,   378,   379,   380,
10725:      381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
10726:       -1,   392,   393,   394,   395,    -1,   397,   398,   399,   400,
10727:      401,    -1,   403,   404,    -1,    -1,   407,   408,   409,   410,
10728:      411,    -1,   413,   414,   415,   416,   417,   418,   419,   420,
10729:       -1,    -1,   423,   424,   425,   426,   427,    -1,    -1,   430,
10730:      431,   432,   433,   434,   435,   436,    -1,   438,    -1,   440,
10731:      441,   442,   443,    -1,    -1,   446,    -1,   448,   449,   450,
10732:      451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
10733:      461,   462,   463,   464,   465,   466,   467,   468,   469,    -1,
10734:        3,   472,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
10735:       -1,    -1,    -1,    -1,    -1,   486,    19,    20,    21,    22,
10736:       23,    24,    25,    26,    27,    28,    29,    30,    -1,    -1,
10737:       -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,
10738:       43,    -1,    45,    46,    47,    48,    49,    -1,    51,    52,
10739:       -1,    54,    55,    56,    57,    58,    59,    -1,    -1,    62,
10740:       63,    64,    65,    66,    -1,    68,    69,    70,    71,    72,
10741:       -1,    -1,    -1,    76,    77,    78,    79,    80,    -1,    82,
10742:       83,    84,    -1,    86,    87,    88,    89,    90,    91,    -1,
10743:       -1,    94,    95,    96,    -1,    -1,    -1,    -1,    -1,    -1,
10744:       -1,   104,   105,   106,   107,   108,   109,   110,   111,   112,
10745:      113,    -1,   115,    -1,   117,   118,   119,   120,   121,   122,
10746:       -1,   124,   125,   126,   127,   128,    -1,    -1,   131,   132,
10747:      133,   134,   135,    -1,   137,   138,   139,    -1,   141,   142,
10748:      143,    -1,   145,   146,   147,   148,   149,   150,   151,   152,
10749:      153,   154,    -1,   156,    -1,   158,   159,   160,   161,    -1,
10750:      163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,
10751:      173,    -1,   175,    -1,   177,   178,    -1,   180,   181,   182,
10752:      183,   184,   185,    -1,   187,   188,   189,   190,    -1,   192,
10753:      193,   194,   195,   196,   197,    -1,   199,    -1,   201,   202,
10754:      203,   204,   205,   206,   207,    -1,   209,    -1,   211,    -1,
10755:       -1,   214,    -1,   216,   217,   218,   219,   220,    -1,    -1,
10756:      223,    -1,   225,    -1,    -1,   228,   229,   230,    -1,    -1,
10757:      233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
10758:      243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
10759:      253,   254,   255,   256,   257,    -1,   259,   260,   261,   262,
10760:      263,    -1,   265,   266,    -1,   268,    -1,   270,   271,   272,
10761:      273,   274,   275,    -1,   277,   278,    -1,    -1,   281,   282,
10762:      283,    -1,    -1,   286,   287,    -1,   289,    -1,   291,   292,
10763:      293,   294,   295,   296,   297,   298,   299,   300,   301,    -1,
10764:      303,   304,   305,   306,   307,   308,   309,   310,   311,    -1,
10765:      313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
10766:      323,   324,   325,   326,    -1,   328,   329,   330,   331,   332,
10767:      333,   334,   335,   336,   337,   338,   339,    -1,   341,   342,
10768:       -1,   344,   345,   346,   347,   348,   349,   350,   351,   352,
10769:      353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
10770:      363,   364,    -1,   366,   367,   368,   369,   370,    -1,   372,
10771:      373,   374,   375,    -1,   377,   378,   379,   380,   381,   382,
10772:      383,   384,   385,   386,   387,   388,   389,   390,    -1,   392,
10773:      393,   394,   395,    -1,   397,   398,   399,   400,   401,    -1,
10774:      403,   404,    -1,    -1,   407,   408,   409,   410,   411,    -1,
10775:      413,   414,   415,   416,   417,   418,   419,   420,    -1,    -1,
10776:      423,   424,   425,   426,   427,    -1,    -1,   430,   431,   432,
10777:      433,   434,   435,   436,    -1,   438,    -1,   440,   441,   442,
10778:      443,    -1,    -1,   446,    -1,   448,   449,   450,   451,   452,
10779:      453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
10780:      463,   464,   465,   466,   467,   468,   469,    -1,     3,   472,
10781:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
10782:       -1,    -1,    -1,   486,    19,    20,    21,    22,    23,    24,
10783:       25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,
10784:       -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,
10785:       45,    46,    47,    48,    49,    -1,    51,    52,    -1,    54,
10786:       55,    56,    57,    58,    59,    -1,    -1,    62,    63,    64,
10787:       65,    66,    -1,    68,    69,    70,    71,    72,    -1,    -1,
10788:       -1,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
10789:       -1,    86,    87,    88,    89,    90,    91,    -1,    -1,    94,
10790:       95,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,
10791:      105,   106,   107,   108,   109,   110,   111,   112,   113,    -1,
10792:      115,    -1,   117,   118,   119,   120,   121,   122,    -1,   124,
10793:      125,   126,   127,   128,    -1,    -1,   131,   132,   133,   134,
10794:      135,    -1,   137,   138,   139,    -1,   141,   142,   143,    -1,
10795:      145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
10796:       -1,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,
10797:      165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,
10798:      175,    -1,   177,   178,    -1,   180,   181,   182,   183,   184,
10799:      185,    -1,   187,   188,   189,   190,    -1,   192,   193,   194,
10800:      195,   196,   197,    -1,   199,    -1,   201,   202,   203,   204,
10801:      205,   206,   207,    -1,   209,    -1,   211,    -1,    -1,   214,
10802:       -1,   216,   217,   218,   219,   220,    -1,    -1,   223,    -1,
10803:      225,    -1,    -1,   228,   229,   230,    -1,    -1,   233,   234,
10804:      235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
10805:      245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
10806:      255,   256,   257,    -1,   259,   260,   261,   262,   263,    -1,
10807:      265,   266,    -1,   268,    -1,   270,   271,   272,   273,   274,
10808:      275,    -1,   277,   278,    -1,    -1,   281,   282,   283,    -1,
10809:       -1,   286,   287,    -1,   289,    -1,   291,   292,   293,   294,
10810:      295,   296,   297,   298,   299,   300,   301,    -1,   303,   304,
10811:      305,   306,   307,   308,   309,   310,   311,    -1,   313,   314,
10812:      315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
10813:      325,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
10814:      335,   336,   337,   338,   339,    -1,   341,   342,    -1,   344,
10815:      345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
10816:      355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
10817:       -1,   366,   367,   368,   369,   370,    -1,   372,   373,   374,
10818:      375,    -1,   377,   378,   379,   380,   381,   382,   383,   384,
10819:      385,   386,   387,   388,   389,   390,    -1,   392,   393,   394,
10820:      395,    -1,   397,   398,   399,   400,   401,    -1,   403,   404,
10821:       -1,    -1,   407,   408,   409,   410,   411,    -1,   413,   414,
10822:      415,   416,   417,   418,   419,   420,    -1,    -1,   423,   424,
10823:      425,   426,   427,    -1,    -1,   430,   431,   432,   433,   434,
10824:      435,   436,    -1,   438,    -1,   440,   441,   442,   443,    -1,
10825:       -1,   446,    -1,   448,   449,   450,   451,   452,   453,   454,
10826:      455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
10827:      465,   466,   467,   468,   469,    -1,     3,   472,     5,    -1,
10828:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
10829:       -1,   486,    19,    20,    21,    22,    23,    24,    25,    26,
10830:       -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,
10831:       -1,    38,    39,    -1,    41,    42,    43,    -1,    45,    46,
10832:       47,    48,    49,    -1,    51,    52,    -1,    54,    55,    56,
10833:       57,    58,    59,    -1,    -1,    62,    63,    64,    65,    66,
10834:       -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,    76,
10835:       77,    78,    79,    80,    -1,    82,    83,    84,    -1,    86,
10836:       87,    88,    89,    90,    91,    -1,    -1,    94,    95,    96,
10837:       -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,   105,   106,
10838:      107,   108,   109,   110,   111,   112,   113,    -1,   115,    -1,
10839:      117,   118,   119,   120,   121,   122,    -1,   124,   125,   126,
10840:      127,   128,    -1,    -1,   131,   132,   133,   134,   135,    -1,
10841:      137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
10842:      147,   148,   149,   150,   151,   152,   153,   154,    -1,   156,
10843:       -1,   158,   159,   160,   161,    -1,   163,    -1,   165,    -1,
10844:       -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,
10845:      177,   178,    -1,   180,   181,   182,   183,   184,   185,    -1,
10846:      187,   188,   189,   190,    -1,   192,   193,   194,   195,   196,
10847:      197,    -1,   199,    -1,   201,   202,   203,   204,   205,   206,
10848:      207,    -1,   209,    -1,   211,    -1,    -1,   214,    -1,   216,
10849:      217,   218,   219,   220,    -1,    -1,   223,    -1,   225,    -1,
10850:       -1,   228,   229,   230,    -1,    -1,   233,   234,   235,   236,
10851:      237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
10852:      247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
10853:      257,    -1,   259,   260,   261,   262,   263,    -1,   265,   266,
10854:       -1,   268,    -1,   270,   271,   272,   273,   274,   275,    -1,
10855:      277,   278,    -1,    -1,   281,   282,   283,    -1,    -1,   286,
10856:      287,    -1,   289,    -1,   291,   292,   293,   294,   295,   296,
10857:      297,   298,   299,   300,   301,    -1,   303,   304,   305,   306,
10858:      307,   308,   309,   310,   311,    -1,   313,   314,   315,   316,
10859:      317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
10860:       -1,   328,   329,   330,   331,   332,   333,   334,   335,   336,
10861:      337,   338,   339,    -1,   341,   342,    -1,   344,   345,   346,
10862:      347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
10863:      357,   358,    -1,   360,   361,   362,   363,   364,    -1,   366,
10864:      367,   368,   369,   370,    -1,   372,   373,   374,   375,    -1,
10865:      377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
10866:      387,   388,   389,   390,    -1,   392,   393,    -1,   395,    -1,
10867:      397,   398,   399,   400,   401,    -1,   403,   404,    -1,    -1,
10868:      407,   408,   409,   410,   411,    -1,   413,   414,   415,   416,
10869:      417,   418,   419,   420,    -1,    -1,   423,   424,   425,   426,
10870:      427,    -1,    -1,   430,   431,   432,   433,   434,   435,   436,
10871:       -1,   438,    -1,   440,   441,   442,   443,    -1,    -1,   446,
10872:       -1,    -1,   449,   450,   451,   452,   453,   454,   455,   456,
10873:      457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
10874:      467,   468,   469,    -1,     3,    -1,     5,    -1,    -1,    -1,
10875:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   486,
10876:       19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
10877:       29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
10878:       39,    -1,    41,    42,    43,    -1,    45,    46,    47,    48,
10879:       49,    -1,    51,    52,    -1,    54,    55,    56,    57,    58,
10880:       59,    -1,    -1,    62,    63,    64,    65,    66,    -1,    68,
10881:       69,    70,    71,    72,    -1,    -1,    -1,    76,    77,    78,
10882:       79,    80,    -1,    82,    83,    84,    -1,    86,    87,    88,
10883:       89,    90,    91,    -1,    -1,    94,    95,    96,    -1,    -1,
10884:       -1,    -1,    -1,    -1,    -1,   104,   105,   106,   107,   108,
10885:      109,   110,   111,   112,   113,    -1,   115,    -1,   117,   118,
10886:      119,   120,   121,   122,    -1,   124,   125,   126,   127,   128,
10887:       -1,    -1,   131,   132,   133,   134,   135,    -1,   137,   138,
10888:      139,    -1,   141,   142,   143,    -1,   145,   146,   147,   148,
10889:      149,   150,   151,   152,   153,   154,    -1,   156,    -1,   158,
10890:      159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,
10891:      169,   170,   171,    -1,   173,    -1,   175,    -1,   177,   178,
10892:       -1,   180,   181,   182,   183,   184,   185,    -1,   187,   188,
10893:      189,   190,    -1,   192,   193,   194,   195,   196,   197,    -1,
10894:      199,    -1,   201,   202,   203,   204,   205,   206,   207,    -1,
10895:      209,    -1,   211,    -1,    -1,   214,    -1,   216,   217,   218,
10896:      219,   220,    -1,    -1,   223,    -1,   225,    -1,    -1,   228,
10897:      229,   230,    -1,    -1,   233,   234,   235,   236,   237,   238,
10898:      239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
10899:      249,   250,   251,   252,   253,   254,   255,   256,   257,    -1,
10900:      259,   260,   261,   262,   263,    -1,   265,   266,    -1,   268,
10901:       -1,   270,   271,   272,   273,   274,   275,    -1,   277,   278,
10902:       -1,    -1,   281,   282,   283,    -1,    -1,   286,   287,    -1,
10903:      289,    -1,   291,   292,   293,   294,   295,   296,   297,   298,
10904:      299,   300,   301,    -1,   303,   304,   305,   306,   307,   308,
10905:      309,   310,   311,    -1,   313,   314,   315,   316,   317,   318,
10906:      319,   320,   321,   322,   323,   324,   325,   326,    -1,   328,
10907:      329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
10908:      339,    -1,   341,   342,    -1,   344,   345,   346,   347,   348,
10909:      349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
10910:       -1,   360,   361,   362,   363,   364,    -1,   366,   367,   368,
10911:      369,   370,    -1,   372,   373,   374,   375,    -1,   377,   378,
10912:      379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
10913:      389,   390,    -1,   392,   393,    -1,   395,    -1,   397,   398,
10914:      399,   400,   401,    -1,   403,   404,    -1,    -1,   407,   408,
10915:      409,   410,   411,    -1,   413,   414,   415,   416,   417,   418,
10916:      419,   420,    -1,    -1,   423,   424,   425,   426,   427,    -1,
10917:       -1,   430,   431,   432,   433,   434,   435,   436,    -1,   438,
10918:       -1,   440,   441,   442,   443,    -1,    -1,   446,    -1,    -1,
10919:      449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
10920:      459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
10921:      469,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
10922:       -1,    -1,    -1,    -1,    -1,    -1,    -1,   486,    19,    20,
10923:       21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
10924:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,
10925:       41,    42,    43,    -1,    45,    46,    47,    48,    49,    -1,
10926:       51,    52,    -1,    54,    55,    56,    57,    58,    59,    -1,
10927:       -1,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
10928:       71,    72,    -1,    -1,    -1,    76,    77,    78,    79,    80,
10929:       -1,    82,    83,    84,    -1,    86,    87,    88,    89,    90,
10930:       91,    -1,    -1,    94,    95,    96,    -1,    -1,    -1,    -1,
10931:       -1,    -1,    -1,   104,   105,   106,   107,   108,   109,   110,
10932:      111,   112,   113,    -1,   115,    -1,   117,   118,   119,   120,
10933:      121,   122,    -1,   124,   125,   126,   127,   128,    -1,    -1,
10934:      131,   132,   133,   134,   135,    -1,   137,   138,   139,    -1,
10935:      141,   142,   143,    -1,   145,   146,   147,   148,   149,   150,
10936:      151,   152,   153,   154,    -1,   156,    -1,   158,   159,   160,
10937:      161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,
10938:      171,    -1,   173,    -1,   175,    -1,   177,   178,    -1,   180,
10939:      181,   182,   183,   184,   185,    -1,   187,   188,   189,   190,
10940:       -1,   192,   193,   194,   195,   196,   197,    -1,   199,    -1,
10941:      201,   202,   203,   204,   205,   206,   207,    -1,   209,    -1,
10942:      211,    -1,    -1,   214,    -1,   216,   217,   218,   219,   220,
10943:       -1,    -1,   223,    -1,   225,    -1,    -1,   228,   229,   230,
10944:       -1,    -1,   233,   234,   235,   236,   237,   238,   239,   240,
10945:      241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
10946:      251,   252,   253,   254,   255,   256,   257,    -1,   259,   260,
10947:      261,   262,   263,    -1,   265,   266,    -1,   268,    -1,   270,
10948:      271,   272,   273,   274,   275,    -1,   277,   278,    -1,    -1,
10949:      281,   282,   283,    -1,    -1,   286,   287,    -1,   289,    -1,
10950:      291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
10951:      301,    -1,   303,   304,   305,   306,   307,   308,   309,   310,
10952:      311,    -1,   313,   314,   315,   316,   317,   318,   319,   320,
10953:      321,   322,   323,   324,   325,   326,    -1,   328,   329,   330,
10954:      331,   332,   333,   334,   335,   336,   337,   338,   339,    -1,
10955:      341,   342,    -1,   344,   345,   346,   347,   348,   349,   350,
10956:      351,   352,   353,   354,   355,   356,   357,   358,    -1,   360,
10957:      361,   362,   363,   364,    -1,   366,   367,   368,   369,   370,
10958:       -1,   372,   373,   374,   375,    -1,   377,   378,   379,   380,
10959:      381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
10960:       -1,   392,   393,    -1,   395,    -1,   397,   398,   399,   400,
10961:      401,    -1,   403,   404,    -1,    -1,   407,   408,   409,   410,
10962:      411,    -1,   413,   414,   415,   416,   417,   418,   419,   420,
10963:       -1,    -1,   423,   424,   425,   426,   427,    -1,    -1,   430,
10964:      431,   432,   433,   434,   435,   436,    -1,   438,    -1,   440,
10965:      441,   442,   443,    -1,    -1,   446,    -1,    -1,   449,   450,
10966:      451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
10967:      461,   462,   463,   464,   465,   466,   467,   468,   469,    -1,
10968:        3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
10969:       -1,    -1,    -1,    -1,    -1,   486,    19,    20,    21,    22,
10970:       23,    24,    25,    26,    -1,    28,    29,    30,    -1,    -1,
10971:       -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,
10972:       43,    -1,    45,    46,    47,    48,    49,    -1,    51,    52,
10973:       -1,    54,    55,    56,    57,    58,    59,    -1,    -1,    62,
10974:       63,    64,    65,    66,    -1,    68,    69,    70,    71,    72,
10975:       -1,    -1,    -1,    76,    77,    78,    79,    80,    -1,    82,
10976:       83,    84,    -1,    86,    87,    88,    89,    90,    91,    -1,
10977:       -1,    94,    95,    96,    -1,    -1,    -1,    -1,    -1,    -1,
10978:       -1,   104,   105,   106,   107,   108,   109,   110,   111,   112,
10979:      113,    -1,   115,    -1,   117,   118,   119,   120,   121,   122,
10980:       -1,   124,   125,   126,   127,   128,    -1,    -1,   131,   132,
10981:      133,   134,   135,    -1,   137,   138,   139,    -1,   141,   142,
10982:      143,    -1,   145,   146,   147,   148,   149,   150,   151,   152,
10983:      153,   154,    -1,   156,    -1,   158,   159,   160,   161,    -1,
10984:      163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,
10985:      173,    -1,   175,    -1,   177,   178,    -1,   180,   181,   182,
10986:      183,   184,   185,    -1,   187,   188,   189,   190,    -1,   192,
10987:      193,   194,   195,   196,   197,    -1,   199,    -1,   201,   202,
10988:      203,   204,   205,   206,   207,    -1,   209,    -1,   211,    -1,
10989:       -1,   214,    -1,   216,   217,   218,   219,   220,    -1,    -1,
10990:      223,    -1,   225,    -1,    -1,   228,   229,   230,    -1,    -1,
10991:      233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
10992:      243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
10993:      253,   254,   255,   256,   257,    -1,   259,   260,   261,   262,
10994:      263,    -1,   265,   266,    -1,   268,    -1,   270,   271,   272,
10995:      273,   274,   275,    -1,   277,   278,    -1,    -1,   281,   282,
10996:      283,    -1,    -1,   286,   287,    -1,   289,    -1,   291,   292,
10997:      293,   294,   295,   296,   297,   298,   299,   300,   301,    -1,
10998:      303,   304,   305,   306,   307,   308,   309,   310,   311,    -1,
10999:      313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
11000:      323,   324,   325,   326,    -1,   328,   329,   330,   331,   332,
11001:      333,   334,   335,   336,   337,   338,   339,    -1,   341,   342,
11002:       -1,   344,   345,   346,   347,   348,   349,   350,   351,   352,
11003:      353,   354,   355,   356,   357,   358,    -1,   360,   361,   362,
11004:      363,   364,    -1,   366,   367,   368,   369,   370,    -1,   372,
11005:      373,   374,   375,    -1,   377,   378,   379,   380,   381,   382,
11006:      383,   384,   385,   386,   387,   388,   389,   390,    -1,   392,
11007:      393,    -1,   395,    -1,   397,   398,   399,   400,   401,    -1,
11008:      403,   404,    -1,    -1,   407,   408,   409,   410,   411,    -1,
11009:      413,   414,   415,   416,   417,   418,   419,   420,    -1,    -1,
11010:      423,   424,   425,   426,   427,    -1,    -1,   430,   431,   432,
11011:      433,   434,   435,   436,    -1,   438,    -1,   440,   441,   442,
11012:      443,    -1,    -1,   446,    -1,    -1,   449,   450,   451,   452,
11013:      453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
11014:      463,   464,   465,   466,   467,   468,   469,    -1,    -1,    -1,
11015:       -1,     3,     4,     5,    -1,    -1,     8,     9,    -1,    -1,
11016:       -1,    -1,    -1,   486,    16,    17,    18,    19,    20,    21,
11017:       22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
11018:       32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
11019:       42,    43,    44,    45,    46,    47,    -1,    49,    50,    51,
11020:       52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
11021:       62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
11022:       -1,    73,    74,    75,    76,    77,    78,    79,    80,    81,
11023:       82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
11024:       92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
11025:      102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
11026:      112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
11027:      122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
11028:      132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
11029:      142,   143,   144,   145,   146,   147,   148,    -1,   150,   151,
11030:      152,   153,    -1,   155,   156,   157,   158,   159,   160,   161,
11031:      162,   163,   164,   165,   166,   167,   168,   169,   170,   171,
11032:      172,   173,   174,   175,   176,    -1,   178,   179,   180,   181,
11033:      182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
11034:      192,   193,   194,   195,   196,   197,   198,   199,   200,    -1,
11035:      202,   203,   204,   205,   206,   207,   208,   209,   210,   211,
11036:      212,   213,   214,   215,   216,   217,   218,   219,   220,   221,
11037:      222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
11038:      232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
11039:      242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
11040:      252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
11041:      262,   263,   264,   265,   266,   267,   268,   269,    -1,   271,
11042:      272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
11043:      282,   283,   284,   285,   286,    -1,   288,   289,   290,    -1,
11044:      292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
11045:      302,   303,   304,    -1,   306,   307,    -1,   309,   310,   311,
11046:      312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
11047:      322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
11048:      332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
11049:      342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
11050:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
11051:      362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
11052:      372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
11053:      382,   383,   384,   385,   386,   387,   388,   389,    -1,   391,
11054:      392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
11055:      402,   403,   404,   405,   406,   407,   408,    -1,   410,    -1,
11056:      412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
11057:      422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
11058:      432,   433,   434,    -1,   436,   437,   438,   439,   440,   441,
11059:      442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
11060:      452,   453,   454,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11061:       -1,    -1,    -1,    -1,   466,   467,   468,   469,    -1,     3,
11062:       -1,   473,   474,   475,     8,   477,   478,   479,   480,   481,
11063:      482,    -1,    16,    17,    18,    19,    20,    21,    22,    23,
11064:       24,    25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,
11065:       -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,
11066:       -1,    45,    46,    47,    48,    49,    -1,    51,    52,    -1,
11067:       54,    55,    56,    57,    58,    59,    -1,    -1,    62,    63,
11068:       64,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
11069:       -1,    -1,    76,    77,    78,    79,    80,    -1,    82,    83,
11070:       84,    -1,    86,    87,    88,    89,    90,    91,    -1,    -1,
11071:       94,    95,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11072:      104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
11073:       -1,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
11074:      124,   125,   126,   127,   128,    -1,    -1,   131,   132,   133,
11075:      134,   135,    -1,   137,   138,   139,    -1,   141,   142,   143,
11076:       -1,   145,   146,   147,   148,   149,   150,   151,   152,   153,
11077:      154,    -1,   156,    -1,   158,   159,   160,   161,    -1,   163,
11078:       -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,
11079:       -1,   175,    -1,   177,   178,    -1,   180,   181,   182,   183,
11080:      184,   185,    -1,   187,   188,   189,   190,    -1,   192,   193,
11081:      194,   195,   196,   197,    -1,   199,    -1,   201,   202,   203,
11082:      204,   205,   206,   207,    -1,   209,    -1,   211,    -1,    -1,
11083:      214,    -1,   216,   217,   218,   219,   220,    -1,    -1,   223,
11084:       -1,   225,    -1,    -1,   228,   229,   230,    -1,    -1,   233,
11085:      234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
11086:      244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
11087:      254,   255,   256,   257,    -1,   259,   260,   261,   262,   263,
11088:       -1,   265,   266,    -1,   268,    -1,   270,   271,   272,   273,
11089:      274,   275,    -1,   277,   278,    -1,    -1,   281,   282,   283,
11090:       -1,    -1,   286,   287,    -1,   289,    -1,   291,   292,   293,
11091:      294,   295,   296,   297,   298,   299,   300,   301,    -1,   303,
11092:      304,   305,   306,   307,   308,   309,   310,   311,    -1,   313,
11093:      314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
11094:      324,   325,   326,    -1,   328,   329,   330,   331,   332,   333,
11095:      334,   335,   336,   337,   338,   339,    -1,   341,   342,    -1,
11096:      344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
11097:      354,   355,   356,   357,   358,    -1,   360,   361,   362,   363,
11098:      364,    -1,   366,   367,   368,   369,   370,    -1,   372,   373,
11099:      374,   375,    -1,   377,   378,   379,   380,   381,   382,   383,
11100:      384,   385,   386,   387,   388,   389,   390,    -1,   392,   393,
11101:       -1,   395,    -1,   397,   398,   399,   400,   401,    -1,   403,
11102:      404,    -1,    -1,   407,   408,   409,   410,   411,    -1,   413,
11103:      414,   415,   416,   417,   418,   419,   420,    -1,    -1,   423,
11104:      424,   425,   426,   427,    -1,    -1,   430,   431,   432,   433,
11105:      434,   435,   436,    -1,   438,    -1,   440,   441,   442,   443,
11106:       -1,    -1,   446,    -1,    -1,   449,   450,   451,   452,   453,
11107:      454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
11108:      464,   465,   466,   467,   468,   469,    -1,    -1,    -1,   473,
11109:      474,   475,    -1,   477,   478,   479,   480,   481,   482,     8,
11110:       -1,    -1,    11,    -1,    -1,    -1,    -1,    16,    17,    18,
11111:       -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,
11112:       11,    -1,    -1,    -1,    33,    16,    17,    18,    -1,    -1,
11113:       -1,    -1,    41,    -1,    -1,     8,    -1,    -1,    11,    48,
11114:       -1,    -1,    33,    16,    17,    18,    -1,    -1,    -1,    -1,
11115:       41,    -1,    -1,    -1,    -1,    -1,    -1,    48,    -1,    -1,
11116:       33,    -1,    -1,     8,    73,    -1,    11,    -1,    41,    -1,
11117:       -1,    16,    17,    18,    -1,    48,    -1,    -1,    -1,    -1,
11118:       -1,     8,    73,    -1,    11,    -1,    -1,    -1,    33,    16,
11119:       17,    18,    -1,    -1,    -1,    -1,    41,    -1,    -1,     8,
11120:       73,    -1,    11,    48,    -1,    -1,    33,    16,    17,    18,
11121:       -1,    -1,    -1,    -1,    41,    -1,    -1,    -1,    -1,    -1,
11122:       -1,    48,    -1,    -1,    33,    -1,    -1,    -1,    73,    -1,
11123:       -1,    -1,    41,    -1,    -1,    -1,    -1,    -1,    -1,    48,
11124:       -1,    -1,    -1,    -1,    -1,    -1,    73,    -1,    -1,    -1,
11125:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11126:       -1,    -1,    -1,   172,    73,    -1,    -1,    -1,    -1,    -1,
11127:       -1,    -1,    -1,    -1,    -1,    -1,    -1,   186,    -1,    -1,
11128:       -1,   172,   191,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11129:       -1,    -1,    -1,    -1,    -1,   186,    -1,    -1,    -1,   172,
11130:      191,    -1,    -1,   212,   213,    -1,    -1,    -1,    -1,    -1,
11131:       -1,    -1,    -1,   186,    -1,    -1,    -1,   226,   191,    -1,
11132:       -1,   212,   213,    -1,    -1,    -1,    -1,   172,    -1,    -1,
11133:       -1,    -1,    -1,    -1,    -1,   226,    -1,    -1,    -1,   212,
11134:      213,   186,    -1,    -1,    -1,   172,   191,    -1,    -1,    -1,
11135:       -1,    -1,    -1,   226,    -1,   264,    -1,    -1,   267,   186,
11136:       -1,    -1,    -1,   172,   191,    -1,    -1,   212,   213,    -1,
11137:       -1,    -1,   281,   264,    -1,   284,   267,   186,    -1,    -1,
11138:       -1,   226,   191,    -1,    -1,   212,   213,    -1,    -1,    -1,
11139:      281,   264,    -1,   284,   267,    -1,    -1,    -1,    -1,   226,
11140:       -1,    -1,    -1,   212,   213,    -1,    -1,    -1,   281,    -1,
11141:       -1,   284,    -1,    -1,    -1,    -1,    -1,   226,    -1,   264,
11142:       -1,    -1,   267,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11143:       -1,    -1,    -1,    -1,    -1,    -1,   281,   264,    -1,   284,
11144:      267,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11145:       -1,    -1,    -1,    -1,   281,   264,    -1,   284,   267,    -1,
11146:       -1,    -1,   371,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11147:       -1,    -1,   281,    -1,    -1,   284,    -1,    -1,    -1,    -1,
11148:      371,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11149:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   371,    -1,
11150:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11151:        8,    -1,    -1,    11,    -1,    -1,    -1,    -1,    16,    17,
11152:       18,    -1,    -1,    -1,    -1,    -1,   371,    -1,    -1,    -1,
11153:       -1,    -1,    -1,    -1,    -1,    33,    -1,    -1,    -1,    -1,
11154:       -1,    -1,    -1,    41,   371,    -1,    -1,    -1,    -1,    -1,
11155:       48,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11156:       -1,   470,   371,    -1,   473,   474,   475,    -1,   477,   478,
11157:      479,   480,   481,   482,    -1,    73,    -1,    -1,   487,   470,
11158:       -1,    -1,   473,   474,   475,    -1,   477,   478,   479,   480,
11159:      481,   482,    -1,    -1,    -1,    -1,   487,   470,    -1,    -1,
11160:      473,   474,   475,    -1,   477,   478,   479,   480,   481,   482,
11161:       -1,    -1,    -1,    -1,   487,    -1,    -1,    -1,    -1,    -1,
11162:       -1,    -1,    -1,    -1,    -1,   470,    -1,    -1,   473,   474,
11163:      475,    -1,   477,   478,   479,   480,   481,   482,    -1,    -1,
11164:       -1,    -1,   487,   470,    -1,    -1,   473,   474,   475,    -1,
11165:      477,   478,   479,   480,   481,   482,    -1,    -1,    -1,    -1,
11166:      487,   470,    -1,    -1,   473,   474,   475,    -1,   477,   478,
11167:      479,   480,   481,   482,   172,    -1,     8,    -1,   487,    11,
11168:       -1,    -1,    -1,    -1,    16,    17,    18,    -1,   186,    -1,
11169:       -1,    -1,    -1,   191,    -1,    -1,    -1,    -1,    -1,    -1,
11170:       -1,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,
11171:       -1,    -1,    -1,    -1,   212,   213,    48,    -1,    -1,    -1,
11172:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   226,    -1,
11173:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11174:       -1,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11175:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11176:       -1,    -1,    -1,    -1,    -1,    -1,   264,    -1,    -1,   267,
11177:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11178:       -1,    -1,    -1,   281,    -1,    -1,   284,    -1,    -1,    -1,
11179:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11180:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11181:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11182:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11183:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11184:      172,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11185:       -1,    -1,    -1,    -1,   186,    -1,    -1,    -1,    -1,   191,
11186:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11187:       -1,    -1,    -1,   371,    -1,    -1,    -1,    -1,    -1,    -1,
11188:      212,   213,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11189:       -1,    -1,    -1,    -1,   226,    -1,    -1,    -1,    -1,    -1,
11190:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11191:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11192:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11193:       -1,    -1,   264,    -1,    -1,   267,    -1,    -1,    -1,    -1,
11194:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   281,
11195:       -1,    -1,   284,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11196:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11197:       -1,    -1,   470,    -1,    -1,   473,   474,   475,    -1,   477,
11198:      478,   479,   480,   481,   482,    -1,    -1,    -1,    -1,   487,
11199:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11200:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11201:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11202:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11203:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   371,
11204:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11205:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11206:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11207:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11208:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11209:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11210:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11211:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11212:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11213:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   470,     3,
11214:       -1,   473,   474,   475,    -1,   477,   478,   479,   480,   481,
11215:      482,    -1,    -1,   485,    -1,    19,    20,    21,    22,    23,
11216:       24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
11217:       34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
11218:       -1,    45,    46,    47,    48,    49,    -1,    51,    52,    53,
11219:       54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
11220:       64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
11221:       -1,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
11222:       84,    85,    86,    87,    88,    89,    90,    91,    92,    -1,
11223:       94,    95,    96,    97,    98,    99,    -1,   101,   102,   103,
11224:      104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
11225:      114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
11226:      124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
11227:      134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
11228:      144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
11229:      154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
11230:      164,   165,    -1,   167,    -1,   169,   170,   171,    -1,   173,
11231:      174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
11232:      184,   185,    -1,   187,   188,   189,   190,   191,   192,   193,
11233:      194,   195,   196,   197,   198,   199,    -1,   201,   202,   203,
11234:      204,   205,   206,   207,   208,   209,   210,   211,    -1,    -1,
11235:      214,    -1,   216,   217,   218,   219,   220,   221,   222,   223,
11236:       -1,   225,    -1,   227,   228,   229,   230,   231,   232,   233,
11237:      234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
11238:      244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
11239:      254,   255,   256,   257,    -1,   259,   260,   261,   262,   263,
11240:      264,   265,   266,    -1,   268,   269,   270,   271,   272,   273,
11241:      274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
11242:      284,   285,   286,   287,    -1,   289,    -1,   291,   292,   293,
11243:      294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
11244:      304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
11245:      314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
11246:      324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
11247:      334,   335,   336,   337,   338,   339,   340,   341,   342,    -1,
11248:      344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
11249:      354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
11250:      364,   365,   366,   367,   368,   369,   370,    -1,   372,   373,
11251:      374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
11252:      384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
11253:      394,   395,    -1,   397,   398,   399,   400,   401,   402,   403,
11254:      404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
11255:      414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
11256:      424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
11257:      434,   435,   436,   437,   438,    -1,   440,   441,   442,   443,
11258:      444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
11259:      454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
11260:      464,   465,   466,   467,   468,   469,     3,    -1,    -1,    -1,
11261:       -1,    -1,    -1,    -1,    -1,   479,    -1,    -1,    -1,    -1,
11262:       -1,    -1,    19,    20,    21,    22,    23,    24,    25,    26,
11263:       -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,
11264:       -1,    38,    39,    -1,    41,    42,    43,    -1,    45,    46,
11265:       47,    48,    49,    -1,    51,    52,    -1,    54,    55,    56,
11266:       57,    58,    59,    -1,    -1,    62,    63,    64,    65,    66,
11267:       -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,    76,
11268:       77,    78,    79,    80,    -1,    82,    83,    84,    -1,    86,
11269:       87,    88,    89,    90,    91,    -1,    -1,    94,    95,    96,
11270:       -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,   105,   106,
11271:      107,   108,   109,   110,   111,   112,   113,    -1,   115,    -1,
11272:      117,   118,   119,   120,   121,   122,    -1,   124,   125,   126,
11273:      127,   128,    -1,    -1,   131,   132,   133,   134,   135,    -1,
11274:      137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
11275:      147,   148,   149,   150,   151,   152,   153,   154,    -1,   156,
11276:       -1,   158,   159,   160,   161,    -1,   163,    -1,   165,    -1,
11277:       -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,
11278:      177,   178,    -1,   180,   181,   182,   183,   184,   185,    -1,
11279:      187,   188,   189,   190,    -1,   192,   193,   194,   195,   196,
11280:      197,    -1,   199,    -1,   201,   202,   203,   204,   205,   206,
11281:      207,    -1,   209,    -1,   211,    -1,    -1,   214,    -1,   216,
11282:      217,   218,   219,   220,    -1,    -1,   223,    -1,   225,    -1,
11283:       -1,   228,   229,   230,    -1,    -1,   233,   234,   235,   236,
11284:      237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
11285:      247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
11286:      257,    -1,   259,   260,   261,   262,   263,    -1,   265,   266,
11287:       -1,   268,    -1,   270,   271,   272,   273,   274,   275,    -1,
11288:      277,   278,    -1,    -1,   281,   282,   283,    -1,    -1,   286,
11289:      287,    -1,   289,    -1,   291,   292,   293,   294,   295,   296,
11290:      297,   298,   299,   300,   301,    -1,   303,   304,   305,   306,
11291:      307,   308,   309,   310,   311,    -1,   313,   314,   315,   316,
11292:      317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
11293:       -1,   328,   329,   330,   331,   332,   333,   334,   335,   336,
11294:      337,   338,   339,    -1,   341,   342,    -1,   344,   345,   346,
11295:      347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
11296:      357,   358,    -1,   360,   361,   362,   363,   364,    -1,   366,
11297:      367,   368,   369,   370,    -1,   372,   373,   374,   375,    -1,
11298:      377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
11299:      387,   388,   389,   390,    -1,   392,   393,    -1,   395,    -1,
11300:      397,   398,   399,   400,   401,    -1,   403,   404,    -1,    -1,
11301:      407,   408,   409,   410,   411,    -1,   413,   414,   415,   416,
11302:      417,   418,   419,   420,    -1,    -1,   423,   424,   425,   426,
11303:      427,    -1,    -1,   430,   431,   432,   433,   434,   435,   436,
11304:       -1,   438,    -1,   440,   441,   442,   443,    -1,    -1,   446,
11305:       -1,    -1,   449,   450,   451,   452,   453,   454,   455,   456,
11306:      457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
11307:      467,   468,   469,     3,     4,     5,    -1,    -1,    -1,     9,
11308:       -1,    -1,   479,    -1,    -1,    -1,    -1,    -1,    -1,    19,
11309:       20,    21,    22,    23,    24,    25,    26,    -1,    28,    29,
11310:       30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,
11311:       -1,    41,    42,    43,    -1,    45,    46,    47,    48,    49,
11312:       -1,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
11313:       -1,    -1,    62,    63,    64,    65,    66,    -1,    68,    69,
11314:       70,    71,    72,    -1,    -1,    -1,    76,    77,    78,    79,
11315:       80,    -1,    82,    83,    84,    -1,    86,    87,    88,    89,
11316:       90,    91,    -1,    -1,    94,    95,    96,    -1,    -1,    -1,
11317:       -1,    -1,    -1,    -1,   104,   105,   106,   107,   108,   109,
11318:      110,   111,   112,   113,   114,   115,    -1,   117,   118,   119,
11319:      120,   121,   122,    -1,   124,   125,   126,   127,   128,    -1,
11320:       -1,   131,   132,   133,   134,   135,    -1,   137,   138,   139,
11321:       -1,   141,   142,   143,    -1,   145,   146,   147,   148,   149,
11322:      150,   151,   152,   153,   154,   155,   156,    -1,   158,   159,
11323:      160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,
11324:      170,   171,    -1,   173,    -1,   175,    -1,   177,   178,    -1,
11325:      180,   181,   182,   183,   184,   185,    -1,   187,   188,   189,
11326:      190,    -1,   192,   193,   194,   195,   196,   197,    -1,   199,
11327:       -1,   201,   202,   203,   204,   205,   206,   207,    -1,   209,
11328:       -1,   211,    -1,    -1,   214,    -1,   216,   217,   218,   219,
11329:      220,    -1,    -1,   223,    -1,   225,    -1,    -1,   228,   229,
11330:      230,    -1,    -1,   233,   234,   235,   236,   237,   238,   239,
11331:      240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
11332:      250,   251,   252,   253,   254,   255,   256,   257,    -1,   259,
11333:      260,   261,   262,   263,    -1,   265,   266,    -1,   268,    -1,
11334:      270,   271,   272,   273,   274,   275,    -1,   277,   278,   279,
11335:       -1,   281,   282,   283,    -1,    -1,   286,   287,    -1,   289,
11336:       -1,   291,   292,   293,   294,   295,   296,   297,   298,   299,
11337:      300,   301,    -1,   303,   304,   305,   306,   307,   308,   309,
11338:      310,   311,    -1,   313,   314,   315,   316,   317,   318,   319,
11339:      320,   321,   322,   323,   324,   325,   326,    -1,   328,   329,
11340:      330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
11341:       -1,   341,   342,    -1,   344,   345,   346,   347,   348,   349,
11342:      350,   351,   352,   353,   354,   355,   356,   357,   358,    -1,
11343:      360,   361,   362,   363,   364,    -1,   366,   367,   368,   369,
11344:      370,    -1,   372,   373,   374,   375,    -1,   377,   378,   379,
11345:      380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
11346:      390,    -1,   392,   393,    -1,   395,    -1,   397,   398,   399,
11347:      400,   401,    -1,   403,   404,    -1,    -1,   407,   408,   409,
11348:      410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
11349:      420,    -1,    -1,   423,   424,   425,   426,   427,    -1,    -1,
11350:      430,   431,   432,   433,   434,   435,   436,    -1,   438,    -1,
11351:      440,   441,   442,   443,    -1,    -1,   446,    -1,    -1,   449,
11352:      450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
11353:      460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
11354:        3,     4,     5,    -1,    -1,    -1,     9,   477,   478,    -1,
11355:       -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,
11356:       23,    24,    25,    26,    -1,    28,    29,    30,    -1,    -1,
11357:       -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,
11358:       43,    -1,    45,    46,    47,    48,    49,    -1,    51,    52,
11359:       -1,    54,    55,    56,    57,    58,    59,    -1,    -1,    62,
11360:       63,    64,    65,    66,    -1,    68,    69,    70,    71,    72,
11361:       -1,    -1,    -1,    76,    77,    78,    79,    80,    -1,    82,
11362:       83,    84,    -1,    86,    87,    88,    89,    90,    91,    -1,
11363:       -1,    94,    95,    96,    -1,    -1,    -1,    -1,    -1,    -1,
11364:       -1,   104,   105,   106,   107,   108,   109,   110,   111,   112,
11365:      113,   114,   115,    -1,   117,   118,   119,   120,   121,   122,
11366:       -1,   124,   125,   126,   127,   128,    -1,    -1,   131,   132,
11367:      133,   134,   135,    -1,   137,   138,   139,    -1,   141,   142,
11368:      143,    -1,   145,   146,   147,   148,   149,   150,   151,   152,
11369:      153,   154,   155,   156,    -1,   158,   159,   160,   161,    -1,
11370:      163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,
11371:      173,    -1,   175,    -1,   177,   178,    -1,   180,   181,   182,
11372:      183,   184,   185,    -1,   187,   188,   189,   190,    -1,   192,
11373:      193,   194,   195,   196,   197,    -1,   199,    -1,   201,   202,
11374:      203,   204,   205,   206,   207,    -1,   209,    -1,   211,    -1,
11375:       -1,   214,    -1,   216,   217,   218,   219,   220,    -1,    -1,
11376:      223,    -1,   225,    -1,    -1,   228,   229,   230,    -1,    -1,
11377:      233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
11378:      243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
11379:      253,   254,   255,   256,   257,    -1,   259,   260,   261,   262,
11380:      263,    -1,   265,   266,    -1,   268,    -1,   270,   271,   272,
11381:      273,   274,   275,    -1,   277,   278,   279,    -1,   281,   282,
11382:      283,    -1,    -1,   286,   287,    -1,   289,    -1,   291,   292,
11383:      293,   294,   295,   296,   297,   298,   299,   300,   301,    -1,
11384:      303,   304,   305,   306,   307,   308,   309,   310,   311,    -1,
11385:      313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
11386:      323,   324,   325,   326,    -1,   328,   329,   330,   331,   332,
11387:      333,   334,   335,   336,   337,   338,   339,    -1,   341,   342,
11388:       -1,   344,   345,   346,   347,   348,   349,   350,   351,   352,
11389:      353,   354,   355,   356,   357,   358,    -1,   360,   361,   362,
11390:      363,   364,    -1,   366,   367,   368,   369,   370,    -1,   372,
11391:      373,   374,   375,    -1,   377,   378,   379,   380,   381,   382,
11392:      383,   384,   385,   386,   387,   388,   389,   390,    -1,   392,
11393:      393,    -1,   395,    -1,   397,   398,   399,   400,   401,    -1,
11394:      403,   404,    -1,    -1,   407,   408,   409,   410,   411,   412,
11395:      413,   414,   415,   416,   417,   418,   419,   420,    -1,    -1,
11396:      423,   424,   425,   426,   427,    -1,    -1,   430,   431,   432,
11397:      433,   434,   435,   436,    -1,   438,    -1,   440,   441,   442,
11398:      443,    -1,    -1,   446,    -1,    -1,   449,   450,   451,   452,
11399:      453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
11400:      463,   464,   465,   466,   467,   468,   469,     3,     4,     5,
11401:       -1,    -1,    -1,     9,   477,   478,    -1,    -1,    -1,    -1,
11402:       -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
11403:       26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,
11404:       -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,    45,
11405:       46,    47,    48,    49,    -1,    51,    52,    -1,    54,    55,
11406:       56,    57,    58,    59,    -1,    -1,    62,    63,    64,    65,
11407:       66,    -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,
11408:       76,    77,    78,    79,    80,    -1,    82,    83,    84,    -1,
11409:       86,    87,    88,    89,    90,    91,    -1,    -1,    94,    95,
11410:       96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,   105,
11411:      106,   107,   108,   109,   110,   111,   112,   113,    -1,   115,
11412:       -1,   117,   118,   119,   120,   121,   122,    -1,   124,   125,
11413:      126,   127,   128,    -1,    -1,   131,   132,   133,   134,   135,
11414:       -1,   137,   138,   139,    -1,   141,   142,   143,    -1,   145,
11415:      146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
11416:      156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
11417:       -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,
11418:       -1,   177,   178,    -1,   180,   181,   182,   183,   184,   185,
11419:       -1,   187,   188,   189,   190,    -1,   192,   193,   194,   195,
11420:      196,   197,    -1,   199,    -1,   201,   202,   203,   204,   205,
11421:      206,   207,    -1,   209,    -1,   211,    -1,    -1,   214,    -1,
11422:      216,   217,   218,   219,   220,    -1,    -1,   223,    -1,   225,
11423:       -1,    -1,   228,   229,   230,    -1,    -1,   233,   234,   235,
11424:      236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
11425:      246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
11426:      256,   257,    -1,   259,   260,   261,   262,   263,    -1,   265,
11427:      266,    -1,   268,    -1,   270,   271,   272,   273,   274,   275,
11428:       -1,   277,   278,   279,    -1,   281,   282,   283,    -1,    -1,
11429:      286,   287,    -1,   289,    -1,   291,   292,   293,   294,   295,
11430:      296,   297,   298,   299,   300,   301,    -1,   303,   304,   305,
11431:      306,   307,   308,   309,   310,   311,    -1,   313,   314,   315,
11432:      316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
11433:      326,    -1,   328,   329,   330,   331,   332,   333,   334,   335,
11434:      336,   337,   338,   339,    -1,   341,   342,    -1,   344,   345,
11435:      346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
11436:      356,   357,   358,    -1,   360,   361,   362,   363,   364,    -1,
11437:      366,   367,   368,   369,   370,    -1,   372,   373,   374,   375,
11438:       -1,   377,   378,   379,   380,   381,   382,   383,   384,   385,
11439:      386,   387,   388,   389,   390,    -1,   392,   393,    -1,   395,
11440:       -1,   397,   398,   399,   400,   401,    -1,   403,   404,    -1,
11441:       -1,   407,   408,   409,   410,   411,   412,   413,   414,   415,
11442:      416,   417,   418,   419,   420,    -1,    -1,   423,   424,   425,
11443:      426,   427,    -1,    -1,   430,   431,   432,   433,   434,   435,
11444:      436,    -1,   438,    -1,   440,   441,   442,   443,    -1,    -1,
11445:      446,    -1,    -1,   449,   450,   451,   452,   453,   454,   455,
11446:      456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
11447:      466,   467,   468,   469,    -1,     8,    -1,    -1,    11,    -1,
11448:       -1,   477,   478,    16,    17,    18,    -1,    -1,    -1,    -1,
11449:       -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,
11450:       33,    16,    17,    18,    37,    -1,    -1,    -1,    41,    -1,
11451:       -1,     8,    -1,    -1,    11,    48,    -1,    -1,    33,    16,
11452:       17,    18,    -1,    -1,    -1,    -1,    41,    -1,    -1,    -1,
11453:       -1,    -1,    -1,    48,    -1,    -1,    33,    -1,    -1,     8,
11454:       73,    -1,    11,    -1,    41,    -1,    -1,    16,    17,    18,
11455:       -1,    48,    -1,    -1,    -1,    -1,    -1,    -1,    73,    -1,
11456:       -1,    -1,    -1,    -1,    33,    -1,    -1,    36,    -1,    -1,
11457:       -1,    -1,    41,    -1,    -1,     8,    73,    -1,    11,    48,
11458:       -1,    -1,    -1,    16,    17,    18,    -1,    -1,    -1,    -1,
11459:      123,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11460:       33,    -1,    -1,    -1,    73,    -1,    -1,    -1,    41,    -1,
11461:       -1,    -1,    -1,    -1,    -1,    48,    -1,    -1,    -1,    -1,
11462:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11463:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   172,
11464:       73,    -1,    -1,    -1,    -1,    -1,    -1,   162,    -1,    -1,
11465:       -1,    -1,   167,   186,    -1,    -1,    -1,   172,   191,     8,
11466:       -1,    -1,    11,    -1,   161,    -1,    -1,    16,    17,    18,
11467:       -1,   186,    -1,    -1,    -1,   172,   191,    -1,    -1,   212,
11468:      213,    -1,    -1,    -1,    33,    -1,    -1,    36,    -1,   186,
11469:       -1,    -1,    41,   226,   191,    -1,    -1,   212,   213,    48,
11470:       -1,    -1,    -1,   172,    -1,    -1,    -1,    -1,    -1,    -1,
11471:       -1,   226,    -1,    -1,    -1,   212,   213,   186,    -1,    -1,
11472:       -1,    -1,   191,    -1,    73,    -1,    -1,    -1,    -1,   226,
11473:       -1,   264,    -1,    -1,   267,    -1,    -1,    -1,    -1,   172,
11474:       -1,    -1,    -1,   212,   213,    -1,    -1,    -1,   281,   264,
11475:       -1,   284,   267,   186,    -1,    -1,    -1,   226,   191,    -1,
11476:       -1,    -1,    -1,    -1,    -1,    -1,   281,   264,    -1,   284,
11477:      267,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   212,
11478:      213,    -1,    -1,    -1,   281,    -1,    -1,   284,    -1,    -1,
11479:       -1,    -1,    -1,   226,    -1,   264,    -1,    -1,   267,    -1,
11480:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11481:      307,    -1,   281,    -1,    -1,   284,    -1,    -1,    -1,    -1,
11482:       -1,    -1,    -1,   172,    -1,    -1,    -1,    -1,    -1,    -1,
11483:       -1,   264,    -1,    -1,   267,    -1,    -1,   186,   371,    -1,
11484:       -1,    -1,   191,    -1,    -1,    -1,    -1,    -1,   281,    -1,
11485:       -1,   284,    -1,    -1,    -1,    -1,   371,    -1,    -1,    -1,
11486:       -1,    -1,    -1,   212,   213,    -1,    -1,    -1,    -1,   302,
11487:       -1,    -1,    -1,    -1,   371,    -1,    -1,   226,    -1,    -1,
11488:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11489:       -1,     8,    -1,    -1,    11,    -1,   429,    -1,    -1,    16,
11490:       17,    18,   371,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11491:       -1,    -1,    -1,    -1,    -1,   264,    33,    -1,   267,    -1,
11492:       -1,    -1,    -1,    -1,    41,    -1,    -1,    -1,    -1,    -1,
11493:       -1,    48,   281,    -1,    -1,   284,    -1,   470,   371,    -1,
11494:      473,   474,   475,    -1,   477,   478,   479,   480,   481,   482,
11495:       -1,    -1,    -1,    -1,    -1,   470,    73,    -1,   473,   474,
11496:      475,    -1,   477,   478,   479,   480,   481,   482,    -1,    -1,
11497:       -1,    -1,    -1,   470,    -1,    -1,   473,   474,   475,    -1,
11498:      477,   478,   479,   480,   481,   482,    -1,    -1,    -1,    -1,
11499:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11500:       -1,   470,    -1,    -1,   473,   474,   475,    -1,   477,   478,
11501:      479,   480,   481,   482,    -1,    -1,    -1,    -1,    -1,    -1,
11502:       -1,    -1,   371,    -1,    -1,    -1,     8,    -1,    -1,    11,
11503:       -1,    -1,    -1,    -1,    16,    17,    18,   470,    -1,    -1,
11504:      473,   474,   475,    -1,   477,   478,   479,   480,   481,   482,
11505:      167,    33,    -1,    -1,    36,   172,    -1,    -1,    -1,    41,
11506:       -1,    -1,    -1,    -1,    -1,    -1,    48,    -1,    -1,   186,
11507:       -1,    -1,     8,    -1,   191,    11,    -1,    -1,    -1,    -1,
11508:       16,    17,    18,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11509:       -1,    73,    -1,    -1,    -1,   212,   213,    33,    -1,    -1,
11510:       -1,    -1,    -1,    -1,    -1,    41,    -1,    -1,    -1,   226,
11511:       -1,    -1,    48,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11512:       -1,   470,    -1,    -1,   473,   474,   475,    -1,   477,   478,
11513:      479,   480,   481,   482,    -1,    -1,    -1,    73,    -1,    -1,
11514:       -1,    -1,    -1,    -1,    -1,    -1,    -1,   264,    -1,    -1,
11515:      267,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11516:       -1,    -1,    -1,     8,   281,    -1,    11,   284,    -1,    -1,
11517:       -1,    16,    17,    18,    -1,    -1,    -1,    -1,    -1,    -1,
11518:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    33,    -1,
11519:      172,    -1,    -1,    -1,    -1,    -1,    41,    -1,    -1,    -1,
11520:       -1,    -1,     8,    48,   186,    11,    -1,    -1,    -1,   191,
11521:       16,    17,    18,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11522:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    33,    73,    -1,
11523:      212,   213,    -1,    -1,    -1,    41,   172,    -1,    -1,    -1,
11524:       -1,    -1,    48,    -1,   226,    -1,    -1,    -1,    -1,    -1,
11525:      186,    -1,    -1,    -1,   371,   191,    -1,    -1,    -1,    -1,
11526:        8,    -1,    -1,    11,    -1,    -1,    -1,    73,    16,    17,
11527:       18,    -1,    -1,    -1,    -1,    -1,   212,   213,    -1,    -1,
11528:       -1,    -1,   264,    -1,    -1,   267,    -1,    -1,    -1,    -1,
11529:      226,    -1,    -1,    41,    -1,    -1,    -1,    -1,    -1,   281,
11530:       48,    -1,   284,    -1,    -1,    -1,    -1,     8,    -1,    -1,
11531:       11,    -1,    -1,    -1,    -1,    16,    17,    18,    -1,    -1,
11532:       -1,    -1,    -1,    -1,    -1,    73,    -1,   172,   264,    -1,
11533:       -1,   267,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11534:       41,   186,    -1,    -1,    -1,   281,   191,    48,   284,    -1,
11535:       -1,    -1,    -1,   470,    -1,    -1,   473,   474,   475,    -1,
11536:      477,   478,   479,   480,   481,   482,   172,   212,   213,    -1,
11537:       -1,    -1,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11538:      186,   226,    -1,    -1,    -1,   191,    -1,    -1,    -1,   371,
11539:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11540:       -1,    -1,    -1,    -1,    -1,    -1,   212,   213,    -1,    -1,
11541:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   264,
11542:      226,    -1,   267,    -1,   172,    -1,    -1,    -1,    -1,    -1,
11543:       -1,    -1,    -1,    -1,    -1,   371,   281,    -1,   186,   284,
11544:       -1,    -1,    -1,   191,    -1,    -1,    -1,    -1,    -1,    -1,
11545:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   264,    -1,
11546:       -1,   267,    -1,    -1,   212,   213,   402,    -1,    -1,    -1,
11547:       -1,   172,    -1,    -1,    -1,   281,    -1,    -1,   226,    -1,
11548:       -1,    -1,    -1,    -1,    -1,   186,    -1,    -1,   470,    -1,
11549:      191,   473,   474,   475,    -1,   477,   478,   479,   480,   481,
11550:      482,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11551:       -1,   212,   213,    -1,    -1,    -1,   264,    -1,    -1,   267,
11552:       -1,    -1,    -1,    -1,    -1,   226,   371,    -1,    -1,    -1,
11553:       -1,    -1,    -1,   281,   470,    -1,    -1,   473,   474,   475,
11554:       -1,   477,   478,   479,   480,   481,   482,    -1,    -1,    -1,
11555:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11556:       -1,    -1,    -1,    -1,    -1,   371,   267,    -1,    -1,    -1,
11557:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11558:      281,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11559:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11560:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11561:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11562:       -1,    -1,    -1,   371,    -1,   470,    -1,    -1,   473,   474,
11563:      475,    -1,   477,   478,   479,   480,   481,   482,    -1,    -1,
11564:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11565:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11566:       -1,    -1,    -1,    -1,   470,    -1,    -1,   473,   474,   475,
11567:      371,   477,   478,   479,   480,   481,   482,    -1,    -1,    -1,
11568:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11569:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11570:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11571:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11572:       -1,    -1,   470,    -1,    -1,   473,   474,   475,    -1,   477,
11573:      478,   479,   480,   481,   482,    -1,    -1,    -1,    -1,    -1,
11574:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11575:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11576:       -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,     5,   470,
11577:       -1,    -1,   473,   474,   475,    -1,   477,   478,   479,   480,
11578:      481,   482,    19,    20,    21,    22,    23,    24,    25,    26,
11579:       27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
11580:       37,    38,    39,    40,    41,    42,    43,    -1,    45,    46,
11581:       47,    48,    49,    -1,    51,    52,    53,    54,    55,    56,
11582:       57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
11583:       67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
11584:       77,    78,    79,    80,    -1,    82,    83,    84,    85,    86,
11585:       87,    88,    89,    90,    91,    92,    -1,    94,    95,    96,
11586:       97,    98,    99,    -1,   101,   102,   103,   104,   105,   106,
11587:      107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
11588:      117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
11589:      127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
11590:      137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
11591:      147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
11592:      157,   158,   159,   160,   161,   162,   163,   164,   165,    -1,
11593:      167,    -1,   169,   170,   171,    -1,   173,   174,   175,   176,
11594:      177,   178,   179,   180,   181,   182,   183,   184,   185,    -1,
11595:      187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
11596:      197,   198,   199,    -1,   201,   202,   203,   204,   205,   206,
11597:      207,   208,   209,   210,   211,    -1,    -1,   214,    -1,   216,
11598:      217,   218,   219,   220,   221,   222,   223,    -1,   225,    -1,
11599:      227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
11600:      237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
11601:      247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
11602:      257,    -1,   259,   260,   261,   262,   263,   264,   265,   266,
11603:       -1,   268,   269,   270,   271,   272,   273,   274,   275,   276,
11604:      277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
11605:      287,    -1,   289,    -1,   291,   292,   293,   294,   295,   296,
11606:      297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
11607:      307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
11608:      317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
11609:      327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
11610:      337,   338,   339,   340,   341,   342,    -1,   344,   345,   346,
11611:      347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
11612:      357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
11613:      367,   368,   369,   370,    -1,   372,   373,   374,   375,   376,
11614:      377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
11615:      387,   388,   389,   390,   391,   392,   393,   394,   395,    -1,
11616:      397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
11617:      407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
11618:      417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
11619:      427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
11620:      437,   438,    -1,   440,   441,   442,   443,   444,   445,   446,
11621:      447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
11622:      457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
11623:      467,   468,   469,     3,    -1,    -1,    -1,    -1,    -1,    -1,
11624:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,
11625:       20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
11626:       30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
11627:       40,    41,    42,    43,    -1,    45,    46,    47,    48,    49,
11628:       -1,    51,    52,    53,    54,    55,    56,    57,    58,    59,
11629:       60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
11630:       70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
11631:       80,    -1,    82,    83,    84,    85,    86,    87,    88,    89,
11632:       90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
11633:       -1,   101,   102,   103,   104,   105,   106,   107,   108,   109,
11634:      110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
11635:      120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
11636:      130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
11637:      140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
11638:      150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
11639:      160,   161,   162,   163,   164,   165,    -1,   167,    -1,   169,
11640:      170,   171,    -1,   173,   174,   175,   176,   177,   178,   179,
11641:      180,   181,   182,   183,   184,   185,    -1,   187,   188,   189,
11642:      190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
11643:       -1,   201,   202,   203,   204,   205,   206,   207,   208,   209,
11644:      210,   211,    -1,    -1,   214,    -1,   216,   217,   218,   219,
11645:      220,   221,   222,   223,    -1,   225,    -1,   227,   228,   229,
11646:      230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
11647:      240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
11648:      250,   251,   252,   253,   254,   255,   256,   257,    -1,   259,
11649:      260,   261,   262,   263,   264,   265,   266,    -1,   268,   269,
11650:      270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
11651:      280,   281,   282,   283,   284,   285,   286,   287,    -1,   289,
11652:       -1,   291,   292,   293,   294,   295,   296,   297,   298,   299,
11653:      300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
11654:      310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
11655:      320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
11656:      330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
11657:      340,   341,   342,    -1,   344,   345,   346,   347,   348,   349,
11658:      350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
11659:      360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
11660:      370,    -1,   372,   373,   374,   375,   376,   377,   378,   379,
11661:      380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
11662:      390,   391,   392,   393,   394,   395,    -1,   397,   398,   399,
11663:      400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
11664:      410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
11665:      420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
11666:      430,   431,   432,   433,   434,   435,   436,   437,   438,    -1,
11667:      440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
11668:      450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
11669:      460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
11670:        3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11671:       -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,
11672:       23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
11673:       33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
11674:       43,    -1,    45,    46,    47,    48,    49,    -1,    51,    52,
11675:       53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
11676:       63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
11677:       73,    -1,    75,    76,    77,    78,    79,    80,    -1,    82,
11678:       83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
11679:       -1,    94,    95,    96,    97,    98,    99,    -1,   101,   102,
11680:      103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
11681:      113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
11682:      123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
11683:      133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
11684:      143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
11685:      153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
11686:      163,   164,   165,    -1,   167,    -1,   169,   170,   171,    -1,
11687:      173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
11688:      183,   184,   185,    -1,   187,   188,   189,   190,   191,   192,
11689:      193,   194,   195,   196,   197,   198,   199,    -1,   201,   202,
11690:      203,   204,   205,   206,   207,   208,   209,   210,   211,    -1,
11691:       -1,   214,    -1,   216,   217,   218,   219,   220,   221,   222,
11692:      223,    -1,   225,    -1,   227,   228,   229,   230,   231,   232,
11693:      233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
11694:      243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
11695:      253,   254,   255,   256,   257,    -1,   259,   260,   261,   262,
11696:      263,   264,   265,   266,    -1,   268,   269,   270,   271,   272,
11697:      273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
11698:      283,   284,   285,   286,   287,    -1,   289,    -1,   291,   292,
11699:      293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
11700:      303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
11701:      313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
11702:      323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
11703:      333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
11704:       -1,   344,   345,   346,   347,   348,   349,   350,   351,   352,
11705:      353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
11706:      363,   364,   365,   366,   367,   368,   369,   370,    -1,   372,
11707:      373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
11708:      383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
11709:      393,   394,   395,    -1,   397,   398,   399,   400,   401,   402,
11710:      403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
11711:      413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
11712:      423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
11713:      433,   434,   435,   436,   437,   438,    -1,   440,   441,   442,
11714:      443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
11715:      453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
11716:      463,   464,   465,   466,   467,   468,   469,     3,    -1,    -1,
11717:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11718:       -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
11719:       26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,
11720:       -1,    -1,    38,    39,    -1,    41,    42,    43,    44,    45,
11721:       46,    47,    48,    49,    50,    51,    52,    -1,    54,    55,
11722:       56,    57,    58,    59,    -1,    61,    62,    63,    64,    65,
11723:       66,    -1,    68,    69,    70,    71,    72,    -1,    74,    -1,
11724:       76,    77,    78,    79,    80,    81,    82,    83,    84,    -1,
11725:       86,    87,    88,    89,    90,    91,    -1,    93,    94,    95,
11726:       96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
11727:      106,   107,   108,   109,   110,   111,   112,   113,    -1,   115,
11728:       -1,   117,   118,   119,   120,   121,   122,    -1,   124,   125,
11729:      126,   127,   128,    -1,    -1,   131,   132,   133,   134,   135,
11730:       -1,   137,   138,   139,    -1,   141,   142,   143,    -1,   145,
11731:      146,   147,   148,   149,   150,   151,   152,   153,   154,    -1,
11732:      156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
11733:      166,    -1,   168,   169,   170,   171,   172,   173,    -1,   175,
11734:       -1,   177,   178,    -1,   180,   181,   182,   183,   184,   185,
11735:      186,   187,   188,   189,   190,    -1,   192,   193,   194,   195,
11736:      196,   197,    -1,   199,   200,   201,   202,   203,   204,   205,
11737:      206,   207,    -1,   209,    -1,   211,   212,   213,   214,   215,
11738:      216,   217,   218,   219,   220,    -1,    -1,   223,   224,   225,
11739:      226,    -1,   228,   229,   230,   231,   232,   233,   234,   235,
11740:      236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
11741:      246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
11742:      256,   257,   258,   259,   260,   261,   262,   263,    -1,   265,
11743:      266,   267,   268,    -1,   270,   271,   272,   273,   274,   275,
11744:       -1,   277,   278,    -1,    -1,   281,   282,   283,    -1,    -1,
11745:      286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
11746:      296,   297,   298,   299,   300,   301,    -1,   303,   304,   305,
11747:      306,   307,   308,   309,   310,   311,    -1,   313,   314,   315,
11748:      316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
11749:      326,    -1,   328,   329,   330,   331,   332,   333,   334,   335,
11750:      336,   337,   338,   339,    -1,   341,   342,   343,   344,   345,
11751:      346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
11752:      356,   357,   358,    -1,   360,   361,   362,   363,   364,   365,
11753:      366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
11754:       -1,   377,   378,   379,   380,   381,   382,   383,   384,   385,
11755:      386,   387,   388,   389,   390,    -1,   392,   393,    -1,   395,
11756:      396,   397,   398,   399,   400,   401,    -1,   403,   404,    -1,
11757:       -1,   407,   408,   409,   410,   411,    -1,   413,   414,   415,
11758:      416,   417,   418,   419,   420,    -1,    -1,   423,   424,   425,
11759:      426,   427,   428,    -1,   430,   431,   432,   433,   434,   435,
11760:      436,    -1,   438,   439,   440,   441,   442,   443,    -1,    -1,
11761:      446,    -1,    -1,   449,   450,   451,   452,   453,   454,   455,
11762:      456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
11763:      466,   467,   468,   469,     3,    -1,    -1,    -1,    -1,    -1,
11764:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11765:       19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
11766:       29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
11767:       39,    -1,    41,    42,    43,    44,    45,    46,    47,    48,
11768:       49,    50,    51,    52,    -1,    54,    55,    56,    57,    58,
11769:       59,    -1,    -1,    62,    63,    64,    65,    66,    -1,    68,
11770:       69,    70,    71,    72,    -1,    74,    -1,    76,    77,    78,
11771:       79,    80,    81,    82,    83,    84,    -1,    86,    87,    88,
11772:       89,    90,    91,    -1,    93,    94,    95,    96,    -1,    -1,
11773:       -1,   100,    -1,    -1,    -1,   104,   105,   106,   107,   108,
11774:      109,   110,   111,   112,   113,    -1,   115,    -1,   117,   118,
11775:      119,   120,   121,   122,    -1,   124,   125,   126,   127,   128,
11776:       -1,    -1,   131,   132,   133,   134,   135,    -1,   137,   138,
11777:      139,    -1,   141,   142,   143,    -1,   145,   146,   147,   148,
11778:      149,   150,   151,   152,   153,   154,    -1,   156,    -1,   158,
11779:      159,   160,   161,    -1,   163,    -1,   165,   166,    -1,   168,
11780:      169,   170,   171,   172,   173,    -1,   175,    -1,   177,   178,
11781:       -1,   180,   181,   182,   183,   184,   185,   186,   187,   188,
11782:      189,   190,    -1,   192,   193,   194,   195,   196,   197,    -1,
11783:      199,   200,   201,   202,   203,   204,   205,   206,   207,    -1,
11784:      209,    -1,   211,   212,   213,   214,   215,   216,   217,   218,
11785:      219,   220,    -1,    -1,   223,   224,   225,   226,    -1,   228,
11786:      229,   230,    -1,    -1,   233,   234,   235,   236,   237,   238,
11787:      239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
11788:      249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
11789:      259,   260,   261,   262,   263,    -1,   265,   266,   267,   268,
11790:       -1,   270,   271,   272,   273,   274,   275,    -1,   277,   278,
11791:       -1,    -1,   281,   282,   283,    -1,    -1,   286,   287,   288,
11792:      289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
11793:      299,   300,   301,    -1,   303,   304,   305,   306,   307,   308,
11794:      309,   310,   311,    -1,   313,   314,   315,   316,   317,   318,
11795:      319,   320,   321,   322,   323,   324,   325,   326,    -1,   328,
11796:      329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
11797:      339,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
11798:      349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
11799:       -1,   360,   361,   362,   363,   364,    -1,   366,   367,   368,
11800:      369,   370,   371,   372,   373,   374,   375,    -1,   377,   378,
11801:      379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
11802:      389,   390,    -1,   392,   393,    -1,   395,   396,   397,   398,
11803:      399,   400,   401,    -1,   403,   404,    -1,    -1,   407,   408,
11804:      409,   410,   411,    -1,   413,   414,   415,   416,   417,   418,
11805:      419,   420,    -1,    -1,   423,   424,   425,   426,   427,    -1,
11806:       -1,   430,   431,   432,   433,   434,   435,   436,    -1,   438,
11807:      439,   440,   441,   442,   443,    -1,    -1,   446,    -1,    -1,
11808:      449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
11809:      459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
11810:      469,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11811:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,
11812:       22,    23,    24,    25,    26,    -1,    28,    29,    30,    -1,
11813:       -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,
11814:       42,    43,    -1,    45,    46,    47,    48,    49,    -1,    51,
11815:       52,    -1,    54,    55,    56,    57,    58,    59,    -1,    -1,
11816:       62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
11817:       72,    -1,    -1,    75,    76,    77,    78,    79,    80,    -1,
11818:       82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
11819:       -1,    -1,    94,    95,    96,    -1,    -1,    -1,    -1,    -1,
11820:       -1,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
11821:      112,   113,    -1,   115,    -1,   117,   118,   119,   120,   121,
11822:      122,    -1,   124,   125,   126,   127,   128,    -1,    -1,   131,
11823:      132,   133,   134,   135,    -1,   137,   138,   139,    -1,   141,
11824:      142,   143,    -1,   145,   146,   147,   148,   149,   150,   151,
11825:      152,   153,   154,    -1,   156,    -1,   158,   159,   160,   161,
11826:       -1,   163,   164,   165,    -1,    -1,    -1,   169,   170,   171,
11827:       -1,   173,    -1,   175,    -1,   177,   178,    -1,   180,   181,
11828:      182,   183,   184,   185,    -1,   187,   188,   189,   190,    -1,
11829:      192,   193,   194,   195,   196,   197,    -1,   199,    -1,   201,
11830:      202,   203,   204,   205,   206,   207,    -1,   209,    -1,   211,
11831:       -1,    -1,   214,    -1,   216,   217,   218,   219,   220,    -1,
11832:       -1,   223,    -1,   225,    -1,    -1,   228,   229,   230,    -1,
11833:       -1,   233,   234,   235,   236,   237,   238,   239,   240,   241,
11834:      242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
11835:      252,   253,   254,   255,   256,   257,    -1,   259,   260,   261,
11836:      262,   263,    -1,   265,   266,    -1,   268,    -1,   270,   271,
11837:      272,   273,   274,   275,    -1,   277,   278,    -1,    -1,   281,
11838:      282,   283,    -1,    -1,   286,   287,    -1,   289,    -1,   291,
11839:      292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
11840:       -1,   303,   304,   305,   306,   307,   308,   309,   310,   311,
11841:      312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
11842:      322,   323,   324,   325,   326,    -1,   328,   329,   330,   331,
11843:      332,   333,   334,   335,   336,   337,   338,   339,    -1,   341,
11844:      342,    -1,   344,   345,   346,   347,   348,   349,   350,   351,
11845:      352,   353,   354,   355,   356,   357,   358,    -1,   360,   361,
11846:      362,   363,   364,    -1,   366,   367,   368,   369,   370,    -1,
11847:      372,   373,   374,   375,    -1,   377,   378,   379,   380,   381,
11848:      382,   383,   384,   385,   386,   387,   388,   389,   390,    -1,
11849:      392,   393,    -1,   395,    -1,   397,   398,   399,   400,   401,
11850:       -1,   403,   404,    -1,    -1,   407,   408,   409,   410,   411,
11851:       -1,   413,   414,   415,   416,   417,   418,   419,   420,    -1,
11852:      422,   423,   424,   425,   426,   427,    -1,    -1,   430,   431,
11853:      432,   433,   434,   435,   436,    -1,   438,    -1,   440,   441,
11854:      442,   443,    -1,    -1,   446,    -1,    -1,   449,   450,   451,
11855:      452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
11856:      462,   463,   464,   465,   466,   467,   468,   469,     3,    -1,
11857:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11858:       -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,    24,
11859:       25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,
11860:       -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,
11861:       45,    46,    47,    48,    49,    -1,    51,    52,    -1,    54,
11862:       55,    56,    57,    58,    59,    -1,    -1,    62,    63,    64,
11863:       65,    66,    67,    68,    69,    70,    71,    72,    -1,    -1,
11864:       -1,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
11865:       85,    86,    87,    88,    89,    90,    91,    -1,    -1,    94,
11866:       95,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,
11867:      105,   106,   107,   108,   109,   110,   111,   112,   113,    -1,
11868:      115,    -1,   117,   118,   119,   120,   121,   122,    -1,   124,
11869:      125,   126,   127,   128,    -1,    -1,   131,   132,   133,   134,
11870:      135,    -1,   137,   138,   139,    -1,   141,   142,   143,    -1,
11871:      145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
11872:       -1,   156,    -1,   158,   159,   160,   161,    -1,   163,   164,
11873:      165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,
11874:      175,    -1,   177,   178,    -1,   180,   181,   182,   183,   184,
11875:      185,    -1,   187,   188,   189,   190,    -1,   192,   193,   194,
11876:      195,   196,   197,    -1,   199,    -1,   201,   202,   203,   204,
11877:      205,   206,   207,    -1,   209,    -1,   211,    -1,    -1,   214,
11878:       -1,   216,   217,   218,   219,   220,    -1,    -1,   223,    -1,
11879:      225,   226,    -1,   228,   229,   230,    -1,    -1,   233,   234,
11880:      235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
11881:      245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
11882:      255,   256,   257,    -1,   259,   260,   261,   262,   263,    -1,
11883:      265,   266,    -1,   268,    -1,   270,   271,   272,   273,   274,
11884:      275,    -1,   277,   278,    -1,    -1,   281,   282,   283,    -1,
11885:       -1,   286,   287,    -1,   289,    -1,   291,   292,   293,   294,
11886:      295,   296,   297,   298,   299,   300,   301,    -1,   303,   304,
11887:      305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
11888:      315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
11889:      325,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
11890:      335,   336,   337,   338,   339,    -1,   341,   342,    -1,   344,
11891:      345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
11892:      355,   356,   357,   358,    -1,   360,   361,   362,   363,   364,
11893:       -1,   366,   367,   368,   369,   370,    -1,   372,   373,   374,
11894:      375,    -1,   377,   378,   379,   380,   381,   382,   383,   384,
11895:      385,   386,   387,   388,   389,   390,    -1,   392,   393,    -1,
11896:      395,    -1,   397,   398,   399,   400,   401,    -1,   403,   404,
11897:       -1,    -1,   407,   408,   409,   410,   411,    -1,   413,   414,
11898:      415,   416,   417,   418,   419,   420,    -1,   422,   423,   424,
11899:      425,   426,   427,    -1,    -1,   430,   431,   432,   433,   434,
11900:      435,   436,    -1,   438,    -1,   440,   441,   442,   443,    -1,
11901:       -1,   446,    -1,    -1,   449,   450,   451,   452,   453,   454,
11902:      455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
11903:      465,   466,   467,   468,   469,     3,    -1,     5,    -1,    -1,
11904:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11905:       -1,    19,    20,    21,    22,    23,    24,    25,    26,    -1,
11906:       28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11907:       38,    39,    -1,    41,    42,    43,    -1,    45,    46,    47,
11908:       48,    49,    -1,    51,    52,    -1,    54,    55,    56,    57,
11909:       58,    59,    -1,    -1,    62,    63,    64,    65,    66,    -1,
11910:       68,    69,    70,    71,    72,    -1,    -1,    -1,    76,    77,
11911:       78,    79,    80,    -1,    82,    83,    84,    -1,    86,    87,
11912:       88,    89,    90,    91,    -1,    -1,    94,    95,    96,    -1,
11913:       -1,    -1,    -1,    -1,    -1,    -1,   104,   105,   106,   107,
11914:      108,   109,   110,   111,   112,   113,    -1,   115,    -1,   117,
11915:      118,   119,   120,   121,   122,    -1,   124,   125,   126,   127,
11916:      128,    -1,    -1,   131,   132,   133,   134,   135,    -1,   137,
11917:      138,   139,    -1,   141,   142,   143,    -1,   145,   146,   147,
11918:      148,   149,   150,   151,   152,   153,   154,   155,   156,    -1,
11919:      158,   159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,
11920:       -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,   177,
11921:      178,    -1,   180,   181,   182,   183,   184,   185,    -1,   187,
11922:      188,   189,   190,    -1,   192,   193,   194,   195,   196,   197,
11923:       -1,   199,    -1,   201,   202,   203,   204,   205,   206,   207,
11924:       -1,   209,    -1,   211,    -1,    -1,   214,    -1,   216,   217,
11925:      218,   219,   220,    -1,    -1,   223,    -1,   225,    -1,    -1,
11926:      228,   229,   230,    -1,    -1,   233,   234,   235,   236,   237,
11927:      238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
11928:      248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
11929:       -1,   259,   260,   261,   262,   263,    -1,   265,   266,    -1,
11930:      268,    -1,   270,   271,   272,   273,   274,   275,    -1,   277,
11931:      278,   279,    -1,   281,   282,   283,    -1,    -1,   286,   287,
11932:       -1,   289,    -1,   291,   292,   293,   294,   295,   296,   297,
11933:      298,   299,   300,   301,    -1,   303,   304,   305,   306,   307,
11934:      308,   309,   310,   311,    -1,   313,   314,   315,   316,   317,
11935:      318,   319,   320,   321,   322,   323,   324,   325,   326,    -1,
11936:      328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
11937:      338,   339,    -1,   341,   342,    -1,   344,   345,   346,   347,
11938:      348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
11939:      358,    -1,   360,   361,   362,   363,   364,    -1,   366,   367,
11940:      368,   369,   370,    -1,   372,   373,   374,   375,    -1,   377,
11941:      378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
11942:      388,   389,   390,    -1,   392,   393,    -1,   395,    -1,   397,
11943:      398,   399,   400,   401,    -1,   403,   404,    -1,    -1,   407,
11944:      408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
11945:      418,   419,   420,    -1,    -1,   423,   424,   425,   426,   427,
11946:       -1,    -1,   430,   431,   432,   433,   434,   435,   436,    -1,
11947:      438,    -1,   440,   441,   442,   443,    -1,    -1,   446,    -1,
11948:       -1,   449,   450,   451,   452,   453,   454,   455,   456,   457,
11949:      458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
11950:      468,   469,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
11951:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,
11952:       21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
11953:       31,    32,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,
11954:       41,    42,    43,    -1,    45,    46,    47,    48,    49,    -1,
11955:       51,    52,    -1,    54,    55,    56,    57,    58,    59,    -1,
11956:       -1,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
11957:       71,    72,    -1,    -1,    -1,    76,    77,    78,    79,    80,
11958:       -1,    82,    83,    84,    -1,    86,    87,    88,    89,    90,
11959:       91,    -1,    -1,    94,    95,    96,    -1,    -1,    -1,    -1,
11960:       -1,    -1,    -1,   104,   105,   106,   107,   108,   109,   110,
11961:      111,   112,   113,    -1,   115,    -1,   117,   118,   119,   120,
11962:      121,   122,    -1,   124,   125,   126,   127,   128,    -1,    -1,
11963:      131,   132,   133,   134,   135,    -1,   137,   138,   139,    -1,
11964:      141,   142,   143,    -1,   145,   146,   147,   148,   149,   150,
11965:      151,   152,   153,   154,    -1,   156,    -1,   158,   159,   160,
11966:      161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,
11967:      171,    -1,   173,    -1,   175,    -1,   177,   178,    -1,   180,
11968:      181,   182,   183,   184,   185,    -1,   187,   188,   189,   190,
11969:       -1,   192,   193,   194,   195,   196,   197,    -1,   199,    -1,
11970:      201,   202,   203,   204,   205,   206,   207,    -1,   209,    -1,
11971:      211,    -1,    -1,   214,    -1,   216,   217,   218,   219,   220,
11972:       -1,    -1,   223,    -1,   225,    -1,    -1,   228,   229,   230,
11973:       -1,    -1,   233,   234,   235,   236,   237,   238,   239,   240,
11974:      241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
11975:      251,   252,   253,   254,   255,   256,   257,    -1,   259,   260,
11976:      261,   262,   263,    -1,   265,   266,    -1,   268,    -1,   270,
11977:      271,   272,   273,   274,   275,    -1,   277,   278,    -1,    -1,
11978:      281,   282,   283,    -1,    -1,   286,   287,    -1,   289,    -1,
11979:      291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
11980:      301,    -1,   303,   304,   305,   306,   307,   308,   309,   310,
11981:      311,    -1,   313,   314,   315,   316,   317,   318,   319,   320,
11982:      321,   322,   323,   324,   325,   326,    -1,   328,   329,   330,
11983:      331,   332,   333,   334,   335,   336,   337,   338,   339,    -1,
11984:      341,   342,    -1,   344,   345,   346,   347,   348,   349,   350,
11985:      351,   352,   353,   354,   355,   356,   357,   358,    -1,   360,
11986:      361,   362,   363,   364,    -1,   366,   367,   368,   369,   370,
11987:       -1,   372,   373,   374,   375,    -1,   377,   378,   379,   380,
11988:      381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
11989:       -1,   392,   393,    -1,   395,    -1,   397,   398,   399,   400,
11990:      401,    -1,   403,   404,    -1,    -1,   407,   408,   409,   410,
11991:      411,    -1,   413,   414,   415,   416,   417,   418,   419,   420,
11992:       -1,    -1,   423,   424,   425,   426,   427,    -1,    -1,   430,
11993:      431,   432,   433,   434,   435,   436,    -1,   438,    -1,   440,
11994:      441,   442,   443,    -1,    -1,   446,    -1,    -1,   449,   450,
11995:      451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
11996:      461,   462,   463,   464,   465,   466,   467,   468,   469,     3,
11997:       -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11998:       -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,
11999:       24,    25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,
12000:       -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,
12001:       -1,    45,    46,    47,    48,    49,    -1,    51,    52,    -1,
12002:       54,    55,    56,    57,    58,    59,    -1,    -1,    62,    63,
12003:       64,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
12004:       -1,    -1,    76,    77,    78,    79,    80,    -1,    82,    83,
12005:       84,    -1,    86,    87,    88,    89,    90,    91,    -1,    -1,
12006:       94,    95,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12007:      104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
12008:       -1,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
12009:      124,   125,   126,   127,   128,    -1,    -1,   131,   132,   133,
12010:      134,   135,    -1,   137,   138,   139,    -1,   141,   142,   143,
12011:       -1,   145,   146,   147,   148,   149,   150,   151,   152,   153,
12012:      154,    -1,   156,    -1,   158,   159,   160,   161,    -1,   163,
12013:       -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,
12014:       -1,   175,    -1,   177,   178,    -1,   180,   181,   182,   183,
12015:      184,   185,    -1,   187,   188,   189,   190,    -1,   192,   193,
12016:      194,   195,   196,   197,    -1,   199,    -1,   201,   202,   203,
12017:      204,   205,   206,   207,    -1,   209,    -1,   211,    -1,    -1,
12018:      214,    -1,   216,   217,   218,   219,   220,    -1,    -1,   223,
12019:       -1,   225,    -1,    -1,   228,   229,   230,    -1,    -1,   233,
12020:      234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
12021:      244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
12022:      254,   255,   256,   257,    -1,   259,   260,   261,   262,   263,
12023:       -1,   265,   266,    -1,   268,    -1,   270,   271,   272,   273,
12024:      274,   275,    -1,   277,   278,    -1,   280,   281,   282,   283,
12025:       -1,    -1,   286,   287,    -1,   289,    -1,   291,   292,   293,
12026:      294,   295,   296,   297,   298,   299,   300,   301,    -1,   303,
12027:      304,   305,   306,   307,   308,   309,   310,   311,    -1,   313,
12028:      314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
12029:      324,   325,   326,    -1,   328,   329,   330,   331,   332,   333,
12030:      334,   335,   336,   337,   338,   339,    -1,   341,   342,    -1,
12031:      344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
12032:      354,   355,   356,   357,   358,    -1,   360,   361,   362,   363,
12033:      364,    -1,   366,   367,   368,   369,   370,    -1,   372,   373,
12034:      374,   375,    -1,   377,   378,   379,   380,   381,   382,   383,
12035:      384,   385,   386,   387,   388,   389,   390,    -1,   392,   393,
12036:       -1,   395,    -1,   397,   398,   399,   400,   401,    -1,   403,
12037:      404,    -1,    -1,   407,   408,   409,   410,   411,    -1,   413,
12038:      414,   415,   416,   417,   418,   419,   420,    -1,    -1,   423,
12039:      424,   425,   426,   427,    -1,    -1,   430,   431,   432,   433,
12040:      434,   435,   436,    -1,   438,    -1,   440,   441,   442,   443,
12041:       -1,    -1,   446,    -1,    -1,   449,   450,   451,   452,   453,
12042:      454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
12043:      464,   465,   466,   467,   468,   469,     3,    -1,     5,    -1,
12044:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12045:       -1,    -1,    19,    20,    21,    22,    23,    24,    25,    26,
12046:       -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,
12047:       -1,    38,    39,    -1,    41,    42,    43,    -1,    45,    46,
12048:       47,    48,    49,    -1,    51,    52,    -1,    54,    55,    56,
12049:       57,    58,    59,    -1,    -1,    62,    63,    64,    65,    66,
12050:       -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,    76,
12051:       77,    78,    79,    80,    -1,    82,    83,    84,    -1,    86,
12052:       87,    88,    89,    90,    91,    -1,    -1,    94,    95,    96,
12053:       -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,   105,   106,
12054:      107,   108,   109,   110,   111,   112,   113,    -1,   115,    -1,
12055:      117,   118,   119,   120,   121,   122,    -1,   124,   125,   126,
12056:      127,   128,    -1,    -1,   131,   132,   133,   134,   135,    -1,
12057:      137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
12058:      147,   148,   149,   150,   151,   152,   153,   154,    -1,   156,
12059:       -1,   158,   159,   160,   161,    -1,   163,    -1,   165,    -1,
12060:       -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,
12061:      177,   178,    -1,   180,   181,   182,   183,   184,   185,    -1,
12062:      187,   188,   189,   190,    -1,   192,   193,   194,   195,   196,
12063:      197,    -1,   199,    -1,   201,   202,   203,   204,   205,   206,
12064:      207,    -1,   209,    -1,   211,    -1,    -1,   214,    -1,   216,
12065:      217,   218,   219,   220,    -1,    -1,   223,    -1,   225,    -1,
12066:       -1,   228,   229,   230,    -1,    -1,   233,   234,   235,   236,
12067:      237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
12068:      247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
12069:      257,    -1,   259,   260,   261,   262,   263,    -1,   265,   266,
12070:       -1,   268,    -1,   270,   271,   272,   273,   274,   275,    -1,
12071:      277,   278,    -1,   280,   281,   282,   283,    -1,    -1,   286,
12072:      287,    -1,   289,    -1,   291,   292,   293,   294,   295,   296,
12073:      297,   298,   299,   300,   301,    -1,   303,   304,   305,   306,
12074:      307,   308,   309,   310,   311,    -1,   313,   314,   315,   316,
12075:      317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
12076:       -1,   328,   329,   330,   331,   332,   333,   334,   335,   336,
12077:      337,   338,   339,    -1,   341,   342,    -1,   344,   345,   346,
12078:      347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
12079:      357,   358,    -1,   360,   361,   362,   363,   364,    -1,   366,
12080:      367,   368,   369,   370,    -1,   372,   373,   374,   375,    -1,
12081:      377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
12082:      387,   388,   389,   390,    -1,   392,   393,    -1,   395,    -1,
12083:      397,   398,   399,   400,   401,    -1,   403,   404,    -1,    -1,
12084:      407,   408,   409,   410,   411,    -1,   413,   414,   415,   416,
12085:      417,   418,   419,   420,    -1,    -1,   423,   424,   425,   426,
12086:      427,    -1,    -1,   430,   431,   432,   433,   434,   435,   436,
12087:       -1,   438,    -1,   440,   441,   442,   443,    -1,    -1,   446,
12088:       -1,    -1,   449,   450,   451,   452,   453,   454,   455,   456,
12089:      457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
12090:      467,   468,   469,     3,    -1,    -1,    -1,    -1,    -1,    -1,
12091:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,
12092:       20,    21,    22,    23,    24,    25,    26,    -1,    28,    29,
12093:       30,    31,    32,    -1,    -1,    -1,    -1,    -1,    38,    39,
12094:       -1,    41,    42,    43,    -1,    45,    46,    47,    48,    49,
12095:       -1,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
12096:       -1,    -1,    62,    63,    64,    65,    66,    -1,    68,    69,
12097:       70,    71,    72,    -1,    -1,    -1,    76,    77,    78,    79,
12098:       80,    -1,    82,    83,    84,    -1,    86,    87,    88,    89,
12099:       90,    91,    -1,    -1,    94,    95,    96,    -1,    -1,    -1,
12100:       -1,    -1,    -1,    -1,   104,   105,   106,   107,   108,   109,
12101:      110,   111,   112,   113,    -1,   115,    -1,   117,   118,   119,
12102:      120,   121,   122,    -1,   124,   125,   126,   127,   128,    -1,
12103:       -1,   131,   132,   133,   134,   135,    -1,   137,   138,   139,
12104:       -1,   141,   142,   143,    -1,   145,   146,   147,   148,   149,
12105:      150,   151,   152,   153,   154,    -1,   156,    -1,   158,   159,
12106:      160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,
12107:      170,   171,    -1,   173,    -1,   175,    -1,   177,   178,    -1,
12108:      180,   181,   182,   183,   184,   185,    -1,   187,   188,   189,
12109:      190,    -1,   192,   193,   194,   195,   196,   197,    -1,   199,
12110:       -1,   201,   202,   203,   204,   205,   206,   207,    -1,   209,
12111:       -1,   211,    -1,    -1,   214,    -1,   216,   217,   218,   219,
12112:      220,    -1,    -1,   223,    -1,   225,    -1,    -1,   228,   229,
12113:      230,    -1,    -1,   233,   234,   235,   236,   237,   238,   239,
12114:      240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
12115:      250,   251,   252,   253,   254,   255,   256,   257,    -1,   259,
12116:      260,   261,   262,   263,    -1,   265,   266,    -1,   268,    -1,
12117:      270,   271,   272,   273,   274,   275,    -1,   277,   278,    -1,
12118:       -1,   281,   282,   283,    -1,    -1,   286,   287,    -1,   289,
12119:       -1,   291,   292,   293,   294,   295,   296,   297,   298,   299,
12120:      300,   301,    -1,   303,   304,   305,   306,   307,   308,   309,
12121:      310,   311,    -1,   313,   314,   315,   316,   317,   318,   319,
12122:      320,   321,   322,   323,   324,   325,   326,    -1,   328,   329,
12123:      330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
12124:       -1,   341,   342,    -1,   344,   345,   346,   347,   348,   349,
12125:      350,   351,   352,   353,   354,   355,   356,   357,   358,    -1,
12126:      360,   361,   362,   363,   364,    -1,   366,   367,   368,   369,
12127:      370,    -1,   372,   373,   374,   375,    -1,   377,   378,   379,
12128:      380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
12129:      390,    -1,   392,   393,    -1,   395,    -1,   397,   398,   399,
12130:      400,   401,    -1,   403,   404,    -1,    -1,   407,   408,   409,
12131:      410,   411,    -1,   413,   414,   415,   416,   417,   418,   419,
12132:      420,    -1,    -1,   423,   424,   425,   426,   427,    -1,    -1,
12133:      430,   431,   432,   433,   434,   435,   436,    -1,   438,    -1,
12134:      440,   441,   442,   443,    -1,    -1,   446,    -1,    -1,   449,
12135:      450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
12136:      460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
12137:        3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12138:       -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,
12139:       23,    24,    25,    26,    -1,    28,    29,    30,    -1,    -1,
12140:       -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,
12141:       43,    -1,    45,    46,    47,    48,    49,    -1,    51,    52,
12142:       -1,    54,    55,    56,    57,    58,    59,    -1,    -1,    62,
12143:       63,    64,    65,    66,    -1,    68,    69,    70,    71,    72,
12144:       -1,    -1,    -1,    76,    77,    78,    79,    80,    -1,    82,
12145:       83,    84,    -1,    86,    87,    88,    89,    90,    91,    -1,
12146:       -1,    94,    95,    96,    -1,    -1,    -1,    -1,    -1,    -1,
12147:       -1,   104,   105,   106,   107,   108,   109,   110,   111,   112,
12148:      113,    -1,   115,    -1,   117,   118,   119,   120,   121,   122,
12149:       -1,   124,   125,   126,   127,   128,    -1,    -1,   131,   132,
12150:      133,   134,   135,    -1,   137,   138,   139,    -1,   141,   142,
12151:      143,    -1,   145,   146,   147,   148,   149,   150,   151,   152,
12152:      153,   154,    -1,   156,    -1,   158,   159,   160,   161,    -1,
12153:      163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,
12154:      173,    -1,   175,    -1,   177,   178,    -1,   180,   181,   182,
12155:      183,   184,   185,    -1,   187,   188,   189,   190,    -1,   192,
12156:      193,   194,   195,   196,   197,    -1,   199,    -1,   201,   202,
12157:      203,   204,   205,   206,   207,    -1,   209,    -1,   211,    -1,
12158:       -1,   214,    -1,   216,   217,   218,   219,   220,    -1,    -1,
12159:      223,    -1,   225,    -1,    -1,   228,   229,   230,    -1,    -1,
12160:      233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
12161:      243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
12162:      253,   254,   255,   256,   257,    -1,   259,   260,   261,   262,
12163:      263,    -1,   265,   266,    -1,   268,    -1,   270,   271,   272,
12164:      273,   274,   275,    -1,   277,   278,    -1,    -1,   281,   282,
12165:      283,    -1,    -1,   286,   287,    -1,   289,    -1,   291,   292,
12166:      293,   294,   295,   296,   297,   298,   299,   300,   301,    -1,
12167:      303,   304,   305,   306,   307,   308,   309,   310,   311,    -1,
12168:      313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
12169:      323,   324,   325,   326,    -1,   328,   329,   330,   331,   332,
12170:      333,   334,   335,   336,   337,   338,   339,    -1,   341,   342,
12171:       -1,   344,   345,   346,   347,   348,   349,   350,   351,   352,
12172:      353,   354,   355,   356,   357,   358,    -1,   360,   361,   362,
12173:      363,   364,    -1,   366,   367,   368,   369,   370,    -1,   372,
12174:      373,   374,   375,    -1,   377,   378,   379,   380,   381,   382,
12175:      383,   384,   385,   386,   387,   388,   389,   390,    -1,   392,
12176:      393,   394,   395,    -1,   397,   398,   399,   400,   401,    -1,
12177:      403,   404,    -1,    -1,   407,   408,   409,   410,   411,    -1,
12178:      413,   414,   415,   416,   417,   418,   419,   420,    -1,    -1,
12179:      423,   424,   425,   426,   427,    -1,    -1,   430,   431,   432,
12180:      433,   434,   435,   436,    -1,   438,    -1,   440,   441,   442,
12181:      443,    -1,    -1,   446,    -1,    -1,   449,   450,   451,   452,
12182:      453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
12183:      463,   464,   465,   466,   467,   468,   469,     3,     4,    -1,
12184:       -1,    -1,    -1,     9,    -1,    -1,    -1,    -1,    -1,    -1,
12185:       -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
12186:       26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,
12187:       -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,    45,
12188:       46,    47,    48,    49,    -1,    51,    52,    -1,    54,    55,
12189:       56,    57,    58,    59,    -1,    -1,    62,    63,    64,    65,
12190:       66,    -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,
12191:       76,    77,    78,    79,    80,    -1,    82,    83,    84,    -1,
12192:       86,    87,    88,    89,    90,    91,    -1,    -1,    94,    95,
12193:       96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,   105,
12194:      106,   107,   108,   109,   110,   111,   112,   113,    -1,   115,
12195:       -1,   117,   118,   119,   120,   121,   122,    -1,   124,   125,
12196:      126,   127,   128,    -1,    -1,   131,   132,   133,   134,   135,
12197:       -1,   137,   138,   139,    -1,   141,   142,   143,    -1,   145,
12198:      146,   147,   148,   149,   150,   151,   152,   153,   154,    -1,
12199:      156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
12200:       -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,
12201:       -1,   177,   178,    -1,   180,   181,   182,   183,   184,   185,
12202:       -1,   187,   188,   189,   190,    -1,   192,   193,   194,   195,
12203:      196,   197,    -1,   199,    -1,   201,   202,   203,   204,   205,
12204:      206,   207,    -1,   209,    -1,   211,    -1,    -1,   214,    -1,
12205:      216,   217,   218,   219,   220,    -1,    -1,   223,    -1,   225,
12206:       -1,    -1,   228,   229,   230,    -1,    -1,   233,   234,   235,
12207:      236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
12208:      246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
12209:      256,   257,    -1,   259,   260,   261,   262,   263,    -1,   265,
12210:      266,    -1,   268,    -1,   270,   271,   272,   273,   274,   275,
12211:       -1,   277,   278,    -1,    -1,   281,   282,   283,    -1,    -1,
12212:      286,   287,    -1,   289,    -1,   291,   292,   293,   294,   295,
12213:      296,   297,   298,   299,   300,   301,    -1,   303,   304,   305,
12214:      306,   307,   308,   309,   310,   311,    -1,   313,   314,   315,
12215:      316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
12216:      326,    -1,   328,   329,   330,   331,   332,   333,   334,   335,
12217:      336,   337,   338,   339,    -1,   341,   342,    -1,   344,   345,
12218:      346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
12219:      356,   357,   358,    -1,   360,   361,   362,   363,   364,    -1,
12220:      366,   367,   368,   369,   370,    -1,   372,   373,   374,   375,
12221:       -1,   377,   378,   379,   380,   381,   382,   383,   384,   385,
12222:      386,   387,   388,   389,   390,    -1,   392,   393,    -1,   395,
12223:       -1,   397,   398,   399,   400,   401,    -1,   403,   404,    -1,
12224:       -1,   407,   408,   409,   410,   411,    -1,   413,   414,   415,
12225:      416,   417,   418,   419,   420,    -1,    -1,   423,   424,   425,
12226:      426,   427,    -1,    -1,   430,   431,   432,   433,   434,   435,
12227:      436,    -1,   438,    -1,   440,   441,   442,   443,    -1,    -1,
12228:      446,    -1,    -1,   449,   450,   451,   452,   453,   454,   455,
12229:      456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
12230:      466,   467,   468,   469,     3,    -1,    -1,    -1,    -1,    -1,
12231:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12232:       19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
12233:       29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
12234:       39,    -1,    41,    42,    43,    -1,    45,    46,    47,    48,
12235:       49,    -1,    51,    52,    -1,    54,    55,    56,    57,    58,
12236:       59,    -1,    -1,    62,    63,    64,    65,    66,    -1,    68,
12237:       69,    70,    71,    72,    -1,    -1,    -1,    76,    77,    78,
12238:       79,    80,    -1,    82,    83,    84,    -1,    86,    87,    88,
12239:       89,    90,    91,    -1,    -1,    94,    95,    96,    -1,    -1,
12240:       -1,    -1,    -1,    -1,    -1,   104,   105,   106,   107,   108,
12241:      109,   110,   111,   112,   113,    -1,   115,    -1,   117,   118,
12242:      119,   120,   121,   122,    -1,   124,   125,   126,   127,   128,
12243:       -1,    -1,   131,   132,   133,   134,   135,    -1,   137,   138,
12244:      139,    -1,   141,   142,   143,    -1,   145,   146,   147,   148,
12245:      149,   150,   151,   152,   153,   154,    -1,   156,    -1,   158,
12246:      159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,
12247:      169,   170,   171,    -1,   173,    -1,   175,    -1,   177,   178,
12248:       -1,   180,   181,   182,   183,   184,   185,    -1,   187,   188,
12249:      189,   190,    -1,   192,   193,   194,   195,   196,   197,    -1,
12250:      199,    -1,   201,   202,   203,   204,   205,   206,   207,    -1,
12251:      209,    -1,   211,    -1,    -1,   214,    -1,   216,   217,   218,
12252:      219,   220,    -1,    -1,   223,    -1,   225,    -1,    -1,   228,
12253:      229,   230,    -1,    -1,   233,   234,   235,   236,   237,   238,
12254:      239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
12255:      249,   250,   251,   252,   253,   254,   255,   256,   257,    -1,
12256:      259,   260,   261,   262,   263,    -1,   265,   266,    -1,   268,
12257:       -1,   270,   271,   272,   273,   274,   275,    -1,   277,   278,
12258:       -1,    -1,   281,   282,   283,    -1,    -1,   286,   287,    -1,
12259:      289,    -1,   291,   292,   293,   294,   295,   296,   297,   298,
12260:      299,   300,   301,    -1,   303,   304,   305,   306,   307,   308,
12261:      309,   310,   311,    -1,   313,   314,   315,   316,   317,   318,
12262:      319,   320,   321,   322,   323,   324,   325,   326,    -1,   328,
12263:      329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
12264:      339,    -1,   341,   342,    -1,   344,   345,   346,   347,   348,
12265:      349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
12266:       -1,   360,   361,   362,   363,   364,    -1,   366,   367,   368,
12267:      369,   370,    -1,   372,   373,   374,   375,    -1,   377,   378,
12268:      379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
12269:      389,   390,    -1,   392,   393,    -1,   395,    -1,   397,   398,
12270:      399,   400,   401,    -1,   403,   404,    -1,    -1,   407,   408,
12271:      409,   410,   411,    -1,   413,   414,   415,   416,   417,   418,
12272:      419,   420,    -1,    -1,   423,   424,   425,   426,   427,    -1,
12273:       -1,   430,   431,   432,   433,   434,   435,   436,    -1,   438,
12274:       -1,   440,   441,   442,   443,    -1,    -1,   446,    -1,    -1,
12275:      449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
12276:      459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
12277:      469,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12278:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,
12279:       22,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
12280:       -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,
12281:       42,    43,    -1,    45,    46,    47,    48,    49,    -1,    51,
12282:       52,    -1,    54,    55,    56,    57,    58,    59,    -1,    -1,
12283:       62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
12284:       72,    -1,    -1,    -1,    76,    77,    78,    79,    80,    -1,
12285:       82,    83,    84,    -1,    86,    87,    88,    89,    90,    91,
12286:       -1,    -1,    94,    95,    96,    -1,    -1,    -1,    -1,    -1,
12287:       -1,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
12288:      112,   113,    -1,   115,    -1,   117,   118,   119,   120,   121,
12289:      122,    -1,   124,   125,   126,   127,   128,    -1,    -1,   131,
12290:      132,   133,   134,   135,    -1,   137,   138,   139,    -1,   141,
12291:      142,   143,    -1,   145,   146,   147,   148,   149,   150,   151,
12292:      152,   153,   154,    -1,   156,    -1,   158,   159,   160,   161,
12293:       -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,
12294:       -1,   173,    -1,   175,    -1,   177,   178,    -1,   180,   181,
12295:      182,   183,   184,   185,    -1,   187,   188,   189,   190,    -1,
12296:      192,   193,   194,   195,   196,   197,    -1,   199,    -1,   201,
12297:      202,   203,   204,   205,   206,   207,    -1,   209,    -1,   211,
12298:       -1,    -1,   214,    -1,   216,   217,   218,   219,   220,    -1,
12299:       -1,   223,    -1,   225,    -1,    -1,   228,   229,   230,    -1,
12300:       -1,   233,   234,   235,   236,   237,   238,   239,   240,   241,
12301:      242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
12302:      252,   253,   254,   255,   256,   257,    -1,   259,   260,   261,
12303:      262,   263,    -1,   265,   266,    -1,   268,    -1,   270,   271,
12304:      272,   273,   274,   275,    -1,   277,   278,    -1,    -1,   281,
12305:      282,   283,    -1,    -1,   286,   287,    -1,   289,    -1,   291,
12306:      292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
12307:       -1,   303,   304,   305,   306,   307,   308,   309,   310,   311,
12308:       -1,   313,   314,   315,   316,   317,   318,   319,   320,   321,
12309:      322,   323,   324,   325,   326,    -1,   328,   329,   330,   331,
12310:      332,   333,   334,   335,   336,   337,   338,   339,    -1,   341,
12311:      342,    -1,   344,   345,   346,   347,   348,   349,   350,   351,
12312:      352,   353,   354,   355,   356,   357,   358,    -1,   360,   361,
12313:      362,   363,   364,    -1,   366,   367,   368,   369,   370,    -1,
12314:      372,   373,   374,   375,    -1,   377,   378,   379,   380,   381,
12315:      382,   383,   384,   385,   386,   387,   388,   389,   390,    -1,
12316:      392,   393,    -1,   395,    -1,   397,   398,   399,   400,   401,
12317:       -1,   403,   404,    -1,    -1,   407,   408,   409,   410,   411,
12318:       -1,   413,   414,   415,   416,   417,   418,   419,   420,    -1,
12319:       -1,   423,   424,   425,   426,   427,    -1,    -1,   430,   431,
12320:      432,   433,   434,   435,   436,    -1,   438,    -1,   440,   441,
12321:      442,   443,    -1,    -1,   446,    -1,    -1,   449,   450,   451,
12322:      452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
12323:      462,   463,   464,   465,   466,   467,   468,   469,     3,    -1,
12324:        5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12325:       -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,    24,
12326:       25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,
12327:       -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,
12328:       45,    46,    47,    48,    49,    -1,    51,    52,    -1,    54,
12329:       55,    56,    57,    58,    59,    -1,    -1,    62,    63,    64,
12330:       65,    66,    -1,    68,    69,    70,    71,    72,    -1,    -1,
12331:       -1,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
12332:       -1,    86,    87,    88,    89,    90,    91,    -1,    -1,    94,
12333:       95,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,
12334:      105,   106,   107,   108,   109,   110,   111,   112,   113,    -1,
12335:      115,    -1,   117,   118,   119,   120,   121,   122,    -1,   124,
12336:      125,   126,   127,   128,    -1,    -1,   131,   132,   133,   134,
12337:      135,    -1,   137,   138,   139,    -1,   141,   142,   143,    -1,
12338:      145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
12339:       -1,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,
12340:      165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,
12341:      175,    -1,   177,   178,    -1,   180,   181,   182,   183,   184,
12342:      185,    -1,   187,   188,   189,   190,    -1,   192,   193,   194,
12343:      195,   196,   197,    -1,   199,    -1,   201,   202,   203,   204,
12344:      205,   206,   207,    -1,   209,    -1,   211,    -1,    -1,   214,
12345:       -1,   216,   217,   218,   219,   220,    -1,    -1,   223,    -1,
12346:      225,    -1,    -1,   228,   229,   230,    -1,    -1,   233,   234,
12347:      235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
12348:      245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
12349:      255,   256,   257,    -1,   259,   260,   261,   262,   263,    -1,
12350:      265,   266,    -1,   268,    -1,   270,   271,   272,   273,   274,
12351:      275,    -1,   277,   278,    -1,    -1,   281,   282,   283,    -1,
12352:       -1,   286,   287,    -1,   289,    -1,   291,   292,   293,   294,
12353:      295,   296,   297,   298,   299,   300,   301,    -1,   303,   304,
12354:      305,   306,   307,   308,   309,   310,   311,    -1,   313,   314,
12355:      315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
12356:      325,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
12357:      335,   336,   337,   338,   339,    -1,   341,   342,    -1,   344,
12358:      345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
12359:      355,   356,   357,   358,    -1,   360,   361,   362,   363,   364,
12360:       -1,   366,   367,   368,   369,   370,    -1,   372,   373,   374,
12361:      375,    -1,   377,   378,   379,   380,   381,   382,   383,   384,
12362:      385,   386,   387,   388,   389,   390,    -1,   392,   393,    -1,
12363:      395,    -1,   397,   398,   399,   400,   401,    -1,   403,   404,
12364:       -1,    -1,   407,   408,   409,   410,   411,    -1,   413,   414,
12365:      415,   416,   417,   418,   419,   420,    -1,    -1,   423,   424,
12366:      425,   426,   427,    -1,    -1,   430,   431,   432,   433,   434,
12367:      435,   436,    -1,   438,    -1,   440,   441,   442,   443,    -1,
12368:       -1,   446,    -1,    -1,   449,   450,   451,   452,   453,   454,
12369:      455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
12370:      465,   466,   467,   468,   469,     3,    -1,     5,    -1,    -1,
12371:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12372:       -1,    19,    20,    21,    22,    23,    24,    25,    26,    -1,
12373:       28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12374:       38,    39,    -1,    41,    42,    43,    -1,    45,    46,    47,
12375:       48,    49,    -1,    51,    52,    -1,    54,    55,    56,    57,
12376:       58,    59,    -1,    -1,    62,    63,    64,    65,    66,    -1,
12377:       68,    69,    70,    71,    72,    -1,    -1,    -1,    76,    77,
12378:       78,    79,    80,    -1,    82,    83,    84,    -1,    86,    87,
12379:       88,    89,    90,    91,    -1,    -1,    94,    95,    96,    -1,
12380:       -1,    -1,    -1,    -1,    -1,    -1,   104,   105,   106,   107,
12381:      108,   109,   110,   111,   112,   113,    -1,   115,    -1,   117,
12382:      118,   119,   120,   121,   122,    -1,   124,   125,   126,   127,
12383:      128,    -1,    -1,   131,   132,   133,   134,   135,    -1,   137,
12384:      138,   139,    -1,   141,   142,   143,    -1,   145,   146,   147,
12385:      148,   149,   150,   151,   152,   153,   154,    -1,   156,    -1,
12386:      158,   159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,
12387:       -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,   177,
12388:      178,    -1,   180,   181,   182,   183,   184,   185,    -1,   187,
12389:      188,   189,   190,    -1,   192,   193,   194,   195,   196,   197,
12390:       -1,   199,    -1,   201,   202,   203,   204,   205,   206,   207,
12391:       -1,   209,    -1,   211,    -1,    -1,   214,    -1,   216,   217,
12392:      218,   219,   220,    -1,    -1,   223,    -1,   225,    -1,    -1,
12393:      228,   229,   230,    -1,    -1,   233,   234,   235,   236,   237,
12394:      238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
12395:      248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
12396:       -1,   259,   260,   261,   262,   263,    -1,   265,   266,    -1,
12397:      268,    -1,   270,   271,   272,   273,   274,   275,    -1,   277,
12398:      278,    -1,    -1,   281,   282,   283,    -1,    -1,   286,   287,
12399:       -1,   289,    -1,   291,   292,   293,   294,   295,   296,   297,
12400:      298,   299,   300,   301,    -1,   303,   304,   305,   306,   307,
12401:      308,   309,   310,   311,    -1,   313,   314,   315,   316,   317,
12402:      318,   319,   320,   321,   322,   323,   324,   325,   326,    -1,
12403:      328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
12404:      338,   339,    -1,   341,   342,    -1,   344,   345,   346,   347,
12405:      348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
12406:      358,    -1,   360,   361,   362,   363,   364,    -1,   366,   367,
12407:      368,   369,   370,    -1,   372,   373,   374,   375,    -1,   377,
12408:      378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
12409:      388,   389,   390,    -1,   392,   393,    -1,   395,    -1,   397,
12410:      398,   399,   400,   401,    -1,   403,   404,    -1,    -1,   407,
12411:      408,   409,   410,   411,    -1,   413,   414,   415,   416,   417,
12412:      418,   419,   420,    -1,    -1,   423,   424,   425,   426,   427,
12413:       -1,    -1,   430,   431,   432,   433,   434,   435,   436,    -1,
12414:      438,    -1,   440,   441,   442,   443,    -1,    -1,   446,    -1,
12415:       -1,   449,   450,   451,   452,   453,   454,   455,   456,   457,
12416:      458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
12417:      468,   469,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
12418:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,
12419:       21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
12420:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,
12421:       41,    42,    43,    -1,    45,    46,    47,    48,    49,    -1,
12422:       51,    52,    -1,    54,    55,    56,    57,    58,    59,    -1,
12423:       -1,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
12424:       71,    72,    -1,    -1,    -1,    76,    77,    78,    79,    80,
12425:       -1,    82,    83,    84,    -1,    86,    87,    88,    89,    90,
12426:       91,    -1,    -1,    94,    95,    96,    -1,    -1,    -1,    -1,
12427:       -1,    -1,    -1,   104,   105,   106,   107,   108,   109,   110,
12428:      111,   112,   113,    -1,   115,    -1,   117,   118,   119,   120,
12429:      121,   122,    -1,   124,   125,   126,   127,   128,    -1,    -1,
12430:      131,   132,   133,   134,   135,    -1,   137,   138,   139,    -1,
12431:      141,   142,   143,    -1,   145,   146,   147,   148,   149,   150,
12432:      151,   152,   153,   154,    -1,   156,    -1,   158,   159,   160,
12433:      161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,
12434:      171,    -1,   173,    -1,   175,    -1,   177,   178,    -1,   180,
12435:      181,   182,   183,   184,   185,    -1,   187,   188,   189,   190,
12436:       -1,   192,   193,   194,   195,   196,   197,    -1,   199,    -1,
12437:      201,   202,   203,   204,   205,   206,   207,    -1,   209,    -1,
12438:      211,    -1,    -1,   214,    -1,   216,   217,   218,   219,   220,
12439:       -1,    -1,   223,    -1,   225,    -1,    -1,   228,   229,   230,
12440:       -1,    -1,   233,   234,   235,   236,   237,   238,   239,   240,
12441:      241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
12442:      251,   252,   253,   254,   255,   256,   257,    -1,   259,   260,
12443:      261,   262,   263,    -1,   265,   266,    -1,   268,    -1,   270,
12444:      271,   272,   273,   274,   275,    -1,   277,   278,    -1,    -1,
12445:      281,   282,   283,    -1,    -1,   286,   287,    -1,   289,    -1,
12446:      291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
12447:      301,    -1,   303,   304,   305,   306,   307,   308,   309,   310,
12448:      311,    -1,   313,   314,   315,   316,   317,   318,   319,   320,
12449:      321,   322,   323,   324,   325,   326,    -1,   328,   329,   330,
12450:      331,   332,   333,   334,   335,   336,   337,   338,   339,    -1,
12451:      341,   342,    -1,   344,   345,   346,   347,   348,   349,   350,
12452:      351,   352,   353,   354,   355,   356,   357,   358,    -1,   360,
12453:      361,   362,   363,   364,    -1,   366,   367,   368,   369,   370,
12454:       -1,   372,   373,   374,   375,    -1,   377,   378,   379,   380,
12455:      381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
12456:       -1,   392,   393,    -1,   395,    -1,   397,   398,   399,   400,
12457:      401,    -1,   403,   404,    -1,    -1,   407,   408,   409,   410,
12458:      411,    -1,   413,   414,   415,   416,   417,   418,   419,   420,
12459:       -1,    -1,   423,   424,   425,   426,   427,    -1,    -1,   430,
12460:      431,   432,   433,   434,   435,   436,    -1,   438,    -1,   440,
12461:      441,   442,   443,    -1,    -1,   446,    -1,    -1,   449,   450,
12462:      451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
12463:      461,   462,   463,   464,   465,   466,   467,   468,   469,     3,
12464:       -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12465:       -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,
12466:       24,    25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,
12467:       -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,
12468:       -1,    45,    46,    47,    48,    49,    -1,    51,    52,    -1,
12469:       54,    55,    56,    57,    58,    59,    -1,    -1,    62,    63,
12470:       64,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
12471:       -1,    -1,    76,    77,    78,    79,    80,    -1,    82,    83,
12472:       84,    -1,    86,    87,    88,    89,    90,    91,    -1,    -1,
12473:       94,    95,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12474:      104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
12475:       -1,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
12476:      124,   125,   126,   127,   128,    -1,    -1,   131,   132,   133,
12477:      134,   135,    -1,   137,   138,   139,    -1,   141,   142,   143,
12478:       -1,   145,   146,   147,   148,   149,   150,   151,   152,   153,
12479:      154,    -1,   156,    -1,   158,   159,   160,   161,    -1,   163,
12480:       -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,
12481:       -1,   175,    -1,   177,   178,    -1,   180,   181,   182,   183,
12482:      184,   185,    -1,   187,   188,   189,   190,    -1,   192,   193,
12483:      194,   195,   196,   197,    -1,   199,    -1,   201,   202,   203,
12484:      204,   205,   206,   207,    -1,   209,    -1,   211,    -1,    -1,
12485:      214,    -1,   216,   217,   218,   219,   220,    -1,    -1,   223,
12486:       -1,   225,    -1,    -1,   228,   229,   230,    -1,    -1,   233,
12487:      234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
12488:      244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
12489:      254,   255,   256,   257,    -1,   259,   260,   261,   262,   263,
12490:       -1,   265,   266,    -1,   268,    -1,   270,   271,   272,   273,
12491:      274,   275,    -1,   277,   278,    -1,    -1,   281,   282,   283,
12492:       -1,    -1,   286,   287,    -1,   289,    -1,   291,   292,   293,
12493:      294,   295,   296,   297,   298,   299,   300,   301,    -1,   303,
12494:      304,   305,   306,   307,   308,   309,   310,   311,    -1,   313,
12495:      314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
12496:      324,   325,   326,    -1,   328,   329,   330,   331,   332,   333,
12497:      334,   335,   336,   337,   338,   339,    -1,   341,   342,    -1,
12498:      344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
12499:      354,   355,   356,   357,   358,    -1,   360,   361,   362,   363,
12500:      364,    -1,   366,   367,   368,   369,   370,    -1,   372,   373,
12501:      374,   375,    -1,   377,   378,   379,   380,   381,   382,   383,
12502:      384,   385,   386,   387,   388,   389,   390,    -1,   392,   393,
12503:       -1,   395,    -1,   397,   398,   399,   400,   401,    -1,   403,
12504:      404,    -1,    -1,   407,   408,   409,   410,   411,    -1,   413,
12505:      414,   415,   416,   417,   418,   419,   420,    -1,    -1,   423,
12506:      424,   425,   426,   427,    -1,    -1,   430,   431,   432,   433,
12507:      434,   435,   436,    -1,   438,    -1,   440,   441,   442,   443,
12508:       -1,    -1,   446,    -1,    -1,   449,   450,   451,   452,   453,
12509:      454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
12510:      464,   465,   466,   467,   468,   469,     3,    -1,    -1,    -1,
12511:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12512:       -1,    -1,    19,    20,    21,    22,    23,    24,    25,    26,
12513:       27,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,
12514:       -1,    38,    39,    -1,    41,    42,    43,    -1,    45,    46,
12515:       47,    48,    49,    -1,    51,    52,    -1,    54,    55,    56,
12516:       57,    58,    59,    -1,    -1,    62,    63,    64,    65,    66,
12517:       -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,    76,
12518:       77,    78,    79,    80,    -1,    82,    83,    84,    -1,    86,
12519:       87,    88,    89,    90,    91,    -1,    -1,    94,    95,    96,
12520:       -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,   105,   106,
12521:      107,   108,   109,   110,   111,   112,   113,    -1,   115,    -1,
12522:      117,   118,   119,   120,   121,   122,    -1,   124,   125,   126,
12523:      127,   128,    -1,    -1,   131,   132,   133,   134,   135,    -1,
12524:      137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
12525:      147,   148,   149,   150,   151,   152,   153,   154,    -1,   156,
12526:       -1,   158,   159,   160,   161,    -1,   163,    -1,   165,    -1,
12527:       -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,
12528:      177,   178,    -1,   180,   181,   182,   183,   184,   185,    -1,
12529:      187,   188,   189,   190,    -1,   192,   193,   194,   195,   196,
12530:      197,    -1,   199,    -1,   201,   202,   203,   204,   205,   206,
12531:      207,    -1,   209,    -1,   211,    -1,    -1,   214,    -1,   216,
12532:      217,   218,   219,   220,    -1,    -1,   223,    -1,   225,    -1,
12533:       -1,   228,   229,   230,    -1,    -1,   233,   234,   235,   236,
12534:      237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
12535:      247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
12536:      257,    -1,   259,   260,   261,   262,   263,    -1,   265,   266,
12537:       -1,   268,    -1,   270,   271,   272,   273,   274,   275,    -1,
12538:      277,   278,    -1,    -1,   281,   282,   283,    -1,    -1,   286,
12539:      287,    -1,   289,    -1,   291,   292,   293,   294,   295,   296,
12540:      297,   298,   299,   300,   301,    -1,   303,   304,   305,   306,
12541:      307,   308,   309,   310,   311,    -1,   313,   314,   315,   316,
12542:      317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
12543:       -1,   328,   329,   330,   331,   332,   333,   334,   335,   336,
12544:      337,   338,   339,    -1,   341,   342,    -1,   344,   345,   346,
12545:      347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
12546:      357,   358,    -1,   360,   361,   362,   363,   364,    -1,   366,
12547:      367,   368,   369,   370,    -1,   372,   373,   374,   375,    -1,
12548:      377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
12549:      387,   388,   389,   390,    -1,   392,   393,    -1,   395,    -1,
12550:      397,   398,   399,   400,   401,    -1,   403,   404,    -1,    -1,
12551:      407,   408,   409,   410,   411,    -1,   413,   414,   415,   416,
12552:      417,   418,   419,   420,    -1,    -1,   423,   424,   425,   426,
12553:      427,    -1,    -1,   430,   431,   432,   433,   434,   435,   436,
12554:       -1,   438,    -1,   440,   441,   442,   443,    -1,    -1,   446,
12555:       -1,    -1,   449,   450,   451,   452,   453,   454,   455,   456,
12556:      457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
12557:      467,   468,   469,     3,    -1,     5,    -1,    -1,    -1,    -1,
12558:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,
12559:       20,    21,    22,    23,    24,    25,    26,    -1,    28,    29,
12560:       30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,
12561:       -1,    41,    42,    43,    -1,    45,    46,    47,    48,    49,
12562:       -1,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
12563:       -1,    -1,    62,    63,    64,    65,    66,    -1,    68,    69,
12564:       70,    71,    72,    -1,    -1,    -1,    76,    77,    78,    79,
12565:       80,    -1,    82,    83,    84,    -1,    86,    87,    88,    89,
12566:       90,    91,    -1,    -1,    94,    95,    96,    -1,    -1,    -1,
12567:       -1,    -1,    -1,    -1,   104,   105,   106,   107,   108,   109,
12568:      110,   111,   112,   113,    -1,   115,    -1,   117,   118,   119,
12569:      120,   121,   122,    -1,   124,   125,   126,   127,   128,    -1,
12570:       -1,   131,   132,   133,   134,   135,    -1,   137,   138,   139,
12571:       -1,   141,   142,   143,    -1,   145,   146,   147,   148,   149,
12572:      150,   151,   152,   153,   154,    -1,   156,    -1,   158,   159,
12573:      160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,
12574:      170,   171,    -1,   173,    -1,   175,    -1,   177,   178,    -1,
12575:      180,   181,   182,   183,   184,   185,    -1,   187,   188,   189,
12576:      190,    -1,   192,   193,   194,   195,   196,   197,    -1,   199,
12577:       -1,   201,   202,   203,   204,   205,   206,   207,    -1,   209,
12578:       -1,   211,    -1,    -1,   214,    -1,   216,   217,   218,   219,
12579:      220,    -1,    -1,   223,    -1,   225,    -1,    -1,   228,   229,
12580:      230,    -1,    -1,   233,   234,   235,   236,   237,   238,   239,
12581:      240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
12582:      250,   251,   252,   253,   254,   255,   256,   257,    -1,   259,
12583:      260,   261,   262,   263,    -1,   265,   266,    -1,   268,    -1,
12584:      270,   271,   272,   273,   274,   275,    -1,   277,   278,    -1,
12585:       -1,   281,   282,   283,    -1,    -1,   286,   287,    -1,   289,
12586:       -1,   291,   292,   293,   294,   295,   296,   297,   298,   299,
12587:      300,   301,    -1,   303,   304,   305,   306,   307,   308,   309,
12588:      310,   311,    -1,   313,   314,   315,   316,   317,   318,   319,
12589:      320,   321,   322,   323,   324,   325,   326,    -1,   328,   329,
12590:      330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
12591:       -1,   341,   342,    -1,   344,   345,   346,   347,   348,   349,
12592:      350,   351,   352,   353,   354,   355,   356,   357,   358,    -1,
12593:      360,   361,   362,   363,   364,    -1,   366,   367,   368,   369,
12594:      370,    -1,   372,   373,   374,   375,    -1,   377,   378,   379,
12595:      380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
12596:      390,    -1,   392,   393,    -1,   395,    -1,   397,   398,   399,
12597:      400,   401,    -1,   403,   404,    -1,    -1,   407,   408,   409,
12598:      410,   411,    -1,   413,   414,   415,   416,   417,   418,   419,
12599:      420,    -1,    -1,   423,   424,   425,   426,   427,    -1,    -1,
12600:      430,   431,   432,   433,   434,   435,   436,    -1,   438,    -1,
12601:      440,   441,   442,   443,    -1,    -1,   446,    -1,    -1,   449,
12602:      450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
12603:      460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
12604:        3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12605:       -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,
12606:       23,    24,    25,    26,    -1,    28,    29,    30,    -1,    -1,
12607:       -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,
12608:       43,    -1,    45,    46,    47,    48,    49,    -1,    51,    52,
12609:       -1,    54,    55,    56,    57,    58,    59,    -1,    -1,    62,
12610:       63,    64,    65,    66,    -1,    68,    69,    70,    71,    72,
12611:       -1,    -1,    -1,    76,    77,    78,    79,    80,    -1,    82,
12612:       83,    84,    -1,    86,    87,    88,    89,    90,    91,    -1,
12613:       -1,    94,    95,    96,    -1,    -1,    -1,    -1,    -1,    -1,
12614:       -1,   104,   105,   106,   107,   108,   109,   110,   111,   112,
12615:      113,    -1,   115,    -1,   117,   118,   119,   120,   121,   122,
12616:       -1,   124,   125,   126,   127,   128,    -1,    -1,   131,   132,
12617:      133,   134,   135,    -1,   137,   138,   139,    -1,   141,   142,
12618:      143,    -1,   145,   146,   147,   148,   149,   150,   151,   152,
12619:      153,   154,    -1,   156,    -1,   158,   159,   160,   161,    -1,
12620:      163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,
12621:      173,    -1,   175,    -1,   177,   178,    -1,   180,   181,   182,
12622:      183,   184,   185,    -1,   187,   188,   189,   190,    -1,   192,
12623:      193,   194,   195,   196,   197,    -1,   199,    -1,   201,   202,
12624:      203,   204,   205,   206,   207,    -1,   209,    -1,   211,    -1,
12625:       -1,   214,    -1,   216,   217,   218,   219,   220,    -1,    -1,
12626:      223,    -1,   225,    -1,    -1,   228,   229,   230,    -1,    -1,
12627:      233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
12628:      243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
12629:      253,   254,   255,   256,   257,    -1,   259,   260,   261,   262,
12630:      263,    -1,   265,   266,    -1,   268,    -1,   270,   271,   272,
12631:      273,   274,   275,    -1,   277,   278,    -1,    -1,   281,   282,
12632:      283,    -1,    -1,   286,   287,    -1,   289,    -1,   291,   292,
12633:      293,   294,   295,   296,   297,   298,   299,   300,   301,    -1,
12634:      303,   304,   305,   306,   307,   308,   309,   310,   311,    -1,
12635:      313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
12636:      323,   324,   325,   326,    -1,   328,   329,   330,   331,   332,
12637:      333,   334,   335,   336,   337,   338,   339,    -1,   341,   342,
12638:       -1,   344,   345,   346,   347,   348,   349,   350,   351,   352,
12639:      353,   354,   355,   356,   357,   358,    -1,   360,   361,   362,
12640:      363,   364,    -1,   366,   367,   368,   369,   370,    -1,   372,
12641:      373,   374,   375,    -1,   377,   378,   379,   380,   381,   382,
12642:      383,   384,   385,   386,   387,   388,   389,   390,    -1,   392,
12643:      393,    -1,   395,    -1,   397,   398,   399,   400,   401,    -1,
12644:      403,   404,    -1,    -1,   407,   408,   409,   410,   411,    -1,
12645:      413,   414,   415,   416,   417,   418,   419,   420,    -1,    -1,
12646:      423,   424,   425,   426,   427,    -1,    -1,   430,   431,   432,
12647:      433,   434,   435,   436,    -1,   438,    -1,   440,   441,   442,
12648:      443,    -1,    -1,   446,    -1,    -1,   449,   450,   451,   452,
12649:      453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
12650:      463,   464,   465,   466,   467,   468,   469,     3,    -1,     5,
12651:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12652:       -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
12653:       26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,
12654:       -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,    45,
12655:       46,    47,    48,    49,    -1,    51,    52,    -1,    54,    55,
12656:       56,    57,    58,    59,    -1,    -1,    62,    63,    64,    65,
12657:       66,    -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,
12658:       76,    77,    78,    79,    80,    -1,    82,    83,    84,    -1,
12659:       86,    87,    88,    89,    90,    91,    -1,    -1,    94,    95,
12660:       96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,   105,
12661:      106,   107,   108,   109,   110,   111,   112,   113,    -1,   115,
12662:       -1,   117,   118,   119,   120,   121,   122,    -1,   124,   125,
12663:      126,   127,   128,    -1,    -1,   131,   132,   133,   134,   135,
12664:       -1,   137,   138,   139,    -1,   141,   142,   143,    -1,   145,
12665:      146,   147,   148,   149,   150,   151,   152,   153,   154,    -1,
12666:      156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
12667:       -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,
12668:       -1,   177,   178,    -1,   180,   181,   182,   183,   184,   185,
12669:       -1,   187,   188,   189,   190,    -1,   192,   193,   194,   195,
12670:      196,   197,    -1,   199,    -1,   201,   202,   203,   204,   205,
12671:      206,   207,    -1,   209,    -1,   211,    -1,    -1,   214,    -1,
12672:      216,   217,   218,   219,   220,    -1,    -1,   223,    -1,   225,
12673:       -1,    -1,   228,   229,   230,    -1,    -1,   233,   234,   235,
12674:      236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
12675:      246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
12676:      256,   257,    -1,   259,   260,   261,   262,   263,    -1,   265,
12677:      266,    -1,   268,    -1,   270,   271,   272,   273,   274,   275,
12678:       -1,   277,   278,    -1,    -1,   281,   282,   283,    -1,    -1,
12679:      286,   287,    -1,   289,    -1,   291,   292,   293,   294,   295,
12680:      296,   297,   298,   299,   300,   301,    -1,   303,   304,   305,
12681:      306,   307,   308,   309,   310,   311,    -1,   313,   314,   315,
12682:      316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
12683:      326,    -1,   328,   329,   330,   331,   332,   333,   334,   335,
12684:      336,   337,   338,   339,    -1,   341,   342,    -1,   344,   345,
12685:      346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
12686:      356,   357,   358,    -1,   360,   361,   362,   363,   364,    -1,
12687:      366,   367,   368,   369,   370,    -1,   372,   373,   374,   375,
12688:       -1,   377,   378,   379,   380,   381,   382,   383,   384,   385,
12689:      386,   387,   388,   389,   390,    -1,   392,   393,    -1,   395,
12690:       -1,   397,   398,   399,   400,   401,    -1,   403,   404,    -1,
12691:       -1,   407,   408,   409,   410,   411,    -1,   413,   414,   415,
12692:      416,   417,   418,   419,   420,    -1,    -1,   423,   424,   425,
12693:      426,   427,    -1,    -1,   430,   431,   432,   433,   434,   435,
12694:      436,    -1,   438,    -1,   440,   441,   442,   443,    -1,    -1,
12695:      446,    -1,    -1,   449,   450,   451,   452,   453,   454,   455,
12696:      456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
12697:      466,   467,   468,   469,     3,    -1,    -1,    -1,    -1,    -1,
12698:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12699:       19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
12700:       29,    30,    -1,    -1,    -1,    -1,    -1,    36,    -1,    38,
12701:       39,    -1,    41,    42,    43,    -1,    45,    46,    47,    48,
12702:       49,    -1,    51,    52,    -1,    54,    55,    56,    57,    58,
12703:       59,    -1,    -1,    62,    63,    64,    65,    66,    -1,    68,
12704:       69,    70,    71,    72,    -1,    -1,    -1,    76,    77,    78,
12705:       79,    80,    -1,    82,    83,    84,    -1,    86,    87,    88,
12706:       89,    90,    91,    -1,    -1,    94,    95,    96,    -1,    -1,
12707:       -1,    -1,    -1,    -1,    -1,   104,   105,   106,   107,   108,
12708:      109,   110,   111,   112,   113,    -1,   115,    -1,   117,   118,
12709:      119,   120,   121,   122,    -1,   124,   125,   126,   127,   128,
12710:       -1,    -1,   131,   132,   133,   134,   135,    -1,   137,   138,
12711:      139,    -1,   141,   142,   143,    -1,   145,   146,   147,   148,
12712:      149,   150,   151,   152,   153,   154,    -1,   156,    -1,   158,
12713:      159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,
12714:      169,   170,   171,    -1,   173,    -1,   175,    -1,   177,   178,
12715:       -1,   180,   181,   182,   183,   184,   185,    -1,   187,   188,
12716:      189,   190,    -1,   192,   193,   194,   195,   196,   197,    -1,
12717:      199,    -1,   201,   202,   203,   204,   205,   206,   207,    -1,
12718:      209,    -1,   211,    -1,    -1,   214,    -1,   216,   217,   218,
12719:      219,   220,    -1,    -1,   223,    -1,   225,    -1,    -1,   228,
12720:      229,   230,    -1,    -1,   233,   234,   235,   236,   237,   238,
12721:      239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
12722:      249,   250,   251,   252,   253,   254,   255,   256,   257,    -1,
12723:      259,   260,   261,   262,   263,    -1,   265,   266,    -1,   268,
12724:       -1,   270,   271,   272,   273,   274,   275,    -1,   277,   278,
12725:       -1,    -1,   281,   282,   283,    -1,    -1,   286,   287,    -1,
12726:      289,    -1,   291,   292,   293,   294,   295,   296,   297,   298,
12727:      299,   300,   301,    -1,   303,   304,   305,   306,   307,   308,
12728:      309,   310,   311,    -1,   313,   314,   315,   316,   317,   318,
12729:      319,   320,   321,   322,   323,   324,   325,   326,    -1,   328,
12730:      329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
12731:      339,    -1,   341,   342,    -1,   344,   345,   346,   347,   348,
12732:      349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
12733:       -1,   360,   361,   362,   363,   364,    -1,   366,   367,   368,
12734:      369,   370,    -1,   372,   373,   374,   375,    -1,   377,   378,
12735:      379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
12736:      389,   390,    -1,   392,   393,    -1,   395,    -1,   397,   398,
12737:      399,   400,   401,    -1,   403,   404,    -1,    -1,   407,   408,
12738:      409,   410,   411,    -1,   413,   414,   415,   416,   417,   418,
12739:      419,   420,    -1,    -1,   423,   424,   425,   426,   427,    -1,
12740:       -1,   430,   431,   432,   433,   434,   435,   436,    -1,   438,
12741:       -1,   440,   441,   442,   443,    -1,    -1,   446,    -1,    -1,
12742:      449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
12743:      459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
12744:      469,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12745:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,
12746:       22,    23,    24,    25,    26,    -1,    28,    29,    30,    -1,
12747:       -1,    -1,    -1,    -1,    36,    -1,    38,    39,    -1,    41,
12748:       42,    43,    -1,    45,    46,    47,    48,    49,    -1,    51,
12749:       52,    -1,    54,    55,    56,    57,    58,    59,    -1,    -1,
12750:       62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
12751:       72,    -1,    -1,    -1,    76,    77,    78,    79,    80,    -1,
12752:       82,    83,    84,    -1,    86,    87,    88,    89,    90,    91,
12753:       -1,    -1,    94,    95,    96,    -1,    -1,    -1,    -1,    -1,
12754:       -1,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
12755:      112,   113,    -1,   115,    -1,   117,   118,   119,   120,   121,
12756:      122,    -1,   124,   125,   126,   127,   128,    -1,    -1,   131,
12757:      132,   133,   134,   135,    -1,   137,   138,   139,    -1,   141,
12758:      142,   143,    -1,   145,   146,   147,   148,   149,   150,   151,
12759:      152,   153,   154,    -1,   156,    -1,   158,   159,   160,   161,
12760:       -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,
12761:       -1,   173,    -1,   175,    -1,   177,   178,    -1,   180,   181,
12762:      182,   183,   184,   185,    -1,   187,   188,   189,   190,    -1,
12763:      192,   193,   194,   195,   196,   197,    -1,   199,    -1,   201,
12764:      202,   203,   204,   205,   206,   207,    -1,   209,    -1,   211,
12765:       -1,    -1,   214,    -1,   216,   217,   218,   219,   220,    -1,
12766:       -1,   223,    -1,   225,    -1,    -1,   228,   229,   230,    -1,
12767:       -1,   233,   234,   235,   236,   237,   238,   239,   240,   241,
12768:      242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
12769:      252,   253,   254,   255,   256,   257,    -1,   259,   260,   261,
12770:      262,   263,    -1,   265,   266,    -1,   268,    -1,   270,   271,
12771:      272,   273,   274,   275,    -1,   277,   278,    -1,    -1,   281,
12772:      282,   283,    -1,    -1,   286,   287,    -1,   289,    -1,   291,
12773:      292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
12774:       -1,   303,   304,   305,   306,   307,   308,   309,   310,   311,
12775:       -1,   313,   314,   315,   316,   317,   318,   319,   320,   321,
12776:      322,   323,   324,   325,   326,    -1,   328,   329,   330,   331,
12777:      332,   333,   334,   335,   336,   337,   338,   339,    -1,   341,
12778:      342,    -1,   344,   345,   346,   347,   348,   349,   350,   351,
12779:      352,   353,   354,   355,   356,   357,   358,    -1,   360,   361,
12780:      362,   363,   364,    -1,   366,   367,   368,   369,   370,    -1,
12781:      372,   373,   374,   375,    -1,   377,   378,   379,   380,   381,
12782:      382,   383,   384,   385,   386,   387,   388,   389,   390,    -1,
12783:      392,   393,    -1,   395,    -1,   397,   398,   399,   400,   401,
12784:       -1,   403,   404,    -1,    -1,   407,   408,   409,   410,   411,
12785:       -1,   413,   414,   415,   416,   417,   418,   419,   420,    -1,
12786:       -1,   423,   424,   425,   426,   427,    -1,    -1,   430,   431,
12787:      432,   433,   434,   435,   436,    -1,   438,    -1,   440,   441,
12788:      442,   443,    -1,    -1,   446,    -1,    -1,   449,   450,   451,
12789:      452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
12790:      462,   463,   464,   465,   466,   467,   468,   469,     3,    -1,
12791:        5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12792:       -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,    24,
12793:       25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,
12794:       -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,
12795:       45,    46,    47,    48,    49,    -1,    51,    52,    -1,    54,
12796:       55,    56,    57,    58,    59,    -1,    -1,    62,    63,    64,
12797:       65,    66,    -1,    68,    69,    70,    71,    72,    -1,    -1,
12798:       -1,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
12799:       -1,    86,    87,    88,    89,    90,    91,    -1,    -1,    94,
12800:       95,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,
12801:      105,   106,   107,   108,   109,   110,   111,   112,   113,    -1,
12802:      115,    -1,   117,   118,   119,   120,   121,   122,    -1,   124,
12803:      125,   126,   127,   128,    -1,    -1,   131,   132,   133,   134,
12804:      135,    -1,   137,   138,   139,    -1,   141,   142,   143,    -1,
12805:      145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
12806:       -1,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,
12807:      165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,
12808:      175,    -1,   177,   178,    -1,   180,   181,   182,   183,   184,
12809:      185,    -1,   187,   188,   189,   190,    -1,   192,   193,   194,
12810:      195,   196,   197,    -1,   199,    -1,   201,   202,   203,   204,
12811:      205,   206,   207,    -1,   209,    -1,   211,    -1,    -1,   214,
12812:       -1,   216,   217,   218,   219,   220,    -1,    -1,   223,    -1,
12813:      225,    -1,    -1,   228,   229,   230,    -1,    -1,   233,   234,
12814:      235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
12815:      245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
12816:      255,   256,   257,    -1,   259,   260,   261,   262,   263,    -1,
12817:      265,   266,    -1,   268,    -1,   270,   271,   272,   273,   274,
12818:      275,    -1,   277,   278,    -1,    -1,   281,   282,   283,    -1,
12819:       -1,   286,   287,    -1,   289,    -1,   291,   292,   293,   294,
12820:      295,   296,   297,   298,   299,   300,   301,    -1,   303,   304,
12821:      305,   306,   307,   308,   309,   310,   311,    -1,   313,   314,
12822:      315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
12823:      325,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
12824:      335,   336,   337,   338,   339,    -1,   341,   342,    -1,   344,
12825:      345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
12826:      355,   356,   357,   358,    -1,   360,   361,   362,   363,   364,
12827:       -1,   366,   367,   368,   369,   370,    -1,   372,   373,   374,
12828:      375,    -1,   377,   378,   379,   380,   381,   382,   383,   384,
12829:      385,   386,   387,   388,   389,   390,    -1,   392,   393,    -1,
12830:      395,    -1,   397,   398,   399,   400,   401,    -1,   403,   404,
12831:       -1,    -1,   407,   408,   409,   410,   411,    -1,   413,   414,
12832:      415,   416,   417,   418,   419,   420,    -1,    -1,   423,   424,
12833:      425,   426,   427,    -1,    -1,   430,   431,   432,   433,   434,
12834:      435,   436,    -1,   438,    -1,   440,   441,   442,   443,    -1,
12835:       -1,   446,    -1,    -1,   449,   450,   451,   452,   453,   454,
12836:      455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
12837:      465,   466,   467,   468,   469,     3,    -1,    -1,    -1,    -1,
12838:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12839:       -1,    19,    20,    21,    22,    23,    24,    25,    26,    -1,
12840:       28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12841:       38,    39,    -1,    41,    42,    43,    -1,    45,    46,    47,
12842:       48,    49,    -1,    51,    52,    -1,    54,    55,    56,    57,
12843:       58,    59,    -1,    -1,    62,    63,    64,    65,    66,    -1,
12844:       68,    69,    70,    71,    72,    -1,    -1,    -1,    76,    77,
12845:       78,    79,    80,    -1,    82,    83,    84,    -1,    86,    87,
12846:       88,    89,    90,    91,    -1,    -1,    94,    95,    96,    -1,
12847:       -1,    -1,    -1,    -1,    -1,    -1,   104,   105,   106,   107,
12848:      108,   109,   110,   111,   112,   113,    -1,   115,    -1,   117,
12849:      118,   119,   120,   121,   122,    -1,   124,   125,   126,   127,
12850:      128,    -1,    -1,   131,   132,   133,   134,   135,    -1,   137,
12851:      138,   139,    -1,   141,   142,   143,    -1,   145,   146,   147,
12852:      148,   149,   150,   151,   152,   153,   154,    -1,   156,    -1,
12853:      158,   159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,
12854:       -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,   177,
12855:      178,    -1,   180,   181,   182,   183,   184,   185,    -1,   187,
12856:      188,   189,   190,    -1,   192,   193,   194,   195,   196,   197,
12857:       -1,   199,    -1,   201,   202,   203,   204,   205,   206,   207,
12858:       -1,   209,    -1,   211,    -1,    -1,   214,    -1,   216,   217,
12859:      218,   219,   220,    -1,    -1,   223,    -1,   225,    -1,    -1,
12860:      228,   229,   230,    -1,    -1,   233,   234,   235,   236,   237,
12861:      238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
12862:      248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
12863:       -1,   259,   260,   261,   262,   263,    -1,   265,   266,    -1,
12864:      268,    -1,   270,   271,   272,   273,   274,   275,    -1,   277,
12865:      278,    -1,    -1,   281,   282,   283,    -1,    -1,   286,   287,
12866:       -1,   289,    -1,   291,   292,   293,   294,   295,   296,   297,
12867:      298,   299,   300,   301,    -1,   303,   304,   305,   306,   307,
12868:      308,   309,   310,   311,    -1,   313,   314,   315,   316,   317,
12869:      318,   319,   320,   321,   322,   323,   324,   325,   326,    -1,
12870:      328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
12871:      338,   339,    -1,   341,   342,    -1,   344,   345,   346,   347,
12872:      348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
12873:      358,    -1,   360,   361,   362,   363,   364,    -1,   366,   367,
12874:      368,   369,   370,    -1,   372,   373,   374,   375,    -1,   377,
12875:      378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
12876:      388,   389,   390,    -1,   392,   393,    -1,   395,    -1,   397,
12877:      398,   399,   400,   401,    -1,   403,   404,    -1,    -1,   407,
12878:      408,   409,   410,   411,    -1,   413,   414,   415,   416,   417,
12879:      418,   419,   420,    -1,    -1,   423,   424,   425,   426,   427,
12880:       -1,    -1,   430,   431,   432,   433,   434,   435,   436,    -1,
12881:      438,    -1,   440,   441,   442,   443,    -1,    -1,   446,    -1,
12882:       -1,   449,   450,   451,   452,   453,   454,   455,   456,   457,
12883:      458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
12884:      468,   469,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12885:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,
12886:       21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
12887:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,
12888:       41,    42,    43,    -1,    45,    46,    47,    48,    49,    -1,
12889:       51,    52,    -1,    54,    55,    56,    57,    58,    59,    -1,
12890:       -1,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
12891:       71,    72,    -1,    -1,    -1,    76,    77,    78,    79,    80,
12892:       -1,    82,    83,    84,    -1,    86,    87,    88,    89,    90,
12893:       91,    -1,    -1,    94,    95,    96,    -1,    -1,    -1,    -1,
12894:       -1,    -1,    -1,   104,   105,   106,   107,   108,   109,   110,
12895:      111,   112,   113,    -1,   115,    -1,   117,   118,   119,   120,
12896:      121,   122,    -1,   124,   125,   126,   127,   128,    -1,    -1,
12897:      131,   132,   133,   134,   135,    -1,   137,   138,   139,    -1,
12898:      141,   142,   143,    -1,   145,   146,   147,   148,   149,   150,
12899:      151,   152,   153,   154,    -1,   156,    -1,   158,   159,   160,
12900:      161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,
12901:      171,    -1,   173,    -1,   175,    -1,   177,   178,    -1,   180,
12902:      181,   182,   183,   184,   185,    -1,   187,   188,   189,   190,
12903:       -1,   192,   193,   194,   195,   196,   197,    -1,   199,    -1,
12904:      201,   202,   203,   204,   205,   206,   207,    -1,   209,    -1,
12905:      211,    -1,    -1,   214,    -1,   216,   217,   218,   219,   220,
12906:       -1,    -1,   223,    -1,   225,    -1,    -1,   228,   229,   230,
12907:       -1,    -1,   233,   234,   235,   236,   237,   238,   239,   240,
12908:      241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
12909:      251,   252,   253,   254,   255,   256,   257,    -1,   259,   260,
12910:      261,   262,   263,    -1,   265,   266,    -1,   268,    -1,   270,
12911:      271,   272,   273,   274,   275,    -1,   277,   278,    -1,    -1,
12912:      281,   282,   283,    -1,    -1,   286,   287,    -1,   289,    -1,
12913:      291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
12914:      301,    -1,   303,   304,   305,   306,   307,   308,   309,   310,
12915:      311,    -1,   313,   314,   315,   316,   317,   318,   319,   320,
12916:      321,   322,   323,   324,   325,   326,    -1,   328,   329,   330,
12917:      331,   332,   333,   334,   335,   336,   337,   338,   339,    -1,
12918:      341,   342,    -1,   344,   345,   346,   347,   348,   349,   350,
12919:      351,   352,   353,   354,   355,   356,   357,   358,    -1,   360,
12920:      361,   362,   363,   364,    -1,   366,   367,   368,   369,   370,
12921:       -1,   372,   373,   374,   375,    -1,   377,   378,   379,   380,
12922:      381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
12923:       -1,   392,   393,    -1,   395,    -1,   397,   398,   399,   400,
12924:      401,    -1,   403,   404,    -1,    -1,   407,   408,   409,   410,
12925:      411,    -1,   413,   414,   415,   416,   417,   418,   419,   420,
12926:       -1,    -1,   423,   424,   425,   426,   427,    -1,    -1,   430,
12927:      431,   432,   433,   434,   435,   436,    -1,   438,    -1,   440,
12928:      441,   442,   443,    -1,    -1,   446,    -1,    -1,   449,   450,
12929:      451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
12930:      461,   462,   463,   464,   465,   466,   467,   468,   469,     3,
12931:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12932:       -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,
12933:       24,    25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,
12934:       -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,
12935:       -1,    45,    46,    47,    48,    49,    -1,    51,    52,    -1,
12936:       54,    55,    56,    57,    58,    59,    -1,    -1,    62,    63,
12937:       64,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
12938:       -1,    -1,    76,    77,    78,    79,    80,    -1,    82,    83,
12939:       84,    -1,    86,    87,    88,    89,    90,    91,    -1,    -1,
12940:       94,    95,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12941:      104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
12942:       -1,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
12943:      124,   125,   126,   127,   128,    -1,    -1,   131,   132,   133,
12944:      134,   135,    -1,   137,   138,   139,    -1,   141,   142,   143,
12945:       -1,   145,   146,   147,   148,   149,   150,   151,   152,   153,
12946:      154,    -1,   156,    -1,   158,   159,   160,   161,    -1,   163,
12947:       -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,
12948:       -1,   175,    -1,   177,   178,    -1,   180,   181,   182,   183,
12949:      184,   185,    -1,   187,   188,   189,   190,    -1,   192,   193,
12950:      194,   195,   196,   197,    -1,   199,    -1,   201,   202,   203,
12951:      204,   205,   206,   207,    -1,   209,    -1,   211,    -1,    -1,
12952:      214,    -1,   216,   217,   218,   219,   220,    -1,    -1,   223,
12953:       -1,   225,    -1,    -1,   228,   229,   230,    -1,    -1,   233,
12954:      234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
12955:      244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
12956:      254,   255,   256,   257,    -1,   259,   260,   261,   262,   263,
12957:       -1,   265,   266,    -1,   268,    -1,   270,   271,   272,   273,
12958:      274,   275,    -1,   277,   278,    -1,    -1,   281,   282,   283,
12959:       -1,    -1,   286,   287,    -1,   289,    -1,   291,   292,   293,
12960:      294,   295,   296,   297,   298,   299,   300,   301,    -1,   303,
12961:      304,   305,   306,   307,   308,   309,   310,   311,    -1,   313,
12962:      314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
12963:      324,   325,   326,    -1,   328,   329,   330,   331,   332,   333,
12964:      334,   335,   336,   337,   338,   339,    -1,   341,   342,    -1,
12965:      344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
12966:      354,   355,   356,   357,   358,    -1,   360,   361,   362,   363,
12967:      364,    -1,   366,   367,   368,   369,   370,    -1,   372,   373,
12968:      374,   375,    -1,   377,   378,   379,   380,   381,   382,   383,
12969:      384,   385,   386,   387,   388,   389,   390,    -1,   392,   393,
12970:       -1,   395,    -1,   397,   398,   399,   400,   401,    -1,   403,
12971:      404,    -1,    -1,   407,   408,   409,   410,   411,    -1,   413,
12972:      414,   415,   416,   417,   418,   419,   420,    -1,    -1,   423,
12973:      424,   425,   426,   427,    -1,    -1,   430,   431,   432,   433,
12974:      434,   435,   436,    -1,   438,    -1,   440,   441,   442,   443,
12975:       -1,    -1,   446,    -1,    -1,   449,   450,   451,   452,   453,
12976:      454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
12977:      464,   465,   466,   467,   468,   469,     3,    -1,    -1,    -1,
12978:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12979:       -1,    -1,    19,    20,    21,    22,    23,    24,    25,    26,
12980:       -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,
12981:       -1,    38,    39,    -1,    41,    42,    43,    -1,    45,    46,
12982:       47,    48,    49,    -1,    51,    52,    -1,    54,    55,    56,
12983:       57,    58,    59,    -1,    -1,    62,    63,    64,    65,    66,
12984:       -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,    76,
12985:       77,    78,    79,    80,    -1,    82,    83,    84,    -1,    86,
12986:       87,    88,    89,    90,    91,    -1,    -1,    94,    95,    96,
12987:       -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,   105,   106,
12988:      107,   108,   109,   110,   111,   112,   113,    -1,   115,    -1,
12989:      117,   118,   119,   120,   121,   122,    -1,   124,   125,   126,
12990:      127,   128,    -1,    -1,   131,   132,   133,   134,   135,    -1,
12991:      137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
12992:      147,   148,   149,   150,   151,   152,   153,   154,    -1,   156,
12993:       -1,   158,   159,   160,   161,    -1,   163,    -1,   165,    -1,
12994:       -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,
12995:      177,   178,    -1,   180,   181,   182,   183,   184,   185,    -1,
12996:      187,   188,   189,   190,    -1,   192,   193,   194,   195,   196,
12997:      197,    -1,   199,    -1,   201,   202,   203,   204,   205,   206,
12998:      207,    -1,   209,    -1,   211,    -1,    -1,   214,    -1,   216,
12999:      217,   218,   219,   220,    -1,    -1,   223,    -1,   225,    -1,
13000:       -1,   228,   229,   230,    -1,    -1,   233,   234,   235,   236,
13001:      237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
13002:      247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
13003:      257,    -1,   259,   260,   261,   262,   263,    -1,   265,   266,
13004:       -1,   268,    -1,   270,   271,   272,   273,   274,   275,    -1,
13005:      277,   278,    -1,    -1,   281,   282,   283,    -1,    -1,   286,
13006:      287,    -1,   289,    -1,   291,   292,   293,   294,   295,   296,
13007:      297,   298,   299,   300,   301,    -1,   303,   304,   305,   306,
13008:      307,   308,   309,   310,   311,    -1,   313,   314,   315,   316,
13009:      317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
13010:       -1,   328,   329,   330,   331,   332,   333,   334,   335,   336,
13011:      337,   338,   339,    -1,   341,   342,    -1,   344,   345,   346,
13012:      347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
13013:      357,   358,    -1,   360,   361,   362,   363,   364,    -1,   366,
13014:      367,   368,   369,   370,    -1,   372,   373,   374,   375,    -1,
13015:      377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
13016:      387,   388,   389,   390,    -1,   392,   393,    -1,   395,    -1,
13017:      397,   398,   399,   400,   401,    -1,   403,   404,    -1,    -1,
13018:      407,   408,   409,   410,   411,    -1,   413,   414,   415,   416,
13019:      417,   418,   419,   420,    -1,    -1,   423,   424,   425,   426,
13020:      427,    -1,    -1,   430,   431,   432,   433,   434,   435,   436,
13021:       -1,   438,    -1,   440,   441,   442,   443,    -1,    -1,   446,
13022:       -1,    -1,   449,   450,   451,   452,   453,   454,   455,   456,
13023:      457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
13024:      467,   468,   469,     3,    -1,    -1,    -1,    -1,    -1,    -1,
13025:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,
13026:       20,    21,    22,    23,    24,    25,    26,    -1,    28,    29,
13027:       30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,
13028:       -1,    41,    42,    43,    -1,    45,    46,    47,    48,    49,
13029:       -1,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
13030:       -1,    -1,    62,    63,    64,    65,    66,    -1,    68,    69,
13031:       70,    71,    72,    -1,    -1,    -1,    76,    77,    78,    79,
13032:       80,    -1,    82,    83,    84,    -1,    86,    87,    88,    89,
13033:       90,    91,    -1,    -1,    94,    95,    96,    -1,    -1,    -1,
13034:       -1,    -1,    -1,    -1,   104,   105,   106,   107,   108,   109,
13035:      110,   111,   112,   113,    -1,   115,    -1,   117,   118,   119,
13036:      120,   121,   122,    -1,   124,   125,   126,   127,   128,    -1,
13037:       -1,   131,   132,   133,   134,   135,    -1,   137,   138,   139,
13038:       -1,   141,   142,   143,    -1,   145,   146,   147,   148,   149,
13039:      150,   151,   152,   153,   154,    -1,   156,    -1,   158,   159,
13040:      160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,
13041:      170,   171,    -1,   173,    -1,   175,    -1,   177,   178,    -1,
13042:      180,   181,   182,   183,   184,   185,    -1,   187,   188,   189,
13043:      190,    -1,   192,   193,   194,   195,   196,   197,    -1,   199,
13044:       -1,   201,   202,   203,   204,   205,   206,   207,    -1,   209,
13045:       -1,   211,    -1,    -1,   214,    -1,   216,   217,   218,   219,
13046:      220,    -1,    -1,   223,    -1,   225,    -1,    -1,   228,   229,
13047:      230,    -1,    -1,   233,   234,   235,   236,   237,   238,   239,
13048:      240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
13049:      250,   251,   252,   253,   254,   255,   256,   257,    -1,   259,
13050:      260,   261,   262,   263,    -1,   265,   266,    -1,   268,    -1,
13051:      270,   271,   272,   273,   274,   275,    -1,   277,   278,    -1,
13052:       -1,   281,   282,   283,    -1,    -1,   286,   287,    -1,   289,
13053:       -1,   291,   292,   293,   294,   295,   296,   297,   298,   299,
13054:      300,   301,    -1,   303,   304,   305,   306,   307,   308,   309,
13055:      310,   311,    -1,   313,   314,   315,   316,   317,   318,   319,
13056:      320,   321,   322,   323,   324,   325,   326,    -1,   328,   329,
13057:      330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
13058:       -1,   341,   342,    -1,   344,   345,   346,   347,   348,   349,
13059:      350,   351,   352,   353,   354,   355,   356,   357,   358,    -1,
13060:      360,   361,   362,   363,   364,    -1,   366,   367,   368,   369,
13061:      370,    -1,   372,   373,   374,   375,    -1,   377,   378,   379,
13062:      380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
13063:      390,    -1,   392,   393,    -1,   395,    -1,   397,   398,   399,
13064:      400,   401,    -1,   403,   404,    -1,    -1,   407,   408,   409,
13065:      410,   411,    -1,   413,   414,   415,   416,   417,   418,   419,
13066:      420,    -1,    -1,   423,   424,   425,   426,   427,    -1,    -1,
13067:      430,   431,   432,   433,   434,   435,   436,    -1,   438,    -1,
13068:      440,   441,   442,   443,    -1,    -1,   446,    -1,    -1,   449,
13069:      450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
13070:      460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
13071:        3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
13072:       -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,
13073:       23,    24,    25,    26,    -1,    28,    29,    30,    -1,    -1,
13074:       -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,
13075:       43,    -1,    45,    46,    47,    48,    49,    -1,    51,    52,
13076:       -1,    54,    55,    56,    57,    58,    59,    -1,    -1,    62,
13077:       63,    64,    65,    66,    -1,    68,    69,    70,    71,    72,
13078:       -1,    -1,    -1,    76,    77,    78,    79,    80,    -1,    82,
13079:       83,    84,    -1,    86,    87,    88,    89,    90,    91,    -1,
13080:       -1,    94,    95,    96,    -1,    -1,    -1,    -1,    -1,    -1,
13081:       -1,   104,   105,   106,   107,   108,   109,   110,   111,   112,
13082:      113,    -1,   115,    -1,   117,   118,   119,   120,   121,   122,
13083:       -1,   124,   125,   126,   127,   128,    -1,    -1,   131,   132,
13084:      133,   134,   135,    -1,   137,   138,   139,    -1,   141,   142,
13085:      143,    -1,   145,   146,   147,   148,   149,   150,   151,   152,
13086:      153,   154,    -1,   156,    -1,   158,   159,   160,   161,    -1,
13087:      163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,
13088:      173,    -1,   175,    -1,   177,   178,    -1,   180,   181,   182,
13089:      183,   184,   185,    -1,   187,   188,   189,   190,    -1,   192,
13090:      193,   194,   195,   196,   197,    -1,   199,    -1,   201,   202,
13091:      203,   204,   205,   206,   207,    -1,   209,    -1,   211,    -1,
13092:       -1,   214,    -1,   216,   217,   218,   219,   220,    -1,    -1,
13093:      223,    -1,   225,    -1,    -1,   228,   229,   230,    -1,    -1,
13094:      233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
13095:      243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
13096:      253,   254,   255,   256,   257,    -1,   259,   260,   261,   262,
13097:      263,    -1,   265,   266,    -1,   268,    -1,   270,   271,   272,
13098:      273,   274,   275,    -1,   277,   278,    -1,    -1,   281,   282,
13099:      283,    -1,    -1,   286,   287,    -1,   289,    -1,   291,   292,
13100:      293,   294,   295,   296,   297,   298,   299,   300,   301,    -1,
13101:      303,   304,   305,   306,   307,   308,   309,   310,   311,    -1,
13102:      313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
13103:      323,   324,   325,   326,    -1,   328,   329,   330,   331,   332,
13104:      333,   334,   335,   336,   337,   338,   339,    -1,   341,   342,
13105:       -1,   344,   345,   346,   347,   348,   349,   350,   351,   352,
13106:      353,   354,   355,   356,   357,   358,    -1,   360,   361,   362,
13107:      363,   364,    -1,   366,   367,   368,   369,   370,    -1,   372,
13108:      373,   374,   375,    -1,   377,   378,   379,   380,   381,   382,
13109:      383,   384,   385,   386,   387,   388,   389,   390,    -1,   392,
13110:      393,    -1,   395,    -1,   397,   398,   399,   400,   401,    -1,
13111:      403,   404,    -1,    -1,   407,   408,   409,   410,   411,    -1,
13112:      413,   414,   415,   416,   417,   418,   419,   420,    -1,    -1,
13113:      423,   424,   425,   426,   427,    -1,    -1,   430,   431,   432,
13114:      433,   434,   435,   436,    -1,   438,    -1,   440,   441,   442,
13115:      443,    -1,    -1,   446,    -1,    -1,   449,   450,   451,   452,
13116:      453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
13117:      463,   464,   465,   466,   467,   468,   469,     3,    -1,    -1,
13118:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
13119:       -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
13120:       26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,
13121:       -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,    45,
13122:       46,    47,    48,    49,    -1,    51,    52,    -1,    54,    55,
13123:       56,    57,    58,    59,    -1,    -1,    62,    63,    64,    65,
13124:       66,    -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,
13125:       76,    77,    78,    79,    80,    -1,    82,    83,    84,    -1,
13126:       86,    87,    88,    89,    90,    91,    -1,    -1,    94,    95,
13127:       96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,   105,
13128:      106,   107,   108,   109,   110,   111,   112,   113,    -1,   115,
13129:       -1,   117,   118,   119,   120,   121,   122,    -1,   124,   125,
13130:      126,   127,   128,    -1,    -1,   131,   132,   133,   134,   135,
13131:       -1,   137,   138,   139,    -1,   141,   142,   143,    -1,   145,
13132:      146,   147,   148,   149,   150,   151,   152,   153,   154,    -1,
13133:      156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
13134:       -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,
13135:       -1,   177,   178,    -1,   180,   181,   182,   183,   184,   185,
13136:       -1,   187,   188,   189,   190,    -1,   192,   193,   194,   195,
13137:      196,   197,    -1,   199,    -1,   201,   202,   203,   204,   205,
13138:      206,   207,    -1,   209,    -1,   211,    -1,    -1,   214,    -1,
13139:      216,   217,   218,   219,   220,    -1,    -1,   223,    -1,   225,
13140:       -1,    -1,   228,   229,   230,    -1,    -1,   233,   234,   235,
13141:      236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
13142:      246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
13143:      256,   257,    -1,   259,   260,   261,   262,   263,    -1,   265,
13144:      266,    -1,   268,    -1,   270,   271,   272,   273,   274,   275,
13145:       -1,   277,   278,    -1,    -1,   281,   282,   283,    -1,    -1,
13146:      286,   287,    -1,   289,    -1,   291,   292,   293,   294,   295,
13147:      296,   297,   298,   299,   300,   301,    -1,   303,   304,   305,
13148:      306,   307,   308,   309,   310,   311,    -1,   313,   314,   315,
13149:      316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
13150:      326,    -1,   328,   329,   330,   331,   332,   333,   334,   335,
13151:      336,   337,   338,   339,    -1,   341,   342,    -1,   344,   345,
13152:      346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
13153:      356,   357,   358,    -1,   360,   361,   362,   363,   364,    -1,
13154:      366,   367,   368,   369,   370,    -1,   372,   373,   374,   375,
13155:       -1,   377,   378,   379,   380,   381,   382,   383,   384,   385,
13156:      386,   387,   388,   389,   390,    -1,   392,   393,    -1,   395,
13157:       -1,   397,   398,   399,   400,   401,    -1,   403,   404,    -1,
13158:       -1,   407,   408,   409,   410,   411,    -1,   413,   414,   415,
13159:      416,   417,   418,   419,   420,    -1,    -1,   423,   424,   425,
13160:      426,   427,    -1,    -1,   430,   431,   432,   433,   434,   435,
13161:      436,    -1,   438,    -1,   440,   441,   442,   443,    -1,    -1,
13162:      446,    -1,    -1,   449,   450,   451,   452,   453,   454,   455,
13163:      456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
13164:      466,   467,   468,   469,     3,    -1,    -1,    -1,    -1,    -1,
13165:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
13166:       19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
13167:       29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
13168:       39,    -1,    41,    42,    43,    -1,    45,    46,    47,    48,
13169:       49,    -1,    51,    52,    -1,    54,    55,    56,    57,    58,
13170:       59,    -1,    -1,    62,    63,    64,    65,    66,    -1,    68,
13171:       69,    70,    71,    72,    -1,    -1,    -1,    76,    77,    78,
13172:       79,    80,    -1,    82,    83,    84,    -1,    86,    87,    88,
13173:       89,    90,    91,    -1,    -1,    94,    95,    96,    -1,    -1,
13174:       -1,    -1,    -1,    -1,    -1,   104,   105,   106,   107,   108,
13175:      109,   110,   111,   112,   113,    -1,   115,    -1,   117,   118,
13176:      119,   120,   121,   122,    -1,   124,   125,   126,   127,   128,
13177:       -1,    -1,   131,   132,   133,   134,   135,    -1,   137,   138,
13178:      139,    -1,   141,   142,   143,    -1,   145,   146,   147,   148,
13179:      149,   150,   151,   152,   153,   154,    -1,   156,    -1,   158,
13180:      159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,
13181:      169,   170,   171,    -1,   173,    -1,   175,    -1,   177,   178,
13182:       -1,   180,   181,   182,   183,   184,   185,    -1,   187,   188,
13183:      189,   190,    -1,   192,   193,   194,   195,   196,   197,    -1,
13184:      199,    -1,   201,   202,   203,   204,   205,   206,   207,    -1,
13185:      209,    -1,   211,    -1,    -1,   214,    -1,   216,   217,   218,
13186:      219,   220,    -1,    -1,   223,    -1,   225,    -1,    -1,   228,
13187:      229,   230,    -1,    -1,   233,   234,   235,   236,   237,   238,
13188:      239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
13189:      249,   250,   251,   252,   253,   254,   255,   256,   257,    -1,
13190:      259,   260,   261,   262,   263,    -1,   265,   266,    -1,   268,
13191:       -1,   270,   271,   272,   273,   274,   275,    -1,   277,   278,
13192:       -1,    -1,   281,   282,   283,    -1,    -1,   286,   287,    -1,
13193:      289,    -1,   291,   292,   293,   294,   295,   296,   297,   298,
13194:      299,   300,   301,    -1,   303,   304,   305,   306,   307,   308,
13195:      309,   310,   311,    -1,   313,   314,   315,   316,   317,   318,
13196:      319,   320,   321,   322,   323,   324,   325,   326,    -1,   328,
13197:      329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
13198:      339,    -1,   341,   342,    -1,   344,   345,   346,   347,   348,
13199:      349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
13200:       -1,   360,   361,   362,   363,   364,    -1,   366,   367,   368,
13201:      369,   370,    -1,   372,   373,   374,   375,    -1,   377,   378,
13202:      379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
13203:      389,   390,    -1,   392,   393,    -1,   395,    -1,   397,   398,
13204:      399,   400,   401,    -1,   403,   404,    -1,    -1,   407,   408,
13205:      409,   410,   411,    -1,   413,   414,   415,   416,   417,   418,
13206:      419,   420,    -1,    -1,   423,   424,   425,   426,   427,    -1,
13207:       -1,   430,   431,   432,   433,   434,   435,   436,    -1,   438,
13208:       -1,   440,   441,   442,   443,    -1,    -1,   446,    -1,    -1,
13209:      449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
13210:      459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
13211:      469,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
13212:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,
13213:       22,    23,    24,    25,    26,    -1,    28,    29,    30,    -1,
13214:       -1,    -1,    -1,    -1,    36,    -1,    38,    39,    -1,    41,
13215:       42,    43,    -1,    45,    46,    47,    48,    49,    -1,    51,
13216:       52,    -1,    54,    55,    56,    57,    58,    59,    -1,    -1,
13217:       62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
13218:       72,    -1,    -1,    -1,    76,    77,    78,    79,    80,    -1,
13219:       82,    83,    84,    -1,    86,    87,    88,    89,    90,    91,
13220:       -1,    -1,    94,    95,    96,    -1,    -1,    -1,    -1,    -1,
13221:       -1,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
13222:      112,   113,    -1,   115,    -1,   117,   118,   119,   120,   121,
13223:      122,    -1,   124,   125,   126,   127,   128,    -1,    -1,   131,
13224:      132,   133,   134,   135,    -1,   137,   138,   139,    -1,   141,
13225:      142,   143,    -1,   145,   146,   147,   148,   149,   150,   151,
13226:      152,   153,   154,    -1,   156,    -1,   158,   159,   160,   161,
13227:       -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,
13228:       -1,   173,    -1,   175,    -1,   177,   178,    -1,   180,   181,
13229:      182,   183,   184,   185,    -1,   187,   188,   189,   190,    -1,
13230:      192,   193,   194,   195,   196,   197,    -1,   199,    -1,   201,
13231:      202,   203,   204,   205,   206,   207,    -1,   209,    -1,   211,
13232:       -1,    -1,   214,    -1,   216,   217,   218,   219,   220,    -1,
13233:       -1,   223,    -1,   225,    -1,    -1,   228,   229,   230,    -1,
13234:       -1,   233,   234,   235,   236,   237,   238,   239,   240,   241,
13235:      242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
13236:      252,   253,   254,   255,   256,   257,    -1,   259,   260,   261,
13237:      262,   263,    -1,   265,   266,    -1,   268,    -1,   270,   271,
13238:      272,   273,   274,   275,    -1,   277,   278,    -1,    -1,   281,
13239:      282,   283,    -1,    -1,   286,   287,    -1,   289,    -1,   291,
13240:      292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
13241:       -1,   303,   304,   305,   306,   307,   308,   309,   310,   311,
13242:       -1,   313,   314,   315,   316,   317,   318,   319,   320,   321,
13243:      322,   323,   324,   325,   326,    -1,   328,   329,   330,   331,
13244:      332,   333,   334,   335,   336,   337,   338,   339,    -1,   341,
13245:      342,    -1,   344,   345,   346,   347,   348,   349,   350,   351,
13246:      352,   353,   354,   355,   356,   357,   358,    -1,   360,   361,
13247:      362,   363,   364,    -1,    -1,   367,   368,   369,   370,    -1,
13248:      372,   373,   374,   375,    -1,   377,   378,   379,   380,   381,
13249:      382,   383,   384,   385,   386,   387,   388,   389,   390,    -1,
13250:      392,   393,    -1,   395,    -1,   397,   398,   399,   400,   401,
13251:       -1,   403,   404,    -1,    -1,   407,   408,   409,   410,   411,
13252:       -1,   413,   414,   415,   416,   417,   418,   419,   420,    -1,
13253:       -1,   423,   424,   425,   426,   427,    -1,    -1,   430,   431,
13254:      432,   433,   434,   435,   436,    -1,   438,    -1,   440,   441,
13255:      442,   443,    -1,    -1,   446,    -1,    -1,   449,   450,   451,
13256:      452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
13257:      462,   463,   464,   465,   466,   467,   468,   469,     3,    -1,
13258:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
13259:       -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,    24,
13260:       25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,
13261:       -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,
13262:       45,    46,    47,    48,    49,    -1,    51,    52,    -1,    54,
13263:       55,    56,    57,    58,    59,    -1,    -1,    62,    63,    64,
13264:       65,    66,    -1,    68,    69,    70,    71,    72,    -1,    -1,
13265:       -1,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
13266:       -1,    86,    87,    88,    89,    90,    91,    -1,    -1,    94,
13267:       95,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,
13268:      105,   106,   107,   108,   109,   110,   111,   112,   113,    -1,
13269:      115,    -1,   117,   118,   119,   120,   121,   122,    -1,   124,
13270:      125,   126,   127,   128,    -1,    -1,   131,   132,   133,   134,
13271:      135,    -1,   137,   138,   139,    -1,   141,   142,   143,    -1,
13272:      145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
13273:       -1,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,
13274:      165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,
13275:      175,    -1,   177,   178,    -1,   180,   181,   182,   183,   184,
13276:      185,    -1,   187,   188,   189,   190,    -1,   192,   193,   194,
13277:      195,   196,   197,    -1,   199,    -1,   201,   202,   203,   204,
13278:      205,   206,   207,    -1,   209,    -1,   211,    -1,    -1,   214,
13279:       -1,   216,   217,   218,   219,   220,    -1,    -1,   223,    -1,
13280:      225,    -1,    -1,   228,   229,   230,    -1,    -1,   233,   234,
13281:      235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
13282:      245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
13283:      255,   256,   257,    -1,   259,   260,   261,   262,   263,    -1,
13284:      265,   266,    -1,   268,    -1,   270,   271,   272,   273,   274,
13285:      275,    -1,   277,   278,    -1,    -1,   281,   282,   283,    -1,
13286:       -1,   286,   287,    -1,   289,    -1,   291,   292,   293,   294,
13287:      295,   296,   297,   298,   299,   300,   301,    -1,   303,   304,
13288:      305,   306,   307,   308,   309,   310,   311,    -1,   313,   314,
13289:      315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
13290:      325,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
13291:      335,   336,   337,   338,   339,    -1,   341,   342,    -1,   344,
13292:      345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
13293:      355,   356,   357,   358,    -1,   360,   361,   362,   363,   364,
13294:       -1,   366,   367,   368,   369,   370,    -1,   372,   373,   374,
13295:      375,    -1,   377,   378,   379,   380,   381,   382,   383,   384,
13296:      385,   386,   387,   388,   389,   390,    -1,   392,   393,    -1,
13297:      395,    -1,   397,   398,   399,   400,   401,    -1,   403,   404,
13298:       -1,    -1,   407,   408,   409,   410,   411,    -1,   413,   414,
13299:      415,   416,   417,   418,   419,   420,    -1,    -1,   423,   424,
13300:      425,   426,   427,    -1,    -1,   430,   431,   432,   433,   434,
13301:      435,   436,    -1,   438,    -1,   440,   441,   442,   443,    -1,
13302:       -1,   446,    -1,    -1,   449,   450,   451,   452,   453,   454,
13303:      455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
13304:      465,   466,   467,   468,   469,     3,    -1,    -1,    -1,    -1,
13305:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
13306:       -1,    19,    20,    21,    22,    23,    24,    25,    26,    -1,
13307:       28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
13308:       38,    39,    -1,    41,    42,    43,    -1,    45,    46,    47,
13309:       48,    49,    -1,    51,    52,    -1,    54,    55,    56,    57,
13310:       58,    59,    -1,    -1,    62,    63,    64,    65,    66,    -1,
13311:       68,    69,    70,    71,    72,    -1,    -1,    -1,    76,    77,
13312:       78,    79,    80,    -1,    82,    83,    84,    -1,    86,    87,
13313:       88,    89,    90,    91,    -1,    -1,    94,    95,    96,    -1,
13314:       -1,    -1,    -1,    -1,    -1,    -1,   104,   105,   106,   107,
13315:      108,   109,   110,   111,   112,   113,    -1,   115,    -1,   117,
13316:      118,   119,   120,   121,   122,    -1,   124,   125,   126,   127,
13317:      128,    -1,    -1,   131,   132,   133,   134,   135,    -1,   137,
13318:      138,   139,    -1,   141,   142,   143,    -1,   145,   146,   147,
13319:      148,   149,   150,   151,   152,   153,   154,    -1,   156,    -1,
13320:      158,   159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,
13321:       -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,   177,
13322:      178,    -1,   180,   181,   182,   183,   184,   185,    -1,   187,
13323:      188,   189,   190,    -1,   192,   193,   194,   195,   196,   197,
13324:       -1,   199,    -1,   201,   202,   203,   204,   205,   206,   207,
13325:       -1,   209,    -1,   211,    -1,    -1,   214,    -1,   216,   217,
13326:      218,   219,   220,    -1,    -1,   223,    -1,   225,    -1,    -1,
13327:      228,   229,   230,    -1,    -1,   233,   234,   235,   236,   237,
13328:      238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
13329:      248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
13330:       -1,   259,   260,   261,   262,   263,    -1,   265,   266,    -1,
13331:      268,    -1,   270,   271,   272,   273,   274,   275,    -1,   277,
13332:      278,    -1,    -1,   281,   282,   283,    -1,    -1,   286,   287,
13333:       -1,   289,    -1,   291,   292,   293,   294,   295,   296,   297,
13334:      298,   299,   300,   301,    -1,   303,   304,   305,   306,   307,
13335:      308,   309,   310,   311,    -1,   313,   314,   315,   316,   317,
13336:      318,   319,   320,   321,   322,   323,   324,   325,   326,    -1,
13337:      328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
13338:      338,   339,    -1,   341,   342,    -1,   344,   345,   346,   347,
13339:      348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
13340:      358,    -1,   360,   361,   362,   363,   364,    -1,   366,   367,
13341:      368,   369,   370,    -1,   372,   373,   374,   375,    -1,   377,
13342:      378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
13343:      388,   389,   390,    -1,   392,   393,    -1,   395,    -1,   397,
13344:      398,   399,   400,   401,    -1,   403,   404,    -1,    -1,   407,
13345:      408,   409,   410,   411,    -1,   413,   414,   415,   416,   417,
13346:      418,   419,   420,    -1,    -1,   423,   424,   425,   426,   427,
13347:       -1,    -1,   430,   431,   432,   433,   434,   435,   436,    -1,
13348:      438,    -1,   440,   441,   442,   443,    -1,    -1,   446,    -1,
13349:       -1,   449,   450,   451,   452,   453,   454,   455,   456,   457,
13350:      458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
13351:      468,   469,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
13352:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,
13353:       21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
13354:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,
13355:       41,    42,    43,    -1,    45,    46,    47,    48,    49,    -1,
13356:       51,    52,    -1,    54,    55,    56,    57,    58,    59,    -1,
13357:       -1,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
13358:       71,    72,    -1,    -1,    -1,    76,    77,    78,    79,    80,
13359:       -1,    82,    83,    84,    -1,    86,    87,    88,    89,    90,
13360:       91,    -1,    -1,    94,    95,    96,    -1,    -1,    -1,    -1,
13361:       -1,    -1,    -1,   104,   105,   106,   107,   108,   109,   110,
13362:      111,   112,   113,    -1,   115,    -1,   117,   118,   119,   120,
13363:      121,   122,    -1,   124,   125,   126,   127,   128,    -1,    -1,
13364:      131,   132,   133,   134,   135,    -1,   137,   138,   139,    -1,
13365:      141,   142,   143,    -1,   145,   146,   147,   148,   149,   150,
13366:      151,   152,   153,   154,    -1,   156,    -1,   158,   159,   160,
13367:      161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,
13368:      171,    -1,   173,    -1,   175,    -1,   177,   178,    -1,   180,
13369:      181,   182,   183,   184,   185,    -1,   187,   188,   189,   190,
13370:       -1,   192,   193,   194,   195,   196,   197,    -1,   199,    -1,
13371:      201,   202,   203,   204,   205,   206,   207,    -1,   209,    -1,
13372:      211,    -1,    -1,   214,    -1,   216,   217,   218,   219,   220,
13373:       -1,    -1,   223,    -1,   225,    -1,    -1,   228,   229,   230,
13374:       -1,    -1,   233,   234,   235,   236,   237,   238,   239,   240,
13375:      241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
13376:      251,   252,   253,   254,   255,   256,   257,    -1,   259,   260,
13377:      261,   262,   263,    -1,   265,   266,    -1,   268,    -1,   270,
13378:      271,   272,   273,   274,   275,    -1,   277,   278,    -1,    -1,
13379:      281,   282,   283,    -1,    -1,   286,   287,    -1,   289,    -1,
13380:      291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
13381:      301,    -1,   303,   304,   305,   306,   307,   308,   309,   310,
13382:      311,    -1,   313,   314,   315,   316,   317,   318,   319,   320,
13383:      321,   322,   323,   324,   325,   326,    -1,   328,   329,   330,
13384:      331,   332,   333,   334,   335,   336,   337,   338,   339,    -1,
13385:      341,   342,    -1,   344,   345,   346,   347,   348,   349,   350,
13386:      351,   352,   353,   354,   355,   356,   357,   358,    -1,   360,
13387:      361,   362,   363,   364,    -1,   366,   367,   368,   369,   370,
13388:       -1,   372,   373,   374,   375,    -1,   377,   378,   379,   380,
13389:      381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
13390:       -1,   392,   393,    -1,   395,    -1,   397,   398,   399,   400,
13391:      401,    -1,   403,   404,    -1,    -1,   407,   408,   409,   410,
13392:      411,    -1,   413,   414,   415,   416,   417,   418,   419,   420,
13393:       -1,    -1,   423,   424,   425,   426,   427,    -1,    -1,   430,
13394:      431,   432,   433,   434,   435,   436,    -1,   438,    -1,   440,
13395:      441,   442,   443,    -1,    -1,   446,    -1,    -1,   449,   450,
13396:      451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
13397:      461,   462,   463,   464,   465,   466,   467,   468,   469,     3,
13398:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
13399:       -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,
13400:       24,    25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,
13401:       -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,
13402:       -1,    45,    46,    47,    48,    49,    -1,    51,    52,    -1,
13403:       54,    55,    56,    57,    58,    59,    -1,    -1,    62,    63,
13404:       64,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
13405:       -1,    -1,    76,    77,    78,    79,    80,    -1,    82,    83,
13406:       84,    -1,    86,    87,    88,    89,    90,    91,    -1,    -1,
13407:       94,    95,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
13408:      104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
13409:       -1,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
13410:      124,   125,   126,   127,   128,    -1,    -1,   131,   132,   133,
13411:      134,   135,    -1,   137,   138,   139,    -1,   141,   142,   143,
13412:       -1,   145,   146,   147,   148,   149,   150,   151,   152,   153,
13413:      154,    -1,   156,    -1,   158,   159,   160,   161,    -1,   163,
13414:       -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,
13415:       -1,   175,    -1,   177,   178,    -1,   180,   181,   182,   183,
13416:      184,   185,    -1,   187,   188,   189,   190,    -1,   192,   193,
13417:      194,   195,   196,   197,    -1,   199,    -1,   201,   202,   203,
13418:      204,   205,   206,   207,    -1,   209,    -1,   211,    -1,    -1,
13419:      214,    -1,   216,   217,   218,   219,   220,    -1,    -1,   223,
13420:       -1,   225,    -1,    -1,   228,   229,   230,    -1,    -1,   233,
13421:      234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
13422:      244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
13423:      254,   255,   256,   257,    -1,   259,   260,   261,   262,   263,
13424:       -1,   265,   266,    -1,   268,    -1,   270,   271,   272,   273,
13425:      274,   275,    -1,   277,   278,    -1,    -1,   281,   282,   283,
13426:       -1,    -1,   286,   287,    -1,   289,    -1,   291,   292,   293,
13427:      294,   295,   296,   297,   298,   299,   300,   301,    -1,   303,
13428:      304,   305,   306,   307,   308,   309,   310,   311,    -1,   313,
13429:      314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
13430:      324,   325,   326,    -1,   328,   329,   330,   331,   332,   333,
13431:      334,   335,   336,   337,   338,   339,    -1,   341,   342,    -1,
13432:      344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
13433:      354,   355,   356,   357,   358,    -1,   360,   361,   362,   363,
13434:      364,    -1,   366,   367,   368,   369,   370,    -1,   372,   373,
13435:      374,   375,    -1,   377,   378,   379,   380,   381,   382,   383,
13436:      384,   385,   386,   387,   388,   389,   390,    -1,   392,   393,
13437:       -1,   395,    -1,   397,   398,   399,   400,   401,    -1,   403,
13438:      404,    -1,    -1,   407,   408,   409,   410,   411,    -1,   413,
13439:      414,   415,   416,   417,   418,   419,   420,    -1,    -1,   423,
13440:      424,   425,   426,   427,    -1,    -1,   430,   431,   432,   433,
13441:      434,   435,   436,    -1,   438,    -1,   440,   441,   442,   443,
13442:       -1,    -1,   446,    -1,    -1,   449,   450,   451,   452,   453,
13443:      454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
13444:      464,   465,   466,   467,   468,   469,     3,    -1,    -1,    -1,
13445:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
13446:       -1,    -1,    19,    20,    21,    22,    23,    24,    25,    26,
13447:       -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,
13448:       -1,    38,    39,    -1,    41,    42,    43,    44,    45,    46,
13449:       47,    -1,    49,    50,    51,    52,    -1,    54,    55,    56,
13450:       57,    58,    59,    -1,    -1,    62,    63,    64,    65,    66,
13451:       -1,    68,    69,    70,    71,    -1,    -1,    74,    -1,    76,
13452:       77,    78,    79,    80,    81,    82,    83,    84,    -1,    86,
13453:       87,    88,    89,    90,    91,    -1,    93,    94,    95,    96,
13454:       -1,    -1,    -1,   100,    -1,    -1,    -1,   104,   105,   106,
13455:      107,   108,   109,   110,   111,   112,   113,    -1,   115,    -1,
13456:      117,   118,   119,   120,   121,   122,    -1,   124,   125,   126,
13457:      127,   128,    -1,    -1,   131,   132,   133,   134,   135,    -1,
13458:      137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
13459:      147,   148,    -1,   150,   151,   152,   153,    -1,    -1,   156,
13460:       -1,   158,   159,   160,   161,    -1,   163,    -1,   165,   166,
13461:       -1,   168,   169,   170,   171,   172,   173,    -1,   175,    -1,
13462:       -1,   178,    -1,   180,   181,   182,   183,   184,   185,   186,
13463:      187,   188,   189,   190,    -1,   192,   193,   194,   195,   196,
13464:      197,    -1,   199,   200,    -1,   202,   203,   204,   205,   206,
13465:      207,    -1,   209,    -1,   211,   212,   213,   214,   215,   216,
13466:      217,   218,   219,   220,    -1,    -1,   223,   224,   225,   226,
13467:       -1,   228,   229,   230,    -1,    -1,   233,   234,   235,   236,
13468:      237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
13469:      247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
13470:      257,   258,   259,   260,   261,   262,    -1,    -1,   265,   266,
13471:      267,   268,    -1,    -1,   271,   272,   273,   274,   275,    -1,
13472:      277,   278,    -1,    -1,   281,   282,   283,    -1,    -1,   286,
13473:       -1,   288,   289,   290,    -1,   292,   293,   294,   295,   296,
13474:      297,   298,   299,   300,   301,    -1,   303,   304,    -1,   306,
13475:      307,    -1,   309,   310,   311,    -1,   313,   314,   315,   316,
13476:      317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
13477:       -1,   328,   329,   330,   331,   332,   333,   334,   335,   336,
13478:      337,   338,   339,    -1,   341,   342,   343,   344,   345,   346,
13479:      347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
13480:      357,   358,    -1,   360,   361,   362,   363,   364,    -1,   366,
13481:      367,   368,   369,   370,   371,   372,   373,   374,   375,    -1,
13482:      377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
13483:      387,   388,   389,    -1,    -1,   392,   393,    -1,   395,   396,
13484:      397,   398,   399,   400,   401,    -1,   403,   404,    -1,    -1,
13485:      407,   408,    -1,   410,    -1,    -1,   413,   414,   415,   416,
13486:      417,   418,   419,   420,    -1,    -1,   423,   424,   425,   426,
13487:      427,    -1,    -1,   430,   431,   432,   433,   434,    -1,   436,
13488:       -1,   438,   439,   440,   441,   442,   443,    -1,    -1,   446,
13489:       -1,    -1,   449,   450,   451,   452,   453,   454,     3,    -1,
13490:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   466,
13491:      467,   468,   469,    -1,    19,    20,    21,    22,    23,    24,
13492:       25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,
13493:       -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,
13494:       45,    46,    47,    48,    49,    -1,    51,    52,    -1,    54,
13495:       55,    56,    57,    58,    59,    -1,    -1,    62,    63,    64,
13496:       65,    66,    -1,    68,    69,    70,    71,    72,    -1,    -1,
13497:       -1,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
13498:       -1,    86,    87,    88,    89,    90,    91,    -1,    -1,    94,
13499:       95,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,
13500:      105,   106,   107,   108,   109,   110,   111,   112,   113,    -1,
13501:      115,    -1,   117,   118,   119,   120,   121,   122,    -1,   124,
13502:      125,   126,   127,   128,    -1,    -1,   131,   132,   133,   134,
13503:      135,    -1,   137,   138,   139,    -1,   141,   142,   143,    -1,
13504:      145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
13505:       -1,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,
13506:      165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,
13507:      175,    -1,   177,   178,    -1,   180,   181,   182,   183,   184,
13508:      185,    -1,   187,   188,   189,   190,    -1,   192,   193,   194,
13509:      195,   196,   197,    -1,   199,    -1,   201,   202,   203,   204,
13510:      205,   206,   207,    -1,   209,    -1,   211,    -1,    -1,   214,
13511:       -1,   216,   217,   218,   219,   220,    -1,    -1,   223,    -1,
13512:      225,    -1,    -1,   228,   229,   230,    -1,    -1,   233,   234,
13513:      235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
13514:      245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
13515:      255,   256,   257,    -1,   259,   260,   261,   262,   263,    -1,
13516:      265,   266,    -1,   268,    -1,   270,   271,   272,   273,   274,
13517:      275,    -1,   277,   278,    -1,    -1,   281,   282,   283,    -1,
13518:       -1,   286,   287,    -1,   289,    -1,   291,   292,   293,   294,
13519:      295,   296,   297,    -1,   299,   300,   301,    -1,   303,   304,
13520:      305,   306,   307,   308,   309,   310,   311,    -1,   313,   314,
13521:      315,   316,   317,   318,   319,    -1,   321,   322,   323,   324,
13522:      325,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
13523:      335,   336,   337,   338,   339,    -1,   341,   342,    -1,   344,
13524:      345,   346,   347,    -1,   349,   350,   351,   352,   353,   354,
13525:      355,   356,   357,   358,    -1,   360,   361,   362,   363,   364,
13526:       -1,   366,   367,   368,   369,   370,    -1,   372,   373,   374,
13527:      375,    -1,   377,   378,   379,   380,   381,   382,   383,   384,
13528:      385,   386,   387,   388,   389,   390,    -1,   392,   393,    -1,
13529:      395,    -1,   397,   398,   399,   400,   401,    -1,   403,   404,
13530:       -1,    -1,   407,   408,   409,   410,   411,    -1,   413,   414,
13531:      415,   416,   417,   418,   419,   420,    -1,    -1,   423,   424,
13532:      425,   426,   427,    -1,    -1,   430,   431,   432,   433,   434,
13533:      435,   436,    -1,   438,    -1,   440,   441,   442,   443,    -1,
13534:       -1,   446,    -1,    -1,   449,   450,   451,   452,   453,   454,
13535:      455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
13536:      465,   466,   467,   468,   469,     3,    -1,    -1,    -1,    -1,
13537:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
13538:       -1,    19,    20,    21,    22,    23,    24,    25,    26,    -1,
13539:       28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
13540:       38,    39,    -1,    41,    42,    43,    44,    45,    46,    47,
13541:       -1,    49,    50,    51,    52,    -1,    54,    55,    56,    57,
13542:       58,    59,    -1,    -1,    62,    63,    64,    65,    66,    -1,
13543:       68,    69,    70,    71,    -1,    -1,    74,    -1,    76,    77,
13544:       78,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
13545:       88,    89,    90,    91,    -1,    93,    94,    95,    96,    -1,
13546:       -1,    -1,   100,    -1,    -1,    -1,   104,   105,   106,   107,
13547:      108,   109,   110,   111,   112,   113,    -1,   115,    -1,   117,
13548:      118,   119,   120,   121,   122,    -1,   124,   125,   126,   127,
13549:      128,    -1,    -1,   131,   132,   133,   134,   135,    -1,   137,
13550:      138,   139,    -1,   141,   142,   143,    -1,   145,   146,   147,
13551:      148,    -1,   150,   151,   152,   153,    -1,    -1,   156,    -1,
13552:      158,   159,   160,   161,    -1,   163,    -1,   165,   166,    -1,
13553:      168,   169,   170,   171,   172,   173,    -1,   175,    -1,    -1,
13554:      178,    -1,   180,   181,   182,   183,   184,   185,   186,   187,
13555:      188,   189,   190,    -1,   192,   193,   194,   195,   196,   197,
13556:       -1,   199,   200,    -1,   202,   203,   204,   205,   206,   207,
13557:       -1,   209,    -1,   211,   212,   213,   214,   215,   216,   217,
13558:      218,   219,   220,    -1,    -1,   223,   224,   225,   226,    -1,
13559:      228,   229,   230,    -1,    -1,   233,   234,   235,   236,   237,
13560:      238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
13561:      248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
13562:      258,   259,   260,   261,   262,    -1,    -1,   265,   266,   267,
13563:      268,    -1,    -1,   271,   272,   273,   274,   275,    -1,   277,
13564:      278,    -1,    -1,   281,   282,   283,    -1,    -1,   286,    -1,
13565:      288,   289,   290,    -1,   292,   293,   294,   295,   296,   297,
13566:      298,   299,   300,   301,    -1,   303,   304,    -1,   306,   307,
13567:       -1,   309,   310,   311,    -1,   313,   314,   315,   316,   317,
13568:      318,   319,   320,   321,   322,   323,   324,   325,   326,    -1,
13569:      328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
13570:      338,   339,    -1,   341,   342,   343,   344,   345,   346,    -1,
13571:      348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
13572:      358,    -1,   360,   361,   362,   363,   364,    -1,   366,    -1,
13573:      368,   369,   370,   371,   372,   373,   374,   375,    -1,   377,
13574:      378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
13575:      388,   389,    -1,    -1,   392,   393,    -1,   395,   396,   397,
13576:      398,   399,   400,   401,    -1,   403,   404,    -1,    -1,   407,
13577:      408,    -1,   410,    -1,    -1,   413,   414,   415,   416,   417,
13578:      418,   419,   420,    -1,    -1,   423,   424,   425,   426,   427,
13579:       -1,    -1,   430,   431,   432,   433,   434,    -1,   436,    -1,
13580:      438,   439,   440,   441,   442,   443,    -1,    -1,   446,    -1,
13581:       -1,   449,   450,   451,   452,   453,   454,     3,    -1,    -1,
13582:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   466,   467,
13583:      468,   469,    -1,    19,    20,    21,    22,    23,    24,    25,
13584:       26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,
13585:       -1,    -1,    38,    39,    -1,    41,    42,    43,    44,    45,
13586:       46,    47,    -1,    49,    50,    51,    52,    -1,    54,    55,
13587:       56,    57,    58,    59,    -1,    -1,    62,    63,    64,    65,
13588:       66,    -1,    68,    69,    70,    71,    -1,    -1,    74,    -1,
13589:       76,    77,    78,    79,    80,    81,    82,    83,    84,    -1,
13590:       86,    87,    88,    89,    90,    91,    -1,    93,    94,    95,
13591:       96,    -1,    -1,    -1,   100,    -1,    -1,    -1,   104,   105,
13592:      106,   107,   108,   109,   110,   111,   112,   113,    -1,   115,
13593:       -1,   117,   118,   119,   120,   121,   122,    -1,   124,   125,
13594:      126,   127,   128,    -1,    -1,   131,   132,   133,   134,   135,
13595:       -1,   137,   138,   139,    -1,   141,   142,   143,    -1,   145,
13596:      146,   147,   148,    -1,   150,   151,   152,   153,    -1,    -1,
13597:      156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
13598:      166,    -1,   168,   169,   170,   171,   172,   173,    -1,   175,
13599:       -1,    -1,   178,    -1,   180,   181,   182,   183,   184,   185,
13600:      186,   187,   188,   189,   190,    -1,   192,   193,   194,   195,
13601:      196,   197,    -1,   199,   200,    -1,   202,   203,   204,   205,
13602:      206,   207,    -1,   209,    -1,   211,   212,   213,   214,   215,
13603:      216,   217,   218,   219,   220,    -1,    -1,   223,   224,   225,
13604:      226,    -1,   228,   229,   230,    -1,    -1,   233,   234,   235,
13605:      236,   237,    -1,   239,   240,   241,   242,   243,   244,   245,
13606:      246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
13607:      256,   257,   258,   259,   260,   261,   262,    -1,    -1,   265,
13608:      266,   267,   268,    -1,    -1,   271,   272,   273,   274,   275,
13609:       -1,   277,   278,    -1,    -1,   281,   282,   283,    -1,    -1,
13610:      286,    -1,   288,   289,   290,    -1,   292,   293,   294,   295,
13611:      296,   297,   298,   299,   300,   301,    -1,   303,   304,    -1,
13612:      306,   307,    -1,   309,   310,   311,    -1,   313,   314,   315,
13613:      316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
13614:      326,    -1,   328,   329,   330,   331,   332,   333,   334,   335,
13615:      336,   337,   338,   339,    -1,   341,   342,   343,   344,   345,
13616:      346,    -1,   348,   349,   350,   351,   352,   353,   354,   355,
13617:      356,   357,   358,    -1,   360,   361,   362,   363,   364,    -1,
13618:      366,    -1,   368,   369,   370,   371,   372,   373,   374,   375,
13619:       -1,   377,   378,   379,   380,   381,   382,   383,   384,   385,
13620:      386,   387,    -1,   389,    -1,    -1,   392,   393,    -1,   395,
13621:      396,   397,   398,   399,   400,   401,    -1,   403,   404,    -1,
13622:       -1,   407,   408,    -1,   410,    -1,    -1,   413,   414,   415,
13623:      416,   417,   418,   419,   420,    -1,    -1,   423,   424,   425,
13624:      426,   427,    -1,    -1,   430,   431,   432,   433,   434,    -1,
13625:      436,    -1,   438,   439,   440,   441,   442,   443,    -1,    -1,
13626:      446,    -1,    -1,   449,   450,   451,   452,   453,   454,    -1,
13627:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
13628:      466,   467,   468,   469
13629: };
13630: 
13631: /* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
13632:    symbol of state STATE-NUM.  */
13633: static const yytype_uint16 yystos[] =
13634: {
13635:        0,    19,    29,    31,    32,    47,    56,    68,    79,    90,
13636:       92,   110,   124,   134,   140,   148,   150,   151,   163,   190,
13637:      229,   306,   309,   337,   345,   359,   366,   370,   380,   394,
13638:      430,   435,   448,   472,   486,   497,   498,   499,   500,   511,
13639:      512,   514,   518,   532,   533,   535,   537,   544,   546,   592,
13640:      598,   601,   602,   619,   620,   621,   622,   623,   624,   668,
13641:      800,   803,   806,   813,   814,   815,   816,   817,   824,   828,
13642:      834,   836,   841,   845,   846,   849,   850,   852,   853,   855,
13643:      407,   451,   545,   194,   352,   360,   394,   441,   545,     3,
13644:       19,    20,    21,    22,    23,    24,    25,    26,    28,    29,
13645:       30,    38,    39,    41,    42,    43,    44,    45,    46,    47,
13646:       48,    49,    50,    51,    52,    54,    55,    56,    57,    58,
13647:       59,    62,    63,    64,    65,    66,    68,    69,    70,    71,
13648:       72,    74,    76,    77,    78,    79,    80,    81,    82,    83,
13649:       84,    86,    87,    88,    89,    90,    91,    93,    94,    95,
13650:       96,   100,   104,   105,   106,   107,   108,   109,   110,   111,
13651:      112,   113,   115,   117,   118,   119,   120,   121,   122,   124,
13652:      125,   126,   127,   128,   131,   132,   133,   134,   135,   137,
13653:      138,   139,   141,   142,   143,   145,   146,   147,   148,   149,
13654:      150,   151,   152,   153,   154,   156,   158,   159,   160,   161,
13655:      163,   165,   166,   168,   169,   170,   171,   172,   173,   175,
13656:      177,   178,   180,   181,   182,   183,   184,   185,   186,   187,
13657:      188,   189,   190,   192,   193,   194,   195,   196,   197,   199,
13658:      200,   201,   202,   203,   204,   205,   206,   207,   209,   211,
13659:      212,   213,   214,   215,   216,   217,   218,   219,   220,   223,
13660:      224,   225,   226,   228,   229,   230,   233,   234,   235,   236,
13661:      237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
13662:      247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
13663:      257,   258,   259,   260,   261,   262,   263,   265,   266,   267,
13664:      268,   270,   271,   272,   273,   274,   275,   277,   278,   281,
13665:      282,   283,   286,   287,   288,   289,   290,   291,   292,   293,
13666:      294,   295,   296,   297,   298,   299,   300,   301,   303,   304,
13667:      305,   306,   307,   308,   309,   310,   311,   313,   314,   315,
13668:      316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
13669:      326,   328,   329,   330,   331,   332,   333,   334,   335,   336,
13670:      337,   338,   339,   341,   342,   343,   344,   345,   346,   347,
13671:      348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
13672:      358,   360,   361,   362,   363,   364,   366,   367,   368,   369,
13673:      370,   371,   372,   373,   374,   375,   377,   378,   379,   380,
13674:      381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
13675:      392,   393,   395,   396,   397,   398,   399,   400,   401,   403,
13676:      404,   407,   408,   409,   410,   411,   413,   414,   415,   416,
13677:      417,   418,   419,   420,   423,   424,   425,   426,   427,   430,
13678:      431,   432,   433,   434,   435,   436,   438,   439,   440,   441,
13679:      442,   443,   446,   449,   450,   451,   452,   453,   454,   455,
13680:      456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
13681:      466,   467,   468,   469,   724,   785,   789,   792,   858,   859,
13682:      860,   545,    50,   486,   614,   169,   173,   230,   237,   284,
13683:      352,   398,   400,   422,   425,   590,   599,   812,     3,    27,
13684:      238,   309,   388,   783,   789,   858,    21,    74,    89,   143,
13685:      152,   164,   169,   194,   237,   241,   304,   318,   349,   352,
13686:      360,   363,   382,   394,   401,   410,   441,   593,   594,   597,
13687:      545,   783,    92,   439,   486,   514,   601,   619,   820,   824,
13688:      841,   855,   107,    68,   107,     5,   788,   835,   789,   783,
13689:       27,   403,   407,   789,   847,   848,   851,   545,    27,   129,
13690:      631,   632,   230,   352,   364,   403,   829,   830,   851,   545,
13691:        5,   280,   679,   781,   789,   790,   168,   486,   838,   486,
13692:      325,   625,   626,   783,   625,   620,   621,   624,     0,   489,
13693:      119,   204,   427,   144,   208,   285,   421,   633,   634,   620,
13694:      622,   623,   490,   439,   818,    27,   403,   407,   435,   619,
13695:      851,   185,   781,   783,   185,   781,   185,   679,   185,   781,
13696:      486,   484,   488,   772,   774,   514,   601,   619,   802,   841,
13697:      781,   398,   400,   398,   400,   335,   185,   789,   325,   360,
13698:      394,   441,   781,   194,    27,   783,   243,   410,   106,   394,
13699:      441,   355,   185,   595,   789,   794,   185,   782,   783,   185,
13700:      783,   486,   536,   590,   820,     3,    48,    49,    51,    52,
13701:       64,    65,    72,   111,   112,   149,   154,   160,   177,   201,
13702:      206,   207,   209,   238,   257,   259,   263,   270,   272,   287,
13703:      291,   305,   308,   322,   347,   367,   374,   388,   390,   403,
13704:      404,   409,   411,   415,   435,   436,   455,   456,   457,   458,
13705:      459,   460,   461,   462,   463,   464,   465,   821,   823,   824,
13706:      826,   827,   858,   862,   818,   788,   788,   475,   486,   486,
13707:      801,   469,   214,   488,   279,     4,     6,     7,     8,     9,
13708:       10,    35,    49,    51,    52,    60,    61,    64,    65,    72,
13709:       74,    97,    98,    99,   100,   101,   102,   103,   111,   112,
13710:      114,   133,   149,   154,   155,   160,   206,   207,   209,   231,
13711:      232,   257,   259,   264,   269,   270,   272,   281,   291,   305,
13712:      322,   347,   365,   374,   390,   403,   404,   409,   411,   412,
13713:      415,   428,   436,   470,   477,   478,   479,   484,   486,   491,
13714:      493,   494,   620,   694,   697,   700,   701,   702,   704,   705,
13715:      706,   707,   709,   710,   721,   723,   724,   725,   727,   740,
13716:      741,   747,   766,   771,   778,   779,   785,   786,   787,   788,
13717:      789,   777,   778,   829,   788,   829,   469,   167,   405,   475,
13718:      486,   781,   479,   774,     3,   166,   168,   439,   824,   837,
13719:      839,   166,   840,   721,   751,   625,   490,   486,   796,   487,
13720:      487,   499,   167,   210,   679,   842,    27,   129,   630,   630,
13721:       54,   630,   157,   162,   227,   276,   639,   641,   642,   661,
13722:      663,   664,   665,   633,   634,   486,   781,   469,   214,   149,
13723:       23,    29,   134,   283,   333,   337,   366,   432,   505,   508,
13724:      509,   333,   149,    36,    55,   105,   193,   242,   250,   262,
13725:      293,   333,   338,   360,   366,   380,   508,   538,   541,   149,
13726:      333,   366,   508,   149,   333,   366,   508,     3,    27,    44,
13727:       50,    74,    81,    93,   100,   129,   166,   168,   172,   186,
13728:      200,   212,   213,   215,   224,   226,   238,   258,   267,   288,
13729:      290,   343,   371,   388,   396,   415,   437,   439,   479,   487,
13730:      721,   753,   754,   791,   797,   858,   863,   721,   773,     3,
13731:       27,    31,    32,    33,    34,    35,    36,    37,    40,    53,
13732:       60,    61,    67,    73,    75,    85,    92,    97,    98,    99,
13733:      101,   102,   103,   114,   116,   123,   129,   130,   136,   140,
13734:      144,   155,   157,   162,   164,   167,   174,   176,   179,   191,
13735:      198,   208,   210,   221,   222,   227,   231,   232,   264,   269,
13736:      276,   279,   280,   284,   285,   302,   312,   327,   340,   359,
13737:      365,   376,   391,   394,   402,   405,   406,   412,   421,   422,
13738:      428,   429,   435,   437,   444,   445,   447,   448,   479,   784,
13739:      798,   858,   862,   864,   772,   487,   486,   580,   590,   264,
13740:      804,   441,   185,   781,   185,   781,   857,   781,   486,   600,
13741:       81,   809,   452,    82,   126,   296,   399,   149,    58,   339,
13742:      490,   596,   488,   795,   149,   490,   596,   149,   279,   751,
13743:      394,   487,   490,     4,   155,   279,   412,   477,   478,   540,
13744:      543,   787,   788,   819,   821,   822,   825,   820,   486,   609,
13745:      613,   540,   825,   831,   833,   753,     3,    44,    49,    50,
13746:       51,    52,    64,    65,    74,    81,    93,   100,   111,   112,
13747:      160,   166,   168,   172,   186,   200,   206,   207,   209,   212,
13748:      213,   215,   224,   226,   238,   257,   258,   259,   267,   272,
13749:      288,   290,   322,   343,   347,   367,   371,   374,   388,   396,
13750:      403,   404,   415,   436,   439,   690,   691,   693,   695,   697,
13751:      699,   701,   702,   703,   705,   706,   709,   710,   755,   793,
13752:      858,   861,    36,   225,   789,   486,   775,   484,   438,   708,
13753:      721,   770,   486,   708,   708,   486,   162,   486,   486,   486,
13754:      696,   696,   308,   620,   486,   486,   698,   486,   486,    64,
13755:       65,   708,   721,   486,   696,   486,   486,   486,   486,   486,
13756:      450,   472,   486,   711,   486,   711,   486,   486,   486,   721,
13757:      721,   721,   751,   752,   620,   721,   751,   742,   743,   789,
13758:      790,     9,   775,   774,   788,   486,   486,   787,   788,     3,
13759:        8,    11,    16,    17,    18,    33,    36,    41,    48,    73,
13760:      172,   186,   191,   212,   213,   226,   264,   267,   281,   284,
13761:      371,   470,   473,   474,   475,   477,   478,   479,   480,   481,
13762:      482,   745,   746,   747,   749,   449,   728,   775,    15,   290,
13763:      721,    15,   210,   490,   627,   486,   788,   775,   774,   627,
13764:        3,   114,   230,   540,   710,   788,   832,    96,   114,   833,
13765:      114,   833,   781,   487,   490,   818,   487,   490,   626,   782,
13766:       36,   842,   516,   781,    36,   789,   366,   622,   622,   635,
13767:      636,   721,   622,   159,   261,   655,   216,   262,   321,   369,
13768:      427,    27,   650,   721,   477,   478,   651,   652,   721,   723,
13769:      661,   662,   642,   641,   639,   640,   162,   664,   274,   666,
13770:      639,   661,   751,   796,   225,   781,    67,    75,    85,   164,
13771:      185,   312,   422,   561,   571,   586,   789,    75,    85,   513,
13772:       85,   513,   486,   405,   486,   559,   236,   425,   559,    85,
13773:      490,   405,   781,   693,   540,    54,   542,   540,   540,   105,
13774:      242,   250,    54,   405,   448,   472,   539,   255,   352,   539,
13775:      541,   679,    85,   405,   513,   352,   781,   405,   352,   753,
13776:      753,   754,   487,   490,   633,   634,    13,    14,   485,   495,
13777:      405,   579,   584,   789,   448,   612,   325,   441,   149,    92,
13778:      533,   546,   805,   806,   853,   781,   264,   534,   538,   264,
13779:      486,   580,    36,   580,   487,   753,    36,   185,   574,   789,
13780:      810,   595,   794,   784,   488,   782,   783,   783,   794,   487,
13781:      185,   781,   857,   820,   826,     4,   787,     4,   787,   611,
13782:      618,   798,    50,    94,   120,   138,   142,   163,   166,   180,
13783:      269,   277,   319,   615,   490,   487,   490,   486,   693,   486,
13784:       35,   692,   108,   109,   182,   183,   244,   245,   246,   247,
13785:      248,   249,   252,   253,   356,   357,   466,   467,   486,   712,
13786:      713,   714,   715,   716,   717,   718,   719,   720,   487,   490,
13787:      696,   802,   751,   772,   752,   486,   444,   767,   768,   721,
13788:      751,   486,   787,   787,   751,     3,   712,   713,   714,   715,
13789:      716,   717,   718,   719,   756,   757,   788,   787,   787,   787,
13790:      708,   708,   721,     8,    16,    17,    18,   473,   474,   475,
13791:      477,   478,   479,   480,   481,   482,   745,   750,   789,   721,
13792:      758,   477,   478,   486,   722,   723,   747,   760,   771,   487,
13793:      751,   721,   751,   761,   403,   403,   787,   787,   721,    53,
13794:      167,   222,   406,   721,   751,   764,   721,   485,   487,   490,
13795:      490,   492,   495,   787,   721,   720,   720,   691,   721,   721,
13796:      721,   721,     5,   798,   799,   403,    40,   391,   776,   794,
13797:      721,   721,   486,   620,   765,   129,   155,   264,   269,   274,
13798:      412,   423,   721,   269,   486,   721,   405,    48,   172,   186,
13799:      191,   226,   371,   721,   721,   721,   721,   721,   721,   721,
13800:      721,   721,   721,    27,    34,   376,   744,   176,   158,   729,
13801:      721,   347,   486,   741,   721,   173,   230,   394,   398,   400,
13802:      425,   628,   781,   779,   167,   669,   753,   669,   486,   788,
13803:      487,   781,   837,   781,   845,   721,   487,   486,   429,   844,
13804:      114,   292,   486,   515,   619,    36,   789,   486,   520,   529,
13805:      531,   789,   490,    37,   123,   429,   637,   347,   348,   477,
13806:      478,   652,   654,   723,   369,   216,   280,   490,     4,   653,
13807:      787,   653,   347,   348,   654,   780,   781,   268,   373,   667,
13808:      662,   640,   487,   333,   508,   486,   185,   571,   783,   216,
13809:      264,   216,   429,   486,   564,   691,   783,   789,   185,   783,
13810:      185,   789,    23,   134,   366,   504,   507,   554,   569,   798,
13811:      783,   563,   583,   798,   783,   505,   783,   333,   366,   508,
13812:      538,   540,   794,   783,   540,   794,   783,   540,   333,   366,
13813:      508,   783,   783,   783,   783,   333,   366,   508,   783,   783,
13814:      633,   633,   633,   437,   754,   487,   721,   721,   721,   773,
13815:      317,   608,   487,   490,   277,   167,   405,   603,   441,   781,
13816:      789,   590,   486,   149,   149,   226,   561,   571,   575,   578,
13817:      587,   589,   789,   448,   450,   566,   148,   619,   448,   811,
13818:      487,   721,   264,   279,   596,   784,   596,   279,   596,   264,
13819:       36,   487,   490,   479,   486,   540,   610,   825,    36,   607,
13820:      788,   607,   264,   269,   319,   607,   607,   831,   755,    35,
13821:      692,   689,   789,   484,   484,   787,   405,   405,   405,   405,
13822:      691,   487,   485,   751,   721,   136,   768,   769,    36,   487,
13823:      721,   487,   487,   487,   487,   167,   487,   487,   487,   490,
13824:      487,   488,   302,   759,   487,   722,   722,   721,    11,    16,
13825:       17,    18,   191,   212,   281,   473,   474,   475,   477,   478,
13826:      479,   480,   481,   482,   747,   722,   487,   487,   162,   167,
13827:      762,   763,   487,   469,   469,   487,   487,    36,   764,   751,
13828:      764,   764,   167,   487,    36,   775,   721,   742,   721,   487,
13829:      487,   469,   722,   722,   142,   751,   167,   129,   155,   269,
13830:      274,   412,   423,   486,   142,   750,   721,   391,   776,   721,
13831:      765,   721,   405,   486,   620,   486,   486,   289,   733,   398,
13832:      400,   398,   400,   781,   394,   629,   629,   629,   221,   348,
13833:      486,   620,   670,   671,   672,   679,   680,   724,   726,   727,
13834:      789,   445,   685,   633,   685,   787,   720,   796,   802,   670,
13835:      445,   843,   435,   393,   428,   524,   519,   528,   789,   279,
13836:      521,   789,   525,   531,   490,   669,   475,   775,   636,   281,
13837:      745,   748,   471,   638,     4,   787,   654,   280,   427,   651,
13838:      490,   235,   405,   721,   264,   586,   486,   149,   486,   564,
13839:      194,   584,   547,   283,   557,   547,    23,   134,   337,   338,
13840:      366,   501,   502,   503,   509,   510,   149,   596,   149,   596,
13841:      554,   569,   554,   487,   490,   550,   788,   487,   490,   475,
13842:      488,   405,   352,    85,   405,   513,   352,   405,   405,   405,
13843:      352,   487,   487,   487,   754,   485,   383,   384,   617,   788,
13844:      579,   608,   781,   580,   804,   394,   584,   781,   781,   857,
13845:      781,   487,   490,   277,   559,   277,   279,   558,   783,   448,
13846:      856,   559,    36,   149,   781,   794,   149,   611,   605,   616,
13847:      825,   788,   788,   269,   584,   479,   584,   788,   788,   487,
13848:      484,   487,   490,   691,   787,   485,   787,   487,   713,   715,
13849:      716,   717,   716,   717,   717,   487,   402,   721,   140,   691,
13850:      487,   721,   721,   750,   721,   762,   691,   722,   722,   722,
13851:      722,   129,   264,   274,   722,   722,   722,   722,   722,   722,
13852:      722,   722,   722,   722,   721,   721,   763,   762,   711,   711,
13853:      691,   487,   487,   487,   751,   691,   487,   720,   721,    33,
13854:       33,   721,   487,   721,   167,   486,   755,   721,   487,   142,
13855:      722,   722,   142,   142,   721,   721,   634,   445,   486,   734,
13856:      789,   629,   629,   629,   629,   781,   781,   781,   620,   680,
13857:      167,   620,   671,   672,    36,   673,   674,   789,   490,    93,
13858:      168,   200,   215,   224,   258,   343,   676,   674,    36,   673,
13859:      675,   789,   472,   684,   774,   721,   176,   656,   487,   656,
13860:      487,   487,   721,   340,   523,   434,   487,   490,   775,    83,
13861:      523,   487,   490,   520,   843,   721,   486,   638,   159,   220,
13862:      280,   781,   783,   487,   149,   584,   571,   584,   547,   574,
13863:      487,   116,   198,   262,   264,   570,   486,   581,   171,   114,
13864:      184,   264,   559,   539,   106,   114,   171,   264,   382,   385,
13865:      541,   559,   366,   503,   416,   783,   789,   507,   583,     3,
13866:       44,    50,    74,    81,    93,   100,   166,   168,   172,   186,
13867:      200,   212,   213,   215,   224,   226,   238,   258,   263,   267,
13868:      281,   288,   290,   343,   367,   371,   388,   396,   415,   439,
13869:      477,   478,   540,   548,   585,   691,   748,   788,   791,   858,
13870:      864,   798,   783,   783,   783,   783,   783,   783,   783,   783,
13871:      783,   783,   633,   539,   617,   486,   811,   185,   781,   487,
13872:      534,   486,    36,   568,   566,   575,    79,   536,   106,   262,
13873:      619,   574,   429,   808,   596,   857,   487,   490,   584,   692,
13874:      787,   692,   789,   485,   485,   721,   487,   487,   763,   167,
13875:      129,   274,   486,   487,   487,   721,   721,   721,   755,   487,
13876:      721,    33,    33,   721,   721,   142,   487,   487,   721,   735,
13877:      789,   781,   781,   781,   781,   674,   675,   486,   487,   789,
13878:      790,   396,   647,   648,   486,   671,   215,   288,   677,   671,
13879:      677,   215,   676,   677,   215,   648,   486,   789,   648,   486,
13880:      286,    54,   179,   660,   788,   660,   788,   778,   619,   292,
13881:      619,   519,   279,   486,   517,   475,   531,   523,   750,   547,
13882:      571,   487,   487,   448,   577,   117,   187,   196,   116,   431,
13883:      554,   572,    67,    73,    85,   114,   116,   171,   198,   264,
13884:      269,   312,   327,   422,   552,   553,   565,    30,    54,   591,
13885:      185,   269,   540,   721,   591,   269,   477,   478,   543,   789,
13886:      691,   596,   596,   238,   388,   791,   795,   475,   405,   405,
13887:      487,   609,   429,   604,   606,   584,    36,   264,   486,   811,
13888:      578,   148,   619,   146,   192,   558,   119,   134,   311,   856,
13889:      106,   448,   854,   279,   789,   807,   486,    36,   616,   485,
13890:      691,   722,   167,   486,   755,   487,   721,   721,   721,   487,
13891:      298,   736,   681,   682,   726,   673,   486,     4,     9,   643,
13892:      645,   646,   789,   782,   671,   279,   429,   678,   671,   215,
13893:      671,   686,   687,   789,   486,   686,   789,   486,   657,   658,
13894:      659,   721,   721,   447,   730,   730,   524,    85,   486,   522,
13895:      530,   726,   789,   130,   721,   487,   327,   577,   486,   567,
13896:      547,   487,   490,   486,   794,   783,   722,   591,   117,   187,
13897:      116,   269,   216,   781,   577,   114,    36,   149,    73,   688,
13898:      795,   481,   548,   783,   783,   539,   121,   487,   619,   149,
13899:       36,   487,   783,   856,    27,    78,    86,   115,   184,   195,
13900:      382,   385,   562,   562,   348,   348,    59,    67,   230,   781,
13901:      530,   722,   755,   487,    54,   633,   487,   490,    36,   683,
13902:      782,   301,   481,   301,   348,   481,   486,   486,   487,   721,
13903:      486,   671,   678,   487,   490,   691,   686,   487,   487,   490,
13904:      731,   732,   789,   429,   644,   644,   434,   783,   721,   487,
13905:      490,    73,   526,   526,   265,   427,   781,   547,   573,   576,
13906:      798,   554,   721,   264,   553,    36,   577,   580,   184,   794,
13907:      429,   506,   481,   416,   609,   788,   811,   854,   781,   619,
13908:      566,   536,    67,   282,    67,   808,   487,   487,   751,   320,
13909:      348,   737,   684,   681,   486,   487,   789,   643,   782,   687,
13910:      688,   487,   658,   490,    36,   350,   619,   487,   685,   522,
13911:      794,   527,   794,   527,   366,   580,   487,   490,   475,   487,
13912:      184,   240,   588,   486,   549,   721,   416,    36,   486,   854,
13913:      558,   856,   282,   282,   486,   811,    48,    96,   418,   721,
13914:      738,   739,   738,   487,   686,   487,   490,   487,   487,   732,
13915:      734,   646,   526,   637,   637,   529,   588,   576,   548,   262,
13916:      560,   549,   168,   297,   372,   279,   555,   556,   582,   538,
13917:      619,   530,   685,   739,   347,   161,   307,   161,   307,   487,
13918:        9,   334,   649,   527,   638,   638,   685,   556,   196,   119,
13919:      427,   279,   582,   279,   555,   487,   854,   487,    33,   487,
13920:      486,   637,   547,    58,   262,   339,   366,   551,   551,   811,
13921:      739,     9,   638,    22,   114,   269,   685,   487
13922: };
13923: 
13924: #define yyerrok		(yyerrstatus = 0)
13925: #define yyclearin	(yychar = YYEMPTY)
13926: #define YYEMPTY		(-2)
13927: #define YYEOF		0
13928: 
13929: #define YYACCEPT	goto yyacceptlab
13930: #define YYABORT		goto yyabortlab
13931: #define YYERROR		goto yyerrorlab
13932: 
13933: 
13934: /* Like YYERROR except do call yyerror.  This remains here temporarily
13935:    to ease the transition to the new meaning of YYERROR, for GCC.
13936:    Once GCC version 2 has supplanted version 1, this can go.  */
13937: 
13938: #define YYFAIL		goto yyerrlab
13939: 
13940: #define YYRECOVERING()  (!!yyerrstatus)
13941: 
13942: #define YYBACKUP(Token, Value)					\
13943: do								\
13944:   if (yychar == YYEMPTY && yylen == 1)				\
13945:     {								\
13946:       yychar = (Token);						\
13947:       yylval = (Value);						\
13948:       yytoken = YYTRANSLATE (yychar);				\
13949:       YYPOPSTACK (1);						\
13950:       goto yybackup;						\
13951:     }								\
13952:   else								\
13953:     {								\
13954:       yyerror (&yylloc, yyscanner, YY_("syntax error: cannot back up")); \
13955:       YYERROR;							\
13956:     }								\
13957: while (YYID (0))
13958: 
13959: 
13960: #define YYTERROR	1
13961: #define YYERRCODE	256
13962: 
13963: 
13964: /* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
13965:    If N is 0, then set CURRENT to the empty location which ends
13966:    the previous symbol: RHS[0] (always defined).  */
13967: 
13968: #define YYRHSLOC(Rhs, K) ((Rhs)[K])
13969: #ifndef YYLLOC_DEFAULT
13970: # define YYLLOC_DEFAULT(Current, Rhs, N)				\
13971:     do									\
13972:       if (YYID (N))                                                    \
13973: 	{								\
13974: 	  (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;	\
13975: 	  (Current).first_column = YYRHSLOC (Rhs, 1).first_column;	\
13976: 	  (Current).last_line    = YYRHSLOC (Rhs, N).last_line;		\
13977: 	  (Current).last_column  = YYRHSLOC (Rhs, N).last_column;	\
13978: 	}								\
13979:       else								\
13980: 	{								\
13981: 	  (Current).first_line   = (Current).last_line   =		\
13982: 	    YYRHSLOC (Rhs, 0).last_line;				\
13983: 	  (Current).first_column = (Current).last_column =		\
13984: 	    YYRHSLOC (Rhs, 0).last_column;				\
13985: 	}								\
13986:     while (YYID (0))
13987: #endif
13988: 
13989: 
13990: /* YY_LOCATION_PRINT -- Print the location on the stream.
13991:    This macro was not mandated originally: define only if we know
13992:    we won't break user code: when these are the locations we know.  */
13993: 
13994: #ifndef YY_LOCATION_PRINT
13995: # if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
13996: #  define YY_LOCATION_PRINT(File, Loc)			\
13997:      fprintf (File, "%d.%d-%d.%d",			\
13998: 	      (Loc).first_line, (Loc).first_column,	\
13999: 	      (Loc).last_line,  (Loc).last_column)
14000: # else
14001: #  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
14002: # endif
14003: #endif
14004: 
14005: 
14006: /* YYLEX -- calling `yylex' with the right arguments.  */
14007: 
14008: #ifdef YYLEX_PARAM
14009: # define YYLEX yylex (&yylval, &yylloc, YYLEX_PARAM)
14010: #else
14011: # define YYLEX yylex (&yylval, &yylloc, yyscanner)
14012: #endif
14013: 
14014: /* Enable debugging if requested.  */
14015: #if YYDEBUG
14016: 
14017: # ifndef YYFPRINTF
14018: #  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
14019: #  define YYFPRINTF fprintf
14020: # endif
14021: 
14022: # define YYDPRINTF(Args)			\
14023: do {						\
14024:   if (yydebug)					\
14025:     YYFPRINTF Args;				\
14026: } while (YYID (0))
14027: 
14028: # define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
14029: do {									  \
14030:   if (yydebug)								  \
14031:     {									  \
14032:       YYFPRINTF (stderr, "%s ", Title);					  \
14033:       yy_symbol_print (stderr,						  \
14034: 		  Type, Value, Location, yyscanner); \
14035:       YYFPRINTF (stderr, "\n");						  \
14036:     }									  \
14037: } while (YYID (0))
14038: 
14039: 
14040: /*--------------------------------.
14041: | Print this symbol on YYOUTPUT.  |
14042: `--------------------------------*/
14043: 
14044: /*ARGSUSED*/
14045: #if (defined __STDC__ || defined __C99__FUNC__ \
14046:      || defined __cplusplus || defined _MSC_VER)
14047: static void
14048: yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
14049: #else
14050: static void
14051: yy_symbol_value_print (yyoutput, yytype, yyvaluep, yylocationp, yyscanner)
14052:     FILE *yyoutput;
14053:     int yytype;
14054:     YYSTYPE const * const yyvaluep;
14055:     YYLTYPE const * const yylocationp;
14056:     core_yyscan_t yyscanner;
14057: #endif
14058: {
14059:   if (!yyvaluep)
14060:     return;
14061:   YYUSE (yylocationp);
14062:   YYUSE (yyscanner);
14063: # ifdef YYPRINT
14064:   if (yytype < YYNTOKENS)
14065:     YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
14066: # else
14067:   YYUSE (yyoutput);
14068: # endif
14069:   switch (yytype)
14070:     {
14071:       default:
14072: 	break;
14073:     }
14074: }
14075: 
14076: 
14077: /*--------------------------------.
14078: | Print this symbol on YYOUTPUT.  |
14079: `--------------------------------*/
14080: 
14081: #if (defined __STDC__ || defined __C99__FUNC__ \
14082:      || defined __cplusplus || defined _MSC_VER)
14083: static void
14084: yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
14085: #else
14086: static void
14087: yy_symbol_print (yyoutput, yytype, yyvaluep, yylocationp, yyscanner)
14088:     FILE *yyoutput;
14089:     int yytype;
14090:     YYSTYPE const * const yyvaluep;
14091:     YYLTYPE const * const yylocationp;
14092:     core_yyscan_t yyscanner;
14093: #endif
14094: {
14095:   if (yytype < YYNTOKENS)
14096:     YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
14097:   else
14098:     YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);
14099: 
14100:   YY_LOCATION_PRINT (yyoutput, *yylocationp);
14101:   YYFPRINTF (yyoutput, ": ");
14102:   yy_symbol_value_print (yyoutput, yytype, yyvaluep, yylocationp, yyscanner);
14103:   YYFPRINTF (yyoutput, ")");
14104: }
14105: 
14106: /*------------------------------------------------------------------.
14107: | yy_stack_print -- Print the state stack from its BOTTOM up to its |
14108: | TOP (included).                                                   |
14109: `------------------------------------------------------------------*/
14110: 
14111: #if (defined __STDC__ || defined __C99__FUNC__ \
14112:      || defined __cplusplus || defined _MSC_VER)
14113: static void
14114: yy_stack_print (yytype_int16 *bottom, yytype_int16 *top)
14115: #else
14116: static void
14117: yy_stack_print (bottom, top)
14118:     yytype_int16 *bottom;
14119:     yytype_int16 *top;
14120: #endif
14121: {
14122:   YYFPRINTF (stderr, "Stack now");
14123:   for (; bottom <= top; ++bottom)
14124:     YYFPRINTF (stderr, " %d", *bottom);
14125:   YYFPRINTF (stderr, "\n");
14126: }
14127: 
14128: # define YY_STACK_PRINT(Bottom, Top)				\
14129: do {								\
14130:   if (yydebug)							\
14131:     yy_stack_print ((Bottom), (Top));				\
14132: } while (YYID (0))
14133: 
14134: 
14135: /*------------------------------------------------.
14136: | Report that the YYRULE is going to be reduced.  |
14137: `------------------------------------------------*/
14138: 
14139: #if (defined __STDC__ || defined __C99__FUNC__ \
14140:      || defined __cplusplus || defined _MSC_VER)
14141: static void
14142: yy_reduce_print (YYSTYPE *yyvsp, YYLTYPE *yylsp, int yyrule, core_yyscan_t yyscanner)
14143: #else
14144: static void
14145: yy_reduce_print (yyvsp, yylsp, yyrule, yyscanner)
14146:     YYSTYPE *yyvsp;
14147:     YYLTYPE *yylsp;
14148:     int yyrule;
14149:     core_yyscan_t yyscanner;
14150: #endif
14151: {
14152:   int yynrhs = yyr2[yyrule];
14153:   int yyi;
14154:   unsigned long int yylno = yyrline[yyrule];
14155:   YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
14156: 	     yyrule - 1, yylno);
14157:   /* The symbols being reduced.  */
14158:   for (yyi = 0; yyi < yynrhs; yyi++)
14159:     {
14160:       fprintf (stderr, "   $%d = ", yyi + 1);
14161:       yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
14162: 		       &(yyvsp[(yyi + 1) - (yynrhs)])
14163: 		       , &(yylsp[(yyi + 1) - (yynrhs)])		       , yyscanner);
14164:       fprintf (stderr, "\n");
14165:     }
14166: }
14167: 
14168: # define YY_REDUCE_PRINT(Rule)		\
14169: do {					\
14170:   if (yydebug)				\
14171:     yy_reduce_print (yyvsp, yylsp, Rule, yyscanner); \
14172: } while (YYID (0))
14173: 
14174: /* Nonzero means print parse trace.  It is left uninitialized so that
14175:    multiple parsers can coexist.  */
14176: int yydebug;
14177: #else /* !YYDEBUG */
14178: # define YYDPRINTF(Args)
14179: # define YY_SYMBOL_PRINT(Title, Type, Value, Location)
14180: # define YY_STACK_PRINT(Bottom, Top)
14181: # define YY_REDUCE_PRINT(Rule)
14182: #endif /* !YYDEBUG */
14183: 
14184: 
14185: /* YYINITDEPTH -- initial size of the parser's stacks.  */
14186: #ifndef	YYINITDEPTH
14187: # define YYINITDEPTH 200
14188: #endif
14189: 
14190: /* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
14191:    if the built-in stack extension method is used).
14192: 
14193:    Do not make this value too large; the results are undefined if
14194:    YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
14195:    evaluated with infinite-precision integer arithmetic.  */
14196: 
14197: #ifndef YYMAXDEPTH
14198: # define YYMAXDEPTH 10000
14199: #endif
14200: 
14201: 
14202: 
14203: #if YYERROR_VERBOSE
14204: 
14205: # ifndef yystrlen
14206: #  if defined __GLIBC__ && defined _STRING_H
14207: #   define yystrlen strlen
14208: #  else
14209: /* Return the length of YYSTR.  */
14210: #if (defined __STDC__ || defined __C99__FUNC__ \
14211:      || defined __cplusplus || defined _MSC_VER)
14212: static YYSIZE_T
14213: yystrlen (const char *yystr)
14214: #else
14215: static YYSIZE_T
14216: yystrlen (yystr)
14217:     const char *yystr;
14218: #endif
14219: {
14220:   YYSIZE_T yylen;
14221:   for (yylen = 0; yystr[yylen]; yylen++)
14222:     continue;
14223:   return yylen;
14224: }
14225: #  endif
14226: # endif
14227: 
14228: # ifndef yystpcpy
14229: #  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
14230: #   define yystpcpy stpcpy
14231: #  else
14232: /* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
14233:    YYDEST.  */
14234: #if (defined __STDC__ || defined __C99__FUNC__ \
14235:      || defined __cplusplus || defined _MSC_VER)
14236: static char *
14237: yystpcpy (char *yydest, const char *yysrc)
14238: #else
14239: static char *
14240: yystpcpy (yydest, yysrc)
14241:     char *yydest;
14242:     const char *yysrc;
14243: #endif
14244: {
14245:   char *yyd = yydest;
14246:   const char *yys = yysrc;
14247: 
14248:   while ((*yyd++ = *yys++) != '\0')
14249:     continue;
14250: 
14251:   return yyd - 1;
14252: }
14253: #  endif
14254: # endif
14255: 
14256: # ifndef yytnamerr
14257: /* Copy to YYRES the contents of YYSTR after stripping away unnecessary
14258:    quotes and backslashes, so that it's suitable for yyerror.  The
14259:    heuristic is that double-quoting is unnecessary unless the string
14260:    contains an apostrophe, a comma, or backslash (other than
14261:    backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
14262:    null, do not copy; instead, return the length of what the result
14263:    would have been.  */
14264: static YYSIZE_T
14265: yytnamerr (char *yyres, const char *yystr)
14266: {
14267:   if (*yystr == '"')
14268:     {
14269:       YYSIZE_T yyn = 0;
14270:       char const *yyp = yystr;
14271: 
14272:       for (;;)
14273: 	switch (*++yyp)
14274: 	  {
14275: 	  case '\'':
14276: 	  case ',':
14277: 	    goto do_not_strip_quotes;
14278: 
14279: 	  case '\\':
14280: 	    if (*++yyp != '\\')
14281: 	      goto do_not_strip_quotes;
14282: 	    /* Fall through.  */
14283: 	  default:
14284: 	    if (yyres)
14285: 	      yyres[yyn] = *yyp;
14286: 	    yyn++;
14287: 	    break;
14288: 
14289: 	  case '"':
14290: 	    if (yyres)
14291: 	      yyres[yyn] = '\0';
14292: 	    return yyn;
14293: 	  }
14294:     do_not_strip_quotes: ;
14295:     }
14296: 
14297:   if (! yyres)
14298:     return yystrlen (yystr);
14299: 
14300:   return yystpcpy (yyres, yystr) - yyres;
14301: }
14302: # endif
14303: 
14304: /* Copy into YYRESULT an error message about the unexpected token
14305:    YYCHAR while in state YYSTATE.  Return the number of bytes copied,
14306:    including the terminating null byte.  If YYRESULT is null, do not
14307:    copy anything; just return the number of bytes that would be
14308:    copied.  As a special case, return 0 if an ordinary "syntax error"
14309:    message will do.  Return YYSIZE_MAXIMUM if overflow occurs during
14310:    size calculation.  */
14311: static YYSIZE_T
14312: yysyntax_error (char *yyresult, int yystate, int yychar)
14313: {
14314:   int yyn = yypact[yystate];
14315: 
14316:   if (! (YYPACT_NINF < yyn && yyn <= YYLAST))
14317:     return 0;
14318:   else
14319:     {
14320:       int yytype = YYTRANSLATE (yychar);
14321:       YYSIZE_T yysize0 = yytnamerr (0, yytname[yytype]);
14322:       YYSIZE_T yysize = yysize0;
14323:       YYSIZE_T yysize1;
14324:       int yysize_overflow = 0;
14325:       enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
14326:       char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
14327:       int yyx;
14328: 
14329: # if 0
14330:       /* This is so xgettext sees the translatable formats that are
14331: 	 constructed on the fly.  */
14332:       YY_("syntax error, unexpected %s");
14333:       YY_("syntax error, unexpected %s, expecting %s");
14334:       YY_("syntax error, unexpected %s, expecting %s or %s");
14335:       YY_("syntax error, unexpected %s, expecting %s or %s or %s");
14336:       YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s");
14337: # endif
14338:       char *yyfmt;
14339:       char const *yyf;
14340:       static char const yyunexpected[] = "syntax error, unexpected %s";
14341:       static char const yyexpecting[] = ", expecting %s";
14342:       static char const yyor[] = " or %s";
14343:       char yyformat[sizeof yyunexpected
14344: 		    + sizeof yyexpecting - 1
14345: 		    + ((YYERROR_VERBOSE_ARGS_MAXIMUM - 2)
14346: 		       * (sizeof yyor - 1))];
14347:       char const *yyprefix = yyexpecting;
14348: 
14349:       /* Start YYX at -YYN if negative to avoid negative indexes in
14350: 	 YYCHECK.  */
14351:       int yyxbegin = yyn < 0 ? -yyn : 0;
14352: 
14353:       /* Stay within bounds of both yycheck and yytname.  */
14354:       int yychecklim = YYLAST - yyn + 1;
14355:       int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
14356:       int yycount = 1;
14357: 
14358:       yyarg[0] = yytname[yytype];
14359:       yyfmt = yystpcpy (yyformat, yyunexpected);
14360: 
14361:       for (yyx = yyxbegin; yyx < yyxend; ++yyx)
14362: 	if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
14363: 	  {
14364: 	    if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
14365: 	      {
14366: 		yycount = 1;
14367: 		yysize = yysize0;
14368: 		yyformat[sizeof yyunexpected - 1] = '\0';
14369: 		break;
14370: 	      }
14371: 	    yyarg[yycount++] = yytname[yyx];
14372: 	    yysize1 = yysize + yytnamerr (0, yytname[yyx]);
14373: 	    yysize_overflow |= (yysize1 < yysize);
14374: 	    yysize = yysize1;
14375: 	    yyfmt = yystpcpy (yyfmt, yyprefix);
14376: 	    yyprefix = yyor;
14377: 	  }
14378: 
14379:       yyf = YY_(yyformat);
14380:       yysize1 = yysize + yystrlen (yyf);
14381:       yysize_overflow |= (yysize1 < yysize);
14382:       yysize = yysize1;
14383: 
14384:       if (yysize_overflow)
14385: 	return YYSIZE_MAXIMUM;
14386: 
14387:       if (yyresult)
14388: 	{
14389: 	  /* Avoid sprintf, as that infringes on the user's name space.
14390: 	     Don't have undefined behavior even if the translation
14391: 	     produced a string with the wrong number of "%s"s.  */
14392: 	  char *yyp = yyresult;
14393: 	  int yyi = 0;
14394: 	  while ((*yyp = *yyf) != '\0')
14395: 	    {
14396: 	      if (*yyp == '%' && yyf[1] == 's' && yyi < yycount)
14397: 		{
14398: 		  yyp += yytnamerr (yyp, yyarg[yyi++]);
14399: 		  yyf += 2;
14400: 		}
14401: 	      else
14402: 		{
14403: 		  yyp++;
14404: 		  yyf++;
14405: 		}
14406: 	    }
14407: 	}
14408:       return yysize;
14409:     }
14410: }
14411: #endif /* YYERROR_VERBOSE */
14412: 
14413: 
14414: /*-----------------------------------------------.
14415: | Release the memory associated to this symbol.  |
14416: `-----------------------------------------------*/
14417: 
14418: /*ARGSUSED*/
14419: #if (defined __STDC__ || defined __C99__FUNC__ \
14420:      || defined __cplusplus || defined _MSC_VER)
14421: static void
14422: yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, YYLTYPE *yylocationp, core_yyscan_t yyscanner)
14423: #else
14424: static void
14425: yydestruct (yymsg, yytype, yyvaluep, yylocationp, yyscanner)
14426:     const char *yymsg;
14427:     int yytype;
14428:     YYSTYPE *yyvaluep;
14429:     YYLTYPE *yylocationp;
14430:     core_yyscan_t yyscanner;
14431: #endif
14432: {
14433:   YYUSE (yyvaluep);
14434:   YYUSE (yylocationp);
14435:   YYUSE (yyscanner);
14436: 
14437:   if (!yymsg)
14438:     yymsg = "Deleting";
14439:   YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);
14440: 
14441:   switch (yytype)
14442:     {
14443: 
14444:       default:
14445: 	break;
14446:     }
14447: }
14448: 
14449: 
14450: /* Prevent warnings from -Wmissing-prototypes.  */
14451: 
14452: #ifdef YYPARSE_PARAM
14453: #if defined __STDC__ || defined __cplusplus
14454: int yyparse (void *YYPARSE_PARAM);
14455: #else
14456: int yyparse ();
14457: #endif
14458: #else /* ! YYPARSE_PARAM */
14459: #if defined __STDC__ || defined __cplusplus
14460: int yyparse (core_yyscan_t yyscanner);
14461: #else
14462: int yyparse ();
14463: #endif
14464: #endif /* ! YYPARSE_PARAM */
14465: 
14466: 
14467: 
14468: 
14469: 
14470: 
14471: /*----------.
14472: | yyparse.  |
14473: `----------*/
14474: 
14475: #ifdef YYPARSE_PARAM
14476: #if (defined __STDC__ || defined __C99__FUNC__ \
14477:      || defined __cplusplus || defined _MSC_VER)
14478: int
14479: yyparse (void *YYPARSE_PARAM)
14480: #else
14481: int
14482: yyparse (YYPARSE_PARAM)
14483:     void *YYPARSE_PARAM;
14484: #endif
14485: #else /* ! YYPARSE_PARAM */
14486: #if (defined __STDC__ || defined __C99__FUNC__ \
14487:      || defined __cplusplus || defined _MSC_VER)
14488: int
14489: yyparse (core_yyscan_t yyscanner)
14490: #else
14491: int
14492: yyparse (yyscanner)
14493:     core_yyscan_t yyscanner;
14494: #endif
14495: #endif
14496: {
14497:   /* The look-ahead symbol.  */
14498: int yychar;
14499: 
14500: /* The semantic value of the look-ahead symbol.  */
14501: YYSTYPE yylval;
14502: 
14503: /* Number of syntax errors so far.  */
14504: int yynerrs;
14505: /* Location data for the look-ahead symbol.  */
14506: YYLTYPE yylloc;
14507: 
14508:   int yystate;
14509:   int yyn;
14510:   int yyresult;
14511:   /* Number of tokens to shift before error messages enabled.  */
14512:   int yyerrstatus;
14513:   /* Look-ahead token as an internal (translated) token number.  */
14514:   int yytoken = 0;
14515: #if YYERROR_VERBOSE
14516:   /* Buffer for error messages, and its allocated size.  */
14517:   char yymsgbuf[128];
14518:   char *yymsg = yymsgbuf;
14519:   YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
14520: #endif
14521: 
14522:   /* Three stacks and their tools:
14523:      `yyss': related to states,
14524:      `yyvs': related to semantic values,
14525:      `yyls': related to locations.
14526: 
14527:      Refer to the stacks thru separate pointers, to allow yyoverflow
14528:      to reallocate them elsewhere.  */
14529: 
14530:   /* The state stack.  */
14531:   yytype_int16 yyssa[YYINITDEPTH];
14532:   yytype_int16 *yyss = yyssa;
14533:   yytype_int16 *yyssp;
14534: 
14535:   /* The semantic value stack.  */
14536:   YYSTYPE yyvsa[YYINITDEPTH];
14537:   YYSTYPE *yyvs = yyvsa;
14538:   YYSTYPE *yyvsp;
14539: 
14540:   /* The location stack.  */
14541:   YYLTYPE yylsa[YYINITDEPTH];
14542:   YYLTYPE *yyls = yylsa;
14543:   YYLTYPE *yylsp;
14544:   /* The locations where the error started and ended.  */
14545:   YYLTYPE yyerror_range[2];
14546: 
14547: #define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))
14548: 
14549:   YYSIZE_T yystacksize = YYINITDEPTH;
14550: 
14551:   /* The variables used to return semantic value and location from the
14552:      action routines.  */
14553:   YYSTYPE yyval;
14554:   YYLTYPE yyloc;
14555: 
14556:   /* The number of symbols on the RHS of the reduced rule.
14557:      Keep to zero when no symbol should be popped.  */
14558:   int yylen = 0;
14559: 
14560:   YYDPRINTF ((stderr, "Starting parse\n"));
14561: 
14562:   yystate = 0;
14563:   yyerrstatus = 0;
14564:   yynerrs = 0;
14565:   yychar = YYEMPTY;		/* Cause a token to be read.  */
14566: 
14567:   /* Initialize stack pointers.
14568:      Waste one element of value and location stack
14569:      so that they stay on the same level as the state stack.
14570:      The wasted elements are never initialized.  */
14571: 
14572:   yyssp = yyss;
14573:   yyvsp = yyvs;
14574:   yylsp = yyls;
14575: #if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
14576:   /* Initialize the default location before parsing starts.  */
14577:   yylloc.first_line   = yylloc.last_line   = 1;
14578:   yylloc.first_column = yylloc.last_column = 0;
14579: #endif
14580: 
14581:   goto yysetstate;
14582: 
14583: /*------------------------------------------------------------.
14584: | yynewstate -- Push a new state, which is found in yystate.  |
14585: `------------------------------------------------------------*/
14586:  yynewstate:
14587:   /* In all cases, when you get here, the value and location stacks
14588:      have just been pushed.  So pushing a state here evens the stacks.  */
14589:   yyssp++;
14590: 
14591:  yysetstate:
14592:   *yyssp = yystate;
14593: 
14594:   if (yyss + yystacksize - 1 <= yyssp)
14595:     {
14596:       /* Get the current used size of the three stacks, in elements.  */
14597:       YYSIZE_T yysize = yyssp - yyss + 1;
14598: 
14599: #ifdef yyoverflow
14600:       {
14601: 	/* Give user a chance to reallocate the stack.  Use copies of
14602: 	   these so that the &'s don't force the real ones into
14603: 	   memory.  */
14604: 	YYSTYPE *yyvs1 = yyvs;
14605: 	yytype_int16 *yyss1 = yyss;
14606: 	YYLTYPE *yyls1 = yyls;
14607: 
14608: 	/* Each stack pointer address is followed by the size of the
14609: 	   data in use in that stack, in bytes.  This used to be a
14610: 	   conditional around just the two extra args, but that might
14611: 	   be undefined if yyoverflow is a macro.  */
14612: 	yyoverflow (YY_("memory exhausted"),
14613: 		    &yyss1, yysize * sizeof (*yyssp),
14614: 		    &yyvs1, yysize * sizeof (*yyvsp),
14615: 		    &yyls1, yysize * sizeof (*yylsp),
14616: 		    &yystacksize);
14617: 	yyls = yyls1;
14618: 	yyss = yyss1;
14619: 	yyvs = yyvs1;
14620:       }
14621: #else /* no yyoverflow */
14622: # ifndef YYSTACK_RELOCATE
14623:       goto yyexhaustedlab;
14624: # else
14625:       /* Extend the stack our own way.  */
14626:       if (YYMAXDEPTH <= yystacksize)
14627: 	goto yyexhaustedlab;
14628:       yystacksize *= 2;
14629:       if (YYMAXDEPTH < yystacksize)
14630: 	yystacksize = YYMAXDEPTH;
14631: 
14632:       {
14633: 	yytype_int16 *yyss1 = yyss;
14634: 	union yyalloc *yyptr =
14635: 	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
14636: 	if (! yyptr)
14637: 	  goto yyexhaustedlab;
14638: 	YYSTACK_RELOCATE (yyss);
14639: 	YYSTACK_RELOCATE (yyvs);
14640: 	YYSTACK_RELOCATE (yyls);
14641: #  undef YYSTACK_RELOCATE
14642: 	if (yyss1 != yyssa)
14643: 	  YYSTACK_FREE (yyss1);
14644:       }
14645: # endif
14646: #endif /* no yyoverflow */
14647: 
14648:       yyssp = yyss + yysize - 1;
14649:       yyvsp = yyvs + yysize - 1;
14650:       yylsp = yyls + yysize - 1;
14651: 
14652:       YYDPRINTF ((stderr, "Stack size increased to %lu\n",
14653: 		  (unsigned long int) yystacksize));
14654: 
14655:       if (yyss + yystacksize - 1 <= yyssp)
14656: 	YYABORT;
14657:     }
14658: 
14659:   YYDPRINTF ((stderr, "Entering state %d\n", yystate));
14660: 
14661:   goto yybackup;
14662: 
14663: /*-----------.
14664: | yybackup.  |
14665: `-----------*/
14666: yybackup:
14667: 
14668:   /* Do appropriate processing given the current state.  Read a
14669:      look-ahead token if we need one and don't already have one.  */
14670: 
14671:   /* First try to decide what to do without reference to look-ahead token.  */
14672:   yyn = yypact[yystate];
14673:   if (yyn == YYPACT_NINF)
14674:     goto yydefault;
14675: 
14676:   /* Not known => get a look-ahead token if don't already have one.  */
14677: 
14678:   /* YYCHAR is either YYEMPTY or YYEOF or a valid look-ahead symbol.  */
14679:   if (yychar == YYEMPTY)
14680:     {
14681:       YYDPRINTF ((stderr, "Reading a token: "));
14682:       yychar = YYLEX;
14683:     }
14684: 
14685:   if (yychar <= YYEOF)
14686:     {
14687:       yychar = yytoken = YYEOF;
14688:       YYDPRINTF ((stderr, "Now at end of input.\n"));
14689:     }
14690:   else
14691:     {
14692:       yytoken = YYTRANSLATE (yychar);
14693:       YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
14694:     }
14695: 
14696:   /* If the proper action on seeing token YYTOKEN is to reduce or to
14697:      detect an error, take that action.  */
14698:   yyn += yytoken;
14699:   if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
14700:     goto yydefault;
14701:   yyn = yytable[yyn];
14702:   if (yyn <= 0)
14703:     {
14704:       if (yyn == 0 || yyn == YYTABLE_NINF)
14705: 	goto yyerrlab;
14706:       yyn = -yyn;
14707:       goto yyreduce;
14708:     }
14709: 
14710:   if (yyn == YYFINAL)
14711:     YYACCEPT;
14712: 
14713:   /* Count tokens shifted since error; after three, turn off error
14714:      status.  */
14715:   if (yyerrstatus)
14716:     yyerrstatus--;
14717: 
14718:   /* Shift the look-ahead token.  */
14719:   YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);
14720: 
14721:   /* Discard the shifted token unless it is eof.  */
14722:   if (yychar != YYEOF)
14723:     yychar = YYEMPTY;
14724: 
14725:   yystate = yyn;
14726:   *++yyvsp = yylval;
14727:   *++yylsp = yylloc;
14728:   goto yynewstate;
14729: 
14730: 
14731: /*-----------------------------------------------------------.
14732: | yydefault -- do the default action for the current state.  |
14733: `-----------------------------------------------------------*/
14734: yydefault:
14735:   yyn = yydefact[yystate];
14736:   if (yyn == 0)
14737:     goto yyerrlab;
14738:   goto yyreduce;
14739: 
14740: 
14741: /*-----------------------------.
14742: | yyreduce -- Do a reduction.  |
14743: `-----------------------------*/
14744: yyreduce:
14745:   /* yyn is the number of a rule to reduce with.  */
14746:   yylen = yyr2[yyn];
14747: 
14748:   /* If YYLEN is nonzero, implement the default value of the action:
14749:      `$$ = $1'.
14750: 
14751:      Otherwise, the following line sets YYVAL to garbage.
14752:      This behavior is undocumented and Bison
14753:      users should not rely upon it.  Assigning to YYVAL
14754:      unconditionally makes the parser a bit smaller, and it avoids a
14755:      GCC warning that YYVAL may be used uninitialized.  */
14756:   yyval = yyvsp[1-yylen];
14757: 
14758:   /* Default location.  */
14759:   YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
14760:   YY_REDUCE_PRINT (yyn);
14761:   switch (yyn)
14762:     {
14763:         case 2:
14764: #line 460 "third_party/libpg_query/grammar/grammar.y"
14765:     {
14766: 				pg_yyget_extra(yyscanner)->parsetree = (yyvsp[(1) - (1)].list);
14767: 			;}
14768:     break;
14769: 
14770:   case 3:
14771: #line 476 "third_party/libpg_query/grammar/grammar.y"
14772:     {
14773: 					if ((yyvsp[(1) - (3)].list) != NIL)
14774: 					{
14775: 						/* update length of previous stmt */
14776: 						updateRawStmtEnd(llast_node(PGRawStmt, (yyvsp[(1) - (3)].list)), (yylsp[(2) - (3)]));
14777: 					}
14778: 					if ((yyvsp[(3) - (3)].node) != NULL)
14779: 						(yyval.list) = lappend((yyvsp[(1) - (3)].list), makeRawStmt((yyvsp[(3) - (3)].node), (yylsp[(2) - (3)]) + 1));
14780: 					else
14781: 						(yyval.list) = (yyvsp[(1) - (3)].list);
14782: 				;}
14783:     break;
14784: 
14785:   case 4:
14786: #line 488 "third_party/libpg_query/grammar/grammar.y"
14787:     {
14788: 					if ((yyvsp[(1) - (1)].node) != NULL)
14789: 						(yyval.list) = list_make1(makeRawStmt((yyvsp[(1) - (1)].node), 0));
14790: 					else
14791: 						(yyval.list) = NIL;
14792: 				;}
14793:     break;
14794: 
14795:   case 38:
14796: #line 530 "third_party/libpg_query/grammar/grammar.y"
14797:     { (yyval.node) = NULL; ;}
14798:     break;
14799: 
14800:   case 39:
14801: #line 10 "third_party/libpg_query/grammar/statements/alter_table.y"
14802:     {
14803: 					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
14804: 					n->relation = (yyvsp[(3) - (4)].range);
14805: 					n->cmds = (yyvsp[(4) - (4)].list);
14806: 					n->relkind = PG_OBJECT_TABLE;
14807: 					n->missing_ok = false;
14808: 					(yyval.node) = (PGNode *)n;
14809: 				;}
14810:     break;
14811: 
14812:   case 40:
14813: #line 19 "third_party/libpg_query/grammar/statements/alter_table.y"
14814:     {
14815: 					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
14816: 					n->relation = (yyvsp[(5) - (6)].range);
14817: 					n->cmds = (yyvsp[(6) - (6)].list);
14818: 					n->relkind = PG_OBJECT_TABLE;
14819: 					n->missing_ok = true;
14820: 					(yyval.node) = (PGNode *)n;
14821: 				;}
14822:     break;
14823: 
14824:   case 41:
14825: #line 28 "third_party/libpg_query/grammar/statements/alter_table.y"
14826:     {
14827: 					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
14828: 					n->relation = (yyvsp[(3) - (4)].range);
14829: 					n->cmds = (yyvsp[(4) - (4)].list);
14830: 					n->relkind = PG_OBJECT_INDEX;
14831: 					n->missing_ok = false;
14832: 					(yyval.node) = (PGNode *)n;
14833: 				;}
14834:     break;
14835: 
14836:   case 42:
14837: #line 37 "third_party/libpg_query/grammar/statements/alter_table.y"
14838:     {
14839: 					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
14840: 					n->relation = (yyvsp[(5) - (6)].range);
14841: 					n->cmds = (yyvsp[(6) - (6)].list);
14842: 					n->relkind = PG_OBJECT_INDEX;
14843: 					n->missing_ok = true;
14844: 					(yyval.node) = (PGNode *)n;
14845: 				;}
14846:     break;
14847: 
14848:   case 43:
14849: #line 46 "third_party/libpg_query/grammar/statements/alter_table.y"
14850:     {
14851: 					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
14852: 					n->relation = (yyvsp[(3) - (4)].range);
14853: 					n->cmds = (yyvsp[(4) - (4)].list);
14854: 					n->relkind = PG_OBJECT_SEQUENCE;
14855: 					n->missing_ok = false;
14856: 					(yyval.node) = (PGNode *)n;
14857: 				;}
14858:     break;
14859: 
14860:   case 44:
14861: #line 55 "third_party/libpg_query/grammar/statements/alter_table.y"
14862:     {
14863: 					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
14864: 					n->relation = (yyvsp[(5) - (6)].range);
14865: 					n->cmds = (yyvsp[(6) - (6)].list);
14866: 					n->relkind = PG_OBJECT_SEQUENCE;
14867: 					n->missing_ok = true;
14868: 					(yyval.node) = (PGNode *)n;
14869: 				;}
14870:     break;
14871: 
14872:   case 45:
14873: #line 64 "third_party/libpg_query/grammar/statements/alter_table.y"
14874:     {
14875: 					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
14876: 					n->relation = (yyvsp[(3) - (4)].range);
14877: 					n->cmds = (yyvsp[(4) - (4)].list);
14878: 					n->relkind = PG_OBJECT_VIEW;
14879: 					n->missing_ok = false;
14880: 					(yyval.node) = (PGNode *)n;
14881: 				;}
14882:     break;
14883: 
14884:   case 46:
14885: #line 73 "third_party/libpg_query/grammar/statements/alter_table.y"
14886:     {
14887: 					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
14888: 					n->relation = (yyvsp[(5) - (6)].range);
14889: 					n->cmds = (yyvsp[(6) - (6)].list);
14890: 					n->relkind = PG_OBJECT_VIEW;
14891: 					n->missing_ok = true;
14892: 					(yyval.node) = (PGNode *)n;
14893: 				;}
14894:     break;
14895: 
14896:   case 47:
14897: #line 86 "third_party/libpg_query/grammar/statements/alter_table.y"
14898:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].defelt)); ;}
14899:     break;
14900: 
14901:   case 48:
14902: #line 88 "third_party/libpg_query/grammar/statements/alter_table.y"
14903:     { (yyval.list) = lappend((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].defelt)); ;}
14904:     break;
14905: 
14906:   case 49:
14907: #line 93 "third_party/libpg_query/grammar/statements/alter_table.y"
14908:     { (yyval.node) = (yyvsp[(3) - (3)].node); ;}
14909:     break;
14910: 
14911:   case 50:
14912: #line 94 "third_party/libpg_query/grammar/statements/alter_table.y"
14913:     { (yyval.node) = NULL; ;}
14914:     break;
14915: 
14916:   case 51:
14917: #line 100 "third_party/libpg_query/grammar/statements/alter_table.y"
14918:     {
14919: 					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[(1) - (1)]));
14920: 				;}
14921:     break;
14922: 
14923:   case 52:
14924: #line 104 "third_party/libpg_query/grammar/statements/alter_table.y"
14925:     {
14926: 					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[(3) - (3)].value), (yylsp[(1) - (3)]));
14927: 				;}
14928:     break;
14929: 
14930:   case 53:
14931: #line 108 "third_party/libpg_query/grammar/statements/alter_table.y"
14932:     {
14933: 					if (strcmp((yyvsp[(2) - (2)].defelt)->defname, "as") == 0 ||
14934: 						strcmp((yyvsp[(2) - (2)].defelt)->defname, "restart") == 0 ||
14935: 						strcmp((yyvsp[(2) - (2)].defelt)->defname, "owned_by") == 0)
14936: 						ereport(ERROR,
14937: 								(errcode(PG_ERRCODE_SYNTAX_ERROR),
14938: 								 errmsg("sequence option \"%s\" not supported here", (yyvsp[(2) - (2)].defelt)->defname),
14939: 								 parser_errposition((yylsp[(2) - (2)]))));
14940: 					(yyval.defelt) = (yyvsp[(2) - (2)].defelt);
14941: 				;}
14942:     break;
14943: 
14944:   case 54:
14945: #line 119 "third_party/libpg_query/grammar/statements/alter_table.y"
14946:     {
14947: 					(yyval.defelt) = makeDefElem("generated", (PGNode *) makeInteger((yyvsp[(3) - (3)].ival)), (yylsp[(1) - (3)]));
14948: 				;}
14949:     break;
14950: 
14951:   case 55:
14952: #line 127 "third_party/libpg_query/grammar/statements/alter_table.y"
14953:     {
14954: 					(yyval.list) = list_make1((yyvsp[(1) - (1)].defelt));
14955: 				;}
14956:     break;
14957: 
14958:   case 56:
14959: #line 131 "third_party/libpg_query/grammar/statements/alter_table.y"
14960:     {
14961: 					(yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].defelt));
14962: 				;}
14963:     break;
14964: 
14965:   case 57:
14966: #line 140 "third_party/libpg_query/grammar/statements/alter_table.y"
14967:     {
14968: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
14969: 					n->subtype = PG_AT_AddColumn;
14970: 					n->def = (yyvsp[(2) - (2)].node);
14971: 					n->missing_ok = false;
14972: 					(yyval.node) = (PGNode *)n;
14973: 				;}
14974:     break;
14975: 
14976:   case 58:
14977: #line 149 "third_party/libpg_query/grammar/statements/alter_table.y"
14978:     {
14979: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
14980: 					n->subtype = PG_AT_AddColumn;
14981: 					n->def = (yyvsp[(5) - (5)].node);
14982: 					n->missing_ok = true;
14983: 					(yyval.node) = (PGNode *)n;
14984: 				;}
14985:     break;
14986: 
14987:   case 59:
14988: #line 158 "third_party/libpg_query/grammar/statements/alter_table.y"
14989:     {
14990: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
14991: 					n->subtype = PG_AT_AddColumn;
14992: 					n->def = (yyvsp[(3) - (3)].node);
14993: 					n->missing_ok = false;
14994: 					(yyval.node) = (PGNode *)n;
14995: 				;}
14996:     break;
14997: 
14998:   case 60:
14999: #line 167 "third_party/libpg_query/grammar/statements/alter_table.y"
15000:     {
15001: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
15002: 					n->subtype = PG_AT_AddColumn;
15003: 					n->def = (yyvsp[(6) - (6)].node);
15004: 					n->missing_ok = true;
15005: 					(yyval.node) = (PGNode *)n;
15006: 				;}
15007:     break;
15008: 
15009:   case 61:
15010: #line 176 "third_party/libpg_query/grammar/statements/alter_table.y"
15011:     {
15012: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
15013: 					n->subtype = PG_AT_ColumnDefault;
15014: 					n->name = (yyvsp[(3) - (4)].str);
15015: 					n->def = (yyvsp[(4) - (4)].node);
15016: 					(yyval.node) = (PGNode *)n;
15017: 				;}
15018:     break;
15019: 
15020:   case 62:
15021: #line 185 "third_party/libpg_query/grammar/statements/alter_table.y"
15022:     {
15023: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
15024: 					n->subtype = PG_AT_DropNotNull;
15025: 					n->name = (yyvsp[(3) - (6)].str);
15026: 					(yyval.node) = (PGNode *)n;
15027: 				;}
15028:     break;
15029: 
15030:   case 63:
15031: #line 193 "third_party/libpg_query/grammar/statements/alter_table.y"
15032:     {
15033: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
15034: 					n->subtype = PG_AT_SetNotNull;
15035: 					n->name = (yyvsp[(3) - (6)].str);
15036: 					(yyval.node) = (PGNode *)n;
15037: 				;}
15038:     break;
15039: 
15040:   case 64:
15041: #line 201 "third_party/libpg_query/grammar/statements/alter_table.y"
15042:     {
15043: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
15044: 					n->subtype = PG_AT_SetStatistics;
15045: 					n->name = (yyvsp[(3) - (6)].str);
15046: 					n->def = (PGNode *) makeInteger((yyvsp[(6) - (6)].ival));
15047: 					(yyval.node) = (PGNode *)n;
15048: 				;}
15049:     break;
15050: 
15051:   case 65:
15052: #line 210 "third_party/libpg_query/grammar/statements/alter_table.y"
15053:     {
15054: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
15055: 					n->subtype = PG_AT_SetOptions;
15056: 					n->name = (yyvsp[(3) - (5)].str);
15057: 					n->def = (PGNode *) (yyvsp[(5) - (5)].list);
15058: 					(yyval.node) = (PGNode *)n;
15059: 				;}
15060:     break;
15061: 
15062:   case 66:
15063: #line 219 "third_party/libpg_query/grammar/statements/alter_table.y"
15064:     {
15065: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
15066: 					n->subtype = PG_AT_ResetOptions;
15067: 					n->name = (yyvsp[(3) - (5)].str);
15068: 					n->def = (PGNode *) (yyvsp[(5) - (5)].list);
15069: 					(yyval.node) = (PGNode *)n;
15070: 				;}
15071:     break;
15072: 
15073:   case 67:
15074: #line 228 "third_party/libpg_query/grammar/statements/alter_table.y"
15075:     {
15076: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
15077: 					n->subtype = PG_AT_SetStorage;
15078: 					n->name = (yyvsp[(3) - (6)].str);
15079: 					n->def = (PGNode *) makeString((yyvsp[(6) - (6)].str));
15080: 					(yyval.node) = (PGNode *)n;
15081: 				;}
15082:     break;
15083: 
15084:   case 68:
15085: #line 237 "third_party/libpg_query/grammar/statements/alter_table.y"
15086:     {
15087: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
15088: 					PGConstraint *c = makeNode(PGConstraint);
15089: 
15090: 					c->contype = PG_CONSTR_IDENTITY;
15091: 					c->generated_when = (yyvsp[(6) - (9)].ival);
15092: 					c->options = (yyvsp[(9) - (9)].list);
15093: 					c->location = (yylsp[(5) - (9)]);
15094: 
15095: 					n->subtype = PG_AT_AddIdentity;
15096: 					n->name = (yyvsp[(3) - (9)].str);
15097: 					n->def = (PGNode *) c;
15098: 
15099: 					(yyval.node) = (PGNode *)n;
15100: 				;}
15101:     break;
15102: 
15103:   case 69:
15104: #line 254 "third_party/libpg_query/grammar/statements/alter_table.y"
15105:     {
15106: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
15107: 					n->subtype = PG_AT_SetIdentity;
15108: 					n->name = (yyvsp[(3) - (4)].str);
15109: 					n->def = (PGNode *) (yyvsp[(4) - (4)].list);
15110: 					(yyval.node) = (PGNode *)n;
15111: 				;}
15112:     break;
15113: 
15114:   case 70:
15115: #line 263 "third_party/libpg_query/grammar/statements/alter_table.y"
15116:     {
15117: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
15118: 					n->subtype = AT_DropIdentity;
15119: 					n->name = (yyvsp[(3) - (5)].str);
15120: 					n->missing_ok = false;
15121: 					(yyval.node) = (PGNode *)n;
15122: 				;}
15123:     break;
15124: 
15125:   case 71:
15126: #line 272 "third_party/libpg_query/grammar/statements/alter_table.y"
15127:     {
15128: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
15129: 					n->subtype = AT_DropIdentity;
15130: 					n->name = (yyvsp[(3) - (7)].str);
15131: 					n->missing_ok = true;
15132: 					(yyval.node) = (PGNode *)n;
15133: 				;}
15134:     break;
15135: 
15136:   case 72:
15137: #line 281 "third_party/libpg_query/grammar/statements/alter_table.y"
15138:     {
15139: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
15140: 					n->subtype = PG_AT_DropColumn;
15141: 					n->name = (yyvsp[(5) - (6)].str);
15142: 					n->behavior = (yyvsp[(6) - (6)].dbehavior);
15143: 					n->missing_ok = true;
15144: 					(yyval.node) = (PGNode *)n;
15145: 				;}
15146:     break;
15147: 
15148:   case 73:
15149: #line 291 "third_party/libpg_query/grammar/statements/alter_table.y"
15150:     {
15151: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
15152: 					n->subtype = PG_AT_DropColumn;
15153: 					n->name = (yyvsp[(3) - (4)].str);
15154: 					n->behavior = (yyvsp[(4) - (4)].dbehavior);
15155: 					n->missing_ok = false;
15156: 					(yyval.node) = (PGNode *)n;
15157: 				;}
15158:     break;
15159: 
15160:   case 74:
15161: #line 304 "third_party/libpg_query/grammar/statements/alter_table.y"
15162:     {
15163: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
15164: 					PGColumnDef *def = makeNode(PGColumnDef);
15165: 					n->subtype = PG_AT_AlterColumnType;
15166: 					n->name = (yyvsp[(3) - (8)].str);
15167: 					n->def = (PGNode *) def;
15168: 					/* We only use these fields of the PGColumnDef node */
15169: 					def->typeName = (yyvsp[(6) - (8)].typnam);
15170: 					def->collClause = (PGCollateClause *) (yyvsp[(7) - (8)].node);
15171: 					def->raw_default = (yyvsp[(8) - (8)].node);
15172: 					def->location = (yylsp[(3) - (8)]);
15173: 					(yyval.node) = (PGNode *)n;
15174: 				;}
15175:     break;
15176: 
15177:   case 75:
15178: #line 319 "third_party/libpg_query/grammar/statements/alter_table.y"
15179:     {
15180: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
15181: 					n->subtype = PG_AT_AlterColumnGenericOptions;
15182: 					n->name = (yyvsp[(3) - (4)].str);
15183: 					n->def = (PGNode *) (yyvsp[(4) - (4)].list);
15184: 					(yyval.node) = (PGNode *)n;
15185: 				;}
15186:     break;
15187: 
15188:   case 76:
15189: #line 328 "third_party/libpg_query/grammar/statements/alter_table.y"
15190:     {
15191: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
15192: 					n->subtype = PG_AT_AddConstraint;
15193: 					n->def = (yyvsp[(2) - (2)].node);
15194: 					(yyval.node) = (PGNode *)n;
15195: 				;}
15196:     break;
15197: 
15198:   case 77:
15199: #line 336 "third_party/libpg_query/grammar/statements/alter_table.y"
15200:     {
15201: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
15202: 					PGConstraint *c = makeNode(PGConstraint);
15203: 					n->subtype = PG_AT_AlterConstraint;
15204: 					n->def = (PGNode *) c;
15205: 					c->contype = PG_CONSTR_FOREIGN; /* others not supported, yet */
15206: 					c->conname = (yyvsp[(3) - (4)].str);
15207: 					processCASbits((yyvsp[(4) - (4)].ival), (yylsp[(4) - (4)]), "ALTER CONSTRAINT statement",
15208: 									&c->deferrable,
15209: 									&c->initdeferred,
15210: 									NULL, NULL, yyscanner);
15211: 					(yyval.node) = (PGNode *)n;
15212: 				;}
15213:     break;
15214: 
15215:   case 78:
15216: #line 351 "third_party/libpg_query/grammar/statements/alter_table.y"
15217:     {
15218: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
15219: 					n->subtype = PG_AT_ValidateConstraint;
15220: 					n->name = (yyvsp[(3) - (3)].str);
15221: 					(yyval.node) = (PGNode *)n;
15222: 				;}
15223:     break;
15224: 
15225:   case 79:
15226: #line 359 "third_party/libpg_query/grammar/statements/alter_table.y"
15227:     {
15228: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
15229: 					n->subtype = PG_AT_DropConstraint;
15230: 					n->name = (yyvsp[(5) - (6)].str);
15231: 					n->behavior = (yyvsp[(6) - (6)].dbehavior);
15232: 					n->missing_ok = true;
15233: 					(yyval.node) = (PGNode *)n;
15234: 				;}
15235:     break;
15236: 
15237:   case 80:
15238: #line 369 "third_party/libpg_query/grammar/statements/alter_table.y"
15239:     {
15240: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
15241: 					n->subtype = PG_AT_DropConstraint;
15242: 					n->name = (yyvsp[(3) - (4)].str);
15243: 					n->behavior = (yyvsp[(4) - (4)].dbehavior);
15244: 					n->missing_ok = false;
15245: 					(yyval.node) = (PGNode *)n;
15246: 				;}
15247:     break;
15248: 
15249:   case 81:
15250: #line 379 "third_party/libpg_query/grammar/statements/alter_table.y"
15251:     {
15252: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
15253: 					n->subtype = PG_AT_SetLogged;
15254: 					(yyval.node) = (PGNode *)n;
15255: 				;}
15256:     break;
15257: 
15258:   case 82:
15259: #line 386 "third_party/libpg_query/grammar/statements/alter_table.y"
15260:     {
15261: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
15262: 					n->subtype = PG_AT_SetUnLogged;
15263: 					(yyval.node) = (PGNode *)n;
15264: 				;}
15265:     break;
15266: 
15267:   case 83:
15268: #line 393 "third_party/libpg_query/grammar/statements/alter_table.y"
15269:     {
15270: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
15271: 					n->subtype = PG_AT_SetRelOptions;
15272: 					n->def = (PGNode *)(yyvsp[(2) - (2)].list);
15273: 					(yyval.node) = (PGNode *)n;
15274: 				;}
15275:     break;
15276: 
15277:   case 84:
15278: #line 401 "third_party/libpg_query/grammar/statements/alter_table.y"
15279:     {
15280: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
15281: 					n->subtype = PG_AT_ResetRelOptions;
15282: 					n->def = (PGNode *)(yyvsp[(2) - (2)].list);
15283: 					(yyval.node) = (PGNode *)n;
15284: 				;}
15285:     break;
15286: 
15287:   case 85:
15288: #line 408 "third_party/libpg_query/grammar/statements/alter_table.y"
15289:     {
15290: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
15291: 					n->subtype = PG_AT_GenericOptions;
15292: 					n->def = (PGNode *)(yyvsp[(1) - (1)].list);
15293: 					(yyval.node) = (PGNode *) n;
15294: 				;}
15295:     break;
15296: 
15297:   case 86:
15298: #line 418 "third_party/libpg_query/grammar/statements/alter_table.y"
15299:     { (yyval.node) = (yyvsp[(2) - (2)].node); ;}
15300:     break;
15301: 
15302:   case 87:
15303: #line 419 "third_party/libpg_query/grammar/statements/alter_table.y"
15304:     { (yyval.node) = NULL; ;}
15305:     break;
15306: 
15307:   case 88:
15308: #line 425 "third_party/libpg_query/grammar/statements/alter_table.y"
15309:     {
15310: 					(yyval.defelt) = (yyvsp[(1) - (1)].defelt);
15311: 				;}
15312:     break;
15313: 
15314:   case 89:
15315: #line 429 "third_party/libpg_query/grammar/statements/alter_table.y"
15316:     {
15317: 					(yyval.defelt) = (yyvsp[(2) - (2)].defelt);
15318: 					(yyval.defelt)->defaction = PG_DEFELEM_SET;
15319: 				;}
15320:     break;
15321: 
15322:   case 90:
15323: #line 434 "third_party/libpg_query/grammar/statements/alter_table.y"
15324:     {
15325: 					(yyval.defelt) = (yyvsp[(2) - (2)].defelt);
15326: 					(yyval.defelt)->defaction = PG_DEFELEM_ADD;
15327: 				;}
15328:     break;
15329: 
15330:   case 91:
15331: #line 439 "third_party/libpg_query/grammar/statements/alter_table.y"
15332:     {
15333: 					(yyval.defelt) = makeDefElemExtended(NULL, (yyvsp[(2) - (2)].str), NULL, DEFELEM_DROP, (yylsp[(2) - (2)]));
15334: 				;}
15335:     break;
15336: 
15337:   case 92:
15338: #line 446 "third_party/libpg_query/grammar/statements/alter_table.y"
15339:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].node)); ;}
15340:     break;
15341: 
15342:   case 93:
15343: #line 447 "third_party/libpg_query/grammar/statements/alter_table.y"
15344:     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node)); ;}
15345:     break;
15346: 
15347:   case 94:
15348: #line 452 "third_party/libpg_query/grammar/statements/alter_table.y"
15349:     { (yyval.list) = (yyvsp[(3) - (4)].list); ;}
15350:     break;
15351: 
15352:   case 95:
15353: #line 456 "third_party/libpg_query/grammar/statements/alter_table.y"
15354:     { (yyval.ival) = 1; ;}
15355:     break;
15356: 
15357:   case 96:
15358: #line 457 "third_party/libpg_query/grammar/statements/alter_table.y"
15359:     { (yyval.ival) = 0; ;}
15360:     break;
15361: 
15362:   case 97:
15363: #line 8 "third_party/libpg_query/grammar/statements/deallocate.y"
15364:     {
15365: 						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
15366: 						n->name = (yyvsp[(2) - (2)].str);
15367: 						(yyval.node) = (PGNode *) n;
15368: 					;}
15369:     break;
15370: 
15371:   case 98:
15372: #line 14 "third_party/libpg_query/grammar/statements/deallocate.y"
15373:     {
15374: 						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
15375: 						n->name = (yyvsp[(3) - (3)].str);
15376: 						(yyval.node) = (PGNode *) n;
15377: 					;}
15378:     break;
15379: 
15380:   case 99:
15381: #line 20 "third_party/libpg_query/grammar/statements/deallocate.y"
15382:     {
15383: 						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
15384: 						n->name = NULL;
15385: 						(yyval.node) = (PGNode *) n;
15386: 					;}
15387:     break;
15388: 
15389:   case 100:
15390: #line 26 "third_party/libpg_query/grammar/statements/deallocate.y"
15391:     {
15392: 						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
15393: 						n->name = NULL;
15394: 						(yyval.node) = (PGNode *) n;
15395: 					;}
15396:     break;
15397: 
15398:   case 101:
15399: #line 7 "third_party/libpg_query/grammar/statements/rename.y"
15400:     {
15401: 					PGRenameStmt *n = makeNode(PGRenameStmt);
15402: 					n->renameType = PG_OBJECT_SCHEMA;
15403: 					n->subname = (yyvsp[(3) - (6)].str);
15404: 					n->newname = (yyvsp[(6) - (6)].str);
15405: 					n->missing_ok = false;
15406: 					(yyval.node) = (PGNode *)n;
15407: 				;}
15408:     break;
15409: 
15410:   case 102:
15411: #line 16 "third_party/libpg_query/grammar/statements/rename.y"
15412:     {
15413: 					PGRenameStmt *n = makeNode(PGRenameStmt);
15414: 					n->renameType = PG_OBJECT_TABLE;
15415: 					n->relation = (yyvsp[(3) - (6)].range);
15416: 					n->subname = NULL;
15417: 					n->newname = (yyvsp[(6) - (6)].str);
15418: 					n->missing_ok = false;
15419: 					(yyval.node) = (PGNode *)n;
15420: 				;}
15421:     break;
15422: 
15423:   case 103:
15424: #line 26 "third_party/libpg_query/grammar/statements/rename.y"
15425:     {
15426: 					PGRenameStmt *n = makeNode(PGRenameStmt);
15427: 					n->renameType = PG_OBJECT_TABLE;
15428: 					n->relation = (yyvsp[(5) - (8)].range);
15429: 					n->subname = NULL;
15430: 					n->newname = (yyvsp[(8) - (8)].str);
15431: 					n->missing_ok = true;
15432: 					(yyval.node) = (PGNode *)n;
15433: 				;}
15434:     break;
15435: 
15436:   case 104:
15437: #line 36 "third_party/libpg_query/grammar/statements/rename.y"
15438:     {
15439: 					PGRenameStmt *n = makeNode(PGRenameStmt);
15440: 					n->renameType = PG_OBJECT_SEQUENCE;
15441: 					n->relation = (yyvsp[(3) - (6)].range);
15442: 					n->subname = NULL;
15443: 					n->newname = (yyvsp[(6) - (6)].str);
15444: 					n->missing_ok = false;
15445: 					(yyval.node) = (PGNode *)n;
15446: 				;}
15447:     break;
15448: 
15449:   case 105:
15450: #line 46 "third_party/libpg_query/grammar/statements/rename.y"
15451:     {
15452: 					PGRenameStmt *n = makeNode(PGRenameStmt);
15453: 					n->renameType = PG_OBJECT_SEQUENCE;
15454: 					n->relation = (yyvsp[(5) - (8)].range);
15455: 					n->subname = NULL;
15456: 					n->newname = (yyvsp[(8) - (8)].str);
15457: 					n->missing_ok = true;
15458: 					(yyval.node) = (PGNode *)n;
15459: 				;}
15460:     break;
15461: 
15462:   case 106:
15463: #line 56 "third_party/libpg_query/grammar/statements/rename.y"
15464:     {
15465: 					PGRenameStmt *n = makeNode(PGRenameStmt);
15466: 					n->renameType = PG_OBJECT_VIEW;
15467: 					n->relation = (yyvsp[(3) - (6)].range);
15468: 					n->subname = NULL;
15469: 					n->newname = (yyvsp[(6) - (6)].str);
15470: 					n->missing_ok = false;
15471: 					(yyval.node) = (PGNode *)n;
15472: 				;}
15473:     break;
15474: 
15475:   case 107:
15476: #line 66 "third_party/libpg_query/grammar/statements/rename.y"
15477:     {
15478: 					PGRenameStmt *n = makeNode(PGRenameStmt);
15479: 					n->renameType = PG_OBJECT_VIEW;
15480: 					n->relation = (yyvsp[(5) - (8)].range);
15481: 					n->subname = NULL;
15482: 					n->newname = (yyvsp[(8) - (8)].str);
15483: 					n->missing_ok = true;
15484: 					(yyval.node) = (PGNode *)n;
15485: 				;}
15486:     break;
15487: 
15488:   case 108:
15489: #line 76 "third_party/libpg_query/grammar/statements/rename.y"
15490:     {
15491: 					PGRenameStmt *n = makeNode(PGRenameStmt);
15492: 					n->renameType = PG_OBJECT_INDEX;
15493: 					n->relation = (yyvsp[(3) - (6)].range);
15494: 					n->subname = NULL;
15495: 					n->newname = (yyvsp[(6) - (6)].str);
15496: 					n->missing_ok = false;
15497: 					(yyval.node) = (PGNode *)n;
15498: 				;}
15499:     break;
15500: 
15501:   case 109:
15502: #line 86 "third_party/libpg_query/grammar/statements/rename.y"
15503:     {
15504: 					PGRenameStmt *n = makeNode(PGRenameStmt);
15505: 					n->renameType = PG_OBJECT_INDEX;
15506: 					n->relation = (yyvsp[(5) - (8)].range);
15507: 					n->subname = NULL;
15508: 					n->newname = (yyvsp[(8) - (8)].str);
15509: 					n->missing_ok = true;
15510: 					(yyval.node) = (PGNode *)n;
15511: 				;}
15512:     break;
15513: 
15514:   case 110:
15515: #line 96 "third_party/libpg_query/grammar/statements/rename.y"
15516:     {
15517: 					PGRenameStmt *n = makeNode(PGRenameStmt);
15518: 					n->renameType = PG_OBJECT_COLUMN;
15519: 					n->relationType = PG_OBJECT_TABLE;
15520: 					n->relation = (yyvsp[(3) - (8)].range);
15521: 					n->subname = (yyvsp[(6) - (8)].str);
15522: 					n->newname = (yyvsp[(8) - (8)].str);
15523: 					n->missing_ok = false;
15524: 					(yyval.node) = (PGNode *)n;
15525: 				;}
15526:     break;
15527: 
15528:   case 111:
15529: #line 107 "third_party/libpg_query/grammar/statements/rename.y"
15530:     {
15531: 					PGRenameStmt *n = makeNode(PGRenameStmt);
15532: 					n->renameType = PG_OBJECT_COLUMN;
15533: 					n->relationType = PG_OBJECT_TABLE;
15534: 					n->relation = (yyvsp[(5) - (10)].range);
15535: 					n->subname = (yyvsp[(8) - (10)].str);
15536: 					n->newname = (yyvsp[(10) - (10)].str);
15537: 					n->missing_ok = true;
15538: 					(yyval.node) = (PGNode *)n;
15539: 				;}
15540:     break;
15541: 
15542:   case 112:
15543: #line 118 "third_party/libpg_query/grammar/statements/rename.y"
15544:     {
15545: 					PGRenameStmt *n = makeNode(PGRenameStmt);
15546: 					n->renameType = PG_OBJECT_TABCONSTRAINT;
15547: 					n->relation = (yyvsp[(3) - (8)].range);
15548: 					n->subname = (yyvsp[(6) - (8)].str);
15549: 					n->newname = (yyvsp[(8) - (8)].str);
15550: 					n->missing_ok = false;
15551: 					(yyval.node) = (PGNode *)n;
15552: 				;}
15553:     break;
15554: 
15555:   case 113:
15556: #line 128 "third_party/libpg_query/grammar/statements/rename.y"
15557:     {
15558: 					PGRenameStmt *n = makeNode(PGRenameStmt);
15559: 					n->renameType = PG_OBJECT_TABCONSTRAINT;
15560: 					n->relation = (yyvsp[(5) - (10)].range);
15561: 					n->subname = (yyvsp[(8) - (10)].str);
15562: 					n->newname = (yyvsp[(10) - (10)].str);
15563: 					n->missing_ok = true;
15564: 					(yyval.node) = (PGNode *)n;
15565: 				;}
15566:     break;
15567: 
15568:   case 114:
15569: #line 140 "third_party/libpg_query/grammar/statements/rename.y"
15570:     { (yyval.ival) = COLUMN; ;}
15571:     break;
15572: 
15573:   case 115:
15574: #line 141 "third_party/libpg_query/grammar/statements/rename.y"
15575:     { (yyval.ival) = 0; ;}
15576:     break;
15577: 
15578:   case 116:
15579: #line 10 "third_party/libpg_query/grammar/statements/insert.y"
15580:     {
15581: 					(yyvsp[(5) - (7)].istmt)->relation = (yyvsp[(4) - (7)].range);
15582: 					(yyvsp[(5) - (7)].istmt)->onConflictClause = (yyvsp[(6) - (7)].onconflict);
15583: 					(yyvsp[(5) - (7)].istmt)->returningList = (yyvsp[(7) - (7)].list);
15584: 					(yyvsp[(5) - (7)].istmt)->withClause = (yyvsp[(1) - (7)].with);
15585: 					(yyval.node) = (PGNode *) (yyvsp[(5) - (7)].istmt);
15586: 				;}
15587:     break;
15588: 
15589:   case 117:
15590: #line 22 "third_party/libpg_query/grammar/statements/insert.y"
15591:     {
15592: 					(yyval.istmt) = makeNode(PGInsertStmt);
15593: 					(yyval.istmt)->cols = NIL;
15594: 					(yyval.istmt)->selectStmt = (yyvsp[(1) - (1)].node);
15595: 				;}
15596:     break;
15597: 
15598:   case 118:
15599: #line 28 "third_party/libpg_query/grammar/statements/insert.y"
15600:     {
15601: 					(yyval.istmt) = makeNode(PGInsertStmt);
15602: 					(yyval.istmt)->cols = NIL;
15603: 					(yyval.istmt)->override = (yyvsp[(2) - (4)].override);
15604: 					(yyval.istmt)->selectStmt = (yyvsp[(4) - (4)].node);
15605: 				;}
15606:     break;
15607: 
15608:   case 119:
15609: #line 35 "third_party/libpg_query/grammar/statements/insert.y"
15610:     {
15611: 					(yyval.istmt) = makeNode(PGInsertStmt);
15612: 					(yyval.istmt)->cols = (yyvsp[(2) - (4)].list);
15613: 					(yyval.istmt)->selectStmt = (yyvsp[(4) - (4)].node);
15614: 				;}
15615:     break;
15616: 
15617:   case 120:
15618: #line 41 "third_party/libpg_query/grammar/statements/insert.y"
15619:     {
15620: 					(yyval.istmt) = makeNode(PGInsertStmt);
15621: 					(yyval.istmt)->cols = (yyvsp[(2) - (7)].list);
15622: 					(yyval.istmt)->override = (yyvsp[(5) - (7)].override);
15623: 					(yyval.istmt)->selectStmt = (yyvsp[(7) - (7)].node);
15624: 				;}
15625:     break;
15626: 
15627:   case 121:
15628: #line 48 "third_party/libpg_query/grammar/statements/insert.y"
15629:     {
15630: 					(yyval.istmt) = makeNode(PGInsertStmt);
15631: 					(yyval.istmt)->cols = NIL;
15632: 					(yyval.istmt)->selectStmt = NULL;
15633: 				;}
15634:     break;
15635: 
15636:   case 122:
15637: #line 58 "third_party/libpg_query/grammar/statements/insert.y"
15638:     {
15639: 					(yyval.range) = (yyvsp[(1) - (1)].range);
15640: 				;}
15641:     break;
15642: 
15643:   case 123:
15644: #line 62 "third_party/libpg_query/grammar/statements/insert.y"
15645:     {
15646: 					(yyvsp[(1) - (3)].range)->alias = makeAlias((yyvsp[(3) - (3)].str), NIL);
15647: 					(yyval.range) = (yyvsp[(1) - (3)].range);
15648: 				;}
15649:     break;
15650: 
15651:   case 124:
15652: #line 71 "third_party/libpg_query/grammar/statements/insert.y"
15653:     {
15654: 					(yyval.infer) = makeNode(PGInferClause);
15655: 					(yyval.infer)->indexElems = (yyvsp[(2) - (4)].list);
15656: 					(yyval.infer)->whereClause = (yyvsp[(4) - (4)].node);
15657: 					(yyval.infer)->conname = NULL;
15658: 					(yyval.infer)->location = (yylsp[(1) - (4)]);
15659: 				;}
15660:     break;
15661: 
15662:   case 125:
15663: #line 80 "third_party/libpg_query/grammar/statements/insert.y"
15664:     {
15665: 					(yyval.infer) = makeNode(PGInferClause);
15666: 					(yyval.infer)->indexElems = NIL;
15667: 					(yyval.infer)->whereClause = NULL;
15668: 					(yyval.infer)->conname = (yyvsp[(3) - (3)].str);
15669: 					(yyval.infer)->location = (yylsp[(1) - (3)]);
15670: 				;}
15671:     break;
15672: 
15673:   case 126:
15674: #line 88 "third_party/libpg_query/grammar/statements/insert.y"
15675:     {
15676: 					(yyval.infer) = NULL;
15677: 				;}
15678:     break;
15679: 
15680:   case 127:
15681: #line 95 "third_party/libpg_query/grammar/statements/insert.y"
15682:     { (yyval.with) = (yyvsp[(1) - (1)].with); ;}
15683:     break;
15684: 
15685:   case 128:
15686: #line 96 "third_party/libpg_query/grammar/statements/insert.y"
15687:     { (yyval.with) = NULL; ;}
15688:     break;
15689: 
15690:   case 129:
15691: #line 102 "third_party/libpg_query/grammar/statements/insert.y"
15692:     {
15693: 					(yyval.target) = makeNode(PGResTarget);
15694: 					(yyval.target)->name = (yyvsp[(1) - (2)].str);
15695: 					(yyval.target)->indirection = check_indirection((yyvsp[(2) - (2)].list), yyscanner);
15696: 					(yyval.target)->val = NULL;
15697: 					(yyval.target)->location = (yylsp[(1) - (2)]);
15698: 				;}
15699:     break;
15700: 
15701:   case 130:
15702: #line 114 "third_party/libpg_query/grammar/statements/insert.y"
15703:     {
15704: 					(yyvsp[(1) - (3)].target)->val = (PGNode *) (yyvsp[(3) - (3)].node);
15705: 					(yyval.list) = list_make1((yyvsp[(1) - (3)].target));
15706: 				;}
15707:     break;
15708: 
15709:   case 131:
15710: #line 119 "third_party/libpg_query/grammar/statements/insert.y"
15711:     {
15712: 					int ncolumns = list_length((yyvsp[(2) - (5)].list));
15713: 					int i = 1;
15714: 					PGListCell *col_cell;
15715: 
15716: 					/* Create a PGMultiAssignRef source for each target */
15717: 					foreach(col_cell, (yyvsp[(2) - (5)].list))
15718: 					{
15719: 						PGResTarget *res_col = (PGResTarget *) lfirst(col_cell);
15720: 						PGMultiAssignRef *r = makeNode(PGMultiAssignRef);
15721: 
15722: 						r->source = (PGNode *) (yyvsp[(5) - (5)].node);
15723: 						r->colno = i;
15724: 						r->ncolumns = ncolumns;
15725: 						res_col->val = (PGNode *) r;
15726: 						i++;
15727: 					}
15728: 
15729: 					(yyval.list) = (yyvsp[(2) - (5)].list);
15730: 				;}
15731:     break;
15732: 
15733:   case 132:
15734: #line 144 "third_party/libpg_query/grammar/statements/insert.y"
15735:     {
15736: 					(yyval.onconflict) = makeNode(PGOnConflictClause);
15737: 					(yyval.onconflict)->action = PG_ONCONFLICT_UPDATE;
15738: 					(yyval.onconflict)->infer = (yyvsp[(3) - (8)].infer);
15739: 					(yyval.onconflict)->targetList = (yyvsp[(7) - (8)].list);
15740: 					(yyval.onconflict)->whereClause = (yyvsp[(8) - (8)].node);
15741: 					(yyval.onconflict)->location = (yylsp[(1) - (8)]);
15742: 				;}
15743:     break;
15744: 
15745:   case 133:
15746: #line 154 "third_party/libpg_query/grammar/statements/insert.y"
15747:     {
15748: 					(yyval.onconflict) = makeNode(PGOnConflictClause);
15749: 					(yyval.onconflict)->action = PG_ONCONFLICT_NOTHING;
15750: 					(yyval.onconflict)->infer = (yyvsp[(3) - (5)].infer);
15751: 					(yyval.onconflict)->targetList = NIL;
15752: 					(yyval.onconflict)->whereClause = NULL;
15753: 					(yyval.onconflict)->location = (yylsp[(1) - (5)]);
15754: 				;}
15755:     break;
15756: 
15757:   case 134:
15758: #line 163 "third_party/libpg_query/grammar/statements/insert.y"
15759:     {
15760: 					(yyval.onconflict) = NULL;
15761: 				;}
15762:     break;
15763: 
15764:   case 135:
15765: #line 170 "third_party/libpg_query/grammar/statements/insert.y"
15766:     {
15767: 					(yyval.ielem) = makeNode(PGIndexElem);
15768: 					(yyval.ielem)->name = (yyvsp[(1) - (5)].str);
15769: 					(yyval.ielem)->expr = NULL;
15770: 					(yyval.ielem)->indexcolname = NULL;
15771: 					(yyval.ielem)->collation = (yyvsp[(2) - (5)].list);
15772: 					(yyval.ielem)->opclass = (yyvsp[(3) - (5)].list);
15773: 					(yyval.ielem)->ordering = (yyvsp[(4) - (5)].sortorder);
15774: 					(yyval.ielem)->nulls_ordering = (yyvsp[(5) - (5)].nullorder);
15775: 				;}
15776:     break;
15777: 
15778:   case 136:
15779: #line 181 "third_party/libpg_query/grammar/statements/insert.y"
15780:     {
15781: 					(yyval.ielem) = makeNode(PGIndexElem);
15782: 					(yyval.ielem)->name = NULL;
15783: 					(yyval.ielem)->expr = (yyvsp[(1) - (5)].node);
15784: 					(yyval.ielem)->indexcolname = NULL;
15785: 					(yyval.ielem)->collation = (yyvsp[(2) - (5)].list);
15786: 					(yyval.ielem)->opclass = (yyvsp[(3) - (5)].list);
15787: 					(yyval.ielem)->ordering = (yyvsp[(4) - (5)].sortorder);
15788: 					(yyval.ielem)->nulls_ordering = (yyvsp[(5) - (5)].nullorder);
15789: 				;}
15790:     break;
15791: 
15792:   case 137:
15793: #line 192 "third_party/libpg_query/grammar/statements/insert.y"
15794:     {
15795: 					(yyval.ielem) = makeNode(PGIndexElem);
15796: 					(yyval.ielem)->name = NULL;
15797: 					(yyval.ielem)->expr = (yyvsp[(2) - (7)].node);
15798: 					(yyval.ielem)->indexcolname = NULL;
15799: 					(yyval.ielem)->collation = (yyvsp[(4) - (7)].list);
15800: 					(yyval.ielem)->opclass = (yyvsp[(5) - (7)].list);
15801: 					(yyval.ielem)->ordering = (yyvsp[(6) - (7)].sortorder);
15802: 					(yyval.ielem)->nulls_ordering = (yyvsp[(7) - (7)].nullorder);
15803: 				;}
15804:     break;
15805: 
15806:   case 138:
15807: #line 206 "third_party/libpg_query/grammar/statements/insert.y"
15808:     { (yyval.list) = (yyvsp[(2) - (2)].list); ;}
15809:     break;
15810: 
15811:   case 139:
15812: #line 207 "third_party/libpg_query/grammar/statements/insert.y"
15813:     { (yyval.list) = NIL; ;}
15814:     break;
15815: 
15816:   case 140:
15817: #line 213 "third_party/libpg_query/grammar/statements/insert.y"
15818:     { (yyval.override) = PG_OVERRIDING_USER_VALUE; ;}
15819:     break;
15820: 
15821:   case 141:
15822: #line 214 "third_party/libpg_query/grammar/statements/insert.y"
15823:     { (yyval.override) = OVERRIDING_SYSTEM_VALUE; ;}
15824:     break;
15825: 
15826:   case 142:
15827: #line 219 "third_party/libpg_query/grammar/statements/insert.y"
15828:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].target)); ;}
15829:     break;
15830: 
15831:   case 143:
15832: #line 220 "third_party/libpg_query/grammar/statements/insert.y"
15833:     { (yyval.list) = lappend((yyvsp[(1) - (3)].list),(yyvsp[(3) - (3)].target)); ;}
15834:     break;
15835: 
15836:   case 144:
15837: #line 226 "third_party/libpg_query/grammar/statements/insert.y"
15838:     { (yyval.list) = (yyvsp[(2) - (2)].list); ;}
15839:     break;
15840: 
15841:   case 145:
15842: #line 227 "third_party/libpg_query/grammar/statements/insert.y"
15843:     { (yyval.list) = NIL; ;}
15844:     break;
15845: 
15846:   case 146:
15847: #line 231 "third_party/libpg_query/grammar/statements/insert.y"
15848:     { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
15849:     break;
15850: 
15851:   case 147:
15852: #line 232 "third_party/libpg_query/grammar/statements/insert.y"
15853:     { (yyval.list) = NIL; ;}
15854:     break;
15855: 
15856:   case 148:
15857: #line 238 "third_party/libpg_query/grammar/statements/insert.y"
15858:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].target)); ;}
15859:     break;
15860: 
15861:   case 149:
15862: #line 240 "third_party/libpg_query/grammar/statements/insert.y"
15863:     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].target)); ;}
15864:     break;
15865: 
15866:   case 150:
15867: #line 245 "third_party/libpg_query/grammar/statements/insert.y"
15868:     { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
15869:     break;
15870: 
15871:   case 151:
15872: #line 246 "third_party/libpg_query/grammar/statements/insert.y"
15873:     { (yyval.list) = list_concat((yyvsp[(1) - (3)].list),(yyvsp[(3) - (3)].list)); ;}
15874:     break;
15875: 
15876:   case 152:
15877: #line 250 "third_party/libpg_query/grammar/statements/insert.y"
15878:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].ielem)); ;}
15879:     break;
15880: 
15881:   case 153:
15882: #line 251 "third_party/libpg_query/grammar/statements/insert.y"
15883:     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].ielem)); ;}
15884:     break;
15885: 
15886:   case 154:
15887: #line 257 "third_party/libpg_query/grammar/statements/insert.y"
15888:     {
15889: 					(yyval.target) = makeNode(PGResTarget);
15890: 					(yyval.target)->name = (yyvsp[(1) - (2)].str);
15891: 					(yyval.target)->indirection = check_indirection((yyvsp[(2) - (2)].list), yyscanner);
15892: 					(yyval.target)->val = NULL;	/* upper production sets this */
15893: 					(yyval.target)->location = (yylsp[(1) - (2)]);
15894: 				;}
15895:     break;
15896: 
15897:   case 155:
15898: #line 8 "third_party/libpg_query/grammar/statements/pragma.y"
15899:     {
15900: 					PGPragmaStmt *n = makeNode(PGPragmaStmt);
15901: 					n->kind = PG_PRAGMA_TYPE_NOTHING;
15902: 					n->name = (yyvsp[(2) - (2)].str);
15903: 					(yyval.node) = (PGNode *)n;
15904: 				;}
15905:     break;
15906: 
15907:   case 156:
15908: #line 15 "third_party/libpg_query/grammar/statements/pragma.y"
15909:     {
15910: 					PGPragmaStmt *n = makeNode(PGPragmaStmt);
15911: 					n->kind = PG_PRAGMA_TYPE_ASSIGNMENT;
15912: 					n->name = (yyvsp[(2) - (4)].str);
15913: 					n->args = (yyvsp[(4) - (4)].list);
15914: 					(yyval.node) = (PGNode *)n;
15915: 				;}
15916:     break;
15917: 
15918:   case 157:
15919: #line 23 "third_party/libpg_query/grammar/statements/pragma.y"
15920:     {
15921: 					PGPragmaStmt *n = makeNode(PGPragmaStmt);
15922: 					n->kind = PG_PRAGMA_TYPE_CALL;
15923: 					n->name = (yyvsp[(2) - (5)].str);
15924: 					n->args = (yyvsp[(4) - (5)].list);
15925: 					(yyval.node) = (PGNode *)n;
15926: 				;}
15927:     break;
15928: 
15929:   case 158:
15930: #line 10 "third_party/libpg_query/grammar/statements/create_sequence.y"
15931:     {
15932: 					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
15933: 					(yyvsp[(4) - (5)].range)->relpersistence = (yyvsp[(2) - (5)].ival);
15934: 					n->sequence = (yyvsp[(4) - (5)].range);
15935: 					n->options = (yyvsp[(5) - (5)].list);
15936: 					n->ownerId = InvalidOid;
15937: 					n->if_not_exists = false;
15938: 					(yyval.node) = (PGNode *)n;
15939: 				;}
15940:     break;
15941: 
15942:   case 159:
15943: #line 20 "third_party/libpg_query/grammar/statements/create_sequence.y"
15944:     {
15945: 					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
15946: 					(yyvsp[(7) - (8)].range)->relpersistence = (yyvsp[(2) - (8)].ival);
15947: 					n->sequence = (yyvsp[(7) - (8)].range);
15948: 					n->options = (yyvsp[(8) - (8)].list);
15949: 					n->ownerId = InvalidOid;
15950: 					n->if_not_exists = true;
15951: 					(yyval.node) = (PGNode *)n;
15952: 				;}
15953:     break;
15954: 
15955:   case 160:
15956: #line 32 "third_party/libpg_query/grammar/statements/create_sequence.y"
15957:     { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
15958:     break;
15959: 
15960:   case 161:
15961: #line 33 "third_party/libpg_query/grammar/statements/create_sequence.y"
15962:     { (yyval.list) = NIL; ;}
15963:     break;
15964: 
15965:   case 162:
15966: #line 8 "third_party/libpg_query/grammar/statements/execute.y"
15967:     {
15968: 					PGExecuteStmt *n = makeNode(PGExecuteStmt);
15969: 					n->name = (yyvsp[(2) - (3)].str);
15970: 					n->params = (yyvsp[(3) - (3)].list);
15971: 					(yyval.node) = (PGNode *) n;
15972: 				;}
15973:     break;
15974: 
15975:   case 163:
15976: #line 16 "third_party/libpg_query/grammar/statements/execute.y"
15977:     {
15978: 					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
15979: 					PGExecuteStmt *n = makeNode(PGExecuteStmt);
15980: 					n->name = (yyvsp[(7) - (9)].str);
15981: 					n->params = (yyvsp[(8) - (9)].list);
15982: 					ctas->query = (PGNode *) n;
15983: 					ctas->into = (yyvsp[(4) - (9)].into);
15984: 					ctas->relkind = PG_OBJECT_TABLE;
15985: 					ctas->is_select_into = false;
15986: 					ctas->if_not_exists = false;
15987: 					/* cram additional flags into the PGIntoClause */
15988: 					(yyvsp[(4) - (9)].into)->rel->relpersistence = (yyvsp[(2) - (9)].ival);
15989: 					(yyvsp[(4) - (9)].into)->skipData = !((yyvsp[(9) - (9)].boolean));
15990: 					(yyval.node) = (PGNode *) ctas;
15991: 				;}
15992:     break;
15993: 
15994:   case 164:
15995: #line 33 "third_party/libpg_query/grammar/statements/execute.y"
15996:     {
15997: 					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
15998: 					PGExecuteStmt *n = makeNode(PGExecuteStmt);
15999: 					n->name = (yyvsp[(10) - (12)].str);
16000: 					n->params = (yyvsp[(11) - (12)].list);
16001: 					ctas->query = (PGNode *) n;
16002: 					ctas->into = (yyvsp[(7) - (12)].into);
16003: 					ctas->relkind = PG_OBJECT_TABLE;
16004: 					ctas->is_select_into = false;
16005: 					ctas->if_not_exists = true;
16006: 					/* cram additional flags into the PGIntoClause */
16007: 					(yyvsp[(7) - (12)].into)->rel->relpersistence = (yyvsp[(2) - (12)].ival);
16008: 					(yyvsp[(7) - (12)].into)->skipData = !((yyvsp[(12) - (12)].boolean));
16009: 					(yyval.node) = (PGNode *) ctas;
16010: 				;}
16011:     break;
16012: 
16013:   case 165:
16014: #line 51 "third_party/libpg_query/grammar/statements/execute.y"
16015:     { (yyval.list) = (yyvsp[(2) - (3)].list); ;}
16016:     break;
16017: 
16018:   case 166:
16019: #line 52 "third_party/libpg_query/grammar/statements/execute.y"
16020:     { (yyval.list) = NIL; ;}
16021:     break;
16022: 
16023:   case 167:
16024: #line 10 "third_party/libpg_query/grammar/statements/alter_sequence.y"
16025:     {
16026: 					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
16027: 					n->sequence = (yyvsp[(3) - (4)].range);
16028: 					n->options = (yyvsp[(4) - (4)].list);
16029: 					n->missing_ok = false;
16030: 					(yyval.node) = (PGNode *)n;
16031: 				;}
16032:     break;
16033: 
16034:   case 168:
16035: #line 18 "third_party/libpg_query/grammar/statements/alter_sequence.y"
16036:     {
16037: 					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
16038: 					n->sequence = (yyvsp[(5) - (6)].range);
16039: 					n->options = (yyvsp[(6) - (6)].list);
16040: 					n->missing_ok = true;
16041: 					(yyval.node) = (PGNode *)n;
16042: 				;}
16043:     break;
16044: 
16045:   case 169:
16046: #line 29 "third_party/libpg_query/grammar/statements/alter_sequence.y"
16047:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].defelt)); ;}
16048:     break;
16049: 
16050:   case 170:
16051: #line 30 "third_party/libpg_query/grammar/statements/alter_sequence.y"
16052:     { (yyval.list) = lappend((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].defelt)); ;}
16053:     break;
16054: 
16055:   case 171:
16056: #line 34 "third_party/libpg_query/grammar/statements/alter_sequence.y"
16057:     {;}
16058:     break;
16059: 
16060:   case 172:
16061: #line 35 "third_party/libpg_query/grammar/statements/alter_sequence.y"
16062:     {;}
16063:     break;
16064: 
16065:   case 173:
16066: #line 36 "third_party/libpg_query/grammar/statements/alter_sequence.y"
16067:     {;}
16068:     break;
16069: 
16070:   case 174:
16071: #line 41 "third_party/libpg_query/grammar/statements/alter_sequence.y"
16072:     { (yyval.value) = makeFloat((yyvsp[(1) - (1)].str)); ;}
16073:     break;
16074: 
16075:   case 175:
16076: #line 42 "third_party/libpg_query/grammar/statements/alter_sequence.y"
16077:     { (yyval.value) = makeFloat((yyvsp[(2) - (2)].str)); ;}
16078:     break;
16079: 
16080:   case 176:
16081: #line 44 "third_party/libpg_query/grammar/statements/alter_sequence.y"
16082:     {
16083: 					(yyval.value) = makeFloat((yyvsp[(2) - (2)].str));
16084: 					doNegateFloat((yyval.value));
16085: 				;}
16086:     break;
16087: 
16088:   case 177:
16089: #line 48 "third_party/libpg_query/grammar/statements/alter_sequence.y"
16090:     { (yyval.value) = makeInteger((yyvsp[(1) - (1)].ival)); ;}
16091:     break;
16092: 
16093:   case 178:
16094: #line 53 "third_party/libpg_query/grammar/statements/alter_sequence.y"
16095:     {
16096: 					(yyval.defelt) = makeDefElem("as", (PGNode *)(yyvsp[(2) - (2)].typnam), (yylsp[(1) - (2)]));
16097: 				;}
16098:     break;
16099: 
16100:   case 179:
16101: #line 57 "third_party/libpg_query/grammar/statements/alter_sequence.y"
16102:     {
16103: 					(yyval.defelt) = makeDefElem("cache", (PGNode *)(yyvsp[(2) - (2)].value), (yylsp[(1) - (2)]));
16104: 				;}
16105:     break;
16106: 
16107:   case 180:
16108: #line 61 "third_party/libpg_query/grammar/statements/alter_sequence.y"
16109:     {
16110: 					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(true), (yylsp[(1) - (1)]));
16111: 				;}
16112:     break;
16113: 
16114:   case 181:
16115: #line 65 "third_party/libpg_query/grammar/statements/alter_sequence.y"
16116:     {
16117: 					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(false), (yylsp[(1) - (2)]));
16118: 				;}
16119:     break;
16120: 
16121:   case 182:
16122: #line 69 "third_party/libpg_query/grammar/statements/alter_sequence.y"
16123:     {
16124: 					(yyval.defelt) = makeDefElem("increment", (PGNode *)(yyvsp[(3) - (3)].value), (yylsp[(1) - (3)]));
16125: 				;}
16126:     break;
16127: 
16128:   case 183:
16129: #line 73 "third_party/libpg_query/grammar/statements/alter_sequence.y"
16130:     {
16131: 					(yyval.defelt) = makeDefElem("maxvalue", (PGNode *)(yyvsp[(2) - (2)].value), (yylsp[(1) - (2)]));
16132: 				;}
16133:     break;
16134: 
16135:   case 184:
16136: #line 77 "third_party/libpg_query/grammar/statements/alter_sequence.y"
16137:     {
16138: 					(yyval.defelt) = makeDefElem("minvalue", (PGNode *)(yyvsp[(2) - (2)].value), (yylsp[(1) - (2)]));
16139: 				;}
16140:     break;
16141: 
16142:   case 185:
16143: #line 81 "third_party/libpg_query/grammar/statements/alter_sequence.y"
16144:     {
16145: 					(yyval.defelt) = makeDefElem("maxvalue", NULL, (yylsp[(1) - (2)]));
16146: 				;}
16147:     break;
16148: 
16149:   case 186:
16150: #line 85 "third_party/libpg_query/grammar/statements/alter_sequence.y"
16151:     {
16152: 					(yyval.defelt) = makeDefElem("minvalue", NULL, (yylsp[(1) - (2)]));
16153: 				;}
16154:     break;
16155: 
16156:   case 187:
16157: #line 89 "third_party/libpg_query/grammar/statements/alter_sequence.y"
16158:     {
16159: 					(yyval.defelt) = makeDefElem("owned_by", (PGNode *)(yyvsp[(3) - (3)].list), (yylsp[(1) - (3)]));
16160: 				;}
16161:     break;
16162: 
16163:   case 188:
16164: #line 93 "third_party/libpg_query/grammar/statements/alter_sequence.y"
16165:     {
16166: 					/* not documented, only used by pg_dump */
16167: 					(yyval.defelt) = makeDefElem("sequence_name", (PGNode *)(yyvsp[(3) - (3)].list), (yylsp[(1) - (3)]));
16168: 				;}
16169:     break;
16170: 
16171:   case 189:
16172: #line 98 "third_party/libpg_query/grammar/statements/alter_sequence.y"
16173:     {
16174: 					(yyval.defelt) = makeDefElem("start", (PGNode *)(yyvsp[(3) - (3)].value), (yylsp[(1) - (3)]));
16175: 				;}
16176:     break;
16177: 
16178:   case 190:
16179: #line 102 "third_party/libpg_query/grammar/statements/alter_sequence.y"
16180:     {
16181: 					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[(1) - (1)]));
16182: 				;}
16183:     break;
16184: 
16185:   case 191:
16186: #line 106 "third_party/libpg_query/grammar/statements/alter_sequence.y"
16187:     {
16188: 					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[(3) - (3)].value), (yylsp[(1) - (3)]));
16189: 				;}
16190:     break;
16191: 
16192:   case 192:
16193: #line 112 "third_party/libpg_query/grammar/statements/alter_sequence.y"
16194:     {;}
16195:     break;
16196: 
16197:   case 193:
16198: #line 113 "third_party/libpg_query/grammar/statements/alter_sequence.y"
16199:     {;}
16200:     break;
16201: 
16202:   case 194:
16203: #line 117 "third_party/libpg_query/grammar/statements/alter_sequence.y"
16204:     { (yyval.ival) = (yyvsp[(1) - (1)].ival); ;}
16205:     break;
16206: 
16207:   case 195:
16208: #line 118 "third_party/libpg_query/grammar/statements/alter_sequence.y"
16209:     { (yyval.ival) = + (yyvsp[(2) - (2)].ival); ;}
16210:     break;
16211: 
16212:   case 196:
16213: #line 119 "third_party/libpg_query/grammar/statements/alter_sequence.y"
16214:     { (yyval.ival) = - (yyvsp[(2) - (2)].ival); ;}
16215:     break;
16216: 
16217:   case 197:
16218: #line 3 "third_party/libpg_query/grammar/statements/transaction.y"
16219:     {
16220: 					PGTransactionStmt *n = makeNode(PGTransactionStmt);
16221: 					n->kind = PG_TRANS_STMT_ROLLBACK;
16222: 					n->options = NIL;
16223: 					(yyval.node) = (PGNode *)n;
16224: 				;}
16225:     break;
16226: 
16227:   case 198:
16228: #line 10 "third_party/libpg_query/grammar/statements/transaction.y"
16229:     {
16230: 					PGTransactionStmt *n = makeNode(PGTransactionStmt);
16231: 					n->kind = PG_TRANS_STMT_BEGIN;
16232: 					(yyval.node) = (PGNode *)n;
16233: 				;}
16234:     break;
16235: 
16236:   case 199:
16237: #line 16 "third_party/libpg_query/grammar/statements/transaction.y"
16238:     {
16239: 					PGTransactionStmt *n = makeNode(PGTransactionStmt);
16240: 					n->kind = PG_TRANS_STMT_START;
16241: 					(yyval.node) = (PGNode *)n;
16242: 				;}
16243:     break;
16244: 
16245:   case 200:
16246: #line 22 "third_party/libpg_query/grammar/statements/transaction.y"
16247:     {
16248: 					PGTransactionStmt *n = makeNode(PGTransactionStmt);
16249: 					n->kind = PG_TRANS_STMT_COMMIT;
16250: 					n->options = NIL;
16251: 					(yyval.node) = (PGNode *)n;
16252: 				;}
16253:     break;
16254: 
16255:   case 201:
16256: #line 29 "third_party/libpg_query/grammar/statements/transaction.y"
16257:     {
16258: 					PGTransactionStmt *n = makeNode(PGTransactionStmt);
16259: 					n->kind = PG_TRANS_STMT_COMMIT;
16260: 					n->options = NIL;
16261: 					(yyval.node) = (PGNode *)n;
16262: 				;}
16263:     break;
16264: 
16265:   case 202:
16266: #line 36 "third_party/libpg_query/grammar/statements/transaction.y"
16267:     {
16268: 					PGTransactionStmt *n = makeNode(PGTransactionStmt);
16269: 					n->kind = PG_TRANS_STMT_ROLLBACK;
16270: 					n->options = NIL;
16271: 					(yyval.node) = (PGNode *)n;
16272: 				;}
16273:     break;
16274: 
16275:   case 203:
16276: #line 45 "third_party/libpg_query/grammar/statements/transaction.y"
16277:     {;}
16278:     break;
16279: 
16280:   case 204:
16281: #line 46 "third_party/libpg_query/grammar/statements/transaction.y"
16282:     {;}
16283:     break;
16284: 
16285:   case 205:
16286: #line 47 "third_party/libpg_query/grammar/statements/transaction.y"
16287:     {;}
16288:     break;
16289: 
16290:   case 206:
16291: #line 9 "third_party/libpg_query/grammar/statements/create.y"
16292:     {
16293: 					PGCreateStmt *n = makeNode(PGCreateStmt);
16294: 					(yyvsp[(4) - (9)].range)->relpersistence = (yyvsp[(2) - (9)].ival);
16295: 					n->relation = (yyvsp[(4) - (9)].range);
16296: 					n->tableElts = (yyvsp[(6) - (9)].list);
16297: 					n->ofTypename = NULL;
16298: 					n->constraints = NIL;
16299: 					n->options = (yyvsp[(8) - (9)].list);
16300: 					n->oncommit = (yyvsp[(9) - (9)].oncommit);
16301: 					n->if_not_exists = false;
16302: 					(yyval.node) = (PGNode *)n;
16303: 				;}
16304:     break;
16305: 
16306:   case 207:
16307: #line 24 "third_party/libpg_query/grammar/statements/create.y"
16308:     {
16309: 					PGCreateStmt *n = makeNode(PGCreateStmt);
16310: 					(yyvsp[(7) - (12)].range)->relpersistence = (yyvsp[(2) - (12)].ival);
16311: 					n->relation = (yyvsp[(7) - (12)].range);
16312: 					n->tableElts = (yyvsp[(9) - (12)].list);
16313: 					n->ofTypename = NULL;
16314: 					n->constraints = NIL;
16315: 					n->options = (yyvsp[(11) - (12)].list);
16316: 					n->oncommit = (yyvsp[(12) - (12)].oncommit);
16317: 					n->if_not_exists = true;
16318: 					(yyval.node) = (PGNode *)n;
16319: 				;}
16320:     break;
16321: 
16322:   case 208:
16323: #line 41 "third_party/libpg_query/grammar/statements/create.y"
16324:     { (yyval.ival) = 0; ;}
16325:     break;
16326: 
16327:   case 209:
16328: #line 43 "third_party/libpg_query/grammar/statements/create.y"
16329:     {
16330: 					/*
16331: 					 * We must complain about conflicting options.
16332: 					 * We could, but choose not to, complain about redundant
16333: 					 * options (ie, where $2's bit is already set in $1).
16334: 					 */
16335: 					int		newspec = (yyvsp[(1) - (2)].ival) | (yyvsp[(2) - (2)].ival);
16336: 
16337: 					/* special message for this case */
16338: 					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED)) == (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED))
16339: 						ereport(ERROR,
16340: 								(errcode(PG_ERRCODE_SYNTAX_ERROR),
16341: 								 errmsg("constraint declared INITIALLY DEFERRED must be DEFERRABLE"),
16342: 								 parser_errposition((yylsp[(2) - (2)]))));
16343: 					/* generic message for other conflicts */
16344: 					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE)) == (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE) ||
16345: 						(newspec & (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED)) == (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED))
16346: 						ereport(ERROR,
16347: 								(errcode(PG_ERRCODE_SYNTAX_ERROR),
16348: 								 errmsg("conflicting constraint properties"),
16349: 								 parser_errposition((yylsp[(2) - (2)]))));
16350: 					(yyval.ival) = newspec;
16351: 				;}
16352:     break;
16353: 
16354:   case 210:
16355: #line 69 "third_party/libpg_query/grammar/statements/create.y"
16356:     { (yyval.node) = (PGNode *)(yyvsp[(1) - (1)].typnam); ;}
16357:     break;
16358: 
16359:   case 211:
16360: #line 70 "third_party/libpg_query/grammar/statements/create.y"
16361:     { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[(1) - (1)].keyword))); ;}
16362:     break;
16363: 
16364:   case 212:
16365: #line 71 "third_party/libpg_query/grammar/statements/create.y"
16366:     { (yyval.node) = (PGNode *)(yyvsp[(1) - (1)].list); ;}
16367:     break;
16368: 
16369:   case 213:
16370: #line 72 "third_party/libpg_query/grammar/statements/create.y"
16371:     { (yyval.node) = (PGNode *)(yyvsp[(1) - (1)].value); ;}
16372:     break;
16373: 
16374:   case 214:
16375: #line 73 "third_party/libpg_query/grammar/statements/create.y"
16376:     { (yyval.node) = (PGNode *)makeString((yyvsp[(1) - (1)].str)); ;}
16377:     break;
16378: 
16379:   case 215:
16380: #line 74 "third_party/libpg_query/grammar/statements/create.y"
16381:     { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[(1) - (1)].keyword))); ;}
16382:     break;
16383: 
16384:   case 216:
16385: #line 78 "third_party/libpg_query/grammar/statements/create.y"
16386:     { (yyval.list) = (yyvsp[(2) - (3)].list); ;}
16387:     break;
16388: 
16389:   case 217:
16390: #line 79 "third_party/libpg_query/grammar/statements/create.y"
16391:     { (yyval.list) = NIL; ;}
16392:     break;
16393: 
16394:   case 218:
16395: #line 84 "third_party/libpg_query/grammar/statements/create.y"
16396:     { (yyval.node) = (PGNode *) makeString((yyvsp[(1) - (1)].str)); ;}
16397:     break;
16398: 
16399:   case 219:
16400: #line 89 "third_party/libpg_query/grammar/statements/create.y"
16401:     { (yyval.ival) = PG_FKCONSTR_ACTION_NOACTION; ;}
16402:     break;
16403: 
16404:   case 220:
16405: #line 90 "third_party/libpg_query/grammar/statements/create.y"
16406:     { (yyval.ival) = PG_FKCONSTR_ACTION_RESTRICT; ;}
16407:     break;
16408: 
16409:   case 221:
16410: #line 91 "third_party/libpg_query/grammar/statements/create.y"
16411:     { (yyval.ival) = PG_FKCONSTR_ACTION_CASCADE; ;}
16412:     break;
16413: 
16414:   case 222:
16415: #line 92 "third_party/libpg_query/grammar/statements/create.y"
16416:     { (yyval.ival) = PG_FKCONSTR_ACTION_SETNULL; ;}
16417:     break;
16418: 
16419:   case 223:
16420: #line 93 "third_party/libpg_query/grammar/statements/create.y"
16421:     { (yyval.ival) = PG_FKCONSTR_ACTION_SETDEFAULT; ;}
16422:     break;
16423: 
16424:   case 224:
16425: #line 99 "third_party/libpg_query/grammar/statements/create.y"
16426:     {
16427: 					PGConstraint *n = castNode(PGConstraint, (yyvsp[(3) - (3)].node));
16428: 					n->conname = (yyvsp[(2) - (3)].str);
16429: 					n->location = (yylsp[(1) - (3)]);
16430: 					(yyval.node) = (PGNode *) n;
16431: 				;}
16432:     break;
16433: 
16434:   case 225:
16435: #line 105 "third_party/libpg_query/grammar/statements/create.y"
16436:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
16437:     break;
16438: 
16439:   case 226:
16440: #line 106 "third_party/libpg_query/grammar/statements/create.y"
16441:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
16442:     break;
16443: 
16444:   case 227:
16445: #line 108 "third_party/libpg_query/grammar/statements/create.y"
16446:     {
16447: 					/*
16448: 					 * Note: the PGCollateClause is momentarily included in
16449: 					 * the list built by ColQualList, but we split it out
16450: 					 * again in SplitColQualList.
16451: 					 */
16452: 					PGCollateClause *n = makeNode(PGCollateClause);
16453: 					n->arg = NULL;
16454: 					n->collname = (yyvsp[(2) - (2)].list);
16455: 					n->location = (yylsp[(1) - (2)]);
16456: 					(yyval.node) = (PGNode *) n;
16457: 				;}
16458:     break;
16459: 
16460:   case 228:
16461: #line 125 "third_party/libpg_query/grammar/statements/create.y"
16462:     {
16463: 					PGConstraint *n = makeNode(PGConstraint);
16464: 					n->contype = PG_CONSTR_NOTNULL;
16465: 					n->location = (yylsp[(1) - (2)]);
16466: 					(yyval.node) = (PGNode *)n;
16467: 				;}
16468:     break;
16469: 
16470:   case 229:
16471: #line 132 "third_party/libpg_query/grammar/statements/create.y"
16472:     {
16473: 					PGConstraint *n = makeNode(PGConstraint);
16474: 					n->contype = PG_CONSTR_NULL;
16475: 					n->location = (yylsp[(1) - (1)]);
16476: 					(yyval.node) = (PGNode *)n;
16477: 				;}
16478:     break;
16479: 
16480:   case 230:
16481: #line 139 "third_party/libpg_query/grammar/statements/create.y"
16482:     {
16483: 					PGConstraint *n = makeNode(PGConstraint);
16484: 					n->contype = PG_CONSTR_UNIQUE;
16485: 					n->location = (yylsp[(1) - (2)]);
16486: 					n->keys = NULL;
16487: 					n->options = (yyvsp[(2) - (2)].list);
16488: 					n->indexname = NULL;
16489: 					(yyval.node) = (PGNode *)n;
16490: 				;}
16491:     break;
16492: 
16493:   case 231:
16494: #line 149 "third_party/libpg_query/grammar/statements/create.y"
16495:     {
16496: 					PGConstraint *n = makeNode(PGConstraint);
16497: 					n->contype = PG_CONSTR_PRIMARY;
16498: 					n->location = (yylsp[(1) - (3)]);
16499: 					n->keys = NULL;
16500: 					n->options = (yyvsp[(3) - (3)].list);
16501: 					n->indexname = NULL;
16502: 					(yyval.node) = (PGNode *)n;
16503: 				;}
16504:     break;
16505: 
16506:   case 232:
16507: #line 159 "third_party/libpg_query/grammar/statements/create.y"
16508:     {
16509: 					PGConstraint *n = makeNode(PGConstraint);
16510: 					n->contype = PG_CONSTR_CHECK;
16511: 					n->location = (yylsp[(1) - (5)]);
16512: 					n->is_no_inherit = (yyvsp[(5) - (5)].boolean);
16513: 					n->raw_expr = (yyvsp[(3) - (5)].node);
16514: 					n->cooked_expr = NULL;
16515: 					n->skip_validation = false;
16516: 					n->initially_valid = true;
16517: 					(yyval.node) = (PGNode *)n;
16518: 				;}
16519:     break;
16520: 
16521:   case 233:
16522: #line 171 "third_party/libpg_query/grammar/statements/create.y"
16523:     {
16524: 					PGConstraint *n = makeNode(PGConstraint);
16525: 					n->contype = PG_CONSTR_DEFAULT;
16526: 					n->location = (yylsp[(1) - (2)]);
16527: 					n->raw_expr = (yyvsp[(2) - (2)].node);
16528: 					n->cooked_expr = NULL;
16529: 					(yyval.node) = (PGNode *)n;
16530: 				;}
16531:     break;
16532: 
16533:   case 234:
16534: #line 180 "third_party/libpg_query/grammar/statements/create.y"
16535:     {
16536: 					PGConstraint *n = makeNode(PGConstraint);
16537: 					n->contype = PG_CONSTR_IDENTITY;
16538: 					n->generated_when = (yyvsp[(2) - (5)].ival);
16539: 					n->options = (yyvsp[(5) - (5)].list);
16540: 					n->location = (yylsp[(1) - (5)]);
16541: 					(yyval.node) = (PGNode *)n;
16542: 				;}
16543:     break;
16544: 
16545:   case 235:
16546: #line 189 "third_party/libpg_query/grammar/statements/create.y"
16547:     {
16548: 					PGConstraint *n = makeNode(PGConstraint);
16549: 					n->contype = PG_CONSTR_FOREIGN;
16550: 					n->location = (yylsp[(1) - (5)]);
16551: 					n->pktable			= (yyvsp[(2) - (5)].range);
16552: 					n->fk_attrs			= NIL;
16553: 					n->pk_attrs			= (yyvsp[(3) - (5)].list);
16554: 					n->fk_matchtype		= (yyvsp[(4) - (5)].ival);
16555: 					n->fk_upd_action	= (char) ((yyvsp[(5) - (5)].ival) >> 8);
16556: 					n->fk_del_action	= (char) ((yyvsp[(5) - (5)].ival) & 0xFF);
16557: 					n->skip_validation  = false;
16558: 					n->initially_valid  = true;
16559: 					(yyval.node) = (PGNode *)n;
16560: 				;}
16561:     break;
16562: 
16563:   case 236:
16564: #line 208 "third_party/libpg_query/grammar/statements/create.y"
16565:     {
16566: 					(yyval.defelt) = makeDefElem((yyvsp[(1) - (2)].str), (yyvsp[(2) - (2)].node), (yylsp[(1) - (2)]));
16567: 				;}
16568:     break;
16569: 
16570:   case 237:
16571: #line 214 "third_party/libpg_query/grammar/statements/create.y"
16572:     { (yyval.ival) = (yyvsp[(3) - (3)].ival); ;}
16573:     break;
16574: 
16575:   case 238:
16576: #line 220 "third_party/libpg_query/grammar/statements/create.y"
16577:     { (yyval.ival) = ((yyvsp[(1) - (1)].ival) << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); ;}
16578:     break;
16579: 
16580:   case 239:
16581: #line 222 "third_party/libpg_query/grammar/statements/create.y"
16582:     { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | ((yyvsp[(1) - (1)].ival) & 0xFF); ;}
16583:     break;
16584: 
16585:   case 240:
16586: #line 224 "third_party/libpg_query/grammar/statements/create.y"
16587:     { (yyval.ival) = ((yyvsp[(1) - (2)].ival) << 8) | ((yyvsp[(2) - (2)].ival) & 0xFF); ;}
16588:     break;
16589: 
16590:   case 241:
16591: #line 226 "third_party/libpg_query/grammar/statements/create.y"
16592:     { (yyval.ival) = ((yyvsp[(2) - (2)].ival) << 8) | ((yyvsp[(1) - (2)].ival) & 0xFF); ;}
16593:     break;
16594: 
16595:   case 242:
16596: #line 228 "third_party/libpg_query/grammar/statements/create.y"
16597:     { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); ;}
16598:     break;
16599: 
16600:   case 243:
16601: #line 233 "third_party/libpg_query/grammar/statements/create.y"
16602:     { (yyval.list) = (yyvsp[(3) - (4)].list); ;}
16603:     break;
16604: 
16605:   case 244:
16606: #line 234 "third_party/libpg_query/grammar/statements/create.y"
16607:     { (yyval.list) = NIL; ;}
16608:     break;
16609: 
16610:   case 245:
16611: #line 238 "third_party/libpg_query/grammar/statements/create.y"
16612:     { (yyval.oncommit) = ONCOMMIT_DROP; ;}
16613:     break;
16614: 
16615:   case 246:
16616: #line 239 "third_party/libpg_query/grammar/statements/create.y"
16617:     { (yyval.oncommit) = PG_ONCOMMIT_DELETE_ROWS; ;}
16618:     break;
16619: 
16620:   case 247:
16621: #line 240 "third_party/libpg_query/grammar/statements/create.y"
16622:     { (yyval.oncommit) = PG_ONCOMMIT_PRESERVE_ROWS; ;}
16623:     break;
16624: 
16625:   case 248:
16626: #line 241 "third_party/libpg_query/grammar/statements/create.y"
16627:     { (yyval.oncommit) = PG_ONCOMMIT_NOOP; ;}
16628:     break;
16629: 
16630:   case 249:
16631: #line 246 "third_party/libpg_query/grammar/statements/create.y"
16632:     { (yyval.list) = (yyvsp[(2) - (3)].list); ;}
16633:     break;
16634: 
16635:   case 250:
16636: #line 250 "third_party/libpg_query/grammar/statements/create.y"
16637:     {  (yyval.boolean) = true; ;}
16638:     break;
16639: 
16640:   case 251:
16641: #line 251 "third_party/libpg_query/grammar/statements/create.y"
16642:     {  (yyval.boolean) = false; ;}
16643:     break;
16644: 
16645:   case 252:
16646: #line 257 "third_party/libpg_query/grammar/statements/create.y"
16647:     {
16648: 					PGConstraint *n = castNode(PGConstraint, (yyvsp[(3) - (3)].node));
16649: 					n->conname = (yyvsp[(2) - (3)].str);
16650: 					n->location = (yylsp[(1) - (3)]);
16651: 					(yyval.node) = (PGNode *) n;
16652: 				;}
16653:     break;
16654: 
16655:   case 253:
16656: #line 263 "third_party/libpg_query/grammar/statements/create.y"
16657:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
16658:     break;
16659: 
16660:   case 254:
16661: #line 268 "third_party/libpg_query/grammar/statements/create.y"
16662:     { (yyval.ival) = PG_CREATE_TABLE_LIKE_COMMENTS; ;}
16663:     break;
16664: 
16665:   case 255:
16666: #line 269 "third_party/libpg_query/grammar/statements/create.y"
16667:     { (yyval.ival) = PG_CREATE_TABLE_LIKE_CONSTRAINTS; ;}
16668:     break;
16669: 
16670:   case 256:
16671: #line 270 "third_party/libpg_query/grammar/statements/create.y"
16672:     { (yyval.ival) = PG_CREATE_TABLE_LIKE_DEFAULTS; ;}
16673:     break;
16674: 
16675:   case 257:
16676: #line 271 "third_party/libpg_query/grammar/statements/create.y"
16677:     { (yyval.ival) = PG_CREATE_TABLE_LIKE_IDENTITY; ;}
16678:     break;
16679: 
16680:   case 258:
16681: #line 272 "third_party/libpg_query/grammar/statements/create.y"
16682:     { (yyval.ival) = PG_CREATE_TABLE_LIKE_INDEXES; ;}
16683:     break;
16684: 
16685:   case 259:
16686: #line 273 "third_party/libpg_query/grammar/statements/create.y"
16687:     { (yyval.ival) = PG_CREATE_TABLE_LIKE_STATISTICS; ;}
16688:     break;
16689: 
16690:   case 260:
16691: #line 274 "third_party/libpg_query/grammar/statements/create.y"
16692:     { (yyval.ival) = PG_CREATE_TABLE_LIKE_STORAGE; ;}
16693:     break;
16694: 
16695:   case 261:
16696: #line 275 "third_party/libpg_query/grammar/statements/create.y"
16697:     { (yyval.ival) = PG_CREATE_TABLE_LIKE_ALL; ;}
16698:     break;
16699: 
16700:   case 262:
16701: #line 281 "third_party/libpg_query/grammar/statements/create.y"
16702:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].defelt)); ;}
16703:     break;
16704: 
16705:   case 263:
16706: #line 282 "third_party/libpg_query/grammar/statements/create.y"
16707:     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].defelt)); ;}
16708:     break;
16709: 
16710:   case 264:
16711: #line 286 "third_party/libpg_query/grammar/statements/create.y"
16712:     { (yyval.str) = (yyvsp[(3) - (3)].str); ;}
16713:     break;
16714: 
16715:   case 265:
16716: #line 292 "third_party/libpg_query/grammar/statements/create.y"
16717:     {
16718: 					PGConstraint *n = makeNode(PGConstraint);
16719: 					n->contype = PG_CONSTR_ATTR_DEFERRABLE;
16720: 					n->location = (yylsp[(1) - (1)]);
16721: 					(yyval.node) = (PGNode *)n;
16722: 				;}
16723:     break;
16724: 
16725:   case 266:
16726: #line 299 "third_party/libpg_query/grammar/statements/create.y"
16727:     {
16728: 					PGConstraint *n = makeNode(PGConstraint);
16729: 					n->contype = PG_CONSTR_ATTR_NOT_DEFERRABLE;
16730: 					n->location = (yylsp[(1) - (2)]);
16731: 					(yyval.node) = (PGNode *)n;
16732: 				;}
16733:     break;
16734: 
16735:   case 267:
16736: #line 306 "third_party/libpg_query/grammar/statements/create.y"
16737:     {
16738: 					PGConstraint *n = makeNode(PGConstraint);
16739: 					n->contype = PG_CONSTR_ATTR_DEFERRED;
16740: 					n->location = (yylsp[(1) - (2)]);
16741: 					(yyval.node) = (PGNode *)n;
16742: 				;}
16743:     break;
16744: 
16745:   case 268:
16746: #line 313 "third_party/libpg_query/grammar/statements/create.y"
16747:     {
16748: 					PGConstraint *n = makeNode(PGConstraint);
16749: 					n->contype = PG_CONSTR_ATTR_IMMEDIATE;
16750: 					n->location = (yylsp[(1) - (2)]);
16751: 					(yyval.node) = (PGNode *)n;
16752: 				;}
16753:     break;
16754: 
16755:   case 269:
16756: #line 324 "third_party/libpg_query/grammar/statements/create.y"
16757:     { (yyval.list) = (yyvsp[(2) - (2)].list); ;}
16758:     break;
16759: 
16760:   case 270:
16761: #line 325 "third_party/libpg_query/grammar/statements/create.y"
16762:     { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(true), (yylsp[(1) - (2)]))); ;}
16763:     break;
16764: 
16765:   case 271:
16766: #line 326 "third_party/libpg_query/grammar/statements/create.y"
16767:     { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(false), (yylsp[(1) - (2)]))); ;}
16768:     break;
16769: 
16770:   case 272:
16771: #line 327 "third_party/libpg_query/grammar/statements/create.y"
16772:     { (yyval.list) = NIL; ;}
16773:     break;
16774: 
16775:   case 273:
16776: #line 331 "third_party/libpg_query/grammar/statements/create.y"
16777:     { (yyval.list) = (yyvsp[(2) - (3)].list); ;}
16778:     break;
16779: 
16780:   case 274:
16781: #line 336 "third_party/libpg_query/grammar/statements/create.y"
16782:     { (yyval.ival) = (yyvsp[(1) - (3)].ival) | (yyvsp[(3) - (3)].ival); ;}
16783:     break;
16784: 
16785:   case 275:
16786: #line 337 "third_party/libpg_query/grammar/statements/create.y"
16787:     { (yyval.ival) = (yyvsp[(1) - (3)].ival) & ~(yyvsp[(3) - (3)].ival); ;}
16788:     break;
16789: 
16790:   case 276:
16791: #line 338 "third_party/libpg_query/grammar/statements/create.y"
16792:     { (yyval.ival) = 0; ;}
16793:     break;
16794: 
16795:   case 277:
16796: #line 343 "third_party/libpg_query/grammar/statements/create.y"
16797:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
16798:     break;
16799: 
16800:   case 278:
16801: #line 348 "third_party/libpg_query/grammar/statements/create.y"
16802:     { (yyval.ival) = CAS_NOT_DEFERRABLE; ;}
16803:     break;
16804: 
16805:   case 279:
16806: #line 349 "third_party/libpg_query/grammar/statements/create.y"
16807:     { (yyval.ival) = CAS_DEFERRABLE; ;}
16808:     break;
16809: 
16810:   case 280:
16811: #line 350 "third_party/libpg_query/grammar/statements/create.y"
16812:     { (yyval.ival) = CAS_INITIALLY_IMMEDIATE; ;}
16813:     break;
16814: 
16815:   case 281:
16816: #line 351 "third_party/libpg_query/grammar/statements/create.y"
16817:     { (yyval.ival) = CAS_INITIALLY_DEFERRED; ;}
16818:     break;
16819: 
16820:   case 282:
16821: #line 352 "third_party/libpg_query/grammar/statements/create.y"
16822:     { (yyval.ival) = CAS_NOT_VALID; ;}
16823:     break;
16824: 
16825:   case 283:
16826: #line 353 "third_party/libpg_query/grammar/statements/create.y"
16827:     { (yyval.ival) = CAS_NO_INHERIT; ;}
16828:     break;
16829: 
16830:   case 284:
16831: #line 359 "third_party/libpg_query/grammar/statements/create.y"
16832:     {
16833: 					PGColumnDef *n = makeNode(PGColumnDef);
16834: 					n->colname = (yyvsp[(1) - (4)].str);
16835: 					n->typeName = (yyvsp[(2) - (4)].typnam);
16836: 					n->inhcount = 0;
16837: 					n->is_local = true;
16838: 					n->is_not_null = false;
16839: 					n->is_from_type = false;
16840: 					n->storage = 0;
16841: 					n->raw_default = NULL;
16842: 					n->cooked_default = NULL;
16843: 					n->collOid = InvalidOid;
16844: 					n->fdwoptions = (yyvsp[(3) - (4)].list);
16845: 					SplitColQualList((yyvsp[(4) - (4)].list), &n->constraints, &n->collClause,
16846: 									 yyscanner);
16847: 					n->location = (yylsp[(1) - (4)]);
16848: 					(yyval.node) = (PGNode *)n;
16849: 				;}
16850:     break;
16851: 
16852:   case 285:
16853: #line 382 "third_party/libpg_query/grammar/statements/create.y"
16854:     {
16855: 					(yyval.list) = list_make1((yyvsp[(1) - (1)].defelt));
16856: 				;}
16857:     break;
16858: 
16859:   case 286:
16860: #line 386 "third_party/libpg_query/grammar/statements/create.y"
16861:     {
16862: 					(yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].defelt));
16863: 				;}
16864:     break;
16865: 
16866:   case 287:
16867: #line 392 "third_party/libpg_query/grammar/statements/create.y"
16868:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].defelt)); ;}
16869:     break;
16870: 
16871:   case 288:
16872: #line 393 "third_party/libpg_query/grammar/statements/create.y"
16873:     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].defelt)); ;}
16874:     break;
16875: 
16876:   case 289:
16877: #line 397 "third_party/libpg_query/grammar/statements/create.y"
16878:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
16879:     break;
16880: 
16881:   case 290:
16882: #line 401 "third_party/libpg_query/grammar/statements/create.y"
16883:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
16884:     break;
16885: 
16886:   case 291:
16887: #line 402 "third_party/libpg_query/grammar/statements/create.y"
16888:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
16889:     break;
16890: 
16891:   case 292:
16892: #line 403 "third_party/libpg_query/grammar/statements/create.y"
16893:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
16894:     break;
16895: 
16896:   case 293:
16897: #line 408 "third_party/libpg_query/grammar/statements/create.y"
16898:     {
16899: 					(yyval.defelt) = makeDefElem((yyvsp[(1) - (3)].str), (PGNode *) (yyvsp[(3) - (3)].node), (yylsp[(1) - (3)]));
16900: 				;}
16901:     break;
16902: 
16903:   case 294:
16904: #line 412 "third_party/libpg_query/grammar/statements/create.y"
16905:     {
16906: 					(yyval.defelt) = makeDefElem((yyvsp[(1) - (1)].str), NULL, (yylsp[(1) - (1)]));
16907: 				;}
16908:     break;
16909: 
16910:   case 295:
16911: #line 419 "third_party/libpg_query/grammar/statements/create.y"
16912:     { (yyval.list) = (yyvsp[(2) - (2)].list); ;}
16913:     break;
16914: 
16915:   case 296:
16916: #line 420 "third_party/libpg_query/grammar/statements/create.y"
16917:     { (yyval.list) = NIL; ;}
16918:     break;
16919: 
16920:   case 297:
16921: #line 425 "third_party/libpg_query/grammar/statements/create.y"
16922:     { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
16923:     break;
16924: 
16925:   case 298:
16926: #line 426 "third_party/libpg_query/grammar/statements/create.y"
16927:     { (yyval.list) = NIL; ;}
16928:     break;
16929: 
16930:   case 299:
16931: #line 431 "third_party/libpg_query/grammar/statements/create.y"
16932:     {
16933: 					(yyval.node) = (PGNode *) makeString((yyvsp[(1) - (1)].str));
16934: 				;}
16935:     break;
16936: 
16937:   case 300:
16938: #line 438 "third_party/libpg_query/grammar/statements/create.y"
16939:     { (yyval.list) = (yyvsp[(2) - (3)].list); ;}
16940:     break;
16941: 
16942:   case 301:
16943: #line 439 "third_party/libpg_query/grammar/statements/create.y"
16944:     { (yyval.list) = NIL; ;}
16945:     break;
16946: 
16947:   case 302:
16948: #line 444 "third_party/libpg_query/grammar/statements/create.y"
16949:     { (yyval.list) = lappend((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].node)); ;}
16950:     break;
16951: 
16952:   case 303:
16953: #line 445 "third_party/libpg_query/grammar/statements/create.y"
16954:     { (yyval.list) = NIL; ;}
16955:     break;
16956: 
16957:   case 304:
16958: #line 449 "third_party/libpg_query/grammar/statements/create.y"
16959:     { (yyval.ival) = (yyvsp[(3) - (3)].ival); ;}
16960:     break;
16961: 
16962:   case 305:
16963: #line 455 "third_party/libpg_query/grammar/statements/create.y"
16964:     {
16965: 					(yyval.defelt) = makeDefElem((yyvsp[(1) - (3)].str), (PGNode *) (yyvsp[(3) - (3)].node), (yylsp[(1) - (3)]));
16966: 				;}
16967:     break;
16968: 
16969:   case 306:
16970: #line 459 "third_party/libpg_query/grammar/statements/create.y"
16971:     {
16972: 					(yyval.defelt) = makeDefElem((yyvsp[(1) - (1)].str), NULL, (yylsp[(1) - (1)]));
16973: 				;}
16974:     break;
16975: 
16976:   case 307:
16977: #line 463 "third_party/libpg_query/grammar/statements/create.y"
16978:     {
16979: 					(yyval.defelt) = makeDefElemExtended((yyvsp[(1) - (5)].str), (yyvsp[(3) - (5)].str), (PGNode *) (yyvsp[(5) - (5)].node),
16980: 											 PG_DEFELEM_UNSPEC, (yylsp[(1) - (5)]));
16981: 				;}
16982:     break;
16983: 
16984:   case 308:
16985: #line 468 "third_party/libpg_query/grammar/statements/create.y"
16986:     {
16987: 					(yyval.defelt) = makeDefElemExtended((yyvsp[(1) - (3)].str), (yyvsp[(3) - (3)].str), NULL, PG_DEFELEM_UNSPEC, (yylsp[(1) - (3)]));
16988: 				;}
16989:     break;
16990: 
16991:   case 309:
16992: #line 475 "third_party/libpg_query/grammar/statements/create.y"
16993:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].node)); ;}
16994:     break;
16995: 
16996:   case 310:
16997: #line 476 "third_party/libpg_query/grammar/statements/create.y"
16998:     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node)); ;}
16999:     break;
17000: 
17001:   case 311:
17002: #line 480 "third_party/libpg_query/grammar/statements/create.y"
17003:     { (yyval.typnam) = (yyvsp[(1) - (1)].typnam); ;}
17004:     break;
17005: 
17006:   case 312:
17007: #line 482 "third_party/libpg_query/grammar/statements/create.y"
17008:     {
17009: 					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[(1) - (4)].str)), (yyvsp[(2) - (4)].list)));
17010: 					(yyval.typnam)->pct_type = true;
17011: 					(yyval.typnam)->location = (yylsp[(1) - (4)]);
17012: 				;}
17013:     break;
17014: 
17015:   case 313:
17016: #line 488 "third_party/libpg_query/grammar/statements/create.y"
17017:     {
17018: 					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[(2) - (5)].str)), (yyvsp[(3) - (5)].list)));
17019: 					(yyval.typnam)->pct_type = true;
17020: 					(yyval.typnam)->setof = true;
17021: 					(yyval.typnam)->location = (yylsp[(2) - (5)]);
17022: 				;}
17023:     break;
17024: 
17025:   case 314:
17026: #line 499 "third_party/libpg_query/grammar/statements/create.y"
17027:     {
17028: 					PGConstraint *n = makeNode(PGConstraint);
17029: 					n->contype = PG_CONSTR_CHECK;
17030: 					n->location = (yylsp[(1) - (5)]);
17031: 					n->raw_expr = (yyvsp[(3) - (5)].node);
17032: 					n->cooked_expr = NULL;
17033: 					processCASbits((yyvsp[(5) - (5)].ival), (yylsp[(5) - (5)]), "CHECK",
17034: 								   NULL, NULL, &n->skip_validation,
17035: 								   &n->is_no_inherit, yyscanner);
17036: 					n->initially_valid = !n->skip_validation;
17037: 					(yyval.node) = (PGNode *)n;
17038: 				;}
17039:     break;
17040: 
17041:   case 315:
17042: #line 513 "third_party/libpg_query/grammar/statements/create.y"
17043:     {
17044: 					PGConstraint *n = makeNode(PGConstraint);
17045: 					n->contype = PG_CONSTR_UNIQUE;
17046: 					n->location = (yylsp[(1) - (6)]);
17047: 					n->keys = (yyvsp[(3) - (6)].list);
17048: 					n->options = (yyvsp[(5) - (6)].list);
17049: 					n->indexname = NULL;
17050: 					processCASbits((yyvsp[(6) - (6)].ival), (yylsp[(6) - (6)]), "UNIQUE",
17051: 								   &n->deferrable, &n->initdeferred, NULL,
17052: 								   NULL, yyscanner);
17053: 					(yyval.node) = (PGNode *)n;
17054: 				;}
17055:     break;
17056: 
17057:   case 316:
17058: #line 526 "third_party/libpg_query/grammar/statements/create.y"
17059:     {
17060: 					PGConstraint *n = makeNode(PGConstraint);
17061: 					n->contype = PG_CONSTR_UNIQUE;
17062: 					n->location = (yylsp[(1) - (3)]);
17063: 					n->keys = NIL;
17064: 					n->options = NIL;
17065: 					n->indexname = (yyvsp[(2) - (3)].str);
17066: 					n->indexspace = NULL;
17067: 					processCASbits((yyvsp[(3) - (3)].ival), (yylsp[(3) - (3)]), "UNIQUE",
17068: 								   &n->deferrable, &n->initdeferred, NULL,
17069: 								   NULL, yyscanner);
17070: 					(yyval.node) = (PGNode *)n;
17071: 				;}
17072:     break;
17073: 
17074:   case 317:
17075: #line 541 "third_party/libpg_query/grammar/statements/create.y"
17076:     {
17077: 					PGConstraint *n = makeNode(PGConstraint);
17078: 					n->contype = PG_CONSTR_PRIMARY;
17079: 					n->location = (yylsp[(1) - (7)]);
17080: 					n->keys = (yyvsp[(4) - (7)].list);
17081: 					n->options = (yyvsp[(6) - (7)].list);
17082: 					n->indexname = NULL;
17083: 					processCASbits((yyvsp[(7) - (7)].ival), (yylsp[(7) - (7)]), "PRIMARY KEY",
17084: 								   &n->deferrable, &n->initdeferred, NULL,
17085: 								   NULL, yyscanner);
17086: 					(yyval.node) = (PGNode *)n;
17087: 				;}
17088:     break;
17089: 
17090:   case 318:
17091: #line 554 "third_party/libpg_query/grammar/statements/create.y"
17092:     {
17093: 					PGConstraint *n = makeNode(PGConstraint);
17094: 					n->contype = PG_CONSTR_PRIMARY;
17095: 					n->location = (yylsp[(1) - (4)]);
17096: 					n->keys = NIL;
17097: 					n->options = NIL;
17098: 					n->indexname = (yyvsp[(3) - (4)].str);
17099: 					n->indexspace = NULL;
17100: 					processCASbits((yyvsp[(4) - (4)].ival), (yylsp[(4) - (4)]), "PRIMARY KEY",
17101: 								   &n->deferrable, &n->initdeferred, NULL,
17102: 								   NULL, yyscanner);
17103: 					(yyval.node) = (PGNode *)n;
17104: 				;}
17105:     break;
17106: 
17107:   case 319:
17108: #line 569 "third_party/libpg_query/grammar/statements/create.y"
17109:     {
17110: 					PGConstraint *n = makeNode(PGConstraint);
17111: 					n->contype = PG_CONSTR_FOREIGN;
17112: 					n->location = (yylsp[(1) - (11)]);
17113: 					n->pktable			= (yyvsp[(7) - (11)].range);
17114: 					n->fk_attrs			= (yyvsp[(4) - (11)].list);
17115: 					n->pk_attrs			= (yyvsp[(8) - (11)].list);
17116: 					n->fk_matchtype		= (yyvsp[(9) - (11)].ival);
17117: 					n->fk_upd_action	= (char) ((yyvsp[(10) - (11)].ival) >> 8);
17118: 					n->fk_del_action	= (char) ((yyvsp[(10) - (11)].ival) & 0xFF);
17119: 					processCASbits((yyvsp[(11) - (11)].ival), (yylsp[(11) - (11)]), "FOREIGN KEY",
17120: 								   &n->deferrable, &n->initdeferred,
17121: 								   &n->skip_validation, NULL,
17122: 								   yyscanner);
17123: 					n->initially_valid = !n->skip_validation;
17124: 					(yyval.node) = (PGNode *)n;
17125: 				;}
17126:     break;
17127: 
17128:   case 320:
17129: #line 591 "third_party/libpg_query/grammar/statements/create.y"
17130:     {
17131: 					(yyval.list) = list_make1((yyvsp[(1) - (1)].node));
17132: 				;}
17133:     break;
17134: 
17135:   case 321:
17136: #line 595 "third_party/libpg_query/grammar/statements/create.y"
17137:     {
17138: 					(yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node));
17139: 				;}
17140:     break;
17141: 
17142:   case 322:
17143: #line 602 "third_party/libpg_query/grammar/statements/create.y"
17144:     {
17145: 				(yyval.ival) = PG_FKCONSTR_MATCH_FULL;
17146: 			;}
17147:     break;
17148: 
17149:   case 323:
17150: #line 606 "third_party/libpg_query/grammar/statements/create.y"
17151:     {
17152: 				ereport(ERROR,
17153: 						(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
17154: 						 errmsg("MATCH PARTIAL not yet implemented"),
17155: 						 parser_errposition((yylsp[(1) - (2)]))));
17156: 				(yyval.ival) = PG_FKCONSTR_MATCH_PARTIAL;
17157: 			;}
17158:     break;
17159: 
17160:   case 324:
17161: #line 614 "third_party/libpg_query/grammar/statements/create.y"
17162:     {
17163: 				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
17164: 			;}
17165:     break;
17166: 
17167:   case 325:
17168: #line 618 "third_party/libpg_query/grammar/statements/create.y"
17169:     {
17170: 				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
17171: 			;}
17172:     break;
17173: 
17174:   case 326:
17175: #line 626 "third_party/libpg_query/grammar/statements/create.y"
17176:     {
17177: 					PGTableLikeClause *n = makeNode(PGTableLikeClause);
17178: 					n->relation = (yyvsp[(2) - (3)].range);
17179: 					n->options = (yyvsp[(3) - (3)].ival);
17180: 					(yyval.node) = (PGNode *)n;
17181: 				;}
17182:     break;
17183: 
17184:   case 327:
17185: #line 635 "third_party/libpg_query/grammar/statements/create.y"
17186:     { (yyval.ival) = PG_RELPERSISTENCE_TEMP; ;}
17187:     break;
17188: 
17189:   case 328:
17190: #line 636 "third_party/libpg_query/grammar/statements/create.y"
17191:     { (yyval.ival) = PG_RELPERSISTENCE_TEMP; ;}
17192:     break;
17193: 
17194:   case 329:
17195: #line 637 "third_party/libpg_query/grammar/statements/create.y"
17196:     { (yyval.ival) = PG_RELPERSISTENCE_TEMP; ;}
17197:     break;
17198: 
17199:   case 330:
17200: #line 638 "third_party/libpg_query/grammar/statements/create.y"
17201:     { (yyval.ival) = PG_RELPERSISTENCE_TEMP; ;}
17202:     break;
17203: 
17204:   case 331:
17205: #line 640 "third_party/libpg_query/grammar/statements/create.y"
17206:     {
17207: 					ereport(PGWARNING,
17208: 							(errmsg("GLOBAL is deprecated in temporary table creation"),
17209: 							 parser_errposition((yylsp[(1) - (2)]))));
17210: 					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
17211: 				;}
17212:     break;
17213: 
17214:   case 332:
17215: #line 647 "third_party/libpg_query/grammar/statements/create.y"
17216:     {
17217: 					ereport(PGWARNING,
17218: 							(errmsg("GLOBAL is deprecated in temporary table creation"),
17219: 							 parser_errposition((yylsp[(1) - (2)]))));
17220: 					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
17221: 				;}
17222:     break;
17223: 
17224:   case 333:
17225: #line 653 "third_party/libpg_query/grammar/statements/create.y"
17226:     { (yyval.ival) = PG_RELPERSISTENCE_UNLOGGED; ;}
17227:     break;
17228: 
17229:   case 334:
17230: #line 654 "third_party/libpg_query/grammar/statements/create.y"
17231:     { (yyval.ival) = RELPERSISTENCE_PERMANENT; ;}
17232:     break;
17233: 
17234:   case 335:
17235: #line 659 "third_party/libpg_query/grammar/statements/create.y"
17236:     { (yyval.ival) = PG_ATTRIBUTE_IDENTITY_ALWAYS; ;}
17237:     break;
17238: 
17239:   case 336:
17240: #line 660 "third_party/libpg_query/grammar/statements/create.y"
17241:     { (yyval.ival) = ATTRIBUTE_IDENTITY_BY_DEFAULT; ;}
17242:     break;
17243: 
17244:   case 337:
17245: #line 10 "third_party/libpg_query/grammar/statements/drop.y"
17246:     {
17247: 					PGDropStmt *n = makeNode(PGDropStmt);
17248: 					n->removeType = (yyvsp[(2) - (6)].objtype);
17249: 					n->missing_ok = true;
17250: 					n->objects = (yyvsp[(5) - (6)].list);
17251: 					n->behavior = (yyvsp[(6) - (6)].dbehavior);
17252: 					n->concurrent = false;
17253: 					(yyval.node) = (PGNode *)n;
17254: 				;}
17255:     break;
17256: 
17257:   case 338:
17258: #line 20 "third_party/libpg_query/grammar/statements/drop.y"
17259:     {
17260: 					PGDropStmt *n = makeNode(PGDropStmt);
17261: 					n->removeType = (yyvsp[(2) - (4)].objtype);
17262: 					n->missing_ok = false;
17263: 					n->objects = (yyvsp[(3) - (4)].list);
17264: 					n->behavior = (yyvsp[(4) - (4)].dbehavior);
17265: 					n->concurrent = false;
17266: 					(yyval.node) = (PGNode *)n;
17267: 				;}
17268:     break;
17269: 
17270:   case 339:
17271: #line 30 "third_party/libpg_query/grammar/statements/drop.y"
17272:     {
17273: 					PGDropStmt *n = makeNode(PGDropStmt);
17274: 					n->removeType = (yyvsp[(2) - (6)].objtype);
17275: 					n->missing_ok = true;
17276: 					n->objects = (yyvsp[(5) - (6)].list);
17277: 					n->behavior = (yyvsp[(6) - (6)].dbehavior);
17278: 					n->concurrent = false;
17279: 					(yyval.node) = (PGNode *)n;
17280: 				;}
17281:     break;
17282: 
17283:   case 340:
17284: #line 40 "third_party/libpg_query/grammar/statements/drop.y"
17285:     {
17286: 					PGDropStmt *n = makeNode(PGDropStmt);
17287: 					n->removeType = (yyvsp[(2) - (4)].objtype);
17288: 					n->missing_ok = false;
17289: 					n->objects = (yyvsp[(3) - (4)].list);
17290: 					n->behavior = (yyvsp[(4) - (4)].dbehavior);
17291: 					n->concurrent = false;
17292: 					(yyval.node) = (PGNode *)n;
17293: 				;}
17294:     break;
17295: 
17296:   case 341:
17297: #line 50 "third_party/libpg_query/grammar/statements/drop.y"
17298:     {
17299: 					PGDropStmt *n = makeNode(PGDropStmt);
17300: 					n->removeType = (yyvsp[(2) - (6)].objtype);
17301: 					n->objects = list_make1(lappend((yyvsp[(5) - (6)].list), makeString((yyvsp[(3) - (6)].str))));
17302: 					n->behavior = (yyvsp[(6) - (6)].dbehavior);
17303: 					n->missing_ok = false;
17304: 					n->concurrent = false;
17305: 					(yyval.node) = (PGNode *) n;
17306: 				;}
17307:     break;
17308: 
17309:   case 342:
17310: #line 60 "third_party/libpg_query/grammar/statements/drop.y"
17311:     {
17312: 					PGDropStmt *n = makeNode(PGDropStmt);
17313: 					n->removeType = (yyvsp[(2) - (8)].objtype);
17314: 					n->objects = list_make1(lappend((yyvsp[(7) - (8)].list), makeString((yyvsp[(5) - (8)].str))));
17315: 					n->behavior = (yyvsp[(8) - (8)].dbehavior);
17316: 					n->missing_ok = true;
17317: 					n->concurrent = false;
17318: 					(yyval.node) = (PGNode *) n;
17319: 				;}
17320:     break;
17321: 
17322:   case 343:
17323: #line 73 "third_party/libpg_query/grammar/statements/drop.y"
17324:     { (yyval.objtype) = PG_OBJECT_TABLE; ;}
17325:     break;
17326: 
17327:   case 344:
17328: #line 74 "third_party/libpg_query/grammar/statements/drop.y"
17329:     { (yyval.objtype) = PG_OBJECT_SEQUENCE; ;}
17330:     break;
17331: 
17332:   case 345:
17333: #line 75 "third_party/libpg_query/grammar/statements/drop.y"
17334:     { (yyval.objtype) = PG_OBJECT_FUNCTION; ;}
17335:     break;
17336: 
17337:   case 346:
17338: #line 76 "third_party/libpg_query/grammar/statements/drop.y"
17339:     { (yyval.objtype) = PG_OBJECT_FUNCTION; ;}
17340:     break;
17341: 
17342:   case 347:
17343: #line 77 "third_party/libpg_query/grammar/statements/drop.y"
17344:     { (yyval.objtype) = PG_OBJECT_VIEW; ;}
17345:     break;
17346: 
17347:   case 348:
17348: #line 78 "third_party/libpg_query/grammar/statements/drop.y"
17349:     { (yyval.objtype) = PG_OBJECT_MATVIEW; ;}
17350:     break;
17351: 
17352:   case 349:
17353: #line 79 "third_party/libpg_query/grammar/statements/drop.y"
17354:     { (yyval.objtype) = PG_OBJECT_INDEX; ;}
17355:     break;
17356: 
17357:   case 350:
17358: #line 80 "third_party/libpg_query/grammar/statements/drop.y"
17359:     { (yyval.objtype) = PG_OBJECT_FOREIGN_TABLE; ;}
17360:     break;
17361: 
17362:   case 351:
17363: #line 81 "third_party/libpg_query/grammar/statements/drop.y"
17364:     { (yyval.objtype) = PG_OBJECT_COLLATION; ;}
17365:     break;
17366: 
17367:   case 352:
17368: #line 82 "third_party/libpg_query/grammar/statements/drop.y"
17369:     { (yyval.objtype) = PG_OBJECT_CONVERSION; ;}
17370:     break;
17371: 
17372:   case 353:
17373: #line 83 "third_party/libpg_query/grammar/statements/drop.y"
17374:     { (yyval.objtype) = PG_OBJECT_STATISTIC_EXT; ;}
17375:     break;
17376: 
17377:   case 354:
17378: #line 84 "third_party/libpg_query/grammar/statements/drop.y"
17379:     { (yyval.objtype) = PG_OBJECT_TSPARSER; ;}
17380:     break;
17381: 
17382:   case 355:
17383: #line 85 "third_party/libpg_query/grammar/statements/drop.y"
17384:     { (yyval.objtype) = PG_OBJECT_TSDICTIONARY; ;}
17385:     break;
17386: 
17387:   case 356:
17388: #line 86 "third_party/libpg_query/grammar/statements/drop.y"
17389:     { (yyval.objtype) = PG_OBJECT_TSTEMPLATE; ;}
17390:     break;
17391: 
17392:   case 357:
17393: #line 87 "third_party/libpg_query/grammar/statements/drop.y"
17394:     { (yyval.objtype) = PG_OBJECT_TSCONFIGURATION; ;}
17395:     break;
17396: 
17397:   case 358:
17398: #line 92 "third_party/libpg_query/grammar/statements/drop.y"
17399:     { (yyval.objtype) = PG_OBJECT_ACCESS_METHOD; ;}
17400:     break;
17401: 
17402:   case 359:
17403: #line 93 "third_party/libpg_query/grammar/statements/drop.y"
17404:     { (yyval.objtype) = PG_OBJECT_EVENT_TRIGGER; ;}
17405:     break;
17406: 
17407:   case 360:
17408: #line 94 "third_party/libpg_query/grammar/statements/drop.y"
17409:     { (yyval.objtype) = PG_OBJECT_EXTENSION; ;}
17410:     break;
17411: 
17412:   case 361:
17413: #line 95 "third_party/libpg_query/grammar/statements/drop.y"
17414:     { (yyval.objtype) = PG_OBJECT_FDW; ;}
17415:     break;
17416: 
17417:   case 362:
17418: #line 96 "third_party/libpg_query/grammar/statements/drop.y"
17419:     { (yyval.objtype) = PG_OBJECT_PUBLICATION; ;}
17420:     break;
17421: 
17422:   case 363:
17423: #line 97 "third_party/libpg_query/grammar/statements/drop.y"
17424:     { (yyval.objtype) = PG_OBJECT_SCHEMA; ;}
17425:     break;
17426: 
17427:   case 364:
17428: #line 98 "third_party/libpg_query/grammar/statements/drop.y"
17429:     { (yyval.objtype) = PG_OBJECT_FOREIGN_SERVER; ;}
17430:     break;
17431: 
17432:   case 365:
17433: #line 103 "third_party/libpg_query/grammar/statements/drop.y"
17434:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].list)); ;}
17435:     break;
17436: 
17437:   case 366:
17438: #line 104 "third_party/libpg_query/grammar/statements/drop.y"
17439:     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].list)); ;}
17440:     break;
17441: 
17442:   case 367:
17443: #line 109 "third_party/libpg_query/grammar/statements/drop.y"
17444:     { (yyval.dbehavior) = PG_DROP_CASCADE; ;}
17445:     break;
17446: 
17447:   case 368:
17448: #line 110 "third_party/libpg_query/grammar/statements/drop.y"
17449:     { (yyval.dbehavior) = PG_DROP_RESTRICT; ;}
17450:     break;
17451: 
17452:   case 369:
17453: #line 111 "third_party/libpg_query/grammar/statements/drop.y"
17454:     { (yyval.dbehavior) = PG_DROP_RESTRICT; /* default */ ;}
17455:     break;
17456: 
17457:   case 370:
17458: #line 116 "third_party/libpg_query/grammar/statements/drop.y"
17459:     { (yyval.objtype) = PG_OBJECT_POLICY; ;}
17460:     break;
17461: 
17462:   case 371:
17463: #line 117 "third_party/libpg_query/grammar/statements/drop.y"
17464:     { (yyval.objtype) = PG_OBJECT_RULE; ;}
17465:     break;
17466: 
17467:   case 372:
17468: #line 118 "third_party/libpg_query/grammar/statements/drop.y"
17469:     { (yyval.objtype) = PG_OBJECT_TRIGGER; ;}
17470:     break;
17471: 
17472:   case 373:
17473: #line 8 "third_party/libpg_query/grammar/statements/create_function.y"
17474:     {
17475: 					PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
17476: 					n->name = (yyvsp[(3) - (6)].range);
17477: 					n->params = (yyvsp[(4) - (6)].list);
17478: 					n->function = (yyvsp[(6) - (6)].node);
17479: 					(yyval.node) = (PGNode *)n;
17480: 				;}
17481:     break;
17482: 
17483:   case 376:
17484: #line 24 "third_party/libpg_query/grammar/statements/create_function.y"
17485:     {
17486: 				(yyval.list) = NIL;
17487: 			;}
17488:     break;
17489: 
17490:   case 377:
17491: #line 28 "third_party/libpg_query/grammar/statements/create_function.y"
17492:     {
17493: 				(yyval.list) = (yyvsp[(2) - (3)].list);
17494: 			;}
17495:     break;
17496: 
17497:   case 378:
17498: #line 12 "third_party/libpg_query/grammar/statements/update.y"
17499:     {
17500: 					PGUpdateStmt *n = makeNode(PGUpdateStmt);
17501: 					n->relation = (yyvsp[(3) - (8)].range);
17502: 					n->targetList = (yyvsp[(5) - (8)].list);
17503: 					n->fromClause = (yyvsp[(6) - (8)].list);
17504: 					n->whereClause = (yyvsp[(7) - (8)].node);
17505: 					n->returningList = (yyvsp[(8) - (8)].list);
17506: 					n->withClause = (yyvsp[(1) - (8)].with);
17507: 					(yyval.node) = (PGNode *)n;
17508: 				;}
17509:     break;
17510: 
17511:   case 379:
17512: #line 3 "third_party/libpg_query/grammar/statements/copy.y"
17513:     {
17514: 					PGCopyStmt *n = makeNode(PGCopyStmt);
17515: 					n->relation = (yyvsp[(3) - (11)].range);
17516: 					n->query = NULL;
17517: 					n->attlist = (yyvsp[(4) - (11)].list);
17518: 					n->is_from = (yyvsp[(6) - (11)].boolean);
17519: 					n->is_program = (yyvsp[(7) - (11)].boolean);
17520: 					n->filename = (yyvsp[(8) - (11)].str);
17521: 
17522: 					if (n->is_program && n->filename == NULL)
17523: 						ereport(ERROR,
17524: 								(errcode(PG_ERRCODE_SYNTAX_ERROR),
17525: 								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
17526: 								 parser_errposition((yylsp[(8) - (11)]))));
17527: 
17528: 					n->options = NIL;
17529: 					/* Concatenate user-supplied flags */
17530: 					if ((yyvsp[(2) - (11)].defelt))
17531: 						n->options = lappend(n->options, (yyvsp[(2) - (11)].defelt));
17532: 					if ((yyvsp[(5) - (11)].defelt))
17533: 						n->options = lappend(n->options, (yyvsp[(5) - (11)].defelt));
17534: 					if ((yyvsp[(9) - (11)].defelt))
17535: 						n->options = lappend(n->options, (yyvsp[(9) - (11)].defelt));
17536: 					if ((yyvsp[(11) - (11)].list))
17537: 						n->options = list_concat(n->options, (yyvsp[(11) - (11)].list));
17538: 					(yyval.node) = (PGNode *)n;
17539: 				;}
17540:     break;
17541: 
17542:   case 380:
17543: #line 31 "third_party/libpg_query/grammar/statements/copy.y"
17544:     {
17545: 					PGCopyStmt *n = makeNode(PGCopyStmt);
17546: 					n->relation = NULL;
17547: 					n->query = (yyvsp[(3) - (9)].node);
17548: 					n->attlist = NIL;
17549: 					n->is_from = false;
17550: 					n->is_program = (yyvsp[(6) - (9)].boolean);
17551: 					n->filename = (yyvsp[(7) - (9)].str);
17552: 					n->options = (yyvsp[(9) - (9)].list);
17553: 
17554: 					if (n->is_program && n->filename == NULL)
17555: 						ereport(ERROR,
17556: 								(errcode(PG_ERRCODE_SYNTAX_ERROR),
17557: 								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
17558: 								 parser_errposition((yylsp[(5) - (9)]))));
17559: 
17560: 					(yyval.node) = (PGNode *)n;
17561: 				;}
17562:     break;
17563: 
17564:   case 381:
17565: #line 53 "third_party/libpg_query/grammar/statements/copy.y"
17566:     { (yyval.boolean) = true; ;}
17567:     break;
17568: 
17569:   case 382:
17570: #line 54 "third_party/libpg_query/grammar/statements/copy.y"
17571:     { (yyval.boolean) = false; ;}
17572:     break;
17573: 
17574:   case 383:
17575: #line 60 "third_party/libpg_query/grammar/statements/copy.y"
17576:     {
17577: 					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[(3) - (3)].str)), (yylsp[(2) - (3)]));
17578: 				;}
17579:     break;
17580: 
17581:   case 384:
17582: #line 63 "third_party/libpg_query/grammar/statements/copy.y"
17583:     { (yyval.defelt) = NULL; ;}
17584:     break;
17585: 
17586:   case 385:
17587: #line 69 "third_party/libpg_query/grammar/statements/copy.y"
17588:     {
17589: 					(yyval.list) = list_make1((yyvsp[(1) - (1)].node));
17590: 				;}
17591:     break;
17592: 
17593:   case 386:
17594: #line 73 "third_party/libpg_query/grammar/statements/copy.y"
17595:     {
17596: 					(yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node));
17597: 				;}
17598:     break;
17599: 
17600:   case 387:
17601: #line 80 "third_party/libpg_query/grammar/statements/copy.y"
17602:     {;}
17603:     break;
17604: 
17605:   case 388:
17606: #line 81 "third_party/libpg_query/grammar/statements/copy.y"
17607:     {;}
17608:     break;
17609: 
17610:   case 389:
17611: #line 85 "third_party/libpg_query/grammar/statements/copy.y"
17612:     {;}
17613:     break;
17614: 
17615:   case 390:
17616: #line 86 "third_party/libpg_query/grammar/statements/copy.y"
17617:     {;}
17618:     break;
17619: 
17620:   case 391:
17621: #line 91 "third_party/libpg_query/grammar/statements/copy.y"
17622:     { (yyval.boolean) = true; ;}
17623:     break;
17624: 
17625:   case 392:
17626: #line 92 "third_party/libpg_query/grammar/statements/copy.y"
17627:     { (yyval.boolean) = false; ;}
17628:     break;
17629: 
17630:   case 393:
17631: #line 96 "third_party/libpg_query/grammar/statements/copy.y"
17632:     { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
17633:     break;
17634: 
17635:   case 394:
17636: #line 97 "third_party/libpg_query/grammar/statements/copy.y"
17637:     { (yyval.list) = (yyvsp[(2) - (3)].list); ;}
17638:     break;
17639: 
17640:   case 395:
17641: #line 102 "third_party/libpg_query/grammar/statements/copy.y"
17642:     { (yyval.node) = (PGNode *) makeString((yyvsp[(1) - (1)].str)); ;}
17643:     break;
17644: 
17645:   case 396:
17646: #line 103 "third_party/libpg_query/grammar/statements/copy.y"
17647:     { (yyval.node) = (PGNode *) (yyvsp[(1) - (1)].value); ;}
17648:     break;
17649: 
17650:   case 397:
17651: #line 104 "third_party/libpg_query/grammar/statements/copy.y"
17652:     { (yyval.node) = (PGNode *) makeNode(PGAStar); ;}
17653:     break;
17654: 
17655:   case 398:
17656: #line 105 "third_party/libpg_query/grammar/statements/copy.y"
17657:     { (yyval.node) = (PGNode *) (yyvsp[(2) - (3)].list); ;}
17658:     break;
17659: 
17660:   case 399:
17661: #line 106 "third_party/libpg_query/grammar/statements/copy.y"
17662:     { (yyval.node) = NULL; ;}
17663:     break;
17664: 
17665:   case 400:
17666: #line 112 "third_party/libpg_query/grammar/statements/copy.y"
17667:     {
17668: 					(yyval.defelt) = makeDefElem((yyvsp[(1) - (2)].str), (yyvsp[(2) - (2)].node), (yylsp[(1) - (2)]));
17669: 				;}
17670:     break;
17671: 
17672:   case 401:
17673: #line 120 "third_party/libpg_query/grammar/statements/copy.y"
17674:     {
17675: 					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[(1) - (2)]));
17676: 				;}
17677:     break;
17678: 
17679:   case 402:
17680: #line 123 "third_party/libpg_query/grammar/statements/copy.y"
17681:     { (yyval.defelt) = NULL; ;}
17682:     break;
17683: 
17684:   case 403:
17685: #line 128 "third_party/libpg_query/grammar/statements/copy.y"
17686:     { (yyval.list) = lappend((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].defelt)); ;}
17687:     break;
17688: 
17689:   case 404:
17690: #line 129 "third_party/libpg_query/grammar/statements/copy.y"
17691:     { (yyval.list) = NIL; ;}
17692:     break;
17693: 
17694:   case 405:
17695: #line 135 "third_party/libpg_query/grammar/statements/copy.y"
17696:     {
17697: 					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[(1) - (1)]));
17698: 				;}
17699:     break;
17700: 
17701:   case 406:
17702: #line 138 "third_party/libpg_query/grammar/statements/copy.y"
17703:     { (yyval.defelt) = NULL; ;}
17704:     break;
17705: 
17706:   case 407:
17707: #line 144 "third_party/libpg_query/grammar/statements/copy.y"
17708:     {
17709: 					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[(1) - (1)]));
17710: 				;}
17711:     break;
17712: 
17713:   case 408:
17714: #line 148 "third_party/libpg_query/grammar/statements/copy.y"
17715:     {
17716: 					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[(1) - (1)]));
17717: 				;}
17718:     break;
17719: 
17720:   case 409:
17721: #line 152 "third_party/libpg_query/grammar/statements/copy.y"
17722:     {
17723: 					(yyval.defelt) = makeDefElem("freeze", (PGNode *)makeInteger(true), (yylsp[(1) - (1)]));
17724: 				;}
17725:     break;
17726: 
17727:   case 410:
17728: #line 156 "third_party/libpg_query/grammar/statements/copy.y"
17729:     {
17730: 					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[(3) - (3)].str)), (yylsp[(1) - (3)]));
17731: 				;}
17732:     break;
17733: 
17734:   case 411:
17735: #line 160 "third_party/libpg_query/grammar/statements/copy.y"
17736:     {
17737: 					(yyval.defelt) = makeDefElem("null", (PGNode *)makeString((yyvsp[(3) - (3)].str)), (yylsp[(1) - (3)]));
17738: 				;}
17739:     break;
17740: 
17741:   case 412:
17742: #line 164 "third_party/libpg_query/grammar/statements/copy.y"
17743:     {
17744: 					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("csv"), (yylsp[(1) - (1)]));
17745: 				;}
17746:     break;
17747: 
17748:   case 413:
17749: #line 168 "third_party/libpg_query/grammar/statements/copy.y"
17750:     {
17751: 					(yyval.defelt) = makeDefElem("header", (PGNode *)makeInteger(true), (yylsp[(1) - (1)]));
17752: 				;}
17753:     break;
17754: 
17755:   case 414:
17756: #line 172 "third_party/libpg_query/grammar/statements/copy.y"
17757:     {
17758: 					(yyval.defelt) = makeDefElem("quote", (PGNode *)makeString((yyvsp[(3) - (3)].str)), (yylsp[(1) - (3)]));
17759: 				;}
17760:     break;
17761: 
17762:   case 415:
17763: #line 176 "third_party/libpg_query/grammar/statements/copy.y"
17764:     {
17765: 					(yyval.defelt) = makeDefElem("escape", (PGNode *)makeString((yyvsp[(3) - (3)].str)), (yylsp[(1) - (3)]));
17766: 				;}
17767:     break;
17768: 
17769:   case 416:
17770: #line 180 "third_party/libpg_query/grammar/statements/copy.y"
17771:     {
17772: 					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)(yyvsp[(3) - (3)].list), (yylsp[(1) - (3)]));
17773: 				;}
17774:     break;
17775: 
17776:   case 417:
17777: #line 184 "third_party/libpg_query/grammar/statements/copy.y"
17778:     {
17779: 					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)makeNode(PGAStar), (yylsp[(1) - (3)]));
17780: 				;}
17781:     break;
17782: 
17783:   case 418:
17784: #line 188 "third_party/libpg_query/grammar/statements/copy.y"
17785:     {
17786: 					(yyval.defelt) = makeDefElem("force_not_null", (PGNode *)(yyvsp[(4) - (4)].list), (yylsp[(1) - (4)]));
17787: 				;}
17788:     break;
17789: 
17790:   case 419:
17791: #line 192 "third_party/libpg_query/grammar/statements/copy.y"
17792:     {
17793: 					(yyval.defelt) = makeDefElem("force_null", (PGNode *)(yyvsp[(3) - (3)].list), (yylsp[(1) - (3)]));
17794: 				;}
17795:     break;
17796: 
17797:   case 420:
17798: #line 196 "third_party/libpg_query/grammar/statements/copy.y"
17799:     {
17800: 					(yyval.defelt) = makeDefElem("encoding", (PGNode *)makeString((yyvsp[(2) - (2)].str)), (yylsp[(1) - (2)]));
17801: 				;}
17802:     break;
17803: 
17804:   case 421:
17805: #line 203 "third_party/libpg_query/grammar/statements/copy.y"
17806:     { (yyval.node) = (PGNode *) makeString((yyvsp[(1) - (1)].str)); ;}
17807:     break;
17808: 
17809:   case 422:
17810: #line 209 "third_party/libpg_query/grammar/statements/copy.y"
17811:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
17812:     break;
17813: 
17814:   case 423:
17815: #line 210 "third_party/libpg_query/grammar/statements/copy.y"
17816:     { (yyval.str) = NULL; ;}
17817:     break;
17818: 
17819:   case 424:
17820: #line 211 "third_party/libpg_query/grammar/statements/copy.y"
17821:     { (yyval.str) = NULL; ;}
17822:     break;
17823: 
17824:   case 425:
17825: #line 217 "third_party/libpg_query/grammar/statements/copy.y"
17826:     {
17827: 					(yyval.list) = list_make1((yyvsp[(1) - (1)].defelt));
17828: 				;}
17829:     break;
17830: 
17831:   case 426:
17832: #line 221 "third_party/libpg_query/grammar/statements/copy.y"
17833:     {
17834: 					(yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].defelt));
17835: 				;}
17836:     break;
17837: 
17838:   case 429:
17839: #line 52 "third_party/libpg_query/grammar/statements/select.y"
17840:     { (yyval.node) = (yyvsp[(2) - (3)].node); ;}
17841:     break;
17842: 
17843:   case 430:
17844: #line 53 "third_party/libpg_query/grammar/statements/select.y"
17845:     { (yyval.node) = (yyvsp[(2) - (3)].node); ;}
17846:     break;
17847: 
17848:   case 431:
17849: #line 68 "third_party/libpg_query/grammar/statements/select.y"
17850:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
17851:     break;
17852: 
17853:   case 432:
17854: #line 70 "third_party/libpg_query/grammar/statements/select.y"
17855:     {
17856: 					insertSelectOptions((PGSelectStmt *) (yyvsp[(1) - (2)].node), (yyvsp[(2) - (2)].list), NIL,
17857: 										NULL, NULL, NULL,
17858: 										yyscanner);
17859: 					(yyval.node) = (yyvsp[(1) - (2)].node);
17860: 				;}
17861:     break;
17862: 
17863:   case 433:
17864: #line 77 "third_party/libpg_query/grammar/statements/select.y"
17865:     {
17866: 					insertSelectOptions((PGSelectStmt *) (yyvsp[(1) - (4)].node), (yyvsp[(2) - (4)].list), (yyvsp[(3) - (4)].list),
17867: 										(PGNode*) list_nth((yyvsp[(4) - (4)].list), 0), (PGNode*) list_nth((yyvsp[(4) - (4)].list), 1),
17868: 										NULL,
17869: 										yyscanner);
17870: 					(yyval.node) = (yyvsp[(1) - (4)].node);
17871: 				;}
17872:     break;
17873: 
17874:   case 434:
17875: #line 85 "third_party/libpg_query/grammar/statements/select.y"
17876:     {
17877: 					insertSelectOptions((PGSelectStmt *) (yyvsp[(1) - (4)].node), (yyvsp[(2) - (4)].list), (yyvsp[(4) - (4)].list),
17878: 										(PGNode*) list_nth((yyvsp[(3) - (4)].list), 0), (PGNode*) list_nth((yyvsp[(3) - (4)].list), 1),
17879: 										NULL,
17880: 										yyscanner);
17881: 					(yyval.node) = (yyvsp[(1) - (4)].node);
17882: 				;}
17883:     break;
17884: 
17885:   case 435:
17886: #line 93 "third_party/libpg_query/grammar/statements/select.y"
17887:     {
17888: 					insertSelectOptions((PGSelectStmt *) (yyvsp[(2) - (2)].node), NULL, NIL,
17889: 										NULL, NULL,
17890: 										(yyvsp[(1) - (2)].with),
17891: 										yyscanner);
17892: 					(yyval.node) = (yyvsp[(2) - (2)].node);
17893: 				;}
17894:     break;
17895: 
17896:   case 436:
17897: #line 101 "third_party/libpg_query/grammar/statements/select.y"
17898:     {
17899: 					insertSelectOptions((PGSelectStmt *) (yyvsp[(2) - (3)].node), (yyvsp[(3) - (3)].list), NIL,
17900: 										NULL, NULL,
17901: 										(yyvsp[(1) - (3)].with),
17902: 										yyscanner);
17903: 					(yyval.node) = (yyvsp[(2) - (3)].node);
17904: 				;}
17905:     break;
17906: 
17907:   case 437:
17908: #line 109 "third_party/libpg_query/grammar/statements/select.y"
17909:     {
17910: 					insertSelectOptions((PGSelectStmt *) (yyvsp[(2) - (5)].node), (yyvsp[(3) - (5)].list), (yyvsp[(4) - (5)].list),
17911: 										(PGNode*) list_nth((yyvsp[(5) - (5)].list), 0), (PGNode*) list_nth((yyvsp[(5) - (5)].list), 1),
17912: 										(yyvsp[(1) - (5)].with),
17913: 										yyscanner);
17914: 					(yyval.node) = (yyvsp[(2) - (5)].node);
17915: 				;}
17916:     break;
17917: 
17918:   case 438:
17919: #line 117 "third_party/libpg_query/grammar/statements/select.y"
17920:     {
17921: 					insertSelectOptions((PGSelectStmt *) (yyvsp[(2) - (5)].node), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].list),
17922: 										(PGNode*) list_nth((yyvsp[(4) - (5)].list), 0), (PGNode*) list_nth((yyvsp[(4) - (5)].list), 1),
17923: 										(yyvsp[(1) - (5)].with),
17924: 										yyscanner);
17925: 					(yyval.node) = (yyvsp[(2) - (5)].node);
17926: 				;}
17927:     break;
17928: 
17929:   case 439:
17930: #line 127 "third_party/libpg_query/grammar/statements/select.y"
17931:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
17932:     break;
17933: 
17934:   case 440:
17935: #line 128 "third_party/libpg_query/grammar/statements/select.y"
17936:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
17937:     break;
17938: 
17939:   case 441:
17940: #line 158 "third_party/libpg_query/grammar/statements/select.y"
17941:     {
17942: 					PGSelectStmt *n = makeNode(PGSelectStmt);
17943: 					n->targetList = (yyvsp[(3) - (10)].list);
17944: 					n->intoClause = (yyvsp[(4) - (10)].into);
17945: 					n->fromClause = (yyvsp[(5) - (10)].list);
17946: 					n->whereClause = (yyvsp[(6) - (10)].node);
17947: 					n->groupClause = (yyvsp[(7) - (10)].list);
17948: 					n->havingClause = (yyvsp[(8) - (10)].node);
17949: 					n->windowClause = (yyvsp[(9) - (10)].list);
17950: 					n->sampleOptions = (yyvsp[(10) - (10)].node);
17951: 					(yyval.node) = (PGNode *)n;
17952: 				;}
17953:     break;
17954: 
17955:   case 442:
17956: #line 173 "third_party/libpg_query/grammar/statements/select.y"
17957:     {
17958: 					PGSelectStmt *n = makeNode(PGSelectStmt);
17959: 					n->distinctClause = (yyvsp[(2) - (10)].list);
17960: 					n->targetList = (yyvsp[(3) - (10)].list);
17961: 					n->intoClause = (yyvsp[(4) - (10)].into);
17962: 					n->fromClause = (yyvsp[(5) - (10)].list);
17963: 					n->whereClause = (yyvsp[(6) - (10)].node);
17964: 					n->groupClause = (yyvsp[(7) - (10)].list);
17965: 					n->havingClause = (yyvsp[(8) - (10)].node);
17966: 					n->windowClause = (yyvsp[(9) - (10)].list);
17967: 					n->sampleOptions = (yyvsp[(10) - (10)].node);
17968: 					(yyval.node) = (PGNode *)n;
17969: 				;}
17970:     break;
17971: 
17972:   case 443:
17973: #line 186 "third_party/libpg_query/grammar/statements/select.y"
17974:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
17975:     break;
17976: 
17977:   case 444:
17978: #line 188 "third_party/libpg_query/grammar/statements/select.y"
17979:     {
17980: 					/* same as SELECT * FROM relation_expr */
17981: 					PGColumnRef *cr = makeNode(PGColumnRef);
17982: 					PGResTarget *rt = makeNode(PGResTarget);
17983: 					PGSelectStmt *n = makeNode(PGSelectStmt);
17984: 
17985: 					cr->fields = list_make1(makeNode(PGAStar));
17986: 					cr->location = -1;
17987: 
17988: 					rt->name = NULL;
17989: 					rt->indirection = NIL;
17990: 					rt->val = (PGNode *)cr;
17991: 					rt->location = -1;
17992: 
17993: 					n->targetList = list_make1(rt);
17994: 					n->fromClause = list_make1((yyvsp[(2) - (2)].range));
17995: 					(yyval.node) = (PGNode *)n;
17996: 				;}
17997:     break;
17998: 
17999:   case 445:
18000: #line 207 "third_party/libpg_query/grammar/statements/select.y"
18001:     {
18002: 					(yyval.node) = makeSetOp(PG_SETOP_UNION, (yyvsp[(3) - (4)].boolean), (yyvsp[(1) - (4)].node), (yyvsp[(4) - (4)].node));
18003: 				;}
18004:     break;
18005: 
18006:   case 446:
18007: #line 211 "third_party/libpg_query/grammar/statements/select.y"
18008:     {
18009: 					(yyval.node) = makeSetOp(PG_SETOP_INTERSECT, (yyvsp[(3) - (4)].boolean), (yyvsp[(1) - (4)].node), (yyvsp[(4) - (4)].node));
18010: 				;}
18011:     break;
18012: 
18013:   case 447:
18014: #line 215 "third_party/libpg_query/grammar/statements/select.y"
18015:     {
18016: 					(yyval.node) = makeSetOp(PG_SETOP_EXCEPT, (yyvsp[(3) - (4)].boolean), (yyvsp[(1) - (4)].node), (yyvsp[(4) - (4)].node));
18017: 				;}
18018:     break;
18019: 
18020:   case 448:
18021: #line 232 "third_party/libpg_query/grammar/statements/select.y"
18022:     {
18023: 				(yyval.with) = makeNode(PGWithClause);
18024: 				(yyval.with)->ctes = (yyvsp[(2) - (2)].list);
18025: 				(yyval.with)->recursive = false;
18026: 				(yyval.with)->location = (yylsp[(1) - (2)]);
18027: 			;}
18028:     break;
18029: 
18030:   case 449:
18031: #line 239 "third_party/libpg_query/grammar/statements/select.y"
18032:     {
18033: 				(yyval.with) = makeNode(PGWithClause);
18034: 				(yyval.with)->ctes = (yyvsp[(2) - (2)].list);
18035: 				(yyval.with)->recursive = false;
18036: 				(yyval.with)->location = (yylsp[(1) - (2)]);
18037: 			;}
18038:     break;
18039: 
18040:   case 450:
18041: #line 246 "third_party/libpg_query/grammar/statements/select.y"
18042:     {
18043: 				(yyval.with) = makeNode(PGWithClause);
18044: 				(yyval.with)->ctes = (yyvsp[(3) - (3)].list);
18045: 				(yyval.with)->recursive = true;
18046: 				(yyval.with)->location = (yylsp[(1) - (3)]);
18047: 			;}
18048:     break;
18049: 
18050:   case 451:
18051: #line 255 "third_party/libpg_query/grammar/statements/select.y"
18052:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].node)); ;}
18053:     break;
18054: 
18055:   case 452:
18056: #line 256 "third_party/libpg_query/grammar/statements/select.y"
18057:     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node)); ;}
18058:     break;
18059: 
18060:   case 453:
18061: #line 260 "third_party/libpg_query/grammar/statements/select.y"
18062:     {
18063: 				PGCommonTableExpr *n = makeNode(PGCommonTableExpr);
18064: 				n->ctename = (yyvsp[(1) - (6)].str);
18065: 				n->aliascolnames = (yyvsp[(2) - (6)].list);
18066: 				n->ctequery = (yyvsp[(5) - (6)].node);
18067: 				n->location = (yylsp[(1) - (6)]);
18068: 				(yyval.node) = (PGNode *) n;
18069: 			;}
18070:     break;
18071: 
18072:   case 454:
18073: #line 272 "third_party/libpg_query/grammar/statements/select.y"
18074:     {
18075: 					(yyval.into) = makeNode(PGIntoClause);
18076: 					(yyval.into)->rel = (yyvsp[(2) - (2)].range);
18077: 					(yyval.into)->colNames = NIL;
18078: 					(yyval.into)->options = NIL;
18079: 					(yyval.into)->onCommit = PG_ONCOMMIT_NOOP;
18080: 					(yyval.into)->viewQuery = NULL;
18081: 					(yyval.into)->skipData = false;
18082: 				;}
18083:     break;
18084: 
18085:   case 455:
18086: #line 282 "third_party/libpg_query/grammar/statements/select.y"
18087:     { (yyval.into) = NULL; ;}
18088:     break;
18089: 
18090:   case 456:
18091: #line 291 "third_party/libpg_query/grammar/statements/select.y"
18092:     {
18093: 					(yyval.range) = (yyvsp[(3) - (3)].range);
18094: 					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
18095: 				;}
18096:     break;
18097: 
18098:   case 457:
18099: #line 296 "third_party/libpg_query/grammar/statements/select.y"
18100:     {
18101: 					(yyval.range) = (yyvsp[(3) - (3)].range);
18102: 					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
18103: 				;}
18104:     break;
18105: 
18106:   case 458:
18107: #line 301 "third_party/libpg_query/grammar/statements/select.y"
18108:     {
18109: 					(yyval.range) = (yyvsp[(4) - (4)].range);
18110: 					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
18111: 				;}
18112:     break;
18113: 
18114:   case 459:
18115: #line 306 "third_party/libpg_query/grammar/statements/select.y"
18116:     {
18117: 					(yyval.range) = (yyvsp[(4) - (4)].range);
18118: 					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
18119: 				;}
18120:     break;
18121: 
18122:   case 460:
18123: #line 311 "third_party/libpg_query/grammar/statements/select.y"
18124:     {
18125: 					ereport(PGWARNING,
18126: 							(errmsg("GLOBAL is deprecated in temporary table creation"),
18127: 							 parser_errposition((yylsp[(1) - (4)]))));
18128: 					(yyval.range) = (yyvsp[(4) - (4)].range);
18129: 					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
18130: 				;}
18131:     break;
18132: 
18133:   case 461:
18134: #line 319 "third_party/libpg_query/grammar/statements/select.y"
18135:     {
18136: 					ereport(PGWARNING,
18137: 							(errmsg("GLOBAL is deprecated in temporary table creation"),
18138: 							 parser_errposition((yylsp[(1) - (4)]))));
18139: 					(yyval.range) = (yyvsp[(4) - (4)].range);
18140: 					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
18141: 				;}
18142:     break;
18143: 
18144:   case 462:
18145: #line 327 "third_party/libpg_query/grammar/statements/select.y"
18146:     {
18147: 					(yyval.range) = (yyvsp[(3) - (3)].range);
18148: 					(yyval.range)->relpersistence = PG_RELPERSISTENCE_UNLOGGED;
18149: 				;}
18150:     break;
18151: 
18152:   case 463:
18153: #line 332 "third_party/libpg_query/grammar/statements/select.y"
18154:     {
18155: 					(yyval.range) = (yyvsp[(2) - (2)].range);
18156: 					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
18157: 				;}
18158:     break;
18159: 
18160:   case 464:
18161: #line 337 "third_party/libpg_query/grammar/statements/select.y"
18162:     {
18163: 					(yyval.range) = (yyvsp[(1) - (1)].range);
18164: 					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
18165: 				;}
18166:     break;
18167: 
18168:   case 465:
18169: #line 343 "third_party/libpg_query/grammar/statements/select.y"
18170:     {;}
18171:     break;
18172: 
18173:   case 466:
18174: #line 344 "third_party/libpg_query/grammar/statements/select.y"
18175:     {;}
18176:     break;
18177: 
18178:   case 467:
18179: #line 348 "third_party/libpg_query/grammar/statements/select.y"
18180:     { (yyval.boolean) = true; ;}
18181:     break;
18182: 
18183:   case 468:
18184: #line 349 "third_party/libpg_query/grammar/statements/select.y"
18185:     { (yyval.boolean) = false; ;}
18186:     break;
18187: 
18188:   case 469:
18189: #line 350 "third_party/libpg_query/grammar/statements/select.y"
18190:     { (yyval.boolean) = false; ;}
18191:     break;
18192: 
18193:   case 470:
18194: #line 357 "third_party/libpg_query/grammar/statements/select.y"
18195:     { (yyval.list) = list_make1(NIL); ;}
18196:     break;
18197: 
18198:   case 471:
18199: #line 358 "third_party/libpg_query/grammar/statements/select.y"
18200:     { (yyval.list) = (yyvsp[(4) - (5)].list); ;}
18201:     break;
18202: 
18203:   case 472:
18204: #line 362 "third_party/libpg_query/grammar/statements/select.y"
18205:     { (yyval.list) = NIL;;}
18206:     break;
18207: 
18208:   case 473:
18209: #line 363 "third_party/libpg_query/grammar/statements/select.y"
18210:     { (yyval.list) = NIL; ;}
18211:     break;
18212: 
18213:   case 474:
18214: #line 367 "third_party/libpg_query/grammar/statements/select.y"
18215:     { (yyval.list) = (yyvsp[(1) - (1)].list);;}
18216:     break;
18217: 
18218:   case 475:
18219: #line 368 "third_party/libpg_query/grammar/statements/select.y"
18220:     { (yyval.list) = NIL; ;}
18221:     break;
18222: 
18223:   case 476:
18224: #line 372 "third_party/libpg_query/grammar/statements/select.y"
18225:     { (yyval.list) = (yyvsp[(3) - (3)].list); ;}
18226:     break;
18227: 
18228:   case 477:
18229: #line 376 "third_party/libpg_query/grammar/statements/select.y"
18230:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].sortby)); ;}
18231:     break;
18232: 
18233:   case 478:
18234: #line 377 "third_party/libpg_query/grammar/statements/select.y"
18235:     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].sortby)); ;}
18236:     break;
18237: 
18238:   case 479:
18239: #line 381 "third_party/libpg_query/grammar/statements/select.y"
18240:     {
18241: 					(yyval.sortby) = makeNode(PGSortBy);
18242: 					(yyval.sortby)->node = (yyvsp[(1) - (4)].node);
18243: 					(yyval.sortby)->sortby_dir = SORTBY_USING;
18244: 					(yyval.sortby)->sortby_nulls = (yyvsp[(4) - (4)].nullorder);
18245: 					(yyval.sortby)->useOp = (yyvsp[(3) - (4)].list);
18246: 					(yyval.sortby)->location = (yylsp[(3) - (4)]);
18247: 				;}
18248:     break;
18249: 
18250:   case 480:
18251: #line 390 "third_party/libpg_query/grammar/statements/select.y"
18252:     {
18253: 					(yyval.sortby) = makeNode(PGSortBy);
18254: 					(yyval.sortby)->node = (yyvsp[(1) - (3)].node);
18255: 					(yyval.sortby)->sortby_dir = (yyvsp[(2) - (3)].sortorder);
18256: 					(yyval.sortby)->sortby_nulls = (yyvsp[(3) - (3)].nullorder);
18257: 					(yyval.sortby)->useOp = NIL;
18258: 					(yyval.sortby)->location = -1;		/* no operator */
18259: 				;}
18260:     break;
18261: 
18262:   case 481:
18263: #line 400 "third_party/libpg_query/grammar/statements/select.y"
18264:     { (yyval.sortorder) = PG_SORTBY_ASC; ;}
18265:     break;
18266: 
18267:   case 482:
18268: #line 401 "third_party/libpg_query/grammar/statements/select.y"
18269:     { (yyval.sortorder) = PG_SORTBY_DESC; ;}
18270:     break;
18271: 
18272:   case 483:
18273: #line 402 "third_party/libpg_query/grammar/statements/select.y"
18274:     { (yyval.sortorder) = PG_SORTBY_DEFAULT; ;}
18275:     break;
18276: 
18277:   case 484:
18278: #line 405 "third_party/libpg_query/grammar/statements/select.y"
18279:     { (yyval.nullorder) = PG_SORTBY_NULLS_FIRST; ;}
18280:     break;
18281: 
18282:   case 485:
18283: #line 406 "third_party/libpg_query/grammar/statements/select.y"
18284:     { (yyval.nullorder) = PG_SORTBY_NULLS_LAST; ;}
18285:     break;
18286: 
18287:   case 486:
18288: #line 407 "third_party/libpg_query/grammar/statements/select.y"
18289:     { (yyval.nullorder) = PG_SORTBY_NULLS_DEFAULT; ;}
18290:     break;
18291: 
18292:   case 487:
18293: #line 411 "third_party/libpg_query/grammar/statements/select.y"
18294:     { (yyval.list) = list_make2((yyvsp[(2) - (2)].node), (yyvsp[(1) - (2)].node)); ;}
18295:     break;
18296: 
18297:   case 488:
18298: #line 412 "third_party/libpg_query/grammar/statements/select.y"
18299:     { (yyval.list) = list_make2((yyvsp[(1) - (2)].node), (yyvsp[(2) - (2)].node)); ;}
18300:     break;
18301: 
18302:   case 489:
18303: #line 413 "third_party/libpg_query/grammar/statements/select.y"
18304:     { (yyval.list) = list_make2(NULL, (yyvsp[(1) - (1)].node)); ;}
18305:     break;
18306: 
18307:   case 490:
18308: #line 414 "third_party/libpg_query/grammar/statements/select.y"
18309:     { (yyval.list) = list_make2((yyvsp[(1) - (1)].node), NULL); ;}
18310:     break;
18311: 
18312:   case 491:
18313: #line 418 "third_party/libpg_query/grammar/statements/select.y"
18314:     { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
18315:     break;
18316: 
18317:   case 492:
18318: #line 419 "third_party/libpg_query/grammar/statements/select.y"
18319:     { (yyval.list) = list_make2(NULL,NULL); ;}
18320:     break;
18321: 
18322:   case 493:
18323: #line 424 "third_party/libpg_query/grammar/statements/select.y"
18324:     { (yyval.node) = (yyvsp[(2) - (2)].node); ;}
18325:     break;
18326: 
18327:   case 494:
18328: #line 426 "third_party/libpg_query/grammar/statements/select.y"
18329:     {
18330: 					/* Disabled because it was too confusing, bjm 2002-02-18 */
18331: 					ereport(ERROR,
18332: 							(errcode(PG_ERRCODE_SYNTAX_ERROR),
18333: 							 errmsg("LIMIT #,# syntax is not supported"),
18334: 							 errhint("Use separate LIMIT and OFFSET clauses."),
18335: 							 parser_errposition((yylsp[(1) - (4)]))));
18336: 				;}
18337:     break;
18338: 
18339:   case 495:
18340: #line 442 "third_party/libpg_query/grammar/statements/select.y"
18341:     { (yyval.node) = (yyvsp[(3) - (5)].node); ;}
18342:     break;
18343: 
18344:   case 496:
18345: #line 444 "third_party/libpg_query/grammar/statements/select.y"
18346:     { (yyval.node) = makeIntConst(1, -1); ;}
18347:     break;
18348: 
18349:   case 497:
18350: #line 449 "third_party/libpg_query/grammar/statements/select.y"
18351:     { (yyval.node) = (yyvsp[(2) - (2)].node); ;}
18352:     break;
18353: 
18354:   case 498:
18355: #line 452 "third_party/libpg_query/grammar/statements/select.y"
18356:     { (yyval.node) = (yyvsp[(2) - (3)].node); ;}
18357:     break;
18358: 
18359:   case 499:
18360: #line 460 "third_party/libpg_query/grammar/statements/select.y"
18361:     {
18362: 			(yyval.node) = makeSampleSize(makeFloat((yyvsp[(1) - (2)].str)), true);
18363: 		;}
18364:     break;
18365: 
18366:   case 500:
18367: #line 464 "third_party/libpg_query/grammar/statements/select.y"
18368:     {
18369: 			(yyval.node) = makeSampleSize(makeInteger((yyvsp[(1) - (2)].ival)), true);
18370: 		;}
18371:     break;
18372: 
18373:   case 501:
18374: #line 468 "third_party/libpg_query/grammar/statements/select.y"
18375:     {
18376: 			(yyval.node) = makeSampleSize(makeFloat((yyvsp[(1) - (2)].str)), true);
18377: 		;}
18378:     break;
18379: 
18380:   case 502:
18381: #line 472 "third_party/libpg_query/grammar/statements/select.y"
18382:     {
18383: 			(yyval.node) = makeSampleSize(makeInteger((yyvsp[(1) - (2)].ival)), true);
18384: 		;}
18385:     break;
18386: 
18387:   case 503:
18388: #line 476 "third_party/libpg_query/grammar/statements/select.y"
18389:     {
18390: 			(yyval.node) = makeSampleSize(makeInteger((yyvsp[(1) - (1)].ival)), false);
18391: 		;}
18392:     break;
18393: 
18394:   case 504:
18395: #line 480 "third_party/libpg_query/grammar/statements/select.y"
18396:     {
18397: 			(yyval.node) = makeSampleSize(makeInteger((yyvsp[(1) - (2)].ival)), false);
18398: 		;}
18399:     break;
18400: 
18401:   case 505:
18402: #line 487 "third_party/libpg_query/grammar/statements/select.y"
18403:     {
18404: 					(yyval.node) = (yyvsp[(3) - (3)].node);
18405: 				;}
18406:     break;
18407: 
18408:   case 506:
18409: #line 491 "third_party/libpg_query/grammar/statements/select.y"
18410:     { (yyval.node) = NULL; ;}
18411:     break;
18412: 
18413:   case 507:
18414: #line 498 "third_party/libpg_query/grammar/statements/select.y"
18415:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
18416:     break;
18417: 
18418:   case 508:
18419: #line 499 "third_party/libpg_query/grammar/statements/select.y"
18420:     { (yyval.str) = NULL; ;}
18421:     break;
18422: 
18423:   case 509:
18424: #line 504 "third_party/libpg_query/grammar/statements/select.y"
18425:     {
18426: 					(yyval.node) = makeSampleOptions((yyvsp[(3) - (5)].node), (yyvsp[(1) - (5)].str), (yyvsp[(5) - (5)].ival), (yylsp[(1) - (5)]));
18427: 				;}
18428:     break;
18429: 
18430:   case 510:
18431: #line 508 "third_party/libpg_query/grammar/statements/select.y"
18432:     {
18433: 			(yyval.node) = makeSampleOptions((yyvsp[(1) - (1)].node), NULL, -1, (yylsp[(1) - (1)]));
18434: 		;}
18435:     break;
18436: 
18437:   case 511:
18438: #line 512 "third_party/libpg_query/grammar/statements/select.y"
18439:     {
18440: 			(yyval.node) = makeSampleOptions((yyvsp[(1) - (4)].node), (yyvsp[(3) - (4)].str), -1, (yylsp[(1) - (4)]));
18441: 		;}
18442:     break;
18443: 
18444:   case 512:
18445: #line 516 "third_party/libpg_query/grammar/statements/select.y"
18446:     {
18447: 			(yyval.node) = makeSampleOptions((yyvsp[(1) - (6)].node), (yyvsp[(3) - (6)].str), (yyvsp[(5) - (6)].ival), (yylsp[(1) - (6)]));
18448: 		;}
18449:     break;
18450: 
18451:   case 513:
18452: #line 523 "third_party/libpg_query/grammar/statements/select.y"
18453:     {
18454: 					(yyval.node) = (yyvsp[(2) - (2)].node);
18455: 				;}
18456:     break;
18457: 
18458:   case 514:
18459: #line 529 "third_party/libpg_query/grammar/statements/select.y"
18460:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
18461:     break;
18462: 
18463:   case 515:
18464: #line 530 "third_party/libpg_query/grammar/statements/select.y"
18465:     { (yyval.node) = NULL; ;}
18466:     break;
18467: 
18468:   case 516:
18469: #line 535 "third_party/libpg_query/grammar/statements/select.y"
18470:     { (yyval.ival) = (yyvsp[(3) - (4)].ival); ;}
18471:     break;
18472: 
18473:   case 517:
18474: #line 536 "third_party/libpg_query/grammar/statements/select.y"
18475:     { (yyval.ival) = -1; ;}
18476:     break;
18477: 
18478:   case 518:
18479: #line 540 "third_party/libpg_query/grammar/statements/select.y"
18480:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
18481:     break;
18482: 
18483:   case 519:
18484: #line 542 "third_party/libpg_query/grammar/statements/select.y"
18485:     {
18486: 					/* LIMIT ALL is represented as a NULL constant */
18487: 					(yyval.node) = makeNullAConst((yylsp[(1) - (1)]));
18488: 				;}
18489:     break;
18490: 
18491:   case 520:
18492: #line 549 "third_party/libpg_query/grammar/statements/select.y"
18493:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
18494:     break;
18495: 
18496:   case 521:
18497: #line 569 "third_party/libpg_query/grammar/statements/select.y"
18498:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
18499:     break;
18500: 
18501:   case 522:
18502: #line 571 "third_party/libpg_query/grammar/statements/select.y"
18503:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[(2) - (2)].node), (yylsp[(1) - (2)])); ;}
18504:     break;
18505: 
18506:   case 523:
18507: #line 573 "third_party/libpg_query/grammar/statements/select.y"
18508:     { (yyval.node) = doNegate((yyvsp[(2) - (2)].node), (yylsp[(1) - (2)])); ;}
18509:     break;
18510: 
18511:   case 524:
18512: #line 577 "third_party/libpg_query/grammar/statements/select.y"
18513:     { (yyval.node) = makeIntConst((yyvsp[(1) - (1)].ival),(yylsp[(1) - (1)])); ;}
18514:     break;
18515: 
18516:   case 525:
18517: #line 578 "third_party/libpg_query/grammar/statements/select.y"
18518:     { (yyval.node) = makeFloatConst((yyvsp[(1) - (1)].str),(yylsp[(1) - (1)])); ;}
18519:     break;
18520: 
18521:   case 526:
18522: #line 582 "third_party/libpg_query/grammar/statements/select.y"
18523:     { (yyval.ival) = 0; ;}
18524:     break;
18525: 
18526:   case 527:
18527: #line 583 "third_party/libpg_query/grammar/statements/select.y"
18528:     { (yyval.ival) = 0; ;}
18529:     break;
18530: 
18531:   case 528:
18532: #line 586 "third_party/libpg_query/grammar/statements/select.y"
18533:     { (yyval.ival) = 0; ;}
18534:     break;
18535: 
18536:   case 529:
18537: #line 587 "third_party/libpg_query/grammar/statements/select.y"
18538:     { (yyval.ival) = 0; ;}
18539:     break;
18540: 
18541:   case 530:
18542: #line 612 "third_party/libpg_query/grammar/statements/select.y"
18543:     { (yyval.list) = (yyvsp[(3) - (3)].list); ;}
18544:     break;
18545: 
18546:   case 531:
18547: #line 613 "third_party/libpg_query/grammar/statements/select.y"
18548:     { (yyval.list) = NIL; ;}
18549:     break;
18550: 
18551:   case 532:
18552: #line 617 "third_party/libpg_query/grammar/statements/select.y"
18553:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].node)); ;}
18554:     break;
18555: 
18556:   case 533:
18557: #line 618 "third_party/libpg_query/grammar/statements/select.y"
18558:     { (yyval.list) = lappend((yyvsp[(1) - (3)].list),(yyvsp[(3) - (3)].node)); ;}
18559:     break;
18560: 
18561:   case 534:
18562: #line 622 "third_party/libpg_query/grammar/statements/select.y"
18563:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
18564:     break;
18565: 
18566:   case 535:
18567: #line 623 "third_party/libpg_query/grammar/statements/select.y"
18568:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
18569:     break;
18570: 
18571:   case 536:
18572: #line 628 "third_party/libpg_query/grammar/statements/select.y"
18573:     {
18574: 					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_EMPTY, NIL, (yylsp[(1) - (2)]));
18575: 				;}
18576:     break;
18577: 
18578:   case 537:
18579: #line 640 "third_party/libpg_query/grammar/statements/select.y"
18580:     { (yyval.node) = (yyvsp[(2) - (2)].node); ;}
18581:     break;
18582: 
18583:   case 538:
18584: #line 641 "third_party/libpg_query/grammar/statements/select.y"
18585:     { (yyval.node) = NULL; ;}
18586:     break;
18587: 
18588:   case 539:
18589: #line 645 "third_party/libpg_query/grammar/statements/select.y"
18590:     { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
18591:     break;
18592: 
18593:   case 540:
18594: #line 646 "third_party/libpg_query/grammar/statements/select.y"
18595:     { (yyval.list) = NIL; ;}
18596:     break;
18597: 
18598:   case 541:
18599: #line 650 "third_party/libpg_query/grammar/statements/select.y"
18600:     { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
18601:     break;
18602: 
18603:   case 542:
18604: #line 651 "third_party/libpg_query/grammar/statements/select.y"
18605:     { (yyval.list) = NIL; ;}
18606:     break;
18607: 
18608:   case 543:
18609: #line 655 "third_party/libpg_query/grammar/statements/select.y"
18610:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].node)); ;}
18611:     break;
18612: 
18613:   case 544:
18614: #line 656 "third_party/libpg_query/grammar/statements/select.y"
18615:     { (yyval.list) = lappend((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].node)); ;}
18616:     break;
18617: 
18618:   case 545:
18619: #line 661 "third_party/libpg_query/grammar/statements/select.y"
18620:     {
18621: 					PGLockingClause *n = makeNode(PGLockingClause);
18622: 					n->lockedRels = (yyvsp[(2) - (3)].list);
18623: 					n->strength = (yyvsp[(1) - (3)].lockstrength);
18624: 					n->waitPolicy = (yyvsp[(3) - (3)].lockwaitpolicy);
18625: 					(yyval.node) = (PGNode *) n;
18626: 				;}
18627:     break;
18628: 
18629:   case 546:
18630: #line 671 "third_party/libpg_query/grammar/statements/select.y"
18631:     { (yyval.lockstrength) = LCS_FORUPDATE; ;}
18632:     break;
18633: 
18634:   case 547:
18635: #line 672 "third_party/libpg_query/grammar/statements/select.y"
18636:     { (yyval.lockstrength) = PG_LCS_FORNOKEYUPDATE; ;}
18637:     break;
18638: 
18639:   case 548:
18640: #line 673 "third_party/libpg_query/grammar/statements/select.y"
18641:     { (yyval.lockstrength) = PG_LCS_FORSHARE; ;}
18642:     break;
18643: 
18644:   case 549:
18645: #line 674 "third_party/libpg_query/grammar/statements/select.y"
18646:     { (yyval.lockstrength) = PG_LCS_FORKEYSHARE; ;}
18647:     break;
18648: 
18649:   case 550:
18650: #line 678 "third_party/libpg_query/grammar/statements/select.y"
18651:     { (yyval.list) = (yyvsp[(2) - (2)].list); ;}
18652:     break;
18653: 
18654:   case 551:
18655: #line 679 "third_party/libpg_query/grammar/statements/select.y"
18656:     { (yyval.list) = NIL; ;}
18657:     break;
18658: 
18659:   case 552:
18660: #line 684 "third_party/libpg_query/grammar/statements/select.y"
18661:     { (yyval.lockwaitpolicy) = LockWaitError; ;}
18662:     break;
18663: 
18664:   case 553:
18665: #line 685 "third_party/libpg_query/grammar/statements/select.y"
18666:     { (yyval.lockwaitpolicy) = PGLockWaitSkip; ;}
18667:     break;
18668: 
18669:   case 554:
18670: #line 686 "third_party/libpg_query/grammar/statements/select.y"
18671:     { (yyval.lockwaitpolicy) = PGLockWaitBlock; ;}
18672:     break;
18673: 
18674:   case 555:
18675: #line 696 "third_party/libpg_query/grammar/statements/select.y"
18676:     {
18677: 					PGSelectStmt *n = makeNode(PGSelectStmt);
18678: 					n->valuesLists = list_make1((yyvsp[(3) - (4)].list));
18679: 					(yyval.node) = (PGNode *) n;
18680: 				;}
18681:     break;
18682: 
18683:   case 556:
18684: #line 702 "third_party/libpg_query/grammar/statements/select.y"
18685:     {
18686: 					PGSelectStmt *n = (PGSelectStmt *) (yyvsp[(1) - (5)].node);
18687: 					n->valuesLists = lappend(n->valuesLists, (yyvsp[(4) - (5)].list));
18688: 					(yyval.node) = (PGNode *) n;
18689: 				;}
18690:     break;
18691: 
18692:   case 557:
18693: #line 719 "third_party/libpg_query/grammar/statements/select.y"
18694:     { (yyval.list) = (yyvsp[(2) - (2)].list); ;}
18695:     break;
18696: 
18697:   case 558:
18698: #line 720 "third_party/libpg_query/grammar/statements/select.y"
18699:     { (yyval.list) = NIL; ;}
18700:     break;
18701: 
18702:   case 559:
18703: #line 724 "third_party/libpg_query/grammar/statements/select.y"
18704:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].node)); ;}
18705:     break;
18706: 
18707:   case 560:
18708: #line 725 "third_party/libpg_query/grammar/statements/select.y"
18709:     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node)); ;}
18710:     break;
18711: 
18712:   case 561:
18713: #line 732 "third_party/libpg_query/grammar/statements/select.y"
18714:     {
18715: 					(yyvsp[(1) - (3)].range)->alias = (yyvsp[(2) - (3)].alias);
18716: 					(yyvsp[(1) - (3)].range)->sample = (yyvsp[(3) - (3)].node);
18717: 					(yyval.node) = (PGNode *) (yyvsp[(1) - (3)].range);
18718: 				;}
18719:     break;
18720: 
18721:   case 562:
18722: #line 738 "third_party/libpg_query/grammar/statements/select.y"
18723:     {
18724: 					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[(1) - (3)].node);
18725: 					n->alias = (PGAlias*) linitial((yyvsp[(2) - (3)].list));
18726: 					n->coldeflist = (PGList*) lsecond((yyvsp[(2) - (3)].list));
18727: 					n->sample = (yyvsp[(3) - (3)].node);
18728: 					(yyval.node) = (PGNode *) n;
18729: 				;}
18730:     break;
18731: 
18732:   case 563:
18733: #line 746 "third_party/libpg_query/grammar/statements/select.y"
18734:     {
18735: 					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[(2) - (3)].node);
18736: 					n->lateral = true;
18737: 					n->alias = (PGAlias*) linitial((yyvsp[(3) - (3)].list));
18738: 					n->coldeflist = (PGList*) lsecond((yyvsp[(3) - (3)].list));
18739: 					(yyval.node) = (PGNode *) n;
18740: 				;}
18741:     break;
18742: 
18743:   case 564:
18744: #line 754 "third_party/libpg_query/grammar/statements/select.y"
18745:     {
18746: 					PGRangeSubselect *n = makeNode(PGRangeSubselect);
18747: 					n->lateral = false;
18748: 					n->subquery = (yyvsp[(1) - (3)].node);
18749: 					n->alias = (yyvsp[(2) - (3)].alias);
18750: 					n->sample = (yyvsp[(3) - (3)].node);
18751: 					/*
18752: 					 * The SQL spec does not permit a subselect
18753: 					 * (<derived_table>) without an alias clause,
18754: 					 * so we don't either.  This avoids the problem
18755: 					 * of needing to invent a unique refname for it.
18756: 					 * That could be surmounted if there's sufficient
18757: 					 * popular demand, but for now let's just implement
18758: 					 * the spec and see if anyone complains.
18759: 					 * However, it does seem like a good idea to emit
18760: 					 * an error message that's better than "syntax error".
18761: 					 */
18762: 					if ((yyvsp[(2) - (3)].alias) == NULL)
18763: 					{
18764: 						if (IsA((yyvsp[(1) - (3)].node), PGSelectStmt) &&
18765: 							((PGSelectStmt *) (yyvsp[(1) - (3)].node))->valuesLists)
18766: 							ereport(ERROR,
18767: 									(errcode(PG_ERRCODE_SYNTAX_ERROR),
18768: 									 errmsg("VALUES in FROM must have an alias"),
18769: 									 errhint("For example, FROM (VALUES ...) [AS] foo."),
18770: 									 parser_errposition((yylsp[(1) - (3)]))));
18771: 						else
18772: 							ereport(ERROR,
18773: 									(errcode(PG_ERRCODE_SYNTAX_ERROR),
18774: 									 errmsg("subquery in FROM must have an alias"),
18775: 									 errhint("For example, FROM (SELECT ...) [AS] foo."),
18776: 									 parser_errposition((yylsp[(1) - (3)]))));
18777: 					}
18778: 					(yyval.node) = (PGNode *) n;
18779: 				;}
18780:     break;
18781: 
18782:   case 565:
18783: #line 790 "third_party/libpg_query/grammar/statements/select.y"
18784:     {
18785: 					PGRangeSubselect *n = makeNode(PGRangeSubselect);
18786: 					n->lateral = true;
18787: 					n->subquery = (yyvsp[(2) - (3)].node);
18788: 					n->alias = (yyvsp[(3) - (3)].alias);
18789: 					n->sample = NULL;
18790: 					/* same comment as above */
18791: 					if ((yyvsp[(3) - (3)].alias) == NULL)
18792: 					{
18793: 						if (IsA((yyvsp[(2) - (3)].node), PGSelectStmt) &&
18794: 							((PGSelectStmt *) (yyvsp[(2) - (3)].node))->valuesLists)
18795: 							ereport(ERROR,
18796: 									(errcode(PG_ERRCODE_SYNTAX_ERROR),
18797: 									 errmsg("VALUES in FROM must have an alias"),
18798: 									 errhint("For example, FROM (VALUES ...) [AS] foo."),
18799: 									 parser_errposition((yylsp[(2) - (3)]))));
18800: 						else
18801: 							ereport(ERROR,
18802: 									(errcode(PG_ERRCODE_SYNTAX_ERROR),
18803: 									 errmsg("subquery in FROM must have an alias"),
18804: 									 errhint("For example, FROM (SELECT ...) [AS] foo."),
18805: 									 parser_errposition((yylsp[(2) - (3)]))));
18806: 					}
18807: 					(yyval.node) = (PGNode *) n;
18808: 				;}
18809:     break;
18810: 
18811:   case 566:
18812: #line 816 "third_party/libpg_query/grammar/statements/select.y"
18813:     {
18814: 					(yyval.node) = (PGNode *) (yyvsp[(1) - (1)].jexpr);
18815: 				;}
18816:     break;
18817: 
18818:   case 567:
18819: #line 820 "third_party/libpg_query/grammar/statements/select.y"
18820:     {
18821: 					(yyvsp[(2) - (4)].jexpr)->alias = (yyvsp[(4) - (4)].alias);
18822: 					(yyval.node) = (PGNode *) (yyvsp[(2) - (4)].jexpr);
18823: 				;}
18824:     break;
18825: 
18826:   case 568:
18827: #line 846 "third_party/libpg_query/grammar/statements/select.y"
18828:     {
18829: 					(yyval.jexpr) = (yyvsp[(2) - (3)].jexpr);
18830: 				;}
18831:     break;
18832: 
18833:   case 569:
18834: #line 850 "third_party/libpg_query/grammar/statements/select.y"
18835:     {
18836: 					/* CROSS JOIN is same as unqualified inner join */
18837: 					PGJoinExpr *n = makeNode(PGJoinExpr);
18838: 					n->jointype = PG_JOIN_INNER;
18839: 					n->isNatural = false;
18840: 					n->larg = (yyvsp[(1) - (4)].node);
18841: 					n->rarg = (yyvsp[(4) - (4)].node);
18842: 					n->usingClause = NIL;
18843: 					n->quals = NULL;
18844: 					n->location = (yylsp[(2) - (4)]);
18845: 					(yyval.jexpr) = n;
18846: 				;}
18847:     break;
18848: 
18849:   case 570:
18850: #line 863 "third_party/libpg_query/grammar/statements/select.y"
18851:     {
18852: 					PGJoinExpr *n = makeNode(PGJoinExpr);
18853: 					n->jointype = (yyvsp[(2) - (5)].jtype);
18854: 					n->isNatural = false;
18855: 					n->larg = (yyvsp[(1) - (5)].node);
18856: 					n->rarg = (yyvsp[(4) - (5)].node);
18857: 					if ((yyvsp[(5) - (5)].node) != NULL && IsA((yyvsp[(5) - (5)].node), PGList))
18858: 						n->usingClause = (PGList *) (yyvsp[(5) - (5)].node); /* USING clause */
18859: 					else
18860: 						n->quals = (yyvsp[(5) - (5)].node); /* ON clause */
18861: 					n->location = (yylsp[(2) - (5)]);
18862: 					(yyval.jexpr) = n;
18863: 				;}
18864:     break;
18865: 
18866:   case 571:
18867: #line 877 "third_party/libpg_query/grammar/statements/select.y"
18868:     {
18869: 					/* letting join_type reduce to empty doesn't work */
18870: 					PGJoinExpr *n = makeNode(PGJoinExpr);
18871: 					n->jointype = PG_JOIN_INNER;
18872: 					n->isNatural = false;
18873: 					n->larg = (yyvsp[(1) - (4)].node);
18874: 					n->rarg = (yyvsp[(3) - (4)].node);
18875: 					if ((yyvsp[(4) - (4)].node) != NULL && IsA((yyvsp[(4) - (4)].node), PGList))
18876: 						n->usingClause = (PGList *) (yyvsp[(4) - (4)].node); /* USING clause */
18877: 					else
18878: 						n->quals = (yyvsp[(4) - (4)].node); /* ON clause */
18879: 					n->location = (yylsp[(2) - (4)]);
18880: 					(yyval.jexpr) = n;
18881: 				;}
18882:     break;
18883: 
18884:   case 572:
18885: #line 892 "third_party/libpg_query/grammar/statements/select.y"
18886:     {
18887: 					PGJoinExpr *n = makeNode(PGJoinExpr);
18888: 					n->jointype = (yyvsp[(3) - (5)].jtype);
18889: 					n->isNatural = true;
18890: 					n->larg = (yyvsp[(1) - (5)].node);
18891: 					n->rarg = (yyvsp[(5) - (5)].node);
18892: 					n->usingClause = NIL; /* figure out which columns later... */
18893: 					n->quals = NULL; /* fill later */
18894: 					n->location = (yylsp[(2) - (5)]);
18895: 					(yyval.jexpr) = n;
18896: 				;}
18897:     break;
18898: 
18899:   case 573:
18900: #line 904 "third_party/libpg_query/grammar/statements/select.y"
18901:     {
18902: 					/* letting join_type reduce to empty doesn't work */
18903: 					PGJoinExpr *n = makeNode(PGJoinExpr);
18904: 					n->jointype = PG_JOIN_INNER;
18905: 					n->isNatural = true;
18906: 					n->larg = (yyvsp[(1) - (4)].node);
18907: 					n->rarg = (yyvsp[(4) - (4)].node);
18908: 					n->usingClause = NIL; /* figure out which columns later... */
18909: 					n->quals = NULL; /* fill later */
18910: 					n->location = (yylsp[(2) - (4)]);
18911: 					(yyval.jexpr) = n;
18912: 				;}
18913:     break;
18914: 
18915:   case 574:
18916: #line 920 "third_party/libpg_query/grammar/statements/select.y"
18917:     {
18918: 					(yyval.alias) = makeNode(PGAlias);
18919: 					(yyval.alias)->aliasname = (yyvsp[(2) - (5)].str);
18920: 					(yyval.alias)->colnames = (yyvsp[(4) - (5)].list);
18921: 				;}
18922:     break;
18923: 
18924:   case 575:
18925: #line 926 "third_party/libpg_query/grammar/statements/select.y"
18926:     {
18927: 					(yyval.alias) = makeNode(PGAlias);
18928: 					(yyval.alias)->aliasname = (yyvsp[(2) - (2)].str);
18929: 				;}
18930:     break;
18931: 
18932:   case 576:
18933: #line 931 "third_party/libpg_query/grammar/statements/select.y"
18934:     {
18935: 					(yyval.alias) = makeNode(PGAlias);
18936: 					(yyval.alias)->aliasname = (yyvsp[(1) - (4)].str);
18937: 					(yyval.alias)->colnames = (yyvsp[(3) - (4)].list);
18938: 				;}
18939:     break;
18940: 
18941:   case 577:
18942: #line 937 "third_party/libpg_query/grammar/statements/select.y"
18943:     {
18944: 					(yyval.alias) = makeNode(PGAlias);
18945: 					(yyval.alias)->aliasname = (yyvsp[(1) - (1)].str);
18946: 				;}
18947:     break;
18948: 
18949:   case 578:
18950: #line 943 "third_party/libpg_query/grammar/statements/select.y"
18951:     { (yyval.alias) = (yyvsp[(1) - (1)].alias); ;}
18952:     break;
18953: 
18954:   case 579:
18955: #line 944 "third_party/libpg_query/grammar/statements/select.y"
18956:     { (yyval.alias) = NULL; ;}
18957:     break;
18958: 
18959:   case 580:
18960: #line 953 "third_party/libpg_query/grammar/statements/select.y"
18961:     {
18962: 					(yyval.list) = list_make2((yyvsp[(1) - (1)].alias), NIL);
18963: 				;}
18964:     break;
18965: 
18966:   case 581:
18967: #line 957 "third_party/libpg_query/grammar/statements/select.y"
18968:     {
18969: 					(yyval.list) = list_make2(NULL, (yyvsp[(3) - (4)].list));
18970: 				;}
18971:     break;
18972: 
18973:   case 582:
18974: #line 961 "third_party/libpg_query/grammar/statements/select.y"
18975:     {
18976: 					PGAlias *a = makeNode(PGAlias);
18977: 					a->aliasname = (yyvsp[(2) - (5)].str);
18978: 					(yyval.list) = list_make2(a, (yyvsp[(4) - (5)].list));
18979: 				;}
18980:     break;
18981: 
18982:   case 583:
18983: #line 967 "third_party/libpg_query/grammar/statements/select.y"
18984:     {
18985: 					PGAlias *a = makeNode(PGAlias);
18986: 					a->aliasname = (yyvsp[(1) - (4)].str);
18987: 					(yyval.list) = list_make2(a, (yyvsp[(3) - (4)].list));
18988: 				;}
18989:     break;
18990: 
18991:   case 584:
18992: #line 973 "third_party/libpg_query/grammar/statements/select.y"
18993:     {
18994: 					(yyval.list) = list_make2(NULL, NIL);
18995: 				;}
18996:     break;
18997: 
18998:   case 585:
18999: #line 978 "third_party/libpg_query/grammar/statements/select.y"
19000:     { (yyval.jtype) = PG_JOIN_FULL; ;}
19001:     break;
19002: 
19003:   case 586:
19004: #line 979 "third_party/libpg_query/grammar/statements/select.y"
19005:     { (yyval.jtype) = PG_JOIN_LEFT; ;}
19006:     break;
19007: 
19008:   case 587:
19009: #line 980 "third_party/libpg_query/grammar/statements/select.y"
19010:     { (yyval.jtype) = PG_JOIN_RIGHT; ;}
19011:     break;
19012: 
19013:   case 588:
19014: #line 981 "third_party/libpg_query/grammar/statements/select.y"
19015:     { (yyval.jtype) = PG_JOIN_INNER; ;}
19016:     break;
19017: 
19018:   case 589:
19019: #line 985 "third_party/libpg_query/grammar/statements/select.y"
19020:     { (yyval.node) = NULL; ;}
19021:     break;
19022: 
19023:   case 590:
19024: #line 986 "third_party/libpg_query/grammar/statements/select.y"
19025:     { (yyval.node) = NULL; ;}
19026:     break;
19027: 
19028:   case 591:
19029: #line 998 "third_party/libpg_query/grammar/statements/select.y"
19030:     { (yyval.node) = (PGNode *) (yyvsp[(3) - (4)].list); ;}
19031:     break;
19032: 
19033:   case 592:
19034: #line 999 "third_party/libpg_query/grammar/statements/select.y"
19035:     { (yyval.node) = (yyvsp[(2) - (2)].node); ;}
19036:     break;
19037: 
19038:   case 593:
19039: #line 1005 "third_party/libpg_query/grammar/statements/select.y"
19040:     {
19041: 					/* inheritance query, implicitly */
19042: 					(yyval.range) = (yyvsp[(1) - (1)].range);
19043: 					(yyval.range)->inh = true;
19044: 					(yyval.range)->alias = NULL;
19045: 				;}
19046:     break;
19047: 
19048:   case 594:
19049: #line 1012 "third_party/libpg_query/grammar/statements/select.y"
19050:     {
19051: 					/* inheritance query, explicitly */
19052: 					(yyval.range) = (yyvsp[(1) - (2)].range);
19053: 					(yyval.range)->inh = true;
19054: 					(yyval.range)->alias = NULL;
19055: 				;}
19056:     break;
19057: 
19058:   case 595:
19059: #line 1019 "third_party/libpg_query/grammar/statements/select.y"
19060:     {
19061: 					/* no inheritance */
19062: 					(yyval.range) = (yyvsp[(2) - (2)].range);
19063: 					(yyval.range)->inh = false;
19064: 					(yyval.range)->alias = NULL;
19065: 				;}
19066:     break;
19067: 
19068:   case 596:
19069: #line 1026 "third_party/libpg_query/grammar/statements/select.y"
19070:     {
19071: 					/* no inheritance, SQL99-style syntax */
19072: 					(yyval.range) = (yyvsp[(3) - (4)].range);
19073: 					(yyval.range)->inh = false;
19074: 					(yyval.range)->alias = NULL;
19075: 				;}
19076:     break;
19077: 
19078:   case 597:
19079: #line 1058 "third_party/libpg_query/grammar/statements/select.y"
19080:     {
19081: 					PGRangeFunction *n = makeNode(PGRangeFunction);
19082: 					n->lateral = false;
19083: 					n->ordinality = (yyvsp[(2) - (2)].boolean);
19084: 					n->is_rowsfrom = false;
19085: 					n->functions = list_make1(list_make2((yyvsp[(1) - (2)].node), NIL));
19086: 					n->sample = NULL;
19087: 					/* alias and coldeflist are set by table_ref production */
19088: 					(yyval.node) = (PGNode *) n;
19089: 				;}
19090:     break;
19091: 
19092:   case 598:
19093: #line 1069 "third_party/libpg_query/grammar/statements/select.y"
19094:     {
19095: 					PGRangeFunction *n = makeNode(PGRangeFunction);
19096: 					n->lateral = false;
19097: 					n->ordinality = (yyvsp[(6) - (6)].boolean);
19098: 					n->is_rowsfrom = true;
19099: 					n->functions = (yyvsp[(4) - (6)].list);
19100: 					n->sample = NULL;
19101: 					/* alias and coldeflist are set by table_ref production */
19102: 					(yyval.node) = (PGNode *) n;
19103: 				;}
19104:     break;
19105: 
19106:   case 599:
19107: #line 1082 "third_party/libpg_query/grammar/statements/select.y"
19108:     { (yyval.list) = list_make2((yyvsp[(1) - (2)].node), (yyvsp[(2) - (2)].list)); ;}
19109:     break;
19110: 
19111:   case 600:
19112: #line 1086 "third_party/libpg_query/grammar/statements/select.y"
19113:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].list)); ;}
19114:     break;
19115: 
19116:   case 601:
19117: #line 1087 "third_party/libpg_query/grammar/statements/select.y"
19118:     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].list)); ;}
19119:     break;
19120: 
19121:   case 602:
19122: #line 1090 "third_party/libpg_query/grammar/statements/select.y"
19123:     { (yyval.list) = (yyvsp[(3) - (4)].list); ;}
19124:     break;
19125: 
19126:   case 603:
19127: #line 1091 "third_party/libpg_query/grammar/statements/select.y"
19128:     { (yyval.list) = NIL; ;}
19129:     break;
19130: 
19131:   case 604:
19132: #line 1094 "third_party/libpg_query/grammar/statements/select.y"
19133:     { (yyval.boolean) = true; ;}
19134:     break;
19135: 
19136:   case 605:
19137: #line 1095 "third_party/libpg_query/grammar/statements/select.y"
19138:     { (yyval.boolean) = false; ;}
19139:     break;
19140: 
19141:   case 606:
19142: #line 1100 "third_party/libpg_query/grammar/statements/select.y"
19143:     { (yyval.node) = (yyvsp[(2) - (2)].node); ;}
19144:     break;
19145: 
19146:   case 607:
19147: #line 1101 "third_party/libpg_query/grammar/statements/select.y"
19148:     { (yyval.node) = NULL; ;}
19149:     break;
19150: 
19151:   case 608:
19152: #line 1107 "third_party/libpg_query/grammar/statements/select.y"
19153:     {
19154: 					(yyval.list) = list_make1((yyvsp[(1) - (1)].node));
19155: 				;}
19156:     break;
19157: 
19158:   case 609:
19159: #line 1111 "third_party/libpg_query/grammar/statements/select.y"
19160:     {
19161: 					(yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node));
19162: 				;}
19163:     break;
19164: 
19165:   case 610:
19166: #line 1117 "third_party/libpg_query/grammar/statements/select.y"
19167:     {
19168: 					PGColumnDef *n = makeNode(PGColumnDef);
19169: 					n->colname = (yyvsp[(1) - (3)].str);
19170: 					n->typeName = (yyvsp[(2) - (3)].typnam);
19171: 					n->inhcount = 0;
19172: 					n->is_local = true;
19173: 					n->is_not_null = false;
19174: 					n->is_from_type = false;
19175: 					n->storage = 0;
19176: 					n->raw_default = NULL;
19177: 					n->cooked_default = NULL;
19178: 					n->collClause = (PGCollateClause *) (yyvsp[(3) - (3)].node);
19179: 					n->collOid = InvalidOid;
19180: 					n->constraints = NIL;
19181: 					n->location = (yylsp[(1) - (3)]);
19182: 					(yyval.node) = (PGNode *)n;
19183: 				;}
19184:     break;
19185: 
19186:   case 611:
19187: #line 1138 "third_party/libpg_query/grammar/statements/select.y"
19188:     {
19189: 					PGCollateClause *n = makeNode(PGCollateClause);
19190: 					n->arg = NULL;
19191: 					n->collname = (yyvsp[(2) - (2)].list);
19192: 					n->location = (yylsp[(1) - (2)]);
19193: 					(yyval.node) = (PGNode *) n;
19194: 				;}
19195:     break;
19196: 
19197:   case 612:
19198: #line 1145 "third_party/libpg_query/grammar/statements/select.y"
19199:     { (yyval.node) = NULL; ;}
19200:     break;
19201: 
19202:   case 613:
19203: #line 1158 "third_party/libpg_query/grammar/statements/select.y"
19204:     {
19205:              (yyval.list) = list_make1(list_make2(makeString((yyvsp[(1) - (2)].str)), (yyvsp[(2) - (2)].typnam)));
19206:             ;}
19207:     break;
19208: 
19209:   case 614:
19210: #line 1161 "third_party/libpg_query/grammar/statements/select.y"
19211:     {
19212:              (yyval.list) = lappend((yyvsp[(1) - (4)].list), list_make2(makeString((yyvsp[(3) - (4)].str)), (yyvsp[(4) - (4)].typnam)));
19213:             ;}
19214:     break;
19215: 
19216:   case 617:
19217: #line 1168 "third_party/libpg_query/grammar/statements/select.y"
19218:     {
19219: 					(yyval.typnam) = (yyvsp[(1) - (2)].typnam);
19220: 					(yyval.typnam)->arrayBounds = (yyvsp[(2) - (2)].list);
19221: 				;}
19222:     break;
19223: 
19224:   case 618:
19225: #line 1173 "third_party/libpg_query/grammar/statements/select.y"
19226:     {
19227: 					(yyval.typnam) = (yyvsp[(2) - (3)].typnam);
19228: 					(yyval.typnam)->arrayBounds = (yyvsp[(3) - (3)].list);
19229: 					(yyval.typnam)->setof = true;
19230: 				;}
19231:     break;
19232: 
19233:   case 619:
19234: #line 1180 "third_party/libpg_query/grammar/statements/select.y"
19235:     {
19236: 					(yyval.typnam) = (yyvsp[(1) - (5)].typnam);
19237: 					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[(4) - (5)].ival)));
19238: 				;}
19239:     break;
19240: 
19241:   case 620:
19242: #line 1185 "third_party/libpg_query/grammar/statements/select.y"
19243:     {
19244: 					(yyval.typnam) = (yyvsp[(2) - (6)].typnam);
19245: 					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[(5) - (6)].ival)));
19246: 					(yyval.typnam)->setof = true;
19247: 				;}
19248:     break;
19249: 
19250:   case 621:
19251: #line 1191 "third_party/libpg_query/grammar/statements/select.y"
19252:     {
19253: 					(yyval.typnam) = (yyvsp[(1) - (2)].typnam);
19254: 					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
19255: 				;}
19256:     break;
19257: 
19258:   case 622:
19259: #line 1196 "third_party/libpg_query/grammar/statements/select.y"
19260:     {
19261: 					(yyval.typnam) = (yyvsp[(2) - (3)].typnam);
19262: 					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
19263: 					(yyval.typnam)->setof = true;
19264: 				;}
19265:     break;
19266: 
19267:   case 623:
19268: #line 1201 "third_party/libpg_query/grammar/statements/select.y"
19269:     {
19270:                (yyval.typnam) = SystemTypeName("struct");
19271:                (yyval.typnam)->arrayBounds = (yyvsp[(5) - (5)].list);
19272:                (yyval.typnam)->typmods = (yyvsp[(3) - (5)].list);
19273:                (yyval.typnam)->location = (yylsp[(1) - (5)]);
19274:                ;}
19275:     break;
19276: 
19277:   case 624:
19278: #line 1207 "third_party/libpg_query/grammar/statements/select.y"
19279:     {
19280:                (yyval.typnam) = SystemTypeName("map");
19281:                (yyval.typnam)->arrayBounds = (yyvsp[(5) - (5)].list);
19282:                (yyval.typnam)->typmods = (yyvsp[(3) - (5)].list);
19283:                (yyval.typnam)->location = (yylsp[(1) - (5)]);
19284: 			;}
19285:     break;
19286: 
19287:   case 625:
19288: #line 1217 "third_party/libpg_query/grammar/statements/select.y"
19289:     {  (yyval.list) = lappend((yyvsp[(1) - (3)].list), makeInteger(-1)); ;}
19290:     break;
19291: 
19292:   case 626:
19293: #line 1219 "third_party/libpg_query/grammar/statements/select.y"
19294:     {  (yyval.list) = lappend((yyvsp[(1) - (4)].list), makeInteger((yyvsp[(3) - (4)].ival))); ;}
19295:     break;
19296: 
19297:   case 627:
19298: #line 1221 "third_party/libpg_query/grammar/statements/select.y"
19299:     {  (yyval.list) = NIL; ;}
19300:     break;
19301: 
19302:   case 628:
19303: #line 1225 "third_party/libpg_query/grammar/statements/select.y"
19304:     { (yyval.typnam) = (yyvsp[(1) - (1)].typnam); ;}
19305:     break;
19306: 
19307:   case 629:
19308: #line 1226 "third_party/libpg_query/grammar/statements/select.y"
19309:     { (yyval.typnam) = (yyvsp[(1) - (1)].typnam); ;}
19310:     break;
19311: 
19312:   case 630:
19313: #line 1227 "third_party/libpg_query/grammar/statements/select.y"
19314:     { (yyval.typnam) = (yyvsp[(1) - (1)].typnam); ;}
19315:     break;
19316: 
19317:   case 631:
19318: #line 1228 "third_party/libpg_query/grammar/statements/select.y"
19319:     { (yyval.typnam) = (yyvsp[(1) - (1)].typnam); ;}
19320:     break;
19321: 
19322:   case 632:
19323: #line 1229 "third_party/libpg_query/grammar/statements/select.y"
19324:     { (yyval.typnam) = (yyvsp[(1) - (1)].typnam); ;}
19325:     break;
19326: 
19327:   case 633:
19328: #line 1231 "third_party/libpg_query/grammar/statements/select.y"
19329:     {
19330: 					(yyval.typnam) = (yyvsp[(1) - (2)].typnam);
19331: 					(yyval.typnam)->typmods = (yyvsp[(2) - (2)].list);
19332: 				;}
19333:     break;
19334: 
19335:   case 634:
19336: #line 1236 "third_party/libpg_query/grammar/statements/select.y"
19337:     {
19338: 					(yyval.typnam) = (yyvsp[(1) - (4)].typnam);
19339: 					(yyval.typnam)->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
19340: 											 makeIntConst((yyvsp[(3) - (4)].ival), (yylsp[(3) - (4)])));
19341: 				;}
19342:     break;
19343: 
19344:   case 635:
19345: #line 1255 "third_party/libpg_query/grammar/statements/select.y"
19346:     { (yyval.typnam) = (yyvsp[(1) - (1)].typnam); ;}
19347:     break;
19348: 
19349:   case 636:
19350: #line 1256 "third_party/libpg_query/grammar/statements/select.y"
19351:     { (yyval.typnam) = (yyvsp[(1) - (1)].typnam); ;}
19352:     break;
19353: 
19354:   case 637:
19355: #line 1257 "third_party/libpg_query/grammar/statements/select.y"
19356:     { (yyval.typnam) = (yyvsp[(1) - (1)].typnam); ;}
19357:     break;
19358: 
19359:   case 638:
19360: #line 1258 "third_party/libpg_query/grammar/statements/select.y"
19361:     { (yyval.typnam) = (yyvsp[(1) - (1)].typnam); ;}
19362:     break;
19363: 
19364:   case 639:
19365: #line 1270 "third_party/libpg_query/grammar/statements/select.y"
19366:     {
19367: 					(yyval.typnam) = makeTypeName((yyvsp[(1) - (2)].str));
19368: 					(yyval.typnam)->typmods = (yyvsp[(2) - (2)].list);
19369: 					(yyval.typnam)->location = (yylsp[(1) - (2)]);
19370: 				;}
19371:     break;
19372: 
19373:   case 640:
19374: #line 1283 "third_party/libpg_query/grammar/statements/select.y"
19375:     { (yyval.list) = (yyvsp[(2) - (3)].list); ;}
19376:     break;
19377: 
19378:   case 641:
19379: #line 1284 "third_party/libpg_query/grammar/statements/select.y"
19380:     { (yyval.list) = NIL; ;}
19381:     break;
19382: 
19383:   case 642:
19384: #line 1291 "third_party/libpg_query/grammar/statements/select.y"
19385:     {
19386: 					(yyval.typnam) = SystemTypeName("int4");
19387: 					(yyval.typnam)->location = (yylsp[(1) - (1)]);
19388: 				;}
19389:     break;
19390: 
19391:   case 643:
19392: #line 1296 "third_party/libpg_query/grammar/statements/select.y"
19393:     {
19394: 					(yyval.typnam) = SystemTypeName("int4");
19395: 					(yyval.typnam)->location = (yylsp[(1) - (1)]);
19396: 				;}
19397:     break;
19398: 
19399:   case 644:
19400: #line 1301 "third_party/libpg_query/grammar/statements/select.y"
19401:     {
19402: 					(yyval.typnam) = SystemTypeName("int2");
19403: 					(yyval.typnam)->location = (yylsp[(1) - (1)]);
19404: 				;}
19405:     break;
19406: 
19407:   case 645:
19408: #line 1306 "third_party/libpg_query/grammar/statements/select.y"
19409:     {
19410: 					(yyval.typnam) = SystemTypeName("int8");
19411: 					(yyval.typnam)->location = (yylsp[(1) - (1)]);
19412: 				;}
19413:     break;
19414: 
19415:   case 646:
19416: #line 1311 "third_party/libpg_query/grammar/statements/select.y"
19417:     {
19418: 					(yyval.typnam) = SystemTypeName("float4");
19419: 					(yyval.typnam)->location = (yylsp[(1) - (1)]);
19420: 				;}
19421:     break;
19422: 
19423:   case 647:
19424: #line 1316 "third_party/libpg_query/grammar/statements/select.y"
19425:     {
19426: 					(yyval.typnam) = (yyvsp[(2) - (2)].typnam);
19427: 					(yyval.typnam)->location = (yylsp[(1) - (2)]);
19428: 				;}
19429:     break;
19430: 
19431:   case 648:
19432: #line 1321 "third_party/libpg_query/grammar/statements/select.y"
19433:     {
19434: 					(yyval.typnam) = SystemTypeName("float8");
19435: 					(yyval.typnam)->location = (yylsp[(1) - (2)]);
19436: 				;}
19437:     break;
19438: 
19439:   case 649:
19440: #line 1326 "third_party/libpg_query/grammar/statements/select.y"
19441:     {
19442: 					(yyval.typnam) = SystemTypeName("numeric");
19443: 					(yyval.typnam)->typmods = (yyvsp[(2) - (2)].list);
19444: 					(yyval.typnam)->location = (yylsp[(1) - (2)]);
19445: 				;}
19446:     break;
19447: 
19448:   case 650:
19449: #line 1332 "third_party/libpg_query/grammar/statements/select.y"
19450:     {
19451: 					(yyval.typnam) = SystemTypeName("numeric");
19452: 					(yyval.typnam)->typmods = (yyvsp[(2) - (2)].list);
19453: 					(yyval.typnam)->location = (yylsp[(1) - (2)]);
19454: 				;}
19455:     break;
19456: 
19457:   case 651:
19458: #line 1338 "third_party/libpg_query/grammar/statements/select.y"
19459:     {
19460: 					(yyval.typnam) = SystemTypeName("numeric");
19461: 					(yyval.typnam)->typmods = (yyvsp[(2) - (2)].list);
19462: 					(yyval.typnam)->location = (yylsp[(1) - (2)]);
19463: 				;}
19464:     break;
19465: 
19466:   case 652:
19467: #line 1344 "third_party/libpg_query/grammar/statements/select.y"
19468:     {
19469: 					(yyval.typnam) = SystemTypeName("bool");
19470: 					(yyval.typnam)->location = (yylsp[(1) - (1)]);
19471: 				;}
19472:     break;
19473: 
19474:   case 653:
19475: #line 1351 "third_party/libpg_query/grammar/statements/select.y"
19476:     {
19477: 					/*
19478: 					 * Check FLOAT() precision limits assuming IEEE floating
19479: 					 * types - thomas 1997-09-18
19480: 					 */
19481: 					if ((yyvsp[(2) - (3)].ival) < 1)
19482: 						ereport(ERROR,
19483: 								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
19484: 								 errmsg("precision for type float must be at least 1 bit"),
19485: 								 parser_errposition((yylsp[(2) - (3)]))));
19486: 					else if ((yyvsp[(2) - (3)].ival) <= 24)
19487: 						(yyval.typnam) = SystemTypeName("float4");
19488: 					else if ((yyvsp[(2) - (3)].ival) <= 53)
19489: 						(yyval.typnam) = SystemTypeName("float8");
19490: 					else
19491: 						ereport(ERROR,
19492: 								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
19493: 								 errmsg("precision for type float must be less than 54 bits"),
19494: 								 parser_errposition((yylsp[(2) - (3)]))));
19495: 				;}
19496:     break;
19497: 
19498:   case 654:
19499: #line 1372 "third_party/libpg_query/grammar/statements/select.y"
19500:     {
19501: 					(yyval.typnam) = SystemTypeName("float4");
19502: 				;}
19503:     break;
19504: 
19505:   case 655:
19506: #line 1382 "third_party/libpg_query/grammar/statements/select.y"
19507:     {
19508: 					(yyval.typnam) = (yyvsp[(1) - (1)].typnam);
19509: 				;}
19510:     break;
19511: 
19512:   case 656:
19513: #line 1386 "third_party/libpg_query/grammar/statements/select.y"
19514:     {
19515: 					(yyval.typnam) = (yyvsp[(1) - (1)].typnam);
19516: 				;}
19517:     break;
19518: 
19519:   case 657:
19520: #line 1394 "third_party/libpg_query/grammar/statements/select.y"
19521:     {
19522: 					(yyval.typnam) = (yyvsp[(1) - (1)].typnam);
19523: 				;}
19524:     break;
19525: 
19526:   case 658:
19527: #line 1398 "third_party/libpg_query/grammar/statements/select.y"
19528:     {
19529: 					(yyval.typnam) = (yyvsp[(1) - (1)].typnam);
19530: 					(yyval.typnam)->typmods = NIL;
19531: 				;}
19532:     break;
19533: 
19534:   case 659:
19535: #line 1406 "third_party/libpg_query/grammar/statements/select.y"
19536:     {
19537: 					const char *typname;
19538: 
19539: 					typname = (yyvsp[(2) - (5)].boolean) ? "varbit" : "bit";
19540: 					(yyval.typnam) = SystemTypeName(typname);
19541: 					(yyval.typnam)->typmods = (yyvsp[(4) - (5)].list);
19542: 					(yyval.typnam)->location = (yylsp[(1) - (5)]);
19543: 				;}
19544:     break;
19545: 
19546:   case 660:
19547: #line 1418 "third_party/libpg_query/grammar/statements/select.y"
19548:     {
19549: 					/* bit defaults to bit(1), varbit to no limit */
19550: 					if ((yyvsp[(2) - (2)].boolean))
19551: 					{
19552: 						(yyval.typnam) = SystemTypeName("varbit");
19553: 					}
19554: 					else
19555: 					{
19556: 						(yyval.typnam) = SystemTypeName("bit");
19557: 						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
19558: 					}
19559: 					(yyval.typnam)->location = (yylsp[(1) - (2)]);
19560: 				;}
19561:     break;
19562: 
19563:   case 661:
19564: #line 1439 "third_party/libpg_query/grammar/statements/select.y"
19565:     {
19566: 					(yyval.typnam) = (yyvsp[(1) - (1)].typnam);
19567: 				;}
19568:     break;
19569: 
19570:   case 662:
19571: #line 1443 "third_party/libpg_query/grammar/statements/select.y"
19572:     {
19573: 					(yyval.typnam) = (yyvsp[(1) - (1)].typnam);
19574: 				;}
19575:     break;
19576: 
19577:   case 663:
19578: #line 1449 "third_party/libpg_query/grammar/statements/select.y"
19579:     {
19580: 					(yyval.typnam) = (yyvsp[(1) - (1)].typnam);
19581: 				;}
19582:     break;
19583: 
19584:   case 664:
19585: #line 1453 "third_party/libpg_query/grammar/statements/select.y"
19586:     {
19587: 					/* Length was not specified so allow to be unrestricted.
19588: 					 * This handles problems with fixed-length (bpchar) strings
19589: 					 * which in column definitions must default to a length
19590: 					 * of one, but should not be constrained if the length
19591: 					 * was not specified.
19592: 					 */
19593: 					(yyval.typnam) = (yyvsp[(1) - (1)].typnam);
19594: 					(yyval.typnam)->typmods = NIL;
19595: 				;}
19596:     break;
19597: 
19598:   case 665:
19599: #line 1466 "third_party/libpg_query/grammar/statements/select.y"
19600:     {
19601: 					(yyval.typnam) = SystemTypeName((yyvsp[(1) - (4)].conststr));
19602: 					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[(3) - (4)].ival), (yylsp[(3) - (4)])));
19603: 					(yyval.typnam)->location = (yylsp[(1) - (4)]);
19604: 				;}
19605:     break;
19606: 
19607:   case 666:
19608: #line 1474 "third_party/libpg_query/grammar/statements/select.y"
19609:     {
19610: 					(yyval.typnam) = SystemTypeName((yyvsp[(1) - (1)].conststr));
19611: 					/* char defaults to char(1), varchar to no limit */
19612: 					if (strcmp((yyvsp[(1) - (1)].conststr), "bpchar") == 0)
19613: 						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
19614: 					(yyval.typnam)->location = (yylsp[(1) - (1)]);
19615: 				;}
19616:     break;
19617: 
19618:   case 667:
19619: #line 1484 "third_party/libpg_query/grammar/statements/select.y"
19620:     { (yyval.conststr) = (yyvsp[(2) - (2)].boolean) ? "varchar": "bpchar"; ;}
19621:     break;
19622: 
19623:   case 668:
19624: #line 1486 "third_party/libpg_query/grammar/statements/select.y"
19625:     { (yyval.conststr) = (yyvsp[(2) - (2)].boolean) ? "varchar": "bpchar"; ;}
19626:     break;
19627: 
19628:   case 669:
19629: #line 1488 "third_party/libpg_query/grammar/statements/select.y"
19630:     { (yyval.conststr) = "varchar"; ;}
19631:     break;
19632: 
19633:   case 670:
19634: #line 1490 "third_party/libpg_query/grammar/statements/select.y"
19635:     { (yyval.conststr) = (yyvsp[(3) - (3)].boolean) ? "varchar": "bpchar"; ;}
19636:     break;
19637: 
19638:   case 671:
19639: #line 1492 "third_party/libpg_query/grammar/statements/select.y"
19640:     { (yyval.conststr) = (yyvsp[(3) - (3)].boolean) ? "varchar": "bpchar"; ;}
19641:     break;
19642: 
19643:   case 672:
19644: #line 1494 "third_party/libpg_query/grammar/statements/select.y"
19645:     { (yyval.conststr) = (yyvsp[(2) - (2)].boolean) ? "varchar": "bpchar"; ;}
19646:     break;
19647: 
19648:   case 673:
19649: #line 1498 "third_party/libpg_query/grammar/statements/select.y"
19650:     { (yyval.boolean) = true; ;}
19651:     break;
19652: 
19653:   case 674:
19654: #line 1499 "third_party/libpg_query/grammar/statements/select.y"
19655:     { (yyval.boolean) = false; ;}
19656:     break;
19657: 
19658:   case 675:
19659: #line 1507 "third_party/libpg_query/grammar/statements/select.y"
19660:     {
19661: 					if ((yyvsp[(5) - (5)].boolean))
19662: 						(yyval.typnam) = SystemTypeName("timestamptz");
19663: 					else
19664: 						(yyval.typnam) = SystemTypeName("timestamp");
19665: 					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[(3) - (5)].ival), (yylsp[(3) - (5)])));
19666: 					(yyval.typnam)->location = (yylsp[(1) - (5)]);
19667: 				;}
19668:     break;
19669: 
19670:   case 676:
19671: #line 1516 "third_party/libpg_query/grammar/statements/select.y"
19672:     {
19673: 					if ((yyvsp[(2) - (2)].boolean))
19674: 						(yyval.typnam) = SystemTypeName("timestamptz");
19675: 					else
19676: 						(yyval.typnam) = SystemTypeName("timestamp");
19677: 					(yyval.typnam)->location = (yylsp[(1) - (2)]);
19678: 				;}
19679:     break;
19680: 
19681:   case 677:
19682: #line 1524 "third_party/libpg_query/grammar/statements/select.y"
19683:     {
19684: 					if ((yyvsp[(5) - (5)].boolean))
19685: 						(yyval.typnam) = SystemTypeName("timetz");
19686: 					else
19687: 						(yyval.typnam) = SystemTypeName("time");
19688: 					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[(3) - (5)].ival), (yylsp[(3) - (5)])));
19689: 					(yyval.typnam)->location = (yylsp[(1) - (5)]);
19690: 				;}
19691:     break;
19692: 
19693:   case 678:
19694: #line 1533 "third_party/libpg_query/grammar/statements/select.y"
19695:     {
19696: 					if ((yyvsp[(2) - (2)].boolean))
19697: 						(yyval.typnam) = SystemTypeName("timetz");
19698: 					else
19699: 						(yyval.typnam) = SystemTypeName("time");
19700: 					(yyval.typnam)->location = (yylsp[(1) - (2)]);
19701: 				;}
19702:     break;
19703: 
19704:   case 679:
19705: #line 1544 "third_party/libpg_query/grammar/statements/select.y"
19706:     {
19707: 					(yyval.typnam) = SystemTypeName("interval");
19708: 					(yyval.typnam)->location = (yylsp[(1) - (1)]);
19709: 				;}
19710:     break;
19711: 
19712:   case 680:
19713: #line 1551 "third_party/libpg_query/grammar/statements/select.y"
19714:     { (yyval.boolean) = true; ;}
19715:     break;
19716: 
19717:   case 681:
19718: #line 1552 "third_party/libpg_query/grammar/statements/select.y"
19719:     { (yyval.boolean) = false; ;}
19720:     break;
19721: 
19722:   case 682:
19723: #line 1553 "third_party/libpg_query/grammar/statements/select.y"
19724:     { (yyval.boolean) = false; ;}
19725:     break;
19726: 
19727:   case 699:
19728: #line 1582 "third_party/libpg_query/grammar/statements/select.y"
19729:     { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR), (yylsp[(1) - (1)]))); ;}
19730:     break;
19731: 
19732:   case 700:
19733: #line 1584 "third_party/libpg_query/grammar/statements/select.y"
19734:     { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MONTH), (yylsp[(1) - (1)]))); ;}
19735:     break;
19736: 
19737:   case 701:
19738: #line 1586 "third_party/libpg_query/grammar/statements/select.y"
19739:     { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY), (yylsp[(1) - (1)]))); ;}
19740:     break;
19741: 
19742:   case 702:
19743: #line 1588 "third_party/libpg_query/grammar/statements/select.y"
19744:     { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR), (yylsp[(1) - (1)]))); ;}
19745:     break;
19746: 
19747:   case 703:
19748: #line 1590 "third_party/libpg_query/grammar/statements/select.y"
19749:     { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE), (yylsp[(1) - (1)]))); ;}
19750:     break;
19751: 
19752:   case 704:
19753: #line 1592 "third_party/libpg_query/grammar/statements/select.y"
19754:     { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(SECOND), (yylsp[(1) - (1)]))); ;}
19755:     break;
19756: 
19757:   case 705:
19758: #line 1594 "third_party/libpg_query/grammar/statements/select.y"
19759:     { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MILLISECOND), (yylsp[(1) - (1)]))); ;}
19760:     break;
19761: 
19762:   case 706:
19763: #line 1596 "third_party/libpg_query/grammar/statements/select.y"
19764:     { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MICROSECOND), (yylsp[(1) - (1)]))); ;}
19765:     break;
19766: 
19767:   case 707:
19768: #line 1598 "third_party/libpg_query/grammar/statements/select.y"
19769:     {
19770: 					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR) |
19771: 												 INTERVAL_MASK(MONTH), (yylsp[(1) - (3)])));
19772: 				;}
19773:     break;
19774: 
19775:   case 708:
19776: #line 1603 "third_party/libpg_query/grammar/statements/select.y"
19777:     {
19778: 					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
19779: 												 INTERVAL_MASK(HOUR), (yylsp[(1) - (3)])));
19780: 				;}
19781:     break;
19782: 
19783:   case 709:
19784: #line 1608 "third_party/libpg_query/grammar/statements/select.y"
19785:     {
19786: 					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
19787: 												 INTERVAL_MASK(HOUR) |
19788: 												 INTERVAL_MASK(MINUTE), (yylsp[(1) - (3)])));
19789: 				;}
19790:     break;
19791: 
19792:   case 710:
19793: #line 1614 "third_party/libpg_query/grammar/statements/select.y"
19794:     {
19795: 					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
19796: 												 INTERVAL_MASK(HOUR) |
19797: 												 INTERVAL_MASK(MINUTE) |
19798: 												 INTERVAL_MASK(SECOND), (yylsp[(1) - (3)])));
19799: 				;}
19800:     break;
19801: 
19802:   case 711:
19803: #line 1621 "third_party/libpg_query/grammar/statements/select.y"
19804:     {
19805: 					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
19806: 												 INTERVAL_MASK(MINUTE), (yylsp[(1) - (3)])));
19807: 				;}
19808:     break;
19809: 
19810:   case 712:
19811: #line 1626 "third_party/libpg_query/grammar/statements/select.y"
19812:     {
19813: 					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
19814: 												 INTERVAL_MASK(MINUTE) |
19815: 												 INTERVAL_MASK(SECOND), (yylsp[(1) - (3)])));
19816: 				;}
19817:     break;
19818: 
19819:   case 713:
19820: #line 1632 "third_party/libpg_query/grammar/statements/select.y"
19821:     {
19822: 					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE) |
19823: 												 INTERVAL_MASK(SECOND), (yylsp[(1) - (3)])));
19824: 				;}
19825:     break;
19826: 
19827:   case 714:
19828: #line 1637 "third_party/libpg_query/grammar/statements/select.y"
19829:     { (yyval.list) = NIL; ;}
19830:     break;
19831: 
19832:   case 715:
19833: #line 1668 "third_party/libpg_query/grammar/statements/select.y"
19834:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
19835:     break;
19836: 
19837:   case 716:
19838: #line 1671 "third_party/libpg_query/grammar/statements/select.y"
19839:     { (yyval.node) = makeTypeCast((yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].typnam), 0, (yylsp[(2) - (3)])); ;}
19840:     break;
19841: 
19842:   case 717:
19843: #line 1673 "third_party/libpg_query/grammar/statements/select.y"
19844:     {
19845: 					PGCollateClause *n = makeNode(PGCollateClause);
19846: 					n->arg = (yyvsp[(1) - (3)].node);
19847: 					n->collname = (yyvsp[(3) - (3)].list);
19848: 					n->location = (yylsp[(2) - (3)]);
19849: 					(yyval.node) = (PGNode *) n;
19850: 				;}
19851:     break;
19852: 
19853:   case 718:
19854: #line 1681 "third_party/libpg_query/grammar/statements/select.y"
19855:     {
19856: 					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("timezone"),
19857: 											   list_make2((yyvsp[(5) - (5)].node), (yyvsp[(1) - (5)].node)),
19858: 											   (yylsp[(2) - (5)]));
19859: 				;}
19860:     break;
19861: 
19862:   case 719:
19863: #line 1696 "third_party/libpg_query/grammar/statements/select.y"
19864:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[(2) - (2)].node), (yylsp[(1) - (2)])); ;}
19865:     break;
19866: 
19867:   case 720:
19868: #line 1698 "third_party/libpg_query/grammar/statements/select.y"
19869:     { (yyval.node) = doNegate((yyvsp[(2) - (2)].node), (yylsp[(1) - (2)])); ;}
19870:     break;
19871: 
19872:   case 721:
19873: #line 1700 "third_party/libpg_query/grammar/statements/select.y"
19874:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
19875:     break;
19876: 
19877:   case 722:
19878: #line 1702 "third_party/libpg_query/grammar/statements/select.y"
19879:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
19880:     break;
19881: 
19882:   case 723:
19883: #line 1704 "third_party/libpg_query/grammar/statements/select.y"
19884:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
19885:     break;
19886: 
19887:   case 724:
19888: #line 1706 "third_party/libpg_query/grammar/statements/select.y"
19889:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
19890:     break;
19891: 
19892:   case 725:
19893: #line 1708 "third_party/libpg_query/grammar/statements/select.y"
19894:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
19895:     break;
19896: 
19897:   case 726:
19898: #line 1710 "third_party/libpg_query/grammar/statements/select.y"
19899:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
19900:     break;
19901: 
19902:   case 727:
19903: #line 1712 "third_party/libpg_query/grammar/statements/select.y"
19904:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
19905:     break;
19906: 
19907:   case 728:
19908: #line 1714 "third_party/libpg_query/grammar/statements/select.y"
19909:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
19910:     break;
19911: 
19912:   case 729:
19913: #line 1716 "third_party/libpg_query/grammar/statements/select.y"
19914:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
19915:     break;
19916: 
19917:   case 730:
19918: #line 1718 "third_party/libpg_query/grammar/statements/select.y"
19919:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
19920:     break;
19921: 
19922:   case 731:
19923: #line 1720 "third_party/libpg_query/grammar/statements/select.y"
19924:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
19925:     break;
19926: 
19927:   case 732:
19928: #line 1722 "third_party/libpg_query/grammar/statements/select.y"
19929:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
19930:     break;
19931: 
19932:   case 733:
19933: #line 1725 "third_party/libpg_query/grammar/statements/select.y"
19934:     { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[(2) - (3)].list), (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
19935:     break;
19936: 
19937:   case 734:
19938: #line 1727 "third_party/libpg_query/grammar/statements/select.y"
19939:     { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[(1) - (2)].list), NULL, (yyvsp[(2) - (2)].node), (yylsp[(1) - (2)])); ;}
19940:     break;
19941: 
19942:   case 735:
19943: #line 1729 "third_party/libpg_query/grammar/statements/select.y"
19944:     { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[(2) - (2)].list), (yyvsp[(1) - (2)].node), NULL, (yylsp[(2) - (2)])); ;}
19945:     break;
19946: 
19947:   case 736:
19948: #line 1732 "third_party/libpg_query/grammar/statements/select.y"
19949:     { (yyval.node) = makeAndExpr((yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
19950:     break;
19951: 
19952:   case 737:
19953: #line 1734 "third_party/libpg_query/grammar/statements/select.y"
19954:     { (yyval.node) = makeOrExpr((yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
19955:     break;
19956: 
19957:   case 738:
19958: #line 1736 "third_party/libpg_query/grammar/statements/select.y"
19959:     { (yyval.node) = makeNotExpr((yyvsp[(2) - (2)].node), (yylsp[(1) - (2)])); ;}
19960:     break;
19961: 
19962:   case 739:
19963: #line 1738 "third_party/libpg_query/grammar/statements/select.y"
19964:     { (yyval.node) = makeNotExpr((yyvsp[(2) - (2)].node), (yylsp[(1) - (2)])); ;}
19965:     break;
19966: 
19967:   case 740:
19968: #line 1741 "third_party/libpg_query/grammar/statements/select.y"
19969:     {
19970: 					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_GLOB, "~~~",
19971: 												   (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)]));
19972: 				;}
19973:     break;
19974: 
19975:   case 741:
19976: #line 1746 "third_party/libpg_query/grammar/statements/select.y"
19977:     {
19978: 					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "~~",
19979: 												   (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)]));
19980: 				;}
19981:     break;
19982: 
19983:   case 742:
19984: #line 1751 "third_party/libpg_query/grammar/statements/select.y"
19985:     {
19986: 					PGFuncCall *n = makeFuncCall(SystemFuncName("like_escape"),
19987: 											   list_make3((yyvsp[(1) - (5)].node), (yyvsp[(3) - (5)].node), (yyvsp[(5) - (5)].node)),
19988: 											   (yylsp[(2) - (5)]));
19989: 					(yyval.node) = (PGNode *) n;
19990: 				;}
19991:     break;
19992: 
19993:   case 743:
19994: #line 1758 "third_party/libpg_query/grammar/statements/select.y"
19995:     {
19996: 					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "!~~",
19997: 												   (yyvsp[(1) - (4)].node), (yyvsp[(4) - (4)].node), (yylsp[(2) - (4)]));
19998: 				;}
19999:     break;
20000: 
20001:   case 744:
20002: #line 1763 "third_party/libpg_query/grammar/statements/select.y"
20003:     {
20004: 					PGFuncCall *n = makeFuncCall(SystemFuncName("not_like_escape"),
20005: 											   list_make3((yyvsp[(1) - (6)].node), (yyvsp[(4) - (6)].node), (yyvsp[(6) - (6)].node)),
20006: 											   (yylsp[(2) - (6)]));
20007: 					(yyval.node) = (PGNode *) n;
20008: 				;}
20009:     break;
20010: 
20011:   case 745:
20012: #line 1770 "third_party/libpg_query/grammar/statements/select.y"
20013:     {
20014: 					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "~~*",
20015: 												   (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)]));
20016: 				;}
20017:     break;
20018: 
20019:   case 746:
20020: #line 1775 "third_party/libpg_query/grammar/statements/select.y"
20021:     {
20022: 					PGFuncCall *n = makeFuncCall(SystemFuncName("like_escape"),
20023: 											   list_make2((yyvsp[(3) - (5)].node), (yyvsp[(5) - (5)].node)),
20024: 											   (yylsp[(2) - (5)]));
20025: 					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "~~*",
20026: 												   (yyvsp[(1) - (5)].node), (PGNode *) n, (yylsp[(2) - (5)]));
20027: 				;}
20028:     break;
20029: 
20030:   case 747:
20031: #line 1783 "third_party/libpg_query/grammar/statements/select.y"
20032:     {
20033: 					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "!~~*",
20034: 												   (yyvsp[(1) - (4)].node), (yyvsp[(4) - (4)].node), (yylsp[(2) - (4)]));
20035: 				;}
20036:     break;
20037: 
20038:   case 748:
20039: #line 1788 "third_party/libpg_query/grammar/statements/select.y"
20040:     {
20041: 					PGFuncCall *n = makeFuncCall(SystemFuncName("not_like_escape"),
20042: 											   list_make2((yyvsp[(4) - (6)].node), (yyvsp[(6) - (6)].node)),
20043: 											   (yylsp[(2) - (6)]));
20044: 					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "!~~*",
20045: 												   (yyvsp[(1) - (6)].node), (PGNode *) n, (yylsp[(2) - (6)]));
20046: 				;}
20047:     break;
20048: 
20049:   case 749:
20050: #line 1797 "third_party/libpg_query/grammar/statements/select.y"
20051:     {
20052: 					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
20053: 											   list_make2((yyvsp[(4) - (4)].node), makeNullAConst(-1)),
20054: 											   (yylsp[(2) - (4)]));
20055: 					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
20056: 												   (yyvsp[(1) - (4)].node), (PGNode *) n, (yylsp[(2) - (4)]));
20057: 				;}
20058:     break;
20059: 
20060:   case 750:
20061: #line 1805 "third_party/libpg_query/grammar/statements/select.y"
20062:     {
20063: 					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
20064: 											   list_make2((yyvsp[(4) - (6)].node), (yyvsp[(6) - (6)].node)),
20065: 											   (yylsp[(2) - (6)]));
20066: 					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
20067: 												   (yyvsp[(1) - (6)].node), (PGNode *) n, (yylsp[(2) - (6)]));
20068: 				;}
20069:     break;
20070: 
20071:   case 751:
20072: #line 1813 "third_party/libpg_query/grammar/statements/select.y"
20073:     {
20074: 					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
20075: 											   list_make2((yyvsp[(5) - (5)].node), makeNullAConst(-1)),
20076: 											   (yylsp[(2) - (5)]));
20077: 					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
20078: 												   (yyvsp[(1) - (5)].node), (PGNode *) n, (yylsp[(2) - (5)]));
20079: 				;}
20080:     break;
20081: 
20082:   case 752:
20083: #line 1821 "third_party/libpg_query/grammar/statements/select.y"
20084:     {
20085: 					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
20086: 											   list_make2((yyvsp[(5) - (7)].node), (yyvsp[(7) - (7)].node)),
20087: 											   (yylsp[(2) - (7)]));
20088: 					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
20089: 												   (yyvsp[(1) - (7)].node), (PGNode *) n, (yylsp[(2) - (7)]));
20090: 				;}
20091:     break;
20092: 
20093:   case 753:
20094: #line 1839 "third_party/libpg_query/grammar/statements/select.y"
20095:     {
20096: 					PGNullTest *n = makeNode(PGNullTest);
20097: 					n->arg = (PGExpr *) (yyvsp[(1) - (3)].node);
20098: 					n->nulltesttype = PG_IS_NULL;
20099: 					n->location = (yylsp[(2) - (3)]);
20100: 					(yyval.node) = (PGNode *)n;
20101: 				;}
20102:     break;
20103: 
20104:   case 754:
20105: #line 1847 "third_party/libpg_query/grammar/statements/select.y"
20106:     {
20107: 					PGNullTest *n = makeNode(PGNullTest);
20108: 					n->arg = (PGExpr *) (yyvsp[(1) - (2)].node);
20109: 					n->nulltesttype = PG_IS_NULL;
20110: 					n->location = (yylsp[(2) - (2)]);
20111: 					(yyval.node) = (PGNode *)n;
20112: 				;}
20113:     break;
20114: 
20115:   case 755:
20116: #line 1855 "third_party/libpg_query/grammar/statements/select.y"
20117:     {
20118: 					PGNullTest *n = makeNode(PGNullTest);
20119: 					n->arg = (PGExpr *) (yyvsp[(1) - (4)].node);
20120: 					n->nulltesttype = IS_NOT_NULL;
20121: 					n->location = (yylsp[(2) - (4)]);
20122: 					(yyval.node) = (PGNode *)n;
20123: 				;}
20124:     break;
20125: 
20126:   case 756:
20127: #line 1863 "third_party/libpg_query/grammar/statements/select.y"
20128:     {
20129: 					PGNullTest *n = makeNode(PGNullTest);
20130: 					n->arg = (PGExpr *) (yyvsp[(1) - (3)].node);
20131: 					n->nulltesttype = IS_NOT_NULL;
20132: 					n->location = (yylsp[(2) - (3)]);
20133: 					(yyval.node) = (PGNode *)n;
20134: 				;}
20135:     break;
20136: 
20137:   case 757:
20138: #line 1871 "third_party/libpg_query/grammar/statements/select.y"
20139:     {
20140: 					PGNullTest *n = makeNode(PGNullTest);
20141: 					n->arg = (PGExpr *) (yyvsp[(1) - (2)].node);
20142: 					n->nulltesttype = IS_NOT_NULL;
20143: 					n->location = (yylsp[(2) - (2)]);
20144: 					(yyval.node) = (PGNode *)n;
20145: 				;}
20146:     break;
20147: 
20148:   case 758:
20149: #line 1878 "third_party/libpg_query/grammar/statements/select.y"
20150:     {
20151: 				PGFuncCall *n = makeFuncCall(SystemFuncName("row"), (yyvsp[(1) - (1)].list), (yylsp[(1) - (1)]));
20152: 				(yyval.node) = (PGNode *) n;
20153: 			;}
20154:     break;
20155: 
20156:   case 759:
20157: #line 1882 "third_party/libpg_query/grammar/statements/select.y"
20158:     {
20159: 				PGFuncCall *n = makeFuncCall(SystemFuncName("struct_pack"), (yyvsp[(2) - (3)].list), (yylsp[(2) - (3)]));
20160: 				(yyval.node) = (PGNode *) n;
20161: 			;}
20162:     break;
20163: 
20164:   case 760:
20165: #line 1886 "third_party/libpg_query/grammar/statements/select.y"
20166:     {
20167: 				PGFuncCall *n = makeFuncCall(SystemFuncName("list_value"), (yyvsp[(2) - (3)].list), (yylsp[(2) - (3)]));
20168: 				(yyval.node) = (PGNode *) n;
20169: 			;}
20170:     break;
20171: 
20172:   case 761:
20173: #line 1891 "third_party/libpg_query/grammar/statements/select.y"
20174:     {
20175: 				PGLambdaFunction *n = makeNode(PGLambdaFunction);
20176: 				n->parameters = (yyvsp[(1) - (3)].list);
20177: 				n->function = (yyvsp[(3) - (3)].node);
20178: 				n->location = (yylsp[(2) - (3)]);
20179: 				(yyval.node) = (PGNode *) n;
20180: 			;}
20181:     break;
20182: 
20183:   case 762:
20184: #line 1899 "third_party/libpg_query/grammar/statements/select.y"
20185:     {
20186: 				PGLambdaFunction *n = makeNode(PGLambdaFunction);
20187: 				n->parameters = list_make1((yyvsp[(1) - (3)].node));
20188: 				n->function = (yyvsp[(3) - (3)].node);
20189: 				n->location = (yylsp[(2) - (3)]);
20190: 				(yyval.node) = (PGNode *) n;
20191: 			;}
20192:     break;
20193: 
20194:   case 763:
20195: #line 1907 "third_party/libpg_query/grammar/statements/select.y"
20196:     {
20197: 					if (list_length((yyvsp[(1) - (3)].list)) != 2)
20198: 						ereport(ERROR,
20199: 								(errcode(PG_ERRCODE_SYNTAX_ERROR),
20200: 								 errmsg("wrong number of parameters on left side of OVERLAPS expression"),
20201: 								 parser_errposition((yylsp[(1) - (3)]))));
20202: 					if (list_length((yyvsp[(3) - (3)].list)) != 2)
20203: 						ereport(ERROR,
20204: 								(errcode(PG_ERRCODE_SYNTAX_ERROR),
20205: 								 errmsg("wrong number of parameters on right side of OVERLAPS expression"),
20206: 								 parser_errposition((yylsp[(3) - (3)]))));
20207: 					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlaps"),
20208: 											   list_concat((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].list)),
20209: 											   (yylsp[(2) - (3)]));
20210: 				;}
20211:     break;
20212: 
20213:   case 764:
20214: #line 1923 "third_party/libpg_query/grammar/statements/select.y"
20215:     {
20216: 					PGBooleanTest *b = makeNode(PGBooleanTest);
20217: 					b->arg = (PGExpr *) (yyvsp[(1) - (3)].node);
20218: 					b->booltesttype = PG_IS_TRUE;
20219: 					b->location = (yylsp[(2) - (3)]);
20220: 					(yyval.node) = (PGNode *)b;
20221: 				;}
20222:     break;
20223: 
20224:   case 765:
20225: #line 1931 "third_party/libpg_query/grammar/statements/select.y"
20226:     {
20227: 					PGBooleanTest *b = makeNode(PGBooleanTest);
20228: 					b->arg = (PGExpr *) (yyvsp[(1) - (4)].node);
20229: 					b->booltesttype = IS_NOT_TRUE;
20230: 					b->location = (yylsp[(2) - (4)]);
20231: 					(yyval.node) = (PGNode *)b;
20232: 				;}
20233:     break;
20234: 
20235:   case 766:
20236: #line 1939 "third_party/libpg_query/grammar/statements/select.y"
20237:     {
20238: 					PGBooleanTest *b = makeNode(PGBooleanTest);
20239: 					b->arg = (PGExpr *) (yyvsp[(1) - (3)].node);
20240: 					b->booltesttype = IS_FALSE;
20241: 					b->location = (yylsp[(2) - (3)]);
20242: 					(yyval.node) = (PGNode *)b;
20243: 				;}
20244:     break;
20245: 
20246:   case 767:
20247: #line 1947 "third_party/libpg_query/grammar/statements/select.y"
20248:     {
20249: 					PGBooleanTest *b = makeNode(PGBooleanTest);
20250: 					b->arg = (PGExpr *) (yyvsp[(1) - (4)].node);
20251: 					b->booltesttype = IS_NOT_FALSE;
20252: 					b->location = (yylsp[(2) - (4)]);
20253: 					(yyval.node) = (PGNode *)b;
20254: 				;}
20255:     break;
20256: 
20257:   case 768:
20258: #line 1955 "third_party/libpg_query/grammar/statements/select.y"
20259:     {
20260: 					PGBooleanTest *b = makeNode(PGBooleanTest);
20261: 					b->arg = (PGExpr *) (yyvsp[(1) - (3)].node);
20262: 					b->booltesttype = IS_UNKNOWN;
20263: 					b->location = (yylsp[(2) - (3)]);
20264: 					(yyval.node) = (PGNode *)b;
20265: 				;}
20266:     break;
20267: 
20268:   case 769:
20269: #line 1963 "third_party/libpg_query/grammar/statements/select.y"
20270:     {
20271: 					PGBooleanTest *b = makeNode(PGBooleanTest);
20272: 					b->arg = (PGExpr *) (yyvsp[(1) - (4)].node);
20273: 					b->booltesttype = IS_NOT_UNKNOWN;
20274: 					b->location = (yylsp[(2) - (4)]);
20275: 					(yyval.node) = (PGNode *)b;
20276: 				;}
20277:     break;
20278: 
20279:   case 770:
20280: #line 1971 "third_party/libpg_query/grammar/statements/select.y"
20281:     {
20282: 					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[(1) - (5)].node), (yyvsp[(5) - (5)].node), (yylsp[(2) - (5)]));
20283: 				;}
20284:     break;
20285: 
20286:   case 771:
20287: #line 1975 "third_party/libpg_query/grammar/statements/select.y"
20288:     {
20289: 					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[(1) - (6)].node), (yyvsp[(6) - (6)].node), (yylsp[(2) - (6)]));
20290: 				;}
20291:     break;
20292: 
20293:   case 772:
20294: #line 1979 "third_party/libpg_query/grammar/statements/select.y"
20295:     {
20296: 					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[(1) - (6)].node), (PGNode *) (yyvsp[(5) - (6)].list), (yylsp[(2) - (6)]));
20297: 				;}
20298:     break;
20299: 
20300:   case 773:
20301: #line 1983 "third_party/libpg_query/grammar/statements/select.y"
20302:     {
20303: 					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[(1) - (7)].node), (PGNode *) (yyvsp[(6) - (7)].list), (yylsp[(2) - (7)]));
20304: 				;}
20305:     break;
20306: 
20307:   case 774:
20308: #line 1987 "third_party/libpg_query/grammar/statements/select.y"
20309:     {
20310: 					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN,
20311: 												   "BETWEEN",
20312: 												   (yyvsp[(1) - (6)].node),
20313: 												   (PGNode *) list_make2((yyvsp[(4) - (6)].node), (yyvsp[(6) - (6)].node)),
20314: 												   (yylsp[(2) - (6)]));
20315: 				;}
20316:     break;
20317: 
20318:   case 775:
20319: #line 1995 "third_party/libpg_query/grammar/statements/select.y"
20320:     {
20321: 					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN,
20322: 												   "NOT BETWEEN",
20323: 												   (yyvsp[(1) - (7)].node),
20324: 												   (PGNode *) list_make2((yyvsp[(5) - (7)].node), (yyvsp[(7) - (7)].node)),
20325: 												   (yylsp[(2) - (7)]));
20326: 				;}
20327:     break;
20328: 
20329:   case 776:
20330: #line 2003 "third_party/libpg_query/grammar/statements/select.y"
20331:     {
20332: 					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN_SYM,
20333: 												   "BETWEEN SYMMETRIC",
20334: 												   (yyvsp[(1) - (6)].node),
20335: 												   (PGNode *) list_make2((yyvsp[(4) - (6)].node), (yyvsp[(6) - (6)].node)),
20336: 												   (yylsp[(2) - (6)]));
20337: 				;}
20338:     break;
20339: 
20340:   case 777:
20341: #line 2011 "third_party/libpg_query/grammar/statements/select.y"
20342:     {
20343: 					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN_SYM,
20344: 												   "NOT BETWEEN SYMMETRIC",
20345: 												   (yyvsp[(1) - (7)].node),
20346: 												   (PGNode *) list_make2((yyvsp[(5) - (7)].node), (yyvsp[(7) - (7)].node)),
20347: 												   (yylsp[(2) - (7)]));
20348: 				;}
20349:     break;
20350: 
20351:   case 778:
20352: #line 2019 "third_party/libpg_query/grammar/statements/select.y"
20353:     {
20354: 					/* in_expr returns a PGSubLink or a list of a_exprs */
20355: 					if (IsA((yyvsp[(3) - (3)].node), PGSubLink))
20356: 					{
20357: 						/* generate foo = ANY (subquery) */
20358: 						PGSubLink *n = (PGSubLink *) (yyvsp[(3) - (3)].node);
20359: 						n->subLinkType = PG_ANY_SUBLINK;
20360: 						n->subLinkId = 0;
20361: 						n->testexpr = (yyvsp[(1) - (3)].node);
20362: 						n->operName = NIL;		/* show it's IN not = ANY */
20363: 						n->location = (yylsp[(2) - (3)]);
20364: 						(yyval.node) = (PGNode *)n;
20365: 					}
20366: 					else
20367: 					{
20368: 						/* generate scalar IN expression */
20369: 						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "=", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)]));
20370: 					}
20371: 				;}
20372:     break;
20373: 
20374:   case 779:
20375: #line 2039 "third_party/libpg_query/grammar/statements/select.y"
20376:     {
20377: 					/* in_expr returns a PGSubLink or a list of a_exprs */
20378: 					if (IsA((yyvsp[(4) - (4)].node), PGSubLink))
20379: 					{
20380: 						/* generate NOT (foo = ANY (subquery)) */
20381: 						/* Make an = ANY node */
20382: 						PGSubLink *n = (PGSubLink *) (yyvsp[(4) - (4)].node);
20383: 						n->subLinkType = PG_ANY_SUBLINK;
20384: 						n->subLinkId = 0;
20385: 						n->testexpr = (yyvsp[(1) - (4)].node);
20386: 						n->operName = NIL;		/* show it's IN not = ANY */
20387: 						n->location = (yylsp[(2) - (4)]);
20388: 						/* Stick a NOT on top; must have same parse location */
20389: 						(yyval.node) = makeNotExpr((PGNode *) n, (yylsp[(2) - (4)]));
20390: 					}
20391: 					else
20392: 					{
20393: 						/* generate scalar NOT IN expression */
20394: 						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "<>", (yyvsp[(1) - (4)].node), (yyvsp[(4) - (4)].node), (yylsp[(2) - (4)]));
20395: 					}
20396: 				;}
20397:     break;
20398: 
20399:   case 780:
20400: #line 2061 "third_party/libpg_query/grammar/statements/select.y"
20401:     {
20402: 					PGSubLink *n = makeNode(PGSubLink);
20403: 					n->subLinkType = (yyvsp[(3) - (4)].subquerytype);
20404: 					n->subLinkId = 0;
20405: 					n->testexpr = (yyvsp[(1) - (4)].node);
20406: 					n->operName = (yyvsp[(2) - (4)].list);
20407: 					n->subselect = (yyvsp[(4) - (4)].node);
20408: 					n->location = (yylsp[(2) - (4)]);
20409: 					(yyval.node) = (PGNode *)n;
20410: 				;}
20411:     break;
20412: 
20413:   case 781:
20414: #line 2072 "third_party/libpg_query/grammar/statements/select.y"
20415:     {
20416: 					if ((yyvsp[(3) - (6)].subquerytype) == PG_ANY_SUBLINK)
20417: 						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ANY, (yyvsp[(2) - (6)].list), (yyvsp[(1) - (6)].node), (yyvsp[(5) - (6)].node), (yylsp[(2) - (6)]));
20418: 					else
20419: 						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ALL, (yyvsp[(2) - (6)].list), (yyvsp[(1) - (6)].node), (yyvsp[(5) - (6)].node), (yylsp[(2) - (6)]));
20420: 				;}
20421:     break;
20422: 
20423:   case 782:
20424: #line 2079 "third_party/libpg_query/grammar/statements/select.y"
20425:     {
20426: 					/*
20427: 					 * The SQL spec only allows DEFAULT in "contextually typed
20428: 					 * expressions", but for us, it's easier to allow it in
20429: 					 * any a_expr and then throw error during parse analysis
20430: 					 * if it's in an inappropriate context.  This way also
20431: 					 * lets us say something smarter than "syntax error".
20432: 					 */
20433: 					PGSetToDefault *n = makeNode(PGSetToDefault);
20434: 					/* parse analysis will fill in the rest */
20435: 					n->location = (yylsp[(1) - (1)]);
20436: 					(yyval.node) = (PGNode *)n;
20437: 				;}
20438:     break;
20439: 
20440:   case 783:
20441: #line 2092 "third_party/libpg_query/grammar/statements/select.y"
20442:     {
20443: 				PGList *func_name = list_make1(makeString("construct_array"));
20444: 				PGFuncCall *n = makeFuncCall(func_name, (yyvsp[(3) - (4)].list), (yylsp[(1) - (4)]));
20445: 				(yyval.node) = (PGNode *) n;
20446: 			;}
20447:     break;
20448: 
20449:   case 784:
20450: #line 2109 "third_party/libpg_query/grammar/statements/select.y"
20451:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
20452:     break;
20453: 
20454:   case 785:
20455: #line 2111 "third_party/libpg_query/grammar/statements/select.y"
20456:     { (yyval.node) = makeTypeCast((yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].typnam), 0, (yylsp[(2) - (3)])); ;}
20457:     break;
20458: 
20459:   case 786:
20460: #line 2113 "third_party/libpg_query/grammar/statements/select.y"
20461:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[(2) - (2)].node), (yylsp[(1) - (2)])); ;}
20462:     break;
20463: 
20464:   case 787:
20465: #line 2115 "third_party/libpg_query/grammar/statements/select.y"
20466:     { (yyval.node) = doNegate((yyvsp[(2) - (2)].node), (yylsp[(1) - (2)])); ;}
20467:     break;
20468: 
20469:   case 788:
20470: #line 2117 "third_party/libpg_query/grammar/statements/select.y"
20471:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
20472:     break;
20473: 
20474:   case 789:
20475: #line 2119 "third_party/libpg_query/grammar/statements/select.y"
20476:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
20477:     break;
20478: 
20479:   case 790:
20480: #line 2121 "third_party/libpg_query/grammar/statements/select.y"
20481:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
20482:     break;
20483: 
20484:   case 791:
20485: #line 2123 "third_party/libpg_query/grammar/statements/select.y"
20486:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
20487:     break;
20488: 
20489:   case 792:
20490: #line 2125 "third_party/libpg_query/grammar/statements/select.y"
20491:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
20492:     break;
20493: 
20494:   case 793:
20495: #line 2127 "third_party/libpg_query/grammar/statements/select.y"
20496:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
20497:     break;
20498: 
20499:   case 794:
20500: #line 2129 "third_party/libpg_query/grammar/statements/select.y"
20501:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
20502:     break;
20503: 
20504:   case 795:
20505: #line 2131 "third_party/libpg_query/grammar/statements/select.y"
20506:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
20507:     break;
20508: 
20509:   case 796:
20510: #line 2133 "third_party/libpg_query/grammar/statements/select.y"
20511:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
20512:     break;
20513: 
20514:   case 797:
20515: #line 2135 "third_party/libpg_query/grammar/statements/select.y"
20516:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
20517:     break;
20518: 
20519:   case 798:
20520: #line 2137 "third_party/libpg_query/grammar/statements/select.y"
20521:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
20522:     break;
20523: 
20524:   case 799:
20525: #line 2139 "third_party/libpg_query/grammar/statements/select.y"
20526:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
20527:     break;
20528: 
20529:   case 800:
20530: #line 2141 "third_party/libpg_query/grammar/statements/select.y"
20531:     { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[(2) - (3)].list), (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
20532:     break;
20533: 
20534:   case 801:
20535: #line 2143 "third_party/libpg_query/grammar/statements/select.y"
20536:     { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[(1) - (2)].list), NULL, (yyvsp[(2) - (2)].node), (yylsp[(1) - (2)])); ;}
20537:     break;
20538: 
20539:   case 802:
20540: #line 2145 "third_party/libpg_query/grammar/statements/select.y"
20541:     { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[(2) - (2)].list), (yyvsp[(1) - (2)].node), NULL, (yylsp[(2) - (2)])); ;}
20542:     break;
20543: 
20544:   case 803:
20545: #line 2147 "third_party/libpg_query/grammar/statements/select.y"
20546:     {
20547: 					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[(1) - (5)].node), (yyvsp[(5) - (5)].node), (yylsp[(2) - (5)]));
20548: 				;}
20549:     break;
20550: 
20551:   case 804:
20552: #line 2151 "third_party/libpg_query/grammar/statements/select.y"
20553:     {
20554: 					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[(1) - (6)].node), (yyvsp[(6) - (6)].node), (yylsp[(2) - (6)]));
20555: 				;}
20556:     break;
20557: 
20558:   case 805:
20559: #line 2155 "third_party/libpg_query/grammar/statements/select.y"
20560:     {
20561: 					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[(1) - (6)].node), (PGNode *) (yyvsp[(5) - (6)].list), (yylsp[(2) - (6)]));
20562: 				;}
20563:     break;
20564: 
20565:   case 806:
20566: #line 2159 "third_party/libpg_query/grammar/statements/select.y"
20567:     {
20568: 					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[(1) - (7)].node), (PGNode *) (yyvsp[(6) - (7)].list), (yylsp[(2) - (7)]));
20569: 				;}
20570:     break;
20571: 
20572:   case 807:
20573: #line 2172 "third_party/libpg_query/grammar/statements/select.y"
20574:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
20575:     break;
20576: 
20577:   case 808:
20578: #line 2173 "third_party/libpg_query/grammar/statements/select.y"
20579:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
20580:     break;
20581: 
20582:   case 809:
20583: #line 2175 "third_party/libpg_query/grammar/statements/select.y"
20584:     {
20585: 					PGPositionalReference *n = makeNode(PGPositionalReference);
20586: 					n->position = (yyvsp[(2) - (2)].ival);
20587: 					n->location = (yylsp[(1) - (2)]);
20588: 					(yyval.node) = (PGNode *) n;
20589: 				;}
20590:     break;
20591: 
20592:   case 810:
20593: #line 2182 "third_party/libpg_query/grammar/statements/select.y"
20594:     {
20595: 					if ((yyvsp[(2) - (2)].list))
20596: 					{
20597: 						PGAIndirection *n = makeNode(PGAIndirection);
20598: 						n->arg = makeParamRef(0, (yylsp[(1) - (2)]));
20599: 						n->indirection = check_indirection((yyvsp[(2) - (2)].list), yyscanner);
20600: 						(yyval.node) = (PGNode *) n;
20601: 					}
20602: 					else
20603: 						(yyval.node) = makeParamRef(0, (yylsp[(1) - (2)]));
20604: 				;}
20605:     break;
20606: 
20607:   case 811:
20608: #line 2194 "third_party/libpg_query/grammar/statements/select.y"
20609:     {
20610: 					PGParamRef *p = makeNode(PGParamRef);
20611: 					p->number = (yyvsp[(1) - (2)].ival);
20612: 					p->location = (yylsp[(1) - (2)]);
20613: 					if ((yyvsp[(2) - (2)].list))
20614: 					{
20615: 						PGAIndirection *n = makeNode(PGAIndirection);
20616: 						n->arg = (PGNode *) p;
20617: 						n->indirection = check_indirection((yyvsp[(2) - (2)].list), yyscanner);
20618: 						(yyval.node) = (PGNode *) n;
20619: 					}
20620: 					else
20621: 						(yyval.node) = (PGNode *) p;
20622: 				;}
20623:     break;
20624: 
20625:   case 812:
20626: #line 2209 "third_party/libpg_query/grammar/statements/select.y"
20627:     {
20628: 					if ((yyvsp[(4) - (4)].list))
20629: 					{
20630: 						PGAIndirection *n = makeNode(PGAIndirection);
20631: 						n->arg = (yyvsp[(2) - (4)].node);
20632: 						n->indirection = check_indirection((yyvsp[(4) - (4)].list), yyscanner);
20633: 						(yyval.node) = (PGNode *)n;
20634: 					}
20635: 					else
20636: 						(yyval.node) = (yyvsp[(2) - (4)].node);
20637: 				;}
20638:     break;
20639: 
20640:   case 813:
20641: #line 2221 "third_party/libpg_query/grammar/statements/select.y"
20642:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
20643:     break;
20644: 
20645:   case 814:
20646: #line 2223 "third_party/libpg_query/grammar/statements/select.y"
20647:     {
20648: 					if ((yyvsp[(2) - (2)].list)) {
20649: 						PGAIndirection *n = makeNode(PGAIndirection);
20650: 						n->arg = (yyvsp[(1) - (2)].node);
20651: 						n->indirection = check_indirection((yyvsp[(2) - (2)].list), yyscanner);
20652: 						(yyval.node) = (PGNode *)n;
20653: 					}
20654: 					else {
20655: 						(yyval.node) = (yyvsp[(1) - (2)].node);
20656: 					}
20657: 				;}
20658:     break;
20659: 
20660:   case 815:
20661: #line 2235 "third_party/libpg_query/grammar/statements/select.y"
20662:     {
20663: 					PGSubLink *n = makeNode(PGSubLink);
20664: 					n->subLinkType = PG_EXPR_SUBLINK;
20665: 					n->subLinkId = 0;
20666: 					n->testexpr = NULL;
20667: 					n->operName = NIL;
20668: 					n->subselect = (yyvsp[(1) - (1)].node);
20669: 					n->location = (yylsp[(1) - (1)]);
20670: 					(yyval.node) = (PGNode *)n;
20671: 				;}
20672:     break;
20673: 
20674:   case 816:
20675: #line 2246 "third_party/libpg_query/grammar/statements/select.y"
20676:     {
20677: 					/*
20678: 					 * Because the select_with_parens nonterminal is designed
20679: 					 * to "eat" as many levels of parens as possible, the
20680: 					 * '(' a_expr ')' opt_indirection production above will
20681: 					 * fail to match a sub-SELECT with indirection decoration;
20682: 					 * the sub-SELECT won't be regarded as an a_expr as long
20683: 					 * as there are parens around it.  To support applying
20684: 					 * subscripting or field selection to a sub-SELECT result,
20685: 					 * we need this redundant-looking production.
20686: 					 */
20687: 					PGSubLink *n = makeNode(PGSubLink);
20688: 					PGAIndirection *a = makeNode(PGAIndirection);
20689: 					n->subLinkType = PG_EXPR_SUBLINK;
20690: 					n->subLinkId = 0;
20691: 					n->testexpr = NULL;
20692: 					n->operName = NIL;
20693: 					n->subselect = (yyvsp[(1) - (2)].node);
20694: 					n->location = (yylsp[(1) - (2)]);
20695: 					a->arg = (PGNode *)n;
20696: 					a->indirection = check_indirection((yyvsp[(2) - (2)].list), yyscanner);
20697: 					(yyval.node) = (PGNode *)a;
20698: 				;}
20699:     break;
20700: 
20701:   case 817:
20702: #line 2270 "third_party/libpg_query/grammar/statements/select.y"
20703:     {
20704: 					PGSubLink *n = makeNode(PGSubLink);
20705: 					n->subLinkType = PG_EXISTS_SUBLINK;
20706: 					n->subLinkId = 0;
20707: 					n->testexpr = NULL;
20708: 					n->operName = NIL;
20709: 					n->subselect = (yyvsp[(2) - (2)].node);
20710: 					n->location = (yylsp[(1) - (2)]);
20711: 					(yyval.node) = (PGNode *)n;
20712: 				;}
20713:     break;
20714: 
20715:   case 818:
20716: #line 2283 "third_party/libpg_query/grammar/statements/select.y"
20717:     {
20718: 					(yyval.node) = (PGNode *) makeFuncCall((yyvsp[(1) - (3)].list), NIL, (yylsp[(1) - (3)]));
20719: 				;}
20720:     break;
20721: 
20722:   case 819:
20723: #line 2287 "third_party/libpg_query/grammar/statements/select.y"
20724:     {
20725: 					PGFuncCall *n = makeFuncCall((yyvsp[(1) - (5)].list), (yyvsp[(3) - (5)].list), (yylsp[(1) - (5)]));
20726: 					n->agg_order = (yyvsp[(4) - (5)].list);
20727: 					(yyval.node) = (PGNode *)n;
20728: 				;}
20729:     break;
20730: 
20731:   case 820:
20732: #line 2293 "third_party/libpg_query/grammar/statements/select.y"
20733:     {
20734: 					PGFuncCall *n = makeFuncCall((yyvsp[(1) - (6)].list), list_make1((yyvsp[(4) - (6)].node)), (yylsp[(1) - (6)]));
20735: 					n->func_variadic = true;
20736: 					n->agg_order = (yyvsp[(5) - (6)].list);
20737: 					(yyval.node) = (PGNode *)n;
20738: 				;}
20739:     break;
20740: 
20741:   case 821:
20742: #line 2300 "third_party/libpg_query/grammar/statements/select.y"
20743:     {
20744: 					PGFuncCall *n = makeFuncCall((yyvsp[(1) - (8)].list), lappend((yyvsp[(3) - (8)].list), (yyvsp[(6) - (8)].node)), (yylsp[(1) - (8)]));
20745: 					n->func_variadic = true;
20746: 					n->agg_order = (yyvsp[(7) - (8)].list);
20747: 					(yyval.node) = (PGNode *)n;
20748: 				;}
20749:     break;
20750: 
20751:   case 822:
20752: #line 2307 "third_party/libpg_query/grammar/statements/select.y"
20753:     {
20754: 					PGFuncCall *n = makeFuncCall((yyvsp[(1) - (6)].list), (yyvsp[(4) - (6)].list), (yylsp[(1) - (6)]));
20755: 					n->agg_order = (yyvsp[(5) - (6)].list);
20756: 					/* Ideally we'd mark the PGFuncCall node to indicate
20757: 					 * "must be an aggregate", but there's no provision
20758: 					 * for that in PGFuncCall at the moment.
20759: 					 */
20760: 					(yyval.node) = (PGNode *)n;
20761: 				;}
20762:     break;
20763: 
20764:   case 823:
20765: #line 2317 "third_party/libpg_query/grammar/statements/select.y"
20766:     {
20767: 					PGFuncCall *n = makeFuncCall((yyvsp[(1) - (6)].list), (yyvsp[(4) - (6)].list), (yylsp[(1) - (6)]));
20768: 					n->agg_order = (yyvsp[(5) - (6)].list);
20769: 					n->agg_distinct = true;
20770: 					(yyval.node) = (PGNode *)n;
20771: 				;}
20772:     break;
20773: 
20774:   case 824:
20775: #line 2324 "third_party/libpg_query/grammar/statements/select.y"
20776:     {
20777: 					/*
20778: 					 * We consider AGGREGATE(*) to invoke a parameterless
20779: 					 * aggregate.  This does the right thing for COUNT(*),
20780: 					 * and there are no other aggregates in SQL that accept
20781: 					 * '*' as parameter.
20782: 					 *
20783: 					 * The PGFuncCall node is also marked agg_star = true,
20784: 					 * so that later processing can detect what the argument
20785: 					 * really was.
20786: 					 */
20787: 					PGFuncCall *n = makeFuncCall((yyvsp[(1) - (4)].list), NIL, (yylsp[(1) - (4)]));
20788: 					n->agg_star = true;
20789: 					(yyval.node) = (PGNode *)n;
20790: 				;}
20791:     break;
20792: 
20793:   case 825:
20794: #line 2352 "third_party/libpg_query/grammar/statements/select.y"
20795:     {
20796: 					PGFuncCall *n = (PGFuncCall *) (yyvsp[(1) - (4)].node);
20797: 					/*
20798: 					 * The order clause for WITHIN GROUP and the one for
20799: 					 * plain-aggregate ORDER BY share a field, so we have to
20800: 					 * check here that at most one is present.  We also check
20801: 					 * for DISTINCT and VARIADIC here to give a better error
20802: 					 * location.  Other consistency checks are deferred to
20803: 					 * parse analysis.
20804: 					 */
20805: 					if ((yyvsp[(2) - (4)].list) != NIL)
20806: 					{
20807: 						if (n->agg_order != NIL)
20808: 							ereport(ERROR,
20809: 									(errcode(PG_ERRCODE_SYNTAX_ERROR),
20810: 									 errmsg("cannot use multiple ORDER BY clauses with WITHIN GROUP"),
20811: 									 parser_errposition((yylsp[(2) - (4)]))));
20812: 						if (n->agg_distinct)
20813: 							ereport(ERROR,
20814: 									(errcode(PG_ERRCODE_SYNTAX_ERROR),
20815: 									 errmsg("cannot use DISTINCT with WITHIN GROUP"),
20816: 									 parser_errposition((yylsp[(2) - (4)]))));
20817: 						if (n->func_variadic)
20818: 							ereport(ERROR,
20819: 									(errcode(PG_ERRCODE_SYNTAX_ERROR),
20820: 									 errmsg("cannot use VARIADIC with WITHIN GROUP"),
20821: 									 parser_errposition((yylsp[(2) - (4)]))));
20822: 						n->agg_order = (yyvsp[(2) - (4)].list);
20823: 						n->agg_within_group = true;
20824: 					}
20825: 					n->agg_filter = (yyvsp[(3) - (4)].node);
20826: 					n->over = (yyvsp[(4) - (4)].windef);
20827: 					(yyval.node) = (PGNode *) n;
20828: 				;}
20829:     break;
20830: 
20831:   case 826:
20832: #line 2387 "third_party/libpg_query/grammar/statements/select.y"
20833:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
20834:     break;
20835: 
20836:   case 827:
20837: #line 2397 "third_party/libpg_query/grammar/statements/select.y"
20838:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
20839:     break;
20840: 
20841:   case 828:
20842: #line 2398 "third_party/libpg_query/grammar/statements/select.y"
20843:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
20844:     break;
20845: 
20846:   case 829:
20847: #line 2406 "third_party/libpg_query/grammar/statements/select.y"
20848:     {
20849: 					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("pg_collation_for"),
20850: 											   list_make1((yyvsp[(4) - (5)].node)),
20851: 											   (yylsp[(1) - (5)]));
20852: 				;}
20853:     break;
20854: 
20855:   case 830:
20856: #line 2412 "third_party/libpg_query/grammar/statements/select.y"
20857:     {
20858: 					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_DATE, -1, (yylsp[(1) - (1)]));
20859: 				;}
20860:     break;
20861: 
20862:   case 831:
20863: #line 2416 "third_party/libpg_query/grammar/statements/select.y"
20864:     {
20865: 					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIME, -1, (yylsp[(1) - (1)]));
20866: 				;}
20867:     break;
20868: 
20869:   case 832:
20870: #line 2420 "third_party/libpg_query/grammar/statements/select.y"
20871:     {
20872: 					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIME_N, (yyvsp[(3) - (4)].ival), (yylsp[(1) - (4)]));
20873: 				;}
20874:     break;
20875: 
20876:   case 833:
20877: #line 2424 "third_party/libpg_query/grammar/statements/select.y"
20878:     {
20879: 					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIMESTAMP, -1, (yylsp[(1) - (1)]));
20880: 				;}
20881:     break;
20882: 
20883:   case 834:
20884: #line 2428 "third_party/libpg_query/grammar/statements/select.y"
20885:     {
20886: 					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIMESTAMP_N, (yyvsp[(3) - (4)].ival), (yylsp[(1) - (4)]));
20887: 				;}
20888:     break;
20889: 
20890:   case 835:
20891: #line 2432 "third_party/libpg_query/grammar/statements/select.y"
20892:     {
20893: 					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIME, -1, (yylsp[(1) - (1)]));
20894: 				;}
20895:     break;
20896: 
20897:   case 836:
20898: #line 2436 "third_party/libpg_query/grammar/statements/select.y"
20899:     {
20900: 					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIME_N, (yyvsp[(3) - (4)].ival), (yylsp[(1) - (4)]));
20901: 				;}
20902:     break;
20903: 
20904:   case 837:
20905: #line 2440 "third_party/libpg_query/grammar/statements/select.y"
20906:     {
20907: 					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIMESTAMP, -1, (yylsp[(1) - (1)]));
20908: 				;}
20909:     break;
20910: 
20911:   case 838:
20912: #line 2444 "third_party/libpg_query/grammar/statements/select.y"
20913:     {
20914: 					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIMESTAMP_N, (yyvsp[(3) - (4)].ival), (yylsp[(1) - (4)]));
20915: 				;}
20916:     break;
20917: 
20918:   case 839:
20919: #line 2448 "third_party/libpg_query/grammar/statements/select.y"
20920:     {
20921: 					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_ROLE, -1, (yylsp[(1) - (1)]));
20922: 				;}
20923:     break;
20924: 
20925:   case 840:
20926: #line 2452 "third_party/libpg_query/grammar/statements/select.y"
20927:     {
20928: 					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_USER, -1, (yylsp[(1) - (1)]));
20929: 				;}
20930:     break;
20931: 
20932:   case 841:
20933: #line 2456 "third_party/libpg_query/grammar/statements/select.y"
20934:     {
20935: 					(yyval.node) = makeSQLValueFunction(PG_SVFOP_SESSION_USER, -1, (yylsp[(1) - (1)]));
20936: 				;}
20937:     break;
20938: 
20939:   case 842:
20940: #line 2460 "third_party/libpg_query/grammar/statements/select.y"
20941:     {
20942: 					(yyval.node) = makeSQLValueFunction(PG_SVFOP_USER, -1, (yylsp[(1) - (1)]));
20943: 				;}
20944:     break;
20945: 
20946:   case 843:
20947: #line 2464 "third_party/libpg_query/grammar/statements/select.y"
20948:     {
20949: 					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_CATALOG, -1, (yylsp[(1) - (1)]));
20950: 				;}
20951:     break;
20952: 
20953:   case 844:
20954: #line 2468 "third_party/libpg_query/grammar/statements/select.y"
20955:     {
20956: 					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_SCHEMA, -1, (yylsp[(1) - (1)]));
20957: 				;}
20958:     break;
20959: 
20960:   case 845:
20961: #line 2472 "third_party/libpg_query/grammar/statements/select.y"
20962:     { (yyval.node) = makeTypeCast((yyvsp[(3) - (6)].node), (yyvsp[(5) - (6)].typnam), 0, (yylsp[(1) - (6)])); ;}
20963:     break;
20964: 
20965:   case 846:
20966: #line 2474 "third_party/libpg_query/grammar/statements/select.y"
20967:     { (yyval.node) = makeTypeCast((yyvsp[(3) - (6)].node), (yyvsp[(5) - (6)].typnam), 1, (yylsp[(1) - (6)])); ;}
20968:     break;
20969: 
20970:   case 847:
20971: #line 2476 "third_party/libpg_query/grammar/statements/select.y"
20972:     {
20973: 					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("date_part"), (yyvsp[(3) - (4)].list), (yylsp[(1) - (4)]));
20974: 				;}
20975:     break;
20976: 
20977:   case 848:
20978: #line 2480 "third_party/libpg_query/grammar/statements/select.y"
20979:     {
20980: 					/* overlay(A PLACING B FROM C FOR D) is converted to
20981: 					 * overlay(A, B, C, D)
20982: 					 * overlay(A PLACING B FROM C) is converted to
20983: 					 * overlay(A, B, C)
20984: 					 */
20985: 					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlay"), (yyvsp[(3) - (4)].list), (yylsp[(1) - (4)]));
20986: 				;}
20987:     break;
20988: 
20989:   case 849:
20990: #line 2489 "third_party/libpg_query/grammar/statements/select.y"
20991:     {
20992: 					/* position(A in B) is converted to position(B, A) */
20993: 					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("position"), (yyvsp[(3) - (4)].list), (yylsp[(1) - (4)]));
20994: 				;}
20995:     break;
20996: 
20997:   case 850:
20998: #line 2494 "third_party/libpg_query/grammar/statements/select.y"
20999:     {
21000: 					/* substring(A from B for C) is converted to
21001: 					 * substring(A, B, C) - thomas 2000-11-28
21002: 					 */
21003: 					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("substring"), (yyvsp[(3) - (4)].list), (yylsp[(1) - (4)]));
21004: 				;}
21005:     break;
21006: 
21007:   case 851:
21008: #line 2501 "third_party/libpg_query/grammar/statements/select.y"
21009:     {
21010: 					/* TREAT(expr AS target) converts expr of a particular type to target,
21011: 					 * which is defined to be a subtype of the original expression.
21012: 					 * In SQL99, this is intended for use with structured UDTs,
21013: 					 * but let's make this a generally useful form allowing stronger
21014: 					 * coercions than are handled by implicit casting.
21015: 					 *
21016: 					 * Convert SystemTypeName() to SystemFuncName() even though
21017: 					 * at the moment they result in the same thing.
21018: 					 */
21019: 					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName(((PGValue *)llast((yyvsp[(5) - (6)].typnam)->names))->val.str),
21020: 												list_make1((yyvsp[(3) - (6)].node)),
21021: 												(yylsp[(1) - (6)]));
21022: 				;}
21023:     break;
21024: 
21025:   case 852:
21026: #line 2516 "third_party/libpg_query/grammar/statements/select.y"
21027:     {
21028: 					/* various trim expressions are defined in SQL
21029: 					 * - thomas 1997-07-19
21030: 					 */
21031: 					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[(4) - (5)].list), (yylsp[(1) - (5)]));
21032: 				;}
21033:     break;
21034: 
21035:   case 853:
21036: #line 2523 "third_party/libpg_query/grammar/statements/select.y"
21037:     {
21038: 					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("ltrim"), (yyvsp[(4) - (5)].list), (yylsp[(1) - (5)]));
21039: 				;}
21040:     break;
21041: 
21042:   case 854:
21043: #line 2527 "third_party/libpg_query/grammar/statements/select.y"
21044:     {
21045: 					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("rtrim"), (yyvsp[(4) - (5)].list), (yylsp[(1) - (5)]));
21046: 				;}
21047:     break;
21048: 
21049:   case 855:
21050: #line 2531 "third_party/libpg_query/grammar/statements/select.y"
21051:     {
21052: 					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[(3) - (4)].list), (yylsp[(1) - (4)]));
21053: 				;}
21054:     break;
21055: 
21056:   case 856:
21057: #line 2535 "third_party/libpg_query/grammar/statements/select.y"
21058:     {
21059: 					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NULLIF, "=", (yyvsp[(3) - (6)].node), (yyvsp[(5) - (6)].node), (yylsp[(1) - (6)]));
21060: 				;}
21061:     break;
21062: 
21063:   case 857:
21064: #line 2539 "third_party/libpg_query/grammar/statements/select.y"
21065:     {
21066: 					PGCoalesceExpr *c = makeNode(PGCoalesceExpr);
21067: 					c->args = (yyvsp[(3) - (4)].list);
21068: 					c->location = (yylsp[(1) - (4)]);
21069: 					(yyval.node) = (PGNode *)c;
21070: 				;}
21071:     break;
21072: 
21073:   case 858:
21074: #line 2552 "third_party/libpg_query/grammar/statements/select.y"
21075:     { (yyval.list) = (yyvsp[(4) - (5)].list); ;}
21076:     break;
21077: 
21078:   case 859:
21079: #line 2553 "third_party/libpg_query/grammar/statements/select.y"
21080:     { (yyval.list) = NIL; ;}
21081:     break;
21082: 
21083:   case 860:
21084: #line 2557 "third_party/libpg_query/grammar/statements/select.y"
21085:     { (yyval.node) = (yyvsp[(4) - (5)].node); ;}
21086:     break;
21087: 
21088:   case 861:
21089: #line 2558 "third_party/libpg_query/grammar/statements/select.y"
21090:     { (yyval.node) = NULL; ;}
21091:     break;
21092: 
21093:   case 862:
21094: #line 2566 "third_party/libpg_query/grammar/statements/select.y"
21095:     { (yyval.list) = (yyvsp[(2) - (2)].list); ;}
21096:     break;
21097: 
21098:   case 863:
21099: #line 2567 "third_party/libpg_query/grammar/statements/select.y"
21100:     { (yyval.list) = NIL; ;}
21101:     break;
21102: 
21103:   case 864:
21104: #line 2571 "third_party/libpg_query/grammar/statements/select.y"
21105:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].windef)); ;}
21106:     break;
21107: 
21108:   case 865:
21109: #line 2573 "third_party/libpg_query/grammar/statements/select.y"
21110:     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].windef)); ;}
21111:     break;
21112: 
21113:   case 866:
21114: #line 2578 "third_party/libpg_query/grammar/statements/select.y"
21115:     {
21116: 					PGWindowDef *n = (yyvsp[(3) - (3)].windef);
21117: 					n->name = (yyvsp[(1) - (3)].str);
21118: 					(yyval.windef) = n;
21119: 				;}
21120:     break;
21121: 
21122:   case 867:
21123: #line 2586 "third_party/libpg_query/grammar/statements/select.y"
21124:     { (yyval.windef) = (yyvsp[(2) - (2)].windef); ;}
21125:     break;
21126: 
21127:   case 868:
21128: #line 2588 "third_party/libpg_query/grammar/statements/select.y"
21129:     {
21130: 					PGWindowDef *n = makeNode(PGWindowDef);
21131: 					n->name = (yyvsp[(2) - (2)].str);
21132: 					n->refname = NULL;
21133: 					n->partitionClause = NIL;
21134: 					n->orderClause = NIL;
21135: 					n->frameOptions = FRAMEOPTION_DEFAULTS;
21136: 					n->startOffset = NULL;
21137: 					n->endOffset = NULL;
21138: 					n->location = (yylsp[(2) - (2)]);
21139: 					(yyval.windef) = n;
21140: 				;}
21141:     break;
21142: 
21143:   case 869:
21144: #line 2601 "third_party/libpg_query/grammar/statements/select.y"
21145:     { (yyval.windef) = NULL; ;}
21146:     break;
21147: 
21148:   case 870:
21149: #line 2606 "third_party/libpg_query/grammar/statements/select.y"
21150:     {
21151: 					PGWindowDef *n = makeNode(PGWindowDef);
21152: 					n->name = NULL;
21153: 					n->refname = (yyvsp[(2) - (6)].str);
21154: 					n->partitionClause = (yyvsp[(3) - (6)].list);
21155: 					n->orderClause = (yyvsp[(4) - (6)].list);
21156: 					/* copy relevant fields of opt_frame_clause */
21157: 					n->frameOptions = (yyvsp[(5) - (6)].windef)->frameOptions;
21158: 					n->startOffset = (yyvsp[(5) - (6)].windef)->startOffset;
21159: 					n->endOffset = (yyvsp[(5) - (6)].windef)->endOffset;
21160: 					n->location = (yylsp[(1) - (6)]);
21161: 					(yyval.windef) = n;
21162: 				;}
21163:     break;
21164: 
21165:   case 871:
21166: #line 2631 "third_party/libpg_query/grammar/statements/select.y"
21167:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
21168:     break;
21169: 
21170:   case 872:
21171: #line 2632 "third_party/libpg_query/grammar/statements/select.y"
21172:     { (yyval.str) = NULL; ;}
21173:     break;
21174: 
21175:   case 873:
21176: #line 2635 "third_party/libpg_query/grammar/statements/select.y"
21177:     { (yyval.list) = (yyvsp[(3) - (3)].list); ;}
21178:     break;
21179: 
21180:   case 874:
21181: #line 2636 "third_party/libpg_query/grammar/statements/select.y"
21182:     { (yyval.list) = NIL; ;}
21183:     break;
21184: 
21185:   case 875:
21186: #line 2648 "third_party/libpg_query/grammar/statements/select.y"
21187:     {
21188: 					PGWindowDef *n = (yyvsp[(2) - (2)].windef);
21189: 					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_RANGE;
21190: 					(yyval.windef) = n;
21191: 				;}
21192:     break;
21193: 
21194:   case 876:
21195: #line 2654 "third_party/libpg_query/grammar/statements/select.y"
21196:     {
21197: 					PGWindowDef *n = (yyvsp[(2) - (2)].windef);
21198: 					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_ROWS;
21199: 					(yyval.windef) = n;
21200: 				;}
21201:     break;
21202: 
21203:   case 877:
21204: #line 2660 "third_party/libpg_query/grammar/statements/select.y"
21205:     {
21206: 					PGWindowDef *n = makeNode(PGWindowDef);
21207: 					n->frameOptions = FRAMEOPTION_DEFAULTS;
21208: 					n->startOffset = NULL;
21209: 					n->endOffset = NULL;
21210: 					(yyval.windef) = n;
21211: 				;}
21212:     break;
21213: 
21214:   case 878:
21215: #line 2670 "third_party/libpg_query/grammar/statements/select.y"
21216:     {
21217: 					PGWindowDef *n = (yyvsp[(1) - (1)].windef);
21218: 					/* reject invalid cases */
21219: 					if (n->frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
21220: 						ereport(ERROR,
21221: 								(errcode(PG_ERRCODE_WINDOWING_ERROR),
21222: 								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
21223: 								 parser_errposition((yylsp[(1) - (1)]))));
21224: 					if (n->frameOptions & FRAMEOPTION_START_VALUE_FOLLOWING)
21225: 						ereport(ERROR,
21226: 								(errcode(PG_ERRCODE_WINDOWING_ERROR),
21227: 								 errmsg("frame starting from following row cannot end with current row"),
21228: 								 parser_errposition((yylsp[(1) - (1)]))));
21229: 					n->frameOptions |= FRAMEOPTION_END_CURRENT_ROW;
21230: 					(yyval.windef) = n;
21231: 				;}
21232:     break;
21233: 
21234:   case 879:
21235: #line 2687 "third_party/libpg_query/grammar/statements/select.y"
21236:     {
21237: 					PGWindowDef *n1 = (yyvsp[(2) - (4)].windef);
21238: 					PGWindowDef *n2 = (yyvsp[(4) - (4)].windef);
21239: 					/* form merged options */
21240: 					int		frameOptions = n1->frameOptions;
21241: 					/* shift converts START_ options to END_ options */
21242: 					frameOptions |= n2->frameOptions << 1;
21243: 					frameOptions |= FRAMEOPTION_BETWEEN;
21244: 					/* reject invalid cases */
21245: 					if (frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
21246: 						ereport(ERROR,
21247: 								(errcode(PG_ERRCODE_WINDOWING_ERROR),
21248: 								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
21249: 								 parser_errposition((yylsp[(2) - (4)]))));
21250: 					if (frameOptions & FRAMEOPTION_END_UNBOUNDED_PRECEDING)
21251: 						ereport(ERROR,
21252: 								(errcode(PG_ERRCODE_WINDOWING_ERROR),
21253: 								 errmsg("frame end cannot be UNBOUNDED PRECEDING"),
21254: 								 parser_errposition((yylsp[(4) - (4)]))));
21255: 					if ((frameOptions & FRAMEOPTION_START_CURRENT_ROW) &&
21256: 						(frameOptions & FRAMEOPTION_END_VALUE_PRECEDING))
21257: 						ereport(ERROR,
21258: 								(errcode(PG_ERRCODE_WINDOWING_ERROR),
21259: 								 errmsg("frame starting from current row cannot have preceding rows"),
21260: 								 parser_errposition((yylsp[(4) - (4)]))));
21261: 					if ((frameOptions & FRAMEOPTION_START_VALUE_FOLLOWING) &&
21262: 						(frameOptions & (FRAMEOPTION_END_VALUE_PRECEDING |
21263: 										 FRAMEOPTION_END_CURRENT_ROW)))
21264: 						ereport(ERROR,
21265: 								(errcode(PG_ERRCODE_WINDOWING_ERROR),
21266: 								 errmsg("frame starting from following row cannot have preceding rows"),
21267: 								 parser_errposition((yylsp[(4) - (4)]))));
21268: 					n1->frameOptions = frameOptions;
21269: 					n1->endOffset = n2->startOffset;
21270: 					(yyval.windef) = n1;
21271: 				;}
21272:     break;
21273: 
21274:   case 880:
21275: #line 2732 "third_party/libpg_query/grammar/statements/select.y"
21276:     {
21277: 					PGWindowDef *n = makeNode(PGWindowDef);
21278: 					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_PRECEDING;
21279: 					n->startOffset = NULL;
21280: 					n->endOffset = NULL;
21281: 					(yyval.windef) = n;
21282: 				;}
21283:     break;
21284: 
21285:   case 881:
21286: #line 2740 "third_party/libpg_query/grammar/statements/select.y"
21287:     {
21288: 					PGWindowDef *n = makeNode(PGWindowDef);
21289: 					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_FOLLOWING;
21290: 					n->startOffset = NULL;
21291: 					n->endOffset = NULL;
21292: 					(yyval.windef) = n;
21293: 				;}
21294:     break;
21295: 
21296:   case 882:
21297: #line 2748 "third_party/libpg_query/grammar/statements/select.y"
21298:     {
21299: 					PGWindowDef *n = makeNode(PGWindowDef);
21300: 					n->frameOptions = FRAMEOPTION_START_CURRENT_ROW;
21301: 					n->startOffset = NULL;
21302: 					n->endOffset = NULL;
21303: 					(yyval.windef) = n;
21304: 				;}
21305:     break;
21306: 
21307:   case 883:
21308: #line 2756 "third_party/libpg_query/grammar/statements/select.y"
21309:     {
21310: 					PGWindowDef *n = makeNode(PGWindowDef);
21311: 					n->frameOptions = FRAMEOPTION_START_VALUE_PRECEDING;
21312: 					n->startOffset = (yyvsp[(1) - (2)].node);
21313: 					n->endOffset = NULL;
21314: 					(yyval.windef) = n;
21315: 				;}
21316:     break;
21317: 
21318:   case 884:
21319: #line 2764 "third_party/libpg_query/grammar/statements/select.y"
21320:     {
21321: 					PGWindowDef *n = makeNode(PGWindowDef);
21322: 					n->frameOptions = FRAMEOPTION_START_VALUE_FOLLOWING;
21323: 					n->startOffset = (yyvsp[(1) - (2)].node);
21324: 					n->endOffset = NULL;
21325: 					(yyval.windef) = n;
21326: 				;}
21327:     break;
21328: 
21329:   case 885:
21330: #line 2784 "third_party/libpg_query/grammar/statements/select.y"
21331:     { (yyval.list) = (yyvsp[(3) - (4)].list); ;}
21332:     break;
21333: 
21334:   case 886:
21335: #line 2785 "third_party/libpg_query/grammar/statements/select.y"
21336:     { (yyval.list) = NIL; ;}
21337:     break;
21338: 
21339:   case 887:
21340: #line 2788 "third_party/libpg_query/grammar/statements/select.y"
21341:     { (yyval.list) = (yyvsp[(1) - (1)].list);;}
21342:     break;
21343: 
21344:   case 888:
21345: #line 2789 "third_party/libpg_query/grammar/statements/select.y"
21346:     { (yyval.list) = lappend((yyvsp[(2) - (5)].list), (yyvsp[(4) - (5)].node)); ;}
21347:     break;
21348: 
21349:   case 889:
21350: #line 2793 "third_party/libpg_query/grammar/statements/select.y"
21351:     {
21352: 		PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
21353: 		na->name = (yyvsp[(1) - (3)].str);
21354: 		na->arg = (PGExpr *) (yyvsp[(3) - (3)].node);
21355: 		na->argnumber = -1;
21356: 		na->location = (yylsp[(1) - (3)]);
21357: 		(yyval.node) = (PGNode *) na;
21358: 	;}
21359:     break;
21360: 
21361:   case 890:
21362: #line 2803 "third_party/libpg_query/grammar/statements/select.y"
21363:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].node)); ;}
21364:     break;
21365: 
21366:   case 891:
21367: #line 2804 "third_party/libpg_query/grammar/statements/select.y"
21368:     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node)); ;}
21369:     break;
21370: 
21371:   case 892:
21372: #line 2806 "third_party/libpg_query/grammar/statements/select.y"
21373:     { (yyval.subquerytype) = PG_ANY_SUBLINK; ;}
21374:     break;
21375: 
21376:   case 893:
21377: #line 2807 "third_party/libpg_query/grammar/statements/select.y"
21378:     { (yyval.subquerytype) = PG_ANY_SUBLINK; ;}
21379:     break;
21380: 
21381:   case 894:
21382: #line 2808 "third_party/libpg_query/grammar/statements/select.y"
21383:     { (yyval.subquerytype) = PG_ALL_SUBLINK; ;}
21384:     break;
21385: 
21386:   case 895:
21387: #line 2811 "third_party/libpg_query/grammar/statements/select.y"
21388:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
21389:     break;
21390: 
21391:   case 896:
21392: #line 2812 "third_party/libpg_query/grammar/statements/select.y"
21393:     { (yyval.str) = (char*) (yyvsp[(1) - (1)].conststr); ;}
21394:     break;
21395: 
21396:   case 897:
21397: #line 2815 "third_party/libpg_query/grammar/statements/select.y"
21398:     { (yyval.conststr) = "+"; ;}
21399:     break;
21400: 
21401:   case 898:
21402: #line 2816 "third_party/libpg_query/grammar/statements/select.y"
21403:     { (yyval.conststr) = "-"; ;}
21404:     break;
21405: 
21406:   case 899:
21407: #line 2817 "third_party/libpg_query/grammar/statements/select.y"
21408:     { (yyval.conststr) = "*"; ;}
21409:     break;
21410: 
21411:   case 900:
21412: #line 2818 "third_party/libpg_query/grammar/statements/select.y"
21413:     { (yyval.conststr) = "/"; ;}
21414:     break;
21415: 
21416:   case 901:
21417: #line 2819 "third_party/libpg_query/grammar/statements/select.y"
21418:     { (yyval.conststr) = "%"; ;}
21419:     break;
21420: 
21421:   case 902:
21422: #line 2820 "third_party/libpg_query/grammar/statements/select.y"
21423:     { (yyval.conststr) = "^"; ;}
21424:     break;
21425: 
21426:   case 903:
21427: #line 2821 "third_party/libpg_query/grammar/statements/select.y"
21428:     { (yyval.conststr) = "<"; ;}
21429:     break;
21430: 
21431:   case 904:
21432: #line 2822 "third_party/libpg_query/grammar/statements/select.y"
21433:     { (yyval.conststr) = ">"; ;}
21434:     break;
21435: 
21436:   case 905:
21437: #line 2823 "third_party/libpg_query/grammar/statements/select.y"
21438:     { (yyval.conststr) = "="; ;}
21439:     break;
21440: 
21441:   case 906:
21442: #line 2824 "third_party/libpg_query/grammar/statements/select.y"
21443:     { (yyval.conststr) = "<="; ;}
21444:     break;
21445: 
21446:   case 907:
21447: #line 2825 "third_party/libpg_query/grammar/statements/select.y"
21448:     { (yyval.conststr) = ">="; ;}
21449:     break;
21450: 
21451:   case 908:
21452: #line 2826 "third_party/libpg_query/grammar/statements/select.y"
21453:     { (yyval.conststr) = "<>"; ;}
21454:     break;
21455: 
21456:   case 909:
21457: #line 2830 "third_party/libpg_query/grammar/statements/select.y"
21458:     { (yyval.list) = list_make1(makeString((yyvsp[(1) - (1)].str))); ;}
21459:     break;
21460: 
21461:   case 910:
21462: #line 2832 "third_party/libpg_query/grammar/statements/select.y"
21463:     { (yyval.list) = (yyvsp[(3) - (4)].list); ;}
21464:     break;
21465: 
21466:   case 911:
21467: #line 2837 "third_party/libpg_query/grammar/statements/select.y"
21468:     { (yyval.list) = list_make1(makeString((yyvsp[(1) - (1)].str))); ;}
21469:     break;
21470: 
21471:   case 912:
21472: #line 2839 "third_party/libpg_query/grammar/statements/select.y"
21473:     { (yyval.list) = (yyvsp[(3) - (4)].list); ;}
21474:     break;
21475: 
21476:   case 913:
21477: #line 2844 "third_party/libpg_query/grammar/statements/select.y"
21478:     { (yyval.list) = list_make1(makeString((yyvsp[(1) - (1)].str))); ;}
21479:     break;
21480: 
21481:   case 914:
21482: #line 2846 "third_party/libpg_query/grammar/statements/select.y"
21483:     { (yyval.list) = (yyvsp[(3) - (4)].list); ;}
21484:     break;
21485: 
21486:   case 915:
21487: #line 2848 "third_party/libpg_query/grammar/statements/select.y"
21488:     { (yyval.list) = list_make1(makeString("~~")); ;}
21489:     break;
21490: 
21491:   case 916:
21492: #line 2850 "third_party/libpg_query/grammar/statements/select.y"
21493:     { (yyval.list) = list_make1(makeString("!~~")); ;}
21494:     break;
21495: 
21496:   case 917:
21497: #line 2852 "third_party/libpg_query/grammar/statements/select.y"
21498:     { (yyval.list) = list_make1(makeString("~~~")); ;}
21499:     break;
21500: 
21501:   case 918:
21502: #line 2854 "third_party/libpg_query/grammar/statements/select.y"
21503:     { (yyval.list) = list_make1(makeString("!~~~")); ;}
21504:     break;
21505: 
21506:   case 919:
21507: #line 2856 "third_party/libpg_query/grammar/statements/select.y"
21508:     { (yyval.list) = list_make1(makeString("~~*")); ;}
21509:     break;
21510: 
21511:   case 920:
21512: #line 2858 "third_party/libpg_query/grammar/statements/select.y"
21513:     { (yyval.list) = list_make1(makeString("!~~*")); ;}
21514:     break;
21515: 
21516:   case 921:
21517: #line 2872 "third_party/libpg_query/grammar/statements/select.y"
21518:     { (yyval.list) = list_make1(makeString((yyvsp[(1) - (1)].str))); ;}
21519:     break;
21520: 
21521:   case 922:
21522: #line 2874 "third_party/libpg_query/grammar/statements/select.y"
21523:     { (yyval.list) = lcons(makeString((yyvsp[(1) - (3)].str)), (yyvsp[(3) - (3)].list)); ;}
21524:     break;
21525: 
21526:   case 923:
21527: #line 2878 "third_party/libpg_query/grammar/statements/select.y"
21528:     {
21529: 					(yyval.list) = list_make1((yyvsp[(1) - (1)].node));
21530: 				;}
21531:     break;
21532: 
21533:   case 924:
21534: #line 2882 "third_party/libpg_query/grammar/statements/select.y"
21535:     {
21536: 					(yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node));
21537: 				;}
21538:     break;
21539: 
21540:   case 925:
21541: #line 2889 "third_party/libpg_query/grammar/statements/select.y"
21542:     {
21543: 					(yyval.list) = (yyvsp[(1) - (1)].list);
21544: 				;}
21545:     break;
21546: 
21547:   case 926:
21548: #line 2893 "third_party/libpg_query/grammar/statements/select.y"
21549:     {
21550: 					(yyval.list) = NULL;
21551: 				;}
21552:     break;
21553: 
21554:   case 927:
21555: #line 2901 "third_party/libpg_query/grammar/statements/select.y"
21556:     {
21557: 					(yyval.list) = list_make1((yyvsp[(1) - (1)].node));
21558: 				;}
21559:     break;
21560: 
21561:   case 928:
21562: #line 2905 "third_party/libpg_query/grammar/statements/select.y"
21563:     {
21564: 					(yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node));
21565: 				;}
21566:     break;
21567: 
21568:   case 929:
21569: #line 2911 "third_party/libpg_query/grammar/statements/select.y"
21570:     {
21571: 					(yyval.node) = (yyvsp[(1) - (1)].node);
21572: 				;}
21573:     break;
21574: 
21575:   case 930:
21576: #line 2915 "third_party/libpg_query/grammar/statements/select.y"
21577:     {
21578: 					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
21579: 					na->name = (yyvsp[(1) - (3)].str);
21580: 					na->arg = (PGExpr *) (yyvsp[(3) - (3)].node);
21581: 					na->argnumber = -1;		/* until determined */
21582: 					na->location = (yylsp[(1) - (3)]);
21583: 					(yyval.node) = (PGNode *) na;
21584: 				;}
21585:     break;
21586: 
21587:   case 931:
21588: #line 2924 "third_party/libpg_query/grammar/statements/select.y"
21589:     {
21590: 					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
21591: 					na->name = (yyvsp[(1) - (3)].str);
21592: 					na->arg = (PGExpr *) (yyvsp[(3) - (3)].node);
21593: 					na->argnumber = -1;		/* until determined */
21594: 					na->location = (yylsp[(1) - (3)]);
21595: 					(yyval.node) = (PGNode *) na;
21596: 				;}
21597:     break;
21598: 
21599:   case 932:
21600: #line 2934 "third_party/libpg_query/grammar/statements/select.y"
21601:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].typnam)); ;}
21602:     break;
21603: 
21604:   case 933:
21605: #line 2935 "third_party/libpg_query/grammar/statements/select.y"
21606:     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typnam)); ;}
21607:     break;
21608: 
21609:   case 934:
21610: #line 2940 "third_party/libpg_query/grammar/statements/select.y"
21611:     {
21612: 					(yyval.list) = list_make2(makeStringConst((yyvsp[(1) - (3)].str), (yylsp[(1) - (3)])), (yyvsp[(3) - (3)].node));
21613: 				;}
21614:     break;
21615: 
21616:   case 935:
21617: #line 2943 "third_party/libpg_query/grammar/statements/select.y"
21618:     { (yyval.list) = NIL; ;}
21619:     break;
21620: 
21621:   case 936:
21622: #line 2950 "third_party/libpg_query/grammar/statements/select.y"
21623:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
21624:     break;
21625: 
21626:   case 937:
21627: #line 2951 "third_party/libpg_query/grammar/statements/select.y"
21628:     { (yyval.str) = (char*) "year"; ;}
21629:     break;
21630: 
21631:   case 938:
21632: #line 2952 "third_party/libpg_query/grammar/statements/select.y"
21633:     { (yyval.str) = (char*) "month"; ;}
21634:     break;
21635: 
21636:   case 939:
21637: #line 2953 "third_party/libpg_query/grammar/statements/select.y"
21638:     { (yyval.str) = (char*) "day"; ;}
21639:     break;
21640: 
21641:   case 940:
21642: #line 2954 "third_party/libpg_query/grammar/statements/select.y"
21643:     { (yyval.str) = (char*) "hour"; ;}
21644:     break;
21645: 
21646:   case 941:
21647: #line 2955 "third_party/libpg_query/grammar/statements/select.y"
21648:     { (yyval.str) = (char*) "minute"; ;}
21649:     break;
21650: 
21651:   case 942:
21652: #line 2956 "third_party/libpg_query/grammar/statements/select.y"
21653:     { (yyval.str) = (char*) "second"; ;}
21654:     break;
21655: 
21656:   case 943:
21657: #line 2957 "third_party/libpg_query/grammar/statements/select.y"
21658:     { (yyval.str) = (char*) "millisecond"; ;}
21659:     break;
21660: 
21661:   case 944:
21662: #line 2958 "third_party/libpg_query/grammar/statements/select.y"
21663:     { (yyval.str) = (char*) "microsecond"; ;}
21664:     break;
21665: 
21666:   case 945:
21667: #line 2959 "third_party/libpg_query/grammar/statements/select.y"
21668:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
21669:     break;
21670: 
21671:   case 946:
21672: #line 2970 "third_party/libpg_query/grammar/statements/select.y"
21673:     {
21674: 					(yyval.list) = list_make4((yyvsp[(1) - (4)].node), (yyvsp[(2) - (4)].node), (yyvsp[(3) - (4)].node), (yyvsp[(4) - (4)].node));
21675: 				;}
21676:     break;
21677: 
21678:   case 947:
21679: #line 2974 "third_party/libpg_query/grammar/statements/select.y"
21680:     {
21681: 					(yyval.list) = list_make3((yyvsp[(1) - (3)].node), (yyvsp[(2) - (3)].node), (yyvsp[(3) - (3)].node));
21682: 				;}
21683:     break;
21684: 
21685:   case 948:
21686: #line 2981 "third_party/libpg_query/grammar/statements/select.y"
21687:     { (yyval.node) = (yyvsp[(2) - (2)].node); ;}
21688:     break;
21689: 
21690:   case 949:
21691: #line 2987 "third_party/libpg_query/grammar/statements/select.y"
21692:     { (yyval.list) = list_make2((yyvsp[(3) - (3)].node), (yyvsp[(1) - (3)].node)); ;}
21693:     break;
21694: 
21695:   case 950:
21696: #line 2988 "third_party/libpg_query/grammar/statements/select.y"
21697:     { (yyval.list) = NIL; ;}
21698:     break;
21699: 
21700:   case 951:
21701: #line 3005 "third_party/libpg_query/grammar/statements/select.y"
21702:     {
21703: 					(yyval.list) = list_make3((yyvsp[(1) - (3)].node), (yyvsp[(2) - (3)].node), (yyvsp[(3) - (3)].node));
21704: 				;}
21705:     break;
21706: 
21707:   case 952:
21708: #line 3009 "third_party/libpg_query/grammar/statements/select.y"
21709:     {
21710: 					/* not legal per SQL99, but might as well allow it */
21711: 					(yyval.list) = list_make3((yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yyvsp[(2) - (3)].node));
21712: 				;}
21713:     break;
21714: 
21715:   case 953:
21716: #line 3014 "third_party/libpg_query/grammar/statements/select.y"
21717:     {
21718: 					(yyval.list) = list_make2((yyvsp[(1) - (2)].node), (yyvsp[(2) - (2)].node));
21719: 				;}
21720:     break;
21721: 
21722:   case 954:
21723: #line 3018 "third_party/libpg_query/grammar/statements/select.y"
21724:     {
21725: 					/*
21726: 					 * Since there are no cases where this syntax allows
21727: 					 * a textual FOR value, we forcibly cast the argument
21728: 					 * to int4.  The possible matches in pg_proc are
21729: 					 * substring(text,int4) and substring(text,text),
21730: 					 * and we don't want the parser to choose the latter,
21731: 					 * which it is likely to do if the second argument
21732: 					 * is unknown or doesn't have an implicit cast to int4.
21733: 					 */
21734: 					(yyval.list) = list_make3((yyvsp[(1) - (2)].node), makeIntConst(1, -1),
21735: 									makeTypeCast((yyvsp[(2) - (2)].node),
21736: 												 SystemTypeName("int4"), 0, -1));
21737: 				;}
21738:     break;
21739: 
21740:   case 955:
21741: #line 3033 "third_party/libpg_query/grammar/statements/select.y"
21742:     {
21743: 					(yyval.list) = (yyvsp[(1) - (1)].list);
21744: 				;}
21745:     break;
21746: 
21747:   case 956:
21748: #line 3037 "third_party/libpg_query/grammar/statements/select.y"
21749:     { (yyval.list) = NIL; ;}
21750:     break;
21751: 
21752:   case 957:
21753: #line 3041 "third_party/libpg_query/grammar/statements/select.y"
21754:     { (yyval.node) = (yyvsp[(2) - (2)].node); ;}
21755:     break;
21756: 
21757:   case 958:
21758: #line 3044 "third_party/libpg_query/grammar/statements/select.y"
21759:     { (yyval.node) = (yyvsp[(2) - (2)].node); ;}
21760:     break;
21761: 
21762:   case 959:
21763: #line 3047 "third_party/libpg_query/grammar/statements/select.y"
21764:     { (yyval.list) = lappend((yyvsp[(3) - (3)].list), (yyvsp[(1) - (3)].node)); ;}
21765:     break;
21766: 
21767:   case 960:
21768: #line 3048 "third_party/libpg_query/grammar/statements/select.y"
21769:     { (yyval.list) = (yyvsp[(2) - (2)].list); ;}
21770:     break;
21771: 
21772:   case 961:
21773: #line 3049 "third_party/libpg_query/grammar/statements/select.y"
21774:     { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
21775:     break;
21776: 
21777:   case 962:
21778: #line 3053 "third_party/libpg_query/grammar/statements/select.y"
21779:     {
21780: 					PGSubLink *n = makeNode(PGSubLink);
21781: 					n->subselect = (yyvsp[(1) - (1)].node);
21782: 					/* other fields will be filled later */
21783: 					(yyval.node) = (PGNode *)n;
21784: 				;}
21785:     break;
21786: 
21787:   case 963:
21788: #line 3059 "third_party/libpg_query/grammar/statements/select.y"
21789:     { (yyval.node) = (PGNode *)(yyvsp[(2) - (3)].list); ;}
21790:     break;
21791: 
21792:   case 964:
21793: #line 3070 "third_party/libpg_query/grammar/statements/select.y"
21794:     {
21795: 					PGCaseExpr *c = makeNode(PGCaseExpr);
21796: 					c->casetype = InvalidOid; /* not analyzed yet */
21797: 					c->arg = (PGExpr *) (yyvsp[(2) - (5)].node);
21798: 					c->args = (yyvsp[(3) - (5)].list);
21799: 					c->defresult = (PGExpr *) (yyvsp[(4) - (5)].node);
21800: 					c->location = (yylsp[(1) - (5)]);
21801: 					(yyval.node) = (PGNode *)c;
21802: 				;}
21803:     break;
21804: 
21805:   case 965:
21806: #line 3083 "third_party/libpg_query/grammar/statements/select.y"
21807:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].node)); ;}
21808:     break;
21809: 
21810:   case 966:
21811: #line 3084 "third_party/libpg_query/grammar/statements/select.y"
21812:     { (yyval.list) = lappend((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].node)); ;}
21813:     break;
21814: 
21815:   case 967:
21816: #line 3089 "third_party/libpg_query/grammar/statements/select.y"
21817:     {
21818: 					PGCaseWhen *w = makeNode(PGCaseWhen);
21819: 					w->expr = (PGExpr *) (yyvsp[(2) - (4)].node);
21820: 					w->result = (PGExpr *) (yyvsp[(4) - (4)].node);
21821: 					w->location = (yylsp[(1) - (4)]);
21822: 					(yyval.node) = (PGNode *)w;
21823: 				;}
21824:     break;
21825: 
21826:   case 968:
21827: #line 3099 "third_party/libpg_query/grammar/statements/select.y"
21828:     { (yyval.node) = (yyvsp[(2) - (2)].node); ;}
21829:     break;
21830: 
21831:   case 969:
21832: #line 3100 "third_party/libpg_query/grammar/statements/select.y"
21833:     { (yyval.node) = NULL; ;}
21834:     break;
21835: 
21836:   case 970:
21837: #line 3103 "third_party/libpg_query/grammar/statements/select.y"
21838:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
21839:     break;
21840: 
21841:   case 971:
21842: #line 3104 "third_party/libpg_query/grammar/statements/select.y"
21843:     { (yyval.node) = NULL; ;}
21844:     break;
21845: 
21846:   case 972:
21847: #line 3108 "third_party/libpg_query/grammar/statements/select.y"
21848:     {
21849: 					(yyval.node) = makeColumnRef((yyvsp[(1) - (1)].str), NIL, (yylsp[(1) - (1)]), yyscanner);
21850: 				;}
21851:     break;
21852: 
21853:   case 973:
21854: #line 3112 "third_party/libpg_query/grammar/statements/select.y"
21855:     {
21856: 					(yyval.node) = makeColumnRef((yyvsp[(1) - (2)].str), (yyvsp[(2) - (2)].list), (yylsp[(1) - (2)]), yyscanner);
21857: 				;}
21858:     break;
21859: 
21860:   case 974:
21861: #line 3119 "third_party/libpg_query/grammar/statements/select.y"
21862:     {
21863: 					(yyval.node) = (PGNode *) makeString((yyvsp[(2) - (2)].str));
21864: 				;}
21865:     break;
21866: 
21867:   case 975:
21868: #line 3123 "third_party/libpg_query/grammar/statements/select.y"
21869:     {
21870: 					(yyval.node) = (PGNode *) makeNode(PGAStar);
21871: 				;}
21872:     break;
21873: 
21874:   case 976:
21875: #line 3127 "third_party/libpg_query/grammar/statements/select.y"
21876:     {
21877: 					PGAIndices *ai = makeNode(PGAIndices);
21878: 					ai->is_slice = false;
21879: 					ai->lidx = NULL;
21880: 					ai->uidx = (yyvsp[(2) - (3)].node);
21881: 					(yyval.node) = (PGNode *) ai;
21882: 				;}
21883:     break;
21884: 
21885:   case 977:
21886: #line 3135 "third_party/libpg_query/grammar/statements/select.y"
21887:     {
21888: 					PGAIndices *ai = makeNode(PGAIndices);
21889: 					ai->is_slice = true;
21890: 					ai->lidx = (yyvsp[(2) - (5)].node);
21891: 					ai->uidx = (yyvsp[(4) - (5)].node);
21892: 					(yyval.node) = (PGNode *) ai;
21893: 				;}
21894:     break;
21895: 
21896:   case 978:
21897: #line 3145 "third_party/libpg_query/grammar/statements/select.y"
21898:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
21899:     break;
21900: 
21901:   case 979:
21902: #line 3146 "third_party/libpg_query/grammar/statements/select.y"
21903:     { (yyval.node) = NULL; ;}
21904:     break;
21905: 
21906:   case 980:
21907: #line 3150 "third_party/libpg_query/grammar/statements/select.y"
21908:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].node)); ;}
21909:     break;
21910: 
21911:   case 981:
21912: #line 3151 "third_party/libpg_query/grammar/statements/select.y"
21913:     { (yyval.list) = lappend((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].node)); ;}
21914:     break;
21915: 
21916:   case 982:
21917: #line 3155 "third_party/libpg_query/grammar/statements/select.y"
21918:     { (yyval.list) = NIL; ;}
21919:     break;
21920: 
21921:   case 983:
21922: #line 3156 "third_party/libpg_query/grammar/statements/select.y"
21923:     { (yyval.list) = lappend((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].node)); ;}
21924:     break;
21925: 
21926:   case 986:
21927: #line 3170 "third_party/libpg_query/grammar/statements/select.y"
21928:     { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
21929:     break;
21930: 
21931:   case 987:
21932: #line 3171 "third_party/libpg_query/grammar/statements/select.y"
21933:     { (yyval.list) = NIL; ;}
21934:     break;
21935: 
21936:   case 988:
21937: #line 3175 "third_party/libpg_query/grammar/statements/select.y"
21938:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].target)); ;}
21939:     break;
21940: 
21941:   case 989:
21942: #line 3176 "third_party/libpg_query/grammar/statements/select.y"
21943:     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].target)); ;}
21944:     break;
21945: 
21946:   case 990:
21947: #line 3180 "third_party/libpg_query/grammar/statements/select.y"
21948:     {
21949: 					(yyval.target) = makeNode(PGResTarget);
21950: 					(yyval.target)->name = (yyvsp[(3) - (3)].str);
21951: 					(yyval.target)->indirection = NIL;
21952: 					(yyval.target)->val = (PGNode *)(yyvsp[(1) - (3)].node);
21953: 					(yyval.target)->location = (yylsp[(1) - (3)]);
21954: 				;}
21955:     break;
21956: 
21957:   case 991:
21958: #line 3196 "third_party/libpg_query/grammar/statements/select.y"
21959:     {
21960: 					(yyval.target) = makeNode(PGResTarget);
21961: 					(yyval.target)->name = (yyvsp[(2) - (2)].str);
21962: 					(yyval.target)->indirection = NIL;
21963: 					(yyval.target)->val = (PGNode *)(yyvsp[(1) - (2)].node);
21964: 					(yyval.target)->location = (yylsp[(1) - (2)]);
21965: 				;}
21966:     break;
21967: 
21968:   case 992:
21969: #line 3204 "third_party/libpg_query/grammar/statements/select.y"
21970:     {
21971: 					(yyval.target) = makeNode(PGResTarget);
21972: 					(yyval.target)->name = NULL;
21973: 					(yyval.target)->indirection = NIL;
21974: 					(yyval.target)->val = (PGNode *)(yyvsp[(1) - (1)].node);
21975: 					(yyval.target)->location = (yylsp[(1) - (1)]);
21976: 				;}
21977:     break;
21978: 
21979:   case 993:
21980: #line 3212 "third_party/libpg_query/grammar/statements/select.y"
21981:     {
21982: 					PGColumnRef *n = makeNode(PGColumnRef);
21983: 					n->fields = list_make1(makeNode(PGAStar));
21984: 					n->location = (yylsp[(1) - (1)]);
21985: 
21986: 					(yyval.target) = makeNode(PGResTarget);
21987: 					(yyval.target)->name = NULL;
21988: 					(yyval.target)->indirection = NIL;
21989: 					(yyval.target)->val = (PGNode *)n;
21990: 					(yyval.target)->location = (yylsp[(1) - (1)]);
21991: 				;}
21992:     break;
21993: 
21994:   case 994:
21995: #line 3233 "third_party/libpg_query/grammar/statements/select.y"
21996:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].range)); ;}
21997:     break;
21998: 
21999:   case 995:
22000: #line 3234 "third_party/libpg_query/grammar/statements/select.y"
22001:     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].range)); ;}
22002:     break;
22003: 
22004:   case 996:
22005: #line 3246 "third_party/libpg_query/grammar/statements/select.y"
22006:     {
22007: 					(yyval.range) = makeRangeVar(NULL, (yyvsp[(1) - (1)].str), (yylsp[(1) - (1)]));
22008: 				;}
22009:     break;
22010: 
22011:   case 997:
22012: #line 3250 "third_party/libpg_query/grammar/statements/select.y"
22013:     {
22014: 					check_qualified_name((yyvsp[(2) - (2)].list), yyscanner);
22015: 					(yyval.range) = makeRangeVar(NULL, NULL, (yylsp[(1) - (2)]));
22016: 					switch (list_length((yyvsp[(2) - (2)].list)))
22017: 					{
22018: 						case 1:
22019: 							(yyval.range)->catalogname = NULL;
22020: 							(yyval.range)->schemaname = (yyvsp[(1) - (2)].str);
22021: 							(yyval.range)->relname = strVal(linitial((yyvsp[(2) - (2)].list)));
22022: 							break;
22023: 						case 2:
22024: 							(yyval.range)->catalogname = (yyvsp[(1) - (2)].str);
22025: 							(yyval.range)->schemaname = strVal(linitial((yyvsp[(2) - (2)].list)));
22026: 							(yyval.range)->relname = strVal(lsecond((yyvsp[(2) - (2)].list)));
22027: 							break;
22028: 						default:
22029: 							ereport(ERROR,
22030: 									(errcode(PG_ERRCODE_SYNTAX_ERROR),
22031: 									 errmsg("improper qualified name (too many dotted names): %s",
22032: 											NameListToString(lcons(makeString((yyvsp[(1) - (2)].str)), (yyvsp[(2) - (2)].list)))),
22033: 									 parser_errposition((yylsp[(1) - (2)]))));
22034: 							break;
22035: 					}
22036: 				;}
22037:     break;
22038: 
22039:   case 998:
22040: #line 3277 "third_party/libpg_query/grammar/statements/select.y"
22041:     { (yyval.list) = list_make1(makeString((yyvsp[(1) - (1)].str))); ;}
22042:     break;
22043: 
22044:   case 999:
22045: #line 3279 "third_party/libpg_query/grammar/statements/select.y"
22046:     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), makeString((yyvsp[(3) - (3)].str))); ;}
22047:     break;
22048: 
22049:   case 1000:
22050: #line 3283 "third_party/libpg_query/grammar/statements/select.y"
22051:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
22052:     break;
22053: 
22054:   case 1001:
22055: #line 3285 "third_party/libpg_query/grammar/statements/select.y"
22056:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
22057:     break;
22058: 
22059:   case 1002:
22060: #line 3296 "third_party/libpg_query/grammar/statements/select.y"
22061:     { (yyval.list) = list_make1(makeString((yyvsp[(1) - (1)].str))); ;}
22062:     break;
22063: 
22064:   case 1003:
22065: #line 3299 "third_party/libpg_query/grammar/statements/select.y"
22066:     {
22067: 						(yyval.list) = check_func_name(lcons(makeString((yyvsp[(1) - (2)].str)), (yyvsp[(2) - (2)].list)),
22068: 											 yyscanner);
22069: 					;}
22070:     break;
22071: 
22072:   case 1004:
22073: #line 3310 "third_party/libpg_query/grammar/statements/select.y"
22074:     {
22075: 					(yyval.node) = makeIntConst((yyvsp[(1) - (1)].ival), (yylsp[(1) - (1)]));
22076: 				;}
22077:     break;
22078: 
22079:   case 1005:
22080: #line 3314 "third_party/libpg_query/grammar/statements/select.y"
22081:     {
22082: 					(yyval.node) = makeFloatConst((yyvsp[(1) - (1)].str), (yylsp[(1) - (1)]));
22083: 				;}
22084:     break;
22085: 
22086:   case 1006:
22087: #line 3318 "third_party/libpg_query/grammar/statements/select.y"
22088:     {
22089: 					if ((yyvsp[(2) - (2)].list))
22090: 					{
22091: 						PGAIndirection *n = makeNode(PGAIndirection);
22092: 						n->arg = makeStringConst((yyvsp[(1) - (2)].str), (yylsp[(1) - (2)]));
22093: 						n->indirection = check_indirection((yyvsp[(2) - (2)].list), yyscanner);
22094: 						(yyval.node) = (PGNode *) n;
22095: 					}
22096: 					else
22097: 						(yyval.node) = makeStringConst((yyvsp[(1) - (2)].str), (yylsp[(1) - (2)]));
22098: 				;}
22099:     break;
22100: 
22101:   case 1007:
22102: #line 3330 "third_party/libpg_query/grammar/statements/select.y"
22103:     {
22104: 					(yyval.node) = makeBitStringConst((yyvsp[(1) - (1)].str), (yylsp[(1) - (1)]));
22105: 				;}
22106:     break;
22107: 
22108:   case 1008:
22109: #line 3334 "third_party/libpg_query/grammar/statements/select.y"
22110:     {
22111: 					/* This is a bit constant per SQL99:
22112: 					 * Without Feature F511, "BIT data type",
22113: 					 * a <general literal> shall not be a
22114: 					 * <bit string literal> or a <hex string literal>.
22115: 					 */
22116: 					(yyval.node) = makeBitStringConst((yyvsp[(1) - (1)].str), (yylsp[(1) - (1)]));
22117: 				;}
22118:     break;
22119: 
22120:   case 1009:
22121: #line 3343 "third_party/libpg_query/grammar/statements/select.y"
22122:     {
22123: 					/* generic type 'literal' syntax */
22124: 					PGTypeName *t = makeTypeNameFromNameList((yyvsp[(1) - (2)].list));
22125: 					t->location = (yylsp[(1) - (2)]);
22126: 					(yyval.node) = makeStringConstCast((yyvsp[(2) - (2)].str), (yylsp[(2) - (2)]), t);
22127: 				;}
22128:     break;
22129: 
22130:   case 1010:
22131: #line 3350 "third_party/libpg_query/grammar/statements/select.y"
22132:     {
22133: 					/* generic syntax with a type modifier */
22134: 					PGTypeName *t = makeTypeNameFromNameList((yyvsp[(1) - (6)].list));
22135: 					PGListCell *lc;
22136: 
22137: 					/*
22138: 					 * We must use func_arg_list and opt_sort_clause in the
22139: 					 * production to avoid reduce/reduce conflicts, but we
22140: 					 * don't actually wish to allow PGNamedArgExpr in this
22141: 					 * context, nor ORDER BY.
22142: 					 */
22143: 					foreach(lc, (yyvsp[(3) - (6)].list))
22144: 					{
22145: 						PGNamedArgExpr *arg = (PGNamedArgExpr *) lfirst(lc);
22146: 
22147: 						if (IsA(arg, PGNamedArgExpr))
22148: 							ereport(ERROR,
22149: 									(errcode(PG_ERRCODE_SYNTAX_ERROR),
22150: 									 errmsg("type modifier cannot have parameter name"),
22151: 									 parser_errposition(arg->location)));
22152: 					}
22153: 					if ((yyvsp[(4) - (6)].list) != NIL)
22154: 							ereport(ERROR,
22155: 									(errcode(PG_ERRCODE_SYNTAX_ERROR),
22156: 									 errmsg("type modifier cannot have ORDER BY"),
22157: 									 parser_errposition((yylsp[(4) - (6)]))));
22158: 
22159: 					t->typmods = (yyvsp[(3) - (6)].list);
22160: 					t->location = (yylsp[(1) - (6)]);
22161: 					(yyval.node) = makeStringConstCast((yyvsp[(6) - (6)].str), (yylsp[(6) - (6)]), t);
22162: 				;}
22163:     break;
22164: 
22165:   case 1011:
22166: #line 3382 "third_party/libpg_query/grammar/statements/select.y"
22167:     {
22168: 					(yyval.node) = makeStringConstCast((yyvsp[(2) - (2)].str), (yylsp[(2) - (2)]), (yyvsp[(1) - (2)].typnam));
22169: 				;}
22170:     break;
22171: 
22172:   case 1012:
22173: #line 3386 "third_party/libpg_query/grammar/statements/select.y"
22174:     {
22175: 					(yyval.node) = makeIntervalNode((yyvsp[(3) - (5)].node), (yylsp[(3) - (5)]), (yyvsp[(5) - (5)].list));
22176: 				;}
22177:     break;
22178: 
22179:   case 1013:
22180: #line 3390 "third_party/libpg_query/grammar/statements/select.y"
22181:     {
22182: 					(yyval.node) = makeIntervalNode((yyvsp[(2) - (3)].ival), (yylsp[(2) - (3)]), (yyvsp[(3) - (3)].list));
22183: 				;}
22184:     break;
22185: 
22186:   case 1014:
22187: #line 3394 "third_party/libpg_query/grammar/statements/select.y"
22188:     {
22189: 					(yyval.node) = makeIntervalNode((yyvsp[(2) - (3)].str), (yylsp[(2) - (3)]), (yyvsp[(3) - (3)].list));
22190: 				;}
22191:     break;
22192: 
22193:   case 1015:
22194: #line 3398 "third_party/libpg_query/grammar/statements/select.y"
22195:     {
22196: 					(yyval.node) = makeBoolAConst(true, (yylsp[(1) - (1)]));
22197: 				;}
22198:     break;
22199: 
22200:   case 1016:
22201: #line 3402 "third_party/libpg_query/grammar/statements/select.y"
22202:     {
22203: 					(yyval.node) = makeBoolAConst(false, (yylsp[(1) - (1)]));
22204: 				;}
22205:     break;
22206: 
22207:   case 1017:
22208: #line 3406 "third_party/libpg_query/grammar/statements/select.y"
22209:     {
22210: 					(yyval.node) = makeNullAConst((yylsp[(1) - (1)]));
22211: 				;}
22212:     break;
22213: 
22214:   case 1018:
22215: #line 3411 "third_party/libpg_query/grammar/statements/select.y"
22216:     { (yyval.ival) = (yyvsp[(1) - (1)].ival); ;}
22217:     break;
22218: 
22219:   case 1019:
22220: #line 3412 "third_party/libpg_query/grammar/statements/select.y"
22221:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
22222:     break;
22223: 
22224:   case 1020:
22225: #line 3428 "third_party/libpg_query/grammar/statements/select.y"
22226:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
22227:     break;
22228: 
22229:   case 1021:
22230: #line 3429 "third_party/libpg_query/grammar/statements/select.y"
22231:     { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}
22232:     break;
22233: 
22234:   case 1022:
22235: #line 3430 "third_party/libpg_query/grammar/statements/select.y"
22236:     { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}
22237:     break;
22238: 
22239:   case 1023:
22240: #line 3433 "third_party/libpg_query/grammar/statements/select.y"
22241:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
22242:     break;
22243: 
22244:   case 1024:
22245: #line 3434 "third_party/libpg_query/grammar/statements/select.y"
22246:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
22247:     break;
22248: 
22249:   case 1025:
22250: #line 3440 "third_party/libpg_query/grammar/statements/select.y"
22251:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
22252:     break;
22253: 
22254:   case 1026:
22255: #line 3441 "third_party/libpg_query/grammar/statements/select.y"
22256:     { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}
22257:     break;
22258: 
22259:   case 1027:
22260: #line 3442 "third_party/libpg_query/grammar/statements/select.y"
22261:     { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}
22262:     break;
22263: 
22264:   case 1028:
22265: #line 3445 "third_party/libpg_query/grammar/statements/select.y"
22266:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
22267:     break;
22268: 
22269:   case 1029:
22270: #line 3446 "third_party/libpg_query/grammar/statements/select.y"
22271:     { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}
22272:     break;
22273: 
22274:   case 1030:
22275: #line 3447 "third_party/libpg_query/grammar/statements/select.y"
22276:     { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}
22277:     break;
22278: 
22279:   case 1031:
22280: #line 3450 "third_party/libpg_query/grammar/statements/select.y"
22281:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
22282:     break;
22283: 
22284:   case 1032:
22285: #line 3451 "third_party/libpg_query/grammar/statements/select.y"
22286:     { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}
22287:     break;
22288: 
22289:   case 1033:
22290: #line 3452 "third_party/libpg_query/grammar/statements/select.y"
22291:     { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}
22292:     break;
22293: 
22294:   case 1034:
22295: #line 3455 "third_party/libpg_query/grammar/statements/select.y"
22296:     { (yyval.list) = list_make1(makeString((yyvsp[(1) - (1)].str))); ;}
22297:     break;
22298: 
22299:   case 1035:
22300: #line 3456 "third_party/libpg_query/grammar/statements/select.y"
22301:     { (yyval.list) = lcons(makeString((yyvsp[(1) - (2)].str)), (yyvsp[(2) - (2)].list)); ;}
22302:     break;
22303: 
22304:   case 1036:
22305: #line 3460 "third_party/libpg_query/grammar/statements/select.y"
22306:     { (yyval.list) = list_make1(makeString((yyvsp[(2) - (2)].str))); ;}
22307:     break;
22308: 
22309:   case 1037:
22310: #line 3462 "third_party/libpg_query/grammar/statements/select.y"
22311:     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), makeString((yyvsp[(3) - (3)].str))); ;}
22312:     break;
22313: 
22314:   case 1038:
22315: #line 3466 "third_party/libpg_query/grammar/statements/select.y"
22316:     { (yyval.list) = (yyvsp[(2) - (3)].list); ;}
22317:     break;
22318: 
22319:   case 1039:
22320: #line 3467 "third_party/libpg_query/grammar/statements/select.y"
22321:     { (yyval.list) = NIL; ;}
22322:     break;
22323: 
22324:   case 1041:
22325: #line 3478 "third_party/libpg_query/grammar/statements/select.y"
22326:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
22327:     break;
22328: 
22329:   case 1042:
22330: #line 3479 "third_party/libpg_query/grammar/statements/select.y"
22331:     { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}
22332:     break;
22333: 
22334:   case 1043:
22335: #line 3480 "third_party/libpg_query/grammar/statements/select.y"
22336:     { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}
22337:     break;
22338: 
22339:   case 1044:
22340: #line 3481 "third_party/libpg_query/grammar/statements/select.y"
22341:     { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}
22342:     break;
22343: 
22344:   case 1045:
22345: #line 3484 "third_party/libpg_query/grammar/statements/select.y"
22346:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
22347:     break;
22348: 
22349:   case 1046:
22350: #line 3485 "third_party/libpg_query/grammar/statements/select.y"
22351:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
22352:     break;
22353: 
22354:   case 1047:
22355: #line 8 "third_party/libpg_query/grammar/statements/prepare.y"
22356:     {
22357: 					PGPrepareStmt *n = makeNode(PGPrepareStmt);
22358: 					n->name = (yyvsp[(2) - (5)].str);
22359: 					n->argtypes = (yyvsp[(3) - (5)].list);
22360: 					n->query = (yyvsp[(5) - (5)].node);
22361: 					(yyval.node) = (PGNode *) n;
22362: 				;}
22363:     break;
22364: 
22365:   case 1048:
22366: #line 18 "third_party/libpg_query/grammar/statements/prepare.y"
22367:     { (yyval.list) = (yyvsp[(2) - (3)].list); ;}
22368:     break;
22369: 
22370:   case 1049:
22371: #line 19 "third_party/libpg_query/grammar/statements/prepare.y"
22372:     { (yyval.list) = NIL; ;}
22373:     break;
22374: 
22375:   case 1054:
22376: #line 8 "third_party/libpg_query/grammar/statements/create_schema.y"
22377:     {
22378: 					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
22379: 					/* ...but not both */
22380: 					n->schemaname = (yyvsp[(3) - (4)].str);
22381: 					n->schemaElts = (yyvsp[(4) - (4)].list);
22382: 					n->if_not_exists = false;
22383: 					(yyval.node) = (PGNode *)n;
22384: 				;}
22385:     break;
22386: 
22387:   case 1055:
22388: #line 17 "third_party/libpg_query/grammar/statements/create_schema.y"
22389:     {
22390: 					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
22391: 					/* ...but not here */
22392: 					n->schemaname = (yyvsp[(6) - (7)].str);
22393: 					if ((yyvsp[(7) - (7)].list) != NIL)
22394: 						ereport(ERROR,
22395: 								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
22396: 								 errmsg("CREATE SCHEMA IF NOT EXISTS cannot include schema elements"),
22397: 								 parser_errposition((yylsp[(7) - (7)]))));
22398: 					n->schemaElts = (yyvsp[(7) - (7)].list);
22399: 					n->if_not_exists = true;
22400: 					(yyval.node) = (PGNode *)n;
22401: 				;}
22402:     break;
22403: 
22404:   case 1056:
22405: #line 35 "third_party/libpg_query/grammar/statements/create_schema.y"
22406:     {
22407: 					if ((yyloc) < 0)			/* see comments for YYLLOC_DEFAULT */
22408: 						(yyloc) = (yylsp[(2) - (2)]);
22409: 					(yyval.list) = lappend((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].node));
22410: 				;}
22411:     break;
22412: 
22413:   case 1057:
22414: #line 41 "third_party/libpg_query/grammar/statements/create_schema.y"
22415:     { (yyval.list) = NIL; ;}
22416:     break;
22417: 
22418:   case 1062:
22419: #line 11 "third_party/libpg_query/grammar/statements/index.y"
22420:     {
22421: 					PGIndexStmt *n = makeNode(PGIndexStmt);
22422: 					n->unique = (yyvsp[(2) - (13)].boolean);
22423: 					n->concurrent = (yyvsp[(4) - (13)].boolean);
22424: 					n->idxname = (yyvsp[(5) - (13)].str);
22425: 					n->relation = (yyvsp[(7) - (13)].range);
22426: 					n->accessMethod = (yyvsp[(8) - (13)].str);
22427: 					n->indexParams = (yyvsp[(10) - (13)].list);
22428: 					n->options = (yyvsp[(12) - (13)].list);
22429: 					n->whereClause = (yyvsp[(13) - (13)].node);
22430: 					n->excludeOpNames = NIL;
22431: 					n->idxcomment = NULL;
22432: 					n->indexOid = InvalidOid;
22433: 					n->oldNode = InvalidOid;
22434: 					n->primary = false;
22435: 					n->isconstraint = false;
22436: 					n->deferrable = false;
22437: 					n->initdeferred = false;
22438: 					n->transformed = false;
22439: 					n->if_not_exists = false;
22440: 					(yyval.node) = (PGNode *)n;
22441: 				;}
22442:     break;
22443: 
22444:   case 1063:
22445: #line 36 "third_party/libpg_query/grammar/statements/index.y"
22446:     {
22447: 					PGIndexStmt *n = makeNode(PGIndexStmt);
22448: 					n->unique = (yyvsp[(2) - (16)].boolean);
22449: 					n->concurrent = (yyvsp[(4) - (16)].boolean);
22450: 					n->idxname = (yyvsp[(8) - (16)].str);
22451: 					n->relation = (yyvsp[(10) - (16)].range);
22452: 					n->accessMethod = (yyvsp[(11) - (16)].str);
22453: 					n->indexParams = (yyvsp[(13) - (16)].list);
22454: 					n->options = (yyvsp[(15) - (16)].list);
22455: 					n->whereClause = (yyvsp[(16) - (16)].node);
22456: 					n->excludeOpNames = NIL;
22457: 					n->idxcomment = NULL;
22458: 					n->indexOid = InvalidOid;
22459: 					n->oldNode = InvalidOid;
22460: 					n->primary = false;
22461: 					n->isconstraint = false;
22462: 					n->deferrable = false;
22463: 					n->initdeferred = false;
22464: 					n->transformed = false;
22465: 					n->if_not_exists = true;
22466: 					(yyval.node) = (PGNode *)n;
22467: 				;}
22468:     break;
22469: 
22470:   case 1064:
22471: #line 62 "third_party/libpg_query/grammar/statements/index.y"
22472:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
22473:     break;
22474: 
22475:   case 1065:
22476: #line 66 "third_party/libpg_query/grammar/statements/index.y"
22477:     { (yyval.str) = (yyvsp[(2) - (2)].str); ;}
22478:     break;
22479: 
22480:   case 1066:
22481: #line 67 "third_party/libpg_query/grammar/statements/index.y"
22482:     { (yyval.str) = (char*) DEFAULT_INDEX_TYPE; ;}
22483:     break;
22484: 
22485:   case 1067:
22486: #line 72 "third_party/libpg_query/grammar/statements/index.y"
22487:     { (yyval.boolean) = true; ;}
22488:     break;
22489: 
22490:   case 1068:
22491: #line 73 "third_party/libpg_query/grammar/statements/index.y"
22492:     { (yyval.boolean) = false; ;}
22493:     break;
22494: 
22495:   case 1069:
22496: #line 78 "third_party/libpg_query/grammar/statements/index.y"
22497:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
22498:     break;
22499: 
22500:   case 1070:
22501: #line 79 "third_party/libpg_query/grammar/statements/index.y"
22502:     { (yyval.str) = NULL; ;}
22503:     break;
22504: 
22505:   case 1071:
22506: #line 83 "third_party/libpg_query/grammar/statements/index.y"
22507:     { (yyval.list) = (yyvsp[(2) - (2)].list); ;}
22508:     break;
22509: 
22510:   case 1072:
22511: #line 84 "third_party/libpg_query/grammar/statements/index.y"
22512:     { (yyval.list) = NIL; ;}
22513:     break;
22514: 
22515:   case 1073:
22516: #line 89 "third_party/libpg_query/grammar/statements/index.y"
22517:     { (yyval.boolean) = true; ;}
22518:     break;
22519: 
22520:   case 1074:
22521: #line 90 "third_party/libpg_query/grammar/statements/index.y"
22522:     { (yyval.boolean) = false; ;}
22523:     break;
22524: 
22525:   case 1075:
22526: #line 8 "third_party/libpg_query/grammar/statements/alter_schema.y"
22527:     {
22528: 					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
22529: 					n->objectType = PG_OBJECT_TABLE;
22530: 					n->relation = (yyvsp[(3) - (6)].range);
22531: 					n->newschema = (yyvsp[(6) - (6)].str);
22532: 					n->missing_ok = false;
22533: 					(yyval.node) = (PGNode *)n;
22534: 				;}
22535:     break;
22536: 
22537:   case 1076:
22538: #line 17 "third_party/libpg_query/grammar/statements/alter_schema.y"
22539:     {
22540: 					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
22541: 					n->objectType = PG_OBJECT_TABLE;
22542: 					n->relation = (yyvsp[(5) - (8)].range);
22543: 					n->newschema = (yyvsp[(8) - (8)].str);
22544: 					n->missing_ok = true;
22545: 					(yyval.node) = (PGNode *)n;
22546: 				;}
22547:     break;
22548: 
22549:   case 1077:
22550: #line 26 "third_party/libpg_query/grammar/statements/alter_schema.y"
22551:     {
22552: 					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
22553: 					n->objectType = PG_OBJECT_SEQUENCE;
22554: 					n->relation = (yyvsp[(3) - (6)].range);
22555: 					n->newschema = (yyvsp[(6) - (6)].str);
22556: 					n->missing_ok = false;
22557: 					(yyval.node) = (PGNode *)n;
22558: 				;}
22559:     break;
22560: 
22561:   case 1078:
22562: #line 35 "third_party/libpg_query/grammar/statements/alter_schema.y"
22563:     {
22564: 					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
22565: 					n->objectType = PG_OBJECT_SEQUENCE;
22566: 					n->relation = (yyvsp[(5) - (8)].range);
22567: 					n->newschema = (yyvsp[(8) - (8)].str);
22568: 					n->missing_ok = true;
22569: 					(yyval.node) = (PGNode *)n;
22570: 				;}
22571:     break;
22572: 
22573:   case 1079:
22574: #line 44 "third_party/libpg_query/grammar/statements/alter_schema.y"
22575:     {
22576: 					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
22577: 					n->objectType = PG_OBJECT_VIEW;
22578: 					n->relation = (yyvsp[(3) - (6)].range);
22579: 					n->newschema = (yyvsp[(6) - (6)].str);
22580: 					n->missing_ok = false;
22581: 					(yyval.node) = (PGNode *)n;
22582: 				;}
22583:     break;
22584: 
22585:   case 1080:
22586: #line 53 "third_party/libpg_query/grammar/statements/alter_schema.y"
22587:     {
22588: 					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
22589: 					n->objectType = PG_OBJECT_VIEW;
22590: 					n->relation = (yyvsp[(5) - (8)].range);
22591: 					n->newschema = (yyvsp[(8) - (8)].str);
22592: 					n->missing_ok = true;
22593: 					(yyval.node) = (PGNode *)n;
22594: 				;}
22595:     break;
22596: 
22597:   case 1081:
22598: #line 6 "third_party/libpg_query/grammar/statements/checkpoint.y"
22599:     {
22600: 					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
22601: 					n->force = true;
22602: 					(yyval.node) = (PGNode *)n;
22603: 				;}
22604:     break;
22605: 
22606:   case 1082:
22607: #line 12 "third_party/libpg_query/grammar/statements/checkpoint.y"
22608:     {
22609: 					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
22610: 					n->force = false;
22611: 					(yyval.node) = (PGNode *)n;
22612: 				;}
22613:     break;
22614: 
22615:   case 1083:
22616: #line 8 "third_party/libpg_query/grammar/statements/export.y"
22617:     {
22618: 					PGExportStmt *n = makeNode(PGExportStmt);
22619: 					n->filename = (yyvsp[(3) - (4)].str);
22620: 					n->options = NIL;
22621: 					if ((yyvsp[(4) - (4)].list)) {
22622: 						n->options = list_concat(n->options, (yyvsp[(4) - (4)].list));
22623: 					}
22624: 					(yyval.node) = (PGNode *)n;
22625: 				;}
22626:     break;
22627: 
22628:   case 1084:
22629: #line 21 "third_party/libpg_query/grammar/statements/export.y"
22630:     {
22631: 					PGImportStmt *n = makeNode(PGImportStmt);
22632: 					n->filename = (yyvsp[(3) - (3)].str);
22633: 					(yyval.node) = (PGNode *)n;
22634: 				;}
22635:     break;
22636: 
22637:   case 1085:
22638: #line 10 "third_party/libpg_query/grammar/statements/explain.y"
22639:     {
22640: 					PGExplainStmt *n = makeNode(PGExplainStmt);
22641: 					n->query = (yyvsp[(2) - (2)].node);
22642: 					n->options = NIL;
22643: 					(yyval.node) = (PGNode *) n;
22644: 				;}
22645:     break;
22646: 
22647:   case 1086:
22648: #line 17 "third_party/libpg_query/grammar/statements/explain.y"
22649:     {
22650: 					PGExplainStmt *n = makeNode(PGExplainStmt);
22651: 					n->query = (yyvsp[(4) - (4)].node);
22652: 					n->options = list_make1(makeDefElem("analyze", NULL, (yylsp[(2) - (4)])));
22653: 					if ((yyvsp[(3) - (4)].boolean))
22654: 						n->options = lappend(n->options,
22655: 											 makeDefElem("verbose", NULL, (yylsp[(3) - (4)])));
22656: 					(yyval.node) = (PGNode *) n;
22657: 				;}
22658:     break;
22659: 
22660:   case 1087:
22661: #line 27 "third_party/libpg_query/grammar/statements/explain.y"
22662:     {
22663: 					PGExplainStmt *n = makeNode(PGExplainStmt);
22664: 					n->query = (yyvsp[(3) - (3)].node);
22665: 					n->options = list_make1(makeDefElem("verbose", NULL, (yylsp[(2) - (3)])));
22666: 					(yyval.node) = (PGNode *) n;
22667: 				;}
22668:     break;
22669: 
22670:   case 1088:
22671: #line 34 "third_party/libpg_query/grammar/statements/explain.y"
22672:     {
22673: 					PGExplainStmt *n = makeNode(PGExplainStmt);
22674: 					n->query = (yyvsp[(5) - (5)].node);
22675: 					n->options = (yyvsp[(3) - (5)].list);
22676: 					(yyval.node) = (PGNode *) n;
22677: 				;}
22678:     break;
22679: 
22680:   case 1089:
22681: #line 44 "third_party/libpg_query/grammar/statements/explain.y"
22682:     { (yyval.boolean) = true; ;}
22683:     break;
22684: 
22685:   case 1090:
22686: #line 45 "third_party/libpg_query/grammar/statements/explain.y"
22687:     { (yyval.boolean) = false; ;}
22688:     break;
22689: 
22690:   case 1091:
22691: #line 50 "third_party/libpg_query/grammar/statements/explain.y"
22692:     { (yyval.node) = (PGNode *) makeString((yyvsp[(1) - (1)].str)); ;}
22693:     break;
22694: 
22695:   case 1092:
22696: #line 51 "third_party/libpg_query/grammar/statements/explain.y"
22697:     { (yyval.node) = (PGNode *) (yyvsp[(1) - (1)].value); ;}
22698:     break;
22699: 
22700:   case 1093:
22701: #line 52 "third_party/libpg_query/grammar/statements/explain.y"
22702:     { (yyval.node) = NULL; ;}
22703:     break;
22704: 
22705:   case 1099:
22706: #line 65 "third_party/libpg_query/grammar/statements/explain.y"
22707:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
22708:     break;
22709: 
22710:   case 1100:
22711: #line 66 "third_party/libpg_query/grammar/statements/explain.y"
22712:     { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}
22713:     break;
22714: 
22715:   case 1101:
22716: #line 67 "third_party/libpg_query/grammar/statements/explain.y"
22717:     { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}
22718:     break;
22719: 
22720:   case 1102:
22721: #line 72 "third_party/libpg_query/grammar/statements/explain.y"
22722:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
22723:     break;
22724: 
22725:   case 1103:
22726: #line 73 "third_party/libpg_query/grammar/statements/explain.y"
22727:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
22728:     break;
22729: 
22730:   case 1104:
22731: #line 79 "third_party/libpg_query/grammar/statements/explain.y"
22732:     {
22733: 					(yyval.list) = list_make1((yyvsp[(1) - (1)].defelt));
22734: 				;}
22735:     break;
22736: 
22737:   case 1105:
22738: #line 83 "third_party/libpg_query/grammar/statements/explain.y"
22739:     {
22740: 					(yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].defelt));
22741: 				;}
22742:     break;
22743: 
22744:   case 1106:
22745: #line 90 "third_party/libpg_query/grammar/statements/explain.y"
22746:     {;}
22747:     break;
22748: 
22749:   case 1107:
22750: #line 91 "third_party/libpg_query/grammar/statements/explain.y"
22751:     {;}
22752:     break;
22753: 
22754:   case 1108:
22755: #line 96 "third_party/libpg_query/grammar/statements/explain.y"
22756:     { (yyval.str) = (char*) "true"; ;}
22757:     break;
22758: 
22759:   case 1109:
22760: #line 97 "third_party/libpg_query/grammar/statements/explain.y"
22761:     { (yyval.str) = (char*) "false"; ;}
22762:     break;
22763: 
22764:   case 1110:
22765: #line 98 "third_party/libpg_query/grammar/statements/explain.y"
22766:     { (yyval.str) = (char*) "on"; ;}
22767:     break;
22768: 
22769:   case 1111:
22770: #line 104 "third_party/libpg_query/grammar/statements/explain.y"
22771:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
22772:     break;
22773: 
22774:   case 1112:
22775: #line 110 "third_party/libpg_query/grammar/statements/explain.y"
22776:     {
22777: 					(yyval.defelt) = makeDefElem((yyvsp[(1) - (2)].str), (yyvsp[(2) - (2)].node), (yylsp[(1) - (2)]));
22778: 				;}
22779:     break;
22780: 
22781:   case 1113:
22782: #line 117 "third_party/libpg_query/grammar/statements/explain.y"
22783:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
22784:     break;
22785: 
22786:   case 1114:
22787: #line 118 "third_party/libpg_query/grammar/statements/explain.y"
22788:     { (yyval.str) = (char*) "analyze"; ;}
22789:     break;
22790: 
22791:   case 1115:
22792: #line 11 "third_party/libpg_query/grammar/statements/variable_set.y"
22793:     {
22794: 					PGVariableSetStmt *n = (yyvsp[(2) - (2)].vsetstmt);
22795: 					n->is_local = false;
22796: 					(yyval.node) = (PGNode *) n;
22797: 				;}
22798:     break;
22799: 
22800:   case 1116:
22801: #line 17 "third_party/libpg_query/grammar/statements/variable_set.y"
22802:     {
22803: 					PGVariableSetStmt *n = (yyvsp[(3) - (3)].vsetstmt);
22804: 					n->is_local = true;
22805: 					(yyval.node) = (PGNode *) n;
22806: 				;}
22807:     break;
22808: 
22809:   case 1117:
22810: #line 23 "third_party/libpg_query/grammar/statements/variable_set.y"
22811:     {
22812: 					PGVariableSetStmt *n = (yyvsp[(3) - (3)].vsetstmt);
22813: 					n->is_local = false;
22814: 					(yyval.node) = (PGNode *) n;
22815: 				;}
22816:     break;
22817: 
22818:   case 1118:
22819: #line 32 "third_party/libpg_query/grammar/statements/variable_set.y"
22820:     {(yyval.vsetstmt) = (yyvsp[(1) - (1)].vsetstmt);;}
22821:     break;
22822: 
22823:   case 1119:
22824: #line 34 "third_party/libpg_query/grammar/statements/variable_set.y"
22825:     {
22826: 					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
22827: 					n->kind = VAR_SET_CURRENT;
22828: 					n->name = (yyvsp[(1) - (3)].str);
22829: 					(yyval.vsetstmt) = n;
22830: 				;}
22831:     break;
22832: 
22833:   case 1120:
22834: #line 42 "third_party/libpg_query/grammar/statements/variable_set.y"
22835:     {
22836: 					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
22837: 					n->kind = VAR_SET_VALUE;
22838: 					n->name = (char*) "timezone";
22839: 					if ((yyvsp[(3) - (3)].node) != NULL)
22840: 						n->args = list_make1((yyvsp[(3) - (3)].node));
22841: 					else
22842: 						n->kind = VAR_SET_DEFAULT;
22843: 					(yyval.vsetstmt) = n;
22844: 				;}
22845:     break;
22846: 
22847:   case 1121:
22848: #line 53 "third_party/libpg_query/grammar/statements/variable_set.y"
22849:     {
22850: 					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
22851: 					n->kind = VAR_SET_VALUE;
22852: 					n->name = (char*) "search_path";
22853: 					n->args = list_make1(makeStringConst((yyvsp[(2) - (2)].str), (yylsp[(2) - (2)])));
22854: 					(yyval.vsetstmt) = n;
22855: 				;}
22856:     break;
22857: 
22858:   case 1122:
22859: #line 65 "third_party/libpg_query/grammar/statements/variable_set.y"
22860:     {
22861: 					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
22862: 					n->kind = VAR_SET_VALUE;
22863: 					n->name = (yyvsp[(1) - (3)].str);
22864: 					n->args = (yyvsp[(3) - (3)].list);
22865: 					(yyval.vsetstmt) = n;
22866: 				;}
22867:     break;
22868: 
22869:   case 1123:
22870: #line 73 "third_party/libpg_query/grammar/statements/variable_set.y"
22871:     {
22872: 					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
22873: 					n->kind = VAR_SET_VALUE;
22874: 					n->name = (yyvsp[(1) - (3)].str);
22875: 					n->args = (yyvsp[(3) - (3)].list);
22876: 					(yyval.vsetstmt) = n;
22877: 				;}
22878:     break;
22879: 
22880:   case 1124:
22881: #line 81 "third_party/libpg_query/grammar/statements/variable_set.y"
22882:     {
22883: 					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
22884: 					n->kind = VAR_SET_DEFAULT;
22885: 					n->name = (yyvsp[(1) - (3)].str);
22886: 					(yyval.vsetstmt) = n;
22887: 				;}
22888:     break;
22889: 
22890:   case 1125:
22891: #line 88 "third_party/libpg_query/grammar/statements/variable_set.y"
22892:     {
22893: 					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
22894: 					n->kind = VAR_SET_DEFAULT;
22895: 					n->name = (yyvsp[(1) - (3)].str);
22896: 					(yyval.vsetstmt) = n;
22897: 				;}
22898:     break;
22899: 
22900:   case 1126:
22901: #line 98 "third_party/libpg_query/grammar/statements/variable_set.y"
22902:     { (yyval.node) = makeStringConst((yyvsp[(1) - (1)].str), (yylsp[(1) - (1)])); ;}
22903:     break;
22904: 
22905:   case 1127:
22906: #line 100 "third_party/libpg_query/grammar/statements/variable_set.y"
22907:     { (yyval.node) = makeAConst((yyvsp[(1) - (1)].value), (yylsp[(1) - (1)])); ;}
22908:     break;
22909: 
22910:   case 1128:
22911: #line 106 "third_party/libpg_query/grammar/statements/variable_set.y"
22912:     {
22913: 					(yyval.node) = makeStringConst((yyvsp[(1) - (1)].str), (yylsp[(1) - (1)]));
22914: 				;}
22915:     break;
22916: 
22917:   case 1129:
22918: #line 110 "third_party/libpg_query/grammar/statements/variable_set.y"
22919:     {
22920: 					(yyval.node) = makeStringConst((yyvsp[(1) - (1)].str), (yylsp[(1) - (1)]));
22921: 				;}
22922:     break;
22923: 
22924:   case 1130:
22925: #line 114 "third_party/libpg_query/grammar/statements/variable_set.y"
22926:     {
22927: 					PGTypeName *t = (yyvsp[(1) - (3)].typnam);
22928: 					if ((yyvsp[(3) - (3)].list) != NIL)
22929: 					{
22930: 						PGAConst *n = (PGAConst *) linitial((yyvsp[(3) - (3)].list));
22931: 						if ((n->val.val.ival & ~(INTERVAL_MASK(HOUR) | INTERVAL_MASK(MINUTE))) != 0)
22932: 							ereport(ERROR,
22933: 									(errcode(PG_ERRCODE_SYNTAX_ERROR),
22934: 									 errmsg("time zone interval must be HOUR or HOUR TO MINUTE"),
22935: 									 parser_errposition((yylsp[(3) - (3)]))));
22936: 					}
22937: 					t->typmods = (yyvsp[(3) - (3)].list);
22938: 					(yyval.node) = makeStringConstCast((yyvsp[(2) - (3)].str), (yylsp[(2) - (3)]), t);
22939: 				;}
22940:     break;
22941: 
22942:   case 1131:
22943: #line 129 "third_party/libpg_query/grammar/statements/variable_set.y"
22944:     {
22945: 					PGTypeName *t = (yyvsp[(1) - (5)].typnam);
22946: 					t->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
22947: 											makeIntConst((yyvsp[(3) - (5)].ival), (yylsp[(3) - (5)])));
22948: 					(yyval.node) = makeStringConstCast((yyvsp[(5) - (5)].str), (yylsp[(5) - (5)]), t);
22949: 				;}
22950:     break;
22951: 
22952:   case 1132:
22953: #line 135 "third_party/libpg_query/grammar/statements/variable_set.y"
22954:     { (yyval.node) = makeAConst((yyvsp[(1) - (1)].value), (yylsp[(1) - (1)])); ;}
22955:     break;
22956: 
22957:   case 1133:
22958: #line 136 "third_party/libpg_query/grammar/statements/variable_set.y"
22959:     { (yyval.node) = NULL; ;}
22960:     break;
22961: 
22962:   case 1134:
22963: #line 137 "third_party/libpg_query/grammar/statements/variable_set.y"
22964:     { (yyval.node) = NULL; ;}
22965:     break;
22966: 
22967:   case 1135:
22968: #line 141 "third_party/libpg_query/grammar/statements/variable_set.y"
22969:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].node)); ;}
22970:     break;
22971: 
22972:   case 1136:
22973: #line 142 "third_party/libpg_query/grammar/statements/variable_set.y"
22974:     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node)); ;}
22975:     break;
22976: 
22977:   case 1137:
22978: #line 8 "third_party/libpg_query/grammar/statements/load.y"
22979:     {
22980: 					PGLoadStmt *n = makeNode(PGLoadStmt);
22981: 					n->filename = (yyvsp[(2) - (2)].str);
22982: 					(yyval.node) = (PGNode *)n;
22983: 				;}
22984:     break;
22985: 
22986:   case 1138:
22987: #line 16 "third_party/libpg_query/grammar/statements/load.y"
22988:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
22989:     break;
22990: 
22991:   case 1139:
22992: #line 9 "third_party/libpg_query/grammar/statements/vacuum.y"
22993:     {
22994: 					PGVacuumStmt *n = makeNode(PGVacuumStmt);
22995: 					n->options = PG_VACOPT_VACUUM;
22996: 					if ((yyvsp[(2) - (4)].boolean))
22997: 						n->options |= PG_VACOPT_FULL;
22998: 					if ((yyvsp[(3) - (4)].boolean))
22999: 						n->options |= PG_VACOPT_FREEZE;
23000: 					if ((yyvsp[(4) - (4)].boolean))
23001: 						n->options |= PG_VACOPT_VERBOSE;
23002: 					n->relation = NULL;
23003: 					n->va_cols = NIL;
23004: 					(yyval.node) = (PGNode *)n;
23005: 				;}
23006:     break;
23007: 
23008:   case 1140:
23009: #line 23 "third_party/libpg_query/grammar/statements/vacuum.y"
23010:     {
23011: 					PGVacuumStmt *n = makeNode(PGVacuumStmt);
23012: 					n->options = PG_VACOPT_VACUUM;
23013: 					if ((yyvsp[(2) - (5)].boolean))
23014: 						n->options |= PG_VACOPT_FULL;
23015: 					if ((yyvsp[(3) - (5)].boolean))
23016: 						n->options |= PG_VACOPT_FREEZE;
23017: 					if ((yyvsp[(4) - (5)].boolean))
23018: 						n->options |= PG_VACOPT_VERBOSE;
23019: 					n->relation = (yyvsp[(5) - (5)].range);
23020: 					n->va_cols = NIL;
23021: 					(yyval.node) = (PGNode *)n;
23022: 				;}
23023:     break;
23024: 
23025:   case 1141:
23026: #line 37 "third_party/libpg_query/grammar/statements/vacuum.y"
23027:     {
23028: 					PGVacuumStmt *n = (PGVacuumStmt *) (yyvsp[(5) - (5)].node);
23029: 					n->options |= PG_VACOPT_VACUUM;
23030: 					if ((yyvsp[(2) - (5)].boolean))
23031: 						n->options |= PG_VACOPT_FULL;
23032: 					if ((yyvsp[(3) - (5)].boolean))
23033: 						n->options |= PG_VACOPT_FREEZE;
23034: 					if ((yyvsp[(4) - (5)].boolean))
23035: 						n->options |= PG_VACOPT_VERBOSE;
23036: 					(yyval.node) = (PGNode *)n;
23037: 				;}
23038:     break;
23039: 
23040:   case 1142:
23041: #line 49 "third_party/libpg_query/grammar/statements/vacuum.y"
23042:     {
23043: 					PGVacuumStmt *n = makeNode(PGVacuumStmt);
23044: 					n->options = PG_VACOPT_VACUUM | (yyvsp[(3) - (4)].ival);
23045: 					n->relation = NULL;
23046: 					n->va_cols = NIL;
23047: 					(yyval.node) = (PGNode *) n;
23048: 				;}
23049:     break;
23050: 
23051:   case 1143:
23052: #line 57 "third_party/libpg_query/grammar/statements/vacuum.y"
23053:     {
23054: 					PGVacuumStmt *n = makeNode(PGVacuumStmt);
23055: 					n->options = PG_VACOPT_VACUUM | (yyvsp[(3) - (6)].ival);
23056: 					n->relation = (yyvsp[(5) - (6)].range);
23057: 					n->va_cols = (yyvsp[(6) - (6)].list);
23058: 					if (n->va_cols != NIL)	/* implies analyze */
23059: 						n->options |= PG_VACOPT_ANALYZE;
23060: 					(yyval.node) = (PGNode *) n;
23061: 				;}
23062:     break;
23063: 
23064:   case 1144:
23065: #line 70 "third_party/libpg_query/grammar/statements/vacuum.y"
23066:     { (yyval.ival) = PG_VACOPT_ANALYZE; ;}
23067:     break;
23068: 
23069:   case 1145:
23070: #line 71 "third_party/libpg_query/grammar/statements/vacuum.y"
23071:     { (yyval.ival) = PG_VACOPT_VERBOSE; ;}
23072:     break;
23073: 
23074:   case 1146:
23075: #line 72 "third_party/libpg_query/grammar/statements/vacuum.y"
23076:     { (yyval.ival) = PG_VACOPT_FREEZE; ;}
23077:     break;
23078: 
23079:   case 1147:
23080: #line 73 "third_party/libpg_query/grammar/statements/vacuum.y"
23081:     { (yyval.ival) = PG_VACOPT_FULL; ;}
23082:     break;
23083: 
23084:   case 1148:
23085: #line 75 "third_party/libpg_query/grammar/statements/vacuum.y"
23086:     {
23087: 					if (strcmp((yyvsp[(1) - (1)].str), "disable_page_skipping") == 0)
23088: 						(yyval.ival) = PG_VACOPT_DISABLE_PAGE_SKIPPING;
23089: 					else
23090: 						ereport(ERROR,
23091: 								(errcode(PG_ERRCODE_SYNTAX_ERROR),
23092: 							 errmsg("unrecognized VACUUM option \"%s\"", (yyvsp[(1) - (1)].str)),
23093: 									 parser_errposition((yylsp[(1) - (1)]))));
23094: 				;}
23095:     break;
23096: 
23097:   case 1149:
23098: #line 87 "third_party/libpg_query/grammar/statements/vacuum.y"
23099:     { (yyval.boolean) = true; ;}
23100:     break;
23101: 
23102:   case 1150:
23103: #line 88 "third_party/libpg_query/grammar/statements/vacuum.y"
23104:     { (yyval.boolean) = false; ;}
23105:     break;
23106: 
23107:   case 1151:
23108: #line 93 "third_party/libpg_query/grammar/statements/vacuum.y"
23109:     { (yyval.ival) = (yyvsp[(1) - (1)].ival); ;}
23110:     break;
23111: 
23112:   case 1152:
23113: #line 94 "third_party/libpg_query/grammar/statements/vacuum.y"
23114:     { (yyval.ival) = (yyvsp[(1) - (3)].ival) | (yyvsp[(3) - (3)].ival); ;}
23115:     break;
23116: 
23117:   case 1153:
23118: #line 98 "third_party/libpg_query/grammar/statements/vacuum.y"
23119:     { (yyval.boolean) = true; ;}
23120:     break;
23121: 
23122:   case 1154:
23123: #line 99 "third_party/libpg_query/grammar/statements/vacuum.y"
23124:     { (yyval.boolean) = false; ;}
23125:     break;
23126: 
23127:   case 1155:
23128: #line 9 "third_party/libpg_query/grammar/statements/delete.y"
23129:     {
23130: 					PGDeleteStmt *n = makeNode(PGDeleteStmt);
23131: 					n->relation = (yyvsp[(4) - (7)].range);
23132: 					n->usingClause = (yyvsp[(5) - (7)].list);
23133: 					n->whereClause = (yyvsp[(6) - (7)].node);
23134: 					n->returningList = (yyvsp[(7) - (7)].list);
23135: 					n->withClause = (yyvsp[(1) - (7)].with);
23136: 					(yyval.node) = (PGNode *)n;
23137: 				;}
23138:     break;
23139: 
23140:   case 1156:
23141: #line 22 "third_party/libpg_query/grammar/statements/delete.y"
23142:     {
23143: 					(yyval.range) = (yyvsp[(1) - (1)].range);
23144: 				;}
23145:     break;
23146: 
23147:   case 1157:
23148: #line 26 "third_party/libpg_query/grammar/statements/delete.y"
23149:     {
23150: 					PGAlias *alias = makeNode(PGAlias);
23151: 					alias->aliasname = (yyvsp[(2) - (2)].str);
23152: 					(yyvsp[(1) - (2)].range)->alias = alias;
23153: 					(yyval.range) = (yyvsp[(1) - (2)].range);
23154: 				;}
23155:     break;
23156: 
23157:   case 1158:
23158: #line 33 "third_party/libpg_query/grammar/statements/delete.y"
23159:     {
23160: 					PGAlias *alias = makeNode(PGAlias);
23161: 					alias->aliasname = (yyvsp[(3) - (3)].str);
23162: 					(yyvsp[(1) - (3)].range)->alias = alias;
23163: 					(yyval.range) = (yyvsp[(1) - (3)].range);
23164: 				;}
23165:     break;
23166: 
23167:   case 1159:
23168: #line 43 "third_party/libpg_query/grammar/statements/delete.y"
23169:     { (yyval.node) = (yyvsp[(2) - (2)].node); ;}
23170:     break;
23171: 
23172:   case 1160:
23173: #line 44 "third_party/libpg_query/grammar/statements/delete.y"
23174:     { (yyval.node) = NULL; ;}
23175:     break;
23176: 
23177:   case 1161:
23178: #line 50 "third_party/libpg_query/grammar/statements/delete.y"
23179:     { (yyval.list) = (yyvsp[(2) - (2)].list); ;}
23180:     break;
23181: 
23182:   case 1162:
23183: #line 51 "third_party/libpg_query/grammar/statements/delete.y"
23184:     { (yyval.list) = NIL; ;}
23185:     break;
23186: 
23187:   case 1163:
23188: #line 10 "third_party/libpg_query/grammar/statements/analyze.y"
23189:     {
23190: 					PGVacuumStmt *n = makeNode(PGVacuumStmt);
23191: 					n->options = PG_VACOPT_ANALYZE;
23192: 					if ((yyvsp[(2) - (2)].boolean))
23193: 						n->options |= PG_VACOPT_VERBOSE;
23194: 					n->relation = NULL;
23195: 					n->va_cols = NIL;
23196: 					(yyval.node) = (PGNode *)n;
23197: 				;}
23198:     break;
23199: 
23200:   case 1164:
23201: #line 20 "third_party/libpg_query/grammar/statements/analyze.y"
23202:     {
23203: 					PGVacuumStmt *n = makeNode(PGVacuumStmt);
23204: 					n->options = PG_VACOPT_ANALYZE;
23205: 					if ((yyvsp[(2) - (4)].boolean))
23206: 						n->options |= PG_VACOPT_VERBOSE;
23207: 					n->relation = (yyvsp[(3) - (4)].range);
23208: 					n->va_cols = (yyvsp[(4) - (4)].list);
23209: 					(yyval.node) = (PGNode *)n;
23210: 				;}
23211:     break;
23212: 
23213:   case 1165:
23214: #line 2 "third_party/libpg_query/grammar/statements/variable_reset.y"
23215:     { (yyval.node) = (PGNode *) (yyvsp[(2) - (2)].vsetstmt); ;}
23216:     break;
23217: 
23218:   case 1166:
23219: #line 8 "third_party/libpg_query/grammar/statements/variable_reset.y"
23220:     {
23221: 					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
23222: 					n->kind = VAR_RESET;
23223: 					n->name = (yyvsp[(1) - (1)].str);
23224: 					(yyval.vsetstmt) = n;
23225: 				;}
23226:     break;
23227: 
23228:   case 1167:
23229: #line 15 "third_party/libpg_query/grammar/statements/variable_reset.y"
23230:     {
23231: 					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
23232: 					n->kind = VAR_RESET_ALL;
23233: 					(yyval.vsetstmt) = n;
23234: 				;}
23235:     break;
23236: 
23237:   case 1168:
23238: #line 24 "third_party/libpg_query/grammar/statements/variable_reset.y"
23239:     { (yyval.vsetstmt) = (yyvsp[(1) - (1)].vsetstmt); ;}
23240:     break;
23241: 
23242:   case 1169:
23243: #line 26 "third_party/libpg_query/grammar/statements/variable_reset.y"
23244:     {
23245: 					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
23246: 					n->kind = VAR_RESET;
23247: 					n->name = (char*) "timezone";
23248: 					(yyval.vsetstmt) = n;
23249: 				;}
23250:     break;
23251: 
23252:   case 1170:
23253: #line 33 "third_party/libpg_query/grammar/statements/variable_reset.y"
23254:     {
23255: 					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
23256: 					n->kind = VAR_RESET;
23257: 					n->name = (char*) "transaction_isolation";
23258: 					(yyval.vsetstmt) = n;
23259: 				;}
23260:     break;
23261: 
23262:   case 1171:
23263: #line 3 "third_party/libpg_query/grammar/statements/variable_show.y"
23264:     {
23265: 				PGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);
23266: 				n->stmt = (yyvsp[(2) - (2)].node);
23267: 				n->name = (char*) "select";
23268: 				(yyval.node) = (PGNode *) n;
23269: 			;}
23270:     break;
23271: 
23272:   case 1172:
23273: #line 11 "third_party/libpg_query/grammar/statements/variable_show.y"
23274:     {
23275: 					PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
23276: 					n->name = (yyvsp[(2) - (2)].str);
23277: 					(yyval.node) = (PGNode *) n;
23278: 				;}
23279:     break;
23280: 
23281:   case 1173:
23282: #line 17 "third_party/libpg_query/grammar/statements/variable_show.y"
23283:     {
23284: 					PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
23285: 					n->name = (char*) "timezone";
23286: 					(yyval.node) = (PGNode *) n;
23287: 				;}
23288:     break;
23289: 
23290:   case 1174:
23291: #line 23 "third_party/libpg_query/grammar/statements/variable_show.y"
23292:     {
23293: 					PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
23294: 					n->name = (char*) "transaction_isolation";
23295: 					(yyval.node) = (PGNode *) n;
23296: 				;}
23297:     break;
23298: 
23299:   case 1175:
23300: #line 29 "third_party/libpg_query/grammar/statements/variable_show.y"
23301:     {
23302: 					PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
23303: 					n->name = (char*) "all";
23304: 					(yyval.node) = (PGNode *) n;
23305: 				;}
23306:     break;
23307: 
23308:   case 1178:
23309: #line 39 "third_party/libpg_query/grammar/statements/variable_show.y"
23310:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
23311:     break;
23312: 
23313:   case 1179:
23314: #line 41 "third_party/libpg_query/grammar/statements/variable_show.y"
23315:     { (yyval.str) = psprintf("%s.%s", (yyvsp[(1) - (3)].str), (yyvsp[(3) - (3)].str)); ;}
23316:     break;
23317: 
23318:   case 1180:
23319: #line 7 "third_party/libpg_query/grammar/statements/call.y"
23320:     {
23321: 					PGCallStmt *n = makeNode(PGCallStmt);
23322: 					n->func = (yyvsp[(2) - (2)].node);
23323: 					(yyval.node) = (PGNode *) n;
23324: 				;}
23325:     break;
23326: 
23327:   case 1181:
23328: #line 10 "third_party/libpg_query/grammar/statements/view.y"
23329:     {
23330: 					PGViewStmt *n = makeNode(PGViewStmt);
23331: 					n->view = (yyvsp[(4) - (9)].range);
23332: 					n->view->relpersistence = (yyvsp[(2) - (9)].ival);
23333: 					n->aliases = (yyvsp[(5) - (9)].list);
23334: 					n->query = (yyvsp[(8) - (9)].node);
23335: 					n->replace = false;
23336: 					n->options = (yyvsp[(6) - (9)].list);
23337: 					n->withCheckOption = (yyvsp[(9) - (9)].viewcheckoption);
23338: 					(yyval.node) = (PGNode *) n;
23339: 				;}
23340:     break;
23341: 
23342:   case 1182:
23343: #line 23 "third_party/libpg_query/grammar/statements/view.y"
23344:     {
23345: 					PGViewStmt *n = makeNode(PGViewStmt);
23346: 					n->view = (yyvsp[(6) - (11)].range);
23347: 					n->view->relpersistence = (yyvsp[(4) - (11)].ival);
23348: 					n->aliases = (yyvsp[(7) - (11)].list);
23349: 					n->query = (yyvsp[(10) - (11)].node);
23350: 					n->replace = true;
23351: 					n->options = (yyvsp[(8) - (11)].list);
23352: 					n->withCheckOption = (yyvsp[(11) - (11)].viewcheckoption);
23353: 					(yyval.node) = (PGNode *) n;
23354: 				;}
23355:     break;
23356: 
23357:   case 1183:
23358: #line 36 "third_party/libpg_query/grammar/statements/view.y"
23359:     {
23360: 					PGViewStmt *n = makeNode(PGViewStmt);
23361: 					n->view = (yyvsp[(5) - (12)].range);
23362: 					n->view->relpersistence = (yyvsp[(2) - (12)].ival);
23363: 					n->aliases = (yyvsp[(7) - (12)].list);
23364: 					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[(11) - (12)].node));
23365: 					n->replace = false;
23366: 					n->options = (yyvsp[(9) - (12)].list);
23367: 					n->withCheckOption = (yyvsp[(12) - (12)].viewcheckoption);
23368: 					if (n->withCheckOption != PG_NO_CHECK_OPTION)
23369: 						ereport(ERROR,
23370: 								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
23371: 								 errmsg("WITH CHECK OPTION not supported on recursive views"),
23372: 								 parser_errposition((yylsp[(12) - (12)]))));
23373: 					(yyval.node) = (PGNode *) n;
23374: 				;}
23375:     break;
23376: 
23377:   case 1184:
23378: #line 54 "third_party/libpg_query/grammar/statements/view.y"
23379:     {
23380: 					PGViewStmt *n = makeNode(PGViewStmt);
23381: 					n->view = (yyvsp[(7) - (14)].range);
23382: 					n->view->relpersistence = (yyvsp[(4) - (14)].ival);
23383: 					n->aliases = (yyvsp[(9) - (14)].list);
23384: 					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[(13) - (14)].node));
23385: 					n->replace = true;
23386: 					n->options = (yyvsp[(11) - (14)].list);
23387: 					n->withCheckOption = (yyvsp[(14) - (14)].viewcheckoption);
23388: 					if (n->withCheckOption != PG_NO_CHECK_OPTION)
23389: 						ereport(ERROR,
23390: 								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
23391: 								 errmsg("WITH CHECK OPTION not supported on recursive views"),
23392: 								 parser_errposition((yylsp[(14) - (14)]))));
23393: 					(yyval.node) = (PGNode *) n;
23394: 				;}
23395:     break;
23396: 
23397:   case 1185:
23398: #line 74 "third_party/libpg_query/grammar/statements/view.y"
23399:     { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; ;}
23400:     break;
23401: 
23402:   case 1186:
23403: #line 75 "third_party/libpg_query/grammar/statements/view.y"
23404:     { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; ;}
23405:     break;
23406: 
23407:   case 1187:
23408: #line 76 "third_party/libpg_query/grammar/statements/view.y"
23409:     { (yyval.viewcheckoption) = PG_LOCAL_CHECK_OPTION; ;}
23410:     break;
23411: 
23412:   case 1188:
23413: #line 77 "third_party/libpg_query/grammar/statements/view.y"
23414:     { (yyval.viewcheckoption) = PG_NO_CHECK_OPTION; ;}
23415:     break;
23416: 
23417:   case 1189:
23418: #line 12 "third_party/libpg_query/grammar/statements/create_as.y"
23419:     {
23420: 					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
23421: 					ctas->query = (yyvsp[(6) - (7)].node);
23422: 					ctas->into = (yyvsp[(4) - (7)].into);
23423: 					ctas->relkind = PG_OBJECT_TABLE;
23424: 					ctas->is_select_into = false;
23425: 					ctas->if_not_exists = false;
23426: 					/* cram additional flags into the PGIntoClause */
23427: 					(yyvsp[(4) - (7)].into)->rel->relpersistence = (yyvsp[(2) - (7)].ival);
23428: 					(yyvsp[(4) - (7)].into)->skipData = !((yyvsp[(7) - (7)].boolean));
23429: 					(yyval.node) = (PGNode *) ctas;
23430: 				;}
23431:     break;
23432: 
23433:   case 1190:
23434: #line 25 "third_party/libpg_query/grammar/statements/create_as.y"
23435:     {
23436: 					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
23437: 					ctas->query = (yyvsp[(9) - (10)].node);
23438: 					ctas->into = (yyvsp[(7) - (10)].into);
23439: 					ctas->relkind = PG_OBJECT_TABLE;
23440: 					ctas->is_select_into = false;
23441: 					ctas->if_not_exists = true;
23442: 					/* cram additional flags into the PGIntoClause */
23443: 					(yyvsp[(7) - (10)].into)->rel->relpersistence = (yyvsp[(2) - (10)].ival);
23444: 					(yyvsp[(7) - (10)].into)->skipData = !((yyvsp[(10) - (10)].boolean));
23445: 					(yyval.node) = (PGNode *) ctas;
23446: 				;}
23447:     break;
23448: 
23449:   case 1191:
23450: #line 41 "third_party/libpg_query/grammar/statements/create_as.y"
23451:     { (yyval.boolean) = true; ;}
23452:     break;
23453: 
23454:   case 1192:
23455: #line 42 "third_party/libpg_query/grammar/statements/create_as.y"
23456:     { (yyval.boolean) = false; ;}
23457:     break;
23458: 
23459:   case 1193:
23460: #line 43 "third_party/libpg_query/grammar/statements/create_as.y"
23461:     { (yyval.boolean) = true; ;}
23462:     break;
23463: 
23464:   case 1194:
23465: #line 49 "third_party/libpg_query/grammar/statements/create_as.y"
23466:     {
23467: 					(yyval.into) = makeNode(PGIntoClause);
23468: 					(yyval.into)->rel = (yyvsp[(1) - (4)].range);
23469: 					(yyval.into)->colNames = (yyvsp[(2) - (4)].list);
23470: 					(yyval.into)->options = (yyvsp[(3) - (4)].list);
23471: 					(yyval.into)->onCommit = (yyvsp[(4) - (4)].oncommit);
23472: 					(yyval.into)->viewQuery = NULL;
23473: 					(yyval.into)->skipData = false;		/* might get changed later */
23474: 				;}
23475:     break;
23476: 
23477: 
23478: /* Line 1267 of yacc.c.  */
23479: #line 23480 "third_party/libpg_query/grammar/grammar_out.cpp"
23480:       default: break;
23481:     }
23482:   YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);
23483: 
23484:   YYPOPSTACK (yylen);
23485:   yylen = 0;
23486:   YY_STACK_PRINT (yyss, yyssp);
23487: 
23488:   *++yyvsp = yyval;
23489:   *++yylsp = yyloc;
23490: 
23491:   /* Now `shift' the result of the reduction.  Determine what state
23492:      that goes to, based on the state we popped back to and the rule
23493:      number reduced by.  */
23494: 
23495:   yyn = yyr1[yyn];
23496: 
23497:   yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
23498:   if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
23499:     yystate = yytable[yystate];
23500:   else
23501:     yystate = yydefgoto[yyn - YYNTOKENS];
23502: 
23503:   goto yynewstate;
23504: 
23505: 
23506: /*------------------------------------.
23507: | yyerrlab -- here on detecting error |
23508: `------------------------------------*/
23509: yyerrlab:
23510:   /* If not already recovering from an error, report this error.  */
23511:   if (!yyerrstatus)
23512:     {
23513:       ++yynerrs;
23514: #if ! YYERROR_VERBOSE
23515:       yyerror (&yylloc, yyscanner, YY_("syntax error"));
23516: #else
23517:       {
23518: 	YYSIZE_T yysize = yysyntax_error (0, yystate, yychar);
23519: 	if (yymsg_alloc < yysize && yymsg_alloc < YYSTACK_ALLOC_MAXIMUM)
23520: 	  {
23521: 	    YYSIZE_T yyalloc = 2 * yysize;
23522: 	    if (! (yysize <= yyalloc && yyalloc <= YYSTACK_ALLOC_MAXIMUM))
23523: 	      yyalloc = YYSTACK_ALLOC_MAXIMUM;
23524: 	    if (yymsg != yymsgbuf)
23525: 	      YYSTACK_FREE (yymsg);
23526: 	    yymsg = (char *) YYSTACK_ALLOC (yyalloc);
23527: 	    if (yymsg)
23528: 	      yymsg_alloc = yyalloc;
23529: 	    else
23530: 	      {
23531: 		yymsg = yymsgbuf;
23532: 		yymsg_alloc = sizeof yymsgbuf;
23533: 	      }
23534: 	  }
23535: 
23536: 	if (0 < yysize && yysize <= yymsg_alloc)
23537: 	  {
23538: 	    (void) yysyntax_error (yymsg, yystate, yychar);
23539: 	    yyerror (&yylloc, yyscanner, yymsg);
23540: 	  }
23541: 	else
23542: 	  {
23543: 	    yyerror (&yylloc, yyscanner, YY_("syntax error"));
23544: 	    if (yysize != 0)
23545: 	      goto yyexhaustedlab;
23546: 	  }
23547:       }
23548: #endif
23549:     }
23550: 
23551:   yyerror_range[0] = yylloc;
23552: 
23553:   if (yyerrstatus == 3)
23554:     {
23555:       /* If just tried and failed to reuse look-ahead token after an
23556: 	 error, discard it.  */
23557: 
23558:       if (yychar <= YYEOF)
23559: 	{
23560: 	  /* Return failure if at end of input.  */
23561: 	  if (yychar == YYEOF)
23562: 	    YYABORT;
23563: 	}
23564:       else
23565: 	{
23566: 	  yydestruct ("Error: discarding",
23567: 		      yytoken, &yylval, &yylloc, yyscanner);
23568: 	  yychar = YYEMPTY;
23569: 	}
23570:     }
23571: 
23572:   /* Else will try to reuse look-ahead token after shifting the error
23573:      token.  */
23574:   goto yyerrlab1;
23575: 
23576: 
23577: /*---------------------------------------------------.
23578: | yyerrorlab -- error raised explicitly by YYERROR.  |
23579: `---------------------------------------------------*/
23580: yyerrorlab:
23581: 
23582:   /* Pacify compilers like GCC when the user code never invokes
23583:      YYERROR and the label yyerrorlab therefore never appears in user
23584:      code.  */
23585:   if (/*CONSTCOND*/ 0)
23586:      goto yyerrorlab;
23587: 
23588:   yyerror_range[0] = yylsp[1-yylen];
23589:   /* Do not reclaim the symbols of the rule which action triggered
23590:      this YYERROR.  */
23591:   YYPOPSTACK (yylen);
23592:   yylen = 0;
23593:   YY_STACK_PRINT (yyss, yyssp);
23594:   yystate = *yyssp;
23595:   goto yyerrlab1;
23596: 
23597: 
23598: /*-------------------------------------------------------------.
23599: | yyerrlab1 -- common code for both syntax error and YYERROR.  |
23600: `-------------------------------------------------------------*/
23601: yyerrlab1:
23602:   yyerrstatus = 3;	/* Each real token shifted decrements this.  */
23603: 
23604:   for (;;)
23605:     {
23606:       yyn = yypact[yystate];
23607:       if (yyn != YYPACT_NINF)
23608: 	{
23609: 	  yyn += YYTERROR;
23610: 	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
23611: 	    {
23612: 	      yyn = yytable[yyn];
23613: 	      if (0 < yyn)
23614: 		break;
23615: 	    }
23616: 	}
23617: 
23618:       /* Pop the current state because it cannot handle the error token.  */
23619:       if (yyssp == yyss)
23620: 	YYABORT;
23621: 
23622:       yyerror_range[0] = *yylsp;
23623:       yydestruct ("Error: popping",
23624: 		  yystos[yystate], yyvsp, yylsp, yyscanner);
23625:       YYPOPSTACK (1);
23626:       yystate = *yyssp;
23627:       YY_STACK_PRINT (yyss, yyssp);
23628:     }
23629: 
23630:   if (yyn == YYFINAL)
23631:     YYACCEPT;
23632: 
23633:   *++yyvsp = yylval;
23634: 
23635:   yyerror_range[1] = yylloc;
23636:   /* Using YYLLOC is tempting, but would change the location of
23637:      the look-ahead.  YYLOC is available though.  */
23638:   YYLLOC_DEFAULT (yyloc, (yyerror_range - 1), 2);
23639:   *++yylsp = yyloc;
23640: 
23641:   /* Shift the error token.  */
23642:   YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);
23643: 
23644:   yystate = yyn;
23645:   goto yynewstate;
23646: 
23647: 
23648: /*-------------------------------------.
23649: | yyacceptlab -- YYACCEPT comes here.  |
23650: `-------------------------------------*/
23651: yyacceptlab:
23652:   yyresult = 0;
23653:   goto yyreturn;
23654: 
23655: /*-----------------------------------.
23656: | yyabortlab -- YYABORT comes here.  |
23657: `-----------------------------------*/
23658: yyabortlab:
23659:   yyresult = 1;
23660:   goto yyreturn;
23661: 
23662: #ifndef yyoverflow
23663: /*-------------------------------------------------.
23664: | yyexhaustedlab -- memory exhaustion comes here.  |
23665: `-------------------------------------------------*/
23666: yyexhaustedlab:
23667:   yyerror (&yylloc, yyscanner, YY_("memory exhausted"));
23668:   yyresult = 2;
23669:   /* Fall through.  */
23670: #endif
23671: 
23672: yyreturn:
23673:   if (yychar != YYEOF && yychar != YYEMPTY)
23674:      yydestruct ("Cleanup: discarding lookahead",
23675: 		 yytoken, &yylval, &yylloc, yyscanner);
23676:   /* Do not reclaim the symbols of the rule which action triggered
23677:      this YYABORT or YYACCEPT.  */
23678:   YYPOPSTACK (yylen);
23679:   YY_STACK_PRINT (yyss, yyssp);
23680:   while (yyssp != yyss)
23681:     {
23682:       yydestruct ("Cleanup: popping",
23683: 		  yystos[*yyssp], yyvsp, yylsp, yyscanner);
23684:       YYPOPSTACK (1);
23685:     }
23686: #ifndef yyoverflow
23687:   if (yyss != yyssa)
23688:     YYSTACK_FREE (yyss);
23689: #endif
23690: #if YYERROR_VERBOSE
23691:   if (yymsg != yymsgbuf)
23692:     YYSTACK_FREE (yymsg);
23693: #endif
23694:   /* Make sure YYID is used.  */
23695:   return YYID (yyresult);
23696: }
23697: 
23698: 
23699: #line 70 "third_party/libpg_query/grammar/statements/create_as.y"
23700: 
23701: 
23702: #line 1 "third_party/libpg_query/grammar/grammar.cpp"
23703: /*
23704:  * The signature of this function is required by bison.  However, we
23705:  * ignore the passed yylloc and instead use the last token position
23706:  * available from the scanner.
23707:  */
23708: static void
23709: base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner, const char *msg)
23710: {
23711: 	parser_yyerror(msg);
23712: }
23713: 
23714: static PGRawStmt *
23715: makeRawStmt(PGNode *stmt, int stmt_location)
23716: {
23717: 	PGRawStmt    *rs = makeNode(PGRawStmt);
23718: 
23719: 	rs->stmt = stmt;
23720: 	rs->stmt_location = stmt_location;
23721: 	rs->stmt_len = 0;			/* might get changed later */
23722: 	return rs;
23723: }
23724: 
23725: /* Adjust a PGRawStmt to reflect that it doesn't run to the end of the string */
23726: static void
23727: updateRawStmtEnd(PGRawStmt *rs, int end_location)
23728: {
23729: 	/*
23730: 	 * If we already set the length, don't change it.  This is for situations
23731: 	 * like "select foo ;; select bar" where the same statement will be last
23732: 	 * in the string for more than one semicolon.
23733: 	 */
23734: 	if (rs->stmt_len > 0)
23735: 		return;
23736: 
23737: 	/* OK, update length of PGRawStmt */
23738: 	rs->stmt_len = end_location - rs->stmt_location;
23739: }
23740: 
23741: static PGNode *
23742: makeColumnRef(char *colname, PGList *indirection,
23743: 			  int location, core_yyscan_t yyscanner)
23744: {
23745: 	/*
23746: 	 * Generate a PGColumnRef node, with an PGAIndirection node added if there
23747: 	 * is any subscripting in the specified indirection list.  However,
23748: 	 * any field selection at the start of the indirection list must be
23749: 	 * transposed into the "fields" part of the PGColumnRef node.
23750: 	 */
23751: 	PGColumnRef  *c = makeNode(PGColumnRef);
23752: 	int		nfields = 0;
23753: 	PGListCell *l;
23754: 
23755: 	c->location = location;
23756: 	foreach(l, indirection)
23757: 	{
23758: 		if (IsA(lfirst(l), PGAIndices))
23759: 		{
23760: 			PGAIndirection *i = makeNode(PGAIndirection);
23761: 
23762: 			if (nfields == 0)
23763: 			{
23764: 				/* easy case - all indirection goes to PGAIndirection */
23765: 				c->fields = list_make1(makeString(colname));
23766: 				i->indirection = check_indirection(indirection, yyscanner);
23767: 			}
23768: 			else
23769: 			{
23770: 				/* got to split the list in two */
23771: 				i->indirection = check_indirection(list_copy_tail(indirection,
23772: 																  nfields),
23773: 												   yyscanner);
23774: 				indirection = list_truncate(indirection, nfields);
23775: 				c->fields = lcons(makeString(colname), indirection);
23776: 			}
23777: 			i->arg = (PGNode *) c;
23778: 			return (PGNode *) i;
23779: 		}
23780: 		else if (IsA(lfirst(l), PGAStar))
23781: 		{
23782: 			/* We only allow '*' at the end of a PGColumnRef */
23783: 			if (lnext(l) != NULL)
23784: 				parser_yyerror("improper use of \"*\"");
23785: 		}
23786: 		nfields++;
23787: 	}
23788: 	/* No subscripting, so all indirection gets added to field list */
23789: 	c->fields = lcons(makeString(colname), indirection);
23790: 	return (PGNode *) c;
23791: }
23792: 
23793: static PGNode *
23794: makeTypeCast(PGNode *arg, PGTypeName *tpname, int trycast, int location)
23795: {
23796: 	PGTypeCast *n = makeNode(PGTypeCast);
23797: 	n->arg = arg;
23798: 	n->typeName = tpname;
23799: 	n->tryCast = trycast;
23800: 	n->location = location;
23801: 	return (PGNode *) n;
23802: }
23803: 
23804: static PGNode *
23805: makeStringConst(char *str, int location)
23806: {
23807: 	PGAConst *n = makeNode(PGAConst);
23808: 
23809: 	n->val.type = T_PGString;
23810: 	n->val.val.str = str;
23811: 	n->location = location;
23812: 
23813: 	return (PGNode *)n;
23814: }
23815: 
23816: static PGNode *
23817: makeStringConstCast(char *str, int location, PGTypeName *tpname)
23818: {
23819: 	PGNode *s = makeStringConst(str, location);
23820: 
23821: 	return makeTypeCast(s, tpname, 0, -1);
23822: }
23823: 
23824: static PGNode *
23825: makeIntervalNode(char *str, int location, PGList *typmods) {
23826: 	PGIntervalConstant *n = makeNode(PGIntervalConstant);
23827: 
23828: 	n->val_type = T_PGString;
23829: 	n->sval = str;
23830: 	n->location = location;
23831: 	n->typmods = typmods;
23832: 
23833: 	return (PGNode *)n;
23834: 
23835: }
23836: 
23837: static PGNode *
23838: makeIntervalNode(int val, int location, PGList *typmods) {
23839: 	PGIntervalConstant *n = makeNode(PGIntervalConstant);
23840: 
23841: 	n->val_type = T_PGInteger;
23842: 	n->ival = val;
23843: 	n->location = location;
23844: 	n->typmods = typmods;
23845: 
23846: 	return (PGNode *)n;
23847: }
23848: 
23849: static PGNode *
23850: makeIntervalNode(PGNode *arg, int location, PGList *typmods) {
23851: 	PGIntervalConstant *n = makeNode(PGIntervalConstant);
23852: 
23853: 	n->val_type = T_PGAExpr;
23854: 	n->eval = arg;
23855: 	n->location = location;
23856: 	n->typmods = typmods;
23857: 
23858: 	return (PGNode *)n;
23859: }
23860: 
23861: static PGNode *
23862: makeSampleSize(PGValue *sample_size, bool is_percentage) {
23863: 	PGSampleSize *n = makeNode(PGSampleSize);
23864: 
23865: 	n->sample_size = *sample_size;
23866: 	n->is_percentage = is_percentage;
23867: 
23868: 	return (PGNode *)n;
23869: }
23870: 
23871: static PGNode *
23872: makeSampleOptions(PGNode *sample_size, char *method, int seed, int location) {
23873: 	PGSampleOptions *n = makeNode(PGSampleOptions);
23874: 
23875: 	n->sample_size = sample_size;
23876: 	n->method = method;
23877: 	n->seed = seed;
23878: 	n->location = location;
23879: 
23880: 	return (PGNode *)n;
23881: }
23882: 
23883: static PGNode *
23884: makeIntConst(int val, int location)
23885: {
23886: 	PGAConst *n = makeNode(PGAConst);
23887: 
23888: 	n->val.type = T_PGInteger;
23889: 	n->val.val.ival = val;
23890: 	n->location = location;
23891: 
23892: 	return (PGNode *)n;
23893: }
23894: 
23895: static PGNode *
23896: makeFloatConst(char *str, int location)
23897: {
23898: 	PGAConst *n = makeNode(PGAConst);
23899: 
23900: 	n->val.type = T_PGFloat;
23901: 	n->val.val.str = str;
23902: 	n->location = location;
23903: 
23904: 	return (PGNode *)n;
23905: }
23906: 
23907: static PGNode *
23908: makeBitStringConst(char *str, int location)
23909: {
23910: 	PGAConst *n = makeNode(PGAConst);
23911: 
23912: 	n->val.type = T_PGBitString;
23913: 	n->val.val.str = str;
23914: 	n->location = location;
23915: 
23916: 	return (PGNode *)n;
23917: }
23918: 
23919: static PGNode *
23920: makeNullAConst(int location)
23921: {
23922: 	PGAConst *n = makeNode(PGAConst);
23923: 
23924: 	n->val.type = T_PGNull;
23925: 	n->location = location;
23926: 
23927: 	return (PGNode *)n;
23928: }
23929: 
23930: static PGNode *
23931: makeAConst(PGValue *v, int location)
23932: {
23933: 	PGNode *n;
23934: 
23935: 	switch (v->type)
23936: 	{
23937: 		case T_PGFloat:
23938: 			n = makeFloatConst(v->val.str, location);
23939: 			break;
23940: 
23941: 		case T_PGInteger:
23942: 			n = makeIntConst(v->val.ival, location);
23943: 			break;
23944: 
23945: 		case T_PGString:
23946: 		default:
23947: 			n = makeStringConst(v->val.str, location);
23948: 			break;
23949: 	}
23950: 
23951: 	return n;
23952: }
23953: 
23954: /* makeBoolAConst()
23955:  * Create an PGAConst string node and put it inside a boolean cast.
23956:  */
23957: static PGNode *
23958: makeBoolAConst(bool state, int location)
23959: {
23960: 	PGAConst *n = makeNode(PGAConst);
23961: 
23962: 	n->val.type = T_PGString;
23963: 	n->val.val.str = (state ? (char*) "t" : (char*) "f");
23964: 	n->location = location;
23965: 
23966: 	return makeTypeCast((PGNode *)n, SystemTypeName("bool"), 0, -1);
23967: }
23968: 
23969: /* check_qualified_name --- check the result of qualified_name production
23970:  *
23971:  * It's easiest to let the grammar production for qualified_name allow
23972:  * subscripts and '*', which we then must reject here.
23973:  */
23974: static void
23975: check_qualified_name(PGList *names, core_yyscan_t yyscanner)
23976: {
23977: 	PGListCell   *i;
23978: 
23979: 	foreach(i, names)
23980: 	{
23981: 		if (!IsA(lfirst(i), PGString))
23982: 			parser_yyerror("syntax error");
23983: 	}
23984: }
23985: 
23986: /* check_func_name --- check the result of func_name production
23987:  *
23988:  * It's easiest to let the grammar production for func_name allow subscripts
23989:  * and '*', which we then must reject here.
23990:  */
23991: static PGList *
23992: check_func_name(PGList *names, core_yyscan_t yyscanner)
23993: {
23994: 	PGListCell   *i;
23995: 
23996: 	foreach(i, names)
23997: 	{
23998: 		if (!IsA(lfirst(i), PGString))
23999: 			parser_yyerror("syntax error");
24000: 	}
24001: 	return names;
24002: }
24003: 
24004: /* check_indirection --- check the result of indirection production
24005:  *
24006:  * We only allow '*' at the end of the list, but it's hard to enforce that
24007:  * in the grammar, so do it here.
24008:  */
24009: static PGList *
24010: check_indirection(PGList *indirection, core_yyscan_t yyscanner)
24011: {
24012: 	PGListCell *l;
24013: 
24014: 	foreach(l, indirection)
24015: 	{
24016: 		if (IsA(lfirst(l), PGAStar))
24017: 		{
24018: 			if (lnext(l) != NULL)
24019: 				parser_yyerror("improper use of \"*\"");
24020: 		}
24021: 	}
24022: 	return indirection;
24023: }
24024: 
24025: /* makeParamRef
24026:  * Creates a new PGParamRef node
24027:  */
24028: static PGNode* makeParamRef(int number, int location)
24029: {
24030: 	PGParamRef *p = makeNode(PGParamRef);
24031: 	p->number = number;
24032: 	p->location = location;
24033: 	return (PGNode *) p;
24034: }
24035: 
24036: 
24037: /* insertSelectOptions()
24038:  * Insert ORDER BY, etc into an already-constructed SelectStmt.
24039:  *
24040:  * This routine is just to avoid duplicating code in PGSelectStmt productions.
24041:  */
24042: static void
24043: insertSelectOptions(PGSelectStmt *stmt,
24044: 					PGList *sortClause, PGList *lockingClause,
24045: 					PGNode *limitOffset, PGNode *limitCount,
24046: 					PGWithClause *withClause,
24047: 					core_yyscan_t yyscanner)
24048: {
24049: 	Assert(IsA(stmt, PGSelectStmt));
24050: 
24051: 	/*
24052: 	 * Tests here are to reject constructs like
24053: 	 *	(SELECT foo ORDER BY bar) ORDER BY baz
24054: 	 */
24055: 	if (sortClause)
24056: 	{
24057: 		if (stmt->sortClause)
24058: 			ereport(ERROR,
24059: 					(errcode(PG_ERRCODE_SYNTAX_ERROR),
24060: 					 errmsg("multiple ORDER BY clauses not allowed"),
24061: 					 parser_errposition(exprLocation((PGNode *) sortClause))));
24062: 		stmt->sortClause = sortClause;
24063: 	}
24064: 	/* We can handle multiple locking clauses, though */
24065: 	stmt->lockingClause = list_concat(stmt->lockingClause, lockingClause);
24066: 	if (limitOffset)
24067: 	{
24068: 		if (stmt->limitOffset)
24069: 			ereport(ERROR,
24070: 					(errcode(PG_ERRCODE_SYNTAX_ERROR),
24071: 					 errmsg("multiple OFFSET clauses not allowed"),
24072: 					 parser_errposition(exprLocation(limitOffset))));
24073: 		stmt->limitOffset = limitOffset;
24074: 	}
24075: 	if (limitCount)
24076: 	{
24077: 		if (stmt->limitCount)
24078: 			ereport(ERROR,
24079: 					(errcode(PG_ERRCODE_SYNTAX_ERROR),
24080: 					 errmsg("multiple LIMIT clauses not allowed"),
24081: 					 parser_errposition(exprLocation(limitCount))));
24082: 		stmt->limitCount = limitCount;
24083: 	}
24084: 	if (withClause)
24085: 	{
24086: 		if (stmt->withClause)
24087: 			ereport(ERROR,
24088: 					(errcode(PG_ERRCODE_SYNTAX_ERROR),
24089: 					 errmsg("multiple WITH clauses not allowed"),
24090: 					 parser_errposition(exprLocation((PGNode *) withClause))));
24091: 		stmt->withClause = withClause;
24092: 	}
24093: }
24094: 
24095: static PGNode *
24096: makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg)
24097: {
24098: 	PGSelectStmt *n = makeNode(PGSelectStmt);
24099: 
24100: 	n->op = op;
24101: 	n->all = all;
24102: 	n->larg = (PGSelectStmt *) larg;
24103: 	n->rarg = (PGSelectStmt *) rarg;
24104: 	return (PGNode *) n;
24105: }
24106: 
24107: /* SystemFuncName()
24108:  * Build a properly-qualified reference to a built-in function.
24109:  */
24110: PGList *
24111: SystemFuncName(const char *name)
24112: {
24113: 	return list_make2(makeString(DEFAULT_SCHEMA), makeString(name));
24114: }
24115: 
24116: /* SystemTypeName()
24117:  * Build a properly-qualified reference to a built-in type.
24118:  *
24119:  * typmod is defaulted, but may be changed afterwards by caller.
24120:  * Likewise for the location.
24121:  */
24122: PGTypeName *
24123: SystemTypeName(const char *name)
24124: {
24125: 	return makeTypeNameFromNameList(list_make2(makeString(DEFAULT_SCHEMA),
24126: 											   makeString(name)));
24127: }
24128: 
24129: /* doNegate()
24130:  * Handle negation of a numeric constant.
24131:  *
24132:  * Formerly, we did this here because the optimizer couldn't cope with
24133:  * indexquals that looked like "var = -4" --- it wants "var = const"
24134:  * and a unary minus operator applied to a constant didn't qualify.
24135:  * As of Postgres 7.0, that problem doesn't exist anymore because there
24136:  * is a constant-subexpression simplifier in the optimizer.  However,
24137:  * there's still a good reason for doing this here, which is that we can
24138:  * postpone committing to a particular internal representation for simple
24139:  * negative constants.	It's better to leave "-123.456" in string form
24140:  * until we know what the desired type is.
24141:  */
24142: static PGNode *
24143: doNegate(PGNode *n, int location)
24144: {
24145: 	if (IsA(n, PGAConst))
24146: 	{
24147: 		PGAConst *con = (PGAConst *)n;
24148: 
24149: 		/* report the constant's location as that of the '-' sign */
24150: 		con->location = location;
24151: 
24152: 		if (con->val.type == T_PGInteger)
24153: 		{
24154: 			con->val.val.ival = -con->val.val.ival;
24155: 			return n;
24156: 		}
24157: 		if (con->val.type == T_PGFloat)
24158: 		{
24159: 			doNegateFloat(&con->val);
24160: 			return n;
24161: 		}
24162: 	}
24163: 
24164: 	return (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", NULL, n, location);
24165: }
24166: 
24167: static void
24168: doNegateFloat(PGValue *v)
24169: {
24170: 	char   *oldval = v->val.str;
24171: 
24172: 	Assert(IsA(v, PGFloat));
24173: 	if (*oldval == '+')
24174: 		oldval++;
24175: 	if (*oldval == '-')
24176: 		v->val.str = oldval+1;	/* just strip the '-' */
24177: 	else
24178: 		v->val.str = psprintf("-%s", oldval);
24179: }
24180: 
24181: static PGNode *
24182: makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location)
24183: {
24184: 	PGNode	   *lexp = lexpr;
24185: 
24186: 	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
24187: 	while (IsA(lexp, PGAExpr) &&
24188: 		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
24189: 		lexp = ((PGAExpr *) lexp)->lexpr;
24190: 	/* Flatten "a AND b AND c ..." to a single PGBoolExpr on sight */
24191: 	if (IsA(lexp, PGBoolExpr))
24192: 	{
24193: 		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;
24194: 
24195: 		if (blexpr->boolop == PG_AND_EXPR)
24196: 		{
24197: 			blexpr->args = lappend(blexpr->args, rexpr);
24198: 			return (PGNode *) blexpr;
24199: 		}
24200: 	}
24201: 	return (PGNode *) makeBoolExpr(PG_AND_EXPR, list_make2(lexpr, rexpr), location);
24202: }
24203: 
24204: static PGNode *
24205: makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location)
24206: {
24207: 	PGNode	   *lexp = lexpr;
24208: 
24209: 	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
24210: 	while (IsA(lexp, PGAExpr) &&
24211: 		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
24212: 		lexp = ((PGAExpr *) lexp)->lexpr;
24213: 	/* Flatten "a OR b OR c ..." to a single PGBoolExpr on sight */
24214: 	if (IsA(lexp, PGBoolExpr))
24215: 	{
24216: 		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;
24217: 
24218: 		if (blexpr->boolop == PG_OR_EXPR)
24219: 		{
24220: 			blexpr->args = lappend(blexpr->args, rexpr);
24221: 			return (PGNode *) blexpr;
24222: 		}
24223: 	}
24224: 	return (PGNode *) makeBoolExpr(PG_OR_EXPR, list_make2(lexpr, rexpr), location);
24225: }
24226: 
24227: static PGNode *
24228: makeNotExpr(PGNode *expr, int location)
24229: {
24230: 	return (PGNode *) makeBoolExpr(PG_NOT_EXPR, list_make1(expr), location);
24231: }
24232: 
24233: static PGNode *
24234: makeSQLValueFunction(PGSQLValueFunctionOp op, int32_t typmod, int location)
24235: {
24236: 	PGSQLValueFunction *svf = makeNode(PGSQLValueFunction);
24237: 
24238: 	svf->op = op;
24239: 	/* svf->type will be filled during parse analysis */
24240: 	svf->typmod = typmod;
24241: 	svf->location = location;
24242: 	return (PGNode *) svf;
24243: }
24244: 
24245: /* Separate PGConstraint nodes from COLLATE clauses in a */
24246: static void
24247: SplitColQualList(PGList *qualList,
24248: 				 PGList **constraintList, PGCollateClause **collClause,
24249: 				 core_yyscan_t yyscanner)
24250: {
24251: 	PGListCell   *cell;
24252: 	PGListCell   *prev;
24253: 	PGListCell   *next;
24254: 
24255: 	*collClause = NULL;
24256: 	prev = NULL;
24257: 	for (cell = list_head(qualList); cell; cell = next)
24258: 	{
24259: 		PGNode   *n = (PGNode *) lfirst(cell);
24260: 
24261: 		next = lnext(cell);
24262: 		if (IsA(n, PGConstraint))
24263: 		{
24264: 			/* keep it in list */
24265: 			prev = cell;
24266: 			continue;
24267: 		}
24268: 		if (IsA(n, PGCollateClause))
24269: 		{
24270: 			PGCollateClause *c = (PGCollateClause *) n;
24271: 
24272: 			if (*collClause)
24273: 				ereport(ERROR,
24274: 						(errcode(PG_ERRCODE_SYNTAX_ERROR),
24275: 						 errmsg("multiple COLLATE clauses not allowed"),
24276: 						 parser_errposition(c->location)));
24277: 			*collClause = c;
24278: 		}
24279: 		else
24280: 			elog(ERROR, "unexpected node type %d", (int) n->type);
24281: 		/* remove non-Constraint nodes from qualList */
24282: 		qualList = list_delete_cell(qualList, cell, prev);
24283: 	}
24284: 	*constraintList = qualList;
24285: }
24286: 
24287: /*
24288:  * Process result of ConstraintAttributeSpec, and set appropriate bool flags
24289:  * in the output command node.  Pass NULL for any flags the particular
24290:  * command doesn't support.
24291:  */
24292: static void
24293: processCASbits(int cas_bits, int location, const char *constrType,
24294: 			   bool *deferrable, bool *initdeferred, bool *not_valid,
24295: 			   bool *no_inherit, core_yyscan_t yyscanner)
24296: {
24297: 	/* defaults */
24298: 	if (deferrable)
24299: 		*deferrable = false;
24300: 	if (initdeferred)
24301: 		*initdeferred = false;
24302: 	if (not_valid)
24303: 		*not_valid = false;
24304: 
24305: 	if (cas_bits & (CAS_DEFERRABLE | CAS_INITIALLY_DEFERRED))
24306: 	{
24307: 		if (deferrable)
24308: 			*deferrable = true;
24309: 		else
24310: 			ereport(ERROR,
24311: 					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
24312: 					 /* translator: %s is CHECK, UNIQUE, or similar */
24313: 					 errmsg("%s constraints cannot be marked DEFERRABLE",
24314: 							constrType),
24315: 					 parser_errposition(location)));
24316: 	}
24317: 
24318: 	if (cas_bits & CAS_INITIALLY_DEFERRED)
24319: 	{
24320: 		if (initdeferred)
24321: 			*initdeferred = true;
24322: 		else
24323: 			ereport(ERROR,
24324: 					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
24325: 					 /* translator: %s is CHECK, UNIQUE, or similar */
24326: 					 errmsg("%s constraints cannot be marked DEFERRABLE",
24327: 							constrType),
24328: 					 parser_errposition(location)));
24329: 	}
24330: 
24331: 	if (cas_bits & CAS_NOT_VALID)
24332: 	{
24333: 		if (not_valid)
24334: 			*not_valid = true;
24335: 		else
24336: 			ereport(ERROR,
24337: 					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
24338: 					 /* translator: %s is CHECK, UNIQUE, or similar */
24339: 					 errmsg("%s constraints cannot be marked NOT VALID",
24340: 							constrType),
24341: 					 parser_errposition(location)));
24342: 	}
24343: 
24344: 	if (cas_bits & CAS_NO_INHERIT)
24345: 	{
24346: 		if (no_inherit)
24347: 			*no_inherit = true;
24348: 		else
24349: 			ereport(ERROR,
24350: 					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
24351: 					 /* translator: %s is CHECK, UNIQUE, or similar */
24352: 					 errmsg("%s constraints cannot be marked NO INHERIT",
24353: 							constrType),
24354: 					 parser_errposition(location)));
24355: 	}
24356: }
24357: 
24358: /*----------
24359:  * Recursive view transformation
24360:  *
24361:  * Convert
24362:  *
24363:  *     CREATE RECURSIVE VIEW relname (aliases) AS query
24364:  *
24365:  * to
24366:  *
24367:  *     CREATE VIEW relname (aliases) AS
24368:  *         WITH RECURSIVE relname (aliases) AS (query)
24369:  *         SELECT aliases FROM relname
24370:  *
24371:  * Actually, just the WITH ... part, which is then inserted into the original
24372:  * view as the query.
24373:  * ----------
24374:  */
24375: static PGNode *
24376: makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query)
24377: {
24378: 	PGSelectStmt *s = makeNode(PGSelectStmt);
24379: 	PGWithClause *w = makeNode(PGWithClause);
24380: 	PGCommonTableExpr *cte = makeNode(PGCommonTableExpr);
24381: 	PGList	   *tl = NIL;
24382: 	PGListCell   *lc;
24383: 
24384: 	/* create common table expression */
24385: 	cte->ctename = relname;
24386: 	cte->aliascolnames = aliases;
24387: 	cte->ctequery = query;
24388: 	cte->location = -1;
24389: 
24390: 	/* create WITH clause and attach CTE */
24391: 	w->recursive = true;
24392: 	w->ctes = list_make1(cte);
24393: 	w->location = -1;
24394: 
24395: 	/* create target list for the new SELECT from the alias list of the
24396: 	 * recursive view specification */
24397: 	foreach (lc, aliases)
24398: 	{
24399: 		PGResTarget *rt = makeNode(PGResTarget);
24400: 
24401: 		rt->name = NULL;
24402: 		rt->indirection = NIL;
24403: 		rt->val = makeColumnRef(strVal(lfirst(lc)), NIL, -1, 0);
24404: 		rt->location = -1;
24405: 
24406: 		tl = lappend(tl, rt);
24407: 	}
24408: 
24409: 	/* create new SELECT combining WITH clause, target list, and fake FROM
24410: 	 * clause */
24411: 	s->withClause = w;
24412: 	s->targetList = tl;
24413: 	s->fromClause = list_make1(makeRangeVar(NULL, relname, -1));
24414: 
24415: 	return (PGNode *) s;
24416: }
24417: 
24418: /* parser_init()
24419:  * Initialize to parse one query string
24420:  */
24421: void
24422: parser_init(base_yy_extra_type *yyext)
24423: {
24424: 	yyext->parsetree = NIL;		/* in case grammar forgets to set it */
24425: }
24426: 
24427: #undef yyparse
24428: #undef yylex
24429: #undef yyerror
24430: #undef yylval
24431: #undef yychar
24432: #undef yydebug
24433: #undef yynerrs
24434: #undef yylloc
24435: 
24436: } // namespace duckdb_libpgquery
[end of third_party/libpg_query/src_backend_parser_gram.cpp]
</code>
Here is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.
<patch>
--- a/file.cpp
+++ b/file.cpp
@@ -3,35 +3,44 @@
 #include <cstdlib>
 
 int euclidean(int a, int b) {
-    while (b) {
-        int temp = b;
-        b = a % b;
-        a = temp;
+    if (b == 0) {
+        return a;
     }
-    return a;
+    return euclidean(b, a % b);
 }
 
 std::vector<std::pair<int, int>> bresenham(int x0, int y0, int x1, int y1) {
     std::vector<std::pair<int, int>> points;
     int dx = abs(x1 - x0);
     int dy = abs(y1 - y0);
+    int x = x0, y = y0;
     int sx = (x0 < x1) ? 1 : -1;
     int sy = (y0 < y1) ? 1 : -1;
-    int err = dx - dy;
 
-    while (true) {
-        points.emplace_back(x0, y0);
-        if (x0 == x1 && y0 == y1) break;
-        int e2 = 2 * err;
-        if (e2 > -dy) {
+    if (dx > dy) {
+        int err = dx / 2;
+        while (x != x1) {
+            points.emplace_back(x, y);
             err -= dy;
-            x0 += sx;
+            if (err < 0) {
+                y += sy;
+                err += dx;
+            }
+            x += sx;
         }
-        if (e2 < dx) {
-            err += dx;
-            y0 += sy;
+    } else {
+        int err = dy / 2;
+        while (y != y1) {
+            points.emplace_back(x, y);
+            err -= dx;
+            if (err < 0) {
+                x += sx;
+                err += dy;
+            }
+            y += sy;
         }
     }
 
+    points.emplace_back(x, y);
     return points;
 }

</patch>

I need you to solve the provided issue by generating a single patch file that I can apply directly to this repository using git apply.
Please respond with a single patch file in the format shown above.
Make sure to only include the patch file contents so that the contents of your output can be copied into a patch file and applied directly

Respond below: