{
  "repo": "duckdb/duckdb",
  "pull_number": 12033,
  "instance_id": "duckdb__duckdb-12033",
  "issue_numbers": [
    "11997"
  ],
  "base_commit": "dcf7d548e57f922dad7ae13cef6dd62f02da0c42",
  "patch": "diff --git a/extension/json/json_common.cpp b/extension/json/json_common.cpp\nindex 65e5ba721edd..edb961e26b02 100644\n--- a/extension/json/json_common.cpp\n+++ b/extension/json/json_common.cpp\n@@ -1,4 +1,5 @@\n #include \"json_common.hpp\"\n+\n #include \"duckdb/common/exception/binder_exception.hpp\"\n \n namespace duckdb {\n@@ -31,16 +32,58 @@ string ThrowPathError(const char *ptr, const char *end, const bool binder) {\n \t}\n }\n \n-static inline idx_t ReadString(const char *ptr, const char *const end, const bool escaped) {\n+struct JSONKeyReadResult {\n+public:\n+\tstatic inline JSONKeyReadResult Empty() {\n+\t\treturn {idx_t(0), string()};\n+\t}\n+\n+\tstatic inline JSONKeyReadResult WildCard() {\n+\t\treturn {1, \"*\"};\n+\t}\n+\n+\tinline bool IsValid() {\n+\t\treturn chars_read != 0;\n+\t}\n+\n+\tinline bool IsWildCard() {\n+\t\treturn key == \"*\";\n+\t}\n+\n+public:\n+\tidx_t chars_read;\n+\tstring key;\n+};\n+\n+static inline JSONKeyReadResult ReadString(const char *ptr, const char *const end, const bool escaped) {\n \tconst char *const before = ptr;\n \tif (escaped) {\n+\t\tauto key = make_unsafe_uniq_array<char>(end - ptr);\n+\t\tidx_t key_len = 0;\n+\n+\t\tbool backslash = false;\n \t\twhile (ptr != end) {\n-\t\t\tif (*ptr == '\"') {\n-\t\t\t\tbreak;\n+\t\t\tif (backslash) {\n+\t\t\t\tif (*ptr != '\"' && *ptr != '\\\\') {\n+\t\t\t\t\tkey[key_len++] = '\\\\';\n+\t\t\t\t}\n+\t\t\t\tbackslash = false;\n+\t\t\t} else {\n+\t\t\t\tif (*ptr == '\"') {\n+\t\t\t\t\tbreak;\n+\t\t\t\t} else if (*ptr == '\\\\') {\n+\t\t\t\t\tbackslash = true;\n+\t\t\t\t\tptr++;\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n \t\t\t}\n-\t\t\tptr++;\n+\t\t\tkey[key_len++] = *ptr++;\n+\t\t}\n+\t\tif (ptr == end || backslash) {\n+\t\t\treturn JSONKeyReadResult::Empty();\n+\t\t} else {\n+\t\t\treturn {idx_t(ptr - before), string(key.get(), key_len)};\n \t\t}\n-\t\treturn ptr == end ? 0 : ptr - before;\n \t} else {\n \t\twhile (ptr != end) {\n \t\t\tif (*ptr == '.' || *ptr == '[') {\n@@ -48,7 +91,7 @@ static inline idx_t ReadString(const char *ptr, const char *const end, const boo\n \t\t\t}\n \t\t\tptr++;\n \t\t}\n-\t\treturn ptr - before;\n+\t\treturn {idx_t(ptr - before), string(before, ptr - before)};\n \t}\n }\n \n@@ -79,28 +122,24 @@ static inline idx_t ReadInteger(const char *ptr, const char *const end, idx_t &i\n \treturn idx >= (idx_t)IDX_T_MAX ? 0 : ptr - before;\n }\n \n-static inline bool ReadKey(const char *&ptr, const char *const end, const char *&key_ptr, idx_t &key_len) {\n+static inline JSONKeyReadResult ReadKey(const char *ptr, const char *const end) {\n \tD_ASSERT(ptr != end);\n \tif (*ptr == '*') { // Wildcard\n-\t\tptr++;\n-\t\tkey_len = DConstants::INVALID_INDEX;\n-\t\treturn true;\n+\t\treturn JSONKeyReadResult::WildCard();\n \t}\n \tbool escaped = false;\n \tif (*ptr == '\"') {\n \t\tptr++; // Skip past opening '\"'\n \t\tescaped = true;\n \t}\n-\tkey_ptr = ptr;\n-\tkey_len = ReadString(ptr, end, escaped);\n-\tif (key_len == 0) {\n-\t\treturn false;\n+\tauto result = ReadString(ptr, end, escaped);\n+\tif (!result.IsValid()) {\n+\t\treturn result;\n \t}\n-\tptr += key_len;\n \tif (escaped) {\n-\t\tptr++; // Skip past closing '\"'\n+\t\tresult.chars_read += 2; // Account for surrounding quotes\n \t}\n-\treturn true;\n+\treturn result;\n }\n \n static inline bool ReadArrayIndex(const char *&ptr, const char *const end, idx_t &array_index, bool &from_back) {\n@@ -155,14 +194,13 @@ JSONPathType JSONCommon::ValidatePath(const char *ptr, const idx_t &len, const b\n \t\t}\n \t\tswitch (c) {\n \t\tcase '.': { // Object field\n-\t\t\tconst char *key_ptr;\n-\t\t\tidx_t key_len;\n-\t\t\tif (!ReadKey(ptr, end, key_ptr, key_len)) {\n+\t\t\tauto key = ReadKey(ptr, end);\n+\t\t\tif (!key.IsValid()) {\n \t\t\t\tThrowPathError(ptr, end, binder);\n-\t\t\t}\n-\t\t\tif (key_len == DConstants::INVALID_INDEX) {\n+\t\t\t} else if (key.IsWildCard()) {\n \t\t\t\tpath_type = JSONPathType::WILDCARD;\n \t\t\t}\n+\t\t\tptr += key.chars_read;\n \t\t\tbreak;\n \t\t}\n \t\tcase '[': { // Array index\n@@ -195,16 +233,10 @@ yyjson_val *JSONCommon::GetPath(yyjson_val *val, const char *ptr, const idx_t &l\n \t\t\tif (!unsafe_yyjson_is_obj(val)) {\n \t\t\t\treturn nullptr;\n \t\t\t}\n-\t\t\tconst char *key_ptr;\n-\t\t\tidx_t key_len;\n-#ifdef DEBUG\n-\t\t\tbool success =\n-#endif\n-\t\t\t    ReadKey(ptr, end, key_ptr, key_len);\n-#ifdef DEBUG\n-\t\t\tD_ASSERT(success);\n-#endif\n-\t\t\tval = yyjson_obj_getn(val, key_ptr, key_len);\n+\t\t\tauto key_result = ReadKey(ptr, end);\n+\t\t\tD_ASSERT(key_result.IsValid());\n+\t\t\tptr += key_result.chars_read;\n+\t\t\tval = yyjson_obj_getn(val, key_result.key.c_str(), key_result.key.size());\n \t\t\tbreak;\n \t\t}\n \t\tcase '[': { // Array index\n@@ -243,16 +275,10 @@ void GetWildcardPathInternal(yyjson_val *val, const char *ptr, const char *const\n \t\t\tif (!unsafe_yyjson_is_obj(val)) {\n \t\t\t\treturn;\n \t\t\t}\n-\t\t\tconst char *key_ptr;\n-\t\t\tidx_t key_len;\n-#ifdef DEBUG\n-\t\t\tbool success =\n-#endif\n-\t\t\t    ReadKey(ptr, end, key_ptr, key_len);\n-#ifdef DEBUG\n-\t\t\tD_ASSERT(success);\n-#endif\n-\t\t\tif (key_len == DConstants::INVALID_INDEX) { // Wildcard\n+\t\t\tauto key_result = ReadKey(ptr, end);\n+\t\t\tD_ASSERT(key_result.IsValid());\n+\t\t\tptr += key_result.chars_read;\n+\t\t\tif (key_result.IsWildCard()) { // Wildcard\n \t\t\t\tsize_t idx, max;\n \t\t\t\tyyjson_val *key, *obj_val;\n \t\t\t\tyyjson_obj_foreach(val, idx, max, key, obj_val) {\n@@ -260,7 +286,7 @@ void GetWildcardPathInternal(yyjson_val *val, const char *ptr, const char *const\n \t\t\t\t}\n \t\t\t\treturn;\n \t\t\t}\n-\t\t\tval = yyjson_obj_getn(val, key_ptr, key_len);\n+\t\t\tval = yyjson_obj_getn(val, key_result.key.c_str(), key_result.key.size());\n \t\t\tbreak;\n \t\t}\n \t\tcase '[': { // Array index\n",
  "test_patch": "diff --git a/test/sql/json/scalar/test_json_extract.test b/test/sql/json/scalar/test_json_extract.test\nindex 6e13039fb2e6..7bb2717919b1 100644\n--- a/test/sql/json/scalar/test_json_extract.test\n+++ b/test/sql/json/scalar/test_json_extract.test\n@@ -314,3 +314,41 @@ query T\n execute q1('a')\n ----\n 1\n+\n+# test issue 11997\n+query I\n+select json_extract_string(json('{\"j[so]n_\\\"key\": 67}'), '$.\"j[so]n_\\\"key\"');\n+----\n+67\n+\n+query I\n+select '{\"\\\"duck\\\"\": 42}'->'$.\"\\\"duck\\\"\"';\n+----\n+42\n+\n+query I\n+select '{\"\\\"du\\\\ck\\\"\": 42}'->'$.\"\\\"du\\\\ck\\\"\"';\n+----\n+42\n+\n+query I\n+select '{\"\\\"du\\\\ck\\\"\": 42}'->'$.\"\\\"du\\ck\\\"\"';\n+----\n+42\n+\n+query I\n+select '{\"du\\\\ck\": 42}'->'$.du\\ck';\n+----\n+42\n+\n+# characters other than \\\\ or \\\" get ignored (for now)\n+query I\n+select '{\"\\\"du\\nck\\\"\": 42}'->'$.\"\\\"du\\nck\\\"\"';\n+----\n+NULL\n+\n+# need to use chr(10) for \\n\n+query I\n+select '{\"\\\"du\\nck\\\"\": 42}'->('$.\"\\\"du' || chr(10) || 'ck\\\"\"');\n+----\n+42\n",
  "problem_statement": "Escaping string double quote in JSON Path Not Working\n### What happens?\n\nI\u2019m encountering an issue with DuckDB when trying to extract a key from a JSON object using the json_extract function. The key contains special characters, specifically the string quote (\") and the square bracket ([),\r\nAs per the DuckDB documentation, I am using double quotes in the JSON path (e.g., $.<key>) to escape the special characters. However, my key itself contains a double quote, which is causing the issue. The query fails with a JSON path error. I\u2019ve tried escaping the double quote in the key with a backslash (\\), but it doesn\u2019t seem to work\r\nAny help or guidance on how to correctly escape special characters in JSON paths, especially double quotes within the key, or a potential fix for this issue would be greatly appreciated. Thank you!\n\n### To Reproduce\n\nHere\u2019s an example of the query that\u2019s causing the problem:\r\n```sql\r\nselect json_extract_string(json('{\"j[so]n_\\\"key\": 67}'), '$.\"j[so]n_\\\"key\"');\r\n```\r\nor \r\n```sql\r\nselect json('{\"j[so]n_\\\"key\": 67}')->>'$.\"j[so]n_\\\"key\"';\r\n```\r\ngives error\r\n```\r\nBinder Error: JSON path error near 'key\"'\r\n```\n\n### OS:\n\nUbuntu 20.04.5 LTS\n\n### DuckDB Version:\n\n0.10.2\n\n### DuckDB Client:\n\npython\n\n### Full Name:\n\nSam\n\n### Affiliation:\n\nFreelancing\n\n### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.\n\nI have tested with a stable release\n\n### Did you include all relevant data sets for reproducing the issue?\n\nYes\n\n### Did you include all code required to reproduce the issue?\n\n- [X] Yes, I have\n\n### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?\n\n- [X] Yes, I have\n",
  "hints_text": "`json_extract_string(json('{\"j[so]n_\\\"key\": 67}'), '/j[so]n_\"key')` works.\nWhat if the key has another forward slash with double quotes\r\neg `select json_extract_string(json('{\"j[so/]n_\\\"key\": 67}'), '/j[so/]n_\"key')`",
  "created_at": "2024-05-13T14:45:58Z",
  "modified_files": [
    "extension/json/json_common.cpp"
  ]
}