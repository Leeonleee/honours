{
  "repo": "duckdb/duckdb",
  "pull_number": 4510,
  "instance_id": "duckdb__duckdb-4510",
  "issue_numbers": [
    "4489"
  ],
  "base_commit": "3a22a287cad289dfc797724e981ffae0cd7c7e93",
  "patch": "diff --git a/src/common/operator/cast_operators.cpp b/src/common/operator/cast_operators.cpp\nindex 73a1b92e39dd..5c5f61c96435 100644\n--- a/src/common/operator/cast_operators.cpp\n+++ b/src/common/operator/cast_operators.cpp\n@@ -17,6 +17,7 @@\n #include \"duckdb/common/types/time.hpp\"\n #include \"duckdb/common/types/timestamp.hpp\"\n #include \"duckdb/common/types/vector.hpp\"\n+#include \"duckdb/common/types.hpp\"\n #include \"fast_float/fast_float.h\"\n #include \"fmt/format.h\"\n \n@@ -821,7 +822,7 @@ struct IntegerCastOperation {\n \t\treturn true;\n \t}\n \n-\ttemplate <class T, bool NEGATIVE>\n+\ttemplate <class T, bool NEGATIVE, bool ALLOW_EXPONENT>\n \tstatic bool HandleDecimal(T &state, uint8_t digit) {\n \t\tif (state.seen_decimal) {\n \t\t\treturn true;\n@@ -847,7 +848,7 @@ struct IntegerCastOperation {\n \t\treturn true;\n \t}\n \n-\ttemplate <class T>\n+\ttemplate <class T, bool NEGATIVE>\n \tstatic bool Finalize(T &state) {\n \t\treturn true;\n \t}\n@@ -874,7 +875,7 @@ static bool IntegerCastLoop(const char *buf, idx_t len, T &result, bool strict)\n \t\t\t\t\tif (!StringUtil::CharacterIsDigit(buf[pos])) {\n \t\t\t\t\t\tbreak;\n \t\t\t\t\t}\n-\t\t\t\t\tif (!OP::template HandleDecimal<T, NEGATIVE>(result, buf[pos] - '0')) {\n+\t\t\t\t\tif (!OP::template HandleDecimal<T, NEGATIVE, ALLOW_EXPONENT>(result, buf[pos] - '0')) {\n \t\t\t\t\t\treturn false;\n \t\t\t\t\t}\n \t\t\t\t\tpos++;\n@@ -928,7 +929,7 @@ static bool IntegerCastLoop(const char *buf, idx_t len, T &result, bool strict)\n \t\t\treturn false;\n \t\t}\n \t}\n-\tif (!OP::template Finalize<T>(result)) {\n+\tif (!OP::template Finalize<T, NEGATIVE>(result)) {\n \t\treturn false;\n \t}\n \treturn pos > start_pos;\n@@ -1473,7 +1474,7 @@ struct HugeIntegerCastOperation {\n \t\t}\n \t}\n \n-\ttemplate <class T, bool NEGATIVE>\n+\ttemplate <class T, bool NEGATIVE, bool ALLOW_EXPONENT>\n \tstatic bool HandleDecimal(T &result, uint8_t digit) {\n \t\t// Integer casts round\n \t\tif (!result.decimal) {\n@@ -1491,7 +1492,7 @@ struct HugeIntegerCastOperation {\n \t\treturn true;\n \t}\n \n-\ttemplate <class T>\n+\ttemplate <class T, bool NEGATIVE>\n \tstatic bool Finalize(T &result) {\n \t\treturn result.Flush();\n \t}\n@@ -1518,6 +1519,9 @@ struct DecimalCastData {\n \tuint8_t scale;\n \tuint8_t digit_count;\n \tuint8_t decimal_count;\n+\t//! Only set when ALLOW_EXPONENT is enabled\n+\tuint8_t excessive_decimals;\n+\tbool positive_exponent;\n };\n \n struct DecimalCastOperation {\n@@ -1540,16 +1544,47 @@ struct DecimalCastOperation {\n \t\treturn true;\n \t}\n \n+\ttemplate <class T, bool NEGATIVE>\n+\tstatic void RoundUpResult(T &state) {\n+\t\tif (NEGATIVE) {\n+\t\t\tstate.result -= 1;\n+\t\t} else {\n+\t\t\tstate.result += 1;\n+\t\t}\n+\t}\n+\n \ttemplate <class T, bool NEGATIVE>\n \tstatic bool HandleExponent(T &state, int32_t exponent) {\n-\t\tFinalize<T>(state);\n+\t\tauto decimal_excess = (state.decimal_count > state.scale) ? state.decimal_count - state.scale : 0;\n+\t\tif (exponent > 0) {\n+\t\t\tstate.positive_exponent = true;\n+\t\t\t//! Positive exponents need up to 'exponent' amount of digits\n+\t\t\t//! Everything beyond that amount needs to be truncated\n+\t\t\tif (decimal_excess > exponent) {\n+\t\t\t\t//! We've allowed too many decimals\n+\t\t\t\tstate.excessive_decimals = decimal_excess - exponent;\n+\t\t\t\texponent = 0;\n+\t\t\t} else {\n+\t\t\t\texponent -= decimal_excess;\n+\t\t\t}\n+\t\t\tD_ASSERT(exponent >= 0);\n+\t\t}\n+\t\tif (!Finalize<T, NEGATIVE>(state)) {\n+\t\t\treturn false;\n+\t\t}\n \t\tif (exponent < 0) {\n+\t\t\tbool round_up = false;\n \t\t\tfor (idx_t i = 0; i < idx_t(-int64_t(exponent)); i++) {\n+\t\t\t\tauto mod = state.result % 10;\n+\t\t\t\tround_up = NEGATIVE ? mod <= -5 : mod >= 5;\n \t\t\t\tstate.result /= 10;\n \t\t\t\tif (state.result == 0) {\n \t\t\t\t\tbreak;\n \t\t\t\t}\n \t\t\t}\n+\t\t\tif (round_up) {\n+\t\t\t\tRoundUpResult<T, NEGATIVE>(state);\n+\t\t\t}\n \t\t\treturn true;\n \t\t} else {\n \t\t\t// positive exponent: append 0's\n@@ -1562,14 +1597,19 @@ struct DecimalCastOperation {\n \t\t}\n \t}\n \n-\ttemplate <class T, bool NEGATIVE>\n+\ttemplate <class T, bool NEGATIVE, bool ALLOW_EXPONENT>\n \tstatic bool HandleDecimal(T &state, uint8_t digit) {\n-\t\tif (state.decimal_count == state.scale) {\n+\t\tif (!ALLOW_EXPONENT && state.decimal_count == state.scale) {\n \t\t\t// we exceeded the amount of supported decimals\n \t\t\t// however, we don't throw an error here\n \t\t\t// we just truncate the decimal\n \t\t\treturn true;\n \t\t}\n+\t\t//! If we expect an exponent, we need to preserve the decimals\n+\t\t//! But we don't want to overflow, so we prevent overflowing the result with this check\n+\t\tif (state.digit_count + state.decimal_count >= DecimalWidth<decltype(state.result)>::max) {\n+\t\t\treturn true;\n+\t\t}\n \t\tstate.decimal_count++;\n \t\tif (NEGATIVE) {\n \t\t\tstate.result = state.result * 10 - digit;\n@@ -1579,11 +1619,36 @@ struct DecimalCastOperation {\n \t\treturn true;\n \t}\n \n-\ttemplate <class T>\n+\ttemplate <class T, bool NEGATIVE>\n+\tstatic bool TruncateExcessiveDecimals(T &state) {\n+\t\tD_ASSERT(state.excessive_decimals);\n+\t\tbool round_up = false;\n+\t\tfor (idx_t i = 0; i < state.excessive_decimals; i++) {\n+\t\t\tauto mod = state.result % 10;\n+\t\t\tround_up = NEGATIVE ? mod <= -5 : mod >= 5;\n+\t\t\tstate.result /= 10.0;\n+\t\t}\n+\t\t//! Only round up when exponents are involved\n+\t\tif (state.positive_exponent && round_up) {\n+\t\t\tRoundUpResult<T, NEGATIVE>(state);\n+\t\t}\n+\t\tD_ASSERT(state.decimal_count > state.scale);\n+\t\tstate.decimal_count = state.scale;\n+\t\treturn true;\n+\t}\n+\n+\ttemplate <class T, bool NEGATIVE>\n \tstatic bool Finalize(T &state) {\n-\t\t// if we have not gotten exactly \"scale\" decimals, we need to multiply the result\n-\t\t// e.g. if we have a string \"1.0\" that is cast to a DECIMAL(9,3), the value needs to be 1000\n-\t\t// but we have only gotten the value \"10\" so far, so we multiply by 1000\n+\t\tif (!state.positive_exponent && state.decimal_count > state.scale) {\n+\t\t\t//! Did not encounter an exponent, but ALLOW_EXPONENT was on\n+\t\t\tstate.excessive_decimals = state.decimal_count - state.scale;\n+\t\t}\n+\t\tif (state.excessive_decimals && !TruncateExcessiveDecimals<T, NEGATIVE>(state)) {\n+\t\t\treturn false;\n+\t\t}\n+\t\t//  if we have not gotten exactly \"scale\" decimals, we need to multiply the result\n+\t\t//  e.g. if we have a string \"1.0\" that is cast to a DECIMAL(9,3), the value needs to be 1000\n+\t\t//  but we have only gotten the value \"10\" so far, so we multiply by 1000\n \t\tfor (uint8_t i = state.decimal_count; i < state.scale; i++) {\n \t\t\tstate.result *= 10;\n \t\t}\n@@ -1599,6 +1664,8 @@ bool TryDecimalStringCast(string_t input, T &result, string *error_message, uint\n \tstate.scale = scale;\n \tstate.digit_count = 0;\n \tstate.decimal_count = 0;\n+\tstate.excessive_decimals = 0;\n+\tstate.positive_exponent = false;\n \tif (!TryIntegerCast<DecimalCastData<T>, true, true, DecimalCastOperation, false>(input.GetDataUnsafe(),\n \t                                                                                 input.GetSize(), state, false)) {\n \t\tstring error = StringUtil::Format(\"Could not convert string \\\"%s\\\" to DECIMAL(%d,%d)\", input.GetString(),\ndiff --git a/src/common/types.cpp b/src/common/types.cpp\nindex 7144372b20e2..fe2b07d8b6fa 100644\n--- a/src/common/types.cpp\n+++ b/src/common/types.cpp\n@@ -918,7 +918,7 @@ uint8_t DecimalType::GetScale(const LogicalType &type) {\n }\n \n uint8_t DecimalType::MaxWidth() {\n-\treturn 38;\n+\treturn DecimalWidth<hugeint_t>::max;\n }\n \n LogicalType LogicalType::DECIMAL(int width, int scale) {\ndiff --git a/src/include/duckdb/common/types/decimal.hpp b/src/include/duckdb/common/types/decimal.hpp\nindex 1ca69d026a7f..e08e544a16a8 100644\n--- a/src/include/duckdb/common/types/decimal.hpp\n+++ b/src/include/duckdb/common/types/decimal.hpp\n@@ -12,13 +12,36 @@\n \n namespace duckdb {\n \n+template <class PHYSICAL_TYPE>\n+struct DecimalWidth {};\n+\n+template <>\n+struct DecimalWidth<int16_t> {\n+\tstatic constexpr uint8_t max = 4;\n+};\n+\n+template <>\n+struct DecimalWidth<int32_t> {\n+\tstatic constexpr uint8_t max = 9;\n+};\n+\n+template <>\n+struct DecimalWidth<int64_t> {\n+\tstatic constexpr uint8_t max = 18;\n+};\n+\n+template <>\n+struct DecimalWidth<hugeint_t> {\n+\tstatic constexpr uint8_t max = 38;\n+};\n+\n //! The Decimal class is a static class that holds helper functions for the Decimal type\n class Decimal {\n public:\n-\tstatic constexpr uint8_t MAX_WIDTH_INT16 = 4;\n-\tstatic constexpr uint8_t MAX_WIDTH_INT32 = 9;\n-\tstatic constexpr uint8_t MAX_WIDTH_INT64 = 18;\n-\tstatic constexpr uint8_t MAX_WIDTH_INT128 = 38;\n+\tstatic constexpr uint8_t MAX_WIDTH_INT16 = DecimalWidth<int16_t>::max;\n+\tstatic constexpr uint8_t MAX_WIDTH_INT32 = DecimalWidth<int32_t>::max;\n+\tstatic constexpr uint8_t MAX_WIDTH_INT64 = DecimalWidth<int64_t>::max;\n+\tstatic constexpr uint8_t MAX_WIDTH_INT128 = DecimalWidth<hugeint_t>::max;\n \tstatic constexpr uint8_t MAX_WIDTH_DECIMAL = MAX_WIDTH_INT128;\n \n public:\n",
  "test_patch": "diff --git a/test/issues/rigger/test_521.test b/test/issues/rigger/test_521.test\nindex 230023e327a3..8de009638d5c 100644\n--- a/test/issues/rigger/test_521.test\n+++ b/test/issues/rigger/test_521.test\n@@ -9,7 +9,7 @@ PRAGMA enable_verification\n query R\n SELECT ROUND(0.1, 1000);\n ----\n-0.100000\n+0.1\n \n statement ok\n CREATE TABLE t0(c0 INT);\ndiff --git a/test/sql/aggregate/aggregates/test_aggregate_types_scalar.test b/test/sql/aggregate/aggregates/test_aggregate_types_scalar.test\nindex c7eb32d9bf54..d49cc218026c 100644\n--- a/test/sql/aggregate/aggregates/test_aggregate_types_scalar.test\n+++ b/test/sql/aggregate/aggregates/test_aggregate_types_scalar.test\n@@ -20,7 +20,7 @@ SELECT SUM(1), SUM(NULL), SUM(33.3)\n ----\n 1.000000\n NULL\n-33.300000\n+33.3\n \n statement error\n SELECT SUM(True)\n@@ -40,7 +40,7 @@ SELECT SUM(1, 2)\n query IIRTTTT\n SELECT MIN(1), MIN(NULL), MIN(33.3), MIN('hello'), MIN(True), MIN(DATE '1992-02-02'), MIN(TIMESTAMP '2008-01-01 00:00:01')\n ----\n-1\tNULL\t33.300000\thello\t1\t1992-02-02\t2008-01-01 00:00:01\n+1\tNULL\t33.3\thello\t1\t1992-02-02\t2008-01-01 00:00:01\n \n statement error\n SELECT MIN()\n@@ -51,7 +51,7 @@ SELECT MIN(1, 2)\n query IIRTTTT\n SELECT MAX(1), MAX(NULL), MAX(33.3), MAX('hello'), MAX(True), MAX(DATE '1992-02-02'), MAX(TIMESTAMP '2008-01-01 00:00:01')\n ----\n-1\tNULL\t33.300000\thello\t1\t1992-02-02\t2008-01-01 00:00:01\n+1\tNULL\t33.3\thello\t1\t1992-02-02\t2008-01-01 00:00:01\n \n statement error\n SELECT MAX()\n@@ -62,7 +62,7 @@ SELECT MAX(1, 2)\n query IIRTTTT\n SELECT FIRST(1), FIRST(NULL), FIRST(33.3), FIRST('hello'), FIRST(True), FIRST(DATE '1992-02-02'), FIRST(TIMESTAMP '2008-01-01 00:00:01')\n ----\n-1\tNULL\t33.300000\thello\t1\t1992-02-02\t2008-01-01 00:00:01\n+1\tNULL\t33.3\thello\t1\t1992-02-02\t2008-01-01 00:00:01\n \n statement error\n SELECT FIRST()\n@@ -73,7 +73,7 @@ SELECT FIRST(1, 2)\n query IIRTTTT\n SELECT LAST(1), LAST(NULL), LAST(33.3), LAST('hello'), LAST(True), LAST(DATE '1992-02-02'), LAST(TIMESTAMP '2008-01-01 00:00:01')\n ----\n-1\tNULL\t33.300000\thello\t1\t1992-02-02\t2008-01-01 00:00:01\n+1\tNULL\t33.3\thello\t1\t1992-02-02\t2008-01-01 00:00:01\n \n statement error\n SELECT LAST()\n@@ -84,7 +84,7 @@ SELECT LAST(1, 2)\n query RRR\n SELECT AVG(1), AVG(NULL), AVG(33.3)\n ----\n-1.000000\tNULL\t33.300000\n+1.000000\tNULL\t33.3\n \n statement error\n SELECT AVG(True)\ndiff --git a/test/sql/function/numeric/test_pg_math.test b/test/sql/function/numeric/test_pg_math.test\nindex dcaf6e731e9b..6b263f51886d 100644\n--- a/test/sql/function/numeric/test_pg_math.test\n+++ b/test/sql/function/numeric/test_pg_math.test\n@@ -10,7 +10,7 @@ PRAGMA enable_verification\n query R\n select abs(-17.4)\n ----\n-17.400000\n+17.4\n \n query R\n select cbrt(27.0)\n@@ -20,12 +20,12 @@ select cbrt(27.0)\n query R\n select ceil(-42.8)\n ----\n--42.000000\n+-42\n \n query R\n select ceiling(-95.3)\n ----\n--95.000000\n+-95\n \n query R\n select exp(1.0)\n@@ -35,7 +35,7 @@ select exp(1.0)\n query R\n select floor(-42.8)\n ----\n--43.000000\n+-43\n \n query R\n select ln(2.0)\ndiff --git a/test/sql/types/decimal/decimal_exponent.test b/test/sql/types/decimal/decimal_exponent.test\nindex eb75cdb27871..890d683fca13 100644\n--- a/test/sql/types/decimal/decimal_exponent.test\n+++ b/test/sql/types/decimal/decimal_exponent.test\n@@ -9,7 +9,7 @@ PRAGMA enable_verification\n query IIII\n SELECT '1e3'::DECIMAL, '1e-1'::DECIMAL, '.1e3'::DECIMAL, '0.1e3'::DECIMAL\n ----\n-1000\t0.1\t100\t100\n+1000.000\t0.1\t100.000\t100.000\n \n # negative numbers\n query IIII\ndiff --git a/test/sql/types/decimal/test_decimal_from_string.test b/test/sql/types/decimal/test_decimal_from_string.test\nnew file mode 100644\nindex 000000000000..1d5c318ca3ae\n--- /dev/null\n+++ b/test/sql/types/decimal/test_decimal_from_string.test\n@@ -0,0 +1,50 @@\n+# name: test/sql/types/decimal/test_decimal_from_string.test\n+# group: [decimal]\n+\n+#statement ok\n+#pragma enable_verification\n+\n+query I\n+select '+1e-1'::DECIMAL(38,3)\n+----\n+0.100\n+\n+query I\n+select '+1234.56789e-1'::DECIMAL(38,0)\n+----\n+123\n+\n+query I\n+select '+1234.56789e-1'::DECIMAL(38,5)\n+----\n+123.45679\n+\n+query I\n+select +1234.56789e-1::DECIMAL(38,5)\n+----\n+123.45679\n+\n+foreach exp_sign + -\n+\n+foreach base_sign + -\n+\n+foreach scale 0 1 2 3 4 5 6\n+\n+foreach exponent 1 2 3 4 5 6 7 8 9 10\n+\n+foreach num 1 1.23456789 1234 1234.56789 0.12345678 0.00001234\n+\n+query I\n+select '${base_sign}${num}e${exp_sign}${exponent}'::DECIMAL(38,${scale}) == ${base_sign}${num}e${exp_sign}${exponent}::DECIMAL(38,${scale});\n+----\n+True\n+\n+endloop\n+\n+endloop\n+\n+endloop\n+\n+endloop\n+\n+endloop\n",
  "problem_statement": "Issue with decimal scale\n### What happens?\r\n\r\nDecimal scale incorrectly affects integer side of number.\r\n\r\n### To Reproduce\r\n\r\nSeems decimal scale is incorrectly affecting the integer part of a decimal:\r\n\r\n```\r\nduckdb> select '1.23456789e+8'::DECIMAL(38,0);\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 CAST('1.23456789e+8' AS DECIMAL(38,0)) \u2502\r\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\r\n\u2502                              100000000 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\nElapsed: 1 ms\r\n\r\nduckdb> select '1.23456789e+8'::DECIMAL(38,2);\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 CAST('1.23456789e+8' AS DECIMAL(38,2)) \u2502\r\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\r\n\u2502                           123000000.00 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\nElapsed: 1 ms\r\n\r\nduckdb> select '1.23456789e+8'::DECIMAL(38,4);\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 CAST('1.23456789e+8' AS DECIMAL(38,4)) \u2502\r\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\r\n\u2502                         123450000.0000 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\nElapsed: 1 ms\r\n\r\nduckdb> select '1.23456789e+8'::DECIMAL(38,6);\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 CAST('1.23456789e+8' AS DECIMAL(38,6)) \u2502\r\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\r\n\u2502                       123456700.000000 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\nElapsed: 1 ms\r\n\r\nduckdb> select '1.23456789e+8'::DECIMAL(38,8);\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 CAST('1.23456789e+8' AS DECIMAL(38,8)) \u2502\r\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\r\n\u2502                     123456789.00000000 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\nElapsed: 1 ms\r\n\r\nduckdb> select '1.23456789e+8'::DECIMAL(38,10);\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 CAST('1.23456789e+8' AS DECIMAL(38,10)) \u2502\r\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\r\n\u2502                    123456789.0000000000 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\r\n```\r\n\r\nOr in python:\r\n\r\n```\r\n>>> duckdb.connect().execute(\"select '1.23456789e+8'::DECIMAL(38,0)\").fetchone()\r\n(Decimal('100000000'),)\r\n```\r\n\r\nOS:\r\nMac OS 12.1\r\n\r\nDuckDB Version:\r\n0.4.1.dev2142\r\n\r\n### Full Name\r\n\r\nDavid L\r\n\r\n### Affiliation\r\n\r\nNone\r\n\r\n### OS:\r\n\r\nMac OS 12.1\r\n\r\n### DuckDB Version:\r\n\r\n0.4.1.dev2142\r\n\r\n### DuckDB Client:\r\n\r\nPython: (duckdb.cpython-39-darwin.so)\r\n\r\n### Have you tried this on the latest `master` branch?\r\n\r\n- [X] I agree\r\n\r\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\r\n\r\n- [X] I agree\n",
  "hints_text": "Could you please also state your name and affiliation as per the template? \nThis issue seems to VARCHAR->DECIMAL cast\r\nbecause these queries work properly:\r\n\r\n```sql\r\nD select 1.23456789e8::DECIMAL(38,0);\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 CAST(123456789.0 AS DECIMAL(38,0)) \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 123456789                          \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\nD select 1.23456789e8::DECIMAL(38,2);\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 CAST(123456789.0 AS DECIMAL(38,2)) \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 123456789.00                       \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\nD select 1.23456789e8::DECIMAL(38,4);\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 CAST(123456789.0 AS DECIMAL(38,4)) \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 123456789.0000                     \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\nD select 1.23456789e8::DECIMAL(38,6);\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 CAST(123456789.0 AS DECIMAL(38,6)) \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 123456789.000000                   \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\nD select 1.23456789e8::DECIMAL(38,8);\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 CAST(123456789.0 AS DECIMAL(38,8)) \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 123456789.00000000                 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\nD select 1.23456789e8::DECIMAL(38,10);\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 CAST(123456789.0 AS DECIMAL(38,10)) \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 123456789.0000000000                \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\nYep, the issue is in this portion of VARCHAR->DECIMAL\r\n```c++\r\n\ttemplate <class T, bool NEGATIVE>\r\n\tstatic bool HandleDecimal(T &state, uint8_t digit) {\r\n\t\tif (state.decimal_count == state.scale) {\r\n\t\t\t// we exceeded the amount of supported decimals\r\n\t\t\t// however, we don't throw an error here\r\n\t\t\t// we just truncate the decimal\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\tstate.decimal_count++;\r\n\t\tif (NEGATIVE) {\r\n\t\t\tstate.result = state.result * 10 - digit;\r\n\t\t} else {\r\n\t\t\tstate.result = state.result * 10 + digit;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n```\r\nIn the case of DECIMAL(38,0)\r\nWe've already supplied the scale as 0, so it ignores all the values after the decimal point, giving us 1 instead of 12345689",
  "created_at": "2022-08-27T10:14:23Z"
}