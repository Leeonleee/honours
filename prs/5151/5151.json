{
  "repo": "duckdb/duckdb",
  "pull_number": 5151,
  "instance_id": "duckdb__duckdb-5151",
  "issue_numbers": [
    "5124",
    "5124"
  ],
  "base_commit": "6aa8bb2cff7b0cc730ff253f1fe23c29ad0ee426",
  "patch": "diff --git a/src/common/row_operations/row_radix_scatter.cpp b/src/common/row_operations/row_radix_scatter.cpp\nindex 466221fffc99..74774926d5e2 100644\n--- a/src/common/row_operations/row_radix_scatter.cpp\n+++ b/src/common/row_operations/row_radix_scatter.cpp\n@@ -102,6 +102,7 @@ void RadixScatterListVector(Vector &v, UnifiedVectorFormat &vdata, const Selecti\n \tauto list_data = ListVector::GetData(v);\n \tauto &child_vector = ListVector::GetEntry(v);\n \tauto list_size = ListVector::GetListSize(v);\n+\tchild_vector.Flatten(list_size);\n \n \t// serialize null values\n \tif (has_null) {\ndiff --git a/src/common/vector_operations/is_distinct_from.cpp b/src/common/vector_operations/is_distinct_from.cpp\nindex 577d4c0e6202..3017978bcb0f 100644\n--- a/src/common/vector_operations/is_distinct_from.cpp\n+++ b/src/common/vector_operations/is_distinct_from.cpp\n@@ -564,8 +564,8 @@ static idx_t DistinctSelectList(Vector &left, Vector &right, idx_t count, const\n \tSelectionVector lcursor(count);\n \tSelectionVector rcursor(count);\n \n-\tListVector::GetEntry(left).Flatten(count);\n-\tListVector::GetEntry(right).Flatten(count);\n+\tListVector::GetEntry(left).Flatten(ListVector::GetListSize(left));\n+\tListVector::GetEntry(right).Flatten(ListVector::GetListSize(right));\n \tVector lchild(ListVector::GetEntry(left), lcursor, count);\n \tVector rchild(ListVector::GetEntry(right), rcursor, count);\n \ndiff --git a/src/function/scalar/list/contains_or_position.cpp b/src/function/scalar/list/contains_or_position.cpp\nindex 4d6e84bdcac4..716abb4bcea3 100644\n--- a/src/function/scalar/list/contains_or_position.cpp\n+++ b/src/function/scalar/list/contains_or_position.cpp\n@@ -55,8 +55,8 @@ static void TemplatedContainsOrPosition(DataChunk &args, ExpressionState &state,\n \tvalue_vector.ToUnifiedFormat(count, value_data);\n \n \t// not required for a comparison of nested types\n-\tauto child_value = FlatVector::GetData<CHILD_TYPE>(child_vector);\n-\tauto values = FlatVector::GetData<CHILD_TYPE>(value_vector);\n+\tauto child_value = (CHILD_TYPE *)child_data.data;\n+\tauto values = (CHILD_TYPE *)value_data.data;\n \n \tfor (idx_t i = 0; i < count; i++) {\n \t\tauto list_index = list_data.sel->get_index(i);\ndiff --git a/src/function/scalar/list/list_extract.cpp b/src/function/scalar/list/list_extract.cpp\nindex 027e239964b6..5e162583bee0 100644\n--- a/src/function/scalar/list/list_extract.cpp\n+++ b/src/function/scalar/list/list_extract.cpp\n@@ -15,8 +15,8 @@ namespace duckdb {\n template <class T, bool HEAP_REF = false, bool VALIDITY_ONLY = false>\n void ListExtractTemplate(idx_t count, UnifiedVectorFormat &list_data, UnifiedVectorFormat &offsets_data,\n                          Vector &child_vector, idx_t list_size, Vector &result) {\n-\tUnifiedVectorFormat child_data;\n-\tchild_vector.ToUnifiedFormat(list_size, child_data);\n+\tUnifiedVectorFormat child_format;\n+\tchild_vector.ToUnifiedFormat(list_size, child_format);\n \n \tT *result_data;\n \n@@ -33,40 +33,46 @@ void ListExtractTemplate(idx_t count, UnifiedVectorFormat &list_data, UnifiedVec\n \n \t// this is lifted from ExecuteGenericLoop because we can't push the list child data into this otherwise\n \t// should have gone with GetValue perhaps\n+\tauto child_data = (T *)child_format.data;\n \tfor (idx_t i = 0; i < count; i++) {\n \t\tauto list_index = list_data.sel->get_index(i);\n \t\tauto offsets_index = offsets_data.sel->get_index(i);\n-\t\tif (list_data.validity.RowIsValid(list_index) && offsets_data.validity.RowIsValid(offsets_index)) {\n-\t\t\tauto list_entry = ((list_entry_t *)list_data.data)[list_index];\n-\t\t\tauto offsets_entry = ((int64_t *)offsets_data.data)[offsets_index];\n+\t\tif (!list_data.validity.RowIsValid(list_index)) {\n+\t\t\tresult_mask.SetInvalid(i);\n+\t\t\tcontinue;\n+\t\t}\n+\t\tif (!offsets_data.validity.RowIsValid(offsets_index)) {\n+\t\t\tresult_mask.SetInvalid(i);\n+\t\t\tcontinue;\n+\t\t}\n+\t\tauto list_entry = ((list_entry_t *)list_data.data)[list_index];\n+\t\tauto offsets_entry = ((int64_t *)offsets_data.data)[offsets_index];\n+\n+\t\t// 1-based indexing\n+\t\tif (offsets_entry == 0) {\n+\t\t\tresult_mask.SetInvalid(i);\n+\t\t\tcontinue;\n+\t\t}\n+\t\toffsets_entry = (offsets_entry > 0) ? offsets_entry - 1 : offsets_entry;\n \n-\t\t\t// 1-based indexing\n-\t\t\tif (offsets_entry == 0) {\n+\t\tidx_t child_offset;\n+\t\tif (offsets_entry < 0) {\n+\t\t\tif ((idx_t)-offsets_entry > list_entry.length) {\n \t\t\t\tresult_mask.SetInvalid(i);\n \t\t\t\tcontinue;\n \t\t\t}\n-\t\t\toffsets_entry = (offsets_entry > 0) ? offsets_entry - 1 : offsets_entry;\n-\n-\t\t\tidx_t child_offset;\n-\t\t\tif (offsets_entry < 0) {\n-\t\t\t\tif ((idx_t)-offsets_entry > list_entry.length) {\n-\t\t\t\t\tresult_mask.SetInvalid(i);\n-\t\t\t\t\tcontinue;\n-\t\t\t\t}\n-\t\t\t\tchild_offset = list_entry.offset + list_entry.length + offsets_entry;\n-\t\t\t} else {\n-\t\t\t\tif ((idx_t)offsets_entry >= list_entry.length) {\n-\t\t\t\t\tresult_mask.SetInvalid(i);\n-\t\t\t\t\tcontinue;\n-\t\t\t\t}\n-\t\t\t\tchild_offset = list_entry.offset + offsets_entry;\n-\t\t\t}\n-\t\t\tif (child_data.validity.RowIsValid(child_offset)) {\n-\t\t\t\tif (!VALIDITY_ONLY) {\n-\t\t\t\t\tresult_data[i] = ((T *)child_data.data)[child_offset];\n-\t\t\t\t}\n-\t\t\t} else {\n+\t\t\tchild_offset = list_entry.offset + list_entry.length + offsets_entry;\n+\t\t} else {\n+\t\t\tif ((idx_t)offsets_entry >= list_entry.length) {\n \t\t\t\tresult_mask.SetInvalid(i);\n+\t\t\t\tcontinue;\n+\t\t\t}\n+\t\t\tchild_offset = list_entry.offset + offsets_entry;\n+\t\t}\n+\t\tauto child_index = child_format.sel->get_index(child_offset);\n+\t\tif (child_format.validity.RowIsValid(child_index)) {\n+\t\t\tif (!VALIDITY_ONLY) {\n+\t\t\t\tresult_data[i] = child_data[child_index];\n \t\t\t}\n \t\t} else {\n \t\t\tresult_mask.SetInvalid(i);\ndiff --git a/src/function/scalar/list/list_lambdas.cpp b/src/function/scalar/list/list_lambdas.cpp\nindex b5577c538df5..47aa7aae695f 100644\n--- a/src/function/scalar/list/list_lambdas.cpp\n+++ b/src/function/scalar/list/list_lambdas.cpp\n@@ -167,6 +167,7 @@ static void ListLambdaFunction(DataChunk &args, ExpressionState &state, Vector &\n \t// get the child vector and child data\n \tauto lists_size = ListVector::GetListSize(lists);\n \tauto &child_vector = ListVector::GetEntry(lists);\n+\tchild_vector.Flatten(lists_size);\n \tUnifiedVectorFormat child_data;\n \tchild_vector.ToUnifiedFormat(lists_size, child_data);\n \n@@ -251,10 +252,8 @@ static void ListLambdaFunction(DataChunk &args, ExpressionState &state, Vector &\n \n \t\t// iterate list elements and create transformed expression columns\n \t\tfor (idx_t child_idx = 0; child_idx < list_entry.length; child_idx++) {\n-\n \t\t\t// reached STANDARD_VECTOR_SIZE elements\n \t\t\tif (elem_cnt == STANDARD_VECTOR_SIZE) {\n-\n \t\t\t\tlambda_chunk.Reset();\n \t\t\t\tExecuteExpression(types, result_types, elem_cnt, sel, sel_vectors, input_chunk, lambda_chunk,\n \t\t\t\t                  child_vector, args, expr_executor);\n",
  "test_patch": "diff --git a/test/sql/storage/list_dictionary.test b/test/sql/storage/list_dictionary.test\nnew file mode 100644\nindex 000000000000..524208881c56\n--- /dev/null\n+++ b/test/sql/storage/list_dictionary.test\n@@ -0,0 +1,93 @@\n+# name: test/sql/storage/list_dictionary.test\n+# description: Test list functions on a list with a child with dictionary encoding\n+# group: [storage]\n+\n+# load the DB from disk\n+load __TEST_DIR__/list_dictionary.db\n+\n+statement ok\n+PRAGMA force_compression='dictionary'\n+\n+statement ok\n+CREATE TABLE test (a VARCHAR[]);\n+\n+statement ok\n+INSERT INTO test SELECT CASE WHEN i%2=0 THEN [] ELSE ['Hello', 'World'] END FROM range(10000) t(i);\n+\n+query III\n+SELECT MIN(t), MAX(t), COUNT(t) FROM (SELECT a[2] FROM test) t(t)\n+----\n+World\tWorld\t5000\n+\n+query I\n+SELECT SUM(CASE WHEN a IS DISTINCT FROM ['Hello', 'World'] THEN 1 ELSE 0 END) FROM test\n+----\n+5000\n+\n+query I\n+SELECT COUNT(*) FROM test WHERE a=['Hello', 'World']\n+----\n+5000\n+\n+query I\n+SELECT DISTINCT a FROM test ORDER BY ALL\n+----\n+[]\n+[Hello, World]\n+\n+query III\n+SELECT MIN(t), MAX(t), COUNT(t) FROM (SELECT a[2:2] FROM test) t(t)\n+----\n+[]\t[World]\t10000\n+\n+statement ok\n+CREATE TABLE test2 AS SELECT * FROM test ORDER BY a\n+\n+query I\n+SELECT * FROM test2 LIMIT 3\n+----\n+[]\n+[]\n+[]\n+\n+query I\n+SELECT * FROM test2 LIMIT 3 OFFSET 5000\n+----\n+[Hello, World]\n+[Hello, World]\n+[Hello, World]\n+\n+query II\n+SELECT MIN(t), MAX(t) FROM (SELECT UNNEST(a) AS t FROM test) t(t)\n+----\n+Hello\tWorld\n+\n+query I\n+SELECT COUNT(*) FROM test WHERE a IN (SELECT * FROM test)\n+----\n+10000\n+\n+query IIIIII\n+SELECT MIN(t), MAX(t), MIN(t[1]), MAX(t[1]), MIN(t[2]), MAX(t[2]) FROM (SELECT [lower(x) for x in a] FROM test) t(t)\n+----\n+[]\t[hello, world]\thello\thello\tworld\tworld\n+\n+query II\n+SELECT MIN(t), MAX(t) FROM (SELECT [lower(x) for x in a if x!='Hello'] FROM test) t(t)\n+----\n+[]\t[world]\n+\n+query IIII\n+SELECT MIN(a), MAX(a), MIN(b), MAX(b) FROM (SELECT list_min(a), list_max(a) FROM test) t(a, b)\n+----\n+Hello\tHello\tWorld\tWorld\n+\n+query I\n+SELECT MIN(list_sort(a)[2]) FROM test\n+----\n+World\n+\n+query I\n+SELECT COUNT(*) FROM test WHERE array_contains(a, 'World')\n+----\n+5000\n",
  "problem_statement": "\"ERROR: AddressSanitizer: heap-buffer-overflow\" when in on-disk mode (not in-memory) when working with arrays\n### What happens?\n\nJDBC and CLI fail when working with arrays. In the case of JDBC, JVM crashes (the crash reports are not very informative). I was able to reproduce the JDBC issue on mac and linux. To reproduce in CLI I used mac, client versions 0.5.1 and 0.4.0. With `make debug` on 0.4.0 the report looks like this:\r\n```\r\n=================================================================\r\n==49159==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x61a0000005c0 at pc 0x000126c08f20 bp 0x70000702fa50 sp 0x70000702f218\r\nREAD of size 16 at 0x61a0000005c0 thread T1\r\n    #0 0x126c08f1f in __asan_memcpy+0x1af (libclang_rt.asan_osx_dynamic.dylib:x86_64h+0x48f1f)\r\n    #1 0x1127fc1dc in void duckdb::ListExtractTemplate<duckdb::string_t, true, false>(unsigned long long, duckdb::VectorData&, duckdb::VectorData&, duckdb::Vector&, unsigned long long, duckdb::Vector&) list_extract.cpp:66\r\n    #2 0x1127ecf98 in duckdb::ExecuteListExtractInternal(unsigned long long, duckdb::VectorData&, duckdb::VectorData&, duckdb::Vector&, unsigned long long, duckdb::Vector&) list_extract.cpp:118\r\n    #3 0x1127eb866 in duckdb::ExecuteListExtract(duckdb::Vector&, duckdb::Vector&, duckdb::Vector&, unsigned long long) list_extract.cpp:156\r\n    #4 0x11274090c in duckdb::ListExtractFunction(duckdb::DataChunk&, duckdb::ExpressionState&, duckdb::Vector&) list_extract.cpp:184\r\n    #5 0x112a5d10e in decltype(static_cast<void (*&>(fp)(static_cast<duckdb::DataChunk&>(fp0), static_cast<duckdb::ExpressionState&>(fp0), static_cast<duckdb::Vector&>(fp0))) std::__1::__invoke<void (*&)(duckdb::DataChunk&, duckdb::ExpressionState&, duckdb::Vector&), duckdb::DataChunk&, duckdb::ExpressionState&, duckdb::Vector&>(void (*&)(duckdb::DataChunk&, duckdb::ExpressionState&, duckdb::Vector&), duckdb::DataChunk&, duckdb::ExpressionState&, duckdb::Vector&) type_traits:3918\r\n    #6 0x112a5ce94 in void std::__1::__invoke_void_return_wrapper<void, true>::__call<void (*&)(duckdb::DataChunk&, duckdb::ExpressionState&, duckdb::Vector&), duckdb::DataChunk&, duckdb::ExpressionState&, duckdb::Vector&>(void (*&)(duckdb::DataChunk&, duckdb::ExpressionState&, duckdb::Vector&), duckdb::DataChunk&, duckdb::ExpressionState&, duckdb::Vector&) invoke.h:61\r\n    #7 0x112a5cb6c in std::__1::__function::__alloc_func<void (*)(duckdb::DataChunk&, duckdb::ExpressionState&, duckdb::Vector&), std::__1::allocator<void (*)(duckdb::DataChunk&, duckdb::ExpressionState&, duckdb::Vector&)>, void (duckdb::DataChunk&, duckdb::ExpressionState&, duckdb::Vector&)>::operator()(duckdb::DataChunk&, duckdb::ExpressionState&, duckdb::Vector&) function.h:178\r\n    #8 0x112a566c0 in std::__1::__function::__func<void (*)(duckdb::DataChunk&, duckdb::ExpressionState&, duckdb::Vector&), std::__1::allocator<void (*)(duckdb::DataChunk&, duckdb::ExpressionState&, duckdb::Vector&)>, void (duckdb::DataChunk&, duckdb::ExpressionState&, duckdb::Vector&)>::operator()(duckdb::DataChunk&, duckdb::ExpressionState&, duckdb::Vector&) function.h:352\r\n    #9 0x115469400 in std::__1::__function::__value_func<void (duckdb::DataChunk&, duckdb::ExpressionState&, duckdb::Vector&)>::operator()(duckdb::DataChunk&, duckdb::ExpressionState&, duckdb::Vector&) const function.h:505\r\n    #10 0x11505b7b0 in std::__1::function<void (duckdb::DataChunk&, duckdb::ExpressionState&, duckdb::Vector&)>::operator()(duckdb::DataChunk&, duckdb::ExpressionState&, duckdb::Vector&) const function.h:1182\r\n    #11 0x11505af2a in duckdb::ExpressionExecutor::Execute(duckdb::BoundFunctionExpression const&, duckdb::ExpressionState*, duckdb::SelectionVector const*, unsigned long long, duckdb::Vector&) execute_function.cpp:44\r\n    #12 0x115e6b6e2 in duckdb::ExpressionExecutor::Execute(duckdb::Expression const&, duckdb::ExpressionState*, duckdb::SelectionVector const*, unsigned long long, duckdb::Vector&) expression_executor.cpp:173\r\n    #13 0x115e68b0f in duckdb::ExpressionExecutor::ExecuteExpression(unsigned long long, duckdb::Vector&) expression_executor.cpp:75\r\n    #14 0x115e680b0 in duckdb::ExpressionExecutor::Execute(duckdb::DataChunk*, duckdb::DataChunk&) expression_executor.cpp:46\r\n    #15 0x116e65884 in duckdb::ExpressionExecutor::Execute(duckdb::DataChunk&, duckdb::DataChunk&) expression_executor.hpp:32\r\n    #16 0x115b18160 in duckdb::PhysicalProjection::Execute(duckdb::ExecutionContext&, duckdb::DataChunk&, duckdb::DataChunk&, duckdb::GlobalOperatorState&, duckdb::OperatorState&) const physical_projection.cpp:29\r\n    #17 0x11680c3b7 in duckdb::PipelineExecutor::Execute(duckdb::DataChunk&, duckdb::DataChunk&, unsigned long long) pipeline_executor.cpp:292\r\n    #18 0x1168093a2 in duckdb::PipelineExecutor::ExecutePushInternal(duckdb::DataChunk&, unsigned long long) pipeline_executor.cpp:103\r\n    #19 0x116807f80 in duckdb::PipelineExecutor::Execute(unsigned long long) pipeline_executor.cpp:64\r\n    #20 0x11680b2c0 in duckdb::PipelineExecutor::Execute() pipeline_executor.cpp:78\r\n    #21 0x1168b3d06 in duckdb::PipelineTask::ExecuteTask(duckdb::TaskExecutionMode) pipeline.cpp:43\r\n    #22 0x1167cf946 in duckdb::ExecutorTask::Execute(duckdb::TaskExecutionMode) executor_task.cpp:17\r\n    #23 0x116812360 in duckdb::TaskScheduler::ExecuteForever(std::__1::atomic<bool>*) task_scheduler.cpp:135\r\n    #24 0x1168140c8 in duckdb::ThreadExecuteTasks(duckdb::TaskScheduler*, std::__1::atomic<bool>*) task_scheduler.cpp:166\r\n    #25 0x116911872 in decltype(static_cast<void (*>(fp)(static_cast<duckdb::TaskScheduler*>(fp0), static_cast<std::__1::atomic<bool>*>(fp0))) std::__1::__invoke<void (*)(duckdb::TaskScheduler*, std::__1::atomic<bool>*), duckdb::TaskScheduler*, std::__1::atomic<bool>*>(void (*&&)(duckdb::TaskScheduler*, std::__1::atomic<bool>*), duckdb::TaskScheduler*&&, std::__1::atomic<bool>*&&) type_traits:3918\r\n    #26 0x116911668 in void std::__1::__thread_execute<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, void (*)(duckdb::TaskScheduler*, std::__1::atomic<bool>*), duckdb::TaskScheduler*, std::__1::atomic<bool>*, 2ul, 3ul>(std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, void (*)(duckdb::TaskScheduler*, std::__1::atomic<bool>*), duckdb::TaskScheduler*, std::__1::atomic<bool>*>&, std::__1::__tuple_indices<2ul, 3ul>) thread:287\r\n    #27 0x11690ec06 in void* std::__1::__thread_proxy<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, void (*)(duckdb::TaskScheduler*, std::__1::atomic<bool>*), duckdb::TaskScheduler*, std::__1::atomic<bool>*> >(void*) thread:298\r\n    #28 0x7ff8009504e0 in _pthread_start+0x7c (libsystem_pthread.dylib:x86_64+0x64e0)\r\n    #29 0x7ff80094bf6a in thread_start+0xe (libsystem_pthread.dylib:x86_64+0x1f6a)\r\n\r\n0x61a0000005c0 is located 0 bytes to the right of 1344-byte region [0x61a000000080,0x61a0000005c0)\r\nallocated by thread T1 here:\r\n    #0 0x126c1c2bd in wrap__Znam+0x7d (libclang_rt.asan_osx_dynamic.dylib:x86_64h+0x5c2bd)\r\n    #1 0x113fc4ef4 in duckdb::VectorBuffer::VectorBuffer(unsigned long long) vector_buffer.hpp:56\r\n    #2 0x113fc4510 in duckdb::VectorBuffer::VectorBuffer(unsigned long long) vector_buffer.hpp:54\r\n    #3 0x113fc4347 in std::__1::__shared_ptr_emplace<duckdb::VectorBuffer, std::__1::allocator<duckdb::VectorBuffer> >::__shared_ptr_emplace<unsigned long long>(std::__1::allocator<duckdb::VectorBuffer>, unsigned long long&&) shared_ptr.h:298\r\n    #4 0x113fc3630 in std::__1::__shared_ptr_emplace<duckdb::VectorBuffer, std::__1::allocator<duckdb::VectorBuffer> >::__shared_ptr_emplace<unsigned long long>(std::__1::allocator<duckdb::VectorBuffer>, unsigned long long&&) shared_ptr.h:292\r\n    #5 0x113fc3212 in std::__1::shared_ptr<duckdb::VectorBuffer> std::__1::allocate_shared<duckdb::VectorBuffer, std::__1::allocator<duckdb::VectorBuffer>, unsigned long long, void>(std::__1::allocator<duckdb::VectorBuffer> const&, unsigned long long&&) shared_ptr.h:1106\r\n    #6 0x113fc2f7a in std::__1::shared_ptr<duckdb::VectorBuffer> std::__1::make_shared<duckdb::VectorBuffer, unsigned long long, void>(unsigned long long&&) shared_ptr.h:1115\r\n    #7 0x113e2407f in std::__1::shared_ptr<duckdb::VectorBuffer> duckdb::make_buffer<duckdb::VectorBuffer, unsigned long long>(unsigned long long&&) types.hpp:199\r\n    #8 0x113e23f57 in duckdb::VectorBuffer::CreateStandardVector(duckdb::PhysicalType, unsigned long long) vector_buffer.cpp:12\r\n    #9 0x113e24315 in duckdb::VectorBuffer::CreateStandardVector(duckdb::LogicalType const&, unsigned long long) vector_buffer.cpp:24\r\n    #10 0x113e29c85 in duckdb::Vector::Initialize(bool, unsigned long long) vector.cpp:216\r\n    #11 0x113e2951c in duckdb::Vector::Vector(duckdb::LogicalType, bool, bool, unsigned long long) vector.cpp:24\r\n    #12 0x113e2a133 in duckdb::Vector::Vector(duckdb::LogicalType, bool, bool, unsigned long long) vector.cpp:22\r\n    #13 0x113e1badd in duckdb::Vector::Vector(duckdb::LogicalType, unsigned long long) vector.cpp:28\r\n    #14 0x116a81383 in std::__1::__shared_ptr_emplace<duckdb::Vector, std::__1::allocator<duckdb::Vector> >::__shared_ptr_emplace<duckdb::LogicalType&, unsigned int&>(std::__1::allocator<duckdb::Vector>, duckdb::LogicalType&, unsigned int&) shared_ptr.h:298\r\n    #15 0x116a80588 in std::__1::__shared_ptr_emplace<duckdb::Vector, std::__1::allocator<duckdb::Vector> >::__shared_ptr_emplace<duckdb::LogicalType&, unsigned int&>(std::__1::allocator<duckdb::Vector>, duckdb::LogicalType&, unsigned int&) shared_ptr.h:292\r\n    #16 0x116a80155 in std::__1::shared_ptr<duckdb::Vector> std::__1::allocate_shared<duckdb::Vector, std::__1::allocator<duckdb::Vector>, duckdb::LogicalType&, unsigned int&, void>(std::__1::allocator<duckdb::Vector> const&, duckdb::LogicalType&, unsigned int&) shared_ptr.h:1106\r\n    #17 0x116a7fd6f in std::__1::shared_ptr<duckdb::Vector> std::__1::make_shared<duckdb::Vector, duckdb::LogicalType&, unsigned int&, void>(duckdb::LogicalType&, unsigned int&) shared_ptr.h:1115\r\n    #18 0x116942557 in std::__1::shared_ptr<duckdb::Vector> duckdb::make_buffer<duckdb::Vector, duckdb::LogicalType&, unsigned int&>(duckdb::LogicalType&, unsigned int&) types.hpp:199\r\n    #19 0x116940c9b in duckdb::DictionaryCompressionStorage::StringInitScan(duckdb::ColumnSegment&) dictionary_compression.cpp:435\r\n    #20 0x116bbaa31 in duckdb::ColumnSegment::InitializeScan(duckdb::ColumnScanState&) column_segment.cpp:74\r\n    #21 0x116bc3b98 in duckdb::ColumnData::ScanVector(duckdb::ColumnScanState&, duckdb::Vector&, unsigned long long) column_data.cpp:62\r\n    #22 0x116bcce54 in duckdb::ColumnData::ScanCount(duckdb::ColumnScanState&, duckdb::Vector&, unsigned long long) column_data.cpp:153\r\n    #23 0x116c6361c in duckdb::StandardColumnData::ScanCount(duckdb::ColumnScanState&, duckdb::Vector&, unsigned long long) standard_column_data.cpp:71\r\n    #24 0x116c0cc71 in duckdb::ListColumnData::ScanCount(duckdb::ColumnScanState&, duckdb::Vector&, unsigned long long) list_column_data.cpp:110\r\n    #25 0x116c0b367 in duckdb::ListColumnData::Scan(duckdb::Transaction&, unsigned long long, duckdb::ColumnScanState&, duckdb::Vector&) list_column_data.cpp:70\r\n    #26 0x116c3917e in void duckdb::RowGroup::TemplatedScan<(duckdb::TableScanType)0>(duckdb::Transaction*, duckdb::RowGroupScanState&, duckdb::DataChunk&) row_group.cpp:345\r\n    #27 0x116c37c18 in duckdb::RowGroup::Scan(duckdb::Transaction&, duckdb::RowGroupScanState&, duckdb::DataChunk&) row_group.cpp:430\r\n    #28 0x116e408b0 in duckdb::DataTable::ScanBaseTable(duckdb::Transaction&, duckdb::DataChunk&, duckdb::TableScanState&) data_table.cpp:391\r\n    #29 0x116e404d0 in duckdb::DataTable::Scan(duckdb::Transaction&, duckdb::DataChunk&, duckdb::TableScanState&, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> >&) data_table.cpp:379\r\n\r\nThread T1 created by T0 here:\r\n    #0 0x126c0493c in wrap_pthread_create+0x5c (libclang_rt.asan_osx_dynamic.dylib:x86_64h+0x4493c)\r\n    #1 0x11690ea00 in std::__1::__libcpp_thread_create(_opaque_pthread_t**, void* (*)(void*), void*) __threading_support:421\r\n    #2 0x11690e38f in std::__1::thread::thread<void (&)(duckdb::TaskScheduler*, std::__1::atomic<bool>*), duckdb::TaskScheduler*, std::__1::atomic<bool>*, void>(void (&)(duckdb::TaskScheduler*, std::__1::atomic<bool>*), duckdb::TaskScheduler*&&, std::__1::atomic<bool>*&&) thread:314\r\n    #3 0x11690de10 in std::__1::thread::thread<void (&)(duckdb::TaskScheduler*, std::__1::atomic<bool>*), duckdb::TaskScheduler*, std::__1::atomic<bool>*, void>(void (&)(duckdb::TaskScheduler*, std::__1::atomic<bool>*), duckdb::TaskScheduler*&&, std::__1::atomic<bool>*&&) thread:306\r\n    #4 0x116814000 in std::__1::unique_ptr<std::__1::thread, std::__1::default_delete<std::__1::thread> > duckdb::make_unique<std::__1::thread, void (&)(duckdb::TaskScheduler*, std::__1::atomic<bool>*), duckdb::TaskScheduler*, std::__1::atomic<bool>*>(void (&)(duckdb::TaskScheduler*, std::__1::atomic<bool>*), duckdb::TaskScheduler*&&, std::__1::atomic<bool>*&&) helper.hpp:41\r\n    #5 0x11681132c in duckdb::TaskScheduler::SetThreadsInternal(int) task_scheduler.cpp:214\r\n    #6 0x116813664 in duckdb::TaskScheduler::SetThreads(int) task_scheduler.cpp:180\r\n    #7 0x1163db569 in duckdb::DatabaseInstance::Initialize(char const*, duckdb::DBConfig*) database.cpp:137\r\n    #8 0x1163de3bd in duckdb::DuckDB::DuckDB(char const*, duckdb::DBConfig*) database.cpp:141\r\n    #9 0x1163de738 in duckdb::DuckDB::DuckDB(char const*, duckdb::DBConfig*) database.cpp:140\r\n    #10 0x10ff708c8 in std::__1::unique_ptr<duckdb::DuckDB, std::__1::default_delete<duckdb::DuckDB> > duckdb::make_unique<duckdb::DuckDB, char const*&, duckdb::DBConfig*>(char const*&, duckdb::DBConfig*&&) helper.hpp:41\r\n    #11 0x10ff6fe78 in sqlite3_open_v2 sqlite3_api_wrapper.cpp:97\r\n    #12 0x10fe75789 in open_db shell.c:14246\r\n    #13 0x10fe90933 in do_meta_command shell.c:18351\r\n    #14 0x10feab1ad in process_input shell.c:20073\r\n    #15 0x10fe72f2c in main shell.c:20900\r\n    #16 0x126b0d52d in start+0x1cd (dyld:x86_64+0x552d)\r\n\r\nSUMMARY: AddressSanitizer: heap-buffer-overflow (libclang_rt.asan_osx_dynamic.dylib:x86_64h+0x48f1f) in __asan_memcpy+0x1af\r\nShadow bytes around the buggy address:\r\n  0x1c3400000060: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\r\n  0x1c3400000070: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\r\n  0x1c3400000080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\r\n  0x1c3400000090: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\r\n  0x1c34000000a0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\r\n=>0x1c34000000b0: 00 00 00 00 00 00 00 00[fa]fa fa fa fa fa fa fa\r\n  0x1c34000000c0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\r\n  0x1c34000000d0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\r\n  0x1c34000000e0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\r\n  0x1c34000000f0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\r\n  0x1c3400000100: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\r\nShadow byte legend (one shadow byte represents 8 application bytes):\r\n  Addressable:           00\r\n  Partially addressable: 01 02 03 04 05 06 07 \r\n  Heap left redzone:       fa\r\n  Freed heap region:       fd\r\n  Stack left redzone:      f1\r\n  Stack mid redzone:       f2\r\n  Stack right redzone:     f3\r\n  Stack after return:      f5\r\n  Stack use after scope:   f8\r\n  Global redzone:          f9\r\n  Global init order:       f6\r\n  Poisoned by user:        f7\r\n  Container overflow:      fc\r\n  Array cookie:            ac\r\n  Intra object redzone:    bb\r\n  ASan internal:           fe\r\n  Left alloca redzone:     ca\r\n  Right alloca redzone:    cb\r\n==49159==ABORTING\r\n\r\n```\n\n### To Reproduce\n\n```sql\r\n$ ./duckdb\r\n.open db1\r\n\r\ncreate table t1 as\r\nselect\r\n\th1,\r\n\th2,\r\n\th3,\r\n\tLOWER(TRIM(s)) as s,\r\nfrom\r\n\tread_csv_auto('jvm_crash3.csv', ALL_VARCHAR = 1);\r\n\r\ncreate table t2 (\r\n    h1 VARCHAR,\r\n    h2 VARCHAR,\r\n    h3 VARCHAR,\r\n    s VARCHAR[],\r\n    primary key(h1)\r\n);\r\n\r\ninsert into\t\r\n\tt2 \r\nselect\r\n\th1,\r\n\th2,\r\n\th3,\r\n\tstring_to_array(s, ',') as s\r\nfrom t1;\r\ndrop table t1;\r\n\r\ncreate table t3 as select s[1] from t2;\r\n```\n\n### OS:\n\nLinux, MaxOS\n\n### DuckDB Version:\n\n0.4.0, 0.4.1, 0.5.1\n\n### DuckDB Client:\n\nCLI, JDBC\n\n### Full Name:\n\nAndrii Karaivanskyi\n\n### Affiliation:\n\nIndeed\n\n### Have you tried this on the latest `master` branch?\n\n- [X] I agree\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] I agree\n\"ERROR: AddressSanitizer: heap-buffer-overflow\" when in on-disk mode (not in-memory) when working with arrays\n### What happens?\n\nJDBC and CLI fail when working with arrays. In the case of JDBC, JVM crashes (the crash reports are not very informative). I was able to reproduce the JDBC issue on mac and linux. To reproduce in CLI I used mac, client versions 0.5.1 and 0.4.0. With `make debug` on 0.4.0 the report looks like this:\r\n```\r\n=================================================================\r\n==49159==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x61a0000005c0 at pc 0x000126c08f20 bp 0x70000702fa50 sp 0x70000702f218\r\nREAD of size 16 at 0x61a0000005c0 thread T1\r\n    #0 0x126c08f1f in __asan_memcpy+0x1af (libclang_rt.asan_osx_dynamic.dylib:x86_64h+0x48f1f)\r\n    #1 0x1127fc1dc in void duckdb::ListExtractTemplate<duckdb::string_t, true, false>(unsigned long long, duckdb::VectorData&, duckdb::VectorData&, duckdb::Vector&, unsigned long long, duckdb::Vector&) list_extract.cpp:66\r\n    #2 0x1127ecf98 in duckdb::ExecuteListExtractInternal(unsigned long long, duckdb::VectorData&, duckdb::VectorData&, duckdb::Vector&, unsigned long long, duckdb::Vector&) list_extract.cpp:118\r\n    #3 0x1127eb866 in duckdb::ExecuteListExtract(duckdb::Vector&, duckdb::Vector&, duckdb::Vector&, unsigned long long) list_extract.cpp:156\r\n    #4 0x11274090c in duckdb::ListExtractFunction(duckdb::DataChunk&, duckdb::ExpressionState&, duckdb::Vector&) list_extract.cpp:184\r\n    #5 0x112a5d10e in decltype(static_cast<void (*&>(fp)(static_cast<duckdb::DataChunk&>(fp0), static_cast<duckdb::ExpressionState&>(fp0), static_cast<duckdb::Vector&>(fp0))) std::__1::__invoke<void (*&)(duckdb::DataChunk&, duckdb::ExpressionState&, duckdb::Vector&), duckdb::DataChunk&, duckdb::ExpressionState&, duckdb::Vector&>(void (*&)(duckdb::DataChunk&, duckdb::ExpressionState&, duckdb::Vector&), duckdb::DataChunk&, duckdb::ExpressionState&, duckdb::Vector&) type_traits:3918\r\n    #6 0x112a5ce94 in void std::__1::__invoke_void_return_wrapper<void, true>::__call<void (*&)(duckdb::DataChunk&, duckdb::ExpressionState&, duckdb::Vector&), duckdb::DataChunk&, duckdb::ExpressionState&, duckdb::Vector&>(void (*&)(duckdb::DataChunk&, duckdb::ExpressionState&, duckdb::Vector&), duckdb::DataChunk&, duckdb::ExpressionState&, duckdb::Vector&) invoke.h:61\r\n    #7 0x112a5cb6c in std::__1::__function::__alloc_func<void (*)(duckdb::DataChunk&, duckdb::ExpressionState&, duckdb::Vector&), std::__1::allocator<void (*)(duckdb::DataChunk&, duckdb::ExpressionState&, duckdb::Vector&)>, void (duckdb::DataChunk&, duckdb::ExpressionState&, duckdb::Vector&)>::operator()(duckdb::DataChunk&, duckdb::ExpressionState&, duckdb::Vector&) function.h:178\r\n    #8 0x112a566c0 in std::__1::__function::__func<void (*)(duckdb::DataChunk&, duckdb::ExpressionState&, duckdb::Vector&), std::__1::allocator<void (*)(duckdb::DataChunk&, duckdb::ExpressionState&, duckdb::Vector&)>, void (duckdb::DataChunk&, duckdb::ExpressionState&, duckdb::Vector&)>::operator()(duckdb::DataChunk&, duckdb::ExpressionState&, duckdb::Vector&) function.h:352\r\n    #9 0x115469400 in std::__1::__function::__value_func<void (duckdb::DataChunk&, duckdb::ExpressionState&, duckdb::Vector&)>::operator()(duckdb::DataChunk&, duckdb::ExpressionState&, duckdb::Vector&) const function.h:505\r\n    #10 0x11505b7b0 in std::__1::function<void (duckdb::DataChunk&, duckdb::ExpressionState&, duckdb::Vector&)>::operator()(duckdb::DataChunk&, duckdb::ExpressionState&, duckdb::Vector&) const function.h:1182\r\n    #11 0x11505af2a in duckdb::ExpressionExecutor::Execute(duckdb::BoundFunctionExpression const&, duckdb::ExpressionState*, duckdb::SelectionVector const*, unsigned long long, duckdb::Vector&) execute_function.cpp:44\r\n    #12 0x115e6b6e2 in duckdb::ExpressionExecutor::Execute(duckdb::Expression const&, duckdb::ExpressionState*, duckdb::SelectionVector const*, unsigned long long, duckdb::Vector&) expression_executor.cpp:173\r\n    #13 0x115e68b0f in duckdb::ExpressionExecutor::ExecuteExpression(unsigned long long, duckdb::Vector&) expression_executor.cpp:75\r\n    #14 0x115e680b0 in duckdb::ExpressionExecutor::Execute(duckdb::DataChunk*, duckdb::DataChunk&) expression_executor.cpp:46\r\n    #15 0x116e65884 in duckdb::ExpressionExecutor::Execute(duckdb::DataChunk&, duckdb::DataChunk&) expression_executor.hpp:32\r\n    #16 0x115b18160 in duckdb::PhysicalProjection::Execute(duckdb::ExecutionContext&, duckdb::DataChunk&, duckdb::DataChunk&, duckdb::GlobalOperatorState&, duckdb::OperatorState&) const physical_projection.cpp:29\r\n    #17 0x11680c3b7 in duckdb::PipelineExecutor::Execute(duckdb::DataChunk&, duckdb::DataChunk&, unsigned long long) pipeline_executor.cpp:292\r\n    #18 0x1168093a2 in duckdb::PipelineExecutor::ExecutePushInternal(duckdb::DataChunk&, unsigned long long) pipeline_executor.cpp:103\r\n    #19 0x116807f80 in duckdb::PipelineExecutor::Execute(unsigned long long) pipeline_executor.cpp:64\r\n    #20 0x11680b2c0 in duckdb::PipelineExecutor::Execute() pipeline_executor.cpp:78\r\n    #21 0x1168b3d06 in duckdb::PipelineTask::ExecuteTask(duckdb::TaskExecutionMode) pipeline.cpp:43\r\n    #22 0x1167cf946 in duckdb::ExecutorTask::Execute(duckdb::TaskExecutionMode) executor_task.cpp:17\r\n    #23 0x116812360 in duckdb::TaskScheduler::ExecuteForever(std::__1::atomic<bool>*) task_scheduler.cpp:135\r\n    #24 0x1168140c8 in duckdb::ThreadExecuteTasks(duckdb::TaskScheduler*, std::__1::atomic<bool>*) task_scheduler.cpp:166\r\n    #25 0x116911872 in decltype(static_cast<void (*>(fp)(static_cast<duckdb::TaskScheduler*>(fp0), static_cast<std::__1::atomic<bool>*>(fp0))) std::__1::__invoke<void (*)(duckdb::TaskScheduler*, std::__1::atomic<bool>*), duckdb::TaskScheduler*, std::__1::atomic<bool>*>(void (*&&)(duckdb::TaskScheduler*, std::__1::atomic<bool>*), duckdb::TaskScheduler*&&, std::__1::atomic<bool>*&&) type_traits:3918\r\n    #26 0x116911668 in void std::__1::__thread_execute<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, void (*)(duckdb::TaskScheduler*, std::__1::atomic<bool>*), duckdb::TaskScheduler*, std::__1::atomic<bool>*, 2ul, 3ul>(std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, void (*)(duckdb::TaskScheduler*, std::__1::atomic<bool>*), duckdb::TaskScheduler*, std::__1::atomic<bool>*>&, std::__1::__tuple_indices<2ul, 3ul>) thread:287\r\n    #27 0x11690ec06 in void* std::__1::__thread_proxy<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, void (*)(duckdb::TaskScheduler*, std::__1::atomic<bool>*), duckdb::TaskScheduler*, std::__1::atomic<bool>*> >(void*) thread:298\r\n    #28 0x7ff8009504e0 in _pthread_start+0x7c (libsystem_pthread.dylib:x86_64+0x64e0)\r\n    #29 0x7ff80094bf6a in thread_start+0xe (libsystem_pthread.dylib:x86_64+0x1f6a)\r\n\r\n0x61a0000005c0 is located 0 bytes to the right of 1344-byte region [0x61a000000080,0x61a0000005c0)\r\nallocated by thread T1 here:\r\n    #0 0x126c1c2bd in wrap__Znam+0x7d (libclang_rt.asan_osx_dynamic.dylib:x86_64h+0x5c2bd)\r\n    #1 0x113fc4ef4 in duckdb::VectorBuffer::VectorBuffer(unsigned long long) vector_buffer.hpp:56\r\n    #2 0x113fc4510 in duckdb::VectorBuffer::VectorBuffer(unsigned long long) vector_buffer.hpp:54\r\n    #3 0x113fc4347 in std::__1::__shared_ptr_emplace<duckdb::VectorBuffer, std::__1::allocator<duckdb::VectorBuffer> >::__shared_ptr_emplace<unsigned long long>(std::__1::allocator<duckdb::VectorBuffer>, unsigned long long&&) shared_ptr.h:298\r\n    #4 0x113fc3630 in std::__1::__shared_ptr_emplace<duckdb::VectorBuffer, std::__1::allocator<duckdb::VectorBuffer> >::__shared_ptr_emplace<unsigned long long>(std::__1::allocator<duckdb::VectorBuffer>, unsigned long long&&) shared_ptr.h:292\r\n    #5 0x113fc3212 in std::__1::shared_ptr<duckdb::VectorBuffer> std::__1::allocate_shared<duckdb::VectorBuffer, std::__1::allocator<duckdb::VectorBuffer>, unsigned long long, void>(std::__1::allocator<duckdb::VectorBuffer> const&, unsigned long long&&) shared_ptr.h:1106\r\n    #6 0x113fc2f7a in std::__1::shared_ptr<duckdb::VectorBuffer> std::__1::make_shared<duckdb::VectorBuffer, unsigned long long, void>(unsigned long long&&) shared_ptr.h:1115\r\n    #7 0x113e2407f in std::__1::shared_ptr<duckdb::VectorBuffer> duckdb::make_buffer<duckdb::VectorBuffer, unsigned long long>(unsigned long long&&) types.hpp:199\r\n    #8 0x113e23f57 in duckdb::VectorBuffer::CreateStandardVector(duckdb::PhysicalType, unsigned long long) vector_buffer.cpp:12\r\n    #9 0x113e24315 in duckdb::VectorBuffer::CreateStandardVector(duckdb::LogicalType const&, unsigned long long) vector_buffer.cpp:24\r\n    #10 0x113e29c85 in duckdb::Vector::Initialize(bool, unsigned long long) vector.cpp:216\r\n    #11 0x113e2951c in duckdb::Vector::Vector(duckdb::LogicalType, bool, bool, unsigned long long) vector.cpp:24\r\n    #12 0x113e2a133 in duckdb::Vector::Vector(duckdb::LogicalType, bool, bool, unsigned long long) vector.cpp:22\r\n    #13 0x113e1badd in duckdb::Vector::Vector(duckdb::LogicalType, unsigned long long) vector.cpp:28\r\n    #14 0x116a81383 in std::__1::__shared_ptr_emplace<duckdb::Vector, std::__1::allocator<duckdb::Vector> >::__shared_ptr_emplace<duckdb::LogicalType&, unsigned int&>(std::__1::allocator<duckdb::Vector>, duckdb::LogicalType&, unsigned int&) shared_ptr.h:298\r\n    #15 0x116a80588 in std::__1::__shared_ptr_emplace<duckdb::Vector, std::__1::allocator<duckdb::Vector> >::__shared_ptr_emplace<duckdb::LogicalType&, unsigned int&>(std::__1::allocator<duckdb::Vector>, duckdb::LogicalType&, unsigned int&) shared_ptr.h:292\r\n    #16 0x116a80155 in std::__1::shared_ptr<duckdb::Vector> std::__1::allocate_shared<duckdb::Vector, std::__1::allocator<duckdb::Vector>, duckdb::LogicalType&, unsigned int&, void>(std::__1::allocator<duckdb::Vector> const&, duckdb::LogicalType&, unsigned int&) shared_ptr.h:1106\r\n    #17 0x116a7fd6f in std::__1::shared_ptr<duckdb::Vector> std::__1::make_shared<duckdb::Vector, duckdb::LogicalType&, unsigned int&, void>(duckdb::LogicalType&, unsigned int&) shared_ptr.h:1115\r\n    #18 0x116942557 in std::__1::shared_ptr<duckdb::Vector> duckdb::make_buffer<duckdb::Vector, duckdb::LogicalType&, unsigned int&>(duckdb::LogicalType&, unsigned int&) types.hpp:199\r\n    #19 0x116940c9b in duckdb::DictionaryCompressionStorage::StringInitScan(duckdb::ColumnSegment&) dictionary_compression.cpp:435\r\n    #20 0x116bbaa31 in duckdb::ColumnSegment::InitializeScan(duckdb::ColumnScanState&) column_segment.cpp:74\r\n    #21 0x116bc3b98 in duckdb::ColumnData::ScanVector(duckdb::ColumnScanState&, duckdb::Vector&, unsigned long long) column_data.cpp:62\r\n    #22 0x116bcce54 in duckdb::ColumnData::ScanCount(duckdb::ColumnScanState&, duckdb::Vector&, unsigned long long) column_data.cpp:153\r\n    #23 0x116c6361c in duckdb::StandardColumnData::ScanCount(duckdb::ColumnScanState&, duckdb::Vector&, unsigned long long) standard_column_data.cpp:71\r\n    #24 0x116c0cc71 in duckdb::ListColumnData::ScanCount(duckdb::ColumnScanState&, duckdb::Vector&, unsigned long long) list_column_data.cpp:110\r\n    #25 0x116c0b367 in duckdb::ListColumnData::Scan(duckdb::Transaction&, unsigned long long, duckdb::ColumnScanState&, duckdb::Vector&) list_column_data.cpp:70\r\n    #26 0x116c3917e in void duckdb::RowGroup::TemplatedScan<(duckdb::TableScanType)0>(duckdb::Transaction*, duckdb::RowGroupScanState&, duckdb::DataChunk&) row_group.cpp:345\r\n    #27 0x116c37c18 in duckdb::RowGroup::Scan(duckdb::Transaction&, duckdb::RowGroupScanState&, duckdb::DataChunk&) row_group.cpp:430\r\n    #28 0x116e408b0 in duckdb::DataTable::ScanBaseTable(duckdb::Transaction&, duckdb::DataChunk&, duckdb::TableScanState&) data_table.cpp:391\r\n    #29 0x116e404d0 in duckdb::DataTable::Scan(duckdb::Transaction&, duckdb::DataChunk&, duckdb::TableScanState&, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> >&) data_table.cpp:379\r\n\r\nThread T1 created by T0 here:\r\n    #0 0x126c0493c in wrap_pthread_create+0x5c (libclang_rt.asan_osx_dynamic.dylib:x86_64h+0x4493c)\r\n    #1 0x11690ea00 in std::__1::__libcpp_thread_create(_opaque_pthread_t**, void* (*)(void*), void*) __threading_support:421\r\n    #2 0x11690e38f in std::__1::thread::thread<void (&)(duckdb::TaskScheduler*, std::__1::atomic<bool>*), duckdb::TaskScheduler*, std::__1::atomic<bool>*, void>(void (&)(duckdb::TaskScheduler*, std::__1::atomic<bool>*), duckdb::TaskScheduler*&&, std::__1::atomic<bool>*&&) thread:314\r\n    #3 0x11690de10 in std::__1::thread::thread<void (&)(duckdb::TaskScheduler*, std::__1::atomic<bool>*), duckdb::TaskScheduler*, std::__1::atomic<bool>*, void>(void (&)(duckdb::TaskScheduler*, std::__1::atomic<bool>*), duckdb::TaskScheduler*&&, std::__1::atomic<bool>*&&) thread:306\r\n    #4 0x116814000 in std::__1::unique_ptr<std::__1::thread, std::__1::default_delete<std::__1::thread> > duckdb::make_unique<std::__1::thread, void (&)(duckdb::TaskScheduler*, std::__1::atomic<bool>*), duckdb::TaskScheduler*, std::__1::atomic<bool>*>(void (&)(duckdb::TaskScheduler*, std::__1::atomic<bool>*), duckdb::TaskScheduler*&&, std::__1::atomic<bool>*&&) helper.hpp:41\r\n    #5 0x11681132c in duckdb::TaskScheduler::SetThreadsInternal(int) task_scheduler.cpp:214\r\n    #6 0x116813664 in duckdb::TaskScheduler::SetThreads(int) task_scheduler.cpp:180\r\n    #7 0x1163db569 in duckdb::DatabaseInstance::Initialize(char const*, duckdb::DBConfig*) database.cpp:137\r\n    #8 0x1163de3bd in duckdb::DuckDB::DuckDB(char const*, duckdb::DBConfig*) database.cpp:141\r\n    #9 0x1163de738 in duckdb::DuckDB::DuckDB(char const*, duckdb::DBConfig*) database.cpp:140\r\n    #10 0x10ff708c8 in std::__1::unique_ptr<duckdb::DuckDB, std::__1::default_delete<duckdb::DuckDB> > duckdb::make_unique<duckdb::DuckDB, char const*&, duckdb::DBConfig*>(char const*&, duckdb::DBConfig*&&) helper.hpp:41\r\n    #11 0x10ff6fe78 in sqlite3_open_v2 sqlite3_api_wrapper.cpp:97\r\n    #12 0x10fe75789 in open_db shell.c:14246\r\n    #13 0x10fe90933 in do_meta_command shell.c:18351\r\n    #14 0x10feab1ad in process_input shell.c:20073\r\n    #15 0x10fe72f2c in main shell.c:20900\r\n    #16 0x126b0d52d in start+0x1cd (dyld:x86_64+0x552d)\r\n\r\nSUMMARY: AddressSanitizer: heap-buffer-overflow (libclang_rt.asan_osx_dynamic.dylib:x86_64h+0x48f1f) in __asan_memcpy+0x1af\r\nShadow bytes around the buggy address:\r\n  0x1c3400000060: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\r\n  0x1c3400000070: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\r\n  0x1c3400000080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\r\n  0x1c3400000090: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\r\n  0x1c34000000a0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\r\n=>0x1c34000000b0: 00 00 00 00 00 00 00 00[fa]fa fa fa fa fa fa fa\r\n  0x1c34000000c0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\r\n  0x1c34000000d0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\r\n  0x1c34000000e0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\r\n  0x1c34000000f0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\r\n  0x1c3400000100: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\r\nShadow byte legend (one shadow byte represents 8 application bytes):\r\n  Addressable:           00\r\n  Partially addressable: 01 02 03 04 05 06 07 \r\n  Heap left redzone:       fa\r\n  Freed heap region:       fd\r\n  Stack left redzone:      f1\r\n  Stack mid redzone:       f2\r\n  Stack right redzone:     f3\r\n  Stack after return:      f5\r\n  Stack use after scope:   f8\r\n  Global redzone:          f9\r\n  Global init order:       f6\r\n  Poisoned by user:        f7\r\n  Container overflow:      fc\r\n  Array cookie:            ac\r\n  Intra object redzone:    bb\r\n  ASan internal:           fe\r\n  Left alloca redzone:     ca\r\n  Right alloca redzone:    cb\r\n==49159==ABORTING\r\n\r\n```\n\n### To Reproduce\n\n```sql\r\n$ ./duckdb\r\n.open db1\r\n\r\ncreate table t1 as\r\nselect\r\n\th1,\r\n\th2,\r\n\th3,\r\n\tLOWER(TRIM(s)) as s,\r\nfrom\r\n\tread_csv_auto('jvm_crash3.csv', ALL_VARCHAR = 1);\r\n\r\ncreate table t2 (\r\n    h1 VARCHAR,\r\n    h2 VARCHAR,\r\n    h3 VARCHAR,\r\n    s VARCHAR[],\r\n    primary key(h1)\r\n);\r\n\r\ninsert into\t\r\n\tt2 \r\nselect\r\n\th1,\r\n\th2,\r\n\th3,\r\n\tstring_to_array(s, ',') as s\r\nfrom t1;\r\ndrop table t1;\r\n\r\ncreate table t3 as select s[1] from t2;\r\n```\n\n### OS:\n\nLinux, MaxOS\n\n### DuckDB Version:\n\n0.4.0, 0.4.1, 0.5.1\n\n### DuckDB Client:\n\nCLI, JDBC\n\n### Full Name:\n\nAndrii Karaivanskyi\n\n### Affiliation:\n\nIndeed\n\n### Have you tried this on the latest `master` branch?\n\n- [X] I agree\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] I agree\n",
  "hints_text": "[jvm_crash3.csv](https://github.com/duckdb/duckdb/files/9892727/jvm_crash3.csv)\r\n\nLatest master:\r\n```\r\n=================================================================\r\n==53229==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x61a0000101c0 at pc 0x00011d7a3f20 bp 0x700006c459d0 sp 0x700006c45198\r\nREAD of size 16 at 0x61a0000101c0 thread T3\r\n    #0 0x11d7a3f1f in __asan_memcpy+0x1af (libclang_rt.asan_osx_dynamic.dylib:x86_64h+0x48f1f)\r\n    #1 0x107297b7c in void duckdb::ListExtractTemplate<duckdb::string_t, true, false>(unsigned long long, duckdb::UnifiedVectorFormat&, duckdb::UnifiedVectorFormat&, duckdb::Vector&, unsigned long long, duckdb::Vector&) list_extract.cpp:66\r\n    #2 0x107288938 in duckdb::ExecuteListExtractInternal(unsigned long long, duckdb::UnifiedVectorFormat&, duckdb::UnifiedVectorFormat&, duckdb::Vector&, unsigned long long, duckdb::Vector&) list_extract.cpp:118\r\n    #3 0x107287206 in duckdb::ExecuteListExtract(duckdb::Vector&, duckdb::Vector&, duckdb::Vector&, unsigned long long) list_extract.cpp:156\r\n    #4 0x1071986cc in duckdb::ListExtractFunction(duckdb::DataChunk&, duckdb::ExpressionState&, duckdb::Vector&) list_extract.cpp:184\r\n    #5 0x10751212e in decltype(static_cast<void (*&>(fp)(static_cast<duckdb::DataChunk&>(fp0), static_cast<duckdb::ExpressionState&>(fp0), static_cast<duckdb::Vector&>(fp0))) std::__1::__invoke<void (*&)(duckdb::DataChunk&, duckdb::ExpressionState&, duckdb::Vector&), duckdb::DataChunk&, duckdb::ExpressionState&, duckdb::Vector&>(void (*&)(duckdb::DataChunk&, duckdb::ExpressionState&, duckdb::Vector&), duckdb::DataChunk&, duckdb::ExpressionState&, duckdb::Vector&) type_traits:3918\r\n    #6 0x107511eb4 in void std::__1::__invoke_void_return_wrapper<void, true>::__call<void (*&)(duckdb::DataChunk&, duckdb::ExpressionState&, duckdb::Vector&), duckdb::DataChunk&, duckdb::ExpressionState&, duckdb::Vector&>(void (*&)(duckdb::DataChunk&, duckdb::ExpressionState&, duckdb::Vector&), duckdb::DataChunk&, duckdb::ExpressionState&, duckdb::Vector&) invoke.h:61\r\n    #7 0x107511b8c in std::__1::__function::__alloc_func<void (*)(duckdb::DataChunk&, duckdb::ExpressionState&, duckdb::Vector&), std::__1::allocator<void (*)(duckdb::DataChunk&, duckdb::ExpressionState&, duckdb::Vector&)>, void (duckdb::DataChunk&, duckdb::ExpressionState&, duckdb::Vector&)>::operator()(duckdb::DataChunk&, duckdb::ExpressionState&, duckdb::Vector&) function.h:178\r\n    #8 0x10750b6e0 in std::__1::__function::__func<void (*)(duckdb::DataChunk&, duckdb::ExpressionState&, duckdb::Vector&), std::__1::allocator<void (*)(duckdb::DataChunk&, duckdb::ExpressionState&, duckdb::Vector&)>, void (duckdb::DataChunk&, duckdb::ExpressionState&, duckdb::Vector&)>::operator()(duckdb::DataChunk&, duckdb::ExpressionState&, duckdb::Vector&) function.h:352\r\n    #9 0x109d6f150 in std::__1::__function::__value_func<void (duckdb::DataChunk&, duckdb::ExpressionState&, duckdb::Vector&)>::operator()(duckdb::DataChunk&, duckdb::ExpressionState&, duckdb::Vector&) const function.h:505\r\n    #10 0x109956540 in std::__1::function<void (duckdb::DataChunk&, duckdb::ExpressionState&, duckdb::Vector&)>::operator()(duckdb::DataChunk&, duckdb::ExpressionState&, duckdb::Vector&) const function.h:1182\r\n    #11 0x109955b6f in duckdb::ExpressionExecutor::Execute(duckdb::BoundFunctionExpression const&, duckdb::ExpressionState*, duckdb::SelectionVector const*, unsigned long long, duckdb::Vector&) execute_function.cpp:79\r\n    #12 0x10a9835c2 in duckdb::ExpressionExecutor::Execute(duckdb::Expression const&, duckdb::ExpressionState*, duckdb::SelectionVector const*, unsigned long long, duckdb::Vector&) expression_executor.cpp:179\r\n    #13 0x10a9809b2 in duckdb::ExpressionExecutor::ExecuteExpression(unsigned long long, duckdb::Vector&) expression_executor.cpp:78\r\n    #14 0x10a97ff08 in duckdb::ExpressionExecutor::Execute(duckdb::DataChunk*, duckdb::DataChunk&) expression_executor.cpp:49\r\n    #15 0x10bb0be34 in duckdb::ExpressionExecutor::Execute(duckdb::DataChunk&, duckdb::DataChunk&) expression_executor.hpp:42\r\n    #16 0x10a5c9de0 in duckdb::PhysicalProjection::Execute(duckdb::ExecutionContext&, duckdb::DataChunk&, duckdb::DataChunk&, duckdb::GlobalOperatorState&, duckdb::OperatorState&) const physical_projection.cpp:30\r\n    #17 0x10b399be3 in duckdb::PipelineExecutor::Execute(duckdb::DataChunk&, duckdb::DataChunk&, unsigned long long) pipeline_executor.cpp:319\r\n    #18 0x10b397105 in duckdb::PipelineExecutor::ExecutePushInternal(duckdb::DataChunk&, unsigned long long) pipeline_executor.cpp:92\r\n    #19 0x10b395c10 in duckdb::PipelineExecutor::Execute(unsigned long long) pipeline_executor.cpp:52\r\n    #20 0x10b398b10 in duckdb::PipelineExecutor::Execute() pipeline_executor.cpp:66\r\n    #21 0x10b44c5b6 in duckdb::PipelineTask::ExecuteTask(duckdb::TaskExecutionMode) pipeline.cpp:43\r\n    #22 0x10b35ec85 in duckdb::ExecutorTask::Execute(duckdb::TaskExecutionMode) executor_task.cpp:17\r\n    #23 0x10b3a0630 in duckdb::TaskScheduler::ExecuteForever(std::__1::atomic<bool>*) task_scheduler.cpp:135\r\n    #24 0x10b3a2a08 in duckdb::ThreadExecuteTasks(duckdb::TaskScheduler*, std::__1::atomic<bool>*) task_scheduler.cpp:185\r\n    #25 0x10b4a8f42 in decltype(static_cast<void (*>(fp)(static_cast<duckdb::TaskScheduler*>(fp0), static_cast<std::__1::atomic<bool>*>(fp0))) std::__1::__invoke<void (*)(duckdb::TaskScheduler*, std::__1::atomic<bool>*), duckdb::TaskScheduler*, std::__1::atomic<bool>*>(void (*&&)(duckdb::TaskScheduler*, std::__1::atomic<bool>*), duckdb::TaskScheduler*&&, std::__1::atomic<bool>*&&) type_traits:3918\r\n    #26 0x10b4a8d38 in void std::__1::__thread_execute<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, void (*)(duckdb::TaskScheduler*, std::__1::atomic<bool>*), duckdb::TaskScheduler*, std::__1::atomic<bool>*, 2ul, 3ul>(std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, void (*)(duckdb::TaskScheduler*, std::__1::atomic<bool>*), duckdb::TaskScheduler*, std::__1::atomic<bool>*>&, std::__1::__tuple_indices<2ul, 3ul>) thread:287\r\n    #27 0x10b4a62d6 in void* std::__1::__thread_proxy<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, void (*)(duckdb::TaskScheduler*, std::__1::atomic<bool>*), duckdb::TaskScheduler*, std::__1::atomic<bool>*> >(void*) thread:298\r\n    #28 0x7ff8009504e0 in _pthread_start+0x7c (libsystem_pthread.dylib:x86_64+0x64e0)\r\n    #29 0x7ff80094bf6a in thread_start+0xe (libsystem_pthread.dylib:x86_64+0x1f6a)\r\n\r\n0x61a0000101c0 is located 0 bytes to the right of 1344-byte region [0x61a00000fc80,0x61a0000101c0)\r\nallocated by thread T3 here:\r\n    #0 0x11d7b72bd in wrap__Znam+0x7d (libclang_rt.asan_osx_dynamic.dylib:x86_64h+0x5c2bd)\r\n    #1 0x108d11df4 in duckdb::VectorBuffer::VectorBuffer(unsigned long long) vector_buffer.hpp:57\r\n    #2 0x108d11410 in duckdb::VectorBuffer::VectorBuffer(unsigned long long) vector_buffer.hpp:55\r\n    #3 0x108d11247 in std::__1::__shared_ptr_emplace<duckdb::VectorBuffer, std::__1::allocator<duckdb::VectorBuffer> >::__shared_ptr_emplace<unsigned long long>(std::__1::allocator<duckdb::VectorBuffer>, unsigned long long&&) shared_ptr.h:298\r\n    #4 0x108d10530 in std::__1::__shared_ptr_emplace<duckdb::VectorBuffer, std::__1::allocator<duckdb::VectorBuffer> >::__shared_ptr_emplace<unsigned long long>(std::__1::allocator<duckdb::VectorBuffer>, unsigned long long&&) shared_ptr.h:292\r\n    #5 0x108d10112 in std::__1::shared_ptr<duckdb::VectorBuffer> std::__1::allocate_shared<duckdb::VectorBuffer, std::__1::allocator<duckdb::VectorBuffer>, unsigned long long, void>(std::__1::allocator<duckdb::VectorBuffer> const&, unsigned long long&&) shared_ptr.h:1106\r\n    #6 0x108d0fe7a in std::__1::shared_ptr<duckdb::VectorBuffer> std::__1::make_shared<duckdb::VectorBuffer, unsigned long long, void>(unsigned long long&&) shared_ptr.h:1115\r\n    #7 0x108b1001f in std::__1::shared_ptr<duckdb::VectorBuffer> duckdb::make_buffer<duckdb::VectorBuffer, unsigned long long>(unsigned long long&&) types.hpp:207\r\n    #8 0x108b0fef7 in duckdb::VectorBuffer::CreateStandardVector(duckdb::PhysicalType, unsigned long long) vector_buffer.cpp:12\r\n    #9 0x108b102b5 in duckdb::VectorBuffer::CreateStandardVector(duckdb::LogicalType const&, unsigned long long) vector_buffer.cpp:24\r\n    #10 0x108b15825 in duckdb::Vector::Initialize(bool, unsigned long long) vector.cpp:226\r\n    #11 0x108b1510c in duckdb::Vector::Vector(duckdb::LogicalType, bool, bool, unsigned long long) vector.cpp:28\r\n    #12 0x108b15da3 in duckdb::Vector::Vector(duckdb::LogicalType, bool, bool, unsigned long long) vector.cpp:26\r\n    #13 0x108aae3fd in duckdb::Vector::Vector(duckdb::LogicalType, unsigned long long) vector.cpp:32\r\n    #14 0x10b632903 in std::__1::__shared_ptr_emplace<duckdb::Vector, std::__1::allocator<duckdb::Vector> >::__shared_ptr_emplace<duckdb::LogicalType&, unsigned int&>(std::__1::allocator<duckdb::Vector>, duckdb::LogicalType&, unsigned int&) shared_ptr.h:298\r\n    #15 0x10b631b08 in std::__1::__shared_ptr_emplace<duckdb::Vector, std::__1::allocator<duckdb::Vector> >::__shared_ptr_emplace<duckdb::LogicalType&, unsigned int&>(std::__1::allocator<duckdb::Vector>, duckdb::LogicalType&, unsigned int&) shared_ptr.h:292\r\n    #16 0x10b6316d5 in std::__1::shared_ptr<duckdb::Vector> std::__1::allocate_shared<duckdb::Vector, std::__1::allocator<duckdb::Vector>, duckdb::LogicalType&, unsigned int&, void>(std::__1::allocator<duckdb::Vector> const&, duckdb::LogicalType&, unsigned int&) shared_ptr.h:1106\r\n    #17 0x10b6312ef in std::__1::shared_ptr<duckdb::Vector> std::__1::make_shared<duckdb::Vector, duckdb::LogicalType&, unsigned int&, void>(duckdb::LogicalType&, unsigned int&) shared_ptr.h:1115\r\n    #18 0x10b4e7cc7 in std::__1::shared_ptr<duckdb::Vector> duckdb::make_buffer<duckdb::Vector, duckdb::LogicalType&, unsigned int&>(duckdb::LogicalType&, unsigned int&) types.hpp:207\r\n    #19 0x10b4e67c7 in duckdb::DictionaryCompressionStorage::StringInitScan(duckdb::ColumnSegment&) dictionary_compression.cpp:450\r\n    #20 0x10b7d4eb1 in duckdb::ColumnSegment::InitializeScan(duckdb::ColumnScanState&) column_segment.cpp:85\r\n    #21 0x10b7de5c7 in duckdb::ColumnData::ScanVector(duckdb::ColumnScanState&, duckdb::Vector&, unsigned long long) column_data.cpp:97\r\n    #22 0x10b7eac74 in duckdb::ColumnData::ScanCount(duckdb::ColumnScanState&, duckdb::Vector&, unsigned long long) column_data.cpp:192\r\n    #23 0x10b8b35bc in duckdb::StandardColumnData::ScanCount(duckdb::ColumnScanState&, duckdb::Vector&, unsigned long long) standard_column_data.cpp:78\r\n    #24 0x10b82ecf3 in duckdb::ListColumnData::ScanCount(duckdb::ColumnScanState&, duckdb::Vector&, unsigned long long) list_column_data.cpp:119\r\n    #25 0x10b82d121 in duckdb::ListColumnData::Scan(duckdb::TransactionData, unsigned long long, duckdb::ColumnScanState&, duckdb::Vector&) list_column_data.cpp:78\r\n    #26 0x10b862b02 in void duckdb::RowGroup::TemplatedScan<(duckdb::TableScanType)0>(duckdb::TransactionData, duckdb::RowGroupScanState&, duckdb::DataChunk&) row_group.cpp:369\r\n    #27 0x10b8615df in duckdb::RowGroup::Scan(duckdb::TransactionData, duckdb::RowGroupScanState&, duckdb::DataChunk&) row_group.cpp:453\r\n    #28 0x10b895247 in duckdb::CollectionScanState::Scan(duckdb::Transaction&, duckdb::DataChunk&) scan_state.cpp:90\r\n    #29 0x10baeb3bb in duckdb::DataTable::Scan(duckdb::Transaction&, duckdb::DataChunk&, duckdb::TableScanState&) data_table.cpp:226\r\n\r\nThread T3 created by T0 here:\r\n    #0 0x11d79f93c in wrap_pthread_create+0x5c (libclang_rt.asan_osx_dynamic.dylib:x86_64h+0x4493c)\r\n    #1 0x10b4a60d0 in std::__1::__libcpp_thread_create(_opaque_pthread_t**, void* (*)(void*), void*) __threading_support:421\r\n    #2 0x10b4a5a5f in std::__1::thread::thread<void (&)(duckdb::TaskScheduler*, std::__1::atomic<bool>*), duckdb::TaskScheduler*, std::__1::atomic<bool>*, void>(void (&)(duckdb::TaskScheduler*, std::__1::atomic<bool>*), duckdb::TaskScheduler*&&, std::__1::atomic<bool>*&&) thread:314\r\n    #3 0x10b4a54e0 in std::__1::thread::thread<void (&)(duckdb::TaskScheduler*, std::__1::atomic<bool>*), duckdb::TaskScheduler*, std::__1::atomic<bool>*, void>(void (&)(duckdb::TaskScheduler*, std::__1::atomic<bool>*), duckdb::TaskScheduler*&&, std::__1::atomic<bool>*&&) thread:306\r\n    #4 0x10b3a2940 in std::__1::unique_ptr<std::__1::thread, std::__1::default_delete<std::__1::thread> > duckdb::make_unique<std::__1::thread, void (&)(duckdb::TaskScheduler*, std::__1::atomic<bool>*), duckdb::TaskScheduler*, std::__1::atomic<bool>*>(void (&)(duckdb::TaskScheduler*, std::__1::atomic<bool>*), duckdb::TaskScheduler*&&, std::__1::atomic<bool>*&&) helper.hpp:41\r\n    #5 0x10b39f603 in duckdb::TaskScheduler::SetThreadsInternal(int) task_scheduler.cpp:239\r\n    #6 0x10b3a1e94 in duckdb::TaskScheduler::SetThreads(int) task_scheduler.cpp:199\r\n    #7 0x10af300a6 in duckdb::DatabaseInstance::Initialize(char const*, duckdb::DBConfig*) database.cpp:178\r\n    #8 0x10af33b6d in duckdb::DuckDB::DuckDB(char const*, duckdb::DBConfig*) database.cpp:189\r\n    #9 0x10af33f28 in duckdb::DuckDB::DuckDB(char const*, duckdb::DBConfig*) database.cpp:188\r\n    #10 0x103e9e868 in std::__1::unique_ptr<duckdb::DuckDB, std::__1::default_delete<duckdb::DuckDB> > duckdb::make_unique<duckdb::DuckDB, char const*&, duckdb::DBConfig*>(char const*&, duckdb::DBConfig*&&) helper.hpp:41\r\n    #11 0x103e9d9a8 in sqlite3_open_v2 sqlite3_api_wrapper.cpp:108\r\n    #12 0x103d97e29 in open_db shell.c:14258\r\n    #13 0x103db32ba in do_meta_command shell.c:18373\r\n    #14 0x103dcd8cd in process_input shell.c:20095\r\n    #15 0x103d955c3 in main shell.c:20948\r\n    #16 0x11d6a852d in start+0x1cd (dyld:x86_64+0x552d)\r\n\r\nSUMMARY: AddressSanitizer: heap-buffer-overflow (libclang_rt.asan_osx_dynamic.dylib:x86_64h+0x48f1f) in __asan_memcpy+0x1af\r\nShadow bytes around the buggy address:\r\n  0x1c3400001fe0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\r\n  0x1c3400001ff0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\r\n  0x1c3400002000: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\r\n  0x1c3400002010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\r\n  0x1c3400002020: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\r\n=>0x1c3400002030: 00 00 00 00 00 00 00 00[fa]fa fa fa fa fa fa fa\r\n  0x1c3400002040: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\r\n  0x1c3400002050: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\r\n  0x1c3400002060: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\r\n  0x1c3400002070: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\r\n  0x1c3400002080: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\r\nShadow byte legend (one shadow byte represents 8 application bytes):\r\n  Addressable:           00\r\n  Partially addressable: 01 02 03 04 05 06 07 \r\n  Heap left redzone:       fa\r\n  Freed heap region:       fd\r\n  Stack left redzone:      f1\r\n  Stack mid redzone:       f2\r\n  Stack right redzone:     f3\r\n  Stack after return:      f5\r\n  Stack use after scope:   f8\r\n  Global redzone:          f9\r\n  Global init order:       f6\r\n  Poisoned by user:        f7\r\n  Container overflow:      fc\r\n  Array cookie:            ac\r\n  Intra object redzone:    bb\r\n  ASan internal:           fe\r\n  Left alloca redzone:     ca\r\n  Right alloca redzone:    cb\r\n==53229==ABORTING\r\n```\nArrays are not supported yet in JDBC but for sure it should not crash\nBy Arrays, I mean `VARCHAR[]` data type. I don't see any difference when I run my checks in CLI or use JDBC. JVM crash returns the same failure point as in CLI. When in-memory both JDBC and CLI work. Also, this is not reproducible on smaller datasets. \r\n\r\nOne other observation, when I try to export T2 (or T1) into csv or parquet, then open a new DB file and import the table back the issue is not reproduced. I mean I need to run all those SQLs to reproduce the issue. My assumption is that there is something with the DB file format handling. I don't know much about DuckDB internals therefore it's hard to guess.\r\n\nSeeing as it dies in ListExtract, I'd venture a guess and say this is related to #5020 \n@Tishj I confirm, it's the same error\r\n```\r\n$ ./duckdb                                                                                   \r\nduckdb(5130,0x12ae6d600) malloc: nano zone abandoned due to inability to preallocate reserved vm space.\r\nv0.5.2-dev1295 d3db91ffbf\r\nEnter \".help\" for usage hints.\r\nConnected to a transient in-memory database.\r\nUse \".open FILENAME\" to reopen on a persistent database.\r\nD .open segfault.duckdb\r\nD select ids[1] as id from test;\r\n=================================================================\r\n==5130==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x62000001ffc0 at pc 0x00011ba24f20 bp 0x7ff7bdd3b130 sp 0x7ff7bdd3a8f8\r\nREAD of size 16 at 0x62000001ffc0 thread T0\r\n    #0 0x11ba24f1f in __asan_memcpy+0x1af (libclang_rt.asan_osx_dynamic.dylib:x86_64h+0x48f1f)\r\n    #1 0x1056e1b7c in void duckdb::ListExtractTemplate<duckdb::string_t, true, false>(unsigned long long, duckdb::UnifiedVectorFormat&, duckdb::UnifiedVectorFormat&, duckdb::Vector&, unsigned long long, duckdb::Vector&) list_extract.cpp:66\r\n    #2 0x1056d2938 in duckdb::ExecuteListExtractInternal(unsigned long long, duckdb::UnifiedVectorFormat&, duckdb::UnifiedVectorFormat&, duckdb::Vector&, unsigned long long, duckdb::Vector&) list_extract.cpp:118\r\n    #3 0x1056d1206 in duckdb::ExecuteListExtract(duckdb::Vector&, duckdb::Vector&, duckdb::Vector&, unsigned long long) list_extract.cpp:156\r\n    #4 0x1055e26cc in duckdb::ListExtractFunction(duckdb::DataChunk&, duckdb::ExpressionState&, duckdb::Vector&) list_extract.cpp:184\r\n.. skipped\r\n```\r\n\n[jvm_crash3.csv](https://github.com/duckdb/duckdb/files/9892727/jvm_crash3.csv)\r\n\nLatest master:\r\n```\r\n=================================================================\r\n==53229==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x61a0000101c0 at pc 0x00011d7a3f20 bp 0x700006c459d0 sp 0x700006c45198\r\nREAD of size 16 at 0x61a0000101c0 thread T3\r\n    #0 0x11d7a3f1f in __asan_memcpy+0x1af (libclang_rt.asan_osx_dynamic.dylib:x86_64h+0x48f1f)\r\n    #1 0x107297b7c in void duckdb::ListExtractTemplate<duckdb::string_t, true, false>(unsigned long long, duckdb::UnifiedVectorFormat&, duckdb::UnifiedVectorFormat&, duckdb::Vector&, unsigned long long, duckdb::Vector&) list_extract.cpp:66\r\n    #2 0x107288938 in duckdb::ExecuteListExtractInternal(unsigned long long, duckdb::UnifiedVectorFormat&, duckdb::UnifiedVectorFormat&, duckdb::Vector&, unsigned long long, duckdb::Vector&) list_extract.cpp:118\r\n    #3 0x107287206 in duckdb::ExecuteListExtract(duckdb::Vector&, duckdb::Vector&, duckdb::Vector&, unsigned long long) list_extract.cpp:156\r\n    #4 0x1071986cc in duckdb::ListExtractFunction(duckdb::DataChunk&, duckdb::ExpressionState&, duckdb::Vector&) list_extract.cpp:184\r\n    #5 0x10751212e in decltype(static_cast<void (*&>(fp)(static_cast<duckdb::DataChunk&>(fp0), static_cast<duckdb::ExpressionState&>(fp0), static_cast<duckdb::Vector&>(fp0))) std::__1::__invoke<void (*&)(duckdb::DataChunk&, duckdb::ExpressionState&, duckdb::Vector&), duckdb::DataChunk&, duckdb::ExpressionState&, duckdb::Vector&>(void (*&)(duckdb::DataChunk&, duckdb::ExpressionState&, duckdb::Vector&), duckdb::DataChunk&, duckdb::ExpressionState&, duckdb::Vector&) type_traits:3918\r\n    #6 0x107511eb4 in void std::__1::__invoke_void_return_wrapper<void, true>::__call<void (*&)(duckdb::DataChunk&, duckdb::ExpressionState&, duckdb::Vector&), duckdb::DataChunk&, duckdb::ExpressionState&, duckdb::Vector&>(void (*&)(duckdb::DataChunk&, duckdb::ExpressionState&, duckdb::Vector&), duckdb::DataChunk&, duckdb::ExpressionState&, duckdb::Vector&) invoke.h:61\r\n    #7 0x107511b8c in std::__1::__function::__alloc_func<void (*)(duckdb::DataChunk&, duckdb::ExpressionState&, duckdb::Vector&), std::__1::allocator<void (*)(duckdb::DataChunk&, duckdb::ExpressionState&, duckdb::Vector&)>, void (duckdb::DataChunk&, duckdb::ExpressionState&, duckdb::Vector&)>::operator()(duckdb::DataChunk&, duckdb::ExpressionState&, duckdb::Vector&) function.h:178\r\n    #8 0x10750b6e0 in std::__1::__function::__func<void (*)(duckdb::DataChunk&, duckdb::ExpressionState&, duckdb::Vector&), std::__1::allocator<void (*)(duckdb::DataChunk&, duckdb::ExpressionState&, duckdb::Vector&)>, void (duckdb::DataChunk&, duckdb::ExpressionState&, duckdb::Vector&)>::operator()(duckdb::DataChunk&, duckdb::ExpressionState&, duckdb::Vector&) function.h:352\r\n    #9 0x109d6f150 in std::__1::__function::__value_func<void (duckdb::DataChunk&, duckdb::ExpressionState&, duckdb::Vector&)>::operator()(duckdb::DataChunk&, duckdb::ExpressionState&, duckdb::Vector&) const function.h:505\r\n    #10 0x109956540 in std::__1::function<void (duckdb::DataChunk&, duckdb::ExpressionState&, duckdb::Vector&)>::operator()(duckdb::DataChunk&, duckdb::ExpressionState&, duckdb::Vector&) const function.h:1182\r\n    #11 0x109955b6f in duckdb::ExpressionExecutor::Execute(duckdb::BoundFunctionExpression const&, duckdb::ExpressionState*, duckdb::SelectionVector const*, unsigned long long, duckdb::Vector&) execute_function.cpp:79\r\n    #12 0x10a9835c2 in duckdb::ExpressionExecutor::Execute(duckdb::Expression const&, duckdb::ExpressionState*, duckdb::SelectionVector const*, unsigned long long, duckdb::Vector&) expression_executor.cpp:179\r\n    #13 0x10a9809b2 in duckdb::ExpressionExecutor::ExecuteExpression(unsigned long long, duckdb::Vector&) expression_executor.cpp:78\r\n    #14 0x10a97ff08 in duckdb::ExpressionExecutor::Execute(duckdb::DataChunk*, duckdb::DataChunk&) expression_executor.cpp:49\r\n    #15 0x10bb0be34 in duckdb::ExpressionExecutor::Execute(duckdb::DataChunk&, duckdb::DataChunk&) expression_executor.hpp:42\r\n    #16 0x10a5c9de0 in duckdb::PhysicalProjection::Execute(duckdb::ExecutionContext&, duckdb::DataChunk&, duckdb::DataChunk&, duckdb::GlobalOperatorState&, duckdb::OperatorState&) const physical_projection.cpp:30\r\n    #17 0x10b399be3 in duckdb::PipelineExecutor::Execute(duckdb::DataChunk&, duckdb::DataChunk&, unsigned long long) pipeline_executor.cpp:319\r\n    #18 0x10b397105 in duckdb::PipelineExecutor::ExecutePushInternal(duckdb::DataChunk&, unsigned long long) pipeline_executor.cpp:92\r\n    #19 0x10b395c10 in duckdb::PipelineExecutor::Execute(unsigned long long) pipeline_executor.cpp:52\r\n    #20 0x10b398b10 in duckdb::PipelineExecutor::Execute() pipeline_executor.cpp:66\r\n    #21 0x10b44c5b6 in duckdb::PipelineTask::ExecuteTask(duckdb::TaskExecutionMode) pipeline.cpp:43\r\n    #22 0x10b35ec85 in duckdb::ExecutorTask::Execute(duckdb::TaskExecutionMode) executor_task.cpp:17\r\n    #23 0x10b3a0630 in duckdb::TaskScheduler::ExecuteForever(std::__1::atomic<bool>*) task_scheduler.cpp:135\r\n    #24 0x10b3a2a08 in duckdb::ThreadExecuteTasks(duckdb::TaskScheduler*, std::__1::atomic<bool>*) task_scheduler.cpp:185\r\n    #25 0x10b4a8f42 in decltype(static_cast<void (*>(fp)(static_cast<duckdb::TaskScheduler*>(fp0), static_cast<std::__1::atomic<bool>*>(fp0))) std::__1::__invoke<void (*)(duckdb::TaskScheduler*, std::__1::atomic<bool>*), duckdb::TaskScheduler*, std::__1::atomic<bool>*>(void (*&&)(duckdb::TaskScheduler*, std::__1::atomic<bool>*), duckdb::TaskScheduler*&&, std::__1::atomic<bool>*&&) type_traits:3918\r\n    #26 0x10b4a8d38 in void std::__1::__thread_execute<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, void (*)(duckdb::TaskScheduler*, std::__1::atomic<bool>*), duckdb::TaskScheduler*, std::__1::atomic<bool>*, 2ul, 3ul>(std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, void (*)(duckdb::TaskScheduler*, std::__1::atomic<bool>*), duckdb::TaskScheduler*, std::__1::atomic<bool>*>&, std::__1::__tuple_indices<2ul, 3ul>) thread:287\r\n    #27 0x10b4a62d6 in void* std::__1::__thread_proxy<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, void (*)(duckdb::TaskScheduler*, std::__1::atomic<bool>*), duckdb::TaskScheduler*, std::__1::atomic<bool>*> >(void*) thread:298\r\n    #28 0x7ff8009504e0 in _pthread_start+0x7c (libsystem_pthread.dylib:x86_64+0x64e0)\r\n    #29 0x7ff80094bf6a in thread_start+0xe (libsystem_pthread.dylib:x86_64+0x1f6a)\r\n\r\n0x61a0000101c0 is located 0 bytes to the right of 1344-byte region [0x61a00000fc80,0x61a0000101c0)\r\nallocated by thread T3 here:\r\n    #0 0x11d7b72bd in wrap__Znam+0x7d (libclang_rt.asan_osx_dynamic.dylib:x86_64h+0x5c2bd)\r\n    #1 0x108d11df4 in duckdb::VectorBuffer::VectorBuffer(unsigned long long) vector_buffer.hpp:57\r\n    #2 0x108d11410 in duckdb::VectorBuffer::VectorBuffer(unsigned long long) vector_buffer.hpp:55\r\n    #3 0x108d11247 in std::__1::__shared_ptr_emplace<duckdb::VectorBuffer, std::__1::allocator<duckdb::VectorBuffer> >::__shared_ptr_emplace<unsigned long long>(std::__1::allocator<duckdb::VectorBuffer>, unsigned long long&&) shared_ptr.h:298\r\n    #4 0x108d10530 in std::__1::__shared_ptr_emplace<duckdb::VectorBuffer, std::__1::allocator<duckdb::VectorBuffer> >::__shared_ptr_emplace<unsigned long long>(std::__1::allocator<duckdb::VectorBuffer>, unsigned long long&&) shared_ptr.h:292\r\n    #5 0x108d10112 in std::__1::shared_ptr<duckdb::VectorBuffer> std::__1::allocate_shared<duckdb::VectorBuffer, std::__1::allocator<duckdb::VectorBuffer>, unsigned long long, void>(std::__1::allocator<duckdb::VectorBuffer> const&, unsigned long long&&) shared_ptr.h:1106\r\n    #6 0x108d0fe7a in std::__1::shared_ptr<duckdb::VectorBuffer> std::__1::make_shared<duckdb::VectorBuffer, unsigned long long, void>(unsigned long long&&) shared_ptr.h:1115\r\n    #7 0x108b1001f in std::__1::shared_ptr<duckdb::VectorBuffer> duckdb::make_buffer<duckdb::VectorBuffer, unsigned long long>(unsigned long long&&) types.hpp:207\r\n    #8 0x108b0fef7 in duckdb::VectorBuffer::CreateStandardVector(duckdb::PhysicalType, unsigned long long) vector_buffer.cpp:12\r\n    #9 0x108b102b5 in duckdb::VectorBuffer::CreateStandardVector(duckdb::LogicalType const&, unsigned long long) vector_buffer.cpp:24\r\n    #10 0x108b15825 in duckdb::Vector::Initialize(bool, unsigned long long) vector.cpp:226\r\n    #11 0x108b1510c in duckdb::Vector::Vector(duckdb::LogicalType, bool, bool, unsigned long long) vector.cpp:28\r\n    #12 0x108b15da3 in duckdb::Vector::Vector(duckdb::LogicalType, bool, bool, unsigned long long) vector.cpp:26\r\n    #13 0x108aae3fd in duckdb::Vector::Vector(duckdb::LogicalType, unsigned long long) vector.cpp:32\r\n    #14 0x10b632903 in std::__1::__shared_ptr_emplace<duckdb::Vector, std::__1::allocator<duckdb::Vector> >::__shared_ptr_emplace<duckdb::LogicalType&, unsigned int&>(std::__1::allocator<duckdb::Vector>, duckdb::LogicalType&, unsigned int&) shared_ptr.h:298\r\n    #15 0x10b631b08 in std::__1::__shared_ptr_emplace<duckdb::Vector, std::__1::allocator<duckdb::Vector> >::__shared_ptr_emplace<duckdb::LogicalType&, unsigned int&>(std::__1::allocator<duckdb::Vector>, duckdb::LogicalType&, unsigned int&) shared_ptr.h:292\r\n    #16 0x10b6316d5 in std::__1::shared_ptr<duckdb::Vector> std::__1::allocate_shared<duckdb::Vector, std::__1::allocator<duckdb::Vector>, duckdb::LogicalType&, unsigned int&, void>(std::__1::allocator<duckdb::Vector> const&, duckdb::LogicalType&, unsigned int&) shared_ptr.h:1106\r\n    #17 0x10b6312ef in std::__1::shared_ptr<duckdb::Vector> std::__1::make_shared<duckdb::Vector, duckdb::LogicalType&, unsigned int&, void>(duckdb::LogicalType&, unsigned int&) shared_ptr.h:1115\r\n    #18 0x10b4e7cc7 in std::__1::shared_ptr<duckdb::Vector> duckdb::make_buffer<duckdb::Vector, duckdb::LogicalType&, unsigned int&>(duckdb::LogicalType&, unsigned int&) types.hpp:207\r\n    #19 0x10b4e67c7 in duckdb::DictionaryCompressionStorage::StringInitScan(duckdb::ColumnSegment&) dictionary_compression.cpp:450\r\n    #20 0x10b7d4eb1 in duckdb::ColumnSegment::InitializeScan(duckdb::ColumnScanState&) column_segment.cpp:85\r\n    #21 0x10b7de5c7 in duckdb::ColumnData::ScanVector(duckdb::ColumnScanState&, duckdb::Vector&, unsigned long long) column_data.cpp:97\r\n    #22 0x10b7eac74 in duckdb::ColumnData::ScanCount(duckdb::ColumnScanState&, duckdb::Vector&, unsigned long long) column_data.cpp:192\r\n    #23 0x10b8b35bc in duckdb::StandardColumnData::ScanCount(duckdb::ColumnScanState&, duckdb::Vector&, unsigned long long) standard_column_data.cpp:78\r\n    #24 0x10b82ecf3 in duckdb::ListColumnData::ScanCount(duckdb::ColumnScanState&, duckdb::Vector&, unsigned long long) list_column_data.cpp:119\r\n    #25 0x10b82d121 in duckdb::ListColumnData::Scan(duckdb::TransactionData, unsigned long long, duckdb::ColumnScanState&, duckdb::Vector&) list_column_data.cpp:78\r\n    #26 0x10b862b02 in void duckdb::RowGroup::TemplatedScan<(duckdb::TableScanType)0>(duckdb::TransactionData, duckdb::RowGroupScanState&, duckdb::DataChunk&) row_group.cpp:369\r\n    #27 0x10b8615df in duckdb::RowGroup::Scan(duckdb::TransactionData, duckdb::RowGroupScanState&, duckdb::DataChunk&) row_group.cpp:453\r\n    #28 0x10b895247 in duckdb::CollectionScanState::Scan(duckdb::Transaction&, duckdb::DataChunk&) scan_state.cpp:90\r\n    #29 0x10baeb3bb in duckdb::DataTable::Scan(duckdb::Transaction&, duckdb::DataChunk&, duckdb::TableScanState&) data_table.cpp:226\r\n\r\nThread T3 created by T0 here:\r\n    #0 0x11d79f93c in wrap_pthread_create+0x5c (libclang_rt.asan_osx_dynamic.dylib:x86_64h+0x4493c)\r\n    #1 0x10b4a60d0 in std::__1::__libcpp_thread_create(_opaque_pthread_t**, void* (*)(void*), void*) __threading_support:421\r\n    #2 0x10b4a5a5f in std::__1::thread::thread<void (&)(duckdb::TaskScheduler*, std::__1::atomic<bool>*), duckdb::TaskScheduler*, std::__1::atomic<bool>*, void>(void (&)(duckdb::TaskScheduler*, std::__1::atomic<bool>*), duckdb::TaskScheduler*&&, std::__1::atomic<bool>*&&) thread:314\r\n    #3 0x10b4a54e0 in std::__1::thread::thread<void (&)(duckdb::TaskScheduler*, std::__1::atomic<bool>*), duckdb::TaskScheduler*, std::__1::atomic<bool>*, void>(void (&)(duckdb::TaskScheduler*, std::__1::atomic<bool>*), duckdb::TaskScheduler*&&, std::__1::atomic<bool>*&&) thread:306\r\n    #4 0x10b3a2940 in std::__1::unique_ptr<std::__1::thread, std::__1::default_delete<std::__1::thread> > duckdb::make_unique<std::__1::thread, void (&)(duckdb::TaskScheduler*, std::__1::atomic<bool>*), duckdb::TaskScheduler*, std::__1::atomic<bool>*>(void (&)(duckdb::TaskScheduler*, std::__1::atomic<bool>*), duckdb::TaskScheduler*&&, std::__1::atomic<bool>*&&) helper.hpp:41\r\n    #5 0x10b39f603 in duckdb::TaskScheduler::SetThreadsInternal(int) task_scheduler.cpp:239\r\n    #6 0x10b3a1e94 in duckdb::TaskScheduler::SetThreads(int) task_scheduler.cpp:199\r\n    #7 0x10af300a6 in duckdb::DatabaseInstance::Initialize(char const*, duckdb::DBConfig*) database.cpp:178\r\n    #8 0x10af33b6d in duckdb::DuckDB::DuckDB(char const*, duckdb::DBConfig*) database.cpp:189\r\n    #9 0x10af33f28 in duckdb::DuckDB::DuckDB(char const*, duckdb::DBConfig*) database.cpp:188\r\n    #10 0x103e9e868 in std::__1::unique_ptr<duckdb::DuckDB, std::__1::default_delete<duckdb::DuckDB> > duckdb::make_unique<duckdb::DuckDB, char const*&, duckdb::DBConfig*>(char const*&, duckdb::DBConfig*&&) helper.hpp:41\r\n    #11 0x103e9d9a8 in sqlite3_open_v2 sqlite3_api_wrapper.cpp:108\r\n    #12 0x103d97e29 in open_db shell.c:14258\r\n    #13 0x103db32ba in do_meta_command shell.c:18373\r\n    #14 0x103dcd8cd in process_input shell.c:20095\r\n    #15 0x103d955c3 in main shell.c:20948\r\n    #16 0x11d6a852d in start+0x1cd (dyld:x86_64+0x552d)\r\n\r\nSUMMARY: AddressSanitizer: heap-buffer-overflow (libclang_rt.asan_osx_dynamic.dylib:x86_64h+0x48f1f) in __asan_memcpy+0x1af\r\nShadow bytes around the buggy address:\r\n  0x1c3400001fe0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\r\n  0x1c3400001ff0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\r\n  0x1c3400002000: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\r\n  0x1c3400002010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\r\n  0x1c3400002020: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\r\n=>0x1c3400002030: 00 00 00 00 00 00 00 00[fa]fa fa fa fa fa fa fa\r\n  0x1c3400002040: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\r\n  0x1c3400002050: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\r\n  0x1c3400002060: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\r\n  0x1c3400002070: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\r\n  0x1c3400002080: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\r\nShadow byte legend (one shadow byte represents 8 application bytes):\r\n  Addressable:           00\r\n  Partially addressable: 01 02 03 04 05 06 07 \r\n  Heap left redzone:       fa\r\n  Freed heap region:       fd\r\n  Stack left redzone:      f1\r\n  Stack mid redzone:       f2\r\n  Stack right redzone:     f3\r\n  Stack after return:      f5\r\n  Stack use after scope:   f8\r\n  Global redzone:          f9\r\n  Global init order:       f6\r\n  Poisoned by user:        f7\r\n  Container overflow:      fc\r\n  Array cookie:            ac\r\n  Intra object redzone:    bb\r\n  ASan internal:           fe\r\n  Left alloca redzone:     ca\r\n  Right alloca redzone:    cb\r\n==53229==ABORTING\r\n```\nArrays are not supported yet in JDBC but for sure it should not crash\nBy Arrays, I mean `VARCHAR[]` data type. I don't see any difference when I run my checks in CLI or use JDBC. JVM crash returns the same failure point as in CLI. When in-memory both JDBC and CLI work. Also, this is not reproducible on smaller datasets. \r\n\r\nOne other observation, when I try to export T2 (or T1) into csv or parquet, then open a new DB file and import the table back the issue is not reproduced. I mean I need to run all those SQLs to reproduce the issue. My assumption is that there is something with the DB file format handling. I don't know much about DuckDB internals therefore it's hard to guess.\r\n\nSeeing as it dies in ListExtract, I'd venture a guess and say this is related to #5020 \n@Tishj I confirm, it's the same error\r\n```\r\n$ ./duckdb                                                                                   \r\nduckdb(5130,0x12ae6d600) malloc: nano zone abandoned due to inability to preallocate reserved vm space.\r\nv0.5.2-dev1295 d3db91ffbf\r\nEnter \".help\" for usage hints.\r\nConnected to a transient in-memory database.\r\nUse \".open FILENAME\" to reopen on a persistent database.\r\nD .open segfault.duckdb\r\nD select ids[1] as id from test;\r\n=================================================================\r\n==5130==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x62000001ffc0 at pc 0x00011ba24f20 bp 0x7ff7bdd3b130 sp 0x7ff7bdd3a8f8\r\nREAD of size 16 at 0x62000001ffc0 thread T0\r\n    #0 0x11ba24f1f in __asan_memcpy+0x1af (libclang_rt.asan_osx_dynamic.dylib:x86_64h+0x48f1f)\r\n    #1 0x1056e1b7c in void duckdb::ListExtractTemplate<duckdb::string_t, true, false>(unsigned long long, duckdb::UnifiedVectorFormat&, duckdb::UnifiedVectorFormat&, duckdb::Vector&, unsigned long long, duckdb::Vector&) list_extract.cpp:66\r\n    #2 0x1056d2938 in duckdb::ExecuteListExtractInternal(unsigned long long, duckdb::UnifiedVectorFormat&, duckdb::UnifiedVectorFormat&, duckdb::Vector&, unsigned long long, duckdb::Vector&) list_extract.cpp:118\r\n    #3 0x1056d1206 in duckdb::ExecuteListExtract(duckdb::Vector&, duckdb::Vector&, duckdb::Vector&, unsigned long long) list_extract.cpp:156\r\n    #4 0x1055e26cc in duckdb::ListExtractFunction(duckdb::DataChunk&, duckdb::ExpressionState&, duckdb::Vector&) list_extract.cpp:184\r\n.. skipped\r\n```\r\n",
  "created_at": "2022-10-31T20:53:22Z"
}