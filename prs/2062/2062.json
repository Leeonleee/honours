{
  "repo": "duckdb/duckdb",
  "pull_number": 2062,
  "instance_id": "duckdb__duckdb-2062",
  "issue_numbers": [
    "2057"
  ],
  "base_commit": "0cd04f9a5bedc920863e67c04952c48b335e3fde",
  "patch": "diff --git a/src/common/value_operations/comparison_operations.cpp b/src/common/value_operations/comparison_operations.cpp\nindex 0afc8708b85b..8e65df6367b1 100644\n--- a/src/common/value_operations/comparison_operations.cpp\n+++ b/src/common/value_operations/comparison_operations.cpp\n@@ -169,11 +169,8 @@ static bool TemplatedBooleanOperation(const Value &left, const Value &right) {\n }\n \n bool ValueOperations::Equals(const Value &left, const Value &right) {\n-\tif (left.is_null && right.is_null) {\n-\t\treturn true;\n-\t}\n-\tif (left.is_null != right.is_null) {\n-\t\treturn false;\n+\tif (left.is_null || right.is_null) {\n+\t\tthrow InternalException(\"Comparison on NULL values\");\n \t}\n \treturn TemplatedBooleanOperation<duckdb::Equals>(left, right);\n }\n@@ -183,23 +180,15 @@ bool ValueOperations::NotEquals(const Value &left, const Value &right) {\n }\n \n bool ValueOperations::GreaterThan(const Value &left, const Value &right) {\n-\tif (left.is_null && right.is_null) {\n-\t\treturn false;\n-\t} else if (right.is_null) {\n-\t\treturn true;\n-\t} else if (left.is_null) {\n-\t\treturn false;\n+\tif (left.is_null || right.is_null) {\n+\t\tthrow InternalException(\"Comparison on NULL values\");\n \t}\n \treturn TemplatedBooleanOperation<duckdb::GreaterThan>(left, right);\n }\n \n bool ValueOperations::GreaterThanEquals(const Value &left, const Value &right) {\n-\tif (left.is_null && right.is_null) {\n-\t\treturn true;\n-\t} else if (right.is_null) {\n-\t\treturn true;\n-\t} else if (left.is_null) {\n-\t\treturn false;\n+\tif (left.is_null || right.is_null) {\n+\t\tthrow InternalException(\"Comparison on NULL values\");\n \t}\n \treturn TemplatedBooleanOperation<duckdb::GreaterThanEquals>(left, right);\n }\ndiff --git a/src/optimizer/filter_combiner.cpp b/src/optimizer/filter_combiner.cpp\nindex 82980b520e20..6d5eeca53b14 100644\n--- a/src/optimizer/filter_combiner.cpp\n+++ b/src/optimizer/filter_combiner.cpp\n@@ -506,27 +506,36 @@ TableFilterSet FilterCombiner::GenerateTableScanFilters(vector<idx_t> &column_id\n \t\t\t\tcontinue;\n \t\t\t}\n \t\t\tauto &fst_const_value_expr = (BoundConstantExpression &)*func.children[1].get();\n+\n \t\t\t//! Check if values are consecutive, if yes transform them to >= <= (only for integers)\n+\t\t\t// e.g. if we have x IN (1, 2, 3, 4, 5) we transform this into x >= 1 AND x <= 5\n \t\t\tif (!fst_const_value_expr.value.type().IsIntegral()) {\n \t\t\t\tcontinue;\n \t\t\t}\n \n+\t\t\tbool can_simplify_in_clause = true;\n \t\t\tfor (idx_t i = 1; i < func.children.size(); i++) {\n \t\t\t\tauto &const_value_expr = (BoundConstantExpression &)*func.children[i].get();\n+\t\t\t\tif (const_value_expr.value.is_null) {\n+\t\t\t\t\tcan_simplify_in_clause = false;\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n \t\t\t\tin_values.push_back(const_value_expr.value);\n \t\t\t}\n+\t\t\tif (!can_simplify_in_clause || in_values.empty()) {\n+\t\t\t\tcontinue;\n+\t\t\t}\n \t\t\tValue one(1);\n \n \t\t\tsort(in_values.begin(), in_values.end());\n \n-\t\t\tbool is_consecutive = true;\n \t\t\tfor (idx_t in_val_idx = 1; in_val_idx < in_values.size(); in_val_idx++) {\n \t\t\t\tif (in_values[in_val_idx] - in_values[in_val_idx - 1] > one || in_values[in_val_idx - 1].is_null) {\n-\t\t\t\t\tis_consecutive = false;\n+\t\t\t\t\tcan_simplify_in_clause = false;\n \t\t\t\t\tbreak;\n \t\t\t\t}\n \t\t\t}\n-\t\t\tif (!is_consecutive || in_values.empty()) {\n+\t\t\tif (!can_simplify_in_clause) {\n \t\t\t\tcontinue;\n \t\t\t}\n \t\t\tauto lower_bound =\ndiff --git a/src/optimizer/rule/move_constants.cpp b/src/optimizer/rule/move_constants.cpp\nindex fd7d8026692c..d97ab1ae4fc7 100644\n--- a/src/optimizer/rule/move_constants.cpp\n+++ b/src/optimizer/rule/move_constants.cpp\n@@ -36,6 +36,9 @@ unique_ptr<Expression> MoveConstantsRule::Apply(LogicalOperator &op, vector<Expr\n \tif (!arithmetic->return_type.IsNumeric()) {\n \t\treturn nullptr;\n \t}\n+\tif (inner_constant->value.is_null || outer_constant->value.is_null) {\n+\t\treturn make_unique<BoundConstantExpression>(Value(comparison->return_type));\n+\t}\n \n \tint arithmetic_child_index = arithmetic->children[0].get() == inner_constant ? 1 : 0;\n \tauto &op_type = arithmetic->function.name;\ndiff --git a/src/optimizer/statistics/expression/propagate_constant.cpp b/src/optimizer/statistics/expression/propagate_constant.cpp\nindex c2e9a0f53fdd..d5f544efca62 100644\n--- a/src/optimizer/statistics/expression/propagate_constant.cpp\n+++ b/src/optimizer/statistics/expression/propagate_constant.cpp\n@@ -24,8 +24,10 @@ unique_ptr<BaseStatistics> StatisticsPropagator::StatisticsFromValue(const Value\n \tcase PhysicalType::VARCHAR: {\n \t\tauto result = make_unique<StringStatistics>(input.type());\n \t\tresult->validity_stats = make_unique<ValidityStatistics>(input.is_null, !input.is_null);\n-\t\tstring_t str(input.str_value.c_str(), input.str_value.size());\n-\t\tresult->Update(str);\n+\t\tif (!input.is_null) {\n+\t\t\tstring_t str(input.str_value.c_str(), input.str_value.size());\n+\t\t\tresult->Update(str);\n+\t\t}\n \t\treturn move(result);\n \t}\n \tcase PhysicalType::STRUCT: {\ndiff --git a/src/parser/expression/constant_expression.cpp b/src/parser/expression/constant_expression.cpp\nindex 187830730881..6c553e5d18b3 100644\n--- a/src/parser/expression/constant_expression.cpp\n+++ b/src/parser/expression/constant_expression.cpp\n@@ -15,7 +15,7 @@ string ConstantExpression::ToString() const {\n }\n \n bool ConstantExpression::Equals(const ConstantExpression *a, const ConstantExpression *b) {\n-\treturn a->value == b->value;\n+\treturn !ValueOperations::DistinctFrom(a->value, b->value);\n }\n \n hash_t ConstantExpression::Hash() const {\ndiff --git a/src/planner/expression/bound_constant_expression.cpp b/src/planner/expression/bound_constant_expression.cpp\nindex c0f295dba3d8..e7c13618181f 100644\n--- a/src/planner/expression/bound_constant_expression.cpp\n+++ b/src/planner/expression/bound_constant_expression.cpp\n@@ -19,7 +19,7 @@ bool BoundConstantExpression::Equals(const BaseExpression *other_p) const {\n \t\treturn false;\n \t}\n \tauto other = (BoundConstantExpression *)other_p;\n-\treturn value == other->value;\n+\treturn !ValueOperations::DistinctFrom(value, other->value);\n }\n \n hash_t BoundConstantExpression::Hash() const {\ndiff --git a/src/storage/statistics/numeric_statistics.cpp b/src/storage/statistics/numeric_statistics.cpp\nindex b8a17bf4ec05..f9697a3b0543 100644\n--- a/src/storage/statistics/numeric_statistics.cpp\n+++ b/src/storage/statistics/numeric_statistics.cpp\n@@ -91,15 +91,22 @@ NumericStatistics::NumericStatistics(LogicalType type_p, Value min_p, Value max_\n void NumericStatistics::Merge(const BaseStatistics &other_p) {\n \tBaseStatistics::Merge(other_p);\n \tauto &other = (const NumericStatistics &)other_p;\n-\tif (other.min < min) {\n+\tif (other.min.is_null || min.is_null) {\n+\t\tmin.is_null = true;\n+\t} else if (other.min < min) {\n \t\tmin = other.min;\n \t}\n-\tif (other.max > max) {\n+\tif (other.max.is_null || max.is_null) {\n+\t\tmax.is_null = true;\n+\t} else if (other.max > max) {\n \t\tmax = other.max;\n \t}\n }\n \n FilterPropagateResult NumericStatistics::CheckZonemap(ExpressionType comparison_type, const Value &constant) {\n+\tif (min.is_null || max.is_null) {\n+\t\treturn FilterPropagateResult::NO_PRUNING_POSSIBLE;\n+\t}\n \tswitch (comparison_type) {\n \tcase ExpressionType::COMPARE_EQUAL:\n \t\tif (constant == min && constant == max) {\n",
  "test_patch": "diff --git a/test/optimizer/table_filter_pushdown.test b/test/optimizer/table_filter_pushdown.test\nindex ede55427a8e6..72e0489341b2 100644\n--- a/test/optimizer/table_filter_pushdown.test\n+++ b/test/optimizer/table_filter_pushdown.test\n@@ -5,6 +5,9 @@\n statement ok\n CREATE TABLE integers(i integer, j integer, k integer)\n \n+statement ok\n+INSERT INTO integers VALUES (5, 5, 5), (10, 10, 10)\n+\n statement ok\n PRAGMA explain_output = OPTIMIZED_ONLY;\n \n@@ -27,43 +30,52 @@ EXPLAIN SELECT k FROM integers where j = 5 and i = 10\n logical_opt\t<!REGEX>:.*FILTER.*\n \n # test different data types\n+foreach type <numeric>\n+\n statement ok\n-CREATE TABLE tablinho_numbers(i1 TINYINT, j1 TINYINT, k1 TINYINT, i2 SMALLINT, j2 SMALLINT, k2 SMALLINT, i3 INTEGER, j3 INTEGER, k3 INTEGER, i4 BIGINT, j4 BIGINT, k4 BIGINT, i5 FLOAT, j5 FLOAT, k5 FLOAT, i6 DOUBLE, j6 DOUBLE, k6 DOUBLE)\n+CREATE TABLE tablinho_numbers(i ${type}, j ${type}, k ${type})\n \n-loop i 1 7\n+statement ok\n+INSERT INTO tablinho_numbers VALUES (0, 0, 0), (1, 1, 1), (2, 2, 2)\n \n # simple filters are pushed down\n query II\n-EXPLAIN SELECT k${i} FROM tablinho_numbers where j${i} = 1\n+EXPLAIN SELECT k FROM tablinho_numbers where j = 1\n ----\n logical_opt\t<!REGEX>:.*FILTER.*\n \n query II\n-EXPLAIN SELECT k${i} FROM tablinho_numbers where j${i} > 1\n+EXPLAIN SELECT k FROM tablinho_numbers where j > 1\n ----\n logical_opt\t<!REGEX>:.*FILTER.*\n \n query II\n-EXPLAIN SELECT k${i} FROM tablinho_numbers where j${i} >= 1\n+EXPLAIN SELECT k FROM tablinho_numbers where j >= 1\n ----\n logical_opt\t<!REGEX>:.*FILTER.*\n \n query II\n-EXPLAIN SELECT k${i} FROM tablinho_numbers where j${i} < 1\n+EXPLAIN SELECT k FROM tablinho_numbers where j < 1\n ----\n logical_opt\t<!REGEX>:.*FILTER.*\n \n query II\n-EXPLAIN SELECT k${i} FROM tablinho_numbers where j${i} <= 1\n+EXPLAIN SELECT k FROM tablinho_numbers where j <= 1\n ----\n logical_opt\t<!REGEX>:.*FILTER.*\n \n+statement ok\n+DROP TABLE tablinho_numbers\n+\n endloop\n \n # pushdown string\n statement ok\n CREATE TABLE tablinho(i varchar)\n \n+statement ok\n+INSERT INTO tablinho VALUES ('a'), ('bla'), ('c')\n+\n # simple filters are pushed down\n query II\n EXPLAIN SELECT i FROM tablinho where i = 'bla'\n",
  "problem_statement": "WHERE clauses not working with parquet files\n**What does happen?**\r\nI am querying a parquet file.\r\nSELECT *, SELECT COUNT(*), GROUP BY work fine.\r\nBut when I use a WHERE clause the query always returns empty.\r\n\r\n**What should happen?**\r\nThe WHERE filter should be applied.\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior. Bonus points if those are only SQL queries.\r\n\r\nIt is hard to share the dataset.\r\n\r\n```\r\nselect item_id, region_id, metric_id from 'data.parquet' LIMIT 10\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 item_id \u2502 region_id \u2502 metric_id \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 1       \u2502 0         \u2502 11078     \u2502\r\n\u2502 1       \u2502 1001      \u2502 11078     \u2502\r\n\u2502 1       \u2502 1001      \u2502 20032     \u2502\r\n\u2502 1       \u2502 0         \u2502 20032     \u2502\r\n\u2502 1       \u2502 0         \u2502 20032     \u2502\r\n\u2502 1       \u2502 0         \u2502 20032     \u2502\r\n\u2502 1       \u2502 1001      \u2502 20032     \u2502\r\n\u2502 1       \u2502 1001      \u2502 20032     \u2502\r\n\u2502 1       \u2502 1001      \u2502 20032     \u2502\r\n\u2502 1       \u2502 1001      \u2502 20032     \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n```\r\n\r\n```\r\nselect item_id, region_id, metric_id from 'data.parquet' LIMIT 10\r\n```\r\nreturns nothing.\r\n\r\n**Environment (please complete the following information):**\r\n - OS: Darwin Kernel Version 20.5.0: Sat May  8 05:10:33 PDT 2021; root:xnu-7195.121.3~9/RELEASE_X86_64 x86_64\r\n - v0.2.7 8bc050d05\r\n\r\n**Before submitting**\r\n- [X] Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\r\n- [X] Have you tried this on the latest `master` branch? In case you cannot compile, you may find some binaries here: https://github.com/duckdb/duckdb/releases/tag/master-builds\r\n\n",
  "hints_text": "That seems to indicate to me either the Parquet file has incorrect statistics, or there is a bug in our statistics propagation optimizer.\r\n\r\nCould you try the same query but running `PRAGMA disable_optimizer;` first?\r\n\r\nIf that fixes the problem then perhaps you could run the following query to inspect the stats of each of the columns:\r\n\r\n```sql\r\nselect row_group_id, column_id, stats_min, stats_max, stats_null_count, stats_distinct_count, stats_min_value, stats_max_value from parquet_metadata('test.parquet');\r\n```\r\n\r\n> select item_id, region_id, metric_id from 'data.parquet' LIMIT 10\r\n\r\nDid you by chance forget to include the WHERE clause in the second query?\nThis works with `PRAGMA disable_optimizer` .\r\n\r\n```\r\nselect row_group_id, column_id, stats_min, stats_max, stats_null_count, stats_distinct_count, stats_min_value, stats_max_value from parquet_metadata('data.partquet')\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 row_group_id \u2502 column_id \u2502     stats_min     \u2502    stats_max     \u2502 stats_null_count \u2502 stats_distinct_count \u2502 stats_min_value \u2502 stats_max_value \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 0            \u2502 0         \u2502                   \u2502                  \u2502 0                \u2502                      \u2502                 \u2502                 \u2502\r\n\u2502 0            \u2502 1         \u2502                   \u2502                  \u2502 0                \u2502                      \u2502                 \u2502                 \u2502\r\n\u2502 0            \u2502 2         \u2502                   \u2502                  \u2502 0                \u2502                      \u2502                 \u2502                 \u2502\r\n\u2502 0            \u2502 3         \u2502 -8488800000000000 \u2502 1638316800000000 \u2502 0                \u2502                      \u2502                 \u2502                 \u2502\r\n\u2502 0            \u2502 4         \u2502                   \u2502                  \u2502 234856           \u2502                      \u2502                 \u2502                 \u2502\r\n\u2502 1            \u2502 0         \u2502                   \u2502                  \u2502 0                \u2502                      \u2502                 \u2502                 \u2502\r\n\u2502 1            \u2502 1         \u2502                   \u2502                  \u2502 0                \u2502                      \u2502                 \u2502                 \u2502\r\n\u2502 1            \u2502 2         \u2502                   \u2502                  \u2502 0                \u2502                      \u2502                 \u2502                 \u2502\r\n\u2502 1            \u2502 3         \u2502 -8488800000000000 \u2502 1640995200000000 \u2502 0                \u2502                      \u2502                 \u2502                 \u2502\r\n\u2502 1            \u2502 4         \u2502                   \u2502                  \u2502 236086           \u2502                      \u2502                 \u2502                 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n```\nCould you share what the WHERE clause is?\n`WHERE item_id = 1`\r\nNothing fancy.\nHm, then it is perhaps a problem with the filter pushdown. Would it be possible for you to send the parquet file to my email (m.raasveldt@cwi.nl)?",
  "created_at": "2021-07-28T07:50:44Z"
}