You will be provided with a partial code base and an issue statement explaining a problem to resolve.
In your output, give nothing but the code (no markdown) so that your output can be copy pasted and run immediately with no changes.
In the patch file, please make sure to include the line numbers and a blank line at the end so it can be applied using git apply.

<issue>
Cannot use `rowid` or `row_number() OVER ()` in `ARRAY`
### What happens?

It isn't possible to use the `rowid` pseudo-column or a `row_number()` window function to work  around the fact that the `ARRAY` operator doesn't preserve order (see https://github.com/duckdb/duckdb/issues/15011).

### To Reproduce

```sql
CREATE OR REPLACE TABLE df AS (
    FROM range(1_000_000) SELECT range AS x
);
```
Then

```sql
SELECT ARRAY(FROM df SELECT x ORDER BY row_number() OVER ());
```
```
BinderException: Binder Error: aggregate function calls cannot contain window function calls
```

```sql
SELECT ARRAY(FROM df SELECT x ORDER BY rowid);
```
```
BinderException: Binder Error: Referenced column "rowid" not found in FROM clause!
Candidate bindings: "unnamed_subquery.x"
```

Despite both queries within the `ARRAY` operator working on their own:

```sql
FROM df SELECT x ORDER BY rowid;
```
```
┌────────────────────────┐
│           x            │
│         int64          │
├────────────────────────┤
│                      0 │
│                      1 │
│                      2 │
│                      3 │
│                      4 │
│                      5 │
│                      6 │
│                      7 │
│                      8 │
│                      9 │
│                      · │
│                      · │
```

and 

```sql
FROM df SELECT x ORDER BY row_number() OVER ()
```
```
┌────────────────────────┐
│           x            │
│         int64          │
├────────────────────────┤
│                      0 │
│                      1 │
│                      2 │
│                      3 │
│                      4 │
│                      5 │
│                      6 │
│                      7 │
│                      8 │
│                      9 │
│                      · │
```


PS:

It is possible to workaround all of this via

```sql
SELECT ARRAY(SELECT x FROM (SELECT x FROM df ORDER BY row_number() OVER ()));
```

but I don't understand why (if `ARRAY` generally preserved order, I wouldn't have this problem to begin with, so why does it preserve the order from within a nested subquery?)
and confusingly it's not possible to use the seemingly equivalent


```sql
SELECT ARRAY(SELECT x FROM (SELECT x FROM df ORDER BY rowid));
```

I've opened a separate issue about this (#15052).


### OS:

Linux

### DuckDB Version:

1.1.0

### DuckDB Client:

Python

### Hardware:

i5, x64

### Full Name:

Soeren Wolfers

### Affiliation:

G-Research

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have tested with a stable release

### Did you include all relevant data sets for reproducing the issue?

Not applicable - the reproduction does not require a data set

### Did you include all code required to reproduce the issue?

- [X] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [X] Yes, I have
Cannot use `rowid` or `row_number() OVER ()` in `ARRAY`
### What happens?

It isn't possible to use the `rowid` pseudo-column or a `row_number()` window function to work  around the fact that the `ARRAY` operator doesn't preserve order (see https://github.com/duckdb/duckdb/issues/15011).

### To Reproduce

```sql
CREATE OR REPLACE TABLE df AS (
    FROM range(1_000_000) SELECT range AS x
);
```
Then

```sql
SELECT ARRAY(FROM df SELECT x ORDER BY row_number() OVER ());
```
```
BinderException: Binder Error: aggregate function calls cannot contain window function calls
```

```sql
SELECT ARRAY(FROM df SELECT x ORDER BY rowid);
```
```
BinderException: Binder Error: Referenced column "rowid" not found in FROM clause!
Candidate bindings: "unnamed_subquery.x"
```

Despite both queries within the `ARRAY` operator working on their own:

```sql
FROM df SELECT x ORDER BY rowid;
```
```
┌────────────────────────┐
│           x            │
│         int64          │
├────────────────────────┤
│                      0 │
│                      1 │
│                      2 │
│                      3 │
│                      4 │
│                      5 │
│                      6 │
│                      7 │
│                      8 │
│                      9 │
│                      · │
│                      · │
```

and 

```sql
FROM df SELECT x ORDER BY row_number() OVER ()
```
```
┌────────────────────────┐
│           x            │
│         int64          │
├────────────────────────┤
│                      0 │
│                      1 │
│                      2 │
│                      3 │
│                      4 │
│                      5 │
│                      6 │
│                      7 │
│                      8 │
│                      9 │
│                      · │
```


PS:

It is possible to workaround all of this via

```sql
SELECT ARRAY(SELECT x FROM (SELECT x FROM df ORDER BY row_number() OVER ()));
```

but I don't understand why (if `ARRAY` generally preserved order, I wouldn't have this problem to begin with, so why does it preserve the order from within a nested subquery?)
and confusingly it's not possible to use the seemingly equivalent


```sql
SELECT ARRAY(SELECT x FROM (SELECT x FROM df ORDER BY rowid));
```

I've opened a separate issue about this (#15052).


### OS:

Linux

### DuckDB Version:

1.1.0

### DuckDB Client:

Python

### Hardware:

i5, x64

### Full Name:

Soeren Wolfers

### Affiliation:

G-Research

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have tested with a stable release

### Did you include all relevant data sets for reproducing the issue?

Not applicable - the reproduction does not require a data set

### Did you include all code required to reproduce the issue?

- [X] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [X] Yes, I have

</issue>
<code>
[start of README.md]
1: <div align="center">
2:   <picture>
3:     <source media="(prefers-color-scheme: light)" srcset="logo/DuckDB_Logo-horizontal.svg">
4:     <source media="(prefers-color-scheme: dark)" srcset="logo/DuckDB_Logo-horizontal-dark-mode.svg">
5:     <img alt="DuckDB logo" src="logo/DuckDB_Logo-horizontal.svg" height="100">
6:   </picture>
7: </div>
8: <br>
9: 
10: <p align="center">
11:   <a href="https://github.com/duckdb/duckdb/actions"><img src="https://github.com/duckdb/duckdb/actions/workflows/Main.yml/badge.svg?branch=main" alt="Github Actions Badge"></a>
12:   <a href="https://discord.gg/tcvwpjfnZx"><img src="https://shields.io/discord/909674491309850675" alt="discord" /></a>
13:   <a href="https://github.com/duckdb/duckdb/releases/"><img src="https://img.shields.io/github/v/release/duckdb/duckdb?color=brightgreen&display_name=tag&logo=duckdb&logoColor=white" alt="Latest Release"></a>
14: </p>
15: 
16: ## DuckDB
17: 
18: DuckDB is a high-performance analytical database system. It is designed to be fast, reliable, portable, and easy to use. DuckDB provides a rich SQL dialect, with support far beyond basic SQL. DuckDB supports arbitrary and nested correlated subqueries, window functions, collations, complex types (arrays, structs, maps), and [several extensions designed to make SQL easier to use](https://duckdb.org/docs/guides/sql_features/friendly_sql).
19: 
20: DuckDB is available as a [standalone CLI application](https://duckdb.org/docs/api/cli/overview) and has clients for [Python](https://duckdb.org/docs/api/python/overview), [R](https://duckdb.org/docs/api/r), [Java](https://duckdb.org/docs/api/java), [Wasm](https://duckdb.org/docs/api/wasm/overview), etc., with deep integrations with packages such as [pandas](https://duckdb.org/docs/guides/python/sql_on_pandas) and [dplyr](https://duckdblabs.github.io/duckplyr/).
21: 
22: For more information on using DuckDB, please refer to the [DuckDB documentation](https://duckdb.org/docs/).
23: 
24: ## Installation
25: 
26: If you want to install DuckDB, please see [our installation page](https://duckdb.org/docs/installation/) for instructions.
27: 
28: ## Data Import
29: 
30: For CSV files and Parquet files, data import is as simple as referencing the file in the FROM clause:
31: 
32: ```sql
33: SELECT * FROM 'myfile.csv';
34: SELECT * FROM 'myfile.parquet';
35: ```
36: 
37: Refer to our [Data Import](https://duckdb.org/docs/data/overview) section for more information.
38: 
39: ## SQL Reference
40: 
41: The documentation contains a [SQL introduction and reference](https://duckdb.org/docs/sql/introduction).
42: 
43: ## Development
44: 
45: For development, DuckDB requires [CMake](https://cmake.org), Python3 and a `C++11` compliant compiler. Run `make` in the root directory to compile the sources. For development, use `make debug` to build a non-optimized debug version. You should run `make unit` and `make allunit` to verify that your version works properly after making changes. To test performance, you can run `BUILD_BENCHMARK=1 BUILD_TPCH=1 make` and then perform several standard benchmarks from the root directory by executing `./build/release/benchmark/benchmark_runner`. The details of benchmarks are in our [Benchmark Guide](benchmark/README.md).
46: 
47: Please also refer to our [Build Guide](https://duckdb.org/dev/building) and [Contribution Guide](CONTRIBUTING.md).
48: 
49: ## Support
50: 
51: See the [Support Options](https://duckdblabs.com/support/) page.
[end of README.md]
[start of src/parser/transform/expression/transform_subquery.cpp]
1: #include "duckdb/parser/expression/list.hpp"
2: #include "duckdb/parser/transformer.hpp"
3: #include "duckdb/parser/query_node/select_node.hpp"
4: #include "duckdb/parser/tableref/subqueryref.hpp"
5: #include "duckdb/parser/expression/constant_expression.hpp"
6: #include "duckdb/parser/expression/positional_reference_expression.hpp"
7: #include "duckdb/parser/parsed_expression_iterator.hpp"
8: 
9: namespace duckdb {
10: 
11: void RemoveOrderQualificationRecursive(unique_ptr<ParsedExpression> &expr) {
12: 	if (expr->GetExpressionType() == ExpressionType::COLUMN_REF) {
13: 		auto &col_ref = expr->Cast<ColumnRefExpression>();
14: 		auto &col_names = col_ref.column_names;
15: 		if (col_names.size() > 1) {
16: 			col_names = vector<string> {col_names.back()};
17: 		}
18: 	} else {
19: 		ParsedExpressionIterator::EnumerateChildren(
20: 		    *expr, [](unique_ptr<ParsedExpression> &child) { RemoveOrderQualificationRecursive(child); });
21: 	}
22: }
23: 
24: unique_ptr<ParsedExpression> Transformer::TransformSubquery(duckdb_libpgquery::PGSubLink &root) {
25: 	auto subquery_expr = make_uniq<SubqueryExpression>();
26: 
27: 	subquery_expr->subquery = TransformSelectStmt(*root.subselect);
28: 	SetQueryLocation(*subquery_expr, root.location);
29: 	D_ASSERT(subquery_expr->subquery);
30: 	D_ASSERT(!subquery_expr->subquery->node->GetSelectList().empty());
31: 
32: 	switch (root.subLinkType) {
33: 	case duckdb_libpgquery::PG_EXISTS_SUBLINK: {
34: 		subquery_expr->subquery_type = SubqueryType::EXISTS;
35: 		break;
36: 	}
37: 	case duckdb_libpgquery::PG_ANY_SUBLINK:
38: 	case duckdb_libpgquery::PG_ALL_SUBLINK: {
39: 		// comparison with ANY() or ALL()
40: 		subquery_expr->subquery_type = SubqueryType::ANY;
41: 		subquery_expr->child = TransformExpression(root.testexpr);
42: 		// get the operator name
43: 		if (!root.operName) {
44: 			// simple IN
45: 			subquery_expr->comparison_type = ExpressionType::COMPARE_EQUAL;
46: 		} else {
47: 			auto operator_name =
48: 			    string((PGPointerCast<duckdb_libpgquery::PGValue>(root.operName->head->data.ptr_value))->val.str);
49: 			subquery_expr->comparison_type = OperatorToExpressionType(operator_name);
50: 		}
51: 		if (subquery_expr->comparison_type != ExpressionType::COMPARE_EQUAL &&
52: 		    subquery_expr->comparison_type != ExpressionType::COMPARE_NOTEQUAL &&
53: 		    subquery_expr->comparison_type != ExpressionType::COMPARE_GREATERTHAN &&
54: 		    subquery_expr->comparison_type != ExpressionType::COMPARE_GREATERTHANOREQUALTO &&
55: 		    subquery_expr->comparison_type != ExpressionType::COMPARE_LESSTHAN &&
56: 		    subquery_expr->comparison_type != ExpressionType::COMPARE_LESSTHANOREQUALTO) {
57: 			throw ParserException("ANY and ALL operators require one of =,<>,>,<,>=,<= comparisons!");
58: 		}
59: 		if (root.subLinkType == duckdb_libpgquery::PG_ALL_SUBLINK) {
60: 			// ALL sublink is equivalent to NOT(ANY) with inverted comparison
61: 			// e.g. [= ALL()] is equivalent to [NOT(<> ANY())]
62: 			// first invert the comparison type
63: 			subquery_expr->comparison_type = NegateComparisonExpression(subquery_expr->comparison_type);
64: 			return make_uniq<OperatorExpression>(ExpressionType::OPERATOR_NOT, std::move(subquery_expr));
65: 		}
66: 		break;
67: 	}
68: 	case duckdb_libpgquery::PG_EXPR_SUBLINK: {
69: 		// return a single scalar value from the subquery
70: 		// no child expression to compare to
71: 		subquery_expr->subquery_type = SubqueryType::SCALAR;
72: 		break;
73: 	}
74: 	case duckdb_libpgquery::PG_ARRAY_SUBLINK: {
75: 		// ARRAY expression
76: 		// wrap subquery into
77: 		// "SELECT CASE WHEN ARRAY_AGG(COLUMNS(*)) IS NULL THEN [] ELSE ARRAY_AGG(COLUMNS(*)) END FROM (...) tbl"
78: 		auto select_node = make_uniq<SelectNode>();
79: 
80: 		// COLUMNS(*)
81: 		auto columns_star = make_uniq<StarExpression>();
82: 		columns_star->columns = true;
83: 
84: 		// ARRAY_AGG(COLUMNS(*))
85: 		vector<unique_ptr<ParsedExpression>> children;
86: 		children.push_back(std::move(columns_star));
87: 		auto aggr = make_uniq<FunctionExpression>("array_agg", std::move(children));
88: 		// push ORDER BY modifiers into the array_agg
89: 		for (auto &modifier : subquery_expr->subquery->node->modifiers) {
90: 			if (modifier->type == ResultModifierType::ORDER_MODIFIER) {
91: 				aggr->order_bys = unique_ptr_cast<ResultModifier, OrderModifier>(modifier->Copy());
92: 				break;
93: 			}
94: 		}
95: 		// transform constants (e.g. ORDER BY 1) into positional references (ORDER BY #1)
96: 		if (aggr->order_bys) {
97: 			for (auto &order : aggr->order_bys->orders) {
98: 				if (order.expression->type == ExpressionType::VALUE_CONSTANT) {
99: 					auto &constant_expr = order.expression->Cast<ConstantExpression>();
100: 					Value bigint_value;
101: 					string error;
102: 					if (constant_expr.value.DefaultTryCastAs(LogicalType::BIGINT, bigint_value, &error)) {
103: 						int64_t order_index = BigIntValue::Get(bigint_value);
104: 						idx_t positional_index = order_index < 0 ? NumericLimits<idx_t>::Maximum() : idx_t(order_index);
105: 						order.expression = make_uniq<PositionalReferenceExpression>(positional_index);
106: 					}
107: 				} else {
108: 					RemoveOrderQualificationRecursive(order.expression);
109: 				}
110: 			}
111: 		}
112: 		// ARRAY_AGG(COLUMNS(*)) IS NULL
113: 		auto agg_is_null = make_uniq<OperatorExpression>(ExpressionType::OPERATOR_IS_NULL, aggr->Copy());
114: 		// empty list
115: 		vector<unique_ptr<ParsedExpression>> list_children;
116: 		auto empty_list = make_uniq<FunctionExpression>("list_value", std::move(list_children));
117: 		// CASE
118: 		auto case_expr = make_uniq<CaseExpression>();
119: 		CaseCheck check;
120: 		check.when_expr = std::move(agg_is_null);
121: 		check.then_expr = std::move(empty_list);
122: 		case_expr->case_checks.push_back(std::move(check));
123: 		case_expr->else_expr = std::move(aggr);
124: 
125: 		select_node->select_list.push_back(std::move(case_expr));
126: 
127: 		// FROM (...) tbl
128: 		auto child_subquery = make_uniq<SubqueryRef>(std::move(subquery_expr->subquery));
129: 		select_node->from_table = std::move(child_subquery);
130: 
131: 		auto new_subquery = make_uniq<SelectStatement>();
132: 		new_subquery->node = std::move(select_node);
133: 		subquery_expr->subquery = std::move(new_subquery);
134: 
135: 		subquery_expr->subquery_type = SubqueryType::SCALAR;
136: 		break;
137: 	}
138: 	default:
139: 		throw NotImplementedException("Subquery of type %d not implemented\n", (int)root.subLinkType);
140: 	}
141: 	return std::move(subquery_expr);
142: }
143: 
144: } // namespace duckdb
[end of src/parser/transform/expression/transform_subquery.cpp]
</code>
Here is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.
<patch>
--- a/file.cpp
+++ b/file.cpp
@@ -3,35 +3,44 @@
 #include <cstdlib>
 
 int euclidean(int a, int b) {
-    while (b) {
-        int temp = b;
-        b = a % b;
-        a = temp;
+    if (b == 0) {
+        return a;
     }
-    return a;
+    return euclidean(b, a % b);
 }
 
 std::vector<std::pair<int, int>> bresenham(int x0, int y0, int x1, int y1) {
     std::vector<std::pair<int, int>> points;
     int dx = abs(x1 - x0);
     int dy = abs(y1 - y0);
+    int x = x0, y = y0;
     int sx = (x0 < x1) ? 1 : -1;
     int sy = (y0 < y1) ? 1 : -1;
-    int err = dx - dy;
 
-    while (true) {
-        points.emplace_back(x0, y0);
-        if (x0 == x1 && y0 == y1) break;
-        int e2 = 2 * err;
-        if (e2 > -dy) {
+    if (dx > dy) {
+        int err = dx / 2;
+        while (x != x1) {
+            points.emplace_back(x, y);
             err -= dy;
-            x0 += sx;
+            if (err < 0) {
+                y += sy;
+                err += dx;
+            }
+            x += sx;
         }
-        if (e2 < dx) {
-            err += dx;
-            y0 += sy;
+    } else {
+        int err = dy / 2;
+        while (y != y1) {
+            points.emplace_back(x, y);
+            err -= dx;
+            if (err < 0) {
+                x += sx;
+                err += dy;
+            }
+            y += sy;
         }
     }
 
+    points.emplace_back(x, y);
     return points;
 }

</patch>

I need you to solve the provided issue by generating a single patch file that I can apply directly to this repository using git apply.
Please respond with a single patch file in the format shown above.
Make sure to only include the patch file contents so that the contents of your output can be copied into a patch file and applied directly

Respond below: