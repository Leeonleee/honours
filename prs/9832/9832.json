{
  "repo": "duckdb/duckdb",
  "pull_number": 9832,
  "instance_id": "duckdb__duckdb-9832",
  "issue_numbers": [
    "9825",
    "9825"
  ],
  "base_commit": "ce866cec9d80b6e8b91d890c90476a0c01322f11",
  "patch": "diff --git a/src/optimizer/filter_combiner.cpp b/src/optimizer/filter_combiner.cpp\nindex f3d6141a3fb9..c612b177f72b 100644\n--- a/src/optimizer/filter_combiner.cpp\n+++ b/src/optimizer/filter_combiner.cpp\n@@ -627,9 +627,6 @@ FilterResult FilterCombiner::AddBoundComparisonFilter(Expression &expr) {\n \t\t// comparison between two non-scalars\n \t\t// only handle comparisons for now\n \t\tif (expr.type != ExpressionType::COMPARE_EQUAL) {\n-\t\t\tif (IsGreaterThan(expr.type) || IsLessThan(expr.type)) {\n-\t\t\t\treturn AddTransitiveFilters(comparison);\n-\t\t\t}\n \t\t\treturn FilterResult::UNSUPPORTED;\n \t\t}\n \t\t// get the LHS and RHS nodes\n",
  "test_patch": "diff --git a/test/issues/rigger/decimal_int_between.test b/test/issues/rigger/decimal_int_between.test\nnew file mode 100644\nindex 000000000000..e210d27ae5b7\n--- /dev/null\n+++ b/test/issues/rigger/decimal_int_between.test\n@@ -0,0 +1,20 @@\n+# name: test/issues/rigger/decimal_int_between.test\n+# description: Issue #9825 - Missing Results when using Floating-point in BETWEEN\n+# group: [rigger]\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+statement ok\n+CREATE TABLE t0(c1 INT);\n+\n+statement ok\n+INSERT INTO t0(c1) VALUES (-1);\n+\n+statement ok\n+INSERT INTO t0(c1) VALUES (5);\n+\n+query I\n+SELECT * FROM t0 WHERE (c1 BETWEEN 3.1 AND c1);\n+----\n+5\ndiff --git a/test/optimizer/transitive_filters.test b/test/optimizer/transitive_filters.test\nindex 852e357a498e..33d345f95ba7 100644\n--- a/test/optimizer/transitive_filters.test\n+++ b/test/optimizer/transitive_filters.test\n@@ -138,6 +138,9 @@ EXPLAIN SELECT * FROM (VALUES(5,5)) tbl(col0, col1) WHERE col1 < col0 AND col0<=\n logical_opt\t<REGEX>:.*\\(col1 < 5\\).*\n \n \n+# FIXME - disabled because of bugs in the filter combiner\n+mode skip\n+\n ### Complex transitive filters #################################################\n #columns i and j correspond to columns: col0 and col1 in the optimized logical plan\n #columns k and l correspond to columns: col2 and col3 in the optimized logical plan\n",
  "problem_statement": "Missing Results when using Floating-point in BETWEEN\n### What happens?\n\nConsidering the test case below: The third `SELECT` returns an empty result, which is surprising: If the result of second query contains at least one `true`, the value of the ` BETWEEN` expression should be true, and thus the third query should return one row in `t0`. \r\n\r\nIf replacing `3.1` to `3`, or only inserting `5`, things go well.\n\n### To Reproduce\n\n\r\n\r\n```sql\r\nCREATE TABLE t0(c1 INT);\r\nINSERT INTO t0(c1) VALUES (-1);\r\nINSERT INTO t0(c1) VALUES (5);\r\n\r\nSELECT * FROM t0; -- -1, 5\r\nSELECT (c1 BETWEEN 3.1 AND c1) FROM t0; -- false, true\r\nSELECT * FROM t0 WHERE (c1 BETWEEN 3.1 AND c1); \r\n-- Expected: 5\r\n-- Actual: empty\r\n```\r\n\r\n\n\n### OS:\n\nubuntu 22.04\n\n### DuckDB Version:\n\nv0.9.3-dev915 e46ece4d2c\n\n### DuckDB Client:\n\nCLI\n\n### Full Name:\n\nSuyang Zhong\n\n### Affiliation:\n\nNUS\n\n### Have you tried this on the latest `main` branch?\n\nI have tested with a main build\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] Yes, I have\nMissing Results when using Floating-point in BETWEEN\n### What happens?\n\nConsidering the test case below: The third `SELECT` returns an empty result, which is surprising: If the result of second query contains at least one `true`, the value of the ` BETWEEN` expression should be true, and thus the third query should return one row in `t0`. \r\n\r\nIf replacing `3.1` to `3`, or only inserting `5`, things go well.\n\n### To Reproduce\n\n\r\n\r\n```sql\r\nCREATE TABLE t0(c1 INT);\r\nINSERT INTO t0(c1) VALUES (-1);\r\nINSERT INTO t0(c1) VALUES (5);\r\n\r\nSELECT * FROM t0; -- -1, 5\r\nSELECT (c1 BETWEEN 3.1 AND c1) FROM t0; -- false, true\r\nSELECT * FROM t0 WHERE (c1 BETWEEN 3.1 AND c1); \r\n-- Expected: 5\r\n-- Actual: empty\r\n```\r\n\r\n\n\n### OS:\n\nubuntu 22.04\n\n### DuckDB Version:\n\nv0.9.3-dev915 e46ece4d2c\n\n### DuckDB Client:\n\nCLI\n\n### Full Name:\n\nSuyang Zhong\n\n### Affiliation:\n\nNUS\n\n### Have you tried this on the latest `main` branch?\n\nI have tested with a main build\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] Yes, I have\n",
  "hints_text": "\n",
  "created_at": "2023-11-28T15:42:08Z"
}