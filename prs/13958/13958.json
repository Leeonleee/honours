{
  "repo": "duckdb/duckdb",
  "pull_number": 13958,
  "instance_id": "duckdb__duckdb-13958",
  "issue_numbers": [
    "13933",
    "13933"
  ],
  "base_commit": "0b0c95b9dc685e1a6ca011d8e086d885afbe0398",
  "patch": "diff --git a/src/execution/operator/aggregate/physical_ungrouped_aggregate.cpp b/src/execution/operator/aggregate/physical_ungrouped_aggregate.cpp\nindex 15d082ab88af..f44b2476c99b 100644\n--- a/src/execution/operator/aggregate/physical_ungrouped_aggregate.cpp\n+++ b/src/execution/operator/aggregate/physical_ungrouped_aggregate.cpp\n@@ -342,6 +342,7 @@ void LocalUngroupedAggregateState::Sink(DataChunk &payload_chunk, idx_t payload_\n #endif\n \tauto &aggregate = state.aggregate_expressions[aggr_idx]->Cast<BoundAggregateExpression>();\n \tidx_t payload_cnt = aggregate.children.size();\n+\tD_ASSERT(payload_idx + payload_cnt <= payload_chunk.data.size());\n \tauto start_of_input = payload_cnt == 0 ? nullptr : &payload_chunk.data[payload_idx];\n \tAggregateInputData aggr_input_data(state.bind_data[aggr_idx], allocator);\n \taggregate.function.simple_update(start_of_input, aggr_input_data, payload_cnt, state.aggregate_data[aggr_idx].get(),\ndiff --git a/src/optimizer/join_filter_pushdown_optimizer.cpp b/src/optimizer/join_filter_pushdown_optimizer.cpp\nindex a023121df27e..60b8c83af356 100644\n--- a/src/optimizer/join_filter_pushdown_optimizer.cpp\n+++ b/src/optimizer/join_filter_pushdown_optimizer.cpp\n@@ -118,11 +118,6 @@ void JoinFilterPushdownOptimizer::GenerateJoinFilters(LogicalComparisonJoin &joi\n \t\t}\n \t}\n \t// pushdown can be performed\n-\t// set up the dynamic filters (if we don't have any yet)\n-\tif (!get.dynamic_filters) {\n-\t\tget.dynamic_filters = make_shared_ptr<DynamicTableFilterSet>();\n-\t}\n-\tpushdown_info->dynamic_filters = get.dynamic_filters;\n \n \t// set up the min/max aggregates for each of the filters\n \tvector<AggregateFunction> aggr_functions;\n@@ -135,9 +130,18 @@ void JoinFilterPushdownOptimizer::GenerateJoinFilters(LogicalComparisonJoin &joi\n \t\t\taggr_children.push_back(join.conditions[filter.join_condition].right->Copy());\n \t\t\tauto aggr_expr = function_binder.BindAggregateFunction(aggr, std::move(aggr_children), nullptr,\n \t\t\t                                                       AggregateType::NON_DISTINCT);\n+\t\t\tif (aggr_expr->children.size() != 1) {\n+\t\t\t\t// min/max with collation - not supported\n+\t\t\t\treturn;\n+\t\t\t}\n \t\t\tpushdown_info->min_max_aggregates.push_back(std::move(aggr_expr));\n \t\t}\n \t}\n+\t// set up the dynamic filters (if we don't have any yet)\n+\tif (!get.dynamic_filters) {\n+\t\tget.dynamic_filters = make_shared_ptr<DynamicTableFilterSet>();\n+\t}\n+\tpushdown_info->dynamic_filters = get.dynamic_filters;\n \n \t// set up the filter pushdown in the join itself\n \tjoin.filter_pushdown = std::move(pushdown_info);\n",
  "test_patch": "diff --git a/test/sql/collate/collate_filter_pushdown.test b/test/sql/collate/collate_filter_pushdown.test\nnew file mode 100644\nindex 000000000000..19a4e599a701\n--- /dev/null\n+++ b/test/sql/collate/collate_filter_pushdown.test\n@@ -0,0 +1,23 @@\n+# name: test/sql/collate/collate_filter_pushdown.test\n+# description: Test collation interacting with filter pushdown\n+# group: [collate]\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+statement ok\n+CREATE TABLE t0(c0 BOOLEAN, PRIMARY KEY(c0));\n+\n+statement ok\n+CREATE TABLE t63(c0 VARCHAR COLLATE C, PRIMARY KEY(c0));\n+\n+statement ok\n+insert into t0(c0) values (0.7);\n+\n+statement ok\n+insert into t63(c0) values ('1');\n+\n+query I\n+SELECT t63.c0 FROM t0 NATURAL LEFT JOIN t63;\n+----\n+NULL\n",
  "problem_statement": "`INTERNAL Error: Unimplemented type for normalify` in select query\n### What happens?\r\n\r\nAn internal error is thrown in a select query.\r\n\r\nTest case generated with SQLancer. \r\n\r\n\r\n### To Reproduce\r\n\r\n```sql\r\nCREATE TABLE t0(c0 BOOLEAN, PRIMARY KEY(c0));\r\nCREATE TABLE t63(c0 VARCHAR COLLATE C, PRIMARY KEY(c0));\r\ninsert into t0(c0) values (0.7);\r\ninsert into t63(c0) values ('1');\r\nSELECT t63.c0 FROM t0 NATURAL LEFT JOIN t63;\r\n```\r\n\r\n### OS:\r\n\r\nArch Linux x86_64\r\n\r\n### DuckDB Version:\r\n\r\nv1.1.0 fa5c2fe15f\r\n\r\n### DuckDB Client:\r\n\r\nduckdb cli\r\n\r\n### Hardware:\r\n\r\n_No response_\r\n\r\n### Full Name:\r\n\r\nMing Wei Tan\r\n\r\n### Affiliation:\r\n\r\nNational University of Singapore\r\n\r\n### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.\r\n\r\nI have tested with a stable release\r\n\r\n### Did you include all relevant data sets for reproducing the issue?\r\n\r\nYes\r\n\r\n### Did you include all code required to reproduce the issue?\r\n\r\n- [X] Yes, I have\r\n\r\n### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?\r\n\r\n- [X] Yes, I have\n`INTERNAL Error: Unimplemented type for normalify` in select query\n### What happens?\r\n\r\nAn internal error is thrown in a select query.\r\n\r\nTest case generated with SQLancer. \r\n\r\n\r\n### To Reproduce\r\n\r\n```sql\r\nCREATE TABLE t0(c0 BOOLEAN, PRIMARY KEY(c0));\r\nCREATE TABLE t63(c0 VARCHAR COLLATE C, PRIMARY KEY(c0));\r\ninsert into t0(c0) values (0.7);\r\ninsert into t63(c0) values ('1');\r\nSELECT t63.c0 FROM t0 NATURAL LEFT JOIN t63;\r\n```\r\n\r\n### OS:\r\n\r\nArch Linux x86_64\r\n\r\n### DuckDB Version:\r\n\r\nv1.1.0 fa5c2fe15f\r\n\r\n### DuckDB Client:\r\n\r\nduckdb cli\r\n\r\n### Hardware:\r\n\r\n_No response_\r\n\r\n### Full Name:\r\n\r\nMing Wei Tan\r\n\r\n### Affiliation:\r\n\r\nNational University of Singapore\r\n\r\n### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.\r\n\r\nI have tested with a stable release\r\n\r\n### Did you include all relevant data sets for reproducing the issue?\r\n\r\nYes\r\n\r\n### Did you include all code required to reproduce the issue?\r\n\r\n- [X] Yes, I have\r\n\r\n### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?\r\n\r\n- [X] Yes, I have\n",
  "hints_text": "\n",
  "created_at": "2024-09-16T11:15:00Z"
}