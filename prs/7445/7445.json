{
  "repo": "duckdb/duckdb",
  "pull_number": 7445,
  "instance_id": "duckdb__duckdb-7445",
  "issue_numbers": [
    "7274",
    "7274"
  ],
  "base_commit": "64aaaa2bedb7da77c8dd58bc24677a68c650a034",
  "patch": "diff --git a/src/catalog/catalog_set.cpp b/src/catalog/catalog_set.cpp\nindex 009820fe058e..5efddd70bd25 100644\n--- a/src/catalog/catalog_set.cpp\n+++ b/src/catalog/catalog_set.cpp\n@@ -621,7 +621,7 @@ void CatalogSet::Undo(CatalogEntry &entry) {\n \t\tauto &dependency_manager = catalog.GetDependencyManager();\n \t\tdependency_manager.EraseObject(to_be_removed_node);\n \t}\n-\tif (entry.name != to_be_removed_node.name) {\n+\tif (!StringUtil::CIEquals(entry.name, to_be_removed_node.name)) {\n \t\t// rename: clean up the new name when the rename is rolled back\n \t\tauto removed_entry = mapping.find(to_be_removed_node.name);\n \t\tif (removed_entry->second->child) {\n",
  "test_patch": "diff --git a/test/sql/catalog/drop_create_rollback.test b/test/sql/catalog/drop_create_rollback.test\nnew file mode 100644\nindex 000000000000..85941574fa69\n--- /dev/null\n+++ b/test/sql/catalog/drop_create_rollback.test\n@@ -0,0 +1,29 @@\n+# name: test/sql/catalog/drop_create_rollback.test\n+# description: Issue #7274 - crash when recreating table with different case sensitivity but the same name\n+# group: [catalog]\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+statement ok\n+CREATE TABLE t1 (c1 CHAR(5));\n+\n+statement ok\n+BEGIN TRANSACTION;\n+\n+statement ok\n+DROP TABLE IF EXISTS t1;\n+\n+statement ok\n+CREATE TABLE T1 (C2 CHAR(5));\n+\n+statement ok\n+SELECT C2 FROM T1;\n+\n+statement ok\n+ROLLBACK;\n+\n+statement error\n+SELECT C2 FROM T1;\n+----\n+c1\n",
  "problem_statement": "DuckDB binary crashed at catalog_set.cpp:634:6\n### What happens?\n\nThe DuckDB binary (/usr/local/bin/duckdb) crashed in `duckdb::CatalogSet::Undo(duckdb::CatalogEntry*)` at `catalog_set.cpp:634:6` .\r\nBinary with release version reports \"terminated by signal SIGSEGV (Address boundary error)\".\r\nBinary with ASAN enabled reports it as heap-use-after-free.\r\n\n\n### To Reproduce\n\n```sql\r\nCREATE TABLE t1 (c1 CHAR(5));\r\nBEGIN TRANSACTION;\r\nDROP TABLE IF EXISTS t1;\r\nCREATE TABLE T1 (C1 CHAR(5));\r\nROLLBACK;\r\n```\n\n### OS:\n\nUbuntu 20.04 x64\n\n### DuckDB Version:\n\nv0.7.2-dev2675 688b2f1f8c\n\n### DuckDB Client:\n\nv0.7.2-dev2675 688b2f1f8c\n\n### Full Name:\n\nJingzhou Fu\n\n### Affiliation:\n\nWingtecher Lab of Tsinghua University and Shuimuyulin ltd.\n\n### Have you tried this on the latest `master` branch?\n\n- [X] I agree\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] I agree\nDuckDB binary crashed at catalog_set.cpp:634:6\n### What happens?\n\nThe DuckDB binary (/usr/local/bin/duckdb) crashed in `duckdb::CatalogSet::Undo(duckdb::CatalogEntry*)` at `catalog_set.cpp:634:6` .\r\nBinary with release version reports \"terminated by signal SIGSEGV (Address boundary error)\".\r\nBinary with ASAN enabled reports it as heap-use-after-free.\r\n\n\n### To Reproduce\n\n```sql\r\nCREATE TABLE t1 (c1 CHAR(5));\r\nBEGIN TRANSACTION;\r\nDROP TABLE IF EXISTS t1;\r\nCREATE TABLE T1 (C1 CHAR(5));\r\nROLLBACK;\r\n```\n\n### OS:\n\nUbuntu 20.04 x64\n\n### DuckDB Version:\n\nv0.7.2-dev2675 688b2f1f8c\n\n### DuckDB Client:\n\nv0.7.2-dev2675 688b2f1f8c\n\n### Full Name:\n\nJingzhou Fu\n\n### Affiliation:\n\nWingtecher Lab of Tsinghua University and Shuimuyulin ltd.\n\n### Have you tried this on the latest `master` branch?\n\n- [X] I agree\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] I agree\n",
  "hints_text": "Its asan reports is as follow:\r\n```\r\n==1091==ERROR: AddressSanitizer: heap-use-after-free on address 0x60b0000239e0 at pc 0x000002663b1b bp 0x7ffd34ec25b0 sp 0x7ffd34ec25a8\r\nREAD of size 8 at 0x60b0000239e0 thread T0\r\n    #0 0x2663b1a in duckdb::CatalogSet::Undo(duckdb::CatalogEntry*) /root/duckdb/src/catalog/catalog_set.cpp:634:6\r\n    #1 0x4a4f206 in duckdb::RollbackState::RollbackEntry(duckdb::UndoFlags, unsigned char*) /root/duckdb/src/transaction/rollback_state.cpp:21:23\r\n    #2 0x4a51747 in duckdb::UndoBuffer::Rollback()::$_4::operator()(duckdb::UndoFlags, unsigned char*) const /root/duckdb/src/transaction/undo_buffer.cpp:151:69\r\n    #3 0x4a42d7c in void duckdb::UndoBuffer::ReverseIterateEntries<duckdb::UndoBuffer::Rollback()::$_4>(duckdb::UndoBuffer::Rollback()::$_4&&) /root/duckdb/src/transaction/undo_buffer.cpp:97:4\r\n    #4 0x4a3b728 in duckdb::UndoBuffer::Rollback() /root/duckdb/src/transaction/undo_buffer.cpp:151:2\r\n    #5 0x4a308e8 in duckdb::DuckTransaction::Rollback() /root/duckdb/src/transaction/duck_transaction.cpp:148:14\r\n    #6 0x4a382fe in duckdb::DuckTransactionManager::RollbackTransaction(duckdb::Transaction*) /root/duckdb/src/transaction/duck_transaction_manager.cpp:247:15\r\n    #7 0x4a3e428 in duckdb::MetaTransaction::Rollback() /root/duckdb/src/transaction/meta_transaction.cpp:77:23\r\n    #8 0x4a43552 in duckdb::TransactionContext::Rollback() /root/duckdb/src/transaction/transaction_context.cpp:67:15\r\n    #9 0x3e646a4 in duckdb::ClientContext::Destroy() /root/duckdb/src/main/client_context.cpp:88:16\r\n    #10 0x3e643b4 in duckdb::ClientContext::~ClientContext() /root/duckdb/src/main/client_context.cpp:76:2\r\n    #11 0x41040ae in void __gnu_cxx::new_allocator<duckdb::ClientContext>::destroy<duckdb::ClientContext>(duckdb::ClientContext*) /usr/bin/../lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ext/new_allocator.h:152:10\r\n    #12 0x4103f56 in void std::allocator_traits<std::allocator<duckdb::ClientContext> >::destroy<duckdb::ClientContext>(std::allocator<duckdb::ClientContext>&, duckdb::ClientContext*) /usr/bin/../lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/bits/alloc_traits.h:496:8\r\n    #13 0x4103603 in std::_Sp_counted_ptr_inplace<duckdb::ClientContext, std::allocator<duckdb::ClientContext>, (__gnu_cxx::_Lock_policy)2>::_M_dispose() /usr/bin/../lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/bits/shared_ptr_base.h:557:2\r\n    #14 0x219d55c in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release() /usr/bin/../lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/bits/shared_ptr_base.h:155:6\r\n    #15 0x219d389 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count() /usr/bin/../lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/bits/shared_ptr_base.h:730:11\r\n    #16 0x415ba4c in std::__shared_ptr<duckdb::ClientContext, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr() /usr/bin/../lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/bits/shared_ptr_base.h:1169:31\r\n    #17 0x3fa9f18 in std::shared_ptr<duckdb::ClientContext>::~shared_ptr() /usr/bin/../lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/bits/shared_ptr.h:103:11\r\n    #18 0x3ea01d7 in duckdb::Connection::~Connection() /root/duckdb/src/main/connection.cpp:35:1\r\n    #19 0x21a19ac in std::default_delete<duckdb::Connection>::operator()(duckdb::Connection*) const /usr/bin/../lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/bits/unique_ptr.h:81:2\r\n    #20 0x218e0a1 in std::unique_ptr<duckdb::Connection, std::default_delete<duckdb::Connection> >::~unique_ptr() /usr/bin/../lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/bits/unique_ptr.h:292:4\r\n    #21 0x218e829 in sqlite3::~sqlite3() /root/duckdb/tools/sqlite3_api_wrapper/sqlite3_udf_api/include/udf_struct_sqlite3.h:16:8\r\n    #22 0x2173429 in duckdb_shell_sqlite3_close /root/duckdb/tools/sqlite3_api_wrapper/sqlite3_api_wrapper.cpp:138:3\r\n    #23 0x2058ec4 in close_db /root/duckdb/tools/shell/shell.c:14382:12\r\n    #24 0x205f13a in main /root/duckdb/tools/shell/shell.c:21021:5\r\n    #25 0x7faf9ffac082 in __libc_start_main /build/glibc-SzIz7B/glibc-2.31/csu/../csu/libc-start.c:308:16\r\n    #26 0x1f913fd in _start (/root/bin_original_asan/usr/local/bin/duckdb+0x1f913fd)\r\n```\nIts asan reports is as follow:\r\n```\r\n==1091==ERROR: AddressSanitizer: heap-use-after-free on address 0x60b0000239e0 at pc 0x000002663b1b bp 0x7ffd34ec25b0 sp 0x7ffd34ec25a8\r\nREAD of size 8 at 0x60b0000239e0 thread T0\r\n    #0 0x2663b1a in duckdb::CatalogSet::Undo(duckdb::CatalogEntry*) /root/duckdb/src/catalog/catalog_set.cpp:634:6\r\n    #1 0x4a4f206 in duckdb::RollbackState::RollbackEntry(duckdb::UndoFlags, unsigned char*) /root/duckdb/src/transaction/rollback_state.cpp:21:23\r\n    #2 0x4a51747 in duckdb::UndoBuffer::Rollback()::$_4::operator()(duckdb::UndoFlags, unsigned char*) const /root/duckdb/src/transaction/undo_buffer.cpp:151:69\r\n    #3 0x4a42d7c in void duckdb::UndoBuffer::ReverseIterateEntries<duckdb::UndoBuffer::Rollback()::$_4>(duckdb::UndoBuffer::Rollback()::$_4&&) /root/duckdb/src/transaction/undo_buffer.cpp:97:4\r\n    #4 0x4a3b728 in duckdb::UndoBuffer::Rollback() /root/duckdb/src/transaction/undo_buffer.cpp:151:2\r\n    #5 0x4a308e8 in duckdb::DuckTransaction::Rollback() /root/duckdb/src/transaction/duck_transaction.cpp:148:14\r\n    #6 0x4a382fe in duckdb::DuckTransactionManager::RollbackTransaction(duckdb::Transaction*) /root/duckdb/src/transaction/duck_transaction_manager.cpp:247:15\r\n    #7 0x4a3e428 in duckdb::MetaTransaction::Rollback() /root/duckdb/src/transaction/meta_transaction.cpp:77:23\r\n    #8 0x4a43552 in duckdb::TransactionContext::Rollback() /root/duckdb/src/transaction/transaction_context.cpp:67:15\r\n    #9 0x3e646a4 in duckdb::ClientContext::Destroy() /root/duckdb/src/main/client_context.cpp:88:16\r\n    #10 0x3e643b4 in duckdb::ClientContext::~ClientContext() /root/duckdb/src/main/client_context.cpp:76:2\r\n    #11 0x41040ae in void __gnu_cxx::new_allocator<duckdb::ClientContext>::destroy<duckdb::ClientContext>(duckdb::ClientContext*) /usr/bin/../lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ext/new_allocator.h:152:10\r\n    #12 0x4103f56 in void std::allocator_traits<std::allocator<duckdb::ClientContext> >::destroy<duckdb::ClientContext>(std::allocator<duckdb::ClientContext>&, duckdb::ClientContext*) /usr/bin/../lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/bits/alloc_traits.h:496:8\r\n    #13 0x4103603 in std::_Sp_counted_ptr_inplace<duckdb::ClientContext, std::allocator<duckdb::ClientContext>, (__gnu_cxx::_Lock_policy)2>::_M_dispose() /usr/bin/../lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/bits/shared_ptr_base.h:557:2\r\n    #14 0x219d55c in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release() /usr/bin/../lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/bits/shared_ptr_base.h:155:6\r\n    #15 0x219d389 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count() /usr/bin/../lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/bits/shared_ptr_base.h:730:11\r\n    #16 0x415ba4c in std::__shared_ptr<duckdb::ClientContext, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr() /usr/bin/../lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/bits/shared_ptr_base.h:1169:31\r\n    #17 0x3fa9f18 in std::shared_ptr<duckdb::ClientContext>::~shared_ptr() /usr/bin/../lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/bits/shared_ptr.h:103:11\r\n    #18 0x3ea01d7 in duckdb::Connection::~Connection() /root/duckdb/src/main/connection.cpp:35:1\r\n    #19 0x21a19ac in std::default_delete<duckdb::Connection>::operator()(duckdb::Connection*) const /usr/bin/../lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/bits/unique_ptr.h:81:2\r\n    #20 0x218e0a1 in std::unique_ptr<duckdb::Connection, std::default_delete<duckdb::Connection> >::~unique_ptr() /usr/bin/../lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/bits/unique_ptr.h:292:4\r\n    #21 0x218e829 in sqlite3::~sqlite3() /root/duckdb/tools/sqlite3_api_wrapper/sqlite3_udf_api/include/udf_struct_sqlite3.h:16:8\r\n    #22 0x2173429 in duckdb_shell_sqlite3_close /root/duckdb/tools/sqlite3_api_wrapper/sqlite3_api_wrapper.cpp:138:3\r\n    #23 0x2058ec4 in close_db /root/duckdb/tools/shell/shell.c:14382:12\r\n    #24 0x205f13a in main /root/duckdb/tools/shell/shell.c:21021:5\r\n    #25 0x7faf9ffac082 in __libc_start_main /build/glibc-SzIz7B/glibc-2.31/csu/../csu/libc-start.c:308:16\r\n    #26 0x1f913fd in _start (/root/bin_original_asan/usr/local/bin/duckdb+0x1f913fd)\r\n```",
  "created_at": "2023-05-10T14:00:08Z"
}