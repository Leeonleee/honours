diff --git a/src/function/aggregate/distributive/sum.cpp b/src/function/aggregate/distributive/sum.cpp
index de629ff9b181..f09bdcc8c951 100644
--- a/src/function/aggregate/distributive/sum.cpp
+++ b/src/function/aggregate/distributive/sum.cpp
@@ -29,7 +29,7 @@ struct SumOperation {
 	template <class INPUT_TYPE, class STATE, class OP>
 	static void ConstantOperation(STATE *state, INPUT_TYPE *input, nullmask_t &nullmask, idx_t count) {
 		state->isset = true;
-		state->value += input[0] * count;
+		state->value += (double) input[0] * (double) count;
 	}
 
 	template <class T, class STATE>
diff --git a/src/parser/expression/constant_expression.cpp b/src/parser/expression/constant_expression.cpp
index 487e18ae3634..dee0b506c1f5 100644
--- a/src/parser/expression/constant_expression.cpp
+++ b/src/parser/expression/constant_expression.cpp
@@ -20,8 +20,7 @@ bool ConstantExpression::Equals(const ConstantExpression *a, const ConstantExpre
 }
 
 hash_t ConstantExpression::Hash() const {
-	hash_t result = ParsedExpression::Hash();
-	return CombineHash(ValueOperations::Hash(value), result);
+	return ParsedExpression::Hash();
 }
 
 unique_ptr<ParsedExpression> ConstantExpression::Copy() const {
