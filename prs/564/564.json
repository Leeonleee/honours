{
  "repo": "duckdb/duckdb",
  "pull_number": 564,
  "instance_id": "duckdb__duckdb-564",
  "issue_numbers": [
    "560",
    "562"
  ],
  "base_commit": "117920d34f541558ca994fea7ce50a9133284cb0",
  "patch": "diff --git a/src/function/aggregate/distributive/sum.cpp b/src/function/aggregate/distributive/sum.cpp\nindex de629ff9b181..f09bdcc8c951 100644\n--- a/src/function/aggregate/distributive/sum.cpp\n+++ b/src/function/aggregate/distributive/sum.cpp\n@@ -29,7 +29,7 @@ struct SumOperation {\n \ttemplate <class INPUT_TYPE, class STATE, class OP>\n \tstatic void ConstantOperation(STATE *state, INPUT_TYPE *input, nullmask_t &nullmask, idx_t count) {\n \t\tstate->isset = true;\n-\t\tstate->value += input[0] * count;\n+\t\tstate->value += (double) input[0] * (double) count;\n \t}\n \n \ttemplate <class T, class STATE>\ndiff --git a/src/parser/expression/constant_expression.cpp b/src/parser/expression/constant_expression.cpp\nindex 487e18ae3634..dee0b506c1f5 100644\n--- a/src/parser/expression/constant_expression.cpp\n+++ b/src/parser/expression/constant_expression.cpp\n@@ -20,8 +20,7 @@ bool ConstantExpression::Equals(const ConstantExpression *a, const ConstantExpre\n }\n \n hash_t ConstantExpression::Hash() const {\n-\thash_t result = ParsedExpression::Hash();\n-\treturn CombineHash(ValueOperations::Hash(value), result);\n+\treturn ParsedExpression::Hash();\n }\n \n unique_ptr<ParsedExpression> ConstantExpression::Copy() const {\n",
  "test_patch": "diff --git a/test/rigger/test_rigger.cpp b/test/rigger/test_rigger.cpp\nindex 0a8d9f2cd8ed..0f9815d1cc26 100644\n--- a/test/rigger/test_rigger.cpp\n+++ b/test/rigger/test_rigger.cpp\n@@ -516,5 +516,20 @@ TEST_CASE(\"Tests found by Rigger\", \"[rigger]\") {\n \t\tresult = con.Query(\"SELECT * FROM t0 RIGHT JOIN t1 ON 0 WHERE t0.c0 OR t1.c0 BETWEEN t0.c0 AND 1;\");\n \t\tREQUIRE(CHECK_COLUMN(result, 0, {}));\n \t}\n+\tSECTION(\"560\") {\n+\t\t// Incorrect result for SUM() and negative number\n+\t\tREQUIRE_NO_FAIL(con.Query(\"CREATE TABLE t0 (c0 INT);\"));\n+\t\tREQUIRE_NO_FAIL(con.Query(\"INSERT INTO t0 VALUES (0);\"));\n+\t\tresult = con.Query(\"SELECT SUM(-1) FROM t0;\");\n+\t\tREQUIRE(CHECK_COLUMN(result, 0, {-1}));\n+\t}\n+\tSECTION(\"562\") {\n+\t\t// SELECT with CASE expression causes an assertion failure \"Assertion `!entry.first->Equals(&expr)' failed\"\n+\t\tREQUIRE_NO_FAIL(con.Query(\"CREATE TABLE t0(c0 INT);\"));\n+\t\tREQUIRE_FAIL(con.Query(\"SELECT * FROM t0 GROUP BY -4.40304405E8 ORDER BY (CASE 1 WHEN 0 THEN 0 ELSE -440304405 END);\"));\n+\t\tresult = con.Query(\"SELECT 1 FROM t0 GROUP BY -4.40304405E8 ORDER BY (CASE 1 WHEN 0 THEN 0 ELSE -440304405 END);\");\n+\t\tREQUIRE(CHECK_COLUMN(result, 0, {}));\n+\t}\n+\n \n }\n",
  "problem_statement": "Incorrect result for SUM() and negative number \nConsider the following statements:\r\n```sql\r\nCREATE TABLE t0 (c0 INT);\r\nINSERT INTO t0 VALUES (0);\r\nSELECT SUM(-1) FROM t0; -- expected: {-1}, actual: {1.8446744073709552e+19}\r\n```\r\nUnexpectedly, the `SELECT` returns `1.8446744073709552e+19`. Since `t0` contains only a single row, I would expect `-1` to be fetched. I found this based on commit 3cf167887fa9cd375a4b1c67d0b427affa0a1430.\nSELECT with CASE expression causes an assertion failure \"Assertion `!entry.first->Equals(&expr)' failed\"\nConsider the following statements:\r\n\r\n```sql\r\nCREATE TABLE t0(c0 INT);\r\nSELECT * FROM t0 GROUP BY -4.40304405E8 ORDER BY (CASE 1 WHEN 0 THEN 0 ELSE -440304405 END); -- Assertion `!entry.first->Equals(&expr)' failed.\r\n```\r\n\r\nWhen executing the debug build, the statements result in the following assertion failure:\r\n```\r\n/duckdb/src/planner/expression_binder/select_binder.cpp:54: duckdb::idx_t duckdb::SelectBinder::TryBindGroup(duckdb::ParsedExpression&, duckdb::idx_t): Assertion `!entry.first->Equals(&expr)' failed. \r\n```\r\n\r\nI found this based on commit 3cf167887fa9cd375a4b1c67d0b427affa0a1430.\n",
  "hints_text": "\n",
  "created_at": "2020-04-16T07:59:24Z"
}