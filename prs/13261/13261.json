{
  "repo": "duckdb/duckdb",
  "pull_number": 13261,
  "instance_id": "duckdb__duckdb-13261",
  "issue_numbers": [
    "13253"
  ],
  "base_commit": "bcb550d57ce07589ac65192f8873c6f969a62db3",
  "patch": "diff --git a/src/common/extra_type_info.cpp b/src/common/extra_type_info.cpp\nindex 88dacaf37ce3..6c09480c1eb3 100644\n--- a/src/common/extra_type_info.cpp\n+++ b/src/common/extra_type_info.cpp\n@@ -428,6 +428,9 @@ IntegerLiteralTypeInfo::IntegerLiteralTypeInfo() : ExtraTypeInfo(ExtraTypeInfoTy\n \n IntegerLiteralTypeInfo::IntegerLiteralTypeInfo(Value constant_value_p)\n     : ExtraTypeInfo(ExtraTypeInfoType::INTEGER_LITERAL_TYPE_INFO), constant_value(std::move(constant_value_p)) {\n+\tif (constant_value.IsNull()) {\n+\t\tthrow InternalException(\"Integer literal cannot be NULL\");\n+\t}\n }\n \n bool IntegerLiteralTypeInfo::EqualsInternal(ExtraTypeInfo *other_p) const {\ndiff --git a/src/core_functions/scalar/generic/least.cpp b/src/core_functions/scalar/generic/least.cpp\nindex f21f26adaedd..d91b49392007 100644\n--- a/src/core_functions/scalar/generic/least.cpp\n+++ b/src/core_functions/scalar/generic/least.cpp\n@@ -173,6 +173,9 @@ unique_ptr<FunctionData> BindLeastGreatest(ClientContext &context, ScalarFunctio\n \tcase LogicalTypeId::INTEGER_LITERAL:\n \t\tchild_type = IntegerLiteral::GetType(child_type);\n \t\tbreak;\n+\tcase LogicalTypeId::STRING_LITERAL:\n+\t\tchild_type = LogicalType::VARCHAR;\n+\t\tbreak;\n \tdefault:\n \t\tbreak;\n \t}\ndiff --git a/src/core_functions/scalar/union/union_extract.cpp b/src/core_functions/scalar/union/union_extract.cpp\nindex 828cd970d0ba..8478ad0fdc98 100644\n--- a/src/core_functions/scalar/union/union_extract.cpp\n+++ b/src/core_functions/scalar/union/union_extract.cpp\n@@ -45,7 +45,9 @@ static unique_ptr<FunctionData> UnionExtractBind(ClientContext &context, ScalarF\n \tif (arguments[0]->return_type.id() == LogicalTypeId::UNKNOWN) {\n \t\tthrow ParameterNotResolvedException();\n \t}\n-\tD_ASSERT(LogicalTypeId::UNION == arguments[0]->return_type.id());\n+\tif (arguments[0]->return_type.id() != LogicalTypeId::UNION) {\n+\t\tthrow BinderException(\"union_extract can only take a union parameter\");\n+\t}\n \tidx_t union_member_count = UnionType::GetMemberCount(arguments[0]->return_type);\n \tif (union_member_count == 0) {\n \t\tthrow InternalException(\"Can't extract something from an empty union\");\ndiff --git a/src/planner/binder/expression/bind_comparison_expression.cpp b/src/planner/binder/expression/bind_comparison_expression.cpp\nindex 151bf65a4563..2ec1611a5333 100644\n--- a/src/planner/binder/expression/bind_comparison_expression.cpp\n+++ b/src/planner/binder/expression/bind_comparison_expression.cpp\n@@ -145,7 +145,9 @@ LogicalType ExpressionBinder::GetExpressionReturnType(const Expression &expr) {\n \t\t}\n \t\tif (expr.return_type.IsIntegral()) {\n \t\t\tauto &constant = expr.Cast<BoundConstantExpression>();\n-\t\t\treturn LogicalType::INTEGER_LITERAL(constant.value);\n+\t\t\tif (!constant.value.IsNull()) {\n+\t\t\t\treturn LogicalType::INTEGER_LITERAL(constant.value);\n+\t\t\t}\n \t\t}\n \t}\n \treturn expr.return_type;\n",
  "test_patch": "diff --git a/test/issues/general/test_13252.test b/test/issues/general/test_13252.test\nnew file mode 100644\nindex 000000000000..95ef3bcb1728\n--- /dev/null\n+++ b/test/issues/general/test_13252.test\n@@ -0,0 +1,13 @@\n+# name: test/issues/general/test_13252.test\n+# description: DuckDB Internal Error with the UNION_EXTRACT\n+# group: [general]\n+\n+require json\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+statement error\n+WITH tbl1 AS (SELECT NULL AS u) SELECT UNION_EXTRACT(CAST(u AS JSON), 'a') FROM tbl1;\n+----\n+union_extract can only take a union parameter\ndiff --git a/test/sql/function/generic/test_least_greatest.test b/test/sql/function/generic/test_least_greatest.test\nindex 2b7883bd6f23..e743f1888f81 100644\n--- a/test/sql/function/generic/test_least_greatest.test\n+++ b/test/sql/function/generic/test_least_greatest.test\n@@ -11,6 +11,11 @@ SELECT LEAST(1)\n ----\n 1\n \n+query I\n+SELECT LEAST('hello world')\n+----\n+hello world\n+\n query I\n SELECT LEAST(1, 3)\n ----\n",
  "problem_statement": "(Nightly Build) Fuzzer: DuckDB Internal Error with the LEAST function\n### What happens?\n\nDuckDB with the nightly build throws an internal error with the LEAST function.\n\n### To Reproduce\n\nPoC (Any of the following can trigger this internal error):\r\n```sql\r\nSELECT LEAST('');\r\nSELECT GREATEST('');\r\nSELECT LEAST('abc');\r\n```\r\n\r\nOutput:\r\n```\r\nINTERNAL Error: Function greatest returned a STRING_LITERAL or INTEGER_LITERAL type - return an explicit type instead\r\n```\r\n\r\nThe internal error seems to occur when there is only one string argument with the LEAST/GREATEST function.\n\n### OS:\n\nUbuntu 20.04\n\n### DuckDB Version:\n\nv1.0.1-dev3548 and v1.0.1-dev3542\n\n### DuckDB Client:\n\nCli and Python\n\n### Full Name:\n\nJingzhou Fu\n\n### Affiliation:\n\nWingtecher Lab of Tsinghua University and ShuiMuYuLin Ltd.\n\n### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.\n\nI have tested with a source build\n\n### Did you include all relevant data sets for reproducing the issue?\n\nNot applicable - the reproduction does not require a data set\n\n### Did you include all code required to reproduce the issue?\n\n- [X] Yes, I have\n\n### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?\n\n- [X] Yes, I have\n",
  "hints_text": "",
  "created_at": "2024-08-01T10:56:23Z"
}