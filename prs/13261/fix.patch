diff --git a/src/common/extra_type_info.cpp b/src/common/extra_type_info.cpp
index 88dacaf37ce3..6c09480c1eb3 100644
--- a/src/common/extra_type_info.cpp
+++ b/src/common/extra_type_info.cpp
@@ -428,6 +428,9 @@ IntegerLiteralTypeInfo::IntegerLiteralTypeInfo() : ExtraTypeInfo(ExtraTypeInfoTy
 
 IntegerLiteralTypeInfo::IntegerLiteralTypeInfo(Value constant_value_p)
     : ExtraTypeInfo(ExtraTypeInfoType::INTEGER_LITERAL_TYPE_INFO), constant_value(std::move(constant_value_p)) {
+	if (constant_value.IsNull()) {
+		throw InternalException("Integer literal cannot be NULL");
+	}
 }
 
 bool IntegerLiteralTypeInfo::EqualsInternal(ExtraTypeInfo *other_p) const {
diff --git a/src/core_functions/scalar/generic/least.cpp b/src/core_functions/scalar/generic/least.cpp
index f21f26adaedd..d91b49392007 100644
--- a/src/core_functions/scalar/generic/least.cpp
+++ b/src/core_functions/scalar/generic/least.cpp
@@ -173,6 +173,9 @@ unique_ptr<FunctionData> BindLeastGreatest(ClientContext &context, ScalarFunctio
 	case LogicalTypeId::INTEGER_LITERAL:
 		child_type = IntegerLiteral::GetType(child_type);
 		break;
+	case LogicalTypeId::STRING_LITERAL:
+		child_type = LogicalType::VARCHAR;
+		break;
 	default:
 		break;
 	}
diff --git a/src/core_functions/scalar/union/union_extract.cpp b/src/core_functions/scalar/union/union_extract.cpp
index 828cd970d0ba..8478ad0fdc98 100644
--- a/src/core_functions/scalar/union/union_extract.cpp
+++ b/src/core_functions/scalar/union/union_extract.cpp
@@ -45,7 +45,9 @@ static unique_ptr<FunctionData> UnionExtractBind(ClientContext &context, ScalarF
 	if (arguments[0]->return_type.id() == LogicalTypeId::UNKNOWN) {
 		throw ParameterNotResolvedException();
 	}
-	D_ASSERT(LogicalTypeId::UNION == arguments[0]->return_type.id());
+	if (arguments[0]->return_type.id() != LogicalTypeId::UNION) {
+		throw BinderException("union_extract can only take a union parameter");
+	}
 	idx_t union_member_count = UnionType::GetMemberCount(arguments[0]->return_type);
 	if (union_member_count == 0) {
 		throw InternalException("Can't extract something from an empty union");
diff --git a/src/planner/binder/expression/bind_comparison_expression.cpp b/src/planner/binder/expression/bind_comparison_expression.cpp
index 151bf65a4563..2ec1611a5333 100644
--- a/src/planner/binder/expression/bind_comparison_expression.cpp
+++ b/src/planner/binder/expression/bind_comparison_expression.cpp
@@ -145,7 +145,9 @@ LogicalType ExpressionBinder::GetExpressionReturnType(const Expression &expr) {
 		}
 		if (expr.return_type.IsIntegral()) {
 			auto &constant = expr.Cast<BoundConstantExpression>();
-			return LogicalType::INTEGER_LITERAL(constant.value);
+			if (!constant.value.IsNull()) {
+				return LogicalType::INTEGER_LITERAL(constant.value);
+			}
 		}
 	}
 	return expr.return_type;
