{
  "repo": "duckdb/duckdb",
  "pull_number": 13236,
  "instance_id": "duckdb__duckdb-13236",
  "issue_numbers": [
    "13222"
  ],
  "base_commit": "ffc04a8f3d9b1e4a49351bdf0416421125a7c3c1",
  "patch": "diff --git a/src/storage/local_storage.cpp b/src/storage/local_storage.cpp\nindex 83618f33b69a..f44527e6cd89 100644\n--- a/src/storage/local_storage.cpp\n+++ b/src/storage/local_storage.cpp\n@@ -440,6 +440,9 @@ void LocalStorage::Flush(DataTable &table, LocalTableStorage &storage) {\n \t\treturn;\n \t}\n \tif (storage.row_groups->GetTotalRows() <= storage.deleted_rows) {\n+\t\t// all rows that we added were deleted\n+\t\t// rollback any partial blocks that are still outstanding\n+\t\tstorage.Rollback();\n \t\treturn;\n \t}\n \tidx_t append_count = storage.row_groups->GetTotalRows() - storage.deleted_rows;\n",
  "test_patch": "diff --git a/test/sql/storage/optimistic_write/optimistic_write_delete_all.test_slow b/test/sql/storage/optimistic_write/optimistic_write_delete_all.test_slow\nnew file mode 100644\nindex 000000000000..3aa05186eaa3\n--- /dev/null\n+++ b/test/sql/storage/optimistic_write/optimistic_write_delete_all.test_slow\n@@ -0,0 +1,21 @@\n+# name: test/sql/storage/optimistic_write/optimistic_write_delete_all.test_slow\n+# description: Test optimistic writes to a table followed by deleting all rows\n+# group: [optimistic_write]\n+\n+# load the DB from disk\n+load __TEST_DIR__/optimistic_write_delete_all.db\n+\n+statement ok\n+create table foo  (d double);\n+\n+statement ok\n+begin;\n+\n+statement ok\n+insert into foo select random() from generate_series(1, 1000000) g(g);\n+\n+statement ok\n+delete from foo;\n+\n+statement ok\n+commit;\n",
  "problem_statement": "IsFlushed() assertion fail\n### What happens?\n\nAssertion is triggered, see repro.\n\n### To Reproduce\n\n```\r\n~/git-sandbox/duckdb (main)$ ./build/duckdb foodb\r\nv1.0.1-dev3542 22040decf7\r\nEnter \".help\" for usage hints.\r\nD create table foo  (d double);\r\nD begin;\r\nD insert into foo select random() from generate_series(1, 1000000) g(g);\r\nD delete from foo;\r\nD commit;\r\nterminate called after throwing an instance of 'duckdb::InternalException'\r\n  what():  {\"exception_type\":\"INTERNAL\",\"exception_message\":\"Assertion triggered in file \\\"/home/heikki/git-sandbox/duckdb/src/storage/table/column_checkpoint_state.cpp\\\" on line 32: IsFlushed() || Exception::UncaughtException()\"}\r\nAborted\r\n```\r\n\r\nBacktrace:\r\n```\r\n(rr) bt\r\n#0  0x00007f5fe96a6b0c in ?? () from /lib/x86_64-linux-gnu/libc.so.6\r\n#1  0x00007f5fe96584e2 in raise () from /lib/x86_64-linux-gnu/libc.so.6\r\n#2  0x00007f5fe96414ed in abort () from /lib/x86_64-linux-gnu/libc.so.6\r\n#3  0x00007f5fe98a1a3d in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6\r\n#4  0x00007f5fe98b2f9a in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6\r\n#5  0x00007f5fe98a14e3 in __cxa_call_terminate () from /lib/x86_64-linux-gnu/libstdc++.so.6\r\n#6  0x00007f5fe98b2830 in __gxx_personality_v0 () from /lib/x86_64-linux-gnu/libstdc++.so.6\r\n#7  0x00007f5fea3450d9 in ?? () from /lib/x86_64-linux-gnu/libgcc_s.so.1\r\n#8  0x00007f5fea3457b1 in _Unwind_RaiseException () from /lib/x86_64-linux-gnu/libgcc_s.so.1\r\n#9  0x00007f5fe98b320b in __cxa_throw () from /lib/x86_64-linux-gnu/libstdc++.so.6\r\n#10 0x000055d2c67d0a7a in duckdb::DuckDBAssertInternal (condition=false, condition_name=0x55d2cfa28ac0 \"IsFlushed() || Exception::UncaughtException()\", \r\n    file=0x55d2cfa289e0 \"/home/heikki/git-sandbox/duckdb/src/storage/table/column_checkpoint_state.cpp\", linenr=32) at /home/heikki/git-sandbox/duckdb/src/common/assert.cpp:14\r\n#11 0x000055d2c85002cc in duckdb::PartialBlockForCheckpoint::~PartialBlockForCheckpoint (this=0x50b000105de0, __in_chrg=<optimized out>)\r\n    at /home/heikki/git-sandbox/duckdb/src/storage/table/column_checkpoint_state.cpp:32\r\n#12 0x000055d2c85004e4 in duckdb::PartialBlockForCheckpoint::~PartialBlockForCheckpoint (this=0x50b000105de0, __in_chrg=<optimized out>)\r\n    at /home/heikki/git-sandbox/duckdb/src/storage/table/column_checkpoint_state.cpp:33\r\n#13 0x000055d2c71c5dbb in std::default_delete<duckdb::PartialBlock>::operator() (this=0x5040000a8df8, __ptr=0x50b000105de0) at /usr/include/c++/12/bits/unique_ptr.h:95\r\n#14 0x000055d2c71be6d7 in std::unique_ptr<duckdb::PartialBlock, std::default_delete<duckdb::PartialBlock> >::~unique_ptr (this=0x5040000a8df8, __in_chrg=<optimized out>)\r\n    at /usr/include/c++/12/bits/unique_ptr.h:396\r\n#15 0x000055d2c71b885d in duckdb::unique_ptr<duckdb::PartialBlock, std::default_delete<duckdb::PartialBlock>, true>::~unique_ptr (this=0x5040000a8df8, __in_chrg=<optimized out>)\r\n    at /home/heikki/git-sandbox/duckdb/src/include/duckdb/common/unique_ptr.hpp:13\r\n#16 0x000055d2c896ef13 in std::pair<unsigned long const, duckdb::unique_ptr<duckdb::PartialBlock, std::default_delete<duckdb::PartialBlock>, true> >::~pair (this=0x5040000a8df0, \r\n    __in_chrg=<optimized out>) at /usr/include/c++/12/bits/stl_pair.h:185\r\n#17 0x000055d2c896ef57 in std::__new_allocator<std::_Rb_tree_node<std::pair<unsigned long const, duckdb::unique_ptr<duckdb::PartialBlock, std::default_delete<duckdb::PartialBlock>, true> > > >::destroy<std::pair<unsigned long const, duckdb::unique_ptr<duckdb::PartialBlock, std::default_delete<duckdb::PartialBlock>, true> > > (this=0x50f000000ad0, __p=0x5040000a8df0)\r\n    at /usr/include/c++/12/bits/new_allocator.h:181\r\n#18 0x000055d2c895c713 in std::allocator_traits<std::allocator<std::_Rb_tree_node<std::pair<unsigned long const, duckdb::unique_ptr<duckdb::PartialBlock, std::default_delete<duckdb::PartialBlock>, true> > > > >::destroy<std::pair<unsigned long const, duckdb::unique_ptr<duckdb::PartialBlock, std::default_delete<duckdb::PartialBlock>, true> > > (__a=..., __p=0x5040000a8df0)\r\n    at /usr/include/c++/12/bits/alloc_traits.h:535\r\n#19 0x000055d2c89440cd in std::_Rb_tree<unsigned long, std::pair<unsigned long const, duckdb::unique_ptr<duckdb::PartialBlock, std::default_delete<duckdb::PartialBlock>, true> >, std::_Select1st<std::pair<unsigned long const, duckdb::unique_ptr<duckdb::PartialBlock, std::default_delete<duckdb::PartialBlock>, true> > >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, duckdb::unique_ptr<duckdb::PartialBlock, std::default_delete<duckdb::PartialBlock>, true> > > >::_M_destroy_node (this=0x50f000000ad0, __p=0x5040000a8dd0)\r\n    at /usr/include/c++/12/bits/stl_tree.h:623\r\n#20 0x000055d2c8924e1f in std::_Rb_tree<unsigned long, std::pair<unsigned long const, duckdb::unique_ptr<duckdb::PartialBlock, std::default_delete<duckdb::PartialBlock>, true> >, std::_Select1st<std::pair<unsigned long const, duckdb::unique_ptr<duckdb::PartialBlock, std::default_delete<duckdb::PartialBlock>, true> > >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, duckdb::unique_ptr<duckdb::PartialBlock, std::default_delete<duckdb::PartialBlock>, true> > > >::_M_drop_node (this=0x50f000000ad0, __p=0x5040000a8dd0)\r\n    at /usr/include/c++/12/bits/stl_tree.h:631\r\n#21 0x000055d2c88fa732 in std::_Rb_tree<unsigned long, std::pair<unsigned long const, duckdb::unique_ptr<duckdb::PartialBlock, std::default_delete<duckdb::PartialBlock>, true> >, std::_Select1st<std::pair<unsigned long const, duckdb::unique_ptr<duckdb::PartialBlock, std::default_delete<duckdb::PartialBlock>, true> > >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, duckdb::unique_ptr<duckdb::PartialBlock, std::default_delete<duckdb::PartialBlock>, true> > > >::_M_erase (this=0x50f000000ad0, __x=0x5040000a8dd0)\r\n    at /usr/include/c++/12/bits/stl_tree.h:1937\r\n#22 0x000055d2c88c47fe in std::_Rb_tree<unsigned long, std::pair<unsigned long const, duckdb::unique_ptr<duckdb::PartialBlock, std::default_delete<duckdb::PartialBlock>, true> >, std::_Select1st<std::pair<unsigned long const, duckdb::unique_ptr<duckdb::PartialBlock, std::default_delete<duckdb::PartialBlock>, true> > >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, duckdb::unique_ptr<duckdb::PartialBlock, std::default_delete<duckdb::PartialBlock>, true> > > >::~_Rb_tree (this=0x50f000000ad0, __in_chrg=<optimized out>)\r\n    at /usr/include/c++/12/bits/stl_tree.h:984\r\n#23 0x000055d2c889498f in std::multimap<unsigned long, duckdb::unique_ptr<duckdb::PartialBlock, std::default_delete<duckdb::PartialBlock>, true>, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, duckdb::unique_ptr<duckdb::PartialBlock, std::default_delete<duckdb::PartialBlock>, true> > > >::~multimap (this=0x50f000000ad0, __in_chrg=<optimized out>)\r\n    at /usr/include/c++/12/bits/stl_multimap.h:301\r\n--Type <RET> for more, q to quit, c to continue without paging--\r\n#24 0x000055d2c8834f3f in duckdb::PartialBlockManager::~PartialBlockManager (this=0x50f000000a90, __in_chrg=<optimized out>)\r\n    at /home/heikki/git-sandbox/duckdb/src/storage/partial_block_manager.cpp:50\r\n#25 0x000055d2c8834fae in duckdb::PartialBlockManager::~PartialBlockManager (this=0x50f000000a90, __in_chrg=<optimized out>)\r\n    at /home/heikki/git-sandbox/duckdb/src/storage/partial_block_manager.cpp:50\r\n#26 0x000055d2c88f8075 in std::default_delete<duckdb::PartialBlockManager>::operator() (this=0x5100000027d0, __ptr=0x50f000000a90) at /usr/include/c++/12/bits/unique_ptr.h:95\r\n#27 0x000055d2c88c35f5 in std::unique_ptr<duckdb::PartialBlockManager, std::default_delete<duckdb::PartialBlockManager> >::~unique_ptr (this=0x5100000027d0, __in_chrg=<optimized out>)\r\n    at /usr/include/c++/12/bits/unique_ptr.h:396\r\n#28 0x000055d2c8894425 in duckdb::unique_ptr<duckdb::PartialBlockManager, std::default_delete<duckdb::PartialBlockManager>, true>::~unique_ptr (this=0x5100000027d0, \r\n    __in_chrg=<optimized out>) at /home/heikki/git-sandbox/duckdb/src/include/duckdb/common/unique_ptr.hpp:13\r\n#29 0x000055d2c8830ff1 in duckdb::OptimisticDataWriter::~OptimisticDataWriter (this=0x5100000027c8, __in_chrg=<optimized out>)\r\n    at /home/heikki/git-sandbox/duckdb/src/storage/optimistic_data_writer.cpp:18\r\n#30 0x000055d2c87e4757 in duckdb::LocalTableStorage::~LocalTableStorage (this=0x510000002750, __in_chrg=<optimized out>) at /home/heikki/git-sandbox/duckdb/src/storage/local_storage.cpp:72\r\n#31 0x000055d2c898d035 in std::_Destroy<duckdb::LocalTableStorage> (__pointer=0x510000002750) at /usr/include/c++/12/bits/stl_construct.h:151\r\n#32 0x000055d2c898cef9 in std::allocator_traits<std::allocator<void> >::destroy<duckdb::LocalTableStorage> (__p=0x510000002750) at /usr/include/c++/12/bits/alloc_traits.h:648\r\n#33 0x000055d2c898bf6b in std::_Sp_counted_ptr_inplace<duckdb::LocalTableStorage, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose (this=0x510000002740)\r\n    at /usr/include/c++/12/bits/shared_ptr_base.h:613\r\n#34 0x000055d2c5aac50d in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release_last_use (this=0x510000002740) at /usr/include/c++/12/bits/shared_ptr_base.h:175\r\n#35 0x000055d2c5aac35c in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release_last_use_cold (this=0x510000002740) at /usr/include/c++/12/bits/shared_ptr_base.h:199\r\n#36 0x000055d2c5aa3706 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x510000002740) at /usr/include/c++/12/bits/shared_ptr_base.h:353\r\n#37 0x000055d2c5aacaac in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=0x7f5fe7064f68, __in_chrg=<optimized out>)\r\n    at /usr/include/c++/12/bits/shared_ptr_base.h:1071\r\n#38 0x000055d2c888a2d7 in std::__shared_ptr<duckdb::LocalTableStorage, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=0x7f5fe7064f60, __in_chrg=<optimized out>)\r\n    at /usr/include/c++/12/bits/shared_ptr_base.h:1524\r\n#39 0x000055d2c88e3d39 in std::__shared_ptr<duckdb::LocalTableStorage, (__gnu_cxx::_Lock_policy)2>::reset (this=0x50400008fce0) at /usr/include/c++/12/bits/shared_ptr_base.h:1642\r\n#40 0x000055d2c88b2677 in duckdb::shared_ptr<duckdb::LocalTableStorage, true>::reset (this=0x50400008fce0)\r\n    at /home/heikki/git-sandbox/duckdb/src/include/duckdb/common/shared_ptr_ipp.hpp:159\r\n#41 0x000055d2c87f04cc in duckdb::LocalStorage::Commit (this=0x50b00003af80) at /home/heikki/git-sandbox/duckdb/src/storage/local_storage.cpp:487\r\n#42 0x000055d2c899f0b5 in duckdb::DuckTransaction::WriteToWAL (this=0x5120000694c0, db=..., commit_state=...) at /home/heikki/git-sandbox/duckdb/src/transaction/duck_transaction.cpp:188\r\n#43 0x000055d2c8994dd5 in duckdb::DuckTransactionManager::CommitTransaction (this=0x51200003cdc0, context=..., transaction_p=...)\r\n    at /home/heikki/git-sandbox/duckdb/src/transaction/duck_transaction_manager.cpp:242\r\n#44 0x000055d2c89a4c23 in duckdb::MetaTransaction::Commit (this=0x511000045640) at /home/heikki/git-sandbox/duckdb/src/transaction/meta_transaction.cpp:124\r\n#45 0x000055d2c89aa50b in duckdb::TransactionContext::Commit (this=0x51600004f798) at /home/heikki/git-sandbox/duckdb/src/transaction/transaction_context.cpp:46\r\n#46 0x000055d2cb7a3feb in duckdb::PhysicalTransaction::GetData (this=0x50d000094180, context=..., chunk=..., input=...)\r\n    at /home/heikki/git-sandbox/duckdb/src/execution/operator/helper/physical_transaction.cpp:52\r\n#47 0x000055d2c7bba066 in duckdb::PipelineExecutor::GetData (this=0x51500136eb80, chunk=..., input=...) at /home/heikki/git-sandbox/duckdb/src/parallel/pipeline_executor.cpp:466\r\n#48 0x000055d2c7bba82a in duckdb::PipelineExecutor::FetchFromSource (this=0x51500136eb80, result=...) at /home/heikki/git-sandbox/duckdb/src/parallel/pipeline_executor.cpp:492\r\n#49 0x000055d2c7bb576f in duckdb::PipelineExecutor::Execute (this=0x51500136eb80, max_chunks=50) at /home/heikki/git-sandbox/duckdb/src/parallel/pipeline_executor.cpp:203\r\n#50 0x000055d2c7ba12e1 in duckdb::PipelineTask::ExecuteTask (this=0x5060002ffd80, mode=duckdb::TaskExecutionMode::PROCESS_PARTIAL)\r\n    at /home/heikki/git-sandbox/duckdb/src/parallel/pipeline.cpp:40\r\n#51 0x000055d2c7b8644b in duckdb::ExecutorTask::Execute (this=0x5060002ffd80, mode=duckdb::TaskExecutionMode::PROCESS_PARTIAL)\r\n    at /home/heikki/git-sandbox/duckdb/src/parallel/executor_task.cpp:32\r\n#52 0x000055d2c7b97f3a in duckdb::Executor::ExecuteTask (this=0x51400004a040, dry_run=false) at /home/heikki/git-sandbox/duckdb/src/parallel/executor.cpp:575\r\n#53 0x000055d2c7692bb2 in duckdb::ClientContext::ExecuteTaskInternal (this=0x51600004f590, lock=..., result=..., dry_run=false)\r\n    at /home/heikki/git-sandbox/duckdb/src/main/client_context.cpp:556\r\n#54 0x000055d2c76f1611 in duckdb::PendingQueryResult::ExecuteTaskInternal (this=0x51300000b800, lock=...) at /home/heikki/git-sandbox/duckdb/src/main/pending_query_result.cpp:68\r\n#55 0x000055d2c76f1b84 in duckdb::PendingQueryResult::ExecuteInternal (this=0x51300000b800, lock=...) at /home/heikki/git-sandbox/duckdb/src/main/pending_query_result.cpp:75\r\n#56 0x000055d2c76f2464 in duckdb::PendingQueryResult::Execute (this=0x51300000b800) at /home/heikki/git-sandbox/duckdb/src/main/pending_query_result.cpp:95\r\n#57 0x000055d2c76f528d in duckdb::PreparedStatement::Execute (this=0x512000109540, values=..., allow_stream_result=false)\r\n--Type <RET> for more, q to quit, c to continue without paging--\r\n    at /home/heikki/git-sandbox/duckdb/src/main/prepared_statement.cpp:85\r\n#58 0x000055d2c5a8e9cd in duckdb_shell_sqlite3_print_duckbox (pStmt=0x50c000001480, max_rows=40, max_width=0, null_value=0x7f5fe770015c \"\", columnar=0)\r\n    at /home/heikki/git-sandbox/duckdb/tools/sqlite3_api_wrapper/sqlite3_api_wrapper.cpp:249\r\n#59 0x000055d2c5a1585c in exec_prepared_stmt (pArg=0x7f5fe7700040, pStmt=0x50c000001480) at /home/heikki/git-sandbox/duckdb/tools/shell/shell.c:12750\r\n#60 0x000055d2c5984d7e in shell_exec (pArg=0x7f5fe7700040, zSql=0x50d000000380 \"commit;\", pzErrMsg=0x7f5fe7040460) at /home/heikki/git-sandbox/duckdb/tools/shell/shell.c:13085\r\n#61 0x000055d2c5a21e16 in runOneSqlLine (p=0x7f5fe7700040, zSql=0x50d000000380 \"commit;\", in=0x0, startline=5) at /home/heikki/git-sandbox/duckdb/tools/shell/shell.c:19271\r\n#62 0x000055d2c59887b2 in process_input (p=0x7f5fe7700040) at /home/heikki/git-sandbox/duckdb/tools/shell/shell.c:19382\r\n#63 0x000055d2c594e9b0 in main (argc=2, argv=0x7ffec14ba958) at /home/heikki/git-sandbox/duckdb/tools/shell/shell.c:20204\r\n```\r\n\n\n### OS:\n\nDebian, x64\n\n### DuckDB Version:\n\nBuilt from sources, commit 22040decf7ad0d87b449a87e6cb805978e34a5c1\n\n### DuckDB Client:\n\nduckdb's own CLI\n\n### Full Name:\n\nHeikki Linnakangas\n\n### Affiliation:\n\nNeon\n\n### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.\n\nI have tested with a source build\n\n### Did you include all relevant data sets for reproducing the issue?\n\nYes\n\n### Did you include all code required to reproduce the issue?\n\n- [X] Yes, I have\n\n### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?\n\n- [X] Yes, I have\n",
  "hints_text": "At first glance this sounds like an issue that we've already fixed on `main`\r\n\r\nHmm it might be a slightly different variation actually.\r\nIf I recall correctly the issue there was that we attempted to flush a table after it was deleted if it was created+deleted in the same transaction\nI can't reproduce this on main on MacOS ARM M2\r\n\r\n```\r\n\u279c  duckdb git:(html_tree_renderer) \u2717 ./build/release/duckdb tmp/persistent.db\r\nv1.0.1-dev3552 ecee9b6581\r\nEnter \".help\" for usage hints.\r\nD create table foo  (d double);\r\nD begin;\r\nD insert into foo select random() from generate_series(1, 1000000) g(g);\r\nD delete from foo;\r\nD commit;\r\nD checkpoint;\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 Success \u2502\r\n\u2502 boolean \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 0 rows  \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\n(threw in a checkpoint for good measure)\nIt's an assertion so I assume you need a debug build",
  "created_at": "2024-07-31T14:47:36Z"
}