{
  "repo": "duckdb/duckdb",
  "pull_number": 17045,
  "instance_id": "duckdb__duckdb-17045",
  "issue_numbers": [
    "17042"
  ],
  "base_commit": "5141aa45606ea74dd46cc86cbe60a04134037145",
  "patch": "diff --git a/src/optimizer/pushdown/pushdown_left_join.cpp b/src/optimizer/pushdown/pushdown_left_join.cpp\nindex 002bb2540de8..d8ef8b17e4d3 100644\n--- a/src/optimizer/pushdown/pushdown_left_join.cpp\n+++ b/src/optimizer/pushdown/pushdown_left_join.cpp\n@@ -127,15 +127,16 @@ unique_ptr<LogicalOperator> FilterPushdown::PushdownLeftJoin(unique_ptr<LogicalO\n \t\t\t\tfor (auto &left_filter : left_pushdown.filters) {\n \t\t\t\t\tfilters.push_back(std::move(left_filter));\n \t\t\t\t}\n+\t\t\t\tfor (auto &filter : remaining_filters) {\n+\t\t\t\t\tfilters.push_back(std::move(filter));\n+\t\t\t\t}\n \t\t\t\t// now push down the inner join\n \t\t\t\treturn PushdownInnerJoin(std::move(op), left_bindings, right_bindings);\n \t\t\t}\n-\t\t\t// we should keep the filters which only matched the right side\n-\t\t\tif (side == JoinSide::RIGHT) {\n-\t\t\t\tremaining_filters.push_back(std::move(filters[i]));\n-\t\t\t\tfilters.erase_at(i);\n-\t\t\t\ti--;\n-\t\t\t}\n+\t\t\t// we should keep the filters which do not remove NULL values\n+\t\t\tremaining_filters.push_back(std::move(filters[i]));\n+\t\t\tfilters.erase_at(i);\n+\t\t\ti--;\n \t\t}\n \t}\n \t// finally we check the FilterCombiner to see if there are any predicates we can push into the RHS\n",
  "test_patch": "diff --git a/test/optimizer/pushdown/issue_17042.test b/test/optimizer/pushdown/issue_17042.test\nnew file mode 100644\nindex 000000000000..58030d71f88f\n--- /dev/null\n+++ b/test/optimizer/pushdown/issue_17042.test\n@@ -0,0 +1,38 @@\n+# name: test/optimizer/pushdown/issue_17042.test\n+# description: Test left join filter lost in filter pushdown\n+# group: [pushdown]\n+\n+statement ok\n+pragma explain_output = optimized_only\n+\n+statement ok\n+pragma enable_verification\n+\n+statement ok\n+CREATE  TABLE  t2(c1 INTEGER);\n+\n+statement ok\n+CREATE  TABLE  t0(c1 DOUBLE);\n+\n+statement ok\n+INSERT INTO t0(c1) VALUES (0.1);\n+\n+statement ok\n+INSERT INTO t2(c1) VALUES (2);\n+\n+query II\n+SELECT * FROM t2 LEFT JOIN t0 ON true WHERE ((t0.c1<t2.c1) IS NULL);\n+----\n+\n+statement ok\n+INSERT INTO t2(c1) VALUES (NULL);\n+\n+query II\n+SELECT * FROM t2 LEFT JOIN t0 ON true WHERE ((t0.c1<t2.c1) IS NULL);\n+----\n+NULL\t0.1\n+\n+query II\n+explain SELECT * FROM t2 LEFT JOIN t0 ON true WHERE (t0.c1 is distinct from t2.c1) and (t2.c1 > t0.c1);\n+----\n+logical_opt\t<REGEX>:.*INNER.*CAST\\(c1 AS DOUBLE\\) > c1.*CAST\\(c1 AS DOUBLE\\) IS.*DISTINCT FROM c1.*\n",
  "problem_statement": "Unexpected result when using `LEFT JOIN`\n### What happens?\n\nConsider the below test case. The third query returns an unexpected result since the expression `t0.c1 < t2.c1` cannot be evaluated as `true` or `NULL` at the same time. \n\n### To Reproduce\n\n```sql\nCREATE  TABLE  t2(c1 INTEGER);\nCREATE  TABLE  t0(c1 DOUBLE);\nINSERT INTO t0(c1) VALUES ( 0.1);\nINSERT INTO t2(c1) VALUES (2);\n\nSELECT * FROM t2 LEFT  JOIN t0 ON true; -- 2 0.1\nSELECT * FROM t2 LEFT  JOIN t0 ON true WHERE (t0.c1<t2.c1); -- 2 0.1\nSELECT * FROM t2 LEFT  JOIN t0 ON true WHERE ((t0.c1<t2.c1) IS NULL);\n-- Expected: empty result set\n-- Actual: 2 0.1\n\n```\n\n### OS:\n\nUbuntu 22.04\n\n### DuckDB Version:\n\nv1.3.0-dev2262 589e10ae54\n\n### DuckDB Client:\n\nCLI\n\n### Hardware:\n\n_No response_\n\n### Full Name:\n\nSuyang Zhong\n\n### Affiliation:\n\nNUS\n\n### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.\n\nI have tested with a source build\n\n### Did you include all relevant data sets for reproducing the issue?\n\nNot applicable - the reproduction does not require a data set\n\n### Did you include all code required to reproduce the issue?\n\n- [x] Yes, I have\n\n### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?\n\n- [x] Yes, I have\n",
  "hints_text": "",
  "created_at": "2025-04-09T11:19:04Z"
}