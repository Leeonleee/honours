You will be provided with a partial code base and an issue statement explaining a problem to resolve.
In your output, give nothing but the code (no markdown) so that your output can be copy pasted and run immediately with no changes.
In the patch file, please make sure to include the line numbers and a blank line at the end so it can be applied using git apply.

<issue>
ParsedExpression::Hasparameter returns false in case of replace list has placeholders
### What happens?

In following SQL, `HasParameter method` of `ParsedExpression` (`StarExpression`) returns false:

```sql
select * replace(i * $n as i)
from range(1, 10) t(i)
```

This SQL has a placeholder in replace list.

In current implementation, `ParsedExpression::HasParameter` method uses `ExpressionIterator::EnumerateChildren` method to iterate children.

https://github.com/duckdb/duckdb/blob/10c42435f1805ee4415faa5d6da4943e8c98fa55/src/planner/expression.cpp#L89

`ExpressionIterator::EnumerateChildren` is only captured `StarExpression::expr` field.
So `StarExpression::replace_list` does not capture.

https://github.com/duckdb/duckdb/blob/10c42435f1805ee4415faa5d6da4943e8c98fa55/src/parser/parsed_expression_iterator.cpp#L100

~~And I seems that `StarExpression::exclude_list` is not also captured in case of using lambda expression with placeholder.~~
EDIT: `exclude_list` does not contain `ParsedExpression. So it has no problem.

Is this expected behavior?


### To Reproduce

```cpp
std::string sql = "select * replace(i * $n as i) from range(1, 10) t(i)";
auto stmts = conn.ExtractStatements(sql);

auto& select_stmt = stmts[0]->Cast<duckdb::SelectStatement>();
auto& select_node = select_stmt.node->Cast<duckdb::SelectNode>();

std::cout << select_node.select_list[0]->HasParameter() << std::endl;
```

Expected result: true
Actual result: false


### OS:

MacOS Ventura 13.6.7 (x86_64 16GB RAM)

### DuckDB Version:

1.1.2

### DuckDB Client:

C++

### Hardware:

_No response_

### Full Name:

Kazuhiko TAMURA

### Affiliation:

No job

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have not tested with any build

### Did you include all relevant data sets for reproducing the issue?

No - Other reason (please specify in the issue body)

### Did you include all code required to reproduce the issue?

- [X] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [X] Yes, I have

</issue>
<code>
[start of README.md]
1: <div align="center">
2:   <picture>
3:     <source media="(prefers-color-scheme: light)" srcset="logo/DuckDB_Logo-horizontal.svg">
4:     <source media="(prefers-color-scheme: dark)" srcset="logo/DuckDB_Logo-horizontal-dark-mode.svg">
5:     <img alt="DuckDB logo" src="logo/DuckDB_Logo-horizontal.svg" height="100">
6:   </picture>
7: </div>
8: <br>
9: 
10: <p align="center">
11:   <a href="https://github.com/duckdb/duckdb/actions"><img src="https://github.com/duckdb/duckdb/actions/workflows/Main.yml/badge.svg?branch=main" alt="Github Actions Badge"></a>
12:   <a href="https://discord.gg/tcvwpjfnZx"><img src="https://shields.io/discord/909674491309850675" alt="discord" /></a>
13:   <a href="https://github.com/duckdb/duckdb/releases/"><img src="https://img.shields.io/github/v/release/duckdb/duckdb?color=brightgreen&display_name=tag&logo=duckdb&logoColor=white" alt="Latest Release"></a>
14: </p>
15: 
16: ## DuckDB
17: 
18: DuckDB is a high-performance analytical database system. It is designed to be fast, reliable, portable, and easy to use. DuckDB provides a rich SQL dialect, with support far beyond basic SQL. DuckDB supports arbitrary and nested correlated subqueries, window functions, collations, complex types (arrays, structs, maps), and [several extensions designed to make SQL easier to use](https://duckdb.org/docs/guides/sql_features/friendly_sql).
19: 
20: DuckDB is available as a [standalone CLI application](https://duckdb.org/docs/api/cli/overview) and has clients for [Python](https://duckdb.org/docs/api/python/overview), [R](https://duckdb.org/docs/api/r), [Java](https://duckdb.org/docs/api/java), [Wasm](https://duckdb.org/docs/api/wasm/overview), etc., with deep integrations with packages such as [pandas](https://duckdb.org/docs/guides/python/sql_on_pandas) and [dplyr](https://duckdblabs.github.io/duckplyr/).
21: 
22: For more information on using DuckDB, please refer to the [DuckDB documentation](https://duckdb.org/docs/).
23: 
24: ## Installation
25: 
26: If you want to install DuckDB, please see [our installation page](https://duckdb.org/docs/installation/) for instructions.
27: 
28: ## Data Import
29: 
30: For CSV files and Parquet files, data import is as simple as referencing the file in the FROM clause:
31: 
32: ```sql
33: SELECT * FROM 'myfile.csv';
34: SELECT * FROM 'myfile.parquet';
35: ```
36: 
37: Refer to our [Data Import](https://duckdb.org/docs/data/overview) section for more information.
38: 
39: ## SQL Reference
40: 
41: The documentation contains a [SQL introduction and reference](https://duckdb.org/docs/sql/introduction).
42: 
43: ## Development
44: 
45: For development, DuckDB requires [CMake](https://cmake.org), Python3 and a `C++11` compliant compiler. Run `make` in the root directory to compile the sources. For development, use `make debug` to build a non-optimized debug version. You should run `make unit` and `make allunit` to verify that your version works properly after making changes. To test performance, you can run `BUILD_BENCHMARK=1 BUILD_TPCH=1 make` and then perform several standard benchmarks from the root directory by executing `./build/release/benchmark/benchmark_runner`. The details of benchmarks are in our [Benchmark Guide](benchmark/README.md).
46: 
47: Please also refer to our [Build Guide](https://duckdb.org/dev/building) and [Contribution Guide](CONTRIBUTING.md).
48: 
49: ## Support
50: 
51: See the [Support Options](https://duckdblabs.com/support/) page.
[end of README.md]
[start of src/parser/parsed_expression_iterator.cpp]
1: #include "duckdb/parser/parsed_expression_iterator.hpp"
2: 
3: #include "duckdb/parser/expression/list.hpp"
4: #include "duckdb/parser/query_node.hpp"
5: #include "duckdb/parser/query_node/cte_node.hpp"
6: #include "duckdb/parser/query_node/recursive_cte_node.hpp"
7: #include "duckdb/parser/query_node/select_node.hpp"
8: #include "duckdb/parser/query_node/set_operation_node.hpp"
9: #include "duckdb/parser/tableref/list.hpp"
10: 
11: namespace duckdb {
12: 
13: void ParsedExpressionIterator::EnumerateChildren(const ParsedExpression &expression,
14:                                                  const std::function<void(const ParsedExpression &child)> &callback) {
15: 	EnumerateChildren((ParsedExpression &)expression, [&](unique_ptr<ParsedExpression> &child) {
16: 		D_ASSERT(child);
17: 		callback(*child);
18: 	});
19: }
20: 
21: void ParsedExpressionIterator::EnumerateChildren(ParsedExpression &expr,
22:                                                  const std::function<void(ParsedExpression &child)> &callback) {
23: 	EnumerateChildren(expr, [&](unique_ptr<ParsedExpression> &child) {
24: 		D_ASSERT(child);
25: 		callback(*child);
26: 	});
27: }
28: 
29: void ParsedExpressionIterator::EnumerateChildren(
30:     ParsedExpression &expr, const std::function<void(unique_ptr<ParsedExpression> &child)> &callback) {
31: 	switch (expr.expression_class) {
32: 	case ExpressionClass::BETWEEN: {
33: 		auto &cast_expr = expr.Cast<BetweenExpression>();
34: 		callback(cast_expr.input);
35: 		callback(cast_expr.lower);
36: 		callback(cast_expr.upper);
37: 		break;
38: 	}
39: 	case ExpressionClass::CASE: {
40: 		auto &case_expr = expr.Cast<CaseExpression>();
41: 		for (auto &check : case_expr.case_checks) {
42: 			callback(check.when_expr);
43: 			callback(check.then_expr);
44: 		}
45: 		callback(case_expr.else_expr);
46: 		break;
47: 	}
48: 	case ExpressionClass::CAST: {
49: 		auto &cast_expr = expr.Cast<CastExpression>();
50: 		callback(cast_expr.child);
51: 		break;
52: 	}
53: 	case ExpressionClass::COLLATE: {
54: 		auto &cast_expr = expr.Cast<CollateExpression>();
55: 		callback(cast_expr.child);
56: 		break;
57: 	}
58: 	case ExpressionClass::COMPARISON: {
59: 		auto &comp_expr = expr.Cast<ComparisonExpression>();
60: 		callback(comp_expr.left);
61: 		callback(comp_expr.right);
62: 		break;
63: 	}
64: 	case ExpressionClass::CONJUNCTION: {
65: 		auto &conj_expr = expr.Cast<ConjunctionExpression>();
66: 		for (auto &child : conj_expr.children) {
67: 			callback(child);
68: 		}
69: 		break;
70: 	}
71: 
72: 	case ExpressionClass::FUNCTION: {
73: 		auto &func_expr = expr.Cast<FunctionExpression>();
74: 		for (auto &child : func_expr.children) {
75: 			callback(child);
76: 		}
77: 		if (func_expr.filter) {
78: 			callback(func_expr.filter);
79: 		}
80: 		if (func_expr.order_bys) {
81: 			for (auto &order : func_expr.order_bys->orders) {
82: 				callback(order.expression);
83: 			}
84: 		}
85: 		break;
86: 	}
87: 	case ExpressionClass::LAMBDA: {
88: 		auto &lambda_expr = expr.Cast<LambdaExpression>();
89: 		callback(lambda_expr.lhs);
90: 		callback(lambda_expr.expr);
91: 		break;
92: 	}
93: 	case ExpressionClass::OPERATOR: {
94: 		auto &op_expr = expr.Cast<OperatorExpression>();
95: 		for (auto &child : op_expr.children) {
96: 			callback(child);
97: 		}
98: 		break;
99: 	}
100: 	case ExpressionClass::STAR: {
101: 		auto &star_expr = expr.Cast<StarExpression>();
102: 		if (star_expr.expr) {
103: 			callback(star_expr.expr);
104: 		}
105: 		break;
106: 	}
107: 	case ExpressionClass::SUBQUERY: {
108: 		auto &subquery_expr = expr.Cast<SubqueryExpression>();
109: 		if (subquery_expr.child) {
110: 			callback(subquery_expr.child);
111: 		}
112: 		break;
113: 	}
114: 	case ExpressionClass::WINDOW: {
115: 		auto &window_expr = expr.Cast<WindowExpression>();
116: 		for (auto &partition : window_expr.partitions) {
117: 			callback(partition);
118: 		}
119: 		for (auto &order : window_expr.orders) {
120: 			callback(order.expression);
121: 		}
122: 		for (auto &child : window_expr.children) {
123: 			callback(child);
124: 		}
125: 		if (window_expr.filter_expr) {
126: 			callback(window_expr.filter_expr);
127: 		}
128: 		if (window_expr.start_expr) {
129: 			callback(window_expr.start_expr);
130: 		}
131: 		if (window_expr.end_expr) {
132: 			callback(window_expr.end_expr);
133: 		}
134: 		if (window_expr.offset_expr) {
135: 			callback(window_expr.offset_expr);
136: 		}
137: 		if (window_expr.default_expr) {
138: 			callback(window_expr.default_expr);
139: 		}
140: 		break;
141: 	}
142: 	case ExpressionClass::BOUND_EXPRESSION:
143: 	case ExpressionClass::COLUMN_REF:
144: 	case ExpressionClass::LAMBDA_REF:
145: 	case ExpressionClass::CONSTANT:
146: 	case ExpressionClass::DEFAULT:
147: 	case ExpressionClass::PARAMETER:
148: 	case ExpressionClass::POSITIONAL_REFERENCE:
149: 		// these node types have no children
150: 		break;
151: 	default:
152: 		// called on non ParsedExpression type!
153: 		throw NotImplementedException("Unimplemented expression class");
154: 	}
155: }
156: 
157: void ParsedExpressionIterator::EnumerateQueryNodeModifiers(
158:     QueryNode &node, const std::function<void(unique_ptr<ParsedExpression> &child)> &callback) {
159: 
160: 	for (auto &modifier : node.modifiers) {
161: 		switch (modifier->type) {
162: 		case ResultModifierType::LIMIT_MODIFIER: {
163: 			auto &limit_modifier = modifier->Cast<LimitModifier>();
164: 			if (limit_modifier.limit) {
165: 				callback(limit_modifier.limit);
166: 			}
167: 			if (limit_modifier.offset) {
168: 				callback(limit_modifier.offset);
169: 			}
170: 		} break;
171: 
172: 		case ResultModifierType::LIMIT_PERCENT_MODIFIER: {
173: 			auto &limit_modifier = modifier->Cast<LimitPercentModifier>();
174: 			if (limit_modifier.limit) {
175: 				callback(limit_modifier.limit);
176: 			}
177: 			if (limit_modifier.offset) {
178: 				callback(limit_modifier.offset);
179: 			}
180: 		} break;
181: 
182: 		case ResultModifierType::ORDER_MODIFIER: {
183: 			auto &order_modifier = modifier->Cast<OrderModifier>();
184: 			for (auto &order : order_modifier.orders) {
185: 				callback(order.expression);
186: 			}
187: 		} break;
188: 
189: 		case ResultModifierType::DISTINCT_MODIFIER: {
190: 			auto &distinct_modifier = modifier->Cast<DistinctModifier>();
191: 			for (auto &target : distinct_modifier.distinct_on_targets) {
192: 				callback(target);
193: 			}
194: 		} break;
195: 
196: 		// do nothing
197: 		default:
198: 			break;
199: 		}
200: 	}
201: }
202: 
203: void ParsedExpressionIterator::EnumerateTableRefChildren(
204:     TableRef &ref, const std::function<void(unique_ptr<ParsedExpression> &child)> &expr_callback,
205:     const std::function<void(TableRef &ref)> &ref_callback) {
206: 	switch (ref.type) {
207: 	case TableReferenceType::EXPRESSION_LIST: {
208: 		auto &el_ref = ref.Cast<ExpressionListRef>();
209: 		for (idx_t i = 0; i < el_ref.values.size(); i++) {
210: 			for (idx_t j = 0; j < el_ref.values[i].size(); j++) {
211: 				expr_callback(el_ref.values[i][j]);
212: 			}
213: 		}
214: 		break;
215: 	}
216: 	case TableReferenceType::JOIN: {
217: 		auto &j_ref = ref.Cast<JoinRef>();
218: 		EnumerateTableRefChildren(*j_ref.left, expr_callback, ref_callback);
219: 		EnumerateTableRefChildren(*j_ref.right, expr_callback, ref_callback);
220: 		if (j_ref.condition) {
221: 			expr_callback(j_ref.condition);
222: 		}
223: 		break;
224: 	}
225: 	case TableReferenceType::PIVOT: {
226: 		auto &p_ref = ref.Cast<PivotRef>();
227: 		EnumerateTableRefChildren(*p_ref.source, expr_callback, ref_callback);
228: 		for (auto &aggr : p_ref.aggregates) {
229: 			expr_callback(aggr);
230: 		}
231: 		break;
232: 	}
233: 	case TableReferenceType::SUBQUERY: {
234: 		auto &sq_ref = ref.Cast<SubqueryRef>();
235: 		EnumerateQueryNodeChildren(*sq_ref.subquery->node, expr_callback, ref_callback);
236: 		break;
237: 	}
238: 	case TableReferenceType::TABLE_FUNCTION: {
239: 		auto &tf_ref = ref.Cast<TableFunctionRef>();
240: 		expr_callback(tf_ref.function);
241: 		break;
242: 	}
243: 	case TableReferenceType::BASE_TABLE:
244: 	case TableReferenceType::EMPTY_FROM:
245: 	case TableReferenceType::SHOW_REF:
246: 	case TableReferenceType::COLUMN_DATA:
247: 	case TableReferenceType::DELIM_GET:
248: 		// these TableRefs do not need to be unfolded
249: 		break;
250: 	case TableReferenceType::INVALID:
251: 	case TableReferenceType::CTE:
252: 		throw NotImplementedException("TableRef type not implemented for traversal");
253: 	}
254: 	ref_callback(ref);
255: }
256: 
257: void ParsedExpressionIterator::EnumerateQueryNodeChildren(
258:     QueryNode &node, const std::function<void(unique_ptr<ParsedExpression> &child)> &expr_callback,
259:     const std::function<void(TableRef &ref)> &ref_callback) {
260: 	switch (node.type) {
261: 	case QueryNodeType::RECURSIVE_CTE_NODE: {
262: 		auto &rcte_node = node.Cast<RecursiveCTENode>();
263: 		EnumerateQueryNodeChildren(*rcte_node.left, expr_callback, ref_callback);
264: 		EnumerateQueryNodeChildren(*rcte_node.right, expr_callback, ref_callback);
265: 		break;
266: 	}
267: 	case QueryNodeType::CTE_NODE: {
268: 		auto &cte_node = node.Cast<CTENode>();
269: 		EnumerateQueryNodeChildren(*cte_node.query, expr_callback, ref_callback);
270: 		EnumerateQueryNodeChildren(*cte_node.child, expr_callback, ref_callback);
271: 		break;
272: 	}
273: 	case QueryNodeType::SELECT_NODE: {
274: 		auto &sel_node = node.Cast<SelectNode>();
275: 		for (idx_t i = 0; i < sel_node.select_list.size(); i++) {
276: 			expr_callback(sel_node.select_list[i]);
277: 		}
278: 		for (idx_t i = 0; i < sel_node.groups.group_expressions.size(); i++) {
279: 			expr_callback(sel_node.groups.group_expressions[i]);
280: 		}
281: 		if (sel_node.where_clause) {
282: 			expr_callback(sel_node.where_clause);
283: 		}
284: 		if (sel_node.having) {
285: 			expr_callback(sel_node.having);
286: 		}
287: 		if (sel_node.qualify) {
288: 			expr_callback(sel_node.qualify);
289: 		}
290: 
291: 		EnumerateTableRefChildren(*sel_node.from_table.get(), expr_callback, ref_callback);
292: 		break;
293: 	}
294: 	case QueryNodeType::SET_OPERATION_NODE: {
295: 		auto &setop_node = node.Cast<SetOperationNode>();
296: 		EnumerateQueryNodeChildren(*setop_node.left, expr_callback, ref_callback);
297: 		EnumerateQueryNodeChildren(*setop_node.right, expr_callback, ref_callback);
298: 		break;
299: 	}
300: 	default:
301: 		throw NotImplementedException("QueryNode type not implemented for traversal");
302: 	}
303: 
304: 	if (!node.modifiers.empty()) {
305: 		EnumerateQueryNodeModifiers(node, expr_callback);
306: 	}
307: 
308: 	for (auto &kv : node.cte_map.map) {
309: 		EnumerateQueryNodeChildren(*kv.second->query->node, expr_callback, ref_callback);
310: 	}
311: }
312: 
313: } // namespace duckdb
[end of src/parser/parsed_expression_iterator.cpp]
</code>
Here is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.
<patch>
--- a/file.cpp
+++ b/file.cpp
@@ -3,35 +3,44 @@
 #include <cstdlib>
 
 int euclidean(int a, int b) {
-    while (b) {
-        int temp = b;
-        b = a % b;
-        a = temp;
+    if (b == 0) {
+        return a;
     }
-    return a;
+    return euclidean(b, a % b);
 }
 
 std::vector<std::pair<int, int>> bresenham(int x0, int y0, int x1, int y1) {
     std::vector<std::pair<int, int>> points;
     int dx = abs(x1 - x0);
     int dy = abs(y1 - y0);
+    int x = x0, y = y0;
     int sx = (x0 < x1) ? 1 : -1;
     int sy = (y0 < y1) ? 1 : -1;
-    int err = dx - dy;
 
-    while (true) {
-        points.emplace_back(x0, y0);
-        if (x0 == x1 && y0 == y1) break;
-        int e2 = 2 * err;
-        if (e2 > -dy) {
+    if (dx > dy) {
+        int err = dx / 2;
+        while (x != x1) {
+            points.emplace_back(x, y);
             err -= dy;
-            x0 += sx;
+            if (err < 0) {
+                y += sy;
+                err += dx;
+            }
+            x += sx;
         }
-        if (e2 < dx) {
-            err += dx;
-            y0 += sy;
+    } else {
+        int err = dy / 2;
+        while (y != y1) {
+            points.emplace_back(x, y);
+            err -= dx;
+            if (err < 0) {
+                x += sx;
+                err += dy;
+            }
+            y += sy;
         }
     }
 
+    points.emplace_back(x, y);
     return points;
 }

</patch>

I need you to solve the provided issue by generating a single patch file that I can apply directly to this repository using git apply.
Please respond with a single patch file in the format shown above.
Make sure to only include the patch file contents so that the contents of your output can be copied into a patch file and applied directly

Respond below: