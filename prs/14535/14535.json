{
  "repo": "duckdb/duckdb",
  "pull_number": 14535,
  "instance_id": "duckdb__duckdb-14535",
  "issue_numbers": [
    "14502"
  ],
  "base_commit": "dfdd7968262d912910d8249bde3524e068c67713",
  "patch": "diff --git a/src/parser/parsed_expression_iterator.cpp b/src/parser/parsed_expression_iterator.cpp\nindex 6d807800c206..8b29ed7fe560 100644\n--- a/src/parser/parsed_expression_iterator.cpp\n+++ b/src/parser/parsed_expression_iterator.cpp\n@@ -102,6 +102,9 @@ void ParsedExpressionIterator::EnumerateChildren(\n \t\tif (star_expr.expr) {\n \t\t\tcallback(star_expr.expr);\n \t\t}\n+\t\tfor (auto &item : star_expr.replace_list) {\n+\t\t\tcallback(item.second);\n+\t\t}\n \t\tbreak;\n \t}\n \tcase ExpressionClass::SUBQUERY: {\n",
  "test_patch": "diff --git a/test/api/test_api.cpp b/test/api/test_api.cpp\nindex 8df86cdf9f0b..da7136af22bb 100644\n--- a/test/api/test_api.cpp\n+++ b/test/api/test_api.cpp\n@@ -3,6 +3,8 @@\n #include \"duckdb/parser/parser.hpp\"\n #include \"duckdb/planner/logical_operator.hpp\"\n #include \"duckdb/main/connection_manager.hpp\"\n+#include \"duckdb/parser/statement/select_statement.hpp\"\n+#include \"duckdb/parser/query_node/select_node.hpp\"\n \n #include <chrono>\n #include <thread>\n@@ -19,6 +21,18 @@ TEST_CASE(\"Test comment in CPP API\", \"[api]\") {\n \tREQUIRE(1);\n }\n \n+TEST_CASE(\"Test StarExpression replace_list parameter\", \"[api]\") {\n+\tDuckDB db(nullptr);\n+\tConnection con(db);\n+\tauto sql = \"select * replace(i * $n as i) from range(1, 10) t(i)\";\n+\tauto stmts = con.ExtractStatements(sql);\n+\n+\tauto &select_stmt = stmts[0]->Cast<SelectStatement>();\n+\tauto &select_node = select_stmt.node->Cast<SelectNode>();\n+\n+\tREQUIRE(select_node.select_list[0]->HasParameter());\n+}\n+\n TEST_CASE(\"Test using connection after database is gone\", \"[api]\") {\n \tauto db = make_uniq<DuckDB>(nullptr);\n \tauto conn = make_uniq<Connection>(*db);\n",
  "problem_statement": "ParsedExpression::Hasparameter returns false in case of replace list has placeholders\n### What happens?\r\n\r\nIn following SQL, `HasParameter method` of `ParsedExpression` (`StarExpression`) returns false:\r\n\r\n```sql\r\nselect * replace(i * $n as i)\r\nfrom range(1, 10) t(i)\r\n```\r\n\r\nThis SQL has a placeholder in replace list.\r\n\r\nIn current implementation, `ParsedExpression::HasParameter` method uses `ExpressionIterator::EnumerateChildren` method to iterate children.\r\n\r\nhttps://github.com/duckdb/duckdb/blob/10c42435f1805ee4415faa5d6da4943e8c98fa55/src/planner/expression.cpp#L89\r\n\r\n`ExpressionIterator::EnumerateChildren` is only captured `StarExpression::expr` field.\r\nSo `StarExpression::replace_list` does not capture.\r\n\r\nhttps://github.com/duckdb/duckdb/blob/10c42435f1805ee4415faa5d6da4943e8c98fa55/src/parser/parsed_expression_iterator.cpp#L100\r\n\r\n~~And I seems that `StarExpression::exclude_list` is not also captured in case of using lambda expression with placeholder.~~\r\nEDIT: `exclude_list` does not contain `ParsedExpression. So it has no problem.\r\n\r\nIs this expected behavior?\r\n\r\n\r\n### To Reproduce\r\n\r\n```cpp\r\nstd::string sql = \"select * replace(i * $n as i) from range(1, 10) t(i)\";\r\nauto stmts = conn.ExtractStatements(sql);\r\n\r\nauto& select_stmt = stmts[0]->Cast<duckdb::SelectStatement>();\r\nauto& select_node = select_stmt.node->Cast<duckdb::SelectNode>();\r\n\r\nstd::cout << select_node.select_list[0]->HasParameter() << std::endl;\r\n```\r\n\r\nExpected result: true\r\nActual result: false\r\n\r\n\r\n### OS:\r\n\r\nMacOS Ventura 13.6.7 (x86_64 16GB RAM)\r\n\r\n### DuckDB Version:\r\n\r\n1.1.2\r\n\r\n### DuckDB Client:\r\n\r\nC++\r\n\r\n### Hardware:\r\n\r\n_No response_\r\n\r\n### Full Name:\r\n\r\nKazuhiko TAMURA\r\n\r\n### Affiliation:\r\n\r\nNo job\r\n\r\n### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.\r\n\r\nI have not tested with any build\r\n\r\n### Did you include all relevant data sets for reproducing the issue?\r\n\r\nNo - Other reason (please specify in the issue body)\r\n\r\n### Did you include all code required to reproduce the issue?\r\n\r\n- [X] Yes, I have\r\n\r\n### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?\r\n\r\n- [X] Yes, I have\n",
  "hints_text": "Looks like it's working as intended\r\n```sql\r\nstatement ok\r\nprepare p1 as\r\nselect * replace(i * $n as i)\r\nfrom range(1, 10) t(i)\r\n\r\nquery I\r\nexecute p1(n := 2)\r\n----\r\n2\r\n4\r\n6\r\n8\r\n10\r\n12\r\n14\r\n16\r\n18\r\n```\r\n\r\nI'm not sure why HasParameter is not picking this up for you, but the system is properly detecting the parameter so there has to be additional logic involved if HasParameter isn't solely responsible\n@Tishj \r\n\r\nYes, it properly handles placeholders of replace list in CLI.\r\n\r\nI've checked source code.\r\nIn generating logical plan (prepared statement) stage, the star expression is all expanded including replace-list.\r\n\r\nhttps://github.com/duckdb/duckdb/blob/baa915d95ffa72461f5124dee645e4d4547c316f/src/planner/binder/expression/bind_star_expression.cpp#L149\r\n\r\n(Called `BindContext::GenerateAllColumnExpressions` method)\r\n\r\nSo, returning false from `HasParameter` method will not result in affecting  to the prepared statement.\r\n",
  "created_at": "2024-10-24T13:54:05Z"
}