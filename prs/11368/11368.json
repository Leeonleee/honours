{
  "repo": "duckdb/duckdb",
  "pull_number": 11368,
  "instance_id": "duckdb__duckdb-11368",
  "issue_numbers": [
    "11312"
  ],
  "base_commit": "0465529666ef63a17cb1b7c3ce9141d2d10c0506",
  "patch": "diff --git a/tools/juliapkg/src/api.jl b/tools/juliapkg/src/api.jl\nindex 38fed7ab6802..3c18944cd862 100644\n--- a/tools/juliapkg/src/api.jl\n+++ b/tools/juliapkg/src/api.jl\n@@ -1230,7 +1230,7 @@ function duckdb_bind_blob(prepared_statement, param_idx, val, length)\n         (duckdb_prepared_statement, Int32, Ptr{Cvoid}, Int32),\n         prepared_statement,\n         param_idx,\n-        data,\n+        val,\n         length\n     )\n end\n",
  "test_patch": "diff --git a/tools/juliapkg/test/test_prepare.jl b/tools/juliapkg/test/test_prepare.jl\nindex 67e14d1586ff..b86551d0d54f 100644\n--- a/tools/juliapkg/test/test_prepare.jl\n+++ b/tools/juliapkg/test/test_prepare.jl\n@@ -51,7 +51,8 @@ end\n         \"TIME\",\n         \"TIMESTAMP\",\n         \"VARCHAR\",\n-        \"INTEGER\"\n+        \"INTEGER\",\n+        \"BLOB\"\n     ]\n     type_values = [\n         Bool(true),\n@@ -69,7 +70,8 @@ end\n         Time(23, 10, 33),\n         DateTime(1992, 9, 20, 23, 10, 33),\n         String(\"hello world\"),\n-        missing\n+        missing,\n+        rand(UInt8, 100)\n     ]\n     for i in 1:size(type_values, 1)\n         stmt = DBInterface.prepare(con, string(\"SELECT ?::\", type_names[i], \" a\"))\n",
  "problem_statement": "Cannot bind blob values in Julia\n### What happens?\n\nUsing the Julia package I cannot insert/bind BLOB values. \r\n```julia\r\njulia> DBInterface.execute(stm, [32543, d])\r\nERROR: UndefVarError: `data` not defined\r\nStacktrace:\r\n [1] duckdb_bind_blob(prepared_statement::Ptr{Nothing}, param_idx::Int64, val::Vector{UInt8}, length::Int64)\r\n   @ DuckDB ~/.julia/packages/DuckDB/HNc3K/src/api.jl:1227\r\n```\r\n\r\nI guess this [line](https://github.com/duckdb/duckdb/blob/aeefca06cb4e1be507c7c7137547e703312cdb0f/tools/juliapkg/src/api.jl#L1233) in this function\r\n```\r\nfunction duckdb_bind_blob(prepared_statement, param_idx, val, length)\r\n    return ccall(\r\n        (:duckdb_bind_blob, libduckdb),\r\n        duckdb_state,\r\n        (duckdb_prepared_statement, Int32, Ptr{Cvoid}, Int32),\r\n        prepared_statement,\r\n        param_idx,\r\n        data,\r\n        length\r\n    )\r\nend\r\n```\r\n\r\nis to blame. It should be `val` instead of  `data`.\n\n### To Reproduce\n\nIn Julia (v1.10.2) with DuckDB (v0.10.1):\r\n\r\n```julia\r\nusing DuckDB\r\n\r\n# get a database and create a table \r\ndb = DuckDB.DB(\":memory:\")\r\nDuckDB.execute(db, \"CREATE TABLE t (x BLOB);\")\r\n\r\n# prepare an insert statement\r\nstm = DBInterface.prepare(db, \"INSERT INTO t VALUES (?);\")\r\n\r\n# some data\r\nq = rand(UInt8, 100)\r\n\r\n# try to insert\r\nDBInterface.execute(stm, (q,))\r\n```\n\n### OS:\n\nlinux\n\n### DuckDB Version:\n\n0.10.1\n\n### DuckDB Client:\n\nJulia\n\n### Full Name:\n\nPeter Arndt\n\n### Affiliation:\n\nMax Planck Institute\n\n### Have you tried this on the latest [nightly build](https://duckdb.org/docs/installation/?version=main)?\n\nI have tested with a release build (and could not test with a nightly build)\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] Yes, I have\n",
  "hints_text": "",
  "created_at": "2024-03-26T17:11:39Z"
}