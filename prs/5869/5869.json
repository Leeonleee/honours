{
  "repo": "duckdb/duckdb",
  "pull_number": 5869,
  "instance_id": "duckdb__duckdb-5869",
  "issue_numbers": [
    "5826"
  ],
  "base_commit": "b3f6a8f16dd37efd2218a4dc09797aed1eca5c3f",
  "patch": "diff --git a/extension/icu/icu-dateadd.cpp b/extension/icu/icu-dateadd.cpp\nindex 21d5aaf2bee0..fd3ddea4e61d 100644\n--- a/extension/icu/icu-dateadd.cpp\n+++ b/extension/icu/icu-dateadd.cpp\n@@ -57,10 +57,37 @@ timestamp_t ICUCalendarAdd::Operation(timestamp_t timestamp, interval_t interval\n \tconst auto udate = UDate(millis);\n \tcalendar->setTime(udate, status);\n \n-\t// Add interval fields from lowest to highest\n-\tcalendar->add(UCAL_MILLISECOND, interval.micros / Interval::MICROS_PER_MSEC, status);\n-\tcalendar->add(UCAL_DATE, interval.days, status);\n-\tcalendar->add(UCAL_MONTH, interval.months, status);\n+\t// Break units apart to avoid overflow\n+\tauto interval_h = interval.micros / Interval::MICROS_PER_MSEC;\n+\n+\tconst auto interval_ms = interval_h % Interval::MSECS_PER_SEC;\n+\tinterval_h /= Interval::MSECS_PER_SEC;\n+\n+\tconst auto interval_s = interval_h % Interval::SECS_PER_MINUTE;\n+\tinterval_h /= Interval::SECS_PER_MINUTE;\n+\n+\tconst auto interval_m = interval_h % Interval::MINS_PER_HOUR;\n+\tinterval_h /= Interval::MINS_PER_HOUR;\n+\n+\tif (interval.months < 0 || interval.days < 0 || interval.micros < 0) {\n+\t\t// Add interval fields from lowest to highest (non-ragged to ragged)\n+\t\tcalendar->add(UCAL_MILLISECOND, interval_ms, status);\n+\t\tcalendar->add(UCAL_SECOND, interval_s, status);\n+\t\tcalendar->add(UCAL_MINUTE, interval_m, status);\n+\t\tcalendar->add(UCAL_HOUR, interval_h, status);\n+\n+\t\tcalendar->add(UCAL_DATE, interval.days, status);\n+\t\tcalendar->add(UCAL_MONTH, interval.months, status);\n+\t} else {\n+\t\t// Add interval fields from highest to lowest (ragged to non-ragged)\n+\t\tcalendar->add(UCAL_MONTH, interval.months, status);\n+\t\tcalendar->add(UCAL_DATE, interval.days, status);\n+\n+\t\tcalendar->add(UCAL_HOUR, interval_h, status);\n+\t\tcalendar->add(UCAL_MINUTE, interval_m, status);\n+\t\tcalendar->add(UCAL_SECOND, interval_s, status);\n+\t\tcalendar->add(UCAL_MILLISECOND, interval_ms, status);\n+\t}\n \n \treturn ICUDateFunc::GetTime(calendar, micros);\n }\ndiff --git a/extension/icu/icu-datefunc.cpp b/extension/icu/icu-datefunc.cpp\nindex 3a08bf0cedb2..768dc5efeaa5 100644\n--- a/extension/icu/icu-datefunc.cpp\n+++ b/extension/icu/icu-datefunc.cpp\n@@ -112,14 +112,6 @@ int32_t ICUDateFunc::ExtractField(icu::Calendar *calendar, UCalendarDateFields f\n }\n \n int64_t ICUDateFunc::SubtractField(icu::Calendar *calendar, UCalendarDateFields field, timestamp_t end_date) {\n-\t// ICU triggers the address sanitiser because it tries to left shift a negative value\n-\t// when start_date > end_date. To avoid this, we swap the values and negate the result.\n-\tconst auto start_date = GetTimeUnsafe(calendar);\n-\tif (start_date > end_date) {\n-\t\tSetTime(calendar, end_date);\n-\t\treturn -SubtractField(calendar, field, start_date);\n-\t}\n-\n \tconst int64_t millis = end_date.value / Interval::MICROS_PER_MSEC;\n \tconst auto when = UDate(millis);\n \tUErrorCode status = U_ZERO_ERROR;\ndiff --git a/extension/icu/third_party/icu/i18n/calendar.cpp b/extension/icu/third_party/icu/i18n/calendar.cpp\nindex 12ba0f2c4f53..4290a6be9b85 100644\n--- a/extension/icu/third_party/icu/i18n/calendar.cpp\n+++ b/extension/icu/third_party/icu/i18n/calendar.cpp\n@@ -2350,7 +2350,7 @@ int32_t Calendar::fieldDifference(UDate targetMs, UCalendarDateFields field, UEr\n                 break;\n             } else {\n                 min = max;\n-                max <<= 1;\n+                max = ((uint32_t) max) << 1;\n                 if (max == 0) {\n                     // Field difference too large to fit into int32_t\n #if defined (U_DEBUG_CAL)\n",
  "test_patch": "diff --git a/test/sql/function/timestamp/test_icu_dateadd.test b/test/sql/function/timestamp/test_icu_dateadd.test\nindex b0ad72e85a47..42d9f5acc535 100644\n--- a/test/sql/function/timestamp/test_icu_dateadd.test\n+++ b/test/sql/function/timestamp/test_icu_dateadd.test\n@@ -87,6 +87,12 @@ SELECT iv, '2021-12-01 13:54:48.123456Z'::TIMESTAMPTZ + iv FROM intervals;\n 00:00:00.000612\t2021-12-01 05:54:48.124068-08\n -00:00:00.000485\t2021-12-01 05:54:48.122971-08\n \n+# ms overflow\n+query I\n+select '1999-12-31 16:00:00-08'::timestamptz + interval 2400 hours\n+----\n+2000-04-09 17:00:00-07\n+\n #  interval + timestamp\n query II\n SELECT iv, iv + '2021-12-01 13:54:48.123456Z'::TIMESTAMPTZ FROM intervals;\n@@ -122,6 +128,12 @@ SELECT iv, iv + '2021-12-01 13:54:48.123456Z'::TIMESTAMPTZ FROM intervals;\n 00:00:00.000612\t2021-12-01 05:54:48.124068-08\n -00:00:00.000485\t2021-12-01 05:54:48.122971-08\n \n+# ms overflow\n+query I\n+select interval 2400 hours + '1999-12-31 16:00:00-08'::timestamptz\n+----\n+2000-04-09 17:00:00-07\n+\n # timestamp - interval\n query II\n SELECT iv, '2021-12-01 13:54:48.123456Z'::TIMESTAMPTZ - iv FROM intervals;\n@@ -157,6 +169,12 @@ SELECT iv, '2021-12-01 13:54:48.123456Z'::TIMESTAMPTZ - iv FROM intervals;\n 00:00:00.000612\t2021-12-01 05:54:48.122844-08\n -00:00:00.000485\t2021-12-01 05:54:48.123941-08\n \n+# ms overflow\n+query I\n+select '2000-04-09 17:00:00-07'::timestamptz - interval 2400 hours\n+----\n+1999-12-31 16:00:00-08\n+\n # Before the epoch\n query II\n SELECT iv, '1962-07-31 12:20:48.123456Z'::TIMESTAMPTZ + iv FROM intervals;\n@@ -354,4 +372,24 @@ SELECT ts + (INTERVAL 1 microsecond) FROM limits WHERE label = 'tsmax';\n statement error\n SELECT ts + (INTERVAL 612 microsecond) FROM limits WHERE label = 'tsmax';\n \n+# DST arithmetic\n+statement ok\n+set timezone = 'Europe/London';\n+\n+statement ok\n+CREATE TABLE london AS (\n+\tSELECT * \n+\tFROM (VALUES \n+\t\t('2000-10-29 03:00:00+00'::TIMESTAMPTZ, '2000-03-26 03:00:00+01'::TIMESTAMPTZ, '2000-01-03 00:00:00+00'::TIMESTAMPTZ)\n+\t\t) tbl(dst2, dst1, origin)\n+\t);\n+\n+query I\n+SELECT origin + (dst1 - origin) FROM london;\n+----\n+2000-03-26 03:00:00+01\n \n+query I\n+SELECT origin + (dst2 - origin) FROM london;\n+----\n+2000-10-29 03:00:00+00\ndiff --git a/test/sql/function/timestamp/test_icu_datesub.test b/test/sql/function/timestamp/test_icu_datesub.test\nindex 28ba68c407a4..906f247709d8 100644\n--- a/test/sql/function/timestamp/test_icu_datesub.test\n+++ b/test/sql/function/timestamp/test_icu_datesub.test\n@@ -4,6 +4,9 @@\n \n require icu\n \n+statement ok\n+SET Calendar = 'gregorian';\n+\n statement ok\n SET TimeZone = 'America/Los_Angeles';\n \n@@ -258,13 +261,15 @@ CREATE TABLE dateparts AS SELECT datepart FROM (VALUES\n \t('isoyear')\n ) tbl(datepart)\n \n+# ICU field difference is almost symmetric, \n+# but the clamping to the end of a month only works forward.\n query II\n SELECT DATESUB(datepart, startdate, enddate) + DATESUB(datepart, enddate, startdate), datepart\n FROM datetime1, dateparts\n ----\n 0\tyear\n 0\tquarter\n-0\tmonth\n+1\tmonth\n 0\tday\n 0\tdayofyear\n 0\thour\n",
  "problem_statement": "ICUDateFunc::SubtractField not reentrant\n### What happens?\n\nSubtracting and adding timestamps across DST boundaries is not always reversible.\n\n### To Reproduce\n\n```sql\r\nSET Calendar = 'gregorian';\r\nSET timezone = 'Europe/London';\r\n\r\nCREATE TABLE test AS (\r\n\tSELECT * \r\n\tFROM (VALUES \r\n\t\t('2000-10-29 03:00:00+00'::TIMESTAMPTZ, '2000-01-03 00:00:00+00'::TIMESTAMPTZ)\r\n\t\t) tbl(dst, origin)\r\n\t);\r\n\r\nSELECT origin + (dst - origin) FROM test;\r\n-- Expected: 2000-10-29 03:00:00+00\r\n-- Actual: 2000-10-29 04:00:00+00\r\n```\r\n\r\nThis is caused by a hack around around an ICU `fieldDifference` bug changing the internal date when multiple calls are made. The fix is to patch ICU to not left shift negative numbers.\n\n### OS:\n\nOSX\n\n### DuckDB Version:\n\nv0.6.2-dev942\n\n### DuckDB Client:\n\nCLI\n\n### Full Name:\n\nRichard Wesley\n\n### Affiliation:\n\nDuckDB Labs\n\n### Have you tried this on the latest `master` branch?\n\n- [X] I agree\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] I agree\n",
  "hints_text": "",
  "created_at": "2023-01-09T20:28:15Z"
}