{
  "repo": "duckdb/duckdb",
  "pull_number": 13689,
  "instance_id": "duckdb__duckdb-13689",
  "issue_numbers": [
    "13664",
    "13639"
  ],
  "base_commit": "5896c638099998449f06ce1a61e6c01045ba4a7f",
  "patch": "diff --git a/src/execution/operator/scan/physical_table_scan.cpp b/src/execution/operator/scan/physical_table_scan.cpp\nindex 58aa410e6f5c..27ba3982a698 100644\n--- a/src/execution/operator/scan/physical_table_scan.cpp\n+++ b/src/execution/operator/scan/physical_table_scan.cpp\n@@ -213,4 +213,13 @@ bool PhysicalTableScan::Equals(const PhysicalOperator &other_p) const {\n \treturn true;\n }\n \n+bool PhysicalTableScan::ParallelSource() const {\n+\tif (!function.function) {\n+\t\t// table in-out functions cannot be executed in parallel as part of a PhysicalTableScan\n+\t\t// since they have only a single input row\n+\t\treturn false;\n+\t}\n+\treturn true;\n+}\n+\n } // namespace duckdb\ndiff --git a/src/include/duckdb/execution/operator/scan/physical_table_scan.hpp b/src/include/duckdb/execution/operator/scan/physical_table_scan.hpp\nindex 13d6a233ecdb..621282e2dc8b 100644\n--- a/src/include/duckdb/execution/operator/scan/physical_table_scan.hpp\n+++ b/src/include/duckdb/execution/operator/scan/physical_table_scan.hpp\n@@ -66,9 +66,7 @@ class PhysicalTableScan : public PhysicalOperator {\n \tbool IsSource() const override {\n \t\treturn true;\n \t}\n-\tbool ParallelSource() const override {\n-\t\treturn true;\n-\t}\n+\tbool ParallelSource() const override;\n \n \tbool SupportsBatchIndex() const override {\n \t\treturn function.get_batch_index != nullptr;\n",
  "test_patch": "diff --git a/test/sql/types/list/unnest_aggregate.test b/test/sql/types/list/unnest_aggregate.test\nnew file mode 100644\nindex 000000000000..082c44b368a0\n--- /dev/null\n+++ b/test/sql/types/list/unnest_aggregate.test\n@@ -0,0 +1,20 @@\n+# name: test/sql/types/list/unnest_aggregate.test\n+# description: Test unnest semantics with NULL and empty lists\n+# group: [list]\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+query I\n+SELECT SUM(a) FROM UNNEST(RANGE(1, 11)) t(a);\n+----\n+55\n+\n+statement ok\n+create or replace function rnv(a,b) as (select a + b * pi());\n+\n+query I\n+select rnv(0, 1) from unnest( range(0,2) );\n+----\n+3.141592653589793\n+3.141592653589793\n",
  "problem_statement": "Wrong number of results when calling a MACRO that calls a scalar function\n### What happens?\r\n\r\n```sql\r\ncreate or replace function rnv(a,b) as (select a + b * pi());\r\nselect rnv(0, 1) from unnest( range(0,2) );\r\n```\r\n```\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502     rnv(0, 1)     \u2502\r\n\u2502      double       \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 3.141592653589793 \u2502\r\n\u2502 3.141592653589793 \u2502\r\n\u2502 3.141592653589793 \u2502\r\n\u2502 3.141592653589793 \u2502\r\n\u2502 3.141592653589793 \u2502\r\n\u2502 3.141592653589793 \u2502\r\n\u2502 3.141592653589793 \u2502\r\n\u2502 3.141592653589793 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\nNote: this is similar to one of the problems reported at #13639, but here random() is not called at all.\r\n\r\n### To Reproduce\r\n\r\n```\r\ncreate or replace function rnv(a,b) as (select a + b * pi());\r\n\r\nselect rnv(0, 1) from unnest( range(0,2) );\r\n```\r\n\r\n### OS:\r\n\r\nmacOS\r\n\r\n### DuckDB Version:\r\n\r\nv1.0.1-dev5058 (August 30)\r\n\r\n### DuckDB Client:\r\n\r\nCLI\r\n\r\n### Full Name:\r\n\r\nPeter Koppstein\r\n\r\n### Affiliation:\r\n\r\nPrinceton University\r\n\r\n### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.\r\n\r\nI have tested with a source build\r\n\r\n### Did you include all relevant data sets for reproducing the issue?\r\n\r\nNot applicable - the reproduction does not require a data set\r\n\r\n### Did you include all code required to reproduce the issue?\r\n\r\n- [X] Yes, I have\r\n\r\n### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?\r\n\r\n- [X] Yes, I have\nUsing random() in an uncorrelated subquery replicates the result\n### What happens?\n\nFor the sake of clarity, first consider the case where a MACRO only invokes random() once. (*)\r\n```\r\nD create or replace function r() as random();\r\n\r\nD select r() from unnest(range(0,4));\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502         r()         \u2502\r\n\u2502       double        \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 0.38555585057474673 \u2502\r\n\u2502  0.7014810184482485 \u2502\r\n\u2502  0.6464361036196351 \u2502\r\n\u2502 0.05984393716789782 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\nD\r\n```\r\nAll as expected.\r\n\r\nBut now consider:\r\n```\r\nD create or replace function rnv(mean, sd) as \r\n  (select (( sqrt(-2 * ln(random())) * cos(2 * pi() * random())) * sd) + mean);\r\n\r\nD select rnv(0,1) from unnest(range(0,4));\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502     rnv(0, 1)      \u2502\r\n\u2502       double       \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 1.0384863850924373 \u2502\r\n\u2502 1.0384863850924373 \u2502\r\n\u2502 1.0384863850924373 \u2502\r\n\u2502 1.0384863850924373 \u2502\r\n\u2502 1.0384863850924373 \u2502\r\n\u2502 1.0384863850924373 \u2502\r\n\u2502 1.0384863850924373 \u2502\r\n\u2502 1.0384863850924373 \u2502\r\n\u2502 1.0384863850924373 \u2502\r\n\u2502 1.0384863850924373 \u2502\r\n\u2502 1.0384863850924373 \u2502\r\n\u2502 1.0384863850924373 \u2502\r\n\u2502 1.0384863850924373 \u2502\r\n\u2502 1.0384863850924373 \u2502\r\n\u2502 1.0384863850924373 \u2502\r\n\u2502 1.0384863850924373 \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502      16 rows       \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\nD\r\n```\r\n\r\nThis is bizarre for two separate reasons:\r\n\r\n(1) Why are all the values the same?\r\n\r\n(2) Shouldn't there be just 4 rows as in the case of r()?\r\n\r\nNote that calling rnv() in isolation produces results in accordance with expectations:\r\n```\r\nD select rnv(0,1);\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502      rnv(0, 1)       \u2502\r\n\u2502        double        \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 0.006052431330421223 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\nD select rnv(0,1);\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502     rnv(0, 1)      \u2502\r\n\u2502       double       \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 0.7537127145896633 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\nD\r\n```\r\n\r\np.s. Shouldn't it be possible to set the \"has_side_effects\" field in the table shown duckdb_functions() \r\nFor reference:\r\n```\r\nD select has_side_effects is null from duckdb_functions() where function_name = 'r';\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 (has_side_effects IS NULL) \u2502\r\n\u2502          boolean           \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 true                       \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n(*) All results shown are based on v1.0.1-dev4911 b41679dfd2\n\n### To Reproduce\n\n```\r\ncreate or replace function rnv(mean, sd) as \r\n  (select (( sqrt(-2 * ln(random())) * cos(2 * pi() * random())) * sd) + mean);\r\n\r\nselect rnv(0,1) from unnest(range(0,4));\r\n```\n\n### OS:\n\nMacOS\n\n### DuckDB Version:\n\nv1.0.1-dev4911 b41679dfd2\n\n### DuckDB Client:\n\nCLI\n\n### Full Name:\n\nPeter Koppstein\n\n### Affiliation:\n\nPrinceton University\n\n### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.\n\nI have tested with a source build\n\n### Did you include all relevant data sets for reproducing the issue?\n\nNot applicable - the reproduction does not require a data set\n\n### Did you include all code required to reproduce the issue?\n\n- [X] Yes, I have\n\n### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?\n\n- [X] Yes, I have\n",
  "hints_text": "\n@pkoppstein thanks for the detailed issue. This seems to be a bug.\r\n\r\n> This is bizarre for two separate reasons:\r\n>\r\n> (1) Why are all the values the same?\r\n\r\nThis is likely because the `has_side_effects` is not set to `true`. The [Python function API](https://duckdb.org/docs/api/python/function) has a way of specifying this but macros don't.\r\n\r\n> (2) Shouldn't there be just 4 rows as in the case of r()?\r\n\r\nThis is a regression from v1.0.0:\r\n\r\n```\r\nv1.0.0 1f98600c2c\r\nD create or replace function rnv(mean, sd) as\r\n    (select (( sqrt(-2 * ln(random())) * cos(2 * pi() * random())) * sd) + mean);\r\nD select rnv(0,1) from unnest(range(0,4));\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502      rnv(0, 1)      \u2502\r\n\u2502       double        \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 -1.5192343078784654 \u2502\r\n\u2502 -1.5192343078784654 \u2502\r\n\u2502 -1.5192343078784654 \u2502\r\n\u2502 -1.5192343078784654 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n",
  "created_at": "2024-09-02T10:42:46Z"
}