diff --git a/CMakeLists.txt b/CMakeLists.txt
index c94679956670..a37fe24ee13d 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -118,6 +118,30 @@ execute_process(
   WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
   OUTPUT_VARIABLE GIT_COMMIT_HASH
   OUTPUT_STRIP_TRAILING_WHITESPACE)
+execute_process(
+  COMMAND git describe --tags --abbrev=0
+  WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
+  OUTPUT_VARIABLE GIT_LAST_TAG
+  OUTPUT_STRIP_TRAILING_WHITESPACE)
+execute_process(
+  COMMAND git describe --tags --long
+  WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
+  OUTPUT_VARIABLE GIT_ITERATION
+  OUTPUT_STRIP_TRAILING_WHITESPACE)
+
+string(REGEX REPLACE "v([0-9]+.[0-9]+.)[0-9]+" "\\1" DUCKDB_MAIN_VERSION "${GIT_LAST_TAG}")
+string(REGEX REPLACE "v[0-9]+.[0-9]+.([0-9]+)" "\\1" DUCKDB_PATCH_VERSION "${GIT_LAST_TAG}")
+string(REGEX REPLACE ".*-([0-9]+)-.*" "\\1" DUCKDB_DEV_ITERATION "${GIT_ITERATION}")
+
+if(${DUCKDB_DEV_ITERATION}==0)
+  # on a tag; directly use the version
+  set(DUCKDB_VERSION "${DUCKDB_MAIN_VERSION}${DUCKDB_PATCH_VERSION}")
+else()
+  # not on a tag, increment the patch version by one and add a -devX suffix
+  MATH(EXPR DUCKDB_PATCH_VERSION "${DUCKDB_PATCH_VERSION}+1")
+
+  set(DUCKDB_VERSION "${DUCKDB_MAIN_VERSION}${DUCKDB_PATCH_VERSION}-dev${DUCKDB_DEV_ITERATION}")
+endif()
 
 option(AMALGAMATION_BUILD
        "Build from the amalgamation files, rather than from the normal sources."
diff --git a/scripts/amalgamation.py b/scripts/amalgamation.py
index b7163b31cf7c..93e2d0be9eb2 100644
--- a/scripts/amalgamation.py
+++ b/scripts/amalgamation.py
@@ -187,8 +187,20 @@ def copy_if_different(src, dest):
     shutil.copyfile(src, dest)
 
 def git_commit_hash():
-    return subprocess.check_output(['git','log','-1','--format=%h']).strip()
-
+    return subprocess.check_output(['git','log','-1','--format=%h']).strip().decode('utf8')
+
+def git_dev_version():
+    version = subprocess.check_output(['git','describe','--tags','--abbrev=0']).strip().decode('utf8')
+    long_version = subprocess.check_output(['git','describe','--tags','--long']).strip().decode('utf8')
+    version_splits = version.lstrip('v').split('.')
+    dev_version = long_version.split('-')[1]
+    if int(dev_version) == 0:
+        # directly on a tag: emit the regular version
+        return '.'.join(version_splits)
+    else:
+        # not on a tag: increment the version by one and add a -devX suffix
+        version_splits[2] = str(int(version_splits[2]) + 1)
+        return '.'.join(version_splits) + "-dev" + dev_version
 
 def generate_duckdb_hpp(header_file):
     print("-----------------------")
@@ -201,7 +213,8 @@ def generate_duckdb_hpp(header_file):
 
         hfile.write("#pragma once
")
         hfile.write("#define DUCKDB_AMALGAMATION 1
")
-        hfile.write("#define DUCKDB_SOURCE_ID \"%s\"
" % git_commit_hash().decode('utf8'))
+        hfile.write("#define DUCKDB_SOURCE_ID \"%s\"
" % git_commit_hash())
+        hfile.write("#define DUCKDB_VERSION \"%s\"
" % git_dev_version())
         for fpath in main_header_files:
             hfile.write(write_file(fpath))
 
diff --git a/scripts/package_build.py b/scripts/package_build.py
index cb705d24433d..77010a75e108 100644
--- a/scripts/package_build.py
+++ b/scripts/package_build.py
@@ -66,6 +66,22 @@ def get_relative_path(source_dir, target_file):
         target_file = target_file.replace(source_dir, "").lstrip('/')
     return target_file
 
+def git_commit_hash():
+    return subprocess.check_output(['git','log','-1','--format=%h']).strip().decode('utf8')
+
+def git_dev_version():
+    version = subprocess.check_output(['git','describe','--tags','--abbrev=0']).strip().decode('utf8')
+    long_version = subprocess.check_output(['git','describe','--tags','--long']).strip().decode('utf8')
+    version_splits = version.lstrip('v').split('.')
+    dev_version = long_version.split('-')[1]
+    if int(dev_version) == 0:
+        # directly on a tag: emit the regular version
+        return '.'.join(version_splits)
+    else:
+        # not on a tag: increment the version by one and add a -devX suffix
+        version_splits[2] = str(int(version_splits[2]) + 1)
+        return '.'.join(version_splits) + "-dev" + dev_version
+
 def build_package(target_dir, linenumbers = False):
     if not os.path.isdir(target_dir):
         os.mkdir(target_dir)
@@ -111,26 +127,34 @@ def copy_file(src, target_dir):
     for inc in include_files:
         copy_file(inc, target_dir)
 
-    # handle pragma_version.cpp: paste #define DUCKDB_SOURCE_ID there
-    # read the source id
-    proc = subprocess.Popen(['git', 'rev-parse', 'HEAD'], stdout=subprocess.PIPE, stderr=subprocess.PIPE, cwd=os.path.join(scripts_dir, '..'))
-    githash = proc.stdout.read().strip().decode('utf8')
+    # handle pragma_version.cpp: paste #define DUCKDB_SOURCE_ID and DUCKDB_VERSION there
+    curdir = os.getcwd()
+    os.chdir(os.path.join(scripts_dir, '..'))
+    githash = git_commit_hash()
+    dev_version = git_dev_version()
+    os.chdir(curdir)
     # open the file and read the current contents
     fpath = os.path.join(target_dir, 'src', 'function', 'table', 'version', 'pragma_version.cpp')
     with open_utf8(fpath, 'r') as f:
         text = f.read()
     # now add the DUCKDB_SOURCE_ID define, if it is not there already
-    found = False
+    found_hash = False
+    found_dev = False
     lines = text.split('
')
     for i in range(len(lines)):
         if '#define DUCKDB_SOURCE_ID ' in lines[i]:
             lines[i] = '#define DUCKDB_SOURCE_ID "{}"'.format(githash)
-            found = True
+            found_hash = True
             break
-    if not found:
-        text = '#ifndef DUCKDB_SOURCE_ID
#define DUCKDB_SOURCE_ID "{}"
#endif
'.format(githash) + text
-    else:
-        text = '
'.join(text)
+        if '#define DUCKDB_VERSION ' in lines[i]:
+            lines[i] = '#define DUCKDB_VERSION "{}"'.format(dev_version)
+            found_dev = True
+            break
+    if not found_hash:
+        lines = ['#ifndef DUCKDB_SOURCE_ID', '#define DUCKDB_SOURCE_ID "{}"'.format(githash), '#endif'] + lines
+    if not found_hash:
+        lines = ['#ifndef DUCKDB_VERSION', '#define DUCKDB_VERSION "{}"'.format(dev_version), '#endif'] + lines
+    text = '
'.join(lines)
     with open_utf8(fpath, 'w+') as f:
         f.write(text)
 
diff --git a/src/function/table/version/CMakeLists.txt b/src/function/table/version/CMakeLists.txt
index c4101c3d9e66..2c54094c4503 100644
--- a/src/function/table/version/CMakeLists.txt
+++ b/src/function/table/version/CMakeLists.txt
@@ -1,4 +1,5 @@
 add_definitions(-DDUCKDB_SOURCE_ID="\""${GIT_COMMIT_HASH}"\"")
+add_definitions(-DDUCKDB_VERSION="\""${DUCKDB_VERSION}"\"")
 
 add_library_unity(duckdb_func_table_version OBJECT pragma_version.cpp)
 
diff --git a/src/function/table/version/pragma_version.cpp b/src/function/table/version/pragma_version.cpp
index a5bfb8330510..c14dbddf41ca 100644
--- a/src/function/table/version/pragma_version.cpp
+++ b/src/function/table/version/pragma_version.cpp
@@ -47,7 +47,7 @@ const char *DuckDB::SourceID() {
 }
 
 const char *DuckDB::LibraryVersion() {
-	return "DuckDB";
+	return DUCKDB_VERSION;
 }
 
 } // namespace duckdb
diff --git a/tools/shell/shell.c b/tools/shell/shell.c
index 71153dc5b178..8390b5e6f7fd 100644
--- a/tools/shell/shell.c
+++ b/tools/shell/shell.c
@@ -20241,7 +20241,7 @@ static const char zOptions[] =
 #endif
   "   -stats               print memory stats before each finalize
"
   "   -table               set output mode to 'table'
"
-  "   -version             show SQLite version
"
+  "   -version             show DuckDB version
"
   "   -vfs NAME            use NAME as the default VFS
"
 #ifdef SQLITE_ENABLE_VFSTRACE
   "   -vfstrace            enable tracing of all VFS calls
"
@@ -20253,7 +20253,7 @@ static const char zOptions[] =
 static void usage(int showDetail){
   utf8_printf(stderr,
       "Usage: %s [OPTIONS] FILENAME [SQL]
"
-      "FILENAME is the name of an SQLite database. A new database is created
"
+      "FILENAME is the name of an DuckDB database. A new database is created
"
       "if the file does not previously exist.
", Argv0);
   if( showDetail ){
     utf8_printf(stderr, "OPTIONS include:
%s", zOptions);
