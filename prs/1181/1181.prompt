You will be provided with a partial code base and an issue statement explaining a problem to resolve.
In your output, give nothing but the code (no markdown) so that your output can be copy pasted and run immediately with no changes

<issue>
duckdb CLI help text identifies itself as sqlite
First, thank you for this wonderful tool.

A minor thing, but maybe appropriate to change?

$ ~/apps/bin/duckdb --help
Usage: ~/apps/bin/duckdb [OPTIONS] FILENAME [SQL]
FILENAME is the name of an **SQLite** database. A new database is created
if the file does not previously exist.
OPTIONS include:
<snip>
-version             show **SQLite** version


duckdb CLI help text identifies itself as sqlite
First, thank you for this wonderful tool.

A minor thing, but maybe appropriate to change?

$ ~/apps/bin/duckdb --help
Usage: ~/apps/bin/duckdb [OPTIONS] FILENAME [SQL]
FILENAME is the name of an **SQLite** database. A new database is created
if the file does not previously exist.
OPTIONS include:
<snip>
-version             show **SQLite** version



</issue>
<code>
[start of README.md]
1: <img src="https://duckdb.org/images/DuckDB_Logo_dl.png" height="50">
2: 
3: ![.github/workflows/main.yml](https://github.com/cwida/duckdb/workflows/.github/workflows/main.yml/badge.svg?branch=master)
4: [![CodeFactor](https://www.codefactor.io/repository/github/cwida/duckdb/badge)](https://www.codefactor.io/repository/github/cwida/duckdb)
5: [![Coverage Status](https://coveralls.io/repos/github/cwida/duckdb/badge.svg?branch=master)](https://coveralls.io/github/cwida/duckdb?branch=master)
6: [![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.3901452.svg)](https://zenodo.org/record/3901452)
7: 
8: 
9: ## Installation
10: If you just want to install and use DuckDB, please see [our website](https://www.duckdb.org) for installation and usage instructions.
11: 
12: ## Development
13: For development, DuckDB requires [CMake](https://cmake.org), Python3 and a `C++11` compliant compiler. Run `make` in the root directory to compile the sources. For development, use `make debug` to build a non-optimized debug version. You should run `make unit` and `make allunit` to verify that your version works properly after making changes. To test performance, you can run several standard benchmarks from the root directory by executing `./build/release/benchmark/benchmark_runner`.
14: 
15: Please also refer to our [Contribution Guide](CONTRIBUTING.md).
16: 
17: 
[end of README.md]
[start of CMakeLists.txt]
1: cmake_minimum_required(VERSION 2.8.12)
2: cmake_policy(SET CMP0026 NEW)
3: cmake_policy(SET CMP0051 NEW)
4: # if(APPLE) # needs to be before project() SET(CMAKE_CXX_FLAGS -stdlib=libc++)
5: # SET(CMAKE_OSX_DEPLOYMENT_TARGET "10.7" CACHE STRING "Minimum OS X deployment
6: # version") endif()
7: 
8: project(DuckDB)
9: 
10: set(DUCKDB_MAJOR_VERSION 0)
11: set(DUCKDB_MINOR_VERSION 1)
12: set(DUCKDB_PATCH_VERSION 1)
13: set(DUCKDB_VERSION
14:     ${DUCKDB_MAJOR_VERSION}.${DUCKDB_MINOR_VERSION}.${DUCKDB_PATCH_VERSION})
15: 
16: find_package(Threads REQUIRED)
17: 
18: set(CMAKE_CXX_STANDARD 11)
19: set(CMAKE_CXX_STANDARD_REQUIRED ON)
20: set(CMAKE_CXX_EXTENSIONS OFF)
21: 
22: set(CMAKE_VERBOSE_MAKEFILE OFF)
23: set(CMAKE_POSITION_INDEPENDENT_CODE ON)
24: set(CMAKE_MACOSX_RPATH 1)
25: 
26: find_program(CCACHE_PROGRAM ccache)
27: if(CCACHE_PROGRAM)
28:   set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE "${CCACHE_PROGRAM}")
29: endif()
30: 
31: # Determine install paths
32: set(INSTALL_LIB_DIR
33:     lib
34:     CACHE PATH "Installation directory for libraries")
35: set(INSTALL_BIN_DIR
36:     bin
37:     CACHE PATH "Installation directory for executables")
38: set(INSTALL_INCLUDE_DIR
39:     include
40:     CACHE PATH "Installation directory for header files")
41: if(WIN32 AND NOT CYGWIN)
42:   set(DEF_INSTALL_CMAKE_DIR cmake)
43: else()
44:   set(DEF_INSTALL_CMAKE_DIR lib/cmake/DuckDB)
45: endif()
46: set(INSTALL_CMAKE_DIR
47:     ${DEF_INSTALL_CMAKE_DIR}
48:     CACHE PATH "Installation directory for CMake files")
49: set(DUCKDB_EXPORT_SET "DuckDBExports")
50: 
51: # Make relative install paths absolute
52: foreach(p LIB BIN INCLUDE CMAKE)
53:   set(var INSTALL_${p}_DIR)
54:   if(NOT IS_ABSOLUTE "${${var}}")
55:     set(${var} "${CMAKE_INSTALL_PREFIX}/${${var}}")
56:   endif()
57: endforeach()
58: 
59: set(M32_FLAG "")
60: if(FORCE_32_BIT)
61:   set(M32_FLAG " -m32 ")
62: endif()
63: 
64: option(DISABLE_UNITY "Disable unity builds." FALSE)
65: 
66: option(FORCE_COLORED_OUTPUT
67:        "Always produce ANSI-colored output (GNU/Clang only)." FALSE)
68: if(${FORCE_COLORED_OUTPUT})
69:   if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
70:     add_compile_options(-fdiagnostics-color=always)
71:   elseif("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
72:     add_compile_options(-fcolor-diagnostics)
73:   endif()
74: endif()
75: 
76: option(ENABLE_SANITIZER "Enable address sanitizer." TRUE)
77: if(${ENABLE_SANITIZER})
78:   if(BUILD_PYTHON OR BUILD_R)
79:     if("${CMAKE_BUILD_TYPE}" STREQUAL "Debug")
80:       message(
81:         WARNING
82:           "Sanitizers are not supported for the Python/R builds. This is because sanitizers need to be compiled into the entire program, they cannot be added using dlopen, hence they do not work inside Python packages unless Python itself is compiled with sanitizer flags enabled"
83:       )
84:     endif()
85:   else()
86:     set(CXX_EXTRA_DEBUG "${CXX_EXTRA_DEBUG} -fsanitize=address")
87:   endif()
88: endif()
89: 
90: option(ENABLE_UBSAN "Enable undefined behavior sanitizer." TRUE)
91: if(${ENABLE_UBSAN})
92:   if(BUILD_PYTHON OR BUILD_R)
93:     if("${CMAKE_BUILD_TYPE}" STREQUAL "Debug")
94:       message(
95:         WARNING
96:           "Sanitizers are not supported for the Python/R builds. This is because sanitizers need to be compiled into the entire program, they cannot be added using dlopen, hence they do not work inside Python packages unless Python itself is compiled with sanitizer flags enabled"
97:       )
98:     endif()
99:   else()
100:     set(CXX_EXTRA_DEBUG "${CXX_EXTRA_DEBUG} -fsanitize=undefined")
101:   endif()
102: endif()
103: 
104: option(EXPLICIT_EXCEPTIONS "Explicitly enable C++ exceptions." FALSE)
105: if(${EXPLICIT_EXCEPTIONS})
106:   set(CXX_EXTRA "${CXX_EXTRA} -fexceptions")
107: endif()
108: 
109: set(SUN FALSE)
110: if(${CMAKE_SYSTEM_NAME} STREQUAL "SunOS")
111:   set(CXX_EXTRA "${CXX_EXTRA} -mimpure-text")
112:   add_definitions(-DSUN=1)
113:   set(SUN TRUE)
114: endif()
115: 
116: execute_process(
117:   COMMAND git log -1 --format=%h
118:   WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
119:   OUTPUT_VARIABLE GIT_COMMIT_HASH
120:   OUTPUT_STRIP_TRAILING_WHITESPACE)
121: 
122: option(AMALGAMATION_BUILD
123:        "Build from the amalgamation files, rather than from the normal sources."
124:        FALSE)
125: 
126: option(BUILD_ICU_EXTENSION "Build the ICU extension." FALSE)
127: option(BUILD_PARQUET_EXTENSION "Build the Parquet extension." FALSE)
128: option(BUILD_TPCH_EXTENSION "Build the TPC-H extension." FALSE)
129: option(BUILD_BENCHMARKS "Enable building of the benchmark suite." FALSE)
130: option(BUILD_SQLSMITH "Enable building of SQLSmith." FALSE)
131: option(BUILD_TPCE "Enable building of the TPC-E tool." FALSE)
132: option(JDBC_DRIVER "Build the DuckDB JDBC driver" FALSE)
133: option(BUILD_PYTHON "Build the DuckDB Python extension" FALSE)
134: option(BUILD_REST "Build the DuckDB REST server" FALSE)
135: option(
136:   ASSERT_EXCEPTION
137:   "Throw an exception on an assert failing, instead of triggering a sigabort"
138:   TRUE)
139: option(FORCE_ASSERT "Enable checking of assertions, even in release mode" FALSE)
140: 
141: option(TREAT_WARNINGS_AS_ERRORS "Treat warnings as errors" FALSE)
142: 
143: 
144: if(BUILD_PYTHON
145:    OR BUILD_R
146:    OR JDBC_DRIVER)
147:   set(BUILD_ICU_EXTENSION TRUE)
148:   set(BUILD_PARQUET_EXTENSION TRUE)
149: endif()
150: 
151: if(BUILD_SQLSMITH)
152:   set(BUILD_TPCH_EXTENSION TRUE)
153: endif()
154: 
155: if(TREAT_WARNINGS_AS_ERRORS)
156:   message("Treating warnings as errors.")
157: endif()
158: 
159: if(!ASSERT_EXCEPTION)
160:   set(CMAKE_CXX_FLAGS_DEBUG
161:       "${CMAKE_CXX_FLAGS_DEBUG} -DDUCKDB_USE_STANDARD_ASSERT")
162: endif()
163: 
164: if(FORCE_ASSERT)
165:   set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DDUCKDB_FORCE_ASSERT")
166: endif()
167: 
168: if(NOT MSVC)
169:   set(CMAKE_CXX_FLAGS_DEBUG
170:       "${CMAKE_CXX_FLAGS_DEBUG} -g -O0 -DDEBUG -Wall ${M32_FLAG} ${CXX_EXTRA}")
171:   set(CMAKE_CXX_FLAGS_RELEASE
172:       "${CMAKE_CXX_FLAGS_RELEASE} -O3 -DNDEBUG ${M32_FLAG} ${CXX_EXTRA}")
173:   set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_CXX_FLAGS_RELEASE} -g")
174: 
175:   set(CXX_EXTRA_DEBUG
176:       "${CXX_EXTRA_DEBUG} -Wunused-variable -Wunused-const-variable -Werror=vla -Wnarrowing"
177:   )
178:   if(TREAT_WARNINGS_AS_ERRORS)
179:     set(CXX_EXTRA_DEBUG "${CXX_EXTRA_DEBUG} -Werror")
180:   endif()
181: 
182:   if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU" AND CMAKE_CXX_COMPILER_VERSION
183:                                                    VERSION_GREATER 8.0)
184:     set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} ${CXX_EXTRA_DEBUG}")
185:   elseif("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang"
186:          AND CMAKE_CXX_COMPILER_VERSION VERSION_GREATER 9.0)
187:     set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} ${CXX_EXTRA_DEBUG}")
188:   else()
189:     message(WARNING "Please use a recent compiler for debug builds")
190:   endif()
191: else()
192:   set(CMAKE_CXX_WINDOWS_FLAGS
193:       "/wd4244 /wd4267 /wd4200 /wd26451 /wd26495 /D_CRT_SECURE_NO_WARNINGS")
194:   if(TREAT_WARNINGS_AS_ERRORS)
195:     set(CMAKE_CXX_WINDOWS_FLAGS "${CMAKE_CXX_WINDOWS_FLAGS} /WX")
196:   endif()
197:   # remove warning from CXX flags
198:   string(REGEX REPLACE "/W[0-4]" "" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
199:   # add to-be-ignored warnings
200:   set(CMAKE_CXX_FLAGS
201:       "${CMAKE_CXX_FLAGS} /wd4244 /wd4267 /wd4200 /wd26451 /wd26495 /D_CRT_SECURE_NO_WARNINGS"
202:   )
203: endif()
204: 
205: # todo use CHECK_CXX_COMPILER_FLAG(-fsanitize=address SUPPORTS_SANITIZER) etc.
206: 
207: set(CMAKE_C_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG}")
208: set(CMAKE_C_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE}")
209: set(CMAKE_C_FLAGS_RELWITHDEBINFO "${CMAKE_CXX_FLAGS_RELWITHDEBINFO}")
210: 
211: if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
212:   set(DEFAULT_BUILD_TYPE "Release")
213:   message(STATUS "Setting build type to '${DEFAULT_BUILD_TYPE}'.")
214:   set(CMAKE_BUILD_TYPE
215:       "${DEFAULT_BUILD_TYPE}"
216:       CACHE STRING "Choose the type of build." FORCE)
217: endif()
218: 
219: include_directories(src/include)
220: include_directories(third_party/fmt/include)
221: include_directories(third_party/hyperloglog)
222: include_directories(third_party/re2)
223: include_directories(third_party/miniz)
224: include_directories(third_party/utf8proc/include)
225: include_directories(third_party/miniparquet)
226: include_directories(third_party/concurrentqueue)
227: 
228: # todo only regenerate ub file if one of the input files changed hack alert
229: function(enable_unity_build UB_SUFFIX SOURCE_VARIABLE_NAME)
230:   set(files ${${SOURCE_VARIABLE_NAME}})
231: 
232:   # Generate a unique filename for the unity build translation unit
233:   set(unit_build_file ${CMAKE_CURRENT_BINARY_DIR}/ub_${UB_SUFFIX}.cpp)
234:   set(temp_unit_build_file ${CMAKE_CURRENT_BINARY_DIR}/ub_${UB_SUFFIX}.cpp.tmp)
235:   # Exclude all translation units from compilation
236:   set_source_files_properties(${files} PROPERTIES HEADER_FILE_ONLY true)
237: 
238:   set(rebuild FALSE)
239:   # check if any of the source files have changed
240:   foreach(source_file ${files})
241:     if(${CMAKE_CURRENT_SOURCE_DIR}/${source_file} IS_NEWER_THAN
242:        ${unit_build_file})
243:       set(rebuild TRUE)
244:     endif()
245:   endforeach(source_file)
246:   # write a temporary file
247:   file(WRITE ${temp_unit_build_file} "// Unity Build generated by CMake\n")
248:   foreach(source_file ${files})
249:     file(
250:       APPEND ${temp_unit_build_file}
251:       "#line 0 \"${source_file}\"\n#include <${CMAKE_CURRENT_SOURCE_DIR}/${source_file}>\n"
252:     )
253:   endforeach(source_file)
254: 
255:   execute_process(
256:     COMMAND ${CMAKE_COMMAND} -E compare_files ${unit_build_file}
257:             ${temp_unit_build_file}
258:     RESULT_VARIABLE compare_result
259:     OUTPUT_VARIABLE bla
260:     ERROR_VARIABLE bla)
261:   if(compare_result EQUAL 0)
262:     # files are identical: do nothing
263:   elseif(compare_result EQUAL 1)
264:     # files are different: rebuild
265:     set(rebuild TRUE)
266:   else()
267:     # error while compiling: rebuild
268:     set(rebuild TRUE)
269:   endif()
270: 
271:   if(${rebuild})
272:     file(WRITE ${unit_build_file} "// Unity Build generated by CMake\n")
273:     foreach(source_file ${files})
274:       file(
275:         APPEND ${unit_build_file}
276:         "#line 0 \"${source_file}\"\n#include <${CMAKE_CURRENT_SOURCE_DIR}/${source_file}>\n"
277:       )
278:     endforeach(source_file)
279:   endif()
280: 
281:   # Complement list of translation units with the name of ub
282:   set(${SOURCE_VARIABLE_NAME}
283:       ${${SOURCE_VARIABLE_NAME}} ${unit_build_file}
284:       PARENT_SCOPE)
285: endfunction(enable_unity_build)
286: 
287: function(add_library_unity NAME MODE)
288:   set(SRCS ${ARGN})
289:   if(NOT DISABLE_UNITY)
290:     enable_unity_build(${NAME} SRCS)
291:   endif()
292:   add_library(${NAME} OBJECT ${SRCS})
293: endfunction()
294: 
295: function(disable_target_warnings NAME)
296:   if(MSVC)
297:     target_compile_options(${NAME} PRIVATE "/W0")
298:   elseif("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang"
299:          OR "${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
300:     target_compile_options(${NAME} PRIVATE "-w")
301:   endif()
302: endfunction()
303: 
304: function(add_extension_definitions)
305:   include_directories(${PROJECT_SOURCE_DIR}/extension)
306: 
307:   if(${BUILD_ICU_EXTENSION})
308:     include_directories(${PROJECT_SOURCE_DIR}/extension/icu/include)
309:     add_definitions(-DBUILD_ICU_EXTENSION=${BUILD_ICU_EXTENSION})
310:   endif()
311: 
312:   if(${BUILD_PARQUET_EXTENSION})
313:     include_directories(${PROJECT_SOURCE_DIR}/extension/parquet/include)
314:     add_definitions(-DBUILD_PARQUET_EXTENSION=${BUILD_PARQUET_EXTENSION})
315:   endif()
316: 
317:   if(${BUILD_TPCH_EXTENSION})
318:     include_directories(${PROJECT_SOURCE_DIR}/extension/tpch/include)
319:     add_definitions(-DBUILD_TPCH_EXTENSION=${BUILD_TPCH_EXTENSION})
320:   endif()
321: endfunction()
322: 
323: function(link_extension_libraries LIBRARY)
324:   if(${BUILD_PARQUET_EXTENSION})
325:     target_link_libraries(${LIBRARY} parquet_extension)
326:   endif()
327: 
328:   if(${BUILD_ICU_EXTENSION})
329:     target_link_libraries(${LIBRARY} icu_extension)
330:   endif()
331: 
332:   if(${BUILD_TPCH_EXTENSION})
333:     target_link_libraries(${LIBRARY} tpch_extension)
334:   endif()
335: 
336: endfunction()
337: 
338: add_subdirectory(extension)
339: add_subdirectory(src)
340: 
341: option(BUILD_UNITTESTS "Build the C++ Unit Tests." TRUE)
342: if(${BUILD_UNITTESTS})
343:   add_subdirectory(test)
344:   if(NOT WIN32
345:      AND NOT SUN
346:      AND ${BUILD_BENCHMARKS})
347:     add_subdirectory(benchmark)
348:   endif()
349: endif()
350: 
351: add_subdirectory(third_party)
352: add_subdirectory(tools)
353: 
354: # Write the export set for build and install tree
355: install(EXPORT "${DUCKDB_EXPORT_SET}" DESTINATION "${INSTALL_CMAKE_DIR}")
356: export(EXPORT "${DUCKDB_EXPORT_SET}"
357:        FILE "${PROJECT_BINARY_DIR}/${DUCKDB_EXPORT_SET}.cmake")
358: 
359: # Only write the cmake package configuration if the templates exist
360: set(CMAKE_CONFIG_TEMPLATE "${CMAKE_SOURCE_DIR}/DuckDBConfig.cmake.in")
361: set(CMAKE_CONFIG_VERSION_TEMPLATE
362:     "${CMAKE_SOURCE_DIR}/DuckDBConfigVersion.cmake.in")
363: if(EXISTS ${CMAKE_CONFIG_TEMPLATE} AND EXISTS ${CMAKE_CONFIG_VERSION_TEMPLATE})
364: 
365:   # Configure cmake package config for the build tree
366:   set(CONF_INCLUDE_DIRS "${PROJECT_SOURCE_DIR}/src/include")
367:   configure_file(${CMAKE_CONFIG_TEMPLATE}
368:                  "${PROJECT_BINARY_DIR}/DuckDBConfig.cmake" @ONLY)
369: 
370:   # Configure cmake package config for the install tree
371:   file(RELATIVE_PATH REL_INCLUDE_DIR "${INSTALL_CMAKE_DIR}"
372:        "${INSTALL_INCLUDE_DIR}")
373:   set(CONF_INCLUDE_DIRS "\${DuckDB_CMAKE_DIR}/${REL_INCLUDE_DIR}")
374:   configure_file(
375:     ${CMAKE_CONFIG_TEMPLATE}
376:     "${PROJECT_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/DuckDBConfig.cmake" @ONLY)
377: 
378:   # Configure cmake package version for build and install tree
379:   configure_file(${CMAKE_CONFIG_VERSION_TEMPLATE}
380:                  "${PROJECT_BINARY_DIR}/DuckDBConfigVersion.cmake" @ONLY)
381: 
382:   # Install the cmake package
383:   install(
384:     FILES "${PROJECT_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/DuckDBConfig.cmake"
385:           "${PROJECT_BINARY_DIR}/DuckDBConfigVersion.cmake"
386:     DESTINATION "${INSTALL_CMAKE_DIR}")
387: endif()
[end of CMakeLists.txt]
[start of scripts/amalgamation.py]
1: # this script creates a single header + source file combination out of the DuckDB sources
2: import os
3: import re
4: import sys
5: import shutil
6: import subprocess
7: from python_helpers import open_utf8
8: 
9: amal_dir = os.path.join('src', 'amalgamation')
10: header_file = os.path.join(amal_dir, "duckdb.hpp")
11: source_file = os.path.join(amal_dir, "duckdb.cpp")
12: temp_header = 'duckdb.hpp.tmp'
13: temp_source = 'duckdb.cpp.tmp'
14: 
15: src_dir = 'src'
16: include_dir = os.path.join('src', 'include')
17: fmt_dir = os.path.join('third_party', 'fmt')
18: fmt_include_dir = os.path.join('third_party', 'fmt', 'include')
19: miniz_dir = os.path.join('third_party', 'miniz')
20: re2_dir = os.path.join('third_party', 're2')
21: pg_query_dir = os.path.join('third_party', 'libpg_query')
22: pg_query_include_dir = os.path.join('third_party', 'libpg_query', 'include')
23: 
24: utf8proc_dir = os.path.join('third_party', 'utf8proc')
25: utf8proc_include_dir = os.path.join('third_party', 'utf8proc', 'include')
26: 
27: moodycamel_include_dir = os.path.join('third_party', 'concurrentqueue')
28: 
29: # files included in the amalgamated "duckdb.hpp" file
30: main_header_files = [os.path.join(include_dir, 'duckdb.hpp'),
31:     os.path.join(include_dir, 'duckdb.h'),
32:     os.path.join(include_dir, 'duckdb', 'common', 'types', 'date.hpp'),
33:     os.path.join(include_dir, 'duckdb', 'common', 'arrow.hpp'),
34: 	os.path.join(include_dir, 'duckdb', 'common', 'types', 'decimal.hpp'),
35:     os.path.join(include_dir, 'duckdb', 'common', 'types', 'hugeint.hpp'),
36:     os.path.join(include_dir, 'duckdb', 'common', 'types', 'interval.hpp'),
37:     os.path.join(include_dir, 'duckdb', 'common', 'types', 'timestamp.hpp'),
38:     os.path.join(include_dir, 'duckdb', 'common', 'types', 'time.hpp'),
39:     os.path.join(include_dir, 'duckdb', 'common', 'serializer', 'buffered_file_writer.hpp'),
40:     os.path.join(include_dir, 'duckdb', 'common', 'serializer', 'buffered_serializer.hpp'),
41:     os.path.join(include_dir, 'duckdb', 'main', 'appender.hpp'),
42:     os.path.join(include_dir, 'duckdb', 'main', 'client_context.hpp'),
43:     os.path.join(include_dir, 'duckdb', 'function', 'function.hpp'),
44:     os.path.join(include_dir, 'duckdb', 'function', 'table_function.hpp'),
45:     os.path.join(include_dir, 'duckdb', 'parser', 'parsed_data', 'create_table_function_info.hpp'),
46:     os.path.join(include_dir, 'duckdb', 'parser', 'parsed_data', 'create_copy_function_info.hpp')]
47: 
48: # include paths for where to search for include files during amalgamation
49: include_paths = [include_dir, fmt_include_dir, re2_dir, miniz_dir, utf8proc_include_dir, utf8proc_dir, pg_query_include_dir, pg_query_dir, moodycamel_include_dir]
50: # paths of where to look for files to compile and include to the final amalgamation
51: compile_directories = [src_dir, fmt_dir, miniz_dir, re2_dir, utf8proc_dir, pg_query_dir]
52: 
53: # files always excluded
54: always_excluded = ['src/amalgamation/duckdb.cpp', 'src/amalgamation/duckdb.hpp', 'src/amalgamation/parquet-extension.cpp', 'src/amalgamation/parquet-extension.hpp']
55: # files excluded from the amalgamation
56: excluded_files = ['grammar.cpp', 'grammar.hpp', 'symbols.cpp', 'file_system.cpp']
57: # files excluded from individual file compilation during test_compile
58: excluded_compilation_files = excluded_files + ['gram.hpp', 'kwlist.hpp', "duckdb-c.cpp"]
59: 
60: file_system_cpp = os.path.join('src', 'common', 'file_system.cpp')
61: 
62: linenumbers = False
63: 
64: def get_includes(fpath, text):
65:     # find all the includes referred to in the directory
66:     include_statements = re.findall("(^[#]include[\t ]+[\"]([^\"]+)[\"])", text, flags=re.MULTILINE)
67:     include_files = []
68:     # figure out where they are located
69:     for included_file in [x[1] for x in include_statements]:
70:         included_file = os.sep.join(included_file.split('/'))
71:         found = False
72:         for include_path in include_paths:
73:             ipath = os.path.join(include_path, included_file)
74:             if os.path.isfile(ipath):
75:                 include_files.append(ipath)
76:                 found = True
77:                 break
78:         if not found:
79:             raise Exception('Could not find include file "' + included_file + '", included from file "' + fpath + '"')
80:     return ([x[0] for x in include_statements], include_files)
81: 
82: def cleanup_file(text):
83:     # remove all "#pragma once" notifications
84:     text = re.sub('#pragma once', '', text)
85:     return text
86: 
87: # recursively get all includes and write them
88: written_files = {}
89: 
90: #licenses
91: licenses = []
92: 
93: def need_to_write_file(current_file, ignore_excluded = False):
94:     if amal_dir in current_file:
95:         return False
96:     if current_file in always_excluded:
97:         return False
98:     if current_file.split(os.sep)[-1] in excluded_files and not ignore_excluded:
99:         # file is in ignored files set
100:         return False
101:     if current_file in written_files:
102:         # file is already written
103:         return False
104:     return True
105: 
106: def find_license(original_file):
107:     global licenses
108:     file = original_file
109:     license = ""
110:     while True:
111:         (file, end) = os.path.split(file)
112:         if file == "":
113:             break
114:         potential_license = os.path.join(file, "LICENSE")
115:         if os.path.exists(potential_license):
116:             license = potential_license
117:     if license == "":
118:         raise "Could not find license for %s" % original_file
119: 
120:     if license not in licenses:
121:         licenses += [license]
122: 
123:     return licenses.index(license)
124: 
125: 
126: def write_file(current_file, ignore_excluded = False):
127:     global linenumbers
128:     global written_files
129:     if not need_to_write_file(current_file, ignore_excluded):
130:         return ""
131:     written_files[current_file] = True
132: 
133:     # first read this file
134:     with open_utf8(current_file, 'r') as f:
135:         text = f.read()
136: 
137:     if current_file.startswith("third_party") and not current_file.endswith("LICENSE"):
138:         lic_idx = find_license(current_file)
139:         text = "\n\n// LICENSE_CHANGE_BEGIN\n// The following code up to LICENSE_CHANGE_END is subject to THIRD PARTY LICENSE #%s\n// See the end of this file for a list\n\n" % str(lic_idx + 1) + text + "\n\n// LICENSE_CHANGE_END\n"
140: 
141:     (statements, includes) = get_includes(current_file, text)
142:     # find the linenr of the final #include statement we parsed
143:     if len(statements) > 0:
144:         index = text.find(statements[-1])
145:         linenr = len(text[:index].split('\n'))
146: 
147:         # now write all the dependencies of this header first
148:         for i in range(len(includes)):
149:             include_text = write_file(includes[i])
150:             if linenumbers and i == len(includes) - 1:
151:                 # for the last include statement, we also include a #line directive
152:                 include_text += '\n#line %d "%s"\n' % (linenr, current_file)
153:             text = text.replace(statements[i], include_text)
154: 
155:     # add the initial line here
156:     if linenumbers:
157:         text = '\n#line 1 "%s"\n' % (current_file,) + text
158:     # print(current_file)
159:     # now read the header and write it
160:     return cleanup_file(text)
161: 
162: def write_dir(dir):
163:     files = os.listdir(dir)
164:     files.sort()
165:     text = ""
166:     for fname in files:
167:         if fname in excluded_files:
168:             continue
169:         fpath = os.path.join(dir, fname)
170:         if os.path.isdir(fpath):
171:             text += write_dir(fpath)
172:         elif fname.endswith('.cpp') or fname.endswith('.c') or fname.endswith('.cc'):
173:             text += write_file(fpath)
174:     return text
175: 
176: def copy_if_different(src, dest):
177:     if os.path.isfile(dest):
178:         # dest exists, check if the files are different
179:         with open_utf8(src, 'r') as f:
180:             source_text = f.read()
181:         with open_utf8(dest, 'r') as f:
182:             dest_text = f.read()
183:         if source_text == dest_text:
184:             # print("Skipping copy of " + src + ", identical copy already exists at " + dest)
185:             return
186:     # print("Copying " + src + " to " + dest)
187:     shutil.copyfile(src, dest)
188: 
189: def git_commit_hash():
190:     return subprocess.check_output(['git','log','-1','--format=%h']).strip()
191: 
192: 
193: def generate_duckdb_hpp(header_file):
194:     print("-----------------------")
195:     print("-- Writing " + header_file + " --")
196:     print("-----------------------")
197:     with open_utf8(temp_header, 'w+') as hfile:
198:         hfile.write("/*\n")
199:         hfile.write(write_file("LICENSE"))
200:         hfile.write("*/\n\n")
201: 
202:         hfile.write("#pragma once\n")
203:         hfile.write("#define DUCKDB_AMALGAMATION 1\n")
204:         hfile.write("#define DUCKDB_SOURCE_ID \"%s\"\n" % git_commit_hash().decode('utf8'))
205:         for fpath in main_header_files:
206:             hfile.write(write_file(fpath))
207: 
208: def generate_amalgamation(source_file, header_file):
209:     # construct duckdb.hpp from these headers
210:     generate_duckdb_hpp(header_file)
211: 
212:     # now construct duckdb.cpp
213:     print("------------------------")
214:     print("-- Writing " + source_file + " --")
215:     print("------------------------")
216: 
217:     # scan all the .cpp files
218:     with open_utf8(temp_source, 'w+') as sfile:
219:         header_file_name = header_file.split(os.sep)[-1]
220:         sfile.write('#include "' + header_file_name + '"\n\n')
221:         sfile.write("#ifndef DUCKDB_AMALGAMATION\n#error header mismatch\n#endif\n\n")
222:         for compile_dir in compile_directories:
223:             sfile.write(write_dir(compile_dir))
224:         # for windows we write file_system.cpp last
225:         # this is because it includes windows.h which contains a lot of #define statements that mess up the other code
226:         sfile.write(write_file(file_system_cpp, True))
227: 
228:         sfile.write('\n\n/*\n')
229:         license_idx = 0
230:         for license in licenses:
231:             sfile.write("\n\n\n### THIRD PARTY LICENSE #%s ###\n\n" % str(license_idx + 1))
232:             sfile.write(write_file(license))
233:             license_idx+=1
234:         sfile.write('\n\n*/\n')
235: 
236: 
237:     copy_if_different(temp_header, header_file)
238:     copy_if_different(temp_source, source_file)
239:     try:
240:         os.remove(temp_header)
241:         os.remove(temp_source)
242:     except:
243:         pass
244: 
245: def list_files(dname, file_list):
246:     files = os.listdir(dname)
247:     files.sort()
248:     for fname in files:
249:         if fname in excluded_files:
250:             continue
251:         fpath = os.path.join(dname, fname)
252:         if os.path.isdir(fpath):
253:             list_files(fpath, file_list)
254:         elif fname.endswith('.cpp') or fname.endswith('.c') or fname.endswith('.cc'):
255:             if need_to_write_file(fpath):
256:                 file_list.append(fpath)
257: 
258: def list_sources():
259:     file_list = []
260:     for compile_dir in compile_directories:
261:         list_files(compile_dir, file_list)
262:     return file_list + [file_system_cpp]
263: 
264: def list_include_files_recursive(dname, file_list):
265:     files = os.listdir(dname)
266:     files.sort()
267:     for fname in files:
268:         if fname in excluded_files:
269:             continue
270:         fpath = os.path.join(dname, fname)
271:         if os.path.isdir(fpath):
272:             list_include_files_recursive(fpath, file_list)
273:         elif fname.endswith('.hpp') or fname.endswith('.h') or fname.endswith('.hh') or fname.endswith('.tcc'):
274:             file_list.append(fpath)
275: 
276: def list_includes_files(include_dirs):
277:     file_list = []
278:     for include_dir in include_dirs:
279:         list_include_files_recursive(include_dir, file_list)
280:     return file_list
281: 
282: def list_includes():
283:     return list_includes_files(include_paths)
284: 
285: def gather_file(current_file, source_files, header_files):
286:     global linenumbers
287:     global written_files
288:     if not need_to_write_file(current_file, False):
289:         return ""
290:     written_files[current_file] = True
291: 
292:     # first read this file
293:     with open_utf8(current_file, 'r') as f:
294:         text = f.read()
295: 
296:     (statements, includes) = get_includes(current_file, text)
297:     # find the linenr of the final #include statement we parsed
298:     if len(statements) > 0:
299:         index = text.find(statements[-1])
300:         linenr = len(text[:index].split('\n'))
301: 
302:         # now write all the dependencies of this header first
303:         for i in range(len(includes)):
304:             # source file inclusions are inlined into the main text
305:             include_text = write_file(includes[i])
306:             if linenumbers and i == len(includes) - 1:
307:                 # for the last include statement, we also include a #line directive
308:                 include_text += '\n#line %d "%s"\n' % (linenr, current_file)
309:             if includes[i].endswith('.cpp') or includes[i].endswith('.cc') or includes[i].endswith('.c'):
310:                 # source file inclusions are inlined into the main text
311:                 text = text.replace(statements[i], include_text)
312:             else:
313:                 text = text.replace(statements[i], '')
314:                 header_files.append(include_text)
315: 
316:     # add the initial line here
317:     if linenumbers:
318:         text = '\n#line 1 "%s"\n' % (current_file,) + text
319:     source_files.append(cleanup_file(text))
320: 
321: 
322: 
323: def gather_files(dir, source_files, header_files):
324:     files = os.listdir(dir)
325:     files.sort()
326:     for fname in files:
327:         if fname in excluded_files:
328:             continue
329:         fpath = os.path.join(dir, fname)
330:         if os.path.isdir(fpath):
331:             gather_files(fpath, source_files, header_files)
332:         elif fname.endswith('.cpp') or fname.endswith('.c') or fname.endswith('.cc'):
333:             gather_file(fpath, source_files, header_files)
334: 
335: 
336: def generate_amalgamation_splits(source_file, header_file, nsplits):
337:     # construct duckdb.hpp from these headers
338:     generate_duckdb_hpp(header_file)
339: 
340:     # gather all files to read and write
341:     source_files = []
342:     header_files = []
343:     for compile_dir in compile_directories:
344:         if compile_dir != src_dir:
345:             continue
346:         gather_files(compile_dir, source_files, header_files)
347: 
348:     # for windows we write file_system.cpp last
349:     # this is because it includes windows.h which contains a lot of #define statements that mess up the other code
350:     source_files.append(write_file(os.path.join('src', 'common', 'file_system.cpp'), True))
351: 
352:     # write duckdb-internal.hpp
353:     if '.hpp' in header_file:
354:         internal_header_file = header_file.replace('.hpp', '-internal.hpp')
355:     elif '.h' in header_file:
356:         internal_header_file = header_file.replace('.h', '-internal.h')
357:     else:
358:         raise "Unknown extension of header file"
359: 
360:     temp_internal_header = internal_header_file + '.tmp'
361: 
362:     with open_utf8(temp_internal_header, 'w+') as f:
363:         write_license(f)
364:         for hfile in header_files:
365:             f.write(hfile)
366: 
367:     # count the total amount of bytes in the source files
368:     total_bytes = 0
369:     for sfile in source_files:
370:         total_bytes += len(sfile)
371: 
372:     # now write the individual splits
373:     # we approximate the splitting up by making every file have roughly the same amount of bytes
374:     split_bytes = total_bytes / nsplits
375:     current_bytes = 0
376:     partitions = []
377:     partition_names = []
378:     current_partition = []
379:     current_partition_idx = 1
380:     for sfile in source_files:
381:         current_partition.append(sfile)
382:         current_bytes += len(sfile)
383:         if current_bytes >= split_bytes:
384:             partition_names.append(str(current_partition_idx))
385:             partitions.append(current_partition)
386:             current_partition = []
387:             current_bytes = 0
388:             current_partition_idx += 1
389:     if len(current_partition) > 0:
390:         partition_names.append(str(current_partition_idx))
391:         partitions.append(current_partition)
392:         current_partition = []
393:         current_bytes = 0
394:     # generate partitions from the third party libraries
395:     for compile_dir in compile_directories:
396:         if compile_dir != src_dir:
397:             partition_names.append(compile_dir.split(os.sep)[-1])
398:             partitions.append(write_dir(compile_dir))
399: 
400:     header_file_name = header_file.split(os.sep)[-1]
401:     internal_header_file_name = internal_header_file.split(os.sep)[-1]
402: 
403:     partition_fnames = []
404:     current_partition = 0
405:     for partition in partitions:
406:         partition_name = source_file.replace('.cpp', '-%s.cpp' % (partition_names[current_partition],))
407:         temp_partition_name = partition_name + '.tmp'
408:         partition_fnames.append([partition_name, temp_partition_name])
409:         with open_utf8(temp_partition_name, 'w+') as f:
410:             write_license(f)
411:             f.write('#include "%s"\n#include "%s"' % (header_file_name, internal_header_file_name))
412:             f.write('''
413: #ifndef DUCKDB_AMALGAMATION
414: #error header mismatch
415: #endif
416: ''')
417:             for sfile in partition:
418:                 f.write(sfile)
419:         current_partition += 1
420: 
421:     copy_if_different(temp_header, header_file)
422:     copy_if_different(temp_internal_header, internal_header_file)
423:     try:
424:         os.remove(temp_header)
425:         os.remove(temp_internal_header)
426:     except:
427:         pass
428:     for p in partition_fnames:
429:         copy_if_different(p[1], p[0])
430:         try:
431:             os.remove(p[1])
432:         except:
433:             pass
434: def list_include_dirs():
435:     return include_paths
436: 
437: if __name__ == "__main__":
438:     nsplits = 1
439:     for arg in sys.argv:
440:         if arg == '--linenumbers':
441:             linenumbers = True
442:         elif arg == '--no-linenumbers':
443:             linenumbers = False
444:         elif arg.startswith('--header='):
445:             header_file = os.path.join(*arg.split('=', 1)[1].split('/'))
446:         elif arg.startswith('--source='):
447:             source_file = os.path.join(*arg.split('=', 1)[1].split('/'))
448:         elif arg.startswith('--splits='):
449:             nsplits = int(arg.split('=', 1)[1])
450:         elif arg.startswith('--list-sources'):
451:             file_list = list_sources()
452:             print('\n'.join(file_list))
453:             exit(1)
454:         elif arg.startswith('--list-objects'):
455:             file_list = list_sources()
456:             print(' '.join([x.rsplit('.', 1)[0] + '.o' for x in file_list]))
457:             exit(1)
458:         elif arg.startswith('--includes'):
459:             include_dirs = list_include_dirs()
460:             print(' '.join(['-I' + x for x in include_dirs]))
461:             exit(1)
462:         elif arg.startswith('--include-directories'):
463:             include_dirs = list_include_dirs()
464:             print('\n'.join(include_dirs))
465:             exit(1)
466:     if not os.path.exists(amal_dir):
467:         os.makedirs(amal_dir)
468: 
469:     if nsplits > 1:
470:         generate_amalgamation_splits(source_file, header_file, nsplits)
471:     else:
472:         generate_amalgamation(source_file, header_file)
473: 
[end of scripts/amalgamation.py]
[start of scripts/package_build.py]
1: import os
2: import sys
3: import shutil
4: import subprocess
5: from python_helpers import open_utf8
6: 
7: excluded_objects = ['utf8proc_data.cpp']
8: 
9: def get_libraries(binary_dir, libraries):
10:     result_libs = []
11:     def find_library_recursive(search_dir, potential_libnames):
12:         flist = os.listdir(search_dir)
13:         for fname in flist:
14:             fpath = os.path.join(search_dir, fname)
15:             if os.path.isdir(fpath):
16:                 entry = find_library_recursive(fpath, potential_libnames)
17:                 if entry != None:
18:                     return entry
19:             elif os.path.isfile(fpath) and fname in potential_libnames:
20:                 return search_dir
21:         return None
22: 
23:     def find_library(search_dir, libname, result_libs):
24:         if libname == 'Threads::Threads':
25:             result_libs += [(None, 'pthread')]
26:             return
27:         libextensions = ['.a', '.lib']
28:         libprefixes = ['', 'lib']
29:         potential_libnames = []
30:         for ext in libextensions:
31:             for prefix in libprefixes:
32:                 potential_libnames.append(prefix + libname + ext)
33:         libdir = find_library_recursive(binary_dir, potential_libnames)
34: 
35:         result_libs += [(libdir, libname)]
36: 
37:     result_libs += [(os.path.join(binary_dir, 'src'), 'duckdb_static')]
38:     result_libs += [(os.path.join(binary_dir, 'extension', 'parquet'), 'parquet_extension')]
39:     result_libs += [(os.path.join(binary_dir, 'extension', 'icu'), 'icu_extension')]
40: 
41:     for libname in libraries:
42:         find_library(binary_dir, libname, result_libs)
43: 
44:     return result_libs
45: 
46: def includes():
47:     scripts_dir = os.path.dirname(os.path.abspath(__file__))
48:     # add includes for duckdb and parquet
49:     includes = []
50:     includes.append(os.path.join(scripts_dir, '..', 'src', 'include'))
51:     includes.append(os.path.join(scripts_dir, '..', 'extension', 'parquet', 'include'))
52:     return includes
53: 
54: def include_flags():
55:     return ' ' + ' '.join(['-I' + x for x in includes()])
56: 
57: def convert_backslashes(x):
58:     return '/'.join(x.split(os.path.sep))
59: 
60: def get_relative_path(source_dir, target_file):
61:     source_dir = convert_backslashes(source_dir)
62:     target_file = convert_backslashes(target_file)
63: 
64:     # absolute path: try to convert
65:     if source_dir in target_file:
66:         target_file = target_file.replace(source_dir, "").lstrip('/')
67:     return target_file
68: 
69: def build_package(target_dir, linenumbers = False):
70:     if not os.path.isdir(target_dir):
71:         os.mkdir(target_dir)
72: 
73:     scripts_dir = os.path.dirname(os.path.abspath(__file__))
74:     sys.path.append(scripts_dir)
75:     import amalgamation
76:     sys.path.append(os.path.join(scripts_dir, '..', 'extension', 'parquet'))
77:     import parquet_amalgamation
78: 
79:     prev_wd = os.getcwd()
80:     os.chdir(os.path.join(scripts_dir, '..'))
81: 
82:     # obtain the list of source files from the amalgamation
83:     source_list = amalgamation.list_sources()
84:     include_list = amalgamation.list_include_dirs()
85:     include_files = amalgamation.list_includes()
86: 
87:     def copy_file(src, target_dir):
88:         # get the path
89:         full_path = src.split(os.path.sep)
90:         current_path = target_dir
91:         for i in range(len(full_path) - 1):
92:             current_path = os.path.join(current_path, full_path[i])
93:             if not os.path.isdir(current_path):
94:                 os.mkdir(current_path)
95:         target_name = full_path[-1]
96:         target_file = os.path.join(current_path, target_name)
97:         amalgamation.copy_if_different(src, target_file)
98: 
99: 
100:     # now do the same for the parquet extension
101:     parquet_include_directories = parquet_amalgamation.include_directories
102: 
103:     include_files += amalgamation.list_includes_files(parquet_include_directories)
104: 
105:     include_list += parquet_include_directories
106:     source_list += parquet_amalgamation.source_files
107: 
108:     for src in source_list:
109:         copy_file(src, target_dir)
110: 
111:     for inc in include_files:
112:         copy_file(inc, target_dir)
113: 
114:     # handle pragma_version.cpp: paste #define DUCKDB_SOURCE_ID there
115:     # read the source id
116:     proc = subprocess.Popen(['git', 'rev-parse', 'HEAD'], stdout=subprocess.PIPE, stderr=subprocess.PIPE, cwd=os.path.join(scripts_dir, '..'))
117:     githash = proc.stdout.read().strip().decode('utf8')
118:     # open the file and read the current contents
119:     fpath = os.path.join(target_dir, 'src', 'function', 'table', 'version', 'pragma_version.cpp')
120:     with open_utf8(fpath, 'r') as f:
121:         text = f.read()
122:     # now add the DUCKDB_SOURCE_ID define, if it is not there already
123:     found = False
124:     lines = text.split('\n')
125:     for i in range(len(lines)):
126:         if '#define DUCKDB_SOURCE_ID ' in lines[i]:
127:             lines[i] = '#define DUCKDB_SOURCE_ID "{}"'.format(githash)
128:             found = True
129:             break
130:     if not found:
131:         text = '#ifndef DUCKDB_SOURCE_ID\n#define DUCKDB_SOURCE_ID "{}"\n#endif\n'.format(githash) + text
132:     else:
133:         text = '\n'.join(text)
134:     with open_utf8(fpath, 'w+') as f:
135:         f.write(text)
136: 
137:     def file_is_excluded(fname):
138:         for entry in excluded_objects:
139:             if entry in fname:
140:                 return True
141:         return False
142: 
143:     def generate_unity_build(entries, idx, linenumbers):
144:         ub_file = os.path.join(target_dir, 'amalgamation-{}.cpp'.format(str(idx)))
145:         with open_utf8(ub_file, 'w+') as f:
146:             for entry in entries:
147:                 if linenumbers:
148:                     f.write('#line 0 "{}"\n'.format(convert_backslashes(entry)))
149:                 f.write('#include "{}"\n\n'.format(convert_backslashes(entry)))
150:         return ub_file
151: 
152:     def generate_unity_builds(source_list, nsplits, linenumbers):
153:         source_list.sort()
154: 
155:         files_per_split = len(source_list) / nsplits
156:         new_source_files = []
157:         current_files = []
158:         idx = 1
159:         for entry in source_list:
160:             if not entry.startswith('src'):
161:                 new_source_files.append(os.path.join('duckdb', entry))
162:                 continue
163: 
164:             current_files.append(entry)
165:             if len(current_files) > files_per_split:
166:                 new_source_files.append(generate_unity_build(current_files, idx, linenumbers))
167:                 current_files = []
168:                 idx += 1
169:         if len(current_files) > 0:
170:             new_source_files.append(generate_unity_build(current_files, idx, linenumbers))
171:             current_files = []
172:             idx += 1
173: 
174:         return new_source_files
175: 
176:     original_sources = source_list
177:     source_list = generate_unity_builds(source_list, 8, linenumbers)
178: 
179:     os.chdir(prev_wd)
180:     return ([convert_backslashes(x) for x in source_list if not file_is_excluded(x)],
181:             [convert_backslashes(x) for x in include_list],
182:             [convert_backslashes(x) for x in original_sources])
[end of scripts/package_build.py]
[start of src/function/table/version/CMakeLists.txt]
1: add_definitions(-DDUCKDB_SOURCE_ID="\""${GIT_COMMIT_HASH}"\"")
2: 
3: add_library_unity(duckdb_func_table_version OBJECT pragma_version.cpp)
4: 
5: set(ALL_OBJECT_FILES
6:     ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_func_table_version>
7:     PARENT_SCOPE)
[end of src/function/table/version/CMakeLists.txt]
[start of src/function/table/version/pragma_version.cpp]
1: #include "duckdb/function/table/sqlite_functions.hpp"
2: #include "duckdb/main/database.hpp"
3: 
4: namespace duckdb {
5: 
6: struct PragmaVersionData : public FunctionOperatorData {
7: 	PragmaVersionData() : finished(false) {
8: 	}
9: 	bool finished;
10: };
11: 
12: static unique_ptr<FunctionData> pragma_version_bind(ClientContext &context, vector<Value> &inputs,
13:                                                     unordered_map<string, Value> &named_parameters,
14:                                                     vector<LogicalType> &return_types, vector<string> &names) {
15: 	names.push_back("library_version");
16: 	return_types.push_back(LogicalType::VARCHAR);
17: 	names.push_back("source_id");
18: 	return_types.push_back(LogicalType::VARCHAR);
19: 	return nullptr;
20: }
21: 
22: static unique_ptr<FunctionOperatorData> pragma_version_init(ClientContext &context, const FunctionData *bind_data,
23:                                                             vector<column_t> &column_ids,
24:                                                             TableFilterSet *table_filters) {
25: 	return make_unique<PragmaVersionData>();
26: }
27: 
28: static void pragma_version(ClientContext &context, const FunctionData *bind_data, FunctionOperatorData *operator_state,
29:                            DataChunk &output) {
30: 	auto &data = (PragmaVersionData &)*operator_state;
31: 	if (data.finished) {
32: 		// finished returning values
33: 		return;
34: 	}
35: 	output.SetCardinality(1);
36: 	output.SetValue(0, 0, DuckDB::LibraryVersion());
37: 	output.SetValue(1, 0, DuckDB::SourceID());
38: 	data.finished = true;
39: }
40: 
41: void PragmaVersion::RegisterFunction(BuiltinFunctions &set) {
42: 	set.AddFunction(TableFunction("pragma_version", {}, pragma_version, pragma_version_bind, pragma_version_init));
43: }
44: 
45: const char *DuckDB::SourceID() {
46: 	return DUCKDB_SOURCE_ID;
47: }
48: 
49: const char *DuckDB::LibraryVersion() {
50: 	return "DuckDB";
51: }
52: 
53: } // namespace duckdb
[end of src/function/table/version/pragma_version.cpp]
[start of tools/shell/shell.c]
1: /* DO NOT EDIT!
2: ** This file is automatically generated by the script in the canonical
3: ** SQLite source tree at tool/mkshellc.tcl.  That script combines source
4: ** code from various constituent source files of SQLite into this single
5: ** "shell.c" file used to implement the SQLite command-line shell.
6: **
7: ** Most of the code found below comes from the "src/shell.c.in" file in
8: ** the canonical SQLite source tree.  That main file contains "INCLUDE"
9: ** lines that specify other files in the canonical source tree that are
10: ** inserted to getnerate this complete program source file.
11: **
12: ** The code from multiple files is combined into this single "shell.c"
13: ** source file to help make the command-line program easier to compile.
14: **
15: ** To modify this program, get a copy of the canonical SQLite source tree,
16: ** edit the src/shell.c.in" and/or some of the other files that are included
17: ** by "src/shell.c.in", then rerun the tool/mkshellc.tcl script.
18: */
19: /*
20: ** 2001 September 15
21: **
22: ** The author disclaims copyright to this source code.  In place of
23: ** a legal notice, here is a blessing:
24: **
25: **    May you do good and not evil.
26: **    May you find forgiveness for yourself and forgive others.
27: **    May you share freely, never taking more than you give.
28: **
29: *************************************************************************
30: ** This file contains code to implement the "sqlite" command line
31: ** utility for accessing SQLite databases.
32: */
33: #if (defined(_WIN32) || defined(WIN32)) && !defined(_CRT_SECURE_NO_WARNINGS)
34: /* This needs to come before any includes for MSVC compiler */
35: #define _CRT_SECURE_NO_WARNINGS
36: #endif
37: 
38: /*
39: ** Determine if we are dealing with WinRT, which provides only a subset of
40: ** the full Win32 API.
41: */
42: #if !defined(SQLITE_OS_WINRT)
43: # define SQLITE_OS_WINRT 0
44: #endif
45: 
46: /*
47: ** Warning pragmas copied from msvc.h in the core.
48: */
49: #if defined(_MSC_VER)
50: #pragma warning(disable : 4054)
51: #pragma warning(disable : 4055)
52: #pragma warning(disable : 4100)
53: #pragma warning(disable : 4127)
54: #pragma warning(disable : 4130)
55: #pragma warning(disable : 4152)
56: #pragma warning(disable : 4189)
57: #pragma warning(disable : 4206)
58: #pragma warning(disable : 4210)
59: #pragma warning(disable : 4232)
60: #pragma warning(disable : 4244)
61: #pragma warning(disable : 4305)
62: #pragma warning(disable : 4306)
63: #pragma warning(disable : 4702)
64: #pragma warning(disable : 4706)
65: #endif /* defined(_MSC_VER) */
66: 
67: /*
68: ** No support for loadable extensions in VxWorks.
69: */
70: #if (defined(__RTP__) || defined(_WRS_KERNEL)) && !SQLITE_OMIT_LOAD_EXTENSION
71: # define SQLITE_OMIT_LOAD_EXTENSION 1
72: #endif
73: 
74: /*
75: ** Enable large-file support for fopen() and friends on unix.
76: */
77: #ifndef SQLITE_DISABLE_LFS
78: # define _LARGE_FILE       1
79: # ifndef _FILE_OFFSET_BITS
80: #   define _FILE_OFFSET_BITS 64
81: # endif
82: # define _LARGEFILE_SOURCE 1
83: #endif
84: 
85: #include <stdlib.h>
86: #include <string.h>
87: #include <stdio.h>
88: #include <assert.h>
89: #include "sqlite3.h"
90: typedef sqlite3_int64 i64;
91: typedef sqlite3_uint64 u64;
92: typedef unsigned char u8;
93: #if SQLITE_USER_AUTHENTICATION
94: # include "sqlite3userauth.h"
95: #endif
96: #include <ctype.h>
97: #include <stdarg.h>
98: 
99: #if !defined(_WIN32) && !defined(WIN32)
100: # include <signal.h>
101: # if !defined(__RTP__) && !defined(_WRS_KERNEL)
102: #  include <pwd.h>
103: # endif
104: #endif
105: #if (!defined(_WIN32) && !defined(WIN32)) || defined(__MINGW32__)
106: # include <unistd.h>
107: # include <dirent.h>
108: # define GETPID getpid
109: # if defined(__MINGW32__)
110: #  define DIRENT dirent
111: #  ifndef S_ISLNK
112: #   define S_ISLNK(mode) (0)
113: #  endif
114: # endif
115: #else
116: # define GETPID (int)GetCurrentProcessId
117: #endif
118: #include <sys/types.h>
119: #include <sys/stat.h>
120: 
121: #if HAVE_READLINE
122: # include <readline/readline.h>
123: # include <readline/history.h>
124: #endif
125: 
126: #if HAVE_EDITLINE
127: # include <editline/readline.h>
128: #endif
129: 
130: #if HAVE_EDITLINE || HAVE_READLINE
131: 
132: # define shell_add_history(X) add_history(X)
133: # define shell_read_history(X) read_history(X)
134: # define shell_write_history(X) write_history(X)
135: # define shell_stifle_history(X) stifle_history(X)
136: # define shell_readline(X) readline(X)
137: 
138: #elif HAVE_LINENOISE
139: 
140: # include "linenoise.h"
141: # define shell_add_history(X) linenoiseHistoryAdd(X)
142: # define shell_read_history(X) linenoiseHistoryLoad(X)
143: # define shell_write_history(X) linenoiseHistorySave(X)
144: # define shell_stifle_history(X) linenoiseHistorySetMaxLen(X)
145: # define shell_readline(X) linenoise(X)
146: 
147: #else
148: 
149: # define shell_read_history(X)
150: # define shell_write_history(X)
151: # define shell_stifle_history(X)
152: 
153: # define SHELL_USE_LOCAL_GETLINE 1
154: #endif
155: 
156: 
157: #if defined(_WIN32) || defined(WIN32)
158: # if SQLITE_OS_WINRT
159: #  define SQLITE_OMIT_POPEN 1
160: # else
161: #  include <io.h>
162: #  include <fcntl.h>
163: #  define isatty(h) _isatty(h)
164: #  ifndef access
165: #   define access(f,m) _access((f),(m))
166: #  endif
167: #  ifndef unlink
168: #   define unlink _unlink
169: #  endif
170: #  ifndef strdup
171: #   define strdup _strdup
172: #  endif
173: #  undef popen
174: #  define popen _popen
175: #  undef pclose
176: #  define pclose _pclose
177: # endif
178: #else
179:  /* Make sure isatty() has a prototype. */
180:  extern int isatty(int);
181: 
182: # if !defined(__RTP__) && !defined(_WRS_KERNEL)
183:   /* popen and pclose are not C89 functions and so are
184:   ** sometimes omitted from the <stdio.h> header */
185:    extern FILE *popen(const char*,const char*);
186:    extern int pclose(FILE*);
187: # else
188: #  define SQLITE_OMIT_POPEN 1
189: # endif
190: #endif
191: 
192: #if defined(_WIN32_WCE)
193: /* Windows CE (arm-wince-mingw32ce-gcc) does not provide isatty()
194:  * thus we always assume that we have a console. That can be
195:  * overridden with the -batch command line option.
196:  */
197: #define isatty(x) 1
198: #endif
199: 
200: /* ctype macros that work with signed characters */
201: #define IsSpace(X)  isspace((unsigned char)X)
202: #define IsDigit(X)  isdigit((unsigned char)X)
203: #define ToLower(X)  (char)tolower((unsigned char)X)
204: 
205: #if defined(_WIN32) || defined(WIN32)
206: #if SQLITE_OS_WINRT
207: #include <intrin.h>
208: #endif
209: #include <windows.h>
210: 
211: /* string conversion routines only needed on Win32 */
212: extern char *sqlite3_win32_unicode_to_utf8(LPCWSTR);
213: extern char *sqlite3_win32_mbcs_to_utf8_v2(const char *, int);
214: extern char *sqlite3_win32_utf8_to_mbcs_v2(const char *, int);
215: extern LPWSTR sqlite3_win32_utf8_to_unicode(const char *zText);
216: #endif
217: 
218: /* On Windows, we normally run with output mode of TEXT so that \n characters
219: ** are automatically translated into \r\n.  However, this behavior needs
220: ** to be disabled in some cases (ex: when generating CSV output and when
221: ** rendering quoted strings that contain \n characters).  The following
222: ** routines take care of that.
223: */
224: #if (defined(_WIN32) || defined(WIN32)) && !SQLITE_OS_WINRT
225: static void setBinaryMode(FILE *file, int isOutput){
226:   if( isOutput ) fflush(file);
227:   _setmode(_fileno(file), _O_BINARY);
228: }
229: static void setTextMode(FILE *file, int isOutput){
230:   if( isOutput ) fflush(file);
231:   _setmode(_fileno(file), _O_TEXT);
232: }
233: #else
234: # define setBinaryMode(X,Y)
235: # define setTextMode(X,Y)
236: #endif
237: 
238: 
239: /* True if the timer is enabled */
240: static int enableTimer = 0;
241: 
242: /* Return the current wall-clock time */
243: static sqlite3_int64 timeOfDay(void){
244:   static sqlite3_vfs *clockVfs = 0;
245:   sqlite3_int64 t;
246:   if( clockVfs==0 ) clockVfs = sqlite3_vfs_find(0);
247:   if( clockVfs->iVersion>=2 && clockVfs->xCurrentTimeInt64!=0 ){
248:     clockVfs->xCurrentTimeInt64(clockVfs, &t);
249:   }else{
250:     double r;
251:     clockVfs->xCurrentTime(clockVfs, &r);
252:     t = (sqlite3_int64)(r*86400000.0);
253:   }
254:   return t;
255: }
256: 
257: #if !defined(_WIN32) && !defined(WIN32) && !defined(__minux)
258: #include <sys/time.h>
259: #include <sys/resource.h>
260: 
261: /* VxWorks does not support getrusage() as far as we can determine */
262: #if defined(_WRS_KERNEL) || defined(__RTP__)
263: struct rusage {
264:   struct timeval ru_utime; /* user CPU time used */
265:   struct timeval ru_stime; /* system CPU time used */
266: };
267: #define getrusage(A,B) memset(B,0,sizeof(*B))
268: #endif
269: 
270: /* Saved resource information for the beginning of an operation */
271: static struct rusage sBegin;  /* CPU time at start */
272: static sqlite3_int64 iBegin;  /* Wall-clock time at start */
273: 
274: /*
275: ** Begin timing an operation
276: */
277: static void beginTimer(void){
278:   if( enableTimer ){
279:     getrusage(RUSAGE_SELF, &sBegin);
280:     iBegin = timeOfDay();
281:   }
282: }
283: 
284: /* Return the difference of two time_structs in seconds */
285: static double timeDiff(struct timeval *pStart, struct timeval *pEnd){
286:   return (pEnd->tv_usec - pStart->tv_usec)*0.000001 +
287:          (double)(pEnd->tv_sec - pStart->tv_sec);
288: }
289: 
290: /*
291: ** Print the timing results.
292: */
293: static void endTimer(void){
294:   if( enableTimer ){
295:     sqlite3_int64 iEnd = timeOfDay();
296:     struct rusage sEnd;
297:     getrusage(RUSAGE_SELF, &sEnd);
298:     printf("Run Time: real %.3f user %f sys %f\n",
299:        (iEnd - iBegin)*0.001,
300:        timeDiff(&sBegin.ru_utime, &sEnd.ru_utime),
301:        timeDiff(&sBegin.ru_stime, &sEnd.ru_stime));
302:   }
303: }
304: 
305: #define BEGIN_TIMER beginTimer()
306: #define END_TIMER endTimer()
307: #define HAS_TIMER 1
308: 
309: #elif (defined(_WIN32) || defined(WIN32))
310: 
311: /* Saved resource information for the beginning of an operation */
312: static HANDLE hProcess;
313: static FILETIME ftKernelBegin;
314: static FILETIME ftUserBegin;
315: static sqlite3_int64 ftWallBegin;
316: typedef BOOL (WINAPI *GETPROCTIMES)(HANDLE, LPFILETIME, LPFILETIME,
317:                                     LPFILETIME, LPFILETIME);
318: static GETPROCTIMES getProcessTimesAddr = NULL;
319: 
320: /*
321: ** Check to see if we have timer support.  Return 1 if necessary
322: ** support found (or found previously).
323: */
324: static int hasTimer(void){
325:   if( getProcessTimesAddr ){
326:     return 1;
327:   } else {
328: #if !SQLITE_OS_WINRT
329:     /* GetProcessTimes() isn't supported in WIN95 and some other Windows
330:     ** versions. See if the version we are running on has it, and if it
331:     ** does, save off a pointer to it and the current process handle.
332:     */
333:     hProcess = GetCurrentProcess();
334:     if( hProcess ){
335:       HINSTANCE hinstLib = LoadLibrary(TEXT("Kernel32.dll"));
336:       if( NULL != hinstLib ){
337:         getProcessTimesAddr =
338:             (GETPROCTIMES) GetProcAddress(hinstLib, "GetProcessTimes");
339:         if( NULL != getProcessTimesAddr ){
340:           return 1;
341:         }
342:         FreeLibrary(hinstLib);
343:       }
344:     }
345: #endif
346:   }
347:   return 0;
348: }
349: 
350: /*
351: ** Begin timing an operation
352: */
353: static void beginTimer(void){
354:   if( enableTimer && getProcessTimesAddr ){
355:     FILETIME ftCreation, ftExit;
356:     getProcessTimesAddr(hProcess,&ftCreation,&ftExit,
357:                         &ftKernelBegin,&ftUserBegin);
358:     ftWallBegin = timeOfDay();
359:   }
360: }
361: 
362: /* Return the difference of two FILETIME structs in seconds */
363: static double timeDiff(FILETIME *pStart, FILETIME *pEnd){
364:   sqlite_int64 i64Start = *((sqlite_int64 *) pStart);
365:   sqlite_int64 i64End = *((sqlite_int64 *) pEnd);
366:   return (double) ((i64End - i64Start) / 10000000.0);
367: }
368: 
369: /*
370: ** Print the timing results.
371: */
372: static void endTimer(void){
373:   if( enableTimer && getProcessTimesAddr){
374:     FILETIME ftCreation, ftExit, ftKernelEnd, ftUserEnd;
375:     sqlite3_int64 ftWallEnd = timeOfDay();
376:     getProcessTimesAddr(hProcess,&ftCreation,&ftExit,&ftKernelEnd,&ftUserEnd);
377:     printf("Run Time: real %.3f user %f sys %f\n",
378:        (ftWallEnd - ftWallBegin)*0.001,
379:        timeDiff(&ftUserBegin, &ftUserEnd),
380:        timeDiff(&ftKernelBegin, &ftKernelEnd));
381:   }
382: }
383: 
384: #define BEGIN_TIMER beginTimer()
385: #define END_TIMER endTimer()
386: #define HAS_TIMER hasTimer()
387: 
388: #else
389: #define BEGIN_TIMER
390: #define END_TIMER
391: #define HAS_TIMER 0
392: #endif
393: 
394: /*
395: ** Used to prevent warnings about unused parameters
396: */
397: #define UNUSED_PARAMETER(x) (void)(x)
398: 
399: /*
400: ** Number of elements in an array
401: */
402: #define ArraySize(X)  (int)(sizeof(X)/sizeof(X[0]))
403: 
404: /*
405: ** If the following flag is set, then command execution stops
406: ** at an error if we are not interactive.
407: */
408: static int bail_on_error = 0;
409: 
410: /*
411: ** Threat stdin as an interactive input if the following variable
412: ** is true.  Otherwise, assume stdin is connected to a file or pipe.
413: */
414: static int stdin_is_interactive = 1;
415: 
416: /*
417: ** On Windows systems we have to know if standard output is a console
418: ** in order to translate UTF-8 into MBCS.  The following variable is
419: ** true if translation is required.
420: */
421: static int stdout_is_console = 1;
422: 
423: /*
424: ** The following is the open SQLite database.  We make a pointer
425: ** to this database a static variable so that it can be accessed
426: ** by the SIGINT handler to interrupt database processing.
427: */
428: static sqlite3 *globalDb = 0;
429: 
430: /*
431: ** True if an interrupt (Control-C) has been received.
432: */
433: static volatile int seenInterrupt = 0;
434: 
435: #ifdef SQLITE_DEBUG
436: /*
437: ** Out-of-memory simulator variables
438: */
439: static unsigned int oomCounter = 0;    /* Simulate OOM when equals 1 */
440: static unsigned int oomRepeat = 0;     /* Number of OOMs in a row */
441: static void*(*defaultMalloc)(int) = 0; /* The low-level malloc routine */
442: #endif /* SQLITE_DEBUG */
443: 
444: /*
445: ** This is the name of our program. It is set in main(), used
446: ** in a number of other places, mostly for error messages.
447: */
448: static char *Argv0;
449: 
450: /*
451: ** Prompt strings. Initialized in main. Settable with
452: **   .prompt main continue
453: */
454: static char mainPrompt[20];     /* First line prompt. default: "sqlite> "*/
455: static char continuePrompt[20]; /* Continuation prompt. default: "   ...> " */
456: 
457: /*
458: ** Render output like fprintf().  Except, if the output is going to the
459: ** console and if this is running on a Windows machine, translate the
460: ** output from UTF-8 into MBCS.
461: */
462: #if defined(_WIN32) || defined(WIN32)
463: void utf8_printf(FILE *out, const char *zFormat, ...){
464:   va_list ap;
465:   va_start(ap, zFormat);
466:   if( stdout_is_console && (out==stdout || out==stderr) ){
467:     char *z1 = sqlite3_vmprintf(zFormat, ap);
468:     char *z2 = sqlite3_win32_utf8_to_mbcs_v2(z1, 0);
469:     sqlite3_free(z1);
470:     fputs(z2, out);
471:     sqlite3_free(z2);
472:   }else{
473:     vfprintf(out, zFormat, ap);
474:   }
475:   va_end(ap);
476: }
477: #elif !defined(utf8_printf)
478: # define utf8_printf fprintf
479: #endif
480: 
481: /*
482: ** Render output like fprintf().  This should not be used on anything that
483: ** includes string formatting (e.g. "%s").
484: */
485: #if !defined(raw_printf)
486: # define raw_printf fprintf
487: #endif
488: 
489: /* Indicate out-of-memory and exit. */
490: static void shell_out_of_memory(void){
491:   raw_printf(stderr,"Error: out of memory\n");
492:   exit(1);
493: }
494: 
495: #ifdef SQLITE_DEBUG
496: /* This routine is called when a simulated OOM occurs.  It is broken
497: ** out as a separate routine to make it easy to set a breakpoint on
498: ** the OOM
499: */
500: void shellOomFault(void){
501:   if( oomRepeat>0 ){
502:     oomRepeat--;
503:   }else{
504:     oomCounter--;
505:   }
506: }
507: #endif /* SQLITE_DEBUG */
508: 
509: #ifdef SQLITE_DEBUG
510: /* This routine is a replacement malloc() that is used to simulate
511: ** Out-Of-Memory (OOM) errors for testing purposes.
512: */
513: static void *oomMalloc(int nByte){
514:   if( oomCounter ){
515:     if( oomCounter==1 ){
516:       shellOomFault();
517:       return 0;
518:     }else{
519:       oomCounter--;
520:     }
521:   }
522:   return defaultMalloc(nByte);
523: }
524: #endif /* SQLITE_DEBUG */
525: 
526: #ifdef SQLITE_DEBUG
527: /* Register the OOM simulator.  This must occur before any memory
528: ** allocations */
529: static void registerOomSimulator(void){
530:   sqlite3_mem_methods mem;
531:   sqlite3_config(SQLITE_CONFIG_GETMALLOC, &mem);
532:   defaultMalloc = mem.xMalloc;
533:   mem.xMalloc = oomMalloc;
534:   sqlite3_config(SQLITE_CONFIG_MALLOC, &mem);
535: }
536: #endif
537: 
538: /*
539: ** Write I/O traces to the following stream.
540: */
541: #ifdef SQLITE_ENABLE_IOTRACE
542: static FILE *iotrace = 0;
543: #endif
544: 
545: /*
546: ** This routine works like printf in that its first argument is a
547: ** format string and subsequent arguments are values to be substituted
548: ** in place of % fields.  The result of formatting this string
549: ** is written to iotrace.
550: */
551: #ifdef SQLITE_ENABLE_IOTRACE
552: static void SQLITE_CDECL iotracePrintf(const char *zFormat, ...){
553:   va_list ap;
554:   char *z;
555:   if( iotrace==0 ) return;
556:   va_start(ap, zFormat);
557:   z = sqlite3_vmprintf(zFormat, ap);
558:   va_end(ap);
559:   utf8_printf(iotrace, "%s", z);
560:   sqlite3_free(z);
561: }
562: #endif
563: 
564: /*
565: ** Output string zUtf to stream pOut as w characters.  If w is negative,
566: ** then right-justify the text.  W is the width in UTF-8 characters, not
567: ** in bytes.  This is different from the %*.*s specification in printf
568: ** since with %*.*s the width is measured in bytes, not characters.
569: */
570: static void utf8_width_print(FILE *pOut, int w, const char *zUtf){
571:   int i;
572:   int n;
573:   int aw = w<0 ? -w : w;
574:   char zBuf[1000];
575:   if( aw>(int)sizeof(zBuf)/3 ) aw = (int)sizeof(zBuf)/3;
576: #ifdef HAVE_LINENOISE
577:   i = linenoiseGetRenderPosition(zUtf, strlen(zUtf), aw, &n);
578:   if (i < 0)
579: #endif
580:   for(i=n=0; zUtf[i]; i++){
581:     if( (zUtf[i]&0xc0)!=0x80 ){
582:       n++;
583:       if( n==aw ){
584:         do{ i++; }while( (zUtf[i]&0xc0)==0x80 );
585:         break;
586:       }
587:     }
588:   }
589:   if( n>=aw ){
590:     utf8_printf(pOut, "%.*s", i, zUtf);
591:   }else if( w<0 ){
592:     utf8_printf(pOut, "%*s%s", aw-n, "", zUtf);
593:   }else{
594:     utf8_printf(pOut, "%s%*s", zUtf, aw-n, "");
595:   }
596: }
597: 
598: 
599: /*
600: ** Determines if a string is a number of not.
601: */
602: static int isNumber(const char *z, int *realnum){
603:   if( *z=='-' || *z=='+' ) z++;
604:   if( !IsDigit(*z) ){
605:     return 0;
606:   }
607:   z++;
608:   if( realnum ) *realnum = 0;
609:   while( IsDigit(*z) ){ z++; }
610:   if( *z=='.' ){
611:     z++;
612:     if( !IsDigit(*z) ) return 0;
613:     while( IsDigit(*z) ){ z++; }
614:     if( realnum ) *realnum = 1;
615:   }
616:   if( *z=='e' || *z=='E' ){
617:     z++;
618:     if( *z=='+' || *z=='-' ) z++;
619:     if( !IsDigit(*z) ) return 0;
620:     while( IsDigit(*z) ){ z++; }
621:     if( realnum ) *realnum = 1;
622:   }
623:   return *z==0;
624: }
625: 
626: /*
627: ** Compute a string length that is limited to what can be stored in
628: ** lower 30 bits of a 32-bit signed integer.
629: */
630: static int strlen30(const char *z){
631:   const char *z2 = z;
632:   while( *z2 ){ z2++; }
633:   return 0x3fffffff & (int)(z2 - z);
634: }
635: 
636: /*
637: ** Return the length of a string in characters.
638: */
639: static int strlenChar(const char *z){
640: #ifdef HAVE_LINENOISE
641:   return linenoiseComputeRenderWidth(z, strlen(z));
642: #else
643:   int n = 0;
644:   while( *z ){
645:     if( (0xc0&*(z++))!=0x80 ) n++;
646:   }
647:   return n;
648: #endif
649: }
650: 
651: /*
652: ** Return true if zFile does not exist or if it is not an ordinary file.
653: */
654: #ifdef _WIN32
655: # define notNormalFile(X) 0
656: #else
657: static int notNormalFile(const char *zFile){
658:   struct stat x;
659:   int rc;
660:   memset(&x, 0, sizeof(x));
661:   rc = stat(zFile, &x);
662:   return rc || !S_ISREG(x.st_mode);
663: }
664: #endif
665: 
666: /*
667: ** This routine reads a line of text from FILE in, stores
668: ** the text in memory obtained from malloc() and returns a pointer
669: ** to the text.  NULL is returned at end of file, or if malloc()
670: ** fails.
671: **
672: ** If zLine is not NULL then it is a malloced buffer returned from
673: ** a previous call to this routine that may be reused.
674: */
675: static char *local_getline(char *zLine, FILE *in){
676:   int nLine = zLine==0 ? 0 : 100;
677:   int n = 0;
678: 
679:   while( 1 ){
680:     if( n+100>nLine ){
681:       nLine = nLine*2 + 100;
682:       zLine = realloc(zLine, nLine);
683:       if( zLine==0 ) shell_out_of_memory();
684:     }
685:     if( fgets(&zLine[n], nLine - n, in)==0 ){
686:       if( n==0 ){
687:         free(zLine);
688:         return 0;
689:       }
690:       zLine[n] = 0;
691:       break;
692:     }
693:     while( zLine[n] ) n++;
694:     if( n>0 && zLine[n-1]=='\n' ){
695:       n--;
696:       if( n>0 && zLine[n-1]=='\r' ) n--;
697:       zLine[n] = 0;
698:       break;
699:     }
700:   }
701: #if defined(_WIN32) || defined(WIN32)
702:   /* For interactive input on Windows systems, translate the
703:   ** multi-byte characterset characters into UTF-8. */
704:   if( stdin_is_interactive && in==stdin ){
705:     char *zTrans = sqlite3_win32_mbcs_to_utf8_v2(zLine, 0);
706:     if( zTrans ){
707:       int nTrans = strlen30(zTrans)+1;
708:       if( nTrans>nLine ){
709:         zLine = realloc(zLine, nTrans);
710:         if( zLine==0 ) shell_out_of_memory();
711:       }
712:       memcpy(zLine, zTrans, nTrans);
713:       sqlite3_free(zTrans);
714:     }
715:   }
716: #endif /* defined(_WIN32) || defined(WIN32) */
717:   return zLine;
718: }
719: 
720: /*
721: ** Retrieve a single line of input text.
722: **
723: ** If in==0 then read from standard input and prompt before each line.
724: ** If isContinuation is true, then a continuation prompt is appropriate.
725: ** If isContinuation is zero, then the main prompt should be used.
726: **
727: ** If zPrior is not NULL then it is a buffer from a prior call to this
728: ** routine that can be reused.
729: **
730: ** The result is stored in space obtained from malloc() and must either
731: ** be freed by the caller or else passed back into this routine via the
732: ** zPrior argument for reuse.
733: */
734: static char *one_input_line(FILE *in, char *zPrior, int isContinuation){
735:   char *zPrompt;
736:   char *zResult;
737:   if( in!=0 ){
738:     zResult = local_getline(zPrior, in);
739:   }else{
740:     zPrompt = isContinuation ? continuePrompt : mainPrompt;
741: #if SHELL_USE_LOCAL_GETLINE
742:     printf("%s", zPrompt);
743:     fflush(stdout);
744:     zResult = local_getline(zPrior, stdin);
745: #else
746:     free(zPrior);
747:     zResult = shell_readline(zPrompt);
748:     if( zResult && *zResult ) shell_add_history(zResult);
749: #endif
750:   }
751:   return zResult;
752: }
753: 
754: 
755: /*
756: ** Return the value of a hexadecimal digit.  Return -1 if the input
757: ** is not a hex digit.
758: */
759: static int hexDigitValue(char c){
760:   if( c>='0' && c<='9' ) return c - '0';
761:   if( c>='a' && c<='f' ) return c - 'a' + 10;
762:   if( c>='A' && c<='F' ) return c - 'A' + 10;
763:   return -1;
764: }
765: 
766: /*
767: ** Interpret zArg as an integer value, possibly with suffixes.
768: */
769: static sqlite3_int64 integerValue(const char *zArg){
770:   sqlite3_int64 v = 0;
771:   static const struct { char *zSuffix; int iMult; } aMult[] = {
772:     { "KiB", 1024 },
773:     { "MiB", 1024*1024 },
774:     { "GiB", 1024*1024*1024 },
775:     { "KB",  1000 },
776:     { "MB",  1000000 },
777:     { "GB",  1000000000 },
778:     { "K",   1000 },
779:     { "M",   1000000 },
780:     { "G",   1000000000 },
781:   };
782:   int i;
783:   int isNeg = 0;
784:   if( zArg[0]=='-' ){
785:     isNeg = 1;
786:     zArg++;
787:   }else if( zArg[0]=='+' ){
788:     zArg++;
789:   }
790:   if( zArg[0]=='0' && zArg[1]=='x' ){
791:     int x;
792:     zArg += 2;
793:     while( (x = hexDigitValue(zArg[0]))>=0 ){
794:       v = (v<<4) + x;
795:       zArg++;
796:     }
797:   }else{
798:     while( IsDigit(zArg[0]) ){
799:       v = v*10 + zArg[0] - '0';
800:       zArg++;
801:     }
802:   }
803:   for(i=0; i<ArraySize(aMult); i++){
804:     if( sqlite3_stricmp(aMult[i].zSuffix, zArg)==0 ){
805:       v *= aMult[i].iMult;
806:       break;
807:     }
808:   }
809:   return isNeg? -v : v;
810: }
811: 
812: /*
813: ** A variable length string to which one can append text.
814: */
815: typedef struct ShellText ShellText;
816: struct ShellText {
817:   char *z;
818:   int n;
819:   int nAlloc;
820: };
821: 
822: /*
823: ** Initialize and destroy a ShellText object
824: */
825: static void initText(ShellText *p){
826:   memset(p, 0, sizeof(*p));
827: }
828: static void freeText(ShellText *p){
829:   free(p->z);
830:   initText(p);
831: }
832: 
833: /* zIn is either a pointer to a NULL-terminated string in memory obtained
834: ** from malloc(), or a NULL pointer. The string pointed to by zAppend is
835: ** added to zIn, and the result returned in memory obtained from malloc().
836: ** zIn, if it was not NULL, is freed.
837: **
838: ** If the third argument, quote, is not '\0', then it is used as a
839: ** quote character for zAppend.
840: */
841: static void appendText(ShellText *p, char const *zAppend, char quote){
842:   int len;
843:   int i;
844:   int nAppend = strlen30(zAppend);
845: 
846:   len = nAppend+p->n+1;
847:   if( quote ){
848:     len += 2;
849:     for(i=0; i<nAppend; i++){
850:       if( zAppend[i]==quote ) len++;
851:     }
852:   }
853: 
854:   if( p->n+len>=p->nAlloc ){
855:     p->nAlloc = p->nAlloc*2 + len + 20;
856:     p->z = realloc(p->z, p->nAlloc);
857:     if( p->z==0 ) shell_out_of_memory();
858:   }
859: 
860:   if( quote ){
861:     char *zCsr = p->z+p->n;
862:     *zCsr++ = quote;
863:     for(i=0; i<nAppend; i++){
864:       *zCsr++ = zAppend[i];
865:       if( zAppend[i]==quote ) *zCsr++ = quote;
866:     }
867:     *zCsr++ = quote;
868:     p->n = (int)(zCsr - p->z);
869:     *zCsr = '\0';
870:   }else{
871:     memcpy(p->z+p->n, zAppend, nAppend);
872:     p->n += nAppend;
873:     p->z[p->n] = '\0';
874:   }
875: }
876: 
877: /*
878: ** Attempt to determine if identifier zName needs to be quoted, either
879: ** because it contains non-alphanumeric characters, or because it is an
880: ** SQLite keyword.  Be conservative in this estimate:  When in doubt assume
881: ** that quoting is required.
882: **
883: ** Return '"' if quoting is required.  Return 0 if no quoting is required.
884: */
885: static char quoteChar(const char *zName){
886:   int i;
887:   if( !isalpha((unsigned char)zName[0]) && zName[0]!='_' ) return '"';
888:   for(i=0; zName[i]; i++){
889:     if( !isalnum((unsigned char)zName[i]) && zName[i]!='_' ) return '"';
890:   }
891:   return sqlite3_keyword_check(zName, i) ? '"' : 0;
892: }
893: 
894: /*
895: ** Construct a fake object name and column list to describe the structure
896: ** of the view, virtual table, or table valued function zSchema.zName.
897: */
898: static char *shellFakeSchema(
899:   sqlite3 *db,            /* The database connection containing the vtab */
900:   const char *zSchema,    /* Schema of the database holding the vtab */
901:   const char *zName       /* The name of the virtual table */
902: ){
903:   sqlite3_stmt *pStmt = 0;
904:   char *zSql;
905:   ShellText s;
906:   char cQuote;
907:   char *zDiv = "(";
908:   int nRow = 0;
909: 
910:   zSql = sqlite3_mprintf("PRAGMA \"%w\".table_info=%Q;",
911:                          zSchema ? zSchema : "main", zName);
912:   sqlite3_prepare_v2(db, zSql, -1, &pStmt, 0);
913:   sqlite3_free(zSql);
914:   initText(&s);
915:   if( zSchema ){
916:     cQuote = quoteChar(zSchema);
917:     if( cQuote && sqlite3_stricmp(zSchema,"temp")==0 ) cQuote = 0;
918:     appendText(&s, zSchema, cQuote);
919:     appendText(&s, ".", 0);
920:   }
921:   cQuote = quoteChar(zName);
922:   appendText(&s, zName, cQuote);
923:   while( sqlite3_step(pStmt)==SQLITE_ROW ){
924:     const char *zCol = (const char*)sqlite3_column_text(pStmt, 1);
925:     nRow++;
926:     appendText(&s, zDiv, 0);
927:     zDiv = ",";
928:     cQuote = quoteChar(zCol);
929:     appendText(&s, zCol, cQuote);
930:   }
931:   appendText(&s, ")", 0);
932:   sqlite3_finalize(pStmt);
933:   if( nRow==0 ){
934:     freeText(&s);
935:     s.z = 0;
936:   }
937:   return s.z;
938: }
939: 
940: /*
941: ** SQL function:  shell_module_schema(X)
942: **
943: ** Return a fake schema for the table-valued function or eponymous virtual
944: ** table X.
945: */
946: static void shellModuleSchema(
947:   sqlite3_context *pCtx,
948:   int nVal,
949:   sqlite3_value **apVal
950: ){
951:   const char *zName = (const char*)sqlite3_value_text(apVal[0]);
952:   char *zFake = shellFakeSchema(sqlite3_context_db_handle(pCtx), 0, zName);
953:   UNUSED_PARAMETER(nVal);
954:   if( zFake ){
955:     sqlite3_result_text(pCtx, sqlite3_mprintf("/* %s */", zFake),
956:                         -1, sqlite3_free);
957:     free(zFake);
958:   }
959: }
960: 
961: /*
962: ** SQL function:  shell_add_schema(S,X)
963: **
964: ** Add the schema name X to the CREATE statement in S and return the result.
965: ** Examples:
966: **
967: **    CREATE TABLE t1(x)   ->   CREATE TABLE xyz.t1(x);
968: **
969: ** Also works on
970: **
971: **    CREATE INDEX
972: **    CREATE UNIQUE INDEX
973: **    CREATE VIEW
974: **    CREATE TRIGGER
975: **    CREATE VIRTUAL TABLE
976: **
977: ** This UDF is used by the .schema command to insert the schema name of
978: ** attached databases into the middle of the sqlite_schema.sql field.
979: */
980: static void shellAddSchemaName(
981:   sqlite3_context *pCtx,
982:   int nVal,
983:   sqlite3_value **apVal
984: ){
985:   static const char *aPrefix[] = {
986:      "TABLE",
987:      "INDEX",
988:      "UNIQUE INDEX",
989:      "VIEW",
990:      "TRIGGER",
991:      "VIRTUAL TABLE"
992:   };
993:   int i = 0;
994:   const char *zIn = (const char*)sqlite3_value_text(apVal[0]);
995:   const char *zSchema = (const char*)sqlite3_value_text(apVal[1]);
996:   const char *zName = (const char*)sqlite3_value_text(apVal[2]);
997:   sqlite3 *db = sqlite3_context_db_handle(pCtx);
998:   UNUSED_PARAMETER(nVal);
999:   if( zIn!=0 && strncmp(zIn, "CREATE ", 7)==0 ){
1000:     for(i=0; i<(int)(sizeof(aPrefix)/sizeof(aPrefix[0])); i++){
1001:       int n = strlen30(aPrefix[i]);
1002:       if( strncmp(zIn+7, aPrefix[i], n)==0 && zIn[n+7]==' ' ){
1003:         char *z = 0;
1004:         char *zFake = 0;
1005:         if( zSchema ){
1006:           char cQuote = quoteChar(zSchema);
1007:           if( cQuote && sqlite3_stricmp(zSchema,"temp")!=0 ){
1008:             z = sqlite3_mprintf("%.*s \"%w\".%s", n+7, zIn, zSchema, zIn+n+8);
1009:           }else{
1010:             z = sqlite3_mprintf("%.*s %s.%s", n+7, zIn, zSchema, zIn+n+8);
1011:           }
1012:         }
1013:         if( zName
1014:          && aPrefix[i][0]=='V'
1015:          && (zFake = shellFakeSchema(db, zSchema, zName))!=0
1016:         ){
1017:           if( z==0 ){
1018:             z = sqlite3_mprintf("%s\n/* %s */", zIn, zFake);
1019:           }else{
1020:             z = sqlite3_mprintf("%z\n/* %s */", z, zFake);
1021:           }
1022:           free(zFake);
1023:         }
1024:         if( z ){
1025:           sqlite3_result_text(pCtx, z, -1, sqlite3_free);
1026:           return;
1027:         }
1028:       }
1029:     }
1030:   }
1031:   sqlite3_result_value(pCtx, apVal[0]);
1032: }
1033: 
1034: /*
1035: ** The source code for several run-time loadable extensions is inserted
1036: ** below by the ../tool/mkshellc.tcl script.  Before processing that included
1037: ** code, we need to override some macros to make the included program code
1038: ** work here in the middle of this regular program.
1039: */
1040: #define SQLITE_EXTENSION_INIT1
1041: #define SQLITE_EXTENSION_INIT2(X) (void)(X)
1042: 
1043: #if defined(_WIN32) && defined(_MSC_VER)
1044: /************************* Begin test_windirent.h ******************/
1045: /*
1046: ** 2015 November 30
1047: **
1048: ** The author disclaims copyright to this source code.  In place of
1049: ** a legal notice, here is a blessing:
1050: **
1051: **    May you do good and not evil.
1052: **    May you find forgiveness for yourself and forgive others.
1053: **    May you share freely, never taking more than you give.
1054: **
1055: *************************************************************************
1056: ** This file contains declarations for most of the opendir() family of
1057: ** POSIX functions on Win32 using the MSVCRT.
1058: */
1059: 
1060: #if defined(_WIN32) && defined(_MSC_VER) && !defined(SQLITE_WINDIRENT_H)
1061: #define SQLITE_WINDIRENT_H
1062: 
1063: /*
1064: ** We need several data types from the Windows SDK header.
1065: */
1066: 
1067: #ifndef WIN32_LEAN_AND_MEAN
1068: #define WIN32_LEAN_AND_MEAN
1069: #endif
1070: 
1071: #include "windows.h"
1072: 
1073: /*
1074: ** We need several support functions from the SQLite core.
1075: */
1076: 
1077: /* #include "sqlite3.h" */
1078: 
1079: /*
1080: ** We need several things from the ANSI and MSVCRT headers.
1081: */
1082: 
1083: #include <stdio.h>
1084: #include <stdlib.h>
1085: #include <errno.h>
1086: #include <io.h>
1087: #include <limits.h>
1088: #include <sys/types.h>
1089: #include <sys/stat.h>
1090: 
1091: /*
1092: ** We may need several defines that should have been in "sys/stat.h".
1093: */
1094: 
1095: #ifndef S_ISREG
1096: #define S_ISREG(mode) (((mode) & S_IFMT) == S_IFREG)
1097: #endif
1098: 
1099: #ifndef S_ISDIR
1100: #define S_ISDIR(mode) (((mode) & S_IFMT) == S_IFDIR)
1101: #endif
1102: 
1103: #ifndef S_ISLNK
1104: #define S_ISLNK(mode) (0)
1105: #endif
1106: 
1107: /*
1108: ** We may need to provide the "mode_t" type.
1109: */
1110: 
1111: #ifndef MODE_T_DEFINED
1112:   #define MODE_T_DEFINED
1113:   typedef unsigned short mode_t;
1114: #endif
1115: 
1116: /*
1117: ** We may need to provide the "ino_t" type.
1118: */
1119: 
1120: #ifndef INO_T_DEFINED
1121:   #define INO_T_DEFINED
1122:   typedef unsigned short ino_t;
1123: #endif
1124: 
1125: /*
1126: ** We need to define "NAME_MAX" if it was not present in "limits.h".
1127: */
1128: 
1129: #ifndef NAME_MAX
1130: #  ifdef FILENAME_MAX
1131: #    define NAME_MAX (FILENAME_MAX)
1132: #  else
1133: #    define NAME_MAX (260)
1134: #  endif
1135: #endif
1136: 
1137: /*
1138: ** We need to define "NULL_INTPTR_T" and "BAD_INTPTR_T".
1139: */
1140: 
1141: #ifndef NULL_INTPTR_T
1142: #  define NULL_INTPTR_T ((intptr_t)(0))
1143: #endif
1144: 
1145: #ifndef BAD_INTPTR_T
1146: #  define BAD_INTPTR_T ((intptr_t)(-1))
1147: #endif
1148: 
1149: /*
1150: ** We need to provide the necessary structures and related types.
1151: */
1152: 
1153: #ifndef DIRENT_DEFINED
1154: #define DIRENT_DEFINED
1155: typedef struct DIRENT DIRENT;
1156: typedef DIRENT *LPDIRENT;
1157: struct DIRENT {
1158:   ino_t d_ino;               /* Sequence number, do not use. */
1159:   unsigned d_attributes;     /* Win32 file attributes. */
1160:   char d_name[NAME_MAX + 1]; /* Name within the directory. */
1161: };
1162: #endif
1163: 
1164: #ifndef DIR_DEFINED
1165: #define DIR_DEFINED
1166: typedef struct DIR DIR;
1167: typedef DIR *LPDIR;
1168: struct DIR {
1169:   intptr_t d_handle; /* Value returned by "_findfirst". */
1170:   DIRENT d_first;    /* DIRENT constructed based on "_findfirst". */
1171:   DIRENT d_next;     /* DIRENT constructed based on "_findnext". */
1172: };
1173: #endif
1174: 
1175: /*
1176: ** Provide a macro, for use by the implementation, to determine if a
1177: ** particular directory entry should be skipped over when searching for
1178: ** the next directory entry that should be returned by the readdir() or
1179: ** readdir_r() functions.
1180: */
1181: 
1182: #ifndef is_filtered
1183: #  define is_filtered(a) ((((a).attrib)&_A_HIDDEN) || (((a).attrib)&_A_SYSTEM))
1184: #endif
1185: 
1186: /*
1187: ** Provide the function prototype for the POSIX compatiable getenv()
1188: ** function.  This function is not thread-safe.
1189: */
1190: 
1191: extern const char *windirent_getenv(const char *name);
1192: 
1193: /*
1194: ** Finally, we can provide the function prototypes for the opendir(),
1195: ** readdir(), readdir_r(), and closedir() POSIX functions.
1196: */
1197: 
1198: extern LPDIR opendir(const char *dirname);
1199: extern LPDIRENT readdir(LPDIR dirp);
1200: extern INT readdir_r(LPDIR dirp, LPDIRENT entry, LPDIRENT *result);
1201: extern INT closedir(LPDIR dirp);
1202: 
1203: #endif /* defined(WIN32) && defined(_MSC_VER) */
1204: 
1205: /************************* End test_windirent.h ********************/
1206: /************************* Begin test_windirent.c ******************/
1207: /*
1208: ** 2015 November 30
1209: **
1210: ** The author disclaims copyright to this source code.  In place of
1211: ** a legal notice, here is a blessing:
1212: **
1213: **    May you do good and not evil.
1214: **    May you find forgiveness for yourself and forgive others.
1215: **    May you share freely, never taking more than you give.
1216: **
1217: *************************************************************************
1218: ** This file contains code to implement most of the opendir() family of
1219: ** POSIX functions on Win32 using the MSVCRT.
1220: */
1221: 
1222: #if defined(_WIN32) && defined(_MSC_VER)
1223: /* #include "test_windirent.h" */
1224: 
1225: /*
1226: ** Implementation of the POSIX getenv() function using the Win32 API.
1227: ** This function is not thread-safe.
1228: */
1229: const char *windirent_getenv(
1230:   const char *name
1231: ){
1232:   static char value[32768]; /* Maximum length, per MSDN */
1233:   DWORD dwSize = sizeof(value) / sizeof(char); /* Size in chars */
1234:   DWORD dwRet; /* Value returned by GetEnvironmentVariableA() */
1235: 
1236:   memset(value, 0, sizeof(value));
1237:   dwRet = GetEnvironmentVariableA(name, value, dwSize);
1238:   if( dwRet==0 || dwRet>dwSize ){
1239:     /*
1240:     ** The function call to GetEnvironmentVariableA() failed -OR-
1241:     ** the buffer is not large enough.  Either way, return NULL.
1242:     */
1243:     return 0;
1244:   }else{
1245:     /*
1246:     ** The function call to GetEnvironmentVariableA() succeeded
1247:     ** -AND- the buffer contains the entire value.
1248:     */
1249:     return value;
1250:   }
1251: }
1252: 
1253: /*
1254: ** Implementation of the POSIX opendir() function using the MSVCRT.
1255: */
1256: LPDIR opendir(
1257:   const char *dirname
1258: ){
1259:   struct _finddata_t data;
1260:   LPDIR dirp = (LPDIR)sqlite3_malloc(sizeof(DIR));
1261:   SIZE_T namesize = sizeof(data.name) / sizeof(data.name[0]);
1262: 
1263:   if( dirp==NULL ) return NULL;
1264:   memset(dirp, 0, sizeof(DIR));
1265: 
1266:   /* TODO: Remove this if Unix-style root paths are not used. */
1267:   if( sqlite3_stricmp(dirname, "/")==0 ){
1268:     dirname = windirent_getenv("SystemDrive");
1269:   }
1270: 
1271:   memset(&data, 0, sizeof(struct _finddata_t));
1272:   _snprintf(data.name, namesize, "%s\\*", dirname);
1273:   dirp->d_handle = _findfirst(data.name, &data);
1274: 
1275:   if( dirp->d_handle==BAD_INTPTR_T ){
1276:     closedir(dirp);
1277:     return NULL;
1278:   }
1279: 
1280:   /* TODO: Remove this block to allow hidden and/or system files. */
1281:   if( is_filtered(data) ){
1282: next:
1283: 
1284:     memset(&data, 0, sizeof(struct _finddata_t));
1285:     if( _findnext(dirp->d_handle, &data)==-1 ){
1286:       closedir(dirp);
1287:       return NULL;
1288:     }
1289: 
1290:     /* TODO: Remove this block to allow hidden and/or system files. */
1291:     if( is_filtered(data) ) goto next;
1292:   }
1293: 
1294:   dirp->d_first.d_attributes = data.attrib;
1295:   strncpy(dirp->d_first.d_name, data.name, NAME_MAX);
1296:   dirp->d_first.d_name[NAME_MAX] = '\0';
1297: 
1298:   return dirp;
1299: }
1300: 
1301: /*
1302: ** Implementation of the POSIX readdir() function using the MSVCRT.
1303: */
1304: LPDIRENT readdir(
1305:   LPDIR dirp
1306: ){
1307:   struct _finddata_t data;
1308: 
1309:   if( dirp==NULL ) return NULL;
1310: 
1311:   if( dirp->d_first.d_ino==0 ){
1312:     dirp->d_first.d_ino++;
1313:     dirp->d_next.d_ino++;
1314: 
1315:     return &dirp->d_first;
1316:   }
1317: 
1318: next:
1319: 
1320:   memset(&data, 0, sizeof(struct _finddata_t));
1321:   if( _findnext(dirp->d_handle, &data)==-1 ) return NULL;
1322: 
1323:   /* TODO: Remove this block to allow hidden and/or system files. */
1324:   if( is_filtered(data) ) goto next;
1325: 
1326:   dirp->d_next.d_ino++;
1327:   dirp->d_next.d_attributes = data.attrib;
1328:   strncpy(dirp->d_next.d_name, data.name, NAME_MAX);
1329:   dirp->d_next.d_name[NAME_MAX] = '\0';
1330: 
1331:   return &dirp->d_next;
1332: }
1333: 
1334: /*
1335: ** Implementation of the POSIX readdir_r() function using the MSVCRT.
1336: */
1337: INT readdir_r(
1338:   LPDIR dirp,
1339:   LPDIRENT entry,
1340:   LPDIRENT *result
1341: ){
1342:   struct _finddata_t data;
1343: 
1344:   if( dirp==NULL ) return EBADF;
1345: 
1346:   if( dirp->d_first.d_ino==0 ){
1347:     dirp->d_first.d_ino++;
1348:     dirp->d_next.d_ino++;
1349: 
1350:     entry->d_ino = dirp->d_first.d_ino;
1351:     entry->d_attributes = dirp->d_first.d_attributes;
1352:     strncpy(entry->d_name, dirp->d_first.d_name, NAME_MAX);
1353:     entry->d_name[NAME_MAX] = '\0';
1354: 
1355:     *result = entry;
1356:     return 0;
1357:   }
1358: 
1359: next:
1360: 
1361:   memset(&data, 0, sizeof(struct _finddata_t));
1362:   if( _findnext(dirp->d_handle, &data)==-1 ){
1363:     *result = NULL;
1364:     return ENOENT;
1365:   }
1366: 
1367:   /* TODO: Remove this block to allow hidden and/or system files. */
1368:   if( is_filtered(data) ) goto next;
1369: 
1370:   entry->d_ino = (ino_t)-1; /* not available */
1371:   entry->d_attributes = data.attrib;
1372:   strncpy(entry->d_name, data.name, NAME_MAX);
1373:   entry->d_name[NAME_MAX] = '\0';
1374: 
1375:   *result = entry;
1376:   return 0;
1377: }
1378: 
1379: /*
1380: ** Implementation of the POSIX closedir() function using the MSVCRT.
1381: */
1382: INT closedir(
1383:   LPDIR dirp
1384: ){
1385:   INT result = 0;
1386: 
1387:   if( dirp==NULL ) return EINVAL;
1388: 
1389:   if( dirp->d_handle!=NULL_INTPTR_T && dirp->d_handle!=BAD_INTPTR_T ){
1390:     result = _findclose(dirp->d_handle);
1391:   }
1392: 
1393:   sqlite3_free(dirp);
1394:   return result;
1395: }
1396: 
1397: #endif /* defined(WIN32) && defined(_MSC_VER) */
1398: 
1399: /************************* End test_windirent.c ********************/
1400: #define dirent DIRENT
1401: #endif
1402: /************************* Begin ../ext/misc/shathree.c ******************/
1403: /*
1404: ** 2017-03-08
1405: **
1406: ** The author disclaims copyright to this source code.  In place of
1407: ** a legal notice, here is a blessing:
1408: **
1409: **    May you do good and not evil.
1410: **    May you find forgiveness for yourself and forgive others.
1411: **    May you share freely, never taking more than you give.
1412: **
1413: ******************************************************************************
1414: **
1415: ** This SQLite extension implements functions that compute SHA3 hashes.
1416: ** Two SQL functions are implemented:
1417: **
1418: **     sha3(X,SIZE)
1419: **     sha3_query(Y,SIZE)
1420: **
1421: ** The sha3(X) function computes the SHA3 hash of the input X, or NULL if
1422: ** X is NULL.
1423: **
1424: ** The sha3_query(Y) function evalutes all queries in the SQL statements of Y
1425: ** and returns a hash of their results.
1426: **
1427: ** The SIZE argument is optional.  If omitted, the SHA3-256 hash algorithm
1428: ** is used.  If SIZE is included it must be one of the integers 224, 256,
1429: ** 384, or 512, to determine SHA3 hash variant that is computed.
1430: */
1431: /* #include "sqlite3ext.h" */
1432: SQLITE_EXTENSION_INIT1
1433: #include <assert.h>
1434: #include <string.h>
1435: #include <stdarg.h>
1436: /* typedef sqlite3_uint64 u64; */
1437: 
1438: /******************************************************************************
1439: ** The Hash Engine
1440: */
1441: /*
1442: ** Macros to determine whether the machine is big or little endian,
1443: ** and whether or not that determination is run-time or compile-time.
1444: **
1445: ** For best performance, an attempt is made to guess at the byte-order
1446: ** using C-preprocessor macros.  If that is unsuccessful, or if
1447: ** -DSHA3_BYTEORDER=0 is set, then byte-order is determined
1448: ** at run-time.
1449: */
1450: #ifndef SHA3_BYTEORDER
1451: # if defined(i386)     || defined(__i386__)   || defined(_M_IX86) ||    \
1452:      defined(__x86_64) || defined(__x86_64__) || defined(_M_X64)  ||    \
1453:      defined(_M_AMD64) || defined(_M_ARM)     || defined(__x86)   ||    \
1454:      defined(__arm__)
1455: #   define SHA3_BYTEORDER    1234
1456: # elif defined(sparc)    || defined(__ppc__)
1457: #   define SHA3_BYTEORDER    4321
1458: # else
1459: #   define SHA3_BYTEORDER 0
1460: # endif
1461: #endif
1462: 
1463: 
1464: /*
1465: ** State structure for a SHA3 hash in progress
1466: */
1467: typedef struct SHA3Context SHA3Context;
1468: struct SHA3Context {
1469:   union {
1470:     u64 s[25];                /* Keccak state. 5x5 lines of 64 bits each */
1471:     unsigned char x[1600];    /* ... or 1600 bytes */
1472:   } u;
1473:   unsigned nRate;        /* Bytes of input accepted per Keccak iteration */
1474:   unsigned nLoaded;      /* Input bytes loaded into u.x[] so far this cycle */
1475:   unsigned ixMask;       /* Insert next input into u.x[nLoaded^ixMask]. */
1476: };
1477: 
1478: /*
1479: ** A single step of the Keccak mixing function for a 1600-bit state
1480: */
1481: static void KeccakF1600Step(SHA3Context *p){
1482:   int i;
1483:   u64 b0, b1, b2, b3, b4;
1484:   u64 c0, c1, c2, c3, c4;
1485:   u64 d0, d1, d2, d3, d4;
1486:   static const u64 RC[] = {
1487:     0x0000000000000001ULL,  0x0000000000008082ULL,
1488:     0x800000000000808aULL,  0x8000000080008000ULL,
1489:     0x000000000000808bULL,  0x0000000080000001ULL,
1490:     0x8000000080008081ULL,  0x8000000000008009ULL,
1491:     0x000000000000008aULL,  0x0000000000000088ULL,
1492:     0x0000000080008009ULL,  0x000000008000000aULL,
1493:     0x000000008000808bULL,  0x800000000000008bULL,
1494:     0x8000000000008089ULL,  0x8000000000008003ULL,
1495:     0x8000000000008002ULL,  0x8000000000000080ULL,
1496:     0x000000000000800aULL,  0x800000008000000aULL,
1497:     0x8000000080008081ULL,  0x8000000000008080ULL,
1498:     0x0000000080000001ULL,  0x8000000080008008ULL
1499:   };
1500: # define a00 (p->u.s[0])
1501: # define a01 (p->u.s[1])
1502: # define a02 (p->u.s[2])
1503: # define a03 (p->u.s[3])
1504: # define a04 (p->u.s[4])
1505: # define a10 (p->u.s[5])
1506: # define a11 (p->u.s[6])
1507: # define a12 (p->u.s[7])
1508: # define a13 (p->u.s[8])
1509: # define a14 (p->u.s[9])
1510: # define a20 (p->u.s[10])
1511: # define a21 (p->u.s[11])
1512: # define a22 (p->u.s[12])
1513: # define a23 (p->u.s[13])
1514: # define a24 (p->u.s[14])
1515: # define a30 (p->u.s[15])
1516: # define a31 (p->u.s[16])
1517: # define a32 (p->u.s[17])
1518: # define a33 (p->u.s[18])
1519: # define a34 (p->u.s[19])
1520: # define a40 (p->u.s[20])
1521: # define a41 (p->u.s[21])
1522: # define a42 (p->u.s[22])
1523: # define a43 (p->u.s[23])
1524: # define a44 (p->u.s[24])
1525: # define ROL64(a,x) ((a<<x)|(a>>(64-x)))
1526: 
1527:   for(i=0; i<24; i+=4){
1528:     c0 = a00^a10^a20^a30^a40;
1529:     c1 = a01^a11^a21^a31^a41;
1530:     c2 = a02^a12^a22^a32^a42;
1531:     c3 = a03^a13^a23^a33^a43;
1532:     c4 = a04^a14^a24^a34^a44;
1533:     d0 = c4^ROL64(c1, 1);
1534:     d1 = c0^ROL64(c2, 1);
1535:     d2 = c1^ROL64(c3, 1);
1536:     d3 = c2^ROL64(c4, 1);
1537:     d4 = c3^ROL64(c0, 1);
1538: 
1539:     b0 = (a00^d0);
1540:     b1 = ROL64((a11^d1), 44);
1541:     b2 = ROL64((a22^d2), 43);
1542:     b3 = ROL64((a33^d3), 21);
1543:     b4 = ROL64((a44^d4), 14);
1544:     a00 =   b0 ^((~b1)&  b2 );
1545:     a00 ^= RC[i];
1546:     a11 =   b1 ^((~b2)&  b3 );
1547:     a22 =   b2 ^((~b3)&  b4 );
1548:     a33 =   b3 ^((~b4)&  b0 );
1549:     a44 =   b4 ^((~b0)&  b1 );
1550: 
1551:     b2 = ROL64((a20^d0), 3);
1552:     b3 = ROL64((a31^d1), 45);
1553:     b4 = ROL64((a42^d2), 61);
1554:     b0 = ROL64((a03^d3), 28);
1555:     b1 = ROL64((a14^d4), 20);
1556:     a20 =   b0 ^((~b1)&  b2 );
1557:     a31 =   b1 ^((~b2)&  b3 );
1558:     a42 =   b2 ^((~b3)&  b4 );
1559:     a03 =   b3 ^((~b4)&  b0 );
1560:     a14 =   b4 ^((~b0)&  b1 );
1561: 
1562:     b4 = ROL64((a40^d0), 18);
1563:     b0 = ROL64((a01^d1), 1);
1564:     b1 = ROL64((a12^d2), 6);
1565:     b2 = ROL64((a23^d3), 25);
1566:     b3 = ROL64((a34^d4), 8);
1567:     a40 =   b0 ^((~b1)&  b2 );
1568:     a01 =   b1 ^((~b2)&  b3 );
1569:     a12 =   b2 ^((~b3)&  b4 );
1570:     a23 =   b3 ^((~b4)&  b0 );
1571:     a34 =   b4 ^((~b0)&  b1 );
1572: 
1573:     b1 = ROL64((a10^d0), 36);
1574:     b2 = ROL64((a21^d1), 10);
1575:     b3 = ROL64((a32^d2), 15);
1576:     b4 = ROL64((a43^d3), 56);
1577:     b0 = ROL64((a04^d4), 27);
1578:     a10 =   b0 ^((~b1)&  b2 );
1579:     a21 =   b1 ^((~b2)&  b3 );
1580:     a32 =   b2 ^((~b3)&  b4 );
1581:     a43 =   b3 ^((~b4)&  b0 );
1582:     a04 =   b4 ^((~b0)&  b1 );
1583: 
1584:     b3 = ROL64((a30^d0), 41);
1585:     b4 = ROL64((a41^d1), 2);
1586:     b0 = ROL64((a02^d2), 62);
1587:     b1 = ROL64((a13^d3), 55);
1588:     b2 = ROL64((a24^d4), 39);
1589:     a30 =   b0 ^((~b1)&  b2 );
1590:     a41 =   b1 ^((~b2)&  b3 );
1591:     a02 =   b2 ^((~b3)&  b4 );
1592:     a13 =   b3 ^((~b4)&  b0 );
1593:     a24 =   b4 ^((~b0)&  b1 );
1594: 
1595:     c0 = a00^a20^a40^a10^a30;
1596:     c1 = a11^a31^a01^a21^a41;
1597:     c2 = a22^a42^a12^a32^a02;
1598:     c3 = a33^a03^a23^a43^a13;
1599:     c4 = a44^a14^a34^a04^a24;
1600:     d0 = c4^ROL64(c1, 1);
1601:     d1 = c0^ROL64(c2, 1);
1602:     d2 = c1^ROL64(c3, 1);
1603:     d3 = c2^ROL64(c4, 1);
1604:     d4 = c3^ROL64(c0, 1);
1605: 
1606:     b0 = (a00^d0);
1607:     b1 = ROL64((a31^d1), 44);
1608:     b2 = ROL64((a12^d2), 43);
1609:     b3 = ROL64((a43^d3), 21);
1610:     b4 = ROL64((a24^d4), 14);
1611:     a00 =   b0 ^((~b1)&  b2 );
1612:     a00 ^= RC[i+1];
1613:     a31 =   b1 ^((~b2)&  b3 );
1614:     a12 =   b2 ^((~b3)&  b4 );
1615:     a43 =   b3 ^((~b4)&  b0 );
1616:     a24 =   b4 ^((~b0)&  b1 );
1617: 
1618:     b2 = ROL64((a40^d0), 3);
1619:     b3 = ROL64((a21^d1), 45);
1620:     b4 = ROL64((a02^d2), 61);
1621:     b0 = ROL64((a33^d3), 28);
1622:     b1 = ROL64((a14^d4), 20);
1623:     a40 =   b0 ^((~b1)&  b2 );
1624:     a21 =   b1 ^((~b2)&  b3 );
1625:     a02 =   b2 ^((~b3)&  b4 );
1626:     a33 =   b3 ^((~b4)&  b0 );
1627:     a14 =   b4 ^((~b0)&  b1 );
1628: 
1629:     b4 = ROL64((a30^d0), 18);
1630:     b0 = ROL64((a11^d1), 1);
1631:     b1 = ROL64((a42^d2), 6);
1632:     b2 = ROL64((a23^d3), 25);
1633:     b3 = ROL64((a04^d4), 8);
1634:     a30 =   b0 ^((~b1)&  b2 );
1635:     a11 =   b1 ^((~b2)&  b3 );
1636:     a42 =   b2 ^((~b3)&  b4 );
1637:     a23 =   b3 ^((~b4)&  b0 );
1638:     a04 =   b4 ^((~b0)&  b1 );
1639: 
1640:     b1 = ROL64((a20^d0), 36);
1641:     b2 = ROL64((a01^d1), 10);
1642:     b3 = ROL64((a32^d2), 15);
1643:     b4 = ROL64((a13^d3), 56);
1644:     b0 = ROL64((a44^d4), 27);
1645:     a20 =   b0 ^((~b1)&  b2 );
1646:     a01 =   b1 ^((~b2)&  b3 );
1647:     a32 =   b2 ^((~b3)&  b4 );
1648:     a13 =   b3 ^((~b4)&  b0 );
1649:     a44 =   b4 ^((~b0)&  b1 );
1650: 
1651:     b3 = ROL64((a10^d0), 41);
1652:     b4 = ROL64((a41^d1), 2);
1653:     b0 = ROL64((a22^d2), 62);
1654:     b1 = ROL64((a03^d3), 55);
1655:     b2 = ROL64((a34^d4), 39);
1656:     a10 =   b0 ^((~b1)&  b2 );
1657:     a41 =   b1 ^((~b2)&  b3 );
1658:     a22 =   b2 ^((~b3)&  b4 );
1659:     a03 =   b3 ^((~b4)&  b0 );
1660:     a34 =   b4 ^((~b0)&  b1 );
1661: 
1662:     c0 = a00^a40^a30^a20^a10;
1663:     c1 = a31^a21^a11^a01^a41;
1664:     c2 = a12^a02^a42^a32^a22;
1665:     c3 = a43^a33^a23^a13^a03;
1666:     c4 = a24^a14^a04^a44^a34;
1667:     d0 = c4^ROL64(c1, 1);
1668:     d1 = c0^ROL64(c2, 1);
1669:     d2 = c1^ROL64(c3, 1);
1670:     d3 = c2^ROL64(c4, 1);
1671:     d4 = c3^ROL64(c0, 1);
1672: 
1673:     b0 = (a00^d0);
1674:     b1 = ROL64((a21^d1), 44);
1675:     b2 = ROL64((a42^d2), 43);
1676:     b3 = ROL64((a13^d3), 21);
1677:     b4 = ROL64((a34^d4), 14);
1678:     a00 =   b0 ^((~b1)&  b2 );
1679:     a00 ^= RC[i+2];
1680:     a21 =   b1 ^((~b2)&  b3 );
1681:     a42 =   b2 ^((~b3)&  b4 );
1682:     a13 =   b3 ^((~b4)&  b0 );
1683:     a34 =   b4 ^((~b0)&  b1 );
1684: 
1685:     b2 = ROL64((a30^d0), 3);
1686:     b3 = ROL64((a01^d1), 45);
1687:     b4 = ROL64((a22^d2), 61);
1688:     b0 = ROL64((a43^d3), 28);
1689:     b1 = ROL64((a14^d4), 20);
1690:     a30 =   b0 ^((~b1)&  b2 );
1691:     a01 =   b1 ^((~b2)&  b3 );
1692:     a22 =   b2 ^((~b3)&  b4 );
1693:     a43 =   b3 ^((~b4)&  b0 );
1694:     a14 =   b4 ^((~b0)&  b1 );
1695: 
1696:     b4 = ROL64((a10^d0), 18);
1697:     b0 = ROL64((a31^d1), 1);
1698:     b1 = ROL64((a02^d2), 6);
1699:     b2 = ROL64((a23^d3), 25);
1700:     b3 = ROL64((a44^d4), 8);
1701:     a10 =   b0 ^((~b1)&  b2 );
1702:     a31 =   b1 ^((~b2)&  b3 );
1703:     a02 =   b2 ^((~b3)&  b4 );
1704:     a23 =   b3 ^((~b4)&  b0 );
1705:     a44 =   b4 ^((~b0)&  b1 );
1706: 
1707:     b1 = ROL64((a40^d0), 36);
1708:     b2 = ROL64((a11^d1), 10);
1709:     b3 = ROL64((a32^d2), 15);
1710:     b4 = ROL64((a03^d3), 56);
1711:     b0 = ROL64((a24^d4), 27);
1712:     a40 =   b0 ^((~b1)&  b2 );
1713:     a11 =   b1 ^((~b2)&  b3 );
1714:     a32 =   b2 ^((~b3)&  b4 );
1715:     a03 =   b3 ^((~b4)&  b0 );
1716:     a24 =   b4 ^((~b0)&  b1 );
1717: 
1718:     b3 = ROL64((a20^d0), 41);
1719:     b4 = ROL64((a41^d1), 2);
1720:     b0 = ROL64((a12^d2), 62);
1721:     b1 = ROL64((a33^d3), 55);
1722:     b2 = ROL64((a04^d4), 39);
1723:     a20 =   b0 ^((~b1)&  b2 );
1724:     a41 =   b1 ^((~b2)&  b3 );
1725:     a12 =   b2 ^((~b3)&  b4 );
1726:     a33 =   b3 ^((~b4)&  b0 );
1727:     a04 =   b4 ^((~b0)&  b1 );
1728: 
1729:     c0 = a00^a30^a10^a40^a20;
1730:     c1 = a21^a01^a31^a11^a41;
1731:     c2 = a42^a22^a02^a32^a12;
1732:     c3 = a13^a43^a23^a03^a33;
1733:     c4 = a34^a14^a44^a24^a04;
1734:     d0 = c4^ROL64(c1, 1);
1735:     d1 = c0^ROL64(c2, 1);
1736:     d2 = c1^ROL64(c3, 1);
1737:     d3 = c2^ROL64(c4, 1);
1738:     d4 = c3^ROL64(c0, 1);
1739: 
1740:     b0 = (a00^d0);
1741:     b1 = ROL64((a01^d1), 44);
1742:     b2 = ROL64((a02^d2), 43);
1743:     b3 = ROL64((a03^d3), 21);
1744:     b4 = ROL64((a04^d4), 14);
1745:     a00 =   b0 ^((~b1)&  b2 );
1746:     a00 ^= RC[i+3];
1747:     a01 =   b1 ^((~b2)&  b3 );
1748:     a02 =   b2 ^((~b3)&  b4 );
1749:     a03 =   b3 ^((~b4)&  b0 );
1750:     a04 =   b4 ^((~b0)&  b1 );
1751: 
1752:     b2 = ROL64((a10^d0), 3);
1753:     b3 = ROL64((a11^d1), 45);
1754:     b4 = ROL64((a12^d2), 61);
1755:     b0 = ROL64((a13^d3), 28);
1756:     b1 = ROL64((a14^d4), 20);
1757:     a10 =   b0 ^((~b1)&  b2 );
1758:     a11 =   b1 ^((~b2)&  b3 );
1759:     a12 =   b2 ^((~b3)&  b4 );
1760:     a13 =   b3 ^((~b4)&  b0 );
1761:     a14 =   b4 ^((~b0)&  b1 );
1762: 
1763:     b4 = ROL64((a20^d0), 18);
1764:     b0 = ROL64((a21^d1), 1);
1765:     b1 = ROL64((a22^d2), 6);
1766:     b2 = ROL64((a23^d3), 25);
1767:     b3 = ROL64((a24^d4), 8);
1768:     a20 =   b0 ^((~b1)&  b2 );
1769:     a21 =   b1 ^((~b2)&  b3 );
1770:     a22 =   b2 ^((~b3)&  b4 );
1771:     a23 =   b3 ^((~b4)&  b0 );
1772:     a24 =   b4 ^((~b0)&  b1 );
1773: 
1774:     b1 = ROL64((a30^d0), 36);
1775:     b2 = ROL64((a31^d1), 10);
1776:     b3 = ROL64((a32^d2), 15);
1777:     b4 = ROL64((a33^d3), 56);
1778:     b0 = ROL64((a34^d4), 27);
1779:     a30 =   b0 ^((~b1)&  b2 );
1780:     a31 =   b1 ^((~b2)&  b3 );
1781:     a32 =   b2 ^((~b3)&  b4 );
1782:     a33 =   b3 ^((~b4)&  b0 );
1783:     a34 =   b4 ^((~b0)&  b1 );
1784: 
1785:     b3 = ROL64((a40^d0), 41);
1786:     b4 = ROL64((a41^d1), 2);
1787:     b0 = ROL64((a42^d2), 62);
1788:     b1 = ROL64((a43^d3), 55);
1789:     b2 = ROL64((a44^d4), 39);
1790:     a40 =   b0 ^((~b1)&  b2 );
1791:     a41 =   b1 ^((~b2)&  b3 );
1792:     a42 =   b2 ^((~b3)&  b4 );
1793:     a43 =   b3 ^((~b4)&  b0 );
1794:     a44 =   b4 ^((~b0)&  b1 );
1795:   }
1796: }
1797: 
1798: /*
1799: ** Initialize a new hash.  iSize determines the size of the hash
1800: ** in bits and should be one of 224, 256, 384, or 512.  Or iSize
1801: ** can be zero to use the default hash size of 256 bits.
1802: */
1803: static void SHA3Init(SHA3Context *p, int iSize){
1804:   memset(p, 0, sizeof(*p));
1805:   if( iSize>=128 && iSize<=512 ){
1806:     p->nRate = (1600 - ((iSize + 31)&~31)*2)/8;
1807:   }else{
1808:     p->nRate = (1600 - 2*256)/8;
1809:   }
1810: #if SHA3_BYTEORDER==1234
1811:   /* Known to be little-endian at compile-time. No-op */
1812: #elif SHA3_BYTEORDER==4321
1813:   p->ixMask = 7;  /* Big-endian */
1814: #else
1815:   {
1816:     static unsigned int one = 1;
1817:     if( 1==*(unsigned char*)&one ){
1818:       /* Little endian.  No byte swapping. */
1819:       p->ixMask = 0;
1820:     }else{
1821:       /* Big endian.  Byte swap. */
1822:       p->ixMask = 7;
1823:     }
1824:   }
1825: #endif
1826: }
1827: 
1828: /*
1829: ** Make consecutive calls to the SHA3Update function to add new content
1830: ** to the hash
1831: */
1832: static void SHA3Update(
1833:   SHA3Context *p,
1834:   const unsigned char *aData,
1835:   unsigned int nData
1836: ){
1837:   unsigned int i = 0;
1838: #if SHA3_BYTEORDER==1234
1839:   if( (p->nLoaded % 8)==0 && ((aData - (const unsigned char*)0)&7)==0 ){
1840:     for(; i+7<nData; i+=8){
1841:       p->u.s[p->nLoaded/8] ^= *(u64*)&aData[i];
1842:       p->nLoaded += 8;
1843:       if( p->nLoaded>=p->nRate ){
1844:         KeccakF1600Step(p);
1845:         p->nLoaded = 0;
1846:       }
1847:     }
1848:   }
1849: #endif
1850:   for(; i<nData; i++){
1851: #if SHA3_BYTEORDER==1234
1852:     p->u.x[p->nLoaded] ^= aData[i];
1853: #elif SHA3_BYTEORDER==4321
1854:     p->u.x[p->nLoaded^0x07] ^= aData[i];
1855: #else
1856:     p->u.x[p->nLoaded^p->ixMask] ^= aData[i];
1857: #endif
1858:     p->nLoaded++;
1859:     if( p->nLoaded==p->nRate ){
1860:       KeccakF1600Step(p);
1861:       p->nLoaded = 0;
1862:     }
1863:   }
1864: }
1865: 
1866: /*
1867: ** After all content has been added, invoke SHA3Final() to compute
1868: ** the final hash.  The function returns a pointer to the binary
1869: ** hash value.
1870: */
1871: static unsigned char *SHA3Final(SHA3Context *p){
1872:   unsigned int i;
1873:   if( p->nLoaded==p->nRate-1 ){
1874:     const unsigned char c1 = 0x86;
1875:     SHA3Update(p, &c1, 1);
1876:   }else{
1877:     const unsigned char c2 = 0x06;
1878:     const unsigned char c3 = 0x80;
1879:     SHA3Update(p, &c2, 1);
1880:     p->nLoaded = p->nRate - 1;
1881:     SHA3Update(p, &c3, 1);
1882:   }
1883:   for(i=0; i<p->nRate; i++){
1884:     p->u.x[i+p->nRate] = p->u.x[i^p->ixMask];
1885:   }
1886:   return &p->u.x[p->nRate];
1887: }
1888: /* End of the hashing logic
1889: *****************************************************************************/
1890: 
1891: /*
1892: ** Implementation of the sha3(X,SIZE) function.
1893: **
1894: ** Return a BLOB which is the SIZE-bit SHA3 hash of X.  The default
1895: ** size is 256.  If X is a BLOB, it is hashed as is.
1896: ** For all other non-NULL types of input, X is converted into a UTF-8 string
1897: ** and the string is hashed without the trailing 0x00 terminator.  The hash
1898: ** of a NULL value is NULL.
1899: */
1900: static void sha3Func(
1901:   sqlite3_context *context,
1902:   int argc,
1903:   sqlite3_value **argv
1904: ){
1905:   SHA3Context cx;
1906:   int eType = sqlite3_value_type(argv[0]);
1907:   int nByte = sqlite3_value_bytes(argv[0]);
1908:   int iSize;
1909:   if( argc==1 ){
1910:     iSize = 256;
1911:   }else{
1912:     iSize = sqlite3_value_int(argv[1]);
1913:     if( iSize!=224 && iSize!=256 && iSize!=384 && iSize!=512 ){
1914:       sqlite3_result_error(context, "SHA3 size should be one of: 224 256 "
1915:                                     "384 512", -1);
1916:       return;
1917:     }
1918:   }
1919:   if( eType==SQLITE_NULL ) return;
1920:   SHA3Init(&cx, iSize);
1921:   if( eType==SQLITE_BLOB ){
1922:     SHA3Update(&cx, sqlite3_value_blob(argv[0]), nByte);
1923:   }else{
1924:     SHA3Update(&cx, sqlite3_value_text(argv[0]), nByte);
1925:   }
1926:   sqlite3_result_blob(context, SHA3Final(&cx), iSize/8, SQLITE_TRANSIENT);
1927: }
1928: 
1929: /* Compute a string using sqlite3_vsnprintf() with a maximum length
1930: ** of 50 bytes and add it to the hash.
1931: */
1932: static void hash_step_vformat(
1933:   SHA3Context *p,                 /* Add content to this context */
1934:   const char *zFormat,
1935:   ...
1936: ){
1937:   va_list ap;
1938:   int n;
1939:   char zBuf[50];
1940:   va_start(ap, zFormat);
1941:   sqlite3_vsnprintf(sizeof(zBuf),zBuf,zFormat,ap);
1942:   va_end(ap);
1943:   n = (int)strlen(zBuf);
1944:   SHA3Update(p, (unsigned char*)zBuf, n);
1945: }
1946: 
1947: /*
1948: ** Implementation of the sha3_query(SQL,SIZE) function.
1949: **
1950: ** This function compiles and runs the SQL statement(s) given in the
1951: ** argument. The results are hashed using a SIZE-bit SHA3.  The default
1952: ** size is 256.
1953: **
1954: ** The format of the byte stream that is hashed is summarized as follows:
1955: **
1956: **       S<n>:<sql>
1957: **       R
1958: **       N
1959: **       I<int>
1960: **       F<ieee-float>
1961: **       B<size>:<bytes>
1962: **       T<size>:<text>
1963: **
1964: ** <sql> is the original SQL text for each statement run and <n> is
1965: ** the size of that text.  The SQL text is UTF-8.  A single R character
1966: ** occurs before the start of each row.  N means a NULL value.
1967: ** I mean an 8-byte little-endian integer <int>.  F is a floating point
1968: ** number with an 8-byte little-endian IEEE floating point value <ieee-float>.
1969: ** B means blobs of <size> bytes.  T means text rendered as <size>
1970: ** bytes of UTF-8.  The <n> and <size> values are expressed as an ASCII
1971: ** text integers.
1972: **
1973: ** For each SQL statement in the X input, there is one S segment.  Each
1974: ** S segment is followed by zero or more R segments, one for each row in the
1975: ** result set.  After each R, there are one or more N, I, F, B, or T segments,
1976: ** one for each column in the result set.  Segments are concatentated directly
1977: ** with no delimiters of any kind.
1978: */
1979: static void sha3QueryFunc(
1980:   sqlite3_context *context,
1981:   int argc,
1982:   sqlite3_value **argv
1983: ){
1984:   sqlite3 *db = sqlite3_context_db_handle(context);
1985:   const char *zSql = (const char*)sqlite3_value_text(argv[0]);
1986:   sqlite3_stmt *pStmt = 0;
1987:   int nCol;                   /* Number of columns in the result set */
1988:   int i;                      /* Loop counter */
1989:   int rc;
1990:   int n;
1991:   const char *z;
1992:   SHA3Context cx;
1993:   int iSize;
1994: 
1995:   if( argc==1 ){
1996:     iSize = 256;
1997:   }else{
1998:     iSize = sqlite3_value_int(argv[1]);
1999:     if( iSize!=224 && iSize!=256 && iSize!=384 && iSize!=512 ){
2000:       sqlite3_result_error(context, "SHA3 size should be one of: 224 256 "
2001:                                     "384 512", -1);
2002:       return;
2003:     }
2004:   }
2005:   if( zSql==0 ) return;
2006:   SHA3Init(&cx, iSize);
2007:   while( zSql[0] ){
2008:     rc = sqlite3_prepare_v2(db, zSql, -1, &pStmt, &zSql);
2009:     if( rc ){
2010:       char *zMsg = sqlite3_mprintf("error SQL statement [%s]: %s",
2011:                                    zSql, sqlite3_errmsg(db));
2012:       sqlite3_finalize(pStmt);
2013:       sqlite3_result_error(context, zMsg, -1);
2014:       sqlite3_free(zMsg);
2015:       return;
2016:     }
2017:     if( !sqlite3_stmt_readonly(pStmt) ){
2018:       char *zMsg = sqlite3_mprintf("non-query: [%s]", sqlite3_sql(pStmt));
2019:       sqlite3_finalize(pStmt);
2020:       sqlite3_result_error(context, zMsg, -1);
2021:       sqlite3_free(zMsg);
2022:       return;
2023:     }
2024:     nCol = sqlite3_column_count(pStmt);
2025:     z = sqlite3_sql(pStmt);
2026:     n = (int)strlen(z);
2027:     hash_step_vformat(&cx,"S%d:",n);
2028:     SHA3Update(&cx,(unsigned char*)z,n);
2029: 
2030:     /* Compute a hash over the result of the query */
2031:     while( SQLITE_ROW==sqlite3_step(pStmt) ){
2032:       SHA3Update(&cx,(const unsigned char*)"R",1);
2033:       for(i=0; i<nCol; i++){
2034:         switch( sqlite3_column_type(pStmt,i) ){
2035:           case SQLITE_NULL: {
2036:             SHA3Update(&cx, (const unsigned char*)"N",1);
2037:             break;
2038:           }
2039:           case SQLITE_INTEGER: {
2040:             sqlite3_uint64 u;
2041:             int j;
2042:             unsigned char x[9];
2043:             sqlite3_int64 v = sqlite3_column_int64(pStmt,i);
2044:             memcpy(&u, &v, 8);
2045:             for(j=8; j>=1; j--){
2046:               x[j] = u & 0xff;
2047:               u >>= 8;
2048:             }
2049:             x[0] = 'I';
2050:             SHA3Update(&cx, x, 9);
2051:             break;
2052:           }
2053:           case SQLITE_FLOAT: {
2054:             sqlite3_uint64 u;
2055:             int j;
2056:             unsigned char x[9];
2057:             double r = sqlite3_column_double(pStmt,i);
2058:             memcpy(&u, &r, 8);
2059:             for(j=8; j>=1; j--){
2060:               x[j] = u & 0xff;
2061:               u >>= 8;
2062:             }
2063:             x[0] = 'F';
2064:             SHA3Update(&cx,x,9);
2065:             break;
2066:           }
2067:           case SQLITE_TEXT: {
2068:             int n2 = sqlite3_column_bytes(pStmt, i);
2069:             const unsigned char *z2 = sqlite3_column_text(pStmt, i);
2070:             hash_step_vformat(&cx,"T%d:",n2);
2071:             SHA3Update(&cx, z2, n2);
2072:             break;
2073:           }
2074:           case SQLITE_BLOB: {
2075:             int n2 = sqlite3_column_bytes(pStmt, i);
2076:             const unsigned char *z2 = sqlite3_column_blob(pStmt, i);
2077:             hash_step_vformat(&cx,"B%d:",n2);
2078:             SHA3Update(&cx, z2, n2);
2079:             break;
2080:           }
2081:         }
2082:       }
2083:     }
2084:     sqlite3_finalize(pStmt);
2085:   }
2086:   sqlite3_result_blob(context, SHA3Final(&cx), iSize/8, SQLITE_TRANSIENT);
2087: }
2088: 
2089: 
2090: #ifdef _WIN32
2091: 
2092: #endif
2093: int sqlite3_shathree_init(
2094:   sqlite3 *db,
2095:   char **pzErrMsg,
2096:   const sqlite3_api_routines *pApi
2097: ){
2098:   int rc = SQLITE_OK;
2099:   SQLITE_EXTENSION_INIT2(pApi);
2100:   (void)pzErrMsg;  /* Unused parameter */
2101:   rc = sqlite3_create_function(db, "sha3", 1,
2102:                       SQLITE_UTF8 | SQLITE_INNOCUOUS | SQLITE_DETERMINISTIC,
2103:                       0, sha3Func, 0, 0);
2104:   if( rc==SQLITE_OK ){
2105:     rc = sqlite3_create_function(db, "sha3", 2,
2106:                       SQLITE_UTF8 | SQLITE_INNOCUOUS | SQLITE_DETERMINISTIC,
2107:                       0, sha3Func, 0, 0);
2108:   }
2109:   if( rc==SQLITE_OK ){
2110:     rc = sqlite3_create_function(db, "sha3_query", 1,
2111:                       SQLITE_UTF8 | SQLITE_DIRECTONLY,
2112:                       0, sha3QueryFunc, 0, 0);
2113:   }
2114:   if( rc==SQLITE_OK ){
2115:     rc = sqlite3_create_function(db, "sha3_query", 2,
2116:                       SQLITE_UTF8 | SQLITE_DIRECTONLY,
2117:                       0, sha3QueryFunc, 0, 0);
2118:   }
2119:   return rc;
2120: }
2121: 
2122: /************************* End ../ext/misc/shathree.c ********************/
2123: /************************* Begin ../ext/misc/fileio.c ******************/
2124: /*
2125: ** 2014-06-13
2126: **
2127: ** The author disclaims copyright to this source code.  In place of
2128: ** a legal notice, here is a blessing:
2129: **
2130: **    May you do good and not evil.
2131: **    May you find forgiveness for yourself and forgive others.
2132: **    May you share freely, never taking more than you give.
2133: **
2134: ******************************************************************************
2135: **
2136: ** This SQLite extension implements SQL functions readfile() and
2137: ** writefile(), and eponymous virtual type "fsdir".
2138: **
2139: ** WRITEFILE(FILE, DATA [, MODE [, MTIME]]):
2140: **
2141: **   If neither of the optional arguments is present, then this UDF
2142: **   function writes blob DATA to file FILE. If successful, the number
2143: **   of bytes written is returned. If an error occurs, NULL is returned.
2144: **
2145: **   If the first option argument - MODE - is present, then it must
2146: **   be passed an integer value that corresponds to a POSIX mode
2147: **   value (file type + permissions, as returned in the stat.st_mode
2148: **   field by the stat() system call). Three types of files may
2149: **   be written/created:
2150: **
2151: **     regular files:  (mode & 0170000)==0100000
2152: **     symbolic links: (mode & 0170000)==0120000
2153: **     directories:    (mode & 0170000)==0040000
2154: **
2155: **   For a directory, the DATA is ignored. For a symbolic link, it is
2156: **   interpreted as text and used as the target of the link. For a
2157: **   regular file, it is interpreted as a blob and written into the
2158: **   named file. Regardless of the type of file, its permissions are
2159: **   set to (mode & 0777) before returning.
2160: **
2161: **   If the optional MTIME argument is present, then it is interpreted
2162: **   as an integer - the number of seconds since the unix epoch. The
2163: **   modification-time of the target file is set to this value before
2164: **   returning.
2165: **
2166: **   If three or more arguments are passed to this function and an
2167: **   error is encountered, an exception is raised.
2168: **
2169: ** READFILE(FILE):
2170: **
2171: **   Read and return the contents of file FILE (type blob) from disk.
2172: **
2173: ** FSDIR:
2174: **
2175: **   Used as follows:
2176: **
2177: **     SELECT * FROM fsdir($path [, $dir]);
2178: **
2179: **   Parameter $path is an absolute or relative pathname. If the file that it
2180: **   refers to does not exist, it is an error. If the path refers to a regular
2181: **   file or symbolic link, it returns a single row. Or, if the path refers
2182: **   to a directory, it returns one row for the directory, and one row for each
2183: **   file within the hierarchy rooted at $path.
2184: **
2185: **   Each row has the following columns:
2186: **
2187: **     name:  Path to file or directory (text value).
2188: **     mode:  Value of stat.st_mode for directory entry (an integer).
2189: **     mtime: Value of stat.st_mtime for directory entry (an integer).
2190: **     data:  For a regular file, a blob containing the file data. For a
2191: **            symlink, a text value containing the text of the link. For a
2192: **            directory, NULL.
2193: **
2194: **   If a non-NULL value is specified for the optional $dir parameter and
2195: **   $path is a relative path, then $path is interpreted relative to $dir.
2196: **   And the paths returned in the "name" column of the table are also
2197: **   relative to directory $dir.
2198: */
2199: /* #include "sqlite3ext.h" */
2200: SQLITE_EXTENSION_INIT1
2201: #include <stdio.h>
2202: #include <string.h>
2203: #include <assert.h>
2204: 
2205: #include <sys/types.h>
2206: #include <sys/stat.h>
2207: #include <fcntl.h>
2208: #if !defined(_WIN32) && !defined(WIN32)
2209: #  include <unistd.h>
2210: #  include <dirent.h>
2211: #  include <utime.h>
2212: #  include <sys/time.h>
2213: #else
2214: #  include "windows.h"
2215: #  include <io.h>
2216: #  include <direct.h>
2217: /* #  include "test_windirent.h" */
2218: #  define dirent DIRENT
2219: #  ifndef chmod
2220: #    define chmod _chmod
2221: #  endif
2222: #  ifndef stat
2223: #    define stat _stat
2224: #  endif
2225: #  define mkdir(path,mode) _mkdir(path)
2226: #  define lstat(path,buf) stat(path,buf)
2227: #endif
2228: #include <time.h>
2229: #include <errno.h>
2230: 
2231: 
2232: /*
2233: ** Structure of the fsdir() table-valued function
2234: */
2235:                  /*    0    1    2     3    4           5             */
2236: #define FSDIR_SCHEMA "(name,mode,mtime,data,path HIDDEN,dir HIDDEN)"
2237: #define FSDIR_COLUMN_NAME     0     /* Name of the file */
2238: #define FSDIR_COLUMN_MODE     1     /* Access mode */
2239: #define FSDIR_COLUMN_MTIME    2     /* Last modification time */
2240: #define FSDIR_COLUMN_DATA     3     /* File content */
2241: #define FSDIR_COLUMN_PATH     4     /* Path to top of search */
2242: #define FSDIR_COLUMN_DIR      5     /* Path is relative to this directory */
2243: 
2244: 
2245: /*
2246: ** Set the result stored by context ctx to a blob containing the
2247: ** contents of file zName.  Or, leave the result unchanged (NULL)
2248: ** if the file does not exist or is unreadable.
2249: **
2250: ** If the file exceeds the SQLite blob size limit, through an
2251: ** SQLITE_TOOBIG error.
2252: **
2253: ** Throw an SQLITE_IOERR if there are difficulties pulling the file
2254: ** off of disk.
2255: */
2256: static void readFileContents(sqlite3_context *ctx, const char *zName){
2257:   FILE *in;
2258:   sqlite3_int64 nIn;
2259:   void *pBuf;
2260:   sqlite3 *db;
2261:   int mxBlob;
2262: 
2263:   in = fopen(zName, "rb");
2264:   if( in==0 ){
2265:     /* File does not exist or is unreadable. Leave the result set to NULL. */
2266:     return;
2267:   }
2268:   fseek(in, 0, SEEK_END);
2269:   nIn = ftell(in);
2270:   rewind(in);
2271:   db = sqlite3_context_db_handle(ctx);
2272:   mxBlob = sqlite3_limit(db, SQLITE_LIMIT_LENGTH, -1);
2273:   if( nIn>mxBlob ){
2274:     sqlite3_result_error_code(ctx, SQLITE_TOOBIG);
2275:     fclose(in);
2276:     return;
2277:   }
2278:   pBuf = sqlite3_malloc64( nIn ? nIn : 1 );
2279:   if( pBuf==0 ){
2280:     sqlite3_result_error_nomem(ctx);
2281:     fclose(in);
2282:     return;
2283:   }
2284:   if( nIn==(sqlite3_int64)fread(pBuf, 1, (size_t)nIn, in) ){
2285:     sqlite3_result_blob64(ctx, pBuf, nIn, sqlite3_free);
2286:   }else{
2287:     sqlite3_result_error_code(ctx, SQLITE_IOERR);
2288:     sqlite3_free(pBuf);
2289:   }
2290:   fclose(in);
2291: }
2292: 
2293: /*
2294: ** Implementation of the "readfile(X)" SQL function.  The entire content
2295: ** of the file named X is read and returned as a BLOB.  NULL is returned
2296: ** if the file does not exist or is unreadable.
2297: */
2298: static void readfileFunc(
2299:   sqlite3_context *context,
2300:   int argc,
2301:   sqlite3_value **argv
2302: ){
2303:   const char *zName;
2304:   (void)(argc);  /* Unused parameter */
2305:   zName = (const char*)sqlite3_value_text(argv[0]);
2306:   if( zName==0 ) return;
2307:   readFileContents(context, zName);
2308: }
2309: 
2310: /*
2311: ** Set the error message contained in context ctx to the results of
2312: ** vprintf(zFmt, ...).
2313: */
2314: static void ctxErrorMsg(sqlite3_context *ctx, const char *zFmt, ...){
2315:   char *zMsg = 0;
2316:   va_list ap;
2317:   va_start(ap, zFmt);
2318:   zMsg = sqlite3_vmprintf(zFmt, ap);
2319:   sqlite3_result_error(ctx, zMsg, -1);
2320:   sqlite3_free(zMsg);
2321:   va_end(ap);
2322: }
2323: 
2324: #if defined(_WIN32)
2325: /*
2326: ** This function is designed to convert a Win32 FILETIME structure into the
2327: ** number of seconds since the Unix Epoch (1970-01-01 00:00:00 UTC).
2328: */
2329: static sqlite3_uint64 fileTimeToUnixTime(
2330:   LPFILETIME pFileTime
2331: ){
2332:   SYSTEMTIME epochSystemTime;
2333:   ULARGE_INTEGER epochIntervals;
2334:   FILETIME epochFileTime;
2335:   ULARGE_INTEGER fileIntervals;
2336: 
2337:   memset(&epochSystemTime, 0, sizeof(SYSTEMTIME));
2338:   epochSystemTime.wYear = 1970;
2339:   epochSystemTime.wMonth = 1;
2340:   epochSystemTime.wDay = 1;
2341:   SystemTimeToFileTime(&epochSystemTime, &epochFileTime);
2342:   epochIntervals.LowPart = epochFileTime.dwLowDateTime;
2343:   epochIntervals.HighPart = epochFileTime.dwHighDateTime;
2344: 
2345:   fileIntervals.LowPart = pFileTime->dwLowDateTime;
2346:   fileIntervals.HighPart = pFileTime->dwHighDateTime;
2347: 
2348:   return (fileIntervals.QuadPart - epochIntervals.QuadPart) / 10000000;
2349: }
2350: 
2351: /*
2352: ** This function attempts to normalize the time values found in the stat()
2353: ** buffer to UTC.  This is necessary on Win32, where the runtime library
2354: ** appears to return these values as local times.
2355: */
2356: static void statTimesToUtc(
2357:   const char *zPath,
2358:   struct stat *pStatBuf
2359: ){
2360:   HANDLE hFindFile;
2361:   WIN32_FIND_DATAW fd;
2362:   LPWSTR zUnicodeName;
2363:   extern LPWSTR sqlite3_win32_utf8_to_unicode(const char*);
2364:   zUnicodeName = sqlite3_win32_utf8_to_unicode(zPath);
2365:   if( zUnicodeName ){
2366:     memset(&fd, 0, sizeof(WIN32_FIND_DATAW));
2367:     hFindFile = FindFirstFileW(zUnicodeName, &fd);
2368:     if( hFindFile!=NULL ){
2369:       pStatBuf->st_ctime = (time_t)fileTimeToUnixTime(&fd.ftCreationTime);
2370:       pStatBuf->st_atime = (time_t)fileTimeToUnixTime(&fd.ftLastAccessTime);
2371:       pStatBuf->st_mtime = (time_t)fileTimeToUnixTime(&fd.ftLastWriteTime);
2372:       FindClose(hFindFile);
2373:     }
2374:     sqlite3_free(zUnicodeName);
2375:   }
2376: }
2377: #endif
2378: 
2379: /*
2380: ** This function is used in place of stat().  On Windows, special handling
2381: ** is required in order for the included time to be returned as UTC.  On all
2382: ** other systems, this function simply calls stat().
2383: */
2384: static int fileStat(
2385:   const char *zPath,
2386:   struct stat *pStatBuf
2387: ){
2388: #if defined(_WIN32)
2389:   int rc = stat(zPath, pStatBuf);
2390:   if( rc==0 ) statTimesToUtc(zPath, pStatBuf);
2391:   return rc;
2392: #else
2393:   return stat(zPath, pStatBuf);
2394: #endif
2395: }
2396: 
2397: /*
2398: ** This function is used in place of lstat().  On Windows, special handling
2399: ** is required in order for the included time to be returned as UTC.  On all
2400: ** other systems, this function simply calls lstat().
2401: */
2402: static int fileLinkStat(
2403:   const char *zPath,
2404:   struct stat *pStatBuf
2405: ){
2406: #if defined(_WIN32)
2407:   int rc = lstat(zPath, pStatBuf);
2408:   if( rc==0 ) statTimesToUtc(zPath, pStatBuf);
2409:   return rc;
2410: #else
2411:   return lstat(zPath, pStatBuf);
2412: #endif
2413: }
2414: 
2415: /*
2416: ** Argument zFile is the name of a file that will be created and/or written
2417: ** by SQL function writefile(). This function ensures that the directory
2418: ** zFile will be written to exists, creating it if required. The permissions
2419: ** for any path components created by this function are set in accordance
2420: ** with the current umask.
2421: **
2422: ** If an OOM condition is encountered, SQLITE_NOMEM is returned. Otherwise,
2423: ** SQLITE_OK is returned if the directory is successfully created, or
2424: ** SQLITE_ERROR otherwise.
2425: */
2426: static int makeDirectory(
2427:   const char *zFile
2428: ){
2429:   char *zCopy = sqlite3_mprintf("%s", zFile);
2430:   int rc = SQLITE_OK;
2431: 
2432:   if( zCopy==0 ){
2433:     rc = SQLITE_NOMEM;
2434:   }else{
2435:     int nCopy = (int)strlen(zCopy);
2436:     int i = 1;
2437: 
2438:     while( rc==SQLITE_OK ){
2439:       struct stat sStat;
2440:       int rc2;
2441: 
2442:       for(; zCopy[i]!='/' && i<nCopy; i++);
2443:       if( i==nCopy ) break;
2444:       zCopy[i] = '\0';
2445: 
2446:       rc2 = fileStat(zCopy, &sStat);
2447:       if( rc2!=0 ){
2448:         if( mkdir(zCopy, 0777) ) rc = SQLITE_ERROR;
2449:       }else{
2450:         if( !S_ISDIR(sStat.st_mode) ) rc = SQLITE_ERROR;
2451:       }
2452:       zCopy[i] = '/';
2453:       i++;
2454:     }
2455: 
2456:     sqlite3_free(zCopy);
2457:   }
2458: 
2459:   return rc;
2460: }
2461: 
2462: /*
2463: ** This function does the work for the writefile() UDF. Refer to
2464: ** header comments at the top of this file for details.
2465: */
2466: static int writeFile(
2467:   sqlite3_context *pCtx,          /* Context to return bytes written in */
2468:   const char *zFile,              /* File to write */
2469:   sqlite3_value *pData,           /* Data to write */
2470:   mode_t mode,                    /* MODE parameter passed to writefile() */
2471:   sqlite3_int64 mtime             /* MTIME parameter (or -1 to not set time) */
2472: ){
2473: #if !defined(_WIN32) && !defined(WIN32)
2474:   if( S_ISLNK(mode) ){
2475:     const char *zTo = (const char*)sqlite3_value_text(pData);
2476:     if( symlink(zTo, zFile)<0 ) return 1;
2477:   }else
2478: #endif
2479:   {
2480:     if( S_ISDIR(mode) ){
2481:       if( mkdir(zFile, mode) ){
2482:         /* The mkdir() call to create the directory failed. This might not
2483:         ** be an error though - if there is already a directory at the same
2484:         ** path and either the permissions already match or can be changed
2485:         ** to do so using chmod(), it is not an error.  */
2486:         struct stat sStat;
2487:         if( errno!=EEXIST
2488:          || 0!=fileStat(zFile, &sStat)
2489:          || !S_ISDIR(sStat.st_mode)
2490:          || ((sStat.st_mode&0777)!=(mode&0777) && 0!=chmod(zFile, mode&0777))
2491:         ){
2492:           return 1;
2493:         }
2494:       }
2495:     }else{
2496:       sqlite3_int64 nWrite = 0;
2497:       const char *z;
2498:       int rc = 0;
2499:       FILE *out = fopen(zFile, "wb");
2500:       if( out==0 ) return 1;
2501:       z = (const char*)sqlite3_value_blob(pData);
2502:       if( z ){
2503:         sqlite3_int64 n = fwrite(z, 1, sqlite3_value_bytes(pData), out);
2504:         nWrite = sqlite3_value_bytes(pData);
2505:         if( nWrite!=n ){
2506:           rc = 1;
2507:         }
2508:       }
2509:       fclose(out);
2510:       if( rc==0 && mode && chmod(zFile, mode & 0777) ){
2511:         rc = 1;
2512:       }
2513:       if( rc ) return 2;
2514:       sqlite3_result_int64(pCtx, nWrite);
2515:     }
2516:   }
2517: 
2518:   if( mtime>=0 ){
2519: #if defined(_WIN32)
2520: #if !SQLITE_OS_WINRT
2521:     /* Windows */
2522:     FILETIME lastAccess;
2523:     FILETIME lastWrite;
2524:     SYSTEMTIME currentTime;
2525:     LONGLONG intervals;
2526:     HANDLE hFile;
2527:     LPWSTR zUnicodeName;
2528:     extern LPWSTR sqlite3_win32_utf8_to_unicode(const char*);
2529: 
2530:     GetSystemTime(&currentTime);
2531:     SystemTimeToFileTime(&currentTime, &lastAccess);
2532:     intervals = Int32x32To64(mtime, 10000000) + 116444736000000000;
2533:     lastWrite.dwLowDateTime = (DWORD)intervals;
2534:     lastWrite.dwHighDateTime = intervals >> 32;
2535:     zUnicodeName = sqlite3_win32_utf8_to_unicode(zFile);
2536:     if( zUnicodeName==0 ){
2537:       return 1;
2538:     }
2539:     hFile = CreateFileW(
2540:       zUnicodeName, FILE_WRITE_ATTRIBUTES, 0, NULL, OPEN_EXISTING,
2541:       FILE_FLAG_BACKUP_SEMANTICS, NULL
2542:     );
2543:     sqlite3_free(zUnicodeName);
2544:     if( hFile!=INVALID_HANDLE_VALUE ){
2545:       BOOL bResult = SetFileTime(hFile, NULL, &lastAccess, &lastWrite);
2546:       CloseHandle(hFile);
2547:       return !bResult;
2548:     }else{
2549:       return 1;
2550:     }
2551: #endif
2552: #elif defined(AT_FDCWD) && 0 /* utimensat() is not universally available */
2553:     /* Recent unix */
2554:     struct timespec times[2];
2555:     times[0].tv_nsec = times[1].tv_nsec = 0;
2556:     times[0].tv_sec = time(0);
2557:     times[1].tv_sec = mtime;
2558:     if( utimensat(AT_FDCWD, zFile, times, AT_SYMLINK_NOFOLLOW) ){
2559:       return 1;
2560:     }
2561: #else
2562:     /* Legacy unix */
2563:     struct timeval times[2];
2564:     times[0].tv_usec = times[1].tv_usec = 0;
2565:     times[0].tv_sec = time(0);
2566:     times[1].tv_sec = mtime;
2567:     if( utimes(zFile, times) ){
2568:       return 1;
2569:     }
2570: #endif
2571:   }
2572: 
2573:   return 0;
2574: }
2575: 
2576: /*
2577: ** Implementation of the "writefile(W,X[,Y[,Z]]])" SQL function.
2578: ** Refer to header comments at the top of this file for details.
2579: */
2580: static void writefileFunc(
2581:   sqlite3_context *context,
2582:   int argc,
2583:   sqlite3_value **argv
2584: ){
2585:   const char *zFile;
2586:   mode_t mode = 0;
2587:   int res;
2588:   sqlite3_int64 mtime = -1;
2589: 
2590:   if( argc<2 || argc>4 ){
2591:     sqlite3_result_error(context,
2592:         "wrong number of arguments to function writefile()", -1
2593:     );
2594:     return;
2595:   }
2596: 
2597:   zFile = (const char*)sqlite3_value_text(argv[0]);
2598:   if( zFile==0 ) return;
2599:   if( argc>=3 ){
2600:     mode = (mode_t)sqlite3_value_int(argv[2]);
2601:   }
2602:   if( argc==4 ){
2603:     mtime = sqlite3_value_int64(argv[3]);
2604:   }
2605: 
2606:   res = writeFile(context, zFile, argv[1], mode, mtime);
2607:   if( res==1 && errno==ENOENT ){
2608:     if( makeDirectory(zFile)==SQLITE_OK ){
2609:       res = writeFile(context, zFile, argv[1], mode, mtime);
2610:     }
2611:   }
2612: 
2613:   if( argc>2 && res!=0 ){
2614:     if( S_ISLNK(mode) ){
2615:       ctxErrorMsg(context, "failed to create symlink: %s", zFile);
2616:     }else if( S_ISDIR(mode) ){
2617:       ctxErrorMsg(context, "failed to create directory: %s", zFile);
2618:     }else{
2619:       ctxErrorMsg(context, "failed to write file: %s", zFile);
2620:     }
2621:   }
2622: }
2623: 
2624: /*
2625: ** SQL function:   lsmode(MODE)
2626: **
2627: ** Given a numberic st_mode from stat(), convert it into a human-readable
2628: ** text string in the style of "ls -l".
2629: */
2630: static void lsModeFunc(
2631:   sqlite3_context *context,
2632:   int argc,
2633:   sqlite3_value **argv
2634: ){
2635:   int i;
2636:   int iMode = sqlite3_value_int(argv[0]);
2637:   char z[16];
2638:   (void)argc;
2639:   if( S_ISLNK(iMode) ){
2640:     z[0] = 'l';
2641:   }else if( S_ISREG(iMode) ){
2642:     z[0] = '-';
2643:   }else if( S_ISDIR(iMode) ){
2644:     z[0] = 'd';
2645:   }else{
2646:     z[0] = '?';
2647:   }
2648:   for(i=0; i<3; i++){
2649:     int m = (iMode >> ((2-i)*3));
2650:     char *a = &z[1 + i*3];
2651:     a[0] = (m & 0x4) ? 'r' : '-';
2652:     a[1] = (m & 0x2) ? 'w' : '-';
2653:     a[2] = (m & 0x1) ? 'x' : '-';
2654:   }
2655:   z[10] = '\0';
2656:   sqlite3_result_text(context, z, -1, SQLITE_TRANSIENT);
2657: }
2658: 
2659: #ifndef SQLITE_OMIT_VIRTUALTABLE
2660: 
2661: /*
2662: ** Cursor type for recursively iterating through a directory structure.
2663: */
2664: typedef struct fsdir_cursor fsdir_cursor;
2665: typedef struct FsdirLevel FsdirLevel;
2666: 
2667: struct FsdirLevel {
2668:   DIR *pDir;                 /* From opendir() */
2669:   char *zDir;                /* Name of directory (nul-terminated) */
2670: };
2671: 
2672: struct fsdir_cursor {
2673:   sqlite3_vtab_cursor base;  /* Base class - must be first */
2674: 
2675:   int nLvl;                  /* Number of entries in aLvl[] array */
2676:   int iLvl;                  /* Index of current entry */
2677:   FsdirLevel *aLvl;          /* Hierarchy of directories being traversed */
2678: 
2679:   const char *zBase;
2680:   int nBase;
2681: 
2682:   struct stat sStat;         /* Current lstat() results */
2683:   char *zPath;               /* Path to current entry */
2684:   sqlite3_int64 iRowid;      /* Current rowid */
2685: };
2686: 
2687: typedef struct fsdir_tab fsdir_tab;
2688: struct fsdir_tab {
2689:   sqlite3_vtab base;         /* Base class - must be first */
2690: };
2691: 
2692: /*
2693: ** Construct a new fsdir virtual table object.
2694: */
2695: static int fsdirConnect(
2696:   sqlite3 *db,
2697:   void *pAux,
2698:   int argc, const char *const*argv,
2699:   sqlite3_vtab **ppVtab,
2700:   char **pzErr
2701: ){
2702:   fsdir_tab *pNew = 0;
2703:   int rc;
2704:   (void)pAux;
2705:   (void)argc;
2706:   (void)argv;
2707:   (void)pzErr;
2708:   rc = sqlite3_declare_vtab(db, "CREATE TABLE x" FSDIR_SCHEMA);
2709:   if( rc==SQLITE_OK ){
2710:     pNew = (fsdir_tab*)sqlite3_malloc( sizeof(*pNew) );
2711:     if( pNew==0 ) return SQLITE_NOMEM;
2712:     memset(pNew, 0, sizeof(*pNew));
2713:     sqlite3_vtab_config(db, SQLITE_VTAB_DIRECTONLY);
2714:   }
2715:   *ppVtab = (sqlite3_vtab*)pNew;
2716:   return rc;
2717: }
2718: 
2719: /*
2720: ** This method is the destructor for fsdir vtab objects.
2721: */
2722: static int fsdirDisconnect(sqlite3_vtab *pVtab){
2723:   sqlite3_free(pVtab);
2724:   return SQLITE_OK;
2725: }
2726: 
2727: /*
2728: ** Constructor for a new fsdir_cursor object.
2729: */
2730: static int fsdirOpen(sqlite3_vtab *p, sqlite3_vtab_cursor **ppCursor){
2731:   fsdir_cursor *pCur;
2732:   (void)p;
2733:   pCur = sqlite3_malloc( sizeof(*pCur) );
2734:   if( pCur==0 ) return SQLITE_NOMEM;
2735:   memset(pCur, 0, sizeof(*pCur));
2736:   pCur->iLvl = -1;
2737:   *ppCursor = &pCur->base;
2738:   return SQLITE_OK;
2739: }
2740: 
2741: /*
2742: ** Reset a cursor back to the state it was in when first returned
2743: ** by fsdirOpen().
2744: */
2745: static void fsdirResetCursor(fsdir_cursor *pCur){
2746:   int i;
2747:   for(i=0; i<=pCur->iLvl; i++){
2748:     FsdirLevel *pLvl = &pCur->aLvl[i];
2749:     if( pLvl->pDir ) closedir(pLvl->pDir);
2750:     sqlite3_free(pLvl->zDir);
2751:   }
2752:   sqlite3_free(pCur->zPath);
2753:   sqlite3_free(pCur->aLvl);
2754:   pCur->aLvl = 0;
2755:   pCur->zPath = 0;
2756:   pCur->zBase = 0;
2757:   pCur->nBase = 0;
2758:   pCur->nLvl = 0;
2759:   pCur->iLvl = -1;
2760:   pCur->iRowid = 1;
2761: }
2762: 
2763: /*
2764: ** Destructor for an fsdir_cursor.
2765: */
2766: static int fsdirClose(sqlite3_vtab_cursor *cur){
2767:   fsdir_cursor *pCur = (fsdir_cursor*)cur;
2768: 
2769:   fsdirResetCursor(pCur);
2770:   sqlite3_free(pCur);
2771:   return SQLITE_OK;
2772: }
2773: 
2774: /*
2775: ** Set the error message for the virtual table associated with cursor
2776: ** pCur to the results of vprintf(zFmt, ...).
2777: */
2778: static void fsdirSetErrmsg(fsdir_cursor *pCur, const char *zFmt, ...){
2779:   va_list ap;
2780:   va_start(ap, zFmt);
2781:   pCur->base.pVtab->zErrMsg = sqlite3_vmprintf(zFmt, ap);
2782:   va_end(ap);
2783: }
2784: 
2785: 
2786: /*
2787: ** Advance an fsdir_cursor to its next row of output.
2788: */
2789: static int fsdirNext(sqlite3_vtab_cursor *cur){
2790:   fsdir_cursor *pCur = (fsdir_cursor*)cur;
2791:   mode_t m = pCur->sStat.st_mode;
2792: 
2793:   pCur->iRowid++;
2794:   if( S_ISDIR(m) ){
2795:     /* Descend into this directory */
2796:     int iNew = pCur->iLvl + 1;
2797:     FsdirLevel *pLvl;
2798:     if( iNew>=pCur->nLvl ){
2799:       int nNew = iNew+1;
2800:       sqlite3_int64 nByte = nNew*sizeof(FsdirLevel);
2801:       FsdirLevel *aNew = (FsdirLevel*)sqlite3_realloc64(pCur->aLvl, nByte);
2802:       if( aNew==0 ) return SQLITE_NOMEM;
2803:       memset(&aNew[pCur->nLvl], 0, sizeof(FsdirLevel)*(nNew-pCur->nLvl));
2804:       pCur->aLvl = aNew;
2805:       pCur->nLvl = nNew;
2806:     }
2807:     pCur->iLvl = iNew;
2808:     pLvl = &pCur->aLvl[iNew];
2809: 
2810:     pLvl->zDir = pCur->zPath;
2811:     pCur->zPath = 0;
2812:     pLvl->pDir = opendir(pLvl->zDir);
2813:     if( pLvl->pDir==0 ){
2814:       fsdirSetErrmsg(pCur, "cannot read directory: %s", pCur->zPath);
2815:       return SQLITE_ERROR;
2816:     }
2817:   }
2818: 
2819:   while( pCur->iLvl>=0 ){
2820:     FsdirLevel *pLvl = &pCur->aLvl[pCur->iLvl];
2821:     struct dirent *pEntry = readdir(pLvl->pDir);
2822:     if( pEntry ){
2823:       if( pEntry->d_name[0]=='.' ){
2824:        if( pEntry->d_name[1]=='.' && pEntry->d_name[2]=='\0' ) continue;
2825:        if( pEntry->d_name[1]=='\0' ) continue;
2826:       }
2827:       sqlite3_free(pCur->zPath);
2828:       pCur->zPath = sqlite3_mprintf("%s/%s", pLvl->zDir, pEntry->d_name);
2829:       if( pCur->zPath==0 ) return SQLITE_NOMEM;
2830:       if( fileLinkStat(pCur->zPath, &pCur->sStat) ){
2831:         fsdirSetErrmsg(pCur, "cannot stat file: %s", pCur->zPath);
2832:         return SQLITE_ERROR;
2833:       }
2834:       return SQLITE_OK;
2835:     }
2836:     closedir(pLvl->pDir);
2837:     sqlite3_free(pLvl->zDir);
2838:     pLvl->pDir = 0;
2839:     pLvl->zDir = 0;
2840:     pCur->iLvl--;
2841:   }
2842: 
2843:   /* EOF */
2844:   sqlite3_free(pCur->zPath);
2845:   pCur->zPath = 0;
2846:   return SQLITE_OK;
2847: }
2848: 
2849: /*
2850: ** Return values of columns for the row at which the series_cursor
2851: ** is currently pointing.
2852: */
2853: static int fsdirColumn(
2854:   sqlite3_vtab_cursor *cur,   /* The cursor */
2855:   sqlite3_context *ctx,       /* First argument to sqlite3_result_...() */
2856:   int i                       /* Which column to return */
2857: ){
2858:   fsdir_cursor *pCur = (fsdir_cursor*)cur;
2859:   switch( i ){
2860:     case FSDIR_COLUMN_NAME: {
2861:       sqlite3_result_text(ctx, &pCur->zPath[pCur->nBase], -1, SQLITE_TRANSIENT);
2862:       break;
2863:     }
2864: 
2865:     case FSDIR_COLUMN_MODE:
2866:       sqlite3_result_int64(ctx, pCur->sStat.st_mode);
2867:       break;
2868: 
2869:     case FSDIR_COLUMN_MTIME:
2870:       sqlite3_result_int64(ctx, pCur->sStat.st_mtime);
2871:       break;
2872: 
2873:     case FSDIR_COLUMN_DATA: {
2874:       mode_t m = pCur->sStat.st_mode;
2875:       if( S_ISDIR(m) ){
2876:         sqlite3_result_null(ctx);
2877: #if !defined(_WIN32) && !defined(WIN32)
2878:       }else if( S_ISLNK(m) ){
2879:         char aStatic[64];
2880:         char *aBuf = aStatic;
2881:         sqlite3_int64 nBuf = 64;
2882:         int n;
2883: 
2884:         while( 1 ){
2885:           n = readlink(pCur->zPath, aBuf, nBuf);
2886:           if( n<nBuf ) break;
2887:           if( aBuf!=aStatic ) sqlite3_free(aBuf);
2888:           nBuf = nBuf*2;
2889:           aBuf = sqlite3_malloc64(nBuf);
2890:           if( aBuf==0 ){
2891:             sqlite3_result_error_nomem(ctx);
2892:             return SQLITE_NOMEM;
2893:           }
2894:         }
2895: 
2896:         sqlite3_result_text(ctx, aBuf, n, SQLITE_TRANSIENT);
2897:         if( aBuf!=aStatic ) sqlite3_free(aBuf);
2898: #endif
2899:       }else{
2900:         readFileContents(ctx, pCur->zPath);
2901:       }
2902:     }
2903:     case FSDIR_COLUMN_PATH:
2904:     default: {
2905:       /* The FSDIR_COLUMN_PATH and FSDIR_COLUMN_DIR are input parameters.
2906:       ** always return their values as NULL */
2907:       break;
2908:     }
2909:   }
2910:   return SQLITE_OK;
2911: }
2912: 
2913: /*
2914: ** Return the rowid for the current row. In this implementation, the
2915: ** first row returned is assigned rowid value 1, and each subsequent
2916: ** row a value 1 more than that of the previous.
2917: */
2918: static int fsdirRowid(sqlite3_vtab_cursor *cur, sqlite_int64 *pRowid){
2919:   fsdir_cursor *pCur = (fsdir_cursor*)cur;
2920:   *pRowid = pCur->iRowid;
2921:   return SQLITE_OK;
2922: }
2923: 
2924: /*
2925: ** Return TRUE if the cursor has been moved off of the last
2926: ** row of output.
2927: */
2928: static int fsdirEof(sqlite3_vtab_cursor *cur){
2929:   fsdir_cursor *pCur = (fsdir_cursor*)cur;
2930:   return (pCur->zPath==0);
2931: }
2932: 
2933: /*
2934: ** xFilter callback.
2935: **
2936: ** idxNum==1   PATH parameter only
2937: ** idxNum==2   Both PATH and DIR supplied
2938: */
2939: static int fsdirFilter(
2940:   sqlite3_vtab_cursor *cur,
2941:   int idxNum, const char *idxStr,
2942:   int argc, sqlite3_value **argv
2943: ){
2944:   const char *zDir = 0;
2945:   fsdir_cursor *pCur = (fsdir_cursor*)cur;
2946:   (void)idxStr;
2947:   fsdirResetCursor(pCur);
2948: 
2949:   if( idxNum==0 ){
2950:     fsdirSetErrmsg(pCur, "table function fsdir requires an argument");
2951:     return SQLITE_ERROR;
2952:   }
2953: 
2954:   assert( argc==idxNum && (argc==1 || argc==2) );
2955:   zDir = (const char*)sqlite3_value_text(argv[0]);
2956:   if( zDir==0 ){
2957:     fsdirSetErrmsg(pCur, "table function fsdir requires a non-NULL argument");
2958:     return SQLITE_ERROR;
2959:   }
2960:   if( argc==2 ){
2961:     pCur->zBase = (const char*)sqlite3_value_text(argv[1]);
2962:   }
2963:   if( pCur->zBase ){
2964:     pCur->nBase = (int)strlen(pCur->zBase)+1;
2965:     pCur->zPath = sqlite3_mprintf("%s/%s", pCur->zBase, zDir);
2966:   }else{
2967:     pCur->zPath = sqlite3_mprintf("%s", zDir);
2968:   }
2969: 
2970:   if( pCur->zPath==0 ){
2971:     return SQLITE_NOMEM;
2972:   }
2973:   if( fileLinkStat(pCur->zPath, &pCur->sStat) ){
2974:     fsdirSetErrmsg(pCur, "cannot stat file: %s", pCur->zPath);
2975:     return SQLITE_ERROR;
2976:   }
2977: 
2978:   return SQLITE_OK;
2979: }
2980: 
2981: /*
2982: ** SQLite will invoke this method one or more times while planning a query
2983: ** that uses the generate_series virtual table.  This routine needs to create
2984: ** a query plan for each invocation and compute an estimated cost for that
2985: ** plan.
2986: **
2987: ** In this implementation idxNum is used to represent the
2988: ** query plan.  idxStr is unused.
2989: **
2990: ** The query plan is represented by values of idxNum:
2991: **
2992: **  (1)  The path value is supplied by argv[0]
2993: **  (2)  Path is in argv[0] and dir is in argv[1]
2994: */
2995: static int fsdirBestIndex(
2996:   sqlite3_vtab *tab,
2997:   sqlite3_index_info *pIdxInfo
2998: ){
2999:   int i;                 /* Loop over constraints */
3000:   int idxPath = -1;      /* Index in pIdxInfo->aConstraint of PATH= */
3001:   int idxDir = -1;       /* Index in pIdxInfo->aConstraint of DIR= */
3002:   int seenPath = 0;      /* True if an unusable PATH= constraint is seen */
3003:   int seenDir = 0;       /* True if an unusable DIR= constraint is seen */
3004:   const struct sqlite3_index_constraint *pConstraint;
3005: 
3006:   (void)tab;
3007:   pConstraint = pIdxInfo->aConstraint;
3008:   for(i=0; i<pIdxInfo->nConstraint; i++, pConstraint++){
3009:     if( pConstraint->op!=SQLITE_INDEX_CONSTRAINT_EQ ) continue;
3010:     switch( pConstraint->iColumn ){
3011:       case FSDIR_COLUMN_PATH: {
3012:         if( pConstraint->usable ){
3013:           idxPath = i;
3014:           seenPath = 0;
3015:         }else if( idxPath<0 ){
3016:           seenPath = 1;
3017:         }
3018:         break;
3019:       }
3020:       case FSDIR_COLUMN_DIR: {
3021:         if( pConstraint->usable ){
3022:           idxDir = i;
3023:           seenDir = 0;
3024:         }else if( idxDir<0 ){
3025:           seenDir = 1;
3026:         }
3027:         break;
3028:       }
3029:     }
3030:   }
3031:   if( seenPath || seenDir ){
3032:     /* If input parameters are unusable, disallow this plan */
3033:     return SQLITE_CONSTRAINT;
3034:   }
3035: 
3036:   if( idxPath<0 ){
3037:     pIdxInfo->idxNum = 0;
3038:     /* The pIdxInfo->estimatedCost should have been initialized to a huge
3039:     ** number.  Leave it unchanged. */
3040:     pIdxInfo->estimatedRows = 0x7fffffff;
3041:   }else{
3042:     pIdxInfo->aConstraintUsage[idxPath].omit = 1;
3043:     pIdxInfo->aConstraintUsage[idxPath].argvIndex = 1;
3044:     if( idxDir>=0 ){
3045:       pIdxInfo->aConstraintUsage[idxDir].omit = 1;
3046:       pIdxInfo->aConstraintUsage[idxDir].argvIndex = 2;
3047:       pIdxInfo->idxNum = 2;
3048:       pIdxInfo->estimatedCost = 10.0;
3049:     }else{
3050:       pIdxInfo->idxNum = 1;
3051:       pIdxInfo->estimatedCost = 100.0;
3052:     }
3053:   }
3054: 
3055:   return SQLITE_OK;
3056: }
3057: 
3058: /*
3059: ** Register the "fsdir" virtual table.
3060: */
3061: static int fsdirRegister(sqlite3 *db){
3062:   static sqlite3_module fsdirModule = {
3063:     0,                         /* iVersion */
3064:     0,                         /* xCreate */
3065:     fsdirConnect,              /* xConnect */
3066:     fsdirBestIndex,            /* xBestIndex */
3067:     fsdirDisconnect,           /* xDisconnect */
3068:     0,                         /* xDestroy */
3069:     fsdirOpen,                 /* xOpen - open a cursor */
3070:     fsdirClose,                /* xClose - close a cursor */
3071:     fsdirFilter,               /* xFilter - configure scan constraints */
3072:     fsdirNext,                 /* xNext - advance a cursor */
3073:     fsdirEof,                  /* xEof - check for end of scan */
3074:     fsdirColumn,               /* xColumn - read data */
3075:     fsdirRowid,                /* xRowid - read data */
3076:     0,                         /* xUpdate */
3077:     0,                         /* xBegin */
3078:     0,                         /* xSync */
3079:     0,                         /* xCommit */
3080:     0,                         /* xRollback */
3081:     0,                         /* xFindMethod */
3082:     0,                         /* xRename */
3083:     0,                         /* xSavepoint */
3084:     0,                         /* xRelease */
3085:     0,                         /* xRollbackTo */
3086:     0,                         /* xShadowName */
3087:   };
3088: 
3089:   int rc = sqlite3_create_module(db, "fsdir", &fsdirModule, 0);
3090:   return rc;
3091: }
3092: #else         /* SQLITE_OMIT_VIRTUALTABLE */
3093: # define fsdirRegister(x) SQLITE_OK
3094: #endif
3095: 
3096: #ifdef _WIN32
3097: 
3098: #endif
3099: int sqlite3_fileio_init(
3100:   sqlite3 *db,
3101:   char **pzErrMsg,
3102:   const sqlite3_api_routines *pApi
3103: ){
3104:   int rc = SQLITE_OK;
3105:   SQLITE_EXTENSION_INIT2(pApi);
3106:   (void)pzErrMsg;  /* Unused parameter */
3107:   rc = sqlite3_create_function(db, "readfile", 1,
3108:                                SQLITE_UTF8|SQLITE_DIRECTONLY, 0,
3109:                                readfileFunc, 0, 0);
3110:   if( rc==SQLITE_OK ){
3111:     rc = sqlite3_create_function(db, "writefile", -1,
3112:                                  SQLITE_UTF8|SQLITE_DIRECTONLY, 0,
3113:                                  writefileFunc, 0, 0);
3114:   }
3115:   if( rc==SQLITE_OK ){
3116:     rc = sqlite3_create_function(db, "lsmode", 1, SQLITE_UTF8, 0,
3117:                                  lsModeFunc, 0, 0);
3118:   }
3119:   if( rc==SQLITE_OK ){
3120:     rc = fsdirRegister(db);
3121:   }
3122:   return rc;
3123: }
3124: 
3125: /************************* End ../ext/misc/fileio.c ********************/
3126: /************************* Begin ../ext/misc/completion.c ******************/
3127: /*
3128: ** 2017-07-10
3129: **
3130: ** The author disclaims copyright to this source code.  In place of
3131: ** a legal notice, here is a blessing:
3132: **
3133: **    May you do good and not evil.
3134: **    May you find forgiveness for yourself and forgive others.
3135: **    May you share freely, never taking more than you give.
3136: **
3137: *************************************************************************
3138: **
3139: ** This file implements an eponymous virtual table that returns suggested
3140: ** completions for a partial SQL input.
3141: **
3142: ** Suggested usage:
3143: **
3144: **     SELECT DISTINCT candidate COLLATE nocase
3145: **       FROM completion($prefix,$wholeline)
3146: **      ORDER BY 1;
3147: **
3148: ** The two query parameters are optional.  $prefix is the text of the
3149: ** current word being typed and that is to be completed.  $wholeline is
3150: ** the complete input line, used for context.
3151: **
3152: ** The raw completion() table might return the same candidate multiple
3153: ** times, for example if the same column name is used to two or more
3154: ** tables.  And the candidates are returned in an arbitrary order.  Hence,
3155: ** the DISTINCT and ORDER BY are recommended.
3156: **
3157: ** This virtual table operates at the speed of human typing, and so there
3158: ** is no attempt to make it fast.  Even a slow implementation will be much
3159: ** faster than any human can type.
3160: **
3161: */
3162: /* #include "sqlite3ext.h" */
3163: SQLITE_EXTENSION_INIT1
3164: #include <assert.h>
3165: #include <string.h>
3166: #include <ctype.h>
3167: 
3168: #ifndef SQLITE_OMIT_VIRTUALTABLE
3169: 
3170: /* completion_vtab is a subclass of sqlite3_vtab which will
3171: ** serve as the underlying representation of a completion virtual table
3172: */
3173: typedef struct completion_vtab completion_vtab;
3174: struct completion_vtab {
3175:   sqlite3_vtab base;  /* Base class - must be first */
3176:   sqlite3 *db;        /* Database connection for this completion vtab */
3177: };
3178: 
3179: /* completion_cursor is a subclass of sqlite3_vtab_cursor which will
3180: ** serve as the underlying representation of a cursor that scans
3181: ** over rows of the result
3182: */
3183: typedef struct completion_cursor completion_cursor;
3184: struct completion_cursor {
3185:   sqlite3_vtab_cursor base;  /* Base class - must be first */
3186:   sqlite3 *db;               /* Database connection for this cursor */
3187:   int nPrefix, nLine;        /* Number of bytes in zPrefix and zLine */
3188:   char *zPrefix;             /* The prefix for the word we want to complete */
3189:   char *zLine;               /* The whole that we want to complete */
3190:   const char *zCurrentRow;   /* Current output row */
3191:   int szRow;                 /* Length of the zCurrentRow string */
3192:   sqlite3_stmt *pStmt;       /* Current statement */
3193:   sqlite3_int64 iRowid;      /* The rowid */
3194:   int ePhase;                /* Current phase */
3195:   int j;                     /* inter-phase counter */
3196: };
3197: 
3198: /* Values for ePhase:
3199: */
3200: #define COMPLETION_FIRST_PHASE   1
3201: #define COMPLETION_KEYWORDS      1
3202: #define COMPLETION_PRAGMAS       2
3203: #define COMPLETION_FUNCTIONS     3
3204: #define COMPLETION_COLLATIONS    4
3205: #define COMPLETION_INDEXES       5
3206: #define COMPLETION_TRIGGERS      6
3207: #define COMPLETION_DATABASES     7
3208: #define COMPLETION_TABLES        8    /* Also VIEWs and TRIGGERs */
3209: #define COMPLETION_COLUMNS       9
3210: #define COMPLETION_MODULES       10
3211: #define COMPLETION_EOF           11
3212: 
3213: /*
3214: ** The completionConnect() method is invoked to create a new
3215: ** completion_vtab that describes the completion virtual table.
3216: **
3217: ** Think of this routine as the constructor for completion_vtab objects.
3218: **
3219: ** All this routine needs to do is:
3220: **
3221: **    (1) Allocate the completion_vtab object and initialize all fields.
3222: **
3223: **    (2) Tell SQLite (via the sqlite3_declare_vtab() interface) what the
3224: **        result set of queries against completion will look like.
3225: */
3226: static int completionConnect(
3227:   sqlite3 *db,
3228:   void *pAux,
3229:   int argc, const char *const*argv,
3230:   sqlite3_vtab **ppVtab,
3231:   char **pzErr
3232: ){
3233:   completion_vtab *pNew;
3234:   int rc;
3235: 
3236:   (void)(pAux);    /* Unused parameter */
3237:   (void)(argc);    /* Unused parameter */
3238:   (void)(argv);    /* Unused parameter */
3239:   (void)(pzErr);   /* Unused parameter */
3240: 
3241: /* Column numbers */
3242: #define COMPLETION_COLUMN_CANDIDATE 0  /* Suggested completion of the input */
3243: #define COMPLETION_COLUMN_PREFIX    1  /* Prefix of the word to be completed */
3244: #define COMPLETION_COLUMN_WHOLELINE 2  /* Entire line seen so far */
3245: #define COMPLETION_COLUMN_PHASE     3  /* ePhase - used for debugging only */
3246: 
3247:   sqlite3_vtab_config(db, SQLITE_VTAB_INNOCUOUS);
3248:   rc = sqlite3_declare_vtab(db,
3249:       "CREATE TABLE x("
3250:       "  candidate TEXT,"
3251:       "  prefix TEXT HIDDEN,"
3252:       "  wholeline TEXT HIDDEN,"
3253:       "  phase INT HIDDEN"        /* Used for debugging only */
3254:       ")");
3255:   if( rc==SQLITE_OK ){
3256:     pNew = sqlite3_malloc( sizeof(*pNew) );
3257:     *ppVtab = (sqlite3_vtab*)pNew;
3258:     if( pNew==0 ) return SQLITE_NOMEM;
3259:     memset(pNew, 0, sizeof(*pNew));
3260:     pNew->db = db;
3261:   }
3262:   return rc;
3263: }
3264: 
3265: /*
3266: ** This method is the destructor for completion_cursor objects.
3267: */
3268: static int completionDisconnect(sqlite3_vtab *pVtab){
3269:   sqlite3_free(pVtab);
3270:   return SQLITE_OK;
3271: }
3272: 
3273: /*
3274: ** Constructor for a new completion_cursor object.
3275: */
3276: static int completionOpen(sqlite3_vtab *p, sqlite3_vtab_cursor **ppCursor){
3277:   completion_cursor *pCur;
3278:   pCur = sqlite3_malloc( sizeof(*pCur) );
3279:   if( pCur==0 ) return SQLITE_NOMEM;
3280:   memset(pCur, 0, sizeof(*pCur));
3281:   pCur->db = ((completion_vtab*)p)->db;
3282:   *ppCursor = &pCur->base;
3283:   return SQLITE_OK;
3284: }
3285: 
3286: /*
3287: ** Reset the completion_cursor.
3288: */
3289: static void completionCursorReset(completion_cursor *pCur){
3290:   sqlite3_free(pCur->zPrefix);   pCur->zPrefix = 0;  pCur->nPrefix = 0;
3291:   sqlite3_free(pCur->zLine);     pCur->zLine = 0;    pCur->nLine = 0;
3292:   sqlite3_finalize(pCur->pStmt); pCur->pStmt = 0;
3293:   pCur->j = 0;
3294: }
3295: 
3296: /*
3297: ** Destructor for a completion_cursor.
3298: */
3299: static int completionClose(sqlite3_vtab_cursor *cur){
3300:   completionCursorReset((completion_cursor*)cur);
3301:   sqlite3_free(cur);
3302:   return SQLITE_OK;
3303: }
3304: 
3305: /*
3306: ** Advance a completion_cursor to its next row of output.
3307: **
3308: ** The ->ePhase, ->j, and ->pStmt fields of the completion_cursor object
3309: ** record the current state of the scan.  This routine sets ->zCurrentRow
3310: ** to the current row of output and then returns.  If no more rows remain,
3311: ** then ->ePhase is set to COMPLETION_EOF which will signal the virtual
3312: ** table that has reached the end of its scan.
3313: **
3314: ** The current implementation just lists potential identifiers and
3315: ** keywords and filters them by zPrefix.  Future enhancements should
3316: ** take zLine into account to try to restrict the set of identifiers and
3317: ** keywords based on what would be legal at the current point of input.
3318: */
3319: static int completionNext(sqlite3_vtab_cursor *cur){
3320:   completion_cursor *pCur = (completion_cursor*)cur;
3321:   int eNextPhase = 0;  /* Next phase to try if current phase reaches end */
3322:   int iCol = -1;       /* If >=0, step pCur->pStmt and use the i-th column */
3323:   pCur->iRowid++;
3324:   while( pCur->ePhase!=COMPLETION_EOF ){
3325:     switch( pCur->ePhase ){
3326:       case COMPLETION_KEYWORDS: {
3327:         if( pCur->j >= sqlite3_keyword_count() ){
3328:           pCur->zCurrentRow = 0;
3329:           pCur->ePhase = COMPLETION_DATABASES;
3330:         }else{
3331:           sqlite3_keyword_name(pCur->j++, &pCur->zCurrentRow, &pCur->szRow);
3332:         }
3333:         iCol = -1;
3334:         break;
3335:       }
3336:       case COMPLETION_DATABASES: {
3337:         if( pCur->pStmt==0 ){
3338:           sqlite3_prepare_v2(pCur->db, "PRAGMA database_list", -1,
3339:                              &pCur->pStmt, 0);
3340:         }
3341:         iCol = 1;
3342:         eNextPhase = COMPLETION_TABLES;
3343:         break;
3344:       }
3345:       case COMPLETION_TABLES: {
3346:         if( pCur->pStmt==0 ){
3347:           sqlite3_stmt *pS2;
3348:           char *zSql = 0;
3349:           const char *zSep = "";
3350:           sqlite3_prepare_v2(pCur->db, "PRAGMA database_list", -1, &pS2, 0);
3351:           while( sqlite3_step(pS2)==SQLITE_ROW ){
3352:             const char *zDb = (const char*)sqlite3_column_text(pS2, 1);
3353:             zSql = sqlite3_mprintf(
3354:                "%z%s"
3355:                "SELECT name FROM \"%w\".sqlite_schema",
3356:                zSql, zSep, zDb
3357:             );
3358:             if( zSql==0 ) return SQLITE_NOMEM;
3359:             zSep = " UNION ";
3360:           }
3361:           sqlite3_finalize(pS2);
3362:           sqlite3_prepare_v2(pCur->db, zSql, -1, &pCur->pStmt, 0);
3363:           sqlite3_free(zSql);
3364:         }
3365:         iCol = 0;
3366:         eNextPhase = COMPLETION_COLUMNS;
3367:         break;
3368:       }
3369:       case COMPLETION_COLUMNS: {
3370:         if( pCur->pStmt==0 ){
3371:           sqlite3_stmt *pS2;
3372:           char *zSql = 0;
3373:           const char *zSep = "";
3374:           sqlite3_prepare_v2(pCur->db, "PRAGMA database_list", -1, &pS2, 0);
3375:           while( sqlite3_step(pS2)==SQLITE_ROW ){
3376:             const char *zDb = (const char*)sqlite3_column_text(pS2, 1);
3377:             zSql = sqlite3_mprintf(
3378:                "%z%s"
3379:                "SELECT pti.name FROM \"%w\".sqlite_schema AS sm"
3380:                        " JOIN pragma_table_info(sm.name,%Q) AS pti"
3381:                " WHERE sm.type='table'",
3382:                zSql, zSep, zDb, zDb
3383:             );
3384:             if( zSql==0 ) return SQLITE_NOMEM;
3385:             zSep = " UNION ";
3386:           }
3387:           sqlite3_finalize(pS2);
3388:           sqlite3_prepare_v2(pCur->db, zSql, -1, &pCur->pStmt, 0);
3389:           sqlite3_free(zSql);
3390:         }
3391:         iCol = 0;
3392:         eNextPhase = COMPLETION_EOF;
3393:         break;
3394:       }
3395:     }
3396:     if( iCol<0 ){
3397:       /* This case is when the phase presets zCurrentRow */
3398:       if( pCur->zCurrentRow==0 ) continue;
3399:     }else{
3400:       if( sqlite3_step(pCur->pStmt)==SQLITE_ROW ){
3401:         /* Extract the next row of content */
3402:         pCur->zCurrentRow = (const char*)sqlite3_column_text(pCur->pStmt, iCol);
3403:         pCur->szRow = sqlite3_column_bytes(pCur->pStmt, iCol);
3404:       }else{
3405:         /* When all rows are finished, advance to the next phase */
3406:         sqlite3_finalize(pCur->pStmt);
3407:         pCur->pStmt = 0;
3408:         pCur->ePhase = eNextPhase;
3409:         continue;
3410:       }
3411:     }
3412:     if( pCur->nPrefix==0 ) break;
3413:     if( pCur->nPrefix<=pCur->szRow
3414:      && sqlite3_strnicmp(pCur->zPrefix, pCur->zCurrentRow, pCur->nPrefix)==0
3415:     ){
3416:       break;
3417:     }
3418:   }
3419: 
3420:   return SQLITE_OK;
3421: }
3422: 
3423: /*
3424: ** Return values of columns for the row at which the completion_cursor
3425: ** is currently pointing.
3426: */
3427: static int completionColumn(
3428:   sqlite3_vtab_cursor *cur,   /* The cursor */
3429:   sqlite3_context *ctx,       /* First argument to sqlite3_result_...() */
3430:   int i                       /* Which column to return */
3431: ){
3432:   completion_cursor *pCur = (completion_cursor*)cur;
3433:   switch( i ){
3434:     case COMPLETION_COLUMN_CANDIDATE: {
3435:       sqlite3_result_text(ctx, pCur->zCurrentRow, pCur->szRow,SQLITE_TRANSIENT);
3436:       break;
3437:     }
3438:     case COMPLETION_COLUMN_PREFIX: {
3439:       sqlite3_result_text(ctx, pCur->zPrefix, -1, SQLITE_TRANSIENT);
3440:       break;
3441:     }
3442:     case COMPLETION_COLUMN_WHOLELINE: {
3443:       sqlite3_result_text(ctx, pCur->zLine, -1, SQLITE_TRANSIENT);
3444:       break;
3445:     }
3446:     case COMPLETION_COLUMN_PHASE: {
3447:       sqlite3_result_int(ctx, pCur->ePhase);
3448:       break;
3449:     }
3450:   }
3451:   return SQLITE_OK;
3452: }
3453: 
3454: /*
3455: ** Return the rowid for the current row.  In this implementation, the
3456: ** rowid is the same as the output value.
3457: */
3458: static int completionRowid(sqlite3_vtab_cursor *cur, sqlite_int64 *pRowid){
3459:   completion_cursor *pCur = (completion_cursor*)cur;
3460:   *pRowid = pCur->iRowid;
3461:   return SQLITE_OK;
3462: }
3463: 
3464: /*
3465: ** Return TRUE if the cursor has been moved off of the last
3466: ** row of output.
3467: */
3468: static int completionEof(sqlite3_vtab_cursor *cur){
3469:   completion_cursor *pCur = (completion_cursor*)cur;
3470:   return pCur->ePhase >= COMPLETION_EOF;
3471: }
3472: 
3473: /*
3474: ** This method is called to "rewind" the completion_cursor object back
3475: ** to the first row of output.  This method is always called at least
3476: ** once prior to any call to completionColumn() or completionRowid() or
3477: ** completionEof().
3478: */
3479: static int completionFilter(
3480:   sqlite3_vtab_cursor *pVtabCursor,
3481:   int idxNum, const char *idxStr,
3482:   int argc, sqlite3_value **argv
3483: ){
3484:   completion_cursor *pCur = (completion_cursor *)pVtabCursor;
3485:   int iArg = 0;
3486:   (void)(idxStr);   /* Unused parameter */
3487:   (void)(argc);     /* Unused parameter */
3488:   completionCursorReset(pCur);
3489:   if( idxNum & 1 ){
3490:     pCur->nPrefix = sqlite3_value_bytes(argv[iArg]);
3491:     if( pCur->nPrefix>0 ){
3492:       pCur->zPrefix = sqlite3_mprintf("%s", sqlite3_value_text(argv[iArg]));
3493:       if( pCur->zPrefix==0 ) return SQLITE_NOMEM;
3494:     }
3495:     iArg = 1;
3496:   }
3497:   if( idxNum & 2 ){
3498:     pCur->nLine = sqlite3_value_bytes(argv[iArg]);
3499:     if( pCur->nLine>0 ){
3500:       pCur->zLine = sqlite3_mprintf("%s", sqlite3_value_text(argv[iArg]));
3501:       if( pCur->zLine==0 ) return SQLITE_NOMEM;
3502:     }
3503:   }
3504:   if( pCur->zLine!=0 && pCur->zPrefix==0 ){
3505:     int i = pCur->nLine;
3506:     while( i>0 && (isalnum(pCur->zLine[i-1]) || pCur->zLine[i-1]=='_') ){
3507:       i--;
3508:     }
3509:     pCur->nPrefix = pCur->nLine - i;
3510:     if( pCur->nPrefix>0 ){
3511:       pCur->zPrefix = sqlite3_mprintf("%.*s", pCur->nPrefix, pCur->zLine + i);
3512:       if( pCur->zPrefix==0 ) return SQLITE_NOMEM;
3513:     }
3514:   }
3515:   pCur->iRowid = 0;
3516:   pCur->ePhase = COMPLETION_FIRST_PHASE;
3517:   return completionNext(pVtabCursor);
3518: }
3519: 
3520: /*
3521: ** SQLite will invoke this method one or more times while planning a query
3522: ** that uses the completion virtual table.  This routine needs to create
3523: ** a query plan for each invocation and compute an estimated cost for that
3524: ** plan.
3525: **
3526: ** There are two hidden parameters that act as arguments to the table-valued
3527: ** function:  "prefix" and "wholeline".  Bit 0 of idxNum is set if "prefix"
3528: ** is available and bit 1 is set if "wholeline" is available.
3529: */
3530: static int completionBestIndex(
3531:   sqlite3_vtab *tab,
3532:   sqlite3_index_info *pIdxInfo
3533: ){
3534:   int i;                 /* Loop over constraints */
3535:   int idxNum = 0;        /* The query plan bitmask */
3536:   int prefixIdx = -1;    /* Index of the start= constraint, or -1 if none */
3537:   int wholelineIdx = -1; /* Index of the stop= constraint, or -1 if none */
3538:   int nArg = 0;          /* Number of arguments that completeFilter() expects */
3539:   const struct sqlite3_index_constraint *pConstraint;
3540: 
3541:   (void)(tab);    /* Unused parameter */
3542:   pConstraint = pIdxInfo->aConstraint;
3543:   for(i=0; i<pIdxInfo->nConstraint; i++, pConstraint++){
3544:     if( pConstraint->usable==0 ) continue;
3545:     if( pConstraint->op!=SQLITE_INDEX_CONSTRAINT_EQ ) continue;
3546:     switch( pConstraint->iColumn ){
3547:       case COMPLETION_COLUMN_PREFIX:
3548:         prefixIdx = i;
3549:         idxNum |= 1;
3550:         break;
3551:       case COMPLETION_COLUMN_WHOLELINE:
3552:         wholelineIdx = i;
3553:         idxNum |= 2;
3554:         break;
3555:     }
3556:   }
3557:   if( prefixIdx>=0 ){
3558:     pIdxInfo->aConstraintUsage[prefixIdx].argvIndex = ++nArg;
3559:     pIdxInfo->aConstraintUsage[prefixIdx].omit = 1;
3560:   }
3561:   if( wholelineIdx>=0 ){
3562:     pIdxInfo->aConstraintUsage[wholelineIdx].argvIndex = ++nArg;
3563:     pIdxInfo->aConstraintUsage[wholelineIdx].omit = 1;
3564:   }
3565:   pIdxInfo->idxNum = idxNum;
3566:   pIdxInfo->estimatedCost = (double)5000 - 1000*nArg;
3567:   pIdxInfo->estimatedRows = 500 - 100*nArg;
3568:   return SQLITE_OK;
3569: }
3570: 
3571: /*
3572: ** This following structure defines all the methods for the
3573: ** completion virtual table.
3574: */
3575: static sqlite3_module completionModule = {
3576:   0,                         /* iVersion */
3577:   0,                         /* xCreate */
3578:   completionConnect,         /* xConnect */
3579:   completionBestIndex,       /* xBestIndex */
3580:   completionDisconnect,      /* xDisconnect */
3581:   0,                         /* xDestroy */
3582:   completionOpen,            /* xOpen - open a cursor */
3583:   completionClose,           /* xClose - close a cursor */
3584:   completionFilter,          /* xFilter - configure scan constraints */
3585:   completionNext,            /* xNext - advance a cursor */
3586:   completionEof,             /* xEof - check for end of scan */
3587:   completionColumn,          /* xColumn - read data */
3588:   completionRowid,           /* xRowid - read data */
3589:   0,                         /* xUpdate */
3590:   0,                         /* xBegin */
3591:   0,                         /* xSync */
3592:   0,                         /* xCommit */
3593:   0,                         /* xRollback */
3594:   0,                         /* xFindMethod */
3595:   0,                         /* xRename */
3596:   0,                         /* xSavepoint */
3597:   0,                         /* xRelease */
3598:   0,                         /* xRollbackTo */
3599:   0                          /* xShadowName */
3600: };
3601: 
3602: #endif /* SQLITE_OMIT_VIRTUALTABLE */
3603: 
3604: int sqlite3CompletionVtabInit(sqlite3 *db){
3605:   int rc = SQLITE_OK;
3606: #ifndef SQLITE_OMIT_VIRTUALTABLE
3607:   rc = sqlite3_create_module(db, "completion", &completionModule, 0);
3608: #endif
3609:   return rc;
3610: }
3611: 
3612: #ifdef _WIN32
3613: 
3614: #endif
3615: int sqlite3_completion_init(
3616:   sqlite3 *db,
3617:   char **pzErrMsg,
3618:   const sqlite3_api_routines *pApi
3619: ){
3620:   int rc = SQLITE_OK;
3621:   SQLITE_EXTENSION_INIT2(pApi);
3622:   (void)(pzErrMsg);  /* Unused parameter */
3623: #ifndef SQLITE_OMIT_VIRTUALTABLE
3624:   rc = sqlite3CompletionVtabInit(db);
3625: #endif
3626:   return rc;
3627: }
3628: 
3629: /************************* End ../ext/misc/completion.c ********************/
3630: /************************* Begin ../ext/misc/appendvfs.c ******************/
3631: /*
3632: ** 2017-10-20
3633: **
3634: ** The author disclaims copyright to this source code.  In place of
3635: ** a legal notice, here is a blessing:
3636: **
3637: **    May you do good and not evil.
3638: **    May you find forgiveness for yourself and forgive others.
3639: **    May you share freely, never taking more than you give.
3640: **
3641: ******************************************************************************
3642: **
3643: ** This file implements a VFS shim that allows an SQLite database to be
3644: ** appended onto the end of some other file, such as an executable.
3645: **
3646: ** A special record must appear at the end of the file that identifies the
3647: ** file as an appended database and provides an offset to page 1.  For
3648: ** best performance page 1 should be located at a disk page boundary, though
3649: ** that is not required.
3650: **
3651: ** When opening a database using this VFS, the connection might treat
3652: ** the file as an ordinary SQLite database, or it might treat is as a
3653: ** database appended onto some other file.  Here are the rules:
3654: **
3655: **  (1)  When opening a new empty file, that file is treated as an ordinary
3656: **       database.
3657: **
3658: **  (2)  When opening a file that begins with the standard SQLite prefix
3659: **       string "SQLite format 3", that file is treated as an ordinary
3660: **       database.
3661: **
3662: **  (3)  When opening a file that ends with the appendvfs trailer string
3663: **       "Start-Of-SQLite3-NNNNNNNN" that file is treated as an appended
3664: **       database.
3665: **
3666: **  (4)  If none of the above apply and the SQLITE_OPEN_CREATE flag is
3667: **       set, then a new database is appended to the already existing file.
3668: **
3669: **  (5)  Otherwise, SQLITE_CANTOPEN is returned.
3670: **
3671: ** To avoid unnecessary complications with the PENDING_BYTE, the size of
3672: ** the file containing the database is limited to 1GB.  This VFS will refuse
3673: ** to read or write past the 1GB mark.  This restriction might be lifted in
3674: ** future versions.  For now, if you need a large database, then keep the
3675: ** database in a separate file.
3676: **
3677: ** If the file being opened is not an appended database, then this shim is
3678: ** a pass-through into the default underlying VFS.
3679: **/
3680: /* #include "sqlite3ext.h" */
3681: SQLITE_EXTENSION_INIT1
3682: #include <string.h>
3683: #include <assert.h>
3684: 
3685: /* The append mark at the end of the database is:
3686: **
3687: **     Start-Of-SQLite3-NNNNNNNN
3688: **     123456789 123456789 12345
3689: **
3690: ** The NNNNNNNN represents a 64-bit big-endian unsigned integer which is
3691: ** the offset to page 1.
3692: */
3693: #define APND_MARK_PREFIX     "Start-Of-SQLite3-"
3694: #define APND_MARK_PREFIX_SZ  17
3695: #define APND_MARK_SIZE       25
3696: 
3697: /*
3698: ** Maximum size of the combined prefix + database + append-mark.  This
3699: ** must be less than 0x40000000 to avoid locking issues on Windows.
3700: */
3701: #define APND_MAX_SIZE  (65536*15259)
3702: 
3703: /*
3704: ** Forward declaration of objects used by this utility
3705: */
3706: typedef struct sqlite3_vfs ApndVfs;
3707: typedef struct ApndFile ApndFile;
3708: 
3709: /* Access to a lower-level VFS that (might) implement dynamic loading,
3710: ** access to randomness, etc.
3711: */
3712: #define ORIGVFS(p)  ((sqlite3_vfs*)((p)->pAppData))
3713: #define ORIGFILE(p) ((sqlite3_file*)(((ApndFile*)(p))+1))
3714: 
3715: /* An open file */
3716: struct ApndFile {
3717:   sqlite3_file base;              /* IO methods */
3718:   sqlite3_int64 iPgOne;           /* File offset to page 1 */
3719:   sqlite3_int64 iMark;            /* Start of the append-mark */
3720: };
3721: 
3722: /*
3723: ** Methods for ApndFile
3724: */
3725: static int apndClose(sqlite3_file*);
3726: static int apndRead(sqlite3_file*, void*, int iAmt, sqlite3_int64 iOfst);
3727: static int apndWrite(sqlite3_file*,const void*,int iAmt, sqlite3_int64 iOfst);
3728: static int apndTruncate(sqlite3_file*, sqlite3_int64 size);
3729: static int apndSync(sqlite3_file*, int flags);
3730: static int apndFileSize(sqlite3_file*, sqlite3_int64 *pSize);
3731: static int apndLock(sqlite3_file*, int);
3732: static int apndUnlock(sqlite3_file*, int);
3733: static int apndCheckReservedLock(sqlite3_file*, int *pResOut);
3734: static int apndFileControl(sqlite3_file*, int op, void *pArg);
3735: static int apndSectorSize(sqlite3_file*);
3736: static int apndDeviceCharacteristics(sqlite3_file*);
3737: static int apndShmMap(sqlite3_file*, int iPg, int pgsz, int, void volatile**);
3738: static int apndShmLock(sqlite3_file*, int offset, int n, int flags);
3739: static void apndShmBarrier(sqlite3_file*);
3740: static int apndShmUnmap(sqlite3_file*, int deleteFlag);
3741: static int apndFetch(sqlite3_file*, sqlite3_int64 iOfst, int iAmt, void **pp);
3742: static int apndUnfetch(sqlite3_file*, sqlite3_int64 iOfst, void *p);
3743: 
3744: /*
3745: ** Methods for ApndVfs
3746: */
3747: static int apndOpen(sqlite3_vfs*, const char *, sqlite3_file*, int , int *);
3748: static int apndDelete(sqlite3_vfs*, const char *zName, int syncDir);
3749: static int apndAccess(sqlite3_vfs*, const char *zName, int flags, int *);
3750: static int apndFullPathname(sqlite3_vfs*, const char *zName, int, char *zOut);
3751: static void *apndDlOpen(sqlite3_vfs*, const char *zFilename);
3752: static void apndDlError(sqlite3_vfs*, int nByte, char *zErrMsg);
3753: static void (*apndDlSym(sqlite3_vfs *pVfs, void *p, const char*zSym))(void);
3754: static void apndDlClose(sqlite3_vfs*, void*);
3755: static int apndRandomness(sqlite3_vfs*, int nByte, char *zOut);
3756: static int apndSleep(sqlite3_vfs*, int microseconds);
3757: static int apndCurrentTime(sqlite3_vfs*, double*);
3758: static int apndGetLastError(sqlite3_vfs*, int, char *);
3759: static int apndCurrentTimeInt64(sqlite3_vfs*, sqlite3_int64*);
3760: static int apndSetSystemCall(sqlite3_vfs*, const char*,sqlite3_syscall_ptr);
3761: static sqlite3_syscall_ptr apndGetSystemCall(sqlite3_vfs*, const char *z);
3762: static const char *apndNextSystemCall(sqlite3_vfs*, const char *zName);
3763: 
3764: static sqlite3_vfs apnd_vfs = {
3765:   3,                            /* iVersion (set when registered) */
3766:   0,                            /* szOsFile (set when registered) */
3767:   1024,                         /* mxPathname */
3768:   0,                            /* pNext */
3769:   "apndvfs",                    /* zName */
3770:   0,                            /* pAppData (set when registered) */
3771:   apndOpen,                     /* xOpen */
3772:   apndDelete,                   /* xDelete */
3773:   apndAccess,                   /* xAccess */
3774:   apndFullPathname,             /* xFullPathname */
3775:   apndDlOpen,                   /* xDlOpen */
3776:   apndDlError,                  /* xDlError */
3777:   apndDlSym,                    /* xDlSym */
3778:   apndDlClose,                  /* xDlClose */
3779:   apndRandomness,               /* xRandomness */
3780:   apndSleep,                    /* xSleep */
3781:   apndCurrentTime,              /* xCurrentTime */
3782:   apndGetLastError,             /* xGetLastError */
3783:   apndCurrentTimeInt64,         /* xCurrentTimeInt64 */
3784:   apndSetSystemCall,            /* xSetSystemCall */
3785:   apndGetSystemCall,            /* xGetSystemCall */
3786:   apndNextSystemCall            /* xNextSystemCall */
3787: };
3788: 
3789: static const sqlite3_io_methods apnd_io_methods = {
3790:   3,                              /* iVersion */
3791:   apndClose,                      /* xClose */
3792:   apndRead,                       /* xRead */
3793:   apndWrite,                      /* xWrite */
3794:   apndTruncate,                   /* xTruncate */
3795:   apndSync,                       /* xSync */
3796:   apndFileSize,                   /* xFileSize */
3797:   apndLock,                       /* xLock */
3798:   apndUnlock,                     /* xUnlock */
3799:   apndCheckReservedLock,          /* xCheckReservedLock */
3800:   apndFileControl,                /* xFileControl */
3801:   apndSectorSize,                 /* xSectorSize */
3802:   apndDeviceCharacteristics,      /* xDeviceCharacteristics */
3803:   apndShmMap,                     /* xShmMap */
3804:   apndShmLock,                    /* xShmLock */
3805:   apndShmBarrier,                 /* xShmBarrier */
3806:   apndShmUnmap,                   /* xShmUnmap */
3807:   apndFetch,                      /* xFetch */
3808:   apndUnfetch                     /* xUnfetch */
3809: };
3810: 
3811: 
3812: 
3813: /*
3814: ** Close an apnd-file.
3815: */
3816: static int apndClose(sqlite3_file *pFile){
3817:   pFile = ORIGFILE(pFile);
3818:   return pFile->pMethods->xClose(pFile);
3819: }
3820: 
3821: /*
3822: ** Read data from an apnd-file.
3823: */
3824: static int apndRead(
3825:   sqlite3_file *pFile,
3826:   void *zBuf,
3827:   int iAmt,
3828:   sqlite_int64 iOfst
3829: ){
3830:   ApndFile *p = (ApndFile *)pFile;
3831:   pFile = ORIGFILE(pFile);
3832:   return pFile->pMethods->xRead(pFile, zBuf, iAmt, iOfst+p->iPgOne);
3833: }
3834: 
3835: /*
3836: ** Add the append-mark onto the end of the file.
3837: */
3838: static int apndWriteMark(ApndFile *p, sqlite3_file *pFile){
3839:   int i;
3840:   unsigned char a[APND_MARK_SIZE];
3841:   memcpy(a, APND_MARK_PREFIX, APND_MARK_PREFIX_SZ);
3842:   for(i=0; i<8; i++){
3843:     a[APND_MARK_PREFIX_SZ+i] = (p->iPgOne >> (56 - i*8)) & 0xff;
3844:   }
3845:   return pFile->pMethods->xWrite(pFile, a, APND_MARK_SIZE, p->iMark);
3846: }
3847: 
3848: /*
3849: ** Write data to an apnd-file.
3850: */
3851: static int apndWrite(
3852:   sqlite3_file *pFile,
3853:   const void *zBuf,
3854:   int iAmt,
3855:   sqlite_int64 iOfst
3856: ){
3857:   int rc;
3858:   ApndFile *p = (ApndFile *)pFile;
3859:   pFile = ORIGFILE(pFile);
3860:   if( iOfst+iAmt>=APND_MAX_SIZE ) return SQLITE_FULL;
3861:   rc = pFile->pMethods->xWrite(pFile, zBuf, iAmt, iOfst+p->iPgOne);
3862:   if( rc==SQLITE_OK &&  iOfst + iAmt + p->iPgOne > p->iMark ){
3863:     sqlite3_int64 sz = 0;
3864:     rc = pFile->pMethods->xFileSize(pFile, &sz);
3865:     if( rc==SQLITE_OK ){
3866:       p->iMark = sz - APND_MARK_SIZE;
3867:       if( iOfst + iAmt + p->iPgOne > p->iMark ){
3868:         p->iMark = p->iPgOne + iOfst + iAmt;
3869:         rc = apndWriteMark(p, pFile);
3870:       }
3871:     }
3872:   }
3873:   return rc;
3874: }
3875: 
3876: /*
3877: ** Truncate an apnd-file.
3878: */
3879: static int apndTruncate(sqlite3_file *pFile, sqlite_int64 size){
3880:   int rc;
3881:   ApndFile *p = (ApndFile *)pFile;
3882:   pFile = ORIGFILE(pFile);
3883:   rc = pFile->pMethods->xTruncate(pFile, size+p->iPgOne+APND_MARK_SIZE);
3884:   if( rc==SQLITE_OK ){
3885:     p->iMark = p->iPgOne+size;
3886:     rc = apndWriteMark(p, pFile);
3887:   }
3888:   return rc;
3889: }
3890: 
3891: /*
3892: ** Sync an apnd-file.
3893: */
3894: static int apndSync(sqlite3_file *pFile, int flags){
3895:   pFile = ORIGFILE(pFile);
3896:   return pFile->pMethods->xSync(pFile, flags);
3897: }
3898: 
3899: /*
3900: ** Return the current file-size of an apnd-file.
3901: */
3902: static int apndFileSize(sqlite3_file *pFile, sqlite_int64 *pSize){
3903:   ApndFile *p = (ApndFile *)pFile;
3904:   int rc;
3905:   pFile = ORIGFILE(p);
3906:   rc = pFile->pMethods->xFileSize(pFile, pSize);
3907:   if( rc==SQLITE_OK && p->iPgOne ){
3908:     *pSize -= p->iPgOne + APND_MARK_SIZE;
3909:   }
3910:   return rc;
3911: }
3912: 
3913: /*
3914: ** Lock an apnd-file.
3915: */
3916: static int apndLock(sqlite3_file *pFile, int eLock){
3917:   pFile = ORIGFILE(pFile);
3918:   return pFile->pMethods->xLock(pFile, eLock);
3919: }
3920: 
3921: /*
3922: ** Unlock an apnd-file.
3923: */
3924: static int apndUnlock(sqlite3_file *pFile, int eLock){
3925:   pFile = ORIGFILE(pFile);
3926:   return pFile->pMethods->xUnlock(pFile, eLock);
3927: }
3928: 
3929: /*
3930: ** Check if another file-handle holds a RESERVED lock on an apnd-file.
3931: */
3932: static int apndCheckReservedLock(sqlite3_file *pFile, int *pResOut){
3933:   pFile = ORIGFILE(pFile);
3934:   return pFile->pMethods->xCheckReservedLock(pFile, pResOut);
3935: }
3936: 
3937: /*
3938: ** File control method. For custom operations on an apnd-file.
3939: */
3940: static int apndFileControl(sqlite3_file *pFile, int op, void *pArg){
3941:   ApndFile *p = (ApndFile *)pFile;
3942:   int rc;
3943:   pFile = ORIGFILE(pFile);
3944:   rc = pFile->pMethods->xFileControl(pFile, op, pArg);
3945:   if( rc==SQLITE_OK && op==SQLITE_FCNTL_VFSNAME ){
3946:     *(char**)pArg = sqlite3_mprintf("apnd(%lld)/%z", p->iPgOne, *(char**)pArg);
3947:   }
3948:   return rc;
3949: }
3950: 
3951: /*
3952: ** Return the sector-size in bytes for an apnd-file.
3953: */
3954: static int apndSectorSize(sqlite3_file *pFile){
3955:   pFile = ORIGFILE(pFile);
3956:   return pFile->pMethods->xSectorSize(pFile);
3957: }
3958: 
3959: /*
3960: ** Return the device characteristic flags supported by an apnd-file.
3961: */
3962: static int apndDeviceCharacteristics(sqlite3_file *pFile){
3963:   pFile = ORIGFILE(pFile);
3964:   return pFile->pMethods->xDeviceCharacteristics(pFile);
3965: }
3966: 
3967: /* Create a shared memory file mapping */
3968: static int apndShmMap(
3969:   sqlite3_file *pFile,
3970:   int iPg,
3971:   int pgsz,
3972:   int bExtend,
3973:   void volatile **pp
3974: ){
3975:   pFile = ORIGFILE(pFile);
3976:   return pFile->pMethods->xShmMap(pFile,iPg,pgsz,bExtend,pp);
3977: }
3978: 
3979: /* Perform locking on a shared-memory segment */
3980: static int apndShmLock(sqlite3_file *pFile, int offset, int n, int flags){
3981:   pFile = ORIGFILE(pFile);
3982:   return pFile->pMethods->xShmLock(pFile,offset,n,flags);
3983: }
3984: 
3985: /* Memory barrier operation on shared memory */
3986: static void apndShmBarrier(sqlite3_file *pFile){
3987:   pFile = ORIGFILE(pFile);
3988:   pFile->pMethods->xShmBarrier(pFile);
3989: }
3990: 
3991: /* Unmap a shared memory segment */
3992: static int apndShmUnmap(sqlite3_file *pFile, int deleteFlag){
3993:   pFile = ORIGFILE(pFile);
3994:   return pFile->pMethods->xShmUnmap(pFile,deleteFlag);
3995: }
3996: 
3997: /* Fetch a page of a memory-mapped file */
3998: static int apndFetch(
3999:   sqlite3_file *pFile,
4000:   sqlite3_int64 iOfst,
4001:   int iAmt,
4002:   void **pp
4003: ){
4004:   ApndFile *p = (ApndFile *)pFile;
4005:   pFile = ORIGFILE(pFile);
4006:   return pFile->pMethods->xFetch(pFile, iOfst+p->iPgOne, iAmt, pp);
4007: }
4008: 
4009: /* Release a memory-mapped page */
4010: static int apndUnfetch(sqlite3_file *pFile, sqlite3_int64 iOfst, void *pPage){
4011:   ApndFile *p = (ApndFile *)pFile;
4012:   pFile = ORIGFILE(pFile);
4013:   return pFile->pMethods->xUnfetch(pFile, iOfst+p->iPgOne, pPage);
4014: }
4015: 
4016: /*
4017: ** Check to see if the file is an ordinary SQLite database file.
4018: */
4019: static int apndIsOrdinaryDatabaseFile(sqlite3_int64 sz, sqlite3_file *pFile){
4020:   int rc;
4021:   char zHdr[16];
4022:   static const char aSqliteHdr[] = "SQLite format 3";
4023:   if( sz<512 ) return 0;
4024:   rc = pFile->pMethods->xRead(pFile, zHdr, sizeof(zHdr), 0);
4025:   if( rc ) return 0;
4026:   return memcmp(zHdr, aSqliteHdr, sizeof(zHdr))==0;
4027: }
4028: 
4029: /*
4030: ** Try to read the append-mark off the end of a file.  Return the
4031: ** start of the appended database if the append-mark is present.  If
4032: ** there is no append-mark, return -1;
4033: */
4034: static sqlite3_int64 apndReadMark(sqlite3_int64 sz, sqlite3_file *pFile){
4035:   int rc, i;
4036:   sqlite3_int64 iMark;
4037:   unsigned char a[APND_MARK_SIZE];
4038: 
4039:   if( sz<=APND_MARK_SIZE ) return -1;
4040:   rc = pFile->pMethods->xRead(pFile, a, APND_MARK_SIZE, sz-APND_MARK_SIZE);
4041:   if( rc ) return -1;
4042:   if( memcmp(a, APND_MARK_PREFIX, APND_MARK_PREFIX_SZ)!=0 ) return -1;
4043:   iMark = ((sqlite3_int64)(a[APND_MARK_PREFIX_SZ]&0x7f))<<56;
4044:   for(i=1; i<8; i++){
4045:     iMark += (sqlite3_int64)a[APND_MARK_PREFIX_SZ+i]<<(56-8*i);
4046:   }
4047:   return iMark;
4048: }
4049: 
4050: /*
4051: ** Open an apnd file handle.
4052: */
4053: static int apndOpen(
4054:   sqlite3_vfs *pVfs,
4055:   const char *zName,
4056:   sqlite3_file *pFile,
4057:   int flags,
4058:   int *pOutFlags
4059: ){
4060:   ApndFile *p;
4061:   sqlite3_file *pSubFile;
4062:   sqlite3_vfs *pSubVfs;
4063:   int rc;
4064:   sqlite3_int64 sz;
4065:   pSubVfs = ORIGVFS(pVfs);
4066:   if( (flags & SQLITE_OPEN_MAIN_DB)==0 ){
4067:     return pSubVfs->xOpen(pSubVfs, zName, pFile, flags, pOutFlags);
4068:   }
4069:   p = (ApndFile*)pFile;
4070:   memset(p, 0, sizeof(*p));
4071:   pSubFile = ORIGFILE(pFile);
4072:   pFile->pMethods = &apnd_io_methods;
4073:   rc = pSubVfs->xOpen(pSubVfs, zName, pSubFile, flags, pOutFlags);
4074:   if( rc ) goto apnd_open_done;
4075:   rc = pSubFile->pMethods->xFileSize(pSubFile, &sz);
4076:   if( rc ){
4077:     pSubFile->pMethods->xClose(pSubFile);
4078:     goto apnd_open_done;
4079:   }
4080:   if( apndIsOrdinaryDatabaseFile(sz, pSubFile) ){
4081:     memmove(pFile, pSubFile, pSubVfs->szOsFile);
4082:     return SQLITE_OK;
4083:   }
4084:   p->iMark = 0;
4085:   p->iPgOne = apndReadMark(sz, pFile);
4086:   if( p->iPgOne>0 ){
4087:     return SQLITE_OK;
4088:   }
4089:   if( (flags & SQLITE_OPEN_CREATE)==0 ){
4090:     pSubFile->pMethods->xClose(pSubFile);
4091:     rc = SQLITE_CANTOPEN;
4092:   }
4093:   p->iPgOne = (sz+0xfff) & ~(sqlite3_int64)0xfff;
4094: apnd_open_done:
4095:   if( rc ) pFile->pMethods = 0;
4096:   return rc;
4097: }
4098: 
4099: /*
4100: ** All other VFS methods are pass-thrus.
4101: */
4102: static int apndDelete(sqlite3_vfs *pVfs, const char *zPath, int dirSync){
4103:   return ORIGVFS(pVfs)->xDelete(ORIGVFS(pVfs), zPath, dirSync);
4104: }
4105: static int apndAccess(
4106:   sqlite3_vfs *pVfs,
4107:   const char *zPath,
4108:   int flags,
4109:   int *pResOut
4110: ){
4111:   return ORIGVFS(pVfs)->xAccess(ORIGVFS(pVfs), zPath, flags, pResOut);
4112: }
4113: static int apndFullPathname(
4114:   sqlite3_vfs *pVfs,
4115:   const char *zPath,
4116:   int nOut,
4117:   char *zOut
4118: ){
4119:   return ORIGVFS(pVfs)->xFullPathname(ORIGVFS(pVfs),zPath,nOut,zOut);
4120: }
4121: static void *apndDlOpen(sqlite3_vfs *pVfs, const char *zPath){
4122:   return ORIGVFS(pVfs)->xDlOpen(ORIGVFS(pVfs), zPath);
4123: }
4124: static void apndDlError(sqlite3_vfs *pVfs, int nByte, char *zErrMsg){
4125:   ORIGVFS(pVfs)->xDlError(ORIGVFS(pVfs), nByte, zErrMsg);
4126: }
4127: static void (*apndDlSym(sqlite3_vfs *pVfs, void *p, const char *zSym))(void){
4128:   return ORIGVFS(pVfs)->xDlSym(ORIGVFS(pVfs), p, zSym);
4129: }
4130: static void apndDlClose(sqlite3_vfs *pVfs, void *pHandle){
4131:   ORIGVFS(pVfs)->xDlClose(ORIGVFS(pVfs), pHandle);
4132: }
4133: static int apndRandomness(sqlite3_vfs *pVfs, int nByte, char *zBufOut){
4134:   return ORIGVFS(pVfs)->xRandomness(ORIGVFS(pVfs), nByte, zBufOut);
4135: }
4136: static int apndSleep(sqlite3_vfs *pVfs, int nMicro){
4137:   return ORIGVFS(pVfs)->xSleep(ORIGVFS(pVfs), nMicro);
4138: }
4139: static int apndCurrentTime(sqlite3_vfs *pVfs, double *pTimeOut){
4140:   return ORIGVFS(pVfs)->xCurrentTime(ORIGVFS(pVfs), pTimeOut);
4141: }
4142: static int apndGetLastError(sqlite3_vfs *pVfs, int a, char *b){
4143:   return ORIGVFS(pVfs)->xGetLastError(ORIGVFS(pVfs), a, b);
4144: }
4145: static int apndCurrentTimeInt64(sqlite3_vfs *pVfs, sqlite3_int64 *p){
4146:   return ORIGVFS(pVfs)->xCurrentTimeInt64(ORIGVFS(pVfs), p);
4147: }
4148: static int apndSetSystemCall(
4149:   sqlite3_vfs *pVfs,
4150:   const char *zName,
4151:   sqlite3_syscall_ptr pCall
4152: ){
4153:   return ORIGVFS(pVfs)->xSetSystemCall(ORIGVFS(pVfs),zName,pCall);
4154: }
4155: static sqlite3_syscall_ptr apndGetSystemCall(
4156:   sqlite3_vfs *pVfs,
4157:   const char *zName
4158: ){
4159:   return ORIGVFS(pVfs)->xGetSystemCall(ORIGVFS(pVfs),zName);
4160: }
4161: static const char *apndNextSystemCall(sqlite3_vfs *pVfs, const char *zName){
4162:   return ORIGVFS(pVfs)->xNextSystemCall(ORIGVFS(pVfs), zName);
4163: }
4164: 
4165: 
4166: #ifdef _WIN32
4167: 
4168: #endif
4169: /*
4170: ** This routine is called when the extension is loaded.
4171: ** Register the new VFS.
4172: */
4173: int sqlite3_appendvfs_init(
4174:   sqlite3 *db,
4175:   char **pzErrMsg,
4176:   const sqlite3_api_routines *pApi
4177: ){
4178:   int rc = SQLITE_OK;
4179:   sqlite3_vfs *pOrig;
4180:   SQLITE_EXTENSION_INIT2(pApi);
4181:   (void)pzErrMsg;
4182:   (void)db;
4183:   pOrig = sqlite3_vfs_find(0);
4184:   apnd_vfs.iVersion = pOrig->iVersion;
4185:   apnd_vfs.pAppData = pOrig;
4186:   apnd_vfs.szOsFile = pOrig->szOsFile + sizeof(ApndFile);
4187:   rc = sqlite3_vfs_register(&apnd_vfs, 0);
4188: #ifdef APPENDVFS_TEST
4189:   if( rc==SQLITE_OK ){
4190:     rc = sqlite3_auto_extension((void(*)(void))apndvfsRegister);
4191:   }
4192: #endif
4193:   if( rc==SQLITE_OK ) rc = SQLITE_OK_LOAD_PERMANENTLY;
4194:   return rc;
4195: }
4196: 
4197: /************************* End ../ext/misc/appendvfs.c ********************/
4198: /************************* Begin ../ext/misc/memtrace.c ******************/
4199: /*
4200: ** 2019-01-21
4201: **
4202: ** The author disclaims copyright to this source code.  In place of
4203: ** a legal notice, here is a blessing:
4204: **
4205: **    May you do good and not evil.
4206: **    May you find forgiveness for yourself and forgive others.
4207: **    May you share freely, never taking more than you give.
4208: **
4209: *************************************************************************
4210: **
4211: ** This file implements an extension that uses the SQLITE_CONFIG_MALLOC
4212: ** mechanism to add a tracing layer on top of SQLite.  If this extension
4213: ** is registered prior to sqlite3_initialize(), it will cause all memory
4214: ** allocation activities to be logged on standard output, or to some other
4215: ** FILE specified by the initializer.
4216: **
4217: ** This file needs to be compiled into the application that uses it.
4218: **
4219: ** This extension is used to implement the --memtrace option of the
4220: ** command-line shell.
4221: */
4222: #include <assert.h>
4223: #include <string.h>
4224: #include <stdio.h>
4225: 
4226: /* The original memory allocation routines */
4227: static sqlite3_mem_methods memtraceBase;
4228: static FILE *memtraceOut;
4229: 
4230: /* Methods that trace memory allocations */
4231: static void *memtraceMalloc(int n){
4232:   if( memtraceOut ){
4233:     fprintf(memtraceOut, "MEMTRACE: allocate %d bytes\n",
4234:             memtraceBase.xRoundup(n));
4235:   }
4236:   return memtraceBase.xMalloc(n);
4237: }
4238: static void memtraceFree(void *p){
4239:   if( p==0 ) return;
4240:   if( memtraceOut ){
4241:     fprintf(memtraceOut, "MEMTRACE: free %d bytes\n", memtraceBase.xSize(p));
4242:   }
4243:   memtraceBase.xFree(p);
4244: }
4245: static void *memtraceRealloc(void *p, int n){
4246:   if( p==0 ) return memtraceMalloc(n);
4247:   if( n==0 ){
4248:     memtraceFree(p);
4249:     return 0;
4250:   }
4251:   if( memtraceOut ){
4252:     fprintf(memtraceOut, "MEMTRACE: resize %d -> %d bytes\n",
4253:             memtraceBase.xSize(p), memtraceBase.xRoundup(n));
4254:   }
4255:   return memtraceBase.xRealloc(p, n);
4256: }
4257: static int memtraceSize(void *p){
4258:   return memtraceBase.xSize(p);
4259: }
4260: static int memtraceRoundup(int n){
4261:   return memtraceBase.xRoundup(n);
4262: }
4263: static int memtraceInit(void *p){
4264:   return memtraceBase.xInit(p);
4265: }
4266: static void memtraceShutdown(void *p){
4267:   memtraceBase.xShutdown(p);
4268: }
4269: 
4270: /* The substitute memory allocator */
4271: static sqlite3_mem_methods ersaztMethods = {
4272:   memtraceMalloc,
4273:   memtraceFree,
4274:   memtraceRealloc,
4275:   memtraceSize,
4276:   memtraceRoundup,
4277:   memtraceInit,
4278:   memtraceShutdown,
4279:   0
4280: };
4281: 
4282: /* Begin tracing memory allocations to out. */
4283: int sqlite3MemTraceActivate(FILE *out){
4284:   int rc = SQLITE_OK;
4285:   if( memtraceBase.xMalloc==0 ){
4286:     rc = sqlite3_config(SQLITE_CONFIG_GETMALLOC, &memtraceBase);
4287:     if( rc==SQLITE_OK ){
4288:       rc = sqlite3_config(SQLITE_CONFIG_MALLOC, &ersaztMethods);
4289:     }
4290:   }
4291:   memtraceOut = out;
4292:   return rc;
4293: }
4294: 
4295: /* Deactivate memory tracing */
4296: int sqlite3MemTraceDeactivate(void){
4297:   int rc = SQLITE_OK;
4298:   if( memtraceBase.xMalloc!=0 ){
4299:     rc = sqlite3_config(SQLITE_CONFIG_MALLOC, &memtraceBase);
4300:     if( rc==SQLITE_OK ){
4301:       memset(&memtraceBase, 0, sizeof(memtraceBase));
4302:     }
4303:   }
4304:   memtraceOut = 0;
4305:   return rc;
4306: }
4307: 
4308: /************************* End ../ext/misc/memtrace.c ********************/
4309: /************************* Begin ../ext/misc/uint.c ******************/
4310: /*
4311: ** 2020-04-14
4312: **
4313: ** The author disclaims copyright to this source code.  In place of
4314: ** a legal notice, here is a blessing:
4315: **
4316: **    May you do good and not evil.
4317: **    May you find forgiveness for yourself and forgive others.
4318: **    May you share freely, never taking more than you give.
4319: **
4320: ******************************************************************************
4321: **
4322: ** This SQLite extension implements the UINT collating sequence.
4323: **
4324: ** UINT works like BINARY for text, except that embedded strings
4325: ** of digits compare in numeric order.
4326: **
4327: **     *   Leading zeros are handled properly, in the sense that
4328: **         they do not mess of the maginitude comparison of embedded
4329: **         strings of digits.  "x00123y" is equal to "x123y".
4330: **
4331: **     *   Only unsigned integers are recognized.  Plus and minus
4332: **         signs are ignored.  Decimal points and exponential notation
4333: **         are ignored.
4334: **
4335: **     *   Embedded integers can be of arbitrary length.  Comparison
4336: **         is *not* limited integers that can be expressed as a
4337: **         64-bit machine integer.
4338: */
4339: /* #include "sqlite3ext.h" */
4340: SQLITE_EXTENSION_INIT1
4341: #include <assert.h>
4342: #include <string.h>
4343: #include <ctype.h>
4344: 
4345: /*
4346: ** Compare text in lexicographic order, except strings of digits
4347: ** compare in numeric order.
4348: */
4349: static int uintCollFunc(
4350:   void *notUsed,
4351:   int nKey1, const void *pKey1,
4352:   int nKey2, const void *pKey2
4353: ){
4354:   const unsigned char *zA = (const unsigned char*)pKey1;
4355:   const unsigned char *zB = (const unsigned char*)pKey2;
4356:   int i=0, j=0, x;
4357:   (void)notUsed;
4358:   while( i<nKey1 && j<nKey2 ){
4359:     x = zA[i] - zB[j];
4360:     if( isdigit(zA[i]) ){
4361:       int k;
4362:       if( !isdigit(zB[j]) ) return x;
4363:       while( i<nKey1 && zA[i]=='0' ){ i++; }
4364:       while( j<nKey2 && zB[j]=='0' ){ j++; }
4365:       k = 0;
4366:       while( i+k<nKey1 && isdigit(zA[i+k])
4367:              && j+k<nKey2 && isdigit(zB[j+k]) ){
4368:         k++;
4369:       }
4370:       if( i+k<nKey1 && isdigit(zA[i+k]) ){
4371:         return +1;
4372:       }else if( j+k<nKey2 && isdigit(zB[j+k]) ){
4373:         return -1;
4374:       }else{
4375:         x = memcmp(zA+i, zB+j, k);
4376:         if( x ) return x;
4377:         i += k;
4378:         j += k;
4379:       }
4380:     }else if( x ){
4381:       return x;
4382:     }else{
4383:       i++;
4384:       j++;
4385:     }
4386:   }
4387:   return (nKey1 - i) - (nKey2 - j);
4388: }
4389: 
4390: #ifdef _WIN32
4391: 
4392: #endif
4393: int sqlite3_uint_init(
4394:   sqlite3 *db,
4395:   char **pzErrMsg,
4396:   const sqlite3_api_routines *pApi
4397: ){
4398:   SQLITE_EXTENSION_INIT2(pApi);
4399:   (void)pzErrMsg;  /* Unused parameter */
4400:   return sqlite3_create_collation(db, "uint", SQLITE_UTF8, 0, uintCollFunc);
4401: }
4402: 
4403: /************************* End ../ext/misc/uint.c ********************/
4404: /************************* Begin ../ext/misc/decimal.c ******************/
4405: /*
4406: ** 2020-06-22
4407: **
4408: ** The author disclaims copyright to this source code.  In place of
4409: ** a legal notice, here is a blessing:
4410: **
4411: **    May you do good and not evil.
4412: **    May you find forgiveness for yourself and forgive others.
4413: **    May you share freely, never taking more than you give.
4414: **
4415: ******************************************************************************
4416: **
4417: ** Routines to implement arbitrary-precision decimal math.
4418: **
4419: ** The focus here is on simplicity and correctness, not performance.
4420: */
4421: /* #include "sqlite3ext.h" */
4422: SQLITE_EXTENSION_INIT1
4423: #include <assert.h>
4424: #include <string.h>
4425: #include <ctype.h>
4426: #include <stdlib.h>
4427: 
4428: /* Mark a function parameter as unused, to suppress nuisance compiler
4429: ** warnings. */
4430: #ifndef UNUSED_PARAMETER
4431: # define UNUSED_PARAMETER(X)  (void)(X)
4432: #endif
4433: 
4434: 
4435: /* A decimal object */
4436: typedef struct Decimal Decimal;
4437: struct Decimal {
4438:   char sign;        /* 0 for positive, 1 for negative */
4439:   char oom;         /* True if an OOM is encountered */
4440:   char isNull;      /* True if holds a NULL rather than a number */
4441:   char isInit;      /* True upon initialization */
4442:   int nDigit;       /* Total number of digits */
4443:   int nFrac;        /* Number of digits to the right of the decimal point */
4444:   signed char *a;   /* Array of digits.  Most significant first. */
4445: };
4446: 
4447: /*
4448: ** Release memory held by a Decimal, but do not free the object itself.
4449: */
4450: static void decimal_clear(Decimal *p){
4451:   sqlite3_free(p->a);
4452: }
4453: 
4454: /*
4455: ** Destroy a Decimal object
4456: */
4457: static void decimal_free(Decimal *p){
4458:   if( p ){
4459:     decimal_clear(p);
4460:     sqlite3_free(p);
4461:   }
4462: }
4463: 
4464: /*
4465: ** Allocate a new Decimal object.  Initialize it to the number given
4466: ** by the input string.
4467: */
4468: static Decimal *decimal_new(
4469:   sqlite3_context *pCtx,
4470:   sqlite3_value *pIn,
4471:   int nAlt,
4472:   const unsigned char *zAlt
4473: ){
4474:   Decimal *p;
4475:   int n, i;
4476:   const unsigned char *zIn;
4477:   int iExp = 0;
4478:   p = sqlite3_malloc( sizeof(*p) );
4479:   if( p==0 ) goto new_no_mem;
4480:   p->sign = 0;
4481:   p->oom = 0;
4482:   p->isInit = 1;
4483:   p->isNull = 0;
4484:   p->nDigit = 0;
4485:   p->nFrac = 0;
4486:   if( zAlt ){
4487:     n = nAlt,
4488:     zIn = zAlt;
4489:   }else{
4490:     if( sqlite3_value_type(pIn)==SQLITE_NULL ){
4491:       p->a = 0;
4492:       p->isNull = 1;
4493:       return p;
4494:     }
4495:     n = sqlite3_value_bytes(pIn);
4496:     zIn = sqlite3_value_text(pIn);
4497:   }
4498:   p->a = sqlite3_malloc64( n+1 );
4499:   if( p->a==0 ) goto new_no_mem;
4500:   for(i=0; isspace(zIn[i]); i++){}
4501:   if( zIn[i]=='-' ){
4502:     p->sign = 1;
4503:     i++;
4504:   }else if( zIn[i]=='+' ){
4505:     i++;
4506:   }
4507:   while( i<n && zIn[i]=='0' ) i++;
4508:   while( i<n ){
4509:     char c = zIn[i];
4510:     if( c>='0' && c<='9' ){
4511:       p->a[p->nDigit++] = c - '0';
4512:     }else if( c=='.' ){
4513:       p->nFrac = p->nDigit + 1;
4514:     }else if( c=='e' || c=='E' ){
4515:       int j = i+1;
4516:       int neg = 0;
4517:       if( j>=n ) break;
4518:       if( zIn[j]=='-' ){
4519:         neg = 1;
4520:         j++;
4521:       }else if( zIn[j]=='+' ){
4522:         j++;
4523:       }
4524:       while( j<n && iExp<1000000 ){
4525:         if( zIn[j]>='0' && zIn[j]<='9' ){
4526:           iExp = iExp*10 + zIn[j] - '0';
4527:         }
4528:         j++;
4529:       }
4530:       if( neg ) iExp = -iExp;
4531:       break;
4532:     }
4533:     i++;
4534:   }
4535:   if( p->nFrac ){
4536:     p->nFrac = p->nDigit - (p->nFrac - 1);
4537:   }
4538:   if( iExp>0 ){
4539:     if( p->nFrac>0 ){
4540:       if( iExp<=p->nFrac ){
4541:         p->nFrac -= iExp;
4542:         iExp = 0;
4543:       }else{
4544:         iExp -= p->nFrac;
4545:         p->nFrac = 0;
4546:       }
4547:     }
4548:     if( iExp>0 ){
4549:       p->a = sqlite3_realloc64(p->a, p->nDigit + iExp + 1 );
4550:       if( p->a==0 ) goto new_no_mem;
4551:       memset(p->a+p->nDigit, 0, iExp);
4552:       p->nDigit += iExp;
4553:     }
4554:   }else if( iExp<0 ){
4555:     int nExtra;
4556:     iExp = -iExp;
4557:     nExtra = p->nDigit - p->nFrac - 1;
4558:     if( nExtra ){
4559:       if( nExtra>=iExp ){
4560:         p->nFrac += iExp;
4561:         iExp  = 0;
4562:       }else{
4563:         iExp -= nExtra;
4564:         p->nFrac = p->nDigit - 1;
4565:       }
4566:     }
4567:     if( iExp>0 ){
4568:       p->a = sqlite3_realloc64(p->a, p->nDigit + iExp + 1 );
4569:       if( p->a==0 ) goto new_no_mem;
4570:       memmove(p->a+iExp, p->a, p->nDigit);
4571:       memset(p->a, 0, iExp);
4572:       p->nDigit += iExp;
4573:       p->nFrac += iExp;
4574:     }
4575:   }
4576:   return p;
4577: 
4578: new_no_mem:
4579:   if( pCtx ) sqlite3_result_error_nomem(pCtx);
4580:   sqlite3_free(p);
4581:   return 0;
4582: }
4583: 
4584: /*
4585: ** Make the given Decimal the result.
4586: */
4587: static void decimal_result(sqlite3_context *pCtx, Decimal *p){
4588:   char *z;
4589:   int i, j;
4590:   int n;
4591:   if( p==0 || p->oom ){
4592:     sqlite3_result_error_nomem(pCtx);
4593:     return;
4594:   }
4595:   if( p->isNull ){
4596:     sqlite3_result_null(pCtx);
4597:     return;
4598:   }
4599:   z = sqlite3_malloc( p->nDigit+4 );
4600:   if( z==0 ){
4601:     sqlite3_result_error_nomem(pCtx);
4602:     return;
4603:   }
4604:   i = 0;
4605:   if( p->nDigit==0 || (p->nDigit==1 && p->a[0]==0) ){
4606:     p->sign = 0;
4607:   }
4608:   if( p->sign ){
4609:     z[0] = '-';
4610:     i = 1;
4611:   }
4612:   n = p->nDigit - p->nFrac;
4613:   if( n<=0 ){
4614:     z[i++] = '0';
4615:   }
4616:   j = 0;
4617:   while( n>1 && p->a[j]==0 ){
4618:     j++;
4619:     n--;
4620:   }
4621:   while( n>0  ){
4622:     z[i++] = p->a[j] + '0';
4623:     j++;
4624:     n--;
4625:   }
4626:   if( p->nFrac ){
4627:     z[i++] = '.';
4628:     do{
4629:       z[i++] = p->a[j] + '0';
4630:       j++;
4631:     }while( j<p->nDigit );
4632:   }
4633:   z[i] = 0;
4634:   sqlite3_result_text(pCtx, z, i, sqlite3_free);
4635: }
4636: 
4637: /*
4638: ** SQL Function:   decimal(X)
4639: **
4640: ** Convert input X into decimal and then back into text
4641: */
4642: static void decimalFunc(
4643:   sqlite3_context *context,
4644:   int argc,
4645:   sqlite3_value **argv
4646: ){
4647:   Decimal *p = decimal_new(context, argv[0], 0, 0);
4648:   UNUSED_PARAMETER(argc);
4649:   decimal_result(context, p);
4650:   decimal_free(p);
4651: }
4652: 
4653: /*
4654: ** Compare to Decimal objects.  Return negative, 0, or positive if the
4655: ** first object is less than, equal to, or greater than the second.
4656: **
4657: ** Preconditions for this routine:
4658: **
4659: **    pA!=0
4660: **    pA->isNull==0
4661: **    pB!=0
4662: **    pB->isNull==0
4663: */
4664: static int decimal_cmp(const Decimal *pA, const Decimal *pB){
4665:   int nASig, nBSig, rc, n;
4666:   if( pA->sign!=pB->sign ){
4667:     return pA->sign ? -1 : +1;
4668:   }
4669:   if( pA->sign ){
4670:     const Decimal *pTemp = pA;
4671:     pA = pB;
4672:     pB = pTemp;
4673:   }
4674:   nASig = pA->nDigit - pA->nFrac;
4675:   nBSig = pB->nDigit - pB->nFrac;
4676:   if( nASig!=nBSig ){
4677:     return nASig - nBSig;
4678:   }
4679:   n = pA->nDigit;
4680:   if( n>pB->nDigit ) n = pB->nDigit;
4681:   rc = memcmp(pA->a, pB->a, n);
4682:   if( rc==0 ){
4683:     rc = pA->nDigit - pB->nDigit;
4684:   }
4685:   return rc;
4686: }
4687: 
4688: /*
4689: ** SQL Function:   decimal_cmp(X, Y)
4690: **
4691: ** Return negative, zero, or positive if X is less then, equal to, or
4692: ** greater than Y.
4693: */
4694: static void decimalCmpFunc(
4695:   sqlite3_context *context,
4696:   int argc,
4697:   sqlite3_value **argv
4698: ){
4699:   Decimal *pA = 0, *pB = 0;
4700:   int rc;
4701: 
4702:   UNUSED_PARAMETER(argc);
4703:   pA = decimal_new(context, argv[0], 0, 0);
4704:   if( pA==0 || pA->isNull ) goto cmp_done;
4705:   pB = decimal_new(context, argv[1], 0, 0);
4706:   if( pB==0 || pB->isNull ) goto cmp_done;
4707:   rc = decimal_cmp(pA, pB);
4708:   if( rc<0 ) rc = -1;
4709:   else if( rc>0 ) rc = +1;
4710:   sqlite3_result_int(context, rc);
4711: cmp_done:
4712:   decimal_free(pA);
4713:   decimal_free(pB);
4714: }
4715: 
4716: /*
4717: ** Expand the Decimal so that it has a least nDigit digits and nFrac
4718: ** digits to the right of the decimal point.
4719: */
4720: static void decimal_expand(Decimal *p, int nDigit, int nFrac){
4721:   int nAddSig;
4722:   int nAddFrac;
4723:   if( p==0 ) return;
4724:   nAddFrac = nFrac - p->nFrac;
4725:   nAddSig = (nDigit - p->nDigit) - nAddFrac;
4726:   if( nAddFrac==0 && nAddSig==0 ) return;
4727:   p->a = sqlite3_realloc64(p->a, nDigit+1);
4728:   if( p->a==0 ){
4729:     p->oom = 1;
4730:     return;
4731:   }
4732:   if( nAddSig ){
4733:     memmove(p->a+nAddSig, p->a, p->nDigit);
4734:     memset(p->a, 0, nAddSig);
4735:     p->nDigit += nAddSig;
4736:   }
4737:   if( nAddFrac ){
4738:     memset(p->a+p->nDigit, 0, nAddFrac);
4739:     p->nDigit += nAddFrac;
4740:     p->nFrac += nAddFrac;
4741:   }
4742: }
4743: 
4744: /*
4745: ** Add the value pB into pA.
4746: **
4747: ** Both pA and pB might become denormalized by this routine.
4748: */
4749: static void decimal_add(Decimal *pA, Decimal *pB){
4750:   int nSig, nFrac, nDigit;
4751:   int i, rc;
4752:   if( pA==0 ){
4753:     return;
4754:   }
4755:   if( pA->oom || pB==0 || pB->oom ){
4756:     pA->oom = 1;
4757:     return;
4758:   }
4759:   if( pA->isNull || pB->isNull ){
4760:     pA->isNull = 1;
4761:     return;
4762:   }
4763:   nSig = pA->nDigit - pA->nFrac;
4764:   if( nSig && pA->a[0]==0 ) nSig--;
4765:   if( nSig<pB->nDigit-pB->nFrac ){
4766:     nSig = pB->nDigit - pB->nFrac;
4767:   }
4768:   nFrac = pA->nFrac;
4769:   if( nFrac<pB->nFrac ) nFrac = pB->nFrac;
4770:   nDigit = nSig + nFrac + 1;
4771:   decimal_expand(pA, nDigit, nFrac);
4772:   decimal_expand(pB, nDigit, nFrac);
4773:   if( pA->oom || pB->oom ){
4774:     pA->oom = 1;
4775:   }else{
4776:     if( pA->sign==pB->sign ){
4777:       int carry = 0;
4778:       for(i=nDigit-1; i>=0; i--){
4779:         int x = pA->a[i] + pB->a[i] + carry;
4780:         if( x>=10 ){
4781:           carry = 1;
4782:           pA->a[i] = x - 10;
4783:         }else{
4784:           carry = 0;
4785:           pA->a[i] = x;
4786:         }
4787:       }
4788:     }else{
4789:       signed char *aA, *aB;
4790:       int borrow = 0;
4791:       rc = memcmp(pA->a, pB->a, nDigit);
4792:       if( rc<0 ){
4793:         aA = pB->a;
4794:         aB = pA->a;
4795:         pA->sign = !pA->sign;
4796:       }else{
4797:         aA = pA->a;
4798:         aB = pB->a;
4799:       }
4800:       for(i=nDigit-1; i>=0; i--){
4801:         int x = aA[i] - aB[i] - borrow;
4802:         if( x<0 ){
4803:           pA->a[i] = x+10;
4804:           borrow = 1;
4805:         }else{
4806:           pA->a[i] = x;
4807:           borrow = 0;
4808:         }
4809:       }
4810:     }
4811:   }
4812: }
4813: 
4814: /*
4815: ** Compare text in decimal order.
4816: */
4817: static int decimalCollFunc(
4818:   void *notUsed,
4819:   int nKey1, const void *pKey1,
4820:   int nKey2, const void *pKey2
4821: ){
4822:   const unsigned char *zA = (const unsigned char*)pKey1;
4823:   const unsigned char *zB = (const unsigned char*)pKey2;
4824:   Decimal *pA = decimal_new(0, 0, nKey1, zA);
4825:   Decimal *pB = decimal_new(0, 0, nKey2, zB);
4826:   int rc;
4827:   UNUSED_PARAMETER(notUsed);
4828:   if( pA==0 || pB==0 ){
4829:     rc = 0;
4830:   }else{
4831:     rc = decimal_cmp(pA, pB);
4832:   }
4833:   decimal_free(pA);
4834:   decimal_free(pB);
4835:   return rc;
4836: }
4837: 
4838: 
4839: /*
4840: ** SQL Function:   decimal_add(X, Y)
4841: **                 decimal_sub(X, Y)
4842: **
4843: ** Return the sum or difference of X and Y.
4844: */
4845: static void decimalAddFunc(
4846:   sqlite3_context *context,
4847:   int argc,
4848:   sqlite3_value **argv
4849: ){
4850:   Decimal *pA = decimal_new(context, argv[0], 0, 0);
4851:   Decimal *pB = decimal_new(context, argv[1], 0, 0);
4852:   UNUSED_PARAMETER(argc);
4853:   decimal_add(pA, pB);
4854:   decimal_result(context, pA);
4855:   decimal_free(pA);
4856:   decimal_free(pB);
4857: }
4858: static void decimalSubFunc(
4859:   sqlite3_context *context,
4860:   int argc,
4861:   sqlite3_value **argv
4862: ){
4863:   Decimal *pA = decimal_new(context, argv[0], 0, 0);
4864:   Decimal *pB = decimal_new(context, argv[1], 0, 0);
4865:   UNUSED_PARAMETER(argc);
4866:   if( pB==0 ) return;
4867:   pB->sign = !pB->sign;
4868:   decimal_add(pA, pB);
4869:   decimal_result(context, pA);
4870:   decimal_free(pA);
4871:   decimal_free(pB);
4872: }
4873: 
4874: /* Aggregate funcion:   decimal_sum(X)
4875: **
4876: ** Works like sum() except that it uses decimal arithmetic for unlimited
4877: ** precision.
4878: */
4879: static void decimalSumStep(
4880:   sqlite3_context *context,
4881:   int argc,
4882:   sqlite3_value **argv
4883: ){
4884:   Decimal *p;
4885:   Decimal *pArg;
4886:   UNUSED_PARAMETER(argc);
4887:   p = sqlite3_aggregate_context(context, sizeof(*p));
4888:   if( p==0 ) return;
4889:   if( !p->isInit ){
4890:     p->isInit = 1;
4891:     p->a = sqlite3_malloc(2);
4892:     if( p->a==0 ){
4893:       p->oom = 1;
4894:     }else{
4895:       p->a[0] = 0;
4896:     }
4897:     p->nDigit = 1;
4898:     p->nFrac = 0;
4899:   }
4900:   if( sqlite3_value_type(argv[0])==SQLITE_NULL ) return;
4901:   pArg = decimal_new(context, argv[0], 0, 0);
4902:   decimal_add(p, pArg);
4903:   decimal_free(pArg);
4904: }
4905: static void decimalSumInverse(
4906:   sqlite3_context *context,
4907:   int argc,
4908:   sqlite3_value **argv
4909: ){
4910:   Decimal *p;
4911:   Decimal *pArg;
4912:   UNUSED_PARAMETER(argc);
4913:   p = sqlite3_aggregate_context(context, sizeof(*p));
4914:   if( p==0 ) return;
4915:   if( sqlite3_value_type(argv[0])==SQLITE_NULL ) return;
4916:   pArg = decimal_new(context, argv[0], 0, 0);
4917:   if( pArg ) pArg->sign = !pArg->sign;
4918:   decimal_add(p, pArg);
4919:   decimal_free(pArg);
4920: }
4921: static void decimalSumValue(sqlite3_context *context){
4922:   Decimal *p = sqlite3_aggregate_context(context, 0);
4923:   if( p==0 ) return;
4924:   decimal_result(context, p);
4925: }
4926: static void decimalSumFinalize(sqlite3_context *context){
4927:   Decimal *p = sqlite3_aggregate_context(context, 0);
4928:   if( p==0 ) return;
4929:   decimal_result(context, p);
4930:   decimal_clear(p);
4931: }
4932: 
4933: /*
4934: ** SQL Function:   decimal_mul(X, Y)
4935: **
4936: ** Return the product of X and Y.
4937: **
4938: ** All significant digits after the decimal point are retained.
4939: ** Trailing zeros after the decimal point are omitted as long as
4940: ** the number of digits after the decimal point is no less than
4941: ** either the number of digits in either input.
4942: */
4943: static void decimalMulFunc(
4944:   sqlite3_context *context,
4945:   int argc,
4946:   sqlite3_value **argv
4947: ){
4948:   Decimal *pA = decimal_new(context, argv[0], 0, 0);
4949:   Decimal *pB = decimal_new(context, argv[1], 0, 0);
4950:   signed char *acc = 0;
4951:   int i, j, k;
4952:   int minFrac;
4953:   UNUSED_PARAMETER(argc);
4954:   if( pA==0 || pA->oom || pA->isNull
4955:    || pB==0 || pB->oom || pB->isNull
4956:   ){
4957:     goto mul_end;
4958:   }
4959:   acc = sqlite3_malloc64( pA->nDigit + pB->nDigit + 2 );
4960:   if( acc==0 ){
4961:     sqlite3_result_error_nomem(context);
4962:     goto mul_end;
4963:   }
4964:   memset(acc, 0, pA->nDigit + pB->nDigit + 2);
4965:   minFrac = pA->nFrac;
4966:   if( pB->nFrac<minFrac ) minFrac = pB->nFrac;
4967:   for(i=pA->nDigit-1; i>=0; i--){
4968:     signed char f = pA->a[i];
4969:     int carry = 0, x;
4970:     for(j=pB->nDigit-1, k=i+j+3; j>=0; j--, k--){
4971:       x = acc[k] + f*pB->a[j] + carry;
4972:       acc[k] = x%10;
4973:       carry = x/10;
4974:     }
4975:     x = acc[k] + carry;
4976:     acc[k] = x%10;
4977:     acc[k-1] += x/10;
4978:   }
4979:   sqlite3_free(pA->a);
4980:   pA->a = acc;
4981:   acc = 0;
4982:   pA->nDigit += pB->nDigit + 2;
4983:   pA->nFrac += pB->nFrac;
4984:   pA->sign ^= pB->sign;
4985:   while( pA->nFrac>minFrac && pA->a[pA->nDigit-1]==0 ){
4986:     pA->nFrac--;
4987:     pA->nDigit--;
4988:   }
4989:   decimal_result(context, pA);
4990: 
4991: mul_end:
4992:   sqlite3_free(acc);
4993:   decimal_free(pA);
4994:   decimal_free(pB);
4995: }
4996: 
4997: #ifdef _WIN32
4998: 
4999: #endif
5000: int sqlite3_decimal_init(
5001:   sqlite3 *db,
5002:   char **pzErrMsg,
5003:   const sqlite3_api_routines *pApi
5004: ){
5005:   int rc = SQLITE_OK;
5006:   static const struct {
5007:     const char *zFuncName;
5008:     int nArg;
5009:     void (*xFunc)(sqlite3_context*,int,sqlite3_value**);
5010:   } aFunc[] = {
5011:     { "decimal",       1,   decimalFunc        },
5012:     { "decimal_cmp",   2,   decimalCmpFunc     },
5013:     { "decimal_add",   2,   decimalAddFunc     },
5014:     { "decimal_sub",   2,   decimalSubFunc     },
5015:     { "decimal_mul",   2,   decimalMulFunc     },
5016:   };
5017:   unsigned int i;
5018:   (void)pzErrMsg;  /* Unused parameter */
5019: 
5020:   SQLITE_EXTENSION_INIT2(pApi);
5021: 
5022:   for(i=0; i<sizeof(aFunc)/sizeof(aFunc[0]) && rc==SQLITE_OK; i++){
5023:     rc = sqlite3_create_function(db, aFunc[i].zFuncName, aFunc[i].nArg,
5024:                    SQLITE_UTF8|SQLITE_INNOCUOUS|SQLITE_DETERMINISTIC,
5025:                    0, aFunc[i].xFunc, 0, 0);
5026:   }
5027:   if( rc==SQLITE_OK ){
5028:     rc = sqlite3_create_window_function(db, "decimal_sum", 1,
5029:                    SQLITE_UTF8|SQLITE_INNOCUOUS|SQLITE_DETERMINISTIC, 0,
5030:                    decimalSumStep, decimalSumFinalize,
5031:                    decimalSumValue, decimalSumInverse, 0);
5032:   }
5033:   if( rc==SQLITE_OK ){
5034:     rc = sqlite3_create_collation(db, "decimal", SQLITE_UTF8,
5035:                                   0, decimalCollFunc);
5036:   }
5037:   return rc;
5038: }
5039: 
5040: /************************* End ../ext/misc/decimal.c ********************/
5041: /************************* Begin ../ext/misc/ieee754.c ******************/
5042: /*
5043: ** 2013-04-17
5044: **
5045: ** The author disclaims copyright to this source code.  In place of
5046: ** a legal notice, here is a blessing:
5047: **
5048: **    May you do good and not evil.
5049: **    May you find forgiveness for yourself and forgive others.
5050: **    May you share freely, never taking more than you give.
5051: **
5052: ******************************************************************************
5053: **
5054: ** This SQLite extension implements functions for the exact display
5055: ** and input of IEEE754 Binary64 floating-point numbers.
5056: **
5057: **   ieee754(X)
5058: **   ieee754(Y,Z)
5059: **
5060: ** In the first form, the value X should be a floating-point number.
5061: ** The function will return a string of the form 'ieee754(Y,Z)' where
5062: ** Y and Z are integers such that X==Y*pow(2,Z).
5063: **
5064: ** In the second form, Y and Z are integers which are the mantissa and
5065: ** base-2 exponent of a new floating point number.  The function returns
5066: ** a floating-point value equal to Y*pow(2,Z).
5067: **
5068: ** Examples:
5069: **
5070: **     ieee754(2.0)             ->     'ieee754(2,0)'
5071: **     ieee754(45.25)           ->     'ieee754(181,-2)'
5072: **     ieee754(2, 0)            ->     2.0
5073: **     ieee754(181, -2)         ->     45.25
5074: **
5075: ** Two additional functions break apart the one-argument ieee754()
5076: ** result into separate integer values:
5077: **
5078: **     ieee754_mantissa(45.25)  ->     181
5079: **     ieee754_exponent(45.25)  ->     -2
5080: **
5081: ** These functions convert binary64 numbers into blobs and back again.
5082: **
5083: **     ieee754_from_blob(x'3ff0000000000000')  ->  1.0
5084: **     ieee754_to_blob(1.0)                    ->  x'3ff0000000000000'
5085: **
5086: ** In all single-argument functions, if the argument is an 8-byte blob
5087: ** then that blob is interpreted as a big-endian binary64 value.
5088: **
5089: **
5090: ** EXACT DECIMAL REPRESENTATION OF BINARY64 VALUES
5091: ** -----------------------------------------------
5092: **
5093: ** This extension in combination with the separate 'decimal' extension
5094: ** can be used to compute the exact decimal representation of binary64
5095: ** values.  To begin, first compute a table of exponent values:
5096: **
5097: **    CREATE TABLE pow2(x INTEGER PRIMARY KEY, v TEXT);
5098: **    WITH RECURSIVE c(x,v) AS (
5099: **      VALUES(0,'1')
5100: **      UNION ALL
5101: **      SELECT x+1, decimal_mul(v,'2') FROM c WHERE x+1<=971
5102: **    ) INSERT INTO pow2(x,v) SELECT x, v FROM c;
5103: **    WITH RECURSIVE c(x,v) AS (
5104: **      VALUES(-1,'0.5')
5105: **      UNION ALL
5106: **      SELECT x-1, decimal_mul(v,'0.5') FROM c WHERE x-1>=-1075
5107: **    ) INSERT INTO pow2(x,v) SELECT x, v FROM c;
5108: **
5109: ** Then, to compute the exact decimal representation of a floating
5110: ** point value (the value 47.49 is used in the example) do:
5111: **
5112: **    WITH c(n) AS (VALUES(47.49))
5113: **          ---------------^^^^^---- Replace with whatever you want
5114: **    SELECT decimal_mul(ieee754_mantissa(c.n),pow2.v)
5115: **      FROM pow2, c WHERE pow2.x=ieee754_exponent(c.n);
5116: **
5117: ** Here is a query to show various boundry values for the binary64
5118: ** number format:
5119: **
5120: **    WITH c(name,bin) AS (VALUES
5121: **       ('minimum positive value',        x'0000000000000001'),
5122: **       ('maximum subnormal value',       x'000fffffffffffff'),
5123: **       ('mininum positive nornal value', x'0010000000000000'),
5124: **       ('maximum value',                 x'7fefffffffffffff'))
5125: **    SELECT c.name, decimal_mul(ieee754_mantissa(c.bin),pow2.v)
5126: **      FROM pow2, c WHERE pow2.x=ieee754_exponent(c.bin);
5127: **
5128: */
5129: /* #include "sqlite3ext.h" */
5130: SQLITE_EXTENSION_INIT1
5131: #include <assert.h>
5132: #include <string.h>
5133: 
5134: /* Mark a function parameter as unused, to suppress nuisance compiler
5135: ** warnings. */
5136: #ifndef UNUSED_PARAMETER
5137: # define UNUSED_PARAMETER(X)  (void)(X)
5138: #endif
5139: 
5140: /*
5141: ** Implementation of the ieee754() function
5142: */
5143: static void ieee754func(
5144:   sqlite3_context *context,
5145:   int argc,
5146:   sqlite3_value **argv
5147: ){
5148:   if( argc==1 ){
5149:     sqlite3_int64 m, a;
5150:     double r;
5151:     int e;
5152:     int isNeg;
5153:     char zResult[100];
5154:     assert( sizeof(m)==sizeof(r) );
5155:     if( sqlite3_value_type(argv[0])==SQLITE_BLOB
5156:      && sqlite3_value_bytes(argv[0])==sizeof(r)
5157:     ){
5158:       const unsigned char *x = sqlite3_value_blob(argv[0]);
5159:       unsigned int i;
5160:       sqlite3_uint64 v = 0;
5161:       for(i=0; i<sizeof(r); i++){
5162:         v = (v<<8) | x[i];
5163:       }
5164:       memcpy(&r, &v, sizeof(r));
5165:     }else{
5166:       r = sqlite3_value_double(argv[0]);
5167:     }
5168:     if( r<0.0 ){
5169:       isNeg = 1;
5170:       r = -r;
5171:     }else{
5172:       isNeg = 0;
5173:     }
5174:     memcpy(&a,&r,sizeof(a));
5175:     if( a==0 ){
5176:       e = 0;
5177:       m = 0;
5178:     }else{
5179:       e = a>>52;
5180:       m = a & ((((sqlite3_int64)1)<<52)-1);
5181:       if( e==0 ){
5182:         m <<= 1;
5183:       }else{
5184:         m |= ((sqlite3_int64)1)<<52;
5185:       }
5186:       while( e<1075 && m>0 && (m&1)==0 ){
5187:         m >>= 1;
5188:         e++;
5189:       }
5190:       if( isNeg ) m = -m;
5191:     }
5192:     switch( *(int*)sqlite3_user_data(context) ){
5193:       case 0:
5194:         sqlite3_snprintf(sizeof(zResult), zResult, "ieee754(%lld,%d)",
5195:                          m, e-1075);
5196:         sqlite3_result_text(context, zResult, -1, SQLITE_TRANSIENT);
5197:         break;
5198:       case 1:
5199:         sqlite3_result_int64(context, m);
5200:         break;
5201:       case 2:
5202:         sqlite3_result_int(context, e-1075);
5203:         break;
5204:     }
5205:   }else{
5206:     sqlite3_int64 m, e, a;
5207:     double r;
5208:     int isNeg = 0;
5209:     m = sqlite3_value_int64(argv[0]);
5210:     e = sqlite3_value_int64(argv[1]);
5211:     if( m<0 ){
5212:       isNeg = 1;
5213:       m = -m;
5214:       if( m<0 ) return;
5215:     }else if( m==0 && e>-1000 && e<1000 ){
5216:       sqlite3_result_double(context, 0.0);
5217:       return;
5218:     }
5219:     while( (m>>32)&0xffe00000 ){
5220:       m >>= 1;
5221:       e++;
5222:     }
5223:     while( m!=0 && ((m>>32)&0xfff00000)==0 ){
5224:       m <<= 1;
5225:       e--;
5226:     }
5227:     e += 1075;
5228:     if( e<=0 ){
5229:       /* Subnormal */
5230:       m >>= 1-e;
5231:       e = 0;
5232:     }else if( e>0x7ff ){
5233:       e = 0x7ff;
5234:     }
5235:     a = m & ((((sqlite3_int64)1)<<52)-1);
5236:     a |= e<<52;
5237:     if( isNeg ) a |= ((sqlite3_uint64)1)<<63;
5238:     memcpy(&r, &a, sizeof(r));
5239:     sqlite3_result_double(context, r);
5240:   }
5241: }
5242: 
5243: /*
5244: ** Functions to convert between blobs and floats.
5245: */
5246: static void ieee754func_from_blob(
5247:   sqlite3_context *context,
5248:   int argc,
5249:   sqlite3_value **argv
5250: ){
5251:   UNUSED_PARAMETER(argc);
5252:   if( sqlite3_value_type(argv[0])==SQLITE_BLOB
5253:    && sqlite3_value_bytes(argv[0])==sizeof(double)
5254:   ){
5255:     double r;
5256:     const unsigned char *x = sqlite3_value_blob(argv[0]);
5257:     unsigned int i;
5258:     sqlite3_uint64 v = 0;
5259:     for(i=0; i<sizeof(r); i++){
5260:       v = (v<<8) | x[i];
5261:     }
5262:     memcpy(&r, &v, sizeof(r));
5263:     sqlite3_result_double(context, r);
5264:   }
5265: }
5266: static void ieee754func_to_blob(
5267:   sqlite3_context *context,
5268:   int argc,
5269:   sqlite3_value **argv
5270: ){
5271:   UNUSED_PARAMETER(argc);
5272:   if( sqlite3_value_type(argv[0])==SQLITE_FLOAT
5273:    || sqlite3_value_type(argv[0])==SQLITE_INTEGER
5274:   ){
5275:     double r = sqlite3_value_double(argv[0]);
5276:     sqlite3_uint64 v;
5277:     unsigned char a[sizeof(r)];
5278:     unsigned int i;
5279:     memcpy(&v, &r, sizeof(r));
5280:     for(i=1; i<=sizeof(r); i++){
5281:       a[sizeof(r)-i] = v&0xff;
5282:       v >>= 8;
5283:     }
5284:     sqlite3_result_blob(context, a, sizeof(r), SQLITE_TRANSIENT);
5285:   }
5286: }
5287: 
5288: 
5289: #ifdef _WIN32
5290: 
5291: #endif
5292: int sqlite3_ieee_init(
5293:   sqlite3 *db,
5294:   char **pzErrMsg,
5295:   const sqlite3_api_routines *pApi
5296: ){
5297:   static const struct {
5298:     char *zFName;
5299:     int nArg;
5300:     int iAux;
5301:     void (*xFunc)(sqlite3_context*,int,sqlite3_value**);
5302:   } aFunc[] = {
5303:     { "ieee754",           1,   0, ieee754func },
5304:     { "ieee754",           2,   0, ieee754func },
5305:     { "ieee754_mantissa",  1,   1, ieee754func },
5306:     { "ieee754_exponent",  1,   2, ieee754func },
5307:     { "ieee754_to_blob",   1,   0, ieee754func_to_blob },
5308:     { "ieee754_from_blob", 1,   0, ieee754func_from_blob },
5309: 
5310:   };
5311:   unsigned int i;
5312:   int rc = SQLITE_OK;
5313:   SQLITE_EXTENSION_INIT2(pApi);
5314:   (void)pzErrMsg;  /* Unused parameter */
5315:   for(i=0; i<sizeof(aFunc)/sizeof(aFunc[0]) && rc==SQLITE_OK; i++){
5316:     rc = sqlite3_create_function(db, aFunc[i].zFName, aFunc[i].nArg,
5317:                                SQLITE_UTF8|SQLITE_INNOCUOUS,
5318:                                (void*)&aFunc[i].iAux,
5319:                                aFunc[i].xFunc, 0, 0);
5320:   }
5321:   return rc;
5322: }
5323: 
5324: /************************* End ../ext/misc/ieee754.c ********************/
5325: #ifdef SQLITE_HAVE_ZLIB
5326: /************************* Begin ../ext/misc/zipfile.c ******************/
5327: /*
5328: ** 2017-12-26
5329: **
5330: ** The author disclaims copyright to this source code.  In place of
5331: ** a legal notice, here is a blessing:
5332: **
5333: **    May you do good and not evil.
5334: **    May you find forgiveness for yourself and forgive others.
5335: **    May you share freely, never taking more than you give.
5336: **
5337: ******************************************************************************
5338: **
5339: ** This file implements a virtual table for reading and writing ZIP archive
5340: ** files.
5341: **
5342: ** Usage example:
5343: **
5344: **     SELECT name, sz, datetime(mtime,'unixepoch') FROM zipfile($filename);
5345: **
5346: ** Current limitations:
5347: **
5348: **    *  No support for encryption
5349: **    *  No support for ZIP archives spanning multiple files
5350: **    *  No support for zip64 extensions
5351: **    *  Only the "inflate/deflate" (zlib) compression method is supported
5352: */
5353: /* #include "sqlite3ext.h" */
5354: SQLITE_EXTENSION_INIT1
5355: #include <stdio.h>
5356: #include <string.h>
5357: #include <assert.h>
5358: 
5359: #include <zlib.h>
5360: 
5361: #ifndef SQLITE_OMIT_VIRTUALTABLE
5362: 
5363: #ifndef SQLITE_AMALGAMATION
5364: 
5365: /* typedef sqlite3_int64 i64; */
5366: /* typedef unsigned char u8; */
5367: typedef unsigned short u16;
5368: typedef unsigned long u32;
5369: #define MIN(a,b) ((a)<(b) ? (a) : (b))
5370: 
5371: #if defined(SQLITE_COVERAGE_TEST) || defined(SQLITE_MUTATION_TEST)
5372: # define ALWAYS(X)      (1)
5373: # define NEVER(X)       (0)
5374: #elif !defined(NDEBUG)
5375: # define ALWAYS(X)      ((X)?1:(assert(0),0))
5376: # define NEVER(X)       ((X)?(assert(0),1):0)
5377: #else
5378: # define ALWAYS(X)      (X)
5379: # define NEVER(X)       (X)
5380: #endif
5381: 
5382: #endif   /* SQLITE_AMALGAMATION */
5383: 
5384: /*
5385: ** Definitions for mode bitmasks S_IFDIR, S_IFREG and S_IFLNK.
5386: **
5387: ** In some ways it would be better to obtain these values from system
5388: ** header files. But, the dependency is undesirable and (a) these
5389: ** have been stable for decades, (b) the values are part of POSIX and
5390: ** are also made explicit in [man stat], and (c) are part of the
5391: ** file format for zip archives.
5392: */
5393: #ifndef S_IFDIR
5394: # define S_IFDIR 0040000
5395: #endif
5396: #ifndef S_IFREG
5397: # define S_IFREG 0100000
5398: #endif
5399: #ifndef S_IFLNK
5400: # define S_IFLNK 0120000
5401: #endif
5402: 
5403: static const char ZIPFILE_SCHEMA[] =
5404:   "CREATE TABLE y("
5405:     "name PRIMARY KEY,"  /* 0: Name of file in zip archive */
5406:     "mode,"              /* 1: POSIX mode for file */
5407:     "mtime,"             /* 2: Last modification time (secs since 1970)*/
5408:     "sz,"                /* 3: Size of object */
5409:     "rawdata,"           /* 4: Raw data */
5410:     "data,"              /* 5: Uncompressed data */
5411:     "method,"            /* 6: Compression method (integer) */
5412:     "z HIDDEN"           /* 7: Name of zip file */
5413:   ") WITHOUT ROWID;";
5414: 
5415: #define ZIPFILE_F_COLUMN_IDX 7    /* Index of column "file" in the above */
5416: #define ZIPFILE_BUFFER_SIZE (64*1024)
5417: 
5418: 
5419: /*
5420: ** Magic numbers used to read and write zip files.
5421: **
5422: ** ZIPFILE_NEWENTRY_MADEBY:
5423: **   Use this value for the "version-made-by" field in new zip file
5424: **   entries. The upper byte indicates "unix", and the lower byte
5425: **   indicates that the zip file matches pkzip specification 3.0.
5426: **   This is what info-zip seems to do.
5427: **
5428: ** ZIPFILE_NEWENTRY_REQUIRED:
5429: **   Value for "version-required-to-extract" field of new entries.
5430: **   Version 2.0 is required to support folders and deflate compression.
5431: **
5432: ** ZIPFILE_NEWENTRY_FLAGS:
5433: **   Value for "general-purpose-bit-flags" field of new entries. Bit
5434: **   11 means "utf-8 filename and comment".
5435: **
5436: ** ZIPFILE_SIGNATURE_CDS:
5437: **   First 4 bytes of a valid CDS record.
5438: **
5439: ** ZIPFILE_SIGNATURE_LFH:
5440: **   First 4 bytes of a valid LFH record.
5441: **
5442: ** ZIPFILE_SIGNATURE_EOCD
5443: **   First 4 bytes of a valid EOCD record.
5444: */
5445: #define ZIPFILE_EXTRA_TIMESTAMP   0x5455
5446: #define ZIPFILE_NEWENTRY_MADEBY   ((3<<8) + 30)
5447: #define ZIPFILE_NEWENTRY_REQUIRED 20
5448: #define ZIPFILE_NEWENTRY_FLAGS    0x800
5449: #define ZIPFILE_SIGNATURE_CDS     0x02014b50
5450: #define ZIPFILE_SIGNATURE_LFH     0x04034b50
5451: #define ZIPFILE_SIGNATURE_EOCD    0x06054b50
5452: 
5453: /*
5454: ** The sizes of the fixed-size part of each of the three main data
5455: ** structures in a zip archive.
5456: */
5457: #define ZIPFILE_LFH_FIXED_SZ      30
5458: #define ZIPFILE_EOCD_FIXED_SZ     22
5459: #define ZIPFILE_CDS_FIXED_SZ      46
5460: 
5461: /*
5462: *** 4.3.16  End of central directory record:
5463: ***
5464: ***   end of central dir signature    4 bytes  (0x06054b50)
5465: ***   number of this disk             2 bytes
5466: ***   number of the disk with the
5467: ***   start of the central directory  2 bytes
5468: ***   total number of entries in the
5469: ***   central directory on this disk  2 bytes
5470: ***   total number of entries in
5471: ***   the central directory           2 bytes
5472: ***   size of the central directory   4 bytes
5473: ***   offset of start of central
5474: ***   directory with respect to
5475: ***   the starting disk number        4 bytes
5476: ***   .ZIP file comment length        2 bytes
5477: ***   .ZIP file comment       (variable size)
5478: */
5479: typedef struct ZipfileEOCD ZipfileEOCD;
5480: struct ZipfileEOCD {
5481:   u16 iDisk;
5482:   u16 iFirstDisk;
5483:   u16 nEntry;
5484:   u16 nEntryTotal;
5485:   u32 nSize;
5486:   u32 iOffset;
5487: };
5488: 
5489: /*
5490: *** 4.3.12  Central directory structure:
5491: ***
5492: *** ...
5493: ***
5494: ***   central file header signature   4 bytes  (0x02014b50)
5495: ***   version made by                 2 bytes
5496: ***   version needed to extract       2 bytes
5497: ***   general purpose bit flag        2 bytes
5498: ***   compression method              2 bytes
5499: ***   last mod file time              2 bytes
5500: ***   last mod file date              2 bytes
5501: ***   crc-32                          4 bytes
5502: ***   compressed size                 4 bytes
5503: ***   uncompressed size               4 bytes
5504: ***   file name length                2 bytes
5505: ***   extra field length              2 bytes
5506: ***   file comment length             2 bytes
5507: ***   disk number start               2 bytes
5508: ***   internal file attributes        2 bytes
5509: ***   external file attributes        4 bytes
5510: ***   relative offset of local header 4 bytes
5511: */
5512: typedef struct ZipfileCDS ZipfileCDS;
5513: struct ZipfileCDS {
5514:   u16 iVersionMadeBy;
5515:   u16 iVersionExtract;
5516:   u16 flags;
5517:   u16 iCompression;
5518:   u16 mTime;
5519:   u16 mDate;
5520:   u32 crc32;
5521:   u32 szCompressed;
5522:   u32 szUncompressed;
5523:   u16 nFile;
5524:   u16 nExtra;
5525:   u16 nComment;
5526:   u16 iDiskStart;
5527:   u16 iInternalAttr;
5528:   u32 iExternalAttr;
5529:   u32 iOffset;
5530:   char *zFile;                    /* Filename (sqlite3_malloc()) */
5531: };
5532: 
5533: /*
5534: *** 4.3.7  Local file header:
5535: ***
5536: ***   local file header signature     4 bytes  (0x04034b50)
5537: ***   version needed to extract       2 bytes
5538: ***   general purpose bit flag        2 bytes
5539: ***   compression method              2 bytes
5540: ***   last mod file time              2 bytes
5541: ***   last mod file date              2 bytes
5542: ***   crc-32                          4 bytes
5543: ***   compressed size                 4 bytes
5544: ***   uncompressed size               4 bytes
5545: ***   file name length                2 bytes
5546: ***   extra field length              2 bytes
5547: ***
5548: */
5549: typedef struct ZipfileLFH ZipfileLFH;
5550: struct ZipfileLFH {
5551:   u16 iVersionExtract;
5552:   u16 flags;
5553:   u16 iCompression;
5554:   u16 mTime;
5555:   u16 mDate;
5556:   u32 crc32;
5557:   u32 szCompressed;
5558:   u32 szUncompressed;
5559:   u16 nFile;
5560:   u16 nExtra;
5561: };
5562: 
5563: typedef struct ZipfileEntry ZipfileEntry;
5564: struct ZipfileEntry {
5565:   ZipfileCDS cds;            /* Parsed CDS record */
5566:   u32 mUnixTime;             /* Modification time, in UNIX format */
5567:   u8 *aExtra;                /* cds.nExtra+cds.nComment bytes of extra data */
5568:   i64 iDataOff;              /* Offset to data in file (if aData==0) */
5569:   u8 *aData;                 /* cds.szCompressed bytes of compressed data */
5570:   ZipfileEntry *pNext;       /* Next element in in-memory CDS */
5571: };
5572: 
5573: /*
5574: ** Cursor type for zipfile tables.
5575: */
5576: typedef struct ZipfileCsr ZipfileCsr;
5577: struct ZipfileCsr {
5578:   sqlite3_vtab_cursor base;  /* Base class - must be first */
5579:   i64 iId;                   /* Cursor ID */
5580:   u8 bEof;                   /* True when at EOF */
5581:   u8 bNoop;                  /* If next xNext() call is no-op */
5582: 
5583:   /* Used outside of write transactions */
5584:   FILE *pFile;               /* Zip file */
5585:   i64 iNextOff;              /* Offset of next record in central directory */
5586:   ZipfileEOCD eocd;          /* Parse of central directory record */
5587: 
5588:   ZipfileEntry *pFreeEntry;  /* Free this list when cursor is closed or reset */
5589:   ZipfileEntry *pCurrent;    /* Current entry */
5590:   ZipfileCsr *pCsrNext;      /* Next cursor on same virtual table */
5591: };
5592: 
5593: typedef struct ZipfileTab ZipfileTab;
5594: struct ZipfileTab {
5595:   sqlite3_vtab base;         /* Base class - must be first */
5596:   char *zFile;               /* Zip file this table accesses (may be NULL) */
5597:   sqlite3 *db;               /* Host database connection */
5598:   u8 *aBuffer;               /* Temporary buffer used for various tasks */
5599: 
5600:   ZipfileCsr *pCsrList;      /* List of cursors */
5601:   i64 iNextCsrid;
5602: 
5603:   /* The following are used by write transactions only */
5604:   ZipfileEntry *pFirstEntry; /* Linked list of all files (if pWriteFd!=0) */
5605:   ZipfileEntry *pLastEntry;  /* Last element in pFirstEntry list */
5606:   FILE *pWriteFd;            /* File handle open on zip archive */
5607:   i64 szCurrent;             /* Current size of zip archive */
5608:   i64 szOrig;                /* Size of archive at start of transaction */
5609: };
5610: 
5611: /*
5612: ** Set the error message contained in context ctx to the results of
5613: ** vprintf(zFmt, ...).
5614: */
5615: static void zipfileCtxErrorMsg(sqlite3_context *ctx, const char *zFmt, ...){
5616:   char *zMsg = 0;
5617:   va_list ap;
5618:   va_start(ap, zFmt);
5619:   zMsg = sqlite3_vmprintf(zFmt, ap);
5620:   sqlite3_result_error(ctx, zMsg, -1);
5621:   sqlite3_free(zMsg);
5622:   va_end(ap);
5623: }
5624: 
5625: /*
5626: ** If string zIn is quoted, dequote it in place. Otherwise, if the string
5627: ** is not quoted, do nothing.
5628: */
5629: static void zipfileDequote(char *zIn){
5630:   char q = zIn[0];
5631:   if( q=='"' || q=='\'' || q=='`' || q=='[' ){
5632:     int iIn = 1;
5633:     int iOut = 0;
5634:     if( q=='[' ) q = ']';
5635:     while( ALWAYS(zIn[iIn]) ){
5636:       char c = zIn[iIn++];
5637:       if( c==q && zIn[iIn++]!=q ) break;
5638:       zIn[iOut++] = c;
5639:     }
5640:     zIn[iOut] = '\0';
5641:   }
5642: }
5643: 
5644: /*
5645: ** Construct a new ZipfileTab virtual table object.
5646: **
5647: **   argv[0]   -> module name  ("zipfile")
5648: **   argv[1]   -> database name
5649: **   argv[2]   -> table name
5650: **   argv[...] -> "column name" and other module argument fields.
5651: */
5652: static int zipfileConnect(
5653:   sqlite3 *db,
5654:   void *pAux,
5655:   int argc, const char *const*argv,
5656:   sqlite3_vtab **ppVtab,
5657:   char **pzErr
5658: ){
5659:   int nByte = sizeof(ZipfileTab) + ZIPFILE_BUFFER_SIZE;
5660:   int nFile = 0;
5661:   const char *zFile = 0;
5662:   ZipfileTab *pNew = 0;
5663:   int rc;
5664: 
5665:   /* If the table name is not "zipfile", require that the argument be
5666:   ** specified. This stops zipfile tables from being created as:
5667:   **
5668:   **   CREATE VIRTUAL TABLE zzz USING zipfile();
5669:   **
5670:   ** It does not prevent:
5671:   **
5672:   **   CREATE VIRTUAL TABLE zipfile USING zipfile();
5673:   */
5674:   assert( 0==sqlite3_stricmp(argv[0], "zipfile") );
5675:   if( (0!=sqlite3_stricmp(argv[2], "zipfile") && argc<4) || argc>4 ){
5676:     *pzErr = sqlite3_mprintf("zipfile constructor requires one argument");
5677:     return SQLITE_ERROR;
5678:   }
5679: 
5680:   if( argc>3 ){
5681:     zFile = argv[3];
5682:     nFile = (int)strlen(zFile)+1;
5683:   }
5684: 
5685:   rc = sqlite3_declare_vtab(db, ZIPFILE_SCHEMA);
5686:   if( rc==SQLITE_OK ){
5687:     pNew = (ZipfileTab*)sqlite3_malloc64((sqlite3_int64)nByte+nFile);
5688:     if( pNew==0 ) return SQLITE_NOMEM;
5689:     memset(pNew, 0, nByte+nFile);
5690:     pNew->db = db;
5691:     pNew->aBuffer = (u8*)&pNew[1];
5692:     if( zFile ){
5693:       pNew->zFile = (char*)&pNew->aBuffer[ZIPFILE_BUFFER_SIZE];
5694:       memcpy(pNew->zFile, zFile, nFile);
5695:       zipfileDequote(pNew->zFile);
5696:     }
5697:   }
5698:   sqlite3_vtab_config(db, SQLITE_VTAB_DIRECTONLY);
5699:   *ppVtab = (sqlite3_vtab*)pNew;
5700:   return rc;
5701: }
5702: 
5703: /*
5704: ** Free the ZipfileEntry structure indicated by the only argument.
5705: */
5706: static void zipfileEntryFree(ZipfileEntry *p){
5707:   if( p ){
5708:     sqlite3_free(p->cds.zFile);
5709:     sqlite3_free(p);
5710:   }
5711: }
5712: 
5713: /*
5714: ** Release resources that should be freed at the end of a write
5715: ** transaction.
5716: */
5717: static void zipfileCleanupTransaction(ZipfileTab *pTab){
5718:   ZipfileEntry *pEntry;
5719:   ZipfileEntry *pNext;
5720: 
5721:   if( pTab->pWriteFd ){
5722:     fclose(pTab->pWriteFd);
5723:     pTab->pWriteFd = 0;
5724:   }
5725:   for(pEntry=pTab->pFirstEntry; pEntry; pEntry=pNext){
5726:     pNext = pEntry->pNext;
5727:     zipfileEntryFree(pEntry);
5728:   }
5729:   pTab->pFirstEntry = 0;
5730:   pTab->pLastEntry = 0;
5731:   pTab->szCurrent = 0;
5732:   pTab->szOrig = 0;
5733: }
5734: 
5735: /*
5736: ** This method is the destructor for zipfile vtab objects.
5737: */
5738: static int zipfileDisconnect(sqlite3_vtab *pVtab){
5739:   zipfileCleanupTransaction((ZipfileTab*)pVtab);
5740:   sqlite3_free(pVtab);
5741:   return SQLITE_OK;
5742: }
5743: 
5744: /*
5745: ** Constructor for a new ZipfileCsr object.
5746: */
5747: static int zipfileOpen(sqlite3_vtab *p, sqlite3_vtab_cursor **ppCsr){
5748:   ZipfileTab *pTab = (ZipfileTab*)p;
5749:   ZipfileCsr *pCsr;
5750:   pCsr = sqlite3_malloc(sizeof(*pCsr));
5751:   *ppCsr = (sqlite3_vtab_cursor*)pCsr;
5752:   if( pCsr==0 ){
5753:     return SQLITE_NOMEM;
5754:   }
5755:   memset(pCsr, 0, sizeof(*pCsr));
5756:   pCsr->iId = ++pTab->iNextCsrid;
5757:   pCsr->pCsrNext = pTab->pCsrList;
5758:   pTab->pCsrList = pCsr;
5759:   return SQLITE_OK;
5760: }
5761: 
5762: /*
5763: ** Reset a cursor back to the state it was in when first returned
5764: ** by zipfileOpen().
5765: */
5766: static void zipfileResetCursor(ZipfileCsr *pCsr){
5767:   ZipfileEntry *p;
5768:   ZipfileEntry *pNext;
5769: 
5770:   pCsr->bEof = 0;
5771:   if( pCsr->pFile ){
5772:     fclose(pCsr->pFile);
5773:     pCsr->pFile = 0;
5774:     zipfileEntryFree(pCsr->pCurrent);
5775:     pCsr->pCurrent = 0;
5776:   }
5777: 
5778:   for(p=pCsr->pFreeEntry; p; p=pNext){
5779:     pNext = p->pNext;
5780:     zipfileEntryFree(p);
5781:   }
5782: }
5783: 
5784: /*
5785: ** Destructor for an ZipfileCsr.
5786: */
5787: static int zipfileClose(sqlite3_vtab_cursor *cur){
5788:   ZipfileCsr *pCsr = (ZipfileCsr*)cur;
5789:   ZipfileTab *pTab = (ZipfileTab*)(pCsr->base.pVtab);
5790:   ZipfileCsr **pp;
5791:   zipfileResetCursor(pCsr);
5792: 
5793:   /* Remove this cursor from the ZipfileTab.pCsrList list. */
5794:   for(pp=&pTab->pCsrList; *pp!=pCsr; pp=&((*pp)->pCsrNext));
5795:   *pp = pCsr->pCsrNext;
5796: 
5797:   sqlite3_free(pCsr);
5798:   return SQLITE_OK;
5799: }
5800: 
5801: /*
5802: ** Set the error message for the virtual table associated with cursor
5803: ** pCsr to the results of vprintf(zFmt, ...).
5804: */
5805: static void zipfileTableErr(ZipfileTab *pTab, const char *zFmt, ...){
5806:   va_list ap;
5807:   va_start(ap, zFmt);
5808:   sqlite3_free(pTab->base.zErrMsg);
5809:   pTab->base.zErrMsg = sqlite3_vmprintf(zFmt, ap);
5810:   va_end(ap);
5811: }
5812: static void zipfileCursorErr(ZipfileCsr *pCsr, const char *zFmt, ...){
5813:   va_list ap;
5814:   va_start(ap, zFmt);
5815:   sqlite3_free(pCsr->base.pVtab->zErrMsg);
5816:   pCsr->base.pVtab->zErrMsg = sqlite3_vmprintf(zFmt, ap);
5817:   va_end(ap);
5818: }
5819: 
5820: /*
5821: ** Read nRead bytes of data from offset iOff of file pFile into buffer
5822: ** aRead[]. Return SQLITE_OK if successful, or an SQLite error code
5823: ** otherwise.
5824: **
5825: ** If an error does occur, output variable (*pzErrmsg) may be set to point
5826: ** to an English language error message. It is the responsibility of the
5827: ** caller to eventually free this buffer using
5828: ** sqlite3_free().
5829: */
5830: static int zipfileReadData(
5831:   FILE *pFile,                    /* Read from this file */
5832:   u8 *aRead,                      /* Read into this buffer */
5833:   int nRead,                      /* Number of bytes to read */
5834:   i64 iOff,                       /* Offset to read from */
5835:   char **pzErrmsg                 /* OUT: Error message (from sqlite3_malloc) */
5836: ){
5837:   size_t n;
5838:   fseek(pFile, (long)iOff, SEEK_SET);
5839:   n = fread(aRead, 1, nRead, pFile);
5840:   if( (int)n!=nRead ){
5841:     *pzErrmsg = sqlite3_mprintf("error in fread()");
5842:     return SQLITE_ERROR;
5843:   }
5844:   return SQLITE_OK;
5845: }
5846: 
5847: static int zipfileAppendData(
5848:   ZipfileTab *pTab,
5849:   const u8 *aWrite,
5850:   int nWrite
5851: ){
5852:   size_t n;
5853:   fseek(pTab->pWriteFd, (long)pTab->szCurrent, SEEK_SET);
5854:   n = fwrite(aWrite, 1, nWrite, pTab->pWriteFd);
5855:   if( (int)n!=nWrite ){
5856:     pTab->base.zErrMsg = sqlite3_mprintf("error in fwrite()");
5857:     return SQLITE_ERROR;
5858:   }
5859:   pTab->szCurrent += nWrite;
5860:   return SQLITE_OK;
5861: }
5862: 
5863: /*
5864: ** Read and return a 16-bit little-endian unsigned integer from buffer aBuf.
5865: */
5866: static u16 zipfileGetU16(const u8 *aBuf){
5867:   return (aBuf[1] << 8) + aBuf[0];
5868: }
5869: 
5870: /*
5871: ** Read and return a 32-bit little-endian unsigned integer from buffer aBuf.
5872: */
5873: static u32 zipfileGetU32(const u8 *aBuf){
5874:   return ((u32)(aBuf[3]) << 24)
5875:        + ((u32)(aBuf[2]) << 16)
5876:        + ((u32)(aBuf[1]) <<  8)
5877:        + ((u32)(aBuf[0]) <<  0);
5878: }
5879: 
5880: /*
5881: ** Write a 16-bit little endiate integer into buffer aBuf.
5882: */
5883: static void zipfilePutU16(u8 *aBuf, u16 val){
5884:   aBuf[0] = val & 0xFF;
5885:   aBuf[1] = (val>>8) & 0xFF;
5886: }
5887: 
5888: /*
5889: ** Write a 32-bit little endiate integer into buffer aBuf.
5890: */
5891: static void zipfilePutU32(u8 *aBuf, u32 val){
5892:   aBuf[0] = val & 0xFF;
5893:   aBuf[1] = (val>>8) & 0xFF;
5894:   aBuf[2] = (val>>16) & 0xFF;
5895:   aBuf[3] = (val>>24) & 0xFF;
5896: }
5897: 
5898: #define zipfileRead32(aBuf) ( aBuf+=4, zipfileGetU32(aBuf-4) )
5899: #define zipfileRead16(aBuf) ( aBuf+=2, zipfileGetU16(aBuf-2) )
5900: 
5901: #define zipfileWrite32(aBuf,val) { zipfilePutU32(aBuf,val); aBuf+=4; }
5902: #define zipfileWrite16(aBuf,val) { zipfilePutU16(aBuf,val); aBuf+=2; }
5903: 
5904: /*
5905: ** Magic numbers used to read CDS records.
5906: */
5907: #define ZIPFILE_CDS_NFILE_OFF        28
5908: #define ZIPFILE_CDS_SZCOMPRESSED_OFF 20
5909: 
5910: /*
5911: ** Decode the CDS record in buffer aBuf into (*pCDS). Return SQLITE_ERROR
5912: ** if the record is not well-formed, or SQLITE_OK otherwise.
5913: */
5914: static int zipfileReadCDS(u8 *aBuf, ZipfileCDS *pCDS){
5915:   u8 *aRead = aBuf;
5916:   u32 sig = zipfileRead32(aRead);
5917:   int rc = SQLITE_OK;
5918:   if( sig!=ZIPFILE_SIGNATURE_CDS ){
5919:     rc = SQLITE_ERROR;
5920:   }else{
5921:     pCDS->iVersionMadeBy = zipfileRead16(aRead);
5922:     pCDS->iVersionExtract = zipfileRead16(aRead);
5923:     pCDS->flags = zipfileRead16(aRead);
5924:     pCDS->iCompression = zipfileRead16(aRead);
5925:     pCDS->mTime = zipfileRead16(aRead);
5926:     pCDS->mDate = zipfileRead16(aRead);
5927:     pCDS->crc32 = zipfileRead32(aRead);
5928:     pCDS->szCompressed = zipfileRead32(aRead);
5929:     pCDS->szUncompressed = zipfileRead32(aRead);
5930:     assert( aRead==&aBuf[ZIPFILE_CDS_NFILE_OFF] );
5931:     pCDS->nFile = zipfileRead16(aRead);
5932:     pCDS->nExtra = zipfileRead16(aRead);
5933:     pCDS->nComment = zipfileRead16(aRead);
5934:     pCDS->iDiskStart = zipfileRead16(aRead);
5935:     pCDS->iInternalAttr = zipfileRead16(aRead);
5936:     pCDS->iExternalAttr = zipfileRead32(aRead);
5937:     pCDS->iOffset = zipfileRead32(aRead);
5938:     assert( aRead==&aBuf[ZIPFILE_CDS_FIXED_SZ] );
5939:   }
5940: 
5941:   return rc;
5942: }
5943: 
5944: /*
5945: ** Decode the LFH record in buffer aBuf into (*pLFH). Return SQLITE_ERROR
5946: ** if the record is not well-formed, or SQLITE_OK otherwise.
5947: */
5948: static int zipfileReadLFH(
5949:   u8 *aBuffer,
5950:   ZipfileLFH *pLFH
5951: ){
5952:   u8 *aRead = aBuffer;
5953:   int rc = SQLITE_OK;
5954: 
5955:   u32 sig = zipfileRead32(aRead);
5956:   if( sig!=ZIPFILE_SIGNATURE_LFH ){
5957:     rc = SQLITE_ERROR;
5958:   }else{
5959:     pLFH->iVersionExtract = zipfileRead16(aRead);
5960:     pLFH->flags = zipfileRead16(aRead);
5961:     pLFH->iCompression = zipfileRead16(aRead);
5962:     pLFH->mTime = zipfileRead16(aRead);
5963:     pLFH->mDate = zipfileRead16(aRead);
5964:     pLFH->crc32 = zipfileRead32(aRead);
5965:     pLFH->szCompressed = zipfileRead32(aRead);
5966:     pLFH->szUncompressed = zipfileRead32(aRead);
5967:     pLFH->nFile = zipfileRead16(aRead);
5968:     pLFH->nExtra = zipfileRead16(aRead);
5969:   }
5970:   return rc;
5971: }
5972: 
5973: 
5974: /*
5975: ** Buffer aExtra (size nExtra bytes) contains zip archive "extra" fields.
5976: ** Scan through this buffer to find an "extra-timestamp" field. If one
5977: ** exists, extract the 32-bit modification-timestamp from it and store
5978: ** the value in output parameter *pmTime.
5979: **
5980: ** Zero is returned if no extra-timestamp record could be found (and so
5981: ** *pmTime is left unchanged), or non-zero otherwise.
5982: **
5983: ** The general format of an extra field is:
5984: **
5985: **   Header ID    2 bytes
5986: **   Data Size    2 bytes
5987: **   Data         N bytes
5988: */
5989: static int zipfileScanExtra(u8 *aExtra, int nExtra, u32 *pmTime){
5990:   int ret = 0;
5991:   u8 *p = aExtra;
5992:   u8 *pEnd = &aExtra[nExtra];
5993: 
5994:   while( p<pEnd ){
5995:     u16 id = zipfileRead16(p);
5996:     u16 nByte = zipfileRead16(p);
5997: 
5998:     switch( id ){
5999:       case ZIPFILE_EXTRA_TIMESTAMP: {
6000:         u8 b = p[0];
6001:         if( b & 0x01 ){     /* 0x01 -> modtime is present */
6002:           *pmTime = zipfileGetU32(&p[1]);
6003:           ret = 1;
6004:         }
6005:         break;
6006:       }
6007:     }
6008: 
6009:     p += nByte;
6010:   }
6011:   return ret;
6012: }
6013: 
6014: /*
6015: ** Convert the standard MS-DOS timestamp stored in the mTime and mDate
6016: ** fields of the CDS structure passed as the only argument to a 32-bit
6017: ** UNIX seconds-since-the-epoch timestamp. Return the result.
6018: **
6019: ** "Standard" MS-DOS time format:
6020: **
6021: **   File modification time:
6022: **     Bits 00-04: seconds divided by 2
6023: **     Bits 05-10: minute
6024: **     Bits 11-15: hour
6025: **   File modification date:
6026: **     Bits 00-04: day
6027: **     Bits 05-08: month (1-12)
6028: **     Bits 09-15: years from 1980
6029: **
6030: ** https://msdn.microsoft.com/en-us/library/9kkf9tah.aspx
6031: */
6032: static u32 zipfileMtime(ZipfileCDS *pCDS){
6033:   int Y = (1980 + ((pCDS->mDate >> 9) & 0x7F));
6034:   int M = ((pCDS->mDate >> 5) & 0x0F);
6035:   int D = (pCDS->mDate & 0x1F);
6036:   int B = -13;
6037: 
6038:   int sec = (pCDS->mTime & 0x1F)*2;
6039:   int min = (pCDS->mTime >> 5) & 0x3F;
6040:   int hr = (pCDS->mTime >> 11) & 0x1F;
6041:   i64 JD;
6042: 
6043:   /* JD = INT(365.25 * (Y+4716)) + INT(30.6001 * (M+1)) + D + B - 1524.5 */
6044: 
6045:   /* Calculate the JD in seconds for noon on the day in question */
6046:   if( M<3 ){
6047:     Y = Y-1;
6048:     M = M+12;
6049:   }
6050:   JD = (i64)(24*60*60) * (
6051:       (int)(365.25 * (Y + 4716))
6052:     + (int)(30.6001 * (M + 1))
6053:     + D + B - 1524
6054:   );
6055: 
6056:   /* Correct the JD for the time within the day */
6057:   JD += (hr-12) * 3600 + min * 60 + sec;
6058: 
6059:   /* Convert JD to unix timestamp (the JD epoch is 2440587.5) */
6060:   return (u32)(JD - (i64)(24405875) * 24*60*6);
6061: }
6062: 
6063: /*
6064: ** The opposite of zipfileMtime(). This function populates the mTime and
6065: ** mDate fields of the CDS structure passed as the first argument according
6066: ** to the UNIX timestamp value passed as the second.
6067: */
6068: static void zipfileMtimeToDos(ZipfileCDS *pCds, u32 mUnixTime){
6069:   /* Convert unix timestamp to JD (2440588 is noon on 1/1/1970) */
6070:   i64 JD = (i64)2440588 + mUnixTime / (24*60*60);
6071: 
6072:   int A, B, C, D, E;
6073:   int yr, mon, day;
6074:   int hr, min, sec;
6075: 
6076:   A = (int)((JD - 1867216.25)/36524.25);
6077:   A = (int)(JD + 1 + A - (A/4));
6078:   B = A + 1524;
6079:   C = (int)((B - 122.1)/365.25);
6080:   D = (36525*(C&32767))/100;
6081:   E = (int)((B-D)/30.6001);
6082: 
6083:   day = B - D - (int)(30.6001*E);
6084:   mon = (E<14 ? E-1 : E-13);
6085:   yr = mon>2 ? C-4716 : C-4715;
6086: 
6087:   hr = (mUnixTime % (24*60*60)) / (60*60);
6088:   min = (mUnixTime % (60*60)) / 60;
6089:   sec = (mUnixTime % 60);
6090: 
6091:   if( yr>=1980 ){
6092:     pCds->mDate = (u16)(day + (mon << 5) + ((yr-1980) << 9));
6093:     pCds->mTime = (u16)(sec/2 + (min<<5) + (hr<<11));
6094:   }else{
6095:     pCds->mDate = pCds->mTime = 0;
6096:   }
6097: 
6098:   assert( mUnixTime<315507600
6099:        || mUnixTime==zipfileMtime(pCds)
6100:        || ((mUnixTime % 2) && mUnixTime-1==zipfileMtime(pCds))
6101:        /* || (mUnixTime % 2) */
6102:   );
6103: }
6104: 
6105: /*
6106: ** If aBlob is not NULL, then it is a pointer to a buffer (nBlob bytes in
6107: ** size) containing an entire zip archive image. Or, if aBlob is NULL,
6108: ** then pFile is a file-handle open on a zip file. In either case, this
6109: ** function creates a ZipfileEntry object based on the zip archive entry
6110: ** for which the CDS record is at offset iOff.
6111: **
6112: ** If successful, SQLITE_OK is returned and (*ppEntry) set to point to
6113: ** the new object. Otherwise, an SQLite error code is returned and the
6114: ** final value of (*ppEntry) undefined.
6115: */
6116: static int zipfileGetEntry(
6117:   ZipfileTab *pTab,               /* Store any error message here */
6118:   const u8 *aBlob,                /* Pointer to in-memory file image */
6119:   int nBlob,                      /* Size of aBlob[] in bytes */
6120:   FILE *pFile,                    /* If aBlob==0, read from this file */
6121:   i64 iOff,                       /* Offset of CDS record */
6122:   ZipfileEntry **ppEntry          /* OUT: Pointer to new object */
6123: ){
6124:   u8 *aRead;
6125:   char **pzErr = &pTab->base.zErrMsg;
6126:   int rc = SQLITE_OK;
6127: 
6128:   if( aBlob==0 ){
6129:     aRead = pTab->aBuffer;
6130:     rc = zipfileReadData(pFile, aRead, ZIPFILE_CDS_FIXED_SZ, iOff, pzErr);
6131:   }else{
6132:     aRead = (u8*)&aBlob[iOff];
6133:   }
6134: 
6135:   if( rc==SQLITE_OK ){
6136:     sqlite3_int64 nAlloc;
6137:     ZipfileEntry *pNew;
6138: 
6139:     int nFile = zipfileGetU16(&aRead[ZIPFILE_CDS_NFILE_OFF]);
6140:     int nExtra = zipfileGetU16(&aRead[ZIPFILE_CDS_NFILE_OFF+2]);
6141:     nExtra += zipfileGetU16(&aRead[ZIPFILE_CDS_NFILE_OFF+4]);
6142: 
6143:     nAlloc = sizeof(ZipfileEntry) + nExtra;
6144:     if( aBlob ){
6145:       nAlloc += zipfileGetU32(&aRead[ZIPFILE_CDS_SZCOMPRESSED_OFF]);
6146:     }
6147: 
6148:     pNew = (ZipfileEntry*)sqlite3_malloc64(nAlloc);
6149:     if( pNew==0 ){
6150:       rc = SQLITE_NOMEM;
6151:     }else{
6152:       memset(pNew, 0, sizeof(ZipfileEntry));
6153:       rc = zipfileReadCDS(aRead, &pNew->cds);
6154:       if( rc!=SQLITE_OK ){
6155:         *pzErr = sqlite3_mprintf("failed to read CDS at offset %lld", iOff);
6156:       }else if( aBlob==0 ){
6157:         rc = zipfileReadData(
6158:             pFile, aRead, nExtra+nFile, iOff+ZIPFILE_CDS_FIXED_SZ, pzErr
6159:         );
6160:       }else{
6161:         aRead = (u8*)&aBlob[iOff + ZIPFILE_CDS_FIXED_SZ];
6162:       }
6163:     }
6164: 
6165:     if( rc==SQLITE_OK ){
6166:       u32 *pt = &pNew->mUnixTime;
6167:       pNew->cds.zFile = sqlite3_mprintf("%.*s", nFile, aRead);
6168:       pNew->aExtra = (u8*)&pNew[1];
6169:       memcpy(pNew->aExtra, &aRead[nFile], nExtra);
6170:       if( pNew->cds.zFile==0 ){
6171:         rc = SQLITE_NOMEM;
6172:       }else if( 0==zipfileScanExtra(&aRead[nFile], pNew->cds.nExtra, pt) ){
6173:         pNew->mUnixTime = zipfileMtime(&pNew->cds);
6174:       }
6175:     }
6176: 
6177:     if( rc==SQLITE_OK ){
6178:       static const int szFix = ZIPFILE_LFH_FIXED_SZ;
6179:       ZipfileLFH lfh;
6180:       if( pFile ){
6181:         rc = zipfileReadData(pFile, aRead, szFix, pNew->cds.iOffset, pzErr);
6182:       }else{
6183:         aRead = (u8*)&aBlob[pNew->cds.iOffset];
6184:       }
6185: 
6186:       rc = zipfileReadLFH(aRead, &lfh);
6187:       if( rc==SQLITE_OK ){
6188:         pNew->iDataOff =  pNew->cds.iOffset + ZIPFILE_LFH_FIXED_SZ;
6189:         pNew->iDataOff += lfh.nFile + lfh.nExtra;
6190:         if( aBlob && pNew->cds.szCompressed ){
6191:           pNew->aData = &pNew->aExtra[nExtra];
6192:           memcpy(pNew->aData, &aBlob[pNew->iDataOff], pNew->cds.szCompressed);
6193:         }
6194:       }else{
6195:         *pzErr = sqlite3_mprintf("failed to read LFH at offset %d",
6196:             (int)pNew->cds.iOffset
6197:         );
6198:       }
6199:     }
6200: 
6201:     if( rc!=SQLITE_OK ){
6202:       zipfileEntryFree(pNew);
6203:     }else{
6204:       *ppEntry = pNew;
6205:     }
6206:   }
6207: 
6208:   return rc;
6209: }
6210: 
6211: /*
6212: ** Advance an ZipfileCsr to its next row of output.
6213: */
6214: static int zipfileNext(sqlite3_vtab_cursor *cur){
6215:   ZipfileCsr *pCsr = (ZipfileCsr*)cur;
6216:   int rc = SQLITE_OK;
6217: 
6218:   if( pCsr->pFile ){
6219:     i64 iEof = pCsr->eocd.iOffset + pCsr->eocd.nSize;
6220:     zipfileEntryFree(pCsr->pCurrent);
6221:     pCsr->pCurrent = 0;
6222:     if( pCsr->iNextOff>=iEof ){
6223:       pCsr->bEof = 1;
6224:     }else{
6225:       ZipfileEntry *p = 0;
6226:       ZipfileTab *pTab = (ZipfileTab*)(cur->pVtab);
6227:       rc = zipfileGetEntry(pTab, 0, 0, pCsr->pFile, pCsr->iNextOff, &p);
6228:       if( rc==SQLITE_OK ){
6229:         pCsr->iNextOff += ZIPFILE_CDS_FIXED_SZ;
6230:         pCsr->iNextOff += (int)p->cds.nExtra + p->cds.nFile + p->cds.nComment;
6231:       }
6232:       pCsr->pCurrent = p;
6233:     }
6234:   }else{
6235:     if( !pCsr->bNoop ){
6236:       pCsr->pCurrent = pCsr->pCurrent->pNext;
6237:     }
6238:     if( pCsr->pCurrent==0 ){
6239:       pCsr->bEof = 1;
6240:     }
6241:   }
6242: 
6243:   pCsr->bNoop = 0;
6244:   return rc;
6245: }
6246: 
6247: static void zipfileFree(void *p) {
6248:   sqlite3_free(p);
6249: }
6250: 
6251: /*
6252: ** Buffer aIn (size nIn bytes) contains compressed data. Uncompressed, the
6253: ** size is nOut bytes. This function uncompresses the data and sets the
6254: ** return value in context pCtx to the result (a blob).
6255: **
6256: ** If an error occurs, an error code is left in pCtx instead.
6257: */
6258: static void zipfileInflate(
6259:   sqlite3_context *pCtx,          /* Store result here */
6260:   const u8 *aIn,                  /* Compressed data */
6261:   int nIn,                        /* Size of buffer aIn[] in bytes */
6262:   int nOut                        /* Expected output size */
6263: ){
6264:   u8 *aRes = sqlite3_malloc(nOut);
6265:   if( aRes==0 ){
6266:     sqlite3_result_error_nomem(pCtx);
6267:   }else{
6268:     int err;
6269:     z_stream str;
6270:     memset(&str, 0, sizeof(str));
6271: 
6272:     str.next_in = (Byte*)aIn;
6273:     str.avail_in = nIn;
6274:     str.next_out = (Byte*)aRes;
6275:     str.avail_out = nOut;
6276: 
6277:     err = inflateInit2(&str, -15);
6278:     if( err!=Z_OK ){
6279:       zipfileCtxErrorMsg(pCtx, "inflateInit2() failed (%d)", err);
6280:     }else{
6281:       err = inflate(&str, Z_NO_FLUSH);
6282:       if( err!=Z_STREAM_END ){
6283:         zipfileCtxErrorMsg(pCtx, "inflate() failed (%d)", err);
6284:       }else{
6285:         sqlite3_result_blob(pCtx, aRes, nOut, zipfileFree);
6286:         aRes = 0;
6287:       }
6288:     }
6289:     sqlite3_free(aRes);
6290:     inflateEnd(&str);
6291:   }
6292: }
6293: 
6294: /*
6295: ** Buffer aIn (size nIn bytes) contains uncompressed data. This function
6296: ** compresses it and sets (*ppOut) to point to a buffer containing the
6297: ** compressed data. The caller is responsible for eventually calling
6298: ** sqlite3_free() to release buffer (*ppOut). Before returning, (*pnOut)
6299: ** is set to the size of buffer (*ppOut) in bytes.
6300: **
6301: ** If no error occurs, SQLITE_OK is returned. Otherwise, an SQLite error
6302: ** code is returned and an error message left in virtual-table handle
6303: ** pTab. The values of (*ppOut) and (*pnOut) are left unchanged in this
6304: ** case.
6305: */
6306: static int zipfileDeflate(
6307:   const u8 *aIn, int nIn,         /* Input */
6308:   u8 **ppOut, int *pnOut,         /* Output */
6309:   char **pzErr                    /* OUT: Error message */
6310: ){
6311:   int rc = SQLITE_OK;
6312:   sqlite3_int64 nAlloc;
6313:   z_stream str;
6314:   u8 *aOut;
6315: 
6316:   memset(&str, 0, sizeof(str));
6317:   str.next_in = (Bytef*)aIn;
6318:   str.avail_in = nIn;
6319:   deflateInit2(&str, 9, Z_DEFLATED, -15, 8, Z_DEFAULT_STRATEGY);
6320: 
6321:   nAlloc = deflateBound(&str, nIn);
6322:   aOut = (u8*)sqlite3_malloc64(nAlloc);
6323:   if( aOut==0 ){
6324:     rc = SQLITE_NOMEM;
6325:   }else{
6326:     int res;
6327:     str.next_out = aOut;
6328:     str.avail_out = nAlloc;
6329:     res = deflate(&str, Z_FINISH);
6330:     if( res==Z_STREAM_END ){
6331:       *ppOut = aOut;
6332:       *pnOut = (int)str.total_out;
6333:     }else{
6334:       sqlite3_free(aOut);
6335:       *pzErr = sqlite3_mprintf("zipfile: deflate() error");
6336:       rc = SQLITE_ERROR;
6337:     }
6338:     deflateEnd(&str);
6339:   }
6340: 
6341:   return rc;
6342: }
6343: 
6344: 
6345: /*
6346: ** Return values of columns for the row at which the series_cursor
6347: ** is currently pointing.
6348: */
6349: static int zipfileColumn(
6350:   sqlite3_vtab_cursor *cur,   /* The cursor */
6351:   sqlite3_context *ctx,       /* First argument to sqlite3_result_...() */
6352:   int i                       /* Which column to return */
6353: ){
6354:   ZipfileCsr *pCsr = (ZipfileCsr*)cur;
6355:   ZipfileCDS *pCDS = &pCsr->pCurrent->cds;
6356:   int rc = SQLITE_OK;
6357:   switch( i ){
6358:     case 0:   /* name */
6359:       sqlite3_result_text(ctx, pCDS->zFile, -1, SQLITE_TRANSIENT);
6360:       break;
6361:     case 1:   /* mode */
6362:       /* TODO: Whether or not the following is correct surely depends on
6363:       ** the platform on which the archive was created.  */
6364:       sqlite3_result_int(ctx, pCDS->iExternalAttr >> 16);
6365:       break;
6366:     case 2: { /* mtime */
6367:       sqlite3_result_int64(ctx, pCsr->pCurrent->mUnixTime);
6368:       break;
6369:     }
6370:     case 3: { /* sz */
6371:       if( sqlite3_vtab_nochange(ctx)==0 ){
6372:         sqlite3_result_int64(ctx, pCDS->szUncompressed);
6373:       }
6374:       break;
6375:     }
6376:     case 4:   /* rawdata */
6377:       if( sqlite3_vtab_nochange(ctx) ) break;
6378:     case 5: { /* data */
6379:       if( i==4 || pCDS->iCompression==0 || pCDS->iCompression==8 ){
6380:         int sz = pCDS->szCompressed;
6381:         int szFinal = pCDS->szUncompressed;
6382:         if( szFinal>0 ){
6383:           u8 *aBuf;
6384:           u8 *aFree = 0;
6385:           if( pCsr->pCurrent->aData ){
6386:             aBuf = pCsr->pCurrent->aData;
6387:           }else{
6388:             aBuf = aFree = sqlite3_malloc64(sz);
6389:             if( aBuf==0 ){
6390:               rc = SQLITE_NOMEM;
6391:             }else{
6392:               FILE *pFile = pCsr->pFile;
6393:               if( pFile==0 ){
6394:                 pFile = ((ZipfileTab*)(pCsr->base.pVtab))->pWriteFd;
6395:               }
6396:               rc = zipfileReadData(pFile, aBuf, sz, pCsr->pCurrent->iDataOff,
6397:                   &pCsr->base.pVtab->zErrMsg
6398:               );
6399:             }
6400:           }
6401:           if( rc==SQLITE_OK ){
6402:             if( i==5 && pCDS->iCompression ){
6403:               zipfileInflate(ctx, aBuf, sz, szFinal);
6404:             }else{
6405:               sqlite3_result_blob(ctx, aBuf, sz, SQLITE_TRANSIENT);
6406:             }
6407:           }
6408:           sqlite3_free(aFree);
6409:         }else{
6410:           /* Figure out if this is a directory or a zero-sized file. Consider
6411:           ** it to be a directory either if the mode suggests so, or if
6412:           ** the final character in the name is '/'.  */
6413:           u32 mode = pCDS->iExternalAttr >> 16;
6414:           if( !(mode & S_IFDIR) && pCDS->zFile[pCDS->nFile-1]!='/' ){
6415:             sqlite3_result_blob(ctx, "", 0, SQLITE_STATIC);
6416:           }
6417:         }
6418:       }
6419:       break;
6420:     }
6421:     case 6:   /* method */
6422:       sqlite3_result_int(ctx, pCDS->iCompression);
6423:       break;
6424:     default:  /* z */
6425:       assert( i==7 );
6426:       sqlite3_result_int64(ctx, pCsr->iId);
6427:       break;
6428:   }
6429: 
6430:   return rc;
6431: }
6432: 
6433: /*
6434: ** Return TRUE if the cursor is at EOF.
6435: */
6436: static int zipfileEof(sqlite3_vtab_cursor *cur){
6437:   ZipfileCsr *pCsr = (ZipfileCsr*)cur;
6438:   return pCsr->bEof;
6439: }
6440: 
6441: /*
6442: ** If aBlob is not NULL, then it points to a buffer nBlob bytes in size
6443: ** containing an entire zip archive image. Or, if aBlob is NULL, then pFile
6444: ** is guaranteed to be a file-handle open on a zip file.
6445: **
6446: ** This function attempts to locate the EOCD record within the zip archive
6447: ** and populate *pEOCD with the results of decoding it. SQLITE_OK is
6448: ** returned if successful. Otherwise, an SQLite error code is returned and
6449: ** an English language error message may be left in virtual-table pTab.
6450: */
6451: static int zipfileReadEOCD(
6452:   ZipfileTab *pTab,               /* Return errors here */
6453:   const u8 *aBlob,                /* Pointer to in-memory file image */
6454:   int nBlob,                      /* Size of aBlob[] in bytes */
6455:   FILE *pFile,                    /* Read from this file if aBlob==0 */
6456:   ZipfileEOCD *pEOCD              /* Object to populate */
6457: ){
6458:   u8 *aRead = pTab->aBuffer;      /* Temporary buffer */
6459:   int nRead;                      /* Bytes to read from file */
6460:   int rc = SQLITE_OK;
6461: 
6462:   if( aBlob==0 ){
6463:     i64 iOff;                     /* Offset to read from */
6464:     i64 szFile;                   /* Total size of file in bytes */
6465:     fseek(pFile, 0, SEEK_END);
6466:     szFile = (i64)ftell(pFile);
6467:     if( szFile==0 ){
6468:       memset(pEOCD, 0, sizeof(ZipfileEOCD));
6469:       return SQLITE_OK;
6470:     }
6471:     nRead = (int)(MIN(szFile, ZIPFILE_BUFFER_SIZE));
6472:     iOff = szFile - nRead;
6473:     rc = zipfileReadData(pFile, aRead, nRead, iOff, &pTab->base.zErrMsg);
6474:   }else{
6475:     nRead = (int)(MIN(nBlob, ZIPFILE_BUFFER_SIZE));
6476:     aRead = (u8*)&aBlob[nBlob-nRead];
6477:   }
6478: 
6479:   if( rc==SQLITE_OK ){
6480:     int i;
6481: 
6482:     /* Scan backwards looking for the signature bytes */
6483:     for(i=nRead-20; i>=0; i--){
6484:       if( aRead[i]==0x50 && aRead[i+1]==0x4b
6485:        && aRead[i+2]==0x05 && aRead[i+3]==0x06
6486:       ){
6487:         break;
6488:       }
6489:     }
6490:     if( i<0 ){
6491:       pTab->base.zErrMsg = sqlite3_mprintf(
6492:           "cannot find end of central directory record"
6493:       );
6494:       return SQLITE_ERROR;
6495:     }
6496: 
6497:     aRead += i+4;
6498:     pEOCD->iDisk = zipfileRead16(aRead);
6499:     pEOCD->iFirstDisk = zipfileRead16(aRead);
6500:     pEOCD->nEntry = zipfileRead16(aRead);
6501:     pEOCD->nEntryTotal = zipfileRead16(aRead);
6502:     pEOCD->nSize = zipfileRead32(aRead);
6503:     pEOCD->iOffset = zipfileRead32(aRead);
6504:   }
6505: 
6506:   return rc;
6507: }
6508: 
6509: /*
6510: ** Add object pNew to the linked list that begins at ZipfileTab.pFirstEntry
6511: ** and ends with pLastEntry. If argument pBefore is NULL, then pNew is added
6512: ** to the end of the list. Otherwise, it is added to the list immediately
6513: ** before pBefore (which is guaranteed to be a part of said list).
6514: */
6515: static void zipfileAddEntry(
6516:   ZipfileTab *pTab,
6517:   ZipfileEntry *pBefore,
6518:   ZipfileEntry *pNew
6519: ){
6520:   assert( (pTab->pFirstEntry==0)==(pTab->pLastEntry==0) );
6521:   assert( pNew->pNext==0 );
6522:   if( pBefore==0 ){
6523:     if( pTab->pFirstEntry==0 ){
6524:       pTab->pFirstEntry = pTab->pLastEntry = pNew;
6525:     }else{
6526:       assert( pTab->pLastEntry->pNext==0 );
6527:       pTab->pLastEntry->pNext = pNew;
6528:       pTab->pLastEntry = pNew;
6529:     }
6530:   }else{
6531:     ZipfileEntry **pp;
6532:     for(pp=&pTab->pFirstEntry; *pp!=pBefore; pp=&((*pp)->pNext));
6533:     pNew->pNext = pBefore;
6534:     *pp = pNew;
6535:   }
6536: }
6537: 
6538: static int zipfileLoadDirectory(ZipfileTab *pTab, const u8 *aBlob, int nBlob){
6539:   ZipfileEOCD eocd;
6540:   int rc;
6541:   int i;
6542:   i64 iOff;
6543: 
6544:   rc = zipfileReadEOCD(pTab, aBlob, nBlob, pTab->pWriteFd, &eocd);
6545:   iOff = eocd.iOffset;
6546:   for(i=0; rc==SQLITE_OK && i<eocd.nEntry; i++){
6547:     ZipfileEntry *pNew = 0;
6548:     rc = zipfileGetEntry(pTab, aBlob, nBlob, pTab->pWriteFd, iOff, &pNew);
6549: 
6550:     if( rc==SQLITE_OK ){
6551:       zipfileAddEntry(pTab, 0, pNew);
6552:       iOff += ZIPFILE_CDS_FIXED_SZ;
6553:       iOff += (int)pNew->cds.nExtra + pNew->cds.nFile + pNew->cds.nComment;
6554:     }
6555:   }
6556:   return rc;
6557: }
6558: 
6559: /*
6560: ** xFilter callback.
6561: */
6562: static int zipfileFilter(
6563:   sqlite3_vtab_cursor *cur,
6564:   int idxNum, const char *idxStr,
6565:   int argc, sqlite3_value **argv
6566: ){
6567:   ZipfileTab *pTab = (ZipfileTab*)cur->pVtab;
6568:   ZipfileCsr *pCsr = (ZipfileCsr*)cur;
6569:   const char *zFile = 0;          /* Zip file to scan */
6570:   int rc = SQLITE_OK;             /* Return Code */
6571:   int bInMemory = 0;              /* True for an in-memory zipfile */
6572: 
6573:   zipfileResetCursor(pCsr);
6574: 
6575:   if( pTab->zFile ){
6576:     zFile = pTab->zFile;
6577:   }else if( idxNum==0 ){
6578:     zipfileCursorErr(pCsr, "zipfile() function requires an argument");
6579:     return SQLITE_ERROR;
6580:   }else if( sqlite3_value_type(argv[0])==SQLITE_BLOB ){
6581:     const u8 *aBlob = (const u8*)sqlite3_value_blob(argv[0]);
6582:     int nBlob = sqlite3_value_bytes(argv[0]);
6583:     assert( pTab->pFirstEntry==0 );
6584:     rc = zipfileLoadDirectory(pTab, aBlob, nBlob);
6585:     pCsr->pFreeEntry = pTab->pFirstEntry;
6586:     pTab->pFirstEntry = pTab->pLastEntry = 0;
6587:     if( rc!=SQLITE_OK ) return rc;
6588:     bInMemory = 1;
6589:   }else{
6590:     zFile = (const char*)sqlite3_value_text(argv[0]);
6591:   }
6592: 
6593:   if( 0==pTab->pWriteFd && 0==bInMemory ){
6594:     pCsr->pFile = fopen(zFile, "rb");
6595:     if( pCsr->pFile==0 ){
6596:       zipfileCursorErr(pCsr, "cannot open file: %s", zFile);
6597:       rc = SQLITE_ERROR;
6598:     }else{
6599:       rc = zipfileReadEOCD(pTab, 0, 0, pCsr->pFile, &pCsr->eocd);
6600:       if( rc==SQLITE_OK ){
6601:         if( pCsr->eocd.nEntry==0 ){
6602:           pCsr->bEof = 1;
6603:         }else{
6604:           pCsr->iNextOff = pCsr->eocd.iOffset;
6605:           rc = zipfileNext(cur);
6606:         }
6607:       }
6608:     }
6609:   }else{
6610:     pCsr->bNoop = 1;
6611:     pCsr->pCurrent = pCsr->pFreeEntry ? pCsr->pFreeEntry : pTab->pFirstEntry;
6612:     rc = zipfileNext(cur);
6613:   }
6614: 
6615:   return rc;
6616: }
6617: 
6618: /*
6619: ** xBestIndex callback.
6620: */
6621: static int zipfileBestIndex(
6622:   sqlite3_vtab *tab,
6623:   sqlite3_index_info *pIdxInfo
6624: ){
6625:   int i;
6626:   int idx = -1;
6627:   int unusable = 0;
6628: 
6629:   for(i=0; i<pIdxInfo->nConstraint; i++){
6630:     const struct sqlite3_index_constraint *pCons = &pIdxInfo->aConstraint[i];
6631:     if( pCons->iColumn!=ZIPFILE_F_COLUMN_IDX ) continue;
6632:     if( pCons->usable==0 ){
6633:       unusable = 1;
6634:     }else if( pCons->op==SQLITE_INDEX_CONSTRAINT_EQ ){
6635:       idx = i;
6636:     }
6637:   }
6638:   pIdxInfo->estimatedCost = 1000.0;
6639:   if( idx>=0 ){
6640:     pIdxInfo->aConstraintUsage[idx].argvIndex = 1;
6641:     pIdxInfo->aConstraintUsage[idx].omit = 1;
6642:     pIdxInfo->idxNum = 1;
6643:   }else if( unusable ){
6644:     return SQLITE_CONSTRAINT;
6645:   }
6646:   return SQLITE_OK;
6647: }
6648: 
6649: static ZipfileEntry *zipfileNewEntry(const char *zPath){
6650:   ZipfileEntry *pNew;
6651:   pNew = sqlite3_malloc(sizeof(ZipfileEntry));
6652:   if( pNew ){
6653:     memset(pNew, 0, sizeof(ZipfileEntry));
6654:     pNew->cds.zFile = sqlite3_mprintf("%s", zPath);
6655:     if( pNew->cds.zFile==0 ){
6656:       sqlite3_free(pNew);
6657:       pNew = 0;
6658:     }
6659:   }
6660:   return pNew;
6661: }
6662: 
6663: static int zipfileSerializeLFH(ZipfileEntry *pEntry, u8 *aBuf){
6664:   ZipfileCDS *pCds = &pEntry->cds;
6665:   u8 *a = aBuf;
6666: 
6667:   pCds->nExtra = 9;
6668: 
6669:   /* Write the LFH itself */
6670:   zipfileWrite32(a, ZIPFILE_SIGNATURE_LFH);
6671:   zipfileWrite16(a, pCds->iVersionExtract);
6672:   zipfileWrite16(a, pCds->flags);
6673:   zipfileWrite16(a, pCds->iCompression);
6674:   zipfileWrite16(a, pCds->mTime);
6675:   zipfileWrite16(a, pCds->mDate);
6676:   zipfileWrite32(a, pCds->crc32);
6677:   zipfileWrite32(a, pCds->szCompressed);
6678:   zipfileWrite32(a, pCds->szUncompressed);
6679:   zipfileWrite16(a, (u16)pCds->nFile);
6680:   zipfileWrite16(a, pCds->nExtra);
6681:   assert( a==&aBuf[ZIPFILE_LFH_FIXED_SZ] );
6682: 
6683:   /* Add the file name */
6684:   memcpy(a, pCds->zFile, (int)pCds->nFile);
6685:   a += (int)pCds->nFile;
6686: 
6687:   /* The "extra" data */
6688:   zipfileWrite16(a, ZIPFILE_EXTRA_TIMESTAMP);
6689:   zipfileWrite16(a, 5);
6690:   *a++ = 0x01;
6691:   zipfileWrite32(a, pEntry->mUnixTime);
6692: 
6693:   return a-aBuf;
6694: }
6695: 
6696: static int zipfileAppendEntry(
6697:   ZipfileTab *pTab,
6698:   ZipfileEntry *pEntry,
6699:   const u8 *pData,
6700:   int nData
6701: ){
6702:   u8 *aBuf = pTab->aBuffer;
6703:   int nBuf;
6704:   int rc;
6705: 
6706:   nBuf = zipfileSerializeLFH(pEntry, aBuf);
6707:   rc = zipfileAppendData(pTab, aBuf, nBuf);
6708:   if( rc==SQLITE_OK ){
6709:     pEntry->iDataOff = pTab->szCurrent;
6710:     rc = zipfileAppendData(pTab, pData, nData);
6711:   }
6712: 
6713:   return rc;
6714: }
6715: 
6716: static int zipfileGetMode(
6717:   sqlite3_value *pVal,
6718:   int bIsDir,                     /* If true, default to directory */
6719:   u32 *pMode,                     /* OUT: Mode value */
6720:   char **pzErr                    /* OUT: Error message */
6721: ){
6722:   const char *z = (const char*)sqlite3_value_text(pVal);
6723:   u32 mode = 0;
6724:   if( z==0 ){
6725:     mode = (bIsDir ? (S_IFDIR + 0755) : (S_IFREG + 0644));
6726:   }else if( z[0]>='0' && z[0]<='9' ){
6727:     mode = (unsigned int)sqlite3_value_int(pVal);
6728:   }else{
6729:     const char zTemplate[11] = "-rwxrwxrwx";
6730:     int i;
6731:     if( strlen(z)!=10 ) goto parse_error;
6732:     switch( z[0] ){
6733:       case '-': mode |= S_IFREG; break;
6734:       case 'd': mode |= S_IFDIR; break;
6735:       case 'l': mode |= S_IFLNK; break;
6736:       default: goto parse_error;
6737:     }
6738:     for(i=1; i<10; i++){
6739:       if( z[i]==zTemplate[i] ) mode |= 1 << (9-i);
6740:       else if( z[i]!='-' ) goto parse_error;
6741:     }
6742:   }
6743:   if( ((mode & S_IFDIR)==0)==bIsDir ){
6744:     /* The "mode" attribute is a directory, but data has been specified.
6745:     ** Or vice-versa - no data but "mode" is a file or symlink.  */
6746:     *pzErr = sqlite3_mprintf("zipfile: mode does not match data");
6747:     return SQLITE_CONSTRAINT;
6748:   }
6749:   *pMode = mode;
6750:   return SQLITE_OK;
6751: 
6752:  parse_error:
6753:   *pzErr = sqlite3_mprintf("zipfile: parse error in mode: %s", z);
6754:   return SQLITE_ERROR;
6755: }
6756: 
6757: /*
6758: ** Both (const char*) arguments point to nul-terminated strings. Argument
6759: ** nB is the value of strlen(zB). This function returns 0 if the strings are
6760: ** identical, ignoring any trailing '/' character in either path.  */
6761: static int zipfileComparePath(const char *zA, const char *zB, int nB){
6762:   int nA = (int)strlen(zA);
6763:   if( nA>0 && zA[nA-1]=='/' ) nA--;
6764:   if( nB>0 && zB[nB-1]=='/' ) nB--;
6765:   if( nA==nB && memcmp(zA, zB, nA)==0 ) return 0;
6766:   return 1;
6767: }
6768: 
6769: static int zipfileBegin(sqlite3_vtab *pVtab){
6770:   ZipfileTab *pTab = (ZipfileTab*)pVtab;
6771:   int rc = SQLITE_OK;
6772: 
6773:   assert( pTab->pWriteFd==0 );
6774:   if( pTab->zFile==0 || pTab->zFile[0]==0 ){
6775:     pTab->base.zErrMsg = sqlite3_mprintf("zipfile: missing filename");
6776:     return SQLITE_ERROR;
6777:   }
6778: 
6779:   /* Open a write fd on the file. Also load the entire central directory
6780:   ** structure into memory. During the transaction any new file data is
6781:   ** appended to the archive file, but the central directory is accumulated
6782:   ** in main-memory until the transaction is committed.  */
6783:   pTab->pWriteFd = fopen(pTab->zFile, "ab+");
6784:   if( pTab->pWriteFd==0 ){
6785:     pTab->base.zErrMsg = sqlite3_mprintf(
6786:         "zipfile: failed to open file %s for writing", pTab->zFile
6787:         );
6788:     rc = SQLITE_ERROR;
6789:   }else{
6790:     fseek(pTab->pWriteFd, 0, SEEK_END);
6791:     pTab->szCurrent = pTab->szOrig = (i64)ftell(pTab->pWriteFd);
6792:     rc = zipfileLoadDirectory(pTab, 0, 0);
6793:   }
6794: 
6795:   if( rc!=SQLITE_OK ){
6796:     zipfileCleanupTransaction(pTab);
6797:   }
6798: 
6799:   return rc;
6800: }
6801: 
6802: /*
6803: ** Return the current time as a 32-bit timestamp in UNIX epoch format (like
6804: ** time(2)).
6805: */
6806: static u32 zipfileTime(void){
6807:   sqlite3_vfs *pVfs = sqlite3_vfs_find(0);
6808:   u32 ret;
6809:   if( pVfs->iVersion>=2 && pVfs->xCurrentTimeInt64 ){
6810:     i64 ms;
6811:     pVfs->xCurrentTimeInt64(pVfs, &ms);
6812:     ret = (u32)((ms/1000) - ((i64)24405875 * 8640));
6813:   }else{
6814:     double day;
6815:     pVfs->xCurrentTime(pVfs, &day);
6816:     ret = (u32)((day - 2440587.5) * 86400);
6817:   }
6818:   return ret;
6819: }
6820: 
6821: /*
6822: ** Return a 32-bit timestamp in UNIX epoch format.
6823: **
6824: ** If the value passed as the only argument is either NULL or an SQL NULL,
6825: ** return the current time. Otherwise, return the value stored in (*pVal)
6826: ** cast to a 32-bit unsigned integer.
6827: */
6828: static u32 zipfileGetTime(sqlite3_value *pVal){
6829:   if( pVal==0 || sqlite3_value_type(pVal)==SQLITE_NULL ){
6830:     return zipfileTime();
6831:   }
6832:   return (u32)sqlite3_value_int64(pVal);
6833: }
6834: 
6835: /*
6836: ** Unless it is NULL, entry pOld is currently part of the pTab->pFirstEntry
6837: ** linked list.  Remove it from the list and free the object.
6838: */
6839: static void zipfileRemoveEntryFromList(ZipfileTab *pTab, ZipfileEntry *pOld){
6840:   if( pOld ){
6841:     ZipfileEntry **pp;
6842:     for(pp=&pTab->pFirstEntry; (*pp)!=pOld; pp=&((*pp)->pNext));
6843:     *pp = (*pp)->pNext;
6844:     zipfileEntryFree(pOld);
6845:   }
6846: }
6847: 
6848: /*
6849: ** xUpdate method.
6850: */
6851: static int zipfileUpdate(
6852:   sqlite3_vtab *pVtab,
6853:   int nVal,
6854:   sqlite3_value **apVal,
6855:   sqlite_int64 *pRowid
6856: ){
6857:   ZipfileTab *pTab = (ZipfileTab*)pVtab;
6858:   int rc = SQLITE_OK;             /* Return Code */
6859:   ZipfileEntry *pNew = 0;         /* New in-memory CDS entry */
6860: 
6861:   u32 mode = 0;                   /* Mode for new entry */
6862:   u32 mTime = 0;                  /* Modification time for new entry */
6863:   i64 sz = 0;                     /* Uncompressed size */
6864:   const char *zPath = 0;          /* Path for new entry */
6865:   int nPath = 0;                  /* strlen(zPath) */
6866:   const u8 *pData = 0;            /* Pointer to buffer containing content */
6867:   int nData = 0;                  /* Size of pData buffer in bytes */
6868:   int iMethod = 0;                /* Compression method for new entry */
6869:   u8 *pFree = 0;                  /* Free this */
6870:   char *zFree = 0;                /* Also free this */
6871:   ZipfileEntry *pOld = 0;
6872:   ZipfileEntry *pOld2 = 0;
6873:   int bUpdate = 0;                /* True for an update that modifies "name" */
6874:   int bIsDir = 0;
6875:   u32 iCrc32 = 0;
6876: 
6877:   if( pTab->pWriteFd==0 ){
6878:     rc = zipfileBegin(pVtab);
6879:     if( rc!=SQLITE_OK ) return rc;
6880:   }
6881: 
6882:   /* If this is a DELETE or UPDATE, find the archive entry to delete. */
6883:   if( sqlite3_value_type(apVal[0])!=SQLITE_NULL ){
6884:     const char *zDelete = (const char*)sqlite3_value_text(apVal[0]);
6885:     int nDelete = (int)strlen(zDelete);
6886:     if( nVal>1 ){
6887:       const char *zUpdate = (const char*)sqlite3_value_text(apVal[1]);
6888:       if( zUpdate && zipfileComparePath(zUpdate, zDelete, nDelete)!=0 ){
6889:         bUpdate = 1;
6890:       }
6891:     }
6892:     for(pOld=pTab->pFirstEntry; 1; pOld=pOld->pNext){
6893:       if( zipfileComparePath(pOld->cds.zFile, zDelete, nDelete)==0 ){
6894:         break;
6895:       }
6896:       assert( pOld->pNext );
6897:     }
6898:   }
6899: 
6900:   if( nVal>1 ){
6901:     /* Check that "sz" and "rawdata" are both NULL: */
6902:     if( sqlite3_value_type(apVal[5])!=SQLITE_NULL ){
6903:       zipfileTableErr(pTab, "sz must be NULL");
6904:       rc = SQLITE_CONSTRAINT;
6905:     }
6906:     if( sqlite3_value_type(apVal[6])!=SQLITE_NULL ){
6907:       zipfileTableErr(pTab, "rawdata must be NULL");
6908:       rc = SQLITE_CONSTRAINT;
6909:     }
6910: 
6911:     if( rc==SQLITE_OK ){
6912:       if( sqlite3_value_type(apVal[7])==SQLITE_NULL ){
6913:         /* data=NULL. A directory */
6914:         bIsDir = 1;
6915:       }else{
6916:         /* Value specified for "data", and possibly "method". This must be
6917:         ** a regular file or a symlink. */
6918:         const u8 *aIn = sqlite3_value_blob(apVal[7]);
6919:         int nIn = sqlite3_value_bytes(apVal[7]);
6920:         int bAuto = sqlite3_value_type(apVal[8])==SQLITE_NULL;
6921: 
6922:         iMethod = sqlite3_value_int(apVal[8]);
6923:         sz = nIn;
6924:         pData = aIn;
6925:         nData = nIn;
6926:         if( iMethod!=0 && iMethod!=8 ){
6927:           zipfileTableErr(pTab, "unknown compression method: %d", iMethod);
6928:           rc = SQLITE_CONSTRAINT;
6929:         }else{
6930:           if( bAuto || iMethod ){
6931:             int nCmp;
6932:             rc = zipfileDeflate(aIn, nIn, &pFree, &nCmp, &pTab->base.zErrMsg);
6933:             if( rc==SQLITE_OK ){
6934:               if( iMethod || nCmp<nIn ){
6935:                 iMethod = 8;
6936:                 pData = pFree;
6937:                 nData = nCmp;
6938:               }
6939:             }
6940:           }
6941:           iCrc32 = crc32(0, aIn, nIn);
6942:         }
6943:       }
6944:     }
6945: 
6946:     if( rc==SQLITE_OK ){
6947:       rc = zipfileGetMode(apVal[3], bIsDir, &mode, &pTab->base.zErrMsg);
6948:     }
6949: 
6950:     if( rc==SQLITE_OK ){
6951:       zPath = (const char*)sqlite3_value_text(apVal[2]);
6952:       if( zPath==0 ) zPath = "";
6953:       nPath = (int)strlen(zPath);
6954:       mTime = zipfileGetTime(apVal[4]);
6955:     }
6956: 
6957:     if( rc==SQLITE_OK && bIsDir ){
6958:       /* For a directory, check that the last character in the path is a
6959:       ** '/'. This appears to be required for compatibility with info-zip
6960:       ** (the unzip command on unix). It does not create directories
6961:       ** otherwise.  */
6962:       if( nPath<=0 || zPath[nPath-1]!='/' ){
6963:         zFree = sqlite3_mprintf("%s/", zPath);
6964:         zPath = (const char*)zFree;
6965:         if( zFree==0 ){
6966:           rc = SQLITE_NOMEM;
6967:           nPath = 0;
6968:         }else{
6969:           nPath = (int)strlen(zPath);
6970:         }
6971:       }
6972:     }
6973: 
6974:     /* Check that we're not inserting a duplicate entry -OR- updating an
6975:     ** entry with a path, thereby making it into a duplicate. */
6976:     if( (pOld==0 || bUpdate) && rc==SQLITE_OK ){
6977:       ZipfileEntry *p;
6978:       for(p=pTab->pFirstEntry; p; p=p->pNext){
6979:         if( zipfileComparePath(p->cds.zFile, zPath, nPath)==0 ){
6980:           switch( sqlite3_vtab_on_conflict(pTab->db) ){
6981:             case SQLITE_IGNORE: {
6982:               goto zipfile_update_done;
6983:             }
6984:             case SQLITE_REPLACE: {
6985:               pOld2 = p;
6986:               break;
6987:             }
6988:             default: {
6989:               zipfileTableErr(pTab, "duplicate name: \"%s\"", zPath);
6990:               rc = SQLITE_CONSTRAINT;
6991:               break;
6992:             }
6993:           }
6994:           break;
6995:         }
6996:       }
6997:     }
6998: 
6999:     if( rc==SQLITE_OK ){
7000:       /* Create the new CDS record. */
7001:       pNew = zipfileNewEntry(zPath);
7002:       if( pNew==0 ){
7003:         rc = SQLITE_NOMEM;
7004:       }else{
7005:         pNew->cds.iVersionMadeBy = ZIPFILE_NEWENTRY_MADEBY;
7006:         pNew->cds.iVersionExtract = ZIPFILE_NEWENTRY_REQUIRED;
7007:         pNew->cds.flags = ZIPFILE_NEWENTRY_FLAGS;
7008:         pNew->cds.iCompression = (u16)iMethod;
7009:         zipfileMtimeToDos(&pNew->cds, mTime);
7010:         pNew->cds.crc32 = iCrc32;
7011:         pNew->cds.szCompressed = nData;
7012:         pNew->cds.szUncompressed = (u32)sz;
7013:         pNew->cds.iExternalAttr = (mode<<16);
7014:         pNew->cds.iOffset = (u32)pTab->szCurrent;
7015:         pNew->cds.nFile = (u16)nPath;
7016:         pNew->mUnixTime = (u32)mTime;
7017:         rc = zipfileAppendEntry(pTab, pNew, pData, nData);
7018:         zipfileAddEntry(pTab, pOld, pNew);
7019:       }
7020:     }
7021:   }
7022: 
7023:   if( rc==SQLITE_OK && (pOld || pOld2) ){
7024:     ZipfileCsr *pCsr;
7025:     for(pCsr=pTab->pCsrList; pCsr; pCsr=pCsr->pCsrNext){
7026:       if( pCsr->pCurrent && (pCsr->pCurrent==pOld || pCsr->pCurrent==pOld2) ){
7027:         pCsr->pCurrent = pCsr->pCurrent->pNext;
7028:         pCsr->bNoop = 1;
7029:       }
7030:     }
7031: 
7032:     zipfileRemoveEntryFromList(pTab, pOld);
7033:     zipfileRemoveEntryFromList(pTab, pOld2);
7034:   }
7035: 
7036: zipfile_update_done:
7037:   sqlite3_free(pFree);
7038:   sqlite3_free(zFree);
7039:   return rc;
7040: }
7041: 
7042: static int zipfileSerializeEOCD(ZipfileEOCD *p, u8 *aBuf){
7043:   u8 *a = aBuf;
7044:   zipfileWrite32(a, ZIPFILE_SIGNATURE_EOCD);
7045:   zipfileWrite16(a, p->iDisk);
7046:   zipfileWrite16(a, p->iFirstDisk);
7047:   zipfileWrite16(a, p->nEntry);
7048:   zipfileWrite16(a, p->nEntryTotal);
7049:   zipfileWrite32(a, p->nSize);
7050:   zipfileWrite32(a, p->iOffset);
7051:   zipfileWrite16(a, 0);        /* Size of trailing comment in bytes*/
7052: 
7053:   return a-aBuf;
7054: }
7055: 
7056: static int zipfileAppendEOCD(ZipfileTab *pTab, ZipfileEOCD *p){
7057:   int nBuf = zipfileSerializeEOCD(p, pTab->aBuffer);
7058:   assert( nBuf==ZIPFILE_EOCD_FIXED_SZ );
7059:   return zipfileAppendData(pTab, pTab->aBuffer, nBuf);
7060: }
7061: 
7062: /*
7063: ** Serialize the CDS structure into buffer aBuf[]. Return the number
7064: ** of bytes written.
7065: */
7066: static int zipfileSerializeCDS(ZipfileEntry *pEntry, u8 *aBuf){
7067:   u8 *a = aBuf;
7068:   ZipfileCDS *pCDS = &pEntry->cds;
7069: 
7070:   if( pEntry->aExtra==0 ){
7071:     pCDS->nExtra = 9;
7072:   }
7073: 
7074:   zipfileWrite32(a, ZIPFILE_SIGNATURE_CDS);
7075:   zipfileWrite16(a, pCDS->iVersionMadeBy);
7076:   zipfileWrite16(a, pCDS->iVersionExtract);
7077:   zipfileWrite16(a, pCDS->flags);
7078:   zipfileWrite16(a, pCDS->iCompression);
7079:   zipfileWrite16(a, pCDS->mTime);
7080:   zipfileWrite16(a, pCDS->mDate);
7081:   zipfileWrite32(a, pCDS->crc32);
7082:   zipfileWrite32(a, pCDS->szCompressed);
7083:   zipfileWrite32(a, pCDS->szUncompressed);
7084:   assert( a==&aBuf[ZIPFILE_CDS_NFILE_OFF] );
7085:   zipfileWrite16(a, pCDS->nFile);
7086:   zipfileWrite16(a, pCDS->nExtra);
7087:   zipfileWrite16(a, pCDS->nComment);
7088:   zipfileWrite16(a, pCDS->iDiskStart);
7089:   zipfileWrite16(a, pCDS->iInternalAttr);
7090:   zipfileWrite32(a, pCDS->iExternalAttr);
7091:   zipfileWrite32(a, pCDS->iOffset);
7092: 
7093:   memcpy(a, pCDS->zFile, pCDS->nFile);
7094:   a += pCDS->nFile;
7095: 
7096:   if( pEntry->aExtra ){
7097:     int n = (int)pCDS->nExtra + (int)pCDS->nComment;
7098:     memcpy(a, pEntry->aExtra, n);
7099:     a += n;
7100:   }else{
7101:     assert( pCDS->nExtra==9 );
7102:     zipfileWrite16(a, ZIPFILE_EXTRA_TIMESTAMP);
7103:     zipfileWrite16(a, 5);
7104:     *a++ = 0x01;
7105:     zipfileWrite32(a, pEntry->mUnixTime);
7106:   }
7107: 
7108:   return a-aBuf;
7109: }
7110: 
7111: static int zipfileCommit(sqlite3_vtab *pVtab){
7112:   ZipfileTab *pTab = (ZipfileTab*)pVtab;
7113:   int rc = SQLITE_OK;
7114:   if( pTab->pWriteFd ){
7115:     i64 iOffset = pTab->szCurrent;
7116:     ZipfileEntry *p;
7117:     ZipfileEOCD eocd;
7118:     int nEntry = 0;
7119: 
7120:     /* Write out all entries */
7121:     for(p=pTab->pFirstEntry; rc==SQLITE_OK && p; p=p->pNext){
7122:       int n = zipfileSerializeCDS(p, pTab->aBuffer);
7123:       rc = zipfileAppendData(pTab, pTab->aBuffer, n);
7124:       nEntry++;
7125:     }
7126: 
7127:     /* Write out the EOCD record */
7128:     eocd.iDisk = 0;
7129:     eocd.iFirstDisk = 0;
7130:     eocd.nEntry = (u16)nEntry;
7131:     eocd.nEntryTotal = (u16)nEntry;
7132:     eocd.nSize = (u32)(pTab->szCurrent - iOffset);
7133:     eocd.iOffset = (u32)iOffset;
7134:     rc = zipfileAppendEOCD(pTab, &eocd);
7135: 
7136:     zipfileCleanupTransaction(pTab);
7137:   }
7138:   return rc;
7139: }
7140: 
7141: static int zipfileRollback(sqlite3_vtab *pVtab){
7142:   return zipfileCommit(pVtab);
7143: }
7144: 
7145: static ZipfileCsr *zipfileFindCursor(ZipfileTab *pTab, i64 iId){
7146:   ZipfileCsr *pCsr;
7147:   for(pCsr=pTab->pCsrList; pCsr; pCsr=pCsr->pCsrNext){
7148:     if( iId==pCsr->iId ) break;
7149:   }
7150:   return pCsr;
7151: }
7152: 
7153: static void zipfileFunctionCds(
7154:   sqlite3_context *context,
7155:   int argc,
7156:   sqlite3_value **argv
7157: ){
7158:   ZipfileCsr *pCsr;
7159:   ZipfileTab *pTab = (ZipfileTab*)sqlite3_user_data(context);
7160:   assert( argc>0 );
7161: 
7162:   pCsr = zipfileFindCursor(pTab, sqlite3_value_int64(argv[0]));
7163:   if( pCsr ){
7164:     ZipfileCDS *p = &pCsr->pCurrent->cds;
7165:     char *zRes = sqlite3_mprintf("{"
7166:         "\"version-made-by\" : %u, "
7167:         "\"version-to-extract\" : %u, "
7168:         "\"flags\" : %u, "
7169:         "\"compression\" : %u, "
7170:         "\"time\" : %u, "
7171:         "\"date\" : %u, "
7172:         "\"crc32\" : %u, "
7173:         "\"compressed-size\" : %u, "
7174:         "\"uncompressed-size\" : %u, "
7175:         "\"file-name-length\" : %u, "
7176:         "\"extra-field-length\" : %u, "
7177:         "\"file-comment-length\" : %u, "
7178:         "\"disk-number-start\" : %u, "
7179:         "\"internal-attr\" : %u, "
7180:         "\"external-attr\" : %u, "
7181:         "\"offset\" : %u }",
7182:         (u32)p->iVersionMadeBy, (u32)p->iVersionExtract,
7183:         (u32)p->flags, (u32)p->iCompression,
7184:         (u32)p->mTime, (u32)p->mDate,
7185:         (u32)p->crc32, (u32)p->szCompressed,
7186:         (u32)p->szUncompressed, (u32)p->nFile,
7187:         (u32)p->nExtra, (u32)p->nComment,
7188:         (u32)p->iDiskStart, (u32)p->iInternalAttr,
7189:         (u32)p->iExternalAttr, (u32)p->iOffset
7190:     );
7191: 
7192:     if( zRes==0 ){
7193:       sqlite3_result_error_nomem(context);
7194:     }else{
7195:       sqlite3_result_text(context, zRes, -1, SQLITE_TRANSIENT);
7196:       sqlite3_free(zRes);
7197:     }
7198:   }
7199: }
7200: 
7201: /*
7202: ** xFindFunction method.
7203: */
7204: static int zipfileFindFunction(
7205:   sqlite3_vtab *pVtab,            /* Virtual table handle */
7206:   int nArg,                       /* Number of SQL function arguments */
7207:   const char *zName,              /* Name of SQL function */
7208:   void (**pxFunc)(sqlite3_context*,int,sqlite3_value**), /* OUT: Result */
7209:   void **ppArg                    /* OUT: User data for *pxFunc */
7210: ){
7211:   if( sqlite3_stricmp("zipfile_cds", zName)==0 ){
7212:     *pxFunc = zipfileFunctionCds;
7213:     *ppArg = (void*)pVtab;
7214:     return 1;
7215:   }
7216:   return 0;
7217: }
7218: 
7219: typedef struct ZipfileBuffer ZipfileBuffer;
7220: struct ZipfileBuffer {
7221:   u8 *a;                          /* Pointer to buffer */
7222:   int n;                          /* Size of buffer in bytes */
7223:   int nAlloc;                     /* Byte allocated at a[] */
7224: };
7225: 
7226: typedef struct ZipfileCtx ZipfileCtx;
7227: struct ZipfileCtx {
7228:   int nEntry;
7229:   ZipfileBuffer body;
7230:   ZipfileBuffer cds;
7231: };
7232: 
7233: static int zipfileBufferGrow(ZipfileBuffer *pBuf, int nByte){
7234:   if( pBuf->n+nByte>pBuf->nAlloc ){
7235:     u8 *aNew;
7236:     sqlite3_int64 nNew = pBuf->n ? pBuf->n*2 : 512;
7237:     int nReq = pBuf->n + nByte;
7238: 
7239:     while( nNew<nReq ) nNew = nNew*2;
7240:     aNew = sqlite3_realloc64(pBuf->a, nNew);
7241:     if( aNew==0 ) return SQLITE_NOMEM;
7242:     pBuf->a = aNew;
7243:     pBuf->nAlloc = (int)nNew;
7244:   }
7245:   return SQLITE_OK;
7246: }
7247: 
7248: /*
7249: ** xStep() callback for the zipfile() aggregate. This can be called in
7250: ** any of the following ways:
7251: **
7252: **   SELECT zipfile(name,data) ...
7253: **   SELECT zipfile(name,mode,mtime,data) ...
7254: **   SELECT zipfile(name,mode,mtime,data,method) ...
7255: */
7256: void zipfileStep(sqlite3_context *pCtx, int nVal, sqlite3_value **apVal){
7257:   ZipfileCtx *p;                  /* Aggregate function context */
7258:   ZipfileEntry e;                 /* New entry to add to zip archive */
7259: 
7260:   sqlite3_value *pName = 0;
7261:   sqlite3_value *pMode = 0;
7262:   sqlite3_value *pMtime = 0;
7263:   sqlite3_value *pData = 0;
7264:   sqlite3_value *pMethod = 0;
7265: 
7266:   int bIsDir = 0;
7267:   u32 mode;
7268:   int rc = SQLITE_OK;
7269:   char *zErr = 0;
7270: 
7271:   int iMethod = -1;               /* Compression method to use (0 or 8) */
7272: 
7273:   const u8 *aData = 0;            /* Possibly compressed data for new entry */
7274:   int nData = 0;                  /* Size of aData[] in bytes */
7275:   int szUncompressed = 0;         /* Size of data before compression */
7276:   u8 *aFree = 0;                  /* Free this before returning */
7277:   u32 iCrc32 = 0;                 /* crc32 of uncompressed data */
7278: 
7279:   char *zName = 0;                /* Path (name) of new entry */
7280:   int nName = 0;                  /* Size of zName in bytes */
7281:   char *zFree = 0;                /* Free this before returning */
7282:   int nByte;
7283: 
7284:   memset(&e, 0, sizeof(e));
7285:   p = (ZipfileCtx*)sqlite3_aggregate_context(pCtx, sizeof(ZipfileCtx));
7286:   if( p==0 ) return;
7287: 
7288:   /* Martial the arguments into stack variables */
7289:   if( nVal!=2 && nVal!=4 && nVal!=5 ){
7290:     zErr = sqlite3_mprintf("wrong number of arguments to function zipfile()");
7291:     rc = SQLITE_ERROR;
7292:     goto zipfile_step_out;
7293:   }
7294:   pName = apVal[0];
7295:   if( nVal==2 ){
7296:     pData = apVal[1];
7297:   }else{
7298:     pMode = apVal[1];
7299:     pMtime = apVal[2];
7300:     pData = apVal[3];
7301:     if( nVal==5 ){
7302:       pMethod = apVal[4];
7303:     }
7304:   }
7305: 
7306:   /* Check that the 'name' parameter looks ok. */
7307:   zName = (char*)sqlite3_value_text(pName);
7308:   nName = sqlite3_value_bytes(pName);
7309:   if( zName==0 ){
7310:     zErr = sqlite3_mprintf("first argument to zipfile() must be non-NULL");
7311:     rc = SQLITE_ERROR;
7312:     goto zipfile_step_out;
7313:   }
7314: 
7315:   /* Inspect the 'method' parameter. This must be either 0 (store), 8 (use
7316:   ** deflate compression) or NULL (choose automatically).  */
7317:   if( pMethod && SQLITE_NULL!=sqlite3_value_type(pMethod) ){
7318:     iMethod = (int)sqlite3_value_int64(pMethod);
7319:     if( iMethod!=0 && iMethod!=8 ){
7320:       zErr = sqlite3_mprintf("illegal method value: %d", iMethod);
7321:       rc = SQLITE_ERROR;
7322:       goto zipfile_step_out;
7323:     }
7324:   }
7325: 
7326:   /* Now inspect the data. If this is NULL, then the new entry must be a
7327:   ** directory.  Otherwise, figure out whether or not the data should
7328:   ** be deflated or simply stored in the zip archive. */
7329:   if( sqlite3_value_type(pData)==SQLITE_NULL ){
7330:     bIsDir = 1;
7331:     iMethod = 0;
7332:   }else{
7333:     aData = sqlite3_value_blob(pData);
7334:     szUncompressed = nData = sqlite3_value_bytes(pData);
7335:     iCrc32 = crc32(0, aData, nData);
7336:     if( iMethod<0 || iMethod==8 ){
7337:       int nOut = 0;
7338:       rc = zipfileDeflate(aData, nData, &aFree, &nOut, &zErr);
7339:       if( rc!=SQLITE_OK ){
7340:         goto zipfile_step_out;
7341:       }
7342:       if( iMethod==8 || nOut<nData ){
7343:         aData = aFree;
7344:         nData = nOut;
7345:         iMethod = 8;
7346:       }else{
7347:         iMethod = 0;
7348:       }
7349:     }
7350:   }
7351: 
7352:   /* Decode the "mode" argument. */
7353:   rc = zipfileGetMode(pMode, bIsDir, &mode, &zErr);
7354:   if( rc ) goto zipfile_step_out;
7355: 
7356:   /* Decode the "mtime" argument. */
7357:   e.mUnixTime = zipfileGetTime(pMtime);
7358: 
7359:   /* If this is a directory entry, ensure that there is exactly one '/'
7360:   ** at the end of the path. Or, if this is not a directory and the path
7361:   ** ends in '/' it is an error. */
7362:   if( bIsDir==0 ){
7363:     if( nName>0 && zName[nName-1]=='/' ){
7364:       zErr = sqlite3_mprintf("non-directory name must not end with /");
7365:       rc = SQLITE_ERROR;
7366:       goto zipfile_step_out;
7367:     }
7368:   }else{
7369:     if( nName==0 || zName[nName-1]!='/' ){
7370:       zName = zFree = sqlite3_mprintf("%s/", zName);
7371:       if( zName==0 ){
7372:         rc = SQLITE_NOMEM;
7373:         goto zipfile_step_out;
7374:       }
7375:       nName = (int)strlen(zName);
7376:     }else{
7377:       while( nName>1 && zName[nName-2]=='/' ) nName--;
7378:     }
7379:   }
7380: 
7381:   /* Assemble the ZipfileEntry object for the new zip archive entry */
7382:   e.cds.iVersionMadeBy = ZIPFILE_NEWENTRY_MADEBY;
7383:   e.cds.iVersionExtract = ZIPFILE_NEWENTRY_REQUIRED;
7384:   e.cds.flags = ZIPFILE_NEWENTRY_FLAGS;
7385:   e.cds.iCompression = (u16)iMethod;
7386:   zipfileMtimeToDos(&e.cds, (u32)e.mUnixTime);
7387:   e.cds.crc32 = iCrc32;
7388:   e.cds.szCompressed = nData;
7389:   e.cds.szUncompressed = szUncompressed;
7390:   e.cds.iExternalAttr = (mode<<16);
7391:   e.cds.iOffset = p->body.n;
7392:   e.cds.nFile = (u16)nName;
7393:   e.cds.zFile = zName;
7394: 
7395:   /* Append the LFH to the body of the new archive */
7396:   nByte = ZIPFILE_LFH_FIXED_SZ + e.cds.nFile + 9;
7397:   if( (rc = zipfileBufferGrow(&p->body, nByte)) ) goto zipfile_step_out;
7398:   p->body.n += zipfileSerializeLFH(&e, &p->body.a[p->body.n]);
7399: 
7400:   /* Append the data to the body of the new archive */
7401:   if( nData>0 ){
7402:     if( (rc = zipfileBufferGrow(&p->body, nData)) ) goto zipfile_step_out;
7403:     memcpy(&p->body.a[p->body.n], aData, nData);
7404:     p->body.n += nData;
7405:   }
7406: 
7407:   /* Append the CDS record to the directory of the new archive */
7408:   nByte = ZIPFILE_CDS_FIXED_SZ + e.cds.nFile + 9;
7409:   if( (rc = zipfileBufferGrow(&p->cds, nByte)) ) goto zipfile_step_out;
7410:   p->cds.n += zipfileSerializeCDS(&e, &p->cds.a[p->cds.n]);
7411: 
7412:   /* Increment the count of entries in the archive */
7413:   p->nEntry++;
7414: 
7415:  zipfile_step_out:
7416:   sqlite3_free(aFree);
7417:   sqlite3_free(zFree);
7418:   if( rc ){
7419:     if( zErr ){
7420:       sqlite3_result_error(pCtx, zErr, -1);
7421:     }else{
7422:       sqlite3_result_error_code(pCtx, rc);
7423:     }
7424:   }
7425:   sqlite3_free(zErr);
7426: }
7427: 
7428: /*
7429: ** xFinalize() callback for zipfile aggregate function.
7430: */
7431: void zipfileFinal(sqlite3_context *pCtx){
7432:   ZipfileCtx *p;
7433:   ZipfileEOCD eocd;
7434:   sqlite3_int64 nZip;
7435:   u8 *aZip;
7436: 
7437:   p = (ZipfileCtx*)sqlite3_aggregate_context(pCtx, sizeof(ZipfileCtx));
7438:   if( p==0 ) return;
7439:   if( p->nEntry>0 ){
7440:     memset(&eocd, 0, sizeof(eocd));
7441:     eocd.nEntry = (u16)p->nEntry;
7442:     eocd.nEntryTotal = (u16)p->nEntry;
7443:     eocd.nSize = p->cds.n;
7444:     eocd.iOffset = p->body.n;
7445: 
7446:     nZip = p->body.n + p->cds.n + ZIPFILE_EOCD_FIXED_SZ;
7447:     aZip = (u8*)sqlite3_malloc64(nZip);
7448:     if( aZip==0 ){
7449:       sqlite3_result_error_nomem(pCtx);
7450:     }else{
7451:       memcpy(aZip, p->body.a, p->body.n);
7452:       memcpy(&aZip[p->body.n], p->cds.a, p->cds.n);
7453:       zipfileSerializeEOCD(&eocd, &aZip[p->body.n + p->cds.n]);
7454:       sqlite3_result_blob(pCtx, aZip, (int)nZip, zipfileFree);
7455:     }
7456:   }
7457: 
7458:   sqlite3_free(p->body.a);
7459:   sqlite3_free(p->cds.a);
7460: }
7461: 
7462: 
7463: /*
7464: ** Register the "zipfile" virtual table.
7465: */
7466: static int zipfileRegister(sqlite3 *db){
7467:   static sqlite3_module zipfileModule = {
7468:     1,                         /* iVersion */
7469:     zipfileConnect,            /* xCreate */
7470:     zipfileConnect,            /* xConnect */
7471:     zipfileBestIndex,          /* xBestIndex */
7472:     zipfileDisconnect,         /* xDisconnect */
7473:     zipfileDisconnect,         /* xDestroy */
7474:     zipfileOpen,               /* xOpen - open a cursor */
7475:     zipfileClose,              /* xClose - close a cursor */
7476:     zipfileFilter,             /* xFilter - configure scan constraints */
7477:     zipfileNext,               /* xNext - advance a cursor */
7478:     zipfileEof,                /* xEof - check for end of scan */
7479:     zipfileColumn,             /* xColumn - read data */
7480:     0,                         /* xRowid - read data */
7481:     zipfileUpdate,             /* xUpdate */
7482:     zipfileBegin,              /* xBegin */
7483:     0,                         /* xSync */
7484:     zipfileCommit,             /* xCommit */
7485:     zipfileRollback,           /* xRollback */
7486:     zipfileFindFunction,       /* xFindMethod */
7487:     0,                         /* xRename */
7488:   };
7489: 
7490:   int rc = sqlite3_create_module(db, "zipfile"  , &zipfileModule, 0);
7491:   if( rc==SQLITE_OK ) rc = sqlite3_overload_function(db, "zipfile_cds", -1);
7492:   if( rc==SQLITE_OK ){
7493:     rc = sqlite3_create_function(db, "zipfile", -1, SQLITE_UTF8, 0, 0,
7494:         zipfileStep, zipfileFinal
7495:     );
7496:   }
7497:   return rc;
7498: }
7499: #else         /* SQLITE_OMIT_VIRTUALTABLE */
7500: # define zipfileRegister(x) SQLITE_OK
7501: #endif
7502: 
7503: #ifdef _WIN32
7504: 
7505: #endif
7506: int sqlite3_zipfile_init(
7507:   sqlite3 *db,
7508:   char **pzErrMsg,
7509:   const sqlite3_api_routines *pApi
7510: ){
7511:   SQLITE_EXTENSION_INIT2(pApi);
7512:   (void)pzErrMsg;  /* Unused parameter */
7513:   return zipfileRegister(db);
7514: }
7515: 
7516: /************************* End ../ext/misc/zipfile.c ********************/
7517: /************************* Begin ../ext/misc/sqlar.c ******************/
7518: /*
7519: ** 2017-12-17
7520: **
7521: ** The author disclaims copyright to this source code.  In place of
7522: ** a legal notice, here is a blessing:
7523: **
7524: **    May you do good and not evil.
7525: **    May you find forgiveness for yourself and forgive others.
7526: **    May you share freely, never taking more than you give.
7527: **
7528: ******************************************************************************
7529: **
7530: ** Utility functions sqlar_compress() and sqlar_uncompress(). Useful
7531: ** for working with sqlar archives and used by the shell tool's built-in
7532: ** sqlar support.
7533: */
7534: /* #include "sqlite3ext.h" */
7535: SQLITE_EXTENSION_INIT1
7536: #include <zlib.h>
7537: #include <assert.h>
7538: 
7539: /*
7540: ** Implementation of the "sqlar_compress(X)" SQL function.
7541: **
7542: ** If the type of X is SQLITE_BLOB, and compressing that blob using
7543: ** zlib utility function compress() yields a smaller blob, return the
7544: ** compressed blob. Otherwise, return a copy of X.
7545: **
7546: ** SQLar uses the "zlib format" for compressed content.  The zlib format
7547: ** contains a two-byte identification header and a four-byte checksum at
7548: ** the end.  This is different from ZIP which uses the raw deflate format.
7549: **
7550: ** Future enhancements to SQLar might add support for new compression formats.
7551: ** If so, those new formats will be identified by alternative headers in the
7552: ** compressed data.
7553: */
7554: static void sqlarCompressFunc(
7555:   sqlite3_context *context,
7556:   int argc,
7557:   sqlite3_value **argv
7558: ){
7559:   assert( argc==1 );
7560:   if( sqlite3_value_type(argv[0])==SQLITE_BLOB ){
7561:     const Bytef *pData = sqlite3_value_blob(argv[0]);
7562:     uLong nData = sqlite3_value_bytes(argv[0]);
7563:     uLongf nOut = compressBound(nData);
7564:     Bytef *pOut;
7565: 
7566:     pOut = (Bytef*)sqlite3_malloc(nOut);
7567:     if( pOut==0 ){
7568:       sqlite3_result_error_nomem(context);
7569:       return;
7570:     }else{
7571:       if( Z_OK!=compress(pOut, &nOut, pData, nData) ){
7572:         sqlite3_result_error(context, "error in compress()", -1);
7573:       }else if( nOut<nData ){
7574:         sqlite3_result_blob(context, pOut, nOut, SQLITE_TRANSIENT);
7575:       }else{
7576:         sqlite3_result_value(context, argv[0]);
7577:       }
7578:       sqlite3_free(pOut);
7579:     }
7580:   }else{
7581:     sqlite3_result_value(context, argv[0]);
7582:   }
7583: }
7584: 
7585: /*
7586: ** Implementation of the "sqlar_uncompress(X,SZ)" SQL function
7587: **
7588: ** Parameter SZ is interpreted as an integer. If it is less than or
7589: ** equal to zero, then this function returns a copy of X. Or, if
7590: ** SZ is equal to the size of X when interpreted as a blob, also
7591: ** return a copy of X. Otherwise, decompress blob X using zlib
7592: ** utility function uncompress() and return the results (another
7593: ** blob).
7594: */
7595: static void sqlarUncompressFunc(
7596:   sqlite3_context *context,
7597:   int argc,
7598:   sqlite3_value **argv
7599: ){
7600:   uLong nData;
7601:   uLongf sz;
7602: 
7603:   assert( argc==2 );
7604:   sz = sqlite3_value_int(argv[1]);
7605: 
7606:   if( sz<=0 || sz==(nData = sqlite3_value_bytes(argv[0])) ){
7607:     sqlite3_result_value(context, argv[0]);
7608:   }else{
7609:     const Bytef *pData= sqlite3_value_blob(argv[0]);
7610:     Bytef *pOut = sqlite3_malloc(sz);
7611:     if( Z_OK!=uncompress(pOut, &sz, pData, nData) ){
7612:       sqlite3_result_error(context, "error in uncompress()", -1);
7613:     }else{
7614:       sqlite3_result_blob(context, pOut, sz, SQLITE_TRANSIENT);
7615:     }
7616:     sqlite3_free(pOut);
7617:   }
7618: }
7619: 
7620: 
7621: #ifdef _WIN32
7622: 
7623: #endif
7624: int sqlite3_sqlar_init(
7625:   sqlite3 *db,
7626:   char **pzErrMsg,
7627:   const sqlite3_api_routines *pApi
7628: ){
7629:   int rc = SQLITE_OK;
7630:   SQLITE_EXTENSION_INIT2(pApi);
7631:   (void)pzErrMsg;  /* Unused parameter */
7632:   rc = sqlite3_create_function(db, "sqlar_compress", 1,
7633:                                SQLITE_UTF8|SQLITE_INNOCUOUS, 0,
7634:                                sqlarCompressFunc, 0, 0);
7635:   if( rc==SQLITE_OK ){
7636:     rc = sqlite3_create_function(db, "sqlar_uncompress", 2,
7637:                                  SQLITE_UTF8|SQLITE_INNOCUOUS, 0,
7638:                                  sqlarUncompressFunc, 0, 0);
7639:   }
7640:   return rc;
7641: }
7642: 
7643: /************************* End ../ext/misc/sqlar.c ********************/
7644: #endif
7645: /************************* Begin ../ext/expert/sqlite3expert.h ******************/
7646: /*
7647: ** 2017 April 07
7648: **
7649: ** The author disclaims copyright to this source code.  In place of
7650: ** a legal notice, here is a blessing:
7651: **
7652: **    May you do good and not evil.
7653: **    May you find forgiveness for yourself and forgive others.
7654: **    May you share freely, never taking more than you give.
7655: **
7656: *************************************************************************
7657: */
7658: #if !defined(SQLITEEXPERT_H)
7659: #define SQLITEEXPERT_H 1
7660: /* #include "sqlite3.h" */
7661: 
7662: typedef struct sqlite3expert sqlite3expert;
7663: 
7664: /*
7665: ** Create a new sqlite3expert object.
7666: **
7667: ** If successful, a pointer to the new object is returned and (*pzErr) set
7668: ** to NULL. Or, if an error occurs, NULL is returned and (*pzErr) set to
7669: ** an English-language error message. In this case it is the responsibility
7670: ** of the caller to eventually free the error message buffer using
7671: ** sqlite3_free().
7672: */
7673: sqlite3expert *sqlite3_expert_new(sqlite3 *db, char **pzErr);
7674: 
7675: /*
7676: ** Configure an sqlite3expert object.
7677: **
7678: ** EXPERT_CONFIG_SAMPLE:
7679: **   By default, sqlite3_expert_analyze() generates sqlite_stat1 data for
7680: **   each candidate index. This involves scanning and sorting the entire
7681: **   contents of each user database table once for each candidate index
7682: **   associated with the table. For large databases, this can be
7683: **   prohibitively slow. This option allows the sqlite3expert object to
7684: **   be configured so that sqlite_stat1 data is instead generated based on a
7685: **   subset of each table, or so that no sqlite_stat1 data is used at all.
7686: **
7687: **   A single integer argument is passed to this option. If the value is less
7688: **   than or equal to zero, then no sqlite_stat1 data is generated or used by
7689: **   the analysis - indexes are recommended based on the database schema only.
7690: **   Or, if the value is 100 or greater, complete sqlite_stat1 data is
7691: **   generated for each candidate index (this is the default). Finally, if the
7692: **   value falls between 0 and 100, then it represents the percentage of user
7693: **   table rows that should be considered when generating sqlite_stat1 data.
7694: **
7695: **   Examples:
7696: **
7697: **     // Do not generate any sqlite_stat1 data
7698: **     sqlite3_expert_config(pExpert, EXPERT_CONFIG_SAMPLE, 0);
7699: **
7700: **     // Generate sqlite_stat1 data based on 10% of the rows in each table.
7701: **     sqlite3_expert_config(pExpert, EXPERT_CONFIG_SAMPLE, 10);
7702: */
7703: int sqlite3_expert_config(sqlite3expert *p, int op, ...);
7704: 
7705: #define EXPERT_CONFIG_SAMPLE 1    /* int */
7706: 
7707: /*
7708: ** Specify zero or more SQL statements to be included in the analysis.
7709: **
7710: ** Buffer zSql must contain zero or more complete SQL statements. This
7711: ** function parses all statements contained in the buffer and adds them
7712: ** to the internal list of statements to analyze. If successful, SQLITE_OK
7713: ** is returned and (*pzErr) set to NULL. Or, if an error occurs - for example
7714: ** due to a error in the SQL - an SQLite error code is returned and (*pzErr)
7715: ** may be set to point to an English language error message. In this case
7716: ** the caller is responsible for eventually freeing the error message buffer
7717: ** using sqlite3_free().
7718: **
7719: ** If an error does occur while processing one of the statements in the
7720: ** buffer passed as the second argument, none of the statements in the
7721: ** buffer are added to the analysis.
7722: **
7723: ** This function must be called before sqlite3_expert_analyze(). If a call
7724: ** to this function is made on an sqlite3expert object that has already
7725: ** been passed to sqlite3_expert_analyze() SQLITE_MISUSE is returned
7726: ** immediately and no statements are added to the analysis.
7727: */
7728: int sqlite3_expert_sql(
7729:   sqlite3expert *p,               /* From a successful sqlite3_expert_new() */
7730:   const char *zSql,               /* SQL statement(s) to add */
7731:   char **pzErr                    /* OUT: Error message (if any) */
7732: );
7733: 
7734: 
7735: /*
7736: ** This function is called after the sqlite3expert object has been configured
7737: ** with all SQL statements using sqlite3_expert_sql() to actually perform
7738: ** the analysis. Once this function has been called, it is not possible to
7739: ** add further SQL statements to the analysis.
7740: **
7741: ** If successful, SQLITE_OK is returned and (*pzErr) is set to NULL. Or, if
7742: ** an error occurs, an SQLite error code is returned and (*pzErr) set to
7743: ** point to a buffer containing an English language error message. In this
7744: ** case it is the responsibility of the caller to eventually free the buffer
7745: ** using sqlite3_free().
7746: **
7747: ** If an error does occur within this function, the sqlite3expert object
7748: ** is no longer useful for any purpose. At that point it is no longer
7749: ** possible to add further SQL statements to the object or to re-attempt
7750: ** the analysis. The sqlite3expert object must still be freed using a call
7751: ** sqlite3_expert_destroy().
7752: */
7753: int sqlite3_expert_analyze(sqlite3expert *p, char **pzErr);
7754: 
7755: /*
7756: ** Return the total number of statements loaded using sqlite3_expert_sql().
7757: ** The total number of SQL statements may be different from the total number
7758: ** to calls to sqlite3_expert_sql().
7759: */
7760: int sqlite3_expert_count(sqlite3expert*);
7761: 
7762: /*
7763: ** Return a component of the report.
7764: **
7765: ** This function is called after sqlite3_expert_analyze() to extract the
7766: ** results of the analysis. Each call to this function returns either a
7767: ** NULL pointer or a pointer to a buffer containing a nul-terminated string.
7768: ** The value passed as the third argument must be one of the EXPERT_REPORT_*
7769: ** #define constants defined below.
7770: **
7771: ** For some EXPERT_REPORT_* parameters, the buffer returned contains
7772: ** information relating to a specific SQL statement. In these cases that
7773: ** SQL statement is identified by the value passed as the second argument.
7774: ** SQL statements are numbered from 0 in the order in which they are parsed.
7775: ** If an out-of-range value (less than zero or equal to or greater than the
7776: ** value returned by sqlite3_expert_count()) is passed as the second argument
7777: ** along with such an EXPERT_REPORT_* parameter, NULL is always returned.
7778: **
7779: ** EXPERT_REPORT_SQL:
7780: **   Return the text of SQL statement iStmt.
7781: **
7782: ** EXPERT_REPORT_INDEXES:
7783: **   Return a buffer containing the CREATE INDEX statements for all recommended
7784: **   indexes for statement iStmt. If there are no new recommeded indexes, NULL
7785: **   is returned.
7786: **
7787: ** EXPERT_REPORT_PLAN:
7788: **   Return a buffer containing the EXPLAIN QUERY PLAN output for SQL query
7789: **   iStmt after the proposed indexes have been added to the database schema.
7790: **
7791: ** EXPERT_REPORT_CANDIDATES:
7792: **   Return a pointer to a buffer containing the CREATE INDEX statements
7793: **   for all indexes that were tested (for all SQL statements). The iStmt
7794: **   parameter is ignored for EXPERT_REPORT_CANDIDATES calls.
7795: */
7796: const char *sqlite3_expert_report(sqlite3expert*, int iStmt, int eReport);
7797: 
7798: /*
7799: ** Values for the third argument passed to sqlite3_expert_report().
7800: */
7801: #define EXPERT_REPORT_SQL        1
7802: #define EXPERT_REPORT_INDEXES    2
7803: #define EXPERT_REPORT_PLAN       3
7804: #define EXPERT_REPORT_CANDIDATES 4
7805: 
7806: /*
7807: ** Free an (sqlite3expert*) handle and all associated resources. There
7808: ** should be one call to this function for each successful call to
7809: ** sqlite3-expert_new().
7810: */
7811: void sqlite3_expert_destroy(sqlite3expert*);
7812: 
7813: #endif  /* !defined(SQLITEEXPERT_H) */
7814: 
7815: /************************* End ../ext/expert/sqlite3expert.h ********************/
7816: /************************* Begin ../ext/expert/sqlite3expert.c ******************/
7817: /*
7818: ** 2017 April 09
7819: **
7820: ** The author disclaims copyright to this source code.  In place of
7821: ** a legal notice, here is a blessing:
7822: **
7823: **    May you do good and not evil.
7824: **    May you find forgiveness for yourself and forgive others.
7825: **    May you share freely, never taking more than you give.
7826: **
7827: *************************************************************************
7828: */
7829: /* #include "sqlite3expert.h" */
7830: #include <assert.h>
7831: #include <string.h>
7832: #include <stdio.h>
7833: 
7834: #ifndef SQLITE_OMIT_VIRTUALTABLE
7835: 
7836: /* typedef sqlite3_int64 i64; */
7837: /* typedef sqlite3_uint64 u64; */
7838: 
7839: typedef struct IdxColumn IdxColumn;
7840: typedef struct IdxConstraint IdxConstraint;
7841: typedef struct IdxScan IdxScan;
7842: typedef struct IdxStatement IdxStatement;
7843: typedef struct IdxTable IdxTable;
7844: typedef struct IdxWrite IdxWrite;
7845: 
7846: #define STRLEN  (int)strlen
7847: 
7848: /*
7849: ** A temp table name that we assume no user database will actually use.
7850: ** If this assumption proves incorrect triggers on the table with the
7851: ** conflicting name will be ignored.
7852: */
7853: #define UNIQUE_TABLE_NAME "t592690916721053953805701627921227776"
7854: 
7855: /*
7856: ** A single constraint. Equivalent to either "col = ?" or "col < ?" (or
7857: ** any other type of single-ended range constraint on a column).
7858: **
7859: ** pLink:
7860: **   Used to temporarily link IdxConstraint objects into lists while
7861: **   creating candidate indexes.
7862: */
7863: struct IdxConstraint {
7864:   char *zColl;                    /* Collation sequence */
7865:   int bRange;                     /* True for range, false for eq */
7866:   int iCol;                       /* Constrained table column */
7867:   int bFlag;                      /* Used by idxFindCompatible() */
7868:   int bDesc;                      /* True if ORDER BY <expr> DESC */
7869:   IdxConstraint *pNext;           /* Next constraint in pEq or pRange list */
7870:   IdxConstraint *pLink;           /* See above */
7871: };
7872: 
7873: /*
7874: ** A single scan of a single table.
7875: */
7876: struct IdxScan {
7877:   IdxTable *pTab;                 /* Associated table object */
7878:   int iDb;                        /* Database containing table zTable */
7879:   i64 covering;                   /* Mask of columns required for cov. index */
7880:   IdxConstraint *pOrder;          /* ORDER BY columns */
7881:   IdxConstraint *pEq;             /* List of == constraints */
7882:   IdxConstraint *pRange;          /* List of < constraints */
7883:   IdxScan *pNextScan;             /* Next IdxScan object for same analysis */
7884: };
7885: 
7886: /*
7887: ** Information regarding a single database table. Extracted from
7888: ** "PRAGMA table_info" by function idxGetTableInfo().
7889: */
7890: struct IdxColumn {
7891:   char *zName;
7892:   char *zColl;
7893:   int iPk;
7894: };
7895: struct IdxTable {
7896:   int nCol;
7897:   char *zName;                    /* Table name */
7898:   IdxColumn *aCol;
7899:   IdxTable *pNext;                /* Next table in linked list of all tables */
7900: };
7901: 
7902: /*
7903: ** An object of the following type is created for each unique table/write-op
7904: ** seen. The objects are stored in a singly-linked list beginning at
7905: ** sqlite3expert.pWrite.
7906: */
7907: struct IdxWrite {
7908:   IdxTable *pTab;
7909:   int eOp;                        /* SQLITE_UPDATE, DELETE or INSERT */
7910:   IdxWrite *pNext;
7911: };
7912: 
7913: /*
7914: ** Each statement being analyzed is represented by an instance of this
7915: ** structure.
7916: */
7917: struct IdxStatement {
7918:   int iId;                        /* Statement number */
7919:   char *zSql;                     /* SQL statement */
7920:   char *zIdx;                     /* Indexes */
7921:   char *zEQP;                     /* Plan */
7922:   IdxStatement *pNext;
7923: };
7924: 
7925: 
7926: /*
7927: ** A hash table for storing strings. With space for a payload string
7928: ** with each entry. Methods are:
7929: **
7930: **   idxHashInit()
7931: **   idxHashClear()
7932: **   idxHashAdd()
7933: **   idxHashSearch()
7934: */
7935: #define IDX_HASH_SIZE 1023
7936: typedef struct IdxHashEntry IdxHashEntry;
7937: typedef struct IdxHash IdxHash;
7938: struct IdxHashEntry {
7939:   char *zKey;                     /* nul-terminated key */
7940:   char *zVal;                     /* nul-terminated value string */
7941:   char *zVal2;                    /* nul-terminated value string 2 */
7942:   IdxHashEntry *pHashNext;        /* Next entry in same hash bucket */
7943:   IdxHashEntry *pNext;            /* Next entry in hash */
7944: };
7945: struct IdxHash {
7946:   IdxHashEntry *pFirst;
7947:   IdxHashEntry *aHash[IDX_HASH_SIZE];
7948: };
7949: 
7950: /*
7951: ** sqlite3expert object.
7952: */
7953: struct sqlite3expert {
7954:   int iSample;                    /* Percentage of tables to sample for stat1 */
7955:   sqlite3 *db;                    /* User database */
7956:   sqlite3 *dbm;                   /* In-memory db for this analysis */
7957:   sqlite3 *dbv;                   /* Vtab schema for this analysis */
7958:   IdxTable *pTable;               /* List of all IdxTable objects */
7959:   IdxScan *pScan;                 /* List of scan objects */
7960:   IdxWrite *pWrite;               /* List of write objects */
7961:   IdxStatement *pStatement;       /* List of IdxStatement objects */
7962:   int bRun;                       /* True once analysis has run */
7963:   char **pzErrmsg;
7964:   int rc;                         /* Error code from whereinfo hook */
7965:   IdxHash hIdx;                   /* Hash containing all candidate indexes */
7966:   char *zCandidates;              /* For EXPERT_REPORT_CANDIDATES */
7967: };
7968: 
7969: 
7970: /*
7971: ** Allocate and return nByte bytes of zeroed memory using sqlite3_malloc().
7972: ** If the allocation fails, set *pRc to SQLITE_NOMEM and return NULL.
7973: */
7974: static void *idxMalloc(int *pRc, int nByte){
7975:   void *pRet;
7976:   assert( *pRc==SQLITE_OK );
7977:   assert( nByte>0 );
7978:   pRet = sqlite3_malloc(nByte);
7979:   if( pRet ){
7980:     memset(pRet, 0, nByte);
7981:   }else{
7982:     *pRc = SQLITE_NOMEM;
7983:   }
7984:   return pRet;
7985: }
7986: 
7987: /*
7988: ** Initialize an IdxHash hash table.
7989: */
7990: static void idxHashInit(IdxHash *pHash){
7991:   memset(pHash, 0, sizeof(IdxHash));
7992: }
7993: 
7994: /*
7995: ** Reset an IdxHash hash table.
7996: */
7997: static void idxHashClear(IdxHash *pHash){
7998:   int i;
7999:   for(i=0; i<IDX_HASH_SIZE; i++){
8000:     IdxHashEntry *pEntry;
8001:     IdxHashEntry *pNext;
8002:     for(pEntry=pHash->aHash[i]; pEntry; pEntry=pNext){
8003:       pNext = pEntry->pHashNext;
8004:       sqlite3_free(pEntry->zVal2);
8005:       sqlite3_free(pEntry);
8006:     }
8007:   }
8008:   memset(pHash, 0, sizeof(IdxHash));
8009: }
8010: 
8011: /*
8012: ** Return the index of the hash bucket that the string specified by the
8013: ** arguments to this function belongs.
8014: */
8015: static int idxHashString(const char *z, int n){
8016:   unsigned int ret = 0;
8017:   int i;
8018:   for(i=0; i<n; i++){
8019:     ret += (ret<<3) + (unsigned char)(z[i]);
8020:   }
8021:   return (int)(ret % IDX_HASH_SIZE);
8022: }
8023: 
8024: /*
8025: ** If zKey is already present in the hash table, return non-zero and do
8026: ** nothing. Otherwise, add an entry with key zKey and payload string zVal to
8027: ** the hash table passed as the second argument.
8028: */
8029: static int idxHashAdd(
8030:   int *pRc,
8031:   IdxHash *pHash,
8032:   const char *zKey,
8033:   const char *zVal
8034: ){
8035:   int nKey = STRLEN(zKey);
8036:   int iHash = idxHashString(zKey, nKey);
8037:   int nVal = (zVal ? STRLEN(zVal) : 0);
8038:   IdxHashEntry *pEntry;
8039:   assert( iHash>=0 );
8040:   for(pEntry=pHash->aHash[iHash]; pEntry; pEntry=pEntry->pHashNext){
8041:     if( STRLEN(pEntry->zKey)==nKey && 0==memcmp(pEntry->zKey, zKey, nKey) ){
8042:       return 1;
8043:     }
8044:   }
8045:   pEntry = idxMalloc(pRc, sizeof(IdxHashEntry) + nKey+1 + nVal+1);
8046:   if( pEntry ){
8047:     pEntry->zKey = (char*)&pEntry[1];
8048:     memcpy(pEntry->zKey, zKey, nKey);
8049:     if( zVal ){
8050:       pEntry->zVal = &pEntry->zKey[nKey+1];
8051:       memcpy(pEntry->zVal, zVal, nVal);
8052:     }
8053:     pEntry->pHashNext = pHash->aHash[iHash];
8054:     pHash->aHash[iHash] = pEntry;
8055: 
8056:     pEntry->pNext = pHash->pFirst;
8057:     pHash->pFirst = pEntry;
8058:   }
8059:   return 0;
8060: }
8061: 
8062: /*
8063: ** If zKey/nKey is present in the hash table, return a pointer to the
8064: ** hash-entry object.
8065: */
8066: static IdxHashEntry *idxHashFind(IdxHash *pHash, const char *zKey, int nKey){
8067:   int iHash;
8068:   IdxHashEntry *pEntry;
8069:   if( nKey<0 ) nKey = STRLEN(zKey);
8070:   iHash = idxHashString(zKey, nKey);
8071:   assert( iHash>=0 );
8072:   for(pEntry=pHash->aHash[iHash]; pEntry; pEntry=pEntry->pHashNext){
8073:     if( STRLEN(pEntry->zKey)==nKey && 0==memcmp(pEntry->zKey, zKey, nKey) ){
8074:       return pEntry;
8075:     }
8076:   }
8077:   return 0;
8078: }
8079: 
8080: /*
8081: ** If the hash table contains an entry with a key equal to the string
8082: ** passed as the final two arguments to this function, return a pointer
8083: ** to the payload string. Otherwise, if zKey/nKey is not present in the
8084: ** hash table, return NULL.
8085: */
8086: static const char *idxHashSearch(IdxHash *pHash, const char *zKey, int nKey){
8087:   IdxHashEntry *pEntry = idxHashFind(pHash, zKey, nKey);
8088:   if( pEntry ) return pEntry->zVal;
8089:   return 0;
8090: }
8091: 
8092: /*
8093: ** Allocate and return a new IdxConstraint object. Set the IdxConstraint.zColl
8094: ** variable to point to a copy of nul-terminated string zColl.
8095: */
8096: static IdxConstraint *idxNewConstraint(int *pRc, const char *zColl){
8097:   IdxConstraint *pNew;
8098:   int nColl = STRLEN(zColl);
8099: 
8100:   assert( *pRc==SQLITE_OK );
8101:   pNew = (IdxConstraint*)idxMalloc(pRc, sizeof(IdxConstraint) * nColl + 1);
8102:   if( pNew ){
8103:     pNew->zColl = (char*)&pNew[1];
8104:     memcpy(pNew->zColl, zColl, nColl+1);
8105:   }
8106:   return pNew;
8107: }
8108: 
8109: /*
8110: ** An error associated with database handle db has just occurred. Pass
8111: ** the error message to callback function xOut.
8112: */
8113: static void idxDatabaseError(
8114:   sqlite3 *db,                    /* Database handle */
8115:   char **pzErrmsg                 /* Write error here */
8116: ){
8117:   *pzErrmsg = sqlite3_mprintf("%s", sqlite3_errmsg(db));
8118: }
8119: 
8120: /*
8121: ** Prepare an SQL statement.
8122: */
8123: static int idxPrepareStmt(
8124:   sqlite3 *db,                    /* Database handle to compile against */
8125:   sqlite3_stmt **ppStmt,          /* OUT: Compiled SQL statement */
8126:   char **pzErrmsg,                /* OUT: sqlite3_malloc()ed error message */
8127:   const char *zSql                /* SQL statement to compile */
8128: ){
8129:   int rc = sqlite3_prepare_v2(db, zSql, -1, ppStmt, 0);
8130:   if( rc!=SQLITE_OK ){
8131:     *ppStmt = 0;
8132:     idxDatabaseError(db, pzErrmsg);
8133:   }
8134:   return rc;
8135: }
8136: 
8137: /*
8138: ** Prepare an SQL statement using the results of a printf() formatting.
8139: */
8140: static int idxPrintfPrepareStmt(
8141:   sqlite3 *db,                    /* Database handle to compile against */
8142:   sqlite3_stmt **ppStmt,          /* OUT: Compiled SQL statement */
8143:   char **pzErrmsg,                /* OUT: sqlite3_malloc()ed error message */
8144:   const char *zFmt,               /* printf() format of SQL statement */
8145:   ...                             /* Trailing printf() arguments */
8146: ){
8147:   va_list ap;
8148:   int rc;
8149:   char *zSql;
8150:   va_start(ap, zFmt);
8151:   zSql = sqlite3_vmprintf(zFmt, ap);
8152:   if( zSql==0 ){
8153:     rc = SQLITE_NOMEM;
8154:   }else{
8155:     rc = idxPrepareStmt(db, ppStmt, pzErrmsg, zSql);
8156:     sqlite3_free(zSql);
8157:   }
8158:   va_end(ap);
8159:   return rc;
8160: }
8161: 
8162: 
8163: /*************************************************************************
8164: ** Beginning of virtual table implementation.
8165: */
8166: typedef struct ExpertVtab ExpertVtab;
8167: struct ExpertVtab {
8168:   sqlite3_vtab base;
8169:   IdxTable *pTab;
8170:   sqlite3expert *pExpert;
8171: };
8172: 
8173: typedef struct ExpertCsr ExpertCsr;
8174: struct ExpertCsr {
8175:   sqlite3_vtab_cursor base;
8176:   sqlite3_stmt *pData;
8177: };
8178: 
8179: static char *expertDequote(const char *zIn){
8180:   int n = STRLEN(zIn);
8181:   char *zRet = sqlite3_malloc(n);
8182: 
8183:   assert( zIn[0]=='\'' );
8184:   assert( zIn[n-1]=='\'' );
8185: 
8186:   if( zRet ){
8187:     int iOut = 0;
8188:     int iIn = 0;
8189:     for(iIn=1; iIn<(n-1); iIn++){
8190:       if( zIn[iIn]=='\'' ){
8191:         assert( zIn[iIn+1]=='\'' );
8192:         iIn++;
8193:       }
8194:       zRet[iOut++] = zIn[iIn];
8195:     }
8196:     zRet[iOut] = '\0';
8197:   }
8198: 
8199:   return zRet;
8200: }
8201: 
8202: /*
8203: ** This function is the implementation of both the xConnect and xCreate
8204: ** methods of the r-tree virtual table.
8205: **
8206: **   argv[0]   -> module name
8207: **   argv[1]   -> database name
8208: **   argv[2]   -> table name
8209: **   argv[...] -> column names...
8210: */
8211: static int expertConnect(
8212:   sqlite3 *db,
8213:   void *pAux,
8214:   int argc, const char *const*argv,
8215:   sqlite3_vtab **ppVtab,
8216:   char **pzErr
8217: ){
8218:   sqlite3expert *pExpert = (sqlite3expert*)pAux;
8219:   ExpertVtab *p = 0;
8220:   int rc;
8221: 
8222:   if( argc!=4 ){
8223:     *pzErr = sqlite3_mprintf("internal error!");
8224:     rc = SQLITE_ERROR;
8225:   }else{
8226:     char *zCreateTable = expertDequote(argv[3]);
8227:     if( zCreateTable ){
8228:       rc = sqlite3_declare_vtab(db, zCreateTable);
8229:       if( rc==SQLITE_OK ){
8230:         p = idxMalloc(&rc, sizeof(ExpertVtab));
8231:       }
8232:       if( rc==SQLITE_OK ){
8233:         p->pExpert = pExpert;
8234:         p->pTab = pExpert->pTable;
8235:         assert( sqlite3_stricmp(p->pTab->zName, argv[2])==0 );
8236:       }
8237:       sqlite3_free(zCreateTable);
8238:     }else{
8239:       rc = SQLITE_NOMEM;
8240:     }
8241:   }
8242: 
8243:   *ppVtab = (sqlite3_vtab*)p;
8244:   return rc;
8245: }
8246: 
8247: static int expertDisconnect(sqlite3_vtab *pVtab){
8248:   ExpertVtab *p = (ExpertVtab*)pVtab;
8249:   sqlite3_free(p);
8250:   return SQLITE_OK;
8251: }
8252: 
8253: static int expertBestIndex(sqlite3_vtab *pVtab, sqlite3_index_info *pIdxInfo){
8254:   ExpertVtab *p = (ExpertVtab*)pVtab;
8255:   int rc = SQLITE_OK;
8256:   int n = 0;
8257:   IdxScan *pScan;
8258:   const int opmask =
8259:     SQLITE_INDEX_CONSTRAINT_EQ | SQLITE_INDEX_CONSTRAINT_GT |
8260:     SQLITE_INDEX_CONSTRAINT_LT | SQLITE_INDEX_CONSTRAINT_GE |
8261:     SQLITE_INDEX_CONSTRAINT_LE;
8262: 
8263:   pScan = idxMalloc(&rc, sizeof(IdxScan));
8264:   if( pScan ){
8265:     int i;
8266: 
8267:     /* Link the new scan object into the list */
8268:     pScan->pTab = p->pTab;
8269:     pScan->pNextScan = p->pExpert->pScan;
8270:     p->pExpert->pScan = pScan;
8271: 
8272:     /* Add the constraints to the IdxScan object */
8273:     for(i=0; i<pIdxInfo->nConstraint; i++){
8274:       struct sqlite3_index_constraint *pCons = &pIdxInfo->aConstraint[i];
8275:       if( pCons->usable
8276:        && pCons->iColumn>=0
8277:        && p->pTab->aCol[pCons->iColumn].iPk==0
8278:        && (pCons->op & opmask)
8279:       ){
8280:         IdxConstraint *pNew;
8281:         const char *zColl = sqlite3_vtab_collation(pIdxInfo, i);
8282:         pNew = idxNewConstraint(&rc, zColl);
8283:         if( pNew ){
8284:           pNew->iCol = pCons->iColumn;
8285:           if( pCons->op==SQLITE_INDEX_CONSTRAINT_EQ ){
8286:             pNew->pNext = pScan->pEq;
8287:             pScan->pEq = pNew;
8288:           }else{
8289:             pNew->bRange = 1;
8290:             pNew->pNext = pScan->pRange;
8291:             pScan->pRange = pNew;
8292:           }
8293:         }
8294:         n++;
8295:         pIdxInfo->aConstraintUsage[i].argvIndex = n;
8296:       }
8297:     }
8298: 
8299:     /* Add the ORDER BY to the IdxScan object */
8300:     for(i=pIdxInfo->nOrderBy-1; i>=0; i--){
8301:       int iCol = pIdxInfo->aOrderBy[i].iColumn;
8302:       if( iCol>=0 ){
8303:         IdxConstraint *pNew = idxNewConstraint(&rc, p->pTab->aCol[iCol].zColl);
8304:         if( pNew ){
8305:           pNew->iCol = iCol;
8306:           pNew->bDesc = pIdxInfo->aOrderBy[i].desc;
8307:           pNew->pNext = pScan->pOrder;
8308:           pNew->pLink = pScan->pOrder;
8309:           pScan->pOrder = pNew;
8310:           n++;
8311:         }
8312:       }
8313:     }
8314:   }
8315: 
8316:   pIdxInfo->estimatedCost = 1000000.0 / (n+1);
8317:   return rc;
8318: }
8319: 
8320: static int expertUpdate(
8321:   sqlite3_vtab *pVtab,
8322:   int nData,
8323:   sqlite3_value **azData,
8324:   sqlite_int64 *pRowid
8325: ){
8326:   (void)pVtab;
8327:   (void)nData;
8328:   (void)azData;
8329:   (void)pRowid;
8330:   return SQLITE_OK;
8331: }
8332: 
8333: /*
8334: ** Virtual table module xOpen method.
8335: */
8336: static int expertOpen(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCursor){
8337:   int rc = SQLITE_OK;
8338:   ExpertCsr *pCsr;
8339:   (void)pVTab;
8340:   pCsr = idxMalloc(&rc, sizeof(ExpertCsr));
8341:   *ppCursor = (sqlite3_vtab_cursor*)pCsr;
8342:   return rc;
8343: }
8344: 
8345: /*
8346: ** Virtual table module xClose method.
8347: */
8348: static int expertClose(sqlite3_vtab_cursor *cur){
8349:   ExpertCsr *pCsr = (ExpertCsr*)cur;
8350:   sqlite3_finalize(pCsr->pData);
8351:   sqlite3_free(pCsr);
8352:   return SQLITE_OK;
8353: }
8354: 
8355: /*
8356: ** Virtual table module xEof method.
8357: **
8358: ** Return non-zero if the cursor does not currently point to a valid
8359: ** record (i.e if the scan has finished), or zero otherwise.
8360: */
8361: static int expertEof(sqlite3_vtab_cursor *cur){
8362:   ExpertCsr *pCsr = (ExpertCsr*)cur;
8363:   return pCsr->pData==0;
8364: }
8365: 
8366: /*
8367: ** Virtual table module xNext method.
8368: */
8369: static int expertNext(sqlite3_vtab_cursor *cur){
8370:   ExpertCsr *pCsr = (ExpertCsr*)cur;
8371:   int rc = SQLITE_OK;
8372: 
8373:   assert( pCsr->pData );
8374:   rc = sqlite3_step(pCsr->pData);
8375:   if( rc!=SQLITE_ROW ){
8376:     rc = sqlite3_finalize(pCsr->pData);
8377:     pCsr->pData = 0;
8378:   }else{
8379:     rc = SQLITE_OK;
8380:   }
8381: 
8382:   return rc;
8383: }
8384: 
8385: /*
8386: ** Virtual table module xRowid method.
8387: */
8388: static int expertRowid(sqlite3_vtab_cursor *cur, sqlite_int64 *pRowid){
8389:   (void)cur;
8390:   *pRowid = 0;
8391:   return SQLITE_OK;
8392: }
8393: 
8394: /*
8395: ** Virtual table module xColumn method.
8396: */
8397: static int expertColumn(sqlite3_vtab_cursor *cur, sqlite3_context *ctx, int i){
8398:   ExpertCsr *pCsr = (ExpertCsr*)cur;
8399:   sqlite3_value *pVal;
8400:   pVal = sqlite3_column_value(pCsr->pData, i);
8401:   if( pVal ){
8402:     sqlite3_result_value(ctx, pVal);
8403:   }
8404:   return SQLITE_OK;
8405: }
8406: 
8407: /*
8408: ** Virtual table module xFilter method.
8409: */
8410: static int expertFilter(
8411:   sqlite3_vtab_cursor *cur,
8412:   int idxNum, const char *idxStr,
8413:   int argc, sqlite3_value **argv
8414: ){
8415:   ExpertCsr *pCsr = (ExpertCsr*)cur;
8416:   ExpertVtab *pVtab = (ExpertVtab*)(cur->pVtab);
8417:   sqlite3expert *pExpert = pVtab->pExpert;
8418:   int rc;
8419: 
8420:   (void)idxNum;
8421:   (void)idxStr;
8422:   (void)argc;
8423:   (void)argv;
8424:   rc = sqlite3_finalize(pCsr->pData);
8425:   pCsr->pData = 0;
8426:   if( rc==SQLITE_OK ){
8427:     rc = idxPrintfPrepareStmt(pExpert->db, &pCsr->pData, &pVtab->base.zErrMsg,
8428:         "SELECT * FROM main.%Q WHERE sample()", pVtab->pTab->zName
8429:     );
8430:   }
8431: 
8432:   if( rc==SQLITE_OK ){
8433:     rc = expertNext(cur);
8434:   }
8435:   return rc;
8436: }
8437: 
8438: static int idxRegisterVtab(sqlite3expert *p){
8439:   static sqlite3_module expertModule = {
8440:     2,                            /* iVersion */
8441:     expertConnect,                /* xCreate - create a table */
8442:     expertConnect,                /* xConnect - connect to an existing table */
8443:     expertBestIndex,              /* xBestIndex - Determine search strategy */
8444:     expertDisconnect,             /* xDisconnect - Disconnect from a table */
8445:     expertDisconnect,             /* xDestroy - Drop a table */
8446:     expertOpen,                   /* xOpen - open a cursor */
8447:     expertClose,                  /* xClose - close a cursor */
8448:     expertFilter,                 /* xFilter - configure scan constraints */
8449:     expertNext,                   /* xNext - advance a cursor */
8450:     expertEof,                    /* xEof */
8451:     expertColumn,                 /* xColumn - read data */
8452:     expertRowid,                  /* xRowid - read data */
8453:     expertUpdate,                 /* xUpdate - write data */
8454:     0,                            /* xBegin - begin transaction */
8455:     0,                            /* xSync - sync transaction */
8456:     0,                            /* xCommit - commit transaction */
8457:     0,                            /* xRollback - rollback transaction */
8458:     0,                            /* xFindFunction - function overloading */
8459:     0,                            /* xRename - rename the table */
8460:     0,                            /* xSavepoint */
8461:     0,                            /* xRelease */
8462:     0,                            /* xRollbackTo */
8463:     0,                            /* xShadowName */
8464:   };
8465: 
8466:   return sqlite3_create_module(p->dbv, "expert", &expertModule, (void*)p);
8467: }
8468: /*
8469: ** End of virtual table implementation.
8470: *************************************************************************/
8471: /*
8472: ** Finalize SQL statement pStmt. If (*pRc) is SQLITE_OK when this function
8473: ** is called, set it to the return value of sqlite3_finalize() before
8474: ** returning. Otherwise, discard the sqlite3_finalize() return value.
8475: */
8476: static void idxFinalize(int *pRc, sqlite3_stmt *pStmt){
8477:   int rc = sqlite3_finalize(pStmt);
8478:   if( *pRc==SQLITE_OK ) *pRc = rc;
8479: }
8480: 
8481: /*
8482: ** Attempt to allocate an IdxTable structure corresponding to table zTab
8483: ** in the main database of connection db. If successful, set (*ppOut) to
8484: ** point to the new object and return SQLITE_OK. Otherwise, return an
8485: ** SQLite error code and set (*ppOut) to NULL. In this case *pzErrmsg may be
8486: ** set to point to an error string.
8487: **
8488: ** It is the responsibility of the caller to eventually free either the
8489: ** IdxTable object or error message using sqlite3_free().
8490: */
8491: static int idxGetTableInfo(
8492:   sqlite3 *db,                    /* Database connection to read details from */
8493:   const char *zTab,               /* Table name */
8494:   IdxTable **ppOut,               /* OUT: New object (if successful) */
8495:   char **pzErrmsg                 /* OUT: Error message (if not) */
8496: ){
8497:   sqlite3_stmt *p1 = 0;
8498:   int nCol = 0;
8499:   int nTab = STRLEN(zTab);
8500:   int nByte = sizeof(IdxTable) + nTab + 1;
8501:   IdxTable *pNew = 0;
8502:   int rc, rc2;
8503:   char *pCsr = 0;
8504: 
8505:   rc = idxPrintfPrepareStmt(db, &p1, pzErrmsg, "PRAGMA table_info=%Q", zTab);
8506:   while( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(p1) ){
8507:     const char *zCol = (const char*)sqlite3_column_text(p1, 1);
8508:     nByte += 1 + STRLEN(zCol);
8509:     rc = sqlite3_table_column_metadata(
8510:         db, "main", zTab, zCol, 0, &zCol, 0, 0, 0
8511:     );
8512:     nByte += 1 + STRLEN(zCol);
8513:     nCol++;
8514:   }
8515:   rc2 = sqlite3_reset(p1);
8516:   if( rc==SQLITE_OK ) rc = rc2;
8517: 
8518:   nByte += sizeof(IdxColumn) * nCol;
8519:   if( rc==SQLITE_OK ){
8520:     pNew = idxMalloc(&rc, nByte);
8521:   }
8522:   if( rc==SQLITE_OK ){
8523:     pNew->aCol = (IdxColumn*)&pNew[1];
8524:     pNew->nCol = nCol;
8525:     pCsr = (char*)&pNew->aCol[nCol];
8526:   }
8527: 
8528:   nCol = 0;
8529:   while( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(p1) ){
8530:     const char *zCol = (const char*)sqlite3_column_text(p1, 1);
8531:     int nCopy = STRLEN(zCol) + 1;
8532:     pNew->aCol[nCol].zName = pCsr;
8533:     pNew->aCol[nCol].iPk = sqlite3_column_int(p1, 5);
8534:     memcpy(pCsr, zCol, nCopy);
8535:     pCsr += nCopy;
8536: 
8537:     rc = sqlite3_table_column_metadata(
8538:         db, "main", zTab, zCol, 0, &zCol, 0, 0, 0
8539:     );
8540:     if( rc==SQLITE_OK ){
8541:       nCopy = STRLEN(zCol) + 1;
8542:       pNew->aCol[nCol].zColl = pCsr;
8543:       memcpy(pCsr, zCol, nCopy);
8544:       pCsr += nCopy;
8545:     }
8546: 
8547:     nCol++;
8548:   }
8549:   idxFinalize(&rc, p1);
8550: 
8551:   if( rc!=SQLITE_OK ){
8552:     sqlite3_free(pNew);
8553:     pNew = 0;
8554:   }else{
8555:     pNew->zName = pCsr;
8556:     memcpy(pNew->zName, zTab, nTab+1);
8557:   }
8558: 
8559:   *ppOut = pNew;
8560:   return rc;
8561: }
8562: 
8563: /*
8564: ** This function is a no-op if *pRc is set to anything other than
8565: ** SQLITE_OK when it is called.
8566: **
8567: ** If *pRc is initially set to SQLITE_OK, then the text specified by
8568: ** the printf() style arguments is appended to zIn and the result returned
8569: ** in a buffer allocated by sqlite3_malloc(). sqlite3_free() is called on
8570: ** zIn before returning.
8571: */
8572: static char *idxAppendText(int *pRc, char *zIn, const char *zFmt, ...){
8573:   va_list ap;
8574:   char *zAppend = 0;
8575:   char *zRet = 0;
8576:   int nIn = zIn ? STRLEN(zIn) : 0;
8577:   int nAppend = 0;
8578:   va_start(ap, zFmt);
8579:   if( *pRc==SQLITE_OK ){
8580:     zAppend = sqlite3_vmprintf(zFmt, ap);
8581:     if( zAppend ){
8582:       nAppend = STRLEN(zAppend);
8583:       zRet = (char*)sqlite3_malloc(nIn + nAppend + 1);
8584:     }
8585:     if( zAppend && zRet ){
8586:       if( nIn ) memcpy(zRet, zIn, nIn);
8587:       memcpy(&zRet[nIn], zAppend, nAppend+1);
8588:     }else{
8589:       sqlite3_free(zRet);
8590:       zRet = 0;
8591:       *pRc = SQLITE_NOMEM;
8592:     }
8593:     sqlite3_free(zAppend);
8594:     sqlite3_free(zIn);
8595:   }
8596:   va_end(ap);
8597:   return zRet;
8598: }
8599: 
8600: /*
8601: ** Return true if zId must be quoted in order to use it as an SQL
8602: ** identifier, or false otherwise.
8603: */
8604: static int idxIdentifierRequiresQuotes(const char *zId){
8605:   int i;
8606:   for(i=0; zId[i]; i++){
8607:     if( !(zId[i]=='_')
8608:      && !(zId[i]>='0' && zId[i]<='9')
8609:      && !(zId[i]>='a' && zId[i]<='z')
8610:      && !(zId[i]>='A' && zId[i]<='Z')
8611:     ){
8612:       return 1;
8613:     }
8614:   }
8615:   return 0;
8616: }
8617: 
8618: /*
8619: ** This function appends an index column definition suitable for constraint
8620: ** pCons to the string passed as zIn and returns the result.
8621: */
8622: static char *idxAppendColDefn(
8623:   int *pRc,                       /* IN/OUT: Error code */
8624:   char *zIn,                      /* Column defn accumulated so far */
8625:   IdxTable *pTab,                 /* Table index will be created on */
8626:   IdxConstraint *pCons
8627: ){
8628:   char *zRet = zIn;
8629:   IdxColumn *p = &pTab->aCol[pCons->iCol];
8630:   if( zRet ) zRet = idxAppendText(pRc, zRet, ", ");
8631: 
8632:   if( idxIdentifierRequiresQuotes(p->zName) ){
8633:     zRet = idxAppendText(pRc, zRet, "%Q", p->zName);
8634:   }else{
8635:     zRet = idxAppendText(pRc, zRet, "%s", p->zName);
8636:   }
8637: 
8638:   if( sqlite3_stricmp(p->zColl, pCons->zColl) ){
8639:     if( idxIdentifierRequiresQuotes(pCons->zColl) ){
8640:       zRet = idxAppendText(pRc, zRet, " COLLATE %Q", pCons->zColl);
8641:     }else{
8642:       zRet = idxAppendText(pRc, zRet, " COLLATE %s", pCons->zColl);
8643:     }
8644:   }
8645: 
8646:   if( pCons->bDesc ){
8647:     zRet = idxAppendText(pRc, zRet, " DESC");
8648:   }
8649:   return zRet;
8650: }
8651: 
8652: /*
8653: ** Search database dbm for an index compatible with the one idxCreateFromCons()
8654: ** would create from arguments pScan, pEq and pTail. If no error occurs and
8655: ** such an index is found, return non-zero. Or, if no such index is found,
8656: ** return zero.
8657: **
8658: ** If an error occurs, set *pRc to an SQLite error code and return zero.
8659: */
8660: static int idxFindCompatible(
8661:   int *pRc,                       /* OUT: Error code */
8662:   sqlite3* dbm,                   /* Database to search */
8663:   IdxScan *pScan,                 /* Scan for table to search for index on */
8664:   IdxConstraint *pEq,             /* List of == constraints */
8665:   IdxConstraint *pTail            /* List of range constraints */
8666: ){
8667:   const char *zTbl = pScan->pTab->zName;
8668:   sqlite3_stmt *pIdxList = 0;
8669:   IdxConstraint *pIter;
8670:   int nEq = 0;                    /* Number of elements in pEq */
8671:   int rc;
8672: 
8673:   /* Count the elements in list pEq */
8674:   for(pIter=pEq; pIter; pIter=pIter->pLink) nEq++;
8675: 
8676:   rc = idxPrintfPrepareStmt(dbm, &pIdxList, 0, "PRAGMA index_list=%Q", zTbl);
8677:   while( rc==SQLITE_OK && sqlite3_step(pIdxList)==SQLITE_ROW ){
8678:     int bMatch = 1;
8679:     IdxConstraint *pT = pTail;
8680:     sqlite3_stmt *pInfo = 0;
8681:     const char *zIdx = (const char*)sqlite3_column_text(pIdxList, 1);
8682: 
8683:     /* Zero the IdxConstraint.bFlag values in the pEq list */
8684:     for(pIter=pEq; pIter; pIter=pIter->pLink) pIter->bFlag = 0;
8685: 
8686:     rc = idxPrintfPrepareStmt(dbm, &pInfo, 0, "PRAGMA index_xInfo=%Q", zIdx);
8687:     while( rc==SQLITE_OK && sqlite3_step(pInfo)==SQLITE_ROW ){
8688:       int iIdx = sqlite3_column_int(pInfo, 0);
8689:       int iCol = sqlite3_column_int(pInfo, 1);
8690:       const char *zColl = (const char*)sqlite3_column_text(pInfo, 4);
8691: 
8692:       if( iIdx<nEq ){
8693:         for(pIter=pEq; pIter; pIter=pIter->pLink){
8694:           if( pIter->bFlag ) continue;
8695:           if( pIter->iCol!=iCol ) continue;
8696:           if( sqlite3_stricmp(pIter->zColl, zColl) ) continue;
8697:           pIter->bFlag = 1;
8698:           break;
8699:         }
8700:         if( pIter==0 ){
8701:           bMatch = 0;
8702:           break;
8703:         }
8704:       }else{
8705:         if( pT ){
8706:           if( pT->iCol!=iCol || sqlite3_stricmp(pT->zColl, zColl) ){
8707:             bMatch = 0;
8708:             break;
8709:           }
8710:           pT = pT->pLink;
8711:         }
8712:       }
8713:     }
8714:     idxFinalize(&rc, pInfo);
8715: 
8716:     if( rc==SQLITE_OK && bMatch ){
8717:       sqlite3_finalize(pIdxList);
8718:       return 1;
8719:     }
8720:   }
8721:   idxFinalize(&rc, pIdxList);
8722: 
8723:   *pRc = rc;
8724:   return 0;
8725: }
8726: 
8727: static int idxCreateFromCons(
8728:   sqlite3expert *p,
8729:   IdxScan *pScan,
8730:   IdxConstraint *pEq,
8731:   IdxConstraint *pTail
8732: ){
8733:   sqlite3 *dbm = p->dbm;
8734:   int rc = SQLITE_OK;
8735:   if( (pEq || pTail) && 0==idxFindCompatible(&rc, dbm, pScan, pEq, pTail) ){
8736:     IdxTable *pTab = pScan->pTab;
8737:     char *zCols = 0;
8738:     char *zIdx = 0;
8739:     IdxConstraint *pCons;
8740:     unsigned int h = 0;
8741:     const char *zFmt;
8742: 
8743:     for(pCons=pEq; pCons; pCons=pCons->pLink){
8744:       zCols = idxAppendColDefn(&rc, zCols, pTab, pCons);
8745:     }
8746:     for(pCons=pTail; pCons; pCons=pCons->pLink){
8747:       zCols = idxAppendColDefn(&rc, zCols, pTab, pCons);
8748:     }
8749: 
8750:     if( rc==SQLITE_OK ){
8751:       /* Hash the list of columns to come up with a name for the index */
8752:       const char *zTable = pScan->pTab->zName;
8753:       char *zName;                /* Index name */
8754:       int i;
8755:       for(i=0; zCols[i]; i++){
8756:         h += ((h<<3) + zCols[i]);
8757:       }
8758:       zName = sqlite3_mprintf("%s_idx_%08x", zTable, h);
8759:       if( zName==0 ){
8760:         rc = SQLITE_NOMEM;
8761:       }else{
8762:         if( idxIdentifierRequiresQuotes(zTable) ){
8763:           zFmt = "CREATE INDEX '%q' ON %Q(%s)";
8764:         }else{
8765:           zFmt = "CREATE INDEX %s ON %s(%s)";
8766:         }
8767:         zIdx = sqlite3_mprintf(zFmt, zName, zTable, zCols);
8768:         if( !zIdx ){
8769:           rc = SQLITE_NOMEM;
8770:         }else{
8771:           rc = sqlite3_exec(dbm, zIdx, 0, 0, p->pzErrmsg);
8772:           idxHashAdd(&rc, &p->hIdx, zName, zIdx);
8773:         }
8774:         sqlite3_free(zName);
8775:         sqlite3_free(zIdx);
8776:       }
8777:     }
8778: 
8779:     sqlite3_free(zCols);
8780:   }
8781:   return rc;
8782: }
8783: 
8784: /*
8785: ** Return true if list pList (linked by IdxConstraint.pLink) contains
8786: ** a constraint compatible with *p. Otherwise return false.
8787: */
8788: static int idxFindConstraint(IdxConstraint *pList, IdxConstraint *p){
8789:   IdxConstraint *pCmp;
8790:   for(pCmp=pList; pCmp; pCmp=pCmp->pLink){
8791:     if( p->iCol==pCmp->iCol ) return 1;
8792:   }
8793:   return 0;
8794: }
8795: 
8796: static int idxCreateFromWhere(
8797:   sqlite3expert *p,
8798:   IdxScan *pScan,                 /* Create indexes for this scan */
8799:   IdxConstraint *pTail            /* range/ORDER BY constraints for inclusion */
8800: ){
8801:   IdxConstraint *p1 = 0;
8802:   IdxConstraint *pCon;
8803:   int rc;
8804: 
8805:   /* Gather up all the == constraints. */
8806:   for(pCon=pScan->pEq; pCon; pCon=pCon->pNext){
8807:     if( !idxFindConstraint(p1, pCon) && !idxFindConstraint(pTail, pCon) ){
8808:       pCon->pLink = p1;
8809:       p1 = pCon;
8810:     }
8811:   }
8812: 
8813:   /* Create an index using the == constraints collected above. And the
8814:   ** range constraint/ORDER BY terms passed in by the caller, if any. */
8815:   rc = idxCreateFromCons(p, pScan, p1, pTail);
8816: 
8817:   /* If no range/ORDER BY passed by the caller, create a version of the
8818:   ** index for each range constraint.  */
8819:   if( pTail==0 ){
8820:     for(pCon=pScan->pRange; rc==SQLITE_OK && pCon; pCon=pCon->pNext){
8821:       assert( pCon->pLink==0 );
8822:       if( !idxFindConstraint(p1, pCon) && !idxFindConstraint(pTail, pCon) ){
8823:         rc = idxCreateFromCons(p, pScan, p1, pCon);
8824:       }
8825:     }
8826:   }
8827: 
8828:   return rc;
8829: }
8830: 
8831: /*
8832: ** Create candidate indexes in database [dbm] based on the data in
8833: ** linked-list pScan.
8834: */
8835: static int idxCreateCandidates(sqlite3expert *p){
8836:   int rc = SQLITE_OK;
8837:   IdxScan *pIter;
8838: 
8839:   for(pIter=p->pScan; pIter && rc==SQLITE_OK; pIter=pIter->pNextScan){
8840:     rc = idxCreateFromWhere(p, pIter, 0);
8841:     if( rc==SQLITE_OK && pIter->pOrder ){
8842:       rc = idxCreateFromWhere(p, pIter, pIter->pOrder);
8843:     }
8844:   }
8845: 
8846:   return rc;
8847: }
8848: 
8849: /*
8850: ** Free all elements of the linked list starting at pConstraint.
8851: */
8852: static void idxConstraintFree(IdxConstraint *pConstraint){
8853:   IdxConstraint *pNext;
8854:   IdxConstraint *p;
8855: 
8856:   for(p=pConstraint; p; p=pNext){
8857:     pNext = p->pNext;
8858:     sqlite3_free(p);
8859:   }
8860: }
8861: 
8862: /*
8863: ** Free all elements of the linked list starting from pScan up until pLast
8864: ** (pLast is not freed).
8865: */
8866: static void idxScanFree(IdxScan *pScan, IdxScan *pLast){
8867:   IdxScan *p;
8868:   IdxScan *pNext;
8869:   for(p=pScan; p!=pLast; p=pNext){
8870:     pNext = p->pNextScan;
8871:     idxConstraintFree(p->pOrder);
8872:     idxConstraintFree(p->pEq);
8873:     idxConstraintFree(p->pRange);
8874:     sqlite3_free(p);
8875:   }
8876: }
8877: 
8878: /*
8879: ** Free all elements of the linked list starting from pStatement up
8880: ** until pLast (pLast is not freed).
8881: */
8882: static void idxStatementFree(IdxStatement *pStatement, IdxStatement *pLast){
8883:   IdxStatement *p;
8884:   IdxStatement *pNext;
8885:   for(p=pStatement; p!=pLast; p=pNext){
8886:     pNext = p->pNext;
8887:     sqlite3_free(p->zEQP);
8888:     sqlite3_free(p->zIdx);
8889:     sqlite3_free(p);
8890:   }
8891: }
8892: 
8893: /*
8894: ** Free the linked list of IdxTable objects starting at pTab.
8895: */
8896: static void idxTableFree(IdxTable *pTab){
8897:   IdxTable *pIter;
8898:   IdxTable *pNext;
8899:   for(pIter=pTab; pIter; pIter=pNext){
8900:     pNext = pIter->pNext;
8901:     sqlite3_free(pIter);
8902:   }
8903: }
8904: 
8905: /*
8906: ** Free the linked list of IdxWrite objects starting at pTab.
8907: */
8908: static void idxWriteFree(IdxWrite *pTab){
8909:   IdxWrite *pIter;
8910:   IdxWrite *pNext;
8911:   for(pIter=pTab; pIter; pIter=pNext){
8912:     pNext = pIter->pNext;
8913:     sqlite3_free(pIter);
8914:   }
8915: }
8916: 
8917: 
8918: 
8919: /*
8920: ** This function is called after candidate indexes have been created. It
8921: ** runs all the queries to see which indexes they prefer, and populates
8922: ** IdxStatement.zIdx and IdxStatement.zEQP with the results.
8923: */
8924: int idxFindIndexes(
8925:   sqlite3expert *p,
8926:   char **pzErr                         /* OUT: Error message (sqlite3_malloc) */
8927: ){
8928:   IdxStatement *pStmt;
8929:   sqlite3 *dbm = p->dbm;
8930:   int rc = SQLITE_OK;
8931: 
8932:   IdxHash hIdx;
8933:   idxHashInit(&hIdx);
8934: 
8935:   for(pStmt=p->pStatement; rc==SQLITE_OK && pStmt; pStmt=pStmt->pNext){
8936:     IdxHashEntry *pEntry;
8937:     sqlite3_stmt *pExplain = 0;
8938:     idxHashClear(&hIdx);
8939:     rc = idxPrintfPrepareStmt(dbm, &pExplain, pzErr,
8940:         "EXPLAIN QUERY PLAN %s", pStmt->zSql
8941:     );
8942:     while( rc==SQLITE_OK && sqlite3_step(pExplain)==SQLITE_ROW ){
8943:       /* int iId = sqlite3_column_int(pExplain, 0); */
8944:       /* int iParent = sqlite3_column_int(pExplain, 1); */
8945:       /* int iNotUsed = sqlite3_column_int(pExplain, 2); */
8946:       const char *zDetail = (const char*)sqlite3_column_text(pExplain, 3);
8947:       int nDetail;
8948:       int i;
8949: 
8950:       if( !zDetail ) continue;
8951:       nDetail = STRLEN(zDetail);
8952: 
8953:       for(i=0; i<nDetail; i++){
8954:         const char *zIdx = 0;
8955:         if( i+13<nDetail && memcmp(&zDetail[i], " USING INDEX ", 13)==0 ){
8956:           zIdx = &zDetail[i+13];
8957:         }else if( i+22<nDetail
8958:             && memcmp(&zDetail[i], " USING COVERING INDEX ", 22)==0
8959:         ){
8960:           zIdx = &zDetail[i+22];
8961:         }
8962:         if( zIdx ){
8963:           const char *zSql;
8964:           int nIdx = 0;
8965:           while( zIdx[nIdx]!='\0' && (zIdx[nIdx]!=' ' || zIdx[nIdx+1]!='(') ){
8966:             nIdx++;
8967:           }
8968:           zSql = idxHashSearch(&p->hIdx, zIdx, nIdx);
8969:           if( zSql ){
8970:             idxHashAdd(&rc, &hIdx, zSql, 0);
8971:             if( rc ) goto find_indexes_out;
8972:           }
8973:           break;
8974:         }
8975:       }
8976: 
8977:       if( zDetail[0]!='-' ){
8978:         pStmt->zEQP = idxAppendText(&rc, pStmt->zEQP, "%s\n", zDetail);
8979:       }
8980:     }
8981: 
8982:     for(pEntry=hIdx.pFirst; pEntry; pEntry=pEntry->pNext){
8983:       pStmt->zIdx = idxAppendText(&rc, pStmt->zIdx, "%s;\n", pEntry->zKey);
8984:     }
8985: 
8986:     idxFinalize(&rc, pExplain);
8987:   }
8988: 
8989:  find_indexes_out:
8990:   idxHashClear(&hIdx);
8991:   return rc;
8992: }
8993: 
8994: static int idxAuthCallback(
8995:   void *pCtx,
8996:   int eOp,
8997:   const char *z3,
8998:   const char *z4,
8999:   const char *zDb,
9000:   const char *zTrigger
9001: ){
9002:   int rc = SQLITE_OK;
9003:   (void)z4;
9004:   (void)zTrigger;
9005:   if( eOp==SQLITE_INSERT || eOp==SQLITE_UPDATE || eOp==SQLITE_DELETE ){
9006:     if( sqlite3_stricmp(zDb, "main")==0 ){
9007:       sqlite3expert *p = (sqlite3expert*)pCtx;
9008:       IdxTable *pTab;
9009:       for(pTab=p->pTable; pTab; pTab=pTab->pNext){
9010:         if( 0==sqlite3_stricmp(z3, pTab->zName) ) break;
9011:       }
9012:       if( pTab ){
9013:         IdxWrite *pWrite;
9014:         for(pWrite=p->pWrite; pWrite; pWrite=pWrite->pNext){
9015:           if( pWrite->pTab==pTab && pWrite->eOp==eOp ) break;
9016:         }
9017:         if( pWrite==0 ){
9018:           pWrite = idxMalloc(&rc, sizeof(IdxWrite));
9019:           if( rc==SQLITE_OK ){
9020:             pWrite->pTab = pTab;
9021:             pWrite->eOp = eOp;
9022:             pWrite->pNext = p->pWrite;
9023:             p->pWrite = pWrite;
9024:           }
9025:         }
9026:       }
9027:     }
9028:   }
9029:   return rc;
9030: }
9031: 
9032: static int idxProcessOneTrigger(
9033:   sqlite3expert *p,
9034:   IdxWrite *pWrite,
9035:   char **pzErr
9036: ){
9037:   static const char *zInt = UNIQUE_TABLE_NAME;
9038:   static const char *zDrop = "DROP TABLE " UNIQUE_TABLE_NAME;
9039:   IdxTable *pTab = pWrite->pTab;
9040:   const char *zTab = pTab->zName;
9041:   const char *zSql =
9042:     "SELECT 'CREATE TEMP' || substr(sql, 7) FROM sqlite_schema "
9043:     "WHERE tbl_name = %Q AND type IN ('table', 'trigger') "
9044:     "ORDER BY type;";
9045:   sqlite3_stmt *pSelect = 0;
9046:   int rc = SQLITE_OK;
9047:   char *zWrite = 0;
9048: 
9049:   /* Create the table and its triggers in the temp schema */
9050:   rc = idxPrintfPrepareStmt(p->db, &pSelect, pzErr, zSql, zTab, zTab);
9051:   while( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pSelect) ){
9052:     const char *zCreate = (const char*)sqlite3_column_text(pSelect, 0);
9053:     rc = sqlite3_exec(p->dbv, zCreate, 0, 0, pzErr);
9054:   }
9055:   idxFinalize(&rc, pSelect);
9056: 
9057:   /* Rename the table in the temp schema to zInt */
9058:   if( rc==SQLITE_OK ){
9059:     char *z = sqlite3_mprintf("ALTER TABLE temp.%Q RENAME TO %Q", zTab, zInt);
9060:     if( z==0 ){
9061:       rc = SQLITE_NOMEM;
9062:     }else{
9063:       rc = sqlite3_exec(p->dbv, z, 0, 0, pzErr);
9064:       sqlite3_free(z);
9065:     }
9066:   }
9067: 
9068:   switch( pWrite->eOp ){
9069:     case SQLITE_INSERT: {
9070:       int i;
9071:       zWrite = idxAppendText(&rc, zWrite, "INSERT INTO %Q VALUES(", zInt);
9072:       for(i=0; i<pTab->nCol; i++){
9073:         zWrite = idxAppendText(&rc, zWrite, "%s?", i==0 ? "" : ", ");
9074:       }
9075:       zWrite = idxAppendText(&rc, zWrite, ")");
9076:       break;
9077:     }
9078:     case SQLITE_UPDATE: {
9079:       int i;
9080:       zWrite = idxAppendText(&rc, zWrite, "UPDATE %Q SET ", zInt);
9081:       for(i=0; i<pTab->nCol; i++){
9082:         zWrite = idxAppendText(&rc, zWrite, "%s%Q=?", i==0 ? "" : ", ",
9083:             pTab->aCol[i].zName
9084:         );
9085:       }
9086:       break;
9087:     }
9088:     default: {
9089:       assert( pWrite->eOp==SQLITE_DELETE );
9090:       if( rc==SQLITE_OK ){
9091:         zWrite = sqlite3_mprintf("DELETE FROM %Q", zInt);
9092:         if( zWrite==0 ) rc = SQLITE_NOMEM;
9093:       }
9094:     }
9095:   }
9096: 
9097:   if( rc==SQLITE_OK ){
9098:     sqlite3_stmt *pX = 0;
9099:     rc = sqlite3_prepare_v2(p->dbv, zWrite, -1, &pX, 0);
9100:     idxFinalize(&rc, pX);
9101:     if( rc!=SQLITE_OK ){
9102:       idxDatabaseError(p->dbv, pzErr);
9103:     }
9104:   }
9105:   sqlite3_free(zWrite);
9106: 
9107:   if( rc==SQLITE_OK ){
9108:     rc = sqlite3_exec(p->dbv, zDrop, 0, 0, pzErr);
9109:   }
9110: 
9111:   return rc;
9112: }
9113: 
9114: static int idxProcessTriggers(sqlite3expert *p, char **pzErr){
9115:   int rc = SQLITE_OK;
9116:   IdxWrite *pEnd = 0;
9117:   IdxWrite *pFirst = p->pWrite;
9118: 
9119:   while( rc==SQLITE_OK && pFirst!=pEnd ){
9120:     IdxWrite *pIter;
9121:     for(pIter=pFirst; rc==SQLITE_OK && pIter!=pEnd; pIter=pIter->pNext){
9122:       rc = idxProcessOneTrigger(p, pIter, pzErr);
9123:     }
9124:     pEnd = pFirst;
9125:     pFirst = p->pWrite;
9126:   }
9127: 
9128:   return rc;
9129: }
9130: 
9131: 
9132: static int idxCreateVtabSchema(sqlite3expert *p, char **pzErrmsg){
9133:   int rc = idxRegisterVtab(p);
9134:   sqlite3_stmt *pSchema = 0;
9135: 
9136:   /* For each table in the main db schema:
9137:   **
9138:   **   1) Add an entry to the p->pTable list, and
9139:   **   2) Create the equivalent virtual table in dbv.
9140:   */
9141:   rc = idxPrepareStmt(p->db, &pSchema, pzErrmsg,
9142:       "SELECT type, name, sql, 1 FROM sqlite_schema "
9143:       "WHERE type IN ('table','view') AND name NOT LIKE 'sqlite_%%' "
9144:       " UNION ALL "
9145:       "SELECT type, name, sql, 2 FROM sqlite_schema "
9146:       "WHERE type = 'trigger'"
9147:       "  AND tbl_name IN(SELECT name FROM sqlite_schema WHERE type = 'view') "
9148:       "ORDER BY 4, 1"
9149:   );
9150:   while( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pSchema) ){
9151:     const char *zType = (const char*)sqlite3_column_text(pSchema, 0);
9152:     const char *zName = (const char*)sqlite3_column_text(pSchema, 1);
9153:     const char *zSql = (const char*)sqlite3_column_text(pSchema, 2);
9154: 
9155:     if( zType[0]=='v' || zType[1]=='r' ){
9156:       rc = sqlite3_exec(p->dbv, zSql, 0, 0, pzErrmsg);
9157:     }else{
9158:       IdxTable *pTab;
9159:       rc = idxGetTableInfo(p->db, zName, &pTab, pzErrmsg);
9160:       if( rc==SQLITE_OK ){
9161:         int i;
9162:         char *zInner = 0;
9163:         char *zOuter = 0;
9164:         pTab->pNext = p->pTable;
9165:         p->pTable = pTab;
9166: 
9167:         /* The statement the vtab will pass to sqlite3_declare_vtab() */
9168:         zInner = idxAppendText(&rc, 0, "CREATE TABLE x(");
9169:         for(i=0; i<pTab->nCol; i++){
9170:           zInner = idxAppendText(&rc, zInner, "%s%Q COLLATE %s",
9171:               (i==0 ? "" : ", "), pTab->aCol[i].zName, pTab->aCol[i].zColl
9172:           );
9173:         }
9174:         zInner = idxAppendText(&rc, zInner, ")");
9175: 
9176:         /* The CVT statement to create the vtab */
9177:         zOuter = idxAppendText(&rc, 0,
9178:             "CREATE VIRTUAL TABLE %Q USING expert(%Q)", zName, zInner
9179:         );
9180:         if( rc==SQLITE_OK ){
9181:           rc = sqlite3_exec(p->dbv, zOuter, 0, 0, pzErrmsg);
9182:         }
9183:         sqlite3_free(zInner);
9184:         sqlite3_free(zOuter);
9185:       }
9186:     }
9187:   }
9188:   idxFinalize(&rc, pSchema);
9189:   return rc;
9190: }
9191: 
9192: struct IdxSampleCtx {
9193:   int iTarget;
9194:   double target;                  /* Target nRet/nRow value */
9195:   double nRow;                    /* Number of rows seen */
9196:   double nRet;                    /* Number of rows returned */
9197: };
9198: 
9199: static void idxSampleFunc(
9200:   sqlite3_context *pCtx,
9201:   int argc,
9202:   sqlite3_value **argv
9203: ){
9204:   struct IdxSampleCtx *p = (struct IdxSampleCtx*)sqlite3_user_data(pCtx);
9205:   int bRet;
9206: 
9207:   (void)argv;
9208:   assert( argc==0 );
9209:   if( p->nRow==0.0 ){
9210:     bRet = 1;
9211:   }else{
9212:     bRet = (p->nRet / p->nRow) <= p->target;
9213:     if( bRet==0 ){
9214:       unsigned short rnd;
9215:       sqlite3_randomness(2, (void*)&rnd);
9216:       bRet = ((int)rnd % 100) <= p->iTarget;
9217:     }
9218:   }
9219: 
9220:   sqlite3_result_int(pCtx, bRet);
9221:   p->nRow += 1.0;
9222:   p->nRet += (double)bRet;
9223: }
9224: 
9225: struct IdxRemCtx {
9226:   int nSlot;
9227:   struct IdxRemSlot {
9228:     int eType;                    /* SQLITE_NULL, INTEGER, REAL, TEXT, BLOB */
9229:     i64 iVal;                     /* SQLITE_INTEGER value */
9230:     double rVal;                  /* SQLITE_FLOAT value */
9231:     int nByte;                    /* Bytes of space allocated at z */
9232:     int n;                        /* Size of buffer z */
9233:     char *z;                      /* SQLITE_TEXT/BLOB value */
9234:   } aSlot[1];
9235: };
9236: 
9237: /*
9238: ** Implementation of scalar function rem().
9239: */
9240: static void idxRemFunc(
9241:   sqlite3_context *pCtx,
9242:   int argc,
9243:   sqlite3_value **argv
9244: ){
9245:   struct IdxRemCtx *p = (struct IdxRemCtx*)sqlite3_user_data(pCtx);
9246:   struct IdxRemSlot *pSlot;
9247:   int iSlot;
9248:   assert( argc==2 );
9249: 
9250:   iSlot = sqlite3_value_int(argv[0]);
9251:   assert( iSlot<=p->nSlot );
9252:   pSlot = &p->aSlot[iSlot];
9253: 
9254:   switch( pSlot->eType ){
9255:     case SQLITE_NULL:
9256:       /* no-op */
9257:       break;
9258: 
9259:     case SQLITE_INTEGER:
9260:       sqlite3_result_int64(pCtx, pSlot->iVal);
9261:       break;
9262: 
9263:     case SQLITE_FLOAT:
9264:       sqlite3_result_double(pCtx, pSlot->rVal);
9265:       break;
9266: 
9267:     case SQLITE_BLOB:
9268:       sqlite3_result_blob(pCtx, pSlot->z, pSlot->n, SQLITE_TRANSIENT);
9269:       break;
9270: 
9271:     case SQLITE_TEXT:
9272:       sqlite3_result_text(pCtx, pSlot->z, pSlot->n, SQLITE_TRANSIENT);
9273:       break;
9274:   }
9275: 
9276:   pSlot->eType = sqlite3_value_type(argv[1]);
9277:   switch( pSlot->eType ){
9278:     case SQLITE_NULL:
9279:       /* no-op */
9280:       break;
9281: 
9282:     case SQLITE_INTEGER:
9283:       pSlot->iVal = sqlite3_value_int64(argv[1]);
9284:       break;
9285: 
9286:     case SQLITE_FLOAT:
9287:       pSlot->rVal = sqlite3_value_double(argv[1]);
9288:       break;
9289: 
9290:     case SQLITE_BLOB:
9291:     case SQLITE_TEXT: {
9292:       int nByte = sqlite3_value_bytes(argv[1]);
9293:       if( nByte>pSlot->nByte ){
9294:         char *zNew = (char*)sqlite3_realloc(pSlot->z, nByte*2);
9295:         if( zNew==0 ){
9296:           sqlite3_result_error_nomem(pCtx);
9297:           return;
9298:         }
9299:         pSlot->nByte = nByte*2;
9300:         pSlot->z = zNew;
9301:       }
9302:       pSlot->n = nByte;
9303:       if( pSlot->eType==SQLITE_BLOB ){
9304:         memcpy(pSlot->z, sqlite3_value_blob(argv[1]), nByte);
9305:       }else{
9306:         memcpy(pSlot->z, sqlite3_value_text(argv[1]), nByte);
9307:       }
9308:       break;
9309:     }
9310:   }
9311: }
9312: 
9313: static int idxLargestIndex(sqlite3 *db, int *pnMax, char **pzErr){
9314:   int rc = SQLITE_OK;
9315:   const char *zMax =
9316:     "SELECT max(i.seqno) FROM "
9317:     "  sqlite_schema AS s, "
9318:     "  pragma_index_list(s.name) AS l, "
9319:     "  pragma_index_info(l.name) AS i "
9320:     "WHERE s.type = 'table'";
9321:   sqlite3_stmt *pMax = 0;
9322: 
9323:   *pnMax = 0;
9324:   rc = idxPrepareStmt(db, &pMax, pzErr, zMax);
9325:   if( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pMax) ){
9326:     *pnMax = sqlite3_column_int(pMax, 0) + 1;
9327:   }
9328:   idxFinalize(&rc, pMax);
9329: 
9330:   return rc;
9331: }
9332: 
9333: static int idxPopulateOneStat1(
9334:   sqlite3expert *p,
9335:   sqlite3_stmt *pIndexXInfo,
9336:   sqlite3_stmt *pWriteStat,
9337:   const char *zTab,
9338:   const char *zIdx,
9339:   char **pzErr
9340: ){
9341:   char *zCols = 0;
9342:   char *zOrder = 0;
9343:   char *zQuery = 0;
9344:   int nCol = 0;
9345:   int i;
9346:   sqlite3_stmt *pQuery = 0;
9347:   int *aStat = 0;
9348:   int rc = SQLITE_OK;
9349: 
9350:   assert( p->iSample>0 );
9351: 
9352:   /* Formulate the query text */
9353:   sqlite3_bind_text(pIndexXInfo, 1, zIdx, -1, SQLITE_STATIC);
9354:   while( SQLITE_OK==rc && SQLITE_ROW==sqlite3_step(pIndexXInfo) ){
9355:     const char *zComma = zCols==0 ? "" : ", ";
9356:     const char *zName = (const char*)sqlite3_column_text(pIndexXInfo, 0);
9357:     const char *zColl = (const char*)sqlite3_column_text(pIndexXInfo, 1);
9358:     zCols = idxAppendText(&rc, zCols,
9359:         "%sx.%Q IS rem(%d, x.%Q) COLLATE %s", zComma, zName, nCol, zName, zColl
9360:     );
9361:     zOrder = idxAppendText(&rc, zOrder, "%s%d", zComma, ++nCol);
9362:   }
9363:   sqlite3_reset(pIndexXInfo);
9364:   if( rc==SQLITE_OK ){
9365:     if( p->iSample==100 ){
9366:       zQuery = sqlite3_mprintf(
9367:           "SELECT %s FROM %Q x ORDER BY %s", zCols, zTab, zOrder
9368:       );
9369:     }else{
9370:       zQuery = sqlite3_mprintf(
9371:           "SELECT %s FROM temp."UNIQUE_TABLE_NAME" x ORDER BY %s", zCols, zOrder
9372:       );
9373:     }
9374:   }
9375:   sqlite3_free(zCols);
9376:   sqlite3_free(zOrder);
9377: 
9378:   /* Formulate the query text */
9379:   if( rc==SQLITE_OK ){
9380:     sqlite3 *dbrem = (p->iSample==100 ? p->db : p->dbv);
9381:     rc = idxPrepareStmt(dbrem, &pQuery, pzErr, zQuery);
9382:   }
9383:   sqlite3_free(zQuery);
9384: 
9385:   if( rc==SQLITE_OK ){
9386:     aStat = (int*)idxMalloc(&rc, sizeof(int)*(nCol+1));
9387:   }
9388:   if( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pQuery) ){
9389:     IdxHashEntry *pEntry;
9390:     char *zStat = 0;
9391:     for(i=0; i<=nCol; i++) aStat[i] = 1;
9392:     while( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pQuery) ){
9393:       aStat[0]++;
9394:       for(i=0; i<nCol; i++){
9395:         if( sqlite3_column_int(pQuery, i)==0 ) break;
9396:       }
9397:       for(/*no-op*/; i<nCol; i++){
9398:         aStat[i+1]++;
9399:       }
9400:     }
9401: 
9402:     if( rc==SQLITE_OK ){
9403:       int s0 = aStat[0];
9404:       zStat = sqlite3_mprintf("%d", s0);
9405:       if( zStat==0 ) rc = SQLITE_NOMEM;
9406:       for(i=1; rc==SQLITE_OK && i<=nCol; i++){
9407:         zStat = idxAppendText(&rc, zStat, " %d", (s0+aStat[i]/2) / aStat[i]);
9408:       }
9409:     }
9410: 
9411:     if( rc==SQLITE_OK ){
9412:       sqlite3_bind_text(pWriteStat, 1, zTab, -1, SQLITE_STATIC);
9413:       sqlite3_bind_text(pWriteStat, 2, zIdx, -1, SQLITE_STATIC);
9414:       sqlite3_bind_text(pWriteStat, 3, zStat, -1, SQLITE_STATIC);
9415:       sqlite3_step(pWriteStat);
9416:       rc = sqlite3_reset(pWriteStat);
9417:     }
9418: 
9419:     pEntry = idxHashFind(&p->hIdx, zIdx, STRLEN(zIdx));
9420:     if( pEntry ){
9421:       assert( pEntry->zVal2==0 );
9422:       pEntry->zVal2 = zStat;
9423:     }else{
9424:       sqlite3_free(zStat);
9425:     }
9426:   }
9427:   sqlite3_free(aStat);
9428:   idxFinalize(&rc, pQuery);
9429: 
9430:   return rc;
9431: }
9432: 
9433: static int idxBuildSampleTable(sqlite3expert *p, const char *zTab){
9434:   int rc;
9435:   char *zSql;
9436: 
9437:   rc = sqlite3_exec(p->dbv,"DROP TABLE IF EXISTS temp."UNIQUE_TABLE_NAME,0,0,0);
9438:   if( rc!=SQLITE_OK ) return rc;
9439: 
9440:   zSql = sqlite3_mprintf(
9441:       "CREATE TABLE temp." UNIQUE_TABLE_NAME " AS SELECT * FROM %Q", zTab
9442:   );
9443:   if( zSql==0 ) return SQLITE_NOMEM;
9444:   rc = sqlite3_exec(p->dbv, zSql, 0, 0, 0);
9445:   sqlite3_free(zSql);
9446: 
9447:   return rc;
9448: }
9449: 
9450: /*
9451: ** This function is called as part of sqlite3_expert_analyze(). Candidate
9452: ** indexes have already been created in database sqlite3expert.dbm, this
9453: ** function populates sqlite_stat1 table in the same database.
9454: **
9455: ** The stat1 data is generated by querying the
9456: */
9457: static int idxPopulateStat1(sqlite3expert *p, char **pzErr){
9458:   int rc = SQLITE_OK;
9459:   int nMax =0;
9460:   struct IdxRemCtx *pCtx = 0;
9461:   struct IdxSampleCtx samplectx;
9462:   int i;
9463:   i64 iPrev = -100000;
9464:   sqlite3_stmt *pAllIndex = 0;
9465:   sqlite3_stmt *pIndexXInfo = 0;
9466:   sqlite3_stmt *pWrite = 0;
9467: 
9468:   const char *zAllIndex =
9469:     "SELECT s.rowid, s.name, l.name FROM "
9470:     "  sqlite_schema AS s, "
9471:     "  pragma_index_list(s.name) AS l "
9472:     "WHERE s.type = 'table'";
9473:   const char *zIndexXInfo =
9474:     "SELECT name, coll FROM pragma_index_xinfo(?) WHERE key";
9475:   const char *zWrite = "INSERT INTO sqlite_stat1 VALUES(?, ?, ?)";
9476: 
9477:   /* If iSample==0, no sqlite_stat1 data is required. */
9478:   if( p->iSample==0 ) return SQLITE_OK;
9479: 
9480:   rc = idxLargestIndex(p->dbm, &nMax, pzErr);
9481:   if( nMax<=0 || rc!=SQLITE_OK ) return rc;
9482: 
9483:   rc = sqlite3_exec(p->dbm, "ANALYZE; PRAGMA writable_schema=1", 0, 0, 0);
9484: 
9485:   if( rc==SQLITE_OK ){
9486:     int nByte = sizeof(struct IdxRemCtx) + (sizeof(struct IdxRemSlot) * nMax);
9487:     pCtx = (struct IdxRemCtx*)idxMalloc(&rc, nByte);
9488:   }
9489: 
9490:   if( rc==SQLITE_OK ){
9491:     sqlite3 *dbrem = (p->iSample==100 ? p->db : p->dbv);
9492:     rc = sqlite3_create_function(
9493:         dbrem, "rem", 2, SQLITE_UTF8, (void*)pCtx, idxRemFunc, 0, 0
9494:     );
9495:   }
9496:   if( rc==SQLITE_OK ){
9497:     rc = sqlite3_create_function(
9498:         p->db, "sample", 0, SQLITE_UTF8, (void*)&samplectx, idxSampleFunc, 0, 0
9499:     );
9500:   }
9501: 
9502:   if( rc==SQLITE_OK ){
9503:     pCtx->nSlot = nMax+1;
9504:     rc = idxPrepareStmt(p->dbm, &pAllIndex, pzErr, zAllIndex);
9505:   }
9506:   if( rc==SQLITE_OK ){
9507:     rc = idxPrepareStmt(p->dbm, &pIndexXInfo, pzErr, zIndexXInfo);
9508:   }
9509:   if( rc==SQLITE_OK ){
9510:     rc = idxPrepareStmt(p->dbm, &pWrite, pzErr, zWrite);
9511:   }
9512: 
9513:   while( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pAllIndex) ){
9514:     i64 iRowid = sqlite3_column_int64(pAllIndex, 0);
9515:     const char *zTab = (const char*)sqlite3_column_text(pAllIndex, 1);
9516:     const char *zIdx = (const char*)sqlite3_column_text(pAllIndex, 2);
9517:     if( p->iSample<100 && iPrev!=iRowid ){
9518:       samplectx.target = (double)p->iSample / 100.0;
9519:       samplectx.iTarget = p->iSample;
9520:       samplectx.nRow = 0.0;
9521:       samplectx.nRet = 0.0;
9522:       rc = idxBuildSampleTable(p, zTab);
9523:       if( rc!=SQLITE_OK ) break;
9524:     }
9525:     rc = idxPopulateOneStat1(p, pIndexXInfo, pWrite, zTab, zIdx, pzErr);
9526:     iPrev = iRowid;
9527:   }
9528:   if( rc==SQLITE_OK && p->iSample<100 ){
9529:     rc = sqlite3_exec(p->dbv,
9530:         "DROP TABLE IF EXISTS temp." UNIQUE_TABLE_NAME, 0,0,0
9531:     );
9532:   }
9533: 
9534:   idxFinalize(&rc, pAllIndex);
9535:   idxFinalize(&rc, pIndexXInfo);
9536:   idxFinalize(&rc, pWrite);
9537: 
9538:   for(i=0; i<pCtx->nSlot; i++){
9539:     sqlite3_free(pCtx->aSlot[i].z);
9540:   }
9541:   sqlite3_free(pCtx);
9542: 
9543:   if( rc==SQLITE_OK ){
9544:     rc = sqlite3_exec(p->dbm, "ANALYZE sqlite_schema", 0, 0, 0);
9545:   }
9546: 
9547:   sqlite3_exec(p->db, "DROP TABLE IF EXISTS temp."UNIQUE_TABLE_NAME,0,0,0);
9548:   return rc;
9549: }
9550: 
9551: /*
9552: ** Allocate a new sqlite3expert object.
9553: */
9554: sqlite3expert *sqlite3_expert_new(sqlite3 *db, char **pzErrmsg){
9555:   int rc = SQLITE_OK;
9556:   sqlite3expert *pNew;
9557: 
9558:   pNew = (sqlite3expert*)idxMalloc(&rc, sizeof(sqlite3expert));
9559: 
9560:   /* Open two in-memory databases to work with. The "vtab database" (dbv)
9561:   ** will contain a virtual table corresponding to each real table in
9562:   ** the user database schema, and a copy of each view. It is used to
9563:   ** collect information regarding the WHERE, ORDER BY and other clauses
9564:   ** of the user's query.
9565:   */
9566:   if( rc==SQLITE_OK ){
9567:     pNew->db = db;
9568:     pNew->iSample = 100;
9569:     rc = sqlite3_open(":memory:", &pNew->dbv);
9570:   }
9571:   if( rc==SQLITE_OK ){
9572:     rc = sqlite3_open(":memory:", &pNew->dbm);
9573:     if( rc==SQLITE_OK ){
9574:       sqlite3_db_config(pNew->dbm, SQLITE_DBCONFIG_TRIGGER_EQP, 1, (int*)0);
9575:     }
9576:   }
9577: 
9578: 
9579:   /* Copy the entire schema of database [db] into [dbm]. */
9580:   if( rc==SQLITE_OK ){
9581:     sqlite3_stmt *pSql;
9582:     rc = idxPrintfPrepareStmt(pNew->db, &pSql, pzErrmsg,
9583:         "SELECT sql FROM sqlite_schema WHERE name NOT LIKE 'sqlite_%%'"
9584:         " AND sql NOT LIKE 'CREATE VIRTUAL %%'"
9585:     );
9586:     while( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pSql) ){
9587:       const char *zSql = (const char*)sqlite3_column_text(pSql, 0);
9588:       rc = sqlite3_exec(pNew->dbm, zSql, 0, 0, pzErrmsg);
9589:     }
9590:     idxFinalize(&rc, pSql);
9591:   }
9592: 
9593:   /* Create the vtab schema */
9594:   if( rc==SQLITE_OK ){
9595:     rc = idxCreateVtabSchema(pNew, pzErrmsg);
9596:   }
9597: 
9598:   /* Register the auth callback with dbv */
9599:   if( rc==SQLITE_OK ){
9600:     sqlite3_set_authorizer(pNew->dbv, idxAuthCallback, (void*)pNew);
9601:   }
9602: 
9603:   /* If an error has occurred, free the new object and reutrn NULL. Otherwise,
9604:   ** return the new sqlite3expert handle.  */
9605:   if( rc!=SQLITE_OK ){
9606:     sqlite3_expert_destroy(pNew);
9607:     pNew = 0;
9608:   }
9609:   return pNew;
9610: }
9611: 
9612: /*
9613: ** Configure an sqlite3expert object.
9614: */
9615: int sqlite3_expert_config(sqlite3expert *p, int op, ...){
9616:   int rc = SQLITE_OK;
9617:   va_list ap;
9618:   va_start(ap, op);
9619:   switch( op ){
9620:     case EXPERT_CONFIG_SAMPLE: {
9621:       int iVal = va_arg(ap, int);
9622:       if( iVal<0 ) iVal = 0;
9623:       if( iVal>100 ) iVal = 100;
9624:       p->iSample = iVal;
9625:       break;
9626:     }
9627:     default:
9628:       rc = SQLITE_NOTFOUND;
9629:       break;
9630:   }
9631: 
9632:   va_end(ap);
9633:   return rc;
9634: }
9635: 
9636: /*
9637: ** Add an SQL statement to the analysis.
9638: */
9639: int sqlite3_expert_sql(
9640:   sqlite3expert *p,               /* From sqlite3_expert_new() */
9641:   const char *zSql,               /* SQL statement to add */
9642:   char **pzErr                    /* OUT: Error message (if any) */
9643: ){
9644:   IdxScan *pScanOrig = p->pScan;
9645:   IdxStatement *pStmtOrig = p->pStatement;
9646:   int rc = SQLITE_OK;
9647:   const char *zStmt = zSql;
9648: 
9649:   if( p->bRun ) return SQLITE_MISUSE;
9650: 
9651:   while( rc==SQLITE_OK && zStmt && zStmt[0] ){
9652:     sqlite3_stmt *pStmt = 0;
9653:     rc = sqlite3_prepare_v2(p->dbv, zStmt, -1, &pStmt, &zStmt);
9654:     if( rc==SQLITE_OK ){
9655:       if( pStmt ){
9656:         IdxStatement *pNew;
9657:         const char *z = sqlite3_sql(pStmt);
9658:         int n = STRLEN(z);
9659:         pNew = (IdxStatement*)idxMalloc(&rc, sizeof(IdxStatement) + n+1);
9660:         if( rc==SQLITE_OK ){
9661:           pNew->zSql = (char*)&pNew[1];
9662:           memcpy(pNew->zSql, z, n+1);
9663:           pNew->pNext = p->pStatement;
9664:           if( p->pStatement ) pNew->iId = p->pStatement->iId+1;
9665:           p->pStatement = pNew;
9666:         }
9667:         sqlite3_finalize(pStmt);
9668:       }
9669:     }else{
9670:       idxDatabaseError(p->dbv, pzErr);
9671:     }
9672:   }
9673: 
9674:   if( rc!=SQLITE_OK ){
9675:     idxScanFree(p->pScan, pScanOrig);
9676:     idxStatementFree(p->pStatement, pStmtOrig);
9677:     p->pScan = pScanOrig;
9678:     p->pStatement = pStmtOrig;
9679:   }
9680: 
9681:   return rc;
9682: }
9683: 
9684: int sqlite3_expert_analyze(sqlite3expert *p, char **pzErr){
9685:   int rc;
9686:   IdxHashEntry *pEntry;
9687: 
9688:   /* Do trigger processing to collect any extra IdxScan structures */
9689:   rc = idxProcessTriggers(p, pzErr);
9690: 
9691:   /* Create candidate indexes within the in-memory database file */
9692:   if( rc==SQLITE_OK ){
9693:     rc = idxCreateCandidates(p);
9694:   }
9695: 
9696:   /* Generate the stat1 data */
9697:   if( rc==SQLITE_OK ){
9698:     rc = idxPopulateStat1(p, pzErr);
9699:   }
9700: 
9701:   /* Formulate the EXPERT_REPORT_CANDIDATES text */
9702:   for(pEntry=p->hIdx.pFirst; pEntry; pEntry=pEntry->pNext){
9703:     p->zCandidates = idxAppendText(&rc, p->zCandidates,
9704:         "%s;%s%s\n", pEntry->zVal,
9705:         pEntry->zVal2 ? " -- stat1: " : "", pEntry->zVal2
9706:     );
9707:   }
9708: 
9709:   /* Figure out which of the candidate indexes are preferred by the query
9710:   ** planner and report the results to the user.  */
9711:   if( rc==SQLITE_OK ){
9712:     rc = idxFindIndexes(p, pzErr);
9713:   }
9714: 
9715:   if( rc==SQLITE_OK ){
9716:     p->bRun = 1;
9717:   }
9718:   return rc;
9719: }
9720: 
9721: /*
9722: ** Return the total number of statements that have been added to this
9723: ** sqlite3expert using sqlite3_expert_sql().
9724: */
9725: int sqlite3_expert_count(sqlite3expert *p){
9726:   int nRet = 0;
9727:   if( p->pStatement ) nRet = p->pStatement->iId+1;
9728:   return nRet;
9729: }
9730: 
9731: /*
9732: ** Return a component of the report.
9733: */
9734: const char *sqlite3_expert_report(sqlite3expert *p, int iStmt, int eReport){
9735:   const char *zRet = 0;
9736:   IdxStatement *pStmt;
9737: 
9738:   if( p->bRun==0 ) return 0;
9739:   for(pStmt=p->pStatement; pStmt && pStmt->iId!=iStmt; pStmt=pStmt->pNext);
9740:   switch( eReport ){
9741:     case EXPERT_REPORT_SQL:
9742:       if( pStmt ) zRet = pStmt->zSql;
9743:       break;
9744:     case EXPERT_REPORT_INDEXES:
9745:       if( pStmt ) zRet = pStmt->zIdx;
9746:       break;
9747:     case EXPERT_REPORT_PLAN:
9748:       if( pStmt ) zRet = pStmt->zEQP;
9749:       break;
9750:     case EXPERT_REPORT_CANDIDATES:
9751:       zRet = p->zCandidates;
9752:       break;
9753:   }
9754:   return zRet;
9755: }
9756: 
9757: /*
9758: ** Free an sqlite3expert object.
9759: */
9760: void sqlite3_expert_destroy(sqlite3expert *p){
9761:   if( p ){
9762:     sqlite3_close(p->dbm);
9763:     sqlite3_close(p->dbv);
9764:     idxScanFree(p->pScan, 0);
9765:     idxStatementFree(p->pStatement, 0);
9766:     idxTableFree(p->pTable);
9767:     idxWriteFree(p->pWrite);
9768:     idxHashClear(&p->hIdx);
9769:     sqlite3_free(p->zCandidates);
9770:     sqlite3_free(p);
9771:   }
9772: }
9773: 
9774: #endif /* ifndef SQLITE_OMIT_VIRTUALTABLE */
9775: 
9776: /************************* End ../ext/expert/sqlite3expert.c ********************/
9777: 
9778: #if !defined(SQLITE_OMIT_VIRTUALTABLE) && defined(SQLITE_ENABLE_DBPAGE_VTAB)
9779: /************************* Begin ../ext/misc/dbdata.c ******************/
9780: /*
9781: ** 2019-04-17
9782: **
9783: ** The author disclaims copyright to this source code.  In place of
9784: ** a legal notice, here is a blessing:
9785: **
9786: **    May you do good and not evil.
9787: **    May you find forgiveness for yourself and forgive others.
9788: **    May you share freely, never taking more than you give.
9789: **
9790: ******************************************************************************
9791: **
9792: ** This file contains an implementation of two eponymous virtual tables,
9793: ** "sqlite_dbdata" and "sqlite_dbptr". Both modules require that the
9794: ** "sqlite_dbpage" eponymous virtual table be available.
9795: **
9796: ** SQLITE_DBDATA:
9797: **   sqlite_dbdata is used to extract data directly from a database b-tree
9798: **   page and its associated overflow pages, bypassing the b-tree layer.
9799: **   The table schema is equivalent to:
9800: **
9801: **     CREATE TABLE sqlite_dbdata(
9802: **       pgno INTEGER,
9803: **       cell INTEGER,
9804: **       field INTEGER,
9805: **       value ANY,
9806: **       schema TEXT HIDDEN
9807: **     );
9808: **
9809: **   IMPORTANT: THE VIRTUAL TABLE SCHEMA ABOVE IS SUBJECT TO CHANGE. IN THE
9810: **   FUTURE NEW NON-HIDDEN COLUMNS MAY BE ADDED BETWEEN "value" AND
9811: **   "schema".
9812: **
9813: **   Each page of the database is inspected. If it cannot be interpreted as
9814: **   a b-tree page, or if it is a b-tree page containing 0 entries, the
9815: **   sqlite_dbdata table contains no rows for that page.  Otherwise, the
9816: **   table contains one row for each field in the record associated with
9817: **   each cell on the page. For intkey b-trees, the key value is stored in
9818: **   field -1.
9819: **
9820: **   For example, for the database:
9821: **
9822: **     CREATE TABLE t1(a, b);     -- root page is page 2
9823: **     INSERT INTO t1(rowid, a, b) VALUES(5, 'v', 'five');
9824: **     INSERT INTO t1(rowid, a, b) VALUES(10, 'x', 'ten');
9825: **
9826: **   the sqlite_dbdata table contains, as well as from entries related to
9827: **   page 1, content equivalent to:
9828: **
9829: **     INSERT INTO sqlite_dbdata(pgno, cell, field, value) VALUES
9830: **         (2, 0, -1, 5     ),
9831: **         (2, 0,  0, 'v'   ),
9832: **         (2, 0,  1, 'five'),
9833: **         (2, 1, -1, 10    ),
9834: **         (2, 1,  0, 'x'   ),
9835: **         (2, 1,  1, 'ten' );
9836: **
9837: **   If database corruption is encountered, this module does not report an
9838: **   error. Instead, it attempts to extract as much data as possible and
9839: **   ignores the corruption.
9840: **
9841: ** SQLITE_DBPTR:
9842: **   The sqlite_dbptr table has the following schema:
9843: **
9844: **     CREATE TABLE sqlite_dbptr(
9845: **       pgno INTEGER,
9846: **       child INTEGER,
9847: **       schema TEXT HIDDEN
9848: **     );
9849: **
9850: **   It contains one entry for each b-tree pointer between a parent and
9851: **   child page in the database.
9852: */
9853: #if !defined(SQLITEINT_H)
9854: /* #include "sqlite3ext.h" */
9855: 
9856: /* typedef unsigned char u8; */
9857: 
9858: #endif
9859: SQLITE_EXTENSION_INIT1
9860: #include <string.h>
9861: #include <assert.h>
9862: 
9863: #define DBDATA_PADDING_BYTES 100
9864: 
9865: typedef struct DbdataTable DbdataTable;
9866: typedef struct DbdataCursor DbdataCursor;
9867: 
9868: /* Cursor object */
9869: struct DbdataCursor {
9870:   sqlite3_vtab_cursor base;       /* Base class.  Must be first */
9871:   sqlite3_stmt *pStmt;            /* For fetching database pages */
9872: 
9873:   int iPgno;                      /* Current page number */
9874:   u8 *aPage;                      /* Buffer containing page */
9875:   int nPage;                      /* Size of aPage[] in bytes */
9876:   int nCell;                      /* Number of cells on aPage[] */
9877:   int iCell;                      /* Current cell number */
9878:   int bOnePage;                   /* True to stop after one page */
9879:   int szDb;
9880:   sqlite3_int64 iRowid;
9881: 
9882:   /* Only for the sqlite_dbdata table */
9883:   u8 *pRec;                       /* Buffer containing current record */
9884:   int nRec;                       /* Size of pRec[] in bytes */
9885:   int nHdr;                       /* Size of header in bytes */
9886:   int iField;                     /* Current field number */
9887:   u8 *pHdrPtr;
9888:   u8 *pPtr;
9889: 
9890:   sqlite3_int64 iIntkey;          /* Integer key value */
9891: };
9892: 
9893: /* Table object */
9894: struct DbdataTable {
9895:   sqlite3_vtab base;              /* Base class.  Must be first */
9896:   sqlite3 *db;                    /* The database connection */
9897:   sqlite3_stmt *pStmt;            /* For fetching database pages */
9898:   int bPtr;                       /* True for sqlite3_dbptr table */
9899: };
9900: 
9901: /* Column and schema definitions for sqlite_dbdata */
9902: #define DBDATA_COLUMN_PGNO        0
9903: #define DBDATA_COLUMN_CELL        1
9904: #define DBDATA_COLUMN_FIELD       2
9905: #define DBDATA_COLUMN_VALUE       3
9906: #define DBDATA_COLUMN_SCHEMA      4
9907: #define DBDATA_SCHEMA             \
9908:       "CREATE TABLE x("           \
9909:       "  pgno INTEGER,"           \
9910:       "  cell INTEGER,"           \
9911:       "  field INTEGER,"          \
9912:       "  value ANY,"              \
9913:       "  schema TEXT HIDDEN"      \
9914:       ")"
9915: 
9916: /* Column and schema definitions for sqlite_dbptr */
9917: #define DBPTR_COLUMN_PGNO         0
9918: #define DBPTR_COLUMN_CHILD        1
9919: #define DBPTR_COLUMN_SCHEMA       2
9920: #define DBPTR_SCHEMA              \
9921:       "CREATE TABLE x("           \
9922:       "  pgno INTEGER,"           \
9923:       "  child INTEGER,"          \
9924:       "  schema TEXT HIDDEN"      \
9925:       ")"
9926: 
9927: /*
9928: ** Connect to an sqlite_dbdata (pAux==0) or sqlite_dbptr (pAux!=0) virtual
9929: ** table.
9930: */
9931: static int dbdataConnect(
9932:   sqlite3 *db,
9933:   void *pAux,
9934:   int argc, const char *const*argv,
9935:   sqlite3_vtab **ppVtab,
9936:   char **pzErr
9937: ){
9938:   DbdataTable *pTab = 0;
9939:   int rc = sqlite3_declare_vtab(db, pAux ? DBPTR_SCHEMA : DBDATA_SCHEMA);
9940: 
9941:   if( rc==SQLITE_OK ){
9942:     pTab = (DbdataTable*)sqlite3_malloc64(sizeof(DbdataTable));
9943:     if( pTab==0 ){
9944:       rc = SQLITE_NOMEM;
9945:     }else{
9946:       memset(pTab, 0, sizeof(DbdataTable));
9947:       pTab->db = db;
9948:       pTab->bPtr = (pAux!=0);
9949:     }
9950:   }
9951: 
9952:   *ppVtab = (sqlite3_vtab*)pTab;
9953:   return rc;
9954: }
9955: 
9956: /*
9957: ** Disconnect from or destroy a sqlite_dbdata or sqlite_dbptr virtual table.
9958: */
9959: static int dbdataDisconnect(sqlite3_vtab *pVtab){
9960:   DbdataTable *pTab = (DbdataTable*)pVtab;
9961:   if( pTab ){
9962:     sqlite3_finalize(pTab->pStmt);
9963:     sqlite3_free(pVtab);
9964:   }
9965:   return SQLITE_OK;
9966: }
9967: 
9968: /*
9969: ** This function interprets two types of constraints:
9970: **
9971: **       schema=?
9972: **       pgno=?
9973: **
9974: ** If neither are present, idxNum is set to 0. If schema=? is present,
9975: ** the 0x01 bit in idxNum is set. If pgno=? is present, the 0x02 bit
9976: ** in idxNum is set.
9977: **
9978: ** If both parameters are present, schema is in position 0 and pgno in
9979: ** position 1.
9980: */
9981: static int dbdataBestIndex(sqlite3_vtab *tab, sqlite3_index_info *pIdx){
9982:   DbdataTable *pTab = (DbdataTable*)tab;
9983:   int i;
9984:   int iSchema = -1;
9985:   int iPgno = -1;
9986:   int colSchema = (pTab->bPtr ? DBPTR_COLUMN_SCHEMA : DBDATA_COLUMN_SCHEMA);
9987: 
9988:   for(i=0; i<pIdx->nConstraint; i++){
9989:     struct sqlite3_index_constraint *p = &pIdx->aConstraint[i];
9990:     if( p->op==SQLITE_INDEX_CONSTRAINT_EQ ){
9991:       if( p->iColumn==colSchema ){
9992:         if( p->usable==0 ) return SQLITE_CONSTRAINT;
9993:         iSchema = i;
9994:       }
9995:       if( p->iColumn==DBDATA_COLUMN_PGNO && p->usable ){
9996:         iPgno = i;
9997:       }
9998:     }
9999:   }
10000: 
10001:   if( iSchema>=0 ){
10002:     pIdx->aConstraintUsage[iSchema].argvIndex = 1;
10003:     pIdx->aConstraintUsage[iSchema].omit = 1;
10004:   }
10005:   if( iPgno>=0 ){
10006:     pIdx->aConstraintUsage[iPgno].argvIndex = 1 + (iSchema>=0);
10007:     pIdx->aConstraintUsage[iPgno].omit = 1;
10008:     pIdx->estimatedCost = 100;
10009:     pIdx->estimatedRows =  50;
10010: 
10011:     if( pTab->bPtr==0 && pIdx->nOrderBy && pIdx->aOrderBy[0].desc==0 ){
10012:       int iCol = pIdx->aOrderBy[0].iColumn;
10013:       if( pIdx->nOrderBy==1 ){
10014:         pIdx->orderByConsumed = (iCol==0 || iCol==1);
10015:       }else if( pIdx->nOrderBy==2 && pIdx->aOrderBy[1].desc==0 && iCol==0 ){
10016:         pIdx->orderByConsumed = (pIdx->aOrderBy[1].iColumn==1);
10017:       }
10018:     }
10019: 
10020:   }else{
10021:     pIdx->estimatedCost = 100000000;
10022:     pIdx->estimatedRows = 1000000000;
10023:   }
10024:   pIdx->idxNum = (iSchema>=0 ? 0x01 : 0x00) | (iPgno>=0 ? 0x02 : 0x00);
10025:   return SQLITE_OK;
10026: }
10027: 
10028: /*
10029: ** Open a new sqlite_dbdata or sqlite_dbptr cursor.
10030: */
10031: static int dbdataOpen(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCursor){
10032:   DbdataCursor *pCsr;
10033: 
10034:   pCsr = (DbdataCursor*)sqlite3_malloc64(sizeof(DbdataCursor));
10035:   if( pCsr==0 ){
10036:     return SQLITE_NOMEM;
10037:   }else{
10038:     memset(pCsr, 0, sizeof(DbdataCursor));
10039:     pCsr->base.pVtab = pVTab;
10040:   }
10041: 
10042:   *ppCursor = (sqlite3_vtab_cursor *)pCsr;
10043:   return SQLITE_OK;
10044: }
10045: 
10046: /*
10047: ** Restore a cursor object to the state it was in when first allocated
10048: ** by dbdataOpen().
10049: */
10050: static void dbdataResetCursor(DbdataCursor *pCsr){
10051:   DbdataTable *pTab = (DbdataTable*)(pCsr->base.pVtab);
10052:   if( pTab->pStmt==0 ){
10053:     pTab->pStmt = pCsr->pStmt;
10054:   }else{
10055:     sqlite3_finalize(pCsr->pStmt);
10056:   }
10057:   pCsr->pStmt = 0;
10058:   pCsr->iPgno = 1;
10059:   pCsr->iCell = 0;
10060:   pCsr->iField = 0;
10061:   pCsr->bOnePage = 0;
10062:   sqlite3_free(pCsr->aPage);
10063:   sqlite3_free(pCsr->pRec);
10064:   pCsr->pRec = 0;
10065:   pCsr->aPage = 0;
10066: }
10067: 
10068: /*
10069: ** Close an sqlite_dbdata or sqlite_dbptr cursor.
10070: */
10071: static int dbdataClose(sqlite3_vtab_cursor *pCursor){
10072:   DbdataCursor *pCsr = (DbdataCursor*)pCursor;
10073:   dbdataResetCursor(pCsr);
10074:   sqlite3_free(pCsr);
10075:   return SQLITE_OK;
10076: }
10077: 
10078: /*
10079: ** Utility methods to decode 16 and 32-bit big-endian unsigned integers.
10080: */
10081: static unsigned int get_uint16(unsigned char *a){
10082:   return (a[0]<<8)|a[1];
10083: }
10084: static unsigned int get_uint32(unsigned char *a){
10085:   return ((unsigned int)a[0]<<24)
10086:        | ((unsigned int)a[1]<<16)
10087:        | ((unsigned int)a[2]<<8)
10088:        | ((unsigned int)a[3]);
10089: }
10090: 
10091: /*
10092: ** Load page pgno from the database via the sqlite_dbpage virtual table.
10093: ** If successful, set (*ppPage) to point to a buffer containing the page
10094: ** data, (*pnPage) to the size of that buffer in bytes and return
10095: ** SQLITE_OK. In this case it is the responsibility of the caller to
10096: ** eventually free the buffer using sqlite3_free().
10097: **
10098: ** Or, if an error occurs, set both (*ppPage) and (*pnPage) to 0 and
10099: ** return an SQLite error code.
10100: */
10101: static int dbdataLoadPage(
10102:   DbdataCursor *pCsr,             /* Cursor object */
10103:   unsigned int pgno,              /* Page number of page to load */
10104:   u8 **ppPage,                    /* OUT: pointer to page buffer */
10105:   int *pnPage                     /* OUT: Size of (*ppPage) in bytes */
10106: ){
10107:   int rc2;
10108:   int rc = SQLITE_OK;
10109:   sqlite3_stmt *pStmt = pCsr->pStmt;
10110: 
10111:   *ppPage = 0;
10112:   *pnPage = 0;
10113:   sqlite3_bind_int64(pStmt, 2, pgno);
10114:   if( SQLITE_ROW==sqlite3_step(pStmt) ){
10115:     int nCopy = sqlite3_column_bytes(pStmt, 0);
10116:     if( nCopy>0 ){
10117:       u8 *pPage;
10118:       pPage = (u8*)sqlite3_malloc64(nCopy + DBDATA_PADDING_BYTES);
10119:       if( pPage==0 ){
10120:         rc = SQLITE_NOMEM;
10121:       }else{
10122:         const u8 *pCopy = sqlite3_column_blob(pStmt, 0);
10123:         memcpy(pPage, pCopy, nCopy);
10124:         memset(&pPage[nCopy], 0, DBDATA_PADDING_BYTES);
10125:       }
10126:       *ppPage = pPage;
10127:       *pnPage = nCopy;
10128:     }
10129:   }
10130:   rc2 = sqlite3_reset(pStmt);
10131:   if( rc==SQLITE_OK ) rc = rc2;
10132: 
10133:   return rc;
10134: }
10135: 
10136: /*
10137: ** Read a varint.  Put the value in *pVal and return the number of bytes.
10138: */
10139: static int dbdataGetVarint(const u8 *z, sqlite3_int64 *pVal){
10140:   sqlite3_int64 v = 0;
10141:   int i;
10142:   for(i=0; i<8; i++){
10143:     v = (v<<7) + (z[i]&0x7f);
10144:     if( (z[i]&0x80)==0 ){ *pVal = v; return i+1; }
10145:   }
10146:   v = (v<<8) + (z[i]&0xff);
10147:   *pVal = v;
10148:   return 9;
10149: }
10150: 
10151: /*
10152: ** Return the number of bytes of space used by an SQLite value of type
10153: ** eType.
10154: */
10155: static int dbdataValueBytes(int eType){
10156:   switch( eType ){
10157:     case 0: case 8: case 9:
10158:     case 10: case 11:
10159:       return 0;
10160:     case 1:
10161:       return 1;
10162:     case 2:
10163:       return 2;
10164:     case 3:
10165:       return 3;
10166:     case 4:
10167:       return 4;
10168:     case 5:
10169:       return 6;
10170:     case 6:
10171:     case 7:
10172:       return 8;
10173:     default:
10174:       if( eType>0 ){
10175:         return ((eType-12) / 2);
10176:       }
10177:       return 0;
10178:   }
10179: }
10180: 
10181: /*
10182: ** Load a value of type eType from buffer pData and use it to set the
10183: ** result of context object pCtx.
10184: */
10185: static void dbdataValue(
10186:   sqlite3_context *pCtx,
10187:   int eType,
10188:   u8 *pData,
10189:   int nData
10190: ){
10191:   if( eType>=0 && dbdataValueBytes(eType)<=nData ){
10192:     switch( eType ){
10193:       case 0:
10194:       case 10:
10195:       case 11:
10196:         sqlite3_result_null(pCtx);
10197:         break;
10198: 
10199:       case 8:
10200:         sqlite3_result_int(pCtx, 0);
10201:         break;
10202:       case 9:
10203:         sqlite3_result_int(pCtx, 1);
10204:         break;
10205: 
10206:       case 1: case 2: case 3: case 4: case 5: case 6: case 7: {
10207:         sqlite3_uint64 v = (signed char)pData[0];
10208:         pData++;
10209:         switch( eType ){
10210:           case 7:
10211:           case 6:  v = (v<<16) + (pData[0]<<8) + pData[1];  pData += 2;
10212:           case 5:  v = (v<<16) + (pData[0]<<8) + pData[1];  pData += 2;
10213:           case 4:  v = (v<<8) + pData[0];  pData++;
10214:           case 3:  v = (v<<8) + pData[0];  pData++;
10215:           case 2:  v = (v<<8) + pData[0];  pData++;
10216:         }
10217: 
10218:         if( eType==7 ){
10219:           double r;
10220:           memcpy(&r, &v, sizeof(r));
10221:           sqlite3_result_double(pCtx, r);
10222:         }else{
10223:           sqlite3_result_int64(pCtx, (sqlite3_int64)v);
10224:         }
10225:         break;
10226:       }
10227: 
10228:       default: {
10229:         int n = ((eType-12) / 2);
10230:         if( eType % 2 ){
10231:           sqlite3_result_text(pCtx, (const char*)pData, n, SQLITE_TRANSIENT);
10232:         }else{
10233:           sqlite3_result_blob(pCtx, pData, n, SQLITE_TRANSIENT);
10234:         }
10235:       }
10236:     }
10237:   }
10238: }
10239: 
10240: /*
10241: ** Move an sqlite_dbdata or sqlite_dbptr cursor to the next entry.
10242: */
10243: static int dbdataNext(sqlite3_vtab_cursor *pCursor){
10244:   DbdataCursor *pCsr = (DbdataCursor*)pCursor;
10245:   DbdataTable *pTab = (DbdataTable*)pCursor->pVtab;
10246: 
10247:   pCsr->iRowid++;
10248:   while( 1 ){
10249:     int rc;
10250:     int iOff = (pCsr->iPgno==1 ? 100 : 0);
10251:     int bNextPage = 0;
10252: 
10253:     if( pCsr->aPage==0 ){
10254:       while( 1 ){
10255:         if( pCsr->bOnePage==0 && pCsr->iPgno>pCsr->szDb ) return SQLITE_OK;
10256:         rc = dbdataLoadPage(pCsr, pCsr->iPgno, &pCsr->aPage, &pCsr->nPage);
10257:         if( rc!=SQLITE_OK ) return rc;
10258:         if( pCsr->aPage ) break;
10259:         pCsr->iPgno++;
10260:       }
10261:       pCsr->iCell = pTab->bPtr ? -2 : 0;
10262:       pCsr->nCell = get_uint16(&pCsr->aPage[iOff+3]);
10263:     }
10264: 
10265:     if( pTab->bPtr ){
10266:       if( pCsr->aPage[iOff]!=0x02 && pCsr->aPage[iOff]!=0x05 ){
10267:         pCsr->iCell = pCsr->nCell;
10268:       }
10269:       pCsr->iCell++;
10270:       if( pCsr->iCell>=pCsr->nCell ){
10271:         sqlite3_free(pCsr->aPage);
10272:         pCsr->aPage = 0;
10273:         if( pCsr->bOnePage ) return SQLITE_OK;
10274:         pCsr->iPgno++;
10275:       }else{
10276:         return SQLITE_OK;
10277:       }
10278:     }else{
10279:       /* If there is no record loaded, load it now. */
10280:       if( pCsr->pRec==0 ){
10281:         int bHasRowid = 0;
10282:         int nPointer = 0;
10283:         sqlite3_int64 nPayload = 0;
10284:         sqlite3_int64 nHdr = 0;
10285:         int iHdr;
10286:         int U, X;
10287:         int nLocal;
10288: 
10289:         switch( pCsr->aPage[iOff] ){
10290:           case 0x02:
10291:             nPointer = 4;
10292:             break;
10293:           case 0x0a:
10294:             break;
10295:           case 0x0d:
10296:             bHasRowid = 1;
10297:             break;
10298:           default:
10299:             /* This is not a b-tree page with records on it. Continue. */
10300:             pCsr->iCell = pCsr->nCell;
10301:             break;
10302:         }
10303: 
10304:         if( pCsr->iCell>=pCsr->nCell ){
10305:           bNextPage = 1;
10306:         }else{
10307: 
10308:           iOff += 8 + nPointer + pCsr->iCell*2;
10309:           if( iOff>pCsr->nPage ){
10310:             bNextPage = 1;
10311:           }else{
10312:             iOff = get_uint16(&pCsr->aPage[iOff]);
10313:           }
10314: 
10315:           /* For an interior node cell, skip past the child-page number */
10316:           iOff += nPointer;
10317: 
10318:           /* Load the "byte of payload including overflow" field */
10319:           if( bNextPage || iOff>pCsr->nPage ){
10320:             bNextPage = 1;
10321:           }else{
10322:             iOff += dbdataGetVarint(&pCsr->aPage[iOff], &nPayload);
10323:           }
10324: 
10325:           /* If this is a leaf intkey cell, load the rowid */
10326:           if( bHasRowid && !bNextPage && iOff<pCsr->nPage ){
10327:             iOff += dbdataGetVarint(&pCsr->aPage[iOff], &pCsr->iIntkey);
10328:           }
10329: 
10330:           /* Figure out how much data to read from the local page */
10331:           U = pCsr->nPage;
10332:           if( bHasRowid ){
10333:             X = U-35;
10334:           }else{
10335:             X = ((U-12)*64/255)-23;
10336:           }
10337:           if( nPayload<=X ){
10338:             nLocal = nPayload;
10339:           }else{
10340:             int M, K;
10341:             M = ((U-12)*32/255)-23;
10342:             K = M+((nPayload-M)%(U-4));
10343:             if( K<=X ){
10344:               nLocal = K;
10345:             }else{
10346:               nLocal = M;
10347:             }
10348:           }
10349: 
10350:           if( bNextPage || nLocal+iOff>pCsr->nPage ){
10351:             bNextPage = 1;
10352:           }else{
10353: 
10354:             /* Allocate space for payload. And a bit more to catch small buffer
10355:             ** overruns caused by attempting to read a varint or similar from
10356:             ** near the end of a corrupt record.  */
10357:             pCsr->pRec = (u8*)sqlite3_malloc64(nPayload+DBDATA_PADDING_BYTES);
10358:             if( pCsr->pRec==0 ) return SQLITE_NOMEM;
10359:             memset(pCsr->pRec, 0, nPayload+DBDATA_PADDING_BYTES);
10360:             pCsr->nRec = nPayload;
10361: 
10362:             /* Load the nLocal bytes of payload */
10363:             memcpy(pCsr->pRec, &pCsr->aPage[iOff], nLocal);
10364:             iOff += nLocal;
10365: 
10366:             /* Load content from overflow pages */
10367:             if( nPayload>nLocal ){
10368:               sqlite3_int64 nRem = nPayload - nLocal;
10369:               unsigned int pgnoOvfl = get_uint32(&pCsr->aPage[iOff]);
10370:               while( nRem>0 ){
10371:                 u8 *aOvfl = 0;
10372:                 int nOvfl = 0;
10373:                 int nCopy;
10374:                 rc = dbdataLoadPage(pCsr, pgnoOvfl, &aOvfl, &nOvfl);
10375:                 assert( rc!=SQLITE_OK || aOvfl==0 || nOvfl==pCsr->nPage );
10376:                 if( rc!=SQLITE_OK ) return rc;
10377:                 if( aOvfl==0 ) break;
10378: 
10379:                 nCopy = U-4;
10380:                 if( nCopy>nRem ) nCopy = nRem;
10381:                 memcpy(&pCsr->pRec[nPayload-nRem], &aOvfl[4], nCopy);
10382:                 nRem -= nCopy;
10383: 
10384:                 pgnoOvfl = get_uint32(aOvfl);
10385:                 sqlite3_free(aOvfl);
10386:               }
10387:             }
10388: 
10389:             iHdr = dbdataGetVarint(pCsr->pRec, &nHdr);
10390:             pCsr->nHdr = nHdr;
10391:             pCsr->pHdrPtr = &pCsr->pRec[iHdr];
10392:             pCsr->pPtr = &pCsr->pRec[pCsr->nHdr];
10393:             pCsr->iField = (bHasRowid ? -1 : 0);
10394:           }
10395:         }
10396:       }else{
10397:         pCsr->iField++;
10398:         if( pCsr->iField>0 ){
10399:           sqlite3_int64 iType;
10400:           if( pCsr->pHdrPtr>&pCsr->pRec[pCsr->nRec] ){
10401:             bNextPage = 1;
10402:           }else{
10403:             pCsr->pHdrPtr += dbdataGetVarint(pCsr->pHdrPtr, &iType);
10404:             pCsr->pPtr += dbdataValueBytes(iType);
10405:           }
10406:         }
10407:       }
10408: 
10409:       if( bNextPage ){
10410:         sqlite3_free(pCsr->aPage);
10411:         sqlite3_free(pCsr->pRec);
10412:         pCsr->aPage = 0;
10413:         pCsr->pRec = 0;
10414:         if( pCsr->bOnePage ) return SQLITE_OK;
10415:         pCsr->iPgno++;
10416:       }else{
10417:         if( pCsr->iField<0 || pCsr->pHdrPtr<&pCsr->pRec[pCsr->nHdr] ){
10418:           return SQLITE_OK;
10419:         }
10420: 
10421:         /* Advance to the next cell. The next iteration of the loop will load
10422:         ** the record and so on. */
10423:         sqlite3_free(pCsr->pRec);
10424:         pCsr->pRec = 0;
10425:         pCsr->iCell++;
10426:       }
10427:     }
10428:   }
10429: 
10430:   assert( !"can't get here" );
10431:   return SQLITE_OK;
10432: }
10433: 
10434: /*
10435: ** Return true if the cursor is at EOF.
10436: */
10437: static int dbdataEof(sqlite3_vtab_cursor *pCursor){
10438:   DbdataCursor *pCsr = (DbdataCursor*)pCursor;
10439:   return pCsr->aPage==0;
10440: }
10441: 
10442: /*
10443: ** Determine the size in pages of database zSchema (where zSchema is
10444: ** "main", "temp" or the name of an attached database) and set
10445: ** pCsr->szDb accordingly. If successful, return SQLITE_OK. Otherwise,
10446: ** an SQLite error code.
10447: */
10448: static int dbdataDbsize(DbdataCursor *pCsr, const char *zSchema){
10449:   DbdataTable *pTab = (DbdataTable*)pCsr->base.pVtab;
10450:   char *zSql = 0;
10451:   int rc, rc2;
10452:   sqlite3_stmt *pStmt = 0;
10453: 
10454:   zSql = sqlite3_mprintf("PRAGMA %Q.page_count", zSchema);
10455:   if( zSql==0 ) return SQLITE_NOMEM;
10456:   rc = sqlite3_prepare_v2(pTab->db, zSql, -1, &pStmt, 0);
10457:   sqlite3_free(zSql);
10458:   if( rc==SQLITE_OK && sqlite3_step(pStmt)==SQLITE_ROW ){
10459:     pCsr->szDb = sqlite3_column_int(pStmt, 0);
10460:   }
10461:   rc2 = sqlite3_finalize(pStmt);
10462:   if( rc==SQLITE_OK ) rc = rc2;
10463:   return rc;
10464: }
10465: 
10466: /*
10467: ** xFilter method for sqlite_dbdata and sqlite_dbptr.
10468: */
10469: static int dbdataFilter(
10470:   sqlite3_vtab_cursor *pCursor,
10471:   int idxNum, const char *idxStr,
10472:   int argc, sqlite3_value **argv
10473: ){
10474:   DbdataCursor *pCsr = (DbdataCursor*)pCursor;
10475:   DbdataTable *pTab = (DbdataTable*)pCursor->pVtab;
10476:   int rc = SQLITE_OK;
10477:   const char *zSchema = "main";
10478: 
10479:   dbdataResetCursor(pCsr);
10480:   assert( pCsr->iPgno==1 );
10481:   if( idxNum & 0x01 ){
10482:     zSchema = (const char*)sqlite3_value_text(argv[0]);
10483:   }
10484:   if( idxNum & 0x02 ){
10485:     pCsr->iPgno = sqlite3_value_int(argv[(idxNum & 0x01)]);
10486:     pCsr->bOnePage = 1;
10487:   }else{
10488:     pCsr->nPage = dbdataDbsize(pCsr, zSchema);
10489:     rc = dbdataDbsize(pCsr, zSchema);
10490:   }
10491: 
10492:   if( rc==SQLITE_OK ){
10493:     if( pTab->pStmt ){
10494:       pCsr->pStmt = pTab->pStmt;
10495:       pTab->pStmt = 0;
10496:     }else{
10497:       rc = sqlite3_prepare_v2(pTab->db,
10498:           "SELECT data FROM sqlite_dbpage(?) WHERE pgno=?", -1,
10499:           &pCsr->pStmt, 0
10500:       );
10501:     }
10502:   }
10503:   if( rc==SQLITE_OK ){
10504:     rc = sqlite3_bind_text(pCsr->pStmt, 1, zSchema, -1, SQLITE_TRANSIENT);
10505:   }else{
10506:     pTab->base.zErrMsg = sqlite3_mprintf("%s", sqlite3_errmsg(pTab->db));
10507:   }
10508:   if( rc==SQLITE_OK ){
10509:     rc = dbdataNext(pCursor);
10510:   }
10511:   return rc;
10512: }
10513: 
10514: /*
10515: ** Return a column for the sqlite_dbdata or sqlite_dbptr table.
10516: */
10517: static int dbdataColumn(
10518:   sqlite3_vtab_cursor *pCursor,
10519:   sqlite3_context *ctx,
10520:   int i
10521: ){
10522:   DbdataCursor *pCsr = (DbdataCursor*)pCursor;
10523:   DbdataTable *pTab = (DbdataTable*)pCursor->pVtab;
10524:   if( pTab->bPtr ){
10525:     switch( i ){
10526:       case DBPTR_COLUMN_PGNO:
10527:         sqlite3_result_int64(ctx, pCsr->iPgno);
10528:         break;
10529:       case DBPTR_COLUMN_CHILD: {
10530:         int iOff = pCsr->iPgno==1 ? 100 : 0;
10531:         if( pCsr->iCell<0 ){
10532:           iOff += 8;
10533:         }else{
10534:           iOff += 12 + pCsr->iCell*2;
10535:           if( iOff>pCsr->nPage ) return SQLITE_OK;
10536:           iOff = get_uint16(&pCsr->aPage[iOff]);
10537:         }
10538:         if( iOff<=pCsr->nPage ){
10539:           sqlite3_result_int64(ctx, get_uint32(&pCsr->aPage[iOff]));
10540:         }
10541:         break;
10542:       }
10543:     }
10544:   }else{
10545:     switch( i ){
10546:       case DBDATA_COLUMN_PGNO:
10547:         sqlite3_result_int64(ctx, pCsr->iPgno);
10548:         break;
10549:       case DBDATA_COLUMN_CELL:
10550:         sqlite3_result_int(ctx, pCsr->iCell);
10551:         break;
10552:       case DBDATA_COLUMN_FIELD:
10553:         sqlite3_result_int(ctx, pCsr->iField);
10554:         break;
10555:       case DBDATA_COLUMN_VALUE: {
10556:         if( pCsr->iField<0 ){
10557:           sqlite3_result_int64(ctx, pCsr->iIntkey);
10558:         }else{
10559:           sqlite3_int64 iType;
10560:           dbdataGetVarint(pCsr->pHdrPtr, &iType);
10561:           dbdataValue(
10562:               ctx, iType, pCsr->pPtr, &pCsr->pRec[pCsr->nRec] - pCsr->pPtr
10563:           );
10564:         }
10565:         break;
10566:       }
10567:     }
10568:   }
10569:   return SQLITE_OK;
10570: }
10571: 
10572: /*
10573: ** Return the rowid for an sqlite_dbdata or sqlite_dptr table.
10574: */
10575: static int dbdataRowid(sqlite3_vtab_cursor *pCursor, sqlite_int64 *pRowid){
10576:   DbdataCursor *pCsr = (DbdataCursor*)pCursor;
10577:   *pRowid = pCsr->iRowid;
10578:   return SQLITE_OK;
10579: }
10580: 
10581: 
10582: /*
10583: ** Invoke this routine to register the "sqlite_dbdata" virtual table module
10584: */
10585: static int sqlite3DbdataRegister(sqlite3 *db){
10586:   static sqlite3_module dbdata_module = {
10587:     0,                            /* iVersion */
10588:     0,                            /* xCreate */
10589:     dbdataConnect,                /* xConnect */
10590:     dbdataBestIndex,              /* xBestIndex */
10591:     dbdataDisconnect,             /* xDisconnect */
10592:     0,                            /* xDestroy */
10593:     dbdataOpen,                   /* xOpen - open a cursor */
10594:     dbdataClose,                  /* xClose - close a cursor */
10595:     dbdataFilter,                 /* xFilter - configure scan constraints */
10596:     dbdataNext,                   /* xNext - advance a cursor */
10597:     dbdataEof,                    /* xEof - check for end of scan */
10598:     dbdataColumn,                 /* xColumn - read data */
10599:     dbdataRowid,                  /* xRowid - read data */
10600:     0,                            /* xUpdate */
10601:     0,                            /* xBegin */
10602:     0,                            /* xSync */
10603:     0,                            /* xCommit */
10604:     0,                            /* xRollback */
10605:     0,                            /* xFindMethod */
10606:     0,                            /* xRename */
10607:     0,                            /* xSavepoint */
10608:     0,                            /* xRelease */
10609:     0,                            /* xRollbackTo */
10610:     0                             /* xShadowName */
10611:   };
10612: 
10613:   int rc = sqlite3_create_module(db, "sqlite_dbdata", &dbdata_module, 0);
10614:   if( rc==SQLITE_OK ){
10615:     rc = sqlite3_create_module(db, "sqlite_dbptr", &dbdata_module, (void*)1);
10616:   }
10617:   return rc;
10618: }
10619: 
10620: #ifdef _WIN32
10621: 
10622: #endif
10623: int sqlite3_dbdata_init(
10624:   sqlite3 *db,
10625:   char **pzErrMsg,
10626:   const sqlite3_api_routines *pApi
10627: ){
10628:   SQLITE_EXTENSION_INIT2(pApi);
10629:   return sqlite3DbdataRegister(db);
10630: }
10631: 
10632: /************************* End ../ext/misc/dbdata.c ********************/
10633: #endif
10634: 
10635: #if defined(SQLITE_ENABLE_SESSION)
10636: /*
10637: ** State information for a single open session
10638: */
10639: typedef struct OpenSession OpenSession;
10640: struct OpenSession {
10641:   char *zName;             /* Symbolic name for this session */
10642:   int nFilter;             /* Number of xFilter rejection GLOB patterns */
10643:   char **azFilter;         /* Array of xFilter rejection GLOB patterns */
10644:   sqlite3_session *p;      /* The open session */
10645: };
10646: #endif
10647: 
10648: typedef struct ExpertInfo ExpertInfo;
10649: struct ExpertInfo {
10650:   sqlite3expert *pExpert;
10651:   int bVerbose;
10652: };
10653: 
10654: /* A single line in the EQP output */
10655: typedef struct EQPGraphRow EQPGraphRow;
10656: struct EQPGraphRow {
10657:   int iEqpId;           /* ID for this row */
10658:   int iParentId;        /* ID of the parent row */
10659:   EQPGraphRow *pNext;   /* Next row in sequence */
10660:   char zText[1];        /* Text to display for this row */
10661: };
10662: 
10663: /* All EQP output is collected into an instance of the following */
10664: typedef struct EQPGraph EQPGraph;
10665: struct EQPGraph {
10666:   EQPGraphRow *pRow;    /* Linked list of all rows of the EQP output */
10667:   EQPGraphRow *pLast;   /* Last element of the pRow list */
10668:   char zPrefix[100];    /* Graph prefix */
10669: };
10670: 
10671: /*
10672: ** State information about the database connection is contained in an
10673: ** instance of the following structure.
10674: */
10675: typedef struct ShellState ShellState;
10676: struct ShellState {
10677:   sqlite3 *db;           /* The database */
10678:   u8 autoExplain;        /* Automatically turn on .explain mode */
10679:   u8 autoEQP;            /* Run EXPLAIN QUERY PLAN prior to seach SQL stmt */
10680:   u8 autoEQPtest;        /* autoEQP is in test mode */
10681:   u8 autoEQPtrace;       /* autoEQP is in trace mode */
10682:   u8 statsOn;            /* True to display memory stats before each finalize */
10683:   u8 scanstatsOn;        /* True to display scan stats before each finalize */
10684:   u8 openMode;           /* SHELL_OPEN_NORMAL, _APPENDVFS, or _ZIPFILE */
10685:   u8 doXdgOpen;          /* Invoke start/open/xdg-open in output_reset() */
10686:   u8 nEqpLevel;          /* Depth of the EQP output graph */
10687:   u8 eTraceType;         /* SHELL_TRACE_* value for type of trace */
10688:   unsigned mEqpLines;    /* Mask of veritical lines in the EQP output graph */
10689:   int outCount;          /* Revert to stdout when reaching zero */
10690:   int cnt;               /* Number of records displayed so far */
10691:   int lineno;            /* Line number of last line read from in */
10692:   int openFlags;         /* Additional flags to open.  (SQLITE_OPEN_NOFOLLOW) */
10693:   FILE *in;              /* Read commands from this stream */
10694:   FILE *out;             /* Write results here */
10695:   FILE *traceOut;        /* Output for sqlite3_trace() */
10696:   int nErr;              /* Number of errors seen */
10697:   int mode;              /* An output mode setting */
10698:   int modePrior;         /* Saved mode */
10699:   int cMode;             /* temporary output mode for the current query */
10700:   int normalMode;        /* Output mode before ".explain on" */
10701:   int writableSchema;    /* True if PRAGMA writable_schema=ON */
10702:   int showHeader;        /* True to show column names in List or Column mode */
10703:   int nCheck;            /* Number of ".check" commands run */
10704:   unsigned nProgress;    /* Number of progress callbacks encountered */
10705:   unsigned mxProgress;   /* Maximum progress callbacks before failing */
10706:   unsigned flgProgress;  /* Flags for the progress callback */
10707:   unsigned shellFlgs;    /* Various flags */
10708:   unsigned priorShFlgs;  /* Saved copy of flags */
10709:   sqlite3_int64 szMax;   /* --maxsize argument to .open */
10710:   char *zDestTable;      /* Name of destination table when MODE_Insert */
10711:   char *zTempFile;       /* Temporary file that might need deleting */
10712:   char zTestcase[30];    /* Name of current test case */
10713:   char colSeparator[20]; /* Column separator character for several modes */
10714:   char rowSeparator[20]; /* Row separator character for MODE_Ascii */
10715:   char colSepPrior[20];  /* Saved column separator */
10716:   char rowSepPrior[20];  /* Saved row separator */
10717:   int *colWidth;         /* Requested width of each column in columnar modes */
10718:   int *actualWidth;      /* Actual width of each column */
10719:   int nWidth;            /* Number of slots in colWidth[] and actualWidth[] */
10720:   char nullValue[20];    /* The text to print when a NULL comes back from
10721:                          ** the database */
10722:   char outfile[FILENAME_MAX]; /* Filename for *out */
10723:   const char *zDbFilename;    /* name of the database file */
10724:   char *zFreeOnClose;         /* Filename to free when closing */
10725:   const char *zVfs;           /* Name of VFS to use */
10726:   sqlite3_stmt *pStmt;   /* Current statement if any. */
10727:   FILE *pLog;            /* Write log output here */
10728:   int *aiIndent;         /* Array of indents used in MODE_Explain */
10729:   int nIndent;           /* Size of array aiIndent[] */
10730:   int iIndent;           /* Index of current op in aiIndent[] */
10731:   EQPGraph sGraph;       /* Information for the graphical EXPLAIN QUERY PLAN */
10732: #if defined(SQLITE_ENABLE_SESSION)
10733:   int nSession;             /* Number of active sessions */
10734:   OpenSession aSession[4];  /* Array of sessions.  [0] is in focus. */
10735: #endif
10736:   ExpertInfo expert;        /* Valid if previous command was ".expert OPT..." */
10737: };
10738: 
10739: 
10740: /* Allowed values for ShellState.autoEQP
10741: */
10742: #define AUTOEQP_off      0           /* Automatic EXPLAIN QUERY PLAN is off */
10743: #define AUTOEQP_on       1           /* Automatic EQP is on */
10744: #define AUTOEQP_trigger  2           /* On and also show plans for triggers */
10745: #define AUTOEQP_full     3           /* Show full EXPLAIN */
10746: 
10747: /* Allowed values for ShellState.openMode
10748: */
10749: #define SHELL_OPEN_UNSPEC      0      /* No open-mode specified */
10750: #define SHELL_OPEN_NORMAL      1      /* Normal database file */
10751: #define SHELL_OPEN_APPENDVFS   2      /* Use appendvfs */
10752: #define SHELL_OPEN_ZIPFILE     3      /* Use the zipfile virtual table */
10753: #define SHELL_OPEN_READONLY    4      /* Open a normal database read-only */
10754: #define SHELL_OPEN_DESERIALIZE 5      /* Open using sqlite3_deserialize() */
10755: #define SHELL_OPEN_HEXDB       6      /* Use "dbtotxt" output as data source */
10756: 
10757: /* Allowed values for ShellState.eTraceType
10758: */
10759: #define SHELL_TRACE_PLAIN      0      /* Show input SQL text */
10760: #define SHELL_TRACE_EXPANDED   1      /* Show expanded SQL text */
10761: #define SHELL_TRACE_NORMALIZED 2      /* Show normalized SQL text */
10762: 
10763: /* Bits in the ShellState.flgProgress variable */
10764: #define SHELL_PROGRESS_QUIET 0x01  /* Omit announcing every progress callback */
10765: #define SHELL_PROGRESS_RESET 0x02  /* Reset the count when the progres
10766:                                    ** callback limit is reached, and for each
10767:                                    ** top-level SQL statement */
10768: #define SHELL_PROGRESS_ONCE  0x04  /* Cancel the --limit after firing once */
10769: 
10770: /*
10771: ** These are the allowed shellFlgs values
10772: */
10773: #define SHFLG_Pagecache      0x00000001 /* The --pagecache option is used */
10774: #define SHFLG_Lookaside      0x00000002 /* Lookaside memory is used */
10775: #define SHFLG_Backslash      0x00000004 /* The --backslash option is used */
10776: #define SHFLG_PreserveRowid  0x00000008 /* .dump preserves rowid values */
10777: #define SHFLG_Newlines       0x00000010 /* .dump --newline flag */
10778: #define SHFLG_CountChanges   0x00000020 /* .changes setting */
10779: #define SHFLG_Echo           0x00000040 /* .echo or --echo setting */
10780: #define SHFLG_HeaderSet      0x00000080 /* .header has been used */
10781: 
10782: /*
10783: ** Macros for testing and setting shellFlgs
10784: */
10785: #define ShellHasFlag(P,X)    (((P)->shellFlgs & (X))!=0)
10786: #define ShellSetFlag(P,X)    ((P)->shellFlgs|=(X))
10787: #define ShellClearFlag(P,X)  ((P)->shellFlgs&=(~(X)))
10788: 
10789: /*
10790: ** These are the allowed modes.
10791: */
10792: #define MODE_Line     0  /* One column per line.  Blank line between records */
10793: #define MODE_Column   1  /* One record per line in neat columns */
10794: #define MODE_List     2  /* One record per line with a separator */
10795: #define MODE_Semi     3  /* Same as MODE_List but append ";" to each line */
10796: #define MODE_Html     4  /* Generate an XHTML table */
10797: #define MODE_Insert   5  /* Generate SQL "insert" statements */
10798: #define MODE_Quote    6  /* Quote values as for SQL */
10799: #define MODE_Tcl      7  /* Generate ANSI-C or TCL quoted elements */
10800: #define MODE_Csv      8  /* Quote strings, numbers are plain */
10801: #define MODE_Explain  9  /* Like MODE_Column, but do not truncate data */
10802: #define MODE_Ascii   10  /* Use ASCII unit and record separators (0x1F/0x1E) */
10803: #define MODE_Pretty  11  /* Pretty-print schemas */
10804: #define MODE_EQP     12  /* Converts EXPLAIN QUERY PLAN output into a graph */
10805: #define MODE_Json    13  /* Output JSON */
10806: #define MODE_Markdown 14 /* Markdown formatting */
10807: #define MODE_Table   15  /* MySQL-style table formatting */
10808: #define MODE_Box     16  /* Unicode box-drawing characters */
10809: 
10810: static const char *modeDescr[] = {
10811:   "line",
10812:   "column",
10813:   "list",
10814:   "semi",
10815:   "html",
10816:   "insert",
10817:   "quote",
10818:   "tcl",
10819:   "csv",
10820:   "explain",
10821:   "ascii",
10822:   "prettyprint",
10823:   "eqp",
10824:   "json",
10825:   "markdown",
10826:   "table",
10827:   "box"
10828: };
10829: 
10830: /*
10831: ** These are the column/row/line separators used by the various
10832: ** import/export modes.
10833: */
10834: #define SEP_Column    "|"
10835: #define SEP_Row       "\n"
10836: #define SEP_Tab       "\t"
10837: #define SEP_Space     " "
10838: #define SEP_Comma     ","
10839: #define SEP_CrLf      "\r\n"
10840: #define SEP_Unit      "\x1F"
10841: #define SEP_Record    "\x1E"
10842: 
10843: /*
10844: ** A callback for the sqlite3_log() interface.
10845: */
10846: static void shellLog(void *pArg, int iErrCode, const char *zMsg){
10847:   ShellState *p = (ShellState*)pArg;
10848:   if( p->pLog==0 ) return;
10849:   utf8_printf(p->pLog, "(%d) %s\n", iErrCode, zMsg);
10850:   fflush(p->pLog);
10851: }
10852: 
10853: /*
10854: ** SQL function:  shell_putsnl(X)
10855: **
10856: ** Write the text X to the screen (or whatever output is being directed)
10857: ** adding a newline at the end, and then return X.
10858: */
10859: static void shellPutsFunc(
10860:   sqlite3_context *pCtx,
10861:   int nVal,
10862:   sqlite3_value **apVal
10863: ){
10864:   ShellState *p = (ShellState*)sqlite3_user_data(pCtx);
10865:   (void)nVal;
10866:   utf8_printf(p->out, "%s\n", sqlite3_value_text(apVal[0]));
10867:   sqlite3_result_value(pCtx, apVal[0]);
10868: }
10869: 
10870: /*
10871: ** SQL function:   edit(VALUE)
10872: **                 edit(VALUE,EDITOR)
10873: **
10874: ** These steps:
10875: **
10876: **     (1) Write VALUE into a temporary file.
10877: **     (2) Run program EDITOR on that temporary file.
10878: **     (3) Read the temporary file back and return its content as the result.
10879: **     (4) Delete the temporary file
10880: **
10881: ** If the EDITOR argument is omitted, use the value in the VISUAL
10882: ** environment variable.  If still there is no EDITOR, through an error.
10883: **
10884: ** Also throw an error if the EDITOR program returns a non-zero exit code.
10885: */
10886: #ifndef SQLITE_NOHAVE_SYSTEM
10887: static void editFunc(
10888:   sqlite3_context *context,
10889:   int argc,
10890:   sqlite3_value **argv
10891: ){
10892:   const char *zEditor;
10893:   char *zTempFile = 0;
10894:   sqlite3 *db;
10895:   char *zCmd = 0;
10896:   int bBin;
10897:   int rc;
10898:   int hasCRNL = 0;
10899:   FILE *f = 0;
10900:   sqlite3_int64 sz;
10901:   sqlite3_int64 x;
10902:   unsigned char *p = 0;
10903: 
10904:   if( argc==2 ){
10905:     zEditor = (const char*)sqlite3_value_text(argv[1]);
10906:   }else{
10907:     zEditor = getenv("VISUAL");
10908:   }
10909:   if( zEditor==0 ){
10910:     sqlite3_result_error(context, "no editor for edit()", -1);
10911:     return;
10912:   }
10913:   if( sqlite3_value_type(argv[0])==SQLITE_NULL ){
10914:     sqlite3_result_error(context, "NULL input to edit()", -1);
10915:     return;
10916:   }
10917:   db = sqlite3_context_db_handle(context);
10918:   zTempFile = 0;
10919:   sqlite3_file_control(db, 0, SQLITE_FCNTL_TEMPFILENAME, &zTempFile);
10920:   if( zTempFile==0 ){
10921:     sqlite3_uint64 r = 0;
10922:     sqlite3_randomness(sizeof(r), &r);
10923:     zTempFile = sqlite3_mprintf("temp%llx", r);
10924:     if( zTempFile==0 ){
10925:       sqlite3_result_error_nomem(context);
10926:       return;
10927:     }
10928:   }
10929:   bBin = sqlite3_value_type(argv[0])==SQLITE_BLOB;
10930:   /* When writing the file to be edited, do \n to \r\n conversions on systems
10931:   ** that want \r\n line endings */
10932:   f = fopen(zTempFile, bBin ? "wb" : "w");
10933:   if( f==0 ){
10934:     sqlite3_result_error(context, "edit() cannot open temp file", -1);
10935:     goto edit_func_end;
10936:   }
10937:   sz = sqlite3_value_bytes(argv[0]);
10938:   if( bBin ){
10939:     x = fwrite(sqlite3_value_blob(argv[0]), 1, (size_t)sz, f);
10940:   }else{
10941:     const char *z = (const char*)sqlite3_value_text(argv[0]);
10942:     /* Remember whether or not the value originally contained \r\n */
10943:     if( z && strstr(z,"\r\n")!=0 ) hasCRNL = 1;
10944:     x = fwrite(sqlite3_value_text(argv[0]), 1, (size_t)sz, f);
10945:   }
10946:   fclose(f);
10947:   f = 0;
10948:   if( x!=sz ){
10949:     sqlite3_result_error(context, "edit() could not write the whole file", -1);
10950:     goto edit_func_end;
10951:   }
10952:   zCmd = sqlite3_mprintf("%s \"%s\"", zEditor, zTempFile);
10953:   if( zCmd==0 ){
10954:     sqlite3_result_error_nomem(context);
10955:     goto edit_func_end;
10956:   }
10957:   rc = system(zCmd);
10958:   sqlite3_free(zCmd);
10959:   if( rc ){
10960:     sqlite3_result_error(context, "EDITOR returned non-zero", -1);
10961:     goto edit_func_end;
10962:   }
10963:   f = fopen(zTempFile, "rb");
10964:   if( f==0 ){
10965:     sqlite3_result_error(context,
10966:       "edit() cannot reopen temp file after edit", -1);
10967:     goto edit_func_end;
10968:   }
10969:   fseek(f, 0, SEEK_END);
10970:   sz = ftell(f);
10971:   rewind(f);
10972:   p = sqlite3_malloc64( sz+1 );
10973:   if( p==0 ){
10974:     sqlite3_result_error_nomem(context);
10975:     goto edit_func_end;
10976:   }
10977:   x = fread(p, 1, (size_t)sz, f);
10978:   fclose(f);
10979:   f = 0;
10980:   if( x!=sz ){
10981:     sqlite3_result_error(context, "could not read back the whole file", -1);
10982:     goto edit_func_end;
10983:   }
10984:   if( bBin ){
10985:     sqlite3_result_blob64(context, p, sz, sqlite3_free);
10986:   }else{
10987:     sqlite3_int64 i, j;
10988:     if( hasCRNL ){
10989:       /* If the original contains \r\n then do no conversions back to \n */
10990:       j = sz;
10991:     }else{
10992:       /* If the file did not originally contain \r\n then convert any new
10993:       ** \r\n back into \n */
10994:       for(i=j=0; i<sz; i++){
10995:         if( p[i]=='\r' && p[i+1]=='\n' ) i++;
10996:         p[j++] = p[i];
10997:       }
10998:       sz = j;
10999:       p[sz] = 0;
11000:     }
11001:     sqlite3_result_text64(context, (const char*)p, sz,
11002:                           sqlite3_free, SQLITE_UTF8);
11003:   }
11004:   p = 0;
11005: 
11006: edit_func_end:
11007:   if( f ) fclose(f);
11008:   unlink(zTempFile);
11009:   sqlite3_free(zTempFile);
11010:   sqlite3_free(p);
11011: }
11012: #endif /* SQLITE_NOHAVE_SYSTEM */
11013: 
11014: /*
11015: ** Save or restore the current output mode
11016: */
11017: static void outputModePush(ShellState *p){
11018:   p->modePrior = p->mode;
11019:   p->priorShFlgs = p->shellFlgs;
11020:   memcpy(p->colSepPrior, p->colSeparator, sizeof(p->colSeparator));
11021:   memcpy(p->rowSepPrior, p->rowSeparator, sizeof(p->rowSeparator));
11022: }
11023: static void outputModePop(ShellState *p){
11024:   p->mode = p->modePrior;
11025:   p->shellFlgs = p->priorShFlgs;
11026:   memcpy(p->colSeparator, p->colSepPrior, sizeof(p->colSeparator));
11027:   memcpy(p->rowSeparator, p->rowSepPrior, sizeof(p->rowSeparator));
11028: }
11029: 
11030: /*
11031: ** Output the given string as a hex-encoded blob (eg. X'1234' )
11032: */
11033: static void output_hex_blob(FILE *out, const void *pBlob, int nBlob){
11034:   int i;
11035:   char *zBlob = (char *)pBlob;
11036:   raw_printf(out,"X'");
11037:   for(i=0; i<nBlob; i++){ raw_printf(out,"%02x",zBlob[i]&0xff); }
11038:   raw_printf(out,"'");
11039: }
11040: 
11041: /*
11042: ** Find a string that is not found anywhere in z[].  Return a pointer
11043: ** to that string.
11044: **
11045: ** Try to use zA and zB first.  If both of those are already found in z[]
11046: ** then make up some string and store it in the buffer zBuf.
11047: */
11048: static const char *unused_string(
11049:   const char *z,                    /* Result must not appear anywhere in z */
11050:   const char *zA, const char *zB,   /* Try these first */
11051:   char *zBuf                        /* Space to store a generated string */
11052: ){
11053:   unsigned i = 0;
11054:   if( strstr(z, zA)==0 ) return zA;
11055:   if( strstr(z, zB)==0 ) return zB;
11056:   do{
11057:     sqlite3_snprintf(20,zBuf,"(%s%u)", zA, i++);
11058:   }while( strstr(z,zBuf)!=0 );
11059:   return zBuf;
11060: }
11061: 
11062: /*
11063: ** Output the given string as a quoted string using SQL quoting conventions.
11064: **
11065: ** See also: output_quoted_escaped_string()
11066: */
11067: static void output_quoted_string(FILE *out, const char *z){
11068:   int i;
11069:   char c;
11070:   setBinaryMode(out, 1);
11071:   for(i=0; (c = z[i])!=0 && c!='\''; i++){}
11072:   if( c==0 ){
11073:     utf8_printf(out,"'%s'",z);
11074:   }else{
11075:     raw_printf(out, "'");
11076:     while( *z ){
11077:       for(i=0; (c = z[i])!=0 && c!='\''; i++){}
11078:       if( c=='\'' ) i++;
11079:       if( i ){
11080:         utf8_printf(out, "%.*s", i, z);
11081:         z += i;
11082:       }
11083:       if( c=='\'' ){
11084:         raw_printf(out, "'");
11085:         continue;
11086:       }
11087:       if( c==0 ){
11088:         break;
11089:       }
11090:       z++;
11091:     }
11092:     raw_printf(out, "'");
11093:   }
11094:   setTextMode(out, 1);
11095: }
11096: 
11097: /*
11098: ** Output the given string as a quoted string using SQL quoting conventions.
11099: ** Additionallly , escape the "\n" and "\r" characters so that they do not
11100: ** get corrupted by end-of-line translation facilities in some operating
11101: ** systems.
11102: **
11103: ** This is like output_quoted_string() but with the addition of the \r\n
11104: ** escape mechanism.
11105: */
11106: static void output_quoted_escaped_string(FILE *out, const char *z){
11107:   int i;
11108:   char c;
11109:   setBinaryMode(out, 1);
11110:   for(i=0; (c = z[i])!=0 && c!='\'' && c!='\n' && c!='\r'; i++){}
11111:   if( c==0 ){
11112:     utf8_printf(out,"'%s'",z);
11113:   }else{
11114:     const char *zNL = 0;
11115:     const char *zCR = 0;
11116:     int nNL = 0;
11117:     int nCR = 0;
11118:     char zBuf1[20], zBuf2[20];
11119:     for(i=0; z[i]; i++){
11120:       if( z[i]=='\n' ) nNL++;
11121:       if( z[i]=='\r' ) nCR++;
11122:     }
11123:     if( nNL ){
11124:       raw_printf(out, "replace(");
11125:       zNL = unused_string(z, "\\n", "\\012", zBuf1);
11126:     }
11127:     if( nCR ){
11128:       raw_printf(out, "replace(");
11129:       zCR = unused_string(z, "\\r", "\\015", zBuf2);
11130:     }
11131:     raw_printf(out, "'");
11132:     while( *z ){
11133:       for(i=0; (c = z[i])!=0 && c!='\n' && c!='\r' && c!='\''; i++){}
11134:       if( c=='\'' ) i++;
11135:       if( i ){
11136:         utf8_printf(out, "%.*s", i, z);
11137:         z += i;
11138:       }
11139:       if( c=='\'' ){
11140:         raw_printf(out, "'");
11141:         continue;
11142:       }
11143:       if( c==0 ){
11144:         break;
11145:       }
11146:       z++;
11147:       if( c=='\n' ){
11148:         raw_printf(out, "%s", zNL);
11149:         continue;
11150:       }
11151:       raw_printf(out, "%s", zCR);
11152:     }
11153:     raw_printf(out, "'");
11154:     if( nCR ){
11155:       raw_printf(out, ",'%s',char(13))", zCR);
11156:     }
11157:     if( nNL ){
11158:       raw_printf(out, ",'%s',char(10))", zNL);
11159:     }
11160:   }
11161:   setTextMode(out, 1);
11162: }
11163: 
11164: /*
11165: ** Output the given string as a quoted according to C or TCL quoting rules.
11166: */
11167: static void output_c_string(FILE *out, const char *z){
11168:   unsigned int c;
11169:   fputc('"', out);
11170:   while( (c = *(z++))!=0 ){
11171:     if( c=='\\' ){
11172:       fputc(c, out);
11173:       fputc(c, out);
11174:     }else if( c=='"' ){
11175:       fputc('\\', out);
11176:       fputc('"', out);
11177:     }else if( c=='\t' ){
11178:       fputc('\\', out);
11179:       fputc('t', out);
11180:     }else if( c=='\n' ){
11181:       fputc('\\', out);
11182:       fputc('n', out);
11183:     }else if( c=='\r' ){
11184:       fputc('\\', out);
11185:       fputc('r', out);
11186:     }else if( !isprint(c&0xff) ){
11187:       raw_printf(out, "\\%03o", c&0xff);
11188:     }else{
11189:       fputc(c, out);
11190:     }
11191:   }
11192:   fputc('"', out);
11193: }
11194: 
11195: /*
11196: ** Output the given string as a quoted according to JSON quoting rules.
11197: */
11198: static void output_json_string(FILE *out, const char *z, int n){
11199:   unsigned int c;
11200:   if( n<0 ) n = (int)strlen(z);
11201:   fputc('"', out);
11202:   while( n-- ){
11203:     c = *(z++);
11204:     if( c=='\\' || c=='"' ){
11205:       fputc('\\', out);
11206:       fputc(c, out);
11207:     }else if( c<=0x1f ){
11208:       fputc('\\', out);
11209:       if( c=='\b' ){
11210:         fputc('b', out);
11211:       }else if( c=='\f' ){
11212:         fputc('f', out);
11213:       }else if( c=='\n' ){
11214:         fputc('n', out);
11215:       }else if( c=='\r' ){
11216:         fputc('r', out);
11217:       }else if( c=='\t' ){
11218:         fputc('t', out);
11219:       }else{
11220:          raw_printf(out, "u%04x",c);
11221:       }
11222:     }else{
11223:       fputc(c, out);
11224:     }
11225:   }
11226:   fputc('"', out);
11227: }
11228: 
11229: /*
11230: ** Output the given string with characters that are special to
11231: ** HTML escaped.
11232: */
11233: static void output_html_string(FILE *out, const char *z){
11234:   int i;
11235:   if( z==0 ) z = "";
11236:   while( *z ){
11237:     for(i=0;   z[i]
11238:             && z[i]!='<'
11239:             && z[i]!='&'
11240:             && z[i]!='>'
11241:             && z[i]!='\"'
11242:             && z[i]!='\'';
11243:         i++){}
11244:     if( i>0 ){
11245:       utf8_printf(out,"%.*s",i,z);
11246:     }
11247:     if( z[i]=='<' ){
11248:       raw_printf(out,"&lt;");
11249:     }else if( z[i]=='&' ){
11250:       raw_printf(out,"&amp;");
11251:     }else if( z[i]=='>' ){
11252:       raw_printf(out,"&gt;");
11253:     }else if( z[i]=='\"' ){
11254:       raw_printf(out,"&quot;");
11255:     }else if( z[i]=='\'' ){
11256:       raw_printf(out,"&#39;");
11257:     }else{
11258:       break;
11259:     }
11260:     z += i + 1;
11261:   }
11262: }
11263: 
11264: /*
11265: ** If a field contains any character identified by a 1 in the following
11266: ** array, then the string must be quoted for CSV.
11267: */
11268: static const char needCsvQuote[] = {
11269:   1, 1, 1, 1, 1, 1, 1, 1,   1, 1, 1, 1, 1, 1, 1, 1,
11270:   1, 1, 1, 1, 1, 1, 1, 1,   1, 1, 1, 1, 1, 1, 1, 1,
11271:   1, 0, 1, 0, 0, 0, 0, 1,   0, 0, 0, 0, 0, 0, 0, 0,
11272:   0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0,
11273:   0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0,
11274:   0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0,
11275:   0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0,
11276:   0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 1,
11277:   1, 1, 1, 1, 1, 1, 1, 1,   1, 1, 1, 1, 1, 1, 1, 1,
11278:   1, 1, 1, 1, 1, 1, 1, 1,   1, 1, 1, 1, 1, 1, 1, 1,
11279:   1, 1, 1, 1, 1, 1, 1, 1,   1, 1, 1, 1, 1, 1, 1, 1,
11280:   1, 1, 1, 1, 1, 1, 1, 1,   1, 1, 1, 1, 1, 1, 1, 1,
11281:   1, 1, 1, 1, 1, 1, 1, 1,   1, 1, 1, 1, 1, 1, 1, 1,
11282:   1, 1, 1, 1, 1, 1, 1, 1,   1, 1, 1, 1, 1, 1, 1, 1,
11283:   1, 1, 1, 1, 1, 1, 1, 1,   1, 1, 1, 1, 1, 1, 1, 1,
11284:   1, 1, 1, 1, 1, 1, 1, 1,   1, 1, 1, 1, 1, 1, 1, 1,
11285: };
11286: 
11287: /*
11288: ** Output a single term of CSV.  Actually, p->colSeparator is used for
11289: ** the separator, which may or may not be a comma.  p->nullValue is
11290: ** the null value.  Strings are quoted if necessary.  The separator
11291: ** is only issued if bSep is true.
11292: */
11293: static void output_csv(ShellState *p, const char *z, int bSep){
11294:   FILE *out = p->out;
11295:   if( z==0 ){
11296:     utf8_printf(out,"%s",p->nullValue);
11297:   }else{
11298:     int i;
11299:     int nSep = strlen30(p->colSeparator);
11300:     for(i=0; z[i]; i++){
11301:       if( needCsvQuote[((unsigned char*)z)[i]]
11302:          || (z[i]==p->colSeparator[0] &&
11303:              (nSep==1 || memcmp(z, p->colSeparator, nSep)==0)) ){
11304:         i = 0;
11305:         break;
11306:       }
11307:     }
11308:     if( i==0 ){
11309:       char *zQuoted = sqlite3_mprintf("\"%w\"", z);
11310:       utf8_printf(out, "%s", zQuoted);
11311:       sqlite3_free(zQuoted);
11312:     }else{
11313:       utf8_printf(out, "%s", z);
11314:     }
11315:   }
11316:   if( bSep ){
11317:     utf8_printf(p->out, "%s", p->colSeparator);
11318:   }
11319: }
11320: 
11321: /*
11322: ** This routine runs when the user presses Ctrl-C
11323: */
11324: static void interrupt_handler(int NotUsed){
11325:   UNUSED_PARAMETER(NotUsed);
11326:   seenInterrupt++;
11327:   if( seenInterrupt>2 ) exit(1);
11328:   if( globalDb ) sqlite3_interrupt(globalDb);
11329: }
11330: 
11331: #if (defined(_WIN32) || defined(WIN32)) && !defined(_WIN32_WCE)
11332: /*
11333: ** This routine runs for console events (e.g. Ctrl-C) on Win32
11334: */
11335: static BOOL WINAPI ConsoleCtrlHandler(
11336:   DWORD dwCtrlType /* One of the CTRL_*_EVENT constants */
11337: ){
11338:   if( dwCtrlType==CTRL_C_EVENT ){
11339:     interrupt_handler(0);
11340:     return TRUE;
11341:   }
11342:   return FALSE;
11343: }
11344: #endif
11345: 
11346: #ifndef SQLITE_OMIT_AUTHORIZATION
11347: /*
11348: ** When the ".auth ON" is set, the following authorizer callback is
11349: ** invoked.  It always returns SQLITE_OK.
11350: */
11351: static int shellAuth(
11352:   void *pClientData,
11353:   int op,
11354:   const char *zA1,
11355:   const char *zA2,
11356:   const char *zA3,
11357:   const char *zA4
11358: ){
11359:   ShellState *p = (ShellState*)pClientData;
11360:   static const char *azAction[] = { 0,
11361:      "CREATE_INDEX",         "CREATE_TABLE",         "CREATE_TEMP_INDEX",
11362:      "CREATE_TEMP_TABLE",    "CREATE_TEMP_TRIGGER",  "CREATE_TEMP_VIEW",
11363:      "CREATE_TRIGGER",       "CREATE_VIEW",          "DELETE",
11364:      "DROP_INDEX",           "DROP_TABLE",           "DROP_TEMP_INDEX",
11365:      "DROP_TEMP_TABLE",      "DROP_TEMP_TRIGGER",    "DROP_TEMP_VIEW",
11366:      "DROP_TRIGGER",         "DROP_VIEW",            "INSERT",
11367:      "PRAGMA",               "READ",                 "SELECT",
11368:      "TRANSACTION",          "UPDATE",               "ATTACH",
11369:      "DETACH",               "ALTER_TABLE",          "REINDEX",
11370:      "ANALYZE",              "CREATE_VTABLE",        "DROP_VTABLE",
11371:      "FUNCTION",             "SAVEPOINT",            "RECURSIVE"
11372:   };
11373:   int i;
11374:   const char *az[4];
11375:   az[0] = zA1;
11376:   az[1] = zA2;
11377:   az[2] = zA3;
11378:   az[3] = zA4;
11379:   utf8_printf(p->out, "authorizer: %s", azAction[op]);
11380:   for(i=0; i<4; i++){
11381:     raw_printf(p->out, " ");
11382:     if( az[i] ){
11383:       output_c_string(p->out, az[i]);
11384:     }else{
11385:       raw_printf(p->out, "NULL");
11386:     }
11387:   }
11388:   raw_printf(p->out, "\n");
11389:   return SQLITE_OK;
11390: }
11391: #endif
11392: 
11393: /*
11394: ** Print a schema statement.  Part of MODE_Semi and MODE_Pretty output.
11395: **
11396: ** This routine converts some CREATE TABLE statements for shadow tables
11397: ** in FTS3/4/5 into CREATE TABLE IF NOT EXISTS statements.
11398: */
11399: static void printSchemaLine(FILE *out, const char *z, const char *zTail){
11400:   if( z==0 ) return;
11401:   if( zTail==0 ) return;
11402:   if( sqlite3_strglob("CREATE TABLE ['\"]*", z)==0 ){
11403:     utf8_printf(out, "CREATE TABLE IF NOT EXISTS %s%s", z+13, zTail);
11404:   }else{
11405:     utf8_printf(out, "%s%s", z, zTail);
11406:   }
11407: }
11408: static void printSchemaLineN(FILE *out, char *z, int n, const char *zTail){
11409:   char c = z[n];
11410:   z[n] = 0;
11411:   printSchemaLine(out, z, zTail);
11412:   z[n] = c;
11413: }
11414: 
11415: /*
11416: ** Return true if string z[] has nothing but whitespace and comments to the
11417: ** end of the first line.
11418: */
11419: static int wsToEol(const char *z){
11420:   int i;
11421:   for(i=0; z[i]; i++){
11422:     if( z[i]=='\n' ) return 1;
11423:     if( IsSpace(z[i]) ) continue;
11424:     if( z[i]=='-' && z[i+1]=='-' ) return 1;
11425:     return 0;
11426:   }
11427:   return 1;
11428: }
11429: 
11430: /*
11431: ** Add a new entry to the EXPLAIN QUERY PLAN data
11432: */
11433: static void eqp_append(ShellState *p, int iEqpId, int p2, const char *zText){
11434:   EQPGraphRow *pNew;
11435:   int nText = strlen30(zText);
11436:   if( p->autoEQPtest ){
11437:     utf8_printf(p->out, "%d,%d,%s\n", iEqpId, p2, zText);
11438:   }
11439:   pNew = sqlite3_malloc64( sizeof(*pNew) + nText );
11440:   if( pNew==0 ) shell_out_of_memory();
11441:   pNew->iEqpId = iEqpId;
11442:   pNew->iParentId = p2;
11443:   memcpy(pNew->zText, zText, nText+1);
11444:   pNew->pNext = 0;
11445:   if( p->sGraph.pLast ){
11446:     p->sGraph.pLast->pNext = pNew;
11447:   }else{
11448:     p->sGraph.pRow = pNew;
11449:   }
11450:   p->sGraph.pLast = pNew;
11451: }
11452: 
11453: /*
11454: ** Free and reset the EXPLAIN QUERY PLAN data that has been collected
11455: ** in p->sGraph.
11456: */
11457: static void eqp_reset(ShellState *p){
11458:   EQPGraphRow *pRow, *pNext;
11459:   for(pRow = p->sGraph.pRow; pRow; pRow = pNext){
11460:     pNext = pRow->pNext;
11461:     sqlite3_free(pRow);
11462:   }
11463:   memset(&p->sGraph, 0, sizeof(p->sGraph));
11464: }
11465: 
11466: /* Return the next EXPLAIN QUERY PLAN line with iEqpId that occurs after
11467: ** pOld, or return the first such line if pOld is NULL
11468: */
11469: static EQPGraphRow *eqp_next_row(ShellState *p, int iEqpId, EQPGraphRow *pOld){
11470:   EQPGraphRow *pRow = pOld ? pOld->pNext : p->sGraph.pRow;
11471:   while( pRow && pRow->iParentId!=iEqpId ) pRow = pRow->pNext;
11472:   return pRow;
11473: }
11474: 
11475: /* Render a single level of the graph that has iEqpId as its parent.  Called
11476: ** recursively to render sublevels.
11477: */
11478: static void eqp_render_level(ShellState *p, int iEqpId){
11479:   EQPGraphRow *pRow, *pNext;
11480:   int n = strlen30(p->sGraph.zPrefix);
11481:   char *z;
11482:   for(pRow = eqp_next_row(p, iEqpId, 0); pRow; pRow = pNext){
11483:     pNext = eqp_next_row(p, iEqpId, pRow);
11484:     z = pRow->zText;
11485:     utf8_printf(p->out, "%s%s%s\n", p->sGraph.zPrefix,
11486:                 pNext ? "|--" : "`--", z);
11487:     if( n<(int)sizeof(p->sGraph.zPrefix)-7 ){
11488:       memcpy(&p->sGraph.zPrefix[n], pNext ? "|  " : "   ", 4);
11489:       eqp_render_level(p, pRow->iEqpId);
11490:       p->sGraph.zPrefix[n] = 0;
11491:     }
11492:   }
11493: }
11494: 
11495: /*
11496: ** Display and reset the EXPLAIN QUERY PLAN data
11497: */
11498: static void eqp_render(ShellState *p){
11499:   EQPGraphRow *pRow = p->sGraph.pRow;
11500:   if( pRow ){
11501:     if( pRow->zText[0]=='-' ){
11502:       if( pRow->pNext==0 ){
11503:         eqp_reset(p);
11504:         return;
11505:       }
11506:       utf8_printf(p->out, "%s\n", pRow->zText+3);
11507:       p->sGraph.pRow = pRow->pNext;
11508:       sqlite3_free(pRow);
11509:     }else{
11510:       utf8_printf(p->out, "QUERY PLAN\n");
11511:     }
11512:     p->sGraph.zPrefix[0] = 0;
11513:     eqp_render_level(p, 0);
11514:     eqp_reset(p);
11515:   }
11516: }
11517: 
11518: #ifndef SQLITE_OMIT_PROGRESS_CALLBACK
11519: /*
11520: ** Progress handler callback.
11521: */
11522: static int progress_handler(void *pClientData) {
11523:   ShellState *p = (ShellState*)pClientData;
11524:   p->nProgress++;
11525:   if( p->nProgress>=p->mxProgress && p->mxProgress>0 ){
11526:     raw_printf(p->out, "Progress limit reached (%u)\n", p->nProgress);
11527:     if( p->flgProgress & SHELL_PROGRESS_RESET ) p->nProgress = 0;
11528:     if( p->flgProgress & SHELL_PROGRESS_ONCE ) p->mxProgress = 0;
11529:     return 1;
11530:   }
11531:   if( (p->flgProgress & SHELL_PROGRESS_QUIET)==0 ){
11532:     raw_printf(p->out, "Progress %u\n", p->nProgress);
11533:   }
11534:   return 0;
11535: }
11536: #endif /* SQLITE_OMIT_PROGRESS_CALLBACK */
11537: 
11538: /*
11539: ** Print N dashes
11540: */
11541: static void print_dashes(FILE *out, int N){
11542:   const char zDash[] = "--------------------------------------------------";
11543:   const int nDash = sizeof(zDash) - 1;
11544:   while( N>nDash ){
11545:     fputs(zDash, out);
11546:     N -= nDash;
11547:   }
11548:   raw_printf(out, "%.*s", N, zDash);
11549: }
11550: 
11551: /*
11552: ** Print a markdown or table-style row separator using ascii-art
11553: */
11554: static void print_row_separator(
11555:   ShellState *p,
11556:   int nArg,
11557:   const char *zSep
11558: ){
11559:   int i;
11560:   if( nArg>0 ){
11561:     fputs(zSep, p->out);
11562:     print_dashes(p->out, p->actualWidth[0]+2);
11563:     for(i=1; i<nArg; i++){
11564:       fputs(zSep, p->out);
11565:       print_dashes(p->out, p->actualWidth[i]+2);
11566:     }
11567:     fputs(zSep, p->out);
11568:   }
11569:   fputs("\n", p->out);
11570: }
11571: 
11572: /*
11573: ** This is the callback routine that the shell
11574: ** invokes for each row of a query result.
11575: */
11576: static int shell_callback(
11577:   void *pArg,
11578:   int nArg,        /* Number of result columns */
11579:   char **azArg,    /* Text of each result column */
11580:   char **azCol,    /* Column names */
11581:   int *aiType      /* Column types.  Might be NULL */
11582: ){
11583:   int i;
11584:   ShellState *p = (ShellState*)pArg;
11585: 
11586:   if( azArg==0 ) return 0;
11587:   switch( p->cMode ){
11588:     case MODE_Line: {
11589:       int w = 5;
11590:       if( azArg==0 ) break;
11591:       for(i=0; i<nArg; i++){
11592:         int len = strlen30(azCol[i] ? azCol[i] : "");
11593:         if( len>w ) w = len;
11594:       }
11595:       if( p->cnt++>0 ) utf8_printf(p->out, "%s", p->rowSeparator);
11596:       for(i=0; i<nArg; i++){
11597:         utf8_printf(p->out,"%*s = %s%s", w, azCol[i],
11598:                 azArg[i] ? azArg[i] : p->nullValue, p->rowSeparator);
11599:       }
11600:       break;
11601:     }
11602:     case MODE_Explain: {
11603:       if (nArg != 2) {
11604:         break;
11605:       }
11606:       fputs("\n┌─────────────────────────────┐\n", p->out);
11607:       fputs("│┌───────────────────────────┐│\n", p->out);
11608:       if (strcmp(azArg[0], "logical_plan") == 0) {
11609:       fputs("││ Unoptimized Logical Plan  ││\n", p->out);
11610:       } else if (strcmp(azArg[0], "logical_opt") == 0) {
11611:       fputs("││  Optimized Logical Plan   ││\n", p->out);
11612:       } else if (strcmp(azArg[0], "physical_plan") == 0) {
11613:       fputs("││       Physical Plan       ││\n", p->out);
11614: 
11615:       }
11616:       fputs("│└───────────────────────────┘│\n", p->out);
11617:       fputs("└─────────────────────────────┘\n", p->out);
11618:       fputs(azArg[1], p->out);
11619:       break;
11620:     }
11621:     case MODE_Semi: {   /* .schema and .fullschema output */
11622:       printSchemaLine(p->out, azArg[0], ";\n");
11623:       break;
11624:     }
11625:     case MODE_Pretty: {  /* .schema and .fullschema with --indent */
11626:       char *z;
11627:       int j;
11628:       int nParen = 0;
11629:       char cEnd = 0;
11630:       char c;
11631:       int nLine = 0;
11632:       assert( nArg==1 );
11633:       if( azArg[0]==0 ) break;
11634:       if( sqlite3_strlike("CREATE VIEW%", azArg[0], 0)==0
11635:        || sqlite3_strlike("CREATE TRIG%", azArg[0], 0)==0
11636:       ){
11637:         utf8_printf(p->out, "%s;\n", azArg[0]);
11638:         break;
11639:       }
11640:       z = sqlite3_mprintf("%s", azArg[0]);
11641:       j = 0;
11642:       for(i=0; IsSpace(z[i]); i++){}
11643:       for(; (c = z[i])!=0; i++){
11644:         if( IsSpace(c) ){
11645:           if( z[j-1]=='\r' ) z[j-1] = '\n';
11646:           if( IsSpace(z[j-1]) || z[j-1]=='(' ) continue;
11647:         }else if( (c=='(' || c==')') && j>0 && IsSpace(z[j-1]) ){
11648:           j--;
11649:         }
11650:         z[j++] = c;
11651:       }
11652:       while( j>0 && IsSpace(z[j-1]) ){ j--; }
11653:       z[j] = 0;
11654:       if( strlen30(z)>=79 ){
11655:         for(i=j=0; (c = z[i])!=0; i++){ /* Copy from z[i] back to z[j] */
11656:           if( c==cEnd ){
11657:             cEnd = 0;
11658:           }else if( c=='"' || c=='\'' || c=='`' ){
11659:             cEnd = c;
11660:           }else if( c=='[' ){
11661:             cEnd = ']';
11662:           }else if( c=='-' && z[i+1]=='-' ){
11663:             cEnd = '\n';
11664:           }else if( c=='(' ){
11665:             nParen++;
11666:           }else if( c==')' ){
11667:             nParen--;
11668:             if( nLine>0 && nParen==0 && j>0 ){
11669:               printSchemaLineN(p->out, z, j, "\n");
11670:               j = 0;
11671:             }
11672:           }
11673:           z[j++] = c;
11674:           if( nParen==1 && cEnd==0
11675:            && (c=='(' || c=='\n' || (c==',' && !wsToEol(z+i+1)))
11676:           ){
11677:             if( c=='\n' ) j--;
11678:             printSchemaLineN(p->out, z, j, "\n  ");
11679:             j = 0;
11680:             nLine++;
11681:             while( IsSpace(z[i+1]) ){ i++; }
11682:           }
11683:         }
11684:         z[j] = 0;
11685:       }
11686:       printSchemaLine(p->out, z, ";\n");
11687:       sqlite3_free(z);
11688:       break;
11689:     }
11690:     case MODE_List: {
11691:       if( p->cnt++==0 && p->showHeader ){
11692:         for(i=0; i<nArg; i++){
11693:           utf8_printf(p->out,"%s%s",azCol[i],
11694:                   i==nArg-1 ? p->rowSeparator : p->colSeparator);
11695:         }
11696:       }
11697:       if( azArg==0 ) break;
11698:       for(i=0; i<nArg; i++){
11699:         char *z = azArg[i];
11700:         if( z==0 ) z = p->nullValue;
11701:         utf8_printf(p->out, "%s", z);
11702:         if( i<nArg-1 ){
11703:           utf8_printf(p->out, "%s", p->colSeparator);
11704:         }else{
11705:           utf8_printf(p->out, "%s", p->rowSeparator);
11706:         }
11707:       }
11708:       break;
11709:     }
11710:     case MODE_Html: {
11711:       if( p->cnt++==0 && p->showHeader ){
11712:         raw_printf(p->out,"<TR>");
11713:         for(i=0; i<nArg; i++){
11714:           raw_printf(p->out,"<TH>");
11715:           output_html_string(p->out, azCol[i]);
11716:           raw_printf(p->out,"</TH>\n");
11717:         }
11718:         raw_printf(p->out,"</TR>\n");
11719:       }
11720:       if( azArg==0 ) break;
11721:       raw_printf(p->out,"<TR>");
11722:       for(i=0; i<nArg; i++){
11723:         raw_printf(p->out,"<TD>");
11724:         output_html_string(p->out, azArg[i] ? azArg[i] : p->nullValue);
11725:         raw_printf(p->out,"</TD>\n");
11726:       }
11727:       raw_printf(p->out,"</TR>\n");
11728:       break;
11729:     }
11730:     case MODE_Tcl: {
11731:       if( p->cnt++==0 && p->showHeader ){
11732:         for(i=0; i<nArg; i++){
11733:           output_c_string(p->out,azCol[i] ? azCol[i] : "");
11734:           if(i<nArg-1) utf8_printf(p->out, "%s", p->colSeparator);
11735:         }
11736:         utf8_printf(p->out, "%s", p->rowSeparator);
11737:       }
11738:       if( azArg==0 ) break;
11739:       for(i=0; i<nArg; i++){
11740:         output_c_string(p->out, azArg[i] ? azArg[i] : p->nullValue);
11741:         if(i<nArg-1) utf8_printf(p->out, "%s", p->colSeparator);
11742:       }
11743:       utf8_printf(p->out, "%s", p->rowSeparator);
11744:       break;
11745:     }
11746:     case MODE_Csv: {
11747:       setBinaryMode(p->out, 1);
11748:       if( p->cnt++==0 && p->showHeader ){
11749:         for(i=0; i<nArg; i++){
11750:           output_csv(p, azCol[i] ? azCol[i] : "", i<nArg-1);
11751:         }
11752:         utf8_printf(p->out, "%s", p->rowSeparator);
11753:       }
11754:       if( nArg>0 ){
11755:         for(i=0; i<nArg; i++){
11756:           output_csv(p, azArg[i], i<nArg-1);
11757:         }
11758:         utf8_printf(p->out, "%s", p->rowSeparator);
11759:       }
11760:       setTextMode(p->out, 1);
11761:       break;
11762:     }
11763:     case MODE_Insert: {
11764:       if( azArg==0 ) break;
11765:       utf8_printf(p->out,"INSERT INTO %s",p->zDestTable);
11766:       if( p->showHeader ){
11767:         raw_printf(p->out,"(");
11768:         for(i=0; i<nArg; i++){
11769:           if( i>0 ) raw_printf(p->out, ",");
11770:           if( quoteChar(azCol[i]) ){
11771:             char *z = sqlite3_mprintf("\"%w\"", azCol[i]);
11772:             utf8_printf(p->out, "%s", z);
11773:             sqlite3_free(z);
11774:           }else{
11775:             raw_printf(p->out, "%s", azCol[i]);
11776:           }
11777:         }
11778:         raw_printf(p->out,")");
11779:       }
11780:       p->cnt++;
11781:       for(i=0; i<nArg; i++){
11782:         raw_printf(p->out, i>0 ? "," : " VALUES(");
11783:         if( (azArg[i]==0) || (aiType && aiType[i]==SQLITE_NULL) ){
11784:           utf8_printf(p->out,"NULL");
11785:         }else if( aiType && aiType[i]==SQLITE_TEXT ){
11786:           if( ShellHasFlag(p, SHFLG_Newlines) ){
11787:             output_quoted_string(p->out, azArg[i]);
11788:           }else{
11789:             output_quoted_escaped_string(p->out, azArg[i]);
11790:           }
11791:         }else if( aiType && aiType[i]==SQLITE_INTEGER ){
11792:           utf8_printf(p->out,"%s", azArg[i]);
11793:         }else if( aiType && aiType[i]==SQLITE_FLOAT ){
11794:           char z[50];
11795:           double r = sqlite3_column_double(p->pStmt, i);
11796:           sqlite3_uint64 ur;
11797:           memcpy(&ur,&r,sizeof(r));
11798:           if( ur==0x7ff0000000000000LL ){
11799:             raw_printf(p->out, "1e999");
11800:           }else if( ur==0xfff0000000000000LL ){
11801:             raw_printf(p->out, "-1e999");
11802:           }else{
11803:             sqlite3_snprintf(50,z,"%!.20g", r);
11804:             raw_printf(p->out, "%s", z);
11805:           }
11806:         }else if( aiType && aiType[i]==SQLITE_BLOB && p->pStmt ){
11807:           const void *pBlob = sqlite3_column_blob(p->pStmt, i);
11808:           int nBlob = sqlite3_column_bytes(p->pStmt, i);
11809:           output_hex_blob(p->out, pBlob, nBlob);
11810:         }else if( isNumber(azArg[i], 0) ){
11811:           utf8_printf(p->out,"%s", azArg[i]);
11812:         }else if( ShellHasFlag(p, SHFLG_Newlines) ){
11813:           output_quoted_string(p->out, azArg[i]);
11814:         }else{
11815:           output_quoted_escaped_string(p->out, azArg[i]);
11816:         }
11817:       }
11818:       raw_printf(p->out,");\n");
11819:       break;
11820:     }
11821:     case MODE_Json: {
11822:       if( azArg==0 ) break;
11823:       if( p->cnt==0 ){
11824:         fputs("[{", p->out);
11825:       }else{
11826:         fputs(",\n{", p->out);
11827:       }
11828:       p->cnt++;
11829:       for(i=0; i<nArg; i++){
11830:         output_json_string(p->out, azCol[i], -1);
11831:         putc(':', p->out);
11832:         if( (azArg[i]==0) || (aiType && aiType[i]==SQLITE_NULL) ){
11833:           fputs("null",p->out);
11834:         }else if( aiType && aiType[i]==SQLITE_FLOAT ){
11835:           char z[50];
11836:           double r = sqlite3_column_double(p->pStmt, i);
11837:           sqlite3_uint64 ur;
11838:           memcpy(&ur,&r,sizeof(r));
11839:           if( ur==0x7ff0000000000000LL ){
11840:             raw_printf(p->out, "1e999");
11841:           }else if( ur==0xfff0000000000000LL ){
11842:             raw_printf(p->out, "-1e999");
11843:           }else{
11844:             sqlite3_snprintf(50,z,"%!.20g", r);
11845:             raw_printf(p->out, "%s", z);
11846:           }
11847:         }else if( aiType && aiType[i]==SQLITE_BLOB && p->pStmt ){
11848:           const void *pBlob = sqlite3_column_blob(p->pStmt, i);
11849:           int nBlob = sqlite3_column_bytes(p->pStmt, i);
11850:           output_json_string(p->out, pBlob, nBlob);
11851:         }else if( aiType && aiType[i]==SQLITE_TEXT ){
11852:           output_json_string(p->out, azArg[i], -1);
11853:         }else{
11854:           utf8_printf(p->out,"%s", azArg[i]);
11855:         }
11856:         if( i<nArg-1 ){
11857:           putc(',', p->out);
11858:         }
11859:       }
11860:       putc('}', p->out);
11861:       break;
11862:     }
11863:     case MODE_Quote: {
11864:       if( azArg==0 ) break;
11865:       if( p->cnt==0 && p->showHeader ){
11866:         for(i=0; i<nArg; i++){
11867:           if( i>0 ) fputs(p->colSeparator, p->out);
11868:           output_quoted_string(p->out, azCol[i]);
11869:         }
11870:         fputs(p->rowSeparator, p->out);
11871:       }
11872:       p->cnt++;
11873:       for(i=0; i<nArg; i++){
11874:         if( i>0 ) fputs(p->colSeparator, p->out);
11875:         if( (azArg[i]==0) || (aiType && aiType[i]==SQLITE_NULL) ){
11876:           utf8_printf(p->out,"NULL");
11877:         }else if( aiType && aiType[i]==SQLITE_TEXT ){
11878:           output_quoted_string(p->out, azArg[i]);
11879:         }else if( aiType && aiType[i]==SQLITE_INTEGER ){
11880:           utf8_printf(p->out,"%s", azArg[i]);
11881:         }else if( aiType && aiType[i]==SQLITE_FLOAT ){
11882:           char z[50];
11883:           double r = sqlite3_column_double(p->pStmt, i);
11884:           sqlite3_snprintf(50,z,"%!.20g", r);
11885:           raw_printf(p->out, "%s", z);
11886:         }else if( aiType && aiType[i]==SQLITE_BLOB && p->pStmt ){
11887:           const void *pBlob = sqlite3_column_blob(p->pStmt, i);
11888:           int nBlob = sqlite3_column_bytes(p->pStmt, i);
11889:           output_hex_blob(p->out, pBlob, nBlob);
11890:         }else if( isNumber(azArg[i], 0) ){
11891:           utf8_printf(p->out,"%s", azArg[i]);
11892:         }else{
11893:           output_quoted_string(p->out, azArg[i]);
11894:         }
11895:       }
11896:       fputs(p->rowSeparator, p->out);
11897:       break;
11898:     }
11899:     case MODE_Ascii: {
11900:       if( p->cnt++==0 && p->showHeader ){
11901:         for(i=0; i<nArg; i++){
11902:           if( i>0 ) utf8_printf(p->out, "%s", p->colSeparator);
11903:           utf8_printf(p->out,"%s",azCol[i] ? azCol[i] : "");
11904:         }
11905:         utf8_printf(p->out, "%s", p->rowSeparator);
11906:       }
11907:       if( azArg==0 ) break;
11908:       for(i=0; i<nArg; i++){
11909:         if( i>0 ) utf8_printf(p->out, "%s", p->colSeparator);
11910:         utf8_printf(p->out,"%s",azArg[i] ? azArg[i] : p->nullValue);
11911:       }
11912:       utf8_printf(p->out, "%s", p->rowSeparator);
11913:       break;
11914:     }
11915:     case MODE_EQP: {
11916:       eqp_append(p, atoi(azArg[0]), atoi(azArg[1]), azArg[3]);
11917:       break;
11918:     }
11919:   }
11920:   return 0;
11921: }
11922: 
11923: /*
11924: ** This is the callback routine that the SQLite library
11925: ** invokes for each row of a query result.
11926: */
11927: static int callback(void *pArg, int nArg, char **azArg, char **azCol){
11928:   /* since we don't have type info, call the shell_callback with a NULL value */
11929:   return shell_callback(pArg, nArg, azArg, azCol, NULL);
11930: }
11931: 
11932: /*
11933: ** This is the callback routine from sqlite3_exec() that appends all
11934: ** output onto the end of a ShellText object.
11935: */
11936: static int captureOutputCallback(void *pArg, int nArg, char **azArg, char **az){
11937:   ShellText *p = (ShellText*)pArg;
11938:   int i;
11939:   UNUSED_PARAMETER(az);
11940:   if( azArg==0 ) return 0;
11941:   if( p->n ) appendText(p, "|", 0);
11942:   for(i=0; i<nArg; i++){
11943:     if( i ) appendText(p, ",", 0);
11944:     if( azArg[i] ) appendText(p, azArg[i], 0);
11945:   }
11946:   return 0;
11947: }
11948: 
11949: /*
11950: ** Generate an appropriate SELFTEST table in the main database.
11951: */
11952: static void createSelftestTable(ShellState *p){
11953:   char *zErrMsg = 0;
11954:   sqlite3_exec(p->db,
11955:     "SAVEPOINT selftest_init;\n"
11956:     "CREATE TABLE IF NOT EXISTS selftest(\n"
11957:     "  tno INTEGER PRIMARY KEY,\n"   /* Test number */
11958:     "  op TEXT,\n"                   /* Operator:  memo run */
11959:     "  cmd TEXT,\n"                  /* Command text */
11960:     "  ans TEXT\n"                   /* Desired answer */
11961:     ");"
11962:     "CREATE TEMP TABLE [_shell$self](op,cmd,ans);\n"
11963:     "INSERT INTO [_shell$self](rowid,op,cmd)\n"
11964:     "  VALUES(coalesce((SELECT (max(tno)+100)/10 FROM selftest),10),\n"
11965:     "         'memo','Tests generated by --init');\n"
11966:     "INSERT INTO [_shell$self]\n"
11967:     "  SELECT 'run',\n"
11968:     "    'SELECT hex(sha3_query(''SELECT type,name,tbl_name,sql "
11969:                                  "FROM sqlite_schema ORDER BY 2'',224))',\n"
11970:     "    hex(sha3_query('SELECT type,name,tbl_name,sql "
11971:                           "FROM sqlite_schema ORDER BY 2',224));\n"
11972:     "INSERT INTO [_shell$self]\n"
11973:     "  SELECT 'run',"
11974:     "    'SELECT hex(sha3_query(''SELECT * FROM \"' ||"
11975:     "        printf('%w',name) || '\" NOT INDEXED'',224))',\n"
11976:     "    hex(sha3_query(printf('SELECT * FROM \"%w\" NOT INDEXED',name),224))\n"
11977:     "  FROM (\n"
11978:     "    SELECT name FROM sqlite_schema\n"
11979:     "     WHERE type='table'\n"
11980:     "       AND name<>'selftest'\n"
11981:     "       AND coalesce(rootpage,0)>0\n"
11982:     "  )\n"
11983:     " ORDER BY name;\n"
11984:     "INSERT INTO [_shell$self]\n"
11985:     "  VALUES('run','PRAGMA integrity_check','ok');\n"
11986:     "INSERT INTO selftest(tno,op,cmd,ans)"
11987:     "  SELECT rowid*10,op,cmd,ans FROM [_shell$self];\n"
11988:     "DROP TABLE [_shell$self];"
11989:     ,0,0,&zErrMsg);
11990:   if( zErrMsg ){
11991:     utf8_printf(stderr, "SELFTEST initialization failure: %s\n", zErrMsg);
11992:     sqlite3_free(zErrMsg);
11993:   }
11994:   sqlite3_exec(p->db, "RELEASE selftest_init",0,0,0);
11995: }
11996: 
11997: 
11998: /*
11999: ** Set the destination table field of the ShellState structure to
12000: ** the name of the table given.  Escape any quote characters in the
12001: ** table name.
12002: */
12003: static void set_table_name(ShellState *p, const char *zName){
12004:   int i, n;
12005:   char cQuote;
12006:   char *z;
12007: 
12008:   if( p->zDestTable ){
12009:     free(p->zDestTable);
12010:     p->zDestTable = 0;
12011:   }
12012:   if( zName==0 ) return;
12013:   cQuote = quoteChar(zName);
12014:   n = strlen30(zName);
12015:   if( cQuote ) n += n+2;
12016:   z = p->zDestTable = malloc( n+1 );
12017:   if( z==0 ) shell_out_of_memory();
12018:   n = 0;
12019:   if( cQuote ) z[n++] = cQuote;
12020:   for(i=0; zName[i]; i++){
12021:     z[n++] = zName[i];
12022:     if( zName[i]==cQuote ) z[n++] = cQuote;
12023:   }
12024:   if( cQuote ) z[n++] = cQuote;
12025:   z[n] = 0;
12026: }
12027: 
12028: 
12029: /*
12030: ** Execute a query statement that will generate SQL output.  Print
12031: ** the result columns, comma-separated, on a line and then add a
12032: ** semicolon terminator to the end of that line.
12033: **
12034: ** If the number of columns is 1 and that column contains text "--"
12035: ** then write the semicolon on a separate line.  That way, if a
12036: ** "--" comment occurs at the end of the statement, the comment
12037: ** won't consume the semicolon terminator.
12038: */
12039: static int run_table_dump_query(
12040:   ShellState *p,           /* Query context */
12041:   const char *zSelect      /* SELECT statement to extract content */
12042: ){
12043:   sqlite3_stmt *pSelect;
12044:   int rc;
12045:   int nResult;
12046:   int i;
12047:   const char *z;
12048:   rc = sqlite3_prepare_v2(p->db, zSelect, -1, &pSelect, 0);
12049:   if( rc!=SQLITE_OK || !pSelect ){
12050:     utf8_printf(p->out, "/**** ERROR: (%d) %s *****/\n", rc,
12051:                 sqlite3_errmsg(p->db));
12052:     if( (rc&0xff)!=SQLITE_CORRUPT ) p->nErr++;
12053:     return rc;
12054:   }
12055:   rc = sqlite3_step(pSelect);
12056:   nResult = sqlite3_column_count(pSelect);
12057:   while( rc==SQLITE_ROW ){
12058:     z = (const char*)sqlite3_column_text(pSelect, 0);
12059:     utf8_printf(p->out, "%s", z);
12060:     for(i=1; i<nResult; i++){
12061:       utf8_printf(p->out, ",%s", sqlite3_column_text(pSelect, i));
12062:     }
12063:     if( z==0 ) z = "";
12064:     while( z[0] && (z[0]!='-' || z[1]!='-') ) z++;
12065:     if( z[0] ){
12066:       raw_printf(p->out, "\n;\n");
12067:     }else{
12068:       raw_printf(p->out, ";\n");
12069:     }
12070:     rc = sqlite3_step(pSelect);
12071:   }
12072:   rc = sqlite3_finalize(pSelect);
12073:   if( rc!=SQLITE_OK ){
12074:     utf8_printf(p->out, "/**** ERROR: (%d) %s *****/\n", rc,
12075:                 sqlite3_errmsg(p->db));
12076:     if( (rc&0xff)!=SQLITE_CORRUPT ) p->nErr++;
12077:   }
12078:   return rc;
12079: }
12080: 
12081: /*
12082: ** Allocate space and save off current error string.
12083: */
12084: static char *save_err_msg(
12085:   sqlite3 *db            /* Database to query */
12086: ){
12087:   int nErrMsg = 1+strlen30(sqlite3_errmsg(db));
12088:   char *zErrMsg = sqlite3_malloc64(nErrMsg);
12089:   if( zErrMsg ){
12090:     memcpy(zErrMsg, sqlite3_errmsg(db), nErrMsg);
12091:   }
12092:   return zErrMsg;
12093: }
12094: 
12095: #ifdef __linux__
12096: /*
12097: ** Attempt to display I/O stats on Linux using /proc/PID/io
12098: */
12099: static void displayLinuxIoStats(FILE *out){
12100:   FILE *in;
12101:   char z[200];
12102:   sqlite3_snprintf(sizeof(z), z, "/proc/%d/io", getpid());
12103:   in = fopen(z, "rb");
12104:   if( in==0 ) return;
12105:   while( fgets(z, sizeof(z), in)!=0 ){
12106:     static const struct {
12107:       const char *zPattern;
12108:       const char *zDesc;
12109:     } aTrans[] = {
12110:       { "rchar: ",                  "Bytes received by read():" },
12111:       { "wchar: ",                  "Bytes sent to write():"    },
12112:       { "syscr: ",                  "Read() system calls:"      },
12113:       { "syscw: ",                  "Write() system calls:"     },
12114:       { "read_bytes: ",             "Bytes read from storage:"  },
12115:       { "write_bytes: ",            "Bytes written to storage:" },
12116:       { "cancelled_write_bytes: ",  "Cancelled write bytes:"    },
12117:     };
12118:     int i;
12119:     for(i=0; i<ArraySize(aTrans); i++){
12120:       int n = strlen30(aTrans[i].zPattern);
12121:       if( strncmp(aTrans[i].zPattern, z, n)==0 ){
12122:         utf8_printf(out, "%-36s %s", aTrans[i].zDesc, &z[n]);
12123:         break;
12124:       }
12125:     }
12126:   }
12127:   fclose(in);
12128: }
12129: #endif
12130: 
12131: /*
12132: ** Display a single line of status using 64-bit values.
12133: */
12134: static void displayStatLine(
12135:   ShellState *p,            /* The shell context */
12136:   char *zLabel,             /* Label for this one line */
12137:   char *zFormat,            /* Format for the result */
12138:   int iStatusCtrl,          /* Which status to display */
12139:   int bReset                /* True to reset the stats */
12140: ){
12141:   sqlite3_int64 iCur = -1;
12142:   sqlite3_int64 iHiwtr = -1;
12143:   int i, nPercent;
12144:   char zLine[200];
12145:   sqlite3_status64(iStatusCtrl, &iCur, &iHiwtr, bReset);
12146:   for(i=0, nPercent=0; zFormat[i]; i++){
12147:     if( zFormat[i]=='%' ) nPercent++;
12148:   }
12149:   if( nPercent>1 ){
12150:     sqlite3_snprintf(sizeof(zLine), zLine, zFormat, iCur, iHiwtr);
12151:   }else{
12152:     sqlite3_snprintf(sizeof(zLine), zLine, zFormat, iHiwtr);
12153:   }
12154:   raw_printf(p->out, "%-36s %s\n", zLabel, zLine);
12155: }
12156: 
12157: /*
12158: ** Display memory stats.
12159: */
12160: static int display_stats(
12161:   sqlite3 *db,                /* Database to query */
12162:   ShellState *pArg,           /* Pointer to ShellState */
12163:   int bReset                  /* True to reset the stats */
12164: ){
12165:   int iCur;
12166:   int iHiwtr;
12167:   FILE *out;
12168:   if( pArg==0 || pArg->out==0 ) return 0;
12169:   out = pArg->out;
12170: 
12171:   if( pArg->pStmt && (pArg->statsOn & 2) ){
12172:     int nCol, i, x;
12173:     sqlite3_stmt *pStmt = pArg->pStmt;
12174:     char z[100];
12175:     nCol = sqlite3_column_count(pStmt);
12176:     raw_printf(out, "%-36s %d\n", "Number of output columns:", nCol);
12177:     for(i=0; i<nCol; i++){
12178:       sqlite3_snprintf(sizeof(z),z,"Column %d %nname:", i, &x);
12179:       utf8_printf(out, "%-36s %s\n", z, sqlite3_column_name(pStmt,i));
12180: #ifndef SQLITE_OMIT_DECLTYPE
12181:       sqlite3_snprintf(30, z+x, "declared type:");
12182:       utf8_printf(out, "%-36s %s\n", z, sqlite3_column_decltype(pStmt, i));
12183: #endif
12184: #ifdef SQLITE_ENABLE_COLUMN_METADATA
12185:       sqlite3_snprintf(30, z+x, "database name:");
12186:       utf8_printf(out, "%-36s %s\n", z, sqlite3_column_database_name(pStmt,i));
12187:       sqlite3_snprintf(30, z+x, "table name:");
12188:       utf8_printf(out, "%-36s %s\n", z, sqlite3_column_table_name(pStmt,i));
12189:       sqlite3_snprintf(30, z+x, "origin name:");
12190:       utf8_printf(out, "%-36s %s\n", z, sqlite3_column_origin_name(pStmt,i));
12191: #endif
12192:     }
12193:   }
12194: 
12195:   displayStatLine(pArg, "Memory Used:",
12196:      "%lld (max %lld) bytes", SQLITE_STATUS_MEMORY_USED, bReset);
12197:   displayStatLine(pArg, "Number of Outstanding Allocations:",
12198:      "%lld (max %lld)", SQLITE_STATUS_MALLOC_COUNT, bReset);
12199:   if( pArg->shellFlgs & SHFLG_Pagecache ){
12200:     displayStatLine(pArg, "Number of Pcache Pages Used:",
12201:        "%lld (max %lld) pages", SQLITE_STATUS_PAGECACHE_USED, bReset);
12202:   }
12203:   displayStatLine(pArg, "Number of Pcache Overflow Bytes:",
12204:      "%lld (max %lld) bytes", SQLITE_STATUS_PAGECACHE_OVERFLOW, bReset);
12205:   displayStatLine(pArg, "Largest Allocation:",
12206:      "%lld bytes", SQLITE_STATUS_MALLOC_SIZE, bReset);
12207:   displayStatLine(pArg, "Largest Pcache Allocation:",
12208:      "%lld bytes", SQLITE_STATUS_PAGECACHE_SIZE, bReset);
12209: #ifdef YYTRACKMAXSTACKDEPTH
12210:   displayStatLine(pArg, "Deepest Parser Stack:",
12211:      "%lld (max %lld)", SQLITE_STATUS_PARSER_STACK, bReset);
12212: #endif
12213: 
12214:   if( db ){
12215:     if( pArg->shellFlgs & SHFLG_Lookaside ){
12216:       iHiwtr = iCur = -1;
12217:       sqlite3_db_status(db, SQLITE_DBSTATUS_LOOKASIDE_USED,
12218:                         &iCur, &iHiwtr, bReset);
12219:       raw_printf(pArg->out,
12220:               "Lookaside Slots Used:                %d (max %d)\n",
12221:               iCur, iHiwtr);
12222:       sqlite3_db_status(db, SQLITE_DBSTATUS_LOOKASIDE_HIT,
12223:                         &iCur, &iHiwtr, bReset);
12224:       raw_printf(pArg->out, "Successful lookaside attempts:       %d\n",
12225:               iHiwtr);
12226:       sqlite3_db_status(db, SQLITE_DBSTATUS_LOOKASIDE_MISS_SIZE,
12227:                         &iCur, &iHiwtr, bReset);
12228:       raw_printf(pArg->out, "Lookaside failures due to size:      %d\n",
12229:               iHiwtr);
12230:       sqlite3_db_status(db, SQLITE_DBSTATUS_LOOKASIDE_MISS_FULL,
12231:                         &iCur, &iHiwtr, bReset);
12232:       raw_printf(pArg->out, "Lookaside failures due to OOM:       %d\n",
12233:               iHiwtr);
12234:     }
12235:     iHiwtr = iCur = -1;
12236:     sqlite3_db_status(db, SQLITE_DBSTATUS_CACHE_USED, &iCur, &iHiwtr, bReset);
12237:     raw_printf(pArg->out, "Pager Heap Usage:                    %d bytes\n",
12238:             iCur);
12239:     iHiwtr = iCur = -1;
12240:     sqlite3_db_status(db, SQLITE_DBSTATUS_CACHE_HIT, &iCur, &iHiwtr, 1);
12241:     raw_printf(pArg->out, "Page cache hits:                     %d\n", iCur);
12242:     iHiwtr = iCur = -1;
12243:     sqlite3_db_status(db, SQLITE_DBSTATUS_CACHE_MISS, &iCur, &iHiwtr, 1);
12244:     raw_printf(pArg->out, "Page cache misses:                   %d\n", iCur);
12245:     iHiwtr = iCur = -1;
12246:     sqlite3_db_status(db, SQLITE_DBSTATUS_CACHE_WRITE, &iCur, &iHiwtr, 1);
12247:     raw_printf(pArg->out, "Page cache writes:                   %d\n", iCur);
12248:     iHiwtr = iCur = -1;
12249:     sqlite3_db_status(db, SQLITE_DBSTATUS_CACHE_SPILL, &iCur, &iHiwtr, 1);
12250:     raw_printf(pArg->out, "Page cache spills:                   %d\n", iCur);
12251:     iHiwtr = iCur = -1;
12252:     sqlite3_db_status(db, SQLITE_DBSTATUS_SCHEMA_USED, &iCur, &iHiwtr, bReset);
12253:     raw_printf(pArg->out, "Schema Heap Usage:                   %d bytes\n",
12254:             iCur);
12255:     iHiwtr = iCur = -1;
12256:     sqlite3_db_status(db, SQLITE_DBSTATUS_STMT_USED, &iCur, &iHiwtr, bReset);
12257:     raw_printf(pArg->out, "Statement Heap/Lookaside Usage:      %d bytes\n",
12258:             iCur);
12259:   }
12260: 
12261:   if( pArg->pStmt ){
12262:     iCur = sqlite3_stmt_status(pArg->pStmt, SQLITE_STMTSTATUS_FULLSCAN_STEP,
12263:                                bReset);
12264:     raw_printf(pArg->out, "Fullscan Steps:                      %d\n", iCur);
12265:     iCur = sqlite3_stmt_status(pArg->pStmt, SQLITE_STMTSTATUS_SORT, bReset);
12266:     raw_printf(pArg->out, "Sort Operations:                     %d\n", iCur);
12267:     iCur = sqlite3_stmt_status(pArg->pStmt, SQLITE_STMTSTATUS_AUTOINDEX,bReset);
12268:     raw_printf(pArg->out, "Autoindex Inserts:                   %d\n", iCur);
12269:     iCur = sqlite3_stmt_status(pArg->pStmt, SQLITE_STMTSTATUS_VM_STEP, bReset);
12270:     raw_printf(pArg->out, "Virtual Machine Steps:               %d\n", iCur);
12271:     iCur = sqlite3_stmt_status(pArg->pStmt, SQLITE_STMTSTATUS_REPREPARE,bReset);
12272:     raw_printf(pArg->out, "Reprepare operations:                %d\n", iCur);
12273:     iCur = sqlite3_stmt_status(pArg->pStmt, SQLITE_STMTSTATUS_RUN, bReset);
12274:     raw_printf(pArg->out, "Number of times run:                 %d\n", iCur);
12275:     iCur = sqlite3_stmt_status(pArg->pStmt, SQLITE_STMTSTATUS_MEMUSED, bReset);
12276:     raw_printf(pArg->out, "Memory used by prepared stmt:        %d\n", iCur);
12277:   }
12278: 
12279: #ifdef __linux__
12280:   displayLinuxIoStats(pArg->out);
12281: #endif
12282: 
12283:   /* Do not remove this machine readable comment: extra-stats-output-here */
12284: 
12285:   return 0;
12286: }
12287: 
12288: /*
12289: ** Display scan stats.
12290: */
12291: static void display_scanstats(
12292:   sqlite3 *db,                    /* Database to query */
12293:   ShellState *pArg                /* Pointer to ShellState */
12294: ){
12295: #ifndef SQLITE_ENABLE_STMT_SCANSTATUS
12296:   UNUSED_PARAMETER(db);
12297:   UNUSED_PARAMETER(pArg);
12298: #else
12299:   int i, k, n, mx;
12300:   raw_printf(pArg->out, "-------- scanstats --------\n");
12301:   mx = 0;
12302:   for(k=0; k<=mx; k++){
12303:     double rEstLoop = 1.0;
12304:     for(i=n=0; 1; i++){
12305:       sqlite3_stmt *p = pArg->pStmt;
12306:       sqlite3_int64 nLoop, nVisit;
12307:       double rEst;
12308:       int iSid;
12309:       const char *zExplain;
12310:       if( sqlite3_stmt_scanstatus(p, i, SQLITE_SCANSTAT_NLOOP, (void*)&nLoop) ){
12311:         break;
12312:       }
12313:       sqlite3_stmt_scanstatus(p, i, SQLITE_SCANSTAT_SELECTID, (void*)&iSid);
12314:       if( iSid>mx ) mx = iSid;
12315:       if( iSid!=k ) continue;
12316:       if( n==0 ){
12317:         rEstLoop = (double)nLoop;
12318:         if( k>0 ) raw_printf(pArg->out, "-------- subquery %d -------\n", k);
12319:       }
12320:       n++;
12321:       sqlite3_stmt_scanstatus(p, i, SQLITE_SCANSTAT_NVISIT, (void*)&nVisit);
12322:       sqlite3_stmt_scanstatus(p, i, SQLITE_SCANSTAT_EST, (void*)&rEst);
12323:       sqlite3_stmt_scanstatus(p, i, SQLITE_SCANSTAT_EXPLAIN, (void*)&zExplain);
12324:       utf8_printf(pArg->out, "Loop %2d: %s\n", n, zExplain);
12325:       rEstLoop *= rEst;
12326:       raw_printf(pArg->out,
12327:           "         nLoop=%-8lld nRow=%-8lld estRow=%-8lld estRow/Loop=%-8g\n",
12328:           nLoop, nVisit, (sqlite3_int64)(rEstLoop+0.5), rEst
12329:       );
12330:     }
12331:   }
12332:   raw_printf(pArg->out, "---------------------------\n");
12333: #endif
12334: }
12335: 
12336: /*
12337: ** Parameter azArray points to a zero-terminated array of strings. zStr
12338: ** points to a single nul-terminated string. Return non-zero if zStr
12339: ** is equal, according to strcmp(), to any of the strings in the array.
12340: ** Otherwise, return zero.
12341: */
12342: static int str_in_array(const char *zStr, const char **azArray){
12343:   int i;
12344:   for(i=0; azArray[i]; i++){
12345:     if( 0==strcmp(zStr, azArray[i]) ) return 1;
12346:   }
12347:   return 0;
12348: }
12349: 
12350: /*
12351: ** If compiled statement pSql appears to be an EXPLAIN statement, allocate
12352: ** and populate the ShellState.aiIndent[] array with the number of
12353: ** spaces each opcode should be indented before it is output.
12354: **
12355: ** The indenting rules are:
12356: **
12357: **     * For each "Next", "Prev", "VNext" or "VPrev" instruction, indent
12358: **       all opcodes that occur between the p2 jump destination and the opcode
12359: **       itself by 2 spaces.
12360: **
12361: **     * For each "Goto", if the jump destination is earlier in the program
12362: **       and ends on one of:
12363: **          Yield  SeekGt  SeekLt  RowSetRead  Rewind
12364: **       or if the P1 parameter is one instead of zero,
12365: **       then indent all opcodes between the earlier instruction
12366: **       and "Goto" by 2 spaces.
12367: */
12368: static void explain_data_prepare(ShellState *p, sqlite3_stmt *pSql){
12369:   const char *zSql;               /* The text of the SQL statement */
12370:   const char *z;                  /* Used to check if this is an EXPLAIN */
12371:   int *abYield = 0;               /* True if op is an OP_Yield */
12372:   int nAlloc = 0;                 /* Allocated size of p->aiIndent[], abYield */
12373:   int iOp;                        /* Index of operation in p->aiIndent[] */
12374: 
12375:   const char *azNext[] = { "Next", "Prev", "VPrev", "VNext", "SorterNext", 0 };
12376:   const char *azYield[] = { "Yield", "SeekLT", "SeekGT", "RowSetRead",
12377:                             "Rewind", 0 };
12378:   const char *azGoto[] = { "Goto", 0 };
12379: 
12380:   /* Try to figure out if this is really an EXPLAIN statement. If this
12381:   ** cannot be verified, return early.  */
12382:   if( sqlite3_column_count(pSql)!=8 ){
12383:     p->cMode = p->mode;
12384:     return;
12385:   }
12386:   zSql = sqlite3_sql(pSql);
12387:   if( zSql==0 ) return;
12388:   for(z=zSql; *z==' ' || *z=='\t' || *z=='\n' || *z=='\f' || *z=='\r'; z++);
12389:   if( sqlite3_strnicmp(z, "explain", 7) ){
12390:     p->cMode = p->mode;
12391:     return;
12392:   }
12393: 
12394:   for(iOp=0; SQLITE_ROW==sqlite3_step(pSql); iOp++){
12395:     int i;
12396:     int iAddr = sqlite3_column_int(pSql, 0);
12397:     const char *zOp = (const char*)sqlite3_column_text(pSql, 1);
12398: 
12399:     /* Set p2 to the P2 field of the current opcode. Then, assuming that
12400:     ** p2 is an instruction address, set variable p2op to the index of that
12401:     ** instruction in the aiIndent[] array. p2 and p2op may be different if
12402:     ** the current instruction is part of a sub-program generated by an
12403:     ** SQL trigger or foreign key.  */
12404:     int p2 = sqlite3_column_int(pSql, 3);
12405:     int p2op = (p2 + (iOp-iAddr));
12406: 
12407:     /* Grow the p->aiIndent array as required */
12408:     if( iOp>=nAlloc ){
12409:       if( iOp==0 ){
12410:         /* Do further verfication that this is explain output.  Abort if
12411:         ** it is not */
12412:         static const char *explainCols[] = {
12413:            "addr", "opcode", "p1", "p2", "p3", "p4", "p5", "comment" };
12414:         int jj;
12415:         for(jj=0; jj<ArraySize(explainCols); jj++){
12416:           if( strcmp(sqlite3_column_name(pSql,jj),explainCols[jj])!=0 ){
12417:             p->cMode = p->mode;
12418:             sqlite3_reset(pSql);
12419:             return;
12420:           }
12421:         }
12422:       }
12423:       nAlloc += 100;
12424:       p->aiIndent = (int*)sqlite3_realloc64(p->aiIndent, nAlloc*sizeof(int));
12425:       if( p->aiIndent==0 ) shell_out_of_memory();
12426:       abYield = (int*)sqlite3_realloc64(abYield, nAlloc*sizeof(int));
12427:       if( abYield==0 ) shell_out_of_memory();
12428:     }
12429:     abYield[iOp] = str_in_array(zOp, azYield);
12430:     p->aiIndent[iOp] = 0;
12431:     p->nIndent = iOp+1;
12432: 
12433:     if( str_in_array(zOp, azNext) ){
12434:       for(i=p2op; i<iOp; i++) p->aiIndent[i] += 2;
12435:     }
12436:     if( str_in_array(zOp, azGoto) && p2op<p->nIndent
12437:      && (abYield[p2op] || sqlite3_column_int(pSql, 2))
12438:     ){
12439:       for(i=p2op; i<iOp; i++) p->aiIndent[i] += 2;
12440:     }
12441:   }
12442: 
12443:   p->iIndent = 0;
12444:   sqlite3_free(abYield);
12445:   sqlite3_reset(pSql);
12446: }
12447: 
12448: /*
12449: ** Free the array allocated by explain_data_prepare().
12450: */
12451: static void explain_data_delete(ShellState *p){
12452:   sqlite3_free(p->aiIndent);
12453:   p->aiIndent = 0;
12454:   p->nIndent = 0;
12455:   p->iIndent = 0;
12456: }
12457: 
12458: /*
12459: ** Disable and restore .wheretrace and .selecttrace settings.
12460: */
12461: #if defined(SQLITE_DEBUG) && defined(SQLITE_ENABLE_SELECTTRACE)
12462: extern unsigned int sqlite3_unsupported_selecttrace;
12463: static int savedSelectTrace;
12464: #endif
12465: #if defined(SQLITE_DEBUG) && defined(SQLITE_ENABLE_WHERETRACE)
12466: extern int sqlite3WhereTrace;
12467: static int savedWhereTrace;
12468: #endif
12469: static void disable_debug_trace_modes(void){
12470: #if defined(SQLITE_DEBUG) && defined(SQLITE_ENABLE_SELECTTRACE)
12471:   savedSelectTrace = sqlite3_unsupported_selecttrace;
12472:   sqlite3_unsupported_selecttrace = 0;
12473: #endif
12474: #if defined(SQLITE_DEBUG) && defined(SQLITE_ENABLE_WHERETRACE)
12475:   savedWhereTrace = sqlite3WhereTrace;
12476:   sqlite3WhereTrace = 0;
12477: #endif
12478: }
12479: static void restore_debug_trace_modes(void){
12480: #if defined(SQLITE_DEBUG) && defined(SQLITE_ENABLE_SELECTTRACE)
12481:   sqlite3_unsupported_selecttrace = savedSelectTrace;
12482: #endif
12483: #if defined(SQLITE_DEBUG) && defined(SQLITE_ENABLE_WHERETRACE)
12484:   sqlite3WhereTrace = savedWhereTrace;
12485: #endif
12486: }
12487: 
12488: /* Create the TEMP table used to store parameter bindings */
12489: static void bind_table_init(ShellState *p){
12490:   int wrSchema = 0;
12491:   int defensiveMode = 0;
12492:   sqlite3_db_config(p->db, SQLITE_DBCONFIG_DEFENSIVE, -1, &defensiveMode);
12493:   sqlite3_db_config(p->db, SQLITE_DBCONFIG_DEFENSIVE, 0, 0);
12494:   sqlite3_db_config(p->db, SQLITE_DBCONFIG_WRITABLE_SCHEMA, -1, &wrSchema);
12495:   sqlite3_db_config(p->db, SQLITE_DBCONFIG_WRITABLE_SCHEMA, 1, 0);
12496:   sqlite3_exec(p->db,
12497:     "CREATE TABLE IF NOT EXISTS temp.sqlite_parameters(\n"
12498:     "  key TEXT PRIMARY KEY,\n"
12499:     "  value ANY\n"
12500:     ") WITHOUT ROWID;",
12501:     0, 0, 0);
12502:   sqlite3_db_config(p->db, SQLITE_DBCONFIG_WRITABLE_SCHEMA, wrSchema, 0);
12503:   sqlite3_db_config(p->db, SQLITE_DBCONFIG_DEFENSIVE, defensiveMode, 0);
12504: }
12505: 
12506: /*
12507: ** Bind parameters on a prepared statement.
12508: **
12509: ** Parameter bindings are taken from a TEMP table of the form:
12510: **
12511: **    CREATE TEMP TABLE sqlite_parameters(key TEXT PRIMARY KEY, value)
12512: **    WITHOUT ROWID;
12513: **
12514: ** No bindings occur if this table does not exist.  The name of the table
12515: ** begins with "sqlite_" so that it will not collide with ordinary application
12516: ** tables.  The table must be in the TEMP schema.
12517: */
12518: static void bind_prepared_stmt(ShellState *pArg, sqlite3_stmt *pStmt){
12519:   int nVar;
12520:   int i;
12521:   int rc;
12522:   sqlite3_stmt *pQ = 0;
12523: 
12524:   nVar = sqlite3_bind_parameter_count(pStmt);
12525:   if( nVar==0 ) return;  /* Nothing to do */
12526:   if( sqlite3_table_column_metadata(pArg->db, "TEMP", "sqlite_parameters",
12527:                                     "key", 0, 0, 0, 0, 0)!=SQLITE_OK ){
12528:     return; /* Parameter table does not exist */
12529:   }
12530:   rc = sqlite3_prepare_v2(pArg->db,
12531:           "SELECT value FROM temp.sqlite_parameters"
12532:           " WHERE key=?1", -1, &pQ, 0);
12533:   if( rc || pQ==0 ) return;
12534:   for(i=1; i<=nVar; i++){
12535:     char zNum[30];
12536:     const char *zVar = sqlite3_bind_parameter_name(pStmt, i);
12537:     if( zVar==0 ){
12538:       sqlite3_snprintf(sizeof(zNum),zNum,"?%d",i);
12539:       zVar = zNum;
12540:     }
12541:     sqlite3_bind_text(pQ, 1, zVar, -1, SQLITE_STATIC);
12542:     if( sqlite3_step(pQ)==SQLITE_ROW ){
12543:       sqlite3_bind_value(pStmt, i, sqlite3_column_value(pQ, 0));
12544:     }else{
12545:       sqlite3_bind_null(pStmt, i);
12546:     }
12547:     sqlite3_reset(pQ);
12548:   }
12549:   sqlite3_finalize(pQ);
12550: }
12551: 
12552: /*
12553: ** UTF8 box-drawing characters.  Imagine box lines like this:
12554: **
12555: **           1
12556: **           |
12557: **       4 --+-- 2
12558: **           |
12559: **           3
12560: **
12561: ** Each box characters has between 2 and 4 of the lines leading from
12562: ** the center.  The characters are here identified by the numbers of
12563: ** their corresponding lines.
12564: */
12565: #define BOX_24   "\342\224\200"  /* U+2500 --- */
12566: #define BOX_13   "\342\224\202"  /* U+2502  |  */
12567: #define BOX_23   "\342\224\214"  /* U+250c  ,- */
12568: #define BOX_34   "\342\224\220"  /* U+2510 -,  */
12569: #define BOX_12   "\342\224\224"  /* U+2514  '- */
12570: #define BOX_14   "\342\224\230"  /* U+2518 -'  */
12571: #define BOX_123  "\342\224\234"  /* U+251c  |- */
12572: #define BOX_134  "\342\224\244"  /* U+2524 -|  */
12573: #define BOX_234  "\342\224\254"  /* U+252c -,- */
12574: #define BOX_124  "\342\224\264"  /* U+2534 -'- */
12575: #define BOX_1234 "\342\224\274"  /* U+253c -|- */
12576: 
12577: /* Draw horizontal line N characters long using unicode box
12578: ** characters
12579: */
12580: static void print_box_line(FILE *out, int N){
12581:   const char zDash[] =
12582:       BOX_24 BOX_24 BOX_24 BOX_24 BOX_24 BOX_24 BOX_24 BOX_24 BOX_24 BOX_24
12583:       BOX_24 BOX_24 BOX_24 BOX_24 BOX_24 BOX_24 BOX_24 BOX_24 BOX_24 BOX_24;
12584:   const int nDash = sizeof(zDash) - 1;
12585:   N *= 3;
12586:   while( N>nDash ){
12587:     utf8_printf(out, zDash);
12588:     N -= nDash;
12589:   }
12590:   utf8_printf(out, "%.*s", N, zDash);
12591: }
12592: 
12593: /*
12594: ** Draw a horizontal separator for a MODE_Box table.
12595: */
12596: static void print_box_row_separator(
12597:   ShellState *p,
12598:   int nArg,
12599:   const char *zSep1,
12600:   const char *zSep2,
12601:   const char *zSep3
12602: ){
12603:   int i;
12604:   if( nArg>0 ){
12605:     utf8_printf(p->out, "%s", zSep1);
12606:     print_box_line(p->out, p->actualWidth[0]+2);
12607:     for(i=1; i<nArg; i++){
12608:       utf8_printf(p->out, "%s", zSep2);
12609:       print_box_line(p->out, p->actualWidth[i]+2);
12610:     }
12611:     utf8_printf(p->out, "%s", zSep3);
12612:   }
12613:   fputs("\n", p->out);
12614: }
12615: 
12616: 
12617: char *strdup_handle_newline(ShellState *p, const char *z) {
12618:   if (!z) {
12619:     return 0;
12620:   }
12621:   if (p->cMode != MODE_Box) {
12622:     return strdup(z);
12623:   }
12624:   int max_size = 80;
12625:   char *result = malloc(max_size * 2 + 10);
12626:   char *t = result;
12627:   int count = 0;
12628:   int interrupted = 0;
12629:   const char *s;
12630:   for(s = z; *s; s++, t++) {
12631:     if (*s == '\n') {
12632:       *t = '\\';
12633:       t++;
12634:       *t = 'n';
12635:     } else {
12636:       *t = *s;
12637:     }
12638:     count++;
12639:     if (count >= max_size && ((*s & 0xc0) != 0x80)) {
12640:       interrupted = 1;
12641:       break;
12642:     }
12643:   }
12644:   if (interrupted) {
12645:     *t++ = '.';
12646:     *t++ = '.';
12647:     *t++ = '.';
12648:   }
12649:   *t = '\0';
12650:   return result;
12651: }
12652: 
12653: /*
12654: ** Run a prepared statement and output the result in one of the
12655: ** table-oriented formats: MODE_Column, MODE_Markdown, MODE_Table,
12656: ** or MODE_Box.
12657: **
12658: ** This is different from ordinary exec_prepared_stmt() in that
12659: ** it has to run the entire query and gather the results into memory
12660: ** first, in order to determine column widths, before providing
12661: ** any output.
12662: */
12663: static void exec_prepared_stmt_columnar(
12664:   ShellState *p,                        /* Pointer to ShellState */
12665:   sqlite3_stmt *pStmt                   /* Statment to run */
12666: ){
12667:   sqlite3_int64 nRow = 0;
12668:   int nColumn = 0;
12669:   char **azData = 0;
12670:   sqlite3_int64 nAlloc = 0;
12671:   const char *z;
12672:   int rc;
12673:   sqlite3_int64 i, nData;
12674:   int j, nTotal, w, n;
12675:   const char *colSep = 0;
12676:   const char *rowSep = 0;
12677: 
12678:   rc = sqlite3_step(pStmt);
12679:   if( rc!=SQLITE_ROW ) return;
12680:   nColumn = sqlite3_column_count(pStmt);
12681:   nAlloc = nColumn*4;
12682:   azData = sqlite3_malloc64( nAlloc*sizeof(char*) );
12683:   if( azData==0 ) shell_out_of_memory();
12684:   for(i=0; i<nColumn; i++){
12685:     azData[i] = strdup_handle_newline(p, sqlite3_column_name(pStmt,i));
12686:   }
12687:   do{
12688:     if( (nRow+2)*nColumn >= nAlloc ){
12689:       nAlloc *= 2;
12690:       azData = sqlite3_realloc64(azData, nAlloc*sizeof(char*));
12691:       if( azData==0 ) shell_out_of_memory();
12692:     }
12693:     nRow++;
12694:     for(i=0; i<nColumn; i++){
12695:       z = (const char*)sqlite3_column_text(pStmt,i);
12696:       azData[nRow*nColumn + i] = strdup_handle_newline(p, z);
12697:     }
12698:   }while( (rc = sqlite3_step(pStmt))==SQLITE_ROW );
12699:   if( nColumn>p->nWidth ){
12700:     p->colWidth = realloc(p->colWidth, nColumn*2*sizeof(int));
12701:     if( p->colWidth==0 ) shell_out_of_memory();
12702:     for(i=p->nWidth; i<nColumn; i++) p->colWidth[i] = 0;
12703:     p->nWidth = nColumn;
12704:     p->actualWidth = &p->colWidth[nColumn];
12705:   }
12706:   memset(p->actualWidth, 0, nColumn*sizeof(int));
12707:   for(i=0; i<nColumn; i++){
12708:     w = p->colWidth[i];
12709:     if( w<0 ) w = -w;
12710:     p->actualWidth[i] = w;
12711:   }
12712:   nTotal = nColumn*(nRow+1);
12713:   for(i=0; i<nTotal; i++){
12714:     z = azData[i];
12715:     if( z==0 ) z = p->nullValue;
12716:     n = strlenChar(z);
12717:     j = i%nColumn;
12718:     if( n>p->actualWidth[j] ) p->actualWidth[j] = n;
12719:   }
12720:   if( seenInterrupt ) goto columnar_end;
12721:   switch( p->cMode ){
12722:     case MODE_Column: {
12723:       colSep = "  ";
12724:       rowSep = "\n";
12725:       if( p->showHeader ){
12726:         for(i=0; i<nColumn; i++){
12727:           w = p->actualWidth[i];
12728:           if( p->colWidth[i]<0 ) w = -w;
12729:           utf8_width_print(p->out, w, azData[i]);
12730:           fputs(i==nColumn-1?"\n":"  ", p->out);
12731:         }
12732:         for(i=0; i<nColumn; i++){
12733:           print_dashes(p->out, p->actualWidth[i]);
12734:           fputs(i==nColumn-1?"\n":"  ", p->out);
12735:         }
12736:       }
12737:       break;
12738:     }
12739:     case MODE_Table: {
12740:       colSep = " | ";
12741:       rowSep = " |\n";
12742:       print_row_separator(p, nColumn, "+");
12743:       fputs("| ", p->out);
12744:       for(i=0; i<nColumn; i++){
12745:         w = p->actualWidth[i];
12746:         n = strlenChar(azData[i]);
12747:         utf8_printf(p->out, "%*s%s%*s", (w-n)/2, "", azData[i], (w-n+1)/2, "");
12748:         fputs(i==nColumn-1?" |\n":" | ", p->out);
12749:       }
12750:       print_row_separator(p, nColumn, "+");
12751:       break;
12752:     }
12753:     case MODE_Markdown: {
12754:       colSep = " | ";
12755:       rowSep = " |\n";
12756:       fputs("| ", p->out);
12757:       for(i=0; i<nColumn; i++){
12758:         w = p->actualWidth[i];
12759:         n = strlenChar(azData[i]);
12760:         utf8_printf(p->out, "%*s%s%*s", (w-n)/2, "", azData[i], (w-n+1)/2, "");
12761:         fputs(i==nColumn-1?" |\n":" | ", p->out);
12762:       }
12763:       print_row_separator(p, nColumn, "|");
12764:       break;
12765:     }
12766:     case MODE_Box: {
12767:       colSep = " " BOX_13 " ";
12768:       rowSep = " " BOX_13 "\n";
12769:       print_box_row_separator(p, nColumn, BOX_23, BOX_234, BOX_34);
12770:       utf8_printf(p->out, BOX_13 " ");
12771:       for(i=0; i<nColumn; i++){
12772:         w = p->actualWidth[i];
12773:         n = strlenChar(azData[i]);
12774:         utf8_printf(p->out, "%*s%s%*s%s",
12775:             (w-n)/2, "", azData[i], (w-n+1)/2, "",
12776:             i==nColumn-1?" "BOX_13"\n":" "BOX_13" ");
12777:       }
12778:       print_box_row_separator(p, nColumn, BOX_123, BOX_1234, BOX_134);
12779:       break;
12780:     }
12781:   }
12782:   for(i=nColumn, j=0; i<nTotal; i++, j++){
12783:     if( j==0 && p->cMode!=MODE_Column ){
12784:       utf8_printf(p->out, "%s", p->cMode==MODE_Box?BOX_13" ":"| ");
12785:     }
12786:     z = azData[i];
12787:     if( z==0 ) z = p->nullValue;
12788:     w = p->actualWidth[j];
12789:     if( p->colWidth[j]<0 ) w = -w;
12790:     utf8_width_print(p->out, w, z);
12791:     if( j==nColumn-1 ){
12792:       utf8_printf(p->out, "%s", rowSep);
12793:       j = -1;
12794:       if( seenInterrupt ) goto columnar_end;
12795:     }else{
12796:       utf8_printf(p->out, "%s", colSep);
12797:     }
12798:   }
12799:   if( p->cMode==MODE_Table ){
12800:     print_row_separator(p, nColumn, "+");
12801:   }else if( p->cMode==MODE_Box ){
12802:     print_box_row_separator(p, nColumn, BOX_12, BOX_124, BOX_14);
12803:   }
12804: columnar_end:
12805:   if( seenInterrupt ){
12806:     utf8_printf(p->out, "Interrupt\n");
12807:   }
12808:   nData = (nRow+1)*nColumn;
12809:   for(i=0; i<nData; i++) free(azData[i]);
12810:   sqlite3_free(azData);
12811: }
12812: 
12813: /*
12814: ** Run a prepared statement
12815: */
12816: static void exec_prepared_stmt(
12817:   ShellState *pArg,                                /* Pointer to ShellState */
12818:   sqlite3_stmt *pStmt                              /* Statment to run */
12819: ){
12820:   int rc;
12821: 
12822:   if( pArg->cMode==MODE_Column
12823:    || pArg->cMode==MODE_Table
12824:    || pArg->cMode==MODE_Box
12825:    || pArg->cMode==MODE_Markdown
12826:   ){
12827:     exec_prepared_stmt_columnar(pArg, pStmt);
12828:     return;
12829:   }
12830: 
12831:   /* perform the first step.  this will tell us if we
12832:   ** have a result set or not and how wide it is.
12833:   */
12834:   rc = sqlite3_step(pStmt);
12835:   /* if we have a result set... */
12836:   if( SQLITE_ROW == rc ){
12837:     /* allocate space for col name ptr, value ptr, and type */
12838:     int nCol = sqlite3_column_count(pStmt);
12839:     void *pData = sqlite3_malloc64(3*nCol*sizeof(const char*) + 1);
12840:     if( !pData ){
12841:       rc = SQLITE_NOMEM;
12842:     }else{
12843:       char **azCols = (char **)pData;      /* Names of result columns */
12844:       char **azVals = &azCols[nCol];       /* Results */
12845:       int *aiTypes = (int *)&azVals[nCol]; /* Result types */
12846:       int i, x;
12847:       assert(sizeof(int) <= sizeof(char *));
12848:       /* save off ptrs to column names */
12849:       for(i=0; i<nCol; i++){
12850:         azCols[i] = (char *)sqlite3_column_name(pStmt, i);
12851:       }
12852:       do{
12853:         /* extract the data and data types */
12854:         for(i=0; i<nCol; i++){
12855:           aiTypes[i] = x = sqlite3_column_type(pStmt, i);
12856:           if( x==SQLITE_BLOB && pArg && pArg->cMode==MODE_Insert ){
12857:             azVals[i] = "";
12858:           }else{
12859:             azVals[i] = (char*)sqlite3_column_text(pStmt, i);
12860:           }
12861:           if( !azVals[i] && (aiTypes[i]!=SQLITE_NULL) ){
12862:             rc = SQLITE_NOMEM;
12863:             break; /* from for */
12864:           }
12865:         } /* end for */
12866: 
12867:         /* if data and types extracted successfully... */
12868:         if( SQLITE_ROW == rc ){
12869:           /* call the supplied callback with the result row data */
12870:           if( shell_callback(pArg, nCol, azVals, azCols, aiTypes) ){
12871:             rc = SQLITE_ABORT;
12872:           }else{
12873:             rc = sqlite3_step(pStmt);
12874:           }
12875:         }
12876:       } while( SQLITE_ROW == rc );
12877:       sqlite3_free(pData);
12878:       if( pArg->cMode==MODE_Json ){
12879:         fputs("]\n", pArg->out);
12880:       }
12881:     }
12882:   }
12883: }
12884: 
12885: #ifndef SQLITE_OMIT_VIRTUALTABLE
12886: /*
12887: ** This function is called to process SQL if the previous shell command
12888: ** was ".expert". It passes the SQL in the second argument directly to
12889: ** the sqlite3expert object.
12890: **
12891: ** If successful, SQLITE_OK is returned. Otherwise, an SQLite error
12892: ** code. In this case, (*pzErr) may be set to point to a buffer containing
12893: ** an English language error message. It is the responsibility of the
12894: ** caller to eventually free this buffer using sqlite3_free().
12895: */
12896: static int expertHandleSQL(
12897:   ShellState *pState,
12898:   const char *zSql,
12899:   char **pzErr
12900: ){
12901:   assert( pState->expert.pExpert );
12902:   assert( pzErr==0 || *pzErr==0 );
12903:   return sqlite3_expert_sql(pState->expert.pExpert, zSql, pzErr);
12904: }
12905: 
12906: /*
12907: ** This function is called either to silently clean up the object
12908: ** created by the ".expert" command (if bCancel==1), or to generate a
12909: ** report from it and then clean it up (if bCancel==0).
12910: **
12911: ** If successful, SQLITE_OK is returned. Otherwise, an SQLite error
12912: ** code. In this case, (*pzErr) may be set to point to a buffer containing
12913: ** an English language error message. It is the responsibility of the
12914: ** caller to eventually free this buffer using sqlite3_free().
12915: */
12916: static int expertFinish(
12917:   ShellState *pState,
12918:   int bCancel,
12919:   char **pzErr
12920: ){
12921:   int rc = SQLITE_OK;
12922:   sqlite3expert *p = pState->expert.pExpert;
12923:   assert( p );
12924:   assert( bCancel || pzErr==0 || *pzErr==0 );
12925:   if( bCancel==0 ){
12926:     FILE *out = pState->out;
12927:     int bVerbose = pState->expert.bVerbose;
12928: 
12929:     rc = sqlite3_expert_analyze(p, pzErr);
12930:     if( rc==SQLITE_OK ){
12931:       int nQuery = sqlite3_expert_count(p);
12932:       int i;
12933: 
12934:       if( bVerbose ){
12935:         const char *zCand = sqlite3_expert_report(p,0,EXPERT_REPORT_CANDIDATES);
12936:         raw_printf(out, "-- Candidates -----------------------------\n");
12937:         raw_printf(out, "%s\n", zCand);
12938:       }
12939:       for(i=0; i<nQuery; i++){
12940:         const char *zSql = sqlite3_expert_report(p, i, EXPERT_REPORT_SQL);
12941:         const char *zIdx = sqlite3_expert_report(p, i, EXPERT_REPORT_INDEXES);
12942:         const char *zEQP = sqlite3_expert_report(p, i, EXPERT_REPORT_PLAN);
12943:         if( zIdx==0 ) zIdx = "(no new indexes)\n";
12944:         if( bVerbose ){
12945:           raw_printf(out, "-- Query %d --------------------------------\n",i+1);
12946:           raw_printf(out, "%s\n\n", zSql);
12947:         }
12948:         raw_printf(out, "%s\n", zIdx);
12949:         raw_printf(out, "%s\n", zEQP);
12950:       }
12951:     }
12952:   }
12953:   sqlite3_expert_destroy(p);
12954:   pState->expert.pExpert = 0;
12955:   return rc;
12956: }
12957: 
12958: /*
12959: ** Implementation of ".expert" dot command.
12960: */
12961: static int expertDotCommand(
12962:   ShellState *pState,             /* Current shell tool state */
12963:   char **azArg,                   /* Array of arguments passed to dot command */
12964:   int nArg                        /* Number of entries in azArg[] */
12965: ){
12966:   int rc = SQLITE_OK;
12967:   char *zErr = 0;
12968:   int i;
12969:   int iSample = 0;
12970: 
12971:   assert( pState->expert.pExpert==0 );
12972:   memset(&pState->expert, 0, sizeof(ExpertInfo));
12973: 
12974:   for(i=1; rc==SQLITE_OK && i<nArg; i++){
12975:     char *z = azArg[i];
12976:     int n;
12977:     if( z[0]=='-' && z[1]=='-' ) z++;
12978:     n = strlen30(z);
12979:     if( n>=2 && 0==strncmp(z, "-verbose", n) ){
12980:       pState->expert.bVerbose = 1;
12981:     }
12982:     else if( n>=2 && 0==strncmp(z, "-sample", n) ){
12983:       if( i==(nArg-1) ){
12984:         raw_printf(stderr, "option requires an argument: %s\n", z);
12985:         rc = SQLITE_ERROR;
12986:       }else{
12987:         iSample = (int)integerValue(azArg[++i]);
12988:         if( iSample<0 || iSample>100 ){
12989:           raw_printf(stderr, "value out of range: %s\n", azArg[i]);
12990:           rc = SQLITE_ERROR;
12991:         }
12992:       }
12993:     }
12994:     else{
12995:       raw_printf(stderr, "unknown option: %s\n", z);
12996:       rc = SQLITE_ERROR;
12997:     }
12998:   }
12999: 
13000:   if( rc==SQLITE_OK ){
13001:     pState->expert.pExpert = sqlite3_expert_new(pState->db, &zErr);
13002:     if( pState->expert.pExpert==0 ){
13003:       raw_printf(stderr, "sqlite3_expert_new: %s\n", zErr);
13004:       rc = SQLITE_ERROR;
13005:     }else{
13006:       sqlite3_expert_config(
13007:           pState->expert.pExpert, EXPERT_CONFIG_SAMPLE, iSample
13008:       );
13009:     }
13010:   }
13011: 
13012:   return rc;
13013: }
13014: #endif /* ifndef SQLITE_OMIT_VIRTUALTABLE */
13015: 
13016: /*
13017: ** Execute a statement or set of statements.  Print
13018: ** any result rows/columns depending on the current mode
13019: ** set via the supplied callback.
13020: **
13021: ** This is very similar to SQLite's built-in sqlite3_exec()
13022: ** function except it takes a slightly different callback
13023: ** and callback data argument.
13024: */
13025: static int shell_exec(
13026:   ShellState *pArg,                         /* Pointer to ShellState */
13027:   const char *zSql,                         /* SQL to be evaluated */
13028:   char **pzErrMsg                           /* Error msg written here */
13029: ){
13030:   sqlite3_stmt *pStmt = NULL;     /* Statement to execute. */
13031:   int rc = SQLITE_OK;             /* Return Code */
13032:   int rc2;
13033:   const char *zLeftover;          /* Tail of unprocessed SQL */
13034:   sqlite3 *db = pArg->db;
13035: 
13036:   if( pzErrMsg ){
13037:     *pzErrMsg = NULL;
13038:   }
13039: 
13040: #ifndef SQLITE_OMIT_VIRTUALTABLE
13041:   if( pArg->expert.pExpert ){
13042:     rc = expertHandleSQL(pArg, zSql, pzErrMsg);
13043:     return expertFinish(pArg, (rc!=SQLITE_OK), pzErrMsg);
13044:   }
13045: #endif
13046: 
13047:   while( zSql[0] && (SQLITE_OK == rc) ){
13048:     static const char *zStmtSql;
13049:     rc = sqlite3_prepare_v2(db, zSql, -1, &pStmt, &zLeftover);
13050:     if( SQLITE_OK != rc ){
13051:       if( pzErrMsg ){
13052:         *pzErrMsg = save_err_msg(db);
13053:       }
13054:     }else{
13055:       if( !pStmt ){
13056:         /* this happens for a comment or white-space */
13057:         zSql = zLeftover;
13058:         while( IsSpace(zSql[0]) ) zSql++;
13059:         continue;
13060:       }
13061:       zStmtSql = sqlite3_sql(pStmt);
13062:       if( zStmtSql==0 ) zStmtSql = "";
13063:       while( IsSpace(zStmtSql[0]) ) zStmtSql++;
13064: 
13065:       /* save off the prepared statment handle and reset row count */
13066:       if( pArg ){
13067:         pArg->pStmt = pStmt;
13068:         pArg->cnt = 0;
13069:       }
13070: 
13071:       /* echo the sql statement if echo on */
13072:       if( pArg && ShellHasFlag(pArg, SHFLG_Echo) ){
13073:         utf8_printf(pArg->out, "%s\n", zStmtSql ? zStmtSql : zSql);
13074:       }
13075: 
13076:       /* Show the EXPLAIN QUERY PLAN if .eqp is on */
13077:       if( pArg && pArg->autoEQP && sqlite3_stmt_isexplain(pStmt)==0 ){
13078:         sqlite3_stmt *pExplain;
13079:         char *zEQP;
13080:         int triggerEQP = 0;
13081:         disable_debug_trace_modes();
13082:         sqlite3_db_config(db, SQLITE_DBCONFIG_TRIGGER_EQP, -1, &triggerEQP);
13083:         if( pArg->autoEQP>=AUTOEQP_trigger ){
13084:           sqlite3_db_config(db, SQLITE_DBCONFIG_TRIGGER_EQP, 1, 0);
13085:         }
13086:         zEQP = sqlite3_mprintf("EXPLAIN QUERY PLAN %s", zStmtSql);
13087:         rc = sqlite3_prepare_v2(db, zEQP, -1, &pExplain, 0);
13088:         if( rc==SQLITE_OK ){
13089:           while( sqlite3_step(pExplain)==SQLITE_ROW ){
13090:             const char *zEQPLine = (const char*)sqlite3_column_text(pExplain,3);
13091:             int iEqpId = sqlite3_column_int(pExplain, 0);
13092:             int iParentId = sqlite3_column_int(pExplain, 1);
13093:             if( zEQPLine==0 ) zEQPLine = "";
13094:             if( zEQPLine[0]=='-' ) eqp_render(pArg);
13095:             eqp_append(pArg, iEqpId, iParentId, zEQPLine);
13096:           }
13097:           eqp_render(pArg);
13098:         }
13099:         sqlite3_finalize(pExplain);
13100:         sqlite3_free(zEQP);
13101:         if( pArg->autoEQP>=AUTOEQP_full ){
13102:           /* Also do an EXPLAIN for ".eqp full" mode */
13103:           zEQP = sqlite3_mprintf("EXPLAIN %s", zStmtSql);
13104:           rc = sqlite3_prepare_v2(db, zEQP, -1, &pExplain, 0);
13105:           if( rc==SQLITE_OK ){
13106:             pArg->cMode = MODE_Explain;
13107:             explain_data_prepare(pArg, pExplain);
13108:             exec_prepared_stmt(pArg, pExplain);
13109:             explain_data_delete(pArg);
13110:           }
13111:           sqlite3_finalize(pExplain);
13112:           sqlite3_free(zEQP);
13113:         }
13114:         if( pArg->autoEQP>=AUTOEQP_trigger && triggerEQP==0 ){
13115:           sqlite3_db_config(db, SQLITE_DBCONFIG_TRIGGER_EQP, 0, 0);
13116:           /* Reprepare pStmt before reactiving trace modes */
13117:           sqlite3_finalize(pStmt);
13118:           sqlite3_prepare_v2(db, zSql, -1, &pStmt, 0);
13119:           if( pArg ) pArg->pStmt = pStmt;
13120:         }
13121:         restore_debug_trace_modes();
13122:       }
13123: 
13124:       if( pArg ){
13125:         pArg->cMode = pArg->mode;
13126:         if( pArg->autoExplain ){
13127:           if( sqlite3_stmt_isexplain(pStmt)==1 ){
13128:             pArg->cMode = MODE_Explain;
13129:           }
13130:           if( sqlite3_stmt_isexplain(pStmt)==2 ){
13131:             pArg->cMode = MODE_EQP;
13132:           }
13133:         }
13134: 
13135:         /* If the shell is currently in ".explain" mode, gather the extra
13136:         ** data required to add indents to the output.*/
13137:         // if( pArg->cMode==MODE_Explain ){
13138:         //   explain_data_prepare(pArg, pStmt);
13139:         // }
13140:       }
13141: 
13142:       bind_prepared_stmt(pArg, pStmt);
13143:       exec_prepared_stmt(pArg, pStmt);
13144:       explain_data_delete(pArg);
13145:       eqp_render(pArg);
13146: 
13147:       /* print usage stats if stats on */
13148:       if( pArg && pArg->statsOn ){
13149:         display_stats(db, pArg, 0);
13150:       }
13151: 
13152:       /* print loop-counters if required */
13153:       if( pArg && pArg->scanstatsOn ){
13154:         display_scanstats(db, pArg);
13155:       }
13156: 
13157:       /* Finalize the statement just executed. If this fails, save a
13158:       ** copy of the error message. Otherwise, set zSql to point to the
13159:       ** next statement to execute. */
13160:       rc2 = sqlite3_finalize(pStmt);
13161:       if( rc!=SQLITE_NOMEM ) rc = rc2;
13162:       if( rc==SQLITE_OK ){
13163:         zSql = zLeftover;
13164:         while( IsSpace(zSql[0]) ) zSql++;
13165:       }else if( pzErrMsg ){
13166:         *pzErrMsg = save_err_msg(db);
13167:       }
13168: 
13169:       /* clear saved stmt handle */
13170:       if( pArg ){
13171:         pArg->pStmt = NULL;
13172:       }
13173:     }
13174:   } /* end while */
13175: 
13176:   return rc;
13177: }
13178: 
13179: /*
13180: ** Release memory previously allocated by tableColumnList().
13181: */
13182: static void freeColumnList(char **azCol){
13183:   int i;
13184:   for(i=1; azCol[i]; i++){
13185:     sqlite3_free(azCol[i]);
13186:   }
13187:   /* azCol[0] is a static string */
13188:   sqlite3_free(azCol);
13189: }
13190: 
13191: /*
13192: ** Return a list of pointers to strings which are the names of all
13193: ** columns in table zTab.   The memory to hold the names is dynamically
13194: ** allocated and must be released by the caller using a subsequent call
13195: ** to freeColumnList().
13196: **
13197: ** The azCol[0] entry is usually NULL.  However, if zTab contains a rowid
13198: ** value that needs to be preserved, then azCol[0] is filled in with the
13199: ** name of the rowid column.
13200: **
13201: ** The first regular column in the table is azCol[1].  The list is terminated
13202: ** by an entry with azCol[i]==0.
13203: */
13204: static char **tableColumnList(ShellState *p, const char *zTab){
13205:   char **azCol = 0;
13206:   sqlite3_stmt *pStmt;
13207:   char *zSql;
13208:   int nCol = 0;
13209:   int nAlloc = 0;
13210:   int nPK = 0;       /* Number of PRIMARY KEY columns seen */
13211:   int isIPK = 0;     /* True if one PRIMARY KEY column of type INTEGER */
13212:   int preserveRowid = ShellHasFlag(p, SHFLG_PreserveRowid);
13213:   int rc;
13214: 
13215:   zSql = sqlite3_mprintf("PRAGMA table_info=%Q", zTab);
13216:   rc = sqlite3_prepare_v2(p->db, zSql, -1, &pStmt, 0);
13217:   sqlite3_free(zSql);
13218:   if( rc ) return 0;
13219:   while( sqlite3_step(pStmt)==SQLITE_ROW ){
13220:     if( nCol>=nAlloc-2 ){
13221:       nAlloc = nAlloc*2 + nCol + 10;
13222:       azCol = sqlite3_realloc(azCol, nAlloc*sizeof(azCol[0]));
13223:       if( azCol==0 ) shell_out_of_memory();
13224:     }
13225:     azCol[++nCol] = sqlite3_mprintf("%s", sqlite3_column_text(pStmt, 1));
13226:     if( sqlite3_column_int(pStmt, 5) ){
13227:       nPK++;
13228:       if( nPK==1
13229:        && sqlite3_stricmp((const char*)sqlite3_column_text(pStmt,2),
13230:                           "INTEGER")==0
13231:       ){
13232:         isIPK = 1;
13233:       }else{
13234:         isIPK = 0;
13235:       }
13236:     }
13237:   }
13238:   sqlite3_finalize(pStmt);
13239:   if( azCol==0 ) return 0;
13240:   azCol[0] = 0;
13241:   azCol[nCol+1] = 0;
13242: 
13243:   /* The decision of whether or not a rowid really needs to be preserved
13244:   ** is tricky.  We never need to preserve a rowid for a WITHOUT ROWID table
13245:   ** or a table with an INTEGER PRIMARY KEY.  We are unable to preserve
13246:   ** rowids on tables where the rowid is inaccessible because there are other
13247:   ** columns in the table named "rowid", "_rowid_", and "oid".
13248:   */
13249:   if( preserveRowid && isIPK ){
13250:     /* If a single PRIMARY KEY column with type INTEGER was seen, then it
13251:     ** might be an alise for the ROWID.  But it might also be a WITHOUT ROWID
13252:     ** table or a INTEGER PRIMARY KEY DESC column, neither of which are
13253:     ** ROWID aliases.  To distinguish these cases, check to see if
13254:     ** there is a "pk" entry in "PRAGMA index_list".  There will be
13255:     ** no "pk" index if the PRIMARY KEY really is an alias for the ROWID.
13256:     */
13257:     zSql = sqlite3_mprintf("SELECT 1 FROM pragma_index_list(%Q)"
13258:                            " WHERE origin='pk'", zTab);
13259:     rc = sqlite3_prepare_v2(p->db, zSql, -1, &pStmt, 0);
13260:     sqlite3_free(zSql);
13261:     if( rc ){
13262:       freeColumnList(azCol);
13263:       return 0;
13264:     }
13265:     rc = sqlite3_step(pStmt);
13266:     sqlite3_finalize(pStmt);
13267:     preserveRowid = rc==SQLITE_ROW;
13268:   }
13269:   if( preserveRowid ){
13270:     /* Only preserve the rowid if we can find a name to use for the
13271:     ** rowid */
13272:     static char *azRowid[] = { "rowid", "_rowid_", "oid" };
13273:     int i, j;
13274:     for(j=0; j<3; j++){
13275:       for(i=1; i<=nCol; i++){
13276:         if( sqlite3_stricmp(azRowid[j],azCol[i])==0 ) break;
13277:       }
13278:       if( i>nCol ){
13279:         /* At this point, we know that azRowid[j] is not the name of any
13280:         ** ordinary column in the table.  Verify that azRowid[j] is a valid
13281:         ** name for the rowid before adding it to azCol[0].  WITHOUT ROWID
13282:         ** tables will fail this last check */
13283:         rc = sqlite3_table_column_metadata(p->db,0,zTab,azRowid[j],0,0,0,0,0);
13284:         if( rc==SQLITE_OK ) azCol[0] = azRowid[j];
13285:         break;
13286:       }
13287:     }
13288:   }
13289:   return azCol;
13290: }
13291: 
13292: /*
13293: ** Toggle the reverse_unordered_selects setting.
13294: */
13295: static void toggleSelectOrder(sqlite3 *db){
13296:   sqlite3_stmt *pStmt = 0;
13297:   int iSetting = 0;
13298:   char zStmt[100];
13299:   sqlite3_prepare_v2(db, "PRAGMA reverse_unordered_selects", -1, &pStmt, 0);
13300:   if( sqlite3_step(pStmt)==SQLITE_ROW ){
13301:     iSetting = sqlite3_column_int(pStmt, 0);
13302:   }
13303:   sqlite3_finalize(pStmt);
13304:   sqlite3_snprintf(sizeof(zStmt), zStmt,
13305:        "PRAGMA reverse_unordered_selects(%d)", !iSetting);
13306:   sqlite3_exec(db, zStmt, 0, 0, 0);
13307: }
13308: 
13309: /*
13310: ** This is a different callback routine used for dumping the database.
13311: ** Each row received by this callback consists of a table name,
13312: ** the table type ("index" or "table") and SQL to create the table.
13313: ** This routine should print text sufficient to recreate the table.
13314: */
13315: static int dump_callback(void *pArg, int nArg, char **azArg, char **azNotUsed){
13316:   int rc;
13317:   const char *zTable;
13318:   const char *zType;
13319:   const char *zSql;
13320:   ShellState *p = (ShellState *)pArg;
13321: 
13322:   UNUSED_PARAMETER(azNotUsed);
13323:   if( nArg!=3 || azArg==0 ) return 0;
13324:   zTable = azArg[0];
13325:   zType = azArg[1];
13326:   zSql = azArg[2];
13327: 
13328:   if( strcmp(zTable, "sqlite_sequence")==0 ){
13329:     raw_printf(p->out, "DELETE FROM sqlite_sequence;\n");
13330:   }else if( sqlite3_strglob("sqlite_stat?", zTable)==0 ){
13331:     raw_printf(p->out, "ANALYZE sqlite_schema;\n");
13332:   }else if( strncmp(zTable, "sqlite_", 7)==0 ){
13333:     return 0;
13334:   }else if( strncmp(zSql, "CREATE VIRTUAL TABLE", 20)==0 ){
13335:     char *zIns;
13336:     if( !p->writableSchema ){
13337:       raw_printf(p->out, "PRAGMA writable_schema=ON;\n");
13338:       p->writableSchema = 1;
13339:     }
13340:     zIns = sqlite3_mprintf(
13341:        "INSERT INTO sqlite_schema(type,name,tbl_name,rootpage,sql)"
13342:        "VALUES('table','%q','%q',0,'%q');",
13343:        zTable, zTable, zSql);
13344:     utf8_printf(p->out, "%s\n", zIns);
13345:     sqlite3_free(zIns);
13346:     return 0;
13347:   }else{
13348:     printSchemaLine(p->out, zSql, ";\n");
13349:   }
13350: 
13351:   if( strcmp(zType, "table")==0 ){
13352:     ShellText sSelect;
13353:     ShellText sTable;
13354:     char **azCol;
13355:     int i;
13356:     char *savedDestTable;
13357:     int savedMode;
13358: 
13359:     azCol = tableColumnList(p, zTable);
13360:     if( azCol==0 ){
13361:       p->nErr++;
13362:       return 0;
13363:     }
13364: 
13365:     /* Always quote the table name, even if it appears to be pure ascii,
13366:     ** in case it is a keyword. Ex:  INSERT INTO "table" ... */
13367:     initText(&sTable);
13368:     appendText(&sTable, zTable, quoteChar(zTable));
13369:     /* If preserving the rowid, add a column list after the table name.
13370:     ** In other words:  "INSERT INTO tab(rowid,a,b,c,...) VALUES(...)"
13371:     ** instead of the usual "INSERT INTO tab VALUES(...)".
13372:     */
13373:     if( azCol[0] ){
13374:       appendText(&sTable, "(", 0);
13375:       appendText(&sTable, azCol[0], 0);
13376:       for(i=1; azCol[i]; i++){
13377:         appendText(&sTable, ",", 0);
13378:         appendText(&sTable, azCol[i], quoteChar(azCol[i]));
13379:       }
13380:       appendText(&sTable, ")", 0);
13381:     }
13382: 
13383:     /* Build an appropriate SELECT statement */
13384:     initText(&sSelect);
13385:     appendText(&sSelect, "SELECT ", 0);
13386:     if( azCol[0] ){
13387:       appendText(&sSelect, azCol[0], 0);
13388:       appendText(&sSelect, ",", 0);
13389:     }
13390:     for(i=1; azCol[i]; i++){
13391:       appendText(&sSelect, azCol[i], quoteChar(azCol[i]));
13392:       if( azCol[i+1] ){
13393:         appendText(&sSelect, ",", 0);
13394:       }
13395:     }
13396:     freeColumnList(azCol);
13397:     appendText(&sSelect, " FROM ", 0);
13398:     appendText(&sSelect, zTable, quoteChar(zTable));
13399: 
13400:     savedDestTable = p->zDestTable;
13401:     savedMode = p->mode;
13402:     p->zDestTable = sTable.z;
13403:     p->mode = p->cMode = MODE_Insert;
13404:     rc = shell_exec(p, sSelect.z, 0);
13405:     if( (rc&0xff)==SQLITE_CORRUPT ){
13406:       raw_printf(p->out, "/****** CORRUPTION ERROR *******/\n");
13407:       toggleSelectOrder(p->db);
13408:       shell_exec(p, sSelect.z, 0);
13409:       toggleSelectOrder(p->db);
13410:     }
13411:     p->zDestTable = savedDestTable;
13412:     p->mode = savedMode;
13413:     freeText(&sTable);
13414:     freeText(&sSelect);
13415:     if( rc ) p->nErr++;
13416:   }
13417:   return 0;
13418: }
13419: 
13420: /*
13421: ** Run zQuery.  Use dump_callback() as the callback routine so that
13422: ** the contents of the query are output as SQL statements.
13423: **
13424: ** If we get a SQLITE_CORRUPT error, rerun the query after appending
13425: ** "ORDER BY rowid DESC" to the end.
13426: */
13427: static int run_schema_dump_query(
13428:   ShellState *p,
13429:   const char *zQuery
13430: ){
13431:   int rc;
13432:   char *zErr = 0;
13433:   rc = sqlite3_exec(p->db, zQuery, dump_callback, p, &zErr);
13434:   if( rc==SQLITE_CORRUPT ){
13435:     char *zQ2;
13436:     int len = strlen30(zQuery);
13437:     raw_printf(p->out, "/****** CORRUPTION ERROR *******/\n");
13438:     if( zErr ){
13439:       utf8_printf(p->out, "/****** %s ******/\n", zErr);
13440:       sqlite3_free(zErr);
13441:       zErr = 0;
13442:     }
13443:     zQ2 = malloc( len+100 );
13444:     if( zQ2==0 ) return rc;
13445:     sqlite3_snprintf(len+100, zQ2, "%s ORDER BY rowid DESC", zQuery);
13446:     rc = sqlite3_exec(p->db, zQ2, dump_callback, p, &zErr);
13447:     if( rc ){
13448:       utf8_printf(p->out, "/****** ERROR: %s ******/\n", zErr);
13449:     }else{
13450:       rc = SQLITE_CORRUPT;
13451:     }
13452:     sqlite3_free(zErr);
13453:     free(zQ2);
13454:   }
13455:   return rc;
13456: }
13457: 
13458: /*
13459: ** Text of help messages.
13460: **
13461: ** The help text for each individual command begins with a line that starts
13462: ** with ".".  Subsequent lines are supplimental information.
13463: **
13464: ** There must be two or more spaces between the end of the command and the
13465: ** start of the description of what that command does.
13466: */
13467: static const char *(azHelp[]) = {
13468: #if defined(SQLITE_HAVE_ZLIB) && !defined(SQLITE_OMIT_VIRTUALTABLE)
13469:   ".archive ...             Manage SQL archives",
13470:   "   Each command must have exactly one of the following options:",
13471:   "     -c, --create               Create a new archive",
13472:   "     -u, --update               Add or update files with changed mtime",
13473:   "     -i, --insert               Like -u but always add even if unchanged",
13474:   "     -t, --list                 List contents of archive",
13475:   "     -x, --extract              Extract files from archive",
13476:   "   Optional arguments:",
13477:   "     -v, --verbose              Print each filename as it is processed",
13478:   "     -f FILE, --file FILE       Use archive FILE (default is current db)",
13479:   "     -a FILE, --append FILE     Open FILE using the apndvfs VFS",
13480:   "     -C DIR, --directory DIR    Read/extract files from directory DIR",
13481:   "     -n, --dryrun               Show the SQL that would have occurred",
13482:   "   Examples:",
13483:   "     .ar -cf ARCHIVE foo bar  # Create ARCHIVE from files foo and bar",
13484:   "     .ar -tf ARCHIVE          # List members of ARCHIVE",
13485:   "     .ar -xvf ARCHIVE         # Verbosely extract files from ARCHIVE",
13486:   "   See also:",
13487:   "      http://sqlite.org/cli.html#sqlar_archive_support",
13488: #endif
13489: #ifndef SQLITE_OMIT_AUTHORIZATION
13490:   ".auth ON|OFF             Show authorizer callbacks",
13491: #endif
13492:   ".backup ?DB? FILE        Backup DB (default \"main\") to FILE",
13493:   "       --append            Use the appendvfs",
13494:   "       --async             Write to FILE without journal and fsync()",
13495:   ".bail on|off             Stop after hitting an error.  Default OFF",
13496:   ".binary on|off           Turn binary output on or off.  Default OFF",
13497:   ".cd DIRECTORY            Change the working directory to DIRECTORY",
13498:   ".changes on|off          Show number of rows changed by SQL",
13499:   ".check GLOB              Fail if output since .testcase does not match",
13500:   ".clone NEWDB             Clone data into NEWDB from the existing database",
13501:   ".databases               List names and files of attached databases",
13502:   ".dbconfig ?op? ?val?     List or change sqlite3_db_config() options",
13503:   ".dbinfo ?DB?             Show status information about the database",
13504:   ".dump ?TABLE?            Render database content as SQL",
13505:   "   Options:",
13506:   "     --preserve-rowids      Include ROWID values in the output",
13507:   "     --newlines             Allow unescaped newline characters in output",
13508:   "   TABLE is a LIKE pattern for the tables to dump",
13509:   "   Additional LIKE patterns can be given in subsequent arguments",
13510:   ".echo on|off             Turn command echo on or off",
13511:   ".eqp on|off|full|...     Enable or disable automatic EXPLAIN QUERY PLAN",
13512:   "   Other Modes:",
13513: #ifdef SQLITE_DEBUG
13514:   "      test                  Show raw EXPLAIN QUERY PLAN output",
13515:   "      trace                 Like \"full\" but enable \"PRAGMA vdbe_trace\"",
13516: #endif
13517:   "      trigger               Like \"full\" but also show trigger bytecode",
13518:   ".excel                   Display the output of next command in spreadsheet",
13519:   "   --bom                   Put a UTF8 byte-order mark on intermediate file",
13520:   ".exit ?CODE?             Exit this program with return-code CODE",
13521:   ".expert                  EXPERIMENTAL. Suggest indexes for queries",
13522:   ".explain ?on|off|auto?   Change the EXPLAIN formatting mode.  Default: auto",
13523:   ".filectrl CMD ...        Run various sqlite3_file_control() operations",
13524:   "   --schema SCHEMA         Use SCHEMA instead of \"main\"",
13525:   "   --help                  Show CMD details",
13526:   ".fullschema ?--indent?   Show schema and the content of sqlite_stat tables",
13527:   ".headers on|off          Turn display of headers on or off",
13528:   ".help ?-all? ?PATTERN?   Show help text for PATTERN",
13529:   ".import FILE TABLE       Import data from FILE into TABLE",
13530:   "   Options:",
13531:   "     --ascii               Use \\037 and \\036 as column and row separators",
13532:   "     --csv                 Use , and \\n as column and row separators",
13533:   "     --skip N              Skip the first N rows of input",
13534:   "     -v                    \"Verbose\" - increase auxiliary output",
13535:   "   Notes:",
13536:   "     *  If TABLE does not exist, it is created.  The first row of input",
13537:   "        determines the column names.",
13538:   "     *  If neither --csv or --ascii are used, the input mode is derived",
13539:   "        from the \".mode\" output mode",
13540:   "     *  If FILE begins with \"|\" then it is a command that generates the",
13541:   "        input text.",
13542: #ifndef SQLITE_OMIT_TEST_CONTROL
13543:   ".imposter INDEX TABLE    Create imposter table TABLE on index INDEX",
13544: #endif
13545:   ".indexes ?TABLE?         Show names of indexes",
13546:   "                           If TABLE is specified, only show indexes for",
13547:   "                           tables matching TABLE using the LIKE operator.",
13548: #ifdef SQLITE_ENABLE_IOTRACE
13549:   ".iotrace FILE            Enable I/O diagnostic logging to FILE",
13550: #endif
13551:   ".limit ?LIMIT? ?VAL?     Display or change the value of an SQLITE_LIMIT",
13552:   ".lint OPTIONS            Report potential schema issues.",
13553:   "     Options:",
13554:   "        fkey-indexes     Find missing foreign key indexes",
13555: #ifndef SQLITE_OMIT_LOAD_EXTENSION
13556:   ".load FILE ?ENTRY?       Load an extension library",
13557: #endif
13558:   ".log FILE|off            Turn logging on or off.  FILE can be stderr/stdout",
13559:   ".mode MODE ?TABLE?       Set output mode",
13560:   "   MODE is one of:",
13561:   "     ascii     Columns/rows delimited by 0x1F and 0x1E",
13562:   "     box       Tables using unicode box-drawing characters",
13563:   "     csv       Comma-separated values",
13564:   "     column    Output in columns.  (See .width)",
13565:   "     html      HTML <table> code",
13566:   "     insert    SQL insert statements for TABLE",
13567:   "     json      Results in a JSON array",
13568:   "     line      One value per line",
13569:   "     list      Values delimited by \"|\"",
13570:   "     markdown  Markdown table format",
13571:   "     quote     Escape answers as for SQL",
13572:   "     table     ASCII-art table",
13573:   "     tabs      Tab-separated values",
13574:   "     tcl       TCL list elements",
13575:   ".nullvalue STRING        Use STRING in place of NULL values",
13576:   ".once ?OPTIONS? ?FILE?   Output for the next SQL command only to FILE",
13577:   "     If FILE begins with '|' then open as a pipe",
13578:   "       --bom  Put a UTF8 byte-order mark at the beginning",
13579:   "       -e     Send output to the system text editor",
13580:   "       -x     Send output as CSV to a spreadsheet (same as \".excel\")",
13581: #ifdef SQLITE_DEBUG
13582:   ".oom ?--repeat M? ?N?    Simulate an OOM error on the N-th allocation",
13583: #endif
13584:   ".open ?OPTIONS? ?FILE?   Close existing database and reopen FILE",
13585:   "     Options:",
13586:   "        --append        Use appendvfs to append database to the end of FILE",
13587: #ifdef SQLITE_ENABLE_DESERIALIZE
13588:   "        --deserialize   Load into memory useing sqlite3_deserialize()",
13589:   "        --hexdb         Load the output of \"dbtotxt\" as an in-memory db",
13590:   "        --maxsize N     Maximum size for --hexdb or --deserialized database",
13591: #endif
13592:   "        --new           Initialize FILE to an empty database",
13593:   "        --nofollow      Do not follow symbolic links",
13594:   "        --readonly      Open FILE readonly",
13595:   "        --zip           FILE is a ZIP archive",
13596:   ".output ?FILE?           Send output to FILE or stdout if FILE is omitted",
13597:   "   If FILE begins with '|' then open it as a pipe.",
13598:   "   Options:",
13599:   "     --bom                 Prefix output with a UTF8 byte-order mark",
13600:   "     -e                    Send output to the system text editor",
13601:   "     -x                    Send output as CSV to a spreadsheet",
13602:   ".parameter CMD ...       Manage SQL parameter bindings",
13603:   "   clear                   Erase all bindings",
13604:   "   init                    Initialize the TEMP table that holds bindings",
13605:   "   list                    List the current parameter bindings",
13606:   "   set PARAMETER VALUE     Given SQL parameter PARAMETER a value of VALUE",
13607:   "                           PARAMETER should start with one of: $ : @ ?",
13608:   "   unset PARAMETER         Remove PARAMETER from the binding table",
13609:   ".print STRING...         Print literal STRING",
13610: #ifndef SQLITE_OMIT_PROGRESS_CALLBACK
13611:   ".progress N              Invoke progress handler after every N opcodes",
13612:   "   --limit N                 Interrupt after N progress callbacks",
13613:   "   --once                    Do no more than one progress interrupt",
13614:   "   --quiet|-q                No output except at interrupts",
13615:   "   --reset                   Reset the count for each input and interrupt",
13616: #endif
13617:   ".prompt MAIN CONTINUE    Replace the standard prompts",
13618:   ".quit                    Exit this program",
13619:   ".read FILE               Read input from FILE",
13620: #if !defined(SQLITE_OMIT_VIRTUALTABLE) && defined(SQLITE_ENABLE_DBPAGE_VTAB)
13621:   ".recover                 Recover as much data as possible from corrupt db.",
13622:   "   --freelist-corrupt       Assume the freelist is corrupt",
13623:   "   --recovery-db NAME       Store recovery metadata in database file NAME",
13624:   "   --lost-and-found TABLE   Alternative name for the lost-and-found table",
13625:   "   --no-rowids              Do not attempt to recover rowid values",
13626:   "                            that are not also INTEGER PRIMARY KEYs",
13627: #endif
13628:   ".restore ?DB? FILE       Restore content of DB (default \"main\") from FILE",
13629:   ".save FILE               Write in-memory database into FILE",
13630:   ".scanstats on|off        Turn sqlite3_stmt_scanstatus() metrics on or off",
13631:   ".schema ?PATTERN?        Show the CREATE statements matching PATTERN",
13632:   "     Options:",
13633:   "         --indent            Try to pretty-print the schema",
13634:   ".selftest ?OPTIONS?      Run tests defined in the SELFTEST table",
13635:   "    Options:",
13636:   "       --init               Create a new SELFTEST table",
13637:   "       -v                   Verbose output",
13638:   ".separator COL ?ROW?     Change the column and row separators",
13639: #if defined(SQLITE_ENABLE_SESSION)
13640:   ".session ?NAME? CMD ...  Create or control sessions",
13641:   "   Subcommands:",
13642:   "     attach TABLE             Attach TABLE",
13643:   "     changeset FILE           Write a changeset into FILE",
13644:   "     close                    Close one session",
13645:   "     enable ?BOOLEAN?         Set or query the enable bit",
13646:   "     filter GLOB...           Reject tables matching GLOBs",
13647:   "     indirect ?BOOLEAN?       Mark or query the indirect status",
13648:   "     isempty                  Query whether the session is empty",
13649:   "     list                     List currently open session names",
13650:   "     open DB NAME             Open a new session on DB",
13651:   "     patchset FILE            Write a patchset into FILE",
13652:   "   If ?NAME? is omitted, the first defined session is used.",
13653: #endif
13654:   ".sha3sum ...             Compute a SHA3 hash of database content",
13655:   "    Options:",
13656:   "      --schema              Also hash the sqlite_schema table",
13657:   "      --sha3-224            Use the sha3-224 algorithm",
13658:   "      --sha3-256            Use the sha3-256 algorithm (default)",
13659:   "      --sha3-384            Use the sha3-384 algorithm",
13660:   "      --sha3-512            Use the sha3-512 algorithm",
13661:   "    Any other argument is a LIKE pattern for tables to hash",
13662: #ifndef SQLITE_NOHAVE_SYSTEM
13663:   ".shell CMD ARGS...       Run CMD ARGS... in a system shell",
13664: #endif
13665:   ".show                    Show the current values for various settings",
13666:   ".stats ?on|off?          Show stats or turn stats on or off",
13667: #ifndef SQLITE_NOHAVE_SYSTEM
13668:   ".system CMD ARGS...      Run CMD ARGS... in a system shell",
13669: #endif
13670:   ".tables ?TABLE?          List names of tables matching LIKE pattern TABLE",
13671:   ".testcase NAME           Begin redirecting output to 'testcase-out.txt'",
13672:   ".testctrl CMD ...        Run various sqlite3_test_control() operations",
13673:   "                           Run \".testctrl\" with no arguments for details",
13674:   ".timeout MS              Try opening locked tables for MS milliseconds",
13675:   ".timer on|off            Turn SQL timer on or off",
13676: #ifndef SQLITE_OMIT_TRACE
13677:   ".trace ?OPTIONS?         Output each SQL statement as it is run",
13678:   "    FILE                    Send output to FILE",
13679:   "    stdout                  Send output to stdout",
13680:   "    stderr                  Send output to stderr",
13681:   "    off                     Disable tracing",
13682:   "    --expanded              Expand query parameters",
13683: #ifdef SQLITE_ENABLE_NORMALIZE
13684:   "    --normalized            Normal the SQL statements",
13685: #endif
13686:   "    --plain                 Show SQL as it is input",
13687:   "    --stmt                  Trace statement execution (SQLITE_TRACE_STMT)",
13688:   "    --profile               Profile statements (SQLITE_TRACE_PROFILE)",
13689:   "    --row                   Trace each row (SQLITE_TRACE_ROW)",
13690:   "    --close                 Trace connection close (SQLITE_TRACE_CLOSE)",
13691: #endif /* SQLITE_OMIT_TRACE */
13692: #ifdef SQLITE_DEBUG
13693:   ".unmodule NAME ...       Unregister virtual table modules",
13694:   "    --allexcept             Unregister everything except those named",
13695: #endif
13696:   ".vfsinfo ?AUX?           Information about the top-level VFS",
13697:   ".vfslist                 List all available VFSes",
13698:   ".vfsname ?AUX?           Print the name of the VFS stack",
13699:   ".width NUM1 NUM2 ...     Set minimum column widths for columnar output",
13700:   "     Negative values right-justify",
13701: };
13702: 
13703: /*
13704: ** Output help text.
13705: **
13706: ** zPattern describes the set of commands for which help text is provided.
13707: ** If zPattern is NULL, then show all commands, but only give a one-line
13708: ** description of each.
13709: **
13710: ** Return the number of matches.
13711: */
13712: static int showHelp(FILE *out, const char *zPattern){
13713:   int i = 0;
13714:   int j = 0;
13715:   int n = 0;
13716:   char *zPat;
13717:   if( zPattern==0
13718:    || zPattern[0]=='0'
13719:    || strcmp(zPattern,"-a")==0
13720:    || strcmp(zPattern,"-all")==0
13721:    || strcmp(zPattern,"--all")==0
13722:   ){
13723:     /* Show all commands, but only one line per command */
13724:     if( zPattern==0 ) zPattern = "";
13725:     for(i=0; i<ArraySize(azHelp); i++){
13726:       if( azHelp[i][0]=='.' || zPattern[0] ){
13727:         utf8_printf(out, "%s\n", azHelp[i]);
13728:         n++;
13729:       }
13730:     }
13731:   }else{
13732:     /* Look for commands that for which zPattern is an exact prefix */
13733:     zPat = sqlite3_mprintf(".%s*", zPattern);
13734:     for(i=0; i<ArraySize(azHelp); i++){
13735:       if( sqlite3_strglob(zPat, azHelp[i])==0 ){
13736:         utf8_printf(out, "%s\n", azHelp[i]);
13737:         j = i+1;
13738:         n++;
13739:       }
13740:     }
13741:     sqlite3_free(zPat);
13742:     if( n ){
13743:       if( n==1 ){
13744:         /* when zPattern is a prefix of exactly one command, then include the
13745:         ** details of that command, which should begin at offset j */
13746:         while( j<ArraySize(azHelp)-1 && azHelp[j][0]!='.' ){
13747:           utf8_printf(out, "%s\n", azHelp[j]);
13748:           j++;
13749:         }
13750:       }
13751:       return n;
13752:     }
13753:     /* Look for commands that contain zPattern anywhere.  Show the complete
13754:     ** text of all commands that match. */
13755:     zPat = sqlite3_mprintf("%%%s%%", zPattern);
13756:     for(i=0; i<ArraySize(azHelp); i++){
13757:       if( azHelp[i][0]=='.' ) j = i;
13758:       if( sqlite3_strlike(zPat, azHelp[i], 0)==0 ){
13759:         utf8_printf(out, "%s\n", azHelp[j]);
13760:         while( j<ArraySize(azHelp)-1 && azHelp[j+1][0]!='.' ){
13761:           j++;
13762:           utf8_printf(out, "%s\n", azHelp[j]);
13763:         }
13764:         i = j;
13765:         n++;
13766:       }
13767:     }
13768:     sqlite3_free(zPat);
13769:   }
13770:   return n;
13771: }
13772: 
13773: /* Forward reference */
13774: static int process_input(ShellState *p);
13775: 
13776: /*
13777: ** Read the content of file zName into memory obtained from sqlite3_malloc64()
13778: ** and return a pointer to the buffer. The caller is responsible for freeing
13779: ** the memory.
13780: **
13781: ** If parameter pnByte is not NULL, (*pnByte) is set to the number of bytes
13782: ** read.
13783: **
13784: ** For convenience, a nul-terminator byte is always appended to the data read
13785: ** from the file before the buffer is returned. This byte is not included in
13786: ** the final value of (*pnByte), if applicable.
13787: **
13788: ** NULL is returned if any error is encountered. The final value of *pnByte
13789: ** is undefined in this case.
13790: */
13791: static char *readFile(const char *zName, int *pnByte){
13792:   FILE *in = fopen(zName, "rb");
13793:   long nIn;
13794:   size_t nRead;
13795:   char *pBuf;
13796:   if( in==0 ) return 0;
13797:   fseek(in, 0, SEEK_END);
13798:   nIn = ftell(in);
13799:   rewind(in);
13800:   pBuf = sqlite3_malloc64( nIn+1 );
13801:   if( pBuf==0 ){ fclose(in); return 0; }
13802:   nRead = fread(pBuf, nIn, 1, in);
13803:   fclose(in);
13804:   if( nRead!=1 ){
13805:     sqlite3_free(pBuf);
13806:     return 0;
13807:   }
13808:   pBuf[nIn] = 0;
13809:   if( pnByte ) *pnByte = nIn;
13810:   return pBuf;
13811: }
13812: 
13813: #if defined(SQLITE_ENABLE_SESSION)
13814: /*
13815: ** Close a single OpenSession object and release all of its associated
13816: ** resources.
13817: */
13818: static void session_close(OpenSession *pSession){
13819:   int i;
13820:   sqlite3session_delete(pSession->p);
13821:   sqlite3_free(pSession->zName);
13822:   for(i=0; i<pSession->nFilter; i++){
13823:     sqlite3_free(pSession->azFilter[i]);
13824:   }
13825:   sqlite3_free(pSession->azFilter);
13826:   memset(pSession, 0, sizeof(OpenSession));
13827: }
13828: #endif
13829: 
13830: /*
13831: ** Close all OpenSession objects and release all associated resources.
13832: */
13833: #if defined(SQLITE_ENABLE_SESSION)
13834: static void session_close_all(ShellState *p){
13835:   int i;
13836:   for(i=0; i<p->nSession; i++){
13837:     session_close(&p->aSession[i]);
13838:   }
13839:   p->nSession = 0;
13840: }
13841: #else
13842: # define session_close_all(X)
13843: #endif
13844: 
13845: /*
13846: ** Implementation of the xFilter function for an open session.  Omit
13847: ** any tables named by ".session filter" but let all other table through.
13848: */
13849: #if defined(SQLITE_ENABLE_SESSION)
13850: static int session_filter(void *pCtx, const char *zTab){
13851:   OpenSession *pSession = (OpenSession*)pCtx;
13852:   int i;
13853:   for(i=0; i<pSession->nFilter; i++){
13854:     if( sqlite3_strglob(pSession->azFilter[i], zTab)==0 ) return 0;
13855:   }
13856:   return 1;
13857: }
13858: #endif
13859: 
13860: /*
13861: ** Try to deduce the type of file for zName based on its content.  Return
13862: ** one of the SHELL_OPEN_* constants.
13863: **
13864: ** If the file does not exist or is empty but its name looks like a ZIP
13865: ** archive and the dfltZip flag is true, then assume it is a ZIP archive.
13866: ** Otherwise, assume an ordinary database regardless of the filename if
13867: ** the type cannot be determined from content.
13868: */
13869: int deduceDatabaseType(const char *zName, int dfltZip){
13870:   FILE *f = fopen(zName, "rb");
13871:   size_t n;
13872:   int rc = SHELL_OPEN_UNSPEC;
13873:   char zBuf[100];
13874:   if( f==0 ){
13875:     if( dfltZip && sqlite3_strlike("%.zip",zName,0)==0 ){
13876:        return SHELL_OPEN_ZIPFILE;
13877:     }else{
13878:        return SHELL_OPEN_NORMAL;
13879:     }
13880:   }
13881:   n = fread(zBuf, 16, 1, f);
13882:   if( n==1 && memcmp(zBuf, "SQLite format 3", 16)==0 ){
13883:     fclose(f);
13884:     return SHELL_OPEN_NORMAL;
13885:   }
13886:   fseek(f, -25, SEEK_END);
13887:   n = fread(zBuf, 25, 1, f);
13888:   if( n==1 && memcmp(zBuf, "Start-Of-SQLite3-", 17)==0 ){
13889:     rc = SHELL_OPEN_APPENDVFS;
13890:   }else{
13891:     fseek(f, -22, SEEK_END);
13892:     n = fread(zBuf, 22, 1, f);
13893:     if( n==1 && zBuf[0]==0x50 && zBuf[1]==0x4b && zBuf[2]==0x05
13894:        && zBuf[3]==0x06 ){
13895:       rc = SHELL_OPEN_ZIPFILE;
13896:     }else if( n==0 && dfltZip && sqlite3_strlike("%.zip",zName,0)==0 ){
13897:       rc = SHELL_OPEN_ZIPFILE;
13898:     }
13899:   }
13900:   fclose(f);
13901:   return rc;
13902: }
13903: 
13904: #ifdef SQLITE_ENABLE_DESERIALIZE
13905: /*
13906: ** Reconstruct an in-memory database using the output from the "dbtotxt"
13907: ** program.  Read content from the file in p->zDbFilename.  If p->zDbFilename
13908: ** is 0, then read from standard input.
13909: */
13910: static unsigned char *readHexDb(ShellState *p, int *pnData){
13911:   unsigned char *a = 0;
13912:   int nLine;
13913:   int n = 0;
13914:   int pgsz = 0;
13915:   int iOffset = 0;
13916:   int j, k;
13917:   int rc;
13918:   FILE *in;
13919:   unsigned int x[16];
13920:   char zLine[1000];
13921:   if( p->zDbFilename ){
13922:     in = fopen(p->zDbFilename, "r");
13923:     if( in==0 ){
13924:       utf8_printf(stderr, "cannot open \"%s\" for reading\n", p->zDbFilename);
13925:       return 0;
13926:     }
13927:     nLine = 0;
13928:   }else{
13929:     in = p->in;
13930:     nLine = p->lineno;
13931:     if( in==0 ) in = stdin;
13932:   }
13933:   *pnData = 0;
13934:   nLine++;
13935:   if( fgets(zLine, sizeof(zLine), in)==0 ) goto readHexDb_error;
13936:   rc = sscanf(zLine, "| size %d pagesize %d", &n, &pgsz);
13937:   if( rc!=2 ) goto readHexDb_error;
13938:   if( n<0 ) goto readHexDb_error;
13939:   if( pgsz<512 || pgsz>65536 || (pgsz&(pgsz-1))!=0 ) goto readHexDb_error;
13940:   n = (n+pgsz-1)&~(pgsz-1);  /* Round n up to the next multiple of pgsz */
13941:   a = sqlite3_malloc( n ? n : 1 );
13942:   if( a==0 ){
13943:     utf8_printf(stderr, "Out of memory!\n");
13944:     goto readHexDb_error;
13945:   }
13946:   memset(a, 0, n);
13947:   if( pgsz<512 || pgsz>65536 || (pgsz & (pgsz-1))!=0 ){
13948:     utf8_printf(stderr, "invalid pagesize\n");
13949:     goto readHexDb_error;
13950:   }
13951:   for(nLine++; fgets(zLine, sizeof(zLine), in)!=0; nLine++){
13952:     rc = sscanf(zLine, "| page %d offset %d", &j, &k);
13953:     if( rc==2 ){
13954:       iOffset = k;
13955:       continue;
13956:     }
13957:     if( strncmp(zLine, "| end ", 6)==0 ){
13958:       break;
13959:     }
13960:     rc = sscanf(zLine,"| %d: %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x",
13961:                 &j, &x[0], &x[1], &x[2], &x[3], &x[4], &x[5], &x[6], &x[7],
13962:                 &x[8], &x[9], &x[10], &x[11], &x[12], &x[13], &x[14], &x[15]);
13963:     if( rc==17 ){
13964:       k = iOffset+j;
13965:       if( k+16<=n ){
13966:         int ii;
13967:         for(ii=0; ii<16; ii++) a[k+ii] = x[ii]&0xff;
13968:       }
13969:     }
13970:   }
13971:   *pnData = n;
13972:   if( in!=p->in ){
13973:     fclose(in);
13974:   }else{
13975:     p->lineno = nLine;
13976:   }
13977:   return a;
13978: 
13979: readHexDb_error:
13980:   if( in!=p->in ){
13981:     fclose(in);
13982:   }else{
13983:     while( fgets(zLine, sizeof(zLine), p->in)!=0 ){
13984:       nLine++;
13985:       if(strncmp(zLine, "| end ", 6)==0 ) break;
13986:     }
13987:     p->lineno = nLine;
13988:   }
13989:   sqlite3_free(a);
13990:   utf8_printf(stderr,"Error on line %d of --hexdb input\n", nLine);
13991:   return 0;
13992: }
13993: #endif /* SQLITE_ENABLE_DESERIALIZE */
13994: 
13995: /*
13996: ** Scalar function "shell_int32". The first argument to this function
13997: ** must be a blob. The second a non-negative integer. This function
13998: ** reads and returns a 32-bit big-endian integer from byte
13999: ** offset (4*<arg2>) of the blob.
14000: */
14001: static void shellInt32(
14002:   sqlite3_context *context,
14003:   int argc,
14004:   sqlite3_value **argv
14005: ){
14006:   const unsigned char *pBlob;
14007:   int nBlob;
14008:   int iInt;
14009: 
14010:   UNUSED_PARAMETER(argc);
14011:   nBlob = sqlite3_value_bytes(argv[0]);
14012:   pBlob = (const unsigned char*)sqlite3_value_blob(argv[0]);
14013:   iInt = sqlite3_value_int(argv[1]);
14014: 
14015:   if( iInt>=0 && (iInt+1)*4<=nBlob ){
14016:     const unsigned char *a = &pBlob[iInt*4];
14017:     sqlite3_int64 iVal = ((sqlite3_int64)a[0]<<24)
14018:                        + ((sqlite3_int64)a[1]<<16)
14019:                        + ((sqlite3_int64)a[2]<< 8)
14020:                        + ((sqlite3_int64)a[3]<< 0);
14021:     sqlite3_result_int64(context, iVal);
14022:   }
14023: }
14024: 
14025: /*
14026: ** Scalar function "shell_idquote(X)" returns string X quoted as an identifier,
14027: ** using "..." with internal double-quote characters doubled.
14028: */
14029: static void shellIdQuote(
14030:   sqlite3_context *context,
14031:   int argc,
14032:   sqlite3_value **argv
14033: ){
14034:   const char *zName = (const char*)sqlite3_value_text(argv[0]);
14035:   UNUSED_PARAMETER(argc);
14036:   if( zName ){
14037:     char *z = sqlite3_mprintf("\"%w\"", zName);
14038:     sqlite3_result_text(context, z, -1, sqlite3_free);
14039:   }
14040: }
14041: 
14042: /*
14043: ** Scalar function "shell_escape_crnl" used by the .recover command.
14044: ** The argument passed to this function is the output of built-in
14045: ** function quote(). If the first character of the input is "'",
14046: ** indicating that the value passed to quote() was a text value,
14047: ** then this function searches the input for "\n" and "\r" characters
14048: ** and adds a wrapper similar to the following:
14049: **
14050: **   replace(replace(<input>, '\n', char(10), '\r', char(13));
14051: **
14052: ** Or, if the first character of the input is not "'", then a copy
14053: ** of the input is returned.
14054: */
14055: static void shellEscapeCrnl(
14056:   sqlite3_context *context,
14057:   int argc,
14058:   sqlite3_value **argv
14059: ){
14060:   const char *zText = (const char*)sqlite3_value_text(argv[0]);
14061:   UNUSED_PARAMETER(argc);
14062:   if( zText[0]=='\'' ){
14063:     int nText = sqlite3_value_bytes(argv[0]);
14064:     int i;
14065:     char zBuf1[20];
14066:     char zBuf2[20];
14067:     const char *zNL = 0;
14068:     const char *zCR = 0;
14069:     int nCR = 0;
14070:     int nNL = 0;
14071: 
14072:     for(i=0; zText[i]; i++){
14073:       if( zNL==0 && zText[i]=='\n' ){
14074:         zNL = unused_string(zText, "\\n", "\\012", zBuf1);
14075:         nNL = (int)strlen(zNL);
14076:       }
14077:       if( zCR==0 && zText[i]=='\r' ){
14078:         zCR = unused_string(zText, "\\r", "\\015", zBuf2);
14079:         nCR = (int)strlen(zCR);
14080:       }
14081:     }
14082: 
14083:     if( zNL || zCR ){
14084:       int iOut = 0;
14085:       i64 nMax = (nNL > nCR) ? nNL : nCR;
14086:       i64 nAlloc = nMax * nText + (nMax+64)*2;
14087:       char *zOut = (char*)sqlite3_malloc64(nAlloc);
14088:       if( zOut==0 ){
14089:         sqlite3_result_error_nomem(context);
14090:         return;
14091:       }
14092: 
14093:       if( zNL && zCR ){
14094:         memcpy(&zOut[iOut], "replace(replace(", 16);
14095:         iOut += 16;
14096:       }else{
14097:         memcpy(&zOut[iOut], "replace(", 8);
14098:         iOut += 8;
14099:       }
14100:       for(i=0; zText[i]; i++){
14101:         if( zText[i]=='\n' ){
14102:           memcpy(&zOut[iOut], zNL, nNL);
14103:           iOut += nNL;
14104:         }else if( zText[i]=='\r' ){
14105:           memcpy(&zOut[iOut], zCR, nCR);
14106:           iOut += nCR;
14107:         }else{
14108:           zOut[iOut] = zText[i];
14109:           iOut++;
14110:         }
14111:       }
14112: 
14113:       if( zNL ){
14114:         memcpy(&zOut[iOut], ",'", 2); iOut += 2;
14115:         memcpy(&zOut[iOut], zNL, nNL); iOut += nNL;
14116:         memcpy(&zOut[iOut], "', char(10))", 12); iOut += 12;
14117:       }
14118:       if( zCR ){
14119:         memcpy(&zOut[iOut], ",'", 2); iOut += 2;
14120:         memcpy(&zOut[iOut], zCR, nCR); iOut += nCR;
14121:         memcpy(&zOut[iOut], "', char(13))", 12); iOut += 12;
14122:       }
14123: 
14124:       sqlite3_result_text(context, zOut, iOut, SQLITE_TRANSIENT);
14125:       sqlite3_free(zOut);
14126:       return;
14127:     }
14128:   }
14129: 
14130:   sqlite3_result_value(context, argv[0]);
14131: }
14132: 
14133: /* Flags for open_db().
14134: **
14135: ** The default behavior of open_db() is to exit(1) if the database fails to
14136: ** open.  The OPEN_DB_KEEPALIVE flag changes that so that it prints an error
14137: ** but still returns without calling exit.
14138: **
14139: ** The OPEN_DB_ZIPFILE flag causes open_db() to prefer to open files as a
14140: ** ZIP archive if the file does not exist or is empty and its name matches
14141: ** the *.zip pattern.
14142: */
14143: #define OPEN_DB_KEEPALIVE   0x001   /* Return after error if true */
14144: #define OPEN_DB_ZIPFILE     0x002   /* Open as ZIP if name matches *.zip */
14145: 
14146: /*
14147: ** Make sure the database is open.  If it is not, then open it.  If
14148: ** the database fails to open, print an error message and exit.
14149: */
14150: static void open_db(ShellState *p, int openFlags){
14151:   if( p->db==0 ){
14152:     if( p->openMode==SHELL_OPEN_UNSPEC ){
14153:       if( p->zDbFilename==0 || p->zDbFilename[0]==0 ){
14154:         p->openMode = SHELL_OPEN_NORMAL;
14155:       }else{
14156:         p->openMode = (u8)deduceDatabaseType(p->zDbFilename,
14157:                              (openFlags & OPEN_DB_ZIPFILE)!=0);
14158:       }
14159:     }
14160:     switch( p->openMode ){
14161:       case SHELL_OPEN_APPENDVFS: {
14162:         sqlite3_open_v2(p->zDbFilename, &p->db,
14163:            SQLITE_OPEN_READWRITE|SQLITE_OPEN_CREATE|p->openFlags, "apndvfs");
14164:         break;
14165:       }
14166:       case SHELL_OPEN_HEXDB:
14167:       case SHELL_OPEN_DESERIALIZE: {
14168:         sqlite3_open(0, &p->db);
14169:         break;
14170:       }
14171:       case SHELL_OPEN_ZIPFILE: {
14172:         sqlite3_open(":memory:", &p->db);
14173:         break;
14174:       }
14175:       case SHELL_OPEN_READONLY: {
14176:         sqlite3_open_v2(p->zDbFilename, &p->db,
14177:             SQLITE_OPEN_READONLY|p->openFlags, 0);
14178:         break;
14179:       }
14180:       case SHELL_OPEN_UNSPEC:
14181:       case SHELL_OPEN_NORMAL: {
14182:         sqlite3_open_v2(p->zDbFilename, &p->db,
14183:            SQLITE_OPEN_READWRITE|SQLITE_OPEN_CREATE|p->openFlags, 0);
14184:         break;
14185:       }
14186:     }
14187:     globalDb = p->db;
14188:     if( p->db==0 || SQLITE_OK!=sqlite3_errcode(p->db) ){
14189:       utf8_printf(stderr,"Error: unable to open database \"%s\": %s\n",
14190:           p->zDbFilename, sqlite3_errmsg(p->db));
14191:       if( openFlags & OPEN_DB_KEEPALIVE ){
14192:         sqlite3_open(":memory:", &p->db);
14193:         return;
14194:       }
14195:       exit(1);
14196:     }
14197: #ifndef SQLITE_OMIT_LOAD_EXTENSION
14198:     sqlite3_enable_load_extension(p->db, 1);
14199: #endif
14200:     sqlite3_fileio_init(p->db, 0, 0);
14201:     sqlite3_shathree_init(p->db, 0, 0);
14202:     sqlite3_completion_init(p->db, 0, 0);
14203:     sqlite3_uint_init(p->db, 0, 0);
14204:     sqlite3_decimal_init(p->db, 0, 0);
14205:     sqlite3_ieee_init(p->db, 0, 0);
14206: #if !defined(SQLITE_OMIT_VIRTUALTABLE) && defined(SQLITE_ENABLE_DBPAGE_VTAB)
14207:     sqlite3_dbdata_init(p->db, 0, 0);
14208: #endif
14209: #ifdef SQLITE_HAVE_ZLIB
14210:     sqlite3_zipfile_init(p->db, 0, 0);
14211:     sqlite3_sqlar_init(p->db, 0, 0);
14212: #endif
14213:     sqlite3_create_function(p->db, "shell_add_schema", 3, SQLITE_UTF8, 0,
14214:                             shellAddSchemaName, 0, 0);
14215:     sqlite3_create_function(p->db, "shell_module_schema", 1, SQLITE_UTF8, 0,
14216:                             shellModuleSchema, 0, 0);
14217:     sqlite3_create_function(p->db, "shell_putsnl", 1, SQLITE_UTF8, p,
14218:                             shellPutsFunc, 0, 0);
14219:     sqlite3_create_function(p->db, "shell_escape_crnl", 1, SQLITE_UTF8, 0,
14220:                             shellEscapeCrnl, 0, 0);
14221:     sqlite3_create_function(p->db, "shell_int32", 2, SQLITE_UTF8, 0,
14222:                             shellInt32, 0, 0);
14223:     sqlite3_create_function(p->db, "shell_idquote", 1, SQLITE_UTF8, 0,
14224:                             shellIdQuote, 0, 0);
14225: #ifndef SQLITE_NOHAVE_SYSTEM
14226:     sqlite3_create_function(p->db, "edit", 1, SQLITE_UTF8, 0,
14227:                             editFunc, 0, 0);
14228:     sqlite3_create_function(p->db, "edit", 2, SQLITE_UTF8, 0,
14229:                             editFunc, 0, 0);
14230: #endif
14231:     if( p->openMode==SHELL_OPEN_ZIPFILE ){
14232:       char *zSql = sqlite3_mprintf(
14233:          "CREATE VIRTUAL TABLE zip USING zipfile(%Q);", p->zDbFilename);
14234:       sqlite3_exec(p->db, zSql, 0, 0, 0);
14235:       sqlite3_free(zSql);
14236:     }
14237: #ifdef SQLITE_ENABLE_DESERIALIZE
14238:     else
14239:     if( p->openMode==SHELL_OPEN_DESERIALIZE || p->openMode==SHELL_OPEN_HEXDB ){
14240:       int rc;
14241:       int nData = 0;
14242:       unsigned char *aData;
14243:       if( p->openMode==SHELL_OPEN_DESERIALIZE ){
14244:         aData = (unsigned char*)readFile(p->zDbFilename, &nData);
14245:       }else{
14246:         aData = readHexDb(p, &nData);
14247:         if( aData==0 ){
14248:           return;
14249:         }
14250:       }
14251:       rc = sqlite3_deserialize(p->db, "main", aData, nData, nData,
14252:                    SQLITE_DESERIALIZE_RESIZEABLE |
14253:                    SQLITE_DESERIALIZE_FREEONCLOSE);
14254:       if( rc ){
14255:         utf8_printf(stderr, "Error: sqlite3_deserialize() returns %d\n", rc);
14256:       }
14257:       if( p->szMax>0 ){
14258:         sqlite3_file_control(p->db, "main", SQLITE_FCNTL_SIZE_LIMIT, &p->szMax);
14259:       }
14260:     }
14261: #endif
14262:   }
14263: }
14264: 
14265: /*
14266: ** Attempt to close the databaes connection.  Report errors.
14267: */
14268: void close_db(sqlite3 *db){
14269:   int rc = sqlite3_close(db);
14270:   if( rc ){
14271:     utf8_printf(stderr, "Error: sqlite3_close() returns %d: %s\n",
14272:         rc, sqlite3_errmsg(db));
14273:   }
14274: }
14275: 
14276: #if HAVE_READLINE || HAVE_EDITLINE
14277: /*
14278: ** Readline completion callbacks
14279: */
14280: static char *readline_completion_generator(const char *text, int state){
14281:   static sqlite3_stmt *pStmt = 0;
14282:   char *zRet;
14283:   if( state==0 ){
14284:     char *zSql;
14285:     sqlite3_finalize(pStmt);
14286:     zSql = sqlite3_mprintf("SELECT DISTINCT candidate COLLATE nocase"
14287:                            "  FROM completion(%Q) ORDER BY 1", text);
14288:     sqlite3_prepare_v2(globalDb, zSql, -1, &pStmt, 0);
14289:     sqlite3_free(zSql);
14290:   }
14291:   if( sqlite3_step(pStmt)==SQLITE_ROW ){
14292:     zRet = strdup((const char*)sqlite3_column_text(pStmt, 0));
14293:   }else{
14294:     sqlite3_finalize(pStmt);
14295:     pStmt = 0;
14296:     zRet = 0;
14297:   }
14298:   return zRet;
14299: }
14300: static char **readline_completion(const char *zText, int iStart, int iEnd){
14301:   rl_attempted_completion_over = 1;
14302:   return rl_completion_matches(zText, readline_completion_generator);
14303: }
14304: 
14305: #elif HAVE_LINENOISE
14306: /*
14307: ** Linenoise completion callback
14308: */
14309: static void linenoise_completion(const char *zLine, linenoiseCompletions *lc){
14310:   int nLine = strlen30(zLine);
14311:   int i, iStart;
14312:   sqlite3_stmt *pStmt = 0;
14313:   char *zSql;
14314:   char zBuf[1000];
14315: 
14316:   if( nLine>sizeof(zBuf)-30 ) return;
14317:   if( zLine[0]=='.' || zLine[0]=='#') return;
14318:   for(i=nLine-1; i>=0 && (isalnum(zLine[i]) || zLine[i]=='_'); i--){}
14319:   if( i==nLine-1 ) return;
14320:   iStart = i+1;
14321:   memcpy(zBuf, zLine, iStart);
14322:   zSql = sqlite3_mprintf("SELECT DISTINCT candidate COLLATE nocase"
14323:                          "  FROM completion(%Q,%Q) ORDER BY 1",
14324:                          &zLine[iStart], zLine);
14325:   sqlite3_prepare_v2(globalDb, zSql, -1, &pStmt, 0);
14326:   sqlite3_free(zSql);
14327:   sqlite3_exec(globalDb, "PRAGMA page_count", 0, 0, 0); /* Load the schema */
14328:   while( sqlite3_step(pStmt)==SQLITE_ROW ){
14329:     const char *zCompletion = (const char*)sqlite3_column_text(pStmt, 0);
14330:     int nCompletion = sqlite3_column_bytes(pStmt, 0);
14331:     if( iStart+nCompletion < sizeof(zBuf)-1 ){
14332:       memcpy(zBuf+iStart, zCompletion, nCompletion+1);
14333:       linenoiseAddCompletion(lc, zBuf);
14334:     }
14335:   }
14336:   sqlite3_finalize(pStmt);
14337: }
14338: #endif
14339: 
14340: /*
14341: ** Do C-language style dequoting.
14342: **
14343: **    \a    -> alarm
14344: **    \b    -> backspace
14345: **    \t    -> tab
14346: **    \n    -> newline
14347: **    \v    -> vertical tab
14348: **    \f    -> form feed
14349: **    \r    -> carriage return
14350: **    \s    -> space
14351: **    \"    -> "
14352: **    \'    -> '
14353: **    \\    -> backslash
14354: **    \NNN  -> ascii character NNN in octal
14355: */
14356: static void resolve_backslashes(char *z){
14357:   int i, j;
14358:   char c;
14359:   while( *z && *z!='\\' ) z++;
14360:   for(i=j=0; (c = z[i])!=0; i++, j++){
14361:     if( c=='\\' && z[i+1]!=0 ){
14362:       c = z[++i];
14363:       if( c=='a' ){
14364:         c = '\a';
14365:       }else if( c=='b' ){
14366:         c = '\b';
14367:       }else if( c=='t' ){
14368:         c = '\t';
14369:       }else if( c=='n' ){
14370:         c = '\n';
14371:       }else if( c=='v' ){
14372:         c = '\v';
14373:       }else if( c=='f' ){
14374:         c = '\f';
14375:       }else if( c=='r' ){
14376:         c = '\r';
14377:       }else if( c=='"' ){
14378:         c = '"';
14379:       }else if( c=='\'' ){
14380:         c = '\'';
14381:       }else if( c=='\\' ){
14382:         c = '\\';
14383:       }else if( c>='0' && c<='7' ){
14384:         c -= '0';
14385:         if( z[i+1]>='0' && z[i+1]<='7' ){
14386:           i++;
14387:           c = (c<<3) + z[i] - '0';
14388:           if( z[i+1]>='0' && z[i+1]<='7' ){
14389:             i++;
14390:             c = (c<<3) + z[i] - '0';
14391:           }
14392:         }
14393:       }
14394:     }
14395:     z[j] = c;
14396:   }
14397:   if( j<i ) z[j] = 0;
14398: }
14399: 
14400: /*
14401: ** Interpret zArg as either an integer or a boolean value.  Return 1 or 0
14402: ** for TRUE and FALSE.  Return the integer value if appropriate.
14403: */
14404: static int booleanValue(const char *zArg){
14405:   int i;
14406:   if( zArg[0]=='0' && zArg[1]=='x' ){
14407:     for(i=2; hexDigitValue(zArg[i])>=0; i++){}
14408:   }else{
14409:     for(i=0; zArg[i]>='0' && zArg[i]<='9'; i++){}
14410:   }
14411:   if( i>0 && zArg[i]==0 ) return (int)(integerValue(zArg) & 0xffffffff);
14412:   if( sqlite3_stricmp(zArg, "on")==0 || sqlite3_stricmp(zArg,"yes")==0 ){
14413:     return 1;
14414:   }
14415:   if( sqlite3_stricmp(zArg, "off")==0 || sqlite3_stricmp(zArg,"no")==0 ){
14416:     return 0;
14417:   }
14418:   utf8_printf(stderr, "ERROR: Not a boolean value: \"%s\". Assuming \"no\".\n",
14419:           zArg);
14420:   return 0;
14421: }
14422: 
14423: /*
14424: ** Set or clear a shell flag according to a boolean value.
14425: */
14426: static void setOrClearFlag(ShellState *p, unsigned mFlag, const char *zArg){
14427:   if( booleanValue(zArg) ){
14428:     ShellSetFlag(p, mFlag);
14429:   }else{
14430:     ShellClearFlag(p, mFlag);
14431:   }
14432: }
14433: 
14434: /*
14435: ** Close an output file, assuming it is not stderr or stdout
14436: */
14437: static void output_file_close(FILE *f){
14438:   if( f && f!=stdout && f!=stderr ) fclose(f);
14439: }
14440: 
14441: /*
14442: ** Try to open an output file.   The names "stdout" and "stderr" are
14443: ** recognized and do the right thing.  NULL is returned if the output
14444: ** filename is "off".
14445: */
14446: static FILE *output_file_open(const char *zFile, int bTextMode){
14447:   FILE *f;
14448:   if( strcmp(zFile,"stdout")==0 ){
14449:     f = stdout;
14450:   }else if( strcmp(zFile, "stderr")==0 ){
14451:     f = stderr;
14452:   }else if( strcmp(zFile, "off")==0 ){
14453:     f = 0;
14454:   }else{
14455:     f = fopen(zFile, bTextMode ? "w" : "wb");
14456:     if( f==0 ){
14457:       utf8_printf(stderr, "Error: cannot open \"%s\"\n", zFile);
14458:     }
14459:   }
14460:   return f;
14461: }
14462: 
14463: #ifndef SQLITE_OMIT_TRACE
14464: /*
14465: ** A routine for handling output from sqlite3_trace().
14466: */
14467: static int sql_trace_callback(
14468:   unsigned mType,         /* The trace type */
14469:   void *pArg,             /* The ShellState pointer */
14470:   void *pP,               /* Usually a pointer to sqlite_stmt */
14471:   void *pX                /* Auxiliary output */
14472: ){
14473:   ShellState *p = (ShellState*)pArg;
14474:   sqlite3_stmt *pStmt;
14475:   const char *zSql;
14476:   int nSql;
14477:   if( p->traceOut==0 ) return 0;
14478:   if( mType==SQLITE_TRACE_CLOSE ){
14479:     utf8_printf(p->traceOut, "-- closing database connection\n");
14480:     return 0;
14481:   }
14482:   if( mType!=SQLITE_TRACE_ROW && ((const char*)pX)[0]=='-' ){
14483:     zSql = (const char*)pX;
14484:   }else{
14485:     pStmt = (sqlite3_stmt*)pP;
14486:     switch( p->eTraceType ){
14487:       case SHELL_TRACE_EXPANDED: {
14488:         zSql = sqlite3_expanded_sql(pStmt);
14489:         break;
14490:       }
14491: #ifdef SQLITE_ENABLE_NORMALIZE
14492:       case SHELL_TRACE_NORMALIZED: {
14493:         zSql = sqlite3_normalized_sql(pStmt);
14494:         break;
14495:       }
14496: #endif
14497:       default: {
14498:         zSql = sqlite3_sql(pStmt);
14499:         break;
14500:       }
14501:     }
14502:   }
14503:   if( zSql==0 ) return 0;
14504:   nSql = strlen30(zSql);
14505:   while( nSql>0 && zSql[nSql-1]==';' ){ nSql--; }
14506:   switch( mType ){
14507:     case SQLITE_TRACE_ROW:
14508:     case SQLITE_TRACE_STMT: {
14509:       utf8_printf(p->traceOut, "%.*s;\n", nSql, zSql);
14510:       break;
14511:     }
14512:     case SQLITE_TRACE_PROFILE: {
14513:       sqlite3_int64 nNanosec = *(sqlite3_int64*)pX;
14514:       utf8_printf(p->traceOut, "%.*s; -- %lld ns\n", nSql, zSql, nNanosec);
14515:       break;
14516:     }
14517:   }
14518:   return 0;
14519: }
14520: #endif
14521: 
14522: /*
14523: ** A no-op routine that runs with the ".breakpoint" doc-command.  This is
14524: ** a useful spot to set a debugger breakpoint.
14525: */
14526: static void test_breakpoint(void){
14527:   static int nCall = 0;
14528:   nCall++;
14529: }
14530: 
14531: /*
14532: ** An object used to read a CSV and other files for import.
14533: */
14534: typedef struct ImportCtx ImportCtx;
14535: struct ImportCtx {
14536:   const char *zFile;  /* Name of the input file */
14537:   FILE *in;           /* Read the CSV text from this input stream */
14538:   int (SQLITE_CDECL *xCloser)(FILE*);      /* Func to close in */
14539:   char *z;            /* Accumulated text for a field */
14540:   int n;              /* Number of bytes in z */
14541:   int nAlloc;         /* Space allocated for z[] */
14542:   int nLine;          /* Current line number */
14543:   int nRow;           /* Number of rows imported */
14544:   int nErr;           /* Number of errors encountered */
14545:   int bNotFirst;      /* True if one or more bytes already read */
14546:   int cTerm;          /* Character that terminated the most recent field */
14547:   int cColSep;        /* The column separator character.  (Usually ",") */
14548:   int cRowSep;        /* The row separator character.  (Usually "\n") */
14549: };
14550: 
14551: /* Clean up resourced used by an ImportCtx */
14552: static void import_cleanup(ImportCtx *p){
14553:   if( p->in!=0 && p->xCloser!=0 ){
14554:     p->xCloser(p->in);
14555:     p->in = 0;
14556:   }
14557:   sqlite3_free(p->z);
14558:   p->z = 0;
14559: }
14560: 
14561: /* Append a single byte to z[] */
14562: static void import_append_char(ImportCtx *p, int c){
14563:   if( p->n+1>=p->nAlloc ){
14564:     p->nAlloc += p->nAlloc + 100;
14565:     p->z = sqlite3_realloc64(p->z, p->nAlloc);
14566:     if( p->z==0 ) shell_out_of_memory();
14567:   }
14568:   p->z[p->n++] = (char)c;
14569: }
14570: 
14571: /* Read a single field of CSV text.  Compatible with rfc4180 and extended
14572: ** with the option of having a separator other than ",".
14573: **
14574: **   +  Input comes from p->in.
14575: **   +  Store results in p->z of length p->n.  Space to hold p->z comes
14576: **      from sqlite3_malloc64().
14577: **   +  Use p->cSep as the column separator.  The default is ",".
14578: **   +  Use p->rSep as the row separator.  The default is "\n".
14579: **   +  Keep track of the line number in p->nLine.
14580: **   +  Store the character that terminates the field in p->cTerm.  Store
14581: **      EOF on end-of-file.
14582: **   +  Report syntax errors on stderr
14583: */
14584: static char *SQLITE_CDECL csv_read_one_field(ImportCtx *p){
14585:   int c;
14586:   int cSep = p->cColSep;
14587:   int rSep = p->cRowSep;
14588:   p->n = 0;
14589:   c = fgetc(p->in);
14590:   if( c==EOF || seenInterrupt ){
14591:     p->cTerm = EOF;
14592:     return 0;
14593:   }
14594:   if( c=='"' ){
14595:     int pc, ppc;
14596:     int startLine = p->nLine;
14597:     int cQuote = c;
14598:     pc = ppc = 0;
14599:     while( 1 ){
14600:       c = fgetc(p->in);
14601:       if( c==rSep ) p->nLine++;
14602:       if( c==cQuote ){
14603:         if( pc==cQuote ){
14604:           pc = 0;
14605:           continue;
14606:         }
14607:       }
14608:       if( (c==cSep && pc==cQuote)
14609:        || (c==rSep && pc==cQuote)
14610:        || (c==rSep && pc=='\r' && ppc==cQuote)
14611:        || (c==EOF && pc==cQuote)
14612:       ){
14613:         do{ p->n--; }while( p->z[p->n]!=cQuote );
14614:         p->cTerm = c;
14615:         break;
14616:       }
14617:       if( pc==cQuote && c!='\r' ){
14618:         utf8_printf(stderr, "%s:%d: unescaped %c character\n",
14619:                 p->zFile, p->nLine, cQuote);
14620:       }
14621:       if( c==EOF ){
14622:         utf8_printf(stderr, "%s:%d: unterminated %c-quoted field\n",
14623:                 p->zFile, startLine, cQuote);
14624:         p->cTerm = c;
14625:         break;
14626:       }
14627:       import_append_char(p, c);
14628:       ppc = pc;
14629:       pc = c;
14630:     }
14631:   }else{
14632:     /* If this is the first field being parsed and it begins with the
14633:     ** UTF-8 BOM  (0xEF BB BF) then skip the BOM */
14634:     if( (c&0xff)==0xef && p->bNotFirst==0 ){
14635:       import_append_char(p, c);
14636:       c = fgetc(p->in);
14637:       if( (c&0xff)==0xbb ){
14638:         import_append_char(p, c);
14639:         c = fgetc(p->in);
14640:         if( (c&0xff)==0xbf ){
14641:           p->bNotFirst = 1;
14642:           p->n = 0;
14643:           return csv_read_one_field(p);
14644:         }
14645:       }
14646:     }
14647:     while( c!=EOF && c!=cSep && c!=rSep ){
14648:       import_append_char(p, c);
14649:       c = fgetc(p->in);
14650:     }
14651:     if( c==rSep ){
14652:       p->nLine++;
14653:       if( p->n>0 && p->z[p->n-1]=='\r' ) p->n--;
14654:     }
14655:     p->cTerm = c;
14656:   }
14657:   if( p->z ) p->z[p->n] = 0;
14658:   p->bNotFirst = 1;
14659:   return p->z;
14660: }
14661: 
14662: /* Read a single field of ASCII delimited text.
14663: **
14664: **   +  Input comes from p->in.
14665: **   +  Store results in p->z of length p->n.  Space to hold p->z comes
14666: **      from sqlite3_malloc64().
14667: **   +  Use p->cSep as the column separator.  The default is "\x1F".
14668: **   +  Use p->rSep as the row separator.  The default is "\x1E".
14669: **   +  Keep track of the row number in p->nLine.
14670: **   +  Store the character that terminates the field in p->cTerm.  Store
14671: **      EOF on end-of-file.
14672: **   +  Report syntax errors on stderr
14673: */
14674: static char *SQLITE_CDECL ascii_read_one_field(ImportCtx *p){
14675:   int c;
14676:   int cSep = p->cColSep;
14677:   int rSep = p->cRowSep;
14678:   p->n = 0;
14679:   c = fgetc(p->in);
14680:   if( c==EOF || seenInterrupt ){
14681:     p->cTerm = EOF;
14682:     return 0;
14683:   }
14684:   while( c!=EOF && c!=cSep && c!=rSep ){
14685:     import_append_char(p, c);
14686:     c = fgetc(p->in);
14687:   }
14688:   if( c==rSep ){
14689:     p->nLine++;
14690:   }
14691:   p->cTerm = c;
14692:   if( p->z ) p->z[p->n] = 0;
14693:   return p->z;
14694: }
14695: 
14696: /*
14697: ** Try to transfer data for table zTable.  If an error is seen while
14698: ** moving forward, try to go backwards.  The backwards movement won't
14699: ** work for WITHOUT ROWID tables.
14700: */
14701: static void tryToCloneData(
14702:   ShellState *p,
14703:   sqlite3 *newDb,
14704:   const char *zTable
14705: ){
14706:   sqlite3_stmt *pQuery = 0;
14707:   sqlite3_stmt *pInsert = 0;
14708:   char *zQuery = 0;
14709:   char *zInsert = 0;
14710:   int rc;
14711:   int i, j, n;
14712:   int nTable = strlen30(zTable);
14713:   int k = 0;
14714:   int cnt = 0;
14715:   const int spinRate = 10000;
14716: 
14717:   zQuery = sqlite3_mprintf("SELECT * FROM \"%w\"", zTable);
14718:   rc = sqlite3_prepare_v2(p->db, zQuery, -1, &pQuery, 0);
14719:   if( rc ){
14720:     utf8_printf(stderr, "Error %d: %s on [%s]\n",
14721:             sqlite3_extended_errcode(p->db), sqlite3_errmsg(p->db),
14722:             zQuery);
14723:     goto end_data_xfer;
14724:   }
14725:   n = sqlite3_column_count(pQuery);
14726:   zInsert = sqlite3_malloc64(200 + nTable + n*3);
14727:   if( zInsert==0 ) shell_out_of_memory();
14728:   sqlite3_snprintf(200+nTable,zInsert,
14729:                    "INSERT OR IGNORE INTO \"%s\" VALUES(?", zTable);
14730:   i = strlen30(zInsert);
14731:   for(j=1; j<n; j++){
14732:     memcpy(zInsert+i, ",?", 2);
14733:     i += 2;
14734:   }
14735:   memcpy(zInsert+i, ");", 3);
14736:   rc = sqlite3_prepare_v2(newDb, zInsert, -1, &pInsert, 0);
14737:   if( rc ){
14738:     utf8_printf(stderr, "Error %d: %s on [%s]\n",
14739:             sqlite3_extended_errcode(newDb), sqlite3_errmsg(newDb),
14740:             zQuery);
14741:     goto end_data_xfer;
14742:   }
14743:   for(k=0; k<2; k++){
14744:     while( (rc = sqlite3_step(pQuery))==SQLITE_ROW ){
14745:       for(i=0; i<n; i++){
14746:         switch( sqlite3_column_type(pQuery, i) ){
14747:           case SQLITE_NULL: {
14748:             sqlite3_bind_null(pInsert, i+1);
14749:             break;
14750:           }
14751:           case SQLITE_INTEGER: {
14752:             sqlite3_bind_int64(pInsert, i+1, sqlite3_column_int64(pQuery,i));
14753:             break;
14754:           }
14755:           case SQLITE_FLOAT: {
14756:             sqlite3_bind_double(pInsert, i+1, sqlite3_column_double(pQuery,i));
14757:             break;
14758:           }
14759:           case SQLITE_TEXT: {
14760:             sqlite3_bind_text(pInsert, i+1,
14761:                              (const char*)sqlite3_column_text(pQuery,i),
14762:                              -1, SQLITE_STATIC);
14763:             break;
14764:           }
14765:           case SQLITE_BLOB: {
14766:             sqlite3_bind_blob(pInsert, i+1, sqlite3_column_blob(pQuery,i),
14767:                                             sqlite3_column_bytes(pQuery,i),
14768:                                             SQLITE_STATIC);
14769:             break;
14770:           }
14771:         }
14772:       } /* End for */
14773:       rc = sqlite3_step(pInsert);
14774:       if( rc!=SQLITE_OK && rc!=SQLITE_ROW && rc!=SQLITE_DONE ){
14775:         utf8_printf(stderr, "Error %d: %s\n", sqlite3_extended_errcode(newDb),
14776:                         sqlite3_errmsg(newDb));
14777:       }
14778:       sqlite3_reset(pInsert);
14779:       cnt++;
14780:       if( (cnt%spinRate)==0 ){
14781:         printf("%c\b", "|/-\\"[(cnt/spinRate)%4]);
14782:         fflush(stdout);
14783:       }
14784:     } /* End while */
14785:     if( rc==SQLITE_DONE ) break;
14786:     sqlite3_finalize(pQuery);
14787:     sqlite3_free(zQuery);
14788:     zQuery = sqlite3_mprintf("SELECT * FROM \"%w\" ORDER BY rowid DESC;",
14789:                              zTable);
14790:     rc = sqlite3_prepare_v2(p->db, zQuery, -1, &pQuery, 0);
14791:     if( rc ){
14792:       utf8_printf(stderr, "Warning: cannot step \"%s\" backwards", zTable);
14793:       break;
14794:     }
14795:   } /* End for(k=0...) */
14796: 
14797: end_data_xfer:
14798:   sqlite3_finalize(pQuery);
14799:   sqlite3_finalize(pInsert);
14800:   sqlite3_free(zQuery);
14801:   sqlite3_free(zInsert);
14802: }
14803: 
14804: 
14805: /*
14806: ** Try to transfer all rows of the schema that match zWhere.  For
14807: ** each row, invoke xForEach() on the object defined by that row.
14808: ** If an error is encountered while moving forward through the
14809: ** sqlite_schema table, try again moving backwards.
14810: */
14811: static void tryToCloneSchema(
14812:   ShellState *p,
14813:   sqlite3 *newDb,
14814:   const char *zWhere,
14815:   void (*xForEach)(ShellState*,sqlite3*,const char*)
14816: ){
14817:   sqlite3_stmt *pQuery = 0;
14818:   char *zQuery = 0;
14819:   int rc;
14820:   const unsigned char *zName;
14821:   const unsigned char *zSql;
14822:   char *zErrMsg = 0;
14823: 
14824:   zQuery = sqlite3_mprintf("SELECT name, sql FROM sqlite_schema"
14825:                            " WHERE %s", zWhere);
14826:   rc = sqlite3_prepare_v2(p->db, zQuery, -1, &pQuery, 0);
14827:   if( rc ){
14828:     utf8_printf(stderr, "Error: (%d) %s on [%s]\n",
14829:                     sqlite3_extended_errcode(p->db), sqlite3_errmsg(p->db),
14830:                     zQuery);
14831:     goto end_schema_xfer;
14832:   }
14833:   while( (rc = sqlite3_step(pQuery))==SQLITE_ROW ){
14834:     zName = sqlite3_column_text(pQuery, 0);
14835:     zSql = sqlite3_column_text(pQuery, 1);
14836:     printf("%s... ", zName); fflush(stdout);
14837:     sqlite3_exec(newDb, (const char*)zSql, 0, 0, &zErrMsg);
14838:     if( zErrMsg ){
14839:       utf8_printf(stderr, "Error: %s\nSQL: [%s]\n", zErrMsg, zSql);
14840:       sqlite3_free(zErrMsg);
14841:       zErrMsg = 0;
14842:     }
14843:     if( xForEach ){
14844:       xForEach(p, newDb, (const char*)zName);
14845:     }
14846:     printf("done\n");
14847:   }
14848:   if( rc!=SQLITE_DONE ){
14849:     sqlite3_finalize(pQuery);
14850:     sqlite3_free(zQuery);
14851:     zQuery = sqlite3_mprintf("SELECT name, sql FROM sqlite_schema"
14852:                              " WHERE %s ORDER BY rowid DESC", zWhere);
14853:     rc = sqlite3_prepare_v2(p->db, zQuery, -1, &pQuery, 0);
14854:     if( rc ){
14855:       utf8_printf(stderr, "Error: (%d) %s on [%s]\n",
14856:                       sqlite3_extended_errcode(p->db), sqlite3_errmsg(p->db),
14857:                       zQuery);
14858:       goto end_schema_xfer;
14859:     }
14860:     while( (rc = sqlite3_step(pQuery))==SQLITE_ROW ){
14861:       zName = sqlite3_column_text(pQuery, 0);
14862:       zSql = sqlite3_column_text(pQuery, 1);
14863:       printf("%s... ", zName); fflush(stdout);
14864:       sqlite3_exec(newDb, (const char*)zSql, 0, 0, &zErrMsg);
14865:       if( zErrMsg ){
14866:         utf8_printf(stderr, "Error: %s\nSQL: [%s]\n", zErrMsg, zSql);
14867:         sqlite3_free(zErrMsg);
14868:         zErrMsg = 0;
14869:       }
14870:       if( xForEach ){
14871:         xForEach(p, newDb, (const char*)zName);
14872:       }
14873:       printf("done\n");
14874:     }
14875:   }
14876: end_schema_xfer:
14877:   sqlite3_finalize(pQuery);
14878:   sqlite3_free(zQuery);
14879: }
14880: 
14881: /*
14882: ** Open a new database file named "zNewDb".  Try to recover as much information
14883: ** as possible out of the main database (which might be corrupt) and write it
14884: ** into zNewDb.
14885: */
14886: static void tryToClone(ShellState *p, const char *zNewDb){
14887:   int rc;
14888:   sqlite3 *newDb = 0;
14889:   if( access(zNewDb,0)==0 ){
14890:     utf8_printf(stderr, "File \"%s\" already exists.\n", zNewDb);
14891:     return;
14892:   }
14893:   rc = sqlite3_open(zNewDb, &newDb);
14894:   if( rc ){
14895:     utf8_printf(stderr, "Cannot create output database: %s\n",
14896:             sqlite3_errmsg(newDb));
14897:   }else{
14898:     sqlite3_exec(p->db, "PRAGMA writable_schema=ON;", 0, 0, 0);
14899:     sqlite3_exec(newDb, "BEGIN EXCLUSIVE;", 0, 0, 0);
14900:     tryToCloneSchema(p, newDb, "type='table'", tryToCloneData);
14901:     tryToCloneSchema(p, newDb, "type!='table'", 0);
14902:     sqlite3_exec(newDb, "COMMIT;", 0, 0, 0);
14903:     sqlite3_exec(p->db, "PRAGMA writable_schema=OFF;", 0, 0, 0);
14904:   }
14905:   close_db(newDb);
14906: }
14907: 
14908: /*
14909: ** Change the output file back to stdout.
14910: **
14911: ** If the p->doXdgOpen flag is set, that means the output was being
14912: ** redirected to a temporary file named by p->zTempFile.  In that case,
14913: ** launch start/open/xdg-open on that temporary file.
14914: */
14915: static void output_reset(ShellState *p){
14916:   if( p->outfile[0]=='|' ){
14917: #ifndef SQLITE_OMIT_POPEN
14918:     pclose(p->out);
14919: #endif
14920:   }else{
14921:     output_file_close(p->out);
14922: #ifndef SQLITE_NOHAVE_SYSTEM
14923:     if( p->doXdgOpen ){
14924:       const char *zXdgOpenCmd =
14925: #if defined(_WIN32)
14926:       "start";
14927: #elif defined(__APPLE__)
14928:       "open";
14929: #else
14930:       "xdg-open";
14931: #endif
14932:       char *zCmd;
14933:       zCmd = sqlite3_mprintf("%s %s", zXdgOpenCmd, p->zTempFile);
14934:       if( system(zCmd) ){
14935:         utf8_printf(stderr, "Failed: [%s]\n", zCmd);
14936:       }else{
14937:         /* Give the start/open/xdg-open command some time to get
14938:         ** going before we continue, and potential delete the
14939:         ** p->zTempFile data file out from under it */
14940:         sqlite3_sleep(2000);
14941:       }
14942:       sqlite3_free(zCmd);
14943:       outputModePop(p);
14944:       p->doXdgOpen = 0;
14945:     }
14946: #endif /* !defined(SQLITE_NOHAVE_SYSTEM) */
14947:   }
14948:   p->outfile[0] = 0;
14949:   p->out = stdout;
14950: }
14951: 
14952: /*
14953: ** Run an SQL command and return the single integer result.
14954: */
14955: static int db_int(ShellState *p, const char *zSql){
14956:   sqlite3_stmt *pStmt;
14957:   int res = 0;
14958:   sqlite3_prepare_v2(p->db, zSql, -1, &pStmt, 0);
14959:   if( pStmt && sqlite3_step(pStmt)==SQLITE_ROW ){
14960:     res = sqlite3_column_int(pStmt,0);
14961:   }
14962:   sqlite3_finalize(pStmt);
14963:   return res;
14964: }
14965: 
14966: /*
14967: ** Convert a 2-byte or 4-byte big-endian integer into a native integer
14968: */
14969: static unsigned int get2byteInt(unsigned char *a){
14970:   return (a[0]<<8) + a[1];
14971: }
14972: static unsigned int get4byteInt(unsigned char *a){
14973:   return (a[0]<<24) + (a[1]<<16) + (a[2]<<8) + a[3];
14974: }
14975: 
14976: /*
14977: ** Implementation of the ".dbinfo" command.
14978: **
14979: ** Return 1 on error, 2 to exit, and 0 otherwise.
14980: */
14981: static int shell_dbinfo_command(ShellState *p, int nArg, char **azArg){
14982:   static const struct { const char *zName; int ofst; } aField[] = {
14983:      { "file change counter:",  24  },
14984:      { "database page count:",  28  },
14985:      { "freelist page count:",  36  },
14986:      { "schema cookie:",        40  },
14987:      { "schema format:",        44  },
14988:      { "default cache size:",   48  },
14989:      { "autovacuum top root:",  52  },
14990:      { "incremental vacuum:",   64  },
14991:      { "text encoding:",        56  },
14992:      { "user version:",         60  },
14993:      { "application id:",       68  },
14994:      { "software version:",     96  },
14995:   };
14996:   static const struct { const char *zName; const char *zSql; } aQuery[] = {
14997:      { "number of tables:",
14998:        "SELECT count(*) FROM %s WHERE type='table'" },
14999:      { "number of indexes:",
15000:        "SELECT count(*) FROM %s WHERE type='index'" },
15001:      { "number of triggers:",
15002:        "SELECT count(*) FROM %s WHERE type='trigger'" },
15003:      { "number of views:",
15004:        "SELECT count(*) FROM %s WHERE type='view'" },
15005:      { "schema size:",
15006:        "SELECT total(length(sql)) FROM %s" },
15007:   };
15008:   int i, rc;
15009:   unsigned iDataVersion;
15010:   char *zSchemaTab;
15011:   char *zDb = nArg>=2 ? azArg[1] : "main";
15012:   sqlite3_stmt *pStmt = 0;
15013:   unsigned char aHdr[100];
15014:   open_db(p, 0);
15015:   if( p->db==0 ) return 1;
15016:   rc = sqlite3_prepare_v2(p->db,
15017:              "SELECT data FROM sqlite_dbpage(?1) WHERE pgno=1",
15018:              -1, &pStmt, 0);
15019:   if( rc ){
15020:     utf8_printf(stderr, "error: %s\n", sqlite3_errmsg(p->db));
15021:     sqlite3_finalize(pStmt);
15022:     return 1;
15023:   }
15024:   sqlite3_bind_text(pStmt, 1, zDb, -1, SQLITE_STATIC);
15025:   if( sqlite3_step(pStmt)==SQLITE_ROW
15026:    && sqlite3_column_bytes(pStmt,0)>100
15027:   ){
15028:     memcpy(aHdr, sqlite3_column_blob(pStmt,0), 100);
15029:     sqlite3_finalize(pStmt);
15030:   }else{
15031:     raw_printf(stderr, "unable to read database header\n");
15032:     sqlite3_finalize(pStmt);
15033:     return 1;
15034:   }
15035:   i = get2byteInt(aHdr+16);
15036:   if( i==1 ) i = 65536;
15037:   utf8_printf(p->out, "%-20s %d\n", "database page size:", i);
15038:   utf8_printf(p->out, "%-20s %d\n", "write format:", aHdr[18]);
15039:   utf8_printf(p->out, "%-20s %d\n", "read format:", aHdr[19]);
15040:   utf8_printf(p->out, "%-20s %d\n", "reserved bytes:", aHdr[20]);
15041:   for(i=0; i<ArraySize(aField); i++){
15042:     int ofst = aField[i].ofst;
15043:     unsigned int val = get4byteInt(aHdr + ofst);
15044:     utf8_printf(p->out, "%-20s %u", aField[i].zName, val);
15045:     switch( ofst ){
15046:       case 56: {
15047:         if( val==1 ) raw_printf(p->out, " (utf8)");
15048:         if( val==2 ) raw_printf(p->out, " (utf16le)");
15049:         if( val==3 ) raw_printf(p->out, " (utf16be)");
15050:       }
15051:     }
15052:     raw_printf(p->out, "\n");
15053:   }
15054:   if( zDb==0 ){
15055:     zSchemaTab = sqlite3_mprintf("main.sqlite_schema");
15056:   }else if( strcmp(zDb,"temp")==0 ){
15057:     zSchemaTab = sqlite3_mprintf("%s", "sqlite_temp_schema");
15058:   }else{
15059:     zSchemaTab = sqlite3_mprintf("\"%w\".sqlite_schema", zDb);
15060:   }
15061:   for(i=0; i<ArraySize(aQuery); i++){
15062:     char *zSql = sqlite3_mprintf(aQuery[i].zSql, zSchemaTab);
15063:     int val = db_int(p, zSql);
15064:     sqlite3_free(zSql);
15065:     utf8_printf(p->out, "%-20s %d\n", aQuery[i].zName, val);
15066:   }
15067:   sqlite3_free(zSchemaTab);
15068:   sqlite3_file_control(p->db, zDb, SQLITE_FCNTL_DATA_VERSION, &iDataVersion);
15069:   utf8_printf(p->out, "%-20s %u\n", "data version", iDataVersion);
15070:   return 0;
15071: }
15072: 
15073: /*
15074: ** Print the current sqlite3_errmsg() value to stderr and return 1.
15075: */
15076: static int shellDatabaseError(sqlite3 *db){
15077:   const char *zErr = sqlite3_errmsg(db);
15078:   utf8_printf(stderr, "Error: %s\n", zErr);
15079:   return 1;
15080: }
15081: 
15082: /*
15083: ** Compare the pattern in zGlob[] against the text in z[].  Return TRUE
15084: ** if they match and FALSE (0) if they do not match.
15085: **
15086: ** Globbing rules:
15087: **
15088: **      '*'       Matches any sequence of zero or more characters.
15089: **
15090: **      '?'       Matches exactly one character.
15091: **
15092: **     [...]      Matches one character from the enclosed list of
15093: **                characters.
15094: **
15095: **     [^...]     Matches one character not in the enclosed list.
15096: **
15097: **      '#'       Matches any sequence of one or more digits with an
15098: **                optional + or - sign in front
15099: **
15100: **      ' '       Any span of whitespace matches any other span of
15101: **                whitespace.
15102: **
15103: ** Extra whitespace at the end of z[] is ignored.
15104: */
15105: static int testcase_glob(const char *zGlob, const char *z){
15106:   int c, c2;
15107:   int invert;
15108:   int seen;
15109: 
15110:   while( (c = (*(zGlob++)))!=0 ){
15111:     if( IsSpace(c) ){
15112:       if( !IsSpace(*z) ) return 0;
15113:       while( IsSpace(*zGlob) ) zGlob++;
15114:       while( IsSpace(*z) ) z++;
15115:     }else if( c=='*' ){
15116:       while( (c=(*(zGlob++))) == '*' || c=='?' ){
15117:         if( c=='?' && (*(z++))==0 ) return 0;
15118:       }
15119:       if( c==0 ){
15120:         return 1;
15121:       }else if( c=='[' ){
15122:         while( *z && testcase_glob(zGlob-1,z)==0 ){
15123:           z++;
15124:         }
15125:         return (*z)!=0;
15126:       }
15127:       while( (c2 = (*(z++)))!=0 ){
15128:         while( c2!=c ){
15129:           c2 = *(z++);
15130:           if( c2==0 ) return 0;
15131:         }
15132:         if( testcase_glob(zGlob,z) ) return 1;
15133:       }
15134:       return 0;
15135:     }else if( c=='?' ){
15136:       if( (*(z++))==0 ) return 0;
15137:     }else if( c=='[' ){
15138:       int prior_c = 0;
15139:       seen = 0;
15140:       invert = 0;
15141:       c = *(z++);
15142:       if( c==0 ) return 0;
15143:       c2 = *(zGlob++);
15144:       if( c2=='^' ){
15145:         invert = 1;
15146:         c2 = *(zGlob++);
15147:       }
15148:       if( c2==']' ){
15149:         if( c==']' ) seen = 1;
15150:         c2 = *(zGlob++);
15151:       }
15152:       while( c2 && c2!=']' ){
15153:         if( c2=='-' && zGlob[0]!=']' && zGlob[0]!=0 && prior_c>0 ){
15154:           c2 = *(zGlob++);
15155:           if( c>=prior_c && c<=c2 ) seen = 1;
15156:           prior_c = 0;
15157:         }else{
15158:           if( c==c2 ){
15159:             seen = 1;
15160:           }
15161:           prior_c = c2;
15162:         }
15163:         c2 = *(zGlob++);
15164:       }
15165:       if( c2==0 || (seen ^ invert)==0 ) return 0;
15166:     }else if( c=='#' ){
15167:       if( (z[0]=='-' || z[0]=='+') && IsDigit(z[1]) ) z++;
15168:       if( !IsDigit(z[0]) ) return 0;
15169:       z++;
15170:       while( IsDigit(z[0]) ){ z++; }
15171:     }else{
15172:       if( c!=(*(z++)) ) return 0;
15173:     }
15174:   }
15175:   while( IsSpace(*z) ){ z++; }
15176:   return *z==0;
15177: }
15178: 
15179: 
15180: /*
15181: ** Compare the string as a command-line option with either one or two
15182: ** initial "-" characters.
15183: */
15184: static int optionMatch(const char *zStr, const char *zOpt){
15185:   if( zStr[0]!='-' ) return 0;
15186:   zStr++;
15187:   if( zStr[0]=='-' ) zStr++;
15188:   return strcmp(zStr, zOpt)==0;
15189: }
15190: 
15191: /*
15192: ** Delete a file.
15193: */
15194: int shellDeleteFile(const char *zFilename){
15195:   int rc;
15196: #ifdef _WIN32
15197:   wchar_t *z = sqlite3_win32_utf8_to_unicode(zFilename);
15198:   rc = _wunlink(z);
15199:   sqlite3_free(z);
15200: #else
15201:   rc = unlink(zFilename);
15202: #endif
15203:   return rc;
15204: }
15205: 
15206: /*
15207: ** Try to delete the temporary file (if there is one) and free the
15208: ** memory used to hold the name of the temp file.
15209: */
15210: static void clearTempFile(ShellState *p){
15211:   if( p->zTempFile==0 ) return;
15212:   if( p->doXdgOpen ) return;
15213:   if( shellDeleteFile(p->zTempFile) ) return;
15214:   sqlite3_free(p->zTempFile);
15215:   p->zTempFile = 0;
15216: }
15217: 
15218: /*
15219: ** Create a new temp file name with the given suffix.
15220: */
15221: static void newTempFile(ShellState *p, const char *zSuffix){
15222:   clearTempFile(p);
15223:   sqlite3_free(p->zTempFile);
15224:   p->zTempFile = 0;
15225:   if( p->db ){
15226:     sqlite3_file_control(p->db, 0, SQLITE_FCNTL_TEMPFILENAME, &p->zTempFile);
15227:   }
15228:   if( p->zTempFile==0 ){
15229:     /* If p->db is an in-memory database then the TEMPFILENAME file-control
15230:     ** will not work and we will need to fallback to guessing */
15231:     char *zTemp;
15232:     sqlite3_uint64 r;
15233:     sqlite3_randomness(sizeof(r), &r);
15234:     zTemp = getenv("TEMP");
15235:     if( zTemp==0 ) zTemp = getenv("TMP");
15236:     if( zTemp==0 ){
15237: #ifdef _WIN32
15238:       zTemp = "\\tmp";
15239: #else
15240:       zTemp = "/tmp";
15241: #endif
15242:     }
15243:     p->zTempFile = sqlite3_mprintf("%s/temp%llx.%s", zTemp, r, zSuffix);
15244:   }else{
15245:     p->zTempFile = sqlite3_mprintf("%z.%s", p->zTempFile, zSuffix);
15246:   }
15247:   if( p->zTempFile==0 ){
15248:     raw_printf(stderr, "out of memory\n");
15249:     exit(1);
15250:   }
15251: }
15252: 
15253: 
15254: /*
15255: ** The implementation of SQL scalar function fkey_collate_clause(), used
15256: ** by the ".lint fkey-indexes" command. This scalar function is always
15257: ** called with four arguments - the parent table name, the parent column name,
15258: ** the child table name and the child column name.
15259: **
15260: **   fkey_collate_clause('parent-tab', 'parent-col', 'child-tab', 'child-col')
15261: **
15262: ** If either of the named tables or columns do not exist, this function
15263: ** returns an empty string. An empty string is also returned if both tables
15264: ** and columns exist but have the same default collation sequence. Or,
15265: ** if both exist but the default collation sequences are different, this
15266: ** function returns the string " COLLATE <parent-collation>", where
15267: ** <parent-collation> is the default collation sequence of the parent column.
15268: */
15269: static void shellFkeyCollateClause(
15270:   sqlite3_context *pCtx,
15271:   int nVal,
15272:   sqlite3_value **apVal
15273: ){
15274:   sqlite3 *db = sqlite3_context_db_handle(pCtx);
15275:   const char *zParent;
15276:   const char *zParentCol;
15277:   const char *zParentSeq;
15278:   const char *zChild;
15279:   const char *zChildCol;
15280:   const char *zChildSeq = 0;  /* Initialize to avoid false-positive warning */
15281:   int rc;
15282: 
15283:   assert( nVal==4 );
15284:   zParent = (const char*)sqlite3_value_text(apVal[0]);
15285:   zParentCol = (const char*)sqlite3_value_text(apVal[1]);
15286:   zChild = (const char*)sqlite3_value_text(apVal[2]);
15287:   zChildCol = (const char*)sqlite3_value_text(apVal[3]);
15288: 
15289:   sqlite3_result_text(pCtx, "", -1, SQLITE_STATIC);
15290:   rc = sqlite3_table_column_metadata(
15291:       db, "main", zParent, zParentCol, 0, &zParentSeq, 0, 0, 0
15292:   );
15293:   if( rc==SQLITE_OK ){
15294:     rc = sqlite3_table_column_metadata(
15295:         db, "main", zChild, zChildCol, 0, &zChildSeq, 0, 0, 0
15296:     );
15297:   }
15298: 
15299:   if( rc==SQLITE_OK && sqlite3_stricmp(zParentSeq, zChildSeq) ){
15300:     char *z = sqlite3_mprintf(" COLLATE %s", zParentSeq);
15301:     sqlite3_result_text(pCtx, z, -1, SQLITE_TRANSIENT);
15302:     sqlite3_free(z);
15303:   }
15304: }
15305: 
15306: 
15307: /*
15308: ** The implementation of dot-command ".lint fkey-indexes".
15309: */
15310: static int lintFkeyIndexes(
15311:   ShellState *pState,             /* Current shell tool state */
15312:   char **azArg,                   /* Array of arguments passed to dot command */
15313:   int nArg                        /* Number of entries in azArg[] */
15314: ){
15315:   sqlite3 *db = pState->db;       /* Database handle to query "main" db of */
15316:   FILE *out = pState->out;        /* Stream to write non-error output to */
15317:   int bVerbose = 0;               /* If -verbose is present */
15318:   int bGroupByParent = 0;         /* If -groupbyparent is present */
15319:   int i;                          /* To iterate through azArg[] */
15320:   const char *zIndent = "";       /* How much to indent CREATE INDEX by */
15321:   int rc;                         /* Return code */
15322:   sqlite3_stmt *pSql = 0;         /* Compiled version of SQL statement below */
15323: 
15324:   /*
15325:   ** This SELECT statement returns one row for each foreign key constraint
15326:   ** in the schema of the main database. The column values are:
15327:   **
15328:   ** 0. The text of an SQL statement similar to:
15329:   **
15330:   **      "EXPLAIN QUERY PLAN SELECT 1 FROM child_table WHERE child_key=?"
15331:   **
15332:   **    This SELECT is similar to the one that the foreign keys implementation
15333:   **    needs to run internally on child tables. If there is an index that can
15334:   **    be used to optimize this query, then it can also be used by the FK
15335:   **    implementation to optimize DELETE or UPDATE statements on the parent
15336:   **    table.
15337:   **
15338:   ** 1. A GLOB pattern suitable for sqlite3_strglob(). If the plan output by
15339:   **    the EXPLAIN QUERY PLAN command matches this pattern, then the schema
15340:   **    contains an index that can be used to optimize the query.
15341:   **
15342:   ** 2. Human readable text that describes the child table and columns. e.g.
15343:   **
15344:   **       "child_table(child_key1, child_key2)"
15345:   **
15346:   ** 3. Human readable text that describes the parent table and columns. e.g.
15347:   **
15348:   **       "parent_table(parent_key1, parent_key2)"
15349:   **
15350:   ** 4. A full CREATE INDEX statement for an index that could be used to
15351:   **    optimize DELETE or UPDATE statements on the parent table. e.g.
15352:   **
15353:   **       "CREATE INDEX child_table_child_key ON child_table(child_key)"
15354:   **
15355:   ** 5. The name of the parent table.
15356:   **
15357:   ** These six values are used by the C logic below to generate the report.
15358:   */
15359:   const char *zSql =
15360:   "SELECT "
15361:     "     'EXPLAIN QUERY PLAN SELECT 1 FROM ' || quote(s.name) || ' WHERE '"
15362:     "  || group_concat(quote(s.name) || '.' || quote(f.[from]) || '=?' "
15363:     "  || fkey_collate_clause("
15364:     "       f.[table], COALESCE(f.[to], p.[name]), s.name, f.[from]),' AND ')"
15365:     ", "
15366:     "     'SEARCH TABLE ' || s.name || ' USING COVERING INDEX*('"
15367:     "  || group_concat('*=?', ' AND ') || ')'"
15368:     ", "
15369:     "     s.name  || '(' || group_concat(f.[from],  ', ') || ')'"
15370:     ", "
15371:     "     f.[table] || '(' || group_concat(COALESCE(f.[to], p.[name])) || ')'"
15372:     ", "
15373:     "     'CREATE INDEX ' || quote(s.name ||'_'|| group_concat(f.[from], '_'))"
15374:     "  || ' ON ' || quote(s.name) || '('"
15375:     "  || group_concat(quote(f.[from]) ||"
15376:     "        fkey_collate_clause("
15377:     "          f.[table], COALESCE(f.[to], p.[name]), s.name, f.[from]), ', ')"
15378:     "  || ');'"
15379:     ", "
15380:     "     f.[table] "
15381:     "FROM sqlite_schema AS s, pragma_foreign_key_list(s.name) AS f "
15382:     "LEFT JOIN pragma_table_info AS p ON (pk-1=seq AND p.arg=f.[table]) "
15383:     "GROUP BY s.name, f.id "
15384:     "ORDER BY (CASE WHEN ? THEN f.[table] ELSE s.name END)"
15385:   ;
15386:   const char *zGlobIPK = "SEARCH TABLE * USING INTEGER PRIMARY KEY (rowid=?)";
15387: 
15388:   for(i=2; i<nArg; i++){
15389:     int n = strlen30(azArg[i]);
15390:     if( n>1 && sqlite3_strnicmp("-verbose", azArg[i], n)==0 ){
15391:       bVerbose = 1;
15392:     }
15393:     else if( n>1 && sqlite3_strnicmp("-groupbyparent", azArg[i], n)==0 ){
15394:       bGroupByParent = 1;
15395:       zIndent = "    ";
15396:     }
15397:     else{
15398:       raw_printf(stderr, "Usage: %s %s ?-verbose? ?-groupbyparent?\n",
15399:           azArg[0], azArg[1]
15400:       );
15401:       return SQLITE_ERROR;
15402:     }
15403:   }
15404: 
15405:   /* Register the fkey_collate_clause() SQL function */
15406:   rc = sqlite3_create_function(db, "fkey_collate_clause", 4, SQLITE_UTF8,
15407:       0, shellFkeyCollateClause, 0, 0
15408:   );
15409: 
15410: 
15411:   if( rc==SQLITE_OK ){
15412:     rc = sqlite3_prepare_v2(db, zSql, -1, &pSql, 0);
15413:   }
15414:   if( rc==SQLITE_OK ){
15415:     sqlite3_bind_int(pSql, 1, bGroupByParent);
15416:   }
15417: 
15418:   if( rc==SQLITE_OK ){
15419:     int rc2;
15420:     char *zPrev = 0;
15421:     while( SQLITE_ROW==sqlite3_step(pSql) ){
15422:       int res = -1;
15423:       sqlite3_stmt *pExplain = 0;
15424:       const char *zEQP = (const char*)sqlite3_column_text(pSql, 0);
15425:       const char *zGlob = (const char*)sqlite3_column_text(pSql, 1);
15426:       const char *zFrom = (const char*)sqlite3_column_text(pSql, 2);
15427:       const char *zTarget = (const char*)sqlite3_column_text(pSql, 3);
15428:       const char *zCI = (const char*)sqlite3_column_text(pSql, 4);
15429:       const char *zParent = (const char*)sqlite3_column_text(pSql, 5);
15430: 
15431:       rc = sqlite3_prepare_v2(db, zEQP, -1, &pExplain, 0);
15432:       if( rc!=SQLITE_OK ) break;
15433:       if( SQLITE_ROW==sqlite3_step(pExplain) ){
15434:         const char *zPlan = (const char*)sqlite3_column_text(pExplain, 3);
15435:         res = (
15436:               0==sqlite3_strglob(zGlob, zPlan)
15437:            || 0==sqlite3_strglob(zGlobIPK, zPlan)
15438:         );
15439:       }
15440:       rc = sqlite3_finalize(pExplain);
15441:       if( rc!=SQLITE_OK ) break;
15442: 
15443:       if( res<0 ){
15444:         raw_printf(stderr, "Error: internal error");
15445:         break;
15446:       }else{
15447:         if( bGroupByParent
15448:         && (bVerbose || res==0)
15449:         && (zPrev==0 || sqlite3_stricmp(zParent, zPrev))
15450:         ){
15451:           raw_printf(out, "-- Parent table %s\n", zParent);
15452:           sqlite3_free(zPrev);
15453:           zPrev = sqlite3_mprintf("%s", zParent);
15454:         }
15455: 
15456:         if( res==0 ){
15457:           raw_printf(out, "%s%s --> %s\n", zIndent, zCI, zTarget);
15458:         }else if( bVerbose ){
15459:           raw_printf(out, "%s/* no extra indexes required for %s -> %s */\n",
15460:               zIndent, zFrom, zTarget
15461:           );
15462:         }
15463:       }
15464:     }
15465:     sqlite3_free(zPrev);
15466: 
15467:     if( rc!=SQLITE_OK ){
15468:       raw_printf(stderr, "%s\n", sqlite3_errmsg(db));
15469:     }
15470: 
15471:     rc2 = sqlite3_finalize(pSql);
15472:     if( rc==SQLITE_OK && rc2!=SQLITE_OK ){
15473:       rc = rc2;
15474:       raw_printf(stderr, "%s\n", sqlite3_errmsg(db));
15475:     }
15476:   }else{
15477:     raw_printf(stderr, "%s\n", sqlite3_errmsg(db));
15478:   }
15479: 
15480:   return rc;
15481: }
15482: 
15483: /*
15484: ** Implementation of ".lint" dot command.
15485: */
15486: static int lintDotCommand(
15487:   ShellState *pState,             /* Current shell tool state */
15488:   char **azArg,                   /* Array of arguments passed to dot command */
15489:   int nArg                        /* Number of entries in azArg[] */
15490: ){
15491:   int n;
15492:   n = (nArg>=2 ? strlen30(azArg[1]) : 0);
15493:   if( n<1 || sqlite3_strnicmp(azArg[1], "fkey-indexes", n) ) goto usage;
15494:   return lintFkeyIndexes(pState, azArg, nArg);
15495: 
15496:  usage:
15497:   raw_printf(stderr, "Usage %s sub-command ?switches...?\n", azArg[0]);
15498:   raw_printf(stderr, "Where sub-commands are:\n");
15499:   raw_printf(stderr, "    fkey-indexes\n");
15500:   return SQLITE_ERROR;
15501: }
15502: 
15503: #if !defined SQLITE_OMIT_VIRTUALTABLE
15504: static void shellPrepare(
15505:   sqlite3 *db,
15506:   int *pRc,
15507:   const char *zSql,
15508:   sqlite3_stmt **ppStmt
15509: ){
15510:   *ppStmt = 0;
15511:   if( *pRc==SQLITE_OK ){
15512:     int rc = sqlite3_prepare_v2(db, zSql, -1, ppStmt, 0);
15513:     if( rc!=SQLITE_OK ){
15514:       raw_printf(stderr, "sql error: %s (%d)\n",
15515:           sqlite3_errmsg(db), sqlite3_errcode(db)
15516:       );
15517:       *pRc = rc;
15518:     }
15519:   }
15520: }
15521: 
15522: /*
15523: ** Create a prepared statement using printf-style arguments for the SQL.
15524: **
15525: ** This routine is could be marked "static".  But it is not always used,
15526: ** depending on compile-time options.  By omitting the "static", we avoid
15527: ** nuisance compiler warnings about "defined but not used".
15528: */
15529: void shellPreparePrintf(
15530:   sqlite3 *db,
15531:   int *pRc,
15532:   sqlite3_stmt **ppStmt,
15533:   const char *zFmt,
15534:   ...
15535: ){
15536:   *ppStmt = 0;
15537:   if( *pRc==SQLITE_OK ){
15538:     va_list ap;
15539:     char *z;
15540:     va_start(ap, zFmt);
15541:     z = sqlite3_vmprintf(zFmt, ap);
15542:     va_end(ap);
15543:     if( z==0 ){
15544:       *pRc = SQLITE_NOMEM;
15545:     }else{
15546:       shellPrepare(db, pRc, z, ppStmt);
15547:       sqlite3_free(z);
15548:     }
15549:   }
15550: }
15551: 
15552: /* Finalize the prepared statement created using shellPreparePrintf().
15553: **
15554: ** This routine is could be marked "static".  But it is not always used,
15555: ** depending on compile-time options.  By omitting the "static", we avoid
15556: ** nuisance compiler warnings about "defined but not used".
15557: */
15558: void shellFinalize(
15559:   int *pRc,
15560:   sqlite3_stmt *pStmt
15561: ){
15562:   if( pStmt ){
15563:     sqlite3 *db = sqlite3_db_handle(pStmt);
15564:     int rc = sqlite3_finalize(pStmt);
15565:     if( *pRc==SQLITE_OK ){
15566:       if( rc!=SQLITE_OK ){
15567:         raw_printf(stderr, "SQL error: %s\n", sqlite3_errmsg(db));
15568:       }
15569:       *pRc = rc;
15570:     }
15571:   }
15572: }
15573: 
15574: /* Reset the prepared statement created using shellPreparePrintf().
15575: **
15576: ** This routine is could be marked "static".  But it is not always used,
15577: ** depending on compile-time options.  By omitting the "static", we avoid
15578: ** nuisance compiler warnings about "defined but not used".
15579: */
15580: void shellReset(
15581:   int *pRc,
15582:   sqlite3_stmt *pStmt
15583: ){
15584:   int rc = sqlite3_reset(pStmt);
15585:   if( *pRc==SQLITE_OK ){
15586:     if( rc!=SQLITE_OK ){
15587:       sqlite3 *db = sqlite3_db_handle(pStmt);
15588:       raw_printf(stderr, "SQL error: %s\n", sqlite3_errmsg(db));
15589:     }
15590:     *pRc = rc;
15591:   }
15592: }
15593: #endif /* !defined SQLITE_OMIT_VIRTUALTABLE */
15594: 
15595: #if !defined(SQLITE_OMIT_VIRTUALTABLE) && defined(SQLITE_HAVE_ZLIB)
15596: /******************************************************************************
15597: ** The ".archive" or ".ar" command.
15598: */
15599: /*
15600: ** Structure representing a single ".ar" command.
15601: */
15602: typedef struct ArCommand ArCommand;
15603: struct ArCommand {
15604:   u8 eCmd;                        /* An AR_CMD_* value */
15605:   u8 bVerbose;                    /* True if --verbose */
15606:   u8 bZip;                        /* True if the archive is a ZIP */
15607:   u8 bDryRun;                     /* True if --dry-run */
15608:   u8 bAppend;                     /* True if --append */
15609:   u8 fromCmdLine;                 /* Run from -A instead of .archive */
15610:   int nArg;                       /* Number of command arguments */
15611:   char *zSrcTable;                /* "sqlar", "zipfile($file)" or "zip" */
15612:   const char *zFile;              /* --file argument, or NULL */
15613:   const char *zDir;               /* --directory argument, or NULL */
15614:   char **azArg;                   /* Array of command arguments */
15615:   ShellState *p;                  /* Shell state */
15616:   sqlite3 *db;                    /* Database containing the archive */
15617: };
15618: 
15619: /*
15620: ** Print a usage message for the .ar command to stderr and return SQLITE_ERROR.
15621: */
15622: static int arUsage(FILE *f){
15623:   showHelp(f,"archive");
15624:   return SQLITE_ERROR;
15625: }
15626: 
15627: /*
15628: ** Print an error message for the .ar command to stderr and return
15629: ** SQLITE_ERROR.
15630: */
15631: static int arErrorMsg(ArCommand *pAr, const char *zFmt, ...){
15632:   va_list ap;
15633:   char *z;
15634:   va_start(ap, zFmt);
15635:   z = sqlite3_vmprintf(zFmt, ap);
15636:   va_end(ap);
15637:   utf8_printf(stderr, "Error: %s\n", z);
15638:   if( pAr->fromCmdLine ){
15639:     utf8_printf(stderr, "Use \"-A\" for more help\n");
15640:   }else{
15641:     utf8_printf(stderr, "Use \".archive --help\" for more help\n");
15642:   }
15643:   sqlite3_free(z);
15644:   return SQLITE_ERROR;
15645: }
15646: 
15647: /*
15648: ** Values for ArCommand.eCmd.
15649: */
15650: #define AR_CMD_CREATE       1
15651: #define AR_CMD_UPDATE       2
15652: #define AR_CMD_INSERT       3
15653: #define AR_CMD_EXTRACT      4
15654: #define AR_CMD_LIST         5
15655: #define AR_CMD_HELP         6
15656: 
15657: /*
15658: ** Other (non-command) switches.
15659: */
15660: #define AR_SWITCH_VERBOSE     7
15661: #define AR_SWITCH_FILE        8
15662: #define AR_SWITCH_DIRECTORY   9
15663: #define AR_SWITCH_APPEND     10
15664: #define AR_SWITCH_DRYRUN     11
15665: 
15666: static int arProcessSwitch(ArCommand *pAr, int eSwitch, const char *zArg){
15667:   switch( eSwitch ){
15668:     case AR_CMD_CREATE:
15669:     case AR_CMD_EXTRACT:
15670:     case AR_CMD_LIST:
15671:     case AR_CMD_UPDATE:
15672:     case AR_CMD_INSERT:
15673:     case AR_CMD_HELP:
15674:       if( pAr->eCmd ){
15675:         return arErrorMsg(pAr, "multiple command options");
15676:       }
15677:       pAr->eCmd = eSwitch;
15678:       break;
15679: 
15680:     case AR_SWITCH_DRYRUN:
15681:       pAr->bDryRun = 1;
15682:       break;
15683:     case AR_SWITCH_VERBOSE:
15684:       pAr->bVerbose = 1;
15685:       break;
15686:     case AR_SWITCH_APPEND:
15687:       pAr->bAppend = 1;
15688:       /* Fall thru into --file */
15689:     case AR_SWITCH_FILE:
15690:       pAr->zFile = zArg;
15691:       break;
15692:     case AR_SWITCH_DIRECTORY:
15693:       pAr->zDir = zArg;
15694:       break;
15695:   }
15696: 
15697:   return SQLITE_OK;
15698: }
15699: 
15700: /*
15701: ** Parse the command line for an ".ar" command. The results are written into
15702: ** structure (*pAr). SQLITE_OK is returned if the command line is parsed
15703: ** successfully, otherwise an error message is written to stderr and
15704: ** SQLITE_ERROR returned.
15705: */
15706: static int arParseCommand(
15707:   char **azArg,                   /* Array of arguments passed to dot command */
15708:   int nArg,                       /* Number of entries in azArg[] */
15709:   ArCommand *pAr                  /* Populate this object */
15710: ){
15711:   struct ArSwitch {
15712:     const char *zLong;
15713:     char cShort;
15714:     u8 eSwitch;
15715:     u8 bArg;
15716:   } aSwitch[] = {
15717:     { "create",    'c', AR_CMD_CREATE,       0 },
15718:     { "extract",   'x', AR_CMD_EXTRACT,      0 },
15719:     { "insert",    'i', AR_CMD_INSERT,       0 },
15720:     { "list",      't', AR_CMD_LIST,         0 },
15721:     { "update",    'u', AR_CMD_UPDATE,       0 },
15722:     { "help",      'h', AR_CMD_HELP,         0 },
15723:     { "verbose",   'v', AR_SWITCH_VERBOSE,   0 },
15724:     { "file",      'f', AR_SWITCH_FILE,      1 },
15725:     { "append",    'a', AR_SWITCH_APPEND,    1 },
15726:     { "directory", 'C', AR_SWITCH_DIRECTORY, 1 },
15727:     { "dryrun",    'n', AR_SWITCH_DRYRUN,    0 },
15728:   };
15729:   int nSwitch = sizeof(aSwitch) / sizeof(struct ArSwitch);
15730:   struct ArSwitch *pEnd = &aSwitch[nSwitch];
15731: 
15732:   if( nArg<=1 ){
15733:     utf8_printf(stderr, "Wrong number of arguments.  Usage:\n");
15734:     return arUsage(stderr);
15735:   }else{
15736:     char *z = azArg[1];
15737:     if( z[0]!='-' ){
15738:       /* Traditional style [tar] invocation */
15739:       int i;
15740:       int iArg = 2;
15741:       for(i=0; z[i]; i++){
15742:         const char *zArg = 0;
15743:         struct ArSwitch *pOpt;
15744:         for(pOpt=&aSwitch[0]; pOpt<pEnd; pOpt++){
15745:           if( z[i]==pOpt->cShort ) break;
15746:         }
15747:         if( pOpt==pEnd ){
15748:           return arErrorMsg(pAr, "unrecognized option: %c", z[i]);
15749:         }
15750:         if( pOpt->bArg ){
15751:           if( iArg>=nArg ){
15752:             return arErrorMsg(pAr, "option requires an argument: %c",z[i]);
15753:           }
15754:           zArg = azArg[iArg++];
15755:         }
15756:         if( arProcessSwitch(pAr, pOpt->eSwitch, zArg) ) return SQLITE_ERROR;
15757:       }
15758:       pAr->nArg = nArg-iArg;
15759:       if( pAr->nArg>0 ){
15760:         pAr->azArg = &azArg[iArg];
15761:       }
15762:     }else{
15763:       /* Non-traditional invocation */
15764:       int iArg;
15765:       for(iArg=1; iArg<nArg; iArg++){
15766:         int n;
15767:         z = azArg[iArg];
15768:         if( z[0]!='-' ){
15769:           /* All remaining command line words are command arguments. */
15770:           pAr->azArg = &azArg[iArg];
15771:           pAr->nArg = nArg-iArg;
15772:           break;
15773:         }
15774:         n = strlen30(z);
15775: 
15776:         if( z[1]!='-' ){
15777:           int i;
15778:           /* One or more short options */
15779:           for(i=1; i<n; i++){
15780:             const char *zArg = 0;
15781:             struct ArSwitch *pOpt;
15782:             for(pOpt=&aSwitch[0]; pOpt<pEnd; pOpt++){
15783:               if( z[i]==pOpt->cShort ) break;
15784:             }
15785:             if( pOpt==pEnd ){
15786:               return arErrorMsg(pAr, "unrecognized option: %c", z[i]);
15787:             }
15788:             if( pOpt->bArg ){
15789:               if( i<(n-1) ){
15790:                 zArg = &z[i+1];
15791:                 i = n;
15792:               }else{
15793:                 if( iArg>=(nArg-1) ){
15794:                   return arErrorMsg(pAr, "option requires an argument: %c",
15795:                                     z[i]);
15796:                 }
15797:                 zArg = azArg[++iArg];
15798:               }
15799:             }
15800:             if( arProcessSwitch(pAr, pOpt->eSwitch, zArg) ) return SQLITE_ERROR;
15801:           }
15802:         }else if( z[2]=='\0' ){
15803:           /* A -- option, indicating that all remaining command line words
15804:           ** are command arguments.  */
15805:           pAr->azArg = &azArg[iArg+1];
15806:           pAr->nArg = nArg-iArg-1;
15807:           break;
15808:         }else{
15809:           /* A long option */
15810:           const char *zArg = 0;             /* Argument for option, if any */
15811:           struct ArSwitch *pMatch = 0;      /* Matching option */
15812:           struct ArSwitch *pOpt;            /* Iterator */
15813:           for(pOpt=&aSwitch[0]; pOpt<pEnd; pOpt++){
15814:             const char *zLong = pOpt->zLong;
15815:             if( (n-2)<=strlen30(zLong) && 0==memcmp(&z[2], zLong, n-2) ){
15816:               if( pMatch ){
15817:                 return arErrorMsg(pAr, "ambiguous option: %s",z);
15818:               }else{
15819:                 pMatch = pOpt;
15820:               }
15821:             }
15822:           }
15823: 
15824:           if( pMatch==0 ){
15825:             return arErrorMsg(pAr, "unrecognized option: %s", z);
15826:           }
15827:           if( pMatch->bArg ){
15828:             if( iArg>=(nArg-1) ){
15829:               return arErrorMsg(pAr, "option requires an argument: %s", z);
15830:             }
15831:             zArg = azArg[++iArg];
15832:           }
15833:           if( arProcessSwitch(pAr, pMatch->eSwitch, zArg) ) return SQLITE_ERROR;
15834:         }
15835:       }
15836:     }
15837:   }
15838: 
15839:   return SQLITE_OK;
15840: }
15841: 
15842: /*
15843: ** This function assumes that all arguments within the ArCommand.azArg[]
15844: ** array refer to archive members, as for the --extract or --list commands.
15845: ** It checks that each of them are present. If any specified file is not
15846: ** present in the archive, an error is printed to stderr and an error
15847: ** code returned. Otherwise, if all specified arguments are present in
15848: ** the archive, SQLITE_OK is returned.
15849: **
15850: ** This function strips any trailing '/' characters from each argument.
15851: ** This is consistent with the way the [tar] command seems to work on
15852: ** Linux.
15853: */
15854: static int arCheckEntries(ArCommand *pAr){
15855:   int rc = SQLITE_OK;
15856:   if( pAr->nArg ){
15857:     int i, j;
15858:     sqlite3_stmt *pTest = 0;
15859: 
15860:     shellPreparePrintf(pAr->db, &rc, &pTest,
15861:         "SELECT name FROM %s WHERE name=$name",
15862:         pAr->zSrcTable
15863:     );
15864:     j = sqlite3_bind_parameter_index(pTest, "$name");
15865:     for(i=0; i<pAr->nArg && rc==SQLITE_OK; i++){
15866:       char *z = pAr->azArg[i];
15867:       int n = strlen30(z);
15868:       int bOk = 0;
15869:       while( n>0 && z[n-1]=='/' ) n--;
15870:       z[n] = '\0';
15871:       sqlite3_bind_text(pTest, j, z, -1, SQLITE_STATIC);
15872:       if( SQLITE_ROW==sqlite3_step(pTest) ){
15873:         bOk = 1;
15874:       }
15875:       shellReset(&rc, pTest);
15876:       if( rc==SQLITE_OK && bOk==0 ){
15877:         utf8_printf(stderr, "not found in archive: %s\n", z);
15878:         rc = SQLITE_ERROR;
15879:       }
15880:     }
15881:     shellFinalize(&rc, pTest);
15882:   }
15883:   return rc;
15884: }
15885: 
15886: /*
15887: ** Format a WHERE clause that can be used against the "sqlar" table to
15888: ** identify all archive members that match the command arguments held
15889: ** in (*pAr). Leave this WHERE clause in (*pzWhere) before returning.
15890: ** The caller is responsible for eventually calling sqlite3_free() on
15891: ** any non-NULL (*pzWhere) value.
15892: */
15893: static void arWhereClause(
15894:   int *pRc,
15895:   ArCommand *pAr,
15896:   char **pzWhere                  /* OUT: New WHERE clause */
15897: ){
15898:   char *zWhere = 0;
15899:   if( *pRc==SQLITE_OK ){
15900:     if( pAr->nArg==0 ){
15901:       zWhere = sqlite3_mprintf("1");
15902:     }else{
15903:       int i;
15904:       const char *zSep = "";
15905:       for(i=0; i<pAr->nArg; i++){
15906:         const char *z = pAr->azArg[i];
15907:         zWhere = sqlite3_mprintf(
15908:           "%z%s name = '%q' OR substr(name,1,%d) = '%q/'",
15909:           zWhere, zSep, z, strlen30(z)+1, z
15910:         );
15911:         if( zWhere==0 ){
15912:           *pRc = SQLITE_NOMEM;
15913:           break;
15914:         }
15915:         zSep = " OR ";
15916:       }
15917:     }
15918:   }
15919:   *pzWhere = zWhere;
15920: }
15921: 
15922: /*
15923: ** Implementation of .ar "lisT" command.
15924: */
15925: static int arListCommand(ArCommand *pAr){
15926:   const char *zSql = "SELECT %s FROM %s WHERE %s";
15927:   const char *azCols[] = {
15928:     "name",
15929:     "lsmode(mode), sz, datetime(mtime, 'unixepoch'), name"
15930:   };
15931: 
15932:   char *zWhere = 0;
15933:   sqlite3_stmt *pSql = 0;
15934:   int rc;
15935: 
15936:   rc = arCheckEntries(pAr);
15937:   arWhereClause(&rc, pAr, &zWhere);
15938: 
15939:   shellPreparePrintf(pAr->db, &rc, &pSql, zSql, azCols[pAr->bVerbose],
15940:                      pAr->zSrcTable, zWhere);
15941:   if( pAr->bDryRun ){
15942:     utf8_printf(pAr->p->out, "%s\n", sqlite3_sql(pSql));
15943:   }else{
15944:     while( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pSql) ){
15945:       if( pAr->bVerbose ){
15946:         utf8_printf(pAr->p->out, "%s % 10d  %s  %s\n",
15947:             sqlite3_column_text(pSql, 0),
15948:             sqlite3_column_int(pSql, 1),
15949:             sqlite3_column_text(pSql, 2),
15950:             sqlite3_column_text(pSql, 3)
15951:         );
15952:       }else{
15953:         utf8_printf(pAr->p->out, "%s\n", sqlite3_column_text(pSql, 0));
15954:       }
15955:     }
15956:   }
15957:   shellFinalize(&rc, pSql);
15958:   sqlite3_free(zWhere);
15959:   return rc;
15960: }
15961: 
15962: 
15963: /*
15964: ** Implementation of .ar "eXtract" command.
15965: */
15966: static int arExtractCommand(ArCommand *pAr){
15967:   const char *zSql1 =
15968:     "SELECT "
15969:     " ($dir || name),"
15970:     " writefile(($dir || name), %s, mode, mtime) "
15971:     "FROM %s WHERE (%s) AND (data IS NULL OR $dirOnly = 0)"
15972:     " AND name NOT GLOB '*..[/\\]*'";
15973: 
15974:   const char *azExtraArg[] = {
15975:     "sqlar_uncompress(data, sz)",
15976:     "data"
15977:   };
15978: 
15979:   sqlite3_stmt *pSql = 0;
15980:   int rc = SQLITE_OK;
15981:   char *zDir = 0;
15982:   char *zWhere = 0;
15983:   int i, j;
15984: 
15985:   /* If arguments are specified, check that they actually exist within
15986:   ** the archive before proceeding. And formulate a WHERE clause to
15987:   ** match them.  */
15988:   rc = arCheckEntries(pAr);
15989:   arWhereClause(&rc, pAr, &zWhere);
15990: 
15991:   if( rc==SQLITE_OK ){
15992:     if( pAr->zDir ){
15993:       zDir = sqlite3_mprintf("%s/", pAr->zDir);
15994:     }else{
15995:       zDir = sqlite3_mprintf("");
15996:     }
15997:     if( zDir==0 ) rc = SQLITE_NOMEM;
15998:   }
15999: 
16000:   shellPreparePrintf(pAr->db, &rc, &pSql, zSql1,
16001:       azExtraArg[pAr->bZip], pAr->zSrcTable, zWhere
16002:   );
16003: 
16004:   if( rc==SQLITE_OK ){
16005:     j = sqlite3_bind_parameter_index(pSql, "$dir");
16006:     sqlite3_bind_text(pSql, j, zDir, -1, SQLITE_STATIC);
16007: 
16008:     /* Run the SELECT statement twice. The first time, writefile() is called
16009:     ** for all archive members that should be extracted. The second time,
16010:     ** only for the directories. This is because the timestamps for
16011:     ** extracted directories must be reset after they are populated (as
16012:     ** populating them changes the timestamp).  */
16013:     for(i=0; i<2; i++){
16014:       j = sqlite3_bind_parameter_index(pSql, "$dirOnly");
16015:       sqlite3_bind_int(pSql, j, i);
16016:       if( pAr->bDryRun ){
16017:         utf8_printf(pAr->p->out, "%s\n", sqlite3_sql(pSql));
16018:       }else{
16019:         while( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pSql) ){
16020:           if( i==0 && pAr->bVerbose ){
16021:             utf8_printf(pAr->p->out, "%s\n", sqlite3_column_text(pSql, 0));
16022:           }
16023:         }
16024:       }
16025:       shellReset(&rc, pSql);
16026:     }
16027:     shellFinalize(&rc, pSql);
16028:   }
16029: 
16030:   sqlite3_free(zDir);
16031:   sqlite3_free(zWhere);
16032:   return rc;
16033: }
16034: 
16035: /*
16036: ** Run the SQL statement in zSql.  Or if doing a --dryrun, merely print it out.
16037: */
16038: static int arExecSql(ArCommand *pAr, const char *zSql){
16039:   int rc;
16040:   if( pAr->bDryRun ){
16041:     utf8_printf(pAr->p->out, "%s\n", zSql);
16042:     rc = SQLITE_OK;
16043:   }else{
16044:     char *zErr = 0;
16045:     rc = sqlite3_exec(pAr->db, zSql, 0, 0, &zErr);
16046:     if( zErr ){
16047:       utf8_printf(stdout, "ERROR: %s\n", zErr);
16048:       sqlite3_free(zErr);
16049:     }
16050:   }
16051:   return rc;
16052: }
16053: 
16054: 
16055: /*
16056: ** Implementation of .ar "create", "insert", and "update" commands.
16057: **
16058: **     create    ->     Create a new SQL archive
16059: **     insert    ->     Insert or reinsert all files listed
16060: **     update    ->     Insert files that have changed or that were not
16061: **                      previously in the archive
16062: **
16063: ** Create the "sqlar" table in the database if it does not already exist.
16064: ** Then add each file in the azFile[] array to the archive. Directories
16065: ** are added recursively. If argument bVerbose is non-zero, a message is
16066: ** printed on stdout for each file archived.
16067: **
16068: ** The create command is the same as update, except that it drops
16069: ** any existing "sqlar" table before beginning.  The "insert" command
16070: ** always overwrites every file named on the command-line, where as
16071: ** "update" only overwrites if the size or mtime or mode has changed.
16072: */
16073: static int arCreateOrUpdateCommand(
16074:   ArCommand *pAr,                 /* Command arguments and options */
16075:   int bUpdate,                    /* true for a --create. */
16076:   int bOnlyIfChanged              /* Only update if file has changed */
16077: ){
16078:   const char *zCreate =
16079:       "CREATE TABLE IF NOT EXISTS sqlar(\n"
16080:       "  name TEXT PRIMARY KEY,  -- name of the file\n"
16081:       "  mode INT,               -- access permissions\n"
16082:       "  mtime INT,              -- last modification time\n"
16083:       "  sz INT,                 -- original file size\n"
16084:       "  data BLOB               -- compressed content\n"
16085:       ")";
16086:   const char *zDrop = "DROP TABLE IF EXISTS sqlar";
16087:   const char *zInsertFmt[2] = {
16088:      "REPLACE INTO %s(name,mode,mtime,sz,data)\n"
16089:      "  SELECT\n"
16090:      "    %s,\n"
16091:      "    mode,\n"
16092:      "    mtime,\n"
16093:      "    CASE substr(lsmode(mode),1,1)\n"
16094:      "      WHEN '-' THEN length(data)\n"
16095:      "      WHEN 'd' THEN 0\n"
16096:      "      ELSE -1 END,\n"
16097:      "    sqlar_compress(data)\n"
16098:      "  FROM fsdir(%Q,%Q) AS disk\n"
16099:      "  WHERE lsmode(mode) NOT LIKE '?%%'%s;"
16100:      ,
16101:      "REPLACE INTO %s(name,mode,mtime,data)\n"
16102:      "  SELECT\n"
16103:      "    %s,\n"
16104:      "    mode,\n"
16105:      "    mtime,\n"
16106:      "    data\n"
16107:      "  FROM fsdir(%Q,%Q) AS disk\n"
16108:      "  WHERE lsmode(mode) NOT LIKE '?%%'%s;"
16109:   };
16110:   int i;                          /* For iterating through azFile[] */
16111:   int rc;                         /* Return code */
16112:   const char *zTab = 0;           /* SQL table into which to insert */
16113:   char *zSql;
16114:   char zTemp[50];
16115:   char *zExists = 0;
16116: 
16117:   arExecSql(pAr, "PRAGMA page_size=512");
16118:   rc = arExecSql(pAr, "SAVEPOINT ar;");
16119:   if( rc!=SQLITE_OK ) return rc;
16120:   zTemp[0] = 0;
16121:   if( pAr->bZip ){
16122:     /* Initialize the zipfile virtual table, if necessary */
16123:     if( pAr->zFile ){
16124:       sqlite3_uint64 r;
16125:       sqlite3_randomness(sizeof(r),&r);
16126:       sqlite3_snprintf(sizeof(zTemp),zTemp,"zip%016llx",r);
16127:       zTab = zTemp;
16128:       zSql = sqlite3_mprintf(
16129:          "CREATE VIRTUAL TABLE temp.%s USING zipfile(%Q)",
16130:          zTab, pAr->zFile
16131:       );
16132:       rc = arExecSql(pAr, zSql);
16133:       sqlite3_free(zSql);
16134:     }else{
16135:       zTab = "zip";
16136:     }
16137:   }else{
16138:     /* Initialize the table for an SQLAR */
16139:     zTab = "sqlar";
16140:     if( bUpdate==0 ){
16141:       rc = arExecSql(pAr, zDrop);
16142:       if( rc!=SQLITE_OK ) goto end_ar_transaction;
16143:     }
16144:     rc = arExecSql(pAr, zCreate);
16145:   }
16146:   if( bOnlyIfChanged ){
16147:     zExists = sqlite3_mprintf(
16148:       " AND NOT EXISTS("
16149:           "SELECT 1 FROM %s AS mem"
16150:           " WHERE mem.name=disk.name"
16151:           " AND mem.mtime=disk.mtime"
16152:           " AND mem.mode=disk.mode)", zTab);
16153:   }else{
16154:     zExists = sqlite3_mprintf("");
16155:   }
16156:   if( zExists==0 ) rc = SQLITE_NOMEM;
16157:   for(i=0; i<pAr->nArg && rc==SQLITE_OK; i++){
16158:     char *zSql2 = sqlite3_mprintf(zInsertFmt[pAr->bZip], zTab,
16159:         pAr->bVerbose ? "shell_putsnl(name)" : "name",
16160:         pAr->azArg[i], pAr->zDir, zExists);
16161:     rc = arExecSql(pAr, zSql2);
16162:     sqlite3_free(zSql2);
16163:   }
16164: end_ar_transaction:
16165:   if( rc!=SQLITE_OK ){
16166:     sqlite3_exec(pAr->db, "ROLLBACK TO ar; RELEASE ar;", 0, 0, 0);
16167:   }else{
16168:     rc = arExecSql(pAr, "RELEASE ar;");
16169:     if( pAr->bZip && pAr->zFile ){
16170:       zSql = sqlite3_mprintf("DROP TABLE %s", zTemp);
16171:       arExecSql(pAr, zSql);
16172:       sqlite3_free(zSql);
16173:     }
16174:   }
16175:   sqlite3_free(zExists);
16176:   return rc;
16177: }
16178: 
16179: /*
16180: ** Implementation of ".ar" dot command.
16181: */
16182: static int arDotCommand(
16183:   ShellState *pState,          /* Current shell tool state */
16184:   int fromCmdLine,             /* True if -A command-line option, not .ar cmd */
16185:   char **azArg,                /* Array of arguments passed to dot command */
16186:   int nArg                     /* Number of entries in azArg[] */
16187: ){
16188:   ArCommand cmd;
16189:   int rc;
16190:   memset(&cmd, 0, sizeof(cmd));
16191:   cmd.fromCmdLine = fromCmdLine;
16192:   rc = arParseCommand(azArg, nArg, &cmd);
16193:   if( rc==SQLITE_OK ){
16194:     int eDbType = SHELL_OPEN_UNSPEC;
16195:     cmd.p = pState;
16196:     cmd.db = pState->db;
16197:     if( cmd.zFile ){
16198:       eDbType = deduceDatabaseType(cmd.zFile, 1);
16199:     }else{
16200:       eDbType = pState->openMode;
16201:     }
16202:     if( eDbType==SHELL_OPEN_ZIPFILE ){
16203:       if( cmd.eCmd==AR_CMD_EXTRACT || cmd.eCmd==AR_CMD_LIST ){
16204:         if( cmd.zFile==0 ){
16205:           cmd.zSrcTable = sqlite3_mprintf("zip");
16206:         }else{
16207:           cmd.zSrcTable = sqlite3_mprintf("zipfile(%Q)", cmd.zFile);
16208:         }
16209:       }
16210:       cmd.bZip = 1;
16211:     }else if( cmd.zFile ){
16212:       int flags;
16213:       if( cmd.bAppend ) eDbType = SHELL_OPEN_APPENDVFS;
16214:       if( cmd.eCmd==AR_CMD_CREATE || cmd.eCmd==AR_CMD_INSERT
16215:            || cmd.eCmd==AR_CMD_UPDATE ){
16216:         flags = SQLITE_OPEN_READWRITE|SQLITE_OPEN_CREATE;
16217:       }else{
16218:         flags = SQLITE_OPEN_READONLY;
16219:       }
16220:       cmd.db = 0;
16221:       if( cmd.bDryRun ){
16222:         utf8_printf(pState->out, "-- open database '%s'%s\n", cmd.zFile,
16223:              eDbType==SHELL_OPEN_APPENDVFS ? " using 'apndvfs'" : "");
16224:       }
16225:       rc = sqlite3_open_v2(cmd.zFile, &cmd.db, flags,
16226:              eDbType==SHELL_OPEN_APPENDVFS ? "apndvfs" : 0);
16227:       if( rc!=SQLITE_OK ){
16228:         utf8_printf(stderr, "cannot open file: %s (%s)\n",
16229:             cmd.zFile, sqlite3_errmsg(cmd.db)
16230:         );
16231:         goto end_ar_command;
16232:       }
16233:       sqlite3_fileio_init(cmd.db, 0, 0);
16234:       sqlite3_sqlar_init(cmd.db, 0, 0);
16235:       sqlite3_create_function(cmd.db, "shell_putsnl", 1, SQLITE_UTF8, cmd.p,
16236:                               shellPutsFunc, 0, 0);
16237: 
16238:     }
16239:     if( cmd.zSrcTable==0 && cmd.bZip==0 && cmd.eCmd!=AR_CMD_HELP ){
16240:       if( cmd.eCmd!=AR_CMD_CREATE
16241:        && sqlite3_table_column_metadata(cmd.db,0,"sqlar","name",0,0,0,0,0)
16242:       ){
16243:         utf8_printf(stderr, "database does not contain an 'sqlar' table\n");
16244:         rc = SQLITE_ERROR;
16245:         goto end_ar_command;
16246:       }
16247:       cmd.zSrcTable = sqlite3_mprintf("sqlar");
16248:     }
16249: 
16250:     switch( cmd.eCmd ){
16251:       case AR_CMD_CREATE:
16252:         rc = arCreateOrUpdateCommand(&cmd, 0, 0);
16253:         break;
16254: 
16255:       case AR_CMD_EXTRACT:
16256:         rc = arExtractCommand(&cmd);
16257:         break;
16258: 
16259:       case AR_CMD_LIST:
16260:         rc = arListCommand(&cmd);
16261:         break;
16262: 
16263:       case AR_CMD_HELP:
16264:         arUsage(pState->out);
16265:         break;
16266: 
16267:       case AR_CMD_INSERT:
16268:         rc = arCreateOrUpdateCommand(&cmd, 1, 0);
16269:         break;
16270: 
16271:       default:
16272:         assert( cmd.eCmd==AR_CMD_UPDATE );
16273:         rc = arCreateOrUpdateCommand(&cmd, 1, 1);
16274:         break;
16275:     }
16276:   }
16277: end_ar_command:
16278:   if( cmd.db!=pState->db ){
16279:     close_db(cmd.db);
16280:   }
16281:   sqlite3_free(cmd.zSrcTable);
16282: 
16283:   return rc;
16284: }
16285: /* End of the ".archive" or ".ar" command logic
16286: *******************************************************************************/
16287: #endif /* !defined(SQLITE_OMIT_VIRTUALTABLE) && defined(SQLITE_HAVE_ZLIB) */
16288: 
16289: #if !defined(SQLITE_OMIT_VIRTUALTABLE) && defined(SQLITE_ENABLE_DBPAGE_VTAB)
16290: /*
16291: ** If (*pRc) is not SQLITE_OK when this function is called, it is a no-op.
16292: ** Otherwise, the SQL statement or statements in zSql are executed using
16293: ** database connection db and the error code written to *pRc before
16294: ** this function returns.
16295: */
16296: static void shellExec(sqlite3 *db, int *pRc, const char *zSql){
16297:   int rc = *pRc;
16298:   if( rc==SQLITE_OK ){
16299:     char *zErr = 0;
16300:     rc = sqlite3_exec(db, zSql, 0, 0, &zErr);
16301:     if( rc!=SQLITE_OK ){
16302:       raw_printf(stderr, "SQL error: %s\n", zErr);
16303:     }
16304:     *pRc = rc;
16305:   }
16306: }
16307: 
16308: /*
16309: ** Like shellExec(), except that zFmt is a printf() style format string.
16310: */
16311: static void shellExecPrintf(sqlite3 *db, int *pRc, const char *zFmt, ...){
16312:   char *z = 0;
16313:   if( *pRc==SQLITE_OK ){
16314:     va_list ap;
16315:     va_start(ap, zFmt);
16316:     z = sqlite3_vmprintf(zFmt, ap);
16317:     va_end(ap);
16318:     if( z==0 ){
16319:       *pRc = SQLITE_NOMEM;
16320:     }else{
16321:       shellExec(db, pRc, z);
16322:     }
16323:     sqlite3_free(z);
16324:   }
16325: }
16326: 
16327: /*
16328: ** If *pRc is not SQLITE_OK when this function is called, it is a no-op.
16329: ** Otherwise, an attempt is made to allocate, zero and return a pointer
16330: ** to a buffer nByte bytes in size. If an OOM error occurs, *pRc is set
16331: ** to SQLITE_NOMEM and NULL returned.
16332: */
16333: static void *shellMalloc(int *pRc, sqlite3_int64 nByte){
16334:   void *pRet = 0;
16335:   if( *pRc==SQLITE_OK ){
16336:     pRet = sqlite3_malloc64(nByte);
16337:     if( pRet==0 ){
16338:       *pRc = SQLITE_NOMEM;
16339:     }else{
16340:       memset(pRet, 0, nByte);
16341:     }
16342:   }
16343:   return pRet;
16344: }
16345: 
16346: /*
16347: ** If *pRc is not SQLITE_OK when this function is called, it is a no-op.
16348: ** Otherwise, zFmt is treated as a printf() style string. The result of
16349: ** formatting it along with any trailing arguments is written into a
16350: ** buffer obtained from sqlite3_malloc(), and pointer to which is returned.
16351: ** It is the responsibility of the caller to eventually free this buffer
16352: ** using a call to sqlite3_free().
16353: **
16354: ** If an OOM error occurs, (*pRc) is set to SQLITE_NOMEM and a NULL
16355: ** pointer returned.
16356: */
16357: static char *shellMPrintf(int *pRc, const char *zFmt, ...){
16358:   char *z = 0;
16359:   if( *pRc==SQLITE_OK ){
16360:     va_list ap;
16361:     va_start(ap, zFmt);
16362:     z = sqlite3_vmprintf(zFmt, ap);
16363:     va_end(ap);
16364:     if( z==0 ){
16365:       *pRc = SQLITE_NOMEM;
16366:     }
16367:   }
16368:   return z;
16369: }
16370: 
16371: /*
16372: ** When running the ".recover" command, each output table, and the special
16373: ** orphaned row table if it is required, is represented by an instance
16374: ** of the following struct.
16375: */
16376: typedef struct RecoverTable RecoverTable;
16377: struct RecoverTable {
16378:   char *zQuoted;                  /* Quoted version of table name */
16379:   int nCol;                       /* Number of columns in table */
16380:   char **azlCol;                  /* Array of column lists */
16381:   int iPk;                        /* Index of IPK column */
16382: };
16383: 
16384: /*
16385: ** Free a RecoverTable object allocated by recoverFindTable() or
16386: ** recoverOrphanTable().
16387: */
16388: static void recoverFreeTable(RecoverTable *pTab){
16389:   if( pTab ){
16390:     sqlite3_free(pTab->zQuoted);
16391:     if( pTab->azlCol ){
16392:       int i;
16393:       for(i=0; i<=pTab->nCol; i++){
16394:         sqlite3_free(pTab->azlCol[i]);
16395:       }
16396:       sqlite3_free(pTab->azlCol);
16397:     }
16398:     sqlite3_free(pTab);
16399:   }
16400: }
16401: 
16402: /*
16403: ** This function is a no-op if (*pRc) is not SQLITE_OK when it is called.
16404: ** Otherwise, it allocates and returns a RecoverTable object based on the
16405: ** final four arguments passed to this function. It is the responsibility
16406: ** of the caller to eventually free the returned object using
16407: ** recoverFreeTable().
16408: */
16409: static RecoverTable *recoverNewTable(
16410:   int *pRc,                       /* IN/OUT: Error code */
16411:   const char *zName,              /* Name of table */
16412:   const char *zSql,               /* CREATE TABLE statement */
16413:   int bIntkey,
16414:   int nCol
16415: ){
16416:   sqlite3 *dbtmp = 0;             /* sqlite3 handle for testing CREATE TABLE */
16417:   int rc = *pRc;
16418:   RecoverTable *pTab = 0;
16419: 
16420:   pTab = (RecoverTable*)shellMalloc(&rc, sizeof(RecoverTable));
16421:   if( rc==SQLITE_OK ){
16422:     int nSqlCol = 0;
16423:     int bSqlIntkey = 0;
16424:     sqlite3_stmt *pStmt = 0;
16425: 
16426:     rc = sqlite3_open("", &dbtmp);
16427:     if( rc==SQLITE_OK ){
16428:       sqlite3_create_function(dbtmp, "shell_idquote", 1, SQLITE_UTF8, 0,
16429:                               shellIdQuote, 0, 0);
16430:     }
16431:     if( rc==SQLITE_OK ){
16432:       rc = sqlite3_exec(dbtmp, "PRAGMA writable_schema = on", 0, 0, 0);
16433:     }
16434:     if( rc==SQLITE_OK ){
16435:       rc = sqlite3_exec(dbtmp, zSql, 0, 0, 0);
16436:       if( rc==SQLITE_ERROR ){
16437:         rc = SQLITE_OK;
16438:         goto finished;
16439:       }
16440:     }
16441:     shellPreparePrintf(dbtmp, &rc, &pStmt,
16442:         "SELECT count(*) FROM pragma_table_info(%Q)", zName
16443:     );
16444:     if( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pStmt) ){
16445:       nSqlCol = sqlite3_column_int(pStmt, 0);
16446:     }
16447:     shellFinalize(&rc, pStmt);
16448: 
16449:     if( rc!=SQLITE_OK || nSqlCol<nCol ){
16450:       goto finished;
16451:     }
16452: 
16453:     shellPreparePrintf(dbtmp, &rc, &pStmt,
16454:       "SELECT ("
16455:       "  SELECT substr(data,1,1)==X'0D' FROM sqlite_dbpage WHERE pgno=rootpage"
16456:       ") FROM sqlite_schema WHERE name = %Q", zName
16457:     );
16458:     if( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pStmt) ){
16459:       bSqlIntkey = sqlite3_column_int(pStmt, 0);
16460:     }
16461:     shellFinalize(&rc, pStmt);
16462: 
16463:     if( bIntkey==bSqlIntkey ){
16464:       int i;
16465:       const char *zPk = "_rowid_";
16466:       sqlite3_stmt *pPkFinder = 0;
16467: 
16468:       /* If this is an intkey table and there is an INTEGER PRIMARY KEY,
16469:       ** set zPk to the name of the PK column, and pTab->iPk to the index
16470:       ** of the column, where columns are 0-numbered from left to right.
16471:       ** Or, if this is a WITHOUT ROWID table or if there is no IPK column,
16472:       ** leave zPk as "_rowid_" and pTab->iPk at -2.  */
16473:       pTab->iPk = -2;
16474:       if( bIntkey ){
16475:         shellPreparePrintf(dbtmp, &rc, &pPkFinder,
16476:           "SELECT cid, name FROM pragma_table_info(%Q) "
16477:           "  WHERE pk=1 AND type='integer' COLLATE nocase"
16478:           "  AND NOT EXISTS (SELECT cid FROM pragma_table_info(%Q) WHERE pk=2)"
16479:           , zName, zName
16480:         );
16481:         if( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pPkFinder) ){
16482:           pTab->iPk = sqlite3_column_int(pPkFinder, 0);
16483:           zPk = (const char*)sqlite3_column_text(pPkFinder, 1);
16484:         }
16485:       }
16486: 
16487:       pTab->zQuoted = shellMPrintf(&rc, "\"%w\"", zName);
16488:       pTab->azlCol = (char**)shellMalloc(&rc, sizeof(char*) * (nSqlCol+1));
16489:       pTab->nCol = nSqlCol;
16490: 
16491:       if( bIntkey ){
16492:         pTab->azlCol[0] = shellMPrintf(&rc, "\"%w\"", zPk);
16493:       }else{
16494:         pTab->azlCol[0] = shellMPrintf(&rc, "");
16495:       }
16496:       i = 1;
16497:       shellPreparePrintf(dbtmp, &rc, &pStmt,
16498:           "SELECT %Q || group_concat(shell_idquote(name), ', ') "
16499:           "  FILTER (WHERE cid!=%d) OVER (ORDER BY %s cid) "
16500:           "FROM pragma_table_info(%Q)",
16501:           bIntkey ? ", " : "", pTab->iPk,
16502:           bIntkey ? "" : "(CASE WHEN pk=0 THEN 1000000 ELSE pk END), ",
16503:           zName
16504:       );
16505:       while( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pStmt) ){
16506:         const char *zText = (const char*)sqlite3_column_text(pStmt, 0);
16507:         pTab->azlCol[i] = shellMPrintf(&rc, "%s%s", pTab->azlCol[0], zText);
16508:         i++;
16509:       }
16510:       shellFinalize(&rc, pStmt);
16511: 
16512:       shellFinalize(&rc, pPkFinder);
16513:     }
16514:   }
16515: 
16516:  finished:
16517:   sqlite3_close(dbtmp);
16518:   *pRc = rc;
16519:   if( rc!=SQLITE_OK || (pTab && pTab->zQuoted==0) ){
16520:     recoverFreeTable(pTab);
16521:     pTab = 0;
16522:   }
16523:   return pTab;
16524: }
16525: 
16526: /*
16527: ** This function is called to search the schema recovered from the
16528: ** sqlite_schema table of the (possibly) corrupt database as part
16529: ** of a ".recover" command. Specifically, for a table with root page
16530: ** iRoot and at least nCol columns. Additionally, if bIntkey is 0, the
16531: ** table must be a WITHOUT ROWID table, or if non-zero, not one of
16532: ** those.
16533: **
16534: ** If a table is found, a (RecoverTable*) object is returned. Or, if
16535: ** no such table is found, but bIntkey is false and iRoot is the
16536: ** root page of an index in the recovered schema, then (*pbNoop) is
16537: ** set to true and NULL returned. Or, if there is no such table or
16538: ** index, NULL is returned and (*pbNoop) set to 0, indicating that
16539: ** the caller should write data to the orphans table.
16540: */
16541: static RecoverTable *recoverFindTable(
16542:   ShellState *pState,             /* Shell state object */
16543:   int *pRc,                       /* IN/OUT: Error code */
16544:   int iRoot,                      /* Root page of table */
16545:   int bIntkey,                    /* True for an intkey table */
16546:   int nCol,                       /* Number of columns in table */
16547:   int *pbNoop                     /* OUT: True if iRoot is root of index */
16548: ){
16549:   sqlite3_stmt *pStmt = 0;
16550:   RecoverTable *pRet = 0;
16551:   int bNoop = 0;
16552:   const char *zSql = 0;
16553:   const char *zName = 0;
16554: 
16555:   /* Search the recovered schema for an object with root page iRoot. */
16556:   shellPreparePrintf(pState->db, pRc, &pStmt,
16557:       "SELECT type, name, sql FROM recovery.schema WHERE rootpage=%d", iRoot
16558:   );
16559:   while( *pRc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pStmt) ){
16560:     const char *zType = (const char*)sqlite3_column_text(pStmt, 0);
16561:     if( bIntkey==0 && sqlite3_stricmp(zType, "index")==0 ){
16562:       bNoop = 1;
16563:       break;
16564:     }
16565:     if( sqlite3_stricmp(zType, "table")==0 ){
16566:       zName = (const char*)sqlite3_column_text(pStmt, 1);
16567:       zSql = (const char*)sqlite3_column_text(pStmt, 2);
16568:       pRet = recoverNewTable(pRc, zName, zSql, bIntkey, nCol);
16569:       break;
16570:     }
16571:   }
16572: 
16573:   shellFinalize(pRc, pStmt);
16574:   *pbNoop = bNoop;
16575:   return pRet;
16576: }
16577: 
16578: /*
16579: ** Return a RecoverTable object representing the orphans table.
16580: */
16581: static RecoverTable *recoverOrphanTable(
16582:   ShellState *pState,             /* Shell state object */
16583:   int *pRc,                       /* IN/OUT: Error code */
16584:   const char *zLostAndFound,      /* Base name for orphans table */
16585:   int nCol                        /* Number of user data columns */
16586: ){
16587:   RecoverTable *pTab = 0;
16588:   if( nCol>=0 && *pRc==SQLITE_OK ){
16589:     int i;
16590: 
16591:     /* This block determines the name of the orphan table. The prefered
16592:     ** name is zLostAndFound. But if that clashes with another name
16593:     ** in the recovered schema, try zLostAndFound_0, zLostAndFound_1
16594:     ** and so on until a non-clashing name is found.  */
16595:     int iTab = 0;
16596:     char *zTab = shellMPrintf(pRc, "%s", zLostAndFound);
16597:     sqlite3_stmt *pTest = 0;
16598:     shellPrepare(pState->db, pRc,
16599:         "SELECT 1 FROM recovery.schema WHERE name=?", &pTest
16600:     );
16601:     if( pTest ) sqlite3_bind_text(pTest, 1, zTab, -1, SQLITE_TRANSIENT);
16602:     while( *pRc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pTest) ){
16603:       shellReset(pRc, pTest);
16604:       sqlite3_free(zTab);
16605:       zTab = shellMPrintf(pRc, "%s_%d", zLostAndFound, iTab++);
16606:       sqlite3_bind_text(pTest, 1, zTab, -1, SQLITE_TRANSIENT);
16607:     }
16608:     shellFinalize(pRc, pTest);
16609: 
16610:     pTab = (RecoverTable*)shellMalloc(pRc, sizeof(RecoverTable));
16611:     if( pTab ){
16612:       pTab->zQuoted = shellMPrintf(pRc, "\"%w\"", zTab);
16613:       pTab->nCol = nCol;
16614:       pTab->iPk = -2;
16615:       if( nCol>0 ){
16616:         pTab->azlCol = (char**)shellMalloc(pRc, sizeof(char*) * (nCol+1));
16617:         if( pTab->azlCol ){
16618:           pTab->azlCol[nCol] = shellMPrintf(pRc, "");
16619:           for(i=nCol-1; i>=0; i--){
16620:             pTab->azlCol[i] = shellMPrintf(pRc, "%s, NULL", pTab->azlCol[i+1]);
16621:           }
16622:         }
16623:       }
16624: 
16625:       if( *pRc!=SQLITE_OK ){
16626:         recoverFreeTable(pTab);
16627:         pTab = 0;
16628:       }else{
16629:         raw_printf(pState->out,
16630:             "CREATE TABLE %s(rootpgno INTEGER, "
16631:             "pgno INTEGER, nfield INTEGER, id INTEGER", pTab->zQuoted
16632:         );
16633:         for(i=0; i<nCol; i++){
16634:           raw_printf(pState->out, ", c%d", i);
16635:         }
16636:         raw_printf(pState->out, ");\n");
16637:       }
16638:     }
16639:     sqlite3_free(zTab);
16640:   }
16641:   return pTab;
16642: }
16643: 
16644: /*
16645: ** This function is called to recover data from the database. A script
16646: ** to construct a new database containing all recovered data is output
16647: ** on stream pState->out.
16648: */
16649: static int recoverDatabaseCmd(ShellState *pState, int nArg, char **azArg){
16650:   int rc = SQLITE_OK;
16651:   sqlite3_stmt *pLoop = 0;        /* Loop through all root pages */
16652:   sqlite3_stmt *pPages = 0;       /* Loop through all pages in a group */
16653:   sqlite3_stmt *pCells = 0;       /* Loop through all cells in a page */
16654:   const char *zRecoveryDb = "";   /* Name of "recovery" database */
16655:   const char *zLostAndFound = "lost_and_found";
16656:   int i;
16657:   int nOrphan = -1;
16658:   RecoverTable *pOrphan = 0;
16659: 
16660:   int bFreelist = 1;              /* 0 if --freelist-corrupt is specified */
16661:   int bRowids = 1;                /* 0 if --no-rowids */
16662:   for(i=1; i<nArg; i++){
16663:     char *z = azArg[i];
16664:     int n;
16665:     if( z[0]=='-' && z[1]=='-' ) z++;
16666:     n = strlen30(z);
16667:     if( n<=17 && memcmp("-freelist-corrupt", z, n)==0 ){
16668:       bFreelist = 0;
16669:     }else
16670:     if( n<=12 && memcmp("-recovery-db", z, n)==0 && i<(nArg-1) ){
16671:       i++;
16672:       zRecoveryDb = azArg[i];
16673:     }else
16674:     if( n<=15 && memcmp("-lost-and-found", z, n)==0 && i<(nArg-1) ){
16675:       i++;
16676:       zLostAndFound = azArg[i];
16677:     }else
16678:     if( n<=10 && memcmp("-no-rowids", z, n)==0 ){
16679:       bRowids = 0;
16680:     }
16681:     else{
16682:       utf8_printf(stderr, "unexpected option: %s\n", azArg[i]);
16683:       showHelp(pState->out, azArg[0]);
16684:       return 1;
16685:     }
16686:   }
16687: 
16688:   shellExecPrintf(pState->db, &rc,
16689:     /* Attach an in-memory database named 'recovery'. Create an indexed
16690:     ** cache of the sqlite_dbptr virtual table. */
16691:     "PRAGMA writable_schema = on;"
16692:     "ATTACH %Q AS recovery;"
16693:     "DROP TABLE IF EXISTS recovery.dbptr;"
16694:     "DROP TABLE IF EXISTS recovery.freelist;"
16695:     "DROP TABLE IF EXISTS recovery.map;"
16696:     "DROP TABLE IF EXISTS recovery.schema;"
16697:     "CREATE TABLE recovery.freelist(pgno INTEGER PRIMARY KEY);", zRecoveryDb
16698:   );
16699: 
16700:   if( bFreelist ){
16701:     shellExec(pState->db, &rc,
16702:       "WITH trunk(pgno) AS ("
16703:       "  SELECT shell_int32("
16704:       "      (SELECT data FROM sqlite_dbpage WHERE pgno=1), 8) AS x "
16705:       "      WHERE x>0"
16706:       "    UNION"
16707:       "  SELECT shell_int32("
16708:       "      (SELECT data FROM sqlite_dbpage WHERE pgno=trunk.pgno), 0) AS x "
16709:       "      FROM trunk WHERE x>0"
16710:       "),"
16711:       "freelist(data, n, freepgno) AS ("
16712:       "  SELECT data, min(16384, shell_int32(data, 1)-1), t.pgno "
16713:       "      FROM trunk t, sqlite_dbpage s WHERE s.pgno=t.pgno"
16714:       "    UNION ALL"
16715:       "  SELECT data, n-1, shell_int32(data, 2+n) "
16716:       "      FROM freelist WHERE n>=0"
16717:       ")"
16718:       "REPLACE INTO recovery.freelist SELECT freepgno FROM freelist;"
16719:     );
16720:   }
16721: 
16722:   /* If this is an auto-vacuum database, add all pointer-map pages to
16723:   ** the freelist table. Do this regardless of whether or not
16724:   ** --freelist-corrupt was specified.  */
16725:   shellExec(pState->db, &rc,
16726:     "WITH ptrmap(pgno) AS ("
16727:     "  SELECT 2 WHERE shell_int32("
16728:     "    (SELECT data FROM sqlite_dbpage WHERE pgno=1), 13"
16729:     "  )"
16730:     "    UNION ALL "
16731:     "  SELECT pgno+1+(SELECT page_size FROM pragma_page_size)/5 AS pp "
16732:     "  FROM ptrmap WHERE pp<=(SELECT page_count FROM pragma_page_count)"
16733:     ")"
16734:     "REPLACE INTO recovery.freelist SELECT pgno FROM ptrmap"
16735:   );
16736: 
16737:   shellExec(pState->db, &rc,
16738:     "CREATE TABLE recovery.dbptr("
16739:     "      pgno, child, PRIMARY KEY(child, pgno)"
16740:     ") WITHOUT ROWID;"
16741:     "INSERT OR IGNORE INTO recovery.dbptr(pgno, child) "
16742:     "    SELECT * FROM sqlite_dbptr"
16743:     "      WHERE pgno NOT IN freelist AND child NOT IN freelist;"
16744: 
16745:     /* Delete any pointer to page 1. This ensures that page 1 is considered
16746:     ** a root page, regardless of how corrupt the db is. */
16747:     "DELETE FROM recovery.dbptr WHERE child = 1;"
16748: 
16749:     /* Delete all pointers to any pages that have more than one pointer
16750:     ** to them. Such pages will be treated as root pages when recovering
16751:     ** data.  */
16752:     "DELETE FROM recovery.dbptr WHERE child IN ("
16753:     "  SELECT child FROM recovery.dbptr GROUP BY child HAVING count(*)>1"
16754:     ");"
16755: 
16756:     /* Create the "map" table that will (eventually) contain instructions
16757:     ** for dealing with each page in the db that contains one or more
16758:     ** records. */
16759:     "CREATE TABLE recovery.map("
16760:       "pgno INTEGER PRIMARY KEY, maxlen INT, intkey, root INT"
16761:     ");"
16762: 
16763:     /* Populate table [map]. If there are circular loops of pages in the
16764:     ** database, the following adds all pages in such a loop to the map
16765:     ** as individual root pages. This could be handled better.  */
16766:     "WITH pages(i, maxlen) AS ("
16767:     "  SELECT page_count, ("
16768:     "    SELECT max(field+1) FROM sqlite_dbdata WHERE pgno=page_count"
16769:     "  ) FROM pragma_page_count WHERE page_count>0"
16770:     "    UNION ALL"
16771:     "  SELECT i-1, ("
16772:     "    SELECT max(field+1) FROM sqlite_dbdata WHERE pgno=i-1"
16773:     "  ) FROM pages WHERE i>=2"
16774:     ")"
16775:     "INSERT INTO recovery.map(pgno, maxlen, intkey, root) "
16776:     "  SELECT i, maxlen, NULL, ("
16777:     "    WITH p(orig, pgno, parent) AS ("
16778:     "      SELECT 0, i, (SELECT pgno FROM recovery.dbptr WHERE child=i)"
16779:     "        UNION "
16780:     "      SELECT i, p.parent, "
16781:     "        (SELECT pgno FROM recovery.dbptr WHERE child=p.parent) FROM p"
16782:     "    )"
16783:     "    SELECT pgno FROM p WHERE (parent IS NULL OR pgno = orig)"
16784:     ") "
16785:     "FROM pages WHERE maxlen IS NOT NULL AND i NOT IN freelist;"
16786:     "UPDATE recovery.map AS o SET intkey = ("
16787:     "  SELECT substr(data, 1, 1)==X'0D' FROM sqlite_dbpage WHERE pgno=o.pgno"
16788:     ");"
16789: 
16790:     /* Extract data from page 1 and any linked pages into table
16791:     ** recovery.schema. With the same schema as an sqlite_schema table.  */
16792:     "CREATE TABLE recovery.schema(type, name, tbl_name, rootpage, sql);"
16793:     "INSERT INTO recovery.schema SELECT "
16794:     "  max(CASE WHEN field=0 THEN value ELSE NULL END),"
16795:     "  max(CASE WHEN field=1 THEN value ELSE NULL END),"
16796:     "  max(CASE WHEN field=2 THEN value ELSE NULL END),"
16797:     "  max(CASE WHEN field=3 THEN value ELSE NULL END),"
16798:     "  max(CASE WHEN field=4 THEN value ELSE NULL END)"
16799:     "FROM sqlite_dbdata WHERE pgno IN ("
16800:     "  SELECT pgno FROM recovery.map WHERE root=1"
16801:     ")"
16802:     "GROUP BY pgno, cell;"
16803:     "CREATE INDEX recovery.schema_rootpage ON schema(rootpage);"
16804:   );
16805: 
16806:   /* Open a transaction, then print out all non-virtual, non-"sqlite_%"
16807:   ** CREATE TABLE statements that extracted from the existing schema.  */
16808:   if( rc==SQLITE_OK ){
16809:     sqlite3_stmt *pStmt = 0;
16810:     /* ".recover" might output content in an order which causes immediate
16811:     ** foreign key constraints to be violated. So disable foreign-key
16812:     ** constraint enforcement to prevent problems when running the output
16813:     ** script. */
16814:     raw_printf(pState->out, "PRAGMA foreign_keys=OFF;\n");
16815:     raw_printf(pState->out, "BEGIN;\n");
16816:     raw_printf(pState->out, "PRAGMA writable_schema = on;\n");
16817:     shellPrepare(pState->db, &rc,
16818:         "SELECT sql FROM recovery.schema "
16819:         "WHERE type='table' AND sql LIKE 'create table%'", &pStmt
16820:     );
16821:     while( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pStmt) ){
16822:       const char *zCreateTable = (const char*)sqlite3_column_text(pStmt, 0);
16823:       raw_printf(pState->out, "CREATE TABLE IF NOT EXISTS %s;\n",
16824:           &zCreateTable[12]
16825:       );
16826:     }
16827:     shellFinalize(&rc, pStmt);
16828:   }
16829: 
16830:   /* Figure out if an orphan table will be required. And if so, how many
16831:   ** user columns it should contain */
16832:   shellPrepare(pState->db, &rc,
16833:       "SELECT coalesce(max(maxlen), -2) FROM recovery.map WHERE root>1"
16834:       , &pLoop
16835:   );
16836:   if( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pLoop) ){
16837:     nOrphan = sqlite3_column_int(pLoop, 0);
16838:   }
16839:   shellFinalize(&rc, pLoop);
16840:   pLoop = 0;
16841: 
16842:   shellPrepare(pState->db, &rc,
16843:       "SELECT pgno FROM recovery.map WHERE root=?", &pPages
16844:   );
16845: 
16846:   shellPrepare(pState->db, &rc,
16847:       "SELECT max(field), group_concat(shell_escape_crnl(quote"
16848:       "(case when (? AND field<0) then NULL else value end)"
16849:       "), ', ')"
16850:       ", min(field) "
16851:       "FROM sqlite_dbdata WHERE pgno = ? AND field != ?"
16852:       "GROUP BY cell", &pCells
16853:   );
16854: 
16855:   /* Loop through each root page. */
16856:   shellPrepare(pState->db, &rc,
16857:       "SELECT root, intkey, max(maxlen) FROM recovery.map"
16858:       " WHERE root>1 GROUP BY root, intkey ORDER BY root=("
16859:       "  SELECT rootpage FROM recovery.schema WHERE name='sqlite_sequence'"
16860:       ")", &pLoop
16861:   );
16862:   while( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pLoop) ){
16863:     int iRoot = sqlite3_column_int(pLoop, 0);
16864:     int bIntkey = sqlite3_column_int(pLoop, 1);
16865:     int nCol = sqlite3_column_int(pLoop, 2);
16866:     int bNoop = 0;
16867:     RecoverTable *pTab;
16868: 
16869:     assert( bIntkey==0 || bIntkey==1 );
16870:     pTab = recoverFindTable(pState, &rc, iRoot, bIntkey, nCol, &bNoop);
16871:     if( bNoop || rc ) continue;
16872:     if( pTab==0 ){
16873:       if( pOrphan==0 ){
16874:         pOrphan = recoverOrphanTable(pState, &rc, zLostAndFound, nOrphan);
16875:       }
16876:       pTab = pOrphan;
16877:       if( pTab==0 ) break;
16878:     }
16879: 
16880:     if( 0==sqlite3_stricmp(pTab->zQuoted, "\"sqlite_sequence\"") ){
16881:       raw_printf(pState->out, "DELETE FROM sqlite_sequence;\n");
16882:     }
16883:     sqlite3_bind_int(pPages, 1, iRoot);
16884:     if( bRowids==0 && pTab->iPk<0 ){
16885:       sqlite3_bind_int(pCells, 1, 1);
16886:     }else{
16887:       sqlite3_bind_int(pCells, 1, 0);
16888:     }
16889:     sqlite3_bind_int(pCells, 3, pTab->iPk);
16890: 
16891:     while( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pPages) ){
16892:       int iPgno = sqlite3_column_int(pPages, 0);
16893:       sqlite3_bind_int(pCells, 2, iPgno);
16894:       while( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pCells) ){
16895:         int nField = sqlite3_column_int(pCells, 0);
16896:         int iMin = sqlite3_column_int(pCells, 2);
16897:         const char *zVal = (const char*)sqlite3_column_text(pCells, 1);
16898: 
16899:         RecoverTable *pTab2 = pTab;
16900:         if( pTab!=pOrphan && (iMin<0)!=bIntkey ){
16901:           if( pOrphan==0 ){
16902:             pOrphan = recoverOrphanTable(pState, &rc, zLostAndFound, nOrphan);
16903:           }
16904:           pTab2 = pOrphan;
16905:           if( pTab2==0 ) break;
16906:         }
16907: 
16908:         nField = nField+1;
16909:         if( pTab2==pOrphan ){
16910:           raw_printf(pState->out,
16911:               "INSERT INTO %s VALUES(%d, %d, %d, %s%s%s);\n",
16912:               pTab2->zQuoted, iRoot, iPgno, nField,
16913:               iMin<0 ? "" : "NULL, ", zVal, pTab2->azlCol[nField]
16914:           );
16915:         }else{
16916:           raw_printf(pState->out, "INSERT INTO %s(%s) VALUES( %s );\n",
16917:               pTab2->zQuoted, pTab2->azlCol[nField], zVal
16918:           );
16919:         }
16920:       }
16921:       shellReset(&rc, pCells);
16922:     }
16923:     shellReset(&rc, pPages);
16924:     if( pTab!=pOrphan ) recoverFreeTable(pTab);
16925:   }
16926:   shellFinalize(&rc, pLoop);
16927:   shellFinalize(&rc, pPages);
16928:   shellFinalize(&rc, pCells);
16929:   recoverFreeTable(pOrphan);
16930: 
16931:   /* The rest of the schema */
16932:   if( rc==SQLITE_OK ){
16933:     sqlite3_stmt *pStmt = 0;
16934:     shellPrepare(pState->db, &rc,
16935:         "SELECT sql, name FROM recovery.schema "
16936:         "WHERE sql NOT LIKE 'create table%'", &pStmt
16937:     );
16938:     while( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pStmt) ){
16939:       const char *zSql = (const char*)sqlite3_column_text(pStmt, 0);
16940:       if( sqlite3_strnicmp(zSql, "create virt", 11)==0 ){
16941:         const char *zName = (const char*)sqlite3_column_text(pStmt, 1);
16942:         char *zPrint = shellMPrintf(&rc,
16943:           "INSERT INTO sqlite_schema VALUES('table', %Q, %Q, 0, %Q)",
16944:           zName, zName, zSql
16945:         );
16946:         raw_printf(pState->out, "%s;\n", zPrint);
16947:         sqlite3_free(zPrint);
16948:       }else{
16949:         raw_printf(pState->out, "%s;\n", zSql);
16950:       }
16951:     }
16952:     shellFinalize(&rc, pStmt);
16953:   }
16954: 
16955:   if( rc==SQLITE_OK ){
16956:     raw_printf(pState->out, "PRAGMA writable_schema = off;\n");
16957:     raw_printf(pState->out, "COMMIT;\n");
16958:   }
16959:   sqlite3_exec(pState->db, "DETACH recovery", 0, 0, 0);
16960:   return rc;
16961: }
16962: #endif /* !(SQLITE_OMIT_VIRTUALTABLE) && defined(SQLITE_ENABLE_DBPAGE_VTAB) */
16963: 
16964: 
16965: /*
16966: ** If an input line begins with "." then invoke this routine to
16967: ** process that line.
16968: **
16969: ** Return 1 on error, 2 to exit, and 0 otherwise.
16970: */
16971: static int do_meta_command(char *zLine, ShellState *p){
16972:   int h = 1;
16973:   int nArg = 0;
16974:   int n, c;
16975:   int rc = 0;
16976:   char *azArg[52];
16977: 
16978: #ifndef SQLITE_OMIT_VIRTUALTABLE
16979:   if( p->expert.pExpert ){
16980:     expertFinish(p, 1, 0);
16981:   }
16982: #endif
16983: 
16984:   /* Parse the input line into tokens.
16985:   */
16986:   while( zLine[h] && nArg<ArraySize(azArg)-1 ){
16987:     while( IsSpace(zLine[h]) ){ h++; }
16988:     if( zLine[h]==0 ) break;
16989:     if( zLine[h]=='\'' || zLine[h]=='"' ){
16990:       int delim = zLine[h++];
16991:       azArg[nArg++] = &zLine[h];
16992:       while( zLine[h] && zLine[h]!=delim ){
16993:         if( zLine[h]=='\\' && delim=='"' && zLine[h+1]!=0 ) h++;
16994:         h++;
16995:       }
16996:       if( zLine[h]==delim ){
16997:         zLine[h++] = 0;
16998:       }
16999:       if( delim=='"' ) resolve_backslashes(azArg[nArg-1]);
17000:     }else{
17001:       azArg[nArg++] = &zLine[h];
17002:       while( zLine[h] && !IsSpace(zLine[h]) ){ h++; }
17003:       if( zLine[h] ) zLine[h++] = 0;
17004:       resolve_backslashes(azArg[nArg-1]);
17005:     }
17006:   }
17007:   azArg[nArg] = 0;
17008: 
17009:   /* Process the input line.
17010:   */
17011:   if( nArg==0 ) return 0; /* no tokens, no error */
17012:   n = strlen30(azArg[0]);
17013:   c = azArg[0][0];
17014:   clearTempFile(p);
17015: 
17016: #ifndef SQLITE_OMIT_AUTHORIZATION
17017:   if( c=='a' && strncmp(azArg[0], "auth", n)==0 ){
17018:     if( nArg!=2 ){
17019:       raw_printf(stderr, "Usage: .auth ON|OFF\n");
17020:       rc = 1;
17021:       goto meta_command_exit;
17022:     }
17023:     open_db(p, 0);
17024:     if( booleanValue(azArg[1]) ){
17025:       sqlite3_set_authorizer(p->db, shellAuth, p);
17026:     }else{
17027:       sqlite3_set_authorizer(p->db, 0, 0);
17028:     }
17029:   }else
17030: #endif
17031: 
17032: #if !defined(SQLITE_OMIT_VIRTUALTABLE) && defined(SQLITE_HAVE_ZLIB)
17033:   if( c=='a' && strncmp(azArg[0], "archive", n)==0 ){
17034:     open_db(p, 0);
17035:     rc = arDotCommand(p, 0, azArg, nArg);
17036:   }else
17037: #endif
17038: 
17039:   if( (c=='b' && n>=3 && strncmp(azArg[0], "backup", n)==0)
17040:    || (c=='s' && n>=3 && strncmp(azArg[0], "save", n)==0)
17041:   ){
17042:     const char *zDestFile = 0;
17043:     const char *zDb = 0;
17044:     sqlite3 *pDest;
17045:     sqlite3_backup *pBackup;
17046:     int j;
17047:     int bAsync = 0;
17048:     const char *zVfs = 0;
17049:     for(j=1; j<nArg; j++){
17050:       const char *z = azArg[j];
17051:       if( z[0]=='-' ){
17052:         if( z[1]=='-' ) z++;
17053:         if( strcmp(z, "-append")==0 ){
17054:           zVfs = "apndvfs";
17055:         }else
17056:         if( strcmp(z, "-async")==0 ){
17057:           bAsync = 1;
17058:         }else
17059:         {
17060:           utf8_printf(stderr, "unknown option: %s\n", azArg[j]);
17061:           return 1;
17062:         }
17063:       }else if( zDestFile==0 ){
17064:         zDestFile = azArg[j];
17065:       }else if( zDb==0 ){
17066:         zDb = zDestFile;
17067:         zDestFile = azArg[j];
17068:       }else{
17069:         raw_printf(stderr, "Usage: .backup ?DB? ?OPTIONS? FILENAME\n");
17070:         return 1;
17071:       }
17072:     }
17073:     if( zDestFile==0 ){
17074:       raw_printf(stderr, "missing FILENAME argument on .backup\n");
17075:       return 1;
17076:     }
17077:     if( zDb==0 ) zDb = "main";
17078:     rc = sqlite3_open_v2(zDestFile, &pDest,
17079:                   SQLITE_OPEN_READWRITE|SQLITE_OPEN_CREATE, zVfs);
17080:     if( rc!=SQLITE_OK ){
17081:       utf8_printf(stderr, "Error: cannot open \"%s\"\n", zDestFile);
17082:       close_db(pDest);
17083:       return 1;
17084:     }
17085:     if( bAsync ){
17086:       sqlite3_exec(pDest, "PRAGMA synchronous=OFF; PRAGMA journal_mode=OFF;",
17087:                    0, 0, 0);
17088:     }
17089:     open_db(p, 0);
17090:     pBackup = sqlite3_backup_init(pDest, "main", p->db, zDb);
17091:     if( pBackup==0 ){
17092:       utf8_printf(stderr, "Error: %s\n", sqlite3_errmsg(pDest));
17093:       close_db(pDest);
17094:       return 1;
17095:     }
17096:     while(  (rc = sqlite3_backup_step(pBackup,100))==SQLITE_OK ){}
17097:     sqlite3_backup_finish(pBackup);
17098:     if( rc==SQLITE_DONE ){
17099:       rc = 0;
17100:     }else{
17101:       utf8_printf(stderr, "Error: %s\n", sqlite3_errmsg(pDest));
17102:       rc = 1;
17103:     }
17104:     close_db(pDest);
17105:   }else
17106: 
17107:   if( c=='b' && n>=3 && strncmp(azArg[0], "bail", n)==0 ){
17108:     if( nArg==2 ){
17109:       bail_on_error = booleanValue(azArg[1]);
17110:     }else{
17111:       raw_printf(stderr, "Usage: .bail on|off\n");
17112:       rc = 1;
17113:     }
17114:   }else
17115: 
17116:   if( c=='b' && n>=3 && strncmp(azArg[0], "binary", n)==0 ){
17117:     if( nArg==2 ){
17118:       if( booleanValue(azArg[1]) ){
17119:         setBinaryMode(p->out, 1);
17120:       }else{
17121:         setTextMode(p->out, 1);
17122:       }
17123:     }else{
17124:       raw_printf(stderr, "Usage: .binary on|off\n");
17125:       rc = 1;
17126:     }
17127:   }else
17128: 
17129:   if( c=='c' && strcmp(azArg[0],"cd")==0 ){
17130:     if( nArg==2 ){
17131: #if defined(_WIN32) || defined(WIN32)
17132:       wchar_t *z = sqlite3_win32_utf8_to_unicode(azArg[1]);
17133:       rc = !SetCurrentDirectoryW(z);
17134:       sqlite3_free(z);
17135: #else
17136:       rc = chdir(azArg[1]);
17137: #endif
17138:       if( rc ){
17139:         utf8_printf(stderr, "Cannot change to directory \"%s\"\n", azArg[1]);
17140:         rc = 1;
17141:       }
17142:     }else{
17143:       raw_printf(stderr, "Usage: .cd DIRECTORY\n");
17144:       rc = 1;
17145:     }
17146:   }else
17147: 
17148:   /* The undocumented ".breakpoint" command causes a call to the no-op
17149:   ** routine named test_breakpoint().
17150:   */
17151:   if( c=='b' && n>=3 && strncmp(azArg[0], "breakpoint", n)==0 ){
17152:     test_breakpoint();
17153:   }else
17154: 
17155:   if( c=='c' && n>=3 && strncmp(azArg[0], "changes", n)==0 ){
17156:     if( nArg==2 ){
17157:       setOrClearFlag(p, SHFLG_CountChanges, azArg[1]);
17158:     }else{
17159:       raw_printf(stderr, "Usage: .changes on|off\n");
17160:       rc = 1;
17161:     }
17162:   }else
17163: 
17164:   /* Cancel output redirection, if it is currently set (by .testcase)
17165:   ** Then read the content of the testcase-out.txt file and compare against
17166:   ** azArg[1].  If there are differences, report an error and exit.
17167:   */
17168:   if( c=='c' && n>=3 && strncmp(azArg[0], "check", n)==0 ){
17169:     char *zRes = 0;
17170:     output_reset(p);
17171:     if( nArg!=2 ){
17172:       raw_printf(stderr, "Usage: .check GLOB-PATTERN\n");
17173:       rc = 2;
17174:     }else if( (zRes = readFile("testcase-out.txt", 0))==0 ){
17175:       raw_printf(stderr, "Error: cannot read 'testcase-out.txt'\n");
17176:       rc = 2;
17177:     }else if( testcase_glob(azArg[1],zRes)==0 ){
17178:       utf8_printf(stderr,
17179:                  "testcase-%s FAILED\n Expected: [%s]\n      Got: [%s]\n",
17180:                  p->zTestcase, azArg[1], zRes);
17181:       rc = 1;
17182:     }else{
17183:       utf8_printf(stdout, "testcase-%s ok\n", p->zTestcase);
17184:       p->nCheck++;
17185:     }
17186:     sqlite3_free(zRes);
17187:   }else
17188: 
17189:   if( c=='c' && strncmp(azArg[0], "clone", n)==0 ){
17190:     if( nArg==2 ){
17191:       tryToClone(p, azArg[1]);
17192:     }else{
17193:       raw_printf(stderr, "Usage: .clone FILENAME\n");
17194:       rc = 1;
17195:     }
17196:   }else
17197: 
17198:   if( c=='d' && n>1 && strncmp(azArg[0], "databases", n)==0 ){
17199:     ShellState data;
17200:     char *zErrMsg = 0;
17201:     open_db(p, 0);
17202:     memcpy(&data, p, sizeof(data));
17203:     data.showHeader = 0;
17204:     data.cMode = data.mode = MODE_List;
17205:     sqlite3_snprintf(sizeof(data.colSeparator),data.colSeparator,": ");
17206:     data.cnt = 0;
17207:     sqlite3_exec(p->db, "SELECT name, file FROM pragma_database_list",
17208:                  callback, &data, &zErrMsg);
17209:     if( zErrMsg ){
17210:       utf8_printf(stderr,"Error: %s\n", zErrMsg);
17211:       sqlite3_free(zErrMsg);
17212:       rc = 1;
17213:     }
17214:   }else
17215: 
17216:   if( c=='d' && n>=3 && strncmp(azArg[0], "dbconfig", n)==0 ){
17217:     static const struct DbConfigChoices {
17218:       const char *zName;
17219:       int op;
17220:     } aDbConfig[] = {
17221:         { "defensive",          SQLITE_DBCONFIG_DEFENSIVE             },
17222:         { "dqs_ddl",            SQLITE_DBCONFIG_DQS_DDL               },
17223:         { "dqs_dml",            SQLITE_DBCONFIG_DQS_DML               },
17224:         { "enable_fkey",        SQLITE_DBCONFIG_ENABLE_FKEY           },
17225:         { "enable_qpsg",        SQLITE_DBCONFIG_ENABLE_QPSG           },
17226:         { "enable_trigger",     SQLITE_DBCONFIG_ENABLE_TRIGGER        },
17227:         { "enable_view",        SQLITE_DBCONFIG_ENABLE_VIEW           },
17228:         { "fts3_tokenizer",     SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER },
17229:         { "legacy_alter_table", SQLITE_DBCONFIG_LEGACY_ALTER_TABLE    },
17230:         { "legacy_file_format", SQLITE_DBCONFIG_LEGACY_FILE_FORMAT    },
17231:         { "load_extension",     SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION },
17232:         { "no_ckpt_on_close",   SQLITE_DBCONFIG_NO_CKPT_ON_CLOSE      },
17233:         { "reset_database",     SQLITE_DBCONFIG_RESET_DATABASE        },
17234:         { "trigger_eqp",        SQLITE_DBCONFIG_TRIGGER_EQP           },
17235:         { "trusted_schema",     SQLITE_DBCONFIG_TRUSTED_SCHEMA        },
17236:         { "writable_schema",    SQLITE_DBCONFIG_WRITABLE_SCHEMA       },
17237:     };
17238:     int ii, v;
17239:     open_db(p, 0);
17240:     for(ii=0; ii<ArraySize(aDbConfig); ii++){
17241:       if( nArg>1 && strcmp(azArg[1], aDbConfig[ii].zName)!=0 ) continue;
17242:       if( nArg>=3 ){
17243:         sqlite3_db_config(p->db, aDbConfig[ii].op, booleanValue(azArg[2]), 0);
17244:       }
17245:       sqlite3_db_config(p->db, aDbConfig[ii].op, -1, &v);
17246:       utf8_printf(p->out, "%19s %s\n", aDbConfig[ii].zName, v ? "on" : "off");
17247:       if( nArg>1 ) break;
17248:     }
17249:     if( nArg>1 && ii==ArraySize(aDbConfig) ){
17250:       utf8_printf(stderr, "Error: unknown dbconfig \"%s\"\n", azArg[1]);
17251:       utf8_printf(stderr, "Enter \".dbconfig\" with no arguments for a list\n");
17252:     }
17253:   }else
17254: 
17255:   if( c=='d' && n>=3 && strncmp(azArg[0], "dbinfo", n)==0 ){
17256:     rc = shell_dbinfo_command(p, nArg, azArg);
17257:   }else
17258: 
17259: #if !defined(SQLITE_OMIT_VIRTUALTABLE) && defined(SQLITE_ENABLE_DBPAGE_VTAB)
17260:   if( c=='r' && strncmp(azArg[0], "recover", n)==0 ){
17261:     open_db(p, 0);
17262:     rc = recoverDatabaseCmd(p, nArg, azArg);
17263:   }else
17264: #endif /* !(SQLITE_OMIT_VIRTUALTABLE) && defined(SQLITE_ENABLE_DBPAGE_VTAB) */
17265: 
17266:   if( c=='d' && strncmp(azArg[0], "dump", n)==0 ){
17267:     char *zLike = 0;
17268:     char *zSql;
17269:     int i;
17270:     int savedShowHeader = p->showHeader;
17271:     int savedShellFlags = p->shellFlgs;
17272:     ShellClearFlag(p, SHFLG_PreserveRowid|SHFLG_Newlines|SHFLG_Echo);
17273:     for(i=1; i<nArg; i++){
17274:       if( azArg[i][0]=='-' ){
17275:         const char *z = azArg[i]+1;
17276:         if( z[0]=='-' ) z++;
17277:         if( strcmp(z,"preserve-rowids")==0 ){
17278: #ifdef SQLITE_OMIT_VIRTUALTABLE
17279:           raw_printf(stderr, "The --preserve-rowids option is not compatible"
17280:                              " with SQLITE_OMIT_VIRTUALTABLE\n");
17281:           rc = 1;
17282:           sqlite3_free(zLike);
17283:           goto meta_command_exit;
17284: #else
17285:           ShellSetFlag(p, SHFLG_PreserveRowid);
17286: #endif
17287:         }else
17288:         if( strcmp(z,"newlines")==0 ){
17289:           ShellSetFlag(p, SHFLG_Newlines);
17290:         }else
17291:         {
17292:           raw_printf(stderr, "Unknown option \"%s\" on \".dump\"\n", azArg[i]);
17293:           rc = 1;
17294:           sqlite3_free(zLike);
17295:           goto meta_command_exit;
17296:         }
17297:       }else if( zLike ){
17298:         zLike = sqlite3_mprintf("%z OR name LIKE %Q ESCAPE '\\'",
17299:                 zLike, azArg[i]);
17300:       }else{
17301:         zLike = sqlite3_mprintf("name LIKE %Q ESCAPE '\\'", azArg[i]);
17302:       }
17303:     }
17304: 
17305:     open_db(p, 0);
17306: 
17307:     /* When playing back a "dump", the content might appear in an order
17308:     ** which causes immediate foreign key constraints to be violated.
17309:     ** So disable foreign-key constraint enforcement to prevent problems. */
17310:     raw_printf(p->out, "PRAGMA foreign_keys=OFF;\n");
17311:     raw_printf(p->out, "BEGIN TRANSACTION;\n");
17312:     p->writableSchema = 0;
17313:     p->showHeader = 0;
17314:     /* Set writable_schema=ON since doing so forces SQLite to initialize
17315:     ** as much of the schema as it can even if the sqlite_schema table is
17316:     ** corrupt. */
17317:     sqlite3_exec(p->db, "SAVEPOINT dump; PRAGMA writable_schema=ON", 0, 0, 0);
17318:     p->nErr = 0;
17319:     if( zLike==0 ) zLike = sqlite3_mprintf("true");
17320:     zSql = sqlite3_mprintf(
17321:       "SELECT name, type, sql FROM sqlite_schema "
17322:       "WHERE (%s) AND type=='table'"
17323:       "  AND sql NOT NULL"
17324:       " ORDER BY tbl_name='sqlite_sequence'",
17325:       zLike
17326:     );
17327:     run_schema_dump_query(p,zSql);
17328:     sqlite3_free(zSql);
17329:     zSql = sqlite3_mprintf(
17330:       "SELECT sql FROM sqlite_schema "
17331:       "WHERE (%s) AND sql NOT NULL"
17332:       "  AND type IN ('index','trigger','view')",
17333:       zLike
17334:     );
17335:     run_table_dump_query(p, zSql);
17336:     sqlite3_free(zSql);
17337:     sqlite3_free(zLike);
17338:     if( p->writableSchema ){
17339:       raw_printf(p->out, "PRAGMA writable_schema=OFF;\n");
17340:       p->writableSchema = 0;
17341:     }
17342:     sqlite3_exec(p->db, "PRAGMA writable_schema=OFF;", 0, 0, 0);
17343:     sqlite3_exec(p->db, "RELEASE dump;", 0, 0, 0);
17344:     raw_printf(p->out, p->nErr?"ROLLBACK; -- due to errors\n":"COMMIT;\n");
17345:     p->showHeader = savedShowHeader;
17346:     p->shellFlgs = savedShellFlags;
17347:   }else
17348: 
17349:   if( c=='e' && strncmp(azArg[0], "echo", n)==0 ){
17350:     if( nArg==2 ){
17351:       setOrClearFlag(p, SHFLG_Echo, azArg[1]);
17352:     }else{
17353:       raw_printf(stderr, "Usage: .echo on|off\n");
17354:       rc = 1;
17355:     }
17356:   }else
17357: 
17358:   if( c=='e' && strncmp(azArg[0], "eqp", n)==0 ){
17359:     if( nArg==2 ){
17360:       p->autoEQPtest = 0;
17361:       if( p->autoEQPtrace ){
17362:         if( p->db ) sqlite3_exec(p->db, "PRAGMA vdbe_trace=OFF;", 0, 0, 0);
17363:         p->autoEQPtrace = 0;
17364:       }
17365:       if( strcmp(azArg[1],"full")==0 ){
17366:         p->autoEQP = AUTOEQP_full;
17367:       }else if( strcmp(azArg[1],"trigger")==0 ){
17368:         p->autoEQP = AUTOEQP_trigger;
17369: #ifdef SQLITE_DEBUG
17370:       }else if( strcmp(azArg[1],"test")==0 ){
17371:         p->autoEQP = AUTOEQP_on;
17372:         p->autoEQPtest = 1;
17373:       }else if( strcmp(azArg[1],"trace")==0 ){
17374:         p->autoEQP = AUTOEQP_full;
17375:         p->autoEQPtrace = 1;
17376:         open_db(p, 0);
17377:         sqlite3_exec(p->db, "SELECT name FROM sqlite_schema LIMIT 1", 0, 0, 0);
17378:         sqlite3_exec(p->db, "PRAGMA vdbe_trace=ON;", 0, 0, 0);
17379: #endif
17380:       }else{
17381:         p->autoEQP = (u8)booleanValue(azArg[1]);
17382:       }
17383:     }else{
17384:       raw_printf(stderr, "Usage: .eqp off|on|trace|trigger|full\n");
17385:       rc = 1;
17386:     }
17387:   }else
17388: 
17389:   if( c=='e' && strncmp(azArg[0], "exit", n)==0 ){
17390:     if( nArg>1 && (rc = (int)integerValue(azArg[1]))!=0 ) exit(rc);
17391:     rc = 2;
17392:   }else
17393: 
17394:   /* The ".explain" command is automatic now.  It is largely pointless.  It
17395:   ** retained purely for backwards compatibility */
17396:   if( c=='e' && strncmp(azArg[0], "explain", n)==0 ){
17397:     int val = 1;
17398:     if( nArg>=2 ){
17399:       if( strcmp(azArg[1],"auto")==0 ){
17400:         val = 99;
17401:       }else{
17402:         val =  booleanValue(azArg[1]);
17403:       }
17404:     }
17405:     if( val==1 && p->mode!=MODE_Explain ){
17406:       p->normalMode = p->mode;
17407:       p->mode = MODE_Explain;
17408:       p->autoExplain = 0;
17409:     }else if( val==0 ){
17410:       if( p->mode==MODE_Explain ) p->mode = p->normalMode;
17411:       p->autoExplain = 0;
17412:     }else if( val==99 ){
17413:       if( p->mode==MODE_Explain ) p->mode = p->normalMode;
17414:       p->autoExplain = 1;
17415:     }
17416:   }else
17417: 
17418: #ifndef SQLITE_OMIT_VIRTUALTABLE
17419:   if( c=='e' && strncmp(azArg[0], "expert", n)==0 ){
17420:     open_db(p, 0);
17421:     expertDotCommand(p, azArg, nArg);
17422:   }else
17423: #endif
17424: 
17425:   if( c=='f' && strncmp(azArg[0], "filectrl", n)==0 ){
17426:     static const struct {
17427:        const char *zCtrlName;   /* Name of a test-control option */
17428:        int ctrlCode;            /* Integer code for that option */
17429:        const char *zUsage;      /* Usage notes */
17430:     } aCtrl[] = {
17431:       { "size_limit",     SQLITE_FCNTL_SIZE_LIMIT,      "[LIMIT]"        },
17432:       { "chunk_size",     SQLITE_FCNTL_CHUNK_SIZE,      "SIZE"           },
17433:    /* { "win32_av_retry", SQLITE_FCNTL_WIN32_AV_RETRY,  "COUNT DELAY"    },*/
17434:       { "persist_wal",    SQLITE_FCNTL_PERSIST_WAL,     "[BOOLEAN]"      },
17435:       { "psow",       SQLITE_FCNTL_POWERSAFE_OVERWRITE, "[BOOLEAN]"      },
17436:    /* { "pragma",         SQLITE_FCNTL_PRAGMA,          "NAME ARG"       },*/
17437:       { "tempfilename",   SQLITE_FCNTL_TEMPFILENAME,    ""               },
17438:       { "has_moved",      SQLITE_FCNTL_HAS_MOVED,       ""               },
17439:       { "lock_timeout",   SQLITE_FCNTL_LOCK_TIMEOUT,    "MILLISEC"       },
17440:       { "reserve_bytes",  SQLITE_FCNTL_RESERVE_BYTES,   "[N]"            },
17441:     };
17442:     int filectrl = -1;
17443:     int iCtrl = -1;
17444:     sqlite3_int64 iRes = 0;  /* Integer result to display if rc2==1 */
17445:     int isOk = 0;            /* 0: usage  1: %lld  2: no-result */
17446:     int n2, i;
17447:     const char *zCmd = 0;
17448:     const char *zSchema = 0;
17449: 
17450:     open_db(p, 0);
17451:     zCmd = nArg>=2 ? azArg[1] : "help";
17452: 
17453:     if( zCmd[0]=='-'
17454:      && (strcmp(zCmd,"--schema")==0 || strcmp(zCmd,"-schema")==0)
17455:      && nArg>=4
17456:     ){
17457:       zSchema = azArg[2];
17458:       for(i=3; i<nArg; i++) azArg[i-2] = azArg[i];
17459:       nArg -= 2;
17460:       zCmd = azArg[1];
17461:     }
17462: 
17463:     /* The argument can optionally begin with "-" or "--" */
17464:     if( zCmd[0]=='-' && zCmd[1] ){
17465:       zCmd++;
17466:       if( zCmd[0]=='-' && zCmd[1] ) zCmd++;
17467:     }
17468: 
17469:     /* --help lists all file-controls */
17470:     if( strcmp(zCmd,"help")==0 ){
17471:       utf8_printf(p->out, "Available file-controls:\n");
17472:       for(i=0; i<ArraySize(aCtrl); i++){
17473:         utf8_printf(p->out, "  .filectrl %s %s\n",
17474:                     aCtrl[i].zCtrlName, aCtrl[i].zUsage);
17475:       }
17476:       rc = 1;
17477:       goto meta_command_exit;
17478:     }
17479: 
17480:     /* convert filectrl text option to value. allow any unique prefix
17481:     ** of the option name, or a numerical value. */
17482:     n2 = strlen30(zCmd);
17483:     for(i=0; i<ArraySize(aCtrl); i++){
17484:       if( strncmp(zCmd, aCtrl[i].zCtrlName, n2)==0 ){
17485:         if( filectrl<0 ){
17486:           filectrl = aCtrl[i].ctrlCode;
17487:           iCtrl = i;
17488:         }else{
17489:           utf8_printf(stderr, "Error: ambiguous file-control: \"%s\"\n"
17490:                               "Use \".filectrl --help\" for help\n", zCmd);
17491:           rc = 1;
17492:           goto meta_command_exit;
17493:         }
17494:       }
17495:     }
17496:     if( filectrl<0 ){
17497:       utf8_printf(stderr,"Error: unknown file-control: %s\n"
17498:                          "Use \".filectrl --help\" for help\n", zCmd);
17499:     }else{
17500:       switch(filectrl){
17501:         case SQLITE_FCNTL_SIZE_LIMIT: {
17502:           if( nArg!=2 && nArg!=3 ) break;
17503:           iRes = nArg==3 ? integerValue(azArg[2]) : -1;
17504:           sqlite3_file_control(p->db, zSchema, SQLITE_FCNTL_SIZE_LIMIT, &iRes);
17505:           isOk = 1;
17506:           break;
17507:         }
17508:         case SQLITE_FCNTL_LOCK_TIMEOUT:
17509:         case SQLITE_FCNTL_CHUNK_SIZE: {
17510:           int x;
17511:           if( nArg!=3 ) break;
17512:           x = (int)integerValue(azArg[2]);
17513:           sqlite3_file_control(p->db, zSchema, filectrl, &x);
17514:           isOk = 2;
17515:           break;
17516:         }
17517:         case SQLITE_FCNTL_PERSIST_WAL:
17518:         case SQLITE_FCNTL_POWERSAFE_OVERWRITE: {
17519:           int x;
17520:           if( nArg!=2 && nArg!=3 ) break;
17521:           x = nArg==3 ? booleanValue(azArg[2]) : -1;
17522:           sqlite3_file_control(p->db, zSchema, filectrl, &x);
17523:           iRes = x;
17524:           isOk = 1;
17525:           break;
17526:         }
17527:         case SQLITE_FCNTL_HAS_MOVED: {
17528:           int x;
17529:           if( nArg!=2 ) break;
17530:           sqlite3_file_control(p->db, zSchema, filectrl, &x);
17531:           iRes = x;
17532:           isOk = 1;
17533:           break;
17534:         }
17535:         case SQLITE_FCNTL_TEMPFILENAME: {
17536:           char *z = 0;
17537:           if( nArg!=2 ) break;
17538:           sqlite3_file_control(p->db, zSchema, filectrl, &z);
17539:           if( z ){
17540:             utf8_printf(p->out, "%s\n", z);
17541:             sqlite3_free(z);
17542:           }
17543:           isOk = 2;
17544:           break;
17545:         }
17546:         case SQLITE_FCNTL_RESERVE_BYTES: {
17547:           int x;
17548:           if( nArg>=3 ){
17549:             x = atoi(azArg[2]);
17550:             sqlite3_file_control(p->db, zSchema, filectrl, &x);
17551:           }
17552:           x = -1;
17553:           sqlite3_file_control(p->db, zSchema, filectrl, &x);
17554:           utf8_printf(p->out,"%d\n", x);
17555:           isOk = 2;
17556:           break;
17557:         }
17558:       }
17559:     }
17560:     if( isOk==0 && iCtrl>=0 ){
17561:       utf8_printf(p->out, "Usage: .filectrl %s %s\n", zCmd,aCtrl[iCtrl].zUsage);
17562:       rc = 1;
17563:     }else if( isOk==1 ){
17564:       char zBuf[100];
17565:       sqlite3_snprintf(sizeof(zBuf), zBuf, "%lld", iRes);
17566:       raw_printf(p->out, "%s\n", zBuf);
17567:     }
17568:   }else
17569: 
17570:   if( c=='f' && strncmp(azArg[0], "fullschema", n)==0 ){
17571:     ShellState data;
17572:     char *zErrMsg = 0;
17573:     int doStats = 0;
17574:     memcpy(&data, p, sizeof(data));
17575:     data.showHeader = 0;
17576:     data.cMode = data.mode = MODE_Semi;
17577:     if( nArg==2 && optionMatch(azArg[1], "indent") ){
17578:       data.cMode = data.mode = MODE_Pretty;
17579:       nArg = 1;
17580:     }
17581:     if( nArg!=1 ){
17582:       raw_printf(stderr, "Usage: .fullschema ?--indent?\n");
17583:       rc = 1;
17584:       goto meta_command_exit;
17585:     }
17586:     open_db(p, 0);
17587:     rc = sqlite3_exec(p->db,
17588:        "SELECT sql FROM"
17589:        "  (SELECT sql sql, type type, tbl_name tbl_name, name name, rowid x"
17590:        "     FROM sqlite_schema UNION ALL"
17591:        "   SELECT sql, type, tbl_name, name, rowid FROM sqlite_temp_schema) "
17592:        "WHERE type!='meta' AND sql NOTNULL AND name NOT LIKE 'sqlite_%' "
17593:        "ORDER BY rowid",
17594:        callback, &data, &zErrMsg
17595:     );
17596:     if( rc==SQLITE_OK ){
17597:       sqlite3_stmt *pStmt;
17598:       rc = sqlite3_prepare_v2(p->db,
17599:                "SELECT rowid FROM sqlite_schema"
17600:                " WHERE name GLOB 'sqlite_stat[134]'",
17601:                -1, &pStmt, 0);
17602:       doStats = sqlite3_step(pStmt)==SQLITE_ROW;
17603:       sqlite3_finalize(pStmt);
17604:     }
17605:     if( doStats==0 ){
17606:       raw_printf(p->out, "/* No STAT tables available */\n");
17607:     }else{
17608:       raw_printf(p->out, "ANALYZE sqlite_schema;\n");
17609:       sqlite3_exec(p->db, "SELECT 'ANALYZE sqlite_schema'",
17610:                    callback, &data, &zErrMsg);
17611:       data.cMode = data.mode = MODE_Insert;
17612:       data.zDestTable = "sqlite_stat1";
17613:       shell_exec(&data, "SELECT * FROM sqlite_stat1", &zErrMsg);
17614:       data.zDestTable = "sqlite_stat4";
17615:       shell_exec(&data, "SELECT * FROM sqlite_stat4", &zErrMsg);
17616:       raw_printf(p->out, "ANALYZE sqlite_schema;\n");
17617:     }
17618:   }else
17619: 
17620:   if( c=='h' && strncmp(azArg[0], "headers", n)==0 ){
17621:     if( nArg==2 ){
17622:       p->showHeader = booleanValue(azArg[1]);
17623:       p->shellFlgs |= SHFLG_HeaderSet;
17624:     }else{
17625:       raw_printf(stderr, "Usage: .headers on|off\n");
17626:       rc = 1;
17627:     }
17628:   }else
17629: 
17630:   if( c=='h' && strncmp(azArg[0], "help", n)==0 ){
17631:     if( nArg>=2 ){
17632:       n = showHelp(p->out, azArg[1]);
17633:       if( n==0 ){
17634:         utf8_printf(p->out, "Nothing matches '%s'\n", azArg[1]);
17635:       }
17636:     }else{
17637:       showHelp(p->out, 0);
17638:     }
17639:   }else
17640: 
17641:   if( c=='i' && strncmp(azArg[0], "import", n)==0 ){
17642:     char *zTable = 0;           /* Insert data into this table */
17643:     char *zFile = 0;            /* Name of file to extra content from */
17644:     sqlite3_stmt *pStmt = NULL; /* A statement */
17645:     int nCol;                   /* Number of columns in the table */
17646:     int nByte;                  /* Number of bytes in an SQL string */
17647:     int i, j;                   /* Loop counters */
17648:     int needCommit;             /* True to COMMIT or ROLLBACK at end */
17649:     int nSep;                   /* Number of bytes in p->colSeparator[] */
17650:     char *zSql;                 /* An SQL statement */
17651:     ImportCtx sCtx;             /* Reader context */
17652:     char *(SQLITE_CDECL *xRead)(ImportCtx*); /* Func to read one value */
17653:     int eVerbose = 0;           /* Larger for more console output */
17654:     int nSkip = 0;              /* Initial lines to skip */
17655:     int useOutputMode = 1;      /* Use output mode to determine separators */
17656: 
17657:     memset(&sCtx, 0, sizeof(sCtx));
17658:     if( p->mode==MODE_Ascii ){
17659:       xRead = ascii_read_one_field;
17660:     }else{
17661:       xRead = csv_read_one_field;
17662:     }
17663:     for(i=1; i<nArg; i++){
17664:       char *z = azArg[i];
17665:       if( z[0]=='-' && z[1]=='-' ) z++;
17666:       if( z[0]!='-' ){
17667:         if( zFile==0 ){
17668:           zFile = z;
17669:         }else if( zTable==0 ){
17670:           zTable = z;
17671:         }else{
17672:           utf8_printf(p->out, "ERROR: extra argument: \"%s\".  Usage:\n", z);
17673:           showHelp(p->out, "import");
17674:           rc = 1;
17675:           goto meta_command_exit;
17676:         }
17677:       }else if( strcmp(z,"-v")==0 ){
17678:         eVerbose++;
17679:       }else if( strcmp(z,"-skip")==0 && i<nArg-1 ){
17680:         nSkip = integerValue(azArg[++i]);
17681:       }else if( strcmp(z,"-ascii")==0 ){
17682:         sCtx.cColSep = SEP_Unit[0];
17683:         sCtx.cRowSep = SEP_Record[0];
17684:         xRead = ascii_read_one_field;
17685:         useOutputMode = 0;
17686:       }else if( strcmp(z,"-csv")==0 ){
17687:         sCtx.cColSep = ',';
17688:         sCtx.cRowSep = '\n';
17689:         xRead = csv_read_one_field;
17690:         useOutputMode = 0;
17691:       }else{
17692:         utf8_printf(p->out, "ERROR: unknown option: \"%s\".  Usage:\n", z);
17693:         showHelp(p->out, "import");
17694:         rc = 1;
17695:         goto meta_command_exit;
17696:       }
17697:     }
17698:     if( zTable==0 ){
17699:       utf8_printf(p->out, "ERROR: missing %s argument. Usage:\n",
17700:                   zFile==0 ? "FILE" : "TABLE");
17701:       showHelp(p->out, "import");
17702:       rc = 1;
17703:       goto meta_command_exit;
17704:     }
17705:     seenInterrupt = 0;
17706:     open_db(p, 0);
17707:     if( useOutputMode ){
17708:       /* If neither the --csv or --ascii options are specified, then set
17709:       ** the column and row separator characters from the output mode. */
17710:       nSep = strlen30(p->colSeparator);
17711:       if( nSep==0 ){
17712:         raw_printf(stderr,
17713:                    "Error: non-null column separator required for import\n");
17714:         rc = 1;
17715:         goto meta_command_exit;
17716:       }
17717:       if( nSep>1 ){
17718:         raw_printf(stderr,
17719:               "Error: multi-character column separators not allowed"
17720:               " for import\n");
17721:         rc = 1;
17722:         goto meta_command_exit;
17723:       }
17724:       nSep = strlen30(p->rowSeparator);
17725:       if( nSep==0 ){
17726:         raw_printf(stderr,
17727:             "Error: non-null row separator required for import\n");
17728:         rc = 1;
17729:         goto meta_command_exit;
17730:       }
17731:       if( nSep==2 && p->mode==MODE_Csv && strcmp(p->rowSeparator,SEP_CrLf)==0 ){
17732:         /* When importing CSV (only), if the row separator is set to the
17733:         ** default output row separator, change it to the default input
17734:         ** row separator.  This avoids having to maintain different input
17735:         ** and output row separators. */
17736:         sqlite3_snprintf(sizeof(p->rowSeparator), p->rowSeparator, SEP_Row);
17737:         nSep = strlen30(p->rowSeparator);
17738:       }
17739:       if( nSep>1 ){
17740:         raw_printf(stderr, "Error: multi-character row separators not allowed"
17741:                            " for import\n");
17742:         rc = 1;
17743:         goto meta_command_exit;
17744:       }
17745:       sCtx.cColSep = p->colSeparator[0];
17746:       sCtx.cRowSep = p->rowSeparator[0];
17747:     }
17748:     sCtx.zFile = zFile;
17749:     sCtx.nLine = 1;
17750:     if( sCtx.zFile[0]=='|' ){
17751: #ifdef SQLITE_OMIT_POPEN
17752:       raw_printf(stderr, "Error: pipes are not supported in this OS\n");
17753:       rc = 1;
17754:       goto meta_command_exit;
17755: #else
17756:       sCtx.in = popen(sCtx.zFile+1, "r");
17757:       sCtx.zFile = "<pipe>";
17758:       sCtx.xCloser = pclose;
17759: #endif
17760:     }else{
17761:       sCtx.in = fopen(sCtx.zFile, "rb");
17762:       sCtx.xCloser = fclose;
17763:     }
17764:     if( sCtx.in==0 ){
17765:       utf8_printf(stderr, "Error: cannot open \"%s\"\n", zFile);
17766:       rc = 1;
17767:       goto meta_command_exit;
17768:     }
17769:     if( eVerbose>=2 || (eVerbose>=1 && useOutputMode) ){
17770:       char zSep[2];
17771:       zSep[1] = 0;
17772:       zSep[0] = sCtx.cColSep;
17773:       utf8_printf(p->out, "Column separator ");
17774:       output_c_string(p->out, zSep);
17775:       utf8_printf(p->out, ", row separator ");
17776:       zSep[0] = sCtx.cRowSep;
17777:       output_c_string(p->out, zSep);
17778:       utf8_printf(p->out, "\n");
17779:     }
17780:     while( (nSkip--)>0 ){
17781:       while( xRead(&sCtx) && sCtx.cTerm==sCtx.cColSep ){}
17782:     }
17783:     zSql = sqlite3_mprintf("SELECT * FROM %s", zTable);
17784:     if( zSql==0 ){
17785:       import_cleanup(&sCtx);
17786:       shell_out_of_memory();
17787:     }
17788:     nByte = strlen30(zSql);
17789:     rc = sqlite3_prepare_v2(p->db, zSql, -1, &pStmt, 0);
17790:     import_append_char(&sCtx, 0);    /* To ensure sCtx.z is allocated */
17791:     if( rc && sqlite3_strglob("no such table: *", sqlite3_errmsg(p->db))==0 ){
17792:       char *zCreate = sqlite3_mprintf("CREATE TABLE %s", zTable);
17793:       char cSep = '(';
17794:       while( xRead(&sCtx) ){
17795:         zCreate = sqlite3_mprintf("%z%c\n  \"%w\" TEXT", zCreate, cSep, sCtx.z);
17796:         cSep = ',';
17797:         if( sCtx.cTerm!=sCtx.cColSep ) break;
17798:       }
17799:       if( cSep=='(' ){
17800:         sqlite3_free(zCreate);
17801:         import_cleanup(&sCtx);
17802:         utf8_printf(stderr,"%s: empty file\n", sCtx.zFile);
17803:         rc = 1;
17804:         goto meta_command_exit;
17805:       }
17806:       zCreate = sqlite3_mprintf("%z\n)", zCreate);
17807:       if( eVerbose>=1 ){
17808:         utf8_printf(p->out, "%s\n", zCreate);
17809:       }
17810:       rc = sqlite3_exec(p->db, zCreate, 0, 0, 0);
17811:       sqlite3_free(zCreate);
17812:       if( rc ){
17813:         utf8_printf(stderr, "CREATE TABLE %s(...) failed: %s\n", zTable,
17814:                 sqlite3_errmsg(p->db));
17815:         import_cleanup(&sCtx);
17816:         rc = 1;
17817:         goto meta_command_exit;
17818:       }
17819:       rc = sqlite3_prepare_v2(p->db, zSql, -1, &pStmt, 0);
17820:     }
17821:     sqlite3_free(zSql);
17822:     if( rc ){
17823:       if (pStmt) sqlite3_finalize(pStmt);
17824:       utf8_printf(stderr,"Error: %s\n", sqlite3_errmsg(p->db));
17825:       import_cleanup(&sCtx);
17826:       rc = 1;
17827:       goto meta_command_exit;
17828:     }
17829:     nCol = sqlite3_column_count(pStmt);
17830:     sqlite3_finalize(pStmt);
17831:     pStmt = 0;
17832:     if( nCol==0 ) return 0; /* no columns, no error */
17833:     zSql = sqlite3_malloc64( nByte*2 + 20 + nCol*2 );
17834:     if( zSql==0 ){
17835:       import_cleanup(&sCtx);
17836:       shell_out_of_memory();
17837:     }
17838:     sqlite3_snprintf(nByte+20, zSql, "INSERT INTO \"%w\" VALUES(?", zTable);
17839:     j = strlen30(zSql);
17840:     for(i=1; i<nCol; i++){
17841:       zSql[j++] = ',';
17842:       zSql[j++] = '?';
17843:     }
17844:     zSql[j++] = ')';
17845:     zSql[j] = 0;
17846:     if( eVerbose>=2 ){
17847:       utf8_printf(p->out, "Insert using: %s\n", zSql);
17848:     }
17849:     rc = sqlite3_prepare_v2(p->db, zSql, -1, &pStmt, 0);
17850:     sqlite3_free(zSql);
17851:     if( rc ){
17852:       utf8_printf(stderr, "Error: %s\n", sqlite3_errmsg(p->db));
17853:       if (pStmt) sqlite3_finalize(pStmt);
17854:       import_cleanup(&sCtx);
17855:       rc = 1;
17856:       goto meta_command_exit;
17857:     }
17858:     needCommit = sqlite3_get_autocommit(p->db);
17859:     if( needCommit ) sqlite3_exec(p->db, "BEGIN", 0, 0, 0);
17860:     do{
17861:       int startLine = sCtx.nLine;
17862:       for(i=0; i<nCol; i++){
17863:         char *z = xRead(&sCtx);
17864:         /*
17865:         ** Did we reach end-of-file before finding any columns?
17866:         ** If so, stop instead of NULL filling the remaining columns.
17867:         */
17868:         if( z==0 && i==0 ) break;
17869:         /*
17870:         ** Did we reach end-of-file OR end-of-line before finding any
17871:         ** columns in ASCII mode?  If so, stop instead of NULL filling
17872:         ** the remaining columns.
17873:         */
17874:         if( p->mode==MODE_Ascii && (z==0 || z[0]==0) && i==0 ) break;
17875:         sqlite3_bind_text(pStmt, i+1, z, -1, SQLITE_TRANSIENT);
17876:         if( i<nCol-1 && sCtx.cTerm!=sCtx.cColSep ){
17877:           utf8_printf(stderr, "%s:%d: expected %d columns but found %d - "
17878:                           "filling the rest with NULL\n",
17879:                           sCtx.zFile, startLine, nCol, i+1);
17880:           i += 2;
17881:           while( i<=nCol ){ sqlite3_bind_null(pStmt, i); i++; }
17882:         }
17883:       }
17884:       if( sCtx.cTerm==sCtx.cColSep ){
17885:         do{
17886:           xRead(&sCtx);
17887:           i++;
17888:         }while( sCtx.cTerm==sCtx.cColSep );
17889:         utf8_printf(stderr, "%s:%d: expected %d columns but found %d - "
17890:                         "extras ignored\n",
17891:                         sCtx.zFile, startLine, nCol, i);
17892:       }
17893:       if( i>=nCol ){
17894:         sqlite3_step(pStmt);
17895:         rc = sqlite3_reset(pStmt);
17896:         if( rc!=SQLITE_OK ){
17897:           utf8_printf(stderr, "%s:%d: INSERT failed: %s\n", sCtx.zFile,
17898:                       startLine, sqlite3_errmsg(p->db));
17899:           sCtx.nErr++;
17900:         }else{
17901:           sCtx.nRow++;
17902:         }
17903:       }
17904:     }while( sCtx.cTerm!=EOF );
17905: 
17906:     import_cleanup(&sCtx);
17907:     sqlite3_finalize(pStmt);
17908:     if( needCommit ) sqlite3_exec(p->db, "COMMIT", 0, 0, 0);
17909:     if( eVerbose>0 ){
17910:       utf8_printf(p->out,
17911:           "Added %d rows with %d errors using %d lines of input\n",
17912:           sCtx.nRow, sCtx.nErr, sCtx.nLine-1);
17913:     }
17914:   }else
17915: 
17916: #ifndef SQLITE_UNTESTABLE
17917:   if( c=='i' && strncmp(azArg[0], "imposter", n)==0 ){
17918:     char *zSql;
17919:     char *zCollist = 0;
17920:     sqlite3_stmt *pStmt;
17921:     int tnum = 0;
17922:     int isWO = 0;  /* True if making an imposter of a WITHOUT ROWID table */
17923:     int lenPK = 0; /* Length of the PRIMARY KEY string for isWO tables */
17924:     int i;
17925:     if( !(nArg==3 || (nArg==2 && sqlite3_stricmp(azArg[1],"off")==0)) ){
17926:       utf8_printf(stderr, "Usage: .imposter INDEX IMPOSTER\n"
17927:                           "       .imposter off\n");
17928:       /* Also allowed, but not documented:
17929:       **
17930:       **    .imposter TABLE IMPOSTER
17931:       **
17932:       ** where TABLE is a WITHOUT ROWID table.  In that case, the
17933:       ** imposter is another WITHOUT ROWID table with the columns in
17934:       ** storage order. */
17935:       rc = 1;
17936:       goto meta_command_exit;
17937:     }
17938:     open_db(p, 0);
17939:     if( nArg==2 ){
17940:       sqlite3_test_control(SQLITE_TESTCTRL_IMPOSTER, p->db, "main", 0, 1);
17941:       goto meta_command_exit;
17942:     }
17943:     zSql = sqlite3_mprintf(
17944:       "SELECT rootpage, 0 FROM sqlite_schema"
17945:       " WHERE name='%q' AND type='index'"
17946:       "UNION ALL "
17947:       "SELECT rootpage, 1 FROM sqlite_schema"
17948:       " WHERE name='%q' AND type='table'"
17949:       "   AND sql LIKE '%%without%%rowid%%'",
17950:       azArg[1], azArg[1]
17951:     );
17952:     sqlite3_prepare_v2(p->db, zSql, -1, &pStmt, 0);
17953:     sqlite3_free(zSql);
17954:     if( sqlite3_step(pStmt)==SQLITE_ROW ){
17955:       tnum = sqlite3_column_int(pStmt, 0);
17956:       isWO = sqlite3_column_int(pStmt, 1);
17957:     }
17958:     sqlite3_finalize(pStmt);
17959:     zSql = sqlite3_mprintf("PRAGMA index_xinfo='%q'", azArg[1]);
17960:     rc = sqlite3_prepare_v2(p->db, zSql, -1, &pStmt, 0);
17961:     sqlite3_free(zSql);
17962:     i = 0;
17963:     while( sqlite3_step(pStmt)==SQLITE_ROW ){
17964:       char zLabel[20];
17965:       const char *zCol = (const char*)sqlite3_column_text(pStmt,2);
17966:       i++;
17967:       if( zCol==0 ){
17968:         if( sqlite3_column_int(pStmt,1)==-1 ){
17969:           zCol = "_ROWID_";
17970:         }else{
17971:           sqlite3_snprintf(sizeof(zLabel),zLabel,"expr%d",i);
17972:           zCol = zLabel;
17973:         }
17974:       }
17975:       if( isWO && lenPK==0 && sqlite3_column_int(pStmt,5)==0 && zCollist ){
17976:         lenPK = (int)strlen(zCollist);
17977:       }
17978:       if( zCollist==0 ){
17979:         zCollist = sqlite3_mprintf("\"%w\"", zCol);
17980:       }else{
17981:         zCollist = sqlite3_mprintf("%z,\"%w\"", zCollist, zCol);
17982:       }
17983:     }
17984:     sqlite3_finalize(pStmt);
17985:     if( i==0 || tnum==0 ){
17986:       utf8_printf(stderr, "no such index: \"%s\"\n", azArg[1]);
17987:       rc = 1;
17988:       sqlite3_free(zCollist);
17989:       goto meta_command_exit;
17990:     }
17991:     if( lenPK==0 ) lenPK = 100000;
17992:     zSql = sqlite3_mprintf(
17993:           "CREATE TABLE \"%w\"(%s,PRIMARY KEY(%.*s))WITHOUT ROWID",
17994:           azArg[2], zCollist, lenPK, zCollist);
17995:     sqlite3_free(zCollist);
17996:     rc = sqlite3_test_control(SQLITE_TESTCTRL_IMPOSTER, p->db, "main", 1, tnum);
17997:     if( rc==SQLITE_OK ){
17998:       rc = sqlite3_exec(p->db, zSql, 0, 0, 0);
17999:       sqlite3_test_control(SQLITE_TESTCTRL_IMPOSTER, p->db, "main", 0, 0);
18000:       if( rc ){
18001:         utf8_printf(stderr, "Error in [%s]: %s\n", zSql, sqlite3_errmsg(p->db));
18002:       }else{
18003:         utf8_printf(stdout, "%s;\n", zSql);
18004:         raw_printf(stdout,
18005:           "WARNING: writing to an imposter table will corrupt the \"%s\" %s!\n",
18006:           azArg[1], isWO ? "table" : "index"
18007:         );
18008:       }
18009:     }else{
18010:       raw_printf(stderr, "SQLITE_TESTCTRL_IMPOSTER returns %d\n", rc);
18011:       rc = 1;
18012:     }
18013:     sqlite3_free(zSql);
18014:   }else
18015: #endif /* !defined(SQLITE_OMIT_TEST_CONTROL) */
18016: 
18017: #ifdef SQLITE_ENABLE_IOTRACE
18018:   if( c=='i' && strncmp(azArg[0], "iotrace", n)==0 ){
18019:     SQLITE_API extern void (SQLITE_CDECL *sqlite3IoTrace)(const char*, ...);
18020:     if( iotrace && iotrace!=stdout ) fclose(iotrace);
18021:     iotrace = 0;
18022:     if( nArg<2 ){
18023:       sqlite3IoTrace = 0;
18024:     }else if( strcmp(azArg[1], "-")==0 ){
18025:       sqlite3IoTrace = iotracePrintf;
18026:       iotrace = stdout;
18027:     }else{
18028:       iotrace = fopen(azArg[1], "w");
18029:       if( iotrace==0 ){
18030:         utf8_printf(stderr, "Error: cannot open \"%s\"\n", azArg[1]);
18031:         sqlite3IoTrace = 0;
18032:         rc = 1;
18033:       }else{
18034:         sqlite3IoTrace = iotracePrintf;
18035:       }
18036:     }
18037:   }else
18038: #endif
18039: 
18040:   if( c=='l' && n>=5 && strncmp(azArg[0], "limits", n)==0 ){
18041:     static const struct {
18042:        const char *zLimitName;   /* Name of a limit */
18043:        int limitCode;            /* Integer code for that limit */
18044:     } aLimit[] = {
18045:       { "length",                SQLITE_LIMIT_LENGTH                    },
18046:       { "sql_length",            SQLITE_LIMIT_SQL_LENGTH                },
18047:       { "column",                SQLITE_LIMIT_COLUMN                    },
18048:       { "expr_depth",            SQLITE_LIMIT_EXPR_DEPTH                },
18049:       { "compound_select",       SQLITE_LIMIT_COMPOUND_SELECT           },
18050:       { "vdbe_op",               SQLITE_LIMIT_VDBE_OP                   },
18051:       { "function_arg",          SQLITE_LIMIT_FUNCTION_ARG              },
18052:       { "attached",              SQLITE_LIMIT_ATTACHED                  },
18053:       { "like_pattern_length",   SQLITE_LIMIT_LIKE_PATTERN_LENGTH       },
18054:       { "variable_number",       SQLITE_LIMIT_VARIABLE_NUMBER           },
18055:       { "trigger_depth",         SQLITE_LIMIT_TRIGGER_DEPTH             },
18056:       { "worker_threads",        SQLITE_LIMIT_WORKER_THREADS            },
18057:     };
18058:     int i, n2;
18059:     open_db(p, 0);
18060:     if( nArg==1 ){
18061:       for(i=0; i<ArraySize(aLimit); i++){
18062:         printf("%20s %d\n", aLimit[i].zLimitName,
18063:                sqlite3_limit(p->db, aLimit[i].limitCode, -1));
18064:       }
18065:     }else if( nArg>3 ){
18066:       raw_printf(stderr, "Usage: .limit NAME ?NEW-VALUE?\n");
18067:       rc = 1;
18068:       goto meta_command_exit;
18069:     }else{
18070:       int iLimit = -1;
18071:       n2 = strlen30(azArg[1]);
18072:       for(i=0; i<ArraySize(aLimit); i++){
18073:         if( sqlite3_strnicmp(aLimit[i].zLimitName, azArg[1], n2)==0 ){
18074:           if( iLimit<0 ){
18075:             iLimit = i;
18076:           }else{
18077:             utf8_printf(stderr, "ambiguous limit: \"%s\"\n", azArg[1]);
18078:             rc = 1;
18079:             goto meta_command_exit;
18080:           }
18081:         }
18082:       }
18083:       if( iLimit<0 ){
18084:         utf8_printf(stderr, "unknown limit: \"%s\"\n"
18085:                         "enter \".limits\" with no arguments for a list.\n",
18086:                          azArg[1]);
18087:         rc = 1;
18088:         goto meta_command_exit;
18089:       }
18090:       if( nArg==3 ){
18091:         sqlite3_limit(p->db, aLimit[iLimit].limitCode,
18092:                       (int)integerValue(azArg[2]));
18093:       }
18094:       printf("%20s %d\n", aLimit[iLimit].zLimitName,
18095:              sqlite3_limit(p->db, aLimit[iLimit].limitCode, -1));
18096:     }
18097:   }else
18098: 
18099:   if( c=='l' && n>2 && strncmp(azArg[0], "lint", n)==0 ){
18100:     open_db(p, 0);
18101:     lintDotCommand(p, azArg, nArg);
18102:   }else
18103: 
18104: #ifndef SQLITE_OMIT_LOAD_EXTENSION
18105:   if( c=='l' && strncmp(azArg[0], "load", n)==0 ){
18106:     const char *zFile, *zProc;
18107:     char *zErrMsg = 0;
18108:     if( nArg<2 ){
18109:       raw_printf(stderr, "Usage: .load FILE ?ENTRYPOINT?\n");
18110:       rc = 1;
18111:       goto meta_command_exit;
18112:     }
18113:     zFile = azArg[1];
18114:     zProc = nArg>=3 ? azArg[2] : 0;
18115:     open_db(p, 0);
18116:     rc = sqlite3_load_extension(p->db, zFile, zProc, &zErrMsg);
18117:     if( rc!=SQLITE_OK ){
18118:       utf8_printf(stderr, "Error: %s\n", zErrMsg);
18119:       sqlite3_free(zErrMsg);
18120:       rc = 1;
18121:     }
18122:   }else
18123: #endif
18124: 
18125:   if( c=='l' && strncmp(azArg[0], "log", n)==0 ){
18126:     if( nArg!=2 ){
18127:       raw_printf(stderr, "Usage: .log FILENAME\n");
18128:       rc = 1;
18129:     }else{
18130:       const char *zFile = azArg[1];
18131:       output_file_close(p->pLog);
18132:       p->pLog = output_file_open(zFile, 0);
18133:     }
18134:   }else
18135: 
18136:   if( c=='m' && strncmp(azArg[0], "mode", n)==0 ){
18137:     const char *zMode = nArg>=2 ? azArg[1] : "";
18138:     int n2 = strlen30(zMode);
18139:     int c2 = zMode[0];
18140:     if( c2=='l' && n2>2 && strncmp(azArg[1],"lines",n2)==0 ){
18141:       p->mode = MODE_Line;
18142:       sqlite3_snprintf(sizeof(p->rowSeparator), p->rowSeparator, SEP_Row);
18143:     }else if( c2=='c' && strncmp(azArg[1],"columns",n2)==0 ){
18144:       p->mode = MODE_Column;
18145:       if( (p->shellFlgs & SHFLG_HeaderSet)==0 ){
18146:         p->showHeader = 1;
18147:       }
18148:       sqlite3_snprintf(sizeof(p->rowSeparator), p->rowSeparator, SEP_Row);
18149:     }else if( c2=='l' && n2>2 && strncmp(azArg[1],"list",n2)==0 ){
18150:       p->mode = MODE_List;
18151:       sqlite3_snprintf(sizeof(p->colSeparator), p->colSeparator, SEP_Column);
18152:       sqlite3_snprintf(sizeof(p->rowSeparator), p->rowSeparator, SEP_Row);
18153:     }else if( c2=='h' && strncmp(azArg[1],"html",n2)==0 ){
18154:       p->mode = MODE_Html;
18155:     }else if( c2=='t' && strncmp(azArg[1],"tcl",n2)==0 ){
18156:       p->mode = MODE_Tcl;
18157:       sqlite3_snprintf(sizeof(p->colSeparator), p->colSeparator, SEP_Space);
18158:       sqlite3_snprintf(sizeof(p->rowSeparator), p->rowSeparator, SEP_Row);
18159:     }else if( c2=='c' && strncmp(azArg[1],"csv",n2)==0 ){
18160:       p->mode = MODE_Csv;
18161:       sqlite3_snprintf(sizeof(p->colSeparator), p->colSeparator, SEP_Comma);
18162:       sqlite3_snprintf(sizeof(p->rowSeparator), p->rowSeparator, SEP_CrLf);
18163:     }else if( c2=='t' && strncmp(azArg[1],"tabs",n2)==0 ){
18164:       p->mode = MODE_List;
18165:       sqlite3_snprintf(sizeof(p->colSeparator), p->colSeparator, SEP_Tab);
18166:     }else if( c2=='i' && strncmp(azArg[1],"insert",n2)==0 ){
18167:       p->mode = MODE_Insert;
18168:       set_table_name(p, nArg>=3 ? azArg[2] : "table");
18169:     }else if( c2=='q' && strncmp(azArg[1],"quote",n2)==0 ){
18170:       p->mode = MODE_Quote;
18171:       sqlite3_snprintf(sizeof(p->colSeparator), p->colSeparator, SEP_Comma);
18172:       sqlite3_snprintf(sizeof(p->rowSeparator), p->rowSeparator, SEP_Row);
18173:     }else if( c2=='a' && strncmp(azArg[1],"ascii",n2)==0 ){
18174:       p->mode = MODE_Ascii;
18175:       sqlite3_snprintf(sizeof(p->colSeparator), p->colSeparator, SEP_Unit);
18176:       sqlite3_snprintf(sizeof(p->rowSeparator), p->rowSeparator, SEP_Record);
18177:     }else if( c2=='m' && strncmp(azArg[1],"markdown",n2)==0 ){
18178:       p->mode = MODE_Markdown;
18179:     }else if( c2=='t' && strncmp(azArg[1],"table",n2)==0 ){
18180:       p->mode = MODE_Table;
18181:     }else if( c2=='b' && strncmp(azArg[1],"box",n2)==0 ){
18182:       p->mode = MODE_Box;
18183:     }else if( c2=='j' && strncmp(azArg[1],"json",n2)==0 ){
18184:       p->mode = MODE_Json;
18185:     }else if( nArg==1 ){
18186:       raw_printf(p->out, "current output mode: %s\n", modeDescr[p->mode]);
18187:     }else{
18188:       raw_printf(stderr, "Error: mode should be one of: "
18189:          "ascii box column csv html insert json line list markdown "
18190:          "quote table tabs tcl\n");
18191:       rc = 1;
18192:     }
18193:     p->cMode = p->mode;
18194:   }else
18195: 
18196:   if( c=='n' && strncmp(azArg[0], "nullvalue", n)==0 ){
18197:     if( nArg==2 ){
18198:       sqlite3_snprintf(sizeof(p->nullValue), p->nullValue,
18199:                        "%.*s", (int)ArraySize(p->nullValue)-1, azArg[1]);
18200:     }else{
18201:       raw_printf(stderr, "Usage: .nullvalue STRING\n");
18202:       rc = 1;
18203:     }
18204:   }else
18205: 
18206: #ifdef SQLITE_DEBUG
18207:   if( c=='o' && strcmp(azArg[0],"oom")==0 ){
18208:     int i;
18209:     for(i=1; i<nArg; i++){
18210:       const char *z = azArg[i];
18211:       if( z[0]=='-' && z[1]=='-' ) z++;
18212:       if( strcmp(z,"-repeat")==0 ){
18213:         if( i==nArg-1 ){
18214:           raw_printf(p->out, "missing argument on \"%s\"\n", azArg[i]);
18215:           rc = 1;
18216:         }else{
18217:           oomRepeat = (int)integerValue(azArg[++i]);
18218:         }
18219:       }else if( IsDigit(z[0]) ){
18220:         oomCounter = (int)integerValue(azArg[i]);
18221:       }else{
18222:         raw_printf(p->out, "unknown argument: \"%s\"\n", azArg[i]);
18223:         raw_printf(p->out, "Usage: .oom [--repeat N] [M]\n");
18224:         rc = 1;
18225:       }
18226:     }
18227:     if( rc==0 ){
18228:       raw_printf(p->out, "oomCounter = %d\n", oomCounter);
18229:       raw_printf(p->out, "oomRepeat  = %d\n", oomRepeat);
18230:     }
18231:   }else
18232: #endif /* SQLITE_DEBUG */
18233: 
18234:   if( c=='o' && strncmp(azArg[0], "open", n)==0 && n>=2 ){
18235:     char *zNewFilename;  /* Name of the database file to open */
18236:     int iName = 1;       /* Index in azArg[] of the filename */
18237:     int newFlag = 0;     /* True to delete file before opening */
18238:     /* Close the existing database */
18239:     session_close_all(p);
18240:     close_db(p->db);
18241:     p->db = 0;
18242:     p->zDbFilename = 0;
18243:     sqlite3_free(p->zFreeOnClose);
18244:     p->zFreeOnClose = 0;
18245:     p->openMode = SHELL_OPEN_UNSPEC;
18246:     p->openFlags = 0;
18247:     p->szMax = 0;
18248:     /* Check for command-line arguments */
18249:     for(iName=1; iName<nArg && azArg[iName][0]=='-'; iName++){
18250:       const char *z = azArg[iName];
18251:       if( optionMatch(z,"new") ){
18252:         newFlag = 1;
18253: #ifdef SQLITE_HAVE_ZLIB
18254:       }else if( optionMatch(z, "zip") ){
18255:         p->openMode = SHELL_OPEN_ZIPFILE;
18256: #endif
18257:       }else if( optionMatch(z, "append") ){
18258:         p->openMode = SHELL_OPEN_APPENDVFS;
18259:       }else if( optionMatch(z, "readonly") ){
18260:         p->openMode = SHELL_OPEN_READONLY;
18261:       }else if( optionMatch(z, "nofollow") ){
18262:         p->openFlags |= SQLITE_OPEN_NOFOLLOW;
18263: #ifdef SQLITE_ENABLE_DESERIALIZE
18264:       }else if( optionMatch(z, "deserialize") ){
18265:         p->openMode = SHELL_OPEN_DESERIALIZE;
18266:       }else if( optionMatch(z, "hexdb") ){
18267:         p->openMode = SHELL_OPEN_HEXDB;
18268:       }else if( optionMatch(z, "maxsize") && iName+1<nArg ){
18269:         p->szMax = integerValue(azArg[++iName]);
18270: #endif /* SQLITE_ENABLE_DESERIALIZE */
18271:       }else if( z[0]=='-' ){
18272:         utf8_printf(stderr, "unknown option: %s\n", z);
18273:         rc = 1;
18274:         goto meta_command_exit;
18275:       }
18276:     }
18277:     /* If a filename is specified, try to open it first */
18278:     zNewFilename = nArg>iName ? sqlite3_mprintf("%s", azArg[iName]) : 0;
18279:     if( zNewFilename || p->openMode==SHELL_OPEN_HEXDB ){
18280:       if( newFlag ) shellDeleteFile(zNewFilename);
18281:       p->zDbFilename = zNewFilename;
18282:       open_db(p, OPEN_DB_KEEPALIVE);
18283:       if( p->db==0 ){
18284:         utf8_printf(stderr, "Error: cannot open '%s'\n", zNewFilename);
18285:         sqlite3_free(zNewFilename);
18286:       }else{
18287:         p->zFreeOnClose = zNewFilename;
18288:       }
18289:     }
18290:     if( p->db==0 ){
18291:       /* As a fall-back open a TEMP database */
18292:       p->zDbFilename = 0;
18293:       open_db(p, 0);
18294:     }
18295:   }else
18296: 
18297:   if( (c=='o'
18298:         && (strncmp(azArg[0], "output", n)==0||strncmp(azArg[0], "once", n)==0))
18299:    || (c=='e' && n==5 && strcmp(azArg[0],"excel")==0)
18300:   ){
18301:     const char *zFile = 0;
18302:     int bTxtMode = 0;
18303:     int i;
18304:     int eMode = 0;
18305:     int bBOM = 0;
18306:     int bOnce = 0;  /* 0: .output, 1: .once, 2: .excel */
18307: 
18308:     if( c=='e' ){
18309:       eMode = 'x';
18310:       bOnce = 2;
18311:     }else if( strncmp(azArg[0],"once",n)==0 ){
18312:       bOnce = 1;
18313:     }
18314:     for(i=1; i<nArg; i++){
18315:       char *z = azArg[i];
18316:       if( z[0]=='-' ){
18317:         if( z[1]=='-' ) z++;
18318:         if( strcmp(z,"-bom")==0 ){
18319:           bBOM = 1;
18320:         }else if( c!='e' && strcmp(z,"-x")==0 ){
18321:           eMode = 'x';  /* spreadsheet */
18322:         }else if( c!='e' && strcmp(z,"-e")==0 ){
18323:           eMode = 'e';  /* text editor */
18324:         }else{
18325:           utf8_printf(p->out, "ERROR: unknown option: \"%s\".  Usage:\n",
18326:                       azArg[i]);
18327:           showHelp(p->out, azArg[0]);
18328:           rc = 1;
18329:           goto meta_command_exit;
18330:         }
18331:       }else if( zFile==0 ){
18332:         zFile = z;
18333:       }else{
18334:         utf8_printf(p->out,"ERROR: extra parameter: \"%s\".  Usage:\n",
18335:                     azArg[i]);
18336:         showHelp(p->out, azArg[0]);
18337:         rc = 1;
18338:         goto meta_command_exit;
18339:       }
18340:     }
18341:     if( zFile==0 ) zFile = "stdout";
18342:     if( bOnce ){
18343:       p->outCount = 2;
18344:     }else{
18345:       p->outCount = 0;
18346:     }
18347:     output_reset(p);
18348: #ifndef SQLITE_NOHAVE_SYSTEM
18349:     if( eMode=='e' || eMode=='x' ){
18350:       p->doXdgOpen = 1;
18351:       outputModePush(p);
18352:       if( eMode=='x' ){
18353:         /* spreadsheet mode.  Output as CSV. */
18354:         newTempFile(p, "csv");
18355:         ShellClearFlag(p, SHFLG_Echo);
18356:         p->mode = MODE_Csv;
18357:         sqlite3_snprintf(sizeof(p->colSeparator), p->colSeparator, SEP_Comma);
18358:         sqlite3_snprintf(sizeof(p->rowSeparator), p->rowSeparator, SEP_CrLf);
18359:       }else{
18360:         /* text editor mode */
18361:         newTempFile(p, "txt");
18362:         bTxtMode = 1;
18363:       }
18364:       zFile = p->zTempFile;
18365:     }
18366: #endif /* SQLITE_NOHAVE_SYSTEM */
18367:     if( zFile[0]=='|' ){
18368: #ifdef SQLITE_OMIT_POPEN
18369:       raw_printf(stderr, "Error: pipes are not supported in this OS\n");
18370:       rc = 1;
18371:       p->out = stdout;
18372: #else
18373:       p->out = popen(zFile + 1, "w");
18374:       if( p->out==0 ){
18375:         utf8_printf(stderr,"Error: cannot open pipe \"%s\"\n", zFile + 1);
18376:         p->out = stdout;
18377:         rc = 1;
18378:       }else{
18379:         if( bBOM ) fprintf(p->out,"\357\273\277");
18380:         sqlite3_snprintf(sizeof(p->outfile), p->outfile, "%s", zFile);
18381:       }
18382: #endif
18383:     }else{
18384:       p->out = output_file_open(zFile, bTxtMode);
18385:       if( p->out==0 ){
18386:         if( strcmp(zFile,"off")!=0 ){
18387:           utf8_printf(stderr,"Error: cannot write to \"%s\"\n", zFile);
18388:         }
18389:         p->out = stdout;
18390:         rc = 1;
18391:       } else {
18392:         if( bBOM ) fprintf(p->out,"\357\273\277");
18393:         sqlite3_snprintf(sizeof(p->outfile), p->outfile, "%s", zFile);
18394:       }
18395:     }
18396:   }else
18397: 
18398:   if( c=='p' && n>=3 && strncmp(azArg[0], "parameter", n)==0 ){
18399:     open_db(p,0);
18400:     if( nArg<=1 ) goto parameter_syntax_error;
18401: 
18402:     /* .parameter clear
18403:     ** Clear all bind parameters by dropping the TEMP table that holds them.
18404:     */
18405:     if( nArg==2 && strcmp(azArg[1],"clear")==0 ){
18406:       sqlite3_exec(p->db, "DROP TABLE IF EXISTS temp.sqlite_parameters;",
18407:                    0, 0, 0);
18408:     }else
18409: 
18410:     /* .parameter list
18411:     ** List all bind parameters.
18412:     */
18413:     if( nArg==2 && strcmp(azArg[1],"list")==0 ){
18414:       sqlite3_stmt *pStmt = 0;
18415:       int rx;
18416:       int len = 0;
18417:       rx = sqlite3_prepare_v2(p->db,
18418:              "SELECT max(length(key)) "
18419:              "FROM temp.sqlite_parameters;", -1, &pStmt, 0);
18420:       if( rx==SQLITE_OK && sqlite3_step(pStmt)==SQLITE_ROW ){
18421:         len = sqlite3_column_int(pStmt, 0);
18422:         if( len>40 ) len = 40;
18423:       }
18424:       sqlite3_finalize(pStmt);
18425:       pStmt = 0;
18426:       if( len ){
18427:         rx = sqlite3_prepare_v2(p->db,
18428:              "SELECT key, quote(value) "
18429:              "FROM temp.sqlite_parameters;", -1, &pStmt, 0);
18430:         while( sqlite3_step(pStmt)==SQLITE_ROW ){
18431:           utf8_printf(p->out, "%-*s %s\n", len, sqlite3_column_text(pStmt,0),
18432:                       sqlite3_column_text(pStmt,1));
18433:         }
18434:         sqlite3_finalize(pStmt);
18435:       }
18436:     }else
18437: 
18438:     /* .parameter init
18439:     ** Make sure the TEMP table used to hold bind parameters exists.
18440:     ** Create it if necessary.
18441:     */
18442:     if( nArg==2 && strcmp(azArg[1],"init")==0 ){
18443:       bind_table_init(p);
18444:     }else
18445: 
18446:     /* .parameter set NAME VALUE
18447:     ** Set or reset a bind parameter.  NAME should be the full parameter
18448:     ** name exactly as it appears in the query.  (ex: $abc, @def).  The
18449:     ** VALUE can be in either SQL literal notation, or if not it will be
18450:     ** understood to be a text string.
18451:     */
18452:     if( nArg==4 && strcmp(azArg[1],"set")==0 ){
18453:       int rx;
18454:       char *zSql;
18455:       sqlite3_stmt *pStmt;
18456:       const char *zKey = azArg[2];
18457:       const char *zValue = azArg[3];
18458:       bind_table_init(p);
18459:       zSql = sqlite3_mprintf(
18460:                   "REPLACE INTO temp.sqlite_parameters(key,value)"
18461:                   "VALUES(%Q,%s);", zKey, zValue);
18462:       if( zSql==0 ) shell_out_of_memory();
18463:       pStmt = 0;
18464:       rx = sqlite3_prepare_v2(p->db, zSql, -1, &pStmt, 0);
18465:       sqlite3_free(zSql);
18466:       if( rx!=SQLITE_OK ){
18467:         sqlite3_finalize(pStmt);
18468:         pStmt = 0;
18469:         zSql = sqlite3_mprintf(
18470:                    "REPLACE INTO temp.sqlite_parameters(key,value)"
18471:                    "VALUES(%Q,%Q);", zKey, zValue);
18472:         if( zSql==0 ) shell_out_of_memory();
18473:         rx = sqlite3_prepare_v2(p->db, zSql, -1, &pStmt, 0);
18474:         sqlite3_free(zSql);
18475:         if( rx!=SQLITE_OK ){
18476:           utf8_printf(p->out, "Error: %s\n", sqlite3_errmsg(p->db));
18477:           sqlite3_finalize(pStmt);
18478:           pStmt = 0;
18479:           rc = 1;
18480:         }
18481:       }
18482:       sqlite3_step(pStmt);
18483:       sqlite3_finalize(pStmt);
18484:     }else
18485: 
18486:     /* .parameter unset NAME
18487:     ** Remove the NAME binding from the parameter binding table, if it
18488:     ** exists.
18489:     */
18490:     if( nArg==3 && strcmp(azArg[1],"unset")==0 ){
18491:       char *zSql = sqlite3_mprintf(
18492:           "DELETE FROM temp.sqlite_parameters WHERE key=%Q", azArg[2]);
18493:       if( zSql==0 ) shell_out_of_memory();
18494:       sqlite3_exec(p->db, zSql, 0, 0, 0);
18495:       sqlite3_free(zSql);
18496:     }else
18497:     /* If no command name matches, show a syntax error */
18498:     parameter_syntax_error:
18499:     showHelp(p->out, "parameter");
18500:   }else
18501: 
18502:   if( c=='p' && n>=3 && strncmp(azArg[0], "print", n)==0 ){
18503:     int i;
18504:     for(i=1; i<nArg; i++){
18505:       if( i>1 ) raw_printf(p->out, " ");
18506:       utf8_printf(p->out, "%s", azArg[i]);
18507:     }
18508:     raw_printf(p->out, "\n");
18509:   }else
18510: 
18511: #ifndef SQLITE_OMIT_PROGRESS_CALLBACK
18512:   if( c=='p' && n>=3 && strncmp(azArg[0], "progress", n)==0 ){
18513:     int i;
18514:     int nn = 0;
18515:     p->flgProgress = 0;
18516:     p->mxProgress = 0;
18517:     p->nProgress = 0;
18518:     for(i=1; i<nArg; i++){
18519:       const char *z = azArg[i];
18520:       if( z[0]=='-' ){
18521:         z++;
18522:         if( z[0]=='-' ) z++;
18523:         if( strcmp(z,"quiet")==0 || strcmp(z,"q")==0 ){
18524:           p->flgProgress |= SHELL_PROGRESS_QUIET;
18525:           continue;
18526:         }
18527:         if( strcmp(z,"reset")==0 ){
18528:           p->flgProgress |= SHELL_PROGRESS_RESET;
18529:           continue;
18530:         }
18531:         if( strcmp(z,"once")==0 ){
18532:           p->flgProgress |= SHELL_PROGRESS_ONCE;
18533:           continue;
18534:         }
18535:         if( strcmp(z,"limit")==0 ){
18536:           if( i+1>=nArg ){
18537:             utf8_printf(stderr, "Error: missing argument on --limit\n");
18538:             rc = 1;
18539:             goto meta_command_exit;
18540:           }else{
18541:             p->mxProgress = (int)integerValue(azArg[++i]);
18542:           }
18543:           continue;
18544:         }
18545:         utf8_printf(stderr, "Error: unknown option: \"%s\"\n", azArg[i]);
18546:         rc = 1;
18547:         goto meta_command_exit;
18548:       }else{
18549:         nn = (int)integerValue(z);
18550:       }
18551:     }
18552:     open_db(p, 0);
18553:     sqlite3_progress_handler(p->db, nn, progress_handler, p);
18554:   }else
18555: #endif /* SQLITE_OMIT_PROGRESS_CALLBACK */
18556: 
18557:   if( c=='p' && strncmp(azArg[0], "prompt", n)==0 ){
18558:     if( nArg >= 2) {
18559:       strncpy(mainPrompt,azArg[1],(int)ArraySize(mainPrompt)-1);
18560:     }
18561:     if( nArg >= 3) {
18562:       strncpy(continuePrompt,azArg[2],(int)ArraySize(continuePrompt)-1);
18563:     }
18564:   }else
18565: 
18566:   if( c=='q' && strncmp(azArg[0], "quit", n)==0 ){
18567:     rc = 2;
18568:   }else
18569: 
18570:   if( c=='r' && n>=3 && strncmp(azArg[0], "read", n)==0 ){
18571:     FILE *inSaved = p->in;
18572:     int savedLineno = p->lineno;
18573:     if( nArg!=2 ){
18574:       raw_printf(stderr, "Usage: .read FILE\n");
18575:       rc = 1;
18576:       goto meta_command_exit;
18577:     }
18578:     if( notNormalFile(azArg[1])
18579:      || (p->in = fopen(azArg[1], "rb"))==0
18580:     ){
18581:       utf8_printf(stderr,"Error: cannot open \"%s\"\n", azArg[1]);
18582:       rc = 1;
18583:     }else{
18584:       rc = process_input(p);
18585:       fclose(p->in);
18586:     }
18587:     p->in = inSaved;
18588:     p->lineno = savedLineno;
18589:   }else
18590: 
18591:   if( c=='r' && n>=3 && strncmp(azArg[0], "restore", n)==0 ){
18592:     const char *zSrcFile;
18593:     const char *zDb;
18594:     sqlite3 *pSrc;
18595:     sqlite3_backup *pBackup;
18596:     int nTimeout = 0;
18597: 
18598:     if( nArg==2 ){
18599:       zSrcFile = azArg[1];
18600:       zDb = "main";
18601:     }else if( nArg==3 ){
18602:       zSrcFile = azArg[2];
18603:       zDb = azArg[1];
18604:     }else{
18605:       raw_printf(stderr, "Usage: .restore ?DB? FILE\n");
18606:       rc = 1;
18607:       goto meta_command_exit;
18608:     }
18609:     rc = sqlite3_open(zSrcFile, &pSrc);
18610:     if( rc!=SQLITE_OK ){
18611:       utf8_printf(stderr, "Error: cannot open \"%s\"\n", zSrcFile);
18612:       close_db(pSrc);
18613:       return 1;
18614:     }
18615:     open_db(p, 0);
18616:     pBackup = sqlite3_backup_init(p->db, zDb, pSrc, "main");
18617:     if( pBackup==0 ){
18618:       utf8_printf(stderr, "Error: %s\n", sqlite3_errmsg(p->db));
18619:       close_db(pSrc);
18620:       return 1;
18621:     }
18622:     while( (rc = sqlite3_backup_step(pBackup,100))==SQLITE_OK
18623:           || rc==SQLITE_BUSY  ){
18624:       if( rc==SQLITE_BUSY ){
18625:         if( nTimeout++ >= 3 ) break;
18626:         sqlite3_sleep(100);
18627:       }
18628:     }
18629:     sqlite3_backup_finish(pBackup);
18630:     if( rc==SQLITE_DONE ){
18631:       rc = 0;
18632:     }else if( rc==SQLITE_BUSY || rc==SQLITE_LOCKED ){
18633:       raw_printf(stderr, "Error: source database is busy\n");
18634:       rc = 1;
18635:     }else{
18636:       utf8_printf(stderr, "Error: %s\n", sqlite3_errmsg(p->db));
18637:       rc = 1;
18638:     }
18639:     close_db(pSrc);
18640:   }else
18641: 
18642:   if( c=='s' && strncmp(azArg[0], "scanstats", n)==0 ){
18643:     if( nArg==2 ){
18644:       p->scanstatsOn = (u8)booleanValue(azArg[1]);
18645: #ifndef SQLITE_ENABLE_STMT_SCANSTATUS
18646:       raw_printf(stderr, "Warning: .scanstats not available in this build.\n");
18647: #endif
18648:     }else{
18649:       raw_printf(stderr, "Usage: .scanstats on|off\n");
18650:       rc = 1;
18651:     }
18652:   }else
18653: 
18654:   if( c=='s' && strncmp(azArg[0], "schema", n)==0 ){
18655:     ShellText sSelect;
18656:     ShellState data;
18657:     char *zErrMsg = 0;
18658:     const char *zDiv = "(";
18659:     const char *zName = 0;
18660:     int iSchema = 0;
18661:     int bDebug = 0;
18662:     int ii;
18663: 
18664:     open_db(p, 0);
18665:     memcpy(&data, p, sizeof(data));
18666:     data.showHeader = 0;
18667:     data.cMode = data.mode = MODE_Semi;
18668:     initText(&sSelect);
18669:     for(ii=1; ii<nArg; ii++){
18670:       if( optionMatch(azArg[ii],"indent") ){
18671:         data.cMode = data.mode = MODE_Pretty;
18672:       }else if( optionMatch(azArg[ii],"debug") ){
18673:         bDebug = 1;
18674:       }else if( zName==0 ){
18675:         zName = azArg[ii];
18676:       }else{
18677:         raw_printf(stderr, "Usage: .schema ?--indent? ?LIKE-PATTERN?\n");
18678:         rc = 1;
18679:         goto meta_command_exit;
18680:       }
18681:     }
18682:     if( zName!=0 ){
18683:       int isSchema = sqlite3_strlike(zName, "sqlite_master", '\\')==0
18684:                   || sqlite3_strlike(zName, "sqlite_schema", '\\')==0
18685:                   || sqlite3_strlike(zName,"sqlite_temp_master", '\\')==0
18686:                   || sqlite3_strlike(zName,"sqlite_temp_schema", '\\')==0;
18687:       if( isSchema ){
18688:         char *new_argv[2], *new_colv[2];
18689:         new_argv[0] = sqlite3_mprintf(
18690:                       "CREATE TABLE %s (\n"
18691:                       "  type text,\n"
18692:                       "  name text,\n"
18693:                       "  tbl_name text,\n"
18694:                       "  rootpage integer,\n"
18695:                       "  sql text\n"
18696:                       ")", zName);
18697:         new_argv[1] = 0;
18698:         new_colv[0] = "sql";
18699:         new_colv[1] = 0;
18700:         callback(&data, 1, new_argv, new_colv);
18701:         sqlite3_free(new_argv[0]);
18702:       }
18703:     }
18704:     if( zDiv ){
18705:       sqlite3_stmt *pStmt = 0;
18706:       rc = sqlite3_prepare_v2(p->db, "SELECT name FROM pragma_database_list",
18707:                               -1, &pStmt, 0);
18708:       if( rc ){
18709:         utf8_printf(stderr, "Error: %s\n", sqlite3_errmsg(p->db));
18710:         sqlite3_finalize(pStmt);
18711:         rc = 1;
18712:         goto meta_command_exit;
18713:       }
18714:       appendText(&sSelect, "SELECT sql FROM", 0);
18715:       iSchema = 0;
18716:       while( sqlite3_step(pStmt)==SQLITE_ROW ){
18717:         const char *zDb = (const char*)sqlite3_column_text(pStmt, 0);
18718:         char zScNum[30];
18719:         sqlite3_snprintf(sizeof(zScNum), zScNum, "%d", ++iSchema);
18720:         appendText(&sSelect, zDiv, 0);
18721:         zDiv = " UNION ALL ";
18722:         appendText(&sSelect, "SELECT shell_add_schema(sql,", 0);
18723:         if( sqlite3_stricmp(zDb, "main")!=0 ){
18724:           appendText(&sSelect, zDb, '\'');
18725:         }else{
18726:           appendText(&sSelect, "NULL", 0);
18727:         }
18728:         appendText(&sSelect, ",name) AS sql, type, tbl_name, name, rowid,", 0);
18729:         appendText(&sSelect, zScNum, 0);
18730:         appendText(&sSelect, " AS snum, ", 0);
18731:         appendText(&sSelect, zDb, '\'');
18732:         appendText(&sSelect, " AS sname FROM ", 0);
18733:         appendText(&sSelect, zDb, quoteChar(zDb));
18734:         appendText(&sSelect, ".sqlite_schema", 0);
18735:       }
18736:       sqlite3_finalize(pStmt);
18737: #ifndef SQLITE_OMIT_INTROSPECTION_PRAGMAS
18738:       if( zName ){
18739:         appendText(&sSelect,
18740:            " UNION ALL SELECT shell_module_schema(name),"
18741:            " 'table', name, name, name, 9e+99, 'main' FROM pragma_module_list",
18742:         0);
18743:       }
18744: #endif
18745:       appendText(&sSelect, ") WHERE ", 0);
18746:       if( zName ){
18747:         char *zQarg = sqlite3_mprintf("%Q", zName);
18748:         int bGlob = strchr(zName, '*') != 0 || strchr(zName, '?') != 0 ||
18749:                     strchr(zName, '[') != 0;
18750:         if( strchr(zName, '.') ){
18751:           appendText(&sSelect, "lower(printf('%s.%s',sname,tbl_name))", 0);
18752:         }else{
18753:           appendText(&sSelect, "lower(tbl_name)", 0);
18754:         }
18755:         appendText(&sSelect, bGlob ? " GLOB " : " LIKE ", 0);
18756:         appendText(&sSelect, zQarg, 0);
18757:         if( !bGlob ){
18758:           appendText(&sSelect, " ESCAPE '\\' ", 0);
18759:         }
18760:         appendText(&sSelect, " AND ", 0);
18761:         sqlite3_free(zQarg);
18762:       }
18763:       appendText(&sSelect, "type!='meta' AND sql IS NOT NULL"
18764:                            " ORDER BY snum, rowid", 0);
18765:       if( bDebug ){
18766:         utf8_printf(p->out, "SQL: %s;\n", sSelect.z);
18767:       }else{
18768:         rc = sqlite3_exec(p->db, sSelect.z, callback, &data, &zErrMsg);
18769:       }
18770:       freeText(&sSelect);
18771:     }
18772:     if( zErrMsg ){
18773:       utf8_printf(stderr,"Error: %s\n", zErrMsg);
18774:       sqlite3_free(zErrMsg);
18775:       rc = 1;
18776:     }else if( rc != SQLITE_OK ){
18777:       raw_printf(stderr,"Error: querying schema information\n");
18778:       rc = 1;
18779:     }else{
18780:       rc = 0;
18781:     }
18782:   }else
18783: 
18784: #if defined(SQLITE_DEBUG) && defined(SQLITE_ENABLE_SELECTTRACE)
18785:   if( c=='s' && n==11 && strncmp(azArg[0], "selecttrace", n)==0 ){
18786:     sqlite3_unsupported_selecttrace = nArg>=2 ? (int)integerValue(azArg[1]) : 0xffff;
18787:   }else
18788: #endif
18789: 
18790: #if defined(SQLITE_ENABLE_SESSION)
18791:   if( c=='s' && strncmp(azArg[0],"session",n)==0 && n>=3 ){
18792:     OpenSession *pSession = &p->aSession[0];
18793:     char **azCmd = &azArg[1];
18794:     int iSes = 0;
18795:     int nCmd = nArg - 1;
18796:     int i;
18797:     if( nArg<=1 ) goto session_syntax_error;
18798:     open_db(p, 0);
18799:     if( nArg>=3 ){
18800:       for(iSes=0; iSes<p->nSession; iSes++){
18801:         if( strcmp(p->aSession[iSes].zName, azArg[1])==0 ) break;
18802:       }
18803:       if( iSes<p->nSession ){
18804:         pSession = &p->aSession[iSes];
18805:         azCmd++;
18806:         nCmd--;
18807:       }else{
18808:         pSession = &p->aSession[0];
18809:         iSes = 0;
18810:       }
18811:     }
18812: 
18813:     /* .session attach TABLE
18814:     ** Invoke the sqlite3session_attach() interface to attach a particular
18815:     ** table so that it is never filtered.
18816:     */
18817:     if( strcmp(azCmd[0],"attach")==0 ){
18818:       if( nCmd!=2 ) goto session_syntax_error;
18819:       if( pSession->p==0 ){
18820:         session_not_open:
18821:         raw_printf(stderr, "ERROR: No sessions are open\n");
18822:       }else{
18823:         rc = sqlite3session_attach(pSession->p, azCmd[1]);
18824:         if( rc ){
18825:           raw_printf(stderr, "ERROR: sqlite3session_attach() returns %d\n", rc);
18826:           rc = 0;
18827:         }
18828:       }
18829:     }else
18830: 
18831:     /* .session changeset FILE
18832:     ** .session patchset FILE
18833:     ** Write a changeset or patchset into a file.  The file is overwritten.
18834:     */
18835:     if( strcmp(azCmd[0],"changeset")==0 || strcmp(azCmd[0],"patchset")==0 ){
18836:       FILE *out = 0;
18837:       if( nCmd!=2 ) goto session_syntax_error;
18838:       if( pSession->p==0 ) goto session_not_open;
18839:       out = fopen(azCmd[1], "wb");
18840:       if( out==0 ){
18841:         utf8_printf(stderr, "ERROR: cannot open \"%s\" for writing\n",
18842:                     azCmd[1]);
18843:       }else{
18844:         int szChng;
18845:         void *pChng;
18846:         if( azCmd[0][0]=='c' ){
18847:           rc = sqlite3session_changeset(pSession->p, &szChng, &pChng);
18848:         }else{
18849:           rc = sqlite3session_patchset(pSession->p, &szChng, &pChng);
18850:         }
18851:         if( rc ){
18852:           printf("Error: error code %d\n", rc);
18853:           rc = 0;
18854:         }
18855:         if( pChng
18856:           && fwrite(pChng, szChng, 1, out)!=1 ){
18857:           raw_printf(stderr, "ERROR: Failed to write entire %d-byte output\n",
18858:                   szChng);
18859:         }
18860:         sqlite3_free(pChng);
18861:         fclose(out);
18862:       }
18863:     }else
18864: 
18865:     /* .session close
18866:     ** Close the identified session
18867:     */
18868:     if( strcmp(azCmd[0], "close")==0 ){
18869:       if( nCmd!=1 ) goto session_syntax_error;
18870:       if( p->nSession ){
18871:         session_close(pSession);
18872:         p->aSession[iSes] = p->aSession[--p->nSession];
18873:       }
18874:     }else
18875: 
18876:     /* .session enable ?BOOLEAN?
18877:     ** Query or set the enable flag
18878:     */
18879:     if( strcmp(azCmd[0], "enable")==0 ){
18880:       int ii;
18881:       if( nCmd>2 ) goto session_syntax_error;
18882:       ii = nCmd==1 ? -1 : booleanValue(azCmd[1]);
18883:       if( p->nSession ){
18884:         ii = sqlite3session_enable(pSession->p, ii);
18885:         utf8_printf(p->out, "session %s enable flag = %d\n",
18886:                     pSession->zName, ii);
18887:       }
18888:     }else
18889: 
18890:     /* .session filter GLOB ....
18891:     ** Set a list of GLOB patterns of table names to be excluded.
18892:     */
18893:     if( strcmp(azCmd[0], "filter")==0 ){
18894:       int ii, nByte;
18895:       if( nCmd<2 ) goto session_syntax_error;
18896:       if( p->nSession ){
18897:         for(ii=0; ii<pSession->nFilter; ii++){
18898:           sqlite3_free(pSession->azFilter[ii]);
18899:         }
18900:         sqlite3_free(pSession->azFilter);
18901:         nByte = sizeof(pSession->azFilter[0])*(nCmd-1);
18902:         pSession->azFilter = sqlite3_malloc( nByte );
18903:         if( pSession->azFilter==0 ){
18904:           raw_printf(stderr, "Error: out or memory\n");
18905:           exit(1);
18906:         }
18907:         for(ii=1; ii<nCmd; ii++){
18908:           pSession->azFilter[ii-1] = sqlite3_mprintf("%s", azCmd[ii]);
18909:         }
18910:         pSession->nFilter = ii-1;
18911:       }
18912:     }else
18913: 
18914:     /* .session indirect ?BOOLEAN?
18915:     ** Query or set the indirect flag
18916:     */
18917:     if( strcmp(azCmd[0], "indirect")==0 ){
18918:       int ii;
18919:       if( nCmd>2 ) goto session_syntax_error;
18920:       ii = nCmd==1 ? -1 : booleanValue(azCmd[1]);
18921:       if( p->nSession ){
18922:         ii = sqlite3session_indirect(pSession->p, ii);
18923:         utf8_printf(p->out, "session %s indirect flag = %d\n",
18924:                     pSession->zName, ii);
18925:       }
18926:     }else
18927: 
18928:     /* .session isempty
18929:     ** Determine if the session is empty
18930:     */
18931:     if( strcmp(azCmd[0], "isempty")==0 ){
18932:       int ii;
18933:       if( nCmd!=1 ) goto session_syntax_error;
18934:       if( p->nSession ){
18935:         ii = sqlite3session_isempty(pSession->p);
18936:         utf8_printf(p->out, "session %s isempty flag = %d\n",
18937:                     pSession->zName, ii);
18938:       }
18939:     }else
18940: 
18941:     /* .session list
18942:     ** List all currently open sessions
18943:     */
18944:     if( strcmp(azCmd[0],"list")==0 ){
18945:       for(i=0; i<p->nSession; i++){
18946:         utf8_printf(p->out, "%d %s\n", i, p->aSession[i].zName);
18947:       }
18948:     }else
18949: 
18950:     /* .session open DB NAME
18951:     ** Open a new session called NAME on the attached database DB.
18952:     ** DB is normally "main".
18953:     */
18954:     if( strcmp(azCmd[0],"open")==0 ){
18955:       char *zName;
18956:       if( nCmd!=3 ) goto session_syntax_error;
18957:       zName = azCmd[2];
18958:       if( zName[0]==0 ) goto session_syntax_error;
18959:       for(i=0; i<p->nSession; i++){
18960:         if( strcmp(p->aSession[i].zName,zName)==0 ){
18961:           utf8_printf(stderr, "Session \"%s\" already exists\n", zName);
18962:           goto meta_command_exit;
18963:         }
18964:       }
18965:       if( p->nSession>=ArraySize(p->aSession) ){
18966:         raw_printf(stderr, "Maximum of %d sessions\n", ArraySize(p->aSession));
18967:         goto meta_command_exit;
18968:       }
18969:       pSession = &p->aSession[p->nSession];
18970:       rc = sqlite3session_create(p->db, azCmd[1], &pSession->p);
18971:       if( rc ){
18972:         raw_printf(stderr, "Cannot open session: error code=%d\n", rc);
18973:         rc = 0;
18974:         goto meta_command_exit;
18975:       }
18976:       pSession->nFilter = 0;
18977:       sqlite3session_table_filter(pSession->p, session_filter, pSession);
18978:       p->nSession++;
18979:       pSession->zName = sqlite3_mprintf("%s", zName);
18980:     }else
18981:     /* If no command name matches, show a syntax error */
18982:     session_syntax_error:
18983:     showHelp(p->out, "session");
18984:   }else
18985: #endif
18986: 
18987: #ifdef SQLITE_DEBUG
18988:   /* Undocumented commands for internal testing.  Subject to change
18989:   ** without notice. */
18990:   if( c=='s' && n>=10 && strncmp(azArg[0], "selftest-", 9)==0 ){
18991:     if( strncmp(azArg[0]+9, "boolean", n-9)==0 ){
18992:       int i, v;
18993:       for(i=1; i<nArg; i++){
18994:         v = booleanValue(azArg[i]);
18995:         utf8_printf(p->out, "%s: %d 0x%x\n", azArg[i], v, v);
18996:       }
18997:     }
18998:     if( strncmp(azArg[0]+9, "integer", n-9)==0 ){
18999:       int i; sqlite3_int64 v;
19000:       for(i=1; i<nArg; i++){
19001:         char zBuf[200];
19002:         v = integerValue(azArg[i]);
19003:         sqlite3_snprintf(sizeof(zBuf),zBuf,"%s: %lld 0x%llx\n", azArg[i],v,v);
19004:         utf8_printf(p->out, "%s", zBuf);
19005:       }
19006:     }
19007:   }else
19008: #endif
19009: 
19010:   if( c=='s' && n>=4 && strncmp(azArg[0],"selftest",n)==0 ){
19011:     int bIsInit = 0;         /* True to initialize the SELFTEST table */
19012:     int bVerbose = 0;        /* Verbose output */
19013:     int bSelftestExists;     /* True if SELFTEST already exists */
19014:     int i, k;                /* Loop counters */
19015:     int nTest = 0;           /* Number of tests runs */
19016:     int nErr = 0;            /* Number of errors seen */
19017:     ShellText str;           /* Answer for a query */
19018:     sqlite3_stmt *pStmt = 0; /* Query against the SELFTEST table */
19019: 
19020:     open_db(p,0);
19021:     for(i=1; i<nArg; i++){
19022:       const char *z = azArg[i];
19023:       if( z[0]=='-' && z[1]=='-' ) z++;
19024:       if( strcmp(z,"-init")==0 ){
19025:         bIsInit = 1;
19026:       }else
19027:       if( strcmp(z,"-v")==0 ){
19028:         bVerbose++;
19029:       }else
19030:       {
19031:         utf8_printf(stderr, "Unknown option \"%s\" on \"%s\"\n",
19032:                     azArg[i], azArg[0]);
19033:         raw_printf(stderr, "Should be one of: --init -v\n");
19034:         rc = 1;
19035:         goto meta_command_exit;
19036:       }
19037:     }
19038:     if( sqlite3_table_column_metadata(p->db,"main","selftest",0,0,0,0,0,0)
19039:            != SQLITE_OK ){
19040:       bSelftestExists = 0;
19041:     }else{
19042:       bSelftestExists = 1;
19043:     }
19044:     if( bIsInit ){
19045:       createSelftestTable(p);
19046:       bSelftestExists = 1;
19047:     }
19048:     initText(&str);
19049:     appendText(&str, "x", 0);
19050:     for(k=bSelftestExists; k>=0; k--){
19051:       if( k==1 ){
19052:         rc = sqlite3_prepare_v2(p->db,
19053:             "SELECT tno,op,cmd,ans FROM selftest ORDER BY tno",
19054:             -1, &pStmt, 0);
19055:       }else{
19056:         rc = sqlite3_prepare_v2(p->db,
19057:           "VALUES(0,'memo','Missing SELFTEST table - default checks only',''),"
19058:           "      (1,'run','PRAGMA integrity_check','ok')",
19059:           -1, &pStmt, 0);
19060:       }
19061:       if( rc ){
19062:         raw_printf(stderr, "Error querying the selftest table\n");
19063:         rc = 1;
19064:         sqlite3_finalize(pStmt);
19065:         goto meta_command_exit;
19066:       }
19067:       for(i=1; sqlite3_step(pStmt)==SQLITE_ROW; i++){
19068:         int tno = sqlite3_column_int(pStmt, 0);
19069:         const char *zOp = (const char*)sqlite3_column_text(pStmt, 1);
19070:         const char *zSql = (const char*)sqlite3_column_text(pStmt, 2);
19071:         const char *zAns = (const char*)sqlite3_column_text(pStmt, 3);
19072: 
19073:         k = 0;
19074:         if( bVerbose>0 ){
19075:           char *zQuote = sqlite3_mprintf("%q", zSql);
19076:           printf("%d: %s %s\n", tno, zOp, zSql);
19077:           sqlite3_free(zQuote);
19078:         }
19079:         if( strcmp(zOp,"memo")==0 ){
19080:           utf8_printf(p->out, "%s\n", zSql);
19081:         }else
19082:         if( strcmp(zOp,"run")==0 ){
19083:           char *zErrMsg = 0;
19084:           str.n = 0;
19085:           str.z[0] = 0;
19086:           rc = sqlite3_exec(p->db, zSql, captureOutputCallback, &str, &zErrMsg);
19087:           nTest++;
19088:           if( bVerbose ){
19089:             utf8_printf(p->out, "Result: %s\n", str.z);
19090:           }
19091:           if( rc || zErrMsg ){
19092:             nErr++;
19093:             rc = 1;
19094:             utf8_printf(p->out, "%d: error-code-%d: %s\n", tno, rc, zErrMsg);
19095:             sqlite3_free(zErrMsg);
19096:           }else if( strcmp(zAns,str.z)!=0 ){
19097:             nErr++;
19098:             rc = 1;
19099:             utf8_printf(p->out, "%d: Expected: [%s]\n", tno, zAns);
19100:             utf8_printf(p->out, "%d:      Got: [%s]\n", tno, str.z);
19101:           }
19102:         }else
19103:         {
19104:           utf8_printf(stderr,
19105:             "Unknown operation \"%s\" on selftest line %d\n", zOp, tno);
19106:           rc = 1;
19107:           break;
19108:         }
19109:       } /* End loop over rows of content from SELFTEST */
19110:       sqlite3_finalize(pStmt);
19111:     } /* End loop over k */
19112:     freeText(&str);
19113:     utf8_printf(p->out, "%d errors out of %d tests\n", nErr, nTest);
19114:   }else
19115: 
19116:   if( c=='s' && strncmp(azArg[0], "separator", n)==0 ){
19117:     if( nArg<2 || nArg>3 ){
19118:       raw_printf(stderr, "Usage: .separator COL ?ROW?\n");
19119:       rc = 1;
19120:     }
19121:     if( nArg>=2 ){
19122:       sqlite3_snprintf(sizeof(p->colSeparator), p->colSeparator,
19123:                        "%.*s", (int)ArraySize(p->colSeparator)-1, azArg[1]);
19124:     }
19125:     if( nArg>=3 ){
19126:       sqlite3_snprintf(sizeof(p->rowSeparator), p->rowSeparator,
19127:                        "%.*s", (int)ArraySize(p->rowSeparator)-1, azArg[2]);
19128:     }
19129:   }else
19130: 
19131:   if( c=='s' && n>=4 && strncmp(azArg[0],"sha3sum",n)==0 ){
19132:     const char *zLike = 0;   /* Which table to checksum. 0 means everything */
19133:     int i;                   /* Loop counter */
19134:     int bSchema = 0;         /* Also hash the schema */
19135:     int bSeparate = 0;       /* Hash each table separately */
19136:     int iSize = 224;         /* Hash algorithm to use */
19137:     int bDebug = 0;          /* Only show the query that would have run */
19138:     sqlite3_stmt *pStmt;     /* For querying tables names */
19139:     char *zSql;              /* SQL to be run */
19140:     char *zSep;              /* Separator */
19141:     ShellText sSql;          /* Complete SQL for the query to run the hash */
19142:     ShellText sQuery;        /* Set of queries used to read all content */
19143:     open_db(p, 0);
19144:     for(i=1; i<nArg; i++){
19145:       const char *z = azArg[i];
19146:       if( z[0]=='-' ){
19147:         z++;
19148:         if( z[0]=='-' ) z++;
19149:         if( strcmp(z,"schema")==0 ){
19150:           bSchema = 1;
19151:         }else
19152:         if( strcmp(z,"sha3-224")==0 || strcmp(z,"sha3-256")==0
19153:          || strcmp(z,"sha3-384")==0 || strcmp(z,"sha3-512")==0
19154:         ){
19155:           iSize = atoi(&z[5]);
19156:         }else
19157:         if( strcmp(z,"debug")==0 ){
19158:           bDebug = 1;
19159:         }else
19160:         {
19161:           utf8_printf(stderr, "Unknown option \"%s\" on \"%s\"\n",
19162:                       azArg[i], azArg[0]);
19163:           showHelp(p->out, azArg[0]);
19164:           rc = 1;
19165:           goto meta_command_exit;
19166:         }
19167:       }else if( zLike ){
19168:         raw_printf(stderr, "Usage: .sha3sum ?OPTIONS? ?LIKE-PATTERN?\n");
19169:         rc = 1;
19170:         goto meta_command_exit;
19171:       }else{
19172:         zLike = z;
19173:         bSeparate = 1;
19174:         if( sqlite3_strlike("sqlite\\_%", zLike, '\\')==0 ) bSchema = 1;
19175:       }
19176:     }
19177:     if( bSchema ){
19178:       zSql = "SELECT lower(name) FROM sqlite_schema"
19179:              " WHERE type='table' AND coalesce(rootpage,0)>1"
19180:              " UNION ALL SELECT 'sqlite_schema'"
19181:              " ORDER BY 1 collate nocase";
19182:     }else{
19183:       zSql = "SELECT lower(name) FROM sqlite_schema"
19184:              " WHERE type='table' AND coalesce(rootpage,0)>1"
19185:              " AND name NOT LIKE 'sqlite_%'"
19186:              " ORDER BY 1 collate nocase";
19187:     }
19188:     sqlite3_prepare_v2(p->db, zSql, -1, &pStmt, 0);
19189:     initText(&sQuery);
19190:     initText(&sSql);
19191:     appendText(&sSql, "WITH [sha3sum$query](a,b) AS(",0);
19192:     zSep = "VALUES(";
19193:     while( SQLITE_ROW==sqlite3_step(pStmt) ){
19194:       const char *zTab = (const char*)sqlite3_column_text(pStmt,0);
19195:       if( zLike && sqlite3_strlike(zLike, zTab, 0)!=0 ) continue;
19196:       if( strncmp(zTab, "sqlite_",7)!=0 ){
19197:         appendText(&sQuery,"SELECT * FROM ", 0);
19198:         appendText(&sQuery,zTab,'"');
19199:         appendText(&sQuery," NOT INDEXED;", 0);
19200:       }else if( strcmp(zTab, "sqlite_schema")==0 ){
19201:         appendText(&sQuery,"SELECT type,name,tbl_name,sql FROM sqlite_schema"
19202:                            " ORDER BY name;", 0);
19203:       }else if( strcmp(zTab, "sqlite_sequence")==0 ){
19204:         appendText(&sQuery,"SELECT name,seq FROM sqlite_sequence"
19205:                            " ORDER BY name;", 0);
19206:       }else if( strcmp(zTab, "sqlite_stat1")==0 ){
19207:         appendText(&sQuery,"SELECT tbl,idx,stat FROM sqlite_stat1"
19208:                            " ORDER BY tbl,idx;", 0);
19209:       }else if( strcmp(zTab, "sqlite_stat4")==0 ){
19210:         appendText(&sQuery, "SELECT * FROM ", 0);
19211:         appendText(&sQuery, zTab, 0);
19212:         appendText(&sQuery, " ORDER BY tbl, idx, rowid;\n", 0);
19213:       }
19214:       appendText(&sSql, zSep, 0);
19215:       appendText(&sSql, sQuery.z, '\'');
19216:       sQuery.n = 0;
19217:       appendText(&sSql, ",", 0);
19218:       appendText(&sSql, zTab, '\'');
19219:       zSep = "),(";
19220:     }
19221:     sqlite3_finalize(pStmt);
19222:     if( bSeparate ){
19223:       zSql = sqlite3_mprintf(
19224:           "%s))"
19225:           " SELECT lower(hex(sha3_query(a,%d))) AS hash, b AS label"
19226:           "   FROM [sha3sum$query]",
19227:           sSql.z, iSize);
19228:     }else{
19229:       zSql = sqlite3_mprintf(
19230:           "%s))"
19231:           " SELECT lower(hex(sha3_query(group_concat(a,''),%d))) AS hash"
19232:           "   FROM [sha3sum$query]",
19233:           sSql.z, iSize);
19234:     }
19235:     freeText(&sQuery);
19236:     freeText(&sSql);
19237:     if( bDebug ){
19238:       utf8_printf(p->out, "%s\n", zSql);
19239:     }else{
19240:       shell_exec(p, zSql, 0);
19241:     }
19242:     sqlite3_free(zSql);
19243:   }else
19244: 
19245: #ifndef SQLITE_NOHAVE_SYSTEM
19246:   if( c=='s'
19247:    && (strncmp(azArg[0], "shell", n)==0 || strncmp(azArg[0],"system",n)==0)
19248:   ){
19249:     char *zCmd;
19250:     int i, x;
19251:     if( nArg<2 ){
19252:       raw_printf(stderr, "Usage: .system COMMAND\n");
19253:       rc = 1;
19254:       goto meta_command_exit;
19255:     }
19256:     zCmd = sqlite3_mprintf(strchr(azArg[1],' ')==0?"%s":"\"%s\"", azArg[1]);
19257:     for(i=2; i<nArg; i++){
19258:       zCmd = sqlite3_mprintf(strchr(azArg[i],' ')==0?"%z %s":"%z \"%s\"",
19259:                              zCmd, azArg[i]);
19260:     }
19261:     x = system(zCmd);
19262:     sqlite3_free(zCmd);
19263:     if( x ) raw_printf(stderr, "System command returns %d\n", x);
19264:   }else
19265: #endif /* !defined(SQLITE_NOHAVE_SYSTEM) */
19266: 
19267:   if( c=='s' && strncmp(azArg[0], "show", n)==0 ){
19268:     static const char *azBool[] = { "off", "on", "trigger", "full"};
19269:     int i;
19270:     if( nArg!=1 ){
19271:       raw_printf(stderr, "Usage: .show\n");
19272:       rc = 1;
19273:       goto meta_command_exit;
19274:     }
19275:     utf8_printf(p->out, "%12.12s: %s\n","echo",
19276:                                   azBool[ShellHasFlag(p, SHFLG_Echo)]);
19277:     utf8_printf(p->out, "%12.12s: %s\n","eqp", azBool[p->autoEQP&3]);
19278:     utf8_printf(p->out, "%12.12s: %s\n","explain",
19279:          p->mode==MODE_Explain ? "on" : p->autoExplain ? "auto" : "off");
19280:     utf8_printf(p->out,"%12.12s: %s\n","headers", azBool[p->showHeader!=0]);
19281:     utf8_printf(p->out, "%12.12s: %s\n","mode", modeDescr[p->mode]);
19282:     utf8_printf(p->out, "%12.12s: ", "nullvalue");
19283:       output_c_string(p->out, p->nullValue);
19284:       raw_printf(p->out, "\n");
19285:     utf8_printf(p->out,"%12.12s: %s\n","output",
19286:             strlen30(p->outfile) ? p->outfile : "stdout");
19287:     utf8_printf(p->out,"%12.12s: ", "colseparator");
19288:       output_c_string(p->out, p->colSeparator);
19289:       raw_printf(p->out, "\n");
19290:     utf8_printf(p->out,"%12.12s: ", "rowseparator");
19291:       output_c_string(p->out, p->rowSeparator);
19292:       raw_printf(p->out, "\n");
19293:     utf8_printf(p->out, "%12.12s: %s\n","stats", azBool[p->statsOn!=0]);
19294:     utf8_printf(p->out, "%12.12s: ", "width");
19295:     for (i=0;i<p->nWidth;i++) {
19296:       raw_printf(p->out, "%d ", p->colWidth[i]);
19297:     }
19298:     raw_printf(p->out, "\n");
19299:     utf8_printf(p->out, "%12.12s: %s\n", "filename",
19300:                 p->zDbFilename ? p->zDbFilename : "");
19301:   }else
19302: 
19303:   if( c=='s' && strncmp(azArg[0], "stats", n)==0 ){
19304:     if( nArg==2 ){
19305:       p->statsOn = (u8)booleanValue(azArg[1]);
19306:     }else if( nArg==1 ){
19307:       display_stats(p->db, p, 0);
19308:     }else{
19309:       raw_printf(stderr, "Usage: .stats ?on|off?\n");
19310:       rc = 1;
19311:     }
19312:   }else
19313: 
19314:   if( (c=='t' && n>1 && strncmp(azArg[0], "tables", n)==0)
19315:    || (c=='i' && (strncmp(azArg[0], "indices", n)==0
19316:                  || strncmp(azArg[0], "indexes", n)==0) )
19317:   ){
19318:     sqlite3_stmt *pStmt;
19319:     char **azResult;
19320:     int nRow, nAlloc;
19321:     int ii;
19322:     ShellText s;
19323:     initText(&s);
19324:     open_db(p, 0);
19325:     rc = sqlite3_prepare_v2(p->db, "PRAGMA database_list", -1, &pStmt, 0);
19326:     if( rc ){
19327:       sqlite3_finalize(pStmt);
19328:       return shellDatabaseError(p->db);
19329:     }
19330: 
19331:     if( nArg>2 && c=='i' ){
19332:       /* It is an historical accident that the .indexes command shows an error
19333:       ** when called with the wrong number of arguments whereas the .tables
19334:       ** command does not. */
19335:       raw_printf(stderr, "Usage: .indexes ?LIKE-PATTERN?\n");
19336:       rc = 1;
19337:       sqlite3_finalize(pStmt);
19338:       goto meta_command_exit;
19339:     }
19340:     for(ii=0; sqlite3_step(pStmt)==SQLITE_ROW; ii++){
19341:       const char *zDbName = (const char*)sqlite3_column_text(pStmt, 1);
19342:       if( zDbName==0 ) continue;
19343:       if( s.z && s.z[0] ) appendText(&s, " UNION ALL ", 0);
19344:       if( sqlite3_stricmp(zDbName, "main")==0 ){
19345:         appendText(&s, "SELECT name FROM ", 0);
19346:       }else{
19347:         appendText(&s, "SELECT ", 0);
19348:         appendText(&s, zDbName, '\'');
19349:         appendText(&s, "||'.'||name FROM ", 0);
19350:       }
19351:       appendText(&s, zDbName, '"');
19352:       appendText(&s, ".sqlite_schema ", 0);
19353:       if( c=='t' ){
19354:         appendText(&s," WHERE type IN ('table','view')"
19355:                       "   AND name NOT LIKE 'sqlite_%'"
19356:                       "   AND name LIKE ?1", 0);
19357:       }else{
19358:         appendText(&s," WHERE type='index'"
19359:                       "   AND tbl_name LIKE ?1", 0);
19360:       }
19361:     }
19362:     rc = sqlite3_finalize(pStmt);
19363:     appendText(&s, " ORDER BY 1", 0);
19364:     rc = sqlite3_prepare_v2(p->db, s.z, -1, &pStmt, 0);
19365:     freeText(&s);
19366:     if( rc ) return shellDatabaseError(p->db);
19367: 
19368:     /* Run the SQL statement prepared by the above block. Store the results
19369:     ** as an array of nul-terminated strings in azResult[].  */
19370:     nRow = nAlloc = 0;
19371:     azResult = 0;
19372:     if( nArg>1 ){
19373:       sqlite3_bind_text(pStmt, 1, azArg[1], -1, SQLITE_TRANSIENT);
19374:     }else{
19375:       sqlite3_bind_text(pStmt, 1, "%", -1, SQLITE_STATIC);
19376:     }
19377:     while( sqlite3_step(pStmt)==SQLITE_ROW ){
19378:       if( nRow>=nAlloc ){
19379:         char **azNew;
19380:         int n2 = nAlloc*2 + 10;
19381:         azNew = sqlite3_realloc64(azResult, sizeof(azResult[0])*n2);
19382:         if( azNew==0 ) shell_out_of_memory();
19383:         nAlloc = n2;
19384:         azResult = azNew;
19385:       }
19386:       azResult[nRow] = sqlite3_mprintf("%s", sqlite3_column_text(pStmt, 0));
19387:       if( 0==azResult[nRow] ) shell_out_of_memory();
19388:       nRow++;
19389:     }
19390:     if( sqlite3_finalize(pStmt)!=SQLITE_OK ){
19391:       rc = shellDatabaseError(p->db);
19392:     }
19393: 
19394:     /* Pretty-print the contents of array azResult[] to the output */
19395:     if( rc==0 && nRow>0 ){
19396:       int len, maxlen = 0;
19397:       int i, j;
19398:       int nPrintCol, nPrintRow;
19399:       for(i=0; i<nRow; i++){
19400:         len = strlen30(azResult[i]);
19401:         if( len>maxlen ) maxlen = len;
19402:       }
19403:       nPrintCol = 80/(maxlen+2);
19404:       if( nPrintCol<1 ) nPrintCol = 1;
19405:       nPrintRow = (nRow + nPrintCol - 1)/nPrintCol;
19406:       for(i=0; i<nPrintRow; i++){
19407:         for(j=i; j<nRow; j+=nPrintRow){
19408:           char *zSp = j<nPrintRow ? "" : "  ";
19409:           utf8_printf(p->out, "%s%-*s", zSp, maxlen,
19410:                       azResult[j] ? azResult[j]:"");
19411:         }
19412:         raw_printf(p->out, "\n");
19413:       }
19414:     }
19415: 
19416:     for(ii=0; ii<nRow; ii++) sqlite3_free(azResult[ii]);
19417:     sqlite3_free(azResult);
19418:   }else
19419: 
19420:   /* Begin redirecting output to the file "testcase-out.txt" */
19421:   if( c=='t' && strcmp(azArg[0],"testcase")==0 ){
19422:     output_reset(p);
19423:     p->out = output_file_open("testcase-out.txt", 0);
19424:     if( p->out==0 ){
19425:       raw_printf(stderr, "Error: cannot open 'testcase-out.txt'\n");
19426:     }
19427:     if( nArg>=2 ){
19428:       sqlite3_snprintf(sizeof(p->zTestcase), p->zTestcase, "%s", azArg[1]);
19429:     }else{
19430:       sqlite3_snprintf(sizeof(p->zTestcase), p->zTestcase, "?");
19431:     }
19432:   }else
19433: 
19434: #ifndef SQLITE_UNTESTABLE
19435:   if( c=='t' && n>=8 && strncmp(azArg[0], "testctrl", n)==0 ){
19436:     static const struct {
19437:        const char *zCtrlName;   /* Name of a test-control option */
19438:        int ctrlCode;            /* Integer code for that option */
19439:        const char *zUsage;      /* Usage notes */
19440:     } aCtrl[] = {
19441:       { "always",             SQLITE_TESTCTRL_ALWAYS,        "BOOLEAN"        },
19442:       { "assert",             SQLITE_TESTCTRL_ASSERT,        "BOOLEAN"        },
19443:     /*{ "benign_malloc_hooks",SQLITE_TESTCTRL_BENIGN_MALLOC_HOOKS, ""       },*/
19444:     /*{ "bitvec_test",        SQLITE_TESTCTRL_BITVEC_TEST,   ""             },*/
19445:       { "byteorder",          SQLITE_TESTCTRL_BYTEORDER,     ""               },
19446:       { "extra_schema_checks",SQLITE_TESTCTRL_EXTRA_SCHEMA_CHECKS,"BOOLEAN"   },
19447:     /*{ "fault_install",      SQLITE_TESTCTRL_FAULT_INSTALL, ""             },*/
19448:       { "imposter",         SQLITE_TESTCTRL_IMPOSTER, "SCHEMA ON/OFF ROOTPAGE"},
19449:       { "internal_functions", SQLITE_TESTCTRL_INTERNAL_FUNCTIONS, "" },
19450:       { "localtime_fault",    SQLITE_TESTCTRL_LOCALTIME_FAULT,"BOOLEAN"       },
19451:       { "never_corrupt",      SQLITE_TESTCTRL_NEVER_CORRUPT, "BOOLEAN"        },
19452:       { "optimizations",      SQLITE_TESTCTRL_OPTIMIZATIONS, "DISABLE-MASK"   },
19453: #ifdef YYCOVERAGE
19454:       { "parser_coverage",    SQLITE_TESTCTRL_PARSER_COVERAGE, ""             },
19455: #endif
19456:       { "pending_byte",       SQLITE_TESTCTRL_PENDING_BYTE,  "OFFSET  "       },
19457:       { "prng_restore",       SQLITE_TESTCTRL_PRNG_RESTORE,  ""               },
19458:       { "prng_save",          SQLITE_TESTCTRL_PRNG_SAVE,     ""               },
19459:       { "prng_seed",          SQLITE_TESTCTRL_PRNG_SEED,     "SEED ?db?"      },
19460:     };
19461:     int testctrl = -1;
19462:     int iCtrl = -1;
19463:     int rc2 = 0;    /* 0: usage.  1: %d  2: %x  3: no-output */
19464:     int isOk = 0;
19465:     int i, n2;
19466:     const char *zCmd = 0;
19467: 
19468:     open_db(p, 0);
19469:     zCmd = nArg>=2 ? azArg[1] : "help";
19470: 
19471:     /* The argument can optionally begin with "-" or "--" */
19472:     if( zCmd[0]=='-' && zCmd[1] ){
19473:       zCmd++;
19474:       if( zCmd[0]=='-' && zCmd[1] ) zCmd++;
19475:     }
19476: 
19477:     /* --help lists all test-controls */
19478:     if( strcmp(zCmd,"help")==0 ){
19479:       utf8_printf(p->out, "Available test-controls:\n");
19480:       for(i=0; i<ArraySize(aCtrl); i++){
19481:         utf8_printf(p->out, "  .testctrl %s %s\n",
19482:                     aCtrl[i].zCtrlName, aCtrl[i].zUsage);
19483:       }
19484:       rc = 1;
19485:       goto meta_command_exit;
19486:     }
19487: 
19488:     /* convert testctrl text option to value. allow any unique prefix
19489:     ** of the option name, or a numerical value. */
19490:     n2 = strlen30(zCmd);
19491:     for(i=0; i<ArraySize(aCtrl); i++){
19492:       if( strncmp(zCmd, aCtrl[i].zCtrlName, n2)==0 ){
19493:         if( testctrl<0 ){
19494:           testctrl = aCtrl[i].ctrlCode;
19495:           iCtrl = i;
19496:         }else{
19497:           utf8_printf(stderr, "Error: ambiguous test-control: \"%s\"\n"
19498:                               "Use \".testctrl --help\" for help\n", zCmd);
19499:           rc = 1;
19500:           goto meta_command_exit;
19501:         }
19502:       }
19503:     }
19504:     if( testctrl<0 ){
19505:       utf8_printf(stderr,"Error: unknown test-control: %s\n"
19506:                          "Use \".testctrl --help\" for help\n", zCmd);
19507:     }else{
19508:       switch(testctrl){
19509: 
19510:         /* sqlite3_test_control(int, db, int) */
19511:         case SQLITE_TESTCTRL_OPTIMIZATIONS:
19512:           if( nArg==3 ){
19513:             int opt = (int)strtol(azArg[2], 0, 0);
19514:             rc2 = sqlite3_test_control(testctrl, p->db, opt);
19515:             isOk = 3;
19516:           }
19517:           break;
19518: 
19519:         /* sqlite3_test_control(int) */
19520:         case SQLITE_TESTCTRL_PRNG_SAVE:
19521:         case SQLITE_TESTCTRL_PRNG_RESTORE:
19522:         case SQLITE_TESTCTRL_PRNG_RESET:
19523:         case SQLITE_TESTCTRL_BYTEORDER:
19524:           if( nArg==2 ){
19525:             rc2 = sqlite3_test_control(testctrl);
19526:             isOk = testctrl==SQLITE_TESTCTRL_BYTEORDER ? 1 : 3;
19527:           }
19528:           break;
19529: 
19530:         /* sqlite3_test_control(int, uint) */
19531:         case SQLITE_TESTCTRL_PENDING_BYTE:
19532:           if( nArg==3 ){
19533:             unsigned int opt = (unsigned int)integerValue(azArg[2]);
19534:             rc2 = sqlite3_test_control(testctrl, opt);
19535:             isOk = 3;
19536:           }
19537:           break;
19538: 
19539:         /* sqlite3_test_control(int, int, sqlite3*) */
19540:         case SQLITE_TESTCTRL_PRNG_SEED:
19541:           if( nArg==3 || nArg==4 ){
19542:             int ii = (int)integerValue(azArg[2]);
19543:             sqlite3 *db;
19544:             if( ii==0 && strcmp(azArg[2],"random")==0 ){
19545:               sqlite3_randomness(sizeof(ii),&ii);
19546:               printf("-- random seed: %d\n", ii);
19547:             }
19548:             if( nArg==3 ){
19549:               db = 0;
19550:             }else{
19551:               db = p->db;
19552:               /* Make sure the schema has been loaded */
19553:               sqlite3_table_column_metadata(db, 0, "x", 0, 0, 0, 0, 0, 0);
19554:             }
19555:             rc2 = sqlite3_test_control(testctrl, ii, db);
19556:             isOk = 3;
19557:           }
19558:           break;
19559: 
19560:         /* sqlite3_test_control(int, int) */
19561:         case SQLITE_TESTCTRL_ASSERT:
19562:         case SQLITE_TESTCTRL_ALWAYS:
19563:           if( nArg==3 ){
19564:             int opt = booleanValue(azArg[2]);
19565:             rc2 = sqlite3_test_control(testctrl, opt);
19566:             isOk = 1;
19567:           }
19568:           break;
19569: 
19570:         /* sqlite3_test_control(int, int) */
19571:         case SQLITE_TESTCTRL_LOCALTIME_FAULT:
19572:         case SQLITE_TESTCTRL_NEVER_CORRUPT:
19573:           if( nArg==3 ){
19574:             int opt = booleanValue(azArg[2]);
19575:             rc2 = sqlite3_test_control(testctrl, opt);
19576:             isOk = 3;
19577:           }
19578:           break;
19579: 
19580:         /* sqlite3_test_control(sqlite3*) */
19581:         case SQLITE_TESTCTRL_INTERNAL_FUNCTIONS:
19582:           rc2 = sqlite3_test_control(testctrl, p->db);
19583:           isOk = 3;
19584:           break;
19585: 
19586:         case SQLITE_TESTCTRL_IMPOSTER:
19587:           if( nArg==5 ){
19588:             rc2 = sqlite3_test_control(testctrl, p->db,
19589:                           azArg[2],
19590:                           integerValue(azArg[3]),
19591:                           integerValue(azArg[4]));
19592:             isOk = 3;
19593:           }
19594:           break;
19595: 
19596: #ifdef YYCOVERAGE
19597:         case SQLITE_TESTCTRL_PARSER_COVERAGE:
19598:           if( nArg==2 ){
19599:             sqlite3_test_control(testctrl, p->out);
19600:             isOk = 3;
19601:           }
19602: #endif
19603:       }
19604:     }
19605:     if( isOk==0 && iCtrl>=0 ){
19606:       utf8_printf(p->out, "Usage: .testctrl %s %s\n", zCmd,aCtrl[iCtrl].zUsage);
19607:       rc = 1;
19608:     }else if( isOk==1 ){
19609:       raw_printf(p->out, "%d\n", rc2);
19610:     }else if( isOk==2 ){
19611:       raw_printf(p->out, "0x%08x\n", rc2);
19612:     }
19613:   }else
19614: #endif /* !defined(SQLITE_UNTESTABLE) */
19615: 
19616:   if( c=='t' && n>4 && strncmp(azArg[0], "timeout", n)==0 ){
19617:     open_db(p, 0);
19618:     sqlite3_busy_timeout(p->db, nArg>=2 ? (int)integerValue(azArg[1]) : 0);
19619:   }else
19620: 
19621:   if( c=='t' && n>=5 && strncmp(azArg[0], "timer", n)==0 ){
19622:     if( nArg==2 ){
19623:       enableTimer = booleanValue(azArg[1]);
19624:       if( enableTimer && !HAS_TIMER ){
19625:         raw_printf(stderr, "Error: timer not available on this system.\n");
19626:         enableTimer = 0;
19627:       }
19628:     }else{
19629:       raw_printf(stderr, "Usage: .timer on|off\n");
19630:       rc = 1;
19631:     }
19632:   }else
19633: 
19634: #ifndef SQLITE_OMIT_TRACE
19635:   if( c=='t' && strncmp(azArg[0], "trace", n)==0 ){
19636:     int mType = 0;
19637:     int jj;
19638:     open_db(p, 0);
19639:     for(jj=1; jj<nArg; jj++){
19640:       const char *z = azArg[jj];
19641:       if( z[0]=='-' ){
19642:         if( optionMatch(z, "expanded") ){
19643:           p->eTraceType = SHELL_TRACE_EXPANDED;
19644:         }
19645: #ifdef SQLITE_ENABLE_NORMALIZE
19646:         else if( optionMatch(z, "normalized") ){
19647:           p->eTraceType = SHELL_TRACE_NORMALIZED;
19648:         }
19649: #endif
19650:         else if( optionMatch(z, "plain") ){
19651:           p->eTraceType = SHELL_TRACE_PLAIN;
19652:         }
19653:         else if( optionMatch(z, "profile") ){
19654:           mType |= SQLITE_TRACE_PROFILE;
19655:         }
19656:         else if( optionMatch(z, "row") ){
19657:           mType |= SQLITE_TRACE_ROW;
19658:         }
19659:         else if( optionMatch(z, "stmt") ){
19660:           mType |= SQLITE_TRACE_STMT;
19661:         }
19662:         else if( optionMatch(z, "close") ){
19663:           mType |= SQLITE_TRACE_CLOSE;
19664:         }
19665:         else {
19666:           raw_printf(stderr, "Unknown option \"%s\" on \".trace\"\n", z);
19667:           rc = 1;
19668:           goto meta_command_exit;
19669:         }
19670:       }else{
19671:         output_file_close(p->traceOut);
19672:         p->traceOut = output_file_open(azArg[1], 0);
19673:       }
19674:     }
19675:     if( p->traceOut==0 ){
19676:       sqlite3_trace_v2(p->db, 0, 0, 0);
19677:     }else{
19678:       if( mType==0 ) mType = SQLITE_TRACE_STMT;
19679:       sqlite3_trace_v2(p->db, mType, sql_trace_callback, p);
19680:     }
19681:   }else
19682: #endif /* !defined(SQLITE_OMIT_TRACE) */
19683: 
19684: #if defined(SQLITE_DEBUG) && !defined(SQLITE_OMIT_VIRTUALTABLE)
19685:   if( c=='u' && strncmp(azArg[0], "unmodule", n)==0 ){
19686:     int ii;
19687:     int lenOpt;
19688:     char *zOpt;
19689:     if( nArg<2 ){
19690:       raw_printf(stderr, "Usage: .unmodule [--allexcept] NAME ...\n");
19691:       rc = 1;
19692:       goto meta_command_exit;
19693:     }
19694:     open_db(p, 0);
19695:     zOpt = azArg[1];
19696:     if( zOpt[0]=='-' && zOpt[1]=='-' && zOpt[2]!=0 ) zOpt++;
19697:     lenOpt = (int)strlen(zOpt);
19698:     if( lenOpt>=3 && strncmp(zOpt, "-allexcept",lenOpt)==0 ){
19699:       assert( azArg[nArg]==0 );
19700:       sqlite3_drop_modules(p->db, nArg>2 ? (const char**)(azArg+2) : 0);
19701:     }else{
19702:       for(ii=1; ii<nArg; ii++){
19703:         sqlite3_create_module(p->db, azArg[ii], 0, 0);
19704:       }
19705:     }
19706:   }else
19707: #endif
19708: 
19709: #if SQLITE_USER_AUTHENTICATION
19710:   if( c=='u' && strncmp(azArg[0], "user", n)==0 ){
19711:     if( nArg<2 ){
19712:       raw_printf(stderr, "Usage: .user SUBCOMMAND ...\n");
19713:       rc = 1;
19714:       goto meta_command_exit;
19715:     }
19716:     open_db(p, 0);
19717:     if( strcmp(azArg[1],"login")==0 ){
19718:       if( nArg!=4 ){
19719:         raw_printf(stderr, "Usage: .user login USER PASSWORD\n");
19720:         rc = 1;
19721:         goto meta_command_exit;
19722:       }
19723:       rc = sqlite3_user_authenticate(p->db, azArg[2], azArg[3],
19724:                                      strlen30(azArg[3]));
19725:       if( rc ){
19726:         utf8_printf(stderr, "Authentication failed for user %s\n", azArg[2]);
19727:         rc = 1;
19728:       }
19729:     }else if( strcmp(azArg[1],"add")==0 ){
19730:       if( nArg!=5 ){
19731:         raw_printf(stderr, "Usage: .user add USER PASSWORD ISADMIN\n");
19732:         rc = 1;
19733:         goto meta_command_exit;
19734:       }
19735:       rc = sqlite3_user_add(p->db, azArg[2], azArg[3], strlen30(azArg[3]),
19736:                             booleanValue(azArg[4]));
19737:       if( rc ){
19738:         raw_printf(stderr, "User-Add failed: %d\n", rc);
19739:         rc = 1;
19740:       }
19741:     }else if( strcmp(azArg[1],"edit")==0 ){
19742:       if( nArg!=5 ){
19743:         raw_printf(stderr, "Usage: .user edit USER PASSWORD ISADMIN\n");
19744:         rc = 1;
19745:         goto meta_command_exit;
19746:       }
19747:       rc = sqlite3_user_change(p->db, azArg[2], azArg[3], strlen30(azArg[3]),
19748:                               booleanValue(azArg[4]));
19749:       if( rc ){
19750:         raw_printf(stderr, "User-Edit failed: %d\n", rc);
19751:         rc = 1;
19752:       }
19753:     }else if( strcmp(azArg[1],"delete")==0 ){
19754:       if( nArg!=3 ){
19755:         raw_printf(stderr, "Usage: .user delete USER\n");
19756:         rc = 1;
19757:         goto meta_command_exit;
19758:       }
19759:       rc = sqlite3_user_delete(p->db, azArg[2]);
19760:       if( rc ){
19761:         raw_printf(stderr, "User-Delete failed: %d\n", rc);
19762:         rc = 1;
19763:       }
19764:     }else{
19765:       raw_printf(stderr, "Usage: .user login|add|edit|delete ...\n");
19766:       rc = 1;
19767:       goto meta_command_exit;
19768:     }
19769:   }else
19770: #endif /* SQLITE_USER_AUTHENTICATION */
19771: 
19772:   if( c=='v' && strncmp(azArg[0], "version", n)==0 ){
19773:     utf8_printf(p->out, "SQLite %s %s\n" /*extra-version-info*/,
19774:         sqlite3_libversion(), sqlite3_sourceid());
19775: #if SQLITE_HAVE_ZLIB
19776:     utf8_printf(p->out, "zlib version %s\n", zlibVersion());
19777: #endif
19778: #define CTIMEOPT_VAL_(opt) #opt
19779: #define CTIMEOPT_VAL(opt) CTIMEOPT_VAL_(opt)
19780: #if defined(__clang__) && defined(__clang_major__)
19781:     utf8_printf(p->out, "clang-" CTIMEOPT_VAL(__clang_major__) "."
19782:                     CTIMEOPT_VAL(__clang_minor__) "."
19783:                     CTIMEOPT_VAL(__clang_patchlevel__) "\n");
19784: #elif defined(_MSC_VER)
19785:     utf8_printf(p->out, "msvc-" CTIMEOPT_VAL(_MSC_VER) "\n");
19786: #elif defined(__GNUC__) && defined(__VERSION__)
19787:     utf8_printf(p->out, "gcc-" __VERSION__ "\n");
19788: #endif
19789:   }else
19790: 
19791:   if( c=='v' && strncmp(azArg[0], "vfsinfo", n)==0 ){
19792:     const char *zDbName = nArg==2 ? azArg[1] : "main";
19793:     sqlite3_vfs *pVfs = 0;
19794:     if( p->db ){
19795:       sqlite3_file_control(p->db, zDbName, SQLITE_FCNTL_VFS_POINTER, &pVfs);
19796:       if( pVfs ){
19797:         utf8_printf(p->out, "vfs.zName      = \"%s\"\n", pVfs->zName);
19798:         raw_printf(p->out, "vfs.iVersion   = %d\n", pVfs->iVersion);
19799:         raw_printf(p->out, "vfs.szOsFile   = %d\n", pVfs->szOsFile);
19800:         raw_printf(p->out, "vfs.mxPathname = %d\n", pVfs->mxPathname);
19801:       }
19802:     }
19803:   }else
19804: 
19805:   if( c=='v' && strncmp(azArg[0], "vfslist", n)==0 ){
19806:     sqlite3_vfs *pVfs;
19807:     sqlite3_vfs *pCurrent = 0;
19808:     if( p->db ){
19809:       sqlite3_file_control(p->db, "main", SQLITE_FCNTL_VFS_POINTER, &pCurrent);
19810:     }
19811:     for(pVfs=sqlite3_vfs_find(0); pVfs; pVfs=pVfs->pNext){
19812:       utf8_printf(p->out, "vfs.zName      = \"%s\"%s\n", pVfs->zName,
19813:            pVfs==pCurrent ? "  <--- CURRENT" : "");
19814:       raw_printf(p->out, "vfs.iVersion   = %d\n", pVfs->iVersion);
19815:       raw_printf(p->out, "vfs.szOsFile   = %d\n", pVfs->szOsFile);
19816:       raw_printf(p->out, "vfs.mxPathname = %d\n", pVfs->mxPathname);
19817:       if( pVfs->pNext ){
19818:         raw_printf(p->out, "-----------------------------------\n");
19819:       }
19820:     }
19821:   }else
19822: 
19823:   if( c=='v' && strncmp(azArg[0], "vfsname", n)==0 ){
19824:     const char *zDbName = nArg==2 ? azArg[1] : "main";
19825:     char *zVfsName = 0;
19826:     if( p->db ){
19827:       sqlite3_file_control(p->db, zDbName, SQLITE_FCNTL_VFSNAME, &zVfsName);
19828:       if( zVfsName ){
19829:         utf8_printf(p->out, "%s\n", zVfsName);
19830:         sqlite3_free(zVfsName);
19831:       }
19832:     }
19833:   }else
19834: 
19835: #if defined(SQLITE_DEBUG) && defined(SQLITE_ENABLE_WHERETRACE)
19836:   if( c=='w' && strncmp(azArg[0], "wheretrace", n)==0 ){
19837:     sqlite3WhereTrace = nArg>=2 ? booleanValue(azArg[1]) : 0xff;
19838:   }else
19839: #endif
19840: 
19841:   if( c=='w' && strncmp(azArg[0], "width", n)==0 ){
19842:     int j;
19843:     assert( nArg<=ArraySize(azArg) );
19844:     p->nWidth = nArg-1;
19845:     p->colWidth = realloc(p->colWidth, p->nWidth*sizeof(int)*2);
19846:     if( p->colWidth==0 && p->nWidth>0 ) shell_out_of_memory();
19847:     if( p->nWidth ) p->actualWidth = &p->colWidth[p->nWidth];
19848:     for(j=1; j<nArg; j++){
19849:       p->colWidth[j-1] = (int)integerValue(azArg[j]);
19850:     }
19851:   } else {
19852: #ifdef HAVE_LINENOISE
19853:     const char *error = NULL;
19854:     if (linenoiseParseOption((const char**) azArg, nArg, &error)) {
19855:       if (error) {
19856:         utf8_printf(stderr, "Error: %s\n", error);
19857:         rc = 1;
19858:       }
19859:     } else {
19860: #endif
19861:       utf8_printf(stderr, "Error: unknown command or invalid arguments: "
19862:         " \"%s\". Enter \".help\" for help\n", azArg[0]);
19863:       rc = 1;
19864: #ifdef HAVE_LINENOISE
19865:     }
19866: #endif
19867:   }
19868: 
19869: meta_command_exit:
19870:   if( p->outCount ){
19871:     p->outCount--;
19872:     if( p->outCount==0 ) output_reset(p);
19873:   }
19874:   return rc;
19875: }
19876: 
19877: /*
19878: ** Return TRUE if a semicolon occurs anywhere in the first N characters
19879: ** of string z[].
19880: */
19881: static int line_contains_semicolon(const char *z, int N){
19882:   int i;
19883:   for(i=0; i<N; i++){  if( z[i]==';' ) return 1; }
19884:   return 0;
19885: }
19886: 
19887: /*
19888: ** Test to see if a line consists entirely of whitespace.
19889: */
19890: static int _all_whitespace(const char *z){
19891:   for(; *z; z++){
19892:     if( IsSpace(z[0]) ) continue;
19893:     if( *z=='/' && z[1]=='*' ){
19894:       z += 2;
19895:       while( *z && (*z!='*' || z[1]!='/') ){ z++; }
19896:       if( *z==0 ) return 0;
19897:       z++;
19898:       continue;
19899:     }
19900:     if( *z=='-' && z[1]=='-' ){
19901:       z += 2;
19902:       while( *z && *z!='\n' ){ z++; }
19903:       if( *z==0 ) return 1;
19904:       continue;
19905:     }
19906:     return 0;
19907:   }
19908:   return 1;
19909: }
19910: 
19911: /*
19912: ** Return TRUE if the line typed in is an SQL command terminator other
19913: ** than a semi-colon.  The SQL Server style "go" command is understood
19914: ** as is the Oracle "/".
19915: */
19916: static int line_is_command_terminator(const char *zLine){
19917:   while( IsSpace(zLine[0]) ){ zLine++; };
19918:   if( zLine[0]=='/' && _all_whitespace(&zLine[1]) ){
19919:     return 1;  /* Oracle */
19920:   }
19921:   if( ToLower(zLine[0])=='g' && ToLower(zLine[1])=='o'
19922:          && _all_whitespace(&zLine[2]) ){
19923:     return 1;  /* SQL Server */
19924:   }
19925:   return 0;
19926: }
19927: 
19928: /*
19929: ** We need a default sqlite3_complete() implementation to use in case
19930: ** the shell is compiled with SQLITE_OMIT_COMPLETE.  The default assumes
19931: ** any arbitrary text is a complete SQL statement.  This is not very
19932: ** user-friendly, but it does seem to work.
19933: */
19934: #ifdef SQLITE_OMIT_COMPLETE
19935: #define sqlite3_complete(x) 1
19936: #endif
19937: 
19938: /*
19939: ** Return true if zSql is a complete SQL statement.  Return false if it
19940: ** ends in the middle of a string literal or C-style comment.
19941: */
19942: static int line_is_complete(char *zSql, int nSql){
19943:   int rc;
19944:   if( zSql==0 ) return 1;
19945:   zSql[nSql] = ';';
19946:   zSql[nSql+1] = 0;
19947:   rc = sqlite3_complete(zSql);
19948:   zSql[nSql] = 0;
19949:   return rc;
19950: }
19951: 
19952: /*
19953: ** Run a single line of SQL.  Return the number of errors.
19954: */
19955: static int runOneSqlLine(ShellState *p, char *zSql, FILE *in, int startline){
19956:   int rc;
19957:   char *zErrMsg = 0;
19958: 
19959:   open_db(p, 0);
19960:   if( ShellHasFlag(p,SHFLG_Backslash) ) resolve_backslashes(zSql);
19961:   if( p->flgProgress & SHELL_PROGRESS_RESET ) p->nProgress = 0;
19962:   BEGIN_TIMER;
19963:   rc = shell_exec(p, zSql, &zErrMsg);
19964:   END_TIMER;
19965:   if( rc || zErrMsg ){
19966:     char zPrefix[100];
19967:     if( in!=0 || !stdin_is_interactive ){
19968:       sqlite3_snprintf(sizeof(zPrefix), zPrefix,
19969:                        "Error: near line %d:", startline);
19970:     }else{
19971:       sqlite3_snprintf(sizeof(zPrefix), zPrefix, "Error:");
19972:     }
19973:     if( zErrMsg!=0 ){
19974:       utf8_printf(stderr, "%s %s\n", zPrefix, zErrMsg);
19975:       sqlite3_free(zErrMsg);
19976:       zErrMsg = 0;
19977:     }else{
19978:       utf8_printf(stderr, "%s %s\n", zPrefix, sqlite3_errmsg(p->db));
19979:     }
19980:     return 1;
19981:   }else if( ShellHasFlag(p, SHFLG_CountChanges) ){
19982:     raw_printf(p->out, "changes: %3d   total_changes: %d\n",
19983:             sqlite3_changes(p->db), sqlite3_total_changes(p->db));
19984:   }
19985:   return 0;
19986: }
19987: 
19988: 
19989: /*
19990: ** Read input from *in and process it.  If *in==0 then input
19991: ** is interactive - the user is typing it it.  Otherwise, input
19992: ** is coming from a file or device.  A prompt is issued and history
19993: ** is saved only if input is interactive.  An interrupt signal will
19994: ** cause this routine to exit immediately, unless input is interactive.
19995: **
19996: ** Return the number of errors.
19997: */
19998: static int process_input(ShellState *p){
19999:   char *zLine = 0;          /* A single input line */
20000:   char *zSql = 0;           /* Accumulated SQL text */
20001:   int nLine;                /* Length of current line */
20002:   int nSql = 0;             /* Bytes of zSql[] used */
20003:   int nAlloc = 0;           /* Allocated zSql[] space */
20004:   int nSqlPrior = 0;        /* Bytes of zSql[] used by prior line */
20005:   int rc;                   /* Error code */
20006:   int errCnt = 0;           /* Number of errors seen */
20007:   int startline = 0;        /* Line number for start of current input */
20008: 
20009:   p->lineno = 0;
20010:   while( errCnt==0 || !bail_on_error || (p->in==0 && stdin_is_interactive) ){
20011:     fflush(p->out);
20012:     zLine = one_input_line(p->in, zLine, nSql>0);
20013:     if( zLine==0 ){
20014:       /* End of input */
20015:       if( p->in==0 && stdin_is_interactive ) printf("\n");
20016:       break;
20017:     }
20018:     if( seenInterrupt ){
20019:       if( p->in!=0 ) break;
20020:       seenInterrupt = 0;
20021:     }
20022:     p->lineno++;
20023:     if( nSql==0 && _all_whitespace(zLine) ){
20024:       if( ShellHasFlag(p, SHFLG_Echo) ) printf("%s\n", zLine);
20025:       continue;
20026:     }
20027:     if( zLine && (zLine[0]=='.' || zLine[0]=='#') && nSql==0 ){
20028:       if( ShellHasFlag(p, SHFLG_Echo) ) printf("%s\n", zLine);
20029:       if( zLine[0]=='.' ){
20030:         rc = do_meta_command(zLine, p);
20031:         if( rc==2 ){ /* exit requested */
20032:           break;
20033:         }else if( rc ){
20034:           errCnt++;
20035:         }
20036:       }
20037:       continue;
20038:     }
20039:     if( line_is_command_terminator(zLine) && line_is_complete(zSql, nSql) ){
20040:       memcpy(zLine,";",2);
20041:     }
20042:     nLine = strlen30(zLine);
20043:     if( nSql+nLine+2>=nAlloc ){
20044:       nAlloc = nSql+nLine+100;
20045:       zSql = realloc(zSql, nAlloc);
20046:       if( zSql==0 ) shell_out_of_memory();
20047:     }
20048:     nSqlPrior = nSql;
20049:     if( nSql==0 ){
20050:       int i;
20051:       for(i=0; zLine[i] && IsSpace(zLine[i]); i++){}
20052:       assert( nAlloc>0 && zSql!=0 );
20053:       memcpy(zSql, zLine+i, nLine+1-i);
20054:       startline = p->lineno;
20055:       nSql = nLine-i;
20056:     }else{
20057:       zSql[nSql++] = '\n';
20058:       memcpy(zSql+nSql, zLine, nLine+1);
20059:       nSql += nLine;
20060:     }
20061:     if( nSql && line_contains_semicolon(&zSql[nSqlPrior], nSql-nSqlPrior)
20062:                 && sqlite3_complete(zSql) ){
20063:       errCnt += runOneSqlLine(p, zSql, p->in, startline);
20064:       nSql = 0;
20065:       if( p->outCount ){
20066:         output_reset(p);
20067:         p->outCount = 0;
20068:       }else{
20069:         clearTempFile(p);
20070:       }
20071:     }else if( nSql && _all_whitespace(zSql) ){
20072:       if( ShellHasFlag(p, SHFLG_Echo) ) printf("%s\n", zSql);
20073:       nSql = 0;
20074:     }
20075:   }
20076:   if( nSql && !_all_whitespace(zSql) ){
20077:     errCnt += runOneSqlLine(p, zSql, p->in, startline);
20078:   }
20079:   free(zSql);
20080:   free(zLine);
20081:   return errCnt>0;
20082: }
20083: 
20084: /*
20085: ** Return a pathname which is the user's home directory.  A
20086: ** 0 return indicates an error of some kind.
20087: */
20088: static char *find_home_dir(int clearFlag){
20089:   static char *home_dir = NULL;
20090:   if( clearFlag ){
20091:     free(home_dir);
20092:     home_dir = 0;
20093:     return 0;
20094:   }
20095:   if( home_dir ) return home_dir;
20096: 
20097: #if !defined(_WIN32) && !defined(WIN32) && !defined(_WIN32_WCE) \
20098:      && !defined(__RTP__) && !defined(_WRS_KERNEL)
20099:   {
20100:     struct passwd *pwent;
20101:     uid_t uid = getuid();
20102:     if( (pwent=getpwuid(uid)) != NULL) {
20103:       home_dir = pwent->pw_dir;
20104:     }
20105:   }
20106: #endif
20107: 
20108: #if defined(_WIN32_WCE)
20109:   /* Windows CE (arm-wince-mingw32ce-gcc) does not provide getenv()
20110:    */
20111:   home_dir = "/";
20112: #else
20113: 
20114: #if defined(_WIN32) || defined(WIN32)
20115:   if (!home_dir) {
20116:     home_dir = getenv("USERPROFILE");
20117:   }
20118: #endif
20119: 
20120:   if (!home_dir) {
20121:     home_dir = getenv("HOME");
20122:   }
20123: 
20124: #if defined(_WIN32) || defined(WIN32)
20125:   if (!home_dir) {
20126:     char *zDrive, *zPath;
20127:     int n;
20128:     zDrive = getenv("HOMEDRIVE");
20129:     zPath = getenv("HOMEPATH");
20130:     if( zDrive && zPath ){
20131:       n = strlen30(zDrive) + strlen30(zPath) + 1;
20132:       home_dir = malloc( n );
20133:       if( home_dir==0 ) return 0;
20134:       sqlite3_snprintf(n, home_dir, "%s%s", zDrive, zPath);
20135:       return home_dir;
20136:     }
20137:     home_dir = "c:\\";
20138:   }
20139: #endif
20140: 
20141: #endif /* !_WIN32_WCE */
20142: 
20143:   if( home_dir ){
20144:     int n = strlen30(home_dir) + 1;
20145:     char *z = malloc( n );
20146:     if( z ) memcpy(z, home_dir, n);
20147:     home_dir = z;
20148:   }
20149: 
20150:   return home_dir;
20151: }
20152: 
20153: /*
20154: ** Read input from the file given by sqliterc_override.  Or if that
20155: ** parameter is NULL, take input from ~/.duckdbrc
20156: **
20157: ** Returns the number of errors.
20158: */
20159: static void process_sqliterc(
20160:   ShellState *p,                  /* Configuration data */
20161:   const char *sqliterc_override   /* Name of config file. NULL to use default */
20162: ){
20163:   char *home_dir = NULL;
20164:   const char *sqliterc = sqliterc_override;
20165:   char *zBuf = 0;
20166:   FILE *inSaved = p->in;
20167:   int savedLineno = p->lineno;
20168: 
20169:   if (sqliterc == NULL) {
20170:     home_dir = find_home_dir(0);
20171:     if( home_dir==0 ){
20172:       raw_printf(stderr, "-- warning: cannot find home directory;"
20173:                       " cannot read ~/.duckdbrc\n");
20174:       return;
20175:     }
20176:     zBuf = sqlite3_mprintf("%s/.duckdbrc",home_dir);
20177:     sqliterc = zBuf;
20178:   }
20179:   p->in = fopen(sqliterc,"rb");
20180:   if( p->in ){
20181:     if( stdin_is_interactive ){
20182:       utf8_printf(stderr,"-- Loading resources from %s\n",sqliterc);
20183:     }
20184:     process_input(p);
20185:     fclose(p->in);
20186:   }
20187:   p->in = inSaved;
20188:   p->lineno = savedLineno;
20189:   sqlite3_free(zBuf);
20190: }
20191: 
20192: /*
20193: ** Show available command line options
20194: */
20195: static const char zOptions[] =
20196: #if defined(SQLITE_HAVE_ZLIB) && !defined(SQLITE_OMIT_VIRTUALTABLE)
20197:   "   -A ARGS...           run \".archive ARGS\" and exit\n"
20198: #endif
20199:   "   -append              append the database to the end of the file\n"
20200:   "   -ascii               set output mode to 'ascii'\n"
20201:   "   -bail                stop after hitting an error\n"
20202:   "   -batch               force batch I/O\n"
20203:   "   -box                 set output mode to 'box'\n"
20204:   "   -column              set output mode to 'column'\n"
20205:   "   -cmd COMMAND         run \"COMMAND\" before reading stdin\n"
20206:   "   -csv                 set output mode to 'csv'\n"
20207: #if defined(SQLITE_ENABLE_DESERIALIZE)
20208:   "   -deserialize         open the database using sqlite3_deserialize()\n"
20209: #endif
20210:   "   -echo                print commands before execution\n"
20211:   "   -init FILENAME       read/process named file\n"
20212:   "   -[no]header          turn headers on or off\n"
20213: #if defined(SQLITE_ENABLE_MEMSYS3) || defined(SQLITE_ENABLE_MEMSYS5)
20214:   "   -heap SIZE           Size of heap for memsys3 or memsys5\n"
20215: #endif
20216:   "   -help                show this message\n"
20217:   "   -html                set output mode to HTML\n"
20218:   "   -interactive         force interactive I/O\n"
20219:   "   -json                set output mode to 'json'\n"
20220:   "   -line                set output mode to 'line'\n"
20221:   "   -list                set output mode to 'list'\n"
20222:   "   -lookaside SIZE N    use N entries of SZ bytes for lookaside memory\n"
20223:   "   -markdown            set output mode to 'markdown'\n"
20224: #if defined(SQLITE_ENABLE_DESERIALIZE)
20225:   "   -maxsize N           maximum size for a --deserialize database\n"
20226: #endif
20227:   "   -memtrace            trace all memory allocations and deallocations\n"
20228:   "   -mmap N              default mmap size set to N\n"
20229: #ifdef SQLITE_ENABLE_MULTIPLEX
20230:   "   -multiplex           enable the multiplexor VFS\n"
20231: #endif
20232:   "   -newline SEP         set output row separator. Default: '\\n'\n"
20233:   "   -nofollow            refuse to open symbolic links to database files\n"
20234:   "   -nullvalue TEXT      set text string for NULL values. Default ''\n"
20235:   "   -pagecache SIZE N    use N slots of SZ bytes each for page cache memory\n"
20236:   "   -quote               set output mode to 'quote'\n"
20237:   "   -readonly            open the database read-only\n"
20238:   "   -separator SEP       set output column separator. Default: '|'\n"
20239: #ifdef SQLITE_ENABLE_SORTER_REFERENCES
20240:   "   -sorterref SIZE      sorter references threshold size\n"
20241: #endif
20242:   "   -stats               print memory stats before each finalize\n"
20243:   "   -table               set output mode to 'table'\n"
20244:   "   -version             show SQLite version\n"
20245:   "   -vfs NAME            use NAME as the default VFS\n"
20246: #ifdef SQLITE_ENABLE_VFSTRACE
20247:   "   -vfstrace            enable tracing of all VFS calls\n"
20248: #endif
20249: #ifdef SQLITE_HAVE_ZLIB
20250:   "   -zip                 open the file as a ZIP Archive\n"
20251: #endif
20252: ;
20253: static void usage(int showDetail){
20254:   utf8_printf(stderr,
20255:       "Usage: %s [OPTIONS] FILENAME [SQL]\n"
20256:       "FILENAME is the name of an SQLite database. A new database is created\n"
20257:       "if the file does not previously exist.\n", Argv0);
20258:   if( showDetail ){
20259:     utf8_printf(stderr, "OPTIONS include:\n%s", zOptions);
20260:   }else{
20261:     raw_printf(stderr, "Use the -help option for additional information\n");
20262:   }
20263:   exit(1);
20264: }
20265: 
20266: /*
20267: ** Internal check:  Verify that the SQLite is uninitialized.  Print a
20268: ** error message if it is initialized.
20269: */
20270: static void verify_uninitialized(void){
20271:   if( sqlite3_config(-1)==SQLITE_MISUSE ){
20272:     utf8_printf(stdout, "WARNING: attempt to configure SQLite after"
20273:                         " initialization.\n");
20274:   }
20275: }
20276: 
20277: /*
20278: ** Initialize the state information in data
20279: */
20280: static void main_init(ShellState *data) {
20281:   memset(data, 0, sizeof(*data));
20282:   data->normalMode = data->cMode = data->mode = MODE_Box;
20283:   data->autoExplain = 1;
20284:   memcpy(data->colSeparator,SEP_Column, 2);
20285:   memcpy(data->rowSeparator,SEP_Row, 2);
20286:   data->showHeader = 1;
20287:   data->shellFlgs = SHFLG_Lookaside;
20288:   verify_uninitialized();
20289:   sqlite3_config(SQLITE_CONFIG_URI, 1);
20290:   sqlite3_config(SQLITE_CONFIG_LOG, shellLog, data);
20291:   sqlite3_config(SQLITE_CONFIG_MULTITHREAD);
20292:   sqlite3_snprintf(sizeof(mainPrompt), mainPrompt,"D ");
20293:   sqlite3_snprintf(sizeof(continuePrompt), continuePrompt,"   ...> ");
20294: }
20295: 
20296: /*
20297: ** Output text to the console in a font that attracts extra attention.
20298: */
20299: #ifdef _WIN32
20300: static void printBold(const char *zText){
20301: #if !SQLITE_OS_WINRT
20302:   HANDLE out = GetStdHandle(STD_OUTPUT_HANDLE);
20303:   CONSOLE_SCREEN_BUFFER_INFO defaultScreenInfo;
20304:   GetConsoleScreenBufferInfo(out, &defaultScreenInfo);
20305:   SetConsoleTextAttribute(out,
20306:          FOREGROUND_RED|FOREGROUND_INTENSITY
20307:   );
20308: #endif
20309:   printf("%s", zText);
20310: #if !SQLITE_OS_WINRT
20311:   SetConsoleTextAttribute(out, defaultScreenInfo.wAttributes);
20312: #endif
20313: }
20314: #else
20315: static void printBold(const char *zText){
20316:   printf("\033[1m%s\033[0m", zText);
20317: }
20318: #endif
20319: 
20320: /*
20321: ** Get the argument to an --option.  Throw an error and die if no argument
20322: ** is available.
20323: */
20324: static char *cmdline_option_value(int argc, char **argv, int i){
20325:   if( i==argc ){
20326:     utf8_printf(stderr, "%s: Error: missing argument to %s\n",
20327:             argv[0], argv[argc-1]);
20328:     exit(1);
20329:   }
20330:   return argv[i];
20331: }
20332: 
20333: #ifndef SQLITE_SHELL_IS_UTF8
20334: #  if (defined(_WIN32) || defined(WIN32)) && defined(_MSC_VER)
20335: #    define SQLITE_SHELL_IS_UTF8          (0)
20336: #  else
20337: #    define SQLITE_SHELL_IS_UTF8          (1)
20338: #  endif
20339: #endif
20340: 
20341: #if SQLITE_SHELL_IS_UTF8
20342: int SQLITE_CDECL main(int argc, char **argv){
20343: #else
20344: int SQLITE_CDECL wmain(int argc, wchar_t **wargv){
20345:   char **argv;
20346: #endif
20347:   char *zErrMsg = 0;
20348:   ShellState data;
20349:   const char *zInitFile = 0;
20350:   int i;
20351:   int rc = 0;
20352:   int warnInmemoryDb = 0;
20353:   int readStdin = 1;
20354:   int nCmd = 0;
20355:   char **azCmd = 0;
20356:   const char *zVfs = 0;           /* Value of -vfs command-line option */
20357: #if !SQLITE_SHELL_IS_UTF8
20358:   char **argvToFree = 0;
20359:   int argcToFree = 0;
20360: #endif
20361: 
20362:   setBinaryMode(stdin, 0);
20363:   setvbuf(stderr, 0, _IONBF, 0); /* Make sure stderr is unbuffered */
20364:   stdin_is_interactive = isatty(0);
20365:   stdout_is_console = isatty(1);
20366: 
20367: #ifdef SQLITE_DEBUG
20368:   registerOomSimulator();
20369: #endif
20370: 
20371: #if !defined(_WIN32_WCE)
20372:   if( getenv("SQLITE_DEBUG_BREAK") ){
20373:     if( isatty(0) && isatty(2) ){
20374:       fprintf(stderr,
20375:           "attach debugger to process %d and press any key to continue.\n",
20376:           GETPID());
20377:       fgetc(stdin);
20378:     }else{
20379: #if defined(_WIN32) || defined(WIN32)
20380: #if SQLITE_OS_WINRT
20381:       __debugbreak();
20382: #else
20383:       DebugBreak();
20384: #endif
20385: #elif defined(SIGTRAP)
20386:       raise(SIGTRAP);
20387: #endif
20388:     }
20389:   }
20390: #endif
20391: 
20392: #if USE_SYSTEM_SQLITE+0!=1
20393:   if( strncmp(sqlite3_sourceid(),SQLITE_SOURCE_ID,60)!=0 ){
20394:     utf8_printf(stderr, "SQLite header and source version mismatch\n%s\n%s\n",
20395:             sqlite3_sourceid(), SQLITE_SOURCE_ID);
20396:     exit(1);
20397:   }
20398: #endif
20399:   main_init(&data);
20400: 
20401:   /* On Windows, we must translate command-line arguments into UTF-8.
20402:   ** The SQLite memory allocator subsystem has to be enabled in order to
20403:   ** do this.  But we want to run an sqlite3_shutdown() afterwards so that
20404:   ** subsequent sqlite3_config() calls will work.  So copy all results into
20405:   ** memory that does not come from the SQLite memory allocator.
20406:   */
20407: #if !SQLITE_SHELL_IS_UTF8
20408:   sqlite3_initialize();
20409:   argvToFree = malloc(sizeof(argv[0])*argc*2);
20410:   argcToFree = argc;
20411:   argv = argvToFree + argc;
20412:   if( argv==0 ) shell_out_of_memory();
20413:   for(i=0; i<argc; i++){
20414:     char *z = sqlite3_win32_unicode_to_utf8(wargv[i]);
20415:     int n;
20416:     if( z==0 ) shell_out_of_memory();
20417:     n = (int)strlen(z);
20418:     argv[i] = malloc( n+1 );
20419:     if( argv[i]==0 ) shell_out_of_memory();
20420:     memcpy(argv[i], z, n+1);
20421:     argvToFree[i] = argv[i];
20422:     sqlite3_free(z);
20423:   }
20424:   sqlite3_shutdown();
20425: #endif
20426: 
20427:   assert( argc>=1 && argv && argv[0] );
20428:   Argv0 = argv[0];
20429: 
20430:   /* Make sure we have a valid signal handler early, before anything
20431:   ** else is done.
20432:   */
20433: #ifdef SIGINT
20434:   signal(SIGINT, interrupt_handler);
20435: #elif (defined(_WIN32) || defined(WIN32)) && !defined(_WIN32_WCE)
20436:   SetConsoleCtrlHandler(ConsoleCtrlHandler, TRUE);
20437: #endif
20438: 
20439: #ifdef SQLITE_SHELL_DBNAME_PROC
20440:   {
20441:     /* If the SQLITE_SHELL_DBNAME_PROC macro is defined, then it is the name
20442:     ** of a C-function that will provide the name of the database file.  Use
20443:     ** this compile-time option to embed this shell program in larger
20444:     ** applications. */
20445:     extern void SQLITE_SHELL_DBNAME_PROC(const char**);
20446:     SQLITE_SHELL_DBNAME_PROC(&data.zDbFilename);
20447:     warnInmemoryDb = 0;
20448:   }
20449: #endif
20450: 
20451:   /* Do an initial pass through the command-line argument to locate
20452:   ** the name of the database file, the name of the initialization file,
20453:   ** the size of the alternative malloc heap,
20454:   ** and the first command to execute.
20455:   */
20456:   verify_uninitialized();
20457:   for(i=1; i<argc; i++){
20458:     char *z;
20459:     z = argv[i];
20460:     if( z[0]!='-' ){
20461:       if( data.zDbFilename==0 ){
20462:         data.zDbFilename = z;
20463:       }else{
20464:         /* Excesss arguments are interpreted as SQL (or dot-commands) and
20465:         ** mean that nothing is read from stdin */
20466:         readStdin = 0;
20467:         nCmd++;
20468:         azCmd = realloc(azCmd, sizeof(azCmd[0])*nCmd);
20469:         if( azCmd==0 ) shell_out_of_memory();
20470:         azCmd[nCmd-1] = z;
20471:       }
20472:     }
20473:     if( z[1]=='-' ) z++;
20474:     if( strcmp(z,"-separator")==0
20475:      || strcmp(z,"-nullvalue")==0
20476:      || strcmp(z,"-newline")==0
20477:      || strcmp(z,"-cmd")==0
20478:     ){
20479:       (void)cmdline_option_value(argc, argv, ++i);
20480:     }else if( strcmp(z,"-init")==0 ){
20481:       zInitFile = cmdline_option_value(argc, argv, ++i);
20482:     }else if( strcmp(z,"-batch")==0 ){
20483:       /* Need to check for batch mode here to so we can avoid printing
20484:       ** informational messages (like from process_sqliterc) before
20485:       ** we do the actual processing of arguments later in a second pass.
20486:       */
20487:       stdin_is_interactive = 0;
20488:     }else if( strcmp(z,"-heap")==0 ){
20489: #if defined(SQLITE_ENABLE_MEMSYS3) || defined(SQLITE_ENABLE_MEMSYS5)
20490:       const char *zSize;
20491:       sqlite3_int64 szHeap;
20492: 
20493:       zSize = cmdline_option_value(argc, argv, ++i);
20494:       szHeap = integerValue(zSize);
20495:       if( szHeap>0x7fff0000 ) szHeap = 0x7fff0000;
20496:       sqlite3_config(SQLITE_CONFIG_HEAP, malloc((int)szHeap), (int)szHeap, 64);
20497: #else
20498:       (void)cmdline_option_value(argc, argv, ++i);
20499: #endif
20500:     }else if( strcmp(z,"-pagecache")==0 ){
20501:       int n, sz;
20502:       sz = (int)integerValue(cmdline_option_value(argc,argv,++i));
20503:       if( sz>70000 ) sz = 70000;
20504:       if( sz<0 ) sz = 0;
20505:       n = (int)integerValue(cmdline_option_value(argc,argv,++i));
20506:       sqlite3_config(SQLITE_CONFIG_PAGECACHE,
20507:                     (n>0 && sz>0) ? malloc(n*sz) : 0, sz, n);
20508:       data.shellFlgs |= SHFLG_Pagecache;
20509:     }else if( strcmp(z,"-lookaside")==0 ){
20510:       int n, sz;
20511:       sz = (int)integerValue(cmdline_option_value(argc,argv,++i));
20512:       if( sz<0 ) sz = 0;
20513:       n = (int)integerValue(cmdline_option_value(argc,argv,++i));
20514:       if( n<0 ) n = 0;
20515:       sqlite3_config(SQLITE_CONFIG_LOOKASIDE, sz, n);
20516:       if( sz*n==0 ) data.shellFlgs &= ~SHFLG_Lookaside;
20517: #ifdef SQLITE_ENABLE_VFSTRACE
20518:     }else if( strcmp(z,"-vfstrace")==0 ){
20519:       extern int vfstrace_register(
20520:          const char *zTraceName,
20521:          const char *zOldVfsName,
20522:          int (*xOut)(const char*,void*),
20523:          void *pOutArg,
20524:          int makeDefault
20525:       );
20526:       vfstrace_register("trace",0,(int(*)(const char*,void*))fputs,stderr,1);
20527: #endif
20528: #ifdef SQLITE_ENABLE_MULTIPLEX
20529:     }else if( strcmp(z,"-multiplex")==0 ){
20530:       extern int sqlite3_multiple_initialize(const char*,int);
20531:       sqlite3_multiplex_initialize(0, 1);
20532: #endif
20533:     }else if( strcmp(z,"-mmap")==0 ){
20534:       sqlite3_int64 sz = integerValue(cmdline_option_value(argc,argv,++i));
20535:       sqlite3_config(SQLITE_CONFIG_MMAP_SIZE, sz, sz);
20536: #ifdef SQLITE_ENABLE_SORTER_REFERENCES
20537:     }else if( strcmp(z,"-sorterref")==0 ){
20538:       sqlite3_int64 sz = integerValue(cmdline_option_value(argc,argv,++i));
20539:       sqlite3_config(SQLITE_CONFIG_SORTERREF_SIZE, (int)sz);
20540: #endif
20541:     }else if( strcmp(z,"-vfs")==0 ){
20542:       zVfs = cmdline_option_value(argc, argv, ++i);
20543: #ifdef SQLITE_HAVE_ZLIB
20544:     }else if( strcmp(z,"-zip")==0 ){
20545:       data.openMode = SHELL_OPEN_ZIPFILE;
20546: #endif
20547:     }else if( strcmp(z,"-append")==0 ){
20548:       data.openMode = SHELL_OPEN_APPENDVFS;
20549: #ifdef SQLITE_ENABLE_DESERIALIZE
20550:     }else if( strcmp(z,"-deserialize")==0 ){
20551:       data.openMode = SHELL_OPEN_DESERIALIZE;
20552:     }else if( strcmp(z,"-maxsize")==0 && i+1<argc ){
20553:       data.szMax = integerValue(argv[++i]);
20554: #endif
20555:     }else if( strcmp(z,"-readonly")==0 ){
20556:       data.openMode = SHELL_OPEN_READONLY;
20557:     }else if( strcmp(z,"-nofollow")==0 ){
20558:       data.openFlags = SQLITE_OPEN_NOFOLLOW;
20559: #if !defined(SQLITE_OMIT_VIRTUALTABLE) && defined(SQLITE_HAVE_ZLIB)
20560:     }else if( strncmp(z, "-A",2)==0 ){
20561:       /* All remaining command-line arguments are passed to the ".archive"
20562:       ** command, so ignore them */
20563:       break;
20564: #endif
20565:     }else if( strcmp(z, "-memtrace")==0 ){
20566:       sqlite3MemTraceActivate(stderr);
20567:     }
20568:   }
20569:   verify_uninitialized();
20570: 
20571: 
20572: #ifdef SQLITE_SHELL_INIT_PROC
20573:   {
20574:     /* If the SQLITE_SHELL_INIT_PROC macro is defined, then it is the name
20575:     ** of a C-function that will perform initialization actions on SQLite that
20576:     ** occur just before or after sqlite3_initialize(). Use this compile-time
20577:     ** option to embed this shell program in larger applications. */
20578:     extern void SQLITE_SHELL_INIT_PROC(void);
20579:     SQLITE_SHELL_INIT_PROC();
20580:   }
20581: #else
20582:   /* All the sqlite3_config() calls have now been made. So it is safe
20583:   ** to call sqlite3_initialize() and process any command line -vfs option. */
20584:   sqlite3_initialize();
20585: #endif
20586: 
20587:   if( zVfs ){
20588:     sqlite3_vfs *pVfs = sqlite3_vfs_find(zVfs);
20589:     if( pVfs ){
20590:       sqlite3_vfs_register(pVfs, 1);
20591:     }else{
20592:       utf8_printf(stderr, "no such VFS: \"%s\"\n", argv[i]);
20593:       exit(1);
20594:     }
20595:   }
20596: 
20597:   if( data.zDbFilename==0 ){
20598: #ifndef SQLITE_OMIT_MEMORYDB
20599:     data.zDbFilename = ":memory:";
20600:     warnInmemoryDb = argc==1;
20601: #else
20602:     utf8_printf(stderr,"%s: Error: no database filename specified\n", Argv0);
20603:     return 1;
20604: #endif
20605:   }
20606:   data.out = stdout;
20607:   sqlite3_appendvfs_init(0,0,0);
20608: 
20609:   /* Go ahead and open the database file if it already exists.  If the
20610:   ** file does not exist, delay opening it.  This prevents empty database
20611:   ** files from being created if a user mistypes the database name argument
20612:   ** to the sqlite command-line tool.
20613:   */
20614:   if( access(data.zDbFilename, 0)==0 ){
20615:     open_db(&data, 0);
20616:   }
20617: 
20618:   /* Process the initialization file if there is one.  If no -init option
20619:   ** is given on the command line, look for a file named ~/.sqliterc and
20620:   ** try to process it.
20621:   */
20622:   process_sqliterc(&data,zInitFile);
20623: 
20624:   /* Make a second pass through the command-line argument and set
20625:   ** options.  This second pass is delayed until after the initialization
20626:   ** file is processed so that the command-line arguments will override
20627:   ** settings in the initialization file.
20628:   */
20629:   for(i=1; i<argc; i++){
20630:     char *z = argv[i];
20631:     if( z[0]!='-' ) continue;
20632:     if( z[1]=='-' ){ z++; }
20633:     if( strcmp(z,"-init")==0 ){
20634:       i++;
20635:     }else if( strcmp(z,"-html")==0 ){
20636:       data.mode = MODE_Html;
20637:     }else if( strcmp(z,"-list")==0 ){
20638:       data.mode = MODE_List;
20639:     }else if( strcmp(z,"-quote")==0 ){
20640:       data.mode = MODE_Quote;
20641:     }else if( strcmp(z,"-line")==0 ){
20642:       data.mode = MODE_Line;
20643:     }else if( strcmp(z,"-column")==0 ){
20644:       data.mode = MODE_Column;
20645:     }else if( strcmp(z,"-json")==0 ){
20646:       data.mode = MODE_Json;
20647:     }else if( strcmp(z,"-markdown")==0 ){
20648:       data.mode = MODE_Markdown;
20649:     }else if( strcmp(z,"-table")==0 ){
20650:       data.mode = MODE_Table;
20651:     }else if( strcmp(z,"-box")==0 ){
20652:       data.mode = MODE_Box;
20653:     }else if( strcmp(z,"-csv")==0 ){
20654:       data.mode = MODE_Csv;
20655:       memcpy(data.colSeparator,",",2);
20656: #ifdef SQLITE_HAVE_ZLIB
20657:     }else if( strcmp(z,"-zip")==0 ){
20658:       data.openMode = SHELL_OPEN_ZIPFILE;
20659: #endif
20660:     }else if( strcmp(z,"-append")==0 ){
20661:       data.openMode = SHELL_OPEN_APPENDVFS;
20662: #ifdef SQLITE_ENABLE_DESERIALIZE
20663:     }else if( strcmp(z,"-deserialize")==0 ){
20664:       data.openMode = SHELL_OPEN_DESERIALIZE;
20665:     }else if( strcmp(z,"-maxsize")==0 && i+1<argc ){
20666:       data.szMax = integerValue(argv[++i]);
20667: #endif
20668:     }else if( strcmp(z,"-readonly")==0 ){
20669:       data.openMode = SHELL_OPEN_READONLY;
20670:     }else if( strcmp(z,"-nofollow")==0 ){
20671:       data.openFlags |= SQLITE_OPEN_NOFOLLOW;
20672:     }else if( strcmp(z,"-ascii")==0 ){
20673:       data.mode = MODE_Ascii;
20674:       sqlite3_snprintf(sizeof(data.colSeparator), data.colSeparator,
20675:                        SEP_Unit);
20676:       sqlite3_snprintf(sizeof(data.rowSeparator), data.rowSeparator,
20677:                        SEP_Record);
20678:     }else if( strcmp(z,"-separator")==0 ){
20679:       sqlite3_snprintf(sizeof(data.colSeparator), data.colSeparator,
20680:                        "%s",cmdline_option_value(argc,argv,++i));
20681:     }else if( strcmp(z,"-newline")==0 ){
20682:       sqlite3_snprintf(sizeof(data.rowSeparator), data.rowSeparator,
20683:                        "%s",cmdline_option_value(argc,argv,++i));
20684:     }else if( strcmp(z,"-nullvalue")==0 ){
20685:       sqlite3_snprintf(sizeof(data.nullValue), data.nullValue,
20686:                        "%s",cmdline_option_value(argc,argv,++i));
20687:     }else if( strcmp(z,"-header")==0 ){
20688:       data.showHeader = 1;
20689:     }else if( strcmp(z,"-noheader")==0 ){
20690:       data.showHeader = 0;
20691:     }else if( strcmp(z,"-echo")==0 ){
20692:       ShellSetFlag(&data, SHFLG_Echo);
20693:     }else if( strcmp(z,"-eqp")==0 ){
20694:       data.autoEQP = AUTOEQP_on;
20695:     }else if( strcmp(z,"-eqpfull")==0 ){
20696:       data.autoEQP = AUTOEQP_full;
20697:     }else if( strcmp(z,"-stats")==0 ){
20698:       data.statsOn = 1;
20699:     }else if( strcmp(z,"-scanstats")==0 ){
20700:       data.scanstatsOn = 1;
20701:     }else if( strcmp(z,"-backslash")==0 ){
20702:       /* Undocumented command-line option: -backslash
20703:       ** Causes C-style backslash escapes to be evaluated in SQL statements
20704:       ** prior to sending the SQL into SQLite.  Useful for injecting
20705:       ** crazy bytes in the middle of SQL statements for testing and debugging.
20706:       */
20707:       ShellSetFlag(&data, SHFLG_Backslash);
20708:     }else if( strcmp(z,"-bail")==0 ){
20709:       bail_on_error = 1;
20710:     }else if( strcmp(z,"-version")==0 ){
20711:       printf("%s %s\n", sqlite3_libversion(), sqlite3_sourceid());
20712:       return 0;
20713:     }else if( strcmp(z,"-interactive")==0 ){
20714:       stdin_is_interactive = 1;
20715:     }else if( strcmp(z,"-batch")==0 ){
20716:       stdin_is_interactive = 0;
20717:     }else if( strcmp(z,"-heap")==0 ){
20718:       i++;
20719:     }else if( strcmp(z,"-pagecache")==0 ){
20720:       i+=2;
20721:     }else if( strcmp(z,"-lookaside")==0 ){
20722:       i+=2;
20723:     }else if( strcmp(z,"-mmap")==0 ){
20724:       i++;
20725:     }else if( strcmp(z,"-memtrace")==0 ){
20726:       i++;
20727: #ifdef SQLITE_ENABLE_SORTER_REFERENCES
20728:     }else if( strcmp(z,"-sorterref")==0 ){
20729:       i++;
20730: #endif
20731:     }else if( strcmp(z,"-vfs")==0 ){
20732:       i++;
20733: #ifdef SQLITE_ENABLE_VFSTRACE
20734:     }else if( strcmp(z,"-vfstrace")==0 ){
20735:       i++;
20736: #endif
20737: #ifdef SQLITE_ENABLE_MULTIPLEX
20738:     }else if( strcmp(z,"-multiplex")==0 ){
20739:       i++;
20740: #endif
20741:     }else if( strcmp(z,"-help")==0 ){
20742:       usage(1);
20743:     }else if( strcmp(z,"-cmd")==0 ){
20744:       /* Run commands that follow -cmd first and separately from commands
20745:       ** that simply appear on the command-line.  This seems goofy.  It would
20746:       ** be better if all commands ran in the order that they appear.  But
20747:       ** we retain the goofy behavior for historical compatibility. */
20748:       if( i==argc-1 ) break;
20749:       z = cmdline_option_value(argc,argv,++i);
20750:       if( z[0]=='.' ){
20751:         rc = do_meta_command(z, &data);
20752:         if( rc && bail_on_error ) return rc==2 ? 0 : rc;
20753:       }else{
20754:         open_db(&data, 0);
20755:         rc = shell_exec(&data, z, &zErrMsg);
20756:         if( zErrMsg!=0 ){
20757:           utf8_printf(stderr,"Error: %s\n", zErrMsg);
20758:           if( bail_on_error ) return rc!=0 ? rc : 1;
20759:         }else if( rc!=0 ){
20760:           utf8_printf(stderr,"Error: unable to process SQL \"%s\"\n", z);
20761:           if( bail_on_error ) return rc;
20762:         }
20763:       }
20764: #if !defined(SQLITE_OMIT_VIRTUALTABLE) && defined(SQLITE_HAVE_ZLIB)
20765:     }else if( strncmp(z, "-A", 2)==0 ){
20766:       if( nCmd>0 ){
20767:         utf8_printf(stderr, "Error: cannot mix regular SQL or dot-commands"
20768:                             " with \"%s\"\n", z);
20769:         return 1;
20770:       }
20771:       open_db(&data, OPEN_DB_ZIPFILE);
20772:       if( z[2] ){
20773:         argv[i] = &z[2];
20774:         arDotCommand(&data, 1, argv+(i-1), argc-(i-1));
20775:       }else{
20776:         arDotCommand(&data, 1, argv+i, argc-i);
20777:       }
20778:       readStdin = 0;
20779:       break;
20780: #endif
20781:     }else{
20782:       utf8_printf(stderr,"%s: Error: unknown option: %s\n", Argv0, z);
20783:       raw_printf(stderr,"Use -help for a list of options.\n");
20784:       return 1;
20785:     }
20786:     data.cMode = data.mode;
20787:   }
20788: 
20789:   if( !readStdin ){
20790:     /* Run all arguments that do not begin with '-' as if they were separate
20791:     ** command-line inputs, except for the argToSkip argument which contains
20792:     ** the database filename.
20793:     */
20794:     for(i=0; i<nCmd; i++){
20795:       if( azCmd[i][0]=='.' ){
20796:         rc = do_meta_command(azCmd[i], &data);
20797:         if( rc ) return rc==2 ? 0 : rc;
20798:       }else{
20799:         open_db(&data, 0);
20800:         rc = shell_exec(&data, azCmd[i], &zErrMsg);
20801:         if( zErrMsg!=0 ){
20802:           utf8_printf(stderr,"Error: %s\n", zErrMsg);
20803:           return rc!=0 ? rc : 1;
20804:         }else if( rc!=0 ){
20805:           utf8_printf(stderr,"Error: unable to process SQL: %s\n", azCmd[i]);
20806:           return rc;
20807:         }
20808:       }
20809:     }
20810:     free(azCmd);
20811:   }else{
20812:     /* Run commands received from standard input
20813:     */
20814:     if( stdin_is_interactive ){
20815:       char *zHome;
20816:       char *zHistory;
20817:       int nHistory;
20818:       printf(
20819:         "%s %.19s\n" /*extra-version-info*/
20820:         "Enter \".help\" for usage hints.\n",
20821:         sqlite3_libversion(), sqlite3_sourceid()
20822:       );
20823:       if( warnInmemoryDb ){
20824:         printf("Connected to a ");
20825:         printBold("transient in-memory database");
20826:         printf(".\nUse \".open FILENAME\" to reopen on a "
20827:                "persistent database.\n");
20828:       }
20829:       zHistory = getenv("DUCKDB_HISTORY");
20830:       if( zHistory ){
20831:         zHistory = strdup(zHistory);
20832:       }else if( (zHome = find_home_dir(0))!=0 ){
20833:         nHistory = strlen30(zHome) + 20;
20834:         if( (zHistory = malloc(nHistory))!=0 ){
20835:           sqlite3_snprintf(nHistory, zHistory,"%s/.duckdb_history", zHome);
20836:         }
20837:       }
20838:       if( zHistory ){ shell_read_history(zHistory); }
20839: #if HAVE_READLINE || HAVE_EDITLINE
20840:       rl_attempted_completion_function = readline_completion;
20841: #elif HAVE_LINENOISE
20842:       linenoiseSetCompletionCallback(linenoise_completion);
20843: #endif
20844:       data.in = 0;
20845:       rc = process_input(&data);
20846:       if( zHistory ){
20847:         shell_stifle_history(2000);
20848:         shell_write_history(zHistory);
20849:         free(zHistory);
20850:       }
20851:     }else{
20852:       data.in = stdin;
20853:       rc = process_input(&data);
20854:     }
20855:   }
20856:   set_table_name(&data, 0);
20857:   if( data.db ){
20858:     session_close_all(&data);
20859:     close_db(data.db);
20860:   }
20861:   sqlite3_free(data.zFreeOnClose);
20862:   find_home_dir(1);
20863:   output_reset(&data);
20864:   data.doXdgOpen = 0;
20865:   clearTempFile(&data);
20866: #if !SQLITE_SHELL_IS_UTF8
20867:   for(i=0; i<argcToFree; i++) free(argvToFree[i]);
20868:   free(argvToFree);
20869: #endif
20870:   free(data.colWidth);
20871:   /* Clear the global data structure so that valgrind will detect memory
20872:   ** leaks */
20873:   memset(&data, 0, sizeof(data));
20874:   return rc;
20875: }
[end of tools/shell/shell.c]
</code>
Here is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.
<patch>
--- a/file.cpp
+++ b/file.cpp
@@ -3,35 +3,44 @@
 #include <cstdlib>
 
 int euclidean(int a, int b) {
-    while (b) {
-        int temp = b;
-        b = a % b;
-        a = temp;
+    if (b == 0) {
+        return a;
     }
-    return a;
+    return euclidean(b, a % b);
 }
 
 std::vector<std::pair<int, int>> bresenham(int x0, int y0, int x1, int y1) {
     std::vector<std::pair<int, int>> points;
     int dx = abs(x1 - x0);
     int dy = abs(y1 - y0);
+    int x = x0, y = y0;
     int sx = (x0 < x1) ? 1 : -1;
     int sy = (y0 < y1) ? 1 : -1;
-    int err = dx - dy;
 
-    while (true) {
-        points.emplace_back(x0, y0);
-        if (x0 == x1 && y0 == y1) break;
-        int e2 = 2 * err;
-        if (e2 > -dy) {
+    if (dx > dy) {
+        int err = dx / 2;
+        while (x != x1) {
+            points.emplace_back(x, y);
             err -= dy;
-            x0 += sx;
+            if (err < 0) {
+                y += sy;
+                err += dx;
+            }
+            x += sx;
         }
-        if (e2 < dx) {
-            err += dx;
-            y0 += sy;
+    } else {
+        int err = dy / 2;
+        while (y != y1) {
+            points.emplace_back(x, y);
+            err -= dx;
+            if (err < 0) {
+                x += sx;
+                err += dy;
+            }
+            y += sy;
         }
     }
 
+    points.emplace_back(x, y);
     return points;
 }

</patch>

I need you to solve the provided issue by generating a single patch file that I can apply directly to this repository using git apply.
Please respond with a single patch file in the format shown above.
Make sure to only include the patch file contents so that the contents of your output can be copied into a patch file and applied directly

Respond below: