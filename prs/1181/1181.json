{
  "repo": "duckdb/duckdb",
  "pull_number": 1181,
  "instance_id": "duckdb__duckdb-1181",
  "issue_numbers": [
    "1170",
    "1170"
  ],
  "base_commit": "644370ad9aa6ea074d31ea274b02faefb2d432d6",
  "patch": "diff --git a/CMakeLists.txt b/CMakeLists.txt\nindex c94679956670..a37fe24ee13d 100644\n--- a/CMakeLists.txt\n+++ b/CMakeLists.txt\n@@ -118,6 +118,30 @@ execute_process(\n   WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}\n   OUTPUT_VARIABLE GIT_COMMIT_HASH\n   OUTPUT_STRIP_TRAILING_WHITESPACE)\n+execute_process(\n+  COMMAND git describe --tags --abbrev=0\n+  WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}\n+  OUTPUT_VARIABLE GIT_LAST_TAG\n+  OUTPUT_STRIP_TRAILING_WHITESPACE)\n+execute_process(\n+  COMMAND git describe --tags --long\n+  WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}\n+  OUTPUT_VARIABLE GIT_ITERATION\n+  OUTPUT_STRIP_TRAILING_WHITESPACE)\n+\n+string(REGEX REPLACE \"v([0-9]+.[0-9]+.)[0-9]+\" \"\\\\1\" DUCKDB_MAIN_VERSION \"${GIT_LAST_TAG}\")\n+string(REGEX REPLACE \"v[0-9]+.[0-9]+.([0-9]+)\" \"\\\\1\" DUCKDB_PATCH_VERSION \"${GIT_LAST_TAG}\")\n+string(REGEX REPLACE \".*-([0-9]+)-.*\" \"\\\\1\" DUCKDB_DEV_ITERATION \"${GIT_ITERATION}\")\n+\n+if(${DUCKDB_DEV_ITERATION}==0)\n+  # on a tag; directly use the version\n+  set(DUCKDB_VERSION \"${DUCKDB_MAIN_VERSION}${DUCKDB_PATCH_VERSION}\")\n+else()\n+  # not on a tag, increment the patch version by one and add a -devX suffix\n+  MATH(EXPR DUCKDB_PATCH_VERSION \"${DUCKDB_PATCH_VERSION}+1\")\n+\n+  set(DUCKDB_VERSION \"${DUCKDB_MAIN_VERSION}${DUCKDB_PATCH_VERSION}-dev${DUCKDB_DEV_ITERATION}\")\n+endif()\n \n option(AMALGAMATION_BUILD\n        \"Build from the amalgamation files, rather than from the normal sources.\"\ndiff --git a/scripts/amalgamation.py b/scripts/amalgamation.py\nindex b7163b31cf7c..93e2d0be9eb2 100644\n--- a/scripts/amalgamation.py\n+++ b/scripts/amalgamation.py\n@@ -187,8 +187,20 @@ def copy_if_different(src, dest):\n     shutil.copyfile(src, dest)\n \n def git_commit_hash():\n-    return subprocess.check_output(['git','log','-1','--format=%h']).strip()\n-\n+    return subprocess.check_output(['git','log','-1','--format=%h']).strip().decode('utf8')\n+\n+def git_dev_version():\n+    version = subprocess.check_output(['git','describe','--tags','--abbrev=0']).strip().decode('utf8')\n+    long_version = subprocess.check_output(['git','describe','--tags','--long']).strip().decode('utf8')\n+    version_splits = version.lstrip('v').split('.')\n+    dev_version = long_version.split('-')[1]\n+    if int(dev_version) == 0:\n+        # directly on a tag: emit the regular version\n+        return '.'.join(version_splits)\n+    else:\n+        # not on a tag: increment the version by one and add a -devX suffix\n+        version_splits[2] = str(int(version_splits[2]) + 1)\n+        return '.'.join(version_splits) + \"-dev\" + dev_version\n \n def generate_duckdb_hpp(header_file):\n     print(\"-----------------------\")\n@@ -201,7 +213,8 @@ def generate_duckdb_hpp(header_file):\n \n         hfile.write(\"#pragma once\\n\")\n         hfile.write(\"#define DUCKDB_AMALGAMATION 1\\n\")\n-        hfile.write(\"#define DUCKDB_SOURCE_ID \\\"%s\\\"\\n\" % git_commit_hash().decode('utf8'))\n+        hfile.write(\"#define DUCKDB_SOURCE_ID \\\"%s\\\"\\n\" % git_commit_hash())\n+        hfile.write(\"#define DUCKDB_VERSION \\\"%s\\\"\\n\" % git_dev_version())\n         for fpath in main_header_files:\n             hfile.write(write_file(fpath))\n \ndiff --git a/scripts/package_build.py b/scripts/package_build.py\nindex cb705d24433d..77010a75e108 100644\n--- a/scripts/package_build.py\n+++ b/scripts/package_build.py\n@@ -66,6 +66,22 @@ def get_relative_path(source_dir, target_file):\n         target_file = target_file.replace(source_dir, \"\").lstrip('/')\n     return target_file\n \n+def git_commit_hash():\n+    return subprocess.check_output(['git','log','-1','--format=%h']).strip().decode('utf8')\n+\n+def git_dev_version():\n+    version = subprocess.check_output(['git','describe','--tags','--abbrev=0']).strip().decode('utf8')\n+    long_version = subprocess.check_output(['git','describe','--tags','--long']).strip().decode('utf8')\n+    version_splits = version.lstrip('v').split('.')\n+    dev_version = long_version.split('-')[1]\n+    if int(dev_version) == 0:\n+        # directly on a tag: emit the regular version\n+        return '.'.join(version_splits)\n+    else:\n+        # not on a tag: increment the version by one and add a -devX suffix\n+        version_splits[2] = str(int(version_splits[2]) + 1)\n+        return '.'.join(version_splits) + \"-dev\" + dev_version\n+\n def build_package(target_dir, linenumbers = False):\n     if not os.path.isdir(target_dir):\n         os.mkdir(target_dir)\n@@ -111,26 +127,34 @@ def copy_file(src, target_dir):\n     for inc in include_files:\n         copy_file(inc, target_dir)\n \n-    # handle pragma_version.cpp: paste #define DUCKDB_SOURCE_ID there\n-    # read the source id\n-    proc = subprocess.Popen(['git', 'rev-parse', 'HEAD'], stdout=subprocess.PIPE, stderr=subprocess.PIPE, cwd=os.path.join(scripts_dir, '..'))\n-    githash = proc.stdout.read().strip().decode('utf8')\n+    # handle pragma_version.cpp: paste #define DUCKDB_SOURCE_ID and DUCKDB_VERSION there\n+    curdir = os.getcwd()\n+    os.chdir(os.path.join(scripts_dir, '..'))\n+    githash = git_commit_hash()\n+    dev_version = git_dev_version()\n+    os.chdir(curdir)\n     # open the file and read the current contents\n     fpath = os.path.join(target_dir, 'src', 'function', 'table', 'version', 'pragma_version.cpp')\n     with open_utf8(fpath, 'r') as f:\n         text = f.read()\n     # now add the DUCKDB_SOURCE_ID define, if it is not there already\n-    found = False\n+    found_hash = False\n+    found_dev = False\n     lines = text.split('\\n')\n     for i in range(len(lines)):\n         if '#define DUCKDB_SOURCE_ID ' in lines[i]:\n             lines[i] = '#define DUCKDB_SOURCE_ID \"{}\"'.format(githash)\n-            found = True\n+            found_hash = True\n             break\n-    if not found:\n-        text = '#ifndef DUCKDB_SOURCE_ID\\n#define DUCKDB_SOURCE_ID \"{}\"\\n#endif\\n'.format(githash) + text\n-    else:\n-        text = '\\n'.join(text)\n+        if '#define DUCKDB_VERSION ' in lines[i]:\n+            lines[i] = '#define DUCKDB_VERSION \"{}\"'.format(dev_version)\n+            found_dev = True\n+            break\n+    if not found_hash:\n+        lines = ['#ifndef DUCKDB_SOURCE_ID', '#define DUCKDB_SOURCE_ID \"{}\"'.format(githash), '#endif'] + lines\n+    if not found_hash:\n+        lines = ['#ifndef DUCKDB_VERSION', '#define DUCKDB_VERSION \"{}\"'.format(dev_version), '#endif'] + lines\n+    text = '\\n'.join(lines)\n     with open_utf8(fpath, 'w+') as f:\n         f.write(text)\n \ndiff --git a/src/function/table/version/CMakeLists.txt b/src/function/table/version/CMakeLists.txt\nindex c4101c3d9e66..2c54094c4503 100644\n--- a/src/function/table/version/CMakeLists.txt\n+++ b/src/function/table/version/CMakeLists.txt\n@@ -1,4 +1,5 @@\n add_definitions(-DDUCKDB_SOURCE_ID=\"\\\"\"${GIT_COMMIT_HASH}\"\\\"\")\n+add_definitions(-DDUCKDB_VERSION=\"\\\"\"${DUCKDB_VERSION}\"\\\"\")\n \n add_library_unity(duckdb_func_table_version OBJECT pragma_version.cpp)\n \ndiff --git a/src/function/table/version/pragma_version.cpp b/src/function/table/version/pragma_version.cpp\nindex a5bfb8330510..c14dbddf41ca 100644\n--- a/src/function/table/version/pragma_version.cpp\n+++ b/src/function/table/version/pragma_version.cpp\n@@ -47,7 +47,7 @@ const char *DuckDB::SourceID() {\n }\n \n const char *DuckDB::LibraryVersion() {\n-\treturn \"DuckDB\";\n+\treturn DUCKDB_VERSION;\n }\n \n } // namespace duckdb\ndiff --git a/tools/shell/shell.c b/tools/shell/shell.c\nindex 71153dc5b178..8390b5e6f7fd 100644\n--- a/tools/shell/shell.c\n+++ b/tools/shell/shell.c\n@@ -20241,7 +20241,7 @@ static const char zOptions[] =\n #endif\n   \"   -stats               print memory stats before each finalize\\n\"\n   \"   -table               set output mode to 'table'\\n\"\n-  \"   -version             show SQLite version\\n\"\n+  \"   -version             show DuckDB version\\n\"\n   \"   -vfs NAME            use NAME as the default VFS\\n\"\n #ifdef SQLITE_ENABLE_VFSTRACE\n   \"   -vfstrace            enable tracing of all VFS calls\\n\"\n@@ -20253,7 +20253,7 @@ static const char zOptions[] =\n static void usage(int showDetail){\n   utf8_printf(stderr,\n       \"Usage: %s [OPTIONS] FILENAME [SQL]\\n\"\n-      \"FILENAME is the name of an SQLite database. A new database is created\\n\"\n+      \"FILENAME is the name of an DuckDB database. A new database is created\\n\"\n       \"if the file does not previously exist.\\n\", Argv0);\n   if( showDetail ){\n     utf8_printf(stderr, \"OPTIONS include:\\n%s\", zOptions);\n",
  "test_patch": "diff --git a/test/sql/pragma/test_pragma_version.test b/test/sql/pragma/test_pragma_version.test\nindex 9d34182bcb7e..edc1cc0db50b 100644\n--- a/test/sql/pragma/test_pragma_version.test\n+++ b/test/sql/pragma/test_pragma_version.test\n@@ -8,8 +8,5 @@ PRAGMA version;\n statement ok\n select * from pragma_version();\n \n-query I\n+statement ok\n select library_version from pragma_version();\n-----\n-DuckDB\n-\n",
  "problem_statement": "duckdb CLI help text identifies itself as sqlite\nFirst, thank you for this wonderful tool.\r\n\r\nA minor thing, but maybe appropriate to change?\r\n\r\n$ ~/apps/bin/duckdb --help\r\nUsage: ~/apps/bin/duckdb [OPTIONS] FILENAME [SQL]\r\nFILENAME is the name of an **SQLite** database. A new database is created\r\nif the file does not previously exist.\r\nOPTIONS include:\r\n<snip>\r\n-version             show **SQLite** version\r\n\r\n\nduckdb CLI help text identifies itself as sqlite\nFirst, thank you for this wonderful tool.\r\n\r\nA minor thing, but maybe appropriate to change?\r\n\r\n$ ~/apps/bin/duckdb --help\r\nUsage: ~/apps/bin/duckdb [OPTIONS] FILENAME [SQL]\r\nFILENAME is the name of an **SQLite** database. A new database is created\r\nif the file does not previously exist.\r\nOPTIONS include:\r\n<snip>\r\n-version             show **SQLite** version\r\n\r\n\n",
  "hints_text": "Ah this is because we \"borrowed\" the CLI pretty much as-is from SQLite. But you're right that could be fixed.\nAh this is because we \"borrowed\" the CLI pretty much as-is from SQLite. But you're right that could be fixed.",
  "created_at": "2020-12-02T16:41:04Z"
}