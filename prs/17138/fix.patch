diff --git a/src/common/operator/cast_operators.cpp b/src/common/operator/cast_operators.cpp
index 602c2e1c8506..80c9102952b0 100644
--- a/src/common/operator/cast_operators.cpp
+++ b/src/common/operator/cast_operators.cpp
@@ -1462,7 +1462,7 @@ string_t CastFromUUID::Operation(hugeint_t input, Vector &vector) {
 //===--------------------------------------------------------------------===//
 template <>
 bool TryCastToUUID::Operation(string_t input, hugeint_t &result, Vector &result_vector, CastParameters &parameters) {
-	return UUID::FromString(input.GetString(), result);
+	return UUID::FromString(input.GetString(), result, parameters.strict);
 }
 
 //===--------------------------------------------------------------------===//
diff --git a/src/common/types/uuid.cpp b/src/common/types/uuid.cpp
index 79875fba4ba8..16563a66c4cc 100644
--- a/src/common/types/uuid.cpp
+++ b/src/common/types/uuid.cpp
@@ -6,7 +6,7 @@ namespace duckdb {
 //////////////////
 // Base UUID
 //////////////////
-bool BaseUUID::FromString(const string &str, hugeint_t &result) {
+bool BaseUUID::FromString(const string &str, hugeint_t &result, bool strict) {
 	auto hex2char = [](char ch) -> unsigned char {
 		if (ch >= '0' && ch <= '9') {
 			return UnsafeNumericCast<unsigned char>(ch - '0');
@@ -34,6 +34,17 @@ bool BaseUUID::FromString(const string &str, hugeint_t &result) {
 		return false;
 	}
 
+	if (strict) {
+		// 32 characters and 4 hyphens
+		if (str.length() != 36) {
+			return false;
+		}
+		const auto c_str = str.c_str();
+		if (c_str[8] != '-' || c_str[13] != '-' || c_str[18] != '-' || c_str[23] != '-') {
+			return false;
+		}
+	}
+
 	result.lower = 0;
 	result.upper = 0;
 	size_t count = 0;
diff --git a/src/include/duckdb/common/types/uuid.hpp b/src/include/duckdb/common/types/uuid.hpp
index 16b1e082dc68..9bc5fe20927c 100644
--- a/src/include/duckdb/common/types/uuid.hpp
+++ b/src/include/duckdb/common/types/uuid.hpp
@@ -21,7 +21,7 @@ class BaseUUID {
 public:
 	constexpr static const uint8_t STRING_SIZE = 36;
 	//! Convert a uuid string to a hugeint object
-	static bool FromString(const string &str, hugeint_t &result);
+	static bool FromString(const string &str, hugeint_t &result, bool strict = false);
 	//! Convert a uuid string to a hugeint object
 	static bool FromCString(const char *str, idx_t len, hugeint_t &result) {
 		return FromString(string(str, 0, len), result);
