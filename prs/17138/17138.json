{
  "repo": "duckdb/duckdb",
  "pull_number": 17138,
  "instance_id": "duckdb__duckdb-17138",
  "issue_numbers": [
    "16684"
  ],
  "base_commit": "9e7fedd4c0af54f16f8fd89367f4cdb87295d22e",
  "patch": "diff --git a/src/common/operator/cast_operators.cpp b/src/common/operator/cast_operators.cpp\nindex 602c2e1c8506..80c9102952b0 100644\n--- a/src/common/operator/cast_operators.cpp\n+++ b/src/common/operator/cast_operators.cpp\n@@ -1462,7 +1462,7 @@ string_t CastFromUUID::Operation(hugeint_t input, Vector &vector) {\n //===--------------------------------------------------------------------===//\n template <>\n bool TryCastToUUID::Operation(string_t input, hugeint_t &result, Vector &result_vector, CastParameters &parameters) {\n-\treturn UUID::FromString(input.GetString(), result);\n+\treturn UUID::FromString(input.GetString(), result, parameters.strict);\n }\n \n //===--------------------------------------------------------------------===//\ndiff --git a/src/common/types/uuid.cpp b/src/common/types/uuid.cpp\nindex 79875fba4ba8..16563a66c4cc 100644\n--- a/src/common/types/uuid.cpp\n+++ b/src/common/types/uuid.cpp\n@@ -6,7 +6,7 @@ namespace duckdb {\n //////////////////\n // Base UUID\n //////////////////\n-bool BaseUUID::FromString(const string &str, hugeint_t &result) {\n+bool BaseUUID::FromString(const string &str, hugeint_t &result, bool strict) {\n \tauto hex2char = [](char ch) -> unsigned char {\n \t\tif (ch >= '0' && ch <= '9') {\n \t\t\treturn UnsafeNumericCast<unsigned char>(ch - '0');\n@@ -34,6 +34,17 @@ bool BaseUUID::FromString(const string &str, hugeint_t &result) {\n \t\treturn false;\n \t}\n \n+\tif (strict) {\n+\t\t// 32 characters and 4 hyphens\n+\t\tif (str.length() != 36) {\n+\t\t\treturn false;\n+\t\t}\n+\t\tconst auto c_str = str.c_str();\n+\t\tif (c_str[8] != '-' || c_str[13] != '-' || c_str[18] != '-' || c_str[23] != '-') {\n+\t\t\treturn false;\n+\t\t}\n+\t}\n+\n \tresult.lower = 0;\n \tresult.upper = 0;\n \tsize_t count = 0;\ndiff --git a/src/include/duckdb/common/types/uuid.hpp b/src/include/duckdb/common/types/uuid.hpp\nindex 16b1e082dc68..9bc5fe20927c 100644\n--- a/src/include/duckdb/common/types/uuid.hpp\n+++ b/src/include/duckdb/common/types/uuid.hpp\n@@ -21,7 +21,7 @@ class BaseUUID {\n public:\n \tconstexpr static const uint8_t STRING_SIZE = 36;\n \t//! Convert a uuid string to a hugeint object\n-\tstatic bool FromString(const string &str, hugeint_t &result);\n+\tstatic bool FromString(const string &str, hugeint_t &result, bool strict = false);\n \t//! Convert a uuid string to a hugeint object\n \tstatic bool FromCString(const char *str, idx_t len, hugeint_t &result) {\n \t\treturn FromString(string(str, 0, len), result);\n",
  "test_patch": "diff --git a/test/sql/json/issues/issue16684.test b/test/sql/json/issues/issue16684.test\nnew file mode 100644\nindex 000000000000..43c4bb634fe4\n--- /dev/null\n+++ b/test/sql/json/issues/issue16684.test\n@@ -0,0 +1,26 @@\n+# name: test/sql/json/issues/issue16684.test\n+# description: Test issue 16684 - When using read_json to read data, it always converts the md5 string to uuid format.\n+# group: [issues]\n+\n+require json\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+statement ok\n+copy (select '00000000000000000000000000000000' md5) to '__TEST_DIR__/issue16684.json'\n+\n+# should be varchar, not uuid (no hyphens)\n+query II\n+select md5, typeof(md5) from '__TEST_DIR__/issue16684.json'\n+----\n+00000000000000000000000000000000\tVARCHAR\n+\n+statement ok\n+copy (select '00000000-0000-0000-0000-000000000000' id) to '__TEST_DIR__/issue16684.json'\n+\n+# if we add hyphens we get a uuid\n+query II\n+select id, typeof(id) from '__TEST_DIR__/issue16684.json'\n+----\n+00000000-0000-0000-0000-000000000000\tUUID\n",
  "problem_statement": "When using read_json to read data, it always converts the md5 string to uuid format.\n### What happens?\n\nAny 32-character string that conforms to the UUID specification will be converted to a UUID.\n\n\n### To Reproduce\n\nFor the following json file, `iss16684.json`:\n\n```json\n{\"md5\":\"00000000000000000000000000000000\"}\n```\n\nExecute:\n\n```\nFROM 'iss16684.json';\n```\n\nActual\n\n```text\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                 md5                  \u2502\n\u2502                 uuid                 \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 00000000-0000-0000-0000-000000000000 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n```\n---\nExpected\n\n```text\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                md5                \u2502\n\u2502              varchar              \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 00000000000000000000000000000000  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n```\n\n### OS:\n\nWindows\n\n### DuckDB Version:\n\nv1.2.1 8e52ec4395\n\n### DuckDB Client:\n\ncli\n\n### Hardware:\n\n_No response_\n\n### Full Name:\n\nJim Zhang\n\n### Affiliation:\n\nWinhc Co.\n\n### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.\n\nI have tested with a stable release\n\n### Did you include all relevant data sets for reproducing the issue?\n\nYes\n\n### Did you include all code required to reproduce the issue?\n\n- [x] Yes, I have\n\n### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?\n\n- [x] Yes, I have\n",
  "hints_text": "https://github.com/duckdb/duckdb/issues/10934\n\nAccording to this issue, the conversion to uuid is intentional. Can you provide a switch to turn off this feature? Currently, in my file, many columns are md5 strings.\ni welcome a flag to disable this behavior as well. it's quite unexpected behavior if the data changes just from reading it.",
  "created_at": "2025-04-16T07:59:50Z"
}