--- a/src/common/types/vector.cpp
+++ b/src/common/types/vector.cpp
@@ -1639,10 +1639,16 @@
     auto &list_vector = ListVector::GetEntry(list);
     auto &entry = ListVector::GetData(list)[row];
 
-    switch (list_vector.GetType().InternalType()) {
-    case PhysicalType::BOOL:
-    case PhysicalType::INT8:
-        TemplatedSearchInMap<int8_t>(list, key, offsets, key.IsNull(), entry.offset, entry.length);
-        break;
-    case PhysicalType::INT16:
-        TemplatedSearchInMap<int16_t>(list, key, offsets, key.IsNull(), entry.offset, entry.length);
-        break;
-    case PhysicalType::INT32:
-        TemplatedSearchInMap<int32_t>(list, key, offsets, key.IsNull(), entry.offset, entry.length);
-        break;
-    case PhysicalType::INT64:
-        TemplatedSearchInMap<int64_t>(list, key, offsets, key.IsNull(), entry.offset, entry.length);
-        break;
-    case PhysicalType::INT128:
-        TemplatedSearchInMap<hugeint_t>(list, key, offsets, key.IsNull(), entry.offset, entry.length);
-        break;
-    case PhysicalType::UINT8:
-        TemplatedSearchInMap<uint8_t>(list, key, offsets, key.IsNull(), entry.offset, entry.length);
-        break;
-    case PhysicalType::UINT16:
-        TemplatedSearchInMap<uint16_t>(list, key, offsets, key.IsNull(), entry.offset, entry.length);
-        break;
-    case PhysicalType::UINT32:
-        TemplatedSearchInMap<uint32_t>(list, key, offsets, key.IsNull(), entry.offset, entry.length);
-        break;
-    case PhysicalType::UINT64:
-        TemplatedSearchInMap<uint64_t>(list, key, offsets, key.IsNull(), entry.offset, entry.length);
-        break;
-    case PhysicalType::FLOAT:
-        TemplatedSearchInMap<float>(list, key, offsets, key.IsNull(), entry.offset, entry.length);
-        break;
-    case PhysicalType::DOUBLE:
-        TemplatedSearchInMap<double>(list, key, offsets, key.IsNull(), entry.offset, entry.length);
-        break;
-    case PhysicalType::VARCHAR:
-        SearchStringInMap(list, StringValue::Get(key), offsets, key.IsNull(), entry.offset, entry.length);
-        break;
-    default:
-        throw InvalidTypeException(list.GetType().id(), "Invalid type for List Vector Search");
-    }
+    switch (list_vector.GetType().InternalType()) {
+    case PhysicalType::BOOL:
+    case PhysicalType::INT8:
+        TemplatedSearchInMap<int8_t>(list, key, offsets, key.IsNull(), entry.offset, entry.length);
+        break;
+    case PhysicalType::INT16:
+        TemplatedSearchInMap<int16_t>(list, key, offsets, key.IsNull(), entry.offset, entry.length);
+        break;
+    case PhysicalType::INT32:
+        TemplatedSearchInMap<int32_t>(list, key, offsets, key.IsNull(), entry.offset, entry.length);
+        break;
+    case PhysicalType::INT64:
+        TemplatedSearchInMap<int64_t>(list, key, offsets, key.IsNull(), entry.offset, entry.length);
+        break;
+    case PhysicalType::INT128:
+        TemplatedSearchInMap<hugeint_t>(list, key, offsets, key.IsNull(), entry.offset, entry.length);
+        break;
+    case PhysicalType::UINT8:
+        TemplatedSearchInMap<uint8_t>(list, key, offsets, key.IsNull(), entry.offset, entry.length);
+        break;
+    case PhysicalType::UINT16:
+        TemplatedSearchInMap<uint16_t>(list, key, offsets, key.IsNull(), entry.offset, entry.length);
+        break;
+    case PhysicalType::UINT32:
+        TemplatedSearchInMap<uint32_t>(list, key, offsets, key.IsNull(), entry.offset, entry.length);
+        break;
+    case PhysicalType::UINT64:
+        TemplatedSearchInMap<uint64_t>(list, key, offsets, key.IsNull(), entry.offset, entry.length);
+        break;
+    case PhysicalType::FLOAT:
+        TemplatedSearchInMap<float>(list, key, offsets, key.IsNull(), entry.offset, entry.length);
+        break;
+    case PhysicalType::DOUBLE:
+        TemplatedSearchInMap<double>(list, key, offsets, key.IsNull(), entry.offset, entry.length);
+        break;
+    case PhysicalType::INTERVAL:
+        TemplatedSearchInMap<interval_t>(list, key, offsets, key.IsNull(), entry.offset, entry.length);
+        break;
+    case PhysicalType::VARCHAR:
+        SearchStringInMap(list, StringValue::Get(key), offsets, key.IsNull(), entry.offset, entry.length);
+        break;
+    default:
+        throw InvalidTypeException(list.GetType().id(), "Invalid type for List Vector Search");
+    }
     return offsets;
 }
