{
  "repo": "duckdb/duckdb",
  "pull_number": 10684,
  "instance_id": "duckdb__duckdb-10684",
  "issue_numbers": [
    "10675"
  ],
  "base_commit": "a0909dbddd128c65412c8620608e5533e249fbef",
  "patch": "diff --git a/benchmark/tpch/aggregate/lineitem_distinct_on_few_groups.benchmark b/benchmark/tpch/aggregate/lineitem_distinct_on_few_groups.benchmark\nnew file mode 100644\nindex 000000000000..6ee0937ab2fa\n--- /dev/null\n+++ b/benchmark/tpch/aggregate/lineitem_distinct_on_few_groups.benchmark\n@@ -0,0 +1,69 @@\n+# name: benchmark/tpch/aggregate/lineitem_distinct_on_few_groups.benchmark\n+# description: DISTINCT ON over Lineitem\n+# group: [aggregate]\n+\n+name Lineitem Distinct On (Few Groups)\n+group aggregate\n+subgroup tpch\n+\n+require tpch\n+\n+cache tpch_sf1.duckdb\n+\n+load\n+CALL dbgen(sf=1);\n+\n+run\n+SELECT DISTINCT ON (l_quantity) l_quantity, l_extendedprice FROM lineitem ORDER BY l_quantity, l_extendedprice DESC;\n+\n+result II\n+1\t2097.99\n+2\t4193.98\n+3\t6293.97\n+4\t8395.96\n+5\t10489.95\n+6\t12587.94\n+7\t14685.93\n+8\t16791.92\n+9\t18890.91\n+10\t20989.9\n+11\t23055.89\n+12\t25175.88\n+13\t27260.87\n+14\t29357.86\n+15\t31469.85\n+16\t33567.84\n+17\t35682.83\n+18\t37781.82\n+19\t39880.81\n+20\t41979.8\n+21\t44078.79\n+22\t46155.78\n+23\t48253.77\n+24\t50351.76\n+25\t52449.75\n+26\t54573.74\n+27\t56672.73\n+28\t58743.72\n+29\t60870.71\n+30\t62909.7\n+31\t65006.69\n+32\t67135.68\n+33\t69266.67\n+34\t71365.66\n+35\t73429.65\n+36\t75563.64\n+37\t77662.63\n+38\t79761.62\n+39\t81821.61\n+40\t83879.6\n+41\t85976.59\n+42\t88157.58\n+43\t90213.57\n+44\t92223.56\n+45\t94454.55\n+46\t96553.54\n+47\t98652.53\n+48\t100703.52\n+49\t102801.51\n+50\t104949.5\ndiff --git a/benchmark/tpch/aggregate/lineitem_distinct_on_many_groups.benchmark b/benchmark/tpch/aggregate/lineitem_distinct_on_many_groups.benchmark\nnew file mode 100644\nindex 000000000000..6459d2246da3\n--- /dev/null\n+++ b/benchmark/tpch/aggregate/lineitem_distinct_on_many_groups.benchmark\n@@ -0,0 +1,25 @@\n+# name: benchmark/tpch/aggregate/lineitem_distinct_on_many_groups.benchmark\n+# description: DISTINCT ON over Lineitem\n+# group: [aggregate]\n+\n+name Lineitem Distinct On (Many Groups)\n+group aggregate\n+subgroup tpch\n+\n+require tpch\n+\n+cache tpch_sf1.duckdb\n+\n+load\n+CALL dbgen(sf=1);\n+\n+run\n+SELECT AVG(l_orderkey), AVG(l_extendedprice)\n+FROM (\n+  SELECT DISTINCT ON (l_orderkey) l_orderkey, l_extendedprice\n+  FROM lineitem\n+  ORDER BY l_orderkey, l_extendedprice DESC\n+) l;\n+\n+result II\n+2999991.5\t59874.92\n\\ No newline at end of file\ndiff --git a/src/execution/physical_plan/plan_distinct.cpp b/src/execution/physical_plan/plan_distinct.cpp\nindex a2980e872b95..e0bb12d688c9 100644\n--- a/src/execution/physical_plan/plan_distinct.cpp\n+++ b/src/execution/physical_plan/plan_distinct.cpp\n@@ -6,6 +6,7 @@\n #include \"duckdb/planner/expression/bound_reference_expression.hpp\"\n #include \"duckdb/planner/operator/logical_distinct.hpp\"\n #include \"duckdb/function/function_binder.hpp\"\n+#include \"duckdb/optimizer/rule/ordered_aggregate_optimizer.hpp\"\n \n namespace duckdb {\n \n@@ -61,6 +62,15 @@ unique_ptr<PhysicalOperator> PhysicalPlanGenerator::CreatePlan(LogicalDistinct &\n \t\t\tauto first_aggregate = function_binder.BindAggregateFunction(\n \t\t\t    FirstFun::GetFunction(logical_type), std::move(first_children), nullptr, AggregateType::NON_DISTINCT);\n \t\t\tfirst_aggregate->order_bys = op.order_by ? op.order_by->Copy() : nullptr;\n+\n+\t\t\tif (ClientConfig::GetConfig(context).enable_optimizer) {\n+\t\t\t\tbool changes_made = false;\n+\t\t\t\tauto new_expr = OrderedAggregateOptimizer::Apply(context, *first_aggregate, groups, changes_made);\n+\t\t\t\tif (new_expr) {\n+\t\t\t\t\tD_ASSERT(new_expr->type == ExpressionType::BOUND_AGGREGATE);\n+\t\t\t\t\tfirst_aggregate = unique_ptr_cast<Expression, BoundAggregateExpression>(std::move(new_expr));\n+\t\t\t\t}\n+\t\t\t}\n \t\t\t// add the projection\n \t\t\tprojections.push_back(make_uniq<BoundReferenceExpression>(logical_type, group_count + aggregates.size()));\n \t\t\t// push it to the list of aggregates\ndiff --git a/src/include/duckdb/optimizer/rule/ordered_aggregate_optimizer.hpp b/src/include/duckdb/optimizer/rule/ordered_aggregate_optimizer.hpp\nindex 0de9a95d749e..1b757e78cb15 100644\n--- a/src/include/duckdb/optimizer/rule/ordered_aggregate_optimizer.hpp\n+++ b/src/include/duckdb/optimizer/rule/ordered_aggregate_optimizer.hpp\n@@ -17,6 +17,8 @@ class OrderedAggregateOptimizer : public Rule {\n public:\n \texplicit OrderedAggregateOptimizer(ExpressionRewriter &rewriter);\n \n+\tstatic unique_ptr<Expression> Apply(ClientContext &context, BoundAggregateExpression &aggr,\n+\t                                    vector<unique_ptr<Expression>> &groups, bool &changes_made);\n \tunique_ptr<Expression> Apply(LogicalOperator &op, vector<reference<Expression>> &bindings, bool &changes_made,\n \t                             bool is_root) override;\n };\ndiff --git a/src/optimizer/rule/ordered_aggregate_optimizer.cpp b/src/optimizer/rule/ordered_aggregate_optimizer.cpp\nindex 12c631e7d516..553c0e30f450 100644\n--- a/src/optimizer/rule/ordered_aggregate_optimizer.cpp\n+++ b/src/optimizer/rule/ordered_aggregate_optimizer.cpp\n@@ -17,9 +17,8 @@ OrderedAggregateOptimizer::OrderedAggregateOptimizer(ExpressionRewriter &rewrite\n \troot->expr_class = ExpressionClass::BOUND_AGGREGATE;\n }\n \n-unique_ptr<Expression> OrderedAggregateOptimizer::Apply(LogicalOperator &op, vector<reference<Expression>> &bindings,\n-                                                        bool &changes_made, bool is_root) {\n-\tauto &aggr = bindings[0].get().Cast<BoundAggregateExpression>();\n+unique_ptr<Expression> OrderedAggregateOptimizer::Apply(ClientContext &context, BoundAggregateExpression &aggr,\n+                                                        vector<unique_ptr<Expression>> &groups, bool &changes_made) {\n \tif (!aggr.order_bys) {\n \t\t// no ORDER BYs defined\n \t\treturn nullptr;\n@@ -32,7 +31,7 @@ unique_ptr<Expression> OrderedAggregateOptimizer::Apply(LogicalOperator &op, vec\n \t}\n \n \t// Remove unnecessary ORDER BY clauses and return if nothing remains\n-\tif (aggr.order_bys->Simplify(op.Cast<LogicalAggregate>().groups)) {\n+\tif (aggr.order_bys->Simplify(groups)) {\n \t\taggr.order_bys.reset();\n \t\tchanges_made = true;\n \t\treturn nullptr;\n@@ -51,7 +50,6 @@ unique_ptr<Expression> OrderedAggregateOptimizer::Apply(LogicalOperator &op, vec\n \t\treturn nullptr;\n \t}\n \n-\tauto &context = rewriter.context;\n \tFunctionBinder binder(context);\n \tvector<unique_ptr<Expression>> sort_children;\n \tfor (auto &order : aggr.order_bys->orders) {\n@@ -93,8 +91,12 @@ unique_ptr<Expression> OrderedAggregateOptimizer::Apply(LogicalOperator &op, vec\n \tauto bound_function = func.functions.GetFunctionByOffset(best_function);\n \treturn binder.BindAggregateFunction(bound_function, std::move(children), std::move(aggr.filter),\n \t                                    aggr.IsDistinct() ? AggregateType::DISTINCT : AggregateType::NON_DISTINCT);\n+}\n \n-\treturn nullptr;\n+unique_ptr<Expression> OrderedAggregateOptimizer::Apply(LogicalOperator &op, vector<reference<Expression>> &bindings,\n+                                                        bool &changes_made, bool is_root) {\n+\tauto &aggr = bindings[0].get().Cast<BoundAggregateExpression>();\n+\treturn Apply(rewriter.context, aggr, op.Cast<LogicalAggregate>().groups, changes_made);\n }\n \n } // namespace duckdb\n",
  "test_patch": "diff --git a/test/sql/aggregate/distinct/distinct_on_nulls.test b/test/sql/aggregate/distinct/distinct_on_nulls.test\nnew file mode 100644\nindex 000000000000..6c45db9029b0\n--- /dev/null\n+++ b/test/sql/aggregate/distinct/distinct_on_nulls.test\n@@ -0,0 +1,83 @@\n+# name: test/sql/aggregate/distinct/distinct_on_nulls.test\n+# description: Test DISTINCT ON with NULL values\n+# group: [distinct]\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+statement ok\n+CREATE TABLE integers(i INTEGER, j INTEGER);\n+\n+statement ok\n+INSERT INTO integers VALUES (2, 3), (4, 5), (2, NULL), (NULL, NULL);\n+\n+query II\n+SELECT DISTINCT ON (i) i, j FROM integers ORDER BY j\n+----\n+2\t3\n+4\t5\n+NULL\tNULL\n+\n+query II\n+SELECT DISTINCT ON (i) i, j FROM integers ORDER BY i, j\n+----\n+2\t3\n+4\t5\n+NULL\tNULL\n+\n+query II\n+SELECT DISTINCT ON (i) i, j FROM integers ORDER BY i NULLS FIRST, j NULLS FIRST\n+----\n+NULL\tNULL\n+2\tNULL\n+4\t5\n+\n+query II\n+SELECT DISTINCT ON (i) i, j FROM integers ORDER BY i, j NULLS FIRST\n+----\n+2\tNULL\n+4\t5\n+NULL\tNULL\n+\n+# multi-way sort and ties\n+statement ok\n+CREATE TABLE distinct_on_test(key INTEGER, v1 VARCHAR, v2 INTEGER[], v3 INTEGER);\n+\n+statement ok\n+INSERT INTO distinct_on_test VALUES\n+\t(1, 'hello', ARRAY[1], 42), -- ASC\n+\t(1, 'hello', ARRAY[1], 42),\n+\t(1, 'hello', ARRAY[1], 43), -- DESC\n+\t(2, NULL, NULL, 0),     -- ASC\n+\t(2, NULL, NULL, 1),\n+\t(2, NULL, NULL, NULL),  -- DESC\n+\t(3, 'thisisalongstring', NULL, 0),     -- ASC\n+\t(3, 'thisisalongstringbutlonger', NULL, 1),\n+\t(3, 'thisisalongstringbutevenlonger', ARRAY[1, 2, 3, 4, 5, 6, 7, 8, 9], 2)  -- DESC\n+;\n+\n+query IIII\n+SELECT DISTINCT ON (key) * FROM distinct_on_test ORDER BY key, v1, v2, v3\n+----\n+1\thello\t[1]\t42\n+2\tNULL\tNULL\t0\n+3\tthisisalongstring\tNULL\t0\n+\n+query IIII\n+SELECT DISTINCT ON (key) * FROM distinct_on_test  WHERE key <> 2 ORDER BY key, v1, v2, v3\n+----\n+1\thello\t[1]\t42\n+3\tthisisalongstring\tNULL\t0\n+\n+query IIII\n+SELECT DISTINCT ON (key) * FROM distinct_on_test ORDER BY key, v1 DESC NULLS FIRST, v2 DESC NULLS FIRST, v3 DESC NULLS FIRST\n+----\n+1\thello\t[1]\t43\n+2\tNULL\tNULL\tNULL\n+3\tthisisalongstringbutlonger\tNULL\t1\n+\n+query IIII\n+SELECT DISTINCT ON (key) * FROM distinct_on_test WHERE key <> 2 ORDER BY key, v1 DESC NULLS FIRST, v2 DESC NULLS FIRST, v3 DESC NULLS FIRST\n+----\n+1\thello\t[1]\t43\n+3\tthisisalongstringbutlonger\tNULL\t1\ndiff --git a/test/sql/aggregate/distinct/issue8505.test b/test/sql/aggregate/distinct/issue8505.test\nindex 2f1be21e50bc..a3d8e4928ae8 100644\n--- a/test/sql/aggregate/distinct/issue8505.test\n+++ b/test/sql/aggregate/distinct/issue8505.test\n@@ -11,14 +11,14 @@ explain select record_key from (\n     select distinct on (id, provider) id, provider, record_key from test order by id, provider, record_rank desc, record_date\n )\n ----\n-physical_plan\t<REGEX>:.*HASH_GROUP_BY.*#0.*#1.*first\\(#2, #3, #4\\).*first\\(#5, #6, #7\\).*first\\(#8, #9, #10\\).*\n+physical_plan\t<REGEX>:.*HASH_GROUP_BY.*#0.*#1.*arg_min_null.*\n \n \n # this query was slow, but should be equivalent to the first query\n query II\n explain select distinct on (id, provider) record_key from test order by id, provider, record_rank desc, record_date\n ----\n-physical_plan\t<REGEX>:.*HASH_GROUP_BY.*#0.*#1.*first\\(#2, #3, #4\\).*first\\(#5, #6, #7\\).*first\\(#8, #9, #10\\).*\n+physical_plan\t<REGEX>:.*HASH_GROUP_BY.*#0.*#1.*arg_min_null.*\n \n # the problem was that our aggregate became way too big in the second case because we didn't de-duplicate columns\n # this regex checks that they both have the same 'minimal' aggregate (this test is a bit fragile to binder changes tho)\n",
  "problem_statement": "Performance regression: DISTINCT ON got slower and more memory hungry\n### What happens?\r\n\r\nDISTINCT ON has undergone a significant performance regression at some point between 0.9.2 and 0.9.3.dev3715 (unfortunately, I sit behind a corporate proxy and cannot use anything in-between). It's taking up to 3times longer when successful, and it's taking up to 10x VIRT memory and 4x RES memory, making it run OOM more often.\r\n(Also, surprisingly the memory consumption is additive across queries, which to the uninformed observer might indicate a memory leak).\r\n\r\nI have previously hinted at this in https://github.com/duckdb/duckdb/issues/10224 but since the main issue there has since been resolved, I figured it's time to create a separate issue for this.\r\n\r\n### To Reproduce\r\n\r\nFirst, produce a MWE dataframe:\r\n```python\r\nimport duckdb\r\nimport pandas as pd\r\nimport numpy as np\r\ntimes = pd.date_range('2019-01-01 00:00:00', '2020-12-31 00:00:00', freq='30 min')\r\nn_times = len(times)\r\nn_products = 3000\r\nn = n_times * n_products\r\ndf = pd.DataFrame({\r\n    'time': np.repeat(times, n_products),\r\n    'value': np.arange(n),\r\n    'product': np.tile(np.arange(n_products), n_times)\r\n})\r\ndf['time'] = df['time'].dt.tz_localize('UTC').astype('datetime64[us, UTC]')\r\nduckdb.query(\"\"\"\r\nSET MEMORY_LIMIT='64GB';\r\nSELECT * FROM duckdb_settings()  \r\nWHERE name SIMILAR TO '.*mem.*'\r\n\"\"\")\r\n```\r\nThen, using 0.9.3.dev3715 or 0.10.0, the following query \r\n```\r\nduckdb.query(\"\"\"\r\nSELECT \r\nDISTINCT ON (time::DATE, product)\r\n*\r\nFROM df\r\nORDER by time DESC\r\n\"\"\")\r\n```\r\ntakes one minute on the first run, peaking at 190GB VIRT and 50GB RES memory usage as reported by htop. On rerunning the query, it almost immediately fails with \r\n```\r\nOutOfMemoryException: Out of Memory Error: Failed to allocate block of 262144 bytes\r\n```\r\n\r\nOn 0.9.2, the same query completes in 25 seconds, peaking at 19GB VIRT and 16GB RES memory usage as reported by htop. Also, the query can be rerun arbitrarily often without increasing VIRT or RES and finishing in ~18s on reruns.\r\n\r\nIf I reduce `n_products` to `2000`, 0.10.0 takes 41s, peaking at 100GB VIRT / 30GB RES, whereas 0.9.2 finishes in 10-14s, peaking at 10GB VIRT / 8GB RES.\r\n\r\nNOTES: \r\n- The memory limit of 64GB doesn't seem to do anything, I just put it in as a safety because while playing around with the parameters of this MWE I quite frequently made my machine freeze to a point where it wouldn't even accept ssh connections anymore (the freezing happens on the duckdb query). This is probably for another ticket though, and I do get the same problems with a 128GB limit.\r\n- The UTC localization is only needed because the query will fail on the date cast in 0.9.2 otherwise. It doesn't affect memory usage and runtime on later versions.\r\n\r\n\r\n### OS:\r\n\r\nLinux\r\n\r\n### DuckDB Version:\r\n\r\n0.10.0\r\n\r\n### DuckDB Client:\r\npython '3.10.6\r\npandas '2.1.4'\r\nnumpy '1.26.3'\r\n\r\n### Full Name:\r\n\r\nSoeren Wolfers\r\n\r\n### Affiliation:\r\n\r\nG-Research\r\n\r\n### Have you tried this on the latest [nightly build](https://duckdb.org/docs/installation/?version=main)?\r\n\r\nI have tested with a nightly build\r\n\r\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\r\n\r\n- [X] Yes, I have\n",
  "hints_text": "",
  "created_at": "2024-02-15T10:16:04Z"
}