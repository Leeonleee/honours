{
  "repo": "duckdb/duckdb",
  "pull_number": 14622,
  "instance_id": "duckdb__duckdb-14622",
  "issue_numbers": [
    "14600",
    "14600"
  ],
  "base_commit": "79bf967e1b6ab438e0a83a014e937af571ed7acb",
  "patch": "diff --git a/src/parser/transform/statement/transform_pivot_stmt.cpp b/src/parser/transform/statement/transform_pivot_stmt.cpp\nindex fee41aada399..8b798a83c9fb 100644\n--- a/src/parser/transform/statement/transform_pivot_stmt.cpp\n+++ b/src/parser/transform/statement/transform_pivot_stmt.cpp\n@@ -15,6 +15,7 @@\n #include \"duckdb/parser/expression/function_expression.hpp\"\n #include \"duckdb/parser/result_modifier.hpp\"\n #include \"duckdb/parser/tableref/subqueryref.hpp\"\n+#include \"duckdb/common/types/uuid.hpp\"\n \n namespace duckdb {\n \n@@ -168,7 +169,6 @@ unique_ptr<QueryNode> Transformer::TransformPivotStatement(duckdb_libpgquery::PG\n \t// generate CREATE TYPE statements for each of the columns that do not have an IN list\n \tbool is_pivot = !pivot->unpivots;\n \tauto columns = TransformPivotList(*pivot->columns, is_pivot);\n-\tauto pivot_idx = PivotEntryCount();\n \tfor (idx_t c = 0; c < columns.size(); c++) {\n \t\tauto &col = columns[c];\n \t\tif (!col.pivot_enum.empty() || !col.entries.empty()) {\n@@ -177,7 +177,7 @@ unique_ptr<QueryNode> Transformer::TransformPivotStatement(duckdb_libpgquery::PG\n \t\tif (col.pivot_expressions.size() != 1) {\n \t\t\tthrow InternalException(\"PIVOT statement with multiple names in pivot entry!?\");\n \t\t}\n-\t\tauto enum_name = \"__pivot_enum_\" + std::to_string(pivot_idx) + \"_\" + std::to_string(c);\n+\t\tauto enum_name = \"__pivot_enum_\" + UUID::ToString(UUID::GenerateRandomUUID());\n \n \t\tauto new_select = make_uniq<SelectNode>();\n \t\tExtractCTEsRecursive(new_select->cte_map);\n",
  "test_patch": "diff --git a/tools/pythonpkg/tests/fast/relational_api/test_pivot.py b/tools/pythonpkg/tests/fast/relational_api/test_pivot.py\nnew file mode 100644\nindex 000000000000..43b64d4072e7\n--- /dev/null\n+++ b/tools/pythonpkg/tests/fast/relational_api/test_pivot.py\n@@ -0,0 +1,18 @@\n+import duckdb\n+import pytest\n+from duckdb import ColumnExpression\n+\n+\n+class TestPivot(object):\n+    def test_pivot_issue_14600(self, duckdb_cursor):\n+        duckdb_cursor.sql(\n+            \"create table input_data as select unnest(['u','v','w']) as a, unnest(['x','y','z']) as b, unnest([1,2,3]) as c;\"\n+        )\n+        pivot_1 = duckdb_cursor.query(\"pivot input_data on a using max(c) group by b;\")\n+        pivot_2 = duckdb_cursor.query(\"pivot input_data on b using max(c) group by a;\")\n+        pivot_1.create(\"pivot_1\")\n+        pivot_2.create(\"pivot_2\")\n+        pivot_1_tbl = duckdb_cursor.table(\"pivot_1\")\n+        pivot_2_tbl = duckdb_cursor.table(\"pivot_2\")\n+        assert set(pivot_1.columns) == set(pivot_1_tbl.columns)\n+        assert set(pivot_2.columns) == set(pivot_2_tbl.columns)\n",
  "problem_statement": "Multiple pivots prior to create call have wrong/unexpected behavior\n### What happens?\r\n\r\nwhen you run multiple pivot statements before turning their relations into tables, all but the last get clobbered with nonsense.\r\nI'm running linux but the same problem occurs on windows.\r\n\r\ndetails in reproduction code.\r\n\r\n### To Reproduce\r\n\r\n```python\r\n# demonstrate bug\r\nimport numpy as np\r\nimport pandas as pd\r\nimport duckdb\r\nN = 1000\r\ndf = pd.DataFrame({\"a\":np.random.choice([\"u\", \"v\", \"w\"], N, True),\r\n                   \"b\":np.random.choice([\"x\", \"y\", \"z\"], N, True),\r\n                   \"c\":np.random.randn(N),})\r\nconn = duckdb.connect()\r\n\r\nddf = conn.from_df(df)\r\nddf.create(\"input_data\")\r\n\r\nxx = conn.query(\"pivot input_data on a using max(c) group by b;\")\r\nyy = conn.query(\"pivot input_data on b using max(c) group by a;\")\r\nxx.create(\"xx\")\r\nyy.create(\"yy\")\r\nprint(conn.query(\"SHOW ALL TABLES;\").df())\r\nxx_table = conn.table(\"xx\")\r\nyy_table = conn.table(\"yy\")\r\nassert set(yy.columns)==set(yy_table.columns) # Succeeds.\r\nassert set(xx.columns)==set(xx_table.columns)  # Fails. \r\n# xx_table shows up with cols [b, x, y, z] and all nans in the x,y,z cols\r\n# The first col should indeed by b, but the next 3 should be u,v,w and they shouldn't have all nans\r\n```\r\n\r\n### OS:\r\n\r\nUbuntu 22.04.5 LTS x86_64\r\n\r\n### DuckDB Version:\r\n\r\n1.1.1\r\n\r\n### DuckDB Client:\r\n\r\npython\r\n\r\n### Hardware:\r\n\r\n_No response_\r\n\r\n### Full Name:\r\n\r\nMichael Hankin\r\n\r\n### Affiliation:\r\n\r\nMothball Labs\r\n\r\n### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.\r\n\r\nI have not tested with any build\r\n\r\n### Did you include all relevant data sets for reproducing the issue?\r\n\r\nYes\r\n\r\n### Did you include all code required to reproduce the issue?\r\n\r\n- [X] Yes, I have\r\n\r\n### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?\r\n\r\n- [X] Yes, I have\nMultiple pivots prior to create call have wrong/unexpected behavior\n### What happens?\r\n\r\nwhen you run multiple pivot statements before turning their relations into tables, all but the last get clobbered with nonsense.\r\nI'm running linux but the same problem occurs on windows.\r\n\r\ndetails in reproduction code.\r\n\r\n### To Reproduce\r\n\r\n```python\r\n# demonstrate bug\r\nimport numpy as np\r\nimport pandas as pd\r\nimport duckdb\r\nN = 1000\r\ndf = pd.DataFrame({\"a\":np.random.choice([\"u\", \"v\", \"w\"], N, True),\r\n                   \"b\":np.random.choice([\"x\", \"y\", \"z\"], N, True),\r\n                   \"c\":np.random.randn(N),})\r\nconn = duckdb.connect()\r\n\r\nddf = conn.from_df(df)\r\nddf.create(\"input_data\")\r\n\r\nxx = conn.query(\"pivot input_data on a using max(c) group by b;\")\r\nyy = conn.query(\"pivot input_data on b using max(c) group by a;\")\r\nxx.create(\"xx\")\r\nyy.create(\"yy\")\r\nprint(conn.query(\"SHOW ALL TABLES;\").df())\r\nxx_table = conn.table(\"xx\")\r\nyy_table = conn.table(\"yy\")\r\nassert set(yy.columns)==set(yy_table.columns) # Succeeds.\r\nassert set(xx.columns)==set(xx_table.columns)  # Fails. \r\n# xx_table shows up with cols [b, x, y, z] and all nans in the x,y,z cols\r\n# The first col should indeed by b, but the next 3 should be u,v,w and they shouldn't have all nans\r\n```\r\n\r\n### OS:\r\n\r\nUbuntu 22.04.5 LTS x86_64\r\n\r\n### DuckDB Version:\r\n\r\n1.1.1\r\n\r\n### DuckDB Client:\r\n\r\npython\r\n\r\n### Hardware:\r\n\r\n_No response_\r\n\r\n### Full Name:\r\n\r\nMichael Hankin\r\n\r\n### Affiliation:\r\n\r\nMothball Labs\r\n\r\n### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.\r\n\r\nI have not tested with any build\r\n\r\n### Did you include all relevant data sets for reproducing the issue?\r\n\r\nYes\r\n\r\n### Did you include all code required to reproduce the issue?\r\n\r\n- [X] Yes, I have\r\n\r\n### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?\r\n\r\n- [X] Yes, I have\n",
  "hints_text": "I'd be more than happy to help with this issue and https://github.com/duckdb/duckdb/issues/14601 if someone with some experience here would be willing to hold my hand a bit.\nI'd be more than happy to help with this issue and https://github.com/duckdb/duckdb/issues/14601 if someone with some experience here would be willing to hold my hand a bit.",
  "created_at": "2024-10-29T21:08:09Z"
}