{
  "repo": "duckdb/duckdb",
  "pull_number": 11020,
  "instance_id": "duckdb__duckdb-11020",
  "issue_numbers": [
    "7554"
  ],
  "base_commit": "1237144cf10f2ca87f1268c7a2654a7083f44222",
  "patch": "diff --git a/src/include/duckdb/main/attached_database.hpp b/src/include/duckdb/main/attached_database.hpp\nindex a7d8241807be..a8aab0b82867 100644\n--- a/src/include/duckdb/main/attached_database.hpp\n+++ b/src/include/duckdb/main/attached_database.hpp\n@@ -61,6 +61,7 @@ class AttachedDatabase : public CatalogEntry {\n \tbool IsInitialDatabase() const;\n \tvoid SetInitialDatabase();\n \n+\tstatic bool NameIsReserved(const string &name);\n \tstatic string ExtractDatabaseName(const string &dbpath, FileSystem &fs);\n \n private:\ndiff --git a/src/main/attached_database.cpp b/src/main/attached_database.cpp\nindex 13a25df99a02..6a5fd256e0cb 100644\n--- a/src/main/attached_database.cpp\n+++ b/src/main/attached_database.cpp\n@@ -105,11 +105,19 @@ bool AttachedDatabase::IsReadOnly() const {\n \treturn type == AttachedDatabaseType::READ_ONLY_DATABASE;\n }\n \n+bool AttachedDatabase::NameIsReserved(const string &name) {\n+\treturn name == DEFAULT_SCHEMA || name == TEMP_CATALOG;\n+}\n+\n string AttachedDatabase::ExtractDatabaseName(const string &dbpath, FileSystem &fs) {\n \tif (dbpath.empty() || dbpath == IN_MEMORY_PATH) {\n \t\treturn \"memory\";\n \t}\n-\treturn fs.ExtractBaseName(dbpath);\n+\tauto name = fs.ExtractBaseName(dbpath);\n+\tif (NameIsReserved(name)) {\n+\t\tname += \"_db\";\n+\t}\n+\treturn name;\n }\n \n void AttachedDatabase::Initialize() {\ndiff --git a/src/main/database_manager.cpp b/src/main/database_manager.cpp\nindex 77f5448a5367..d96042ccc1a8 100644\n--- a/src/main/database_manager.cpp\n+++ b/src/main/database_manager.cpp\n@@ -36,6 +36,9 @@ optional_ptr<AttachedDatabase> DatabaseManager::GetDatabase(ClientContext &conte\n \n optional_ptr<AttachedDatabase> DatabaseManager::AttachDatabase(ClientContext &context, const AttachInfo &info,\n                                                                const string &db_type, AccessMode access_mode) {\n+\tif (AttachedDatabase::NameIsReserved(info.name)) {\n+\t\tthrow BinderException(\"Attached database name \\\"%s\\\" cannot be used because it is a reserved name\", info.name);\n+\t}\n \t// now create the attached database\n \tauto &db = DatabaseInstance::GetDatabase(context);\n \tauto attached_db = db.CreateAttachedDatabase(context, info, db_type, access_mode);\n",
  "test_patch": "diff --git a/test/sql/attach/attach_reserved.test b/test/sql/attach/attach_reserved.test\nnew file mode 100644\nindex 000000000000..986f7801ce2b\n--- /dev/null\n+++ b/test/sql/attach/attach_reserved.test\n@@ -0,0 +1,30 @@\n+# name: test/sql/attach/attach_reserved.test\n+# description: Test ATTACH of reserved names\n+# group: [attach]\n+\n+require noforcestorage\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+# attach a new database called temp\n+statement ok\n+ATTACH DATABASE '__TEST_DIR__/temp.db';\n+\n+# we alias \"temp\" and \"main\" to use \"_db\" instead\n+statement ok\n+CREATE TABLE temp_db.integers(i INTEGER);\n+\n+statement ok\n+DETACH temp_db;\n+\n+# explicitly selecting these aliases leads to an error\n+statement error\n+ATTACH DATABASE ':memory:' AS temp;\n+----\n+reserved name\n+\n+statement error\n+ATTACH DATABASE ':memory:' AS main;\n+----\n+reserved name\n",
  "problem_statement": "DB called \"temp.db\" causes Parser Error\n### What happens?\n\nGetting this error:\r\nError: Parser Error: Only TEMPORARY table names can use the \"temp\" catalog\r\n\r\nWith a db named `temp.db`\r\n\r\nNot sure if this is intended behavior, but the error is confusing.\n\n### To Reproduce\n\nCreate a db named `temp.db` first\r\n```sh\r\n./build/debug/duckdb temp.db\r\n```\r\nThen create something in the catalog\r\n```sql\r\ncreate table test (i int);\r\n-- Error: Parser Error: Only TEMPORARY table names can use the \"temp\" catalog\r\n```\n\n### OS:\n\nMacOS\n\n### DuckDB Version:\n\nmaster\n\n### DuckDB Client:\n\nCLI\n\n### Full Name:\n\nLaurens\n\n### Affiliation:\n\nDuckDB Labs\n\n### Have you tried this on the latest `master` branch?\n\n- [X] I agree\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] I agree\n",
  "hints_text": "It works with sqlite3, but it seems to clash with the PostgreSQL dialect that is used by duckdb.\r\nSee [\"src/planner/binder/statement/bind_create.cpp:93\" :](https://github.com/duckdb/duckdb/blob/1d304769a4451e69f2cf4c376dad498226615c2c/src/planner/binder/statement/bind_create.cpp#L93)\r\n\nAlso see here where TEMP_CATALOG is defined https://github.com/duckdb/duckdb/blob/1d304769a4451e69f2cf4c376dad498226615c2c/src/include/duckdb/common/constants.hpp#L31 .\nSearching the documentation I only found a reference here https://duckdb.org/docs/sql/information_schema#catalog-functions that mention \"temp\" as an active schema maybe a mention to \"temp\" as reserved database name could be added there or in other place.\nTesting with `main.db` and `pg_catalog.db` and `create table test (i int);` works, but maybe some other combination of `DDL` or `DML` could fail with then too.\nThis issue is stale because it has been open 90 days with no activity. Remove stale label or comment or this will be closed in 30 days.\nThis issue is stale because it has been open 90 days with no activity. Remove stale label or comment or this will be closed in 30 days.\nThis issue was closed because it has been stale for 30 days with no activity.",
  "created_at": "2024-03-06T16:09:20Z"
}