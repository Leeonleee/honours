{
  "repo": "duckdb/duckdb",
  "pull_number": 5951,
  "instance_id": "duckdb__duckdb-5951",
  "issue_numbers": [
    "5896",
    "5896"
  ],
  "base_commit": "ac1ef8bc7b5d4e566a75f76b392722b658e35142",
  "patch": "diff --git a/src/planner/binder/expression/bind_function_expression.cpp b/src/planner/binder/expression/bind_function_expression.cpp\nindex dc9e0445592f..66d922a0d38f 100644\n--- a/src/planner/binder/expression/bind_function_expression.cpp\n+++ b/src/planner/binder/expression/bind_function_expression.cpp\n@@ -1,16 +1,16 @@\n #include \"duckdb/catalog/catalog.hpp\"\n #include \"duckdb/catalog/catalog_entry/scalar_function_catalog_entry.hpp\"\n #include \"duckdb/execution/expression_executor.hpp\"\n+#include \"duckdb/function/function_binder.hpp\"\n #include \"duckdb/parser/expression/function_expression.hpp\"\n+#include \"duckdb/parser/expression/lambda_expression.hpp\"\n+#include \"duckdb/planner/binder.hpp\"\n #include \"duckdb/planner/expression/bound_cast_expression.hpp\"\n #include \"duckdb/planner/expression/bound_constant_expression.hpp\"\n #include \"duckdb/planner/expression/bound_function_expression.hpp\"\n-#include \"duckdb/planner/expression/bound_reference_expression.hpp\"\n #include \"duckdb/planner/expression/bound_lambda_expression.hpp\"\n+#include \"duckdb/planner/expression/bound_reference_expression.hpp\"\n #include \"duckdb/planner/expression_binder.hpp\"\n-#include \"duckdb/planner/binder.hpp\"\n-#include \"duckdb/parser/expression/lambda_expression.hpp\"\n-#include \"duckdb/function/function_binder.hpp\"\n \n namespace duckdb {\n \n@@ -28,6 +28,13 @@ BindResult ExpressionBinder::BindExpression(FunctionExpression &function, idx_t\n \tauto func = Catalog::GetEntry(context, CatalogType::SCALAR_FUNCTION_ENTRY, function.catalog, function.schema,\n \t                              function.function_name, false, error_context);\n \n+\tif (func->type != CatalogType::AGGREGATE_FUNCTION_ENTRY &&\n+\t    (function.distinct || function.filter || !function.order_bys->orders.empty())) {\n+\t\tthrow InvalidInputException(\"Function \\\"%s\\\" is a %s. \\\"DISTINCT\\\", \\\"FILTER\\\", and \\\"ORDER BY\\\" are only \"\n+\t\t                            \"applicable to aggregate functions.\",\n+\t\t                            function.function_name, CatalogTypeToString(func->type));\n+\t}\n+\n \tswitch (func->type) {\n \tcase CatalogType::SCALAR_FUNCTION_ENTRY:\n \t\t// scalar function\n",
  "test_patch": "diff --git a/test/issues/general/test_5896.test b/test/issues/general/test_5896.test\nnew file mode 100644\nindex 000000000000..d55edcaaf300\n--- /dev/null\n+++ b/test/issues/general/test_5896.test\n@@ -0,0 +1,35 @@\n+# name: test/issues/general/test_5896.test\n+# description: Issue 5896: json_group_array() does not respect filter clauses\n+# group: [general]\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+# the problem was actually that all aggregate modifiers were ignored for non-aggregate functions\n+\n+# distinct modifier\n+statement error\n+select sqrt(distinct range) from range(5);\n+----\n+Invalid Input Error: Function \"sqrt\" is a Scalar Function. \"DISTINCT\", \"FILTER\", and \"ORDER BY\" are only applicable to aggregate functions.\n+\n+# filter modifier\n+statement error\n+select sqrt(range) filter (where (range > 3)) from range(5);\n+----\n+Invalid Input Error: Function \"sqrt\" is a Scalar Function. \"DISTINCT\", \"FILTER\", and \"ORDER BY\" are only applicable to aggregate functions.\n+\n+# ordered aggregate (error is taken care of somewhere else)\n+statement error\n+select sqrt(range order by range) from range(5);\n+----\n+Invalid Input Error: Function \"sqrt\" is a Scalar Function. \"DISTINCT\", \"FILTER\", and \"ORDER BY\" are only applicable to aggregate functions.\n+\n+# let's test with a macro\n+statement ok\n+create macro my_sqrt(x) as sqrt(x)\n+\n+statement error\n+select my_sqrt(distinct range) from range(5);\n+----\n+Invalid Input Error: Function \"my_sqrt\" is a Macro Function. \"DISTINCT\", \"FILTER\", and \"ORDER BY\" are only applicable to aggregate functions.\n",
  "problem_statement": "json_group_array() does not respect filter clauses\n### What happens?\n\nFilter clauses do not seem to be applied to json_group_array().\n\n### To Reproduce\n\nI would expect this to return an empty array (or null):\r\n\r\n```\r\nD select json_group_array(generate_series) filter (where generate_series > 1) from generate_series(1, 1);\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 json_group_array(generate_series) FILTER (WHERE (generate_series > 1)) \u2502\r\n\u2502                                  json                                  \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 [1]                                                                    \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\nIt works correctly with list():\r\n\r\n```\r\nD select list(generate_series) filter (where generate_series > 1) from generate_series(1, 1);\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 list(generate_series) FILTER (WHERE (generate_series > 1)) \u2502\r\n\u2502                          int64[]                           \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502                                                            \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\nand the current workaround seems to be:\r\n\r\n```\r\nD select to_json(list(generate_series) filter (where generate_series > 1)) from generate_series(1, 1);\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 to_json(list(generate_series) FILTER (WHERE (generate_series > 1))) \u2502\r\n\u2502                                json                                 \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502                                                                     \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\n\n### OS:\n\nOS X, arm64\n\n### DuckDB Version:\n\n0.6.1\n\n### DuckDB Client:\n\nCLI\n\n### Full Name:\n\nBrendan Younger\n\n### Affiliation:\n\nPersonal\n\n### Have you tried this on the latest `master` branch?\n\n- [X] I agree\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] I agree\njson_group_array() does not respect filter clauses\n### What happens?\n\nFilter clauses do not seem to be applied to json_group_array().\n\n### To Reproduce\n\nI would expect this to return an empty array (or null):\r\n\r\n```\r\nD select json_group_array(generate_series) filter (where generate_series > 1) from generate_series(1, 1);\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 json_group_array(generate_series) FILTER (WHERE (generate_series > 1)) \u2502\r\n\u2502                                  json                                  \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 [1]                                                                    \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\nIt works correctly with list():\r\n\r\n```\r\nD select list(generate_series) filter (where generate_series > 1) from generate_series(1, 1);\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 list(generate_series) FILTER (WHERE (generate_series > 1)) \u2502\r\n\u2502                          int64[]                           \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502                                                            \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\nand the current workaround seems to be:\r\n\r\n```\r\nD select to_json(list(generate_series) filter (where generate_series > 1)) from generate_series(1, 1);\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 to_json(list(generate_series) FILTER (WHERE (generate_series > 1))) \u2502\r\n\u2502                                json                                 \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502                                                                     \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\n\n### OS:\n\nOS X, arm64\n\n### DuckDB Version:\n\n0.6.1\n\n### DuckDB Client:\n\nCLI\n\n### Full Name:\n\nBrendan Younger\n\n### Affiliation:\n\nPersonal\n\n### Have you tried this on the latest `master` branch?\n\n- [X] I agree\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] I agree\n",
  "hints_text": "@lnkuiper could you perhaps have a look at this issue?\nCurrently, `json_group_array` is implemented as a macro `to_json(list(x))`, so this does not work. For this to work, it should be reimplemented.\nThat makes sense - perhaps the problem here is then that the filter is silently ignored when an exception should be thrown instead that the filter clause is not supported for macros?\nThe problem is not macro's specifically: the `FILTER` clause for aggregate functions is silently ignored for all scalar functions:\r\n```sql\r\nselect string_split('aba', 'b') filter (where (range > 3)) ss from range(5);\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502    ss     \u2502\r\n\u2502 varchar[] \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 [a, a]    \u2502\r\n\u2502 [a, a]    \u2502\r\n\u2502 [a, a]    \u2502\r\n\u2502 [a, a]    \u2502\r\n\u2502 [a, a]    \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\nLooking for a fix now\n@lnkuiper could you perhaps have a look at this issue?\nCurrently, `json_group_array` is implemented as a macro `to_json(list(x))`, so this does not work. For this to work, it should be reimplemented.\nThat makes sense - perhaps the problem here is then that the filter is silently ignored when an exception should be thrown instead that the filter clause is not supported for macros?\nThe problem is not macro's specifically: the `FILTER` clause for aggregate functions is silently ignored for all scalar functions:\r\n```sql\r\nselect string_split('aba', 'b') filter (where (range > 3)) ss from range(5);\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502    ss     \u2502\r\n\u2502 varchar[] \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 [a, a]    \u2502\r\n\u2502 [a, a]    \u2502\r\n\u2502 [a, a]    \u2502\r\n\u2502 [a, a]    \u2502\r\n\u2502 [a, a]    \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\nLooking for a fix now",
  "created_at": "2023-01-20T12:31:14Z"
}