diff --git a/test/sql/sample/can_sample_from_ingested_files.test b/test/sql/sample/can_sample_from_ingested_files.test
new file mode 100644
index 000000000000..23c2ef50fd52
--- /dev/null
+++ b/test/sql/sample/can_sample_from_ingested_files.test
@@ -0,0 +1,44 @@
+# name: test/sql/sample/can_sample_from_ingested_files.test
+# description: Test reservoir sample crash on large data sets
+# group: [sample]
+
+require parquet
+
+statement ok
+PRAGMA enable_verification;
+
+statement ok
+create table all_types as select * exclude(small_enum, medium_enum, large_enum, "union", bit) from test_all_types();
+
+statement ok
+copy all_types to '__TEST_DIR__/sample_all_types.csv' (FORMAT CSV);
+
+statement ok
+Create table all_types_csv_1 as select * from read_csv_auto('__TEST_DIR__/sample_all_types.csv');
+
+statement ok
+Create table all_types_csv_2 as select * from read_csv_auto('__TEST_DIR__/sample_all_types.csv');
+
+query T nosort result_1
+select * from all_types_csv_1;
+
+query T nosort result_1
+select * from all_types_csv_2;
+
+
+statement ok
+copy (SELECT * from all_types) to '__TEST_DIR__/sample_all_types.parquet' (FORMAT PARQUET);
+
+# test parquet
+statement ok
+Create table all_types_parquet_1 as select * from read_parquet('__TEST_DIR__/sample_all_types.parquet');
+
+statement ok
+Create table all_types_parquet_2 as select * from read_parquet('__TEST_DIR__/sample_all_types.parquet');
+
+query T nosort result_parquet
+select * from all_types_parquet_1;
+
+query T nosort result_paruet
+select * from all_types_parquet_2;
+
diff --git a/test/sql/sample/reservoir_testing_percentage.test b/test/sql/sample/reservoir_testing_percentage.test
new file mode 100644
index 000000000000..19217d635461
--- /dev/null
+++ b/test/sql/sample/reservoir_testing_percentage.test
@@ -0,0 +1,85 @@
+# name: test/sql/sample/reservoir_testing_percentage.test
+# description: Test SAMPLE keyword
+# group: [sample]
+
+loop i 1 8
+
+statement ok
+pragma threads=${i};
+
+statement ok
+CREATE or replace TABLE t1 as select range a from range(1000);
+
+query I
+SELECT count(*) from t1 using sample 0 percent (reservoir);
+----
+0
+
+query I
+SELECT count(*) from t1 using sample 10 percent (reservoir);
+----
+100
+
+query I
+SELECT count(*) from t1 using sample 20 percent (reservoir);
+----
+200
+
+query I
+SELECT count(*) from t1 using sample 80 percent (reservoir);
+----
+800
+
+query I
+SELECT count(*) from t1 using sample 100 percent (reservoir);
+----
+1000
+
+
+statement ok
+Insert into t1 select range a from range(9000);
+
+query I
+select count(*) from t1 using sample 80 percent (reservoir);
+----
+8000
+
+statement ok
+Insert into t1 select range a from range(90000);
+
+
+statement ok
+Insert into t1 select range a from range(900000);
+
+query I
+select count(*) from t1 using sample 20 percent (reservoir);
+----
+200000
+
+query I
+select count(*) from t1 using sample 30 percent (reservoir);
+----
+300000
+
+query I
+select count(*) from t1 using sample 40 percent (reservoir);
+----
+400000
+
+query I
+select count(*) from t1 using sample 50 percent (reservoir);
+----
+500000
+
+
+query I
+select count(*) from t1 using sample 60 percent (reservoir);
+----
+600000
+
+query I
+select count(*) from t1 using sample 70 percent (reservoir);
+----
+700000
+
+endloop
diff --git a/test/sql/sample/reservoir_testing_rows_value.test_slow b/test/sql/sample/reservoir_testing_rows_value.test_slow
index a4e355a69044..3355225b5b8e 100644
--- a/test/sql/sample/reservoir_testing_rows_value.test_slow
+++ b/test/sql/sample/reservoir_testing_rows_value.test_slow
@@ -8,7 +8,7 @@ statement ok
 pragma threads=${i};
 
 statement ok
-CREATE or replace TABLE t1 as select range a, [1, a, 2] b, a::VARCHAR || 'ducktastic' c, get_current_timestamp() c from range(1000);
+CREATE or replace TABLE t1 as select range a from range(1000);
 
 query I
 SELECT count(*) from t1 using sample 0;
@@ -30,13 +30,15 @@ SELECT count(*) from t1 using sample 800;
 ----
 800
 
+
 query I
 SELECT count(*) from t1 using sample 1000;
 ----
 1000
 
+
 statement ok
-CREATE or replace TABLE t1 as select range a, [1, a, 2] b, a::VARCHAR || 'ducktastic' c, get_current_timestamp() c from range(10000);
+create or replace table t1 as select * from range(10000);
 
 query I
 select count(*) from t1 using sample 1000;
@@ -59,7 +61,7 @@ select count(*) from t1 using sample 8000;
 8000
 
 statement ok
-CREATE or replace TABLE t1 as select range a, [1, a, 2] b, a::VARCHAR || 'ducktastic' c, get_current_timestamp() c from range(1000000);
+Create or replace table t1  as select range a from range(1000000);
 
 query I
 select count(*) from t1 using sample 200000;
diff --git a/test/sql/sample/same_seed_same_sample.test_slow b/test/sql/sample/same_seed_same_sample.test_slow
index c191fcb75e30..1970cf1c4d75 100644
--- a/test/sql/sample/same_seed_same_sample.test_slow
+++ b/test/sql/sample/same_seed_same_sample.test_slow
@@ -23,15 +23,15 @@ SELECT * from t1 using sample reservoir(100) repeatable (1) order by a;
 
 endloop
 
-# testing a table with greater cardinality than the standard vector size
+# testing a table with greater cardinality than the standard vector size, and greater than a row group size.
 
 statement ok
 CREATE or replace TABLE t1 as select range a, [1, a, 2] b, a::VARCHAR || 'ducktastic' c, get_current_timestamp() c from range(100000);
 
-loop i 1 8
+# samples are only equal when threads = 1
 
 statement ok
-pragma threads=${i};
+set threads=1;
 
 query III nosort result_2
 SELECT * from t1 using sample reservoir(6000) repeatable (1) order by a;
@@ -42,8 +42,6 @@ query III nosort result_2
 SELECT * from t1 using sample reservoir(6000) repeatable (1) order by a;
 ----
 
-endloop
-
 statement ok
 CREATE or replace TABLE t1 as select range a, [1, a, 2] b, a::VARCHAR || 'ducktastic' c, get_current_timestamp() c from range(1000000);
 
@@ -73,5 +71,3 @@ select count(*) < 10 from (select * from sample1 intersect select * from sample2
 ----
 true
 
-
-
diff --git a/test/sql/sample/table_samples/basic_sample_tests.test b/test/sql/sample/table_samples/basic_sample_tests.test
new file mode 100644
index 000000000000..2107062f32c3
--- /dev/null
+++ b/test/sql/sample/table_samples/basic_sample_tests.test
@@ -0,0 +1,81 @@
+# name: test/sql/sample/table_samples/basic_sample_tests.test
+# group: [table_samples]
+
+statement ok
+PRAGMA enable_verification
+
+load __TEST_DIR__/test_samples_basic.db
+
+query I
+select count(*) from range(100000) using sample (10000);
+----
+10000
+
+query I
+select count(*) from range(100) using sample (10);
+----
+10
+
+query I
+select count(*) from range(205000) using sample (10000);
+----
+10000
+
+statement ok
+create table t1 as select range a from range(204800);
+
+statement ok
+select * from duckdb_table_sample('t1');
+
+statement ok
+create or replace table t1 as select range a from range(1000);
+
+query II
+select avg(a) > 200, avg(a) < 800 from duckdb_table_sample('t1');
+----
+true	true
+
+statement ok
+create or replace table t1 as select range a from range(204800);
+
+# average is not skewed
+query II
+select avg(a) > (0.2*204800), avg(a) < (0.8*204800) from duckdb_table_sample('t1');
+----
+true	true
+
+# about half the samples are below 102400 and half above
+query I
+select count(*) < 1060 from duckdb_table_sample('t1') where a < 102400;
+----
+true
+
+query I
+select count(*) < 1060 from duckdb_table_sample('t1') where a > 102400;
+----
+true
+
+query I
+select count(*) from t1 using sample (200000);
+----
+200000
+
+statement ok
+create or replace table materialized_range as select * from range(100);
+
+statement ok
+create or replace table integers_1 as (select range b from materialized_range);
+
+query I
+select count(b) from duckdb_table_sample('integers_1') where b in (select * from materialized_range);
+----
+1
+
+# sample exists after restart
+restart
+
+query I
+select count(b) from duckdb_table_sample('integers_1') where b in (select * from materialized_range);
+----
+1
+
diff --git a/test/sql/sample/table_samples/sample_stores_rows_from_later_on.test_slow b/test/sql/sample/table_samples/sample_stores_rows_from_later_on.test_slow
new file mode 100644
index 000000000000..c88b9cd74a67
--- /dev/null
+++ b/test/sql/sample/table_samples/sample_stores_rows_from_later_on.test_slow
@@ -0,0 +1,39 @@
+# name: test/sql/sample/table_samples/sample_stores_rows_from_later_on.test_slow
+# description: Test sampling of larger relations
+# group: [table_samples]
+
+require vector_size 2048
+
+require noforcestorage
+
+load __TEST_DIR__/test_sample_conversion.db
+
+statement ok
+PRAGMA enable_verification
+
+statement ok
+create table t1 as select 1 a from range(200000);
+
+loop i 1 4805
+
+statement ok
+INSERT INTO t1 VALUES(${i} + 1);
+
+restart
+
+endloop
+
+query I
+select count(*) from duckdb_table_sample('t1');
+----
+2048
+
+query I
+select count(*) from duckdb_table_sample('t1') where a > 1;
+----
+48
+
+query I
+select count(*) from (select (floor(range/200000))::INT a from range(204800) using sample reservoir (1%)) t1 where a >= 1;
+----
+48
diff --git a/test/sql/sample/table_samples/table_sample_converts_to_block_sample.test b/test/sql/sample/table_samples/table_sample_converts_to_block_sample.test
new file mode 100644
index 000000000000..0ffca61f31ef
--- /dev/null
+++ b/test/sql/sample/table_samples/table_sample_converts_to_block_sample.test
@@ -0,0 +1,56 @@
+# name: test/sql/sample/table_samples/table_sample_converts_to_block_sample.test
+# description: Test sampling of larger relations
+# group: [table_samples]
+
+require vector_size 2048
+
+require noforcestorage
+
+# table samples first collect only 1% of the table, until the table has a cardinality of 2048.
+# then the sample stays at a fixed 2048 values.
+
+load __TEST_DIR__/test_sample_converts_after_load.db
+
+statement ok
+create table materialized_range as select 1 a from range(102400);
+
+# only 1% of 102400
+query I
+select count(*) from duckdb_table_sample('materialized_range');
+----
+1024
+
+restart
+
+statement ok
+insert into materialized_range select 2 a from range(102400);
+
+# collect another 1% of 102400
+query I
+select count(*) from duckdb_table_sample('materialized_range');
+----
+2048
+
+query II
+select a, count(*) from duckdb_table_sample('materialized_range') group by all order by a;
+----
+1	1024
+2	1024
+
+# insert another
+statement ok
+insert into materialized_range select 3 a from range(102400);
+
+# sample remains at 2048 values
+query I
+select count(*) from duckdb_table_sample('materialized_range');
+----
+2048
+
+# 2048 / 3 = 682. so each value should have at least >650
+query II
+select a, count(*) > 650 from duckdb_table_sample('materialized_range') group by all order by a;
+----
+1	1
+2	1
+3	1
\ No newline at end of file
diff --git a/test/sql/sample/table_samples/table_sample_is_stored.test_slow b/test/sql/sample/table_samples/table_sample_is_stored.test_slow
new file mode 100644
index 000000000000..d2d5e8001245
--- /dev/null
+++ b/test/sql/sample/table_samples/table_sample_is_stored.test_slow
@@ -0,0 +1,143 @@
+# name: test/sql/sample/table_samples/table_sample_is_stored.test_slow
+# description: Test sampling of larger relations
+# group: [table_samples]
+
+require vector_size 2048
+
+require noforcestorage
+
+load __TEST_DIR__/test_samples.db
+
+statement ok
+PRAGMA enable_verification
+
+statement ok
+create table materialized_range as select * from range(5000000);
+
+statement ok
+create table integers_1 as (select (range + 5) a, range b, get_current_time() as time from materialized_range);
+
+query II nosort result_1
+select a::INT, b from duckdb_table_sample('integers_1') order by all;
+----
+
+statement ok
+create table integers_2 as (select (range + 5) a, range b, get_current_time() as time from materialized_range);
+
+## samples should be the same given the same table and the same contents.
+query II nosort result_1
+select a::INT, b from duckdb_table_sample('integers_2') order by all;
+----
+
+statement ok
+create or replace table integers_1 as (select (range + 5) a, range b from materialized_range);
+
+statement ok
+create or replace table integers_2 as (select (range + 5) a, range b from materialized_range);
+
+# sample only has values in the table it was sampled from
+query I
+select count(*) from (select b from duckdb_table_sample('integers_1') intersect (select b from integers_1));
+----
+2048
+
+query I
+select count(*) from (select b from duckdb_table_sample('integers_2') intersect (select b from integers_2));
+----
+2048
+
+# sample exists after restart
+restart
+
+query I
+select count(*) from duckdb_table_sample('integers_1');
+----
+2048
+
+query I
+select count(*) from duckdb_table_sample('integers_2');
+----
+2048
+
+
+query II
+select floor(b / 1000000) as interval, count(*) as frequency from duckdb_table_sample('integers_1') group by interval order by all;
+----
+0.0	453
+1.0	407
+2.0	406
+3.0	403
+4.0	379
+
+
+# adding another interval should subtract an equal number from the rest of the intervals
+statement ok
+insert into integers_1 (select (range + 5) a, range b from range(5000000,6000000));
+
+query II
+select floor(b / 1000000) as interval, count(*) as frequency from duckdb_table_sample('integers_1') group by interval order by all;
+----
+0.0	374
+1.0	334
+2.0	332
+3.0	335
+4.0	313
+5.0	360
+
+# If double the table count is appended, around half the sample should account for the new values.
+statement ok
+insert into integers_1 (select -1, -1 from range(6000000));
+
+query I
+select count(*) from integers_1;
+----
+12000000
+
+# about half of the samples should have the pair '-1', 1.
+query I
+select count(*) from duckdb_table_sample('integers_1') where a = -1 and b = -1;
+----
+1022
+
+
+restart
+
+# updated sample is also newly serialized
+query I
+select count(*) from duckdb_table_sample('integers_1') where a = -1 and b = -1;
+----
+1022
+
+# create a view on top of the sample
+statement ok
+create view sample_view as select * from duckdb_table_sample('integers_1');
+
+# update the sample
+statement ok
+insert into integers_1 (select -2, -2 from range(6000000));
+
+# 2048 / 3 = 682 (706 is good)
+query I
+select count(*) from sample_view where a = -2 and b = -2;
+----
+624
+
+restart
+
+query I
+select count(*) from sample_view where a = -2 and b = -2;
+----
+624
+
+# currently have 18_000_000 values in the table.
+# to try and get 1 value in the sample, we should add
+# 18000000 / 2048 = 8789 values to see 1
+
+statement ok
+insert into integers_1 (select -3, -3 from range(7000));
+
+# 1 value makes it
+query I
+select count(*) from sample_view where a = -3 and b = -3;
+----
+1
\ No newline at end of file
diff --git a/test/sql/sample/table_samples/test_sample_is_destroyed_on_updates.test b/test/sql/sample/table_samples/test_sample_is_destroyed_on_updates.test
new file mode 100644
index 000000000000..410d9004e87c
--- /dev/null
+++ b/test/sql/sample/table_samples/test_sample_is_destroyed_on_updates.test
@@ -0,0 +1,122 @@
+# name: test/sql/sample/table_samples/test_sample_is_destroyed_on_updates.test
+# description: Test sampling of larger relations
+# group: [table_samples]
+
+require vector_size 2048
+
+load __TEST_DIR__/test_sample_is_destroyed_on_update.db
+
+statement ok
+create or replace table integers_1 as select range a, range+1 b  from range(102400);
+
+# no sample collected yet. There are only 5
+query I
+select count(*) from duckdb_table_sample('integers_1') order by all;
+----
+1024
+
+statement ok
+delete from integers_1 where a = 3;
+
+# sample no longer exists
+query I
+select count(*) from duckdb_table_sample('integers_1') order by all;
+----
+0
+
+statement ok
+create or replace table integers_1 as select range a, range+1 b  from range(102400);
+
+query I
+select count(*) from duckdb_table_sample('integers_1');
+----
+1024
+
+statement ok
+update integers_1 set a = 5 where a = 1;
+
+query II
+select * from duckdb_table_sample('integers_1');
+----
+
+# test adding columns destroys the sample.
+statement ok
+create or replace table integers_1 as select range a, range+1 b  from range(204800);
+
+query I
+select count(*) from duckdb_table_sample('integers_1');
+----
+2048
+
+statement ok
+Alter table integers_1 add column c DOUBLE;
+
+query III
+select * from duckdb_table_sample('integers_1');
+----
+
+
+# test altering types destroys the sample
+statement ok
+create or replace table integers_1 as select range a, range+1 b  from range(102400);
+
+
+# don't have enough smaples yet.
+query I
+select count(*) from duckdb_table_sample('integers_1');
+----
+1024
+
+statement ok
+Alter table integers_1 alter b TYPE VARCHAR
+
+query II
+select * from duckdb_table_sample('integers_1');
+----
+
+# test dropping a columns
+statement ok
+create or replace table integers_1 as select range a, range+1 b  from range(102400);
+
+query I
+select count(*) from duckdb_table_sample('integers_1');
+----
+1024
+
+statement ok
+Alter table integers_1 drop b;
+
+query I
+select * from duckdb_table_sample('integers_1');
+----
+
+# test sample is destroyed after a restart
+statement ok
+create or replace table integers_1 as select range a, range+1 b  from range(500);
+
+query I
+select count(*) from duckdb_table_sample('integers_1');
+----
+5
+
+statement ok
+Alter table integers_1 drop b;
+
+# sample is destroyed
+query I
+select * from duckdb_table_sample('integers_1');
+----
+
+restart
+
+statement ok
+insert into integers_1 select range a from range(500);
+
+# sample is still destroyed
+query I
+select * from duckdb_table_sample('integers_1');
+----
+
+
+
+
diff --git a/test/sql/sample/table_samples/test_sample_types.test b/test/sql/sample/table_samples/test_sample_types.test
new file mode 100644
index 000000000000..22834abaa4f6
--- /dev/null
+++ b/test/sql/sample/table_samples/test_sample_types.test
@@ -0,0 +1,78 @@
+# name: test/sql/sample/table_samples/test_sample_types.test
+# description: Test sampling of larger relations
+# group: [table_samples]
+
+# test valid sampling types (for now only integral types)
+
+statement ok
+pragma enable_verification;
+
+statement ok
+create table string_samples as select range::Varchar a from range(204800);
+
+query I
+select count(*) from duckdb_table_sample('string_samples') where a is NULL;
+----
+2048
+
+statement ok
+create table struct_samples as select {'key1': 'quack-a-lack', 'key2': range} a from range(204800);
+
+query I
+select count(*) from duckdb_table_sample('struct_samples') where a is null;
+----
+2048
+
+statement ok
+create table blob_samples as select '\xAA\xAB\xAC'::BLOB a from range(204800);
+
+query I
+select count(*) from duckdb_table_sample('blob_samples') where a is NULL;
+----
+2048
+
+statement ok
+create table integral_samples as select range::BIGINT a, range::DOUBLE b, range::FLOAT c, range::HUGEINT d, INTERVAL 1 YEAR e from range(204800);
+
+query I
+select count(*) from duckdb_table_sample('integral_samples') where a NOT null;
+----
+2048
+
+query I
+select count(*) from duckdb_table_sample('integral_samples') where b NOT null;
+----
+2048
+
+query I
+select count(*) from duckdb_table_sample('integral_samples') where c NOT null;
+----
+2048
+
+query I
+select count(*) from duckdb_table_sample('integral_samples') where d NOT null;
+----
+2048
+
+query I
+select count(*) from duckdb_table_sample('integral_samples') where e IS null;
+----
+2048
+
+statement ok
+CREATE or replace TABLE t1 as select range a, [1, a, 2] b, a::VARCHAR || 'ducktastic' c, get_current_time() d from range(1000000);
+
+query I
+select count(*) from duckdb_table_sample('t1') where b is null;
+----
+2048
+
+query I
+select count(*) from duckdb_table_sample('t1') where c is null;
+----
+2048
+
+query I
+select count(*) from duckdb_table_sample('t1') where d is null;
+----
+2048
\ No newline at end of file
diff --git a/test/sql/sample/table_samples/test_table_sample_errors.test b/test/sql/sample/table_samples/test_table_sample_errors.test
new file mode 100644
index 000000000000..ca30dcfbf65c
--- /dev/null
+++ b/test/sql/sample/table_samples/test_table_sample_errors.test
@@ -0,0 +1,19 @@
+# name: test/sql/sample/table_samples/test_table_sample_errors.test
+# description: test table sampl[e errors
+# group: [table_samples]
+
+statement ok
+create table t1 as select range a from range(204800);
+
+statement ok
+create view v1 as select * from t1;
+
+statement error
+select * from duckdb_table_sample('v1');
+----
+<REGEX>:.*Invalid Catalog type.*
+
+statement error
+select * from duckdb_table_sample('a');
+----
+<REGEX>:.*Catalog Error:.*Table.*does not exist.*
\ No newline at end of file
diff --git a/test/sql/sample/test_sample.test_slow b/test/sql/sample/test_sample.test_slow
index 57a41394ea41..b3134e97c6ca 100644
--- a/test/sql/sample/test_sample.test_slow
+++ b/test/sql/sample/test_sample.test_slow
@@ -75,7 +75,6 @@ SELECT COUNT(*) FROM range(2000000) USING SAMPLE 2
 ----
 2
 
-
 # test sample with multiple columns
 # we insert the same data in the entire column
 statement ok
@@ -218,10 +217,10 @@ select * from integers using sample 10000%;
 query I
 select i from integers using sample (1 rows) repeatable (0);
 ----
-152
+79
 
 query I
-select i from integers using sample reservoir(1%) repeatable (0);
+select i from integers using sample reservoir(1%) repeatable (0) order by i;
 ----
-51
-78
+87
+164
diff --git a/test/sql/storage/checkpointed_self_append.test b/test/sql/storage/checkpointed_self_append.test
index cd1f0e806e7c..dc3162709d65 100644
--- a/test/sql/storage/checkpointed_self_append.test
+++ b/test/sql/storage/checkpointed_self_append.test
@@ -4,7 +4,6 @@
 
 require skip_reload
 
-
 # load the DB from disk
 load __TEST_DIR__/checkpointed_self_append.db
 
diff --git a/test/sql/storage/reclaim_space/reclaim_space_drop_column_overflow_strings.test_slow b/test/sql/storage/reclaim_space/reclaim_space_drop_column_overflow_strings.test_slow
index 2b6ae0d0fcac..b1b013597f1d 100644
--- a/test/sql/storage/reclaim_space/reclaim_space_drop_column_overflow_strings.test_slow
+++ b/test/sql/storage/reclaim_space/reclaim_space_drop_column_overflow_strings.test_slow
@@ -90,4 +90,4 @@ SELECT AVG(STRLEN(s)), MIN(STRLEN(S)), MAX(STRLEN(S)), SUM(STRLEN(S)), MIN(S[1])
 ----
 296.955	0	5000	44543527	(empty)	X
 
-endloop
+endloop
\ No newline at end of file
diff --git a/test/sql/upsert/test_big_insert.test b/test/sql/upsert/test_big_insert.test
index 2de05a7d27b1..1bba1ba5fd17 100644
--- a/test/sql/upsert/test_big_insert.test
+++ b/test/sql/upsert/test_big_insert.test
@@ -2,8 +2,6 @@
 # description: Test insert into statements
 # group: [upsert]
 
-# TODO: remove this, behavior should be consistent at all vector sizes
-
 statement ok
 pragma enable_verification;
 
