{
  "repo": "duckdb/duckdb",
  "pull_number": 10325,
  "instance_id": "duckdb__duckdb-10325",
  "issue_numbers": [
    "9369"
  ],
  "base_commit": "9d493014ee2455b48de624d0f28e92f7c340c2ae",
  "patch": "diff --git a/src/execution/index/art/art_key.cpp b/src/execution/index/art/art_key.cpp\nindex 5f50b4e11ef2..ace24037edd1 100644\n--- a/src/execution/index/art/art_key.cpp\n+++ b/src/execution/index/art/art_key.cpp\n@@ -14,21 +14,28 @@ ARTKey::ARTKey(ArenaAllocator &allocator, const uint32_t &len) : len(len) {\n \n template <>\n ARTKey ARTKey::CreateARTKey(ArenaAllocator &allocator, const LogicalType &type, string_t value) {\n-\tuint32_t len = value.GetSize() + 1;\n+\tauto string_data = const_data_ptr_cast(value.GetData());\n+\tauto string_len = value.GetSize();\n+\t// we need to escape \\00 and \\01\n+\tidx_t escape_count = 0;\n+\tfor (idx_t r = 0; r < string_len; r++) {\n+\t\tif (string_data[r] <= 1) {\n+\t\t\tescape_count++;\n+\t\t}\n+\t}\n+\tidx_t len = string_len + escape_count + 1;\n \tauto data = allocator.Allocate(len);\n-\tmemcpy(data, value.GetData(), len - 1);\n-\n-\t// FIXME: rethink this\n-\tif (type == LogicalType::BLOB || type == LogicalType::VARCHAR) {\n-\t\t// indexes cannot contain BLOBs (or BLOBs cast to VARCHARs) that contain zero bytes\n-\t\tfor (uint32_t i = 0; i < len - 1; i++) {\n-\t\t\tif (data[i] == '\\0') {\n-\t\t\t\tthrow NotImplementedException(\"ART indexes cannot contain BLOBs with zero bytes.\");\n-\t\t\t}\n+\t// copy over the data and add in escapes\n+\tidx_t pos = 0;\n+\tfor (idx_t r = 0; r < string_len; r++) {\n+\t\tif (string_data[r] <= 1) {\n+\t\t\t// escape\n+\t\t\tdata[pos++] = '\\01';\n \t\t}\n+\t\tdata[pos++] = string_data[r];\n \t}\n-\n-\tdata[len - 1] = '\\0';\n+\t// end with a null-terminator\n+\tdata[pos] = '\\0';\n \treturn ARTKey(data, len);\n }\n \n@@ -39,21 +46,7 @@ ARTKey ARTKey::CreateARTKey(ArenaAllocator &allocator, const LogicalType &type,\n \n template <>\n void ARTKey::CreateARTKey(ArenaAllocator &allocator, const LogicalType &type, ARTKey &key, string_t value) {\n-\tkey.len = value.GetSize() + 1;\n-\tkey.data = allocator.Allocate(key.len);\n-\tmemcpy(key.data, value.GetData(), key.len - 1);\n-\n-\t// FIXME: rethink this\n-\tif (type == LogicalType::BLOB || type == LogicalType::VARCHAR) {\n-\t\t// indexes cannot contain BLOBs (or BLOBs cast to VARCHARs) that contain zero bytes\n-\t\tfor (uint32_t i = 0; i < key.len - 1; i++) {\n-\t\t\tif (key.data[i] == '\\0') {\n-\t\t\t\tthrow NotImplementedException(\"ART indexes cannot contain BLOBs with zero bytes.\");\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tkey.data[key.len - 1] = '\\0';\n+\tkey = ARTKey::CreateARTKey<string_t>(allocator, type, value);\n }\n \n template <>\n",
  "test_patch": "diff --git a/test/fuzzer/pedro/art_prefix_error.test b/test/fuzzer/pedro/art_prefix_error.test\nindex 9da151818c13..22dce28c0b28 100644\n--- a/test/fuzzer/pedro/art_prefix_error.test\n+++ b/test/fuzzer/pedro/art_prefix_error.test\n@@ -5,7 +5,6 @@\n statement ok\n CREATE TABLE t0 (c0 BLOB PRIMARY KEY);\n \n-statement error\n+statement ok\n INSERT INTO t0(c0) VALUES (BLOB '\\x00a'), (BLOB '');\n-----\n-ART indexes cannot contain BLOBs with zero bytes.\n+\ndiff --git a/test/sql/index/art/issues/test_art_fuzzer.test b/test/sql/index/art/issues/test_art_fuzzer.test\nindex 17df52f1c6a8..6fe0d47a33f6 100644\n--- a/test/sql/index/art/issues/test_art_fuzzer.test\n+++ b/test/sql/index/art/issues/test_art_fuzzer.test\n@@ -19,18 +19,14 @@ statement ok\n INSERT INTO t1(c1) VALUES (2),(3);\n \n # issue 5984, number 22\n-# FIXME: eventually, we might want to rethink the way that we null-terminate keys, see #5865\n-\n statement ok\n CREATE TABLE t2 (c1 VARCHAR);\n \n statement ok\n CREATE INDEX i2 ON t2 (c1);\n \n-statement error\n+statement ok\n INSERT INTO t2 VALUES (decode('g\\x00'::BLOB)::VARCHAR),('g');\n-----\n-ART indexes cannot contain BLOBs with zero bytes.\n \n statement ok\n INSERT INTO t2 VALUES ('\\0');\n@@ -64,7 +60,6 @@ statement ok\n UPDATE t4 SET c1 = NULL;\n \n # issue 5984, number 19\n-\n statement ok\n CREATE TABLE t_leak (c1 INT);\n \n@@ -77,23 +72,11 @@ CREATE UNIQUE INDEX i_leak ON t_leak (c1);\n Constraint Error: Data contains duplicates on indexed column(s)\n \n # issue 5984, number 22\n-# FIXME: eventually, we might want to rethink the way that we null-terminate keys, see #5865\n-# FIXME: this fails only with verification enabled and force reload, we should fix this when we\n-# FIXME: address the null-terminated keys\n-\n-require skip_reload\n-\n statement ok\n CREATE TABLE t21 (c1 INT);\n \n statement ok\n CREATE INDEX i21 ON t21 (c1, \"decode\"('\\x00'::BLOB));\n \n-statement error\n+statement ok\n INSERT INTO t21 VALUES (1);\n-----\n-ART indexes cannot contain BLOBs with zero bytes.\n-\n-statement error\n-CREATE INDEX i21 ON t21 (c1);\n-----\ndiff --git a/test/sql/index/art/scan/art_null_bytes.test b/test/sql/index/art/scan/art_null_bytes.test\nnew file mode 100644\nindex 000000000000..cdc2dd106b76\n--- /dev/null\n+++ b/test/sql/index/art/scan/art_null_bytes.test\n@@ -0,0 +1,86 @@\n+# name: test/sql/index/art/scan/art_null_bytes.test\n+# description: Test ART with null bytes\n+# group: [scan]\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+statement ok\n+CREATE TABLE varchars(v VARCHAR PRIMARY KEY);\n+\n+statement ok\n+INSERT INTO varchars VALUES ('hello'), ('hello' || chr(0)), ('hello' || chr(0) || chr(0)), ('hello' || chr(0) || chr(0) || chr(0));\n+\n+statement error\n+INSERT INTO varchars VALUES ('hello' || chr(0) || chr(0) || chr(0));\n+----\n+Duplicate key\n+\n+query I\n+SELECT * FROM varchars WHERE v = 'hello'\n+----\n+hello\n+\n+query I\n+SELECT * FROM varchars WHERE v = 'hello' || chr(0)\n+----\n+hello\\0\n+\n+query I\n+SELECT * FROM varchars WHERE v = 'hello' || chr(0) || chr(0)\n+----\n+hello\\0\\0\n+\n+query I\n+SELECT * FROM varchars WHERE v = 'hello' || chr(0) || chr(0) || chr(0)\n+----\n+hello\\0\\0\\0\n+\n+statement ok\n+CREATE TABLE blobs(b BLOB PRIMARY KEY);\n+\n+statement ok\n+INSERT INTO blobs VALUES (''), ('\\x00'), ('\\x01'), ('\\x00\\x01'), ('\\x01\\x00'), ('\\x01\\x01'), ('\\x00\\x00');\n+\n+statement error\n+INSERT INTO blobs VALUES ('\\x00\\x01');\n+----\n+Duplicate key\n+\n+query I\n+SELECT * FROM blobs WHERE b = ''\n+----\n+(empty)\n+\n+query I\n+SELECT * FROM blobs WHERE b = '\\x00'\n+----\n+\\x00\n+\n+query I\n+SELECT * FROM blobs WHERE b = '\\x00\\x01'\n+----\n+\\x00\\x01\n+\n+query I\n+SELECT * FROM blobs WHERE b >= '\\x00' ORDER BY b::VARCHAR\n+----\n+\\x00\n+\\x00\\x00\n+\\x00\\x01\n+\\x01\n+\\x01\\x00\n+\\x01\\x01\n+\n+query I\n+SELECT * FROM blobs WHERE b >= '\\x01' ORDER BY b::VARCHAR\n+----\n+\\x01\n+\\x01\\x00\n+\\x01\\x01\n+\n+query I\n+SELECT * FROM blobs WHERE b >= '\\x01\\x00' ORDER BY b::VARCHAR\n+----\n+\\x01\\x00\n+\\x01\\x01\ndiff --git a/test/sql/storage/null_byte_storage.test b/test/sql/storage/null_byte_storage.test\nindex 0ac0643c07df..bf6f0ded5935 100644\n--- a/test/sql/storage/null_byte_storage.test\n+++ b/test/sql/storage/null_byte_storage.test\n@@ -27,10 +27,8 @@ SELECT * FROM null_byte WHERE v=concat('goo', chr(0), 42)\n goo\\042\n \n # null byte in index\n-statement error\n+statement ok\n CREATE INDEX i_index ON null_byte(v)\n-----\n-ART indexes cannot contain BLOBs with zero bytes.\n \n query I\n SELECT * FROM null_byte WHERE v=concat('goo', chr(0), 42)\n",
  "problem_statement": "Cannot index `BLOB`s with null bytes anywhere in them.\n### What happens?\n\nWhen you try to create an index on a BLOB column, you get an error if any value contains a null byte anywhere. The error states that BLOB indexes cannot contain null-terminated values. But the values are not null-terminated, there is just a byte that is legitimately zero.\r\n\r\n```\r\nError: TransactionContext Error: Failed to commit: Not implemented Error: Indexes cannot contain BLOBs that contain null-terminated bytes.\r\n```\n\n### To Reproduce\n\n```sql\r\ncreate table indexed_table(indexed_field blob);\r\ncreate index blob_index on indexed_table(indexed_field);\r\ninsert into indexed_table values ('\\x11\\x00\\x11'::blob);\r\n```\n\n### OS:\n\nUbuntu x64 in WSL on Windows 11\n\n### DuckDB Version:\n\nv0.9.2-dev51 2646836f6f\n\n### DuckDB Client:\n\ncli\n\n### Full Name:\n\nM\u00edma Hlav\u00e1\u010dek\n\n### Affiliation:\n\nBlindspot.ai\n\n### Have you tried this on the latest `main` branch?\n\nI have tested with a main build\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] Yes, I have\n",
  "hints_text": "Hey @mima-hlavacek, thanks for the report. You are right; the error message is misleading here. Indeed, duckdb does not support indexing `BLOBs` with null bytes. We commented on this [here](https://github.com/duckdb/duckdb/issues/5865#issuecomment-1420845237), but I eventually closed the issue and split it into smaller internal backlog entries. One of them concerns solutions to allow zero bytes in the ART. But as of now, we have not addressed it; therefore, the `not implemented` error.\r\n\r\nI will open a small PR to improve the error message!\nThe PR is up, so I'll close this issue as a known limitation.\nCurious why this was not a limitation for version 0.6? --- The doc for 0.6 has ART index https://duckdb.org/docs/archive/0.6.1/sql/indexes.\r\n\n@yifanwu, if I remember correctly, we did not catch this behavior in 0.6. Indexes were a much newer feature back then. I think I introduced the `NotImplementedException` as a response to a bug where the ART returned incorrect results because it silently failed on the null bytes.",
  "created_at": "2024-01-24T14:14:36Z"
}