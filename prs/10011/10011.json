{
  "repo": "duckdb/duckdb",
  "pull_number": 10011,
  "instance_id": "duckdb__duckdb-10011",
  "issue_numbers": [
    "9889"
  ],
  "base_commit": "24148408432d05bda7cf86f2736d24920c51577c",
  "patch": "diff --git a/tools/jdbc/src/main/java/org/duckdb/DuckDBDatabaseMetaData.java b/tools/jdbc/src/main/java/org/duckdb/DuckDBDatabaseMetaData.java\nindex a1f63079089a..55c0f054795e 100644\n--- a/tools/jdbc/src/main/java/org/duckdb/DuckDBDatabaseMetaData.java\n+++ b/tools/jdbc/src/main/java/org/duckdb/DuckDBDatabaseMetaData.java\n@@ -1027,7 +1027,7 @@ public boolean insertsAreDetected(int type) throws SQLException {\n \n     @Override\n     public boolean supportsBatchUpdates() throws SQLException {\n-        return false;\n+        return true;\n     }\n \n     @Override\ndiff --git a/tools/jdbc/src/main/java/org/duckdb/DuckDBPreparedStatement.java b/tools/jdbc/src/main/java/org/duckdb/DuckDBPreparedStatement.java\nindex dad0760dc215..50102a1483ac 100644\n--- a/tools/jdbc/src/main/java/org/duckdb/DuckDBPreparedStatement.java\n+++ b/tools/jdbc/src/main/java/org/duckdb/DuckDBPreparedStatement.java\n@@ -26,7 +26,10 @@\n import java.sql.Time;\n import java.sql.Timestamp;\n import java.sql.Types;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.Calendar;\n+import java.util.List;\n import java.time.LocalDateTime;\n import java.time.OffsetDateTime;\n \n@@ -47,6 +50,10 @@ public class DuckDBPreparedStatement implements PreparedStatement {\n     boolean closeOnCompletion = false;\n     private Object[] params = new Object[0];\n     private DuckDBResultSetMetaData meta = null;\n+    private final List<Object[]> batchedParams = new ArrayList<>();\n+    private final List<String> batchedStatements = new ArrayList<>();\n+    private Boolean isBatch = false;\n+    private Boolean isPreparedStatement = false;\n \n     public DuckDBPreparedStatement(DuckDBConnection conn) throws SQLException {\n         if (conn == null) {\n@@ -63,6 +70,7 @@ public DuckDBPreparedStatement(DuckDBConnection conn, String sql) throws SQLExce\n             throw new SQLException(\"sql query parameter cannot be null\");\n         }\n         this.conn = conn;\n+        this.isPreparedStatement = true;\n         prepare(sql);\n     }\n \n@@ -161,6 +169,7 @@ public boolean execute() throws SQLException {\n \n     @Override\n     public ResultSet executeQuery() throws SQLException {\n+        requireNonBatch();\n         execute();\n         if (!returnsResultSet) {\n             throw new SQLException(\"executeQuery() can only be used with queries that return a ResultSet\");\n@@ -170,6 +179,7 @@ public ResultSet executeQuery() throws SQLException {\n \n     @Override\n     public int executeUpdate() throws SQLException {\n+        requireNonBatch();\n         execute();\n         if (!(returnsChangedRows || returnsNothing)) {\n             throw new SQLException(\n@@ -180,6 +190,7 @@ public int executeUpdate() throws SQLException {\n \n     @Override\n     public boolean execute(String sql) throws SQLException {\n+        requireNonBatch();\n         prepare(sql);\n         return execute();\n     }\n@@ -445,17 +456,49 @@ public int getResultSetType() throws SQLException {\n \n     @Override\n     public void addBatch(String sql) throws SQLException {\n-        throw new SQLFeatureNotSupportedException(\"addBatch\");\n+        requireNonPreparedStatement();\n+        this.batchedStatements.add(sql);\n+        this.isBatch = true;\n     }\n \n     @Override\n     public void clearBatch() throws SQLException {\n-        throw new SQLFeatureNotSupportedException(\"clearBatch\");\n+        this.batchedParams.clear();\n+        this.batchedStatements.clear();\n+        this.isBatch = false;\n     }\n \n     @Override\n     public int[] executeBatch() throws SQLException {\n-        throw new SQLFeatureNotSupportedException(\"executeBatch\");\n+        try {\n+            if (this.isPreparedStatement) {\n+                return executeBatchedPreparedStatement();\n+            } else {\n+                return executeBatchedStatements();\n+            }\n+        } finally {\n+            clearBatch();\n+        }\n+    }\n+\n+    private int[] executeBatchedPreparedStatement() throws SQLException {\n+        int[] updateCounts = new int[this.batchedParams.size()];\n+        for (int i = 0; i < this.batchedParams.size(); i++) {\n+            params = this.batchedParams.get(i);\n+            execute();\n+            updateCounts[i] = getUpdateCount();\n+        }\n+        return updateCounts;\n+    }\n+\n+    private int[] executeBatchedStatements() throws SQLException {\n+        int[] updateCounts = new int[this.batchedStatements.size()];\n+        for (int i = 0; i < this.batchedStatements.size(); i++) {\n+            prepare(this.batchedStatements.get(i));\n+            execute();\n+            updateCounts[i] = getUpdateCount();\n+        }\n+        return updateCounts;\n     }\n \n     @Override\n@@ -723,7 +766,9 @@ public void setObject(int parameterIndex, Object x, int targetSqlType) throws SQ\n \n     @Override\n     public void addBatch() throws SQLException {\n-        throw new SQLFeatureNotSupportedException(\"addBatch\");\n+        batchedParams.add(params);\n+        clearParameters();\n+        this.isBatch = true;\n     }\n \n     @Override\n@@ -875,4 +920,16 @@ public void setBlob(int parameterIndex, InputStream inputStream) throws SQLExcep\n     public void setNClob(int parameterIndex, Reader reader) throws SQLException {\n         throw new SQLFeatureNotSupportedException(\"setNClob\");\n     }\n+\n+    private void requireNonBatch() throws SQLException {\n+        if (this.isBatch) {\n+            throw new SQLException(\"Batched queries must be executed with executeBatch.\");\n+        }\n+    }\n+\n+    private void requireNonPreparedStatement() throws SQLException {\n+        if (this.isPreparedStatement) {\n+            throw new SQLException(\"Cannot add batched SQL statement to PreparedStatement\");\n+        }\n+    }\n }\n",
  "test_patch": "diff --git a/tools/jdbc/src/test/java/org/duckdb/test/TestDuckDBJDBC.java b/tools/jdbc/src/test/java/org/duckdb/test/TestDuckDBJDBC.java\nindex 68f193c1f3eb..4a35a9f869be 100644\n--- a/tools/jdbc/src/test/java/org/duckdb/test/TestDuckDBJDBC.java\n+++ b/tools/jdbc/src/test/java/org/duckdb/test/TestDuckDBJDBC.java\n@@ -4048,6 +4048,118 @@ public static void test_user_agent_custom() throws Exception {\n         }\n     }\n \n+    public static void test_batch_prepared_statement() throws Exception {\n+        try (Connection conn = DriverManager.getConnection(JDBC_URL)) {\n+            try (Statement s = conn.createStatement()) {\n+                s.execute(\"CREATE TABLE test (x INT, y INT, z INT)\");\n+            }\n+            try (PreparedStatement ps = conn.prepareStatement(\"INSERT INTO test (x, y, z) VALUES (?, ?, ?);\")) {\n+                ps.setObject(1, 1);\n+                ps.setObject(2, 2);\n+                ps.setObject(3, 3);\n+                ps.addBatch();\n+\n+                ps.setObject(1, 4);\n+                ps.setObject(2, 5);\n+                ps.setObject(3, 6);\n+                ps.addBatch();\n+\n+                ps.executeBatch();\n+            }\n+            try (Statement s = conn.createStatement(); ResultSet rs = s.executeQuery(\"SELECT * FROM test ORDER BY x\")) {\n+                rs.next();\n+                assertEquals(rs.getInt(1), rs.getObject(1, Integer.class));\n+                assertEquals(rs.getObject(1, Integer.class), 1);\n+\n+                assertEquals(rs.getInt(2), rs.getObject(2, Integer.class));\n+                assertEquals(rs.getObject(2, Integer.class), 2);\n+\n+                assertEquals(rs.getInt(3), rs.getObject(3, Integer.class));\n+                assertEquals(rs.getObject(3, Integer.class), 3);\n+\n+                rs.next();\n+                assertEquals(rs.getInt(1), rs.getObject(1, Integer.class));\n+                assertEquals(rs.getObject(1, Integer.class), 4);\n+\n+                assertEquals(rs.getInt(2), rs.getObject(2, Integer.class));\n+                assertEquals(rs.getObject(2, Integer.class), 5);\n+\n+                assertEquals(rs.getInt(3), rs.getObject(3, Integer.class));\n+                assertEquals(rs.getObject(3, Integer.class), 6);\n+            }\n+        }\n+    }\n+\n+    public static void test_batch_statement() throws Exception {\n+        try (Connection conn = DriverManager.getConnection(JDBC_URL)) {\n+            try (Statement s = conn.createStatement()) {\n+                s.execute(\"CREATE TABLE test (x INT, y INT, z INT)\");\n+\n+                s.addBatch(\"INSERT INTO test (x, y, z) VALUES (1, 2, 3);\");\n+                s.addBatch(\"INSERT INTO test (x, y, z) VALUES (4, 5, 6);\");\n+\n+                s.executeBatch();\n+            }\n+            try (Statement s2 = conn.createStatement();\n+                 ResultSet rs = s2.executeQuery(\"SELECT * FROM test ORDER BY x\")) {\n+                rs.next();\n+                assertEquals(rs.getInt(1), rs.getObject(1, Integer.class));\n+                assertEquals(rs.getObject(1, Integer.class), 1);\n+\n+                assertEquals(rs.getInt(2), rs.getObject(2, Integer.class));\n+                assertEquals(rs.getObject(2, Integer.class), 2);\n+\n+                assertEquals(rs.getInt(3), rs.getObject(3, Integer.class));\n+                assertEquals(rs.getObject(3, Integer.class), 3);\n+\n+                rs.next();\n+                assertEquals(rs.getInt(1), rs.getObject(1, Integer.class));\n+                assertEquals(rs.getObject(1, Integer.class), 4);\n+\n+                assertEquals(rs.getInt(2), rs.getObject(2, Integer.class));\n+                assertEquals(rs.getObject(2, Integer.class), 5);\n+\n+                assertEquals(rs.getInt(3), rs.getObject(3, Integer.class));\n+                assertEquals(rs.getObject(3, Integer.class), 6);\n+            }\n+        }\n+    }\n+\n+    public static void test_execute_while_batch() throws Exception {\n+        try (Connection conn = DriverManager.getConnection(JDBC_URL)) {\n+            try (Statement s = conn.createStatement()) {\n+                s.execute(\"CREATE TABLE test (id INT)\");\n+            }\n+            try (PreparedStatement ps = conn.prepareStatement(\"INSERT INTO test (id) VALUES (?)\")) {\n+                ps.setObject(1, 1);\n+                ps.addBatch();\n+\n+                String msg =\n+                    assertThrows(() -> { ps.execute(\"INSERT INTO test (id) VALUES (1);\"); }, SQLException.class);\n+                assertTrue(msg.contains(\"Batched queries must be executed with executeBatch.\"));\n+\n+                String msg2 =\n+                    assertThrows(() -> { ps.executeUpdate(\"INSERT INTO test (id) VALUES (1);\"); }, SQLException.class);\n+                assertTrue(msg2.contains(\"Batched queries must be executed with executeBatch.\"));\n+\n+                String msg3 = assertThrows(() -> { ps.executeQuery(\"SELECT * FROM test\"); }, SQLException.class);\n+                assertTrue(msg3.contains(\"Batched queries must be executed with executeBatch.\"));\n+            }\n+        }\n+    }\n+\n+    public static void test_prepared_statement_batch_exception() throws Exception {\n+        try (Connection conn = DriverManager.getConnection(JDBC_URL)) {\n+            try (Statement s = conn.createStatement()) {\n+                s.execute(\"CREATE TABLE test (id INT)\");\n+            }\n+            try (PreparedStatement ps = conn.prepareStatement(\"INSERT INTO test (id) VALUES (?)\")) {\n+                String msg = assertThrows(() -> { ps.addBatch(\"DUMMY SQL\"); }, SQLException.class);\n+                assertTrue(msg.contains(\"Cannot add batched SQL statement to PreparedStatement\"));\n+            }\n+        }\n+    }\n+\n     public static void main(String[] args) throws Exception {\n         // Woo I can do reflection too, take this, JUnit!\n         Method[] methods = TestDuckDBJDBC.class.getMethods();\n",
  "problem_statement": "The `addBatch` SQL Feature Fails in the JDBC When Writing a PySpark DataFrame to a DuckDB Database\n### What happens?\n\nWhen writing a PySpark DataFrame to a DuckDB database, the following exception is reported: `java.sql.SQLFeatureNotSupportedException: addBatch`. Could the DuckDB JDBC support the `addBatch` feature please?\n\n### To Reproduce\n\n## Reproduction\r\n```\r\nimport pyspark.sql as psql\r\nspark = psql.SparkSession.builder.config('spark.jars', 'path/to/duckdb_jdbc-0.8.1.jar').getOrCreate()\r\ndf = spark.createDataFrame([\r\n    (1, 2.2, 'string1'),\r\n    (2, 3.3, 'string2'),\r\n    (3, 4.4, 'string3')\r\n], schema='col1 long, col2 double, col3 string')\r\nurl = 'jdbc:duckdb:path/to/my-duckdb-database.db'\r\nwriter = psql.DataFrameWriter(df)\r\nwriter.jdbc(\r\n    table='Test', url=url, mode='append',\r\n    properties={'driver': 'org.duckdb.DuckDBDriver'})\r\n```\r\n\r\n## Error message\r\n```\r\nPy4JJavaError: An error occurred while calling o44.jdbc.\r\n: org.apache.spark.SparkException: Job aborted due to stage failure: Task 11 in stage 0.0 failed 1 times, most recent failure: Lost task 11.0 in stage 0.0 (TID 11) (dionysus executor driver): java.sql.SQLFeatureNotSupportedException: addBatch\r\n\tat org.duckdb.DuckDBPreparedStatement.addBatch(DuckDBPreparedStatement.java:711)\r\n...\r\n```\n\n### OS:\n\nLinux\n\n### DuckDB Version:\n\n0.8.1\n\n### DuckDB Client:\n\nPython\n\n### Full Name:\n\nErik Huckvale\n\n### Affiliation:\n\nUniversity of Kentucky\n\n### Have you tried this on the latest `main` branch?\n\nI have tested with a main build\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] Yes, I have\n",
  "hints_text": "We correctly report that we don't support batch updates in the `DatabaseMetaData.supportsBatchUpdates()` - that being said adding support for this should be straightforward. Happy to review a PR!\nIf no one has picked up this issue I can give it a shot?\n> If no one has picked up this issue I can give it a shot?\n\nGo for it!",
  "created_at": "2023-12-16T07:27:16Z"
}