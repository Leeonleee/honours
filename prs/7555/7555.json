{
  "repo": "duckdb/duckdb",
  "pull_number": 7555,
  "instance_id": "duckdb__duckdb-7555",
  "issue_numbers": [
    "3076"
  ],
  "base_commit": "e8e4cea5ec9d1a84c1f516d0f0674f8785a3e786",
  "patch": "diff --git a/src/planner/binder/statement/bind_create.cpp b/src/planner/binder/statement/bind_create.cpp\nindex 1f17254ecda8..f014bcb31234 100644\n--- a/src/planner/binder/statement/bind_create.cpp\n+++ b/src/planner/binder/statement/bind_create.cpp\n@@ -243,18 +243,26 @@ void Binder::BindLogicalType(ClientContext &context, LogicalType &type, optional\n \t\ttype = LogicalType::UNION(member_types);\n \t\ttype.SetAlias(alias);\n \t} else if (type.id() == LogicalTypeId::USER) {\n-\t\tauto &user_type_name = UserType::GetTypeName(type);\n+\t\tauto user_type_name = UserType::GetTypeName(type);\n \t\tif (catalog) {\n+\t\t\t// The search order is:\n+\t\t\t// 1) In the same schema as the table\n+\t\t\t// 2) In the same catalog\n+\t\t\t// 3) System catalog\n \t\t\ttype = catalog->GetType(context, schema, user_type_name, OnEntryNotFound::RETURN_NULL);\n+\n \t\t\tif (type.id() == LogicalTypeId::INVALID) {\n-\t\t\t\t// look in the system catalog if the type was not found\n-\t\t\t\ttype = Catalog::GetType(context, SYSTEM_CATALOG, schema, user_type_name);\n+\t\t\t\ttype = catalog->GetType(context, INVALID_SCHEMA, user_type_name, OnEntryNotFound::RETURN_NULL);\n+\t\t\t}\n+\n+\t\t\tif (type.id() == LogicalTypeId::INVALID) {\n+\t\t\t\ttype = Catalog::GetType(context, INVALID_CATALOG, schema, user_type_name);\n \t\t\t}\n \t\t} else {\n \t\t\ttype = Catalog::GetType(context, INVALID_CATALOG, schema, user_type_name);\n \t\t}\n \t} else if (type.id() == LogicalTypeId::ENUM) {\n-\t\tauto &enum_type_name = EnumType::GetTypeName(type);\n+\t\tauto enum_type_name = EnumType::GetTypeName(type);\n \t\toptional_ptr<TypeCatalogEntry> enum_type_catalog;\n \t\tif (catalog) {\n \t\t\tenum_type_catalog =\n",
  "test_patch": "diff --git a/test/sql/alter/add_col/test_add_col_user_type.test b/test/sql/alter/add_col/test_add_col_user_type.test\nnew file mode 100644\nindex 000000000000..869531e78693\n--- /dev/null\n+++ b/test/sql/alter/add_col/test_add_col_user_type.test\n@@ -0,0 +1,42 @@\n+# name: test/sql/alter/add_col/test_add_col_user_type.test\n+# description: Test ALTER TABLE ADD COLUMN with \"CREATE TYPE\"-based types\n+# group: [add_col]\n+\n+statement ok\n+CREATE SCHEMA test_schema;\n+\n+statement ok\n+CREATE TYPE main_int AS int32;\n+\n+statement ok\n+CREATE TYPE test_schema.test_int AS int32;\n+\n+statement ok\n+CREATE TABLE test_schema.test_t1 (i INT);\n+\n+statement ok\n+CREATE TABLE main_t1 (i INT);\n+\n+#\n+# main.<type> in test_schema.<table>\n+#\n+statement error\n+ALTER TABLE main_t1 ADD COLUMN j test_int;\n+\n+#\n+# main.<type> in test_schema.<table>\n+#\n+statement ok\n+ALTER TABLE test_schema.test_t1 ADD COLUMN not_found main_int;\n+\n+#\n+# test.<type> in test_schema.<table>, with qualifier\n+# TODO(morrita): Currently the type name cannot be qualified. Fix this.\n+# statement ok\n+# ALTER TABLE test_schema.test_t1 ADD COLUMN k test_schema.test_int;\n+\n+#\n+# test.<type> in test_schema.<table>, without qualifier\n+#\n+statement ok\n+ALTER TABLE test_schema.test_t1 ADD COLUMN l test_int;\n",
  "problem_statement": "Adding column with type ENUM fails when schema is not main\n#### What happens?\r\nThe following sequence of commands:\r\n```\r\nCREATE SCHEMA not_main\r\nCREATE TYPE enum_type AS ENUM('a','b','c')\r\nCREATE TABLE not_main.tbl (col1 INT)\r\nALTER TABLE not_main.tbl ADD COLUMN col2 enum_type\r\n```\r\n\r\nproduces the following error:\r\n> RuntimeError: Not implemented Error: DataType enum_type not supported yet...a\r\n\r\n\r\nHowever, the following does work:\r\n```\r\nCREATE TABLE main.tbl (col1 INT)\r\nALTER TABLE main.tbl ADD COLUMN col2 enum_type\r\n```\r\n#### To Reproduce\r\nSee above.\r\n\r\n#### Environment (please complete the following information):\r\n - OS: Windows 10\r\n - DuckDB Version: 0.3.2-dev1201\r\n - DuckDB Client: Python \r\n\r\n#### Before Submitting\r\n\r\n- [ ] **Have you tried this on the latest `master` branch?**\r\n* **Python**: `pip install duckdb --upgrade --pre`\r\n* **R**: `install.packages(\"https://github.com/duckdb/duckdb/releases/download/master-builds/duckdb_r_src.tar.gz\", repos = NULL)`\r\n* **Other Platforms**: You can find binaries [here](https://github.com/duckdb/duckdb/releases/tag/master-builds) or compile from source.\r\n\r\n- [X] **Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?**\r\n\n",
  "hints_text": "Shouldn't the type be created in the other schema? \nperhaps, but it seems strange to me that a type would be specific to a schema.  What is the proper syntax for specifying which schema a type belongs to?  I don't see anything mentioned in the documenation.\nI see! Simply prepending the schema name to the type name raises a parser error. I tried a few variants but I have indeed not managed to use an ENUM type in a different schema than main;\r\nalso not by creating the ENUM after setting the schema using SET SCHEMA.\r\n\r\n(I could also not find how the ENUM types are represented in the catalog, it seems there is no SQL level catalog info accessible for these and you'd have to use a CPP program to get access to that info - unless I overlooked a table still.)\nPS: to be precise - I could create a table in the new schema, just not alter one. \r\n\r\n(If you need a workaround, you could perhaps create a new table and insert the old one into it.)",
  "created_at": "2023-05-17T12:07:16Z"
}