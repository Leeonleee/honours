diff --git a/test/api/test_arrow.cpp b/test/api/test_arrow.cpp
index 91ca8d3f887b..5379271c12a8 100644
--- a/test/api/test_arrow.cpp
+++ b/test/api/test_arrow.cpp
@@ -68,6 +68,7 @@ static void test_arrow_round_trip(string q) {
 
 	// query that creates a bunch of values across the types
 	auto result = con.Query(q);
+	REQUIRE(result->success);
 	auto my_stream = new MyArrowArrayStream(move(result));
 	auto result2 = con.TableFunction("arrow_scan", {Value::POINTER((uintptr_t)&my_stream->stream)})->Execute();
 
@@ -92,17 +93,15 @@ static void test_arrow_round_trip(string q) {
 }
 
 TEST_CASE("Test Arrow API round trip", "[arrow]") {
+	// many types
 	test_arrow_round_trip(
 	    "select NULL c_null, (c % 4 = 0)::bool c_bool, (c%128)::tinyint c_tinyint, c::smallint*1000 c_smallint, "
 	    "c::integer*100000 c_integer, c::bigint*1000000000000 c_bigint, c::hugeint*10000000000000000000000000000000 "
-	    "c_hugeint, c::float c_float, c::double c_double, 'c_' || c::string c_string, current_date::date c_date, "
-	    "'1969-01-01'::date, current_time::time c_time, now()::timestamp c_timestamp "
+	    "c_hugeint, c::float c_float, c::double c_double, 'c_' || c::string c_string, DATE '1992-01-01'::date c_date, "
+	    "'1969-01-01'::date, TIME '13:07:16'::time c_time, timestamp '1992-01-01 12:00:00' c_timestamp "
 	    "from (select case when range % 2 == 0 then range else null end as c from range(-10, 10)) sq");
-	// test_arrow_round_trip(
-	//     "select NULL c_null, (c % 4 = 0)::bool c_bool, (c%128)::tinyint c_tinyint, c::smallint*1000 c_smallint, "
-	//     "c::integer*100000 c_integer, c::bigint*1000000000000 c_bigint, c::hugeint*10000000000000000000000000000000 "
-	//     "c_hugeint, c::float c_float, c::double c_double, 'c_' || c::string c_string, current_date::date c_date, "
-	//     "'1969-01-01'::date, current_time::time c_time, now()::timestamp c_timestamp "
-	//     "from (select case when range % 2 == 0 then range else null end as c from range(-1000, 1000)) sq");
+	// big result set
+	test_arrow_round_trip(
+	    "select i from range(0, 2000) sq(i)");
 }
-// TODO timestamp date time interval decimal
+// TODO interval decimal
diff --git a/test/sql/binder/test_case_insensitive_binding.test b/test/sql/binder/test_case_insensitive_binding.test
index b83e22615cdd..43aa901a00c8 100644
--- a/test/sql/binder/test_case_insensitive_binding.test
+++ b/test/sql/binder/test_case_insensitive_binding.test
@@ -10,6 +10,9 @@ PRAGMA enable_verification
 statement ok
 CREATE TABLE test ("HeLlO" INTEGER)
 
+statement ok
+INSERT INTO test VALUES (1)
+
 # lowercase names are aliased
 statement ok
 SELECT HeLlO FROM test
@@ -27,6 +30,24 @@ SELECT "HELLO" FROM test
 statement error
 SELECT "HELLo" FROM test
 
+# verify that the column name of the original column is returned
+query I
+SELECT alias(HeLlO) FROM test
+----
+HeLlO
+
+query I
+SELECT alias(hello) FROM test
+----
+HeLlO
+
+# verify that an alias here still works
+query I
+SELECT alias(x) FROM (SELECT HeLlO as x FROM test) tbl;
+----
+x
+
+# verify that it also works when we specify the table-name explicitly
 statement ok
 SELECT test.HeLlO FROM test
 
diff --git a/tools/pythonpkg/test-nat.py b/tools/pythonpkg/test-nat.py
deleted file mode 100644
index 0ac6e328932b..000000000000
--- a/tools/pythonpkg/test-nat.py
+++ /dev/null
@@ -1,29 +0,0 @@
-import pandas
-import numpy as np
-import datetime
-import duckdb
-df = pandas.DataFrame([{"col1":"val1","col2":1.05},{"col1":"val3","col2":np.NaN}])
-df["newcol1"] = np.where(df["col1"] == "val1",np.NaN,df["col1"])
-current_time = datetime.datetime.now().replace(microsecond=0)
-df['datetest'] = current_time
-df.loc[0,'datetest'] = pandas.NaT
-conn = duckdb.connect(':memory:')
-conn.register('testing_null_values', df)
-results = conn.execute('select * from testing_null_values').fetchall()
-assert results[0][0] == 'val1'
-assert results[0][1] == 1.05
-assert results[0][2] == None
-assert results[0][3] == None
-assert results[1][0] == 'val3'
-assert results[1][1] == None
-assert results[1][2] == 'val3'
-assert results[1][3] == current_time
-result_df = conn.execute('select * from testing_null_values').fetchdf()
-assert result_df['col1'][0] == df['col1'][0]
-assert result_df['col1'][1] == df['col1'][1]
-assert result_df['col2'][0] == df['col2'][0]
-assert np.isnan(result_df['col2'][1])
-assert np.isnan(result_df['newcol1'][0])
-assert result_df['newcol1'][1] == df['newcol1'][1]
-assert pandas.isnull(result_df['datetest'][0])
-assert result_df['datetest'][1] == df['datetest'][1]
diff --git a/tools/pythonpkg/tests/test_case_alias.py b/tools/pythonpkg/tests/test_case_alias.py
new file mode 100644
index 000000000000..d024fc5d3790
--- /dev/null
+++ b/tools/pythonpkg/tests/test_case_alias.py
@@ -0,0 +1,39 @@
+import pandas
+import numpy as np
+import datetime
+import duckdb
+
+class TestCaseAlias(object):
+    def test_case_alias(self, duckdb_cursor):
+        import pandas
+        import numpy as np
+        import datetime
+        import duckdb
+
+        con = duckdb.connect(':memory:')
+
+        df = pandas.DataFrame([{"COL1": "val1", "CoL2": 1.05},{"COL1": "val3", "CoL2": 17}])
+
+        r1 = con.from_df(df).query('df', 'select * from df').fetchdf()
+        assert r1["COL1"][0] == "val1"
+        assert r1["COL1"][1] == "val3"
+        assert r1["CoL2"][0] == 1.05
+        assert r1["CoL2"][1] == 17
+
+        r2 = con.from_df(df).query('df', 'select COL1, COL2 from df').fetchdf()
+        assert r2["COL1"][0] == "val1"
+        assert r2["COL1"][1] == "val3"
+        assert r2["CoL2"][0] == 1.05
+        assert r2["CoL2"][1] == 17
+
+        r3 = con.from_df(df).query('df', 'select COL1, COL2 from df ORDER BY COL1').fetchdf()
+        assert r3["COL1"][0] == "val1"
+        assert r3["COL1"][1] == "val3"
+        assert r3["CoL2"][0] == 1.05
+        assert r3["CoL2"][1] == 17
+
+        r4 = con.from_df(df).query('df', 'select COL1, COL2 from df GROUP BY COL1, COL2 ORDER BY COL1').fetchdf()
+        assert r4["COL1"][0] == "val1"
+        assert r4["COL1"][1] == "val3"
+        assert r4["CoL2"][0] == 1.05
+        assert r4["CoL2"][1] == 17
