{
  "repo": "duckdb/duckdb",
  "pull_number": 5540,
  "instance_id": "duckdb__duckdb-5540",
  "issue_numbers": [
    "5533",
    "5533"
  ],
  "base_commit": "8948cead74f4fb8bd024791793ed47f22c7263d9",
  "patch": "diff --git a/extension/parquet/column_reader.cpp b/extension/parquet/column_reader.cpp\nindex 48775538aacb..6170fafc1da8 100644\n--- a/extension/parquet/column_reader.cpp\n+++ b/extension/parquet/column_reader.cpp\n@@ -1193,7 +1193,6 @@ unique_ptr<ColumnReader> ColumnReader::CreateReader(ParquetReader &reader, const\n \t\t\t\t\treturn make_unique<CallbackColumnReader<int64_t, timestamp_t, ParquetTimestampNsToTimestamp>>(\n \t\t\t\t\t    reader, type_p, schema_p, file_idx_p, max_define, max_repeat);\n \t\t\t\t}\n-\n \t\t\t} else if (schema_p.__isset.converted_type) {\n \t\t\t\tswitch (schema_p.converted_type) {\n \t\t\t\tcase ConvertedType::TIMESTAMP_MICROS:\ndiff --git a/extension/parquet/parquet_statistics.cpp b/extension/parquet/parquet_statistics.cpp\nindex a50f5eedbc9b..f5721e420190 100644\n--- a/extension/parquet/parquet_statistics.cpp\n+++ b/extension/parquet/parquet_statistics.cpp\n@@ -169,6 +169,18 @@ Value ParquetStatisticsUtils::ConvertValue(const LogicalType &type,\n \t\t\t\tthrow InternalException(\"Incorrect stats size for type TIMESTAMP\");\n \t\t\t}\n \t\t\tauto val = Load<int64_t>((data_ptr_t)stats.c_str());\n+\t\t\tif (schema_ele.__isset.logicalType && schema_ele.logicalType.__isset.TIMESTAMP) {\n+\t\t\t\t// logical type\n+\t\t\t\tif (schema_ele.logicalType.TIMESTAMP.unit.__isset.MILLIS) {\n+\t\t\t\t\treturn Value::TIMESTAMPMS(timestamp_t(val));\n+\t\t\t\t} else if (schema_ele.logicalType.TIMESTAMP.unit.__isset.NANOS) {\n+\t\t\t\t\treturn Value::TIMESTAMPNS(timestamp_t(val));\n+\t\t\t\t} else if (schema_ele.logicalType.TIMESTAMP.unit.__isset.MICROS) {\n+\t\t\t\t\treturn Value::TIMESTAMP(timestamp_t(val));\n+\t\t\t\t} else {\n+\t\t\t\t\tthrow InternalException(\"Timestamp logicalType is set but unit is not defined\");\n+\t\t\t\t}\n+\t\t\t}\n \t\t\tif (schema_ele.converted_type == duckdb_parquet::format::ConvertedType::TIMESTAMP_MILLIS) {\n \t\t\t\treturn Value::TIMESTAMPMS(timestamp_t(val));\n \t\t\t} else {\n",
  "test_patch": "diff --git a/data/parquet-testing/issue_5533_timestamp_ms_stats.parquet b/data/parquet-testing/issue_5533_timestamp_ms_stats.parquet\nnew file mode 100644\nindex 000000000000..1096778780e9\nBinary files /dev/null and b/data/parquet-testing/issue_5533_timestamp_ms_stats.parquet differ\ndiff --git a/test/sql/copy/parquet/timestamp_ms_stats.test b/test/sql/copy/parquet/timestamp_ms_stats.test\nnew file mode 100644\nindex 000000000000..072d650f98f7\n--- /dev/null\n+++ b/test/sql/copy/parquet/timestamp_ms_stats.test\n@@ -0,0 +1,25 @@\n+# name: test/sql/copy/parquet/timestamp_ms_stats.test\n+# description: Test correct reading of stats for timestamp columns with non-microsecond precision\n+# group: [parquet]\n+\n+require parquet\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+query I\n+select timestamp from 'data/parquet-testing/issue_5533_timestamp_ms_stats.parquet' order by 1;\n+----\n+2022-11-27 17:42:43.514\n+2022-11-27 17:42:43.514\n+2022-11-27 17:42:44.28\n+2022-11-27 17:42:44.28\n+\n+query I\n+select timestamp from 'data/parquet-testing/issue_5533_timestamp_ms_stats.parquet' where timestamp >= '2022-11-27 00:00:00'\n+----\n+2022-11-27 17:42:43.514\n+2022-11-27 17:42:43.514\n+2022-11-27 17:42:44.28\n+2022-11-27 17:42:44.28\n+\n",
  "problem_statement": "Parquet stats_min_value/stats_max_value do not respect timestamp configuration\n### What happens?\r\n\r\nWhen reading parquet files and/or their metadata, timestamp column metadata statistics `stats_min_value` and `stats_max_value` seem to not respect the timestamps configuration of `ms`, resulting in `where` filters ignoring entire chunks.\r\n\r\n### To Reproduce\r\n\r\nExample file using `ms` precision in stats:\r\n[2022-11-27T17 42 35.480941703Z.parquet.txt](https://github.com/duckdb/duckdb/files/10112975/2022-11-27T17.42.35.480941703Z.parquet.txt)\r\n`select path_in_schema, stats_min_value, stats_max_value from 'file.parquet';`\r\n`select * from 'file.parquet';`\r\n`select * from 'file.parquet' where timestamp < '2022-01-01 00:00:00.000';`\r\n`select * from 'file.parquet' where timestamp > '2022-01-01 00:00:00.000';`\r\nI've verified the raw values in the parquet file before filing this issue.\r\n\r\n### OS:\r\n\r\nLinux-x64 & shell.duckdb.org\r\n\r\n### DuckDB Version:\r\n\r\n0.6.0\r\n\r\n### DuckDB Client:\r\n\r\nrust & wasm\r\n\r\n### Full Name:\r\n\r\nMichl Steglich\r\n\r\n### Affiliation:\r\n\r\ndrf.rs\r\n\r\n### Have you tried this on the latest `master` branch?\r\n\r\n- [X] I agree\r\n\r\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\r\n\r\n- [X] I agree\nParquet stats_min_value/stats_max_value do not respect timestamp configuration\n### What happens?\r\n\r\nWhen reading parquet files and/or their metadata, timestamp column metadata statistics `stats_min_value` and `stats_max_value` seem to not respect the timestamps configuration of `ms`, resulting in `where` filters ignoring entire chunks.\r\n\r\n### To Reproduce\r\n\r\nExample file using `ms` precision in stats:\r\n[2022-11-27T17 42 35.480941703Z.parquet.txt](https://github.com/duckdb/duckdb/files/10112975/2022-11-27T17.42.35.480941703Z.parquet.txt)\r\n`select path_in_schema, stats_min_value, stats_max_value from 'file.parquet';`\r\n`select * from 'file.parquet';`\r\n`select * from 'file.parquet' where timestamp < '2022-01-01 00:00:00.000';`\r\n`select * from 'file.parquet' where timestamp > '2022-01-01 00:00:00.000';`\r\nI've verified the raw values in the parquet file before filing this issue.\r\n\r\n### OS:\r\n\r\nLinux-x64 & shell.duckdb.org\r\n\r\n### DuckDB Version:\r\n\r\n0.6.0\r\n\r\n### DuckDB Client:\r\n\r\nrust & wasm\r\n\r\n### Full Name:\r\n\r\nMichl Steglich\r\n\r\n### Affiliation:\r\n\r\ndrf.rs\r\n\r\n### Have you tried this on the latest `master` branch?\r\n\r\n- [X] I agree\r\n\r\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\r\n\r\n- [X] I agree\n",
  "hints_text": "\n",
  "created_at": "2022-11-29T15:17:42Z"
}