diff --git a/test/helpers/test_helpers.cpp b/test/helpers/test_helpers.cpp
index e1e8c74a4114..41ea6cef6aab 100644
--- a/test/helpers/test_helpers.cpp
+++ b/test/helpers/test_helpers.cpp
@@ -231,9 +231,10 @@ bool compare_result(string csv, ChunkCollection &collection, vector<SQLType> sql
 
 	// set up the CSV reader
 	CopyInfo info;
-	info.delimiter = '|';
+	info.delimiter = "|";
 	info.header = true;
-	info.quote = '"';
+	info.quote = "\"";
+	info.escape = "\"";
 
 	// convert the CSV string into a stringstream
 	istringstream csv_stream(csv);
diff --git a/test/sql/copy/test_copy.cpp b/test/sql/copy/test_copy.cpp
index 5daf1fa31626..c889aeebc2aa 100644
--- a/test/sql/copy/test_copy.cpp
+++ b/test/sql/copy/test_copy.cpp
@@ -39,15 +39,15 @@ TEST_CASE("Test copy statement", "[copy]") {
 
 	auto csv_path = GetCSVPath();
 
-	// Generate CSV file With ; as delimiter and complex strings
+	// generate CSV file with ',' as delimiter and complex strings
 	ofstream from_csv_file(fs.JoinPath(csv_path, "test.csv"));
 	for (int i = 0; i < 5000; i++) {
 		from_csv_file << i << "," << i << ", test" << endl;
 	}
 	from_csv_file.close();
 
-	// Loading CSV into a table
-	REQUIRE_NO_FAIL(con.Query("CREATE TABLE test (a INTEGER, b INTEGER,c VARCHAR(10));"));
+	// load CSV file into a table
+	REQUIRE_NO_FAIL(con.Query("CREATE TABLE test (a INTEGER, b INTEGER, c VARCHAR(10));"));
 	result = con.Query("COPY test FROM '" + fs.JoinPath(csv_path, "test.csv") + "';");
 	REQUIRE(CHECK_COLUMN(result, 0, {5000}));
 
@@ -55,69 +55,75 @@ TEST_CASE("Test copy statement", "[copy]") {
 	REQUIRE(CHECK_COLUMN(result, 0, {5000}));
 	REQUIRE(CHECK_COLUMN(result, 1, {12497500}));
 
-	result = con.Query("SELECT * FROM test ORDER BY 1 LIMIT 3 ");
+	result = con.Query("SELECT * FROM test ORDER BY 1 LIMIT 3;");
 	REQUIRE(CHECK_COLUMN(result, 0, {0, 1, 2}));
 	REQUIRE(CHECK_COLUMN(result, 1, {0, 1, 2}));
 	REQUIRE(CHECK_COLUMN(result, 2, {" test", " test", " test"}));
 
-	//  Creating CSV from table
-	result = con.Query("COPY test to '" + fs.JoinPath(csv_path, "test2.csv") + "';");
+	// create CSV file from table
+	result = con.Query("COPY test TO '" + fs.JoinPath(csv_path, "test2.csv") + "';");
 	REQUIRE(CHECK_COLUMN(result, 0, {5000}));
-	// load the same CSV back again
-	REQUIRE_NO_FAIL(con.Query("CREATE TABLE test2(a INTEGER, b INTEGER, c VARCHAR(10));"));
+	// load the same CSV file back again
+	REQUIRE_NO_FAIL(con.Query("CREATE TABLE test2 (a INTEGER, b INTEGER, c VARCHAR(10));"));
 	result = con.Query("COPY test2 FROM '" + fs.JoinPath(csv_path, "test2.csv") + "';");
 	REQUIRE(CHECK_COLUMN(result, 0, {5000}));
-	result = con.Query("SELECT * FROM test2 ORDER BY 1 LIMIT 3 ");
+	result = con.Query("SELECT * FROM test2 ORDER BY 1 LIMIT 3;");
 	REQUIRE(CHECK_COLUMN(result, 0, {0, 1, 2}));
 	REQUIRE(CHECK_COLUMN(result, 1, {0, 1, 2}));
 	REQUIRE(CHECK_COLUMN(result, 2, {" test", " test", " test"}));
 
 	// test too few rows
-	REQUIRE_NO_FAIL(con.Query("CREATE TABLE test_too_few_rows(a INTEGER, b INTEGER, c VARCHAR, d INTEGER);"));
+	REQUIRE_NO_FAIL(con.Query("CREATE TABLE test_too_few_rows (a INTEGER, b INTEGER, c VARCHAR, d INTEGER);"));
 	REQUIRE_FAIL(con.Query("COPY test_too_few_rows FROM '" + fs.JoinPath(csv_path, "test2.csv") + "';"));
 
-	//  Creating CSV from Query
-	result = con.Query("COPY (select a,b from test where a < 4000) to '" + fs.JoinPath(csv_path, "test3.csv") + "';");
+	// create CSV file from query
+	result = con.Query("COPY (SELECT a,b FROM test WHERE a < 4000) TO '" + fs.JoinPath(csv_path, "test3.csv") + "';");
 	REQUIRE(CHECK_COLUMN(result, 0, {4000}));
-	// load the same CSV back again
-	REQUIRE_NO_FAIL(con.Query("CREATE TABLE test3(a INTEGER, b INTEGER);"));
+	// load the same CSV file back again
+	REQUIRE_NO_FAIL(con.Query("CREATE TABLE test3 (a INTEGER, b INTEGER);"));
 	result = con.Query("COPY test3 FROM '" + fs.JoinPath(csv_path, "test3.csv") + "';");
 	REQUIRE(CHECK_COLUMN(result, 0, {4000}));
-	result = con.Query("SELECT * FROM test3 ORDER BY 1 LIMIT 3 ");
+	result = con.Query("SELECT * FROM test3 ORDER BY 1 LIMIT 3;");
 	REQUIRE(CHECK_COLUMN(result, 0, {0, 1, 2}));
 	REQUIRE(CHECK_COLUMN(result, 1, {0, 1, 2}));
 
-	// Exporting selected columns from a table to a CSV.
-	result = con.Query("COPY test(a,c) to '" + fs.JoinPath(csv_path, "test4.csv") + "' (DELIMITER ',', HEADER false);");
+	// export selected columns from a table to a CSV file
+	result = con.Query("COPY test (a,c) TO '" + fs.JoinPath(csv_path, "test4.csv") + "' (DELIMITER ',', HEADER false);");
 	REQUIRE(CHECK_COLUMN(result, 0, {5000}));
 
-	// Importing CSV to Selected Columns
-	REQUIRE_NO_FAIL(con.Query("CREATE TABLE test4 (a INTEGER, b INTEGER,c VARCHAR(10));"));
-	result = con.Query("COPY test4(a,c) from '" + fs.JoinPath(csv_path, "test4.csv") + "' (DELIM ',', HEADER 0);");
+	// import selected columns from CSV file
+	REQUIRE_NO_FAIL(con.Query("CREATE TABLE test4 (a INTEGER, b INTEGER, c VARCHAR(10));"));
+	result = con.Query("COPY test4 (a,c) FROM '" + fs.JoinPath(csv_path, "test4.csv") + "' (DELIM ',', HEADER 0);");
 	REQUIRE(CHECK_COLUMN(result, 0, {5000}));
-	result = con.Query("SELECT * FROM test4 ORDER BY 1 LIMIT 3 ");
+	result = con.Query("SELECT * FROM test4 ORDER BY 1 LIMIT 3;");
 	REQUIRE(CHECK_COLUMN(result, 0, {0, 1, 2}));
 	REQUIRE(CHECK_COLUMN(result, 1, {Value(), Value(), Value()}));
 	REQUIRE(CHECK_COLUMN(result, 2, {" test", " test", " test"}));
 
 	// unsupported type for HEADER
-	REQUIRE_FAIL(
-	    con.Query("COPY test4(a,c) from '" + fs.JoinPath(csv_path, "test4.csv") + " ' (SEP ',', HEADER 0.2);"));
-	// empty sep
-	REQUIRE_FAIL(con.Query("COPY test4(a,c) from '" + fs.JoinPath(csv_path, "test4.csv") + " ' (SEP);"));
-	// number as separator
-	REQUIRE_FAIL(con.Query("COPY test4(a,c) from '" + fs.JoinPath(csv_path, "test4.csv") + " ' (SEP 1);"));
+	REQUIRE_FAIL(con.Query("COPY test4 (a,c) FROM '" + fs.JoinPath(csv_path, "test4.csv") + "' (SEP ',', HEADER 0.2);"));
+	// empty delimiter
+	REQUIRE_FAIL(con.Query("COPY test4 (a,c) FROM '" + fs.JoinPath(csv_path, "test4.csv") + "' (SEP);"));
+	// number as delimiter
+	REQUIRE_FAIL(con.Query("COPY test4 (a,c) FROM '" + fs.JoinPath(csv_path, "test4.csv") + "' (SEP 1);"));
 	// multiple format options
-	REQUIRE_FAIL(
-	    con.Query("COPY test4(a,c) from '" + fs.JoinPath(csv_path, "test4.csv") + "' (FORMAT 'csv', FORMAT 'json');"));
-	// number as escape character
-	REQUIRE_FAIL(con.Query("COPY test4(a,c) from '" + fs.JoinPath(csv_path, "test4.csv") + " ' (ESCAPE 1);"));
-	// no escape character
-	REQUIRE_FAIL(con.Query("COPY test4(a,c) from '" + fs.JoinPath(csv_path, "test4.csv") + " ' (ESCAPE);"));
-	// no quote character
-	REQUIRE_FAIL(con.Query("COPY test4(a,c) from '" + fs.JoinPath(csv_path, "test4.csv") + " ' (QUOTE);"));
-	// no format character
-	REQUIRE_FAIL(con.Query("COPY test4(a,c) from '" + fs.JoinPath(csv_path, "test4.csv") + " ' (FORMAT);"));
+	REQUIRE_FAIL(con.Query("COPY test4 (a,c) FROM '" + fs.JoinPath(csv_path, "test4.csv") + "' (FORMAT 'csv', FORMAT 'json');"));
+	// number as escape string
+	REQUIRE_FAIL(con.Query("COPY test4 (a,c) FROM '" + fs.JoinPath(csv_path, "test4.csv") + "' (ESCAPE 1);"));
+	// no escape string
+	REQUIRE_FAIL(con.Query("COPY test4 (a,c) FROM '" + fs.JoinPath(csv_path, "test4.csv") + "' (ESCAPE);"));
+	// number as quote string
+	REQUIRE_FAIL(con.Query("COPY test4 (a,c) FROM '" + fs.JoinPath(csv_path, "test4.csv") + "' (QUOTE 1);"));
+	// no quote string
+	REQUIRE_FAIL(con.Query("COPY test4 (a,c) FROM '" + fs.JoinPath(csv_path, "test4.csv") + "' (QUOTE);"));
+	// no format string
+	REQUIRE_FAIL(con.Query("COPY test4 (a,c) FROM '" + fs.JoinPath(csv_path, "test4.csv") + "' (FORMAT);"));
+	// encoding must not be empty and must have the correct parameter type and value
+	REQUIRE_FAIL(con.Query("COPY test4 (a,c) FROM '" + fs.JoinPath(csv_path, "test4.csv") + "' (ENCODING);"));
+	REQUIRE_FAIL(con.Query("COPY test4 (a,c) FROM '" + fs.JoinPath(csv_path, "test4.csv") + "' (ENCODING 42);"));
+	REQUIRE_FAIL(con.Query("COPY test4 (a,c) FROM '" + fs.JoinPath(csv_path, "test4.csv") + "' (ENCODING 'utf-42');"));
+	// don't allow for non-existant copy options
+	REQUIRE_FAIL(con.Query("COPY test4 (a,c) FROM '" + fs.JoinPath(csv_path, "test4.csv") + "' (MAGIC '42');"));
 
 	// use a different delimiter
 	auto pipe_csv = fs.JoinPath(csv_path, "test_pipe.csv");
@@ -127,12 +133,19 @@ TEST_CASE("Test copy statement", "[copy]") {
 	}
 	from_csv_file_pipe.close();
 
+	// create new table
 	REQUIRE_NO_FAIL(con.Query("DROP TABLE test;"));
-	REQUIRE_NO_FAIL(con.Query("CREATE TABLE test (a INTEGER, b INTEGER,c VARCHAR(10));"));
-	result = con.Query("COPY test FROM '" + pipe_csv + "' (SEPARATOR '|')");
+	REQUIRE_NO_FAIL(con.Query("CREATE TABLE test (a INTEGER, b INTEGER, c VARCHAR(10));"));
+	result = con.Query("COPY test FROM '" + pipe_csv + "' (SEPARATOR '|');");
 	REQUIRE(CHECK_COLUMN(result, 0, {10}));
 
-	// test null
+	// throw exception if a line contains too many values
+	ofstream csv_too_many_values_file(fs.JoinPath(csv_path, "too_many_values.csv"));
+	csv_too_many_values_file << "1,2,3,4" << endl;
+	csv_too_many_values_file.close();
+	REQUIRE_FAIL(con.Query("COPY test FROM '" + fs.JoinPath(csv_path, "too_many_values.csv") + "';"));
+
+	// test default null string
 	auto null_csv = fs.JoinPath(csv_path, "null.csv");
 	ofstream from_csv_file_null(null_csv);
 	for (int i = 0; i < 1; i++)
@@ -141,7 +154,7 @@ TEST_CASE("Test copy statement", "[copy]") {
 	result = con.Query("COPY test FROM '" + null_csv + "' DELIMITER '|';");
 	REQUIRE(CHECK_COLUMN(result, 0, {1}));
 
-	// test invalid UTF8
+	// test invalid UTF-8
 	auto invalid_utf_csv = fs.JoinPath(csv_path, "invalid_utf.csv");
 	ofstream from_csv_file_utf(invalid_utf_csv);
 	for (int i = 0; i < 1; i++)
@@ -153,7 +166,7 @@ TEST_CASE("Test copy statement", "[copy]") {
 	ofstream empty_file(fs.JoinPath(csv_path, "empty.csv"));
 	empty_file.close();
 
-	REQUIRE_NO_FAIL(con.Query("CREATE TABLE empty_table (a INTEGER, b INTEGER,c VARCHAR(10));"));
+	REQUIRE_NO_FAIL(con.Query("CREATE TABLE empty_table (a INTEGER, b INTEGER, c VARCHAR(10));"));
 	result = con.Query("COPY empty_table FROM '" + fs.JoinPath(csv_path, "empty.csv") + "';");
 	REQUIRE(CHECK_COLUMN(result, 0, {0}));
 
@@ -161,23 +174,425 @@ TEST_CASE("Test copy statement", "[copy]") {
 	ofstream unterminated_quotes_file(fs.JoinPath(csv_path, "unterminated.csv"));
 	unterminated_quotes_file << "\"hello

 world
";
 	unterminated_quotes_file.close();
-
 	REQUIRE_NO_FAIL(con.Query("CREATE TABLE unterminated (a VARCHAR);"));
 	REQUIRE_FAIL(con.Query("COPY unterminated FROM '" + fs.JoinPath(csv_path, "unterminated.csv") + "';"));
 
-	// 1024 rows
+	// 1024 rows (vector size)
 	ofstream csv_vector_size(fs.JoinPath(csv_path, "vsize.csv"));
 	for (int i = 0; i < 1024; i++) {
 		csv_vector_size << i << "," << i << ", test" << endl;
 	}
 	csv_vector_size.close();
 
-	// Loading CSV into a table
-	REQUIRE_NO_FAIL(con.Query("CREATE TABLE vsize (a INTEGER, b INTEGER,c VARCHAR(10));"));
+	// load CSV file into a table
+	REQUIRE_NO_FAIL(con.Query("CREATE TABLE vsize (a INTEGER, b INTEGER, c VARCHAR(10));"));
 	result = con.Query("COPY vsize FROM '" + fs.JoinPath(csv_path, "vsize.csv") + "';");
 	REQUIRE(CHECK_COLUMN(result, 0, {1024}));
 }
 
+TEST_CASE("Test NULL option of copy statement", "[copy]") {
+	unique_ptr<QueryResult> result;
+	DuckDB db(nullptr);
+	Connection con(db);
+
+	auto csv_path = GetCSVPath();
+
+	// generate CSV file with default delimiter
+	ofstream from_csv_file(fs.JoinPath(csv_path, "test_null_option.csv"));
+	for (int i = 0; i < 3; i++) {
+		from_csv_file << i << ",,\"test\",null" << endl;
+	}
+	from_csv_file.close();
+
+	// create a table
+	REQUIRE_NO_FAIL(con.Query("CREATE TABLE test_null_option (col_a INTEGER, col_b VARCHAR(10), col_c VARCHAR(10), col_d VARCHAR(10));"));
+	
+	// test COPY ... FROM ... 
+
+	// implicitly using default NULL value
+	result = con.Query("COPY test_null_option FROM '" + fs.JoinPath(csv_path, "test_null_option.csv") + "';");
+	REQUIRE(CHECK_COLUMN(result, 0, {3}));
+	result = con.Query("SELECT * FROM test_null_option ORDER BY 1 LIMIT 3;");
+	REQUIRE(CHECK_COLUMN(result, 0, {0, 1, 2}));
+	REQUIRE(CHECK_COLUMN(result, 1, {Value(), Value(), Value()}));
+	REQUIRE(CHECK_COLUMN(result, 2, {"test", "test", "test"}));
+	REQUIRE(CHECK_COLUMN(result, 3, {"null", "null", "null"}));
+	REQUIRE_NO_FAIL(con.Query("DELETE FROM test_null_option;"));
+
+	// explicitly using default NULL value
+	result = con.Query("COPY test_null_option FROM '" + fs.JoinPath(csv_path, "test_null_option.csv") + "' (NULL '');");
+	REQUIRE(CHECK_COLUMN(result, 0, {3}));
+	result = con.Query("SELECT * FROM test_null_option ORDER BY 1 LIMIT 3;");
+	REQUIRE(CHECK_COLUMN(result, 0, {0, 1, 2}));
+	REQUIRE(CHECK_COLUMN(result, 1, {Value(), Value(), Value()}));
+	REQUIRE(CHECK_COLUMN(result, 2, {"test", "test", "test"}));
+	REQUIRE(CHECK_COLUMN(result, 3, {"null", "null", "null"}));
+	REQUIRE_NO_FAIL(con.Query("DELETE FROM test_null_option;"));
+
+	// make sure a quoted null string is interpreted as a null value
+	result = con.Query("COPY test_null_option FROM '" + fs.JoinPath(csv_path, "test_null_option.csv") + "' (NULL 'test');");
+	REQUIRE(CHECK_COLUMN(result, 0, {3}));
+	result = con.Query("SELECT * FROM test_null_option ORDER BY 1 LIMIT 3;");
+	REQUIRE(CHECK_COLUMN(result, 0, {0, 1, 2}));
+	REQUIRE(CHECK_COLUMN(result, 1, {"", "", ""}));
+	REQUIRE(CHECK_COLUMN(result, 2, {Value(), Value(), Value()}));
+	REQUIRE(CHECK_COLUMN(result, 3, {"null", "null", "null"}));
+	REQUIRE_NO_FAIL(con.Query("DELETE FROM test_null_option;"));
+
+	// setting specific NULL value
+	result = con.Query("COPY test_null_option FROM '" + fs.JoinPath(csv_path, "test_null_option.csv") + "' (NULL 'null');");
+	REQUIRE(CHECK_COLUMN(result, 0, {3}));
+	result = con.Query("SELECT * FROM test_null_option ORDER BY 1 LIMIT 3;");
+	REQUIRE(CHECK_COLUMN(result, 0, {0, 1, 2}));
+	REQUIRE(CHECK_COLUMN(result, 1, {"", "", ""}));
+	REQUIRE(CHECK_COLUMN(result, 2, {"test", "test", "test"}));
+	REQUIRE(CHECK_COLUMN(result, 3, {Value(), Value(), Value()}));
+
+	// invalid parameter type
+	REQUIRE_FAIL(con.Query("COPY test_null_option FROM '" + fs.JoinPath(csv_path, "test_null_option.csv") + "' (NULL null);"));
+	
+	// delimiter must not appear in the NULL specification
+	REQUIRE_FAIL(con.Query("COPY test_null_option FROM '" + fs.JoinPath(csv_path, "test_null_option.csv") + "' (NULL 'null,');"));
+	REQUIRE_FAIL(con.Query("COPY test_null_option FROM '" + fs.JoinPath(csv_path, "test_null_option.csv") + "' (DELIMITER 'null', NULL 'null');"));
+	REQUIRE_FAIL(con.Query("COPY test_null_option FROM '" + fs.JoinPath(csv_path, "test_null_option.csv") + "' (DELIMITER 'null', NULL 'nu');"));
+
+	// no parameter type
+	REQUIRE_FAIL(con.Query("COPY test_null_option FROM '" + fs.JoinPath(csv_path, "test_null_option.csv") + "' (NULL);"));
+
+	// empty integer column with non-default NULL string
+	REQUIRE_NO_FAIL(con.Query("CREATE TABLE test_null_option_2 (col_a INTEGER, col_b INTEGER, col_c VARCHAR(10), col_d VARCHAR(10));"));
+	REQUIRE_FAIL(con.Query("COPY test_null_option_2 FROM '" + fs.JoinPath(csv_path, "test_null_option.csv") + "' (NULL 'null');"));
+
+	// test COPY ... TO ...
+
+	// implicitly using default NULL value
+	result = con.Query("COPY test_null_option TO '" + fs.JoinPath(csv_path, "test_null_option_2.csv") + "';");
+	REQUIRE(CHECK_COLUMN(result, 0, {3}));
+	REQUIRE_NO_FAIL(con.Query("DELETE FROM test_null_option;"));
+	result = con.Query("COPY test_null_option FROM '" + fs.JoinPath(csv_path, "test_null_option_2.csv") + "';");
+	REQUIRE(CHECK_COLUMN(result, 0, {3}));
+	result = con.Query("SELECT * FROM test_null_option ORDER BY 1 LIMIT 3;");
+	REQUIRE(CHECK_COLUMN(result, 0, {0, 1, 2}));
+	REQUIRE(CHECK_COLUMN(result, 1, {"", "", ""}));
+	REQUIRE(CHECK_COLUMN(result, 2, {"test", "test", "test"}));
+	REQUIRE(CHECK_COLUMN(result, 3, {Value(), Value(), Value()}));
+
+	// explicitly using default NULL value
+	result = con.Query("COPY test_null_option TO '" + fs.JoinPath(csv_path, "test_null_option_3.csv") + "' (NULL '');");
+	REQUIRE(CHECK_COLUMN(result, 0, {3}));
+	REQUIRE_NO_FAIL(con.Query("DELETE FROM test_null_option;"));
+	result = con.Query("COPY test_null_option FROM '" + fs.JoinPath(csv_path, "test_null_option_3.csv") + "' (NULL '');");
+	REQUIRE(CHECK_COLUMN(result, 0, {3}));
+	result = con.Query("SELECT * FROM test_null_option ORDER BY 1 LIMIT 3;");
+	REQUIRE(CHECK_COLUMN(result, 0, {0, 1, 2}));
+	REQUIRE(CHECK_COLUMN(result, 1, {"", "", ""}));
+	REQUIRE(CHECK_COLUMN(result, 2, {"test", "test", "test"}));
+	REQUIRE(CHECK_COLUMN(result, 3, {Value(), Value(), Value()}));
+
+	// setting specific NULL value
+	result = con.Query("COPY test_null_option TO '" + fs.JoinPath(csv_path, "test_null_option_4.csv") + "' (NULL 'null');");
+	REQUIRE(CHECK_COLUMN(result, 0, {3}));
+	REQUIRE_NO_FAIL(con.Query("DELETE FROM test_null_option;"));
+	result = con.Query("COPY test_null_option FROM '" + fs.JoinPath(csv_path, "test_null_option_4.csv") + "' (NULL 'null');");
+	REQUIRE(CHECK_COLUMN(result, 0, {3}));
+	result = con.Query("SELECT * FROM test_null_option ORDER BY 1 LIMIT 3;");
+	REQUIRE(CHECK_COLUMN(result, 0, {0, 1, 2}));
+	REQUIRE(CHECK_COLUMN(result, 1, {"", "", ""}));
+	REQUIRE(CHECK_COLUMN(result, 2, {"test", "test", "test"}));
+	REQUIRE(CHECK_COLUMN(result, 3, {Value(), Value(), Value()}));
+}
+
+TEST_CASE("Test force_quote and force_not_null", "[copy]") {
+	unique_ptr<QueryResult> result;
+	DuckDB db(nullptr);
+	Connection con(db);
+
+	auto csv_path = GetCSVPath();
+
+	// generate CSV file with default delimiter
+	ofstream from_csv_file(fs.JoinPath(csv_path, "test.csv"));
+	from_csv_file << 8 << ",test,tea" << endl;
+	for (int i = 0; i < 2; i++) {
+		from_csv_file << i << ",,test" << endl;
+	}
+	from_csv_file.close();
+
+	// generate another CSV file
+	ofstream from_csv_file_2(fs.JoinPath(csv_path, "test_2.csv"));
+	from_csv_file_2 << ",test,tea" << endl;
+	for (int i = 0; i < 2; i++) {
+		from_csv_file_2 << i << ",,test" << endl;
+	}
+	from_csv_file_2.close();
+
+	// create a table
+	REQUIRE_NO_FAIL(con.Query("CREATE TABLE test (col_a INTEGER, col_b VARCHAR(10), col_c VARCHAR(10));"));
+
+	result = con.Query("COPY test FROM '" + fs.JoinPath(csv_path, "test.csv") + "';");
+	REQUIRE(CHECK_COLUMN(result, 0, {3}));
+
+	// test FORCE_QUOTE *
+	result = con.Query("COPY test TO '" + fs.JoinPath(csv_path, "test_star.csv") + "' (FORCE_QUOTE *);");
+	REQUIRE(CHECK_COLUMN(result, 0, {3}));
+
+	vector<string> lines;
+	string line;
+	ifstream test_star_file (fs.JoinPath(csv_path, "test_star.csv"));
+	if (test_star_file.is_open()) {
+		while (getline(test_star_file,line)) {
+			lines.push_back(line);
+		}
+		test_star_file.close();
+	} else {
+		throw Exception("Unable to open file: " + fs.JoinPath(csv_path, "test_star.csv"));
+	};
+	REQUIRE(lines[0] == "\"8\",\"test\",\"tea\"");
+	REQUIRE(lines[1] == "\"0\",,\"test\"");
+	REQUIRE(lines[2] == "\"1\",,\"test\"");
+
+	// test FORCE_QUOTE with specific columns and non-default quote character and non-default null character
+	result = con.Query("COPY test TO '" + fs.JoinPath(csv_path, "test_chosen_columns.csv") + "' (FORCE_QUOTE (col_a, col_c), QUOTE 't', NULL 'tea');");
+	REQUIRE(CHECK_COLUMN(result, 0, {3}));
+
+	ifstream test_columns_file (fs.JoinPath(csv_path, "test_chosen_columns.csv"));
+	if (test_columns_file.is_open()) {
+		while (getline(test_columns_file,line)) {
+			lines.push_back(line);
+		}
+		test_columns_file.close();
+	} else {
+		throw Exception("Unable to open file: " + fs.JoinPath(csv_path, "test_chosen_columns.csv"));
+	};
+	REQUIRE(lines[3] == "t8t,tttesttt,ttteat");
+	REQUIRE(lines[4] == "t0t,tea,tttesttt");
+	REQUIRE(lines[5] == "t1t,tea,tttesttt");
+
+	// test FORCE_QUOTE with reordered columns
+	result = con.Query("COPY test (col_b, col_c, col_a) TO '" + fs.JoinPath(csv_path, "test_reorder.csv") + "' (FORCE_QUOTE (col_c, col_b), NULL 'test');");
+	REQUIRE(CHECK_COLUMN(result, 0, {3}));
+
+	ifstream test_reorder_file (fs.JoinPath(csv_path, "test_reorder.csv"));
+	if (test_reorder_file.is_open()) {
+		while (getline(test_reorder_file,line)) {
+			lines.push_back(line);
+		}
+		test_reorder_file.close();
+	} else {
+		throw Exception("Unable to open file: " + fs.JoinPath(csv_path, "test_reorder.csv"));
+	};
+	REQUIRE(lines[6] == "\"test\",\"tea\",8");
+	REQUIRE(lines[7] == "test,\"test\",0");
+	REQUIRE(lines[8] == "test,\"test\",1");
+
+	// test using a column in FORCE_QUOTE that is not set as output, but that is a column of the table
+	REQUIRE_FAIL(con.Query("COPY test (col_b, col_a) TO '" + fs.JoinPath(csv_path, "test_reorder.csv") + "' (FORCE_QUOTE (col_c, col_b));"));
+	// test using a column in FORCE_QUOTE that is not a column of the table
+	REQUIRE_FAIL(con.Query("COPY test TO '" + fs.JoinPath(csv_path, "test_reorder.csv") + "' (FORCE_QUOTE (col_c, col_d));"));
+	// FORCE_QUOTE is only supported in COPY ... TO ...
+	REQUIRE_FAIL(con.Query("COPY test FROM '" + fs.JoinPath(csv_path, "test_reorder.csv") + "' (FORCE_QUOTE (col_c, col_d));"));
+	// FORCE_QUOTE must not be empty and must have the correct parameter type
+	REQUIRE_FAIL(con.Query("COPY test TO '" + fs.JoinPath(csv_path, "test_reorder.csv") + "' (FORCE_QUOTE);"));
+	REQUIRE_FAIL(con.Query("COPY test TO '" + fs.JoinPath(csv_path, "test_reorder.csv") + "' (FORCE_QUOTE 42);"));
+
+	REQUIRE_NO_FAIL(con.Query("DELETE FROM test;"));
+
+	// test FORCE_NOT_NULL
+
+	// test if null value is correctly converted into string
+	result = con.Query("COPY test FROM '" + fs.JoinPath(csv_path, "test_star.csv") + "' (FORCE_NOT_NULL (col_b), NULL 'test');");
+	REQUIRE(CHECK_COLUMN(result, 0, {3}));
+	result = con.Query("SELECT * FROM test ORDER BY 1;");
+	REQUIRE(CHECK_COLUMN(result, 0, {0, 1, 8}));
+	REQUIRE(CHECK_COLUMN(result, 1, {"", "", "test"}));
+	REQUIRE(CHECK_COLUMN(result, 2, {Value(), Value(), "tea"}));
+	REQUIRE_NO_FAIL(con.Query("DELETE FROM test;"));
+
+	// test if null value is correctly converted into string if explicit columns are used
+	result = con.Query("COPY test (col_a, col_b, col_c) FROM '" + fs.JoinPath(csv_path, "test_star.csv") + "' (FORCE_NOT_NULL (col_b), NULL 'test');");
+	REQUIRE(CHECK_COLUMN(result, 0, {3}));
+	result = con.Query("SELECT * FROM test ORDER BY 1;");
+	REQUIRE(CHECK_COLUMN(result, 0, {0, 1, 8}));
+	REQUIRE(CHECK_COLUMN(result, 1, {"", "", "test"}));
+	REQUIRE(CHECK_COLUMN(result, 2, {Value(), Value(), "tea"}));
+
+	// FORCE_NOT_NULL is only supported in COPY ... FROM ...
+	REQUIRE_FAIL(result = con.Query("COPY test TO '" + fs.JoinPath(csv_path, "test_star.csv") + "' (FORCE_NOT_NULL (col_b), NULL 'test');"));
+	// FORCE_NOT_NULL must not be empty and must have the correct parameter type
+	REQUIRE_FAIL(result = con.Query("COPY test FROM '" + fs.JoinPath(csv_path, "test_star.csv") + "' (FORCE_NOT_NULL, NULL 'test');"));
+	REQUIRE_FAIL(result = con.Query("COPY test FROM '" + fs.JoinPath(csv_path, "test_star.csv") + "' (FORCE_NOT_NULL 42, NULL 'test');"));
+	// test using a column in FORCE_NOT_NULL that is not set as output, but that is a column of the table
+	REQUIRE_FAIL(con.Query("COPY test (col_b, col_a) FROM '" + fs.JoinPath(csv_path, "test_reorder.csv") + "' (FORCE_NOT_NULL (col_c, col_b));"));
+	// test using a column in FORCE_NOT_NULL that is not a column of the table
+	REQUIRE_FAIL(con.Query("COPY test FROM '" + fs.JoinPath(csv_path, "test_reorder.csv") + "' (FORCE_NOT_NULL (col_c, col_d));"));
+
+	// FORCE_NOT_NULL fails on integer columns
+	// FIXME: only working if test cases are run individually, not working if whole [copy] test cases are run at once
+	REQUIRE_FAIL(con.Query("COPY test FROM '" + fs.JoinPath(csv_path, "test_2.csv") + "' (FORCE_NOT_NULL (col_a));"));
+}
+
+TEST_CASE("Test copy statement with unicode delimiter/quote/escape", "[copy]") {
+	unique_ptr<QueryResult> result;
+	DuckDB db(nullptr);
+	Connection con(db);
+
+	auto csv_path = GetCSVPath();
+
+	// generate CSV file with unicode (> one-byte) delimiter/quote/escape
+	ofstream from_csv_file1(fs.JoinPath(csv_path, "multi_char.csv"));
+	from_csv_file1 << 0 << "🦆ˮdu˧˧🦆ckˮ🦆ˮd˧ˮ˧ˮu🦆ckˮ🦆duck" << endl;
+	from_csv_file1 << 1 << "🦆ˮdou˧ˮbleˮ🦆🦆duck" << endl;
+	from_csv_file1 << 2 << "🦆🦆🦆" << endl;
+	from_csv_file1 << 3 << "🦆duck inv˧asion🦆🦆" << endl;
+	from_csv_file1.close();
+
+	// generate CSV file with unicode (> one-byte) delimiter/quote/escape that exceeds the buffer size a few times
+	ofstream from_csv_file2(fs.JoinPath(csv_path, "multi_char_buffer_exhausted.csv"));
+	int64_t sum = 0;
+	for (int i = 0; i < 16384; i++) {
+		if (i % 2 == 0) {
+			from_csv_file2 << i << "🦆ˮ🦆dˮ🦆ˮd˧ˮ🦆ˮ🦆d˧" << endl;
+		} else {
+			from_csv_file2 << i << "🦆ˮ˧ˮ˧ˮ˧ˮˮ🦆˧˧🦆	test test	🦆" << endl;
+		}
+		sum += i;
+	}
+	from_csv_file2.close();
+
+	// generate CSV file with one-byte delimiter/quote/escape
+	ofstream from_csv_file3(fs.JoinPath(csv_path, "one_byte_char.csv"));
+	for (int i = 0; i < 3; i++) {
+		from_csv_file3 << i << ",'du''ck','''''du,ck',duck" << endl;
+	}
+	from_csv_file3.close();
+
+	// generate CSV file with unterminated quotes
+	ofstream from_csv_file4(fs.JoinPath(csv_path, "unterminated_quotes.csv"));
+	for (int i = 0; i < 3; i++) {
+		from_csv_file4 << i << ",duck,\"duck" << endl;
+	}
+	from_csv_file4.close();
+
+	// generate CSV file with quotes that start midway in the value
+	ofstream from_csv_file5(fs.JoinPath(csv_path, "unterminated_quotes_2.csv"));
+	for (int i = 0; i < 3; i++) {
+		from_csv_file5 << i << ",du\"ck,duck" << endl;
+	}
+	from_csv_file5.close();
+
+	// generate a CSV file with a very long string exceeding the buffer midway in an escape sequence (delimiter and escape share substrings)
+	ofstream from_csv_file6(fs.JoinPath(csv_path, "shared_substrings.csv"));
+	string big_string_a(16370, 'a');
+	from_csv_file6 << big_string_a << "AAA\"aaaaaaaaAAB\"\"" << endl;
+	from_csv_file6.close();
+
+	// create three tables for testing
+	REQUIRE_NO_FAIL(con.Query("CREATE TABLE test_unicode_1 (col_a INTEGER, col_b VARCHAR(10), col_c VARCHAR(10), col_d VARCHAR(10));"));
+	REQUIRE_NO_FAIL(con.Query("CREATE TABLE test_unicode_2 (col_a INTEGER, col_b VARCHAR(10), col_c VARCHAR(10), col_d VARCHAR(10));"));
+	REQUIRE_NO_FAIL(con.Query("CREATE TABLE test_unicode_3 (col_a INTEGER, col_b VARCHAR(10), col_c VARCHAR(10), col_d VARCHAR(10));"));
+	REQUIRE_NO_FAIL(con.Query("CREATE TABLE test_unicode_4 (col_a VARCHAR, col_b VARCHAR);"));
+
+	// throw error if unterminated quotes are detected
+	REQUIRE_FAIL(con.Query("COPY test_unicode_1 FROM '" + fs.JoinPath(csv_path, "unterminated_quotes.csv") + "';"));
+	REQUIRE_FAIL(con.Query("COPY test_unicode_1 FROM '" + fs.JoinPath(csv_path, "unterminated_quotes_2.csv") + "';"));
+
+	// test COPY ... FROM ...
+
+	// test unicode delimiter/quote/escape
+	result = con.Query("COPY test_unicode_1 FROM '" + fs.JoinPath(csv_path, "multi_char.csv") + "' (DELIMITER '🦆', QUOTE 'ˮ', ESCAPE '˧');");
+	REQUIRE(CHECK_COLUMN(result, 0, {4}));
+	result = con.Query("SELECT * FROM test_unicode_1 ORDER BY 1 LIMIT 4;");
+	REQUIRE(CHECK_COLUMN(result, 0, {0, 1, 2, 3}));
+	REQUIRE(CHECK_COLUMN(result, 1, {"du˧🦆ck", "douˮble", Value(), "duck inv˧asion"}));
+	REQUIRE(CHECK_COLUMN(result, 2, {"dˮˮu🦆ck", Value(), Value(), Value()}));
+	REQUIRE(CHECK_COLUMN(result, 3, {"duck", "duck", Value(), Value()}));
+
+	// test unicode delimiter/quote/escape that exceeds the buffer size a few times
+	result = con.Query("COPY test_unicode_2 FROM '" + fs.JoinPath(csv_path, "multi_char_buffer_exhausted.csv") + "' (DELIMITER '🦆', QUOTE 'ˮ', ESCAPE '˧');");
+	REQUIRE(CHECK_COLUMN(result, 0, {16384}));
+	result = con.Query("SELECT * FROM test_unicode_2 ORDER BY 1 LIMIT 4;");
+	REQUIRE(CHECK_COLUMN(result, 0, {0, 1, 2, 3}));
+	REQUIRE(CHECK_COLUMN(result, 1, {"🦆d", "ˮˮˮ", "🦆d", "ˮˮˮ"}));
+	REQUIRE(CHECK_COLUMN(result, 2, {"dˮ🦆", "˧˧", "dˮ🦆", "˧˧"}));
+	REQUIRE(CHECK_COLUMN(result, 3, {"d˧", "	test test	", "d˧", "	test test	"}));
+	result = con.Query("SELECT SUM(col_a) FROM test_unicode_2;");
+	REQUIRE(CHECK_COLUMN(result, 0, {Value::BIGINT(sum)}));
+
+	// test one-byte delimiter/quote/escape
+	result = con.Query("COPY test_unicode_3 FROM '" + fs.JoinPath(csv_path, "one_byte_char.csv") + "' (QUOTE '''');");
+	REQUIRE(CHECK_COLUMN(result, 0, {3}));
+	result = con.Query("SELECT * FROM test_unicode_3 ORDER BY 1 LIMIT 3;");
+	REQUIRE(CHECK_COLUMN(result, 0, {0, 1, 2}));
+	REQUIRE(CHECK_COLUMN(result, 1, {"du'ck", "du'ck", "du'ck"}));
+	REQUIRE(CHECK_COLUMN(result, 2, {"''du,ck", "''du,ck", "''du,ck"}));
+	REQUIRE(CHECK_COLUMN(result, 3, {"duck", "duck", "duck"}));
+
+	// test correct shared substring behavior at buffer borders
+	result = con.Query("COPY test_unicode_4 FROM '" + fs.JoinPath(csv_path, "shared_substrings.csv") + "' (DELIMITER 'AAA', ESCAPE 'AAB');");
+	REQUIRE(CHECK_COLUMN(result, 0, {1}));
+	result = con.Query("SELECT * FROM test_unicode_4;");
+	REQUIRE(CHECK_COLUMN(result, 0, {big_string_a}));
+	REQUIRE(CHECK_COLUMN(result, 1, {"aaaaaaaa\""}));
+
+	// quote and escape must not be empty
+	REQUIRE_FAIL(con.Query("COPY test_unicode_1 FROM '" + fs.JoinPath(csv_path, "one_byte_char.csv") + "' (DELIMITER '🦆', QUOTE '');"));
+	REQUIRE_FAIL(con.Query("COPY test_unicode_1 FROM '" + fs.JoinPath(csv_path, "one_byte_char.csv") + "' (DELIMITER '🦆', ESCAPE '');"));
+
+	// test same string for delimiter and quote
+	REQUIRE_FAIL(con.Query("COPY test_unicode_1 FROM '" + fs.JoinPath(csv_path, "one_byte_char.csv") + "' (DELIMITER '🦆', QUOTE '🦆');"));
+
+	// escape and quote cannot be substrings of each other
+	REQUIRE_FAIL(con.Query("COPY test_unicode_1 FROM '" + fs.JoinPath(csv_path, "one_byte_char.csv") + "' (ESCAPE 'du', QUOTE 'duck');"));
+	REQUIRE_FAIL(con.Query("COPY test_unicode_1 FROM '" + fs.JoinPath(csv_path, "one_byte_char.csv") + "' (ESCAPE 'duck', QUOTE 'du');"));
+
+	// delimiter and quote cannot be substrings of each other
+	REQUIRE_FAIL(con.Query("COPY test_unicode_1 FROM '" + fs.JoinPath(csv_path, "one_byte_char.csv") + "' (DELIMITER 'du', QUOTE 'duck');"));
+	REQUIRE_FAIL(con.Query("COPY test_unicode_1 FROM '" + fs.JoinPath(csv_path, "one_byte_char.csv") + "' (DELIMITER 'duck', QUOTE 'du');"));
+
+	// delimiter and escape cannot be substrings of each other
+	REQUIRE_FAIL(con.Query("COPY test_unicode_1 FROM '" + fs.JoinPath(csv_path, "one_byte_char.csv") + "' (DELIMITER 'AA', ESCAPE 'AAAA');"));
+	REQUIRE_FAIL(con.Query("COPY test_unicode_1 FROM '" + fs.JoinPath(csv_path, "one_byte_char.csv") + "' (DELIMITER 'AAAA', ESCAPE 'AA');"));
+
+	// COPY ... TO ...
+
+	// test unicode delimiter/quote/escape
+	result = con.Query("COPY test_unicode_1 TO '" + fs.JoinPath(csv_path, "test_unicode_1.csv") + "' (DELIMITER '🦆', QUOTE 'ˮ', ESCAPE '˧');");
+	REQUIRE(CHECK_COLUMN(result, 0, {4}));
+	REQUIRE_NO_FAIL(con.Query("DELETE FROM test_unicode_1;"));
+	result = con.Query("COPY test_unicode_1 FROM '" + fs.JoinPath(csv_path, "test_unicode_1.csv") + "' (DELIMITER '🦆', QUOTE 'ˮ', ESCAPE '˧');");
+	REQUIRE(CHECK_COLUMN(result, 0, {4}));
+	result = con.Query("SELECT * FROM test_unicode_1 ORDER BY 1 LIMIT 4;");
+	REQUIRE(CHECK_COLUMN(result, 0, {0, 1, 2, 3}));
+	REQUIRE(CHECK_COLUMN(result, 1, {"du˧🦆ck", "douˮble", Value(), "duck inv˧asion"}));
+	REQUIRE(CHECK_COLUMN(result, 2, {"dˮˮu🦆ck", Value(), Value(), Value()}));
+	REQUIRE(CHECK_COLUMN(result, 3, {"duck", "duck", Value(), Value()}));
+
+	// test unicode delimiter/quote/escape
+	result = con.Query("COPY test_unicode_2 TO '" + fs.JoinPath(csv_path, "test_unicode_2.csv") + "' (DELIMITER '🦆', QUOTE 'ˮ', ESCAPE '˧');");
+	REQUIRE(CHECK_COLUMN(result, 0, {16384}));
+	REQUIRE_NO_FAIL(con.Query("DELETE FROM test_unicode_2;"));
+	result = con.Query("COPY test_unicode_2 FROM '" + fs.JoinPath(csv_path, "test_unicode_2.csv") + "' (DELIMITER '🦆', QUOTE 'ˮ', ESCAPE '˧');");
+	REQUIRE(CHECK_COLUMN(result, 0, {16384}));
+	result = con.Query("SELECT * FROM test_unicode_2 ORDER BY 1 LIMIT 4;");
+	REQUIRE(CHECK_COLUMN(result, 0, {0, 1, 2, 3}));
+	REQUIRE(CHECK_COLUMN(result, 1, {"🦆d", "ˮˮˮ", "🦆d", "ˮˮˮ"}));
+	REQUIRE(CHECK_COLUMN(result, 2, {"dˮ🦆", "˧˧", "dˮ🦆", "˧˧"}));
+	REQUIRE(CHECK_COLUMN(result, 3, {"d˧", "	test test	", "d˧", "	test test	"}));
+	result = con.Query("SELECT SUM(col_a) FROM test_unicode_2;");
+	REQUIRE(CHECK_COLUMN(result, 0, {Value::BIGINT(sum)}));
+
+	// test one-byte delimiter/quote/escape
+	result = con.Query("COPY test_unicode_3 TO '" + fs.JoinPath(csv_path, "test_unicode_3.csv") + "' (QUOTE '''');");
+	REQUIRE(CHECK_COLUMN(result, 0, {3}));
+	REQUIRE_NO_FAIL(con.Query("DELETE FROM test_unicode_3;"));
+	result = con.Query("COPY test_unicode_3 FROM '" + fs.JoinPath(csv_path, "test_unicode_3.csv") + "' (QUOTE '''');");
+	REQUIRE(CHECK_COLUMN(result, 0, {3}));
+	result = con.Query("SELECT * FROM test_unicode_3 ORDER BY 1 LIMIT 3;");
+	REQUIRE(CHECK_COLUMN(result, 0, {0, 1, 2}));
+	REQUIRE(CHECK_COLUMN(result, 1, {"du'ck", "du'ck", "du'ck"}));
+	REQUIRE(CHECK_COLUMN(result, 2, {"''du,ck", "''du,ck", "''du,ck"}));
+	REQUIRE(CHECK_COLUMN(result, 3, {"duck", "duck", "duck"}));
+}
+
 TEST_CASE("Test copy statement with file overwrite", "[copy]") {
 	unique_ptr<QueryResult> result;
 	DuckDB db(nullptr);
@@ -193,7 +608,7 @@ TEST_CASE("Test copy statement with file overwrite", "[copy]") {
 	REQUIRE(CHECK_COLUMN(result, 0, {1, 2, 3}));
 	REQUIRE(CHECK_COLUMN(result, 1, {"hello", "world ", " xx"}));
 
-	// copy to the file
+	// copy to the CSV file
 	result = con.Query("COPY test TO '" + fs.JoinPath(csv_path, "test.csv") + "';");
 	REQUIRE(CHECK_COLUMN(result, 0, {3}));
 
@@ -202,7 +617,7 @@ TEST_CASE("Test copy statement with file overwrite", "[copy]") {
 	REQUIRE(CHECK_COLUMN(result, 0, {3}));
 
 	// reload the data from the file: it should only have three rows
-	REQUIRE_NO_FAIL(con.Query("DELETE FROM test"));
+	REQUIRE_NO_FAIL(con.Query("DELETE FROM test;"));
 
 	result = con.Query("COPY test FROM '" + fs.JoinPath(csv_path, "test.csv") + "';");
 	REQUIRE(CHECK_COLUMN(result, 0, {3}));
@@ -219,6 +634,7 @@ TEST_CASE("Test copy statement with default values", "[copy]") {
 
 	auto csv_path = GetCSVPath();
 
+	// create a file only consisting of integers
 	ofstream from_csv_file(fs.JoinPath(csv_path, "test.csv"));
 	int64_t expected_sum_a = 0;
 	int64_t expected_sum_c = 0;
@@ -230,15 +646,14 @@ TEST_CASE("Test copy statement with default values", "[copy]") {
 	}
 	from_csv_file.close();
 
-	// Loading CSV into a table
+	// load CSV file into a table
 	REQUIRE_NO_FAIL(con.Query("CREATE TABLE test (a INTEGER, b VARCHAR DEFAULT('hello'), c INTEGER DEFAULT(3+4));"));
 	result = con.Query("COPY test (a) FROM '" + fs.JoinPath(csv_path, "test.csv") + "';");
 	REQUIRE(CHECK_COLUMN(result, 0, {5000}));
 	result = con.Query("COPY test (c) FROM '" + fs.JoinPath(csv_path, "test.csv") + "';");
 	REQUIRE(CHECK_COLUMN(result, 0, {5000}));
 
-	result =
-	    con.Query("SELECT COUNT(a), COUNT(b), COUNT(c), MIN(LENGTH(b)), MAX(LENGTH(b)), SUM(a), SUM(c) FROM test;");
+	result = con.Query("SELECT COUNT(a), COUNT(b), COUNT(c), MIN(LENGTH(b)), MAX(LENGTH(b)), SUM(a), SUM(c) FROM test;");
 	REQUIRE(CHECK_COLUMN(result, 0, {5000}));
 	REQUIRE(CHECK_COLUMN(result, 1, {10000}));
 	REQUIRE(CHECK_COLUMN(result, 2, {10000}));
@@ -255,7 +670,7 @@ TEST_CASE("Test copy statement with long lines", "[copy]") {
 
 	auto csv_path = GetCSVPath();
 
-	// Generate CSV file with a very long string
+	// generate a CSV file with a very long string
 	ofstream from_csv_file(fs.JoinPath(csv_path, "test.csv"));
 	string big_string_a(100000, 'a');
 	string big_string_b(200000, 'b');
@@ -263,7 +678,7 @@ TEST_CASE("Test copy statement with long lines", "[copy]") {
 	from_csv_file << 20 << "," << big_string_b << "," << 30 << endl;
 	from_csv_file.close();
 
-	// loading CSV into a table
+	// load CSV file into a table
 	REQUIRE_NO_FAIL(con.Query("CREATE TABLE test (a INTEGER, b VARCHAR, c INTEGER);"));
 	result = con.Query("COPY test FROM '" + fs.JoinPath(csv_path, "test.csv") + "';");
 	REQUIRE(CHECK_COLUMN(result, 0, {2}));
@@ -283,13 +698,13 @@ TEST_CASE("Test copy statement with quotes and newlines", "[copy]") {
 
 	auto csv_path = GetCSVPath();
 
-	// Generate CSV file with quotes and newlines in the quotes
+	// generate a CSV file with newlines enclosed by quotes
 	ofstream from_csv_file(fs.JoinPath(csv_path, "test.csv"));
-	from_csv_file << "\"hello
world\",\"5\"" << endl;
-	from_csv_file << "\"what,
 brings, you here
, today\",\"6\"" << endl;
+	from_csv_file << "\"hello\
world\",\"5\"" << endl;
+	from_csv_file << "\"what,\
 brings, you here\
, today\",\"6\"" << endl;
 	from_csv_file.close();
 
-	// loading CSV into a table
+	// load CSV file into a table
 	REQUIRE_NO_FAIL(con.Query("CREATE TABLE test (a VARCHAR, b INTEGER);"));
 	result = con.Query("COPY test FROM '" + fs.JoinPath(csv_path, "test.csv") + "';");
 	REQUIRE(CHECK_COLUMN(result, 0, {2}));
@@ -298,35 +713,43 @@ TEST_CASE("Test copy statement with quotes and newlines", "[copy]") {
 	REQUIRE(CHECK_COLUMN(result, 0, {11}));
 
 	result = con.Query("SELECT a FROM test ORDER BY a;");
-	REQUIRE(CHECK_COLUMN(result, 0, {"hello
world", "what,
 brings, you here
, today"}));
-
+	REQUIRE(CHECK_COLUMN(result, 0, {"hello\
world", "what,\
 brings, you here\
, today"}));
 	REQUIRE_NO_FAIL(con.Query("DROP TABLE test;"));
 
-	// quotes in the middle of a quoted string are ignored
+	// quotes in the middle of a quoted string cause an exception if they are not escaped
 	from_csv_file.open(fs.JoinPath(csv_path, "test.csv"));
-	from_csv_file << "\"hello
\"w\"o\"rld\",\"5\"" << endl;
-	from_csv_file << "\"what,
 brings, you here
, today\",\"6\"" << endl;
+	from_csv_file << "\"hello\
\"w\"o\"rld\",\"5\"" << endl;
+	from_csv_file << "\"what,\
 brings, you here\
, today\",\"6\"" << endl;
 	from_csv_file.close();
 
 	REQUIRE_NO_FAIL(con.Query("CREATE TABLE test (a VARCHAR, b INTEGER);"));
+	REQUIRE_FAIL(con.Query("COPY test FROM '" + fs.JoinPath(csv_path, "test.csv") + "';"));
+
+	// now the same quotes are escaped
+	from_csv_file.open(fs.JoinPath(csv_path, "test.csv"));
+	from_csv_file << "\"hello\
\"\"w\"\"o\"\"rld\",\"5\"" << endl;
+	from_csv_file << "\"what,\
 brings, you here\
, today\",\"6\"" << endl;
+	from_csv_file.close();
+
 	result = con.Query("COPY test FROM '" + fs.JoinPath(csv_path, "test.csv") + "';");
 	REQUIRE(CHECK_COLUMN(result, 0, {2}));
 
 	result = con.Query("SELECT SUM(b) FROM test;");
 	REQUIRE(CHECK_COLUMN(result, 0, {11}));
-	result = con.Query("SELECT a FROM test ORDER BY a;");
-	REQUIRE(CHECK_COLUMN(result, 0, {"hello
\"w\"o\"rld", "what,
 brings, you here
, today"}));
+	result = con.Query("SELECT a,b FROM test ORDER BY b;");
+	REQUIRE(CHECK_COLUMN(result, 0, {"hello\
\"w\"o\"rld", "what,\
 brings, you here\
, today"}));
+	REQUIRE(CHECK_COLUMN(result, 1, {5, 6}));
 
 	REQUIRE_NO_FAIL(con.Query("DROP TABLE test;"));
 
-	// unclosed quotes results in failure
+	// not escaped escape string in quotes throws an exception
 	from_csv_file.open(fs.JoinPath(csv_path, "test.csv"));
-	from_csv_file << "\"hello
world\",\"5" << endl;
-	from_csv_file << "\"what,
 brings, you here
, today\",\"6\"" << endl;
+	from_csv_file << "\"\\\"escaped\\\",\"5\"" << endl;
+	from_csv_file << "yea,6" << endl;
 	from_csv_file.close();
 
 	REQUIRE_NO_FAIL(con.Query("CREATE TABLE test (a VARCHAR, b INTEGER);"));
-	REQUIRE_FAIL(con.Query("COPY test FROM '" + fs.JoinPath(csv_path, "test.csv") + "';"));
+	REQUIRE_FAIL(con.Query("COPY test FROM '" + fs.JoinPath(csv_path, "test.csv") + "' (ESCAPE '\\');"));
 }
 
 TEST_CASE("Test copy statement with many empty lines", "[copy]") {
@@ -336,7 +759,7 @@ TEST_CASE("Test copy statement with many empty lines", "[copy]") {
 
 	auto csv_path = GetCSVPath();
 
-	// Generate CSV file with a very long string
+	// generate CSV file with a very long string
 	ofstream from_csv_file(fs.JoinPath(csv_path, "test.csv"));
 	from_csv_file << "1
";
 	for (index_t i = 0; i < 19999; i++) {
@@ -344,7 +767,7 @@ TEST_CASE("Test copy statement with many empty lines", "[copy]") {
 	}
 	from_csv_file.close();
 
-	// loading CSV into a table
+	// load CSV file into a table
 	REQUIRE_NO_FAIL(con.Query("CREATE TABLE test (a INTEGER);"));
 	result = con.Query("COPY test FROM '" + fs.JoinPath(csv_path, "test.csv") + "';");
 	REQUIRE(CHECK_COLUMN(result, 0, {20000}));
@@ -353,27 +776,21 @@ TEST_CASE("Test copy statement with many empty lines", "[copy]") {
 	REQUIRE(CHECK_COLUMN(result, 0, {1}));
 }
 
-TEST_CASE("Test line endings", "[copy]") {
+TEST_CASE("Test different line endings", "[copy]") {
 	unique_ptr<QueryResult> result;
 	DuckDB db(nullptr);
 	Connection con(db);
 
 	auto csv_path = GetCSVPath();
 
-	// Generate CSV file with different line endings
+	// generate CSV file with different line endings
 	ofstream from_csv_file(fs.JoinPath(csv_path, "test.csv"));
-	from_csv_file << 10 << ","
-	              << "hello"
-	              << "," << 20 << "\r
";
-	from_csv_file << 20 << ","
-	              << "world"
-	              << "," << 30 << '
';
-	from_csv_file << 30 << ","
-	              << "test"
-	              << "," << 30 << '\r';
+	from_csv_file << 10 << "," << "hello" << "," << 20 << "\r
";
+	from_csv_file << 20 << "," << "world" << "," << 30 << '
';
+	from_csv_file << 30 << "," << "test" << "," << 30 << '\r';
 	from_csv_file.close();
 
-	// loading CSV into a table
+	// load CSV file into a table
 	REQUIRE_NO_FAIL(con.Query("CREATE TABLE test (a INTEGER, b VARCHAR, c INTEGER);"));
 	result = con.Query("COPY test FROM '" + fs.JoinPath(csv_path, "test.csv") + "';");
 	REQUIRE(CHECK_COLUMN(result, 0, {3}));
@@ -395,18 +812,18 @@ TEST_CASE("Test Windows Newlines with a long file", "[copy]") {
 
 	index_t line_count = 20000;
 	int64_t sum_a = 0, sum_c = 0;
-	// Generate CSV file with many strings
+
+	// generate a CSV file with many strings
 	ofstream from_csv_file(fs.JoinPath(csv_path, "test.csv"));
 	for (index_t i = 0; i < line_count; i++) {
-		from_csv_file << i << ","
-		              << "hello"
-		              << "," << i + 2 << "\r
";
+		from_csv_file << i << "," << "hello" << "," << i + 2 << "\r
";
+
 		sum_a += i;
 		sum_c += i + 2;
 	}
 	from_csv_file.close();
 
-	// loading CSV into a table
+	// load CSV file into a table
 	REQUIRE_NO_FAIL(con.Query("CREATE TABLE test (a INTEGER, b VARCHAR, c INTEGER);"));
 	result = con.Query("COPY test FROM '" + fs.JoinPath(csv_path, "test.csv") + "';");
 	REQUIRE(CHECK_COLUMN(result, 0, {Value::BIGINT(line_count)}));
@@ -428,7 +845,7 @@ TEST_CASE("Test Windows Newlines with a long file", "[copy]") {
 	}
 	from_csv_file_empty.close();
 
-	// loading CSV into a table
+	// load CSV file into a table
 	REQUIRE_NO_FAIL(con.Query("CREATE TABLE test (a INTEGER);"));
 	result = con.Query("COPY test FROM '" + fs.JoinPath(csv_path, "test2.csv") + "';");
 	REQUIRE(CHECK_COLUMN(result, 0, {Value::BIGINT(line_count)}));
@@ -437,26 +854,25 @@ TEST_CASE("Test Windows Newlines with a long file", "[copy]") {
 	REQUIRE(CHECK_COLUMN(result, 0, {Value::BIGINT(1)}));
 }
 
-TEST_CASE("Test lines that exceed the maximum allowed line size", "[copy]") {
+TEST_CASE("Test lines that exceed the maximum line size", "[copy]") {
 	unique_ptr<QueryResult> result;
 	DuckDB db(nullptr);
 	Connection con(db);
 
 	auto csv_path = GetCSVPath();
 
-	// Generate CSV file with many strings
+	// generate CSV file with 20 MB string
 	ofstream from_csv_file(fs.JoinPath(csv_path, "test.csv"));
-	// 20 MB string
 	string big_string(2048576, 'a');
 	from_csv_file << 10 << "," << big_string << "," << 20 << endl;
 	from_csv_file.close();
 
-	// the load fails because the value is too big
+	// value is too big for loading
 	REQUIRE_NO_FAIL(con.Query("CREATE TABLE test (a INTEGER, b VARCHAR, c INTEGER);"));
 	REQUIRE_FAIL(con.Query("COPY test FROM '" + fs.JoinPath(csv_path, "test.csv") + "';"));
 }
 
-TEST_CASE("Test copy into from on-time dataset", "[copy]") {
+TEST_CASE("Test copy from/to on-time dataset", "[copy]") {
 	unique_ptr<QueryResult> result;
 	DuckDB db(nullptr);
 	Connection con(db);
@@ -494,35 +910,31 @@ TEST_CASE("Test copy into from on-time dataset", "[copy]") {
 	    "div5airportseqid INTEGER, div5wheelson VARCHAR(10), div5totalgtime VARCHAR(10), div5longestgtime VARCHAR(10), "
 	    "div5wheelsoff VARCHAR(10), div5tailnum VARCHAR(10));"));
 
-	result = con.Query("COPY ontime FROM '" + ontime_csv + "' DELIMITER ',' HEADER");
+	result = con.Query("COPY ontime FROM '" + ontime_csv + "' DELIMITER ',' HEADER;");
 	REQUIRE(CHECK_COLUMN(result, 0, {9}));
 
-	result = con.Query("SELECT year, uniquecarrier, origin, origincityname, div5longestgtime FROM ontime");
+	result = con.Query("SELECT year, uniquecarrier, origin, origincityname, div5longestgtime FROM ontime;");
 	REQUIRE(CHECK_COLUMN(result, 0, {1988, 1988, 1988, 1988, 1988, 1988, 1988, 1988, 1988}));
 	REQUIRE(CHECK_COLUMN(result, 1, {"AA", "AA", "AA", "AA", "AA", "AA", "AA", "AA", "AA"}));
 	REQUIRE(CHECK_COLUMN(result, 2, {"JFK", "JFK", "JFK", "JFK", "JFK", "JFK", "JFK", "JFK", "JFK"}));
-	REQUIRE(CHECK_COLUMN(result, 3,
-	                     {"New York, NY", "New York, NY", "New York, NY", "New York, NY", "New York, NY",
-	                      "New York, NY", "New York, NY", "New York, NY", "New York, NY"}));
+	REQUIRE(CHECK_COLUMN(result, 3, {"New York, NY", "New York, NY", "New York, NY", "New York, NY", "New York, NY", "New York, NY", "New York, NY", "New York, NY", "New York, NY"}));
 	REQUIRE(CHECK_COLUMN(result, 4, {Value(), Value(), Value(), Value(), Value(), Value(), Value(), Value(), Value()}));
 
-	result = con.Query("COPY ontime TO '" + ontime_csv + "' DELIMITER ',' HEADER");
+	result = con.Query("COPY ontime TO '" + ontime_csv + "' DELIMITER ',' HEADER;");
 	REQUIRE(CHECK_COLUMN(result, 0, {9}));
-	REQUIRE_NO_FAIL(con.Query("DELETE FROM ontime"));
-	result = con.Query("COPY ontime FROM '" + ontime_csv + "' DELIMITER ',' HEADER");
+	REQUIRE_NO_FAIL(con.Query("DELETE FROM ontime;"));
+	result = con.Query("COPY ontime FROM '" + ontime_csv + "' DELIMITER ',' HEADER;");
 	REQUIRE(CHECK_COLUMN(result, 0, {9}));
 
-	result = con.Query("SELECT year, uniquecarrier, origin, origincityname, div5longestgtime FROM ontime");
+	result = con.Query("SELECT year, uniquecarrier, origin, origincityname, div5longestgtime FROM ontime;");
 	REQUIRE(CHECK_COLUMN(result, 0, {1988, 1988, 1988, 1988, 1988, 1988, 1988, 1988, 1988}));
 	REQUIRE(CHECK_COLUMN(result, 1, {"AA", "AA", "AA", "AA", "AA", "AA", "AA", "AA", "AA"}));
 	REQUIRE(CHECK_COLUMN(result, 2, {"JFK", "JFK", "JFK", "JFK", "JFK", "JFK", "JFK", "JFK", "JFK"}));
-	REQUIRE(CHECK_COLUMN(result, 3,
-	                     {"New York, NY", "New York, NY", "New York, NY", "New York, NY", "New York, NY",
-	                      "New York, NY", "New York, NY", "New York, NY", "New York, NY"}));
+	REQUIRE(CHECK_COLUMN(result, 3, {"New York, NY", "New York, NY", "New York, NY", "New York, NY", "New York, NY", "New York, NY", "New York, NY", "New York, NY", "New York, NY"}));
 	REQUIRE(CHECK_COLUMN(result, 4, {Value(), Value(), Value(), Value(), Value(), Value(), Value(), Value(), Value()}));
 }
 
-TEST_CASE("Test copy from lineitem csv", "[copy]") {
+TEST_CASE("Test copy from/to lineitem csv", "[copy]") {
 	unique_ptr<QueryResult> result;
 	DuckDB db(nullptr);
 	Connection con(db);
@@ -540,27 +952,27 @@ TEST_CASE("Test copy from lineitem csv", "[copy]") {
 	result = con.Query("COPY lineitem FROM '" + lineitem_csv + "' DELIMITER '|'");
 	REQUIRE(CHECK_COLUMN(result, 0, {10}));
 
-	result = con.Query("SELECT l_partkey, l_comment FROM lineitem WHERE l_orderkey=1 ORDER BY l_linenumber");
+	result = con.Query("SELECT l_partkey, l_comment FROM lineitem WHERE l_orderkey=1 ORDER BY l_linenumber;");
 	REQUIRE(CHECK_COLUMN(result, 0, {15519, 6731, 6370, 214, 2403, 1564}));
 	REQUIRE(
 	    CHECK_COLUMN(result, 1,
 	                 {"egular courts above the", "ly final dependencies: slyly bold ", "riously. regular, express dep",
 	                  "lites. fluffily even de", " pending foxes. slyly re", "arefully slyly ex"}));
 
-	// test COPY TO with HEADER
-	result = con.Query("COPY lineitem TO '" + lineitem_csv + "' (DELIMITER ' ', HEADER)");
+	// test COPY ... TO ... with HEADER
+	result = con.Query("COPY lineitem TO '" + lineitem_csv + "' (DELIMITER ' ', HEADER);");
 	REQUIRE(CHECK_COLUMN(result, 0, {10}));
 
-	// clear out the table
-	REQUIRE_NO_FAIL(con.Query("DELETE FROM lineitem"));
-	result = con.Query("SELECT * FROM lineitem");
+	// clear the table
+	REQUIRE_NO_FAIL(con.Query("DELETE FROM lineitem;"));
+	result = con.Query("SELECT * FROM lineitem;");
 	REQUIRE(CHECK_COLUMN(result, 0, {}));
 
 	// now copy back into the table
-	result = con.Query("COPY lineitem FROM '" + lineitem_csv + "' DELIMITER ' ' HEADER");
+	result = con.Query("COPY lineitem FROM '" + lineitem_csv + "' DELIMITER ' ' HEADER;");
 	REQUIRE(CHECK_COLUMN(result, 0, {10}));
 
-	result = con.Query("SELECT l_partkey, l_comment FROM lineitem WHERE l_orderkey=1 ORDER BY l_linenumber");
+	result = con.Query("SELECT l_partkey, l_comment FROM lineitem WHERE l_orderkey=1 ORDER BY l_linenumber;");
 	REQUIRE(CHECK_COLUMN(result, 0, {15519, 6731, 6370, 214, 2403, 1564}));
 	REQUIRE(
 	    CHECK_COLUMN(result, 1,
@@ -581,12 +993,12 @@ TEST_CASE("Test copy from web_page csv", "[copy]") {
 	    "CREATE TABLE web_page(wp_web_page_sk integer not null, wp_web_page_id char(16) not null, wp_rec_start_date "
 	    "date, wp_rec_end_date date, wp_creation_date_sk integer, wp_access_date_sk integer, wp_autogen_flag char(1), "
 	    "wp_customer_sk integer, wp_url varchar(100), wp_type char(50), wp_char_count integer, wp_link_count integer, "
-	    "wp_image_count integer, wp_max_ad_count integer, primary key (wp_web_page_sk))"));
+	    "wp_image_count integer, wp_max_ad_count integer, primary key (wp_web_page_sk));"));
 
-	result = con.Query("COPY web_page FROM '" + webpage_csv + "' DELIMITER '|'");
+	result = con.Query("COPY web_page FROM '" + webpage_csv + "' DELIMITER '|';");
 	REQUIRE(CHECK_COLUMN(result, 0, {60}));
 
-	result = con.Query("SELECT * FROM web_page ORDER BY wp_web_page_sk LIMIT 3");
+	result = con.Query("SELECT * FROM web_page ORDER BY wp_web_page_sk LIMIT 3;");
 	REQUIRE(CHECK_COLUMN(result, 0, {1, 2, 3}));
 	REQUIRE(CHECK_COLUMN(result, 1, {"AAAAAAAABAAAAAAA", "AAAAAAAACAAAAAAA", "AAAAAAAACAAAAAAA"}));
 	REQUIRE(CHECK_COLUMN(result, 2, {Value::DATE(1997, 9, 3), Value::DATE(1997, 9, 3), Value::DATE(2000, 9, 3)}));
@@ -612,12 +1024,12 @@ TEST_CASE("Test copy from greek-utf8 csv", "[copy]") {
 	auto csv_file = fs.JoinPath(csv_path, "greek_utf8.csv");
 	WriteBinary(csv_file, greek_utf8, sizeof(greek_utf8));
 
-	REQUIRE_NO_FAIL(con.Query("CREATE TABLE greek_utf8(i INTEGER, j VARCHAR, k INTEGER)"));
+	REQUIRE_NO_FAIL(con.Query("CREATE TABLE greek_utf8(i INTEGER, j VARCHAR, k INTEGER);"));
 
-	result = con.Query("COPY greek_utf8 FROM '" + csv_file + "' DELIMITER '|'");
+	result = con.Query("COPY greek_utf8 FROM '" + csv_file + "' DELIMITER '|';");
 	REQUIRE(CHECK_COLUMN(result, 0, {8}));
 
-	result = con.Query("SELECT * FROM greek_utf8 ORDER BY 1");
+	result = con.Query("SELECT * FROM greek_utf8 ORDER BY 1;");
 	REQUIRE(CHECK_COLUMN(result, 0, {1689, 1690, 41561, 45804, 51981, 171067, 182773, 607808}));
 	REQUIRE(CHECK_COLUMN(result, 1,
 	                     {"\x30\x30\x69\\047\x6d", "\x30\x30\x69\\047\x76", "\x32\x30\x31\x35\xe2\x80\x8e",
@@ -638,10 +1050,10 @@ TEST_CASE("Test copy from ncvoter csv", "[copy]") {
 
 	REQUIRE_NO_FAIL(con.Query(
 	    "CREATE TABLE IF NOT EXISTS ncvoters(county_id INTEGER, county_desc STRING, voter_reg_num STRING,status_cd STRING, voter_status_desc STRING, reason_cd STRING, voter_status_reason_desc STRING, absent_ind STRING, name_prefx_cd STRING,last_name STRING, first_name STRING, midl_name STRING, name_sufx_cd STRING, full_name_rep STRING,full_name_mail STRING, house_num STRING, half_code STRING, street_dir STRING, street_name STRING, street_type_cd STRING, street_sufx_cd STRING, unit_designator STRING, unit_num STRING, res_city_desc STRING,state_cd STRING, zip_code STRING, res_street_address STRING, res_city_state_zip STRING, mail_addr1 STRING, mail_addr2 STRING, mail_addr3 STRING, mail_addr4 STRING, mail_city STRING, mail_state STRING, mail_zipcode STRING, mail_city_state_zip STRING, area_cd STRING, phone_num STRING, full_phone_number STRING, drivers_lic STRING, race_code STRING, race_desc STRING, ethnic_code STRING, ethnic_desc STRING, party_cd STRING, party_desc STRING, sex_code STRING, sex STRING, birth_age STRING, birth_place STRING, registr_dt STRING, precinct_abbrv STRING, precinct_desc STRING,municipality_abbrv STRING, municipality_desc STRING, ward_abbrv STRING, ward_desc STRING, cong_dist_abbrv STRING, cong_dist_desc STRING, super_court_abbrv STRING, super_court_desc STRING, judic_dist_abbrv STRING, judic_dist_desc STRING, nc_senate_abbrv STRING, nc_senate_desc STRING, nc_house_abbrv STRING, nc_house_desc STRING,county_commiss_abbrv STRING, county_commiss_desc STRING, township_abbrv STRING, township_desc STRING,school_dist_abbrv STRING, school_dist_desc STRING, fire_dist_abbrv STRING, fire_dist_desc STRING, water_dist_abbrv STRING, water_dist_desc STRING, sewer_dist_abbrv STRING, sewer_dist_desc STRING, sanit_dist_abbrv STRING, sanit_dist_desc STRING, rescue_dist_abbrv STRING, rescue_dist_desc STRING, munic_dist_abbrv STRING, munic_dist_desc STRING, dist_1_abbrv STRING, dist_1_desc STRING, dist_2_abbrv STRING, dist_2_desc STRING, confidential_ind STRING, age STRING, ncid STRING, vtd_abbrv STRING, vtd_desc STRING);"));
-	result = con.Query("COPY ncvoters FROM '" + ncvoter_csv + "' DELIMITER '\t'");
+	result = con.Query("COPY ncvoters FROM '" + ncvoter_csv + "' DELIMITER '\t';");
 	REQUIRE(CHECK_COLUMN(result, 0, {10}));
 
-	result = con.Query("SELECT county_id, county_desc, vtd_desc, name_prefx_cd FROM ncvoters");
+	result = con.Query("SELECT county_id, county_desc, vtd_desc, name_prefx_cd FROM ncvoters;");
 	REQUIRE(CHECK_COLUMN(result, 0, {1, 1, 1, 1, 1, 1, 1, 1, 1, 1}));
 	REQUIRE(CHECK_COLUMN(result, 1, {"ALAMANCE", "ALAMANCE", "ALAMANCE", "ALAMANCE", "ALAMANCE", "ALAMANCE", "ALAMANCE", "ALAMANCE", "ALAMANCE", "ALAMANCE"}));
 	REQUIRE(CHECK_COLUMN(result, 2, {"09S", "09S", "03W", "09S", "1210", "035", "124", "06E", "035", "064"}));
@@ -653,16 +1065,16 @@ TEST_CASE("Test date copy", "[copy]") {
 	DuckDB db(nullptr);
 	Connection con(db);
 
-	REQUIRE_NO_FAIL(con.Query("CREATE TABLE date_test(d date)"));
+	REQUIRE_NO_FAIL(con.Query("CREATE TABLE date_test(d date);"));
 
 	auto csv_path = GetCSVPath();
 	auto date_csv = fs.JoinPath(csv_path, "date.csv");
 	WriteCSV(date_csv, "2019-06-05
");
 
-	result = con.Query("COPY date_test FROM '" + date_csv + "'");
+	result = con.Query("COPY date_test FROM '" + date_csv + "';");
 	REQUIRE(CHECK_COLUMN(result, 0, {1}));
 
-	result = con.Query("SELECT cast(d as string) FROM date_test");
+	result = con.Query("SELECT cast(d as string) FROM date_test;");
 	REQUIRE(CHECK_COLUMN(result, 0, {"2019-06-05"}));
 }
 
@@ -676,9 +1088,9 @@ TEST_CASE("Test cranlogs broken gzip copy", "[copy]") {
 	WriteBinary(cranlogs_csv, tmp2013_06_15, sizeof(tmp2013_06_15));
 
 	REQUIRE_NO_FAIL(con.Query("CREATE TABLE cranlogs (date date,time string,size int,r_version string,r_arch "
-	                          "string,r_os string,package string,version string,country string,ip_id int)"));
+	                          "string,r_os string,package string,version string,country string,ip_id int);"));
 
-	result = con.Query("COPY cranlogs FROM '" + cranlogs_csv + "' DELIMITER ',' HEADER");
+	result = con.Query("COPY cranlogs FROM '" + cranlogs_csv + "' DELIMITER ',' HEADER;");
 	REQUIRE(CHECK_COLUMN(result, 0, {37459}));
 }
 
@@ -692,11 +1104,12 @@ TEST_CASE("Test imdb escapes", "[copy]") {
 	WriteBinary(imdb_movie_info, imdb_movie_info_escaped, sizeof(imdb_movie_info_escaped));
 
 	REQUIRE_NO_FAIL(con.Query("CREATE TABLE movie_info (id integer NOT NULL PRIMARY KEY, movie_id integer NOT NULL, "
-	                          "info_type_id integer NOT NULL, info text NOT NULL, note text)"));
+	                          "info_type_id integer NOT NULL, info text NOT NULL, note text);"));
 
-	result = con.Query("COPY movie_info FROM '" + imdb_movie_info + "' DELIMITER ',' ESCAPE '\\'");
+	result = con.Query("COPY movie_info FROM '" + imdb_movie_info + "' DELIMITER ',' ESCAPE '\\';");
 	REQUIRE(result->success);
 	REQUIRE(CHECK_COLUMN(result, 0, {201}));
-	// TODO actually check results
-	result = con.Query("SELECT * FROM movie_info");
+
+	// TODO: actually check results
+	result = con.Query("SELECT * FROM movie_info;");
 }
diff --git a/test/sqlserver/test_sqlserver.cpp b/test/sqlserver/test_sqlserver.cpp
index d72a6d2a9b61..66d65cbf0090 100644
--- a/test/sqlserver/test_sqlserver.cpp
+++ b/test/sqlserver/test_sqlserver.cpp
@@ -78,7 +78,7 @@ TEST_CASE("SQL Server functions tests", "[sqlserver]") {
 	              "string NOT NULL, Title string , FirstName string NOT NULL, MiddleName string, LastName string NOT "
 	              "NULL, Suffix string, EmailPromotion int NOT NULL, AdditionalContactInfo string, Demographics "
 	              "string, rowguid string, ModifiedDate datetime NOT NULL); "));
-	REQUIRE_NO_FAIL(con.Query("COPY Person.Person FROM 'test/sqlserver/data/Person.csv.gz' DELIMITER '|';"));
+	REQUIRE_NO_FAIL(con.Query("COPY Person.Person FROM 'test/sqlserver/data/Person.csv.gz' (DELIMITER '|', QUOTE '*');"));
 
 	REQUIRE_NO_FAIL(
 	    con.Query("CREATE TABLE Person.BusinessEntityAddress( BusinessEntityID int NOT NULL, AddressID int NOT NULL, "
