{
  "repo": "duckdb/duckdb",
  "pull_number": 9440,
  "instance_id": "duckdb__duckdb-9440",
  "issue_numbers": [
    "8185",
    "8185"
  ],
  "base_commit": "812c4a9a94a760cb531b3c66bb9efa8e54d46e8c",
  "patch": "diff --git a/src/include/duckdb/optimizer/filter_combiner.hpp b/src/include/duckdb/optimizer/filter_combiner.hpp\nindex 3764915d7f3d..f759165731b3 100644\n--- a/src/include/duckdb/optimizer/filter_combiner.hpp\n+++ b/src/include/duckdb/optimizer/filter_combiner.hpp\n@@ -54,7 +54,7 @@ class FilterCombiner {\n private:\n \tFilterResult AddFilter(Expression &expr);\n \tFilterResult AddBoundComparisonFilter(Expression &expr);\n-\tFilterResult AddTransitiveFilters(BoundComparisonExpression &comparison);\n+\tFilterResult AddTransitiveFilters(BoundComparisonExpression &comparison, bool is_root = true);\n \tunique_ptr<Expression> FindTransitiveFilter(Expression &expr);\n \t// unordered_map<idx_t, std::pair<Value *, Value *>>\n \t// FindZonemapChecks(vector<idx_t> &column_ids, unordered_set<idx_t> &not_constants, Expression *filter);\ndiff --git a/src/optimizer/filter_combiner.cpp b/src/optimizer/filter_combiner.cpp\nindex 776cffe24fe6..9461c20006fc 100644\n--- a/src/optimizer/filter_combiner.cpp\n+++ b/src/optimizer/filter_combiner.cpp\n@@ -782,7 +782,7 @@ FilterResult FilterCombiner::AddFilter(Expression &expr) {\n  * Create and add new transitive filters from a two non-scalar filter such as j > i, j >= i, j < i, and j <= i\n  * It's missing to create another method to add transitive filters from scalar filters, e.g, i > 10\n  */\n-FilterResult FilterCombiner::AddTransitiveFilters(BoundComparisonExpression &comparison) {\n+FilterResult FilterCombiner::AddTransitiveFilters(BoundComparisonExpression &comparison, bool is_root) {\n \tD_ASSERT(IsGreaterThan(comparison.type) || IsLessThan(comparison.type));\n \t// get the LHS and RHS nodes\n \tauto &left_node = GetNode(*comparison.left);\n@@ -886,14 +886,16 @@ FilterResult FilterCombiner::AddTransitiveFilters(BoundComparisonExpression &com\n \t\tis_successful = true;\n \t}\n \tif (is_successful) {\n-\t\t// now check for remaining trasitive filters from the left column\n-\t\tauto transitive_filter = FindTransitiveFilter(*comparison.left);\n-\t\tif (transitive_filter != nullptr) {\n-\t\t\t// try to add transitive filters\n-\t\t\tif (AddTransitiveFilters(transitive_filter->Cast<BoundComparisonExpression>()) ==\n-\t\t\t    FilterResult::UNSUPPORTED) {\n-\t\t\t\t// in case of unsuccessful re-add filter into remaining ones\n-\t\t\t\tremaining_filters.push_back(std::move(transitive_filter));\n+\t\tif (is_root) {\n+\t\t\t// now check for remaining transitive filters from the left column\n+\t\t\tauto transitive_filter = FindTransitiveFilter(*comparison.left);\n+\t\t\tif (transitive_filter != nullptr) {\n+\t\t\t\t// try to add transitive filters\n+\t\t\t\tauto &transitive_cast = transitive_filter->Cast<BoundComparisonExpression>();\n+\t\t\t\tif (AddTransitiveFilters(transitive_cast, false) == FilterResult::UNSUPPORTED) {\n+\t\t\t\t\t// in case of unsuccessful re-add filter into remaining ones\n+\t\t\t\t\tremaining_filters.push_back(std::move(transitive_filter));\n+\t\t\t\t}\n \t\t\t}\n \t\t}\n \t\treturn FilterResult::SUCCESS;\n",
  "test_patch": "diff --git a/test/fuzzer/afl/issue_8185.test b/test/fuzzer/afl/issue_8185.test\nnew file mode 100644\nindex 000000000000..aaa4e46fe566\n--- /dev/null\n+++ b/test/fuzzer/afl/issue_8185.test\n@@ -0,0 +1,13 @@\n+# name: test/fuzzer/afl/issue_8185.test\n+# description: Issue #8185 - DuckDB binary crashed at duckdb::ExpressionIterator::EnumerateChildren\n+# group: [afl]\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+statement ok\n+CREATE TABLE v0 ( v1 INTEGER , v2 INTEGER) ;\n+\n+query II\n+SELECT * FROM v0 WHERE v2 <= 2 AND v2 <= v1 AND v1 < v2 ORDER BY v1 DESC ;\n+----\n",
  "problem_statement": "DuckDB binary crashed at duckdb::ExpressionIterator::EnumerateChildren\n### What happens?\r\n\r\nThe DuckDB binary (/usr/local/bin/duckdb) crashed in `duckdb::ExpressionIterator::EnumerateChildren`.\r\nThe binary compiled with RelWithDebInfo without ASAN reports \"''duckdb' terminated by signal SIGSEGV (Address boundary error)\".\r\nThe binary compiled with RelWithDebInfo and ASAN reports it as stack-overflow.\r\n\r\n### To Reproduce\r\n```sql\r\nCREATE TABLE v0 ( v1 INTEGER , v2 INTEGER) ; \r\nSELECT * FROM v0 WHERE v2 <= 2 AND v2 <= v1 AND v1 < v2 ORDER BY v1 DESC ;\r\n```\r\n### OS:\r\n\r\nubuntu 20.04 x64\r\n\r\n### DuckDB Version:\r\n\r\nv0.8.2-dev1293 f2dc7d8bce\r\n\r\n### DuckDB Client:\r\n\r\nBinary (/usr/local/bin/duckdb) v0.8.2-dev1293 f2dc7d8bce\r\n\r\n### Full Name:\r\n\r\nJingzhou Fu\r\n\r\n### Affiliation:\r\n\r\nWingtecher Lab of Tsinghua University and Shuimuyulin ltd.\r\n\r\n### Have you tried this on the latest `master` branch?\r\n\r\n- [X] I agree\r\n\r\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\r\n\r\n- [X] I agree\nDuckDB binary crashed at duckdb::ExpressionIterator::EnumerateChildren\n### What happens?\r\n\r\nThe DuckDB binary (/usr/local/bin/duckdb) crashed in `duckdb::ExpressionIterator::EnumerateChildren`.\r\nThe binary compiled with RelWithDebInfo without ASAN reports \"''duckdb' terminated by signal SIGSEGV (Address boundary error)\".\r\nThe binary compiled with RelWithDebInfo and ASAN reports it as stack-overflow.\r\n\r\n### To Reproduce\r\n```sql\r\nCREATE TABLE v0 ( v1 INTEGER , v2 INTEGER) ; \r\nSELECT * FROM v0 WHERE v2 <= 2 AND v2 <= v1 AND v1 < v2 ORDER BY v1 DESC ;\r\n```\r\n### OS:\r\n\r\nubuntu 20.04 x64\r\n\r\n### DuckDB Version:\r\n\r\nv0.8.2-dev1293 f2dc7d8bce\r\n\r\n### DuckDB Client:\r\n\r\nBinary (/usr/local/bin/duckdb) v0.8.2-dev1293 f2dc7d8bce\r\n\r\n### Full Name:\r\n\r\nJingzhou Fu\r\n\r\n### Affiliation:\r\n\r\nWingtecher Lab of Tsinghua University and Shuimuyulin ltd.\r\n\r\n### Have you tried this on the latest `master` branch?\r\n\r\n- [X] I agree\r\n\r\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\r\n\r\n- [X] I agree\n",
  "hints_text": "@Mytherin @Tishj Perhaps this bug report was inadvertently missed?\r\n\r\nI supplement the ASAN report in the latest commit version (v0.8.2-dev2044 762396f87b) here:\r\n\r\n```\r\nAddressSanitizer:DEADLYSIGNAL\r\n=================================================================\r\n==4790==ERROR: AddressSanitizer: stack-overflow on address 0x7fffebb70fb8 (pc 0x556e95b7a4c6 bp 0x7fffebb713c0 sp 0x7fffebb70fb0 T0)\r\n    #0 0x556e95b7a4c5 in duckdb::ExpressionIterator::EnumerateChildren(duckdb::Expression&, std::function<void (duckdb::unique_ptr<duckdb::Expression, std::default_delete<duckdb::Expression>, true>&)> const&) /root/duckdb_master/src/planner/expression_iterator.cpp:23\r\n    #1 0x556e95b7a19b in duckdb::ExpressionIterator::EnumerateChildren(duckdb::Expression const&, std::function<void (duckdb::Expression const&)> const&) /root/duckdb_master/src/planner/expression_iterator.cpp:15\r\n    #2 0x556e95b85bf1 in duckdb::Expression::Hash() const /root/duckdb_master/src/planner/expression.cpp:94\r\n    #3 0x556e9582156c in duckdb::BoundColumnRefExpression::Hash() const /root/duckdb_master/src/planner/expression/bound_columnref_expression.cpp:24\r\n    #4 0x556e93115d53 in duckdb::ExpressionHashFunction<duckdb::Expression>::operator()(std::reference_wrapper<duckdb::Expression> const&) const /root/duckdb_master/src/include/duckdb/parser/expression_map.hpp:23\r\n    #5 0x556e957aaace in std::__detail::_Hash_code_base<std::reference_wrapper<duckdb::Expression>, std::pair<std::reference_wrapper<duckdb::Expression> const, duckdb::unique_ptr<duckdb::Expression, std::default_delete<duckdb::Expression>, true> >, std::__detail::_Select1st, duckdb::ExpressionHashFunction<duckdb::Expression>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_hash_code(std::reference_wrapper<duckdb::Expression> const&) const /usr/include/c++/9/bits/hashtable_policy.h:1384\r\nAddressSanitizer:DEADLYSIGNAL\r\nAddressSanitizer: nested bug in the same thread, aborting.\r\n```\nIt is on our list of fuzzer issues, we will get to it before the next release\nThis issue is stale because it has been open 90 days with no activity. Remove stale label or comment or this will be closed in 30 days.\n@Mytherin @Tishj Perhaps this bug report was inadvertently missed?\r\n\r\nI supplement the ASAN report in the latest commit version (v0.8.2-dev2044 762396f87b) here:\r\n\r\n```\r\nAddressSanitizer:DEADLYSIGNAL\r\n=================================================================\r\n==4790==ERROR: AddressSanitizer: stack-overflow on address 0x7fffebb70fb8 (pc 0x556e95b7a4c6 bp 0x7fffebb713c0 sp 0x7fffebb70fb0 T0)\r\n    #0 0x556e95b7a4c5 in duckdb::ExpressionIterator::EnumerateChildren(duckdb::Expression&, std::function<void (duckdb::unique_ptr<duckdb::Expression, std::default_delete<duckdb::Expression>, true>&)> const&) /root/duckdb_master/src/planner/expression_iterator.cpp:23\r\n    #1 0x556e95b7a19b in duckdb::ExpressionIterator::EnumerateChildren(duckdb::Expression const&, std::function<void (duckdb::Expression const&)> const&) /root/duckdb_master/src/planner/expression_iterator.cpp:15\r\n    #2 0x556e95b85bf1 in duckdb::Expression::Hash() const /root/duckdb_master/src/planner/expression.cpp:94\r\n    #3 0x556e9582156c in duckdb::BoundColumnRefExpression::Hash() const /root/duckdb_master/src/planner/expression/bound_columnref_expression.cpp:24\r\n    #4 0x556e93115d53 in duckdb::ExpressionHashFunction<duckdb::Expression>::operator()(std::reference_wrapper<duckdb::Expression> const&) const /root/duckdb_master/src/include/duckdb/parser/expression_map.hpp:23\r\n    #5 0x556e957aaace in std::__detail::_Hash_code_base<std::reference_wrapper<duckdb::Expression>, std::pair<std::reference_wrapper<duckdb::Expression> const, duckdb::unique_ptr<duckdb::Expression, std::default_delete<duckdb::Expression>, true> >, std::__detail::_Select1st, duckdb::ExpressionHashFunction<duckdb::Expression>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_hash_code(std::reference_wrapper<duckdb::Expression> const&) const /usr/include/c++/9/bits/hashtable_policy.h:1384\r\nAddressSanitizer:DEADLYSIGNAL\r\nAddressSanitizer: nested bug in the same thread, aborting.\r\n```\nIt is on our list of fuzzer issues, we will get to it before the next release\nThis issue is stale because it has been open 90 days with no activity. Remove stale label or comment or this will be closed in 30 days.",
  "created_at": "2023-10-23T07:59:03Z"
}