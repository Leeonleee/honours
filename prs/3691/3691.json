{
  "repo": "duckdb/duckdb",
  "pull_number": 3691,
  "instance_id": "duckdb__duckdb-3691",
  "issue_numbers": [
    "3690",
    "3690"
  ],
  "base_commit": "ee6a6986de3689b3d5642ee1fcec0a915aa486a4",
  "patch": "diff --git a/src/catalog/catalog_set.cpp b/src/catalog/catalog_set.cpp\nindex 501a27755e58..9a19bd055b20 100644\n--- a/src/catalog/catalog_set.cpp\n+++ b/src/catalog/catalog_set.cpp\n@@ -409,6 +409,7 @@ CatalogEntry *CatalogSet::CreateEntryInternal(ClientContext &context, unique_ptr\n \tauto entry_index = current_entry++;\n \tauto catalog_entry = entry.get();\n \n+\tentry->set = this;\n \tentry->timestamp = 0;\n \n \tPutMapping(context, name, entry_index);\ndiff --git a/src/catalog/dependency_manager.cpp b/src/catalog/dependency_manager.cpp\nindex 4c116c8e51d3..80d5734aa36d 100644\n--- a/src/catalog/dependency_manager.cpp\n+++ b/src/catalog/dependency_manager.cpp\n@@ -18,6 +18,9 @@ void DependencyManager::AddObject(ClientContext &context, CatalogEntry *object,\n \tfor (auto &dependency : dependencies) {\n \t\tidx_t entry_index;\n \t\tCatalogEntry *catalog_entry;\n+\t\tif (!dependency->set) {\n+\t\t\tthrow InternalException(\"Dependency has no set\");\n+\t\t}\n \t\tif (!dependency->set->GetEntryInternal(context, dependency->name, entry_index, catalog_entry)) {\n \t\t\tthrow InternalException(\"Dependency has already been deleted?\");\n \t\t}\n",
  "test_patch": "diff --git a/test/sql/catalog/function/information_schema_macro.test b/test/sql/catalog/function/information_schema_macro.test\nnew file mode 100644\nindex 000000000000..c444340eeee6\n--- /dev/null\n+++ b/test/sql/catalog/function/information_schema_macro.test\n@@ -0,0 +1,20 @@\n+# name: test/sql/catalog/function/information_schema_macro.test\n+# description: Issue #3690: Creating a MACRO in pg_catalog or information_schema causes duckdb to crash\n+# group: [function]\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+statement ok\n+create macro information_schema.foo(a) as a;\n+\n+statement ok\n+create table information_schema.integers(i int);\n+\n+query I\n+select information_schema.foo(42)\n+----\n+42\n+\n+statement ok\n+select * from information_schema.integers\n",
  "problem_statement": "Creating a MACRO in pg_catalog or information_schema causes duckdb to crash\n#### What happens?\r\nCreating a MACRO in pg_catalog or information_schema causes duckdb to crash. \r\n\r\n#### To Reproduce\r\n- open duckdb\r\n- run:\r\n```sql\r\ncreate macro information_schema.foo(a) as a;\r\n--or\r\ncreate macro pg_catalog.foo(a) as a;\r\n```\r\n- crash! \"52896 segmentation fault  ./duckdb\"\r\n\r\n#### Environment (please complete the following information):\r\n - OS: MacOS Big Sur (M1)\r\n - DuckDB Version: I am using a self-compiled version (compiled a few days ago from master). Running `--version` gives me this: v0.3.5-dev602 ee6a6986d \r\n - DuckDB Client: cli\r\n\r\n#### Before Submitting\r\n\r\n- [y] **Have you tried this on the latest `master` branch?**\r\n* **Python**: `pip install duckdb --upgrade --pre`\r\n* **R**: `install.packages(\"https://github.com/duckdb/duckdb/releases/download/master-builds/duckdb_r_src.tar.gz\", repos = NULL)`\r\n* **Other Platforms**: You can find binaries [here](https://github.com/duckdb/duckdb/releases/tag/master-builds) or compile from source. -> I don't have access to a linux machine right now but I will try to use one of the official binaries and test on linux later (there are no binaries for macos correct?).\r\n\r\n\r\n- [y] **Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?**\r\n\r\n#### Some context\r\nI am trying to create this function: `pg_catalog.pg_get_userbyid`. I am creating a proxy that speaks the postgres wire protocol so I can interact with duckdb remotely using standard postgres tools. Running queries works fine but it will fail when using the `\\commands` for example `\\d`. Not sure if this is a realistic goal or not but it is just a project for fun.\r\n\nCreating a MACRO in pg_catalog or information_schema causes duckdb to crash\n#### What happens?\r\nCreating a MACRO in pg_catalog or information_schema causes duckdb to crash. \r\n\r\n#### To Reproduce\r\n- open duckdb\r\n- run:\r\n```sql\r\ncreate macro information_schema.foo(a) as a;\r\n--or\r\ncreate macro pg_catalog.foo(a) as a;\r\n```\r\n- crash! \"52896 segmentation fault  ./duckdb\"\r\n\r\n#### Environment (please complete the following information):\r\n - OS: MacOS Big Sur (M1)\r\n - DuckDB Version: I am using a self-compiled version (compiled a few days ago from master). Running `--version` gives me this: v0.3.5-dev602 ee6a6986d \r\n - DuckDB Client: cli\r\n\r\n#### Before Submitting\r\n\r\n- [y] **Have you tried this on the latest `master` branch?**\r\n* **Python**: `pip install duckdb --upgrade --pre`\r\n* **R**: `install.packages(\"https://github.com/duckdb/duckdb/releases/download/master-builds/duckdb_r_src.tar.gz\", repos = NULL)`\r\n* **Other Platforms**: You can find binaries [here](https://github.com/duckdb/duckdb/releases/tag/master-builds) or compile from source. -> I don't have access to a linux machine right now but I will try to use one of the official binaries and test on linux later (there are no binaries for macos correct?).\r\n\r\n\r\n- [y] **Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?**\r\n\r\n#### Some context\r\nI am trying to create this function: `pg_catalog.pg_get_userbyid`. I am creating a proxy that speaks the postgres wire protocol so I can interact with duckdb remotely using standard postgres tools. Running queries works fine but it will fail when using the `\\commands` for example `\\d`. Not sure if this is a realistic goal or not but it is just a project for fun.\r\n\n",
  "hints_text": "I did some more testing:\r\n-  `CREATE TABLE` and `CREATE VIEW` also fail when the schema is `pg_catalog`. \r\n- The issue also occurs on linux (ubuntu 20.04) with the 'official' binaries (v0.3.4)\r\n\nI did some more testing:\r\n-  `CREATE TABLE` and `CREATE VIEW` also fail when the schema is `pg_catalog`. \r\n- The issue also occurs on linux (ubuntu 20.04) with the 'official' binaries (v0.3.4)\r\n",
  "created_at": "2022-05-23T07:37:45Z"
}