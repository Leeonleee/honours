{
  "repo": "duckdb/duckdb",
  "pull_number": 2300,
  "instance_id": "duckdb__duckdb-2300",
  "issue_numbers": [
    "2293"
  ],
  "base_commit": "7dd852e1dd7aa521e76cbf6f756da487e2e1a1cd",
  "patch": "diff --git a/src/main/query_profiler.cpp b/src/main/query_profiler.cpp\nindex 945dbe09b316..3e56d6cad2fa 100644\n--- a/src/main/query_profiler.cpp\n+++ b/src/main/query_profiler.cpp\n@@ -352,13 +352,47 @@ void QueryProfiler::ToStream(std::ostream &ss, bool print_optimizer_output) cons\n \t}\n }\n \n+static string JSONSanitize(const string &text) {\n+\tstring result;\n+\tresult.reserve(text.size());\n+\tfor (idx_t i = 0; i < text.size(); i++) {\n+\t\tswitch (text[i]) {\n+\t\tcase '\\b':\n+\t\t\tresult += \"\\\\b\";\n+\t\t\tbreak;\n+\t\tcase '\\f':\n+\t\t\tresult += \"\\\\f\";\n+\t\t\tbreak;\n+\t\tcase '\\n':\n+\t\t\tresult += \"\\\\n\";\n+\t\t\tbreak;\n+\t\tcase '\\r':\n+\t\t\tresult += \"\\\\r\";\n+\t\t\tbreak;\n+\t\tcase '\\t':\n+\t\t\tresult += \"\\\\t\";\n+\t\t\tbreak;\n+\t\tcase '\"':\n+\t\t\tresult += \"\\\\\\\"\";\n+\t\t\tbreak;\n+\t\tcase '\\\\':\n+\t\t\tresult += \"\\\\\\\\\";\n+\t\t\tbreak;\n+\t\tdefault:\n+\t\t\tresult += text[i];\n+\t\t\tbreak;\n+\t\t}\n+\t}\n+\treturn result;\n+}\n+\n // Print a row\n static void PrintRow(std::ostream &ss, const string &annotation, int id, const string &name, double time,\n-                     int sample_counter, int tuple_counter, string extra_info, int depth) {\n+                     int sample_counter, int tuple_counter, const string &extra_info, int depth) {\n \tss << string(depth * 3, ' ') << \" {\\n\";\n-\tss << string(depth * 3, ' ') << \"   \\\"annotation\\\": \\\"\" + annotation + \"\\\",\\n\";\n+\tss << string(depth * 3, ' ') << \"   \\\"annotation\\\": \\\"\" + JSONSanitize(annotation) + \"\\\",\\n\";\n \tss << string(depth * 3, ' ') << \"   \\\"id\\\": \" + to_string(id) + \",\\n\";\n-\tss << string(depth * 3, ' ') << \"   \\\"name\\\": \\\"\" + name + \"\\\",\\n\";\n+\tss << string(depth * 3, ' ') << \"   \\\"name\\\": \\\"\" + JSONSanitize(name) + \"\\\",\\n\";\n #if defined(RDTSC)\n \tss << string(depth * 3, ' ') << \"   \\\"timing\\\": \\\"NULL\\\" ,\\n\";\n \tss << string(depth * 3, ' ') << \"   \\\"cycles_per_tuple\\\": \" + StringUtil::Format(\"%.4f\", time) + \",\\n\";\n@@ -368,8 +402,7 @@ static void PrintRow(std::ostream &ss, const string &annotation, int id, const s\n #endif\n \tss << string(depth * 3, ' ') << \"   \\\"sample_size\\\": \" << to_string(sample_counter) + \",\\n\";\n \tss << string(depth * 3, ' ') << \"   \\\"input_size\\\": \" << to_string(tuple_counter) + \",\\n\";\n-\tss << string(depth * 3, ' ') << \"   \\\"extra_info\\\": \\\"\"\n-\t   << StringUtil::Replace(std::move(extra_info), \"\\n\", \"\\\\n\") + \"\\\"\\n\";\n+\tss << string(depth * 3, ' ') << \"   \\\"extra_info\\\": \\\"\" << JSONSanitize(extra_info) + \"\\\"\\n\";\n \tss << string(depth * 3, ' ') << \" },\\n\";\n }\n \n@@ -391,11 +424,10 @@ static void ExtractFunctions(std::ostream &ss, ExpressionInfo &info, int &fun_id\n \n static void ToJSONRecursive(QueryProfiler::TreeNode &node, std::ostream &ss, int depth = 1) {\n \tss << string(depth * 3, ' ') << \" {\\n\";\n-\tss << string(depth * 3, ' ') << \"   \\\"name\\\": \\\"\" + node.name + \"\\\",\\n\";\n+\tss << string(depth * 3, ' ') << \"   \\\"name\\\": \\\"\" + JSONSanitize(node.name) + \"\\\",\\n\";\n \tss << string(depth * 3, ' ') << \"   \\\"timing\\\":\" + to_string(node.info.time) + \",\\n\";\n \tss << string(depth * 3, ' ') << \"   \\\"cardinality\\\":\" + to_string(node.info.elements) + \",\\n\";\n-\tss << string(depth * 3, ' ')\n-\t   << \"   \\\"extra_info\\\": \\\"\" + StringUtil::Replace(node.extra_info, \"\\n\", \"\\\\n\") + \"\\\",\\n\";\n+\tss << string(depth * 3, ' ') << \"   \\\"extra_info\\\": \\\"\" + JSONSanitize(node.extra_info) + \"\\\",\\n\";\n \tss << string(depth * 3, ' ') << \"   \\\"timings\\\": [\";\n \tint32_t function_counter = 1;\n \tint32_t expression_counter = 1;\n@@ -449,8 +481,7 @@ string QueryProfiler::ToJSON() const {\n \tss << \"   \\\"timing\\\": \" + to_string(main_query.Elapsed()) + \",\\n\";\n \tss << \"   \\\"cardinality\\\": \" + to_string(root->info.elements) + \",\\n\";\n \t// JSON cannot have literal control characters in string literals\n-\tstring extra_info = StringUtil::Replace(query, \"\\t\", \"\\\\t\");\n-\textra_info = StringUtil::Replace(extra_info, \"\\n\", \"\\\\n\");\n+\tstring extra_info = JSONSanitize(query);\n \tss << \"   \\\"extra-info\\\": \\\"\" + extra_info + \"\\\", \\n\";\n \t// print the phase timings\n \tss << \"   \\\"timings\\\": [\\n\";\n",
  "test_patch": "diff --git a/tools/shell/shell-test.py b/tools/shell/shell-test.py\nindex a9026d229187..72ffeff56ae8 100644\n--- a/tools/shell/shell-test.py\n+++ b/tools/shell/shell-test.py\n@@ -378,6 +378,13 @@ def tf():\n SELECT 42;\n ''', out=\"42\", err=\"Query Profiling Information\")\n \n+# escapes in query profiling\n+test(\"\"\"\n+PRAGMA enable_profiling=json;\n+CREATE TABLE \"foo\"(\"hello world\" INT);\n+SELECT \"hello world\", '\\r\\t\\n\\b\\f\\\\' FROM \"foo\";\n+\"\"\", err=\"\"\"SELECT \\\\\"hello world\\\\\", '\\\\r\\\\t\\\\n\\\\b\\\\f\\\\\\\\' FROM \\\\\"foo\"\"\")\n+\n test('.system echo 42', out=\"42\")\n test('.shell echo 42', out=\"42\")\n \n",
  "problem_statement": "JSON Profile Not Escaping Quotes Correctly\n**What does happen?**\r\nWhen the profiling option is enabled with JSON format, quotes in the JSON profile are not properly escaped.\r\n\r\n**What should happen?**\r\nQuotes should be properly escaped in JSON profile.\r\n\r\n**To Reproduce**\r\nSee the key \"extra-info\" contains quotes not escaped correctly:\r\n\r\n```\r\n$ duckdb\r\nv0.2.9 1776611\r\nEnter \".help\" for usage hints.\r\nConnected to a transient in-memory database.\r\nUse \".open FILENAME\" to reopen on a persistent database.\r\nD PRAGMA enable_profiling=json;\r\nD CREATE TABLE \"foo\"(\"hello world\" INT);\r\nD SELECT \"hello world\" FROM \"foo\";\r\n{\r\n   \"name\":  \"Query\",\r\n   \"result\": 0.000050,\r\n   \"timing\": 0.000050,\r\n   \"cardinality\": 0,\r\n   \"extra-info\": \"SELECT \"hello world\" FROM \"foo\";\",\r\n   \"timings\": [\r\n\r\n   ],\r\n   \"children\": [\r\n    {\r\n      \"name\": \"SEQ_SCAN\",\r\n      \"timing\":0.000015,\r\n      \"cardinality\":0,\r\n      \"extra_info\": \"foo\\n[INFOSEPARATOR]\\nhello world\",\r\n      \"timings\": [\r\n      ],\r\n      \"children\": [\r\n      ]\r\n    }\r\n   ]\r\n}\r\n```\r\n\r\n**Environment (please complete the following information):**\r\n - OS: [CentOS 7.x]\r\n - DuckDB Version [0.29]\r\n\r\n**Before submitting**\r\n- [X] Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\r\n- [ ] Have you tried this on the latest `master` branch? In case you cannot compile, you may find some binaries here: https://github.com/duckdb/duckdb/releases/tag/master-builds\r\n\n",
  "hints_text": "",
  "created_at": "2021-09-20T11:54:52Z"
}