diff --git a/src/main/query_profiler.cpp b/src/main/query_profiler.cpp
index 945dbe09b316..3e56d6cad2fa 100644
--- a/src/main/query_profiler.cpp
+++ b/src/main/query_profiler.cpp
@@ -352,13 +352,47 @@ void QueryProfiler::ToStream(std::ostream &ss, bool print_optimizer_output) cons
 	}
 }
 
+static string JSONSanitize(const string &text) {
+	string result;
+	result.reserve(text.size());
+	for (idx_t i = 0; i < text.size(); i++) {
+		switch (text[i]) {
+		case '\b':
+			result += "\\b";
+			break;
+		case '\f':
+			result += "\\f";
+			break;
+		case '
':
+			result += "\
";
+			break;
+		case '\r':
+			result += "\\r";
+			break;
+		case '\t':
+			result += "\\t";
+			break;
+		case '"':
+			result += "\\\"";
+			break;
+		case '\\':
+			result += "\\\\";
+			break;
+		default:
+			result += text[i];
+			break;
+		}
+	}
+	return result;
+}
+
 // Print a row
 static void PrintRow(std::ostream &ss, const string &annotation, int id, const string &name, double time,
-                     int sample_counter, int tuple_counter, string extra_info, int depth) {
+                     int sample_counter, int tuple_counter, const string &extra_info, int depth) {
 	ss << string(depth * 3, ' ') << " {
";
-	ss << string(depth * 3, ' ') << "   \"annotation\": \"" + annotation + "\",
";
+	ss << string(depth * 3, ' ') << "   \"annotation\": \"" + JSONSanitize(annotation) + "\",
";
 	ss << string(depth * 3, ' ') << "   \"id\": " + to_string(id) + ",
";
-	ss << string(depth * 3, ' ') << "   \"name\": \"" + name + "\",
";
+	ss << string(depth * 3, ' ') << "   \"name\": \"" + JSONSanitize(name) + "\",
";
 #if defined(RDTSC)
 	ss << string(depth * 3, ' ') << "   \"timing\": \"NULL\" ,
";
 	ss << string(depth * 3, ' ') << "   \"cycles_per_tuple\": " + StringUtil::Format("%.4f", time) + ",
";
@@ -368,8 +402,7 @@ static void PrintRow(std::ostream &ss, const string &annotation, int id, const s
 #endif
 	ss << string(depth * 3, ' ') << "   \"sample_size\": " << to_string(sample_counter) + ",
";
 	ss << string(depth * 3, ' ') << "   \"input_size\": " << to_string(tuple_counter) + ",
";
-	ss << string(depth * 3, ' ') << "   \"extra_info\": \""
-	   << StringUtil::Replace(std::move(extra_info), "
", "\
") + "\"
";
+	ss << string(depth * 3, ' ') << "   \"extra_info\": \"" << JSONSanitize(extra_info) + "\"
";
 	ss << string(depth * 3, ' ') << " },
";
 }
 
@@ -391,11 +424,10 @@ static void ExtractFunctions(std::ostream &ss, ExpressionInfo &info, int &fun_id
 
 static void ToJSONRecursive(QueryProfiler::TreeNode &node, std::ostream &ss, int depth = 1) {
 	ss << string(depth * 3, ' ') << " {
";
-	ss << string(depth * 3, ' ') << "   \"name\": \"" + node.name + "\",
";
+	ss << string(depth * 3, ' ') << "   \"name\": \"" + JSONSanitize(node.name) + "\",
";
 	ss << string(depth * 3, ' ') << "   \"timing\":" + to_string(node.info.time) + ",
";
 	ss << string(depth * 3, ' ') << "   \"cardinality\":" + to_string(node.info.elements) + ",
";
-	ss << string(depth * 3, ' ')
-	   << "   \"extra_info\": \"" + StringUtil::Replace(node.extra_info, "
", "\
") + "\",
";
+	ss << string(depth * 3, ' ') << "   \"extra_info\": \"" + JSONSanitize(node.extra_info) + "\",
";
 	ss << string(depth * 3, ' ') << "   \"timings\": [";
 	int32_t function_counter = 1;
 	int32_t expression_counter = 1;
@@ -449,8 +481,7 @@ string QueryProfiler::ToJSON() const {
 	ss << "   \"timing\": " + to_string(main_query.Elapsed()) + ",
";
 	ss << "   \"cardinality\": " + to_string(root->info.elements) + ",
";
 	// JSON cannot have literal control characters in string literals
-	string extra_info = StringUtil::Replace(query, "\t", "\\t");
-	extra_info = StringUtil::Replace(extra_info, "
", "\
");
+	string extra_info = JSONSanitize(query);
 	ss << "   \"extra-info\": \"" + extra_info + "\", 
";
 	// print the phase timings
 	ss << "   \"timings\": [
";
