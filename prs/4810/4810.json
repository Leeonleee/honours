{
  "repo": "duckdb/duckdb",
  "pull_number": 4810,
  "instance_id": "duckdb__duckdb-4810",
  "issue_numbers": [
    "4809"
  ],
  "base_commit": "7639565c39e110fc3d056e35377e39b870f8b96d",
  "patch": "diff --git a/tools/juliapkg/src/ctypes.jl b/tools/juliapkg/src/ctypes.jl\nindex 82101b722dda..c2eb992ff907 100644\n--- a/tools/juliapkg/src/ctypes.jl\n+++ b/tools/juliapkg/src/ctypes.jl\n@@ -204,9 +204,9 @@ JULIA_TYPE_MAP = Dict(\n     DUCKDB_TYPE_TIMESTAMP_NS => DateTime,\n     DUCKDB_TYPE_INTERVAL => Dates.CompoundPeriod,\n     DUCKDB_TYPE_UUID => UUID,\n-    DUCKDB_TYPE_VARCHAR => AbstractString,\n-    DUCKDB_TYPE_JSON => AbstractString,\n-    DUCKDB_TYPE_ENUM => AbstractString,\n+    DUCKDB_TYPE_VARCHAR => String,\n+    DUCKDB_TYPE_JSON => String,\n+    DUCKDB_TYPE_ENUM => String,\n     DUCKDB_TYPE_BLOB => Base.CodeUnits{UInt8, String},\n     DUCKDB_TYPE_MAP => Dict\n )\n",
  "test_patch": "diff --git a/tools/juliapkg/test/test_sqlite.jl b/tools/juliapkg/test/test_sqlite.jl\nindex 5cb1934e579a..1a3b08ec0adb 100644\n--- a/tools/juliapkg/test/test_sqlite.jl\n+++ b/tools/juliapkg/test/test_sqlite.jl\n@@ -220,6 +220,12 @@ end\n     r = first(rr)\n     @test typeof.(Tuple(r)) ==\n           (Missing, Int32, Int32, Float32, Float32, Float64, String, String, String, String, DateTime, DateTime)\n+    # Issue #4809: Concrete `String` types.\n+    # Want to test exactly the types `execute` returns, so check the schema directly and\n+    # avoid calling `Tuple` or anything else that would narrow the types in the result.\n+    schema = Tables.schema(rr)\n+    @test nonmissingtype.(schema.types) ==\n+          (Int32, Int32, Int32, Float32, Float32, Float64, String, String, String, String, DateTime, DateTime)\n end\n \n @testset \"Issue #158: Missing DB File\" begin\n",
  "problem_statement": "[Julia API] Query returns AbstractString instead of String\n### What happens?\n\nUsing the Julia API, queries including strings return as AbstractString but should probably be some concrete string type, such as String. \n\n### To Reproduce\n\n```julia\r\nusing DuckDB, DBInterface\r\ncon = DBInterface.connect(DuckDB.DB, \":memory:\")\r\nDBInterface.execute(con, \"CREATE TABLE test(a INT, b VARCHAR);\")\r\nDBInterface.execute(con, \"INSERT INTO test VALUES (1, 'abc');\")\r\ndf = DBInterface.execute(con, \"SELECT * FROM test\").df\r\ntypeof(df.b) # Vector{Union{Missing, AbstractString}}\r\n```\n\n### OS:\n\nWindows 10\n\n### DuckDB Version:\n\n0.5.1\n\n### DuckDB Client:\n\nJulia\n\n### Full Name:\n\nJakob Hoffmann\n\n### Affiliation:\n\nHeidelberg University\n\n### Have you tried this on the latest `master` branch?\n\n- [X] I agree\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] I agree\n",
  "hints_text": "",
  "created_at": "2022-09-27T00:15:36Z"
}