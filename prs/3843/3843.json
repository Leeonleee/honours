{
  "repo": "duckdb/duckdb",
  "pull_number": 3843,
  "instance_id": "duckdb__duckdb-3843",
  "issue_numbers": [
    "3840"
  ],
  "base_commit": "4a24d71edecc7c0018eb3860d2e104cfe90462b6",
  "patch": "diff --git a/tools/jdbc/src/main/java/org/duckdb/DuckDBResultSetMetaData.java b/tools/jdbc/src/main/java/org/duckdb/DuckDBResultSetMetaData.java\nindex f998f6969825..904aad97ae5e 100644\n--- a/tools/jdbc/src/main/java/org/duckdb/DuckDBResultSetMetaData.java\n+++ b/tools/jdbc/src/main/java/org/duckdb/DuckDBResultSetMetaData.java\n@@ -217,11 +217,23 @@ public int getColumnDisplaySize(int column) throws SQLException {\n \t}\n \n \tpublic int getPrecision(int column) throws SQLException {\n-\t\treturn 0;\n+\t\tDuckDBColumnTypeMetaData typeMetaData = typeMetadataForColumn(column);\n+\n+\t\tif (typeMetaData == null) {\n+\t\t\treturn 0;\n+\t\t}\n+\n+\t\treturn typeMetaData.width;\n \t}\n \n \tpublic int getScale(int column) throws SQLException {\n-\t\treturn 0;\n+\t\tDuckDBColumnTypeMetaData typeMetaData = typeMetadataForColumn(column);\n+\n+\t\tif (typeMetaData == null) {\n+\t\t\treturn 0;\n+\t\t}\n+\n+\t\treturn typeMetaData.scale;\n \t}\n \n \tpublic String getTableName(int column) throws SQLException {\n@@ -239,4 +251,11 @@ public <T> T unwrap(Class<T> iface) throws SQLException {\n \tpublic boolean isWrapperFor(Class<?> iface) throws SQLException {\n \t\tthrow new SQLFeatureNotSupportedException();\n \t}\n+\n+\tprivate DuckDBColumnTypeMetaData typeMetadataForColumn(int columnIndex) throws SQLException {\n+\t\tif (columnIndex > column_count) {\n+\t\t\tthrow new SQLException(\"Column index out of bounds\");\n+\t\t}\n+\t\treturn column_types_meta[columnIndex - 1];\n+\t}\n }\n",
  "test_patch": "diff --git a/tools/jdbc/src/test/java/org/duckdb/test/TestDuckDBJDBC.java b/tools/jdbc/src/test/java/org/duckdb/test/TestDuckDBJDBC.java\nindex c7172d960dca..b9bf23011d77 100644\n--- a/tools/jdbc/src/test/java/org/duckdb/test/TestDuckDBJDBC.java\n+++ b/tools/jdbc/src/test/java/org/duckdb/test/TestDuckDBJDBC.java\n@@ -865,6 +865,17 @@ public static void test_bigdecimal() throws Exception {\n \t\tassertTrue(BigDecimal.class.toString().equals(meta.getColumnClassName(3)));\n \t\tassertTrue(BigDecimal.class.toString().equals(meta.getColumnClassName(4)));\n \n+\t\tassertEquals(3, meta.getPrecision(1));\n+\t\tassertEquals(0, meta.getScale(1));\n+\t\tassertEquals(4, meta.getPrecision(2));\n+\t\tassertEquals(1, meta.getScale(2));\n+\t\tassertEquals(9, meta.getPrecision(3));\n+\t\tassertEquals(4, meta.getScale(3));\n+\t\tassertEquals(18, meta.getPrecision(4));\n+\t\tassertEquals(7, meta.getScale(4));\n+\t\tassertEquals(38, meta.getPrecision(5));\n+\t\tassertEquals(10, meta.getScale(5));\n+\n \t\tconn.close();\n \t}\n \n",
  "problem_statement": "JDBC ResultSet Metadata Decimal precision and scale always 0\n#### What happens?\r\n\r\nThe metadata associated with a ResultSet (resultSet.getMetaData()) will always return 0 for decimal scale and precision. \r\n\r\nThey appear to be hardcoded in the JDBC code: https://github.com/duckdb/duckdb/blob/master/tools/jdbc/src/main/java/org/duckdb/DuckDBResultSetMetaData.java#L219-L225\r\n\r\nThe values appear to be correct when running a typeof query (`SELECT typeof(cast(3.2 as decimal(2, 1)))`) and is correct in the INFORMATION_SCHEMA. \r\n\r\nThis information is also incorrect for other types (float / date / etc) but is less critical. \r\n\r\nThe Decimal(0,0) is currently incompatible with the arrow JDBC library to convert JDBC ResultSets to Arrow. \r\n\r\n#### To Reproduce\r\n\r\n```\r\nConnection connection = <create duckdb jdbc connection>;\r\nStatement statement = connection.createStatement();\r\nResultSet resultSet = statement.executeQuery(\"select cast(3.2 as decimal(2, 1)) as DEC_VALUE\");\r\n\r\nResultSetMetaData metadata = resultSet.getMetaData();\r\nmetadata.getPrecision(1); // returns 0 expected 2\r\nmetadata.getScale(1); // returns 0 expected 1\r\n```\r\n\r\n#### Environment (please complete the following information):\r\n - OS: MacOS 12.3.1 (Monterey -- apple silicon) \r\n - DuckDB Version: duckdb_jdbc 0.3.3\r\n - DuckDB Client: JDBC\r\n\r\n#### Before Submitting\r\n\r\n- [x] **Have you tried this on the latest `master` branch?** (built from source)\r\n- [x] **Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?**\n",
  "hints_text": "",
  "created_at": "2022-06-13T19:47:48Z"
}