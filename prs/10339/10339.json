{
  "repo": "duckdb/duckdb",
  "pull_number": 10339,
  "instance_id": "duckdb__duckdb-10339",
  "issue_numbers": [
    "10227"
  ],
  "base_commit": "6bea97b85f052104895dabce4e950430ee16ceea",
  "patch": "diff --git a/tools/pythonpkg/src/native/python_objects.cpp b/tools/pythonpkg/src/native/python_objects.cpp\nindex 48f79f1fa287..9dab0174448e 100644\n--- a/tools/pythonpkg/src/native/python_objects.cpp\n+++ b/tools/pythonpkg/src/native/python_objects.cpp\n@@ -542,7 +542,7 @@ py::object PythonObject::FromValue(const Value &val, const LogicalType &type,\n \t}\n \tcase LogicalTypeId::INTERVAL: {\n \t\tauto interval_value = val.GetValueUnsafe<interval_t>();\n-\t\tuint64_t days = duckdb::Interval::DAYS_PER_MONTH * interval_value.months + interval_value.days;\n+\t\tint64_t days = duckdb::Interval::DAYS_PER_MONTH * interval_value.months + interval_value.days;\n \t\treturn import_cache.datetime.timedelta()(py::arg(\"days\") = days,\n \t\t                                         py::arg(\"microseconds\") = interval_value.micros);\n \t}\n",
  "test_patch": "diff --git a/tools/pythonpkg/tests/fast/types/test_datetime_datetime.py b/tools/pythonpkg/tests/fast/types/test_datetime_datetime.py\nindex cfd307cb9f73..08a9953dd055 100644\n--- a/tools/pythonpkg/tests/fast/types/test_datetime_datetime.py\n+++ b/tools/pythonpkg/tests/fast/types/test_datetime_datetime.py\n@@ -47,3 +47,9 @@ def test_timestamp_infinity_roundtrip(self):\n         con.execute(\"select $1, $1 = '-infinity'::TIMESTAMP\", [datetime.datetime.min])\n         res = con.fetchall()\n         assert res == [(datetime.datetime.min, False)]\n+\n+    def test_convert_negative_interval(self, duckdb_cursor):\n+        res = duckdb_cursor.execute(\n+            \"SELECT CAST('2023-07-22T11:28:07' AS TIMESTAMP) - CAST('2023-07-23T11:28:07' AS TIMESTAMP)\"\n+        ).fetchall()\n+        assert res == [(datetime.timedelta(days=-1),)]\n",
  "problem_statement": "Subtracting timestamps results in \"OverflowError: Python int too large to convert to C int\"\n### What happens?\r\n\r\nI'm using the Python API. With certain datetime values, the operation `CAST('<timestamp1>' AS TIMESTAMP) - CAST('<timestamp2>' AS TIMESTAMP)` throws an error: `OverflowError: Python int too large to convert to C int`.\r\n\r\n### To Reproduce\r\n\r\nTo reproduce the issue:\r\n\r\n```python\r\nimport duckdb\r\n\r\nconn = duckdb.connect(':memory:')\r\nconn.execute(\"SELECT CAST('2023-07-22T11:28:07' AS TIMESTAMP) - CAST('2023-07-23T11:28:07' AS TIMESTAMP)\")\r\nconn.fetchall()\r\n```\r\n\r\nHowever, it doesn't happen with all datetime values: replace the query with e.g. `\"SELECT CAST('2023-07-22T11:28:07' AS TIMESTAMP) - CAST('2023-07-22T16:46:21' AS TIMESTAMP)\"` and the error is gone.\r\n\r\nInterestingly, if you simply open the Python command line and enter the following commands, it runs just fine with the same values as above:\r\n\r\n```python\r\nimport duckdb\r\nduckdb.sql(\"SELECT CAST('2023-07-22T11:28:07' AS TIMESTAMP) - CAST('2023-07-23T11:28:07' AS TIMESTAMP)\")\r\n```\r\n\r\n### OS:\r\n\r\nUbuntu 23.10\r\n\r\n### DuckDB Version:\r\n\r\n0.9.2\r\n\r\n### DuckDB Client:\r\n\r\nPython\r\n\r\n### Full Name:\r\n\r\nJulian Gutbrod\r\n\r\n### Affiliation:\r\n\r\nAI.Associates\r\n\r\n### Have you tried this on the latest `main` branch?\r\n\r\nI have tested with a main build\r\n\r\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\r\n\r\n- [X] Yes, I have\n",
  "hints_text": "Your `.sql` example doesnt execute the query yet\nI thought it does, because the output is shown correctly:\r\n```shell\r\n>>> duckdb.sql(\"SELECT CAST('2023-07-22T11:28:07' AS TIMESTAMP) - CAST('2023-07-23T11:28:07' AS TIMESTAMP)\")\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 (CAST('2023-07-22T11:28:07' AS TIMESTAMP) - CAST('2023-07-23T11:28:07' AS TIMESTAMP)) \u2502\r\n\u2502                                       interval                                        \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 -1 day                                                                                \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n```\nHmm fair enough, I'll have a look\r\nIt's likely the `fetchall` that causes the issue, because that's where the conversion from duckdb -> python happens\r\nYour result of `.sql` is printing the result to stdout, without any conversion into python objects",
  "created_at": "2024-01-25T10:38:14Z"
}