diff --git a/test/sql/copy/csv/test_sniff_csv.test b/test/sql/copy/csv/test_sniff_csv.test
index 1b4ba47f0b06..ed65b4f06796 100644
--- a/test/sql/copy/csv/test_sniff_csv.test
+++ b/test/sql/copy/csv/test_sniff_csv.test
@@ -27,7 +27,7 @@ FROM sniff_csv('data/csv/real/lineitem_sample.csv');
 statement error
 FROM sniff_csv('data/csv/real/non_ecziste.csv');
 ----
-Cannot open file "data/csv/real/non_ecziste.csv": No such file or directory
+No files found that match the pattern "data/csv/real/non_ecziste.csv"
 
 # Test different sample sizes
 
diff --git a/test/sql/copy/csv/test_sniff_csv_options.test b/test/sql/copy/csv/test_sniff_csv_options.test
index e19e72adcf1d..da8cdaa66f03 100644
--- a/test/sql/copy/csv/test_sniff_csv_options.test
+++ b/test/sql/copy/csv/test_sniff_csv_options.test
@@ -118,7 +118,7 @@ FROM read_csv('data/csv/autotypecandidates.csv', auto_detect=false, delim='|', q
 statement error
 FROM sniff_csv('data/csv/hive-partitioning/simple/*/*/test.csv');
 ----
-sniff_csv does not operate on globs yet
+Not implemented Error: sniff_csv does not operate on more than one file yet
 
 # don't accept madeup options
 statement error
diff --git a/test/sql/copy/csv/test_sniff_httpfs.test b/test/sql/copy/csv/test_sniff_httpfs.test
new file mode 100644
index 000000000000..ea36b9be17ab
--- /dev/null
+++ b/test/sql/copy/csv/test_sniff_httpfs.test
@@ -0,0 +1,14 @@
+# name: test/sql/copy/csv/test_sniff_httpfs.test
+# description: Test sniff_csv functions over httpfs with auto-detection on compression
+# group: [csv]
+
+require httpfs
+
+statement ok
+PRAGMA enable_verification
+
+statement ok
+from sniff_csv('https://github.com/duckdb/duckdb/raw/main/data/csv/who.csv.gz');
+
+statement ok
+from sniff_csv('https://github.com/duckdb/duckdb/raw/main/data/csv/who.csv.gz?v=1');
diff --git a/test/sqlite/sqllogic_test_runner.cpp b/test/sqlite/sqllogic_test_runner.cpp
index 762928175ac3..daf384750bee 100644
--- a/test/sqlite/sqllogic_test_runner.cpp
+++ b/test/sqlite/sqllogic_test_runner.cpp
@@ -893,7 +893,7 @@ void SQLLogicTestRunner::ExecuteFile(string script) {
 
 			// file name
 			idx_t filename_start_pos = input_path.find_last_of("/") + 1;
-			if (!StringUtil::EndsWith(input_path, ".gz")) {
+			if (!StringUtil::EndsWith(input_path, CompressionExtensionFromType(FileCompressionType::GZIP))) {
 				parser.Fail("unzip: input has not a GZIP extension");
 			}
 			string filename = input_path.substr(filename_start_pos, input_path.size() - filename_start_pos - 3);
