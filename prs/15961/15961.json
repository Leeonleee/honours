{
  "repo": "duckdb/duckdb",
  "pull_number": 15961,
  "instance_id": "duckdb__duckdb-15961",
  "issue_numbers": [
    "15584",
    "15584"
  ],
  "base_commit": "612e8ac006668fa29df7edd8b181da6395b6a8d5",
  "patch": "diff --git a/src/planner/subquery/flatten_dependent_join.cpp b/src/planner/subquery/flatten_dependent_join.cpp\nindex a297a7855dae..bb5db60a98bd 100644\n--- a/src/planner/subquery/flatten_dependent_join.cpp\n+++ b/src/planner/subquery/flatten_dependent_join.cpp\n@@ -401,6 +401,7 @@ unique_ptr<LogicalOperator> FlattenDependentJoins::PushDownDependentJoinInternal\n \t\t\t\t// only right has correlation: push into right\n \t\t\t\tplan->children[1] = PushDownDependentJoinInternal(std::move(plan->children[1]),\n \t\t\t\t                                                  parent_propagate_null_values, lateral_depth);\n+\t\t\t\tdelim_offset += plan->children[0]->GetColumnBindings().size();\n \t\t\t\t// Remove the correlated columns coming from outside for current join node\n \t\t\t\treturn plan;\n \t\t\t}\n@@ -419,6 +420,7 @@ unique_ptr<LogicalOperator> FlattenDependentJoins::PushDownDependentJoinInternal\n \t\t\t\t// only right has correlation: push into right\n \t\t\t\tplan->children[1] = PushDownDependentJoinInternal(std::move(plan->children[1]),\n \t\t\t\t                                                  parent_propagate_null_values, lateral_depth);\n+\t\t\t\tdelim_offset += plan->children[0]->GetColumnBindings().size();\n \t\t\t\treturn plan;\n \t\t\t}\n \t\t} else if (join.join_type == JoinType::MARK) {\n",
  "test_patch": "diff --git a/test/fuzzer/public/lateral_in_right_side_of_join.test b/test/fuzzer/public/lateral_in_right_side_of_join.test\nnew file mode 100644\nindex 000000000000..aab7706bef98\n--- /dev/null\n+++ b/test/fuzzer/public/lateral_in_right_side_of_join.test\n@@ -0,0 +1,28 @@\n+# name: test/fuzzer/public/lateral_in_right_side_of_join.test\n+# description: Lateral correlation in right side of join\n+# group: [public]\n+\n+statement ok\n+pragma enable_verification\n+\n+statement ok\n+CREATE TABLE t0(c0 INT , c1 VARCHAR);\n+\n+statement ok\n+CREATE TABLE t1( c1 INT);\n+\n+statement ok\n+INSERT INTO t0 VALUES(4, 3);\n+\n+statement ok\n+INSERT INTO t1 VALUES(2);\n+\n+query IIII\n+SELECT * FROM t1, t0 JOIN LATERAL (SELECT t1.c1 AS col0) _subq ON true;\n+----\n+2\t4\t3\t2\n+\n+query IIII\n+SELECT * FROM t1, t0 INNER JOIN (SELECT t1.c1 AS col0) ON true;\n+----\n+2\t4\t3\t2\n",
  "problem_statement": "INTERNAL Error: Vector::Reference used on vector of different type\n### What happens?\n\nThe below test case triggered an internal error in DuckDB.\n\n### To Reproduce\n\n```sql\r\nCREATE TABLE t0(c0 INT , c1 VARCHAR);\r\nCREATE TABLE t1( c1 INT);\r\nINSERT INTO t0 VALUES(4, 3);\r\nINSERT INTO t1 VALUES(2);\r\n\r\nSELECT * FROM t1, t0 INNER JOIN (SELECT t1.c1 AS col0) ON true;\r\n-- INTERNAL Error:\r\n-- Vector::Reference used on vector of different type\r\n\r\n```\n\n### OS:\n\nUbuntu 22.04\n\n### DuckDB Version:\n\nv1.1.4-dev4060 f99785b78a\n\n### DuckDB Client:\n\nCLI\n\n### Hardware:\n\n_No response_\n\n### Full Name:\n\nSuyang Zhong\n\n### Affiliation:\n\nNUS\n\n### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.\n\nI have tested with a source build\n\n### Did you include all relevant data sets for reproducing the issue?\n\nNot applicable - the reproduction does not require a data set\n\n### Did you include all code required to reproduce the issue?\n\n- [X] Yes, I have\n\n### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?\n\n- [X] Yes, I have\nINTERNAL Error: Vector::Reference used on vector of different type\n### What happens?\n\nThe below test case triggered an internal error in DuckDB.\n\n### To Reproduce\n\n```sql\r\nCREATE TABLE t0(c0 INT , c1 VARCHAR);\r\nCREATE TABLE t1( c1 INT);\r\nINSERT INTO t0 VALUES(4, 3);\r\nINSERT INTO t1 VALUES(2);\r\n\r\nSELECT * FROM t1, t0 INNER JOIN (SELECT t1.c1 AS col0) ON true;\r\n-- INTERNAL Error:\r\n-- Vector::Reference used on vector of different type\r\n\r\n```\n\n### OS:\n\nUbuntu 22.04\n\n### DuckDB Version:\n\nv1.1.4-dev4060 f99785b78a\n\n### DuckDB Client:\n\nCLI\n\n### Hardware:\n\n_No response_\n\n### Full Name:\n\nSuyang Zhong\n\n### Affiliation:\n\nNUS\n\n### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.\n\nI have tested with a source build\n\n### Did you include all relevant data sets for reproducing the issue?\n\nNot applicable - the reproduction does not require a data set\n\n### Did you include all code required to reproduce the issue?\n\n- [X] Yes, I have\n\n### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?\n\n- [X] Yes, I have\n",
  "hints_text": "\n",
  "created_at": "2025-01-28T13:05:37Z"
}