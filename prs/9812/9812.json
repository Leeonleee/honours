{
  "repo": "duckdb/duckdb",
  "pull_number": 9812,
  "instance_id": "duckdb__duckdb-9812",
  "issue_numbers": [
    "9262",
    "9262"
  ],
  "base_commit": "275f4a7e9564db08cc3cda211e1f63a7967308cf",
  "patch": "diff --git a/src/include/duckdb/planner/bind_context.hpp b/src/include/duckdb/planner/bind_context.hpp\nindex a0f5461c9a0e..64df2dbdd764 100644\n--- a/src/include/duckdb/planner/bind_context.hpp\n+++ b/src/include/duckdb/planner/bind_context.hpp\n@@ -37,6 +37,8 @@ struct UsingColumnSet {\n //! encountered during the binding process.\n class BindContext {\n public:\n+\tBindContext(Binder &binder);\n+\n \t//! Keep track of recursive CTE references\n \tcase_insensitive_map_t<std::shared_ptr<idx_t>> cte_references;\n \n@@ -151,6 +153,7 @@ class BindContext {\n \tvoid AddBinding(const string &alias, unique_ptr<Binding> binding);\n \n private:\n+\tBinder &binder;\n \t//! The set of bindings\n \tcase_insensitive_map_t<unique_ptr<Binding>> bindings;\n \t//! The list of bindings in insertion order\ndiff --git a/src/planner/bind_context.cpp b/src/planner/bind_context.cpp\nindex 3b86a15bde3d..1ddb73480344 100644\n--- a/src/planner/bind_context.cpp\n+++ b/src/planner/bind_context.cpp\n@@ -15,11 +15,15 @@\n #include \"duckdb/catalog/catalog_entry/view_catalog_entry.hpp\"\n #include \"duckdb/catalog/catalog_entry/table_catalog_entry.hpp\"\n #include \"duckdb/planner/expression_binder/constant_binder.hpp\"\n+#include \"duckdb/planner/binder.hpp\"\n \n #include <algorithm>\n \n namespace duckdb {\n \n+BindContext::BindContext(Binder &binder) : binder(binder) {\n+}\n+\n string BindContext::GetMatchingBinding(const string &column_name) {\n \tstring result;\n \tfor (auto &kv : bindings) {\n@@ -403,6 +407,10 @@ void BindContext::GenerateAllColumnExpressions(StarExpression &expr,\n \t\t\t}\n \t\t}\n \t}\n+\tif (binder.GetBindingMode() == BindingMode::EXTRACT_NAMES) {\n+\t\texpr.exclude_list.clear();\n+\t\texpr.replace_list.clear();\n+\t}\n \tfor (auto &excluded : expr.exclude_list) {\n \t\tif (excluded_columns.find(excluded) == excluded_columns.end()) {\n \t\t\tthrow BinderException(\"Column \\\"%s\\\" in EXCLUDE list not found in %s\", excluded,\ndiff --git a/src/planner/binder.cpp b/src/planner/binder.cpp\nindex a3a23539d258..4097622dbd0f 100644\n--- a/src/planner/binder.cpp\n+++ b/src/planner/binder.cpp\n@@ -50,7 +50,8 @@ shared_ptr<Binder> Binder::CreateBinder(ClientContext &context, optional_ptr<Bin\n }\n \n Binder::Binder(bool, ClientContext &context, shared_ptr<Binder> parent_p, bool inherit_ctes_p)\n-    : context(context), parent(std::move(parent_p)), bound_tables(0), inherit_ctes(inherit_ctes_p) {\n+    : context(context), bind_context(*this), parent(std::move(parent_p)), bound_tables(0),\n+      inherit_ctes(inherit_ctes_p) {\n \tif (parent) {\n \n \t\t// We have to inherit macro and lambda parameter bindings and from the parent binder, if there is a parent.\n",
  "test_patch": "diff --git a/test/api/test_get_table_names.cpp b/test/api/test_get_table_names.cpp\nindex 9fc8113a8c07..9abe4b890752 100644\n--- a/test/api/test_get_table_names.cpp\n+++ b/test/api/test_get_table_names.cpp\n@@ -80,6 +80,16 @@ TEST_CASE(\"Test GetTableNames\", \"[api]\") {\n \tREQUIRE(table_names.size() == 1);\n \tREQUIRE(table_names.count(\"my_table\"));\n \n+\t// * exclude\n+\ttable_names = con.GetTableNames(\"select * exclude (x) from df\");\n+\tREQUIRE(table_names.size() == 1);\n+\tREQUIRE(table_names.count(\"df\"));\n+\n+\t// * replace\n+\ttable_names = con.GetTableNames(\"select * replace (42 as x) from df\");\n+\tREQUIRE(table_names.size() == 1);\n+\tREQUIRE(table_names.count(\"df\"));\n+\n \tif (!db.ExtensionIsLoaded(\"tpch\")) {\n \t\treturn;\n \t}\n",
  "problem_statement": "EXCLUDE clause in get_table_names() causes Binder Error: Column \"x\" in EXCLUDE list not found in FROM clause\n### What happens?\n\nEXCLUDE clause in get_table_names() causes `Binder Error: Column \"x\" in EXCLUDE list not found in FROM clause` error but it's fine in query() mode.\n\n### To Reproduce\n\n```python\r\nimport pandas as pd\r\nimport duckdb\r\n\r\ndf = pd.DataFrame({'x': [1, 2], 'y': [3, 4]})\r\n# Binder Error: Column \"x\" in EXCLUDE list not found in FROM clause\r\ntable_names = duckdb.get_table_names(\" select * exclude (x) from df \")\r\nprint(table_names)\r\n\r\n# but this is okay\r\nres = duckdb.query(\" select * exclude (x) from df \")\r\nprint(res)\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502   y   \u2502\r\n\u2502 int64 \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502     3 \u2502\r\n\u2502     4 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\n\n### OS:\n\nUbuntu 22.04.2 LTS, aarch64\n\n### DuckDB Version:\n\n0.9.0, 0.9.1.dev157\n\n### DuckDB Client:\n\nPython\n\n### Full Name:\n\nMark\n\n### Affiliation:\n\nbq\n\n### Have you tried this on the latest `main` branch?\n\nI have tested with a main build\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] Yes, I have\nEXCLUDE clause in get_table_names() causes Binder Error: Column \"x\" in EXCLUDE list not found in FROM clause\n### What happens?\n\nEXCLUDE clause in get_table_names() causes `Binder Error: Column \"x\" in EXCLUDE list not found in FROM clause` error but it's fine in query() mode.\n\n### To Reproduce\n\n```python\r\nimport pandas as pd\r\nimport duckdb\r\n\r\ndf = pd.DataFrame({'x': [1, 2], 'y': [3, 4]})\r\n# Binder Error: Column \"x\" in EXCLUDE list not found in FROM clause\r\ntable_names = duckdb.get_table_names(\" select * exclude (x) from df \")\r\nprint(table_names)\r\n\r\n# but this is okay\r\nres = duckdb.query(\" select * exclude (x) from df \")\r\nprint(res)\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502   y   \u2502\r\n\u2502 int64 \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502     3 \u2502\r\n\u2502     4 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\n\n### OS:\n\nUbuntu 22.04.2 LTS, aarch64\n\n### DuckDB Version:\n\n0.9.0, 0.9.1.dev157\n\n### DuckDB Client:\n\nPython\n\n### Full Name:\n\nMark\n\n### Affiliation:\n\nbq\n\n### Have you tried this on the latest `main` branch?\n\nI have tested with a main build\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] Yes, I have\n",
  "hints_text": "\n",
  "created_at": "2023-11-27T13:14:28Z"
}