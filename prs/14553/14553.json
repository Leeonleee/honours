{
  "repo": "duckdb/duckdb",
  "pull_number": 14553,
  "instance_id": "duckdb__duckdb-14553",
  "issue_numbers": [
    "14344"
  ],
  "base_commit": "b8c5248b9c18f7cafbdf7992421662adbd95bf38",
  "patch": "diff --git a/src/include/duckdb/planner/table_filter.hpp b/src/include/duckdb/planner/table_filter.hpp\nindex ab4d754c40ea..edcb975cd26a 100644\n--- a/src/include/duckdb/planner/table_filter.hpp\n+++ b/src/include/duckdb/planner/table_filter.hpp\n@@ -45,6 +45,7 @@ class TableFilter {\n \t//! Returns true if the statistics indicate that the segment can contain values that satisfy that filter\n \tvirtual FilterPropagateResult CheckStatistics(BaseStatistics &stats) = 0;\n \tvirtual string ToString(const string &column_name) = 0;\n+\tstring DebugToString();\n \tvirtual unique_ptr<TableFilter> Copy() const = 0;\n \tvirtual bool Equals(const TableFilter &other) const {\n \t\treturn filter_type != other.filter_type;\ndiff --git a/src/planner/table_filter.cpp b/src/planner/table_filter.cpp\nindex 48af721a8020..636a7671d253 100644\n--- a/src/planner/table_filter.cpp\n+++ b/src/planner/table_filter.cpp\n@@ -26,6 +26,10 @@ void TableFilterSet::PushFilter(idx_t column_index, unique_ptr<TableFilter> filt\n \t}\n }\n \n+string TableFilter::DebugToString() {\n+\treturn ToString(\"c0\");\n+}\n+\n void DynamicTableFilterSet::ClearFilters(const PhysicalOperator &op) {\n \tlock_guard<mutex> l(lock);\n \tfilters.erase(op);\ndiff --git a/tools/pythonpkg/src/arrow/arrow_array_stream.cpp b/tools/pythonpkg/src/arrow/arrow_array_stream.cpp\nindex 8a78927aeea2..31b24e86086d 100644\n--- a/tools/pythonpkg/src/arrow/arrow_array_stream.cpp\n+++ b/tools/pythonpkg/src/arrow/arrow_array_stream.cpp\n@@ -272,7 +272,7 @@ py::object GetScalar(Value &constant, const string &timezone_config, const Arrow\n \tcase LogicalTypeId::VARCHAR:\n \t\treturn dataset_scalar(constant.ToString());\n \tcase LogicalTypeId::BLOB:\n-\t\treturn dataset_scalar(constant.GetValueUnsafe<string>());\n+\t\treturn dataset_scalar(py::bytes(constant.GetValueUnsafe<string>()));\n \tcase LogicalTypeId::DECIMAL: {\n \t\tpy::object date_type = py::module_::import(\"pyarrow\").attr(\"decimal128\");\n \t\tuint8_t width;\n",
  "test_patch": "diff --git a/tools/pythonpkg/tests/fast/arrow/test_14344.py b/tools/pythonpkg/tests/fast/arrow/test_14344.py\nnew file mode 100644\nindex 000000000000..522228c0fdb2\n--- /dev/null\n+++ b/tools/pythonpkg/tests/fast/arrow/test_14344.py\n@@ -0,0 +1,25 @@\n+import duckdb\n+import pytest\n+\n+pa = pytest.importorskip(\"pyarrow\")\n+import hashlib\n+\n+\n+def test_14344(duckdb_cursor):\n+    my_table = pa.Table.from_pydict({\"foo\": pa.array([hashlib.sha256(\"foo\".encode()).digest()], type=pa.binary())})\n+    my_table2 = pa.Table.from_pydict(\n+        {\"foo\": pa.array([hashlib.sha256(\"foo\".encode()).digest()], type=pa.binary()), \"a\": [\"123\"]}\n+    )\n+\n+    res = duckdb_cursor.sql(\n+        f\"\"\"\n+\t\tSELECT\n+\t\t\tmy_table2.* EXCLUDE (foo)\n+\t\tFROM\n+\t\t\tmy_table\n+\t\tLEFT JOIN\n+\t\t\tmy_table2\n+\t\tUSING (foo)\n+\t\"\"\"\n+    ).fetchall()\n+    assert res == [('123',)]\n",
  "problem_statement": "[Python Arrow Scan] cannot join blob columns\n### What happens?\r\n\r\nwhen you join by binary column you get an error, duckdb v1.1.1.  works in v1.0.0\r\n\r\n\r\n### To Reproduce\r\n\r\n```\r\nimport duckdb\r\nimport pyarrow as pa\r\nimport hashlib\r\nmy_table = pa.Table.from_pydict({\"foo\": pa.array([hashlib.sha256(\"foo\".encode()).digest()], type=pa.binary())})\r\nmy_table2 = pa.Table.from_pydict({\"foo\": pa.array([hashlib.sha256(\"foo\".encode()).digest()], type=pa.binary()),\"a\": [\"123\"]})\r\nduckdb.sql(f\"\"\"SELECT my_table2.* EXCLUDE (foo) FROM my_table LEFT JOIN my_table2 USING (foo)\"\"\").show()\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nduckdb.duckdb.Error: UnicodeDecodeError: 'utf-8' codec can't decode byte 0xb4 in position 2: invalid start byte\r\n```\r\n\r\n### OS:\r\n\r\nmac\r\n\r\n### DuckDB Version:\r\n\r\n1..1.1\r\n\r\n### DuckDB Client:\r\n\r\nPython\r\n\r\n### Hardware:\r\n\r\n_No response_\r\n\r\n### Full Name:\r\n\r\nJack Zhao\r\n\r\n### Affiliation:\r\n\r\nDelphina.ai\r\n\r\n### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.\r\n\r\nI have tested with a stable release\r\n\r\n### Did you include all relevant data sets for reproducing the issue?\r\n\r\nYes\r\n\r\n### Did you include all code required to reproduce the issue?\r\n\r\n- [X] Yes, I have\r\n\r\n### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?\r\n\r\n- [X] Yes, I have\n",
  "hints_text": "",
  "created_at": "2024-10-25T08:40:19Z"
}