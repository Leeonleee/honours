{
  "repo": "duckdb/duckdb",
  "pull_number": 5531,
  "instance_id": "duckdb__duckdb-5531",
  "issue_numbers": [
    "5380"
  ],
  "base_commit": "a0f3c94081406eee6227acb723dcfb22f415861a",
  "patch": "diff --git a/tools/pythonpkg/src/pyrelation.cpp b/tools/pythonpkg/src/pyrelation.cpp\nindex 892629b19417..f548acff6a3e 100644\n--- a/tools/pythonpkg/src/pyrelation.cpp\n+++ b/tools/pythonpkg/src/pyrelation.cpp\n@@ -659,8 +659,17 @@ unique_ptr<DuckDBPyRelation> DuckDBPyRelation::Query(const string &view_name, co\n \t\tauto query = PragmaShow(*rel->context.GetContext(), parameters);\n \t\treturn Query(view_name, query);\n \t}\n-\tthrow InvalidInputException(\"'DuckDBPyRelation.query' does not accept statements of type %s\",\n-\t                            StatementTypeToString(statement.type));\n+\t{\n+\t\tpy::gil_scoped_release release;\n+\t\tauto query_result = rel->context.GetContext()->Query(move(parser.statements[0]), false);\n+\t\t// Execute it anyways, for creation/altering statements\n+\t\t// We only care that it succeeds, we can't store the result\n+\t\tD_ASSERT(query_result);\n+\t\tif (query_result->HasError()) {\n+\t\t\tquery_result->ThrowError();\n+\t\t}\n+\t}\n+\treturn nullptr;\n }\n \n unique_ptr<DuckDBPyResult> DuckDBPyRelation::Execute() {\n",
  "test_patch": "diff --git a/tools/pythonpkg/tests/fast/relational_api/test_rapi_query.py b/tools/pythonpkg/tests/fast/relational_api/test_rapi_query.py\nindex 70f50bc0eb1c..679e8876e584 100644\n--- a/tools/pythonpkg/tests/fast/relational_api/test_rapi_query.py\n+++ b/tools/pythonpkg/tests/fast/relational_api/test_rapi_query.py\n@@ -57,6 +57,27 @@ def test_query_insert_into_relation(self, tbl_table):\n         with pytest.raises(duckdb.InvalidInputException):\n             rel.insert([5])\n \n+    def test_query_non_select(self):\n+        con = duckdb.connect()\n+        rel = con.query(\"select [1,2,3,4]\");\n+        rel.query(\"relation\", \"create table tbl as select * from relation\")\n+\n+        result = con.execute(\"select * from tbl\").fetchall()\n+        assert result == [([1,2,3,4],)]\n+\n+    def test_query_non_select_fail(self):\n+        con = duckdb.connect()\n+        rel = con.query(\"select [1,2,3,4]\")\n+        con.execute(\"create table tbl as select range(10)\")\n+        # Table already exists\n+        with pytest.raises(duckdb.CatalogException):\n+            rel.query(\"relation\", \"create table tbl as select * from relation\")\n+\n+        # View referenced does not exist\n+        with pytest.raises(duckdb.CatalogException):\n+            rel.query(\"relation\", \"create table tbl as select * from not_a_valid_view\")\n+\n+\n     def test_query_table_unrelated(self, tbl_table):\n         con = duckdb.default_connection\n         rel = con.table(\"tbl\")\n@@ -65,12 +86,3 @@ def test_query_table_unrelated(self, tbl_table):\n         result = rel.execute()\n         assert(result.fetchall() == [(5,)])\n \n-    def test_query_broken(self, tbl_table):\n-        con = duckdb.default_connection\n-        rel = con.query(\"select i from range(10000) tbl(i)\")\n-\n-        with pytest.raises(duckdb.InvalidInputException):\n-            rel = rel.query(\"x\", \"insert into tbl VALUES(5)\")\n-        result = rel.execute()\n-        # The query has no result, so the original relation wasn't executed in the last `rel.query` call\n-        assert(len(result.fetchall()) == 10000)\n",
  "problem_statement": "Python API no longer allows \"COPY\" statements in v0.6\n### What happens?\n\nPrior to version 0.6, `DuckDBPyRelation.query` supported the `COPY` statement.  I used this to perform some ETL work on parquet files in a data pipeline (parquet input, transform, parquet and csv output).  After upgrading to `0.6`, this now produces an `InvalidInputException`.\n\n### To Reproduce\n\nMy own usecase is far more complicated, but here is the minimum needed to reproduce.\r\n\r\n```python\r\nimport duckdb\r\nfrom pathlib import Path\r\n\r\nlocal_path = Path(\"/tmp/test.parq\")\r\n\r\nrel = duckdb.from_parquet(str(local_path))\r\n\r\n# Select subset of columns and write output to new parquet file.\r\nrel.project(\"col_a, col_b, col_c\").query(\r\n    \"tmp_table\", \r\n    \"\"\"\r\n    COPY (SELECT * FROM tmp_table)\r\n    TO '/tmp/out.parq' (FORMAT 'PARQUET', CODEC 'SNAPPY')\r\n    \"\"\"\r\n)\r\n\r\n\r\n\r\nInvalidInputException                     Traceback (most recent call last)\r\nCell In [19], line 1\r\n----> 1 rel.project(\"first_name, last_name\").query(\r\n      2     \"tmp_table\",\r\n      3     \"\"\"\r\n      4     COPY (SELECT * FROM tmp_table)\r\n      5     TO '/tmp/out.parq' (FORMAT 'PARQUET', CODEC 'SNAPPY')\r\n      6     \"\"\"\r\n      7 )\r\n\r\nInvalidInputException: Invalid Input Error: 'DuckDBPyRelation.query' does not accept statements of type COPY\r\n\r\n\r\n\r\n```\n\n### OS:\n\nMacOS and Linux (arm)\n\n### DuckDB Version:\n\n0.6.0\n\n### DuckDB Client:\n\nPython\n\n### Full Name:\n\nErik Wickstrom\n\n### Affiliation:\n\nLiftCertain\n\n### Have you tried this on the latest `master` branch?\n\n- [X] I agree\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] I agree\n",
  "hints_text": "Hi, thanks for the report.\r\n\r\nI can see that this is an issue.. I thought we had another type of method to perform generic queries, the idea is that this does not produce another relation. And `query` returns a DuckDBPyRelation, so in that regard it makes sense to not support these types of queries here.\r\n\r\nBut now there is not a nice way to finalize your chain with a consumption of the relation\r\nAs a workaround currently, you can do this:\r\n```py\r\nview = rel.project(\"i\").create_view(\"tmp_table\")\r\nduckdb.default_connection.execute(\r\n\t\"\"\"\r\n    COPY (SELECT * FROM tmp_table)\r\n    TO 'tmp/out.parq' (FORMAT 'PARQUET', CODEC 'SNAPPY')\r\n\t\"\"\"\r\n)\r\n```\nWe have a `write_csv` method on a relation, maybe a good way to support this is a `write_parquet` function.\r\nThough that's only a very targeted fix, not a replacement for the functionality we lost here",
  "created_at": "2022-11-29T10:24:38Z"
}