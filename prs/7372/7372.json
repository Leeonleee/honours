{
  "repo": "duckdb/duckdb",
  "pull_number": 7372,
  "instance_id": "duckdb__duckdb-7372",
  "issue_numbers": [
    "6189"
  ],
  "base_commit": "f8c93cafd05ecf7850adcdf7e38cf2d7bd0c31e7",
  "patch": "diff --git a/src/execution/index/art/art.cpp b/src/execution/index/art/art.cpp\nindex 431e68d18b0f..86473e446ef9 100644\n--- a/src/execution/index/art/art.cpp\n+++ b/src/execution/index/art/art.cpp\n@@ -1039,6 +1039,9 @@ void ART::InitializeMerge(ARTFlags &flags) {\n bool ART::MergeIndexes(IndexLock &state, Index &other_index) {\n \n \tauto &other_art = other_index.Cast<ART>();\n+\tif (!other_art.tree->IsSet()) {\n+\t\treturn true;\n+\t}\n \n \tif (tree->IsSet()) {\n \t\t//  fully deserialize other_index, and traverse it to increment its buffer IDs\n",
  "test_patch": "diff --git a/test/sql/parallelism/interquery/test_concurrent_index.cpp b/test/sql/parallelism/interquery/test_concurrent_index.cpp\nindex 6e6b47f165e6..82562552292a 100644\n--- a/test/sql/parallelism/interquery/test_concurrent_index.cpp\n+++ b/test/sql/parallelism/interquery/test_concurrent_index.cpp\n@@ -81,8 +81,9 @@ static void append_to_integers(DuckDB *db, idx_t threadnr) {\n }\n \n TEST_CASE(\"Concurrent writes during index creation\", \"[index][.]\") {\n-\t// FIXME: this breaks sporadically on CI\n+\t// FIXME: this is extremely slow due to an overhead in calls to the index vacuum operation (#7406)\n \treturn;\n+\n \tduckdb::unique_ptr<QueryResult> result;\n \tDuckDB db(nullptr);\n \tConnection con(db);\n@@ -355,8 +356,9 @@ static void join_integers(Connection *con, bool *index_join_success, idx_t threa\n }\n \n TEST_CASE(\"Concurrent appends during index join\", \"[interquery][.]\") {\n-\t// FIXME: this test occassionally fails in the CI, likely due to a race condition in the index code\n+\t// FIXME: this is extremely slow due to an overhead in calls to the index vacuum operation (#7406)\n \treturn;\n+\n \tduckdb::unique_ptr<QueryResult> result;\n \tDuckDB db(nullptr);\n \tConnection con(db);\n",
  "problem_statement": "Concurrent appends during index join fail\n### What happens?\n\nThe following test fails in the CI on `relassert`.\r\n\r\n![Screen Shot 2023-02-10 at 10 15 39](https://user-images.githubusercontent.com/44262898/218052065-a46d0a2d-0026-43fe-a1ce-6762aa0e72d2.png)\r\n\n\n### To Reproduce\n\nStill working on that. Seems to run locally. It might be related to fuzzer issues 41 and 44 still failing (#5984, #6168).\n\n### OS:\n\nUbuntu 20.04.5\n\n### DuckDB Version:\n\nmaster branch\n\n### DuckDB Client:\n\ntestrunner\n\n### Full Name:\n\nTania Bogatsch\n\n### Affiliation:\n\nDuckDB Labs\n\n### Have you tried this on the latest `master` branch?\n\n- [X] I agree\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] I agree\n",
  "hints_text": "On a related note, the `Concurrent reads during index creation` test occassionally segfaults as well:\r\n\r\n```bash\r\nuntil [[ $? != 0 ]]; do build/release/test/unittest \"Concurrent reads during index creation\"; done\r\n\r\n< many successes>\r\n...\r\n[0/1] (0%): Concurrent reads during index creation                              \r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\nunittest is a Catch v2.13.7 host application.\r\nRun with -? for options\r\n\r\n-------------------------------------------------------------------------------\r\nConcurrent reads during index creation\r\n-------------------------------------------------------------------------------\r\n/Users/myth/Programs/duckdb-bugfix/test/sql/parallelism/interquery/test_concurrent_index.cpp:29\r\n...............................................................................\r\n\r\n/Users/myth/Programs/duckdb-bugfix/test/sql/parallelism/interquery/test_concurrent_index.cpp:29: FAILED:\r\n  {Unknown expression after the reported line}\r\ndue to a fatal error condition:\r\n  SIGSEGV - Segmentation violation signal\r\n\r\n===============================================================================\r\ntest cases: 1 | 1 failed\r\nassertions: 2 | 1 passed | 1 failed\r\n```\r\n\r\nPerhaps investigate these issues with the thread sanitizer when you have time.",
  "created_at": "2023-05-05T09:03:22Z"
}