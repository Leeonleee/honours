{
  "repo": "duckdb/duckdb",
  "pull_number": 7111,
  "instance_id": "duckdb__duckdb-7111",
  "issue_numbers": [
    "7093",
    "7093"
  ],
  "base_commit": "544ca6d4fa2bc9451c07b514309b1fdf8a05e574",
  "patch": "diff --git a/src/planner/binder/tableref/bind_basetableref.cpp b/src/planner/binder/tableref/bind_basetableref.cpp\nindex 4813b754bc8c..03968a16ffd3 100644\n--- a/src/planner/binder/tableref/bind_basetableref.cpp\n+++ b/src/planner/binder/tableref/bind_basetableref.cpp\n@@ -66,6 +66,21 @@ unique_ptr<BoundTableRef> Binder::Bind(BaseTableRef &ref) {\n \tBindSchemaOrCatalog(ref.catalog_name, ref.schema_name);\n \tauto table_or_view = Catalog::GetEntry(context, CatalogType::TABLE_ENTRY, ref.catalog_name, ref.schema_name,\n \t                                       ref.table_name, true, error_context);\n+\t// we still didn't find the table\n+\tif (GetBindingMode() == BindingMode::EXTRACT_NAMES) {\n+\t\tif (!table_or_view || table_or_view->type == CatalogType::TABLE_ENTRY) {\n+\t\t\t// if we are in EXTRACT_NAMES, we create a dummy table ref\n+\t\t\tAddTableName(ref.table_name);\n+\n+\t\t\t// add a bind context entry\n+\t\t\tauto table_index = GenerateTableIndex();\n+\t\t\tauto alias = ref.alias.empty() ? ref.table_name : ref.alias;\n+\t\t\tvector<LogicalType> types {LogicalType::INTEGER};\n+\t\t\tvector<string> names {\"__dummy_col\" + to_string(table_index)};\n+\t\t\tbind_context.AddGenericBinding(table_index, alias, names, types);\n+\t\t\treturn make_uniq_base<BoundTableRef, BoundEmptyTableRef>(table_index);\n+\t\t}\n+\t}\n \tif (!table_or_view) {\n \t\tstring table_name = ref.catalog_name;\n \t\tif (!ref.schema_name.empty()) {\n@@ -94,19 +109,6 @@ unique_ptr<BoundTableRef> Binder::Bind(BaseTableRef &ref) {\n \t\t\t}\n \t\t}\n \n-\t\t// we still didn't find the table\n-\t\tif (GetBindingMode() == BindingMode::EXTRACT_NAMES) {\n-\t\t\t// if we are in EXTRACT_NAMES, we create a dummy table ref\n-\t\t\tAddTableName(table_name);\n-\n-\t\t\t// add a bind context entry\n-\t\t\tauto table_index = GenerateTableIndex();\n-\t\t\tauto alias = ref.alias.empty() ? table_name : ref.alias;\n-\t\t\tvector<LogicalType> types {LogicalType::INTEGER};\n-\t\t\tvector<string> names {\"__dummy_col\" + to_string(table_index)};\n-\t\t\tbind_context.AddGenericBinding(table_index, alias, names, types);\n-\t\t\treturn make_uniq_base<BoundTableRef, BoundEmptyTableRef>(table_index);\n-\t\t}\n \t\t// could not find an alternative: bind again to get the error\n \t\ttable_or_view = Catalog::GetEntry(context, CatalogType::TABLE_ENTRY, ref.catalog_name, ref.schema_name,\n \t\t                                  ref.table_name, false, error_context);\n@@ -164,8 +166,8 @@ unique_ptr<BoundTableRef> Binder::Bind(BaseTableRef &ref) {\n \t\tD_ASSERT(bound_child->type == TableReferenceType::SUBQUERY);\n \t\t// verify that the types and names match up with the expected types and names\n \t\tauto &bound_subquery = bound_child->Cast<BoundSubqueryRef>();\n-\t\t;\n-\t\tif (bound_subquery.subquery->types != view_catalog_entry->types) {\n+\t\tif (GetBindingMode() != BindingMode::EXTRACT_NAMES &&\n+\t\t    bound_subquery.subquery->types != view_catalog_entry->types) {\n \t\t\tthrow BinderException(\"Contents of view were altered: types don't match!\");\n \t\t}\n \t\tbind_context.AddView(bound_subquery.subquery->GetRootIndex(), subquery.alias, subquery,\n",
  "test_patch": "diff --git a/test/api/test_get_table_names.cpp b/test/api/test_get_table_names.cpp\nindex a5598d807af5..9fc8113a8c07 100644\n--- a/test/api/test_get_table_names.cpp\n+++ b/test/api/test_get_table_names.cpp\n@@ -19,6 +19,8 @@ TEST_CASE(\"Test GetTableNames\", \"[api]\") {\n \tREQUIRE(table_names.size() == 1);\n \tREQUIRE(table_names.count(\"my_table\"));\n \n+\tREQUIRE_NO_FAIL(con.Query(\"CREATE TABLE my_table(i INT)\"));\n+\n \t// fetch a specific column\n \ttable_names = con.GetTableNames(\"SELECT col_a FROM my_table\");\n \tREQUIRE(table_names.size() == 1);\n@@ -71,146 +73,160 @@ TEST_CASE(\"Test GetTableNames\", \"[api]\") {\n \tREQUIRE(table_names.count(\"my_table\"));\n \tREQUIRE(table_names.count(\"my_table2\"));\n \n+\t// views are expanded\n+\tREQUIRE_NO_FAIL(con.Query(\"CREATE VIEW v1 AS SELECT * FROM my_table\"));\n+\n+\ttable_names = con.GetTableNames(\"SELECT col_a FROM v1\");\n+\tREQUIRE(table_names.size() == 1);\n+\tREQUIRE(table_names.count(\"my_table\"));\n+\n \tif (!db.ExtensionIsLoaded(\"tpch\")) {\n \t\treturn;\n \t}\n \n \t// TPCH\n-\ttable_names = con.GetTableNames(\"PRAGMA tpch(1)\");\n-\tREQUIRE(table_names.size() == 1);\n-\tREQUIRE(table_names.count(\"lineitem\"));\n-\n-\ttable_names = con.GetTableNames(\"PRAGMA tpch(2)\");\n-\tREQUIRE(table_names.size() == 5);\n-\tREQUIRE(table_names.count(\"part\"));\n-\tREQUIRE(table_names.count(\"supplier\"));\n-\tREQUIRE(table_names.count(\"partsupp\"));\n-\tREQUIRE(table_names.count(\"nation\"));\n-\tREQUIRE(table_names.count(\"region\"));\n-\n-\ttable_names = con.GetTableNames(\"PRAGMA tpch(3)\");\n-\tREQUIRE(table_names.size() == 3);\n-\tREQUIRE(table_names.count(\"customer\"));\n-\tREQUIRE(table_names.count(\"orders\"));\n-\tREQUIRE(table_names.count(\"lineitem\"));\n-\n-\ttable_names = con.GetTableNames(\"PRAGMA tpch(4)\");\n-\tREQUIRE(table_names.size() == 2);\n-\tREQUIRE(table_names.count(\"orders\"));\n-\tREQUIRE(table_names.count(\"lineitem\"));\n-\n-\ttable_names = con.GetTableNames(\"PRAGMA tpch(5)\");\n-\tREQUIRE(table_names.size() == 6);\n-\tREQUIRE(table_names.count(\"customer\"));\n-\tREQUIRE(table_names.count(\"orders\"));\n-\tREQUIRE(table_names.count(\"lineitem\"));\n-\tREQUIRE(table_names.count(\"supplier\"));\n-\tREQUIRE(table_names.count(\"nation\"));\n-\tREQUIRE(table_names.count(\"region\"));\n-\n-\ttable_names = con.GetTableNames(\"PRAGMA tpch(6)\");\n-\tREQUIRE(table_names.size() == 1);\n-\tREQUIRE(table_names.count(\"lineitem\"));\n-\n-\ttable_names = con.GetTableNames(\"PRAGMA tpch(7)\");\n-\tREQUIRE(table_names.size() == 5);\n-\tREQUIRE(table_names.count(\"supplier\"));\n-\tREQUIRE(table_names.count(\"lineitem\"));\n-\tREQUIRE(table_names.count(\"orders\"));\n-\tREQUIRE(table_names.count(\"customer\"));\n-\tREQUIRE(table_names.count(\"nation\"));\n-\n-\ttable_names = con.GetTableNames(\"PRAGMA tpch(8)\");\n-\tREQUIRE(table_names.size() == 7);\n-\tREQUIRE(table_names.count(\"part\"));\n-\tREQUIRE(table_names.count(\"supplier\"));\n-\tREQUIRE(table_names.count(\"lineitem\"));\n-\tREQUIRE(table_names.count(\"orders\"));\n-\tREQUIRE(table_names.count(\"customer\"));\n-\tREQUIRE(table_names.count(\"nation\"));\n-\tREQUIRE(table_names.count(\"region\"));\n-\n-\ttable_names = con.GetTableNames(\"PRAGMA tpch(9)\");\n-\tREQUIRE(table_names.size() == 6);\n-\tREQUIRE(table_names.count(\"part\"));\n-\tREQUIRE(table_names.count(\"supplier\"));\n-\tREQUIRE(table_names.count(\"lineitem\"));\n-\tREQUIRE(table_names.count(\"partsupp\"));\n-\tREQUIRE(table_names.count(\"orders\"));\n-\tREQUIRE(table_names.count(\"nation\"));\n-\n-\ttable_names = con.GetTableNames(\"PRAGMA tpch(10)\");\n-\tREQUIRE(table_names.size() == 4);\n-\tREQUIRE(table_names.count(\"customer\"));\n-\tREQUIRE(table_names.count(\"orders\"));\n-\tREQUIRE(table_names.count(\"lineitem\"));\n-\tREQUIRE(table_names.count(\"nation\"));\n-\n-\ttable_names = con.GetTableNames(\"PRAGMA tpch(11)\");\n-\tREQUIRE(table_names.size() == 3);\n-\tREQUIRE(table_names.count(\"partsupp\"));\n-\tREQUIRE(table_names.count(\"supplier\"));\n-\tREQUIRE(table_names.count(\"nation\"));\n-\n-\ttable_names = con.GetTableNames(\"PRAGMA tpch(12)\");\n-\tREQUIRE(table_names.size() == 2);\n-\tREQUIRE(table_names.count(\"orders\"));\n-\tREQUIRE(table_names.count(\"lineitem\"));\n-\n-\ttable_names = con.GetTableNames(\"PRAGMA tpch(13)\");\n-\tREQUIRE(table_names.size() == 2);\n-\tREQUIRE(table_names.count(\"customer\"));\n-\tREQUIRE(table_names.count(\"orders\"));\n-\n-\ttable_names = con.GetTableNames(\"PRAGMA tpch(14)\");\n-\tREQUIRE(table_names.size() == 2);\n-\tREQUIRE(table_names.count(\"part\"));\n-\tREQUIRE(table_names.count(\"lineitem\"));\n-\n-\ttable_names = con.GetTableNames(\"PRAGMA tpch(15)\");\n-\tREQUIRE(table_names.size() == 2);\n-\tREQUIRE(table_names.count(\"supplier\"));\n-\tREQUIRE(table_names.count(\"lineitem\"));\n-\n-\ttable_names = con.GetTableNames(\"PRAGMA tpch(16)\");\n-\tREQUIRE(table_names.size() == 3);\n-\tREQUIRE(table_names.count(\"partsupp\"));\n-\tREQUIRE(table_names.count(\"part\"));\n-\tREQUIRE(table_names.count(\"supplier\"));\n-\n-\ttable_names = con.GetTableNames(\"PRAGMA tpch(17)\");\n-\tREQUIRE(table_names.size() == 2);\n-\tREQUIRE(table_names.count(\"lineitem\"));\n-\tREQUIRE(table_names.count(\"part\"));\n-\n-\ttable_names = con.GetTableNames(\"PRAGMA tpch(18)\");\n-\tREQUIRE(table_names.size() == 3);\n-\tREQUIRE(table_names.count(\"customer\"));\n-\tREQUIRE(table_names.count(\"orders\"));\n-\tREQUIRE(table_names.count(\"lineitem\"));\n-\n-\ttable_names = con.GetTableNames(\"PRAGMA tpch(19)\");\n-\tREQUIRE(table_names.size() == 2);\n-\tREQUIRE(table_names.count(\"lineitem\"));\n-\tREQUIRE(table_names.count(\"part\"));\n-\n-\ttable_names = con.GetTableNames(\"PRAGMA tpch(20)\");\n-\tREQUIRE(table_names.size() == 5);\n-\tREQUIRE(table_names.count(\"supplier\"));\n-\tREQUIRE(table_names.count(\"nation\"));\n-\tREQUIRE(table_names.count(\"partsupp\"));\n-\tREQUIRE(table_names.count(\"part\"));\n-\tREQUIRE(table_names.count(\"lineitem\"));\n-\n-\ttable_names = con.GetTableNames(\"PRAGMA tpch(21)\");\n-\tREQUIRE(table_names.size() == 4);\n-\tREQUIRE(table_names.count(\"supplier\"));\n-\tREQUIRE(table_names.count(\"lineitem\"));\n-\tREQUIRE(table_names.count(\"orders\"));\n-\tREQUIRE(table_names.count(\"nation\"));\n-\n-\ttable_names = con.GetTableNames(\"PRAGMA tpch(22)\");\n-\tREQUIRE(table_names.size() == 2);\n-\tREQUIRE(table_names.count(\"customer\"));\n-\tREQUIRE(table_names.count(\"orders\"));\n+\t// run all TPC-H queries twice\n+\t// one WITHOUT the tables in the catalog\n+\t// once WITH the tables in the catalog\n+\tfor (idx_t i = 0; i < 2; i++) {\n+\t\ttable_names = con.GetTableNames(\"PRAGMA tpch(1)\");\n+\t\tREQUIRE(table_names.size() == 1);\n+\t\tREQUIRE(table_names.count(\"lineitem\"));\n+\n+\t\ttable_names = con.GetTableNames(\"PRAGMA tpch(2)\");\n+\t\tREQUIRE(table_names.size() == 5);\n+\t\tREQUIRE(table_names.count(\"part\"));\n+\t\tREQUIRE(table_names.count(\"supplier\"));\n+\t\tREQUIRE(table_names.count(\"partsupp\"));\n+\t\tREQUIRE(table_names.count(\"nation\"));\n+\t\tREQUIRE(table_names.count(\"region\"));\n+\n+\t\ttable_names = con.GetTableNames(\"PRAGMA tpch(3)\");\n+\t\tREQUIRE(table_names.size() == 3);\n+\t\tREQUIRE(table_names.count(\"customer\"));\n+\t\tREQUIRE(table_names.count(\"orders\"));\n+\t\tREQUIRE(table_names.count(\"lineitem\"));\n+\n+\t\ttable_names = con.GetTableNames(\"PRAGMA tpch(4)\");\n+\t\tREQUIRE(table_names.size() == 2);\n+\t\tREQUIRE(table_names.count(\"orders\"));\n+\t\tREQUIRE(table_names.count(\"lineitem\"));\n+\n+\t\ttable_names = con.GetTableNames(\"PRAGMA tpch(5)\");\n+\t\tREQUIRE(table_names.size() == 6);\n+\t\tREQUIRE(table_names.count(\"customer\"));\n+\t\tREQUIRE(table_names.count(\"orders\"));\n+\t\tREQUIRE(table_names.count(\"lineitem\"));\n+\t\tREQUIRE(table_names.count(\"supplier\"));\n+\t\tREQUIRE(table_names.count(\"nation\"));\n+\t\tREQUIRE(table_names.count(\"region\"));\n+\n+\t\ttable_names = con.GetTableNames(\"PRAGMA tpch(6)\");\n+\t\tREQUIRE(table_names.size() == 1);\n+\t\tREQUIRE(table_names.count(\"lineitem\"));\n+\n+\t\ttable_names = con.GetTableNames(\"PRAGMA tpch(7)\");\n+\t\tREQUIRE(table_names.size() == 5);\n+\t\tREQUIRE(table_names.count(\"supplier\"));\n+\t\tREQUIRE(table_names.count(\"lineitem\"));\n+\t\tREQUIRE(table_names.count(\"orders\"));\n+\t\tREQUIRE(table_names.count(\"customer\"));\n+\t\tREQUIRE(table_names.count(\"nation\"));\n+\n+\t\ttable_names = con.GetTableNames(\"PRAGMA tpch(8)\");\n+\t\tREQUIRE(table_names.size() == 7);\n+\t\tREQUIRE(table_names.count(\"part\"));\n+\t\tREQUIRE(table_names.count(\"supplier\"));\n+\t\tREQUIRE(table_names.count(\"lineitem\"));\n+\t\tREQUIRE(table_names.count(\"orders\"));\n+\t\tREQUIRE(table_names.count(\"customer\"));\n+\t\tREQUIRE(table_names.count(\"nation\"));\n+\t\tREQUIRE(table_names.count(\"region\"));\n+\n+\t\ttable_names = con.GetTableNames(\"PRAGMA tpch(9)\");\n+\t\tREQUIRE(table_names.size() == 6);\n+\t\tREQUIRE(table_names.count(\"part\"));\n+\t\tREQUIRE(table_names.count(\"supplier\"));\n+\t\tREQUIRE(table_names.count(\"lineitem\"));\n+\t\tREQUIRE(table_names.count(\"partsupp\"));\n+\t\tREQUIRE(table_names.count(\"orders\"));\n+\t\tREQUIRE(table_names.count(\"nation\"));\n+\n+\t\ttable_names = con.GetTableNames(\"PRAGMA tpch(10)\");\n+\t\tREQUIRE(table_names.size() == 4);\n+\t\tREQUIRE(table_names.count(\"customer\"));\n+\t\tREQUIRE(table_names.count(\"orders\"));\n+\t\tREQUIRE(table_names.count(\"lineitem\"));\n+\t\tREQUIRE(table_names.count(\"nation\"));\n+\n+\t\ttable_names = con.GetTableNames(\"PRAGMA tpch(11)\");\n+\t\tREQUIRE(table_names.size() == 3);\n+\t\tREQUIRE(table_names.count(\"partsupp\"));\n+\t\tREQUIRE(table_names.count(\"supplier\"));\n+\t\tREQUIRE(table_names.count(\"nation\"));\n+\n+\t\ttable_names = con.GetTableNames(\"PRAGMA tpch(12)\");\n+\t\tREQUIRE(table_names.size() == 2);\n+\t\tREQUIRE(table_names.count(\"orders\"));\n+\t\tREQUIRE(table_names.count(\"lineitem\"));\n+\n+\t\ttable_names = con.GetTableNames(\"PRAGMA tpch(13)\");\n+\t\tREQUIRE(table_names.size() == 2);\n+\t\tREQUIRE(table_names.count(\"customer\"));\n+\t\tREQUIRE(table_names.count(\"orders\"));\n+\n+\t\ttable_names = con.GetTableNames(\"PRAGMA tpch(14)\");\n+\t\tREQUIRE(table_names.size() == 2);\n+\t\tREQUIRE(table_names.count(\"part\"));\n+\t\tREQUIRE(table_names.count(\"lineitem\"));\n+\n+\t\ttable_names = con.GetTableNames(\"PRAGMA tpch(15)\");\n+\t\tREQUIRE(table_names.size() == 2);\n+\t\tREQUIRE(table_names.count(\"supplier\"));\n+\t\tREQUIRE(table_names.count(\"lineitem\"));\n+\n+\t\ttable_names = con.GetTableNames(\"PRAGMA tpch(16)\");\n+\t\tREQUIRE(table_names.size() == 3);\n+\t\tREQUIRE(table_names.count(\"partsupp\"));\n+\t\tREQUIRE(table_names.count(\"part\"));\n+\t\tREQUIRE(table_names.count(\"supplier\"));\n+\n+\t\ttable_names = con.GetTableNames(\"PRAGMA tpch(17)\");\n+\t\tREQUIRE(table_names.size() == 2);\n+\t\tREQUIRE(table_names.count(\"lineitem\"));\n+\t\tREQUIRE(table_names.count(\"part\"));\n+\n+\t\ttable_names = con.GetTableNames(\"PRAGMA tpch(18)\");\n+\t\tREQUIRE(table_names.size() == 3);\n+\t\tREQUIRE(table_names.count(\"customer\"));\n+\t\tREQUIRE(table_names.count(\"orders\"));\n+\t\tREQUIRE(table_names.count(\"lineitem\"));\n+\n+\t\ttable_names = con.GetTableNames(\"PRAGMA tpch(19)\");\n+\t\tREQUIRE(table_names.size() == 2);\n+\t\tREQUIRE(table_names.count(\"lineitem\"));\n+\t\tREQUIRE(table_names.count(\"part\"));\n+\n+\t\ttable_names = con.GetTableNames(\"PRAGMA tpch(20)\");\n+\t\tREQUIRE(table_names.size() == 5);\n+\t\tREQUIRE(table_names.count(\"supplier\"));\n+\t\tREQUIRE(table_names.count(\"nation\"));\n+\t\tREQUIRE(table_names.count(\"partsupp\"));\n+\t\tREQUIRE(table_names.count(\"part\"));\n+\t\tREQUIRE(table_names.count(\"lineitem\"));\n+\n+\t\ttable_names = con.GetTableNames(\"PRAGMA tpch(21)\");\n+\t\tREQUIRE(table_names.size() == 4);\n+\t\tREQUIRE(table_names.count(\"supplier\"));\n+\t\tREQUIRE(table_names.count(\"lineitem\"));\n+\t\tREQUIRE(table_names.count(\"orders\"));\n+\t\tREQUIRE(table_names.count(\"nation\"));\n+\n+\t\ttable_names = con.GetTableNames(\"PRAGMA tpch(22)\");\n+\t\tREQUIRE(table_names.size() == 2);\n+\t\tREQUIRE(table_names.count(\"customer\"));\n+\t\tREQUIRE(table_names.count(\"orders\"));\n+\n+\t\tREQUIRE_NO_FAIL(con.Query(\"CALL dbgen(sf=0)\"));\n+\t}\n }\n",
  "problem_statement": "get_table_names missing certain tables\n### What happens?\n\nget_table_names is not returning all the table names used by a query. \n\n### To Reproduce\n\n```\r\nimport duckdb\r\ncon = duckdb.connect()\r\ncon.execute(\"CREATE TABLE xyz as SELECT * FROM range(100) t(x)\")\r\nprint(con.get_table_names(\"SELECT * FROM tbl1, xyz\"))\r\n```\r\n> {'tbl1'}\r\n\r\nExpected: {'tbl1', 'xyz'}\n\n### OS:\n\nWindows\n\n### DuckDB Version:\n\n0.7.2.dev1734\n\n### DuckDB Client:\n\nPython\n\n### Full Name:\n\nPaul Timmins\n\n### Affiliation:\n\nIqmo\n\n### Have you tried this on the latest `master` branch?\n\n- [X] I agree\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] I agree\nget_table_names missing certain tables\n### What happens?\n\nget_table_names is not returning all the table names used by a query. \n\n### To Reproduce\n\n```\r\nimport duckdb\r\ncon = duckdb.connect()\r\ncon.execute(\"CREATE TABLE xyz as SELECT * FROM range(100) t(x)\")\r\nprint(con.get_table_names(\"SELECT * FROM tbl1, xyz\"))\r\n```\r\n> {'tbl1'}\r\n\r\nExpected: {'tbl1', 'xyz'}\n\n### OS:\n\nWindows\n\n### DuckDB Version:\n\n0.7.2.dev1734\n\n### DuckDB Client:\n\nPython\n\n### Full Name:\n\nPaul Timmins\n\n### Affiliation:\n\nIqmo\n\n### Have you tried this on the latest `master` branch?\n\n- [X] I agree\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] I agree\n",
  "hints_text": "\n",
  "created_at": "2023-04-17T11:24:32Z"
}