{
  "repo": "duckdb/duckdb",
  "pull_number": 1601,
  "instance_id": "duckdb__duckdb-1601",
  "issue_numbers": [
    "1600"
  ],
  "base_commit": "bd4a90b70cb90bd6dd7c63dd3d72d6358204eeaa",
  "patch": "diff --git a/tools/rpkg/R/Connection.R b/tools/rpkg/R/Connection.R\nindex 71938f585af8..dd01eb8ba61f 100644\n--- a/tools/rpkg/R/Connection.R\n+++ b/tools/rpkg/R/Connection.R\n@@ -16,8 +16,7 @@ setClass(\"duckdb_driver\", contains = \"DBIDriver\", slots = list(database_ref = \"e\n #' @export\n setClass(\"duckdb_connection\",\n   contains = \"DBIConnection\",\n-  slots = list(dbdir = \"character\",\n-               conn_ref = \"externalptr\",\n+  slots = list(conn_ref = \"externalptr\",\n                driver = \"duckdb_driver\",\n                debug = \"logical\",\n                timezone_out = \"character\",\n@@ -298,9 +297,10 @@ setMethod(\n setMethod(\n   \"dbGetInfo\", \"duckdb_connection\",\n   function(dbObj, ...) {\n+    info <- dbGetInfo(dbObj@driver)\n     list(\n-      dbname = dbObj@dbdir,\n-      db.version = NA,\n+      dbname = info$dbname,\n+      db.version = info$driver.version,\n       username = NA,\n       host = NA,\n       port = NA\ndiff --git a/tools/rpkg/R/Driver.R b/tools/rpkg/R/Driver.R\nindex 6b92386c2e0b..17bfc885b39c 100644\n--- a/tools/rpkg/R/Driver.R\n+++ b/tools/rpkg/R/Driver.R\n@@ -206,7 +206,10 @@ setMethod(\n setMethod(\n   \"dbGetInfo\", \"duckdb_driver\",\n   function(dbObj, ...) {\n-    list(driver.version = NA, client.version = NA)\n+    con <- dbConnect(dbObj)\n+    version <- dbGetQuery(con, \"select library_version from pragma_version()\")[[1]][[1]]\n+    dbDisconnect(con)\n+    list(driver.version = version, client.version = version, dbname=dbObj@dbdir)\n   }\n )\n \n",
  "test_patch": "diff --git a/tools/rpkg/tests/testthat/test_dbinfo.R b/tools/rpkg/tests/testthat/test_dbinfo.R\nnew file mode 100644\nindex 000000000000..fee51cc2d459\n--- /dev/null\n+++ b/tools/rpkg/tests/testthat/test_dbinfo.R\n@@ -0,0 +1,17 @@\n+library(\"testthat\")\n+library(\"DBI\")\n+test_that(\"dbGetInfo returns something meaningful\", {\n+  dbdir <- tempfile()\n+  drv <- duckdb::duckdb(dbdir)\n+\n+  info_drv <- dbGetInfo(drv)\n+  expect_equal(info_drv$dbname, dbdir)\n+  expect_true(grepl(\"\\\\d+\\\\.\\\\d+\\\\.\\\\d+\", info_drv$client.version))\n+  expect_true(grepl(\"\\\\d+\\\\.\\\\d+\\\\.\\\\d+\", info_drv$driver.version))\n+\n+  con <- dbConnect(drv)\n+  on.exit(dbDisconnect(con, shutdown = TRUE))\n+  info_con <- dbGetInfo(con)\n+  expect_equal(info_con$dbname, dbdir)\n+  expect_true(grepl(\"\\\\d+\\\\.\\\\d+\\\\.\\\\d+\", info_con$db.version))\n+})\n\\ No newline at end of file\ndiff --git a/tools/rpkg/tests/testthat/test_timezone.R b/tools/rpkg/tests/testthat/test_timezone.R\nindex 2ba3ed638e75..b2ca5760ccdd 100644\n--- a/tools/rpkg/tests/testthat/test_timezone.R\n+++ b/tools/rpkg/tests/testthat/test_timezone.R\n@@ -26,6 +26,8 @@ test_that(\"timezone_out works with a specified timezone\", {\n })\n \n test_that(\"timezone_out works with '' and converts to local timezime\", {\n+  unlockBinding(\".sys.timezone\", baseenv())\n+  on.exit(lockBinding(\".sys.timezone\", baseenv()), add = TRUE)\n   withr::local_timezone(\"Pacific/Tahiti\")\n   con <- dbConnect(duckdb(), timezone_out = \"\")\n   on.exit(dbDisconnect(con, shutdown = TRUE))\n@@ -36,6 +38,8 @@ test_that(\"timezone_out works with '' and converts to local timezime\", {\n })\n \n test_that(\"timezone_out works with Sys.timezone\", {\n+  unlockBinding(\".sys.timezone\", baseenv())\n+  on.exit(lockBinding(\".sys.timezone\", baseenv()), add = TRUE)\n   withr::local_timezone(\"Pacific/Tahiti\")\n   con <- dbConnect(duckdb(), timezone_out = Sys.timezone())\n   on.exit(dbDisconnect(con, shutdown = TRUE))\n@@ -64,6 +68,8 @@ test_that(\"timezone_out works with a specified timezone and tz_out_convert = 'fo\n })\n \n test_that(\"timezone_out works with '' and tz_out_convert = 'force': forces local timezime\", {\n+  unlockBinding(\".sys.timezone\", baseenv())\n+  on.exit(lockBinding(\".sys.timezone\", baseenv()), add = TRUE)\n   withr::local_timezone(\"Pacific/Tahiti\")\n   con <- dbConnect(duckdb(), timezone_out = \"\", tz_out_convert = 'force')\n   on.exit(dbDisconnect(con, shutdown = TRUE))\n@@ -74,6 +80,8 @@ test_that(\"timezone_out works with '' and tz_out_convert = 'force': forces local\n })\n \n test_that(\"timezone_out works with a specified local timezone and tz_out_convert = 'force': forces local timezime\", {\n+  unlockBinding(\".sys.timezone\", baseenv())\n+  on.exit(lockBinding(\".sys.timezone\", baseenv()), add = TRUE)\n   withr::local_timezone(\"Pacific/Tahiti\")\n   con <- dbConnect(duckdb(), timezone_out = Sys.timezone(), tz_out_convert = 'force')\n   on.exit(dbDisconnect(con, shutdown = TRUE))\n@@ -98,4 +106,3 @@ test_that(\"timezone_out gives a warning with NULL timezone, and converts to UTC\"\n test_that(\"dbConnect fails when tz_out_convert is misspecified\", {\n   expect_error(dbConnect(duckdb(), tz_out_convert = \"nope\"))\n })\n-\n",
  "problem_statement": "R API support for `DBI::dbGetInfo()`\nI am not sure if this is intended behavior so please feel free to close this issue if irrelevant.\r\n\r\nThe output of a `duckdb::duckdb()` DBI connection in `DBI::dbGetInfo()` is useless and I wonder if it is intended or not. I'll try to show by comparing to the output of an `RSQLite::SQLite()` connection. \r\n\r\nI am depending on this function to get the path to the db. Is there a better method to get the path to the db via the connection?\r\n\r\nThanks!\r\n\r\n``` r\r\ncon_sqlite <- DBI::dbConnect(RSQLite::SQLite(), tempfile())\r\ncon_duckdb <- DBI::dbConnect(duckdb::duckdb(), tempfile())\r\nDBI::dbGetInfo(con_sqlite)\r\n#> $db.version\r\n#> [1] \"3.35.2\"\r\n#> \r\n#> $dbname\r\n#> [1] \"C:\\\\Users\\\\{username}\\\\AppData\\\\Local\\\\Temp\\\\Rtmpy4fGoA\\\\file401c136a1aa7\"\r\n#> \r\n#> $username\r\n#> [1] NA\r\n#> \r\n#> $host\r\n#> [1] NA\r\n#> \r\n#> $port\r\n#> [1] NA\r\nDBI::dbGetInfo(con_duckdb)\r\n#> $dbname\r\n#> character(0)\r\n#> \r\n#> $db.version\r\n#> [1] NA\r\n#> \r\n#> $username\r\n#> [1] NA\r\n#> \r\n#> $host\r\n#> [1] NA\r\n#> \r\n#> $port\r\n#> [1] NA\r\n```\r\n\r\n<sup>Created on 2021-04-13 by the [reprex package](https://reprex.tidyverse.org) (v2.0.0)</sup>\r\n\n",
  "hints_text": "You are absolutely right, this should be extended. ",
  "created_at": "2021-04-13T13:41:55Z"
}