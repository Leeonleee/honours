You will be provided with a partial code base and an issue statement explaining a problem to resolve.
In your output, give nothing but the code (no markdown) so that your output can be copy pasted and run immediately with no changes.
In the patch file, please make sure to include the line numbers and a blank line at the end so it can be applied using git apply.

<issue>
Regression: Replacement Scans Misbehave in v1.1
### What happens?

When importing functions that use `duckdb.sql("...")` from modules, they don't "see" the namespace of in-memory dataframes anymore.

This was working fine in v1.0.

### To Reproduce

## 1) create file `ddb.py` defining a query string with a method to run a DuckDB query:

```python
%%writefile ddb.py
import duckdb
print(f"DuckDB v{duckdb.__version__}")
class Q_IMPORTED(str):
    def run(self):
        return duckdb.sql(self)
```

## 2) create another version of a query string locally, a sample dataframe, use imported and local query on a dataframe:
```
import duckdb
import pandas as pd
df = pd.DataFrame({"a": [42]})

from ddb import Q_IMPORTED

class Q_LOCAL(str):
    def run(self):
        return duckdb.sql(self)

try:
    Q("FROM df").run()
except Exception as e:
    print("Q from module", e)

Q_LOCAL("FROM df").run()
```

```
import duckdb
import pandas as pd
df = pd.DataFrame({"a": [42]})

from ddb import Q_IMPORTED

class Q_LOCAL(str):
    def run(self):
        return duckdb.sql(self)

try:
    df_from_imported = Q_IMPORTED("FROM df").run().df()
except Exception as e:
    print("Q from module", e)
    df_from_imported = None

df_from_local = Q_LOCAL("FROM df").run().df()
pd.testing.assert_frame_equal(df_from_imported, df_from_local)
```

### output in v1.0.0
```
DuckDB v1.0.0
```


### Output in v1.1.1
```
DuckDB v1.1.1
Q from module Catalog Error: Table with name df does not exist!
Did you mean "pg_depend"?
---------------------------------------------------------------------------
AssertionError 
```

### OS:

Linux

### DuckDB Version:

1.1

### DuckDB Client:

python

### Hardware:

_No response_

### Full Name:

Alex

### Affiliation:

self

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have tested with a stable release

### Did you include all relevant data sets for reproducing the issue?

Yes

### Did you include all code required to reproduce the issue?

- [X] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [X] Yes, I have

</issue>
<code>
[start of README.md]
1: <div align="center">
2:   <picture>
3:     <source media="(prefers-color-scheme: light)" srcset="logo/DuckDB_Logo-horizontal.svg">
4:     <source media="(prefers-color-scheme: dark)" srcset="logo/DuckDB_Logo-horizontal-dark-mode.svg">
5:     <img alt="DuckDB logo" src="logo/DuckDB_Logo-horizontal.svg" height="100">
6:   </picture>
7: </div>
8: <br>
9: 
10: <p align="center">
11:   <a href="https://github.com/duckdb/duckdb/actions"><img src="https://github.com/duckdb/duckdb/actions/workflows/Main.yml/badge.svg?branch=main" alt="Github Actions Badge"></a>
12:   <a href="https://discord.gg/tcvwpjfnZx"><img src="https://shields.io/discord/909674491309850675" alt="discord" /></a>
13:   <a href="https://github.com/duckdb/duckdb/releases/"><img src="https://img.shields.io/github/v/release/duckdb/duckdb?color=brightgreen&display_name=tag&logo=duckdb&logoColor=white" alt="Latest Release"></a>
14: </p>
15: 
16: ## DuckDB
17: 
18: DuckDB is a high-performance analytical database system. It is designed to be fast, reliable, portable, and easy to use. DuckDB provides a rich SQL dialect, with support far beyond basic SQL. DuckDB supports arbitrary and nested correlated subqueries, window functions, collations, complex types (arrays, structs, maps), and [several extensions designed to make SQL easier to use](https://duckdb.org/docs/guides/sql_features/friendly_sql).
19: 
20: DuckDB is available as a [standalone CLI application](https://duckdb.org/docs/api/cli/overview) and has clients for [Python](https://duckdb.org/docs/api/python/overview), [R](https://duckdb.org/docs/api/r), [Java](https://duckdb.org/docs/api/java), [Wasm](https://duckdb.org/docs/api/wasm/overview), etc., with deep integrations with packages such as [pandas](https://duckdb.org/docs/guides/python/sql_on_pandas) and [dplyr](https://duckdblabs.github.io/duckplyr/).
21: 
22: For more information on using DuckDB, please refer to the [DuckDB documentation](https://duckdb.org/docs/).
23: 
24: ## Installation
25: 
26: If you want to install DuckDB, please see [our installation page](https://duckdb.org/docs/installation/) for instructions.
27: 
28: ## Data Import
29: 
30: For CSV files and Parquet files, data import is as simple as referencing the file in the FROM clause:
31: 
32: ```sql
33: SELECT * FROM 'myfile.csv';
34: SELECT * FROM 'myfile.parquet';
35: ```
36: 
37: Refer to our [Data Import](https://duckdb.org/docs/data/overview) section for more information.
38: 
39: ## SQL Reference
40: 
41: The documentation contains a [SQL introduction and reference](https://duckdb.org/docs/sql/introduction).
42: 
43: ## Development
44: 
45: For development, DuckDB requires [CMake](https://cmake.org), Python3 and a `C++11` compliant compiler. Run `make` in the root directory to compile the sources. For development, use `make debug` to build a non-optimized debug version. You should run `make unit` and `make allunit` to verify that your version works properly after making changes. To test performance, you can run `BUILD_BENCHMARK=1 BUILD_TPCH=1 make` and then perform several standard benchmarks from the root directory by executing `./build/release/benchmark/benchmark_runner`. The details of benchmarks are in our [Benchmark Guide](benchmark/README.md).
46: 
47: Please also refer to our [Build Guide](https://duckdb.org/dev/building) and [Contribution Guide](CONTRIBUTING.md).
48: 
49: ## Support
50: 
51: See the [Support Options](https://duckdblabs.com/support/) page.
[end of README.md]
[start of tools/pythonpkg/src/python_replacement_scan.cpp]
1: #include "duckdb_python/python_replacement_scan.hpp"
2: #include "duckdb_python/pybind11/pybind_wrapper.hpp"
3: #include "duckdb/main/client_properties.hpp"
4: #include "duckdb_python/numpy/numpy_type.hpp"
5: #include "duckdb/parser/tableref/table_function_ref.hpp"
6: #include "duckdb_python/pyconnection/pyconnection.hpp"
7: #include "duckdb_python/pybind11/dataframe.hpp"
8: #include "duckdb/parser/expression/constant_expression.hpp"
9: #include "duckdb/parser/expression/function_expression.hpp"
10: #include "duckdb/common/typedefs.hpp"
11: #include "duckdb_python/pandas/pandas_scan.hpp"
12: #include "duckdb/parser/tableref/subqueryref.hpp"
13: #include "duckdb_python/pyrelation.hpp"
14: 
15: namespace duckdb {
16: 
17: static void CreateArrowScan(const string &name, py::object entry, TableFunctionRef &table_function,
18:                             vector<unique_ptr<ParsedExpression>> &children, ClientProperties &client_properties,
19:                             PyArrowObjectType type) {
20: 
21: 	if (type == PyArrowObjectType::PyCapsuleInterface) {
22: 		entry = entry.attr("__arrow_c_stream__")();
23: 		type = PyArrowObjectType::PyCapsule;
24: 	}
25: 
26: 	auto stream_factory = make_uniq<PythonTableArrowArrayStreamFactory>(entry.ptr(), client_properties);
27: 	auto stream_factory_produce = PythonTableArrowArrayStreamFactory::Produce;
28: 	auto stream_factory_get_schema = PythonTableArrowArrayStreamFactory::GetSchema;
29: 
30: 	children.push_back(make_uniq<ConstantExpression>(Value::POINTER(CastPointerToValue(stream_factory.get()))));
31: 	children.push_back(make_uniq<ConstantExpression>(Value::POINTER(CastPointerToValue(stream_factory_produce))));
32: 	children.push_back(make_uniq<ConstantExpression>(Value::POINTER(CastPointerToValue(stream_factory_get_schema))));
33: 
34: 	if (type == PyArrowObjectType::PyCapsule) {
35: 		// Disable projection+filter pushdown
36: 		table_function.function = make_uniq<FunctionExpression>("arrow_scan_dumb", std::move(children));
37: 	} else {
38: 		table_function.function = make_uniq<FunctionExpression>("arrow_scan", std::move(children));
39: 	}
40: 
41: 	auto dependency = make_uniq<ExternalDependency>();
42: 	auto dependency_item = PythonDependencyItem::Create(make_uniq<RegisteredArrow>(std::move(stream_factory), entry));
43: 	dependency->AddDependency("replacement_cache", std::move(dependency_item));
44: 	table_function.external_dependency = std::move(dependency);
45: }
46: 
47: static void ThrowScanFailureError(const py::object &entry, const string &name, const string &location = "") {
48: 	string error;
49: 	auto py_object_type = string(py::str(entry.get_type().attr("__name__")));
50: 	error += StringUtil::Format("Python Object \"%s\" of type \"%s\"", name, py_object_type);
51: 	if (!location.empty()) {
52: 		error += StringUtil::Format(" found on line \"%s\"", location);
53: 	}
54: 	error +=
55: 	    StringUtil::Format(" not suitable for replacement scans.\nMake sure "
56: 	                       "that \"%s\" is either a pandas.DataFrame, duckdb.DuckDBPyRelation, pyarrow Table, Dataset, "
57: 	                       "RecordBatchReader, Scanner, or NumPy ndarrays with supported format",
58: 	                       name);
59: 	throw InvalidInputException(error);
60: }
61: 
62: unique_ptr<TableRef> PythonReplacementScan::ReplacementObject(const py::object &entry, const string &name,
63:                                                               ClientContext &context) {
64: 	auto replacement = TryReplacementObject(entry, name, context);
65: 	if (!replacement) {
66: 		ThrowScanFailureError(entry, name);
67: 	}
68: 	return replacement;
69: }
70: 
71: unique_ptr<TableRef> PythonReplacementScan::TryReplacementObject(const py::object &entry, const string &name,
72:                                                                  ClientContext &context) {
73: 	auto client_properties = context.GetClientProperties();
74: 	auto table_function = make_uniq<TableFunctionRef>();
75: 	vector<unique_ptr<ParsedExpression>> children;
76: 	NumpyObjectType numpytype;
77: 	PyArrowObjectType arrow_type;
78: 	if (DuckDBPyConnection::IsPandasDataframe(entry)) {
79: 		if (PandasDataFrame::IsPyArrowBacked(entry)) {
80: 			auto table = PandasDataFrame::ToArrowTable(entry);
81: 			CreateArrowScan(name, table, *table_function, children, client_properties, PyArrowObjectType::Table);
82: 		} else {
83: 			string name = "df_" + StringUtil::GenerateRandomName();
84: 			auto new_df = PandasScanFunction::PandasReplaceCopiedNames(entry);
85: 			children.push_back(make_uniq<ConstantExpression>(Value::POINTER(CastPointerToValue(new_df.ptr()))));
86: 			table_function->function = make_uniq<FunctionExpression>("pandas_scan", std::move(children));
87: 			auto dependency = make_uniq<ExternalDependency>();
88: 			dependency->AddDependency("replacement_cache", PythonDependencyItem::Create(entry));
89: 			dependency->AddDependency("copy", PythonDependencyItem::Create(new_df));
90: 			table_function->external_dependency = std::move(dependency);
91: 		}
92: 	} else if (DuckDBPyRelation::IsRelation(entry)) {
93: 		auto pyrel = py::cast<DuckDBPyRelation *>(entry);
94: 		if (!pyrel->CanBeRegisteredBy(context)) {
95: 			throw InvalidInputException(
96: 			    "Python Object \"%s\" of type \"DuckDBPyRelation\" not suitable for replacement scan.\nThe object was "
97: 			    "created by another Connection and can therefore not be used by this Connection.",
98: 			    name);
99: 		}
100: 		// create a subquery from the underlying relation object
101: 		auto select = make_uniq<SelectStatement>();
102: 		select->node = pyrel->GetRel().GetQueryNode();
103: 		auto subquery = make_uniq<SubqueryRef>(std::move(select));
104: 		auto dependency = make_uniq<ExternalDependency>();
105: 		dependency->AddDependency("replacement_cache", PythonDependencyItem::Create(entry));
106: 		subquery->external_dependency = std::move(dependency);
107: 		return std::move(subquery);
108: 	} else if (PolarsDataFrame::IsDataFrame(entry)) {
109: 		auto arrow_dataset = entry.attr("to_arrow")();
110: 		CreateArrowScan(name, arrow_dataset, *table_function, children, client_properties, PyArrowObjectType::Table);
111: 	} else if (PolarsDataFrame::IsLazyFrame(entry)) {
112: 		auto materialized = entry.attr("collect")();
113: 		auto arrow_dataset = materialized.attr("to_arrow")();
114: 		CreateArrowScan(name, arrow_dataset, *table_function, children, client_properties, PyArrowObjectType::Table);
115: 	} else if ((arrow_type = DuckDBPyConnection::GetArrowType(entry)) != PyArrowObjectType::Invalid) {
116: 		CreateArrowScan(name, entry, *table_function, children, client_properties, arrow_type);
117: 	} else if ((numpytype = DuckDBPyConnection::IsAcceptedNumpyObject(entry)) != NumpyObjectType::INVALID) {
118: 		string name = "np_" + StringUtil::GenerateRandomName();
119: 		py::dict data; // we will convert all the supported format to dict{"key": np.array(value)}.
120: 		size_t idx = 0;
121: 		switch (numpytype) {
122: 		case NumpyObjectType::NDARRAY1D:
123: 			data["column0"] = entry;
124: 			break;
125: 		case NumpyObjectType::NDARRAY2D:
126: 			idx = 0;
127: 			for (auto item : py::cast<py::array>(entry)) {
128: 				data[("column" + std::to_string(idx)).c_str()] = item;
129: 				idx++;
130: 			}
131: 			break;
132: 		case NumpyObjectType::LIST:
133: 			idx = 0;
134: 			for (auto item : py::cast<py::list>(entry)) {
135: 				data[("column" + std::to_string(idx)).c_str()] = item;
136: 				idx++;
137: 			}
138: 			break;
139: 		case NumpyObjectType::DICT:
140: 			data = py::cast<py::dict>(entry);
141: 			break;
142: 		default:
143: 			throw NotImplementedException("Unsupported Numpy object");
144: 			break;
145: 		}
146: 		children.push_back(make_uniq<ConstantExpression>(Value::POINTER(CastPointerToValue(data.ptr()))));
147: 		table_function->function = make_uniq<FunctionExpression>("pandas_scan", std::move(children));
148: 		auto dependency = make_uniq<ExternalDependency>();
149: 		dependency->AddDependency("replacement_cache", PythonDependencyItem::Create(entry));
150: 		dependency->AddDependency("data", PythonDependencyItem::Create(data));
151: 		table_function->external_dependency = std::move(dependency);
152: 	} else {
153: 		// This throws an error later on!
154: 		return nullptr;
155: 	}
156: 	return std::move(table_function);
157: }
158: 
159: static bool IsBuiltinFunction(const py::object &object) {
160: 	auto &import_cache_py = *DuckDBPyConnection::ImportCache();
161: 	return py::isinstance(object, import_cache_py.types.BuiltinFunctionType());
162: }
163: 
164: static unique_ptr<TableRef> TryReplacement(py::dict &dict, const string &name, ClientContext &context,
165:                                            py::object &current_frame) {
166: 	auto table_name = py::str(name);
167: 	if (!dict.contains(table_name)) {
168: 		// not present in the globals
169: 		return nullptr;
170: 	}
171: 	const py::object &entry = dict[table_name];
172: 
173: 	if (IsBuiltinFunction(entry)) {
174: 		return nullptr;
175: 	}
176: 
177: 	auto result = PythonReplacementScan::TryReplacementObject(entry, name, context);
178: 	if (!result) {
179: 		std::string location = py::cast<py::str>(current_frame.attr("f_code").attr("co_filename"));
180: 		location += ":";
181: 		location += py::cast<py::str>(current_frame.attr("f_lineno"));
182: 		ThrowScanFailureError(entry, name, location);
183: 	}
184: 	return result;
185: }
186: 
187: static unique_ptr<TableRef> ReplaceInternal(ClientContext &context, const string &table_name) {
188: 	Value result;
189: 	auto lookup_result = context.TryGetCurrentSetting("python_enable_replacements", result);
190: 	D_ASSERT((bool)lookup_result);
191: 	auto enabled = result.GetValue<bool>();
192: 
193: 	if (!enabled) {
194: 		return nullptr;
195: 	}
196: 
197: 	lookup_result = context.TryGetCurrentSetting("python_scan_all_frames", result);
198: 	D_ASSERT((bool)lookup_result);
199: 	auto scan_all_frames = result.GetValue<bool>();
200: 
201: 	py::gil_scoped_acquire acquire;
202: 	py::object current_frame = py::module::import("inspect").attr("currentframe")();
203: 
204: 	bool has_locals = false;
205: 	bool has_globals = false;
206: 	do {
207: 		py::object local_dict_p = current_frame.attr("f_locals");
208: 		has_locals = !py::none().is(local_dict_p);
209: 		if (has_locals) {
210: 			// search local dictionary
211: 			auto local_dict = py::cast<py::dict>(local_dict_p);
212: 			auto result = TryReplacement(local_dict, table_name, context, current_frame);
213: 			if (result) {
214: 				return result;
215: 			}
216: 		}
217: 		py::object global_dict_p = current_frame.attr("f_globals");
218: 		has_globals = !py::none().is(global_dict_p);
219: 		if (has_globals) {
220: 			auto global_dict = py::cast<py::dict>(global_dict_p);
221: 			// search global dictionary
222: 			auto result = TryReplacement(global_dict, table_name, context, current_frame);
223: 			if (result) {
224: 				return result;
225: 			}
226: 		}
227: 		current_frame = current_frame.attr("f_back");
228: 	} while (scan_all_frames && (has_locals || has_globals));
229: 	return nullptr;
230: }
231: 
232: unique_ptr<TableRef> PythonReplacementScan::Replace(ClientContext &context, ReplacementScanInput &input,
233:                                                     optional_ptr<ReplacementScanData> data) {
234: 	auto &table_name = input.table_name;
235: 	auto &config = DBConfig::GetConfig(context);
236: 	if (!config.options.enable_external_access) {
237: 		return nullptr;
238: 	}
239: 
240: 	unique_ptr<TableRef> result;
241: 	result = ReplaceInternal(context, table_name);
242: 	return result;
243: }
244: 
245: } // namespace duckdb
[end of tools/pythonpkg/src/python_replacement_scan.cpp]
</code>
Here is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.
<patch>
--- a/file.cpp
+++ b/file.cpp
@@ -3,35 +3,44 @@
 #include <cstdlib>
 
 int euclidean(int a, int b) {
-    while (b) {
-        int temp = b;
-        b = a % b;
-        a = temp;
+    if (b == 0) {
+        return a;
     }
-    return a;
+    return euclidean(b, a % b);
 }
 
 std::vector<std::pair<int, int>> bresenham(int x0, int y0, int x1, int y1) {
     std::vector<std::pair<int, int>> points;
     int dx = abs(x1 - x0);
     int dy = abs(y1 - y0);
+    int x = x0, y = y0;
     int sx = (x0 < x1) ? 1 : -1;
     int sy = (y0 < y1) ? 1 : -1;
-    int err = dx - dy;
 
-    while (true) {
-        points.emplace_back(x0, y0);
-        if (x0 == x1 && y0 == y1) break;
-        int e2 = 2 * err;
-        if (e2 > -dy) {
+    if (dx > dy) {
+        int err = dx / 2;
+        while (x != x1) {
+            points.emplace_back(x, y);
             err -= dy;
-            x0 += sx;
+            if (err < 0) {
+                y += sy;
+                err += dx;
+            }
+            x += sx;
         }
-        if (e2 < dx) {
-            err += dx;
-            y0 += sy;
+    } else {
+        int err = dy / 2;
+        while (y != y1) {
+            points.emplace_back(x, y);
+            err -= dx;
+            if (err < 0) {
+                x += sx;
+                err += dy;
+            }
+            y += sy;
         }
     }
 
+    points.emplace_back(x, y);
     return points;
 }

</patch>

I need you to solve the provided issue by generating a single patch file that I can apply directly to this repository using git apply.
Please respond with a single patch file in the format shown above.
Make sure to only include the patch file contents so that the contents of your output can be copied into a patch file and applied directly

Respond below: