{
  "repo": "duckdb/duckdb",
  "pull_number": 9659,
  "instance_id": "duckdb__duckdb-9659",
  "issue_numbers": [
    "9528",
    "9528"
  ],
  "base_commit": "3eb29b72fe513d95428a2ec86022e84c55521c33",
  "patch": "diff --git a/tools/jdbc/src/jni/duckdb_java.cpp b/tools/jdbc/src/jni/duckdb_java.cpp\nindex 105db3a2cba0..3e22b3b4b2b3 100644\n--- a/tools/jdbc/src/jni/duckdb_java.cpp\n+++ b/tools/jdbc/src/jni/duckdb_java.cpp\n@@ -994,6 +994,9 @@ void _duckdb_jdbc_appender_append_null(JNIEnv *env, jclass, jobject appender_ref\n }\n \n jlong _duckdb_jdbc_arrow_stream(JNIEnv *env, jclass, jobject res_ref_buf, jlong batch_size) {\n+\tif (!res_ref_buf) {\n+\t\tthrow InvalidInputException(\"Invalid result set\");\n+\t}\n \tauto res_ref = (ResultHolder *)env->GetDirectBufferAddress(res_ref_buf);\n \tif (!res_ref || !res_ref->res || res_ref->res->HasError()) {\n \t\tthrow InvalidInputException(\"Invalid result set\");\ndiff --git a/tools/jdbc/src/main/java/org/duckdb/DuckDBPreparedStatement.java b/tools/jdbc/src/main/java/org/duckdb/DuckDBPreparedStatement.java\nindex 43e4f7b037e8..dad0760dc215 100644\n--- a/tools/jdbc/src/main/java/org/duckdb/DuckDBPreparedStatement.java\n+++ b/tools/jdbc/src/main/java/org/duckdb/DuckDBPreparedStatement.java\n@@ -291,6 +291,7 @@ public void clearParameters() throws SQLException {\n     public void close() throws SQLException {\n         if (select_result != null) {\n             select_result.close();\n+            select_result = null;\n         }\n         if (stmt_ref != null) {\n             DuckDBNative.duckdb_jdbc_release(stmt_ref);\ndiff --git a/tools/jdbc/src/main/java/org/duckdb/DuckDBResultSet.java b/tools/jdbc/src/main/java/org/duckdb/DuckDBResultSet.java\nindex 5051bdf190ad..eccfb16a1546 100644\n--- a/tools/jdbc/src/main/java/org/duckdb/DuckDBResultSet.java\n+++ b/tools/jdbc/src/main/java/org/duckdb/DuckDBResultSet.java\n@@ -72,7 +72,7 @@ public ResultSetMetaData getMetaData() throws SQLException {\n         return meta;\n     }\n \n-    public boolean next() throws SQLException {\n+    public synchronized boolean next() throws SQLException {\n         if (isClosed()) {\n             throw new SQLException(\"ResultSet was closed\");\n         }\n@@ -109,7 +109,7 @@ protected void finalize() throws Throwable {\n         close();\n     }\n \n-    public boolean isClosed() throws SQLException {\n+    public synchronized boolean isClosed() throws SQLException {\n         return result_ref == null;\n     }\n \n@@ -129,7 +129,8 @@ private void check(int columnIndex) throws SQLException {\n      * @param arrow_batch_size batch size of arrow vectors to return\n      * @return an instance of {@link org.apache.arrow.vector.ipc.ArrowReader}\n      */\n-    public Object arrowExportStream(Object arrow_buffer_allocator, long arrow_batch_size) throws SQLException {\n+    public synchronized Object arrowExportStream(Object arrow_buffer_allocator, long arrow_batch_size)\n+        throws SQLException {\n         if (isClosed()) {\n             throw new SQLException(\"Result set is closed\");\n         }\n",
  "test_patch": "diff --git a/tools/jdbc/src/test/java/org/duckdb/test/TestDuckDBJDBC.java b/tools/jdbc/src/test/java/org/duckdb/test/TestDuckDBJDBC.java\nindex 429f80149a21..3f6cc1ab4a8b 100644\n--- a/tools/jdbc/src/test/java/org/duckdb/test/TestDuckDBJDBC.java\n+++ b/tools/jdbc/src/test/java/org/duckdb/test/TestDuckDBJDBC.java\n@@ -88,6 +88,8 @@\n \n public class TestDuckDBJDBC {\n \n+    private static final String JDBC_URL = \"jdbc:duckdb:\";\n+\n     private static void assertTrue(boolean val) throws Exception {\n         assertTrue(val, null);\n     }\n@@ -144,6 +146,21 @@ private static <T extends Throwable> Throwable assertThrows(Class<T> exception,\n         throw new Exception(\"Expected to throw \" + exception.getName());\n     }\n \n+    // Asserts we are either throwing the correct exception, or not throwing at all\n+    private static <T extends Throwable> boolean assertThrowsMaybe(Thrower thrower, Class<T> exception)\n+        throws Exception {\n+        try {\n+            thrower.run();\n+            return true;\n+        } catch (Throwable e) {\n+            if (e.getClass().equals(exception)) {\n+                return true;\n+            } else {\n+                throw new Exception(\"Unexpected exception: \" + e.getClass().getName());\n+            }\n+        }\n+    }\n+\n     static {\n         try {\n             Class.forName(\"org.duckdb.DuckDBDriver\");\n@@ -152,8 +169,54 @@ private static <T extends Throwable> Throwable assertThrows(Class<T> exception,\n         }\n     }\n \n+    public static void test_StatementCloseParallel() throws SQLException, InterruptedException {\n+        ExecutorService executor_service = Executors.newFixedThreadPool(1);\n+\n+        for (int i = 0; i < 100; i++) {\n+            try (Connection conn = DriverManager.getConnection(JDBC_URL)) {\n+                createTable(conn);\n+                try (Statement statement = conn.createStatement()) {\n+                    executeStatementWithThread(statement, executor_service);\n+                } catch (SQLException e) {\n+                    System.out.println(\"Error executing statement: \" + e.getMessage());\n+                }\n+            }\n+        }\n+    }\n+\n+    private static void createTable(Connection conn) throws SQLException {\n+        try (Statement createStmt = conn.createStatement()) {\n+            createStmt.execute(\"CREATE TABLE foo as select * from range(1000000);\");\n+        }\n+    }\n+\n+    private static void executeStatementWithThread(Statement statement, ExecutorService executor_service)\n+        throws InterruptedException {\n+        executor_service.submit(() -> {\n+            try (ResultSet resultSet = statement.executeQuery(\"SELECT * from foo\")) {\n+                assertThrowsMaybe(() -> {\n+                    DuckDBResultSet duckdb_result_set = resultSet.unwrap(DuckDBResultSet.class);\n+                    while (duckdb_result_set.next()) {\n+                        // do nothing with the results\n+                    }\n+                }, SQLException.class);\n+\n+            } catch (Exception e) {\n+                System.out.println(\"Error executing query: \" + e.getMessage());\n+            }\n+        });\n+\n+        Thread.sleep(10); // wait for query to start running\n+        try {\n+            statement.cancel();\n+            statement.close();\n+        } catch (SQLException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n     public static void test_connection() throws Exception {\n-        Connection conn = DriverManager.getConnection(\"jdbc:duckdb:\");\n+        Connection conn = DriverManager.getConnection(JDBC_URL);\n         assertTrue(conn.isValid(0));\n         assertFalse(conn.isClosed());\n \n@@ -224,7 +287,7 @@ public static void test_connection() throws Exception {\n     }\n \n     public static void test_prepare_exception() throws Exception {\n-        Connection conn = DriverManager.getConnection(\"jdbc:duckdb:\");\n+        Connection conn = DriverManager.getConnection(JDBC_URL);\n         Statement stmt = conn.createStatement();\n \n         stmt = conn.createStatement();\n@@ -237,7 +300,7 @@ public static void test_prepare_exception() throws Exception {\n     }\n \n     public static void test_execute_exception() throws Exception {\n-        Connection conn = DriverManager.getConnection(\"jdbc:duckdb:\");\n+        Connection conn = DriverManager.getConnection(JDBC_URL);\n         Statement stmt = conn.createStatement();\n \n         assertThrows(() -> {\n@@ -247,7 +310,7 @@ public static void test_execute_exception() throws Exception {\n     }\n \n     public static void test_autocommit_off() throws Exception {\n-        Connection conn = DriverManager.getConnection(\"jdbc:duckdb:\");\n+        Connection conn = DriverManager.getConnection(JDBC_URL);\n         Statement stmt = conn.createStatement();\n         ResultSet rs;\n \n@@ -304,7 +367,7 @@ public static void test_autocommit_off() throws Exception {\n     }\n \n     public static void test_enum() throws Exception {\n-        Connection conn = DriverManager.getConnection(\"jdbc:duckdb:\");\n+        Connection conn = DriverManager.getConnection(JDBC_URL);\n         Statement stmt = conn.createStatement();\n \n         ResultSet rs;\n@@ -449,7 +512,7 @@ private static void assert_timestamp_match(String fetchSql, String expectedStrin\n         try {\n             TimeZone.setDefault(TimeZone.getTimeZone(\"UTC\"));\n             System.setProperty(\"user.timezone\", \"UTC\");\n-            Connection conn = DriverManager.getConnection(\"jdbc:duckdb:\");\n+            Connection conn = DriverManager.getConnection(JDBC_URL);\n             Statement stmt = conn.createStatement();\n \n             ResultSet rs = stmt.executeQuery(fetchSql);\n@@ -480,7 +543,7 @@ private static void assert_timestamp_match(String fetchSql, String expectedStrin\n     }\n \n     public static void test_timestamp_tz() throws Exception {\n-        Connection conn = DriverManager.getConnection(\"jdbc:duckdb:\");\n+        Connection conn = DriverManager.getConnection(JDBC_URL);\n         Statement stmt = conn.createStatement();\n \n         ResultSet rs;\n@@ -535,7 +598,7 @@ public static void test_timestamp_tz() throws Exception {\n     }\n \n     public static void test_timestamp_as_long() throws Exception {\n-        Connection conn = DriverManager.getConnection(\"jdbc:duckdb:\");\n+        Connection conn = DriverManager.getConnection(JDBC_URL);\n         Statement stmt = conn.createStatement();\n \n         ResultSet rs;\n@@ -556,7 +619,7 @@ public static void test_timestamp_as_long() throws Exception {\n     }\n \n     public static void test_timestamptz_as_long() throws Exception {\n-        Connection conn = DriverManager.getConnection(\"jdbc:duckdb:\");\n+        Connection conn = DriverManager.getConnection(JDBC_URL);\n         Statement stmt = conn.createStatement();\n \n         ResultSet rs;\n@@ -580,7 +643,7 @@ public static void test_timestamptz_as_long() throws Exception {\n \n     public static void test_consecutive_timestamps() throws Exception {\n         long expected = 986860800000L;\n-        try (Connection conn = DriverManager.getConnection(\"jdbc:duckdb:\"); Statement stmt = conn.createStatement()) {\n+        try (Connection conn = DriverManager.getConnection(JDBC_URL); Statement stmt = conn.createStatement()) {\n             try (ResultSet rs = stmt.executeQuery(\n                      \"select range from range(TIMESTAMP '2001-04-10', TIMESTAMP '2001-04-11', INTERVAL 30 MINUTE)\")) {\n                 while (rs.next()) {\n@@ -593,7 +656,7 @@ public static void test_consecutive_timestamps() throws Exception {\n     }\n \n     public static void test_throw_wrong_datatype() throws Exception {\n-        Connection conn = DriverManager.getConnection(\"jdbc:duckdb:\");\n+        Connection conn = DriverManager.getConnection(JDBC_URL);\n         Statement stmt = conn.createStatement();\n         ResultSet rs;\n \n@@ -615,7 +678,7 @@ public static void test_throw_wrong_datatype() throws Exception {\n     }\n \n     public static void test_list_metadata() throws Exception {\n-        try (Connection conn = DriverManager.getConnection(\"jdbc:duckdb:\"); Statement stmt = conn.createStatement();\n+        try (Connection conn = DriverManager.getConnection(JDBC_URL); Statement stmt = conn.createStatement();\n              ResultSet rs = stmt.executeQuery(\"SELECT generate_series(2) as list\");) {\n             ResultSetMetaData meta = rs.getMetaData();\n             assertEquals(meta.getColumnCount(), 1);\n@@ -626,7 +689,7 @@ public static void test_list_metadata() throws Exception {\n     }\n \n     public static void test_struct_metadata() throws Exception {\n-        try (Connection conn = DriverManager.getConnection(\"jdbc:duckdb:\"); Statement stmt = conn.createStatement();\n+        try (Connection conn = DriverManager.getConnection(JDBC_URL); Statement stmt = conn.createStatement();\n              ResultSet rs = stmt.executeQuery(\"SELECT {'i': 42, 'j': 'a'} as struct\")) {\n             ResultSetMetaData meta = rs.getMetaData();\n             assertEquals(meta.getColumnCount(), 1);\n@@ -637,7 +700,7 @@ public static void test_struct_metadata() throws Exception {\n     }\n \n     public static void test_map_metadata() throws Exception {\n-        try (Connection conn = DriverManager.getConnection(\"jdbc:duckdb:\"); Statement stmt = conn.createStatement();\n+        try (Connection conn = DriverManager.getConnection(JDBC_URL); Statement stmt = conn.createStatement();\n              ResultSet rs = stmt.executeQuery(\"SELECT map([1,2],['a','b']) as map\")) {\n             ResultSetMetaData meta = rs.getMetaData();\n             assertEquals(meta.getColumnCount(), 1);\n@@ -648,7 +711,7 @@ public static void test_map_metadata() throws Exception {\n     }\n \n     public static void test_union_metadata() throws Exception {\n-        try (Connection conn = DriverManager.getConnection(\"jdbc:duckdb:\"); Statement stmt = conn.createStatement();\n+        try (Connection conn = DriverManager.getConnection(JDBC_URL); Statement stmt = conn.createStatement();\n              ResultSet rs = stmt.executeQuery(\"SELECT union_value(str := 'three') as union\")) {\n             ResultSetMetaData meta = rs.getMetaData();\n             assertEquals(meta.getColumnCount(), 1);\n@@ -659,7 +722,7 @@ public static void test_union_metadata() throws Exception {\n     }\n \n     public static void test_result() throws Exception {\n-        Connection conn = DriverManager.getConnection(\"jdbc:duckdb:\");\n+        Connection conn = DriverManager.getConnection(JDBC_URL);\n         Statement stmt = conn.createStatement();\n \n         ResultSet rs;\n@@ -733,7 +796,7 @@ public static void test_result() throws Exception {\n     }\n \n     public static void test_empty_table() throws Exception {\n-        Connection conn = DriverManager.getConnection(\"jdbc:duckdb:\");\n+        Connection conn = DriverManager.getConnection(JDBC_URL);\n         Statement stmt = conn.createStatement();\n \n         stmt.execute(\"CREATE TABLE a (i iNTEGER)\");\n@@ -748,7 +811,7 @@ public static void test_empty_table() throws Exception {\n     }\n \n     public static void test_broken_next() throws Exception {\n-        Connection conn = DriverManager.getConnection(\"jdbc:duckdb:\");\n+        Connection conn = DriverManager.getConnection(JDBC_URL);\n         Statement stmt = conn.createStatement();\n \n         stmt.execute(\"CREATE TABLE t0(c0 INT8, c1 VARCHAR)\");\n@@ -769,9 +832,9 @@ public static void test_broken_next() throws Exception {\n     }\n \n     public static void test_multiple_connections() throws Exception {\n-        Connection conn1 = DriverManager.getConnection(\"jdbc:duckdb:\");\n+        Connection conn1 = DriverManager.getConnection(JDBC_URL);\n         Statement stmt1 = conn1.createStatement();\n-        Connection conn2 = DriverManager.getConnection(\"jdbc:duckdb:\");\n+        Connection conn2 = DriverManager.getConnection(JDBC_URL);\n         Statement stmt2 = conn2.createStatement();\n         Statement stmt3 = conn2.createStatement();\n \n@@ -857,7 +920,7 @@ public static void test_duckdb_timestamp() throws Exception {\n     }\n \n     public static void duckdb_timestamp_test() throws Exception {\n-        Connection conn = DriverManager.getConnection(\"jdbc:duckdb:\");\n+        Connection conn = DriverManager.getConnection(JDBC_URL);\n         Statement stmt = conn.createStatement();\n         stmt.execute(\"CREATE TABLE a (ts TIMESTAMP)\");\n \n@@ -948,7 +1011,7 @@ public static void duckdb_timestamp_test() throws Exception {\n     }\n \n     public static void test_duckdb_localdatetime() throws Exception {\n-        Connection conn = DriverManager.getConnection(\"jdbc:duckdb:\");\n+        Connection conn = DriverManager.getConnection(JDBC_URL);\n         Statement stmt = conn.createStatement();\n         stmt.execute(\"CREATE TABLE x (ts TIMESTAMP)\");\n \n@@ -973,7 +1036,7 @@ public static void test_duckdb_localdatetime() throws Exception {\n     }\n \n     public static void test_duckdb_getObject_with_class() throws Exception {\n-        Connection conn = DriverManager.getConnection(\"jdbc:duckdb:\");\n+        Connection conn = DriverManager.getConnection(JDBC_URL);\n         Statement stmt = conn.createStatement();\n         stmt.execute(\"CREATE TABLE b (vchar VARCHAR, bo BOOLEAN, sint SMALLINT, nint INTEGER, bigi BIGINT,\"\n                      + \" flt FLOAT, dbl DOUBLE, dte DATE, tme TIME, ts TIMESTAMP, dec16 DECIMAL(3,1),\"\n@@ -1056,7 +1119,7 @@ public static void test_duckdb_getObject_with_class() throws Exception {\n     }\n \n     public static void test_multiple_statements_execution() throws Exception {\n-        Connection conn = DriverManager.getConnection(\"jdbc:duckdb:\");\n+        Connection conn = DriverManager.getConnection(JDBC_URL);\n         Statement stmt = conn.createStatement();\n         ResultSet rs = stmt.executeQuery(\"CREATE TABLE integers(i integer);\\n\"\n                                          + \"insert into integers select * from range(10);\"\n@@ -1070,7 +1133,7 @@ public static void test_multiple_statements_execution() throws Exception {\n     }\n \n     public static void test_multiple_statements_exception() throws Exception {\n-        Connection conn = DriverManager.getConnection(\"jdbc:duckdb:\");\n+        Connection conn = DriverManager.getConnection(JDBC_URL);\n         Statement stmt = conn.createStatement();\n         boolean succ = false;\n         try {\n@@ -1085,7 +1148,7 @@ public static void test_multiple_statements_exception() throws Exception {\n     }\n \n     public static void test_bigdecimal() throws Exception {\n-        Connection conn = DriverManager.getConnection(\"jdbc:duckdb:\");\n+        Connection conn = DriverManager.getConnection(JDBC_URL);\n         Statement stmt = conn.createStatement();\n         stmt.execute(\n             \"CREATE TABLE q (id DECIMAL(3,0), dec16 DECIMAL(4,1), dec32 DECIMAL(9,4), dec64 DECIMAL(18,7), dec128 DECIMAL(38,10))\");\n@@ -1198,7 +1261,7 @@ public static void test_bigdecimal() throws Exception {\n \n     // Longer, resource intensive test - might be commented out for a quick test run\n     public static void test_lots_of_timestamps() throws Exception {\n-        Connection conn = DriverManager.getConnection(\"jdbc:duckdb:\");\n+        Connection conn = DriverManager.getConnection(JDBC_URL);\n         Statement stmt = conn.createStatement();\n         stmt.execute(\"CREATE TABLE a (ts TIMESTAMP)\");\n \n@@ -1225,7 +1288,7 @@ public static void test_lots_of_timestamps() throws Exception {\n     }\n \n     public static void test_lots_of_decimals() throws Exception {\n-        Connection conn = DriverManager.getConnection(\"jdbc:duckdb:\");\n+        Connection conn = DriverManager.getConnection(JDBC_URL);\n         Statement stmt = conn.createStatement();\n         // Create the table\n         stmt.execute(\"CREATE TABLE q (id DECIMAL(4,0),dec32 DECIMAL(9,4),dec64 DECIMAL(18,7),dec128 DECIMAL(38,10))\");\n@@ -1304,7 +1367,7 @@ public static void test_lots_of_decimals() throws Exception {\n     }\n \n     public static void test_big_data() throws Exception {\n-        Connection conn = DriverManager.getConnection(\"jdbc:duckdb:\");\n+        Connection conn = DriverManager.getConnection(JDBC_URL);\n         Statement stmt = conn.createStatement();\n         int rows = 10000;\n         stmt.execute(\"CREATE TABLE a (i iNTEGER)\");\n@@ -1358,7 +1421,7 @@ public static void test_big_data() throws Exception {\n     }\n \n     public static void test_crash_bug496() throws Exception {\n-        Connection conn = DriverManager.getConnection(\"jdbc:duckdb:\");\n+        Connection conn = DriverManager.getConnection(JDBC_URL);\n         Statement stmt = conn.createStatement();\n \n         stmt.execute(\"CREATE TABLE t0(c0 BOOLEAN, c1 INT)\");\n@@ -1369,7 +1432,7 @@ public static void test_crash_bug496() throws Exception {\n     }\n \n     public static void test_tablepragma_bug491() throws Exception {\n-        Connection conn = DriverManager.getConnection(\"jdbc:duckdb:\");\n+        Connection conn = DriverManager.getConnection(JDBC_URL);\n         Statement stmt = conn.createStatement();\n \n         stmt.execute(\"CREATE TABLE t0(c0 INT)\");\n@@ -1392,7 +1455,7 @@ public static void test_tablepragma_bug491() throws Exception {\n     }\n \n     public static void test_nulltruth_bug489() throws Exception {\n-        Connection conn = DriverManager.getConnection(\"jdbc:duckdb:\");\n+        Connection conn = DriverManager.getConnection(JDBC_URL);\n         Statement stmt = conn.createStatement();\n \n         stmt.execute(\"CREATE TABLE t0(c0 INT)\");\n@@ -1420,7 +1483,7 @@ public static void test_empty_prepare_bug500() throws Exception {\n                              + \"INSERT INTO t1(c0) VALUES (0), (1);\\n\"\n                              + \"\\n\"\n                              + \"SELECT t0.c0 FROM t0, t1;\";\n-        Connection con = DriverManager.getConnection(\"jdbc:duckdb:\");\n+        Connection con = DriverManager.getConnection(JDBC_URL);\n         for (String s : fileContent.split(\"\\n\")) {\n             Statement st = con.createStatement();\n             try {\n@@ -1433,7 +1496,7 @@ public static void test_empty_prepare_bug500() throws Exception {\n     }\n \n     public static void test_borked_string_bug539() throws Exception {\n-        Connection con = DriverManager.getConnection(\"jdbc:duckdb:\");\n+        Connection con = DriverManager.getConnection(JDBC_URL);\n         Statement s = con.createStatement();\n         s.executeUpdate(\"CREATE TABLE t0 (c0 VARCHAR)\");\n         String q = String.format(\"INSERT INTO t0 VALUES('%c')\", 55995);\n@@ -1443,7 +1506,7 @@ public static void test_borked_string_bug539() throws Exception {\n     }\n \n     public static void test_prepare_types() throws Exception {\n-        Connection conn = DriverManager.getConnection(\"jdbc:duckdb:\");\n+        Connection conn = DriverManager.getConnection(JDBC_URL);\n \n         PreparedStatement ps = conn.prepareStatement(\n             \"SELECT CAST(? AS BOOLEAN) c1, CAST(? AS TINYINT) c2, CAST(? AS SMALLINT) c3, CAST(? AS INTEGER) c4, CAST(? AS BIGINT) c5, CAST(? AS FLOAT) c6, CAST(? AS DOUBLE) c7, CAST(? AS STRING) c8\");\n@@ -1534,7 +1597,7 @@ public static void test_prepare_types() throws Exception {\n     }\n \n     public static void test_prepare_insert() throws Exception {\n-        Connection conn = DriverManager.getConnection(\"jdbc:duckdb:\");\n+        Connection conn = DriverManager.getConnection(JDBC_URL);\n \n         conn.createStatement().executeUpdate(\n             \"create table ctstable1 (TYPE_ID int, TYPE_DESC varchar(32), primary key(TYPE_ID))\");\n@@ -1593,7 +1656,7 @@ public static void test_read_only() throws Exception {\n         Path database_file = Files.createTempFile(\"duckdb-jdbc-test-\", \".duckdb\");\n         Files.deleteIfExists(database_file);\n \n-        String jdbc_url = \"jdbc:duckdb:\" + database_file;\n+        String jdbc_url = JDBC_URL + database_file;\n         Properties ro_prop = new Properties();\n         ro_prop.setProperty(\"duckdb.read_only\", \"true\");\n \n@@ -1664,7 +1727,7 @@ public static void test_read_only() throws Exception {\n     }\n \n     public static void test_hugeint() throws Exception {\n-        Connection conn = DriverManager.getConnection(\"jdbc:duckdb:\");\n+        Connection conn = DriverManager.getConnection(JDBC_URL);\n         Statement stmt = conn.createStatement();\n \n         ResultSet rs = stmt.executeQuery(\n@@ -1687,7 +1750,7 @@ public static void test_hugeint() throws Exception {\n     }\n \n     public static void test_temporal_types() throws Exception {\n-        Connection conn = DriverManager.getConnection(\"jdbc:duckdb:\");\n+        Connection conn = DriverManager.getConnection(JDBC_URL);\n         Statement stmt = conn.createStatement();\n \n         ResultSet rs = stmt.executeQuery(\n@@ -1711,7 +1774,7 @@ public static void test_temporal_types() throws Exception {\n     }\n \n     public static void test_calendar_types() throws Exception {\n-        Connection conn = DriverManager.getConnection(\"jdbc:duckdb:\");\n+        Connection conn = DriverManager.getConnection(JDBC_URL);\n         Statement stmt = conn.createStatement();\n \n         //\tNail down the location for test portability.\n@@ -1733,7 +1796,7 @@ public static void test_calendar_types() throws Exception {\n     }\n \n     public static void test_temporal_nulls() throws Exception {\n-        Connection conn = DriverManager.getConnection(\"jdbc:duckdb:\");\n+        Connection conn = DriverManager.getConnection(JDBC_URL);\n         Statement stmt = conn.createStatement();\n \n         ResultSet rs = stmt.executeQuery(\"SELECT NULL::timestamp ts, NULL::date dt, NULL::time te\");\n@@ -1754,7 +1817,7 @@ public static void test_temporal_nulls() throws Exception {\n     }\n \n     public static void test_evil_date() throws Exception {\n-        Connection conn = DriverManager.getConnection(\"jdbc:duckdb:\");\n+        Connection conn = DriverManager.getConnection(JDBC_URL);\n         Statement stmt = conn.createStatement();\n \n         ResultSet rs = stmt.executeQuery(\"SELECT '5131-08-05 (BC)'::date d\");\n@@ -1769,7 +1832,7 @@ public static void test_evil_date() throws Exception {\n     }\n \n     public static void test_decimal() throws Exception {\n-        Connection conn = DriverManager.getConnection(\"jdbc:duckdb:\");\n+        Connection conn = DriverManager.getConnection(JDBC_URL);\n         Statement stmt = conn.createStatement();\n \n         ResultSet rs = stmt.executeQuery(\"SELECT '1.23'::decimal(3,2) d\");\n@@ -1784,7 +1847,7 @@ public static void test_decimal() throws Exception {\n     }\n \n     public static void test_schema_reflection() throws Exception {\n-        Connection conn = DriverManager.getConnection(\"jdbc:duckdb:\");\n+        Connection conn = DriverManager.getConnection(JDBC_URL);\n         Statement stmt = conn.createStatement();\n         stmt.execute(\"CREATE TABLE a (i INTEGER)\");\n         stmt.execute(\"CREATE VIEW b AS SELECT i::STRING AS j FROM a\");\n@@ -1964,7 +2027,7 @@ public static void test_schema_reflection() throws Exception {\n     }\n \n     public static void test_time_tz() throws Exception {\n-        try (Connection conn = DriverManager.getConnection(\"jdbc:duckdb:\"); Statement s = conn.createStatement()) {\n+        try (Connection conn = DriverManager.getConnection(JDBC_URL); Statement s = conn.createStatement()) {\n             s.executeUpdate(\"create table t (i time with time zone)\");\n             try (ResultSet rs = conn.getMetaData().getColumns(null, \"%\", \"t\", \"i\");) {\n                 rs.next();\n@@ -1991,7 +2054,7 @@ public static void test_time_tz() throws Exception {\n \n     public static void test_get_tables_with_current_catalog() throws Exception {\n         ResultSet resultSet = null;\n-        Connection conn = DriverManager.getConnection(\"jdbc:duckdb:\");\n+        Connection conn = DriverManager.getConnection(JDBC_URL);\n         final String currentCatalog = conn.getCatalog();\n         DatabaseMetaData databaseMetaData = conn.getMetaData();\n \n@@ -2014,7 +2077,7 @@ public static void test_get_tables_with_current_catalog() throws Exception {\n     }\n \n     public static void test_get_tables_with_attached_catalog() throws Exception {\n-        Connection conn = DriverManager.getConnection(\"jdbc:duckdb:\");\n+        Connection conn = DriverManager.getConnection(JDBC_URL);\n         final String currentCatalog = conn.getCatalog();\n         DatabaseMetaData databaseMetaData = conn.getMetaData();\n         Statement statement = conn.createStatement();\n@@ -2071,7 +2134,7 @@ public static void test_get_tables_with_attached_catalog() throws Exception {\n     }\n \n     public static void test_get_tables_param_binding_for_table_types() throws Exception {\n-        Connection conn = DriverManager.getConnection(\"jdbc:duckdb:\");\n+        Connection conn = DriverManager.getConnection(JDBC_URL);\n         DatabaseMetaData databaseMetaData = conn.getMetaData();\n         ResultSet rs = databaseMetaData.getTables(null, null, null,\n                                                   new String[] {\"') UNION ALL \"\n@@ -2095,7 +2158,7 @@ public static void test_get_table_types() throws Exception {\n         List<String> tableTypesList = new ArrayList<>(asList(tableTypesArray));\n         tableTypesList.sort(Comparator.naturalOrder());\n \n-        Connection conn = DriverManager.getConnection(\"jdbc:duckdb:\");\n+        Connection conn = DriverManager.getConnection(JDBC_URL);\n         DatabaseMetaData databaseMetaData = conn.getMetaData();\n         ResultSet rs = databaseMetaData.getTableTypes();\n \n@@ -2111,7 +2174,7 @@ public static void test_get_table_types() throws Exception {\n     }\n \n     public static void test_get_schemas_with_params() throws Exception {\n-        Connection conn = DriverManager.getConnection(\"jdbc:duckdb:\");\n+        Connection conn = DriverManager.getConnection(JDBC_URL);\n         String inputCatalog = conn.getCatalog();\n         String inputSchema = conn.getSchema();\n         DatabaseMetaData databaseMetaData = conn.getMetaData();\n@@ -2187,7 +2250,7 @@ public static void test_connect_wrong_url_bug848() throws Exception {\n     }\n \n     public static void test_parquet_reader() throws Exception {\n-        Connection conn = DriverManager.getConnection(\"jdbc:duckdb:\");\n+        Connection conn = DriverManager.getConnection(JDBC_URL);\n         Statement stmt = conn.createStatement();\n         ResultSet rs = stmt.executeQuery(\"SELECT COUNT(*) FROM parquet_scan('data/parquet-testing/userdata1.parquet')\");\n         assertTrue(rs.next());\n@@ -2198,7 +2261,7 @@ public static void test_parquet_reader() throws Exception {\n     }\n \n     public static void test_crash_autocommit_bug939() throws Exception {\n-        Connection conn = DriverManager.getConnection(\"jdbc:duckdb:\");\n+        Connection conn = DriverManager.getConnection(JDBC_URL);\n         PreparedStatement stmt = conn.prepareStatement(\"CREATE TABLE ontime(flightdate DATE)\");\n         conn.setAutoCommit(false); // The is the key to getting the crash to happen.\n         stmt.executeUpdate();\n@@ -2207,7 +2270,7 @@ public static void test_crash_autocommit_bug939() throws Exception {\n     }\n \n     public static void test_explain_bug958() throws Exception {\n-        Connection conn = DriverManager.getConnection(\"jdbc:duckdb:\");\n+        Connection conn = DriverManager.getConnection(JDBC_URL);\n         Statement stmt = conn.createStatement();\n         ResultSet rs = stmt.executeQuery(\"EXPLAIN SELECT 42\");\n         assertTrue(rs.next());\n@@ -2220,7 +2283,7 @@ public static void test_explain_bug958() throws Exception {\n     }\n \n     public static void test_appender_numbers() throws Exception {\n-        DuckDBConnection conn = DriverManager.getConnection(\"jdbc:duckdb:\").unwrap(DuckDBConnection.class);\n+        DuckDBConnection conn = DriverManager.getConnection(JDBC_URL).unwrap(DuckDBConnection.class);\n         Statement stmt = conn.createStatement();\n \n         // int8, int4, int2, int1, float8, float4\n@@ -2267,7 +2330,7 @@ public static void test_appender_numbers() throws Exception {\n     }\n \n     public static void test_appender_date_and_time() throws Exception {\n-        DuckDBConnection conn = DriverManager.getConnection(\"jdbc:duckdb:\").unwrap(DuckDBConnection.class);\n+        DuckDBConnection conn = DriverManager.getConnection(JDBC_URL).unwrap(DuckDBConnection.class);\n         Statement stmt = conn.createStatement();\n \n         stmt.execute(\"CREATE TABLE date_and_time (id INT4, a TIMESTAMP)\");\n@@ -2320,7 +2383,7 @@ public static void test_appender_date_and_time() throws Exception {\n         conn.close();\n     }\n     public static void test_appender_int_string() throws Exception {\n-        DuckDBConnection conn = DriverManager.getConnection(\"jdbc:duckdb:\").unwrap(DuckDBConnection.class);\n+        DuckDBConnection conn = DriverManager.getConnection(JDBC_URL).unwrap(DuckDBConnection.class);\n         Statement stmt = conn.createStatement();\n \n         stmt.execute(\"CREATE TABLE data (a INTEGER, s VARCHAR)\");\n@@ -2349,7 +2412,7 @@ public static void test_appender_int_string() throws Exception {\n     }\n \n     public static void test_appender_string_with_emoji() throws Exception {\n-        DuckDBConnection conn = DriverManager.getConnection(\"jdbc:duckdb:\").unwrap(DuckDBConnection.class);\n+        DuckDBConnection conn = DriverManager.getConnection(JDBC_URL).unwrap(DuckDBConnection.class);\n         Statement stmt = conn.createStatement();\n \n         stmt.execute(\"CREATE TABLE data (str_value VARCHAR(10))\");\n@@ -2373,7 +2436,7 @@ public static void test_appender_string_with_emoji() throws Exception {\n     }\n \n     public static void test_appender_table_does_not_exist() throws Exception {\n-        DuckDBConnection conn = DriverManager.getConnection(\"jdbc:duckdb:\").unwrap(DuckDBConnection.class);\n+        DuckDBConnection conn = DriverManager.getConnection(JDBC_URL).unwrap(DuckDBConnection.class);\n         Statement stmt = conn.createStatement();\n \n         try {\n@@ -2388,7 +2451,7 @@ public static void test_appender_table_does_not_exist() throws Exception {\n     }\n \n     public static void test_appender_table_deleted() throws Exception {\n-        DuckDBConnection conn = DriverManager.getConnection(\"jdbc:duckdb:\").unwrap(DuckDBConnection.class);\n+        DuckDBConnection conn = DriverManager.getConnection(JDBC_URL).unwrap(DuckDBConnection.class);\n         Statement stmt = conn.createStatement();\n \n         stmt.execute(\"CREATE TABLE data (a INTEGER)\");\n@@ -2415,7 +2478,7 @@ public static void test_appender_table_deleted() throws Exception {\n     }\n \n     public static void test_appender_append_too_many_columns() throws Exception {\n-        DuckDBConnection conn = DriverManager.getConnection(\"jdbc:duckdb:\").unwrap(DuckDBConnection.class);\n+        DuckDBConnection conn = DriverManager.getConnection(JDBC_URL).unwrap(DuckDBConnection.class);\n         Statement stmt = conn.createStatement();\n \n         stmt.execute(\"CREATE TABLE data (a INTEGER)\");\n@@ -2434,7 +2497,7 @@ public static void test_appender_append_too_many_columns() throws Exception {\n     }\n \n     public static void test_appender_append_too_few_columns() throws Exception {\n-        DuckDBConnection conn = DriverManager.getConnection(\"jdbc:duckdb:\").unwrap(DuckDBConnection.class);\n+        DuckDBConnection conn = DriverManager.getConnection(JDBC_URL).unwrap(DuckDBConnection.class);\n         Statement stmt = conn.createStatement();\n \n         stmt.execute(\"CREATE TABLE data (a INTEGER, b INTEGER)\");\n@@ -2453,7 +2516,7 @@ public static void test_appender_append_too_few_columns() throws Exception {\n     }\n \n     public static void test_appender_type_mismatch() throws Exception {\n-        DuckDBConnection conn = DriverManager.getConnection(\"jdbc:duckdb:\").unwrap(DuckDBConnection.class);\n+        DuckDBConnection conn = DriverManager.getConnection(JDBC_URL).unwrap(DuckDBConnection.class);\n         Statement stmt = conn.createStatement();\n \n         stmt.execute(\"CREATE TABLE data (a INTEGER)\");\n@@ -2471,7 +2534,7 @@ public static void test_appender_type_mismatch() throws Exception {\n     }\n \n     public static void test_appender_null_integer() throws Exception {\n-        DuckDBConnection conn = DriverManager.getConnection(\"jdbc:duckdb:\").unwrap(DuckDBConnection.class);\n+        DuckDBConnection conn = DriverManager.getConnection(JDBC_URL).unwrap(DuckDBConnection.class);\n         Statement stmt = conn.createStatement();\n \n         stmt.execute(\"CREATE TABLE data (a INTEGER)\");\n@@ -2496,7 +2559,7 @@ public static void test_appender_null_integer() throws Exception {\n     }\n \n     public static void test_appender_null_varchar() throws Exception {\n-        DuckDBConnection conn = DriverManager.getConnection(\"jdbc:duckdb:\").unwrap(DuckDBConnection.class);\n+        DuckDBConnection conn = DriverManager.getConnection(JDBC_URL).unwrap(DuckDBConnection.class);\n         Statement stmt = conn.createStatement();\n \n         stmt.execute(\"CREATE TABLE data (a VARCHAR)\");\n@@ -2520,7 +2583,7 @@ public static void test_appender_null_varchar() throws Exception {\n     }\n \n     public static void test_get_catalog() throws Exception {\n-        Connection conn = DriverManager.getConnection(\"jdbc:duckdb:\");\n+        Connection conn = DriverManager.getConnection(JDBC_URL);\n         ResultSet rs = conn.getMetaData().getCatalogs();\n         HashSet<String> set = new HashSet<String>();\n         while (rs.next()) {\n@@ -2533,7 +2596,7 @@ public static void test_get_catalog() throws Exception {\n     }\n \n     public static void test_set_catalog() throws Exception {\n-        try (Connection conn = DriverManager.getConnection(\"jdbc:duckdb:\")) {\n+        try (Connection conn = DriverManager.getConnection(JDBC_URL)) {\n \n             assertThrows(() -> conn.setCatalog(\"other\"), SQLException.class);\n \n@@ -2547,7 +2610,7 @@ public static void test_set_catalog() throws Exception {\n     }\n \n     public static void test_get_table_types_bug1258() throws Exception {\n-        Connection conn = DriverManager.getConnection(\"jdbc:duckdb:\");\n+        Connection conn = DriverManager.getConnection(JDBC_URL);\n         Statement stmt = conn.createStatement();\n         stmt.execute(\"CREATE TABLE a1 (i INTEGER)\");\n         stmt.execute(\"CREATE TABLE a2 (i INTEGER)\");\n@@ -2605,7 +2668,7 @@ public static void test_get_table_types_bug1258() throws Exception {\n     }\n \n     public static void test_utf_string_bug1271() throws Exception {\n-        DuckDBConnection conn = DriverManager.getConnection(\"jdbc:duckdb:\").unwrap(DuckDBConnection.class);\n+        DuckDBConnection conn = DriverManager.getConnection(JDBC_URL).unwrap(DuckDBConnection.class);\n         Statement stmt = conn.createStatement();\n \n         ResultSet rs = stmt.executeQuery(\"SELECT 'M\u00fchleisen', '\ud83e\udd86', '\ud83e\udd84\u0f80\u0f72123456789'\");\n@@ -2625,7 +2688,7 @@ public static void test_utf_string_bug1271() throws Exception {\n     }\n \n     public static void test_statement_creation_bug1268() throws Exception {\n-        DuckDBConnection conn = DriverManager.getConnection(\"jdbc:duckdb:\").unwrap(DuckDBConnection.class);\n+        DuckDBConnection conn = DriverManager.getConnection(JDBC_URL).unwrap(DuckDBConnection.class);\n         Statement stmt;\n \n         stmt = conn.createStatement();\n@@ -2655,7 +2718,7 @@ private static String blob_to_string(Blob b) throws SQLException {\n     }\n \n     public static void test_blob_bug1090() throws Exception {\n-        DuckDBConnection conn = DriverManager.getConnection(\"jdbc:duckdb:\").unwrap(DuckDBConnection.class);\n+        DuckDBConnection conn = DriverManager.getConnection(JDBC_URL).unwrap(DuckDBConnection.class);\n         Statement stmt = conn.createStatement();\n \n         String test_str1 = \"asdf\";\n@@ -2691,7 +2754,7 @@ public static void test_uuid() throws Exception {\n         // Generated by DuckDB\n         String testUuid = \"a0a34a0a-1794-47b6-b45c-0ac68cc03702\";\n \n-        try (DuckDBConnection conn = DriverManager.getConnection(\"jdbc:duckdb:\").unwrap(DuckDBConnection.class);\n+        try (DuckDBConnection conn = DriverManager.getConnection(JDBC_URL).unwrap(DuckDBConnection.class);\n              Statement stmt = conn.createStatement();\n              DuckDBResultSet rs = stmt.executeQuery(\"SELECT a, NULL::UUID b, a::VARCHAR c, '\" + testUuid +\n                                                     \"'::UUID d FROM (SELECT uuid() a)\")\n@@ -2721,7 +2784,7 @@ public static void test_uuid() throws Exception {\n     }\n \n     public static void test_unsigned_integers() throws Exception {\n-        DuckDBConnection conn = DriverManager.getConnection(\"jdbc:duckdb:\").unwrap(DuckDBConnection.class);\n+        DuckDBConnection conn = DriverManager.getConnection(JDBC_URL).unwrap(DuckDBConnection.class);\n         Statement stmt = conn.createStatement();\n \n         ResultSet rs = stmt.executeQuery(\n@@ -2764,7 +2827,7 @@ public static void test_unsigned_integers() throws Exception {\n     }\n \n     public static void test_get_schema() throws Exception {\n-        DuckDBConnection conn = DriverManager.getConnection(\"jdbc:duckdb:\").unwrap(DuckDBConnection.class);\n+        DuckDBConnection conn = DriverManager.getConnection(JDBC_URL).unwrap(DuckDBConnection.class);\n \n         assertEquals(conn.getSchema(), DuckDBConnection.DEFAULT_SCHEMA);\n \n@@ -2793,7 +2856,7 @@ public static void test_get_schema() throws Exception {\n      */\n     public static void test_cached_row_set() throws Exception {\n         CachedRowSet rowSet = RowSetProvider.newFactory().createCachedRowSet();\n-        rowSet.setUrl(\"jdbc:duckdb:\");\n+        rowSet.setUrl(JDBC_URL);\n         rowSet.setCommand(\"select 1\");\n         rowSet.execute();\n \n@@ -2802,7 +2865,7 @@ public static void test_cached_row_set() throws Exception {\n     }\n \n     public static void test_json() throws Exception {\n-        DuckDBConnection conn = DriverManager.getConnection(\"jdbc:duckdb:\").unwrap(DuckDBConnection.class);\n+        DuckDBConnection conn = DriverManager.getConnection(JDBC_URL).unwrap(DuckDBConnection.class);\n \n         try (Statement stmt = conn.createStatement()) {\n             ResultSet rs = stmt.executeQuery(\"select [1, 5]::JSON\");\n@@ -2834,14 +2897,14 @@ public static void test_json() throws Exception {\n     }\n \n     public static void test_bug4218_prepare_types() throws Exception {\n-        DuckDBConnection conn = DriverManager.getConnection(\"jdbc:duckdb:\").unwrap(DuckDBConnection.class);\n+        DuckDBConnection conn = DriverManager.getConnection(JDBC_URL).unwrap(DuckDBConnection.class);\n         String query = \"SELECT ($1 || $2)\";\n         conn.prepareStatement(query);\n         assertTrue(true);\n     }\n \n     public static void test_bug532_timestamp() throws Exception {\n-        Connection conn = DriverManager.getConnection(\"jdbc:duckdb:\");\n+        Connection conn = DriverManager.getConnection(JDBC_URL);\n         Statement stmt = conn.createStatement();\n \n         ResultSet rs;\n@@ -2855,7 +2918,7 @@ public static void test_bug532_timestamp() throws Exception {\n     }\n \n     public static void test_bug966_typeof() throws Exception {\n-        Connection conn = DriverManager.getConnection(\"jdbc:duckdb:\");\n+        Connection conn = DriverManager.getConnection(JDBC_URL);\n         Statement stmt = conn.createStatement();\n         ResultSet rs = stmt.executeQuery(\"select typeof(1);\");\n \n@@ -2870,7 +2933,7 @@ public static void test_config() throws Exception {\n         Properties info = new Properties();\n         info.put(memory_limit, \"500MB\");\n         info.put(threads, \"5\");\n-        Connection conn = DriverManager.getConnection(\"jdbc:duckdb:\", info);\n+        Connection conn = DriverManager.getConnection(JDBC_URL, info);\n \n         assertEquals(\"500.0MB\", getSetting(conn, memory_limit));\n         assertEquals(\"5\", getSetting(conn, threads));\n@@ -2880,7 +2943,7 @@ public static void test_invalid_config() throws Exception {\n         Properties info = new Properties();\n         info.put(\"invalid config name\", \"true\");\n \n-        String message = assertThrows(() -> DriverManager.getConnection(\"jdbc:duckdb:\", info), SQLException.class);\n+        String message = assertThrows(() -> DriverManager.getConnection(JDBC_URL, info), SQLException.class);\n \n         assertTrue(message.contains(\"Unrecognized configuration property \\\"invalid config name\\\"\"));\n     }\n@@ -2889,7 +2952,7 @@ public static void test_valid_but_local_config_throws_exception() throws Excepti\n         Properties info = new Properties();\n         info.put(\"ordered_aggregate_threshold\", \"123\");\n \n-        String message = assertThrows(() -> DriverManager.getConnection(\"jdbc:duckdb:\", info), SQLException.class);\n+        String message = assertThrows(() -> DriverManager.getConnection(JDBC_URL, info), SQLException.class);\n \n         assertTrue(message.contains(\"Failed to set configuration option \\\"ordered_aggregate_threshold\\\"\"));\n     }\n@@ -2905,7 +2968,7 @@ private static String getSetting(Connection conn, String settingName) throws Exc\n     }\n \n     public static void test_describe() throws Exception {\n-        Connection conn = DriverManager.getConnection(\"jdbc:duckdb:\");\n+        Connection conn = DriverManager.getConnection(JDBC_URL);\n \n         try (Statement stmt = conn.createStatement()) {\n             stmt.execute(\"CREATE TABLE TEST (COL INT DEFAULT 42)\");\n@@ -2922,7 +2985,7 @@ public static void test_describe() throws Exception {\n     }\n \n     public static void test_null_bytes_in_string() throws Exception {\n-        try (Connection conn = DriverManager.getConnection(\"jdbc:duckdb:\")) {\n+        try (Connection conn = DriverManager.getConnection(JDBC_URL)) {\n             try (PreparedStatement stmt = conn.prepareStatement(\"select ?::varchar\")) {\n                 stmt.setObject(1, \"bob\\u0000r\");\n                 ResultSet rs = stmt.executeQuery();\n@@ -2934,7 +2997,7 @@ public static void test_null_bytes_in_string() throws Exception {\n     }\n \n     public static void test_get_functions() throws Exception {\n-        try (Connection conn = DriverManager.getConnection(\"jdbc:duckdb:\")) {\n+        try (Connection conn = DriverManager.getConnection(JDBC_URL)) {\n             ResultSet functions =\n                 conn.getMetaData().getFunctions(null, DuckDBConnection.DEFAULT_SCHEMA, \"string_split\");\n \n@@ -2965,7 +3028,7 @@ public static void test_get_functions() throws Exception {\n     }\n \n     public static void test_get_primary_keys() throws Exception {\n-        try (Connection conn = DriverManager.getConnection(\"jdbc:duckdb:\"); Statement stmt = conn.createStatement();) {\n+        try (Connection conn = DriverManager.getConnection(JDBC_URL); Statement stmt = conn.createStatement();) {\n             Object[][] testData = new Object[12][6];\n             int testDataIndex = 0;\n \n@@ -3083,7 +3146,7 @@ public static void test_instance_cache() throws Exception {\n         Path database_file = Files.createTempFile(\"duckdb-instance-cache-test-\", \".duckdb\");\n         database_file.toFile().delete();\n \n-        String jdbc_url = \"jdbc:duckdb:\" + database_file.toString();\n+        String jdbc_url = JDBC_URL + database_file.toString();\n \n         Connection conn = DriverManager.getConnection(jdbc_url);\n         Connection conn2 = DriverManager.getConnection(jdbc_url);\n@@ -3093,7 +3156,7 @@ public static void test_instance_cache() throws Exception {\n     }\n \n     public static void test_user_password() throws Exception {\n-        String jdbc_url = \"jdbc:duckdb:\";\n+        String jdbc_url = JDBC_URL;\n         Properties p = new Properties();\n         p.setProperty(\"user\", \"wilbur\");\n         p.setProperty(\"password\", \"quack\");\n@@ -3110,7 +3173,7 @@ public static void test_user_password() throws Exception {\n     public static void test_readonly_remains_bug5593() throws Exception {\n         Path database_file = Files.createTempFile(\"duckdb-instance-cache-test-\", \".duckdb\");\n         database_file.toFile().delete();\n-        String jdbc_url = \"jdbc:duckdb:\" + database_file.toString();\n+        String jdbc_url = JDBC_URL + database_file.toString();\n \n         Properties p = new Properties();\n         p.setProperty(\"duckdb.read_only\", \"true\");\n@@ -3124,7 +3187,7 @@ public static void test_readonly_remains_bug5593() throws Exception {\n     }\n \n     public static void test_supportsLikeEscapeClause_shouldBe_true() throws Exception {\n-        Connection connection = DriverManager.getConnection(\"jdbc:duckdb:\");\n+        Connection connection = DriverManager.getConnection(JDBC_URL);\n         DatabaseMetaData databaseMetaData = connection.getMetaData();\n         assertTrue(databaseMetaData.supportsLikeEscapeClause(),\n                    \"DatabaseMetaData.supportsLikeEscapeClause() should be true.\");\n@@ -3138,7 +3201,7 @@ public static void test_supports_catalogs_in_table_definitions() throws Exceptio\n                                       String.format(\"AND table_name = '%s'\", TABLE_NAME);\n         final String QUALIFIED_TABLE_NAME = CATALOG_NAME + \".\" + TABLE_NAME;\n         ResultSet resultSet = null;\n-        try (final Connection connection = DriverManager.getConnection(\"jdbc:duckdb:\");\n+        try (final Connection connection = DriverManager.getConnection(JDBC_URL);\n              final Statement statement = connection.createStatement();) {\n             final DatabaseMetaData databaseMetaData = connection.getMetaData();\n             statement.execute(String.format(\"ATTACH '' AS \\\"%s\\\"\", CATALOG_NAME));\n@@ -3184,7 +3247,7 @@ public static void test_supports_catalogs_in_data_manipulation() throws Exceptio\n         final String QUALIFIED_TABLE_NAME = CATALOG_NAME + \".\" + TABLE_NAME;\n \n         ResultSet resultSet = null;\n-        try (final Connection connection = DriverManager.getConnection(\"jdbc:duckdb:\");\n+        try (final Connection connection = DriverManager.getConnection(JDBC_URL);\n              final Statement statement = connection.createStatement();) {\n             final DatabaseMetaData databaseMetaData = connection.getMetaData();\n             statement.execute(String.format(\"ATTACH '' AS \\\"%s\\\"\", CATALOG_NAME));\n@@ -3245,7 +3308,7 @@ public static void test_supports_catalogs_in_index_definitions() throws Exceptio\n         final String QUALIFIED_INDEX_NAME = CATALOG_NAME + \".\" + INDEX_NAME;\n \n         ResultSet resultSet = null;\n-        try (final Connection connection = DriverManager.getConnection(\"jdbc:duckdb:\");\n+        try (final Connection connection = DriverManager.getConnection(JDBC_URL);\n              final Statement statement = connection.createStatement();) {\n             final DatabaseMetaData databaseMetaData = connection.getMetaData();\n             statement.execute(String.format(\"ATTACH '' AS \\\"%s\\\"\", CATALOG_NAME));\n@@ -3289,7 +3352,7 @@ public static void test_supports_catalogs_in_index_definitions() throws Exceptio\n     }\n \n     public static void test_structs() throws Exception {\n-        try (Connection connection = DriverManager.getConnection(\"jdbc:duckdb:\");\n+        try (Connection connection = DriverManager.getConnection(JDBC_URL);\n              PreparedStatement statement = connection.prepareStatement(\"select {\\\"a\\\": 1}\")) {\n             ResultSet resultSet = statement.executeQuery();\n             assertTrue(resultSet.next());\n@@ -3300,7 +3363,7 @@ public static void test_structs() throws Exception {\n     }\n \n     public static void test_union() throws Exception {\n-        try (Connection connection = DriverManager.getConnection(\"jdbc:duckdb:\");\n+        try (Connection connection = DriverManager.getConnection(JDBC_URL);\n              Statement statement = connection.createStatement()) {\n             statement.execute(\"CREATE TABLE tbl1(u UNION(num INT, str VARCHAR));\");\n             statement.execute(\"INSERT INTO tbl1 values (1) , ('two') , (union_value(str := 'three'));\");\n@@ -3316,7 +3379,7 @@ public static void test_union() throws Exception {\n     }\n \n     public static void test_list() throws Exception {\n-        try (Connection connection = DriverManager.getConnection(\"jdbc:duckdb:\");\n+        try (Connection connection = DriverManager.getConnection(JDBC_URL);\n              Statement statement = connection.createStatement()) {\n             try (ResultSet rs = statement.executeQuery(\"select [1]\")) {\n                 assertTrue(rs.next());\n@@ -3351,7 +3414,7 @@ public static void test_list() throws Exception {\n     }\n \n     public static void test_array_resultset() throws Exception {\n-        try (Connection connection = DriverManager.getConnection(\"jdbc:duckdb:\");\n+        try (Connection connection = DriverManager.getConnection(JDBC_URL);\n              Statement statement = connection.createStatement()) {\n             try (ResultSet rs = statement.executeQuery(\"select [42, 69]\")) {\n                 assertTrue(rs.next());\n@@ -3484,7 +3547,7 @@ private static Object toJavaObject(Object t) {\n     }\n \n     public static void test_map() throws Exception {\n-        try (Connection connection = DriverManager.getConnection(\"jdbc:duckdb:\");\n+        try (Connection connection = DriverManager.getConnection(JDBC_URL);\n              PreparedStatement statement = connection.prepareStatement(\"select map([100, 5], ['a', 'b'])\")) {\n             ResultSet rs = statement.executeQuery();\n             assertTrue(rs.next());\n@@ -3493,7 +3556,7 @@ public static void test_map() throws Exception {\n     }\n \n     public static void test_extension_type() throws Exception {\n-        try (Connection connection = DriverManager.getConnection(\"jdbc:duckdb:\");\n+        try (Connection connection = DriverManager.getConnection(JDBC_URL);\n              Statement stmt = connection.createStatement()) {\n \n             DuckDBNative.duckdb_jdbc_create_extension_type((DuckDBConnection) connection);\n@@ -3508,7 +3571,7 @@ public static void test_extension_type() throws Exception {\n     }\n \n     public static void test_extension_type_metadata() throws Exception {\n-        try (Connection conn = DriverManager.getConnection(\"jdbc:duckdb:\"); Statement stmt = conn.createStatement();) {\n+        try (Connection conn = DriverManager.getConnection(JDBC_URL); Statement stmt = conn.createStatement();) {\n             DuckDBNative.duckdb_jdbc_create_extension_type((DuckDBConnection) conn);\n \n             stmt.execute(\"CREATE TABLE test (foo test_type, bar byte_test_type);\");\n@@ -3532,7 +3595,7 @@ public static void test_extension_type_metadata() throws Exception {\n     }\n \n     public static void test_getColumnClassName() throws Exception {\n-        try (Connection conn = DriverManager.getConnection(\"jdbc:duckdb:\"); Statement s = conn.createStatement();) {\n+        try (Connection conn = DriverManager.getConnection(JDBC_URL); Statement s = conn.createStatement();) {\n             try (ResultSet rs = s.executeQuery(\"select * from test_all_types()\")) {\n                 ResultSetMetaData rsmd = rs.getMetaData();\n                 rs.next();\n@@ -3546,7 +3609,7 @@ public static void test_getColumnClassName() throws Exception {\n     }\n \n     public static void test_update_count() throws Exception {\n-        try (Connection connection = DriverManager.getConnection(\"jdbc:duckdb:\");\n+        try (Connection connection = DriverManager.getConnection(JDBC_URL);\n              Statement s = connection.createStatement()) {\n             s.execute(\"create table t (i int)\");\n             assertEquals(s.getUpdateCount(), -1);\n@@ -3560,7 +3623,7 @@ public static void test_update_count() throws Exception {\n     }\n \n     public static void test_get_result_set() throws Exception {\n-        try (Connection conn = DriverManager.getConnection(\"jdbc:duckdb:\")) {\n+        try (Connection conn = DriverManager.getConnection(JDBC_URL)) {\n             try (PreparedStatement p = conn.prepareStatement(\"select 1\")) {\n                 p.executeQuery();\n                 try (ResultSet resultSet = p.getResultSet()) {\n@@ -3582,7 +3645,7 @@ public static void test_get_result_set() throws Exception {\n \n     // https://github.com/duckdb/duckdb/issues/7218\n     public static void test_unknown_result_type() throws Exception {\n-        try (Connection connection = DriverManager.getConnection(\"jdbc:duckdb:\");\n+        try (Connection connection = DriverManager.getConnection(JDBC_URL);\n              PreparedStatement p = connection.prepareStatement(\n                  \"select generate_series.generate_series from generate_series(?, ?) order by 1\")) {\n             p.setInt(1, 0);\n@@ -3719,7 +3782,7 @@ static <K, V> Map<K, V> mapOf(Object... pairs) {\n     public static void test_all_types() throws Exception {\n         Logger logger = Logger.getAnonymousLogger();\n \n-        try (Connection conn = DriverManager.getConnection(\"jdbc:duckdb:\");\n+        try (Connection conn = DriverManager.getConnection(JDBC_URL);\n              PreparedStatement stmt = conn.prepareStatement(\"select * from test_all_types()\")) {\n             conn.createStatement().execute(\"set timezone = 'UTC'\");\n \n@@ -3772,7 +3835,7 @@ private static <T> void assertListsEqual(List<T> actual, List<T> expected) throw\n \n     public static void test_cancel() throws Exception {\n         ExecutorService service = Executors.newFixedThreadPool(1);\n-        try (Connection conn = DriverManager.getConnection(\"jdbc:duckdb:\"); Statement stmt = conn.createStatement()) {\n+        try (Connection conn = DriverManager.getConnection(JDBC_URL); Statement stmt = conn.createStatement()) {\n             Future<String> thread = service.submit(\n                 ()\n                     -> assertThrows(()\n@@ -3786,7 +3849,7 @@ public static void test_cancel() throws Exception {\n     }\n \n     public static void test_prepared_statement_metadata() throws Exception {\n-        try (Connection conn = DriverManager.getConnection(\"jdbc:duckdb:\");\n+        try (Connection conn = DriverManager.getConnection(JDBC_URL);\n              PreparedStatement stmt = conn.prepareStatement(\"SELECT 'hello' as world\")) {\n             ResultSetMetaData metadata = stmt.getMetaData();\n             assertEquals(metadata.getColumnCount(), 1);\n@@ -3796,7 +3859,7 @@ public static void test_prepared_statement_metadata() throws Exception {\n     }\n \n     public static void test_unbindable_query() throws Exception {\n-        try (Connection conn = DriverManager.getConnection(\"jdbc:duckdb:\");\n+        try (Connection conn = DriverManager.getConnection(JDBC_URL);\n              PreparedStatement stmt = conn.prepareStatement(\"SELECT ?, ?\")) {\n             stmt.setString(1, \"word1\");\n             stmt.setInt(2, 42);\n@@ -3828,7 +3891,7 @@ public static void test_unbindable_query() throws Exception {\n     }\n \n     public static void test_labels_with_prepped_statement() throws Exception {\n-        try (Connection conn = DriverManager.getConnection(\"jdbc:duckdb:\")) {\n+        try (Connection conn = DriverManager.getConnection(JDBC_URL)) {\n             try (PreparedStatement stmt = conn.prepareStatement(\"SELECT ? as result\")) {\n                 stmt.setString(1, \"Quack\");\n                 try (ResultSet rs = stmt.executeQuery()) {\n@@ -3841,7 +3904,7 @@ public static void test_labels_with_prepped_statement() throws Exception {\n     }\n \n     public static void test_execute_updated_on_prep_stmt() throws SQLException {\n-        try (Connection conn = DriverManager.getConnection(\"jdbc:duckdb:\"); Statement s = conn.createStatement()) {\n+        try (Connection conn = DriverManager.getConnection(JDBC_URL); Statement s = conn.createStatement()) {\n             s.executeUpdate(\"create table t (i int)\");\n \n             try (PreparedStatement p = conn.prepareStatement(\"insert into t (i) select ?\")) {\n@@ -3852,7 +3915,7 @@ public static void test_execute_updated_on_prep_stmt() throws SQLException {\n     }\n \n     public static void test_invalid_execute_calls() throws Exception {\n-        try (Connection conn = DriverManager.getConnection(\"jdbc:duckdb:\")) {\n+        try (Connection conn = DriverManager.getConnection(JDBC_URL)) {\n             try (Statement s = conn.createStatement()) {\n                 s.execute(\"create table test (id int)\");\n             }\n@@ -3869,7 +3932,7 @@ public static void test_invalid_execute_calls() throws Exception {\n     }\n \n     public static void test_race() throws Exception {\n-        try (Connection connection = DriverManager.getConnection(\"jdbc:duckdb:\")) {\n+        try (Connection connection = DriverManager.getConnection(JDBC_URL)) {\n             ExecutorService executorService = Executors.newFixedThreadPool(10);\n \n             List<Callable<Object>> tasks = Collections.nCopies(1000, () -> {\n@@ -3903,8 +3966,8 @@ public static void test_stream_multiple_open_results() throws Exception {\n         props.setProperty(JDBC_STREAM_RESULTS, String.valueOf(true));\n \n         String QUERY = \"SELECT * FROM range(100000)\";\n-        try (Connection conn = DriverManager.getConnection(\"jdbc:duckdb:\", props);\n-             Statement stmt1 = conn.createStatement(); Statement stmt2 = conn.createStatement()) {\n+        try (Connection conn = DriverManager.getConnection(JDBC_URL, props); Statement stmt1 = conn.createStatement();\n+             Statement stmt2 = conn.createStatement()) {\n \n             try (ResultSet rs1 = stmt1.executeQuery(QUERY); ResultSet ignored = stmt2.executeQuery(QUERY)) {\n                 assertThrows(rs1::next, SQLException.class);\n@@ -3913,7 +3976,7 @@ public static void test_stream_multiple_open_results() throws Exception {\n     }\n \n     public static void test_offset_limit() throws Exception {\n-        try (Connection connection = DriverManager.getConnection(\"jdbc:duckdb:\");\n+        try (Connection connection = DriverManager.getConnection(JDBC_URL);\n              Statement s = connection.createStatement()) {\n             s.executeUpdate(\"create table t (i int not null)\");\n             s.executeUpdate(\"insert into t values (1), (1), (2), (3), (3), (3)\");\n@@ -3935,7 +3998,7 @@ public static void test_offset_limit() throws Exception {\n     }\n \n     public static void test_UUID_binding() throws Exception {\n-        try (Connection conn = DriverManager.getConnection(\"jdbc:duckdb:\");\n+        try (Connection conn = DriverManager.getConnection(JDBC_URL);\n              PreparedStatement statement = conn.prepareStatement(\"select '0b17ce61-375c-4ad8-97b3-349d96d35ab1'::UUID\");\n              ResultSet resultSet = statement.executeQuery()) {\n             resultSet.next();\n@@ -3947,7 +4010,7 @@ public static void test_result_streaming() throws Exception {\n         Properties props = new Properties();\n         props.setProperty(JDBC_STREAM_RESULTS, String.valueOf(true));\n \n-        try (Connection conn = DriverManager.getConnection(\"jdbc:duckdb:\", props);\n+        try (Connection conn = DriverManager.getConnection(JDBC_URL, props);\n              PreparedStatement stmt1 = conn.prepareStatement(\"SELECT * FROM range(100000)\");\n              ResultSet rs = stmt1.executeQuery()) {\n             while (rs.next()) {\n@@ -3959,7 +4022,7 @@ public static void test_result_streaming() throws Exception {\n \n     public static void test_struct_use_after_free() throws Exception {\n         Object struct, array;\n-        try (Connection conn = DriverManager.getConnection(\"jdbc:duckdb:\");\n+        try (Connection conn = DriverManager.getConnection(JDBC_URL);\n              PreparedStatement stmt = conn.prepareStatement(\"SELECT struct_pack(hello := 2), [42]\");\n              ResultSet rs = stmt.executeQuery()) {\n             rs.next();\n@@ -3971,7 +4034,7 @@ public static void test_struct_use_after_free() throws Exception {\n     }\n \n     public static void test_user_agent_default() throws Exception {\n-        try (Connection conn = DriverManager.getConnection(\"jdbc:duckdb:\")) {\n+        try (Connection conn = DriverManager.getConnection(JDBC_URL)) {\n             assertEquals(getSetting(conn, \"custom_user_agent\"), \"\");\n \n             try (PreparedStatement stmt1 = conn.prepareStatement(\"PRAGMA user_agent\");\n@@ -3986,7 +4049,7 @@ public static void test_user_agent_custom() throws Exception {\n         Properties props = new Properties();\n         props.setProperty(DUCKDB_USER_AGENT_PROPERTY, \"CUSTOM_STRING\");\n \n-        try (Connection conn = DriverManager.getConnection(\"jdbc:duckdb:\", props)) {\n+        try (Connection conn = DriverManager.getConnection(JDBC_URL, props)) {\n             assertEquals(getSetting(conn, \"custom_user_agent\"), \"CUSTOM_STRING\");\n \n             try (PreparedStatement stmt1 = conn.prepareStatement(\"PRAGMA user_agent\");\n",
  "problem_statement": "JVM SIGSEGV after connection close with ingested arrow data.\n### What happens?\r\n\r\nJVM crashed with a SIGSEGV after running query that was \"cancelled\". \r\n```\r\n#\r\n# A fatal error has been detected by the Java Runtime Environment:\r\n#\r\n# SIGSEGV (0xb) at pc=0x00007fcef7bb6db5, pid=1, tid=226\r\n#\r\n# JRE version: OpenJDK Runtime Environment Temurin-17.0.9+9 (17.0.9+9) (build 17.0.9+9)\r\n# Java VM: OpenJDK 64-Bit Server VM Temurin-17.0.9+9 (17.0.9+9, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)\r\n# Problematic frame:\r\n# C [libduckdb_java16057437192090020633.so+0x805db5] std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release()+0x65\r\n# Core dump will be written. Default location: //core.1\r\n# \r\n# An error report file with more information is saved as:\r\n# /tmp/hs_err_pid1.log\r\n# [error occurred during error reporting (), id 0xb, SIGSEGV (0xb) at pc=0x00007fcfb2b8e898]\r\n#\r\n# If you would like to submit a bug report, please visit:\r\n# https://github.com/adoptium/adoptium-support/issues\r\n# The crash happened outside the Java Virtual Machine in native code.\r\n# See problematic frame for where to report the bug.\r\n#\r\n```\r\n\r\nWhen this happened an Arrow Payload was loaded into duckdb using something like the following (kotlin)\r\n```\r\nArrowStreamReader(inputStream, allocator).use { arrowReader ->\r\n    ArrowArrayStream.allocateNew(allocator).use { arrowArrayStream ->\r\n        Data.exportArrayStream(allocator, arrowReader, arrowArrayStream)\r\n        duckDBConnection.registerArrowStream(tempTableName, arrowArrayStream)\r\n        duckDBConnection.createStatement().use { statement ->\r\n        statement.executeUpdate(\"Create TABLE \\\"$tableName\\\" AS SELECT * FROM \\\"${tempTableName}\\\"\")\r\n    }\r\n}\r\n```\r\n\r\nThen, a query is executed against that same connection using the ingested table. \r\nAt some point during execution, the query is killed, and attempting to extract the result (again using the arrow methods) fails with a `java.sql.SQLException: Result set is closed` error (likely expected). \r\n\r\nAfter the connection is closed, the above SIGSEGV kills the JVM. Every time we've seen, the container is also killed causing us to lose the core dump (if one is successfully written). \r\n\r\n### To Reproduce\r\n\r\nI have not yet successfully managed to reproduce in a reliable way.\r\n\r\n### OS:\r\n\r\nLinux x86\r\n\r\n### DuckDB Version:\r\n\r\n0.9.1\r\n\r\n### DuckDB Client:\r\n\r\njava\r\n\r\n### Full Name:\r\n\r\nJonathan Swenson\r\n\r\n### Affiliation:\r\n\r\nOmni\r\n\r\n\nJVM SIGSEGV after connection close with ingested arrow data.\n### What happens?\r\n\r\nJVM crashed with a SIGSEGV after running query that was \"cancelled\". \r\n```\r\n#\r\n# A fatal error has been detected by the Java Runtime Environment:\r\n#\r\n# SIGSEGV (0xb) at pc=0x00007fcef7bb6db5, pid=1, tid=226\r\n#\r\n# JRE version: OpenJDK Runtime Environment Temurin-17.0.9+9 (17.0.9+9) (build 17.0.9+9)\r\n# Java VM: OpenJDK 64-Bit Server VM Temurin-17.0.9+9 (17.0.9+9, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)\r\n# Problematic frame:\r\n# C [libduckdb_java16057437192090020633.so+0x805db5] std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release()+0x65\r\n# Core dump will be written. Default location: //core.1\r\n# \r\n# An error report file with more information is saved as:\r\n# /tmp/hs_err_pid1.log\r\n# [error occurred during error reporting (), id 0xb, SIGSEGV (0xb) at pc=0x00007fcfb2b8e898]\r\n#\r\n# If you would like to submit a bug report, please visit:\r\n# https://github.com/adoptium/adoptium-support/issues\r\n# The crash happened outside the Java Virtual Machine in native code.\r\n# See problematic frame for where to report the bug.\r\n#\r\n```\r\n\r\nWhen this happened an Arrow Payload was loaded into duckdb using something like the following (kotlin)\r\n```\r\nArrowStreamReader(inputStream, allocator).use { arrowReader ->\r\n    ArrowArrayStream.allocateNew(allocator).use { arrowArrayStream ->\r\n        Data.exportArrayStream(allocator, arrowReader, arrowArrayStream)\r\n        duckDBConnection.registerArrowStream(tempTableName, arrowArrayStream)\r\n        duckDBConnection.createStatement().use { statement ->\r\n        statement.executeUpdate(\"Create TABLE \\\"$tableName\\\" AS SELECT * FROM \\\"${tempTableName}\\\"\")\r\n    }\r\n}\r\n```\r\n\r\nThen, a query is executed against that same connection using the ingested table. \r\nAt some point during execution, the query is killed, and attempting to extract the result (again using the arrow methods) fails with a `java.sql.SQLException: Result set is closed` error (likely expected). \r\n\r\nAfter the connection is closed, the above SIGSEGV kills the JVM. Every time we've seen, the container is also killed causing us to lose the core dump (if one is successfully written). \r\n\r\n### To Reproduce\r\n\r\nI have not yet successfully managed to reproduce in a reliable way.\r\n\r\n### OS:\r\n\r\nLinux x86\r\n\r\n### DuckDB Version:\r\n\r\n0.9.1\r\n\r\n### DuckDB Client:\r\n\r\njava\r\n\r\n### Full Name:\r\n\r\nJonathan Swenson\r\n\r\n### Affiliation:\r\n\r\nOmni\r\n\r\n\n",
  "hints_text": "Potentially also related, I have noticed that upon ingesting data using the above method for arrowStreams, closing the connection and allocator often intermittently throws a IllegalStateException `RefCnt has gone negative`. \r\n\r\nIf the resource isn't closed, closing the allocator results in an error indicating memory has been leaked. \r\n\r\nPerhaps there needs to be a way to unregister an arrow stream (manually) from the java side so that it can be freed before the connection is closed? \nhaving trouble getting this to consistently reproduce, but managed to get the same behavior, but a slightly different error frame: \r\n```\r\n# An error report file with more information is saved as:\r\n# /tmp/hs_err_pid1.log\r\n#\r\n# A fatal error has been detected by the Java Runtime Environment:\r\n#\r\n# SIGSEGV (0xb) at pc=0x00007f9f4c9e659f, pid=1, tid=107\r\n#\r\n# JRE version: OpenJDK Runtime Environment Temurin-17.0.9+9 (17.0.9+9) (build 17.0.9+9)\r\n# Java VM: OpenJDK 64-Bit Server VM Temurin-17.0.9+9 (17.0.9+9, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)\r\n# Problematic frame:\r\n# v ~BufferBlob::jni_fast_GetLongField\r\n#\r\n# Core dump will be written. Default location: //core.1\r\n#\r\n```\nMy gut feel as though something about how I'm calling cancel is not allowed. \r\n\r\nLooking at the comment [here](https://github.com/duckdb/duckdb/blob/main/tools/jdbc/src/main/java/org/duckdb/DuckDBPreparedStatement.java#L339-L342)\r\n\r\n> This function calls the underlying C++ interrupt function which aborts the query running on that connection.\r\n> It is not safe to call this function when the connection is already closed.\r\n\r\nWhile I haven't managed to reproduce exactly the error I saw the first time around (at `[libduckdb_java16057437192090020633.so+0x805db5] std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release()+0x65`) I can reproduce the second error (at `~BufferBlob::jni_fast_GetLongField`) racing some threads. \r\n\r\nAt a high level the cancellation is being called by a separate thread and while I haven't proven it, I can see it happening after the statement (at least) has been closed and potentially after the connection has been closed. \r\n\r\nFrom my first reproduction though, it apperars as though the cancel happens WHILE the connection is still open sometime before the arrowExport. \r\n\r\nEdit: managed to repro the original error by varying some timing in a race: \r\n\r\n```\r\n---------------  T H R E A D  ---------------\r\n\r\nCurrent thread (0x00007ffff84fdd70):  JavaThread \"Thread-26\" [_thread_in_native, id=67641, stack(0x00007fffdcdff000,0x00007fffdceff000)]\r\n\r\nStack: [0x00007fffdcdff000,0x00007fffdceff000],  sp=0x00007fffdcefd620,  free space=1017k\r\nNative frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)\r\nC  [libduckdb_java2061727170366817143.so+0x805db5]  std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release()+0x65\r\n\r\nJava frames: (J=compiled Java code, j=interpreted, Vv=VM code)\r\nj  org.duckdb.DuckDBNative.duckdb_jdbc_release(Ljava/nio/ByteBuffer;)V+0\r\nj  org.duckdb.DuckDBPreparedStatement.close()V+25\r\n\r\n```\r\n\r\nThis appears to be coming from calling close (after calling cancel) on a statement. \r\n\r\nAt a high level, I have one thread calling cancel and then close on the statement while the connection is still open running / processing results on another. This approach largely works against all other jdbc drivers, but appears to not work against duckdb. \nHi @jonathanswenson \r\n\r\nI'm having a bit of trouble reproducing your error.\r\n\r\nI've tried generating an Arrow Table over a parquet file, ingesting that, interrupting the ingestion from another thread, and trying to read the created table (And some variants of this workflow) but I did not manage to get this crash.\r\n\r\nCould you provide a complete reproducible example?\r\nSomething similar to: https://github.com/pdet/reproducible_bug_example would be very helpful!\nHere's a somewhat crude example, but it seems to fail for me every time. \r\n\r\nI'm using duckdb-jdbc 0.9.1 and arrow 12 (c data). \r\n\r\nI've played with a few different ways to play with the timing of the synchronize and the cancel, but this is probably the most simple that reproduces a few different ways. I can muck with the Thread.sleep(...) in there (0, 1, 2 ms) and get slightly different places where the SIGSEGV seems to originate. \r\n\r\n<details> <summary> java example that throws a SIGSEGV </summary>\r\n\r\n```\r\nimport org.apache.arrow.c.ArrowArrayStream;\r\nimport org.apache.arrow.c.Data;\r\nimport org.apache.arrow.memory.BufferAllocator;\r\nimport org.apache.arrow.memory.RootAllocator;\r\nimport org.apache.arrow.vector.IntVector;\r\nimport org.apache.arrow.vector.VarCharVector;\r\nimport org.apache.arrow.vector.VectorSchemaRoot;\r\nimport org.apache.arrow.vector.ipc.ArrowReader;\r\nimport org.apache.arrow.vector.ipc.ArrowStreamReader;\r\nimport org.apache.arrow.vector.ipc.ArrowStreamWriter;\r\nimport org.apache.arrow.vector.types.pojo.ArrowType;\r\nimport org.apache.arrow.vector.types.pojo.Field;\r\nimport org.apache.arrow.vector.types.pojo.FieldType;\r\nimport org.apache.arrow.vector.types.pojo.Schema;\r\nimport org.duckdb.DuckDBConnection;\r\nimport org.duckdb.DuckDBDriver;\r\nimport org.duckdb.DuckDBResultSet;\r\n\r\nimport java.io.*;\r\nimport java.nio.charset.StandardCharsets;\r\nimport java.nio.file.Files;\r\nimport java.nio.file.Path;\r\nimport java.sql.*;\r\nimport java.util.Properties;\r\n\r\nimport static java.util.Arrays.asList;\r\n\r\npublic class DuckDBCancel {\r\n    static int iterations = 1000;\r\n    public static void main(String[] args) throws Exception{\r\n        new DuckDBCancel().runTest();\r\n    }\r\n\r\n    public void runCancelTest(String filename) {\r\n        Driver driver = new DuckDBDriver();\r\n        String connectionString = \"jdbc:duckdb:\";\r\n        for (int i = 0; i < iterations; i++) {\r\n            try (BufferAllocator allocator = new RootAllocator()) {\r\n                System.out.println(\"iteration \" + i);\r\n                try (Connection connection = driver.connect(connectionString, new Properties())) {\r\n\r\n                    DuckDBConnection duckDBConnection = connection.unwrap(DuckDBConnection.class);\r\n                    loadTable(filename, allocator, duckDBConnection);\r\n\r\n                    try (Statement statement = connection.createStatement()) {\r\n                        Thread t = new Thread(() -> {\r\n                            try {\r\n                                statement.cancel();\r\n                                statement.close();\r\n                            } catch (SQLException e) {\r\n                                e.printStackTrace();\r\n                            }\r\n                        });\r\n\r\n                        try (ResultSet resultSet = statement.executeQuery(\"SELECT * from foo\")) {\r\n                            t.start();\r\n                            // just try to context switch\r\n                            // depending on what number here I get SIGSEVs in different places.\r\n                            Thread.sleep(0);\r\n\r\n                            DuckDBResultSet duckDBResultSet = resultSet.unwrap(DuckDBResultSet.class);\r\n\r\n                            try (ArrowReader reader = (ArrowReader) duckDBResultSet.arrowExportStream(allocator, 2048)) {\r\n                                while (reader.loadNextBatch()) {\r\n                                    // do nothing with the results\r\n                                }\r\n                            }\r\n                        } finally {\r\n                            t.join();\r\n                        }\r\n                    }\r\n                } catch (Exception e) {\r\n                    System.out.println(\"iteration \" + i + \" threw: \" + e.getMessage());\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private void createArrowFile(File file) throws IOException {\r\n        Field age = new Field(\"age\", FieldType.nullable(new ArrowType.Int(32, true)),null);\r\n        Field name = new Field(\"name\", FieldType.nullable(new ArrowType.Utf8()), null);\r\n\r\n        Schema schema = new Schema(asList(age, name), null);\r\n        int rows = 100;\r\n        try(BufferAllocator allocator = new RootAllocator();\r\n            VectorSchemaRoot root = VectorSchemaRoot.create(schema, allocator);\r\n            IntVector ageVector = (IntVector) root.getVector(\"age\");\r\n            VarCharVector nameVector = (VarCharVector) root.getVector(\"name\")){\r\n\r\n            root.setRowCount(rows);\r\n            ageVector.allocateNew(rows);\r\n            nameVector.allocateNew(rows);\r\n\r\n            for (int i = 0; i < rows; i++) {\r\n                ageVector.set(i, i);\r\n                nameVector.set(i, (\"Name \" + i).getBytes(StandardCharsets.UTF_8));\r\n            }\r\n\r\n            try (OutputStream out = new FileOutputStream(file.getAbsolutePath());\r\n                 ArrowStreamWriter writer = new ArrowStreamWriter(root, null, out)) {\r\n                writer.writeBatch();\r\n                writer.end();\r\n            }\r\n        }\r\n    }\r\n\r\n    public void runTest() throws Exception {\r\n        File temp = File.createTempFile(\"duckdb\", \".arrow\");\r\n        String filename = temp.getAbsolutePath();\r\n        createArrowFile(temp);\r\n        try {\r\n            runCancelTest(filename);\r\n        } catch (Exception e) {\r\n            // of course the error here is loud enough that we never get to the finally...\r\n            // nothing\r\n        } finally {\r\n            Files.delete(Path.of(filename));\r\n        }\r\n    }\r\n\r\n    private void loadTable(String filename, BufferAllocator allocator, DuckDBConnection duckDBConnection) throws Exception {\r\n        try (InputStream rawStream = new FileInputStream(filename);\r\n             ArrowStreamReader streamReader = new ArrowStreamReader(rawStream, allocator);\r\n             ArrowArrayStream arrowArrayStream = ArrowArrayStream.allocateNew(allocator)) {\r\n            Data.exportArrayStream(allocator, streamReader, arrowArrayStream);\r\n            duckDBConnection.registerArrowStream(\"tmp\", arrowArrayStream);\r\n\r\n            try (Statement stmt = duckDBConnection.createStatement()) {\r\n                stmt.execute(\"CREATE TABLE foo as select * from tmp\");\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n```\r\n\r\n</details>\r\n\r\nThis also reproduces the RefCnt going negative sometimes and usually crashes after a few iterations on my Apple Silicon Mac. I also tried it running on a linux aarch64 container and linux x86 container (emulated), but I don't see the negative RefCnt error. \r\n\r\n\nHey @jonathanswenson thanks for sending the code, I'm still having some trouble executing it in my machine, could you share the pom file with the exact dependencies and versions you used, and also share your java version?\nI'm using gradle, but here's the contents of a sample gradle file / dependencies I'm using: \r\n\r\n```\r\nplugins {\r\n    java\r\n}\r\n\r\ngroup = \"org.example\"\r\nversion = \"1.0-SNAPSHOT\"\r\n\r\nrepositories {\r\n    mavenCentral()\r\n}\r\n\r\nval arrowVersion = \"12.0.0\"\r\n\r\ndependencies {\r\n    implementation(\"org.apache.arrow:arrow-vector:$arrowVersion\")\r\n    implementation(\"org.apache.arrow:arrow-memory-unsafe:$arrowVersion\")\r\n    implementation(\"org.apache.arrow:arrow-jdbc:$arrowVersion\")\r\n    implementation(\"org.apache.arrow:arrow-c-data:$arrowVersion\")\r\n    implementation(\"org.duckdb:duckdb_jdbc:0.9.1\")\r\n}\r\n```\r\n\r\nI'm using JDK 17 (specifically open jdk Temurin - https://adoptium.net/temurin/releases/?version=17&os=mac&arch=aarch64) \r\n\r\nLocally I'm running on mac aarch64, but can also reproduce on a docker container based on the `eclipse-temurin:17` image with both the linux/amd64 and linux/aarch64 platform options. However the particular version of arrow that I have above does not work on aarch64 (but this has been fixed in arrow 14.0.0). While I have not tested 14.0.0 on those platforms, swapping to arrow 14.0.0 continues to reproduce the issue locally on my mac. \r\n\nAlright, thanks for the extra info! I confirm I can reproduce it :-)!\nPotentially also related, I have noticed that upon ingesting data using the above method for arrowStreams, closing the connection and allocator often intermittently throws a IllegalStateException `RefCnt has gone negative`. \r\n\r\nIf the resource isn't closed, closing the allocator results in an error indicating memory has been leaked. \r\n\r\nPerhaps there needs to be a way to unregister an arrow stream (manually) from the java side so that it can be freed before the connection is closed? \nhaving trouble getting this to consistently reproduce, but managed to get the same behavior, but a slightly different error frame: \r\n```\r\n# An error report file with more information is saved as:\r\n# /tmp/hs_err_pid1.log\r\n#\r\n# A fatal error has been detected by the Java Runtime Environment:\r\n#\r\n# SIGSEGV (0xb) at pc=0x00007f9f4c9e659f, pid=1, tid=107\r\n#\r\n# JRE version: OpenJDK Runtime Environment Temurin-17.0.9+9 (17.0.9+9) (build 17.0.9+9)\r\n# Java VM: OpenJDK 64-Bit Server VM Temurin-17.0.9+9 (17.0.9+9, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)\r\n# Problematic frame:\r\n# v ~BufferBlob::jni_fast_GetLongField\r\n#\r\n# Core dump will be written. Default location: //core.1\r\n#\r\n```\nMy gut feel as though something about how I'm calling cancel is not allowed. \r\n\r\nLooking at the comment [here](https://github.com/duckdb/duckdb/blob/main/tools/jdbc/src/main/java/org/duckdb/DuckDBPreparedStatement.java#L339-L342)\r\n\r\n> This function calls the underlying C++ interrupt function which aborts the query running on that connection.\r\n> It is not safe to call this function when the connection is already closed.\r\n\r\nWhile I haven't managed to reproduce exactly the error I saw the first time around (at `[libduckdb_java16057437192090020633.so+0x805db5] std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release()+0x65`) I can reproduce the second error (at `~BufferBlob::jni_fast_GetLongField`) racing some threads. \r\n\r\nAt a high level the cancellation is being called by a separate thread and while I haven't proven it, I can see it happening after the statement (at least) has been closed and potentially after the connection has been closed. \r\n\r\nFrom my first reproduction though, it apperars as though the cancel happens WHILE the connection is still open sometime before the arrowExport. \r\n\r\nEdit: managed to repro the original error by varying some timing in a race: \r\n\r\n```\r\n---------------  T H R E A D  ---------------\r\n\r\nCurrent thread (0x00007ffff84fdd70):  JavaThread \"Thread-26\" [_thread_in_native, id=67641, stack(0x00007fffdcdff000,0x00007fffdceff000)]\r\n\r\nStack: [0x00007fffdcdff000,0x00007fffdceff000],  sp=0x00007fffdcefd620,  free space=1017k\r\nNative frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)\r\nC  [libduckdb_java2061727170366817143.so+0x805db5]  std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release()+0x65\r\n\r\nJava frames: (J=compiled Java code, j=interpreted, Vv=VM code)\r\nj  org.duckdb.DuckDBNative.duckdb_jdbc_release(Ljava/nio/ByteBuffer;)V+0\r\nj  org.duckdb.DuckDBPreparedStatement.close()V+25\r\n\r\n```\r\n\r\nThis appears to be coming from calling close (after calling cancel) on a statement. \r\n\r\nAt a high level, I have one thread calling cancel and then close on the statement while the connection is still open running / processing results on another. This approach largely works against all other jdbc drivers, but appears to not work against duckdb. \nHi @jonathanswenson \r\n\r\nI'm having a bit of trouble reproducing your error.\r\n\r\nI've tried generating an Arrow Table over a parquet file, ingesting that, interrupting the ingestion from another thread, and trying to read the created table (And some variants of this workflow) but I did not manage to get this crash.\r\n\r\nCould you provide a complete reproducible example?\r\nSomething similar to: https://github.com/pdet/reproducible_bug_example would be very helpful!\nHere's a somewhat crude example, but it seems to fail for me every time. \r\n\r\nI'm using duckdb-jdbc 0.9.1 and arrow 12 (c data). \r\n\r\nI've played with a few different ways to play with the timing of the synchronize and the cancel, but this is probably the most simple that reproduces a few different ways. I can muck with the Thread.sleep(...) in there (0, 1, 2 ms) and get slightly different places where the SIGSEGV seems to originate. \r\n\r\n<details> <summary> java example that throws a SIGSEGV </summary>\r\n\r\n```\r\nimport org.apache.arrow.c.ArrowArrayStream;\r\nimport org.apache.arrow.c.Data;\r\nimport org.apache.arrow.memory.BufferAllocator;\r\nimport org.apache.arrow.memory.RootAllocator;\r\nimport org.apache.arrow.vector.IntVector;\r\nimport org.apache.arrow.vector.VarCharVector;\r\nimport org.apache.arrow.vector.VectorSchemaRoot;\r\nimport org.apache.arrow.vector.ipc.ArrowReader;\r\nimport org.apache.arrow.vector.ipc.ArrowStreamReader;\r\nimport org.apache.arrow.vector.ipc.ArrowStreamWriter;\r\nimport org.apache.arrow.vector.types.pojo.ArrowType;\r\nimport org.apache.arrow.vector.types.pojo.Field;\r\nimport org.apache.arrow.vector.types.pojo.FieldType;\r\nimport org.apache.arrow.vector.types.pojo.Schema;\r\nimport org.duckdb.DuckDBConnection;\r\nimport org.duckdb.DuckDBDriver;\r\nimport org.duckdb.DuckDBResultSet;\r\n\r\nimport java.io.*;\r\nimport java.nio.charset.StandardCharsets;\r\nimport java.nio.file.Files;\r\nimport java.nio.file.Path;\r\nimport java.sql.*;\r\nimport java.util.Properties;\r\n\r\nimport static java.util.Arrays.asList;\r\n\r\npublic class DuckDBCancel {\r\n    static int iterations = 1000;\r\n    public static void main(String[] args) throws Exception{\r\n        new DuckDBCancel().runTest();\r\n    }\r\n\r\n    public void runCancelTest(String filename) {\r\n        Driver driver = new DuckDBDriver();\r\n        String connectionString = \"jdbc:duckdb:\";\r\n        for (int i = 0; i < iterations; i++) {\r\n            try (BufferAllocator allocator = new RootAllocator()) {\r\n                System.out.println(\"iteration \" + i);\r\n                try (Connection connection = driver.connect(connectionString, new Properties())) {\r\n\r\n                    DuckDBConnection duckDBConnection = connection.unwrap(DuckDBConnection.class);\r\n                    loadTable(filename, allocator, duckDBConnection);\r\n\r\n                    try (Statement statement = connection.createStatement()) {\r\n                        Thread t = new Thread(() -> {\r\n                            try {\r\n                                statement.cancel();\r\n                                statement.close();\r\n                            } catch (SQLException e) {\r\n                                e.printStackTrace();\r\n                            }\r\n                        });\r\n\r\n                        try (ResultSet resultSet = statement.executeQuery(\"SELECT * from foo\")) {\r\n                            t.start();\r\n                            // just try to context switch\r\n                            // depending on what number here I get SIGSEVs in different places.\r\n                            Thread.sleep(0);\r\n\r\n                            DuckDBResultSet duckDBResultSet = resultSet.unwrap(DuckDBResultSet.class);\r\n\r\n                            try (ArrowReader reader = (ArrowReader) duckDBResultSet.arrowExportStream(allocator, 2048)) {\r\n                                while (reader.loadNextBatch()) {\r\n                                    // do nothing with the results\r\n                                }\r\n                            }\r\n                        } finally {\r\n                            t.join();\r\n                        }\r\n                    }\r\n                } catch (Exception e) {\r\n                    System.out.println(\"iteration \" + i + \" threw: \" + e.getMessage());\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private void createArrowFile(File file) throws IOException {\r\n        Field age = new Field(\"age\", FieldType.nullable(new ArrowType.Int(32, true)),null);\r\n        Field name = new Field(\"name\", FieldType.nullable(new ArrowType.Utf8()), null);\r\n\r\n        Schema schema = new Schema(asList(age, name), null);\r\n        int rows = 100;\r\n        try(BufferAllocator allocator = new RootAllocator();\r\n            VectorSchemaRoot root = VectorSchemaRoot.create(schema, allocator);\r\n            IntVector ageVector = (IntVector) root.getVector(\"age\");\r\n            VarCharVector nameVector = (VarCharVector) root.getVector(\"name\")){\r\n\r\n            root.setRowCount(rows);\r\n            ageVector.allocateNew(rows);\r\n            nameVector.allocateNew(rows);\r\n\r\n            for (int i = 0; i < rows; i++) {\r\n                ageVector.set(i, i);\r\n                nameVector.set(i, (\"Name \" + i).getBytes(StandardCharsets.UTF_8));\r\n            }\r\n\r\n            try (OutputStream out = new FileOutputStream(file.getAbsolutePath());\r\n                 ArrowStreamWriter writer = new ArrowStreamWriter(root, null, out)) {\r\n                writer.writeBatch();\r\n                writer.end();\r\n            }\r\n        }\r\n    }\r\n\r\n    public void runTest() throws Exception {\r\n        File temp = File.createTempFile(\"duckdb\", \".arrow\");\r\n        String filename = temp.getAbsolutePath();\r\n        createArrowFile(temp);\r\n        try {\r\n            runCancelTest(filename);\r\n        } catch (Exception e) {\r\n            // of course the error here is loud enough that we never get to the finally...\r\n            // nothing\r\n        } finally {\r\n            Files.delete(Path.of(filename));\r\n        }\r\n    }\r\n\r\n    private void loadTable(String filename, BufferAllocator allocator, DuckDBConnection duckDBConnection) throws Exception {\r\n        try (InputStream rawStream = new FileInputStream(filename);\r\n             ArrowStreamReader streamReader = new ArrowStreamReader(rawStream, allocator);\r\n             ArrowArrayStream arrowArrayStream = ArrowArrayStream.allocateNew(allocator)) {\r\n            Data.exportArrayStream(allocator, streamReader, arrowArrayStream);\r\n            duckDBConnection.registerArrowStream(\"tmp\", arrowArrayStream);\r\n\r\n            try (Statement stmt = duckDBConnection.createStatement()) {\r\n                stmt.execute(\"CREATE TABLE foo as select * from tmp\");\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n```\r\n\r\n</details>\r\n\r\nThis also reproduces the RefCnt going negative sometimes and usually crashes after a few iterations on my Apple Silicon Mac. I also tried it running on a linux aarch64 container and linux x86 container (emulated), but I don't see the negative RefCnt error. \r\n\r\n\nHey @jonathanswenson thanks for sending the code, I'm still having some trouble executing it in my machine, could you share the pom file with the exact dependencies and versions you used, and also share your java version?\nI'm using gradle, but here's the contents of a sample gradle file / dependencies I'm using: \r\n\r\n```\r\nplugins {\r\n    java\r\n}\r\n\r\ngroup = \"org.example\"\r\nversion = \"1.0-SNAPSHOT\"\r\n\r\nrepositories {\r\n    mavenCentral()\r\n}\r\n\r\nval arrowVersion = \"12.0.0\"\r\n\r\ndependencies {\r\n    implementation(\"org.apache.arrow:arrow-vector:$arrowVersion\")\r\n    implementation(\"org.apache.arrow:arrow-memory-unsafe:$arrowVersion\")\r\n    implementation(\"org.apache.arrow:arrow-jdbc:$arrowVersion\")\r\n    implementation(\"org.apache.arrow:arrow-c-data:$arrowVersion\")\r\n    implementation(\"org.duckdb:duckdb_jdbc:0.9.1\")\r\n}\r\n```\r\n\r\nI'm using JDK 17 (specifically open jdk Temurin - https://adoptium.net/temurin/releases/?version=17&os=mac&arch=aarch64) \r\n\r\nLocally I'm running on mac aarch64, but can also reproduce on a docker container based on the `eclipse-temurin:17` image with both the linux/amd64 and linux/aarch64 platform options. However the particular version of arrow that I have above does not work on aarch64 (but this has been fixed in arrow 14.0.0). While I have not tested 14.0.0 on those platforms, swapping to arrow 14.0.0 continues to reproduce the issue locally on my mac. \r\n\nAlright, thanks for the extra info! I confirm I can reproduce it :-)!",
  "created_at": "2023-11-13T16:00:42Z"
}