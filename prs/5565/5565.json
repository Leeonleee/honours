{
  "repo": "duckdb/duckdb",
  "pull_number": 5565,
  "instance_id": "duckdb__duckdb-5565",
  "issue_numbers": [
    "5560"
  ],
  "base_commit": "45d857191be915d3a38c83b75a42a945ba04fe9d",
  "patch": "diff --git a/tools/pythonpkg/src/pyconnection.cpp b/tools/pythonpkg/src/pyconnection.cpp\nindex dad9cbe977f8..e1809d8079cc 100644\n--- a/tools/pythonpkg/src/pyconnection.cpp\n+++ b/tools/pythonpkg/src/pyconnection.cpp\n@@ -495,6 +495,9 @@ void DuckDBPyConnection::LoadExtension(const string &extension) {\n \n // cursor() is stupid\n shared_ptr<DuckDBPyConnection> DuckDBPyConnection::Cursor() {\n+\tif (!connection) {\n+\t\tthrow ConnectionException(\"Connection has already been closed\");\n+\t}\n \tauto res = make_shared<DuckDBPyConnection>();\n \tres->database = database;\n \tres->connection = make_unique<Connection>(*res->database);\n",
  "test_patch": "diff --git a/tools/pythonpkg/tests/fast/api/test_cursor.py b/tools/pythonpkg/tests/fast/api/test_cursor.py\nnew file mode 100644\nindex 000000000000..aa95de79e2ce\n--- /dev/null\n+++ b/tools/pythonpkg/tests/fast/api/test_cursor.py\n@@ -0,0 +1,103 @@\n+# simple DB API testcase\n+\n+import pytest\n+import duckdb\n+\n+\n+class TestDBAPICursor(object):\n+    def test_cursor_basic(self):\n+        # Create a connection\n+        con = duckdb.connect(':memory:')\n+        # Then create a cursor on the connection\n+        cursor = con.cursor()\n+        # Use the cursor for queries\n+        res = cursor.execute(\"select [1,2,3,NULL,4]\").fetchall()\n+        assert res == [([1,2,3,None,4],)]\n+\n+    def test_cursor_preexisting(self):\n+        con = duckdb.connect(':memory:')\n+        con.execute(\"create table tbl as select i a, i+1 b, i+2 c from range(5) tbl(i)\")\n+        cursor = con.cursor()\n+        res = cursor.execute(\"select * from tbl\").fetchall();\n+        assert res == [(0, 1, 2), (1, 2, 3), (2, 3, 4), (3, 4, 5), (4, 5, 6)]\n+\n+    def test_cursor_after_creation(self):\n+        con = duckdb.connect(':memory:')\n+        # First create the cursor\n+        cursor = con.cursor()\n+        # Then create table on the source connection\n+        con.execute(\"create table tbl as select i a, i+1 b, i+2 c from range(5) tbl(i)\")\n+        res = cursor.execute(\"select * from tbl\").fetchall();\n+        assert res == [(0, 1, 2), (1, 2, 3), (2, 3, 4), (3, 4, 5), (4, 5, 6)]\n+\n+    def test_cursor_mixed(self):\n+        con = duckdb.connect(':memory:')\n+        # First create the cursor\n+        cursor = con.cursor()\n+        # Then create table on the cursor\n+        cursor.execute(\"create table tbl as select i a, i+1 b, i+2 c from range(5) tbl(i)\")\n+        # Close the cursor and create a new one\n+        cursor.close()\n+        cursor = con.cursor()\n+        res = cursor.execute(\"select * from tbl\").fetchall();\n+        assert res == [(0, 1, 2), (1, 2, 3), (2, 3, 4), (3, 4, 5), (4, 5, 6)]\n+\n+    def test_cursor_temp_schema_closed(self):\n+        con = duckdb.connect(':memory:')\n+        cursor = con.cursor()\n+        cursor.execute(\"create temp table tbl as select * from range(100)\")\n+        other_cursor = con.cursor()\n+        # Connection that created the table is closed\n+        cursor.close()\n+        with pytest.raises(duckdb.CatalogException):\n+            # This table does not exist in this cursor\n+            res = other_cursor.execute(\"select * from tbl\").fetchall()\n+\n+    def test_cursor_temp_schema_open(self):\n+        con = duckdb.connect(':memory:')\n+        cursor = con.cursor()\n+        cursor.execute(\"create temp table tbl as select * from range(100)\")\n+        other_cursor = con.cursor()\n+        # Connection that created the table is still open\n+        #cursor.close()\n+        with pytest.raises(duckdb.CatalogException):\n+            # This table does not exist in this cursor\n+            res = other_cursor.execute(\"select * from tbl\").fetchall()\n+\n+    def test_cursor_temp_schema_both(self):\n+        con = duckdb.connect(':memory:')\n+        cursor1 = con.cursor()\n+        cursor2 = con.cursor()\n+        cursor3 = con.cursor()\n+        cursor1.execute(\"create temp table tbl as select i from range(10) tbl(i)\")\n+        cursor2.execute(\"create temp table tbl as select i+10 from range(10) tbl(i)\")\n+        with pytest.raises(duckdb.CatalogException):\n+            # This table does not exist in this cursor\n+            res = cursor3.execute(\"select * from tbl\").fetchall()\n+        res = cursor1.execute(\"select * from tbl\").fetchall()\n+        assert res == [(0,), (1,), (2,), (3,), (4,), (5,), (6,), (7,), (8,), (9,)]\n+        res = cursor2.execute(\"select * from tbl\").fetchall()\n+        assert res == [(10,), (11,), (12,), (13,), (14,), (15,), (16,), (17,), (18,), (19,)]\n+\n+        cursor1.close()\n+        cursor2.close()\n+\n+    def test_cursor_closed(self):\n+        con = duckdb.connect(':memory:')\n+        con.close()\n+        with pytest.raises(duckdb.ConnectionException):\n+            cursor = con.cursor()\n+\n+    def test_cursor_used_after_connection_closed(self):\n+        con = duckdb.connect(':memory:')\n+        cursor = con.cursor()\n+        con.close()\n+        with pytest.raises(duckdb.ConnectionException):\n+            cursor.execute(\"select [1,2,3,4]\")\n+\n+    def test_cursor_used_after_close(self):\n+        con = duckdb.connect(':memory:')\n+        cursor = con.cursor()\n+        cursor.close()\n+        with pytest.raises(duckdb.ConnectionException):\n+            cursor.execute(\"select [1,2,3,4]\")\n",
  "problem_statement": "Can call cursor() on closed connection in Python (and segmentation fault if you use it)\n### What happens?\r\n\r\nWith Python client:\r\n`execute(..)` on a closed connection raises `Connection Error: Connection has already been closed`, but:\r\n`cursor()` doesn't raise an exception, and:\r\nwhen you `execute(..)` on the cursor you get `Segmentation fault (core dumped)`.\r\n\r\n### To Reproduce\r\n\r\n```py\r\nimport duckdb\r\n\r\ncon = duckdb.connect()\r\ncon.close()\r\n\r\ntry:\r\n    con.execute('select 1;')\r\nexcept duckdb.ConnectionException as e:\r\n    print(e)  # this is helpful\r\n\r\ncon_ = con.cursor()\r\ncon_.execute('select 1;')  # this is not\r\n```\r\n\r\n\r\n\r\n### OS:\r\n\r\nUbuntu 20.04.5 LTS\r\n\r\n### DuckDB Version:\r\n\r\nv0.6.1-dev83 dfae126ebba9d4d8658b003a08d5c41a185dccb6\r\n\r\n### DuckDB Client:\r\n\r\nPython\r\n\r\n### Full Name:\r\n\r\nDave Tapley\r\n\r\n### Affiliation:\r\n\r\nJE Fuller\r\n\r\n### Have you tried this on the latest `master` branch?\r\n\r\n- [X] I agree\r\n\r\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\r\n\r\n- [X] I agree\n",
  "hints_text": "Maybe as simple as copying:\r\nhttps://github.com/duckdb/duckdb/blob/45d857191be915d3a38c83b75a42a945ba04fe9d/tools/pythonpkg/src/pyconnection.cpp#L140-L142\r\n\r\nto:\r\nhttps://github.com/duckdb/duckdb/blob/45d857191be915d3a38c83b75a42a945ba04fe9d/tools/pythonpkg/src/pyconnection.cpp#L497-L500\r\n\r\n?\nAh yes, nice find, I think that will indeed fix it \ud83d\udc4d ",
  "created_at": "2022-12-01T08:12:09Z"
}