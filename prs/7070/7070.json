{
  "repo": "duckdb/duckdb",
  "pull_number": 7070,
  "instance_id": "duckdb__duckdb-7070",
  "issue_numbers": [
    "6861"
  ],
  "base_commit": "236e58037781cbe1adfd8cf962688fc37af173b5",
  "patch": "diff --git a/src/common/sort/sorted_block.cpp b/src/common/sort/sorted_block.cpp\nindex caf6d97feddb..ae089a0e9903 100644\n--- a/src/common/sort/sorted_block.cpp\n+++ b/src/common/sort/sorted_block.cpp\n@@ -366,11 +366,16 @@ int SBIterator::ComparisonValue(ExpressionType comparison) {\n \t}\n }\n \n+static idx_t GetBlockCountWithEmptyCheck(const GlobalSortState &gss) {\n+\tD_ASSERT(gss.sorted_blocks.size() > 0);\n+\treturn gss.sorted_blocks[0]->radix_sorting_data.size();\n+}\n+\n SBIterator::SBIterator(GlobalSortState &gss, ExpressionType comparison, idx_t entry_idx_p)\n-    : sort_layout(gss.sort_layout), block_count(gss.sorted_blocks[0]->radix_sorting_data.size()),\n-      block_capacity(gss.block_capacity), cmp_size(sort_layout.comparison_size), entry_size(sort_layout.entry_size),\n-      all_constant(sort_layout.all_constant), external(gss.external), cmp(ComparisonValue(comparison)),\n-      scan(gss.buffer_manager, gss), block_ptr(nullptr), entry_ptr(nullptr) {\n+    : sort_layout(gss.sort_layout), block_count(GetBlockCountWithEmptyCheck(gss)), block_capacity(gss.block_capacity),\n+      cmp_size(sort_layout.comparison_size), entry_size(sort_layout.entry_size), all_constant(sort_layout.all_constant),\n+      external(gss.external), cmp(ComparisonValue(comparison)), scan(gss.buffer_manager, gss), block_ptr(nullptr),\n+      entry_ptr(nullptr) {\n \n \tscan.sb = gss.sorted_blocks[0].get();\n \tscan.block_idx = block_count;\ndiff --git a/src/execution/operator/join/physical_iejoin.cpp b/src/execution/operator/join/physical_iejoin.cpp\nindex fac75c5e7d3d..ad535109a96e 100644\n--- a/src/execution/operator/join/physical_iejoin.cpp\n+++ b/src/execution/operator/join/physical_iejoin.cpp\n@@ -402,6 +402,10 @@ IEJoinUnion::IEJoinUnion(ClientContext &context, const PhysicalIEJoin &op, Sorte\n \tr_executor.AddExpression(*op.rhs_orders[1][0].expression);\n \tAppendKey(t2, r_executor, *l1, -1, -1, b2);\n \n+\tif (l1->global_sort_state.sorted_blocks.empty()) {\n+\t\treturn;\n+\t}\n+\n \tSort(*l1);\n \n \top1 = make_uniq<SBIterator>(l1->global_sort_state, cmp1);\n",
  "test_patch": "diff --git a/test/sql/join/iejoin/iejoin_issue_6861.test b/test/sql/join/iejoin/iejoin_issue_6861.test\nnew file mode 100644\nindex 000000000000..de686d555850\n--- /dev/null\n+++ b/test/sql/join/iejoin/iejoin_issue_6861.test\n@@ -0,0 +1,42 @@\n+# name: test/sql/join/iejoin/iejoin_issue_6861.test\n+# description: Issue #6861: Index out of bound for all-NULL case.\n+# group: [iejoin]\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+statement ok\n+CREATE TABLE test(x INT);\n+\n+query II\n+SELECT * \n+FROM test AS a, test AS b \n+WHERE (a.x BETWEEN b.x AND b.x);\n+----\n+\n+statement ok\n+INSERT INTO test(x) VALUES (1), (2), (3), (NULL), (NULL), (NULL);\n+\n+statement ok\n+CREATE TABLE all_null AS SELECT * FROM test;\n+\n+statement ok\n+UPDATE all_null SET x=(NULL);\n+\n+query II\n+SELECT * \n+FROM all_null AS a, all_null AS b \n+WHERE (a.x BETWEEN b.x AND b.x);\n+----\n+\n+query II\n+SELECT * \n+FROM test AS a, all_null AS b \n+WHERE (a.x BETWEEN b.x AND b.x);\n+----\n+\n+query II\n+SELECT * \n+FROM all_null AS a, test AS b \n+WHERE (a.x BETWEEN b.x AND b.x);\n+----\n",
  "problem_statement": "Segmentation fault on `BETWEEN`\n### What happens?\n\nThe following program triggers a segmentation fault:\r\n\r\n```\r\nCREATE TABLE t0(c0 TIMESTAMP);\r\n\r\nINSERT INTO t0(c0) VALUES ((DATE '1969-12-10')), ((DATE '1969-12-16')), ((DATE '1969-12-07')), ((TIMESTAMP '1969-12-09 10:08:32')), ((DATE '1969-12-30')), ((TIMESTAMP '1969-12-21 00:06:38'));\r\n\r\nCREATE VIEW v0(c0) AS SELECT t0.c0 FROM t0;\r\n\r\nUPDATE t0 SET c0=(NULL);\r\n\r\nSELECT t0.c0 FROM t0, v0 WHERE (v0.c0 BETWEEN t0.c0 AND t0.c0);\r\n```\n\n### To Reproduce\n\nI build DuckDB from the last version of source code, just with `make` command. I can reproduce this bug with CLI.\n\n### OS:\n\nubuntu 22.04\n\n### DuckDB Version:\n\ncommit version b8cf6a98\n\n### DuckDB Client:\n\nCLI\n\n### Full Name:\n\nChi Zhang\n\n### Affiliation:\n\nNanjing University, National University of Singapore\n\n### Have you tried this on the latest `master` branch?\n\n- [X] I agree\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] I agree\n",
  "hints_text": "~~There are other open issues with BETWEEN, which are likely related I'd say~~\r\nStack trace for this issue:\r\n```\r\n/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/vector:1572:12: runtime error: reference binding to null pointer of type 'std::unique_ptr<duckdb::SortedBlock>'\r\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/vector:1572:12 in\r\n```\r\n\r\nIt's not related to BETWEEN, rewriting it to the verbose version produces the same issue:\r\n```sql\r\nstatement ok\r\nSELECT\r\n\tt0.c0\r\nFROM t0, v0 WHERE (\r\n\tv0.c0 >= t0.c0 AND v0.c0 <= t0.c0\r\n);\r\n```\nThank you for your confirmation. I'm very sorry that this title misled you.\nOh that's not it, just investigated a little to see if this was a duplicate of another issue, wanted to post some extra debugging information :)\nIt is because IEJoin doesn't check for all-null case, I will open a PR for this.",
  "created_at": "2023-04-13T12:31:33Z"
}