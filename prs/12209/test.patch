diff --git a/test/api/test_reset.cpp b/test/api/test_reset.cpp
index 14269f292764..5a949c0e5841 100644
--- a/test/api/test_reset.cpp
+++ b/test/api/test_reset.cpp
@@ -60,6 +60,7 @@ OptionValueSet &GetValueForOption(const string &name) {
 	    {"prefer_range_joins", {Value(true)}},
 	    {"allow_persistent_secrets", {Value(false)}},
 	    {"secret_directory", {"/tmp/some/path"}},
+	    {"enable_view_dependencies", {Value(true)}},
 	    {"default_secret_storage", {"custom_storage"}},
 	    {"custom_extension_repository", {"duckdb.org/no-extensions-here", "duckdb.org/no-extensions-here"}},
 	    {"autoinstall_extension_repository", {"duckdb.org/no-extensions-here", "duckdb.org/no-extensions-here"}},
diff --git a/test/fuzzer/pedro/view_not_rebound_error.test b/test/fuzzer/pedro/view_not_rebound_error.test
index e985626bbc08..d2d3665e63ac 100644
--- a/test/fuzzer/pedro/view_not_rebound_error.test
+++ b/test/fuzzer/pedro/view_not_rebound_error.test
@@ -4,6 +4,9 @@
 # FIXME: for this to work we need to serialize/deserialize dependencies
 require skip_reload
 
+statement ok
+set enable_view_dependencies=true
+
 statement ok
 CREATE TABLE t1 (c1 INT);
 
diff --git a/test/fuzzer/pedro/view_not_rebound_error_no_view_dependencies.test b/test/fuzzer/pedro/view_not_rebound_error_no_view_dependencies.test
new file mode 100644
index 000000000000..b2719a97e973
--- /dev/null
+++ b/test/fuzzer/pedro/view_not_rebound_error_no_view_dependencies.test
@@ -0,0 +1,24 @@
+# name: test/fuzzer/pedro/view_not_rebound_error_no_view_dependencies.test
+# group: [pedro]
+
+# FIXME: for this to work we need to serialize/deserialize dependencies
+require skip_reload
+
+statement ok
+CREATE TABLE t1 (c1 INT);
+
+statement ok
+CREATE VIEW t0 AS SELECT 1 FROM t1 GROUP BY c1;
+
+statement ok
+DROP TABLE t1;
+
+statement ok
+CREATE TABLE t2 (c1 INT);
+
+statement ok
+CREATE TABLE t1 (c2 INT);
+
+statement error
+SELECT 1 FROM t2 JOIN t1 ON (SELECT TRUE FROM t0);
+----
diff --git a/test/sql/aggregate/qualify/test_qualify_view.test b/test/sql/aggregate/qualify/test_qualify_view.test
index 8359750a096c..7f6545248533 100644
--- a/test/sql/aggregate/qualify/test_qualify_view.test
+++ b/test/sql/aggregate/qualify/test_qualify_view.test
@@ -7,6 +7,9 @@ require skip_reload
 # load the DB from disk
 load __TEST_DIR__/view_storage.db
 
+statement ok
+set enable_view_dependencies=true
+
 statement ok
 PRAGMA disable_checkpoint_on_shutdown
 
diff --git a/test/sql/aggregate/qualify/test_qualify_view_no_view_dependencies.test b/test/sql/aggregate/qualify/test_qualify_view_no_view_dependencies.test
new file mode 100644
index 000000000000..83d4c9669756
--- /dev/null
+++ b/test/sql/aggregate/qualify/test_qualify_view_no_view_dependencies.test
@@ -0,0 +1,73 @@
+# name: test/sql/aggregate/qualify/test_qualify_view_no_view_dependencies.test
+# description: Test QUALIFY clause in a view over different runs
+# group: [qualify]
+
+require skip_reload
+
+# load the DB from disk
+load __TEST_DIR__/view_storage.db
+
+statement ok
+PRAGMA disable_checkpoint_on_shutdown
+
+statement ok
+PRAGMA wal_autocheckpoint='1TB';
+
+# create a schema and view
+statement ok
+CREATE SCHEMA test;
+
+statement ok
+CREATE TABLE test.t (a INTEGER, b INTEGER);
+
+statement ok
+INSERT INTO test.t VALUES (11, 22), (13, 22), (12, 21)
+
+statement ok
+CREATE VIEW test.v AS SELECT * FROM test.t QUALIFY row_number() OVER (PARTITION BY b) = 1;
+
+query II
+SELECT b, SUM(a) 
+FROM test.v 
+GROUP BY b 
+QUALIFY row_number() OVER (PARTITION BY b) = 1
+ORDER BY ALL
+----
+21	12
+22	11
+
+# drop the table the view is based on
+statement ok
+DROP TABLE test.t
+
+loop i 0 2
+
+# restart the system
+restart
+
+# after recreating the table, we can query the view again
+statement ok
+CREATE TABLE test.t (a INTEGER, b INTEGER);
+
+statement ok
+INSERT INTO test.t VALUES (11, 22), (13, 22), (12, 21)
+
+query II
+SELECT b, SUM(a) 
+FROM test.v 
+GROUP BY b 
+QUALIFY row_number() OVER (PARTITION BY b) = 1
+ORDER BY ALL
+----
+21	12
+22	11
+
+# drop the table again
+statement ok
+DROP TABLE test.t
+
+statement error
+SELECT * FROM test.v
+----
+
+endloop
diff --git a/test/sql/catalog/view/recursive_view_with_dependencies.test b/test/sql/catalog/view/recursive_view_with_dependencies.test
index 6ee89c28e9d9..138ed3d10689 100644
--- a/test/sql/catalog/view/recursive_view_with_dependencies.test
+++ b/test/sql/catalog/view/recursive_view_with_dependencies.test
@@ -5,6 +5,9 @@
 statement ok
 set storage_compatibility_version='latest'
 
+statement ok
+set enable_view_dependencies=true
+
 statement ok
 PRAGMA enable_verification
 
diff --git a/test/sql/catalog/view/test_view_schema_change_with_dependencies.test b/test/sql/catalog/view/test_view_schema_change_with_dependencies.test
index e0cc2c27e12c..3ec9283089e7 100644
--- a/test/sql/catalog/view/test_view_schema_change_with_dependencies.test
+++ b/test/sql/catalog/view/test_view_schema_change_with_dependencies.test
@@ -5,6 +5,9 @@
 statement ok
 set storage_compatibility_version='latest'
 
+statement ok
+set enable_view_dependencies=true
+
 statement ok
 PRAGMA enable_verification
 
diff --git a/test/sql/catalog/view/test_view_sql_with_dependencies.test b/test/sql/catalog/view/test_view_sql_with_dependencies.test
index 66a8a3f23849..75d8640575f7 100644
--- a/test/sql/catalog/view/test_view_sql_with_dependencies.test
+++ b/test/sql/catalog/view/test_view_sql_with_dependencies.test
@@ -5,6 +5,9 @@
 statement ok
 set storage_compatibility_version='latest'
 
+statement ok
+set enable_view_dependencies=true
+
 statement ok
 PRAGMA enable_verification
 
diff --git a/test/sql/storage/catalog/test_view_explicit_aliases.test b/test/sql/storage/catalog/test_view_explicit_aliases.test
index f55c3081f362..2d6f6c7344c8 100644
--- a/test/sql/storage/catalog/test_view_explicit_aliases.test
+++ b/test/sql/storage/catalog/test_view_explicit_aliases.test
@@ -8,6 +8,9 @@ require skip_reload
 # load the DB from disk
 load __TEST_DIR__/view_explicit_aliases_storage.db
 
+statement ok
+set enable_view_dependencies=true
+
 # create a database and insert the table/view
 statement ok
 CREATE SCHEMA test;
diff --git a/test/sql/storage/catalog/test_view_storage.test b/test/sql/storage/catalog/test_view_storage.test
index 3218dec01092..d2efb3c72e06 100644
--- a/test/sql/storage/catalog/test_view_storage.test
+++ b/test/sql/storage/catalog/test_view_storage.test
@@ -8,6 +8,9 @@ require skip_reload
 # load the DB from disk
 load __TEST_DIR__/view_storage.db
 
+statement ok
+set enable_view_dependencies=true
+
 # create a schema and view
 statement ok
 CREATE SCHEMA test;
diff --git a/test/sql/storage/catalog/test_view_storage_no_view_dependencies.test b/test/sql/storage/catalog/test_view_storage_no_view_dependencies.test
new file mode 100644
index 000000000000..195ac67e3cd9
--- /dev/null
+++ b/test/sql/storage/catalog/test_view_storage_no_view_dependencies.test
@@ -0,0 +1,79 @@
+# name: test/sql/storage/catalog/test_view_storage_no_view_dependencies.test
+# description: Create and drop a view over different runs
+# group: [catalog]
+
+# load the DB from disk
+load __TEST_DIR__/view_storage.db
+
+# create a schema and view
+statement ok
+CREATE SCHEMA test;
+
+statement ok
+CREATE TABLE test.t (a INTEGER, b INTEGER);
+
+statement ok
+CREATE VIEW test.v AS SELECT * FROM test.t;
+
+# read the info from the view
+query IIIIII
+PRAGMA table_info('test.v')
+----
+0	a	INTEGER	0	NULL	0
+1	b	INTEGER	0	NULL	0
+
+# drop the table the view is based on
+statement ok
+DROP TABLE test.t
+
+# we can still query the types and column names
+query IIIIII
+PRAGMA table_info('test.v')
+----
+0	a	INTEGER	0	NULL	0
+1	b	INTEGER	0	NULL	0
+
+# but querying the view fails
+statement error
+SELECT * FROM test.v
+----
+
+
+loop i 0 2
+
+# restart the system
+restart
+
+# the view still exists, but the table does not
+# we can check the types, but not query it
+query IIIIII
+PRAGMA table_info('test.v')
+----
+0	a	INTEGER	0	NULL	0
+1	b	INTEGER	0	NULL	0
+
+statement error
+SELECT * FROM test.v
+----
+
+# after recreating the table, we can query the view again
+statement ok
+CREATE TABLE test.t (a INTEGER, b INTEGER);
+
+statement ok
+SELECT * FROM test.t
+
+statement ok
+SELECT * FROM test.v
+
+query IIIIII
+PRAGMA table_info('test.v')
+----
+0	a	INTEGER	0	NULL	0
+1	b	INTEGER	0	NULL	0
+
+# drop the table again
+statement ok
+DROP TABLE test.t
+
+endloop
diff --git a/test/sql/storage/wal/wal_view_explicit_aliases.test b/test/sql/storage/wal/wal_view_explicit_aliases.test
index fbfe63f59614..6a7375f4a435 100644
--- a/test/sql/storage/wal/wal_view_explicit_aliases.test
+++ b/test/sql/storage/wal/wal_view_explicit_aliases.test
@@ -4,10 +4,12 @@
 
 require skip_reload
 
-
 # load the DB from disk
 load __TEST_DIR__/view_explicit_aliases_storage.db
 
+statement ok
+set enable_view_dependencies=true
+
 statement ok
 PRAGMA disable_checkpoint_on_shutdown
 
diff --git a/test/sql/storage/wal/wal_view_explicit_aliases_no_view_dependencies.test b/test/sql/storage/wal/wal_view_explicit_aliases_no_view_dependencies.test
new file mode 100644
index 000000000000..1ae05c663d5b
--- /dev/null
+++ b/test/sql/storage/wal/wal_view_explicit_aliases_no_view_dependencies.test
@@ -0,0 +1,74 @@
+# name: test/sql/storage/wal/wal_view_explicit_aliases_no_view_dependencies.test
+# description: Test views with explicit column aliases
+# group: [wal]
+
+require skip_reload
+
+
+# load the DB from disk
+load __TEST_DIR__/view_explicit_aliases_storage.db
+
+statement ok
+PRAGMA disable_checkpoint_on_shutdown
+
+statement ok
+PRAGMA wal_autocheckpoint='1TB';
+
+# create a database and insert the table/view
+statement ok
+CREATE SCHEMA test;
+
+statement ok
+CREATE TABLE test.t (a INTEGER, b INTEGER);
+
+# the view has aliases (b, c)
+statement ok
+CREATE VIEW test.v (b,c) AS SELECT * FROM test.t;
+
+# check the view info
+query II nosort view_info
+PRAGMA table_info('test.v')
+----
+
+statement ok
+SELECT * FROM test.v
+
+statement ok
+DROP TABLE test.t
+
+# we can still query this after the table is gone
+query II nosort view_info
+PRAGMA table_info('test.v')
+----
+
+loop i 0 2
+
+# now reload
+restart
+
+statement ok
+PRAGMA disable_checkpoint_on_shutdown
+
+# can check info, but not query the view
+query II nosort view_info
+PRAGMA table_info('test.v')
+----
+
+statement error
+SELECT * FROM test.v
+----
+
+# we can query again after recreating the table
+statement ok
+CREATE TABLE test.t (a INTEGER, b INTEGER);
+
+statement ok
+SELECT * FROM test.t
+
+statement ok
+SELECT b,c FROM test.v
+
+statement ok
+DROP TABLE test.t
+
+endloop
diff --git a/test/sql/storage/wal/wal_view_storage.test b/test/sql/storage/wal/wal_view_storage.test
index e87a6b423eca..be0915a0aeae 100644
--- a/test/sql/storage/wal/wal_view_storage.test
+++ b/test/sql/storage/wal/wal_view_storage.test
@@ -4,10 +4,12 @@
 
 require skip_reload
 
-
 # load the DB from disk
 load __TEST_DIR__/view_storage.db
 
+statement ok
+set enable_view_dependencies=true
+
 statement ok
 PRAGMA disable_checkpoint_on_shutdown
 
diff --git a/test/sql/storage/wal/wal_view_storage_no_view_dependencies.test b/test/sql/storage/wal/wal_view_storage_no_view_dependencies.test
new file mode 100644
index 000000000000..7214c3f4942b
--- /dev/null
+++ b/test/sql/storage/wal/wal_view_storage_no_view_dependencies.test
@@ -0,0 +1,97 @@
+# name: test/sql/storage/wal/wal_view_storage_no_view_dependencies.test
+# description: Create and drop a view over different runs
+# group: [wal]
+
+require skip_reload
+
+
+# load the DB from disk
+load __TEST_DIR__/view_storage.db
+
+statement ok
+PRAGMA disable_checkpoint_on_shutdown
+
+statement ok
+PRAGMA wal_autocheckpoint='1TB';
+
+# create a schema and view
+statement ok
+CREATE SCHEMA test;
+
+statement ok
+CREATE TABLE test.t (a INTEGER, b INTEGER);
+
+statement ok
+CREATE VIEW test.v AS SELECT * FROM test.t;
+
+# read the info from the view
+query IIIIII
+PRAGMA table_info('test.v')
+----
+0	a	INTEGER	0	NULL	0
+1	b	INTEGER	0	NULL	0
+
+# drop the table the view is based on
+statement ok
+DROP TABLE test.t
+
+# we can still query the types and column names
+query IIIIII
+PRAGMA table_info('test.v')
+----
+0	a	INTEGER	0	NULL	0
+1	b	INTEGER	0	NULL	0
+
+# but querying the view fails
+statement error
+SELECT * FROM test.v
+----
+
+statement ok
+CREATE VIEW test.v2 AS SELECT 42
+
+statement ok
+DROP VIEW test.v2
+
+loop i 0 2
+
+# restart the system
+restart
+
+# the view still exists, but the table does not
+# we can check the types, but not query it
+query IIIIII
+PRAGMA table_info('test.v')
+----
+0	a	INTEGER	0	NULL	0
+1	b	INTEGER	0	NULL	0
+
+statement error
+SELECT * FROM test.v
+----
+
+# after recreating the table, we can query the view again
+statement ok
+CREATE TABLE test.t (a INTEGER, b INTEGER);
+
+statement ok
+SELECT * FROM test.t
+
+statement ok
+SELECT * FROM test.v
+
+query IIIIII
+PRAGMA table_info('test.v')
+----
+0	a	INTEGER	0	NULL	0
+1	b	INTEGER	0	NULL	0
+
+# drop the table again
+statement ok
+DROP TABLE test.t
+
+statement error
+SELECT * FROM test.v2
+----
+
+endloop
