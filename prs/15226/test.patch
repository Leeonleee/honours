diff --git a/test/fuzzer/public/cast_index_expression.test b/test/fuzzer/public/cast_index_expression.test
new file mode 100644
index 000000000000..f707d71bf1a1
--- /dev/null
+++ b/test/fuzzer/public/cast_index_expression.test
@@ -0,0 +1,14 @@
+# name: test/fuzzer/public/cast_index_expression.test
+# description: Test CREATE INDEX using an index expression that triggers a cast
+# group: [public]
+
+statement ok
+pragma enable_verification
+
+statement ok
+CREATE TABLE v00 (c01 INT, c02 STRING);
+
+statement error
+CREATE INDEX i_index ON v00 USING ART ( NULLIF ( v00, 'string' ) );
+----
+Invalid type for index key
diff --git a/test/fuzzer/public/columns_using.test b/test/fuzzer/public/columns_using.test
new file mode 100644
index 000000000000..7cb4bbb570a0
--- /dev/null
+++ b/test/fuzzer/public/columns_using.test
@@ -0,0 +1,20 @@
+# name: test/fuzzer/public/columns_using.test
+# description: Test COLUMNS regex in combination with the USING clause for a FULL join
+# group: [public]
+
+statement ok
+pragma enable_verification
+
+statement ok
+CREATE TABLE v00 (c01 INT);
+
+statement error
+SELECT COLUMNS('v00')
+FROM v00 AS t1 FULL JOIN v00 AS t2 USING (c01) ;
+----
+No matching columns found
+
+query I
+SELECT COLUMNS('c01')
+FROM v00 AS t1 FULL JOIN v00 AS t2 USING (c01) ;
+----
diff --git a/test/fuzzer/public/distinct_on_non_integer_literal.test b/test/fuzzer/public/distinct_on_non_integer_literal.test
new file mode 100644
index 000000000000..2d82b0305452
--- /dev/null
+++ b/test/fuzzer/public/distinct_on_non_integer_literal.test
@@ -0,0 +1,14 @@
+# name: test/fuzzer/public/distinct_on_non_integer_literal.test
+# description: Test DISTINCT ON non-integer literal
+# group: [public]
+
+statement ok
+pragma enable_verification
+
+statement ok
+SET order_by_non_integer_literal=true;
+
+query I
+SELECT DISTINCT ON ('string') 'x' AS c02;
+----
+x
diff --git a/test/fuzzer/public/insert_by_name_default.test b/test/fuzzer/public/insert_by_name_default.test
new file mode 100644
index 000000000000..4c16987f45d9
--- /dev/null
+++ b/test/fuzzer/public/insert_by_name_default.test
@@ -0,0 +1,14 @@
+# name: test/fuzzer/public/insert_by_name_default.test
+# description: Insert by name + default values
+# group: [public]
+
+statement ok
+pragma enable_verification
+
+statement ok
+CREATE TABLE t0(i INT)
+
+statement error
+INSERT INTO t0 BY NAME DEFAULT VALUES;
+----
+INSERT BY NAME cannot be combined with with DEFAULT VALUES
diff --git a/test/fuzzer/public/insert_or_replace_default_values.test b/test/fuzzer/public/insert_or_replace_default_values.test
new file mode 100644
index 000000000000..0d0febe535b3
--- /dev/null
+++ b/test/fuzzer/public/insert_or_replace_default_values.test
@@ -0,0 +1,41 @@
+# name: test/fuzzer/public/insert_or_replace_default_values.test
+# description: Test INSERT OR REPLACE with DEFAULT VALUES
+# group: [public]
+
+statement ok
+pragma enable_verification
+
+statement ok
+CREATE SEQUENCE seq
+
+statement ok
+CREATE TABLE tbl(id INTEGER PRIMARY KEY DEFAULT 1, payload INTEGER DEFAULT nextval('seq'));
+
+statement ok
+INSERT OR REPLACE INTO tbl DEFAULT VALUES;
+
+query II
+FROM tbl
+----
+1	1
+
+statement ok
+INSERT OR REPLACE INTO tbl DEFAULT VALUES;
+
+query II
+FROM tbl
+----
+1	2
+
+statement ok
+INSERT OR IGNORE INTO tbl DEFAULT VALUES;
+
+query II
+FROM tbl
+----
+1	2
+
+statement error
+INSERT INTO tbl DEFAULT VALUES;
+----
+constraint
diff --git a/test/fuzzer/public/pivot_full_join_using.test b/test/fuzzer/public/pivot_full_join_using.test
new file mode 100644
index 000000000000..4c0764f4b500
--- /dev/null
+++ b/test/fuzzer/public/pivot_full_join_using.test
@@ -0,0 +1,16 @@
+# name: test/fuzzer/public/pivot_full_join_using.test
+# description: Test pivoting on a USING column that comes from a FULL JOIN
+# group: [public]
+
+statement ok
+pragma enable_verification
+
+statement ok
+CREATE TABLE t1 (c01 INT, c02 INT);
+
+statement ok
+CREATE TABLE t2 (c01 INT, c03 INT);
+
+query II
+PIVOT t1 FULL JOIN t2 USING ( c01 ) ON c01;
+----
diff --git a/test/fuzzer/public/positional_join_correlated_subquery.test b/test/fuzzer/public/positional_join_correlated_subquery.test
new file mode 100644
index 000000000000..82e93fe8aaa9
--- /dev/null
+++ b/test/fuzzer/public/positional_join_correlated_subquery.test
@@ -0,0 +1,15 @@
+# name: test/fuzzer/public/positional_join_correlated_subquery.test
+# description: Test positional join in correlated subqueries
+# group: [public]
+
+statement ok
+pragma enable_verification
+
+statement ok
+CREATE TABLE v00 (c01 INT, c02 STRING);
+
+statement error
+SELECT (SELECT 42 FROM (SELECT c01) POSITIONAL JOIN (SELECT c02))
+FROM v00;
+----
+not (yet) supported
diff --git a/test/fuzzer/public/semi_join_using.test b/test/fuzzer/public/semi_join_using.test
new file mode 100644
index 000000000000..2f91c6a7448d
--- /dev/null
+++ b/test/fuzzer/public/semi_join_using.test
@@ -0,0 +1,33 @@
+# name: test/fuzzer/public/semi_join_using.test
+# description: Test SEMI JOIN with USING clause
+# group: [public]
+
+statement ok
+pragma enable_verification
+
+statement ok
+CREATE TABLE v00 (c01 INT, c02 STRING);
+
+statement error
+SELECT c02
+FROM (
+	v00 AS t1
+	NATURAL JOIN
+	v00 AS t2 ),
+	( v00 AS ta04
+	SEMI JOIN v00 AS ta05
+	USING ( c02 ) ) ;
+----
+Ambiguous column reference
+
+
+query III
+SELECT t1.c02, t2.c02, ta04.c02
+FROM (
+	v00 AS t1
+	NATURAL JOIN
+	v00 AS t2 ),
+	( v00 AS ta04
+	SEMI JOIN v00 AS ta05
+	USING ( c02 ) ) ;
+----
