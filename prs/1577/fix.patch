diff --git a/src/common/vector_operations/vector_copy.cpp b/src/common/vector_operations/vector_copy.cpp
index 717931219c36..7af3e123d5c9 100644
--- a/src/common/vector_operations/vector_copy.cpp
+++ b/src/common/vector_operations/vector_copy.cpp
@@ -23,18 +23,19 @@ static void TemplatedCopy(const Vector &source, const SelectionVector &sel, Vect
 	}
 }
 
-void VectorOperations::Copy(const Vector &source, Vector &target, const SelectionVector &sel, idx_t source_count,
+void VectorOperations::Copy(const Vector &source, Vector &target, const SelectionVector &sel_p, idx_t source_count,
                             idx_t source_offset, idx_t target_offset) {
 	D_ASSERT(source_offset <= source_count);
 	D_ASSERT(target.GetVectorType() == VectorType::FLAT_VECTOR);
 	D_ASSERT(source.GetType() == target.GetType());
+	const SelectionVector *sel = &sel_p;
 	switch (source.GetVectorType()) {
 	case VectorType::DICTIONARY_VECTOR: {
 		// dictionary vector: merge selection vectors
 		auto &child = DictionaryVector::Child(source);
 		auto &dict_sel = DictionaryVector::SelVector(source);
 		// merge the selection vectors and verify the child
-		auto new_buffer = dict_sel.Slice(sel, source_count);
+		auto new_buffer = dict_sel.Slice(*sel, source_count);
 		SelectionVector merged_sel(new_buffer);
 		VectorOperations::Copy(child, target, merged_sel, source_count, source_offset, target_offset);
 		return;
@@ -43,11 +44,13 @@ void VectorOperations::Copy(const Vector &source, Vector &target, const Selectio
 		int64_t start, increment;
 		Vector seq(source.GetType());
 		SequenceVector::GetSequence(source, start, increment);
-		VectorOperations::GenerateSequence(seq, source_count, sel, start, increment);
-		VectorOperations::Copy(seq, target, sel, source_count, source_offset, target_offset);
+		VectorOperations::GenerateSequence(seq, source_count, *sel, start, increment);
+		VectorOperations::Copy(seq, target, *sel, source_count, source_offset, target_offset);
 		return;
 	}
 	case VectorType::CONSTANT_VECTOR:
+		sel = &ConstantVector::ZERO_SELECTION_VECTOR;
+		break; // carry on with below code
 	case VectorType::FLAT_VECTOR:
 		break;
 	default:
@@ -71,60 +74,62 @@ void VectorOperations::Copy(const Vector &source, Vector &target, const Selectio
 		auto &smask = FlatVector::Validity(source);
 		if (smask.IsMaskSet()) {
 			for (idx_t i = 0; i < copy_count; i++) {
-				auto idx = sel.get_index(source_offset + i);
+				auto idx = sel->get_index(source_offset + i);
 				tmask.Set(target_offset + i, smask.RowIsValid(idx));
 			}
 		}
 	}
 
+	D_ASSERT(sel);
+
 	// now copy over the data
 	switch (source.GetType().InternalType()) {
 	case PhysicalType::BOOL:
 	case PhysicalType::INT8:
-		TemplatedCopy<int8_t>(source, sel, target, source_offset, target_offset, copy_count);
+		TemplatedCopy<int8_t>(source, *sel, target, source_offset, target_offset, copy_count);
 		break;
 	case PhysicalType::INT16:
-		TemplatedCopy<int16_t>(source, sel, target, source_offset, target_offset, copy_count);
+		TemplatedCopy<int16_t>(source, *sel, target, source_offset, target_offset, copy_count);
 		break;
 	case PhysicalType::INT32:
-		TemplatedCopy<int32_t>(source, sel, target, source_offset, target_offset, copy_count);
+		TemplatedCopy<int32_t>(source, *sel, target, source_offset, target_offset, copy_count);
 		break;
 	case PhysicalType::HASH:
 	case PhysicalType::INT64:
-		TemplatedCopy<int64_t>(source, sel, target, source_offset, target_offset, copy_count);
+		TemplatedCopy<int64_t>(source, *sel, target, source_offset, target_offset, copy_count);
 		break;
 	case PhysicalType::UINT8:
-		TemplatedCopy<uint8_t>(source, sel, target, source_offset, target_offset, copy_count);
+		TemplatedCopy<uint8_t>(source, *sel, target, source_offset, target_offset, copy_count);
 		break;
 	case PhysicalType::UINT16:
-		TemplatedCopy<uint16_t>(source, sel, target, source_offset, target_offset, copy_count);
+		TemplatedCopy<uint16_t>(source, *sel, target, source_offset, target_offset, copy_count);
 		break;
 	case PhysicalType::UINT32:
-		TemplatedCopy<uint32_t>(source, sel, target, source_offset, target_offset, copy_count);
+		TemplatedCopy<uint32_t>(source, *sel, target, source_offset, target_offset, copy_count);
 		break;
 	case PhysicalType::UINT64:
-		TemplatedCopy<uint64_t>(source, sel, target, source_offset, target_offset, copy_count);
+		TemplatedCopy<uint64_t>(source, *sel, target, source_offset, target_offset, copy_count);
 		break;
 	case PhysicalType::INT128:
-		TemplatedCopy<hugeint_t>(source, sel, target, source_offset, target_offset, copy_count);
+		TemplatedCopy<hugeint_t>(source, *sel, target, source_offset, target_offset, copy_count);
 		break;
 	case PhysicalType::POINTER:
-		TemplatedCopy<uintptr_t>(source, sel, target, source_offset, target_offset, copy_count);
+		TemplatedCopy<uintptr_t>(source, *sel, target, source_offset, target_offset, copy_count);
 		break;
 	case PhysicalType::FLOAT:
-		TemplatedCopy<float>(source, sel, target, source_offset, target_offset, copy_count);
+		TemplatedCopy<float>(source, *sel, target, source_offset, target_offset, copy_count);
 		break;
 	case PhysicalType::DOUBLE:
-		TemplatedCopy<double>(source, sel, target, source_offset, target_offset, copy_count);
+		TemplatedCopy<double>(source, *sel, target, source_offset, target_offset, copy_count);
 		break;
 	case PhysicalType::INTERVAL:
-		TemplatedCopy<interval_t>(source, sel, target, source_offset, target_offset, copy_count);
+		TemplatedCopy<interval_t>(source, *sel, target, source_offset, target_offset, copy_count);
 		break;
 	case PhysicalType::VARCHAR: {
 		auto ldata = FlatVector::GetData<string_t>(source);
 		auto tdata = FlatVector::GetData<string_t>(target);
 		for (idx_t i = 0; i < copy_count; i++) {
-			auto source_idx = sel.get_index(source_offset + i);
+			auto source_idx = sel->get_index(source_offset + i);
 			auto target_idx = target_offset + i;
 			if (tmask.RowIsValid(target_idx)) {
 				tdata[target_idx] = StringVector::AddStringOrBlob(target, ldata[source_idx]);
@@ -140,7 +145,7 @@ void VectorOperations::Copy(const Vector &source, Vector &target, const Selectio
 			D_ASSERT(source_children.size() == target_children.size());
 			for (idx_t i = 0; i < source_children.size(); i++) {
 				D_ASSERT(target_children[i].first == target_children[i].first);
-				VectorOperations::Copy(*source_children[i].second, *target_children[i].second, sel, source_count,
+				VectorOperations::Copy(*source_children[i].second, *target_children[i].second, *sel, source_count,
 				                       source_offset, target_offset);
 			}
 		} else {
@@ -149,8 +154,7 @@ void VectorOperations::Copy(const Vector &source, Vector &target, const Selectio
 			auto &source_children = StructVector::GetEntries(source);
 			for (auto &child : source_children) {
 				auto child_copy = make_unique<Vector>(child.second->GetType());
-
-				VectorOperations::Copy(*child.second, *child_copy, sel, source_count, source_offset, target_offset);
+				VectorOperations::Copy(*child.second, *child_copy, *sel, source_count, source_offset, target_offset);
 				StructVector::AddEntry(target, child.first, move(child_copy));
 			}
 		}
@@ -170,7 +174,7 @@ void VectorOperations::Copy(const Vector &source, Vector &target, const Selectio
 			vector<sel_t> child_rows;
 			for (idx_t i = 0; i < copy_count; ++i) {
 				if (tmask.RowIsValid(target_offset + i)) {
-					auto source_idx = sel.get_index(source_offset + i);
+					auto source_idx = sel->get_index(source_offset + i);
 					auto &source_entry = sdata[source_idx];
 					for (idx_t j = 0; j < source_entry.length; ++j) {
 						child_rows.emplace_back(source_entry.offset + j);
@@ -190,7 +194,7 @@ void VectorOperations::Copy(const Vector &source, Vector &target, const Selectio
 			//! now write the list offsets
 			auto tdata = FlatVector::GetData<list_entry_t>(target);
 			for (idx_t i = 0; i < copy_count; i++) {
-				auto source_idx = sel.get_index(source_offset + i);
+				auto source_idx = sel->get_index(source_offset + i);
 				auto &source_entry = sdata[source_idx];
 				auto &target_entry = tdata[target_offset + i];
 
