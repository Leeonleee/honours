{
  "repo": "duckdb/duckdb",
  "pull_number": 1577,
  "instance_id": "duckdb__duckdb-1577",
  "issue_numbers": [
    "1576"
  ],
  "base_commit": "6c7c9805fdf1604039ebed47d233ea55cabb4b2c",
  "patch": "diff --git a/src/common/vector_operations/vector_copy.cpp b/src/common/vector_operations/vector_copy.cpp\nindex 717931219c36..7af3e123d5c9 100644\n--- a/src/common/vector_operations/vector_copy.cpp\n+++ b/src/common/vector_operations/vector_copy.cpp\n@@ -23,18 +23,19 @@ static void TemplatedCopy(const Vector &source, const SelectionVector &sel, Vect\n \t}\n }\n \n-void VectorOperations::Copy(const Vector &source, Vector &target, const SelectionVector &sel, idx_t source_count,\n+void VectorOperations::Copy(const Vector &source, Vector &target, const SelectionVector &sel_p, idx_t source_count,\n                             idx_t source_offset, idx_t target_offset) {\n \tD_ASSERT(source_offset <= source_count);\n \tD_ASSERT(target.GetVectorType() == VectorType::FLAT_VECTOR);\n \tD_ASSERT(source.GetType() == target.GetType());\n+\tconst SelectionVector *sel = &sel_p;\n \tswitch (source.GetVectorType()) {\n \tcase VectorType::DICTIONARY_VECTOR: {\n \t\t// dictionary vector: merge selection vectors\n \t\tauto &child = DictionaryVector::Child(source);\n \t\tauto &dict_sel = DictionaryVector::SelVector(source);\n \t\t// merge the selection vectors and verify the child\n-\t\tauto new_buffer = dict_sel.Slice(sel, source_count);\n+\t\tauto new_buffer = dict_sel.Slice(*sel, source_count);\n \t\tSelectionVector merged_sel(new_buffer);\n \t\tVectorOperations::Copy(child, target, merged_sel, source_count, source_offset, target_offset);\n \t\treturn;\n@@ -43,11 +44,13 @@ void VectorOperations::Copy(const Vector &source, Vector &target, const Selectio\n \t\tint64_t start, increment;\n \t\tVector seq(source.GetType());\n \t\tSequenceVector::GetSequence(source, start, increment);\n-\t\tVectorOperations::GenerateSequence(seq, source_count, sel, start, increment);\n-\t\tVectorOperations::Copy(seq, target, sel, source_count, source_offset, target_offset);\n+\t\tVectorOperations::GenerateSequence(seq, source_count, *sel, start, increment);\n+\t\tVectorOperations::Copy(seq, target, *sel, source_count, source_offset, target_offset);\n \t\treturn;\n \t}\n \tcase VectorType::CONSTANT_VECTOR:\n+\t\tsel = &ConstantVector::ZERO_SELECTION_VECTOR;\n+\t\tbreak; // carry on with below code\n \tcase VectorType::FLAT_VECTOR:\n \t\tbreak;\n \tdefault:\n@@ -71,60 +74,62 @@ void VectorOperations::Copy(const Vector &source, Vector &target, const Selectio\n \t\tauto &smask = FlatVector::Validity(source);\n \t\tif (smask.IsMaskSet()) {\n \t\t\tfor (idx_t i = 0; i < copy_count; i++) {\n-\t\t\t\tauto idx = sel.get_index(source_offset + i);\n+\t\t\t\tauto idx = sel->get_index(source_offset + i);\n \t\t\t\ttmask.Set(target_offset + i, smask.RowIsValid(idx));\n \t\t\t}\n \t\t}\n \t}\n \n+\tD_ASSERT(sel);\n+\n \t// now copy over the data\n \tswitch (source.GetType().InternalType()) {\n \tcase PhysicalType::BOOL:\n \tcase PhysicalType::INT8:\n-\t\tTemplatedCopy<int8_t>(source, sel, target, source_offset, target_offset, copy_count);\n+\t\tTemplatedCopy<int8_t>(source, *sel, target, source_offset, target_offset, copy_count);\n \t\tbreak;\n \tcase PhysicalType::INT16:\n-\t\tTemplatedCopy<int16_t>(source, sel, target, source_offset, target_offset, copy_count);\n+\t\tTemplatedCopy<int16_t>(source, *sel, target, source_offset, target_offset, copy_count);\n \t\tbreak;\n \tcase PhysicalType::INT32:\n-\t\tTemplatedCopy<int32_t>(source, sel, target, source_offset, target_offset, copy_count);\n+\t\tTemplatedCopy<int32_t>(source, *sel, target, source_offset, target_offset, copy_count);\n \t\tbreak;\n \tcase PhysicalType::HASH:\n \tcase PhysicalType::INT64:\n-\t\tTemplatedCopy<int64_t>(source, sel, target, source_offset, target_offset, copy_count);\n+\t\tTemplatedCopy<int64_t>(source, *sel, target, source_offset, target_offset, copy_count);\n \t\tbreak;\n \tcase PhysicalType::UINT8:\n-\t\tTemplatedCopy<uint8_t>(source, sel, target, source_offset, target_offset, copy_count);\n+\t\tTemplatedCopy<uint8_t>(source, *sel, target, source_offset, target_offset, copy_count);\n \t\tbreak;\n \tcase PhysicalType::UINT16:\n-\t\tTemplatedCopy<uint16_t>(source, sel, target, source_offset, target_offset, copy_count);\n+\t\tTemplatedCopy<uint16_t>(source, *sel, target, source_offset, target_offset, copy_count);\n \t\tbreak;\n \tcase PhysicalType::UINT32:\n-\t\tTemplatedCopy<uint32_t>(source, sel, target, source_offset, target_offset, copy_count);\n+\t\tTemplatedCopy<uint32_t>(source, *sel, target, source_offset, target_offset, copy_count);\n \t\tbreak;\n \tcase PhysicalType::UINT64:\n-\t\tTemplatedCopy<uint64_t>(source, sel, target, source_offset, target_offset, copy_count);\n+\t\tTemplatedCopy<uint64_t>(source, *sel, target, source_offset, target_offset, copy_count);\n \t\tbreak;\n \tcase PhysicalType::INT128:\n-\t\tTemplatedCopy<hugeint_t>(source, sel, target, source_offset, target_offset, copy_count);\n+\t\tTemplatedCopy<hugeint_t>(source, *sel, target, source_offset, target_offset, copy_count);\n \t\tbreak;\n \tcase PhysicalType::POINTER:\n-\t\tTemplatedCopy<uintptr_t>(source, sel, target, source_offset, target_offset, copy_count);\n+\t\tTemplatedCopy<uintptr_t>(source, *sel, target, source_offset, target_offset, copy_count);\n \t\tbreak;\n \tcase PhysicalType::FLOAT:\n-\t\tTemplatedCopy<float>(source, sel, target, source_offset, target_offset, copy_count);\n+\t\tTemplatedCopy<float>(source, *sel, target, source_offset, target_offset, copy_count);\n \t\tbreak;\n \tcase PhysicalType::DOUBLE:\n-\t\tTemplatedCopy<double>(source, sel, target, source_offset, target_offset, copy_count);\n+\t\tTemplatedCopy<double>(source, *sel, target, source_offset, target_offset, copy_count);\n \t\tbreak;\n \tcase PhysicalType::INTERVAL:\n-\t\tTemplatedCopy<interval_t>(source, sel, target, source_offset, target_offset, copy_count);\n+\t\tTemplatedCopy<interval_t>(source, *sel, target, source_offset, target_offset, copy_count);\n \t\tbreak;\n \tcase PhysicalType::VARCHAR: {\n \t\tauto ldata = FlatVector::GetData<string_t>(source);\n \t\tauto tdata = FlatVector::GetData<string_t>(target);\n \t\tfor (idx_t i = 0; i < copy_count; i++) {\n-\t\t\tauto source_idx = sel.get_index(source_offset + i);\n+\t\t\tauto source_idx = sel->get_index(source_offset + i);\n \t\t\tauto target_idx = target_offset + i;\n \t\t\tif (tmask.RowIsValid(target_idx)) {\n \t\t\t\ttdata[target_idx] = StringVector::AddStringOrBlob(target, ldata[source_idx]);\n@@ -140,7 +145,7 @@ void VectorOperations::Copy(const Vector &source, Vector &target, const Selectio\n \t\t\tD_ASSERT(source_children.size() == target_children.size());\n \t\t\tfor (idx_t i = 0; i < source_children.size(); i++) {\n \t\t\t\tD_ASSERT(target_children[i].first == target_children[i].first);\n-\t\t\t\tVectorOperations::Copy(*source_children[i].second, *target_children[i].second, sel, source_count,\n+\t\t\t\tVectorOperations::Copy(*source_children[i].second, *target_children[i].second, *sel, source_count,\n \t\t\t\t                       source_offset, target_offset);\n \t\t\t}\n \t\t} else {\n@@ -149,8 +154,7 @@ void VectorOperations::Copy(const Vector &source, Vector &target, const Selectio\n \t\t\tauto &source_children = StructVector::GetEntries(source);\n \t\t\tfor (auto &child : source_children) {\n \t\t\t\tauto child_copy = make_unique<Vector>(child.second->GetType());\n-\n-\t\t\t\tVectorOperations::Copy(*child.second, *child_copy, sel, source_count, source_offset, target_offset);\n+\t\t\t\tVectorOperations::Copy(*child.second, *child_copy, *sel, source_count, source_offset, target_offset);\n \t\t\t\tStructVector::AddEntry(target, child.first, move(child_copy));\n \t\t\t}\n \t\t}\n@@ -170,7 +174,7 @@ void VectorOperations::Copy(const Vector &source, Vector &target, const Selectio\n \t\t\tvector<sel_t> child_rows;\n \t\t\tfor (idx_t i = 0; i < copy_count; ++i) {\n \t\t\t\tif (tmask.RowIsValid(target_offset + i)) {\n-\t\t\t\t\tauto source_idx = sel.get_index(source_offset + i);\n+\t\t\t\t\tauto source_idx = sel->get_index(source_offset + i);\n \t\t\t\t\tauto &source_entry = sdata[source_idx];\n \t\t\t\t\tfor (idx_t j = 0; j < source_entry.length; ++j) {\n \t\t\t\t\t\tchild_rows.emplace_back(source_entry.offset + j);\n@@ -190,7 +194,7 @@ void VectorOperations::Copy(const Vector &source, Vector &target, const Selectio\n \t\t\t//! now write the list offsets\n \t\t\tauto tdata = FlatVector::GetData<list_entry_t>(target);\n \t\t\tfor (idx_t i = 0; i < copy_count; i++) {\n-\t\t\t\tauto source_idx = sel.get_index(source_offset + i);\n+\t\t\t\tauto source_idx = sel->get_index(source_offset + i);\n \t\t\t\tauto &source_entry = sdata[source_idx];\n \t\t\t\tauto &target_entry = tdata[target_offset + i];\n \n",
  "test_patch": "diff --git a/test/sql/types/struct/test_struct.test b/test/sql/types/struct/test_struct.test\nindex 4ac122e03a14..3b65e671d127 100644\n--- a/test/sql/types/struct/test_struct.test\n+++ b/test/sql/types/struct/test_struct.test\n@@ -175,3 +175,9 @@ SELECT STRUCT_EXTRACT(STRUCT_PACK(xx := e, yy := g), '42') FROM struct_data\n \n statement error\n CREATE TABLE test AS SELECT e, STRUCT_PACK(e) FROM struct_data\n+\n+statement ok\n+SELECT STRUCT_PACK(i := range, j := 'asdf') FROM range(2);\n+\n+statement ok\n+SELECT STRUCT_PACK(i := range, j := 42) FROM range(2);\n",
  "problem_statement": "crash when having constant in struct_pack\nThe following causes duckdb to crash\r\n```\r\nv0.2.6-dev307 b1d730018\r\nEnter \".help\" for usage hints.\r\nD SELECT STRUCT_PACK(i :=range, j :=3) FROM range(2);\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 struct_pack(range, 3) \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 <i: 0, j: 3>          \u2502\r\n\u2502 <i: 1, j: 1073741824> \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\nD SELECT STRUCT_PACK(i :=range, j :='x') FROM range(2);\r\nzsh: segmentation fault  \r\n```\n",
  "hints_text": "",
  "created_at": "2021-04-06T11:16:47Z"
}