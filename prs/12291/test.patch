diff --git a/test/api/test_reset.cpp b/test/api/test_reset.cpp
index 5a949c0e5841..0fda1aa21ac3 100644
--- a/test/api/test_reset.cpp
+++ b/test/api/test_reset.cpp
@@ -60,6 +60,7 @@ OptionValueSet &GetValueForOption(const string &name) {
 	    {"prefer_range_joins", {Value(true)}},
 	    {"allow_persistent_secrets", {Value(false)}},
 	    {"secret_directory", {"/tmp/some/path"}},
+	    {"enable_macro_dependencies", {Value(true)}},
 	    {"enable_view_dependencies", {Value(true)}},
 	    {"default_secret_storage", {"custom_storage"}},
 	    {"custom_extension_repository", {"duckdb.org/no-extensions-here", "duckdb.org/no-extensions-here"}},
diff --git a/test/sql/catalog/function/test_cross_catalog_macros.test b/test/sql/catalog/function/test_cross_catalog_macros.test
new file mode 100644
index 000000000000..3b5981fc3e66
--- /dev/null
+++ b/test/sql/catalog/function/test_cross_catalog_macros.test
@@ -0,0 +1,16 @@
+# name: test/sql/catalog/function/test_cross_catalog_macros.test
+# description: Test cross-catalog dependencies in macros
+# group: [function]
+
+require skip_reload
+
+statement ok
+CREATE MACRO my_first_macro() AS (84)
+
+statement ok
+CREATE TEMPORARY MACRO my_second_macro() AS my_first_macro() + 42;
+
+query I
+SELECT my_second_macro()
+----
+126
diff --git a/test/sql/catalog/function/test_macro_default_arg_with_dependencies.test b/test/sql/catalog/function/test_macro_default_arg_with_dependencies.test
index 82be9ed53bd6..9809762850ce 100644
--- a/test/sql/catalog/function/test_macro_default_arg_with_dependencies.test
+++ b/test/sql/catalog/function/test_macro_default_arg_with_dependencies.test
@@ -4,6 +4,9 @@
 statement ok
 set storage_compatibility_version='latest'
 
+statement ok
+set enable_macro_dependencies=true
+
 statement ok
 pragma enable_verification;
 
diff --git a/test/sql/catalog/function/test_recursive_macro.test b/test/sql/catalog/function/test_recursive_macro.test
index ff5cf51743bd..71bdcf05a3ec 100644
--- a/test/sql/catalog/function/test_recursive_macro.test
+++ b/test/sql/catalog/function/test_recursive_macro.test
@@ -2,6 +2,9 @@
 # description: Test recursive macros
 # group: [function]
 
+statement ok
+set enable_macro_dependencies=true
+
 statement ok
 CREATE MACRO "sum"(x) AS (CASE WHEN sum(x) IS NULL THEN 0 ELSE sum(x) END);
 
diff --git a/test/sql/catalog/function/test_recursive_macro_no_dependency.test b/test/sql/catalog/function/test_recursive_macro_no_dependency.test
new file mode 100644
index 000000000000..0e608309be1f
--- /dev/null
+++ b/test/sql/catalog/function/test_recursive_macro_no_dependency.test
@@ -0,0 +1,53 @@
+# name: test/sql/catalog/function/test_recursive_macro_no_dependency.test
+# description: Test recursive macros
+# group: [function]
+
+statement ok
+CREATE MACRO "sum"(x) AS (CASE WHEN sum(x) IS NULL THEN 0 ELSE sum(x) END);
+
+statement error
+SELECT sum(1);
+----
+Binder Error: Maximum recursion depth exceeded
+
+statement error
+SELECT sum(1) WHERE 42=0
+----
+Binder Error: Maximum recursion depth exceeded
+
+statement ok
+DROP MACRO sum
+
+# recursive macro with explicit qualification
+statement ok
+CREATE MACRO "sum"(x) AS (CASE WHEN system.main.sum(x) IS NULL THEN 0 ELSE system.main.sum(x) END);
+
+query I
+SELECT sum(1);
+----
+1
+
+query I
+SELECT sum(1) WHERE 42=0
+----
+0
+
+# evil test case by Mark
+statement ok
+create macro m1(a) as a+1;
+
+statement ok
+create macro m2(a) as m1(a)+1;
+
+statement ok
+create or replace macro m1(a) as m2(a)+1;
+
+# also table macros
+statement ok
+create macro m3(a) as a+1;
+
+statement ok
+create macro m4(a) as table select m3(a);
+
+statement ok
+create or replace macro m3(a) as (from m4(42));
