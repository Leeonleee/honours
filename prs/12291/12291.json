{
  "repo": "duckdb/duckdb",
  "pull_number": 12291,
  "instance_id": "duckdb__duckdb-12291",
  "issue_numbers": [
    "12272"
  ],
  "base_commit": "4834a0b7e75448b1d892c05b3587dcb5c27a1d2e",
  "patch": "diff --git a/src/include/duckdb/main/config.hpp b/src/include/duckdb/main/config.hpp\nindex 34b73778106e..35928b989391 100644\n--- a/src/include/duckdb/main/config.hpp\n+++ b/src/include/duckdb/main/config.hpp\n@@ -210,6 +210,8 @@ struct DBConfigOptions {\n \tbool enable_fsst_vectors = false;\n \t//! Enable VIEWs to create dependencies\n \tbool enable_view_dependencies = false;\n+\t//! Enable macros to create dependencies\n+\tbool enable_macro_dependencies = false;\n \t//! Start transactions immediately in all attached databases - instead of lazily when a database is referenced\n \tbool immediate_transaction_mode = false;\n \t//! Debug setting - how to initialize  blocks in the storage layer when allocating\ndiff --git a/src/include/duckdb/main/settings.hpp b/src/include/duckdb/main/settings.hpp\nindex ced0835ca4e3..a333cd928aee 100644\n--- a/src/include/duckdb/main/settings.hpp\n+++ b/src/include/duckdb/main/settings.hpp\n@@ -206,6 +206,16 @@ struct EnableExternalAccessSetting {\n \tstatic Value GetSetting(const ClientContext &context);\n };\n \n+struct EnableMacrosDependencies {\n+\tstatic constexpr const char *Name = \"enable_macro_dependencies\";\n+\tstatic constexpr const char *Description =\n+\t    \"Enable created MACROs to create dependencies on the referenced objects (such as tables)\";\n+\tstatic constexpr const LogicalTypeId InputType = LogicalTypeId::BOOLEAN;\n+\tstatic void SetGlobal(DatabaseInstance *db, DBConfig &config, const Value &parameter);\n+\tstatic void ResetGlobal(DatabaseInstance *db, DBConfig &config);\n+\tstatic Value GetSetting(const ClientContext &context);\n+};\n+\n struct EnableViewDependencies {\n \tstatic constexpr const char *Name = \"enable_view_dependencies\";\n \tstatic constexpr const char *Description =\ndiff --git a/src/main/config.cpp b/src/main/config.cpp\nindex 409ae1f9308f..17a503a0f59b 100644\n--- a/src/main/config.cpp\n+++ b/src/main/config.cpp\n@@ -94,6 +94,7 @@ static const ConfigurationOption internal_options[] = {\n     DUCKDB_GLOBAL(ForceBitpackingModeSetting),\n     DUCKDB_LOCAL(HomeDirectorySetting),\n     DUCKDB_LOCAL(LogQueryPathSetting),\n+    DUCKDB_GLOBAL(EnableMacrosDependencies),\n     DUCKDB_GLOBAL(EnableViewDependencies),\n     DUCKDB_GLOBAL(LockConfigurationSetting),\n     DUCKDB_GLOBAL(ImmediateTransactionModeSetting),\ndiff --git a/src/main/settings/settings.cpp b/src/main/settings/settings.cpp\nindex 2b5ae50c5d33..7217af5a0440 100644\n--- a/src/main/settings/settings.cpp\n+++ b/src/main/settings/settings.cpp\n@@ -437,6 +437,22 @@ Value EnableExternalAccessSetting::GetSetting(const ClientContext &context) {\n \treturn Value::BOOLEAN(config.options.enable_external_access);\n }\n \n+//===--------------------------------------------------------------------===//\n+// Enable Macro Dependencies\n+//===--------------------------------------------------------------------===//\n+void EnableMacrosDependencies::SetGlobal(DatabaseInstance *db, DBConfig &config, const Value &input) {\n+\tconfig.options.enable_macro_dependencies = input.GetValue<bool>();\n+}\n+\n+void EnableMacrosDependencies::ResetGlobal(DatabaseInstance *db, DBConfig &config) {\n+\tconfig.options.enable_macro_dependencies = DBConfig().options.enable_macro_dependencies;\n+}\n+\n+Value EnableMacrosDependencies::GetSetting(const ClientContext &context) {\n+\tauto &config = DBConfig::GetConfig(context);\n+\treturn Value::BOOLEAN(config.options.enable_macro_dependencies);\n+}\n+\n //===--------------------------------------------------------------------===//\n // Enable View Dependencies\n //===--------------------------------------------------------------------===//\ndiff --git a/src/planner/binder/statement/bind_create.cpp b/src/planner/binder/statement/bind_create.cpp\nindex 75ce341b2558..b8c5c7bc19df 100644\n--- a/src/planner/binder/statement/bind_create.cpp\n+++ b/src/planner/binder/statement/bind_create.cpp\n@@ -210,14 +210,19 @@ SchemaCatalogEntry &Binder::BindCreateFunctionInfo(CreateInfo &info) {\n \tSelectBinder binder(*this, context, sel_node, group_info);\n \tauto &dependencies = base.dependencies;\n \tauto &catalog = Catalog::GetCatalog(context, info.catalog);\n-\tbinder.SetCatalogLookupCallback([&dependencies, &catalog](CatalogEntry &entry) {\n-\t\tif (&catalog != &entry.ParentCatalog()) {\n-\t\t\t// Don't register any cross-catalog dependencies\n-\t\t\treturn;\n-\t\t}\n-\t\t// Register any catalog entry required to bind the macro function\n-\t\tdependencies.AddDependency(entry);\n-\t});\n+\tauto &db_config = DBConfig::GetConfig(context);\n+\tauto should_create_dependencies = db_config.options.enable_macro_dependencies;\n+\n+\tif (should_create_dependencies) {\n+\t\tbinder.SetCatalogLookupCallback([&dependencies, &catalog](CatalogEntry &entry) {\n+\t\t\tif (&catalog != &entry.ParentCatalog()) {\n+\t\t\t\t// Don't register any cross-catalog dependencies\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\t// Register any catalog entry required to bind the macro function\n+\t\t\tdependencies.AddDependency(entry);\n+\t\t});\n+\t}\n \terror = binder.Bind(expression, 0, false);\n \tif (error.HasError()) {\n \t\terror.Throw();\n",
  "test_patch": "diff --git a/test/api/test_reset.cpp b/test/api/test_reset.cpp\nindex 5a949c0e5841..0fda1aa21ac3 100644\n--- a/test/api/test_reset.cpp\n+++ b/test/api/test_reset.cpp\n@@ -60,6 +60,7 @@ OptionValueSet &GetValueForOption(const string &name) {\n \t    {\"prefer_range_joins\", {Value(true)}},\n \t    {\"allow_persistent_secrets\", {Value(false)}},\n \t    {\"secret_directory\", {\"/tmp/some/path\"}},\n+\t    {\"enable_macro_dependencies\", {Value(true)}},\n \t    {\"enable_view_dependencies\", {Value(true)}},\n \t    {\"default_secret_storage\", {\"custom_storage\"}},\n \t    {\"custom_extension_repository\", {\"duckdb.org/no-extensions-here\", \"duckdb.org/no-extensions-here\"}},\ndiff --git a/test/sql/catalog/function/test_cross_catalog_macros.test b/test/sql/catalog/function/test_cross_catalog_macros.test\nnew file mode 100644\nindex 000000000000..3b5981fc3e66\n--- /dev/null\n+++ b/test/sql/catalog/function/test_cross_catalog_macros.test\n@@ -0,0 +1,16 @@\n+# name: test/sql/catalog/function/test_cross_catalog_macros.test\n+# description: Test cross-catalog dependencies in macros\n+# group: [function]\n+\n+require skip_reload\n+\n+statement ok\n+CREATE MACRO my_first_macro() AS (84)\n+\n+statement ok\n+CREATE TEMPORARY MACRO my_second_macro() AS my_first_macro() + 42;\n+\n+query I\n+SELECT my_second_macro()\n+----\n+126\ndiff --git a/test/sql/catalog/function/test_macro_default_arg_with_dependencies.test b/test/sql/catalog/function/test_macro_default_arg_with_dependencies.test\nindex 82be9ed53bd6..9809762850ce 100644\n--- a/test/sql/catalog/function/test_macro_default_arg_with_dependencies.test\n+++ b/test/sql/catalog/function/test_macro_default_arg_with_dependencies.test\n@@ -4,6 +4,9 @@\n statement ok\n set storage_compatibility_version='latest'\n \n+statement ok\n+set enable_macro_dependencies=true\n+\n statement ok\n pragma enable_verification;\n \ndiff --git a/test/sql/catalog/function/test_recursive_macro.test b/test/sql/catalog/function/test_recursive_macro.test\nindex ff5cf51743bd..71bdcf05a3ec 100644\n--- a/test/sql/catalog/function/test_recursive_macro.test\n+++ b/test/sql/catalog/function/test_recursive_macro.test\n@@ -2,6 +2,9 @@\n # description: Test recursive macros\n # group: [function]\n \n+statement ok\n+set enable_macro_dependencies=true\n+\n statement ok\n CREATE MACRO \"sum\"(x) AS (CASE WHEN sum(x) IS NULL THEN 0 ELSE sum(x) END);\n \ndiff --git a/test/sql/catalog/function/test_recursive_macro_no_dependency.test b/test/sql/catalog/function/test_recursive_macro_no_dependency.test\nnew file mode 100644\nindex 000000000000..0e608309be1f\n--- /dev/null\n+++ b/test/sql/catalog/function/test_recursive_macro_no_dependency.test\n@@ -0,0 +1,53 @@\n+# name: test/sql/catalog/function/test_recursive_macro_no_dependency.test\n+# description: Test recursive macros\n+# group: [function]\n+\n+statement ok\n+CREATE MACRO \"sum\"(x) AS (CASE WHEN sum(x) IS NULL THEN 0 ELSE sum(x) END);\n+\n+statement error\n+SELECT sum(1);\n+----\n+Binder Error: Maximum recursion depth exceeded\n+\n+statement error\n+SELECT sum(1) WHERE 42=0\n+----\n+Binder Error: Maximum recursion depth exceeded\n+\n+statement ok\n+DROP MACRO sum\n+\n+# recursive macro with explicit qualification\n+statement ok\n+CREATE MACRO \"sum\"(x) AS (CASE WHEN system.main.sum(x) IS NULL THEN 0 ELSE system.main.sum(x) END);\n+\n+query I\n+SELECT sum(1);\n+----\n+1\n+\n+query I\n+SELECT sum(1) WHERE 42=0\n+----\n+0\n+\n+# evil test case by Mark\n+statement ok\n+create macro m1(a) as a+1;\n+\n+statement ok\n+create macro m2(a) as m1(a)+1;\n+\n+statement ok\n+create or replace macro m1(a) as m2(a)+1;\n+\n+# also table macros\n+statement ok\n+create macro m3(a) as a+1;\n+\n+statement ok\n+create macro m4(a) as table select m3(a);\n+\n+statement ok\n+create or replace macro m3(a) as (from m4(42));\n",
  "problem_statement": "cannot define a macro inside a cursor - Cross catalog dependencies are not supported.\n### What happens?\n\nAn error is thrown when trying to create a TEMP MACRO inside a cursor with a dependency.\r\nThis worked prior to 0.10.3\r\n\r\n```\r\nduckdb.duckdb.Error: Error adding dependency for object \"m2\" - dependency \"m1\" is in catalog \"memory\", which does not match the catalog \"temp\".\r\nCross catalog dependencies are not supported.\r\n```\n\n### To Reproduce\n\n```python\r\nimport duckdb\r\n\r\n\r\ndef temp_macro() -> None:\r\n    with duckdb.connect() as con:\r\n        print(con.execute(\"SELECT * FROM pragma_version()\").fetchall())\r\n        con.execute(\"CREATE MACRO m1() AS (SELECT 1 AS x);\")\r\n        with con.cursor() as cur:\r\n            cur.execute(\r\n                \"\"\"CREATE OR REPLACE TEMP MACRO m2() AS (SELECT m1() AS y);\"\"\")\r\n            \r\ntemp_macro()\r\n\r\n```\r\n\r\n```sh\r\n% python3 /tmp/macro.py \r\n[('v0.10.2', '1601d94f94')]\r\n\r\n% python3 /tmp/macro.py \r\n[('v0.10.3', '70fd6a8a24')]\r\nTraceback (most recent call last):\r\n  File \"/tmp/macro.py\", line 12, in <module>\r\n    temp_macro()\r\n  File \"/tmp/macro.py\", line 5, in temp_macro\r\n    with duckdb.connect() as con:\r\n  File \"/tmp/macro.py\", line 8, in temp_macro\r\n    with con.cursor() as cur:\r\n  File \"/tmp/macro.py\", line 9, in temp_macro\r\n    cur.execute(\r\nduckdb.duckdb.Error: Error adding dependency for object \"m2\" - dependency \"m1\" is in catalog \"memory\", which does not match the catalog \"temp\".\r\nCross catalog dependencies are not supported.\r\n\r\n% python3 /tmp/macro.py \r\n[('v0.10.4-dev72', '896686ffdf')]\r\nTraceback (most recent call last):\r\n  File \"/tmp/macro.py\", line 12, in <module>\r\n    temp_macro()\r\n  File \"/tmp/macro.py\", line 5, in temp_macro\r\n    with duckdb.connect() as con:\r\n  File \"/tmp/macro.py\", line 8, in temp_macro\r\n    with con.cursor() as cur:\r\n  File \"/tmp/macro.py\", line 9, in temp_macro\r\n    cur.execute(\r\nduckdb.duckdb.Error: Error adding dependency for object \"m2\" - dependency \"m1\" is in catalog \"memory\", which does not match the catalog \"temp\".\r\nCross catalog dependencies are not supported.\r\n```\n\n### OS:\n\nmacOS 14.5\n\n### DuckDB Version:\n\n0.10.3\n\n### DuckDB Client:\n\nPython\n\n### Full Name:\n\nRob Jackson\n\n### Affiliation:\n\nexaforce.com\n\n### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.\n\nI have tested with a source build\n\n### Did you include all relevant data sets for reproducing the issue?\n\nYes\n\n### Did you include all code required to reproduce the issue?\n\n- [X] Yes, I have\n\n### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?\n\n- [X] Yes, I have\n",
  "hints_text": "Thanks for raising this\r\n\r\nThis dependency did not exist previously, it was introduced as part of https://github.com/duckdb/duckdb/pull/11493\r\n\r\nThat means there was nothing preventing m1 from being dropped while m2 was still alive (not dropped)\r\n\r\nWe'll review what action to take based on this issue\r\n\r\nPerhaps we'll make temporary objects exempt from this, not creating dependencies for created temporary objects\nThanks for the feedback.\r\nGiven the error message was so clear, I was in two minds as to whether this was a bug report or a feature request.\nThe error is supposed to surface when you're attempting to reference an object (macro in this case) from another db, that was added using ATTACH\r\n\r\nHitting this on temporary objects is a bit of an oversight, not a case I considered yet\nIt is a pain if you have a helper file with a bunch of macros.\r\nPreviously you could use CREATE OR REPLACE.\r\nWith dependency checks you need to explicitly DROP IF EXISTS the dependent functions.\r\n\r\ne.g.\r\n\r\n```python\r\n\r\nimport duckdb\r\n\r\n_MACROS = \"\"\"\r\nCREATE OR REPLACE MACRO m1() AS (SELECT 1 AS x);\r\nCREATE OR REPLACE MACRO m2() AS (SELECT m1() AS y);\r\n\"\"\"\r\n\r\ndef macro_defs() -> None:\r\n    with duckdb.connect() as con:\r\n        con.execute(_MACROS)\r\n        con.execute(_MACROS)\r\n            \r\nmacro_defs()\r\n```\r\n\r\n```sh\r\n% python3 /tmp/macro2.py \r\nTraceback (most recent call last):\r\n  File \"/tmp/macro2.py\", line 13, in <module>\r\n    macro_defs()\r\n  File \"/tmp/macro2.py\", line 9, in macro_defs\r\n    with duckdb.connect() as con:\r\n  File \"/tmp/macro2.py\", line 11, in macro_defs\r\n    con.execute(_MACROS)\r\nduckdb.duckdb.Error: Cannot drop entry \"m1\" because there are entries that depend on it.\r\nmacro function \"m2\" depends on macro function \"m1\".\r\nUse DROP...CASCADE to drop all dependents.\r\n```\nI think CREATE OR REPLACE should get a CASCADE option which applies when the `OR REPLACE` kicks in.\r\nThough that might create the expectation that all the affected objects are recreated, which I think would not be the goal\r\n\r\nSo actually, disregard this comment, CASCADE is probably not something we want for CREATE OR REPLACE",
  "created_at": "2024-05-28T14:17:03Z"
}