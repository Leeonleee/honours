diff --git a/test/sql/copy/parquet/parquet_schema_evolution.test b/test/sql/copy/parquet/parquet_schema_evolution.test
new file mode 100644
index 000000000000..95cd4b5e22b0
--- /dev/null
+++ b/test/sql/copy/parquet/parquet_schema_evolution.test
@@ -0,0 +1,140 @@
+# name: test/sql/copy/parquet/parquet_schema_evolution.test
+# description: Test parquet schema evolution
+# group: [parquet]
+
+require parquet
+
+statement ok
+PRAGMA enable_verification
+
+# we run this twice, once with multi threading and once without
+loop i 0 2
+
+# test column names in different orders
+statement ok
+COPY (SELECT 42::INT a, 43::INT c) TO '__TEST_DIR__/evolution_1.parquet' (FORMAT PARQUET);
+
+statement ok
+COPY (SELECT 88::INT b, 84::INT a) TO '__TEST_DIR__/evolution_2.parquet' (FORMAT PARQUET);
+
+query I
+SELECT a FROM '__TEST_DIR__/evolution_*.parquet' ORDER BY a
+----
+42
+84
+
+query I
+SELECT a FROM parquet_scan(['__TEST_DIR__/evolution_2.parquet', '__TEST_DIR__/evolution_1.parquet', '__TEST_DIR__/evolution_*.parquet']) ORDER BY a
+----
+42
+42
+84
+84
+
+# reading either b or c results in an error, since the name is not present in both files
+statement error
+SELECT b FROM '__TEST_DIR__/evolution_*.parquet' ORDER BY 1
+
+statement error
+SELECT c FROM '__TEST_DIR__/evolution_*.parquet' ORDER BY 1
+
+# we can also do this with COPY
+statement ok
+CREATE TABLE copy_test(a INT, b INT);
+
+# if we copy from both files, we run into a schema mismatch in the files themselves (name differences)
+statement error
+COPY copy_test FROM '__TEST_DIR__/evolution_*.parquet'
+
+# copying from one file works, however
+statement ok
+COPY copy_test FROM '__TEST_DIR__/evolution_1.parquet'
+
+statement ok
+DROP TABLE copy_test
+
+# test type promotion
+statement ok
+COPY (SELECT 42::INT a, 43::INT b) TO '__TEST_DIR__/evolution_1.parquet' (FORMAT PARQUET);
+
+statement ok
+COPY (SELECT 'hello'::VARCHAR b, 84::TINYINT a) TO '__TEST_DIR__/evolution_2.parquet' (FORMAT PARQUET);
+
+query I
+SELECT a FROM '__TEST_DIR__/evolution_*.parquet' ORDER BY 1
+----
+42
+84
+
+# reading either b results in an error, however, since we can't cast from 'hello' to integer
+statement error
+SELECT b FROM parquet_scan(['__TEST_DIR__/evolution_1.parquet', '__TEST_DIR__/evolution_2.parquet']) ORDER BY 1
+
+# if we flip the order of the reads we can read b
+query I
+SELECT b FROM parquet_scan(['__TEST_DIR__/evolution_2.parquet', '__TEST_DIR__/evolution_1.parquet']) ORDER BY 1
+----
+43
+hello
+
+# type promotion, but with lists
+statement ok
+COPY (SELECT [42::INT] a, [43::INT] b) TO '__TEST_DIR__/evolution_1.parquet' (FORMAT PARQUET);
+
+statement ok
+COPY (SELECT ['hello'::VARCHAR] b, [84::TINYINT] a) TO '__TEST_DIR__/evolution_2.parquet' (FORMAT PARQUET);
+
+query I
+SELECT a FROM '__TEST_DIR__/evolution_*.parquet' ORDER BY 1
+----
+[42]
+[84]
+
+# reading either b results in an error, however, since we can't cast from 'hello' to integer
+statement error
+SELECT b FROM parquet_scan(['__TEST_DIR__/evolution_1.parquet', '__TEST_DIR__/evolution_2.parquet']) ORDER BY 1
+
+# if we flip the order of the reads we can read b
+query I
+SELECT b FROM parquet_scan(['__TEST_DIR__/evolution_2.parquet', '__TEST_DIR__/evolution_1.parquet']) ORDER BY 1
+----
+[43]
+[hello]
+
+# type promotion & skipping
+statement ok
+COPY (SELECT range id, 1::INT a FROM range(10000) UNION ALL SELECT 10000+range id, 2::INT FROM range(10000)) TO '__TEST_DIR__/evolution_1.parquet' (FORMAT PARQUET);
+
+statement ok
+COPY (SELECT (20000+range)::BIGINT id, 'hello'::VARCHAR b, 3::BIGINT a FROM range(10000) UNION ALL SELECT (30000+range)::BIGINT id, 'world'::VARCHAR, 4 FROM range(10000)) TO '__TEST_DIR__/evolution_2.parquet' (FORMAT PARQUET);
+
+query I
+SELECT COUNT(*) FROM '__TEST_DIR__/evolution_*.parquet' WHERE a=2
+----
+10000
+
+query I
+SELECT COUNT(*) FROM '__TEST_DIR__/evolution_*.parquet' WHERE a>=2
+----
+30000
+
+query II
+SELECT id, a FROM '__TEST_DIR__/evolution_*.parquet' WHERE id=2
+----
+2	1
+
+query II
+SELECT id, a FROM '__TEST_DIR__/evolution_*.parquet' WHERE id=27777
+----
+27777	3
+
+query II
+SELECT id, a FROM '__TEST_DIR__/evolution_*.parquet' WHERE id>=39998 ORDER BY id
+----
+39998	4
+39999	4
+
+statement ok
+PRAGMA threads=1
+
+endloop
diff --git a/test/sql/copy/parquet/tpch_parquet_copy_cast.test_slow b/test/sql/copy/parquet/tpch_parquet_copy_cast.test_slow
new file mode 100644
index 000000000000..fe327936c0c1
--- /dev/null
+++ b/test/sql/copy/parquet/tpch_parquet_copy_cast.test_slow
@@ -0,0 +1,50 @@
+# name: test/sql/copy/parquet/tpch_parquet_copy_cast.test_slow
+# description: Test auto-casting to table types in COPY from parquet file
+# group: [parquet]
+
+require parquet
+
+require tpch
+
+statement ok
+CREATE SCHEMA tpch
+
+statement ok
+CALL dbgen(sf=0.01, schema='tpch');
+
+statement ok
+COPY (
+	SELECT
+		l_orderkey::UBIGINT l_orderkey,
+		l_partkey::BIGINT l_partkey,
+		l_suppkey::SMALLINT l_suppkey,
+		l_linenumber::UINTEGER,
+		l_quantity::SMALLINT l_quantity,
+		l_extendedprice::DECIMAL(18,4) l_extendedprice,
+		l_discount::DECIMAL(8,3) l_discount,
+		l_tax::DECIMAL(38,4) l_tax,
+		l_returnflag,
+		l_linestatus,
+		l_shipdate::TIMESTAMP l_shipdate,
+		l_commitdate::TIMESTAMP l_commitdate,
+		l_receiptdate::VARCHAR l_receiptdate,
+		l_shipinstruct,
+		l_shipmode,
+		l_comment FROM tpch.lineitem
+) TO '__TEST_DIR__/lineitem_different_types.parquet' (FORMAT PARQUET);
+
+statement ok
+CREATE TABLE lineitem AS SELECT * FROM tpch.lineitem LIMIT 0;
+
+statement ok
+COPY lineitem FROM '__TEST_DIR__/lineitem_different_types.parquet'
+
+query I
+PRAGMA tpch(1)
+----
+<FILE>:extension/tpch/dbgen/answers/sf0.01/q01.csv
+
+query I
+PRAGMA tpch(6)
+----
+<FILE>:extension/tpch/dbgen/answers/sf0.01/q06.csv
diff --git a/test/sql/copy/parquet/tpch_parquet_schema_evolution.test_slow b/test/sql/copy/parquet/tpch_parquet_schema_evolution.test_slow
new file mode 100644
index 000000000000..734ab3eb67f9
--- /dev/null
+++ b/test/sql/copy/parquet/tpch_parquet_schema_evolution.test_slow
@@ -0,0 +1,66 @@
+# name: test/sql/copy/parquet/tpch_parquet_schema_evolution.test_slow
+# description: Test more complex type evolution on TPC-H schema
+# group: [parquet]
+
+require parquet
+
+require tpch
+
+statement ok
+CREATE SCHEMA tpch
+
+statement ok
+CALL dbgen(sf=0.01, schema='tpch');
+
+# original schema, minus some unnecessary columns
+statement ok
+COPY (
+	SELECT
+	l_shipdate,
+	l_discount,
+	l_linenumber,
+	l_tax,
+	l_extendedprice,
+	l_shipinstruct,
+	l_commitdate,
+	l_linestatus,
+	l_returnflag,
+	l_quantity,
+	l_orderkey,
+	l_shipmode FROM tpch.lineitem LIMIT 30000
+) TO '__TEST_DIR__/schema_evolution_lineitem1.parquet' (FORMAT PARQUET);
+
+# complete schema, with casts
+statement ok
+COPY (
+	SELECT
+	l_comment,
+	l_shipmode,
+	l_commitdate::TIMESTAMP l_commitdate,
+	l_shipinstruct,
+	l_quantity::SMALLINT l_quantity,
+	l_suppkey::BIGINT l_suppkey,
+	l_linenumber,
+	l_linestatus,
+	l_receiptdate::VARCHAR l_receiptdate,
+	l_returnflag,
+	l_extendedprice::DECIMAL(18,4) l_extendedprice,
+	l_partkey::BIGINT l_partkey,
+	l_orderkey::HUGEINT l_orderkey,
+	l_discount::DECIMAL(8,3) l_discount,
+	l_shipdate::TIMESTAMP l_shipdate,
+	l_tax FROM tpch.lineitem OFFSET 30000
+) TO '__TEST_DIR__/schema_evolution_lineitem2.parquet' (FORMAT PARQUET);
+
+statement ok
+CREATE VIEW lineitem AS SELECT * FROM '__TEST_DIR__/schema_evolution_lineitem*.parquet'
+
+query I
+PRAGMA tpch(1)
+----
+<FILE>:extension/tpch/dbgen/answers/sf0.01/q01.csv
+
+query I
+PRAGMA tpch(6)
+----
+<FILE>:extension/tpch/dbgen/answers/sf0.01/q06.csv
