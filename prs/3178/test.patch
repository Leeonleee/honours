diff --git a/test/issues/general/test_2416.test b/test/issues/general/test_2416.test
index e8558b55e4b5..c6a596291c5f 100644
--- a/test/issues/general/test_2416.test
+++ b/test/issues/general/test_2416.test
@@ -21,17 +21,22 @@ select list_extract([1, 2, 3], NULL);
 NULL
 
 query I
-SELECT list_extract([1, 2, 3], 1)
+SELECT list_extract([1, 2, 3], 2)
 ----
 2
 
+query I
+SELECT list_extract([1, 2, 3], 1)
+----
+1
+
 statement ok
 PREPARE v1 AS SELECT list_extract($1::int[], 1)
 
 query I
 EXECUTE v1([1, 2, 3])
 ----
-2
+1
 
 query I
 EXECUTE v1(NULL)
@@ -42,7 +47,7 @@ statement ok
 PREPARE v2 AS SELECT list_extract([1, 2, 3], $1)
 
 query I
-EXECUTE v2(1)
+EXECUTE v2(2)
 ----
 2
 
@@ -57,7 +62,7 @@ create macro extract_field(my_struct, my_field) as my_struct[my_field];
 query I
 SELECT extract_field([1, 2, 3], 1)
 ----
-2
+1
 
 # the same but with array_length
 query I
@@ -93,14 +98,14 @@ statement ok
 CREATE MACRO my_extract(my_nested_type, index_or_field) AS my_nested_type[index_or_field]
 
 query T
-SELECT my_extract('1234', 1)
+SELECT my_extract('1234', 2)
 ----
 2
 
 query T
 SELECT my_extract([1, 2, 3, 4], 2)
 ----
-3
+2
 
 query T
 SELECT my_extract({a: 1, b: 2, c: 3, d: 4}, 'd')
@@ -108,7 +113,7 @@ SELECT my_extract({a: 1, b: 2, c: 3, d: 4}, 'd')
 4
 
 statement ok
-CREATE MACRO my_list_or_string_extract_2(my_list_or_string) AS my_list_or_string[2]
+CREATE MACRO my_list_or_string_extract_2(my_list_or_string) AS my_list_or_string[3]
 
 query T
 SELECT my_list_or_string_extract_2('1234')
@@ -161,7 +166,7 @@ CREATE MACRO my_specific_list_extract(index) AS list_value(1, 2, 3, 4)[index]
 query T
 SELECT my_specific_list_extract(2)
 ----
-3
+2
 
 statement error
 SELECT my_specific_list_extract('c')
@@ -172,7 +177,7 @@ CREATE MACRO my_specific_string_extract(index) AS '1234'[index]
 query T
 SELECT my_specific_string_extract(2)
 ----
-3
+2
 
 statement error
 SELECT my_specific_string_extract('c')
diff --git a/test/sql/aggregate/aggregates/test_list_aggregate.test b/test/sql/aggregate/aggregates/test_list_aggregate.test
index da7d5154becc..f3a915706fb0 100644
--- a/test/sql/aggregate/aggregates/test_list_aggregate.test
+++ b/test/sql/aggregate/aggregates/test_list_aggregate.test
@@ -16,21 +16,21 @@ statement ok
 INSERT INTO list_extract_test VALUES (1, 1), (2, 1), (3, 2), (NULL, 3), (42, 3);
 
 query I
-SELECT LIST_EXTRACT(LIST(i), 0) FROM list_extract_test GROUP BY g;
+SELECT LIST_EXTRACT(LIST(i), 1) FROM list_extract_test GROUP BY g;
 ----
 1
 3
 NULL
 
 query I
-SELECT LIST_EXTRACT(LIST(i), 1) FROM list_extract_test GROUP BY g;
+SELECT LIST_EXTRACT(LIST(i), 2) FROM list_extract_test GROUP BY g;
 ----
 2
 NULL
 42
 
 query I
-SELECT LIST_EXTRACT(LIST(i), 2) FROM list_extract_test GROUP BY g;
+SELECT LIST_EXTRACT(LIST(i), 3) FROM list_extract_test GROUP BY g;
 ----
 NULL
 NULL
diff --git a/test/sql/copy/parquet/parquet_2267.test b/test/sql/copy/parquet/parquet_2267.test
index d5d09c5de92f..cc477181c136 100644
--- a/test/sql/copy/parquet/parquet_2267.test
+++ b/test/sql/copy/parquet/parquet_2267.test
@@ -10,6 +10,6 @@ SELECT * FROM parquet_scan('data/parquet-testing/bug2267.parquet')
 [{'disabledPlans': [bea4c11e-220a-4e6d-8eb8-8ea15d019f90], 'skuId': c7df2760-2c81-4ef7-b578-5b5392b571df}, {'disabledPlans': [8a256a2b-b617-496d-b51b-e76466e88db0, 41781fb2-bc02-4b7c-bd55-b576c07bb09d, eec0eb4f-6444-4f95-aba0-50c24d67f998], 'skuId': 84a661c4-e949-4bd2-a560-ed7766fcaf2b}, {'disabledPlans': [], 'skuId': b05e124f-c7cc-45a0-a6aa-8cf78c946968}, {'disabledPlans': [], 'skuId': f30db892-07e9-47e9-837c-80727f46fd3d}]
 
 query I
-SELECT assignedLicenses[0] FROM parquet_scan('data/parquet-testing/bug2267.parquet')
+SELECT assignedLicenses[1] FROM parquet_scan('data/parquet-testing/bug2267.parquet')
 ----
 {'disabledPlans': [bea4c11e-220a-4e6d-8eb8-8ea15d019f90], 'skuId': c7df2760-2c81-4ef7-b578-5b5392b571df}
diff --git a/test/sql/cte/recursive_array_slice.test b/test/sql/cte/recursive_array_slice.test
index 6b60c80c0256..2d6deb18274f 100644
--- a/test/sql/cte/recursive_array_slice.test
+++ b/test/sql/cte/recursive_array_slice.test
@@ -65,9 +65,9 @@ WITH RECURSIVE t(arr) AS
 (
   SELECT array[1,2,3,4,5,6]
     UNION ALL
-  SELECT  arr[arr[0]:6]
+  SELECT  arr[arr[1]+1:6]
   FROM   t
-  WHERE arr[0] < 6
+  WHERE arr[1] < 6
 ) SELECT * FROM t;
 ----
 [1, 2, 3, 4, 5, 6]
diff --git a/test/sql/function/string/test_array_extract.test b/test/sql/function/string/test_array_extract.test
index b9252699aa9d..526842520151 100644
--- a/test/sql/function/string/test_array_extract.test
+++ b/test/sql/function/string/test_array_extract.test
@@ -9,18 +9,18 @@ statement ok
 CREATE TABLE strings(s VARCHAR, off INTEGER);
 
 statement ok
-INSERT INTO strings VALUES ('hello', 0), ('world', 1), ('b', 0), (NULL, 1)
+INSERT INTO strings VALUES ('hello', 1), ('world', 2), ('b', 1), (NULL, 2)
 
 # test zero length
 query TT
-SELECT array_extract('🦆ab', 3), array_extract('abc', 3)
+SELECT array_extract('🦆ab', 4), array_extract('abc', 4)
 ----
 (empty)	(empty)
 
 # constant offset/length
 # normal array_extract
 query T
-SELECT array_extract(s, 1) FROM strings
+SELECT array_extract(s, 2) FROM strings
 ----
 e
 o
@@ -29,7 +29,7 @@ NULL
 
 # array_extract out of range
 query T
-SELECT array_extract(s, 2) FROM strings
+SELECT array_extract(s, 3) FROM strings
 ----
 l
 r
@@ -46,7 +46,7 @@ b
 NULL
 
 query T
-SELECT array_extract(s, 1) FROM strings
+SELECT array_extract(s, 2) FROM strings
 ----
 e
 o
@@ -113,7 +113,7 @@ NULL
 
 # zero offset
 query T
-SELECT array_extract(s, 0) FROM strings
+SELECT array_extract(s, 1) FROM strings
 ----
 h
 w
@@ -122,7 +122,7 @@ NULL
 
 # length 0
 query T
-SELECT array_extract(s, 5) FROM strings
+SELECT array_extract(s, 6) FROM strings
 ----
 (empty)
 (empty)
diff --git a/test/sql/function/string/test_string_array_slice.test b/test/sql/function/string/test_string_array_slice.test
index d965b5a8b595..38c1f89b36fc 100644
--- a/test/sql/function/string/test_string_array_slice.test
+++ b/test/sql/function/string/test_string_array_slice.test
@@ -46,10 +46,18 @@ wo
 b
 NULL
 
-# index out of range
 query T
 SELECT array_slice(s, 1, 3) FROM strings
 ----
+hel
+wor
+b
+NULL
+
+# index out of range
+query T
+SELECT array_slice(s, 2, 3) FROM strings
+----
 el
 or
 (empty)
@@ -60,7 +68,7 @@ query T
 SELECT array_slice(s, off, length+off) FROM strings
 ----
 he
-orl
+worl
 b
 NULL
 
@@ -68,7 +76,7 @@ query T
 SELECT array_slice(s, off, 2+off) FROM strings
 ----
 he
-or
+wor
 b
 NULL
 
@@ -84,9 +92,9 @@ query T
 SELECT array_slice('hello', off, length+off) FROM strings
 ----
 he
-ell
+hell
 h
-el
+hel
 
 # test substrings with constant nulls in different places
 query T
@@ -106,7 +114,7 @@ hello
 hello
 
 query T
-SELECT array_slice('hello', off, NULL+off) FROM strings
+SELECT array_slice('hello', off+1, NULL+off) FROM strings
 ----
 hello
 ello
@@ -154,7 +162,7 @@ ld
 NULL
 NULL
 
-# negative length
+# length 1
 query T
 SELECT array_slice(s, 0, 1) FROM strings
 ----
@@ -174,7 +182,7 @@ NULL
 
 # length 0
 query T
-SELECT array_slice(s, 1, 1) FROM strings
+SELECT array_slice(s, 1, 0) FROM strings
 ----
 (empty)
 (empty)
@@ -183,7 +191,7 @@ NULL
 
 # no end
 query T
-SELECT array_slice(s, 1, NULL) FROM strings
+SELECT array_slice(s, 2, NULL) FROM strings
 ----
 ello
 orld
diff --git a/test/sql/function/string/test_string_slice.test b/test/sql/function/string/test_string_slice.test
index 3d21ab2f026e..d44be8fc34da 100644
--- a/test/sql/function/string/test_string_slice.test
+++ b/test/sql/function/string/test_string_slice.test
@@ -43,11 +43,16 @@ SELECT '🦆ab'[0:0], 'abc'[0:0]
 query I
 SELECT '🤦🏼‍♂️ L🤦🏼‍♂️R 🤦🏼‍♂️'[2:5]
 ----
-L🤦🏼‍♂️R
+ L🤦🏼‍♂️R
 
 query I
 SELECT 'S̈a'[1:2]
 ----
+S̈a
+
+query I
+SELECT 'S̈a'[2:2]
+----
 a
 
 query I
@@ -56,7 +61,7 @@ SELECT 'MotörHead'[:5]
 Motör
 
 query I
-SELECT 'Z͑ͫ̓ͪ̂ͫ̽͏̴̙̤̞͉͚̯̞̠͍A̴̵̜̰͔ͫ͗͢'[1:]
+SELECT 'Z͑ͫ̓ͪ̂ͫ̽͏̴̙̤̞͉͚̯̞̠͍A̴̵̜̰͔ͫ͗͢'[2:]
 ----
 A̴̵̜̰͔ͫ͗͢
 
@@ -74,6 +79,14 @@ NULL
 query T
 SELECT s[1:3] FROM strings
 ----
+hel
+wor
+b
+NULL
+
+query T
+SELECT s[2:3] FROM strings
+----
 el
 or
 (empty)
@@ -84,7 +97,7 @@ query T
 SELECT s[off:length+off] FROM strings
 ----
 he
-orl
+worl
 b
 NULL
 
@@ -92,7 +105,7 @@ query T
 SELECT s[off:2+off] FROM strings
 ----
 he
-or
+wor
 b
 NULL
 
@@ -108,9 +121,9 @@ query T
 SELECT 'hello'[off:length+off] FROM strings
 ----
 he
-ell
+hell
 h
-el
+hel
 
 # test substrings with constant nulls in different places
 query T
@@ -133,6 +146,14 @@ query T
 SELECT 'hello'[off:NULL+off] FROM strings
 ----
 hello
+hello
+hello
+hello
+
+query T
+SELECT 'hello'[off+1:NULL+off] FROM strings
+----
+hello
 ello
 hello
 ello
@@ -178,7 +199,7 @@ ld
 NULL
 NULL
 
-# negative length
+# length 1
 query T
 SELECT s[0:1] FROM strings
 ----
@@ -198,7 +219,7 @@ NULL
 
 # length 0
 query T
-SELECT s[1:1] FROM strings
+SELECT s[1:0] FROM strings
 ----
 (empty)
 (empty)
@@ -207,7 +228,7 @@ NULL
 
 # no end
 query T
-SELECT s[1:] FROM strings
+SELECT s[2:] FROM strings
 ----
 ello
 orld
diff --git a/test/sql/function/string/test_subscript.test b/test/sql/function/string/test_subscript.test
index da54ed9b9248..1c9cb5cbfa44 100644
--- a/test/sql/function/string/test_subscript.test
+++ b/test/sql/function/string/test_subscript.test
@@ -9,39 +9,39 @@ statement ok
 CREATE TABLE strings(s VARCHAR, off INTEGER);
 
 statement ok
-INSERT INTO strings VALUES ('hello', 0), ('world', 1), ('b', 0), (NULL, 1)
+INSERT INTO strings VALUES ('hello', 1), ('world', 2), ('b', 1), (NULL, 2)
 
 # test direct subscript
 query TT
-SELECT '🦆ab'[0], 'abc'[1]
+SELECT '🦆ab'[1], 'abc'[2]
 ----
 🦆	b
 
 # test grapheme clusters
 query I
-SELECT '🤦🏼‍♂️ L🤦🏼‍♂️R 🤦🏼‍♂️'[3]
+SELECT '🤦🏼‍♂️ L🤦🏼‍♂️R 🤦🏼‍♂️'[4]
 ----
 🤦🏼‍♂️
 
 query I
 SELECT 'S̈a'[1]
 ----
-a
+S̈
 
 query I
-SELECT 'MotörHead'[3]
+SELECT 'MotörHead'[4]
 ----
 ö
 
 query I
-SELECT 'Z͑ͫ̓ͪ̂ͫ̽͏̴̙̤̞͉͚̯̞̠͍A̴̵̜̰͔ͫ͗͢'[1]
+SELECT 'Z͑ͫ̓ͪ̂ͫ̽͏̴̙̤̞͉͚̯̞̠͍A̴̵̜̰͔ͫ͗͢'[2]
 ----
 A̴̵̜̰͔ͫ͗͢
 
 # constant offset/length
 # normal array_extract
 query T
-SELECT s[1] FROM strings
+SELECT s[2] FROM strings
 ----
 e
 o
@@ -50,7 +50,7 @@ NULL
 
 # array_extract out of range
 query T
-SELECT s[2] FROM strings
+SELECT s[3] FROM strings
 ----
 l
 r
@@ -67,7 +67,7 @@ b
 NULL
 
 query T
-SELECT s[1] FROM strings
+SELECT s[2] FROM strings
 ----
 e
 o
@@ -114,7 +114,7 @@ NULL
 
 # zero offset
 query T
-SELECT s[0] FROM strings
+SELECT s[1] FROM strings
 ----
 h
 w
@@ -123,7 +123,7 @@ NULL
 
 # length 0
 query T
-SELECT s[5] FROM strings
+SELECT s[6] FROM strings
 ----
 (empty)
 (empty)
diff --git a/test/sql/pg_catalog/sqlalchemy.test b/test/sql/pg_catalog/sqlalchemy.test
index ed4f22754092..35d568cc3ae2 100644
--- a/test/sql/pg_catalog/sqlalchemy.test
+++ b/test/sql/pg_catalog/sqlalchemy.test
@@ -148,7 +148,7 @@ seq
 
 # get_view_definition
 query I
-SELECT string_split_regex(pg_get_viewdef(c.oid), '
')[0] view_def FROM pg_class c
+SELECT string_split_regex(pg_get_viewdef(c.oid), '
')[1] view_def FROM pg_class c
 JOIN pg_namespace n ON n.oid = c.relnamespace
 WHERE n.nspname = 'myschema' AND c.relname = 'v1'
 AND c.relkind IN ('v', 'm')
diff --git a/test/sql/storage/partial_blocks/many_columns_lists.test_coverage b/test/sql/storage/partial_blocks/many_columns_lists.test_coverage
index b73162dede6b..2048e2521e54 100644
--- a/test/sql/storage/partial_blocks/many_columns_lists.test_coverage
+++ b/test/sql/storage/partial_blocks/many_columns_lists.test_coverage
@@ -31,13 +31,13 @@ true
 loop i 0 100
 
 query III
-SELECT i${i}[0]=${i}, i${i}[1]=${i}, i${i}[2]=${i} FROM lists
+SELECT i${i}[1]=${i}, i${i}[2]=${i}, i${i}[3]=${i} FROM lists
 ----
 true	NULL	true
 false	NULL	false
 
 query III
-SELECT i${i}[0]=${i}+1, i${i}[1]=${i}+1, i${i}[2]=${i}+1 FROM lists
+SELECT i${i}[1]=${i}+1, i${i}[2]=${i}+1, i${i}[3]=${i}+1 FROM lists
 ----
 false	NULL	false
 true	NULL	true
@@ -49,13 +49,13 @@ restart
 loop i 0 100
 
 query III
-SELECT i${i}[0]=${i}, i${i}[1]=${i}, i${i}[2]=${i} FROM lists
+SELECT i${i}[1]=${i}, i${i}[2]=${i}, i${i}[3]=${i} FROM lists
 ----
 true	NULL	true
 false	NULL	false
 
 query III
-SELECT i${i}[0]=${i}+1, i${i}[1]=${i}+1, i${i}[2]=${i}+1 FROM lists
+SELECT i${i}[1]=${i}+1, i${i}[2]=${i}+1, i${i}[3]=${i}+1 FROM lists
 ----
 false	NULL	false
 true	NULL	true
diff --git a/test/sql/storage/types/list/persistent_list_storage.test b/test/sql/storage/types/list/persistent_list_storage.test
index 9cb7fe202ce1..add699edcfcc 100644
--- a/test/sql/storage/types/list/persistent_list_storage.test
+++ b/test/sql/storage/types/list/persistent_list_storage.test
@@ -37,7 +37,7 @@ NULL
 # delete
 
 query I
-DELETE FROM a WHERE b[0]=1
+DELETE FROM a WHERE b[1]=1
 ----
 1
 
@@ -83,7 +83,7 @@ NULL
 [[NULL, 6], NULL, [1, 2, NULL]]
 
 query I
-DELETE FROM b WHERE b[0][0]=1
+DELETE FROM b WHERE b[1][1]=1
 ----
 1
 
diff --git a/test/sql/subquery/scalar/test_unnest_subquery.test b/test/sql/subquery/scalar/test_unnest_subquery.test
index 735e47eadb4a..d6ff3e20f451 100644
--- a/test/sql/subquery/scalar/test_unnest_subquery.test
+++ b/test/sql/subquery/scalar/test_unnest_subquery.test
@@ -109,6 +109,6 @@ NULL
 
 # double correlated subqueries
 query I
-SELECT (SELECT 1+i[0]=ANY(SELECT UNNEST(i))) FROM (VALUES ([1, 2, 3])) tbl(i);
+SELECT (SELECT 1+i[1]=ANY(SELECT UNNEST(i))) FROM (VALUES ([1, 2, 3])) tbl(i);
 ----
 true
diff --git a/test/sql/types/list/large_nested_lists.test_coverage b/test/sql/types/list/large_nested_lists.test_coverage
index 0102dceb77fb..bfb0afead4d5 100644
--- a/test/sql/types/list/large_nested_lists.test_coverage
+++ b/test/sql/types/list/large_nested_lists.test_coverage
@@ -27,7 +27,7 @@ statement ok
 CREATE TABLE c AS SELECT case when i < 100000 then 'a' else 'b' end g, [LIST(case when i %2 = 0 then null else i end)] l FROM range(200000) tbl(i) GROUP BY g
 
 query IIIII
-SELECT g, COUNT(*), MIN(i), MAX(i), COUNT(i) FROM (SELECT g, UNNEST(l[0]) FROM c) tbl(g, i) GROUP BY g ORDER BY g
+SELECT g, COUNT(*), MIN(i), MAX(i), COUNT(i) FROM (SELECT g, UNNEST(l[1]) FROM c) tbl(g, i) GROUP BY g ORDER BY g
 ----
 a	100000	1	99999	50000
 b	100000	100001	199999	50000
@@ -37,7 +37,7 @@ statement ok
 CREATE TABLE d AS SELECT case when i < 100000 then 'a' else 'b' end g, [LIST(i), LIST(i + 1), LIST(i + 2), LIST(i + 3)] l FROM range(200000) tbl(i) GROUP BY g
 
 query IIIIIIIIII
-SELECT g, COUNT(*), MIN(i1), MAX(i1), MIN(i2), MAX(i2), MIN(i3), MAX(i3), MIN(i4), MAX(i4) FROM (SELECT g, UNNEST(l[0]) i1, UNNEST(l[1]) i2, UNNEST(l[2]) i3, UNNEST(l[3]) i4 FROM d) tbl GROUP BY g ORDER BY g
+SELECT g, COUNT(*), MIN(i1), MAX(i1), MIN(i2), MAX(i2), MIN(i3), MAX(i3), MIN(i4), MAX(i4) FROM (SELECT g, UNNEST(l[1]) i1, UNNEST(l[2]) i2, UNNEST(l[3]) i3, UNNEST(l[4]) i4 FROM d) tbl GROUP BY g ORDER BY g
 ----
 a	100000	0	99999	1	100000	2	100001	3	100002
 b	100000	100000	199999	100001	200000	100002	200001	100003	200002
diff --git a/test/sql/types/list/list_extract_struct.test b/test/sql/types/list/list_extract_struct.test
index d36c015cb10a..a823aa7d29fc 100644
--- a/test/sql/types/list/list_extract_struct.test
+++ b/test/sql/types/list/list_extract_struct.test
@@ -17,17 +17,17 @@ SELECT * FROM a
 [{'a': 3, 'b': NULL}, NULL, {'a': NULL, 'b': hello}]
 
 query I
-SELECT l[0] FROM a
+SELECT l[1] FROM a
 ----
 {'a': 3, 'b': NULL}
 
 query I
-SELECT l[1] FROM a
+SELECT l[2] FROM a
 ----
 NULL
 
 query I
-SELECT l[2] FROM a
+SELECT l[3] FROM a
 ----
 {'a': NULL, 'b': hello}
 
@@ -48,31 +48,31 @@ SELECT * FROM nested
 [{'a': 3, 'b': {'x': 3, 'y': [1, 2, 3]}}, NULL, {'a': NULL, 'b': {'x': NULL, 'y': [4, 5]}}, {'a': 27, 'b': NULL}, {'a': NULL, 'b': {'x': 7, 'y': NULL}}]
 
 query I
-SELECT l[0] FROM nested
+SELECT l[1] FROM nested
 ----
 {'a': 3, 'b': {'x': 3, 'y': [1, 2, 3]}}
 
 query I
-SELECT l[1] FROM nested
+SELECT l[2] FROM nested
 ----
 NULL
 
 query I
-SELECT l[2] FROM nested
+SELECT l[3] FROM nested
 ----
 {'a': NULL, 'b': {'x': NULL, 'y': [4, 5]}}
 
 query I
-SELECT l[3] FROM nested
+SELECT l[4] FROM nested
 ----
 {'a': 27, 'b': NULL}
 
 query I
-SELECT l[4] FROM nested
+SELECT l[5] FROM nested
 ----
 {'a': NULL, 'b': {'x': 7, 'y': NULL}}
 
 query I
-SELECT l[4]['b'] FROM nested
+SELECT l[5]['b'] FROM nested
 ----
 {'x': 7, 'y': NULL}
diff --git a/test/sql/types/list/list_extract_types.test b/test/sql/types/list/list_extract_types.test
index 27791b82f972..0f0748a479cd 100644
--- a/test/sql/types/list/list_extract_types.test
+++ b/test/sql/types/list/list_extract_types.test
@@ -11,7 +11,7 @@ CREATE TABLE all_types AS SELECT * FROM test_all_types();
 foreach colname bool tinyint smallint int bigint hugeint utinyint usmallint uint ubigint date time timestamp timestamp_s timestamp_ms timestamp_ns time_tz timestamp_tz float double dec_4_1 dec_9_4 dec_18_6 dec38_10 uuid interval varchar blob small_enum medium_enum large_enum int_array varchar_array nested_int_array struct struct_of_arrays array_of_structs map
 
 statement ok
-CREATE TABLE a AS SELECT LIST_EXTRACT(["${colname}"], 0) col FROM all_types;
+CREATE TABLE a AS SELECT LIST_EXTRACT(["${colname}"], 1) col FROM all_types;
 
 query I
 SELECT COUNT(*) FROM a JOIN all_types ON (a.col=all_types."${colname}");
diff --git a/test/sql/types/list/list_index.test b/test/sql/types/list/list_index.test
index 238cadf05980..2f0faf31967b 100644
--- a/test/sql/types/list/list_index.test
+++ b/test/sql/types/list/list_index.test
@@ -98,7 +98,7 @@ statement ok
 INSERT INTO a VALUES (1, [7, 8, 9, 10, 11, 12, 13, 14, 15])
 
 query II
-SELECT * FROM a WHERE id=1 ORDER BY c[0] NULLS FIRST
+SELECT * FROM a WHERE id=1 ORDER BY c[1] NULLS FIRST
 ----
 1	NULL
 1	[NULL]
diff --git a/test/sql/types/list/list_indexing.test b/test/sql/types/list/list_indexing.test
new file mode 100644
index 000000000000..5d5a4e310cf2
--- /dev/null
+++ b/test/sql/types/list/list_indexing.test
@@ -0,0 +1,57 @@
+# name: test/sql/types/list/list_indexing.test
+# description: Test changes from 0-based indexing to 1-based indexing
+# group: [list]
+
+statement ok
+CREATE TABLE test (l INTEGER[]);
+
+statement ok
+INSERT INTO test VALUES ([1, 2, 3]), ([NULL]), (NULL), ([-2, NULL, 4, 2]);
+
+query I
+SELECT list_extract(l, 0) FROM test;
+----
+NULL
+NULL
+NULL
+NULL
+
+query I
+SELECT list_extract(l, 1) FROM test;
+----
+1
+NULL
+NULL
+-2
+
+query I
+SELECT l[:] FROM test;
+----
+[1, 2, 3]
+[NULL]
+NULL
+[-2, NULL, 4, 2]
+
+query I
+SELECT l[0:0] FROM test;
+----
+[]
+[]
+NULL
+[]
+
+query I
+SELECT l[0:1] FROM test;
+----
+[1]
+[NULL]
+NULL
+[-2]
+
+query I
+SELECT l[1:0] FROM test;
+----
+[]
+[]
+NULL
+[]
\ No newline at end of file
diff --git a/test/sql/types/list/list_stats.test b/test/sql/types/list/list_stats.test
index 243568d36fdf..19b90d6e32c3 100644
--- a/test/sql/types/list/list_stats.test
+++ b/test/sql/types/list/list_stats.test
@@ -76,12 +76,12 @@ CREATE TABLE lists AS SELECT [3, 4] l
 
 # list_extract always propagates a null
 query I
-SELECT STATS(l[0]) FROM lists LIMIT 1
+SELECT STATS(l[1]) FROM lists LIMIT 1
 ----
 <REGEX>:.*3.*4.*Has Null: true.*
 
 query I
-SELECT l[0] FROM lists
+SELECT l[1] FROM lists
 ----
 3
 
@@ -90,12 +90,12 @@ statement ok
 INSERT INTO lists VALUES ([])
 
 query I
-SELECT STATS(l[0]) FROM lists LIMIT 1
+SELECT STATS(l[1]) FROM lists LIMIT 1
 ----
 <REGEX>:.*3.*4.*Has Null: true.*
 
 query I
-SELECT l[0] FROM lists
+SELECT l[1] FROM lists
 ----
 3
 NULL
@@ -105,12 +105,12 @@ statement ok
 INSERT INTO lists VALUES (NULL)
 
 query I
-SELECT STATS(l[0]) FROM lists LIMIT 1
+SELECT STATS(l[1]) FROM lists LIMIT 1
 ----
 <REGEX>:.*3.*4.*Has Null: true.*
 
 query I
-SELECT l[0] FROM lists
+SELECT l[1] FROM lists
 ----
 3
 NULL
@@ -122,12 +122,12 @@ statement ok
 INSERT INTO lists VALUES ([NULL])
 
 query I
-SELECT STATS(l[0]) FROM lists LIMIT 1
+SELECT STATS(l[1]) FROM lists LIMIT 1
 ----
 <REGEX>:.*3.*4.*Has Null: true.*
 
 query I
-SELECT l[0] FROM lists
+SELECT l[1] FROM lists
 ----
 3
 NULL
diff --git a/test/sql/types/list/list_test_many_deletes.test b/test/sql/types/list/list_test_many_deletes.test
index ad56f9a37def..67d4d8806f96 100644
--- a/test/sql/types/list/list_test_many_deletes.test
+++ b/test/sql/types/list/list_test_many_deletes.test
@@ -9,7 +9,7 @@ statement ok
 INSERT INTO lists SELECT [i, NULL, i+1] FROM range(10000) tbl(i);
 
 statement ok
-DELETE FROM lists WHERE i[0] <= 9995
+DELETE FROM lists WHERE i[1] <= 9995
 
 query I
 SELECT * FROM lists
@@ -30,7 +30,7 @@ statement ok
 INSERT INTO lists SELECT [[i], NULL, [i+1, 4], [NULL, 1, 2]] FROM range(10000) tbl(i);
 
 statement ok
-DELETE FROM lists WHERE i[0][0] <= 9995
+DELETE FROM lists WHERE i[1][1] <= 9995
 
 query I
 SELECT * FROM lists
diff --git a/test/sql/types/list/list_updates.test b/test/sql/types/list/list_updates.test
index b3183614df4a..467a2f5dd3ca 100644
--- a/test/sql/types/list/list_updates.test
+++ b/test/sql/types/list/list_updates.test
@@ -18,7 +18,7 @@ SELECT * FROM a ORDER BY id
 
 # deletions
 query I
-DELETE FROM a WHERE b[0]=1
+DELETE FROM a WHERE b[1]=1
 ----
 1
 
diff --git a/test/sql/types/list/list_updates_varchar.test b/test/sql/types/list/list_updates_varchar.test
index 3fbb70228ef5..4e638dc51237 100644
--- a/test/sql/types/list/list_updates_varchar.test
+++ b/test/sql/types/list/list_updates_varchar.test
@@ -18,7 +18,7 @@ SELECT * FROM a ORDER BY id
 
 # deletions
 query I
-DELETE FROM a WHERE b[0][0]='3'
+DELETE FROM a WHERE b[1][1]='3'
 ----
 1
 
diff --git a/test/sql/types/list/many_lists.test b/test/sql/types/list/many_lists.test
index 5ae33103b6b6..5e695236ec37 100644
--- a/test/sql/types/list/many_lists.test
+++ b/test/sql/types/list/many_lists.test
@@ -54,6 +54,6 @@ SELECT COUNT(*) FROM t4
 5000
 
 query IIIII
-SELECT COUNT(k), MIN(k[0]), MAX(k[0]), MIN(k[1]), MAX(k[1]) FROM (SELECT UNNEST(l) FROM t4) tbl(k)
+SELECT COUNT(k), MIN(k[1]), MAX(k[1]), MIN(k[2]), MAX(k[2]) FROM (SELECT UNNEST(l) FROM t4) tbl(k)
 ----
 20000	0	19999	2	20001
diff --git a/test/sql/types/list/nested_list_extract.test b/test/sql/types/list/nested_list_extract.test
index 4e5ebc7a2ac1..06a4a8c8be74 100644
--- a/test/sql/types/list/nested_list_extract.test
+++ b/test/sql/types/list/nested_list_extract.test
@@ -18,33 +18,54 @@ SELECT * FROM a ORDER BY id
 
 # test nested list extract
 query II
-SELECT id, b[0] FROM a ORDER BY id
+SELECT id, b[1] FROM a ORDER BY id
 ----
 0	[1, 2]
 1	NULL
 2	[4, 5, 6, 7]
 
 query II
-SELECT id, b[0][0] FROM a ORDER BY id
+SELECT id, b[1][1] FROM a ORDER BY id
 ----
 0	1
 1	NULL
 2	4
 
 query II
-SELECT id, b[0][3] FROM a ORDER BY id
+SELECT id, b[0][0] FROM a ORDER BY id
+----
+0	NULL
+1	NULL
+2	NULL
+
+query II
+SELECT id, b[0][1] FROM a ORDER BY id
+----
+0	NULL
+1	NULL
+2	NULL
+
+query II
+SELECT id, b[1][0] FROM a ORDER BY id
+----
+0	NULL
+1	NULL
+2	NULL
+
+query II
+SELECT id, b[1][4] FROM a ORDER BY id
 ----
 0	NULL
 1	NULL
 2	7
 
 query II
-SELECT * FROM a WHERE b[0][0]=1
+SELECT * FROM a WHERE b[1][1]=1
 ----
 0	[[1, 2], NULL, [3, NULL]]
 
 query II
-SELECT * FROM a WHERE b[0][0]=1 OR b[0][1]=2
+SELECT * FROM a WHERE b[1][1]=1 OR b[1][2]=2
 ----
 0	[[1, 2], NULL, [3, NULL]]
 
@@ -63,35 +84,35 @@ SELECT * FROM nested ORDER BY id
 2	[[[6, 7, 8, 9], [10, 11], [12, 13]], NULL, [NULL, [10, 11], [12, 13]]]
 
 query II
-SELECT id, b[0] FROM nested ORDER BY id
+SELECT id, b[1] FROM nested ORDER BY id
 ----
 0	[[1, 2], [3, 4]]
 1	NULL
 2	[[6, 7, 8, 9], [10, 11], [12, 13]]
 
 query II
-SELECT id, b[0][0] FROM nested ORDER BY id
+SELECT id, b[1][1] FROM nested ORDER BY id
 ----
 0	[1, 2]
 1	NULL
 2	[6, 7, 8, 9]
 
 query II
-SELECT id, b[0][2] FROM nested ORDER BY id
+SELECT id, b[1][3] FROM nested ORDER BY id
 ----
 0	NULL
 1	NULL
 2	[12, 13]
 
 query II
-SELECT id, b[0][2][0] FROM nested ORDER BY id
+SELECT id, b[1][3][1] FROM nested ORDER BY id
 ----
 0	NULL
 1	NULL
 2	12
 
 query II
-SELECT id, b[0][2][3] FROM nested ORDER BY id
+SELECT id, b[1][3][4] FROM nested ORDER BY id
 ----
 0	NULL
 1	NULL
diff --git a/test/sql/types/list/nested_list_slice.test b/test/sql/types/list/nested_list_slice.test
index d2b39899f620..3dce6267c557 100644
--- a/test/sql/types/list/nested_list_slice.test
+++ b/test/sql/types/list/nested_list_slice.test
@@ -30,3 +30,38 @@ SELECT id, b[0:2] FROM a ORDER BY id
 0	[[1, 2], NULL]
 1	NULL
 2	[[4, 5, 6, 7], [NULL]]
+
+query II
+SELECT id, b[1:1] FROM a ORDER BY id
+----
+0	[[1, 2]]
+1	NULL
+2	[[4, 5, 6, 7]]
+
+query II
+SELECT id, b[1:2] FROM a ORDER BY id
+----
+0	[[1, 2], NULL]
+1	NULL
+2	[[4, 5, 6, 7], [NULL]]
+
+query II
+SELECT id, b[0:0] FROM a ORDER BY id
+----
+0	[]
+1	NULL
+2	[]
+
+query II
+SELECT id, b[:] FROM a ORDER BY id
+----
+0	[[1, 2], NULL, [3, NULL]]
+1	NULL
+2	[[4, 5, 6, 7], [NULL]]
+
+query II
+SELECT id, list_extract(b[:], 0) FROM a ORDER BY id
+----
+0	NULL
+1	NULL
+2	NULL
diff --git a/test/sql/types/nested/list/array.test b/test/sql/types/nested/list/array.test
index 96d80862f327..ada0b05acbdd 100644
--- a/test/sql/types/nested/list/array.test
+++ b/test/sql/types/nested/list/array.test
@@ -33,13 +33,13 @@ SELECT ARRAY[1, i] FROM range(3) tbl(i) ORDER BY i
 
 # use in WHERE clause
 query I
-SELECT ARRAY[i] FROM range(3) tbl(i) WHERE (ARRAY[i])[0] == 1
+SELECT ARRAY[i] FROM range(3) tbl(i) WHERE (ARRAY[i])[1] == 1
 ----
 [1]
 
 # conversion failure (mixed types)
 query I
-SELECT ARRAY[i, 'hello'] FROM range(3) tbl(i) WHERE (ARRAY[i])[0] == 1
+SELECT ARRAY[i, 'hello'] FROM range(3) tbl(i) WHERE (ARRAY[i])[1] == 1
 ----
 [1, hello]
 
diff --git a/test/sql/types/nested/list/list.test_slow b/test/sql/types/nested/list/list.test_slow
index 1059c17adf10..907cd7f41e64 100644
--- a/test/sql/types/nested/list/list.test_slow
+++ b/test/sql/types/nested/list/list.test_slow
@@ -9,6 +9,6 @@ statement ok
 CREATE TABLE test AS (SELECT range i, 0 as j FROM range(70000));
 
 query I
-SELECT list(i)[69999] FROM test GROUP BY j;
+SELECT list(i)[70000] FROM test GROUP BY j;
 ----
 69999
\ No newline at end of file
diff --git a/test/sql/types/nested/list/test_list_extract.test b/test/sql/types/nested/list/test_list_extract.test
index e228f9837b8c..b92fc25e1bda 100644
--- a/test/sql/types/nested/list/test_list_extract.test
+++ b/test/sql/types/nested/list/test_list_extract.test
@@ -6,22 +6,22 @@ statement ok
 PRAGMA enable_verification
 
 query I
-SELECT LIST_EXTRACT(NULL, 0)
+SELECT LIST_EXTRACT(NULL, 1)
 ----
 NULL
 
 query I
-SELECT LIST_EXTRACT(42, 0)
+SELECT LIST_EXTRACT(42, 1)
 ----
 4
 
 query I
-SELECT LIST_EXTRACT(LIST_VALUE(), 0)
+SELECT LIST_EXTRACT(LIST_VALUE(), 1)
 ----
 NULL
 
 query I
-SELECT LIST_EXTRACT(LIST_VALUE(NULL), 0)
+SELECT LIST_EXTRACT(LIST_VALUE(NULL), 1)
 ----
 NULL
 
@@ -36,18 +36,18 @@ SELECT LIST_EXTRACT(LIST_VALUE(42), NULL)
 NULL
 
 query I
-SELECT LIST_EXTRACT(LIST_VALUE(42), 0)
+SELECT LIST_EXTRACT(LIST_VALUE(42), 1)
 ----
 42
 
 # alias
 query I
-SELECT LIST_ELEMENT(LIST_VALUE(42), 0)
+SELECT LIST_ELEMENT(LIST_VALUE(42), 1)
 ----
 42
 
 query I
-SELECT LIST_EXTRACT(LIST_VALUE(42, 43), 1)
+SELECT LIST_EXTRACT(LIST_VALUE(42, 43), 2)
 ----
 43
 
@@ -72,88 +72,88 @@ SELECT LIST_EXTRACT(LIST_VALUE(42, 43, 44, 45), -5)
 NULL
 
 query I
-SELECT LIST_EXTRACT(LIST_VALUE(42), 1)
+SELECT LIST_EXTRACT(LIST_VALUE(42), 2)
 ----
 NULL
 
 # all them types woo
 
 query I
-SELECT LIST_EXTRACT(LIST_VALUE('Hello', 'World'), 0)
+SELECT LIST_EXTRACT(LIST_VALUE('Hello', 'World'), 1)
 ----
 Hello
 
 query I
-SELECT LIST_EXTRACT(LIST_VALUE('Hello', 'World'), 1)
+SELECT LIST_EXTRACT(LIST_VALUE('Hello', 'World'), 2)
 ----
 World
 
 query I
-SELECT LIST_EXTRACT(LIST_VALUE(42::UTINYINT), 0)
+SELECT LIST_EXTRACT(LIST_VALUE(42::UTINYINT), 1)
 ----
 42
 
 query I
-SELECT LIST_EXTRACT(LIST_VALUE(42::TINYINT), 0)
+SELECT LIST_EXTRACT(LIST_VALUE(42::TINYINT), 1)
 ----
 42
 
 query I
-SELECT LIST_EXTRACT(LIST_VALUE(42::USMALLINT), 0)
+SELECT LIST_EXTRACT(LIST_VALUE(42::USMALLINT), 1)
 ----
 42
 
 query I
-SELECT LIST_EXTRACT(LIST_VALUE(42::SMALLINT), 0)
+SELECT LIST_EXTRACT(LIST_VALUE(42::SMALLINT), 1)
 ----
 42
 
 query I
-SELECT LIST_EXTRACT(LIST_VALUE(42::UINTEGER), 0)
+SELECT LIST_EXTRACT(LIST_VALUE(42::UINTEGER), 1)
 ----
 42
 
 query I
-SELECT LIST_EXTRACT(LIST_VALUE(42::INTEGER), 0)
+SELECT LIST_EXTRACT(LIST_VALUE(42::INTEGER), 1)
 ----
 42
 
 query I
-SELECT LIST_EXTRACT(LIST_VALUE(42::UBIGINT), 0)
+SELECT LIST_EXTRACT(LIST_VALUE(42::UBIGINT), 1)
 ----
 42
 
 query I
-SELECT LIST_EXTRACT(LIST_VALUE(42::BIGINT), 0)
+SELECT LIST_EXTRACT(LIST_VALUE(42::BIGINT), 1)
 ----
 42
 
 query I
-SELECT LIST_EXTRACT(LIST_VALUE(42::HUGEINT), 0)
+SELECT LIST_EXTRACT(LIST_VALUE(42::HUGEINT), 1)
 ----
 42
 
 query I
-SELECT LIST_EXTRACT(LIST_VALUE(42::FLOAT), 0)
+SELECT LIST_EXTRACT(LIST_VALUE(42::FLOAT), 1)
 ----
 42
 
 query I
-SELECT LIST_EXTRACT(LIST_VALUE(42::DOUBLE), 0)
+SELECT LIST_EXTRACT(LIST_VALUE(42::DOUBLE), 1)
 ----
 42
 
 query I
-SELECT LIST_EXTRACT(LIST_VALUE('2019-11-26'::DATE), 0)
+SELECT LIST_EXTRACT(LIST_VALUE('2019-11-26'::DATE), 1)
 ----
 2019-11-26
 
 query I
-SELECT LIST_EXTRACT(LIST_VALUE('21:42:00'::TIME), 0)
+SELECT LIST_EXTRACT(LIST_VALUE('21:42:00'::TIME), 1)
 ----
 21:42:00
 
 query I
-SELECT LIST_EXTRACT(LIST_VALUE('2019-11-26 09:42:00'::TIMESTAMP), 0)
+SELECT LIST_EXTRACT(LIST_VALUE('2019-11-26 09:42:00'::TIMESTAMP), 1)
 ----
 2019-11-26 09:42:00
diff --git a/test/sql/types/nested/list/test_list_index.test b/test/sql/types/nested/list/test_list_index.test
index d7314ef5069f..50ead9d95485 100644
--- a/test/sql/types/nested/list/test_list_index.test
+++ b/test/sql/types/nested/list/test_list_index.test
@@ -6,12 +6,12 @@ statement ok
 PRAGMA enable_verification
 
 query I
-SELECT a[0] FROM (VALUES (LIST_VALUE())) tbl(a)
+SELECT a[1] FROM (VALUES (LIST_VALUE())) tbl(a)
 ----
 NULL
 
 query I
-SELECT a[0] FROM (VALUES (LIST_VALUE(NULL))) tbl(a)
+SELECT a[1] FROM (VALUES (LIST_VALUE(NULL))) tbl(a)
 ----
 NULL
 
@@ -26,37 +26,42 @@ SELECT a[NULL] FROM (VALUES (LIST_VALUE(42))) tbl(a)
 NULL
 
 query I
-SELECT a[0] FROM (VALUES (LIST_VALUE(42))) tbl(a)
+SELECT a[1] FROM (VALUES (LIST_VALUE(42))) tbl(a)
 ----
 42
 
 query I
-SELECT a[0+1-1] FROM (VALUES (LIST_VALUE(42))) tbl(a)
+SELECT a[1+1-1] FROM (VALUES (LIST_VALUE(42))) tbl(a)
 ----
 42
 
 query I
-SELECT a[b] FROM (VALUES (LIST_VALUE(42), 0)) tbl(a, b)
+SELECT a[b] FROM (VALUES (LIST_VALUE(42), 1)) tbl(a, b)
 ----
 42
 
 # doing it directly on the function does not require brackets
 query I
-SELECT (LIST_VALUE(42))[0]
+SELECT (LIST_VALUE(42))[1]
 ----
 42
 
 query I
-SELECT LIST_VALUE(42)[0]
+SELECT LIST_VALUE(42)[1]
 ----
 42
 
 # slicing
 query T
-SELECT a[1:] FROM (VALUES (LIST_VALUE(42, 43, 44))) tbl(a)
+SELECT a[2:] FROM (VALUES (LIST_VALUE(42, 43, 44))) tbl(a)
 ----
 [43, 44]
 
+query T
+SELECT a[1:] FROM (VALUES (LIST_VALUE(42, 43, 44))) tbl(a)
+----
+[42, 43, 44]
+
 query T
 SELECT a[:1] FROM (VALUES (LIST_VALUE(42, 43, 44))) tbl(a)
 ----
diff --git a/test/sql/types/nested/list/test_list_slice.test b/test/sql/types/nested/list/test_list_slice.test
index c21ed71044d9..ae5734cea075 100644
--- a/test/sql/types/nested/list/test_list_slice.test
+++ b/test/sql/types/nested/list/test_list_slice.test
@@ -17,10 +17,10 @@ CREATE TABLE listdata (
 
 statement ok
 INSERT INTO listdata VALUES
-    ('h', 'e', 'l', 'l', 'o', 0, 2),
-    ('w', 'o', 'r', 'l', 'd', 1, 3),
+    ('h', 'e', 'l', 'l', 'o', 1, 2),
+    ('w', 'o', 'r', 'l', 'd', 2, 3),
     ('b', NULL, NULL, NULL, NULL, 0, 1),
-    (NULL, NULL, NULL, NULL, NULL, 1, 2)
+    (NULL, NULL, NULL, NULL, NULL, 0, 2);
 
 statement ok
 CREATE VIEW lists AS
@@ -51,10 +51,10 @@ statement ok
 CREATE VIEW ducks AS SELECT LIST_VALUE(c0, c1, c2) AS d from duckdata;
 
 statement ok
-CREATE VIEW hello AS SELECT s AS hello FROM lists WHERE off = 0 AND length = 2
+CREATE VIEW hello AS SELECT s AS hello FROM lists WHERE off = 1 AND length = 2
 
 statement ok
-CREATE VIEW nulltable as SELECT s as n FROM lists WHERE off = 1 AND length = 2
+CREATE VIEW nulltable as SELECT s as n FROM lists WHERE off = 0 AND length = 2
 
 query T
 SELECT d from ducks
@@ -72,7 +72,7 @@ SELECT d[0:0] FROM ducks
 # constant offset/length
 # normal slice
 query T
-SELECT s[0:2] FROM lists
+SELECT s[1:2] FROM lists
 ----
 [h, e]
 [w, o]
@@ -83,25 +83,25 @@ NULL
 query T
 SELECT s[1:3] FROM lists
 ----
-[e, l]
-[o, r]
-[]
+[h, e, l]
+[w, o, r]
+[b]
 NULL
 
 # variable length offset/length
 query T
 SELECT s[off:length+off] FROM lists
 ----
-[h, e]
-[o, r, l]
+[h, e, l]
+[o, r, l, d]
 [b]
 NULL
 
 query T
 SELECT s[off:2+off] FROM lists
 ----
-[h, e]
-[o, r]
+[h, e, l]
+[o, r, l]
 [b]
 NULL
 
@@ -116,12 +116,11 @@ NULL
 query T
 SELECT hello[off:length+off] FROM lists, hello
 ----
-[h, e]
-[e, l, l]
+[h, e, l]
+[e, l, l, o]
 [h]
-[e, l]
+[h, e]
 
-# test substrings with constant nulls in different places
 query T
 SELECT n[off:length+off] FROM lists, nulltable
 ----
@@ -144,7 +143,7 @@ SELECT hello[off:NULL+off] FROM lists, hello
 [h, e, l, l, o]
 [e, l, l, o]
 [h, e, l, l, o]
-[e, l, l, o]
+[h, e, l, l, o]
 
 query T
 SELECT n[NULL:length+NULL] FROM lists, nulltable
@@ -187,7 +186,7 @@ SELECT s[-2:] FROM lists
 NULL
 NULL
 
-# negative length
+# length 1
 query T
 SELECT s[0:1] FROM lists
 ----
@@ -205,19 +204,27 @@ SELECT s[-4:-2] FROM lists
 NULL
 NULL
 
-# length 0
+# length 1
 query T
 SELECT s[1:1] FROM lists
 ----
-[]
-[]
-[]
+[h]
+[w]
+[b]
 NULL
 
 # no end
 query T
 SELECT s[1:] FROM lists
 ----
+[h, e, l, l, o]
+[w, o, r, l, d]
+[b]
+NULL
+
+query T
+SELECT s[2:] FROM lists
+----
 [e, l, l, o]
 [o, r, l, d]
 []
diff --git a/test/sql/window/test_list_window.test b/test/sql/window/test_list_window.test
index 582ce0a237b7..1428cf2e610f 100644
--- a/test/sql/window/test_list_window.test
+++ b/test/sql/window/test_list_window.test
@@ -28,21 +28,21 @@ SELECT * FROM list_window ORDER BY g
 3	[NULL, 42]
 
 query I
-SELECT FIRST(LIST_EXTRACT(l, 0)) FROM list_window GROUP BY g ORDER BY g;
+SELECT FIRST(LIST_EXTRACT(l, 1)) FROM list_window GROUP BY g ORDER BY g;
 ----
 1
 3
 NULL
 
 query I
-SELECT FIRST(LIST_EXTRACT(l, 1)) FROM list_window GROUP BY g ORDER BY g;
+SELECT FIRST(LIST_EXTRACT(l, 2)) FROM list_window GROUP BY g ORDER BY g;
 ----
 2
 NULL
 42
 
 query I
-SELECT FIRST(LIST_EXTRACT(l, 2)) FROM list_window GROUP BY g ORDER BY g;
+SELECT FIRST(LIST_EXTRACT(l, 3)) FROM list_window GROUP BY g ORDER BY g;
 ----
 NULL
 NULL
