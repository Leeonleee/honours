{
  "repo": "duckdb/duckdb",
  "pull_number": 3178,
  "instance_id": "duckdb__duckdb-3178",
  "issue_numbers": [
    "2575"
  ],
  "base_commit": "a7493fec044a3d652389039fc942a3d331cf2c16",
  "patch": "diff --git a/src/catalog/default/default_functions.cpp b/src/catalog/default/default_functions.cpp\nindex f6d574fb55c1..322bf0aa2e3d 100644\n--- a/src/catalog/default/default_functions.cpp\n+++ b/src/catalog/default/default_functions.cpp\n@@ -84,7 +84,7 @@ static DefaultMacro internal_macros[] = {\n \t{DEFAULT_SCHEMA, \"list_prepend\", {\"e\", \"l\", nullptr}, \"list_concat(list_value(e), l)\"},\n \t{DEFAULT_SCHEMA, \"array_prepend\", {\"el\", \"arr\", nullptr}, \"list_prepend(el, arr)\"},\n \t{DEFAULT_SCHEMA, \"array_pop_back\", {\"arr\", nullptr}, \"arr[:LEN(arr)-1]\"},\n-\t{DEFAULT_SCHEMA, \"array_pop_front\", {\"arr\", nullptr}, \"arr[1:]\"},\n+\t{DEFAULT_SCHEMA, \"array_pop_front\", {\"arr\", nullptr}, \"arr[2:]\"},\n \t{DEFAULT_SCHEMA, \"array_push_back\", {\"arr\", \"e\", nullptr}, \"list_concat(arr, list_value(e))\"},\n \t{DEFAULT_SCHEMA, \"array_push_front\", {\"arr\", \"e\", nullptr}, \"list_concat(list_value(e), arr)\"},\n \t{DEFAULT_SCHEMA, \"generate_subscripts\", {\"arr\", \"dim\", nullptr}, \"unnest(generate_series(1, array_length(arr, dim)))\"},\ndiff --git a/src/function/scalar/list/array_slice.cpp b/src/function/scalar/list/array_slice.cpp\nindex 9d724d8dbc36..c313759fe909 100644\n--- a/src/function/scalar/list/array_slice.cpp\n+++ b/src/function/scalar/list/array_slice.cpp\n@@ -88,7 +88,7 @@ static void ExecuteSlice(Vector &result, Vector &s, Vector &b, Vector &e, const\n \t\tauto edata = ConstantVector::GetData<INDEX_TYPE>(e);\n \n \t\tauto sliced = sdata[0];\n-\t\tauto begin = bdata[0];\n+\t\tauto begin = (bdata[0] > 0) ? bdata[0] - 1 : bdata[0];\n \t\tauto end = edata[0];\n \n \t\tauto svalid = !ConstantVector::IsNull(s);\n@@ -120,6 +120,8 @@ static void ExecuteSlice(Vector &result, Vector &s, Vector &b, Vector &e, const\n \t\t\tauto begin = ((INDEX_TYPE *)bdata.data)[bidx];\n \t\t\tauto end = ((INDEX_TYPE *)edata.data)[eidx];\n \n+\t\t\tbegin = (begin > 0) ? begin - 1 : begin;\n+\n \t\t\tauto svalid = sdata.validity.RowIsValid(sidx);\n \t\t\tauto bvalid = bdata.validity.RowIsValid(bidx);\n \t\t\tauto evalid = edata.validity.RowIsValid(eidx);\ndiff --git a/src/function/scalar/list/list_extract.cpp b/src/function/scalar/list/list_extract.cpp\nindex a148d1eff1fc..6062df1c72ea 100644\n--- a/src/function/scalar/list/list_extract.cpp\n+++ b/src/function/scalar/list/list_extract.cpp\n@@ -39,6 +39,14 @@ void ListExtractTemplate(idx_t count, VectorData &list_data, VectorData &offsets\n \t\tif (list_data.validity.RowIsValid(list_index) && offsets_data.validity.RowIsValid(offsets_index)) {\n \t\t\tauto list_entry = ((list_entry_t *)list_data.data)[list_index];\n \t\t\tauto offsets_entry = ((int64_t *)offsets_data.data)[offsets_index];\n+\n+\t\t\t// 1-based indexing\n+\t\t\tif (offsets_entry == 0) {\n+\t\t\t\tresult_mask.SetInvalid(i);\n+\t\t\t\tcontinue;\n+\t\t\t}\n+\t\t\toffsets_entry = (offsets_entry > 0) ? offsets_entry - 1 : offsets_entry;\n+\n \t\t\tidx_t child_offset;\n \t\t\tif (offsets_entry < 0) {\n \t\t\t\tif ((idx_t)-offsets_entry > list_entry.length) {\n@@ -153,7 +161,7 @@ static void ExecuteListExtract(Vector &result, Vector &list, Vector &offsets, co\n static void ExecuteStringExtract(Vector &result, Vector &input_vector, Vector &subscript_vector, const idx_t count) {\n \tBinaryExecutor::Execute<string_t, int32_t, string_t>(\n \t    input_vector, subscript_vector, result, count, [&](string_t input_string, int32_t subscript) {\n-\t\t    return SubstringFun::SubstringScalarFunction(result, input_string, subscript + int32_t(subscript >= 0), 1);\n+\t\t    return SubstringFun::SubstringScalarFunction(result, input_string, subscript, 1);\n \t    });\n }\n \n",
  "test_patch": "diff --git a/test/issues/general/test_2416.test b/test/issues/general/test_2416.test\nindex e8558b55e4b5..c6a596291c5f 100644\n--- a/test/issues/general/test_2416.test\n+++ b/test/issues/general/test_2416.test\n@@ -21,17 +21,22 @@ select list_extract([1, 2, 3], NULL);\n NULL\n \n query I\n-SELECT list_extract([1, 2, 3], 1)\n+SELECT list_extract([1, 2, 3], 2)\n ----\n 2\n \n+query I\n+SELECT list_extract([1, 2, 3], 1)\n+----\n+1\n+\n statement ok\n PREPARE v1 AS SELECT list_extract($1::int[], 1)\n \n query I\n EXECUTE v1([1, 2, 3])\n ----\n-2\n+1\n \n query I\n EXECUTE v1(NULL)\n@@ -42,7 +47,7 @@ statement ok\n PREPARE v2 AS SELECT list_extract([1, 2, 3], $1)\n \n query I\n-EXECUTE v2(1)\n+EXECUTE v2(2)\n ----\n 2\n \n@@ -57,7 +62,7 @@ create macro extract_field(my_struct, my_field) as my_struct[my_field];\n query I\n SELECT extract_field([1, 2, 3], 1)\n ----\n-2\n+1\n \n # the same but with array_length\n query I\n@@ -93,14 +98,14 @@ statement ok\n CREATE MACRO my_extract(my_nested_type, index_or_field) AS my_nested_type[index_or_field]\n \n query T\n-SELECT my_extract('1234', 1)\n+SELECT my_extract('1234', 2)\n ----\n 2\n \n query T\n SELECT my_extract([1, 2, 3, 4], 2)\n ----\n-3\n+2\n \n query T\n SELECT my_extract({a: 1, b: 2, c: 3, d: 4}, 'd')\n@@ -108,7 +113,7 @@ SELECT my_extract({a: 1, b: 2, c: 3, d: 4}, 'd')\n 4\n \n statement ok\n-CREATE MACRO my_list_or_string_extract_2(my_list_or_string) AS my_list_or_string[2]\n+CREATE MACRO my_list_or_string_extract_2(my_list_or_string) AS my_list_or_string[3]\n \n query T\n SELECT my_list_or_string_extract_2('1234')\n@@ -161,7 +166,7 @@ CREATE MACRO my_specific_list_extract(index) AS list_value(1, 2, 3, 4)[index]\n query T\n SELECT my_specific_list_extract(2)\n ----\n-3\n+2\n \n statement error\n SELECT my_specific_list_extract('c')\n@@ -172,7 +177,7 @@ CREATE MACRO my_specific_string_extract(index) AS '1234'[index]\n query T\n SELECT my_specific_string_extract(2)\n ----\n-3\n+2\n \n statement error\n SELECT my_specific_string_extract('c')\ndiff --git a/test/sql/aggregate/aggregates/test_list_aggregate.test b/test/sql/aggregate/aggregates/test_list_aggregate.test\nindex da7d5154becc..f3a915706fb0 100644\n--- a/test/sql/aggregate/aggregates/test_list_aggregate.test\n+++ b/test/sql/aggregate/aggregates/test_list_aggregate.test\n@@ -16,21 +16,21 @@ statement ok\n INSERT INTO list_extract_test VALUES (1, 1), (2, 1), (3, 2), (NULL, 3), (42, 3);\n \n query I\n-SELECT LIST_EXTRACT(LIST(i), 0) FROM list_extract_test GROUP BY g;\n+SELECT LIST_EXTRACT(LIST(i), 1) FROM list_extract_test GROUP BY g;\n ----\n 1\n 3\n NULL\n \n query I\n-SELECT LIST_EXTRACT(LIST(i), 1) FROM list_extract_test GROUP BY g;\n+SELECT LIST_EXTRACT(LIST(i), 2) FROM list_extract_test GROUP BY g;\n ----\n 2\n NULL\n 42\n \n query I\n-SELECT LIST_EXTRACT(LIST(i), 2) FROM list_extract_test GROUP BY g;\n+SELECT LIST_EXTRACT(LIST(i), 3) FROM list_extract_test GROUP BY g;\n ----\n NULL\n NULL\ndiff --git a/test/sql/copy/parquet/parquet_2267.test b/test/sql/copy/parquet/parquet_2267.test\nindex d5d09c5de92f..cc477181c136 100644\n--- a/test/sql/copy/parquet/parquet_2267.test\n+++ b/test/sql/copy/parquet/parquet_2267.test\n@@ -10,6 +10,6 @@ SELECT * FROM parquet_scan('data/parquet-testing/bug2267.parquet')\n [{'disabledPlans': [bea4c11e-220a-4e6d-8eb8-8ea15d019f90], 'skuId': c7df2760-2c81-4ef7-b578-5b5392b571df}, {'disabledPlans': [8a256a2b-b617-496d-b51b-e76466e88db0, 41781fb2-bc02-4b7c-bd55-b576c07bb09d, eec0eb4f-6444-4f95-aba0-50c24d67f998], 'skuId': 84a661c4-e949-4bd2-a560-ed7766fcaf2b}, {'disabledPlans': [], 'skuId': b05e124f-c7cc-45a0-a6aa-8cf78c946968}, {'disabledPlans': [], 'skuId': f30db892-07e9-47e9-837c-80727f46fd3d}]\n \n query I\n-SELECT assignedLicenses[0] FROM parquet_scan('data/parquet-testing/bug2267.parquet')\n+SELECT assignedLicenses[1] FROM parquet_scan('data/parquet-testing/bug2267.parquet')\n ----\n {'disabledPlans': [bea4c11e-220a-4e6d-8eb8-8ea15d019f90], 'skuId': c7df2760-2c81-4ef7-b578-5b5392b571df}\ndiff --git a/test/sql/cte/recursive_array_slice.test b/test/sql/cte/recursive_array_slice.test\nindex 6b60c80c0256..2d6deb18274f 100644\n--- a/test/sql/cte/recursive_array_slice.test\n+++ b/test/sql/cte/recursive_array_slice.test\n@@ -65,9 +65,9 @@ WITH RECURSIVE t(arr) AS\n (\n   SELECT array[1,2,3,4,5,6]\n     UNION ALL\n-  SELECT  arr[arr[0]:6]\n+  SELECT  arr[arr[1]+1:6]\n   FROM   t\n-  WHERE arr[0] < 6\n+  WHERE arr[1] < 6\n ) SELECT * FROM t;\n ----\n [1, 2, 3, 4, 5, 6]\ndiff --git a/test/sql/function/string/test_array_extract.test b/test/sql/function/string/test_array_extract.test\nindex b9252699aa9d..526842520151 100644\n--- a/test/sql/function/string/test_array_extract.test\n+++ b/test/sql/function/string/test_array_extract.test\n@@ -9,18 +9,18 @@ statement ok\n CREATE TABLE strings(s VARCHAR, off INTEGER);\n \n statement ok\n-INSERT INTO strings VALUES ('hello', 0), ('world', 1), ('b', 0), (NULL, 1)\n+INSERT INTO strings VALUES ('hello', 1), ('world', 2), ('b', 1), (NULL, 2)\n \n # test zero length\n query TT\n-SELECT array_extract('\ud83e\udd86ab', 3), array_extract('abc', 3)\n+SELECT array_extract('\ud83e\udd86ab', 4), array_extract('abc', 4)\n ----\n (empty)\t(empty)\n \n # constant offset/length\n # normal array_extract\n query T\n-SELECT array_extract(s, 1) FROM strings\n+SELECT array_extract(s, 2) FROM strings\n ----\n e\n o\n@@ -29,7 +29,7 @@ NULL\n \n # array_extract out of range\n query T\n-SELECT array_extract(s, 2) FROM strings\n+SELECT array_extract(s, 3) FROM strings\n ----\n l\n r\n@@ -46,7 +46,7 @@ b\n NULL\n \n query T\n-SELECT array_extract(s, 1) FROM strings\n+SELECT array_extract(s, 2) FROM strings\n ----\n e\n o\n@@ -113,7 +113,7 @@ NULL\n \n # zero offset\n query T\n-SELECT array_extract(s, 0) FROM strings\n+SELECT array_extract(s, 1) FROM strings\n ----\n h\n w\n@@ -122,7 +122,7 @@ NULL\n \n # length 0\n query T\n-SELECT array_extract(s, 5) FROM strings\n+SELECT array_extract(s, 6) FROM strings\n ----\n (empty)\n (empty)\ndiff --git a/test/sql/function/string/test_string_array_slice.test b/test/sql/function/string/test_string_array_slice.test\nindex d965b5a8b595..38c1f89b36fc 100644\n--- a/test/sql/function/string/test_string_array_slice.test\n+++ b/test/sql/function/string/test_string_array_slice.test\n@@ -46,10 +46,18 @@ wo\n b\n NULL\n \n-# index out of range\n query T\n SELECT array_slice(s, 1, 3) FROM strings\n ----\n+hel\n+wor\n+b\n+NULL\n+\n+# index out of range\n+query T\n+SELECT array_slice(s, 2, 3) FROM strings\n+----\n el\n or\n (empty)\n@@ -60,7 +68,7 @@ query T\n SELECT array_slice(s, off, length+off) FROM strings\n ----\n he\n-orl\n+worl\n b\n NULL\n \n@@ -68,7 +76,7 @@ query T\n SELECT array_slice(s, off, 2+off) FROM strings\n ----\n he\n-or\n+wor\n b\n NULL\n \n@@ -84,9 +92,9 @@ query T\n SELECT array_slice('hello', off, length+off) FROM strings\n ----\n he\n-ell\n+hell\n h\n-el\n+hel\n \n # test substrings with constant nulls in different places\n query T\n@@ -106,7 +114,7 @@ hello\n hello\n \n query T\n-SELECT array_slice('hello', off, NULL+off) FROM strings\n+SELECT array_slice('hello', off+1, NULL+off) FROM strings\n ----\n hello\n ello\n@@ -154,7 +162,7 @@ ld\n NULL\n NULL\n \n-# negative length\n+# length 1\n query T\n SELECT array_slice(s, 0, 1) FROM strings\n ----\n@@ -174,7 +182,7 @@ NULL\n \n # length 0\n query T\n-SELECT array_slice(s, 1, 1) FROM strings\n+SELECT array_slice(s, 1, 0) FROM strings\n ----\n (empty)\n (empty)\n@@ -183,7 +191,7 @@ NULL\n \n # no end\n query T\n-SELECT array_slice(s, 1, NULL) FROM strings\n+SELECT array_slice(s, 2, NULL) FROM strings\n ----\n ello\n orld\ndiff --git a/test/sql/function/string/test_string_slice.test b/test/sql/function/string/test_string_slice.test\nindex 3d21ab2f026e..d44be8fc34da 100644\n--- a/test/sql/function/string/test_string_slice.test\n+++ b/test/sql/function/string/test_string_slice.test\n@@ -43,11 +43,16 @@ SELECT '\ud83e\udd86ab'[0:0], 'abc'[0:0]\n query I\n SELECT '\ud83e\udd26\ud83c\udffc\u200d\u2642\ufe0f L\ud83e\udd26\ud83c\udffc\u200d\u2642\ufe0fR \ud83e\udd26\ud83c\udffc\u200d\u2642\ufe0f'[2:5]\n ----\n-L\ud83e\udd26\ud83c\udffc\u200d\u2642\ufe0fR\n+ L\ud83e\udd26\ud83c\udffc\u200d\u2642\ufe0fR\n \n query I\n SELECT 'S\u0308a'[1:2]\n ----\n+S\u0308a\n+\n+query I\n+SELECT 'S\u0308a'[2:2]\n+----\n a\n \n query I\n@@ -56,7 +61,7 @@ SELECT 'Mot\u00f6rHead'[:5]\n Mot\u00f6r\n \n query I\n-SELECT 'Z\u0351\u036b\u0313\u036a\u0302\u036b\u033d\u034f\u0334\u0319\u0324\u031e\u0349\u035a\u032f\u031e\u0320\u034dA\u0334\u0335\u031c\u0330\u0354\u036b\u0357\u0362'[1:]\n+SELECT 'Z\u0351\u036b\u0313\u036a\u0302\u036b\u033d\u034f\u0334\u0319\u0324\u031e\u0349\u035a\u032f\u031e\u0320\u034dA\u0334\u0335\u031c\u0330\u0354\u036b\u0357\u0362'[2:]\n ----\n A\u0334\u0335\u031c\u0330\u0354\u036b\u0357\u0362\n \n@@ -74,6 +79,14 @@ NULL\n query T\n SELECT s[1:3] FROM strings\n ----\n+hel\n+wor\n+b\n+NULL\n+\n+query T\n+SELECT s[2:3] FROM strings\n+----\n el\n or\n (empty)\n@@ -84,7 +97,7 @@ query T\n SELECT s[off:length+off] FROM strings\n ----\n he\n-orl\n+worl\n b\n NULL\n \n@@ -92,7 +105,7 @@ query T\n SELECT s[off:2+off] FROM strings\n ----\n he\n-or\n+wor\n b\n NULL\n \n@@ -108,9 +121,9 @@ query T\n SELECT 'hello'[off:length+off] FROM strings\n ----\n he\n-ell\n+hell\n h\n-el\n+hel\n \n # test substrings with constant nulls in different places\n query T\n@@ -133,6 +146,14 @@ query T\n SELECT 'hello'[off:NULL+off] FROM strings\n ----\n hello\n+hello\n+hello\n+hello\n+\n+query T\n+SELECT 'hello'[off+1:NULL+off] FROM strings\n+----\n+hello\n ello\n hello\n ello\n@@ -178,7 +199,7 @@ ld\n NULL\n NULL\n \n-# negative length\n+# length 1\n query T\n SELECT s[0:1] FROM strings\n ----\n@@ -198,7 +219,7 @@ NULL\n \n # length 0\n query T\n-SELECT s[1:1] FROM strings\n+SELECT s[1:0] FROM strings\n ----\n (empty)\n (empty)\n@@ -207,7 +228,7 @@ NULL\n \n # no end\n query T\n-SELECT s[1:] FROM strings\n+SELECT s[2:] FROM strings\n ----\n ello\n orld\ndiff --git a/test/sql/function/string/test_subscript.test b/test/sql/function/string/test_subscript.test\nindex da54ed9b9248..1c9cb5cbfa44 100644\n--- a/test/sql/function/string/test_subscript.test\n+++ b/test/sql/function/string/test_subscript.test\n@@ -9,39 +9,39 @@ statement ok\n CREATE TABLE strings(s VARCHAR, off INTEGER);\n \n statement ok\n-INSERT INTO strings VALUES ('hello', 0), ('world', 1), ('b', 0), (NULL, 1)\n+INSERT INTO strings VALUES ('hello', 1), ('world', 2), ('b', 1), (NULL, 2)\n \n # test direct subscript\n query TT\n-SELECT '\ud83e\udd86ab'[0], 'abc'[1]\n+SELECT '\ud83e\udd86ab'[1], 'abc'[2]\n ----\n \ud83e\udd86\tb\n \n # test grapheme clusters\n query I\n-SELECT '\ud83e\udd26\ud83c\udffc\u200d\u2642\ufe0f L\ud83e\udd26\ud83c\udffc\u200d\u2642\ufe0fR \ud83e\udd26\ud83c\udffc\u200d\u2642\ufe0f'[3]\n+SELECT '\ud83e\udd26\ud83c\udffc\u200d\u2642\ufe0f L\ud83e\udd26\ud83c\udffc\u200d\u2642\ufe0fR \ud83e\udd26\ud83c\udffc\u200d\u2642\ufe0f'[4]\n ----\n \ud83e\udd26\ud83c\udffc\u200d\u2642\ufe0f\n \n query I\n SELECT 'S\u0308a'[1]\n ----\n-a\n+S\u0308\n \n query I\n-SELECT 'Mot\u00f6rHead'[3]\n+SELECT 'Mot\u00f6rHead'[4]\n ----\n \u00f6\n \n query I\n-SELECT 'Z\u0351\u036b\u0313\u036a\u0302\u036b\u033d\u034f\u0334\u0319\u0324\u031e\u0349\u035a\u032f\u031e\u0320\u034dA\u0334\u0335\u031c\u0330\u0354\u036b\u0357\u0362'[1]\n+SELECT 'Z\u0351\u036b\u0313\u036a\u0302\u036b\u033d\u034f\u0334\u0319\u0324\u031e\u0349\u035a\u032f\u031e\u0320\u034dA\u0334\u0335\u031c\u0330\u0354\u036b\u0357\u0362'[2]\n ----\n A\u0334\u0335\u031c\u0330\u0354\u036b\u0357\u0362\n \n # constant offset/length\n # normal array_extract\n query T\n-SELECT s[1] FROM strings\n+SELECT s[2] FROM strings\n ----\n e\n o\n@@ -50,7 +50,7 @@ NULL\n \n # array_extract out of range\n query T\n-SELECT s[2] FROM strings\n+SELECT s[3] FROM strings\n ----\n l\n r\n@@ -67,7 +67,7 @@ b\n NULL\n \n query T\n-SELECT s[1] FROM strings\n+SELECT s[2] FROM strings\n ----\n e\n o\n@@ -114,7 +114,7 @@ NULL\n \n # zero offset\n query T\n-SELECT s[0] FROM strings\n+SELECT s[1] FROM strings\n ----\n h\n w\n@@ -123,7 +123,7 @@ NULL\n \n # length 0\n query T\n-SELECT s[5] FROM strings\n+SELECT s[6] FROM strings\n ----\n (empty)\n (empty)\ndiff --git a/test/sql/pg_catalog/sqlalchemy.test b/test/sql/pg_catalog/sqlalchemy.test\nindex ed4f22754092..35d568cc3ae2 100644\n--- a/test/sql/pg_catalog/sqlalchemy.test\n+++ b/test/sql/pg_catalog/sqlalchemy.test\n@@ -148,7 +148,7 @@ seq\n \n # get_view_definition\n query I\n-SELECT string_split_regex(pg_get_viewdef(c.oid), '\\n')[0] view_def FROM pg_class c\n+SELECT string_split_regex(pg_get_viewdef(c.oid), '\\n')[1] view_def FROM pg_class c\n JOIN pg_namespace n ON n.oid = c.relnamespace\n WHERE n.nspname = 'myschema' AND c.relname = 'v1'\n AND c.relkind IN ('v', 'm')\ndiff --git a/test/sql/storage/partial_blocks/many_columns_lists.test_coverage b/test/sql/storage/partial_blocks/many_columns_lists.test_coverage\nindex b73162dede6b..2048e2521e54 100644\n--- a/test/sql/storage/partial_blocks/many_columns_lists.test_coverage\n+++ b/test/sql/storage/partial_blocks/many_columns_lists.test_coverage\n@@ -31,13 +31,13 @@ true\n loop i 0 100\n \n query III\n-SELECT i${i}[0]=${i}, i${i}[1]=${i}, i${i}[2]=${i} FROM lists\n+SELECT i${i}[1]=${i}, i${i}[2]=${i}, i${i}[3]=${i} FROM lists\n ----\n true\tNULL\ttrue\n false\tNULL\tfalse\n \n query III\n-SELECT i${i}[0]=${i}+1, i${i}[1]=${i}+1, i${i}[2]=${i}+1 FROM lists\n+SELECT i${i}[1]=${i}+1, i${i}[2]=${i}+1, i${i}[3]=${i}+1 FROM lists\n ----\n false\tNULL\tfalse\n true\tNULL\ttrue\n@@ -49,13 +49,13 @@ restart\n loop i 0 100\n \n query III\n-SELECT i${i}[0]=${i}, i${i}[1]=${i}, i${i}[2]=${i} FROM lists\n+SELECT i${i}[1]=${i}, i${i}[2]=${i}, i${i}[3]=${i} FROM lists\n ----\n true\tNULL\ttrue\n false\tNULL\tfalse\n \n query III\n-SELECT i${i}[0]=${i}+1, i${i}[1]=${i}+1, i${i}[2]=${i}+1 FROM lists\n+SELECT i${i}[1]=${i}+1, i${i}[2]=${i}+1, i${i}[3]=${i}+1 FROM lists\n ----\n false\tNULL\tfalse\n true\tNULL\ttrue\ndiff --git a/test/sql/storage/types/list/persistent_list_storage.test b/test/sql/storage/types/list/persistent_list_storage.test\nindex 9cb7fe202ce1..add699edcfcc 100644\n--- a/test/sql/storage/types/list/persistent_list_storage.test\n+++ b/test/sql/storage/types/list/persistent_list_storage.test\n@@ -37,7 +37,7 @@ NULL\n # delete\n \n query I\n-DELETE FROM a WHERE b[0]=1\n+DELETE FROM a WHERE b[1]=1\n ----\n 1\n \n@@ -83,7 +83,7 @@ NULL\n [[NULL, 6], NULL, [1, 2, NULL]]\n \n query I\n-DELETE FROM b WHERE b[0][0]=1\n+DELETE FROM b WHERE b[1][1]=1\n ----\n 1\n \ndiff --git a/test/sql/subquery/scalar/test_unnest_subquery.test b/test/sql/subquery/scalar/test_unnest_subquery.test\nindex 735e47eadb4a..d6ff3e20f451 100644\n--- a/test/sql/subquery/scalar/test_unnest_subquery.test\n+++ b/test/sql/subquery/scalar/test_unnest_subquery.test\n@@ -109,6 +109,6 @@ NULL\n \n # double correlated subqueries\n query I\n-SELECT (SELECT 1+i[0]=ANY(SELECT UNNEST(i))) FROM (VALUES ([1, 2, 3])) tbl(i);\n+SELECT (SELECT 1+i[1]=ANY(SELECT UNNEST(i))) FROM (VALUES ([1, 2, 3])) tbl(i);\n ----\n true\ndiff --git a/test/sql/types/list/large_nested_lists.test_coverage b/test/sql/types/list/large_nested_lists.test_coverage\nindex 0102dceb77fb..bfb0afead4d5 100644\n--- a/test/sql/types/list/large_nested_lists.test_coverage\n+++ b/test/sql/types/list/large_nested_lists.test_coverage\n@@ -27,7 +27,7 @@ statement ok\n CREATE TABLE c AS SELECT case when i < 100000 then 'a' else 'b' end g, [LIST(case when i %2 = 0 then null else i end)] l FROM range(200000) tbl(i) GROUP BY g\n \n query IIIII\n-SELECT g, COUNT(*), MIN(i), MAX(i), COUNT(i) FROM (SELECT g, UNNEST(l[0]) FROM c) tbl(g, i) GROUP BY g ORDER BY g\n+SELECT g, COUNT(*), MIN(i), MAX(i), COUNT(i) FROM (SELECT g, UNNEST(l[1]) FROM c) tbl(g, i) GROUP BY g ORDER BY g\n ----\n a\t100000\t1\t99999\t50000\n b\t100000\t100001\t199999\t50000\n@@ -37,7 +37,7 @@ statement ok\n CREATE TABLE d AS SELECT case when i < 100000 then 'a' else 'b' end g, [LIST(i), LIST(i + 1), LIST(i + 2), LIST(i + 3)] l FROM range(200000) tbl(i) GROUP BY g\n \n query IIIIIIIIII\n-SELECT g, COUNT(*), MIN(i1), MAX(i1), MIN(i2), MAX(i2), MIN(i3), MAX(i3), MIN(i4), MAX(i4) FROM (SELECT g, UNNEST(l[0]) i1, UNNEST(l[1]) i2, UNNEST(l[2]) i3, UNNEST(l[3]) i4 FROM d) tbl GROUP BY g ORDER BY g\n+SELECT g, COUNT(*), MIN(i1), MAX(i1), MIN(i2), MAX(i2), MIN(i3), MAX(i3), MIN(i4), MAX(i4) FROM (SELECT g, UNNEST(l[1]) i1, UNNEST(l[2]) i2, UNNEST(l[3]) i3, UNNEST(l[4]) i4 FROM d) tbl GROUP BY g ORDER BY g\n ----\n a\t100000\t0\t99999\t1\t100000\t2\t100001\t3\t100002\n b\t100000\t100000\t199999\t100001\t200000\t100002\t200001\t100003\t200002\ndiff --git a/test/sql/types/list/list_extract_struct.test b/test/sql/types/list/list_extract_struct.test\nindex d36c015cb10a..a823aa7d29fc 100644\n--- a/test/sql/types/list/list_extract_struct.test\n+++ b/test/sql/types/list/list_extract_struct.test\n@@ -17,17 +17,17 @@ SELECT * FROM a\n [{'a': 3, 'b': NULL}, NULL, {'a': NULL, 'b': hello}]\n \n query I\n-SELECT l[0] FROM a\n+SELECT l[1] FROM a\n ----\n {'a': 3, 'b': NULL}\n \n query I\n-SELECT l[1] FROM a\n+SELECT l[2] FROM a\n ----\n NULL\n \n query I\n-SELECT l[2] FROM a\n+SELECT l[3] FROM a\n ----\n {'a': NULL, 'b': hello}\n \n@@ -48,31 +48,31 @@ SELECT * FROM nested\n [{'a': 3, 'b': {'x': 3, 'y': [1, 2, 3]}}, NULL, {'a': NULL, 'b': {'x': NULL, 'y': [4, 5]}}, {'a': 27, 'b': NULL}, {'a': NULL, 'b': {'x': 7, 'y': NULL}}]\n \n query I\n-SELECT l[0] FROM nested\n+SELECT l[1] FROM nested\n ----\n {'a': 3, 'b': {'x': 3, 'y': [1, 2, 3]}}\n \n query I\n-SELECT l[1] FROM nested\n+SELECT l[2] FROM nested\n ----\n NULL\n \n query I\n-SELECT l[2] FROM nested\n+SELECT l[3] FROM nested\n ----\n {'a': NULL, 'b': {'x': NULL, 'y': [4, 5]}}\n \n query I\n-SELECT l[3] FROM nested\n+SELECT l[4] FROM nested\n ----\n {'a': 27, 'b': NULL}\n \n query I\n-SELECT l[4] FROM nested\n+SELECT l[5] FROM nested\n ----\n {'a': NULL, 'b': {'x': 7, 'y': NULL}}\n \n query I\n-SELECT l[4]['b'] FROM nested\n+SELECT l[5]['b'] FROM nested\n ----\n {'x': 7, 'y': NULL}\ndiff --git a/test/sql/types/list/list_extract_types.test b/test/sql/types/list/list_extract_types.test\nindex 27791b82f972..0f0748a479cd 100644\n--- a/test/sql/types/list/list_extract_types.test\n+++ b/test/sql/types/list/list_extract_types.test\n@@ -11,7 +11,7 @@ CREATE TABLE all_types AS SELECT * FROM test_all_types();\n foreach colname bool tinyint smallint int bigint hugeint utinyint usmallint uint ubigint date time timestamp timestamp_s timestamp_ms timestamp_ns time_tz timestamp_tz float double dec_4_1 dec_9_4 dec_18_6 dec38_10 uuid interval varchar blob small_enum medium_enum large_enum int_array varchar_array nested_int_array struct struct_of_arrays array_of_structs map\n \n statement ok\n-CREATE TABLE a AS SELECT LIST_EXTRACT([\"${colname}\"], 0) col FROM all_types;\n+CREATE TABLE a AS SELECT LIST_EXTRACT([\"${colname}\"], 1) col FROM all_types;\n \n query I\n SELECT COUNT(*) FROM a JOIN all_types ON (a.col=all_types.\"${colname}\");\ndiff --git a/test/sql/types/list/list_index.test b/test/sql/types/list/list_index.test\nindex 238cadf05980..2f0faf31967b 100644\n--- a/test/sql/types/list/list_index.test\n+++ b/test/sql/types/list/list_index.test\n@@ -98,7 +98,7 @@ statement ok\n INSERT INTO a VALUES (1, [7, 8, 9, 10, 11, 12, 13, 14, 15])\n \n query II\n-SELECT * FROM a WHERE id=1 ORDER BY c[0] NULLS FIRST\n+SELECT * FROM a WHERE id=1 ORDER BY c[1] NULLS FIRST\n ----\n 1\tNULL\n 1\t[NULL]\ndiff --git a/test/sql/types/list/list_indexing.test b/test/sql/types/list/list_indexing.test\nnew file mode 100644\nindex 000000000000..5d5a4e310cf2\n--- /dev/null\n+++ b/test/sql/types/list/list_indexing.test\n@@ -0,0 +1,57 @@\n+# name: test/sql/types/list/list_indexing.test\n+# description: Test changes from 0-based indexing to 1-based indexing\n+# group: [list]\n+\n+statement ok\n+CREATE TABLE test (l INTEGER[]);\n+\n+statement ok\n+INSERT INTO test VALUES ([1, 2, 3]), ([NULL]), (NULL), ([-2, NULL, 4, 2]);\n+\n+query I\n+SELECT list_extract(l, 0) FROM test;\n+----\n+NULL\n+NULL\n+NULL\n+NULL\n+\n+query I\n+SELECT list_extract(l, 1) FROM test;\n+----\n+1\n+NULL\n+NULL\n+-2\n+\n+query I\n+SELECT l[:] FROM test;\n+----\n+[1, 2, 3]\n+[NULL]\n+NULL\n+[-2, NULL, 4, 2]\n+\n+query I\n+SELECT l[0:0] FROM test;\n+----\n+[]\n+[]\n+NULL\n+[]\n+\n+query I\n+SELECT l[0:1] FROM test;\n+----\n+[1]\n+[NULL]\n+NULL\n+[-2]\n+\n+query I\n+SELECT l[1:0] FROM test;\n+----\n+[]\n+[]\n+NULL\n+[]\n\\ No newline at end of file\ndiff --git a/test/sql/types/list/list_stats.test b/test/sql/types/list/list_stats.test\nindex 243568d36fdf..19b90d6e32c3 100644\n--- a/test/sql/types/list/list_stats.test\n+++ b/test/sql/types/list/list_stats.test\n@@ -76,12 +76,12 @@ CREATE TABLE lists AS SELECT [3, 4] l\n \n # list_extract always propagates a null\n query I\n-SELECT STATS(l[0]) FROM lists LIMIT 1\n+SELECT STATS(l[1]) FROM lists LIMIT 1\n ----\n <REGEX>:.*3.*4.*Has Null: true.*\n \n query I\n-SELECT l[0] FROM lists\n+SELECT l[1] FROM lists\n ----\n 3\n \n@@ -90,12 +90,12 @@ statement ok\n INSERT INTO lists VALUES ([])\n \n query I\n-SELECT STATS(l[0]) FROM lists LIMIT 1\n+SELECT STATS(l[1]) FROM lists LIMIT 1\n ----\n <REGEX>:.*3.*4.*Has Null: true.*\n \n query I\n-SELECT l[0] FROM lists\n+SELECT l[1] FROM lists\n ----\n 3\n NULL\n@@ -105,12 +105,12 @@ statement ok\n INSERT INTO lists VALUES (NULL)\n \n query I\n-SELECT STATS(l[0]) FROM lists LIMIT 1\n+SELECT STATS(l[1]) FROM lists LIMIT 1\n ----\n <REGEX>:.*3.*4.*Has Null: true.*\n \n query I\n-SELECT l[0] FROM lists\n+SELECT l[1] FROM lists\n ----\n 3\n NULL\n@@ -122,12 +122,12 @@ statement ok\n INSERT INTO lists VALUES ([NULL])\n \n query I\n-SELECT STATS(l[0]) FROM lists LIMIT 1\n+SELECT STATS(l[1]) FROM lists LIMIT 1\n ----\n <REGEX>:.*3.*4.*Has Null: true.*\n \n query I\n-SELECT l[0] FROM lists\n+SELECT l[1] FROM lists\n ----\n 3\n NULL\ndiff --git a/test/sql/types/list/list_test_many_deletes.test b/test/sql/types/list/list_test_many_deletes.test\nindex ad56f9a37def..67d4d8806f96 100644\n--- a/test/sql/types/list/list_test_many_deletes.test\n+++ b/test/sql/types/list/list_test_many_deletes.test\n@@ -9,7 +9,7 @@ statement ok\n INSERT INTO lists SELECT [i, NULL, i+1] FROM range(10000) tbl(i);\n \n statement ok\n-DELETE FROM lists WHERE i[0] <= 9995\n+DELETE FROM lists WHERE i[1] <= 9995\n \n query I\n SELECT * FROM lists\n@@ -30,7 +30,7 @@ statement ok\n INSERT INTO lists SELECT [[i], NULL, [i+1, 4], [NULL, 1, 2]] FROM range(10000) tbl(i);\n \n statement ok\n-DELETE FROM lists WHERE i[0][0] <= 9995\n+DELETE FROM lists WHERE i[1][1] <= 9995\n \n query I\n SELECT * FROM lists\ndiff --git a/test/sql/types/list/list_updates.test b/test/sql/types/list/list_updates.test\nindex b3183614df4a..467a2f5dd3ca 100644\n--- a/test/sql/types/list/list_updates.test\n+++ b/test/sql/types/list/list_updates.test\n@@ -18,7 +18,7 @@ SELECT * FROM a ORDER BY id\n \n # deletions\n query I\n-DELETE FROM a WHERE b[0]=1\n+DELETE FROM a WHERE b[1]=1\n ----\n 1\n \ndiff --git a/test/sql/types/list/list_updates_varchar.test b/test/sql/types/list/list_updates_varchar.test\nindex 3fbb70228ef5..4e638dc51237 100644\n--- a/test/sql/types/list/list_updates_varchar.test\n+++ b/test/sql/types/list/list_updates_varchar.test\n@@ -18,7 +18,7 @@ SELECT * FROM a ORDER BY id\n \n # deletions\n query I\n-DELETE FROM a WHERE b[0][0]='3'\n+DELETE FROM a WHERE b[1][1]='3'\n ----\n 1\n \ndiff --git a/test/sql/types/list/many_lists.test b/test/sql/types/list/many_lists.test\nindex 5ae33103b6b6..5e695236ec37 100644\n--- a/test/sql/types/list/many_lists.test\n+++ b/test/sql/types/list/many_lists.test\n@@ -54,6 +54,6 @@ SELECT COUNT(*) FROM t4\n 5000\n \n query IIIII\n-SELECT COUNT(k), MIN(k[0]), MAX(k[0]), MIN(k[1]), MAX(k[1]) FROM (SELECT UNNEST(l) FROM t4) tbl(k)\n+SELECT COUNT(k), MIN(k[1]), MAX(k[1]), MIN(k[2]), MAX(k[2]) FROM (SELECT UNNEST(l) FROM t4) tbl(k)\n ----\n 20000\t0\t19999\t2\t20001\ndiff --git a/test/sql/types/list/nested_list_extract.test b/test/sql/types/list/nested_list_extract.test\nindex 4e5ebc7a2ac1..06a4a8c8be74 100644\n--- a/test/sql/types/list/nested_list_extract.test\n+++ b/test/sql/types/list/nested_list_extract.test\n@@ -18,33 +18,54 @@ SELECT * FROM a ORDER BY id\n \n # test nested list extract\n query II\n-SELECT id, b[0] FROM a ORDER BY id\n+SELECT id, b[1] FROM a ORDER BY id\n ----\n 0\t[1, 2]\n 1\tNULL\n 2\t[4, 5, 6, 7]\n \n query II\n-SELECT id, b[0][0] FROM a ORDER BY id\n+SELECT id, b[1][1] FROM a ORDER BY id\n ----\n 0\t1\n 1\tNULL\n 2\t4\n \n query II\n-SELECT id, b[0][3] FROM a ORDER BY id\n+SELECT id, b[0][0] FROM a ORDER BY id\n+----\n+0\tNULL\n+1\tNULL\n+2\tNULL\n+\n+query II\n+SELECT id, b[0][1] FROM a ORDER BY id\n+----\n+0\tNULL\n+1\tNULL\n+2\tNULL\n+\n+query II\n+SELECT id, b[1][0] FROM a ORDER BY id\n+----\n+0\tNULL\n+1\tNULL\n+2\tNULL\n+\n+query II\n+SELECT id, b[1][4] FROM a ORDER BY id\n ----\n 0\tNULL\n 1\tNULL\n 2\t7\n \n query II\n-SELECT * FROM a WHERE b[0][0]=1\n+SELECT * FROM a WHERE b[1][1]=1\n ----\n 0\t[[1, 2], NULL, [3, NULL]]\n \n query II\n-SELECT * FROM a WHERE b[0][0]=1 OR b[0][1]=2\n+SELECT * FROM a WHERE b[1][1]=1 OR b[1][2]=2\n ----\n 0\t[[1, 2], NULL, [3, NULL]]\n \n@@ -63,35 +84,35 @@ SELECT * FROM nested ORDER BY id\n 2\t[[[6, 7, 8, 9], [10, 11], [12, 13]], NULL, [NULL, [10, 11], [12, 13]]]\n \n query II\n-SELECT id, b[0] FROM nested ORDER BY id\n+SELECT id, b[1] FROM nested ORDER BY id\n ----\n 0\t[[1, 2], [3, 4]]\n 1\tNULL\n 2\t[[6, 7, 8, 9], [10, 11], [12, 13]]\n \n query II\n-SELECT id, b[0][0] FROM nested ORDER BY id\n+SELECT id, b[1][1] FROM nested ORDER BY id\n ----\n 0\t[1, 2]\n 1\tNULL\n 2\t[6, 7, 8, 9]\n \n query II\n-SELECT id, b[0][2] FROM nested ORDER BY id\n+SELECT id, b[1][3] FROM nested ORDER BY id\n ----\n 0\tNULL\n 1\tNULL\n 2\t[12, 13]\n \n query II\n-SELECT id, b[0][2][0] FROM nested ORDER BY id\n+SELECT id, b[1][3][1] FROM nested ORDER BY id\n ----\n 0\tNULL\n 1\tNULL\n 2\t12\n \n query II\n-SELECT id, b[0][2][3] FROM nested ORDER BY id\n+SELECT id, b[1][3][4] FROM nested ORDER BY id\n ----\n 0\tNULL\n 1\tNULL\ndiff --git a/test/sql/types/list/nested_list_slice.test b/test/sql/types/list/nested_list_slice.test\nindex d2b39899f620..3dce6267c557 100644\n--- a/test/sql/types/list/nested_list_slice.test\n+++ b/test/sql/types/list/nested_list_slice.test\n@@ -30,3 +30,38 @@ SELECT id, b[0:2] FROM a ORDER BY id\n 0\t[[1, 2], NULL]\n 1\tNULL\n 2\t[[4, 5, 6, 7], [NULL]]\n+\n+query II\n+SELECT id, b[1:1] FROM a ORDER BY id\n+----\n+0\t[[1, 2]]\n+1\tNULL\n+2\t[[4, 5, 6, 7]]\n+\n+query II\n+SELECT id, b[1:2] FROM a ORDER BY id\n+----\n+0\t[[1, 2], NULL]\n+1\tNULL\n+2\t[[4, 5, 6, 7], [NULL]]\n+\n+query II\n+SELECT id, b[0:0] FROM a ORDER BY id\n+----\n+0\t[]\n+1\tNULL\n+2\t[]\n+\n+query II\n+SELECT id, b[:] FROM a ORDER BY id\n+----\n+0\t[[1, 2], NULL, [3, NULL]]\n+1\tNULL\n+2\t[[4, 5, 6, 7], [NULL]]\n+\n+query II\n+SELECT id, list_extract(b[:], 0) FROM a ORDER BY id\n+----\n+0\tNULL\n+1\tNULL\n+2\tNULL\ndiff --git a/test/sql/types/nested/list/array.test b/test/sql/types/nested/list/array.test\nindex 96d80862f327..ada0b05acbdd 100644\n--- a/test/sql/types/nested/list/array.test\n+++ b/test/sql/types/nested/list/array.test\n@@ -33,13 +33,13 @@ SELECT ARRAY[1, i] FROM range(3) tbl(i) ORDER BY i\n \n # use in WHERE clause\n query I\n-SELECT ARRAY[i] FROM range(3) tbl(i) WHERE (ARRAY[i])[0] == 1\n+SELECT ARRAY[i] FROM range(3) tbl(i) WHERE (ARRAY[i])[1] == 1\n ----\n [1]\n \n # conversion failure (mixed types)\n query I\n-SELECT ARRAY[i, 'hello'] FROM range(3) tbl(i) WHERE (ARRAY[i])[0] == 1\n+SELECT ARRAY[i, 'hello'] FROM range(3) tbl(i) WHERE (ARRAY[i])[1] == 1\n ----\n [1, hello]\n \ndiff --git a/test/sql/types/nested/list/list.test_slow b/test/sql/types/nested/list/list.test_slow\nindex 1059c17adf10..907cd7f41e64 100644\n--- a/test/sql/types/nested/list/list.test_slow\n+++ b/test/sql/types/nested/list/list.test_slow\n@@ -9,6 +9,6 @@ statement ok\n CREATE TABLE test AS (SELECT range i, 0 as j FROM range(70000));\n \n query I\n-SELECT list(i)[69999] FROM test GROUP BY j;\n+SELECT list(i)[70000] FROM test GROUP BY j;\n ----\n 69999\n\\ No newline at end of file\ndiff --git a/test/sql/types/nested/list/test_list_extract.test b/test/sql/types/nested/list/test_list_extract.test\nindex e228f9837b8c..b92fc25e1bda 100644\n--- a/test/sql/types/nested/list/test_list_extract.test\n+++ b/test/sql/types/nested/list/test_list_extract.test\n@@ -6,22 +6,22 @@ statement ok\n PRAGMA enable_verification\n \n query I\n-SELECT LIST_EXTRACT(NULL, 0)\n+SELECT LIST_EXTRACT(NULL, 1)\n ----\n NULL\n \n query I\n-SELECT LIST_EXTRACT(42, 0)\n+SELECT LIST_EXTRACT(42, 1)\n ----\n 4\n \n query I\n-SELECT LIST_EXTRACT(LIST_VALUE(), 0)\n+SELECT LIST_EXTRACT(LIST_VALUE(), 1)\n ----\n NULL\n \n query I\n-SELECT LIST_EXTRACT(LIST_VALUE(NULL), 0)\n+SELECT LIST_EXTRACT(LIST_VALUE(NULL), 1)\n ----\n NULL\n \n@@ -36,18 +36,18 @@ SELECT LIST_EXTRACT(LIST_VALUE(42), NULL)\n NULL\n \n query I\n-SELECT LIST_EXTRACT(LIST_VALUE(42), 0)\n+SELECT LIST_EXTRACT(LIST_VALUE(42), 1)\n ----\n 42\n \n # alias\n query I\n-SELECT LIST_ELEMENT(LIST_VALUE(42), 0)\n+SELECT LIST_ELEMENT(LIST_VALUE(42), 1)\n ----\n 42\n \n query I\n-SELECT LIST_EXTRACT(LIST_VALUE(42, 43), 1)\n+SELECT LIST_EXTRACT(LIST_VALUE(42, 43), 2)\n ----\n 43\n \n@@ -72,88 +72,88 @@ SELECT LIST_EXTRACT(LIST_VALUE(42, 43, 44, 45), -5)\n NULL\n \n query I\n-SELECT LIST_EXTRACT(LIST_VALUE(42), 1)\n+SELECT LIST_EXTRACT(LIST_VALUE(42), 2)\n ----\n NULL\n \n # all them types woo\n \n query I\n-SELECT LIST_EXTRACT(LIST_VALUE('Hello', 'World'), 0)\n+SELECT LIST_EXTRACT(LIST_VALUE('Hello', 'World'), 1)\n ----\n Hello\n \n query I\n-SELECT LIST_EXTRACT(LIST_VALUE('Hello', 'World'), 1)\n+SELECT LIST_EXTRACT(LIST_VALUE('Hello', 'World'), 2)\n ----\n World\n \n query I\n-SELECT LIST_EXTRACT(LIST_VALUE(42::UTINYINT), 0)\n+SELECT LIST_EXTRACT(LIST_VALUE(42::UTINYINT), 1)\n ----\n 42\n \n query I\n-SELECT LIST_EXTRACT(LIST_VALUE(42::TINYINT), 0)\n+SELECT LIST_EXTRACT(LIST_VALUE(42::TINYINT), 1)\n ----\n 42\n \n query I\n-SELECT LIST_EXTRACT(LIST_VALUE(42::USMALLINT), 0)\n+SELECT LIST_EXTRACT(LIST_VALUE(42::USMALLINT), 1)\n ----\n 42\n \n query I\n-SELECT LIST_EXTRACT(LIST_VALUE(42::SMALLINT), 0)\n+SELECT LIST_EXTRACT(LIST_VALUE(42::SMALLINT), 1)\n ----\n 42\n \n query I\n-SELECT LIST_EXTRACT(LIST_VALUE(42::UINTEGER), 0)\n+SELECT LIST_EXTRACT(LIST_VALUE(42::UINTEGER), 1)\n ----\n 42\n \n query I\n-SELECT LIST_EXTRACT(LIST_VALUE(42::INTEGER), 0)\n+SELECT LIST_EXTRACT(LIST_VALUE(42::INTEGER), 1)\n ----\n 42\n \n query I\n-SELECT LIST_EXTRACT(LIST_VALUE(42::UBIGINT), 0)\n+SELECT LIST_EXTRACT(LIST_VALUE(42::UBIGINT), 1)\n ----\n 42\n \n query I\n-SELECT LIST_EXTRACT(LIST_VALUE(42::BIGINT), 0)\n+SELECT LIST_EXTRACT(LIST_VALUE(42::BIGINT), 1)\n ----\n 42\n \n query I\n-SELECT LIST_EXTRACT(LIST_VALUE(42::HUGEINT), 0)\n+SELECT LIST_EXTRACT(LIST_VALUE(42::HUGEINT), 1)\n ----\n 42\n \n query I\n-SELECT LIST_EXTRACT(LIST_VALUE(42::FLOAT), 0)\n+SELECT LIST_EXTRACT(LIST_VALUE(42::FLOAT), 1)\n ----\n 42\n \n query I\n-SELECT LIST_EXTRACT(LIST_VALUE(42::DOUBLE), 0)\n+SELECT LIST_EXTRACT(LIST_VALUE(42::DOUBLE), 1)\n ----\n 42\n \n query I\n-SELECT LIST_EXTRACT(LIST_VALUE('2019-11-26'::DATE), 0)\n+SELECT LIST_EXTRACT(LIST_VALUE('2019-11-26'::DATE), 1)\n ----\n 2019-11-26\n \n query I\n-SELECT LIST_EXTRACT(LIST_VALUE('21:42:00'::TIME), 0)\n+SELECT LIST_EXTRACT(LIST_VALUE('21:42:00'::TIME), 1)\n ----\n 21:42:00\n \n query I\n-SELECT LIST_EXTRACT(LIST_VALUE('2019-11-26 09:42:00'::TIMESTAMP), 0)\n+SELECT LIST_EXTRACT(LIST_VALUE('2019-11-26 09:42:00'::TIMESTAMP), 1)\n ----\n 2019-11-26 09:42:00\ndiff --git a/test/sql/types/nested/list/test_list_index.test b/test/sql/types/nested/list/test_list_index.test\nindex d7314ef5069f..50ead9d95485 100644\n--- a/test/sql/types/nested/list/test_list_index.test\n+++ b/test/sql/types/nested/list/test_list_index.test\n@@ -6,12 +6,12 @@ statement ok\n PRAGMA enable_verification\n \n query I\n-SELECT a[0] FROM (VALUES (LIST_VALUE())) tbl(a)\n+SELECT a[1] FROM (VALUES (LIST_VALUE())) tbl(a)\n ----\n NULL\n \n query I\n-SELECT a[0] FROM (VALUES (LIST_VALUE(NULL))) tbl(a)\n+SELECT a[1] FROM (VALUES (LIST_VALUE(NULL))) tbl(a)\n ----\n NULL\n \n@@ -26,37 +26,42 @@ SELECT a[NULL] FROM (VALUES (LIST_VALUE(42))) tbl(a)\n NULL\n \n query I\n-SELECT a[0] FROM (VALUES (LIST_VALUE(42))) tbl(a)\n+SELECT a[1] FROM (VALUES (LIST_VALUE(42))) tbl(a)\n ----\n 42\n \n query I\n-SELECT a[0+1-1] FROM (VALUES (LIST_VALUE(42))) tbl(a)\n+SELECT a[1+1-1] FROM (VALUES (LIST_VALUE(42))) tbl(a)\n ----\n 42\n \n query I\n-SELECT a[b] FROM (VALUES (LIST_VALUE(42), 0)) tbl(a, b)\n+SELECT a[b] FROM (VALUES (LIST_VALUE(42), 1)) tbl(a, b)\n ----\n 42\n \n # doing it directly on the function does not require brackets\n query I\n-SELECT (LIST_VALUE(42))[0]\n+SELECT (LIST_VALUE(42))[1]\n ----\n 42\n \n query I\n-SELECT LIST_VALUE(42)[0]\n+SELECT LIST_VALUE(42)[1]\n ----\n 42\n \n # slicing\n query T\n-SELECT a[1:] FROM (VALUES (LIST_VALUE(42, 43, 44))) tbl(a)\n+SELECT a[2:] FROM (VALUES (LIST_VALUE(42, 43, 44))) tbl(a)\n ----\n [43, 44]\n \n+query T\n+SELECT a[1:] FROM (VALUES (LIST_VALUE(42, 43, 44))) tbl(a)\n+----\n+[42, 43, 44]\n+\n query T\n SELECT a[:1] FROM (VALUES (LIST_VALUE(42, 43, 44))) tbl(a)\n ----\ndiff --git a/test/sql/types/nested/list/test_list_slice.test b/test/sql/types/nested/list/test_list_slice.test\nindex c21ed71044d9..ae5734cea075 100644\n--- a/test/sql/types/nested/list/test_list_slice.test\n+++ b/test/sql/types/nested/list/test_list_slice.test\n@@ -17,10 +17,10 @@ CREATE TABLE listdata (\n \n statement ok\n INSERT INTO listdata VALUES\n-    ('h', 'e', 'l', 'l', 'o', 0, 2),\n-    ('w', 'o', 'r', 'l', 'd', 1, 3),\n+    ('h', 'e', 'l', 'l', 'o', 1, 2),\n+    ('w', 'o', 'r', 'l', 'd', 2, 3),\n     ('b', NULL, NULL, NULL, NULL, 0, 1),\n-    (NULL, NULL, NULL, NULL, NULL, 1, 2)\n+    (NULL, NULL, NULL, NULL, NULL, 0, 2);\n \n statement ok\n CREATE VIEW lists AS\n@@ -51,10 +51,10 @@ statement ok\n CREATE VIEW ducks AS SELECT LIST_VALUE(c0, c1, c2) AS d from duckdata;\n \n statement ok\n-CREATE VIEW hello AS SELECT s AS hello FROM lists WHERE off = 0 AND length = 2\n+CREATE VIEW hello AS SELECT s AS hello FROM lists WHERE off = 1 AND length = 2\n \n statement ok\n-CREATE VIEW nulltable as SELECT s as n FROM lists WHERE off = 1 AND length = 2\n+CREATE VIEW nulltable as SELECT s as n FROM lists WHERE off = 0 AND length = 2\n \n query T\n SELECT d from ducks\n@@ -72,7 +72,7 @@ SELECT d[0:0] FROM ducks\n # constant offset/length\n # normal slice\n query T\n-SELECT s[0:2] FROM lists\n+SELECT s[1:2] FROM lists\n ----\n [h, e]\n [w, o]\n@@ -83,25 +83,25 @@ NULL\n query T\n SELECT s[1:3] FROM lists\n ----\n-[e, l]\n-[o, r]\n-[]\n+[h, e, l]\n+[w, o, r]\n+[b]\n NULL\n \n # variable length offset/length\n query T\n SELECT s[off:length+off] FROM lists\n ----\n-[h, e]\n-[o, r, l]\n+[h, e, l]\n+[o, r, l, d]\n [b]\n NULL\n \n query T\n SELECT s[off:2+off] FROM lists\n ----\n-[h, e]\n-[o, r]\n+[h, e, l]\n+[o, r, l]\n [b]\n NULL\n \n@@ -116,12 +116,11 @@ NULL\n query T\n SELECT hello[off:length+off] FROM lists, hello\n ----\n-[h, e]\n-[e, l, l]\n+[h, e, l]\n+[e, l, l, o]\n [h]\n-[e, l]\n+[h, e]\n \n-# test substrings with constant nulls in different places\n query T\n SELECT n[off:length+off] FROM lists, nulltable\n ----\n@@ -144,7 +143,7 @@ SELECT hello[off:NULL+off] FROM lists, hello\n [h, e, l, l, o]\n [e, l, l, o]\n [h, e, l, l, o]\n-[e, l, l, o]\n+[h, e, l, l, o]\n \n query T\n SELECT n[NULL:length+NULL] FROM lists, nulltable\n@@ -187,7 +186,7 @@ SELECT s[-2:] FROM lists\n NULL\n NULL\n \n-# negative length\n+# length 1\n query T\n SELECT s[0:1] FROM lists\n ----\n@@ -205,19 +204,27 @@ SELECT s[-4:-2] FROM lists\n NULL\n NULL\n \n-# length 0\n+# length 1\n query T\n SELECT s[1:1] FROM lists\n ----\n-[]\n-[]\n-[]\n+[h]\n+[w]\n+[b]\n NULL\n \n # no end\n query T\n SELECT s[1:] FROM lists\n ----\n+[h, e, l, l, o]\n+[w, o, r, l, d]\n+[b]\n+NULL\n+\n+query T\n+SELECT s[2:] FROM lists\n+----\n [e, l, l, o]\n [o, r, l, d]\n []\ndiff --git a/test/sql/window/test_list_window.test b/test/sql/window/test_list_window.test\nindex 582ce0a237b7..1428cf2e610f 100644\n--- a/test/sql/window/test_list_window.test\n+++ b/test/sql/window/test_list_window.test\n@@ -28,21 +28,21 @@ SELECT * FROM list_window ORDER BY g\n 3\t[NULL, 42]\n \n query I\n-SELECT FIRST(LIST_EXTRACT(l, 0)) FROM list_window GROUP BY g ORDER BY g;\n+SELECT FIRST(LIST_EXTRACT(l, 1)) FROM list_window GROUP BY g ORDER BY g;\n ----\n 1\n 3\n NULL\n \n query I\n-SELECT FIRST(LIST_EXTRACT(l, 1)) FROM list_window GROUP BY g ORDER BY g;\n+SELECT FIRST(LIST_EXTRACT(l, 2)) FROM list_window GROUP BY g ORDER BY g;\n ----\n 2\n NULL\n 42\n \n query I\n-SELECT FIRST(LIST_EXTRACT(l, 2)) FROM list_window GROUP BY g ORDER BY g;\n+SELECT FIRST(LIST_EXTRACT(l, 3)) FROM list_window GROUP BY g ORDER BY g;\n ----\n NULL\n NULL\n",
  "problem_statement": "0- vs. 1-based indexing\n#### What happens?\r\nArrays use a different index-base (0-based) than Postgres (1-based):\r\n\r\n#### To Reproduce\r\nDuckDB:\r\n```sql\r\nD select arr[1] as el from (select array[1,2,3] as arr) sub;\r\n\u250c\u2500\u2500\u2500\u2500\u2510\r\n\u2502 el \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2524\r\n\u2502 2  \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\nPostgres:\r\n```sql\r\npostgres=# select arr[1] as el from (select array[1,2,3] as arr) sub;\r\n el \r\n----\r\n  1\r\n(1 row)\r\n```\r\n\r\nWe checked what other systems do:\r\n\r\n* HyPer/Umbra: 1-based\r\n* BigTable: 0-based\r\n* MySQL: there are not arrays per se, the JSON extractor (`$[...]`) is [0-based](https://dev.mysql.com/doc/refman/5.7/en/json.html)\r\n#### Environment (please complete the following information):\r\n - OS: n/a\r\n - DuckDB Version: 0.3.1\r\n - DuckDB Client: n/a\r\n\r\ncc @lnkuiper \n",
  "hints_text": "Apparently 1-based indexing is in [the SQL standard](https://crate.io/docs/sql-99/en/latest/chapters/10.html#collection-data-type-s), so we should probably adopt that.\nWe like following Postgres for compatibility, but I have strong feelings about keeping 0-based indexing, because I prefer it.\n\nWhichever we choose some people will dislike it. Python uses 0-based indexing, R uses 1-based. Many of our users will be using DuckDB from either of these languages. We cannot please both.\nI agree there's always going to be discussion, but the SQL standard should probably guide the decision here...\nNote that the indexing of strings is also affected by this decision. In DuckDB, they currently use 0-based indexing like the rest of the arrays:\r\n\r\nhttps://duckdb.org/docs/sql/functions/char\r\n\r\nPostgres uses 1-based indexing for strings albeit with a quirky syntax (instead of `[...]`):\r\n\r\n```sql\r\n# select substring('hello' from 2 for 3);\r\n substring \r\n-----------\r\n ell\r\n(1 row)\r\n```\nFor substring we explicitly use 1-based indexing for compatibility with Postgres. That funky syntax also works in DuckDB :)\n> We like following Postgres for compatibility, but I have strong feelings about keeping 0-based indexing, because I prefer it.\r\n> \r\n> Whichever we choose some people will dislike it. Python uses 0-based indexing, R uses 1-based. Many of our users will be using DuckDB from either of these languages. We cannot please both.\r\n\r\nAlthough I'm a happy python user, I don't think 0-based sql semantic please me.\nCan it be an option you can `SET`? \nYou guys would be really unrivaled if it was possible to copy-and-paste any moderately complex query from Postgres to DuckDB. Being the most capable open-source RDBMS in terms of SQL, for great many people Postgres is the DBMS where they met and  liked the advanced SQL features. But having you users to get used to another dialect of SQL you are putting yourselves in the same boat with [clickhouse-local](https://clickhouse.com/docs/en/operations/utilities/clickhouse-local/), for instance. But that was just a personal story, anyway.\n> You guys would be really unrivaled if it was possible to copy-and-paste any moderately complex query from Postgres to DuckDB.\r\n\r\nCan you give an example of where this breaks for you right now perhaps?\nThere is not a particular query I'am struggling to translate now (obviously, great many ones involving arrays will break). Discarding the context, I personally like the 0-based indexing more too. But for SQL the 1-based is standard and seems to be prevalent.\nWe are planning to switch to 1-based indexing in the (near) future as indicated above. This issue is just tracking the problem until the switch happens.",
  "created_at": "2022-03-03T08:58:31Z"
}