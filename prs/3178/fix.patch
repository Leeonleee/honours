diff --git a/src/catalog/default/default_functions.cpp b/src/catalog/default/default_functions.cpp
index f6d574fb55c1..322bf0aa2e3d 100644
--- a/src/catalog/default/default_functions.cpp
+++ b/src/catalog/default/default_functions.cpp
@@ -84,7 +84,7 @@ static DefaultMacro internal_macros[] = {
 	{DEFAULT_SCHEMA, "list_prepend", {"e", "l", nullptr}, "list_concat(list_value(e), l)"},
 	{DEFAULT_SCHEMA, "array_prepend", {"el", "arr", nullptr}, "list_prepend(el, arr)"},
 	{DEFAULT_SCHEMA, "array_pop_back", {"arr", nullptr}, "arr[:LEN(arr)-1]"},
-	{DEFAULT_SCHEMA, "array_pop_front", {"arr", nullptr}, "arr[1:]"},
+	{DEFAULT_SCHEMA, "array_pop_front", {"arr", nullptr}, "arr[2:]"},
 	{DEFAULT_SCHEMA, "array_push_back", {"arr", "e", nullptr}, "list_concat(arr, list_value(e))"},
 	{DEFAULT_SCHEMA, "array_push_front", {"arr", "e", nullptr}, "list_concat(list_value(e), arr)"},
 	{DEFAULT_SCHEMA, "generate_subscripts", {"arr", "dim", nullptr}, "unnest(generate_series(1, array_length(arr, dim)))"},
diff --git a/src/function/scalar/list/array_slice.cpp b/src/function/scalar/list/array_slice.cpp
index 9d724d8dbc36..c313759fe909 100644
--- a/src/function/scalar/list/array_slice.cpp
+++ b/src/function/scalar/list/array_slice.cpp
@@ -88,7 +88,7 @@ static void ExecuteSlice(Vector &result, Vector &s, Vector &b, Vector &e, const
 		auto edata = ConstantVector::GetData<INDEX_TYPE>(e);
 
 		auto sliced = sdata[0];
-		auto begin = bdata[0];
+		auto begin = (bdata[0] > 0) ? bdata[0] - 1 : bdata[0];
 		auto end = edata[0];
 
 		auto svalid = !ConstantVector::IsNull(s);
@@ -120,6 +120,8 @@ static void ExecuteSlice(Vector &result, Vector &s, Vector &b, Vector &e, const
 			auto begin = ((INDEX_TYPE *)bdata.data)[bidx];
 			auto end = ((INDEX_TYPE *)edata.data)[eidx];
 
+			begin = (begin > 0) ? begin - 1 : begin;
+
 			auto svalid = sdata.validity.RowIsValid(sidx);
 			auto bvalid = bdata.validity.RowIsValid(bidx);
 			auto evalid = edata.validity.RowIsValid(eidx);
diff --git a/src/function/scalar/list/list_extract.cpp b/src/function/scalar/list/list_extract.cpp
index a148d1eff1fc..6062df1c72ea 100644
--- a/src/function/scalar/list/list_extract.cpp
+++ b/src/function/scalar/list/list_extract.cpp
@@ -39,6 +39,14 @@ void ListExtractTemplate(idx_t count, VectorData &list_data, VectorData &offsets
 		if (list_data.validity.RowIsValid(list_index) && offsets_data.validity.RowIsValid(offsets_index)) {
 			auto list_entry = ((list_entry_t *)list_data.data)[list_index];
 			auto offsets_entry = ((int64_t *)offsets_data.data)[offsets_index];
+
+			// 1-based indexing
+			if (offsets_entry == 0) {
+				result_mask.SetInvalid(i);
+				continue;
+			}
+			offsets_entry = (offsets_entry > 0) ? offsets_entry - 1 : offsets_entry;
+
 			idx_t child_offset;
 			if (offsets_entry < 0) {
 				if ((idx_t)-offsets_entry > list_entry.length) {
@@ -153,7 +161,7 @@ static void ExecuteListExtract(Vector &result, Vector &list, Vector &offsets, co
 static void ExecuteStringExtract(Vector &result, Vector &input_vector, Vector &subscript_vector, const idx_t count) {
 	BinaryExecutor::Execute<string_t, int32_t, string_t>(
 	    input_vector, subscript_vector, result, count, [&](string_t input_string, int32_t subscript) {
-		    return SubstringFun::SubstringScalarFunction(result, input_string, subscript + int32_t(subscript >= 0), 1);
+		    return SubstringFun::SubstringScalarFunction(result, input_string, subscript, 1);
 	    });
 }
 
