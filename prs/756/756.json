{
  "repo": "duckdb/duckdb",
  "pull_number": 756,
  "instance_id": "duckdb__duckdb-756",
  "issue_numbers": [
    "704"
  ],
  "base_commit": "ebd9140890d7de62962c570d516fe4d39ce363b6",
  "patch": "diff --git a/tools/rpkg/.Rbuildignore b/tools/rpkg/.Rbuildignore\nindex 70fe8b0a6084..9e570485d09d 100644\n--- a/tools/rpkg/.Rbuildignore\n+++ b/tools/rpkg/.Rbuildignore\n@@ -5,3 +5,6 @@ git\n configure\n ^.*\\.Rproj$\n ^\\.Rproj\\.user$\n+^tic\\.R$\n+^_pkgdown\\.yml$\n+^docs$\ndiff --git a/tools/rpkg/DESCRIPTION b/tools/rpkg/DESCRIPTION\nindex 0a5ce45f01ac..074201739c7e 100644\n--- a/tools/rpkg/DESCRIPTION\n+++ b/tools/rpkg/DESCRIPTION\n@@ -34,11 +34,10 @@ Suggests:\n     nycflights13\n Encoding: UTF-8\n LazyData: true\n-RoxygenNote: 7.1.0.9000\n+RoxygenNote: 7.1.1\n SystemRequirements: C++11\n Collate: \n-    'duckdb.R'\n     'Driver.R'\n     'Connection.R'\n     'Result.R'\n-    'duckdb-package.R'\n+    'duckdb.R'\ndiff --git a/tools/rpkg/NAMESPACE b/tools/rpkg/NAMESPACE\nindex 0f17aa9c0461..e4db36722b86 100644\n--- a/tools/rpkg/NAMESPACE\n+++ b/tools/rpkg/NAMESPACE\n@@ -36,6 +36,5 @@ import(DBI)\n import(methods)\n importFrom(DBI,dbConnect)\n importFrom(dbplyr,src_dbi)\n-importFrom(testthat,skip)\n importFrom(utils,head)\n useDynLib(duckdb, .registration = TRUE)\ndiff --git a/tools/rpkg/R/Connection.R b/tools/rpkg/R/Connection.R\nindex 24f52d676f5b..25e34e5df995 100644\n--- a/tools/rpkg/R/Connection.R\n+++ b/tools/rpkg/R/Connection.R\n@@ -1,8 +1,3 @@\n-#' @include Driver.R\n-\n-NULL\n-\n-\n duckdb_connection <- function(duckdb_driver, debug) {\n   new(\n     \"duckdb_connection\",\n@@ -12,7 +7,11 @@ duckdb_connection <- function(duckdb_driver, debug) {\n   )\n }\n \n-#' @rdname DBI\n+#' Register a R data.frame as a virtual table (view) in DuckDB without copying the data\n+#' @rdname duckdb_connection\n+#' @param conn A DuckDB connection, created by `dbConnect()`.\n+#' @param name The name for the virtual table that is registered\n+#' @param df A `data.frame` with the data for the virtual table\n #' @export\n duckdb_register <- function(conn, name, df) {\n   stopifnot(dbIsValid(conn))\n@@ -20,7 +19,10 @@ duckdb_register <- function(conn, name, df) {\n   invisible(TRUE)\n }\n \n-#' @rdname DBI\n+#' Unregister a virtual table referring to a data.frame\n+#' @rdname duckdb_connection\n+#' @param conn A DuckDB connection, created by `dbConnect()`.\n+#' @param name The name for the virtual table previously registered using `duckdb_register()`.\n #' @export\n duckdb_unregister <- function(conn, name) {\n   stopifnot(dbIsValid(conn))\n@@ -28,8 +30,8 @@ duckdb_unregister <- function(conn, name) {\n   invisible(TRUE)\n }\n \n-\n-#' @rdname DBI\n+#' DuckDB connection class\n+#' @rdname duckdb_connection\n #' @export\n setClass(\n   \"duckdb_connection\",\n@@ -37,7 +39,7 @@ setClass(\n   slots = list(dbdir = \"character\", conn_ref = \"externalptr\", driver = \"duckdb_driver\", debug = \"logical\")\n )\n \n-#' @rdname DBI\n+#' @rdname duckdb_connection\n #' @inheritParams methods::show\n #' @export\n setMethod(\n@@ -47,7 +49,7 @@ setMethod(\n   }\n )\n \n-#' @rdname DBI\n+#' @rdname duckdb_connection\n #' @inheritParams DBI::dbIsValid\n #' @export\n setMethod(\n@@ -66,8 +68,8 @@ setMethod(\n   }\n )\n \n-#' @rdname DBI\n-#' @inheritParams DBI::dbDisconnect\n+#' @rdname duckdb_connection\n+#' @param shutdown Shut down the DuckDB database instance that this connection refers to.\n #' @export\n setMethod(\n   \"dbDisconnect\", \"duckdb_connection\",\n@@ -84,12 +86,12 @@ setMethod(\n   }\n )\n \n-#' @rdname DBI\n+#' @rdname duckdb_connection\n #' @inheritParams DBI::dbSendQuery\n #' @export\n setMethod(\n   \"dbSendQuery\", c(\"duckdb_connection\", \"character\"),\n-  function(conn, statement, ..., immediate = FALSE) {\n+  function(conn, statement, ...) {\n     if (conn@debug) {\n       cat(\"Q \", statement, \"\\n\")\n     }\n@@ -111,8 +113,7 @@ setMethod(\n   }\n )\n \n-\n-#' @rdname DBI\n+#' @rdname duckdb_connection\n #' @inheritParams DBI::dbDataType\n #' @export\n setMethod(\n@@ -126,12 +127,13 @@ duckdb_random_string <- function(x) {\n   paste(sample(letters, 10, replace = TRUE), collapse = \"\")\n }\n \n-#' @rdname DBI\n+#' @rdname duckdb_connection\n #' @inheritParams DBI::dbWriteTable\n-#' @param overwrite Allow overwriting the destination table. Cannot be\n-#'   `TRUE` if `append` is also `TRUE`.\n-#' @param append Allow appending to the destination table. Cannot be\n-#'   `TRUE` if `overwrite` is also `TRUE`.\n+#' @param row.names Whether the row.names of the data.frame should be preserved\n+#' @param overwrite If a table with the given name already exists, should it be overwritten?\n+#' @param append If a table with the given name already exists, just try to append the passed data to it\n+#' @param field.types Override the auto-generated SQL types\n+#' @param temporary Should the created table be temporary?\n #' @export\n setMethod(\n   \"dbWriteTable\", c(\"duckdb_connection\", \"character\", \"data.frame\"),\n@@ -150,7 +152,6 @@ setMethod(\n \n     # TODO: start a transaction if one is not already running\n \n-\n     if (overwrite && append) {\n       stop(\"Setting both overwrite and append makes no sense\")\n     }\n@@ -235,7 +236,7 @@ setMethod(\n   }\n )\n \n-#' @rdname DBI\n+#' @rdname duckdb_connection\n #' @inheritParams DBI::dbListTables\n #' @export\n setMethod(\n@@ -250,7 +251,7 @@ setMethod(\n   }\n )\n \n-#' @rdname DBI\n+#' @rdname duckdb_connection\n #' @inheritParams DBI::dbExistsTable\n #' @export\n setMethod(\n@@ -282,7 +283,7 @@ setMethod(\n   }\n )\n \n-#' @rdname DBI\n+#' @rdname duckdb_connection\n #' @inheritParams DBI::dbListFields\n #' @export\n setMethod(\n@@ -299,7 +300,7 @@ setMethod(\n   }\n )\n \n-#' @rdname DBI\n+#' @rdname duckdb_connection\n #' @inheritParams DBI::dbRemoveTable\n #' @export\n setMethod(\n@@ -313,7 +314,7 @@ setMethod(\n   }\n )\n \n-#' @rdname DBI\n+#' @rdname duckdb_connection\n #' @inheritParams DBI::dbGetInfo\n #' @export\n setMethod(\n@@ -329,7 +330,7 @@ setMethod(\n   }\n )\n \n-#' @rdname DBI\n+#' @rdname duckdb_connection\n #' @inheritParams DBI::dbBegin\n #' @export\n setMethod(\n@@ -340,7 +341,7 @@ setMethod(\n   }\n )\n \n-#' @rdname DBI\n+#' @rdname duckdb_connection\n #' @inheritParams DBI::dbCommit\n #' @export\n setMethod(\n@@ -351,7 +352,7 @@ setMethod(\n   }\n )\n \n-#' @rdname DBI\n+#' @rdname duckdb_connection\n #' @inheritParams DBI::dbRollback\n #' @export\n setMethod(\n@@ -362,7 +363,19 @@ setMethod(\n   }\n )\n \n-#' @rdname DBI\n+#' Directly reads a CSV file into DuckDB, tries to detect and create the correct schema for it.\n+#' @rdname duckdb_connection\n+#' @param files One or more CSV file names, should all have the same structure though\n+#' @param tablename The database table the files should be read into\n+#' @param header Whether or not the CSV files have a separate header in the first line\n+#' @param na.strings Which strings in the CSV files should be considered to be NULL\n+#' @param nrow.check How many rows should be read from the CSV file to figure out data types\n+#' @param delim Which field separator should be used\n+#' @param quote Which quote character is used for columns in the CSV file\n+#' @param col.names Override the detected or generated column names\n+#' @param lower.case.names Transform column names to lower case\n+#' @param sep Alias for delim for compatibility\n+#' @param transaction Should a transaction be used for the entire operation\n #' @export\n read_csv_duckdb <- duckdb.read.csv <- function(conn, files, tablename, header = TRUE, na.strings = \"\", nrow.check = 500,\n                                                delim = \",\", quote = \"\\\"\", col.names = NULL, lower.case.names = FALSE, sep = delim, transaction = TRUE, ...) {\ndiff --git a/tools/rpkg/R/Driver.R b/tools/rpkg/R/Driver.R\nindex 4285e8119d36..981397ad6409 100644\n--- a/tools/rpkg/R/Driver.R\n+++ b/tools/rpkg/R/Driver.R\n@@ -1,20 +1,15 @@\n-#' @include duckdb.R\n-NULL\n-\n-#' DBI methods\n-#'\n-#' Implementations of pure virtual functions defined in the `DBI` package.\n-#' @name DBI\n-NULL\n-\n DBDIR_MEMORY <- \":memory:\"\n \n-#' DuckDB driver\n+#' @title DuckDB Driver\n #'\n-#' TBD.\n+#' @description A DuckDB database instance. \n #'\n-#' @export\n+#' @param dbdir The file in which the DuckDB database should be stored\n+#' @param read_only Whether the database file should be opened in read-only mode\n+#'\n+#' @name duckdb_driver\n #' @import methods DBI\n+#' @export\n #' @examples\n #' \\dontrun{\n #' #' library(DBI)\n@@ -31,7 +26,13 @@ duckdb <- function(dbdir = DBDIR_MEMORY, read_only = FALSE) {\n   )\n }\n \n-#' @rdname DBI\n+check_flag <- function(x) {\n+  if (is.null(x) || length(x) != 1 || is.na(x) || !is.logical(x)) {\n+    stop(\"flags need to be scalar logicals\")\n+  }\n+}\n+\n+#' @rdname duckdb_driver\n #' @export\n setClass(\"duckdb_driver\", contains = \"DBIDriver\", slots = list(database_ref = \"externalptr\", dbdir = \"character\", read_only = \"logical\"))\n \n@@ -47,7 +48,7 @@ drv_to_string <- function(drv) {\n   sprintf(\"<duckdb_driver %s dbdir='%s' read_only=%s>\", extptr_str(drv@database_ref), drv@dbdir, drv@read_only)\n }\n \n-#' @rdname DBI\n+#' @rdname duckdb_driver\n #' @inheritParams methods::show\n #' @export\n setMethod(\n@@ -58,8 +59,9 @@ setMethod(\n   }\n )\n \n-#' @rdname DBI\n+#' @rdname duckdb_driver\n #' @inheritParams DBI::dbConnect\n+#' @param debug Print additional debug information such as queries\n #' @export\n setMethod(\n   \"dbConnect\", \"duckdb_driver\",\n@@ -81,7 +83,7 @@ setMethod(\n   }\n )\n \n-#' @rdname DBI\n+#' @rdname duckdb_driver\n #' @inheritParams DBI::dbDataType\n #' @export\n setMethod(\n@@ -114,7 +116,7 @@ setMethod(\n   }\n )\n \n-#' @rdname DBI\n+#' @rdname duckdb_driver\n #' @inheritParams DBI::dbIsValid\n #' @export\n setMethod(\n@@ -135,7 +137,7 @@ setMethod(\n   }\n )\n \n-#' @rdname DBI\n+#' @rdname duckdb_driver\n #' @inheritParams DBI::dbGetInfo\n #' @export\n setMethod(\n@@ -146,7 +148,7 @@ setMethod(\n )\n \n \n-#' @rdname DBI\n+#' @rdname duckdb_driver\n #' @export\n duckdb_shutdown <- function(drv) {\n   if (!is(drv, \"duckdb_driver\")) {\n@@ -167,6 +169,9 @@ is_installed <- function(pkg) {\n \n #' @importFrom DBI dbConnect\n #' @importFrom dbplyr src_dbi\n+#' @param path The file in which the DuckDB database should be stored\n+#' @param create Create a new database if none is present in `path`\n+#' @rdname duckdb_driver\n #' @export\n src_duckdb <- function(path = \":memory:\", create = FALSE, read_only = FALSE) {\n   if (!is_installed(\"dbplyr\")) {\ndiff --git a/tools/rpkg/R/Result.R b/tools/rpkg/R/Result.R\nindex 5ab5d77e35bf..4ef8c9d92d9a 100644\n--- a/tools/rpkg/R/Result.R\n+++ b/tools/rpkg/R/Result.R\n@@ -1,4 +1,7 @@\n-#' @include Connection.R\n+#' DuckDB Result Set\n+#'\n+#' Methods for accessing result sets for queries on DuckDB connections.\n+#' @name duckdb_result\n NULL\n \n duckdb_result <- function(connection, stmt_lst) {\n@@ -26,7 +29,8 @@ duckdb_execute <- function(res) {\n   }\n }\n \n-#' @rdname DBI\n+\n+#' @rdname duckdb_result\n #' @export\n setClass(\n   \"duckdb_result\",\n@@ -38,7 +42,7 @@ setClass(\n   )\n )\n \n-#' @rdname DBI\n+#' @rdname duckdb_result\n #' @inheritParams methods::show\n #' @export\n setMethod(\n@@ -48,7 +52,7 @@ setMethod(\n   }\n )\n \n-#' @rdname DBI\n+#' @rdname duckdb_result\n #' @inheritParams DBI::dbClearResult\n #' @export\n setMethod(\n@@ -73,7 +77,7 @@ fix_rownames <- function(df) {\n }\n \n \n-#' @rdname DBI\n+#' @rdname duckdb_result\n #' @inheritParams DBI::dbFetch\n #' @importFrom utils head\n #' @export\n@@ -128,7 +132,7 @@ setMethod(\n   }\n )\n \n-#' @rdname DBI\n+#' @rdname duckdb_result\n #' @inheritParams DBI::dbHasCompleted\n #' @export\n setMethod(\n@@ -144,7 +148,7 @@ setMethod(\n   }\n )\n \n-#' @rdname DBI\n+#' @rdname duckdb_result\n #' @inheritParams DBI::dbGetInfo\n #' @export\n setMethod(\n@@ -155,7 +159,7 @@ setMethod(\n   }\n )\n \n-#' @rdname DBI\n+#' @rdname duckdb_result\n #' @inheritParams DBI::dbIsValid\n #' @export\n setMethod(\n@@ -165,7 +169,7 @@ setMethod(\n   }\n )\n \n-#' @rdname DBI\n+#' @rdname duckdb_result\n #' @inheritParams DBI::dbGetStatement\n #' @export\n setMethod(\n@@ -178,7 +182,7 @@ setMethod(\n   }\n )\n \n-#' @rdname DBI\n+#' @rdname duckdb_result\n #' @inheritParams DBI::dbColumnInfo\n #' @export\n setMethod(\n@@ -189,7 +193,7 @@ setMethod(\n   }\n )\n \n-#' @rdname DBI\n+#' @rdname duckdb_result\n #' @inheritParams DBI::dbGetRowCount\n #' @export\n setMethod(\n@@ -202,7 +206,7 @@ setMethod(\n   }\n )\n \n-#' @rdname DBI\n+#' @rdname duckdb_result\n #' @inheritParams DBI::dbGetRowsAffected\n #' @export\n setMethod(\n@@ -215,9 +219,8 @@ setMethod(\n   }\n )\n \n-#' @rdname DBI\n+#' @rdname duckdb_result\n #' @inheritParams DBI::dbBind\n-#' @importFrom testthat skip\n #' @export\n setMethod(\n   \"dbBind\", \"duckdb_result\",\ndiff --git a/tools/rpkg/R/duckdb-package.R b/tools/rpkg/R/duckdb-package.R\ndeleted file mode 100644\nindex 7c508071d805..000000000000\n--- a/tools/rpkg/R/duckdb-package.R\n+++ /dev/null\n@@ -1,4 +0,0 @@\n-## usethis namespace: start\n-#' @useDynLib duckdb, .registration = TRUE\n-## usethis namespace: end\n-NULL\ndiff --git a/tools/rpkg/R/duckdb.R b/tools/rpkg/R/duckdb.R\nindex 9e58ebdd4b7a..160d166c8002 100644\n--- a/tools/rpkg/R/duckdb.R\n+++ b/tools/rpkg/R/duckdb.R\n@@ -1,9 +1,11 @@\n-#' @details TBD.\n-\"_PACKAGE\"\n-\n-check_flag <- function(x) {\n-  if (is.null(x) || length(x) != 1 || is.na(x) || !is.logical(x)) {\n-    stop(\"flags need to be scalar logicals\")\n-  }\n-}\n-\n+#' DuckDB client package for R\n+#'\n+#' @description R client package for DuckDB: an embeddable SQL OLAP Database Management System.\n+#'\n+#' More information at at https://duckdb.org/.\n+## usethis namespace: start\n+#' @useDynLib duckdb, .registration = TRUE\n+## usethis namespace: end\n+#' @docType package\n+#' @name duckdb-package\n+NULL\ndiff --git a/tools/rpkg/_pkgdown.yml b/tools/rpkg/_pkgdown.yml\nnew file mode 100644\nindex 000000000000..c951c9e262db\n--- /dev/null\n+++ b/tools/rpkg/_pkgdown.yml\n@@ -0,0 +1,13 @@\n+reference:\n+- title: Driver\n+  contents:\n+  - duckdb_driver\n+- title: Connection\n+  contents:\n+  - duckdb_connection\n+- title: Result\n+  contents:\n+  - duckdb_result\n+- title: duckdb Package\n+  contents:\n+  - duckdb-package\ndiff --git a/tools/rpkg/configure b/tools/rpkg/configure\nindex e2ef016e10af..54c65be373f2 100755\n--- a/tools/rpkg/configure\n+++ b/tools/rpkg/configure\n@@ -4,5 +4,10 @@ if [ ! -f \"../../scripts/amalgamation.py\" ]; then\n \techo \"Could find neither the amalgamation build script\"\n \texit 1\n fi\n-(cd ../.. && python scripts/amalgamation.py --source=tools/rpkg/src/duckdb.cpp --header=tools/rpkg/src/duckdb.hpp)\n-(cd ../.. && python extension/parquet/parquet_amalgamation.py --source=tools/rpkg/src/parquet-extension.cpp --header=tools/rpkg/src/parquet-extension.hpp)\n+\n+# R issues a warning for .hpp files, use .h to silence it\n+(cd ../.. && python scripts/amalgamation.py --source=tools/rpkg/src/duckdb.cpp --header=tools/rpkg/src/duckdb.h)\n+(cd ../.. && python extension/parquet/parquet_amalgamation.py --source=tools/rpkg/src/parquet-extension.cpp --header=tools/rpkg/src/parquet-extension.h)\n+cp src/parquet-extension.h src/parquet-extension.h.tmp\n+sed 's/duckdb[.]hpp/duckdb.h/g' src/parquet-extension.h.tmp > src/parquet-extension.h\n+rm src/parquet-extension.h.tmp\ndiff --git a/tools/rpkg/man/DBI.Rd b/tools/rpkg/man/DBI.Rd\ndeleted file mode 100644\nindex dce696ee3226..000000000000\n--- a/tools/rpkg/man/DBI.Rd\n+++ /dev/null\n@@ -1,186 +0,0 @@\n-% Generated by roxygen2: do not edit by hand\n-% Please edit documentation in R/Driver.R, R/Connection.R, R/Result.R\n-\\docType{class}\n-\\name{DBI}\n-\\alias{DBI}\n-\\alias{duckdb_driver-class}\n-\\alias{show,duckdb_driver-method}\n-\\alias{dbConnect,duckdb_driver-method}\n-\\alias{dbDataType,duckdb_driver-method}\n-\\alias{dbIsValid,duckdb_driver-method}\n-\\alias{dbGetInfo,duckdb_driver-method}\n-\\alias{duckdb_shutdown}\n-\\alias{duckdb_register}\n-\\alias{duckdb_unregister}\n-\\alias{duckdb_connection-class}\n-\\alias{show,duckdb_connection-method}\n-\\alias{dbIsValid,duckdb_connection-method}\n-\\alias{dbDisconnect,duckdb_connection-method}\n-\\alias{dbSendQuery,duckdb_connection,character-method}\n-\\alias{dbDataType,duckdb_connection-method}\n-\\alias{dbWriteTable,duckdb_connection,character,data.frame-method}\n-\\alias{dbListTables,duckdb_connection-method}\n-\\alias{dbExistsTable,duckdb_connection,character-method}\n-\\alias{dbListFields,duckdb_connection,character-method}\n-\\alias{dbRemoveTable,duckdb_connection,character-method}\n-\\alias{dbGetInfo,duckdb_connection-method}\n-\\alias{dbBegin,duckdb_connection-method}\n-\\alias{dbCommit,duckdb_connection-method}\n-\\alias{dbRollback,duckdb_connection-method}\n-\\alias{read_csv_duckdb}\n-\\alias{duckdb_result-class}\n-\\alias{show,duckdb_result-method}\n-\\alias{dbClearResult,duckdb_result-method}\n-\\alias{dbFetch,duckdb_result-method}\n-\\alias{dbHasCompleted,duckdb_result-method}\n-\\alias{dbGetInfo,duckdb_result-method}\n-\\alias{dbIsValid,duckdb_result-method}\n-\\alias{dbGetStatement,duckdb_result-method}\n-\\alias{dbColumnInfo,duckdb_result-method}\n-\\alias{dbGetRowCount,duckdb_result-method}\n-\\alias{dbGetRowsAffected,duckdb_result-method}\n-\\alias{dbBind,duckdb_result-method}\n-\\title{DBI methods}\n-\\usage{\n-\\S4method{show}{duckdb_driver}(object)\n-\n-\\S4method{dbConnect}{duckdb_driver}(\n-  drv,\n-  dbdir = DBDIR_MEMORY,\n-  ...,\n-  debug = getOption(\"duckdb.debug\", FALSE),\n-  read_only = FALSE\n-)\n-\n-\\S4method{dbDataType}{duckdb_driver}(dbObj, obj, ...)\n-\n-\\S4method{dbIsValid}{duckdb_driver}(dbObj, ...)\n-\n-\\S4method{dbGetInfo}{duckdb_driver}(dbObj, ...)\n-\n-duckdb_shutdown(drv)\n-\n-duckdb_register(conn, name, df)\n-\n-duckdb_unregister(conn, name)\n-\n-\\S4method{show}{duckdb_connection}(object)\n-\n-\\S4method{dbIsValid}{duckdb_connection}(dbObj, ...)\n-\n-\\S4method{dbDisconnect}{duckdb_connection}(conn, ..., shutdown = FALSE)\n-\n-\\S4method{dbSendQuery}{duckdb_connection,character}(conn, statement, ..., immediate = FALSE)\n-\n-\\S4method{dbDataType}{duckdb_connection}(dbObj, obj, ...)\n-\n-\\S4method{dbWriteTable}{duckdb_connection,character,data.frame}(\n-  conn,\n-  name,\n-  value,\n-  row.names = FALSE,\n-  overwrite = FALSE,\n-  append = FALSE,\n-  field.types = NULL,\n-  temporary = FALSE,\n-  ...\n-)\n-\n-\\S4method{dbListTables}{duckdb_connection}(conn, ...)\n-\n-\\S4method{dbExistsTable}{duckdb_connection,character}(conn, name, ...)\n-\n-\\S4method{dbListFields}{duckdb_connection,character}(conn, name, ...)\n-\n-\\S4method{dbRemoveTable}{duckdb_connection,character}(conn, name, ...)\n-\n-\\S4method{dbGetInfo}{duckdb_connection}(dbObj, ...)\n-\n-\\S4method{dbBegin}{duckdb_connection}(conn, ...)\n-\n-\\S4method{dbCommit}{duckdb_connection}(conn, ...)\n-\n-\\S4method{dbRollback}{duckdb_connection}(conn, ...)\n-\n-read_csv_duckdb(\n-  conn,\n-  files,\n-  tablename,\n-  header = TRUE,\n-  na.strings = \"\",\n-  nrow.check = 500,\n-  delim = \",\",\n-  quote = \"\\\\\"\",\n-  col.names = NULL,\n-  lower.case.names = FALSE,\n-  sep = delim,\n-  transaction = TRUE,\n-  ...\n-)\n-\n-\\S4method{show}{duckdb_result}(object)\n-\n-\\S4method{dbClearResult}{duckdb_result}(res, ...)\n-\n-\\S4method{dbFetch}{duckdb_result}(res, n = -1, ...)\n-\n-\\S4method{dbHasCompleted}{duckdb_result}(res, ...)\n-\n-\\S4method{dbGetInfo}{duckdb_result}(dbObj, ...)\n-\n-\\S4method{dbIsValid}{duckdb_result}(dbObj, ...)\n-\n-\\S4method{dbGetStatement}{duckdb_result}(res, ...)\n-\n-\\S4method{dbColumnInfo}{duckdb_result}(res, ...)\n-\n-\\S4method{dbGetRowCount}{duckdb_result}(res, ...)\n-\n-\\S4method{dbGetRowsAffected}{duckdb_result}(res, ...)\n-\n-\\S4method{dbBind}{duckdb_result}(res, params, ...)\n-}\n-\\arguments{\n-\\item{object}{Any R object}\n-\n-\\item{drv}{an object that inherits from \\linkS4class{DBIDriver},\n-or an existing \\linkS4class{DBIConnection}\n-object (in order to clone an existing connection).}\n-\n-\\item{...}{authentication arguments needed by the DBMS instance; these\n-typically include \\code{user}, \\code{password}, \\code{host}, \\code{port}, \\code{dbname}, etc.\n-For details see the appropriate \\code{DBIDriver}.}\n-\n-\\item{dbObj}{A object inheriting from \\linkS4class{DBIDriver}\n-or \\linkS4class{DBIConnection}}\n-\n-\\item{obj}{An R object whose SQL type we want to determine.}\n-\n-\\item{conn}{A \\linkS4class{DBIConnection} object, as returned by\n-\\code{\\link[DBI:dbConnect]{dbConnect()}}.}\n-\n-\\item{name}{A character string specifying the unquoted DBMS table name,\n-or the result of a call to \\code{\\link[DBI:dbQuoteIdentifier]{dbQuoteIdentifier()}}.}\n-\n-\\item{statement}{a character string containing SQL.}\n-\n-\\item{value}{a \\link{data.frame} (or coercible to data.frame).}\n-\n-\\item{overwrite}{Allow overwriting the destination table. Cannot be\n-`TRUE` if `append` is also `TRUE`.}\n-\n-\\item{append}{Allow appending to the destination table. Cannot be\n-`TRUE` if `overwrite` is also `TRUE`.}\n-\n-\\item{res}{An object inheriting from \\linkS4class{DBIResult}.}\n-\n-\\item{n}{maximum number of records to retrieve per fetch. Use \\code{n = -1}\n-or \\code{n = Inf}\n-to retrieve all pending records.  Some implementations may recognize other\n-special values.}\n-\n-\\item{params}{A list of bindings, named or unnamed.}\n-}\n-\\description{\n-Implementations of pure virtual functions defined in the `DBI` package.\n-}\ndiff --git a/tools/rpkg/man/duckdb-package.Rd b/tools/rpkg/man/duckdb-package.Rd\nindex 7a6f450f3890..1089ad14ebb5 100644\n--- a/tools/rpkg/man/duckdb-package.Rd\n+++ b/tools/rpkg/man/duckdb-package.Rd\n@@ -2,33 +2,10 @@\n % Please edit documentation in R/duckdb.R\n \\docType{package}\n \\name{duckdb-package}\n-\\alias{duckdb}\n \\alias{duckdb-package}\n-\\title{duckdb: DBI Package for the DuckDB Database Management System}\n+\\title{DuckDB client package for R}\n \\description{\n-DuckDB is an embedded analytical data management\n-    system with SQL support. This package includes all of DuckDB as well\n-    as R DBI & dplyr connectors.\n-}\n-\\details{\n-TBD.\n-}\n-\\seealso{\n-Useful links:\n-\\itemize{\n-  \\item \\url{https://www.duckdb.org}\n-  \\item \\url{https://github.com/cwida/duckdb}\n-  \\item Report bugs at \\url{https://github.com/cwida/duckdb/issues}\n-}\n-\n-}\n-\\author{\n-\\strong{Maintainer}: Hannes M\u00fchleisen \\email{hannes@cwi.nl} (\\href{https://orcid.org/0000-0001-8552-0029}{ORCID})\n-\n-Authors:\n-\\itemize{\n-  \\item Mark Raasveldt \\email{mark.raasveldt@cwi.nl} (\\href{https://orcid.org/0000-0001-5005-6844}{ORCID})\n-  \\item DuckDB Contributors\n-}\n+R client package for DuckDB: an embeddable SQL OLAP Database Management System.\n \n+More information at at https://duckdb.org/.\n }\ndiff --git a/tools/rpkg/man/duckdb.Rd b/tools/rpkg/man/duckdb.Rd\ndeleted file mode 100644\nindex 3d5c3d6b0396..000000000000\n--- a/tools/rpkg/man/duckdb.Rd\n+++ /dev/null\n@@ -1,18 +0,0 @@\n-% Generated by roxygen2: do not edit by hand\n-% Please edit documentation in R/Driver.R\n-\\name{duckdb}\n-\\alias{duckdb}\n-\\title{DuckDB driver}\n-\\usage{\n-duckdb(dbdir = DBDIR_MEMORY, read_only = FALSE)\n-}\n-\\description{\n-TBD.\n-}\n-\\examples{\n-\\dontrun{\n-#' library(DBI)\n-duckdb::duckdb()\n-}\n-\n-}\ndiff --git a/tools/rpkg/man/duckdb_connection.Rd b/tools/rpkg/man/duckdb_connection.Rd\nnew file mode 100644\nindex 000000000000..ff0f64efd42b\n--- /dev/null\n+++ b/tools/rpkg/man/duckdb_connection.Rd\n@@ -0,0 +1,146 @@\n+% Generated by roxygen2: do not edit by hand\n+% Please edit documentation in R/Connection.R\n+\\docType{class}\n+\\name{duckdb_register}\n+\\alias{duckdb_register}\n+\\alias{duckdb_unregister}\n+\\alias{duckdb_connection-class}\n+\\alias{show,duckdb_connection-method}\n+\\alias{dbIsValid,duckdb_connection-method}\n+\\alias{dbDisconnect,duckdb_connection-method}\n+\\alias{dbSendQuery,duckdb_connection,character-method}\n+\\alias{dbDataType,duckdb_connection-method}\n+\\alias{dbWriteTable,duckdb_connection,character,data.frame-method}\n+\\alias{dbListTables,duckdb_connection-method}\n+\\alias{dbExistsTable,duckdb_connection,character-method}\n+\\alias{dbListFields,duckdb_connection,character-method}\n+\\alias{dbRemoveTable,duckdb_connection,character-method}\n+\\alias{dbGetInfo,duckdb_connection-method}\n+\\alias{dbBegin,duckdb_connection-method}\n+\\alias{dbCommit,duckdb_connection-method}\n+\\alias{dbRollback,duckdb_connection-method}\n+\\alias{read_csv_duckdb}\n+\\title{Register a R data.frame as a virtual table (view) in DuckDB without copying the data}\n+\\usage{\n+duckdb_register(conn, name, df)\n+\n+duckdb_unregister(conn, name)\n+\n+\\S4method{show}{duckdb_connection}(object)\n+\n+\\S4method{dbIsValid}{duckdb_connection}(dbObj, ...)\n+\n+\\S4method{dbDisconnect}{duckdb_connection}(conn, ..., shutdown = FALSE)\n+\n+\\S4method{dbSendQuery}{duckdb_connection,character}(conn, statement, ...)\n+\n+\\S4method{dbDataType}{duckdb_connection}(dbObj, obj, ...)\n+\n+\\S4method{dbWriteTable}{duckdb_connection,character,data.frame}(\n+  conn,\n+  name,\n+  value,\n+  row.names = FALSE,\n+  overwrite = FALSE,\n+  append = FALSE,\n+  field.types = NULL,\n+  temporary = FALSE,\n+  ...\n+)\n+\n+\\S4method{dbListTables}{duckdb_connection}(conn, ...)\n+\n+\\S4method{dbExistsTable}{duckdb_connection,character}(conn, name, ...)\n+\n+\\S4method{dbListFields}{duckdb_connection,character}(conn, name, ...)\n+\n+\\S4method{dbRemoveTable}{duckdb_connection,character}(conn, name, ...)\n+\n+\\S4method{dbGetInfo}{duckdb_connection}(dbObj, ...)\n+\n+\\S4method{dbBegin}{duckdb_connection}(conn, ...)\n+\n+\\S4method{dbCommit}{duckdb_connection}(conn, ...)\n+\n+\\S4method{dbRollback}{duckdb_connection}(conn, ...)\n+\n+read_csv_duckdb(\n+  conn,\n+  files,\n+  tablename,\n+  header = TRUE,\n+  na.strings = \"\",\n+  nrow.check = 500,\n+  delim = \",\",\n+  quote = \"\\\\\"\",\n+  col.names = NULL,\n+  lower.case.names = FALSE,\n+  sep = delim,\n+  transaction = TRUE,\n+  ...\n+)\n+}\n+\\arguments{\n+\\item{conn}{A DuckDB connection, created by `dbConnect()`.}\n+\n+\\item{name}{The name for the virtual table previously registered using `duckdb_register()`.}\n+\n+\\item{df}{A `data.frame` with the data for the virtual table}\n+\n+\\item{object}{Any R object}\n+\n+\\item{dbObj}{An object inheriting from \\linkS4class{DBIObject},\n+i.e. \\linkS4class{DBIDriver}, \\linkS4class{DBIConnection},\n+or a \\linkS4class{DBIResult}}\n+\n+\\item{...}{Other arguments to methods.}\n+\n+\\item{shutdown}{Shut down the DuckDB database instance that this connection refers to.}\n+\n+\\item{statement}{a character string containing SQL.}\n+\n+\\item{obj}{An R object whose SQL type we want to determine.}\n+\n+\\item{value}{a \\link{data.frame} (or coercible to data.frame).}\n+\n+\\item{row.names}{Whether the row.names of the data.frame should be preserved}\n+\n+\\item{overwrite}{If a table with the given name already exists, should it be overwritten?}\n+\n+\\item{append}{If a table with the given name already exists, just try to append the passed data to it}\n+\n+\\item{field.types}{Override the auto-generated SQL types}\n+\n+\\item{temporary}{Should the created table be temporary?}\n+\n+\\item{files}{One or more CSV file names, should all have the same structure though}\n+\n+\\item{tablename}{The database table the files should be read into}\n+\n+\\item{header}{Whether or not the CSV files have a separate header in the first line}\n+\n+\\item{na.strings}{Which strings in the CSV files should be considered to be NULL}\n+\n+\\item{nrow.check}{How many rows should be read from the CSV file to figure out data types}\n+\n+\\item{delim}{Which field separator should be used}\n+\n+\\item{quote}{Which quote character is used for columns in the CSV file}\n+\n+\\item{col.names}{Override the detected or generated column names}\n+\n+\\item{lower.case.names}{Transform column names to lower case}\n+\n+\\item{sep}{Alias for delim for compatibility}\n+\n+\\item{transaction}{Should a transaction be used for the entire operation}\n+}\n+\\description{\n+Register a R data.frame as a virtual table (view) in DuckDB without copying the data\n+\n+Unregister a virtual table referring to a data.frame\n+\n+DuckDB connection class\n+\n+Directly reads a CSV file into DuckDB, tries to detect and create the correct schema for it.\n+}\ndiff --git a/tools/rpkg/man/duckdb_driver.Rd b/tools/rpkg/man/duckdb_driver.Rd\nnew file mode 100644\nindex 000000000000..7ae1043091b3\n--- /dev/null\n+++ b/tools/rpkg/man/duckdb_driver.Rd\n@@ -0,0 +1,74 @@\n+% Generated by roxygen2: do not edit by hand\n+% Please edit documentation in R/Driver.R\n+\\docType{class}\n+\\name{duckdb_driver}\n+\\alias{duckdb_driver}\n+\\alias{duckdb}\n+\\alias{duckdb_driver-class}\n+\\alias{show,duckdb_driver-method}\n+\\alias{dbConnect,duckdb_driver-method}\n+\\alias{dbDataType,duckdb_driver-method}\n+\\alias{dbIsValid,duckdb_driver-method}\n+\\alias{dbGetInfo,duckdb_driver-method}\n+\\alias{duckdb_shutdown}\n+\\alias{src_duckdb}\n+\\title{DuckDB Driver}\n+\\usage{\n+duckdb(dbdir = DBDIR_MEMORY, read_only = FALSE)\n+\n+\\S4method{show}{duckdb_driver}(object)\n+\n+\\S4method{dbConnect}{duckdb_driver}(\n+  drv,\n+  dbdir = DBDIR_MEMORY,\n+  ...,\n+  debug = getOption(\"duckdb.debug\", FALSE),\n+  read_only = FALSE\n+)\n+\n+\\S4method{dbDataType}{duckdb_driver}(dbObj, obj, ...)\n+\n+\\S4method{dbIsValid}{duckdb_driver}(dbObj, ...)\n+\n+\\S4method{dbGetInfo}{duckdb_driver}(dbObj, ...)\n+\n+duckdb_shutdown(drv)\n+\n+src_duckdb(path = \":memory:\", create = FALSE, read_only = FALSE)\n+}\n+\\arguments{\n+\\item{dbdir}{The file in which the DuckDB database should be stored}\n+\n+\\item{read_only}{Whether the database file should be opened in read-only mode}\n+\n+\\item{object}{Any R object}\n+\n+\\item{drv}{an object that inherits from \\linkS4class{DBIDriver},\n+or an existing \\linkS4class{DBIConnection}\n+object (in order to clone an existing connection).}\n+\n+\\item{...}{authentication arguments needed by the DBMS instance; these\n+typically include \\code{user}, \\code{password}, \\code{host}, \\code{port}, \\code{dbname}, etc.\n+For details see the appropriate \\code{DBIDriver}.}\n+\n+\\item{debug}{Print additional debug information such as queries}\n+\n+\\item{dbObj}{A object inheriting from \\linkS4class{DBIDriver}\n+or \\linkS4class{DBIConnection}}\n+\n+\\item{obj}{An R object whose SQL type we want to determine.}\n+\n+\\item{path}{The file in which the DuckDB database should be stored}\n+\n+\\item{create}{Create a new database if none is present in `path`}\n+}\n+\\description{\n+A DuckDB database instance.\n+}\n+\\examples{\n+\\dontrun{\n+#' library(DBI)\n+duckdb::duckdb()\n+}\n+\n+}\ndiff --git a/tools/rpkg/man/duckdb_result.Rd b/tools/rpkg/man/duckdb_result.Rd\nnew file mode 100644\nindex 000000000000..67f6e54eca19\n--- /dev/null\n+++ b/tools/rpkg/man/duckdb_result.Rd\n@@ -0,0 +1,62 @@\n+% Generated by roxygen2: do not edit by hand\n+% Please edit documentation in R/Result.R\n+\\docType{class}\n+\\name{duckdb_result}\n+\\alias{duckdb_result}\n+\\alias{duckdb_result-class}\n+\\alias{show,duckdb_result-method}\n+\\alias{dbClearResult,duckdb_result-method}\n+\\alias{dbFetch,duckdb_result-method}\n+\\alias{dbHasCompleted,duckdb_result-method}\n+\\alias{dbGetInfo,duckdb_result-method}\n+\\alias{dbIsValid,duckdb_result-method}\n+\\alias{dbGetStatement,duckdb_result-method}\n+\\alias{dbColumnInfo,duckdb_result-method}\n+\\alias{dbGetRowCount,duckdb_result-method}\n+\\alias{dbGetRowsAffected,duckdb_result-method}\n+\\alias{dbBind,duckdb_result-method}\n+\\title{DuckDB Result Set}\n+\\usage{\n+\\S4method{show}{duckdb_result}(object)\n+\n+\\S4method{dbClearResult}{duckdb_result}(res, ...)\n+\n+\\S4method{dbFetch}{duckdb_result}(res, n = -1, ...)\n+\n+\\S4method{dbHasCompleted}{duckdb_result}(res, ...)\n+\n+\\S4method{dbGetInfo}{duckdb_result}(dbObj, ...)\n+\n+\\S4method{dbIsValid}{duckdb_result}(dbObj, ...)\n+\n+\\S4method{dbGetStatement}{duckdb_result}(res, ...)\n+\n+\\S4method{dbColumnInfo}{duckdb_result}(res, ...)\n+\n+\\S4method{dbGetRowCount}{duckdb_result}(res, ...)\n+\n+\\S4method{dbGetRowsAffected}{duckdb_result}(res, ...)\n+\n+\\S4method{dbBind}{duckdb_result}(res, params, ...)\n+}\n+\\arguments{\n+\\item{object}{Any R object}\n+\n+\\item{res}{An object inheriting from \\linkS4class{DBIResult}.}\n+\n+\\item{...}{Other arguments passed on to methods.}\n+\n+\\item{n}{maximum number of records to retrieve per fetch. Use \\code{n = -1}\n+or \\code{n = Inf}\n+to retrieve all pending records.  Some implementations may recognize other\n+special values.}\n+\n+\\item{dbObj}{An object inheriting from \\linkS4class{DBIObject},\n+i.e. \\linkS4class{DBIDriver}, \\linkS4class{DBIConnection},\n+or a \\linkS4class{DBIResult}}\n+\n+\\item{params}{A list of bindings, named or unnamed.}\n+}\n+\\description{\n+Methods for accessing result sets for queries on DuckDB connections.\n+}\ndiff --git a/tools/rpkg/src/duckdbr.cpp b/tools/rpkg/src/duckdbr.cpp\nindex 5a5d0ce4e3b5..17c697cc2990 100644\n--- a/tools/rpkg/src/duckdbr.cpp\n+++ b/tools/rpkg/src/duckdbr.cpp\n@@ -1,5 +1,5 @@\n-#include \"duckdb.hpp\"\n-#include \"parquet-extension.hpp\"\n+#include \"duckdb.h\"\n+#include \"parquet-extension.h\"\n \n #include <Rdefines.h>\n #include <algorithm>\n",
  "test_patch": "diff --git a/tools/rpkg/tests/testthat/test-DBItest.R b/tools/rpkg/tests/testthat/test-DBItest.R\nindex 31ab761ef613..93ebc7281b01 100644\n--- a/tools/rpkg/tests/testthat/test-DBItest.R\n+++ b/tools/rpkg/tests/testthat/test-DBItest.R\n@@ -8,6 +8,11 @@ DBItest::test_all(c(\n   \"send_query_stale_warning\", # wontfix\n   \"send_statement_stale_warning\", # wontfix\n \n+  \"send_query_immediate\", # ???\n+  \"get_query_immediate\", # ???\n+  \"send_statement_immediate\", # ???\n+  \"execute_immediate\", # ???\n+\n   \"get_query_n_bad\", # broken test\n   \"get_query_good_after_bad_n\", # broken test\n   \"has_completed_statement\", # broken test\ndiff --git a/tools/rpkg/tests/testthat/test_bind.R b/tools/rpkg/tests/testthat/test_bind.R\nindex 675716341a60..4e15c4429dee 100644\n--- a/tools/rpkg/tests/testthat/test_bind.R\n+++ b/tools/rpkg/tests/testthat/test_bind.R\n@@ -3,7 +3,7 @@ library(\"DBI\")\n \n test_convert <- function(con, type, val) {\n   val_comp <- val\n-  if (class(val) == \"factor\") {\n+  if (is.factor(val)) {\n     val_comp <- as.character(val)\n   }\n   q <- dbSendQuery(con, sprintf(\"SELECT CAST(? AS %s) a\", type))\n",
  "problem_statement": "R: CI\nTravis or GHA? -> TBD\r\n\r\n@hannesmuehleisen \r\nAny important secrets that we need to be aware of?\r\n\r\n\n",
  "hints_text": "we have `GH_TOKEN` with a GitHub token available",
  "created_at": "2020-07-15T04:25:20Z"
}