diff --git a/tools/rpkg/.Rbuildignore b/tools/rpkg/.Rbuildignore
index 70fe8b0a6084..9e570485d09d 100644
--- a/tools/rpkg/.Rbuildignore
+++ b/tools/rpkg/.Rbuildignore
@@ -5,3 +5,6 @@ git
 configure
 ^.*\.Rproj$
 ^\.Rproj\.user$
+^tic\.R$
+^_pkgdown\.yml$
+^docs$
diff --git a/tools/rpkg/DESCRIPTION b/tools/rpkg/DESCRIPTION
index 0a5ce45f01ac..074201739c7e 100644
--- a/tools/rpkg/DESCRIPTION
+++ b/tools/rpkg/DESCRIPTION
@@ -34,11 +34,10 @@ Suggests:
     nycflights13
 Encoding: UTF-8
 LazyData: true
-RoxygenNote: 7.1.0.9000
+RoxygenNote: 7.1.1
 SystemRequirements: C++11
 Collate: 
-    'duckdb.R'
     'Driver.R'
     'Connection.R'
     'Result.R'
-    'duckdb-package.R'
+    'duckdb.R'
diff --git a/tools/rpkg/NAMESPACE b/tools/rpkg/NAMESPACE
index 0f17aa9c0461..e4db36722b86 100644
--- a/tools/rpkg/NAMESPACE
+++ b/tools/rpkg/NAMESPACE
@@ -36,6 +36,5 @@ import(DBI)
 import(methods)
 importFrom(DBI,dbConnect)
 importFrom(dbplyr,src_dbi)
-importFrom(testthat,skip)
 importFrom(utils,head)
 useDynLib(duckdb, .registration = TRUE)
diff --git a/tools/rpkg/R/Connection.R b/tools/rpkg/R/Connection.R
index 24f52d676f5b..25e34e5df995 100644
--- a/tools/rpkg/R/Connection.R
+++ b/tools/rpkg/R/Connection.R
@@ -1,8 +1,3 @@
-#' @include Driver.R
-
-NULL
-
-
 duckdb_connection <- function(duckdb_driver, debug) {
   new(
     "duckdb_connection",
@@ -12,7 +7,11 @@ duckdb_connection <- function(duckdb_driver, debug) {
   )
 }
 
-#' @rdname DBI
+#' Register a R data.frame as a virtual table (view) in DuckDB without copying the data
+#' @rdname duckdb_connection
+#' @param conn A DuckDB connection, created by `dbConnect()`.
+#' @param name The name for the virtual table that is registered
+#' @param df A `data.frame` with the data for the virtual table
 #' @export
 duckdb_register <- function(conn, name, df) {
   stopifnot(dbIsValid(conn))
@@ -20,7 +19,10 @@ duckdb_register <- function(conn, name, df) {
   invisible(TRUE)
 }
 
-#' @rdname DBI
+#' Unregister a virtual table referring to a data.frame
+#' @rdname duckdb_connection
+#' @param conn A DuckDB connection, created by `dbConnect()`.
+#' @param name The name for the virtual table previously registered using `duckdb_register()`.
 #' @export
 duckdb_unregister <- function(conn, name) {
   stopifnot(dbIsValid(conn))
@@ -28,8 +30,8 @@ duckdb_unregister <- function(conn, name) {
   invisible(TRUE)
 }
 
-
-#' @rdname DBI
+#' DuckDB connection class
+#' @rdname duckdb_connection
 #' @export
 setClass(
   "duckdb_connection",
@@ -37,7 +39,7 @@ setClass(
   slots = list(dbdir = "character", conn_ref = "externalptr", driver = "duckdb_driver", debug = "logical")
 )
 
-#' @rdname DBI
+#' @rdname duckdb_connection
 #' @inheritParams methods::show
 #' @export
 setMethod(
@@ -47,7 +49,7 @@ setMethod(
   }
 )
 
-#' @rdname DBI
+#' @rdname duckdb_connection
 #' @inheritParams DBI::dbIsValid
 #' @export
 setMethod(
@@ -66,8 +68,8 @@ setMethod(
   }
 )
 
-#' @rdname DBI
-#' @inheritParams DBI::dbDisconnect
+#' @rdname duckdb_connection
+#' @param shutdown Shut down the DuckDB database instance that this connection refers to.
 #' @export
 setMethod(
   "dbDisconnect", "duckdb_connection",
@@ -84,12 +86,12 @@ setMethod(
   }
 )
 
-#' @rdname DBI
+#' @rdname duckdb_connection
 #' @inheritParams DBI::dbSendQuery
 #' @export
 setMethod(
   "dbSendQuery", c("duckdb_connection", "character"),
-  function(conn, statement, ..., immediate = FALSE) {
+  function(conn, statement, ...) {
     if (conn@debug) {
       cat("Q ", statement, "
")
     }
@@ -111,8 +113,7 @@ setMethod(
   }
 )
 
-
-#' @rdname DBI
+#' @rdname duckdb_connection
 #' @inheritParams DBI::dbDataType
 #' @export
 setMethod(
@@ -126,12 +127,13 @@ duckdb_random_string <- function(x) {
   paste(sample(letters, 10, replace = TRUE), collapse = "")
 }
 
-#' @rdname DBI
+#' @rdname duckdb_connection
 #' @inheritParams DBI::dbWriteTable
-#' @param overwrite Allow overwriting the destination table. Cannot be
-#'   `TRUE` if `append` is also `TRUE`.
-#' @param append Allow appending to the destination table. Cannot be
-#'   `TRUE` if `overwrite` is also `TRUE`.
+#' @param row.names Whether the row.names of the data.frame should be preserved
+#' @param overwrite If a table with the given name already exists, should it be overwritten?
+#' @param append If a table with the given name already exists, just try to append the passed data to it
+#' @param field.types Override the auto-generated SQL types
+#' @param temporary Should the created table be temporary?
 #' @export
 setMethod(
   "dbWriteTable", c("duckdb_connection", "character", "data.frame"),
@@ -150,7 +152,6 @@ setMethod(
 
     # TODO: start a transaction if one is not already running
 
-
     if (overwrite && append) {
       stop("Setting both overwrite and append makes no sense")
     }
@@ -235,7 +236,7 @@ setMethod(
   }
 )
 
-#' @rdname DBI
+#' @rdname duckdb_connection
 #' @inheritParams DBI::dbListTables
 #' @export
 setMethod(
@@ -250,7 +251,7 @@ setMethod(
   }
 )
 
-#' @rdname DBI
+#' @rdname duckdb_connection
 #' @inheritParams DBI::dbExistsTable
 #' @export
 setMethod(
@@ -282,7 +283,7 @@ setMethod(
   }
 )
 
-#' @rdname DBI
+#' @rdname duckdb_connection
 #' @inheritParams DBI::dbListFields
 #' @export
 setMethod(
@@ -299,7 +300,7 @@ setMethod(
   }
 )
 
-#' @rdname DBI
+#' @rdname duckdb_connection
 #' @inheritParams DBI::dbRemoveTable
 #' @export
 setMethod(
@@ -313,7 +314,7 @@ setMethod(
   }
 )
 
-#' @rdname DBI
+#' @rdname duckdb_connection
 #' @inheritParams DBI::dbGetInfo
 #' @export
 setMethod(
@@ -329,7 +330,7 @@ setMethod(
   }
 )
 
-#' @rdname DBI
+#' @rdname duckdb_connection
 #' @inheritParams DBI::dbBegin
 #' @export
 setMethod(
@@ -340,7 +341,7 @@ setMethod(
   }
 )
 
-#' @rdname DBI
+#' @rdname duckdb_connection
 #' @inheritParams DBI::dbCommit
 #' @export
 setMethod(
@@ -351,7 +352,7 @@ setMethod(
   }
 )
 
-#' @rdname DBI
+#' @rdname duckdb_connection
 #' @inheritParams DBI::dbRollback
 #' @export
 setMethod(
@@ -362,7 +363,19 @@ setMethod(
   }
 )
 
-#' @rdname DBI
+#' Directly reads a CSV file into DuckDB, tries to detect and create the correct schema for it.
+#' @rdname duckdb_connection
+#' @param files One or more CSV file names, should all have the same structure though
+#' @param tablename The database table the files should be read into
+#' @param header Whether or not the CSV files have a separate header in the first line
+#' @param na.strings Which strings in the CSV files should be considered to be NULL
+#' @param nrow.check How many rows should be read from the CSV file to figure out data types
+#' @param delim Which field separator should be used
+#' @param quote Which quote character is used for columns in the CSV file
+#' @param col.names Override the detected or generated column names
+#' @param lower.case.names Transform column names to lower case
+#' @param sep Alias for delim for compatibility
+#' @param transaction Should a transaction be used for the entire operation
 #' @export
 read_csv_duckdb <- duckdb.read.csv <- function(conn, files, tablename, header = TRUE, na.strings = "", nrow.check = 500,
                                                delim = ",", quote = "\"", col.names = NULL, lower.case.names = FALSE, sep = delim, transaction = TRUE, ...) {
diff --git a/tools/rpkg/R/Driver.R b/tools/rpkg/R/Driver.R
index 4285e8119d36..981397ad6409 100644
--- a/tools/rpkg/R/Driver.R
+++ b/tools/rpkg/R/Driver.R
@@ -1,20 +1,15 @@
-#' @include duckdb.R
-NULL
-
-#' DBI methods
-#'
-#' Implementations of pure virtual functions defined in the `DBI` package.
-#' @name DBI
-NULL
-
 DBDIR_MEMORY <- ":memory:"
 
-#' DuckDB driver
+#' @title DuckDB Driver
 #'
-#' TBD.
+#' @description A DuckDB database instance. 
 #'
-#' @export
+#' @param dbdir The file in which the DuckDB database should be stored
+#' @param read_only Whether the database file should be opened in read-only mode
+#'
+#' @name duckdb_driver
 #' @import methods DBI
+#' @export
 #' @examples
 #' \dontrun{
 #' #' library(DBI)
@@ -31,7 +26,13 @@ duckdb <- function(dbdir = DBDIR_MEMORY, read_only = FALSE) {
   )
 }
 
-#' @rdname DBI
+check_flag <- function(x) {
+  if (is.null(x) || length(x) != 1 || is.na(x) || !is.logical(x)) {
+    stop("flags need to be scalar logicals")
+  }
+}
+
+#' @rdname duckdb_driver
 #' @export
 setClass("duckdb_driver", contains = "DBIDriver", slots = list(database_ref = "externalptr", dbdir = "character", read_only = "logical"))
 
@@ -47,7 +48,7 @@ drv_to_string <- function(drv) {
   sprintf("<duckdb_driver %s dbdir='%s' read_only=%s>", extptr_str(drv@database_ref), drv@dbdir, drv@read_only)
 }
 
-#' @rdname DBI
+#' @rdname duckdb_driver
 #' @inheritParams methods::show
 #' @export
 setMethod(
@@ -58,8 +59,9 @@ setMethod(
   }
 )
 
-#' @rdname DBI
+#' @rdname duckdb_driver
 #' @inheritParams DBI::dbConnect
+#' @param debug Print additional debug information such as queries
 #' @export
 setMethod(
   "dbConnect", "duckdb_driver",
@@ -81,7 +83,7 @@ setMethod(
   }
 )
 
-#' @rdname DBI
+#' @rdname duckdb_driver
 #' @inheritParams DBI::dbDataType
 #' @export
 setMethod(
@@ -114,7 +116,7 @@ setMethod(
   }
 )
 
-#' @rdname DBI
+#' @rdname duckdb_driver
 #' @inheritParams DBI::dbIsValid
 #' @export
 setMethod(
@@ -135,7 +137,7 @@ setMethod(
   }
 )
 
-#' @rdname DBI
+#' @rdname duckdb_driver
 #' @inheritParams DBI::dbGetInfo
 #' @export
 setMethod(
@@ -146,7 +148,7 @@ setMethod(
 )
 
 
-#' @rdname DBI
+#' @rdname duckdb_driver
 #' @export
 duckdb_shutdown <- function(drv) {
   if (!is(drv, "duckdb_driver")) {
@@ -167,6 +169,9 @@ is_installed <- function(pkg) {
 
 #' @importFrom DBI dbConnect
 #' @importFrom dbplyr src_dbi
+#' @param path The file in which the DuckDB database should be stored
+#' @param create Create a new database if none is present in `path`
+#' @rdname duckdb_driver
 #' @export
 src_duckdb <- function(path = ":memory:", create = FALSE, read_only = FALSE) {
   if (!is_installed("dbplyr")) {
diff --git a/tools/rpkg/R/Result.R b/tools/rpkg/R/Result.R
index 5ab5d77e35bf..4ef8c9d92d9a 100644
--- a/tools/rpkg/R/Result.R
+++ b/tools/rpkg/R/Result.R
@@ -1,4 +1,7 @@
-#' @include Connection.R
+#' DuckDB Result Set
+#'
+#' Methods for accessing result sets for queries on DuckDB connections.
+#' @name duckdb_result
 NULL
 
 duckdb_result <- function(connection, stmt_lst) {
@@ -26,7 +29,8 @@ duckdb_execute <- function(res) {
   }
 }
 
-#' @rdname DBI
+
+#' @rdname duckdb_result
 #' @export
 setClass(
   "duckdb_result",
@@ -38,7 +42,7 @@ setClass(
   )
 )
 
-#' @rdname DBI
+#' @rdname duckdb_result
 #' @inheritParams methods::show
 #' @export
 setMethod(
@@ -48,7 +52,7 @@ setMethod(
   }
 )
 
-#' @rdname DBI
+#' @rdname duckdb_result
 #' @inheritParams DBI::dbClearResult
 #' @export
 setMethod(
@@ -73,7 +77,7 @@ fix_rownames <- function(df) {
 }
 
 
-#' @rdname DBI
+#' @rdname duckdb_result
 #' @inheritParams DBI::dbFetch
 #' @importFrom utils head
 #' @export
@@ -128,7 +132,7 @@ setMethod(
   }
 )
 
-#' @rdname DBI
+#' @rdname duckdb_result
 #' @inheritParams DBI::dbHasCompleted
 #' @export
 setMethod(
@@ -144,7 +148,7 @@ setMethod(
   }
 )
 
-#' @rdname DBI
+#' @rdname duckdb_result
 #' @inheritParams DBI::dbGetInfo
 #' @export
 setMethod(
@@ -155,7 +159,7 @@ setMethod(
   }
 )
 
-#' @rdname DBI
+#' @rdname duckdb_result
 #' @inheritParams DBI::dbIsValid
 #' @export
 setMethod(
@@ -165,7 +169,7 @@ setMethod(
   }
 )
 
-#' @rdname DBI
+#' @rdname duckdb_result
 #' @inheritParams DBI::dbGetStatement
 #' @export
 setMethod(
@@ -178,7 +182,7 @@ setMethod(
   }
 )
 
-#' @rdname DBI
+#' @rdname duckdb_result
 #' @inheritParams DBI::dbColumnInfo
 #' @export
 setMethod(
@@ -189,7 +193,7 @@ setMethod(
   }
 )
 
-#' @rdname DBI
+#' @rdname duckdb_result
 #' @inheritParams DBI::dbGetRowCount
 #' @export
 setMethod(
@@ -202,7 +206,7 @@ setMethod(
   }
 )
 
-#' @rdname DBI
+#' @rdname duckdb_result
 #' @inheritParams DBI::dbGetRowsAffected
 #' @export
 setMethod(
@@ -215,9 +219,8 @@ setMethod(
   }
 )
 
-#' @rdname DBI
+#' @rdname duckdb_result
 #' @inheritParams DBI::dbBind
-#' @importFrom testthat skip
 #' @export
 setMethod(
   "dbBind", "duckdb_result",
diff --git a/tools/rpkg/R/duckdb-package.R b/tools/rpkg/R/duckdb-package.R
deleted file mode 100644
index 7c508071d805..000000000000
--- a/tools/rpkg/R/duckdb-package.R
+++ /dev/null
@@ -1,4 +0,0 @@
-## usethis namespace: start
-#' @useDynLib duckdb, .registration = TRUE
-## usethis namespace: end
-NULL
diff --git a/tools/rpkg/R/duckdb.R b/tools/rpkg/R/duckdb.R
index 9e58ebdd4b7a..160d166c8002 100644
--- a/tools/rpkg/R/duckdb.R
+++ b/tools/rpkg/R/duckdb.R
@@ -1,9 +1,11 @@
-#' @details TBD.
-"_PACKAGE"
-
-check_flag <- function(x) {
-  if (is.null(x) || length(x) != 1 || is.na(x) || !is.logical(x)) {
-    stop("flags need to be scalar logicals")
-  }
-}
-
+#' DuckDB client package for R
+#'
+#' @description R client package for DuckDB: an embeddable SQL OLAP Database Management System.
+#'
+#' More information at at https://duckdb.org/.
+## usethis namespace: start
+#' @useDynLib duckdb, .registration = TRUE
+## usethis namespace: end
+#' @docType package
+#' @name duckdb-package
+NULL
diff --git a/tools/rpkg/_pkgdown.yml b/tools/rpkg/_pkgdown.yml
new file mode 100644
index 000000000000..c951c9e262db
--- /dev/null
+++ b/tools/rpkg/_pkgdown.yml
@@ -0,0 +1,13 @@
+reference:
+- title: Driver
+  contents:
+  - duckdb_driver
+- title: Connection
+  contents:
+  - duckdb_connection
+- title: Result
+  contents:
+  - duckdb_result
+- title: duckdb Package
+  contents:
+  - duckdb-package
diff --git a/tools/rpkg/configure b/tools/rpkg/configure
index e2ef016e10af..54c65be373f2 100755
--- a/tools/rpkg/configure
+++ b/tools/rpkg/configure
@@ -4,5 +4,10 @@ if [ ! -f "../../scripts/amalgamation.py" ]; then
 	echo "Could find neither the amalgamation build script"
 	exit 1
 fi
-(cd ../.. && python scripts/amalgamation.py --source=tools/rpkg/src/duckdb.cpp --header=tools/rpkg/src/duckdb.hpp)
-(cd ../.. && python extension/parquet/parquet_amalgamation.py --source=tools/rpkg/src/parquet-extension.cpp --header=tools/rpkg/src/parquet-extension.hpp)
+
+# R issues a warning for .hpp files, use .h to silence it
+(cd ../.. && python scripts/amalgamation.py --source=tools/rpkg/src/duckdb.cpp --header=tools/rpkg/src/duckdb.h)
+(cd ../.. && python extension/parquet/parquet_amalgamation.py --source=tools/rpkg/src/parquet-extension.cpp --header=tools/rpkg/src/parquet-extension.h)
+cp src/parquet-extension.h src/parquet-extension.h.tmp
+sed 's/duckdb[.]hpp/duckdb.h/g' src/parquet-extension.h.tmp > src/parquet-extension.h
+rm src/parquet-extension.h.tmp
diff --git a/tools/rpkg/man/DBI.Rd b/tools/rpkg/man/DBI.Rd
deleted file mode 100644
index dce696ee3226..000000000000
--- a/tools/rpkg/man/DBI.Rd
+++ /dev/null
@@ -1,186 +0,0 @@
-% Generated by roxygen2: do not edit by hand
-% Please edit documentation in R/Driver.R, R/Connection.R, R/Result.R
-\docType{class}
-
ame{DBI}
-\alias{DBI}
-\alias{duckdb_driver-class}
-\alias{show,duckdb_driver-method}
-\alias{dbConnect,duckdb_driver-method}
-\alias{dbDataType,duckdb_driver-method}
-\alias{dbIsValid,duckdb_driver-method}
-\alias{dbGetInfo,duckdb_driver-method}
-\alias{duckdb_shutdown}
-\alias{duckdb_register}
-\alias{duckdb_unregister}
-\alias{duckdb_connection-class}
-\alias{show,duckdb_connection-method}
-\alias{dbIsValid,duckdb_connection-method}
-\alias{dbDisconnect,duckdb_connection-method}
-\alias{dbSendQuery,duckdb_connection,character-method}
-\alias{dbDataType,duckdb_connection-method}
-\alias{dbWriteTable,duckdb_connection,character,data.frame-method}
-\alias{dbListTables,duckdb_connection-method}
-\alias{dbExistsTable,duckdb_connection,character-method}
-\alias{dbListFields,duckdb_connection,character-method}
-\alias{dbRemoveTable,duckdb_connection,character-method}
-\alias{dbGetInfo,duckdb_connection-method}
-\alias{dbBegin,duckdb_connection-method}
-\alias{dbCommit,duckdb_connection-method}
-\alias{dbRollback,duckdb_connection-method}
-\alias{read_csv_duckdb}
-\alias{duckdb_result-class}
-\alias{show,duckdb_result-method}
-\alias{dbClearResult,duckdb_result-method}
-\alias{dbFetch,duckdb_result-method}
-\alias{dbHasCompleted,duckdb_result-method}
-\alias{dbGetInfo,duckdb_result-method}
-\alias{dbIsValid,duckdb_result-method}
-\alias{dbGetStatement,duckdb_result-method}
-\alias{dbColumnInfo,duckdb_result-method}
-\alias{dbGetRowCount,duckdb_result-method}
-\alias{dbGetRowsAffected,duckdb_result-method}
-\alias{dbBind,duckdb_result-method}
-\title{DBI methods}
-\usage{
-\S4method{show}{duckdb_driver}(object)
-
-\S4method{dbConnect}{duckdb_driver}(
-  drv,
-  dbdir = DBDIR_MEMORY,
-  ...,
-  debug = getOption("duckdb.debug", FALSE),
-  read_only = FALSE
-)
-
-\S4method{dbDataType}{duckdb_driver}(dbObj, obj, ...)
-
-\S4method{dbIsValid}{duckdb_driver}(dbObj, ...)
-
-\S4method{dbGetInfo}{duckdb_driver}(dbObj, ...)
-
-duckdb_shutdown(drv)
-
-duckdb_register(conn, name, df)
-
-duckdb_unregister(conn, name)
-
-\S4method{show}{duckdb_connection}(object)
-
-\S4method{dbIsValid}{duckdb_connection}(dbObj, ...)
-
-\S4method{dbDisconnect}{duckdb_connection}(conn, ..., shutdown = FALSE)
-
-\S4method{dbSendQuery}{duckdb_connection,character}(conn, statement, ..., immediate = FALSE)
-
-\S4method{dbDataType}{duckdb_connection}(dbObj, obj, ...)
-
-\S4method{dbWriteTable}{duckdb_connection,character,data.frame}(
-  conn,
-  name,
-  value,
-  row.names = FALSE,
-  overwrite = FALSE,
-  append = FALSE,
-  field.types = NULL,
-  temporary = FALSE,
-  ...
-)
-
-\S4method{dbListTables}{duckdb_connection}(conn, ...)
-
-\S4method{dbExistsTable}{duckdb_connection,character}(conn, name, ...)
-
-\S4method{dbListFields}{duckdb_connection,character}(conn, name, ...)
-
-\S4method{dbRemoveTable}{duckdb_connection,character}(conn, name, ...)
-
-\S4method{dbGetInfo}{duckdb_connection}(dbObj, ...)
-
-\S4method{dbBegin}{duckdb_connection}(conn, ...)
-
-\S4method{dbCommit}{duckdb_connection}(conn, ...)
-
-\S4method{dbRollback}{duckdb_connection}(conn, ...)
-
-read_csv_duckdb(
-  conn,
-  files,
-  tablename,
-  header = TRUE,
-  na.strings = "",
-  nrow.check = 500,
-  delim = ",",
-  quote = "\\"",
-  col.names = NULL,
-  lower.case.names = FALSE,
-  sep = delim,
-  transaction = TRUE,
-  ...
-)
-
-\S4method{show}{duckdb_result}(object)
-
-\S4method{dbClearResult}{duckdb_result}(res, ...)
-
-\S4method{dbFetch}{duckdb_result}(res, n = -1, ...)
-
-\S4method{dbHasCompleted}{duckdb_result}(res, ...)
-
-\S4method{dbGetInfo}{duckdb_result}(dbObj, ...)
-
-\S4method{dbIsValid}{duckdb_result}(dbObj, ...)
-
-\S4method{dbGetStatement}{duckdb_result}(res, ...)
-
-\S4method{dbColumnInfo}{duckdb_result}(res, ...)
-
-\S4method{dbGetRowCount}{duckdb_result}(res, ...)
-
-\S4method{dbGetRowsAffected}{duckdb_result}(res, ...)
-
-\S4method{dbBind}{duckdb_result}(res, params, ...)
-}
-\arguments{
-\item{object}{Any R object}
-
-\item{drv}{an object that inherits from \linkS4class{DBIDriver},
-or an existing \linkS4class{DBIConnection}
-object (in order to clone an existing connection).}
-
-\item{...}{authentication arguments needed by the DBMS instance; these
-typically include \code{user}, \code{password}, \code{host}, \code{port}, \code{dbname}, etc.
-For details see the appropriate \code{DBIDriver}.}
-
-\item{dbObj}{A object inheriting from \linkS4class{DBIDriver}
-or \linkS4class{DBIConnection}}
-
-\item{obj}{An R object whose SQL type we want to determine.}
-
-\item{conn}{A \linkS4class{DBIConnection} object, as returned by
-\code{\link[DBI:dbConnect]{dbConnect()}}.}
-
-\item{name}{A character string specifying the unquoted DBMS table name,
-or the result of a call to \code{\link[DBI:dbQuoteIdentifier]{dbQuoteIdentifier()}}.}
-
-\item{statement}{a character string containing SQL.}
-
-\item{value}{a \link{data.frame} (or coercible to data.frame).}
-
-\item{overwrite}{Allow overwriting the destination table. Cannot be
-`TRUE` if `append` is also `TRUE`.}
-
-\item{append}{Allow appending to the destination table. Cannot be
-`TRUE` if `overwrite` is also `TRUE`.}
-
-\item{res}{An object inheriting from \linkS4class{DBIResult}.}
-
-\item{n}{maximum number of records to retrieve per fetch. Use \code{n = -1}
-or \code{n = Inf}
-to retrieve all pending records.  Some implementations may recognize other
-special values.}
-
-\item{params}{A list of bindings, named or unnamed.}
-}
-\description{
-Implementations of pure virtual functions defined in the `DBI` package.
-}
diff --git a/tools/rpkg/man/duckdb-package.Rd b/tools/rpkg/man/duckdb-package.Rd
index 7a6f450f3890..1089ad14ebb5 100644
--- a/tools/rpkg/man/duckdb-package.Rd
+++ b/tools/rpkg/man/duckdb-package.Rd
@@ -2,33 +2,10 @@
 % Please edit documentation in R/duckdb.R
 \docType{package}
 
ame{duckdb-package}
-\alias{duckdb}
 \alias{duckdb-package}
-\title{duckdb: DBI Package for the DuckDB Database Management System}
+\title{DuckDB client package for R}
 \description{
-DuckDB is an embedded analytical data management
-    system with SQL support. This package includes all of DuckDB as well
-    as R DBI & dplyr connectors.
-}
-\details{
-TBD.
-}
-\seealso{
-Useful links:
-\itemize{
-  \item \url{https://www.duckdb.org}
-  \item \url{https://github.com/cwida/duckdb}
-  \item Report bugs at \url{https://github.com/cwida/duckdb/issues}
-}
-
-}
-\author{
-\strong{Maintainer}: Hannes Mühleisen \email{hannes@cwi.nl} (\href{https://orcid.org/0000-0001-8552-0029}{ORCID})
-
-Authors:
-\itemize{
-  \item Mark Raasveldt \email{mark.raasveldt@cwi.nl} (\href{https://orcid.org/0000-0001-5005-6844}{ORCID})
-  \item DuckDB Contributors
-}
+R client package for DuckDB: an embeddable SQL OLAP Database Management System.
 
+More information at at https://duckdb.org/.
 }
diff --git a/tools/rpkg/man/duckdb.Rd b/tools/rpkg/man/duckdb.Rd
deleted file mode 100644
index 3d5c3d6b0396..000000000000
--- a/tools/rpkg/man/duckdb.Rd
+++ /dev/null
@@ -1,18 +0,0 @@
-% Generated by roxygen2: do not edit by hand
-% Please edit documentation in R/Driver.R
-
ame{duckdb}
-\alias{duckdb}
-\title{DuckDB driver}
-\usage{
-duckdb(dbdir = DBDIR_MEMORY, read_only = FALSE)
-}
-\description{
-TBD.
-}
-\examples{
-\dontrun{
-#' library(DBI)
-duckdb::duckdb()
-}
-
-}
diff --git a/tools/rpkg/man/duckdb_connection.Rd b/tools/rpkg/man/duckdb_connection.Rd
new file mode 100644
index 000000000000..ff0f64efd42b
--- /dev/null
+++ b/tools/rpkg/man/duckdb_connection.Rd
@@ -0,0 +1,146 @@
+% Generated by roxygen2: do not edit by hand
+% Please edit documentation in R/Connection.R
+\docType{class}
+
ame{duckdb_register}
+\alias{duckdb_register}
+\alias{duckdb_unregister}
+\alias{duckdb_connection-class}
+\alias{show,duckdb_connection-method}
+\alias{dbIsValid,duckdb_connection-method}
+\alias{dbDisconnect,duckdb_connection-method}
+\alias{dbSendQuery,duckdb_connection,character-method}
+\alias{dbDataType,duckdb_connection-method}
+\alias{dbWriteTable,duckdb_connection,character,data.frame-method}
+\alias{dbListTables,duckdb_connection-method}
+\alias{dbExistsTable,duckdb_connection,character-method}
+\alias{dbListFields,duckdb_connection,character-method}
+\alias{dbRemoveTable,duckdb_connection,character-method}
+\alias{dbGetInfo,duckdb_connection-method}
+\alias{dbBegin,duckdb_connection-method}
+\alias{dbCommit,duckdb_connection-method}
+\alias{dbRollback,duckdb_connection-method}
+\alias{read_csv_duckdb}
+\title{Register a R data.frame as a virtual table (view) in DuckDB without copying the data}
+\usage{
+duckdb_register(conn, name, df)
+
+duckdb_unregister(conn, name)
+
+\S4method{show}{duckdb_connection}(object)
+
+\S4method{dbIsValid}{duckdb_connection}(dbObj, ...)
+
+\S4method{dbDisconnect}{duckdb_connection}(conn, ..., shutdown = FALSE)
+
+\S4method{dbSendQuery}{duckdb_connection,character}(conn, statement, ...)
+
+\S4method{dbDataType}{duckdb_connection}(dbObj, obj, ...)
+
+\S4method{dbWriteTable}{duckdb_connection,character,data.frame}(
+  conn,
+  name,
+  value,
+  row.names = FALSE,
+  overwrite = FALSE,
+  append = FALSE,
+  field.types = NULL,
+  temporary = FALSE,
+  ...
+)
+
+\S4method{dbListTables}{duckdb_connection}(conn, ...)
+
+\S4method{dbExistsTable}{duckdb_connection,character}(conn, name, ...)
+
+\S4method{dbListFields}{duckdb_connection,character}(conn, name, ...)
+
+\S4method{dbRemoveTable}{duckdb_connection,character}(conn, name, ...)
+
+\S4method{dbGetInfo}{duckdb_connection}(dbObj, ...)
+
+\S4method{dbBegin}{duckdb_connection}(conn, ...)
+
+\S4method{dbCommit}{duckdb_connection}(conn, ...)
+
+\S4method{dbRollback}{duckdb_connection}(conn, ...)
+
+read_csv_duckdb(
+  conn,
+  files,
+  tablename,
+  header = TRUE,
+  na.strings = "",
+  nrow.check = 500,
+  delim = ",",
+  quote = "\\"",
+  col.names = NULL,
+  lower.case.names = FALSE,
+  sep = delim,
+  transaction = TRUE,
+  ...
+)
+}
+\arguments{
+\item{conn}{A DuckDB connection, created by `dbConnect()`.}
+
+\item{name}{The name for the virtual table previously registered using `duckdb_register()`.}
+
+\item{df}{A `data.frame` with the data for the virtual table}
+
+\item{object}{Any R object}
+
+\item{dbObj}{An object inheriting from \linkS4class{DBIObject},
+i.e. \linkS4class{DBIDriver}, \linkS4class{DBIConnection},
+or a \linkS4class{DBIResult}}
+
+\item{...}{Other arguments to methods.}
+
+\item{shutdown}{Shut down the DuckDB database instance that this connection refers to.}
+
+\item{statement}{a character string containing SQL.}
+
+\item{obj}{An R object whose SQL type we want to determine.}
+
+\item{value}{a \link{data.frame} (or coercible to data.frame).}
+
+\item{row.names}{Whether the row.names of the data.frame should be preserved}
+
+\item{overwrite}{If a table with the given name already exists, should it be overwritten?}
+
+\item{append}{If a table with the given name already exists, just try to append the passed data to it}
+
+\item{field.types}{Override the auto-generated SQL types}
+
+\item{temporary}{Should the created table be temporary?}
+
+\item{files}{One or more CSV file names, should all have the same structure though}
+
+\item{tablename}{The database table the files should be read into}
+
+\item{header}{Whether or not the CSV files have a separate header in the first line}
+
+\item{na.strings}{Which strings in the CSV files should be considered to be NULL}
+
+\item{nrow.check}{How many rows should be read from the CSV file to figure out data types}
+
+\item{delim}{Which field separator should be used}
+
+\item{quote}{Which quote character is used for columns in the CSV file}
+
+\item{col.names}{Override the detected or generated column names}
+
+\item{lower.case.names}{Transform column names to lower case}
+
+\item{sep}{Alias for delim for compatibility}
+
+\item{transaction}{Should a transaction be used for the entire operation}
+}
+\description{
+Register a R data.frame as a virtual table (view) in DuckDB without copying the data
+
+Unregister a virtual table referring to a data.frame
+
+DuckDB connection class
+
+Directly reads a CSV file into DuckDB, tries to detect and create the correct schema for it.
+}
diff --git a/tools/rpkg/man/duckdb_driver.Rd b/tools/rpkg/man/duckdb_driver.Rd
new file mode 100644
index 000000000000..7ae1043091b3
--- /dev/null
+++ b/tools/rpkg/man/duckdb_driver.Rd
@@ -0,0 +1,74 @@
+% Generated by roxygen2: do not edit by hand
+% Please edit documentation in R/Driver.R
+\docType{class}
+
ame{duckdb_driver}
+\alias{duckdb_driver}
+\alias{duckdb}
+\alias{duckdb_driver-class}
+\alias{show,duckdb_driver-method}
+\alias{dbConnect,duckdb_driver-method}
+\alias{dbDataType,duckdb_driver-method}
+\alias{dbIsValid,duckdb_driver-method}
+\alias{dbGetInfo,duckdb_driver-method}
+\alias{duckdb_shutdown}
+\alias{src_duckdb}
+\title{DuckDB Driver}
+\usage{
+duckdb(dbdir = DBDIR_MEMORY, read_only = FALSE)
+
+\S4method{show}{duckdb_driver}(object)
+
+\S4method{dbConnect}{duckdb_driver}(
+  drv,
+  dbdir = DBDIR_MEMORY,
+  ...,
+  debug = getOption("duckdb.debug", FALSE),
+  read_only = FALSE
+)
+
+\S4method{dbDataType}{duckdb_driver}(dbObj, obj, ...)
+
+\S4method{dbIsValid}{duckdb_driver}(dbObj, ...)
+
+\S4method{dbGetInfo}{duckdb_driver}(dbObj, ...)
+
+duckdb_shutdown(drv)
+
+src_duckdb(path = ":memory:", create = FALSE, read_only = FALSE)
+}
+\arguments{
+\item{dbdir}{The file in which the DuckDB database should be stored}
+
+\item{read_only}{Whether the database file should be opened in read-only mode}
+
+\item{object}{Any R object}
+
+\item{drv}{an object that inherits from \linkS4class{DBIDriver},
+or an existing \linkS4class{DBIConnection}
+object (in order to clone an existing connection).}
+
+\item{...}{authentication arguments needed by the DBMS instance; these
+typically include \code{user}, \code{password}, \code{host}, \code{port}, \code{dbname}, etc.
+For details see the appropriate \code{DBIDriver}.}
+
+\item{debug}{Print additional debug information such as queries}
+
+\item{dbObj}{A object inheriting from \linkS4class{DBIDriver}
+or \linkS4class{DBIConnection}}
+
+\item{obj}{An R object whose SQL type we want to determine.}
+
+\item{path}{The file in which the DuckDB database should be stored}
+
+\item{create}{Create a new database if none is present in `path`}
+}
+\description{
+A DuckDB database instance.
+}
+\examples{
+\dontrun{
+#' library(DBI)
+duckdb::duckdb()
+}
+
+}
diff --git a/tools/rpkg/man/duckdb_result.Rd b/tools/rpkg/man/duckdb_result.Rd
new file mode 100644
index 000000000000..67f6e54eca19
--- /dev/null
+++ b/tools/rpkg/man/duckdb_result.Rd
@@ -0,0 +1,62 @@
+% Generated by roxygen2: do not edit by hand
+% Please edit documentation in R/Result.R
+\docType{class}
+
ame{duckdb_result}
+\alias{duckdb_result}
+\alias{duckdb_result-class}
+\alias{show,duckdb_result-method}
+\alias{dbClearResult,duckdb_result-method}
+\alias{dbFetch,duckdb_result-method}
+\alias{dbHasCompleted,duckdb_result-method}
+\alias{dbGetInfo,duckdb_result-method}
+\alias{dbIsValid,duckdb_result-method}
+\alias{dbGetStatement,duckdb_result-method}
+\alias{dbColumnInfo,duckdb_result-method}
+\alias{dbGetRowCount,duckdb_result-method}
+\alias{dbGetRowsAffected,duckdb_result-method}
+\alias{dbBind,duckdb_result-method}
+\title{DuckDB Result Set}
+\usage{
+\S4method{show}{duckdb_result}(object)
+
+\S4method{dbClearResult}{duckdb_result}(res, ...)
+
+\S4method{dbFetch}{duckdb_result}(res, n = -1, ...)
+
+\S4method{dbHasCompleted}{duckdb_result}(res, ...)
+
+\S4method{dbGetInfo}{duckdb_result}(dbObj, ...)
+
+\S4method{dbIsValid}{duckdb_result}(dbObj, ...)
+
+\S4method{dbGetStatement}{duckdb_result}(res, ...)
+
+\S4method{dbColumnInfo}{duckdb_result}(res, ...)
+
+\S4method{dbGetRowCount}{duckdb_result}(res, ...)
+
+\S4method{dbGetRowsAffected}{duckdb_result}(res, ...)
+
+\S4method{dbBind}{duckdb_result}(res, params, ...)
+}
+\arguments{
+\item{object}{Any R object}
+
+\item{res}{An object inheriting from \linkS4class{DBIResult}.}
+
+\item{...}{Other arguments passed on to methods.}
+
+\item{n}{maximum number of records to retrieve per fetch. Use \code{n = -1}
+or \code{n = Inf}
+to retrieve all pending records.  Some implementations may recognize other
+special values.}
+
+\item{dbObj}{An object inheriting from \linkS4class{DBIObject},
+i.e. \linkS4class{DBIDriver}, \linkS4class{DBIConnection},
+or a \linkS4class{DBIResult}}
+
+\item{params}{A list of bindings, named or unnamed.}
+}
+\description{
+Methods for accessing result sets for queries on DuckDB connections.
+}
diff --git a/tools/rpkg/src/duckdbr.cpp b/tools/rpkg/src/duckdbr.cpp
index 5a5d0ce4e3b5..17c697cc2990 100644
--- a/tools/rpkg/src/duckdbr.cpp
+++ b/tools/rpkg/src/duckdbr.cpp
@@ -1,5 +1,5 @@
-#include "duckdb.hpp"
-#include "parquet-extension.hpp"
+#include "duckdb.h"
+#include "parquet-extension.h"
 
 #include <Rdefines.h>
 #include <algorithm>
