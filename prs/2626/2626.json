{
  "repo": "duckdb/duckdb",
  "pull_number": 2626,
  "instance_id": "duckdb__duckdb-2626",
  "issue_numbers": [
    "2622"
  ],
  "base_commit": "8ef7ee22c543fb030c0e6e62b5918dd43cc46fc7",
  "patch": "diff --git a/tools/rpkg/R/Connection.R b/tools/rpkg/R/Connection.R\nindex 4d29e7f4bb6e..35ae97d29dc3 100644\n--- a/tools/rpkg/R/Connection.R\n+++ b/tools/rpkg/R/Connection.R\n@@ -181,7 +181,7 @@ setMethod(\n         col_idx <- 1\n         for (name in col_names) {\n             if (name %in% names(field.types)) {\n-                cols <- c(cols, sprintf(\"#%d::%s %s\", col_idx, field.types[name], name))\n+                cols <- c(cols, sprintf(\"#%d::%s %s\", col_idx, field.types[name], dbQuoteIdentifier(conn, name)))\n             }\n             else {\n                 cols <- c(cols, sprintf(\"#%d\", col_idx))\n",
  "test_patch": "diff --git a/tools/rpkg/tests/testthat/test_dbwritetable.R b/tools/rpkg/tests/testthat/test_dbwritetable.R\nnew file mode 100644\nindex 000000000000..ad49aecf0bba\n--- /dev/null\n+++ b/tools/rpkg/tests/testthat/test_dbwritetable.R\n@@ -0,0 +1,11 @@\n+test_that(\"dbWriteTable can write tables with keyword column names\", {\n+  con <- dbConnect(duckdb())\n+  on.exit(dbDisconnect(con, shutdown = TRUE))\n+\n+  # NB: name is a reserved word, will need to be escaped as part of writing operation\n+  sample_data <- data.frame(id = 1:3, name = c(\"cuthbert\", \"dibble\", \"grubb\"))\n+  dbWriteTable(con, \"sample_data\", sample_data, field.types = c(id = \"INTEGER\", name = \"VARCHAR\"))\n+\n+  # Can read the data we wrote back again\n+  expect_identical(dbReadTable(con, \"sample_data\"), sample_data)\n+})\n",
  "problem_statement": "dbWriteTable not escaping column names in 0.3.1 release\n#### What happens?\r\n\r\nVersion 0.3.1, using ``dbWriteTable()`` with a ``name`` column in ``field.types`` specified results in invalid SQL being generated.\r\n\r\nThis has been picked up by CRAN package checks on the downstream MFDB package: https://cran.r-project.org/web/checks/check_results_mfdb.html\r\n\r\n#### To Reproduce\r\n\r\n```\r\n> db <- DBI::dbConnect(duckdb::duckdb())\r\n> DBI::dbWriteTable(db, basename(tempfile(\"temp_\")),\r\n+     data.frame(id = 1:3, name = c(\"cuthbert\", \"dibble\", \"grubb\")),\r\n+     field.types = c(id = \"INTEGER\", name = \"VARCHAR\"))\r\nError in .local(conn, statement, ...) :\r\n  duckdb_prepare_R: Failed to prepare query CREATE  TABLE \"temp_226be6a3dc5d1\" AS SELECT #1::INTEGER id,#2::VARCHAR name FROM _duckdb_write_view_vcxzjonvgn\r\nError: Parser Error: syntax error at or near \"name\"\r\nLINE 1: ...\" AS SELECT #1::INTEGER id,#2::VARCHAR name FROM _duckdb_write_view_vcxzjonvgn\r\n                                                  ^\r\nEnvironment:\r\n  1: DBI::dbWriteTable(db, basename(tempfile(\"temp_\")), data.frame(id = 1:3, name = c(\"cuthbert\", \"dibble\", \"grubb\")), field.types = c(id = \"INTEGER\",\r\n  2: DBI::dbWriteTable(db, basename(tempfile(\"temp_\")), data.frame(id = 1:3, name = c(\"cuthbert\", \"dibble\", \"grubb\")), field.types = c(id = \"INTEGER\",\r\n  3: .local(conn, name, value, ...)\r\n  4: dbExecute(conn, SQL(sprintf(\"CREATE %s TABLE %s AS SELECT %s FROM %s\", temp_str, table_name, paste(cols, collapse = \",\"), view_name)))\r\n  5: dbExecute(conn, SQL(sprintf(\"CREATE %s TABLE %s AS SELECT %s FROM %s\", temp_str, table_name, paste(cols, collapse = \",\"), view_name)))\r\n  6: dbSendStatement(conn, statement, ...)\r\n  7: dbSendStatement(conn, statement, ...)\r\n  8: dbSendQuery(conn, statement, ...)\r\n  9: dbSendQuery(conn, statement, ...)\r\n  10: .local(conn, statement, ...)\r\n```\r\n\r\nThe command-line thinks this is invalid SQL too (and is fair enough IMO, name is probably a reserved word):\r\n\r\n```\r\nv0.3.1 88aa81c6b\r\nEnter \".help\" for usage hints.\r\nConnected to a transient in-memory database.\r\nUse \".open FILENAME\" to reopen on a persistent database.\r\nD CREATE TABLE moo (moo_id INTEGER, name VARCHAR);\r\nD SELECT #1::INTEGER, #2::VARCHAR name FROM moo;\r\nError: Parser Error: syntax error at or near \"name\"\r\nLINE 1: SELECT #1::INTEGER, #2::VARCHAR name FROM moo;\r\n```\r\n\r\nIf you ask me the bug is here, the SQL generation isn't escaping the column name:\r\n\r\nhttps://github.com/duckdb/duckdb/blob/9fd0403b69f768bb6dca03aa5a841a96cd306348/tools/rpkg/R/Connection.R#L184\r\n\r\nthis was added in this commit, part of 0.3.1 https://github.com/duckdb/duckdb/commit/8aed295921e65ea4320348026e74f461708bc043. I can make a pull request to add some escaping here if that's useful?\r\n\r\nCheers!\r\n\r\n#### Environment (please complete the following information):\r\n - OS: ``Debian GNU/Linux 10 (buster)``\r\n - DuckDB Version: ``0.3.2``\r\n - DuckDB Client: ``R version 4.1.1 (2021-08-10)``\r\n\r\n#### Before Submitting\r\n\r\n- [x] **Have you tried this on the latest `master` branch?**\r\n* **R**: `install.packages(\"https://github.com/duckdb/duckdb/releases/download/master-builds/duckdb_r_src.tar.gz\", repos = NULL)`\r\n\r\n- [x] **Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?**\r\n\n",
  "hints_text": "Thanks for the report!\r\n\r\nIndeed it seems like the column name needs to be escaped.\r\n\r\n>  I can make a pull request to add some escaping here if that's useful?\r\n\r\nThat would be fantastic!",
  "created_at": "2021-11-18T08:30:44Z"
}