{
  "repo": "duckdb/duckdb",
  "pull_number": 16870,
  "instance_id": "duckdb__duckdb-16870",
  "issue_numbers": [
    "16639"
  ],
  "base_commit": "b61d24f8f0e57030d82d335476ab829b29b7dcbf",
  "patch": "diff --git a/src/function/scalar/string/concat.cpp b/src/function/scalar/string/concat.cpp\nindex a6a495a95a6b..0ee57a752d6b 100644\n--- a/src/function/scalar/string/concat.cpp\n+++ b/src/function/scalar/string/concat.cpp\n@@ -335,9 +335,9 @@ static unique_ptr<BaseStatistics> ListConcatStats(ClientContext &context, Functi\n \n ScalarFunction ListConcatFun::GetFunction() {\n \t// The arguments and return types are set in the binder function.\n-\tauto fun = ScalarFunction({LogicalType::LIST(LogicalType::ANY), LogicalType::LIST(LogicalType::ANY)},\n-\t                          LogicalType::LIST(LogicalType::ANY), ConcatFunction, BindConcatFunction, nullptr,\n+\tauto fun = ScalarFunction({}, LogicalType::LIST(LogicalType::ANY), ConcatFunction, BindConcatFunction, nullptr,\n \t                          ListConcatStats);\n+\tfun.varargs = LogicalType::LIST(LogicalType::ANY);\n \tfun.null_handling = FunctionNullHandling::SPECIAL_HANDLING;\n \treturn fun;\n }\n",
  "test_patch": "diff --git a/test/sql/function/list/list_concat.test b/test/sql/function/list/list_concat.test\nindex a7a73702c61f..5e8aaed4c305 100644\n--- a/test/sql/function/list/list_concat.test\n+++ b/test/sql/function/list/list_concat.test\n@@ -41,6 +41,36 @@ SELECT list_concat([1, 2], [])\n ----\n [1, 2]\n \n+query T\n+SELECT list_concat([1, 2], [3, 4], [5, 6])\n+----\n+[1, 2, 3, 4, 5, 6]\n+\n+query T\n+SELECT list_concat([1, 2], [3, 4], [])\n+----\n+[1, 2, 3, 4]\n+\n+query T\n+SELECT list_concat([1, 2], [], [5, 6])\n+----\n+[1, 2, 5, 6]\n+\n+query T\n+SELECT list_concat([], [3, 4], [5, 6])\n+----\n+[3, 4, 5, 6]\n+\n+query T\n+SELECT list_concat([], [], [5, 6])\n+----\n+[5, 6]\n+\n+query T\n+SELECT list_concat([1, 2], [3, 4], [5, 6], [7, 8])\n+----\n+[1, 2, 3, 4, 5, 6, 7, 8]\n+\n statement error\n SELECT list_concat([1, 2], 3)\n ----\n@@ -96,22 +126,52 @@ SELECT list_concat([NULL], [3, 4])\n ----\n [NULL, 3, 4]\n \n+query T\n+SELECT list_concat([1, 2], [3, 4], [NULL])\n+----\n+[1, 2, 3, 4, NULL]\n+\n+query T\n+SELECT list_concat([1, 2], [3, 4], NULL)\n+----\n+[1, 2, 3, 4]\n+\n+query T\n+SELECT list_concat(NULL, [3, 4], [5, 6])\n+----\n+[3, 4, 5, 6]\n+\n+# nested types\n query T\n SELECT list_concat([[1, 2]], [[3, 4]])\n ----\n [[1, 2], [3, 4]]\n \n-# nested types\n+query T\n+SELECT list_concat([[1, 2]], [[3, 4]], [[5, 6]])\n+----\n+[[1, 2], [3, 4], [5, 6]]\n+\n query T\n SELECT list_concat([{a: 1}, {a: 2}], [{a: 3}, {a: 4}])\n ----\n [{'a': 1}, {'a': 2}, {'a': 3}, {'a': 4}]\n \n+query T\n+SELECT list_concat([{a: 1}, {a: 2}], [{a: 3}, {a: 4}], [{a: 5}, {a: 6}])\n+----\n+[{'a': 1}, {'a': 2}, {'a': 3}, {'a': 4}, {'a': 5}, {'a': 6}]\n+\n query T\n SELECT list_concat([[[1], [2]], [[3], [4]]], [[[5], [6]], [[7], [8]]])\n ----\n [[[1], [2]], [[3], [4]], [[5], [6]], [[7], [8]]]\n \n+query T\n+SELECT list_concat([[[1], [2]], [[3], [4]]], [[[5], [6]], [[7], [8]]], [[[9], [10]], [[11], [12]]])\n+----\n+[[[1], [2]], [[3], [4]], [[5], [6]], [[7], [8]], [[9], [10]], [[11], [12]]]\n+\n statement ok\n CREATE TABLE test AS SELECT range % 4 i, range j, range k FROM range(16)\n \n@@ -126,6 +186,14 @@ SELECT i, list_concat(j, k) FROM lists\n 2\t[2, 6, 10, 14, 2, 6, 10, 14]\n 3\t[3, 7, 11, 15, 3, 7, 11, 15]\n \n+query II rowsort\n+SELECT i, list_concat(j, k, j, k, j, k) FROM lists\n+----\n+0\t[0, 4, 8, 12, 0, 4, 8, 12, 0, 4, 8, 12, 0, 4, 8, 12, 0, 4, 8, 12, 0, 4, 8, 12]\n+1\t[1, 5, 9, 13, 1, 5, 9, 13, 1, 5, 9, 13, 1, 5, 9, 13, 1, 5, 9, 13, 1, 5, 9, 13]\n+2\t[2, 6, 10, 14, 2, 6, 10, 14, 2, 6, 10, 14, 2, 6, 10, 14, 2, 6, 10, 14, 2, 6, 10, 14]\n+3\t[3, 7, 11, 15, 3, 7, 11, 15, 3, 7, 11, 15, 3, 7, 11, 15, 3, 7, 11, 15, 3, 7, 11, 15]\n+\n statement error\n SELECT i, list_concat(j, cast(k AS VARCHAR)) FROM lists\n ----\n@@ -208,3 +276,5 @@ statement error\n SELECT concat([42], [84], 'str')\n ----\n an explicit cast is required\n+\n+\ndiff --git a/test/sql/function/string/test_concat_binding.test b/test/sql/function/string/test_concat_binding.test\nindex 7904df568af7..950e5a4a464d 100644\n--- a/test/sql/function/string/test_concat_binding.test\n+++ b/test/sql/function/string/test_concat_binding.test\n@@ -53,15 +53,25 @@ select concat([1], 'hello');\n ----\n Binder Error: Cannot concatenate types INTEGER[] and VARCHAR\n \n+statement error\n+SELECT list_concat([1, 2], ['3', '4'])\n+----\n+Binder Error: Cannot concatenate lists of types INTEGER[] and VARCHAR[]\n+\n+statement error\n+SELECT list_concat([1, 2], 4)\n+----\n+Binder Error: No function matches the given name and argument types 'list_concat(INTEGER[], INTEGER_LITERAL)'. You might need to add explicit type casts.\n+\n query I\n select 'hi' || NULL;\n ----\n NULL\n \n-statement error\n+query I\n select list_concat([1], [2], [3]);\n ----\n-Binder Error: No function matches the given name and argument types 'list_concat(INTEGER[], INTEGER[], INTEGER[])'.\n+[1, 2, 3]\n \n query I\n select [1] || [2] || [3];\ndiff --git a/test/sql/types/list/list_concat_null.test b/test/sql/types/list/list_concat_null.test\nindex de269df30d64..46decac505bd 100644\n--- a/test/sql/types/list/list_concat_null.test\n+++ b/test/sql/types/list/list_concat_null.test\n@@ -14,6 +14,12 @@ SELECT b || NULL from x1;\n statement ok\n SELECT NULL || NULL from x1;\n \n+statement ok\n+SELECT NULL || b || NULL from x1;\n+\n+statement ok\n+SELECT b || NULL || b from x1;\n+\n query I\n select concat([42]);\n ----\n@@ -28,3 +34,23 @@ query I\n select concat([42]::INT[1], [43]::INT[1], NULL::INT[1], [44]::INT[1], NULL::INT[1], [45]::INT[1]);\n ----\n [42, 43, 44, 45]\n+\n+query I\n+select list_concat([42]);\n+----\n+[42]\n+\n+query I\n+select list_concat([42], [43], [], [44], [], [45]);\n+----\n+[42, 43, 44, 45]\n+\n+query I\n+select list_concat([42]::INT[1], [43]::INT[1], NULL::INT[1], [44]::INT[1], NULL::INT[1], [45]::INT[1]);\n+----\n+[42, 43, 44, 45]\n+\n+query I\n+select list_concat([1]::INT[1], [2, 3]::INT[2]);\n+----\n+[1, 2, 3]\n",
  "problem_statement": "list_concat() only accepts 2 args whereas concat() accepts n args\n### What happens?\n\nAccording to https://github.com/duckdb/duckdb/pull/14443, it looks like the intention was to make `list_concat` work with N args. But if we test this, it errors: `SELECT list_concat([2, 3], [4, 5, 6], [7]);`\n\nIt looks like this PR got merged because only the concat() function was tested, which DOES accent N args: `SELECT concat([2, 3], [4, 5, 6], [7]);`\n\nSo, I propose that we should make the list_concat be an alias for concat, and behave exactly the same (skipping NULLs, accepting N args). Similarly, then the `||` operator will work the same for strings and arrays, propagating NULLs.\n\n### To Reproduce\n\n`SELECT list_concat([2, 3], [4, 5, 6], [7]);`\n\n### OS:\n\nNA\n\n### DuckDB Version:\n\n1.2.1\n\n### DuckDB Client:\n\nNA\n\n### Hardware:\n\n_No response_\n\n### Full Name:\n\nNick Crews\n\n### Affiliation:\n\nShip Creek Group\n\n### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.\n\nI have tested with a stable release\n\n### Did you include all relevant data sets for reproducing the issue?\n\nYes\n\n### Did you include all code required to reproduce the issue?\n\n- [x] Yes, I have\n\n### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?\n\n- [x] Yes, I have\n",
  "hints_text": "",
  "created_at": "2025-03-27T14:35:26Z"
}