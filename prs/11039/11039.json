{
  "repo": "duckdb/duckdb",
  "pull_number": 11039,
  "instance_id": "duckdb__duckdb-11039",
  "issue_numbers": [
    "11033",
    "11033"
  ],
  "base_commit": "a511777b22f83cfb486e102d2c6b7e96a2268e75",
  "patch": "diff --git a/src/execution/operator/aggregate/physical_streaming_window.cpp b/src/execution/operator/aggregate/physical_streaming_window.cpp\nindex 8b2b482c795e..7f4974681d67 100644\n--- a/src/execution/operator/aggregate/physical_streaming_window.cpp\n+++ b/src/execution/operator/aggregate/physical_streaming_window.cpp\n@@ -113,7 +113,6 @@ OperatorResultType PhysicalStreamingWindow::Execute(ExecutionContext &context, D\n                                                     GlobalOperatorState &gstate_p, OperatorState &state_p) const {\n \tauto &gstate = gstate_p.Cast<StreamingWindowGlobalState>();\n \tauto &state = state_p.Cast<StreamingWindowState>();\n-\tstate.allocator.Reset();\n \n \tif (!state.initialized) {\n \t\tstate.Initialize(context.client, input, select_list);\n",
  "test_patch": "diff --git a/test/sql/window/test_streaming_window_list.test_slow b/test/sql/window/test_streaming_window_list.test_slow\nnew file mode 100644\nindex 000000000000..d156d869abc7\n--- /dev/null\n+++ b/test/sql/window/test_streaming_window_list.test_slow\n@@ -0,0 +1,17 @@\n+# name: test/sql/window/test_streaming_window_list.test_slow\n+# description: Streaming window with LIST aggregate\n+# group: [window]\n+\n+statement ok\n+select\n+   list(row_number) over(rows between unbounded preceding and current row)\n+from generate_series(5000) t(row_number);\n+\n+query IIII\n+SELECT COUNT(*), SUM(LENGTH(list_aggr)), MIN(LENGTH(list_aggr)), MAX(LENGTH(list_aggr)) FROM (\n+select\n+   list(row_number) over(rows between unbounded preceding and current row)\n+from generate_series(5000) t(row_number)\n+) t(list_aggr)\n+----\n+5001\t12507501\t1\t5001\n",
  "problem_statement": "Segfault when using `list()` over unbounded preceding window \n### What happens?\n\nduckdb causes Python to segfault.\r\n\r\n(I tried the query on shell.duckdb.org and it results in a memory access error.)\n\n### To Reproduce\n\n```python\r\nimport duckdb\r\n\r\nprint(\r\n    duckdb.sql(\"\"\"\r\n    from (select unnest(generate_series(5000)) as row_number)\r\n    select\r\n       list(row_number) over(rows between unbounded preceding and current row)\r\n    \"\"\")\r\n)\r\n```\n\n### OS:\n\nmacOS-13.6.1-arm64-arm-64bit\n\n### DuckDB Version:\n\n0.10.1-dev949\n\n### DuckDB Client:\n\nPython\n\n### Full Name:\n\nKarl Genockey\n\n### Affiliation:\n\nNone\n\n### Have you tried this on the latest [nightly build](https://duckdb.org/docs/installation/?version=main)?\n\nI have tested with a nightly build\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] Yes, I have\nSegfault when using `list()` over unbounded preceding window \n### What happens?\n\nduckdb causes Python to segfault.\r\n\r\n(I tried the query on shell.duckdb.org and it results in a memory access error.)\n\n### To Reproduce\n\n```python\r\nimport duckdb\r\n\r\nprint(\r\n    duckdb.sql(\"\"\"\r\n    from (select unnest(generate_series(5000)) as row_number)\r\n    select\r\n       list(row_number) over(rows between unbounded preceding and current row)\r\n    \"\"\")\r\n)\r\n```\n\n### OS:\n\nmacOS-13.6.1-arm64-arm-64bit\n\n### DuckDB Version:\n\n0.10.1-dev949\n\n### DuckDB Client:\n\nPython\n\n### Full Name:\n\nKarl Genockey\n\n### Affiliation:\n\nNone\n\n### Have you tried this on the latest [nightly build](https://duckdb.org/docs/installation/?version=main)?\n\nI have tested with a nightly build\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] Yes, I have\n",
  "hints_text": "(Side notes: Works for me on 0.10.1-dev949 on Ubuntu, fails for me in web shell, and you could use `from generate_series(5000) tb(row_number)` to shorten your query)\nHello, this needed a few run to reproduce on my config (macOS latest stable, M2 Pro) but it is reproducible. Thanks, we'll take a look.\r\n\r\n```\r\n[1]    97186 segmentation fault  python3.11\r\nimport duckdb\r\n```\n(Side notes: Works for me on 0.10.1-dev949 on Ubuntu, fails for me in web shell, and you could use `from generate_series(5000) tb(row_number)` to shorten your query)\nHello, this needed a few run to reproduce on my config (macOS latest stable, M2 Pro) but it is reproducible. Thanks, we'll take a look.\r\n\r\n```\r\n[1]    97186 segmentation fault  python3.11\r\nimport duckdb\r\n```",
  "created_at": "2024-03-07T11:20:45Z"
}