{
  "repo": "duckdb/duckdb",
  "pull_number": 8136,
  "instance_id": "duckdb__duckdb-8136",
  "issue_numbers": [
    "8067"
  ],
  "base_commit": "efae9e8faab49340a5ed99fe434135399f075c7d",
  "patch": "diff --git a/.github/actions/build_extensions/action.yml b/.github/actions/build_extensions/action.yml\nindex 88771fb7ad8d..44f7eeea18bf 100644\n--- a/.github/actions/build_extensions/action.yml\n+++ b/.github/actions/build_extensions/action.yml\n@@ -1,5 +1,5 @@\n name: \"Build Extensions\"\n-description: \"Build, test and deploy the in-tree DuckDB extensions\"\n+description: \"Build, test and deploy the DuckDB extensions\"\n inputs:\n   # Test config\n   run_tests:\n@@ -42,41 +42,11 @@ inputs:\n   treat_warn_as_error:\n     description: 'Treat compilation warnings as errors'\n     default: 1\n-  visualizer:\n-    description: 'Build Visualizer'\n+  build_in_tree_extensions:\n+    description: 'Build in-tree extensions'\n     default: 1\n-  icu:\n-    description: 'Build ICU'\n-    default: 1\n-  tpch:\n-    description: 'Build TPCH'\n-    default: 1\n-  tpcds:\n-    description: 'Build TPCDS'\n-    default: 1\n-  httpfs:\n-    description: 'Build HTTPFS'\n-    default: 1\n-  fts:\n-    description: 'Build FTS'\n-    default: 1\n-  json:\n-    description: 'Build JSON'\n-    default: 1\n-  excel:\n-    description: 'Build Excel'\n-    default: 1\n-  sqlsmith:\n-    description: 'Build SQLsmith'\n-    default: 1\n-  inet:\n-    description: 'Build INET'\n-    default: 1\n-  autocomplete:\n-    description: 'Build SQL autocomplete extension'\n-    default: 1\n-  out_of_tree_ext:\n-    description: 'Build Out-Of-Tree Extensions'\n+  build_out_of_tree_extensions:\n+    description: 'Build out-of-tree extensions'\n     default: 1\n   python_name:\n     description: 'Python binary name because wtf Python'\n@@ -100,46 +70,29 @@ runs:\n     - name: Build\n       shell: bash\n       env:\n-        BUILD_VISUALIZER: ${{ inputs.visualizer }}\n-        BUILD_ICU: ${{ inputs.icu }}\n-        BUILD_TPCH: ${{ inputs.tpch }}\n-        BUILD_TPCDS: ${{ inputs.tpcds }}\n-        BUILD_FTS: ${{ inputs.fts }}\n-        BUILD_INET: ${{ inputs.inet }}\n-        BUILD_HTTPFS: ${{ inputs.httpfs }}\n-        BUILD_JSON: ${{ inputs.json }}\n-        BUILD_EXCEL: ${{ inputs.excel }}\n-        BUILD_SQLSMITH: ${{ inputs.sqlsmith }}\n-        BUILD_AUTOCOMPLETE: ${{ inputs.autocomplete }}\n         FORCE_32_BIT: ${{ inputs.force_32_bit }}\n         TREAT_WARNINGS_AS_ERRORS: ${{ inputs.treat_warn_as_error}}\n         FORCE_WARN_UNUSED: 1\n         STATIC_OPENSSL: 1\n-        DISABLE_BUILTIN_EXTENSIONS: 1\n         EXTENSION_STATIC_BUILD: ${{ inputs.static_link_build }}\n         OPENSSL_ROOT_DIR: ${{ inputs.openssl_path }}\n         OSX_BUILD_UNIVERSAL: ${{ inputs.osx_universal }}\n         CC: ${{ inputs.aarch64_cross_compile == 1 && 'aarch64-linux-gnu-gcc' || inputs.override_cc }}\n         CXX: ${{ inputs.aarch64_cross_compile == 1 && 'aarch64-linux-gnu-g++' || inputs.override_cxx}}\n-\n       run: |\n+        mkdir -p ~/.ssh\n+        ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts\n         cd  ${{ inputs.build_dir}}\n         ls -al\n         pwd\n         echo \"$USER\"\n         git config --global --add safe.directory '*'\n+        export EXTENSION_CONFIGS=\"\"\n+        export EXTENSION_CONFIGS=\"$EXTENSION_CONFIGS;${{ inputs.build_in_tree_extensions == 1 && '.github/config/in_tree_extensions.cmake' || ''}}\"\n+        export EXTENSION_CONFIGS=\"$EXTENSION_CONFIGS;${{ inputs.build_out_of_tree_extensions == 1 && '.github/config/out_of_tree_extensions.cmake' || '' }}\"\n+        echo \"EXTENSION_CONFIGS\"\n         make\n \n-    - name: Build External Extensions\n-      if: ${{ inputs.out_of_tree_ext != 0 }}\n-      shell: bash\n-      run: |\n-        mkdir -p ~/.ssh\n-        ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts\n-        cd  ${{ inputs.build_dir}}\n-        mkdir -p build/release/extension/out_of_tree\n-        ${{ inputs.python_name}} scripts/build_out_of_tree_extensions.py ${{ inputs.aarch64_cross_compile == 1 && '--aarch64-cc' || '' }} --github-ref=$GITHUB_REF\n-\n     - name: Run post-install scripts\n       if: ${{ inputs.post_install != '' }}\n       shell: bash\ndiff --git a/.github/config/in_tree_extensions.cmake b/.github/config/in_tree_extensions.cmake\nnew file mode 100644\nindex 000000000000..69cdcde89813\n--- /dev/null\n+++ b/.github/config/in_tree_extensions.cmake\n@@ -0,0 +1,16 @@\n+#\n+# This is the DuckDB in-tree extension config as it will run on the CI\n+#\n+# to build duckdb with this configuration run:\n+#   EXTENSION_CONFIGS=.github/config/in_tree_extensions.cmake make\n+#\n+\n+duckdb_extension_load(excel DONT_LINK)\n+duckdb_extension_load(fts DONT_LINK)\n+duckdb_extension_load(httpfs DONT_LINK)\n+duckdb_extension_load(icu DONT_LINK)\n+duckdb_extension_load(json DONT_LINK)\n+duckdb_extension_load(parquet DONT_LINK)\n+duckdb_extension_load(tpcds DONT_LINK)\n+duckdb_extension_load(tpch DONT_LINK)\n+duckdb_extension_load(visualizer DONT_LINK)\n\\ No newline at end of file\ndiff --git a/.github/config/out_of_tree_extensions.cmake b/.github/config/out_of_tree_extensions.cmake\nnew file mode 100644\nindex 000000000000..c5d1a3453698\n--- /dev/null\n+++ b/.github/config/out_of_tree_extensions.cmake\n@@ -0,0 +1,35 @@\n+#\n+# This is the DuckDB out-of-tree extension config as it will run on the CI\n+#\n+# to build duckdb with this configuration run:\n+#   EXTENSION_CONFIGS=.github/config/out_of_tree_extensions.cmake make\n+#\n+\n+duckdb_extension_load(sqlite_scanner\n+    DONT_LINK\n+    GIT_URL https://github.com/duckdblabs/sqlite_scanner\n+    GIT_TAG 05dd50b3fc91ee4974964086efbc16be74fa115f\n+)\n+duckdb_extension_load(postgres_scanner\n+    DONT_LINK\n+    GIT_URL https://github.com/duckdblabs/postgres_scanner\n+    GIT_TAG cd043b49cdc9e0d3752535b8333c9433e1007a48\n+)\n+duckdb_extension_load(spatial\n+    DONT_LINK\n+    GIT_URL https://github.com/duckdblabs/duckdb_spatial.git\n+    GIT_TAG f577b9441793f9170403e489f5d3587e023a945f\n+)\n+\n+if (NOT WIN32)\n+    duckdb_extension_load(arrow\n+        DONT_LINK\n+        GIT_URL https://github.com/duckdblabs/arrow\n+        GIT_TAG 1a43a5513b96e4c6ffd92026775ffeb648e71dac\n+    )\n+    duckdb_extension_load(substrait\n+        DONT_LINK\n+        GIT_URL https://github.com/duckdblabs/substrait\n+        GIT_TAG 53da781310c9c680efb97576d33a5fde89a58870\n+    )\n+endif()\n\\ No newline at end of file\ndiff --git a/.github/config/uncovered_files.csv b/.github/config/uncovered_files.csv\nindex 9e71e321f765..18c9c9fe9a79 100644\n--- a/.github/config/uncovered_files.csv\n+++ b/.github/config/uncovered_files.csv\n@@ -1,6 +1,6 @@\n catalog/catalog.cpp\t16\n catalog/catalog_entry.cpp\t3\n-catalog/catalog_entry/duck_schema_entry.cpp\t3\n+catalog/catalog_entry/duck_schema_entry.cpp\t4\n catalog/catalog_entry/duck_table_entry.cpp\t7\n catalog/catalog_entry/index_catalog_entry.cpp\t2\n catalog/catalog_entry/scalar_function_catalog_entry.cpp\t3\n@@ -23,7 +23,7 @@ common/box_renderer.cpp\t35\n common/checksum.cpp\t2\n common/compressed_file_system.cpp\t14\n common/crypto/md5.cpp\t2\n-common/enum_util.cpp\t3512\n+common/enum_util.cpp\t3526\n common/enums/expression_type.cpp\t185\n common/enums/join_type.cpp\t3\n common/exception.cpp\t96\n@@ -55,7 +55,7 @@ common/serializer/buffered_file_reader.cpp\t9\n common/serializer/buffered_file_writer.cpp\t2\n common/sort/comparators.cpp\t72\n common/sort/merge_sorter.cpp\t100\n-common/sort/partition_state.cpp\t43\n+common/sort/partition_state.cpp\t44\n common/sort/sort_state.cpp\t10\n common/sort/sorted_block.cpp\t20\n common/string_util.cpp\t15\n@@ -89,7 +89,7 @@ common/types/string_heap.cpp\t11\n common/types/time.cpp\t21\n common/types/timestamp.cpp\t19\n common/types/uuid.cpp\t3\n-common/types/validity_mask.cpp\t6\n+common/types/validity_mask.cpp\t10\n common/types/value.cpp\t180\n common/types/vector.cpp\t132\n common/value_operations/comparison_operations.cpp\t32\n@@ -150,15 +150,11 @@ execution/expression_executor/execute_comparison.cpp\t5\n execution/expression_executor/execute_conjunction.cpp\t3\n execution/expression_executor/execute_operator.cpp\t3\n execution/expression_executor_state.cpp\t2\n-execution/index/art/art.cpp\t48\n-execution/index/art/art_key.cpp\t14\n-execution/index/art/iterator.cpp\t8\n-execution/index/art/leaf.cpp\t38\n-execution/index/art/node.cpp\t42\n-execution/index/art/node256.cpp\t4\n-execution/index/art/node48.cpp\t13\n-execution/index/art/prefix.cpp\t4\n-execution/index/art/prefix_segment.cpp\t2\n+execution/index/art/art.cpp\t3\n+execution/index/art/art_key.cpp\t13\n+execution/index/art/iterator.cpp\t4\n+execution/index/art/node.cpp\t5\n+execution/index/art/node256.cpp\t1\n execution/join_hashtable.cpp\t23\n execution/nested_loop_join/nested_loop_join_inner.cpp\t24\n execution/nested_loop_join/nested_loop_join_mark.cpp\t30\n@@ -206,23 +202,26 @@ execution/operator/scan/physical_positional_scan.cpp\t20\n execution/operator/schema/physical_attach.cpp\t6\n execution/operator/schema/physical_create_index.cpp\t3\n execution/operator/schema/physical_create_type.cpp\t2\n+execution/operator/set/physical_cte.cpp\t1\n execution/partitionable_hashtable.cpp\t5\n execution/perfect_aggregate_hashtable.cpp\t4\n execution/physical_operator.cpp\t2\n execution/physical_plan/plan_aggregate.cpp\t2\n execution/physical_plan/plan_asof_join.cpp\t37\n+execution/physical_plan/plan_column_data_get.cpp\t1\n execution/physical_plan/plan_comparison_join.cpp\t14\n execution/physical_plan/plan_explain.cpp\t5\n execution/physical_plan/plan_export.cpp\t2\n+execution/physical_plan/plan_expression_get.cpp\t1\n execution/physical_plan/plan_positional_join.cpp\t2\n-execution/physical_plan/plan_recursive_cte.cpp\t2\n+execution/physical_plan/plan_recursive_cte.cpp\t3\n execution/physical_plan/plan_sample.cpp\t2\n execution/physical_plan/plan_set_operation.cpp\t2\n execution/physical_plan/plan_show_select.cpp\t3\n execution/physical_plan_generator.cpp\t6\n execution/radix_partitioned_hashtable.cpp\t3\n execution/reservoir_sample.cpp\t60\n-execution/window_segment_tree.cpp\t10\n+execution/window_segment_tree.cpp\t12\n function/aggregate/sorted_aggregate_function.cpp\t85\n function/built_in_functions.cpp\t6\n function/cast/bit_cast.cpp\t2\n@@ -263,7 +262,7 @@ function/table/copy_csv.cpp\t16\n function/table/pragma_detailed_profiling_output.cpp\t86\n function/table/pragma_last_profiling_output.cpp\t51\n function/table/range.cpp\t5\n-function/table/read_csv.cpp\t51\n+function/table/read_csv.cpp\t52\n function/table/system/duckdb_constraints.cpp\t3\n function/table/system/duckdb_dependencies.cpp\t4\n function/table/system/duckdb_extensions.cpp\t20\n@@ -310,7 +309,7 @@ extension/parquet/include/row_number_column_reader.hpp\t10\n extension/parquet/include/templated_column_reader.hpp\t5\n extension/parquet/include/thrift_tools.hpp\t27\n extension/parquet/include/zstd_file_system.hpp\t3\n-extension/parquet/parquet_extension.cpp\t30\n+extension/parquet/parquet_extension.cpp\t31\n extension/parquet/parquet_metadata.cpp\t29\n extension/parquet/parquet_reader.cpp\t113\n extension/parquet/parquet_statistics.cpp\t12\n@@ -321,6 +320,7 @@ include/duckdb/catalog/catalog.hpp\t3\n include/duckdb/catalog/catalog_entry/table_catalog_entry.hpp\t3\n include/duckdb/catalog/catalog_set.hpp\t2\n include/duckdb/catalog/mapping_value.hpp\t2\n+include/duckdb/common/allocator.hpp\t2\n include/duckdb/common/bit_utils.hpp\t4\n include/duckdb/common/bitpacking.hpp\t11\n include/duckdb/common/dl.hpp\t3\n@@ -332,6 +332,7 @@ include/duckdb/common/hive_partitioning.hpp\t3\n include/duckdb/common/local_file_system.hpp\t5\n include/duckdb/common/multi_file_reader_options.hpp\t3\n include/duckdb/common/opener_file_system.hpp\t21\n+include/duckdb/common/operator/abs.hpp\t1\n include/duckdb/common/operator/add.hpp\t2\n include/duckdb/common/operator/decimal_cast_operators.hpp\t3\n include/duckdb/common/operator/multiply.hpp\t2\n@@ -345,6 +346,7 @@ include/duckdb/common/serializer.hpp\t4\n include/duckdb/common/serializer/format_deserializer.hpp\t37\n include/duckdb/common/serializer/format_serializer.hpp\t34\n include/duckdb/common/sort/duckdb_pdqsort.hpp\t3\n+include/duckdb/common/sort/sorted_block.hpp\t1\n include/duckdb/common/string_util.hpp\t9\n include/duckdb/common/type_util.hpp\t2\n include/duckdb/common/types.hpp\t5\n@@ -377,11 +379,13 @@ include/duckdb/execution/operator/join/physical_piecewise_merge_join.hpp\t3\n include/duckdb/execution/operator/join/physical_range_join.hpp\t2\n include/duckdb/execution/operator/persistent/buffered_csv_reader.hpp\t2\n include/duckdb/execution/operator/persistent/parallel_csv_reader.hpp\t3\n+include/duckdb/function/aggregate_function.hpp\t2\n include/duckdb/function/function_serialization.hpp\t2\n include/duckdb/function/function_set.hpp\t3\n include/duckdb/function/scalar/list/contains_or_position.hpp\t16\n include/duckdb/function/table_function.hpp\t6\n include/duckdb/function/udf_function.hpp\t108\n+include/duckdb/main/appender.hpp\t4\n include/duckdb/main/capi/cast/from_decimal.hpp\t2\n include/duckdb/main/capi/cast/to_decimal.hpp\t38\n include/duckdb/main/client_context.hpp\t2\n@@ -553,6 +557,7 @@ parser/parsed_expression.cpp\t15\n parser/parsed_expression_iterator.cpp\t3\n parser/parser.cpp\t5\n parser/query_node.cpp\t8\n+parser/query_node/cte_node.cpp\t4\n parser/query_node/recursive_cte_node.cpp\t6\n parser/query_node/select_node.cpp\t18\n parser/query_node/set_operation_node.cpp\t6\n@@ -580,6 +585,7 @@ parser/transform/expression/transform_expression.cpp\t4\n parser/transform/expression/transform_function.cpp\t21\n parser/transform/expression/transform_interval.cpp\t4\n parser/transform/expression/transform_param_ref.cpp\t2\n+parser/transform/helpers/transform_cte.cpp\t1\n parser/transform/helpers/transform_sample.cpp\t5\n parser/transform/helpers/transform_typename.cpp\t14\n parser/transform/statement/transform_alter_sequence.cpp\t2\n@@ -611,8 +617,9 @@ planner/binder.cpp\t7\n planner/binder/expression/bind_aggregate_expression.cpp\t15\n planner/binder/expression/bind_between_expression.cpp\t2\n planner/binder/expression/bind_collate_expression.cpp\t2\n-planner/binder/expression/bind_columnref_expression.cpp\t5\n+planner/binder/expression/bind_columnref_expression.cpp\t6\n planner/binder/expression/bind_comparison_expression.cpp\t2\n+planner/binder/query_node/bind_cte_node.cpp\t1\n planner/binder/expression/bind_function_expression.cpp\t5\n planner/binder/expression/bind_operator_expression.cpp\t3\n planner/binder/expression/bind_star_expression.cpp\t3\n@@ -636,7 +643,7 @@ planner/binder/statement/bind_update.cpp\t4\n planner/binder/statement/bind_vacuum.cpp\t3\n planner/binder/tableref/bind_basetableref.cpp\t4\n planner/binder/tableref/bind_joinref.cpp\t3\n-planner/binder/tableref/bind_pivot.cpp\t5\n+planner/binder/tableref/bind_pivot.cpp\t6\n planner/binder/tableref/bind_table_function.cpp\t18\n planner/binder/tableref/plan_joinref.cpp\t2\n planner/binder/tableref/plan_subqueryref.cpp\t2\n@@ -660,7 +667,7 @@ planner/expression_binder/alter_binder.cpp\t3\n planner/expression_binder/base_select_binder.cpp\t3\n planner/expression_binder/check_binder.cpp\t5\n planner/expression_binder/constant_binder.cpp\t3\n-planner/expression_binder/group_binder.cpp\t4\n+planner/expression_binder/group_binder.cpp\t5\n planner/expression_binder/having_binder.cpp\t4\n planner/expression_binder/index_binder.cpp\t7\n planner/expression_binder/insert_binder.cpp\t5\n@@ -748,7 +755,7 @@ storage/table/chunk_info.cpp\t16\n storage/table/column_checkpoint_state.cpp\t20\n storage/table/column_data.cpp\t16\n storage/table/column_data_checkpointer.cpp\t4\n-storage/table/column_segment.cpp\t61\n+storage/table/column_segment.cpp\t62\n storage/table/list_column_data.cpp\t28\n storage/table/row_group.cpp\t13\n storage/table/row_group_collection.cpp\t7\ndiff --git a/.github/patches/duckdb-wasm/extension_build_rework.patch b/.github/patches/duckdb-wasm/extension_build_rework.patch\nnew file mode 100644\nindex 000000000000..1816a51941ec\n--- /dev/null\n+++ b/.github/patches/duckdb-wasm/extension_build_rework.patch\n@@ -0,0 +1,31 @@\n+diff --git a/lib/cmake/duckdb.cmake b/lib/cmake/duckdb.cmake\n+index cb0e60d6..d7a4851d 100644\n+--- a/lib/cmake/duckdb.cmake\n++++ b/lib/cmake/duckdb.cmake\n+@@ -15,6 +15,10 @@ endif()\n+ set(DUCKDB_CXX_FLAGS \"${DUCKDB_CXX_FLAGS} -Wno-unqualified-std-cast-call -DDUCKDB_DEBUG_NO_SAFETY\")\n+ message(\"DUCKDB_CXX_FLAGS=${DUCKDB_CXX_FLAGS}\")\n+ \n++set(DUCKDB_EXTENSIONS \"fts;excel;json\")\n++# Escape semicolons in DUCKDB_EXTENSIONS before passing to ExternalProject_Add\n++string(REPLACE \";\" \"$<SEMICOLON>\" DUCKDB_EXTENSIONS_PACKED \"${DUCKDB_EXTENSIONS}\")\n++\n+ ExternalProject_Add(\n+   duckdb_ep\n+   SOURCE_DIR \"${DUCKDB_CORE_DIR}\"\n+@@ -29,13 +33,10 @@ ExternalProject_Add(\n+              -DCMAKE_MODULE_PATH=${CMAKE_MODULE_PATH}\n+              -DCMAKE_BUILD_TYPE=${DUCKDB_BUILD_TYPE}\n+              -DCMAKE_INSTALL_PREFIX=<INSTALL_DIR>\n+-             -DBUILD_PARQUET_EXTENSION=TRUE\n+-             -DBUILD_FTS_EXTENSION=TRUE\n+-             -DBUILD_EXCEL_EXTENSION=TRUE\n+-             -DBUILD_JSON_EXTENSION=TRUE\n++             -DBUILD_EXTENSIONS=${DUCKDB_EXTENSIONS_PACKED}\n++             -DSKIP_EXTENSIONS=jemalloc\n+              -DBUILD_SHELL=FALSE\n+              -DBUILD_UNITTESTS=FALSE\n+-             -DBUILD_JEMALLOC_EXTENSION=FALSE\n+              -DDISABLE_BUILTIN_EXTENSIONS=TRUE\n+   BUILD_BYPRODUCTS\n+     <INSTALL_DIR>/lib/libduckdb_re2.a\ndiff --git a/.github/regression/tpch_parquet.csv b/.github/regression/tpch_parquet.csv\nnew file mode 100644\nindex 000000000000..0b284e8ca1bf\n--- /dev/null\n+++ b/.github/regression/tpch_parquet.csv\n@@ -0,0 +1,22 @@\n+benchmark/tpch/sf1-parquet/q01.benchmark\n+benchmark/tpch/sf1-parquet/q02.benchmark\n+benchmark/tpch/sf1-parquet/q03.benchmark\n+benchmark/tpch/sf1-parquet/q04.benchmark\n+benchmark/tpch/sf1-parquet/q05.benchmark\n+benchmark/tpch/sf1-parquet/q06.benchmark\n+benchmark/tpch/sf1-parquet/q07.benchmark\n+benchmark/tpch/sf1-parquet/q08.benchmark\n+benchmark/tpch/sf1-parquet/q09.benchmark\n+benchmark/tpch/sf1-parquet/q10.benchmark\n+benchmark/tpch/sf1-parquet/q11.benchmark\n+benchmark/tpch/sf1-parquet/q12.benchmark\n+benchmark/tpch/sf1-parquet/q13.benchmark\n+benchmark/tpch/sf1-parquet/q14.benchmark\n+benchmark/tpch/sf1-parquet/q15.benchmark\n+benchmark/tpch/sf1-parquet/q16.benchmark\n+benchmark/tpch/sf1-parquet/q17.benchmark\n+benchmark/tpch/sf1-parquet/q18.benchmark\n+benchmark/tpch/sf1-parquet/q19.benchmark\n+benchmark/tpch/sf1-parquet/q20.benchmark\n+benchmark/tpch/sf1-parquet/q21.benchmark\n+benchmark/tpch/sf1-parquet/q22.benchmark\ndiff --git a/.github/workflows/ExtensionRebuild.yml b/.github/workflows/ExtensionRebuild.yml\nindex ce26e6a91eee..8af7c1e07997 100644\n--- a/.github/workflows/ExtensionRebuild.yml\n+++ b/.github/workflows/ExtensionRebuild.yml\n@@ -18,6 +18,10 @@ on:\n         description: 'DuckDB version (short commit hash or vX.Y.Z tag)'\n         required: true\n         type: string\n+      use_old_extension_config:\n+        description: 'Use the old csv-based configuration for building extensions'\n+        required: true\n+        type: bool\n \n jobs:\n   linux-extensions-64-rebuild:\n@@ -38,22 +42,21 @@ jobs:\n         git clone https://github.com/duckdb/duckdb.git duckdb-old\n         git -C duckdb-old checkout ${{ inputs.duckdb_ref }}\n \n-    - name: Override extensions.csv\n+    - name: Override config (CMake)\n+      if: !use_old_extension_config\n+      shell: bash\n+      run: |\n+        echo -e 'duckdb_extension_load( ${{ inputs.extension_name }} GIT_URL ${{ inputs.extension_repo }} GIT_TAG ${{ inputs.extension_ref }} DONT_LINK)' > duckdb-old/.github/config/out_of_tree_extensions.cmake\n+\n+    - name: Override config (CSV)\n+      if: use_old_extension_config\n       shell: bash\n       run: |\n         echo -e 'name,url,commit,options\\n${{ inputs.extension_name }},${{ inputs.extension_repo }},${{ inputs.extension_ref }},true' > duckdb-old/.github/config/extensions.csv\n \n     - uses: ./.github/actions/build_extensions\n       with:\n-        visualizer: 0\n-        icu: 0\n-        tpch: 0\n-        tpcds: 0\n-        httpfs: 0\n-        fts: 0\n-        json: 0\n-        excel: 0\n-        sqlsmith: 0\n+        build_in_tree_extensions: 0\n         build_dir: duckdb-old\n         deploy_as: linux_amd64\n         deploy_version: ${{ inputs.duckdb_ref }}\n@@ -92,15 +95,7 @@ jobs:\n \n       - uses: ./.github/actions/build_extensions\n         with:\n-          visualizer: 0\n-          icu: 0\n-          tpch: 0\n-          tpcds: 0\n-          httpfs: 0\n-          fts: 0\n-          json: 0\n-          excel: 0\n-          sqlsmith: 0\n+          build_in_tree_extensions: 0\n           treat_warn_as_error: 0\n           build_dir: duckdb-old\n           post_install: rm build/release/src/libduckdb*\n@@ -144,15 +139,7 @@ jobs:\n \n      - uses: ./.github/actions/build_extensions\n        with:\n-         visualizer: 0\n-         icu: 0\n-         tpch: 0\n-         tpcds: 0\n-         httpfs: 0\n-         fts: 0\n-         json: 0\n-         excel: 0\n-         sqlsmith: 0\n+         build_in_tree_extensions: 0\n          deploy_as: windows_amd64\n          deploy_version: ${{ inputs.duckdb_ref }}\n          run_tests: 0\n@@ -202,15 +189,7 @@ jobs:\n \n     - uses: ./.github/actions/build_extensions\n       with:\n-        visualizer: 0\n-        icu: 0\n-        tpch: 0\n-        tpcds: 0\n-        httpfs: 0\n-        fts: 0\n-        json: 0\n-        excel: 0\n-        sqlsmith: 0\n+        build_in_tree_extensions: 0\n         run_tests: 0\n         build_dir: duckdb-old\n         deploy_as: linux_amd64_gcc4\ndiff --git a/.github/workflows/Java.yml b/.github/workflows/Java.yml\nindex 3676858eb52a..893a3a72fd7c 100644\n--- a/.github/workflows/Java.yml\n+++ b/.github/workflows/Java.yml\n@@ -143,7 +143,7 @@ jobs:\n         run: >\n           python scripts/windows_ci.py\n \n-          cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_GENERATOR_PLATFORM=x64 -DJDBC_DRIVER=1 -DBUILD_JSON_EXTENSION=1\n+          cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_GENERATOR_PLATFORM=x64 -DJDBC_DRIVER=1 -DBUILD_EXTENSIONS=json\n \n           cmake --build . --config Release\n       - name: Java Tests\n@@ -272,7 +272,7 @@ jobs:\n         with:\n           name: java-jars\n           path: |\n-            jdbc-artifacts/results\n+            jdbc-artifacts\n \n   jdbc-compliance:\n     name: JDBC Compliance\ndiff --git a/.github/workflows/LinuxRelease.yml b/.github/workflows/LinuxRelease.yml\nindex 34497b8b5d81..0504c52c0606 100644\n--- a/.github/workflows/LinuxRelease.yml\n+++ b/.github/workflows/LinuxRelease.yml\n@@ -281,11 +281,10 @@ jobs:\n \n     - name: Build\n       shell: bash\n+      env:\n+        DISABLE_BUILTIN_EXTENSIONS: 1\n       run: |\n-        mkdir -p build/release\n-        cd build/release\n-        cmake -G \"Ninja\" -DCMAKE_BUILD_TYPE=Release ../..\n-        cmake --build . --config Release\n+        make\n \n     - uses: actions/download-artifact@v3\n       with:\n@@ -320,7 +319,7 @@ jobs:\n       shell: bash\n       run: |\n         mkdir -p build/release\n-        (cd build/release && cmake -DSTATIC_LIBCPP=1 -DBUILD_ICU_EXTENSION=1 -DBUILD_PARQUET_EXTENSION=1 -DBUILD_FTS_EXTENSION=1 -DBUILD_JSON_EXTENSION=1 -DBUILD_EXCEL_EXTENSION=1 -DFORCE_32_BIT=1 -DCMAKE_BUILD_TYPE=Release ../.. && cmake --build .)\n+        (cd build/release && cmake -DSTATIC_LIBCPP=1 -DBUILD_EXTENSIONS=\"parquet;fts;json;excel;icu\" -DFORCE_32_BIT=1 -DCMAKE_BUILD_TYPE=Release ../.. && cmake --build .)\n \n     - name: Test\n       shell: bash\n@@ -372,7 +371,7 @@ jobs:\n         export TOOLCHAIN=`pwd`/rpi-tools\n         mkdir -p build/release\n         cd build/release\n-        cmake -G Ninja -DBUILD_TPCH_EXTENSION=1 -DBUILD_TPCDS_EXTENSION=1 -DDUCKDB_RPI_TOOLCHAIN_PREFIX=$TOOLCHAIN -DBUILD_UNITTESTS=0 -DCMAKE_TOOLCHAIN_FILE=../../scripts/raspberry-pi-cmake-toolchain.cmake ../../\n+        cmake -G Ninja -DBUILD_EXTENSIONS=\"tpch;tpcds\" -DDUCKDB_RPI_TOOLCHAIN_PREFIX=$TOOLCHAIN -DBUILD_UNITTESTS=0 -DCMAKE_TOOLCHAIN_FILE=../../scripts/raspberry-pi-cmake-toolchain.cmake ../../\n         cmake --build .\n         file duckdb\n \ndiff --git a/.github/workflows/Main.yml b/.github/workflows/Main.yml\nindex 632cb548626a..85b880a0ede7 100644\n--- a/.github/workflows/Main.yml\n+++ b/.github/workflows/Main.yml\n@@ -51,7 +51,6 @@ jobs:\n       BUILD_JSON: 1\n       BUILD_EXCEL: 1\n       BUILD_PARQUET: 1\n-      BUILD_SUBSTRAIT_EXTENSION: 1\n       BUILD_JEMALLOC: 1\n       GEN: ninja\n \ndiff --git a/.github/workflows/R.yml b/.github/workflows/R.yml\nindex dcb36167bf5b..4c4d6cd035dd 100644\n--- a/.github/workflows/R.yml\n+++ b/.github/workflows/R.yml\n@@ -258,7 +258,7 @@ jobs:\n           python_name: python\n           override_cc: gcc\n           override_cxx: g++\n-          out_of_tree_ext: 0\n+          build_out_of_tree_extensions: 0\n           openssl_path: C:/rtools43/x86_64-w64-mingw32.static.posix # not sure if this is required, there seems to be an openssl there\n           run_tests: 0\n \ndiff --git a/.github/workflows/Regression.yml b/.github/workflows/Regression.yml\nindex 523678acf2cf..1aa37a4d5306 100644\n--- a/.github/workflows/Regression.yml\n+++ b/.github/workflows/Regression.yml\n@@ -95,6 +95,12 @@ jobs:\n       run: |\n         python scripts/regression_test_runner.py --old=duckdb/build/release/benchmark/benchmark_runner --new=build/release/benchmark/benchmark_runner --benchmarks=.github/regression/tpch.csv --verbose --threads=2\n \n+    - name: Regression Test TPCH-PARQUET\n+      if: always()\n+      shell: bash\n+      run: |\n+        python scripts/regression_test_runner.py --old=duckdb/build/release/benchmark/benchmark_runner --new=build/release/benchmark/benchmark_runner --benchmarks=.github/regression/tpch_parquet.csv --verbose --threads=2\n+\n     - name: Regression Test TPCDS\n       if: always()\n       shell: bash\ndiff --git a/.github/workflows/Windows.yml b/.github/workflows/Windows.yml\nindex 213ee01d1811..7ad2e380f2ca 100644\n--- a/.github/workflows/Windows.yml\n+++ b/.github/workflows/Windows.yml\n@@ -58,7 +58,7 @@ jobs:\n       shell: bash\n       run: |\n         python scripts/windows_ci.py\n-        cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_GENERATOR_PLATFORM=x64 -DBUILD_ICU_EXTENSION=1 -DBUILD_PARQUET_EXTENSION=1 -DBUILD_TPCH_EXTENSION=1 -DBUILD_TPCDS_EXTENSION=1 -DBUILD_FTS_EXTENSION=1 -DBUILD_JSON_EXTENSION=1 -DBUILD_ODBC_DRIVER=1 -DDISABLE_UNITY=1 -DBUILD_AUTOCOMPLETE_EXTENSION=1\n+        cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_GENERATOR_PLATFORM=x64 -DBUILD_EXTENSIONS=\"parquet;icu;tpch;tpcds;fts;json;excel;visualizer;autocomplete\" -DBUILD_ODBC_DRIVER=1 -DDISABLE_UNITY=1\n         cmake --build . --config Release\n \n     - name: Test\n@@ -156,7 +156,7 @@ jobs:\n     - name: Build\n       shell: bash\n       run: |\n-        cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_GENERATOR_PLATFORM=Win32 -DBUILD_ICU_EXTENSION=1 -DBUILD_PARQUET_EXTENSION=1 -DBUILD_TPCH_EXTENSION=1 -DBUILD_TPCDS_EXTENSION=1 -DBUILD_FTS_EXTENSION=1 -DBUILD_JSON_EXTENSION=1 -DBUILD_EXCEL_EXTENSION=1 -DBUILD_VISUALIZER_EXTENSION=1 -DBUILD_AUTOCOMPLETE_EXTENSION=1\n+        cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_GENERATOR_PLATFORM=Win32 -DBUILD_EXTENSIONS=\"icu;parquet;tpch;tpcds;fts;json;excel;visualizer;autocomplete\"\n         cmake --build . --config Release\n \n     - name: Test\n@@ -211,7 +211,7 @@ jobs:\n        - name: Build\n          shell: msys2 {0}\n          run: |\n-           cmake -G \"Ninja\" -DCMAKE_BUILD_TYPE=Release -DBUILD_PARQUET_EXTENSION=1\n+           cmake -G \"Ninja\" -DCMAKE_BUILD_TYPE=Release -DBUILD_EXTENSIONS=parquet\n            cmake --build . --config Release\n \n        - name: Test\ndiff --git a/.github/workflows/lcov_exclude b/.github/workflows/lcov_exclude\nindex 68e5d747320d..7dda4176dbf8 100644\n--- a/.github/workflows/lcov_exclude\n+++ b/.github/workflows/lcov_exclude\n@@ -20,7 +20,7 @@\n */extension/visualizer/*\n */extension/json/yyjson/*\n main/extension_helper.cpp\n-*extension_oote*\n+generated_extension_loader.hpp\n */adbc/*\n common/enum_util.cpp\n common/enums/expression_type.cpp\ndiff --git a/.gitignore b/.gitignore\nindex dee3c03300ec..025ea3268192 100644\n--- a/.gitignore\n+++ b/.gitignore\n@@ -332,13 +332,18 @@ tools/pythonpkg/tests/userdata1.parquet\n __nvm\n \n *.vcxproj*\n-*.cmake\n *.sln\n \n # Zig files\n-zig-out/*\n+zig-out/*gs\n zig-cache/*\n *.zig\n \n # .db files\n *.db\n+\n+# local cmake extension config\n+extension/extension_config_local.cmake\n+\n+# extension_external dir\n+extension_external\n\\ No newline at end of file\ndiff --git a/CMakeLists.txt b/CMakeLists.txt\nindex 53f4e64f5b2b..137174b2e6bf 100644\n--- a/CMakeLists.txt\n+++ b/CMakeLists.txt\n@@ -215,6 +215,15 @@ if (OSX_BUILD_UNIVERSAL)\n   set(CMAKE_OSX_DEPLOYMENT_TARGET 11.0 CACHE STRING \"Minimum OS X deployment version\" FORCE)\n endif()\n \n+if (OSX_BUILD_ARCH)\n+  message(STATUS building for architecture: ${OSX_BUILD_ARCH})\n+  if (NOT APPLE)\n+    error(\"This only makes sense on OSX\")\n+  endif()\n+  SET(CMAKE_OSX_ARCHITECTURES \"${OSX_BUILD_ARCH}\" CACHE STRING \"Build architectures for Mac OS X\" FORCE)\n+  set(CMAKE_OSX_DEPLOYMENT_TARGET 11.0 CACHE STRING \"Minimum OS X deployment version\" FORCE)\n+endif()\n+\n set(SUN FALSE)\n if(${CMAKE_SYSTEM_NAME} STREQUAL \"SunOS\")\n   set(CXX_EXTRA \"${CXX_EXTRA} -mimpure-text\")\n@@ -286,28 +295,9 @@ if(WIN32)\n   set(EXTENSION_STATIC_BUILD TRUE)\n endif()\n \n-set(JEMALLOC_DEFAULT_BUILD FALSE)\n-if(NOT CLANG_TIDY AND OS_NAME STREQUAL \"linux\")\n-  # build jemalloc by default for linux\n-  set(JEMALLOC_DEFAULT_BUILD TRUE)\n-endif()\n-\n option(BUILD_CORE_FUNCTIONS_EXTENSION \"Build the core functions.\" TRUE)\n-option(BUILD_ICU_EXTENSION \"Build the ICU extension.\" FALSE)\n-option(BUILD_PARQUET_EXTENSION \"Build the Parquet extension.\" FALSE)\n-option(BUILD_TPCH_EXTENSION \"Build the TPC-H extension.\" FALSE)\n-option(BUILD_TPCDS_EXTENSION \"Build the TPC-DS extension.\" FALSE)\n-option(BUILD_FTS_EXTENSION \"Build the FTS extension.\" FALSE)\n-option(BUILD_HTTPFS_EXTENSION \"Build the HTTP File System extension.\" FALSE)\n-option(BUILD_VISUALIZER_EXTENSION \"Build the profiler-output visualizer extension.\" FALSE)\n-option(BUILD_JSON_EXTENSION \"Build the JSON extension.\" FALSE)\n-option(BUILD_JEMALLOC_EXTENSION \"Build the JEMalloc extension.\" ${JEMALLOC_DEFAULT_BUILD})\n-option(BUILD_EXCEL_EXTENSION \"Build the excel extension.\" FALSE)\n-option(BUILD_INET_EXTENSION \"Build the inet extension.\" FALSE)\n option(BUILD_BENCHMARKS \"Enable building of the benchmark suite.\" FALSE)\n-option(BUILD_SQLSMITH_EXTENSION \"Enable building of the SQLSmith extension.\" FALSE)\n option(BUILD_TPCE \"Enable building of the TPC-E tool.\" FALSE)\n-option(BUILD_AUTOCOMPLETE_EXTENSION \"Enable building of the autocomplete extension\" FALSE)\n option(DISABLE_BUILTIN_EXTENSIONS \"Disable linking extensions.\" FALSE)\n option(JDBC_DRIVER \"Build the DuckDB JDBC driver\" FALSE)\n option(BUILD_ODBC_DRIVER \"Build the DuckDB ODBC driver\" FALSE)\n@@ -319,6 +309,7 @@ option(BUILD_SHELL \"Build the DuckDB Shell and SQLite API Wrappers\" TRUE)\n option(DISABLE_THREADS \"Disable support for multi-threading\" FALSE)\n option(DISABLE_STR_INLINE \"Debug setting: disable inlining of strings\" FALSE)\n option(DISABLE_MEMORY_SAFETY \"Debug setting: disable memory access checks at runtime\" FALSE)\n+option(DISABLE_ASSERTIONS \"Debug setting: disable assertions\" FALSE)\n option(ALTERNATIVE_VERIFY \"Debug setting: use alternative verify mode\" FALSE)\n option(DESTROY_UNPINNED_BLOCKS \"Debug setting: destroy unpinned buffer-managed blocks\" FALSE)\n option(FORCE_ASYNC_SINK_SOURCE \"Debug setting: forces sinks/sources to block the first 2 times they're called\" FALSE)\n@@ -347,31 +338,6 @@ if (NOT BUILD_MAIN_DUCKDB_LIBRARY)\n   set(DISABLE_BUILTIN_EXTENSIONS TRUE)\n endif()\n \n-if(BUILD_PYTHON\n-   OR BUILD_R\n-   OR BUILD_NODE\n-   OR CONFIGURE_R\n-   OR JDBC_DRIVER)\n-  set(BUILD_ICU_EXTENSION TRUE)\n-  set(BUILD_VISUALIZER_EXTENSION TRUE)\n-  set(BUILD_PARQUET_EXTENSION TRUE)\n-endif()\n-\n-if(BUILD_PYTHON)\n-  set(BUILD_TPCH_EXTENSION TRUE)\n-  set(BUILD_TPCDS_EXTENSION TRUE)\n-  set(BUILD_FTS_EXTENSION TRUE)\n-  set(BUILD_EXCEL_EXTENSION TRUE)\n-endif()\n-\n-if (BUILD_BENCHMARKS)\n-  set(BUILD_PARQUET_EXTENSION TRUE)\n-endif()\n-\n-if(BUILD_SQLSMITH)\n-  set(BUILD_SQLSMITH_EXTENSION TRUE)\n-endif()\n-\n if(TREAT_WARNINGS_AS_ERRORS)\n   message(\"Treating warnings as errors.\")\n endif()\n@@ -389,6 +355,10 @@ if(DISABLE_MEMORY_SAFETY)\n   set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -DDUCKDB_DEBUG_NO_SAFETY\")\n endif()\n \n+if(DISABLE_ASSERTIONS)\n+  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -DDISABLE_ASSERTIONS\")\n+endif()\n+\n if(DESTROY_UNPINNED_BLOCKS)\n   set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -DDUCKDB_DEBUG_DESTROY_BLOCKS\")\n endif()\n@@ -471,7 +441,8 @@ if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n endif()\n \n if(OS_NAME STREQUAL \"windows\")\n-  if(BUILD_JEMALLOC_EXTENSION EQUAL 1)\n+  list (FIND DUCKDB_EXTENSION_NAMES jemalloc _index)\n+  if (${_index} GREATER -1)\n     # have to throw an error because this will crash at runtime\n     message(FATAL_ERROR \"The jemalloc extension is not supported on Windows\")\n   endif()\n@@ -581,203 +552,38 @@ function(add_extension_definitions)\n     add_definitions(-DDISABLE_BUILTIN_EXTENSIONS=${DISABLE_BUILTIN_EXTENSIONS})\n   endif()\n \n-  if(${BUILD_ICU_EXTENSION})\n-    include_directories(${PROJECT_SOURCE_DIR}/extension/icu/include)\n-    add_definitions(-DBUILD_ICU_EXTENSION=${BUILD_ICU_EXTENSION})\n-  endif()\n-\n-  if(${BUILD_PARQUET_EXTENSION})\n-    include_directories(${PROJECT_SOURCE_DIR}/extension/parquet/include)\n-    add_definitions(-DBUILD_PARQUET_EXTENSION=${BUILD_PARQUET_EXTENSION})\n-  endif()\n-\n-  if(${BUILD_TPCH_EXTENSION})\n-    include_directories(${PROJECT_SOURCE_DIR}/extension/tpch/include)\n-    add_definitions(-DBUILD_TPCH_EXTENSION=${BUILD_TPCH_EXTENSION})\n-  endif()\n-\n-  if(${BUILD_TPCDS_EXTENSION})\n-    include_directories(${PROJECT_SOURCE_DIR}/extension/tpcds/include)\n-    add_definitions(-DBUILD_TPCDS_EXTENSION=${BUILD_TPCDS_EXTENSION})\n-  endif()\n-\n-  if(${BUILD_FTS_EXTENSION})\n-    include_directories(${PROJECT_SOURCE_DIR}/extension/fts/include)\n-    add_definitions(-DBUILD_FTS_EXTENSION=${BUILD_FTS_EXTENSION})\n-  endif()\n-\n-  if(${BUILD_HTTPFS_EXTENSION})\n-    find_package(OpenSSL REQUIRED)\n-    include_directories(${PROJECT_SOURCE_DIR}/extension/httpfs/include ${OPENSSL_INCLUDE_DIR})\n-    add_definitions(-DBUILD_HTTPFS_EXTENSION=${BUILD_HTTPFS_EXTENSION})\n-  endif()\n-\n-  if(${BUILD_VISUALIZER_EXTENSION})\n-    include_directories(${PROJECT_SOURCE_DIR}/extension/visualizer/include)\n-    add_definitions(-DBUILD_VISUALIZER_EXTENSION=${BUILD_VISUALIZER_EXTENSION})\n-  endif()\n-\n-  if(${BUILD_JSON_EXTENSION})\n-    include_directories(${PROJECT_SOURCE_DIR}/extension/json/include)\n-    add_definitions(-DBUILD_JSON_EXTENSION=${BUILD_JSON_EXTENSION})\n-  endif()\n-\n-  if(${BUILD_JEMALLOC_EXTENSION})\n-    include_directories(${PROJECT_SOURCE_DIR}/extension/jemalloc/include)\n-    add_definitions(-DBUILD_JEMALLOC_EXTENSION=${BUILD_JEMALLOC_EXTENSION})\n-  endif()\n-\n-  if(${BUILD_EXCEL_EXTENSION})\n-    include_directories(${PROJECT_SOURCE_DIR}/extension/excel/include)\n-    add_definitions(-DBUILD_EXCEL_EXTENSION=${BUILD_EXCEL_EXTENSION})\n-  endif()\n-\n-  if(${BUILD_SQLSMITH_EXTENSION})\n-    include_directories(${PROJECT_SOURCE_DIR}/extension/sqlsmith/include)\n-    add_definitions(-DBUILD_SQLSMITH_EXTENSION=${BUILD_SQLSMITH_EXTENSION})\n-  endif()\n-\n-  if(${BUILD_INET_EXTENSION})\n-    include_directories(${PROJECT_SOURCE_DIR}/extension/inet/include)\n-    add_definitions(-DBUILD_INET_EXTENSION=${BUILD_INET_EXTENSION})\n-  endif()\n-\n-  if(${BUILD_AUTOCOMPLETE_EXTENSION})\n-    include_directories(${PROJECT_SOURCE_DIR}/extension/autocomplete/include)\n-    add_definitions(-DBUILD_AUTOCOMPLETE_EXTENSION=${BUILD_AUTOCOMPLETE_EXTENSION})\n-  endif()\n-\n   # Include paths for any registered out-of-tree extensions\n-  foreach(OOTE_NAME IN LISTS DUCKDB_OOT_EXTENSION_NAMES)\n-    string(TOUPPER ${OOTE_NAME} OOTE_NAME_UPPERCASE)\n-    if (DEFINED DUCKDB_OOT_EXTENSION_${OOTE_NAME_UPPERCASE}_INCLUDE_PATH)\n-      include_directories(\"${DUCKDB_OOT_EXTENSION_${OOTE_NAME_UPPERCASE}_INCLUDE_PATH}\")\n-    else()\n-      # By default, we assume third-party extensions to by (symlinked) in extensions/ with <name>_clone as path\n-      include_directories(\"${PROJECT_SOURCE_DIR}/extension/${OOTE_NAME}_clone/src/include\")\n+  foreach(EXT_NAME IN LISTS DUCKDB_EXTENSION_NAMES)\n+    string(TOUPPER ${EXT_NAME} EXT_NAME_UPPERCASE)\n+    if(${DUCKDB_EXTENSION_${EXT_NAME_UPPERCASE}_SHOULD_LINK})\n+      add_definitions(-DDUCKDB_EXTENSION_${EXT_NAME_UPPERCASE}_LINKED=1)\n+      if (DEFINED DUCKDB_EXTENSION_${EXT_NAME_UPPERCASE}_INCLUDE_PATH)\n+        include_directories(\"${DUCKDB_EXTENSION_${EXT_NAME_UPPERCASE}_INCLUDE_PATH}\")\n+      else()\n+        # We try the default locations for headers\n+        include_directories(\"${PROJECT_SOURCE_DIR}/extension_external/${EXT_NAME}/src/include\")\n+        include_directories(\"${PROJECT_SOURCE_DIR}/extension_external/${EXT_NAME}/include\")\n+      endif()\n     endif()\n   endforeach()\n endfunction()\n \n function(add_extension_dependencies LIBRARY)\n-  if(${BUILD_PARQUET_EXTENSION})\n-    add_dependencies(${LIBRARY} parquet_extension)\n-  endif()\n-\n-  if(${BUILD_ICU_EXTENSION})\n-    add_dependencies(${LIBRARY} icu_extension)\n-  endif()\n-\n-  if(${BUILD_TPCH_EXTENSION})\n-    add_dependencies(${LIBRARY} tpch_extension)\n-  endif()\n-\n-  if(${BUILD_TPCDS_EXTENSION})\n-    add_dependencies(${LIBRARY} tpcds_extension)\n-  endif()\n-\n-  if(${BUILD_FTS_EXTENSION})\n-    add_dependencies(${LIBRARY} fts_extension)\n-  endif()\n-\n-  if(${BUILD_HTTPFS_EXTENSION})\n-    add_dependencies(${LIBRARY} httpfs_extension)\n-  endif()\n-\n-  if(${BUILD_VISUALIZER_EXTENSION})\n-    add_dependencies(${LIBRARY} visualizer_extension)\n-  endif()\n-\n-  if(${BUILD_JSON_EXTENSION})\n-    add_dependencies(${LIBRARY} json_extension)\n-  endif()\n-\n-  if(${BUILD_JEMALLOC_EXTENSION})\n-    add_dependencies(${LIBRARY} jemalloc_extension)\n-  endif()\n-\n-  if(${BUILD_EXCEL_EXTENSION})\n-    add_dependencies(${LIBRARY} excel_extension)\n-  endif()\n-\n-  if(${BUILD_SQLSMITH_EXTENSION})\n-    add_dependencies(${LIBRARY} sqlsmith_extension)\n-  endif()\n-\n-  if(${BUILD_INET_EXTENSION})\n-    add_dependencies(${LIBRARY} inet_extension)\n-  endif()\n-\n-  foreach(OOTE_NAME IN LISTS DUCKDB_OOT_EXTENSION_NAMES)\n-    add_dependencies(${LIBRARY} ${OOTE_NAME}_extension)\n+  foreach(EXT_NAME IN LISTS DUCKDB_EXTENSION_NAMES)\n+    add_dependencies(${LIBRARY} ${EXT_NAME}_extension)\n   endforeach()\n-\n endfunction()\n \n function(link_extension_libraries LIBRARY)\n-  # special case for our static-only jemalloc extension\n-  if(${BUILD_JEMALLOC_EXTENSION})\n-    target_link_libraries(${LIBRARY} jemalloc_extension)\n-  endif()\n-\n   if(${DISABLE_BUILTIN_EXTENSIONS})\n     return()\n   endif()\n \n-  if(${BUILD_PARQUET_EXTENSION})\n-    target_link_libraries(${LIBRARY} parquet_extension)\n-  endif()\n-\n-  if(${BUILD_ICU_EXTENSION})\n-    target_link_libraries(${LIBRARY} icu_extension)\n-  endif()\n-\n-  if(${BUILD_TPCH_EXTENSION})\n-    target_link_libraries(${LIBRARY} tpch_extension)\n-  endif()\n-\n-  if(${BUILD_TPCDS_EXTENSION})\n-    target_link_libraries(${LIBRARY} tpcds_extension)\n-  endif()\n-\n-  if(${BUILD_FTS_EXTENSION})\n-    target_link_libraries(${LIBRARY} fts_extension)\n-  endif()\n-\n-  if(${BUILD_HTTPFS_EXTENSION})\n-    find_package(OpenSSL REQUIRED)\n-    target_link_libraries(${LIBRARY} httpfs_extension ${OPENSSL_LIBRARIES})\n-  endif()\n-\n-  if(${BUILD_VISUALIZER_EXTENSION})\n-    target_link_libraries(${LIBRARY} visualizer_extension)\n-  endif()\n-\n-  if(${BUILD_JSON_EXTENSION})\n-    target_link_libraries(${LIBRARY} json_extension)\n-  endif()\n-\n-  if(${BUILD_EXCEL_EXTENSION})\n-    target_link_libraries(${LIBRARY} excel_extension)\n-  endif()\n-\n-  if(${BUILD_SQLSMITH_EXTENSION})\n-    target_link_libraries(${LIBRARY} sqlsmith_extension)\n-  endif()\n-\n-  if(${BUILD_INET_EXTENSION})\n-    target_link_libraries(${LIBRARY} inet_extension)\n-  endif()\n-\n-  if(${BUILD_AUTOCOMPLETE_EXTENSION})\n-    target_link_libraries(${LIBRARY} autocomplete_extension)\n-  endif()\n-\n   # Now link against any registered out-of-tree extensions\n-  foreach(OOTE_NAME IN LISTS DUCKDB_OOT_EXTENSION_NAMES)\n-    string(TOUPPER ${OOTE_NAME} OOTE_NAME_UPPERCASE)\n-    if (${DUCKDB_OOT_EXTENSION_${OOTE_NAME_UPPERCASE}_SHOULD_LINK})\n-      target_link_libraries(${LIBRARY} ${OOTE_NAME}_extension)\n+  foreach(EXT_NAME IN LISTS DUCKDB_EXTENSION_NAMES)\n+    string(TOUPPER ${EXT_NAME} EXT_NAME_UPPERCASE)\n+    if (${DUCKDB_EXTENSION_${EXT_NAME_UPPERCASE}_SHOULD_LINK})\n+      target_link_libraries(${LIBRARY} ${EXT_NAME}_extension)\n     endif()\n   endforeach()\n \n@@ -876,30 +682,208 @@ function(build_loadable_extension NAME PARAMETERS)\n   build_loadable_extension_directory(${NAME} \"extension/${NAME}\" \"${PARAMETERS}\" ${FILES})\n endfunction()\n \n+# Internal extension register function\n+function(register_extension NAME DONT_LINK DONT_BUILD PATH INCLUDE_PATH)\n+  string(TOLOWER ${NAME} EXTENSION_NAME_LOWERCASE)\n+  string(TOUPPER ${NAME} EXTENSION_NAME_UPPERCASE)\n+\n+  set(DUCKDB_EXTENSION_NAMES ${DUCKDB_EXTENSION_NAMES} ${EXTENSION_NAME_LOWERCASE} PARENT_SCOPE)\n+\n+  # Allows explicitly disabling extensions that may be specified in other configurations\n+  if (NOT ${DONT_BUILD})\n+    set(DUCKDB_EXTENSION_${EXTENSION_NAME_UPPERCASE}_SHOULD_BUILD TRUE PARENT_SCOPE)\n+  else()\n+    set(DUCKDB_EXTENSION_${EXTENSION_NAME_UPPERCASE}_SHOULD_BUILD FALSE PARENT_SCOPE)\n+    set(DUCKDB_EXTENSION_${EXTENSION_NAME_UPPERCASE}_SHOULD_LINK FALSE PARENT_SCOPE)\n+    return()\n+  endif()\n+\n+  if (NOT ${DONT_LINK} AND NOT DISABLE_BUILTIN_EXTENSIONS)\n+    set(DUCKDB_EXTENSION_${EXTENSION_NAME_UPPERCASE}_SHOULD_LINK TRUE PARENT_SCOPE)\n+  else()\n+    set(DUCKDB_EXTENSION_${EXTENSION_NAME_UPPERCASE}_SHOULD_LINK FALSE PARENT_SCOPE)\n+  endif()\n+\n+  if (\"${PATH}\" STREQUAL \"\")\n+    message(FATAL_ERROR \"Invalid path set for extension '${NAME}' : '${INCLUDE}'\")\n+  endif()\n+  if (\"${INCLUDE_PATH}\" STREQUAL \"\")\n+    message(FATAL_ERROR \"Invalid include path for extension '${NAME}' : '${INCLUDE_PATH}'\")\n+  endif()\n+\n+  set(DUCKDB_EXTENSION_${EXTENSION_NAME_UPPERCASE}_PATH ${PATH} PARENT_SCOPE)\n+  set(DUCKDB_EXTENSION_${EXTENSION_NAME_UPPERCASE}_INCLUDE_PATH ${INCLUDE_PATH} PARENT_SCOPE)\n+endfunction()\n+\n+# Downloads the external extension repo at the specified commit and calls register_extension\n+macro(register_external_extension NAME URL COMMIT DONT_LINK DONT_BUILD PATH INCLUDE_PATH)\n+  include(FetchContent)\n+  FETCHCONTENT_DECLARE(\n+          ${NAME}_extension_fc\n+          GIT_REPOSITORY ${URL}\n+          GIT_TAG ${COMMIT}\n+          GIT_SUBMODULES \"\"\n+  )\n+  message(STATUS \"Building extension '${NAME}' from ${URL} @ ${COMMIT}\")\n+  FETCHCONTENT_POPULATE(${NAME}_EXTENSION_FC)\n+\n+  if (\"${INCLUDE_PATH}\" STREQUAL \"\")\n+    register_extension(${NAME} ${DONT_LINK} ${DONT_BUILD} ${${NAME}_extension_fc_SOURCE_DIR}/${PATH} \"${${NAME}_extension_fc_SOURCE_DIR}/src/include\")\n+  else()\n+    register_extension(${NAME} ${DONT_LINK} ${DONT_BUILD} ${${NAME}_extension_fc_SOURCE_DIR}/${PATH} \"${${NAME}_extension_fc_SOURCE_DIR}/${INCLUDE_PATH}\")\n+  endif()\n+endmacro()\n+\n+function(duckdb_extension_load NAME)\n+  # Parameter parsing\n+  set(options DONT_LINK DONT_BUILD)\n+  set(oneValueArgs SOURCE_DIR INCLUDE_DIR GIT_URL GIT_TAG)\n+  cmake_parse_arguments(duckdb_extension_load \"${options}\" \"${oneValueArgs}\" \"\" ${ARGN})\n+\n+  string(TOLOWER ${NAME} EXTENSION_NAME_LOWERCASE)\n+  string(TOUPPER ${NAME} EXTENSION_NAME_UPPERCASE)\n+\n+  # If extension was set already, we ignore subsequent calls\n+  list (FIND DUCKDB_EXTENSION_NAMES ${EXTENSION_NAME_LOWERCASE} _index)\n+  if (${_index} GREATER -1)\n+    return()\n+  endif()\n+\n+  # Remote Git extension\n+  if (${duckdb_extension_load_DONT_BUILD})\n+    register_extension(${NAME} \"${duckdb_extension_load_DONT_LINK}\" \"${duckdb_extension_load_DONT_BUILD}\" \"\" \"\")\n+  elseif (NOT \"${duckdb_extension_load_GIT_URL}\" STREQUAL \"\")\n+    if (NOT \"${duckdb_extension_load_GIT_COMMIT}\" STREQUAL \"\")\n+      error(\"Git URL specified but no valid git commit was found for ${NAME} extension\")\n+    endif()\n+    register_external_extension(${NAME} \"${duckdb_extension_load_GIT_URL}\" \"${duckdb_extension_load_GIT_TAG}\" \"${duckdb_extension_load_DONT_LINK}\" \"${duckdb_extension_load_DONT_BUILD}\" \"${duckdb_extension_load_SOURCE_DIR}\" \"${duckdb_extension_load_INCLUDE_DIR}\")\n+  elseif (NOT \"${duckdb_extension_load_SOURCE_DIR}\" STREQUAL \"\")\n+    # Local extension, custom path\n+    message(STATUS \"Building extension '${NAME}' from '${duckdb_extension_load_SOURCE_DIR}'\")\n+\n+    # If no include path specified, use default\n+    if (\"${duckdb_extension_load_INCLUDE_DIR}\" STREQUAL \"\")\n+      set(INCLUDE_PATH_DEFAULT \"${duckdb_extension_load_SOURCE_DIR}/src/include\")\n+    else()\n+      set(INCLUDE_PATH_DEFAULT ${duckdb_extension_load_INCLUDE_DIR})\n+    endif()\n+\n+    register_extension(${NAME} \"${duckdb_extension_load_DONT_LINK}\" \"${duckdb_extension_load_DONT_BUILD}\" \"${duckdb_extension_load_SOURCE_DIR}\" \"${INCLUDE_PATH_DEFAULT}\")\n+  elseif(EXISTS ${CMAKE_SOURCE_DIR}/extension_external/${NAME})\n+    # Local extension, default path\n+    message(STATUS \"Building extension '${NAME}' from '${CMAKE_SOURCE_DIR}/extension_external'\")\n+    register_extension(${NAME} ${duckdb_extension_load_DONT_LINK} \"${duckdb_extension_load_DONT_BUILD}\"  \"${CMAKE_SOURCE_DIR}/extension_external/${NAME}\" \"${CMAKE_SOURCE_DIR}/extension_external/${NAME}/src/include\")\n+  else()\n+    # Local extension, default path\n+    message(STATUS \"Building extension '${NAME}' from '${CMAKE_SOURCE_DIR}/extensions'\")\n+    register_extension(${NAME} ${duckdb_extension_load_DONT_LINK} \"${duckdb_extension_load_DONT_BUILD}\"  \"${CMAKE_SOURCE_DIR}/extension/${NAME}\" \"${CMAKE_SOURCE_DIR}/extension/${NAME}/include\")\n+  endif()\n+\n+  # Propagate variables set by register_extension\n+  set(DUCKDB_EXTENSION_NAMES ${DUCKDB_EXTENSION_NAMES} PARENT_SCOPE)\n+  set(DUCKDB_EXTENSION_${EXTENSION_NAME_UPPERCASE}_SHOULD_BUILD ${DUCKDB_EXTENSION_${EXTENSION_NAME_UPPERCASE}_SHOULD_BUILD} PARENT_SCOPE)\n+  set(DUCKDB_EXTENSION_${EXTENSION_NAME_UPPERCASE}_SHOULD_LINK ${DUCKDB_EXTENSION_${EXTENSION_NAME_UPPERCASE}_SHOULD_LINK} PARENT_SCOPE)\n+  set(DUCKDB_EXTENSION_${EXTENSION_NAME_UPPERCASE}_PATH ${DUCKDB_EXTENSION_${EXTENSION_NAME_UPPERCASE}_PATH} PARENT_SCOPE)\n+  set(DUCKDB_EXTENSION_${EXTENSION_NAME_UPPERCASE}_INCLUDE_PATH ${DUCKDB_EXTENSION_${EXTENSION_NAME_UPPERCASE}_INCLUDE_PATH} PARENT_SCOPE)\n+endfunction()\n+\n if(${EXPORT_DLL_SYMBOLS})\n   # For Windows DLL export symbols\n   add_definitions(-DDUCKDB_BUILD_LIBRARY)\n endif()\n \n+# Load extensions passed through cmake config var\n+foreach(EXT IN LISTS SKIP_EXTENSIONS)\n+  if (NOT \"${EXT}\" STREQUAL \"\")\n+    duckdb_extension_load(${EXT} DONT_BUILD)\n+  endif()\n+endforeach()\n+\n+# Load extensions passed through cmake config var\n+foreach(EXT IN LISTS BUILD_EXTENSIONS)\n+  if(NOT \"${EXT}\" STREQUAL \"\")\n+    duckdb_extension_load(${EXT})\n+  endif()\n+endforeach()\n+\n+# Custom extension configs passed in DUCKDB_EXTENSION_CONFIGS parameter\n+foreach(DUCKDB_EXTENSION_CONFIG IN LISTS DUCKDB_EXTENSION_CONFIGS)\n+  if (NOT \"${DUCKDB_EXTENSION_CONFIG}\" STREQUAL \"\")\n+    include(${DUCKDB_EXTENSION_CONFIG})\n+  endif()\n+endforeach()\n+\n+# Local extension config\n+if (EXISTS ${CMAKE_SOURCE_DIR}/extension/extension_config_local.cmake)\n+  include(${CMAKE_SOURCE_DIR}/extension/extension_config_local.cmake)\n+endif()\n+\n+# Load client specific config\n+if(BUILD_PYTHON)\n+  include(${CMAKE_SOURCE_DIR}/tools/pythonpkg/duckdb_extension_config.cmake)\n+endif()\n+if(BUILD_R OR CONFIGURE_R)\n+  include(${CMAKE_SOURCE_DIR}/tools/rpkg/duckdb_extension_config.cmake)\n+endif()\n+if(BUILD_NODE)\n+  include(${CMAKE_SOURCE_DIR}/tools/nodejs/duckdb_extension_config.cmake)\n+endif()\n+if (JDBC_DRIVER)\n+  include(${CMAKE_SOURCE_DIR}/tools/jdbc/duckdb_extension_config.cmake)\n+endif()\n+\n+# Load base extension config\n+include(${CMAKE_SOURCE_DIR}/extension/extension_config.cmake)\n+\n if (BUILD_MAIN_DUCKDB_LIBRARY)\n   add_subdirectory(src)\n   add_subdirectory(tools)\n endif()\n \n-# Add In-tree extensions\n-add_subdirectory(extension)\n+# Add subdirectories for registered extensions\n+foreach(EXT_NAME IN LISTS DUCKDB_EXTENSION_NAMES)\n+  string(TOUPPER ${EXT_NAME} EXT_NAME_UPPERCASE)\n+\n+  # Skip explicitly disabled extensions\n+  if (NOT ${DUCKDB_EXTENSION_${EXT_NAME_UPPERCASE}_SHOULD_BUILD})\n+    continue()\n+  endif()\n+\n+  if (DEFINED DUCKDB_EXTENSION_${EXT_NAME_UPPERCASE}_PATH)\n+    add_subdirectory(${DUCKDB_EXTENSION_${EXT_NAME_UPPERCASE}_PATH} extension/${EXT_NAME})\n+  else()\n+    message(FATAL_ERROR \"No path found for registered extension '${EXT_NAME}'\")\n+  endif()\n+endforeach()\n \n-# Add Out-of-tree extensions\n-foreach(OOTE_NAME IN LISTS DUCKDB_OOT_EXTENSION_NAMES)\n-  string(TOUPPER ${OOTE_NAME} OOTE_NAME_UPPERCASE)\n-  if (DEFINED DUCKDB_OOT_EXTENSION_${OOTE_NAME_UPPERCASE}_PATH)\n-    add_subdirectory(${DUCKDB_OOT_EXTENSION_${OOTE_NAME_UPPERCASE}_PATH} extension/${OOTE_NAME})\n+# Output the extensions that we linked into DuckDB for some nice build logs\n+set(LINKED_EXTENSIONS \"\")\n+set(NONLINKED_EXTENSIONS \"\")\n+set(SKIPPED_EXTENSIONS \"\")\n+foreach(EXT_NAME IN LISTS DUCKDB_EXTENSION_NAMES)\n+  string(TOUPPER ${EXT_NAME} EXT_NAME_UPPERCASE)\n+  if (NOT ${DUCKDB_EXTENSION_${EXT_NAME_UPPERCASE}_SHOULD_BUILD})\n+    list(APPEND SKIPPED_EXTENSIONS ${EXT_NAME})\n+  elseif (${DUCKDB_EXTENSION_${EXT_NAME_UPPERCASE}_SHOULD_LINK})\n+    list(APPEND LINKED_EXTENSIONS ${EXT_NAME})\n   else()\n-    # By default, we assume third-party extensions to by (symlinked) in extensions/ with <name>_clone as path\n-    add_subdirectory(\"extension/${OOTE_NAME}_clone/src\" extension/${OOTE_NAME})\n+    list(APPEND NONLINKED_EXTENSIONS ${EXT_NAME})\n   endif()\n endforeach()\n \n+if(NOT \"${LINKED_EXTENSIONS}\" STREQUAL \"\")\n+  string(REPLACE \";\"  \", \" EXT_LIST_DEBUG_MESSAGE \"${LINKED_EXTENSIONS}\")\n+  message(STATUS \"Extensions linked into DuckDB: ${EXT_LIST_DEBUG_MESSAGE}\")\n+endif()\n+if(NOT \"${NONLINKED_EXTENSIONS}\" STREQUAL \"\")\n+  string(REPLACE \";\"  \", \" EXT_LIST_DEBUG_MESSAGE \"${NONLINKED_EXTENSIONS}\")\n+  message(STATUS \"Extensions built but not linked: ${EXT_LIST_DEBUG_MESSAGE}\")\n+endif()\n+if(NOT \"${SKIPPED_EXTENSIONS}\" STREQUAL \"\")\n+  string(REPLACE \";\"  \", \" EXT_LIST_DEBUG_MESSAGE \"${SKIPPED_EXTENSIONS}\")\n+  message(STATUS \"Extensions explicitly skipped: ${EXT_LIST_DEBUG_MESSAGE}\")\n+endif()\n+\n if(BUILD_PYTHON\n         OR BUILD_R\n         OR BUILD_NODE\n@@ -920,12 +904,12 @@ if(BUILD_PYTHON\n   # This searches all Out-of-tree (OOT) extensions that we have linked into duckdb for their direct dependencies and\n   # adds them to the duckdb_libs to ensure they also get linked. This allows linking OOT extensions with dependencies\n   # for the Python/R/Node builds\n-  foreach(OOTE_NAME IN LISTS DUCKDB_OOT_EXTENSION_NAMES)\n-    string(TOUPPER ${OOTE_NAME} OOTE_NAME_UPPERCASE)\n-    if (${DUCKDB_OOT_EXTENSION_${OOTE_NAME_UPPERCASE}_SHOULD_LINK})\n-      get_target_property(OOTE_LINKED_LIBS ${OOTE_NAME}_extension LINK_LIBRARIES)\n-      if (NOT \"${OOTE_LINKED_LIBS}\" STREQUAL \"OOTE_LINKED_LIBS-NOTFOUND\")\n-        set(duckdb_libs ${OOTE_LINKED_LIBS} ${duckdb_libs})\n+  foreach(EXT_NAME IN LISTS DUCKDB_EXTENSION_NAMES)\n+    string(TOUPPER ${EXT_NAME} EXT_NAME_UPPERCASE)\n+    if (${DUCKDB_EXTENSION_${EXT_NAME_UPPERCASE}_SHOULD_BUILD} AND ${DUCKDB_EXTENSION_${EXT_NAME_UPPERCASE}_SHOULD_LINK})\n+      get_target_property(EXT_LINKED_LIBS ${EXT_NAME}_extension LINK_LIBRARIES)\n+      if (NOT \"${EXT_LINKED_LIBS}\" STREQUAL \"EXT_LINKED_LIBS-NOTFOUND\")\n+        set(duckdb_libs ${EXT_LINKED_LIBS} ${duckdb_libs})\n       endif()\n     endif()\n   endforeach()\n@@ -1042,17 +1026,4 @@ if(EXISTS ${CMAKE_CONFIG_TEMPLATE} AND EXISTS ${CMAKE_CONFIG_VERSION_TEMPLATE})\n     DESTINATION \"${INSTALL_CMAKE_DIR}\")\n endif()\n \n-endif()\n-\n-# TODO: This is the old way of Loading OOTEs can be removed after all OOTES in extensions.csv play ball with the new way\n-# build out-of-tree extensions on demand\n-if(NOT \"${EXTERNAL_EXTENSION_DIRECTORIES}\" STREQUAL \"\")\n-  separate_arguments(EXTERNAL_EXTENSION_DIRECTORIES)\n-\n-  foreach(EXTERNAL_EXTENSION_DIRECTORY IN LISTS EXTERNAL_EXTENSION_DIRECTORIES)\n-\n-    # the build path seems to get ignored on windows in just the right way. no idea why.\n-    get_filename_component(EXTERNAL_EXTENSION_NAME ${EXTERNAL_EXTENSION_DIRECTORY} NAME)\n-    add_subdirectory(${EXTERNAL_EXTENSION_DIRECTORY} \"extension/${EXTERNAL_EXTENSION_NAME}\")\n-  endforeach()\n-endif()\n+endif()\n\\ No newline at end of file\ndiff --git a/Makefile b/Makefile\nindex 06668e23bf04..b0c13b4d93db 100644\n--- a/Makefile\n+++ b/Makefile\n@@ -50,17 +50,22 @@ endif\n ifeq (${STATIC_LIBCPP}, 1)\n \tSTATIC_LIBCPP=-DSTATIC_LIBCPP=TRUE\n endif\n+\n CMAKE_VARS ?=\n-EXTENSIONS ?=\n-EXTENSIONS += -DBUILD_PARQUET_EXTENSION=TRUE\n+SKIP_EXTENSIONS ?=\n+\n+BUILD_EXTENSIONS ?=\n+ifneq (${DUCKDB_EXTENSIONS}, )\n+\tBUILD_EXTENSIONS:=${DUCKDB_EXTENSIONS}\n+endif\n ifeq (${DISABLE_PARQUET}, 1)\n-\tEXTENSIONS:=\n+\tSKIP_EXTENSIONS:=${SKIP_EXTENSIONS};parquet\n endif\n ifeq (${DISABLE_MAIN_DUCKDB_LIBRARY}, 1)\n-\tEXTENSIONS:=${EXTENSIONS} -DBUILD_MAIN_DUCKDB_LIBRARY=0\n+\tCMAKE_VARS:=${CMAKE_VARS} -DBUILD_MAIN_DUCKDB_LIBRARY=0\n endif\n ifeq (${EXTENSION_STATIC_BUILD}, 1)\n-\tEXTENSIONS:=${EXTENSIONS} -DEXTENSION_STATIC_BUILD=1\n+\tCMAKE_VARS:=${CMAKE_VARS} -DEXTENSION_STATIC_BUILD=1\n endif\n ifeq (${DISABLE_BUILTIN_EXTENSIONS}, 1)\n \tCMAKE_VARS:=${CMAKE_VARS} -DDISABLE_BUILTIN_EXTENSIONS=1\n@@ -69,43 +74,43 @@ ifeq (${BUILD_BENCHMARK}, 1)\n \tCMAKE_VARS:=${CMAKE_VARS} -DBUILD_BENCHMARKS=1\n endif\n ifeq (${BUILD_AUTOCOMPLETE}, 1)\n-\tEXTENSIONS:=${EXTENSIONS} -DBUILD_AUTOCOMPLETE_EXTENSION=1\n+\tBUILD_EXTENSIONS:=${BUILD_EXTENSIONS};autocomplete\n endif\n ifeq (${BUILD_ICU}, 1)\n-\tEXTENSIONS:=${EXTENSIONS} -DBUILD_ICU_EXTENSION=1\n+\tBUILD_EXTENSIONS:=${BUILD_EXTENSIONS};icu\n endif\n ifeq (${BUILD_TPCH}, 1)\n-\tEXTENSIONS:=${EXTENSIONS} -DBUILD_TPCH_EXTENSION=1\n+\tBUILD_EXTENSIONS:=${BUILD_EXTENSIONS};tpch\n endif\n ifeq (${BUILD_TPCDS}, 1)\n-\tEXTENSIONS:=${EXTENSIONS} -DBUILD_TPCDS_EXTENSION=1\n+\tBUILD_EXTENSIONS:=${BUILD_EXTENSIONS};tpcds\n endif\n ifeq (${BUILD_FTS}, 1)\n-\tEXTENSIONS:=${EXTENSIONS} -DBUILD_FTS_EXTENSION=1\n+\tBUILD_EXTENSIONS:=${BUILD_EXTENSIONS};fts\n endif\n ifeq (${BUILD_VISUALIZER}, 1)\n-\tEXTENSIONS:=${EXTENSIONS} -DBUILD_VISUALIZER_EXTENSION=1\n+\tBUILD_EXTENSIONS:=${BUILD_EXTENSIONS};visualizer\n endif\n ifeq (${BUILD_HTTPFS}, 1)\n-\tEXTENSIONS:=${EXTENSIONS} -DBUILD_HTTPFS_EXTENSION=1\n+\tBUILD_EXTENSIONS:=${BUILD_EXTENSIONS};httpfs\n endif\n ifeq (${BUILD_JSON}, 1)\n-\tEXTENSIONS:=${EXTENSIONS} -DBUILD_JSON_EXTENSION=1\n+\tBUILD_EXTENSIONS:=${BUILD_EXTENSIONS};json\n endif\n ifeq (${BUILD_JEMALLOC}, 1)\n-\tEXTENSIONS:=${EXTENSIONS} -DBUILD_JEMALLOC_EXTENSION=1\n+\tBUILD_EXTENSIONS:=${BUILD_EXTENSIONS};jemalloc\n endif\n ifeq (${BUILD_EXCEL}, 1)\n-\tEXTENSIONS:=${EXTENSIONS} -DBUILD_EXCEL_EXTENSION=1\n+\tBUILD_EXTENSIONS:=${BUILD_EXTENSIONS};excel\n endif\n ifeq (${BUILD_INET}, 1)\n-\tEXTENSIONS:=${EXTENSIONS} -DBUILD_INET_EXTENSION=1\n+\tBUILD_EXTENSIONS:=${BUILD_EXTENSIONS};inet\n endif\n ifeq (${STATIC_OPENSSL}, 1)\n \tCMAKE_VARS:=${CMAKE_VARS} -DOPENSSL_USE_STATIC_LIBS=1\n endif\n ifeq (${BUILD_SQLSMITH}, 1)\n-\tEXTENSIONS:=${EXTENSIONS} -DBUILD_SQLSMITH_EXTENSION=1\n+\tBUILD_EXTENSIONS:=${BUILD_EXTENSIONS};sqlsmith\n endif\n ifeq (${BUILD_TPCE}, 1)\n \tCMAKE_VARS:=${CMAKE_VARS} -DBUILD_TPCE=1\n@@ -123,16 +128,17 @@ ifneq ($(ODBC_CONFIG),)\n \tCMAKE_VARS:=${CMAKE_VARS} -DODBC_CONFIG=${ODBC_CONFIG}\n endif\n ifeq (${BUILD_PYTHON}, 1)\n-\tCMAKE_VARS:=${CMAKE_VARS} -DBUILD_PYTHON=1 -DBUILD_JSON_EXTENSION=1 -DBUILD_FTS_EXTENSION=1 -DBUILD_TPCH_EXTENSION=1 -DBUILD_VISUALIZER_EXTENSION=1 -DBUILD_TPCDS_EXTENSION=1\n+\t# TODO: load extension config from CMAKE?\n+\tCMAKE_VARS:=${CMAKE_VARS} -DBUILD_PYTHON=1 -DDUCKDB_EXTENSION_CONFIGS=\"tools/pythonpkg/duckdb_extension_config.cmake\"\n endif\n ifeq (${PYTHON_USER_SPACE}, 1)\n \tCMAKE_VARS:=${CMAKE_VARS} -DUSER_SPACE=1\n endif\n ifeq (${BUILD_R}, 1)\n-\tCMAKE_VARS:=${CMAKE_VARS} -DBUILD_R=1\n+\tCMAKE_VARS:=${CMAKE_VARS} -DBUILD_R=1 -DDUCKDB_EXTENSION_CONFIGS=\"tools/rpkg/duckdb_extension_config.cmake\"\n endif\n ifeq (${BUILD_NODE}, 1)\n-\tCMAKE_VARS:=${CMAKE_VARS} -DBUILD_NODE=1 -DBUILD_JSON_EXTENSION=1\n+\tCMAKE_VARS:=${CMAKE_VARS} -DBUILD_NODE=1 -DDUCKDB_EXTENSION_CONFIGS=\"tools/nodejs/duckdb_extension_config.cmake\"\n endif\n ifeq (${CONFIGURE_R}, 1)\n \tCMAKE_VARS:=${CMAKE_VARS} -DCONFIGURE_R=1\n@@ -143,16 +149,17 @@ endif\n ifneq ($(TIDY_BINARY),)\n \tTIDY_BINARY_PARAMETER := -clang-tidy-binary ${TIDY_BINARY}\n endif\n-\n ifneq (\"${FORCE_QUERY_LOG}a\", \"a\")\n \tCMAKE_VARS:=${CMAKE_VARS} -DFORCE_QUERY_LOG=${FORCE_QUERY_LOG}\n endif\n-# TODO: deprecated, can be removed once all OOTEs use BUILD_OUT_OF_TREE_EXTENSIONS\n-ifneq ($(BUILD_OUT_OF_TREE_EXTENSION),)\n-\tCMAKE_VARS:=${CMAKE_VARS} -DEXTERNAL_EXTENSION_DIRECTORIES=\"$(BUILD_OUT_OF_TREE_EXTENSION)\"\n+ifneq ($(BUILD_EXTENSIONS),)\n+\tCMAKE_VARS:=${CMAKE_VARS} -DBUILD_EXTENSIONS=\"$(BUILD_EXTENSIONS)\"\n+endif\n+ifneq ($(SKIP_EXTENSIONS),)\n+\tCMAKE_VARS:=${CMAKE_VARS} -DSKIP_EXTENSIONS=\"$(SKIP_EXTENSIONS)\"\n endif\n-ifneq ($(BUILD_OUT_OF_TREE_EXTENSIONS),)\n-\tCMAKE_VARS:=${CMAKE_VARS} -DDUCKDB_OOT_EXTENSION_NAMES=\"$(BUILD_OUT_OF_TREE_EXTENSIONS)\"\n+ifneq ($(EXTENSION_CONFIGS),)\n+\tCMAKE_VARS:=${CMAKE_VARS} -DDUCKDB_EXTENSION_CONFIGS=\"$(EXTENSION_CONFIGS)\"\n endif\n ifneq ($(EXTRA_CMAKE_VARIABLES),)\n \tCMAKE_VARS:=${CMAKE_VARS} ${EXTRA_CMAKE_VARIABLES}\n@@ -166,6 +173,9 @@ endif\n ifeq (${DISABLE_MEMORY_SAFETY}, 1)\n \tCMAKE_VARS:=${CMAKE_VARS} -DDISABLE_MEMORY_SAFETY=1\n endif\n+ifeq (${DISABLE_ASSERTIONS}, 1)\n+\tCMAKE_VARS:=${CMAKE_VARS} -DDISABLE_ASSERTIONS=1\n+endif\n ifeq (${DESTROY_UNPINNED_BLOCKS}, 1)\n \tCMAKE_VARS:=${CMAKE_VARS} -DDESTROY_UNPINNED_BLOCKS=1\n endif\n@@ -194,26 +204,26 @@ clean-python:\n debug:\n \tmkdir -p ./build/debug && \\\n \tcd build/debug && \\\n-\techo ${DUCKDB_OOT_EXTENSION_SUBSTRAIT_PATH} && \\\n-\tcmake $(GENERATOR) $(FORCE_COLOR) ${WARNINGS_AS_ERRORS} ${FORCE_32_BIT_FLAG} ${DISABLE_UNITY_FLAG} ${DISABLE_SANITIZER_FLAG} ${STATIC_LIBCPP} ${EXTENSIONS} ${CMAKE_VARS} -DDEBUG_MOVE=1 -DCMAKE_BUILD_TYPE=Debug ../.. && \\\n+\techo ${DUCKDB_EXTENSION_SUBSTRAIT_PATH} && \\\n+\tcmake $(GENERATOR) $(FORCE_COLOR) ${WARNINGS_AS_ERRORS} ${FORCE_32_BIT_FLAG} ${DISABLE_UNITY_FLAG} ${DISABLE_SANITIZER_FLAG} ${STATIC_LIBCPP} ${CMAKE_VARS} -DDEBUG_MOVE=1 -DCMAKE_BUILD_TYPE=Debug ../.. && \\\n \tcmake --build . --config Debug\n \n release:\n \tmkdir -p ./build/release && \\\n \tcd build/release && \\\n-\tcmake $(GENERATOR) $(FORCE_COLOR) ${WARNINGS_AS_ERRORS} ${FORCE_WARN_UNUSED_FLAG} ${FORCE_32_BIT_FLAG} ${DISABLE_UNITY_FLAG} ${DISABLE_SANITIZER_FLAG} ${OSX_BUILD_UNIVERSAL_FLAG} ${STATIC_LIBCPP} ${EXTENSIONS} ${CMAKE_VARS} -DCMAKE_BUILD_TYPE=Release ../.. && \\\n+\tcmake $(GENERATOR) $(FORCE_COLOR) ${WARNINGS_AS_ERRORS} ${FORCE_WARN_UNUSED_FLAG} ${FORCE_32_BIT_FLAG} ${DISABLE_UNITY_FLAG} ${DISABLE_SANITIZER_FLAG} ${OSX_BUILD_UNIVERSAL_FLAG} ${STATIC_LIBCPP} ${CMAKE_VARS} -DCMAKE_BUILD_TYPE=Release ../.. && \\\n \tcmake --build . --config Release\n \n cldebug:\n \tmkdir -p ./build/cldebug && \\\n \tcd build/cldebug && \\\n-\tcmake $(GENERATOR) $(FORCE_COLOR) ${WARNINGS_AS_ERRORS} ${FORCE_32_BIT_FLAG} ${DISABLE_UNITY_FLAG} ${EXTENSIONS} ${CMAKE_VARS} -DBUILD_PYTHON=1 -DBUILD_R=1 -DENABLE_SANITIZER=0 -DENABLE_UBSAN=0 -DCMAKE_BUILD_TYPE=Debug ../.. && \\\n+\tcmake $(GENERATOR) $(FORCE_COLOR) ${WARNINGS_AS_ERRORS} ${FORCE_32_BIT_FLAG} ${DISABLE_UNITY_FLAG} ${CMAKE_VARS} -DBUILD_PYTHON=1 -DBUILD_R=1 -DENABLE_SANITIZER=0 -DENABLE_UBSAN=0 -DCMAKE_BUILD_TYPE=Debug ../.. && \\\n \tcmake --build . --config Debug\n \n clreldebug:\n \tmkdir -p ./build/clreldebug && \\\n \tcd build/clreldebug && \\\n-\tcmake $(GENERATOR) $(FORCE_COLOR) ${WARNINGS_AS_ERRORS} ${FORCE_32_BIT_FLAG} ${DISABLE_UNITY_FLAG} ${STATIC_LIBCPP} ${EXTENSIONS} ${CMAKE_VARS} -DBUILD_PYTHON=1 -DBUILD_R=1 -DBUILD_FTS_EXTENSION=1 -DENABLE_SANITIZER=0 -DENABLE_UBSAN=0 -DCMAKE_BUILD_TYPE=RelWithDebInfo ../.. && \\\n+\tcmake $(GENERATOR) $(FORCE_COLOR) ${WARNINGS_AS_ERRORS} ${FORCE_32_BIT_FLAG} ${DISABLE_UNITY_FLAG} ${STATIC_LIBCPP} ${CMAKE_VARS} -DBUILD_PYTHON=1 -DBUILD_R=1 -DBUILD_FTS_EXTENSION=1 -DENABLE_SANITIZER=0 -DENABLE_UBSAN=0 -DCMAKE_BUILD_TYPE=RelWithDebInfo ../.. && \\\n \tcmake --build . --config RelWithDebInfo\n \n unittest: debug\n@@ -241,38 +251,38 @@ doxygen: docs\n reldebug:\n \tmkdir -p ./build/reldebug && \\\n \tcd build/reldebug && \\\n-\tcmake $(GENERATOR) $(FORCE_COLOR) ${WARNINGS_AS_ERRORS} ${FORCE_32_BIT_FLAG} ${DISABLE_UNITY_FLAG} ${DISABLE_SANITIZER_FLAG} ${STATIC_LIBCPP} ${EXTENSIONS} ${CMAKE_VARS} -DCMAKE_BUILD_TYPE=RelWithDebInfo ../.. && \\\n+\tcmake $(GENERATOR) $(FORCE_COLOR) ${WARNINGS_AS_ERRORS} ${FORCE_32_BIT_FLAG} ${DISABLE_UNITY_FLAG} ${DISABLE_SANITIZER_FLAG} ${STATIC_LIBCPP} ${CMAKE_VARS} -DCMAKE_BUILD_TYPE=RelWithDebInfo ../.. && \\\n \tcmake --build . --config RelWithDebInfo\n \n relassert:\n \tmkdir -p ./build/relassert && \\\n \tcd build/relassert && \\\n-\tcmake $(GENERATOR) $(FORCE_COLOR) ${WARNINGS_AS_ERRORS} ${FORCE_32_BIT_FLAG} ${DISABLE_UNITY_FLAG} ${DISABLE_SANITIZER_FLAG} ${STATIC_LIBCPP} ${EXTENSIONS} ${CMAKE_VARS} -DFORCE_ASSERT=1 -DCMAKE_BUILD_TYPE=RelWithDebInfo ../.. && \\\n+\tcmake $(GENERATOR) $(FORCE_COLOR) ${WARNINGS_AS_ERRORS} ${FORCE_32_BIT_FLAG} ${DISABLE_UNITY_FLAG} ${DISABLE_SANITIZER_FLAG} ${STATIC_LIBCPP} ${CMAKE_VARS} -DFORCE_ASSERT=1 -DCMAKE_BUILD_TYPE=RelWithDebInfo ../.. && \\\n \tcmake --build . --config RelWithDebInfo\n \n benchmark:\n \tmkdir -p ./build/release && \\\n \tcd build/release && \\\n-\tcmake $(GENERATOR) $(FORCE_COLOR) ${WARNINGS_AS_ERRORS} ${FORCE_WARN_UNUSED_FLAG} ${FORCE_32_BIT_FLAG} ${DISABLE_UNITY_FLAG} ${DISABLE_SANITIZER_FLAG} ${OSX_BUILD_UNIVERSAL_FLAG} ${STATIC_LIBCPP} ${EXTENSIONS} ${CMAKE_VARS} -DBUILD_BENCHMARKS=1 -DCMAKE_BUILD_TYPE=Release ../.. && \\\n+\tcmake $(GENERATOR) $(FORCE_COLOR) ${WARNINGS_AS_ERRORS} ${FORCE_WARN_UNUSED_FLAG} ${FORCE_32_BIT_FLAG} ${DISABLE_UNITY_FLAG} ${DISABLE_SANITIZER_FLAG} ${OSX_BUILD_UNIVERSAL_FLAG} ${STATIC_LIBCPP} ${CMAKE_VARS} -DBUILD_BENCHMARKS=1 -DCMAKE_BUILD_TYPE=Release ../.. && \\\n \tcmake --build . --config Release\n \n amaldebug:\n \tmkdir -p ./build/amaldebug && \\\n \tpython3 scripts/amalgamation.py && \\\n \tcd build/amaldebug && \\\n-\tcmake $(GENERATOR) $(FORCE_COLOR) ${STATIC_LIBCPP} ${EXTENSIONS} ${CMAKE_VARS} ${FORCE_32_BIT_FLAG} -DAMALGAMATION_BUILD=1 -DCMAKE_BUILD_TYPE=Debug ../.. && \\\n+\tcmake $(GENERATOR) $(FORCE_COLOR) ${STATIC_LIBCPP} ${CMAKE_VARS} ${FORCE_32_BIT_FLAG} -DAMALGAMATION_BUILD=1 -DCMAKE_BUILD_TYPE=Debug ../.. && \\\n \tcmake --build . --config Debug\n \n tidy-check:\n \tmkdir -p ./build/tidy && \\\n \tcd build/tidy && \\\n-\tcmake -DCLANG_TIDY=1 -DDISABLE_UNITY=1 -DBUILD_PARQUET_EXTENSION=TRUE -DBUILD_PYTHON_PKG=TRUE -DBUILD_SHELL=0 ../.. && \\\n+\tcmake -DCLANG_TIDY=1 -DDISABLE_UNITY=1 -DBUILD_EXTENSIONS=parquet -DBUILD_PYTHON_PKG=TRUE -DBUILD_SHELL=0 ../.. && \\\n \tpython3 ../../scripts/run-clang-tidy.py -quiet ${TIDY_THREAD_PARAMETER} ${TIDY_BINARY_PARAMETER}\n \n tidy-fix:\n \tmkdir -p ./build/tidy && \\\n \tcd build/tidy && \\\n-\tcmake -DCLANG_TIDY=1 -DDISABLE_UNITY=1 -DBUILD_PARQUET_EXTENSION=TRUE -DBUILD_SHELL=0 ../.. && \\\n+\tcmake -DCLANG_TIDY=1 -DDISABLE_UNITY=1 -DBUILD_EXTENSIONS=parquet -DBUILD_SHELL=0 ../.. && \\\n \tpython3 ../../scripts/run-clang-tidy.py -fix\n \n test_compile: # test compilation of individual cpp files\n@@ -320,7 +330,7 @@ bloaty: reldebug bloaty/bloaty\n \t# ./bloaty/bloaty  build/reldebug/extension/parquet/parquet.duckdb_extension -d symbols -n 20 # to execute on extension\n \n clangd:\n-\tcmake -DCMAKE_BUILD_TYPE=Debug ${EXTENSIONS} -B build/clangd .\n+\tcmake -DCMAKE_BUILD_TYPE=Debug ${CMAKE_VARS} -B build/clangd .\n \n coverage-check:\n \t./scripts/coverage_check.sh\ndiff --git a/benchmark/CMakeLists.txt b/benchmark/CMakeLists.txt\nindex 8e169d837223..6eda1ef8a567 100644\n--- a/benchmark/CMakeLists.txt\n+++ b/benchmark/CMakeLists.txt\n@@ -5,7 +5,8 @@ include_directories(../test/include)\n include_directories(include)\n \n add_subdirectory(micro)\n-if(${BUILD_TPCH_EXTENSION})\n+list(FIND DUCKDB_EXTENSION_NAMES tpch _index)\n+if(${_index} GREATER -1)\n   add_subdirectory(tpch)\n endif()\n \ndiff --git a/benchmark/micro/cte/cte.benchmark b/benchmark/micro/cte/cte.benchmark\nnew file mode 100644\nindex 000000000000..dbd7c6215341\n--- /dev/null\n+++ b/benchmark/micro/cte/cte.benchmark\n@@ -0,0 +1,17 @@\n+# name: benchmark/micro/cte/cte.benchmark\n+# description: Benchmark of CTEs\n+# group: [cte]\n+\n+name CTE\n+group micro\n+subgroup cte\n+\n+run\n+WITH RECURSIVE t(x) AS (\n+  SELECT 1\n+    UNION ALL\n+  SELECT x+1\n+  FROM   t\n+  WHERE  x < 400000\n+)\n+SELECT count(t1), count(t2) FROM t AS t1, t AS t2 WHERE t1.x=t2.x;\ndiff --git a/benchmark/micro/cte/materialized_cte.benchmark b/benchmark/micro/cte/materialized_cte.benchmark\nnew file mode 100644\nindex 000000000000..12c1710127b8\n--- /dev/null\n+++ b/benchmark/micro/cte/materialized_cte.benchmark\n@@ -0,0 +1,17 @@\n+# name: benchmark/micro/cte/materialized_cte.benchmark\n+# description: Benchmark of materialized CTEs\n+# group: [cte]\n+\n+name Materialized CTE\n+group micro\n+subgroup cte\n+\n+run\n+WITH RECURSIVE t(x) AS MATERIALIZED (\n+  SELECT 1\n+    UNION ALL\n+  SELECT x+1\n+  FROM   t\n+  WHERE  x < 400000\n+)\n+SELECT count(t1), count(t2) FROM t AS t1, t AS t2 WHERE t1.x=t2.x;\ndiff --git a/benchmark/micro/index/constraints/lookup_art_constraint.benchmark b/benchmark/micro/index/constraints/lookup_art_constraint.benchmark\nnew file mode 100644\nindex 000000000000..ec07a4518856\n--- /dev/null\n+++ b/benchmark/micro/index/constraints/lookup_art_constraint.benchmark\n@@ -0,0 +1,13 @@\n+# name: benchmark/micro/index/constraints/lookup_art_constraint.benchmark\n+# description: Attempt to insert 10M integers into a PK column and fail on the last entry, benchmarks lookup performance\n+# group: [constraints]\n+\n+name Lookup ART Constraint\n+group index\n+\n+load\n+CREATE TABLE temp AS (SELECT range AS id, (random() * 1000000)::INT AS rank FROM range(9999999) ORDER BY rank);\n+CREATE TABLE art (id INTEGER PRIMARY KEY);\n+\n+run\n+INSERT INTO art (SELECT id FROM temp UNION ALL SELECT 9999998);\ndiff --git a/benchmark/micro/index/create/create_art.benchmark b/benchmark/micro/index/create/create_art.benchmark\nnew file mode 100644\nindex 000000000000..53eadd3d26a4\n--- /dev/null\n+++ b/benchmark/micro/index/create/create_art.benchmark\n@@ -0,0 +1,15 @@\n+# name: benchmark/micro/index/create/create_art.benchmark\n+# description: Create ART on 10M integers, 2.5M distinct values\n+# group: [create]\n+\n+name Create ART\n+group art\n+\n+load\n+CREATE TABLE art AS SELECT (range * 9876983769044::INT128 % 10000000)::INT64 AS id FROM range(10000000);\n+\n+run\n+CREATE INDEX idx ON art USING ART(id);\n+\n+cleanup\n+DROP INDEX idx;\ndiff --git a/benchmark/micro/index/create/create_art_duplicates.benchmark b/benchmark/micro/index/create/create_art_duplicates.benchmark\nnew file mode 100644\nindex 000000000000..477121e727d5\n--- /dev/null\n+++ b/benchmark/micro/index/create/create_art_duplicates.benchmark\n@@ -0,0 +1,15 @@\n+# name: benchmark/micro/index/create/create_art_duplicates.benchmark\n+# description: Create ART on 10M integers, approx. 100 distinct values\n+# group: [create]\n+\n+name Create ART Duplicates\n+group art\n+\n+load\n+CREATE TABLE art AS SELECT (random() * 100)::INT AS id FROM range(10000000);\n+\n+run\n+CREATE INDEX idx ON art USING ART(id);\n+\n+cleanup\n+DROP INDEX idx;\ndiff --git a/benchmark/micro/index/create/create_art_random.benchmark b/benchmark/micro/index/create/create_art_random.benchmark\nnew file mode 100644\nindex 000000000000..a20a95475405\n--- /dev/null\n+++ b/benchmark/micro/index/create/create_art_random.benchmark\n@@ -0,0 +1,15 @@\n+# name: benchmark/micro/index/create/create_art_random.benchmark\n+# description: Create ART on 10M integers, approx. 1M distinct values\n+# group: [create]\n+\n+name Create ART Random\n+group art\n+\n+load\n+CREATE TABLE art AS SELECT (random() * 1000000)::INT AS id FROM range(10000000);\n+\n+run\n+CREATE INDEX idx ON art USING ART(id);\n+\n+cleanup\n+DROP INDEX idx;\ndiff --git a/benchmark/micro/index/create/create_art_sorted.benchmark b/benchmark/micro/index/create/create_art_sorted.benchmark\nnew file mode 100644\nindex 000000000000..6fef22579057\n--- /dev/null\n+++ b/benchmark/micro/index/create/create_art_sorted.benchmark\n@@ -0,0 +1,15 @@\n+# name: benchmark/micro/index/create/create_art_sorted.benchmark\n+# description: Create ART on 1M sorted integers\n+# group: [create]\n+\n+name Create ART Sorted\n+group art\n+\n+load\n+CREATE TABLE art AS SELECT range::INT id FROM range(1000000);\n+\n+run\n+CREATE INDEX idx ON art USING ART(id);\n+\n+cleanup\n+DROP INDEX idx;\ndiff --git a/benchmark/micro/index/create/create_art_varchar_long.benchmark b/benchmark/micro/index/create/create_art_varchar_long.benchmark\nnew file mode 100644\nindex 000000000000..9c4693adf30b\n--- /dev/null\n+++ b/benchmark/micro/index/create/create_art_varchar_long.benchmark\n@@ -0,0 +1,20 @@\n+# name: benchmark/micro/index/create/create_art_varchar_long.benchmark\n+# description: Create ART on 10M random long VARCHARs\n+# group: [create]\n+\n+name Create ART Varchar Long\n+group art\n+\n+load\n+CREATE TEMPORARY TABLE strings_temp AS\n+    SELECT ((i * 95823983533) % 100000)::VARCHAR AS s1,\n+           ((i * 547892347987) % 1000)::VARCHAR AS s2,\n+            ((i * 847892347987) % 100)::VARCHAR AS s3,\n+        FROM range(1000000) tbl(i);\n+CREATE TABLE art AS SELECT s3 || 'a' || s2 || 'b' || s3 || 'c' || repeat(s2, s3::INT) || s1 || 'a' || s3 || 'c' AS id FROM strings_temp;\n+\n+run\n+CREATE INDEX idx ON art USING ART(id);\n+\n+cleanup\n+DROP INDEX idx;\ndiff --git a/benchmark/micro/index/create/create_art_varchar_short.benchmark b/benchmark/micro/index/create/create_art_varchar_short.benchmark\nnew file mode 100644\nindex 000000000000..a2274bce625e\n--- /dev/null\n+++ b/benchmark/micro/index/create/create_art_varchar_short.benchmark\n@@ -0,0 +1,20 @@\n+# name: benchmark/micro/index/create/create_art_varchar_short.benchmark\n+# description: Create ART on 10M random short VARCHARs\n+# group: [create]\n+\n+name Create ART Varchar Short\n+group art\n+\n+load\n+CREATE TEMPORARY TABLE strings_temp AS\n+    SELECT ((i * 95823983533) % 100000)::VARCHAR AS s1,\n+           ((i * 547892347987) % 1000)::VARCHAR AS s2,\n+            ((i * 847892347987) % 100)::VARCHAR AS s3,\n+        FROM range(1000000) tbl(i);\n+CREATE TABLE art AS SELECT s1 || 'a' || s2 || 'b' || s3 || 'c' AS id FROM strings_temp;\n+\n+run\n+CREATE INDEX idx ON art USING ART(id);\n+\n+cleanup\n+DROP INDEX idx;\n\\ No newline at end of file\ndiff --git a/benchmark/micro/index/create/create_index.benchmark b/benchmark/micro/index/create/create_index.benchmark\ndeleted file mode 100644\nindex f56d2132e737..000000000000\n--- a/benchmark/micro/index/create/create_index.benchmark\n+++ /dev/null\n@@ -1,15 +0,0 @@\n-# name: benchmark/micro/index/create/create_index.benchmark\n-# description: Create index on 10000000 integer tuples\n-# group: [create]\n-\n-name Create Index\n-group index\n-\n-load\n-CREATE TABLE integers AS SELECT (i * 9876983769044::INT128 % 10000000)::INT64 AS i FROM range(0, 10000000) t(i);\n-\n-run\n-CREATE INDEX i_index ON integers using art(i);\n-\n-cleanup\n-DROP INDEX i_index;\ndiff --git a/benchmark/micro/index/create/create_index_duplicates.benchmark b/benchmark/micro/index/create/create_index_duplicates.benchmark\ndeleted file mode 100644\nindex 71b1dee7890f..000000000000\n--- a/benchmark/micro/index/create/create_index_duplicates.benchmark\n+++ /dev/null\n@@ -1,15 +0,0 @@\n-# name: benchmark/micro/index/create/create_index_duplicates.benchmark\n-# description: Create index on 100000000 random integers with many duplicates\n-# group: [create]\n-\n-name Create Index Duplicates\n-group index\n-\n-load\n-CREATE TABLE art AS SELECT (random() * 100)::INT AS id FROM range(10000000);\n-\n-run\n-CREATE INDEX idx ON art(id);\n-\n-cleanup\n-DROP INDEX idx;\ndiff --git a/benchmark/micro/index/create/create_index_random.benchmark b/benchmark/micro/index/create/create_index_random.benchmark\ndeleted file mode 100644\nindex 992039587a2c..000000000000\n--- a/benchmark/micro/index/create/create_index_random.benchmark\n+++ /dev/null\n@@ -1,15 +0,0 @@\n-# name: benchmark/micro/index/create/create_index_random.benchmark\n-# description: Create index on 100000000 random integers\n-# group: [create]\n-\n-name Create Index Random\n-group index\n-\n-load\n-CREATE TABLE art AS SELECT (random() * 1000000)::INT AS id FROM range(10000000);\n-\n-run\n-CREATE INDEX idx ON art(id);\n-\n-cleanup\n-DROP INDEX idx;\ndiff --git a/benchmark/micro/index/create/create_index_sorted.benchmark b/benchmark/micro/index/create/create_index_sorted.benchmark\ndeleted file mode 100644\nindex 8cb5350430a6..000000000000\n--- a/benchmark/micro/index/create/create_index_sorted.benchmark\n+++ /dev/null\n@@ -1,15 +0,0 @@\n-# name: benchmark/micro/index/create/create_index_sorted.benchmark\n-# description: Create index on 1000000 sorted integers\n-# group: [create]\n-\n-name Create Index Sorted\n-group index\n-\n-load\n-CREATE TABLE art AS SELECT range id FROM range(1000000);\n-\n-run\n-CREATE INDEX idx ON art(id);\n-\n-cleanup\n-DROP INDEX idx;\ndiff --git a/benchmark/micro/index/create/create_index_varchar.benchmark b/benchmark/micro/index/create/create_index_varchar.benchmark\ndeleted file mode 100644\nindex 1687cbfddf8d..000000000000\n--- a/benchmark/micro/index/create/create_index_varchar.benchmark\n+++ /dev/null\n@@ -1,15 +0,0 @@\n-# name: benchmark/micro/index/create/create_index_varchar.benchmark\n-# description: Create index on 10000000 random varchars\n-# group: [create]\n-\n-name Create Index Varchar\n-group index\n-\n-load\n-CREATE TABLE art AS SELECT range || '-not-inlined-' id FROM range(10000000);\n-\n-run\n-CREATE INDEX idx ON art(id);\n-\n-cleanup\n-DROP INDEX idx;\ndiff --git a/benchmark/micro/index/delete/delete.benchmark b/benchmark/micro/index/delete/delete.benchmark\ndeleted file mode 100644\nindex 6745e0e899be..000000000000\n--- a/benchmark/micro/index/delete/delete.benchmark\n+++ /dev/null\n@@ -1,17 +0,0 @@\n-# name: benchmark/micro/index/delete/delete.benchmark\n-# description: Delete 10000000 integers from index\n-# group: [delete]\n-\n-name Delete Index\n-group index\n-\n-load\n-CREATE TABLE art (id INTEGER);\n-CREATE INDEX idx ON art(id);\n-INSERT INTO art (SELECT range id FROM range(10000000));\n-\n-run\n-DELETE FROM art;\n-\n-cleanup\n-INSERT INTO art (SELECT range id FROM range(10000000));\ndiff --git a/benchmark/micro/index/delete/delete_art.benchmark b/benchmark/micro/index/delete/delete_art.benchmark\nnew file mode 100644\nindex 000000000000..6d7706474142\n--- /dev/null\n+++ b/benchmark/micro/index/delete/delete_art.benchmark\n@@ -0,0 +1,13 @@\n+# name: benchmark/micro/index/delete/delete_art.benchmark\n+# description: Delete approx. 5M integers from an ART with 10M integers\n+# group: [delete]\n+\n+name Delete ART\n+group art\n+\n+load\n+CREATE TABLE art AS SELECT (random() * 1000000)::INT AS id FROM range(10000000);\n+CREATE INDEX idx ON art USING ART(id);\n+\n+run\n+DELETE FROM art WHERE id < 500000;\ndiff --git a/benchmark/micro/index/delete/delete_unique.benchmark b/benchmark/micro/index/delete/delete_unique.benchmark\ndeleted file mode 100644\nindex 34ed44c9b474..000000000000\n--- a/benchmark/micro/index/delete/delete_unique.benchmark\n+++ /dev/null\n@@ -1,17 +0,0 @@\n-# name: benchmark/micro/index/delete/delete_unique.benchmark\n-# description: Delete 10000000 integers from unique index\n-# group: [delete]\n-\n-name Delete Index Unique\n-group index\n-\n-load\n-CREATE TABLE art (id INTEGER);\n-CREATE UNIQUE INDEX idx ON art(id);\n-INSERT INTO art (SELECT range id FROM range(10000000));\n-\n-run\n-DELETE FROM art;\n-\n-cleanup\n-INSERT INTO art (SELECT range id FROM range(10000000));\ndiff --git a/benchmark/micro/index/insert/insert.benchmark b/benchmark/micro/index/insert/insert.benchmark\ndeleted file mode 100644\nindex a469f397f6ef..000000000000\n--- a/benchmark/micro/index/insert/insert.benchmark\n+++ /dev/null\n@@ -1,16 +0,0 @@\n-# name: benchmark/micro/index/insert/insert.benchmark\n-# description: Insert 10000000 integers into index\n-# group: [insert]\n-\n-name Insert Index\n-group index\n-\n-load\n-CREATE TABLE art (id INTEGER);\n-CREATE INDEX idx ON art(id);\n-\n-run\n-INSERT INTO art (SELECT range id FROM range(10000000));\n-\n-cleanup\n-DELETE FROM art;\ndiff --git a/benchmark/micro/index/insert/insert_art.benchmark b/benchmark/micro/index/insert/insert_art.benchmark\nnew file mode 100644\nindex 000000000000..d80ebf61234a\n--- /dev/null\n+++ b/benchmark/micro/index/insert/insert_art.benchmark\n@@ -0,0 +1,14 @@\n+# name: benchmark/micro/index/insert/insert_art.benchmark\n+# description: Insert 10M integers into an ART\n+# group: [insert]\n+\n+name Insert ART\n+group art\n+\n+load\n+CREATE TABLE temp AS SELECT (random() * 1000000)::INT AS id FROM range(10000000);\n+CREATE TABLE art (id INTEGER);\n+CREATE INDEX idx ON art USING ART(id);\n+\n+run\n+INSERT INTO art (SELECT id + ((random() * 1000000)::INT) FROM temp);\ndiff --git a/benchmark/micro/index/insert/insert_unique.benchmark b/benchmark/micro/index/insert/insert_unique.benchmark\ndeleted file mode 100644\nindex 09d639e550c1..000000000000\n--- a/benchmark/micro/index/insert/insert_unique.benchmark\n+++ /dev/null\n@@ -1,16 +0,0 @@\n-# name: benchmark/micro/index/insert/insert_unique.benchmark\n-# description: Insert 10000000 integers into unique index\n-# group: [insert]\n-\n-name Insert Index Unique\n-group index\n-\n-load\n-CREATE TABLE art (id INTEGER);\n-CREATE UNIQUE INDEX idx ON art(id);\n-\n-run\n-INSERT INTO art (SELECT range id FROM range(10000000));\n-\n-cleanup\n-DELETE FROM art;\ndiff --git a/benchmark/micro/index/join/index_join.benchmark b/benchmark/micro/index/join/index_join.benchmark\ndeleted file mode 100644\nindex 5b09863f5cb7..000000000000\n--- a/benchmark/micro/index/join/index_join.benchmark\n+++ /dev/null\n@@ -1,17 +0,0 @@\n-# name: benchmark/micro/index/join/index_join.benchmark\n-# description: Perform an index nested loop join between two tables\n-# group: [join]\n-\n-name Index Join\n-group index\n-\n-load\n-PRAGMA force_index_join;\n-CREATE TABLE Person (id bigint PRIMARY KEY);\n-CREATE TABLE Person_knows_Person (Person1id bigint, Person2id bigint);\n-INSERT INTO Person SELECT range id FROM range(100000);\n-INSERT INTO Person_knows_Person SELECT range AS Person1id, range + 1 AS Person2id FROM range(99999);\n-INSERT INTO Person_knows_Person SELECT range AS Person1id, range + 5 AS Person2id FROM range(99995);\n-\n-run\n-SELECT p1.id FROM Person_knows_Person pkp JOIN Person p1 ON p1.id = pkp.Person1id;\n\\ No newline at end of file\ndiff --git a/benchmark/micro/index/join/index_join_art.benchmark b/benchmark/micro/index/join/index_join_art.benchmark\nnew file mode 100644\nindex 000000000000..b674f38788ee\n--- /dev/null\n+++ b/benchmark/micro/index/join/index_join_art.benchmark\n@@ -0,0 +1,17 @@\n+# name: benchmark/micro/index/join/index_join_art.benchmark\n+# description: Perform an index nested loop join between two tables using an ART\n+# group: [join]\n+\n+name Index Join ART\n+group art\n+\n+load\n+PRAGMA force_index_join;\n+CREATE TABLE person (id BIGINT PRIMARY KEY);\n+CREATE TABLE person_knows_person (p1id BIGINT, p2id BIGINT);\n+INSERT INTO person SELECT range AS id FROM range(100000);\n+INSERT INTO person_knows_person SELECT range AS p1id, range + 1 AS p2id FROM range(99999);\n+INSERT INTO person_knows_person SELECT range AS p1id, range + 5 AS p2id FROM range(99995);\n+\n+run\n+SELECT p1.id FROM person_knows_person pkp JOIN person p1 ON p1.id = pkp.p1id;\n\\ No newline at end of file\ndiff --git a/benchmark/micro/index/point/point_query_with_art.benchmark b/benchmark/micro/index/point/point_query_with_art.benchmark\nnew file mode 100644\nindex 000000000000..e28e028a9eb6\n--- /dev/null\n+++ b/benchmark/micro/index/point/point_query_with_art.benchmark\n@@ -0,0 +1,16 @@\n+# name: benchmark/micro/index/point/point_query_with_art.benchmark\n+# description: Point query with an ART on randomly ordered data\n+# group: [point]\n+\n+name Point Query (ART)\n+group art\n+\n+load\n+CREATE TABLE integers AS SELECT (i * 9876983769044::INT128 % 100000000)::INT64 AS i, i + 2 AS j FROM range(0, 100000000) t(i);\n+CREATE INDEX i_index ON integers USING ART(i);\n+\n+run\n+SELECT i FROM integers WHERE i=50000 LIMIT 1\n+\n+result I\n+50000\ndiff --git a/benchmark/micro/index/point/point_query_with_index.benchmark b/benchmark/micro/index/point/point_query_with_index.benchmark\ndeleted file mode 100644\nindex 9bcd4da0fef8..000000000000\n--- a/benchmark/micro/index/point/point_query_with_index.benchmark\n+++ /dev/null\n@@ -1,16 +0,0 @@\n-# name: benchmark/micro/index/point/point_query_with_index.benchmark\n-# description: Point query with an index on randomly ordered data\n-# group: [point]\n-\n-name Point Query (Index)\n-group index\n-\n-load\n-CREATE TABLE integers AS SELECT (i * 9876983769044::INT128 % 100000000)::INT64 AS i, i + 2 AS j FROM range(0, 100000000) t(i);\n-CREATE INDEX i_index ON integers using art(i);\n-\n-run\n-SELECT i FROM integers WHERE i=50000 LIMIT 1\n-\n-result I\n-50000\ndiff --git a/benchmark/micro/index/range/range_query_with_art.benchmark b/benchmark/micro/index/range/range_query_with_art.benchmark\nnew file mode 100644\nindex 000000000000..d9e09ccc4077\n--- /dev/null\n+++ b/benchmark/micro/index/range/range_query_with_art.benchmark\n@@ -0,0 +1,16 @@\n+# name: benchmark/micro/index/range/range_query_with_art.benchmark\n+# description: Range query with ART\n+# group: [range]\n+\n+name Range Query (ART)\n+group art\n+\n+load\n+CREATE TABLE integers AS SELECT i, i + 2 AS j FROM range(0, 100000000) t(i);\n+CREATE INDEX i_index ON integers USING ART(i);\n+\n+run\n+SELECT COUNT(j) FROM integers WHERE i >= 15000100 AND i < 15000200;\n+\n+result I\n+100\ndiff --git a/benchmark/micro/index/range/range_query_with_index.benchmark b/benchmark/micro/index/range/range_query_with_index.benchmark\ndeleted file mode 100644\nindex 20fd1c9c0690..000000000000\n--- a/benchmark/micro/index/range/range_query_with_index.benchmark\n+++ /dev/null\n@@ -1,16 +0,0 @@\n-# name: benchmark/micro/index/range/range_query_with_index.benchmark\n-# description: Range query with index\n-# group: [range]\n-\n-name Range Query (Index)\n-group index\n-\n-load\n-CREATE TABLE integers AS SELECT i, i + 2 AS j FROM range(0, 100000000) t(i);\n-CREATE INDEX i_index ON integers using art(i);\n-\n-run\n-SELECT COUNT(j) FROM integers WHERE i >= 15000100 AND i < 15000200;\n-\n-result I\n-100\ndiff --git a/benchmark/micro/index/range/wide_range_query_with_art.benchmark b/benchmark/micro/index/range/wide_range_query_with_art.benchmark\nnew file mode 100644\nindex 000000000000..f5a2da3eff59\n--- /dev/null\n+++ b/benchmark/micro/index/range/wide_range_query_with_art.benchmark\n@@ -0,0 +1,16 @@\n+# name: benchmark/micro/index/range/wide_range_query_with_art.benchmark\n+# description: Wide (non-selective) range query with ART\n+# group: [range]\n+\n+name Big Range Query (ART)\n+group art\n+\n+load\n+CREATE TABLE integers AS SELECT i, i + 2 AS j FROM range(0, 100000000) t(i);\n+CREATE INDEX i_index ON integers USING ART(i);\n+\n+run\n+SELECT COUNT(j) FROM integers WHERE i >= 0 AND i < 15000200;\n+\n+result I\n+15000200\ndiff --git a/benchmark/micro/index/range/wide_range_query_with_index.benchmark b/benchmark/micro/index/range/wide_range_query_with_index.benchmark\ndeleted file mode 100644\nindex 3062b4b02398..000000000000\n--- a/benchmark/micro/index/range/wide_range_query_with_index.benchmark\n+++ /dev/null\n@@ -1,16 +0,0 @@\n-# name: benchmark/micro/index/range/wide_range_query_with_index.benchmark\n-# description: Wide (non-selective) range query with index\n-# group: [range]\n-\n-name Big Range Query (Index)\n-group index\n-\n-load\n-CREATE TABLE integers AS SELECT i, i + 2 AS j FROM range(0, 100000000) t(i);\n-CREATE INDEX i_index ON integers using art(i);\n-\n-run\n-SELECT COUNT(j) FROM integers WHERE i >= 0 AND i < 15000200;\n-\n-result I\n-15000200\ndiff --git a/benchmark/micro/join/asof_join_small_probe.benchmark b/benchmark/micro/join/asof_join_small_probe.benchmark\nnew file mode 100644\nindex 000000000000..8f9b0066adf8\n--- /dev/null\n+++ b/benchmark/micro/join/asof_join_small_probe.benchmark\n@@ -0,0 +1,30 @@\n+# name: benchmark/micro/join/asof_join_small_probe.benchmark\n+# description: AsOf Join with probe smaller than build\n+# group: [join]\n+\n+name ASOf Join with |probe| << |build|\n+group join\n+\n+load\n+SELECT SETSEED(0.8675309);\n+PRAGMA debug_asof_iejoin=False;\n+CREATE TABLE probe AS\n+\tSELECT r AS id, \n+\t\t'2021-01-01T00:00:00'::TIMESTAMP + INTERVAL (random() * 60 * 60 * 24 * 365) SECOND AS probe_ts_1_0,\n+\tFROM range(0, 100000) tbl(r);\n+CREATE TABLE build AS\n+\tSELECT r % 100000 AS id, \n+\t\t'2021-01-01T00:00:00'::TIMESTAMP + INTERVAL (random() * 60 * 60 * 24 * 365) SECOND AS build_ts_1_0,\n+\t\t(random() * 100000)::INTEGER AS build_int_1_0\n+\tFROM range(0, 1000000) tbl(r);\n+\n+run\n+SELECT SUM(build_int_1_0)\n+FROM \"probe\"\n+ASOF JOIN \"build\"\n+       ON  \"probe\".\"id\" = \"build\".\"id\"\n+      AND \"probe\".\"probe_ts_1_0\" >= \"build\".\"build_ts_1_0\"\n+;\n+\n+result I\n+4556519823\ndiff --git a/benchmark/micro/join/range_join_big_result.benchmark b/benchmark/micro/join/range_join_big_result.benchmark\nnew file mode 100644\nindex 000000000000..29bad331ddcc\n--- /dev/null\n+++ b/benchmark/micro/join/range_join_big_result.benchmark\n@@ -0,0 +1,15 @@\n+# name: benchmark/micro/join/range_join_big_result.benchmark\n+# description: Range join between integers that has many result\n+# group: [join]\n+\n+name Range Join with big result\n+group join\n+\n+load\n+CREATE TABLE integers AS SELECT ((i * 9582398353) % 1000)::INTEGER AS i, ((i * 847892347987) % 100)::INTEGER AS j FROM range(0, 50000) tbl(i);\n+\n+run\n+SELECT COUNT(*) FROM integers a, integers b WHERE (a.i // 1000) < b.j ORDER BY 1;\n+\n+result I\n+2475000000\ndiff --git a/benchmark/tpch/pivot/lineitem_pivot_many_groups_few_pivots.benchmark b/benchmark/tpch/pivot/lineitem_pivot_many_groups_few_pivots.benchmark\nnew file mode 100644\nindex 000000000000..065014d5d3a7\n--- /dev/null\n+++ b/benchmark/tpch/pivot/lineitem_pivot_many_groups_few_pivots.benchmark\n@@ -0,0 +1,29 @@\n+# name: benchmark/tpch/pivot/lineitem_pivot_many_groups_few_pivots.benchmark\n+# description: lineitem pivot over l_returnflag grouped by l_orderkey\n+# group: [pivot]\n+\n+name Lineitem Pivot (l_returnflag group by l_orderkey)\n+group pivot\n+subgroup tpch\n+\n+require tpch\n+\n+cache tpch_sf1.duckdb\n+\n+load\n+CALL dbgen(sf=1);\n+\n+run\n+FROM (PIVOT lineitem ON l_returnflag USING SUM(l_extendedprice) GROUP BY l_orderkey) ORDER BY l_orderkey LIMIT 10\n+\n+result IIII\n+1\tNULL\t181861.27\tNULL\n+2\tNULL\t44694.46\tNULL\n+3\t71243.28\tNULL\t133841.04\n+4\tNULL\t30690.90\tNULL\n+5\t73426.50\tNULL\t74402.47\n+6\t61998.31\tNULL\tNULL\n+7\tNULL\t262131.32\tNULL\n+32\tNULL\t208845.62\tNULL\n+33\t95093.85\tNULL\t75928.31\n+34\tNULL\t58110.94\tNULL\ndiff --git a/benchmark/tpch/pivot/lineitem_pivot_many_groups_medium_pivots.benchmark b/benchmark/tpch/pivot/lineitem_pivot_many_groups_medium_pivots.benchmark\nnew file mode 100644\nindex 000000000000..112126725610\n--- /dev/null\n+++ b/benchmark/tpch/pivot/lineitem_pivot_many_groups_medium_pivots.benchmark\n@@ -0,0 +1,29 @@\n+# name: benchmark/tpch/pivot/lineitem_pivot_many_groups_medium_pivots.benchmark\n+# description: lineitem pivot over l_quantity grouped by l_orderkey\n+# group: [pivot]\n+\n+name Lineitem Pivot (l_quantity group by l_orderkey)\n+group pivot\n+subgroup tpch\n+\n+require tpch\n+\n+cache tpch_sf1.duckdb\n+\n+load\n+CALL dbgen(sf=1);\n+\n+run\n+FROM (PIVOT lineitem ON l_quantity USING SUM(l_extendedprice) GROUP BY l_orderkey) ORDER BY l_orderkey LIMIT 10\n+\n+result IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\n+1\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\t21168.23\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\t22824.48\tNULL\tNULL\tNULL\t28955.64\tNULL\tNULL\tNULL\tNULL\t49620.16\tNULL\tNULL\tNULL\t45983.16\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\t13309.60\tNULL\n+2\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\t44694.46\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\n+3\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\t2618.76\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\t28733.64\t39890.88\t32986.52\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\t54058.05\tNULL\tNULL\tNULL\t46796.47\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\n+4\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\t30690.90\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\n+5\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\t23678.55\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\t50723.92\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\t73426.50\tNULL\tNULL\tNULL\tNULL\n+6\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\t61998.31\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\n+7\tNULL\tNULL\tNULL\t13608.60\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\t31809.96\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\t43058.75\tNULL\tNULL\t73943.82\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\t81639.88\tNULL\tNULL\tNULL\t6476.15\tNULL\tNULL\tNULL\tNULL\t11594.16\n+32\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\t2210.32\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\t47227.60\tNULL\tNULL\tNULL\tNULL\t64605.44\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\t6582.96\tNULL\tNULL\tNULL\tNULL\t79059.64\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\t9159.66\tNULL\tNULL\tNULL\n+33\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\t40217.23\t47344.32\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\t75928.31\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\t7532.30\tNULL\tNULL\tNULL\tNULL\tNULL\n+34\tNULL\tNULL\tNULL\tNULL\t17554.68\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\t30875.02\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\t9681.24\tNULL\tNULL\tNULL\ndiff --git a/benchmark/tpch/sf1-parquet/q01.benchmark b/benchmark/tpch/sf1-parquet/q01.benchmark\nnew file mode 100644\nindex 000000000000..d289c3fc2edd\n--- /dev/null\n+++ b/benchmark/tpch/sf1-parquet/q01.benchmark\n@@ -0,0 +1,7 @@\n+# name: benchmark/tpch/sf1-parquet/q01.benchmark\n+# description: Run query 01 from the TPC-H benchmark (single-threaded)\n+# group: [sf1-parquet]\n+\n+template benchmark/tpch/sf1-parquet/tpch_sf1_parquet.benchmark.in\n+QUERY_NUMBER=1\n+QUERY_NUMBER_PADDED=01\ndiff --git a/benchmark/tpch/sf1-parquet/q02.benchmark b/benchmark/tpch/sf1-parquet/q02.benchmark\nnew file mode 100644\nindex 000000000000..4d2615364257\n--- /dev/null\n+++ b/benchmark/tpch/sf1-parquet/q02.benchmark\n@@ -0,0 +1,7 @@\n+# name: benchmark/tpch/sf1-parquet/q02.benchmark\n+# description: Run query 02 from the TPC-H benchmark (single-threaded)\n+# group: [sf1-parquet]\n+\n+template benchmark/tpch/sf1-parquet/tpch_sf1_parquet.benchmark.in\n+QUERY_NUMBER=2\n+QUERY_NUMBER_PADDED=02\ndiff --git a/benchmark/tpch/sf1-parquet/q03.benchmark b/benchmark/tpch/sf1-parquet/q03.benchmark\nnew file mode 100644\nindex 000000000000..32219aee187d\n--- /dev/null\n+++ b/benchmark/tpch/sf1-parquet/q03.benchmark\n@@ -0,0 +1,7 @@\n+# name: benchmark/tpch/sf1-parquet/q03.benchmark\n+# description: Run query 03 from the TPC-H benchmark (single-threaded)\n+# group: [sf1-parquet]\n+\n+template benchmark/tpch/sf1-parquet/tpch_sf1_parquet.benchmark.in\n+QUERY_NUMBER=3\n+QUERY_NUMBER_PADDED=03\ndiff --git a/benchmark/tpch/sf1-parquet/q04.benchmark b/benchmark/tpch/sf1-parquet/q04.benchmark\nnew file mode 100644\nindex 000000000000..fd4df354c79f\n--- /dev/null\n+++ b/benchmark/tpch/sf1-parquet/q04.benchmark\n@@ -0,0 +1,7 @@\n+# name: benchmark/tpch/sf1-parquet/q04.benchmark\n+# description: Run query 04 from the TPC-H benchmark (single-threaded)\n+# group: [sf1-parquet]\n+\n+template benchmark/tpch/sf1-parquet/tpch_sf1_parquet.benchmark.in\n+QUERY_NUMBER=4\n+QUERY_NUMBER_PADDED=04\ndiff --git a/benchmark/tpch/sf1-parquet/q05.benchmark b/benchmark/tpch/sf1-parquet/q05.benchmark\nnew file mode 100644\nindex 000000000000..3e8000c93c3f\n--- /dev/null\n+++ b/benchmark/tpch/sf1-parquet/q05.benchmark\n@@ -0,0 +1,7 @@\n+# name: benchmark/tpch/sf1-parquet/q05.benchmark\n+# description: Run query 05 from the TPC-H benchmark (single-threaded)\n+# group: [sf1-parquet]\n+\n+template benchmark/tpch/sf1-parquet/tpch_sf1_parquet.benchmark.in\n+QUERY_NUMBER=5\n+QUERY_NUMBER_PADDED=05\ndiff --git a/benchmark/tpch/sf1-parquet/q06.benchmark b/benchmark/tpch/sf1-parquet/q06.benchmark\nnew file mode 100644\nindex 000000000000..e2c4a2c28957\n--- /dev/null\n+++ b/benchmark/tpch/sf1-parquet/q06.benchmark\n@@ -0,0 +1,7 @@\n+# name: benchmark/tpch/sf1-parquet/q06.benchmark\n+# description: Run query 06 from the TPC-H benchmark (single-threaded)\n+# group: [sf1-parquet]\n+\n+template benchmark/tpch/sf1-parquet/tpch_sf1_parquet.benchmark.in\n+QUERY_NUMBER=6\n+QUERY_NUMBER_PADDED=06\ndiff --git a/benchmark/tpch/sf1-parquet/q07.benchmark b/benchmark/tpch/sf1-parquet/q07.benchmark\nnew file mode 100644\nindex 000000000000..ca7bf0c6df2a\n--- /dev/null\n+++ b/benchmark/tpch/sf1-parquet/q07.benchmark\n@@ -0,0 +1,7 @@\n+# name: benchmark/tpch/sf1-parquet/q07.benchmark\n+# description: Run query 07 from the TPC-H benchmark (single-threaded)\n+# group: [sf1-parquet]\n+\n+template benchmark/tpch/sf1-parquet/tpch_sf1_parquet.benchmark.in\n+QUERY_NUMBER=7\n+QUERY_NUMBER_PADDED=07\ndiff --git a/benchmark/tpch/sf1-parquet/q08.benchmark b/benchmark/tpch/sf1-parquet/q08.benchmark\nnew file mode 100644\nindex 000000000000..589c4616e097\n--- /dev/null\n+++ b/benchmark/tpch/sf1-parquet/q08.benchmark\n@@ -0,0 +1,7 @@\n+# name: benchmark/tpch/sf1-parquet/q08.benchmark\n+# description: Run query 08 from the TPC-H benchmark (single-threaded)\n+# group: [sf1-parquet]\n+\n+template benchmark/tpch/sf1-parquet/tpch_sf1_parquet.benchmark.in\n+QUERY_NUMBER=8\n+QUERY_NUMBER_PADDED=08\ndiff --git a/benchmark/tpch/sf1-parquet/q09.benchmark b/benchmark/tpch/sf1-parquet/q09.benchmark\nnew file mode 100644\nindex 000000000000..138d8596a5e3\n--- /dev/null\n+++ b/benchmark/tpch/sf1-parquet/q09.benchmark\n@@ -0,0 +1,7 @@\n+# name: benchmark/tpch/sf1-parquet/q09.benchmark\n+# description: Run query 09 from the TPC-H benchmark (single-threaded)\n+# group: [sf1-parquet]\n+\n+template benchmark/tpch/sf1-parquet/tpch_sf1_parquet.benchmark.in\n+QUERY_NUMBER=9\n+QUERY_NUMBER_PADDED=09\ndiff --git a/benchmark/tpch/sf1-parquet/q10.benchmark b/benchmark/tpch/sf1-parquet/q10.benchmark\nnew file mode 100644\nindex 000000000000..26ea2da899b0\n--- /dev/null\n+++ b/benchmark/tpch/sf1-parquet/q10.benchmark\n@@ -0,0 +1,7 @@\n+# name: benchmark/tpch/sf1-parquet/q10.benchmark\n+# description: Run query 10 from the TPC-H benchmark (single-threaded)\n+# group: [sf1-parquet]\n+\n+template benchmark/tpch/sf1-parquet/tpch_sf1_parquet.benchmark.in\n+QUERY_NUMBER=10\n+QUERY_NUMBER_PADDED=10\ndiff --git a/benchmark/tpch/sf1-parquet/q11.benchmark b/benchmark/tpch/sf1-parquet/q11.benchmark\nnew file mode 100644\nindex 000000000000..5a7159d1c2fc\n--- /dev/null\n+++ b/benchmark/tpch/sf1-parquet/q11.benchmark\n@@ -0,0 +1,7 @@\n+# name: benchmark/tpch/sf1-parquet/q11.benchmark\n+# description: Run query 11 from the TPC-H benchmark (single-threaded)\n+# group: [sf1-parquet]\n+\n+template benchmark/tpch/sf1-parquet/tpch_sf1_parquet.benchmark.in\n+QUERY_NUMBER=11\n+QUERY_NUMBER_PADDED=11\ndiff --git a/benchmark/tpch/sf1-parquet/q12.benchmark b/benchmark/tpch/sf1-parquet/q12.benchmark\nnew file mode 100644\nindex 000000000000..d3802c2ec511\n--- /dev/null\n+++ b/benchmark/tpch/sf1-parquet/q12.benchmark\n@@ -0,0 +1,7 @@\n+# name: benchmark/tpch/sf1-parquet/q12.benchmark\n+# description: Run query 12 from the TPC-H benchmark (single-threaded)\n+# group: [sf1-parquet]\n+\n+template benchmark/tpch/sf1-parquet/tpch_sf1_parquet.benchmark.in\n+QUERY_NUMBER=12\n+QUERY_NUMBER_PADDED=12\ndiff --git a/benchmark/tpch/sf1-parquet/q13.benchmark b/benchmark/tpch/sf1-parquet/q13.benchmark\nnew file mode 100644\nindex 000000000000..2bce0c89a645\n--- /dev/null\n+++ b/benchmark/tpch/sf1-parquet/q13.benchmark\n@@ -0,0 +1,7 @@\n+# name: benchmark/tpch/sf1-parquet/q13.benchmark\n+# description: Run query 13 from the TPC-H benchmark (single-threaded)\n+# group: [sf1-parquet]\n+\n+template benchmark/tpch/sf1-parquet/tpch_sf1_parquet.benchmark.in\n+QUERY_NUMBER=13\n+QUERY_NUMBER_PADDED=13\ndiff --git a/benchmark/tpch/sf1-parquet/q14.benchmark b/benchmark/tpch/sf1-parquet/q14.benchmark\nnew file mode 100644\nindex 000000000000..9f5ddfded5cb\n--- /dev/null\n+++ b/benchmark/tpch/sf1-parquet/q14.benchmark\n@@ -0,0 +1,7 @@\n+# name: benchmark/tpch/sf1-parquet/q14.benchmark\n+# description: Run query 14 from the TPC-H benchmark (single-threaded)\n+# group: [sf1-parquet]\n+\n+template benchmark/tpch/sf1-parquet/tpch_sf1_parquet.benchmark.in\n+QUERY_NUMBER=14\n+QUERY_NUMBER_PADDED=14\ndiff --git a/benchmark/tpch/sf1-parquet/q15.benchmark b/benchmark/tpch/sf1-parquet/q15.benchmark\nnew file mode 100644\nindex 000000000000..a7c085dd497d\n--- /dev/null\n+++ b/benchmark/tpch/sf1-parquet/q15.benchmark\n@@ -0,0 +1,7 @@\n+# name: benchmark/tpch/sf1-parquet/q15.benchmark\n+# description: Run query 15 from the TPC-H benchmark (single-threaded)\n+# group: [sf1-parquet]\n+\n+template benchmark/tpch/sf1-parquet/tpch_sf1_parquet.benchmark.in\n+QUERY_NUMBER=15\n+QUERY_NUMBER_PADDED=15\ndiff --git a/benchmark/tpch/sf1-parquet/q16.benchmark b/benchmark/tpch/sf1-parquet/q16.benchmark\nnew file mode 100644\nindex 000000000000..ae4cc4e3e43e\n--- /dev/null\n+++ b/benchmark/tpch/sf1-parquet/q16.benchmark\n@@ -0,0 +1,7 @@\n+# name: benchmark/tpch/sf1-parquet/q16.benchmark\n+# description: Run query 16 from the TPC-H benchmark (single-threaded)\n+# group: [sf1-parquet]\n+\n+template benchmark/tpch/sf1-parquet/tpch_sf1_parquet.benchmark.in\n+QUERY_NUMBER=16\n+QUERY_NUMBER_PADDED=16\ndiff --git a/benchmark/tpch/sf1-parquet/q17.benchmark b/benchmark/tpch/sf1-parquet/q17.benchmark\nnew file mode 100644\nindex 000000000000..26d1661371ae\n--- /dev/null\n+++ b/benchmark/tpch/sf1-parquet/q17.benchmark\n@@ -0,0 +1,7 @@\n+# name: benchmark/tpch/sf1-parquet/q17.benchmark\n+# description: Run query 17 from the TPC-H benchmark (single-threaded)\n+# group: [sf1-parquet]\n+\n+template benchmark/tpch/sf1-parquet/tpch_sf1_parquet.benchmark.in\n+QUERY_NUMBER=17\n+QUERY_NUMBER_PADDED=17\ndiff --git a/benchmark/tpch/sf1-parquet/q18.benchmark b/benchmark/tpch/sf1-parquet/q18.benchmark\nnew file mode 100644\nindex 000000000000..dc7cdf67eef7\n--- /dev/null\n+++ b/benchmark/tpch/sf1-parquet/q18.benchmark\n@@ -0,0 +1,7 @@\n+# name: benchmark/tpch/sf1-parquet/q18.benchmark\n+# description: Run query 18 from the TPC-H benchmark (single-threaded)\n+# group: [sf1-parquet]\n+\n+template benchmark/tpch/sf1-parquet/tpch_sf1_parquet.benchmark.in\n+QUERY_NUMBER=18\n+QUERY_NUMBER_PADDED=18\ndiff --git a/benchmark/tpch/sf1-parquet/q19.benchmark b/benchmark/tpch/sf1-parquet/q19.benchmark\nnew file mode 100644\nindex 000000000000..be6213dc3472\n--- /dev/null\n+++ b/benchmark/tpch/sf1-parquet/q19.benchmark\n@@ -0,0 +1,7 @@\n+# name: benchmark/tpch/sf1-parquet/q19.benchmark\n+# description: Run query 19 from the TPC-H benchmark (single-threaded)\n+# group: [sf1-parquet]\n+\n+template benchmark/tpch/sf1-parquet/tpch_sf1_parquet.benchmark.in\n+QUERY_NUMBER=19\n+QUERY_NUMBER_PADDED=19\ndiff --git a/benchmark/tpch/sf1-parquet/q20.benchmark b/benchmark/tpch/sf1-parquet/q20.benchmark\nnew file mode 100644\nindex 000000000000..9462dfc35316\n--- /dev/null\n+++ b/benchmark/tpch/sf1-parquet/q20.benchmark\n@@ -0,0 +1,7 @@\n+# name: benchmark/tpch/sf1-parquet/q20.benchmark\n+# description: Run query 20 from the TPC-H benchmark (single-threaded)\n+# group: [sf1-parquet]\n+\n+template benchmark/tpch/sf1-parquet/tpch_sf1_parquet.benchmark.in\n+QUERY_NUMBER=20\n+QUERY_NUMBER_PADDED=20\ndiff --git a/benchmark/tpch/sf1-parquet/q21.benchmark b/benchmark/tpch/sf1-parquet/q21.benchmark\nnew file mode 100644\nindex 000000000000..a84458303c4b\n--- /dev/null\n+++ b/benchmark/tpch/sf1-parquet/q21.benchmark\n@@ -0,0 +1,7 @@\n+# name: benchmark/tpch/sf1-parquet/q21.benchmark\n+# description: Run query 21 from the TPC-H benchmark (single-threaded)\n+# group: [sf1-parquet]\n+\n+template benchmark/tpch/sf1-parquet/tpch_sf1_parquet.benchmark.in\n+QUERY_NUMBER=21\n+QUERY_NUMBER_PADDED=21\ndiff --git a/benchmark/tpch/sf1-parquet/q22.benchmark b/benchmark/tpch/sf1-parquet/q22.benchmark\nnew file mode 100644\nindex 000000000000..f5cc48d5992e\n--- /dev/null\n+++ b/benchmark/tpch/sf1-parquet/q22.benchmark\n@@ -0,0 +1,7 @@\n+# name: benchmark/tpch/sf1-parquet/q22.benchmark\n+# description: Run query 22 from the TPC-H benchmark (single-threaded)\n+# group: [sf1-parquet]\n+\n+template benchmark/tpch/sf1-parquet/tpch_sf1_parquet.benchmark.in\n+QUERY_NUMBER=22\n+QUERY_NUMBER_PADDED=22\ndiff --git a/benchmark/tpch/sf1-parquet/tpch_sf1_parquet.benchmark.in b/benchmark/tpch/sf1-parquet/tpch_sf1_parquet.benchmark.in\nnew file mode 100644\nindex 000000000000..02b4e78a8b4a\n--- /dev/null\n+++ b/benchmark/tpch/sf1-parquet/tpch_sf1_parquet.benchmark.in\n@@ -0,0 +1,37 @@\n+# name: ${FILE_PATH}\n+# description: ${DESCRIPTION}\n+# group: [sf1]\n+\n+name Q${QUERY_NUMBER_PADDED}\n+group tpch\n+subgroup sf1\n+\n+require tpch\n+\n+require parquet\n+\n+cache tpch_sf1_parquet.duckdb\n+\n+load\n+call dbgen(sf=1);\n+EXPORT DATABASE '${BENCHMARK_DIR}/tpch_sf1_parquet/' (FORMAT PARQUET);\n+drop table lineitem;\n+drop table customer;\n+drop table nation;\n+drop table orders;\n+drop table part;\n+drop table partsupp;\n+drop table region;\n+drop table supplier;\n+create view lineitem as select * from '${BENCHMARK_DIR}/tpch_sf1_parquet/lineitem.parquet';\n+create view customer as select * from '${BENCHMARK_DIR}/tpch_sf1_parquet/customer.parquet';\n+create view nation as select * from '${BENCHMARK_DIR}/tpch_sf1_parquet/nation.parquet';\n+create view orders as select * from '${BENCHMARK_DIR}/tpch_sf1_parquet/orders.parquet';\n+create view part as select * from '${BENCHMARK_DIR}/tpch_sf1_parquet/part.parquet';\n+create view partsupp as select * from '${BENCHMARK_DIR}/tpch_sf1_parquet/partsupp.parquet';\n+create view region as select * from '${BENCHMARK_DIR}/tpch_sf1_parquet/region.parquet';\n+create view supplier as select * from '${BENCHMARK_DIR}/tpch_sf1_parquet/supplier.parquet';\n+\n+run extension/tpch/dbgen/queries/q${QUERY_NUMBER_PADDED}.sql\n+\n+result extension/tpch/dbgen/answers/sf1/q${QUERY_NUMBER_PADDED}.csv\n\\ No newline at end of file\ndiff --git a/benchmark/micro/index/indexjoin.csv.gz b/data/csv/index_join.csv.gz\nsimilarity index 100%\nrename from benchmark/micro/index/indexjoin.csv.gz\nrename to data/csv/index_join.csv.gz\ndiff --git a/extension/CMakeLists.txt b/extension/CMakeLists.txt\ndeleted file mode 100644\nindex f5c0e5d8fd87..000000000000\n--- a/extension/CMakeLists.txt\n+++ /dev/null\n@@ -1,66 +0,0 @@\n-if(${WASM_LOADABLE_EXTENSIONS})\n-  file(\n-    GLOB sources_list\n-    LIST_DIRECTORIES true\n-    \"*\")\n-  foreach(dir ${sources_list})\n-    if(IS_DIRECTORY ${dir})\n-      add_subdirectory(${dir})\n-    else()\n-      continue()\n-    endif()\n-  endforeach()\n-  return()\n-endif()\n-\n-if(${BUILD_ICU_EXTENSION})\n-  add_subdirectory(icu)\n-endif()\n-\n-if(${BUILD_PARQUET_EXTENSION})\n-  add_subdirectory(parquet)\n-endif()\n-\n-if(${BUILD_TPCH_EXTENSION})\n-  add_subdirectory(tpch)\n-endif()\n-\n-if(${BUILD_TPCDS_EXTENSION})\n-  add_subdirectory(tpcds)\n-endif()\n-\n-if(${BUILD_FTS_EXTENSION})\n-  add_subdirectory(fts)\n-endif()\n-\n-if(${BUILD_HTTPFS_EXTENSION})\n-  add_subdirectory(httpfs)\n-endif()\n-\n-if(${BUILD_VISUALIZER_EXTENSION})\n-  add_subdirectory(visualizer)\n-endif()\n-\n-if(${BUILD_JSON_EXTENSION})\n-  add_subdirectory(json)\n-endif()\n-\n-if(${BUILD_JEMALLOC_EXTENSION})\n-  add_subdirectory(jemalloc)\n-endif()\n-\n-if(${BUILD_EXCEL_EXTENSION})\n-  add_subdirectory(excel)\n-endif()\n-\n-if(${BUILD_SQLSMITH_EXTENSION})\n-  add_subdirectory(sqlsmith)\n-endif()\n-\n-if(${BUILD_INET_EXTENSION})\n-  add_subdirectory(inet)\n-endif()\n-\n-if(${BUILD_AUTOCOMPLETE_EXTENSION})\n-  add_subdirectory(autocomplete)\n-endif()\ndiff --git a/extension/README.md b/extension/README.md\nnew file mode 100644\nindex 000000000000..c7c1d5d711c1\n--- /dev/null\n+++ b/extension/README.md\n@@ -0,0 +1,149 @@\n+This readme explains what types of extensions there are in DuckDB and how to build them.\n+\n+# What are DuckDB extensions?\n+DuckDB extensions are libraries containing additional DuckDB functionality separate from the main codebase. These\n+extensions can provide added functionality to DuckDB that can/should not live in DuckDB main code for various reasons.\n+DuckDB extensions can be built in two ways. Firstly, they can be statically linked into DuckDBs executables (duckdb cli,\n+unittest binary, benchmark runner binary, etc). Doing so will automatically make them available when using these binaries.\n+Secondly, DuckDB has an extension loading mechanism to dynamically load extension binaries. \n+\n+# Extension Types\n+DuckDB Extensions can de divided into different types: In-tree extensions and out-of-tree extensions. These types refer \n+to where the extensions live and who maintains them.\n+\n+### In-tree extensions\n+In-tree extensions are extensions that live in the main DuckDB repository. These extensions are considered fundamental \n+to DuckDB and/or tie into to DuckDB so deeply that changes to DuckDB are expected to regularly break them.  We aim to \n+keep the amount of in-tree extensions to a minimum and strive to move extensions out-of-tree where possible.\n+### Out-of-tree Extensions (OOTEs)\n+Out-of-tree extensions live in separate repositories outside the main DuckDB repository. The reasons for moving extensions\n+out-of-tree can vary. Firstly, moving extensions out of the main DuckDB code-base keeps the core DuckDB code smaller\n+and less complex. Secondly, keeping extensions out-of-tree can be useful for licensing reasons.\n+\n+There are two main types of OOTEs. Firstly, there are the **DuckDB Managed OOTEs**. These are distributed through the main\n+DuckDB CI. These extensions are signed using DuckDBs signing key and are maintained by the DuckDB team. Some examples are \n+the `sqlite_scanner` and `postgres_scanner` extensions. The DuckDB Managed OOTEs are distributed automatically with every\n+release of DuckDB. For the current list of extensions in this category check out `.github/config/out_of_tree_extensions.cmake`\n+\n+Secondly, there are **External OOTEs**. Extensions in this category are not tied to the DuckDB CI, but instead their CI/CD\n+runs in their own repository. The maintainer of the external OOTE repo is responsible for testing, distribution and making\n+sure that an up-to-date version of the extension is available. Depending on who maintains the extension, these extensions\n+may or may not be signed.\n+\n+# Building extensions\n+Under the hood, all types of extensions are built the same way, which is using the DuckDB's root `CMakeLists.txt` file as root CMake file\n+and passing the extensions that should be build to it. DuckDB has various methods to configure which extensions to build. \n+Additionally, we can configure for each extension how we want to build it: for example, whether to only\n+build the loadable extension, or also link the extension in the DuckDB binaries. There's different ways to load extensions\n+in DuckDB with various\n+\n+## Makefile/Cmake variables\n+The simplest way to specify which extensions to load is using the `DUCKDB_EXTENSIONS` variable. To specify which extensions\n+to build when making duckdb set the extensions variable to a `;` separated list of extensions names. For example:\n+```bash\n+DUCKDB_EXTENSIONS='json;icu' make\n+```\n+The `DUCKDB_EXTENSIONS` variable is simply passed to a CMake variable `BUILD_EXTENSIONS` which can also be invoked directly:\n+```bash\n+cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_EXTENSIONS='parquet;icu;tpch;tpcds;fts;json'\n+```\n+\n+## Makefile environment variables\n+Another way to specify building an extension is with the `BUILD_<extension name>` variables defined in the root\n+`Makefile` in this repository. For example, to build the JSON extension, simply run `BUILD_JSON=1 make`. These Makevars\n+should be added manually for each extension and are simply syntactic sugar around the DUCKDB_EXTENSIONS variable.\n+\n+## Config files\n+To have more control over how in-tree extensions are built, extension config files should be used. These config files \n+are simply CMake files that are included by DuckDB's CMake build. There are 4 different places that will be searched \n+for config files:\n+\n+1) The base configuration `extension/extension_config.cmake`. The extensions specified here will be built every time DuckDB\n+is built. This configuration is always loaded.\n+2) (Optional) The client specific extensions specification in `tools/*/duckdb_extension_config.cmake`. These config specify\n+which extensions are built and linked into each client.\n+3) (Optional) The local configuration file `extension/extension_config_local.cmake` This is where you would specify extensions you need \n+included in your local/custom/dev build of DuckDB. This file is gitignored and to be created by the developer.\n+4) (Optional) Additional configuration files passed to the `DUCKDB_EXTENSION_CONFIGS` parameter. This can be used to point DuckDB\n+to config files stored anywhere on the machine.\n+\n+DuckDB will load these config files in reverse order and ignore subsequent calls to load an extension with the \n+same name. This allows overriding the base configuration of an extension by providing a different configuration\n+in the local config. For example, currently the parquet extension is always statically linked into DuckDB, because of this \n+line in `extension/extension_config.cmake`:\n+```cmake\n+duckdb_extension_load(parquet)\n+```\n+Now say we want to build DuckDB with our custom parquet extension, and we also don't want to link this statically in DuckDB, \n+but only produce the loadable binary. We can achieve this creating the `extension/extension_config_local.cmake` file and adding:\n+```cmake\n+duckdb_extension_load(parquet\n+    DONT_LINK\n+    SOURCE_DIR /path/to/my/custom/parquet\n+)\n+```\n+Now when we run `make` cmake will output:\n+```shell\n+-- Building extension 'parquet' from 'path/to/my/custom/parquet'\n+-- Extensions built but not linked: parquet\n+```\n+\n+# Using extension config files\n+The `duckdb_extension_load` function is used in the configuration files to specify how an extension should\n+be loaded. There are 3 different ways this can be done. For some examples, check out `.github/config/*.cmake`. These are\n+the configurations used in DuckDBs CI to select which extensions are built.\n+\n+## Automatic loading\n+The simplest way to load an extension is just passing the extension name. This will automatically try to load the extension.\n+Optionally, the DONT_LINK parameter can be passed to disable linking the extension into DuckDB.\n+```cmake\n+duckdb_extension_load(<extension_name> (DONT_LINK))\n+```\n+This configuration of `duckdb_extension_load` will search the `./extension` and `./extension_external` directories for\n+extensions and attempt to load them if possible. Note that the `extension_external` directory does not exist but should\n+be created and populated with the out-of-tree extensions that should be built. Extensions based on the\n+[extension-template](https://github.com/duckdb/extension-template) should work out of the box using this automatic\n+loading when placed in the `extension_external` directory.\n+\n+## Custom path\n+When extensions are located in a  path or their project structure is different from that the\n+[extension-template](https://github.customcom/duckdb/extension-template), the `SOURCE_DIR` and `INCLUDE_DIR` variables can\n+be used to tell DuckDB how to load the extension:\n+```cmake\n+duckdb_extension_load(<extension_name>\n+    (DONT_LINK)\n+    SOURCE_DIR <absolute_path_to_extension_root>\n+    (INCLUDE_DIR <absolute_path_to_extension_header>)\n+)\n+```\n+\n+## Remote GitHub repo\n+Directly installing extensions from GitHub repositories is also supported. This will download the extension to the current\n+cmake build directory and build it from there: \n+```cmake\n+duckdb_extension_load(postgres_scanner\n+    (DONT_LINK)\n+    GIT_URL https://github.com/duckdblabs/postgres_scanner\n+    GIT_TAG cd043b49cdc9e0d3752535b8333c9433e1007a48\n+)\n+```\n+\n+# Explicitly disabling extensions\n+Because the sometimes you may want to override extensions set by other configurations, explicitly disabling extensions is \n+also possible using the `DONT_BUILD flag`. This will disable the extension from being built all together. For example, to build DuckDB without the parquet extension which is enabled by default, in `extension/extension_config_local.cmake` specify:\n+```cmake\n+duckdb_extension_load(parquet DONT_BUILD)\n+```\n+Note that this can also be done from the Makefile:\n+```bash\n+DUCKDB_EXTENSIONS='tpch;json' SKIP_EXTENSIONS=parquet make\n+```\n+results in:\n+```bash\n+...\n+-- Building extension 'tpch' from '/Users/sam/Development/duckdb/extensions'\n+-- Building extension 'json' from '/Users/sam/Development/duckdb/extensions'\n+-- Extensions linked into DuckDB: tpch, json\n+-- Extensions explicitly skipped: parquet\n+...\n+```\n\\ No newline at end of file\ndiff --git a/extension/extension_config.cmake b/extension/extension_config.cmake\nnew file mode 100644\nindex 000000000000..6229d906f03e\n--- /dev/null\n+++ b/extension/extension_config.cmake\n@@ -0,0 +1,16 @@\n+################################################################################\n+# DuckDB extension base config\n+################################################################################\n+#\n+# This is the base DuckDB extension configuration file. The extensions loaded here are included in every DuckDB build.\n+# Note that this file is checked into version control; if you want to specify which extensions to load for local\n+# development, create `extension/extension_config_local.cmake` and specify extensions there.\n+# The local file is also loaded by the DuckDB CMake build but ignored by version control.\n+\n+# Parquet is loaded by default on every build as its a essential part of DuckDB\n+duckdb_extension_load(parquet)\n+\n+# Jemalloc is enabled by default for linux. MacOS malloc is already good enough and Jemalloc on windows has issues.\n+if(NOT WASM_LOADABLE_EXTENSIONS AND NOT CLANG_TIDY AND OS_NAME STREQUAL \"linux\")\n+    duckdb_extension_load(jemalloc)\n+endif()\n\\ No newline at end of file\ndiff --git a/extension/httpfs/CMakeLists.txt b/extension/httpfs/CMakeLists.txt\nindex 3d8a72eab4d4..59c3f44ab59e 100644\n--- a/extension/httpfs/CMakeLists.txt\n+++ b/extension/httpfs/CMakeLists.txt\n@@ -1,7 +1,3 @@\n-if(${WASM_LOADABLE_EXTENSIONS})\n-  return()\n-endif()\n-\n cmake_minimum_required(VERSION 2.8.12)\n \n project(HTTPFsExtension)\n@@ -21,12 +17,15 @@ if(MINGW)\n endif()\n \n find_package(OpenSSL REQUIRED)\n+include_directories(${OPENSSL_INCLUDE_DIR})\n target_link_libraries(httpfs_loadable_extension duckdb_mbedtls\n                       ${OPENSSL_LIBRARIES})\n+target_link_libraries(httpfs_extension duckdb_mbedtls ${OPENSSL_LIBRARIES})\n \n if(MINGW)\n   find_package(ZLIB)\n   target_link_libraries(httpfs_loadable_extension ZLIB::ZLIB -lcrypt32)\n+  target_link_libraries(httpfs_extension ZLIB::ZLIB -lcrypt32)\n endif()\n \n install(\ndiff --git a/extension/icu/icu-dateadd.cpp b/extension/icu/icu-dateadd.cpp\nindex d1942f452619..5a10b21038ed 100644\n--- a/extension/icu/icu-dateadd.cpp\n+++ b/extension/icu/icu-dateadd.cpp\n@@ -198,7 +198,7 @@ struct ICUDateAdd : public ICUDateFunc {\n \t\tD_ASSERT(args.ColumnCount() == 1);\n \n \t\tauto &func_expr = state.expr.Cast<BoundFunctionExpression>();\n-\t\tauto &info = (BindData &)*func_expr.bind_info;\n+\t\tauto &info = func_expr.bind_info->Cast<BindData>();\n \t\tCalendarPtr calendar(info.calendar->clone());\n \n \t\tauto end_date = Timestamp::GetCurrentTimestamp();\n@@ -218,7 +218,7 @@ struct ICUDateAdd : public ICUDateFunc {\n \t\tD_ASSERT(args.ColumnCount() == 2);\n \n \t\tauto &func_expr = state.expr.Cast<BoundFunctionExpression>();\n-\t\tauto &info = (BindData &)*func_expr.bind_info;\n+\t\tauto &info = func_expr.bind_info->Cast<BindData>();\n \t\tCalendarPtr calendar(info.calendar->clone());\n \n \t\tBinaryExecutor::Execute<TA, TB, TR>(args.data[0], args.data[1], result, args.size(), [&](TA left, TB right) {\ndiff --git a/extension/icu/icu-datefunc.cpp b/extension/icu/icu-datefunc.cpp\nindex 16e7ec015bb9..1db058429c2f 100644\n--- a/extension/icu/icu-datefunc.cpp\n+++ b/extension/icu/icu-datefunc.cpp\n@@ -37,7 +37,7 @@ ICUDateFunc::BindData::BindData(ClientContext &context) {\n }\n \n bool ICUDateFunc::BindData::Equals(const FunctionData &other_p) const {\n-\tauto &other = (const ICUDateFunc::BindData &)other_p;\n+\tauto &other = other_p.Cast<const BindData>();\n \treturn *calendar == *other.calendar;\n }\n \ndiff --git a/extension/icu/icu-datepart.cpp b/extension/icu/icu-datepart.cpp\nindex c5e82409ada7..74af65fe9477 100644\n--- a/extension/icu/icu-datepart.cpp\n+++ b/extension/icu/icu-datepart.cpp\n@@ -271,7 +271,7 @@ struct ICUDatePart : public ICUDateFunc {\n \t\tauto &date_arg = args.data[1];\n \n \t\tauto &func_expr = state.expr.Cast<BoundFunctionExpression>();\n-\t\tauto &info = (BIND_TYPE &)*func_expr.bind_info;\n+\t\tauto &info = func_expr.bind_info->Cast<BIND_TYPE>();\n \t\tCalendarPtr calendar_ptr(info.calendar->clone());\n \t\tauto calendar = calendar_ptr.get();\n \n@@ -293,7 +293,7 @@ struct ICUDatePart : public ICUDateFunc {\n \tstatic void StructFunction(DataChunk &args, ExpressionState &state, Vector &result) {\n \t\tusing BIND_TYPE = BindAdapterData<int64_t>;\n \t\tauto &func_expr = state.expr.Cast<BoundFunctionExpression>();\n-\t\tauto &info = (BIND_TYPE &)*func_expr.bind_info;\n+\t\tauto &info = func_expr.bind_info->Cast<BIND_TYPE>();\n \t\tCalendarPtr calendar_ptr(info.calendar->clone());\n \t\tauto calendar = calendar_ptr.get();\n \ndiff --git a/extension/icu/icu-datesub.cpp b/extension/icu/icu-datesub.cpp\nindex 170e76fd1a36..16587a2b4c14 100644\n--- a/extension/icu/icu-datesub.cpp\n+++ b/extension/icu/icu-datesub.cpp\n@@ -96,7 +96,7 @@ struct ICUCalendarSub : public ICUDateFunc {\n \t\tauto &enddate_arg = args.data[2];\n \n \t\tauto &func_expr = state.expr.Cast<BoundFunctionExpression>();\n-\t\tauto &info = (BindData &)*func_expr.bind_info;\n+\t\tauto &info = func_expr.bind_info->Cast<BindData>();\n \t\tCalendarPtr calendar(info.calendar->clone());\n \n \t\tif (part_arg.GetVectorType() == VectorType::CONSTANT_VECTOR) {\n@@ -218,7 +218,7 @@ struct ICUCalendarDiff : public ICUDateFunc {\n \t\tauto &enddate_arg = args.data[2];\n \n \t\tauto &func_expr = state.expr.Cast<BoundFunctionExpression>();\n-\t\tauto &info = (BindData &)*func_expr.bind_info;\n+\t\tauto &info = func_expr.bind_info->Cast<BindData>();\n \t\tCalendarPtr calendar_ptr(info.calendar->clone());\n \t\tauto calendar = calendar_ptr.get();\n \ndiff --git a/extension/icu/icu-datetrunc.cpp b/extension/icu/icu-datetrunc.cpp\nindex 1223f0ec53a1..8f4f1945d53b 100644\n--- a/extension/icu/icu-datetrunc.cpp\n+++ b/extension/icu/icu-datetrunc.cpp\n@@ -99,7 +99,7 @@ struct ICUDateTrunc : public ICUDateFunc {\n \t\tauto &date_arg = args.data[1];\n \n \t\tauto &func_expr = state.expr.Cast<BoundFunctionExpression>();\n-\t\tauto &info = (BindData &)*func_expr.bind_info;\n+\t\tauto &info = func_expr.bind_info->Cast<BindData>();\n \t\tCalendarPtr calendar(info.calendar->clone());\n \n \t\tif (part_arg.GetVectorType() == VectorType::CONSTANT_VECTOR) {\ndiff --git a/extension/icu/icu-list-range.cpp b/extension/icu/icu-list-range.cpp\nindex 50d1d47f9322..1b5cab9480ce 100644\n--- a/extension/icu/icu-list-range.cpp\n+++ b/extension/icu/icu-list-range.cpp\n@@ -128,7 +128,7 @@ struct ICUListRange : public ICUDateFunc {\n \t\tD_ASSERT(args.ColumnCount() == 3);\n \n \t\tauto &func_expr = state.expr.Cast<BoundFunctionExpression>();\n-\t\tauto &bind_info = (BindData &)*func_expr.bind_info;\n+\t\tauto &bind_info = func_expr.bind_info->Cast<BindData>();\n \t\tCalendarPtr calendar_ptr(bind_info.calendar->clone());\n \t\tauto calendar = calendar_ptr.get();\n \ndiff --git a/extension/icu/icu-makedate.cpp b/extension/icu/icu-makedate.cpp\nindex 81cbd5c3da46..288be8f412f7 100644\n--- a/extension/icu/icu-makedate.cpp\n+++ b/extension/icu/icu-makedate.cpp\n@@ -85,6 +85,12 @@ struct ICUMakeTimestampTZFunc : public ICUDateFunc {\n \t\treturn GetTime(calendar, micros);\n \t}\n \n+\ttemplate <typename T>\n+\tstatic void FromMicros(DataChunk &input, ExpressionState &state, Vector &result) {\n+\t\tUnaryExecutor::Execute<T, timestamp_t>(input.data[0], result, input.size(),\n+\t\t                                       [&](T micros) { return timestamp_t(micros); });\n+\t}\n+\n \ttemplate <typename T>\n \tstatic void Execute(DataChunk &input, ExpressionState &state, Vector &result) {\n \t\tauto &func_expr = state.expr.Cast<BoundFunctionExpression>();\n@@ -138,6 +144,7 @@ struct ICUMakeTimestampTZFunc : public ICUDateFunc {\n \t\tScalarFunctionSet set(name);\n \t\tset.AddFunction(GetSenaryFunction<int64_t>(LogicalType::BIGINT));\n \t\tset.AddFunction(GetSeptenaryFunction<int64_t>(LogicalType::BIGINT));\n+\t\tset.AddFunction(ScalarFunction({LogicalType::BIGINT}, LogicalType::TIMESTAMP_TZ, FromMicros<int64_t>));\n \n \t\tCreateScalarFunctionInfo func_info(set);\n \t\tauto &catalog = Catalog::GetSystemCatalog(context);\ndiff --git a/extension/icu/icu-strptime.cpp b/extension/icu/icu-strptime.cpp\nindex cc26b14dc797..94a0a8be65a9 100644\n--- a/extension/icu/icu-strptime.cpp\n+++ b/extension/icu/icu-strptime.cpp\n@@ -249,8 +249,8 @@ struct ICUStrptime : public ICUDateFunc {\n \n \tstatic bool CastFromVarchar(Vector &source, Vector &result, idx_t count, CastParameters &parameters) {\n \t\tauto &cast_data = parameters.cast_data->Cast<CastData>();\n-\t\tauto info = (BindData *)cast_data.info.get();\n-\t\tCalendarPtr cal(info->calendar->clone());\n+\t\tauto &info = cast_data.info->Cast<BindData>();\n+\t\tCalendarPtr cal(info.calendar->clone());\n \n \t\tUnaryExecutor::ExecuteWithNulls<string_t, timestamp_t>(\n \t\t    source, result, count, [&](string_t input, ValidityMask &mask, idx_t idx) {\n@@ -476,8 +476,8 @@ struct ICUStrftime : public ICUDateFunc {\n \n \tstatic bool CastToVarchar(Vector &source, Vector &result, idx_t count, CastParameters &parameters) {\n \t\tauto &cast_data = parameters.cast_data->Cast<CastData>();\n-\t\tauto info = (BindData *)cast_data.info.get();\n-\t\tCalendarPtr calendar(info->calendar->clone());\n+\t\tauto &info = cast_data.info->Cast<BindData>();\n+\t\tCalendarPtr calendar(info.calendar->clone());\n \n \t\tUnaryExecutor::ExecuteWithNulls<timestamp_t, string_t>(source, result, count,\n \t\t                                                       [&](timestamp_t input, ValidityMask &mask, idx_t idx) {\ndiff --git a/extension/icu/icu-table-range.cpp b/extension/icu/icu-table-range.cpp\nindex ecb49b896a32..2d503cdd6c2d 100644\n--- a/extension/icu/icu-table-range.cpp\n+++ b/extension/icu/icu-table-range.cpp\n@@ -55,7 +55,7 @@ struct ICUTableRange {\n \t\tbool greater_than_check;\n \n \t\tbool Equals(const FunctionData &other_p) const override {\n-\t\t\tauto &other = (const BindData &)other_p;\n+\t\t\tauto &other = other_p.Cast<const BindData>();\n \t\t\treturn other.start == start && other.end == end && other.increment == increment &&\n \t\t\t       other.inclusive_bound == inclusive_bound && other.greater_than_check == greater_than_check &&\n \t\t\t       *calendar == *other.calendar;\n@@ -65,7 +65,7 @@ struct ICUTableRange {\n \t\t\treturn make_uniq<BindData>(*this);\n \t\t}\n \n-\t\tbool Finished(timestamp_t current_value) {\n+\t\tbool Finished(timestamp_t current_value) const {\n \t\t\tif (greater_than_check) {\n \t\t\t\tif (inclusive_bound) {\n \t\t\t\t\treturn current_value > end;\n@@ -139,15 +139,15 @@ struct ICUTableRange {\n \t};\n \n \tstatic unique_ptr<GlobalTableFunctionState> Init(ClientContext &context, TableFunctionInitInput &input) {\n-\t\tauto &bind_data = (BindData &)*input.bind_data;\n+\t\tauto &bind_data = input.bind_data->Cast<BindData>();\n \t\treturn make_uniq<State>(bind_data.start);\n \t}\n \n \tstatic void ICUTableRangeFunction(ClientContext &context, TableFunctionInput &data_p, DataChunk &output) {\n-\t\tauto &bind_data = (BindData &)*data_p.bind_data;\n+\t\tauto &bind_data = data_p.bind_data->Cast<BindData>();\n \t\tCalendarPtr calendar_ptr(bind_data.calendar->clone());\n \t\tauto calendar = calendar_ptr.get();\n-\t\tauto &state = (State &)*data_p.global_state;\n+\t\tauto &state = data_p.global_state->Cast<State>();\n \t\tif (state.finished) {\n \t\t\treturn;\n \t\t}\ndiff --git a/extension/icu/icu-timebucket.cpp b/extension/icu/icu-timebucket.cpp\nindex 477e2c8b2729..431b627fb432 100644\n--- a/extension/icu/icu-timebucket.cpp\n+++ b/extension/icu/icu-timebucket.cpp\n@@ -75,8 +75,8 @@ struct ICUTimeBucket : public ICUDateFunc {\n \n \tstatic inline timestamp_t WidthConvertibleToDaysCommon(int32_t bucket_width_days, const timestamp_t ts,\n \t                                                       const timestamp_t origin, icu::Calendar *calendar) {\n-\t\tstatic part_trunc_t trunc_days = TruncationFactory(DatePartSpecifier::DAY);\n-\t\tstatic part_sub_t sub_days = SubtractFactory(DatePartSpecifier::DAY);\n+\t\tconst auto trunc_days = TruncationFactory(DatePartSpecifier::DAY);\n+\t\tconst auto sub_days = SubtractFactory(DatePartSpecifier::DAY);\n \n \t\tuint64_t tmp_micros = SetTime(calendar, ts);\n \t\ttrunc_days(calendar, tmp_micros);\n@@ -97,8 +97,8 @@ struct ICUTimeBucket : public ICUDateFunc {\n \n \tstatic inline timestamp_t WidthConvertibleToMonthsCommon(int32_t bucket_width_months, const timestamp_t ts,\n \t                                                         const timestamp_t origin, icu::Calendar *calendar) {\n-\t\tstatic part_trunc_t trunc_months = TruncationFactory(DatePartSpecifier::MONTH);\n-\t\tstatic part_sub_t sub_months = SubtractFactory(DatePartSpecifier::MONTH);\n+\t\tconst auto trunc_months = TruncationFactory(DatePartSpecifier::MONTH);\n+\t\tconst auto sub_months = SubtractFactory(DatePartSpecifier::MONTH);\n \n \t\tuint64_t tmp_micros = SetTime(calendar, ts);\n \t\ttrunc_months(calendar, tmp_micros);\n@@ -126,7 +126,7 @@ struct ICUTimeBucket : public ICUDateFunc {\n \t\tD_ASSERT(args.ColumnCount() == 2);\n \n \t\tauto &func_expr = state.expr.Cast<BoundFunctionExpression>();\n-\t\tauto &info = (BindData &)*func_expr.bind_info;\n+\t\tauto &info = func_expr.bind_info->Cast<BindData>();\n \t\tCalendarPtr calendar(info.calendar->clone());\n \n \t\tBinaryExecutor::Execute<TA, TB, TR>(args.data[0], args.data[1], result, args.size(), [&](TA left, TB right) {\n@@ -139,7 +139,7 @@ struct ICUTimeBucket : public ICUDateFunc {\n \t\tD_ASSERT(args.ColumnCount() == 3);\n \n \t\tauto &func_expr = state.expr.Cast<BoundFunctionExpression>();\n-\t\tauto &info = (BindData &)*func_expr.bind_info;\n+\t\tauto &info = func_expr.bind_info->Cast<BindData>();\n \t\tCalendarPtr calendar(info.calendar->clone());\n \n \t\tTernaryExecutor::Execute<TA, TB, TC, TR>(\n@@ -153,7 +153,7 @@ struct ICUTimeBucket : public ICUDateFunc {\n \t\t\tif (!Value::IsFinite(ts)) {\n \t\t\t\treturn ts;\n \t\t\t}\n-\t\t\tstatic timestamp_t origin = Timestamp::FromEpochMicroSeconds(DEFAULT_ORIGIN_MICROS_1);\n+\t\t\tconst auto origin = Timestamp::FromEpochMicroSeconds(DEFAULT_ORIGIN_MICROS_1);\n \t\t\treturn WidthConvertibleToMicrosCommon(bucket_width.micros, ts, origin, calendar);\n \t\t}\n \t};\n@@ -163,7 +163,7 @@ struct ICUTimeBucket : public ICUDateFunc {\n \t\t\tif (!Value::IsFinite(ts)) {\n \t\t\t\treturn ts;\n \t\t\t}\n-\t\t\tstatic timestamp_t origin = Timestamp::FromEpochMicroSeconds(DEFAULT_ORIGIN_MICROS_1);\n+\t\t\tconst auto origin = Timestamp::FromEpochMicroSeconds(DEFAULT_ORIGIN_MICROS_1);\n \t\t\treturn WidthConvertibleToDaysCommon(bucket_width.days, ts, origin, calendar);\n \t\t}\n \t};\n@@ -173,7 +173,7 @@ struct ICUTimeBucket : public ICUDateFunc {\n \t\t\tif (!Value::IsFinite(ts)) {\n \t\t\t\treturn ts;\n \t\t\t}\n-\t\t\tstatic timestamp_t origin = Timestamp::FromEpochMicroSeconds(DEFAULT_ORIGIN_MICROS_2);\n+\t\t\tconst auto origin = Timestamp::FromEpochMicroSeconds(DEFAULT_ORIGIN_MICROS_2);\n \t\t\treturn WidthConvertibleToMonthsCommon(bucket_width.months, ts, origin, calendar);\n \t\t}\n \t};\n@@ -200,7 +200,7 @@ struct ICUTimeBucket : public ICUDateFunc {\n \t\t\tif (!Value::IsFinite(ts)) {\n \t\t\t\treturn ts;\n \t\t\t}\n-\t\t\tstatic timestamp_t origin = Timestamp::FromEpochMicroSeconds(DEFAULT_ORIGIN_MICROS_1);\n+\t\t\tconst auto origin = Timestamp::FromEpochMicroSeconds(DEFAULT_ORIGIN_MICROS_1);\n \t\t\treturn Add(calendar,\n \t\t\t           WidthConvertibleToMicrosCommon(bucket_width.micros, Sub(calendar, ts, offset), origin, calendar),\n \t\t\t           offset);\n@@ -213,7 +213,7 @@ struct ICUTimeBucket : public ICUDateFunc {\n \t\t\tif (!Value::IsFinite(ts)) {\n \t\t\t\treturn ts;\n \t\t\t}\n-\t\t\tstatic timestamp_t origin = Timestamp::FromEpochMicroSeconds(DEFAULT_ORIGIN_MICROS_1);\n+\t\t\tconst auto origin = Timestamp::FromEpochMicroSeconds(DEFAULT_ORIGIN_MICROS_1);\n \t\t\treturn Add(calendar,\n \t\t\t           WidthConvertibleToDaysCommon(bucket_width.days, Sub(calendar, ts, offset), origin, calendar),\n \t\t\t           offset);\n@@ -226,7 +226,7 @@ struct ICUTimeBucket : public ICUDateFunc {\n \t\t\tif (!Value::IsFinite(ts)) {\n \t\t\t\treturn ts;\n \t\t\t}\n-\t\t\tstatic timestamp_t origin = Timestamp::FromEpochMicroSeconds(DEFAULT_ORIGIN_MICROS_2);\n+\t\t\tconst auto origin = Timestamp::FromEpochMicroSeconds(DEFAULT_ORIGIN_MICROS_2);\n \t\t\treturn Add(calendar,\n \t\t\t           WidthConvertibleToMonthsCommon(bucket_width.months, Sub(calendar, ts, offset), origin, calendar),\n \t\t\t           offset);\n@@ -358,7 +358,7 @@ struct ICUTimeBucket : public ICUDateFunc {\n \t\tD_ASSERT(args.ColumnCount() == 2);\n \n \t\tauto &func_expr = state.expr.Cast<BoundFunctionExpression>();\n-\t\tauto &info = (BindData &)*func_expr.bind_info;\n+\t\tauto &info = func_expr.bind_info->Cast<BindData>();\n \t\tCalendarPtr calendar_ptr(info.calendar->clone());\n \t\tauto calendar = calendar_ptr.get();\n \t\tSetTimeZone(calendar, string_t(\"UTC\"));\n@@ -414,7 +414,7 @@ struct ICUTimeBucket : public ICUDateFunc {\n \t\tD_ASSERT(args.ColumnCount() == 3);\n \n \t\tauto &func_expr = state.expr.Cast<BoundFunctionExpression>();\n-\t\tauto &info = (BindData &)*func_expr.bind_info;\n+\t\tauto &info = func_expr.bind_info->Cast<BindData>();\n \t\tCalendarPtr calendar_ptr(info.calendar->clone());\n \t\tauto calendar = calendar_ptr.get();\n \t\tSetTimeZone(calendar, string_t(\"UTC\"));\n@@ -479,7 +479,7 @@ struct ICUTimeBucket : public ICUDateFunc {\n \t\tD_ASSERT(args.ColumnCount() == 3);\n \n \t\tauto &func_expr = state.expr.Cast<BoundFunctionExpression>();\n-\t\tauto &info = (BindData &)*func_expr.bind_info;\n+\t\tauto &info = func_expr.bind_info->Cast<BindData>();\n \t\tCalendarPtr calendar_ptr(info.calendar->clone());\n \t\tauto calendar = calendar_ptr.get();\n \t\tSetTimeZone(calendar, string_t(\"UTC\"));\n@@ -547,7 +547,7 @@ struct ICUTimeBucket : public ICUDateFunc {\n \t\tD_ASSERT(args.ColumnCount() == 3);\n \n \t\tauto &func_expr = state.expr.Cast<BoundFunctionExpression>();\n-\t\tauto &info = (BindData &)*func_expr.bind_info;\n+\t\tauto &info = func_expr.bind_info->Cast<BindData>();\n \t\tCalendarPtr calendar_ptr(info.calendar->clone());\n \t\tauto calendar = calendar_ptr.get();\n \ndiff --git a/extension/icu/icu-timezone.cpp b/extension/icu/icu-timezone.cpp\nindex 1e6a8bd11401..752374795f29 100644\n--- a/extension/icu/icu-timezone.cpp\n+++ b/extension/icu/icu-timezone.cpp\n@@ -40,7 +40,7 @@ static duckdb::unique_ptr<GlobalTableFunctionState> ICUTimeZoneInit(ClientContex\n }\n \n static void ICUTimeZoneFunction(ClientContext &context, TableFunctionInput &data_p, DataChunk &output) {\n-\tauto &data = (ICUTimeZoneData &)*data_p.global_state;\n+\tauto &data = data_p.global_state->Cast<ICUTimeZoneData>();\n \tidx_t index = 0;\n \twhile (index < STANDARD_VECTOR_SIZE) {\n \t\tUErrorCode status = U_ZERO_ERROR;\n@@ -125,8 +125,8 @@ struct ICUFromNaiveTimestamp : public ICUDateFunc {\n \n \tstatic bool CastFromNaive(Vector &source, Vector &result, idx_t count, CastParameters &parameters) {\n \t\tauto &cast_data = parameters.cast_data->Cast<CastData>();\n-\t\tauto info = (BindData *)cast_data.info.get();\n-\t\tCalendarPtr calendar(info->calendar->clone());\n+\t\tauto &info = cast_data.info->Cast<BindData>();\n+\t\tCalendarPtr calendar(info.calendar->clone());\n \n \t\tUnaryExecutor::Execute<timestamp_t, timestamp_t>(\n \t\t    source, result, count, [&](timestamp_t input) { return Operation(calendar.get(), input); });\n@@ -188,8 +188,8 @@ struct ICUToNaiveTimestamp : public ICUDateFunc {\n \n \tstatic bool CastToNaive(Vector &source, Vector &result, idx_t count, CastParameters &parameters) {\n \t\tauto &cast_data = parameters.cast_data->Cast<CastData>();\n-\t\tauto info = (BindData *)cast_data.info.get();\n-\t\tCalendarPtr calendar(info->calendar->clone());\n+\t\tauto &info = cast_data.info->Cast<BindData>();\n+\t\tCalendarPtr calendar(info.calendar->clone());\n \n \t\tUnaryExecutor::Execute<timestamp_t, timestamp_t>(\n \t\t    source, result, count, [&](timestamp_t input) { return Operation(calendar.get(), input); });\n@@ -225,7 +225,7 @@ struct ICULocalTimestampFunc : public ICUDateFunc {\n \t\t}\n \n \t\tbool Equals(const FunctionData &other_p) const override {\n-\t\t\tauto &other = (const BindDataNow &)other_p;\n+\t\t\tauto &other = other_p.Cast<const BindDataNow>();\n \t\t\tif (now != other.now) {\n \t\t\t\treturn false;\n \t\t\t}\n@@ -247,7 +247,7 @@ struct ICULocalTimestampFunc : public ICUDateFunc {\n \n \tstatic timestamp_t GetLocalTimestamp(ExpressionState &state) {\n \t\tauto &func_expr = state.expr.Cast<BoundFunctionExpression>();\n-\t\tauto &info = (BindDataNow &)*func_expr.bind_info;\n+\t\tauto &info = func_expr.bind_info->Cast<BindDataNow>();\n \t\tCalendarPtr calendar_ptr(info.calendar->clone());\n \t\tauto calendar = calendar_ptr.get();\n \n@@ -296,7 +296,7 @@ struct ICUTimeZoneFunc : public ICUDateFunc {\n \ttemplate <typename OP>\n \tstatic void Execute(DataChunk &input, ExpressionState &state, Vector &result) {\n \t\tauto &func_expr = state.expr.Cast<BoundFunctionExpression>();\n-\t\tauto &info = (BindData &)*func_expr.bind_info;\n+\t\tauto &info = func_expr.bind_info->Cast<BindData>();\n \t\tCalendarPtr calendar_ptr(info.calendar->clone());\n \t\tauto calendar = calendar_ptr.get();\n \ndiff --git a/extension/icu/icu_extension.cpp b/extension/icu/icu_extension.cpp\nindex 8d92282ca84d..cb452d36b035 100644\n--- a/extension/icu/icu_extension.cpp\n+++ b/extension/icu/icu_extension.cpp\n@@ -67,13 +67,13 @@ static int32_t ICUGetSortKey(icu::Collator &collator, string_t input, duckdb::un\n                              int32_t &buffer_size) {\n \ticu::UnicodeString unicode_string =\n \t    icu::UnicodeString::fromUTF8(icu::StringPiece(input.GetData(), input.GetSize()));\n-\tint32_t string_size = collator.getSortKey(unicode_string, (uint8_t *)buffer.get(), buffer_size);\n+\tint32_t string_size = collator.getSortKey(unicode_string, reinterpret_cast<uint8_t *>(buffer.get()), buffer_size);\n \tif (string_size > buffer_size) {\n \t\t// have to resize the buffer\n \t\tbuffer_size = string_size;\n \t\tbuffer = duckdb::unique_ptr<char[]>(new char[buffer_size]);\n \n-\t\tstring_size = collator.getSortKey(unicode_string, (uint8_t *)buffer.get(), buffer_size);\n+\t\tstring_size = collator.getSortKey(unicode_string, reinterpret_cast<uint8_t *>(buffer.get()), buffer_size);\n \t}\n \treturn string_size;\n }\n@@ -185,7 +185,7 @@ static duckdb::unique_ptr<GlobalTableFunctionState> ICUCalendarInit(ClientContex\n }\n \n static void ICUCalendarFunction(ClientContext &context, TableFunctionInput &data_p, DataChunk &output) {\n-\tauto &data = (ICUCalendarData &)*data_p.global_state;\n+\tauto &data = data_p.global_state->Cast<ICUCalendarData>();\n \tidx_t index = 0;\n \twhile (index < STANDARD_VECTOR_SIZE) {\n \t\tif (!data.calendars) {\ndiff --git a/extension/jemalloc/CMakeLists.txt b/extension/jemalloc/CMakeLists.txt\nindex 21881c570bd2..03a0a844e486 100644\n--- a/extension/jemalloc/CMakeLists.txt\n+++ b/extension/jemalloc/CMakeLists.txt\n@@ -1,7 +1,3 @@\n-if(${WASM_LOADABLE_EXTENSIONS})\n-  return()\n-endif()\n-\n cmake_minimum_required(VERSION 2.8.12)\n \n project(JemallocExtension)\ndiff --git a/extension/jemalloc/include/jemalloc_extension.hpp b/extension/jemalloc/include/jemalloc_extension.hpp\nindex 982ac4c7415b..abe8af13ae7a 100644\n--- a/extension/jemalloc/include/jemalloc_extension.hpp\n+++ b/extension/jemalloc/include/jemalloc_extension.hpp\n@@ -20,6 +20,8 @@ class JemallocExtension : public Extension {\n \tstatic data_ptr_t Allocate(PrivateAllocatorData *private_data, idx_t size);\n \tstatic void Free(PrivateAllocatorData *private_data, data_ptr_t pointer, idx_t size);\n \tstatic data_ptr_t Reallocate(PrivateAllocatorData *private_data, data_ptr_t pointer, idx_t old_size, idx_t size);\n+\n+\tstatic void ThreadFlush(idx_t threshold);\n };\n \n } // namespace duckdb\ndiff --git a/extension/jemalloc/jemalloc/src/jemalloc.cpp b/extension/jemalloc/jemalloc/src/jemalloc.cpp\nindex 66c9f28d80ba..ae74794952d5 100644\n--- a/extension/jemalloc/jemalloc/src/jemalloc.cpp\n+++ b/extension/jemalloc/jemalloc/src/jemalloc.cpp\n@@ -26,6 +26,8 @@\n #include \"jemalloc/internal/thread_event.h\"\n #include \"jemalloc/internal/util.h\"\n \n+#include \"duckdb/common/string_util.hpp\"\n+\n namespace duckdb_jemalloc {\n \n /******************************************************************************/\n@@ -4306,6 +4308,8 @@ batch_alloc(void **ptrs, size_t num, size_t size, int flags) {\n JEMALLOC_ATTR(constructor)\n static void\n jemalloc_constructor(void) {\n+\tstatic const std::string CONFIG_STRING = duckdb::StringUtil::Format(\"narenas:%llu,dirty_decay_ms:1000,muzzy_decay_ms:1000\", duckdb::idx_t(malloc_ncpus()));\n+\tje_malloc_conf = CONFIG_STRING.c_str();\n \tmalloc_init();\n }\n #endif\n@@ -4322,6 +4326,7 @@ _malloc_prefork(void)\n \tunsigned i, j, narenas;\n \tarena_t *arena;\n \n+\n #ifdef JEMALLOC_MUTEX_INIT_CB\n \tif (!malloc_initialized()) {\n \t\treturn;\ndiff --git a/extension/jemalloc/jemalloc_extension.cpp b/extension/jemalloc/jemalloc_extension.cpp\nindex 89cfaa1049f5..56a6b42680a8 100644\n--- a/extension/jemalloc/jemalloc_extension.cpp\n+++ b/extension/jemalloc/jemalloc_extension.cpp\n@@ -4,6 +4,10 @@\n #include \"duckdb/common/allocator.hpp\"\n #include \"jemalloc/jemalloc.h\"\n \n+#ifndef DUCKDB_NO_THREADS\n+#include \"duckdb/common/thread.hpp\"\n+#endif\n+\n namespace duckdb {\n \n void JemallocExtension::Load(DuckDB &db) {\n@@ -27,6 +31,46 @@ data_ptr_t JemallocExtension::Reallocate(PrivateAllocatorData *private_data, dat\n \treturn data_ptr_cast(duckdb_jemalloc::je_realloc(pointer, size));\n }\n \n+static void JemallocCTL(const char *name, void *old_ptr, size_t *old_len, void *new_ptr, size_t new_len) {\n+\tif (duckdb_jemalloc::je_mallctl(name, old_ptr, old_len, new_ptr, new_len) != 0) {\n+\t\tthrow InternalException(\"je_mallctl failed for setting \\\"%s\\\"\", name);\n+\t}\n+}\n+\n+template <class T>\n+static void SetJemallocCTL(const char *name, T &val) {\n+\tJemallocCTL(name, &val, sizeof(T));\n+}\n+\n+static void SetJemallocCTL(const char *name) {\n+\tJemallocCTL(name, nullptr, nullptr, nullptr, 0);\n+}\n+\n+template <class T>\n+static T GetJemallocCTL(const char *name) {\n+\tT result;\n+\tsize_t len = sizeof(T);\n+\tJemallocCTL(name, &result, &len, nullptr, 0);\n+\treturn result;\n+}\n+\n+void JemallocExtension::ThreadFlush(idx_t threshold) {\n+\t// We flush after exceeding the threshold\n+\tif (GetJemallocCTL<uint64_t>(\"thread.peak.read\") < threshold) {\n+\t\treturn;\n+\t}\n+\n+\t// Flush thread-local cache\n+\tSetJemallocCTL(\"thread.tcache.flush\");\n+\n+\t// Flush this thread's arena\n+\tconst auto purge_arena = StringUtil::Format(\"arena.%llu.purge\", idx_t(GetJemallocCTL<unsigned>(\"thread.arena\")));\n+\tSetJemallocCTL(purge_arena.c_str());\n+\n+\t// Reset the peak after resetting\n+\tSetJemallocCTL(\"thread.peak.reset\");\n+}\n+\n } // namespace duckdb\n \n extern \"C\" {\ndiff --git a/extension/json/include/json_common.hpp b/extension/json/include/json_common.hpp\nindex 182908b00e5e..d4bec7797fa2 100644\n--- a/extension/json/include/json_common.hpp\n+++ b/extension/json/include/json_common.hpp\n@@ -16,6 +16,7 @@\n \n namespace duckdb {\n \n+//! JSON allocator is a custom allocator for yyjson that prevents many tiny allocations\n class JSONAllocator {\n public:\n \texplicit JSONAllocator(Allocator &allocator)\n@@ -50,6 +51,7 @@ class JSONAllocator {\n \tyyjson_alc yyjson_allocator;\n };\n \n+//! JSONKey / json_key_map_t speeds up mapping from JSON key to column ID\n struct JSONKey {\n \tconst char *ptr;\n \tsize_t len;\n@@ -81,8 +83,10 @@ template <typename T>\n using json_key_map_t = unordered_map<JSONKey, T, JSONKeyHash, JSONKeyEquality>;\n using json_key_set_t = unordered_set<JSONKey, JSONKeyHash, JSONKeyEquality>;\n \n+//! Common JSON functionality for most JSON functions\n struct JSONCommon {\n public:\n+\t//! The JSON logical type, registered when the extension is loaded\n \tstatic constexpr auto JSON_TYPE_NAME = \"JSON\";\n \n \tstatic const LogicalType JSONType() {\n@@ -114,9 +118,8 @@ struct JSONCommon {\n \tstatic constexpr char const *TYPE_STRING_ARRAY = \"ARRAY\";\n \tstatic constexpr char const *TYPE_STRING_OBJECT = \"OBJECT\";\n \n-\ttemplate <class YYJSON_VAL_T>\n-\tstatic inline const char *ValTypeToString(YYJSON_VAL_T *val) {\n-\t\tswitch (GetTag<YYJSON_VAL_T>(val)) {\n+\tstatic inline const char *ValTypeToString(yyjson_val *val) {\n+\t\tswitch (yyjson_get_tag(val)) {\n \t\tcase YYJSON_TYPE_NULL | YYJSON_SUBTYPE_NONE:\n \t\t\treturn JSONCommon::TYPE_STRING_NULL;\n \t\tcase YYJSON_TYPE_STR | YYJSON_SUBTYPE_NONE:\n@@ -139,14 +142,12 @@ struct JSONCommon {\n \t\t}\n \t}\n \n-\ttemplate <class YYJSON_VAL_T>\n-\tstatic inline constexpr string_t ValTypeToStringT(YYJSON_VAL_T *val) {\n-\t\treturn string_t(ValTypeToString<YYJSON_VAL_T>(val));\n+\tstatic inline string_t ValTypeToStringT(yyjson_val *val) {\n+\t\treturn string_t(ValTypeToString(val));\n \t}\n \n-\ttemplate <class YYJSON_VAL_T>\n-\tstatic inline LogicalTypeId ValTypeToLogicalTypeId(YYJSON_VAL_T *val) {\n-\t\tswitch (GetTag<YYJSON_VAL_T>(val)) {\n+\tstatic inline LogicalTypeId ValTypeToLogicalTypeId(yyjson_val *val) {\n+\t\tswitch (yyjson_get_tag(val)) {\n \t\tcase YYJSON_TYPE_NULL | YYJSON_SUBTYPE_NONE:\n \t\t\treturn LogicalTypeId::SQLNULL;\n \t\tcase YYJSON_TYPE_STR | YYJSON_SUBTYPE_NONE:\n@@ -170,6 +171,9 @@ struct JSONCommon {\n \t}\n \n public:\n+\t//===--------------------------------------------------------------------===//\n+\t// Document creation / reading / writing\n+\t//===--------------------------------------------------------------------===//\n \ttemplate <class T>\n \tstatic T *AllocateArray(yyjson_alc *alc, idx_t count) {\n \t\treturn reinterpret_cast<T *>(alc->malloc(alc->ctx, sizeof(T) * count));\n@@ -204,6 +208,7 @@ struct JSONCommon {\n \tstatic inline yyjson_doc *ReadDocument(const string_t &input, const yyjson_read_flag flg, yyjson_alc *alc) {\n \t\treturn ReadDocument(input.GetDataWriteable(), input.GetSize(), flg, alc);\n \t}\n+\n \tstatic string FormatParseError(const char *data, idx_t length, yyjson_read_err &error, const string &extra = \"\") {\n \t\tD_ASSERT(error.code != YYJSON_READ_SUCCESS);\n \t\t// Truncate, so we don't print megabytes worth of JSON\n@@ -228,203 +233,77 @@ struct JSONCommon {\n \t\tauto data = WriteVal<YYJSON_VAL_T>(val, alc, len);\n \t\treturn string_t(data, len);\n \t}\n+\n+\t//! Slow and easy ToString for errors\n \tstatic string ValToString(yyjson_val *val, idx_t max_len = DConstants::INVALID_INDEX);\n \t//! Throw an error with the printed yyjson_val\n \tstatic void ThrowValFormatError(string error_string, yyjson_val *val);\n \n public:\n-\t//! Validate path with $ syntax\n-\tstatic void ValidatePathDollar(const char *ptr, const idx_t &len);\n+\t//===--------------------------------------------------------------------===//\n+\t// JSON pointer / path\n+\t//===--------------------------------------------------------------------===//\n+\tenum class JSONPathType : uint8_t {\n+\t\t//! Extract a single value\n+\t\tREGULAR = 0,\n+\t\t//! Extract multiple values (when we have a '*' wildcard in the JSON Path)\n+\t\tWILDCARD = 1,\n+\t};\n \n \t//! Get JSON value using JSON path query (safe, checks the path query)\n-\ttemplate <class YYJSON_VAL_T>\n-\tstatic inline YYJSON_VAL_T *GetPointer(YYJSON_VAL_T *root, const string_t &path_str) {\n+\tstatic inline yyjson_val *Get(yyjson_val *val, const string_t &path_str) {\n \t\tauto ptr = path_str.GetData();\n \t\tauto len = path_str.GetSize();\n \t\tif (len == 0) {\n-\t\t\treturn GetPointerUnsafe<YYJSON_VAL_T>(root, ptr, len);\n+\t\t\treturn GetUnsafe(val, ptr, len);\n \t\t}\n \t\tswitch (*ptr) {\n \t\tcase '/': {\n \t\t\t// '/' notation must be '\\0'-terminated\n \t\t\tauto str = string(ptr, len);\n-\t\t\treturn GetPointerUnsafe<YYJSON_VAL_T>(root, str.c_str(), len);\n+\t\t\treturn GetUnsafe(val, str.c_str(), len);\n \t\t}\n \t\tcase '$': {\n-\t\t\tValidatePathDollar(ptr, len);\n-\t\t\treturn GetPointerUnsafe<YYJSON_VAL_T>(root, ptr, len);\n+\t\t\tif (ValidatePath(ptr, len, false) == JSONPathType::WILDCARD) {\n+\t\t\t\tthrow InvalidInputException(\n+\t\t\t\t    \"JSON path cannot contain wildcards if the path is not a constant parameter\");\n+\t\t\t}\n+\t\t\treturn GetUnsafe(val, ptr, len);\n \t\t}\n \t\tdefault:\n \t\t\tauto str = \"/\" + string(ptr, len);\n-\t\t\treturn GetPointerUnsafe<YYJSON_VAL_T>(root, str.c_str(), len + 1);\n+\t\t\treturn GetUnsafe(val, str.c_str(), len + 1);\n \t\t}\n \t}\n \n \t//! Get JSON value using JSON path query (unsafe)\n-\ttemplate <class YYJSON_VAL_T>\n-\tstatic inline YYJSON_VAL_T *GetPointerUnsafe(YYJSON_VAL_T *root, const char *ptr, const idx_t &len) {\n+\tstatic inline yyjson_val *GetUnsafe(yyjson_val *val, const char *ptr, const idx_t &len) {\n \t\tif (len == 0) {\n \t\t\treturn nullptr;\n \t\t}\n \t\tswitch (*ptr) {\n \t\tcase '/':\n-\t\t\treturn TemplatedGetPointer<YYJSON_VAL_T>(root, ptr, len);\n+\t\t\treturn GetPointer(val, ptr, len);\n \t\tcase '$':\n-\t\t\treturn TemplatedGetPointerDollar<YYJSON_VAL_T>(root, ptr, len);\n+\t\t\treturn GetPath(val, ptr, len);\n \t\tdefault:\n-\t\t\tthrow InternalException(\"JSON path does not start with '/' or '$'\");\n+\t\t\tthrow InternalException(\"JSON pointer/path does not start with '/' or '$'\");\n \t\t}\n \t}\n \n-private:\n-\t//! Get JSON pointer using /field/index/... notation\n-\ttemplate <class YYJSON_VAL_T>\n-\tstatic inline YYJSON_VAL_T *TemplatedGetPointer(YYJSON_VAL_T *root, const char *ptr, const idx_t &len) {\n-\t\tthrow InternalException(\"Unknown yyjson value type\");\n-\t}\n-\n-\t//! Get JSON pointer using $.field[index]... notation\n-\ttemplate <class YYJSON_VAL_T>\n-\tstatic YYJSON_VAL_T *TemplatedGetPointerDollar(YYJSON_VAL_T *val, const char *ptr, const idx_t &len) {\n-\t\tif (len == 1) {\n-\t\t\t// Just '$'\n-\t\t\treturn val;\n-\t\t}\n-\t\tconst char *const end = ptr + len;\n-\t\t// Skip past '$'\n-\t\tptr++;\n-\t\twhile (val != nullptr && ptr != end) {\n-\t\t\tconst auto &c = *ptr++;\n-\t\t\tif (c == '.') {\n-\t\t\t\t// Object\n-\t\t\t\tif (!IsObj<YYJSON_VAL_T>(val)) {\n-\t\t\t\t\treturn nullptr;\n-\t\t\t\t}\n-\t\t\t\tbool escaped = false;\n-\t\t\t\tif (*ptr == '\"') {\n-\t\t\t\t\t// Skip past opening '\"'\n-\t\t\t\t\tptr++;\n-\t\t\t\t\tescaped = true;\n-\t\t\t\t}\n-\t\t\t\tauto key_len = ReadString(ptr, end, escaped);\n-\t\t\t\tval = ObjGetN<YYJSON_VAL_T>(val, ptr, key_len);\n-\t\t\t\tptr += key_len;\n-\t\t\t\tif (escaped) {\n-\t\t\t\t\t// Skip past closing '\"'\n-\t\t\t\t\tptr++;\n-\t\t\t\t}\n-\t\t\t} else if (c == '[') {\n-\t\t\t\t// Array\n-\t\t\t\tif (!IsArr<YYJSON_VAL_T>(val)) {\n-\t\t\t\t\treturn nullptr;\n-\t\t\t\t}\n-\t\t\t\tbool from_back = false;\n-\t\t\t\tif (*ptr == '#') {\n-\t\t\t\t\t// Index from back of array\n-\t\t\t\t\tptr++;\n-\t\t\t\t\tif (*ptr == ']') {\n-\t\t\t\t\t\treturn nullptr;\n-\t\t\t\t\t}\n-\t\t\t\t\tfrom_back = true;\n-\t\t\t\t\t// Skip past '-'\n-\t\t\t\t\tptr++;\n-\t\t\t\t}\n-\t\t\t\t// Read index\n-\t\t\t\tidx_t idx;\n-\t\t\t\tauto idx_len = ReadIndex(ptr, end, idx);\n-\t\t\t\tif (from_back) {\n-\t\t\t\t\tauto arr_size = ArrSize<YYJSON_VAL_T>(val);\n-\t\t\t\t\tidx = idx > arr_size ? arr_size : arr_size - idx;\n-\t\t\t\t}\n-\t\t\t\tval = ArrGet<YYJSON_VAL_T>(val, idx);\n-\t\t\t\tptr += idx_len;\n-\t\t\t\t// Skip past closing ']'\n-\t\t\t\tptr++;\n-\t\t\t} else {\n-\t\t\t\tthrow InternalException(\"Unexpected char when parsing JSON path\");\n-\t\t\t}\n-\t\t}\n-\t\treturn val;\n-\t}\n-\n-\tstatic inline idx_t ReadString(const char *ptr, const char *const end, const bool escaped) {\n-\t\tconst char *const before = ptr;\n-\t\tif (escaped) {\n-\t\t\twhile (ptr != end) {\n-\t\t\t\tif (*ptr == '\"') {\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\t\t\t\tptr++;\n-\t\t\t}\n-\t\t\treturn ptr == end ? 0 : ptr - before;\n-\t\t} else {\n-\t\t\twhile (ptr != end) {\n-\t\t\t\tif (*ptr == '.' || *ptr == '[') {\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\t\t\t\tptr++;\n-\t\t\t}\n-\t\t\treturn ptr - before;\n-\t\t}\n-\t}\n-\n-\tstatic constexpr auto IDX_T_SAFE_DIG = 19;\n-\tstatic constexpr auto IDX_T_MAX = ((idx_t)(~(idx_t)0));\n+\t//! Get JSON value using JSON path query (unsafe)\n+\tstatic void GetWildcardPath(yyjson_val *val, const char *ptr, const idx_t &len, vector<yyjson_val *> &vals);\n \n-\tstatic inline idx_t ReadIndex(const char *ptr, const char *const end, idx_t &idx) {\n-\t\tconst char *const before = ptr;\n-\t\tidx = 0;\n-\t\tfor (idx_t i = 0; i < IDX_T_SAFE_DIG; i++) {\n-\t\t\tif (ptr == end) {\n-\t\t\t\t// No closing ']'\n-\t\t\t\treturn 0;\n-\t\t\t}\n-\t\t\tif (*ptr == ']') {\n-\t\t\t\tbreak;\n-\t\t\t}\n-\t\t\tuint8_t add = (uint8_t)(*ptr - '0');\n-\t\t\tif (add <= 9) {\n-\t\t\t\tidx = add + idx * 10;\n-\t\t\t} else {\n-\t\t\t\t// Not a digit\n-\t\t\t\treturn 0;\n-\t\t\t}\n-\t\t\tptr++;\n-\t\t}\n-\t\t// Invalid if overflow\n-\t\treturn idx >= (idx_t)IDX_T_MAX ? 0 : ptr - before;\n-\t}\n+\t//! Validate JSON Path ($.field[index]... syntax), returns true if there are wildcards in the path\n+\tstatic JSONPathType ValidatePath(const char *ptr, const idx_t &len, const bool binder);\n \n private:\n-\ttemplate <class YYJSON_VAL_T>\n-\tstatic inline bool IsObj(YYJSON_VAL_T *val) {\n-\t\tthrow InternalException(\"Unknown yyjson value type\");\n-\t}\n-\n-\ttemplate <class YYJSON_VAL_T>\n-\tstatic inline YYJSON_VAL_T *ObjGetN(YYJSON_VAL_T *val, const char *ptr, idx_t key_len) {\n-\t\tthrow InternalException(\"Unknown yyjson value type\");\n-\t}\n-\n-\ttemplate <class YYJSON_VAL_T>\n-\tstatic inline bool IsArr(YYJSON_VAL_T *val) {\n-\t\tthrow InternalException(\"Unknown yyjson value type\");\n-\t}\n-\n-\ttemplate <class YYJSON_VAL_T>\n-\tstatic inline size_t ArrSize(YYJSON_VAL_T *val) {\n-\t\tthrow InternalException(\"Unknown yyjson value type\");\n-\t}\n-\n-\ttemplate <class YYJSON_VAL_T>\n-\tstatic inline YYJSON_VAL_T *ArrGet(YYJSON_VAL_T *val, idx_t index) {\n-\t\tthrow InternalException(\"Unknown yyjson value type\");\n-\t}\n-\n-\ttemplate <class YYJSON_VAL_T>\n-\tstatic inline yyjson_type GetTag(YYJSON_VAL_T *val) {\n-\t\tthrow InternalException(\"Unknown yyjson value type\");\n+\t//! Get JSON pointer (/field/index/... syntax)\n+\tstatic inline yyjson_val *GetPointer(yyjson_val *val, const char *ptr, const idx_t &len) {\n+\t\treturn len == 1 ? val : unsafe_yyjson_get_pointer(val, ptr, len);\n \t}\n+\t//! Get JSON path ($.field[index]... syntax)\n+\tstatic yyjson_val *GetPath(yyjson_val *val, const char *ptr, const idx_t &len);\n };\n \n template <>\n@@ -436,67 +315,4 @@ inline char *JSONCommon::WriteVal(yyjson_mut_val *val, yyjson_alc *alc, idx_t &l\n \treturn yyjson_mut_val_write_opts(val, JSONCommon::WRITE_FLAG, alc, reinterpret_cast<size_t *>(&len), nullptr);\n }\n \n-template <>\n-inline yyjson_val *JSONCommon::TemplatedGetPointer(yyjson_val *root, const char *ptr, const idx_t &len) {\n-\treturn len == 1 ? root : unsafe_yyjson_get_pointer(root, ptr, len);\n-}\n-template <>\n-inline yyjson_mut_val *JSONCommon::TemplatedGetPointer(yyjson_mut_val *root, const char *ptr, const idx_t &len) {\n-\treturn len == 1 ? root : unsafe_yyjson_mut_get_pointer(root, ptr, len);\n-}\n-\n-template <>\n-inline bool JSONCommon::IsObj(yyjson_val *val) {\n-\treturn yyjson_is_obj(val);\n-}\n-template <>\n-inline bool JSONCommon::IsObj(yyjson_mut_val *val) {\n-\treturn yyjson_mut_is_obj(val);\n-}\n-\n-template <>\n-inline yyjson_val *JSONCommon::ObjGetN(yyjson_val *val, const char *ptr, idx_t key_len) {\n-\treturn yyjson_obj_getn(val, ptr, key_len);\n-}\n-template <>\n-inline yyjson_mut_val *JSONCommon::ObjGetN(yyjson_mut_val *val, const char *ptr, idx_t key_len) {\n-\treturn yyjson_mut_obj_getn(val, ptr, key_len);\n-}\n-\n-template <>\n-inline bool JSONCommon::IsArr(yyjson_val *val) {\n-\treturn yyjson_is_arr(val);\n-}\n-template <>\n-inline bool JSONCommon::IsArr(yyjson_mut_val *val) {\n-\treturn yyjson_mut_is_arr(val);\n-}\n-\n-template <>\n-inline size_t JSONCommon::ArrSize(yyjson_val *val) {\n-\treturn yyjson_arr_size(val);\n-}\n-template <>\n-inline size_t JSONCommon::ArrSize(yyjson_mut_val *val) {\n-\treturn yyjson_mut_arr_size(val);\n-}\n-\n-template <>\n-inline yyjson_val *JSONCommon::ArrGet(yyjson_val *val, idx_t index) {\n-\treturn yyjson_arr_get(val, index);\n-}\n-template <>\n-inline yyjson_mut_val *JSONCommon::ArrGet(yyjson_mut_val *val, idx_t index) {\n-\treturn yyjson_mut_arr_get(val, index);\n-}\n-\n-template <>\n-inline yyjson_type JSONCommon::GetTag(yyjson_val *val) {\n-\treturn yyjson_get_tag(val);\n-}\n-template <>\n-inline yyjson_type JSONCommon::GetTag(yyjson_mut_val *val) {\n-\treturn yyjson_mut_get_tag(val);\n-}\n-\n } // namespace duckdb\ndiff --git a/extension/json/include/json_executors.hpp b/extension/json/include/json_executors.hpp\nindex 1922ad4b0ac7..334170ee73b2 100644\n--- a/extension/json/include/json_executors.hpp\n+++ b/extension/json/include/json_executors.hpp\n@@ -42,23 +42,59 @@ struct JSONExecutors {\n \t\tif (info.constant) { // Constant path\n \t\t\tconst char *ptr = info.ptr;\n \t\t\tconst idx_t &len = info.len;\n-\t\t\tUnaryExecutor::ExecuteWithNulls<string_t, T>(\n-\t\t\t    inputs, result, args.size(), [&](string_t input, ValidityMask &mask, idx_t idx) {\n-\t\t\t\t    auto doc = JSONCommon::ReadDocument(input, JSONCommon::READ_FLAG, lstate.json_allocator.GetYYAlc());\n-\t\t\t\t    auto val = JSONCommon::GetPointerUnsafe<yyjson_val>(doc->root, ptr, len);\n-\t\t\t\t    if (!val || unsafe_yyjson_is_null(val)) {\n-\t\t\t\t\t    mask.SetInvalid(idx);\n-\t\t\t\t\t    return T {};\n-\t\t\t\t    } else {\n-\t\t\t\t\t    return fun(val, alc, result);\n-\t\t\t\t    }\n-\t\t\t    });\n+\t\t\tif (info.path_type == JSONCommon::JSONPathType::REGULAR) {\n+\t\t\t\tUnaryExecutor::ExecuteWithNulls<string_t, T>(\n+\t\t\t\t    inputs, result, args.size(), [&](string_t input, ValidityMask &mask, idx_t idx) {\n+\t\t\t\t\t    auto doc =\n+\t\t\t\t\t        JSONCommon::ReadDocument(input, JSONCommon::READ_FLAG, lstate.json_allocator.GetYYAlc());\n+\t\t\t\t\t    auto val = JSONCommon::GetUnsafe(doc->root, ptr, len);\n+\t\t\t\t\t    if (!val || unsafe_yyjson_is_null(val)) {\n+\t\t\t\t\t\t    mask.SetInvalid(idx);\n+\t\t\t\t\t\t    return T {};\n+\t\t\t\t\t    } else {\n+\t\t\t\t\t\t    return fun(val, alc, result);\n+\t\t\t\t\t    }\n+\t\t\t\t    });\n+\t\t\t} else {\n+\t\t\t\tD_ASSERT(info.path_type == JSONCommon::JSONPathType::WILDCARD);\n+\t\t\t\tvector<yyjson_val *> vals;\n+\t\t\t\tUnaryExecutor::Execute<string_t, list_entry_t>(inputs, result, args.size(), [&](string_t input) {\n+\t\t\t\t\tvals.clear();\n+\n+\t\t\t\t\tauto doc = JSONCommon::ReadDocument(input, JSONCommon::READ_FLAG, lstate.json_allocator.GetYYAlc());\n+\t\t\t\t\tJSONCommon::GetWildcardPath(doc->root, ptr, len, vals);\n+\n+\t\t\t\t\tauto current_size = ListVector::GetListSize(result);\n+\t\t\t\t\tauto new_size = current_size + vals.size();\n+\t\t\t\t\tif (ListVector::GetListCapacity(result) < new_size) {\n+\t\t\t\t\t\tListVector::Reserve(result, new_size);\n+\t\t\t\t\t}\n+\n+\t\t\t\t\tauto &child_entry = ListVector::GetEntry(result);\n+\t\t\t\t\tauto child_vals = FlatVector::GetData<T>(child_entry);\n+\t\t\t\t\tauto &child_validity = FlatVector::Validity(child_entry);\n+\t\t\t\t\tfor (idx_t i = 0; i < vals.size(); i++) {\n+\t\t\t\t\t\tauto &val = vals[i];\n+\t\t\t\t\t\tD_ASSERT(val != nullptr); // Wildcard extract shouldn't give back nullptrs\n+\t\t\t\t\t\tif (unsafe_yyjson_is_null(val)) {\n+\t\t\t\t\t\t\tchild_validity.SetInvalid(current_size + i);\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tchild_vals[current_size + i] = fun(val, alc, result);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\n+\t\t\t\t\tListVector::SetListSize(result, new_size);\n+\n+\t\t\t\t\treturn list_entry_t {current_size, vals.size()};\n+\t\t\t\t});\n+\t\t\t}\n \t\t} else { // Columnref path\n+\t\t\tD_ASSERT(info.path_type == JSONCommon::JSONPathType::REGULAR);\n \t\t\tauto &paths = args.data[1];\n \t\t\tBinaryExecutor::ExecuteWithNulls<string_t, string_t, T>(\n \t\t\t    inputs, paths, result, args.size(), [&](string_t input, string_t path, ValidityMask &mask, idx_t idx) {\n \t\t\t\t    auto doc = JSONCommon::ReadDocument(input, JSONCommon::READ_FLAG, lstate.json_allocator.GetYYAlc());\n-\t\t\t\t    auto val = JSONCommon::GetPointer<yyjson_val>(doc->root, path);\n+\t\t\t\t    auto val = JSONCommon::Get(doc->root, path);\n \t\t\t\t    if (!val || unsafe_yyjson_is_null(val)) {\n \t\t\t\t\t    mask.SetInvalid(idx);\n \t\t\t\t\t    return T {};\n@@ -111,7 +147,7 @@ struct JSONExecutors {\n \t\t\tauto doc = JSONCommon::ReadDocument(inputs[idx], JSONCommon::READ_FLAG, lstate.json_allocator.GetYYAlc());\n \t\t\tfor (idx_t path_i = 0; path_i < num_paths; path_i++) {\n \t\t\t\tauto child_idx = offset + path_i;\n-\t\t\t\tval = JSONCommon::GetPointerUnsafe<yyjson_val>(doc->root, info.ptrs[path_i], info.lens[path_i]);\n+\t\t\t\tval = JSONCommon::GetUnsafe(doc->root, info.ptrs[path_i], info.lens[path_i]);\n \t\t\t\tif (!val || unsafe_yyjson_is_null(val)) {\n \t\t\t\t\tchild_validity.SetInvalid(child_idx);\n \t\t\t\t} else {\ndiff --git a/extension/json/include/json_functions.hpp b/extension/json/include/json_functions.hpp\nindex 4f78d0c6b4d5..b3c6d3d1ea4a 100644\n--- a/extension/json/include/json_functions.hpp\n+++ b/extension/json/include/json_functions.hpp\n@@ -24,7 +24,7 @@ class BuiltinFunctions;\n // Scalar function stuff\n struct JSONReadFunctionData : public FunctionData {\n public:\n-\tJSONReadFunctionData(bool constant, string path_p, idx_t len);\n+\tJSONReadFunctionData(bool constant, string path_p, idx_t len, JSONCommon::JSONPathType path_type);\n \tunique_ptr<FunctionData> Copy() const override;\n \tbool Equals(const FunctionData &other_p) const override;\n \tstatic unique_ptr<FunctionData> Bind(ClientContext &context, ScalarFunction &bound_function,\n@@ -33,6 +33,7 @@ struct JSONReadFunctionData : public FunctionData {\n public:\n \tconst bool constant;\n \tconst string path;\n+\tconst JSONCommon::JSONPathType path_type;\n \tconst char *ptr;\n \tconst size_t len;\n };\ndiff --git a/extension/json/json_common.cpp b/extension/json/json_common.cpp\nindex 0786b22f7509..85ef1d9a6417 100644\n--- a/extension/json/json_common.cpp\n+++ b/extension/json/json_common.cpp\n@@ -2,6 +2,8 @@\n \n namespace duckdb {\n \n+using JSONPathType = JSONCommon::JSONPathType;\n+\n string JSONCommon::ValToString(yyjson_val *val, idx_t max_len) {\n \tJSONAllocator json_allocator(Allocator::DefaultAllocator());\n \tidx_t len;\n@@ -18,61 +20,291 @@ void JSONCommon::ThrowValFormatError(string error_string, yyjson_val *val) {\n \tthrow InvalidInputException(error_string);\n }\n \n-string ThrowPathError(const char *ptr, const char *end) {\n+string ThrowPathError(const char *ptr, const char *end, const bool binder) {\n \tptr--;\n-\tthrow InvalidInputException(\"JSON path error near '%s'\", string(ptr, end - ptr));\n+\tauto msg = StringUtil::Format(\"JSON path error near '%s'\", string(ptr, end - ptr));\n+\tif (binder) {\n+\t\tthrow BinderException(msg);\n+\t} else {\n+\t\tthrow InvalidInputException(msg);\n+\t}\n+}\n+\n+static inline idx_t ReadString(const char *ptr, const char *const end, const bool escaped) {\n+\tconst char *const before = ptr;\n+\tif (escaped) {\n+\t\twhile (ptr != end) {\n+\t\t\tif (*ptr == '\"') {\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tptr++;\n+\t\t}\n+\t\treturn ptr == end ? 0 : ptr - before;\n+\t} else {\n+\t\twhile (ptr != end) {\n+\t\t\tif (*ptr == '.' || *ptr == '[') {\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tptr++;\n+\t\t}\n+\t\treturn ptr - before;\n+\t}\n+}\n+\n+static inline idx_t ReadInteger(const char *ptr, const char *const end, idx_t &idx) {\n+\tstatic constexpr auto IDX_T_SAFE_DIG = 19;\n+\tstatic constexpr auto IDX_T_MAX = ((idx_t)(~(idx_t)0));\n+\n+\tconst char *const before = ptr;\n+\tidx = 0;\n+\tfor (idx_t i = 0; i < IDX_T_SAFE_DIG; i++) {\n+\t\tif (ptr == end) {\n+\t\t\t// No closing ']'\n+\t\t\treturn 0;\n+\t\t}\n+\t\tif (*ptr == ']') {\n+\t\t\tbreak;\n+\t\t}\n+\t\tuint8_t add = (uint8_t)(*ptr - '0');\n+\t\tif (add <= 9) {\n+\t\t\tidx = add + idx * 10;\n+\t\t} else {\n+\t\t\t// Not a digit\n+\t\t\treturn 0;\n+\t\t}\n+\t\tptr++;\n+\t}\n+\t// Invalid if overflow\n+\treturn idx >= (idx_t)IDX_T_MAX ? 0 : ptr - before;\n+}\n+\n+static inline bool ReadKey(const char *&ptr, const char *const end, const char *&key_ptr, idx_t &key_len) {\n+\tD_ASSERT(ptr != end);\n+\tif (*ptr == '*') { // Wildcard\n+\t\tptr++;\n+\t\tkey_len = DConstants::INVALID_INDEX;\n+\t\treturn true;\n+\t}\n+\tbool escaped = false;\n+\tif (*ptr == '\"') {\n+\t\tptr++; // Skip past opening '\"'\n+\t\tescaped = true;\n+\t}\n+\tkey_ptr = ptr;\n+\tkey_len = ReadString(ptr, end, escaped);\n+\tif (key_len == 0) {\n+\t\treturn false;\n+\t}\n+\tptr += key_len;\n+\tif (escaped) {\n+\t\tptr++; // Skip past closing '\"'\n+\t}\n+\treturn true;\n }\n \n-void JSONCommon::ValidatePathDollar(const char *ptr, const idx_t &len) {\n+static inline bool ReadArrayIndex(const char *&ptr, const char *const end, idx_t &array_index, bool &from_back) {\n+\tD_ASSERT(ptr != end);\n+\tfrom_back = false;\n+\tif (*ptr == '*') { // Wildcard\n+\t\tptr++;\n+\t\tif (ptr == end || *ptr != ']') {\n+\t\t\treturn false;\n+\t\t}\n+\t\tarray_index = DConstants::INVALID_INDEX;\n+\t} else {\n+\t\tif (*ptr == '#') { // SQLite syntax to index from back of array\n+\t\t\tptr++;         // Skip over '#'\n+\t\t\tif (ptr == end) {\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t\tif (*ptr == ']') {\n+\t\t\t\t// [#] always returns NULL in SQLite, so we return an array index that will do the same\n+\t\t\t\tarray_index = NumericLimits<uint32_t>::Maximum();\n+\t\t\t\tptr++;\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t\t\tif (*ptr != '-') {\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t\tfrom_back = true;\n+\t\t}\n+\t\tif (*ptr == '-') {\n+\t\t\tptr++; // Skip over '-'\n+\t\t\tfrom_back = true;\n+\t\t}\n+\t\tauto idx_len = ReadInteger(ptr, end, array_index);\n+\t\tif (idx_len == 0) {\n+\t\t\treturn false;\n+\t\t}\n+\t\tptr += idx_len;\n+\t}\n+\tptr++; // Skip past closing ']'\n+\treturn true;\n+}\n+\n+JSONPathType JSONCommon::ValidatePath(const char *ptr, const idx_t &len, const bool binder) {\n+\tD_ASSERT(len >= 1 && *ptr == '$');\n+\tJSONPathType path_type = JSONPathType::REGULAR;\n \tconst char *const end = ptr + len;\n-\t// Skip past '$'\n-\tptr++;\n+\tptr++; // Skip past '$'\n \twhile (ptr != end) {\n \t\tconst auto &c = *ptr++;\n-\t\tif (c == '.') {\n-\t\t\t// Object\n-\t\t\tbool escaped = false;\n-\t\t\tif (*ptr == '\"') {\n-\t\t\t\t// Skip past opening '\"'\n-\t\t\t\tptr++;\n-\t\t\t\tescaped = true;\n+\t\tif (ptr == end) {\n+\t\t\tThrowPathError(ptr, end, binder);\n+\t\t}\n+\t\tswitch (c) {\n+\t\tcase '.': { // Object field\n+\t\t\tconst char *key_ptr;\n+\t\t\tidx_t key_len;\n+\t\t\tif (!ReadKey(ptr, end, key_ptr, key_len)) {\n+\t\t\t\tThrowPathError(ptr, end, binder);\n \t\t\t}\n-\t\t\tauto key_len = ReadString(ptr, end, escaped);\n-\t\t\tif (key_len == 0) {\n-\t\t\t\tThrowPathError(ptr, end);\n+\t\t\tif (key_len == DConstants::INVALID_INDEX) {\n+\t\t\t\tpath_type = JSONPathType::WILDCARD;\n \t\t\t}\n-\t\t\tptr += key_len;\n-\t\t\tif (escaped) {\n-\t\t\t\t// Skip past closing '\"'\n-\t\t\t\tptr++;\n+\t\t\tbreak;\n+\t\t}\n+\t\tcase '[': { // Array index\n+\t\t\tidx_t array_index;\n+\t\t\tbool from_back;\n+\t\t\tif (!ReadArrayIndex(ptr, end, array_index, from_back)) {\n+\t\t\t\tThrowPathError(ptr, end, binder);\n \t\t\t}\n-\t\t} else if (c == '[') {\n-\t\t\t// Array\n-\t\t\tif (*ptr == '#') {\n-\t\t\t\t// Index from back of array\n-\t\t\t\tptr++;\n-\t\t\t\tif (*ptr == ']') {\n-\t\t\t\t\tptr++;\n-\t\t\t\t\tcontinue;\n+\t\t\tif (array_index == DConstants::INVALID_INDEX) {\n+\t\t\t\tpath_type = JSONPathType::WILDCARD;\n+\t\t\t}\n+\t\t\tbreak;\n+\t\t}\n+\t\tdefault:\n+\t\t\tThrowPathError(ptr, end, binder);\n+\t\t}\n+\t}\n+\treturn path_type;\n+}\n+\n+yyjson_val *JSONCommon::GetPath(yyjson_val *val, const char *ptr, const idx_t &len) {\n+\t// Path has been validated at this point\n+\tconst char *const end = ptr + len;\n+\tptr++; // Skip past '$'\n+\twhile (val != nullptr && ptr != end) {\n+\t\tconst auto &c = *ptr++;\n+\t\tD_ASSERT(ptr != end);\n+\t\tswitch (c) {\n+\t\tcase '.': { // Object field\n+\t\t\tif (!unsafe_yyjson_is_obj(val)) {\n+\t\t\t\treturn nullptr;\n+\t\t\t}\n+\t\t\tconst char *key_ptr;\n+\t\t\tidx_t key_len;\n+#ifdef DEBUG\n+\t\t\tbool success =\n+#endif\n+\t\t\t    ReadKey(ptr, end, key_ptr, key_len);\n+#ifdef DEBUG\n+\t\t\tD_ASSERT(success);\n+#endif\n+\t\t\tval = yyjson_obj_getn(val, key_ptr, key_len);\n+\t\t\tbreak;\n+\t\t}\n+\t\tcase '[': { // Array index\n+\t\t\tif (!unsafe_yyjson_is_arr(val)) {\n+\t\t\t\treturn nullptr;\n+\t\t\t}\n+\t\t\tidx_t array_index;\n+\t\t\tbool from_back;\n+#ifdef DEBUG\n+\t\t\tbool success =\n+#endif\n+\t\t\t    ReadArrayIndex(ptr, end, array_index, from_back);\n+#ifdef DEBUG\n+\t\t\tD_ASSERT(success);\n+#endif\n+\t\t\tif (from_back && array_index != 0) {\n+\t\t\t\tarray_index = unsafe_yyjson_get_len(val) - array_index;\n+\t\t\t}\n+\t\t\tval = yyjson_arr_get(val, array_index);\n+\t\t\tbreak;\n+\t\t}\n+\t\tdefault: // LCOV_EXCL_START\n+\t\t\tthrow InternalException(\n+\t\t\t    \"Invalid JSON Path encountered in JSONCommon::GetPath, call JSONCommon::ValidatePath first!\");\n+\t\t} // LCOV_EXCL_STOP\n+\t}\n+\treturn val;\n+}\n+\n+void GetWildcardPathInternal(yyjson_val *val, const char *ptr, const char *const end, vector<yyjson_val *> &vals) {\n+\twhile (val != nullptr && ptr != end) {\n+\t\tconst auto &c = *ptr++;\n+\t\tD_ASSERT(ptr != end);\n+\t\tswitch (c) {\n+\t\tcase '.': { // Object field\n+\t\t\tif (!unsafe_yyjson_is_obj(val)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\tconst char *key_ptr;\n+\t\t\tidx_t key_len;\n+#ifdef DEBUG\n+\t\t\tbool success =\n+#endif\n+\t\t\t    ReadKey(ptr, end, key_ptr, key_len);\n+#ifdef DEBUG\n+\t\t\tD_ASSERT(success);\n+#endif\n+\t\t\tif (key_len == DConstants::INVALID_INDEX) { // Wildcard\n+\t\t\t\tsize_t idx, max;\n+\t\t\t\tyyjson_val *key, *obj_val;\n+\t\t\t\tyyjson_obj_foreach(val, idx, max, key, obj_val) {\n+\t\t\t\t\tGetWildcardPathInternal(obj_val, ptr, end, vals);\n \t\t\t\t}\n-\t\t\t\tif (*ptr != '-') {\n-\t\t\t\t\tThrowPathError(ptr, end);\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\tval = yyjson_obj_getn(val, key_ptr, key_len);\n+\t\t\tbreak;\n+\t\t}\n+\t\tcase '[': { // Array index\n+\t\t\tif (!unsafe_yyjson_is_arr(val)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\tidx_t array_index;\n+\t\t\tbool from_back;\n+#ifdef DEBUG\n+\t\t\tbool success =\n+#endif\n+\t\t\t    ReadArrayIndex(ptr, end, array_index, from_back);\n+#ifdef DEBUG\n+\t\t\tD_ASSERT(success);\n+#endif\n+\n+\t\t\tif (array_index == DConstants::INVALID_INDEX) { // Wildcard\n+\t\t\t\tsize_t idx, max;\n+\t\t\t\tyyjson_val *arr_val;\n+\t\t\t\tyyjson_arr_foreach(val, idx, max, arr_val) {\n+\t\t\t\t\tGetWildcardPathInternal(arr_val, ptr, end, vals);\n \t\t\t\t}\n-\t\t\t\t// Skip past '-'\n-\t\t\t\tptr++;\n+\t\t\t\treturn;\n \t\t\t}\n-\t\t\tidx_t idx;\n-\t\t\tauto idx_len = ReadIndex(ptr, end, idx);\n-\t\t\tif (idx_len == 0) {\n-\t\t\t\tThrowPathError(ptr, end);\n+\t\t\tif (from_back && array_index != 0) {\n+\t\t\t\tarray_index = unsafe_yyjson_get_len(val) - array_index;\n \t\t\t}\n-\t\t\tptr += idx_len;\n-\t\t\t// Skip past closing ']'\n-\t\t\tptr++;\n-\t\t} else {\n-\t\t\tThrowPathError(ptr, end);\n+\t\t\tval = yyjson_arr_get(val, array_index);\n+\t\t\tbreak;\n \t\t}\n+\t\tdefault: // LCOV_EXCL_START\n+\t\t\tthrow InternalException(\n+\t\t\t    \"Invalid JSON Path encountered in GetWildcardPathInternal, call JSONCommon::ValidatePath first!\");\n+\t\t} // LCOV_EXCL_STOP\n \t}\n+\tif (val != nullptr) {\n+\t\tvals.emplace_back(val);\n+\t}\n+}\n+\n+void JSONCommon::GetWildcardPath(yyjson_val *val, const char *ptr, const idx_t &len, vector<yyjson_val *> &vals) {\n+\t// Path has been validated at this point\n+\tconst char *const end = ptr + len;\n+\tptr++; // Skip past '$'\n+\tGetWildcardPathInternal(val, ptr, end, vals);\n }\n \n } // namespace duckdb\ndiff --git a/extension/json/json_functions.cpp b/extension/json/json_functions.cpp\nindex 6630fb34663e..1303fd63004f 100644\n--- a/extension/json/json_functions.cpp\n+++ b/extension/json/json_functions.cpp\n@@ -12,24 +12,23 @@\n \n namespace duckdb {\n \n-static void CheckPath(const Value &path_val, string &path, size_t &len) {\n-\tstring error;\n-\tValue path_str_val;\n+using JSONPathType = JSONCommon::JSONPathType;\n+\n+static JSONPathType CheckPath(const Value &path_val, string &path, size_t &len) {\n \tif (path_val.IsNull()) {\n \t\tthrow InvalidInputException(\"JSON path cannot be NULL\");\n \t}\n-\tif (!path_val.DefaultTryCastAs(LogicalType::VARCHAR, path_str_val, &error)) {\n-\t\tthrow InvalidInputException(error);\n-\t}\n+\tconst auto path_str_val = path_val.DefaultCastAs(LogicalType::VARCHAR);\n \tauto path_str = path_str_val.GetValueUnsafe<string_t>();\n \tlen = path_str.GetSize();\n \tauto ptr = path_str.GetData();\n \t// Empty strings and invalid $ paths yield an error\n \tif (len == 0) {\n-\t\tthrow InvalidInputException(\"Empty JSON path\");\n+\t\tthrow BinderException(\"Empty JSON path\");\n \t}\n+\tJSONPathType path_type = JSONPathType::REGULAR;\n \tif (*ptr == '$') {\n-\t\tJSONCommon::ValidatePathDollar(ptr, len);\n+\t\tpath_type = JSONCommon::ValidatePath(ptr, len, true);\n \t}\n \t// Copy over string to the bind data\n \tif (*ptr == '/' || *ptr == '$') {\n@@ -38,19 +37,20 @@ static void CheckPath(const Value &path_val, string &path, size_t &len) {\n \t\tpath = \"/\" + string(ptr, len);\n \t\tlen++;\n \t}\n+\treturn path_type;\n }\n \n-JSONReadFunctionData::JSONReadFunctionData(bool constant, string path_p, idx_t len)\n-    : constant(constant), path(std::move(path_p)), ptr(path.c_str()), len(len) {\n+JSONReadFunctionData::JSONReadFunctionData(bool constant, string path_p, idx_t len, JSONPathType path_type_p)\n+    : constant(constant), path(std::move(path_p)), path_type(path_type_p), ptr(path.c_str()), len(len) {\n }\n \n unique_ptr<FunctionData> JSONReadFunctionData::Copy() const {\n-\treturn make_uniq<JSONReadFunctionData>(constant, path, len);\n+\treturn make_uniq<JSONReadFunctionData>(constant, path, len, path_type);\n }\n \n bool JSONReadFunctionData::Equals(const FunctionData &other_p) const {\n \tauto &other = (const JSONReadFunctionData &)other_p;\n-\treturn constant == other.constant && path == other.path && len == other.len;\n+\treturn constant == other.constant && path == other.path && len == other.len && path_type == other.path_type;\n }\n \n unique_ptr<FunctionData> JSONReadFunctionData::Bind(ClientContext &context, ScalarFunction &bound_function,\n@@ -59,12 +59,16 @@ unique_ptr<FunctionData> JSONReadFunctionData::Bind(ClientContext &context, Scal\n \tbool constant = false;\n \tstring path = \"\";\n \tsize_t len = 0;\n+\tJSONPathType path_type = JSONPathType::REGULAR;\n \tif (arguments[1]->return_type.id() != LogicalTypeId::SQLNULL && arguments[1]->IsFoldable()) {\n \t\tconstant = true;\n \t\tconst auto path_val = ExpressionExecutor::EvaluateScalar(context, *arguments[1]);\n-\t\tCheckPath(path_val, path, len);\n+\t\tpath_type = CheckPath(path_val, path, len);\n+\t}\n+\tif (path_type == JSONCommon::JSONPathType::WILDCARD) {\n+\t\tbound_function.return_type = LogicalType::LIST(bound_function.return_type);\n \t}\n-\treturn make_uniq<JSONReadFunctionData>(constant, std::move(path), len);\n+\treturn make_uniq<JSONReadFunctionData>(constant, std::move(path), len, path_type);\n }\n \n JSONReadManyFunctionData::JSONReadManyFunctionData(vector<string> paths_p, vector<size_t> lens_p)\n@@ -90,10 +94,7 @@ unique_ptr<FunctionData> JSONReadManyFunctionData::Bind(ClientContext &context,\n \t\tthrow ParameterNotResolvedException();\n \t}\n \tif (!arguments[1]->IsFoldable()) {\n-\t\tthrow InvalidInputException(\"List of paths must be constant\");\n-\t}\n-\tif (arguments[1]->return_type.id() == LogicalTypeId::SQLNULL) {\n-\t\treturn make_uniq<JSONReadManyFunctionData>(vector<string>(), vector<size_t>());\n+\t\tthrow BinderException(\"List of paths must be constant\");\n \t}\n \n \tvector<string> paths;\n@@ -102,7 +103,9 @@ unique_ptr<FunctionData> JSONReadManyFunctionData::Bind(ClientContext &context,\n \tfor (auto &path_val : ListValue::GetChildren(paths_val)) {\n \t\tpaths.emplace_back(\"\");\n \t\tlens.push_back(0);\n-\t\tCheckPath(path_val, paths.back(), lens.back());\n+\t\tif (CheckPath(path_val, paths.back(), lens.back()) == JSONPathType::WILDCARD) {\n+\t\t\tthrow BinderException(\"Cannot have wildcards in JSON path when supplying multiple paths\");\n+\t\t}\n \t}\n \n \treturn make_uniq<JSONReadManyFunctionData>(std::move(paths), std::move(lens));\n@@ -120,11 +123,8 @@ unique_ptr<FunctionLocalState> JSONFunctionLocalState::Init(ExpressionState &sta\n }\n \n unique_ptr<FunctionLocalState> JSONFunctionLocalState::InitCastLocalState(CastLocalStateParameters &parameters) {\n-\tif (parameters.context) {\n-\t\treturn make_uniq<JSONFunctionLocalState>(*parameters.context);\n-\t} else {\n-\t\treturn make_uniq<JSONFunctionLocalState>(Allocator::DefaultAllocator());\n-\t}\n+\treturn parameters.context ? make_uniq<JSONFunctionLocalState>(*parameters.context)\n+\t                          : make_uniq<JSONFunctionLocalState>(Allocator::DefaultAllocator());\n }\n \n JSONFunctionLocalState &JSONFunctionLocalState::ResetAndGet(ExpressionState &state) {\ndiff --git a/extension/json/json_functions/json_structure.cpp b/extension/json/json_functions/json_structure.cpp\nindex d95024001f73..83e571c4e46c 100644\n--- a/extension/json/json_functions/json_structure.cpp\n+++ b/extension/json/json_functions/json_structure.cpp\n@@ -395,7 +395,7 @@ static inline void ExtractStructureObject(yyjson_val *obj, JSONStructureNode &no\n \n static inline void ExtractStructureVal(yyjson_val *val, JSONStructureNode &node) {\n \tD_ASSERT(!yyjson_is_arr(val) && !yyjson_is_obj(val));\n-\tnode.GetOrCreateDescription(JSONCommon::ValTypeToLogicalTypeId<yyjson_val>(val));\n+\tnode.GetOrCreateDescription(JSONCommon::ValTypeToLogicalTypeId(val));\n }\n \n void JSONStructure::ExtractStructure(yyjson_val *val, JSONStructureNode &node) {\ndiff --git a/extension/json/json_functions/json_transform.cpp b/extension/json/json_functions/json_transform.cpp\nindex 1225964796e4..4d93102b059c 100644\n--- a/extension/json/json_functions/json_transform.cpp\n+++ b/extension/json/json_functions/json_transform.cpp\n@@ -41,7 +41,7 @@ static LogicalType StructureStringToType(yyjson_val *val, ClientContext &context\n \n static LogicalType StructureStringToTypeArray(yyjson_val *arr, ClientContext &context) {\n \tif (yyjson_arr_size(arr) != 1) {\n-\t\tthrow InvalidInputException(\"Too many values in array of JSON structure\");\n+\t\tthrow BinderException(\"Too many values in array of JSON structure\");\n \t}\n \treturn LogicalType::LIST(StructureStringToType(yyjson_arr_get_first(arr), context));\n }\n@@ -62,7 +62,7 @@ static LogicalType StructureToTypeObject(yyjson_val *obj, ClientContext &context\n \t}\n \tD_ASSERT(yyjson_obj_size(obj) == names.size());\n \tif (child_types.empty()) {\n-\t\tthrow InvalidInputException(\"Empty object in JSON structure\");\n+\t\tthrow BinderException(\"Empty object in JSON structure\");\n \t}\n \treturn LogicalType::STRUCT(child_types);\n }\n@@ -76,7 +76,7 @@ static LogicalType StructureStringToType(yyjson_val *val, ClientContext &context\n \tcase YYJSON_TYPE_STR | YYJSON_SUBTYPE_NONE:\n \t\treturn TransformStringToLogicalType(unsafe_yyjson_get_str(val), context);\n \tdefault:\n-\t\tthrow InvalidInputException(\"invalid JSON structure\");\n+\t\tthrow BinderException(\"invalid JSON structure\");\n \t}\n }\n \n@@ -89,20 +89,15 @@ static unique_ptr<FunctionData> JSONTransformBind(ClientContext &context, Scalar\n \tif (arguments[1]->return_type == LogicalTypeId::SQLNULL) {\n \t\tbound_function.return_type = LogicalTypeId::SQLNULL;\n \t} else if (!arguments[1]->IsFoldable()) {\n-\t\tthrow InvalidInputException(\"JSON structure must be a constant!\");\n+\t\tthrow BinderException(\"JSON structure must be a constant!\");\n \t} else {\n \t\tauto structure_val = ExpressionExecutor::EvaluateScalar(context, *arguments[1]);\n \t\tif (!structure_val.DefaultTryCastAs(JSONCommon::JSONType())) {\n-\t\t\tthrow InvalidInputException(\"Cannot cast JSON structure to string\");\n+\t\t\tthrow BinderException(\"Cannot cast JSON structure to string\");\n \t\t}\n \t\tauto structure_string = structure_val.GetValueUnsafe<string_t>();\n \t\tJSONAllocator json_allocator(Allocator::DefaultAllocator());\n-\t\tyyjson_read_err err;\n-\t\tauto doc =\n-\t\t    JSONCommon::ReadDocumentUnsafe(structure_string, JSONCommon::READ_FLAG, json_allocator.GetYYAlc(), &err);\n-\t\tif (err.code != YYJSON_READ_SUCCESS) {\n-\t\t\tJSONCommon::ThrowParseError(structure_string.GetData(), structure_string.GetSize(), err);\n-\t\t}\n+\t\tauto doc = JSONCommon::ReadDocument(structure_string, JSONCommon::READ_FLAG, json_allocator.GetYYAlc());\n \t\tbound_function.return_type = StructureStringToType(doc->root, context);\n \t}\n \treturn make_uniq<VariableReturnBindData>(bound_function.return_type);\n@@ -114,10 +109,9 @@ static inline string_t GetString(yyjson_val *val) {\n \n template <class T, class OP = TryCast>\n static inline bool GetValueNumerical(yyjson_val *val, T &result, JSONTransformOptions &options) {\n+\tD_ASSERT(unsafe_yyjson_get_tag(val) != (YYJSON_TYPE_NULL | YYJSON_SUBTYPE_NONE));\n \tbool success;\n \tswitch (unsafe_yyjson_get_tag(val)) {\n-\tcase YYJSON_TYPE_NULL | YYJSON_SUBTYPE_NONE:\n-\t\treturn false;\n \tcase YYJSON_TYPE_STR | YYJSON_SUBTYPE_NONE:\n \t\tsuccess = OP::template Operation<string_t, T>(GetString(val), result, options.strict_cast);\n \t\tbreak;\n@@ -150,10 +144,9 @@ static inline bool GetValueNumerical(yyjson_val *val, T &result, JSONTransformOp\n \n template <class T, class OP = TryCastToDecimal>\n static inline bool GetValueDecimal(yyjson_val *val, T &result, uint8_t w, uint8_t s, JSONTransformOptions &options) {\n+\tD_ASSERT(unsafe_yyjson_get_tag(val) != (YYJSON_TYPE_NULL | YYJSON_SUBTYPE_NONE));\n \tbool success;\n \tswitch (unsafe_yyjson_get_tag(val)) {\n-\tcase YYJSON_TYPE_NULL | YYJSON_SUBTYPE_NONE:\n-\t\treturn false;\n \tcase YYJSON_TYPE_STR | YYJSON_SUBTYPE_NONE:\n \t\tsuccess = OP::template Operation<string_t, T>(GetString(val), result, &options.error_message, w, s);\n \t\tbreak;\n@@ -186,9 +179,8 @@ static inline bool GetValueDecimal(yyjson_val *val, T &result, uint8_t w, uint8_\n }\n \n static inline bool GetValueString(yyjson_val *val, yyjson_alc *alc, string_t &result, Vector &vector) {\n+\tD_ASSERT(unsafe_yyjson_get_tag(val) != (YYJSON_TYPE_NULL | YYJSON_SUBTYPE_NONE));\n \tswitch (unsafe_yyjson_get_tag(val)) {\n-\tcase YYJSON_TYPE_NULL | YYJSON_SUBTYPE_NONE:\n-\t\treturn true;\n \tcase YYJSON_TYPE_STR | YYJSON_SUBTYPE_NONE:\n \t\tresult = string_t(unsafe_yyjson_get_str(val), unsafe_yyjson_get_len(val));\n \t\treturn true;\n@@ -318,26 +310,14 @@ static bool TransformStringWithFormat(Vector &string_vector, StrpTimeFormat &for\n \tauto &target_validity = FlatVector::Validity(result);\n \n \tbool success = true;\n-\tif (source_validity.AllValid()) {\n-\t\tfor (idx_t i = 0; i < count; i++) {\n-\t\t\tif (!OP::template Operation<T>(format, source_strings[i], target_vals[i], options.error_message)) {\n-\t\t\t\ttarget_validity.SetInvalid(i);\n-\t\t\t\tif (success && options.strict_cast) {\n-\t\t\t\t\toptions.object_index = i;\n-\t\t\t\t\tsuccess = false;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t} else {\n-\t\tfor (idx_t i = 0; i < count; i++) {\n-\t\t\tif (!source_validity.RowIsValid(i)) {\n-\t\t\t\ttarget_validity.SetInvalid(i);\n-\t\t\t} else if (!OP::template Operation<T>(format, source_strings[i], target_vals[i], options.error_message)) {\n-\t\t\t\ttarget_validity.SetInvalid(i);\n-\t\t\t\tif (success && options.strict_cast) {\n-\t\t\t\t\toptions.object_index = i;\n-\t\t\t\t\tsuccess = false;\n-\t\t\t\t}\n+\tfor (idx_t i = 0; i < count; i++) {\n+\t\tif (!source_validity.RowIsValid(i)) {\n+\t\t\ttarget_validity.SetInvalid(i);\n+\t\t} else if (!OP::template Operation<T>(format, source_strings[i], target_vals[i], options.error_message)) {\n+\t\t\ttarget_validity.SetInvalid(i);\n+\t\t\tif (success && options.strict_cast) {\n+\t\t\t\toptions.object_index = i;\n+\t\t\t\tsuccess = false;\n \t\t\t}\n \t\t}\n \t}\ndiff --git a/extension/json/json_functions/json_type.cpp b/extension/json/json_functions/json_type.cpp\nindex 2ab3326294c5..cc1d3ccd5350 100644\n--- a/extension/json/json_functions/json_type.cpp\n+++ b/extension/json/json_functions/json_type.cpp\n@@ -3,7 +3,7 @@\n namespace duckdb {\n \n static inline string_t GetType(yyjson_val *val, yyjson_alc *alc, Vector &result) {\n-\treturn JSONCommon::ValTypeToStringT<yyjson_val>(val);\n+\treturn JSONCommon::ValTypeToStringT(val);\n }\n \n static void UnaryTypeFunction(DataChunk &args, ExpressionState &state, Vector &result) {\ndiff --git a/extension/parquet/column_reader.cpp b/extension/parquet/column_reader.cpp\nindex f543ef0f02ed..3fba0ec58166 100644\n--- a/extension/parquet/column_reader.cpp\n+++ b/extension/parquet/column_reader.cpp\n@@ -1,27 +1,25 @@\n #include \"column_reader.hpp\"\n-#include \"parquet_timestamp.hpp\"\n-#include \"utf8proc_wrapper.hpp\"\n-#include \"parquet_reader.hpp\"\n \n #include \"boolean_column_reader.hpp\"\n-#include \"cast_column_reader.hpp\"\n-#include \"row_number_column_reader.hpp\"\n #include \"callback_column_reader.hpp\"\n-#include \"parquet_decimal_utils.hpp\"\n+#include \"cast_column_reader.hpp\"\n+#include \"duckdb.hpp\"\n #include \"list_column_reader.hpp\"\n+#include \"miniz_wrapper.hpp\"\n+#include \"parquet_decimal_utils.hpp\"\n+#include \"parquet_reader.hpp\"\n+#include \"parquet_timestamp.hpp\"\n+#include \"row_number_column_reader.hpp\"\n+#include \"snappy.h\"\n #include \"string_column_reader.hpp\"\n #include \"struct_column_reader.hpp\"\n #include \"templated_column_reader.hpp\"\n-\n-#include \"snappy.h\"\n-#include \"miniz_wrapper.hpp\"\n+#include \"utf8proc_wrapper.hpp\"\n #include \"zstd.h\"\n-#include <iostream>\n \n-#include \"duckdb.hpp\"\n #ifndef DUCKDB_AMALGAMATION\n-#include \"duckdb/common/types/blob.hpp\"\n #include \"duckdb/common/types/bit.hpp\"\n+#include \"duckdb/common/types/blob.hpp\"\n #include \"duckdb/common/types/chunk_collection.hpp\"\n #endif\n \n@@ -614,7 +612,7 @@ uint32_t StringColumnReader::VerifyString(const char *str_data, uint32_t str_len\n \n void StringColumnReader::Dictionary(shared_ptr<ResizeableBuffer> data, idx_t num_entries) {\n \tdict = std::move(data);\n-\tdict_strings = duckdb::unique_ptr<string_t[]>(new string_t[num_entries]);\n+\tdict_strings = unique_ptr<string_t[]>(new string_t[num_entries]);\n \tfor (idx_t dict_idx = 0; dict_idx < num_entries; dict_idx++) {\n \t\tuint32_t str_len;\n \t\tif (fixed_width_string_length == 0) {\n@@ -873,7 +871,7 @@ idx_t ListColumnReader::Read(uint64_t num_values, parquet_filter_t &filter, data\n \n ListColumnReader::ListColumnReader(ParquetReader &reader, LogicalType type_p, const SchemaElement &schema_p,\n                                    idx_t schema_idx_p, idx_t max_define_p, idx_t max_repeat_p,\n-                                   duckdb::unique_ptr<ColumnReader> child_column_reader_p)\n+                                   unique_ptr<ColumnReader> child_column_reader_p)\n     : ColumnReader(reader, std::move(type_p), schema_p, schema_idx_p, max_define_p, max_repeat_p),\n       child_column_reader(std::move(child_column_reader_p)),\n       read_cache(reader.allocator, ListType::GetChildType(Type())), read_vector(read_cache), overflow_child_count(0) {\n@@ -889,8 +887,8 @@ ListColumnReader::ListColumnReader(ParquetReader &reader, LogicalType type_p, co\n void ListColumnReader::ApplyPendingSkips(idx_t num_values) {\n \tpending_skips -= num_values;\n \n-\tauto define_out = duckdb::unique_ptr<uint8_t[]>(new uint8_t[num_values]);\n-\tauto repeat_out = duckdb::unique_ptr<uint8_t[]>(new uint8_t[num_values]);\n+\tauto define_out = unique_ptr<uint8_t[]>(new uint8_t[num_values]);\n+\tauto repeat_out = unique_ptr<uint8_t[]>(new uint8_t[num_values]);\n \n \tidx_t remaining = num_values;\n \tidx_t read = 0;\n@@ -953,7 +951,7 @@ idx_t RowNumberColumnReader::Read(uint64_t num_values, parquet_filter_t &filter,\n //===--------------------------------------------------------------------===//\n // Cast Column Reader\n //===--------------------------------------------------------------------===//\n-CastColumnReader::CastColumnReader(duckdb::unique_ptr<ColumnReader> child_reader_p, LogicalType target_type_p)\n+CastColumnReader::CastColumnReader(unique_ptr<ColumnReader> child_reader_p, LogicalType target_type_p)\n     : ColumnReader(child_reader_p->Reader(), std::move(target_type_p), child_reader_p->Schema(),\n                    child_reader_p->FileIdx(), child_reader_p->MaxDefine(), child_reader_p->MaxRepeat()),\n       child_reader(std::move(child_reader_p)) {\n@@ -1005,7 +1003,7 @@ idx_t CastColumnReader::GroupRowsAvailable() {\n //===--------------------------------------------------------------------===//\n StructColumnReader::StructColumnReader(ParquetReader &reader, LogicalType type_p, const SchemaElement &schema_p,\n                                        idx_t schema_idx_p, idx_t max_define_p, idx_t max_repeat_p,\n-                                       vector<duckdb::unique_ptr<ColumnReader>> child_readers_p)\n+                                       vector<unique_ptr<ColumnReader>> child_readers_p)\n     : ColumnReader(reader, std::move(type_p), schema_p, schema_idx_p, max_define_p, max_repeat_p),\n       child_readers(std::move(child_readers_p)) {\n \tD_ASSERT(type.InternalType() == PhysicalType::STRUCT);\n@@ -1155,9 +1153,9 @@ class DecimalColumnReader\n };\n \n template <bool FIXED_LENGTH>\n-static duckdb::unique_ptr<ColumnReader> CreateDecimalReaderInternal(ParquetReader &reader, const LogicalType &type_p,\n-                                                                    const SchemaElement &schema_p, idx_t file_idx_p,\n-                                                                    idx_t max_define, idx_t max_repeat) {\n+static unique_ptr<ColumnReader> CreateDecimalReaderInternal(ParquetReader &reader, const LogicalType &type_p,\n+                                                            const SchemaElement &schema_p, idx_t file_idx_p,\n+                                                            idx_t max_define, idx_t max_repeat) {\n \tswitch (type_p.InternalType()) {\n \tcase PhysicalType::INT16:\n \t\treturn make_uniq<DecimalColumnReader<int16_t, FIXED_LENGTH>>(reader, type_p, schema_p, file_idx_p, max_define,\ndiff --git a/extension/parquet/column_writer.cpp b/extension/parquet/column_writer.cpp\nindex 405969c56f37..2832117c9304 100644\n--- a/extension/parquet/column_writer.cpp\n+++ b/extension/parquet/column_writer.cpp\n@@ -184,7 +184,7 @@ ColumnWriterState::~ColumnWriterState() {\n }\n \n void ColumnWriter::CompressPage(BufferedSerializer &temp_writer, size_t &compressed_size, data_ptr_t &compressed_data,\n-                                duckdb::unique_ptr<data_t[]> &compressed_buf) {\n+                                unique_ptr<data_t[]> &compressed_buf) {\n \tswitch (writer.GetCodec()) {\n \tcase CompressionCodec::UNCOMPRESSED:\n \t\tcompressed_size = temp_writer.blob.size;\n@@ -192,7 +192,7 @@ void ColumnWriter::CompressPage(BufferedSerializer &temp_writer, size_t &compres\n \t\tbreak;\n \tcase CompressionCodec::SNAPPY: {\n \t\tcompressed_size = duckdb_snappy::MaxCompressedLength(temp_writer.blob.size);\n-\t\tcompressed_buf = duckdb::unique_ptr<data_t[]>(new data_t[compressed_size]);\n+\t\tcompressed_buf = unique_ptr<data_t[]>(new data_t[compressed_size]);\n \t\tduckdb_snappy::RawCompress(const_char_ptr_cast(temp_writer.blob.data.get()), temp_writer.blob.size,\n \t\t                           char_ptr_cast(compressed_buf.get()), &compressed_size);\n \t\tcompressed_data = compressed_buf.get();\n@@ -202,7 +202,7 @@ void ColumnWriter::CompressPage(BufferedSerializer &temp_writer, size_t &compres\n \tcase CompressionCodec::GZIP: {\n \t\tMiniZStream s;\n \t\tcompressed_size = s.MaxCompressedLength(temp_writer.blob.size);\n-\t\tcompressed_buf = duckdb::unique_ptr<data_t[]>(new data_t[compressed_size]);\n+\t\tcompressed_buf = unique_ptr<data_t[]>(new data_t[compressed_size]);\n \t\ts.Compress(const_char_ptr_cast(temp_writer.blob.data.get()), temp_writer.blob.size,\n \t\t           char_ptr_cast(compressed_buf.get()), &compressed_size);\n \t\tcompressed_data = compressed_buf.get();\n@@ -210,7 +210,7 @@ void ColumnWriter::CompressPage(BufferedSerializer &temp_writer, size_t &compres\n \t}\n \tcase CompressionCodec::ZSTD: {\n \t\tcompressed_size = duckdb_zstd::ZSTD_compressBound(temp_writer.blob.size);\n-\t\tcompressed_buf = duckdb::unique_ptr<data_t[]>(new data_t[compressed_size]);\n+\t\tcompressed_buf = unique_ptr<data_t[]>(new data_t[compressed_size]);\n \t\tcompressed_size = duckdb_zstd::ZSTD_compress((void *)compressed_buf.get(), compressed_size,\n \t\t                                             (const void *)temp_writer.blob.data.get(), temp_writer.blob.size,\n \t\t                                             ZSTD_CLEVEL_DEFAULT);\n@@ -303,14 +303,14 @@ struct PageInformation {\n \n struct PageWriteInformation {\n \tPageHeader page_header;\n-\tduckdb::unique_ptr<BufferedSerializer> temp_writer;\n-\tduckdb::unique_ptr<ColumnWriterPageState> page_state;\n+\tunique_ptr<BufferedSerializer> temp_writer;\n+\tunique_ptr<ColumnWriterPageState> page_state;\n \tidx_t write_page_idx = 0;\n \tidx_t write_count = 0;\n \tidx_t max_write_count = 0;\n \tsize_t compressed_size;\n \tdata_ptr_t compressed_data;\n-\tduckdb::unique_ptr<data_t[]> compressed_buf;\n+\tunique_ptr<data_t[]> compressed_buf;\n };\n \n class BasicColumnWriterState : public ColumnWriterState {\n@@ -325,7 +325,7 @@ class BasicColumnWriterState : public ColumnWriterState {\n \tidx_t col_idx;\n \tvector<PageInformation> page_info;\n \tvector<PageWriteInformation> write_info;\n-\tduckdb::unique_ptr<ColumnWriterStatistics> stats_state;\n+\tunique_ptr<ColumnWriterStatistics> stats_state;\n \tidx_t current_page = 0;\n };\n \n@@ -355,8 +355,7 @@ class BasicColumnWriter : public ColumnWriter {\n \tstatic constexpr const idx_t STRING_LENGTH_SIZE = sizeof(uint32_t);\n \n public:\n-\tduckdb::unique_ptr<ColumnWriterState> InitializeWriteState(duckdb_parquet::format::RowGroup &row_group,\n-\t                                                           Allocator &allocator) override;\n+\tunique_ptr<ColumnWriterState> InitializeWriteState(duckdb_parquet::format::RowGroup &row_group) override;\n \tvoid Prepare(ColumnWriterState &state, ColumnWriterState *parent, Vector &vector, idx_t count) override;\n \tvoid BeginWrite(ColumnWriterState &state) override;\n \tvoid Write(ColumnWriterState &state, Vector &vector, idx_t count) override;\n@@ -372,10 +371,10 @@ class BasicColumnWriter : public ColumnWriter {\n \tvoid FlushPage(BasicColumnWriterState &state);\n \n \t//! Initializes the state used to track statistics during writing. Only used for scalar types.\n-\tvirtual duckdb::unique_ptr<ColumnWriterStatistics> InitializeStatsState();\n+\tvirtual unique_ptr<ColumnWriterStatistics> InitializeStatsState();\n \n \t//! Initialize the writer for a specific page. Only used for scalar types.\n-\tvirtual duckdb::unique_ptr<ColumnWriterPageState> InitializePageState(BasicColumnWriterState &state);\n+\tvirtual unique_ptr<ColumnWriterPageState> InitializePageState(BasicColumnWriterState &state);\n \n \t//! Flushes the writer for a specific page. Only used for scalar types.\n \tvirtual void FlushPageState(Serializer &temp_writer, ColumnWriterPageState *state);\n@@ -391,16 +390,14 @@ class BasicColumnWriter : public ColumnWriter {\n \t}\n \t//! The number of elements in the dictionary\n \tvirtual idx_t DictionarySize(BasicColumnWriterState &state_p);\n-\tvoid WriteDictionary(BasicColumnWriterState &state, duckdb::unique_ptr<BufferedSerializer> temp_writer,\n-\t                     idx_t row_count);\n+\tvoid WriteDictionary(BasicColumnWriterState &state, unique_ptr<BufferedSerializer> temp_writer, idx_t row_count);\n \tvirtual void FlushDictionary(BasicColumnWriterState &state, ColumnWriterStatistics *stats);\n \n \tvoid SetParquetStatistics(BasicColumnWriterState &state, duckdb_parquet::format::ColumnChunk &column);\n \tvoid RegisterToRowGroup(duckdb_parquet::format::RowGroup &row_group);\n };\n \n-unique_ptr<ColumnWriterState> BasicColumnWriter::InitializeWriteState(duckdb_parquet::format::RowGroup &row_group,\n-                                                                      Allocator &allocator) {\n+unique_ptr<ColumnWriterState> BasicColumnWriter::InitializeWriteState(duckdb_parquet::format::RowGroup &row_group) {\n \tauto result = make_uniq<BasicColumnWriterState>(row_group, row_group.columns.size());\n \tRegisterToRowGroup(row_group);\n \treturn std::move(result);\n@@ -698,8 +695,8 @@ idx_t BasicColumnWriter::DictionarySize(BasicColumnWriterState &state) {\n \tthrow InternalException(\"This page does not have a dictionary\");\n }\n \n-void BasicColumnWriter::WriteDictionary(BasicColumnWriterState &state,\n-                                        duckdb::unique_ptr<BufferedSerializer> temp_writer, idx_t row_count) {\n+void BasicColumnWriter::WriteDictionary(BasicColumnWriterState &state, unique_ptr<BufferedSerializer> temp_writer,\n+                                        idx_t row_count) {\n \tD_ASSERT(temp_writer);\n \tD_ASSERT(temp_writer->blob.size > 0);\n \n@@ -761,7 +758,7 @@ class NumericStatisticsState : public ColumnWriterStatistics {\n \n struct BaseParquetOperator {\n \ttemplate <class SRC, class TGT>\n-\tstatic duckdb::unique_ptr<ColumnWriterStatistics> InitializeStats() {\n+\tstatic unique_ptr<ColumnWriterStatistics> InitializeStats() {\n \t\treturn make_uniq<NumericStatisticsState<SRC, TGT, BaseParquetOperator>>();\n \t}\n \n@@ -805,7 +802,7 @@ struct ParquetHugeintOperator {\n \t}\n \n \ttemplate <class SRC, class TGT>\n-\tstatic duckdb::unique_ptr<ColumnWriterStatistics> InitializeStats() {\n+\tstatic unique_ptr<ColumnWriterStatistics> InitializeStats() {\n \t\treturn make_uniq<ColumnWriterStatistics>();\n \t}\n \n@@ -837,7 +834,7 @@ class StandardColumnWriter : public BasicColumnWriter {\n \t~StandardColumnWriter() override = default;\n \n public:\n-\tduckdb::unique_ptr<ColumnWriterStatistics> InitializeStatsState() override {\n+\tunique_ptr<ColumnWriterStatistics> InitializeStatsState() override {\n \t\treturn OP::template InitializeStats<SRC, TGT>();\n \t}\n \n@@ -897,7 +894,7 @@ class BooleanColumnWriter : public BasicColumnWriter {\n \t~BooleanColumnWriter() override = default;\n \n public:\n-\tduckdb::unique_ptr<ColumnWriterStatistics> InitializeStatsState() override {\n+\tunique_ptr<ColumnWriterStatistics> InitializeStatsState() override {\n \t\treturn make_uniq<BooleanStatisticsState>();\n \t}\n \n@@ -928,7 +925,7 @@ class BooleanColumnWriter : public BasicColumnWriter {\n \t\t}\n \t}\n \n-\tduckdb::unique_ptr<ColumnWriterPageState> InitializePageState(BasicColumnWriterState &state) override {\n+\tunique_ptr<ColumnWriterPageState> InitializePageState(BasicColumnWriterState &state) override {\n \t\treturn make_uniq<BooleanWriterPageState>();\n \t}\n \n@@ -1022,7 +1019,7 @@ class FixedDecimalColumnWriter : public BasicColumnWriter {\n \t~FixedDecimalColumnWriter() override = default;\n \n public:\n-\tduckdb::unique_ptr<ColumnWriterStatistics> InitializeStatsState() override {\n+\tunique_ptr<ColumnWriterStatistics> InitializeStatsState() override {\n \t\treturn make_uniq<FixedDecimalStatistics>();\n \t}\n \n@@ -1196,8 +1193,8 @@ class StringStatisticsState : public ColumnWriterStatistics {\n \n class StringColumnWriterState : public BasicColumnWriterState {\n public:\n-\tStringColumnWriterState(duckdb_parquet::format::RowGroup &row_group, Allocator &allocator, idx_t col_idx)\n-\t    : BasicColumnWriterState(row_group, col_idx), dictionary_heap(allocator) {\n+\tStringColumnWriterState(duckdb_parquet::format::RowGroup &row_group, idx_t col_idx)\n+\t    : BasicColumnWriterState(row_group, col_idx) {\n \t}\n \t~StringColumnWriterState() override = default;\n \n@@ -1208,7 +1205,6 @@ class StringColumnWriterState : public BasicColumnWriterState {\n \n \t// Dictionary and accompanying string heap\n \tstring_map_t<uint32_t> dictionary;\n-\tStringHeap dictionary_heap;\n \t// key_bit_width== 0 signifies the chunk is written in plain encoding\n \tuint32_t key_bit_width;\n \n@@ -1243,13 +1239,12 @@ class StringColumnWriter : public BasicColumnWriter {\n \t~StringColumnWriter() override = default;\n \n public:\n-\tduckdb::unique_ptr<ColumnWriterStatistics> InitializeStatsState() override {\n+\tunique_ptr<ColumnWriterStatistics> InitializeStatsState() override {\n \t\treturn make_uniq<StringStatisticsState>();\n \t}\n \n-\tduckdb::unique_ptr<ColumnWriterState> InitializeWriteState(duckdb_parquet::format::RowGroup &row_group,\n-\t                                                           Allocator &allocator) override {\n-\t\tauto result = make_uniq<StringColumnWriterState>(row_group, allocator, row_group.columns.size());\n+\tunique_ptr<ColumnWriterState> InitializeWriteState(duckdb_parquet::format::RowGroup &row_group) override {\n+\t\tauto result = make_uniq<StringColumnWriterState>(row_group, row_group.columns.size());\n \t\tRegisterToRowGroup(row_group);\n \t\treturn std::move(result);\n \t}\n@@ -1279,11 +1274,8 @@ class StringColumnWriter : public BasicColumnWriter {\n \t\t\tif (validity.RowIsValid(vector_index)) {\n \t\t\t\trun_length++;\n \t\t\t\tconst auto &value = strings[vector_index];\n-\t\t\t\t// If the value did not yet exist in the dictionary we add it to the StringHeap\n-\t\t\t\tauto found = !value.IsInlined() && state.dictionary.find(value) == state.dictionary.end()\n-\t\t\t\t                 ? state.dictionary.insert(string_map_t<uint32_t>::value_type(\n-\t\t\t\t                       state.dictionary_heap.AddBlob(value), new_value_index))\n-\t\t\t\t                 : state.dictionary.insert(string_map_t<uint32_t>::value_type(value, new_value_index));\n+\t\t\t\t// Try to insert into the dictionary. If it's already there, we get back the value index\n+\t\t\t\tauto found = state.dictionary.insert(string_map_t<uint32_t>::value_type(value, new_value_index));\n \t\t\t\tstate.estimated_plain_size += value.GetSize() + STRING_LENGTH_SIZE;\n \t\t\t\tif (found.second) {\n \t\t\t\t\t// string didn't exist yet in the dictionary\n@@ -1359,7 +1351,7 @@ class StringColumnWriter : public BasicColumnWriter {\n \t\t}\n \t}\n \n-\tduckdb::unique_ptr<ColumnWriterPageState> InitializePageState(BasicColumnWriterState &state_p) override {\n+\tunique_ptr<ColumnWriterPageState> InitializePageState(BasicColumnWriterState &state_p) override {\n \t\tauto &state = state_p.Cast<StringColumnWriterState>();\n \t\treturn make_uniq<StringWriterPageState>(state.key_bit_width, state.dictionary);\n \t}\n@@ -1456,7 +1448,7 @@ class EnumColumnWriter : public BasicColumnWriter {\n \tuint32_t bit_width;\n \n public:\n-\tduckdb::unique_ptr<ColumnWriterStatistics> InitializeStatsState() override {\n+\tunique_ptr<ColumnWriterStatistics> InitializeStatsState() override {\n \t\treturn make_uniq<StringStatisticsState>();\n \t}\n \n@@ -1499,7 +1491,7 @@ class EnumColumnWriter : public BasicColumnWriter {\n \t\t}\n \t}\n \n-\tduckdb::unique_ptr<ColumnWriterPageState> InitializePageState(BasicColumnWriterState &state) override {\n+\tunique_ptr<ColumnWriterPageState> InitializePageState(BasicColumnWriterState &state) override {\n \t\treturn make_uniq<EnumWriterPageState>(bit_width);\n \t}\n \n@@ -1557,17 +1549,16 @@ class EnumColumnWriter : public BasicColumnWriter {\n class StructColumnWriter : public ColumnWriter {\n public:\n \tStructColumnWriter(ParquetWriter &writer, idx_t schema_idx, vector<string> schema_path_p, idx_t max_repeat,\n-\t                   idx_t max_define, vector<duckdb::unique_ptr<ColumnWriter>> child_writers_p, bool can_have_nulls)\n+\t                   idx_t max_define, vector<unique_ptr<ColumnWriter>> child_writers_p, bool can_have_nulls)\n \t    : ColumnWriter(writer, schema_idx, std::move(schema_path_p), max_repeat, max_define, can_have_nulls),\n \t      child_writers(std::move(child_writers_p)) {\n \t}\n \t~StructColumnWriter() override = default;\n \n-\tvector<duckdb::unique_ptr<ColumnWriter>> child_writers;\n+\tvector<unique_ptr<ColumnWriter>> child_writers;\n \n public:\n-\tduckdb::unique_ptr<ColumnWriterState> InitializeWriteState(duckdb_parquet::format::RowGroup &row_group,\n-\t                                                           Allocator &allocator) override;\n+\tunique_ptr<ColumnWriterState> InitializeWriteState(duckdb_parquet::format::RowGroup &row_group) override;\n \tbool HasAnalyze() override;\n \tvoid Analyze(ColumnWriterState &state, ColumnWriterState *parent, Vector &vector, idx_t count) override;\n \tvoid FinalizeAnalyze(ColumnWriterState &state) override;\n@@ -1587,16 +1578,15 @@ class StructColumnWriterState : public ColumnWriterState {\n \n \tduckdb_parquet::format::RowGroup &row_group;\n \tidx_t col_idx;\n-\tvector<duckdb::unique_ptr<ColumnWriterState>> child_states;\n+\tvector<unique_ptr<ColumnWriterState>> child_states;\n };\n \n-unique_ptr<ColumnWriterState> StructColumnWriter::InitializeWriteState(duckdb_parquet::format::RowGroup &row_group,\n-                                                                       Allocator &allocator) {\n+unique_ptr<ColumnWriterState> StructColumnWriter::InitializeWriteState(duckdb_parquet::format::RowGroup &row_group) {\n \tauto result = make_uniq<StructColumnWriterState>(row_group, row_group.columns.size());\n \n \tresult->child_states.reserve(child_writers.size());\n \tfor (auto &child_writer : child_writers) {\n-\t\tresult->child_states.push_back(child_writer->InitializeWriteState(row_group, allocator));\n+\t\tresult->child_states.push_back(child_writer->InitializeWriteState(row_group));\n \t}\n \treturn std::move(result);\n }\n@@ -1680,17 +1670,16 @@ void StructColumnWriter::FinalizeWrite(ColumnWriterState &state_p) {\n class ListColumnWriter : public ColumnWriter {\n public:\n \tListColumnWriter(ParquetWriter &writer, idx_t schema_idx, vector<string> schema_path_p, idx_t max_repeat,\n-\t                 idx_t max_define, duckdb::unique_ptr<ColumnWriter> child_writer_p, bool can_have_nulls)\n+\t                 idx_t max_define, unique_ptr<ColumnWriter> child_writer_p, bool can_have_nulls)\n \t    : ColumnWriter(writer, schema_idx, std::move(schema_path_p), max_repeat, max_define, can_have_nulls),\n \t      child_writer(std::move(child_writer_p)) {\n \t}\n \t~ListColumnWriter() override = default;\n \n-\tduckdb::unique_ptr<ColumnWriter> child_writer;\n+\tunique_ptr<ColumnWriter> child_writer;\n \n public:\n-\tduckdb::unique_ptr<ColumnWriterState> InitializeWriteState(duckdb_parquet::format::RowGroup &row_group,\n-\t                                                           Allocator &allocator) override;\n+\tunique_ptr<ColumnWriterState> InitializeWriteState(duckdb_parquet::format::RowGroup &row_group) override;\n \tbool HasAnalyze() override;\n \tvoid Analyze(ColumnWriterState &state, ColumnWriterState *parent, Vector &vector, idx_t count) override;\n \tvoid FinalizeAnalyze(ColumnWriterState &state) override;\n@@ -1710,14 +1699,13 @@ class ListColumnWriterState : public ColumnWriterState {\n \n \tduckdb_parquet::format::RowGroup &row_group;\n \tidx_t col_idx;\n-\tduckdb::unique_ptr<ColumnWriterState> child_state;\n+\tunique_ptr<ColumnWriterState> child_state;\n \tidx_t parent_index = 0;\n };\n \n-unique_ptr<ColumnWriterState> ListColumnWriter::InitializeWriteState(duckdb_parquet::format::RowGroup &row_group,\n-                                                                     Allocator &allocator) {\n+unique_ptr<ColumnWriterState> ListColumnWriter::InitializeWriteState(duckdb_parquet::format::RowGroup &row_group) {\n \tauto result = make_uniq<ListColumnWriterState>(row_group, row_group.columns.size());\n-\tresult->child_state = child_writer->InitializeWriteState(row_group, allocator);\n+\tresult->child_state = child_writer->InitializeWriteState(row_group);\n \treturn std::move(result);\n }\n \n@@ -1818,12 +1806,24 @@ void ListColumnWriter::FinalizeWrite(ColumnWriterState &state_p) {\n unique_ptr<ColumnWriter> ColumnWriter::CreateWriterRecursive(vector<duckdb_parquet::format::SchemaElement> &schemas,\n                                                              ParquetWriter &writer, const LogicalType &type,\n                                                              const string &name, vector<string> schema_path,\n+                                                             optional_ptr<const ChildFieldIDs> field_ids,\n                                                              idx_t max_repeat, idx_t max_define, bool can_have_nulls) {\n \tauto null_type = can_have_nulls ? FieldRepetitionType::OPTIONAL : FieldRepetitionType::REQUIRED;\n \tif (!can_have_nulls) {\n \t\tmax_define--;\n \t}\n \tidx_t schema_idx = schemas.size();\n+\n+\toptional_ptr<const FieldID> field_id;\n+\toptional_ptr<const ChildFieldIDs> child_field_ids;\n+\tif (field_ids) {\n+\t\tauto field_id_it = field_ids->ids->find(name);\n+\t\tif (field_id_it != field_ids->ids->end()) {\n+\t\t\tfield_id = &field_id_it->second;\n+\t\t\tchild_field_ids = &field_id->child_field_ids;\n+\t\t}\n+\t}\n+\n \tif (type.id() == LogicalTypeId::STRUCT) {\n \t\tauto &child_types = StructType::GetChildTypes(type);\n \t\t// set up the schema element for this struct\n@@ -1834,15 +1834,19 @@ unique_ptr<ColumnWriter> ColumnWriter::CreateWriterRecursive(vector<duckdb_parqu\n \t\tschema_element.__isset.type = false;\n \t\tschema_element.__isset.repetition_type = true;\n \t\tschema_element.name = name;\n+\t\tif (field_id && field_id->set) {\n+\t\t\tschema_element.__isset.field_id = true;\n+\t\t\tschema_element.field_id = field_id->field_id;\n+\t\t}\n \t\tschemas.push_back(std::move(schema_element));\n \t\tschema_path.push_back(name);\n \n \t\t// construct the child types recursively\n-\t\tvector<duckdb::unique_ptr<ColumnWriter>> child_writers;\n+\t\tvector<unique_ptr<ColumnWriter>> child_writers;\n \t\tchild_writers.reserve(child_types.size());\n \t\tfor (auto &child_type : child_types) {\n \t\t\tchild_writers.push_back(CreateWriterRecursive(schemas, writer, child_type.second, child_type.first,\n-\t\t\t                                              schema_path, max_repeat, max_define + 1));\n+\t\t\t                                              schema_path, child_field_ids, max_repeat, max_define + 1));\n \t\t}\n \t\treturn make_uniq<StructColumnWriter>(writer, schema_idx, std::move(schema_path), max_repeat, max_define,\n \t\t                                     std::move(child_writers), can_have_nulls);\n@@ -1861,6 +1865,10 @@ unique_ptr<ColumnWriter> ColumnWriter::CreateWriterRecursive(vector<duckdb_parqu\n \t\toptional_element.__isset.repetition_type = true;\n \t\toptional_element.__isset.converted_type = true;\n \t\toptional_element.name = name;\n+\t\tif (field_id && field_id->set) {\n+\t\t\toptional_element.__isset.field_id = true;\n+\t\t\toptional_element.field_id = field_id->field_id;\n+\t\t}\n \t\tschemas.push_back(std::move(optional_element));\n \t\tschema_path.push_back(name);\n \n@@ -1875,8 +1883,8 @@ unique_ptr<ColumnWriter> ColumnWriter::CreateWriterRecursive(vector<duckdb_parqu\n \t\tschemas.push_back(std::move(repeated_element));\n \t\tschema_path.emplace_back(\"list\");\n \n-\t\tauto child_writer =\n-\t\t    CreateWriterRecursive(schemas, writer, child_type, \"element\", schema_path, max_repeat + 1, max_define + 2);\n+\t\tauto child_writer = CreateWriterRecursive(schemas, writer, child_type, \"element\", schema_path, child_field_ids,\n+\t\t                                          max_repeat + 1, max_define + 2);\n \t\treturn make_uniq<ListColumnWriter>(writer, schema_idx, std::move(schema_path), max_repeat, max_define,\n \t\t                                   std::move(child_writer), can_have_nulls);\n \t}\n@@ -1899,6 +1907,10 @@ unique_ptr<ColumnWriter> ColumnWriter::CreateWriterRecursive(vector<duckdb_parqu\n \t\ttop_element.__isset.converted_type = true;\n \t\ttop_element.__isset.type = false;\n \t\ttop_element.name = name;\n+\t\tif (field_id && field_id->set) {\n+\t\t\ttop_element.__isset.field_id = true;\n+\t\t\ttop_element.field_id = field_id->field_id;\n+\t\t}\n \t\tschemas.push_back(std::move(top_element));\n \t\tschema_path.push_back(name);\n \n@@ -1916,13 +1928,13 @@ unique_ptr<ColumnWriter> ColumnWriter::CreateWriterRecursive(vector<duckdb_parqu\n \t\t// construct the child types recursively\n \t\tvector<LogicalType> kv_types {MapType::KeyType(type), MapType::ValueType(type)};\n \t\tvector<string> kv_names {\"key\", \"value\"};\n-\t\tvector<duckdb::unique_ptr<ColumnWriter>> child_writers;\n+\t\tvector<unique_ptr<ColumnWriter>> child_writers;\n \t\tchild_writers.reserve(2);\n \t\tfor (idx_t i = 0; i < 2; i++) {\n \t\t\t// key needs to be marked as REQUIRED\n \t\t\tbool is_key = i == 0;\n \t\t\tauto child_writer = CreateWriterRecursive(schemas, writer, kv_types[i], kv_names[i], schema_path,\n-\t\t\t                                          max_repeat + 1, max_define + 2, !is_key);\n+\t\t\t                                          child_field_ids, max_repeat + 1, max_define + 2, !is_key);\n \n \t\t\tchild_writers.push_back(std::move(child_writer));\n \t\t}\n@@ -1938,6 +1950,10 @@ unique_ptr<ColumnWriter> ColumnWriter::CreateWriterRecursive(vector<duckdb_parqu\n \tschema_element.__isset.type = true;\n \tschema_element.__isset.repetition_type = true;\n \tschema_element.name = name;\n+\tif (field_id && field_id->set) {\n+\t\tschema_element.__isset.field_id = true;\n+\t\tschema_element.field_id = field_id->field_id;\n+\t}\n \tParquetWriter::SetSchemaProperties(type, schema_element);\n \tschemas.push_back(std::move(schema_element));\n \tschema_path.push_back(name);\ndiff --git a/extension/parquet/include/cast_column_reader.hpp b/extension/parquet/include/cast_column_reader.hpp\nindex 01849ef4db4a..640a77bda8a5 100644\n--- a/extension/parquet/include/cast_column_reader.hpp\n+++ b/extension/parquet/include/cast_column_reader.hpp\n@@ -19,9 +19,9 @@ class CastColumnReader : public ColumnReader {\n \tstatic constexpr const PhysicalType TYPE = PhysicalType::INVALID;\n \n public:\n-\tCastColumnReader(duckdb::unique_ptr<ColumnReader> child_reader, LogicalType target_type);\n+\tCastColumnReader(unique_ptr<ColumnReader> child_reader, LogicalType target_type);\n \n-\tduckdb::unique_ptr<ColumnReader> child_reader;\n+\tunique_ptr<ColumnReader> child_reader;\n \tDataChunk intermediate_chunk;\n \n public:\ndiff --git a/extension/parquet/include/column_reader.hpp b/extension/parquet/include/column_reader.hpp\nindex 33b7cb047c49..029b11036409 100644\n--- a/extension/parquet/include/column_reader.hpp\n+++ b/extension/parquet/include/column_reader.hpp\n@@ -8,21 +8,19 @@\n \n #pragma once\n \n-#include \"parquet_types.h\"\n-#include \"thrift_tools.hpp\"\n-#include \"resizable_buffer.hpp\"\n-\n-#include \"parquet_rle_bp_decoder.hpp\"\n+#include \"duckdb.hpp\"\n #include \"parquet_dbp_decoder.hpp\"\n+#include \"parquet_rle_bp_decoder.hpp\"\n #include \"parquet_statistics.hpp\"\n-\n-#include \"duckdb.hpp\"\n+#include \"parquet_types.h\"\n+#include \"resizable_buffer.hpp\"\n+#include \"thrift_tools.hpp\"\n #ifndef DUCKDB_AMALGAMATION\n \n-#include \"duckdb/common/types/vector.hpp\"\n-#include \"duckdb/common/types/string_type.hpp\"\n-#include \"duckdb/common/types/chunk_collection.hpp\"\n #include \"duckdb/common/operator/cast_operators.hpp\"\n+#include \"duckdb/common/types/chunk_collection.hpp\"\n+#include \"duckdb/common/types/string_type.hpp\"\n+#include \"duckdb/common/types/vector.hpp\"\n #include \"duckdb/common/types/vector_cache.hpp\"\n #endif\n \n@@ -129,7 +127,7 @@ class ColumnReader {\n \n \tParquetReader &reader;\n \tLogicalType type;\n-\tduckdb::unique_ptr<Vector> byte_array_data;\n+\tunique_ptr<Vector> byte_array_data;\n \tidx_t byte_array_count = 0;\n \n \tidx_t pending_skips = 0;\n@@ -158,11 +156,11 @@ class ColumnReader {\n \tResizeableBuffer compressed_buffer;\n \tResizeableBuffer offset_buffer;\n \n-\tduckdb::unique_ptr<RleBpDecoder> dict_decoder;\n-\tduckdb::unique_ptr<RleBpDecoder> defined_decoder;\n-\tduckdb::unique_ptr<RleBpDecoder> repeated_decoder;\n-\tduckdb::unique_ptr<DbpDecoder> dbp_decoder;\n-\tduckdb::unique_ptr<RleBpDecoder> rle_decoder;\n+\tunique_ptr<RleBpDecoder> dict_decoder;\n+\tunique_ptr<RleBpDecoder> defined_decoder;\n+\tunique_ptr<RleBpDecoder> repeated_decoder;\n+\tunique_ptr<DbpDecoder> dbp_decoder;\n+\tunique_ptr<RleBpDecoder> rle_decoder;\n \n \t// dummies for Skip()\n \tparquet_filter_t none_filter;\ndiff --git a/extension/parquet/include/column_writer.hpp b/extension/parquet/include/column_writer.hpp\nindex 4885ad84900a..31b423ff7ff7 100644\n--- a/extension/parquet/include/column_writer.hpp\n+++ b/extension/parquet/include/column_writer.hpp\n@@ -16,6 +16,7 @@ class BufferedSerializer;\n class ParquetWriter;\n class ColumnWriterPageState;\n class BasicColumnWriterState;\n+struct ChildFieldIDs;\n \n class ColumnWriterState {\n public:\n@@ -78,13 +79,14 @@ class ColumnWriter {\n \n public:\n \t//! Create the column writer for a specific type recursively\n-\tstatic duckdb::unique_ptr<ColumnWriter>\n-\tCreateWriterRecursive(vector<duckdb_parquet::format::SchemaElement> &schemas, ParquetWriter &writer,\n-\t                      const LogicalType &type, const string &name, vector<string> schema_path, idx_t max_repeat = 0,\n-\t                      idx_t max_define = 1, bool can_have_nulls = true);\n+\tstatic unique_ptr<ColumnWriter> CreateWriterRecursive(vector<duckdb_parquet::format::SchemaElement> &schemas,\n+\t                                                      ParquetWriter &writer, const LogicalType &type,\n+\t                                                      const string &name, vector<string> schema_path,\n+\t                                                      optional_ptr<const ChildFieldIDs> field_ids,\n+\t                                                      idx_t max_repeat = 0, idx_t max_define = 1,\n+\t                                                      bool can_have_nulls = true);\n \n-\tvirtual duckdb::unique_ptr<ColumnWriterState> InitializeWriteState(duckdb_parquet::format::RowGroup &row_group,\n-\t                                                                   Allocator &allocator) = 0;\n+\tvirtual unique_ptr<ColumnWriterState> InitializeWriteState(duckdb_parquet::format::RowGroup &row_group) = 0;\n \n \t//! indicates whether the write need to analyse the data before preparing it\n \tvirtual bool HasAnalyze() {\n@@ -112,7 +114,7 @@ class ColumnWriter {\n \tvoid HandleRepeatLevels(ColumnWriterState &state_p, ColumnWriterState *parent, idx_t count, idx_t max_repeat);\n \n \tvoid CompressPage(BufferedSerializer &temp_writer, size_t &compressed_size, data_ptr_t &compressed_data,\n-\t                  duckdb::unique_ptr<data_t[]> &compressed_buf);\n+\t                  unique_ptr<data_t[]> &compressed_buf);\n };\n \n } // namespace duckdb\ndiff --git a/extension/parquet/include/list_column_reader.hpp b/extension/parquet/include/list_column_reader.hpp\nindex 780163928a14..67565dfbfd5b 100644\n--- a/extension/parquet/include/list_column_reader.hpp\n+++ b/extension/parquet/include/list_column_reader.hpp\n@@ -19,7 +19,7 @@ class ListColumnReader : public ColumnReader {\n \n public:\n \tListColumnReader(ParquetReader &reader, LogicalType type_p, const SchemaElement &schema_p, idx_t schema_idx_p,\n-\t                 idx_t max_define_p, idx_t max_repeat_p, duckdb::unique_ptr<ColumnReader> child_column_reader_p);\n+\t                 idx_t max_define_p, idx_t max_repeat_p, unique_ptr<ColumnReader> child_column_reader_p);\n \n \tidx_t Read(uint64_t num_values, parquet_filter_t &filter, data_ptr_t define_out, data_ptr_t repeat_out,\n \t           Vector &result_out) override;\n@@ -43,7 +43,7 @@ class ListColumnReader : public ColumnReader {\n \t}\n \n private:\n-\tduckdb::unique_ptr<ColumnReader> child_column_reader;\n+\tunique_ptr<ColumnReader> child_column_reader;\n \tResizeableBuffer child_defines;\n \tResizeableBuffer child_repeats;\n \tuint8_t *child_defines_ptr;\ndiff --git a/extension/parquet/include/parquet_dbp_decoder.hpp b/extension/parquet/include/parquet_dbp_decoder.hpp\nindex 9f01354e4177..601147a6ba77 100644\n--- a/extension/parquet/include/parquet_dbp_decoder.hpp\n+++ b/extension/parquet/include/parquet_dbp_decoder.hpp\n@@ -15,7 +15,7 @@ class DbpDecoder {\n \t\t// some derivatives\n \t\tD_ASSERT(miniblocks_per_block > 0);\n \t\tvalues_per_miniblock = block_value_count / miniblocks_per_block;\n-\t\tminiblock_bit_widths = duckdb::unique_ptr<uint8_t[]>(new data_t[miniblocks_per_block]);\n+\t\tminiblock_bit_widths = unique_ptr<uint8_t[]>(new data_t[miniblocks_per_block]);\n \n \t\t// init state to something sane\n \t\tvalues_left_in_block = 0;\n@@ -96,7 +96,7 @@ class DbpDecoder {\n \t\tif (values_left_in_miniblock == 0) {\n \t\t\treturn;\n \t\t}\n-\t\tauto data = duckdb::unique_ptr<uint32_t[]>(new uint32_t[values_left_in_miniblock]);\n+\t\tauto data = unique_ptr<uint32_t[]>(new uint32_t[values_left_in_miniblock]);\n \t\tGetBatch<uint32_t>(data_ptr_cast(data.get()), values_left_in_miniblock);\n \t}\n \n@@ -112,7 +112,7 @@ class DbpDecoder {\n \tint64_t start_value;\n \tidx_t values_per_miniblock;\n \n-\tduckdb::unique_ptr<uint8_t[]> miniblock_bit_widths;\n+\tunique_ptr<uint8_t[]> miniblock_bit_widths;\n \tidx_t values_left_in_block;\n \tidx_t values_left_in_miniblock;\n \tidx_t miniblock_offset;\ndiff --git a/extension/parquet/include/parquet_decimal_utils.hpp b/extension/parquet/include/parquet_decimal_utils.hpp\nindex 96e0901de804..33b253538f88 100644\n--- a/extension/parquet/include/parquet_decimal_utils.hpp\n+++ b/extension/parquet/include/parquet_decimal_utils.hpp\n@@ -35,9 +35,9 @@ class ParquetDecimalUtils {\n \t\treturn res;\n \t}\n \n-\tstatic duckdb::unique_ptr<ColumnReader> CreateReader(ParquetReader &reader, const LogicalType &type_p,\n-\t                                                     const SchemaElement &schema_p, idx_t file_idx_p,\n-\t                                                     idx_t max_define, idx_t max_repeat);\n+\tstatic unique_ptr<ColumnReader> CreateReader(ParquetReader &reader, const LogicalType &type_p,\n+\t                                             const SchemaElement &schema_p, idx_t file_idx_p, idx_t max_define,\n+\t                                             idx_t max_repeat);\n };\n \n } // namespace duckdb\ndiff --git a/extension/parquet/include/parquet_file_metadata_cache.hpp b/extension/parquet/include/parquet_file_metadata_cache.hpp\nindex 3ae03c166935..01d316dc0f3f 100644\n--- a/extension/parquet/include/parquet_file_metadata_cache.hpp\n+++ b/extension/parquet/include/parquet_file_metadata_cache.hpp\n@@ -20,14 +20,14 @@ class ParquetFileMetadataCache : public ObjectCacheEntry {\n public:\n \tParquetFileMetadataCache() : metadata(nullptr) {\n \t}\n-\tParquetFileMetadataCache(duckdb::unique_ptr<duckdb_parquet::format::FileMetaData> file_metadata, time_t r_time)\n+\tParquetFileMetadataCache(unique_ptr<duckdb_parquet::format::FileMetaData> file_metadata, time_t r_time)\n \t    : metadata(std::move(file_metadata)), read_time(r_time) {\n \t}\n \n \t~ParquetFileMetadataCache() override = default;\n \n \t//! Parquet file metadata\n-\tduckdb::unique_ptr<const duckdb_parquet::format::FileMetaData> metadata;\n+\tunique_ptr<const duckdb_parquet::format::FileMetaData> metadata;\n \n \t//! read time\n \ttime_t read_time;\ndiff --git a/extension/parquet/include/parquet_statistics.hpp b/extension/parquet/include/parquet_statistics.hpp\nindex cb7c401c2829..23d5cf0dc15a 100644\n--- a/extension/parquet/include/parquet_statistics.hpp\n+++ b/extension/parquet/include/parquet_statistics.hpp\n@@ -15,8 +15,8 @@ struct LogicalType;\n \n struct ParquetStatisticsUtils {\n \n-\tstatic duckdb::unique_ptr<BaseStatistics>\n-\tTransformColumnStatistics(const SchemaElement &s_ele, const LogicalType &type, const ColumnChunk &column_chunk);\n+\tstatic unique_ptr<BaseStatistics> TransformColumnStatistics(const SchemaElement &s_ele, const LogicalType &type,\n+\t                                                            const ColumnChunk &column_chunk);\n \n \tstatic Value ConvertValue(const LogicalType &type, const duckdb_parquet::format::SchemaElement &schema_ele,\n \t                          const std::string &stats);\ndiff --git a/extension/parquet/include/parquet_support.hpp b/extension/parquet/include/parquet_support.hpp\nindex 58a865cf154b..91c43fcb4d84 100644\n--- a/extension/parquet/include/parquet_support.hpp\n+++ b/extension/parquet/include/parquet_support.hpp\n@@ -37,8 +37,7 @@ class StripeStreams {\n \t\t * @param throwIfNotFound fail if a stream is required and not found\n \t\t * @return the new stream\n \t\t */\n-\t\tvirtual duckdb::unique_ptr<SeekableInputStream> getStream(const StreamIdentifier &si, bool throwIfNotFound)\n-\t\t    const = 0;\n+\t\tvirtual unique_ptr<SeekableInputStream> getStream(const StreamIdentifier &si, bool throwIfNotFound) const = 0;\n \n \t\t/**\n \t\t * visit all streams of given node and execute visitor logic\n@@ -63,7 +62,7 @@ class StripeStreams {\n \t\t * Get the RowGroupIndex.\n \t\t * @return a vector of RowIndex belonging to the stripe\n \t\t */\n-\t\tvirtual duckdb::unique_ptr<proto::RowIndex> getRowGroupIndex(const StreamIdentifier &si) const = 0;\n+\t\tvirtual unique_ptr<proto::RowIndex> getRowGroupIndex(const StreamIdentifier &si) const = 0;\n \n \t\t/**\n \t\t * Get stride index provider which is used by string dictionary reader to\n@@ -84,8 +83,7 @@ class StripeStreams {\n \t * @param throwIfNotFound fail if a stream is required and not found\n \t * @return the new stream\n \t */\n-\tvirtual duckdb::unique_ptr<SeekableInputStream> getStream(const StreamIdentifier &si,\n-\t                                                          bool throwIfNotFound) const = 0;\n+\tvirtual unique_ptr<SeekableInputStream> getStream(const StreamIdentifier &si, bool throwIfNotFound) const = 0;\n \n \t/**\n \t * visit all streams of given node and execute visitor logic\n@@ -110,7 +108,7 @@ class StripeStreams {\n \t * Get the RowGroupIndex.\n \t * @return a vector of RowIndex belonging to the stripe\n \t */\n-\tvirtual duckdb::unique_ptr<proto::RowIndex> getRowGroupIndex(const StreamIdentifier &si) const = 0;\n+\tvirtual unique_ptr<proto::RowIndex> getRowGroupIndex(const StreamIdentifier &si) const = 0;\n \n \t/**\n \t * Get stride index provider which is used by string dictionary reader to\n@@ -157,10 +155,10 @@ class SelectiveColumnReader : public ColumnReader {\n \t}\n \n \t// Creates a reader for the given stripe.\n-\tstatic duckdb::unique_ptr<SelectiveColumnReader>\n-\tbuild(const std::shared_ptr<const dwio::common::TypeWithId> &requestedType,\n-\t      const std::shared_ptr<const dwio::common::TypeWithId> &dataType, StripeStreams &stripe,\n-\t      common::ScanSpec *scanSpec, uint32_t sequence = 0);\n+\tstatic unique_ptr<SelectiveColumnReader> build(const std::shared_ptr<const dwio::common::TypeWithId> &requestedType,\n+\t                                               const std::shared_ptr<const dwio::common::TypeWithId> &dataType,\n+\t                                               StripeStreams &stripe, common::ScanSpec *scanSpec,\n+\t                                               uint32_t sequence = 0);\n \n \t// Seeks to offset and reads the rows in 'rows' and applies\n \t// filters and value processing as given by 'scanSpec supplied at\n@@ -336,7 +334,7 @@ class Filter {\n \t\treturn kind_;\n \t}\n \n-\tvirtual duckdb::unique_ptr<Filter> clone() const = 0;\n+\tvirtual unique_ptr<Filter> clone() const = 0;\n \n \t/**\n \t * A filter becomes non-deterministic when applies to nested column,\ndiff --git a/extension/parquet/include/parquet_writer.hpp b/extension/parquet/include/parquet_writer.hpp\nindex ab66641c022c..57005a65404d 100644\n--- a/extension/parquet/include/parquet_writer.hpp\n+++ b/extension/parquet/include/parquet_writer.hpp\n@@ -17,8 +17,8 @@\n #include \"duckdb/common/types/column/column_data_collection.hpp\"\n #endif\n \n-#include \"parquet_types.h\"\n #include \"column_writer.hpp\"\n+#include \"parquet_types.h\"\n #include \"thrift/protocol/TCompactProtocol.h\"\n \n namespace duckdb {\n@@ -27,13 +27,31 @@ class FileOpener;\n \n struct PreparedRowGroup {\n \tduckdb_parquet::format::RowGroup row_group;\n-\tvector<duckdb::unique_ptr<ColumnWriterState>> states;\n+\tvector<unique_ptr<ColumnWriterState>> states;\n+\tvector<shared_ptr<StringHeap>> heaps;\n+};\n+\n+struct FieldID;\n+struct ChildFieldIDs {\n+\tChildFieldIDs();\n+\tChildFieldIDs Copy() const;\n+\tunique_ptr<case_insensitive_map_t<FieldID>> ids;\n+};\n+\n+struct FieldID {\n+\tstatic constexpr const auto DUCKDB_FIELD_ID = \"__duckdb_field_id\";\n+\tFieldID();\n+\texplicit FieldID(int32_t field_id);\n+\tFieldID Copy() const;\n+\tbool set;\n+\tint32_t field_id;\n+\tChildFieldIDs child_field_ids;\n };\n \n class ParquetWriter {\n public:\n \tParquetWriter(FileSystem &fs, string file_name, vector<LogicalType> types, vector<string> names,\n-\t              duckdb_parquet::format::CompressionCodec::type codec);\n+\t              duckdb_parquet::format::CompressionCodec::type codec, ChildFieldIDs field_ids);\n \n public:\n \tvoid PrepareRowGroup(ColumnDataCollection &buffer, PreparedRowGroup &result);\n@@ -62,13 +80,14 @@ class ParquetWriter {\n \tvector<LogicalType> sql_types;\n \tvector<string> column_names;\n \tduckdb_parquet::format::CompressionCodec::type codec;\n+\tChildFieldIDs field_ids;\n \n-\tduckdb::unique_ptr<BufferedFileWriter> writer;\n+\tunique_ptr<BufferedFileWriter> writer;\n \tshared_ptr<duckdb_apache::thrift::protocol::TProtocol> protocol;\n \tduckdb_parquet::format::FileMetaData file_meta_data;\n \tstd::mutex lock;\n \n-\tvector<duckdb::unique_ptr<ColumnWriter>> column_writers;\n+\tvector<unique_ptr<ColumnWriter>> column_writers;\n };\n \n } // namespace duckdb\ndiff --git a/extension/parquet/include/string_column_reader.hpp b/extension/parquet/include/string_column_reader.hpp\nindex 40c8515a008d..df266015599b 100644\n--- a/extension/parquet/include/string_column_reader.hpp\n+++ b/extension/parquet/include/string_column_reader.hpp\n@@ -28,7 +28,7 @@ class StringColumnReader : public TemplatedColumnReader<string_t, StringParquetV\n \tStringColumnReader(ParquetReader &reader, LogicalType type_p, const SchemaElement &schema_p, idx_t schema_idx_p,\n \t                   idx_t max_define_p, idx_t max_repeat_p);\n \n-\tduckdb::unique_ptr<string_t[]> dict_strings;\n+\tunique_ptr<string_t[]> dict_strings;\n \tidx_t fixed_width_string_length;\n \tidx_t delta_offset = 0;\n \ndiff --git a/extension/parquet/include/struct_column_reader.hpp b/extension/parquet/include/struct_column_reader.hpp\nindex b437ef890552..b9a9b5eee50a 100644\n--- a/extension/parquet/include/struct_column_reader.hpp\n+++ b/extension/parquet/include/struct_column_reader.hpp\n@@ -19,10 +19,9 @@ class StructColumnReader : public ColumnReader {\n \n public:\n \tStructColumnReader(ParquetReader &reader, LogicalType type_p, const SchemaElement &schema_p, idx_t schema_idx_p,\n-\t                   idx_t max_define_p, idx_t max_repeat_p,\n-\t                   vector<duckdb::unique_ptr<ColumnReader>> child_readers_p);\n+\t                   idx_t max_define_p, idx_t max_repeat_p, vector<unique_ptr<ColumnReader>> child_readers_p);\n \n-\tvector<duckdb::unique_ptr<ColumnReader>> child_readers;\n+\tvector<unique_ptr<ColumnReader>> child_readers;\n \n public:\n \tColumnReader *GetChildReader(idx_t child_idx);\ndiff --git a/extension/parquet/include/zstd_file_system.hpp b/extension/parquet/include/zstd_file_system.hpp\nindex c2842e66e9a4..230aef36d4a8 100644\n--- a/extension/parquet/include/zstd_file_system.hpp\n+++ b/extension/parquet/include/zstd_file_system.hpp\n@@ -17,13 +17,13 @@ namespace duckdb {\n \n class ZStdFileSystem : public CompressedFileSystem {\n public:\n-\tduckdb::unique_ptr<FileHandle> OpenCompressedFile(duckdb::unique_ptr<FileHandle> handle, bool write) override;\n+\tunique_ptr<FileHandle> OpenCompressedFile(unique_ptr<FileHandle> handle, bool write) override;\n \n \tstd::string GetName() const override {\n \t\treturn \"ZStdFileSystem\";\n \t}\n \n-\tduckdb::unique_ptr<StreamWrapper> CreateStream() override;\n+\tunique_ptr<StreamWrapper> CreateStream() override;\n \tidx_t InBufferSize() override;\n \tidx_t OutBufferSize() override;\n };\ndiff --git a/extension/parquet/parquet_extension.cpp b/extension/parquet/parquet_extension.cpp\nindex ee7febe9ca0e..b585548643ac 100644\n--- a/extension/parquet/parquet_extension.cpp\n+++ b/extension/parquet/parquet_extension.cpp\n@@ -1,7 +1,8 @@\n #define DUCKDB_EXTENSION_MAIN\n \n-#include \"duckdb.hpp\"\n #include \"parquet_extension.hpp\"\n+\n+#include \"duckdb.hpp\"\n #include \"parquet_metadata.hpp\"\n #include \"parquet_reader.hpp\"\n #include \"parquet_writer.hpp\"\n@@ -14,15 +15,18 @@\n #include <vector>\n #ifndef DUCKDB_AMALGAMATION\n #include \"duckdb/catalog/catalog.hpp\"\n+#include \"duckdb/catalog/catalog_entry/table_function_catalog_entry.hpp\"\n #include \"duckdb/common/constants.hpp\"\n #include \"duckdb/common/enums/file_compression_type.hpp\"\n #include \"duckdb/common/field_writer.hpp\"\n #include \"duckdb/common/file_system.hpp\"\n+#include \"duckdb/common/multi_file_reader.hpp\"\n #include \"duckdb/common/types/chunk_collection.hpp\"\n #include \"duckdb/function/copy_function.hpp\"\n #include \"duckdb/function/table_function.hpp\"\n #include \"duckdb/main/client_context.hpp\"\n #include \"duckdb/main/config.hpp\"\n+#include \"duckdb/main/extension_util.hpp\"\n #include \"duckdb/parser/expression/constant_expression.hpp\"\n #include \"duckdb/parser/expression/function_expression.hpp\"\n #include \"duckdb/parser/parsed_data/create_copy_function_info.hpp\"\n@@ -30,10 +34,7 @@\n #include \"duckdb/parser/tableref/table_function_ref.hpp\"\n #include \"duckdb/planner/operator/logical_get.hpp\"\n #include \"duckdb/storage/statistics/base_statistics.hpp\"\n-#include \"duckdb/catalog/catalog_entry/table_function_catalog_entry.hpp\"\n-#include \"duckdb/common/multi_file_reader.hpp\"\n #include \"duckdb/storage/table/row_group.hpp\"\n-#include \"duckdb/main/extension_util.hpp\"\n #endif\n \n namespace duckdb {\n@@ -115,6 +116,7 @@ struct ParquetWriteBindData : public TableFunctionData {\n \tvector<string> column_names;\n \tduckdb_parquet::format::CompressionCodec::type codec = duckdb_parquet::format::CompressionCodec::SNAPPY;\n \tidx_t row_group_size = RowGroup::ROW_GROUP_SIZE;\n+\tChildFieldIDs field_ids;\n };\n \n struct ParquetWriteGlobalState : public GlobalFunctionData {\n@@ -123,10 +125,12 @@ struct ParquetWriteGlobalState : public GlobalFunctionData {\n \n struct ParquetWriteLocalState : public LocalFunctionData {\n \texplicit ParquetWriteLocalState(ClientContext &context, const vector<LogicalType> &types)\n-\t    : buffer(Allocator::Get(context), types) {\n+\t    : buffer(context, types, ColumnDataAllocatorType::HYBRID) {\n+\t\tbuffer.InitializeAppend(append_state);\n \t}\n \n \tColumnDataCollection buffer;\n+\tColumnDataAppendState append_state;\n };\n \n void ParquetOptions::Serialize(FieldWriter &writer) const {\n@@ -585,8 +589,157 @@ class ParquetScanFunction {\n \t}\n };\n \n+static case_insensitive_map_t<LogicalType> GetChildNameToTypeMap(const LogicalType &type) {\n+\tcase_insensitive_map_t<LogicalType> name_to_type_map;\n+\tswitch (type.id()) {\n+\tcase LogicalTypeId::LIST:\n+\t\tname_to_type_map.emplace(\"element\", ListType::GetChildType(type));\n+\t\tbreak;\n+\tcase LogicalTypeId::MAP:\n+\t\tname_to_type_map.emplace(\"key\", MapType::KeyType(type));\n+\t\tname_to_type_map.emplace(\"value\", MapType::ValueType(type));\n+\t\tbreak;\n+\tcase LogicalTypeId::STRUCT:\n+\t\tfor (auto &child_type : StructType::GetChildTypes(type)) {\n+\t\t\tif (child_type.first == FieldID::DUCKDB_FIELD_ID) {\n+\t\t\t\tthrow BinderException(\"Cannot have column named \\\"%s\\\" with FIELD_IDS\", FieldID::DUCKDB_FIELD_ID);\n+\t\t\t}\n+\t\t\tname_to_type_map.emplace(child_type);\n+\t\t}\n+\t\tbreak;\n+\tdefault: // LCOV_EXCL_START\n+\t\tthrow InternalException(\"Unexpected type in GetChildNameToTypeMap\");\n+\t} // LCOV_EXCL_STOP\n+\treturn name_to_type_map;\n+}\n+\n+static void GetChildNamesAndTypes(const LogicalType &type, vector<string> &child_names,\n+                                  vector<LogicalType> &child_types) {\n+\tswitch (type.id()) {\n+\tcase LogicalTypeId::LIST:\n+\t\tchild_names.emplace_back(\"element\");\n+\t\tchild_types.emplace_back(ListType::GetChildType(type));\n+\t\tbreak;\n+\tcase LogicalTypeId::MAP:\n+\t\tchild_names.emplace_back(\"key\");\n+\t\tchild_names.emplace_back(\"value\");\n+\t\tchild_types.emplace_back(MapType::KeyType(type));\n+\t\tchild_types.emplace_back(MapType::ValueType(type));\n+\t\tbreak;\n+\tcase LogicalTypeId::STRUCT:\n+\t\tfor (auto &child_type : StructType::GetChildTypes(type)) {\n+\t\t\tchild_names.emplace_back(child_type.first);\n+\t\t\tchild_types.emplace_back(child_type.second);\n+\t\t}\n+\t\tbreak;\n+\tdefault: // LCOV_EXCL_START\n+\t\tthrow InternalException(\"Unexpected type in GetChildNamesAndTypes\");\n+\t} // LCOV_EXCL_STOP\n+}\n+\n+static void GenerateFieldIDs(ChildFieldIDs &field_ids, idx_t &field_id, const vector<string> &names,\n+                             const vector<LogicalType> &sql_types) {\n+\tD_ASSERT(names.size() == sql_types.size());\n+\tfor (idx_t col_idx = 0; col_idx < names.size(); col_idx++) {\n+\t\tconst auto &col_name = names[col_idx];\n+\t\tauto inserted = field_ids.ids->insert(make_pair(col_name, FieldID(field_id++)));\n+\t\tD_ASSERT(inserted.second);\n+\n+\t\tconst auto &col_type = sql_types[col_idx];\n+\t\tif (col_type.id() != LogicalTypeId::LIST && col_type.id() != LogicalTypeId::MAP &&\n+\t\t    col_type.id() != LogicalTypeId::STRUCT) {\n+\t\t\tcontinue;\n+\t\t}\n+\n+\t\t// Cannot use GetChildNameToTypeMap here because we lose order, and we want to generate depth-first\n+\t\tvector<string> child_names;\n+\t\tvector<LogicalType> child_types;\n+\t\tGetChildNamesAndTypes(col_type, child_names, child_types);\n+\n+\t\tGenerateFieldIDs(inserted.first->second.child_field_ids, field_id, child_names, child_types);\n+\t}\n+}\n+\n+static void GetFieldIDs(const Value &field_ids_value, ChildFieldIDs &field_ids,\n+                        unordered_set<uint32_t> &unique_field_ids,\n+                        const case_insensitive_map_t<LogicalType> &name_to_type_map) {\n+\tconst auto &struct_type = field_ids_value.type();\n+\tif (struct_type.id() != LogicalTypeId::STRUCT) {\n+\t\tthrow BinderException(\n+\t\t    \"Expected FIELD_IDS to be a STRUCT, e.g., {col1: 42, col2: {%s: 43, nested_col: 44}, col3: 44}\",\n+\t\t    FieldID::DUCKDB_FIELD_ID);\n+\t}\n+\tconst auto &struct_children = StructValue::GetChildren(field_ids_value);\n+\tD_ASSERT(StructType::GetChildTypes(struct_type).size() == struct_children.size());\n+\tfor (idx_t i = 0; i < struct_children.size(); i++) {\n+\t\tconst auto &col_name = StringUtil::Lower(StructType::GetChildName(struct_type, i));\n+\t\tif (col_name == FieldID::DUCKDB_FIELD_ID) {\n+\t\t\tcontinue;\n+\t\t}\n+\n+\t\tauto it = name_to_type_map.find(col_name);\n+\t\tif (it == name_to_type_map.end()) {\n+\t\t\tstring names;\n+\t\t\tfor (const auto &name : name_to_type_map) {\n+\t\t\t\tif (!names.empty()) {\n+\t\t\t\t\tnames += \", \";\n+\t\t\t\t}\n+\t\t\t\tnames += name.first;\n+\t\t\t}\n+\t\t\tthrow BinderException(\"Column name \\\"%s\\\" specified in FIELD_IDS not found. Available column names: [%s]\",\n+\t\t\t                      col_name, names);\n+\t\t}\n+\t\tD_ASSERT(field_ids.ids->find(col_name) == field_ids.ids->end()); // Caught by STRUCT - deduplicates keys\n+\n+\t\tconst auto &child_value = struct_children[i];\n+\t\tconst auto &child_type = child_value.type();\n+\t\toptional_ptr<const Value> field_id_value;\n+\t\toptional_ptr<const Value> child_field_ids_value;\n+\n+\t\tif (child_type.id() == LogicalTypeId::STRUCT) {\n+\t\t\tconst auto &nested_children = StructValue::GetChildren(child_value);\n+\t\t\tD_ASSERT(StructType::GetChildTypes(child_type).size() == nested_children.size());\n+\t\t\tfor (idx_t nested_i = 0; nested_i < nested_children.size(); nested_i++) {\n+\t\t\t\tconst auto &field_id_or_nested_col = StructType::GetChildName(child_type, nested_i);\n+\t\t\t\tif (field_id_or_nested_col == FieldID::DUCKDB_FIELD_ID) {\n+\t\t\t\t\tfield_id_value = &nested_children[nested_i];\n+\t\t\t\t} else {\n+\t\t\t\t\tchild_field_ids_value = &child_value;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t} else {\n+\t\t\tfield_id_value = &child_value;\n+\t\t}\n+\n+\t\tFieldID field_id;\n+\t\tif (field_id_value) {\n+\t\t\tValue field_id_integer_value = field_id_value->DefaultCastAs(LogicalType::INTEGER);\n+\t\t\tconst uint32_t field_id_int = IntegerValue::Get(field_id_integer_value);\n+\t\t\tif (!unique_field_ids.insert(field_id_int).second) {\n+\t\t\t\tthrow BinderException(\"Duplicate field_id %s found in FIELD_IDS\", field_id_integer_value.ToString());\n+\t\t\t}\n+\t\t\tfield_id = FieldID(field_id_int);\n+\t\t}\n+\t\tauto inserted = field_ids.ids->insert(make_pair(col_name, std::move(field_id)));\n+\t\tD_ASSERT(inserted.second);\n+\n+\t\tif (child_field_ids_value) {\n+\t\t\tconst auto &col_type = it->second;\n+\t\t\tif (col_type.id() != LogicalTypeId::LIST && col_type.id() != LogicalTypeId::MAP &&\n+\t\t\t    col_type.id() != LogicalTypeId::STRUCT) {\n+\t\t\t\tthrow BinderException(\"Column \\\"%s\\\" with type \\\"%s\\\" cannot have a nested FIELD_IDS specification\",\n+\t\t\t\t                      col_name, LogicalTypeIdToString(col_type.id()));\n+\t\t\t}\n+\n+\t\t\tGetFieldIDs(*child_field_ids_value, inserted.first->second.child_field_ids, unique_field_ids,\n+\t\t\t            GetChildNameToTypeMap(col_type));\n+\t\t}\n+\t}\n+}\n+\n unique_ptr<FunctionData> ParquetWriteBind(ClientContext &context, CopyInfo &info, vector<string> &names,\n                                           vector<LogicalType> &sql_types) {\n+\tD_ASSERT(names.size() == sql_types.size());\n \tauto bind_data = make_uniq<ParquetWriteBindData>();\n \tfor (auto &option : info.options) {\n \t\tauto loption = StringUtil::Lower(option.first);\n@@ -609,7 +762,27 @@ unique_ptr<FunctionData> ParquetWriteBind(ClientContext &context, CopyInfo &info\n \t\t\t\t\tcontinue;\n \t\t\t\t}\n \t\t\t}\n-\t\t\tthrow ParserException(\"Expected %s argument to be either [uncompressed, snappy, gzip or zstd]\", loption);\n+\t\t\tthrow BinderException(\"Expected %s argument to be either [uncompressed, snappy, gzip or zstd]\", loption);\n+\t\t} else if (loption == \"field_ids\") {\n+\t\t\tif (option.second.size() != 1) {\n+\t\t\t\tthrow BinderException(\"FIELD_IDS requires exactly one argument\");\n+\t\t\t}\n+\t\t\tif (option.second[0].type().id() == LogicalTypeId::VARCHAR &&\n+\t\t\t    StringUtil::Lower(StringValue::Get(option.second[0])) == \"auto\") {\n+\t\t\t\tidx_t field_id = 0;\n+\t\t\t\tGenerateFieldIDs(bind_data->field_ids, field_id, names, sql_types);\n+\t\t\t} else {\n+\t\t\t\tunordered_set<uint32_t> unique_field_ids;\n+\t\t\t\tcase_insensitive_map_t<LogicalType> name_to_type_map;\n+\t\t\t\tfor (idx_t col_idx = 0; col_idx < names.size(); col_idx++) {\n+\t\t\t\t\tif (names[col_idx] == FieldID::DUCKDB_FIELD_ID) {\n+\t\t\t\t\t\tthrow BinderException(\"Cannot have a column named \\\"%s\\\" when writing FIELD_IDS\",\n+\t\t\t\t\t\t                      FieldID::DUCKDB_FIELD_ID);\n+\t\t\t\t\t}\n+\t\t\t\t\tname_to_type_map.emplace(names[col_idx], sql_types[col_idx]);\n+\t\t\t\t}\n+\t\t\t\tGetFieldIDs(option.second[0], bind_data->field_ids, unique_field_ids, name_to_type_map);\n+\t\t\t}\n \t\t} else {\n \t\t\tthrow NotImplementedException(\"Unrecognized option for PARQUET: %s\", option.first.c_str());\n \t\t}\n@@ -625,8 +798,8 @@ unique_ptr<GlobalFunctionData> ParquetWriteInitializeGlobal(ClientContext &conte\n \tauto &parquet_bind = bind_data.Cast<ParquetWriteBindData>();\n \n \tauto &fs = FileSystem::GetFileSystem(context);\n-\tglobal_state->writer =\n-\t    make_uniq<ParquetWriter>(fs, file_path, parquet_bind.sql_types, parquet_bind.column_names, parquet_bind.codec);\n+\tglobal_state->writer = make_uniq<ParquetWriter>(fs, file_path, parquet_bind.sql_types, parquet_bind.column_names,\n+\t                                                parquet_bind.codec, parquet_bind.field_ids.Copy());\n \treturn std::move(global_state);\n }\n \n@@ -637,12 +810,12 @@ void ParquetWriteSink(ExecutionContext &context, FunctionData &bind_data_p, Glob\n \tauto &local_state = lstate.Cast<ParquetWriteLocalState>();\n \n \t// append data to the local (buffered) chunk collection\n-\tlocal_state.buffer.Append(input);\n+\tlocal_state.buffer.Append(local_state.append_state, input);\n \tif (local_state.buffer.Count() > bind_data.row_group_size) {\n \t\t// if the chunk collection exceeds a certain size we flush it to the parquet file\n+\t\tlocal_state.append_state.current_chunk_state.handles.clear();\n \t\tglobal_state.writer->Flush(local_state.buffer);\n-\t\t// and reset the buffer\n-\t\tlocal_state.buffer.Reset();\n+\t\tlocal_state.buffer.InitializeAppend(local_state.append_state);\n \t}\n }\n \ndiff --git a/extension/parquet/parquet_reader.cpp b/extension/parquet/parquet_reader.cpp\nindex 34c7d3c1c3ea..f4d54781e455 100644\n--- a/extension/parquet/parquet_reader.cpp\n+++ b/extension/parquet/parquet_reader.cpp\n@@ -48,7 +48,7 @@ using duckdb_parquet::format::SchemaElement;\n using duckdb_parquet::format::Statistics;\n using duckdb_parquet::format::Type;\n \n-static duckdb::unique_ptr<duckdb_apache::thrift::protocol::TProtocol>\n+static unique_ptr<duckdb_apache::thrift::protocol::TProtocol>\n CreateThriftProtocol(Allocator &allocator, FileHandle &file_handle, bool prefetch_mode) {\n \tauto transport = make_shared<ThriftFileTransport>(allocator, file_handle, prefetch_mode);\n \treturn make_uniq<duckdb_apache::thrift::protocol::TCompactProtocolT<ThriftFileTransport>>(std::move(transport));\n@@ -271,7 +271,7 @@ unique_ptr<ColumnReader> ParquetReader::CreateReaderRecursive(idx_t depth, idx_t\n \t}\n \tif (s_ele.__isset.num_children && s_ele.num_children > 0) { // inner node\n \t\tchild_list_t<LogicalType> child_types;\n-\t\tvector<duckdb::unique_ptr<ColumnReader>> child_readers;\n+\t\tvector<unique_ptr<ColumnReader>> child_readers;\n \n \t\tidx_t c_idx = 0;\n \t\twhile (c_idx < (idx_t)s_ele.num_children) {\n@@ -287,7 +287,7 @@ unique_ptr<ColumnReader> ParquetReader::CreateReaderRecursive(idx_t depth, idx_t\n \t\t\tc_idx++;\n \t\t}\n \t\tD_ASSERT(!child_types.empty());\n-\t\tduckdb::unique_ptr<ColumnReader> result;\n+\t\tunique_ptr<ColumnReader> result;\n \t\tLogicalType result_type;\n \n \t\tbool is_repeated = repetition_type == FieldRepetitionType::REPEATED;\ndiff --git a/extension/parquet/parquet_statistics.cpp b/extension/parquet/parquet_statistics.cpp\nindex 5f243aecf721..b11f62d262d2 100644\n--- a/extension/parquet/parquet_statistics.cpp\n+++ b/extension/parquet/parquet_statistics.cpp\n@@ -1,12 +1,13 @@\n #include \"parquet_statistics.hpp\"\n+\n+#include \"duckdb.hpp\"\n #include \"parquet_decimal_utils.hpp\"\n #include \"parquet_timestamp.hpp\"\n #include \"string_column_reader.hpp\"\n-#include \"duckdb.hpp\"\n #ifndef DUCKDB_AMALGAMATION\n #include \"duckdb/common/types/blob.hpp\"\n-#include \"duckdb/common/types/value.hpp\"\n #include \"duckdb/common/types/time.hpp\"\n+#include \"duckdb/common/types/value.hpp\"\n #endif\n \n namespace duckdb {\n@@ -14,9 +15,9 @@ namespace duckdb {\n using duckdb_parquet::format::ConvertedType;\n using duckdb_parquet::format::Type;\n \n-static duckdb::unique_ptr<BaseStatistics> CreateNumericStats(const LogicalType &type,\n-                                                             const duckdb_parquet::format::SchemaElement &schema_ele,\n-                                                             const duckdb_parquet::format::Statistics &parquet_stats) {\n+static unique_ptr<BaseStatistics> CreateNumericStats(const LogicalType &type,\n+                                                     const duckdb_parquet::format::SchemaElement &schema_ele,\n+                                                     const duckdb_parquet::format::Statistics &parquet_stats) {\n \tauto stats = NumericStats::CreateUnknown(type);\n \n \t// for reasons unknown to science, Parquet defines *both* `min` and `min_value` as well as `max` and\n@@ -226,7 +227,7 @@ unique_ptr<BaseStatistics> ParquetStatisticsUtils::TransformColumnStatistics(con\n \t\treturn nullptr;\n \t}\n \tauto &parquet_stats = column_chunk.meta_data.statistics;\n-\tduckdb::unique_ptr<BaseStatistics> row_group_stats;\n+\tunique_ptr<BaseStatistics> row_group_stats;\n \n \tswitch (type.id()) {\n \tcase LogicalTypeId::UTINYINT:\ndiff --git a/extension/parquet/parquet_writer.cpp b/extension/parquet/parquet_writer.cpp\nindex 843e5d4707d2..a67831857e9d 100644\n--- a/extension/parquet/parquet_writer.cpp\n+++ b/extension/parquet/parquet_writer.cpp\n@@ -29,6 +29,30 @@ using duckdb_parquet::format::PageType;\n using ParquetRowGroup = duckdb_parquet::format::RowGroup;\n using duckdb_parquet::format::Type;\n \n+ChildFieldIDs::ChildFieldIDs() {\n+\tids = make_uniq<case_insensitive_map_t<FieldID>>();\n+}\n+\n+ChildFieldIDs ChildFieldIDs::Copy() const {\n+\tChildFieldIDs result;\n+\tfor (const auto &id : *ids) {\n+\t\tresult.ids->emplace(id.first, id.second.Copy());\n+\t}\n+\treturn result;\n+}\n+\n+FieldID::FieldID() : set(false) {\n+}\n+\n+FieldID::FieldID(int32_t field_id_p) : set(true), field_id(field_id_p) {\n+}\n+\n+FieldID FieldID::Copy() const {\n+\tauto result = set ? FieldID(field_id) : FieldID();\n+\tresult.child_field_ids = child_field_ids.Copy();\n+\treturn result;\n+}\n+\n class MyTransport : public TTransport {\n public:\n \texplicit MyTransport(Serializer &serializer) : serializer(serializer) {\n@@ -226,8 +250,9 @@ void VerifyUniqueNames(const vector<string> &names) {\n }\n \n ParquetWriter::ParquetWriter(FileSystem &fs, string file_name_p, vector<LogicalType> types_p, vector<string> names_p,\n-                             CompressionCodec::type codec)\n-    : file_name(std::move(file_name_p)), sql_types(std::move(types_p)), column_names(std::move(names_p)), codec(codec) {\n+                             CompressionCodec::type codec, ChildFieldIDs field_ids_p)\n+    : file_name(std::move(file_name_p)), sql_types(std::move(types_p)), column_names(std::move(names_p)), codec(codec),\n+      field_ids(std::move(field_ids_p)) {\n \t// initialize the file writer\n \twriter = make_uniq<BufferedFileWriter>(fs, file_name.c_str(),\n \t                                       FileFlags::FILE_FLAGS_WRITE | FileFlags::FILE_FLAGS_FILE_CREATE_NEW);\n@@ -257,11 +282,18 @@ ParquetWriter::ParquetWriter(FileSystem &fs, string file_name_p, vector<LogicalT\n \tvector<string> schema_path;\n \tfor (idx_t i = 0; i < sql_types.size(); i++) {\n \t\tcolumn_writers.push_back(ColumnWriter::CreateWriterRecursive(file_meta_data.schema, *this, sql_types[i],\n-\t\t                                                             unique_names[i], schema_path));\n+\t\t                                                             unique_names[i], schema_path, &field_ids));\n \t}\n }\n \n void ParquetWriter::PrepareRowGroup(ColumnDataCollection &buffer, PreparedRowGroup &result) {\n+\t// We write 8 columns at a time so that iterating over ColumnDataCollection is more efficient\n+\tstatic constexpr idx_t COLUMNS_PER_PASS = 8;\n+\n+\t// We want these to be in-memory/hybrid so we don't have to copy over strings to the dictionary\n+\tD_ASSERT(buffer.GetAllocatorType() == ColumnDataAllocatorType::IN_MEMORY_ALLOCATOR ||\n+\t         buffer.GetAllocatorType() == ColumnDataAllocatorType::HYBRID);\n+\n \t// set up a new row group for this chunk collection\n \tauto &row_group = result.row_group;\n \trow_group.num_rows = buffer.Count();\n@@ -270,24 +302,52 @@ void ParquetWriter::PrepareRowGroup(ColumnDataCollection &buffer, PreparedRowGro\n \tauto &states = result.states;\n \t// iterate over each of the columns of the chunk collection and write them\n \tD_ASSERT(buffer.ColumnCount() == column_writers.size());\n-\tfor (idx_t col_idx = 0; col_idx < buffer.ColumnCount(); col_idx++) {\n-\t\tconst auto &col_writer = column_writers[col_idx];\n-\t\tauto write_state = col_writer->InitializeWriteState(row_group, buffer.GetAllocator());\n-\t\tif (col_writer->HasAnalyze()) {\n-\t\t\tfor (auto &chunk : buffer.Chunks()) {\n-\t\t\t\tcol_writer->Analyze(*write_state, nullptr, chunk.data[col_idx], chunk.size());\n+\tfor (idx_t col_idx = 0; col_idx < buffer.ColumnCount(); col_idx += COLUMNS_PER_PASS) {\n+\t\tconst auto next = MinValue<idx_t>(buffer.ColumnCount() - col_idx, COLUMNS_PER_PASS);\n+\t\tvector<column_t> column_ids;\n+\t\tvector<reference<ColumnWriter>> col_writers;\n+\t\tvector<unique_ptr<ColumnWriterState>> write_states;\n+\t\tfor (idx_t i = 0; i < next; i++) {\n+\t\t\tcolumn_ids.emplace_back(col_idx + i);\n+\t\t\tcol_writers.emplace_back(*column_writers[column_ids.back()]);\n+\t\t\twrite_states.emplace_back(col_writers.back().get().InitializeWriteState(row_group));\n+\t\t}\n+\n+\t\tfor (auto &chunk : buffer.Chunks({column_ids})) {\n+\t\t\tfor (idx_t i = 0; i < next; i++) {\n+\t\t\t\tif (col_writers[i].get().HasAnalyze()) {\n+\t\t\t\t\tcol_writers[i].get().Analyze(*write_states[i], nullptr, chunk.data[i], chunk.size());\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\n+\t\tfor (idx_t i = 0; i < next; i++) {\n+\t\t\tif (col_writers[i].get().HasAnalyze()) {\n+\t\t\t\tcol_writers[i].get().FinalizeAnalyze(*write_states[i]);\n+\t\t\t}\n+\t\t}\n+\n+\t\tfor (auto &chunk : buffer.Chunks({column_ids})) {\n+\t\t\tfor (idx_t i = 0; i < next; i++) {\n+\t\t\t\tcol_writers[i].get().Prepare(*write_states[i], nullptr, chunk.data[i], chunk.size());\n \t\t\t}\n-\t\t\tcol_writer->FinalizeAnalyze(*write_state);\n \t\t}\n-\t\tfor (auto &chunk : buffer.Chunks()) {\n-\t\t\tcol_writer->Prepare(*write_state, nullptr, chunk.data[col_idx], chunk.size());\n+\n+\t\tfor (idx_t i = 0; i < next; i++) {\n+\t\t\tcol_writers[i].get().BeginWrite(*write_states[i]);\n \t\t}\n-\t\tcol_writer->BeginWrite(*write_state);\n-\t\tfor (auto &chunk : buffer.Chunks()) {\n-\t\t\tcol_writer->Write(*write_state, chunk.data[col_idx], chunk.size());\n+\n+\t\tfor (auto &chunk : buffer.Chunks({column_ids})) {\n+\t\t\tfor (idx_t i = 0; i < next; i++) {\n+\t\t\t\tcol_writers[i].get().Write(*write_states[i], chunk.data[i], chunk.size());\n+\t\t\t}\n+\t\t}\n+\n+\t\tfor (auto &write_state : write_states) {\n+\t\t\tstates.push_back(std::move(write_state));\n \t\t}\n-\t\tstates.push_back(std::move(write_state));\n \t}\n+\tresult.heaps = buffer.GetHeapReferences();\n }\n \n void ParquetWriter::FlushRowGroup(PreparedRowGroup &prepared) {\n@@ -307,6 +367,8 @@ void ParquetWriter::FlushRowGroup(PreparedRowGroup &prepared) {\n \t// append the row group to the file meta data\n \tfile_meta_data.row_groups.push_back(row_group);\n \tfile_meta_data.num_rows += row_group.num_rows;\n+\n+\tprepared.heaps.clear();\n }\n \n void ParquetWriter::Flush(ColumnDataCollection &buffer) {\n@@ -316,6 +378,7 @@ void ParquetWriter::Flush(ColumnDataCollection &buffer) {\n \n \tPreparedRowGroup prepared_row_group;\n \tPrepareRowGroup(buffer, prepared_row_group);\n+\tbuffer.Reset();\n \n \tFlushRowGroup(prepared_row_group);\n }\ndiff --git a/extension/parquet/zstd_file_system.cpp b/extension/parquet/zstd_file_system.cpp\nindex 1998e3147ba3..08a477cf7259 100644\n--- a/extension/parquet/zstd_file_system.cpp\n+++ b/extension/parquet/zstd_file_system.cpp\n@@ -155,7 +155,7 @@ void ZstdStreamWrapper::Close() {\n \n class ZStdFile : public CompressedFile {\n public:\n-\tZStdFile(duckdb::unique_ptr<FileHandle> child_handle_p, const string &path, bool write)\n+\tZStdFile(unique_ptr<FileHandle> child_handle_p, const string &path, bool write)\n \t    : CompressedFile(zstd_fs, std::move(child_handle_p), path) {\n \t\tInitialize(write);\n \t}\n@@ -163,7 +163,7 @@ class ZStdFile : public CompressedFile {\n \tZStdFileSystem zstd_fs;\n };\n \n-unique_ptr<FileHandle> ZStdFileSystem::OpenCompressedFile(duckdb::unique_ptr<FileHandle> handle, bool write) {\n+unique_ptr<FileHandle> ZStdFileSystem::OpenCompressedFile(unique_ptr<FileHandle> handle, bool write) {\n \tauto path = handle->path;\n \treturn make_uniq<ZStdFile>(std::move(handle), path, write);\n }\ndiff --git a/extension/sqlsmith/statement_simplifier.cpp b/extension/sqlsmith/statement_simplifier.cpp\nindex 5fe09f99bf6c..05fd4de43288 100644\n--- a/extension/sqlsmith/statement_simplifier.cpp\n+++ b/extension/sqlsmith/statement_simplifier.cpp\n@@ -144,6 +144,7 @@ void StatementSimplifier::Simplify(QueryNode &node) {\n \t\tSimplify(node.Cast<SetOperationNode>());\n \t\tbreak;\n \tcase QueryNodeType::RECURSIVE_CTE_NODE:\n+\tcase QueryNodeType::CTE_NODE:\n \tdefault:\n \t\tbreak;\n \t}\ndiff --git a/scripts/amalgamation.py b/scripts/amalgamation.py\nindex 2b55f0e1baaa..3c30970efd75 100644\n--- a/scripts/amalgamation.py\n+++ b/scripts/amalgamation.py\n@@ -103,7 +103,7 @@ def get_includes(fpath, text):\n         included_file = x[1]\n         if skip_duckdb_includes and 'duckdb' in included_file:\n             continue\n-        if 'extension_helper.cpp' in fpath and (included_file.endswith('_extension.hpp') or included_file == 'extension_oote_loader.hpp'):\n+        if 'extension_helper.cpp' in fpath and (included_file.endswith('_extension.hpp') or included_file == 'generated_extension_loader.hpp'):\n             continue\n         if 'allocator.cpp' in fpath and included_file.endswith('jemalloc_extension.hpp'):\n             continue\ndiff --git a/scripts/build_out_of_tree_extensions.py b/scripts/build_out_of_tree_extensions.py\ndeleted file mode 100644\nindex b5d96307845d..000000000000\n--- a/scripts/build_out_of_tree_extensions.py\n+++ /dev/null\n@@ -1,80 +0,0 @@\n-import argparse\n-import csv\n-import subprocess\n-import tempfile\n-import os\n-import glob\n-import pathlib \n-import shutil\n-import sys\n-\n-parser = argparse.ArgumentParser(description='Builds out-of-tree extensions for DuckDB')\n-\n-parser.add_argument('--extensions', action='store',\n-                    help='CSV file with DuckDB extensions to build', default=os.path.join(\".github\", \"config\", \"extensions.csv\"))\n-parser.add_argument('--aarch64-cc', help='Enables Linux aarch64 crosscompile build', action='store_true')\n-parser.add_argument('--github-ref', action='store',\n-                    help='The github ref this job is launched from', default='')\n-\n-args = parser.parse_args()\n-\n-\n-tasks = []\n-\n-def exec(cmd):\n-    print(cmd)\n-    sys.stdout.flush()\n-\n-    res = subprocess.Popen(cmd.split(' '))\n-    res.wait()\n-    if res.returncode != 0:\n-        raise ValueError('failed to execute %s' % cmd)\n-\n-\n-reader = csv.reader(open(args.extensions))\n-# This skips the first row (i.e., the header) of the CSV file.\n-next(reader)\n-for row in reader:\n-    if len(row) != 4:\n-        raise ValueError('Row malformed' + str(row))\n-\n-    name = row[0].strip()\n-    url = row[1].strip()\n-    commit = row[2].strip()\n-    if not url:\n-        # This is not an out-of-tree extension\n-        continue\n-    if len(name) == 0 or len(url) == 0 or len(commit) != 40:\n-       raise ValueError('Row malformed' + str(row))\n-\n-    tasks+= [{'name' : row[0], 'url' : row[1], 'commit' : row[2], 'options' : row[3]}]\n-\n-def build_extension(task):\n-    print(task)\n-    if os.name == 'nt' and 'no-windows' in task['options']:\n-        return False\n-    if 'main-repo-only' in task['options'] and args.github_ref != 'refs/heads/master':\n-        return False\n-    return True\n-\n-basedir = os.getcwd()\n-\n-clonedirs = []\n-for task in tasks:\n-    print(task)\n-    if build_extension(task):\n-        clonedir = \"extension/\" + task['name'] + \"_clone\"\n-        if not os.path.isdir(clonedir):\n-            exec('git clone %s %s' % (task['url'], clonedir))\n-        os.chdir(clonedir)\n-        exec('git checkout %s' % (task['commit']))\n-        os.chdir(basedir)\n-        print(f\"Building extension \\\"{task['name']}\\\" from URL \\\"{task['url']}\\\" at commit \\\"{task['commit']}\\\" at clonedir \\\"{clonedir}\\\"\")\n-        clonedirs.append(clonedir)\n-\n-os.environ['BUILD_OUT_OF_TREE_EXTENSION'] = ';'.join(clonedirs)\n-if (args.aarch64_cc):\n-    os.environ['CC'] = \"aarch64-linux-gnu-gcc\"\n-    os.environ['CXX'] = \"aarch64-linux-gnu-g++\"\n-exec('make')\n-print(\"done\")\ndiff --git a/scripts/compute-extension-hash.sh b/scripts/compute-extension-hash.sh\nindex 56e2c8b2591e..3209dd381bf9 100755\n--- a/scripts/compute-extension-hash.sh\n+++ b/scripts/compute-extension-hash.sh\n@@ -9,11 +9,11 @@ FILES=\"x*\"\n for f in $FILES\n do\n \t# sha256 a segment\n-\tscripts/compute-hash.sh $f >> hash_concats\n+\topenssl dgst -binary -sha256 $f >> hash_concats\n \trm $f\n done\n \n # sha256 the concatenation\n-scripts/compute-hash.sh hash_concats > hash_composite\n+openssl dgst -binary -sha256 hash_concats > hash_composite\n \n cat hash_composite\ndiff --git a/scripts/compute-hash.sh b/scripts/compute-hash.sh\ndeleted file mode 100755\nindex 77148e5c3b08..000000000000\n--- a/scripts/compute-hash.sh\n+++ /dev/null\n@@ -1,5 +0,0 @@\n-#!/bin/bash\n-\n-openssl dgst -binary -sha256 $1 > hash\n-\n-cat hash\ndiff --git a/scripts/coverage_check.sh b/scripts/coverage_check.sh\nindex a0596b56b8c7..42c34e6425af 100755\n--- a/scripts/coverage_check.sh\n+++ b/scripts/coverage_check.sh\n@@ -6,10 +6,11 @@ lcov --config-file .github/workflows/lcovrc --capture --initial --directory . --\n \n # build with coverage enabled\n mkdir -p build/coverage\n-(cd build/coverage && cmake -E env CXXFLAGS=\"--coverage\" cmake -DBUILD_PARQUET_EXTENSION=1 -DBUILD_ICU_EXTENSION=1 -DBUILD_JSON_EXTENSION=1 -DBUILD_JEMALLOC_EXTENSION=1 -DBUILD_AUTOCOMPLETE_EXTENSION=1 -DENABLE_SANITIZER=0 -DCMAKE_BUILD_TYPE=Debug ../.. && cmake --build .)\n+(cd build/coverage && cmake -E env CXXFLAGS=\"--coverage\" cmake -DBUILD_PYTHON=1 -DBUILD_EXTENSIONS=\"parquet;json;jemalloc;autocomplete;icu\" -DENABLE_SANITIZER=0 -DCMAKE_BUILD_TYPE=Debug ../.. && cmake --build .)\n \n # run tests\n build/coverage/test/unittest\n+build/coverage/test/unittest \"[coverage]\"\n build/coverage/test/unittest \"[intraquery]\"\n build/coverage/test/unittest \"[interquery]\"\n build/coverage/test/unittest \"[detailed_profiler]\"\ndiff --git a/scripts/generate_extensions_function.py b/scripts/generate_extensions_function.py\nindex 7282a3c83516..4089f82dedf3 100644\n--- a/scripts/generate_extensions_function.py\n+++ b/scripts/generate_extensions_function.py\n@@ -26,12 +26,23 @@\n }\n \n functions = {}\n-ext_dir = os.path.join('..', '.github', 'config', 'extensions.csv')\n-ext_hpp = os.path.join(\"..\", \"src\",\"include\",\"duckdb\", \"main\", \"extension_entries.hpp\")\n-reader = csv.reader(open(ext_dir))\n-# This skips the first row (i.e., the header) of the CSV file.\n-next(reader)\n \n+# Parses the extension config files for which extension names there are to be expected\n+def parse_extension_configs():\n+    ext_configs = [\n+        os.path.join('..', '.github', 'config', 'out_of_tree_extensions.cmake'),\n+        os.path.join('..', '.github', 'config', 'in_tree_extensions.cmake')\n+    ]\n+    extension_names = []\n+    for file in ext_configs:\n+        with open(file, 'r') as file:\n+            data = file.read().replace('\\n', '')\n+        pattern = re.compile(r\"duckdb_extension_load\\s*\\(\\s*([A-z\\_0-9]*)\\s\")\n+        extension_names += [match.group(1) for match in pattern.finditer(data)]\n+    return extension_names\n+\n+extension_names = parse_extension_configs()\n+ext_hpp = os.path.join(\"..\", \"src\",\"include\",\"duckdb\", \"main\", \"extension_entries.hpp\")\n get_functions_query = \"select distinct function_name from duckdb_functions();\"\n get_settings_query = \"select distinct name from duckdb_settings();\"\n duckdb_path = os.path.join(\"..\",'build', 'release', 'duckdb')\n@@ -68,8 +79,7 @@ def update_extensions(extension_name, function_list, settings_list):\n     })\n \n \n-for extension in reader:\n-    extension_name = extension[0]\n+for extension_name in extension_names:\n     if extension_name not in extension_path:\n         if extension_name not in stored_functions or extension_name not in stored_settings:\n             print(f\"Missing extension {extension_name} and not found in stored_functions/stored_settings\")\ndiff --git a/src/CMakeLists.txt b/src/CMakeLists.txt\nindex 0200c15f6563..cda2d86cf880 100644\n--- a/src/CMakeLists.txt\n+++ b/src/CMakeLists.txt\n@@ -4,6 +4,8 @@ if(${DISABLE_THREADS})\n   add_definitions(-DDUCKDB_NO_THREADS)\n endif()\n \n+add_extension_definitions()\n+\n if(NOT MSVC)\n   set(CMAKE_CXX_FLAGS_DEBUG\n       \"${CMAKE_CXX_FLAGS_DEBUG} -Wextra -Wno-unused-parameter -Wno-redundant-move\"\ndiff --git a/src/catalog/catalog_entry/duck_table_entry.cpp b/src/catalog/catalog_entry/duck_table_entry.cpp\nindex f3d94bcc08fb..a228a836f7b5 100644\n--- a/src/catalog/catalog_entry/duck_table_entry.cpp\n+++ b/src/catalog/catalog_entry/duck_table_entry.cpp\n@@ -298,7 +298,7 @@ unique_ptr<CatalogEntry> DuckTableEntry::AddColumn(ClientContext &context, AddCo\n \tauto binder = Binder::CreateBinder(context);\n \tauto bound_create_info = binder->BindCreateTableInfo(std::move(create_info));\n \tauto new_storage =\n-\t    make_shared<DataTable>(context, *storage, info.new_column, bound_create_info->bound_defaults.back().get());\n+\t    make_shared<DataTable>(context, *storage, info.new_column, *bound_create_info->bound_defaults.back());\n \treturn make_uniq<DuckTableEntry>(catalog, schema, *bound_create_info, new_storage);\n }\n \ndiff --git a/src/catalog/default/default_functions.cpp b/src/catalog/default/default_functions.cpp\nindex cc9243dc2194..5fe2649b820c 100644\n--- a/src/catalog/default/default_functions.cpp\n+++ b/src/catalog/default/default_functions.cpp\n@@ -99,6 +99,19 @@ static DefaultMacro internal_macros[] = {\n \t{DEFAULT_SCHEMA, \"count_if\", {\"l\", nullptr}, \"sum(if(l, 1, 0))\"},\n \t{DEFAULT_SCHEMA, \"split_part\", {\"string\", \"delimiter\", \"position\", nullptr}, \"coalesce(string_split(string, delimiter)[position],'')\"},\n \n+    // FIXME implement as actual function if we encounter a lot of performance issues. Complexity now: n * m, with hashing possibly n + m\n+    {DEFAULT_SCHEMA, \"list_intersect\", {\"l1\", \"l2\", nullptr}, \"list_filter(l1, (x) -> list_contains(l2, x))\"},\n+    {DEFAULT_SCHEMA, \"array_intersect\", {\"l1\", \"l2\", nullptr}, \"list_intersect(l1, l2)\"},\n+\n+    {DEFAULT_SCHEMA, \"list_has_any\", {\"l1\", \"l2\", nullptr}, \"CASE WHEN l1 IS NULL THEN NULL WHEN l2 IS NULL THEN NULL WHEN len(list_intersect(l1, l2)) > 0 THEN true ELSE false END\"},\n+    {DEFAULT_SCHEMA, \"array_has_any\", {\"l1\", \"l2\", nullptr}, \"list_has_any(l1, l2)\" },\n+    {DEFAULT_SCHEMA, \"&&\", {\"l1\", \"l2\", nullptr}, \"list_has_any(l1, l2)\" }, // \"&&\" is the operator for \"list_has_any\n+\n+    {DEFAULT_SCHEMA, \"list_has_all\", {\"l1\", \"l2\", nullptr}, \"CASE WHEN l1 IS NULL THEN NULL WHEN l2 IS NULL THEN NULL WHEN len(list_intersect(l2, l1)) = len(list_filter(l2, x -> x IS NOT NULL)) THEN true ELSE false END\"},\n+    {DEFAULT_SCHEMA, \"array_has_all\", {\"l1\", \"l2\", nullptr}, \"list_has_all(l1, l2)\" },\n+    {DEFAULT_SCHEMA, \"@>\", {\"l1\", \"l2\", nullptr}, \"list_has_all(l1, l2)\" }, // \"@>\" is the operator for \"list_has_all\n+    {DEFAULT_SCHEMA, \"<@\", {\"l1\", \"l2\", nullptr}, \"list_has_all(l2, l1)\" }, // \"<@\" is the operator for \"list_has_all\n+\n \t// algebraic list aggregates\n \t{DEFAULT_SCHEMA, \"list_avg\", {\"l\", nullptr}, \"list_aggr(l, 'avg')\"},\n \t{DEFAULT_SCHEMA, \"list_var_samp\", {\"l\", nullptr}, \"list_aggr(l, 'var_samp')\"},\n@@ -205,6 +218,9 @@ unique_ptr<CatalogEntry> DefaultFunctionGenerator::CreateDefaultEntry(ClientCont\n vector<string> DefaultFunctionGenerator::GetDefaultEntries() {\n \tvector<string> result;\n \tfor (idx_t index = 0; internal_macros[index].name != nullptr; index++) {\n+\t\tif (StringUtil::Lower(internal_macros[index].name) != internal_macros[index].name) {\n+\t\t\tthrow InternalException(\"Default macro name %s should be lowercase\", internal_macros[index].name);\n+\t\t}\n \t\tif (internal_macros[index].schema == schema.name) {\n \t\t\tresult.emplace_back(internal_macros[index].name);\n \t\t}\ndiff --git a/src/common/CMakeLists.txt b/src/common/CMakeLists.txt\nindex cc9a25f36316..5ec1d4171cb1 100644\n--- a/src/common/CMakeLists.txt\n+++ b/src/common/CMakeLists.txt\n@@ -58,8 +58,3 @@ add_library_unity(\n set(ALL_OBJECT_FILES\n     ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_common>\n     PARENT_SCOPE)\n-\n-if(${BUILD_JEMALLOC_EXTENSION})\n-  include_directories(${PROJECT_SOURCE_DIR}/extension/jemalloc/include)\n-  add_definitions(-DBUILD_JEMALLOC_EXTENSION=${BUILD_JEMALLOC_EXTENSION})\n-endif()\ndiff --git a/src/common/adbc/adbc.cpp b/src/common/adbc/adbc.cpp\nindex 9765b551d0a7..b84be532a648 100644\n--- a/src/common/adbc/adbc.cpp\n+++ b/src/common/adbc/adbc.cpp\n@@ -44,10 +44,23 @@ duckdb_adbc::AdbcStatusCode duckdb_adbc_init(size_t count, struct duckdb_adbc::A\n \tdriver->ConnectionRollback = duckdb_adbc::ConnectionRollback;\n \tdriver->ConnectionReadPartition = duckdb_adbc::ConnectionReadPartition;\n \tdriver->StatementExecutePartitions = duckdb_adbc::StatementExecutePartitions;\n+\tdriver->ConnectionGetTableSchema = duckdb_adbc::ConnectionGetTableSchema;\n+\tdriver->StatementSetSubstraitPlan = duckdb_adbc::StatementSetSubstraitPlan;\n+\n \treturn ADBC_STATUS_OK;\n }\n \n namespace duckdb_adbc {\n+\n+struct DuckDBAdbcStatementWrapper {\n+\t::duckdb_connection connection;\n+\t::duckdb_arrow result;\n+\t::duckdb_prepared_statement statement;\n+\tchar *ingestion_table_name;\n+\tArrowArrayStream *ingestion_stream;\n+};\n+static AdbcStatusCode QueryInternal(struct AdbcConnection *connection, struct ArrowArrayStream *out, const char *query,\n+                                    struct AdbcError *error);\n AdbcStatusCode SetErrorMaybe(const void *result, AdbcError *error, const std::string &error_message) {\n \tif (!error) {\n \t\treturn ADBC_STATUS_INVALID_ARGUMENT;\n@@ -109,6 +122,28 @@ AdbcStatusCode DatabaseNew(struct AdbcDatabase *database, struct AdbcError *erro\n \treturn CheckResult(res, error, \"Failed to allocate\");\n }\n \n+AdbcStatusCode StatementSetSubstraitPlan(struct AdbcStatement *statement, const uint8_t *plan, size_t length,\n+                                         struct AdbcError *error) {\n+\tif (!statement) {\n+\t\tSetError(error, \"Statement is not set\");\n+\t\treturn ADBC_STATUS_INVALID_ARGUMENT;\n+\t}\n+\tif (!plan) {\n+\t\tSetError(error, \"Substrait Plan is not set\");\n+\t\treturn ADBC_STATUS_INVALID_ARGUMENT;\n+\t}\n+\tif (length == 0) {\n+\t\tSetError(error, \"Can't execute plan with size = 0\");\n+\t\treturn ADBC_STATUS_INVALID_ARGUMENT;\n+\t}\n+\tauto wrapper = reinterpret_cast<DuckDBAdbcStatementWrapper *>(statement->private_data);\n+\tauto plan_str = std::string(reinterpret_cast<const char *>(plan), length);\n+\tauto query = \"CALL from_substrait('\" + plan_str + \"'::BLOB)\";\n+\tauto res = duckdb_prepare(wrapper->connection, query.c_str(), &wrapper->statement);\n+\tauto error_msg = duckdb_prepare_error(wrapper->statement);\n+\treturn CheckResult(res, error, error_msg);\n+}\n+\n AdbcStatusCode DatabaseSetOption(struct AdbcDatabase *database, const char *key, const char *value,\n                                  struct AdbcError *error) {\n \tauto status = SetErrorMaybe(database, error, \"Missing database object\");\n@@ -159,6 +194,44 @@ AdbcStatusCode DatabaseRelease(struct AdbcDatabase *database, struct AdbcError *\n \treturn ADBC_STATUS_OK;\n }\n \n+AdbcStatusCode ConnectionGetTableSchema(struct AdbcConnection *connection, const char *catalog, const char *db_schema,\n+                                        const char *table_name, struct ArrowSchema *schema, struct AdbcError *error) {\n+\tif (!connection) {\n+\t\tSetError(error, \"Connection is not set\");\n+\t\treturn ADBC_STATUS_INVALID_ARGUMENT;\n+\t}\n+\tif (catalog != nullptr && strlen(catalog) > 0) {\n+\t\t// In DuckDB this is the name of the database, not sure what's the expected functionality here, so for now,\n+\t\t// scream.\n+\t\tSetError(error, \"Catalog Name is not used in DuckDB. It must be set to nullptr or an empty string\");\n+\t\treturn ADBC_STATUS_NOT_IMPLEMENTED;\n+\t} else if (db_schema == nullptr) {\n+\t\tSetError(error, \"AdbcConnectionGetTableSchema: must provide db_schema\");\n+\t\treturn ADBC_STATUS_INVALID_ARGUMENT;\n+\t} else if (table_name == nullptr) {\n+\t\tSetError(error, \"AdbcConnectionGetTableSchema: must provide table_name\");\n+\t\treturn ADBC_STATUS_INVALID_ARGUMENT;\n+\t} else if (strlen(table_name) == 0) {\n+\t\tSetError(error, \"AdbcConnectionGetTableSchema: must provide table_name\");\n+\t\treturn ADBC_STATUS_INVALID_ARGUMENT;\n+\t}\n+\tArrowArrayStream arrow_stream;\n+\n+\tstd::string query = \"SELECT * FROM \";\n+\tif (strlen(db_schema) > 0) {\n+\t\tquery += std::string(db_schema) + \".\";\n+\t}\n+\tquery += std::string(table_name) + \" LIMIT 0;\";\n+\n+\tauto success = QueryInternal(connection, &arrow_stream, query.c_str(), error);\n+\tif (success != ADBC_STATUS_OK) {\n+\t\treturn success;\n+\t}\n+\tarrow_stream.get_schema(&arrow_stream, schema);\n+\tarrow_stream.release(&arrow_stream);\n+\treturn ADBC_STATUS_OK;\n+}\n+\n AdbcStatusCode ConnectionNew(struct AdbcConnection *connection, struct AdbcError *error) {\n \tauto status = SetErrorMaybe(connection, error, \"Missing connection object\");\n \tif (status != ADBC_STATUS_OK) {\n@@ -400,14 +473,6 @@ AdbcStatusCode Ingest(duckdb_connection connection, const char *table_name, stru\n \treturn ADBC_STATUS_OK;\n }\n \n-struct DuckDBAdbcStatementWrapper {\n-\t::duckdb_connection connection;\n-\t::duckdb_arrow result;\n-\t::duckdb_prepared_statement statement;\n-\tchar *ingestion_table_name;\n-\tArrowArrayStream *ingestion_stream;\n-};\n-\n AdbcStatusCode StatementNew(struct AdbcConnection *connection, struct AdbcStatement *statement,\n                             struct AdbcError *error) {\n \n@@ -581,8 +646,8 @@ AdbcStatusCode StatementSetOption(struct AdbcStatement *statement, const char *k\n \treturn ADBC_STATUS_INVALID_ARGUMENT;\n }\n \n-static AdbcStatusCode QueryInternal(struct AdbcConnection *connection, struct ArrowArrayStream *out, const char *query,\n-                                    struct AdbcError *error) {\n+AdbcStatusCode QueryInternal(struct AdbcConnection *connection, struct ArrowArrayStream *out, const char *query,\n+                             struct AdbcError *error) {\n \tAdbcStatement statement;\n \n \tauto status = StatementNew(connection, &statement, error);\ndiff --git a/src/common/adbc/driver_manager.cpp b/src/common/adbc/driver_manager.cpp\nindex 1213929e3064..7414a070afdf 100644\n--- a/src/common/adbc/driver_manager.cpp\n+++ b/src/common/adbc/driver_manager.cpp\n@@ -109,8 +109,9 @@ struct ManagerDriverState {\n static AdbcStatusCode ReleaseDriver(struct AdbcDriver *driver, struct AdbcError *error) {\n \tAdbcStatusCode status = ADBC_STATUS_OK;\n \n-\tif (!driver->private_manager)\n+\tif (!driver->private_manager) {\n \t\treturn status;\n+\t}\n \tManagerDriverState *state = reinterpret_cast<ManagerDriverState *>(driver->private_manager);\n \n \tif (state->driver_release) {\n@@ -138,11 +139,6 @@ AdbcStatusCode ConnectionGetInfo(struct AdbcConnection *connection, uint32_t *in\n \treturn ADBC_STATUS_NOT_IMPLEMENTED;\n }\n \n-AdbcStatusCode ConnectionGetTableSchema(struct AdbcConnection *, const char *, const char *, const char *,\n-                                        struct ArrowSchema *, struct AdbcError *error) {\n-\treturn ADBC_STATUS_NOT_IMPLEMENTED;\n-}\n-\n AdbcStatusCode StatementBind(struct AdbcStatement *, struct ArrowArray *, struct ArrowSchema *,\n                              struct AdbcError *error) {\n \treturn ADBC_STATUS_NOT_IMPLEMENTED;\n@@ -152,9 +148,6 @@ AdbcStatusCode StatementGetParameterSchema(struct AdbcStatement *statement, stru\n                                            struct AdbcError *error) {\n \treturn ADBC_STATUS_NOT_IMPLEMENTED;\n }\n-AdbcStatusCode StatementSetSubstraitPlan(struct AdbcStatement *, const uint8_t *, size_t, struct AdbcError *error) {\n-\treturn ADBC_STATUS_NOT_IMPLEMENTED;\n-}\n \n /// Temporary state while the database is being configured.\n struct TempDatabase {\n@@ -351,15 +344,17 @@ AdbcStatusCode AdbcConnectionInit(struct AdbcConnection *connection, struct Adbc\n \tdelete args;\n \n \tauto status = database->private_driver->ConnectionNew(connection, error);\n-\tif (status != ADBC_STATUS_OK)\n+\tif (status != ADBC_STATUS_OK) {\n \t\treturn status;\n+\t}\n \tconnection->private_driver = database->private_driver;\n \n \tfor (const auto &option : options) {\n \t\tstatus = database->private_driver->ConnectionSetOption(connection, option.first.c_str(), option.second.c_str(),\n \t\t                                                       error);\n-\t\tif (status != ADBC_STATUS_OK)\n+\t\tif (status != ADBC_STATUS_OK) {\n \t\t\treturn status;\n+\t\t}\n \t}\n \treturn connection->private_driver->ConnectionInit(connection, database, error);\n }\ndiff --git a/src/common/allocator.cpp b/src/common/allocator.cpp\nindex e00b27d7ee9c..939a790dc8f7 100644\n--- a/src/common/allocator.cpp\n+++ b/src/common/allocator.cpp\n@@ -14,7 +14,13 @@\n #include <execinfo.h>\n #endif\n \n-#if defined(BUILD_JEMALLOC_EXTENSION) && !defined(WIN32)\n+#ifndef USE_JEMALLOC\n+#if defined(DUCKDB_EXTENSION_JEMALLOC_LINKED) && DUCKDB_EXTENSION_JEMALLOC_LINKED && !defined(WIN32)\n+#define USE_JEMALLOC\n+#endif\n+#endif\n+\n+#ifdef USE_JEMALLOC\n #include \"jemalloc_extension.hpp\"\n #endif\n \n@@ -89,7 +95,7 @@ PrivateAllocatorData::~PrivateAllocatorData() {\n //===--------------------------------------------------------------------===//\n // Allocator\n //===--------------------------------------------------------------------===//\n-#if defined(BUILD_JEMALLOC_EXTENSION) && !defined(WIN32)\n+#ifdef USE_JEMALLOC\n Allocator::Allocator()\n     : Allocator(JemallocExtension::Allocate, JemallocExtension::Free, JemallocExtension::Reallocate, nullptr) {\n }\n@@ -177,6 +183,12 @@ Allocator &Allocator::DefaultAllocator() {\n \treturn *DefaultAllocatorReference();\n }\n \n+void Allocator::ThreadFlush(idx_t threshold) {\n+#ifdef USE_JEMALLOC\n+\tJemallocExtension::ThreadFlush(threshold);\n+#endif\n+}\n+\n //===--------------------------------------------------------------------===//\n // Debug Info (extended)\n //===--------------------------------------------------------------------===//\ndiff --git a/src/common/arrow/arrow_appender.cpp b/src/common/arrow/arrow_appender.cpp\nindex 091c291e8ab3..4ff92ccd7193 100644\n--- a/src/common/arrow/arrow_appender.cpp\n+++ b/src/common/arrow/arrow_appender.cpp\n@@ -153,7 +153,9 @@ struct ArrowIntervalConverter {\n template <class TGT, class SRC = TGT, class OP = ArrowScalarConverter>\n struct ArrowScalarBaseData {\n \tstatic void Append(ArrowAppendData &append_data, Vector &input, idx_t from, idx_t to, idx_t input_size) {\n+\t\tD_ASSERT(to >= from);\n \t\tidx_t size = to - from;\n+\t\tD_ASSERT(size <= input_size);\n \t\tUnifiedVectorFormat format;\n \t\tinput.ToUnifiedFormat(input_size, format);\n \n@@ -489,16 +491,9 @@ struct ArrowListData {\n \t\tSelectionVector child_sel(child_indices.data());\n \t\tauto &child = ListVector::GetEntry(input);\n \t\tauto child_size = child_indices.size();\n-\t\tif (size != input_size) {\n-\t\t\t// Let's avoid doing this\n-\t\t\tVector child_copy(child.GetType());\n-\t\t\tchild_copy.Slice(child, child_sel, child_size);\n-\t\t\tappend_data.child_data[0]->append_vector(*append_data.child_data[0], child_copy, 0, child_size, child_size);\n-\t\t} else {\n-\t\t\t// We don't care about the vector, slice it\n-\t\t\tchild.Slice(child_sel, child_size);\n-\t\t\tappend_data.child_data[0]->append_vector(*append_data.child_data[0], child, 0, child_size, child_size);\n-\t\t}\n+\t\tVector child_copy(child.GetType());\n+\t\tchild_copy.Slice(child, child_sel, child_size);\n+\t\tappend_data.child_data[0]->append_vector(*append_data.child_data[0], child_copy, 0, child_size, child_size);\n \t\tappend_data.row_count += size;\n \t}\n \ndiff --git a/src/common/assert.cpp b/src/common/assert.cpp\nindex d2880b55e61f..3397fce21739 100644\n--- a/src/common/assert.cpp\n+++ b/src/common/assert.cpp\n@@ -4,6 +4,9 @@\n namespace duckdb {\n \n void DuckDBAssertInternal(bool condition, const char *condition_name, const char *file, int linenr) {\n+#ifdef DISABLE_ASSERTIONS\n+\treturn;\n+#endif\n \tif (condition) {\n \t\treturn;\n \t}\ndiff --git a/src/common/enum_util.cpp b/src/common/enum_util.cpp\nindex 63cbc2f7d183..63166ad1d1cd 100644\n--- a/src/common/enum_util.cpp\n+++ b/src/common/enum_util.cpp\n@@ -879,6 +879,8 @@ const char *EnumUtil::ToChars<QueryNodeType>(QueryNodeType value) {\n \t\treturn \"BOUND_SUBQUERY_NODE\";\n \tcase QueryNodeType::RECURSIVE_CTE_NODE:\n \t\treturn \"RECURSIVE_CTE_NODE\";\n+\tcase QueryNodeType::CTE_NODE:\n+\t\treturn \"CTE_NODE\";\n \tdefault:\n \t\tthrow NotImplementedException(StringUtil::Format(\"Enum value: '%d' not implemented\", value));\n \t}\n@@ -898,6 +900,9 @@ QueryNodeType EnumUtil::FromString<QueryNodeType>(const char *value) {\n \tif (StringUtil::Equals(value, \"RECURSIVE_CTE_NODE\")) {\n \t\treturn QueryNodeType::RECURSIVE_CTE_NODE;\n \t}\n+\tif (StringUtil::Equals(value, \"CTE_NODE\")) {\n+\t\treturn QueryNodeType::RECURSIVE_CTE_NODE;\n+\t}\n \tthrow NotImplementedException(StringUtil::Format(\"Enum value: '%s' not implemented\", value));\n }\n \n@@ -2112,6 +2117,33 @@ LogicalTypeId EnumUtil::FromString<LogicalTypeId>(const char *value) {\n \tthrow NotImplementedException(StringUtil::Format(\"Enum value: '%s' not implemented\", value));\n }\n \n+template <>\n+CTEMaterialize EnumUtil::FromString<CTEMaterialize>(const char *value) {\n+\tif (StringUtil::Equals(value, \"CTE_MATERIALIZE_DEFAULT\")) {\n+\t\treturn CTEMaterialize::CTE_MATERIALIZE_DEFAULT;\n+\t} else if (StringUtil::Equals(value, \"CTE_MATERIALIZE_ALWAYS\")) {\n+\t\treturn CTEMaterialize::CTE_MATERIALIZE_ALWAYS;\n+\t} else if (StringUtil::Equals(value, \"CTE_MATERIALIZE_NEVER\")) {\n+\t\treturn CTEMaterialize::CTE_MATERIALIZE_NEVER;\n+\t} else {\n+\t\tthrow NotImplementedException(StringUtil::Format(\"Enum value: '%s' not implemented\", value));\n+\t}\n+}\n+\n+template <>\n+const char *EnumUtil::ToChars<CTEMaterialize>(CTEMaterialize value) {\n+\tswitch (value) {\n+\tcase CTEMaterialize::CTE_MATERIALIZE_DEFAULT:\n+\t\treturn \"CTE_MATERIALIZE_DEFAULT\";\n+\tcase CTEMaterialize::CTE_MATERIALIZE_ALWAYS:\n+\t\treturn \"CTE_MATERIALIZE_ALWAYS\";\n+\tcase CTEMaterialize::CTE_MATERIALIZE_NEVER:\n+\t\treturn \"CTE_MATERIALIZE_NEVER\";\n+\tdefault:\n+\t\tthrow NotImplementedException(StringUtil::Format(\"Enum value: '%s' not implemented\", value));\n+\t}\n+}\n+\n template <>\n const char *EnumUtil::ToChars<OutputStream>(OutputStream value) {\n \tswitch (value) {\n@@ -2578,6 +2610,8 @@ const char *EnumUtil::ToChars<PhysicalOperatorType>(PhysicalOperatorType value)\n \t\treturn \"CHUNK_SCAN\";\n \tcase PhysicalOperatorType::RECURSIVE_CTE_SCAN:\n \t\treturn \"RECURSIVE_CTE_SCAN\";\n+\tcase PhysicalOperatorType::CTE_SCAN:\n+\t\treturn \"CTE_SCAN\";\n \tcase PhysicalOperatorType::DELIM_SCAN:\n \t\treturn \"DELIM_SCAN\";\n \tcase PhysicalOperatorType::EXPRESSION_SCAN:\n@@ -2748,6 +2782,9 @@ PhysicalOperatorType EnumUtil::FromString<PhysicalOperatorType>(const char *valu\n \tif (StringUtil::Equals(value, \"RECURSIVE_CTE_SCAN\")) {\n \t\treturn PhysicalOperatorType::RECURSIVE_CTE_SCAN;\n \t}\n+\tif (StringUtil::Equals(value, \"CTE_SCAN\")) {\n+\t\treturn PhysicalOperatorType::CTE_SCAN;\n+\t}\n \tif (StringUtil::Equals(value, \"DELIM_SCAN\")) {\n \t\treturn PhysicalOperatorType::DELIM_SCAN;\n \t}\n@@ -4649,6 +4686,8 @@ const char *EnumUtil::ToChars<LogicalOperatorType>(LogicalOperatorType value) {\n \t\treturn \"LOGICAL_INTERSECT\";\n \tcase LogicalOperatorType::LOGICAL_RECURSIVE_CTE:\n \t\treturn \"LOGICAL_RECURSIVE_CTE\";\n+\tcase LogicalOperatorType::LOGICAL_MATERIALIZED_CTE:\n+\t\treturn \"LOGICAL_MATERIALIZED_CTE\";\n \tcase LogicalOperatorType::LOGICAL_INSERT:\n \t\treturn \"LOGICAL_INSERT\";\n \tcase LogicalOperatorType::LOGICAL_DELETE:\n@@ -4804,6 +4843,9 @@ LogicalOperatorType EnumUtil::FromString<LogicalOperatorType>(const char *value)\n \tif (StringUtil::Equals(value, \"LOGICAL_RECURSIVE_CTE\")) {\n \t\treturn LogicalOperatorType::LOGICAL_RECURSIVE_CTE;\n \t}\n+\tif (StringUtil::Equals(value, \"LOGICAL_MATERIALIZED_CTE\")) {\n+\t\treturn LogicalOperatorType::LOGICAL_MATERIALIZED_CTE;\n+\t}\n \tif (StringUtil::Equals(value, \"LOGICAL_INSERT\")) {\n \t\treturn LogicalOperatorType::LOGICAL_INSERT;\n \t}\n@@ -5616,8 +5658,6 @@ ExplainOutputType EnumUtil::FromString<ExplainOutputType>(const char *value) {\n template <>\n const char *EnumUtil::ToChars<NType>(NType value) {\n \tswitch (value) {\n-\tcase NType::PREFIX_SEGMENT:\n-\t\treturn \"PREFIX_SEGMENT\";\n \tcase NType::LEAF_SEGMENT:\n \t\treturn \"LEAF_SEGMENT\";\n \tcase NType::LEAF:\n@@ -5637,9 +5677,6 @@ const char *EnumUtil::ToChars<NType>(NType value) {\n \n template <>\n NType EnumUtil::FromString<NType>(const char *value) {\n-\tif (StringUtil::Equals(value, \"PREFIX_SEGMENT\")) {\n-\t\treturn NType::PREFIX_SEGMENT;\n-\t}\n \tif (StringUtil::Equals(value, \"LEAF_SEGMENT\")) {\n \t\treturn NType::LEAF_SEGMENT;\n \t}\ndiff --git a/src/common/enums/logical_operator_type.cpp b/src/common/enums/logical_operator_type.cpp\nindex f5313c14a18c..a941343a22ec 100644\n--- a/src/common/enums/logical_operator_type.cpp\n+++ b/src/common/enums/logical_operator_type.cpp\n@@ -22,6 +22,8 @@ string LogicalOperatorToString(LogicalOperatorType type) {\n \t\treturn \"ANY_JOIN\";\n \tcase LogicalOperatorType::LOGICAL_ASOF_JOIN:\n \t\treturn \"ASOF_JOIN\";\n+\tcase LogicalOperatorType::LOGICAL_DEPENDENT_JOIN:\n+\t\treturn \"DEPENDENT_JOIN\";\n \tcase LogicalOperatorType::LOGICAL_COMPARISON_JOIN:\n \t\treturn \"COMPARISON_JOIN\";\n \tcase LogicalOperatorType::LOGICAL_DELIM_JOIN:\n@@ -86,6 +88,8 @@ string LogicalOperatorToString(LogicalOperatorType type) {\n \t\treturn \"VACUUM\";\n \tcase LogicalOperatorType::LOGICAL_RECURSIVE_CTE:\n \t\treturn \"REC_CTE\";\n+\tcase LogicalOperatorType::LOGICAL_MATERIALIZED_CTE:\n+\t\treturn \"CTE\";\n \tcase LogicalOperatorType::LOGICAL_CTE_REF:\n \t\treturn \"CTE_SCAN\";\n \tcase LogicalOperatorType::LOGICAL_SHOW:\ndiff --git a/src/common/enums/optimizer_type.cpp b/src/common/enums/optimizer_type.cpp\nindex 8336ce99caee..480e9eb51a95 100644\n--- a/src/common/enums/optimizer_type.cpp\n+++ b/src/common/enums/optimizer_type.cpp\n@@ -25,6 +25,8 @@ static DefaultOptimizerType internal_optimizer_types[] = {\n     {\"common_aggregate\", OptimizerType::COMMON_AGGREGATE},\n     {\"column_lifetime\", OptimizerType::COLUMN_LIFETIME},\n     {\"top_n\", OptimizerType::TOP_N},\n+    {\"compressed_materialization\", OptimizerType::COMPRESSED_MATERIALIZATION},\n+    {\"duplicate_groups\", OptimizerType::DUPLICATE_GROUPS},\n     {\"reorder_filter\", OptimizerType::REORDER_FILTER},\n     {\"extension\", OptimizerType::EXTENSION},\n     {nullptr, OptimizerType::INVALID}};\ndiff --git a/src/common/enums/physical_operator_type.cpp b/src/common/enums/physical_operator_type.cpp\nindex ba6203b26a08..e07942d1ee42 100644\n--- a/src/common/enums/physical_operator_type.cpp\n+++ b/src/common/enums/physical_operator_type.cpp\n@@ -103,8 +103,12 @@ string PhysicalOperatorToString(PhysicalOperatorType type) {\n \t\treturn \"VACUUM\";\n \tcase PhysicalOperatorType::RECURSIVE_CTE:\n \t\treturn \"REC_CTE\";\n+\tcase PhysicalOperatorType::CTE:\n+\t\treturn \"CTE\";\n \tcase PhysicalOperatorType::RECURSIVE_CTE_SCAN:\n \t\treturn \"REC_CTE_SCAN\";\n+\tcase PhysicalOperatorType::CTE_SCAN:\n+\t\treturn \"CTE_SCAN\";\n \tcase PhysicalOperatorType::EXPRESSION_SCAN:\n \t\treturn \"EXPRESSION_SCAN\";\n \tcase PhysicalOperatorType::ALTER:\ndiff --git a/src/common/file_system.cpp b/src/common/file_system.cpp\nindex 753e03b56f23..0b509646ba38 100644\n--- a/src/common/file_system.cpp\n+++ b/src/common/file_system.cpp\n@@ -23,6 +23,14 @@\n #include <sys/stat.h>\n #include <sys/types.h>\n #include <unistd.h>\n+\n+#ifdef __MVS__\n+#define _XOPEN_SOURCE_EXTENDED 1\n+#include <sys/resource.h>\n+// enjoy - https://reviews.llvm.org/D92110\n+#define PATH_MAX _XOPEN_PATH_MAX\n+#endif\n+\n #else\n #include <string>\n #include <sysinfoapi.h>\n@@ -79,7 +87,14 @@ void FileSystem::SetWorkingDirectory(const string &path) {\n \n idx_t FileSystem::GetAvailableMemory() {\n \terrno = 0;\n+\n+#ifdef __MVS__\n+\tstruct rlimit limit;\n+\tint rlim_rc = getrlimit(RLIMIT_AS, &limit);\n+\tidx_t max_memory = MinValue<idx_t>(limit.rlim_max, UINTPTR_MAX);\n+#else\n \tidx_t max_memory = MinValue<idx_t>((idx_t)sysconf(_SC_PHYS_PAGES) * (idx_t)sysconf(_SC_PAGESIZE), UINTPTR_MAX);\n+#endif\n \tif (errno != 0) {\n \t\treturn DConstants::INVALID_INDEX;\n \t}\ndiff --git a/src/common/radix_partitioning.cpp b/src/common/radix_partitioning.cpp\nindex 88dded4b3cdd..d989e4788964 100644\n--- a/src/common/radix_partitioning.cpp\n+++ b/src/common/radix_partitioning.cpp\n@@ -69,10 +69,6 @@ struct HashsToBinsFunctor {\n \t}\n };\n \n-void RadixPartitioning::HashesToBins(Vector &hashes, idx_t radix_bits, Vector &bins, idx_t count) {\n-\treturn RadixBitsSwitch<HashsToBinsFunctor, void>(radix_bits, hashes, bins, count);\n-}\n-\n //===--------------------------------------------------------------------===//\n // Row Data Partitioning\n //===--------------------------------------------------------------------===//\ndiff --git a/src/common/sort/merge_sorter.cpp b/src/common/sort/merge_sorter.cpp\nindex 24ce46619bb1..7d2f6a1dc4e1 100644\n--- a/src/common/sort/merge_sorter.cpp\n+++ b/src/common/sort/merge_sorter.cpp\n@@ -273,16 +273,13 @@ void MergeSorter::ComputeMerge(const idx_t &count, bool left_smaller[]) {\n \t\t\tbreak;\n \t\t}\n \t\t// Pin the radix sorting data\n-\t\tif (!l_done) {\n-\t\t\tleft->PinRadix(l.block_idx);\n-\t\t\tl_radix_ptr = left->RadixPtr();\n-\t\t}\n-\t\tif (!r_done) {\n-\t\t\tright->PinRadix(r.block_idx);\n-\t\t\tr_radix_ptr = right->RadixPtr();\n-\t\t}\n-\t\tconst idx_t &l_count = !l_done ? l_sorted_block.radix_sorting_data[l.block_idx]->count : 0;\n-\t\tconst idx_t &r_count = !r_done ? r_sorted_block.radix_sorting_data[r.block_idx]->count : 0;\n+\t\tleft->PinRadix(l.block_idx);\n+\t\tl_radix_ptr = left->RadixPtr();\n+\t\tright->PinRadix(r.block_idx);\n+\t\tr_radix_ptr = right->RadixPtr();\n+\n+\t\tconst idx_t l_count = l_sorted_block.radix_sorting_data[l.block_idx]->count;\n+\t\tconst idx_t r_count = r_sorted_block.radix_sorting_data[r.block_idx]->count;\n \t\t// Compute the merge\n \t\tif (sort_layout.all_constant) {\n \t\t\t// All sorting columns are constant size\n@@ -298,12 +295,8 @@ void MergeSorter::ComputeMerge(const idx_t &count, bool left_smaller[]) {\n \t\t\t}\n \t\t} else {\n \t\t\t// Pin the blob data\n-\t\t\tif (!l_done) {\n-\t\t\t\tleft->PinData(*l_sorted_block.blob_sorting_data);\n-\t\t\t}\n-\t\t\tif (!r_done) {\n-\t\t\t\tright->PinData(*r_sorted_block.blob_sorting_data);\n-\t\t\t}\n+\t\t\tleft->PinData(*l_sorted_block.blob_sorting_data);\n+\t\t\tright->PinData(*r_sorted_block.blob_sorting_data);\n \t\t\t// Merge with variable size sorting columns\n \t\t\tfor (; compared < count && l.entry_idx < l_count && r.entry_idx < r_count; compared++) {\n \t\t\t\tleft_smaller[compared] =\ndiff --git a/src/common/sort/partition_state.cpp b/src/common/sort/partition_state.cpp\nindex 551d6d017934..acbe766cab25 100644\n--- a/src/common/sort/partition_state.cpp\n+++ b/src/common/sort/partition_state.cpp\n@@ -87,7 +87,7 @@ PartitionGlobalSinkState::PartitionGlobalSinkState(ClientContext &context,\n                                                    const vector<unique_ptr<BaseStatistics>> &partition_stats,\n                                                    idx_t estimated_cardinality)\n     : context(context), buffer_manager(BufferManager::GetBufferManager(context)), allocator(Allocator::Get(context)),\n-      payload_types(payload_types), memory_per_thread(0), count(0) {\n+      fixed_bits(0), payload_types(payload_types), memory_per_thread(0), count(0) {\n \n \tGenerateOrderings(partitions, orders, partition_bys, order_bys, partition_stats);\n \n@@ -102,9 +102,19 @@ PartitionGlobalSinkState::PartitionGlobalSinkState(ClientContext &context,\n \t}\n }\n \n+void PartitionGlobalSinkState::SyncPartitioning(const PartitionGlobalSinkState &other) {\n+\tfixed_bits = other.grouping_data ? other.grouping_data->GetRadixBits() : 0;\n+\n+\tconst auto old_bits = grouping_data ? grouping_data->GetRadixBits() : 0;\n+\tif (fixed_bits != old_bits) {\n+\t\tconst auto hash_col_idx = payload_types.size();\n+\t\tgrouping_data = make_uniq<RadixPartitionedColumnData>(context, grouping_types, fixed_bits, hash_col_idx);\n+\t}\n+}\n+\n void PartitionGlobalSinkState::ResizeGroupingData(idx_t cardinality) {\n \t//\tHave we started to combine? Then just live with it.\n-\tif (grouping_data && !grouping_data->GetPartitions().empty()) {\n+\tif (fixed_bits || (grouping_data && !grouping_data->GetPartitions().empty())) {\n \t\treturn;\n \t}\n \t//\tIs the average partition size too large?\n@@ -186,9 +196,7 @@ void PartitionGlobalSinkState::CombineLocalPartition(GroupingPartition &local_pa\n \tgrouping_data->Combine(*local_partition);\n }\n \n-void PartitionGlobalSinkState::BuildSortState(ColumnDataCollection &group_data, PartitionGlobalHashGroup &hash_group) {\n-\tauto &global_sort = *hash_group.global_sort;\n-\n+void PartitionGlobalSinkState::BuildSortState(ColumnDataCollection &group_data, GlobalSortState &global_sort) const {\n \t//\t Set up the sort expression computation.\n \tvector<LogicalType> sort_types;\n \tExpressionExecutor executor(context);\n@@ -234,6 +242,10 @@ void PartitionGlobalSinkState::BuildSortState(ColumnDataCollection &group_data,\n \t}\n \n \tglobal_sort.AddLocalState(local_sort);\n+}\n+\n+void PartitionGlobalSinkState::BuildSortState(ColumnDataCollection &group_data, PartitionGlobalHashGroup &hash_group) {\n+\tBuildSortState(group_data, *hash_group.global_sort);\n \n \thash_group.count += group_data.Count();\n }\n@@ -482,18 +494,29 @@ class PartitionMergeTask : public ExecutorTask {\n \tTaskExecutionResult ExecuteTask(TaskExecutionMode mode) override;\n \n private:\n+\tstruct ExecutorCallback : public PartitionGlobalMergeStates::Callback {\n+\t\texplicit ExecutorCallback(Executor &executor) : executor(executor) {\n+\t\t}\n+\n+\t\tbool HasError() const override {\n+\t\t\treturn executor.HasError();\n+\t\t}\n+\n+\t\tExecutor &executor;\n+\t};\n+\n \tshared_ptr<Event> event;\n \tPartitionLocalMergeState local_state;\n \tPartitionGlobalMergeStates &hash_groups;\n };\n \n-TaskExecutionResult PartitionMergeTask::ExecuteTask(TaskExecutionMode mode) {\n+bool PartitionGlobalMergeStates::ExecuteTask(PartitionLocalMergeState &local_state, Callback &callback) {\n \t// Loop until all hash groups are done\n \tsize_t sorted = 0;\n-\twhile (sorted < hash_groups.states.size()) {\n+\twhile (sorted < states.size()) {\n \t\t// First check if there is an unfinished task for this thread\n-\t\tif (executor.HasError()) {\n-\t\t\treturn TaskExecutionResult::TASK_ERROR;\n+\t\tif (callback.HasError()) {\n+\t\t\treturn false;\n \t\t}\n \t\tif (!local_state.TaskFinished()) {\n \t\t\tlocal_state.ExecuteTask();\n@@ -501,8 +524,8 @@ TaskExecutionResult PartitionMergeTask::ExecuteTask(TaskExecutionMode mode) {\n \t\t}\n \n \t\t// Thread is done with its assigned task, try to fetch new work\n-\t\tfor (auto group = sorted; group < hash_groups.states.size(); ++group) {\n-\t\t\tauto &global_state = hash_groups.states[group];\n+\t\tfor (auto group = sorted; group < states.size(); ++group) {\n+\t\t\tauto &global_state = states[group];\n \t\t\tif (global_state->IsSorted()) {\n \t\t\t\t// This hash group is done\n \t\t\t\t// Update the high water mark of densely completed groups\n@@ -543,6 +566,16 @@ TaskExecutionResult PartitionMergeTask::ExecuteTask(TaskExecutionMode mode) {\n \t\t}\n \t}\n \n+\treturn true;\n+}\n+\n+TaskExecutionResult PartitionMergeTask::ExecuteTask(TaskExecutionMode mode) {\n+\tExecutorCallback callback(executor);\n+\n+\tif (!hash_groups.ExecuteTask(local_state, callback)) {\n+\t\treturn TaskExecutionResult::TASK_ERROR;\n+\t}\n+\n \tevent->FinishTask();\n \treturn TaskExecutionResult::TASK_FINISHED;\n }\ndiff --git a/src/common/symbols.cpp b/src/common/symbols.cpp\nindex d001bd96ef13..74526192f43f 100644\n--- a/src/common/symbols.cpp\n+++ b/src/common/symbols.cpp\n@@ -6,6 +6,8 @@\n #include \"duckdb/catalog/catalog.hpp\"\n #include \"duckdb/catalog/catalog_entry/list.hpp\"\n #include \"duckdb/common/types/chunk_collection.hpp\"\n+#include \"duckdb/common/types/column/column_data_allocator.hpp\"\n+#include \"duckdb/common/types/column/column_data_collection.hpp\"\n #include \"duckdb/common/vector.hpp\"\n #include \"duckdb/execution/aggregate_hashtable.hpp\"\n #include \"duckdb/execution/column_binding_resolver.hpp\"\n@@ -18,8 +20,8 @@\n #include \"duckdb/main/stream_query_result.hpp\"\n #include \"duckdb/optimizer/join_order/join_order_optimizer.hpp\"\n #include \"duckdb/optimizer/rule.hpp\"\n-#include \"duckdb/parallel/pipeline.hpp\"\n #include \"duckdb/parallel/meta_pipeline.hpp\"\n+#include \"duckdb/parallel/pipeline.hpp\"\n #include \"duckdb/parser/constraint.hpp\"\n #include \"duckdb/parser/constraints/list.hpp\"\n #include \"duckdb/parser/expression/list.hpp\"\n@@ -35,11 +37,9 @@\n #include \"duckdb/planner/query_node/bound_select_node.hpp\"\n #include \"duckdb/planner/query_node/bound_set_operation_node.hpp\"\n #include \"duckdb/storage/data_table.hpp\"\n+#include \"duckdb/storage/statistics/base_statistics.hpp\"\n #include \"duckdb/storage/write_ahead_log.hpp\"\n #include \"duckdb/transaction/transaction.hpp\"\n-#include \"duckdb/common/types/column/column_data_collection.hpp\"\n-#include \"duckdb/common/types/column/column_data_allocator.hpp\"\n-#include \"duckdb/common/vector.hpp\"\n \n using namespace duckdb;\n \n@@ -145,6 +145,7 @@ template class unique_ptr<SingleJoinRelation>;\n template class unique_ptr<CatalogSet>;\n template class unique_ptr<Binder>;\n template class unique_ptr<PrivateAllocatorData>;\n+template class unique_ptr<BaseStatistics>;\n \n } // namespace duckdb\n \ndiff --git a/src/common/types/batched_data_collection.cpp b/src/common/types/batched_data_collection.cpp\nindex 5f3768ed1939..072e0c738520 100644\n--- a/src/common/types/batched_data_collection.cpp\n+++ b/src/common/types/batched_data_collection.cpp\n@@ -1,11 +1,14 @@\n #include \"duckdb/common/types/batched_data_collection.hpp\"\n+\n+#include \"duckdb/common/optional_ptr.hpp\"\n #include \"duckdb/common/printer.hpp\"\n #include \"duckdb/storage/buffer_manager.hpp\"\n-#include \"duckdb/common/optional_ptr.hpp\"\n \n namespace duckdb {\n \n-BatchedDataCollection::BatchedDataCollection(vector<LogicalType> types_p) : types(std::move(types_p)) {\n+BatchedDataCollection::BatchedDataCollection(ClientContext &context_p, vector<LogicalType> types_p,\n+                                             bool buffer_managed_p)\n+    : context(context_p), types(std::move(types_p)), buffer_managed(buffer_managed_p) {\n }\n \n void BatchedDataCollection::Append(DataChunk &input, idx_t batch_index) {\n@@ -20,6 +23,8 @@ void BatchedDataCollection::Append(DataChunk &input, idx_t batch_index) {\n \t\tunique_ptr<ColumnDataCollection> new_collection;\n \t\tif (last_collection.collection) {\n \t\t\tnew_collection = make_uniq<ColumnDataCollection>(*last_collection.collection);\n+\t\t} else if (buffer_managed) {\n+\t\t\tnew_collection = make_uniq<ColumnDataCollection>(BufferManager::GetBufferManager(context), types);\n \t\t} else {\n \t\t\tnew_collection = make_uniq<ColumnDataCollection>(Allocator::DefaultAllocator(), types);\n \t\t}\ndiff --git a/src/common/types/column/column_data_allocator.cpp b/src/common/types/column/column_data_allocator.cpp\nindex b0a81935d546..36e25cc831b2 100644\n--- a/src/common/types/column/column_data_allocator.cpp\n+++ b/src/common/types/column/column_data_allocator.cpp\n@@ -1,8 +1,8 @@\n #include \"duckdb/common/types/column/column_data_allocator.hpp\"\n \n #include \"duckdb/common/types/column/column_data_collection_segment.hpp\"\n-#include \"duckdb/storage/buffer_manager.hpp\"\n #include \"duckdb/storage/buffer/block_handle.hpp\"\n+#include \"duckdb/storage/buffer_manager.hpp\"\n \n namespace duckdb {\n \n@@ -19,6 +19,7 @@ ColumnDataAllocator::ColumnDataAllocator(ClientContext &context, ColumnDataAlloc\n     : type(allocator_type) {\n \tswitch (type) {\n \tcase ColumnDataAllocatorType::BUFFER_MANAGER_ALLOCATOR:\n+\tcase ColumnDataAllocatorType::HYBRID:\n \t\talloc.buffer_manager = &BufferManager::GetBufferManager(context);\n \t\tbreak;\n \tcase ColumnDataAllocatorType::IN_MEMORY_ALLOCATOR:\n@@ -33,6 +34,7 @@ ColumnDataAllocator::ColumnDataAllocator(ColumnDataAllocator &other) {\n \ttype = other.GetType();\n \tswitch (type) {\n \tcase ColumnDataAllocatorType::BUFFER_MANAGER_ALLOCATOR:\n+\tcase ColumnDataAllocatorType::HYBRID:\n \t\talloc.allocator = other.alloc.allocator;\n \t\tbreak;\n \tcase ColumnDataAllocatorType::IN_MEMORY_ALLOCATOR:\n@@ -44,7 +46,7 @@ ColumnDataAllocator::ColumnDataAllocator(ColumnDataAllocator &other) {\n }\n \n BufferHandle ColumnDataAllocator::Pin(uint32_t block_id) {\n-\tD_ASSERT(type == ColumnDataAllocatorType::BUFFER_MANAGER_ALLOCATOR);\n+\tD_ASSERT(type == ColumnDataAllocatorType::BUFFER_MANAGER_ALLOCATOR || type == ColumnDataAllocatorType::HYBRID);\n \tshared_ptr<BlockHandle> handle;\n \tif (shared) {\n \t\t// we only need to grab the lock when accessing the vector, because vector access is not thread-safe:\n@@ -58,7 +60,7 @@ BufferHandle ColumnDataAllocator::Pin(uint32_t block_id) {\n }\n \n BufferHandle ColumnDataAllocator::AllocateBlock(idx_t size) {\n-\tD_ASSERT(type == ColumnDataAllocatorType::BUFFER_MANAGER_ALLOCATOR);\n+\tD_ASSERT(type == ColumnDataAllocatorType::BUFFER_MANAGER_ALLOCATOR || type == ColumnDataAllocatorType::HYBRID);\n \tauto block_size = MaxValue<idx_t>(size, Storage::BLOCK_SIZE);\n \tBlockMetaData data;\n \tdata.size = 0;\n@@ -136,6 +138,7 @@ void ColumnDataAllocator::AllocateData(idx_t size, uint32_t &block_id, uint32_t\n                                        ChunkManagementState *chunk_state) {\n \tswitch (type) {\n \tcase ColumnDataAllocatorType::BUFFER_MANAGER_ALLOCATOR:\n+\tcase ColumnDataAllocatorType::HYBRID:\n \t\tif (shared) {\n \t\t\tlock_guard<mutex> guard(lock);\n \t\t\tAllocateBuffer(size, block_id, offset, chunk_state);\n@@ -225,7 +228,7 @@ Allocator &ColumnDataAllocator::GetAllocator() {\n }\n \n void ColumnDataAllocator::InitializeChunkState(ChunkManagementState &state, ChunkMetaData &chunk) {\n-\tif (type != ColumnDataAllocatorType::BUFFER_MANAGER_ALLOCATOR) {\n+\tif (type != ColumnDataAllocatorType::BUFFER_MANAGER_ALLOCATOR && type != ColumnDataAllocatorType::HYBRID) {\n \t\t// nothing to pin\n \t\treturn;\n \t}\ndiff --git a/src/common/types/column/column_data_collection.cpp b/src/common/types/column/column_data_collection.cpp\nindex 8b83d5278ac4..738c18a116fc 100644\n--- a/src/common/types/column/column_data_collection.cpp\n+++ b/src/common/types/column/column_data_collection.cpp\n@@ -333,7 +333,7 @@ struct StandardValueCopy : public BaseValueCopy<T> {\n \n struct StringValueCopy : public BaseValueCopy<string_t> {\n \tstatic string_t Operation(ColumnDataMetaData &meta_data, string_t input) {\n-\t\treturn input.IsInlined() ? input : meta_data.segment.heap.AddBlob(input);\n+\t\treturn input.IsInlined() ? input : meta_data.segment.heap->AddBlob(input);\n \t}\n };\n \n@@ -423,7 +423,8 @@ void ColumnDataCopy<string_t>(ColumnDataMetaData &meta_data, const UnifiedVector\n                               idx_t offset, idx_t copy_count) {\n \n \tconst auto &allocator_type = meta_data.segment.allocator->GetType();\n-\tif (allocator_type == ColumnDataAllocatorType::IN_MEMORY_ALLOCATOR) {\n+\tif (allocator_type == ColumnDataAllocatorType::IN_MEMORY_ALLOCATOR ||\n+\t    allocator_type == ColumnDataAllocatorType::HYBRID) {\n \t\t// strings cannot be spilled to disk - use StringHeap\n \t\tTemplatedColumnDataCopy<StringValueCopy>(meta_data, source_data, source, offset, copy_count);\n \t\treturn;\n@@ -930,6 +931,7 @@ void ColumnDataCollection::Verify() {\n #endif\n }\n \n+// LCOV_EXCL_START\n string ColumnDataCollection::ToString() const {\n \tDataChunk chunk;\n \tInitializeScanChunk(chunk);\n@@ -950,6 +952,7 @@ string ColumnDataCollection::ToString() const {\n \n \treturn result;\n }\n+// LCOV_EXCL_STOP\n \n void ColumnDataCollection::Print() const {\n \tPrinter::Print(ToString());\n@@ -1030,6 +1033,18 @@ bool ColumnDataCollection::ResultEquals(const ColumnDataCollection &left, const\n \treturn true;\n }\n \n+vector<shared_ptr<StringHeap>> ColumnDataCollection::GetHeapReferences() {\n+\tvector<shared_ptr<StringHeap>> result(segments.size(), nullptr);\n+\tfor (idx_t segment_idx = 0; segment_idx < segments.size(); segment_idx++) {\n+\t\tresult[segment_idx] = segments[segment_idx]->heap;\n+\t}\n+\treturn result;\n+}\n+\n+ColumnDataAllocatorType ColumnDataCollection::GetAllocatorType() const {\n+\treturn allocator->GetType();\n+}\n+\n const vector<unique_ptr<ColumnDataCollectionSegment>> &ColumnDataCollection::GetSegments() const {\n \treturn segments;\n }\ndiff --git a/src/common/types/column/column_data_collection_segment.cpp b/src/common/types/column/column_data_collection_segment.cpp\nindex fc4868eebcf8..366cc643b834 100644\n--- a/src/common/types/column/column_data_collection_segment.cpp\n+++ b/src/common/types/column/column_data_collection_segment.cpp\n@@ -6,7 +6,8 @@ namespace duckdb {\n \n ColumnDataCollectionSegment::ColumnDataCollectionSegment(shared_ptr<ColumnDataAllocator> allocator_p,\n                                                          vector<LogicalType> types_p)\n-    : allocator(std::move(allocator_p)), types(std::move(types_p)), count(0), heap(allocator->GetAllocator()) {\n+    : allocator(std::move(allocator_p)), types(std::move(types_p)), count(0),\n+      heap(make_shared<StringHeap>(allocator->GetAllocator())) {\n }\n \n idx_t ColumnDataCollectionSegment::GetDataSize(idx_t type_size) {\n@@ -26,7 +27,8 @@ VectorDataIndex ColumnDataCollectionSegment::AllocateVectorInternal(const Logica\n \tauto type_size = internal_type == PhysicalType::STRUCT ? 0 : GetTypeIdSize(internal_type);\n \tallocator->AllocateData(GetDataSize(type_size) + ValidityMask::STANDARD_MASK_SIZE, meta_data.block_id,\n \t                        meta_data.offset, chunk_state);\n-\tif (allocator->GetType() == ColumnDataAllocatorType::BUFFER_MANAGER_ALLOCATOR) {\n+\tif (allocator->GetType() == ColumnDataAllocatorType::BUFFER_MANAGER_ALLOCATOR ||\n+\t    allocator->GetType() == ColumnDataAllocatorType::HYBRID) {\n \t\tchunk_meta.block_ids.insert(meta_data.block_id);\n \t}\n \ndiff --git a/src/common/types/column/partitioned_column_data.cpp b/src/common/types/column/partitioned_column_data.cpp\nindex a7c180a02c9e..0843931ce02d 100644\n--- a/src/common/types/column/partitioned_column_data.cpp\n+++ b/src/common/types/column/partitioned_column_data.cpp\n@@ -32,13 +32,13 @@ PartitionedColumnData::~PartitionedColumnData() {\n \n void PartitionedColumnData::InitializeAppendState(PartitionedColumnDataAppendState &state) const {\n \tstate.partition_sel.Initialize();\n-\tstate.slice_chunk.Initialize(context, types);\n+\tstate.slice_chunk.Initialize(BufferAllocator::Get(context), types);\n \tInitializeAppendStateInternal(state);\n }\n \n unique_ptr<DataChunk> PartitionedColumnData::CreatePartitionBuffer() const {\n \tauto result = make_uniq<DataChunk>();\n-\tresult->Initialize(BufferManager::GetBufferManager(context).GetBufferAllocator(), types, BufferSize());\n+\tresult->Initialize(BufferAllocator::Get(context), types, BufferSize());\n \treturn result;\n }\n \ndiff --git a/src/common/types/data_chunk.cpp b/src/common/types/data_chunk.cpp\nindex c8f734ebb7b5..82a8172e0c28 100644\n--- a/src/common/types/data_chunk.cpp\n+++ b/src/common/types/data_chunk.cpp\n@@ -309,7 +309,7 @@ void DataChunk::Hash(Vector &result) {\n \n void DataChunk::Hash(vector<idx_t> &column_ids, Vector &result) {\n \tD_ASSERT(result.GetType().id() == LogicalType::HASH);\n-\tD_ASSERT(column_ids.size() > 0);\n+\tD_ASSERT(!column_ids.empty());\n \n \tVectorOperations::Hash(data[column_ids[0]], result, size());\n \tfor (idx_t i = 1; i < column_ids.size(); i++) {\ndiff --git a/src/common/types/date.cpp b/src/common/types/date.cpp\nindex 6fdd21d0a799..61f3f0a4ef79 100644\n--- a/src/common/types/date.cpp\n+++ b/src/common/types/date.cpp\n@@ -441,6 +441,15 @@ int64_t Date::EpochMicroseconds(date_t date) {\n \treturn result;\n }\n \n+int64_t Date::EpochMilliseconds(date_t date) {\n+\tint64_t result;\n+\tconst auto MILLIS_PER_DAY = Interval::MICROS_PER_DAY / Interval::MICROS_PER_MSEC;\n+\tif (!TryMultiplyOperator::Operation<int64_t, int64_t, int64_t>(date.days, MILLIS_PER_DAY, result)) {\n+\t\tthrow ConversionException(\"Could not convert DATE (%s) to milliseconds\", Date::ToString(date));\n+\t}\n+\treturn result;\n+}\n+\n int32_t Date::ExtractYear(date_t d, int32_t *last_year) {\n \tauto n = d.days;\n \t// cached look up: check if year of this date is the same as the last one we looked up\ndiff --git a/src/common/types/validity_mask.cpp b/src/common/types/validity_mask.cpp\nindex 47dc6940315a..59b3bc608d7f 100644\n--- a/src/common/types/validity_mask.cpp\n+++ b/src/common/types/validity_mask.cpp\n@@ -96,6 +96,39 @@ void ValidityMask::SliceInPlace(const ValidityMask &other, idx_t target_offset,\n \t\tmemcpy(target_validity + target_offset_entries, source_validity + source_offset_entries,\n \t\t       sizeof(validity_t) * EntryCount(count));\n \t\treturn;\n+\t} else if (IsAligned(target_offset)) {\n+\t\t//\tSimple common case where we are shifting into an aligned mask (e.g., 0 in Slice above)\n+\t\tconst idx_t entire_units = count / BITS_PER_VALUE;\n+\t\tconst idx_t ragged = count % BITS_PER_VALUE;\n+\t\tconst idx_t tail = source_offset % BITS_PER_VALUE;\n+\t\tconst idx_t head = BITS_PER_VALUE - tail;\n+\t\tauto source_validity = other.GetData() + (source_offset / BITS_PER_VALUE);\n+\t\tauto target_validity = this->GetData() + (target_offset / BITS_PER_VALUE);\n+\t\tauto src_entry = *source_validity++;\n+\t\tfor (idx_t i = 0; i < entire_units; ++i) {\n+\t\t\t//\tStart with head of previous src\n+\t\t\tvalidity_t tgt_entry = src_entry >> tail;\n+\t\t\tsrc_entry = *source_validity++;\n+\t\t\t// \tAdd in tail of current src\n+\t\t\ttgt_entry |= (src_entry << head);\n+\t\t\t*target_validity++ = tgt_entry;\n+\t\t}\n+\t\t//\tFinish last ragged entry\n+\t\tif (ragged) {\n+\t\t\t//\tStart with head of previous src\n+\t\t\tvalidity_t tgt_entry = (src_entry >> tail);\n+\t\t\t//  Add in the tail of the next src, if head was too small\n+\t\t\tif (head < ragged) {\n+\t\t\t\tsrc_entry = *source_validity++;\n+\t\t\t\ttgt_entry |= (src_entry << head);\n+\t\t\t}\n+\t\t\t//  Mask off the bits that go past the ragged end\n+\t\t\ttgt_entry &= (ValidityBuffer::MAX_ENTRY >> (BITS_PER_VALUE - ragged));\n+\t\t\t//\tRestore the ragged end of the target\n+\t\t\ttgt_entry |= *target_validity & (ValidityBuffer::MAX_ENTRY << ragged);\n+\t\t\t*target_validity++ = tgt_entry;\n+\t\t}\n+\t\treturn;\n \t}\n \n \t// FIXME: use bitwise operations here\ndiff --git a/src/core_functions/aggregate/regression/regr_avg.cpp b/src/core_functions/aggregate/regression/regr_avg.cpp\nindex 3c01703bfcdd..4136ab034bc2 100644\n--- a/src/core_functions/aggregate/regression/regr_avg.cpp\n+++ b/src/core_functions/aggregate/regression/regr_avg.cpp\n@@ -37,16 +37,16 @@ struct RegrAvgFunction {\n };\n struct RegrAvgXFunction : RegrAvgFunction {\n \ttemplate <class A_TYPE, class B_TYPE, class STATE, class OP>\n-\tstatic void Operation(STATE &state, const A_TYPE &x, const B_TYPE &y, AggregateBinaryInput &idata) {\n-\t\tstate.sum += y;\n+\tstatic void Operation(STATE &state, const A_TYPE &y, const B_TYPE &x, AggregateBinaryInput &idata) {\n+\t\tstate.sum += x;\n \t\tstate.count++;\n \t}\n };\n \n struct RegrAvgYFunction : RegrAvgFunction {\n \ttemplate <class A_TYPE, class B_TYPE, class STATE, class OP>\n-\tstatic void Operation(STATE &state, const A_TYPE &x, const B_TYPE &y, AggregateBinaryInput &idata) {\n-\t\tstate.sum += x;\n+\tstatic void Operation(STATE &state, const A_TYPE &y, const B_TYPE &x, AggregateBinaryInput &idata) {\n+\t\tstate.sum += y;\n \t\tstate.count++;\n \t}\n };\ndiff --git a/src/core_functions/aggregate/regression/regr_intercept.cpp b/src/core_functions/aggregate/regression/regr_intercept.cpp\nindex 8dc579a1bfbd..a3a117456ad3 100644\n--- a/src/core_functions/aggregate/regression/regr_intercept.cpp\n+++ b/src/core_functions/aggregate/regression/regr_intercept.cpp\n@@ -23,11 +23,11 @@ struct RegrInterceptOperation {\n \t}\n \n \ttemplate <class A_TYPE, class B_TYPE, class STATE, class OP>\n-\tstatic void Operation(STATE &state, const A_TYPE &x, const B_TYPE &y, AggregateBinaryInput &idata) {\n+\tstatic void Operation(STATE &state, const A_TYPE &y, const B_TYPE &x, AggregateBinaryInput &idata) {\n \t\tstate.count++;\n-\t\tstate.sum_x += y;\n-\t\tstate.sum_y += x;\n-\t\tRegrSlopeOperation::Operation<A_TYPE, B_TYPE, RegrSlopeState, OP>(state.slope, x, y, idata);\n+\t\tstate.sum_x += x;\n+\t\tstate.sum_y += y;\n+\t\tRegrSlopeOperation::Operation<A_TYPE, B_TYPE, RegrSlopeState, OP>(state.slope, y, x, idata);\n \t}\n \n \ttemplate <class STATE, class OP>\ndiff --git a/src/core_functions/aggregate/regression/regr_r2.cpp b/src/core_functions/aggregate/regression/regr_r2.cpp\nindex ef5b816f18f7..4d68225e8419 100644\n--- a/src/core_functions/aggregate/regression/regr_r2.cpp\n+++ b/src/core_functions/aggregate/regression/regr_r2.cpp\n@@ -1,3 +1,4 @@\n+// REGR_R2(y, x)\n // Returns the coefficient of determination for non-null pairs in a group.\n // It is computed for non-null pairs using the following formula:\n // null                 if var_pop(x) = 0, else\n@@ -24,10 +25,10 @@ struct RegrR2Operation {\n \t}\n \n \ttemplate <class A_TYPE, class B_TYPE, class STATE, class OP>\n-\tstatic void Operation(STATE &state, const A_TYPE &x, const B_TYPE &y, AggregateBinaryInput &idata) {\n-\t\tCorrOperation::Operation<A_TYPE, B_TYPE, CorrState, OP>(state.corr, x, y, idata);\n-\t\tSTDDevBaseOperation::Execute<A_TYPE, StddevState>(state.var_pop_x, y);\n-\t\tSTDDevBaseOperation::Execute<A_TYPE, StddevState>(state.var_pop_y, x);\n+\tstatic void Operation(STATE &state, const A_TYPE &y, const B_TYPE &x, AggregateBinaryInput &idata) {\n+\t\tCorrOperation::Operation<A_TYPE, B_TYPE, CorrState, OP>(state.corr, y, x, idata);\n+\t\tSTDDevBaseOperation::Execute<A_TYPE, StddevState>(state.var_pop_x, x);\n+\t\tSTDDevBaseOperation::Execute<A_TYPE, StddevState>(state.var_pop_y, y);\n \t}\n \n \ttemplate <class STATE, class OP>\ndiff --git a/src/core_functions/aggregate/regression/regr_sxx_syy.cpp b/src/core_functions/aggregate/regression/regr_sxx_syy.cpp\nindex 6412165ea982..e789172d24f0 100644\n--- a/src/core_functions/aggregate/regression/regr_sxx_syy.cpp\n+++ b/src/core_functions/aggregate/regression/regr_sxx_syy.cpp\n@@ -1,6 +1,6 @@\n-// regr_sxx\n+// REGR_SXX(y, x)\n // Returns REGR_COUNT(y, x) * VAR_POP(x) for non-null pairs.\n-// regrsyy\n+// REGR_SYY(y, x)\n // Returns REGR_COUNT(y, x) * VAR_POP(y) for non-null pairs.\n \n #include \"duckdb/core_functions/aggregate/regression/regr_count.hpp\"\n@@ -48,17 +48,17 @@ struct RegrBaseOperation {\n \n struct RegrSXXOperation : RegrBaseOperation {\n \ttemplate <class A_TYPE, class B_TYPE, class STATE, class OP>\n-\tstatic void Operation(STATE &state, const A_TYPE &x, const B_TYPE &y, AggregateBinaryInput &idata) {\n-\t\tRegrCountFunction::Operation<A_TYPE, B_TYPE, size_t, OP>(state.count, x, y, idata);\n-\t\tSTDDevBaseOperation::Execute<A_TYPE, StddevState>(state.var_pop, y);\n+\tstatic void Operation(STATE &state, const A_TYPE &y, const B_TYPE &x, AggregateBinaryInput &idata) {\n+\t\tRegrCountFunction::Operation<A_TYPE, B_TYPE, size_t, OP>(state.count, y, x, idata);\n+\t\tSTDDevBaseOperation::Execute<A_TYPE, StddevState>(state.var_pop, x);\n \t}\n };\n \n struct RegrSYYOperation : RegrBaseOperation {\n \ttemplate <class A_TYPE, class B_TYPE, class STATE, class OP>\n-\tstatic void Operation(STATE &state, const A_TYPE &x, const B_TYPE &y, AggregateBinaryInput &idata) {\n-\t\tRegrCountFunction::Operation<A_TYPE, B_TYPE, size_t, OP>(state.count, x, y, idata);\n-\t\tSTDDevBaseOperation::Execute<A_TYPE, StddevState>(state.var_pop, x);\n+\tstatic void Operation(STATE &state, const A_TYPE &y, const B_TYPE &x, AggregateBinaryInput &idata) {\n+\t\tRegrCountFunction::Operation<A_TYPE, B_TYPE, size_t, OP>(state.count, y, x, idata);\n+\t\tSTDDevBaseOperation::Execute<A_TYPE, StddevState>(state.var_pop, y);\n \t}\n };\n \ndiff --git a/src/core_functions/aggregate/regression/regr_sxy.cpp b/src/core_functions/aggregate/regression/regr_sxy.cpp\nindex 3f96f3abb1f9..e3f3d4ae992a 100644\n--- a/src/core_functions/aggregate/regression/regr_sxy.cpp\n+++ b/src/core_functions/aggregate/regression/regr_sxy.cpp\n@@ -1,3 +1,4 @@\n+// REGR_SXY(y, x)\n // Returns REGR_COUNT(expr1, expr2) * COVAR_POP(expr1, expr2) for non-null pairs.\n \n #include \"duckdb/core_functions/aggregate/regression/regr_count.hpp\"\n@@ -20,9 +21,9 @@ struct RegrSXYOperation {\n \t}\n \n \ttemplate <class A_TYPE, class B_TYPE, class STATE, class OP>\n-\tstatic void Operation(STATE &state, const A_TYPE &x, const B_TYPE &y, AggregateBinaryInput &idata) {\n-\t\tRegrCountFunction::Operation<A_TYPE, B_TYPE, size_t, OP>(state.count, x, y, idata);\n-\t\tCovarOperation::Operation<A_TYPE, B_TYPE, CovarState, OP>(state.cov_pop, x, y, idata);\n+\tstatic void Operation(STATE &state, const A_TYPE &y, const B_TYPE &x, AggregateBinaryInput &idata) {\n+\t\tRegrCountFunction::Operation<A_TYPE, B_TYPE, size_t, OP>(state.count, y, x, idata);\n+\t\tCovarOperation::Operation<A_TYPE, B_TYPE, CovarState, OP>(state.cov_pop, y, x, idata);\n \t}\n \n \ttemplate <class STATE, class OP>\ndiff --git a/src/core_functions/function_list.cpp b/src/core_functions/function_list.cpp\nindex 04fd3975069e..21aabfd3ee53 100644\n--- a/src/core_functions/function_list.cpp\n+++ b/src/core_functions/function_list.cpp\n@@ -137,7 +137,9 @@ static StaticFunctionDefinition internal_functions[] = {\n \tDUCKDB_SCALAR_FUNCTION(EnumRangeFun),\n \tDUCKDB_SCALAR_FUNCTION(EnumRangeBoundaryFun),\n \tDUCKDB_SCALAR_FUNCTION_SET(EpochFun),\n-\tDUCKDB_SCALAR_FUNCTION(EpochMsFun),\n+\tDUCKDB_SCALAR_FUNCTION_SET(EpochNanosecondsFun),\n+\tDUCKDB_SCALAR_FUNCTION_SET(EpochMicrosecondsFun),\n+\tDUCKDB_SCALAR_FUNCTION_SET(EpochMsFun),\n \tDUCKDB_SCALAR_FUNCTION_SET(EraFun),\n \tDUCKDB_SCALAR_FUNCTION(ErrorFun),\n \tDUCKDB_SCALAR_FUNCTION(EvenFun),\n@@ -211,7 +213,7 @@ static StaticFunctionDefinition internal_functions[] = {\n \tDUCKDB_AGGREGATE_FUNCTION_SET(MadFun),\n \tDUCKDB_SCALAR_FUNCTION_SET(MakeDateFun),\n \tDUCKDB_SCALAR_FUNCTION(MakeTimeFun),\n-\tDUCKDB_SCALAR_FUNCTION(MakeTimestampFun),\n+\tDUCKDB_SCALAR_FUNCTION_SET(MakeTimestampFun),\n \tDUCKDB_SCALAR_FUNCTION(MapFun),\n \tDUCKDB_SCALAR_FUNCTION(MapConcatFun),\n \tDUCKDB_SCALAR_FUNCTION(MapEntriesFun),\ndiff --git a/src/core_functions/scalar/date/date_part.cpp b/src/core_functions/scalar/date/date_part.cpp\nindex f5a2e497fec7..2fc40ecaa863 100644\n--- a/src/core_functions/scalar/date/date_part.cpp\n+++ b/src/core_functions/scalar/date/date_part.cpp\n@@ -354,6 +354,49 @@ struct DatePart {\n \t\t}\n \t};\n \n+\tstruct EpochNanosecondsOperator {\n+\t\ttemplate <class TA, class TR>\n+\t\tstatic inline TR Operation(TA input) {\n+\t\t\treturn input.micros * Interval::NANOS_PER_MICRO;\n+\t\t}\n+\n+\t\ttemplate <class T>\n+\t\tstatic unique_ptr<BaseStatistics> PropagateStatistics(ClientContext &context, FunctionStatisticsInput &input) {\n+\t\t\treturn PropagateDatePartStatistics<T, EpochNanosecondsOperator>(input.child_stats);\n+\t\t}\n+\t};\n+\n+\tstruct EpochMicrosecondsOperator {\n+\t\ttemplate <class TA, class TR>\n+\t\tstatic inline TR Operation(TA input) {\n+\t\t\treturn input.micros;\n+\t\t}\n+\n+\t\ttemplate <class T>\n+\t\tstatic unique_ptr<BaseStatistics> PropagateStatistics(ClientContext &context, FunctionStatisticsInput &input) {\n+\t\t\treturn PropagateDatePartStatistics<T, EpochMicrosecondsOperator>(input.child_stats);\n+\t\t}\n+\t};\n+\n+\tstruct EpochMillisOperator {\n+\t\ttemplate <class TA, class TR>\n+\t\tstatic inline TR Operation(TA input) {\n+\t\t\treturn input.micros / Interval::MICROS_PER_MSEC;\n+\t\t}\n+\n+\t\ttemplate <class T>\n+\t\tstatic unique_ptr<BaseStatistics> PropagateStatistics(ClientContext &context, FunctionStatisticsInput &input) {\n+\t\t\treturn PropagateDatePartStatistics<T, EpochMillisOperator>(input.child_stats);\n+\t\t}\n+\n+\t\tstatic void Inverse(DataChunk &input, ExpressionState &state, Vector &result) {\n+\t\t\tD_ASSERT(input.ColumnCount() == 1);\n+\n+\t\t\tUnaryExecutor::Execute<int64_t, timestamp_t>(input.data[0], result, input.size(),\n+\t\t\t                                             [&](int64_t input) { return Timestamp::FromEpochMs(input); });\n+\t\t}\n+\t};\n+\n \tstruct MicrosecondsOperator {\n \t\ttemplate <class TA, class TR>\n \t\tstatic inline TR Operation(TA input) {\n@@ -521,9 +564,8 @@ struct DatePart {\n \t\t}\n \n \t\ttemplate <typename P>\n-\t\tstatic inline bool HasPartValue(P *part_values, DatePartSpecifier part, P &value) {\n-\t\t\tvalue = part_values[int(part)];\n-\t\t\treturn value;\n+\t\tstatic inline P HasPartValue(P *part_values, DatePartSpecifier part) {\n+\t\t\treturn part_values[int(part)];\n \t\t}\n \n \t\ttemplate <class TA, class TR>\n@@ -535,28 +577,36 @@ struct DatePart {\n \t\t\tint32_t dd = 1;\n \t\t\tif (mask & YMD) {\n \t\t\t\tDate::Convert(input, yyyy, mm, dd);\n-\t\t\t\tif (HasPartValue(part_values, DatePartSpecifier::YEAR, part_data)) {\n+\t\t\t\tpart_data = HasPartValue(part_values, DatePartSpecifier::YEAR);\n+\t\t\t\tif (part_data) {\n \t\t\t\t\tpart_data[idx] = yyyy;\n \t\t\t\t}\n-\t\t\t\tif (HasPartValue(part_values, DatePartSpecifier::MONTH, part_data)) {\n+\t\t\t\tpart_data = HasPartValue(part_values, DatePartSpecifier::MONTH);\n+\t\t\t\tif (part_data) {\n \t\t\t\t\tpart_data[idx] = mm;\n \t\t\t\t}\n-\t\t\t\tif (HasPartValue(part_values, DatePartSpecifier::DAY, part_data)) {\n+\t\t\t\tpart_data = HasPartValue(part_values, DatePartSpecifier::DAY);\n+\t\t\t\tif (part_data) {\n \t\t\t\t\tpart_data[idx] = dd;\n \t\t\t\t}\n-\t\t\t\tif (HasPartValue(part_values, DatePartSpecifier::DECADE, part_data)) {\n+\t\t\t\tpart_data = HasPartValue(part_values, DatePartSpecifier::DECADE);\n+\t\t\t\tif (part_data) {\n \t\t\t\t\tpart_data[idx] = DecadeOperator::DecadeFromYear(yyyy);\n \t\t\t\t}\n-\t\t\t\tif (HasPartValue(part_values, DatePartSpecifier::CENTURY, part_data)) {\n+\t\t\t\tpart_data = HasPartValue(part_values, DatePartSpecifier::CENTURY);\n+\t\t\t\tif (part_data) {\n \t\t\t\t\tpart_data[idx] = CenturyOperator::CenturyFromYear(yyyy);\n \t\t\t\t}\n-\t\t\t\tif (HasPartValue(part_values, DatePartSpecifier::MILLENNIUM, part_data)) {\n+\t\t\t\tpart_data = HasPartValue(part_values, DatePartSpecifier::MILLENNIUM);\n+\t\t\t\tif (part_data) {\n \t\t\t\t\tpart_data[idx] = MillenniumOperator::MillenniumFromYear(yyyy);\n \t\t\t\t}\n-\t\t\t\tif (HasPartValue(part_values, DatePartSpecifier::QUARTER, part_data)) {\n+\t\t\t\tpart_data = HasPartValue(part_values, DatePartSpecifier::QUARTER);\n+\t\t\t\tif (part_data) {\n \t\t\t\t\tpart_data[idx] = QuarterOperator::QuarterFromMonth(mm);\n \t\t\t\t}\n-\t\t\t\tif (HasPartValue(part_values, DatePartSpecifier::ERA, part_data)) {\n+\t\t\t\tpart_data = HasPartValue(part_values, DatePartSpecifier::ERA);\n+\t\t\t\tif (part_data) {\n \t\t\t\t\tpart_data[idx] = EraOperator::EraFromYear(yyyy);\n \t\t\t\t}\n \t\t\t}\n@@ -564,10 +614,12 @@ struct DatePart {\n \t\t\t// Week calculations\n \t\t\tif (mask & DOW) {\n \t\t\t\tauto isodow = Date::ExtractISODayOfTheWeek(input);\n-\t\t\t\tif (HasPartValue(part_values, DatePartSpecifier::DOW, part_data)) {\n+\t\t\t\tpart_data = HasPartValue(part_values, DatePartSpecifier::DOW);\n+\t\t\t\tif (part_data) {\n \t\t\t\t\tpart_data[idx] = DayOfWeekOperator::DayOfWeekFromISO(isodow);\n \t\t\t\t}\n-\t\t\t\tif (HasPartValue(part_values, DatePartSpecifier::ISODOW, part_data)) {\n+\t\t\t\tpart_data = HasPartValue(part_values, DatePartSpecifier::ISODOW);\n+\t\t\t\tif (part_data) {\n \t\t\t\t\tpart_data[idx] = isodow;\n \t\t\t\t}\n \t\t\t}\n@@ -577,24 +629,29 @@ struct DatePart {\n \t\t\t\tint32_t ww = 0;\n \t\t\t\tint32_t iyyy = 0;\n \t\t\t\tDate::ExtractISOYearWeek(input, iyyy, ww);\n-\t\t\t\tif (HasPartValue(part_values, DatePartSpecifier::WEEK, part_data)) {\n+\t\t\t\tpart_data = HasPartValue(part_values, DatePartSpecifier::WEEK);\n+\t\t\t\tif (part_data) {\n \t\t\t\t\tpart_data[idx] = ww;\n \t\t\t\t}\n-\t\t\t\tif (HasPartValue(part_values, DatePartSpecifier::ISOYEAR, part_data)) {\n+\t\t\t\tpart_data = HasPartValue(part_values, DatePartSpecifier::ISOYEAR);\n+\t\t\t\tif (part_data) {\n \t\t\t\t\tpart_data[idx] = iyyy;\n \t\t\t\t}\n-\t\t\t\tif (HasPartValue(part_values, DatePartSpecifier::YEARWEEK, part_data)) {\n+\t\t\t\tpart_data = HasPartValue(part_values, DatePartSpecifier::YEARWEEK);\n+\t\t\t\tif (part_data) {\n \t\t\t\t\tpart_data[idx] = YearWeekOperator::YearWeekFromParts(iyyy, ww);\n \t\t\t\t}\n \t\t\t}\n \n \t\t\tif (mask & EPOCH) {\n-\t\t\t\tif (HasPartValue(part_values, DatePartSpecifier::EPOCH, part_data)) {\n+\t\t\t\tpart_data = HasPartValue(part_values, DatePartSpecifier::EPOCH);\n+\t\t\t\tif (part_data) {\n \t\t\t\t\tpart_data[idx] = Date::Epoch(input);\n \t\t\t\t}\n \t\t\t}\n \t\t\tif (mask & DOY) {\n-\t\t\t\tif (HasPartValue(part_values, DatePartSpecifier::DOY, part_data)) {\n+\t\t\t\tpart_data = HasPartValue(part_values, DatePartSpecifier::DOY);\n+\t\t\t\tif (part_data) {\n \t\t\t\t\tpart_data[idx] = Date::ExtractDayOfTheYear(input);\n \t\t\t\t}\n \t\t\t}\n@@ -798,6 +855,51 @@ int64_t DatePart::YearWeekOperator::Operation(dtime_t input) {\n \tthrow NotImplementedException(\"\\\"time\\\" units \\\"yearweek\\\" not recognized\");\n }\n \n+template <>\n+int64_t DatePart::EpochNanosecondsOperator::Operation(timestamp_t input) {\n+\treturn Timestamp::GetEpochNanoSeconds(input);\n+}\n+\n+template <>\n+int64_t DatePart::EpochNanosecondsOperator::Operation(date_t input) {\n+\treturn Date::EpochNanoseconds(input);\n+}\n+\n+template <>\n+int64_t DatePart::EpochNanosecondsOperator::Operation(interval_t input) {\n+\treturn Interval::GetNanoseconds(input);\n+}\n+\n+template <>\n+int64_t DatePart::EpochMicrosecondsOperator::Operation(timestamp_t input) {\n+\treturn Timestamp::GetEpochMicroSeconds(input);\n+}\n+\n+template <>\n+int64_t DatePart::EpochMicrosecondsOperator::Operation(date_t input) {\n+\treturn Date::EpochMicroseconds(input);\n+}\n+\n+template <>\n+int64_t DatePart::EpochMicrosecondsOperator::Operation(interval_t input) {\n+\treturn Interval::GetMicro(input);\n+}\n+\n+template <>\n+int64_t DatePart::EpochMillisOperator::Operation(timestamp_t input) {\n+\treturn Timestamp::GetEpochMs(input);\n+}\n+\n+template <>\n+int64_t DatePart::EpochMillisOperator::Operation(date_t input) {\n+\treturn Date::EpochMilliseconds(input);\n+}\n+\n+template <>\n+int64_t DatePart::EpochMillisOperator::Operation(interval_t input) {\n+\treturn Interval::GetMilli(input);\n+}\n+\n template <>\n int64_t DatePart::MicrosecondsOperator::Operation(timestamp_t input) {\n \tauto time = Timestamp::GetTime(input);\n@@ -949,37 +1051,47 @@ void DatePart::StructOperator::Operation(int64_t **part_values, const dtime_t &i\n \tint64_t *part_data;\n \tif (mask & TIME) {\n \t\tconst auto micros = MicrosecondsOperator::Operation<dtime_t, int64_t>(input);\n-\t\tif (HasPartValue(part_values, DatePartSpecifier::MICROSECONDS, part_data)) {\n+\t\tpart_data = HasPartValue(part_values, DatePartSpecifier::MICROSECONDS);\n+\t\tif (part_data) {\n \t\t\tpart_data[idx] = micros;\n \t\t}\n-\t\tif (HasPartValue(part_values, DatePartSpecifier::MILLISECONDS, part_data)) {\n+\t\tpart_data = HasPartValue(part_values, DatePartSpecifier::MILLISECONDS);\n+\t\tif (part_data) {\n \t\t\tpart_data[idx] = micros / Interval::MICROS_PER_MSEC;\n \t\t}\n-\t\tif (HasPartValue(part_values, DatePartSpecifier::SECOND, part_data)) {\n+\t\tpart_data = HasPartValue(part_values, DatePartSpecifier::SECOND);\n+\t\tif (part_data) {\n \t\t\tpart_data[idx] = micros / Interval::MICROS_PER_SEC;\n \t\t}\n-\t\tif (HasPartValue(part_values, DatePartSpecifier::MINUTE, part_data)) {\n+\t\tpart_data = HasPartValue(part_values, DatePartSpecifier::MINUTE);\n+\t\tif (part_data) {\n \t\t\tpart_data[idx] = MinutesOperator::Operation<dtime_t, int64_t>(input);\n \t\t}\n-\t\tif (HasPartValue(part_values, DatePartSpecifier::HOUR, part_data)) {\n+\t\tpart_data = HasPartValue(part_values, DatePartSpecifier::HOUR);\n+\t\tif (part_data) {\n \t\t\tpart_data[idx] = HoursOperator::Operation<dtime_t, int64_t>(input);\n \t\t}\n \t}\n \n \tif (mask & EPOCH) {\n-\t\tif (HasPartValue(part_values, DatePartSpecifier::EPOCH, part_data)) {\n+\t\tpart_data = HasPartValue(part_values, DatePartSpecifier::EPOCH);\n+\t\tif (part_data) {\n \t\t\tpart_data[idx] = EpochOperator::Operation<dtime_t, int64_t>(input);\n+\t\t\t;\n \t\t}\n \t}\n \n \tif (mask & ZONE) {\n-\t\tif (HasPartValue(part_values, DatePartSpecifier::TIMEZONE, part_data)) {\n+\t\tpart_data = HasPartValue(part_values, DatePartSpecifier::TIMEZONE);\n+\t\tif (part_data) {\n \t\t\tpart_data[idx] = 0;\n \t\t}\n-\t\tif (HasPartValue(part_values, DatePartSpecifier::TIMEZONE_HOUR, part_data)) {\n+\t\tpart_data = HasPartValue(part_values, DatePartSpecifier::TIMEZONE_HOUR);\n+\t\tif (part_data) {\n \t\t\tpart_data[idx] = 0;\n \t\t}\n-\t\tif (HasPartValue(part_values, DatePartSpecifier::TIMEZONE_MINUTE, part_data)) {\n+\t\tpart_data = HasPartValue(part_values, DatePartSpecifier::TIMEZONE_MINUTE);\n+\t\tif (part_data) {\n \t\t\tpart_data[idx] = 0;\n \t\t}\n \t}\n@@ -998,8 +1110,8 @@ void DatePart::StructOperator::Operation(int64_t **part_values, const timestamp_\n \tOperation(part_values, t, idx, mask & ~EPOCH);\n \n \tif (mask & EPOCH) {\n-\t\tint64_t *part_data;\n-\t\tif (HasPartValue(part_values, DatePartSpecifier::EPOCH, part_data)) {\n+\t\tauto part_data = HasPartValue(part_values, DatePartSpecifier::EPOCH);\n+\t\tif (part_data) {\n \t\t\tpart_data[idx] = EpochOperator::Operation<timestamp_t, int64_t>(input);\n \t\t}\n \t}\n@@ -1011,50 +1123,63 @@ void DatePart::StructOperator::Operation(int64_t **part_values, const interval_t\n \tint64_t *part_data;\n \tif (mask & YMD) {\n \t\tconst auto mm = input.months % Interval::MONTHS_PER_YEAR;\n-\t\tif (HasPartValue(part_values, DatePartSpecifier::YEAR, part_data)) {\n+\t\tpart_data = HasPartValue(part_values, DatePartSpecifier::YEAR);\n+\t\tif (part_data) {\n \t\t\tpart_data[idx] = input.months / Interval::MONTHS_PER_YEAR;\n \t\t}\n-\t\tif (HasPartValue(part_values, DatePartSpecifier::MONTH, part_data)) {\n+\t\tpart_data = HasPartValue(part_values, DatePartSpecifier::MONTH);\n+\t\tif (part_data) {\n \t\t\tpart_data[idx] = mm;\n \t\t}\n-\t\tif (HasPartValue(part_values, DatePartSpecifier::DAY, part_data)) {\n+\t\tpart_data = HasPartValue(part_values, DatePartSpecifier::DAY);\n+\t\tif (part_data) {\n \t\t\tpart_data[idx] = input.days;\n \t\t}\n-\t\tif (HasPartValue(part_values, DatePartSpecifier::DECADE, part_data)) {\n+\t\tpart_data = HasPartValue(part_values, DatePartSpecifier::DECADE);\n+\t\tif (part_data) {\n \t\t\tpart_data[idx] = input.months / Interval::MONTHS_PER_DECADE;\n \t\t}\n-\t\tif (HasPartValue(part_values, DatePartSpecifier::CENTURY, part_data)) {\n+\t\tpart_data = HasPartValue(part_values, DatePartSpecifier::CENTURY);\n+\t\tif (part_data) {\n \t\t\tpart_data[idx] = input.months / Interval::MONTHS_PER_CENTURY;\n \t\t}\n-\t\tif (HasPartValue(part_values, DatePartSpecifier::MILLENNIUM, part_data)) {\n+\t\tpart_data = HasPartValue(part_values, DatePartSpecifier::MILLENNIUM);\n+\t\tif (part_data) {\n \t\t\tpart_data[idx] = input.months / Interval::MONTHS_PER_MILLENIUM;\n \t\t}\n-\t\tif (HasPartValue(part_values, DatePartSpecifier::QUARTER, part_data)) {\n+\t\tpart_data = HasPartValue(part_values, DatePartSpecifier::QUARTER);\n+\t\tif (part_data) {\n \t\t\tpart_data[idx] = mm / Interval::MONTHS_PER_QUARTER + 1;\n \t\t}\n \t}\n \n \tif (mask & TIME) {\n \t\tconst auto micros = MicrosecondsOperator::Operation<interval_t, int64_t>(input);\n-\t\tif (HasPartValue(part_values, DatePartSpecifier::MICROSECONDS, part_data)) {\n+\t\tpart_data = HasPartValue(part_values, DatePartSpecifier::MICROSECONDS);\n+\t\tif (part_data) {\n \t\t\tpart_data[idx] = micros;\n \t\t}\n-\t\tif (HasPartValue(part_values, DatePartSpecifier::MILLISECONDS, part_data)) {\n+\t\tpart_data = HasPartValue(part_values, DatePartSpecifier::MILLISECONDS);\n+\t\tif (part_data) {\n \t\t\tpart_data[idx] = micros / Interval::MICROS_PER_MSEC;\n \t\t}\n-\t\tif (HasPartValue(part_values, DatePartSpecifier::SECOND, part_data)) {\n+\t\tpart_data = HasPartValue(part_values, DatePartSpecifier::SECOND);\n+\t\tif (part_data) {\n \t\t\tpart_data[idx] = micros / Interval::MICROS_PER_SEC;\n \t\t}\n-\t\tif (HasPartValue(part_values, DatePartSpecifier::MINUTE, part_data)) {\n+\t\tpart_data = HasPartValue(part_values, DatePartSpecifier::MINUTE);\n+\t\tif (part_data) {\n \t\t\tpart_data[idx] = MinutesOperator::Operation<interval_t, int64_t>(input);\n \t\t}\n-\t\tif (HasPartValue(part_values, DatePartSpecifier::HOUR, part_data)) {\n+\t\tpart_data = HasPartValue(part_values, DatePartSpecifier::HOUR);\n+\t\tif (part_data) {\n \t\t\tpart_data[idx] = HoursOperator::Operation<interval_t, int64_t>(input);\n \t\t}\n \t}\n \n \tif (mask & EPOCH) {\n-\t\tif (HasPartValue(part_values, DatePartSpecifier::EPOCH, part_data)) {\n+\t\tpart_data = HasPartValue(part_values, DatePartSpecifier::EPOCH);\n+\t\tif (part_data) {\n \t\t\tpart_data[idx] = EpochOperator::Operation<interval_t, int64_t>(input);\n \t\t}\n \t}\n@@ -1466,6 +1591,47 @@ ScalarFunctionSet EpochFun::GetFunctions() {\n \treturn GetTimePartFunction<DatePart::EpochOperator>();\n }\n \n+ScalarFunctionSet EpochNanosecondsFun::GetFunctions() {\n+\tusing OP = DatePart::EpochNanosecondsOperator;\n+\tauto operator_set = GetTimePartFunction<OP>();\n+\n+\t//\tTIMESTAMP WITH TIME ZONE has the same representation as TIMESTAMP so no need to defer to ICU\n+\tauto tstz_func = DatePart::UnaryFunction<timestamp_t, int64_t, OP>;\n+\tauto tstz_stats = OP::template PropagateStatistics<timestamp_t>;\n+\toperator_set.AddFunction(\n+\t    ScalarFunction({LogicalType::TIMESTAMP_TZ}, LogicalType::BIGINT, tstz_func, nullptr, nullptr, tstz_stats));\n+\treturn operator_set;\n+}\n+\n+ScalarFunctionSet EpochMicrosecondsFun::GetFunctions() {\n+\tusing OP = DatePart::EpochMicrosecondsOperator;\n+\tauto operator_set = GetTimePartFunction<OP>();\n+\n+\t//\tTIMESTAMP WITH TIME ZONE has the same representation as TIMESTAMP so no need to defer to ICU\n+\tauto tstz_func = DatePart::UnaryFunction<timestamp_t, int64_t, OP>;\n+\tauto tstz_stats = OP::template PropagateStatistics<timestamp_t>;\n+\toperator_set.AddFunction(\n+\t    ScalarFunction({LogicalType::TIMESTAMP_TZ}, LogicalType::BIGINT, tstz_func, nullptr, nullptr, tstz_stats));\n+\treturn operator_set;\n+}\n+\n+ScalarFunctionSet EpochMsFun::GetFunctions() {\n+\tusing OP = DatePart::EpochMillisOperator;\n+\tauto operator_set = GetTimePartFunction<OP>();\n+\n+\t//\tTIMESTAMP WITH TIME ZONE has the same representation as TIMESTAMP so no need to defer to ICU\n+\tauto tstz_func = DatePart::UnaryFunction<timestamp_t, int64_t, OP>;\n+\tauto tstz_stats = OP::template PropagateStatistics<timestamp_t>;\n+\toperator_set.AddFunction(\n+\t    ScalarFunction({LogicalType::TIMESTAMP_TZ}, LogicalType::BIGINT, tstz_func, nullptr, nullptr, tstz_stats));\n+\n+\t//\tLegacy inverse BIGINT => TIMESTAMP\n+\toperator_set.AddFunction(\n+\t    ScalarFunction({LogicalType::BIGINT}, LogicalType::TIMESTAMP, DatePart::EpochMillisOperator::Inverse));\n+\n+\treturn operator_set;\n+}\n+\n ScalarFunctionSet MicrosecondsFun::GetFunctions() {\n \treturn GetTimePartFunction<DatePart::MicrosecondsOperator>();\n }\ndiff --git a/src/core_functions/scalar/date/epoch.cpp b/src/core_functions/scalar/date/epoch.cpp\nindex 3df82abb1559..d309c85ddd9c 100644\n--- a/src/core_functions/scalar/date/epoch.cpp\n+++ b/src/core_functions/scalar/date/epoch.cpp\n@@ -20,23 +20,6 @@ static void EpochSecFunction(DataChunk &input, ExpressionState &state, Vector &r\n \tUnaryExecutor::Execute<int64_t, timestamp_t, EpochSecOperator>(input.data[0], result, input.size());\n }\n \n-struct EpochMillisOperator {\n-\ttemplate <class INPUT_TYPE, class RESULT_TYPE>\n-\tstatic RESULT_TYPE Operation(INPUT_TYPE input) {\n-\t\treturn Timestamp::FromEpochMs(input);\n-\t}\n-};\n-\n-static void EpochMillisFunction(DataChunk &input, ExpressionState &state, Vector &result) {\n-\tD_ASSERT(input.ColumnCount() == 1);\n-\n-\tUnaryExecutor::Execute<int64_t, timestamp_t, EpochMillisOperator>(input.data[0], result, input.size());\n-}\n-\n-ScalarFunction EpochMsFun::GetFunction() {\n-\treturn ScalarFunction({LogicalType::BIGINT}, LogicalType::TIMESTAMP, EpochMillisFunction);\n-}\n-\n ScalarFunction ToTimestampFun::GetFunction() {\n \t// to_timestamp is an alias from Postgres that converts the time in seconds to a timestamp\n \treturn ScalarFunction({LogicalType::BIGINT}, LogicalType::TIMESTAMP, EpochSecFunction);\ndiff --git a/src/core_functions/scalar/date/functions.json b/src/core_functions/scalar/date/functions.json\nindex 4e070d251e0c..d1a9eb1af7bd 100644\n--- a/src/core_functions/scalar/date/functions.json\n+++ b/src/core_functions/scalar/date/functions.json\n@@ -100,16 +100,30 @@\n     },\n     {\n         \"name\": \"epoch\",\n-        \"parameters\": \"ts\",\n-        \"description\": \"Extract the epoch component from a date or timestamp\",\n+        \"parameters\": \"temporal\",\n+        \"description\": \"Extract the epoch component from a temporal type\",\n         \"example\": \"epoch(timestamp '2021-08-03 11:59:44.123456')\",\n         \"type\": \"scalar_function_set\"\n     },\n     {\n         \"name\": \"epoch_ms\",\n-        \"parameters\": \"ms\",\n-        \"description\": \"Converts ms since epoch to a timestamp\",\n-        \"example\": \"epoch_ms(701222400000)\",\n+        \"parameters\": \"temporal\",\n+        \"description\": \"Extract the epoch component in milliseconds from a temporal type\",\n+        \"example\": \"epoch_ms(timestamp '2021-08-03 11:59:44.123456')\",\n+        \"type\": \"scalar_function\"\n+    },\n+    {\n+        \"name\": \"epoch_us\",\n+        \"parameters\": \"temporal\",\n+        \"description\": \"Extract the epoch component in microseconds from a temporal type\",\n+        \"example\": \"epoch_us(timestamp '2021-08-03 11:59:44.123456')\",\n+        \"type\": \"scalar_function\"\n+    },\n+    {\n+        \"name\": \"epoch_ns\",\n+        \"parameters\": \"temporal\",\n+        \"description\": \"Extract the epoch component in nanoseconds from a temporal type\",\n+        \"example\": \"epoch_ns(timestamp '2021-08-03 11:59:44.123456')\",\n         \"type\": \"scalar_function\"\n     },\n     {\n@@ -399,4 +413,4 @@\n         \"example\": \"yearweek(timestamp '2021-08-03 11:59:44.123456')\",\n         \"type\": \"scalar_function_set\"\n     }\n-]\n\\ No newline at end of file\n+]\ndiff --git a/src/core_functions/scalar/date/make_date.cpp b/src/core_functions/scalar/date/make_date.cpp\nindex f01941847065..2eb5248bbb02 100644\n--- a/src/core_functions/scalar/date/make_date.cpp\n+++ b/src/core_functions/scalar/date/make_date.cpp\n@@ -72,10 +72,21 @@ struct MakeTimestampOperator {\n \t\tconst auto t = MakeTimeOperator::Operation<HR, MN, SS, dtime_t>(hr, mn, ss);\n \t\treturn Timestamp::FromDatetime(d, t);\n \t}\n+\n+\ttemplate <typename T, typename RESULT_TYPE>\n+\tstatic RESULT_TYPE Operation(T micros) {\n+\t\treturn timestamp_t(micros);\n+\t}\n };\n \n template <typename T>\n static void ExecuteMakeTimestamp(DataChunk &input, ExpressionState &state, Vector &result) {\n+\tif (input.ColumnCount() == 1) {\n+\t\tauto func = MakeTimestampOperator::Operation<T, timestamp_t>;\n+\t\tUnaryExecutor::Execute<T, timestamp_t>(input.data[0], result, input.size(), func);\n+\t\treturn;\n+\t}\n+\n \tD_ASSERT(input.ColumnCount() == 6);\n \n \tauto func = MakeTimestampOperator::Operation<T, T, T, T, T, double, timestamp_t>;\n@@ -99,10 +110,14 @@ ScalarFunction MakeTimeFun::GetFunction() {\n \t                      ExecuteMakeTime<int64_t>);\n }\n \n-ScalarFunction MakeTimestampFun::GetFunction() {\n-\treturn ScalarFunction({LogicalType::BIGINT, LogicalType::BIGINT, LogicalType::BIGINT, LogicalType::BIGINT,\n-\t                       LogicalType::BIGINT, LogicalType::DOUBLE},\n-\t                      LogicalType::TIMESTAMP, ExecuteMakeTimestamp<int64_t>);\n+ScalarFunctionSet MakeTimestampFun::GetFunctions() {\n+\tScalarFunctionSet operator_set(\"make_timestamp\");\n+\toperator_set.AddFunction(ScalarFunction({LogicalType::BIGINT, LogicalType::BIGINT, LogicalType::BIGINT,\n+\t                                         LogicalType::BIGINT, LogicalType::BIGINT, LogicalType::DOUBLE},\n+\t                                        LogicalType::TIMESTAMP, ExecuteMakeTimestamp<int64_t>));\n+\toperator_set.AddFunction(\n+\t    ScalarFunction({LogicalType::BIGINT}, LogicalType::TIMESTAMP, ExecuteMakeTimestamp<int64_t>));\n+\treturn operator_set;\n }\n \n } // namespace duckdb\ndiff --git a/src/execution/index/art/CMakeLists.txt b/src/execution/index/art/CMakeLists.txt\nindex 4e5e0900e015..ecd56561faa5 100644\n--- a/src/execution/index/art/CMakeLists.txt\n+++ b/src/execution/index/art/CMakeLists.txt\n@@ -13,7 +13,6 @@ add_library_unity(\n   node256.cpp\n   swizzleable_pointer.cpp\n   prefix.cpp\n-  prefix_segment.cpp\n   art.cpp)\n \n set(ALL_OBJECT_FILES\ndiff --git a/src/execution/index/art/art.cpp b/src/execution/index/art/art.cpp\nindex a1862744b1c6..4d2b83975b55 100644\n--- a/src/execution/index/art/art.cpp\n+++ b/src/execution/index/art/art.cpp\n@@ -5,7 +5,6 @@\n #include \"duckdb/execution/expression_executor.hpp\"\n #include \"duckdb/storage/arena_allocator.hpp\"\n #include \"duckdb/execution/index/art/art_key.hpp\"\n-#include \"duckdb/execution/index/art/prefix_segment.hpp\"\n #include \"duckdb/execution/index/art/leaf_segment.hpp\"\n #include \"duckdb/execution/index/art/prefix.hpp\"\n #include \"duckdb/execution/index/art/leaf.hpp\"\n@@ -44,7 +43,7 @@ ART::ART(const vector<column_t> &column_ids, TableIOManager &table_io_manager,\n \t}\n \n \t// initialize all allocators\n-\tallocators.emplace_back(make_uniq<FixedSizeAllocator>(sizeof(PrefixSegment), buffer_manager.GetBufferAllocator()));\n+\tallocators.emplace_back(make_uniq<FixedSizeAllocator>(sizeof(Prefix), buffer_manager.GetBufferAllocator()));\n \tallocators.emplace_back(make_uniq<FixedSizeAllocator>(sizeof(LeafSegment), buffer_manager.GetBufferAllocator()));\n \tallocators.emplace_back(make_uniq<FixedSizeAllocator>(sizeof(Leaf), buffer_manager.GetBufferAllocator()));\n \tallocators.emplace_back(make_uniq<FixedSizeAllocator>(sizeof(Node4), buffer_manager.GetBufferAllocator()));\n@@ -306,10 +305,12 @@ bool Construct(ART &art, vector<ARTKey> &keys, row_t *row_ids, Node &node, KeySe\n \t\t\treturn false;\n \t\t}\n \n+\t\treference<Node> ref_node(node);\n+\t\tPrefix::New(art, ref_node, start_key, prefix_start, start_key.len - prefix_start);\n \t\tif (single_row_id) {\n-\t\t\tLeaf::New(art, node, start_key, prefix_start, row_ids[key_section.start]);\n+\t\t\tLeaf::New(art, ref_node, row_ids[key_section.start]);\n \t\t} else {\n-\t\t\tLeaf::New(art, node, start_key, prefix_start, row_ids + key_section.start, num_row_ids);\n+\t\t\tLeaf::New(art, ref_node, row_ids + key_section.start, num_row_ids);\n \t\t}\n \t\treturn true;\n \t}\n@@ -320,17 +321,20 @@ bool Construct(ART &art, vector<ARTKey> &keys, row_t *row_ids, Node &node, KeySe\n \tvector<KeySection> child_sections;\n \tGetChildSections(child_sections, keys, key_section);\n \n-\tauto node_type = Node::GetARTNodeTypeByCount(child_sections.size());\n-\tNode::New(art, node, node_type);\n-\n+\t// set the prefix\n+\treference<Node> ref_node(node);\n \tauto prefix_length = key_section.depth - prefix_start;\n-\tnode.GetPrefix(art).Initialize(art, start_key, prefix_start, prefix_length);\n+\tPrefix::New(art, ref_node, start_key, prefix_start, prefix_length);\n+\n+\t// set the node\n+\tauto node_type = Node::GetARTNodeTypeByCount(child_sections.size());\n+\tNode::New(art, ref_node, node_type);\n \n \t// recurse on each child section\n \tfor (auto &child_section : child_sections) {\n \t\tNode new_child;\n \t\tauto no_violation = Construct(art, keys, row_ids, new_child, child_section, has_constraint);\n-\t\tNode::InsertChild(art, node, child_section.key_byte, new_child);\n+\t\tNode::InsertChild(art, ref_node, child_section.key_byte, new_child);\n \t\tif (!no_violation) {\n \t\t\treturn false;\n \t\t}\n@@ -485,73 +489,75 @@ bool ART::InsertToLeaf(Node &leaf_node, const row_t &row_id) {\n \n bool ART::Insert(Node &node, const ARTKey &key, idx_t depth, const row_t &row_id) {\n \n+\t// node is currently empty, create a leaf here with the key\n \tif (!node.IsSet()) {\n-\t\t// node is currently empty, create a leaf here with the key\n-\t\tLeaf::New(*this, node, key, depth, row_id);\n+\t\tD_ASSERT(depth <= key.len);\n+\t\treference<Node> ref_node(node);\n+\t\tPrefix::New(*this, ref_node, key, depth, key.len - depth);\n+\t\tLeaf::New(*this, ref_node, row_id);\n \t\treturn true;\n \t}\n \n-\tif (node.DecodeARTNodeType() == NType::LEAF) {\n+\tauto node_type = node.DecodeARTNodeType();\n \n-\t\t// add a row ID to a leaf, if they have the same key\n-\t\tauto &leaf = Leaf::Get(*this, node);\n-\t\tauto mismatch_position = leaf.prefix.KeyMismatchPosition(*this, key, depth);\n-\t\tif (mismatch_position == leaf.prefix.count && depth + leaf.prefix.count == key.len) {\n-\t\t\treturn InsertToLeaf(node, row_id);\n-\t\t}\n+\t// insert the row ID into this leaf\n+\tif (node_type == NType::LEAF) {\n+\t\treturn InsertToLeaf(node, row_id);\n+\t}\n \n-\t\t// replace leaf with Node4 and store both leaves in it\n-\t\tauto old_node = node;\n-\t\tauto &new_n4 = Node4::New(*this, node);\n-\t\tnew_n4.prefix.Initialize(*this, key, depth, mismatch_position);\n+\tif (node_type != NType::PREFIX) {\n+\t\tD_ASSERT(depth < key.len);\n+\t\tauto child = node.GetChild(*this, key[depth]);\n \n-\t\tauto key_byte = old_node.GetPrefix(*this).Reduce(*this, mismatch_position);\n-\t\tNode4::InsertChild(*this, node, key_byte, old_node);\n+\t\t// recurse, if a child exists at key[depth]\n+\t\tif (child) {\n+\t\t\tbool success = Insert(*child, key, depth + 1, row_id);\n+\t\t\tnode.ReplaceChild(*this, key[depth], *child);\n+\t\t\treturn success;\n+\t\t}\n \n+\t\t// insert a new leaf node at key[depth]\n \t\tNode leaf_node;\n-\t\tLeaf::New(*this, leaf_node, key, depth + mismatch_position + 1, row_id);\n-\t\tNode4::InsertChild(*this, node, key[depth + mismatch_position], leaf_node);\n-\n+\t\tif (depth + 1 < key.len) {\n+\t\t\treference<Node> ref_node(leaf_node);\n+\t\t\tPrefix::New(*this, ref_node, key, depth + 1, key.len - depth - 1);\n+\t\t\tLeaf::New(*this, ref_node, row_id);\n+\t\t} else {\n+\t\t\tLeaf::New(*this, leaf_node, row_id);\n+\t\t}\n+\t\tNode::InsertChild(*this, node, key[depth], leaf_node);\n \t\treturn true;\n \t}\n \n-\t// handle prefix of inner node\n-\tauto &old_node_prefix = node.GetPrefix(*this);\n-\tif (old_node_prefix.count) {\n-\n-\t\tauto mismatch_position = old_node_prefix.KeyMismatchPosition(*this, key, depth);\n-\t\tif (mismatch_position != old_node_prefix.count) {\n-\n-\t\t\t// prefix differs, create new node\n-\t\t\tauto old_node = node;\n-\t\t\tauto &new_n4 = Node4::New(*this, node);\n-\t\t\tnew_n4.prefix.Initialize(*this, key, depth, mismatch_position);\n+\t// this is a prefix node, traverse\n+\treference<Node> next_node(node);\n+\tauto mismatch_position = Prefix::Traverse(*this, next_node, key, depth);\n \n-\t\t\tauto key_byte = old_node_prefix.Reduce(*this, mismatch_position);\n-\t\t\tNode4::InsertChild(*this, node, key_byte, old_node);\n-\n-\t\t\tNode leaf_node;\n-\t\t\tLeaf::New(*this, leaf_node, key, depth + mismatch_position + 1, row_id);\n-\t\t\tNode4::InsertChild(*this, node, key[depth + mismatch_position], leaf_node);\n-\n-\t\t\treturn true;\n-\t\t}\n-\t\tdepth += node.GetPrefix(*this).count;\n+\t// prefix matches key\n+\tif (next_node.get().DecodeARTNodeType() != NType::PREFIX) {\n+\t\treturn Insert(next_node, key, depth, row_id);\n \t}\n \n-\t// recurse\n-\tD_ASSERT(depth < key.len);\n-\tauto child = node.GetChild(*this, key[depth]);\n-\tif (child) {\n-\t\tbool success = Insert(*child, key, depth + 1, row_id);\n-\t\tnode.ReplaceChild(*this, key[depth], *child);\n-\t\treturn success;\n-\t}\n+\t// prefix does not match the key, we need to create a new Node4; this new Node4 has two children,\n+\t// the remaining part of the prefix, and the new leaf\n+\tNode remaining_prefix;\n+\tauto prefix_byte = Prefix::GetByte(*this, next_node, mismatch_position);\n+\tPrefix::Split(*this, next_node, remaining_prefix, mismatch_position);\n+\tNode4::New(*this, next_node);\n+\n+\t// insert remaining prefix\n+\tNode4::InsertChild(*this, next_node, prefix_byte, remaining_prefix);\n \n-\t// insert at position\n+\t// insert new leaf\n \tNode leaf_node;\n-\tLeaf::New(*this, leaf_node, key, depth + 1, row_id);\n-\tNode::InsertChild(*this, node, key[depth], leaf_node);\n+\tif (depth + 1 < key.len) {\n+\t\treference<Node> ref_node(leaf_node);\n+\t\tPrefix::New(*this, ref_node, key, depth + 1, key.len - depth - 1);\n+\t\tLeaf::New(*this, ref_node, row_id);\n+\t} else {\n+\t\tLeaf::New(*this, leaf_node, row_id);\n+\t}\n+\tNode4::InsertChild(*this, next_node, key[depth], leaf_node);\n \treturn true;\n }\n \n@@ -614,9 +620,18 @@ void ART::Erase(Node &node, const ARTKey &key, idx_t depth, const row_t &row_id)\n \t\treturn;\n \t}\n \n-\t// delete a row ID from a leaf\n-\tif (node.DecodeARTNodeType() == NType::LEAF) {\n-\t\tauto &leaf = Leaf::Get(*this, node);\n+\t// handle prefix\n+\treference<Node> next_node(node);\n+\tif (next_node.get().DecodeARTNodeType() == NType::PREFIX) {\n+\t\tPrefix::Traverse(*this, next_node, key, depth);\n+\t\tif (next_node.get().DecodeARTNodeType() == NType::PREFIX) {\n+\t\t\treturn;\n+\t\t}\n+\t}\n+\n+\t// delete a row ID from a leaf (root is leaf with possible prefix nodes)\n+\tif (next_node.get().DecodeARTNodeType() == NType::LEAF) {\n+\t\tauto &leaf = Leaf::Get(*this, next_node.get());\n \t\tleaf.Remove(*this, row_id);\n \n \t\tif (leaf.count == 0) {\n@@ -626,34 +641,35 @@ void ART::Erase(Node &node, const ARTKey &key, idx_t depth, const row_t &row_id)\n \t\treturn;\n \t}\n \n-\t// handle prefix\n-\tauto &node_prefix = node.GetPrefix(*this);\n-\tif (node_prefix.count) {\n-\t\tif (node_prefix.KeyMismatchPosition(*this, key, depth) != node_prefix.count) {\n-\t\t\treturn;\n-\t\t}\n-\t\tdepth += node_prefix.count;\n-\t}\n-\n-\tauto child = node.GetChild(*this, key[depth]);\n+\tD_ASSERT(depth < key.len);\n+\tauto child = next_node.get().GetChild(*this, key[depth]);\n \tif (child) {\n \t\tD_ASSERT(child->IsSet());\n \n-\t\tif (child->DecodeARTNodeType() == NType::LEAF) {\n+\t\tauto temp_depth = depth + 1;\n+\t\treference<Node> child_node(*child);\n+\t\tif (child_node.get().DecodeARTNodeType() == NType::PREFIX) {\n+\t\t\tPrefix::Traverse(*this, child_node, key, temp_depth);\n+\t\t\tif (child_node.get().DecodeARTNodeType() == NType::PREFIX) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n+\n+\t\tif (child_node.get().DecodeARTNodeType() == NType::LEAF) {\n \t\t\t// leaf found, remove entry\n-\t\t\tauto &leaf = Leaf::Get(*this, *child);\n+\t\t\tauto &leaf = Leaf::Get(*this, child_node.get());\n \t\t\tleaf.Remove(*this, row_id);\n \n \t\t\tif (leaf.count == 0) {\n \t\t\t\t// leaf is empty, delete leaf, decrement node counter and maybe shrink node\n-\t\t\t\tNode::DeleteChild(*this, node, key[depth]);\n+\t\t\t\tNode::DeleteChild(*this, next_node, node, key[depth]);\n \t\t\t}\n \t\t\treturn;\n \t\t}\n \n \t\t// recurse\n \t\tErase(*child, key, depth + 1, row_id);\n-\t\tnode.ReplaceChild(*this, key[depth], *child);\n+\t\tnext_node.get().ReplaceChild(*this, key[depth], *child);\n \t}\n }\n \n@@ -733,35 +749,28 @@ void ART::SearchEqualJoinNoFetch(ARTKey &key, idx_t &result_size) {\n Node ART::Lookup(Node node, const ARTKey &key, idx_t depth) {\n \n \twhile (node.IsSet()) {\n-\t\tif (node.DecodeARTNodeType() == NType::LEAF) {\n-\t\t\tauto &leaf = Leaf::Get(*this, node);\n \n-\t\t\t// check if leaf contains key\n-\t\t\tfor (idx_t i = 0; i < leaf.prefix.count; i++) {\n-\t\t\t\tif (leaf.prefix.GetByte(*this, i) != key[i + depth]) {\n-\t\t\t\t\treturn Node();\n-\t\t\t\t}\n+\t\t// traverse prefix, if exists\n+\t\treference<Node> next_node(node);\n+\t\tif (next_node.get().DecodeARTNodeType() == NType::PREFIX) {\n+\t\t\tPrefix::Traverse(*this, next_node, key, depth);\n+\t\t\tif (next_node.get().DecodeARTNodeType() == NType::PREFIX) {\n+\t\t\t\treturn Node();\n \t\t\t}\n-\t\t\treturn node;\n \t\t}\n-\t\tauto &node_prefix = node.GetPrefix(*this);\n-\t\tif (node_prefix.count) {\n-\t\t\tfor (idx_t pos = 0; pos < node_prefix.count; pos++) {\n-\t\t\t\tif (key[depth + pos] != node_prefix.GetByte(*this, pos)) {\n-\t\t\t\t\t// prefix mismatch, subtree of node does not contain key\n-\t\t\t\t\treturn Node();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tdepth += node_prefix.count;\n+\n+\t\tif (next_node.get().DecodeARTNodeType() == NType::LEAF) {\n+\t\t\treturn next_node.get();\n \t\t}\n \n-\t\t// prefix matches key, but no child at byte, does not contain key\n-\t\tauto child = node.GetChild(*this, key[depth]);\n+\t\tD_ASSERT(depth < key.len);\n+\t\tauto child = next_node.get().GetChild(*this, key[depth]);\n \t\tif (!child) {\n+\t\t\t// prefix matches key, but no child at byte, ART/subtree does not contain key\n \t\t\treturn Node();\n \t\t}\n \n-\t\t// recurse into child\n+\t\t// lookup in child node\n \t\tnode = *child;\n \t\tD_ASSERT(node.IsSet());\n \t\tdepth++;\n@@ -771,21 +780,21 @@ Node ART::Lookup(Node node, const ARTKey &key, idx_t depth) {\n }\n \n //===--------------------------------------------------------------------===//\n-// Greater Than\n-// Returns: True (If found leaf >= key)\n-//          False (Otherwise)\n+// Greater Than and Less Than\n //===--------------------------------------------------------------------===//\n \n-bool ART::SearchGreater(ARTIndexScanState &state, ARTKey &key, bool inclusive, idx_t max_count,\n-                        vector<row_t> &result_ids) {\n+bool ART::SearchGreater(ARTIndexScanState &state, ARTKey &key, bool equal, idx_t max_count, vector<row_t> &result_ids) {\n \n-\tauto &it = state.iterator;\n+\tif (!tree->IsSet()) {\n+\t\treturn true;\n+\t}\n+\tIterator &it = state.iterator;\n \n-\t// greater than scan: first set the iterator to the node at which we will start our scan by finding the lowest node\n-\t// that satisfies our requirement\n+\t// find the lowest value that satisfies the predicate\n \tif (!it.art) {\n \t\tit.art = this;\n-\t\tif (!it.LowerBound(*tree, key, inclusive)) {\n+\t\tif (!it.LowerBound(*tree, key, equal, 0)) {\n+\t\t\t// early-out, if the maximum value in the ART is lower than the lower bound\n \t\t\treturn true;\n \t\t}\n \t}\n@@ -796,86 +805,84 @@ bool ART::SearchGreater(ARTIndexScanState &state, ARTKey &key, bool inclusive, i\n \treturn it.Scan(empty_key, max_count, result_ids, false);\n }\n \n-//===--------------------------------------------------------------------===//\n-// Less Than\n-//===--------------------------------------------------------------------===//\n-\n-bool ART::SearchLess(ARTIndexScanState &state, ARTKey &upper_bound, bool inclusive, idx_t max_count,\n+bool ART::SearchLess(ARTIndexScanState &state, ARTKey &upper_bound, bool equal, idx_t max_count,\n                      vector<row_t> &result_ids) {\n \n \tif (!tree->IsSet()) {\n \t\treturn true;\n \t}\n-\n-\tauto &it = state.iterator;\n+\tIterator &it = state.iterator;\n \n \tif (!it.art) {\n \t\tit.art = this;\n-\t\t// first find the minimum value in the ART: we start scanning from this value\n+\t\t// find the minimum value in the ART: we start scanning from this value\n \t\tit.FindMinimum(*tree);\n-\t\t// early out min value higher than upper bound query\n-\t\tif (it.cur_key > upper_bound) {\n+\t\t// early-out, if the minimum value is higher than the upper bound\n+\t\tif (it.current_key > upper_bound) {\n \t\t\treturn true;\n \t\t}\n \t}\n \n \t// now continue the scan until we reach the upper bound\n-\treturn it.Scan(upper_bound, max_count, result_ids, inclusive);\n+\treturn it.Scan(upper_bound, max_count, result_ids, equal);\n }\n \n //===--------------------------------------------------------------------===//\n // Closed Range Query\n //===--------------------------------------------------------------------===//\n \n-bool ART::SearchCloseRange(ARTIndexScanState &state, ARTKey &lower_bound, ARTKey &upper_bound, bool left_inclusive,\n-                           bool right_inclusive, idx_t max_count, vector<row_t> &result_ids) {\n-\tauto &it = state.iterator;\n+bool ART::SearchCloseRange(ARTIndexScanState &state, ARTKey &lower_bound, ARTKey &upper_bound, bool left_equal,\n+                           bool right_equal, idx_t max_count, vector<row_t> &result_ids) {\n+\n+\tIterator &it = state.iterator;\n \n-\t// first find the first node that satisfies the left predicate\n+\t// find the first node that satisfies the left predicate\n \tif (!it.art) {\n \t\tit.art = this;\n-\t\tif (!it.LowerBound(*tree, lower_bound, left_inclusive)) {\n+\t\tif (!it.LowerBound(*tree, lower_bound, left_equal, 0)) {\n+\t\t\t// early-out, if the maximum value in the ART is lower than the lower bound\n \t\t\treturn true;\n \t\t}\n \t}\n \n \t// now continue the scan until we reach the upper bound\n-\treturn it.Scan(upper_bound, max_count, result_ids, right_inclusive);\n+\treturn it.Scan(upper_bound, max_count, result_ids, right_equal);\n }\n \n-bool ART::Scan(const Transaction &transaction, const DataTable &table, IndexScanState &table_state,\n-               const idx_t max_count, vector<row_t> &result_ids) {\n-\tauto &state = table_state.Cast<ARTIndexScanState>();\n+bool ART::Scan(const Transaction &transaction, const DataTable &table, IndexScanState &state, const idx_t max_count,\n+               vector<row_t> &result_ids) {\n+\n+\tauto &scan_state = state.Cast<ARTIndexScanState>();\n \tvector<row_t> row_ids;\n \tbool success;\n \n \t// FIXME: the key directly owning the data for a single key might be more efficient\n-\tD_ASSERT(state.values[0].type().InternalType() == types[0]);\n+\tD_ASSERT(scan_state.values[0].type().InternalType() == types[0]);\n \tArenaAllocator arena_allocator(Allocator::Get(db));\n-\tauto key = CreateKey(arena_allocator, types[0], state.values[0]);\n+\tauto key = CreateKey(arena_allocator, types[0], scan_state.values[0]);\n \n-\tif (state.values[1].IsNull()) {\n+\tif (scan_state.values[1].IsNull()) {\n \n \t\t// single predicate\n \t\tlock_guard<mutex> l(lock);\n-\t\tswitch (state.expressions[0]) {\n+\t\tswitch (scan_state.expressions[0]) {\n \t\tcase ExpressionType::COMPARE_EQUAL:\n \t\t\tsuccess = SearchEqual(key, max_count, row_ids);\n \t\t\tbreak;\n \t\tcase ExpressionType::COMPARE_GREATERTHANOREQUALTO:\n-\t\t\tsuccess = SearchGreater(state, key, true, max_count, row_ids);\n+\t\t\tsuccess = SearchGreater(scan_state, key, true, max_count, row_ids);\n \t\t\tbreak;\n \t\tcase ExpressionType::COMPARE_GREATERTHAN:\n-\t\t\tsuccess = SearchGreater(state, key, false, max_count, row_ids);\n+\t\t\tsuccess = SearchGreater(scan_state, key, false, max_count, row_ids);\n \t\t\tbreak;\n \t\tcase ExpressionType::COMPARE_LESSTHANOREQUALTO:\n-\t\t\tsuccess = SearchLess(state, key, true, max_count, row_ids);\n+\t\t\tsuccess = SearchLess(scan_state, key, true, max_count, row_ids);\n \t\t\tbreak;\n \t\tcase ExpressionType::COMPARE_LESSTHAN:\n-\t\t\tsuccess = SearchLess(state, key, false, max_count, row_ids);\n+\t\t\tsuccess = SearchLess(scan_state, key, false, max_count, row_ids);\n \t\t\tbreak;\n \t\tdefault:\n-\t\t\tthrow InternalException(\"Operation not implemented\");\n+\t\t\tthrow InternalException(\"Index scan type not implemented\");\n \t\t}\n \n \t} else {\n@@ -883,12 +890,12 @@ bool ART::Scan(const Transaction &transaction, const DataTable &table, IndexScan\n \t\t// two predicates\n \t\tlock_guard<mutex> l(lock);\n \n-\t\tD_ASSERT(state.values[1].type().InternalType() == types[0]);\n-\t\tauto upper_bound = CreateKey(arena_allocator, types[0], state.values[1]);\n+\t\tD_ASSERT(scan_state.values[1].type().InternalType() == types[0]);\n+\t\tauto upper_bound = CreateKey(arena_allocator, types[0], scan_state.values[1]);\n \n-\t\tbool left_inclusive = state.expressions[0] == ExpressionType ::COMPARE_GREATERTHANOREQUALTO;\n-\t\tbool right_inclusive = state.expressions[1] == ExpressionType ::COMPARE_LESSTHANOREQUALTO;\n-\t\tsuccess = SearchCloseRange(state, key, upper_bound, left_inclusive, right_inclusive, max_count, row_ids);\n+\t\tbool left_equal = scan_state.expressions[0] == ExpressionType ::COMPARE_GREATERTHANOREQUALTO;\n+\t\tbool right_equal = scan_state.expressions[1] == ExpressionType ::COMPARE_LESSTHANOREQUALTO;\n+\t\tsuccess = SearchCloseRange(scan_state, key, upper_bound, left_equal, right_equal, max_count, row_ids);\n \t}\n \n \tif (!success) {\n@@ -1136,6 +1143,9 @@ bool ART::MergeIndexes(IndexLock &state, Index &other_index) {\n //===--------------------------------------------------------------------===//\n \n string ART::VerifyAndToString(IndexLock &state, const bool only_verify) {\n+\t// FIXME: this can be improved by counting the allocations of each node type,\n+\t// FIXME: and by asserting that each fixed-size allocator lists an equal number of\n+\t// FIXME: allocations of that type\n \treturn VerifyAndToStringInternal(only_verify);\n }\n \ndiff --git a/src/execution/index/art/fixed_size_allocator.cpp b/src/execution/index/art/fixed_size_allocator.cpp\nindex ff1cbefd2fb2..595c3932c9c4 100644\n--- a/src/execution/index/art/fixed_size_allocator.cpp\n+++ b/src/execution/index/art/fixed_size_allocator.cpp\n@@ -114,7 +114,7 @@ void FixedSizeAllocator::Merge(FixedSizeAllocator &other) {\n \t}\n \tother.buffers.clear();\n \n-\t// merge the vectors containing all buffers with free space\n+\t// merge the buffers with free spaces\n \tfor (auto &buffer_id : other.buffers_with_free_space) {\n \t\tbuffers_with_free_space.insert(buffer_id + buffer_count);\n \t}\ndiff --git a/src/execution/index/art/iterator.cpp b/src/execution/index/art/iterator.cpp\nindex 0b95d86c6af9..e9df313fcbff 100644\n--- a/src/execution/index/art/iterator.cpp\n+++ b/src/execution/index/art/iterator.cpp\n@@ -7,111 +7,58 @@\n \n namespace duckdb {\n \n-void IteratorCurrentKey::Push(const uint8_t byte) {\n-\tif (cur_key_pos == key.size()) {\n-\t\tkey.push_back(byte);\n-\t}\n-\tD_ASSERT(cur_key_pos < key.size());\n-\tkey[cur_key_pos++] = byte;\n-}\n-\n-void IteratorCurrentKey::Pop(const idx_t n) {\n-\tcur_key_pos -= n;\n-\tD_ASSERT(cur_key_pos <= key.size());\n-}\n-\n-uint8_t &IteratorCurrentKey::operator[](idx_t idx) {\n-\tif (idx >= key.size()) {\n-\t\tkey.push_back(0);\n-\t}\n-\tD_ASSERT(idx < key.size());\n-\treturn key[idx];\n-}\n-\n-bool IteratorCurrentKey::operator>(const ARTKey &k) const {\n-\tfor (idx_t i = 0; i < MinValue<idx_t>(cur_key_pos, k.len); i++) {\n-\t\tif (key[i] > k.data[i]) {\n+bool IteratorKey::operator>(const ARTKey &k) const {\n+\tfor (idx_t i = 0; i < MinValue<idx_t>(key_bytes.size(), k.len); i++) {\n+\t\tif (key_bytes[i] > k.data[i]) {\n \t\t\treturn true;\n-\t\t} else if (key[i] < k.data[i]) {\n+\t\t} else if (key_bytes[i] < k.data[i]) {\n \t\t\treturn false;\n \t\t}\n \t}\n-\treturn cur_key_pos > k.len;\n+\treturn key_bytes.size() > k.len;\n }\n \n-bool IteratorCurrentKey::operator>=(const ARTKey &k) const {\n-\tfor (idx_t i = 0; i < MinValue<idx_t>(cur_key_pos, k.len); i++) {\n-\t\tif (key[i] > k.data[i]) {\n+bool IteratorKey::operator>=(const ARTKey &k) const {\n+\tfor (idx_t i = 0; i < MinValue<idx_t>(key_bytes.size(), k.len); i++) {\n+\t\tif (key_bytes[i] > k.data[i]) {\n \t\t\treturn true;\n-\t\t} else if (key[i] < k.data[i]) {\n+\t\t} else if (key_bytes[i] < k.data[i]) {\n \t\t\treturn false;\n \t\t}\n \t}\n-\treturn cur_key_pos >= k.len;\n+\treturn key_bytes.size() >= k.len;\n }\n \n-bool IteratorCurrentKey::operator==(const ARTKey &k) const {\n-\tif (cur_key_pos != k.len) {\n-\t\treturn false;\n-\t}\n-\tfor (idx_t i = 0; i < cur_key_pos; i++) {\n-\t\tif (key[i] != k.data[i]) {\n+bool IteratorKey::operator==(const ARTKey &k) const {\n+\t// NOTE: we only use this for finding the LowerBound, in which case the length\n+\t// has to be equal\n+\tD_ASSERT(key_bytes.size() == k.len);\n+\tfor (idx_t i = 0; i < key_bytes.size(); i++) {\n+\t\tif (key_bytes[i] != k.data[i]) {\n \t\t\treturn false;\n \t\t}\n \t}\n \treturn true;\n }\n \n-void Iterator::FindMinimum(Node &node) {\n-\n-\t// reconstruct the prefix\n-\t// FIXME: get all bytes at once to increase performance\n-\tauto &node_prefix = node.GetPrefix(*art);\n-\tfor (idx_t i = 0; i < node_prefix.count; i++) {\n-\t\tcur_key.Push(node_prefix.GetByte(*art, i));\n-\t}\n-\n-\t// found the minimum\n-\tif (node.DecodeARTNodeType() == NType::LEAF) {\n-\t\tlast_leaf = Node::GetAllocator(*art, NType::LEAF).Get<Leaf>(node);\n-\t\treturn;\n-\t}\n-\n-\t// go to the leftmost entry in the current node\n-\tuint8_t byte = 0;\n-\tauto next = node.GetNextChild(*art, byte);\n-\tD_ASSERT(next);\n-\tcur_key.Push(byte);\n-\n-\t// recurse\n-\tnodes.emplace(node, byte);\n-\tFindMinimum(*next);\n-}\n-\n-void Iterator::PushKey(const Node &node, const uint8_t byte) {\n-\tif (node.DecodeARTNodeType() != NType::LEAF) {\n-\t\tcur_key.Push(byte);\n-\t}\n-}\n-\n-bool Iterator::Scan(const ARTKey &key, const idx_t &max_count, vector<row_t> &result_ids, const bool &is_inclusive) {\n+bool Iterator::Scan(const ARTKey &upper_bound, const idx_t max_count, vector<row_t> &result_ids, const bool equal) {\n \n \tbool has_next;\n \tdo {\n-\t\tif (!key.Empty()) {\n+\t\tif (!upper_bound.Empty()) {\n \t\t\t// no more row IDs within the key bounds\n-\t\t\tif (is_inclusive) {\n-\t\t\t\tif (cur_key > key) {\n+\t\t\tif (equal) {\n+\t\t\t\tif (current_key > upper_bound) {\n \t\t\t\t\treturn true;\n \t\t\t\t}\n \t\t\t} else {\n-\t\t\t\tif (cur_key >= key) {\n+\t\t\t\tif (current_key >= upper_bound) {\n \t\t\t\t\treturn true;\n \t\t\t\t}\n \t\t\t}\n \t\t}\n \n-\t\t// adding more elements would exceed the max count\n+\t\t// adding more elements would exceed the maximum count\n \t\tif (result_ids.size() + last_leaf->count > max_count) {\n \t\t\treturn false;\n \t\t}\n@@ -130,172 +77,147 @@ bool Iterator::Scan(const ARTKey &key, const idx_t &max_count, vector<row_t> &re\n \treturn true;\n }\n \n-void Iterator::PopNode() {\n-\tauto cur_node = nodes.top();\n-\tidx_t elements_to_pop = cur_node.node.GetPrefix(*art).count + (nodes.size() != 1);\n-\tcur_key.Pop(elements_to_pop);\n-\tnodes.pop();\n-}\n+void Iterator::FindMinimum(Node &node) {\n \n-bool Iterator::Next() {\n-\tif (!nodes.empty()) {\n-\t\tauto cur_node = nodes.top().node;\n-\t\tif (cur_node.DecodeARTNodeType() == NType::LEAF) {\n-\t\t\t// pop leaf\n-\t\t\t// we must pop the prefix size + the key to the node, unless we are popping the root\n-\t\t\tPopNode();\n-\t\t}\n+\tD_ASSERT(node.IsSet());\n+\tif (node.IsSwizzled()) {\n+\t\tnode.Deserialize(*art);\n \t}\n \n-\t// look for the next leaf\n-\twhile (!nodes.empty()) {\n-\n-\t\t// cur_node\n-\t\tauto &top = nodes.top();\n-\t\tNode node = top.node;\n-\n-\t\t// found a leaf: move to next node\n-\t\tif (node.DecodeARTNodeType() == NType::LEAF) {\n-\t\t\tlast_leaf = Node::GetAllocator(*art, NType::LEAF).Get<Leaf>(node);\n-\t\t\treturn true;\n-\t\t}\n-\n-\t\t// find next node\n-\t\tif (top.byte == NumericLimits<uint8_t>::Maximum()) {\n-\t\t\t// no node found: move up the tree, pop prefix and key of current node\n-\t\t\tPopNode();\n-\t\t\tcontinue;\n-\t\t}\n-\n-\t\ttop.byte == 0 ? top.byte : top.byte++;\n-\t\tauto next_node = node.GetNextChild(*art, top.byte);\n-\n-\t\tif (next_node) {\n-\t\t\t// add the next node's key byte\n-\t\t\tPushKey(node, top.byte);\n-\n-\t\t\t// add prefix of new node\n-\t\t\t// FIXME: get all bytes at once to increase performance\n-\t\t\tauto &next_node_prefix = next_node->GetPrefix(*art);\n-\t\t\tfor (idx_t i = 0; i < next_node_prefix.count; i++) {\n-\t\t\t\tcur_key.Push(next_node_prefix.GetByte(*art, i));\n-\t\t\t}\n-\n-\t\t\t// next node found: push it\n-\t\t\tnodes.emplace(*next_node, 0);\n-\t\t} else {\n+\t// found the minimum\n+\tif (node.DecodeARTNodeType() == NType::LEAF) {\n+\t\tlast_leaf = Node::GetAllocator(*art, NType::LEAF).Get<Leaf>(node);\n+\t\treturn;\n+\t}\n \n-\t\t\t// no node found: move up the tree, pop prefix and key of current node\n-\t\t\tPopNode();\n+\t// traverse the prefix\n+\tif (node.DecodeARTNodeType() == NType::PREFIX) {\n+\t\tauto &prefix = Prefix::Get(*art, node);\n+\t\tfor (idx_t i = 0; i < prefix.data[Node::PREFIX_SIZE]; i++) {\n+\t\t\tcurrent_key.Push(prefix.data[i]);\n \t\t}\n+\t\tnodes.emplace(node, 0);\n+\t\treturn FindMinimum(prefix.ptr);\n \t}\n-\treturn false;\n+\n+\t// go to the leftmost entry in the current node and recurse\n+\tuint8_t byte = 0;\n+\tauto next = node.GetNextChild(*art, byte);\n+\tD_ASSERT(next);\n+\tcurrent_key.Push(byte);\n+\tnodes.emplace(node, byte);\n+\tFindMinimum(*next);\n }\n \n-bool Iterator::LowerBound(Node node, const ARTKey &key, const bool &is_inclusive) {\n+bool Iterator::LowerBound(Node &node, const ARTKey &key, const bool equal, idx_t depth) {\n \n \tif (!node.IsSet()) {\n \t\treturn false;\n \t}\n \n-\tidx_t depth = 0;\n-\tbool equal = true;\n-\twhile (true) {\n+\tif (node.IsSwizzled()) {\n+\t\tnode.Deserialize(*art);\n+\t}\n \n-\t\tnodes.emplace(node, 0);\n-\t\tauto &top = nodes.top();\n+\t// we found the lower bound\n+\tif (node.DecodeARTNodeType() == NType::LEAF) {\n+\t\tif (!equal && current_key == key) {\n+\t\t\treturn Next();\n+\t\t}\n+\t\tlast_leaf = Node::GetAllocator(*art, NType::LEAF).Get<Leaf>(node);\n+\t\treturn true;\n+\t}\n \n-\t\t// reconstruct the prefix\n-\t\t// FIXME: get all bytes at once to increase performance\n-\t\treference<Prefix> node_prefix(top.node.GetPrefix(*art));\n-\t\tfor (idx_t i = 0; i < node_prefix.get().count; i++) {\n-\t\t\tcur_key.Push(node_prefix.get().GetByte(*art, i));\n+\tif (node.DecodeARTNodeType() != NType::PREFIX) {\n+\t\tauto next_byte = key[depth];\n+\t\tauto child = node.GetNextChild(*art, next_byte);\n+\t\tif (!child) {\n+\t\t\t// the key is greater than any key in this subtree\n+\t\t\treturn Next();\n \t\t}\n \n-\t\t// greater case: find leftmost leaf node directly\n-\t\tif (!equal) {\n-\t\t\twhile (node.DecodeARTNodeType() != NType::LEAF) {\n+\t\tcurrent_key.Push(next_byte);\n+\t\tnodes.emplace(node, next_byte);\n \n-\t\t\t\tuint8_t byte = 0;\n-\t\t\t\tauto next_node = *node.GetNextChild(*art, byte);\n-\t\t\t\tD_ASSERT(next_node.IsSet());\n+\t\tif (next_byte > key[depth]) {\n+\t\t\t// we only need to find the minimum from here\n+\t\t\t// because all keys will be greater than the lower bound\n+\t\t\tFindMinimum(*child);\n+\t\t\treturn true;\n+\t\t}\n \n-\t\t\t\tPushKey(node, byte);\n-\t\t\t\tnodes.emplace(node, byte);\n-\t\t\t\tnode = next_node;\n+\t\t// recurse into the child\n+\t\treturn LowerBound(*child, key, equal, depth + 1);\n+\t}\n \n-\t\t\t\t// reconstruct the prefix\n-\t\t\t\tnode_prefix = node.GetPrefix(*art);\n-\t\t\t\tfor (idx_t i = 0; i < node_prefix.get().count; i++) {\n-\t\t\t\t\tcur_key.Push(node_prefix.get().GetByte(*art, i));\n-\t\t\t\t}\n+\t// resolve the prefix\n+\tauto &prefix = Prefix::Get(*art, node);\n+\tfor (idx_t i = 0; i < prefix.data[Node::PREFIX_SIZE]; i++) {\n+\t\tcurrent_key.Push(prefix.data[i]);\n+\t}\n+\tnodes.emplace(node, 0);\n \n-\t\t\t\tauto &c_top = nodes.top();\n-\t\t\t\tc_top.node = node;\n-\t\t\t}\n+\tfor (idx_t i = 0; i < prefix.data[Node::PREFIX_SIZE]; i++) {\n+\t\t// the key down to this node is less than the lower bound, the next key will be\n+\t\t// greater than the lower bound\n+\t\tif (prefix.data[i] < key[depth + i]) {\n+\t\t\treturn Next();\n+\t\t}\n+\t\t// we only need to find the minimum from here\n+\t\t// because all keys will be greater than the lower bound\n+\t\tif (prefix.data[i] > key[depth + i]) {\n+\t\t\tFindMinimum(prefix.ptr);\n+\t\t\treturn true;\n \t\t}\n+\t}\n \n-\t\tif (node.DecodeARTNodeType() == NType::LEAF) {\n-\t\t\t// found a leaf node: check if it is bigger or equal than the current key\n-\t\t\tlast_leaf = Node::GetAllocator(*art, NType::LEAF).Get<Leaf>(node);\n-\n-\t\t\t// if the search is not inclusive the leaf node could still be equal to the current value\n-\t\t\t// check if leaf is equal to the current key\n-\t\t\tif (cur_key == key) {\n-\t\t\t\t// if it's not inclusive check if there is a next leaf\n-\t\t\t\tif (!is_inclusive && !Next()) {\n-\t\t\t\t\treturn false;\n-\t\t\t\t} else {\n-\t\t\t\t\treturn true;\n-\t\t\t\t}\n-\t\t\t}\n+\t// recurse into the child\n+\tdepth += prefix.data[Node::PREFIX_SIZE];\n+\treturn LowerBound(prefix.ptr, key, equal, depth);\n+}\n \n-\t\t\tif (cur_key > key) {\n-\t\t\t\treturn true;\n-\t\t\t}\n-\t\t\t// Case1: When the ART has only one leaf node, the Next() will return false\n-\t\t\t// Case2: This means the previous node prefix(if any) + a_key(one element of of key array of previous node)\n-\t\t\t// == key[q..=w].\n-\t\t\t// But key[w+1..=z] maybe greater than leaf node prefix.\n-\t\t\t// One fact is key[w] is alawys equal to a_key and the next element\n-\t\t\t// of key array of previous node is always > a_key So we just call Next() once.\n+bool Iterator::Next() {\n \n-\t\t\treturn Next();\n-\t\t}\n+\twhile (!nodes.empty()) {\n \n-\t\t// equal case:\n-\t\tnode_prefix = node.GetPrefix(*art);\n-\t\tauto mismatch_pos = node_prefix.get().KeyMismatchPosition(*art, key, depth);\n-\t\tif (mismatch_pos != node_prefix.get().count) {\n-\t\t\tif (node_prefix.get().GetByte(*art, mismatch_pos) < key[depth + mismatch_pos]) {\n-\t\t\t\t// less\n-\t\t\t\tPopNode();\n-\t\t\t\treturn Next();\n-\t\t\t}\n-\t\t\t// greater\n-\t\t\ttop.byte = 0;\n-\t\t\treturn Next();\n+\t\tauto &top = nodes.top();\n+\t\tD_ASSERT(top.node.DecodeARTNodeType() != NType::LEAF);\n+\n+\t\tif (top.node.DecodeARTNodeType() == NType::PREFIX) {\n+\t\t\tPopNode();\n+\t\t\tcontinue;\n \t\t}\n \n-\t\t// prefix matches, search inside the child for the key\n-\t\tdepth += node_prefix.get().count;\n-\t\ttop.byte = key[depth];\n-\t\tauto child = node.GetNextChild(*art, top.byte);\n-\t\tequal = key[depth] == top.byte;\n+\t\tif (top.byte == NumericLimits<uint8_t>::Maximum()) {\n+\t\t\t// no node found: move up the tree, pop key byte of current node\n+\t\t\tPopNode();\n+\t\t\tcontinue;\n+\t\t}\n \n-\t\t// the maximum key byte of the current node is less than the key\n-\t\t// fall back to the previous node\n-\t\tif (!child) {\n+\t\ttop.byte++;\n+\t\tauto next_node = top.node.GetNextChild(*art, top.byte);\n+\t\tif (!next_node) {\n \t\t\tPopNode();\n-\t\t\treturn Next();\n+\t\t\tcontinue;\n \t\t}\n \n-\t\tPushKey(node, top.byte);\n-\t\tnode = *child;\n+\t\tcurrent_key.Pop(1);\n+\t\tcurrent_key.Push(top.byte);\n \n-\t\t// all children of this node qualify as greater or equal\n-\t\tdepth++;\n+\t\tFindMinimum(*next_node);\n+\t\treturn true;\n \t}\n+\treturn false;\n+}\n+\n+void Iterator::PopNode() {\n+\tif (nodes.top().node.DecodeARTNodeType() == NType::PREFIX) {\n+\t\tauto prefix_byte_count = Prefix::Get(*art, nodes.top().node).data[Node::PREFIX_SIZE];\n+\t\tcurrent_key.Pop(prefix_byte_count);\n+\t} else {\n+\t\tcurrent_key.Pop(1);\n+\t}\n+\tnodes.pop();\n }\n \n } // namespace duckdb\ndiff --git a/src/execution/index/art/leaf.cpp b/src/execution/index/art/leaf.cpp\nindex 91069c31e3e8..bdb1acd7e95d 100644\n--- a/src/execution/index/art/leaf.cpp\n+++ b/src/execution/index/art/leaf.cpp\n@@ -1,15 +1,14 @@\n #include \"duckdb/execution/index/art/leaf.hpp\"\n \n #include \"duckdb/execution/index/art/art.hpp\"\n-#include \"duckdb/execution/index/art/art_key.hpp\"\n-#include \"duckdb/execution/index/art/leaf_segment.hpp\"\n #include \"duckdb/execution/index/art/node.hpp\"\n+#include \"duckdb/execution/index/art/leaf_segment.hpp\"\n #include \"duckdb/storage/meta_block_reader.hpp\"\n #include \"duckdb/storage/meta_block_writer.hpp\"\n \n namespace duckdb {\n \n-Leaf &Leaf::New(ART &art, Node &node, const ARTKey &key, const uint32_t depth, const row_t row_id) {\n+Leaf &Leaf::New(ART &art, Node &node, const row_t row_id) {\n \n \tnode.SetPtr(Node::GetAllocator(art, NType::LEAF).New());\n \tnode.type = (uint8_t)NType::LEAF;\n@@ -18,40 +17,24 @@ Leaf &Leaf::New(ART &art, Node &node, const ARTKey &key, const uint32_t depth, c\n \t// set the fields of the leaf\n \tleaf.count = 1;\n \tleaf.row_ids.inlined = row_id;\n-\n-\t// initialize the prefix\n-\tD_ASSERT(key.len >= depth);\n-\tleaf.prefix.Initialize(art, key, depth, key.len - depth);\n-\n \treturn leaf;\n }\n \n-Leaf &Leaf::New(ART &art, Node &node, const ARTKey &key, const uint32_t depth, const row_t *row_ids,\n-                const idx_t count) {\n+Leaf &Leaf::New(ART &art, Node &node, const row_t *row_ids, const idx_t count) {\n \n-\t// inlined leaf\n-\tD_ASSERT(count >= 1);\n-\tif (count == 1) {\n-\t\treturn Leaf::New(art, node, key, depth, row_ids[0]);\n-\t}\n+\tD_ASSERT(count > 1);\n \n \tnode.SetPtr(Node::GetAllocator(art, NType::LEAF).New());\n \tnode.type = (uint8_t)NType::LEAF;\n \tauto &leaf = Leaf::Get(art, node);\n \n-\t// set the fields of the leaf\n+\t// reset the count to copy the row IDs\n \tleaf.count = 0;\n-\n-\t// copy the row IDs\n \treference<LeafSegment> segment(LeafSegment::New(art, leaf.row_ids.ptr));\n \tfor (idx_t i = 0; i < count; i++) {\n \t\tsegment = segment.get().Append(art, leaf.count, row_ids[i]);\n \t}\n \n-\t// set the prefix\n-\tD_ASSERT(key.len >= depth);\n-\tleaf.prefix.Initialize(art, key, depth, key.len - depth);\n-\n \treturn leaf;\n }\n \n@@ -130,12 +113,7 @@ void Leaf::Merge(ART &art, Node &other) {\n \n void Leaf::Insert(ART &art, const row_t row_id) {\n \n-\tif (count == 0) {\n-\t\trow_ids.inlined = row_id;\n-\t\tcount++;\n-\t\treturn;\n-\t}\n-\n+\tD_ASSERT(count != 0);\n \tif (count == 1) {\n \t\tMoveInlinedToSegment(art);\n \t}\n@@ -162,10 +140,7 @@ void Leaf::Remove(ART &art, const row_t row_id) {\n \t// possibly inline the row ID\n \tif (count == 2) {\n \t\tauto &segment = LeafSegment::Get(art, row_ids.ptr);\n-\t\tif (segment.row_ids[0] != row_id && segment.row_ids[1] != row_id) {\n-\t\t\treturn;\n-\t\t}\n-\n+\t\tD_ASSERT(segment.row_ids[0] == row_id || segment.row_ids[1] == row_id);\n \t\tauto remaining_row_id = segment.row_ids[0] == row_id ? segment.row_ids[1] : segment.row_ids[0];\n \t\tNode::Free(art, row_ids.ptr);\n \t\trow_ids.inlined = remaining_row_id;\n@@ -176,9 +151,7 @@ void Leaf::Remove(ART &art, const row_t row_id) {\n \t// find the row ID, and the segment containing that row ID (stored in ptr)\n \tauto ptr = row_ids.ptr;\n \tauto copy_idx = FindRowId(art, ptr, row_id);\n-\tif (copy_idx == (uint32_t)DConstants::INVALID_INDEX) {\n-\t\treturn;\n-\t}\n+\tD_ASSERT(copy_idx != (uint32_t)DConstants::INVALID_INDEX);\n \tcopy_idx++;\n \n \t// iterate all remaining segments and move the row IDs one field to the left\n@@ -303,7 +276,6 @@ BlockPointer Leaf::Serialize(const ART &art, MetaBlockWriter &writer) const {\n \tauto block_pointer = writer.GetBlockPointer();\n \twriter.Write(NType::LEAF);\n \twriter.Write<uint32_t>(count);\n-\tprefix.Serialize(art, writer);\n \n \tif (IsInlined()) {\n \t\twriter.Write(row_ids.inlined);\n@@ -336,7 +308,6 @@ BlockPointer Leaf::Serialize(const ART &art, MetaBlockWriter &writer) const {\n void Leaf::Deserialize(ART &art, MetaBlockReader &reader) {\n \n \tauto count_p = reader.Read<uint32_t>();\n-\tprefix.Deserialize(art, reader);\n \n \t// inlined\n \tif (count_p == 1) {\ndiff --git a/src/execution/index/art/node.cpp b/src/execution/index/art/node.cpp\nindex d2080f88a2a5..fbc80e1be3ff 100644\n--- a/src/execution/index/art/node.cpp\n+++ b/src/execution/index/art/node.cpp\n@@ -1,15 +1,15 @@\n+#include \"duckdb/execution/index/art/node.hpp\"\n+\n #include \"duckdb/common/limits.hpp\"\n #include \"duckdb/common/swap.hpp\"\n #include \"duckdb/execution/index/art/art.hpp\"\n-#include \"duckdb/execution/index/art/leaf.hpp\"\n-#include \"duckdb/execution/index/art/leaf_segment.hpp\"\n-#include \"duckdb/execution/index/art/node.hpp\"\n-#include \"duckdb/execution/index/art/node16.hpp\"\n #include \"duckdb/execution/index/art/node256.hpp\"\n-#include \"duckdb/execution/index/art/node4.hpp\"\n #include \"duckdb/execution/index/art/node48.hpp\"\n+#include \"duckdb/execution/index/art/node16.hpp\"\n+#include \"duckdb/execution/index/art/node4.hpp\"\n+#include \"duckdb/execution/index/art/leaf.hpp\"\n+#include \"duckdb/execution/index/art/leaf_segment.hpp\"\n #include \"duckdb/execution/index/art/prefix.hpp\"\n-#include \"duckdb/execution/index/art/prefix_segment.hpp\"\n #include \"duckdb/storage/meta_block_reader.hpp\"\n #include \"duckdb/storage/meta_block_writer.hpp\"\n #include \"duckdb/storage/table_io_manager.hpp\"\n@@ -28,13 +28,9 @@ Node::Node(MetaBlockReader &reader) : SwizzleablePointer(reader) {\n \n void Node::New(ART &art, Node &node, const NType type) {\n \n+\t// NOTE: leaves and prefixes should not pass through this function\n+\n \tswitch (type) {\n-\tcase NType::PREFIX_SEGMENT:\n-\t\tPrefixSegment::New(art, node);\n-\t\tbreak;\n-\tcase NType::LEAF_SEGMENT:\n-\t\tLeafSegment::New(art, node);\n-\t\tbreak;\n \tcase NType::NODE_4:\n \t\tNode4::New(art, node);\n \t\tbreak;\n@@ -55,20 +51,18 @@ void Node::New(ART &art, Node &node, const NType type) {\n void Node::Free(ART &art, Node &node) {\n \n \t// recursively free all nodes that are in-memory, and skip swizzled and empty nodes\n-\n \tif (!node.IsSet()) {\n \t\treturn;\n \t}\n \n \tif (!node.IsSwizzled()) {\n \n+\t\t// free the children of the nodes\n \t\tauto type = node.DecodeARTNodeType();\n-\t\tif (type != NType::PREFIX_SEGMENT && type != NType::LEAF_SEGMENT) {\n-\t\t\tnode.GetPrefix(art).Free(art);\n-\t\t}\n-\n-\t\t// free the prefixes and children of the nodes\n \t\tswitch (type) {\n+\t\tcase NType::PREFIX:\n+\t\t\tPrefix::Free(art, node);\n+\t\t\tbreak;\n \t\tcase NType::LEAF_SEGMENT:\n \t\t\tLeafSegment::Free(art, node);\n \t\t\tbreak;\n@@ -87,8 +81,6 @@ void Node::Free(ART &art, Node &node) {\n \t\tcase NType::NODE_256:\n \t\t\tNode256::Free(art, node);\n \t\t\tbreak;\n-\t\tdefault:\n-\t\t\tbreak;\n \t\t}\n \n \t\tNode::GetAllocator(art, type).Free(node);\n@@ -140,11 +132,11 @@ void Node::InsertChild(ART &art, Node &node, const uint8_t byte, const Node chil\n // Deletes\n //===--------------------------------------------------------------------===//\n \n-void Node::DeleteChild(ART &art, Node &node, const uint8_t byte) {\n+void Node::DeleteChild(ART &art, Node &node, Node &prefix, const uint8_t byte) {\n \n \tswitch (node.DecodeARTNodeType()) {\n \tcase NType::NODE_4:\n-\t\treturn Node4::DeleteChild(art, node, byte);\n+\t\treturn Node4::DeleteChild(art, node, prefix, byte);\n \tcase NType::NODE_16:\n \t\treturn Node16::DeleteChild(art, node, byte);\n \tcase NType::NODE_48:\n@@ -227,12 +219,13 @@ BlockPointer Node::Serialize(ART &art, MetaBlockWriter &writer) {\n \tif (!IsSet()) {\n \t\treturn {(block_id_t)DConstants::INVALID_INDEX, 0};\n \t}\n-\n \tif (IsSwizzled()) {\n \t\tDeserialize(art);\n \t}\n \n \tswitch (DecodeARTNodeType()) {\n+\tcase NType::PREFIX:\n+\t\treturn Prefix::Get(art, *this).Serialize(art, writer);\n \tcase NType::LEAF:\n \t\treturn Leaf::Get(art, *this).Serialize(art, writer);\n \tcase NType::NODE_4:\n@@ -260,16 +253,18 @@ void Node::Deserialize(ART &art) {\n \ttype = (uint8_t)decoded_type;\n \n \tswitch (decoded_type) {\n+\tcase NType::PREFIX:\n+\t\treturn Prefix::Get(art, *this).Deserialize(reader);\n \tcase NType::LEAF:\n \t\treturn Leaf::Get(art, *this).Deserialize(art, reader);\n \tcase NType::NODE_4:\n-\t\treturn Node4::Get(art, *this).Deserialize(art, reader);\n+\t\treturn Node4::Get(art, *this).Deserialize(reader);\n \tcase NType::NODE_16:\n-\t\treturn Node16::Get(art, *this).Deserialize(art, reader);\n+\t\treturn Node16::Get(art, *this).Deserialize(reader);\n \tcase NType::NODE_48:\n-\t\treturn Node48::Get(art, *this).Deserialize(art, reader);\n+\t\treturn Node48::Get(art, *this).Deserialize(reader);\n \tcase NType::NODE_256:\n-\t\treturn Node256::Get(art, *this).Deserialize(art, reader);\n+\t\treturn Node256::Get(art, *this).Deserialize(reader);\n \tdefault:\n \t\tthrow InternalException(\"Invalid node type for Deserialize.\");\n \t}\n@@ -291,13 +286,19 @@ string Node::VerifyAndToString(ART &art, const bool only_verify) {\n \t\tauto str = Leaf::Get(art, *this).VerifyAndToString(art, only_verify);\n \t\treturn only_verify ? \"\" : \"\\n\" + str;\n \t}\n+\tif (type == NType::PREFIX) {\n+\t\tauto str = Prefix::Get(art, *this).VerifyAndToString(art, only_verify);\n+\t\treturn only_verify ? \"\" : \"\\n\" + str;\n+\t}\n \n \tstring str = \"Node\" + to_string(GetCapacity()) + \": [\";\n \n \tidx_t child_count = 0;\n \tuint8_t byte = 0;\n \tauto child = GetNextChild(art, byte, false);\n+\n \twhile (child) {\n+\n \t\tchild_count++;\n \t\tif (child->IsSwizzled()) {\n \t\t\tif (!only_verify) {\n@@ -309,6 +310,7 @@ string Node::VerifyAndToString(ART &art, const bool only_verify) {\n \t\t\t\tbreak;\n \t\t\t}\n \t\t}\n+\n \t\tbyte++;\n \t\tchild = GetNextChild(art, byte, false);\n \t}\n@@ -337,28 +339,6 @@ idx_t Node::GetCapacity() const {\n \t}\n }\n \n-Prefix &Node::GetPrefix(ART &art) {\n-\n-\tif (IsSwizzled()) {\n-\t\tDeserialize(art);\n-\t}\n-\n-\tswitch (DecodeARTNodeType()) {\n-\tcase NType::LEAF:\n-\t\treturn Leaf::Get(art, *this).prefix;\n-\tcase NType::NODE_4:\n-\t\treturn Node4::Get(art, *this).prefix;\n-\tcase NType::NODE_16:\n-\t\treturn Node16::Get(art, *this).prefix;\n-\tcase NType::NODE_48:\n-\t\treturn Node48::Get(art, *this).prefix;\n-\tcase NType::NODE_256:\n-\t\treturn Node256::Get(art, *this).prefix;\n-\tdefault:\n-\t\tthrow InternalException(\"Invalid node type for GetPrefix.\");\n-\t}\n-}\n-\n NType Node::GetARTNodeTypeByCount(const idx_t count) {\n \n \tif (count <= NODE_4_CAPACITY) {\n@@ -381,22 +361,14 @@ FixedSizeAllocator &Node::GetAllocator(const ART &art, NType type) {\n \n void Node::InitializeMerge(ART &art, const ARTFlags &flags) {\n \n-\tif (!IsSet()) {\n-\t\treturn;\n-\t}\n-\n-\tif (IsSwizzled()) {\n-\t\tDeserialize(art);\n-\t}\n-\n-\t// if not all prefixes are inlined\n-\tif (flags.merge_buffer_counts[(uint8_t)NType::PREFIX_SEGMENT - 1] != 0) {\n-\t\t// initialize prefix segments\n-\t\tGetPrefix(art).InitializeMerge(art, flags.merge_buffer_counts[(uint8_t)NType::PREFIX_SEGMENT - 1]);\n-\t}\n+\t// the index is fully in memory during CREATE [UNIQUE] INDEX statements\n+\tD_ASSERT(IsSet() && !IsSwizzled());\n \n \tauto type = DecodeARTNodeType();\n \tswitch (type) {\n+\tcase NType::PREFIX:\n+\t\tPrefix::Get(art, *this).InitializeMerge(art, flags);\n+\t\tbreak;\n \tcase NType::LEAF:\n \t\t// if not all leaves are inlined\n \t\tif (flags.merge_buffer_counts[(uint8_t)NType::LEAF_SEGMENT - 1] != 0) {\n@@ -434,82 +406,108 @@ bool Node::Merge(ART &art, Node &other) {\n \treturn ResolvePrefixes(art, other);\n }\n \n-bool Node::ResolvePrefixes(ART &art, Node &other) {\n+bool MergePrefixContainsOtherPrefix(ART &art, reference<Node> &l_node, reference<Node> &r_node,\n+                                    idx_t &mismatch_position) {\n \n-\t// NOTE: we always merge into the left ART\n+\t// r_node's prefix contains l_node's prefix\n+\t// l_node cannot be a leaf, otherwise the key represented by l_node would be a subset of another key\n+\t// which is not possible by our construction\n+\tD_ASSERT(l_node.get().DecodeARTNodeType() != NType::LEAF);\n \n-\tD_ASSERT(IsSet());\n-\tD_ASSERT(other.IsSet());\n+\t// test if the next byte (mismatch_position) in r_node (prefix) exists in l_node\n+\tauto mismatch_byte = Prefix::GetByte(art, r_node, mismatch_position);\n+\tauto child_node = l_node.get().GetChild(art, mismatch_byte);\n \n-\t// make sure that r_node has the longer (or equally long) prefix\n-\tif (GetPrefix(art).count > other.GetPrefix(art).count) {\n-\t\tswap(*this, other);\n+\t// update the prefix of r_node to only consist of the bytes after mismatch_position\n+\tPrefix::Reduce(art, r_node, mismatch_position);\n+\n+\tif (!child_node) {\n+\t\t// insert r_node as a child of l_node at the empty position\n+\t\tNode::InsertChild(art, l_node, mismatch_byte, r_node);\n+\t\tr_node.get().Reset();\n+\t\treturn true;\n \t}\n \n-\tauto &l_node = *this;\n-\tauto &r_node = other;\n-\tauto &l_prefix = l_node.GetPrefix(art);\n-\tauto &r_prefix = r_node.GetPrefix(art);\n+\t// recurse\n+\treturn child_node->ResolvePrefixes(art, r_node);\n+}\n \n-\tauto mismatch_position = l_prefix.MismatchPosition(art, r_prefix);\n+void MergePrefixesDiffer(ART &art, reference<Node> &l_node, reference<Node> &r_node, idx_t &mismatch_position) {\n \n-\t// both nodes have no prefix or the same prefix\n-\tif (mismatch_position == l_prefix.count && l_prefix.count == r_prefix.count) {\n-\t\treturn MergeInternal(art, r_node);\n-\t}\n+\t// create a new node and insert both nodes as children\n \n-\tif (mismatch_position == l_prefix.count) {\n-\t\t// r_node's prefix contains l_node's prefix\n-\t\t// l_node cannot be a leaf, otherwise the key represented by l_node would be a subset of another key\n-\t\t// which is not possible by our construction\n-\t\tD_ASSERT(l_node.DecodeARTNodeType() != NType::LEAF);\n+\tNode l_child;\n+\tauto l_byte = Prefix::GetByte(art, l_node, mismatch_position);\n+\tPrefix::Split(art, l_node, l_child, mismatch_position);\n+\tNode4::New(art, l_node);\n \n-\t\t// test if the next byte (mismatch_position) in r_node (longer prefix) exists in l_node\n-\t\tauto mismatch_byte = r_prefix.GetByte(art, mismatch_position);\n-\t\tauto child_node = l_node.GetChild(art, mismatch_byte);\n+\t// insert children\n+\tNode4::InsertChild(art, l_node, l_byte, l_child);\n+\tauto r_byte = Prefix::GetByte(art, r_node, mismatch_position);\n+\tPrefix::Reduce(art, r_node, mismatch_position);\n+\tNode4::InsertChild(art, l_node, r_byte, r_node);\n \n-\t\t// update the prefix of r_node to only consist of the bytes after mismatch_position\n-\t\tr_prefix.Reduce(art, mismatch_position);\n+\tr_node.get().Reset();\n+}\n \n-\t\t// insert r_node as a child of l_node at empty position\n-\t\tif (!child_node) {\n-\t\t\tNode::InsertChild(art, l_node, mismatch_byte, r_node);\n-\t\t\tr_node.Reset();\n-\t\t\treturn true;\n-\t\t}\n+bool Node::ResolvePrefixes(ART &art, Node &other) {\n+\n+\t// NOTE: we always merge into the left ART\n+\n+\tD_ASSERT(IsSet());\n+\tD_ASSERT(other.IsSet());\n \n-\t\t// recurse\n-\t\treturn child_node->ResolvePrefixes(art, r_node);\n+\t// case 1: both nodes have no prefix\n+\tif (DecodeARTNodeType() != NType::PREFIX && other.DecodeARTNodeType() != NType::PREFIX) {\n+\t\treturn MergeInternal(art, other);\n \t}\n \n-\t// prefixes differ, create new node and insert both nodes as children\n+\treference<Node> l_node(*this);\n+\treference<Node> r_node(other);\n \n-\t// create new node\n-\tauto old_l_node = l_node;\n-\tauto &new_n4 = Node4::New(art, l_node);\n-\tnew_n4.prefix.Initialize(art, l_prefix, mismatch_position);\n+\tidx_t mismatch_position = DConstants::INVALID_INDEX;\n \n-\t// insert old l_node, break up prefix of old l_node\n-\tauto key_byte = l_prefix.Reduce(art, mismatch_position);\n-\tNode4::InsertChild(art, l_node, key_byte, old_l_node);\n+\t// traverse prefixes\n+\tif (l_node.get().DecodeARTNodeType() == NType::PREFIX && r_node.get().DecodeARTNodeType() == NType::PREFIX) {\n+\n+\t\tif (!Prefix::Traverse(art, l_node, r_node, mismatch_position)) {\n+\t\t\treturn false;\n+\t\t}\n+\t\t// we already recurse because the prefixes matched (so far)\n+\t\tif (mismatch_position == DConstants::INVALID_INDEX) {\n+\t\t\treturn true;\n+\t\t}\n \n-\t// insert r_node, break up prefix of r_node\n-\tkey_byte = r_prefix.Reduce(art, mismatch_position);\n-\tNode4::InsertChild(art, l_node, key_byte, r_node);\n+\t} else {\n \n-\tr_node.Reset();\n+\t\t// l_prefix contains r_prefix\n+\t\tif (l_node.get().DecodeARTNodeType() == NType::PREFIX) {\n+\t\t\tswap(*this, other);\n+\t\t}\n+\t\tmismatch_position = 0;\n+\t}\n+\tD_ASSERT(mismatch_position != DConstants::INVALID_INDEX);\n+\n+\t// case 2: one prefix contains the other prefix\n+\tif (l_node.get().DecodeARTNodeType() != NType::PREFIX && r_node.get().DecodeARTNodeType() == NType::PREFIX) {\n+\t\treturn MergePrefixContainsOtherPrefix(art, l_node, r_node, mismatch_position);\n+\t}\n+\n+\t// case 3: prefixes differ at a specific byte\n+\tMergePrefixesDiffer(art, l_node, r_node, mismatch_position);\n \treturn true;\n }\n \n bool Node::MergeInternal(ART &art, Node &other) {\n \n-\tD_ASSERT(IsSet());\n-\tD_ASSERT(other.IsSet());\n+\tD_ASSERT(IsSet() && other.IsSet());\n+\tD_ASSERT(DecodeARTNodeType() != NType::PREFIX && DecodeARTNodeType() != NType::LEAF_SEGMENT);\n+\tD_ASSERT(other.DecodeARTNodeType() != NType::PREFIX && other.DecodeARTNodeType() != NType::LEAF_SEGMENT);\n \n \t// always try to merge the smaller node into the bigger node\n \t// because maybe there is enough free space in the bigger node to fit the smaller one\n \t// without too much recursion\n-\tif (this->DecodeARTNodeType() < other.DecodeARTNodeType()) {\n+\tif (DecodeARTNodeType() < other.DecodeARTNodeType()) {\n \t\tswap(*this, other);\n \t}\n \n@@ -524,7 +522,7 @@ bool Node::MergeInternal(ART &art, Node &other) {\n \t\t\treturn false;\n \t\t}\n \n-\t\tLeaf::Get(art, *this).Merge(art, r_node);\n+\t\tLeaf::Get(art, l_node).Merge(art, r_node);\n \t\treturn true;\n \t}\n \n@@ -567,22 +565,17 @@ void Node::Vacuum(ART &art, Node &node, const ARTFlags &flags) {\n \t\treturn;\n \t}\n \n-\t// possibly vacuum prefix segments, if not all prefixes are inlined\n-\tbool needs_vacuum = flags.vacuum_flags[(uint8_t)NType::PREFIX_SEGMENT - 1];\n-\tif (needs_vacuum) {\n-\t\t// vacuum prefix segments\n-\t\tnode.GetPrefix(art).Vacuum(art);\n-\t}\n-\n \tauto type = node.DecodeARTNodeType();\n \tauto &allocator = Node::GetAllocator(art, type);\n-\tneeds_vacuum = flags.vacuum_flags[node.type - 1] && allocator.NeedsVacuum(node);\n+\tauto needs_vacuum = flags.vacuum_flags[node.type - 1] && allocator.NeedsVacuum(node);\n \tif (needs_vacuum) {\n \t\tnode.SetPtr(allocator.VacuumPointer(node));\n \t\tnode.type = (uint8_t)type;\n \t}\n \n \tswitch (type) {\n+\tcase NType::PREFIX:\n+\t\treturn Prefix::Get(art, node).Vacuum(art, flags);\n \tcase NType::LEAF: {\n \t\t// possibly vacuum leaf segments, if not all leaves are inlined\n \t\tif (flags.vacuum_flags[(uint8_t)NType::LEAF_SEGMENT - 1]) {\ndiff --git a/src/execution/index/art/node16.cpp b/src/execution/index/art/node16.cpp\nindex 3f295f17c14f..50d53e938b86 100644\n--- a/src/execution/index/art/node16.cpp\n+++ b/src/execution/index/art/node16.cpp\n@@ -1,7 +1,5 @@\n #include \"duckdb/execution/index/art/node16.hpp\"\n \n-#include \"duckdb/execution/index/art/art.hpp\"\n-#include \"duckdb/execution/index/art/node.hpp\"\n #include \"duckdb/execution/index/art/node4.hpp\"\n #include \"duckdb/execution/index/art/node48.hpp\"\n #include \"duckdb/storage/meta_block_reader.hpp\"\n@@ -16,7 +14,6 @@ Node16 &Node16::New(ART &art, Node &node) {\n \tauto &n16 = Node16::Get(art, node);\n \n \tn16.count = 0;\n-\tn16.prefix.Initialize();\n \treturn n16;\n }\n \n@@ -39,8 +36,6 @@ Node16 &Node16::GrowNode4(ART &art, Node &node16, Node &node4) {\n \tauto &n16 = Node16::New(art, node16);\n \n \tn16.count = n4.count;\n-\tn16.prefix.Move(n4.prefix);\n-\n \tfor (idx_t i = 0; i < n4.count; i++) {\n \t\tn16.key[i] = n4.key[i];\n \t\tn16.children[i] = n4.children[i];\n@@ -57,8 +52,6 @@ Node16 &Node16::ShrinkNode48(ART &art, Node &node16, Node &node48) {\n \tauto &n48 = Node48::Get(art, node48);\n \n \tn16.count = 0;\n-\tn16.prefix.Move(n48.prefix);\n-\n \tfor (idx_t i = 0; i < Node::NODE_256_CAPACITY; i++) {\n \t\tD_ASSERT(n16.count <= Node::NODE_16_CAPACITY);\n \t\tif (n48.child_index[i] != Node::EMPTY_MARKER) {\n@@ -195,7 +188,6 @@ BlockPointer Node16::Serialize(ART &art, MetaBlockWriter &writer) {\n \tauto block_pointer = writer.GetBlockPointer();\n \twriter.Write(NType::NODE_16);\n \twriter.Write<uint8_t>(count);\n-\tprefix.Serialize(art, writer);\n \n \t// write key values\n \tfor (idx_t i = 0; i < Node::NODE_16_CAPACITY; i++) {\n@@ -211,10 +203,9 @@ BlockPointer Node16::Serialize(ART &art, MetaBlockWriter &writer) {\n \treturn block_pointer;\n }\n \n-void Node16::Deserialize(ART &art, MetaBlockReader &reader) {\n+void Node16::Deserialize(MetaBlockReader &reader) {\n \n \tcount = reader.Read<uint8_t>();\n-\tprefix.Deserialize(art, reader);\n \n \t// read key values\n \tfor (idx_t i = 0; i < Node::NODE_16_CAPACITY; i++) {\ndiff --git a/src/execution/index/art/node256.cpp b/src/execution/index/art/node256.cpp\nindex 1c1eeb52fea4..af56e012780d 100644\n--- a/src/execution/index/art/node256.cpp\n+++ b/src/execution/index/art/node256.cpp\n@@ -1,7 +1,5 @@\n #include \"duckdb/execution/index/art/node256.hpp\"\n \n-#include \"duckdb/execution/index/art/art.hpp\"\n-#include \"duckdb/execution/index/art/node.hpp\"\n #include \"duckdb/execution/index/art/node48.hpp\"\n #include \"duckdb/storage/meta_block_reader.hpp\"\n #include \"duckdb/storage/meta_block_writer.hpp\"\n@@ -15,8 +13,6 @@ Node256 &Node256::New(ART &art, Node &node) {\n \tauto &n256 = Node256::Get(art, node);\n \n \tn256.count = 0;\n-\tn256.prefix.Initialize();\n-\n \tfor (idx_t i = 0; i < Node::NODE_256_CAPACITY; i++) {\n \t\tn256.children[i].Reset();\n \t}\n@@ -49,8 +45,6 @@ Node256 &Node256::GrowNode48(ART &art, Node &node256, Node &node48) {\n \tauto &n256 = Node256::New(art, node256);\n \n \tn256.count = n48.count;\n-\tn256.prefix.Move(n48.prefix);\n-\n \tfor (idx_t i = 0; i < Node::NODE_256_CAPACITY; i++) {\n \t\tif (n48.child_index[i] != Node::EMPTY_MARKER) {\n \t\t\tn256.children[i] = n48.children[n48.child_index[i]];\n@@ -127,7 +121,6 @@ BlockPointer Node256::Serialize(ART &art, MetaBlockWriter &writer) {\n \tauto block_pointer = writer.GetBlockPointer();\n \twriter.Write(NType::NODE_256);\n \twriter.Write<uint16_t>(count);\n-\tprefix.Serialize(art, writer);\n \n \t// write child block pointers\n \tfor (auto &child_block_pointer : child_block_pointers) {\n@@ -138,10 +131,9 @@ BlockPointer Node256::Serialize(ART &art, MetaBlockWriter &writer) {\n \treturn block_pointer;\n }\n \n-void Node256::Deserialize(ART &art, MetaBlockReader &reader) {\n+void Node256::Deserialize(MetaBlockReader &reader) {\n \n \tcount = reader.Read<uint16_t>();\n-\tprefix.Deserialize(art, reader);\n \n \t// read child block pointers\n \tfor (idx_t i = 0; i < Node::NODE_256_CAPACITY; i++) {\ndiff --git a/src/execution/index/art/node4.cpp b/src/execution/index/art/node4.cpp\nindex b5f899feb4f0..3f7c19148b8a 100644\n--- a/src/execution/index/art/node4.cpp\n+++ b/src/execution/index/art/node4.cpp\n@@ -1,7 +1,6 @@\n #include \"duckdb/execution/index/art/node4.hpp\"\n \n-#include \"duckdb/execution/index/art/art.hpp\"\n-#include \"duckdb/execution/index/art/node.hpp\"\n+#include \"duckdb/execution/index/art/prefix.hpp\"\n #include \"duckdb/execution/index/art/node16.hpp\"\n #include \"duckdb/storage/meta_block_reader.hpp\"\n #include \"duckdb/storage/meta_block_writer.hpp\"\n@@ -15,7 +14,6 @@ Node4 &Node4::New(ART &art, Node &node) {\n \tauto &n4 = Node4::Get(art, node);\n \n \tn4.count = 0;\n-\tn4.prefix.Initialize();\n \treturn n4;\n }\n \n@@ -39,8 +37,6 @@ Node4 &Node4::ShrinkNode16(ART &art, Node &node4, Node &node16) {\n \n \tD_ASSERT(n16.count <= Node::NODE_4_CAPACITY);\n \tn4.count = n16.count;\n-\tn4.prefix.Move(n16.prefix);\n-\n \tfor (idx_t i = 0; i < n16.count; i++) {\n \t\tn4.key[i] = n16.key[i];\n \t\tn4.children[i] = n16.children[i];\n@@ -94,7 +90,7 @@ void Node4::InsertChild(ART &art, Node &node, const uint8_t byte, const Node chi\n \t}\n }\n \n-void Node4::DeleteChild(ART &art, Node &node, const uint8_t byte) {\n+void Node4::DeleteChild(ART &art, Node &node, Node &prefix, const uint8_t byte) {\n \n \tD_ASSERT(node.IsSet());\n \tD_ASSERT(!node.IsSwizzled());\n@@ -123,13 +119,18 @@ void Node4::DeleteChild(ART &art, Node &node, const uint8_t byte) {\n \t// this is a one way node, compress\n \tif (n4.count == 1) {\n \n+\t\t// we need to keep track of the old node pointer\n+\t\t// because Concatenate() might overwrite that pointer while appending bytes to\n+\t\t// the prefix (and by doing so overwriting the subsequent node with\n+\t\t// new prefix nodes)\n+\t\tauto old_n4_node = node;\n+\n \t\t// get only child and concatenate prefixes\n \t\tauto child = *n4.GetChild(n4.key[0]);\n-\t\tchild.GetPrefix(art).Concatenate(art, n4.key[0], n4.prefix);\n-\t\tn4.count--;\n+\t\tPrefix::Concatenate(art, prefix, n4.key[0], child);\n \n-\t\tNode::Free(art, node);\n-\t\tnode = child;\n+\t\tn4.count--;\n+\t\tNode::Free(art, old_n4_node);\n \t}\n }\n \n@@ -180,7 +181,6 @@ BlockPointer Node4::Serialize(ART &art, MetaBlockWriter &writer) {\n \tauto block_pointer = writer.GetBlockPointer();\n \twriter.Write(NType::NODE_4);\n \twriter.Write<uint8_t>(count);\n-\tprefix.Serialize(art, writer);\n \n \t// write key values\n \tfor (idx_t i = 0; i < Node::NODE_4_CAPACITY; i++) {\n@@ -196,10 +196,9 @@ BlockPointer Node4::Serialize(ART &art, MetaBlockWriter &writer) {\n \treturn block_pointer;\n }\n \n-void Node4::Deserialize(ART &art, MetaBlockReader &reader) {\n+void Node4::Deserialize(MetaBlockReader &reader) {\n \n \tcount = reader.Read<uint8_t>();\n-\tprefix.Deserialize(art, reader);\n \n \t// read key values\n \tfor (idx_t i = 0; i < Node::NODE_4_CAPACITY; i++) {\ndiff --git a/src/execution/index/art/node48.cpp b/src/execution/index/art/node48.cpp\nindex f7d584e6e2bf..2da5e95dbb0c 100644\n--- a/src/execution/index/art/node48.cpp\n+++ b/src/execution/index/art/node48.cpp\n@@ -1,7 +1,5 @@\n #include \"duckdb/execution/index/art/node48.hpp\"\n \n-#include \"duckdb/execution/index/art/art.hpp\"\n-#include \"duckdb/execution/index/art/node.hpp\"\n #include \"duckdb/execution/index/art/node16.hpp\"\n #include \"duckdb/execution/index/art/node256.hpp\"\n #include \"duckdb/storage/meta_block_reader.hpp\"\n@@ -16,8 +14,6 @@ Node48 &Node48::New(ART &art, Node &node) {\n \tauto &n48 = Node48::Get(art, node);\n \n \tn48.count = 0;\n-\tn48.prefix.Initialize();\n-\n \tfor (idx_t i = 0; i < Node::NODE_256_CAPACITY; i++) {\n \t\tn48.child_index[i] = Node::EMPTY_MARKER;\n \t}\n@@ -55,8 +51,6 @@ Node48 &Node48::GrowNode16(ART &art, Node &node48, Node &node16) {\n \tauto &n48 = Node48::New(art, node48);\n \n \tn48.count = n16.count;\n-\tn48.prefix.Move(n16.prefix);\n-\n \tfor (idx_t i = 0; i < Node::NODE_256_CAPACITY; i++) {\n \t\tn48.child_index[i] = Node::EMPTY_MARKER;\n \t}\n@@ -82,8 +76,6 @@ Node48 &Node48::ShrinkNode256(ART &art, Node &node48, Node &node256) {\n \tauto &n256 = Node256::Get(art, node256);\n \n \tn48.count = 0;\n-\tn48.prefix.Move(n256.prefix);\n-\n \tfor (idx_t i = 0; i < Node::NODE_256_CAPACITY; i++) {\n \t\tD_ASSERT(n48.count <= Node::NODE_48_CAPACITY);\n \t\tif (n256.children[i].IsSet()) {\n@@ -188,7 +180,6 @@ BlockPointer Node48::Serialize(ART &art, MetaBlockWriter &writer) {\n \tauto block_pointer = writer.GetBlockPointer();\n \twriter.Write(NType::NODE_48);\n \twriter.Write<uint8_t>(count);\n-\tprefix.Serialize(art, writer);\n \n \t// write key values\n \tfor (idx_t i = 0; i < Node::NODE_256_CAPACITY; i++) {\n@@ -204,10 +195,9 @@ BlockPointer Node48::Serialize(ART &art, MetaBlockWriter &writer) {\n \treturn block_pointer;\n }\n \n-void Node48::Deserialize(ART &art, MetaBlockReader &reader) {\n+void Node48::Deserialize(MetaBlockReader &reader) {\n \n \tcount = reader.Read<uint8_t>();\n-\tprefix.Deserialize(art, reader);\n \n \t// read key values\n \tfor (idx_t i = 0; i < Node::NODE_256_CAPACITY; i++) {\ndiff --git a/src/execution/index/art/prefix.cpp b/src/execution/index/art/prefix.cpp\nindex 760805c66484..a5cfa22abc44 100644\n--- a/src/execution/index/art/prefix.cpp\n+++ b/src/execution/index/art/prefix.cpp\n@@ -3,469 +3,347 @@\n #include \"duckdb/execution/index/art/art.hpp\"\n #include \"duckdb/execution/index/art/art_key.hpp\"\n #include \"duckdb/execution/index/art/node.hpp\"\n-#include \"duckdb/execution/index/art/prefix_segment.hpp\"\n #include \"duckdb/storage/meta_block_reader.hpp\"\n #include \"duckdb/storage/meta_block_writer.hpp\"\n+#include \"duckdb/common/swap.hpp\"\n \n namespace duckdb {\n \n-void Prefix::Free(ART &art) {\n+Prefix &Prefix::New(ART &art, Node &node) {\n \n-\tif (IsInlined()) {\n-\t\treturn Initialize();\n-\t}\n-\n-\t// delete all prefix segments\n-\tauto ptr = data.ptr;\n-\twhile (ptr.IsSet()) {\n-\t\tauto next_ptr = PrefixSegment::Get(art, ptr).next;\n-\t\tNode::Free(art, ptr);\n-\t\tptr = next_ptr;\n-\t}\n+\tnode.SetPtr(Node::GetAllocator(art, NType::PREFIX).New());\n+\tnode.type = (uint8_t)NType::PREFIX;\n \n-\tInitialize();\n+\tauto &prefix = Prefix::Get(art, node);\n+\tprefix.data[Node::PREFIX_SIZE] = 0;\n+\treturn prefix;\n }\n \n-void Prefix::Initialize(ART &art, const ARTKey &key, const uint32_t depth, const uint32_t count_p) {\n+Prefix &Prefix::New(ART &art, Node &node, uint8_t byte, Node next) {\n \n-\t// prefix can be inlined\n-\tif (count_p <= Node::PREFIX_INLINE_BYTES) {\n-\t\tmemcpy(data.inlined, key.data + depth, count_p);\n-\t\tcount = count_p;\n-\t\treturn;\n-\t}\n+\tnode.SetPtr(Node::GetAllocator(art, NType::PREFIX).New());\n+\tnode.type = (uint8_t)NType::PREFIX;\n \n-\t// prefix cannot be inlined, copy to segment(s)\n-\tcount = 0;\n-\treference<PrefixSegment> segment(PrefixSegment::New(art, data.ptr));\n-\tfor (idx_t i = 0; i < count_p; i++) {\n-\t\tsegment = segment.get().Append(art, count, key.data[depth + i]);\n-\t}\n-\tD_ASSERT(count == count_p);\n+\tauto &prefix = Prefix::Get(art, node);\n+\tprefix.data[Node::PREFIX_SIZE] = 1;\n+\tprefix.data[0] = byte;\n+\tprefix.ptr = next;\n+\treturn prefix;\n }\n \n-void Prefix::Initialize(ART &art, const Prefix &other, const uint32_t count_p) {\n+void Prefix::New(ART &art, reference<Node> &node, const ARTKey &key, const uint32_t depth, uint32_t count) {\n \n-\tD_ASSERT(count_p <= other.count);\n-\n-\t// copy inlined data\n-\tif (other.IsInlined()) {\n-\t\tmemcpy(data.inlined, other.data.inlined, count_p);\n-\t\tcount = count_p;\n+\tif (count == 0) {\n \t\treturn;\n \t}\n+\tidx_t copy_count = 0;\n \n-\t// initialize the count and get the first segment\n-\tcount = 0;\n-\treference<PrefixSegment> segment(PrefixSegment::New(art, data.ptr));\n-\n-\t// iterate the segments of the other prefix and copy their data\n-\tauto other_ptr = other.data.ptr;\n-\tauto remaining = count_p;\n+\twhile (count) {\n+\t\tnode.get().SetPtr(Node::GetAllocator(art, NType::PREFIX).New());\n+\t\tnode.get().type = (uint8_t)NType::PREFIX;\n+\t\tauto &prefix = Prefix::Get(art, node);\n \n-\twhile (remaining != 0) {\n-\t\tD_ASSERT(other_ptr.IsSet());\n-\t\tauto &other_segment = PrefixSegment::Get(art, other_ptr);\n-\t\tauto copy_count = MinValue(Node::PREFIX_SEGMENT_SIZE, remaining);\n+\t\tauto this_count = MinValue((uint32_t)Node::PREFIX_SIZE, count);\n+\t\tprefix.data[Node::PREFIX_SIZE] = (uint8_t)this_count;\n+\t\tmemcpy(prefix.data, key.data + depth + copy_count, this_count);\n \n-\t\t// copy the data\n-\t\tfor (idx_t i = 0; i < copy_count; i++) {\n-\t\t\tsegment = segment.get().Append(art, count, other_segment.bytes[i]);\n-\t\t}\n-\n-\t\t// adjust the loop variables\n-\t\tother_ptr = other_segment.next;\n-\t\tremaining -= copy_count;\n+\t\tnode = prefix.ptr;\n+\t\tcopy_count += this_count;\n+\t\tcount -= this_count;\n \t}\n-\tD_ASSERT(count == count_p);\n }\n \n-void Prefix::InitializeMerge(ART &art, const idx_t buffer_count) {\n-\n-\tif (IsInlined()) {\n-\t\treturn;\n-\t}\n+void Prefix::Free(ART &art, Node &node) {\n \n-\treference<PrefixSegment> segment(PrefixSegment::Get(art, data.ptr));\n-\tdata.ptr.buffer_id += buffer_count;\n+\tD_ASSERT(node.IsSet());\n+\tD_ASSERT(!node.IsSwizzled());\n \n-\tauto ptr = segment.get().next;\n-\twhile (ptr.IsSet()) {\n-\t\tsegment.get().next.buffer_id += buffer_count;\n-\t\tsegment = PrefixSegment::Get(art, ptr);\n-\t\tptr = segment.get().next;\n-\t}\n+\tauto &child = Prefix::Get(art, node).ptr;\n+\tNode::Free(art, child);\n }\n \n-void Prefix::Append(ART &art, const Prefix &other) {\n+void Prefix::Concatenate(ART &art, Node &prefix_node, const uint8_t byte, Node &child_prefix_node) {\n \n-\t// result fits into inlined data, i.e., both prefixes are also inlined\n-\tif (count + other.count <= Node::PREFIX_INLINE_BYTES) {\n-\t\tmemcpy(data.inlined + count, other.data.inlined, other.count);\n-\t\tcount += other.count;\n-\t\treturn;\n-\t}\n+\tD_ASSERT(prefix_node.IsSet() && !prefix_node.IsSwizzled());\n+\tD_ASSERT(child_prefix_node.IsSet());\n \n-\t// this prefix is inlined, but will no longer be after appending the other prefix,\n-\t// move the inlined bytes to the first prefix segment\n-\tif (IsInlined()) {\n-\t\tMoveInlinedToSegment(art);\n+\tif (child_prefix_node.IsSwizzled()) {\n+\t\tchild_prefix_node.Deserialize(art);\n \t}\n \n-\t// get the tail of the segments of this prefix\n-\treference<PrefixSegment> segment(PrefixSegment::Get(art, data.ptr).GetTail(art));\n+\t// append a byte and a child_prefix to prefix\n+\tif (prefix_node.DecodeARTNodeType() == NType::PREFIX) {\n \n-\t// the other prefix is inlined\n-\tif (other.IsInlined()) {\n-\t\tfor (idx_t i = 0; i < other.count; i++) {\n-\t\t\tsegment = segment.get().Append(art, count, other.data.inlined[i]);\n-\t\t}\n-\t\treturn;\n-\t}\n+\t\t// get the tail\n+\t\treference<Prefix> prefix = Prefix::Get(art, prefix_node);\n+\t\tD_ASSERT(prefix.get().ptr.IsSet() && !prefix.get().ptr.IsSwizzled());\n \n-\t// iterate all segments of the other prefix and copy their data\n-\tauto other_ptr = other.data.ptr;\n-\tauto remaining = other.count;\n+\t\twhile (prefix.get().ptr.DecodeARTNodeType() == NType::PREFIX) {\n+\t\t\tprefix = Prefix::Get(art, prefix.get().ptr);\n+\t\t\tD_ASSERT(prefix.get().ptr.IsSet() && !prefix.get().ptr.IsSwizzled());\n+\t\t}\n \n-\twhile (other_ptr.IsSet()) {\n-\t\tauto &other_segment = PrefixSegment::Get(art, other_ptr);\n-\t\tauto copy_count = MinValue(Node::PREFIX_SEGMENT_SIZE, remaining);\n+\t\t// append the byte\n+\t\tprefix = prefix.get().Append(art, byte);\n \n-\t\t// copy the data\n-\t\tfor (idx_t i = 0; i < copy_count; i++) {\n-\t\t\tsegment = segment.get().Append(art, count, other_segment.bytes[i]);\n+\t\tif (child_prefix_node.DecodeARTNodeType() == NType::PREFIX) {\n+\t\t\t// append the child prefix\n+\t\t\tprefix.get().Append(art, child_prefix_node);\n+\t\t} else {\n+\t\t\t// set child_prefix_node to succeed prefix\n+\t\t\tprefix.get().ptr = child_prefix_node;\n \t\t}\n-\n-\t\t// adjust the loop variables\n-\t\tother_ptr = other_segment.next;\n-\t\tremaining -= copy_count;\n+\t\treturn;\n \t}\n-\tD_ASSERT(remaining == 0);\n-}\n-\n-void Prefix::Concatenate(ART &art, const uint8_t byte, const Prefix &other) {\n \n-\tauto new_size = count + 1 + other.count;\n+\t// create a new prefix node containing the byte, then append the child_prefix to it\n+\tif (prefix_node.DecodeARTNodeType() != NType::PREFIX && child_prefix_node.DecodeARTNodeType() == NType::PREFIX) {\n \n-\t// overwrite into this prefix (both are inlined)\n-\tif (new_size <= Node::PREFIX_INLINE_BYTES) {\n-\t\t// move this prefix backwards\n-\t\tmemmove(data.inlined + other.count + 1, data.inlined, count);\n-\t\t// copy byte\n-\t\tdata.inlined[other.count] = byte;\n-\t\t// copy the other prefix into this prefix\n-\t\tmemcpy(data.inlined, other.data.inlined, other.count);\n-\t\tcount = new_size;\n+\t\tauto child_prefix = child_prefix_node;\n+\t\tauto &prefix = Prefix::New(art, prefix_node, byte, Node());\n+\t\tprefix.Append(art, child_prefix);\n \t\treturn;\n \t}\n \n-\tauto this_inlined = IsInlined();\n-\tauto this_count = count;\n-\tauto this_data = data;\n-\tInitialize();\n+\t// neither prefix nor child_prefix are prefix nodes\n+\t// create a new prefix containing the byte\n+\tPrefix::New(art, prefix_node, byte, child_prefix_node);\n+}\n \n-\t// append the other prefix and possibly move the data to a segment\n-\tAppend(art, other);\n-\tif (IsInlined()) {\n-\t\tMoveInlinedToSegment(art);\n-\t}\n+idx_t Prefix::Traverse(ART &art, reference<Node> &prefix_node, const ARTKey &key, idx_t &depth) {\n \n-\t// get the tail\n-\treference<PrefixSegment> segment(PrefixSegment::Get(art, data.ptr).GetTail(art));\n-\t// append the byte\n-\tsegment = segment.get().Append(art, count, byte);\n+\tD_ASSERT(prefix_node.get().IsSet() && !prefix_node.get().IsSwizzled());\n+\tD_ASSERT(prefix_node.get().DecodeARTNodeType() == NType::PREFIX);\n \n-\tif (this_inlined) {\n-\t\t// append this prefix\n-\t\tfor (idx_t i = 0; i < this_count; i++) {\n-\t\t\tsegment = segment.get().Append(art, count, this_data.inlined[i]);\n+\t// compare prefix nodes to key bytes\n+\twhile (prefix_node.get().DecodeARTNodeType() == NType::PREFIX) {\n+\t\tauto &prefix = Prefix::Get(art, prefix_node);\n+\t\tfor (idx_t i = 0; i < prefix.data[Node::PREFIX_SIZE]; i++) {\n+\t\t\tif (prefix.data[i] != key[depth]) {\n+\t\t\t\treturn i;\n+\t\t\t}\n+\t\t\tdepth++;\n \t\t}\n-\t\treturn;\n-\t}\n-\n-\t// iterate all segments of this prefix, copy their data, and free them\n-\tauto this_ptr = this_data.ptr;\n-\tauto remaining = this_count;\n-\n-\twhile (this_ptr.IsSet()) {\n-\t\tauto &this_segment = PrefixSegment::Get(art, this_ptr);\n-\t\tauto copy_count = MinValue(Node::PREFIX_SEGMENT_SIZE, remaining);\n-\n-\t\t// copy the data\n-\t\tfor (idx_t i = 0; i < copy_count; i++) {\n-\t\t\tsegment = segment.get().Append(art, count, this_segment.bytes[i]);\n+\t\tprefix_node = prefix.ptr;\n+\t\tD_ASSERT(prefix_node.get().IsSet());\n+\t\tif (prefix_node.get().IsSwizzled()) {\n+\t\t\tprefix_node.get().Deserialize(art);\n \t\t}\n-\n-\t\t// adjust the loop variables\n-\t\tNode::Free(art, this_ptr);\n-\t\tthis_ptr = this_segment.next;\n-\t\tremaining -= copy_count;\n \t}\n-\tD_ASSERT(remaining == 0);\n+\n+\treturn DConstants::INVALID_INDEX;\n }\n \n-uint8_t Prefix::Reduce(ART &art, const idx_t reduce_count) {\n+bool Prefix::Traverse(ART &art, reference<Node> &l_node, reference<Node> &r_node, idx_t &mismatch_position) {\n \n-\tauto new_count = count - reduce_count - 1;\n-\tauto new_first_byte = GetByte(art, reduce_count);\n+\tauto &l_prefix = Prefix::Get(art, l_node.get());\n+\tauto &r_prefix = Prefix::Get(art, r_node.get());\n \n-\t// prefix is now empty\n-\tif (new_count == 0) {\n-\t\tFree(art);\n-\t\treturn new_first_byte;\n-\t}\n-\n-\t// was inlined, just move bytes\n-\tif (IsInlined()) {\n-\t\tmemmove(data.inlined, data.inlined + reduce_count + 1, new_count);\n-\t\tcount = new_count;\n-\t\treturn new_first_byte;\n+\t// compare prefix bytes\n+\tidx_t max_count = MinValue(l_prefix.data[Node::PREFIX_SIZE], r_prefix.data[Node::PREFIX_SIZE]);\n+\tfor (idx_t i = 0; i < max_count; i++) {\n+\t\tif (l_prefix.data[i] != r_prefix.data[i]) {\n+\t\t\tmismatch_position = i;\n+\t\t\tbreak;\n+\t\t}\n \t}\n \n-\tcount = 0;\n-\tauto start = reduce_count + 1;\n-\tauto offset = start % Node::PREFIX_SEGMENT_SIZE;\n-\tauto remaining = new_count;\n+\tif (mismatch_position == DConstants::INVALID_INDEX) {\n \n-\t// get the source segment, i.e., the segment that contains the byte at start\n-\treference<PrefixSegment> src_segment(PrefixSegment::Get(art, data.ptr));\n-\tfor (idx_t i = 0; i < start / Node::PREFIX_SEGMENT_SIZE; i++) {\n-\t\tD_ASSERT(src_segment.get().next.IsSet());\n-\t\tsrc_segment = PrefixSegment::Get(art, src_segment.get().next);\n-\t}\n+\t\t// prefixes match (so far)\n+\t\tif (l_prefix.data[Node::PREFIX_SIZE] == r_prefix.data[Node::PREFIX_SIZE]) {\n+\t\t\treturn l_prefix.ptr.ResolvePrefixes(art, r_prefix.ptr);\n+\t\t}\n \n-\t// iterate all segments starting at the source segment and shift their data\n-\treference<PrefixSegment> dst_segment(PrefixSegment::Get(art, data.ptr));\n-\twhile (true) {\n-\t\tauto copy_count = MinValue(Node::PREFIX_SEGMENT_SIZE - offset, remaining);\n+\t\tmismatch_position = max_count;\n \n-\t\t// copy the data\n-\t\tfor (idx_t i = offset; i < offset + copy_count; i++) {\n-\t\t\tdst_segment = dst_segment.get().Append(art, count, src_segment.get().bytes[i]);\n-\t\t}\n+\t\t// l_prefix contains r_prefix\n+\t\tif (r_prefix.ptr.DecodeARTNodeType() != NType::PREFIX && r_prefix.data[Node::PREFIX_SIZE] == max_count) {\n+\t\t\tswap(l_node.get(), r_node.get());\n+\t\t\tl_node = r_prefix.ptr;\n \n-\t\t// adjust the loop variables\n-\t\toffset = 0;\n-\t\tremaining -= copy_count;\n-\t\tif (remaining == 0) {\n-\t\t\tbreak;\n+\t\t} else {\n+\t\t\t// r_prefix contains l_prefix\n+\t\t\tl_node = l_prefix.ptr;\n \t\t}\n-\t\tD_ASSERT(src_segment.get().next.IsSet());\n-\t\tsrc_segment = PrefixSegment::Get(art, src_segment.get().next);\n \t}\n \n-\t// possibly inline the data\n-\tif (IsInlined()) {\n-\t\tMoveSegmentToInlined(art);\n-\t}\n-\n-\treturn new_first_byte;\n+\treturn true;\n }\n \n-uint8_t Prefix::GetByte(const ART &art, const idx_t position) const {\n+void Prefix::Reduce(ART &art, Node &prefix_node, const idx_t n) {\n+\n+\tD_ASSERT(prefix_node.IsSet() && !prefix_node.IsSwizzled());\n+\tD_ASSERT(n < Node::PREFIX_SIZE);\n \n-\tD_ASSERT(position < count);\n-\tif (IsInlined()) {\n-\t\treturn data.inlined[position];\n+\treference<Prefix> prefix = Prefix::Get(art, prefix_node);\n+\n+\t// free this prefix node\n+\tif (n == (idx_t)(prefix.get().data[Node::PREFIX_SIZE] - 1)) {\n+\t\tauto next_ptr = prefix.get().ptr;\n+\t\tD_ASSERT(next_ptr.IsSet());\n+\t\tprefix.get().ptr.Reset();\n+\t\tNode::Free(art, prefix_node);\n+\t\tprefix_node = next_ptr;\n+\t\treturn;\n \t}\n \n-\t// get the correct segment\n-\treference<PrefixSegment> segment(PrefixSegment::Get(art, data.ptr));\n-\tfor (idx_t i = 0; i < position / Node::PREFIX_SEGMENT_SIZE; i++) {\n-\t\tD_ASSERT(segment.get().next.IsSet());\n-\t\tsegment = PrefixSegment::Get(art, segment.get().next);\n+\t// shift by n bytes in the current prefix\n+\tfor (idx_t i = 0; i < Node::PREFIX_SIZE - n - 1; i++) {\n+\t\tprefix.get().data[i] = prefix.get().data[n + i + 1];\n \t}\n+\tD_ASSERT(n < (idx_t)(prefix.get().data[Node::PREFIX_SIZE] - 1));\n+\tprefix.get().data[Node::PREFIX_SIZE] -= n + 1;\n \n-\treturn segment.get().bytes[position % Node::PREFIX_SEGMENT_SIZE];\n+\t// append the remaining prefix bytes\n+\tprefix.get().Append(art, prefix.get().ptr);\n }\n \n-uint32_t Prefix::KeyMismatchPosition(const ART &art, const ARTKey &key, const uint32_t depth) const {\n+void Prefix::Split(ART &art, reference<Node> &prefix_node, Node &child_node, idx_t position) {\n \n-\tif (IsInlined()) {\n-\t\tfor (idx_t mismatch_position = 0; mismatch_position < count; mismatch_position++) {\n-\t\t\tD_ASSERT(depth + mismatch_position < key.len);\n-\t\t\tif (key[depth + mismatch_position] != data.inlined[mismatch_position]) {\n-\t\t\t\treturn mismatch_position;\n-\t\t\t}\n-\t\t}\n-\t\treturn count;\n-\t}\n-\n-\tuint32_t mismatch_position = 0;\n-\tauto ptr = data.ptr;\n+\tD_ASSERT(prefix_node.get().IsSet() && !prefix_node.get().IsSwizzled());\n \n-\twhile (mismatch_position != count) {\n-\t\tD_ASSERT(depth + mismatch_position < key.len);\n-\t\tD_ASSERT(ptr.IsSet());\n+\tauto &prefix = Prefix::Get(art, prefix_node);\n \n-\t\tauto &segment = PrefixSegment::Get(art, ptr);\n-\t\tauto compare_count = MinValue(Node::PREFIX_SEGMENT_SIZE, count - mismatch_position);\n-\n-\t\t// compare bytes\n-\t\tfor (uint32_t i = 0; i < compare_count; i++) {\n-\t\t\tif (key[depth + mismatch_position] != segment.bytes[i]) {\n-\t\t\t\treturn mismatch_position;\n-\t\t\t}\n-\t\t\tmismatch_position++;\n-\t\t}\n-\n-\t\t// adjust loop variables\n-\t\tptr = segment.next;\n+\t// the split is at the last byte of this prefix, so the child_node contains all subsequent\n+\t// prefix nodes (prefix.ptr) (if any), and the count of this prefix decreases by one,\n+\t// then, we reference prefix.ptr, to overwrite it with a new node later\n+\tif (position + 1 == Node::PREFIX_SIZE) {\n+\t\tprefix.data[Node::PREFIX_SIZE]--;\n+\t\tprefix_node = prefix.ptr;\n+\t\tchild_node = prefix.ptr;\n+\t\treturn;\n \t}\n-\treturn count;\n-}\n \n-uint32_t Prefix::MismatchPosition(const ART &art, const Prefix &other) const {\n+\t// append the remaining bytes after the split\n+\tif (position + 1 < prefix.data[Node::PREFIX_SIZE]) {\n+\t\treference<Prefix> child_prefix = Prefix::New(art, child_node);\n+\t\tfor (idx_t i = position + 1; i < prefix.data[Node::PREFIX_SIZE]; i++) {\n+\t\t\tchild_prefix = child_prefix.get().Append(art, prefix.data[i]);\n+\t\t}\n \n-\tD_ASSERT(count <= other.count);\n+\t\tD_ASSERT(prefix.ptr.IsSet());\n+\t\tif (prefix.ptr.IsSwizzled()) {\n+\t\t\tprefix.ptr.Deserialize(art);\n+\t\t}\n \n-\t// case 1: both prefixes are inlined\n-\tif (IsInlined() && other.IsInlined()) {\n-\t\tfor (uint32_t i = 0; i < count; i++) {\n-\t\t\tif (data.inlined[i] != other.data.inlined[i]) {\n-\t\t\t\treturn i;\n-\t\t\t}\n+\t\tif (prefix.ptr.DecodeARTNodeType() == NType::PREFIX) {\n+\t\t\tchild_prefix.get().Append(art, prefix.ptr);\n+\t\t} else {\n+\t\t\t// this is the last prefix node of the prefix\n+\t\t\tchild_prefix.get().ptr = prefix.ptr;\n \t\t}\n-\t\treturn count;\n \t}\n \n-\t// case 2: only this prefix is inlined\n-\tif (IsInlined()) {\n-\t\t// we only need the first segment of the other prefix\n-\t\tauto &segment = PrefixSegment::Get(art, other.data.ptr);\n-\t\tfor (uint32_t i = 0; i < count; i++) {\n-\t\t\tif (data.inlined[i] != segment.bytes[i]) {\n-\t\t\t\treturn i;\n-\t\t\t}\n-\t\t}\n-\t\treturn count;\n+\t// this is the last prefix node of the prefix\n+\tif (position + 1 == prefix.data[Node::PREFIX_SIZE]) {\n+\t\tchild_node = prefix.ptr;\n \t}\n \n-\t// case 3: both prefixes are not inlined\n-\tauto ptr = data.ptr;\n-\tauto other_ptr = other.data.ptr;\n-\n-\t// iterate segments and compare bytes\n-\tuint32_t mismatch_position = 0;\n-\twhile (ptr.IsSet()) {\n-\t\tD_ASSERT(other_ptr.IsSet());\n-\t\tauto &segment = PrefixSegment::Get(art, ptr);\n-\t\tauto &other_segment = PrefixSegment::Get(art, other_ptr);\n-\n-\t\t// compare bytes\n-\t\tauto compare_count = MinValue(Node::PREFIX_SEGMENT_SIZE, count - mismatch_position);\n-\t\tfor (uint32_t i = 0; i < compare_count; i++) {\n-\t\t\tif (segment.bytes[i] != other_segment.bytes[i]) {\n-\t\t\t\treturn mismatch_position;\n-\t\t\t}\n-\t\t\tmismatch_position++;\n-\t\t}\n+\t// set the new size of this node\n+\tprefix.data[Node::PREFIX_SIZE] = position;\n \n-\t\t// adjust loop variables\n-\t\tptr = segment.next;\n-\t\tother_ptr = other_segment.next;\n+\t// no bytes left before the split, free this node\n+\tif (position == 0) {\n+\t\tprefix.ptr.Reset();\n+\t\tNode::Free(art, prefix_node.get());\n+\t\treturn;\n \t}\n-\treturn count;\n+\n+\t// bytes left before the split, reference subsequent node\n+\tprefix_node = prefix.ptr;\n+\treturn;\n }\n \n-void Prefix::Serialize(const ART &art, MetaBlockWriter &writer) const {\n+string Prefix::VerifyAndToString(ART &art, const bool only_verify) {\n \n-\twriter.Write(count);\n+\tD_ASSERT(data[Node::PREFIX_SIZE] != 0);\n+\tD_ASSERT(data[Node::PREFIX_SIZE] <= Node::PREFIX_SIZE);\n \n-\t// write inlined data\n-\tif (IsInlined()) {\n-\t\twriter.WriteData(data.inlined, count);\n-\t\treturn;\n+\tstring str = \" prefix_bytes:[\";\n+\tfor (idx_t i = 0; i < data[Node::PREFIX_SIZE]; i++) {\n+\t\tstr += to_string(data[i]) + \"-\";\n \t}\n+\tstr += \"] \";\n \n-\tD_ASSERT(data.ptr.IsSet());\n-\tauto ptr = data.ptr;\n-\tauto remaining = count;\n+\tstr = only_verify ? ptr.VerifyAndToString(art, only_verify) : str + ptr.VerifyAndToString(art, only_verify);\n+\treturn str;\n+}\n+\n+BlockPointer Prefix::Serialize(ART &art, MetaBlockWriter &writer) {\n \n-\t// iterate all prefix segments and write their bytes\n-\twhile (ptr.IsSet()) {\n-\t\tauto &segment = PrefixSegment::Get(art, ptr);\n-\t\tauto copy_count = MinValue(Node::PREFIX_SEGMENT_SIZE, remaining);\n+\t// recurse into the child and retrieve its block pointer\n+\tauto child_block_pointer = ptr.Serialize(art, writer);\n \n-\t\t// write the bytes\n-\t\twriter.WriteData(segment.bytes, copy_count);\n+\t// get pointer and write fields\n+\tauto block_pointer = writer.GetBlockPointer();\n+\twriter.Write(NType::PREFIX);\n+\twriter.Write<uint8_t>(data[Node::PREFIX_SIZE]);\n \n-\t\t// adjust loop variables\n-\t\tremaining -= copy_count;\n-\t\tptr = segment.next;\n+\t// write prefix bytes\n+\tfor (idx_t i = 0; i < data[Node::PREFIX_SIZE]; i++) {\n+\t\twriter.Write(data[i]);\n \t}\n-\tD_ASSERT(remaining == 0);\n+\n+\t// write child block pointer\n+\twriter.Write(child_block_pointer.block_id);\n+\twriter.Write(child_block_pointer.offset);\n+\n+\treturn block_pointer;\n }\n \n-void Prefix::Deserialize(ART &art, MetaBlockReader &reader) {\n+void Prefix::Deserialize(MetaBlockReader &reader) {\n \n-\tauto count_p = reader.Read<uint32_t>();\n+\tdata[Node::PREFIX_SIZE] = reader.Read<uint8_t>();\n \n-\t// copy into inlined data\n-\tif (count_p <= Node::PREFIX_INLINE_BYTES) {\n-\t\treader.ReadData(data.inlined, count_p);\n-\t\tcount = count_p;\n-\t\treturn;\n+\t// read bytes\n+\tfor (idx_t i = 0; i < data[Node::PREFIX_SIZE]; i++) {\n+\t\tdata[i] = reader.Read<uint8_t>();\n \t}\n \n-\t// copy into segments\n-\tcount = 0;\n-\treference<PrefixSegment> segment(PrefixSegment::New(art, data.ptr));\n-\tfor (idx_t i = 0; i < count_p; i++) {\n-\t\tsegment = segment.get().Append(art, count, reader.Read<uint8_t>());\n-\t}\n-\tD_ASSERT(count_p == count);\n+\t// read child block pointer\n+\tptr = Node(reader);\n }\n \n-void Prefix::Vacuum(ART &art) {\n+Prefix &Prefix::Append(ART &art, const uint8_t byte) {\n \n-\tif (IsInlined()) {\n-\t\treturn;\n-\t}\n+\treference<Prefix> prefix(*this);\n \n-\t// first pointer has special treatment because we don't obtain it from a prefix segment\n-\tauto &allocator = Node::GetAllocator(art, NType::PREFIX_SEGMENT);\n-\tif (allocator.NeedsVacuum(data.ptr)) {\n-\t\tdata.ptr.SetPtr(allocator.VacuumPointer(data.ptr));\n-\t\tdata.ptr.type = (uint8_t)NType::PREFIX_SEGMENT;\n+\t// we need a new prefix node\n+\tif (prefix.get().data[Node::PREFIX_SIZE] == Node::PREFIX_SIZE) {\n+\t\tprefix = Prefix::New(art, prefix.get().ptr);\n \t}\n \n-\tauto ptr = data.ptr;\n-\twhile (ptr.IsSet()) {\n-\t\tauto &segment = PrefixSegment::Get(art, ptr);\n-\t\tptr = segment.next;\n-\t\tif (ptr.IsSet() && allocator.NeedsVacuum(ptr)) {\n-\t\t\tsegment.next.SetPtr(allocator.VacuumPointer(ptr));\n-\t\t\tsegment.next.type = (uint8_t)NType::PREFIX_SEGMENT;\n-\t\t\tptr = segment.next;\n-\t\t}\n-\t}\n+\tprefix.get().data[prefix.get().data[Node::PREFIX_SIZE]] = byte;\n+\tprefix.get().data[Node::PREFIX_SIZE]++;\n+\treturn prefix.get();\n }\n \n-PrefixSegment &Prefix::MoveInlinedToSegment(ART &art) {\n+void Prefix::Append(ART &art, Node other_prefix) {\n \n-\tD_ASSERT(IsInlined());\n+\t// NOTE: all usages of this function already deserialize the other prefix\n+\tD_ASSERT(other_prefix.IsSet() && !other_prefix.IsSwizzled());\n \n-\tNode ptr;\n-\tauto &segment = PrefixSegment::New(art, ptr);\n+\treference<Prefix> prefix(*this);\n+\twhile (other_prefix.DecodeARTNodeType() == NType::PREFIX) {\n \n-\t// move data\n-\tD_ASSERT(Node::PREFIX_SEGMENT_SIZE >= Node::PREFIX_INLINE_BYTES);\n-\tmemcpy(segment.bytes, data.inlined, count);\n-\tdata.ptr = ptr;\n-\treturn segment;\n-}\n-\n-void Prefix::MoveSegmentToInlined(ART &art) {\n+\t\t// copy prefix bytes\n+\t\tauto &other = Prefix::Get(art, other_prefix);\n+\t\tfor (idx_t i = 0; i < other.data[Node::PREFIX_SIZE]; i++) {\n+\t\t\tprefix = prefix.get().Append(art, other.data[i]);\n+\t\t}\n \n-\tD_ASSERT(IsInlined());\n-\tD_ASSERT(data.ptr.IsSet());\n+\t\tD_ASSERT(other.ptr.IsSet());\n+\t\tif (other.ptr.IsSwizzled()) {\n+\t\t\tother.ptr.Deserialize(art);\n+\t\t}\n \n-\tauto ptr = data.ptr;\n-\tauto &segment = PrefixSegment::Get(art, data.ptr);\n+\t\tprefix.get().ptr = other.ptr;\n+\t\tNode::GetAllocator(art, NType::PREFIX).Free(other_prefix);\n+\t\tother_prefix = prefix.get().ptr;\n+\t}\n \n-\tmemcpy(data.inlined, segment.bytes, count);\n-\tNode::Free(art, ptr);\n+\tD_ASSERT(prefix.get().ptr.DecodeARTNodeType() != NType::PREFIX);\n }\n \n } // namespace duckdb\ndiff --git a/src/execution/index/art/prefix_segment.cpp b/src/execution/index/art/prefix_segment.cpp\ndeleted file mode 100644\nindex 94cf9d6259ec..000000000000\n--- a/src/execution/index/art/prefix_segment.cpp\n+++ /dev/null\n@@ -1,42 +0,0 @@\n-#include \"duckdb/execution/index/art/prefix_segment.hpp\"\n-\n-#include \"duckdb/execution/index/art/art.hpp\"\n-#include \"duckdb/execution/index/art/node.hpp\"\n-\n-namespace duckdb {\n-\n-PrefixSegment &PrefixSegment::New(ART &art, Node &node) {\n-\n-\tnode.SetPtr(Node::GetAllocator(art, NType::PREFIX_SEGMENT).New());\n-\tnode.type = (uint8_t)NType::PREFIX_SEGMENT;\n-\n-\tauto &segment = PrefixSegment::Get(art, node);\n-\tsegment.next.Reset();\n-\treturn segment;\n-}\n-\n-PrefixSegment &PrefixSegment::Append(ART &art, uint32_t &count, const uint8_t byte) {\n-\n-\treference<PrefixSegment> segment(*this);\n-\tauto position = count % Node::PREFIX_SEGMENT_SIZE;\n-\n-\t// we need a new segment\n-\tif (position == 0 && count != 0) {\n-\t\tsegment = PrefixSegment::New(art, next);\n-\t}\n-\n-\tsegment.get().bytes[position] = byte;\n-\tcount++;\n-\treturn segment.get();\n-}\n-\n-PrefixSegment &PrefixSegment::GetTail(const ART &art) {\n-\n-\treference<PrefixSegment> segment(*this);\n-\twhile (segment.get().next.IsSet()) {\n-\t\tsegment = PrefixSegment::Get(art, segment.get().next);\n-\t}\n-\treturn segment.get();\n-}\n-\n-} // namespace duckdb\ndiff --git a/src/execution/operator/aggregate/aggregate_object.cpp b/src/execution/operator/aggregate/aggregate_object.cpp\nindex 5cbec4f43c82..b2ef947824ef 100644\n--- a/src/execution/operator/aggregate/aggregate_object.cpp\n+++ b/src/execution/operator/aggregate/aggregate_object.cpp\n@@ -1,4 +1,5 @@\n #include \"duckdb/execution/operator/aggregate/aggregate_object.hpp\"\n+\n #include \"duckdb/planner/expression/bound_aggregate_expression.hpp\"\n #include \"duckdb/planner/expression/bound_window_expression.hpp\"\n \ndiff --git a/src/execution/operator/aggregate/physical_window.cpp b/src/execution/operator/aggregate/physical_window.cpp\nindex 7b879edf5b07..ff4dfc695fc1 100644\n--- a/src/execution/operator/aggregate/physical_window.cpp\n+++ b/src/execution/operator/aggregate/physical_window.cpp\n@@ -271,6 +271,8 @@ static inline bool BoundaryNeedsPeer(const WindowBoundary &boundary) {\n \t}\n }\n \n+enum WindowBounds : uint8_t { PARTITION_BEGIN, PARTITION_END, PEER_BEGIN, PEER_END, WINDOW_BEGIN, WINDOW_END };\n+\n struct WindowBoundariesState {\n \tstatic inline bool IsScalar(const unique_ptr<Expression> &expr) {\n \t\treturn expr ? expr->IsScalar() : true;\n@@ -287,7 +289,11 @@ struct WindowBoundariesState {\n \t      needs_peer(BoundaryNeedsPeer(wexpr.end) || wexpr.type == ExpressionType::WINDOW_CUME_DIST) {\n \t}\n \n-\tvoid Update(const idx_t row_idx, WindowInputColumn &range_collection, const idx_t source_offset,\n+\tvoid Update(const idx_t row_idx, WindowInputColumn &range_collection, const idx_t chunk_idx,\n+\t            WindowInputExpression &boundary_start, WindowInputExpression &boundary_end,\n+\t            const ValidityMask &partition_mask, const ValidityMask &order_mask);\n+\n+\tvoid Bounds(DataChunk &bounds, idx_t row_idx, WindowInputColumn &range, const idx_t count,\n \t            WindowInputExpression &boundary_start, WindowInputExpression &boundary_end,\n \t            const ValidityMask &partition_mask, const ValidityMask &order_mask);\n \n@@ -311,15 +317,9 @@ struct WindowBoundariesState {\n \tidx_t valid_end = 0;\n \tint64_t window_start = -1;\n \tint64_t window_end = -1;\n-\tbool is_same_partition = false;\n-\tbool is_peer = false;\n+\tFrameBounds prev;\n };\n \n-static bool WindowNeedsRank(const BoundWindowExpression &wexpr) {\n-\treturn wexpr.type == ExpressionType::WINDOW_PERCENT_RANK || wexpr.type == ExpressionType::WINDOW_RANK ||\n-\t       wexpr.type == ExpressionType::WINDOW_RANK_DENSE || wexpr.type == ExpressionType::WINDOW_CUME_DIST;\n-}\n-\n template <typename T>\n static T GetCell(DataChunk &chunk, idx_t column, idx_t index) {\n \tD_ASSERT(chunk.ColumnCount() > column);\n@@ -343,7 +343,7 @@ static void CopyCell(DataChunk &chunk, idx_t column, idx_t index, Vector &target\n template <typename T>\n struct WindowColumnIterator {\n \tusing iterator = WindowColumnIterator<T>;\n-\tusing iterator_category = std::forward_iterator_tag;\n+\tusing iterator_category = std::random_access_iterator_tag;\n \tusing difference_type = std::ptrdiff_t;\n \tusing value_type = T;\n \tusing reference = T;\n@@ -352,6 +352,7 @@ struct WindowColumnIterator {\n \texplicit WindowColumnIterator(WindowInputColumn &coll_p, pointer pos_p = 0) : coll(&coll_p), pos(pos_p) {\n \t}\n \n+\t//\tForward iterator\n \tinline reference operator*() const {\n \t\treturn coll->GetCell<T>(pos);\n \t}\n@@ -369,12 +370,64 @@ struct WindowColumnIterator {\n \t\treturn result;\n \t}\n \n+\t//\tBidirectional iterator\n+\tinline iterator &operator--() {\n+\t\t--pos;\n+\t\treturn *this;\n+\t}\n+\tinline iterator operator--(int) {\n+\t\tauto result = *this;\n+\t\t--(*this);\n+\t\treturn result;\n+\t}\n+\n+\t//\tRandom Access\n+\tinline iterator &operator+=(difference_type n) {\n+\t\tpos += n;\n+\t\treturn *this;\n+\t}\n+\tinline iterator &operator-=(difference_type n) {\n+\t\tpos -= n;\n+\t\treturn *this;\n+\t}\n+\n+\tinline reference operator[](difference_type m) const {\n+\t\treturn coll->GetCell<T>(pos + m);\n+\t}\n+\n+\tfriend inline iterator &operator+(const iterator &a, difference_type n) {\n+\t\treturn iterator(a.coll, a.pos + n);\n+\t}\n+\n+\tfriend inline iterator &operator-(const iterator &a, difference_type n) {\n+\t\treturn iterator(a.coll, a.pos - n);\n+\t}\n+\n+\tfriend inline iterator &operator+(difference_type n, const iterator &a) {\n+\t\treturn a + n;\n+\t}\n+\tfriend inline difference_type operator-(const iterator &a, const iterator &b) {\n+\t\treturn difference_type(a.pos - b.pos);\n+\t}\n+\n \tfriend inline bool operator==(const iterator &a, const iterator &b) {\n \t\treturn a.pos == b.pos;\n \t}\n \tfriend inline bool operator!=(const iterator &a, const iterator &b) {\n \t\treturn a.pos != b.pos;\n \t}\n+\tfriend inline bool operator<(const iterator &a, const iterator &b) {\n+\t\treturn a.pos < b.pos;\n+\t}\n+\tfriend inline bool operator<=(const iterator &a, const iterator &b) {\n+\t\treturn a.pos <= b.pos;\n+\t}\n+\tfriend inline bool operator>(const iterator &a, const iterator &b) {\n+\t\treturn a.pos > b.pos;\n+\t}\n+\tfriend inline bool operator>=(const iterator &a, const iterator &b) {\n+\t\treturn a.pos >= b.pos;\n+\t}\n \n private:\n \toptional_ptr<WindowInputColumn> coll;\n@@ -390,13 +443,30 @@ struct OperationCompare : public std::function<bool(T, T)> {\n \n template <typename T, typename OP, bool FROM>\n static idx_t FindTypedRangeBound(WindowInputColumn &over, const idx_t order_begin, const idx_t order_end,\n-                                 WindowInputExpression &boundary, const idx_t boundary_row) {\n-\tD_ASSERT(!boundary.CellIsNull(boundary_row));\n-\tconst auto val = boundary.GetCell<T>(boundary_row);\n+                                 WindowInputExpression &boundary, const idx_t chunk_idx, const FrameBounds &prev) {\n+\tD_ASSERT(!boundary.CellIsNull(chunk_idx));\n+\tconst auto val = boundary.GetCell<T>(chunk_idx);\n \n \tOperationCompare<T, OP> comp;\n \tWindowColumnIterator<T> begin(over, order_begin);\n \tWindowColumnIterator<T> end(over, order_end);\n+\n+\tif (order_begin < prev.first && prev.first < order_end) {\n+\t\tconst auto first = over.GetCell<T>(prev.first);\n+\t\tif (!comp(val, first)) {\n+\t\t\t//\tprev.first <= val, so we can start further forward\n+\t\t\tbegin += (prev.first - order_begin);\n+\t\t}\n+\t}\n+\tif (order_begin <= prev.second && prev.second < order_end) {\n+\t\tconst auto second = over.GetCell<T>(prev.second);\n+\t\tif (!comp(second, val)) {\n+\t\t\t//\tval <= prev.second, so we can end further back\n+\t\t\t// (prev.second is the largest peer)\n+\t\t\tend -= (order_end - prev.second - 1);\n+\t\t}\n+\t}\n+\n \tif (FROM) {\n \t\treturn idx_t(std::lower_bound(begin, end, val, comp));\n \t} else {\n@@ -406,35 +476,35 @@ static idx_t FindTypedRangeBound(WindowInputColumn &over, const idx_t order_begi\n \n template <typename OP, bool FROM>\n static idx_t FindRangeBound(WindowInputColumn &over, const idx_t order_begin, const idx_t order_end,\n-                            WindowInputExpression &boundary, const idx_t expr_idx) {\n+                            WindowInputExpression &boundary, const idx_t chunk_idx, const FrameBounds &prev) {\n \tD_ASSERT(boundary.chunk.ColumnCount() == 1);\n \tD_ASSERT(boundary.chunk.data[0].GetType().InternalType() == over.input_expr.ptype);\n \n \tswitch (over.input_expr.ptype) {\n \tcase PhysicalType::INT8:\n-\t\treturn FindTypedRangeBound<int8_t, OP, FROM>(over, order_begin, order_end, boundary, expr_idx);\n+\t\treturn FindTypedRangeBound<int8_t, OP, FROM>(over, order_begin, order_end, boundary, chunk_idx, prev);\n \tcase PhysicalType::INT16:\n-\t\treturn FindTypedRangeBound<int16_t, OP, FROM>(over, order_begin, order_end, boundary, expr_idx);\n+\t\treturn FindTypedRangeBound<int16_t, OP, FROM>(over, order_begin, order_end, boundary, chunk_idx, prev);\n \tcase PhysicalType::INT32:\n-\t\treturn FindTypedRangeBound<int32_t, OP, FROM>(over, order_begin, order_end, boundary, expr_idx);\n+\t\treturn FindTypedRangeBound<int32_t, OP, FROM>(over, order_begin, order_end, boundary, chunk_idx, prev);\n \tcase PhysicalType::INT64:\n-\t\treturn FindTypedRangeBound<int64_t, OP, FROM>(over, order_begin, order_end, boundary, expr_idx);\n+\t\treturn FindTypedRangeBound<int64_t, OP, FROM>(over, order_begin, order_end, boundary, chunk_idx, prev);\n \tcase PhysicalType::UINT8:\n-\t\treturn FindTypedRangeBound<uint8_t, OP, FROM>(over, order_begin, order_end, boundary, expr_idx);\n+\t\treturn FindTypedRangeBound<uint8_t, OP, FROM>(over, order_begin, order_end, boundary, chunk_idx, prev);\n \tcase PhysicalType::UINT16:\n-\t\treturn FindTypedRangeBound<uint16_t, OP, FROM>(over, order_begin, order_end, boundary, expr_idx);\n+\t\treturn FindTypedRangeBound<uint16_t, OP, FROM>(over, order_begin, order_end, boundary, chunk_idx, prev);\n \tcase PhysicalType::UINT32:\n-\t\treturn FindTypedRangeBound<uint32_t, OP, FROM>(over, order_begin, order_end, boundary, expr_idx);\n+\t\treturn FindTypedRangeBound<uint32_t, OP, FROM>(over, order_begin, order_end, boundary, chunk_idx, prev);\n \tcase PhysicalType::UINT64:\n-\t\treturn FindTypedRangeBound<uint64_t, OP, FROM>(over, order_begin, order_end, boundary, expr_idx);\n+\t\treturn FindTypedRangeBound<uint64_t, OP, FROM>(over, order_begin, order_end, boundary, chunk_idx, prev);\n \tcase PhysicalType::INT128:\n-\t\treturn FindTypedRangeBound<hugeint_t, OP, FROM>(over, order_begin, order_end, boundary, expr_idx);\n+\t\treturn FindTypedRangeBound<hugeint_t, OP, FROM>(over, order_begin, order_end, boundary, chunk_idx, prev);\n \tcase PhysicalType::FLOAT:\n-\t\treturn FindTypedRangeBound<float, OP, FROM>(over, order_begin, order_end, boundary, expr_idx);\n+\t\treturn FindTypedRangeBound<float, OP, FROM>(over, order_begin, order_end, boundary, chunk_idx, prev);\n \tcase PhysicalType::DOUBLE:\n-\t\treturn FindTypedRangeBound<double, OP, FROM>(over, order_begin, order_end, boundary, expr_idx);\n+\t\treturn FindTypedRangeBound<double, OP, FROM>(over, order_begin, order_end, boundary, chunk_idx, prev);\n \tcase PhysicalType::INTERVAL:\n-\t\treturn FindTypedRangeBound<interval_t, OP, FROM>(over, order_begin, order_end, boundary, expr_idx);\n+\t\treturn FindTypedRangeBound<interval_t, OP, FROM>(over, order_begin, order_end, boundary, chunk_idx, prev);\n \tdefault:\n \t\tthrow InternalException(\"Unsupported column type for RANGE\");\n \t}\n@@ -442,123 +512,126 @@ static idx_t FindRangeBound(WindowInputColumn &over, const idx_t order_begin, co\n \n template <bool FROM>\n static idx_t FindOrderedRangeBound(WindowInputColumn &over, const OrderType range_sense, const idx_t order_begin,\n-                                   const idx_t order_end, WindowInputExpression &boundary, const idx_t expr_idx) {\n+                                   const idx_t order_end, WindowInputExpression &boundary, const idx_t chunk_idx,\n+                                   const FrameBounds &prev) {\n \tswitch (range_sense) {\n \tcase OrderType::ASCENDING:\n-\t\treturn FindRangeBound<LessThan, FROM>(over, order_begin, order_end, boundary, expr_idx);\n+\t\treturn FindRangeBound<LessThan, FROM>(over, order_begin, order_end, boundary, chunk_idx, prev);\n \tcase OrderType::DESCENDING:\n-\t\treturn FindRangeBound<GreaterThan, FROM>(over, order_begin, order_end, boundary, expr_idx);\n+\t\treturn FindRangeBound<GreaterThan, FROM>(over, order_begin, order_end, boundary, chunk_idx, prev);\n \tdefault:\n \t\tthrow InternalException(\"Unsupported ORDER BY sense for RANGE\");\n \t}\n }\n \n-void WindowBoundariesState::Update(const idx_t row_idx, WindowInputColumn &range_collection, const idx_t expr_idx,\n+void WindowBoundariesState::Update(const idx_t row_idx, WindowInputColumn &range_collection, const idx_t chunk_idx,\n                                    WindowInputExpression &boundary_start, WindowInputExpression &boundary_end,\n                                    const ValidityMask &partition_mask, const ValidityMask &order_mask) {\n \n-\tauto &bounds = *this;\n-\tif (bounds.partition_count + bounds.order_count > 0) {\n+\tif (partition_count + order_count > 0) {\n \n \t\t// determine partition and peer group boundaries to ultimately figure out window size\n-\t\tbounds.is_same_partition = !partition_mask.RowIsValidUnsafe(row_idx);\n-\t\tbounds.is_peer = !order_mask.RowIsValidUnsafe(row_idx);\n+\t\tconst auto is_same_partition = !partition_mask.RowIsValidUnsafe(row_idx);\n+\t\tconst auto is_peer = !order_mask.RowIsValidUnsafe(row_idx);\n \n \t\t// when the partition changes, recompute the boundaries\n-\t\tif (!bounds.is_same_partition) {\n-\t\t\tbounds.partition_start = row_idx;\n-\t\t\tbounds.peer_start = row_idx;\n+\t\tif (!is_same_partition) {\n+\t\t\tpartition_start = row_idx;\n+\t\t\tpeer_start = row_idx;\n \n \t\t\t// find end of partition\n-\t\t\tbounds.partition_end = bounds.input_size;\n-\t\t\tif (bounds.partition_count) {\n+\t\t\tpartition_end = input_size;\n+\t\t\tif (partition_count) {\n \t\t\t\tidx_t n = 1;\n-\t\t\t\tbounds.partition_end = FindNextStart(partition_mask, bounds.partition_start + 1, bounds.input_size, n);\n+\t\t\t\tpartition_end = FindNextStart(partition_mask, partition_start + 1, input_size, n);\n \t\t\t}\n \n \t\t\t// Find valid ordering values for the new partition\n \t\t\t// so we can exclude NULLs from RANGE expression computations\n-\t\t\tbounds.valid_start = bounds.partition_start;\n-\t\t\tbounds.valid_end = bounds.partition_end;\n+\t\t\tvalid_start = partition_start;\n+\t\t\tvalid_end = partition_end;\n \n-\t\t\tif ((bounds.valid_start < bounds.valid_end) && bounds.has_preceding_range) {\n+\t\t\tif ((valid_start < valid_end) && has_preceding_range) {\n \t\t\t\t// Exclude any leading NULLs\n-\t\t\t\tif (range_collection.CellIsNull(bounds.valid_start)) {\n+\t\t\t\tif (range_collection.CellIsNull(valid_start)) {\n \t\t\t\t\tidx_t n = 1;\n-\t\t\t\t\tbounds.valid_start = FindNextStart(order_mask, bounds.valid_start + 1, bounds.valid_end, n);\n+\t\t\t\t\tvalid_start = FindNextStart(order_mask, valid_start + 1, valid_end, n);\n \t\t\t\t}\n \t\t\t}\n \n-\t\t\tif ((bounds.valid_start < bounds.valid_end) && bounds.has_following_range) {\n+\t\t\tif ((valid_start < valid_end) && has_following_range) {\n \t\t\t\t// Exclude any trailing NULLs\n-\t\t\t\tif (range_collection.CellIsNull(bounds.valid_end - 1)) {\n+\t\t\t\tif (range_collection.CellIsNull(valid_end - 1)) {\n \t\t\t\t\tidx_t n = 1;\n-\t\t\t\t\tbounds.valid_end = FindPrevStart(order_mask, bounds.valid_start, bounds.valid_end, n);\n+\t\t\t\t\tvalid_end = FindPrevStart(order_mask, valid_start, valid_end, n);\n \t\t\t\t}\n-\t\t\t}\n \n-\t\t} else if (!bounds.is_peer) {\n-\t\t\tbounds.peer_start = row_idx;\n+\t\t\t\t//\tReset range hints\n+\t\t\t\tprev.first = valid_start;\n+\t\t\t\tprev.second = valid_end;\n+\t\t\t}\n+\t\t} else if (!is_peer) {\n+\t\t\tpeer_start = row_idx;\n \t\t}\n \n-\t\tif (bounds.needs_peer) {\n-\t\t\tbounds.peer_end = bounds.partition_end;\n-\t\t\tif (bounds.order_count) {\n+\t\tif (needs_peer) {\n+\t\t\tpeer_end = partition_end;\n+\t\t\tif (order_count) {\n \t\t\t\tidx_t n = 1;\n-\t\t\t\tbounds.peer_end = FindNextStart(order_mask, bounds.peer_start + 1, bounds.partition_end, n);\n+\t\t\t\tpeer_end = FindNextStart(order_mask, peer_start + 1, partition_end, n);\n \t\t\t}\n \t\t}\n \n \t} else {\n-\t\tbounds.is_same_partition = false;\n-\t\tbounds.is_peer = true;\n-\t\tbounds.partition_end = bounds.input_size;\n-\t\tbounds.peer_end = bounds.partition_end;\n+\t\t//\tOVER()\n+\t\tpartition_end = input_size;\n+\t\tpeer_end = partition_end;\n \t}\n \n \t// determine window boundaries depending on the type of expression\n-\tbounds.window_start = -1;\n-\tbounds.window_end = -1;\n+\twindow_start = -1;\n+\twindow_end = -1;\n \n-\tswitch (bounds.start_boundary) {\n+\tswitch (start_boundary) {\n \tcase WindowBoundary::UNBOUNDED_PRECEDING:\n-\t\tbounds.window_start = bounds.partition_start;\n+\t\twindow_start = partition_start;\n \t\tbreak;\n \tcase WindowBoundary::CURRENT_ROW_ROWS:\n-\t\tbounds.window_start = row_idx;\n+\t\twindow_start = row_idx;\n \t\tbreak;\n \tcase WindowBoundary::CURRENT_ROW_RANGE:\n-\t\tbounds.window_start = bounds.peer_start;\n+\t\twindow_start = peer_start;\n \t\tbreak;\n \tcase WindowBoundary::EXPR_PRECEDING_ROWS: {\n-\t\tif (!TrySubtractOperator::Operation(int64_t(row_idx), boundary_start.GetCell<int64_t>(expr_idx),\n-\t\t                                    bounds.window_start)) {\n+\t\tif (!TrySubtractOperator::Operation(int64_t(row_idx), boundary_start.GetCell<int64_t>(chunk_idx),\n+\t\t                                    window_start)) {\n \t\t\tthrow OutOfRangeException(\"Overflow computing ROWS PRECEDING start\");\n \t\t}\n \t\tbreak;\n \t}\n \tcase WindowBoundary::EXPR_FOLLOWING_ROWS: {\n-\t\tif (!TryAddOperator::Operation(int64_t(row_idx), boundary_start.GetCell<int64_t>(expr_idx),\n-\t\t                               bounds.window_start)) {\n+\t\tif (!TryAddOperator::Operation(int64_t(row_idx), boundary_start.GetCell<int64_t>(chunk_idx), window_start)) {\n \t\t\tthrow OutOfRangeException(\"Overflow computing ROWS FOLLOWING start\");\n \t\t}\n \t\tbreak;\n \t}\n \tcase WindowBoundary::EXPR_PRECEDING_RANGE: {\n-\t\tif (boundary_start.CellIsNull(expr_idx)) {\n-\t\t\tbounds.window_start = bounds.peer_start;\n+\t\tif (boundary_start.CellIsNull(chunk_idx)) {\n+\t\t\twindow_start = peer_start;\n \t\t} else {\n-\t\t\tbounds.window_start = FindOrderedRangeBound<true>(range_collection, bounds.range_sense, bounds.valid_start,\n-\t\t\t                                                  row_idx, boundary_start, expr_idx);\n+\t\t\tprev.first = FindOrderedRangeBound<true>(range_collection, range_sense, valid_start, row_idx,\n+\t\t\t                                         boundary_start, chunk_idx, prev);\n+\t\t\twindow_start = prev.first;\n \t\t}\n \t\tbreak;\n \t}\n \tcase WindowBoundary::EXPR_FOLLOWING_RANGE: {\n-\t\tif (boundary_start.CellIsNull(expr_idx)) {\n-\t\t\tbounds.window_start = bounds.peer_start;\n+\t\tif (boundary_start.CellIsNull(chunk_idx)) {\n+\t\t\twindow_start = peer_start;\n \t\t} else {\n-\t\t\tbounds.window_start = FindOrderedRangeBound<true>(range_collection, bounds.range_sense, row_idx,\n-\t\t\t                                                  bounds.valid_end, boundary_start, expr_idx);\n+\t\t\tprev.first = FindOrderedRangeBound<true>(range_collection, range_sense, row_idx, valid_end, boundary_start,\n+\t\t\t                                         chunk_idx, prev);\n+\t\t\twindow_start = prev.first;\n \t\t}\n \t\tbreak;\n \t}\n@@ -566,43 +639,44 @@ void WindowBoundariesState::Update(const idx_t row_idx, WindowInputColumn &range\n \t\tthrow InternalException(\"Unsupported window start boundary\");\n \t}\n \n-\tswitch (bounds.end_boundary) {\n+\tswitch (end_boundary) {\n \tcase WindowBoundary::CURRENT_ROW_ROWS:\n-\t\tbounds.window_end = row_idx + 1;\n+\t\twindow_end = row_idx + 1;\n \t\tbreak;\n \tcase WindowBoundary::CURRENT_ROW_RANGE:\n-\t\tbounds.window_end = bounds.peer_end;\n+\t\twindow_end = peer_end;\n \t\tbreak;\n \tcase WindowBoundary::UNBOUNDED_FOLLOWING:\n-\t\tbounds.window_end = bounds.partition_end;\n+\t\twindow_end = partition_end;\n \t\tbreak;\n \tcase WindowBoundary::EXPR_PRECEDING_ROWS:\n-\t\tif (!TrySubtractOperator::Operation(int64_t(row_idx + 1), boundary_end.GetCell<int64_t>(expr_idx),\n-\t\t                                    bounds.window_end)) {\n+\t\tif (!TrySubtractOperator::Operation(int64_t(row_idx + 1), boundary_end.GetCell<int64_t>(chunk_idx),\n+\t\t                                    window_end)) {\n \t\t\tthrow OutOfRangeException(\"Overflow computing ROWS PRECEDING end\");\n \t\t}\n \t\tbreak;\n \tcase WindowBoundary::EXPR_FOLLOWING_ROWS:\n-\t\tif (!TryAddOperator::Operation(int64_t(row_idx + 1), boundary_end.GetCell<int64_t>(expr_idx),\n-\t\t                               bounds.window_end)) {\n+\t\tif (!TryAddOperator::Operation(int64_t(row_idx + 1), boundary_end.GetCell<int64_t>(chunk_idx), window_end)) {\n \t\t\tthrow OutOfRangeException(\"Overflow computing ROWS FOLLOWING end\");\n \t\t}\n \t\tbreak;\n \tcase WindowBoundary::EXPR_PRECEDING_RANGE: {\n-\t\tif (boundary_end.CellIsNull(expr_idx)) {\n-\t\t\tbounds.window_end = bounds.peer_end;\n+\t\tif (boundary_end.CellIsNull(chunk_idx)) {\n+\t\t\twindow_end = peer_end;\n \t\t} else {\n-\t\t\tbounds.window_end = FindOrderedRangeBound<false>(range_collection, bounds.range_sense, bounds.valid_start,\n-\t\t\t                                                 row_idx, boundary_end, expr_idx);\n+\t\t\tprev.second = FindOrderedRangeBound<false>(range_collection, range_sense, valid_start, row_idx,\n+\t\t\t                                           boundary_end, chunk_idx, prev);\n+\t\t\twindow_end = prev.second;\n \t\t}\n \t\tbreak;\n \t}\n \tcase WindowBoundary::EXPR_FOLLOWING_RANGE: {\n-\t\tif (boundary_end.CellIsNull(expr_idx)) {\n-\t\t\tbounds.window_end = bounds.peer_end;\n+\t\tif (boundary_end.CellIsNull(chunk_idx)) {\n+\t\t\twindow_end = peer_end;\n \t\t} else {\n-\t\t\tbounds.window_end = FindOrderedRangeBound<false>(range_collection, bounds.range_sense, row_idx,\n-\t\t\t                                                 bounds.valid_end, boundary_end, expr_idx);\n+\t\t\tprev.second = FindOrderedRangeBound<false>(range_collection, range_sense, row_idx, valid_end, boundary_end,\n+\t\t\t                                           chunk_idx, prev);\n+\t\t\twindow_end = prev.second;\n \t\t}\n \t\tbreak;\n \t}\n@@ -611,41 +685,69 @@ void WindowBoundariesState::Update(const idx_t row_idx, WindowInputColumn &range\n \t}\n \n \t// clamp windows to partitions if they should exceed\n-\tif (bounds.window_start < (int64_t)bounds.partition_start) {\n-\t\tbounds.window_start = bounds.partition_start;\n+\tif (window_start < (int64_t)partition_start) {\n+\t\twindow_start = partition_start;\n \t}\n-\tif (bounds.window_start > (int64_t)bounds.partition_end) {\n-\t\tbounds.window_start = bounds.partition_end;\n+\tif (window_start > (int64_t)partition_end) {\n+\t\twindow_start = partition_end;\n \t}\n-\tif (bounds.window_end < (int64_t)bounds.partition_start) {\n-\t\tbounds.window_end = bounds.partition_start;\n+\tif (window_end < (int64_t)partition_start) {\n+\t\twindow_end = partition_start;\n \t}\n-\tif (bounds.window_end > (int64_t)bounds.partition_end) {\n-\t\tbounds.window_end = bounds.partition_end;\n+\tif (window_end > (int64_t)partition_end) {\n+\t\twindow_end = partition_end;\n \t}\n \n-\tif (bounds.window_start < 0 || bounds.window_end < 0) {\n+\tif (window_start < 0 || window_end < 0) {\n \t\tthrow InternalException(\"Failed to compute window boundaries\");\n \t}\n }\n \n+void WindowBoundariesState::Bounds(DataChunk &bounds, idx_t row_idx, WindowInputColumn &range, const idx_t count,\n+                                   WindowInputExpression &boundary_start, WindowInputExpression &boundary_end,\n+                                   const ValidityMask &partition_mask, const ValidityMask &order_mask) {\n+\tbounds.Reset();\n+\tD_ASSERT(bounds.ColumnCount() == 6);\n+\tauto partition_begin_data = FlatVector::GetData<idx_t>(bounds.data[PARTITION_BEGIN]);\n+\tauto partition_end_data = FlatVector::GetData<idx_t>(bounds.data[PARTITION_END]);\n+\tauto peer_begin_data = FlatVector::GetData<idx_t>(bounds.data[PEER_BEGIN]);\n+\tauto peer_end_data = FlatVector::GetData<idx_t>(bounds.data[PEER_END]);\n+\tauto window_begin_data = FlatVector::GetData<int64_t>(bounds.data[WINDOW_BEGIN]);\n+\tauto window_end_data = FlatVector::GetData<int64_t>(bounds.data[WINDOW_END]);\n+\tfor (idx_t chunk_idx = 0; chunk_idx < count; ++chunk_idx, ++row_idx) {\n+\t\tUpdate(row_idx, range, chunk_idx, boundary_start, boundary_end, partition_mask, order_mask);\n+\t\t*partition_begin_data++ = partition_start;\n+\t\t*partition_end_data++ = partition_end;\n+\t\tif (needs_peer) {\n+\t\t\t*peer_begin_data++ = peer_start;\n+\t\t\t*peer_end_data++ = peer_end;\n+\t\t}\n+\t\t*window_begin_data++ = window_start;\n+\t\t*window_end_data++ = window_end;\n+\t}\n+\tbounds.SetCardinality(count);\n+}\n+\n struct WindowExecutor {\n-\tstatic bool IsConstantAggregate(const BoundWindowExpression &wexpr);\n+\tbool IsConstantAggregate();\n+\tbool IsCustomAggregate();\n \n \tWindowExecutor(BoundWindowExpression &wexpr, ClientContext &context, const ValidityMask &partition_mask,\n-\t               const idx_t count);\n+\t               const idx_t count, WindowAggregationMode mode);\n \n \tvoid Sink(DataChunk &input_chunk, const idx_t input_idx, const idx_t total_count);\n-\tvoid Finalize(WindowAggregationMode mode);\n+\tvoid Finalize();\n \n \tvoid Evaluate(idx_t row_idx, DataChunk &input_chunk, Vector &result, const ValidityMask &partition_mask,\n \t              const ValidityMask &order_mask);\n \n \t// The function\n \tBoundWindowExpression &wexpr;\n+\tconst WindowAggregationMode mode;\n \n \t// Frame management\n-\tWindowBoundariesState bounds;\n+\tWindowBoundariesState state;\n+\tDataChunk bounds;\n \tuint64_t dense_rank = 1;\n \tuint64_t rank_equal = 0;\n \tuint64_t rank = 1;\n@@ -656,8 +758,6 @@ struct WindowExecutor {\n \tDataChunk payload_chunk;\n \n \tExpressionExecutor filter_executor;\n-\tValidityMask filter_mask;\n-\tvector<validity_t> filter_bits;\n \tSelectionVector filter_sel;\n \n \t// LEAD/LAG Evaluation\n@@ -674,15 +774,25 @@ struct WindowExecutor {\n \t// IGNORE NULLS\n \tValidityMask ignore_nulls;\n \n-\t// build a segment tree for frame-adhering aggregates\n-\t// see http://www.vldb.org/pvldb/vol8/p1058-leis.pdf\n-\tunique_ptr<WindowSegmentTree> segment_tree = nullptr;\n-\n-\t// all aggregate values are the same for each partition\n-\tunique_ptr<WindowConstantAggregate> constant_aggregate = nullptr;\n+\t// aggregate computation algorithm\n+\tunique_ptr<WindowAggregateState> aggregate_state = nullptr;\n+\n+protected:\n+\tvoid NextRank(idx_t partition_begin, idx_t peer_begin, idx_t row_idx);\n+\tvoid Aggregate(DataChunk &bounds, Vector &result, idx_t count, idx_t row_idx);\n+\tvoid RowNumber(DataChunk &bounds, Vector &result, idx_t count, idx_t row_idx);\n+\tvoid Rank(DataChunk &bounds, Vector &result, idx_t count, idx_t row_idx);\n+\tvoid DenseRank(DataChunk &bounds, Vector &result, idx_t count, idx_t row_idx);\n+\tvoid PercentRank(DataChunk &bounds, Vector &result, idx_t count, idx_t row_idx);\n+\tvoid CumeDist(DataChunk &bounds, Vector &result, idx_t count, idx_t row_idx);\n+\tvoid Ntile(DataChunk &bounds, Vector &result, idx_t count, idx_t row_idx);\n+\tvoid LeadLag(DataChunk &bounds, Vector &result, idx_t count, idx_t row_idx);\n+\tvoid FirstValue(DataChunk &bounds, Vector &result, idx_t count, idx_t row_idx);\n+\tvoid LastValue(DataChunk &bounds, Vector &result, idx_t count, idx_t row_idx);\n+\tvoid NthValue(DataChunk &bounds, Vector &result, idx_t count, idx_t row_idx);\n };\n \n-bool WindowExecutor::IsConstantAggregate(const BoundWindowExpression &wexpr) {\n+bool WindowExecutor::IsConstantAggregate() {\n \tif (!wexpr.aggregate) {\n \t\treturn false;\n \t}\n@@ -736,28 +846,44 @@ bool WindowExecutor::IsConstantAggregate(const BoundWindowExpression &wexpr) {\n \treturn true;\n }\n \n+bool WindowExecutor::IsCustomAggregate() {\n+\tif (!wexpr.aggregate) {\n+\t\treturn false;\n+\t}\n+\n+\tif (!AggregateObject(wexpr).function.window) {\n+\t\treturn false;\n+\t}\n+\n+\treturn (mode < WindowAggregationMode::COMBINE);\n+}\n+\n WindowExecutor::WindowExecutor(BoundWindowExpression &wexpr, ClientContext &context, const ValidityMask &partition_mask,\n-                               const idx_t count)\n-    : wexpr(wexpr), bounds(wexpr, count), payload_collection(), payload_executor(context), filter_executor(context),\n-      leadlag_offset(wexpr.offset_expr.get(), context), leadlag_default(wexpr.default_expr.get(), context),\n-      boundary_start(wexpr.start_expr.get(), context), boundary_end(wexpr.end_expr.get(), context),\n-      range((bounds.has_preceding_range || bounds.has_following_range) ? wexpr.orders[0].expression.get() : nullptr,\n+                               const idx_t count, WindowAggregationMode mode)\n+    : wexpr(wexpr), mode(mode), state(wexpr, count), payload_collection(), payload_executor(context),\n+      filter_executor(context), leadlag_offset(wexpr.offset_expr.get(), context),\n+      leadlag_default(wexpr.default_expr.get(), context), boundary_start(wexpr.start_expr.get(), context),\n+      boundary_end(wexpr.end_expr.get(), context),\n+      range((state.has_preceding_range || state.has_following_range) ? wexpr.orders[0].expression.get() : nullptr,\n             context, count)\n \n {\n \t// TODO we could evaluate those expressions in parallel\n \n \t//\tCheck for constant aggregate\n-\tif (IsConstantAggregate(wexpr)) {\n-\t\tconstant_aggregate =\n+\tif (IsConstantAggregate()) {\n+\t\taggregate_state =\n \t\t    make_uniq<WindowConstantAggregate>(AggregateObject(wexpr), wexpr.return_type, partition_mask, count);\n+\t} else if (IsCustomAggregate()) {\n+\t\taggregate_state = make_uniq<WindowCustomAggregate>(AggregateObject(wexpr), wexpr.return_type, count);\n+\t} else if (wexpr.aggregate) {\n+\t\t// build a segment tree for frame-adhering aggregates\n+\t\t// see http://www.vldb.org/pvldb/vol8/p1058-leis.pdf\n+\t\taggregate_state = make_uniq<WindowSegmentTree>(AggregateObject(wexpr), wexpr.return_type, count, mode);\n \t}\n \n \t// evaluate the FILTER clause and stuff it into a large mask for compactness and reuse\n \tif (wexpr.filter_expr) {\n-\t\t// \tStart with all invalid and set the ones that pass\n-\t\tfilter_bits.resize(ValidityMask::ValidityMaskSize(count), 0);\n-\t\tfilter_mask.Initialize(filter_bits.data());\n \t\tfilter_executor.AddExpression(*wexpr.filter_expr);\n \t\tfilter_sel.Initialize(STANDARD_VECTOR_SIZE);\n \t}\n@@ -771,6 +897,9 @@ WindowExecutor::WindowExecutor(BoundWindowExpression &wexpr, ClientContext &cont\n \tif (!types.empty()) {\n \t\tpayload_collection.Initialize(Allocator::Get(context), types);\n \t}\n+\n+\tvector<LogicalType> bounds_types(6, LogicalType(LogicalTypeId::UBIGINT));\n+\tbounds.Initialize(Allocator::Get(context), bounds_types);\n }\n \n void WindowExecutor::Sink(DataChunk &input_chunk, const idx_t input_idx, const idx_t total_count) {\n@@ -800,17 +929,14 @@ void WindowExecutor::Sink(DataChunk &input_chunk, const idx_t input_idx, const i\n \tif (wexpr.filter_expr) {\n \t\tfiltering = &filter_sel;\n \t\tfiltered = filter_executor.SelectExpression(input_chunk, filter_sel);\n-\t\tfor (idx_t f = 0; f < filtered; ++f) {\n-\t\t\tfilter_mask.SetValid(input_idx + filter_sel[f]);\n-\t\t}\n \t}\n \n \tif (!wexpr.children.empty()) {\n \t\tpayload_chunk.Reset();\n \t\tpayload_executor.Execute(input_chunk, payload_chunk);\n \t\tpayload_chunk.Verify();\n-\t\tif (constant_aggregate) {\n-\t\t\tconstant_aggregate->Sink(payload_chunk, filtering, filtered);\n+\t\tif (aggregate_state) {\n+\t\t\taggregate_state->Sink(payload_chunk, filtering, filtered);\n \t\t} else {\n \t\t\tpayload_collection.Append(payload_chunk, true);\n \t\t}\n@@ -840,19 +966,18 @@ void WindowExecutor::Sink(DataChunk &input_chunk, const idx_t input_idx, const i\n \t\t\t\t}\n \t\t\t}\n \t\t}\n+\t} else if (aggregate_state) {\n+\t\t//\tZero-argument aggregate (e.g., COUNT(*)\n+\t\tpayload_chunk.SetCardinality(input_chunk);\n+\t\taggregate_state->Sink(payload_chunk, filtering, filtered);\n \t}\n \n \trange.Append(input_chunk);\n }\n \n-void WindowExecutor::Finalize(WindowAggregationMode mode) {\n-\t// build a segment tree for frame-adhering aggregates\n-\t// see http://www.vldb.org/pvldb/vol8/p1058-leis.pdf\n-\tif (constant_aggregate) {\n-\t\tconstant_aggregate->Finalize();\n-\t} else if (wexpr.aggregate) {\n-\t\tsegment_tree = make_uniq<WindowSegmentTree>(AggregateObject(wexpr), wexpr.return_type, &payload_collection,\n-\t\t                                            filter_mask, mode);\n+void WindowExecutor::Finalize() {\n+\tif (aggregate_state) {\n+\t\taggregate_state->Finalize();\n \t}\n }\n \n@@ -865,188 +990,275 @@ void WindowExecutor::Evaluate(idx_t row_idx, DataChunk &input_chunk, Vector &res\n \tleadlag_offset.Execute(input_chunk);\n \tleadlag_default.Execute(input_chunk);\n \n-\t// this is the main loop, go through all sorted rows and compute window function result\n-\tfor (idx_t output_offset = 0; output_offset < input_chunk.size(); ++output_offset, ++row_idx) {\n-\t\t// special case, OVER (), aggregate over everything\n-\t\tbounds.Update(row_idx, range, output_offset, boundary_start, boundary_end, partition_mask, order_mask);\n-\t\tif (WindowNeedsRank(wexpr)) {\n-\t\t\tif (!bounds.is_same_partition || row_idx == 0) { // special case for first row, need to init\n-\t\t\t\tdense_rank = 1;\n-\t\t\t\trank = 1;\n-\t\t\t\trank_equal = 0;\n-\t\t\t} else if (!bounds.is_peer) {\n-\t\t\t\tdense_rank++;\n-\t\t\t\trank += rank_equal;\n-\t\t\t\trank_equal = 0;\n-\t\t\t}\n-\t\t\trank_equal++;\n-\t\t}\n+\tconst auto count = input_chunk.size();\n+\tbounds.Reset();\n+\tstate.Bounds(bounds, row_idx, range, input_chunk.size(), boundary_start, boundary_end, partition_mask, order_mask);\n \n-\t\t// if no values are read for window, result is NULL\n-\t\tif (bounds.window_start >= bounds.window_end) {\n-\t\t\tFlatVector::SetNull(result, output_offset, true);\n-\t\t\tcontinue;\n-\t\t}\n+\tswitch (wexpr.type) {\n+\tcase ExpressionType::WINDOW_AGGREGATE:\n+\t\tAggregate(bounds, result, count, row_idx);\n+\t\tbreak;\n+\tcase ExpressionType::WINDOW_ROW_NUMBER:\n+\t\tRowNumber(bounds, result, count, row_idx);\n+\t\tbreak;\n+\tcase ExpressionType::WINDOW_RANK_DENSE:\n+\t\tDenseRank(bounds, result, count, row_idx);\n+\t\tbreak;\n+\tcase ExpressionType::WINDOW_RANK:\n+\t\tRank(bounds, result, count, row_idx);\n+\t\tbreak;\n+\tcase ExpressionType::WINDOW_PERCENT_RANK:\n+\t\tPercentRank(bounds, result, count, row_idx);\n+\t\tbreak;\n+\tcase ExpressionType::WINDOW_CUME_DIST:\n+\t\tCumeDist(bounds, result, count, row_idx);\n+\t\tbreak;\n+\tcase ExpressionType::WINDOW_NTILE:\n+\t\tNtile(bounds, result, count, row_idx);\n+\t\tbreak;\n+\tcase ExpressionType::WINDOW_LEAD:\n+\tcase ExpressionType::WINDOW_LAG:\n+\t\tLeadLag(bounds, result, count, row_idx);\n+\t\tbreak;\n+\tcase ExpressionType::WINDOW_FIRST_VALUE:\n+\t\tFirstValue(bounds, result, count, row_idx);\n+\t\tbreak;\n+\tcase ExpressionType::WINDOW_LAST_VALUE:\n+\t\tLastValue(bounds, result, count, row_idx);\n+\t\tbreak;\n+\tcase ExpressionType::WINDOW_NTH_VALUE:\n+\t\tNthValue(bounds, result, count, row_idx);\n+\t\tbreak;\n+\tdefault:\n+\t\tthrow InternalException(\"Window aggregate type %s\", ExpressionTypeToString(wexpr.type));\n+\t}\n \n-\t\tswitch (wexpr.type) {\n-\t\tcase ExpressionType::WINDOW_AGGREGATE: {\n-\t\t\tif (constant_aggregate) {\n-\t\t\t\tconstant_aggregate->Compute(result, output_offset, bounds.window_start, bounds.window_end);\n+\tresult.Verify(count);\n+}\n+\n+void WindowExecutor::NextRank(idx_t partition_begin, idx_t peer_begin, idx_t row_idx) {\n+\tif (partition_begin == row_idx) {\n+\t\tdense_rank = 1;\n+\t\trank = 1;\n+\t\trank_equal = 0;\n+\t} else if (peer_begin == row_idx) {\n+\t\tdense_rank++;\n+\t\trank += rank_equal;\n+\t\trank_equal = 0;\n+\t}\n+\trank_equal++;\n+}\n+\n+void WindowExecutor::Aggregate(DataChunk &bounds, Vector &result, idx_t count, idx_t row_idx) {\n+\tD_ASSERT(aggregate_state);\n+\tauto window_begin = FlatVector::GetData<const idx_t>(bounds.data[WINDOW_BEGIN]);\n+\tauto window_end = FlatVector::GetData<const idx_t>(bounds.data[WINDOW_END]);\n+\taggregate_state->Evaluate(window_begin, window_end, result, count);\n+}\n+\n+void WindowExecutor::RowNumber(DataChunk &bounds, Vector &result, idx_t count, idx_t row_idx) {\n+\tauto partition_begin = FlatVector::GetData<const idx_t>(bounds.data[PARTITION_BEGIN]);\n+\tauto rdata = FlatVector::GetData<int64_t>(result);\n+\tfor (idx_t i = 0; i < count; ++i, ++row_idx) {\n+\t\trdata[i] = row_idx - partition_begin[i] + 1;\n+\t}\n+}\n+\n+void WindowExecutor::Rank(DataChunk &bounds, Vector &result, idx_t count, idx_t row_idx) {\n+\tauto partition_begin = FlatVector::GetData<const idx_t>(bounds.data[PARTITION_BEGIN]);\n+\tauto peer_begin = FlatVector::GetData<const idx_t>(bounds.data[PEER_BEGIN]);\n+\tauto rdata = FlatVector::GetData<int64_t>(result);\n+\tfor (idx_t i = 0; i < count; ++i, ++row_idx) {\n+\t\tNextRank(partition_begin[i], peer_begin[i], row_idx);\n+\t\trdata[i] = rank;\n+\t}\n+}\n+\n+void WindowExecutor::DenseRank(DataChunk &bounds, Vector &result, idx_t count, idx_t row_idx) {\n+\tauto partition_begin = FlatVector::GetData<const idx_t>(bounds.data[PARTITION_BEGIN]);\n+\tauto peer_begin = FlatVector::GetData<const idx_t>(bounds.data[PEER_BEGIN]);\n+\tauto rdata = FlatVector::GetData<int64_t>(result);\n+\tfor (idx_t i = 0; i < count; ++i, ++row_idx) {\n+\t\tNextRank(partition_begin[i], peer_begin[i], row_idx);\n+\t\trdata[i] = dense_rank;\n+\t}\n+}\n+\n+void WindowExecutor::PercentRank(DataChunk &bounds, Vector &result, idx_t count, idx_t row_idx) {\n+\tauto partition_begin = FlatVector::GetData<const idx_t>(bounds.data[PARTITION_BEGIN]);\n+\tauto partition_end = FlatVector::GetData<const idx_t>(bounds.data[PARTITION_END]);\n+\tauto peer_begin = FlatVector::GetData<const idx_t>(bounds.data[PEER_BEGIN]);\n+\tauto rdata = FlatVector::GetData<double>(result);\n+\tfor (idx_t i = 0; i < count; ++i, ++row_idx) {\n+\t\tNextRank(partition_begin[i], peer_begin[i], row_idx);\n+\t\tint64_t denom = partition_end[i] - partition_begin[i] - 1;\n+\t\tdouble percent_rank = denom > 0 ? ((double)rank - 1) / denom : 0;\n+\t\trdata[i] = percent_rank;\n+\t}\n+}\n+\n+void WindowExecutor::CumeDist(DataChunk &bounds, Vector &result, idx_t count, idx_t row_idx) {\n+\tauto partition_begin = FlatVector::GetData<const idx_t>(bounds.data[PARTITION_BEGIN]);\n+\tauto partition_end = FlatVector::GetData<const idx_t>(bounds.data[PARTITION_END]);\n+\tauto peer_begin = FlatVector::GetData<const idx_t>(bounds.data[PEER_BEGIN]);\n+\tauto peer_end = FlatVector::GetData<const idx_t>(bounds.data[PEER_END]);\n+\tauto rdata = FlatVector::GetData<double>(result);\n+\tfor (idx_t i = 0; i < count; ++i, ++row_idx) {\n+\t\tNextRank(partition_begin[i], peer_begin[i], row_idx);\n+\t\tint64_t denom = partition_end[i] - partition_begin[i];\n+\t\tdouble cume_dist = denom > 0 ? ((double)(peer_end[i] - partition_begin[i])) / denom : 0;\n+\t\trdata[i] = cume_dist;\n+\t}\n+}\n+\n+void WindowExecutor::Ntile(DataChunk &bounds, Vector &result, idx_t count, idx_t row_idx) {\n+\tD_ASSERT(payload_collection.ColumnCount() == 1);\n+\tauto partition_begin = FlatVector::GetData<const idx_t>(bounds.data[PARTITION_BEGIN]);\n+\tauto partition_end = FlatVector::GetData<const idx_t>(bounds.data[PARTITION_END]);\n+\tauto rdata = FlatVector::GetData<int64_t>(result);\n+\tfor (idx_t i = 0; i < count; ++i, ++row_idx) {\n+\t\tif (CellIsNull(payload_collection, 0, row_idx)) {\n+\t\t\tFlatVector::SetNull(result, i, true);\n+\t\t} else {\n+\t\t\tauto n_param = GetCell<int64_t>(payload_collection, 0, row_idx);\n+\t\t\tif (n_param < 1) {\n+\t\t\t\tthrow InvalidInputException(\"Argument for ntile must be greater than zero\");\n+\t\t\t}\n+\t\t\t// With thanks from SQLite's ntileValueFunc()\n+\t\t\tint64_t n_total = partition_end[i] - partition_begin[i];\n+\t\t\tif (n_param > n_total) {\n+\t\t\t\t// more groups allowed than we have values\n+\t\t\t\t// map every entry to a unique group\n+\t\t\t\tn_param = n_total;\n+\t\t\t}\n+\t\t\tint64_t n_size = (n_total / n_param);\n+\t\t\t// find the row idx within the group\n+\t\t\tD_ASSERT(row_idx >= partition_begin[i]);\n+\t\t\tint64_t adjusted_row_idx = row_idx - partition_begin[i];\n+\t\t\t// now compute the ntile\n+\t\t\tint64_t n_large = n_total - n_param * n_size;\n+\t\t\tint64_t i_small = n_large * (n_size + 1);\n+\t\t\tint64_t result_ntile;\n+\n+\t\t\tD_ASSERT((n_large * (n_size + 1) + (n_param - n_large) * n_size) == n_total);\n+\n+\t\t\tif (adjusted_row_idx < i_small) {\n+\t\t\t\tresult_ntile = 1 + adjusted_row_idx / (n_size + 1);\n \t\t\t} else {\n-\t\t\t\tsegment_tree->Compute(result, output_offset, bounds.window_start, bounds.window_end);\n+\t\t\t\tresult_ntile = 1 + n_large + (adjusted_row_idx - i_small) / n_size;\n \t\t\t}\n-\t\t\tbreak;\n+\t\t\t// result has to be between [1, NTILE]\n+\t\t\tD_ASSERT(result_ntile >= 1 && result_ntile <= n_param);\n+\t\t\trdata[i] = result_ntile;\n \t\t}\n-\t\tcase ExpressionType::WINDOW_ROW_NUMBER: {\n-\t\t\tauto rdata = FlatVector::GetData<int64_t>(result);\n-\t\t\trdata[output_offset] = row_idx - bounds.partition_start + 1;\n-\t\t\tbreak;\n+\t}\n+}\n+\n+void WindowExecutor::LeadLag(DataChunk &bounds, Vector &result, idx_t count, idx_t row_idx) {\n+\tauto partition_begin = FlatVector::GetData<const idx_t>(bounds.data[PARTITION_BEGIN]);\n+\tauto partition_end = FlatVector::GetData<const idx_t>(bounds.data[PARTITION_END]);\n+\tfor (idx_t i = 0; i < count; ++i, ++row_idx) {\n+\t\tint64_t offset = 1;\n+\t\tif (wexpr.offset_expr) {\n+\t\t\toffset = leadlag_offset.GetCell<int64_t>(i);\n \t\t}\n-\t\tcase ExpressionType::WINDOW_RANK_DENSE: {\n-\t\t\tauto rdata = FlatVector::GetData<int64_t>(result);\n-\t\t\trdata[output_offset] = dense_rank;\n-\t\t\tbreak;\n+\t\tint64_t val_idx = (int64_t)row_idx;\n+\t\tif (wexpr.type == ExpressionType::WINDOW_LEAD) {\n+\t\t\tval_idx += offset;\n+\t\t} else {\n+\t\t\tval_idx -= offset;\n \t\t}\n-\t\tcase ExpressionType::WINDOW_RANK: {\n-\t\t\tauto rdata = FlatVector::GetData<int64_t>(result);\n-\t\t\trdata[output_offset] = rank;\n-\t\t\tbreak;\n+\n+\t\tidx_t delta = 0;\n+\t\tif (val_idx < (int64_t)row_idx) {\n+\t\t\t// Count backwards\n+\t\t\tdelta = idx_t(row_idx - val_idx);\n+\t\t\tval_idx = FindPrevStart(ignore_nulls, partition_begin[i], row_idx, delta);\n+\t\t} else if (val_idx > (int64_t)row_idx) {\n+\t\t\tdelta = idx_t(val_idx - row_idx);\n+\t\t\tval_idx = FindNextStart(ignore_nulls, row_idx + 1, partition_end[i], delta);\n \t\t}\n-\t\tcase ExpressionType::WINDOW_PERCENT_RANK: {\n-\t\t\tint64_t denom = (int64_t)bounds.partition_end - bounds.partition_start - 1;\n-\t\t\tdouble percent_rank = denom > 0 ? ((double)rank - 1) / denom : 0;\n-\t\t\tauto rdata = FlatVector::GetData<double>(result);\n-\t\t\trdata[output_offset] = percent_rank;\n-\t\t\tbreak;\n+\t\t// else offset is zero, so don't move.\n+\n+\t\tif (!delta) {\n+\t\t\tCopyCell(payload_collection, 0, val_idx, result, i);\n+\t\t} else if (wexpr.default_expr) {\n+\t\t\tleadlag_default.CopyCell(result, i);\n+\t\t} else {\n+\t\t\tFlatVector::SetNull(result, i, true);\n \t\t}\n-\t\tcase ExpressionType::WINDOW_CUME_DIST: {\n-\t\t\tint64_t denom = (int64_t)bounds.partition_end - bounds.partition_start;\n-\t\t\tdouble cume_dist = denom > 0 ? ((double)(bounds.peer_end - bounds.partition_start)) / denom : 0;\n-\t\t\tauto rdata = FlatVector::GetData<double>(result);\n-\t\t\trdata[output_offset] = cume_dist;\n-\t\t\tbreak;\n+\t}\n+}\n+\n+void WindowExecutor::FirstValue(DataChunk &bounds, Vector &result, idx_t count, idx_t row_idx) {\n+\tauto window_begin = FlatVector::GetData<const idx_t>(bounds.data[WINDOW_BEGIN]);\n+\tauto window_end = FlatVector::GetData<const idx_t>(bounds.data[WINDOW_END]);\n+\tauto &rmask = FlatVector::Validity(result);\n+\tfor (idx_t i = 0; i < count; ++i, ++row_idx) {\n+\t\tif (window_begin[i] >= window_end[i]) {\n+\t\t\trmask.SetInvalid(i);\n+\t\t\tcontinue;\n \t\t}\n-\t\tcase ExpressionType::WINDOW_NTILE: {\n-\t\t\tD_ASSERT(payload_collection.ColumnCount() == 1);\n-\t\t\tif (CellIsNull(payload_collection, 0, row_idx)) {\n-\t\t\t\tFlatVector::SetNull(result, output_offset, true);\n-\t\t\t} else {\n-\t\t\t\tauto n_param = GetCell<int64_t>(payload_collection, 0, row_idx);\n-\t\t\t\tif (n_param < 1) {\n-\t\t\t\t\tthrow InvalidInputException(\"Argument for ntile must be greater than zero\");\n-\t\t\t\t}\n-\t\t\t\t// With thanks from SQLite's ntileValueFunc()\n-\t\t\t\tint64_t n_total = bounds.partition_end - bounds.partition_start;\n-\t\t\t\tif (n_param > n_total) {\n-\t\t\t\t\t// more groups allowed than we have values\n-\t\t\t\t\t// map every entry to a unique group\n-\t\t\t\t\tn_param = n_total;\n-\t\t\t\t}\n-\t\t\t\tint64_t n_size = (n_total / n_param);\n-\t\t\t\t// find the row idx within the group\n-\t\t\t\tD_ASSERT(row_idx >= bounds.partition_start);\n-\t\t\t\tint64_t adjusted_row_idx = row_idx - bounds.partition_start;\n-\t\t\t\t// now compute the ntile\n-\t\t\t\tint64_t n_large = n_total - n_param * n_size;\n-\t\t\t\tint64_t i_small = n_large * (n_size + 1);\n-\t\t\t\tint64_t result_ntile;\n-\n-\t\t\t\tD_ASSERT((n_large * (n_size + 1) + (n_param - n_large) * n_size) == n_total);\n-\n-\t\t\t\tif (adjusted_row_idx < i_small) {\n-\t\t\t\t\tresult_ntile = 1 + adjusted_row_idx / (n_size + 1);\n-\t\t\t\t} else {\n-\t\t\t\t\tresult_ntile = 1 + n_large + (adjusted_row_idx - i_small) / n_size;\n-\t\t\t\t}\n-\t\t\t\t// result has to be between [1, NTILE]\n-\t\t\t\tD_ASSERT(result_ntile >= 1 && result_ntile <= n_param);\n-\t\t\t\tauto rdata = FlatVector::GetData<int64_t>(result);\n-\t\t\t\trdata[output_offset] = result_ntile;\n-\t\t\t}\n-\t\t\tbreak;\n+\t\t//\tSame as NTH_VALUE(..., 1)\n+\t\tidx_t n = 1;\n+\t\tconst auto first_idx = FindNextStart(ignore_nulls, window_begin[i], window_end[i], n);\n+\t\tif (!n) {\n+\t\t\tCopyCell(payload_collection, 0, first_idx, result, i);\n+\t\t} else {\n+\t\t\tFlatVector::SetNull(result, i, true);\n \t\t}\n-\t\tcase ExpressionType::WINDOW_LEAD:\n-\t\tcase ExpressionType::WINDOW_LAG: {\n-\t\t\tint64_t offset = 1;\n-\t\t\tif (wexpr.offset_expr) {\n-\t\t\t\toffset = leadlag_offset.GetCell<int64_t>(output_offset);\n-\t\t\t}\n-\t\t\tint64_t val_idx = (int64_t)row_idx;\n-\t\t\tif (wexpr.type == ExpressionType::WINDOW_LEAD) {\n-\t\t\t\tval_idx += offset;\n-\t\t\t} else {\n-\t\t\t\tval_idx -= offset;\n-\t\t\t}\n-\n-\t\t\tidx_t delta = 0;\n-\t\t\tif (val_idx < (int64_t)row_idx) {\n-\t\t\t\t// Count backwards\n-\t\t\t\tdelta = idx_t(row_idx - val_idx);\n-\t\t\t\tval_idx = FindPrevStart(ignore_nulls, bounds.partition_start, row_idx, delta);\n-\t\t\t} else if (val_idx > (int64_t)row_idx) {\n-\t\t\t\tdelta = idx_t(val_idx - row_idx);\n-\t\t\t\tval_idx = FindNextStart(ignore_nulls, row_idx + 1, bounds.partition_end, delta);\n-\t\t\t}\n-\t\t\t// else offset is zero, so don't move.\n+\t}\n+}\n \n-\t\t\tif (!delta) {\n-\t\t\t\tCopyCell(payload_collection, 0, val_idx, result, output_offset);\n-\t\t\t} else if (wexpr.default_expr) {\n-\t\t\t\tleadlag_default.CopyCell(result, output_offset);\n-\t\t\t} else {\n-\t\t\t\tFlatVector::SetNull(result, output_offset, true);\n-\t\t\t}\n-\t\t\tbreak;\n+void WindowExecutor::LastValue(DataChunk &bounds, Vector &result, idx_t count, idx_t row_idx) {\n+\tauto window_begin = FlatVector::GetData<const idx_t>(bounds.data[WINDOW_BEGIN]);\n+\tauto window_end = FlatVector::GetData<const idx_t>(bounds.data[WINDOW_END]);\n+\tauto &rmask = FlatVector::Validity(result);\n+\tfor (idx_t i = 0; i < count; ++i, ++row_idx) {\n+\t\tif (window_begin[i] >= window_end[i]) {\n+\t\t\trmask.SetInvalid(i);\n+\t\t\tcontinue;\n \t\t}\n-\t\tcase ExpressionType::WINDOW_FIRST_VALUE: {\n-\t\t\t//\tSame as NTH_VALUE(..., 1)\n-\t\t\tidx_t n = 1;\n-\t\t\tconst auto first_idx = FindNextStart(ignore_nulls, bounds.window_start, bounds.window_end, n);\n-\t\t\tif (!n) {\n-\t\t\t\tCopyCell(payload_collection, 0, first_idx, result, output_offset);\n-\t\t\t} else {\n-\t\t\t\tFlatVector::SetNull(result, output_offset, true);\n-\t\t\t}\n-\t\t\tbreak;\n+\t\tidx_t n = 1;\n+\t\tconst auto last_idx = FindPrevStart(ignore_nulls, window_begin[i], window_end[i], n);\n+\t\tif (!n) {\n+\t\t\tCopyCell(payload_collection, 0, last_idx, result, i);\n+\t\t} else {\n+\t\t\tFlatVector::SetNull(result, i, true);\n \t\t}\n-\t\tcase ExpressionType::WINDOW_LAST_VALUE: {\n-\t\t\tidx_t n = 1;\n-\t\t\tconst auto last_idx = FindPrevStart(ignore_nulls, bounds.window_start, bounds.window_end, n);\n-\t\t\tif (!n) {\n-\t\t\t\tCopyCell(payload_collection, 0, last_idx, result, output_offset);\n-\t\t\t} else {\n-\t\t\t\tFlatVector::SetNull(result, output_offset, true);\n-\t\t\t}\n-\t\t\tbreak;\n+\t}\n+}\n+\n+void WindowExecutor::NthValue(DataChunk &bounds, Vector &result, idx_t count, idx_t row_idx) {\n+\tD_ASSERT(payload_collection.ColumnCount() == 2);\n+\n+\tauto window_begin = FlatVector::GetData<const idx_t>(bounds.data[WINDOW_BEGIN]);\n+\tauto window_end = FlatVector::GetData<const idx_t>(bounds.data[WINDOW_END]);\n+\tauto &rmask = FlatVector::Validity(result);\n+\tfor (idx_t i = 0; i < count; ++i, ++row_idx) {\n+\t\tif (window_begin[i] >= window_end[i]) {\n+\t\t\trmask.SetInvalid(i);\n+\t\t\tcontinue;\n \t\t}\n-\t\tcase ExpressionType::WINDOW_NTH_VALUE: {\n-\t\t\tD_ASSERT(payload_collection.ColumnCount() == 2);\n-\t\t\t// Returns value evaluated at the row that is the n'th row of the window frame (counting from 1);\n-\t\t\t// returns NULL if there is no such row.\n-\t\t\tif (CellIsNull(payload_collection, 1, row_idx)) {\n-\t\t\t\tFlatVector::SetNull(result, output_offset, true);\n+\t\t// Returns value evaluated at the row that is the n'th row of the window frame (counting from 1);\n+\t\t// returns NULL if there is no such row.\n+\t\tif (CellIsNull(payload_collection, 1, row_idx)) {\n+\t\t\tFlatVector::SetNull(result, i, true);\n+\t\t} else {\n+\t\t\tauto n_param = GetCell<int64_t>(payload_collection, 1, row_idx);\n+\t\t\tif (n_param < 1) {\n+\t\t\t\tFlatVector::SetNull(result, i, true);\n \t\t\t} else {\n-\t\t\t\tauto n_param = GetCell<int64_t>(payload_collection, 1, row_idx);\n-\t\t\t\tif (n_param < 1) {\n-\t\t\t\t\tFlatVector::SetNull(result, output_offset, true);\n+\t\t\t\tauto n = idx_t(n_param);\n+\t\t\t\tconst auto nth_index = FindNextStart(ignore_nulls, window_begin[i], window_end[i], n);\n+\t\t\t\tif (!n) {\n+\t\t\t\t\tCopyCell(payload_collection, 0, nth_index, result, i);\n \t\t\t\t} else {\n-\t\t\t\t\tauto n = idx_t(n_param);\n-\t\t\t\t\tconst auto nth_index = FindNextStart(ignore_nulls, bounds.window_start, bounds.window_end, n);\n-\t\t\t\t\tif (!n) {\n-\t\t\t\t\t\tCopyCell(payload_collection, 0, nth_index, result, output_offset);\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tFlatVector::SetNull(result, output_offset, true);\n-\t\t\t\t\t}\n+\t\t\t\t\tFlatVector::SetNull(result, i, true);\n \t\t\t\t}\n \t\t\t}\n-\t\t\tbreak;\n-\t\t}\n-\t\tdefault:\n-\t\t\tthrow InternalException(\"Window aggregate type %s\", ExpressionTypeToString(wexpr.type));\n \t\t}\n \t}\n-\n-\tresult.Verify(input_chunk.size());\n }\n \n //===--------------------------------------------------------------------===//\n@@ -1281,7 +1493,7 @@ void WindowLocalSourceState::GeneratePartition(WindowGlobalSinkState &gstate, co\n \tfor (idx_t expr_idx = 0; expr_idx < op.select_list.size(); ++expr_idx) {\n \t\tD_ASSERT(op.select_list[expr_idx]->GetExpressionClass() == ExpressionClass::BOUND_WINDOW);\n \t\tauto &wexpr = op.select_list[expr_idx]->Cast<BoundWindowExpression>();\n-\t\tauto wexec = make_uniq<WindowExecutor>(wexpr, context, partition_mask, count);\n+\t\tauto wexec = make_uniq<WindowExecutor>(wexpr, context, partition_mask, count, gstate.mode);\n \t\twindow_execs.emplace_back(std::move(wexec));\n \t}\n \n@@ -1305,7 +1517,7 @@ void WindowLocalSourceState::GeneratePartition(WindowGlobalSinkState &gstate, co\n \n \t//\tTODO: Parallelization opportunity\n \tfor (auto &wexec : window_execs) {\n-\t\twexec->Finalize(gstate.mode);\n+\t\twexec->Finalize();\n \t}\n \n \t// External scanning assumes all blocks are swizzled.\ndiff --git a/src/execution/operator/helper/physical_batch_collector.cpp b/src/execution/operator/helper/physical_batch_collector.cpp\nindex 083165c18c26..e62f1f4132fb 100644\n--- a/src/execution/operator/helper/physical_batch_collector.cpp\n+++ b/src/execution/operator/helper/physical_batch_collector.cpp\n@@ -1,7 +1,8 @@\n #include \"duckdb/execution/operator/helper/physical_batch_collector.hpp\"\n+\n #include \"duckdb/common/types/batched_data_collection.hpp\"\n-#include \"duckdb/main/materialized_query_result.hpp\"\n #include \"duckdb/main/client_context.hpp\"\n+#include \"duckdb/main/materialized_query_result.hpp\"\n \n namespace duckdb {\n \n@@ -13,7 +14,7 @@ PhysicalBatchCollector::PhysicalBatchCollector(PreparedStatementData &data) : Ph\n //===--------------------------------------------------------------------===//\n class BatchCollectorGlobalState : public GlobalSinkState {\n public:\n-\tBatchCollectorGlobalState(ClientContext &context, const PhysicalBatchCollector &op) : data(op.types) {\n+\tBatchCollectorGlobalState(ClientContext &context, const PhysicalBatchCollector &op) : data(context, op.types) {\n \t}\n \n \tmutex glock;\n@@ -23,7 +24,7 @@ class BatchCollectorGlobalState : public GlobalSinkState {\n \n class BatchCollectorLocalState : public LocalSinkState {\n public:\n-\tBatchCollectorLocalState(ClientContext &context, const PhysicalBatchCollector &op) : data(op.types) {\n+\tBatchCollectorLocalState(ClientContext &context, const PhysicalBatchCollector &op) : data(context, op.types) {\n \t}\n \n \tBatchedDataCollection data;\ndiff --git a/src/execution/operator/helper/physical_limit.cpp b/src/execution/operator/helper/physical_limit.cpp\nindex 05f02c77ffaf..887f4ed65fbc 100644\n--- a/src/execution/operator/helper/physical_limit.cpp\n+++ b/src/execution/operator/helper/physical_limit.cpp\n@@ -1,11 +1,10 @@\n #include \"duckdb/execution/operator/helper/physical_limit.hpp\"\n \n #include \"duckdb/common/algorithm.hpp\"\n-#include \"duckdb/main/config.hpp\"\n-\n-#include \"duckdb/execution/expression_executor.hpp\"\n #include \"duckdb/common/types/batched_data_collection.hpp\"\n+#include \"duckdb/execution/expression_executor.hpp\"\n #include \"duckdb/execution/operator/helper/physical_streaming_limit.hpp\"\n+#include \"duckdb/main/config.hpp\"\n \n namespace duckdb {\n \n@@ -22,7 +21,7 @@ PhysicalLimit::PhysicalLimit(vector<LogicalType> types, idx_t limit, idx_t offse\n //===--------------------------------------------------------------------===//\n class LimitGlobalState : public GlobalSinkState {\n public:\n-\texplicit LimitGlobalState(ClientContext &context, const PhysicalLimit &op) : data(op.types) {\n+\texplicit LimitGlobalState(ClientContext &context, const PhysicalLimit &op) : data(context, op.types, true) {\n \t\tlimit = 0;\n \t\toffset = 0;\n \t}\n@@ -35,7 +34,8 @@ class LimitGlobalState : public GlobalSinkState {\n \n class LimitLocalState : public LocalSinkState {\n public:\n-\texplicit LimitLocalState(ClientContext &context, const PhysicalLimit &op) : current_offset(0), data(op.types) {\n+\texplicit LimitLocalState(ClientContext &context, const PhysicalLimit &op)\n+\t    : current_offset(0), data(context, op.types, true) {\n \t\tthis->limit = op.limit_expression ? DConstants::INVALID_INDEX : op.limit_value;\n \t\tthis->offset = op.offset_expression ? DConstants::INVALID_INDEX : op.offset_value;\n \t}\ndiff --git a/src/execution/operator/join/physical_asof_join.cpp b/src/execution/operator/join/physical_asof_join.cpp\nindex 1664ce946596..84fc7466c37a 100644\n--- a/src/execution/operator/join/physical_asof_join.cpp\n+++ b/src/execution/operator/join/physical_asof_join.cpp\n@@ -13,6 +13,8 @@\n #include \"duckdb/parallel/event.hpp\"\n #include \"duckdb/parallel/thread_context.hpp\"\n \n+#include <thread>\n+\n namespace duckdb {\n \n PhysicalAsOfJoin::PhysicalAsOfJoin(LogicalComparisonJoin &op, unique_ptr<PhysicalOperator> left,\n@@ -67,21 +69,32 @@ PhysicalAsOfJoin::PhysicalAsOfJoin(LogicalComparisonJoin &op, unique_ptr<Physica\n class AsOfGlobalSinkState : public GlobalSinkState {\n public:\n \tAsOfGlobalSinkState(ClientContext &context, const PhysicalAsOfJoin &op)\n-\t    : global_partition(context, op.rhs_partitions, op.rhs_orders, op.children[1]->types, {},\n-\t                       op.estimated_cardinality),\n+\t    : rhs_sink(context, op.rhs_partitions, op.rhs_orders, op.children[1]->types, {}, op.estimated_cardinality),\n \t      is_outer(IsRightOuterJoin(op.join_type)), has_null(false) {\n \t}\n \n \tidx_t Count() const {\n-\t\treturn global_partition.count;\n+\t\treturn rhs_sink.count;\n+\t}\n+\n+\tPartitionLocalSinkState *RegisterBuffer(ClientContext &context) {\n+\t\tlock_guard<mutex> guard(lock);\n+\t\tlhs_buffers.emplace_back(make_uniq<PartitionLocalSinkState>(context, *lhs_sink));\n+\t\treturn lhs_buffers.back().get();\n \t}\n \n-\tPartitionGlobalSinkState global_partition;\n+\tPartitionGlobalSinkState rhs_sink;\n \n \t//\tOne per partition\n \tconst bool is_outer;\n \tvector<OuterJoinMarker> right_outers;\n \tbool has_null;\n+\n+\t//\tLeft side buffering\n+\tunique_ptr<PartitionGlobalSinkState> lhs_sink;\n+\n+\tmutex lock;\n+\tvector<unique_ptr<PartitionLocalSinkState>> lhs_buffers;\n };\n \n class AsOfLocalSinkState : public LocalSinkState {\n@@ -108,7 +121,7 @@ unique_ptr<GlobalSinkState> PhysicalAsOfJoin::GetGlobalSinkState(ClientContext &\n unique_ptr<LocalSinkState> PhysicalAsOfJoin::GetLocalSinkState(ExecutionContext &context) const {\n \t// We only sink the RHS\n \tauto &gsink = sink_state->Cast<AsOfGlobalSinkState>();\n-\treturn make_uniq<AsOfLocalSinkState>(context.client, gsink.global_partition);\n+\treturn make_uniq<AsOfLocalSinkState>(context.client, gsink.rhs_sink);\n }\n \n SinkResultType PhysicalAsOfJoin::Sink(ExecutionContext &context, DataChunk &chunk, OperatorSinkInput &input) const {\n@@ -131,15 +144,21 @@ SinkFinalizeType PhysicalAsOfJoin::Finalize(Pipeline &pipeline, Event &event, Cl\n                                             GlobalSinkState &gstate_p) const {\n \tauto &gstate = gstate_p.Cast<AsOfGlobalSinkState>();\n \n+\t// The data is all in so we can initialise the left partitioning.\n+\tconst vector<unique_ptr<BaseStatistics>> partitions_stats;\n+\tgstate.lhs_sink = make_uniq<PartitionGlobalSinkState>(context, lhs_partitions, lhs_orders, children[0]->types,\n+\t                                                      partitions_stats, 0);\n+\tgstate.lhs_sink->SyncPartitioning(gstate.rhs_sink);\n+\n \t// Find the first group to sort\n-\tauto &groups = gstate.global_partition.grouping_data->GetPartitions();\n+\tauto &groups = gstate.rhs_sink.grouping_data->GetPartitions();\n \tif (groups.empty() && EmptyResultIfRHSIsEmpty()) {\n \t\t// Empty input!\n \t\treturn SinkFinalizeType::NO_OUTPUT_POSSIBLE;\n \t}\n \n \t// Schedule all the sorts for maximum thread utilisation\n-\tauto new_event = make_shared<PartitionMergeEvent>(gstate.global_partition, pipeline);\n+\tauto new_event = make_shared<PartitionMergeEvent>(gstate.rhs_sink, pipeline);\n \tevent.InsertEvent(std::move(new_event));\n \n \treturn SinkFinalizeType::READY;\n@@ -152,10 +171,10 @@ class AsOfGlobalState : public GlobalOperatorState {\n public:\n \texplicit AsOfGlobalState(AsOfGlobalSinkState &gsink) {\n \t\t// for FULL/RIGHT OUTER JOIN, initialize right_outers to false for every tuple\n-\t\tauto &global_partition = gsink.global_partition;\n+\t\tauto &rhs_partition = gsink.rhs_sink;\n \t\tauto &right_outers = gsink.right_outers;\n-\t\tright_outers.reserve(global_partition.hash_groups.size());\n-\t\tfor (const auto &hash_group : global_partition.hash_groups) {\n+\t\tright_outers.reserve(rhs_partition.hash_groups.size());\n+\t\tfor (const auto &hash_group : rhs_partition.hash_groups) {\n \t\t\tright_outers.emplace_back(OuterJoinMarker(gsink.is_outer));\n \t\t\tright_outers.back().Initialize(hash_group->count);\n \t\t}\n@@ -169,79 +188,47 @@ unique_ptr<GlobalOperatorState> PhysicalAsOfJoin::GetGlobalOperatorState(ClientC\n \n class AsOfLocalState : public CachingOperatorState {\n public:\n-\tusing Orders = vector<BoundOrderByNode>;\n-\tusing Match = std::pair<hash_t, idx_t>;\n+\tAsOfLocalState(ClientContext &context, const PhysicalAsOfJoin &op)\n+\t    : context(context), allocator(Allocator::Get(context)), op(op), lhs_executor(context),\n+\t      left_outer(IsLeftOuterJoin(op.join_type)), fetch_next_left(true) {\n+\t\tlhs_keys.Initialize(allocator, op.join_key_types);\n+\t\tfor (const auto &cond : op.conditions) {\n+\t\t\tlhs_executor.AddExpression(*cond.left);\n+\t\t}\n \n-\tAsOfLocalState(ClientContext &context, const PhysicalAsOfJoin &op, bool force_external);\n+\t\tlhs_payload.Initialize(allocator, op.children[0]->types);\n+\t\tlhs_sel.Initialize();\n+\t\tleft_outer.Initialize(STANDARD_VECTOR_SIZE);\n \n-public:\n-\tvoid ResolveJoin(DataChunk &input, bool *found_matches, Match *matches = nullptr);\n+\t\tauto &gsink = op.sink_state->Cast<AsOfGlobalSinkState>();\n+\t\tlhs_partition_sink = gsink.RegisterBuffer(context);\n+\t}\n \n-\tvoid ResolveJoinKeys(DataChunk &input);\n+\tbool Sink(DataChunk &input);\n+\tOperatorResultType ExecuteInternal(ExecutionContext &context, DataChunk &input, DataChunk &chunk);\n \n \tClientContext &context;\n \tAllocator &allocator;\n \tconst PhysicalAsOfJoin &op;\n-\tBufferManager &buffer_manager;\n-\tconst bool force_external;\n-\tOrders lhs_orders;\n \n-\t//\tLHS sorting\n \tExpressionExecutor lhs_executor;\n \tDataChunk lhs_keys;\n \tValidityMask lhs_valid_mask;\n \tSelectionVector lhs_sel;\n-\tidx_t lhs_valid;\n-\tRowLayout lhs_layout;\n-\tunique_ptr<GlobalSortState> lhs_global_state;\n-\tDataChunk lhs_sorted;\n-\n-\t// LHS binning\n-\tVector hash_vector;\n-\tVector bin_vector;\n+\tDataChunk lhs_payload;\n \n-\t//\tOutput\n-\tidx_t lhs_match_count;\n-\tSelectionVector lhs_matched;\n \tOuterJoinMarker left_outer;\n \tbool fetch_next_left;\n-\tDataChunk group_payload;\n-\tDataChunk rhs_payload;\n-};\n-\n-AsOfLocalState::AsOfLocalState(ClientContext &context, const PhysicalAsOfJoin &op, bool force_external)\n-    : context(context), allocator(Allocator::Get(context)), op(op),\n-      buffer_manager(BufferManager::GetBufferManager(context)), force_external(force_external), lhs_executor(context),\n-      hash_vector(LogicalType::HASH), bin_vector(LogicalType::HASH), left_outer(IsLeftOuterJoin(op.join_type)),\n-      fetch_next_left(true) {\n-\tvector<unique_ptr<BaseStatistics>> partition_stats;\n-\tOrders partitions; // Not used.\n-\tPartitionGlobalSinkState::GenerateOrderings(partitions, lhs_orders, op.lhs_partitions, op.lhs_orders,\n-\t                                            partition_stats);\n \n-\t//\tWe sort the row numbers of the incoming block, not the rows\n-\tlhs_layout.Initialize({LogicalType::UINTEGER});\n-\tlhs_sorted.Initialize(allocator, lhs_layout.GetTypes());\n-\n-\tlhs_keys.Initialize(allocator, op.join_key_types);\n-\tfor (const auto &cond : op.conditions) {\n-\t\tlhs_executor.AddExpression(*cond.left);\n-\t}\n-\n-\tgroup_payload.Initialize(allocator, op.children[1]->types);\n-\trhs_payload.Initialize(allocator, op.children[1]->types);\n-\n-\tlhs_matched.Initialize();\n-\tlhs_sel.Initialize();\n-\tleft_outer.Initialize(STANDARD_VECTOR_SIZE);\n-}\n+\toptional_ptr<PartitionLocalSinkState> lhs_partition_sink;\n+};\n \n-void AsOfLocalState::ResolveJoinKeys(DataChunk &input) {\n+bool AsOfLocalState::Sink(DataChunk &input) {\n \t//\tCompute the join keys\n \tlhs_keys.Reset();\n \tlhs_executor.Execute(input, lhs_keys);\n \n-\t//\tExtract the NULLs\n+\t//\tCombine the NULLs\n \tconst auto count = input.size();\n \tlhs_valid_mask.Reset();\n \tfor (auto col_idx : op.null_sensitive) {\n@@ -251,17 +238,19 @@ void AsOfLocalState::ResolveJoinKeys(DataChunk &input) {\n \t\tlhs_valid_mask.Combine(unified.validity, count);\n \t}\n \n-\t//\tConvert the mask to a selection vector.\n-\t//\tWe need this anyway for sorting\n-\tlhs_valid = 0;\n+\t//\tConvert the mask to a selection vector\n+\t//\tand mark all the rows that cannot match for early return.\n+\tidx_t lhs_valid = 0;\n \tconst auto entry_count = lhs_valid_mask.EntryCount(count);\n \tidx_t base_idx = 0;\n+\tleft_outer.Reset();\n \tfor (idx_t entry_idx = 0; entry_idx < entry_count;) {\n \t\tconst auto validity_entry = lhs_valid_mask.GetValidityEntry(entry_idx++);\n \t\tconst auto next = MinValue<idx_t>(base_idx + ValidityMask::BITS_PER_VALUE, count);\n \t\tif (ValidityMask::AllValid(validity_entry)) {\n \t\t\tfor (; base_idx < next; ++base_idx) {\n \t\t\t\tlhs_sel.set_index(lhs_valid++, base_idx);\n+\t\t\t\tleft_outer.SetMatch(base_idx);\n \t\t\t}\n \t\t} else if (ValidityMask::NoneValid(validity_entry)) {\n \t\t\tbase_idx = next;\n@@ -270,120 +259,219 @@ void AsOfLocalState::ResolveJoinKeys(DataChunk &input) {\n \t\t\tfor (; base_idx < next; ++base_idx) {\n \t\t\t\tif (ValidityMask::RowIsValid(validity_entry, base_idx - start)) {\n \t\t\t\t\tlhs_sel.set_index(lhs_valid++, base_idx);\n+\t\t\t\t\tleft_outer.SetMatch(base_idx);\n \t\t\t\t}\n \t\t\t}\n \t\t}\n \t}\n \n \t//\tSlice the keys to the ones we can match\n-\tif (lhs_valid < count) {\n-\t\tlhs_keys.Slice(lhs_sel, lhs_valid);\n+\tlhs_payload.Reset();\n+\tif (lhs_valid == count) {\n+\t\tlhs_payload.Reference(input);\n+\t\tlhs_payload.SetCardinality(input);\n+\t} else {\n+\t\tlhs_payload.Slice(input, lhs_sel, lhs_valid);\n+\t\tlhs_payload.SetCardinality(lhs_valid);\n+\n+\t\t//\tFlush the ones that can't match\n+\t\tfetch_next_left = false;\n \t}\n \n-\t//\tHash to assign the partitions\n-\tauto &global_partition = op.sink_state->Cast<AsOfGlobalSinkState>().global_partition;\n-\tif (op.lhs_partitions.empty()) {\n-\t\t// Only one hash group\n-\t\tbin_vector.Reference(Value::HASH(0));\n-\t} else {\n-\t\t//\tHash to determine the partitions.\n-\t\tVectorOperations::Hash(lhs_keys.data[0], hash_vector, lhs_sel, lhs_valid);\n-\t\tfor (size_t prt_idx = 1; prt_idx < op.lhs_partitions.size(); ++prt_idx) {\n-\t\t\tVectorOperations::CombineHash(hash_vector, lhs_keys.data[prt_idx], lhs_sel, lhs_valid);\n+\tlhs_partition_sink->Sink(lhs_payload);\n+\n+\treturn false;\n+}\n+\n+OperatorResultType AsOfLocalState::ExecuteInternal(ExecutionContext &context, DataChunk &input, DataChunk &chunk) {\n+\tinput.Verify();\n+\tSink(input);\n+\n+\t//\tIf there were any unmatchable rows, return them now so we can forget about them.\n+\tif (!fetch_next_left) {\n+\t\tfetch_next_left = true;\n+\t\tleft_outer.ConstructLeftJoinResult(input, chunk);\n+\t\tleft_outer.Reset();\n+\t}\n+\n+\t//\tJust keep asking for data and buffering it\n+\treturn OperatorResultType::NEED_MORE_INPUT;\n+}\n+\n+OperatorResultType PhysicalAsOfJoin::ExecuteInternal(ExecutionContext &context, DataChunk &input, DataChunk &chunk,\n+                                                     GlobalOperatorState &gstate, OperatorState &lstate_p) const {\n+\tauto &gsink = sink_state->Cast<AsOfGlobalSinkState>();\n+\tauto &lstate = lstate_p.Cast<AsOfLocalState>();\n+\n+\tif (gsink.rhs_sink.count == 0) {\n+\t\t// empty RHS\n+\t\tif (!EmptyResultIfRHSIsEmpty()) {\n+\t\t\tConstructEmptyJoinResult(join_type, gsink.has_null, input, chunk);\n+\t\t\treturn OperatorResultType::NEED_MORE_INPUT;\n+\t\t} else {\n+\t\t\treturn OperatorResultType::FINISHED;\n \t\t}\n+\t}\n \n-\t\t// Convert hashes to hash groups\n-\t\tconst auto radix_bits = global_partition.grouping_data->GetRadixBits();\n-\t\tRadixPartitioning::HashesToBins(hash_vector, radix_bits, bin_vector, count);\n+\treturn lstate.ExecuteInternal(context, input, chunk);\n+}\n+\n+//===--------------------------------------------------------------------===//\n+// Source\n+//===--------------------------------------------------------------------===//\n+class AsOfProbeBuffer {\n+public:\n+\tusing Orders = vector<BoundOrderByNode>;\n+\n+\tstatic bool IsExternal(ClientContext &context) {\n+\t\treturn ClientConfig::GetConfig(context).force_external;\n+\t}\n+\n+\tAsOfProbeBuffer(ClientContext &context, const PhysicalAsOfJoin &op);\n+\n+public:\n+\tvoid ResolveJoin(bool *found_matches, idx_t *matches = nullptr);\n+\tbool Scanning() const {\n+\t\treturn lhs_scanner.get();\n \t}\n+\tvoid BeginLeftScan(hash_t scan_bin);\n+\tbool NextLeft();\n+\tvoid EndScan();\n+\n+\t// resolve joins that output max N elements (SEMI, ANTI, MARK)\n+\tvoid ResolveSimpleJoin(ExecutionContext &context, DataChunk &chunk);\n+\t// resolve joins that can potentially output N*M elements (INNER, LEFT, FULL)\n+\tvoid ResolveComplexJoin(ExecutionContext &context, DataChunk &chunk);\n+\t//\tChunk may be empty\n+\tvoid GetData(ExecutionContext &context, DataChunk &chunk);\n+\tbool HasMoreData() const {\n+\t\treturn !fetch_next_left || (lhs_scanner && lhs_scanner->Remaining());\n+\t}\n+\n+\tClientContext &context;\n+\tAllocator &allocator;\n+\tconst PhysicalAsOfJoin &op;\n+\tBufferManager &buffer_manager;\n+\tconst bool force_external;\n+\tconst idx_t memory_per_thread;\n+\tOrders lhs_orders;\n+\n+\t//\tLHS scanning\n+\tSelectionVector lhs_sel;\n+\toptional_ptr<PartitionGlobalHashGroup> left_hash;\n+\tOuterJoinMarker left_outer;\n+\tunique_ptr<SBIterator> left_itr;\n+\tunique_ptr<PayloadScanner> lhs_scanner;\n+\tDataChunk lhs_payload;\n+\n+\t//\tRHS scanning\n+\toptional_ptr<PartitionGlobalHashGroup> right_hash;\n+\toptional_ptr<OuterJoinMarker> right_outer;\n+\tunique_ptr<SBIterator> right_itr;\n+\tunique_ptr<PayloadScanner> rhs_scanner;\n+\tDataChunk rhs_payload;\n+\n+\tidx_t lhs_match_count;\n+\tbool fetch_next_left;\n+};\n+\n+AsOfProbeBuffer::AsOfProbeBuffer(ClientContext &context, const PhysicalAsOfJoin &op)\n+    : context(context), allocator(Allocator::Get(context)), op(op),\n+      buffer_manager(BufferManager::GetBufferManager(context)), force_external(IsExternal(context)),\n+      memory_per_thread(op.GetMaxThreadMemory(context)), left_outer(IsLeftOuterJoin(op.join_type)),\n+      fetch_next_left(true) {\n+\tvector<unique_ptr<BaseStatistics>> partition_stats;\n+\tOrders partitions; // Not used.\n+\tPartitionGlobalSinkState::GenerateOrderings(partitions, lhs_orders, op.lhs_partitions, op.lhs_orders,\n+\t                                            partition_stats);\n+\n+\t//\tWe sort the row numbers of the incoming block, not the rows\n+\tlhs_payload.Initialize(allocator, op.children[0]->types);\n+\trhs_payload.Initialize(allocator, op.children[1]->types);\n+\n+\tlhs_sel.Initialize();\n+\tleft_outer.Initialize(STANDARD_VECTOR_SIZE);\n+}\n \n-\t// \tSort the selection vector on the valid keys\n-\tlhs_global_state = make_uniq<GlobalSortState>(buffer_manager, lhs_orders, lhs_layout);\n-\tauto &global_state = *lhs_global_state;\n-\tLocalSortState local_sort;\n-\tlocal_sort.Initialize(*lhs_global_state, buffer_manager);\n+void AsOfProbeBuffer::BeginLeftScan(hash_t scan_bin) {\n+\tauto &gsink = op.sink_state->Cast<AsOfGlobalSinkState>();\n+\tauto &lhs_sink = *gsink.lhs_sink;\n+\tconst auto left_group = lhs_sink.bin_groups[scan_bin];\n+\tif (left_group >= lhs_sink.bin_groups.size()) {\n+\t\treturn;\n+\t}\n \n-\tDataChunk payload_chunk;\n-\tpayload_chunk.InitializeEmpty({LogicalType::UINTEGER});\n-\tFlatVector::SetData(payload_chunk.data[0], data_ptr_cast(lhs_sel.data()));\n-\tpayload_chunk.SetCardinality(lhs_valid);\n-\tlocal_sort.SinkChunk(lhs_keys, payload_chunk);\n+\tleft_hash = lhs_sink.hash_groups[left_group].get();\n+\tauto &left_sort = *(left_hash->global_sort);\n+\tlhs_scanner = make_uniq<PayloadScanner>(left_sort, false);\n+\tleft_itr = make_uniq<SBIterator>(left_sort, ExpressionType::COMPARE_LESSTHANOREQUALTO);\n+\n+\t// We are only probing the corresponding right side bin, which may be empty\n+\t// If they are empty, we leave the iterator as null so we can emit left matches\n+\tauto &rhs_sink = gsink.rhs_sink;\n+\tconst auto right_group = rhs_sink.bin_groups[scan_bin];\n+\tif (right_group < rhs_sink.bin_groups.size()) {\n+\t\tright_hash = rhs_sink.hash_groups[right_group].get();\n+\t\tright_outer = gsink.right_outers.data() + right_group;\n+\t\tauto &right_sort = *(right_hash->global_sort);\n+\t\tright_itr = make_uniq<SBIterator>(right_sort, ExpressionType::COMPARE_LESSTHANOREQUALTO);\n+\t\trhs_scanner = make_uniq<PayloadScanner>(right_sort, false);\n+\t}\n+}\n \n-\t// Set external (can be forced with the PRAGMA)\n-\tglobal_state.external = force_external;\n-\tglobal_state.AddLocalState(local_sort);\n-\tglobal_state.PrepareMergePhase();\n-\twhile (global_state.sorted_blocks.size() > 1) {\n-\t\tMergeSorter merge_sorter(*lhs_global_state, buffer_manager);\n-\t\tmerge_sorter.PerformInMergeRound();\n-\t\tglobal_state.CompleteMergeRound();\n+bool AsOfProbeBuffer::NextLeft() {\n+\tif (!HasMoreData()) {\n+\t\treturn false;\n \t}\n \n-\t// Scan the sorted selection\n-\tD_ASSERT(global_state.sorted_blocks.size() == 1);\n+\t//\tScan the next sorted chunk\n+\tlhs_payload.Reset();\n+\tleft_itr->SetIndex(lhs_scanner->Scanned());\n+\tlhs_scanner->Scan(lhs_payload);\n \n-\tauto scanner = make_uniq<PayloadScanner>(*global_state.sorted_blocks[0]->payload_data, global_state, false);\n-\tlhs_sorted.Reset();\n-\tscanner->Scan(lhs_sorted);\n+\treturn true;\n }\n \n-void AsOfLocalState::ResolveJoin(DataChunk &input, bool *found_match, std::pair<hash_t, idx_t> *matches) {\n-\t//\tSort the input into lhs_payload, radix keys in lhs_global_state\n-\tResolveJoinKeys(input);\n+void AsOfProbeBuffer::EndScan() {\n+\tright_hash = nullptr;\n+\tright_itr.reset();\n+\trhs_scanner.reset();\n+\tright_outer = nullptr;\n \n-\tauto &gsink = op.sink_state->Cast<AsOfGlobalSinkState>();\n-\tauto &global_partition = gsink.global_partition;\n+\tleft_hash = nullptr;\n+\tleft_itr.reset();\n+\tlhs_scanner.reset();\n+}\n \n-\t// The bins are contiguous from sorting, so load them one at a time\n-\t// But they may be constant, so unify.\n-\tUnifiedVectorFormat bin_unified;\n-\tbin_vector.ToUnifiedFormat(lhs_valid, bin_unified);\n-\tconst auto bins = UnifiedVectorFormat::GetData<hash_t>(bin_unified);\n+void AsOfProbeBuffer::ResolveJoin(bool *found_match, idx_t *matches) {\n+\t// If there was no right partition, there are no matches\n+\tlhs_match_count = 0;\n+\tleft_outer.Reset();\n+\tif (!right_itr) {\n+\t\treturn;\n+\t}\n \n-\thash_t prev_bin = global_partition.bin_groups.size();\n-\toptional_ptr<PartitionGlobalHashGroup> hash_group;\n-\toptional_ptr<OuterJoinMarker> right_outer;\n+\tconst auto count = lhs_payload.size();\n+\tconst auto left_base = left_itr->GetIndex();\n \t//\tSearching for right <= left\n-\tSBIterator left(*lhs_global_state, ExpressionType::COMPARE_LESSTHANOREQUALTO);\n-\tunique_ptr<SBIterator> right;\n-\tlhs_match_count = 0;\n-\tconst auto sorted_sel = FlatVector::GetData<sel_t>(lhs_sorted.data[0]);\n-\tfor (idx_t i = 0; i < lhs_valid; ++i) {\n-\t\t//\tidx is the index in the input; i is the index in the sorted keys\n-\t\tconst auto idx = sorted_sel[i];\n-\t\tconst auto curr_bin = bins[bin_unified.sel->get_index(idx)];\n-\t\tif (!hash_group || curr_bin != prev_bin) {\n-\t\t\t//\tGrab the next group\n-\t\t\tprev_bin = curr_bin;\n-\t\t\tconst auto group_idx = global_partition.bin_groups[curr_bin];\n-\t\t\tif (group_idx >= global_partition.hash_groups.size()) {\n-\t\t\t\t//\tNo matching partition\n-\t\t\t\thash_group = nullptr;\n-\t\t\t\tright_outer = nullptr;\n-\t\t\t\tright.reset();\n-\t\t\t\tcontinue;\n-\t\t\t}\n-\t\t\thash_group = global_partition.hash_groups[group_idx].get();\n-\t\t\tright_outer = gsink.right_outers.data() + group_idx;\n-\t\t\tright = make_uniq<SBIterator>(*(hash_group->global_sort), ExpressionType::COMPARE_LESSTHANOREQUALTO);\n-\t\t}\n-\t\tleft.SetIndex(i);\n+\tfor (idx_t i = 0; i < count; ++i) {\n+\t\tleft_itr->SetIndex(left_base + i);\n \n \t\t//\tIf right > left, then there is no match\n-\t\tif (!right->Compare(left)) {\n+\t\tif (!right_itr->Compare(*left_itr)) {\n \t\t\tcontinue;\n \t\t}\n \n \t\t// Exponential search forward for a non-matching value using radix iterators\n \t\t// (We use exponential search to avoid thrashing the block manager on large probes)\n \t\tidx_t bound = 1;\n-\t\tidx_t begin = right->GetIndex();\n-\t\tright->SetIndex(begin + bound);\n-\t\twhile (right->GetIndex() < hash_group->count) {\n-\t\t\tif (right->Compare(left)) {\n+\t\tidx_t begin = right_itr->GetIndex();\n+\t\tright_itr->SetIndex(begin + bound);\n+\t\twhile (right_itr->GetIndex() < right_hash->count) {\n+\t\t\tif (right_itr->Compare(*left_itr)) {\n \t\t\t\t//\tIf right <= left, jump ahead\n \t\t\t\tbound *= 2;\n-\t\t\t\tright->SetIndex(begin + bound);\n+\t\t\t\tright_itr->SetIndex(begin + bound);\n \t\t\t} else {\n \t\t\t\tbreak;\n \t\t\t}\n@@ -392,255 +480,298 @@ void AsOfLocalState::ResolveJoin(DataChunk &input, bool *found_match, std::pair<\n \t\t//\tBinary search for the first non-matching value using radix iterators\n \t\t//\tThe previous value (which we know exists) is the match\n \t\tauto first = begin + bound / 2;\n-\t\tauto last = MinValue<idx_t>(begin + bound, hash_group->count);\n+\t\tauto last = MinValue<idx_t>(begin + bound, right_hash->count);\n \t\twhile (first < last) {\n \t\t\tconst auto mid = first + (last - first) / 2;\n-\t\t\tright->SetIndex(mid);\n-\t\t\tif (right->Compare(left)) {\n+\t\t\tright_itr->SetIndex(mid);\n+\t\t\tif (right_itr->Compare(*left_itr)) {\n \t\t\t\t//\tIf right <= left, new lower bound\n \t\t\t\tfirst = mid + 1;\n \t\t\t} else {\n \t\t\t\tlast = mid;\n \t\t\t}\n \t\t}\n-\t\tright->SetIndex(--first);\n+\t\tright_itr->SetIndex(--first);\n \n \t\t//\tCheck partitions for strict equality\n-\t\tif (!op.lhs_partitions.empty() && hash_group->ComparePartitions(left, *right)) {\n+\t\tif (right_hash->ComparePartitions(*left_itr, *right_itr)) {\n \t\t\tcontinue;\n \t\t}\n \n \t\t// Emit match data\n \t\tright_outer->SetMatch(first);\n-\t\tleft_outer.SetMatch(idx);\n+\t\tleft_outer.SetMatch(i);\n \t\tif (found_match) {\n-\t\t\tfound_match[idx] = true;\n+\t\t\tfound_match[i] = true;\n \t\t}\n \t\tif (matches) {\n-\t\t\tmatches[idx] = Match(curr_bin, first);\n+\t\t\tmatches[i] = first;\n \t\t}\n-\t\tlhs_matched.set_index(lhs_match_count++, idx);\n+\t\tlhs_sel.set_index(lhs_match_count++, i);\n \t}\n }\n \n unique_ptr<OperatorState> PhysicalAsOfJoin::GetOperatorState(ExecutionContext &context) const {\n-\tauto &config = ClientConfig::GetConfig(context.client);\n-\treturn make_uniq<AsOfLocalState>(context.client, *this, config.force_external);\n+\treturn make_uniq<AsOfLocalState>(context.client, *this);\n }\n \n-void PhysicalAsOfJoin::ResolveSimpleJoin(ExecutionContext &context, DataChunk &input, DataChunk &chunk,\n-                                         OperatorState &lstate_p) const {\n-\tauto &lstate = lstate_p.Cast<AsOfLocalState>();\n-\tauto &gsink = sink_state->Cast<AsOfGlobalSinkState>();\n-\n+void AsOfProbeBuffer::ResolveSimpleJoin(ExecutionContext &context, DataChunk &chunk) {\n \t// perform the actual join\n \tbool found_match[STANDARD_VECTOR_SIZE] = {false};\n-\tlstate.ResolveJoin(input, found_match);\n+\tResolveJoin(found_match);\n \n \t// now construct the result based on the join result\n-\tswitch (join_type) {\n-\tcase JoinType::MARK: {\n-\t\tPhysicalJoin::ConstructMarkJoinResult(lstate.lhs_keys, input, chunk, found_match, gsink.has_null);\n-\t\tbreak;\n-\t}\n+\tswitch (op.join_type) {\n \tcase JoinType::SEMI:\n-\t\tPhysicalJoin::ConstructSemiJoinResult(input, chunk, found_match);\n+\t\tPhysicalJoin::ConstructSemiJoinResult(lhs_payload, chunk, found_match);\n \t\tbreak;\n \tcase JoinType::ANTI:\n-\t\tPhysicalJoin::ConstructAntiJoinResult(input, chunk, found_match);\n+\t\tPhysicalJoin::ConstructAntiJoinResult(lhs_payload, chunk, found_match);\n \t\tbreak;\n \tdefault:\n \t\tthrow NotImplementedException(\"Unimplemented join type for AsOf join\");\n \t}\n }\n \n-OperatorResultType PhysicalAsOfJoin::ResolveComplexJoin(ExecutionContext &context, DataChunk &input, DataChunk &chunk,\n-                                                        OperatorState &lstate_p) const {\n-\tauto &lstate = lstate_p.Cast<AsOfLocalState>();\n-\tauto &gsink = sink_state->Cast<AsOfGlobalSinkState>();\n-\n-\tif (!lstate.fetch_next_left) {\n-\t\tlstate.fetch_next_left = true;\n-\t\tif (lstate.left_outer.Enabled()) {\n-\t\t\t// left join: before we move to the next chunk, see if we need to output any vectors that didn't\n-\t\t\t// have a match found\n-\t\t\tlstate.left_outer.ConstructLeftJoinResult(input, chunk);\n-\t\t\tlstate.left_outer.Reset();\n-\t\t}\n-\t\treturn OperatorResultType::NEED_MORE_INPUT;\n-\t}\n-\n+void AsOfProbeBuffer::ResolveComplexJoin(ExecutionContext &context, DataChunk &chunk) {\n \t// perform the actual join\n-\tAsOfLocalState::Match matches[STANDARD_VECTOR_SIZE];\n-\tlstate.ResolveJoin(input, nullptr, matches);\n-\tlstate.group_payload.Reset();\n-\tlstate.rhs_payload.Reset();\n-\n-\tauto &global_partition = gsink.global_partition;\n-\thash_t scan_bin = global_partition.bin_groups.size();\n-\toptional_ptr<PartitionGlobalHashGroup> hash_group;\n-\tunique_ptr<PayloadScanner> scanner;\n-\tfor (idx_t i = 0; i < lstate.lhs_match_count; ++i) {\n-\t\tconst auto idx = lstate.lhs_matched[i];\n-\t\tconst auto match_bin = matches[idx].first;\n-\t\tconst auto match_pos = matches[idx].second;\n-\t\tif (match_bin != scan_bin) {\n-\t\t\t//\tGrab the next group\n-\t\t\tconst auto group_idx = global_partition.bin_groups[match_bin];\n-\t\t\thash_group = global_partition.hash_groups[group_idx].get();\n-\t\t\tscan_bin = match_bin;\n-\t\t\tscanner = make_uniq<PayloadScanner>(*hash_group->global_sort, false);\n-\t\t\tlstate.group_payload.Reset();\n-\t\t}\n+\tidx_t matches[STANDARD_VECTOR_SIZE];\n+\tResolveJoin(nullptr, matches);\n+\n+\tfor (idx_t i = 0; i < lhs_match_count; ++i) {\n+\t\tconst auto idx = lhs_sel[i];\n+\t\tconst auto match_pos = matches[idx];\n \t\t// Skip to the range containing the match\n-\t\twhile (match_pos >= scanner->Scanned()) {\n-\t\t\tlstate.group_payload.Reset();\n-\t\t\tscanner->Scan(lstate.group_payload);\n+\t\twhile (match_pos >= rhs_scanner->Scanned()) {\n+\t\t\trhs_payload.Reset();\n+\t\t\trhs_scanner->Scan(rhs_payload);\n \t\t}\n \t\t// Append the individual values\n \t\t// TODO: Batch the copies\n-\t\tconst auto source_offset = match_pos - (scanner->Scanned() - lstate.group_payload.size());\n-\t\tfor (idx_t col_idx = 0; col_idx < right_projection_map.size(); ++col_idx) {\n-\t\t\tconst auto rhs_idx = right_projection_map[col_idx];\n-\t\t\tauto &source = lstate.group_payload.data[rhs_idx];\n-\t\t\tauto &target = chunk.data[input.ColumnCount() + col_idx];\n+\t\tconst auto source_offset = match_pos - (rhs_scanner->Scanned() - rhs_payload.size());\n+\t\tfor (column_t col_idx = 0; col_idx < op.right_projection_map.size(); ++col_idx) {\n+\t\t\tconst auto rhs_idx = op.right_projection_map[col_idx];\n+\t\t\tauto &source = rhs_payload.data[rhs_idx];\n+\t\t\tauto &target = chunk.data[lhs_payload.ColumnCount() + col_idx];\n \t\t\tVectorOperations::Copy(source, target, source_offset + 1, source_offset, i);\n \t\t}\n \t}\n \n-\t//\tSlice the input into the left side\n-\tchunk.Slice(input, lstate.lhs_matched, lstate.lhs_match_count);\n-\n-\t//\tIf we are doing a left join, come back for the NULLs\n-\tif (lstate.left_outer.Enabled()) {\n-\t\tlstate.fetch_next_left = false;\n-\t\treturn OperatorResultType::HAVE_MORE_OUTPUT;\n+\t//\tSlice the left payload into the result\n+\tfor (column_t i = 0; i < lhs_payload.ColumnCount(); ++i) {\n+\t\tchunk.data[i].Slice(lhs_payload.data[i], lhs_sel, lhs_match_count);\n \t}\n+\tchunk.SetCardinality(lhs_match_count);\n \n-\treturn OperatorResultType::NEED_MORE_INPUT;\n+\t//\tIf we are doing a left join, come back for the NULLs\n+\tfetch_next_left = !left_outer.Enabled();\n }\n \n-OperatorResultType PhysicalAsOfJoin::ExecuteInternal(ExecutionContext &context, DataChunk &input, DataChunk &chunk,\n-                                                     GlobalOperatorState &gstate, OperatorState &lstate) const {\n-\tauto &gsink = sink_state->Cast<AsOfGlobalSinkState>();\n-\n-\tif (gsink.global_partition.count == 0) {\n-\t\t// empty RHS\n-\t\tif (!EmptyResultIfRHSIsEmpty()) {\n-\t\t\tConstructEmptyJoinResult(join_type, gsink.has_null, input, chunk);\n-\t\t\treturn OperatorResultType::NEED_MORE_INPUT;\n-\t\t} else {\n-\t\t\treturn OperatorResultType::FINISHED;\n+void AsOfProbeBuffer::GetData(ExecutionContext &context, DataChunk &chunk) {\n+\t//\tHandle dangling left join results from current chunk\n+\tif (!fetch_next_left) {\n+\t\tfetch_next_left = true;\n+\t\tif (left_outer.Enabled()) {\n+\t\t\t// left join: before we move to the next chunk, see if we need to output any vectors that didn't\n+\t\t\t// have a match found\n+\t\t\tleft_outer.ConstructLeftJoinResult(lhs_payload, chunk);\n+\t\t\tleft_outer.Reset();\n \t\t}\n+\t\treturn;\n \t}\n \n-\tinput.Verify();\n-\tswitch (join_type) {\n+\t//\tStop if there is no more data\n+\tif (!NextLeft()) {\n+\t\treturn;\n+\t}\n+\n+\tswitch (op.join_type) {\n \tcase JoinType::SEMI:\n \tcase JoinType::ANTI:\n \tcase JoinType::MARK:\n \t\t// simple joins can have max STANDARD_VECTOR_SIZE matches per chunk\n-\t\tResolveSimpleJoin(context, input, chunk, lstate);\n-\t\treturn OperatorResultType::NEED_MORE_INPUT;\n+\t\tResolveSimpleJoin(context, chunk);\n+\t\tbreak;\n \tcase JoinType::LEFT:\n \tcase JoinType::INNER:\n \tcase JoinType::RIGHT:\n \tcase JoinType::OUTER:\n-\t\treturn ResolveComplexJoin(context, input, chunk, lstate);\n+\t\tResolveComplexJoin(context, chunk);\n+\t\tbreak;\n \tdefault:\n \t\tthrow NotImplementedException(\"Unimplemented type for as-of join!\");\n \t}\n }\n \n-//===--------------------------------------------------------------------===//\n-// Source\n-//===--------------------------------------------------------------------===//\n class AsOfGlobalSourceState : public GlobalSourceState {\n public:\n-\texplicit AsOfGlobalSourceState(PartitionGlobalSinkState &gsink_p) : gsink(gsink_p), next_bin(0) {\n+\texplicit AsOfGlobalSourceState(AsOfGlobalSinkState &gsink_p)\n+\t    : gsink(gsink_p), next_combine(0), combined(0), merged(0), mergers(0), next_left(0), flushed(0), next_right(0) {\n \t}\n \n-\tPartitionGlobalSinkState &gsink;\n-\t//! The output read position.\n-\tatomic<idx_t> next_bin;\n-\n-public:\n-\tidx_t MaxThreads() override {\n-\t\t// If there is only one partition, we have to process it on one thread.\n-\t\tif (!gsink.grouping_data) {\n-\t\t\treturn 1;\n+\tPartitionGlobalMergeStates &GetMergeStates() {\n+\t\tlock_guard<mutex> guard(lock);\n+\t\tif (!merge_states) {\n+\t\t\tmerge_states = make_uniq<PartitionGlobalMergeStates>(*gsink.lhs_sink);\n \t\t}\n+\t\treturn *merge_states;\n+\t}\n \n-\t\t// If there is not a lot of data, process serially.\n-\t\tif (gsink.count < STANDARD_ROW_GROUPS_SIZE) {\n-\t\t\treturn 1;\n-\t\t}\n+\tAsOfGlobalSinkState &gsink;\n+\t//! The next buffer to combine\n+\tatomic<size_t> next_combine;\n+\t//! The number of combined buffers\n+\tatomic<size_t> combined;\n+\t//! The number of combined buffers\n+\tatomic<size_t> merged;\n+\t//! The number of combined buffers\n+\tatomic<size_t> mergers;\n+\t//! The next buffer to flush\n+\tatomic<size_t> next_left;\n+\t//! The number of flushed buffers\n+\tatomic<size_t> flushed;\n+\t//! The right outer output read position.\n+\tatomic<idx_t> next_right;\n+\t//! The merge handler\n+\tmutex lock;\n+\tunique_ptr<PartitionGlobalMergeStates> merge_states;\n \n-\t\treturn gsink.hash_groups.size();\n+public:\n+\tidx_t MaxThreads() override {\n+\t\treturn gsink.lhs_buffers.size();\n \t}\n };\n \n unique_ptr<GlobalSourceState> PhysicalAsOfJoin::GetGlobalSourceState(ClientContext &context) const {\n \tauto &gsink = sink_state->Cast<AsOfGlobalSinkState>();\n-\treturn make_uniq<AsOfGlobalSourceState>(gsink.global_partition);\n+\treturn make_uniq<AsOfGlobalSourceState>(gsink);\n }\n \n class AsOfLocalSourceState : public LocalSourceState {\n public:\n \tusing HashGroupPtr = unique_ptr<PartitionGlobalHashGroup>;\n \n-\texplicit AsOfLocalSourceState(AsOfGlobalSinkState &gstate_p);\n+\tAsOfLocalSourceState(AsOfGlobalSourceState &gsource, const PhysicalAsOfJoin &op);\n+\n+\tvoid CombineLeftPartitions();\n+\tvoid MergeLeftPartitions();\n+\n+\tidx_t BeginRightScan(const idx_t hash_bin);\n \n-\tidx_t GeneratePartition(const idx_t hash_bin);\n+\tAsOfGlobalSourceState &gsource;\n \n-\tAsOfGlobalSinkState &gstate;\n+\t//! The left side partition being probed\n+\tAsOfProbeBuffer probe_buffer;\n \n \t//! The read partition\n \tidx_t hash_bin;\n \tHashGroupPtr hash_group;\n-\n \t//! The read cursor\n \tunique_ptr<PayloadScanner> scanner;\n-\t//! Buffer for the inputs\n-\tDataChunk input_chunk;\n \t//! Pointer to the matches\n \tconst bool *found_match;\n };\n \n-AsOfLocalSourceState::AsOfLocalSourceState(AsOfGlobalSinkState &gstate_p) : gstate(gstate_p) {\n-\tinput_chunk.Initialize(gstate.global_partition.allocator, gstate.global_partition.payload_types);\n+AsOfLocalSourceState::AsOfLocalSourceState(AsOfGlobalSourceState &gsource, const PhysicalAsOfJoin &op)\n+    : gsource(gsource), probe_buffer(gsource.gsink.lhs_sink->context, op) {\n+\tgsource.mergers++;\n+}\n+\n+void AsOfLocalSourceState::CombineLeftPartitions() {\n+\tconst auto buffer_count = gsource.gsink.lhs_buffers.size();\n+\twhile (gsource.combined < buffer_count) {\n+\t\tconst auto next_combine = gsource.next_combine++;\n+\t\tif (next_combine < buffer_count) {\n+\t\t\tgsource.gsink.lhs_buffers[next_combine]->Combine();\n+\t\t\t++gsource.combined;\n+\t\t} else {\n+\t\t\tstd::this_thread::yield();\n+\t\t}\n+\t}\n+}\n+\n+void AsOfLocalSourceState::MergeLeftPartitions() {\n+\tPartitionGlobalMergeStates::Callback local_callback;\n+\tPartitionLocalMergeState local_merge;\n+\tgsource.GetMergeStates().ExecuteTask(local_merge, local_callback);\n+\tgsource.merged++;\n+\twhile (gsource.merged < gsource.mergers) {\n+\t\tstd::this_thread::yield();\n+\t}\n }\n \n-idx_t AsOfLocalSourceState::GeneratePartition(const idx_t hash_bin_p) {\n-\t//\tGet rid of any stale data\n+idx_t AsOfLocalSourceState::BeginRightScan(const idx_t hash_bin_p) {\n \thash_bin = hash_bin_p;\n \n-\thash_group = std::move(gstate.global_partition.hash_groups[hash_bin]);\n+\thash_group = std::move(gsource.gsink.rhs_sink.hash_groups[hash_bin]);\n \tscanner = make_uniq<PayloadScanner>(*hash_group->global_sort);\n-\tfound_match = gstate.right_outers[hash_bin].GetMatches();\n+\tfound_match = gsource.gsink.right_outers[hash_bin].GetMatches();\n \n \treturn scanner->Remaining();\n }\n \n unique_ptr<LocalSourceState> PhysicalAsOfJoin::GetLocalSourceState(ExecutionContext &context,\n                                                                    GlobalSourceState &gstate) const {\n-\tauto &gsink = sink_state->Cast<AsOfGlobalSinkState>();\n-\treturn make_uniq<AsOfLocalSourceState>(gsink);\n+\tauto &gsource = gstate.Cast<AsOfGlobalSourceState>();\n+\treturn make_uniq<AsOfLocalSourceState>(gsource, *this);\n }\n \n SourceResultType PhysicalAsOfJoin::GetData(ExecutionContext &context, DataChunk &chunk,\n                                            OperatorSourceInput &input) const {\n-\tD_ASSERT(IsRightOuterJoin(join_type));\n-\n \tauto &gsource = input.global_state.Cast<AsOfGlobalSourceState>();\n \tauto &lsource = input.local_state.Cast<AsOfLocalSourceState>();\n-\tauto &gsink = gsource.gsink;\n+\tauto &rhs_sink = gsource.gsink.rhs_sink;\n+\n+\t//\tStep 1: Combine the partitions\n+\tlsource.CombineLeftPartitions();\n+\n+\t//\tStep 2: Sort on all threads\n+\tlsource.MergeLeftPartitions();\n+\n+\t//\tStep 3: Join the partitions\n+\tauto &lhs_sink = *gsource.gsink.lhs_sink;\n+\tauto &partitions = lhs_sink.grouping_data->GetPartitions();\n+\tconst auto left_bins = partitions.size();\n+\twhile (gsource.flushed < left_bins) {\n+\t\t//\tMake sure we have something to flush\n+\t\tif (!lsource.probe_buffer.Scanning()) {\n+\t\t\tconst auto left_bin = gsource.next_left++;\n+\t\t\tif (left_bin < left_bins) {\n+\t\t\t\t//\tMore to flush\n+\t\t\t\tlsource.probe_buffer.BeginLeftScan(left_bin);\n+\t\t\t} else if (!IsRightOuterJoin(join_type)) {\n+\t\t\t\treturn SourceResultType::FINISHED;\n+\t\t\t} else {\n+\t\t\t\t//\tWait for all threads to finish\n+\t\t\t\t//\tTODO: How to implement a spin wait correctly?\n+\t\t\t\t//\tReturning BLOCKED seems to hang the system.\n+\t\t\t\tstd::this_thread::yield();\n+\t\t\t\tcontinue;\n+\t\t\t}\n+\t\t}\n+\n+\t\tlsource.probe_buffer.GetData(context, chunk);\n+\t\tif (chunk.size()) {\n+\t\t\treturn SourceResultType::HAVE_MORE_OUTPUT;\n+\t\t} else if (lsource.probe_buffer.HasMoreData()) {\n+\t\t\t//\tJoin the next partition\n+\t\t\tcontinue;\n+\t\t} else {\n+\t\t\tlsource.probe_buffer.EndScan();\n+\t\t\tgsource.flushed++;\n+\t\t}\n+\t}\n+\n+\t//\tStep 4: Emit right join matches\n+\tif (!IsRightOuterJoin(join_type)) {\n+\t\treturn SourceResultType::FINISHED;\n+\t}\n \n-\tauto &hash_groups = gsink.hash_groups;\n-\tconst auto bin_count = hash_groups.size();\n+\tauto &hash_groups = rhs_sink.hash_groups;\n+\tconst auto right_groups = hash_groups.size();\n \n \tDataChunk rhs_chunk;\n-\trhs_chunk.Initialize(Allocator::Get(context.client), gsink.payload_types);\n+\trhs_chunk.Initialize(Allocator::Get(context.client), rhs_sink.payload_types);\n \tSelectionVector rsel(STANDARD_VECTOR_SIZE);\n \n \twhile (chunk.size() == 0) {\n@@ -648,17 +779,17 @@ SourceResultType PhysicalAsOfJoin::GetData(ExecutionContext &context, DataChunk\n \t\twhile (!lsource.scanner || !lsource.scanner->Remaining()) {\n \t\t\tlsource.scanner.reset();\n \t\t\tlsource.hash_group.reset();\n-\t\t\tauto hash_bin = gsource.next_bin++;\n-\t\t\tif (hash_bin >= bin_count) {\n+\t\t\tauto hash_bin = gsource.next_right++;\n+\t\t\tif (hash_bin >= right_groups) {\n \t\t\t\treturn SourceResultType::FINISHED;\n \t\t\t}\n \n-\t\t\tfor (; hash_bin < hash_groups.size(); hash_bin = gsource.next_bin++) {\n+\t\t\tfor (; hash_bin < hash_groups.size(); hash_bin = gsource.next_right++) {\n \t\t\t\tif (hash_groups[hash_bin]) {\n \t\t\t\t\tbreak;\n \t\t\t\t}\n \t\t\t}\n-\t\t\tlsource.GeneratePartition(hash_bin);\n+\t\t\tlsource.BeginRightScan(hash_bin);\n \t\t}\n \t\tconst auto rhs_position = lsource.scanner->Scanned();\n \t\tlsource.scanner->Scan(rhs_chunk);\ndiff --git a/src/execution/operator/join/physical_comparison_join.cpp b/src/execution/operator/join/physical_comparison_join.cpp\nindex 8c1176dd9d67..a82b3f9a936a 100644\n--- a/src/execution/operator/join/physical_comparison_join.cpp\n+++ b/src/execution/operator/join/physical_comparison_join.cpp\n@@ -32,7 +32,7 @@ string PhysicalComparisonJoin::ParamsToString() const {\n \t}\n \textra_info += \"\\n[INFOSEPARATOR]\\n\";\n \textra_info += StringUtil::Format(\"EC: %llu\\n\", estimated_props->GetCardinality<idx_t>());\n-\textra_info += StringUtil::Format(\"Cost: %llu\", (idx_t)estimated_props->GetCost());\n+\textra_info += StringUtil::Format(\"Cost: %llu\", estimated_props->GetCost<idx_t>());\n \treturn extra_info;\n }\n \ndiff --git a/src/execution/operator/join/physical_hash_join.cpp b/src/execution/operator/join/physical_hash_join.cpp\nindex 540f5a38c376..08ebb0eb9580 100644\n--- a/src/execution/operator/join/physical_hash_join.cpp\n+++ b/src/execution/operator/join/physical_hash_join.cpp\n@@ -96,7 +96,7 @@ class HashJoinGlobalSinkState : public GlobalSinkState {\n class HashJoinLocalSinkState : public LocalSinkState {\n public:\n \tHashJoinLocalSinkState(const PhysicalHashJoin &op, ClientContext &context) : build_executor(context) {\n-\t\tauto &allocator = Allocator::Get(context);\n+\t\tauto &allocator = BufferAllocator::Get(context);\n \t\tif (!op.right_projection_map.empty()) {\n \t\t\tbuild_chunk.Initialize(allocator, op.build_types);\n \t\t}\n@@ -162,7 +162,7 @@ unique_ptr<JoinHashTable> PhysicalHashJoin::InitializeHashTable(ClientContext &c\n \t\t\tpayload_types.push_back(aggr->return_type);\n \t\t\tinfo.correlated_aggregates.push_back(std::move(aggr));\n \n-\t\t\tauto &allocator = Allocator::Get(context);\n+\t\t\tauto &allocator = BufferAllocator::Get(context);\n \t\t\tinfo.correlated_counts = make_uniq<GroupedAggregateHashTable>(context, allocator, delim_types,\n \t\t\t                                                              payload_types, correlated_aggregates);\n \t\t\tinfo.correlated_types = delim_types;\n@@ -434,7 +434,7 @@ class HashJoinOperatorState : public CachingOperatorState {\n };\n \n unique_ptr<OperatorState> PhysicalHashJoin::GetOperatorState(ExecutionContext &context) const {\n-\tauto &allocator = Allocator::Get(context.client);\n+\tauto &allocator = BufferAllocator::Get(context.client);\n \tauto &sink = sink_state->Cast<HashJoinGlobalSinkState>();\n \tauto state = make_uniq<HashJoinOperatorState>(context.client);\n \tif (sink.perfect_join_executor) {\n@@ -532,7 +532,18 @@ class HashJoinGlobalSourceState : public GlobalSourceState {\n \tbool AssignTask(HashJoinGlobalSinkState &sink, HashJoinLocalSourceState &lstate);\n \n \tidx_t MaxThreads() override {\n-\t\treturn probe_count / ((idx_t)STANDARD_VECTOR_SIZE * parallel_scan_chunk_count);\n+\t\tD_ASSERT(op.sink_state);\n+\t\tauto &gstate = op.sink_state->Cast<HashJoinGlobalSinkState>();\n+\n+\t\tidx_t count;\n+\t\tif (gstate.probe_spill) {\n+\t\t\tcount = probe_count;\n+\t\t} else if (IsRightOuterJoin(op.join_type)) {\n+\t\t\tcount = gstate.hash_table->Count();\n+\t\t} else {\n+\t\t\treturn 0;\n+\t\t}\n+\t\treturn count / ((idx_t)STANDARD_VECTOR_SIZE * parallel_scan_chunk_count);\n \t}\n \n public:\ndiff --git a/src/execution/operator/join/physical_join.cpp b/src/execution/operator/join/physical_join.cpp\nindex f7da96eeb172..5bf8aebcb7ec 100644\n--- a/src/execution/operator/join/physical_join.cpp\n+++ b/src/execution/operator/join/physical_join.cpp\n@@ -60,7 +60,7 @@ void PhysicalJoin::BuildJoinPipelines(Pipeline &current, MetaPipeline &meta_pipe\n \t// Join can become a source operator if it's RIGHT/OUTER, or if the hash join goes out-of-core\n \tbool add_child_pipeline = false;\n \tauto &join_op = op.Cast<PhysicalJoin>();\n-\tif (IsRightOuterJoin(join_op.join_type) || join_op.type == PhysicalOperatorType::HASH_JOIN) {\n+\tif (join_op.IsSource()) {\n \t\tadd_child_pipeline = true;\n \t}\n \ndiff --git a/src/execution/operator/join/physical_piecewise_merge_join.cpp b/src/execution/operator/join/physical_piecewise_merge_join.cpp\nindex abfcfc66b451..2d8a0cc9f0a1 100644\n--- a/src/execution/operator/join/physical_piecewise_merge_join.cpp\n+++ b/src/execution/operator/join/physical_piecewise_merge_join.cpp\n@@ -208,6 +208,7 @@ class PiecewiseMergeJoinState : public CachingOperatorState {\n \tidx_t right_position;\n \tidx_t right_chunk_index;\n \tidx_t right_base;\n+\tidx_t prev_left_index;\n \n \t// Secondary predicate shared data\n \tSelectionVector sel;\n@@ -431,7 +432,8 @@ void PhysicalPiecewiseMergeJoin::ResolveSimpleJoin(ExecutionContext &context, Da\n \t}\n }\n \n-static idx_t MergeJoinComplexBlocks(BlockMergeInfo &l, BlockMergeInfo &r, const ExpressionType comparison) {\n+static idx_t MergeJoinComplexBlocks(BlockMergeInfo &l, BlockMergeInfo &r, const ExpressionType comparison,\n+                                    idx_t &prev_left_index) {\n \tconst auto cmp = MergeJoinComparisonValue(comparison);\n \n \t// The sort parameters should all be the same\n@@ -465,6 +467,20 @@ static idx_t MergeJoinComplexBlocks(BlockMergeInfo &l, BlockMergeInfo &r, const\n \n \tidx_t result_count = 0;\n \twhile (true) {\n+\t\tif (l.entry_idx < prev_left_index) {\n+\t\t\t// left side smaller: found match\n+\t\t\tl.result.set_index(result_count, sel_t(l.entry_idx));\n+\t\t\tr.result.set_index(result_count, sel_t(r.entry_idx));\n+\t\t\tresult_count++;\n+\t\t\t// move left side forward\n+\t\t\tl.entry_idx++;\n+\t\t\tl_ptr += entry_size;\n+\t\t\tif (result_count == STANDARD_VECTOR_SIZE) {\n+\t\t\t\t// out of space!\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tcontinue;\n+\t\t}\n \t\tif (l.entry_idx < l.not_null) {\n \t\t\tint comp_res;\n \t\t\tif (all_constant) {\n@@ -474,7 +490,6 @@ static idx_t MergeJoinComplexBlocks(BlockMergeInfo &l, BlockMergeInfo &r, const\n \t\t\t\trread.entry_idx = r.entry_idx;\n \t\t\t\tcomp_res = Comparators::CompareTuple(lread, rread, l_ptr, r_ptr, l.state.sort_layout, external);\n \t\t\t}\n-\n \t\t\tif (comp_res <= cmp) {\n \t\t\t\t// left side smaller: found match\n \t\t\t\tl.result.set_index(result_count, sel_t(l.entry_idx));\n@@ -490,6 +505,8 @@ static idx_t MergeJoinComplexBlocks(BlockMergeInfo &l, BlockMergeInfo &r, const\n \t\t\t\tcontinue;\n \t\t\t}\n \t\t}\n+\n+\t\tprev_left_index = l.entry_idx;\n \t\t// right side smaller or equal, or left side exhausted: move\n \t\t// right pointer forward reset left side to start\n \t\tr.entry_idx++;\n@@ -521,6 +538,7 @@ OperatorResultType PhysicalPiecewiseMergeJoin::ResolveComplexJoin(ExecutionConte\n \t\t\tstate.right_chunk_index = 0;\n \t\t\tstate.right_base = 0;\n \t\t\tstate.left_position = 0;\n+\t\t\tstate.prev_left_index = 0;\n \t\t\tstate.right_position = 0;\n \t\t\tstate.first_fetch = false;\n \t\t\tstate.finished = false;\n@@ -547,7 +565,8 @@ OperatorResultType PhysicalPiecewiseMergeJoin::ResolveComplexJoin(ExecutionConte\n \t\tBlockMergeInfo right_info(gstate.table->global_sort_state, state.right_chunk_index, state.right_position,\n \t\t                          rhs_not_null);\n \n-\t\tidx_t result_count = MergeJoinComplexBlocks(left_info, right_info, conditions[0].comparison);\n+\t\tidx_t result_count =\n+\t\t    MergeJoinComplexBlocks(left_info, right_info, conditions[0].comparison, state.prev_left_index);\n \t\tif (result_count == 0) {\n \t\t\t// exhausted this chunk on the right side\n \t\t\t// move to the next right chunk\ndiff --git a/src/execution/operator/persistent/CMakeLists.txt b/src/execution/operator/persistent/CMakeLists.txt\nindex d33f348d7ab5..8831da5d9f7a 100644\n--- a/src/execution/operator/persistent/CMakeLists.txt\n+++ b/src/execution/operator/persistent/CMakeLists.txt\n@@ -7,6 +7,7 @@ add_library_unity(\n   csv_buffer.cpp\n   csv_file_handle.cpp\n   csv_reader_options.cpp\n+  csv_rejects_table.cpp\n   physical_fixed_batch_copy.cpp\n   physical_batch_copy_to_file.cpp\n   physical_batch_insert.cpp\ndiff --git a/src/execution/operator/persistent/base_csv_reader.cpp b/src/execution/operator/persistent/base_csv_reader.cpp\nindex 1edd6b497bc8..073e11df5f80 100644\n--- a/src/execution/operator/persistent/base_csv_reader.cpp\n+++ b/src/execution/operator/persistent/base_csv_reader.cpp\n@@ -1,5 +1,4 @@\n #include \"duckdb/execution/operator/persistent/base_csv_reader.hpp\"\n-\n #include \"duckdb/catalog/catalog_entry/table_catalog_entry.hpp\"\n #include \"duckdb/common/file_system.hpp\"\n #include \"duckdb/common/string_util.hpp\"\n@@ -10,6 +9,7 @@\n #include \"duckdb/common/vector_operations/unary_executor.hpp\"\n #include \"duckdb/common/vector_operations/vector_operations.hpp\"\n #include \"duckdb/function/scalar/strftime_format.hpp\"\n+#include \"duckdb/main/appender.hpp\"\n #include \"duckdb/main/database.hpp\"\n #include \"duckdb/parser/column_definition.hpp\"\n #include \"duckdb/storage/data_table.hpp\"\n@@ -18,7 +18,8 @@\n #include \"duckdb/parser/keyword_helper.hpp\"\n #include \"duckdb/main/error_manager.hpp\"\n #include \"duckdb/execution/operator/persistent/parallel_csv_reader.hpp\"\n-\n+#include \"duckdb/execution/operator/persistent/csv_rejects_table.hpp\"\n+#include \"duckdb/main/client_data.hpp\"\n #include <algorithm>\n #include <cctype>\n #include <cstring>\n@@ -448,6 +449,17 @@ bool TryCastFloatingVectorCommaSeparated(BufferedCSVReaderOptions &options, Vect\n \t}\n }\n \n+// Location of erroneous value in the current parse chunk\n+struct ErrorLocation {\n+\tidx_t row_idx;\n+\tidx_t col_idx;\n+\tidx_t row_line;\n+\n+\tErrorLocation(idx_t row_idx, idx_t col_idx, idx_t row_line)\n+\t    : row_idx(row_idx), col_idx(col_idx), row_line(row_line) {\n+\t}\n+};\n+\n bool BaseCSVReader::Flush(DataChunk &insert_chunk, idx_t buffer_idx, bool try_add_line) {\n \tif (parse_chunk.size() == 0) {\n \t\treturn true;\n@@ -506,10 +518,7 @@ bool BaseCSVReader::Flush(DataChunk &insert_chunk, idx_t buffer_idx, bool try_ad\n \t\t\tif (try_add_line) {\n \t\t\t\treturn false;\n \t\t\t}\n-\t\t\tif (options.ignore_errors) {\n-\t\t\t\tconversion_error_ignored = true;\n-\t\t\t\tcontinue;\n-\t\t\t}\n+\n \t\t\tstring col_name = to_string(col_idx);\n \t\t\tif (col_idx < names.size()) {\n \t\t\t\tcol_name = \"\\\"\" + names[col_idx] + \"\\\"\";\n@@ -527,16 +536,18 @@ bool BaseCSVReader::Flush(DataChunk &insert_chunk, idx_t buffer_idx, bool try_ad\n \t\t\t\t}\n \t\t\t}\n \n-\t\t\tidx_t error_line;\n \t\t\t// The line_error must be summed with linenr (All lines emmited from this batch)\n \t\t\t// But subtracted from the parse_chunk\n \t\t\tD_ASSERT(line_error + linenr >= parse_chunk.size());\n \t\t\tline_error += linenr;\n \t\t\tline_error -= parse_chunk.size();\n \n-\t\t\terror_line = GetLineError(line_error, buffer_idx);\n+\t\t\tauto error_line = GetLineError(line_error, buffer_idx);\n+\n+\t\t\tif (options.ignore_errors) {\n+\t\t\t\tconversion_error_ignored = true;\n \n-\t\t\tif (options.auto_detect) {\n+\t\t\t} else if (options.auto_detect) {\n \t\t\t\tthrow InvalidInputException(\"%s in column %s, at line %llu.\\n\\nParser \"\n \t\t\t\t                            \"options:\\n%s.\\n\\nConsider either increasing the sample size \"\n \t\t\t\t                            \"(SAMPLE_SIZE=X [X rows] or SAMPLE_SIZE=-1 [all rows]), \"\n@@ -550,11 +561,19 @@ bool BaseCSVReader::Flush(DataChunk &insert_chunk, idx_t buffer_idx, bool try_ad\n \t}\n \tif (conversion_error_ignored) {\n \t\tD_ASSERT(options.ignore_errors);\n+\n \t\tSelectionVector succesful_rows(parse_chunk.size());\n \t\tidx_t sel_size = 0;\n \n+\t\t// Keep track of failed cells\n+\t\tvector<ErrorLocation> failed_cells;\n+\n \t\tfor (idx_t row_idx = 0; row_idx < parse_chunk.size(); row_idx++) {\n-\t\t\tbool failed = false;\n+\n+\t\t\tauto global_row_idx = row_idx + linenr - parse_chunk.size();\n+\t\t\tauto row_line = GetLineError(global_row_idx, buffer_idx, false);\n+\n+\t\t\tbool row_failed = false;\n \t\t\tfor (idx_t c = 0; c < reader_data.column_ids.size(); c++) {\n \t\t\t\tauto col_idx = reader_data.column_ids[c];\n \t\t\t\tauto result_idx = reader_data.column_mapping[c];\n@@ -564,14 +583,82 @@ bool BaseCSVReader::Flush(DataChunk &insert_chunk, idx_t buffer_idx, bool try_ad\n \n \t\t\t\tbool was_already_null = FlatVector::IsNull(parse_vector, row_idx);\n \t\t\t\tif (!was_already_null && FlatVector::IsNull(result_vector, row_idx)) {\n-\t\t\t\t\tfailed = true;\n-\t\t\t\t\tbreak;\n+\t\t\t\t\trow_failed = true;\n+\t\t\t\t\tfailed_cells.emplace_back(row_idx, col_idx, row_line);\n \t\t\t\t}\n \t\t\t}\n-\t\t\tif (!failed) {\n+\t\t\tif (!row_failed) {\n \t\t\t\tsuccesful_rows.set_index(sel_size++, row_idx);\n \t\t\t}\n \t\t}\n+\n+\t\t// Now do a second pass to produce the reject table entries\n+\t\tif (!failed_cells.empty() && !options.rejects_table_name.empty()) {\n+\t\t\tauto limit = options.rejects_limit;\n+\n+\t\t\tauto rejects = CSVRejectsTable::GetOrCreate(context, options.rejects_table_name);\n+\t\t\tlock_guard<mutex> lock(rejects->write_lock);\n+\n+\t\t\t// short circuit if we already have too many rejects\n+\t\t\tif (limit == 0 || rejects->count < limit) {\n+\t\t\t\tauto &table = rejects->GetTable(context);\n+\t\t\t\tInternalAppender appender(context, table);\n+\t\t\t\tauto file_name = GetFileName();\n+\n+\t\t\t\tfor (auto &cell : failed_cells) {\n+\t\t\t\t\tif (limit != 0 && rejects->count >= limit) {\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\t}\n+\t\t\t\t\trejects->count++;\n+\n+\t\t\t\t\tauto row_idx = cell.row_idx;\n+\t\t\t\t\tauto col_idx = cell.col_idx;\n+\t\t\t\t\tauto row_line = cell.row_line;\n+\n+\t\t\t\t\tauto col_name = to_string(col_idx);\n+\t\t\t\t\tif (col_idx < names.size()) {\n+\t\t\t\t\t\tcol_name = \"\\\"\" + names[col_idx] + \"\\\"\";\n+\t\t\t\t\t}\n+\n+\t\t\t\t\tauto &parse_vector = parse_chunk.data[col_idx];\n+\t\t\t\t\tauto parsed_str = FlatVector::GetData<string_t>(parse_vector)[row_idx];\n+\t\t\t\t\tauto &type = insert_chunk.data[col_idx].GetType();\n+\t\t\t\t\tauto row_error_msg = StringUtil::Format(\"Could not convert string '%s' to '%s'\",\n+\t\t\t\t\t                                        parsed_str.GetString(), type.ToString());\n+\n+\t\t\t\t\t// Add the row to the rejects table\n+\t\t\t\t\tappender.BeginRow();\n+\t\t\t\t\tappender.Append(string_t(file_name));\n+\t\t\t\t\tappender.Append(row_line);\n+\t\t\t\t\tappender.Append(col_idx);\n+\t\t\t\t\tappender.Append(string_t(col_name));\n+\t\t\t\t\tappender.Append(parsed_str);\n+\n+\t\t\t\t\tif (!options.rejects_recovery_columns.empty()) {\n+\t\t\t\t\t\tchild_list_t<Value> recovery_key;\n+\t\t\t\t\t\tfor (auto &key_idx : options.rejects_recovery_column_ids) {\n+\t\t\t\t\t\t\t// Figure out if the recovery key is valid.\n+\t\t\t\t\t\t\t// If not, error out for real.\n+\t\t\t\t\t\t\tauto &component_vector = parse_chunk.data[key_idx];\n+\t\t\t\t\t\t\tif (FlatVector::IsNull(component_vector, row_idx)) {\n+\t\t\t\t\t\t\t\tthrow InvalidInputException(\"%s at line %llu in column %s. Parser options:\\n%s \",\n+\t\t\t\t\t\t\t\t                            \"Could not parse recovery column\", row_line, col_name,\n+\t\t\t\t\t\t\t\t                            options.ToString());\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tauto component = Value(FlatVector::GetData<string_t>(component_vector)[row_idx]);\n+\t\t\t\t\t\t\trecovery_key.emplace_back(names[key_idx], component);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tappender.Append(Value::STRUCT(recovery_key));\n+\t\t\t\t\t}\n+\n+\t\t\t\t\tappender.Append(string_t(row_error_msg));\n+\t\t\t\t\tappender.EndRow();\n+\t\t\t\t}\n+\t\t\t\tappender.Close();\n+\t\t\t}\n+\t\t}\n+\n+\t\t// Now slice the insert chunk to only include the succesful rows\n \t\tinsert_chunk.Slice(succesful_rows, sel_size);\n \t}\n \tparse_chunk.Reset();\ndiff --git a/src/execution/operator/persistent/csv_reader_options.cpp b/src/execution/operator/persistent/csv_reader_options.cpp\nindex ee6bccb7d7d6..84df782ae646 100644\n--- a/src/execution/operator/persistent/csv_reader_options.cpp\n+++ b/src/execution/operator/persistent/csv_reader_options.cpp\n@@ -179,6 +179,26 @@ void BufferedCSVReaderOptions::SetReadOption(const string &loption, const Value\n \t\tallow_quoted_nulls = ParseBoolean(value, loption);\n \t} else if (loption == \"parallel\") {\n \t\tparallel_mode = ParseBoolean(value, loption) ? ParallelMode::PARALLEL : ParallelMode::SINGLE_THREADED;\n+\t} else if (loption == \"rejects_table\") {\n+\t\t// skip, handled in SetRejectsOptions\n+\t\tauto table_name = ParseString(value, loption);\n+\t\tif (table_name.empty()) {\n+\t\t\tthrow BinderException(\"REJECTS_TABLE option cannot be empty\");\n+\t\t}\n+\t\trejects_table_name = table_name;\n+\t} else if (loption == \"rejects_recovery_columns\") {\n+\t\t// Get the list of columns to use as a recovery key\n+\t\tauto &children = ListValue::GetChildren(value);\n+\t\tfor (auto &child : children) {\n+\t\t\tauto col_name = child.GetValue<string>();\n+\t\t\trejects_recovery_columns.push_back(col_name);\n+\t\t}\n+\t} else if (loption == \"rejects_limit\") {\n+\t\tint64_t limit = ParseInteger(value, loption);\n+\t\tif (limit < 0) {\n+\t\t\tthrow BinderException(\"Unsupported parameter for REJECTS_LIMIT: cannot be negative\");\n+\t\t}\n+\t\trejects_limit = limit;\n \t} else {\n \t\tthrow BinderException(\"Unrecognized option for CSV reader \\\"%s\\\"\", loption);\n \t}\ndiff --git a/src/execution/operator/persistent/csv_rejects_table.cpp b/src/execution/operator/persistent/csv_rejects_table.cpp\nnew file mode 100644\nindex 000000000000..a96bb2251aa4\n--- /dev/null\n+++ b/src/execution/operator/persistent/csv_rejects_table.cpp\n@@ -0,0 +1,48 @@\n+#include \"duckdb/main/appender.hpp\"\n+#include \"duckdb/parser/parsed_data/create_table_info.hpp\"\n+#include \"duckdb/function/table/read_csv.hpp\"\n+#include \"duckdb/execution/operator/persistent/csv_rejects_table.hpp\"\n+#include \"duckdb/catalog/catalog_entry/table_catalog_entry.hpp\"\n+\n+namespace duckdb {\n+\n+TableCatalogEntry &CSVRejectsTable::GetTable(ClientContext &context) {\n+\tauto &temp_catalog = Catalog::GetCatalog(context, TEMP_CATALOG);\n+\tauto &table_entry = temp_catalog.GetEntry<TableCatalogEntry>(context, TEMP_CATALOG, DEFAULT_SCHEMA, name);\n+\treturn table_entry;\n+}\n+\n+shared_ptr<CSVRejectsTable> CSVRejectsTable::GetOrCreate(ClientContext &context, const string &name) {\n+\tauto key = \"CSV_REJECTS_TABLE_CACHE_ENTRY_\" + StringUtil::Upper(name);\n+\tauto &cache = ObjectCache::GetObjectCache(context);\n+\treturn cache.GetOrCreate<CSVRejectsTable>(key, name);\n+}\n+\n+void CSVRejectsTable::InitializeTable(ClientContext &context, const ReadCSVData &data) {\n+\t// (Re)Create the temporary rejects table\n+\tauto &catalog = Catalog::GetCatalog(context, TEMP_CATALOG);\n+\tauto info = make_uniq<CreateTableInfo>(TEMP_CATALOG, DEFAULT_SCHEMA, name);\n+\tinfo->temporary = true;\n+\tinfo->on_conflict = OnCreateConflict::ERROR_ON_CONFLICT;\n+\tinfo->columns.AddColumn(ColumnDefinition(\"file\", LogicalType::VARCHAR));\n+\tinfo->columns.AddColumn(ColumnDefinition(\"line\", LogicalType::BIGINT));\n+\tinfo->columns.AddColumn(ColumnDefinition(\"column\", LogicalType::BIGINT));\n+\tinfo->columns.AddColumn(ColumnDefinition(\"column_name\", LogicalType::VARCHAR));\n+\tinfo->columns.AddColumn(ColumnDefinition(\"parsed_value\", LogicalType::VARCHAR));\n+\n+\tif (!data.options.rejects_recovery_columns.empty()) {\n+\t\tchild_list_t<LogicalType> recovery_key_components;\n+\t\tfor (auto &col_name : data.options.rejects_recovery_columns) {\n+\t\t\trecovery_key_components.emplace_back(col_name, LogicalType::VARCHAR);\n+\t\t}\n+\t\tinfo->columns.AddColumn(ColumnDefinition(\"recovery_columns\", LogicalType::STRUCT(recovery_key_components)));\n+\t}\n+\n+\tinfo->columns.AddColumn(ColumnDefinition(\"error\", LogicalType::VARCHAR));\n+\n+\tcatalog.CreateTable(context, std::move(info));\n+\n+\tcount = 0;\n+}\n+\n+} // namespace duckdb\ndiff --git a/src/execution/operator/persistent/parallel_csv_reader.cpp b/src/execution/operator/persistent/parallel_csv_reader.cpp\nindex 35f142a4a2cd..6b2a58312bcd 100644\n--- a/src/execution/operator/persistent/parallel_csv_reader.cpp\n+++ b/src/execution/operator/persistent/parallel_csv_reader.cpp\n@@ -635,12 +635,11 @@ void ParallelCSVReader::ParseCSV(DataChunk &insert_chunk) {\n \t}\n }\n \n-idx_t ParallelCSVReader::GetLineError(idx_t line_error, idx_t buffer_idx) {\n+idx_t ParallelCSVReader::GetLineError(idx_t line_error, idx_t buffer_idx, bool stop_at_first) {\n \twhile (true) {\n \t\tif (buffer->line_info->CanItGetLine(file_idx, buffer_idx)) {\n \t\t\tauto cur_start = verification_positions.beginning_of_first_line + buffer->buffer->GetCSVGlobalStart();\n-\t\t\t// line errors are 1-indexed\n-\t\t\treturn buffer->line_info->GetLine(buffer_idx, line_error, file_idx, cur_start, false);\n+\t\t\treturn buffer->line_info->GetLine(buffer_idx, line_error, file_idx, cur_start, false, stop_at_first);\n \t\t}\n \t}\n }\ndiff --git a/src/execution/operator/persistent/physical_batch_copy_to_file.cpp b/src/execution/operator/persistent/physical_batch_copy_to_file.cpp\nindex 2dc74aad1551..b8e9ec156da1 100644\n--- a/src/execution/operator/persistent/physical_batch_copy_to_file.cpp\n+++ b/src/execution/operator/persistent/physical_batch_copy_to_file.cpp\n@@ -1,9 +1,11 @@\n #include \"duckdb/execution/operator/persistent/physical_batch_copy_to_file.hpp\"\n+\n+#include \"duckdb/common/allocator.hpp\"\n+#include \"duckdb/common/types/batched_data_collection.hpp\"\n+#include \"duckdb/common/vector_operations/vector_operations.hpp\"\n #include \"duckdb/execution/operator/persistent/physical_copy_to_file.hpp\"\n #include \"duckdb/parallel/base_pipeline_event.hpp\"\n-#include \"duckdb/common/vector_operations/vector_operations.hpp\"\n-#include \"duckdb/common/types/batched_data_collection.hpp\"\n-#include \"duckdb/common/allocator.hpp\"\n+\n #include <algorithm>\n \n namespace duckdb {\n@@ -67,7 +69,7 @@ class BatchCopyToLocalState : public LocalSinkState {\n \toptional_idx batch_index;\n \n \tvoid InitializeCollection(ClientContext &context, const PhysicalOperator &op) {\n-\t\tcollection = make_uniq<ColumnDataCollection>(Allocator::Get(context), op.children[0]->types);\n+\t\tcollection = make_uniq<ColumnDataCollection>(BufferAllocator::Get(context), op.children[0]->types);\n \t\tcollection->InitializeAppend(append_state);\n \t}\n };\ndiff --git a/src/execution/operator/persistent/physical_fixed_batch_copy.cpp b/src/execution/operator/persistent/physical_fixed_batch_copy.cpp\nindex 6b26a0a99ca1..cbb8235ac017 100644\n--- a/src/execution/operator/persistent/physical_fixed_batch_copy.cpp\n+++ b/src/execution/operator/persistent/physical_fixed_batch_copy.cpp\n@@ -116,7 +116,7 @@ class FixedBatchCopyLocalState : public LocalSinkState {\n \toptional_idx batch_index;\n \n \tvoid InitializeCollection(ClientContext &context, const PhysicalOperator &op) {\n-\t\tcollection = make_uniq<ColumnDataCollection>(Allocator::Get(context), op.children[0]->types);\n+\t\tcollection = make_uniq<ColumnDataCollection>(BufferAllocator::Get(context), op.children[0]->types);\n \t\tcollection->InitializeAppend(append_state);\n \t}\n };\n@@ -353,7 +353,7 @@ void PhysicalFixedBatchCopy::RepartitionBatches(ClientContext &context, GlobalSi\n \t\t\t} else {\n \t\t\t\t// the collection is too large for a batch - we need to repartition\n \t\t\t\t// create an empty collection\n-\t\t\t\tcurrent_collection = make_uniq<ColumnDataCollection>(Allocator::Get(context), children[0]->types);\n+\t\t\t\tcurrent_collection = make_uniq<ColumnDataCollection>(BufferAllocator::Get(context), children[0]->types);\n \t\t\t}\n \t\t\tif (current_collection) {\n \t\t\t\tcurrent_collection->InitializeAppend(append_state);\n@@ -373,7 +373,7 @@ void PhysicalFixedBatchCopy::RepartitionBatches(ClientContext &context, GlobalSi\n \t\t\t}\n \t\t\t// the collection is full - move it to the result and create a new one\n \t\t\tgstate.AddTask(make_uniq<PrepareBatchTask>(gstate.scheduled_batch_index++, std::move(current_collection)));\n-\t\t\tcurrent_collection = make_uniq<ColumnDataCollection>(Allocator::Get(context), children[0]->types);\n+\t\t\tcurrent_collection = make_uniq<ColumnDataCollection>(BufferAllocator::Get(context), children[0]->types);\n \t\t\tcurrent_collection->InitializeAppend(append_state);\n \t\t}\n \t}\ndiff --git a/src/execution/operator/scan/physical_column_data_scan.cpp b/src/execution/operator/scan/physical_column_data_scan.cpp\nindex 361c2f7e3a1c..55c00b7a64f0 100644\n--- a/src/execution/operator/scan/physical_column_data_scan.cpp\n+++ b/src/execution/operator/scan/physical_column_data_scan.cpp\n@@ -64,6 +64,9 @@ void PhysicalColumnDataScan::BuildPipelines(Pipeline &current, MetaPipeline &met\n \t\tstate.SetPipelineSource(current, delim_join.distinct->Cast<PhysicalOperator>());\n \t\treturn;\n \t}\n+\tcase PhysicalOperatorType::CTE_SCAN: {\n+\t\tbreak;\n+\t}\n \tcase PhysicalOperatorType::RECURSIVE_CTE_SCAN:\n \t\tif (!meta_pipeline.HasRecursiveCTE()) {\n \t\t\tthrow InternalException(\"Recursive CTE scan found without recursive CTE node\");\n@@ -76,4 +79,20 @@ void PhysicalColumnDataScan::BuildPipelines(Pipeline &current, MetaPipeline &met\n \tstate.SetPipelineSource(current, *this);\n }\n \n+string PhysicalColumnDataScan::ParamsToString() const {\n+\tstring result = \"\";\n+\tswitch (type) {\n+\tcase PhysicalOperatorType::CTE_SCAN:\n+\tcase PhysicalOperatorType::RECURSIVE_CTE_SCAN: {\n+\t\tresult += \"\\n[INFOSEPARATOR]\\n\";\n+\t\tresult += StringUtil::Format(\"idx: %llu\", cte_index);\n+\t\tbreak;\n+\t}\n+\tdefault:\n+\t\tbreak;\n+\t}\n+\n+\treturn result;\n+}\n+\n } // namespace duckdb\ndiff --git a/src/execution/operator/set/CMakeLists.txt b/src/execution/operator/set/CMakeLists.txt\nindex 4047f09afb83..2110df1ff575 100644\n--- a/src/execution/operator/set/CMakeLists.txt\n+++ b/src/execution/operator/set/CMakeLists.txt\n@@ -1,5 +1,5 @@\n add_library_unity(duckdb_operator_set OBJECT physical_union.cpp\n-                  physical_recursive_cte.cpp)\n+                  physical_recursive_cte.cpp physical_cte.cpp)\n set(ALL_OBJECT_FILES\n     ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_operator_set>\n     PARENT_SCOPE)\ndiff --git a/src/execution/operator/set/physical_cte.cpp b/src/execution/operator/set/physical_cte.cpp\nnew file mode 100644\nindex 000000000000..67cfa021aa58\n--- /dev/null\n+++ b/src/execution/operator/set/physical_cte.cpp\n@@ -0,0 +1,160 @@\n+#include \"duckdb/execution/operator/set/physical_cte.hpp\"\n+\n+#include \"duckdb/common/types/column/column_data_collection.hpp\"\n+#include \"duckdb/common/vector_operations/vector_operations.hpp\"\n+#include \"duckdb/execution/aggregate_hashtable.hpp\"\n+#include \"duckdb/execution/executor.hpp\"\n+#include \"duckdb/parallel/event.hpp\"\n+#include \"duckdb/parallel/meta_pipeline.hpp\"\n+#include \"duckdb/parallel/pipeline.hpp\"\n+#include \"duckdb/parallel/task_scheduler.hpp\"\n+#include \"duckdb/storage/buffer_manager.hpp\"\n+\n+namespace duckdb {\n+\n+PhysicalCTE::PhysicalCTE(string ctename, idx_t table_index, vector<LogicalType> types, unique_ptr<PhysicalOperator> top,\n+                         unique_ptr<PhysicalOperator> bottom, idx_t estimated_cardinality)\n+    : PhysicalOperator(PhysicalOperatorType::CTE, std::move(types), estimated_cardinality), table_index(table_index),\n+      ctename(std::move(ctename)) {\n+\tchildren.push_back(std::move(top));\n+\tchildren.push_back(std::move(bottom));\n+}\n+\n+PhysicalCTE::~PhysicalCTE() {\n+}\n+\n+//===--------------------------------------------------------------------===//\n+// Sink\n+//===--------------------------------------------------------------------===//\n+class CTEState : public GlobalSinkState {\n+public:\n+\texplicit CTEState(ClientContext &context, const PhysicalCTE &op)\n+\t    : intermediate_table(context, op.children[1]->GetTypes()) {\n+\t}\n+\tColumnDataCollection intermediate_table;\n+\tColumnDataScanState scan_state;\n+\tbool initialized = false;\n+\tbool finished_scan = false;\n+};\n+\n+unique_ptr<GlobalSinkState> PhysicalCTE::GetGlobalSinkState(ClientContext &context) const {\n+\tworking_table->Reset();\n+\treturn make_uniq<CTEState>(context, *this);\n+}\n+\n+SinkResultType PhysicalCTE::Sink(ExecutionContext &context, DataChunk &chunk, OperatorSinkInput &input) const {\n+\tauto &gstate = input.global_state.Cast<CTEState>();\n+\tif (!gstate.finished_scan) {\n+\t\tworking_table->Append(chunk);\n+\t} else {\n+\t\tgstate.intermediate_table.Append(chunk);\n+\t}\n+\treturn SinkResultType::NEED_MORE_INPUT;\n+}\n+\n+//===--------------------------------------------------------------------===//\n+// Source\n+//===--------------------------------------------------------------------===//\n+SourceResultType PhysicalCTE::GetData(ExecutionContext &context, DataChunk &chunk, OperatorSourceInput &input) const {\n+\tauto &gstate = sink_state->Cast<CTEState>();\n+\tif (!gstate.initialized) {\n+\t\tgstate.intermediate_table.InitializeScan(gstate.scan_state);\n+\t\tgstate.finished_scan = false;\n+\t\tgstate.initialized = true;\n+\t}\n+\tif (!gstate.finished_scan) {\n+\t\tgstate.finished_scan = true;\n+\t\tExecuteRecursivePipelines(context);\n+\t}\n+\n+\tgstate.intermediate_table.Scan(gstate.scan_state, chunk);\n+\n+\treturn chunk.size() == 0 ? SourceResultType::FINISHED : SourceResultType::HAVE_MORE_OUTPUT;\n+}\n+\n+void PhysicalCTE::ExecuteRecursivePipelines(ExecutionContext &context) const {\n+\tif (!recursive_meta_pipeline) {\n+\t\tthrow InternalException(\"Missing meta pipeline for recursive CTE\");\n+\t}\n+\n+\t// get and reset pipelines\n+\tvector<shared_ptr<Pipeline>> pipelines;\n+\trecursive_meta_pipeline->GetPipelines(pipelines, true);\n+\tfor (auto &pipeline : pipelines) {\n+\t\tauto sink = pipeline->GetSink();\n+\t\tif (sink.get() != this) {\n+\t\t\tsink->sink_state.reset();\n+\t\t}\n+\t\tfor (auto &op_ref : pipeline->GetOperators()) {\n+\t\t\tauto &op = op_ref.get();\n+\t\t\top.op_state.reset();\n+\t\t}\n+\t\tpipeline->ClearSource();\n+\t}\n+\n+\t// get the MetaPipelines in the recursive_meta_pipeline and reschedule them\n+\tvector<shared_ptr<MetaPipeline>> meta_pipelines;\n+\trecursive_meta_pipeline->GetMetaPipelines(meta_pipelines, true, false);\n+\tauto &executor = recursive_meta_pipeline->GetExecutor();\n+\tvector<shared_ptr<Event>> events;\n+\texecutor.ReschedulePipelines(meta_pipelines, events);\n+\n+\twhile (true) {\n+\t\texecutor.WorkOnTasks();\n+\t\tif (executor.HasError()) {\n+\t\t\texecutor.ThrowException();\n+\t\t}\n+\t\tbool finished = true;\n+\t\tfor (auto &event : events) {\n+\t\t\tif (!event->IsFinished()) {\n+\t\t\t\tfinished = false;\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t}\n+\t\tif (finished) {\n+\t\t\t// all pipelines finished: done!\n+\t\t\tbreak;\n+\t\t}\n+\t}\n+}\n+\n+//===--------------------------------------------------------------------===//\n+// Pipeline Construction\n+//===--------------------------------------------------------------------===//\n+void PhysicalCTE::BuildPipelines(Pipeline &current, MetaPipeline &meta_pipeline) {\n+\tD_ASSERT(children.size() == 2);\n+\top_state.reset();\n+\tsink_state.reset();\n+\trecursive_meta_pipeline.reset();\n+\n+\tauto &state = meta_pipeline.GetState();\n+\tstate.SetPipelineSource(current, *this);\n+\n+\tauto &executor = meta_pipeline.GetExecutor();\n+\texecutor.AddMaterializedCTE(*this);\n+\n+\tauto &child_meta_pipeline = meta_pipeline.CreateChildMetaPipeline(current, *this);\n+\tchild_meta_pipeline.Build(*children[0]);\n+\n+\t// the RHS is the recursive pipeline\n+\trecursive_meta_pipeline = make_shared<MetaPipeline>(executor, state, this);\n+\tif (meta_pipeline.HasRecursiveCTE()) {\n+\t\trecursive_meta_pipeline->SetRecursiveCTE();\n+\t}\n+\trecursive_meta_pipeline->Build(*children[1]);\n+}\n+\n+vector<const_reference<PhysicalOperator>> PhysicalCTE::GetSources() const {\n+\treturn {*this};\n+}\n+\n+string PhysicalCTE::ParamsToString() const {\n+\tstring result = \"\";\n+\tresult += \"\\n[INFOSEPARATOR]\\n\";\n+\tresult += ctename;\n+\tresult += \"\\n[INFOSEPARATOR]\\n\";\n+\tresult += StringUtil::Format(\"idx: %llu\", table_index);\n+\treturn result;\n+}\n+\n+} // namespace duckdb\ndiff --git a/src/execution/operator/set/physical_recursive_cte.cpp b/src/execution/operator/set/physical_recursive_cte.cpp\nindex c9236055eceb..cd20c883504c 100644\n--- a/src/execution/operator/set/physical_recursive_cte.cpp\n+++ b/src/execution/operator/set/physical_recursive_cte.cpp\n@@ -12,10 +12,11 @@\n \n namespace duckdb {\n \n-PhysicalRecursiveCTE::PhysicalRecursiveCTE(vector<LogicalType> types, bool union_all, unique_ptr<PhysicalOperator> top,\n-                                           unique_ptr<PhysicalOperator> bottom, idx_t estimated_cardinality)\n+PhysicalRecursiveCTE::PhysicalRecursiveCTE(string ctename, idx_t table_index, vector<LogicalType> types, bool union_all,\n+                                           unique_ptr<PhysicalOperator> top, unique_ptr<PhysicalOperator> bottom,\n+                                           idx_t estimated_cardinality)\n     : PhysicalOperator(PhysicalOperatorType::RECURSIVE_CTE, std::move(types), estimated_cardinality),\n-      union_all(union_all) {\n+      ctename(std::move(ctename)), table_index(table_index), union_all(union_all) {\n \tchildren.push_back(std::move(top));\n \tchildren.push_back(std::move(bottom));\n }\n@@ -195,4 +196,13 @@ vector<const_reference<PhysicalOperator>> PhysicalRecursiveCTE::GetSources() con\n \treturn {*this};\n }\n \n+string PhysicalRecursiveCTE::ParamsToString() const {\n+\tstring result = \"\";\n+\tresult += \"\\n[INFOSEPARATOR]\\n\";\n+\tresult += ctename;\n+\tresult += \"\\n[INFOSEPARATOR]\\n\";\n+\tresult += StringUtil::Format(\"idx: %llu\", table_index);\n+\treturn result;\n+}\n+\n } // namespace duckdb\ndiff --git a/src/execution/perfect_aggregate_hashtable.cpp b/src/execution/perfect_aggregate_hashtable.cpp\nindex 196a4400c937..b109b8633e19 100644\n--- a/src/execution/perfect_aggregate_hashtable.cpp\n+++ b/src/execution/perfect_aggregate_hashtable.cpp\n@@ -1,6 +1,7 @@\n #include \"duckdb/execution/perfect_aggregate_hashtable.hpp\"\n-#include \"duckdb/execution/expression_executor.hpp\"\n+\n #include \"duckdb/common/row_operations/row_operations.hpp\"\n+#include \"duckdb/execution/expression_executor.hpp\"\n \n namespace duckdb {\n \n@@ -93,6 +94,18 @@ static void ComputeGroupLocation(Vector &group, Value &min, uintptr_t *address_d\n \tcase PhysicalType::INT64:\n \t\tComputeGroupLocationTemplated<int64_t>(vdata, min, address_data, current_shift, count);\n \t\tbreak;\n+\tcase PhysicalType::UINT8:\n+\t\tComputeGroupLocationTemplated<uint8_t>(vdata, min, address_data, current_shift, count);\n+\t\tbreak;\n+\tcase PhysicalType::UINT16:\n+\t\tComputeGroupLocationTemplated<uint16_t>(vdata, min, address_data, current_shift, count);\n+\t\tbreak;\n+\tcase PhysicalType::UINT32:\n+\t\tComputeGroupLocationTemplated<uint32_t>(vdata, min, address_data, current_shift, count);\n+\t\tbreak;\n+\tcase PhysicalType::UINT64:\n+\t\tComputeGroupLocationTemplated<uint64_t>(vdata, min, address_data, current_shift, count);\n+\t\tbreak;\n \tdefault:\n \t\tthrow InternalException(\"Unsupported group type for perfect aggregate hash table\");\n \t}\n@@ -208,6 +221,18 @@ static void ReconstructGroupVector(uint32_t group_values[], Value &min, idx_t re\n \tcase PhysicalType::INT64:\n \t\tReconstructGroupVectorTemplated<int64_t>(group_values, min, mask, shift, entry_count, result);\n \t\tbreak;\n+\tcase PhysicalType::UINT8:\n+\t\tReconstructGroupVectorTemplated<uint8_t>(group_values, min, mask, shift, entry_count, result);\n+\t\tbreak;\n+\tcase PhysicalType::UINT16:\n+\t\tReconstructGroupVectorTemplated<uint16_t>(group_values, min, mask, shift, entry_count, result);\n+\t\tbreak;\n+\tcase PhysicalType::UINT32:\n+\t\tReconstructGroupVectorTemplated<uint32_t>(group_values, min, mask, shift, entry_count, result);\n+\t\tbreak;\n+\tcase PhysicalType::UINT64:\n+\t\tReconstructGroupVectorTemplated<uint64_t>(group_values, min, mask, shift, entry_count, result);\n+\t\tbreak;\n \tdefault:\n \t\tthrow InternalException(\"Invalid type for perfect aggregate HT group\");\n \t}\ndiff --git a/src/execution/physical_plan/CMakeLists.txt b/src/execution/physical_plan/CMakeLists.txt\nindex 6bde3994d491..f14188a70d47 100644\n--- a/src/execution/physical_plan/CMakeLists.txt\n+++ b/src/execution/physical_plan/CMakeLists.txt\n@@ -42,7 +42,8 @@ add_library_unity(\n   plan_window.cpp\n   plan_unnest.cpp\n   plan_expression_get.cpp\n-  plan_recursive_cte.cpp)\n+  plan_recursive_cte.cpp\n+  plan_cte.cpp)\n set(ALL_OBJECT_FILES\n     ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_physical_plan>\n     PARENT_SCOPE)\ndiff --git a/src/execution/physical_plan/plan_aggregate.cpp b/src/execution/physical_plan/plan_aggregate.cpp\nindex 909711c50da2..4160783e2ad5 100644\n--- a/src/execution/physical_plan/plan_aggregate.cpp\n+++ b/src/execution/physical_plan/plan_aggregate.cpp\n@@ -5,12 +5,12 @@\n #include \"duckdb/execution/operator/aggregate/physical_ungrouped_aggregate.hpp\"\n #include \"duckdb/execution/operator/projection/physical_projection.hpp\"\n #include \"duckdb/execution/physical_plan_generator.hpp\"\n+#include \"duckdb/function/function_binder.hpp\"\n #include \"duckdb/main/client_context.hpp\"\n #include \"duckdb/parser/expression/comparison_expression.hpp\"\n #include \"duckdb/planner/expression/bound_aggregate_expression.hpp\"\n-#include \"duckdb/planner/operator/logical_aggregate.hpp\"\n-#include \"duckdb/function/function_binder.hpp\"\n #include \"duckdb/planner/expression/bound_reference_expression.hpp\"\n+#include \"duckdb/planner/operator/logical_aggregate.hpp\"\n \n namespace duckdb {\n \n@@ -23,6 +23,11 @@ static uint32_t RequiredBitsForValue(uint32_t n) {\n \treturn required_bits;\n }\n \n+template <class T>\n+hugeint_t GetRangeHugeint(const BaseStatistics &nstats) {\n+\treturn Hugeint::Convert(NumericStats::GetMax<T>(nstats)) - Hugeint::Convert(NumericStats::GetMin<T>(nstats));\n+}\n+\n static bool CanUsePerfectHashAggregate(ClientContext &context, LogicalAggregate &op, vector<idx_t> &bits_per_group) {\n \tif (op.grouping_sets.size() > 1 || !op.grouping_functions.empty()) {\n \t\treturn false;\n@@ -40,6 +45,10 @@ static bool CanUsePerfectHashAggregate(ClientContext &context, LogicalAggregate\n \t\tcase PhysicalType::INT16:\n \t\tcase PhysicalType::INT32:\n \t\tcase PhysicalType::INT64:\n+\t\tcase PhysicalType::UINT8:\n+\t\tcase PhysicalType::UINT16:\n+\t\tcase PhysicalType::UINT32:\n+\t\tcase PhysicalType::UINT64:\n \t\t\tbreak;\n \t\tdefault:\n \t\t\t// we only support simple integer types for perfect hashing\n@@ -53,6 +62,8 @@ static bool CanUsePerfectHashAggregate(ClientContext &context, LogicalAggregate\n \t\t\tswitch (group_type.InternalType()) {\n \t\t\tcase PhysicalType::INT8:\n \t\t\tcase PhysicalType::INT16:\n+\t\t\tcase PhysicalType::UINT8:\n+\t\t\tcase PhysicalType::UINT16:\n \t\t\t\tbreak;\n \t\t\tdefault:\n \t\t\t\t// type is too large and there are no stats: skip perfect hashing\n@@ -68,33 +79,55 @@ static bool CanUsePerfectHashAggregate(ClientContext &context, LogicalAggregate\n \t\tif (!NumericStats::HasMinMax(nstats)) {\n \t\t\treturn false;\n \t\t}\n+\n+\t\tif (NumericStats::Max(*stats) < NumericStats::Min(*stats)) {\n+\t\t\t// May result in underflow\n+\t\t\treturn false;\n+\t\t}\n+\n \t\t// we have a min and a max value for the stats: use that to figure out how many bits we have\n \t\t// we add two here, one for the NULL value, and one to make the computation one-indexed\n \t\t// (e.g. if min and max are the same, we still need one entry in total)\n-\t\tint64_t range;\n+\t\thugeint_t range_h;\n \t\tswitch (group_type.InternalType()) {\n \t\tcase PhysicalType::INT8:\n-\t\t\trange = int64_t(NumericStats::GetMax<int8_t>(nstats)) - int64_t(NumericStats::GetMin<int8_t>(nstats));\n+\t\t\trange_h = GetRangeHugeint<int8_t>(nstats);\n \t\t\tbreak;\n \t\tcase PhysicalType::INT16:\n-\t\t\trange = int64_t(NumericStats::GetMax<int16_t>(nstats)) - int64_t(NumericStats::GetMin<int16_t>(nstats));\n+\t\t\trange_h = GetRangeHugeint<int16_t>(nstats);\n \t\t\tbreak;\n \t\tcase PhysicalType::INT32:\n-\t\t\trange = int64_t(NumericStats::GetMax<int32_t>(nstats)) - int64_t(NumericStats::GetMin<int32_t>(nstats));\n+\t\t\trange_h = GetRangeHugeint<int32_t>(nstats);\n \t\t\tbreak;\n \t\tcase PhysicalType::INT64:\n-\t\t\tif (!TrySubtractOperator::Operation(NumericStats::GetMax<int64_t>(nstats),\n-\t\t\t                                    NumericStats::GetMin<int64_t>(nstats), range)) {\n-\t\t\t\treturn false;\n-\t\t\t}\n+\t\t\trange_h = GetRangeHugeint<int64_t>(nstats);\n+\t\t\tbreak;\n+\t\tcase PhysicalType::UINT8:\n+\t\t\trange_h = GetRangeHugeint<uint8_t>(nstats);\n+\t\t\tbreak;\n+\t\tcase PhysicalType::UINT16:\n+\t\t\trange_h = GetRangeHugeint<uint16_t>(nstats);\n+\t\t\tbreak;\n+\t\tcase PhysicalType::UINT32:\n+\t\t\trange_h = GetRangeHugeint<uint32_t>(nstats);\n+\t\t\tbreak;\n+\t\tcase PhysicalType::UINT64:\n+\t\t\trange_h = GetRangeHugeint<uint64_t>(nstats);\n \t\t\tbreak;\n \t\tdefault:\n \t\t\tthrow InternalException(\"Unsupported type for perfect hash (should be caught before)\");\n \t\t}\n+\n+\t\tuint64_t range;\n+\t\tif (!Hugeint::TryCast(range_h, range)) {\n+\t\t\treturn false;\n+\t\t}\n+\n \t\t// bail out on any range bigger than 2^32\n \t\tif (range >= NumericLimits<int32_t>::Maximum()) {\n \t\t\treturn false;\n \t\t}\n+\n \t\trange += 2;\n \t\t// figure out how many bits we need\n \t\tidx_t required_bits = RequiredBitsForValue(range);\ndiff --git a/src/execution/physical_plan/plan_cte.cpp b/src/execution/physical_plan/plan_cte.cpp\nnew file mode 100644\nindex 000000000000..0c0b0485566a\n--- /dev/null\n+++ b/src/execution/physical_plan/plan_cte.cpp\n@@ -0,0 +1,33 @@\n+#include \"duckdb/common/types/column/column_data_collection.hpp\"\n+#include \"duckdb/execution/operator/scan/physical_column_data_scan.hpp\"\n+#include \"duckdb/execution/operator/set/physical_cte.hpp\"\n+#include \"duckdb/execution/physical_plan_generator.hpp\"\n+#include \"duckdb/planner/expression/bound_reference_expression.hpp\"\n+#include \"duckdb/planner/operator/logical_cteref.hpp\"\n+#include \"duckdb/planner/operator/logical_materialized_cte.hpp\"\n+\n+namespace duckdb {\n+\n+unique_ptr<PhysicalOperator> PhysicalPlanGenerator::CreatePlan(LogicalMaterializedCTE &op) {\n+\tD_ASSERT(op.children.size() == 2);\n+\n+\t// Create the working_table that the PhysicalCTE will use for evaluation.\n+\tauto working_table = std::make_shared<ColumnDataCollection>(context, op.children[0]->types);\n+\n+\t// Add the ColumnDataCollection to the context of this PhysicalPlanGenerator\n+\trecursive_cte_tables[op.table_index] = working_table;\n+\n+\t// Create the plan for the left side. This is the materialization.\n+\tauto left = CreatePlan(*op.children[0]);\n+\t// Initialize an empty vector to collect the scan operators.\n+\tmaterialized_ctes.insert(op.table_index);\n+\tauto right = CreatePlan(*op.children[1]);\n+\n+\tauto cte = make_uniq<PhysicalCTE>(op.ctename, op.table_index, op.children[1]->types, std::move(left),\n+\t                                  std::move(right), op.estimated_cardinality);\n+\tcte->working_table = working_table;\n+\n+\treturn std::move(cte);\n+}\n+\n+} // namespace duckdb\ndiff --git a/src/execution/physical_plan/plan_recursive_cte.cpp b/src/execution/physical_plan/plan_recursive_cte.cpp\nindex 3a9decbc5063..8ded97a8ce25 100644\n--- a/src/execution/physical_plan/plan_recursive_cte.cpp\n+++ b/src/execution/physical_plan/plan_recursive_cte.cpp\n@@ -20,8 +20,8 @@ unique_ptr<PhysicalOperator> PhysicalPlanGenerator::CreatePlan(LogicalRecursiveC\n \tauto left = CreatePlan(*op.children[0]);\n \tauto right = CreatePlan(*op.children[1]);\n \n-\tauto cte = make_uniq<PhysicalRecursiveCTE>(op.types, op.union_all, std::move(left), std::move(right),\n-\t                                           op.estimated_cardinality);\n+\tauto cte = make_uniq<PhysicalRecursiveCTE>(op.ctename, op.table_index, op.types, op.union_all, std::move(left),\n+\t                                           std::move(right), op.estimated_cardinality);\n \tcte->working_table = working_table;\n \n \treturn std::move(cte);\n@@ -30,14 +30,35 @@ unique_ptr<PhysicalOperator> PhysicalPlanGenerator::CreatePlan(LogicalRecursiveC\n unique_ptr<PhysicalOperator> PhysicalPlanGenerator::CreatePlan(LogicalCTERef &op) {\n \tD_ASSERT(op.children.empty());\n \n-\tauto chunk_scan =\n-\t    make_uniq<PhysicalColumnDataScan>(op.types, PhysicalOperatorType::RECURSIVE_CTE_SCAN, op.estimated_cardinality);\n+\t// Check if this LogicalCTERef is supposed to scan a materialized CTE.\n+\tif (op.materialized_cte == CTEMaterialize::CTE_MATERIALIZE_ALWAYS) {\n+\t\t// Lookup if there is a materialized CTE for the cte_index.\n+\t\tauto materialized_cte = materialized_ctes.find(op.cte_index);\n+\n+\t\t// If this check fails, this is a reference to a materialized recursive CTE.\n+\t\tif (materialized_cte != materialized_ctes.end()) {\n+\t\t\tauto chunk_scan = make_uniq<PhysicalColumnDataScan>(op.types, PhysicalOperatorType::CTE_SCAN,\n+\t\t\t                                                    op.estimated_cardinality, op.cte_index);\n+\n+\t\t\tauto cte = recursive_cte_tables.find(op.cte_index);\n+\t\t\tif (cte == recursive_cte_tables.end()) {\n+\t\t\t\tthrow InvalidInputException(\"Referenced materialized CTE does not exist.\");\n+\t\t\t}\n+\t\t\tchunk_scan->collection = cte->second.get();\n+\n+\t\t\treturn std::move(chunk_scan);\n+\t\t}\n+\t}\n \n \t// CreatePlan of a LogicalRecursiveCTE must have happened before.\n \tauto cte = recursive_cte_tables.find(op.cte_index);\n \tif (cte == recursive_cte_tables.end()) {\n \t\tthrow InvalidInputException(\"Referenced recursive CTE does not exist.\");\n \t}\n+\n+\tauto chunk_scan = make_uniq<PhysicalColumnDataScan>(\n+\t    cte->second.get()->Types(), PhysicalOperatorType::RECURSIVE_CTE_SCAN, op.estimated_cardinality, op.cte_index);\n+\n \tchunk_scan->collection = cte->second.get();\n \treturn std::move(chunk_scan);\n }\ndiff --git a/src/execution/physical_plan_generator.cpp b/src/execution/physical_plan_generator.cpp\nindex 9877749578e5..1178dbdbed20 100644\n--- a/src/execution/physical_plan_generator.cpp\n+++ b/src/execution/physical_plan_generator.cpp\n@@ -194,6 +194,9 @@ unique_ptr<PhysicalOperator> PhysicalPlanGenerator::CreatePlan(LogicalOperator &\n \tcase LogicalOperatorType::LOGICAL_RECURSIVE_CTE:\n \t\tplan = CreatePlan(op.Cast<LogicalRecursiveCTE>());\n \t\tbreak;\n+\tcase LogicalOperatorType::LOGICAL_MATERIALIZED_CTE:\n+\t\tplan = CreatePlan(op.Cast<LogicalMaterializedCTE>());\n+\t\tbreak;\n \tcase LogicalOperatorType::LOGICAL_CTE_REF:\n \t\tplan = CreatePlan(op.Cast<LogicalCTERef>());\n \t\tbreak;\n@@ -217,6 +220,7 @@ unique_ptr<PhysicalOperator> PhysicalPlanGenerator::CreatePlan(LogicalOperator &\n \t\t}\n \t\tbreak;\n \tcase LogicalOperatorType::LOGICAL_JOIN:\n+\tcase LogicalOperatorType::LOGICAL_DEPENDENT_JOIN:\n \tcase LogicalOperatorType::LOGICAL_INVALID: {\n \t\tthrow NotImplementedException(\"Unimplemented logical operator type!\");\n \t}\ndiff --git a/src/execution/window_segment_tree.cpp b/src/execution/window_segment_tree.cpp\nindex abad7f8b296c..9d6aa5408350 100644\n--- a/src/execution/window_segment_tree.cpp\n+++ b/src/execution/window_segment_tree.cpp\n@@ -4,17 +4,20 @@\n #include \"duckdb/common/algorithm.hpp\"\n #include \"duckdb/common/helper.hpp\"\n \n+#include <utility>\n+\n namespace duckdb {\n \n //===--------------------------------------------------------------------===//\n // WindowAggregateState\n //===--------------------------------------------------------------------===//\n \n-WindowAggregateState::WindowAggregateState(AggregateObject aggr, const LogicalType &result_type_p)\n-    : aggr(std::move(aggr)), result_type(result_type_p), state(aggr.function.state_size()),\n-      statev(Value::POINTER(CastPointerToValue(state.data()))),\n-      statep(Value::POINTER(CastPointerToValue(state.data()))) {\n-\tstatev.SetVectorType(VectorType::FLAT_VECTOR); // Prevent conversion of results to constants\n+WindowAggregateState::WindowAggregateState(AggregateObject aggr, const LogicalType &result_type_p,\n+                                           idx_t partition_count_p)\n+    : aggr(std::move(aggr)), result_type(result_type_p), partition_count(partition_count_p),\n+      state_size(aggr.function.state_size()), state(state_size),\n+      statef(Value::POINTER(CastPointerToValue(state.data()))), filter_pos(0) {\n+\tstatef.SetVectorType(VectorType::FLAT_VECTOR); // Prevent conversion of results to constants\n }\n \n WindowAggregateState::~WindowAggregateState() {\n@@ -26,14 +29,32 @@ void WindowAggregateState::AggregateInit() {\n \n void WindowAggregateState::AggegateFinal(Vector &result, idx_t rid) {\n \tAggregateInputData aggr_input_data(aggr.GetFunctionData(), Allocator::DefaultAllocator());\n-\taggr.function.finalize(statev, aggr_input_data, result, 1, rid);\n+\taggr.function.finalize(statef, aggr_input_data, result, 1, rid);\n \n \tif (aggr.function.destructor) {\n-\t\taggr.function.destructor(statev, aggr_input_data, 1);\n+\t\taggr.function.destructor(statef, aggr_input_data, 1);\n \t}\n }\n \n void WindowAggregateState::Sink(DataChunk &payload_chunk, SelectionVector *filter_sel, idx_t filtered) {\n+\tif (!inputs.ColumnCount() && payload_chunk.ColumnCount()) {\n+\t\tinputs.Initialize(Allocator::DefaultAllocator(), payload_chunk.GetTypes());\n+\t}\n+\tif (inputs.ColumnCount()) {\n+\t\tinputs.Append(payload_chunk, true);\n+\t}\n+\tif (filter_sel) {\n+\t\t//\tLazy instantiation\n+\t\tif (!filter_mask.IsMaskSet()) {\n+\t\t\t// \tStart with all invalid and set the ones that pass\n+\t\t\tfilter_bits.resize(ValidityMask::ValidityMaskSize(partition_count), 0);\n+\t\t\tfilter_mask.Initialize(filter_bits.data());\n+\t\t}\n+\t\tfor (idx_t f = 0; f < filtered; ++f) {\n+\t\t\tfilter_mask.SetValid(filter_pos + filter_sel->get_index(f));\n+\t\t}\n+\t\tfilter_pos += payload_chunk.size();\n+\t}\n }\n \n void WindowAggregateState::Finalize() {\n@@ -42,22 +63,37 @@ void WindowAggregateState::Finalize() {\n void WindowAggregateState::Compute(Vector &result, idx_t rid, idx_t start, idx_t end) {\n }\n \n+void WindowAggregateState::Evaluate(const idx_t *begins, const idx_t *ends, Vector &result, idx_t count) {\n+\tauto &rmask = FlatVector::Validity(result);\n+\tfor (idx_t i = 0; i < count; ++i) {\n+\t\tconst auto begin = begins[i];\n+\t\tconst auto end = ends[i];\n+\t\tif (begin >= end) {\n+\t\t\trmask.SetInvalid(i);\n+\t\t\tcontinue;\n+\t\t}\n+\t\tCompute(result, i, begin, end);\n+\t}\n+}\n+\n //===--------------------------------------------------------------------===//\n // WindowConstantAggregate\n //===--------------------------------------------------------------------===//\n \n WindowConstantAggregate::WindowConstantAggregate(AggregateObject aggr, const LogicalType &result_type,\n                                                  const ValidityMask &partition_mask, const idx_t count)\n-    : WindowAggregateState(std::move(aggr), result_type), partition(0), row(0) {\n+    : WindowAggregateState(std::move(aggr), result_type, count), partition(0), row(0),\n+      statep(Value::POINTER(CastPointerToValue(state.data()))) {\n+\n+\tmatches.Initialize();\n \n \t// Locate the partition boundaries\n-\tidx_t start = 0;\n \tif (partition_mask.AllValid()) {\n \t\tpartition_offsets.emplace_back(0);\n \t} else {\n \t\tidx_t entry_idx;\n \t\tidx_t shift;\n-\t\twhile (start < count) {\n+\t\tfor (idx_t start = 0; start < count;) {\n \t\t\tpartition_mask.GetEntryIndex(start, entry_idx, shift);\n \n \t\t\t//\tIf start is aligned with the start of a block,\n@@ -165,43 +201,88 @@ void WindowConstantAggregate::Finalize() {\n \trow = 0;\n }\n \n-void WindowConstantAggregate::Compute(Vector &target, idx_t rid, idx_t start, idx_t end) {\n-\t//\tFind the partition containing [start, end)\n-\twhile (start < partition_offsets[partition] || partition_offsets[partition + 1] <= start) {\n-\t\t++partition;\n+void WindowConstantAggregate::Evaluate(const idx_t *begins, const idx_t *ends, Vector &target, idx_t count) {\n+\t//\tChunk up the constants and copy them one at a time\n+\tidx_t matched = 0;\n+\tidx_t target_offset = 0;\n+\tfor (idx_t i = 0; i < count; ++i) {\n+\t\tconst auto begin = begins[i];\n+\t\t//\tFind the partition containing [begin, end)\n+\t\twhile (partition_offsets[partition + 1] <= begin) {\n+\t\t\t//\tFlush the previous partition's data\n+\t\t\tif (matched) {\n+\t\t\t\tVectorOperations::Copy(*results, target, matches, matched, 0, target_offset);\n+\t\t\t\ttarget_offset += matched;\n+\t\t\t\tmatched = 0;\n+\t\t\t}\n+\t\t\t++partition;\n+\t\t}\n+\n+\t\tmatches.set_index(matched++, partition);\n+\t}\n+\n+\t//\tFlush the last partition\n+\tif (matched) {\n+\t\tVectorOperations::Copy(*results, target, matches, matched, 0, target_offset);\n+\t}\n+}\n+\n+//===--------------------------------------------------------------------===//\n+// WindowCustomAggregate\n+//===--------------------------------------------------------------------===//\n+WindowCustomAggregate::WindowCustomAggregate(AggregateObject aggr, const LogicalType &result_type, idx_t count)\n+    : WindowAggregateState(std::move(aggr), result_type, count) {\n+\t// if we have a frame-by-frame method, share the single state\n+\tAggregateInit();\n+}\n+\n+WindowCustomAggregate::~WindowCustomAggregate() {\n+\tif (aggr.function.destructor) {\n+\t\tAggregateInputData aggr_input_data(aggr.GetFunctionData(), Allocator::DefaultAllocator());\n+\t\taggr.function.destructor(statef, aggr_input_data, 1);\n \t}\n-\tD_ASSERT(partition_offsets[partition] <= start);\n-\tD_ASSERT(partition + 1 < partition_offsets.size());\n-\tD_ASSERT(end <= partition_offsets[partition + 1]);\n+}\n+\n+void WindowCustomAggregate::Compute(Vector &result, idx_t rid, idx_t begin, idx_t end) {\n+\t// Frame boundaries\n+\tauto prev = frame;\n+\tframe = FrameBounds(begin, end);\n \n-\t// Copy the value\n-\tVectorOperations::Copy(*results, target, partition + 1, partition, rid);\n+\t// Extract the range\n+\tAggregateInputData aggr_input_data(aggr.GetFunctionData(), Allocator::DefaultAllocator());\n+\taggr.function.window(inputs.data.data(), filter_mask, aggr_input_data, inputs.ColumnCount(), state.data(), frame,\n+\t                     prev, result, rid, 0);\n }\n \n //===--------------------------------------------------------------------===//\n // WindowSegmentTree\n //===--------------------------------------------------------------------===//\n-WindowSegmentTree::WindowSegmentTree(AggregateObject aggr_p, const LogicalType &result_type_p, DataChunk *input,\n-                                     const ValidityMask &filter_mask_p, WindowAggregationMode mode_p)\n-    : aggr(std::move(aggr_p)), result_type(result_type_p), state(aggr.function.state_size()),\n-      statep(Value::POINTER(CastPointerToValue(state.data()))), frame(0, 0),\n-      statev(Value::POINTER(CastPointerToValue(state.data()))), internal_nodes(0), input_ref(input),\n-      filter_mask(filter_mask_p), mode(mode_p) {\n-\tstatep.Flatten(input->size());\n-\tstatev.SetVectorType(VectorType::FLAT_VECTOR); // Prevent conversion of results to constants\n-\n-\tif (input_ref && input_ref->ColumnCount() > 0) {\n-\t\tfilter_sel.Initialize(input->size());\n-\t\tinputs.Initialize(Allocator::DefaultAllocator(), input_ref->GetTypes());\n-\t\t// if we have a frame-by-frame method, share the single state\n-\t\tif (aggr.function.window && UseWindowAPI()) {\n-\t\t\tAggregateInit();\n-\t\t\tinputs.Reference(*input_ref);\n-\t\t} else {\n-\t\t\tinputs.SetCapacity(*input_ref);\n-\t\t\tif (aggr.function.combine && UseCombineAPI()) {\n-\t\t\t\tConstructTree();\n-\t\t\t}\n+WindowSegmentTree::WindowSegmentTree(AggregateObject aggr, const LogicalType &result_type, idx_t count,\n+                                     WindowAggregationMode mode_p)\n+    : WindowAggregateState(std::move(aggr), result_type, count),\n+      statep(Value::POINTER(CastPointerToValue(state.data()))), frame(0, 0), statel(LogicalType::POINTER),\n+      flush_count(0), internal_nodes(0), mode(mode_p) {\n+\tstate.resize(state_size * STANDARD_VECTOR_SIZE);\n+\tstatep.Flatten(STANDARD_VECTOR_SIZE);\n+\n+\t//\tBuild the finalise vector that just points to the result states\n+\tdata_ptr_t state_ptr = state.data();\n+\tD_ASSERT(statef.GetVectorType() == VectorType::FLAT_VECTOR);\n+\tstatef.SetVectorType(VectorType::CONSTANT_VECTOR);\n+\tstatef.Flatten(STANDARD_VECTOR_SIZE);\n+\tauto fdata = FlatVector::GetData<data_ptr_t>(statef);\n+\tfor (idx_t i = 0; i < STANDARD_VECTOR_SIZE; ++i) {\n+\t\tfdata[i] = state_ptr;\n+\t\tstate_ptr += state_size;\n+\t}\n+}\n+\n+void WindowSegmentTree::Finalize() {\n+\tif (inputs.ColumnCount() > 0) {\n+\t\tleaves.Initialize(Allocator::DefaultAllocator(), inputs.GetTypes());\n+\t\tfilter_sel.Initialize();\n+\t\tif (aggr.function.combine && UseCombineAPI()) {\n+\t\t\tConstructTree();\n \t\t}\n \t}\n }\n@@ -217,7 +298,7 @@ WindowSegmentTree::~WindowSegmentTree() {\n \tVector addresses(LogicalType::POINTER, data_ptr_cast(address_data));\n \tidx_t count = 0;\n \tfor (idx_t i = 0; i < internal_nodes; i++) {\n-\t\taddress_data[count++] = data_ptr_t(levels_flat_native.get() + i * state.size());\n+\t\taddress_data[count++] = data_ptr_t(levels_flat_native.get() + i * state_size);\n \t\tif (count == STANDARD_VECTOR_SIZE) {\n \t\t\taggr.function.destructor(addresses, aggr_input_data, count);\n \t\t\tcount = 0;\n@@ -226,92 +307,92 @@ WindowSegmentTree::~WindowSegmentTree() {\n \tif (count > 0) {\n \t\taggr.function.destructor(addresses, aggr_input_data, count);\n \t}\n-\n-\tif (aggr.function.window && UseWindowAPI()) {\n-\t\taggr.function.destructor(statev, aggr_input_data, 1);\n-\t}\n }\n \n-void WindowSegmentTree::AggregateInit() {\n-\taggr.function.initialize(state.data());\n-}\n+void WindowSegmentTree::FlushStates(bool combining) {\n+\tif (!flush_count) {\n+\t\treturn;\n+\t}\n \n-void WindowSegmentTree::AggegateFinal(Vector &result, idx_t rid) {\n \tAggregateInputData aggr_input_data(aggr.GetFunctionData(), Allocator::DefaultAllocator());\n-\taggr.function.finalize(statev, aggr_input_data, result, 1, rid);\n-\n-\tif (aggr.function.destructor) {\n-\t\taggr.function.destructor(statev, aggr_input_data, 1);\n+\tif (combining) {\n+\t\tstatel.Verify(flush_count);\n+\t\taggr.function.combine(statel, statep, aggr_input_data, flush_count);\n+\t} else {\n+\t\tleaves.Reference(inputs);\n+\t\tleaves.Slice(filter_sel, flush_count);\n+\t\taggr.function.update(&leaves.data[0], aggr_input_data, leaves.ColumnCount(), statep, flush_count);\n \t}\n-}\n \n-void WindowSegmentTree::ExtractFrame(idx_t begin, idx_t end) {\n-\tconst auto size = end - begin;\n-\n-\tauto &chunk = *input_ref;\n-\tconst auto input_count = input_ref->ColumnCount();\n-\tinputs.SetCardinality(size);\n-\tfor (idx_t i = 0; i < input_count; ++i) {\n-\t\tauto &v = inputs.data[i];\n-\t\tauto &vec = chunk.data[i];\n-\t\tv.Slice(vec, begin, end);\n-\t\tv.Verify(size);\n-\t}\n+\tflush_count = 0;\n+}\n \n-\t// Slice to any filtered rows\n-\tif (!filter_mask.AllValid()) {\n-\t\tidx_t filtered = 0;\n+void WindowSegmentTree::ExtractFrame(idx_t begin, idx_t end, data_ptr_t state_ptr) {\n+\tconst auto count = end - begin;\n+\tD_ASSERT(count <= TREE_FANOUT);\n+\n+\t//\tIf we are not filtering,\n+\t//\tjust update the shared dictionary selection to the range\n+\t//\tOtherwise set it to the input rows that pass the filter\n+\tauto states = FlatVector::GetData<data_ptr_t>(statep);\n+\tif (filter_mask.AllValid()) {\n+\t\tfor (idx_t i = 0; i < count; ++i) {\n+\t\t\tstates[flush_count] = state_ptr;\n+\t\t\tfilter_sel.set_index(flush_count++, begin + i);\n+\t\t\tif (flush_count >= STANDARD_VECTOR_SIZE) {\n+\t\t\t\tFlushStates(false);\n+\t\t\t}\n+\t\t}\n+\t} else {\n \t\tfor (idx_t i = begin; i < end; ++i) {\n \t\t\tif (filter_mask.RowIsValid(i)) {\n-\t\t\t\tfilter_sel.set_index(filtered++, i - begin);\n+\t\t\t\tstates[flush_count] = state_ptr;\n+\t\t\t\tfilter_sel.set_index(flush_count++, i);\n+\t\t\t\tif (flush_count >= STANDARD_VECTOR_SIZE) {\n+\t\t\t\t\tFlushStates(false);\n+\t\t\t\t}\n \t\t\t}\n \t\t}\n-\t\tif (filtered != inputs.size()) {\n-\t\t\tinputs.Slice(filter_sel, filtered);\n-\t\t}\n \t}\n }\n \n-void WindowSegmentTree::WindowSegmentValue(idx_t l_idx, idx_t begin, idx_t end) {\n+void WindowSegmentTree::WindowSegmentValue(idx_t l_idx, idx_t begin, idx_t end, data_ptr_t state_ptr) {\n \tD_ASSERT(begin <= end);\n \tif (begin == end || inputs.ColumnCount() == 0) {\n \t\treturn;\n \t}\n \n \tconst auto count = end - begin;\n-\tVector s(statep, 0, count);\n \tif (l_idx == 0) {\n-\t\tExtractFrame(begin, end);\n-\t\tAggregateInputData aggr_input_data(aggr.GetFunctionData(), Allocator::DefaultAllocator());\n-\t\tD_ASSERT(!inputs.data.empty());\n-\t\taggr.function.update(&inputs.data[0], aggr_input_data, input_ref->ColumnCount(), s, inputs.size());\n+\t\tExtractFrame(begin, end, state_ptr);\n \t} else {\n \t\t// find out where the states begin\n-\t\tdata_ptr_t begin_ptr = levels_flat_native.get() + state.size() * (begin + levels_flat_start[l_idx - 1]);\n+\t\tdata_ptr_t begin_ptr = levels_flat_native.get() + state_size * (begin + levels_flat_start[l_idx - 1]);\n \t\t// set up a vector of pointers that point towards the set of states\n-\t\tVector v(LogicalType::POINTER, count);\n-\t\tauto pdata = FlatVector::GetData<data_ptr_t>(v);\n+\t\tauto ldata = FlatVector::GetData<data_ptr_t>(statel);\n+\t\tauto pdata = FlatVector::GetData<data_ptr_t>(statep);\n \t\tfor (idx_t i = 0; i < count; i++) {\n-\t\t\tpdata[i] = begin_ptr + i * state.size();\n+\t\t\tpdata[flush_count] = state_ptr;\n+\t\t\tldata[flush_count++] = begin_ptr;\n+\t\t\tbegin_ptr += state_size;\n+\t\t\tif (flush_count >= STANDARD_VECTOR_SIZE) {\n+\t\t\t\tFlushStates(true);\n+\t\t\t}\n \t\t}\n-\t\tv.Verify(count);\n-\t\tAggregateInputData aggr_input_data(aggr.GetFunctionData(), Allocator::DefaultAllocator());\n-\t\taggr.function.combine(v, s, aggr_input_data, count);\n \t}\n }\n \n void WindowSegmentTree::ConstructTree() {\n-\tD_ASSERT(input_ref);\n \tD_ASSERT(inputs.ColumnCount() > 0);\n \n \t// compute space required to store internal nodes of segment tree\n \tinternal_nodes = 0;\n-\tidx_t level_nodes = input_ref->size();\n+\tidx_t level_nodes = inputs.size();\n \tdo {\n \t\tlevel_nodes = (level_nodes + (TREE_FANOUT - 1)) / TREE_FANOUT;\n \t\tinternal_nodes += level_nodes;\n \t} while (level_nodes > 1);\n-\tlevels_flat_native = make_unsafe_uniq_array<data_t>(internal_nodes * state.size());\n+\tlevels_flat_native = make_unsafe_uniq_array<data_t>(internal_nodes * state_size);\n \tlevels_flat_start.push_back(0);\n \n \tidx_t levels_flat_offset = 0;\n@@ -319,14 +400,14 @@ void WindowSegmentTree::ConstructTree() {\n \t// level 0 is data itself\n \tidx_t level_size;\n \t// iterate over the levels of the segment tree\n-\twhile ((level_size = (level_current == 0 ? input_ref->size()\n-\t                                         : levels_flat_offset - levels_flat_start[level_current - 1])) > 1) {\n+\twhile ((level_size =\n+\t            (level_current == 0 ? inputs.size() : levels_flat_offset - levels_flat_start[level_current - 1])) > 1) {\n \t\tfor (idx_t pos = 0; pos < level_size; pos += TREE_FANOUT) {\n \t\t\t// compute the aggregate for this entry in the segment tree\n-\t\t\tAggregateInit();\n-\t\t\tWindowSegmentValue(level_current, pos, MinValue(level_size, pos + TREE_FANOUT));\n-\n-\t\t\tmemcpy(levels_flat_native.get() + (levels_flat_offset * state.size()), state.data(), state.size());\n+\t\t\tdata_ptr_t state_ptr = levels_flat_native.get() + (levels_flat_offset * state_size);\n+\t\t\taggr.function.initialize(state_ptr);\n+\t\t\tWindowSegmentValue(level_current, pos, MinValue(level_size, pos + TREE_FANOUT), state_ptr);\n+\t\t\tFlushStates(level_current > 0);\n \n \t\t\tlevels_flat_offset++;\n \t\t}\n@@ -341,52 +422,129 @@ void WindowSegmentTree::ConstructTree() {\n \t}\n }\n \n-void WindowSegmentTree::Compute(Vector &result, idx_t rid, idx_t begin, idx_t end) {\n-\tD_ASSERT(input_ref);\n+void WindowSegmentTree::Evaluate(const idx_t *begins, const idx_t *ends, Vector &result, idx_t count) {\n+\tconst auto cant_combine = (!aggr.function.combine || !UseCombineAPI());\n+\tauto fdata = FlatVector::GetData<data_ptr_t>(statef);\n+\n+\t//\tFirst pass: aggregate the segment tree nodes\n+\t//\tShare adjacent identical states\n+\t//  We do this first because we want to share only tree aggregations\n+\tidx_t prev_begin = 1;\n+\tidx_t prev_end = 0;\n+\tauto ldata = FlatVector::GetData<data_ptr_t>(statel);\n+\tauto pdata = FlatVector::GetData<data_ptr_t>(statep);\n+\tdata_ptr_t prev_state = nullptr;\n+\tfor (idx_t rid = 0; rid < count; ++rid) {\n+\t\tauto state_ptr = fdata[rid];\n+\t\taggr.function.initialize(state_ptr);\n+\n+\t\tif (cant_combine) {\n+\t\t\t// Make sure we initialise all states\n+\t\t\tcontinue;\n+\t\t}\n \n-\t// If we have a window function, use that\n-\tif (aggr.function.window && UseWindowAPI()) {\n-\t\t// Frame boundaries\n-\t\tauto prev = frame;\n-\t\tframe = FrameBounds(begin, end);\n+\t\tauto begin = begins[rid];\n+\t\tauto end = ends[rid];\n+\t\tif (begin >= end) {\n+\t\t\tcontinue;\n+\t\t}\n \n-\t\t// Extract the range\n-\t\tAggregateInputData aggr_input_data(aggr.GetFunctionData(), Allocator::DefaultAllocator());\n-\t\taggr.function.window(input_ref->data.data(), filter_mask, aggr_input_data, inputs.ColumnCount(), state.data(),\n-\t\t                     frame, prev, result, rid, 0);\n-\t\treturn;\n-\t}\n+\t\t//\tSkip level 0\n+\t\tidx_t l_idx = 0;\n+\t\tfor (; l_idx < levels_flat_start.size() + 1; l_idx++) {\n+\t\t\tidx_t parent_begin = begin / TREE_FANOUT;\n+\t\t\tidx_t parent_end = end / TREE_FANOUT;\n+\t\t\tif (prev_state && l_idx == 1 && begin == prev_begin && end == prev_end) {\n+\t\t\t\t//\tJust combine the previous top level result\n+\t\t\t\tldata[flush_count] = prev_state;\n+\t\t\t\tpdata[flush_count] = state_ptr;\n+\t\t\t\tif (++flush_count >= STANDARD_VECTOR_SIZE) {\n+\t\t\t\t\tFlushStates(true);\n+\t\t\t\t}\n+\t\t\t\tbreak;\n+\t\t\t}\n \n-\tAggregateInit();\n+\t\t\tif (l_idx == 1) {\n+\t\t\t\tprev_state = state_ptr;\n+\t\t\t\tprev_begin = begin;\n+\t\t\t\tprev_end = end;\n+\t\t\t}\n \n-\t// Aggregate everything at once if we can't combine states\n-\tif (!aggr.function.combine || !UseCombineAPI()) {\n-\t\tWindowSegmentValue(0, begin, end);\n-\t\tAggegateFinal(result, rid);\n-\t\treturn;\n+\t\t\tif (parent_begin == parent_end) {\n+\t\t\t\tif (l_idx) {\n+\t\t\t\t\tWindowSegmentValue(l_idx, begin, end, state_ptr);\n+\t\t\t\t}\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tidx_t group_begin = parent_begin * TREE_FANOUT;\n+\t\t\tif (begin != group_begin) {\n+\t\t\t\tif (l_idx) {\n+\t\t\t\t\tWindowSegmentValue(l_idx, begin, group_begin + TREE_FANOUT, state_ptr);\n+\t\t\t\t}\n+\t\t\t\tparent_begin++;\n+\t\t\t}\n+\t\t\tidx_t group_end = parent_end * TREE_FANOUT;\n+\t\t\tif (end != group_end) {\n+\t\t\t\tif (l_idx) {\n+\t\t\t\t\tWindowSegmentValue(l_idx, group_end, end, state_ptr);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tbegin = parent_begin;\n+\t\t\tend = parent_end;\n+\t\t}\n \t}\n+\tFlushStates(true);\n+\n+\t//\tSecond pass: aggregate the ragged leaves\n+\t//\t(or everything if we can't combine)\n+\tfor (idx_t rid = 0; rid < count; ++rid) {\n+\t\tauto state_ptr = fdata[rid];\n \n-\tfor (idx_t l_idx = 0; l_idx < levels_flat_start.size() + 1; l_idx++) {\n+\t\tconst auto begin = begins[rid];\n+\t\tconst auto end = ends[rid];\n+\t\tif (begin >= end) {\n+\t\t\tcontinue;\n+\t\t}\n+\n+\t\t// Aggregate everything at once if we can't combine states\n \t\tidx_t parent_begin = begin / TREE_FANOUT;\n \t\tidx_t parent_end = end / TREE_FANOUT;\n-\t\tif (parent_begin == parent_end) {\n-\t\t\tWindowSegmentValue(l_idx, begin, end);\n-\t\t\tbreak;\n+\t\tif (parent_begin == parent_end || cant_combine) {\n+\t\t\tWindowSegmentValue(0, begin, end, state_ptr);\n+\t\t\tcontinue;\n \t\t}\n+\n \t\tidx_t group_begin = parent_begin * TREE_FANOUT;\n \t\tif (begin != group_begin) {\n-\t\t\tWindowSegmentValue(l_idx, begin, group_begin + TREE_FANOUT);\n+\t\t\tWindowSegmentValue(0, begin, group_begin + TREE_FANOUT, state_ptr);\n \t\t\tparent_begin++;\n \t\t}\n \t\tidx_t group_end = parent_end * TREE_FANOUT;\n \t\tif (end != group_end) {\n-\t\t\tWindowSegmentValue(l_idx, group_end, end);\n+\t\t\tWindowSegmentValue(0, group_end, end, state_ptr);\n \t\t}\n-\t\tbegin = parent_begin;\n-\t\tend = parent_end;\n \t}\n+\tFlushStates(false);\n \n-\tAggegateFinal(result, rid);\n+\t//\tFinalise the result aggregates\n+\tAggregateInputData aggr_input_data(aggr.GetFunctionData(), Allocator::DefaultAllocator());\n+\taggr.function.finalize(statef, aggr_input_data, result, count, 0);\n+\n+\t//\tDestruct the result aggregates\n+\tif (aggr.function.destructor) {\n+\t\taggr.function.destructor(statef, aggr_input_data, count);\n+\t}\n+\n+\t//\tSet the validity mask on  the invalid rows\n+\tauto &rmask = FlatVector::Validity(result);\n+\tfor (idx_t rid = 0; rid < count; ++rid) {\n+\t\tconst auto begin = begins[rid];\n+\t\tconst auto end = ends[rid];\n+\n+\t\tif (begin >= end) {\n+\t\t\trmask.SetInvalid(rid);\n+\t\t}\n+\t}\n }\n \n } // namespace duckdb\ndiff --git a/src/function/function.cpp b/src/function/function.cpp\nindex 59bf77ff1361..919eeae63160 100644\n--- a/src/function/function.cpp\n+++ b/src/function/function.cpp\n@@ -94,6 +94,8 @@ void BuiltinFunctions::Initialize() {\n \n \tRegisterDistributiveAggregates();\n \n+\tRegisterCompressedMaterializationFunctions();\n+\n \tRegisterGenericFunctions();\n \tRegisterOperators();\n \tRegisterSequenceFunctions();\ndiff --git a/src/function/scalar/CMakeLists.txt b/src/function/scalar/CMakeLists.txt\nindex e9d4e1c43d60..ab5e89428f4d 100644\n--- a/src/function/scalar/CMakeLists.txt\n+++ b/src/function/scalar/CMakeLists.txt\n@@ -1,3 +1,4 @@\n+add_subdirectory(compressed_materialization)\n add_subdirectory(generic)\n add_subdirectory(list)\n add_subdirectory(operators)\n@@ -8,6 +9,7 @@ add_subdirectory(system)\n add_library_unity(\n   duckdb_func_scalar\n   OBJECT\n+  compressed_materialization_functions.cpp\n   generic_functions.cpp\n   string_functions.cpp\n   strftime_format.cpp\ndiff --git a/src/function/scalar/compressed_materialization/CMakeLists.txt b/src/function/scalar/compressed_materialization/CMakeLists.txt\nnew file mode 100644\nindex 000000000000..205cac9c56cf\n--- /dev/null\n+++ b/src/function/scalar/compressed_materialization/CMakeLists.txt\n@@ -0,0 +1,5 @@\n+add_library_unity(duckdb_func_compressed_materialization OBJECT\n+                  compress_integral.cpp compress_string.cpp)\n+set(ALL_OBJECT_FILES\n+    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_func_compressed_materialization>\n+    PARENT_SCOPE)\ndiff --git a/src/function/scalar/compressed_materialization/compress_integral.cpp b/src/function/scalar/compressed_materialization/compress_integral.cpp\nnew file mode 100644\nindex 000000000000..5d0eedf4df09\n--- /dev/null\n+++ b/src/function/scalar/compressed_materialization/compress_integral.cpp\n@@ -0,0 +1,212 @@\n+#include \"duckdb/function/function_set.hpp\"\n+#include \"duckdb/function/scalar/compressed_materialization_functions.hpp\"\n+\n+namespace duckdb {\n+\n+static string IntegralCompressFunctionName(const LogicalType &result_type) {\n+\treturn StringUtil::Format(\"__internal_compress_integral_%s\",\n+\t                          StringUtil::Lower(LogicalTypeIdToString(result_type.id())));\n+}\n+\n+template <class INPUT_TYPE, class RESULT_TYPE>\n+struct TemplatedIntegralCompress {\n+\tstatic inline RESULT_TYPE Operation(const INPUT_TYPE &input, const INPUT_TYPE &min_val) {\n+\t\tD_ASSERT(min_val <= input);\n+\t\treturn input - min_val;\n+\t}\n+};\n+\n+template <class RESULT_TYPE>\n+struct TemplatedIntegralCompress<hugeint_t, RESULT_TYPE> {\n+\tstatic inline RESULT_TYPE Operation(const hugeint_t &input, const hugeint_t &min_val) {\n+\t\tD_ASSERT(min_val <= input);\n+\t\treturn (input - min_val).lower;\n+\t}\n+};\n+\n+template <class INPUT_TYPE, class RESULT_TYPE>\n+static void IntegralCompressFunction(DataChunk &args, ExpressionState &state, Vector &result) {\n+\tD_ASSERT(args.ColumnCount() == 2);\n+\tD_ASSERT(args.data[1].GetVectorType() == VectorType::CONSTANT_VECTOR);\n+\tconst auto min_val = ConstantVector::GetData<INPUT_TYPE>(args.data[1])[0];\n+\tUnaryExecutor::Execute<INPUT_TYPE, RESULT_TYPE>(args.data[0], result, args.size(), [&](const INPUT_TYPE &input) {\n+\t\treturn TemplatedIntegralCompress<INPUT_TYPE, RESULT_TYPE>::Operation(input, min_val);\n+\t});\n+}\n+\n+template <class INPUT_TYPE, class RESULT_TYPE>\n+static scalar_function_t GetIntegralCompressFunction(const LogicalType &input_type, const LogicalType &result_type) {\n+\treturn IntegralCompressFunction<INPUT_TYPE, RESULT_TYPE>;\n+}\n+\n+template <class INPUT_TYPE>\n+static scalar_function_t GetIntegralCompressFunctionResultSwitch(const LogicalType &input_type,\n+                                                                 const LogicalType &result_type) {\n+\tswitch (result_type.id()) {\n+\tcase LogicalTypeId::UTINYINT:\n+\t\treturn GetIntegralCompressFunction<INPUT_TYPE, uint8_t>(input_type, result_type);\n+\tcase LogicalTypeId::USMALLINT:\n+\t\treturn GetIntegralCompressFunction<INPUT_TYPE, uint16_t>(input_type, result_type);\n+\tcase LogicalTypeId::UINTEGER:\n+\t\treturn GetIntegralCompressFunction<INPUT_TYPE, uint32_t>(input_type, result_type);\n+\tcase LogicalTypeId::UBIGINT:\n+\t\treturn GetIntegralCompressFunction<INPUT_TYPE, uint64_t>(input_type, result_type);\n+\tdefault:\n+\t\tthrow InternalException(\"Unexpected result type in GetIntegralCompressFunctionResultSwitch\");\n+\t}\n+}\n+\n+static scalar_function_t GetIntegralCompressFunctionInputSwitch(const LogicalType &input_type,\n+                                                                const LogicalType &result_type) {\n+\tswitch (input_type.id()) {\n+\tcase LogicalTypeId::SMALLINT:\n+\t\treturn GetIntegralCompressFunctionResultSwitch<int16_t>(input_type, result_type);\n+\tcase LogicalTypeId::INTEGER:\n+\t\treturn GetIntegralCompressFunctionResultSwitch<int32_t>(input_type, result_type);\n+\tcase LogicalTypeId::BIGINT:\n+\t\treturn GetIntegralCompressFunctionResultSwitch<int64_t>(input_type, result_type);\n+\tcase LogicalTypeId::HUGEINT:\n+\t\treturn GetIntegralCompressFunctionResultSwitch<hugeint_t>(input_type, result_type);\n+\tcase LogicalTypeId::USMALLINT:\n+\t\treturn GetIntegralCompressFunctionResultSwitch<uint16_t>(input_type, result_type);\n+\tcase LogicalTypeId::UINTEGER:\n+\t\treturn GetIntegralCompressFunctionResultSwitch<uint32_t>(input_type, result_type);\n+\tcase LogicalTypeId::UBIGINT:\n+\t\treturn GetIntegralCompressFunctionResultSwitch<uint64_t>(input_type, result_type);\n+\tdefault:\n+\t\tthrow InternalException(\"Unexpected input type in GetIntegralCompressFunctionInputSwitch\");\n+\t}\n+}\n+\n+static string IntegralDecompressFunctionName(const LogicalType &result_type) {\n+\treturn StringUtil::Format(\"__internal_decompress_integral_%s\",\n+\t                          StringUtil::Lower(LogicalTypeIdToString(result_type.id())));\n+}\n+\n+template <class INPUT_TYPE, class RESULT_TYPE>\n+static inline RESULT_TYPE TemplatedIntegralDecompress(const INPUT_TYPE &input, const RESULT_TYPE &min_val) {\n+\treturn min_val + input;\n+}\n+\n+template <class INPUT_TYPE, class RESULT_TYPE>\n+static void IntegralDecompressFunction(DataChunk &args, ExpressionState &state, Vector &result) {\n+\tD_ASSERT(args.ColumnCount() == 2);\n+\tD_ASSERT(args.data[1].GetVectorType() == VectorType::CONSTANT_VECTOR);\n+\tD_ASSERT(args.data[1].GetType() == result.GetType());\n+\tconst auto min_val = ConstantVector::GetData<RESULT_TYPE>(args.data[1])[0];\n+\tUnaryExecutor::Execute<INPUT_TYPE, RESULT_TYPE>(args.data[0], result, args.size(), [&](const INPUT_TYPE &input) {\n+\t\treturn TemplatedIntegralDecompress<INPUT_TYPE, RESULT_TYPE>(input, min_val);\n+\t});\n+}\n+\n+template <class INPUT_TYPE, class RESULT_TYPE>\n+static scalar_function_t GetIntegralDecompressFunction(const LogicalType &input_type, const LogicalType &result_type) {\n+\treturn IntegralDecompressFunction<INPUT_TYPE, RESULT_TYPE>;\n+}\n+\n+template <class INPUT_TYPE>\n+static scalar_function_t GetIntegralDecompressFunctionResultSwitch(const LogicalType &input_type,\n+                                                                   const LogicalType &result_type) {\n+\tswitch (result_type.id()) {\n+\tcase LogicalTypeId::SMALLINT:\n+\t\treturn GetIntegralDecompressFunction<INPUT_TYPE, int16_t>(input_type, result_type);\n+\tcase LogicalTypeId::INTEGER:\n+\t\treturn GetIntegralDecompressFunction<INPUT_TYPE, int32_t>(input_type, result_type);\n+\tcase LogicalTypeId::BIGINT:\n+\t\treturn GetIntegralDecompressFunction<INPUT_TYPE, int64_t>(input_type, result_type);\n+\tcase LogicalTypeId::HUGEINT:\n+\t\treturn GetIntegralDecompressFunction<INPUT_TYPE, hugeint_t>(input_type, result_type);\n+\tcase LogicalTypeId::USMALLINT:\n+\t\treturn GetIntegralDecompressFunction<INPUT_TYPE, uint16_t>(input_type, result_type);\n+\tcase LogicalTypeId::UINTEGER:\n+\t\treturn GetIntegralDecompressFunction<INPUT_TYPE, uint32_t>(input_type, result_type);\n+\tcase LogicalTypeId::UBIGINT:\n+\t\treturn GetIntegralDecompressFunction<INPUT_TYPE, uint64_t>(input_type, result_type);\n+\tdefault:\n+\t\tthrow InternalException(\"Unexpected input type in GetIntegralDecompressFunctionSetSwitch\");\n+\t}\n+}\n+\n+static scalar_function_t GetIntegralDecompressFunctionInputSwitch(const LogicalType &input_type,\n+                                                                  const LogicalType &result_type) {\n+\tswitch (input_type.id()) {\n+\tcase LogicalTypeId::UTINYINT:\n+\t\treturn GetIntegralDecompressFunctionResultSwitch<uint8_t>(input_type, result_type);\n+\tcase LogicalTypeId::USMALLINT:\n+\t\treturn GetIntegralDecompressFunctionResultSwitch<uint16_t>(input_type, result_type);\n+\tcase LogicalTypeId::UINTEGER:\n+\t\treturn GetIntegralDecompressFunctionResultSwitch<uint32_t>(input_type, result_type);\n+\tcase LogicalTypeId::UBIGINT:\n+\t\treturn GetIntegralDecompressFunctionResultSwitch<uint64_t>(input_type, result_type);\n+\tdefault:\n+\t\tthrow InternalException(\"Unexpected result type in GetIntegralDecompressFunctionInputSwitch\");\n+\t}\n+}\n+\n+static void CMIntegralSerialize(FieldWriter &writer, const FunctionData *bind_data_p, const ScalarFunction &function) {\n+\twriter.WriteRegularSerializableList(function.arguments);\n+\twriter.WriteSerializable(function.return_type);\n+}\n+\n+template <scalar_function_t (*GET_FUNCTION)(const LogicalType &, const LogicalType &)>\n+unique_ptr<FunctionData> CMIntegralDeserialize(PlanDeserializationState &state, FieldReader &reader,\n+                                               ScalarFunction &function) {\n+\tfunction.arguments = reader.ReadRequiredSerializableList<LogicalType, LogicalType>();\n+\tfunction.function =\n+\t    GET_FUNCTION(function.arguments[0], reader.ReadRequiredSerializable<LogicalType, LogicalType>());\n+\treturn nullptr;\n+}\n+\n+ScalarFunction CMIntegralCompressFun::GetFunction(const LogicalType &input_type, const LogicalType &result_type) {\n+\tScalarFunction result(IntegralCompressFunctionName(result_type), {input_type, input_type}, result_type,\n+\t                      GetIntegralCompressFunctionInputSwitch(input_type, result_type),\n+\t                      CompressedMaterializationFunctions::Bind);\n+\tresult.serialize = CMIntegralSerialize;\n+\tresult.deserialize = CMIntegralDeserialize<GetIntegralCompressFunctionInputSwitch>;\n+\treturn result;\n+}\n+\n+static ScalarFunctionSet GetIntegralCompressFunctionSet(const LogicalType &result_type) {\n+\tScalarFunctionSet set(IntegralCompressFunctionName(result_type));\n+\tfor (const auto &input_type : LogicalType::Integral()) {\n+\t\tif (GetTypeIdSize(result_type.InternalType()) < GetTypeIdSize(input_type.InternalType())) {\n+\t\t\tset.AddFunction(CMIntegralCompressFun::GetFunction(input_type, result_type));\n+\t\t}\n+\t}\n+\treturn set;\n+}\n+\n+void CMIntegralCompressFun::RegisterFunction(BuiltinFunctions &set) {\n+\tfor (const auto &result_type : CompressedMaterializationFunctions::IntegralTypes()) {\n+\t\tset.AddFunction(GetIntegralCompressFunctionSet(result_type));\n+\t}\n+}\n+\n+ScalarFunction CMIntegralDecompressFun::GetFunction(const LogicalType &input_type, const LogicalType &result_type) {\n+\tScalarFunction result(IntegralDecompressFunctionName(result_type), {input_type, result_type}, result_type,\n+\t                      GetIntegralDecompressFunctionInputSwitch(input_type, result_type),\n+\t                      CompressedMaterializationFunctions::Bind);\n+\tresult.serialize = CMIntegralSerialize;\n+\tresult.deserialize = CMIntegralDeserialize<GetIntegralDecompressFunctionInputSwitch>;\n+\treturn result;\n+}\n+\n+static ScalarFunctionSet GetIntegralDecompressFunctionSet(const LogicalType &result_type) {\n+\tScalarFunctionSet set(IntegralDecompressFunctionName(result_type));\n+\tfor (const auto &input_type : CompressedMaterializationFunctions::IntegralTypes()) {\n+\t\tif (GetTypeIdSize(result_type.InternalType()) > GetTypeIdSize(input_type.InternalType())) {\n+\t\t\tset.AddFunction(CMIntegralDecompressFun::GetFunction(input_type, result_type));\n+\t\t}\n+\t}\n+\treturn set;\n+}\n+\n+void CMIntegralDecompressFun::RegisterFunction(BuiltinFunctions &set) {\n+\tfor (const auto &result_type : LogicalType::Integral()) {\n+\t\tif (GetTypeIdSize(result_type.InternalType()) > 1) {\n+\t\t\tset.AddFunction(GetIntegralDecompressFunctionSet(result_type));\n+\t\t}\n+\t}\n+}\n+\n+} // namespace duckdb\ndiff --git a/src/function/scalar/compressed_materialization/compress_string.cpp b/src/function/scalar/compressed_materialization/compress_string.cpp\nnew file mode 100644\nindex 000000000000..8c270836d892\n--- /dev/null\n+++ b/src/function/scalar/compressed_materialization/compress_string.cpp\n@@ -0,0 +1,249 @@\n+#include \"duckdb/common/bswap.hpp\"\n+#include \"duckdb/function/scalar/compressed_materialization_functions.hpp\"\n+\n+namespace duckdb {\n+\n+static string StringCompressFunctionName(const LogicalType &result_type) {\n+\treturn StringUtil::Format(\"__internal_compress_string_%s\",\n+\t                          StringUtil::Lower(LogicalTypeIdToString(result_type.id())));\n+}\n+\n+template <idx_t LENGTH>\n+static inline void TemplatedReverseMemCpy(const data_ptr_t __restrict &dest, const const_data_ptr_t __restrict &src) {\n+\tfor (idx_t i = 0; i < LENGTH; i++) {\n+\t\tdest[i] = src[LENGTH - 1 - i];\n+\t}\n+}\n+\n+static inline void ReverseMemCpy(const data_ptr_t __restrict &dest, const const_data_ptr_t __restrict &src,\n+                                 const idx_t &length) {\n+\tfor (idx_t i = 0; i < length; i++) {\n+\t\tdest[i] = src[length - 1 - i];\n+\t}\n+}\n+\n+template <class RESULT_TYPE>\n+static inline RESULT_TYPE StringCompressInternal(const string_t &input) {\n+\tRESULT_TYPE result;\n+\tconst auto result_ptr = data_ptr_cast(&result);\n+\tif (sizeof(RESULT_TYPE) <= string_t::INLINE_LENGTH) {\n+\t\tTemplatedReverseMemCpy<sizeof(RESULT_TYPE)>(result_ptr, const_data_ptr_cast(input.GetPrefix()));\n+\t} else if (input.IsInlined()) {\n+\t\tstatic constexpr auto REMAINDER = sizeof(RESULT_TYPE) - string_t::INLINE_LENGTH;\n+\t\tTemplatedReverseMemCpy<string_t::INLINE_LENGTH>(result_ptr + REMAINDER, const_data_ptr_cast(input.GetPrefix()));\n+\t\tmemset(result_ptr, '\\0', REMAINDER);\n+\t} else {\n+\t\tconst auto remainder = sizeof(RESULT_TYPE) - input.GetSize();\n+\t\tReverseMemCpy(result_ptr + remainder, data_ptr_cast(input.GetPointer()), input.GetSize());\n+\t\tmemset(result_ptr, '\\0', remainder);\n+\t}\n+\tresult_ptr[0] = input.GetSize();\n+\treturn result;\n+}\n+\n+template <class RESULT_TYPE>\n+static inline RESULT_TYPE StringCompress(const string_t &input) {\n+\tD_ASSERT(input.GetSize() < sizeof(RESULT_TYPE));\n+\treturn StringCompressInternal<RESULT_TYPE>(input);\n+}\n+\n+template <class RESULT_TYPE>\n+static inline RESULT_TYPE MiniStringCompress(const string_t &input) {\n+\tif (sizeof(RESULT_TYPE) <= string_t::INLINE_LENGTH) {\n+\t\treturn input.GetSize() + *const_data_ptr_cast(input.GetPrefix());\n+\t} else if (input.GetSize() == 0) {\n+\t\treturn 0;\n+\t} else {\n+\t\treturn input.GetSize() + *const_data_ptr_cast(input.GetPointer());\n+\t}\n+}\n+\n+template <>\n+inline uint8_t StringCompress(const string_t &input) {\n+\tD_ASSERT(input.GetSize() <= sizeof(uint8_t));\n+\treturn MiniStringCompress<uint8_t>(input);\n+}\n+\n+template <class RESULT_TYPE>\n+static void StringCompressFunction(DataChunk &args, ExpressionState &state, Vector &result) {\n+\tUnaryExecutor::Execute<string_t, RESULT_TYPE>(args.data[0], result, args.size(), StringCompress<RESULT_TYPE>);\n+}\n+\n+template <class RESULT_TYPE>\n+static scalar_function_t GetStringCompressFunction(const LogicalType &result_type) {\n+\treturn StringCompressFunction<RESULT_TYPE>;\n+}\n+\n+static scalar_function_t GetStringCompressFunctionSwitch(const LogicalType &result_type) {\n+\tswitch (result_type.id()) {\n+\tcase LogicalTypeId::UTINYINT:\n+\t\treturn GetStringCompressFunction<uint8_t>(result_type);\n+\tcase LogicalTypeId::USMALLINT:\n+\t\treturn GetStringCompressFunction<uint16_t>(result_type);\n+\tcase LogicalTypeId::UINTEGER:\n+\t\treturn GetStringCompressFunction<uint32_t>(result_type);\n+\tcase LogicalTypeId::UBIGINT:\n+\t\treturn GetStringCompressFunction<uint64_t>(result_type);\n+\tcase LogicalTypeId::HUGEINT:\n+\t\treturn GetStringCompressFunction<hugeint_t>(result_type);\n+\tdefault:\n+\t\tthrow InternalException(\"Unexpected type in GetStringCompressFunctionSwitch\");\n+\t}\n+}\n+\n+static string StringDecompressFunctionName() {\n+\treturn \"__internal_decompress_string\";\n+}\n+\n+struct StringDecompressLocalState : public FunctionLocalState {\n+public:\n+\texplicit StringDecompressLocalState(ClientContext &context) : allocator(Allocator::Get(context)) {\n+\t}\n+\n+\tstatic unique_ptr<FunctionLocalState> Init(ExpressionState &state, const BoundFunctionExpression &expr,\n+\t                                           FunctionData *bind_data) {\n+\t\treturn make_uniq<StringDecompressLocalState>(state.GetContext());\n+\t}\n+\n+public:\n+\tArenaAllocator allocator;\n+};\n+\n+template <class INPUT_TYPE>\n+static inline string_t StringDecompress(const INPUT_TYPE &input, ArenaAllocator &allocator) {\n+\tconst auto input_ptr = const_data_ptr_cast(&input);\n+\tstring_t result(input_ptr[0]);\n+\tif (sizeof(INPUT_TYPE) <= string_t::INLINE_LENGTH) {\n+\t\tconst auto result_ptr = data_ptr_cast(result.GetPrefixWriteable());\n+\t\tTemplatedReverseMemCpy<sizeof(INPUT_TYPE)>(result_ptr, input_ptr);\n+\t\tmemset(result_ptr + sizeof(INPUT_TYPE) - 1, '\\0', string_t::INLINE_LENGTH - sizeof(INPUT_TYPE) + 1);\n+\t} else if (result.GetSize() <= string_t::INLINE_LENGTH) {\n+\t\tstatic constexpr auto REMAINDER = sizeof(INPUT_TYPE) - string_t::INLINE_LENGTH;\n+\t\tconst auto result_ptr = data_ptr_cast(result.GetPrefixWriteable());\n+\t\tTemplatedReverseMemCpy<string_t::INLINE_LENGTH>(result_ptr, input_ptr + REMAINDER);\n+\t} else {\n+\t\tresult.SetPointer(char_ptr_cast(allocator.Allocate(sizeof(INPUT_TYPE))));\n+\t\tTemplatedReverseMemCpy<sizeof(INPUT_TYPE)>(data_ptr_cast(result.GetPointer()), input_ptr);\n+\t\tmemcpy(result.GetPrefixWriteable(), result.GetPointer(), string_t::PREFIX_LENGTH);\n+\t}\n+\treturn result;\n+}\n+\n+template <class INPUT_TYPE>\n+static inline string_t MiniStringDecompress(const INPUT_TYPE &input, ArenaAllocator &allocator) {\n+\tif (input == 0) {\n+\t\tstring_t result(uint32_t(0));\n+\t\tmemset(result.GetPrefixWriteable(), '\\0', string_t::INLINE_BYTES);\n+\t\treturn result;\n+\t}\n+\n+\tstring_t result(1);\n+\tif (sizeof(INPUT_TYPE) <= string_t::INLINE_LENGTH) {\n+\t\tmemset(result.GetPrefixWriteable(), '\\0', string_t::INLINE_BYTES);\n+\t\t*data_ptr_cast(result.GetPrefixWriteable()) = input - 1;\n+\t} else {\n+\t\tresult.SetPointer(char_ptr_cast(allocator.Allocate(1)));\n+\t\t*data_ptr_cast(result.GetPointer()) = input - 1;\n+\t\tmemset(result.GetPrefixWriteable(), '\\0', string_t::PREFIX_LENGTH);\n+\t\t*result.GetPrefixWriteable() = *result.GetPointer();\n+\t}\n+\treturn result;\n+}\n+\n+template <>\n+inline string_t StringDecompress(const uint8_t &input, ArenaAllocator &allocator) {\n+\treturn MiniStringDecompress<uint8_t>(input, allocator);\n+}\n+\n+template <class INPUT_TYPE>\n+static void StringDecompressFunction(DataChunk &args, ExpressionState &state, Vector &result) {\n+\tauto &allocator = ExecuteFunctionState::GetFunctionState(state)->Cast<StringDecompressLocalState>().allocator;\n+\tallocator.Reset();\n+\tUnaryExecutor::Execute<INPUT_TYPE, string_t>(args.data[0], result, args.size(), [&](const INPUT_TYPE &input) {\n+\t\treturn StringDecompress<INPUT_TYPE>(input, allocator);\n+\t});\n+}\n+\n+template <class INPUT_TYPE>\n+static scalar_function_t GetStringDecompressFunction(const LogicalType &input_type) {\n+\treturn StringDecompressFunction<INPUT_TYPE>;\n+}\n+\n+static scalar_function_t GetStringDecompressFunctionSwitch(const LogicalType &input_type) {\n+\tswitch (input_type.id()) {\n+\tcase LogicalTypeId::UTINYINT:\n+\t\treturn GetStringDecompressFunction<uint8_t>(input_type);\n+\tcase LogicalTypeId::USMALLINT:\n+\t\treturn GetStringDecompressFunction<uint16_t>(input_type);\n+\tcase LogicalTypeId::UINTEGER:\n+\t\treturn GetStringDecompressFunction<uint32_t>(input_type);\n+\tcase LogicalTypeId::UBIGINT:\n+\t\treturn GetStringDecompressFunction<uint64_t>(input_type);\n+\tcase LogicalTypeId::HUGEINT:\n+\t\treturn GetStringDecompressFunction<hugeint_t>(input_type);\n+\tdefault:\n+\t\tthrow InternalException(\"Unexpected type in GetStringDecompressFunctionSwitch\");\n+\t}\n+}\n+\n+static void CMStringCompressSerialize(FieldWriter &writer, const FunctionData *bind_data_p,\n+                                      const ScalarFunction &function) {\n+\twriter.WriteRegularSerializableList(function.arguments);\n+\twriter.WriteSerializable(function.return_type);\n+}\n+\n+unique_ptr<FunctionData> CMStringCompressDeserialize(PlanDeserializationState &state, FieldReader &reader,\n+                                                     ScalarFunction &function) {\n+\tfunction.arguments = reader.ReadRequiredSerializableList<LogicalType, LogicalType>();\n+\tfunction.function = GetStringCompressFunctionSwitch(reader.ReadRequiredSerializable<LogicalType, LogicalType>());\n+\treturn nullptr;\n+}\n+\n+ScalarFunction CMStringCompressFun::GetFunction(const LogicalType &result_type) {\n+\tScalarFunction result(StringCompressFunctionName(result_type), {LogicalType::VARCHAR}, result_type,\n+\t                      GetStringCompressFunctionSwitch(result_type), CompressedMaterializationFunctions::Bind);\n+\tresult.serialize = CMStringCompressSerialize;\n+\tresult.deserialize = CMStringCompressDeserialize;\n+\treturn result;\n+}\n+\n+void CMStringCompressFun::RegisterFunction(BuiltinFunctions &set) {\n+\tfor (const auto &result_type : CompressedMaterializationFunctions::StringTypes()) {\n+\t\tset.AddFunction(CMStringCompressFun::GetFunction(result_type));\n+\t}\n+}\n+\n+static void CMStringDecompressSerialize(FieldWriter &writer, const FunctionData *bind_data_p,\n+                                        const ScalarFunction &function) {\n+\twriter.WriteRegularSerializableList(function.arguments);\n+}\n+\n+unique_ptr<FunctionData> CMStringDecompressDeserialize(PlanDeserializationState &state, FieldReader &reader,\n+                                                       ScalarFunction &function) {\n+\tfunction.arguments = reader.ReadRequiredSerializableList<LogicalType, LogicalType>();\n+\tfunction.function = GetStringDecompressFunctionSwitch(function.arguments[0]);\n+\treturn nullptr;\n+}\n+\n+ScalarFunction CMStringDecompressFun::GetFunction(const LogicalType &input_type) {\n+\tScalarFunction result(StringDecompressFunctionName(), {input_type}, LogicalType::VARCHAR,\n+\t                      GetStringDecompressFunctionSwitch(input_type), CompressedMaterializationFunctions::Bind,\n+\t                      nullptr, nullptr, StringDecompressLocalState::Init);\n+\tresult.serialize = CMStringDecompressSerialize;\n+\tresult.deserialize = CMStringDecompressDeserialize;\n+\treturn result;\n+}\n+\n+static ScalarFunctionSet GetStringDecompressFunctionSet() {\n+\tScalarFunctionSet set(StringDecompressFunctionName());\n+\tfor (const auto &input_type : CompressedMaterializationFunctions::StringTypes()) {\n+\t\tset.AddFunction(CMStringDecompressFun::GetFunction(input_type));\n+\t}\n+\treturn set;\n+}\n+\n+void CMStringDecompressFun::RegisterFunction(BuiltinFunctions &set) {\n+\tset.AddFunction(GetStringDecompressFunctionSet());\n+}\n+\n+} // namespace duckdb\ndiff --git a/src/function/scalar/compressed_materialization_functions.cpp b/src/function/scalar/compressed_materialization_functions.cpp\nnew file mode 100644\nindex 000000000000..456d1bb8adfb\n--- /dev/null\n+++ b/src/function/scalar/compressed_materialization_functions.cpp\n@@ -0,0 +1,29 @@\n+#include \"duckdb/function/scalar/compressed_materialization_functions.hpp\"\n+\n+namespace duckdb {\n+\n+const vector<LogicalType> CompressedMaterializationFunctions::IntegralTypes() {\n+\treturn {LogicalType::UTINYINT, LogicalType::USMALLINT, LogicalType::UINTEGER, LogicalType::UBIGINT};\n+}\n+\n+const vector<LogicalType> CompressedMaterializationFunctions::StringTypes() {\n+\treturn {LogicalType::UTINYINT, LogicalType::USMALLINT, LogicalType::UINTEGER, LogicalType::UBIGINT,\n+\t        LogicalType::HUGEINT};\n+}\n+\n+// LCOV_EXCL_START\n+unique_ptr<FunctionData> CompressedMaterializationFunctions::Bind(ClientContext &context,\n+                                                                  ScalarFunction &bound_function,\n+                                                                  vector<unique_ptr<Expression>> &arguments) {\n+\tthrow BinderException(\"Compressed materialization functions are for internal use only!\");\n+}\n+// LCOV_EXCL_STOP\n+\n+void BuiltinFunctions::RegisterCompressedMaterializationFunctions() {\n+\tRegister<CMIntegralCompressFun>();\n+\tRegister<CMIntegralDecompressFun>();\n+\tRegister<CMStringCompressFun>();\n+\tRegister<CMStringDecompressFun>();\n+}\n+\n+} // namespace duckdb\ndiff --git a/src/function/scalar/list/CMakeLists.txt b/src/function/scalar/list/CMakeLists.txt\nindex c90d9e1d8f06..d544e07d8278 100644\n--- a/src/function/scalar/list/CMakeLists.txt\n+++ b/src/function/scalar/list/CMakeLists.txt\n@@ -1,5 +1,5 @@\n add_library_unity(duckdb_func_list_nested OBJECT list_concat.cpp\n-                  contains_or_position.cpp list_extract.cpp)\n+                  contains_or_position.cpp list_extract.cpp list_resize.cpp)\n set(ALL_OBJECT_FILES\n     ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_func_list_nested>\n     PARENT_SCOPE)\ndiff --git a/src/function/scalar/list/list_resize.cpp b/src/function/scalar/list/list_resize.cpp\nnew file mode 100644\nindex 000000000000..107bb2df6a54\n--- /dev/null\n+++ b/src/function/scalar/list/list_resize.cpp\n@@ -0,0 +1,162 @@\n+#include \"duckdb/common/types/data_chunk.hpp\"\n+#include \"duckdb/function/scalar/nested_functions.hpp\"\n+#include \"duckdb/function/scalar_function.hpp\"\n+#include \"duckdb/function/built_in_functions.hpp\"\n+\n+namespace duckdb {\n+\n+void ListResizeFunction(DataChunk &args, ExpressionState &state, Vector &result) {\n+\tD_ASSERT(args.data[1].GetType().id() == LogicalTypeId::UBIGINT);\n+\tif (result.GetType().id() == LogicalTypeId::SQLNULL) {\n+\t\tFlatVector::SetNull(result, 0, true);\n+\t\treturn;\n+\t}\n+\tD_ASSERT(result.GetType().id() == LogicalTypeId::LIST);\n+\tauto count = args.size();\n+\n+\tresult.SetVectorType(VectorType::FLAT_VECTOR);\n+\n+\tauto &lists = args.data[0];\n+\tauto &child = ListVector::GetEntry(args.data[0]);\n+\tauto &new_sizes = args.data[1];\n+\n+\tUnifiedVectorFormat list_data;\n+\tlists.ToUnifiedFormat(count, list_data);\n+\tauto list_entries = UnifiedVectorFormat::GetData<list_entry_t>(list_data);\n+\n+\tUnifiedVectorFormat new_size_data;\n+\tnew_sizes.ToUnifiedFormat(count, new_size_data);\n+\tauto new_size_entries = UnifiedVectorFormat::GetData<int64_t>(new_size_data);\n+\n+\tUnifiedVectorFormat child_data;\n+\tchild.ToUnifiedFormat(count, child_data);\n+\n+\t// Find the new size of the result child vector\n+\tidx_t new_child_size = 0;\n+\tfor (idx_t i = 0; i < count; i++) {\n+\t\tauto index = new_size_data.sel->get_index(i);\n+\t\tif (new_size_data.validity.RowIsValid(index)) {\n+\t\t\tnew_child_size += new_size_entries[index];\n+\t\t}\n+\t}\n+\n+\t// Create the default vector if it exists\n+\tUnifiedVectorFormat default_data;\n+\toptional_ptr<Vector> default_vector;\n+\tif (args.ColumnCount() == 3) {\n+\t\tdefault_vector = &args.data[2];\n+\t\tdefault_vector->ToUnifiedFormat(count, default_data);\n+\t\tdefault_vector->SetVectorType(VectorType::CONSTANT_VECTOR);\n+\t}\n+\n+\tListVector::Reserve(result, new_child_size);\n+\tListVector::SetListSize(result, new_child_size);\n+\n+\tauto result_entries = FlatVector::GetData<list_entry_t>(result);\n+\tauto &result_child = ListVector::GetEntry(result);\n+\n+\t// for each lists in the args\n+\tidx_t result_child_offset = 0;\n+\tfor (idx_t args_index = 0; args_index < count; args_index++) {\n+\t\tauto l_index = list_data.sel->get_index(args_index);\n+\t\tauto new_index = new_size_data.sel->get_index(args_index);\n+\n+\t\t// set null if lists is null\n+\t\tif (!list_data.validity.RowIsValid(l_index)) {\n+\t\t\tFlatVector::SetNull(result, args_index, true);\n+\t\t\tcontinue;\n+\t\t}\n+\n+\t\tidx_t new_size_entry = 0;\n+\t\tif (new_size_data.validity.RowIsValid(new_index)) {\n+\t\t\tnew_size_entry = new_size_entries[new_index];\n+\t\t}\n+\n+\t\t// find the smallest size between lists and new_sizes\n+\t\tauto values_to_copy = MinValue<idx_t>(list_entries[l_index].length, new_size_entry);\n+\n+\t\t// set the result entry\n+\t\tresult_entries[args_index].offset = result_child_offset;\n+\t\tresult_entries[args_index].length = new_size_entry;\n+\n+\t\t// copy the values from the child vector\n+\t\tVectorOperations::Copy(child, result_child, list_entries[l_index].offset + values_to_copy,\n+\t\t                       list_entries[l_index].offset, result_child_offset);\n+\t\tresult_child_offset += values_to_copy;\n+\n+\t\t// set default value if it exists\n+\t\tidx_t def_index = 0;\n+\t\tif (args.ColumnCount() == 3) {\n+\t\t\tdef_index = default_data.sel->get_index(args_index);\n+\t\t}\n+\n+\t\t// if the new size is larger than the old size, fill in the default value\n+\t\tif (values_to_copy < new_size_entry) {\n+\t\t\tif (default_vector && default_data.validity.RowIsValid(def_index)) {\n+\t\t\t\tVectorOperations::Copy(*default_vector, result_child, new_size_entry - values_to_copy, def_index,\n+\t\t\t\t                       result_child_offset);\n+\t\t\t\tresult_child_offset += new_size_entry - values_to_copy;\n+\t\t\t} else {\n+\t\t\t\tfor (idx_t j = values_to_copy; j < new_size_entry; j++) {\n+\t\t\t\t\tFlatVector::SetNull(result_child, result_child_offset, true);\n+\t\t\t\t\tresult_child_offset++;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tif (args.AllConstant()) {\n+\t\tresult.SetVectorType(VectorType::CONSTANT_VECTOR);\n+\t}\n+}\n+\n+static unique_ptr<FunctionData> ListResizeBind(ClientContext &context, ScalarFunction &bound_function,\n+                                               vector<unique_ptr<Expression>> &arguments) {\n+\tD_ASSERT(bound_function.arguments.size() == 2 || arguments.size() == 3);\n+\tbound_function.arguments[1] = LogicalType::UBIGINT;\n+\n+\t// first argument is constant NULL\n+\tif (arguments[0]->return_type == LogicalType::SQLNULL) {\n+\t\tbound_function.arguments[0] = LogicalType::SQLNULL;\n+\t\tbound_function.return_type = LogicalType::SQLNULL;\n+\t\treturn make_uniq<VariableReturnBindData>(bound_function.return_type);\n+\t}\n+\n+\t// prepared statements\n+\tif (arguments[0]->return_type == LogicalType::UNKNOWN) {\n+\t\tbound_function.return_type = arguments[0]->return_type;\n+\t\treturn make_uniq<VariableReturnBindData>(bound_function.return_type);\n+\t}\n+\n+\t// default type does not match list type\n+\tif (bound_function.arguments.size() == 3 &&\n+\t    ListType::GetChildType(arguments[0]->return_type) != arguments[2]->return_type &&\n+\t    arguments[2]->return_type != LogicalTypeId::SQLNULL) {\n+\t\tbound_function.arguments[2] = ListType::GetChildType(arguments[0]->return_type);\n+\t}\n+\n+\tbound_function.return_type = arguments[0]->return_type;\n+\treturn make_uniq<VariableReturnBindData>(bound_function.return_type);\n+}\n+\n+void ListResizeFun::RegisterFunction(BuiltinFunctions &set) {\n+\tScalarFunction sfun({LogicalType::LIST(LogicalTypeId::ANY), LogicalTypeId::ANY},\n+\t                    LogicalType::LIST(LogicalTypeId::ANY), ListResizeFunction, ListResizeBind);\n+\tsfun.null_handling = FunctionNullHandling::SPECIAL_HANDLING;\n+\n+\tScalarFunction dfun({LogicalType::LIST(LogicalTypeId::ANY), LogicalTypeId::ANY, LogicalTypeId::ANY},\n+\t                    LogicalType::LIST(LogicalTypeId::ANY), ListResizeFunction, ListResizeBind);\n+\tdfun.null_handling = FunctionNullHandling::SPECIAL_HANDLING;\n+\n+\tScalarFunctionSet list_resize(\"list_resize\");\n+\tlist_resize.AddFunction(sfun);\n+\tlist_resize.AddFunction(dfun);\n+\tset.AddFunction(list_resize);\n+\n+\tScalarFunctionSet array_resize(\"array_resize\");\n+\tarray_resize.AddFunction(sfun);\n+\tarray_resize.AddFunction(dfun);\n+\tset.AddFunction(array_resize);\n+}\n+\n+} // namespace duckdb\ndiff --git a/src/function/scalar/nested_functions.cpp b/src/function/scalar/nested_functions.cpp\nindex dc77a1680f91..fa05ac7dc8db 100644\n--- a/src/function/scalar/nested_functions.cpp\n+++ b/src/function/scalar/nested_functions.cpp\n@@ -8,6 +8,7 @@ void BuiltinFunctions::RegisterNestedFunctions() {\n \tRegister<ListContainsFun>();\n \tRegister<ListPositionFun>();\n \tRegister<ListExtractFun>();\n+\tRegister<ListResizeFun>();\n }\n \n } // namespace duckdb\ndiff --git a/src/function/scalar/string/like.cpp b/src/function/scalar/string/like.cpp\nindex 55f28fb99589..8bac7283c547 100644\n--- a/src/function/scalar/string/like.cpp\n+++ b/src/function/scalar/string/like.cpp\n@@ -504,8 +504,7 @@ static void RegularLikeFunction(DataChunk &input, ExpressionState &state, Vector\n }\n void LikeFun::RegisterFunction(BuiltinFunctions &set) {\n \t// like\n-\tset.AddFunction(ScalarFunction(\"~~\", {LogicalType::VARCHAR, LogicalType::VARCHAR}, LogicalType::BOOLEAN,\n-\t                               RegularLikeFunction<LikeOperator, false>, LikeBindFunction));\n+\tset.AddFunction(GetLikeFunction());\n \t// not like\n \tset.AddFunction(ScalarFunction(\"!~~\", {LogicalType::VARCHAR, LogicalType::VARCHAR}, LogicalType::BOOLEAN,\n \t                               RegularLikeFunction<NotLikeOperator, true>, LikeBindFunction));\n@@ -522,9 +521,13 @@ void LikeFun::RegisterFunction(BuiltinFunctions &set) {\n \t                               nullptr, ILikePropagateStats<NotILikeOperatorASCII>));\n }\n \n+ScalarFunction LikeFun::GetLikeFunction() {\n+\treturn ScalarFunction(\"~~\", {LogicalType::VARCHAR, LogicalType::VARCHAR}, LogicalType::BOOLEAN,\n+\t                      RegularLikeFunction<LikeOperator, false>, LikeBindFunction);\n+}\n+\n void LikeEscapeFun::RegisterFunction(BuiltinFunctions &set) {\n-\tset.AddFunction({\"like_escape\"}, ScalarFunction({LogicalType::VARCHAR, LogicalType::VARCHAR, LogicalType::VARCHAR},\n-\t                                                LogicalType::BOOLEAN, LikeEscapeFunction<LikeEscapeOperator>));\n+\tset.AddFunction(GetLikeEscapeFun());\n \tset.AddFunction({\"not_like_escape\"},\n \t                ScalarFunction({LogicalType::VARCHAR, LogicalType::VARCHAR, LogicalType::VARCHAR},\n \t                               LogicalType::BOOLEAN, LikeEscapeFunction<NotLikeEscapeOperator>));\n@@ -535,4 +538,9 @@ void LikeEscapeFun::RegisterFunction(BuiltinFunctions &set) {\n \t                ScalarFunction({LogicalType::VARCHAR, LogicalType::VARCHAR, LogicalType::VARCHAR},\n \t                               LogicalType::BOOLEAN, LikeEscapeFunction<NotILikeEscapeOperator>));\n }\n+\n+ScalarFunction LikeEscapeFun::GetLikeEscapeFun() {\n+\treturn ScalarFunction(\"like_escape\", {LogicalType::VARCHAR, LogicalType::VARCHAR, LogicalType::VARCHAR},\n+\t                      LogicalType::BOOLEAN, LikeEscapeFunction<LikeEscapeOperator>);\n+}\n } // namespace duckdb\ndiff --git a/src/function/table/copy_csv.cpp b/src/function/table/copy_csv.cpp\nindex 5d128c96cefb..b43833eaebde 100644\n--- a/src/function/table/copy_csv.cpp\n+++ b/src/function/table/copy_csv.cpp\n@@ -116,13 +116,20 @@ static unique_ptr<FunctionData> ReadCSVBind(ClientContext &context, CopyInfo &in\n \tfor (auto &option : info.options) {\n \t\tauto loption = StringUtil::Lower(option.first);\n \t\tauto &set = option.second;\n-\t\toptions.SetReadOption(loption, ConvertVectorToValue(std::move(set)), expected_names);\n+\t\toptions.SetReadOption(loption, ConvertVectorToValue(set), expected_names);\n \t}\n \t// verify the parsed options\n \tif (options.force_not_null.empty()) {\n \t\t// no FORCE_QUOTE specified: initialize to false\n \t\toptions.force_not_null.resize(expected_types.size(), false);\n \t}\n+\n+\t// Look for rejects table options last\n+\tnamed_parameter_map_t options_map;\n+\tfor (auto &option : info.options) {\n+\t\toptions_map[option.first] = ConvertVectorToValue(std::move(option.second));\n+\t}\n+\n \tbind_data->FinalizeRead(context);\n \tif (!bind_data->single_threaded && options.auto_detect) {\n \t\toptions.file_path = bind_data->files[0];\ndiff --git a/src/function/table/read_csv.cpp b/src/function/table/read_csv.cpp\nindex e7a4d0013fb2..ff3b2ccc2aef 100644\n--- a/src/function/table/read_csv.cpp\n+++ b/src/function/table/read_csv.cpp\n@@ -14,6 +14,8 @@\n #include \"duckdb/common/multi_file_reader.hpp\"\n #include \"duckdb/main/client_data.hpp\"\n #include \"duckdb/execution/operator/persistent/csv_line_info.hpp\"\n+#include \"duckdb/execution/operator/persistent/csv_rejects_table.hpp\"\n+\n #include <limits>\n \n namespace duckdb {\n@@ -42,6 +44,43 @@ void ReadCSVData::FinalizeRead(ClientContext &context) {\n \t\t// not supported for parallel CSV reading\n \t\tsingle_threaded = true;\n \t}\n+\n+\t// Validate rejects_table options\n+\tif (!options.rejects_table_name.empty()) {\n+\t\tif (!options.ignore_errors) {\n+\t\t\tthrow BinderException(\"REJECTS_TABLE option is only supported when IGNORE_ERRORS is set to true\");\n+\t\t}\n+\t\tif (options.file_options.union_by_name) {\n+\t\t\tthrow BinderException(\"REJECTS_TABLE option is not supported when UNION_BY_NAME is set to true\");\n+\t\t}\n+\t}\n+\n+\tif (!options.rejects_recovery_columns.empty()) {\n+\t\tif (options.rejects_table_name.empty()) {\n+\t\t\tthrow BinderException(\n+\t\t\t    \"REJECTS_RECOVERY_COLUMNS option is only supported when REJECTS_TABLE is set to a table name\");\n+\t\t}\n+\t\tfor (auto &recovery_col : options.rejects_recovery_columns) {\n+\t\t\tbool found = false;\n+\t\t\tfor (idx_t col_idx = 0; col_idx < return_names.size(); col_idx++) {\n+\t\t\t\tif (StringUtil::CIEquals(return_names[col_idx], recovery_col)) {\n+\t\t\t\t\toptions.rejects_recovery_column_ids.push_back(col_idx);\n+\t\t\t\t\tfound = true;\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tif (!found) {\n+\t\t\t\tthrow BinderException(\"Unsupported parameter for REJECTS_RECOVERY_COLUMNS: column \\\"%s\\\" not found\",\n+\t\t\t\t                      recovery_col);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tif (options.rejects_limit != 0) {\n+\t\tif (options.rejects_table_name.empty()) {\n+\t\t\tthrow BinderException(\"REJECTS_LIMIT option is only supported when REJECTS_TABLE is set to a table name\");\n+\t\t}\n+\t}\n }\n \n uint8_t GetCandidateSpecificity(const LogicalType &candidate_type) {\n@@ -65,6 +104,7 @@ uint8_t GetCandidateSpecificity(const LogicalType &candidate_type) {\n \n static unique_ptr<FunctionData> ReadCSVBind(ClientContext &context, TableFunctionBindInput &input,\n                                             vector<LogicalType> &return_types, vector<string> &names) {\n+\n \tauto result = make_uniq<ReadCSVData>();\n \tauto &options = result->options;\n \tresult->files = MultiFileReader::GetFileList(context, input.inputs[0], \"CSV\");\n@@ -235,9 +275,15 @@ static unique_ptr<FunctionData> ReadCSVBind(ClientContext &context, TableFunctio\n \t} else {\n \t\tresult->reader_bind = MultiFileReader::BindOptions(options.file_options, result->files, return_types, names);\n \t}\n+\n \tresult->return_types = return_types;\n \tresult->return_names = names;\n \tresult->FinalizeRead(context);\n+\n+\tif (options.auto_detect) {\n+\t\tresult->initial_reader->options = options;\n+\t}\n+\n \treturn std::move(result);\n }\n \n@@ -261,10 +307,6 @@ struct ParallelCSVGlobalState : public GlobalTableFunctionState {\n \t      line_info(main_mutex, batch_to_tuple_end, tuple_start, tuple_end) {\n \t\tfile_handle->DisableReset();\n \t\tcurrent_file_path = files_path_p[0];\n-\t\tline_info.lines_read[0] = rows_to_skip;\n-\t\tif (has_header) {\n-\t\t\tline_info.lines_read[0]++;\n-\t\t}\n \t\tfile_size = file_handle->FileSize();\n \t\tfirst_file_size = file_size;\n \t\ton_disk_file = file_handle->OnDiskFile();\n@@ -291,10 +333,17 @@ struct ParallelCSVGlobalState : public GlobalTableFunctionState {\n \t\t// Initialize all the book-keeping variables\n \t\tauto file_count = files_path_p.size();\n \t\tline_info.current_batches.resize(file_count);\n+\t\tline_info.lines_read.resize(file_count);\n \t\ttuple_start.resize(file_count);\n \t\ttuple_end.resize(file_count);\n \t\ttuple_end_to_batch.resize(file_count);\n \t\tbatch_to_tuple_end.resize(file_count);\n+\n+\t\t// Initialize the lines read\n+\t\tline_info.lines_read[0][0] = rows_to_skip;\n+\t\tif (has_header) {\n+\t\t\tline_info.lines_read[0][0]++;\n+\t\t}\n \t}\n \tParallelCSVGlobalState() : line_info(main_mutex, batch_to_tuple_end, tuple_start, tuple_end) {\n \t\trunning_threads = MaxThreads();\n@@ -501,6 +550,9 @@ bool ParallelCSVGlobalState::Next(ClientContext &context, const ReadCSVData &bin\n \t\t\tcurrent_csv_position = 0;\n \t\t\tfile_number++;\n \t\t\tlocal_batch_index = 0;\n+\n+\t\t\tline_info.lines_read[file_number][local_batch_index] = (bind_data.options.has_header ? 1 : 0);\n+\n \t\t\tcurrent_buffer =\n \t\t\t    make_shared<CSVBuffer>(context, buffer_size, *file_handle, current_csv_position, file_number);\n \t\t\tnext_buffer = shared_ptr<CSVBuffer>(\n@@ -512,7 +564,7 @@ bool ParallelCSVGlobalState::Next(ClientContext &context, const ReadCSVData &bin\n \t\t}\n \t}\n \t// set up the current buffer\n-\tline_info.current_batches.back().insert(local_batch_index);\n+\tline_info.current_batches[file_number].insert(local_batch_index);\n \tauto result = make_uniq<CSVBufferRead>(current_buffer, next_buffer, next_byte, next_byte + bytes_per_local_state,\n \t                                       batch_index++, local_batch_index++, &line_info);\n \t// move the byte index of the CSV reader to the next buffer\n@@ -556,6 +608,7 @@ bool ParallelCSVGlobalState::Next(ClientContext &context, const ReadCSVData &bin\n \t\t// update the current reader\n \t\treader->SetBufferRead(std::move(result));\n \t}\n+\n \treturn true;\n }\n void ParallelCSVGlobalState::UpdateVerification(VerificationPositions positions, idx_t file_number_p, idx_t batch_idx) {\n@@ -574,7 +627,7 @@ void ParallelCSVGlobalState::UpdateLinesRead(CSVBufferRead &buffer_read, idx_t f\n \tauto lines_read = buffer_read.lines_read;\n \tlock_guard<mutex> parallel_lock(main_mutex);\n \tline_info.current_batches[file_idx].erase(batch_idx);\n-\tline_info.lines_read[batch_idx] += lines_read;\n+\tline_info.lines_read[file_idx][batch_idx] += lines_read;\n }\n \n bool LineInfo::CanItGetLine(idx_t file_idx, idx_t batch_idx) {\n@@ -593,21 +646,36 @@ bool LineInfo::CanItGetLine(idx_t file_idx, idx_t batch_idx) {\n }\n \n // Returns the 1-indexed line number\n-idx_t LineInfo::GetLine(idx_t batch_idx, idx_t line_error, idx_t file_idx, idx_t cur_start, bool verify) {\n+idx_t LineInfo::GetLine(idx_t batch_idx, idx_t line_error, idx_t file_idx, idx_t cur_start, bool verify,\n+                        bool stop_at_first) {\n \tunique_ptr<lock_guard<mutex>> parallel_lock;\n \tif (!verify) {\n \t\tparallel_lock = duckdb::make_uniq<lock_guard<mutex>>(main_mutex);\n \t}\n \tidx_t line_count = 0;\n+\n+\tif (!stop_at_first) {\n+\t\t// Figure out the amount of lines read in the current file\n+\t\tauto &file_batches = current_batches[file_idx];\n+\t\tfor (auto &batch : file_batches) {\n+\t\t\tif (batch > batch_idx) {\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tline_count += lines_read[file_idx][batch];\n+\t\t}\n+\t\treturn line_count + line_error + 1;\n+\t}\n+\n+\t// Otherwise, check if we already have an error on another thread\n \tif (done) {\n \t\t// line count is 0-indexed, but we want to return 1-indexed\n \t\treturn first_line + 1;\n \t}\n \tfor (idx_t i = 0; i <= batch_idx; i++) {\n-\t\tif (lines_read.find(i) == lines_read.end() && i != batch_idx) {\n+\t\tif (lines_read[file_idx].find(i) == lines_read[file_idx].end() && i != batch_idx) {\n \t\t\tthrow InternalException(\"Missing batch index on Parallel CSV Reader GetLine\");\n \t\t}\n-\t\tline_count += lines_read[i];\n+\t\tline_count += lines_read[file_idx][i];\n \t}\n \n \t// before we are done, if this is not a call in Verify() we must check Verify up to this batch\n@@ -914,6 +982,12 @@ static void SingleThreadedCSVFunction(ClientContext &context, TableFunctionInput\n //===--------------------------------------------------------------------===//\n static unique_ptr<GlobalTableFunctionState> ReadCSVInitGlobal(ClientContext &context, TableFunctionInitInput &input) {\n \tauto &bind_data = input.bind_data->Cast<ReadCSVData>();\n+\n+\t// Create the temporary rejects table\n+\tauto rejects_table = bind_data.options.rejects_table_name;\n+\tif (!rejects_table.empty()) {\n+\t\tCSVRejectsTable::GetOrCreate(context, rejects_table)->InitializeTable(context, bind_data);\n+\t}\n \tif (bind_data.single_threaded) {\n \t\treturn SingleThreadedCSVInit(context, input);\n \t} else {\n@@ -974,6 +1048,9 @@ static void ReadCSVAddNamedParameters(TableFunction &table_function) {\n \ttable_function.named_parameters[\"max_line_size\"] = LogicalType::VARCHAR;\n \ttable_function.named_parameters[\"maximum_line_size\"] = LogicalType::VARCHAR;\n \ttable_function.named_parameters[\"ignore_errors\"] = LogicalType::BOOLEAN;\n+\ttable_function.named_parameters[\"rejects_table\"] = LogicalType::VARCHAR;\n+\ttable_function.named_parameters[\"rejects_limit\"] = LogicalType::BIGINT;\n+\ttable_function.named_parameters[\"rejects_recovery_columns\"] = LogicalType::LIST(LogicalType::VARCHAR);\n \ttable_function.named_parameters[\"buffer_size\"] = LogicalType::UBIGINT;\n \ttable_function.named_parameters[\"decimal_separator\"] = LogicalType::VARCHAR;\n \ttable_function.named_parameters[\"parallel\"] = LogicalType::BOOLEAN;\n@@ -1062,6 +1139,10 @@ void BufferedCSVReaderOptions::Serialize(FieldWriter &writer) const {\n \t\tcsv_formats.push_back(format.second.format_specifier);\n \t}\n \twriter.WriteList<string>(csv_formats);\n+\twriter.WriteString(rejects_table_name);\n+\twriter.WriteField<idx_t>(rejects_limit);\n+\twriter.WriteList<string>(rejects_recovery_columns);\n+\twriter.WriteList<idx_t>(rejects_recovery_column_ids);\n }\n \n void BufferedCSVReaderOptions::Deserialize(FieldReader &reader) {\n@@ -1109,6 +1190,10 @@ void BufferedCSVReaderOptions::Deserialize(FieldReader &reader) {\n \t\thas_format[type] = true;\n \t\tStrTimeFormat::ParseFormatSpecifier(format, date_format[type]);\n \t}\n+\trejects_table_name = reader.ReadRequired<string>();\n+\trejects_limit = reader.ReadRequired<idx_t>();\n+\trejects_recovery_columns = reader.ReadRequiredList<string>();\n+\trejects_recovery_column_ids = reader.ReadRequiredList<idx_t>();\n }\n \n static void CSVReaderSerialize(FieldWriter &writer, const FunctionData *bind_data_p, const TableFunction &function) {\ndiff --git a/src/function/table/table_scan.cpp b/src/function/table/table_scan.cpp\nindex 747bbc51fbda..e2fec74e2fef 100644\n--- a/src/function/table/table_scan.cpp\n+++ b/src/function/table/table_scan.cpp\n@@ -281,6 +281,15 @@ void TableScanPushdownComplexFilter(ClientContext &context, LogicalGet &get, Fun\n \tif (bind_data.is_index_scan) {\n \t\treturn;\n \t}\n+\tif (!get.table_filters.filters.empty()) {\n+\t\t// if there were filters before we can't convert this to an index scan\n+\t\treturn;\n+\t}\n+\tif (!get.projection_ids.empty()) {\n+\t\t// if columns were pruned by RemoveUnusedColumns we can't convert this to an index scan,\n+\t\t// because index scan does not support filter_prune (yet)\n+\t\treturn;\n+\t}\n \tif (filters.empty()) {\n \t\t// no indexes or no filters: skip the pushdown\n \t\treturn;\ndiff --git a/src/include/duckdb.h b/src/include/duckdb.h\nindex 9d870acb3a04..c786983d3c84 100644\n--- a/src/include/duckdb.h\n+++ b/src/include/duckdb.h\n@@ -279,6 +279,9 @@ typedef struct _duckdb_appender {\n typedef struct _duckdb_arrow {\n \tvoid *__arrw;\n } * duckdb_arrow;\n+typedef struct _duckdb_arrow_stream {\n+\tvoid *__arrwstr;\n+} * duckdb_arrow_stream;\n typedef struct _duckdb_config {\n \tvoid *__cnfg;\n } * duckdb_config;\n@@ -1078,6 +1081,31 @@ Executes the prepared statement with the given bound parameters, and returns an\n DUCKDB_API duckdb_state duckdb_execute_prepared_arrow(duckdb_prepared_statement prepared_statement,\n                                                       duckdb_arrow *out_result);\n \n+/*!\n+Scans the Arrow stream and creates a view with the given name.\n+\n+* connection: The connection on which to execute the scan.\n+* table_name: Name of the temporary view to create.\n+* arrow: Arrow stream wrapper.\n+* returns: `DuckDBSuccess` on success or `DuckDBError` on failure.\n+*/\n+DUCKDB_API duckdb_state duckdb_arrow_scan(duckdb_connection connection, const char *table_name,\n+                                          duckdb_arrow_stream arrow);\n+\n+/*!\n+Scans the Arrow array and creates a view with the given name.\n+\n+* connection: The connection on which to execute the scan.\n+* table_name: Name of the temporary view to create.\n+* arrow_schema: Arrow schema wrapper.\n+* arrow_array: Arrow array wrapper.\n+* out_stream: Output array stream that wraps around the passed schema, for releasing/deleting once done.\n+* returns: `DuckDBSuccess` on success or `DuckDBError` on failure.\n+*/\n+DUCKDB_API duckdb_state duckdb_arrow_array_scan(duckdb_connection connection, const char *table_name,\n+                                                duckdb_arrow_schema arrow_schema, duckdb_arrow_array arrow_array,\n+                                                duckdb_arrow_stream *out_stream);\n+\n //===--------------------------------------------------------------------===//\n // Extract Statements\n //===--------------------------------------------------------------------===//\ndiff --git a/src/include/duckdb/common/adbc/adbc.hpp b/src/include/duckdb/common/adbc/adbc.hpp\nindex 2dacb60e1695..4b71d37ae3b2 100644\n--- a/src/include/duckdb/common/adbc/adbc.hpp\n+++ b/src/include/duckdb/common/adbc/adbc.hpp\n@@ -87,4 +87,5 @@ AdbcStatusCode StatementExecutePartitions(struct AdbcStatement *statement, struc\n void SetError(struct AdbcError *error, const std::string &message);\n \n void InitiliazeADBCError(AdbcError *error);\n+\n } // namespace duckdb_adbc\ndiff --git a/src/include/duckdb/common/allocator.hpp b/src/include/duckdb/common/allocator.hpp\nindex cac14c293675..9d4528ae5278 100644\n--- a/src/include/duckdb/common/allocator.hpp\n+++ b/src/include/duckdb/common/allocator.hpp\n@@ -116,6 +116,8 @@ class Allocator {\n \tDUCKDB_API static Allocator &DefaultAllocator();\n \tDUCKDB_API static shared_ptr<Allocator> &DefaultAllocatorReference();\n \n+\tstatic void ThreadFlush(idx_t threshold);\n+\n private:\n \tallocate_function_ptr_t allocate_function;\n \tfree_function_ptr_t free_function;\ndiff --git a/src/include/duckdb/common/bswap.hpp b/src/include/duckdb/common/bswap.hpp\nnew file mode 100644\nindex 000000000000..fae539699ad4\n--- /dev/null\n+++ b/src/include/duckdb/common/bswap.hpp\n@@ -0,0 +1,42 @@\n+//===----------------------------------------------------------------------===//\n+//                         DuckDB\n+//\n+// duckdb/common/bswap.hpp\n+//\n+//\n+//===----------------------------------------------------------------------===//\n+\n+#pragma once\n+\n+#include \"duckdb/common/common.hpp\"\n+\n+namespace duckdb {\n+\n+#define BSWAP16(x) ((uint16_t)((((uint16_t)(x)&0xff00) >> 8) | (((uint16_t)(x)&0x00ff) << 8)))\n+\n+#define BSWAP32(x)                                                                                                     \\\n+\t((uint32_t)((((uint32_t)(x)&0xff000000) >> 24) | (((uint32_t)(x)&0x00ff0000) >> 8) |                               \\\n+\t            (((uint32_t)(x)&0x0000ff00) << 8) | (((uint32_t)(x)&0x000000ff) << 24)))\n+\n+#define BSWAP64(x)                                                                                                     \\\n+\t((uint64_t)((((uint64_t)(x)&0xff00000000000000ull) >> 56) | (((uint64_t)(x)&0x00ff000000000000ull) >> 40) |        \\\n+\t            (((uint64_t)(x)&0x0000ff0000000000ull) >> 24) | (((uint64_t)(x)&0x000000ff00000000ull) >> 8) |         \\\n+\t            (((uint64_t)(x)&0x00000000ff000000ull) << 8) | (((uint64_t)(x)&0x0000000000ff0000ull) << 24) |         \\\n+\t            (((uint64_t)(x)&0x000000000000ff00ull) << 40) | (((uint64_t)(x)&0x00000000000000ffull) << 56)))\n+\n+template <class T>\n+static inline T BSwap(const T &x) {\n+\tstatic_assert(sizeof(T) == 1 || sizeof(T) == 2 || sizeof(T) == 4 || sizeof(T) == 8,\n+\t              \"Size of type must be 1, 2, 4, or 8 for BSwap\");\n+\tif (sizeof(T) == 1) {\n+\t\treturn x;\n+\t} else if (sizeof(T) == 2) {\n+\t\treturn BSWAP16(x);\n+\t} else if (sizeof(T) == 4) {\n+\t\treturn BSWAP32(x);\n+\t} else {\n+\t\treturn BSWAP64(x);\n+\t}\n+}\n+\n+} // namespace duckdb\ndiff --git a/src/include/duckdb/common/enum_util.hpp b/src/include/duckdb/common/enum_util.hpp\nindex 0aa7efa2b05b..fd006eb89e3c 100644\n--- a/src/include/duckdb/common/enum_util.hpp\n+++ b/src/include/duckdb/common/enum_util.hpp\n@@ -133,6 +133,8 @@ enum class PhysicalType : uint8_t;\n \n enum class LogicalTypeId : uint8_t;\n \n+enum class CTEMaterialize : uint8_t;\n+\n enum class OutputStream : uint8_t;\n \n enum class TimestampCastResult : uint8_t;\n@@ -412,6 +414,9 @@ const char *EnumUtil::ToChars<PhysicalType>(PhysicalType value);\n template <>\n const char *EnumUtil::ToChars<LogicalTypeId>(LogicalTypeId value);\n \n+template <>\n+const char *EnumUtil::ToChars<CTEMaterialize>(CTEMaterialize value);\n+\n template <>\n const char *EnumUtil::ToChars<OutputStream>(OutputStream value);\n \n@@ -757,6 +762,9 @@ PhysicalType EnumUtil::FromString<PhysicalType>(const char *value);\n template <>\n LogicalTypeId EnumUtil::FromString<LogicalTypeId>(const char *value);\n \n+template <>\n+CTEMaterialize EnumUtil::FromString<CTEMaterialize>(const char *value);\n+\n template <>\n OutputStream EnumUtil::FromString<OutputStream>(const char *value);\n \ndiff --git a/src/include/duckdb/common/enums/cte_materialize.hpp b/src/include/duckdb/common/enums/cte_materialize.hpp\nnew file mode 100644\nindex 000000000000..356d298ab25e\n--- /dev/null\n+++ b/src/include/duckdb/common/enums/cte_materialize.hpp\n@@ -0,0 +1,21 @@\n+//===----------------------------------------------------------------------===//\n+//                         DuckDB\n+//\n+// duckdb/common/enums/cte_materialize.hpp\n+//\n+//\n+//===----------------------------------------------------------------------===//\n+\n+#pragma once\n+\n+#include \"duckdb/common/constants.hpp\"\n+\n+namespace duckdb {\n+\n+enum class CTEMaterialize : uint8_t {\n+\tCTE_MATERIALIZE_DEFAULT = 1, /* no option specified */\n+\tCTE_MATERIALIZE_ALWAYS = 2,  /* MATERIALIZED */\n+\tCTE_MATERIALIZE_NEVER = 3    /* NOT MATERIALIZED */\n+};\n+\n+} // namespace duckdb\ndiff --git a/src/include/duckdb/common/enums/joinref_type.hpp b/src/include/duckdb/common/enums/joinref_type.hpp\nindex fd3a520b6012..85b8c66bb1d7 100644\n--- a/src/include/duckdb/common/enums/joinref_type.hpp\n+++ b/src/include/duckdb/common/enums/joinref_type.hpp\n@@ -20,7 +20,8 @@ enum class JoinRefType : uint8_t {\n \tNATURAL,    // Implied conditions\n \tCROSS,      // No condition\n \tPOSITIONAL, // Positional condition\n-\tASOF        // AsOf conditions\n+\tASOF,       // AsOf conditions\n+\tDEPENDENT,  // Dependent join conditions\n };\n \n const char *ToString(JoinRefType value);\ndiff --git a/src/include/duckdb/common/enums/logical_operator_type.hpp b/src/include/duckdb/common/enums/logical_operator_type.hpp\nindex 8265edd0b098..9215d3e40feb 100644\n--- a/src/include/duckdb/common/enums/logical_operator_type.hpp\n+++ b/src/include/duckdb/common/enums/logical_operator_type.hpp\n@@ -51,6 +51,7 @@ enum class LogicalOperatorType : uint8_t {\n \tLOGICAL_CROSS_PRODUCT = 54,\n \tLOGICAL_POSITIONAL_JOIN = 55,\n \tLOGICAL_ASOF_JOIN = 56,\n+\tLOGICAL_DEPENDENT_JOIN = 57,\n \t// -----------------------------\n \t// SetOps\n \t// -----------------------------\n@@ -58,6 +59,7 @@ enum class LogicalOperatorType : uint8_t {\n \tLOGICAL_EXCEPT = 76,\n \tLOGICAL_INTERSECT = 77,\n \tLOGICAL_RECURSIVE_CTE = 78,\n+\tLOGICAL_MATERIALIZED_CTE = 79,\n \n \t// -----------------------------\n \t// Updates\ndiff --git a/src/include/duckdb/common/enums/optimizer_type.hpp b/src/include/duckdb/common/enums/optimizer_type.hpp\nindex dcb3581d395f..873d9b2dc157 100644\n--- a/src/include/duckdb/common/enums/optimizer_type.hpp\n+++ b/src/include/duckdb/common/enums/optimizer_type.hpp\n@@ -28,6 +28,8 @@ enum class OptimizerType : uint32_t {\n \tCOMMON_AGGREGATE,\n \tCOLUMN_LIFETIME,\n \tTOP_N,\n+\tCOMPRESSED_MATERIALIZATION,\n+\tDUPLICATE_GROUPS,\n \tREORDER_FILTER,\n \tEXTENSION\n };\ndiff --git a/src/include/duckdb/common/enums/physical_operator_type.hpp b/src/include/duckdb/common/enums/physical_operator_type.hpp\nindex 063c3e76b602..5b15d39fa272 100644\n--- a/src/include/duckdb/common/enums/physical_operator_type.hpp\n+++ b/src/include/duckdb/common/enums/physical_operator_type.hpp\n@@ -45,6 +45,7 @@ enum class PhysicalOperatorType : uint8_t {\n \tCOLUMN_DATA_SCAN,\n \tCHUNK_SCAN,\n \tRECURSIVE_CTE_SCAN,\n+\tCTE_SCAN,\n \tDELIM_SCAN,\n \tEXPRESSION_SCAN,\n \tPOSITIONAL_SCAN,\n@@ -66,6 +67,7 @@ enum class PhysicalOperatorType : uint8_t {\n \t// -----------------------------\n \tUNION,\n \tRECURSIVE_CTE,\n+\tCTE,\n \n \t// -----------------------------\n \t// Updates\ndiff --git a/src/include/duckdb/common/mutex.hpp b/src/include/duckdb/common/mutex.hpp\nindex 58a80cb5c0f8..1758c0ffdbc1 100644\n--- a/src/include/duckdb/common/mutex.hpp\n+++ b/src/include/duckdb/common/mutex.hpp\n@@ -8,6 +8,9 @@\n \n #pragma once\n \n+#ifdef __MVS__\n+#include <time.h>\n+#endif\n #include <mutex>\n \n namespace duckdb {\ndiff --git a/src/include/duckdb/common/radix.hpp b/src/include/duckdb/common/radix.hpp\nindex 58e28f428d7f..46f6dc6d42d2 100644\n--- a/src/include/duckdb/common/radix.hpp\n+++ b/src/include/duckdb/common/radix.hpp\n@@ -8,6 +8,7 @@\n \n #pragma once\n \n+#include \"duckdb/common/bswap.hpp\"\n #include \"duckdb/common/common.hpp\"\n #include \"duckdb/common/exception.hpp\"\n #include \"duckdb/common/types.hpp\"\n@@ -20,18 +21,6 @@\n \n namespace duckdb {\n \n-#define BSWAP16(x) ((uint16_t)((((uint16_t)(x)&0xff00) >> 8) | (((uint16_t)(x)&0x00ff) << 8)))\n-\n-#define BSWAP32(x)                                                                                                     \\\n-\t((uint32_t)((((uint32_t)(x)&0xff000000) >> 24) | (((uint32_t)(x)&0x00ff0000) >> 8) |                               \\\n-\t            (((uint32_t)(x)&0x0000ff00) << 8) | (((uint32_t)(x)&0x000000ff) << 24)))\n-\n-#define BSWAP64(x)                                                                                                     \\\n-\t((uint64_t)((((uint64_t)(x)&0xff00000000000000ull) >> 56) | (((uint64_t)(x)&0x00ff000000000000ull) >> 40) |        \\\n-\t            (((uint64_t)(x)&0x0000ff0000000000ull) >> 24) | (((uint64_t)(x)&0x000000ff00000000ull) >> 8) |         \\\n-\t            (((uint64_t)(x)&0x00000000ff000000ull) << 8) | (((uint64_t)(x)&0x0000000000ff0000ull) << 24) |         \\\n-\t            (((uint64_t)(x)&0x000000000000ff00ull) << 40) | (((uint64_t)(x)&0x00000000000000ffull) << 56)))\n-\n struct Radix {\n public:\n \tstatic inline bool IsLittleEndian() {\n@@ -134,19 +123,19 @@ inline void Radix::EncodeData(data_ptr_t dataptr, int8_t value) {\n \n template <>\n inline void Radix::EncodeData(data_ptr_t dataptr, int16_t value) {\n-\tStore<uint16_t>(BSWAP16(value), dataptr);\n+\tStore<uint16_t>(BSwap<uint16_t>(value), dataptr);\n \tdataptr[0] = FlipSign(dataptr[0]);\n }\n \n template <>\n inline void Radix::EncodeData(data_ptr_t dataptr, int32_t value) {\n-\tStore<uint32_t>(BSWAP32(value), dataptr);\n+\tStore<uint32_t>(BSwap<uint32_t>(value), dataptr);\n \tdataptr[0] = FlipSign(dataptr[0]);\n }\n \n template <>\n inline void Radix::EncodeData(data_ptr_t dataptr, int64_t value) {\n-\tStore<uint64_t>(BSWAP64(value), dataptr);\n+\tStore<uint64_t>(BSwap<uint64_t>(value), dataptr);\n \tdataptr[0] = FlipSign(dataptr[0]);\n }\n \n@@ -157,17 +146,17 @@ inline void Radix::EncodeData(data_ptr_t dataptr, uint8_t value) {\n \n template <>\n inline void Radix::EncodeData(data_ptr_t dataptr, uint16_t value) {\n-\tStore<uint16_t>(BSWAP16(value), dataptr);\n+\tStore<uint16_t>(BSwap<uint16_t>(value), dataptr);\n }\n \n template <>\n inline void Radix::EncodeData(data_ptr_t dataptr, uint32_t value) {\n-\tStore<uint32_t>(BSWAP32(value), dataptr);\n+\tStore<uint32_t>(BSwap<uint32_t>(value), dataptr);\n }\n \n template <>\n inline void Radix::EncodeData(data_ptr_t dataptr, uint64_t value) {\n-\tStore<uint64_t>(BSWAP64(value), dataptr);\n+\tStore<uint64_t>(BSwap<uint64_t>(value), dataptr);\n }\n \n template <>\n@@ -179,13 +168,13 @@ inline void Radix::EncodeData(data_ptr_t dataptr, hugeint_t value) {\n template <>\n inline void Radix::EncodeData(data_ptr_t dataptr, float value) {\n \tuint32_t converted_value = EncodeFloat(value);\n-\tStore<uint32_t>(BSWAP32(converted_value), dataptr);\n+\tStore<uint32_t>(BSwap<uint32_t>(converted_value), dataptr);\n }\n \n template <>\n inline void Radix::EncodeData(data_ptr_t dataptr, double value) {\n \tuint64_t converted_value = EncodeDouble(value);\n-\tStore<uint64_t>(BSWAP64(converted_value), dataptr);\n+\tStore<uint64_t>(BSwap<uint64_t>(converted_value), dataptr);\n }\n \n template <>\ndiff --git a/src/include/duckdb/common/radix_partitioning.hpp b/src/include/duckdb/common/radix_partitioning.hpp\nindex 7b67f71a3c1e..de77561f37e8 100644\n--- a/src/include/duckdb/common/radix_partitioning.hpp\n+++ b/src/include/duckdb/common/radix_partitioning.hpp\n@@ -49,9 +49,6 @@ struct RadixPartitioning {\n \t//! Select using a cutoff on the radix bits of the hash\n \tstatic idx_t Select(Vector &hashes, const SelectionVector *sel, idx_t count, idx_t radix_bits, idx_t cutoff,\n \t                    SelectionVector *true_sel, SelectionVector *false_sel);\n-\n-\t//! Convert hashes to bins\n-\tstatic void HashesToBins(Vector &hashes, idx_t radix_bits, Vector &bins, idx_t count);\n };\n \n //! Templated radix partitioning constants, can be templated to the number of radix bits\ndiff --git a/src/include/duckdb/common/sort/partition_state.hpp b/src/include/duckdb/common/sort/partition_state.hpp\nindex f0be2ffe111c..17787b1fbcc9 100644\n--- a/src/include/duckdb/common/sort/partition_state.hpp\n+++ b/src/include/duckdb/common/sort/partition_state.hpp\n@@ -53,9 +53,12 @@ class PartitionGlobalSinkState {\n \t                         const vector<BoundOrderByNode> &order_bys, const Types &payload_types,\n \t                         const vector<unique_ptr<BaseStatistics>> &partitions_stats, idx_t estimated_cardinality);\n \n+\tvoid SyncPartitioning(const PartitionGlobalSinkState &other);\n+\n \tvoid UpdateLocalPartition(GroupingPartition &local_partition, GroupingAppend &local_append);\n \tvoid CombineLocalPartition(GroupingPartition &local_partition, GroupingAppend &local_append);\n \n+\tvoid BuildSortState(ColumnDataCollection &group_data, GlobalSortState &global_sort) const;\n \tvoid BuildSortState(ColumnDataCollection &group_data, PartitionGlobalHashGroup &global_sort);\n \n \tClientContext &context;\n@@ -67,6 +70,8 @@ class PartitionGlobalSinkState {\n \tunique_ptr<RadixPartitionedColumnData> grouping_data;\n \t//! Payload plus hash column\n \tTypes grouping_types;\n+\t//! The number of radix bits if this partition is being synced with another\n+\tidx_t fixed_bits;\n \n \t// OVER(...) (sorting)\n \tOrders partitions;\n@@ -175,10 +180,18 @@ class PartitionLocalMergeState {\n \n class PartitionGlobalMergeStates {\n public:\n+\tstruct Callback {\n+\t\tvirtual bool HasError() const {\n+\t\t\treturn false;\n+\t\t}\n+\t};\n+\n \tusing PartitionGlobalMergeStatePtr = unique_ptr<PartitionGlobalMergeState>;\n \n \texplicit PartitionGlobalMergeStates(PartitionGlobalSinkState &sink);\n \n+\tbool ExecuteTask(PartitionLocalMergeState &local_state, Callback &callback);\n+\n \tvector<PartitionGlobalMergeStatePtr> states;\n };\n \ndiff --git a/src/include/duckdb/common/types/batched_data_collection.hpp b/src/include/duckdb/common/types/batched_data_collection.hpp\nindex 747c3c1bea75..7d1c751f57c9 100644\n--- a/src/include/duckdb/common/types/batched_data_collection.hpp\n+++ b/src/include/duckdb/common/types/batched_data_collection.hpp\n@@ -24,7 +24,7 @@ struct BatchedChunkScanState {\n //! Scans over a BatchedDataCollection are ordered by batch index\n class BatchedDataCollection {\n public:\n-\tDUCKDB_API BatchedDataCollection(vector<LogicalType> types);\n+\tDUCKDB_API BatchedDataCollection(ClientContext &context, vector<LogicalType> types, bool buffer_managed = false);\n \n \t//! Appends a datachunk with the given batch index to the batched collection\n \tDUCKDB_API void Append(DataChunk &input, idx_t batch_index);\n@@ -51,7 +51,9 @@ class BatchedDataCollection {\n \t\tColumnDataAppendState append_state;\n \t};\n \n+\tClientContext &context;\n \tvector<LogicalType> types;\n+\tbool buffer_managed;\n \t//! The data of the batched chunk collection - a set of batch_index -> ColumnDataCollection pointers\n \tmap<idx_t, unique_ptr<ColumnDataCollection>> data;\n \t//! The last batch collection that was inserted into\ndiff --git a/src/include/duckdb/common/types/column/column_data_collection.hpp b/src/include/duckdb/common/types/column/column_data_collection.hpp\nindex fd6b4954bb9e..f41119fd2173 100644\n--- a/src/include/duckdb/common/types/column/column_data_collection.hpp\n+++ b/src/include/duckdb/common/types/column/column_data_collection.hpp\n@@ -143,7 +143,12 @@ class ColumnDataCollection {\n \t//! Initialize the column data collection\n \tvoid Initialize(vector<LogicalType> types);\n \n-\t//! Get a vector of references to every chunk (segment, index in segment), and optionally sort by block id\n+\t//! Get references to the string heaps in this ColumnDataCollection\n+\tvector<shared_ptr<StringHeap>> GetHeapReferences();\n+\t//! Get the allocator type of this ColumnDataCollection\n+\tColumnDataAllocatorType GetAllocatorType() const;\n+\n+\t//! Get a vector of the segments in this ColumnDataCollection\n \tconst vector<unique_ptr<ColumnDataCollectionSegment>> &GetSegments() const;\n \n private:\ndiff --git a/src/include/duckdb/common/types/column/column_data_collection_segment.hpp b/src/include/duckdb/common/types/column/column_data_collection_segment.hpp\nindex 3fc5aa80f64a..70db294088ae 100644\n--- a/src/include/duckdb/common/types/column/column_data_collection_segment.hpp\n+++ b/src/include/duckdb/common/types/column/column_data_collection_segment.hpp\n@@ -94,7 +94,7 @@ class ColumnDataCollectionSegment {\n \t//! The set of child indices\n \tvector<VectorDataIndex> child_indices;\n \t//! The string heap for the column data collection (only used for IN_MEMORY_ALLOCATOR)\n-\tStringHeap heap;\n+\tshared_ptr<StringHeap> heap;\n \n public:\n \tvoid AllocateNewChunk();\ndiff --git a/src/include/duckdb/common/types/column/column_data_scan_states.hpp b/src/include/duckdb/common/types/column/column_data_scan_states.hpp\nindex 3f2d3b9f866d..c809520c6a7c 100644\n--- a/src/include/duckdb/common/types/column/column_data_scan_states.hpp\n+++ b/src/include/duckdb/common/types/column/column_data_scan_states.hpp\n@@ -20,7 +20,9 @@ enum class ColumnDataAllocatorType : uint8_t {\n \tBUFFER_MANAGER_ALLOCATOR,\n \t//! Use an in-memory allocator, allocating data for every chunk\n \t//! This causes the column data collection to allocate blocks that are not tied to a buffer manager\n-\tIN_MEMORY_ALLOCATOR\n+\tIN_MEMORY_ALLOCATOR,\n+\t//! Use a buffer manager to allocate vectors, but use a StringHeap for strings\n+\tHYBRID\n };\n \n enum class ColumnDataScanProperties : uint8_t {\ndiff --git a/src/include/duckdb/common/types/date.hpp b/src/include/duckdb/common/types/date.hpp\nindex 02b50f3cde61..9491f46c8e77 100644\n--- a/src/include/duckdb/common/types/date.hpp\n+++ b/src/include/duckdb/common/types/date.hpp\n@@ -72,13 +72,13 @@ struct date_t { // NOLINT\n \t};\n \n \t// special values\n-\tstatic inline date_t infinity() {\n+\tstatic inline date_t infinity() { // NOLINT\n \t\treturn date_t(NumericLimits<int32_t>::Maximum());\n-\t} // NOLINT\n-\tstatic inline date_t ninfinity() {\n+\t}                                  // NOLINT\n+\tstatic inline date_t ninfinity() { // NOLINT\n \t\treturn date_t(-NumericLimits<int32_t>::Maximum());\n-\t} // NOLINT\n-\tstatic inline date_t epoch() {\n+\t}                              // NOLINT\n+\tstatic inline date_t epoch() { // NOLINT\n \t\treturn date_t(0);\n \t} // NOLINT\n };\n@@ -158,6 +158,8 @@ class Date {\n \tDUCKDB_API static int64_t EpochNanoseconds(date_t date);\n \t//! Extract the epoch from the date (microseconds since 1970-01-01)\n \tDUCKDB_API static int64_t EpochMicroseconds(date_t date);\n+\t//! Extract the epoch from the date (milliseconds since 1970-01-01)\n+\tDUCKDB_API static int64_t EpochMilliseconds(date_t date);\n \t//! Convert the epoch (seconds since 1970-01-01) to a date_t\n \tDUCKDB_API static date_t EpochToDate(int64_t epoch);\n \ndiff --git a/src/include/duckdb/common/types/string_type.hpp b/src/include/duckdb/common/types/string_type.hpp\nindex a72f9a6f35cc..5cec0eea443f 100644\n--- a/src/include/duckdb/common/types/string_type.hpp\n+++ b/src/include/duckdb/common/types/string_type.hpp\n@@ -83,6 +83,10 @@ struct string_t {\n \t\treturn value.pointer.prefix;\n \t}\n \n+\tchar *GetPrefixWriteable() const {\n+\t\treturn (char *)value.pointer.prefix;\n+\t}\n+\n \tidx_t GetSize() const {\n \t\treturn value.inlined.length;\n \t}\n@@ -95,6 +99,11 @@ struct string_t {\n \t\treturn GetString();\n \t}\n \n+\tchar *GetPointer() const {\n+\t\tD_ASSERT(!IsInlined());\n+\t\treturn value.pointer.ptr;\n+\t}\n+\n \tvoid SetPointer(char *new_ptr) {\n \t\tD_ASSERT(!IsInlined());\n \t\tvalue.pointer.ptr = new_ptr;\ndiff --git a/src/include/duckdb/core_functions/aggregate/algebraic/corr.hpp b/src/include/duckdb/core_functions/aggregate/algebraic/corr.hpp\nindex e6450dbcdce8..0d595b11aa7a 100644\n--- a/src/include/duckdb/core_functions/aggregate/algebraic/corr.hpp\n+++ b/src/include/duckdb/core_functions/aggregate/algebraic/corr.hpp\n@@ -31,10 +31,10 @@ struct CorrOperation {\n \t}\n \n \ttemplate <class A_TYPE, class B_TYPE, class STATE, class OP>\n-\tstatic void Operation(STATE &state, const A_TYPE &x_input, const B_TYPE &y_input, AggregateBinaryInput &idata) {\n-\t\tCovarOperation::Operation<A_TYPE, B_TYPE, CovarState, OP>(state.cov_pop, x_input, y_input, idata);\n-\t\tSTDDevBaseOperation::Execute<A_TYPE, StddevState>(state.dev_pop_x, x_input);\n-\t\tSTDDevBaseOperation::Execute<B_TYPE, StddevState>(state.dev_pop_y, y_input);\n+\tstatic void Operation(STATE &state, const A_TYPE &y, const B_TYPE &x, AggregateBinaryInput &idata) {\n+\t\tCovarOperation::Operation<A_TYPE, B_TYPE, CovarState, OP>(state.cov_pop, y, x, idata);\n+\t\tSTDDevBaseOperation::Execute<A_TYPE, StddevState>(state.dev_pop_x, x);\n+\t\tSTDDevBaseOperation::Execute<B_TYPE, StddevState>(state.dev_pop_y, y);\n \t}\n \n \ttemplate <class STATE, class OP>\ndiff --git a/src/include/duckdb/core_functions/aggregate/algebraic/covar.hpp b/src/include/duckdb/core_functions/aggregate/algebraic/covar.hpp\nindex 2beedb97ae51..79d7db1e2104 100644\n--- a/src/include/duckdb/core_functions/aggregate/algebraic/covar.hpp\n+++ b/src/include/duckdb/core_functions/aggregate/algebraic/covar.hpp\n@@ -5,6 +5,7 @@\n //\n //\n //===----------------------------------------------------------------------===//\n+// COVAR_POP(y,x)\n \n #pragma once\n \n@@ -29,7 +30,7 @@ struct CovarOperation {\n \t}\n \n \ttemplate <class A_TYPE, class B_TYPE, class STATE, class OP>\n-\tstatic void Operation(STATE &state, const A_TYPE &x, const B_TYPE &y, AggregateBinaryInput &idata) {\n+\tstatic void Operation(STATE &state, const A_TYPE &y, const B_TYPE &x, AggregateBinaryInput &idata) {\n \t\t// update running mean and d^2\n \t\tconst uint64_t n = ++(state.count);\n \n@@ -39,6 +40,7 @@ struct CovarOperation {\n \t\tconst double dy = (y - state.meany);\n \t\tconst double meany = state.meany + dy / n;\n \n+\t\t//  Schubert and Gertz SSDBM 2018 (4.3)\n \t\tconst double C = state.co_moment + dx * (y - meany);\n \n \t\tstate.meanx = meanx;\ndiff --git a/src/include/duckdb/core_functions/aggregate/regression/regr_count.hpp b/src/include/duckdb/core_functions/aggregate/regression/regr_count.hpp\nindex e41fa40ffcec..926cc393746d 100644\n--- a/src/include/duckdb/core_functions/aggregate/regression/regr_count.hpp\n+++ b/src/include/duckdb/core_functions/aggregate/regression/regr_count.hpp\n@@ -5,6 +5,7 @@\n //\n //\n //===----------------------------------------------------------------------===//\n+// REGR_COUNT(y, x)\n \n #pragma once\n \ndiff --git a/src/include/duckdb/core_functions/aggregate/regression/regr_slope.hpp b/src/include/duckdb/core_functions/aggregate/regression/regr_slope.hpp\nindex 0af001222376..0563a9a5ed71 100644\n--- a/src/include/duckdb/core_functions/aggregate/regression/regr_slope.hpp\n+++ b/src/include/duckdb/core_functions/aggregate/regression/regr_slope.hpp\n@@ -25,9 +25,9 @@ struct RegrSlopeOperation {\n \t}\n \n \ttemplate <class A_TYPE, class B_TYPE, class STATE, class OP>\n-\tstatic void Operation(STATE &state, const A_TYPE &x, const B_TYPE &y, AggregateBinaryInput &idata) {\n-\t\tCovarOperation::Operation<A_TYPE, B_TYPE, CovarState, OP>(state.cov_pop, x, y, idata);\n-\t\tSTDDevBaseOperation::Execute<A_TYPE, StddevState>(state.var_pop, y);\n+\tstatic void Operation(STATE &state, const A_TYPE &y, const B_TYPE &x, AggregateBinaryInput &idata) {\n+\t\tCovarOperation::Operation<A_TYPE, B_TYPE, CovarState, OP>(state.cov_pop, y, x,idata);\n+\t\tSTDDevBaseOperation::Execute<A_TYPE, StddevState>(state.var_pop, x);\n \t}\n \n \ttemplate <class STATE, class OP>\ndiff --git a/src/include/duckdb/core_functions/scalar/date_functions.hpp b/src/include/duckdb/core_functions/scalar/date_functions.hpp\nindex 51f6275e3b34..ba993c0ee0a6 100644\n--- a/src/include/duckdb/core_functions/scalar/date_functions.hpp\n+++ b/src/include/duckdb/core_functions/scalar/date_functions.hpp\n@@ -171,11 +171,29 @@ struct EpochFun {\n \n struct EpochMsFun {\n \tstatic constexpr const char *Name = \"epoch_ms\";\n-\tstatic constexpr const char *Parameters = \"ms\";\n-\tstatic constexpr const char *Description = \"Converts ms since epoch to a timestamp\";\n-\tstatic constexpr const char *Example = \"epoch_ms(701222400000)\";\n+\tstatic constexpr const char *Parameters = \"temporal\";\n+\tstatic constexpr const char *Description = \"Return the total number of milliseconds since the epoch\";\n+\tstatic constexpr const char *Example = \"epoch_ms(timestamp '2021-08-03 11:59:44.123456')\";\n \n-\tstatic ScalarFunction GetFunction();\n+\tstatic ScalarFunctionSet GetFunctions();\n+};\n+\n+struct EpochMicrosecondsFun {\n+\tstatic constexpr const char *Name = \"epoch_us\";\n+\tstatic constexpr const char *Parameters = \"temporal\";\n+\tstatic constexpr const char *Description = \"Return the total number of microseconds since the epoch\";\n+\tstatic constexpr const char *Example = \"epoch_us(timestamp '2021-08-03 11:59:44.123456')\";\n+\n+\tstatic ScalarFunctionSet GetFunctions();\n+};\n+\n+struct EpochNanosecondsFun {\n+\tstatic constexpr const char *Name = \"epoch_ns\";\n+\tstatic constexpr const char *Parameters = \"temporal\";\n+\tstatic constexpr const char *Description = \"Return the total number of nanooseconds since the epoch\";\n+\tstatic constexpr const char *Example = \"epoch_ns(timestamp '2021-08-03 11:59:44.123456')\";\n+\n+\tstatic ScalarFunctionSet GetFunctions();\n };\n \n struct EraFun {\n@@ -273,11 +291,11 @@ struct MakeTimeFun {\n \n struct MakeTimestampFun {\n \tstatic constexpr const char *Name = \"make_timestamp\";\n-\tstatic constexpr const char *Parameters = \"year,month,day,hour,minute,seconds\";\n+\tstatic constexpr const char *Parameters = \"year,month,day,hour,minute,seconds; or just microseconds since the epoch\";\n \tstatic constexpr const char *Description = \"The timestamp for the given parts\";\n \tstatic constexpr const char *Example = \"make_timestamp(1992, 9, 20, 13, 34, 27.123456)\";\n \n-\tstatic ScalarFunction GetFunction();\n+\tstatic ScalarFunctionSet GetFunctions();\n };\n \n struct MicrosecondsFun {\ndiff --git a/src/include/duckdb/execution/executor.hpp b/src/include/duckdb/execution/executor.hpp\nindex 13a17ae97687..eb9f73e4d42e 100644\n--- a/src/include/duckdb/execution/executor.hpp\n+++ b/src/include/duckdb/execution/executor.hpp\n@@ -88,6 +88,7 @@ class Executor {\n \tvoid AddEvent(shared_ptr<Event> event);\n \n \tvoid AddRecursiveCTE(PhysicalOperator &rec_cte);\n+\tvoid AddMaterializedCTE(PhysicalOperator &mat_cte);\n \tvoid ReschedulePipelines(const vector<shared_ptr<MetaPipeline>> &pipelines, vector<shared_ptr<Event>> &events);\n \n \t//! Whether or not the root of the pipeline is a result collector object\n@@ -129,6 +130,8 @@ class Executor {\n \tvector<shared_ptr<Pipeline>> root_pipelines;\n \t//! The recursive CTE's in this query plan\n \tvector<reference<PhysicalOperator>> recursive_ctes;\n+\t//! The materialized CTE's in this query plan\n+\tvector<reference<PhysicalOperator>> materialized_ctes;\n \t//! The pipeline executor for the root pipeline\n \tunique_ptr<PipelineExecutor> root_executor;\n \t//! The current root pipeline index\ndiff --git a/src/include/duckdb/execution/index/art/art.hpp b/src/include/duckdb/execution/index/art/art.hpp\nindex 6159c810d89f..b8cb9d55c0d6 100644\n--- a/src/include/duckdb/execution/index/art/art.hpp\n+++ b/src/include/duckdb/execution/index/art/art.hpp\n@@ -112,14 +112,13 @@ class ART : public Index {\n \tvoid Erase(Node &node, const ARTKey &key, idx_t depth, const row_t &row_id);\n \n \t//! Returns all row IDs belonging to a key greater (or equal) than the search key\n-\tbool SearchGreater(ARTIndexScanState &state, ARTKey &key, bool inclusive, idx_t max_count,\n-\t                   vector<row_t> &result_ids);\n+\tbool SearchGreater(ARTIndexScanState &state, ARTKey &key, bool equal, idx_t max_count, vector<row_t> &result_ids);\n \t//! Returns all row IDs belonging to a key less (or equal) than the upper_bound\n-\tbool SearchLess(ARTIndexScanState &state, ARTKey &upper_bound, bool inclusive, idx_t max_count,\n+\tbool SearchLess(ARTIndexScanState &state, ARTKey &upper_bound, bool equal, idx_t max_count,\n \t                vector<row_t> &result_ids);\n \t//! Returns all row IDs belonging to a key within the range of lower_bound and upper_bound\n-\tbool SearchCloseRange(ARTIndexScanState &state, ARTKey &lower_bound, ARTKey &upper_bound, bool left_inclusive,\n-\t                      bool right_inclusive, idx_t max_count, vector<row_t> &result_ids);\n+\tbool SearchCloseRange(ARTIndexScanState &state, ARTKey &lower_bound, ARTKey &upper_bound, bool left_equal,\n+\t                      bool right_equal, idx_t max_count, vector<row_t> &result_ids);\n \n \t//! Initializes a merge operation by returning a set containing the buffer count of each fixed-size allocator\n \tvoid InitializeMerge(ARTFlags &flags);\ndiff --git a/src/include/duckdb/execution/index/art/iterator.hpp b/src/include/duckdb/execution/index/art/iterator.hpp\nindex 51083d39dc70..e9ffea270ad3 100644\n--- a/src/include/duckdb/execution/index/art/iterator.hpp\n+++ b/src/include/duckdb/execution/index/art/iterator.hpp\n@@ -14,9 +14,8 @@\n \n namespace duckdb {\n \n+//! Keeps track of the byte leading to the currently active child of the node\n struct IteratorEntry {\n-\tIteratorEntry() {\n-\t}\n \tIteratorEntry(Node node, uint8_t byte) : node(node), byte(byte) {\n \t}\n \n@@ -24,16 +23,23 @@ struct IteratorEntry {\n \tuint8_t byte = 0;\n };\n \n-//! Keeps track of the current key in the iterator\n-class IteratorCurrentKey {\n+//! Keeps track of the current key in the iterator leading down to the top node in the stack\n+class IteratorKey {\n public:\n-\t//! Push byte into current key\n-\tvoid Push(const uint8_t key);\n-\t//! Pops n elements from the key\n-\tvoid Pop(const idx_t n);\n+\t//! Pushes a byte into the current key\n+\tinline void Push(const uint8_t key_byte) {\n+\t\tkey_bytes.push_back(key_byte);\n+\t}\n+\t//! Pops n bytes from the current key\n+\tinline void Pop(const idx_t n) {\n+\t\tkey_bytes.resize(key_bytes.size() - n);\n+\t}\n \n \t//! Subscript operator\n-\tuint8_t &operator[](idx_t idx);\n+\tinline uint8_t &operator[](idx_t idx) {\n+\t\tD_ASSERT(idx < key_bytes.size());\n+\t\treturn key_bytes[idx];\n+\t}\n \t//! Greater than operator\n \tbool operator>(const ARTKey &k) const;\n \t//! Greater than or equal to operator\n@@ -42,37 +48,35 @@ class IteratorCurrentKey {\n \tbool operator==(const ARTKey &k) const;\n \n private:\n-\t//! The current key position\n-\tidx_t cur_key_pos = 0;\n-\t//! The current key corresponding to the current leaf\n-\tvector<uint8_t> key;\n+\tvector<uint8_t> key_bytes;\n };\n \n class Iterator {\n public:\n-\t//! All information about the current key\n-\tIteratorCurrentKey cur_key;\n+\t//! Holds the current key leading down to the top node on the stack\n+\tIteratorKey current_key;\n \t//! Pointer to the ART\n-\tART *art = nullptr;\n+\toptional_ptr<ART> art = nullptr;\n \n-\t//! Scan the tree\n-\tbool Scan(const ARTKey &key, const idx_t &max_count, vector<row_t> &result_ids, const bool &is_inclusive);\n-\t//! Finds the minimum value of the tree\n+\t//! Scans the tree, starting at the current top node on the stack, and ending at upper_bound.\n+\t//! If upper_bound is the empty ARTKey, than there is no upper bound\n+\tbool Scan(const ARTKey &upper_bound, const idx_t max_count, vector<row_t> &result_ids, const bool equal);\n+\t//! Finds the minimum (leaf) of the current subtree\n \tvoid FindMinimum(Node &node);\n-\t//! Goes to the lower bound of the tree\n-\tbool LowerBound(Node node, const ARTKey &key, const bool &is_inclusive);\n+\t//! Finds the lower bound of the ART and adds the nodes to the stack. Returns false, if the lower\n+\t//! bound exceeds the maximum value of the ART\n+\tbool LowerBound(Node &node, const ARTKey &key, const bool equal, idx_t depth);\n \n private:\n-\t//! Stack of iterator entries\n+\t//! Stack of nodes from the root to the currently active node\n \tstack<IteratorEntry> nodes;\n \t//! Last visited leaf\n-\tLeaf *last_leaf = nullptr;\n+\toptional_ptr<Leaf> last_leaf = nullptr;\n \n-\t//! Go to the next node\n+\t//! Goes to the next leaf in the ART and sets it as last_leaf,\n+\t//! returns false if there is no next leaf\n \tbool Next();\n-\t//! Push part of the key to the current key\n-\tvoid PushKey(const Node &node, const uint8_t byte);\n-\t//! Pop node from the stack of iterator entries\n+\t//! Pop the top node from the stack of iterator entries and adjust the current key\n \tvoid PopNode();\n };\n } // namespace duckdb\ndiff --git a/src/include/duckdb/execution/index/art/leaf.hpp b/src/include/duckdb/execution/index/art/leaf.hpp\nindex f8271afaacf7..45d6e73f26a1 100644\n--- a/src/include/duckdb/execution/index/art/leaf.hpp\n+++ b/src/include/duckdb/execution/index/art/leaf.hpp\n@@ -8,16 +8,13 @@\n \n #pragma once\n \n-#include \"duckdb/execution/index/art/art.hpp\"\n #include \"duckdb/execution/index/art/fixed_size_allocator.hpp\"\n+#include \"duckdb/execution/index/art/art.hpp\"\n #include \"duckdb/execution/index/art/node.hpp\"\n-#include \"duckdb/execution/index/art/prefix.hpp\"\n \n namespace duckdb {\n \n // classes\n-class Node;\n-class ARTKey;\n class MetaBlockWriter;\n class MetaBlockReader;\n \n@@ -28,8 +25,6 @@ class Leaf {\n public:\n \t//! Number of row IDs\n \tuint32_t count;\n-\t//! Compressed path (prefix)\n-\tPrefix prefix;\n \tunion {\n \t\t//! The pointer to the head of the list of leaf segments\n \t\tNode ptr;\n@@ -38,13 +33,10 @@ class Leaf {\n \t} row_ids;\n \n public:\n-\t//! Get a new leaf node, might cause a new buffer allocation, and initializes a leaf holding one\n-\t//! row ID and a prefix starting at depth\n-\tstatic Leaf &New(ART &art, Node &node, const ARTKey &key, const uint32_t depth, const row_t row_id);\n-\t//! Get a new leaf node, might cause a new buffer allocation, and initializes a leaf holding\n-\t//! n_row_ids row IDs and a prefix starting at depth\n-\tstatic Leaf &New(ART &art, Node &node, const ARTKey &key, const uint32_t depth, const row_t *row_ids,\n-\t                 const idx_t count);\n+\t//! Get a new leaf node, might cause a new buffer allocation, and initializes a leaf holding one row ID\n+\tstatic Leaf &New(ART &art, Node &node, const row_t row_id);\n+\t//! Get a new leaf node, might cause a new buffer allocation, and initializes a leaf holding n_row_ids row IDs\n+\tstatic Leaf &New(ART &art, Node &node, const row_t *row_ids, const idx_t count);\n \t//! Free the leaf\n \tstatic void Free(ART &art, Node &node);\n \t//! Get a reference to the leaf\n@@ -72,7 +64,7 @@ class Leaf {\n \t//! and sets the ptr to point to the segment containing the row ID\n \tuint32_t FindRowId(const ART &art, Node &ptr, const row_t row_id) const;\n \n-\t//! Returns the string representation of a leaf\n+\t//! Returns the string representation of the node, or only traverses and verifies the node and its subtree\n \tstring VerifyAndToString(const ART &art, const bool only_verify) const;\n \n \t//! Serialize this leaf\ndiff --git a/src/include/duckdb/execution/index/art/node.hpp b/src/include/duckdb/execution/index/art/node.hpp\nindex 6d66ca22b8fe..bac651454044 100644\n--- a/src/include/duckdb/execution/index/art/node.hpp\n+++ b/src/include/duckdb/execution/index/art/node.hpp\n@@ -15,7 +15,7 @@ namespace duckdb {\n \n // classes\n enum class NType : uint8_t {\n-\tPREFIX_SEGMENT = 1,\n+\tPREFIX = 1,\n \tLEAF_SEGMENT = 2,\n \tLEAF = 3,\n \tNODE_4 = 4,\n@@ -38,11 +38,6 @@ struct ARTFlags;\n //! The remaining bytes are the position in the respective ART buffer.\n class Node : public SwizzleablePointer {\n public:\n-\t// constants (this allows testing performance with different ART node sizes)\n-\n-\t//! Node prefixes (NOTE: this should always hold: PREFIX_SEGMENT_SIZE >= PREFIX_INLINE_BYTES)\n-\tstatic constexpr uint32_t PREFIX_INLINE_BYTES = 8;\n-\tstatic constexpr uint32_t PREFIX_SEGMENT_SIZE = 32;\n \t//! Node thresholds\n \tstatic constexpr uint8_t NODE_48_SHRINK_THRESHOLD = 12;\n \tstatic constexpr uint8_t NODE_256_SHRINK_THRESHOLD = 36;\n@@ -54,6 +49,7 @@ class Node : public SwizzleablePointer {\n \t//! Other constants\n \tstatic constexpr uint8_t EMPTY_MARKER = 48;\n \tstatic constexpr uint32_t LEAF_SEGMENT_SIZE = 8;\n+\tstatic constexpr uint8_t PREFIX_SIZE = 15;\n \n public:\n \t//! Constructs an empty ARTNode\n@@ -73,7 +69,7 @@ class Node : public SwizzleablePointer {\n \t//! Retrieve the node type from the leftmost byte\n \tinline NType DecodeARTNodeType() const {\n \t\tD_ASSERT(!IsSwizzled());\n-\t\tD_ASSERT(type >= (uint8_t)NType::PREFIX_SEGMENT);\n+\t\tD_ASSERT(type >= (uint8_t)NType::PREFIX);\n \t\tD_ASSERT(type <= (uint8_t)NType::NODE_256);\n \t\treturn NType(type);\n \t}\n@@ -91,7 +87,7 @@ class Node : public SwizzleablePointer {\n \t//! Insert the child node at byte\n \tstatic void InsertChild(ART &art, Node &node, const uint8_t byte, const Node child);\n \t//! Delete the child node at the respective byte\n-\tstatic void DeleteChild(ART &art, Node &node, const uint8_t byte);\n+\tstatic void DeleteChild(ART &art, Node &node, Node &prefix, const uint8_t byte);\n \n \t//! Get the child for the respective byte in the node\n \toptional_ptr<Node> GetChild(ART &art, const uint8_t byte) const;\n@@ -107,8 +103,6 @@ class Node : public SwizzleablePointer {\n \tstring VerifyAndToString(ART &art, const bool only_verify);\n \t//! Returns the capacity of the node\n \tidx_t GetCapacity() const;\n-\t//! Returns a pointer to the prefix of the node\n-\tPrefix &GetPrefix(ART &art);\n \t//! Returns the matching node type for a given count\n \tstatic NType GetARTNodeTypeByCount(const idx_t count);\n \t//! Get references to the different allocators\ndiff --git a/src/include/duckdb/execution/index/art/node16.hpp b/src/include/duckdb/execution/index/art/node16.hpp\nindex ce48dea291d4..320f7489bc38 100644\n--- a/src/include/duckdb/execution/index/art/node16.hpp\n+++ b/src/include/duckdb/execution/index/art/node16.hpp\n@@ -8,10 +8,9 @@\n \n #pragma once\n \n-#include \"duckdb/execution/index/art/art.hpp\"\n #include \"duckdb/execution/index/art/fixed_size_allocator.hpp\"\n+#include \"duckdb/execution/index/art/art.hpp\"\n #include \"duckdb/execution/index/art/node.hpp\"\n-#include \"duckdb/execution/index/art/prefix.hpp\"\n \n namespace duckdb {\n \n@@ -20,8 +19,6 @@ class Node16 {\n public:\n \t//! Number of non-null children\n \tuint8_t count;\n-\t//! Compressed path (prefix)\n-\tPrefix prefix;\n \t//! Array containing all partial key bytes\n \tuint8_t key[Node::NODE_16_CAPACITY];\n \t//! ART node pointers to the child nodes\n@@ -57,10 +54,10 @@ class Node16 {\n \t//! Get the first child that is greater or equal to the specific byte\n \toptional_ptr<Node> GetNextChild(uint8_t &byte);\n \n-\t//! Serialize an ART node\n+\t//! Serialize this node\n \tBlockPointer Serialize(ART &art, MetaBlockWriter &writer);\n \t//! Deserialize this node\n-\tvoid Deserialize(ART &art, MetaBlockReader &reader);\n+\tvoid Deserialize(MetaBlockReader &reader);\n \n \t//! Vacuum the children of the node\n \tvoid Vacuum(ART &art, const ARTFlags &flags);\ndiff --git a/src/include/duckdb/execution/index/art/node256.hpp b/src/include/duckdb/execution/index/art/node256.hpp\nindex 39bce9009513..87b1e0e5464a 100644\n--- a/src/include/duckdb/execution/index/art/node256.hpp\n+++ b/src/include/duckdb/execution/index/art/node256.hpp\n@@ -8,10 +8,9 @@\n \n #pragma once\n \n-#include \"duckdb/execution/index/art/art.hpp\"\n #include \"duckdb/execution/index/art/fixed_size_allocator.hpp\"\n+#include \"duckdb/execution/index/art/art.hpp\"\n #include \"duckdb/execution/index/art/node.hpp\"\n-#include \"duckdb/execution/index/art/prefix.hpp\"\n \n namespace duckdb {\n \n@@ -20,8 +19,6 @@ class Node256 {\n public:\n \t//! Number of non-null children\n \tuint16_t count;\n-\t//! Compressed path (prefix)\n-\tPrefix prefix;\n \t//! ART node pointers to the child nodes\n \tNode children[Node::NODE_256_CAPACITY];\n \n@@ -60,10 +57,10 @@ class Node256 {\n \t//! Get the first child that is greater or equal to the specific byte\n \toptional_ptr<Node> GetNextChild(uint8_t &byte);\n \n-\t//! Serialize an ART node\n+\t//! Serialize this node\n \tBlockPointer Serialize(ART &art, MetaBlockWriter &writer);\n \t//! Deserialize this node\n-\tvoid Deserialize(ART &art, MetaBlockReader &reader);\n+\tvoid Deserialize(MetaBlockReader &reader);\n \n \t//! Vacuum the children of the node\n \tvoid Vacuum(ART &art, const ARTFlags &flags);\ndiff --git a/src/include/duckdb/execution/index/art/node4.hpp b/src/include/duckdb/execution/index/art/node4.hpp\nindex 387e075a6b46..802489238b10 100644\n--- a/src/include/duckdb/execution/index/art/node4.hpp\n+++ b/src/include/duckdb/execution/index/art/node4.hpp\n@@ -8,10 +8,9 @@\n \n #pragma once\n \n-#include \"duckdb/execution/index/art/art.hpp\"\n #include \"duckdb/execution/index/art/fixed_size_allocator.hpp\"\n+#include \"duckdb/execution/index/art/art.hpp\"\n #include \"duckdb/execution/index/art/node.hpp\"\n-#include \"duckdb/execution/index/art/prefix.hpp\"\n \n namespace duckdb {\n \n@@ -20,8 +19,6 @@ class Node4 {\n public:\n \t//! Number of non-null children\n \tuint8_t count;\n-\t//! Compressed path (prefix)\n-\tPrefix prefix;\n \t//! Array containing all partial key bytes\n \tuint8_t key[Node::NODE_4_CAPACITY];\n \t//! ART node pointers to the child nodes\n@@ -39,13 +36,13 @@ class Node4 {\n \t//! Initializes all fields of the node while shrinking a Node16 to a Node4\n \tstatic Node4 &ShrinkNode16(ART &art, Node &node4, Node &node16);\n \n-\t//! Initializes a merge by incrementing the buffer IDs of the node\n+\t//! Initializes a merge by incrementing the buffer IDs of the child nodes\n \tvoid InitializeMerge(ART &art, const ARTFlags &flags);\n \n \t//! Insert a child node at byte\n \tstatic void InsertChild(ART &art, Node &node, const uint8_t byte, const Node child);\n \t//! Delete the child node at the respective byte\n-\tstatic void DeleteChild(ART &art, Node &node, const uint8_t byte);\n+\tstatic void DeleteChild(ART &art, Node &node, Node &prefix, const uint8_t byte);\n \n \t//! Replace the child node at the respective byte\n \tvoid ReplaceChild(const uint8_t byte, const Node child);\n@@ -55,10 +52,10 @@ class Node4 {\n \t//! Get the first child that is greater or equal to the specific byte\n \toptional_ptr<Node> GetNextChild(uint8_t &byte);\n \n-\t//! Serialize an ART node\n+\t//! Serialize this node\n \tBlockPointer Serialize(ART &art, MetaBlockWriter &writer);\n \t//! Deserialize this node\n-\tvoid Deserialize(ART &art, MetaBlockReader &reader);\n+\tvoid Deserialize(MetaBlockReader &reader);\n \n \t//! Vacuum the children of the node\n \tvoid Vacuum(ART &art, const ARTFlags &flags);\ndiff --git a/src/include/duckdb/execution/index/art/node48.hpp b/src/include/duckdb/execution/index/art/node48.hpp\nindex ed4168846123..58581686b5d4 100644\n--- a/src/include/duckdb/execution/index/art/node48.hpp\n+++ b/src/include/duckdb/execution/index/art/node48.hpp\n@@ -8,10 +8,9 @@\n \n #pragma once\n \n-#include \"duckdb/execution/index/art/art.hpp\"\n #include \"duckdb/execution/index/art/fixed_size_allocator.hpp\"\n+#include \"duckdb/execution/index/art/art.hpp\"\n #include \"duckdb/execution/index/art/node.hpp\"\n-#include \"duckdb/execution/index/art/prefix.hpp\"\n \n namespace duckdb {\n \n@@ -21,8 +20,6 @@ class Node48 {\n public:\n \t//! Number of non-null children\n \tuint8_t count;\n-\t//! Compressed path (prefix)\n-\tPrefix prefix;\n \t//! Array containing all possible partial key bytes, those not set have an EMPTY_MARKER\n \tuint8_t child_index[Node::NODE_256_CAPACITY];\n \t//! ART node pointers to the child nodes\n@@ -67,10 +64,10 @@ class Node48 {\n \t//! Get the first child that is greater or equal to the specific byte\n \toptional_ptr<Node> GetNextChild(uint8_t &byte);\n \n-\t//! Serialize an ART node\n+\t//! Serialize this node\n \tBlockPointer Serialize(ART &art, MetaBlockWriter &writer);\n \t//! Deserialize this node\n-\tvoid Deserialize(ART &art, MetaBlockReader &reader);\n+\tvoid Deserialize(MetaBlockReader &reader);\n \n \t//! Vacuum the children of the node\n \tvoid Vacuum(ART &art, const ARTFlags &flags);\ndiff --git a/src/include/duckdb/execution/index/art/prefix.hpp b/src/include/duckdb/execution/index/art/prefix.hpp\nindex 90b7d873d2b4..14e14a837752 100644\n--- a/src/include/duckdb/execution/index/art/prefix.hpp\n+++ b/src/include/duckdb/execution/index/art/prefix.hpp\n@@ -7,78 +7,89 @@\n //===----------------------------------------------------------------------===//\n #pragma once\n \n+#include \"duckdb/execution/index/art/art.hpp\"\n #include \"duckdb/execution/index/art/node.hpp\"\n \n namespace duckdb {\n \n // classes\n class ARTKey;\n-class PrefixSegment;\n \n+//! The Prefix is a special node type that contains up to PREFIX_SIZE bytes, and one byte for the count,\n+//! and a Node pointer. This pointer either points to another prefix\n+//! node or the 'actual' ART node.\n class Prefix {\n public:\n-\t//! Number of bytes in this prefix\n-\tuint32_t count;\n-\tunion {\n-\t\t//! Pointer to the head of the list of prefix segments\n-\t\tNode ptr;\n-\t\t//! Inlined prefix bytes\n-\t\tuint8_t inlined[Node::PREFIX_INLINE_BYTES];\n-\t} data;\n+\t//! Up to PREFIX_SIZE bytes of prefix data and the count\n+\tuint8_t data[Node::PREFIX_SIZE + 1];\n+\t//! A pointer to the next ART node\n+\tNode ptr;\n \n public:\n-\t//! Delete all prefix segments (if not inlined) and reset all fields\n-\tvoid Free(ART &art);\n-\t//! Initializes all the fields of an empty prefix\n-\tinline void Initialize() {\n-\t\tcount = 0;\n+\t//! Get a new empty prefix node, might cause a new buffer allocation\n+\tstatic Prefix &New(ART &art, Node &node);\n+\t//! Create a new prefix node containing a single byte and a pointer to a next node\n+\tstatic Prefix &New(ART &art, Node &node, uint8_t byte, Node next);\n+\t//! Get a new chain of prefix nodes, might cause new buffer allocations,\n+\t//! with the node parameter holding the tail of the chain\n+\tstatic void New(ART &art, reference<Node> &node, const ARTKey &key, const uint32_t depth, uint32_t count);\n+\t//! Free the node (and its subtree)\n+\tstatic void Free(ART &art, Node &node);\n+\t//! Get a reference to the prefix\n+\tstatic inline Prefix &Get(const ART &art, const Node ptr) {\n+\t\treturn *Node::GetAllocator(art, NType::PREFIX).Get<Prefix>(ptr);\n \t}\n-\t//! Initialize a prefix from an ART key\n-\tvoid Initialize(ART &art, const ARTKey &key, const uint32_t depth, const uint32_t count_p);\n-\t//! Initialize a prefix from another prefix up to count\n-\tvoid Initialize(ART &art, const Prefix &other, const uint32_t count_p);\n \n-\t//! Initializes a merge by incrementing the buffer IDs of the prefix segments\n-\tvoid InitializeMerge(ART &art, const idx_t buffer_count);\n+\t//! Initializes a merge by incrementing the buffer ID of the child node(s)\n+\tinline void InitializeMerge(ART &art, const ARTFlags &flags) {\n+\t\tptr.InitializeMerge(art, flags);\n+\t}\n \n-\t//! Move a prefix into this prefix\n-\tinline void Move(Prefix &other) {\n-\t\tcount = other.count;\n-\t\tdata = other.data;\n-\t\tother.Initialize();\n+\t//! Appends a byte and a child_prefix to prefix. If there is no prefix, than it pushes the\n+\t//! byte on top of child_prefix. If there is no child_prefix, then it creates a new\n+\t//! prefix node containing that byte\n+\tstatic void Concatenate(ART &art, Node &prefix_node, const uint8_t byte, Node &child_prefix_node);\n+\t//! Traverse a prefix and a key until (1) encountering a non-prefix node, or (2) encountering\n+\t//! a mismatching byte, in which case depth indexes the mismatching byte in the key\n+\tstatic idx_t Traverse(ART &art, reference<Node> &prefix_node, const ARTKey &key, idx_t &depth);\n+\t//! Traverse two prefixes to find (1) that they match (so far), or (2) that they have a mismatching position,\n+\t//! or (3) that one prefix contains the other prefix\n+\tstatic bool Traverse(ART &art, reference<Node> &l_node, reference<Node> &r_node, idx_t &mismatch_position);\n+\t//! Returns the byte at position\n+\tstatic inline uint8_t GetByte(const ART &art, const Node &prefix_node, const idx_t position) {\n+\t\tauto prefix = Prefix::Get(art, prefix_node);\n+\t\tD_ASSERT(position < Node::PREFIX_SIZE);\n+\t\tD_ASSERT(position < prefix.data[Node::PREFIX_SIZE]);\n+\t\treturn prefix.data[position];\n \t}\n-\t//! Append a prefix to this prefix\n-\tvoid Append(ART &art, const Prefix &other);\n-\t//! Concatenate prefix with a partial key byte and another prefix: other.prefix + byte + this->prefix\n-\tvoid Concatenate(ART &art, const uint8_t byte, const Prefix &other);\n-\t//! Removes the first n bytes, and returns the new first byte\n-\tuint8_t Reduce(ART &art, const idx_t reduce_count);\n+\t//! Removes the first n bytes from the prefix and shifts all subsequent bytes in the\n+\t//! prefix node(s) by n. Frees empty prefix nodes\n+\tstatic void Reduce(ART &art, Node &prefix_node, const idx_t n);\n+\t//! Splits the prefix at position. prefix_node then references the ptr (if any bytes left before\n+\t//! the split), or stays unchanged (no bytes left before the split). child_node references\n+\t//! the node after the split, which is either a new prefix node, or ptr\n+\tstatic void Split(ART &art, reference<Node> &prefix_node, Node &child_node, idx_t position);\n \n-\t//! Get the byte at position\n-\tuint8_t GetByte(const ART &art, const idx_t position) const;\n-\t//! Compare the key with the prefix of the node, return the position where they mismatch\n-\tuint32_t KeyMismatchPosition(const ART &art, const ARTKey &key, const uint32_t depth) const;\n-\t//! Compare this prefix to another prefix, return the position where they mismatch, or count otherwise\n-\tuint32_t MismatchPosition(const ART &art, const Prefix &other) const;\n+\t//! Returns the string representation of the node, or only traverses and verifies the node and its subtree\n+\tstring VerifyAndToString(ART &art, const bool only_verify);\n \n-\t//! Serialize this prefix\n-\tvoid Serialize(const ART &art, MetaBlockWriter &writer) const;\n-\t//! Deserialize this prefix\n-\tvoid Deserialize(ART &art, MetaBlockReader &reader);\n+\t//! Serialize this node\n+\tBlockPointer Serialize(ART &art, MetaBlockWriter &writer);\n+\t//! Deserialize this node\n+\tvoid Deserialize(MetaBlockReader &reader);\n \n-\t//! Vacuum the prefix segments of a prefix, if not inlined\n-\tvoid Vacuum(ART &art);\n+\t//! Vacuum the child of the node\n+\tinline void Vacuum(ART &art, const ARTFlags &flags) {\n+\t\tNode::Vacuum(art, ptr, flags);\n+\t}\n \n private:\n-\t//! Returns whether this prefix is inlined\n-\tinline bool IsInlined() const {\n-\t\treturn count <= Node::PREFIX_INLINE_BYTES;\n-\t}\n-\t//! Moves all inlined bytes onto a prefix segment, does not change the size\n-\t//! so this will be an (temporarily) invalid prefix\n-\tPrefixSegment &MoveInlinedToSegment(ART &art);\n-\t//! Inlines up to eight bytes on the first prefix segment\n-\tvoid MoveSegmentToInlined(ART &art);\n+\t//! Appends the byte to this prefix node, or creates a subsequent prefix node,\n+\t//! if this node is full\n+\tPrefix &Append(ART &art, const uint8_t byte);\n+\t//! Appends the other_prefix and all its subsequent prefix nodes to this prefix node.\n+\t//! Also frees all copied/appended nodes\n+\tvoid Append(ART &art, Node other_prefix);\n };\n \n } // namespace duckdb\ndiff --git a/src/include/duckdb/execution/index/art/prefix_segment.hpp b/src/include/duckdb/execution/index/art/prefix_segment.hpp\ndeleted file mode 100644\nindex d41476abd4f2..000000000000\n--- a/src/include/duckdb/execution/index/art/prefix_segment.hpp\n+++ /dev/null\n@@ -1,40 +0,0 @@\n-//===----------------------------------------------------------------------===//\n-//                         DuckDB\n-//\n-// duckdb/execution/index/art/prefix_segment.hpp\n-//\n-//\n-//===----------------------------------------------------------------------===//\n-#pragma once\n-\n-#include \"duckdb/execution/index/art/art.hpp\"\n-#include \"duckdb/execution/index/art/node.hpp\"\n-\n-namespace duckdb {\n-\n-class PrefixSegment {\n-public:\n-\t//! Constructor of an empty prefix segment containing bytes.\n-\t//! NOTE: only use this constructor for temporary prefix segments\n-\tPrefixSegment() {};\n-\n-\t//! The prefix bytes stored in this segment\n-\tuint8_t bytes[Node::PREFIX_SEGMENT_SIZE];\n-\t//! The position of the next segment, if the prefix exceeds this segment\n-\tNode next;\n-\n-public:\n-\t//! Get a new prefix segment node, might cause a new buffer allocation, and initialize it\n-\tstatic PrefixSegment &New(ART &art, Node &node);\n-\t//! Get a reference to the prefix segment\n-\tstatic inline PrefixSegment &Get(const ART &art, const Node ptr) {\n-\t\treturn *Node::GetAllocator(art, NType::PREFIX_SEGMENT).Get<PrefixSegment>(ptr);\n-\t}\n-\n-\t//! Append a byte to the current segment, or create a new segment containing that byte\n-\tPrefixSegment &Append(ART &art, uint32_t &count, const uint8_t byte);\n-\t//! Get the tail of a list of segments\n-\tPrefixSegment &GetTail(const ART &art);\n-};\n-\n-} // namespace duckdb\ndiff --git a/src/include/duckdb/execution/operator/join/physical_asof_join.hpp b/src/include/duckdb/execution/operator/join/physical_asof_join.hpp\nindex 94d19949e34a..f0195a1385f7 100644\n--- a/src/include/duckdb/execution/operator/join/physical_asof_join.hpp\n+++ b/src/include/duckdb/execution/operator/join/physical_asof_join.hpp\n@@ -13,8 +13,7 @@\n \n namespace duckdb {\n \n-//! PhysicalAsOfJoin represents a piecewise merge loop join between\n-//! two tables\n+//! PhysicalAsOfJoin represents an as-of join between two tables\n class PhysicalAsOfJoin : public PhysicalComparisonJoin {\n public:\n \tstatic constexpr const PhysicalOperatorType TYPE = PhysicalOperatorType::ASOF_JOIN;\n@@ -58,7 +57,7 @@ class PhysicalAsOfJoin : public PhysicalComparisonJoin {\n \tSourceResultType GetData(ExecutionContext &context, DataChunk &chunk, OperatorSourceInput &input) const override;\n \n \tbool IsSource() const override {\n-\t\treturn IsRightOuterJoin(join_type);\n+\t\treturn true;\n \t}\n \tbool ParallelSource() const override {\n \t\treturn true;\n@@ -79,13 +78,6 @@ class PhysicalAsOfJoin : public PhysicalComparisonJoin {\n \tbool ParallelSink() const override {\n \t\treturn true;\n \t}\n-\n-private:\n-\t// resolve joins that output max N elements (SEMI, ANTI, MARK)\n-\tvoid ResolveSimpleJoin(ExecutionContext &context, DataChunk &input, DataChunk &chunk, OperatorState &state) const;\n-\t// resolve joins that can potentially output N*M elements (INNER, LEFT, FULL)\n-\tOperatorResultType ResolveComplexJoin(ExecutionContext &context, DataChunk &input, DataChunk &chunk,\n-\t                                      OperatorState &state) const;\n };\n \n } // namespace duckdb\ndiff --git a/src/include/duckdb/execution/operator/persistent/base_csv_reader.hpp b/src/include/duckdb/execution/operator/persistent/base_csv_reader.hpp\nindex 6b06e353b9f3..2fa27cfab835 100644\n--- a/src/include/duckdb/execution/operator/persistent/base_csv_reader.hpp\n+++ b/src/include/duckdb/execution/operator/persistent/base_csv_reader.hpp\n@@ -75,7 +75,7 @@ class BaseCSVReader {\n \t}\n \n \t//! Get the 1-indexed global line number for the given local error line\n-\tvirtual idx_t GetLineError(idx_t line_error, idx_t buffer_idx) {\n+\tvirtual idx_t GetLineError(idx_t line_error, idx_t buffer_idx, bool stop_at_first = true) {\n \t\treturn line_error + 1;\n \t};\n \ndiff --git a/src/include/duckdb/execution/operator/persistent/csv_line_info.hpp b/src/include/duckdb/execution/operator/persistent/csv_line_info.hpp\nindex 4d790fe7490f..7b4805bcfab6 100644\n--- a/src/include/duckdb/execution/operator/persistent/csv_line_info.hpp\n+++ b/src/include/duckdb/execution/operator/persistent/csv_line_info.hpp\n@@ -18,11 +18,12 @@ struct LineInfo {\n \tbool CanItGetLine(idx_t file_idx, idx_t batch_idx);\n \n \t//! Return the 1-indexed line number\n-\tidx_t GetLine(idx_t batch_idx, idx_t line_error = 0, idx_t file_idx = 0, idx_t cur_start = 0, bool verify = true);\n+\tidx_t GetLine(idx_t batch_idx, idx_t line_error = 0, idx_t file_idx = 0, idx_t cur_start = 0, bool verify = true,\n+\t              bool stop_at_first = true);\n \t//! Verify if the CSV File was read correctly from [0,batch_idx] batches.\n \tvoid Verify(idx_t file_idx, idx_t batch_idx, idx_t cur_first_pos);\n-\t//! Lines read per batch, <batch_index,count>\n-\tunordered_map<idx_t, idx_t> lines_read;\n+\t//! Lines read per batch, <file_index, <batch_index, count>>\n+\tvector<unordered_map<idx_t, idx_t>> lines_read;\n \t//! Set of batches that have been initialized but are not yet finished.\n \tvector<set<idx_t>> current_batches;\n \t//! Pointer to CSV Reader Mutex\ndiff --git a/src/include/duckdb/execution/operator/persistent/csv_reader_options.hpp b/src/include/duckdb/execution/operator/persistent/csv_reader_options.hpp\nindex 0cf388f66f9f..864da460d16a 100644\n--- a/src/include/duckdb/execution/operator/persistent/csv_reader_options.hpp\n+++ b/src/include/duckdb/execution/operator/persistent/csv_reader_options.hpp\n@@ -55,6 +55,14 @@ struct BufferedCSVReaderOptions {\n \tbool header = false;\n \t//! Whether or not we should ignore InvalidInput errors\n \tbool ignore_errors = false;\n+\t//! Rejects table name\n+\tstring rejects_table_name;\n+\t//! Rejects table entry limit (0 = no limit)\n+\tidx_t rejects_limit = 0;\n+\t//! Columns to use as recovery key for rejected rows when reading with ignore_errors = true\n+\tvector<string> rejects_recovery_columns;\n+\t//! Index of the recovery columns\n+\tvector<idx_t> rejects_recovery_column_ids;\n \t//! Expected number of columns\n \tidx_t num_cols = 0;\n \t//! Number of samples to buffer\n@@ -155,7 +163,6 @@ struct BufferedCSVReaderOptions {\n \t//! set - argument(s) to the option\n \t//! expected_names - names expected if the option is \"columns\"\n \tvoid SetReadOption(const string &loption, const Value &value, vector<string> &expected_names);\n-\n \tvoid SetWriteOption(const string &loption, const Value &value);\n \tvoid SetDateFormat(LogicalTypeId type, const string &format, bool read_format);\n \ndiff --git a/src/include/duckdb/execution/operator/persistent/csv_rejects_table.hpp b/src/include/duckdb/execution/operator/persistent/csv_rejects_table.hpp\nnew file mode 100644\nindex 000000000000..10f57b11875b\n--- /dev/null\n+++ b/src/include/duckdb/execution/operator/persistent/csv_rejects_table.hpp\n@@ -0,0 +1,36 @@\n+#pragma once\n+\n+#include \"duckdb.hpp\"\n+#ifndef DUCKDB_AMALGAMATION\n+#include \"duckdb/storage/object_cache.hpp\"\n+#endif\n+\n+namespace duckdb {\n+\n+struct ReadCSVData;\n+\n+class CSVRejectsTable : public ObjectCacheEntry {\n+public:\n+\tCSVRejectsTable(string name) : name(name), count(0) {\n+\t}\n+\t~CSVRejectsTable() override = default;\n+\tmutex write_lock;\n+\tstring name;\n+\tidx_t count;\n+\n+\tstatic shared_ptr<CSVRejectsTable> GetOrCreate(ClientContext &context, const string &name);\n+\n+\tvoid InitializeTable(ClientContext &context, const ReadCSVData &options);\n+\tTableCatalogEntry &GetTable(ClientContext &context);\n+\n+public:\n+\tstatic string ObjectType() {\n+\t\treturn \"csv_rejects_table_cache\";\n+\t}\n+\n+\tstring GetObjectType() override {\n+\t\treturn ObjectType();\n+\t}\n+};\n+\n+} // namespace duckdb\ndiff --git a/src/include/duckdb/execution/operator/persistent/parallel_csv_reader.hpp b/src/include/duckdb/execution/operator/persistent/parallel_csv_reader.hpp\nindex e156e23810af..bdcdb8fbee61 100644\n--- a/src/include/duckdb/execution/operator/persistent/parallel_csv_reader.hpp\n+++ b/src/include/duckdb/execution/operator/persistent/parallel_csv_reader.hpp\n@@ -137,7 +137,7 @@ class ParallelCSVReader : public BaseCSVReader {\n \t//! Extract a single DataChunk from the CSV file and stores it in insert_chunk\n \tvoid ParseCSV(DataChunk &insert_chunk);\n \n-\tidx_t GetLineError(idx_t line_error, idx_t buffer_idx) override;\n+\tidx_t GetLineError(idx_t line_error, idx_t buffer_idx, bool stop_at_first = true) override;\n \n private:\n \t//! Initialize Parser\ndiff --git a/src/include/duckdb/execution/operator/scan/physical_column_data_scan.hpp b/src/include/duckdb/execution/operator/scan/physical_column_data_scan.hpp\nindex 4ce3c7d9fd52..17dc8edb4627 100644\n--- a/src/include/duckdb/execution/operator/scan/physical_column_data_scan.hpp\n+++ b/src/include/duckdb/execution/operator/scan/physical_column_data_scan.hpp\n@@ -22,11 +22,19 @@ class PhysicalColumnDataScan : public PhysicalOperator {\n \tPhysicalColumnDataScan(vector<LogicalType> types, PhysicalOperatorType op_type, idx_t estimated_cardinality,\n \t                       unique_ptr<ColumnDataCollection> owned_collection = nullptr);\n \n+\tPhysicalColumnDataScan(vector<LogicalType> types, PhysicalOperatorType op_type, idx_t estimated_cardinality,\n+\t                       idx_t cte_index)\n+\t    : PhysicalOperator(op_type, std::move(types), estimated_cardinality), collection(nullptr),\n+\t      cte_index(cte_index) {\n+\t}\n+\n \t// the column data collection to scan\n \toptional_ptr<ColumnDataCollection> collection;\n \t//! Owned column data collection, if any\n \tunique_ptr<ColumnDataCollection> owned_collection;\n \n+\tidx_t cte_index;\n+\n public:\n \tunique_ptr<GlobalSourceState> GetGlobalSourceState(ClientContext &context) const override;\n \tSourceResultType GetData(ExecutionContext &context, DataChunk &chunk, OperatorSourceInput &input) const override;\n@@ -35,6 +43,8 @@ class PhysicalColumnDataScan : public PhysicalOperator {\n \t\treturn true;\n \t}\n \n+\tstring ParamsToString() const override;\n+\n public:\n \tvoid BuildPipelines(Pipeline &current, MetaPipeline &meta_pipeline) override;\n };\ndiff --git a/src/include/duckdb/execution/operator/set/physical_cte.hpp b/src/include/duckdb/execution/operator/set/physical_cte.hpp\nnew file mode 100644\nindex 000000000000..6babb8dd805b\n--- /dev/null\n+++ b/src/include/duckdb/execution/operator/set/physical_cte.hpp\n@@ -0,0 +1,62 @@\n+//===----------------------------------------------------------------------===//\n+//                         DuckDB\n+//\n+// duckdb/execution/operator/set/physical_cte.hpp\n+//\n+//\n+//===----------------------------------------------------------------------===//\n+\n+#pragma once\n+\n+#include \"duckdb/common/types/column/column_data_collection.hpp\"\n+#include \"duckdb/execution/physical_operator.hpp\"\n+\n+namespace duckdb {\n+\n+class RecursiveCTEState;\n+\n+class PhysicalCTE : public PhysicalOperator {\n+public:\n+\tstatic constexpr const PhysicalOperatorType TYPE = PhysicalOperatorType::CTE;\n+\n+public:\n+\tPhysicalCTE(string ctename, idx_t table_index, vector<LogicalType> types, unique_ptr<PhysicalOperator> top,\n+\t            unique_ptr<PhysicalOperator> bottom, idx_t estimated_cardinality);\n+\t~PhysicalCTE() override;\n+\n+\tstd::shared_ptr<ColumnDataCollection> working_table;\n+\tshared_ptr<MetaPipeline> recursive_meta_pipeline;\n+\n+\tidx_t table_index;\n+\tstring ctename;\n+\n+public:\n+\t// Source interface\n+\tSourceResultType GetData(ExecutionContext &context, DataChunk &chunk, OperatorSourceInput &input) const override;\n+\n+\tbool IsSource() const override {\n+\t\treturn true;\n+\t}\n+\n+public:\n+\t// Sink interface\n+\tSinkResultType Sink(ExecutionContext &context, DataChunk &chunk, OperatorSinkInput &input) const override;\n+\n+\tunique_ptr<GlobalSinkState> GetGlobalSinkState(ClientContext &context) const override;\n+\n+\tbool IsSink() const override {\n+\t\treturn true;\n+\t}\n+\n+\tstring ParamsToString() const override;\n+\n+public:\n+\tvoid BuildPipelines(Pipeline &current, MetaPipeline &meta_pipeline) override;\n+\n+\tvector<const_reference<PhysicalOperator>> GetSources() const override;\n+\n+private:\n+\tvoid ExecuteRecursivePipelines(ExecutionContext &context) const;\n+};\n+\n+} // namespace duckdb\ndiff --git a/src/include/duckdb/execution/operator/set/physical_recursive_cte.hpp b/src/include/duckdb/execution/operator/set/physical_recursive_cte.hpp\nindex bb6f595e2533..b40e201945db 100644\n--- a/src/include/duckdb/execution/operator/set/physical_recursive_cte.hpp\n+++ b/src/include/duckdb/execution/operator/set/physical_recursive_cte.hpp\n@@ -20,10 +20,14 @@ class PhysicalRecursiveCTE : public PhysicalOperator {\n \tstatic constexpr const PhysicalOperatorType TYPE = PhysicalOperatorType::RECURSIVE_CTE;\n \n public:\n-\tPhysicalRecursiveCTE(vector<LogicalType> types, bool union_all, unique_ptr<PhysicalOperator> top,\n-\t                     unique_ptr<PhysicalOperator> bottom, idx_t estimated_cardinality);\n+\tPhysicalRecursiveCTE(string ctename, idx_t table_index, vector<LogicalType> types, bool union_all,\n+\t                     unique_ptr<PhysicalOperator> top, unique_ptr<PhysicalOperator> bottom,\n+\t                     idx_t estimated_cardinality);\n \t~PhysicalRecursiveCTE() override;\n \n+\tstring ctename;\n+\tidx_t table_index;\n+\n \tbool union_all;\n \tstd::shared_ptr<ColumnDataCollection> working_table;\n \tshared_ptr<MetaPipeline> recursive_meta_pipeline;\n@@ -46,6 +50,8 @@ class PhysicalRecursiveCTE : public PhysicalOperator {\n \t\treturn true;\n \t}\n \n+\tstring ParamsToString() const override;\n+\n public:\n \tvoid BuildPipelines(Pipeline &current, MetaPipeline &meta_pipeline) override;\n \ndiff --git a/src/include/duckdb/execution/physical_plan_generator.hpp b/src/include/duckdb/execution/physical_plan_generator.hpp\nindex 3eef55f1a14d..a795014c92f4 100644\n--- a/src/include/duckdb/execution/physical_plan_generator.hpp\n+++ b/src/include/duckdb/execution/physical_plan_generator.hpp\n@@ -32,6 +32,8 @@ class PhysicalPlanGenerator {\n \t//! Recursive CTEs require at least one ChunkScan, referencing the working_table.\n \t//! This data structure is used to establish it.\n \tunordered_map<idx_t, std::shared_ptr<ColumnDataCollection>> recursive_cte_tables;\n+\t//! Materialized CTE ids must be collected.\n+\tunordered_set<idx_t> materialized_ctes;\n \n public:\n \t//! Creates a plan from the logical operator. This involves resolving column bindings and generating physical\n@@ -87,6 +89,7 @@ class PhysicalPlanGenerator {\n \tunique_ptr<PhysicalOperator> CreatePlan(LogicalSimple &op);\n \tunique_ptr<PhysicalOperator> CreatePlan(LogicalUnnest &op);\n \tunique_ptr<PhysicalOperator> CreatePlan(LogicalRecursiveCTE &op);\n+\tunique_ptr<PhysicalOperator> CreatePlan(LogicalMaterializedCTE &op);\n \tunique_ptr<PhysicalOperator> CreatePlan(LogicalCTERef &op);\n \tunique_ptr<PhysicalOperator> CreatePlan(LogicalPivot &op);\n \ndiff --git a/src/include/duckdb/execution/window_segment_tree.hpp b/src/include/duckdb/execution/window_segment_tree.hpp\nindex 9f13b969258d..239522f1b8ad 100644\n--- a/src/include/duckdb/execution/window_segment_tree.hpp\n+++ b/src/include/duckdb/execution/window_segment_tree.hpp\n@@ -18,12 +18,13 @@ namespace duckdb {\n \n class WindowAggregateState {\n public:\n-\tWindowAggregateState(AggregateObject aggr, const LogicalType &result_type_p);\n+\tWindowAggregateState(AggregateObject aggr, const LogicalType &result_type_p, idx_t partition_count);\n \tvirtual ~WindowAggregateState();\n \n \tvirtual void Sink(DataChunk &payload_chunk, SelectionVector *filter_sel, idx_t filtered);\n \tvirtual void Finalize();\n \tvirtual void Compute(Vector &result, idx_t rid, idx_t start, idx_t end);\n+\tvirtual void Evaluate(const idx_t *begins, const idx_t *ends, Vector &result, idx_t count);\n \n protected:\n \tvoid AggregateInit();\n@@ -33,20 +34,24 @@ class WindowAggregateState {\n \t//! The result type of the window function\n \tLogicalType result_type;\n \n+\t//! The cardinality of the partition\n+\tconst idx_t partition_count;\n+\t//! The size of a single aggregate state\n+\tconst idx_t state_size;\n \t//! Data pointer that contains a single state, used for intermediate window segment aggregation\n \tvector<data_t> state;\n \t//! Reused result state container for the window functions\n-\tVector statev;\n-\t//! A vector of pointers to \"state\", used for intermediate window segment aggregation\n-\tVector statep;\n-\t//! Input data chunk, used for intermediate window segment aggregation\n+\tVector statef;\n+\t//! Partition data chunk\n \tDataChunk inputs;\n+\t//! The filtered rows in inputs.\n+\tvector<validity_t> filter_bits;\n+\tValidityMask filter_mask;\n+\tidx_t filter_pos;\n };\n \n class WindowConstantAggregate : public WindowAggregateState {\n public:\n-\tstatic bool IsConstantAggregate(const BoundWindowExpression &wexpr);\n-\n \tWindowConstantAggregate(AggregateObject aggr, const LogicalType &result_type_p, const ValidityMask &partition_mask,\n \t                        const idx_t count);\n \t~WindowConstantAggregate() override {\n@@ -54,7 +59,7 @@ class WindowConstantAggregate : public WindowAggregateState {\n \n \tvoid Sink(DataChunk &payload_chunk, SelectionVector *filter_sel, idx_t filtered) override;\n \tvoid Finalize() override;\n-\tvoid Compute(Vector &result, idx_t rid, idx_t start, idx_t end) override;\n+\tvoid Evaluate(const idx_t *begins, const idx_t *ends, Vector &result, idx_t count) override;\n \n private:\n \t//! Partition starts\n@@ -65,52 +70,57 @@ class WindowConstantAggregate : public WindowAggregateState {\n \tidx_t partition;\n \t//! The current input row being built/read\n \tidx_t row;\n+\t//! A vector of pointers to \"state\", used for intermediate window segment aggregation\n+\tVector statep;\n+\t//! Shared SV for evaluation\n+\tSelectionVector matches;\n+};\n+\n+class WindowCustomAggregate : public WindowAggregateState {\n+public:\n+\tWindowCustomAggregate(AggregateObject aggr, const LogicalType &result_type_p, idx_t partition_count);\n+\t~WindowCustomAggregate() override;\n+\n+\tvoid Compute(Vector &result, idx_t rid, idx_t start, idx_t end) override;\n+\n+private:\n+\t//! The frame boundaries, used for the window functions\n+\tFrameBounds frame;\n };\n \n-class WindowSegmentTree {\n+class WindowSegmentTree : public WindowAggregateState {\n public:\n \tusing FrameBounds = std::pair<idx_t, idx_t>;\n \n-\tWindowSegmentTree(AggregateObject aggr, const LogicalType &result_type, DataChunk *input,\n-\t                  const ValidityMask &filter_mask, WindowAggregationMode mode);\n-\t~WindowSegmentTree();\n+\tWindowSegmentTree(AggregateObject aggr, const LogicalType &result_type, idx_t count, WindowAggregationMode mode_p);\n+\t~WindowSegmentTree() override;\n \n-\t//! First row contains the result.\n-\tvoid Compute(Vector &result, idx_t rid, idx_t start, idx_t end);\n+\tvoid Finalize() override;\n+\tvoid Evaluate(const idx_t *begins, const idx_t *ends, Vector &result, idx_t count) override;\n \n private:\n \tvoid ConstructTree();\n-\tvoid ExtractFrame(idx_t begin, idx_t end);\n-\tvoid WindowSegmentValue(idx_t l_idx, idx_t begin, idx_t end);\n-\tvoid AggregateInit();\n-\tvoid AggegateFinal(Vector &result, idx_t rid);\n+\tvoid ExtractFrame(idx_t begin, idx_t end, data_ptr_t current_state);\n+\tvoid FlushStates(bool combining);\n+\tvoid WindowSegmentValue(idx_t l_idx, idx_t begin, idx_t end, data_ptr_t current_state);\n \n-\t//! Use the window API, if available\n-\tinline bool UseWindowAPI() const {\n-\t\treturn mode < WindowAggregationMode::COMBINE;\n-\t}\n \t//! Use the combine API, if available\n \tinline bool UseCombineAPI() const {\n \t\treturn mode < WindowAggregationMode::SEPARATE;\n \t}\n \n-\t//! The aggregate that the window function is computed over\n-\tAggregateObject aggr;\n-\t//! The result type of the window function\n-\tLogicalType result_type;\n-\n-\t//! Data pointer that contains a single state, used for intermediate window segment aggregation\n-\tvector<data_t> state;\n-\t//! Input data chunk, used for intermediate window segment aggregation\n-\tDataChunk inputs;\n+\t//! Input data chunk, used for leaf segment aggregation\n+\tDataChunk leaves;\n \t//! The filtered rows in inputs.\n \tSelectionVector filter_sel;\n \t//! A vector of pointers to \"state\", used for intermediate window segment aggregation\n \tVector statep;\n \t//! The frame boundaries, used for the window functions\n \tFrameBounds frame;\n-\t//! Reused result state container for the window functions\n-\tVector statev;\n+\t//! Reused state pointers for combining segment tree levels\n+\tVector statel;\n+\t//! Count of buffered values\n+\tidx_t flush_count;\n \n \t//! The actual window segment tree: an array of aggregate states that represent all the intermediate nodes\n \tunsafe_unique_array<data_t> levels_flat_native;\n@@ -120,17 +130,11 @@ class WindowSegmentTree {\n \t//! The total number of internal nodes of the tree, stored in levels_flat_native\n \tidx_t internal_nodes;\n \n-\t//! The (sorted) input chunk collection on which the tree is built\n-\tDataChunk *input_ref;\n-\n-\t//! The filtered rows in input_ref.\n-\tconst ValidityMask &filter_mask;\n-\n \t//! Use the window API, if available\n \tWindowAggregationMode mode;\n \n \t// TREE_FANOUT needs to cleanly divide STANDARD_VECTOR_SIZE\n-\tstatic constexpr idx_t TREE_FANOUT = 64;\n+\tstatic constexpr idx_t TREE_FANOUT = 16;\n };\n \n } // namespace duckdb\ndiff --git a/src/include/duckdb/function/built_in_functions.hpp b/src/include/duckdb/function/built_in_functions.hpp\nindex 22bebd5e25e4..2e57f3176e17 100644\n--- a/src/include/duckdb/function/built_in_functions.hpp\n+++ b/src/include/duckdb/function/built_in_functions.hpp\n@@ -57,6 +57,7 @@ class BuiltinFunctions {\n \tvoid RegisterDistributiveAggregates();\n \n \t// scalar functions\n+\tvoid RegisterCompressedMaterializationFunctions();\n \tvoid RegisterGenericFunctions();\n \tvoid RegisterOperators();\n \tvoid RegisterStringFunctions();\ndiff --git a/src/include/duckdb/function/scalar/compressed_materialization_functions.hpp b/src/include/duckdb/function/scalar/compressed_materialization_functions.hpp\nnew file mode 100644\nindex 000000000000..aab5dede1b11\n--- /dev/null\n+++ b/src/include/duckdb/function/scalar/compressed_materialization_functions.hpp\n@@ -0,0 +1,49 @@\n+//===----------------------------------------------------------------------===//\n+//                         DuckDB\n+//\n+// duckdb/function/scalar/compressed_materialization_functions.hpp\n+//\n+//\n+//===----------------------------------------------------------------------===//\n+\n+#pragma once\n+\n+#include \"duckdb/function/built_in_functions.hpp\"\n+#include \"duckdb/function/function_set.hpp\"\n+\n+namespace duckdb {\n+\n+struct CompressedMaterializationFunctions {\n+\t//! The types we compress integral types to\n+\tstatic const vector<LogicalType> IntegralTypes();\n+\t//! The types we compress strings to\n+\tstatic const vector<LogicalType> StringTypes();\n+\n+\tstatic unique_ptr<FunctionData> Bind(ClientContext &context, ScalarFunction &bound_function,\n+\t                                     vector<unique_ptr<Expression>> &arguments);\n+};\n+\n+//! Needed for (de)serialization without binding\n+enum class CompressedMaterializationDirection : uint8_t { INVALID = 0, COMPRESS = 1, DECOMPRESS = 2 };\n+\n+struct CMIntegralCompressFun {\n+\tstatic ScalarFunction GetFunction(const LogicalType &input_type, const LogicalType &result_type);\n+\tstatic void RegisterFunction(BuiltinFunctions &set);\n+};\n+\n+struct CMIntegralDecompressFun {\n+\tstatic ScalarFunction GetFunction(const LogicalType &input_type, const LogicalType &result_type);\n+\tstatic void RegisterFunction(BuiltinFunctions &set);\n+};\n+\n+struct CMStringCompressFun {\n+\tstatic ScalarFunction GetFunction(const LogicalType &result_type);\n+\tstatic void RegisterFunction(BuiltinFunctions &set);\n+};\n+\n+struct CMStringDecompressFun {\n+\tstatic ScalarFunction GetFunction(const LogicalType &input_type);\n+\tstatic void RegisterFunction(BuiltinFunctions &set);\n+};\n+\n+} // namespace duckdb\ndiff --git a/src/include/duckdb/function/scalar/list/contains_or_position.hpp b/src/include/duckdb/function/scalar/list/contains_or_position.hpp\nindex 047108bf4ecc..0eceb782e96f 100644\n--- a/src/include/duckdb/function/scalar/list/contains_or_position.hpp\n+++ b/src/include/duckdb/function/scalar/list/contains_or_position.hpp\n@@ -130,7 +130,7 @@ void ListContainsOrPosition(DataChunk &args, Vector &result) {\n \t\tTemplatedContainsOrPosition<int8_t, T, OP, LIST_ACCESSOR>(args, result, true);\n \t\tbreak;\n \tdefault:\n-\t\tthrow NotImplementedException(\"This function has not been implemented for physical type %s\",\n+\t\tthrow NotImplementedException(\"This function has not been implemented for logical type %s\",\n \t\t                              TypeIdToString(physical_type));\n \t}\n }\ndiff --git a/src/include/duckdb/function/scalar/nested_functions.hpp b/src/include/duckdb/function/scalar/nested_functions.hpp\nindex 7178e4f1df98..8ee49a0911fe 100644\n--- a/src/include/duckdb/function/scalar/nested_functions.hpp\n+++ b/src/include/duckdb/function/scalar/nested_functions.hpp\n@@ -99,6 +99,11 @@ struct ListPositionFun {\n \tstatic void RegisterFunction(BuiltinFunctions &set);\n };\n \n+struct ListResizeFun {\n+\tstatic ScalarFunction GetFunction();\n+\tstatic void RegisterFunction(BuiltinFunctions &set);\n+};\n+\n struct StructExtractFun {\n \tstatic ScalarFunction GetFunction();\n \tstatic void RegisterFunction(BuiltinFunctions &set);\ndiff --git a/src/include/duckdb/function/scalar/string_functions.hpp b/src/include/duckdb/function/scalar/string_functions.hpp\nindex c3b52f0326a3..293dcec9c636 100644\n--- a/src/include/duckdb/function/scalar/string_functions.hpp\n+++ b/src/include/duckdb/function/scalar/string_functions.hpp\n@@ -83,12 +83,14 @@ struct LengthFun {\n };\n \n struct LikeFun {\n+\tstatic ScalarFunction GetLikeFunction();\n \tstatic void RegisterFunction(BuiltinFunctions &set);\n \tDUCKDB_API static bool Glob(const char *s, idx_t slen, const char *pattern, idx_t plen,\n \t                            bool allow_question_mark = true);\n };\n \n struct LikeEscapeFun {\n+\tstatic ScalarFunction GetLikeEscapeFun();\n \tstatic void RegisterFunction(BuiltinFunctions &set);\n };\n \ndiff --git a/src/include/duckdb/main/client_config.hpp b/src/include/duckdb/main/client_config.hpp\nindex 67f7c337a7e1..6d7eaecbf37b 100644\n--- a/src/include/duckdb/main/client_config.hpp\n+++ b/src/include/duckdb/main/client_config.hpp\n@@ -96,6 +96,9 @@ struct ClientConfig {\n \t//! The maximum amount of pivot columns\n \tidx_t pivot_limit = 100000;\n \n+\t//! The threshold at which we switch from using filtered aggregates to LIST with a dedicated pivot operator\n+\tidx_t pivot_filter_threshold = 10;\n+\n \t//! Whether or not the \"/\" division operator defaults to integer division or floating point division\n \tbool integer_division = false;\n \ndiff --git a/src/include/duckdb/main/config.hpp b/src/include/duckdb/main/config.hpp\nindex 88b296398ebc..ee4e959913f1 100644\n--- a/src/include/duckdb/main/config.hpp\n+++ b/src/include/duckdb/main/config.hpp\n@@ -158,6 +158,8 @@ struct DBConfigOptions {\n \tbool lock_configuration = false;\n \t//! Whether to print bindings when printing the plan (debug mode only)\n \tstatic bool debug_print_bindings;\n+\t//! The peak allocation threshold at which to flush the allocator after completing a task (1 << 27, ~128MB)\n+\tidx_t allocator_flush_threshold = 134217728;\n \n \tbool operator==(const DBConfigOptions &other) const;\n };\ndiff --git a/src/include/duckdb/main/settings.hpp b/src/include/duckdb/main/settings.hpp\nindex 4b1ec6357d39..3366f169b32e 100644\n--- a/src/include/duckdb/main/settings.hpp\n+++ b/src/include/duckdb/main/settings.hpp\n@@ -366,10 +366,20 @@ struct PerfectHashThresholdSetting {\n \tstatic Value GetSetting(ClientContext &context);\n };\n \n+struct PivotFilterThreshold {\n+\tstatic constexpr const char *Name = \"pivot_filter_threshold\";\n+\tstatic constexpr const char *Description =\n+\t    \"The threshold to switch from using filtered aggregates to LIST with a dedicated pivot operator\";\n+\tstatic constexpr const LogicalTypeId InputType = LogicalTypeId::BIGINT;\n+\tstatic void SetLocal(ClientContext &context, const Value &parameter);\n+\tstatic void ResetLocal(ClientContext &context);\n+\tstatic Value GetSetting(ClientContext &context);\n+};\n+\n struct PivotLimitSetting {\n \tstatic constexpr const char *Name = \"pivot_limit\";\n \tstatic constexpr const char *Description =\n-\t    \"The maximum numer of pivot columns in a pivot statement (default: 100000)\";\n+\t    \"The maximum number of pivot columns in a pivot statement (default: 100000)\";\n \tstatic constexpr const LogicalTypeId InputType = LogicalTypeId::BIGINT;\n \tstatic void SetLocal(ClientContext &context, const Value &parameter);\n \tstatic void ResetLocal(ClientContext &context);\n@@ -492,4 +502,14 @@ struct UsernameSetting {\n \tstatic Value GetSetting(ClientContext &context);\n };\n \n+struct FlushAllocatorSetting {\n+\tstatic constexpr const char *Name = \"allocator_flush_threshold\";\n+\tstatic constexpr const char *Description =\n+\t    \"Peak allocation threshold at which to flush the allocator after completing a task.\";\n+\tstatic constexpr const LogicalTypeId InputType = LogicalTypeId::VARCHAR;\n+\tstatic void SetGlobal(DatabaseInstance *db, DBConfig &config, const Value &parameter);\n+\tstatic void ResetGlobal(DatabaseInstance *db, DBConfig &config);\n+\tstatic Value GetSetting(ClientContext &context);\n+};\n+\n } // namespace duckdb\ndiff --git a/src/include/duckdb/optimizer/column_binding_replacer.hpp b/src/include/duckdb/optimizer/column_binding_replacer.hpp\nnew file mode 100644\nindex 000000000000..63fb16e8375d\n--- /dev/null\n+++ b/src/include/duckdb/optimizer/column_binding_replacer.hpp\n@@ -0,0 +1,47 @@\n+//===----------------------------------------------------------------------===//\n+//                         DuckDB\n+//\n+// duckdb/optimizer/column_binding_replacer.hpp\n+//\n+//\n+//===----------------------------------------------------------------------===//\n+\n+#pragma once\n+\n+#include \"duckdb/planner/logical_operator.hpp\"\n+\n+namespace duckdb {\n+\n+struct ReplacementBinding {\n+public:\n+\tReplacementBinding(ColumnBinding old_binding, ColumnBinding new_binding);\n+\tReplacementBinding(ColumnBinding old_binding, ColumnBinding new_binding, LogicalType new_type);\n+\n+public:\n+\tColumnBinding old_binding;\n+\tColumnBinding new_binding;\n+\n+\tbool replace_type;\n+\tLogicalType new_type;\n+};\n+\n+//! The ColumnBindingReplacer updates column bindings (e.g., after changing the operator plan), utility for optimizers\n+class ColumnBindingReplacer : LogicalOperatorVisitor {\n+public:\n+\tColumnBindingReplacer();\n+\n+public:\n+\t//! Update each operator of the plan\n+\tvoid VisitOperator(LogicalOperator &op) override;\n+\t//! Visit an expression and update its column bindings\n+\tvoid VisitExpression(unique_ptr<Expression> *expression) override;\n+\n+public:\n+\t//! Contains all bindings that need to be updated\n+\tvector<ReplacementBinding> replacement_bindings;\n+\n+\t//! Do not recurse further than this operator (optional)\n+\toptional_ptr<LogicalOperator> stop_operator;\n+};\n+\n+} // namespace duckdb\ndiff --git a/src/include/duckdb/optimizer/compressed_materialization.hpp b/src/include/duckdb/optimizer/compressed_materialization.hpp\nnew file mode 100644\nindex 000000000000..688d8a9d9b7f\n--- /dev/null\n+++ b/src/include/duckdb/optimizer/compressed_materialization.hpp\n@@ -0,0 +1,132 @@\n+//===----------------------------------------------------------------------===//\n+//                         DuckDB\n+//\n+// duckdb/optimizer/compressed_materialization.hpp\n+//\n+//\n+//===----------------------------------------------------------------------===//\n+\n+#pragma once\n+\n+#include \"duckdb/common/unordered_set.hpp\"\n+#include \"duckdb/function/scalar/compressed_materialization_functions.hpp\"\n+#include \"duckdb/planner/column_binding_map.hpp\"\n+#include \"duckdb/storage/statistics/base_statistics.hpp\"\n+\n+namespace duckdb {\n+\n+class LogicalOperator;\n+struct JoinCondition;\n+\n+struct CMChildInfo {\n+public:\n+\tCMChildInfo(LogicalOperator &op, const column_binding_set_t &referenced_bindings);\n+\n+public:\n+\t//! Bindings and types before compressing\n+\tvector<ColumnBinding> bindings_before;\n+\tvector<LogicalType> &types;\n+\t//! Whether the input binding is eligible for compression\n+\tvector<bool> can_compress;\n+\n+\t//! Bindings after compressing (projection on top)\n+\tvector<ColumnBinding> bindings_after;\n+};\n+\n+struct CMBindingInfo {\n+public:\n+\texplicit CMBindingInfo(ColumnBinding binding, const LogicalType &type);\n+\n+public:\n+\tColumnBinding binding;\n+\n+\t//! Type before compressing\n+\tLogicalType type;\n+\tbool needs_decompression;\n+\tunique_ptr<BaseStatistics> stats;\n+};\n+\n+struct CompressedMaterializationInfo {\n+public:\n+\tCompressedMaterializationInfo(LogicalOperator &op, vector<idx_t> &&child_idxs,\n+\t                              const column_binding_set_t &referenced_bindings);\n+\n+public:\n+\t//! Mapping from incoming bindings to outgoing bindings\n+\tcolumn_binding_map_t<CMBindingInfo> binding_map;\n+\n+\t//! Operator child info\n+\tvector<idx_t> child_idxs;\n+\tvector<CMChildInfo> child_info;\n+};\n+\n+struct CompressExpression {\n+public:\n+\tCompressExpression(unique_ptr<Expression> expression, unique_ptr<BaseStatistics> stats);\n+\n+public:\n+\tunique_ptr<Expression> expression;\n+\tunique_ptr<BaseStatistics> stats;\n+};\n+\n+typedef column_binding_map_t<unique_ptr<BaseStatistics>> statistics_map_t;\n+\n+//! The CompressedMaterialization optimizer compressed columns using projections, based on available statistics,\n+//! but only if the data enters a materializing operator\n+class CompressedMaterialization {\n+public:\n+\texplicit CompressedMaterialization(ClientContext &context, Binder &binder, statistics_map_t &&statistics_map);\n+\n+\tvoid Compress(unique_ptr<LogicalOperator> &op);\n+\n+private:\n+\t//! Depth-first traversal of the plan\n+\tvoid CompressInternal(unique_ptr<LogicalOperator> &op);\n+\n+\t//! Compress materializing operators\n+\tvoid CompressAggregate(unique_ptr<LogicalOperator> &op);\n+\tvoid CompressDistinct(unique_ptr<LogicalOperator> &op);\n+\tvoid CompressOrder(unique_ptr<LogicalOperator> &op);\n+\n+\t//! Update statistics after compressing\n+\tvoid UpdateAggregateStats(unique_ptr<LogicalOperator> &op);\n+\tvoid UpdateOrderStats(unique_ptr<LogicalOperator> &op);\n+\n+\t//! Adds bindings referenced in expression to referenced_bindings\n+\tstatic void GetReferencedBindings(const Expression &expression, column_binding_set_t &referenced_bindings);\n+\t//! Updates CMBindingInfo in the binding_map in info\n+\tvoid UpdateBindingInfo(CompressedMaterializationInfo &info, const ColumnBinding &binding, bool needs_decompression);\n+\n+\t//! Create (de)compress projections around the operator\n+\tvoid CreateProjections(unique_ptr<LogicalOperator> &op, CompressedMaterializationInfo &info);\n+\tbool TryCompressChild(CompressedMaterializationInfo &info, const CMChildInfo &child_info,\n+\t                      vector<unique_ptr<CompressExpression>> &compress_expressions);\n+\tvoid CreateCompressProjection(unique_ptr<LogicalOperator> &child_op,\n+\t                              vector<unique_ptr<CompressExpression>> &&compress_exprs,\n+\t                              CompressedMaterializationInfo &info, CMChildInfo &child_info);\n+\tvoid CreateDecompressProjection(unique_ptr<LogicalOperator> &op, CompressedMaterializationInfo &info);\n+\n+\t//! Create expressions that apply a scalar compression function\n+\tunique_ptr<CompressExpression> GetCompressExpression(const ColumnBinding &binding, const LogicalType &type,\n+\t                                                     const bool &can_compress);\n+\tunique_ptr<CompressExpression> GetCompressExpression(unique_ptr<Expression> input, const BaseStatistics &stats);\n+\tunique_ptr<CompressExpression> GetIntegralCompress(unique_ptr<Expression> input, const BaseStatistics &stats);\n+\tunique_ptr<CompressExpression> GetStringCompress(unique_ptr<Expression> input, const BaseStatistics &stats);\n+\n+\t//! Create an expression that applies a scalar decompression function\n+\tunique_ptr<Expression> GetDecompressExpression(unique_ptr<Expression> input, const LogicalType &result_type,\n+\t                                               const BaseStatistics &stats);\n+\tunique_ptr<Expression> GetIntegralDecompress(unique_ptr<Expression> input, const LogicalType &result_type,\n+\t                                             const BaseStatistics &stats);\n+\tunique_ptr<Expression> GetStringDecompress(unique_ptr<Expression> input, const BaseStatistics &stats);\n+\n+private:\n+\tClientContext &context;\n+\tBinder &binder;\n+\tstatistics_map_t statistics_map;\n+\tunordered_set<idx_t> compression_table_indices;\n+\tunordered_set<idx_t> decompression_table_indices;\n+\toptional_ptr<LogicalOperator> root;\n+};\n+\n+} // namespace duckdb\ndiff --git a/src/include/duckdb/optimizer/deliminator.hpp b/src/include/duckdb/optimizer/deliminator.hpp\nindex 91d4debe42d9..0d110563b0a2 100644\n--- a/src/include/duckdb/optimizer/deliminator.hpp\n+++ b/src/include/duckdb/optimizer/deliminator.hpp\n@@ -8,36 +8,33 @@\n \n #pragma once\n \n-#include \"duckdb/parser/expression_map.hpp\"\n-#include \"duckdb/planner/column_binding_map.hpp\"\n-#include \"duckdb/planner/logical_operator.hpp\"\n-#include \"duckdb/planner/logical_operator_visitor.hpp\"\n+#include \"duckdb/optimizer/column_binding_replacer.hpp\"\n \n namespace duckdb {\n \n-class Optimizer;\n-class DeliminatorPlanUpdater;\n+struct DelimCandidate;\n \n //! The Deliminator optimizer traverses the logical operator tree and removes any redundant DelimGets/DelimJoins\n class Deliminator {\n public:\n-\texplicit Deliminator(ClientContext &context) : context(context) {\n+\tDeliminator() {\n \t}\n \t//! Perform DelimJoin elimination\n \tunique_ptr<LogicalOperator> Optimize(unique_ptr<LogicalOperator> op);\n \n private:\n-\t//! Find Joins with a DelimGet that can be removed\n-\tvoid FindCandidates(unique_ptr<LogicalOperator> *op_ptr, vector<unique_ptr<LogicalOperator> *> &candidates);\n-\t//! Try to remove a Join with a DelimGet, returns true if it was successful\n-\tbool RemoveCandidate(unique_ptr<LogicalOperator> *plan, unique_ptr<LogicalOperator> *candidate,\n-\t                     DeliminatorPlanUpdater &updater);\n-\t//! Try to remove an inequality Join with a DelimGet, returns true if it was successful\n-\tbool RemoveInequalityCandidate(unique_ptr<LogicalOperator> *plan, unique_ptr<LogicalOperator> *candidate,\n-\t                               DeliminatorPlanUpdater &updater);\n+\t//! Finds DelimJoins and their corresponding DelimGets\n+\tvoid FindCandidates(unique_ptr<LogicalOperator> &op, vector<DelimCandidate> &candidates);\n+\tvoid FindJoinWithDelimGet(unique_ptr<LogicalOperator> &op, DelimCandidate &candidate);\n+\t//! Remove joins with a DelimGet\n+\tbool RemoveJoinWithDelimGet(LogicalDelimJoin &delim_join, const idx_t delim_get_count,\n+\t                            unique_ptr<LogicalOperator> &join, bool &all_equality_conditions);\n+\tbool RemoveInequalityJoinWithDelimGet(LogicalDelimJoin &delim_join, const idx_t delim_get_count,\n+\t                                      unique_ptr<LogicalOperator> &join,\n+\t                                      const vector<ReplacementBinding> &replacement_bindings);\n \n private:\n-\tClientContext &context;\n+\toptional_ptr<LogicalOperator> root;\n };\n \n } // namespace duckdb\ndiff --git a/src/include/duckdb/optimizer/filter_pushdown.hpp b/src/include/duckdb/optimizer/filter_pushdown.hpp\nindex fa6edcf2487e..52b384d09ae5 100644\n--- a/src/include/duckdb/optimizer/filter_pushdown.hpp\n+++ b/src/include/duckdb/optimizer/filter_pushdown.hpp\n@@ -19,8 +19,11 @@ class Optimizer;\n class FilterPushdown {\n public:\n \texplicit FilterPushdown(Optimizer &optimizer);\n+\n \t//! Perform filter pushdown\n \tunique_ptr<LogicalOperator> Rewrite(unique_ptr<LogicalOperator> op);\n+\t//! Return a reference to the client context (from the optimizer)\n+\tClientContext &GetContext();\n \n \tstruct Filter {\n \t\tunordered_set<idx_t> bindings;\ndiff --git a/src/include/duckdb/optimizer/join_order/estimated_properties.hpp b/src/include/duckdb/optimizer/join_order/estimated_properties.hpp\nindex c1725cb99e7b..7404d6cea7a7 100644\n--- a/src/include/duckdb/optimizer/join_order/estimated_properties.hpp\n+++ b/src/include/duckdb/optimizer/join_order/estimated_properties.hpp\n@@ -27,7 +27,10 @@ class EstimatedProperties {\n \tT GetCardinality() const {\n \t\tthrow NotImplementedException(\"Unsupported type for GetCardinality\");\n \t}\n-\tdouble GetCost() const;\n+\ttemplate <class T>\n+\tT GetCost() const {\n+\t\tthrow NotImplementedException(\"Unsupported type for GetCost\");\n+\t}\n \tvoid SetCost(double new_cost);\n \tvoid SetCardinality(double cardinality);\n \n@@ -45,4 +48,10 @@ double EstimatedProperties::GetCardinality() const;\n template <>\n idx_t EstimatedProperties::GetCardinality() const;\n \n+template <>\n+double EstimatedProperties::GetCost() const;\n+\n+template <>\n+idx_t EstimatedProperties::GetCost() const;\n+\n } // namespace duckdb\ndiff --git a/src/include/duckdb/optimizer/join_order/join_order_optimizer.hpp b/src/include/duckdb/optimizer/join_order/join_order_optimizer.hpp\nindex 1bb826778c0e..63822907930f 100644\n--- a/src/include/duckdb/optimizer/join_order/join_order_optimizer.hpp\n+++ b/src/include/duckdb/optimizer/join_order/join_order_optimizer.hpp\n@@ -90,7 +90,7 @@ class JoinOrderOptimizer {\n \t//! cancelling the dynamic programming step.\n \tbool TryEmitPair(JoinRelationSet &left, JoinRelationSet &right, const vector<reference<NeighborInfo>> &info);\n \n-\tbool EnumerateCmpRecursive(JoinRelationSet &left, JoinRelationSet &right, unordered_set<idx_t> exclusion_set);\n+\tbool EnumerateCmpRecursive(JoinRelationSet &left, JoinRelationSet &right, unordered_set<idx_t> &exclusion_set);\n \t//! Emit a relation set node\n \tbool EmitCSG(JoinRelationSet &node);\n \t//! Enumerate the possible connected subgraphs that can be joined together in the join graph\ndiff --git a/src/include/duckdb/optimizer/join_order/join_relation.hpp b/src/include/duckdb/optimizer/join_order/join_relation.hpp\nindex 5e4986fff08e..f3818ec276d4 100644\n--- a/src/include/duckdb/optimizer/join_order/join_relation.hpp\n+++ b/src/include/duckdb/optimizer/join_order/join_relation.hpp\n@@ -53,7 +53,7 @@ class JoinRelationSetManager {\n \t//! Create or get a JoinRelationSet from a single node with the given index\n \tJoinRelationSet &GetJoinRelation(idx_t index);\n \t//! Create or get a JoinRelationSet from a set of relation bindings\n-\tJoinRelationSet &GetJoinRelation(unordered_set<idx_t> &bindings);\n+\tJoinRelationSet &GetJoinRelation(const unordered_set<idx_t> &bindings);\n \t//! Create or get a JoinRelationSet from a (sorted, duplicate-free!) list of relations\n \tJoinRelationSet &GetJoinRelation(unsafe_unique_array<idx_t> relations, idx_t count);\n \t//! Union two sets of relations together and create a new relation set\ndiff --git a/src/include/duckdb/optimizer/join_order/query_graph.hpp b/src/include/duckdb/optimizer/join_order/query_graph.hpp\nindex 56df8ca193ac..a3f755c39ec5 100644\n--- a/src/include/duckdb/optimizer/join_order/query_graph.hpp\n+++ b/src/include/duckdb/optimizer/join_order/query_graph.hpp\n@@ -75,6 +75,9 @@ class QueryGraph {\n \t//! Get the QueryEdge of a specific node\n \tQueryEdge &GetQueryEdge(JoinRelationSet &left);\n \n+\tvoid EnumerateNeighborsDFS(JoinRelationSet &node, reference<QueryEdge> info, idx_t index,\n+\t                           const std::function<bool(NeighborInfo &)> &callback);\n+\n \tQueryEdge root;\n };\n \ndiff --git a/src/include/duckdb/optimizer/matcher/set_matcher.hpp b/src/include/duckdb/optimizer/matcher/set_matcher.hpp\nindex d6cfc59643d1..a709a1b5c3fa 100644\n--- a/src/include/duckdb/optimizer/matcher/set_matcher.hpp\n+++ b/src/include/duckdb/optimizer/matcher/set_matcher.hpp\n@@ -23,6 +23,8 @@ class SetMatcher {\n \t\tUNORDERED,\n \t\t//! Only some entries have to be matched, the order of the matches does not matter\n \t\tSOME,\n+\t\t//! Only some entries have to be matched. The order of the matches does matter.\n+\t\tSOME_ORDERED,\n \t\t//! Not initialized\n \t\tINVALID\n \t};\n@@ -79,6 +81,17 @@ class SetMatcher {\n \t\t\t\t}\n \t\t\t}\n \t\t\treturn true;\n+\t\t} else if (policy == Policy::SOME_ORDERED) {\n+\t\t\tif (entries.size() < matchers.size()) {\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t\t// now provided entries have to match in order\n+\t\t\tfor (idx_t i = 0; i < matchers.size(); i++) {\n+\t\t\t\tif (!matchers[i]->Match(entries[i], bindings)) {\n+\t\t\t\t\treturn false;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\treturn true;\n \t\t} else {\n \t\t\tif (policy == Policy::UNORDERED && matchers.size() != entries.size()) {\n \t\t\t\t// unordered policy, count does not match: no match\ndiff --git a/src/include/duckdb/optimizer/optimizer.hpp b/src/include/duckdb/optimizer/optimizer.hpp\nindex 96bde0ad7012..312fcc4908d2 100644\n--- a/src/include/duckdb/optimizer/optimizer.hpp\n+++ b/src/include/duckdb/optimizer/optimizer.hpp\n@@ -22,7 +22,10 @@ class Optimizer {\n public:\n \tOptimizer(Binder &binder, ClientContext &context);\n \n+\t//! Optimize a plan by running specialized optimizers\n \tunique_ptr<LogicalOperator> Optimize(unique_ptr<LogicalOperator> plan);\n+\t//! Return a reference to the client context of this optimizer\n+\tClientContext &GetContext();\n \n \tClientContext &context;\n \tBinder &binder;\ndiff --git a/src/include/duckdb/optimizer/remove_duplicate_groups.hpp b/src/include/duckdb/optimizer/remove_duplicate_groups.hpp\nnew file mode 100644\nindex 000000000000..2abf8bb3eb02\n--- /dev/null\n+++ b/src/include/duckdb/optimizer/remove_duplicate_groups.hpp\n@@ -0,0 +1,40 @@\n+//===----------------------------------------------------------------------===//\n+//                         DuckDB\n+//\n+// duckdb/optimizer/remove_duplicate_groups.hpp\n+//\n+//\n+//===----------------------------------------------------------------------===//\n+\n+#pragma once\n+\n+#include \"duckdb/planner/column_binding_map.hpp\"\n+#include \"duckdb/planner/logical_operator_visitor.hpp\"\n+\n+namespace duckdb {\n+\n+class BoundColumnRefExpression;\n+\n+//! The RemoveDuplicateGroups optimizer traverses the logical operator tree and removes any duplicate aggregate groups\n+//! Duplicate groups may be introduced when joins columns are removed, e.g., by Deliminator or RemoveUnusedColumns\n+class RemoveDuplicateGroups : public LogicalOperatorVisitor {\n+public:\n+\tRemoveDuplicateGroups() {\n+\t}\n+\n+\tvoid VisitOperator(LogicalOperator &op) override;\n+\n+private:\n+\tvoid VisitAggregate(LogicalAggregate &aggr);\n+\n+protected:\n+\tunique_ptr<Expression> VisitReplace(BoundColumnRefExpression &expr, unique_ptr<Expression> *expr_ptr) override;\n+\n+private:\n+\t//! The map of column references\n+\tcolumn_binding_map_t<vector<reference<BoundColumnRefExpression>>> column_references;\n+\t//! Stored expressions (kept around so we don't have dangling pointers)\n+\tvector<unique_ptr<Expression>> stored_expressions;\n+};\n+\n+} // namespace duckdb\ndiff --git a/src/include/duckdb/optimizer/statistics_propagator.hpp b/src/include/duckdb/optimizer/statistics_propagator.hpp\nindex 7ead13bc6a71..7569909982ab 100644\n--- a/src/include/duckdb/optimizer/statistics_propagator.hpp\n+++ b/src/include/duckdb/optimizer/statistics_propagator.hpp\n@@ -18,6 +18,8 @@\n #include \"duckdb/storage/statistics/node_statistics.hpp\"\n \n namespace duckdb {\n+\n+class Optimizer;\n class ClientContext;\n class LogicalOperator;\n class TableFilter;\n@@ -25,10 +27,14 @@ struct BoundOrderByNode;\n \n class StatisticsPropagator {\n public:\n-\texplicit StatisticsPropagator(ClientContext &context);\n+\texplicit StatisticsPropagator(Optimizer &optimizer);\n \n \tunique_ptr<NodeStatistics> PropagateStatistics(unique_ptr<LogicalOperator> &node_ptr);\n \n+\tcolumn_binding_map_t<unique_ptr<BaseStatistics>> GetStatisticsMap() {\n+\t\treturn std::move(statistics_map);\n+\t}\n+\n private:\n \t//! Propagate statistics through an operator\n \tunique_ptr<NodeStatistics> PropagateStatistics(LogicalOperator &node, unique_ptr<LogicalOperator> *node_ptr);\n@@ -75,6 +81,9 @@ class StatisticsPropagator {\n \t//! Multiply the cardinalities together (i.e. new max cardinality is stats.max * new_stats.max): used for\n \t//! joins/cross products\n \tvoid MultiplyCardinalities(unique_ptr<NodeStatistics> &stats, NodeStatistics &new_stats);\n+\t//! Creates and pushes down a filter based on join statistics\n+\tvoid CreateFilterFromJoinStats(unique_ptr<LogicalOperator> &child, unique_ptr<Expression> &expr,\n+\t                               const BaseStatistics &stats_before, const BaseStatistics &stats_after);\n \n \tunique_ptr<BaseStatistics> PropagateExpression(unique_ptr<Expression> &expr);\n \tunique_ptr<BaseStatistics> PropagateExpression(Expression &expr, unique_ptr<Expression> *expr_ptr);\n@@ -90,14 +99,13 @@ class StatisticsPropagator {\n \tunique_ptr<BaseStatistics> PropagateExpression(BoundColumnRefExpression &expr, unique_ptr<Expression> *expr_ptr);\n \tunique_ptr<BaseStatistics> PropagateExpression(BoundOperatorExpression &expr, unique_ptr<Expression> *expr_ptr);\n \n-\tvoid PropagateAndCompress(unique_ptr<Expression> &expr, unique_ptr<BaseStatistics> &stats);\n-\n \tvoid ReplaceWithEmptyResult(unique_ptr<LogicalOperator> &node);\n \n \tbool ExpressionIsConstant(Expression &expr, const Value &val);\n \tbool ExpressionIsConstantOrNull(Expression &expr, const Value &val);\n \n private:\n+\tOptimizer &optimizer;\n \tClientContext &context;\n \t//! The map of ColumnBinding -> statistics for the various nodes\n \tcolumn_binding_map_t<unique_ptr<BaseStatistics>> statistics_map;\ndiff --git a/src/include/duckdb/optimizer/topn_optimizer.hpp b/src/include/duckdb/optimizer/topn_optimizer.hpp\nindex 71790047f228..94ebaed255df 100644\n--- a/src/include/duckdb/optimizer/topn_optimizer.hpp\n+++ b/src/include/duckdb/optimizer/topn_optimizer.hpp\n@@ -18,6 +18,8 @@ class TopN {\n public:\n \t//! Optimize ORDER BY + LIMIT to TopN\n \tunique_ptr<LogicalOperator> Optimize(unique_ptr<LogicalOperator> op);\n+\t//! Whether we can perform the optimization on this operator\n+\tstatic bool CanOptimize(LogicalOperator &op);\n };\n \n } // namespace duckdb\ndiff --git a/src/include/duckdb/parallel/pipeline.hpp b/src/include/duckdb/parallel/pipeline.hpp\nindex d3b0396ac1bb..3dcf2b66ec46 100644\n--- a/src/include/duckdb/parallel/pipeline.hpp\n+++ b/src/include/duckdb/parallel/pipeline.hpp\n@@ -30,6 +30,8 @@ class PipelineBuildState {\n public:\n \t//! Duplicate eliminated join scan dependencies\n \treference_map_t<const PhysicalOperator, reference<Pipeline>> delim_join_dependencies;\n+\t//! Materialized CTE scan dependencies\n+\treference_map_t<const PhysicalOperator, reference<Pipeline>> cte_dependencies;\n \n public:\n \tvoid SetPipelineSource(Pipeline &pipeline, PhysicalOperator &op);\ndiff --git a/src/include/duckdb/parallel/task_scheduler.hpp b/src/include/duckdb/parallel/task_scheduler.hpp\nindex 8f2de581bc06..a2e59fcefa91 100644\n--- a/src/include/duckdb/parallel/task_scheduler.hpp\n+++ b/src/include/duckdb/parallel/task_scheduler.hpp\n@@ -67,6 +67,9 @@ class TaskScheduler {\n \t//! Send signals to n threads, signalling for them to wake up and attempt to execute a task\n \tvoid Signal(idx_t n);\n \n+\t//! Set the allocator flush threshold\n+\tvoid SetAllocatorFlushTreshold(idx_t threshold);\n+\n private:\n \tvoid SetThreadsInternal(int32_t n);\n \n@@ -80,6 +83,8 @@ class TaskScheduler {\n \tvector<unique_ptr<SchedulerThread>> threads;\n \t//! Markers used by the various threads, if the markers are set to \"false\" the thread execution is stopped\n \tvector<unique_ptr<atomic<bool>>> markers;\n+\t//! The threshold after which to flush the allocator after completing a task\n+\tatomic<idx_t> allocator_flush_threshold;\n };\n \n } // namespace duckdb\ndiff --git a/src/include/duckdb/parser/common_table_expression_info.hpp b/src/include/duckdb/parser/common_table_expression_info.hpp\nindex 053625403440..0656329466a5 100644\n--- a/src/include/duckdb/parser/common_table_expression_info.hpp\n+++ b/src/include/duckdb/parser/common_table_expression_info.hpp\n@@ -9,6 +9,7 @@\n #pragma once\n \n #include \"duckdb/parser/statement/select_statement.hpp\"\n+#include \"duckdb/common/enums/cte_materialize.hpp\"\n \n namespace duckdb {\n \n@@ -17,6 +18,7 @@ class SelectStatement;\n struct CommonTableExpressionInfo {\n \tvector<string> aliases;\n \tunique_ptr<SelectStatement> query;\n+\tCTEMaterialize materialized = CTEMaterialize::CTE_MATERIALIZE_DEFAULT;\n \n \tvoid FormatSerialize(FormatSerializer &serializer) const;\n \tstatic unique_ptr<CommonTableExpressionInfo> FormatDeserialize(FormatDeserializer &deserializer);\ndiff --git a/src/include/duckdb/parser/query_node.hpp b/src/include/duckdb/parser/query_node.hpp\nindex 2c5d42eaa49a..3a215250730b 100644\n--- a/src/include/duckdb/parser/query_node.hpp\n+++ b/src/include/duckdb/parser/query_node.hpp\n@@ -25,7 +25,8 @@ enum class QueryNodeType : uint8_t {\n \tSELECT_NODE = 1,\n \tSET_OPERATION_NODE = 2,\n \tBOUND_SUBQUERY_NODE = 3,\n-\tRECURSIVE_CTE_NODE = 4\n+\tRECURSIVE_CTE_NODE = 4,\n+\tCTE_NODE = 5\n };\n \n struct CommonTableExpressionInfo;\ndiff --git a/src/include/duckdb/parser/query_node/cte_node.hpp b/src/include/duckdb/parser/query_node/cte_node.hpp\nnew file mode 100644\nindex 000000000000..09ddb154274b\n--- /dev/null\n+++ b/src/include/duckdb/parser/query_node/cte_node.hpp\n@@ -0,0 +1,54 @@\n+//===----------------------------------------------------------------------===//\n+//                         DuckDB\n+//\n+// duckdb/parser/query_node/cte_node.hpp\n+//\n+//\n+//===----------------------------------------------------------------------===//\n+\n+#pragma once\n+\n+#include \"duckdb/parser/parsed_expression.hpp\"\n+#include \"duckdb/parser/query_node.hpp\"\n+#include \"duckdb/parser/sql_statement.hpp\"\n+\n+namespace duckdb {\n+\n+class CTENode : public QueryNode {\n+public:\n+\tstatic constexpr const QueryNodeType TYPE = QueryNodeType::CTE_NODE;\n+\n+public:\n+\tCTENode() : QueryNode(QueryNodeType::CTE_NODE) {\n+\t}\n+\n+\tstring ctename;\n+\t//! The query of the CTE\n+\tunique_ptr<QueryNode> query;\n+\t//! Child\n+\tunique_ptr<QueryNode> child;\n+\t//! Aliases of the CTE node\n+\tvector<string> aliases;\n+\n+\tconst vector<unique_ptr<ParsedExpression>> &GetSelectList() const override {\n+\t\treturn query->GetSelectList();\n+\t}\n+\n+public:\n+\t//! Convert the query node to a string\n+\tstring ToString() const override;\n+\n+\tbool Equals(const QueryNode *other) const override;\n+\t//! Create a copy of this SelectNode\n+\tunique_ptr<QueryNode> Copy() const override;\n+\n+\t//! Serializes a QueryNode to a stand-alone binary blob\n+\tvoid Serialize(FieldWriter &writer) const override;\n+\t//! Deserializes a blob back into a QueryNode\n+\tstatic unique_ptr<QueryNode> Deserialize(FieldReader &reader);\n+\n+\tvoid FormatSerialize(FormatSerializer &serializer) const override;\n+\tstatic unique_ptr<QueryNode> FormatDeserialize(FormatDeserializer &source);\n+};\n+\n+} // namespace duckdb\ndiff --git a/src/include/duckdb/parser/query_node/list.hpp b/src/include/duckdb/parser/query_node/list.hpp\nindex 06b89d93fbe0..94bfd3438e2b 100644\n--- a/src/include/duckdb/parser/query_node/list.hpp\n+++ b/src/include/duckdb/parser/query_node/list.hpp\n@@ -1,3 +1,4 @@\n #include \"duckdb/parser/query_node/recursive_cte_node.hpp\"\n+#include \"duckdb/parser/query_node/cte_node.hpp\"\n #include \"duckdb/parser/query_node/select_node.hpp\"\n #include \"duckdb/parser/query_node/set_operation_node.hpp\"\ndiff --git a/src/include/duckdb/parser/tokens.hpp b/src/include/duckdb/parser/tokens.hpp\nindex 856b87caa951..083630dd0102 100644\n--- a/src/include/duckdb/parser/tokens.hpp\n+++ b/src/include/duckdb/parser/tokens.hpp\n@@ -50,6 +50,7 @@ class QueryNode;\n class SelectNode;\n class SetOperationNode;\n class RecursiveCTENode;\n+class CTENode;\n \n //===--------------------------------------------------------------------===//\n // Expressions\ndiff --git a/src/include/duckdb/parser/transformer.hpp b/src/include/duckdb/parser/transformer.hpp\nindex c61dd33f3cfc..d9db17138533 100644\n--- a/src/include/duckdb/parser/transformer.hpp\n+++ b/src/include/duckdb/parser/transformer.hpp\n@@ -8,20 +8,20 @@\n \n #pragma once\n \n+#include \"duckdb/common/case_insensitive_map.hpp\"\n #include \"duckdb/common/constants.hpp\"\n #include \"duckdb/common/enums/expression_type.hpp\"\n #include \"duckdb/common/types.hpp\"\n #include \"duckdb/common/unordered_map.hpp\"\n-#include \"duckdb/parser/qualified_name.hpp\"\n-#include \"duckdb/parser/tokens.hpp\"\n-#include \"duckdb/parser/parsed_data/create_info.hpp\"\n #include \"duckdb/parser/group_by_node.hpp\"\n+#include \"duckdb/parser/parsed_data/create_info.hpp\"\n+#include \"duckdb/parser/qualified_name.hpp\"\n #include \"duckdb/parser/query_node.hpp\"\n-#include \"duckdb/common/case_insensitive_map.hpp\"\n-\n-#include \"pg_definitions.hpp\"\n+#include \"duckdb/parser/query_node/cte_node.hpp\"\n+#include \"duckdb/parser/tokens.hpp\"\n #include \"nodes/parsenodes.hpp\"\n #include \"nodes/primnodes.hpp\"\n+#include \"pg_definitions.hpp\"\n \n namespace duckdb {\n \n@@ -232,6 +232,9 @@ class Transformer {\n \tunique_ptr<ParsedExpression> TransformParamRef(duckdb_libpgquery::PGParamRef &node);\n \tunique_ptr<ParsedExpression> TransformNamedArg(duckdb_libpgquery::PGNamedArgExpr &root);\n \n+\t//! Transform multi assignment reference into an Expression\n+\tunique_ptr<ParsedExpression> TransformMultiAssignRef(duckdb_libpgquery::PGMultiAssignRef &root);\n+\n \tunique_ptr<ParsedExpression> TransformSQLValueFunction(duckdb_libpgquery::PGSQLValueFunction &node);\n \n \tunique_ptr<ParsedExpression> TransformSubquery(duckdb_libpgquery::PGSubLink &root);\n@@ -269,13 +272,17 @@ class Transformer {\n \tOnCreateConflict TransformOnConflict(duckdb_libpgquery::PGOnCreateConflict conflict);\n \tstring TransformAlias(duckdb_libpgquery::PGAlias *root, vector<string> &column_name_alias);\n \tvector<string> TransformStringList(duckdb_libpgquery::PGList *list);\n-\tvoid TransformCTE(duckdb_libpgquery::PGWithClause &de_with_clause, CommonTableExpressionMap &cte_map);\n-\tunique_ptr<SelectStatement> TransformRecursiveCTE(duckdb_libpgquery::PGCommonTableExpr &cte,\n+\tvoid TransformCTE(duckdb_libpgquery::PGWithClause &de_with_clause, CommonTableExpressionMap &cte_map,\n+\t                  vector<unique_ptr<CTENode>> &materialized_ctes);\n+\tstatic unique_ptr<QueryNode> TransformMaterializedCTE(unique_ptr<QueryNode> root,\n+\t                                                      vector<unique_ptr<CTENode>> &materialized_ctes);\n+\tunique_ptr<SelectStatement> TransformRecursiveCTE(duckdb_libpgquery::PGCommonTableExpr &node,\n \t                                                  CommonTableExpressionInfo &info);\n \n \tunique_ptr<ParsedExpression> TransformUnaryOperator(const string &op, unique_ptr<ParsedExpression> child);\n \tunique_ptr<ParsedExpression> TransformBinaryOperator(string op, unique_ptr<ParsedExpression> left,\n \t                                                     unique_ptr<ParsedExpression> right);\n+\tstatic bool ConstructConstantFromExpression(const ParsedExpression &expr, Value &value);\n \t//===--------------------------------------------------------------------===//\n \t// TableRef transform\n \t//===--------------------------------------------------------------------===//\ndiff --git a/src/include/duckdb/planner/binder.hpp b/src/include/duckdb/planner/binder.hpp\nindex d324d9641603..47744e9eff8c 100644\n--- a/src/include/duckdb/planner/binder.hpp\n+++ b/src/include/duckdb/planner/binder.hpp\n@@ -21,6 +21,7 @@\n #include \"duckdb/planner/bound_tokens.hpp\"\n #include \"duckdb/planner/expression/bound_columnref_expression.hpp\"\n #include \"duckdb/planner/logical_operator.hpp\"\n+#include \"duckdb/planner/joinside.hpp\"\n #include \"duckdb/common/reference_map.hpp\"\n \n namespace duckdb {\n@@ -75,7 +76,7 @@ struct CorrelatedColumnInfo {\n */\n class Binder : public std::enable_shared_from_this<Binder> {\n \tfriend class ExpressionBinder;\n-\tfriend class RecursiveSubqueryPlanner;\n+\tfriend class RecursiveDependentJoinPlanner;\n \n public:\n \tDUCKDB_API static shared_ptr<Binder> CreateBinder(ClientContext &context, optional_ptr<Binder> parent = nullptr,\n@@ -199,10 +200,10 @@ class Binder : public std::enable_shared_from_this<Binder> {\n \tvector<reference<ExpressionBinder>> active_binders;\n \t//! The count of bound_tables\n \tidx_t bound_tables;\n-\t//! Whether or not the binder has any unplanned subqueries that still need to be planned\n-\tbool has_unplanned_subqueries = false;\n-\t//! Whether or not subqueries should be planned already\n-\tbool plan_subquery = true;\n+\t//! Whether or not the binder has any unplanned dependent joins that still need to be planned/flattened\n+\tbool has_unplanned_dependent_joins = false;\n+\t//! Whether or not outside dependent joins have been planned and flattened\n+\tbool is_outside_flattened = true;\n \t//! Whether CTEs should reference the parent binder (if it exists)\n \tbool inherit_ctes = true;\n \t//! Whether or not the binder can contain NULLs as the root of expressions\n@@ -265,10 +266,12 @@ class Binder : public std::enable_shared_from_this<Binder> {\n \tunique_ptr<BoundQueryNode> BindNode(SelectNode &node);\n \tunique_ptr<BoundQueryNode> BindNode(SetOperationNode &node);\n \tunique_ptr<BoundQueryNode> BindNode(RecursiveCTENode &node);\n+\tunique_ptr<BoundQueryNode> BindNode(CTENode &node);\n \tunique_ptr<BoundQueryNode> BindNode(QueryNode &node);\n \n \tunique_ptr<LogicalOperator> VisitQueryNode(BoundQueryNode &node, unique_ptr<LogicalOperator> root);\n \tunique_ptr<LogicalOperator> CreatePlan(BoundRecursiveCTENode &node);\n+\tunique_ptr<LogicalOperator> CreatePlan(BoundCTENode &node);\n \tunique_ptr<LogicalOperator> CreatePlan(BoundSelectNode &statement);\n \tunique_ptr<LogicalOperator> CreatePlan(BoundSetOperationNode &node);\n \tunique_ptr<LogicalOperator> CreatePlan(BoundQueryNode &node);\ndiff --git a/src/include/duckdb/planner/bound_tokens.hpp b/src/include/duckdb/planner/bound_tokens.hpp\nindex 4667c5f844db..b864b25a634e 100644\n--- a/src/include/duckdb/planner/bound_tokens.hpp\n+++ b/src/include/duckdb/planner/bound_tokens.hpp\n@@ -17,6 +17,7 @@ class BoundQueryNode;\n class BoundSelectNode;\n class BoundSetOperationNode;\n class BoundRecursiveCTENode;\n+class BoundCTENode;\n \n //===--------------------------------------------------------------------===//\n // Expressions\ndiff --git a/src/include/duckdb/planner/column_binding.hpp b/src/include/duckdb/planner/column_binding.hpp\nindex da2f0e8e1db5..2035a29fd8b3 100644\n--- a/src/include/duckdb/planner/column_binding.hpp\n+++ b/src/include/duckdb/planner/column_binding.hpp\n@@ -32,6 +32,10 @@ struct ColumnBinding {\n \tbool operator==(const ColumnBinding &rhs) const {\n \t\treturn table_index == rhs.table_index && column_index == rhs.column_index;\n \t}\n+\n+\tbool operator!=(const ColumnBinding &rhs) const {\n+\t\treturn !(*this == rhs);\n+\t}\n };\n \n } // namespace duckdb\ndiff --git a/src/include/duckdb/planner/expression_binder/lateral_binder.hpp b/src/include/duckdb/planner/expression_binder/lateral_binder.hpp\nindex 5cd6082d420b..eb68a0cdf791 100644\n--- a/src/include/duckdb/planner/expression_binder/lateral_binder.hpp\n+++ b/src/include/duckdb/planner/expression_binder/lateral_binder.hpp\n@@ -20,8 +20,6 @@ class LateralBinder : public ExpressionBinder {\n public:\n \tLateralBinder(Binder &binder, ClientContext &context);\n \n-\t//! Extract the correlated lateral join columns and remove them from the targeted binder\n-\tvector<CorrelatedColumnInfo> ExtractCorrelatedColumns(Binder &binder);\n \tbool HasCorrelatedColumns() const {\n \t\treturn !correlated_columns.empty();\n \t}\ndiff --git a/src/include/duckdb/planner/logical_tokens.hpp b/src/include/duckdb/planner/logical_tokens.hpp\nindex 11a8b49a803a..fc40b5cb7fbb 100644\n--- a/src/include/duckdb/planner/logical_tokens.hpp\n+++ b/src/include/duckdb/planner/logical_tokens.hpp\n@@ -46,6 +46,7 @@ class LogicalPragma;\n class LogicalPrepare;\n class LogicalProjection;\n class LogicalRecursiveCTE;\n+class LogicalMaterializedCTE;\n class LogicalSetOperation;\n class LogicalSample;\n class LogicalShow;\ndiff --git a/src/include/duckdb/planner/operator/list.hpp b/src/include/duckdb/planner/operator/list.hpp\nindex 57355978bf76..36eb6b092844 100644\n--- a/src/include/duckdb/planner/operator/list.hpp\n+++ b/src/include/duckdb/planner/operator/list.hpp\n@@ -25,6 +25,7 @@\n #include \"duckdb/planner/operator/logical_join.hpp\"\n #include \"duckdb/planner/operator/logical_limit.hpp\"\n #include \"duckdb/planner/operator/logical_limit_percent.hpp\"\n+#include \"duckdb/planner/operator/logical_materialized_cte.hpp\"\n #include \"duckdb/planner/operator/logical_order.hpp\"\n #include \"duckdb/planner/operator/logical_pivot.hpp\"\n #include \"duckdb/planner/operator/logical_positional_join.hpp\"\n@@ -32,9 +33,9 @@\n #include \"duckdb/planner/operator/logical_prepare.hpp\"\n #include \"duckdb/planner/operator/logical_projection.hpp\"\n #include \"duckdb/planner/operator/logical_recursive_cte.hpp\"\n+#include \"duckdb/planner/operator/logical_reset.hpp\"\n #include \"duckdb/planner/operator/logical_sample.hpp\"\n #include \"duckdb/planner/operator/logical_set.hpp\"\n-#include \"duckdb/planner/operator/logical_reset.hpp\"\n #include \"duckdb/planner/operator/logical_set_operation.hpp\"\n #include \"duckdb/planner/operator/logical_show.hpp\"\n #include \"duckdb/planner/operator/logical_simple.hpp\"\ndiff --git a/src/include/duckdb/planner/operator/logical_comparison_join.hpp b/src/include/duckdb/planner/operator/logical_comparison_join.hpp\nindex bc11392a3502..1866ce0cff39 100644\n--- a/src/include/duckdb/planner/operator/logical_comparison_join.hpp\n+++ b/src/include/duckdb/planner/operator/logical_comparison_join.hpp\n@@ -38,25 +38,25 @@ class LogicalComparisonJoin : public LogicalJoin {\n \t                        FieldReader &reader);\n \n public:\n-\tstatic unique_ptr<LogicalOperator> CreateJoin(JoinType type, JoinRefType ref_type,\n+\tstatic unique_ptr<LogicalOperator> CreateJoin(ClientContext &context, JoinType type, JoinRefType ref_type,\n \t                                              unique_ptr<LogicalOperator> left_child,\n \t                                              unique_ptr<LogicalOperator> right_child,\n \t                                              unique_ptr<Expression> condition);\n-\tstatic unique_ptr<LogicalOperator> CreateJoin(JoinType type, JoinRefType ref_type,\n+\tstatic unique_ptr<LogicalOperator> CreateJoin(ClientContext &context, JoinType type, JoinRefType ref_type,\n \t                                              unique_ptr<LogicalOperator> left_child,\n \t                                              unique_ptr<LogicalOperator> right_child,\n \t                                              vector<JoinCondition> conditions,\n \t                                              vector<unique_ptr<Expression>> arbitrary_expressions);\n \n-\tstatic void ExtractJoinConditions(JoinType type, unique_ptr<LogicalOperator> &left_child,\n+\tstatic void ExtractJoinConditions(ClientContext &context, JoinType type, unique_ptr<LogicalOperator> &left_child,\n \t                                  unique_ptr<LogicalOperator> &right_child, unique_ptr<Expression> condition,\n \t                                  vector<JoinCondition> &conditions,\n \t                                  vector<unique_ptr<Expression>> &arbitrary_expressions);\n-\tstatic void ExtractJoinConditions(JoinType type, unique_ptr<LogicalOperator> &left_child,\n+\tstatic void ExtractJoinConditions(ClientContext &context, JoinType type, unique_ptr<LogicalOperator> &left_child,\n \t                                  unique_ptr<LogicalOperator> &right_child,\n \t                                  vector<unique_ptr<Expression>> &expressions, vector<JoinCondition> &conditions,\n \t                                  vector<unique_ptr<Expression>> &arbitrary_expressions);\n-\tstatic void ExtractJoinConditions(JoinType type, unique_ptr<LogicalOperator> &left_child,\n+\tstatic void ExtractJoinConditions(ClientContext &context, JoinType type, unique_ptr<LogicalOperator> &left_child,\n \t                                  unique_ptr<LogicalOperator> &right_child,\n \t                                  const unordered_set<idx_t> &left_bindings,\n \t                                  const unordered_set<idx_t> &right_bindings,\ndiff --git a/src/include/duckdb/planner/operator/logical_cteref.hpp b/src/include/duckdb/planner/operator/logical_cteref.hpp\nindex 2840add455b0..7b85b66caa4f 100644\n--- a/src/include/duckdb/planner/operator/logical_cteref.hpp\n+++ b/src/include/duckdb/planner/operator/logical_cteref.hpp\n@@ -10,6 +10,7 @@\n \n #include \"duckdb/common/types/chunk_collection.hpp\"\n #include \"duckdb/planner/logical_operator.hpp\"\n+#include \"duckdb/common/enums/cte_materialize.hpp\"\n \n namespace duckdb {\n \n@@ -19,8 +20,10 @@ class LogicalCTERef : public LogicalOperator {\n \tstatic constexpr const LogicalOperatorType TYPE = LogicalOperatorType::LOGICAL_CTE_REF;\n \n public:\n-\tLogicalCTERef(idx_t table_index, idx_t cte_index, vector<LogicalType> types, vector<string> colnames)\n-\t    : LogicalOperator(LogicalOperatorType::LOGICAL_CTE_REF), table_index(table_index), cte_index(cte_index) {\n+\tLogicalCTERef(idx_t table_index, idx_t cte_index, vector<LogicalType> types, vector<string> colnames,\n+\t              CTEMaterialize materialized_cte)\n+\t    : LogicalOperator(LogicalOperatorType::LOGICAL_CTE_REF), table_index(table_index), cte_index(cte_index),\n+\t      materialized_cte(materialized_cte) {\n \t\tD_ASSERT(types.size() > 0);\n \t\tchunk_types = types;\n \t\tbound_columns = colnames;\n@@ -33,6 +36,8 @@ class LogicalCTERef : public LogicalOperator {\n \tidx_t cte_index;\n \t//! The types of the chunk\n \tvector<LogicalType> chunk_types;\n+\t//! Does this operator read a materialized CTE?\n+\tCTEMaterialize materialized_cte;\n \n public:\n \tvector<ColumnBinding> GetColumnBindings() override {\ndiff --git a/src/include/duckdb/planner/operator/logical_dependent_join.hpp b/src/include/duckdb/planner/operator/logical_dependent_join.hpp\nnew file mode 100644\nindex 000000000000..a17842caa81f\n--- /dev/null\n+++ b/src/include/duckdb/planner/operator/logical_dependent_join.hpp\n@@ -0,0 +1,43 @@\n+//===----------------------------------------------------------------------===//\n+//                         DuckDB\n+//\n+// duckdb/planner/operator/logical_dependent_join.hpp\n+//\n+// logical_dependent_join represents a logical operator for lateral joins that\n+// is planned but not yet flattened\n+//\n+// This construct only exists during planning and should not exist in the plan\n+// once flattening is complete. Although the same information can be kept in the\n+// join itself, creating a new construct makes the code cleaner and easier to\n+// understand.\n+//\n+//===----------------------------------------------------------------------===//\n+\n+#pragma once\n+\n+#include \"duckdb/planner/binder.hpp\"\n+#include \"duckdb/planner/operator/logical_comparison_join.hpp\"\n+\n+namespace duckdb {\n+\n+class LogicalDependentJoin : public LogicalComparisonJoin {\n+public:\n+\tstatic constexpr const LogicalOperatorType TYPE = LogicalOperatorType::LOGICAL_DEPENDENT_JOIN;\n+\n+public:\n+\texplicit LogicalDependentJoin(unique_ptr<LogicalOperator> left, unique_ptr<LogicalOperator> right,\n+\t                              vector<CorrelatedColumnInfo> correlated_columns, JoinType type,\n+\t                              unique_ptr<Expression> condition);\n+\n+\t//! The conditions of the join\n+\tunique_ptr<Expression> join_condition;\n+\t//! The list of columns that have correlations with the right\n+\tvector<CorrelatedColumnInfo> correlated_columns;\n+\n+public:\n+\tstatic unique_ptr<LogicalOperator> Create(unique_ptr<LogicalOperator> left, unique_ptr<LogicalOperator> right,\n+\t                                          vector<CorrelatedColumnInfo> correlated_columns, JoinType type,\n+\t                                          unique_ptr<Expression> condition);\n+\tvoid Serialize(FieldWriter &writer) const override;\n+};\n+} // namespace duckdb\ndiff --git a/src/include/duckdb/planner/operator/logical_materialized_cte.hpp b/src/include/duckdb/planner/operator/logical_materialized_cte.hpp\nnew file mode 100644\nindex 000000000000..469965d978a9\n--- /dev/null\n+++ b/src/include/duckdb/planner/operator/logical_materialized_cte.hpp\n@@ -0,0 +1,49 @@\n+//===----------------------------------------------------------------------===//\n+//                         DuckDB\n+//\n+// duckdb/planner/operator/logical_materialized_cte.hpp\n+//\n+//\n+//===----------------------------------------------------------------------===//\n+\n+#pragma once\n+\n+#include \"duckdb/planner/logical_operator.hpp\"\n+\n+namespace duckdb {\n+\n+class LogicalMaterializedCTE : public LogicalOperator {\n+\tLogicalMaterializedCTE(idx_t table_index)\n+\t    : LogicalOperator(LogicalOperatorType::LOGICAL_MATERIALIZED_CTE), table_index(table_index) {\n+\t}\n+\n+public:\n+\tstatic constexpr const LogicalOperatorType TYPE = LogicalOperatorType::LOGICAL_MATERIALIZED_CTE;\n+\n+public:\n+\tLogicalMaterializedCTE(string ctename, idx_t table_index, idx_t column_count, unique_ptr<LogicalOperator> cte,\n+\t                       unique_ptr<LogicalOperator> child)\n+\t    : LogicalOperator(LogicalOperatorType::LOGICAL_MATERIALIZED_CTE), table_index(table_index),\n+\t      column_count(column_count), ctename(ctename) {\n+\t\tchildren.push_back(std::move(cte));\n+\t\tchildren.push_back(std::move(child));\n+\t}\n+\n+\tidx_t table_index;\n+\tidx_t column_count;\n+\tstring ctename;\n+\n+public:\n+\tvector<ColumnBinding> GetColumnBindings() override {\n+\t\treturn children[1]->GetColumnBindings();\n+\t}\n+\tvoid Serialize(FieldWriter &writer) const override;\n+\tstatic unique_ptr<LogicalOperator> Deserialize(LogicalDeserializationState &state, FieldReader &reader);\n+\tvector<idx_t> GetTableIndex() const override;\n+\n+protected:\n+\tvoid ResolveTypes() override {\n+\t\ttypes = children[1]->types;\n+\t}\n+};\n+} // namespace duckdb\ndiff --git a/src/include/duckdb/planner/operator/logical_recursive_cte.hpp b/src/include/duckdb/planner/operator/logical_recursive_cte.hpp\nindex 254dc4d40a53..274e49cb21b4 100644\n--- a/src/include/duckdb/planner/operator/logical_recursive_cte.hpp\n+++ b/src/include/duckdb/planner/operator/logical_recursive_cte.hpp\n@@ -22,15 +22,16 @@ class LogicalRecursiveCTE : public LogicalOperator {\n \tstatic constexpr const LogicalOperatorType TYPE = LogicalOperatorType::LOGICAL_RECURSIVE_CTE;\n \n public:\n-\tLogicalRecursiveCTE(idx_t table_index, idx_t column_count, bool union_all, unique_ptr<LogicalOperator> top,\n-\t                    unique_ptr<LogicalOperator> bottom)\n-\t    : LogicalOperator(LogicalOperatorType::LOGICAL_RECURSIVE_CTE), union_all(union_all), table_index(table_index),\n-\t      column_count(column_count) {\n+\tLogicalRecursiveCTE(string ctename, idx_t table_index, idx_t column_count, bool union_all,\n+\t                    unique_ptr<LogicalOperator> top, unique_ptr<LogicalOperator> bottom)\n+\t    : LogicalOperator(LogicalOperatorType::LOGICAL_RECURSIVE_CTE), union_all(union_all), ctename(ctename),\n+\t      table_index(table_index), column_count(column_count) {\n \t\tchildren.push_back(std::move(top));\n \t\tchildren.push_back(std::move(bottom));\n \t}\n \n \tbool union_all;\n+\tstring ctename;\n \tidx_t table_index;\n \tidx_t column_count;\n \ndiff --git a/src/include/duckdb/planner/query_node/bound_cte_node.hpp b/src/include/duckdb/planner/query_node/bound_cte_node.hpp\nnew file mode 100644\nindex 000000000000..00b3f94a39c6\n--- /dev/null\n+++ b/src/include/duckdb/planner/query_node/bound_cte_node.hpp\n@@ -0,0 +1,44 @@\n+//===----------------------------------------------------------------------===//\n+//                         DuckDB\n+//\n+// duckdb/planner/query_node/bound_cte_node.hpp\n+//\n+//\n+//===----------------------------------------------------------------------===//\n+\n+#pragma once\n+\n+#include \"duckdb/planner/binder.hpp\"\n+#include \"duckdb/planner/bound_query_node.hpp\"\n+\n+namespace duckdb {\n+\n+class BoundCTENode : public BoundQueryNode {\n+public:\n+\tstatic constexpr const QueryNodeType TYPE = QueryNodeType::CTE_NODE;\n+\n+public:\n+\tBoundCTENode() : BoundQueryNode(QueryNodeType::CTE_NODE) {\n+\t}\n+\n+\t//! Keep track of the CTE name this node represents\n+\tstring ctename;\n+\n+\t//! The cte node\n+\tunique_ptr<BoundQueryNode> query;\n+\t//! The child node\n+\tunique_ptr<BoundQueryNode> child;\n+\t//! Index used by the set operation\n+\tidx_t setop_index;\n+\t//! The binder used by the query side of the CTE\n+\tshared_ptr<Binder> query_binder;\n+\t//! The binder used by the child side of the CTE\n+\tshared_ptr<Binder> child_binder;\n+\n+public:\n+\tidx_t GetRootIndex() override {\n+\t\treturn child->GetRootIndex();\n+\t}\n+};\n+\n+} // namespace duckdb\ndiff --git a/src/include/duckdb/planner/query_node/list.hpp b/src/include/duckdb/planner/query_node/list.hpp\nindex ab4988fd29db..5c7dbda9492b 100644\n--- a/src/include/duckdb/planner/query_node/list.hpp\n+++ b/src/include/duckdb/planner/query_node/list.hpp\n@@ -1,3 +1,4 @@\n #include \"duckdb/planner/query_node/bound_recursive_cte_node.hpp\"\n+#include \"duckdb/planner/query_node/bound_cte_node.hpp\"\n #include \"duckdb/planner/query_node/bound_select_node.hpp\"\n #include \"duckdb/planner/query_node/bound_set_operation_node.hpp\"\ndiff --git a/src/include/duckdb/planner/subquery/flatten_dependent_join.hpp b/src/include/duckdb/planner/subquery/flatten_dependent_join.hpp\nindex b34e7a7b548a..ce1cdc376eee 100644\n--- a/src/include/duckdb/planner/subquery/flatten_dependent_join.hpp\n+++ b/src/include/duckdb/planner/subquery/flatten_dependent_join.hpp\n@@ -23,7 +23,7 @@ struct FlattenDependentJoins {\n \n \t//! Detects which Logical Operators have correlated expressions that they are dependent upon, filling the\n \t//! has_correlated_expressions map.\n-\tbool DetectCorrelatedExpressions(LogicalOperator *op, bool lateral = false);\n+\tbool DetectCorrelatedExpressions(LogicalOperator *op, bool lateral = false, idx_t lateral_depth = 0);\n \n \t//! Push the dependent join down a LogicalOperator\n \tunique_ptr<LogicalOperator> PushDownDependentJoin(unique_ptr<LogicalOperator> plan);\n@@ -43,7 +43,7 @@ struct FlattenDependentJoins {\n \n private:\n \tunique_ptr<LogicalOperator> PushDownDependentJoinInternal(unique_ptr<LogicalOperator> plan,\n-\t                                                          bool &parent_propagate_null_values);\n+\t                                                          bool &parent_propagate_null_values, idx_t lateral_depth);\n };\n \n } // namespace duckdb\ndiff --git a/src/include/duckdb/planner/subquery/has_correlated_expressions.hpp b/src/include/duckdb/planner/subquery/has_correlated_expressions.hpp\nindex e50115a0ef26..6b238ffccf2e 100644\n--- a/src/include/duckdb/planner/subquery/has_correlated_expressions.hpp\n+++ b/src/include/duckdb/planner/subquery/has_correlated_expressions.hpp\n@@ -16,7 +16,8 @@ namespace duckdb {\n //! Helper class to recursively detect correlated expressions inside a single LogicalOperator\n class HasCorrelatedExpressions : public LogicalOperatorVisitor {\n public:\n-\texplicit HasCorrelatedExpressions(const vector<CorrelatedColumnInfo> &correlated, bool lateral = false);\n+\texplicit HasCorrelatedExpressions(const vector<CorrelatedColumnInfo> &correlated, bool lateral = false,\n+\t                                  idx_t lateral_depth = 0);\n \n \tvoid VisitOperator(LogicalOperator &op) override;\n \n@@ -28,6 +29,8 @@ class HasCorrelatedExpressions : public LogicalOperatorVisitor {\n \tunique_ptr<Expression> VisitReplace(BoundSubqueryExpression &expr, unique_ptr<Expression> *expr_ptr) override;\n \n \tconst vector<CorrelatedColumnInfo> &correlated_columns;\n+\t// Tracks number of nested laterals\n+\tidx_t lateral_depth;\n };\n \n } // namespace duckdb\ndiff --git a/src/include/duckdb/planner/subquery/recursive_dependent_join_planner.hpp b/src/include/duckdb/planner/subquery/recursive_dependent_join_planner.hpp\nnew file mode 100644\nindex 000000000000..ea7b627bd5ce\n--- /dev/null\n+++ b/src/include/duckdb/planner/subquery/recursive_dependent_join_planner.hpp\n@@ -0,0 +1,31 @@\n+//===----------------------------------------------------------------------===//\n+//                         DuckDB\n+//\n+// duckdb/planner/subquery/recursive_dependent_join_planner.hpp\n+//\n+//\n+//===----------------------------------------------------------------------===//\n+\n+#pragma once\n+\n+#include \"duckdb/planner/logical_operator_visitor.hpp\"\n+\n+namespace duckdb {\n+\n+class Binder;\n+\n+/*\n+ * Recursively plan subqueries and flatten dependent joins from outermost to innermost (like peeling an onion).\n+ */\n+class RecursiveDependentJoinPlanner : public LogicalOperatorVisitor {\n+public:\n+\texplicit RecursiveDependentJoinPlanner(Binder &binder) : binder(binder) {\n+\t}\n+\tvoid VisitOperator(LogicalOperator &op) override;\n+\tunique_ptr<Expression> VisitReplace(BoundSubqueryExpression &expr, unique_ptr<Expression> *expr_ptr) override;\n+\n+private:\n+\tunique_ptr<LogicalOperator> root;\n+\tBinder &binder;\n+};\n+} // namespace duckdb\ndiff --git a/src/include/duckdb/planner/subquery/rewrite_correlated_expressions.hpp b/src/include/duckdb/planner/subquery/rewrite_correlated_expressions.hpp\nindex 973d429326fc..0de0597c0175 100644\n--- a/src/include/duckdb/planner/subquery/rewrite_correlated_expressions.hpp\n+++ b/src/include/duckdb/planner/subquery/rewrite_correlated_expressions.hpp\n@@ -17,7 +17,8 @@ namespace duckdb {\n //! Helper class to rewrite correlated expressions within a single LogicalOperator\n class RewriteCorrelatedExpressions : public LogicalOperatorVisitor {\n public:\n-\tRewriteCorrelatedExpressions(ColumnBinding base_binding, column_binding_map_t<idx_t> &correlated_map);\n+\tRewriteCorrelatedExpressions(ColumnBinding base_binding, column_binding_map_t<idx_t> &correlated_map,\n+\t                             idx_t lateral_depth, bool recursive_rewrite = false);\n \n \tvoid VisitOperator(LogicalOperator &op) override;\n \n@@ -31,7 +32,7 @@ class RewriteCorrelatedExpressions : public LogicalOperatorVisitor {\n \tpublic:\n \t\tRewriteCorrelatedRecursive(BoundSubqueryExpression &parent, ColumnBinding base_binding,\n \t\t                           column_binding_map_t<idx_t> &correlated_map);\n-\n+\t\tvoid RewriteJoinRefRecursive(BoundTableRef &ref);\n \t\tvoid RewriteCorrelatedSubquery(BoundSubqueryExpression &expr);\n \t\tvoid RewriteCorrelatedExpressions(Expression &child);\n \n@@ -43,6 +44,11 @@ class RewriteCorrelatedExpressions : public LogicalOperatorVisitor {\n private:\n \tColumnBinding base_binding;\n \tcolumn_binding_map_t<idx_t> &correlated_map;\n+\t// To keep track of the number of dependent joins encountered\n+\tidx_t lateral_depth;\n+\t// This flag is used to determine if the rewrite should recursively update the bindings for all\n+\t// bound columns ref in the plan, and update the depths to match the new source\n+\tbool recursive_rewrite;\n };\n \n //! Helper class that rewrites COUNT aggregates into a CASE expression turning NULL into 0 after a LEFT OUTER JOIN\ndiff --git a/src/include/duckdb/planner/tableref/bound_cteref.hpp b/src/include/duckdb/planner/tableref/bound_cteref.hpp\nindex d5b0c3065f5c..2e9db3ba9806 100644\n--- a/src/include/duckdb/planner/tableref/bound_cteref.hpp\n+++ b/src/include/duckdb/planner/tableref/bound_cteref.hpp\n@@ -17,8 +17,9 @@ class BoundCTERef : public BoundTableRef {\n \tstatic constexpr const TableReferenceType TYPE = TableReferenceType::CTE;\n \n public:\n-\tBoundCTERef(idx_t bind_index, idx_t cte_index)\n-\t    : BoundTableRef(TableReferenceType::CTE), bind_index(bind_index), cte_index(cte_index) {\n+\tBoundCTERef(idx_t bind_index, idx_t cte_index, CTEMaterialize materialized_cte)\n+\t    : BoundTableRef(TableReferenceType::CTE), bind_index(bind_index), cte_index(cte_index),\n+\t      materialized_cte(materialized_cte) {\n \t}\n \n \t//! The set of columns bound to this base table reference\n@@ -29,5 +30,7 @@ class BoundCTERef : public BoundTableRef {\n \tidx_t bind_index;\n \t//! The index of the cte\n \tidx_t cte_index;\n+\t//! Is this a reference to a materialized CTE?\n+\tCTEMaterialize materialized_cte;\n };\n } // namespace duckdb\ndiff --git a/src/include/duckdb/storage/arena_allocator.hpp b/src/include/duckdb/storage/arena_allocator.hpp\nindex 17a7a9b4c624..835fc7179711 100644\n--- a/src/include/duckdb/storage/arena_allocator.hpp\n+++ b/src/include/duckdb/storage/arena_allocator.hpp\n@@ -45,7 +45,7 @@ class ArenaAllocator {\n \tDUCKDB_API ArenaChunk *GetHead();\n \tDUCKDB_API ArenaChunk *GetTail();\n \n-\tDUCKDB_API bool IsEmpty();\n+\tDUCKDB_API bool IsEmpty() const;\n \n \t//! Returns an \"Allocator\" wrapper for this arena allocator\n \tAllocator &GetAllocator() {\ndiff --git a/src/include/duckdb/storage/block_manager.hpp b/src/include/duckdb/storage/block_manager.hpp\nindex dce0a0a052be..d5a0d7c43a3c 100644\n--- a/src/include/duckdb/storage/block_manager.hpp\n+++ b/src/include/duckdb/storage/block_manager.hpp\n@@ -65,6 +65,9 @@ class BlockManager {\n \t//! Returns the number of free blocks\n \tvirtual idx_t FreeBlocks() = 0;\n \n+\t//! Truncate the underlying database file after a checkpoint\n+\tvirtual void Truncate();\n+\n \t//! Register a block with the given block id in the base file\n \tshared_ptr<BlockHandle> RegisterBlock(block_id_t block_id, bool is_meta_block = false);\n \t//! Clear cached handles for meta blocks\n@@ -74,9 +77,6 @@ class BlockManager {\n \n \tvoid UnregisterBlock(block_id_t block_id, bool can_destroy);\n \n-\tstatic BlockManager &GetBlockManager(ClientContext &context);\n-\tstatic BlockManager &GetBlockManager(DatabaseInstance &db);\n-\n private:\n \t//! The lock for the set of blocks\n \tmutex blocks_lock;\ndiff --git a/src/include/duckdb/storage/data_table.hpp b/src/include/duckdb/storage/data_table.hpp\nindex 283414366f05..7a1a7f4b88ea 100644\n--- a/src/include/duckdb/storage/data_table.hpp\n+++ b/src/include/duckdb/storage/data_table.hpp\n@@ -51,7 +51,7 @@ class DataTable {\n \t          const string &table, vector<ColumnDefinition> column_definitions_p,\n \t          unique_ptr<PersistentTableData> data = nullptr);\n \t//! Constructs a DataTable as a delta on an existing data table with a newly added column\n-\tDataTable(ClientContext &context, DataTable &parent, ColumnDefinition &new_column, Expression *default_value);\n+\tDataTable(ClientContext &context, DataTable &parent, ColumnDefinition &new_column, Expression &default_value);\n \t//! Constructs a DataTable as a delta on an existing data table but with one column removed\n \tDataTable(ClientContext &context, DataTable &parent, idx_t removed_column);\n \t//! Constructs a DataTable as a delta on an existing data table but with one column changed type\ndiff --git a/src/include/duckdb/storage/object_cache.hpp b/src/include/duckdb/storage/object_cache.hpp\nindex ce43035af42f..170c0041f842 100644\n--- a/src/include/duckdb/storage/object_cache.hpp\n+++ b/src/include/duckdb/storage/object_cache.hpp\n@@ -47,11 +47,33 @@ class ObjectCache {\n \t\treturn std::static_pointer_cast<T, ObjectCacheEntry>(object);\n \t}\n \n+\ttemplate <class T, class... Args>\n+\tshared_ptr<T> GetOrCreate(const string &key, Args &&...args) {\n+\t\tlock_guard<mutex> glock(lock);\n+\n+\t\tauto entry = cache.find(key);\n+\t\tif (entry == cache.end()) {\n+\t\t\tauto value = make_shared<T>(args...);\n+\t\t\tcache[key] = value;\n+\t\t\treturn value;\n+\t\t}\n+\t\tauto object = entry->second;\n+\t\tif (!object || object->GetObjectType() != T::ObjectType()) {\n+\t\t\treturn nullptr;\n+\t\t}\n+\t\treturn std::static_pointer_cast<T, ObjectCacheEntry>(object);\n+\t}\n+\n \tvoid Put(string key, shared_ptr<ObjectCacheEntry> value) {\n \t\tlock_guard<mutex> glock(lock);\n \t\tcache[key] = std::move(value);\n \t}\n \n+\tvoid Delete(const string &key) {\n+\t\tlock_guard<mutex> glock(lock);\n+\t\tcache.erase(key);\n+\t}\n+\n \tDUCKDB_API static ObjectCache &GetObjectCache(ClientContext &context);\n \tDUCKDB_API static bool ObjectCacheEnabled(ClientContext &context);\n \ndiff --git a/src/include/duckdb/storage/single_file_block_manager.hpp b/src/include/duckdb/storage/single_file_block_manager.hpp\nindex e058bdc7ee42..1848b46be547 100644\n--- a/src/include/duckdb/storage/single_file_block_manager.hpp\n+++ b/src/include/duckdb/storage/single_file_block_manager.hpp\n@@ -60,6 +60,8 @@ class SingleFileBlockManager : public BlockManager {\n \tvoid Write(FileBuffer &block, block_id_t block_id) override;\n \t//! Write the header to disk, this is the final step of the checkpointing process\n \tvoid WriteHeader(DatabaseHeader header) override;\n+\t//! Truncate the underlying database file after a checkpoint\n+\tvoid Truncate() override;\n \n \t//! Returns the number of total blocks\n \tidx_t TotalBlocks() override;\ndiff --git a/src/include/duckdb/storage/statistics/string_stats.hpp b/src/include/duckdb/storage/statistics/string_stats.hpp\nindex 8eace1673690..f55e04858ef0 100644\n--- a/src/include/duckdb/storage/statistics/string_stats.hpp\n+++ b/src/include/duckdb/storage/statistics/string_stats.hpp\n@@ -48,6 +48,10 @@ struct StringStats {\n \tDUCKDB_API static uint32_t MaxStringLength(const BaseStatistics &stats);\n \t//! Whether or not the strings can contain unicode\n \tDUCKDB_API static bool CanContainUnicode(const BaseStatistics &stats);\n+\t//! Returns the min value (up to a length of StringStatsData::MAX_STRING_MINMAX_SIZE)\n+\tDUCKDB_API static string Min(const BaseStatistics &stats);\n+\t//! Returns the max value (up to a length of StringStatsData::MAX_STRING_MINMAX_SIZE)\n+\tDUCKDB_API static string Max(const BaseStatistics &stats);\n \n \t//! Resets the max string length so HasMaxStringLength() is false\n \tDUCKDB_API static void ResetMaxStringLength(BaseStatistics &stats);\ndiff --git a/src/include/duckdb/storage/table/chunk_info.hpp b/src/include/duckdb/storage/table/chunk_info.hpp\nindex 9a593c22686b..24bfbb1d843f 100644\n--- a/src/include/duckdb/storage/table/chunk_info.hpp\n+++ b/src/include/duckdb/storage/table/chunk_info.hpp\n@@ -41,6 +41,7 @@ class ChunkInfo {\n \t//! Returns whether or not a single row in the ChunkInfo should be used or not for the given transaction\n \tvirtual bool Fetch(TransactionData transaction, row_t row) = 0;\n \tvirtual void CommitAppend(transaction_t commit_id, idx_t start, idx_t end) = 0;\n+\tvirtual idx_t GetCommittedDeletedCount(idx_t max_count) = 0;\n \n \tvirtual void Serialize(Serializer &serialize) = 0;\n \tstatic unique_ptr<ChunkInfo> Deserialize(Deserializer &source);\n@@ -79,6 +80,7 @@ class ChunkConstantInfo : public ChunkInfo {\n \t                            SelectionVector &sel_vector, idx_t max_count) override;\n \tbool Fetch(TransactionData transaction, row_t row) override;\n \tvoid CommitAppend(transaction_t commit_id, idx_t start, idx_t end) override;\n+\tidx_t GetCommittedDeletedCount(idx_t max_count) override;\n \n \tvoid Serialize(Serializer &serialize) override;\n \tstatic unique_ptr<ChunkInfo> Deserialize(Deserializer &source);\n@@ -113,6 +115,7 @@ class ChunkVectorInfo : public ChunkInfo {\n \t                            SelectionVector &sel_vector, idx_t max_count) override;\n \tbool Fetch(TransactionData transaction, row_t row) override;\n \tvoid CommitAppend(transaction_t commit_id, idx_t start, idx_t end) override;\n+\tidx_t GetCommittedDeletedCount(idx_t max_count) override;\n \n \tvoid Append(idx_t start, idx_t end, transaction_t commit_id);\n \ndiff --git a/src/include/duckdb/storage/table/row_group.hpp b/src/include/duckdb/storage/table/row_group.hpp\nindex 05124592a8fc..88cecb84a40d 100644\n--- a/src/include/duckdb/storage/table/row_group.hpp\n+++ b/src/include/duckdb/storage/table/row_group.hpp\n@@ -74,7 +74,6 @@ class RowGroup : public SegmentBase<RowGroup> {\n \tRowGroupCollection &GetCollection() {\n \t\treturn collection.get();\n \t}\n-\tDatabaseInstance &GetDatabase();\n \tBlockManager &GetBlockManager();\n \tDataTableInfo &GetTableInfo();\n \n@@ -82,7 +81,7 @@ class RowGroup : public SegmentBase<RowGroup> {\n \t                               ExpressionExecutor &executor, CollectionScanState &scan_state,\n \t                               DataChunk &scan_chunk);\n \tunique_ptr<RowGroup> AddColumn(RowGroupCollection &collection, ColumnDefinition &new_column,\n-\t                               ExpressionExecutor &executor, Expression *default_value, Vector &intermediate);\n+\t                               ExpressionExecutor &executor, Expression &default_value, Vector &intermediate);\n \tunique_ptr<RowGroup> RemoveColumn(RowGroupCollection &collection, idx_t removed_column);\n \n \tvoid CommitDrop();\n@@ -123,6 +122,7 @@ class RowGroup : public SegmentBase<RowGroup> {\n \tidx_t Delete(TransactionData transaction, DataTable &table, row_t *row_ids, idx_t count);\n \n \tRowGroupWriteData WriteToDisk(PartialBlockManager &manager, const vector<CompressionType> &compression_types);\n+\tbool AllDeleted();\n \tRowGroupPointer Checkpoint(RowGroupWriter &writer, TableStatistics &global_stats);\n \tstatic void Serialize(RowGroupPointer &pointer, Serializer &serializer);\n \tstatic RowGroupPointer Deserialize(Deserializer &source, const vector<LogicalType> &columns);\n@@ -170,6 +170,7 @@ struct VersionNode {\n \tunique_ptr<ChunkInfo> info[RowGroup::ROW_GROUP_VECTOR_COUNT];\n \n \tvoid SetStart(idx_t start);\n+\tidx_t GetCommittedDeletedCount(idx_t count);\n };\n \n } // namespace duckdb\ndiff --git a/src/include/duckdb/storage/table/row_group_collection.hpp b/src/include/duckdb/storage/table/row_group_collection.hpp\nindex 78d3cd7a6fd2..0c5db7795c38 100644\n--- a/src/include/duckdb/storage/table/row_group_collection.hpp\n+++ b/src/include/duckdb/storage/table/row_group_collection.hpp\n@@ -45,7 +45,6 @@ class RowGroupCollection {\n \tvoid AppendRowGroup(SegmentLock &l, idx_t start_row);\n \t//! Get the nth row-group, negative numbers start from the back (so -1 is the last row group, etc)\n \tRowGroup *GetRowGroup(int64_t index);\n-\tidx_t RowGroupCount();\n \tvoid Verify();\n \n \tvoid InitializeScan(CollectionScanState &state, const vector<column_t> &column_ids, TableFilterSet *table_filters);\n@@ -93,7 +92,7 @@ class RowGroupCollection {\n \tconst vector<LogicalType> &GetTypes() const;\n \n \tshared_ptr<RowGroupCollection> AddColumn(ClientContext &context, ColumnDefinition &new_column,\n-\t                                         Expression *default_value);\n+\t                                         Expression &default_value);\n \tshared_ptr<RowGroupCollection> RemoveColumn(idx_t col_idx);\n \tshared_ptr<RowGroupCollection> AlterType(ClientContext &context, idx_t changed_idx, const LogicalType &target_type,\n \t                                         vector<column_t> bound_columns, Expression &cast_expr);\n@@ -104,7 +103,6 @@ class RowGroupCollection {\n \tvoid SetDistinct(column_t column_id, unique_ptr<DistinctStatistics> distinct_stats);\n \n \tAttachedDatabase &GetAttached();\n-\tDatabaseInstance &GetDatabase();\n \tBlockManager &GetBlockManager() {\n \t\treturn block_manager;\n \t}\ndiff --git a/src/include/duckdb/transaction/local_storage.hpp b/src/include/duckdb/transaction/local_storage.hpp\nindex 5d91ac566686..1617c29a4d96 100644\n--- a/src/include/duckdb/transaction/local_storage.hpp\n+++ b/src/include/duckdb/transaction/local_storage.hpp\n@@ -32,7 +32,7 @@ class LocalTableStorage : public std::enable_shared_from_this<LocalTableStorage>\n \tLocalTableStorage(DataTable &table, LocalTableStorage &parent, idx_t drop_idx);\n \t// Create a LocalTableStorage from an ADD COLUMN\n \tLocalTableStorage(ClientContext &context, DataTable &table, LocalTableStorage &parent, ColumnDefinition &new_column,\n-\t                  optional_ptr<Expression> default_value);\n+\t                  Expression &default_value);\n \t~LocalTableStorage();\n \n \treference<DataTable> table_ref;\n@@ -143,8 +143,7 @@ class LocalStorage {\n \n \tidx_t AddedRows(DataTable &table);\n \n-\tvoid AddColumn(DataTable &old_dt, DataTable &new_dt, ColumnDefinition &new_column,\n-\t               optional_ptr<Expression> default_value);\n+\tvoid AddColumn(DataTable &old_dt, DataTable &new_dt, ColumnDefinition &new_column, Expression &default_value);\n \tvoid DropColumn(DataTable &old_dt, DataTable &new_dt, idx_t removed_column);\n \tvoid ChangeType(DataTable &old_dt, DataTable &new_dt, idx_t changed_idx, const LogicalType &target_type,\n \t                const vector<column_t> &bound_columns, Expression &cast_expr);\ndiff --git a/src/main/capi/arrow-c.cpp b/src/main/capi/arrow-c.cpp\nindex f7045f043610..87d8b97cd3ac 100644\n--- a/src/main/capi/arrow-c.cpp\n+++ b/src/main/capi/arrow-c.cpp\n@@ -1,5 +1,6 @@\n-#include \"duckdb/main/capi/capi_internal.hpp\"\n #include \"duckdb/common/arrow/arrow_converter.hpp\"\n+#include \"duckdb/function/table/arrow.hpp\"\n+#include \"duckdb/main/capi/capi_internal.hpp\"\n \n using duckdb::ArrowConverter;\n using duckdb::ArrowResultWrapper;\n@@ -108,3 +109,156 @@ duckdb_state duckdb_execute_prepared_arrow(duckdb_prepared_statement prepared_st\n \t*out_result = reinterpret_cast<duckdb_arrow>(arrow_wrapper);\n \treturn !arrow_wrapper->result->HasError() ? DuckDBSuccess : DuckDBError;\n }\n+\n+namespace arrow_array_stream_wrapper {\n+namespace {\n+struct PrivateData {\n+\tArrowSchema *schema;\n+\tArrowArray *array;\n+\tbool done = false;\n+};\n+\n+// LCOV_EXCL_START\n+// This function is never called, but used to set ArrowSchema's release functions to a non-null NOOP.\n+void EmptySchemaRelease(ArrowSchema *) {\n+}\n+// LCOV_EXCL_STOP\n+\n+void EmptyArrayRelease(ArrowArray *) {\n+}\n+\n+void EmptyStreamRelease(ArrowArrayStream *) {\n+}\n+\n+void FactoryGetSchema(uintptr_t stream_factory_ptr, duckdb::ArrowSchemaWrapper &schema) {\n+\tauto private_data =\n+\t    reinterpret_cast<PrivateData *>(reinterpret_cast<ArrowArrayStream *>(stream_factory_ptr)->private_data);\n+\tschema.arrow_schema = *private_data->schema;\n+\n+\t// Need to nullify the root schema's release function here, because streams don't allow us to set the release\n+\t// function. For the schema's children, we nullify the release functions in `duckdb_arrow_scan`, so we don't need to\n+\t// handle them again here. We set this to nullptr and not EmptySchemaRelease to prevent ArrowSchemaWrapper's\n+\t// destructor from destroying the schema (it's the caller's responsibility).\n+\tschema.arrow_schema.release = nullptr;\n+}\n+\n+int GetSchema(struct ArrowArrayStream *stream, struct ArrowSchema *out) {\n+\tauto private_data = static_cast<arrow_array_stream_wrapper::PrivateData *>((stream->private_data));\n+\tif (private_data->schema == nullptr) {\n+\t\treturn DuckDBError;\n+\t}\n+\n+\t*out = *private_data->schema;\n+\tout->release = EmptySchemaRelease;\n+\treturn DuckDBSuccess;\n+}\n+\n+int GetNext(struct ArrowArrayStream *stream, struct ArrowArray *out) {\n+\tauto private_data = static_cast<arrow_array_stream_wrapper::PrivateData *>((stream->private_data));\n+\t*out = *private_data->array;\n+\tif (private_data->done) {\n+\t\tout->release = nullptr;\n+\t} else {\n+\t\tout->release = EmptyArrayRelease;\n+\t}\n+\n+\tprivate_data->done = true;\n+\treturn DuckDBSuccess;\n+}\n+\n+duckdb::unique_ptr<duckdb::ArrowArrayStreamWrapper> FactoryGetNext(uintptr_t stream_factory_ptr,\n+                                                                   duckdb::ArrowStreamParameters &parameters) {\n+\tauto stream = reinterpret_cast<ArrowArrayStream *>(stream_factory_ptr);\n+\tauto ret = duckdb::make_uniq<duckdb::ArrowArrayStreamWrapper>();\n+\tret->arrow_array_stream = *stream;\n+\tret->arrow_array_stream.release = EmptyStreamRelease;\n+\treturn ret;\n+}\n+\n+// LCOV_EXCL_START\n+// This function is never be called, because it's used to construct a stream wrapping around a caller-supplied\n+// ArrowArray. Thus, the stream itself cannot produce an error.\n+const char *GetLastError(struct ArrowArrayStream *stream) {\n+\treturn nullptr;\n+}\n+// LCOV_EXCL_STOP\n+\n+void Release(struct ArrowArrayStream *stream) {\n+\tif (stream->private_data != nullptr) {\n+\t\tdelete reinterpret_cast<PrivateData *>(stream->private_data);\n+\t}\n+\n+\tstream->private_data = nullptr;\n+\tstream->release = nullptr;\n+}\n+\n+duckdb_state Ingest(duckdb_connection connection, const char *table_name, struct ArrowArrayStream *input) {\n+\ttry {\n+\t\tauto cconn = reinterpret_cast<duckdb::Connection *>(connection);\n+\t\tcconn\n+\t\t    ->TableFunction(\"arrow_scan\", {duckdb::Value::POINTER((uintptr_t)input),\n+\t\t                                   duckdb::Value::POINTER((uintptr_t)FactoryGetNext),\n+\t\t                                   duckdb::Value::POINTER((uintptr_t)FactoryGetSchema)})\n+\t\t    ->CreateView(table_name, true, false);\n+\t} catch (...) { // LCOV_EXCL_START\n+\t\t// Tried covering this in tests, but it proved harder than expected. At the time of writing:\n+\t\t// - Passing any name to `CreateView` worked without throwing an exception\n+\t\t// - Passing a null Arrow array worked without throwing an exception\n+\t\t// - Passing an invalid schema (without any columns) led to an InternalException with SIGABRT, which is meant to\n+\t\t//   be un-catchable. This case likely needs to be handled gracefully within `arrow_scan`.\n+\t\t// Ref: https://discord.com/channels/909674491309850675/921100573732909107/1115230468699336785\n+\t\treturn DuckDBError;\n+\t} // LCOV_EXCL_STOP\n+\n+\treturn DuckDBSuccess;\n+}\n+} // namespace\n+} // namespace arrow_array_stream_wrapper\n+\n+duckdb_state duckdb_arrow_scan(duckdb_connection connection, const char *table_name, duckdb_arrow_stream arrow) {\n+\tauto stream = reinterpret_cast<ArrowArrayStream *>(arrow);\n+\n+\t// Backup release functions - we nullify children schema release functions because we don't want to release on\n+\t// behalf of the caller, downstream in our code. Note that Arrow releases target immediate children, but aren't\n+\t// recursive. So we only back up immediate children here and restore their functions.\n+\tArrowSchema schema;\n+\tif (stream->get_schema(stream, &schema) == DuckDBError) {\n+\t\treturn DuckDBError;\n+\t}\n+\n+\ttypedef void (*release_fn_t)(ArrowSchema *);\n+\tstd::vector<release_fn_t> release_fns(schema.n_children);\n+\tfor (int64_t i = 0; i < schema.n_children; i++) {\n+\t\tauto child = schema.children[i];\n+\t\trelease_fns[i] = child->release;\n+\t\tchild->release = arrow_array_stream_wrapper::EmptySchemaRelease;\n+\t}\n+\n+\tauto ret = arrow_array_stream_wrapper::Ingest(connection, table_name, stream);\n+\n+\t// Restore release functions.\n+\tfor (int64_t i = 0; i < schema.n_children; i++) {\n+\t\tschema.children[i]->release = release_fns[i];\n+\t}\n+\n+\treturn ret;\n+}\n+\n+duckdb_state duckdb_arrow_array_scan(duckdb_connection connection, const char *table_name,\n+                                     duckdb_arrow_schema arrow_schema, duckdb_arrow_array arrow_array,\n+                                     duckdb_arrow_stream *out_stream) {\n+\tauto private_data = new arrow_array_stream_wrapper::PrivateData;\n+\tprivate_data->schema = reinterpret_cast<ArrowSchema *>(arrow_schema);\n+\tprivate_data->array = reinterpret_cast<ArrowArray *>(arrow_array);\n+\tprivate_data->done = false;\n+\n+\tArrowArrayStream *stream = new ArrowArrayStream;\n+\t*out_stream = reinterpret_cast<duckdb_arrow_stream>(stream);\n+\tstream->get_schema = arrow_array_stream_wrapper::GetSchema;\n+\tstream->get_next = arrow_array_stream_wrapper::GetNext;\n+\tstream->get_last_error = arrow_array_stream_wrapper::GetLastError;\n+\tstream->release = arrow_array_stream_wrapper::Release;\n+\tstream->private_data = private_data;\n+\n+\treturn duckdb_arrow_scan(connection, table_name, reinterpret_cast<duckdb_arrow_stream>(stream));\n+}\ndiff --git a/src/main/config.cpp b/src/main/config.cpp\nindex 86719822226a..164930a819d4 100644\n--- a/src/main/config.cpp\n+++ b/src/main/config.cpp\n@@ -92,6 +92,7 @@ static ConfigurationOption internal_options[] = {DUCKDB_GLOBAL(AccessModeSetting\n                                                  DUCKDB_LOCAL(OrderedAggregateThreshold),\n                                                  DUCKDB_GLOBAL(PasswordSetting),\n                                                  DUCKDB_LOCAL(PerfectHashThresholdSetting),\n+                                                 DUCKDB_LOCAL(PivotFilterThreshold),\n                                                  DUCKDB_LOCAL(PivotLimitSetting),\n                                                  DUCKDB_LOCAL(PreserveIdentifierCase),\n                                                  DUCKDB_GLOBAL(PreserveInsertionOrder),\n@@ -109,6 +110,7 @@ static ConfigurationOption internal_options[] = {DUCKDB_GLOBAL(AccessModeSetting\n                                                  DUCKDB_GLOBAL_ALIAS(\"user\", UsernameSetting),\n                                                  DUCKDB_GLOBAL_ALIAS(\"wal_autocheckpoint\", CheckpointThresholdSetting),\n                                                  DUCKDB_GLOBAL_ALIAS(\"worker_threads\", ThreadsSetting),\n+                                                 DUCKDB_GLOBAL(FlushAllocatorSetting),\n                                                  FINAL_SETTING};\n \n vector<ConfigurationOption> DBConfig::GetOptions() {\ndiff --git a/src/main/extension/CMakeLists.txt b/src/main/extension/CMakeLists.txt\nindex a488127eece5..a66386cdbc6f 100644\n--- a/src/main/extension/CMakeLists.txt\n+++ b/src/main/extension/CMakeLists.txt\n@@ -1,57 +1,59 @@\n include_directories(../../../third_party/httplib/)\n \n-# To link out-of-tree extensions into DuckDB and auto-load them on startup, we\n-# do some code generation here: extension_oote_headers.hpp contains the includes\n-# of the OOTE header. extension_oote_loader.hpp contains the call to\n-# ExtensionClass::Load() for loading on startup\n+# To link extensions into DuckDB and auto-load them on startup, we generated an\n+# include file and a loader function based on the `DUCKDB_EXTENSION_NAMES`\n+# parameter.\n \n-# extension_oote_headers.hpp\n-configure_file(extension_oote_headers.hpp.in\n-               \"${PROJECT_BINARY_DIR}/include/extension_oote_headers.hpp\")\n+# generated_extension_headers.hpp\n+configure_file(generated_extension_headers.hpp.in\n+               \"${PROJECT_BINARY_DIR}/include/generated_extension_headers.hpp\")\n if(NOT ${DISABLE_BUILTIN_EXTENSIONS})\n-  foreach(OOTE_NAME IN LISTS DUCKDB_OOT_EXTENSION_NAMES)\n-    set(DUCKDB_EXTENSION_HEADER \"${OOTE_NAME}_extension.hpp\")\n-    file(APPEND \"${PROJECT_BINARY_DIR}/include/extension_oote_headers.hpp\"\n-         \"#include \\\"${DUCKDB_EXTENSION_HEADER}\\\"\\n\")\n+  foreach(EXT_NAME IN LISTS DUCKDB_EXTENSION_NAMES)\n+    string(TOUPPER ${EXT_NAME} EXT_NAME_UPPERCASE)\n+    if(${DUCKDB_EXTENSION_${EXT_NAME_UPPERCASE}_SHOULD_LINK})\n+      set(DUCKDB_EXTENSION_HEADER \"${EXT_NAME}_extension.hpp\")\n+      file(APPEND\n+           \"${PROJECT_BINARY_DIR}/include/generated_extension_headers.hpp\"\n+           \"#include \\\"${DUCKDB_EXTENSION_HEADER}\\\"\\n\")\n+    endif()\n   endforeach()\n endif()\n \n-# extension_oote_loader.hpp\n-set(OOTE_LOADER_NAME_LIST \"\")\n-set(OOTE_LOADER_BODY \"\")\n+# generated_extension_loader.hpp\n+set(EXT_LOADER_NAME_LIST \"\")\n+set(EXT_LOADER_BODY \"\")\n if(NOT ${DISABLE_BUILTIN_EXTENSIONS})\n-  foreach(OOTE_NAME IN LISTS DUCKDB_OOT_EXTENSION_NAMES)\n-    string(TOUPPER ${OOTE_NAME} OOTE_NAME_UPPERCASE)\n-    if(NOT ${DUCKDB_OOT_EXTENSION_${OOTE_NAME_UPPERCASE}_SHOULD_LINK})\n-      continue()\n-    endif()\n-    # Assumes lowercase input!\n-    set(EXTENSION_CLASS ${OOTE_NAME}Extension)\n-    string(SUBSTRING ${OOTE_NAME} 0 1 FIRST_LETTER)\n-    string(TOUPPER ${FIRST_LETTER} FIRST_LETTER)\n-    string(REGEX REPLACE \"^.(.*)\" \"${FIRST_LETTER}\\\\1\" EXTENSION_CLASS\n-                         \"${OOTE_NAME}\")\n+  foreach(EXT_NAME IN LISTS DUCKDB_EXTENSION_NAMES)\n+    string(TOUPPER ${EXT_NAME} EXT_NAME_UPPERCASE)\n+    if(${DUCKDB_EXTENSION_${EXT_NAME_UPPERCASE}_SHOULD_LINK})\n+      # Assumes lowercase input!\n+      set(EXTENSION_CLASS ${EXT_NAME}Extension)\n+      string(SUBSTRING ${EXT_NAME} 0 1 FIRST_LETTER)\n+      string(TOUPPER ${FIRST_LETTER} FIRST_LETTER)\n+      string(REGEX REPLACE \"^.(.*)\" \"${FIRST_LETTER}\\\\1\" EXTENSION_CLASS\n+                           \"${EXT_NAME}\")\n \n-    set(OOTE_LOADER_NAME_LIST \"${OOTE_LOADER_NAME_LIST},\\\"${OOTE_NAME}\\\"\")\n-    set(OOTE_LOADER_BODY\n-        \"${OOTE_LOADER_BODY}\\\n-      if (extension==\\\"${OOTE_NAME}\\\") {\n+      set(EXT_LOADER_NAME_LIST \"${EXT_LOADER_NAME_LIST},\\\"${EXT_NAME}\\\"\")\n+      set(EXT_LOADER_BODY\n+          \"${EXT_LOADER_BODY}\\\n+    if (extension==\\\"${EXT_NAME}\\\") {\n         db.LoadExtension<${EXTENSION_CLASS}Extension>();\n         return true;\n-      }\n-      \")\n+    }\n+\")\n+    endif()\n   endforeach()\n endif()\n \n # trim comma\n-if(NOT ${OOTE_LOADER_NAME_LIST} STREQUAL \"\")\n-  string(SUBSTRING ${OOTE_LOADER_NAME_LIST} 1 -1 OOTE_NAME_VECTOR_INITIALIZER)\n+if(NOT ${EXT_LOADER_NAME_LIST} STREQUAL \"\")\n+  string(SUBSTRING ${EXT_LOADER_NAME_LIST} 1 -1 EXT_NAME_VECTOR_INITIALIZER)\n endif()\n \n-configure_file(extension_oote_loader.hpp.in\n-               \"${PROJECT_BINARY_DIR}/include/extension_oote_loader.hpp\")\n+configure_file(generated_extension_loader.hpp.in\n+               \"${PROJECT_BINARY_DIR}/include/generated_extension_loader.hpp\")\n \n-add_definitions(-DOOTE_HEADERS_AVAILABLE=1)\n+add_definitions(-DGENERATED_EXTENSION_HEADERS=1)\n \n # include generated includes\n include_directories(\"${PROJECT_BINARY_DIR}/include/\")\ndiff --git a/src/main/extension/extension_helper.cpp b/src/main/extension/extension_helper.cpp\nindex 890c0afae5e1..c2b4dbd484fd 100644\n--- a/src/main/extension/extension_helper.cpp\n+++ b/src/main/extension/extension_helper.cpp\n@@ -6,88 +6,85 @@\n #include \"duckdb/main/client_context.hpp\"\n #include \"duckdb/main/database.hpp\"\n \n-#if defined(BUILD_ICU_EXTENSION) && !defined(DISABLE_BUILTIN_EXTENSIONS)\n-#define ICU_STATICALLY_LOADED true\n-#include \"icu_extension.hpp\"\n-#else\n-#define ICU_STATICALLY_LOADED false\n+// Note that c++ preprocessor doesn't have a nice way to clean this up so we need to set the defines we use to false\n+// explicitly when they are undefined\n+#ifndef DUCKDB_EXTENSION_ICU_LINKED\n+#define DUCKDB_EXTENSION_ICU_LINKED false\n #endif\n \n-#if defined(BUILD_PARQUET_EXTENSION) && !defined(DISABLE_BUILTIN_EXTENSIONS)\n-#define PARQUET_STATICALLY_LOADED true\n-#include \"parquet_extension.hpp\"\n-#else\n-#define PARQUET_STATICALLY_LOADED false\n+#ifndef DUCKDB_EXTENSION_PARQUET_LINKED\n+#define DUCKDB_EXTENSION_PARQUET_LINKED false\n #endif\n \n-#if defined(BUILD_TPCH_EXTENSION) && !defined(DISABLE_BUILTIN_EXTENSIONS)\n-#define TPCH_STATICALLY_LOADED true\n-#include \"tpch_extension.hpp\"\n-#else\n-#define TPCH_STATICALLY_LOADED false\n+#ifndef DUCKDB_EXTENSION_TPCH_LINKED\n+#define DUCKDB_EXTENSION_TPCH_LINKED false\n #endif\n \n-#if defined(BUILD_TPCDS_EXTENSION) && !defined(DISABLE_BUILTIN_EXTENSIONS)\n-#define TPCDS_STATICALLY_LOADED true\n-#include \"tpcds_extension.hpp\"\n-#else\n-#define TPCDS_STATICALLY_LOADED false\n+#ifndef DUCKDB_EXTENSION_TPCDS_LINKED\n+#define DUCKDB_EXTENSION_TPCDS_LINKED false\n #endif\n \n-#if defined(BUILD_FTS_EXTENSION) && !defined(DISABLE_BUILTIN_EXTENSIONS)\n-#define FTS_STATICALLY_LOADED true\n-#include \"fts_extension.hpp\"\n-#else\n-#define FTS_STATICALLY_LOADED false\n+#ifndef DUCKDB_EXTENSION_FTS_LINKED\n+#define DUCKDB_EXTENSION_FTS_LINKED false\n #endif\n \n-#if defined(BUILD_HTTPFS_EXTENSION) && !defined(DISABLE_BUILTIN_EXTENSIONS)\n-#define HTTPFS_STATICALLY_LOADED true\n-#include \"httpfs_extension.hpp\"\n-#else\n-#define HTTPFS_STATICALLY_LOADED false\n+#ifndef DUCKDB_EXTENSION_HTTPFS_LINKED\n+#define DUCKDB_EXTENSION_HTTPFS_LINKED false\n #endif\n \n-#if defined(BUILD_VISUALIZER_EXTENSION) && !defined(DISABLE_BUILTIN_EXTENSIONS)\n-#include \"visualizer_extension.hpp\"\n+#ifndef DUCKDB_EXTENSION_JSON_LINKED\n+#define DUCKDB_EXTENSION_JSON_LINKED false\n #endif\n \n-#if defined(BUILD_JSON_EXTENSION) && !defined(DISABLE_BUILTIN_EXTENSIONS)\n-#define JSON_STATICALLY_LOADED true\n-#include \"json_extension.hpp\"\n-#else\n-#define JSON_STATICALLY_LOADED false\n+#ifndef DUCKDB_EXTENSION_JEMALLOC_LINKED\n+#define DUCKDB_EXTENSION_JEMALLOC_LINKED false\n #endif\n \n-#if defined(BUILD_JEMALLOC_EXTENSION) && !defined(DISABLE_BUILTIN_EXTENSIONS)\n-#define JEMALLOC_STATICALLY_LOADED true\n-#include \"jemalloc_extension.hpp\"\n+#ifndef DUCKDB_EXTENSION_AUTOCOMPLETE_LINKED\n+#define DUCKDB_EXTENSION_AUTOCOMPLETE_LINKED false\n+#endif\n+\n+// Load the generated header file containing our list of extension headers\n+#if defined(GENERATED_EXTENSION_HEADERS) && GENERATED_EXTENSION_HEADERS && !defined(DUCKDB_AMALGAMATION)\n+#include \"generated_extension_loader.hpp\"\n #else\n-#define JEMALLOC_STATICALLY_LOADED false\n+// TODO: rewrite package_build.py to allow also loading out-of-tree extensions in non-cmake builds, after that\n+//\t\t these can be removed\n+#if DUCKDB_EXTENSION_ICU_LINKED\n+#include \"icu_extension.hpp\"\n #endif\n \n-#if defined(BUILD_EXCEL_EXTENSION) && !defined(DISABLE_BUILTIN_EXTENSIONS)\n-#include \"excel_extension.hpp\"\n+#if DUCKDB_EXTENSION_PARQUET_LINKED\n+#include \"parquet_extension.hpp\"\n #endif\n \n-#if defined(BUILD_SQLSMITH_EXTENSION) && !defined(DISABLE_BUILTIN_EXTENSIONS)\n-#include \"sqlsmith_extension.hpp\"\n+#if DUCKDB_EXTENSION_TPCH_LINKED\n+#include \"tpch_extension.hpp\"\n #endif\n \n-#if defined(BUILD_INET_EXTENSION) && !defined(DISABLE_BUILTIN_EXTENSIONS)\n-#include \"inet_extension.hpp\"\n+#if DUCKDB_EXTENSION_TPCDS_LINKED\n+#include \"tpcds_extension.hpp\"\n #endif\n \n-#if defined(BUILD_AUTOCOMPLETE_EXTENSION) && !defined(DISABLE_BUILTIN_EXTENSIONS)\n-#define AUTOCOMPLETE_STATICALLY_LOADED true\n-#include \"autocomplete_extension.hpp\"\n-#else\n-#define AUTOCOMPLETE_STATICALLY_LOADED false\n+#if DUCKDB_EXTENSION_FTS_LINKED\n+#include \"fts_extension.hpp\"\n #endif\n \n-// Load the generated header file containing our list of extension headers\n-#if defined(OOTE_HEADERS_AVAILABLE) && OOTE_HEADERS_AVAILABLE\n-#include \"extension_oote_loader.hpp\"\n+#if DUCKDB_EXTENSION_HTTPFS_LINKED\n+#include \"httpfs_extension.hpp\"\n+#endif\n+\n+#if DUCKDB_EXTENSION_JSON_LINKED\n+#include \"json_extension.hpp\"\n+#endif\n+\n+#if DUCKDB_EXTENSION_JEMALLOC_LINKED\n+#include \"jemalloc_extension.hpp\"\n+#endif\n+\n+#if DUCKDB_EXTENSION_AUTOCOMPLETE_LINKED\n+#include \"autocomplete_extension.hpp\"\n+#endif\n #endif\n \n namespace duckdb {\n@@ -96,15 +93,15 @@ namespace duckdb {\n // Default Extensions\n //===--------------------------------------------------------------------===//\n static DefaultExtension internal_extensions[] = {\n-    {\"icu\", \"Adds support for time zones and collations using the ICU library\", ICU_STATICALLY_LOADED},\n-    {\"parquet\", \"Adds support for reading and writing parquet files\", PARQUET_STATICALLY_LOADED},\n-    {\"tpch\", \"Adds TPC-H data generation and query support\", TPCH_STATICALLY_LOADED},\n-    {\"tpcds\", \"Adds TPC-DS data generation and query support\", TPCDS_STATICALLY_LOADED},\n-    {\"fts\", \"Adds support for Full-Text Search Indexes\", FTS_STATICALLY_LOADED},\n-    {\"httpfs\", \"Adds support for reading and writing files over a HTTP(S) connection\", HTTPFS_STATICALLY_LOADED},\n-    {\"json\", \"Adds support for JSON operations\", JSON_STATICALLY_LOADED},\n-    {\"jemalloc\", \"Overwrites system allocator with JEMalloc\", JEMALLOC_STATICALLY_LOADED},\n-    {\"autocomplete\", \"Add supports for autocomplete in the shell\", AUTOCOMPLETE_STATICALLY_LOADED},\n+    {\"icu\", \"Adds support for time zones and collations using the ICU library\", DUCKDB_EXTENSION_ICU_LINKED},\n+    {\"parquet\", \"Adds support for reading and writing parquet files\", DUCKDB_EXTENSION_PARQUET_LINKED},\n+    {\"tpch\", \"Adds TPC-H data generation and query support\", DUCKDB_EXTENSION_TPCH_LINKED},\n+    {\"tpcds\", \"Adds TPC-DS data generation and query support\", DUCKDB_EXTENSION_TPCDS_LINKED},\n+    {\"fts\", \"Adds support for Full-Text Search Indexes\", DUCKDB_EXTENSION_FTS_LINKED},\n+    {\"httpfs\", \"Adds support for reading and writing files over a HTTP(S) connection\", DUCKDB_EXTENSION_HTTPFS_LINKED},\n+    {\"json\", \"Adds support for JSON operations\", DUCKDB_EXTENSION_JSON_LINKED},\n+    {\"jemalloc\", \"Overwrites system allocator with JEMalloc\", DUCKDB_EXTENSION_JEMALLOC_LINKED},\n+    {\"autocomplete\", \"Add supports for autocomplete in the shell\", DUCKDB_EXTENSION_AUTOCOMPLETE_LINKED},\n     {\"motherduck\", \"Enables motherduck integration with the system\", false},\n     {\"sqlite_scanner\", \"Adds support for reading SQLite database files\", false},\n     {\"postgres_scanner\", \"Adds support for reading from a Postgres database\", false},\n@@ -143,15 +140,20 @@ bool ExtensionHelper::AllowAutoInstall(const string &extension) {\n // Load Statically Compiled Extension\n //===--------------------------------------------------------------------===//\n void ExtensionHelper::LoadAllExtensions(DuckDB &db) {\n+\t// The in-tree extensions that we check. Non-cmake builds are currently limited to these for static linking\n+\t// TODO: rewrite package_build.py to allow also loading out-of-tree extensions in non-cmake builds, after that\n+\t//\t\t these can be removed\n \tunordered_set<string> extensions {\"parquet\", \"icu\",   \"tpch\",     \"tpcds\", \"fts\",      \"httpfs\",      \"visualizer\",\n \t                                  \"json\",    \"excel\", \"sqlsmith\", \"inet\",  \"jemalloc\", \"autocomplete\"};\n \tfor (auto &ext : extensions) {\n \t\tLoadExtensionInternal(db, ext, true);\n \t}\n \n-#if defined(OOTE_HEADERS_AVAILABLE) && OOTE_HEADERS_AVAILABLE\n-\tfor (auto &ext : OOT_EXTENSIONS) {\n-\t\tLoadExtensionInternal(db, ext, true);\n+#if defined(GENERATED_EXTENSION_HEADERS) && GENERATED_EXTENSION_HEADERS\n+\tfor (auto &ext : LINKED_EXTENSIONS) {\n+\t\tif (extensions.find(ext) != extensions.end()) {\n+\t\t\tLoadExtensionInternal(db, ext, true);\n+\t\t}\n \t}\n #endif\n }\n@@ -178,105 +180,110 @@ ExtensionLoadResult ExtensionHelper::LoadExtensionInternal(DuckDB &db, const std\n \t\treturn ExtensionLoadResult::LOADED_EXTENSION;\n \t}\n #endif\n+\n+\t// This is the main extension loading mechanism that loads the extension that are statically linked.\n+#if defined(GENERATED_EXTENSION_HEADERS) && GENERATED_EXTENSION_HEADERS\n+\tif (TryLoadLinkedExtension(db, extension)) {\n+\t\treturn ExtensionLoadResult::LOADED_EXTENSION;\n+\t} else {\n+\t\treturn ExtensionLoadResult::NOT_LOADED;\n+\t}\n+#endif\n+\n+\t// This is the fallback to the \"old\" extension loading mechanism for non-cmake builds\n+\t// TODO: rewrite package_build.py to allow also loading out-of-tree extensions in non-cmake builds\n \tif (extension == \"parquet\") {\n-#if PARQUET_STATICALLY_LOADED\n+#if DUCKDB_EXTENSION_PARQUET_LINKED\n \t\tdb.LoadExtension<ParquetExtension>();\n #else\n \t\t// parquet extension required but not build: skip this test\n \t\treturn ExtensionLoadResult::NOT_LOADED;\n #endif\n \t} else if (extension == \"icu\") {\n-#if ICU_STATICALLY_LOADED\n+#if DUCKDB_EXTENSION_ICU_LINKED\n \t\tdb.LoadExtension<IcuExtension>();\n #else\n \t\t// icu extension required but not build: skip this test\n \t\treturn ExtensionLoadResult::NOT_LOADED;\n #endif\n \t} else if (extension == \"tpch\") {\n-#if TPCH_STATICALLY_LOADED\n+#if DUCKDB_EXTENSION_TPCH_LINKED\n \t\tdb.LoadExtension<TpchExtension>();\n #else\n \t\t// icu extension required but not build: skip this test\n \t\treturn ExtensionLoadResult::NOT_LOADED;\n #endif\n \t} else if (extension == \"tpcds\") {\n-#if TPCDS_STATICALLY_LOADED\n+#if DUCKDB_EXTENSION_TPCDS_LINKED\n \t\tdb.LoadExtension<TpcdsExtension>();\n #else\n \t\t// icu extension required but not build: skip this test\n \t\treturn ExtensionLoadResult::NOT_LOADED;\n #endif\n \t} else if (extension == \"fts\") {\n-#if FTS_STATICALLY_LOADED\n-\t\tdb.LoadExtension<FtsExtension>();\n+#if DUCKDB_EXTENSION_FTS_LINKED\n+//\t\tdb.LoadExtension<FtsExtension>();\n #else\n \t\t// fts extension required but not build: skip this test\n \t\treturn ExtensionLoadResult::NOT_LOADED;\n #endif\n \t} else if (extension == \"httpfs\") {\n-#if HTTPFS_STATICALLY_LOADED\n+#if DUCKDB_EXTENSION_HTTPFS_LINKED\n \t\tdb.LoadExtension<HttpfsExtension>();\n #else\n \t\treturn ExtensionLoadResult::NOT_LOADED;\n #endif\n \t} else if (extension == \"visualizer\") {\n-#if defined(BUILD_VISUALIZER_EXTENSION) && !defined(DISABLE_BUILTIN_EXTENSIONS)\n+#if DUCKDB_EXTENSION_VISUALIZER_LINKED\n \t\tdb.LoadExtension<VisualizerExtension>();\n #else\n \t\t// visualizer extension required but not build: skip this test\n \t\treturn ExtensionLoadResult::NOT_LOADED;\n #endif\n \t} else if (extension == \"json\") {\n-#if JSON_STATICALLY_LOADED\n+#if DUCKDB_EXTENSION_JSON_LINKED\n \t\tdb.LoadExtension<JsonExtension>();\n #else\n \t\t// json extension required but not build: skip this test\n \t\treturn ExtensionLoadResult::NOT_LOADED;\n #endif\n \t} else if (extension == \"excel\") {\n-#if defined(BUILD_EXCEL_EXTENSION) && !defined(DISABLE_BUILTIN_EXTENSIONS)\n+#if DUCKDB_EXTENSION_EXCEL_LINKED\n \t\tdb.LoadExtension<ExcelExtension>();\n #else\n \t\t// excel extension required but not build: skip this test\n \t\treturn ExtensionLoadResult::NOT_LOADED;\n #endif\n \t} else if (extension == \"sqlsmith\") {\n-#if defined(BUILD_SQLSMITH_EXTENSION) && !defined(DISABLE_BUILTIN_EXTENSIONS)\n+#if DUCKDB_EXTENSION_SQLSMITH_LINKED\n \t\tdb.LoadExtension<SqlsmithExtension>();\n #else\n \t\t// excel extension required but not build: skip this test\n \t\treturn ExtensionLoadResult::NOT_LOADED;\n #endif\n \t} else if (extension == \"jemalloc\") {\n-#if defined(BUILD_JEMALLOC_EXTENSION) && !defined(DISABLE_BUILTIN_EXTENSIONS)\n+#if DUCKDB_EXTENSION_JEMALLOC_LINKED\n \t\tdb.LoadExtension<JemallocExtension>();\n #else\n \t\t// jemalloc extension required but not build: skip this test\n \t\treturn ExtensionLoadResult::NOT_LOADED;\n #endif\n \t} else if (extension == \"autocomplete\") {\n-#if defined(BUILD_AUTOCOMPLETE_EXTENSION) && !defined(DISABLE_BUILTIN_EXTENSIONS)\n+#if DUCKDB_EXTENSION_AUTOCOMPLETE_LINKED\n \t\tdb.LoadExtension<AutocompleteExtension>();\n #else\n \t\t// autocomplete extension required but not build: skip this test\n \t\treturn ExtensionLoadResult::NOT_LOADED;\n #endif\n \t} else if (extension == \"inet\") {\n-#if defined(BUILD_INET_EXTENSION) && !defined(DISABLE_BUILTIN_EXTENSIONS)\n+#if DUCKDB_EXTENSION_INET_LINKED\n \t\tdb.LoadExtension<InetExtension>();\n #else\n \t\t// inet extension required but not build: skip this test\n \t\treturn ExtensionLoadResult::NOT_LOADED;\n #endif\n-\t} else {\n-\n-#if defined(OOTE_HEADERS_AVAILABLE) && OOTE_HEADERS_AVAILABLE\n-\t\tif (TryLoadLinkedExtension(db, extension)) {\n-\t\t\treturn ExtensionLoadResult::LOADED_EXTENSION;\n-\t\t}\n-#endif\n-\t\treturn ExtensionLoadResult::EXTENSION_UNKNOWN;\n \t}\n+\n \treturn ExtensionLoadResult::LOADED_EXTENSION;\n }\n \ndiff --git a/src/main/extension/extension_oote_headers.hpp.in b/src/main/extension/generated_extension_headers.hpp.in\nsimilarity index 100%\nrename from src/main/extension/extension_oote_headers.hpp.in\nrename to src/main/extension/generated_extension_headers.hpp.in\ndiff --git a/src/main/extension/extension_oote_loader.hpp.in b/src/main/extension/generated_extension_loader.hpp.in\nsimilarity index 65%\nrename from src/main/extension/extension_oote_loader.hpp.in\nrename to src/main/extension/generated_extension_loader.hpp.in\nindex 2dbc0186c4ba..2b4c95dfa267 100644\n--- a/src/main/extension/extension_oote_loader.hpp.in\n+++ b/src/main/extension/generated_extension_loader.hpp.in\n@@ -1,16 +1,15 @@\n #pragma once\n-#include \"extension_oote_headers.hpp\"\n+#include \"generated_extension_headers.hpp\"\n \n namespace duckdb{\n \n //! Looks through the CMake-generated list of extensions that are linked into DuckDB currently to try load <extension>\n bool TryLoadLinkedExtension(DuckDB &db, const std::string &extension) {\n \n-${OOTE_LOADER_BODY}\n-\n+${EXT_LOADER_BODY}\n     return false;\n }\n \n-vector<string> OOT_EXTENSIONS = {${OOTE_NAME_VECTOR_INITIALIZER}};\n+vector<string> LINKED_EXTENSIONS = {${EXT_NAME_VECTOR_INITIALIZER}};\n \n }\n\\ No newline at end of file\ndiff --git a/src/main/settings/settings.cpp b/src/main/settings/settings.cpp\nindex 34e773d945c4..2e5d036c10c5 100644\n--- a/src/main/settings/settings.cpp\n+++ b/src/main/settings/settings.cpp\n@@ -2,18 +2,18 @@\n \n #include \"duckdb/catalog/catalog_search_path.hpp\"\n #include \"duckdb/common/string_util.hpp\"\n+#include \"duckdb/main/attached_database.hpp\"\n #include \"duckdb/main/client_context.hpp\"\n #include \"duckdb/main/client_data.hpp\"\n #include \"duckdb/main/config.hpp\"\n+#include \"duckdb/main/database.hpp\"\n+#include \"duckdb/main/database_manager.hpp\"\n #include \"duckdb/main/query_profiler.hpp\"\n #include \"duckdb/parallel/task_scheduler.hpp\"\n #include \"duckdb/parser/parser.hpp\"\n #include \"duckdb/planner/expression_binder.hpp\"\n #include \"duckdb/storage/buffer_manager.hpp\"\n #include \"duckdb/storage/storage_manager.hpp\"\n-#include \"duckdb/main/database_manager.hpp\"\n-#include \"duckdb/main/attached_database.hpp\"\n-#include \"duckdb/main/database.hpp\"\n \n namespace duckdb {\n \n@@ -112,7 +112,6 @@ Value DebugCheckpointAbort::GetSetting(ClientContext &context) {\n //===--------------------------------------------------------------------===//\n // Debug Force External\n //===--------------------------------------------------------------------===//\n-\n void DebugForceExternal::ResetLocal(ClientContext &context) {\n \tClientConfig::GetConfig(context).force_external = ClientConfig().force_external;\n }\n@@ -128,7 +127,6 @@ Value DebugForceExternal::GetSetting(ClientContext &context) {\n //===--------------------------------------------------------------------===//\n // Debug Force NoCrossProduct\n //===--------------------------------------------------------------------===//\n-\n void DebugForceNoCrossProduct::ResetLocal(ClientContext &context) {\n \tClientConfig::GetConfig(context).force_no_cross_product = ClientConfig().force_no_cross_product;\n }\n@@ -144,7 +142,6 @@ Value DebugForceNoCrossProduct::GetSetting(ClientContext &context) {\n //===--------------------------------------------------------------------===//\n // Ordered Aggregate Threshold\n //===--------------------------------------------------------------------===//\n-\n void OrderedAggregateThreshold::ResetLocal(ClientContext &context) {\n \tClientConfig::GetConfig(context).ordered_aggregate_threshold = ClientConfig().ordered_aggregate_threshold;\n }\n@@ -478,7 +475,6 @@ Value EnableProfilingSetting::GetSetting(ClientContext &context) {\n //===--------------------------------------------------------------------===//\n // Custom Extension Repository\n //===--------------------------------------------------------------------===//\n-\n void CustomExtensionRepository::ResetLocal(ClientContext &context) {\n \tClientConfig::GetConfig(context).custom_extension_repo = ClientConfig().custom_extension_repo;\n }\n@@ -494,7 +490,6 @@ Value CustomExtensionRepository::GetSetting(ClientContext &context) {\n //===--------------------------------------------------------------------===//\n // Enable Progress Bar\n //===--------------------------------------------------------------------===//\n-\n void EnableProgressBarSetting::ResetLocal(ClientContext &context) {\n \tauto &config = ClientConfig::GetConfig(context);\n \tProgressBar::SystemOverrideCheck(config);\n@@ -548,7 +543,6 @@ Value ExperimentalParallelCSVSetting::GetSetting(ClientContext &context) {\n //===--------------------------------------------------------------------===//\n // Explain Output\n //===--------------------------------------------------------------------===//\n-\n void ExplainOutputSetting::ResetLocal(ClientContext &context) {\n \tClientConfig::GetConfig(context).explain_output_type = ClientConfig().explain_output_type;\n }\n@@ -686,7 +680,6 @@ Value ForceBitpackingModeSetting::GetSetting(ClientContext &context) {\n //===--------------------------------------------------------------------===//\n // Home Directory\n //===--------------------------------------------------------------------===//\n-\n void HomeDirectorySetting::ResetLocal(ClientContext &context) {\n \tClientConfig::GetConfig(context).home_directory = ClientConfig().home_directory;\n }\n@@ -780,7 +773,6 @@ Value ImmediateTransactionModeSetting::GetSetting(ClientContext &context) {\n //===--------------------------------------------------------------------===//\n // Maximum Expression Depth\n //===--------------------------------------------------------------------===//\n-\n void MaximumExpressionDepthSetting::ResetLocal(ClientContext &context) {\n \tClientConfig::GetConfig(context).max_expression_depth = ClientConfig().max_expression_depth;\n }\n@@ -830,7 +822,6 @@ Value PasswordSetting::GetSetting(ClientContext &context) {\n //===--------------------------------------------------------------------===//\n // Perfect Hash Threshold\n //===--------------------------------------------------------------------===//\n-\n void PerfectHashThresholdSetting::ResetLocal(ClientContext &context) {\n \tClientConfig::GetConfig(context).perfect_ht_threshold = ClientConfig().perfect_ht_threshold;\n }\n@@ -848,9 +839,23 @@ Value PerfectHashThresholdSetting::GetSetting(ClientContext &context) {\n }\n \n //===--------------------------------------------------------------------===//\n-// Pivot Limit\n+// Pivot Filter Threshold\n //===--------------------------------------------------------------------===//\n+void PivotFilterThreshold::ResetLocal(ClientContext &context) {\n+\tClientConfig::GetConfig(context).pivot_filter_threshold = ClientConfig().pivot_filter_threshold;\n+}\n+\n+void PivotFilterThreshold::SetLocal(ClientContext &context, const Value &input) {\n+\tClientConfig::GetConfig(context).pivot_filter_threshold = input.GetValue<uint64_t>();\n+}\n+\n+Value PivotFilterThreshold::GetSetting(ClientContext &context) {\n+\treturn Value::BIGINT(ClientConfig::GetConfig(context).pivot_filter_threshold);\n+}\n \n+//===--------------------------------------------------------------------===//\n+// Pivot Limit\n+//===--------------------------------------------------------------------===//\n void PivotLimitSetting::ResetLocal(ClientContext &context) {\n \tClientConfig::GetConfig(context).pivot_limit = ClientConfig().pivot_limit;\n }\n@@ -866,7 +871,6 @@ Value PivotLimitSetting::GetSetting(ClientContext &context) {\n //===--------------------------------------------------------------------===//\n // PreserveIdentifierCase\n //===--------------------------------------------------------------------===//\n-\n void PreserveIdentifierCase::ResetLocal(ClientContext &context) {\n \tClientConfig::GetConfig(context).preserve_identifier_case = ClientConfig().preserve_identifier_case;\n }\n@@ -917,7 +921,6 @@ Value ExportLargeBufferArrow::GetSetting(ClientContext &context) {\n //===--------------------------------------------------------------------===//\n // Profiler History Size\n //===--------------------------------------------------------------------===//\n-\n void ProfilerHistorySize::ResetLocal(ClientContext &context) {\n \tauto &client_data = ClientData::Get(context);\n \tclient_data.query_profiler_history->ResetProfilerHistorySize();\n@@ -939,7 +942,6 @@ Value ProfilerHistorySize::GetSetting(ClientContext &context) {\n //===--------------------------------------------------------------------===//\n // Profile Output\n //===--------------------------------------------------------------------===//\n-\n void ProfileOutputSetting::ResetLocal(ClientContext &context) {\n \tClientConfig::GetConfig(context).profiler_save_location = ClientConfig().profiler_save_location;\n }\n@@ -958,7 +960,6 @@ Value ProfileOutputSetting::GetSetting(ClientContext &context) {\n //===--------------------------------------------------------------------===//\n // Profiling Mode\n //===--------------------------------------------------------------------===//\n-\n void ProfilingModeSetting::ResetLocal(ClientContext &context) {\n \tClientConfig::GetConfig(context).enable_profiler = ClientConfig().enable_profiler;\n \tClientConfig::GetConfig(context).enable_detailed_profiling = ClientConfig().enable_detailed_profiling;\n@@ -992,7 +993,6 @@ Value ProfilingModeSetting::GetSetting(ClientContext &context) {\n //===--------------------------------------------------------------------===//\n // Progress Bar Time\n //===--------------------------------------------------------------------===//\n-\n void ProgressBarTimeSetting::ResetLocal(ClientContext &context) {\n \tauto &config = ClientConfig::GetConfig(context);\n \tProgressBar::SystemOverrideCheck(config);\n@@ -1112,4 +1112,26 @@ Value UsernameSetting::GetSetting(ClientContext &context) {\n \treturn Value();\n }\n \n+//===--------------------------------------------------------------------===//\n+// Allocator Flush Threshold\n+//===--------------------------------------------------------------------===//\n+void FlushAllocatorSetting::SetGlobal(DatabaseInstance *db, DBConfig &config, const Value &input) {\n+\tconfig.options.allocator_flush_threshold = DBConfig::ParseMemoryLimit(input.ToString());\n+\tif (db) {\n+\t\tTaskScheduler::GetScheduler(*db).SetAllocatorFlushTreshold(config.options.allocator_flush_threshold);\n+\t}\n+}\n+\n+void FlushAllocatorSetting::ResetGlobal(DatabaseInstance *db, DBConfig &config) {\n+\tconfig.options.allocator_flush_threshold = DBConfig().options.allocator_flush_threshold;\n+\tif (db) {\n+\t\tTaskScheduler::GetScheduler(*db).SetAllocatorFlushTreshold(config.options.allocator_flush_threshold);\n+\t}\n+}\n+\n+Value FlushAllocatorSetting::GetSetting(ClientContext &context) {\n+\tauto &config = DBConfig::GetConfig(context);\n+\treturn Value(StringUtil::BytesToHumanReadableString(config.options.allocator_flush_threshold));\n+}\n+\n } // namespace duckdb\ndiff --git a/src/optimizer/CMakeLists.txt b/src/optimizer/CMakeLists.txt\nindex 65553be0f793..53f57e1c168d 100644\n--- a/src/optimizer/CMakeLists.txt\n+++ b/src/optimizer/CMakeLists.txt\n@@ -1,14 +1,17 @@\n-add_subdirectory(matcher)\n+add_subdirectory(compressed_materialization)\n add_subdirectory(join_order)\n-add_subdirectory(pushdown)\n+add_subdirectory(matcher)\n add_subdirectory(pullup)\n+add_subdirectory(pushdown)\n add_subdirectory(rule)\n add_subdirectory(statistics)\n \n add_library_unity(\n   duckdb_optimizer\n   OBJECT\n+  column_binding_replacer.cpp\n   common_aggregate_optimizer.cpp\n+  compressed_materialization.cpp\n   cse_optimizer.cpp\n   deliminator.cpp\n   unnest_rewriter.cpp\n@@ -21,6 +24,7 @@ add_library_unity(\n   optimizer.cpp\n   expression_rewriter.cpp\n   regex_range_filter.cpp\n+  remove_duplicate_groups.cpp\n   remove_unused_columns.cpp\n   statistics_propagator.cpp\n   topn_optimizer.cpp)\ndiff --git a/src/optimizer/column_binding_replacer.cpp b/src/optimizer/column_binding_replacer.cpp\nnew file mode 100644\nindex 000000000000..2450b9267bff\n--- /dev/null\n+++ b/src/optimizer/column_binding_replacer.cpp\n@@ -0,0 +1,43 @@\n+#include \"duckdb/optimizer/column_binding_replacer.hpp\"\n+\n+#include \"duckdb/planner/expression/bound_columnref_expression.hpp\"\n+\n+namespace duckdb {\n+\n+ReplacementBinding::ReplacementBinding(ColumnBinding old_binding, ColumnBinding new_binding)\n+    : old_binding(old_binding), new_binding(new_binding), replace_type(false) {\n+}\n+\n+ReplacementBinding::ReplacementBinding(ColumnBinding old_binding, ColumnBinding new_binding, LogicalType new_type)\n+    : old_binding(old_binding), new_binding(new_binding), replace_type(true), new_type(std::move(new_type)) {\n+}\n+\n+ColumnBindingReplacer::ColumnBindingReplacer() {\n+}\n+\n+void ColumnBindingReplacer::VisitOperator(LogicalOperator &op) {\n+\tif (stop_operator && stop_operator.get() == &op) {\n+\t\treturn;\n+\t}\n+\tVisitOperatorChildren(op);\n+\tVisitOperatorExpressions(op);\n+}\n+\n+void ColumnBindingReplacer::VisitExpression(unique_ptr<Expression> *expression) {\n+\tauto &expr = *expression;\n+\tif (expr->expression_class == ExpressionClass::BOUND_COLUMN_REF) {\n+\t\tauto &bound_column_ref = expr->Cast<BoundColumnRefExpression>();\n+\t\tfor (const auto &replace_binding : replacement_bindings) {\n+\t\t\tif (bound_column_ref.binding == replace_binding.old_binding) {\n+\t\t\t\tbound_column_ref.binding = replace_binding.new_binding;\n+\t\t\t\tif (replace_binding.replace_type) {\n+\t\t\t\t\tbound_column_ref.return_type = replace_binding.new_type;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tVisitExpressionChildren(**expression);\n+}\n+\n+} // namespace duckdb\ndiff --git a/src/optimizer/column_lifetime_analyzer.cpp b/src/optimizer/column_lifetime_analyzer.cpp\nindex 5fd8464ca33c..787b7619eb79 100644\n--- a/src/optimizer/column_lifetime_analyzer.cpp\n+++ b/src/optimizer/column_lifetime_analyzer.cpp\n@@ -1,7 +1,5 @@\n #include \"duckdb/optimizer/column_lifetime_optimizer.hpp\"\n-\n #include \"duckdb/planner/expression/bound_columnref_expression.hpp\"\n-\n #include \"duckdb/planner/operator/logical_comparison_join.hpp\"\n #include \"duckdb/planner/operator/logical_delim_join.hpp\"\n #include \"duckdb/planner/operator/logical_filter.hpp\"\n@@ -20,6 +18,7 @@ void ColumnLifetimeAnalyzer::ExtractUnusedColumnBindings(vector<ColumnBinding> b\n void ColumnLifetimeAnalyzer::GenerateProjectionMap(vector<ColumnBinding> bindings,\n                                                    column_binding_set_t &unused_bindings,\n                                                    vector<idx_t> &projection_map) {\n+\tprojection_map.clear();\n \tif (unused_bindings.empty()) {\n \t\treturn;\n \t}\ndiff --git a/src/optimizer/compressed_materialization.cpp b/src/optimizer/compressed_materialization.cpp\nnew file mode 100644\nindex 000000000000..49eccd95174f\n--- /dev/null\n+++ b/src/optimizer/compressed_materialization.cpp\n@@ -0,0 +1,478 @@\n+#include \"duckdb/optimizer/compressed_materialization.hpp\"\n+\n+#include \"duckdb/execution/expression_executor.hpp\"\n+#include \"duckdb/function/scalar/operators.hpp\"\n+#include \"duckdb/optimizer/column_binding_replacer.hpp\"\n+#include \"duckdb/optimizer/topn_optimizer.hpp\"\n+#include \"duckdb/planner/binder.hpp\"\n+#include \"duckdb/planner/expression/bound_constant_expression.hpp\"\n+#include \"duckdb/planner/expression/bound_function_expression.hpp\"\n+#include \"duckdb/planner/expression_iterator.hpp\"\n+#include \"duckdb/planner/operator/logical_comparison_join.hpp\"\n+#include \"duckdb/planner/operator/logical_delim_join.hpp\"\n+#include \"duckdb/planner/operator/logical_projection.hpp\"\n+\n+namespace duckdb {\n+\n+CMChildInfo::CMChildInfo(LogicalOperator &op, const column_binding_set_t &referenced_bindings)\n+    : bindings_before(op.GetColumnBindings()), types(op.types), can_compress(bindings_before.size(), true) {\n+\tfor (const auto &binding : referenced_bindings) {\n+\t\tfor (idx_t binding_idx = 0; binding_idx < bindings_before.size(); binding_idx++) {\n+\t\t\tif (binding == bindings_before[binding_idx]) {\n+\t\t\t\tcan_compress[binding_idx] = false;\n+\t\t\t}\n+\t\t}\n+\t}\n+}\n+\n+CMBindingInfo::CMBindingInfo(ColumnBinding binding_p, const LogicalType &type_p)\n+    : binding(binding_p), type(type_p), needs_decompression(false) {\n+}\n+\n+CompressedMaterializationInfo::CompressedMaterializationInfo(LogicalOperator &op, vector<idx_t> &&child_idxs_p,\n+                                                             const column_binding_set_t &referenced_bindings)\n+    : child_idxs(child_idxs_p) {\n+\tchild_info.reserve(child_idxs.size());\n+\tfor (const auto &child_idx : child_idxs) {\n+\t\tchild_info.emplace_back(*op.children[child_idx], referenced_bindings);\n+\t}\n+}\n+\n+CompressExpression::CompressExpression(unique_ptr<Expression> expression_p, unique_ptr<BaseStatistics> stats_p)\n+    : expression(std::move(expression_p)), stats(std::move(stats_p)) {\n+}\n+\n+CompressedMaterialization::CompressedMaterialization(ClientContext &context_p, Binder &binder_p,\n+                                                     statistics_map_t &&statistics_map_p)\n+    : context(context_p), binder(binder_p), statistics_map(std::move(statistics_map_p)) {\n+}\n+\n+void CompressedMaterialization::GetReferencedBindings(const Expression &expression,\n+                                                      column_binding_set_t &referenced_bindings) {\n+\tif (expression.GetExpressionType() == ExpressionType::BOUND_COLUMN_REF) {\n+\t\tconst auto &col_ref = expression.Cast<BoundColumnRefExpression>();\n+\t\treferenced_bindings.insert(col_ref.binding);\n+\t} else {\n+\t\tExpressionIterator::EnumerateChildren(\n+\t\t    expression, [&](const Expression &child) { GetReferencedBindings(child, referenced_bindings); });\n+\t}\n+}\n+\n+void CompressedMaterialization::UpdateBindingInfo(CompressedMaterializationInfo &info, const ColumnBinding &binding,\n+                                                  bool needs_decompression) {\n+\tauto &binding_map = info.binding_map;\n+\tauto binding_it = binding_map.find(binding);\n+\tif (binding_it == binding_map.end()) {\n+\t\treturn;\n+\t}\n+\n+\tauto &binding_info = binding_it->second;\n+\tbinding_info.needs_decompression = needs_decompression;\n+\tauto stats_it = statistics_map.find(binding);\n+\tif (stats_it != statistics_map.end()) {\n+\t\tbinding_info.stats = statistics_map[binding]->ToUnique();\n+\t}\n+}\n+\n+void CompressedMaterialization::Compress(unique_ptr<LogicalOperator> &op) {\n+\troot = op.get();\n+\troot->ResolveOperatorTypes();\n+\n+\tCompressInternal(op);\n+}\n+\n+void CompressedMaterialization::CompressInternal(unique_ptr<LogicalOperator> &op) {\n+\tif (TopN::CanOptimize(*op)) { // Let's not mess with the TopN optimizer\n+\t\tCompressInternal(op->children[0]->children[0]);\n+\t\treturn;\n+\t}\n+\n+\tfor (auto &child : op->children) {\n+\t\tCompressInternal(child);\n+\t}\n+\n+\tswitch (op->type) {\n+\tcase LogicalOperatorType::LOGICAL_AGGREGATE_AND_GROUP_BY:\n+\t\tCompressAggregate(op);\n+\t\tbreak;\n+\tcase LogicalOperatorType::LOGICAL_DISTINCT:\n+\t\tCompressDistinct(op);\n+\t\tbreak;\n+\tcase LogicalOperatorType::LOGICAL_ORDER_BY:\n+\t\tCompressOrder(op);\n+\t\tbreak;\n+\tdefault:\n+\t\treturn;\n+\t}\n+}\n+\n+void CompressedMaterialization::CreateProjections(unique_ptr<LogicalOperator> &op,\n+                                                  CompressedMaterializationInfo &info) {\n+\tauto &materializing_op = *op;\n+\n+\tbool compressed_anything = false;\n+\tfor (idx_t i = 0; i < info.child_idxs.size(); i++) {\n+\t\tauto &child_info = info.child_info[i];\n+\t\tvector<unique_ptr<CompressExpression>> compress_exprs;\n+\t\tif (TryCompressChild(info, child_info, compress_exprs)) {\n+\t\t\t// We can compress: Create a projection on top of the child operator\n+\t\t\tconst auto child_idx = info.child_idxs[i];\n+\t\t\tCreateCompressProjection(materializing_op.children[child_idx], std::move(compress_exprs), info, child_info);\n+\t\t\tcompressed_anything = true;\n+\t\t}\n+\t}\n+\n+\tif (compressed_anything) {\n+\t\tCreateDecompressProjection(op, info);\n+\t}\n+}\n+\n+bool CompressedMaterialization::TryCompressChild(CompressedMaterializationInfo &info, const CMChildInfo &child_info,\n+                                                 vector<unique_ptr<CompressExpression>> &compress_exprs) {\n+\t// Try to compress each of the column bindings of the child\n+\tbool compressed_anything = false;\n+\tfor (idx_t child_i = 0; child_i < child_info.bindings_before.size(); child_i++) {\n+\t\tconst auto child_binding = child_info.bindings_before[child_i];\n+\t\tconst auto &child_type = child_info.types[child_i];\n+\t\tconst auto &can_compress = child_info.can_compress[child_i];\n+\t\tauto compress_expr = GetCompressExpression(child_binding, child_type, can_compress);\n+\t\tbool compressed = false;\n+\t\tif (compress_expr) { // We compressed, mark the outgoing binding in need of decompression\n+\t\t\tcompress_exprs.emplace_back(std::move(compress_expr));\n+\t\t\tcompressed = true;\n+\t\t} else { // We did not compress, just push a colref\n+\t\t\tauto colref_expr = make_uniq<BoundColumnRefExpression>(child_type, child_binding);\n+\t\t\tauto it = statistics_map.find(colref_expr->binding);\n+\t\t\tunique_ptr<BaseStatistics> colref_stats = it != statistics_map.end() ? it->second->ToUnique() : nullptr;\n+\t\t\tcompress_exprs.emplace_back(make_uniq<CompressExpression>(std::move(colref_expr), std::move(colref_stats)));\n+\t\t}\n+\t\tUpdateBindingInfo(info, child_binding, compressed);\n+\t\tcompressed_anything = compressed_anything || compressed;\n+\t}\n+\tif (!compressed_anything) {\n+\t\t// If we compressed anything non-generically, we still need to decompress\n+\t\tfor (const auto &entry : info.binding_map) {\n+\t\t\tcompressed_anything = compressed_anything || entry.second.needs_decompression;\n+\t\t}\n+\t}\n+\treturn compressed_anything;\n+}\n+\n+void CompressedMaterialization::CreateCompressProjection(unique_ptr<LogicalOperator> &child_op,\n+                                                         vector<unique_ptr<CompressExpression>> &&compress_exprs,\n+                                                         CompressedMaterializationInfo &info, CMChildInfo &child_info) {\n+\t// Replace child op with a projection\n+\tvector<unique_ptr<Expression>> projections;\n+\tprojections.reserve(compress_exprs.size());\n+\tfor (auto &compress_expr : compress_exprs) {\n+\t\tprojections.emplace_back(std::move(compress_expr->expression));\n+\t}\n+\tconst auto table_index = binder.GenerateTableIndex();\n+\tauto compress_projection = make_uniq<LogicalProjection>(table_index, std::move(projections));\n+\tcompression_table_indices.insert(table_index);\n+\tcompress_projection->ResolveOperatorTypes();\n+\n+\tcompress_projection->children.emplace_back(std::move(child_op));\n+\tchild_op = std::move(compress_projection);\n+\n+\t// Get the new bindings and types\n+\tchild_info.bindings_after = child_op->GetColumnBindings();\n+\tconst auto &new_types = child_op->types;\n+\n+\t// Initialize a ColumnBindingReplacer with the new bindings and types\n+\tColumnBindingReplacer replacer;\n+\tauto &replacement_bindings = replacer.replacement_bindings;\n+\tfor (idx_t col_idx = 0; col_idx < child_info.bindings_before.size(); col_idx++) {\n+\t\tconst auto &old_binding = child_info.bindings_before[col_idx];\n+\t\tconst auto &new_binding = child_info.bindings_after[col_idx];\n+\t\tconst auto &new_type = new_types[col_idx];\n+\t\treplacement_bindings.emplace_back(old_binding, new_binding, new_type);\n+\n+\t\t// Remove the old binding from the statistics map\n+\t\tstatistics_map.erase(old_binding);\n+\t}\n+\n+\t// Make sure we skip the compress operator when replacing bindings\n+\treplacer.stop_operator = child_op.get();\n+\n+\t// Make the plan consistent again\n+\treplacer.VisitOperator(*root);\n+\n+\t// Replace in/out exprs in the binding map too\n+\tauto &binding_map = info.binding_map;\n+\tfor (auto &replacement_binding : replacement_bindings) {\n+\t\tauto it = binding_map.find(replacement_binding.old_binding);\n+\t\tif (it == binding_map.end()) {\n+\t\t\tcontinue;\n+\t\t}\n+\t\tauto &binding_info = it->second;\n+\t\tif (binding_info.binding == replacement_binding.old_binding) {\n+\t\t\tbinding_info.binding = replacement_binding.new_binding;\n+\t\t}\n+\n+\t\tif (it->first == replacement_binding.old_binding) {\n+\t\t\tauto binding_info_local = std::move(binding_info);\n+\t\t\tbinding_map.erase(it);\n+\t\t\tbinding_map.emplace(replacement_binding.new_binding, std::move(binding_info_local));\n+\t\t}\n+\t}\n+\n+\t// Add projection stats to statistics map\n+\tfor (idx_t col_idx = 0; col_idx < child_info.bindings_after.size(); col_idx++) {\n+\t\tconst auto &binding = child_info.bindings_after[col_idx];\n+\t\tauto &stats = compress_exprs[col_idx]->stats;\n+\t\tstatistics_map.emplace(binding, std::move(stats));\n+\t}\n+}\n+\n+void CompressedMaterialization::CreateDecompressProjection(unique_ptr<LogicalOperator> &op,\n+                                                           CompressedMaterializationInfo &info) {\n+\tconst auto bindings = op->GetColumnBindings();\n+\top->ResolveOperatorTypes();\n+\tconst auto &types = op->types;\n+\n+\t// Create decompress expressions for everything we compressed\n+\tauto &binding_map = info.binding_map;\n+\tvector<unique_ptr<Expression>> decompress_exprs;\n+\tvector<optional_ptr<BaseStatistics>> statistics;\n+\tfor (idx_t col_idx = 0; col_idx < bindings.size(); col_idx++) {\n+\t\tconst auto &binding = bindings[col_idx];\n+\t\tauto decompress_expr = make_uniq_base<Expression, BoundColumnRefExpression>(types[col_idx], binding);\n+\t\toptional_ptr<BaseStatistics> stats;\n+\t\tfor (auto &entry : binding_map) {\n+\t\t\tauto &binding_info = entry.second;\n+\t\t\tif (binding_info.binding != binding) {\n+\t\t\t\tcontinue;\n+\t\t\t}\n+\t\t\tstats = binding_info.stats.get();\n+\t\t\tif (binding_info.needs_decompression) {\n+\t\t\t\tdecompress_expr = GetDecompressExpression(std::move(decompress_expr), binding_info.type, *stats);\n+\t\t\t}\n+\t\t}\n+\t\tstatistics.push_back(stats);\n+\t\tdecompress_exprs.emplace_back(std::move(decompress_expr));\n+\t}\n+\n+\t// Replace op with a projection\n+\tconst auto table_index = binder.GenerateTableIndex();\n+\tauto decompress_projection = make_uniq<LogicalProjection>(table_index, std::move(decompress_exprs));\n+\tdecompression_table_indices.insert(table_index);\n+\n+\tdecompress_projection->children.emplace_back(std::move(op));\n+\top = std::move(decompress_projection);\n+\n+\t// Check if we're placing a projection on top of the root\n+\tif (op->children[0].get() == root.get()) {\n+\t\troot = op.get();\n+\t\treturn;\n+\t}\n+\n+\t// Get the new bindings and types\n+\tauto new_bindings = op->GetColumnBindings();\n+\top->ResolveOperatorTypes();\n+\tauto &new_types = op->types;\n+\n+\t// Initialize a ColumnBindingReplacer with the new bindings and types\n+\tColumnBindingReplacer replacer;\n+\tauto &replacement_bindings = replacer.replacement_bindings;\n+\tfor (idx_t col_idx = 0; col_idx < bindings.size(); col_idx++) {\n+\t\tconst auto &old_binding = bindings[col_idx];\n+\t\tconst auto &new_binding = new_bindings[col_idx];\n+\t\tconst auto &new_type = new_types[col_idx];\n+\t\treplacement_bindings.emplace_back(old_binding, new_binding, new_type);\n+\n+\t\tif (statistics[col_idx]) {\n+\t\t\tstatistics_map[new_binding] = statistics[col_idx]->ToUnique();\n+\t\t}\n+\t}\n+\n+\t// Make sure we skip the decompress operator when replacing bindings\n+\treplacer.stop_operator = op.get();\n+\n+\t// Make the plan consistent again\n+\treplacer.VisitOperator(*root);\n+}\n+\n+unique_ptr<CompressExpression> CompressedMaterialization::GetCompressExpression(const ColumnBinding &binding,\n+                                                                                const LogicalType &type,\n+                                                                                const bool &can_compress) {\n+\tauto it = statistics_map.find(binding);\n+\tif (can_compress && it != statistics_map.end() && it->second) {\n+\t\tauto input = make_uniq<BoundColumnRefExpression>(type, binding);\n+\t\tconst auto &stats = *it->second;\n+\t\treturn GetCompressExpression(std::move(input), stats);\n+\t}\n+\treturn nullptr;\n+}\n+\n+unique_ptr<CompressExpression> CompressedMaterialization::GetCompressExpression(unique_ptr<Expression> input,\n+                                                                                const BaseStatistics &stats) {\n+\tconst auto &type = input->return_type;\n+\tif (type != stats.GetType()) { // LCOV_EXCL_START\n+\t\treturn nullptr;\n+\t} // LCOV_EXCL_STOP\n+\tif (type.IsIntegral()) {\n+\t\treturn GetIntegralCompress(std::move(input), stats);\n+\t} else if (type.id() == LogicalTypeId::VARCHAR) {\n+\t\treturn GetStringCompress(std::move(input), stats);\n+\t}\n+\treturn nullptr;\n+}\n+\n+static Value GetIntegralRangeValue(ClientContext &context, const LogicalType &type, const BaseStatistics &stats) {\n+\tauto min = NumericStats::Min(stats);\n+\tauto max = NumericStats::Max(stats);\n+\n+\tvector<unique_ptr<Expression>> arguments;\n+\targuments.emplace_back(make_uniq<BoundConstantExpression>(max));\n+\targuments.emplace_back(make_uniq<BoundConstantExpression>(min));\n+\tBoundFunctionExpression sub(type, SubtractFun::GetFunction(type, type), std::move(arguments), nullptr);\n+\n+\tValue result;\n+\tif (ExpressionExecutor::TryEvaluateScalar(context, sub, result)) {\n+\t\treturn result;\n+\t} else {\n+\t\t// Couldn't evaluate: Return max hugeint as range so GetIntegralCompress will return nullptr\n+\t\treturn Value::HUGEINT(NumericLimits<hugeint_t>::Maximum());\n+\t}\n+}\n+\n+unique_ptr<CompressExpression> CompressedMaterialization::GetIntegralCompress(unique_ptr<Expression> input,\n+                                                                              const BaseStatistics &stats) {\n+\tconst auto &type = input->return_type;\n+\tif (GetTypeIdSize(type.InternalType()) == 1 || !NumericStats::HasMinMax(stats)) {\n+\t\treturn nullptr;\n+\t}\n+\n+\t// Get range and cast to UBIGINT (might fail for HUGEINT, in which case we just return)\n+\tValue range_value = GetIntegralRangeValue(context, type, stats);\n+\tif (!range_value.DefaultTryCastAs(LogicalType::UBIGINT)) {\n+\t\treturn nullptr;\n+\t}\n+\n+\t// Get the smallest type that the range can fit into\n+\tconst auto range = UBigIntValue::Get(range_value);\n+\tLogicalType cast_type;\n+\tif (range <= NumericLimits<uint8_t>().Maximum()) {\n+\t\tcast_type = LogicalType::UTINYINT;\n+\t} else if (range <= NumericLimits<uint16_t>().Maximum()) {\n+\t\tcast_type = LogicalType::USMALLINT;\n+\t} else if (range <= NumericLimits<uint32_t>().Maximum()) {\n+\t\tcast_type = LogicalType::UINTEGER;\n+\t} else {\n+\t\tD_ASSERT(range <= NumericLimits<uint64_t>().Maximum());\n+\t\tcast_type = LogicalType::UBIGINT;\n+\t}\n+\n+\t// Check if type that fits the range is smaller than the input type\n+\tif (GetTypeIdSize(cast_type.InternalType()) == GetTypeIdSize(type.InternalType())) {\n+\t\treturn nullptr;\n+\t}\n+\tD_ASSERT(GetTypeIdSize(cast_type.InternalType()) < GetTypeIdSize(type.InternalType()));\n+\n+\t// Compressing will yield a benefit\n+\tauto compress_function = CMIntegralCompressFun::GetFunction(type, cast_type);\n+\tvector<unique_ptr<Expression>> arguments;\n+\targuments.emplace_back(std::move(input));\n+\targuments.emplace_back(make_uniq<BoundConstantExpression>(NumericStats::Min(stats)));\n+\tauto compress_expr =\n+\t    make_uniq<BoundFunctionExpression>(cast_type, compress_function, std::move(arguments), nullptr);\n+\n+\tauto compress_stats = BaseStatistics::CreateEmpty(cast_type);\n+\tcompress_stats.CopyBase(stats);\n+\tNumericStats::SetMin(compress_stats, Value(0).DefaultCastAs(cast_type));\n+\tNumericStats::SetMax(compress_stats, range_value.DefaultCastAs(cast_type));\n+\n+\treturn make_uniq<CompressExpression>(std::move(compress_expr), compress_stats.ToUnique());\n+}\n+\n+unique_ptr<CompressExpression> CompressedMaterialization::GetStringCompress(unique_ptr<Expression> input,\n+                                                                            const BaseStatistics &stats) {\n+\tif (!StringStats::HasMaxStringLength(stats)) {\n+\t\treturn nullptr;\n+\t}\n+\n+\tconst auto max_string_length = StringStats::MaxStringLength(stats);\n+\tLogicalType cast_type = LogicalType::INVALID;\n+\tfor (const auto &compressed_type : CompressedMaterializationFunctions::StringTypes()) {\n+\t\tif (max_string_length < GetTypeIdSize(compressed_type.InternalType())) {\n+\t\t\tcast_type = compressed_type;\n+\t\t\tbreak;\n+\t\t}\n+\t}\n+\tif (cast_type == LogicalType::INVALID) {\n+\t\treturn nullptr;\n+\t}\n+\n+\tauto compress_stats = BaseStatistics::CreateEmpty(cast_type);\n+\tcompress_stats.CopyBase(stats);\n+\tif (cast_type.id() == LogicalTypeId::USMALLINT) {\n+\t\tauto min_string = StringStats::Min(stats);\n+\t\tauto max_string = StringStats::Max(stats);\n+\n+\t\tuint8_t min_numeric = 0;\n+\t\tif (max_string_length != 0 && min_string.length() != 0) {\n+\t\t\tmin_numeric = *reinterpret_cast<const uint8_t *>(min_string.c_str());\n+\t\t}\n+\t\tuint8_t max_numeric = 0;\n+\t\tif (max_string_length != 0 && max_string.length() != 0) {\n+\t\t\tmax_numeric = *reinterpret_cast<const uint8_t *>(max_string.c_str());\n+\t\t}\n+\n+\t\tValue min_val = Value::USMALLINT(min_numeric);\n+\t\tValue max_val = Value::USMALLINT(max_numeric + 1);\n+\t\tif (max_numeric < NumericLimits<uint8_t>::Maximum()) {\n+\t\t\tcast_type = LogicalType::UTINYINT;\n+\t\t\tcompress_stats = BaseStatistics::CreateEmpty(cast_type);\n+\t\t\tcompress_stats.CopyBase(stats);\n+\t\t\tmin_val = Value::UTINYINT(min_numeric);\n+\t\t\tmax_val = Value::UTINYINT(max_numeric + 1);\n+\t\t}\n+\n+\t\tNumericStats::SetMin(compress_stats, min_val);\n+\t\tNumericStats::SetMax(compress_stats, max_val);\n+\t}\n+\n+\tauto compress_function = CMStringCompressFun::GetFunction(cast_type);\n+\tvector<unique_ptr<Expression>> arguments;\n+\targuments.emplace_back(std::move(input));\n+\tauto compress_expr =\n+\t    make_uniq<BoundFunctionExpression>(cast_type, compress_function, std::move(arguments), nullptr);\n+\treturn make_uniq<CompressExpression>(std::move(compress_expr), compress_stats.ToUnique());\n+}\n+\n+unique_ptr<Expression> CompressedMaterialization::GetDecompressExpression(unique_ptr<Expression> input,\n+                                                                          const LogicalType &result_type,\n+                                                                          const BaseStatistics &stats) {\n+\tconst auto &type = result_type;\n+\tif (TypeIsIntegral(type.InternalType())) {\n+\t\treturn GetIntegralDecompress(std::move(input), result_type, stats);\n+\t} else if (type.id() == LogicalTypeId::VARCHAR) {\n+\t\treturn GetStringDecompress(std::move(input), stats);\n+\t} else {\n+\t\tthrow InternalException(\"Type other than integral/string marked for decompression!\");\n+\t}\n+}\n+\n+unique_ptr<Expression> CompressedMaterialization::GetIntegralDecompress(unique_ptr<Expression> input,\n+                                                                        const LogicalType &result_type,\n+                                                                        const BaseStatistics &stats) {\n+\tD_ASSERT(NumericStats::HasMinMax(stats));\n+\tauto decompress_function = CMIntegralDecompressFun::GetFunction(input->return_type, result_type);\n+\tvector<unique_ptr<Expression>> arguments;\n+\targuments.emplace_back(std::move(input));\n+\targuments.emplace_back(make_uniq<BoundConstantExpression>(NumericStats::Min(stats)));\n+\treturn make_uniq<BoundFunctionExpression>(result_type, decompress_function, std::move(arguments), nullptr);\n+}\n+\n+unique_ptr<Expression> CompressedMaterialization::GetStringDecompress(unique_ptr<Expression> input,\n+                                                                      const BaseStatistics &stats) {\n+\tD_ASSERT(StringStats::HasMaxStringLength(stats));\n+\tauto decompress_function = CMStringDecompressFun::GetFunction(input->return_type);\n+\tvector<unique_ptr<Expression>> arguments;\n+\targuments.emplace_back(std::move(input));\n+\treturn make_uniq<BoundFunctionExpression>(decompress_function.return_type, decompress_function,\n+\t                                          std::move(arguments), nullptr);\n+}\n+\n+} // namespace duckdb\ndiff --git a/src/optimizer/compressed_materialization/CMakeLists.txt b/src/optimizer/compressed_materialization/CMakeLists.txt\nnew file mode 100644\nindex 000000000000..a6ed429ed1a4\n--- /dev/null\n+++ b/src/optimizer/compressed_materialization/CMakeLists.txt\n@@ -0,0 +1,7 @@\n+add_library_unity(\n+  duckdb_optimizer_compressed_materialization OBJECT compress_aggregate.cpp\n+  compress_distinct.cpp compress_order.cpp)\n+set(ALL_OBJECT_FILES\n+    ${ALL_OBJECT_FILES}\n+    $<TARGET_OBJECTS:duckdb_optimizer_compressed_materialization>\n+    PARENT_SCOPE)\ndiff --git a/src/optimizer/compressed_materialization/compress_aggregate.cpp b/src/optimizer/compressed_materialization/compress_aggregate.cpp\nnew file mode 100644\nindex 000000000000..a61787e759fa\n--- /dev/null\n+++ b/src/optimizer/compressed_materialization/compress_aggregate.cpp\n@@ -0,0 +1,140 @@\n+#include \"duckdb/optimizer/compressed_materialization.hpp\"\n+#include \"duckdb/planner/expression/bound_aggregate_expression.hpp\"\n+#include \"duckdb/planner/expression/bound_columnref_expression.hpp\"\n+#include \"duckdb/planner/operator/logical_aggregate.hpp\"\n+\n+namespace duckdb {\n+\n+void CompressedMaterialization::CompressAggregate(unique_ptr<LogicalOperator> &op) {\n+\tauto &aggregate = op->Cast<LogicalAggregate>();\n+\tauto &groups = aggregate.groups;\n+\tcolumn_binding_set_t group_binding_set;\n+\tfor (const auto &group : groups) {\n+\t\tif (group->type != ExpressionType::BOUND_COLUMN_REF) {\n+\t\t\tcontinue;\n+\t\t}\n+\t\tauto &colref = group->Cast<BoundColumnRefExpression>();\n+\t\tif (group_binding_set.find(colref.binding) != group_binding_set.end()) {\n+\t\t\treturn; // Duplicate group - don't compress\n+\t\t}\n+\t\tgroup_binding_set.insert(colref.binding);\n+\t}\n+\tauto &group_stats = aggregate.group_stats;\n+\n+\t// No need to compress if there are no groups/stats\n+\tif (groups.empty() || group_stats.empty()) {\n+\t\treturn;\n+\t}\n+\tD_ASSERT(groups.size() == group_stats.size());\n+\n+\t// Find all bindings referenced by non-colref expressions in the groups\n+\t// These are excluded from compression by projection\n+\t// But we can try to compress the expression directly\n+\tcolumn_binding_set_t referenced_bindings;\n+\tvector<ColumnBinding> group_bindings(groups.size(), ColumnBinding());\n+\tvector<bool> needs_decompression(groups.size(), false);\n+\tvector<unique_ptr<BaseStatistics>> stored_group_stats;\n+\tstored_group_stats.resize(groups.size());\n+\tfor (idx_t group_idx = 0; group_idx < groups.size(); group_idx++) {\n+\t\tauto &group_expr = *groups[group_idx];\n+\t\tif (group_expr.GetExpressionType() == ExpressionType::BOUND_COLUMN_REF) {\n+\t\t\tauto &colref = group_expr.Cast<BoundColumnRefExpression>();\n+\t\t\tgroup_bindings[group_idx] = colref.binding;\n+\t\t\tcontinue; // Will be compressed generically\n+\t\t}\n+\n+\t\t// Mark the bindings referenced by the non-colref expression so they won't be modified\n+\t\tGetReferencedBindings(group_expr, referenced_bindings);\n+\n+\t\t// The non-colref expression won't be compressed generically, so try to compress it here\n+\t\tif (!group_stats[group_idx]) {\n+\t\t\tcontinue; // Can't compress without stats\n+\t\t}\n+\n+\t\t// Try to compress, if successful, replace the expression\n+\t\tauto compress_expr = GetCompressExpression(group_expr.Copy(), *group_stats[group_idx]);\n+\t\tif (compress_expr) {\n+\t\t\tneeds_decompression[group_idx] = true;\n+\t\t\tstored_group_stats[group_idx] = std::move(group_stats[group_idx]);\n+\t\t\tgroups[group_idx] = std::move(compress_expr->expression);\n+\t\t\tgroup_stats[group_idx] = std::move(compress_expr->stats);\n+\t\t}\n+\t}\n+\n+\t// Anything referenced in the aggregate functions is also excluded\n+\tfor (idx_t expr_idx = 0; expr_idx < aggregate.expressions.size(); expr_idx++) {\n+\t\tconst auto &expr = *aggregate.expressions[expr_idx];\n+\t\tD_ASSERT(expr.type == ExpressionType::BOUND_AGGREGATE);\n+\t\tconst auto &aggr_expr = expr.Cast<BoundAggregateExpression>();\n+\t\tfor (const auto &child : aggr_expr.children) {\n+\t\t\tGetReferencedBindings(*child, referenced_bindings);\n+\t\t}\n+\t\tif (aggr_expr.filter) {\n+\t\t\tGetReferencedBindings(*aggr_expr.filter, referenced_bindings);\n+\t\t}\n+\t\tif (aggr_expr.order_bys) {\n+\t\t\tfor (const auto &order : aggr_expr.order_bys->orders) {\n+\t\t\t\tconst auto &order_expr = *order.expression;\n+\t\t\t\tif (order_expr.type != ExpressionType::BOUND_COLUMN_REF) {\n+\t\t\t\t\tGetReferencedBindings(order_expr, referenced_bindings);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t// Create info for compression\n+\tCompressedMaterializationInfo info(*op, {0}, referenced_bindings);\n+\n+\t// Create binding mapping\n+\tconst auto bindings_out = aggregate.GetColumnBindings();\n+\tconst auto &types = aggregate.types;\n+\tfor (idx_t group_idx = 0; group_idx < groups.size(); group_idx++) {\n+\t\t// Aggregate changes bindings as it has a table idx\n+\t\tCMBindingInfo binding_info(bindings_out[group_idx], types[group_idx]);\n+\t\tbinding_info.needs_decompression = needs_decompression[group_idx];\n+\t\tif (needs_decompression[group_idx]) {\n+\t\t\t// Compressed non-generically\n+\t\t\tauto entry = info.binding_map.emplace(bindings_out[group_idx], std::move(binding_info));\n+\t\t\tentry.first->second.stats = std::move(stored_group_stats[group_idx]);\n+\t\t} else if (group_bindings[group_idx] != ColumnBinding()) {\n+\t\t\tinfo.binding_map.emplace(group_bindings[group_idx], std::move(binding_info));\n+\t\t}\n+\t}\n+\n+\t// Now try to compress\n+\tCreateProjections(op, info);\n+\n+\t// Update aggregate statistics\n+\tUpdateAggregateStats(op);\n+}\n+\n+void CompressedMaterialization::UpdateAggregateStats(unique_ptr<LogicalOperator> &op) {\n+\tif (op->type != LogicalOperatorType::LOGICAL_PROJECTION) {\n+\t\treturn;\n+\t}\n+\n+\t// Update aggregate group stats if compressed\n+\tauto &compressed_aggregate = op->children[0]->Cast<LogicalAggregate>();\n+\tauto &groups = compressed_aggregate.groups;\n+\tauto &group_stats = compressed_aggregate.group_stats;\n+\n+\tfor (idx_t group_idx = 0; group_idx < groups.size(); group_idx++) {\n+\t\tauto &group_expr = *groups[group_idx];\n+\t\tif (group_expr.GetExpressionType() != ExpressionType::BOUND_COLUMN_REF) {\n+\t\t\tcontinue;\n+\t\t}\n+\t\tauto &colref = group_expr.Cast<BoundColumnRefExpression>();\n+\t\tif (!group_stats[group_idx]) {\n+\t\t\tcontinue;\n+\t\t}\n+\t\tif (colref.return_type == group_stats[group_idx]->GetType()) {\n+\t\t\tcontinue;\n+\t\t}\n+\t\tauto it = statistics_map.find(colref.binding);\n+\t\tif (it != statistics_map.end() && it->second) {\n+\t\t\tgroup_stats[group_idx] = it->second->ToUnique();\n+\t\t}\n+\t}\n+}\n+\n+} // namespace duckdb\ndiff --git a/src/optimizer/compressed_materialization/compress_distinct.cpp b/src/optimizer/compressed_materialization/compress_distinct.cpp\nnew file mode 100644\nindex 000000000000..3dd1f5367fea\n--- /dev/null\n+++ b/src/optimizer/compressed_materialization/compress_distinct.cpp\n@@ -0,0 +1,42 @@\n+#include \"duckdb/optimizer/compressed_materialization.hpp\"\n+#include \"duckdb/planner/expression/bound_columnref_expression.hpp\"\n+#include \"duckdb/planner/operator/logical_distinct.hpp\"\n+\n+namespace duckdb {\n+\n+void CompressedMaterialization::CompressDistinct(unique_ptr<LogicalOperator> &op) {\n+\tauto &distinct = op->Cast<LogicalDistinct>();\n+\tauto &distinct_targets = distinct.distinct_targets;\n+\n+\tcolumn_binding_set_t referenced_bindings;\n+\tfor (auto &target : distinct_targets) {\n+\t\tif (target->type != ExpressionType::BOUND_COLUMN_REF) { // LCOV_EXCL_START\n+\t\t\tGetReferencedBindings(*target, referenced_bindings);\n+\t\t} // LCOV_EXCL_STOP\n+\t}\n+\n+\tif (distinct.order_by) {\n+\t\tfor (auto &order : distinct.order_by->orders) {\n+\t\t\tif (order.expression->type != ExpressionType::BOUND_COLUMN_REF) { // LCOV_EXCL_START\n+\t\t\t\tGetReferencedBindings(*order.expression, referenced_bindings);\n+\t\t\t} // LCOV_EXCL_STOP\n+\t\t}\n+\t}\n+\n+\t// Create info for compression\n+\tCompressedMaterializationInfo info(*op, {0}, referenced_bindings);\n+\n+\t// Create binding mapping\n+\tconst auto bindings = distinct.GetColumnBindings();\n+\tconst auto &types = distinct.types;\n+\tD_ASSERT(bindings.size() == types.size());\n+\tfor (idx_t col_idx = 0; col_idx < bindings.size(); col_idx++) {\n+\t\t// Distinct does not change bindings, input binding is output binding\n+\t\tinfo.binding_map.emplace(bindings[col_idx], CMBindingInfo(bindings[col_idx], types[col_idx]));\n+\t}\n+\n+\t// Now try to compress\n+\tCreateProjections(op, info);\n+}\n+\n+} // namespace duckdb\ndiff --git a/src/optimizer/compressed_materialization/compress_order.cpp b/src/optimizer/compressed_materialization/compress_order.cpp\nnew file mode 100644\nindex 000000000000..2b098fda63a6\n--- /dev/null\n+++ b/src/optimizer/compressed_materialization/compress_order.cpp\n@@ -0,0 +1,65 @@\n+#include \"duckdb/optimizer/compressed_materialization.hpp\"\n+#include \"duckdb/planner/expression/bound_columnref_expression.hpp\"\n+#include \"duckdb/planner/operator/logical_order.hpp\"\n+\n+namespace duckdb {\n+\n+void CompressedMaterialization::CompressOrder(unique_ptr<LogicalOperator> &op) {\n+\tauto &order = op->Cast<LogicalOrder>();\n+\n+\t// Find all bindings referenced by non-colref expressions in the order nodes\n+\t// These are excluded from compression by projection\n+\t// But we can try to compress the expression directly\n+\tcolumn_binding_set_t referenced_bindings;\n+\tfor (idx_t order_node_idx = 0; order_node_idx < order.orders.size(); order_node_idx++) {\n+\t\tauto &bound_order = order.orders[order_node_idx];\n+\t\tauto &order_expression = *bound_order.expression;\n+\t\tif (order_expression.GetExpressionType() == ExpressionType::BOUND_COLUMN_REF) {\n+\t\t\tcontinue; // Will be compressed generically\n+\t\t}\n+\n+\t\t// Mark the bindings referenced by the non-colref expression so they won't be modified\n+\t\tGetReferencedBindings(order_expression, referenced_bindings);\n+\t}\n+\n+\t// Create info for compression\n+\tCompressedMaterializationInfo info(*op, {0}, referenced_bindings);\n+\n+\t// Create binding mapping\n+\tconst auto bindings = order.GetColumnBindings();\n+\tconst auto &types = order.types;\n+\tD_ASSERT(bindings.size() == types.size());\n+\tfor (idx_t col_idx = 0; col_idx < bindings.size(); col_idx++) {\n+\t\t// Order does not change bindings, input binding is output binding\n+\t\tinfo.binding_map.emplace(bindings[col_idx], CMBindingInfo(bindings[col_idx], types[col_idx]));\n+\t}\n+\n+\t// Now try to compress\n+\tCreateProjections(op, info);\n+\n+\t// Update order statistics\n+\tUpdateOrderStats(op);\n+}\n+\n+void CompressedMaterialization::UpdateOrderStats(unique_ptr<LogicalOperator> &op) {\n+\tif (op->type != LogicalOperatorType::LOGICAL_PROJECTION) {\n+\t\treturn;\n+\t}\n+\n+\t// Update order stats if compressed\n+\tauto &compressed_order = op->children[0]->Cast<LogicalOrder>();\n+\tfor (idx_t order_node_idx = 0; order_node_idx < compressed_order.orders.size(); order_node_idx++) {\n+\t\tauto &bound_order = compressed_order.orders[order_node_idx];\n+\t\tauto &order_expression = *bound_order.expression;\n+\t\tif (order_expression.GetExpressionType() != ExpressionType::BOUND_COLUMN_REF) {\n+\t\t\tcontinue;\n+\t\t}\n+\t\tauto &colref = order_expression.Cast<BoundColumnRefExpression>();\n+\t\tauto it = statistics_map.find(colref.binding);\n+\t\tif (it != statistics_map.end() && it->second) {\n+\t\t\tbound_order.stats = it->second->ToUnique();\n+\t\t}\n+\t}\n+}\n+\n+} // namespace duckdb\ndiff --git a/src/optimizer/deliminator.cpp b/src/optimizer/deliminator.cpp\nindex eacd66869bb8..3ce4b1ffb106 100644\n--- a/src/optimizer/deliminator.cpp\n+++ b/src/optimizer/deliminator.cpp\n@@ -1,6 +1,7 @@\n #include \"duckdb/optimizer/deliminator.hpp\"\n \n #include \"duckdb/optimizer/join_order/join_order_optimizer.hpp\"\n+#include \"duckdb/optimizer/remove_duplicate_groups.hpp\"\n #include \"duckdb/planner/expression/bound_cast_expression.hpp\"\n #include \"duckdb/planner/expression/bound_columnref_expression.hpp\"\n #include \"duckdb/planner/expression/bound_conjunction_expression.hpp\"\n@@ -12,35 +13,18 @@\n \n namespace duckdb {\n \n-class DeliminatorPlanUpdater : LogicalOperatorVisitor {\n+struct DelimCandidate {\n public:\n-\texplicit DeliminatorPlanUpdater(ClientContext &context) : context(context) {\n+\texplicit DelimCandidate(LogicalDelimJoin &delim_join) : delim_join(delim_join), delim_get_count(0) {\n \t}\n-\t//! Update the plan after a DelimGet has been removed\n-\tvoid VisitOperator(LogicalOperator &op) override;\n-\tvoid VisitExpression(unique_ptr<Expression> *expression) override;\n \n public:\n-\tClientContext &context;\n-\n-\texpression_map_t<Expression *> expr_map;\n-\tcolumn_binding_map_t<bool> projection_map;\n-\tcolumn_binding_map_t<Expression *> reverse_proj_or_agg_map;\n-\tunique_ptr<LogicalOperator> temp_ptr;\n+\tLogicalDelimJoin &delim_join;\n+\tvector<reference<unique_ptr<LogicalOperator>>> joins;\n+\tidx_t delim_get_count;\n };\n \n-static idx_t DelimGetCount(LogicalOperator &op) {\n-\tif (op.type == LogicalOperatorType::LOGICAL_DELIM_GET) {\n-\t\treturn 1;\n-\t}\n-\tidx_t child_count = 0;\n-\tfor (auto &child : op.children) {\n-\t\tchild_count += DelimGetCount(*child);\n-\t}\n-\treturn child_count;\n-}\n-\n-static bool IsEqualityJoinCondition(JoinCondition &cond) {\n+static bool IsEqualityJoinCondition(const JoinCondition &cond) {\n \tswitch (cond.comparison) {\n \tcase ExpressionType::COMPARE_EQUAL:\n \tcase ExpressionType::COMPARE_NOT_DISTINCT_FROM:\n@@ -50,119 +34,55 @@ static bool IsEqualityJoinCondition(JoinCondition &cond) {\n \t}\n }\n \n-static bool InequalityDelimJoinCanBeEliminated(JoinType &join_type) {\n-\tswitch (join_type) {\n-\tcase JoinType::ANTI:\n-\tcase JoinType::MARK:\n-\tcase JoinType::SEMI:\n-\tcase JoinType::SINGLE:\n-\t\treturn true;\n-\tdefault:\n-\t\treturn false;\n-\t}\n-}\n+unique_ptr<LogicalOperator> Deliminator::Optimize(unique_ptr<LogicalOperator> op) {\n+\troot = op;\n \n-void DeliminatorPlanUpdater::VisitOperator(LogicalOperator &op) {\n-\tVisitOperatorChildren(op);\n-\tVisitOperatorExpressions(op);\n-\tif (op.type == LogicalOperatorType::LOGICAL_DELIM_JOIN && DelimGetCount(op) == 0) {\n-\t\tauto &delim_join = op.Cast<LogicalDelimJoin>();\n-\t\tauto &decs = delim_join.duplicate_eliminated_columns;\n-\t\tfor (auto &cond : delim_join.conditions) {\n-\t\t\tif (!IsEqualityJoinCondition(cond)) {\n-\t\t\t\tcontinue;\n-\t\t\t}\n-\t\t\tauto rhs = cond.right.get();\n-\t\t\twhile (rhs->type == ExpressionType::OPERATOR_CAST) {\n-\t\t\t\tauto &cast = rhs->Cast<BoundCastExpression>();\n-\t\t\t\trhs = cast.child.get();\n-\t\t\t}\n-\t\t\tif (rhs->type != ExpressionType::BOUND_COLUMN_REF) {\n-\t\t\t\tthrow InternalException(\"Error in Deliminator: expected a bound column reference\");\n-\t\t\t}\n-\t\t\tauto &colref = rhs->Cast<BoundColumnRefExpression>();\n-\t\t\tif (projection_map.find(colref.binding) != projection_map.end()) {\n-\t\t\t\t// value on the right is a projection of removed DelimGet\n-\t\t\t\tfor (idx_t i = 0; i < decs.size(); i++) {\n-\t\t\t\t\tif (decs[i]->Equals(*cond.left)) {\n-\t\t\t\t\t\t// the value on the left no longer needs to be a duplicate-eliminated column\n-\t\t\t\t\t\tdecs.erase(decs.begin() + i);\n-\t\t\t\t\t\tbreak;\n+\tvector<DelimCandidate> candidates;\n+\tFindCandidates(op, candidates);\n+\n+\tfor (auto &candidate : candidates) {\n+\t\tauto &delim_join = candidate.delim_join;\n+\n+\t\tbool all_removed = true;\n+\t\tbool all_equality_conditions = true;\n+\t\tfor (auto &join : candidate.joins) {\n+\t\t\tall_removed =\n+\t\t\t    RemoveJoinWithDelimGet(delim_join, candidate.delim_get_count, join, all_equality_conditions) &&\n+\t\t\t    all_removed;\n+\t\t}\n+\n+\t\t// Change type if there are no more duplicate-eliminated columns\n+\t\tif (candidate.joins.size() == candidate.delim_get_count && all_removed) {\n+\t\t\tdelim_join.duplicate_eliminated_columns.clear();\n+\t\t\tif (all_equality_conditions) {\n+\t\t\t\tfor (auto &cond : delim_join.conditions) {\n+\t\t\t\t\tif (IsEqualityJoinCondition(cond)) {\n+\t\t\t\t\t\tcond.comparison = ExpressionType::COMPARE_NOT_DISTINCT_FROM;\n \t\t\t\t\t}\n \t\t\t\t}\n-\t\t\t\t// whether we applied an IS NOT NULL filter\n-\t\t\t\tcond.comparison = ExpressionType::COMPARE_NOT_DISTINCT_FROM;\n \t\t\t}\n-\t\t}\n-\t\t// change type if there are no more duplicate-eliminated columns\n-\t\tif (decs.empty()) {\n \t\t\tdelim_join.type = LogicalOperatorType::LOGICAL_COMPARISON_JOIN;\n-\t\t\t// sub-plans with DelimGets are not re-orderable (yet), however, we removed all DelimGet of this DelimJoin\n-\t\t\t// the DelimGets are on the RHS of the DelimJoin, so we can call the JoinOrderOptimizer on the RHS now\n-\t\t\tJoinOrderOptimizer optimizer(context);\n-\t\t\tdelim_join.children[1] = optimizer.Optimize(std::move(delim_join.children[1]));\n \t\t}\n \t}\n-}\n-\n-void DeliminatorPlanUpdater::VisitExpression(unique_ptr<Expression> *expression) {\n-\tauto &expr = **expression;\n-\tauto entry = expr_map.find(expr);\n-\tif (entry != expr_map.end()) {\n-\t\t*expression = entry->second->Copy();\n-\t} else {\n-\t\tVisitExpressionChildren(**expression);\n-\t}\n-}\n \n-unique_ptr<LogicalOperator> Deliminator::Optimize(unique_ptr<LogicalOperator> op) {\n-\tvector<unique_ptr<LogicalOperator> *> candidates;\n-\tFindCandidates(&op, candidates);\n-\n-\tfor (auto &candidate : candidates) {\n-\t\tDeliminatorPlanUpdater updater(context);\n-\t\tif (RemoveCandidate(&op, candidate, updater)) {\n-\t\t\tupdater.VisitOperator(*op);\n-\t\t}\n-\t}\n \treturn op;\n }\n \n-void Deliminator::FindCandidates(unique_ptr<LogicalOperator> *op_ptr,\n-                                 vector<unique_ptr<LogicalOperator> *> &candidates) {\n-\tauto op = op_ptr->get();\n-\t// search children before adding, so the deepest candidates get added first\n+void Deliminator::FindCandidates(unique_ptr<LogicalOperator> &op, vector<DelimCandidate> &candidates) {\n+\t// Search children before adding, so the deepest candidates get added first\n \tfor (auto &child : op->children) {\n-\t\tFindCandidates(&child, candidates);\n-\t}\n-\t// search for projection/aggregate\n-\tif (op->type != LogicalOperatorType::LOGICAL_PROJECTION &&\n-\t    op->type != LogicalOperatorType::LOGICAL_AGGREGATE_AND_GROUP_BY) {\n-\t\treturn;\n-\t}\n-\t// followed by a join\n-\tif (op->children[0]->type != LogicalOperatorType::LOGICAL_COMPARISON_JOIN) {\n-\t\treturn;\n-\t}\n-\tauto &join = *op->children[0];\n-\t// with a DelimGet as a direct child (left or right)\n-\tif (join.children[0]->type == LogicalOperatorType::LOGICAL_DELIM_GET ||\n-\t    join.children[1]->type == LogicalOperatorType::LOGICAL_DELIM_GET) {\n-\t\tcandidates.push_back(op_ptr);\n-\t\treturn;\n-\t}\n-\t// or a filter followed by a DelimGet (left)\n-\tif (join.children[0]->type == LogicalOperatorType::LOGICAL_FILTER &&\n-\t    join.children[0]->children[0]->type == LogicalOperatorType::LOGICAL_DELIM_GET) {\n-\t\tcandidates.push_back(op_ptr);\n-\t\treturn;\n+\t\tFindCandidates(child, candidates);\n \t}\n-\t// filter followed by a DelimGet (right)\n-\tif (join.children[1]->type == LogicalOperatorType::LOGICAL_FILTER &&\n-\t    join.children[1]->children[0]->type == LogicalOperatorType::LOGICAL_DELIM_GET) {\n-\t\tcandidates.push_back(op_ptr);\n+\n+\tif (op->type != LogicalOperatorType::LOGICAL_DELIM_JOIN) {\n \t\treturn;\n \t}\n+\n+\tcandidates.emplace_back(op->Cast<LogicalDelimJoin>());\n+\tauto &candidate = candidates.back();\n+\n+\t// DelimGets are in the RHS\n+\tFindJoinWithDelimGet(op->children[1], candidate);\n }\n \n static bool OperatorIsDelimGet(LogicalOperator &op) {\n@@ -176,6 +96,23 @@ static bool OperatorIsDelimGet(LogicalOperator &op) {\n \treturn false;\n }\n \n+void Deliminator::FindJoinWithDelimGet(unique_ptr<LogicalOperator> &op, DelimCandidate &candidate) {\n+\tif (op->type == LogicalOperatorType::LOGICAL_DELIM_JOIN) {\n+\t\tFindJoinWithDelimGet(op->children[0], candidate);\n+\t} else if (op->type == LogicalOperatorType::LOGICAL_DELIM_GET) {\n+\t\tcandidate.delim_get_count++;\n+\t} else {\n+\t\tfor (auto &child : op->children) {\n+\t\t\tFindJoinWithDelimGet(child, candidate);\n+\t\t}\n+\t}\n+\n+\tif (op->type == LogicalOperatorType::LOGICAL_COMPARISON_JOIN &&\n+\t    (OperatorIsDelimGet(*op->children[0]) || OperatorIsDelimGet(*op->children[1]))) {\n+\t\tcandidate.joins.emplace_back(op);\n+\t}\n+}\n+\n static bool ChildJoinTypeCanBeDeliminated(JoinType &join_type) {\n \tswitch (join_type) {\n \tcase JoinType::INNER:\n@@ -186,255 +123,173 @@ static bool ChildJoinTypeCanBeDeliminated(JoinType &join_type) {\n \t}\n }\n \n-bool Deliminator::RemoveCandidate(unique_ptr<LogicalOperator> *plan, unique_ptr<LogicalOperator> *candidate,\n-                                  DeliminatorPlanUpdater &updater) {\n-\tauto &proj_or_agg = **candidate;\n-\tauto &join = proj_or_agg.children[0]->Cast<LogicalComparisonJoin>();\n-\tif (!ChildJoinTypeCanBeDeliminated(join.join_type)) {\n+bool Deliminator::RemoveJoinWithDelimGet(LogicalDelimJoin &delim_join, const idx_t delim_get_count,\n+                                         unique_ptr<LogicalOperator> &join, bool &all_equality_conditions) {\n+\tauto &comparison_join = join->Cast<LogicalComparisonJoin>();\n+\tif (!ChildJoinTypeCanBeDeliminated(comparison_join.join_type)) {\n \t\treturn false;\n \t}\n \n-\t// get the index (left or right) of the DelimGet side of the join\n-\tidx_t delim_idx = OperatorIsDelimGet(*join.children[0]) ? 0 : 1;\n-\tD_ASSERT(OperatorIsDelimGet(*join.children[delim_idx]));\n-\t// get the filter (if any)\n+\t// Get the index (left or right) of the DelimGet side of the join\n+\tconst idx_t delim_idx = OperatorIsDelimGet(*join->children[0]) ? 0 : 1;\n+\n+\t// Get the filter (if any)\n \toptional_ptr<LogicalFilter> filter;\n-\tif (join.children[delim_idx]->type == LogicalOperatorType::LOGICAL_FILTER) {\n-\t\tfilter = &join.children[delim_idx]->Cast<LogicalFilter>();\n+\tvector<unique_ptr<Expression>> filter_expressions;\n+\tif (join->children[delim_idx]->type == LogicalOperatorType::LOGICAL_FILTER) {\n+\t\tfilter = &join->children[delim_idx]->Cast<LogicalFilter>();\n+\t\tfor (auto &expr : filter->expressions) {\n+\t\t\tfilter_expressions.emplace_back(expr->Copy());\n+\t\t}\n \t}\n-\tauto &delim_get = (filter ? filter->children[0] : join.children[delim_idx])->Cast<LogicalDelimGet>();\n-\tif (join.conditions.size() != delim_get.chunk_types.size()) {\n-\t\t// joining with DelimGet adds new information\n-\t\treturn false;\n+\n+\tauto &delim_get = (filter ? filter->children[0] : join->children[delim_idx])->Cast<LogicalDelimGet>();\n+\tif (comparison_join.conditions.size() != delim_get.chunk_types.size()) {\n+\t\treturn false; // Joining with DelimGet adds new information\n \t}\n-\t// check if joining with the DelimGet is redundant, and collect relevant column information\n-\tbool all_equality_conditions = true;\n-\tvector<reference<Expression>> nulls_are_not_equal_exprs;\n-\tfor (auto &cond : join.conditions) {\n+\n+\t// Check if joining with the DelimGet is redundant, and collect relevant column information\n+\tColumnBindingReplacer replacer;\n+\tauto &replacement_bindings = replacer.replacement_bindings;\n+\tfor (auto &cond : comparison_join.conditions) {\n \t\tall_equality_conditions = all_equality_conditions && IsEqualityJoinCondition(cond);\n \t\tauto &delim_side = delim_idx == 0 ? *cond.left : *cond.right;\n \t\tauto &other_side = delim_idx == 0 ? *cond.right : *cond.left;\n-\t\tif (delim_side.type != ExpressionType::BOUND_COLUMN_REF) {\n-\t\t\t// non-colref e.g. expression -(4, 1) in 4-i=j where i is from DelimGet\n-\t\t\t// FIXME: might be possible to also eliminate these\n+\t\tif (delim_side.type != ExpressionType::BOUND_COLUMN_REF ||\n+\t\t    other_side.type != ExpressionType::BOUND_COLUMN_REF) {\n \t\t\treturn false;\n \t\t}\n-\t\tupdater.expr_map[delim_side] = &other_side;\n+\t\tauto &delim_colref = delim_side.Cast<BoundColumnRefExpression>();\n+\t\tauto &other_colref = other_side.Cast<BoundColumnRefExpression>();\n+\t\treplacement_bindings.emplace_back(delim_colref.binding, other_colref.binding);\n+\n \t\tif (cond.comparison != ExpressionType::COMPARE_NOT_DISTINCT_FROM) {\n-\t\t\tnulls_are_not_equal_exprs.push_back(other_side);\n+\t\t\tauto is_not_null_expr =\n+\t\t\t    make_uniq<BoundOperatorExpression>(ExpressionType::OPERATOR_IS_NOT_NULL, LogicalType::BOOLEAN);\n+\t\t\tis_not_null_expr->children.push_back(other_side.Copy());\n+\t\t\tfilter_expressions.push_back(std::move(is_not_null_expr));\n \t\t}\n \t}\n \n-\t// removed DelimGet columns are assigned a new ColumnBinding by Projection/Aggregation, keep track here\n-\tif (proj_or_agg.type == LogicalOperatorType::LOGICAL_PROJECTION) {\n-\t\tfor (auto &cb : proj_or_agg.GetColumnBindings()) {\n-\t\t\tupdater.projection_map[cb] = true;\n-\t\t\tupdater.reverse_proj_or_agg_map[cb] = proj_or_agg.expressions[cb.column_index].get();\n-\t\t\tfor (auto &expr : nulls_are_not_equal_exprs) {\n-\t\t\t\tif (proj_or_agg.expressions[cb.column_index]->Equals(expr.get())) {\n-\t\t\t\t\tupdater.projection_map[cb] = false;\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t} else {\n-\t\tauto &agg = proj_or_agg.Cast<LogicalAggregate>();\n-\n-\t\t// Create a vector of all exprs in the agg\n-\t\tvector<Expression *> all_agg_exprs;\n-\t\tall_agg_exprs.reserve(agg.groups.size() + agg.expressions.size());\n-\t\tfor (auto &expr : agg.groups) {\n-\t\t\tall_agg_exprs.push_back(expr.get());\n-\t\t}\n-\t\tfor (auto &expr : agg.expressions) {\n-\t\t\tall_agg_exprs.push_back(expr.get());\n-\t\t}\n-\n-\t\tfor (auto &cb : agg.GetColumnBindings()) {\n-\t\t\tupdater.projection_map[cb] = true;\n-\t\t\tupdater.reverse_proj_or_agg_map[cb] = all_agg_exprs[cb.column_index];\n-\t\t\tfor (auto &expr : nulls_are_not_equal_exprs) {\n-\t\t\t\tif ((cb.table_index == agg.group_index && agg.groups[cb.column_index]->Equals(expr.get())) ||\n-\t\t\t\t    (cb.table_index == agg.aggregate_index && agg.expressions[cb.column_index]->Equals(expr.get()))) {\n-\t\t\t\t\tupdater.projection_map[cb] = false;\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n+\tif (!all_equality_conditions &&\n+\t    !RemoveInequalityJoinWithDelimGet(delim_join, delim_get_count, join, replacement_bindings)) {\n+\t\treturn false;\n \t}\n \n-\tif (!all_equality_conditions) {\n-\t\t// we can get rid of an inequality join with a DelimGet, but only under specific circumstances\n-\t\tif (!RemoveInequalityCandidate(plan, candidate, updater)) {\n-\t\t\treturn false;\n-\t\t}\n+\tunique_ptr<LogicalOperator> replacement_op = std::move(comparison_join.children[1 - delim_idx]);\n+\tif (!filter_expressions.empty()) { // Create filter if necessary\n+\t\tauto new_filter = make_uniq<LogicalFilter>();\n+\t\tnew_filter->expressions = std::move(filter_expressions);\n+\t\tnew_filter->children.emplace_back(std::move(replacement_op));\n+\t\treplacement_op = std::move(new_filter);\n \t}\n \n-\t// make a filter if needed\n-\tif (!nulls_are_not_equal_exprs.empty() || filter != nullptr) {\n-\t\tauto filter_op = make_uniq<LogicalFilter>();\n-\t\tif (!nulls_are_not_equal_exprs.empty()) {\n-\t\t\t// add an IS NOT NULL filter that was implicitly in JoinCondition::null_values_are_equal\n-\t\t\tfor (auto &expr : nulls_are_not_equal_exprs) {\n-\t\t\t\tauto is_not_null_expr =\n-\t\t\t\t    make_uniq<BoundOperatorExpression>(ExpressionType::OPERATOR_IS_NOT_NULL, LogicalType::BOOLEAN);\n-\t\t\t\tis_not_null_expr->children.push_back(expr.get().Copy());\n-\t\t\t\tfilter_op->expressions.push_back(std::move(is_not_null_expr));\n-\t\t\t}\n-\t\t}\n-\t\tif (filter != nullptr) {\n-\t\t\tfor (auto &expr : filter->expressions) {\n-\t\t\t\tfilter_op->expressions.push_back(std::move(expr));\n-\t\t\t}\n-\t\t}\n-\t\tfilter_op->children.push_back(std::move(join.children[1 - delim_idx]));\n-\t\tjoin.children[1 - delim_idx] = std::move(filter_op);\n-\t}\n-\t// temporarily save deleted operator so its expressions are still available\n-\tupdater.temp_ptr = std::move(proj_or_agg.children[0]);\n-\t// replace the redundant join\n-\tproj_or_agg.children[0] = std::move(join.children[1 - delim_idx]);\n-\treturn true;\n-}\n+\tjoin = std::move(replacement_op);\n \n-static void GetDelimJoins(LogicalOperator &op, vector<LogicalOperator *> &delim_joins) {\n-\tfor (auto &child : op.children) {\n-\t\tGetDelimJoins(*child, delim_joins);\n-\t}\n-\tif (op.type == LogicalOperatorType::LOGICAL_DELIM_JOIN) {\n-\t\tdelim_joins.push_back(&op);\n-\t}\n+\t// TODO: Maybe go from delim join instead to save work\n+\treplacer.VisitOperator(*root);\n+\treturn true;\n }\n \n-static bool HasChild(LogicalOperator *haystack, LogicalOperator *needle, idx_t &side) {\n-\tif (haystack == needle) {\n-\t\treturn true;\n-\t}\n-\tfor (idx_t i = 0; i < haystack->children.size(); i++) {\n-\t\tauto &child = haystack->children[i];\n-\t\tidx_t dummy_side;\n-\t\tif (HasChild(child.get(), needle, dummy_side)) {\n-\t\t\tside = i;\n-\t\t\treturn true;\n-\t\t}\n-\t}\n-\treturn false;\n+static bool InequalityDelimJoinCanBeEliminated(JoinType &join_type) {\n+\treturn join_type == JoinType::ANTI || join_type == JoinType::MARK || join_type == JoinType::SEMI ||\n+\t       join_type == JoinType::SINGLE;\n }\n \n-bool Deliminator::RemoveInequalityCandidate(unique_ptr<LogicalOperator> *plan, unique_ptr<LogicalOperator> *candidate,\n-                                            DeliminatorPlanUpdater &updater) {\n-\tauto &proj_or_agg = **candidate;\n-\t// first, we find a DelimJoin in \"plan\" that has only one DelimGet as a child, which is in \"candidate\"\n-\tif (DelimGetCount(proj_or_agg) != 1) {\n-\t\t// the candidate therefore must have only a single DelimGet in its children\n-\t\treturn false;\n-\t}\n-\n-\tvector<LogicalOperator *> delim_joins;\n-\tGetDelimJoins(**plan, delim_joins);\n-\n-\tLogicalOperator *parent = nullptr;\n-\tidx_t parent_delim_get_side = 0;\n-\tfor (auto dj : delim_joins) {\n-\t\tD_ASSERT(dj->type == LogicalOperatorType::LOGICAL_DELIM_JOIN);\n-\t\tif (!HasChild(dj, &proj_or_agg, parent_delim_get_side)) {\n-\t\t\tcontinue;\n-\t\t}\n-\t\t// we found a parent DelimJoin\n-\t\tif (DelimGetCount(*dj) != 1) {\n-\t\t\t// it has more than one DelimGet children\n-\t\t\tcontinue;\n+bool FindAndReplaceBindings(vector<ColumnBinding> &traced_bindings, const vector<unique_ptr<Expression>> &expressions,\n+                            const vector<ColumnBinding> &current_bindings) {\n+\tfor (auto &binding : traced_bindings) {\n+\t\tidx_t current_idx;\n+\t\tfor (current_idx = 0; current_idx < expressions.size(); current_idx++) {\n+\t\t\tif (binding == current_bindings[current_idx]) {\n+\t\t\t\tbreak;\n+\t\t\t}\n \t\t}\n \n-\t\t// we can only remove inequality join with a DelimGet if the parent DelimJoin has one of these join types\n-\t\tauto &delim_join = dj->Cast<LogicalDelimJoin>();\n-\t\tif (!InequalityDelimJoinCanBeEliminated(delim_join.join_type)) {\n-\t\t\tcontinue;\n+\t\tif (current_idx == expressions.size() || expressions[current_idx]->type != ExpressionType::BOUND_COLUMN_REF) {\n+\t\t\treturn false; // Didn't find / can't deal with non-colref\n \t\t}\n \n-\t\tparent = dj;\n-\t\tbreak;\n-\t}\n-\tif (!parent) {\n-\t\treturn false;\n+\t\tauto &colref = expressions[current_idx]->Cast<BoundColumnRefExpression>();\n+\t\tbinding = colref.binding;\n \t}\n+\treturn true;\n+}\n \n-\t// we found the parent delim join, and we may be able to remove the child DelimGet join\n-\t// but we need to make sure that their conditions refer to exactly the same columns\n-\tauto &parent_delim_join = parent->Cast<LogicalDelimJoin>();\n-\tauto &join = proj_or_agg.children[0]->Cast<LogicalComparisonJoin>();\n-\tif (parent_delim_join.conditions.size() != join.conditions.size()) {\n-\t\t// different number of conditions, can't replace\n+bool Deliminator::RemoveInequalityJoinWithDelimGet(LogicalDelimJoin &delim_join, const idx_t delim_get_count,\n+                                                   unique_ptr<LogicalOperator> &join,\n+                                                   const vector<ReplacementBinding> &replacement_bindings) {\n+\tauto &comparison_join = join->Cast<LogicalComparisonJoin>();\n+\tauto &delim_conditions = delim_join.conditions;\n+\tconst auto &join_conditions = comparison_join.conditions;\n+\tif (delim_get_count != 1 || !InequalityDelimJoinCanBeEliminated(delim_join.join_type) ||\n+\t    delim_conditions.size() != join_conditions.size()) {\n \t\treturn false;\n \t}\n \n-\t// we can only do this optimization under the following conditions:\n-\t// 1. all join expressions coming from the DelimGet side are colrefs\n-\t// 2. these expressions refer to colrefs coming from the proj/agg on top of the child DelimGet join\n-\t// 3. the expression (before it was proj/agg) can be found in the conditions of the child DelimGet join\n-\tfor (auto &parent_cond : parent_delim_join.conditions) {\n-\t\tauto &parent_expr = parent_delim_get_side == 0 ? parent_cond.left : parent_cond.right;\n-\t\tif (parent_expr->type != ExpressionType::BOUND_COLUMN_REF) {\n-\t\t\t// can only deal with colrefs\n-\t\t\treturn false;\n+\t// TODO: we cannot perform the optimization here because our pure inequality joins don't implement\n+\t//  JoinType::SINGLE yet\n+\tif (delim_join.join_type == JoinType::SINGLE) {\n+\t\tbool has_one_equality = false;\n+\t\tfor (auto &cond : join_conditions) {\n+\t\t\thas_one_equality = has_one_equality || IsEqualityJoinCondition(cond);\n \t\t}\n-\t\tauto &parent_colref = parent_expr->Cast<BoundColumnRefExpression>();\n-\t\tauto it = updater.reverse_proj_or_agg_map.find(parent_colref.binding);\n-\t\tif (it == updater.reverse_proj_or_agg_map.end()) {\n-\t\t\t// refers to a column that was not in the child DelimGet join\n+\t\tif (!has_one_equality) {\n \t\t\treturn false;\n \t\t}\n-\t\t// try to find the corresponding child condition\n-\t\t// TODO: can be more flexible - allow CAST\n-\t\tauto &child_expr = *it->second;\n-\t\tbool found = false;\n-\t\tfor (auto &child_cond : join.conditions) {\n-\t\t\tif (child_cond.left->Equals(child_expr) || child_cond.right->Equals(child_expr)) {\n-\t\t\t\tfound = true;\n-\t\t\t\tbreak;\n-\t\t\t}\n-\t\t}\n-\t\tif (!found) {\n-\t\t\t// could not find the mapped expression in the child condition expressions\n+\t}\n+\n+\t// We only support colref's\n+\tvector<ColumnBinding> traced_bindings;\n+\tfor (const auto &cond : delim_conditions) {\n+\t\tif (cond.right->type != ExpressionType::BOUND_COLUMN_REF) {\n \t\t\treturn false;\n \t\t}\n+\t\tauto &colref = cond.right->Cast<BoundColumnRefExpression>();\n+\t\ttraced_bindings.emplace_back(colref.binding);\n \t}\n \n-\t// TODO: we cannot perform the optimization here because our pure inequality joins don't implement\n-\t//  JoinType::SINGLE yet\n-\tif (parent_delim_join.join_type == JoinType::SINGLE) {\n-\t\tbool has_one_equality = false;\n-\t\tfor (auto &cond : join.conditions) {\n-\t\t\thas_one_equality = has_one_equality || IsEqualityJoinCondition(cond);\n+\t// Now we trace down the bindings to the join (for now, we only trace it through a few operators)\n+\treference<LogicalOperator> current_op = *delim_join.children[1];\n+\twhile (&current_op.get() != join.get()) {\n+\t\tif (current_op.get().children.size() != 1) {\n+\t\t\treturn false;\n \t\t}\n-\t\tif (!has_one_equality) {\n+\n+\t\tswitch (current_op.get().type) {\n+\t\tcase LogicalOperatorType::LOGICAL_PROJECTION:\n+\t\t\tFindAndReplaceBindings(traced_bindings, current_op.get().expressions, current_op.get().GetColumnBindings());\n+\t\t\tbreak;\n+\t\tcase LogicalOperatorType::LOGICAL_FILTER:\n+\t\t\tbreak; // Doesn't change bindings\n+\t\tdefault:\n \t\t\treturn false;\n \t\t}\n+\t\tcurrent_op = *current_op.get().children[0];\n \t}\n \n-\t// we are now sure that we can remove the child DelimGet join, so we basically do the same loop as above\n-\t// this time without checks because we already did them, and replace the expressions\n-\tfor (auto &parent_cond : parent_delim_join.conditions) {\n-\t\tauto &parent_expr = parent_delim_get_side == 0 ? parent_cond.left : parent_cond.right;\n-\t\tauto &parent_colref = parent_expr->Cast<BoundColumnRefExpression>();\n-\t\tauto it = updater.reverse_proj_or_agg_map.find(parent_colref.binding);\n-\t\tauto &child_expr = *it->second;\n-\t\tfor (auto &child_cond : join.conditions) {\n-\t\t\tif (!child_cond.left->Equals(child_expr) && !child_cond.right->Equals(child_expr)) {\n-\t\t\t\tcontinue;\n+\t// Get the index (left or right) of the DelimGet side of the join\n+\tconst idx_t delim_idx = OperatorIsDelimGet(*join->children[0]) ? 0 : 1;\n+\n+\tbool found_all = true;\n+\tfor (idx_t cond_idx = 0; cond_idx < delim_conditions.size(); cond_idx++) {\n+\t\tauto &delim_condition = delim_conditions[cond_idx];\n+\t\tconst auto &traced_binding = traced_bindings[cond_idx];\n+\n+\t\tbool found = false;\n+\t\tfor (auto &join_condition : join_conditions) {\n+\t\t\tauto &delim_side = delim_idx == 0 ? *join_condition.left : *join_condition.right;\n+\t\t\tauto &colref = delim_side.Cast<BoundColumnRefExpression>();\n+\t\t\tif (colref.binding == traced_binding) {\n+\t\t\t\tdelim_condition.comparison = FlipComparisonExpression(join_condition.comparison);\n+\t\t\t\tfound = true;\n+\t\t\t\tbreak;\n \t\t\t}\n-\t\t\tparent_expr = make_uniq<BoundColumnRefExpression>(parent_expr->alias, parent_expr->return_type, it->first);\n-\t\t\tparent_cond.comparison =\n-\t\t\t    parent_delim_get_side == 0 ? child_cond.comparison : FlipComparisonExpression(child_cond.comparison);\n-\t\t\tbreak;\n \t\t}\n+\t\tfound_all = found_all && found;\n \t}\n \n-\t// no longer needs to be a delim join\n-\tparent_delim_join.duplicate_eliminated_columns.clear();\n-\tparent_delim_join.type = LogicalOperatorType::LOGICAL_COMPARISON_JOIN;\n-\n-\treturn true;\n+\treturn found_all;\n }\n \n } // namespace duckdb\ndiff --git a/src/optimizer/filter_pushdown.cpp b/src/optimizer/filter_pushdown.cpp\nindex c76da8c81a4c..91e1bb7d1ba6 100644\n--- a/src/optimizer/filter_pushdown.cpp\n+++ b/src/optimizer/filter_pushdown.cpp\n@@ -47,11 +47,20 @@ unique_ptr<LogicalOperator> FilterPushdown::Rewrite(unique_ptr<LogicalOperator>\n \t}\n }\n \n+ClientContext &FilterPushdown::GetContext() {\n+\treturn optimizer.GetContext();\n+}\n+\n unique_ptr<LogicalOperator> FilterPushdown::PushdownJoin(unique_ptr<LogicalOperator> op) {\n \tD_ASSERT(op->type == LogicalOperatorType::LOGICAL_COMPARISON_JOIN ||\n \t         op->type == LogicalOperatorType::LOGICAL_ASOF_JOIN || op->type == LogicalOperatorType::LOGICAL_ANY_JOIN ||\n \t         op->type == LogicalOperatorType::LOGICAL_DELIM_JOIN);\n \tauto &join = op->Cast<LogicalJoin>();\n+\tif (!join.left_projection_map.empty() || !join.right_projection_map.empty()) {\n+\t\t// cannot push down further otherwise the projection maps won't be preserved\n+\t\treturn FinishPushdown(std::move(op));\n+\t}\n+\n \tunordered_set<idx_t> left_bindings, right_bindings;\n \tLogicalJoin::GetTableReferences(*op->children[0], left_bindings);\n \tLogicalJoin::GetTableReferences(*op->children[1], right_bindings);\ndiff --git a/src/optimizer/join_order/estimated_properties.cpp b/src/optimizer/join_order/estimated_properties.cpp\nindex 3fb1ba65783f..d3841a1bb3fb 100644\n--- a/src/optimizer/join_order/estimated_properties.cpp\n+++ b/src/optimizer/join_order/estimated_properties.cpp\n@@ -14,10 +14,17 @@ idx_t EstimatedProperties::GetCardinality() const {\n \treturn MinValue<double>(cardinality, max_idx_t);\n }\n \n+template <>\n double EstimatedProperties::GetCost() const {\n \treturn cost;\n }\n \n+template <>\n+idx_t EstimatedProperties::GetCost() const {\n+\tauto max_idx_t = NumericLimits<idx_t>::Maximum() - 10000;\n+\treturn MinValue<double>(cost, max_idx_t);\n+}\n+\n void EstimatedProperties::SetCardinality(double new_card) {\n \tcardinality = new_card;\n }\ndiff --git a/src/optimizer/join_order/join_node.cpp b/src/optimizer/join_order/join_node.cpp\nindex 07c2272f950b..c63eb39264f1 100644\n--- a/src/optimizer/join_order/join_node.cpp\n+++ b/src/optimizer/join_order/join_node.cpp\n@@ -23,7 +23,7 @@ unique_ptr<EstimatedProperties> EstimatedProperties::Copy() {\n }\n \n double JoinNode::GetCost() {\n-\treturn estimated_props->GetCost();\n+\treturn estimated_props->GetCost<double>();\n }\n \n void JoinNode::SetCost(double cost) {\n@@ -54,7 +54,7 @@ string JoinNode::ToString() {\n \t\tis_cartesian = (GetCardinality<double>() == left->GetCardinality<double>() * right->GetCardinality<double>());\n \t}\n \tresult += \"cartesian = \" + to_string(is_cartesian) + \"\\n\";\n-\tresult += \"cost = \" + to_string(estimated_props->GetCost()) + \"\\n\";\n+\tresult += \"cost = \" + to_string(estimated_props->GetCost<double>()) + \"\\n\";\n \tresult += \"left = \\n\";\n \tif (left) {\n \t\tresult += left->ToString();\ndiff --git a/src/optimizer/join_order/join_order_optimizer.cpp b/src/optimizer/join_order/join_order_optimizer.cpp\nindex 28c48bba383b..088ebfddf66d 100644\n--- a/src/optimizer/join_order/join_order_optimizer.cpp\n+++ b/src/optimizer/join_order/join_order_optimizer.cpp\n@@ -5,6 +5,7 @@\n #include \"duckdb/planner/expression/list.hpp\"\n #include \"duckdb/planner/expression_iterator.hpp\"\n #include \"duckdb/planner/operator/list.hpp\"\n+#include \"duckdb/common/queue.hpp\"\n \n #include <algorithm>\n #include <cmath>\n@@ -323,6 +324,65 @@ void JoinOrderOptimizer::UpdateJoinNodesInFullPlan(JoinNode &node) {\n \t}\n }\n \n+static vector<unordered_set<idx_t>> AddSuperSets(const vector<unordered_set<idx_t>> &current,\n+                                                 const vector<idx_t> &all_neighbors) {\n+\tvector<unordered_set<idx_t>> ret;\n+\n+\tfor (const auto &neighbor_set : current) {\n+\t\tauto max_val = std::max_element(neighbor_set.begin(), neighbor_set.end());\n+\t\tfor (const auto &neighbor : all_neighbors) {\n+\t\t\tif (*max_val >= neighbor) {\n+\t\t\t\tcontinue;\n+\t\t\t}\n+\t\t\tif (neighbor_set.count(neighbor) == 0) {\n+\t\t\t\tunordered_set<idx_t> new_set;\n+\t\t\t\tfor (auto &n : neighbor_set) {\n+\t\t\t\t\tnew_set.insert(n);\n+\t\t\t\t}\n+\t\t\t\tnew_set.insert(neighbor);\n+\t\t\t\tret.push_back(new_set);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\treturn ret;\n+}\n+\n+// works by first creating all sets with cardinality 1\n+// then iterates over each previously created group of subsets and will only add a neighbor if the neighbor\n+// is greater than all relations in the set.\n+static vector<unordered_set<idx_t>> GetAllNeighborSets(vector<idx_t> neighbors) {\n+\tvector<unordered_set<idx_t>> ret;\n+\tsort(neighbors.begin(), neighbors.end());\n+\tvector<unordered_set<idx_t>> added;\n+\tfor (auto &neighbor : neighbors) {\n+\t\tadded.push_back(unordered_set<idx_t>({neighbor}));\n+\t\tret.push_back(unordered_set<idx_t>({neighbor}));\n+\t}\n+\tdo {\n+\t\tadded = AddSuperSets(added, neighbors);\n+\t\tfor (auto &d : added) {\n+\t\t\tret.push_back(d);\n+\t\t}\n+\t} while (!added.empty());\n+#if DEBUG\n+\t// drive by test to make sure we have an accurate amount of\n+\t// subsets, and that each neighbor is in a correct amount\n+\t// of those subsets.\n+\tD_ASSERT(ret.size() == pow(2, neighbors.size()) - 1);\n+\tfor (auto &n : neighbors) {\n+\t\tidx_t count = 0;\n+\t\tfor (auto &set : ret) {\n+\t\t\tif (set.count(n) >= 1) {\n+\t\t\t\tcount += 1;\n+\t\t\t}\n+\t\t}\n+\t\tD_ASSERT(count == pow(2, neighbors.size() - 1));\n+\t}\n+#endif\n+\treturn ret;\n+}\n+\n JoinNode &JoinOrderOptimizer::EmitPair(JoinRelationSet &left, JoinRelationSet &right,\n                                        const vector<reference<NeighborInfo>> &info) {\n \t// get the left and right join plans\n@@ -405,8 +465,19 @@ bool JoinOrderOptimizer::EmitCSG(JoinRelationSet &node) {\n \t//! Neighbors should be reversed when iterating over them.\n \tstd::sort(neighbors.begin(), neighbors.end(), std::greater_equal<idx_t>());\n \tfor (idx_t i = 0; i < neighbors.size() - 1; i++) {\n-\t\tD_ASSERT(neighbors[i] >= neighbors[i + 1]);\n+\t\tD_ASSERT(neighbors[i] > neighbors[i + 1]);\n+\t}\n+\n+\t// Dphyp paper missiing this.\n+\t// Because we are traversing in reverse order, we need to add neighbors whose number is smaller than the current\n+\t// node to exclusion_set\n+\t// This avoids duplicated enumeration\n+\tunordered_set<idx_t> new_exclusion_set = exclusion_set;\n+\tfor (idx_t i = 0; i < neighbors.size(); ++i) {\n+\t\tD_ASSERT(new_exclusion_set.find(neighbors[i]) == new_exclusion_set.end());\n+\t\tnew_exclusion_set.insert(neighbors[i]);\n \t}\n+\n \tfor (auto neighbor : neighbors) {\n \t\t// since the GetNeighbors only returns the smallest element in a list, the entry might not be connected to\n \t\t// (only!) this neighbor,  hence we have to do a connectedness check before we can emit it\n@@ -417,27 +488,35 @@ bool JoinOrderOptimizer::EmitCSG(JoinRelationSet &node) {\n \t\t\t\treturn false;\n \t\t\t}\n \t\t}\n-\t\tif (!EnumerateCmpRecursive(node, neighbor_relation, exclusion_set)) {\n+\n+\t\tif (!EnumerateCmpRecursive(node, neighbor_relation, new_exclusion_set)) {\n \t\t\treturn false;\n \t\t}\n+\n+\t\tnew_exclusion_set.erase(neighbor);\n \t}\n \treturn true;\n }\n \n bool JoinOrderOptimizer::EnumerateCmpRecursive(JoinRelationSet &left, JoinRelationSet &right,\n-                                               unordered_set<idx_t> exclusion_set) {\n+                                               unordered_set<idx_t> &exclusion_set) {\n \t// get the neighbors of the second relation under the exclusion set\n \tauto neighbors = query_graph.GetNeighbors(right, exclusion_set);\n \tif (neighbors.empty()) {\n \t\treturn true;\n \t}\n+\n+\tauto all_subset = GetAllNeighborSets(neighbors);\n \tvector<reference<JoinRelationSet>> union_sets;\n-\tunion_sets.reserve(neighbors.size());\n-\tfor (idx_t i = 0; i < neighbors.size(); i++) {\n-\t\tauto &neighbor = set_manager.GetJoinRelation(neighbors[i]);\n+\tunion_sets.reserve(all_subset.size());\n+\tfor (const auto &rel_set : all_subset) {\n+\t\tauto &neighbor = set_manager.GetJoinRelation(rel_set);\n \t\t// emit the combinations of this node and its neighbors\n \t\tauto &combined_set = set_manager.Union(right, neighbor);\n-\t\tif (combined_set.count > right.count && plans.find(&combined_set) != plans.end()) {\n+\t\t// If combined_set.count == right.count, This means we found a neighbor that has been present before\n+\t\t// This means we didn't set exclusion_set correctly.\n+\t\tD_ASSERT(combined_set.count > right.count);\n+\t\tif (plans.find(&combined_set) != plans.end()) {\n \t\t\tauto connections = query_graph.GetConnections(left, combined_set);\n \t\t\tif (!connections.empty()) {\n \t\t\t\tif (!TryEmitPair(left, combined_set, connections)) {\n@@ -447,11 +526,15 @@ bool JoinOrderOptimizer::EnumerateCmpRecursive(JoinRelationSet &left, JoinRelati\n \t\t}\n \t\tunion_sets.push_back(combined_set);\n \t}\n-\t// recursively enumerate the sets\n+\n \tunordered_set<idx_t> new_exclusion_set = exclusion_set;\n-\tfor (idx_t i = 0; i < neighbors.size(); i++) {\n+\tfor (const auto &neighbor : neighbors) {\n+\t\tnew_exclusion_set.insert(neighbor);\n+\t}\n+\n+\t// recursively enumerate the sets\n+\tfor (idx_t i = 0; i < union_sets.size(); i++) {\n \t\t// updated the set of excluded entries with this neighbor\n-\t\tnew_exclusion_set.insert(neighbors[i]);\n \t\tif (!EnumerateCmpRecursive(left, union_sets[i], new_exclusion_set)) {\n \t\t\treturn false;\n \t\t}\n@@ -465,26 +548,30 @@ bool JoinOrderOptimizer::EnumerateCSGRecursive(JoinRelationSet &node, unordered_\n \tif (neighbors.empty()) {\n \t\treturn true;\n \t}\n+\n+\tauto all_subset = GetAllNeighborSets(neighbors);\n \tvector<reference<JoinRelationSet>> union_sets;\n-\tunion_sets.reserve(neighbors.size());\n-\tfor (idx_t i = 0; i < neighbors.size(); i++) {\n-\t\tauto &neighbor = set_manager.GetJoinRelation(neighbors[i]);\n+\tunion_sets.reserve(all_subset.size());\n+\tfor (const auto &rel_set : all_subset) {\n+\t\tauto &neighbor = set_manager.GetJoinRelation(rel_set);\n \t\t// emit the combinations of this node and its neighbors\n \t\tauto &new_set = set_manager.Union(node, neighbor);\n-\t\tif (new_set.count > node.count && plans.find(&new_set) != plans.end()) {\n+\t\tD_ASSERT(new_set.count > node.count);\n+\t\tif (plans.find(&new_set) != plans.end()) {\n \t\t\tif (!EmitCSG(new_set)) {\n \t\t\t\treturn false;\n \t\t\t}\n \t\t}\n \t\tunion_sets.push_back(new_set);\n \t}\n-\t// recursively enumerate the sets\n+\n \tunordered_set<idx_t> new_exclusion_set = exclusion_set;\n-\tfor (idx_t i = 0; i < neighbors.size(); i++) {\n-\t\t// Reset the exclusion set so that the algorithm considers all combinations\n-\t\t// of the exclusion_set with a subset of neighbors.\n-\t\tnew_exclusion_set = exclusion_set;\n-\t\tnew_exclusion_set.insert(neighbors[i]);\n+\tfor (const auto &neighbor : neighbors) {\n+\t\tnew_exclusion_set.insert(neighbor);\n+\t}\n+\n+\t// recursively enumerate the sets\n+\tfor (idx_t i = 0; i < union_sets.size(); i++) {\n \t\t// updated the set of excluded entries with this neighbor\n \t\tif (!EnumerateCSGRecursive(union_sets[i], new_exclusion_set)) {\n \t\t\treturn false;\n@@ -505,7 +592,7 @@ bool JoinOrderOptimizer::SolveJoinOrderExactly() {\n \t\t}\n \t\t// initialize the set of exclusion_set as all the nodes with a number below this\n \t\tunordered_set<idx_t> exclusion_set;\n-\t\tfor (idx_t j = 0; j < i - 1; j++) {\n+\t\tfor (idx_t j = 0; j < i; j++) {\n \t\t\texclusion_set.insert(j);\n \t\t}\n \t\t// then we recursively search for neighbors that do not belong to the banned entries\n@@ -516,63 +603,6 @@ bool JoinOrderOptimizer::SolveJoinOrderExactly() {\n \treturn true;\n }\n \n-static vector<unordered_set<idx_t>> AddSuperSets(vector<unordered_set<idx_t>> current,\n-                                                 const vector<idx_t> &all_neighbors) {\n-\tvector<unordered_set<idx_t>> ret;\n-\tfor (auto &neighbor : all_neighbors) {\n-\t\tfor (auto &neighbor_set : current) {\n-\t\t\tauto max_val = std::max_element(neighbor_set.begin(), neighbor_set.end());\n-\t\t\tif (*max_val >= neighbor) {\n-\t\t\t\tcontinue;\n-\t\t\t}\n-\t\t\tif (neighbor_set.count(neighbor) == 0) {\n-\t\t\t\tunordered_set<idx_t> new_set;\n-\t\t\t\tfor (auto &n : neighbor_set) {\n-\t\t\t\t\tnew_set.insert(n);\n-\t\t\t\t}\n-\t\t\t\tnew_set.insert(neighbor);\n-\t\t\t\tret.push_back(new_set);\n-\t\t\t}\n-\t\t}\n-\t}\n-\treturn ret;\n-}\n-\n-// works by first creating all sets with cardinality 1\n-// then iterates over each previously created group of subsets and will only add a neighbor if the neighbor\n-// is greater than all relations in the set.\n-static vector<unordered_set<idx_t>> GetAllNeighborSets(unordered_set<idx_t> &exclusion_set, vector<idx_t> neighbors) {\n-\tvector<unordered_set<idx_t>> ret;\n-\tsort(neighbors.begin(), neighbors.end());\n-\tvector<unordered_set<idx_t>> added;\n-\tfor (auto &neighbor : neighbors) {\n-\t\tadded.push_back(unordered_set<idx_t>({neighbor}));\n-\t\tret.push_back(unordered_set<idx_t>({neighbor}));\n-\t}\n-\tdo {\n-\t\tadded = AddSuperSets(added, neighbors);\n-\t\tfor (auto &d : added) {\n-\t\t\tret.push_back(d);\n-\t\t}\n-\t} while (!added.empty());\n-#if DEBUG\n-\t// drive by test to make sure we have an accurate amount of\n-\t// subsets, and that each neighbor is in a correct amount\n-\t// of those subsets.\n-\tD_ASSERT(ret.size() == pow(2, neighbors.size()) - 1);\n-\tfor (auto &n : neighbors) {\n-\t\tidx_t count = 0;\n-\t\tfor (auto &set : ret) {\n-\t\t\tif (set.count(n) >= 1) {\n-\t\t\t\tcount += 1;\n-\t\t\t}\n-\t\t}\n-\t\tD_ASSERT(count == pow(2, neighbors.size() - 1));\n-\t}\n-#endif\n-\treturn ret;\n-}\n-\n void JoinOrderOptimizer::UpdateDPTree(JoinNode &new_plan) {\n \tif (!NodeInFullPlan(new_plan)) {\n \t\t// if the new node is not in the full plan, feel free to return\n@@ -586,8 +616,8 @@ void JoinOrderOptimizer::UpdateDPTree(JoinNode &new_plan) {\n \t\texclusion_set.insert(new_set.relations[i]);\n \t}\n \tauto neighbors = query_graph.GetNeighbors(new_set, exclusion_set);\n-\tauto all_neighbors = GetAllNeighborSets(exclusion_set, neighbors);\n-\tfor (auto neighbor : all_neighbors) {\n+\tauto all_neighbors = GetAllNeighborSets(neighbors);\n+\tfor (const auto &neighbor : all_neighbors) {\n \t\tauto &neighbor_relation = set_manager.GetJoinRelation(neighbor);\n \t\tauto &combined_set = set_manager.Union(new_set, neighbor_relation);\n \n@@ -820,8 +850,9 @@ GenerateJoinRelation JoinOrderOptimizer::GenerateJoins(vector<unique_ptr<Logical\n \t\t// FILTER on top of GET, add estimated properties to both\n \t\tauto &filter_props = *result_operator->estimated_props;\n \t\tauto &child_operator = *result_operator->children[0];\n-\t\tchild_operator.estimated_props = make_uniq<EstimatedProperties>(\n-\t\t    filter_props.GetCardinality<double>() / CardinalityEstimator::DEFAULT_SELECTIVITY, filter_props.GetCost());\n+\t\tchild_operator.estimated_props = make_uniq<EstimatedProperties>(filter_props.GetCardinality<double>() /\n+\t\t                                                                    CardinalityEstimator::DEFAULT_SELECTIVITY,\n+\t\t                                                                filter_props.GetCost<double>());\n \t\tchild_operator.estimated_cardinality = child_operator.estimated_props->GetCardinality<idx_t>();\n \t\tchild_operator.has_estimated_cardinality = true;\n \t}\ndiff --git a/src/optimizer/join_order/join_relation_set.cpp b/src/optimizer/join_order/join_relation_set.cpp\nindex c09230a39f97..576d5eabee13 100644\n--- a/src/optimizer/join_order/join_relation_set.cpp\n+++ b/src/optimizer/join_order/join_relation_set.cpp\n@@ -65,7 +65,7 @@ JoinRelationSet &JoinRelationSetManager::GetJoinRelation(idx_t index) {\n \treturn GetJoinRelation(std::move(relations), count);\n }\n \n-JoinRelationSet &JoinRelationSetManager::GetJoinRelation(unordered_set<idx_t> &bindings) {\n+JoinRelationSet &JoinRelationSetManager::GetJoinRelation(const unordered_set<idx_t> &bindings) {\n \t// create a sorted vector of the relations\n \tunsafe_unique_array<idx_t> relations = bindings.empty() ? nullptr : make_unsafe_uniq_array<idx_t>(bindings.size());\n \tidx_t count = 0;\n@@ -94,16 +94,12 @@ JoinRelationSet &JoinRelationSetManager::Union(JoinRelationSet &left, JoinRelati\n \t\t\t\trelations[count++] = left.relations[i];\n \t\t\t}\n \t\t\tbreak;\n-\t\t} else if (left.relations[i] == right.relations[j]) {\n-\t\t\t// equivalent, add only one of the two pairs\n-\t\t\trelations[count++] = left.relations[i];\n-\t\t\ti++;\n-\t\t\tj++;\n \t\t} else if (left.relations[i] < right.relations[j]) {\n \t\t\t// left is smaller, progress left and add it to the set\n \t\t\trelations[count++] = left.relations[i];\n \t\t\ti++;\n \t\t} else {\n+\t\t\tD_ASSERT(left.relations[i] > right.relations[j]);\n \t\t\t// right is smaller, progress right and add it to the set\n \t\t\trelations[count++] = right.relations[j];\n \t\t\tj++;\ndiff --git a/src/optimizer/join_order/query_graph.cpp b/src/optimizer/join_order/query_graph.cpp\nindex a33a39289e9e..108b4bce8fa8 100644\n--- a/src/optimizer/join_order/query_graph.cpp\n+++ b/src/optimizer/join_order/query_graph.cpp\n@@ -76,22 +76,30 @@ void QueryGraph::CreateEdge(JoinRelationSet &left, JoinRelationSet &right, optio\n \tinfo.neighbors.push_back(std::move(n));\n }\n \n+void QueryGraph::EnumerateNeighborsDFS(JoinRelationSet &node, reference<QueryEdge> info, idx_t index,\n+                                       const std::function<bool(NeighborInfo &)> &callback) {\n+\n+\tfor (auto &neighbor : info.get().neighbors) {\n+\t\tif (callback(*neighbor)) {\n+\t\t\treturn;\n+\t\t}\n+\t}\n+\n+\tfor (idx_t node_index = index; node_index < node.count; ++node_index) {\n+\t\tauto iter = info.get().children.find(node.relations[node_index]);\n+\t\tif (iter != info.get().children.end()) {\n+\t\t\treference<QueryEdge> new_info = *iter->second;\n+\t\t\tEnumerateNeighborsDFS(node, new_info, node_index + 1, callback);\n+\t\t}\n+\t}\n+}\n+\n void QueryGraph::EnumerateNeighbors(JoinRelationSet &node, const std::function<bool(NeighborInfo &)> &callback) {\n \tfor (idx_t j = 0; j < node.count; j++) {\n-\t\treference<QueryEdge> info = root;\n-\t\tfor (idx_t i = j; i < node.count; i++) {\n-\t\t\tauto entry = info.get().children.find(node.relations[i]);\n-\t\t\tif (entry == info.get().children.end()) {\n-\t\t\t\t// node not found\n-\t\t\t\tbreak;\n-\t\t\t}\n-\t\t\t// check if any subset of the other set is in this sets neighbors\n-\t\t\tinfo = *entry->second;\n-\t\t\tfor (auto &neighbor : info.get().neighbors) {\n-\t\t\t\tif (callback(*neighbor)) {\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n-\t\t\t}\n+\t\tauto iter = root.children.find(node.relations[j]);\n+\t\tif (iter != root.children.end()) {\n+\t\t\treference<QueryEdge> new_info = *iter->second;\n+\t\t\tEnumerateNeighborsDFS(node, new_info, j + 1, callback);\n \t\t}\n \t}\n }\ndiff --git a/src/optimizer/optimizer.cpp b/src/optimizer/optimizer.cpp\nindex 07b15a3b0b78..db623cb94bdb 100644\n--- a/src/optimizer/optimizer.cpp\n+++ b/src/optimizer/optimizer.cpp\n@@ -1,27 +1,28 @@\n #include \"duckdb/optimizer/optimizer.hpp\"\n \n #include \"duckdb/execution/column_binding_resolver.hpp\"\n-#include \"duckdb/execution/expression_executor.hpp\"\n #include \"duckdb/main/client_context.hpp\"\n #include \"duckdb/main/config.hpp\"\n #include \"duckdb/main/query_profiler.hpp\"\n #include \"duckdb/optimizer/column_lifetime_optimizer.hpp\"\n #include \"duckdb/optimizer/common_aggregate_optimizer.hpp\"\n+#include \"duckdb/optimizer/compressed_materialization.hpp\"\n #include \"duckdb/optimizer/cse_optimizer.hpp\"\n #include \"duckdb/optimizer/deliminator.hpp\"\n-#include \"duckdb/optimizer/unnest_rewriter.hpp\"\n #include \"duckdb/optimizer/expression_heuristics.hpp\"\n #include \"duckdb/optimizer/filter_pullup.hpp\"\n #include \"duckdb/optimizer/filter_pushdown.hpp\"\n #include \"duckdb/optimizer/in_clause_rewriter.hpp\"\n #include \"duckdb/optimizer/join_order/join_order_optimizer.hpp\"\n #include \"duckdb/optimizer/regex_range_filter.hpp\"\n+#include \"duckdb/optimizer/remove_duplicate_groups.hpp\"\n #include \"duckdb/optimizer/remove_unused_columns.hpp\"\n #include \"duckdb/optimizer/rule/equal_or_null_simplification.hpp\"\n #include \"duckdb/optimizer/rule/in_clause_simplification.hpp\"\n #include \"duckdb/optimizer/rule/list.hpp\"\n #include \"duckdb/optimizer/statistics_propagator.hpp\"\n #include \"duckdb/optimizer/topn_optimizer.hpp\"\n+#include \"duckdb/optimizer/unnest_rewriter.hpp\"\n #include \"duckdb/planner/binder.hpp\"\n #include \"duckdb/planner/planner.hpp\"\n \n@@ -52,6 +53,10 @@ Optimizer::Optimizer(Binder &binder, ClientContext &context) : context(context),\n #endif\n }\n \n+ClientContext &Optimizer::GetContext() {\n+\treturn context;\n+}\n+\n void Optimizer::RunOptimizer(OptimizerType type, const std::function<void()> &callback) {\n \tauto &config = DBConfig::GetConfig(context);\n \tif (config.options.disabled_optimizers.find(type) != config.options.disabled_optimizers.end()) {\n@@ -73,6 +78,16 @@ void Optimizer::Verify(LogicalOperator &op) {\n \n unique_ptr<LogicalOperator> Optimizer::Optimize(unique_ptr<LogicalOperator> plan_p) {\n \tVerify(*plan_p);\n+\n+\tswitch (plan_p->type) {\n+\tcase LogicalOperatorType::LOGICAL_TRANSACTION:\n+\tcase LogicalOperatorType::LOGICAL_SET:\n+\tcase LogicalOperatorType::LOGICAL_PRAGMA:\n+\t\treturn plan_p;\n+\tdefault:\n+\t\tbreak;\n+\t}\n+\n \tthis->plan = std::move(plan_p);\n \t// first we perform expression rewrites using the ExpressionRewriter\n \t// this does not change the logical plan structure, but only simplifies the expression trees\n@@ -96,8 +111,14 @@ unique_ptr<LogicalOperator> Optimizer::Optimize(unique_ptr<LogicalOperator> plan\n \t});\n \n \tRunOptimizer(OptimizerType::IN_CLAUSE, [&]() {\n-\t\tInClauseRewriter rewriter(context, *this);\n-\t\tplan = rewriter.Rewrite(std::move(plan));\n+\t\tInClauseRewriter ic_rewriter(context, *this);\n+\t\tplan = ic_rewriter.Rewrite(std::move(plan));\n+\t});\n+\n+\t// removes any redundant DelimGets/DelimJoins\n+\tRunOptimizer(OptimizerType::DELIMINATOR, [&]() {\n+\t\tDeliminator deliminator;\n+\t\tplan = deliminator.Optimize(std::move(plan));\n \t});\n \n \t// then we perform the join ordering optimization\n@@ -107,12 +128,6 @@ unique_ptr<LogicalOperator> Optimizer::Optimize(unique_ptr<LogicalOperator> plan\n \t\tplan = optimizer.Optimize(std::move(plan));\n \t});\n \n-\t// removes any redundant DelimGets/DelimJoins\n-\tRunOptimizer(OptimizerType::DELIMINATOR, [&]() {\n-\t\tDeliminator deliminator(context);\n-\t\tplan = deliminator.Optimize(std::move(plan));\n-\t});\n-\n \t// rewrites UNNESTs in DelimJoins by moving them to the projection\n \tRunOptimizer(OptimizerType::UNNEST_REWRITER, [&]() {\n \t\tUnnestRewriter unnest_rewriter;\n@@ -125,10 +140,10 @@ unique_ptr<LogicalOperator> Optimizer::Optimize(unique_ptr<LogicalOperator> plan\n \t\tunused.VisitOperator(*plan);\n \t});\n \n-\t// perform statistics propagation\n-\tRunOptimizer(OptimizerType::STATISTICS_PROPAGATION, [&]() {\n-\t\tStatisticsPropagator propagator(context);\n-\t\tpropagator.PropagateStatistics(plan);\n+\t// Remove duplicate groups from aggregates\n+\tRunOptimizer(OptimizerType::DUPLICATE_GROUPS, [&]() {\n+\t\tRemoveDuplicateGroups remove;\n+\t\tremove.VisitOperator(*plan);\n \t});\n \n \t// then we extract common subexpressions inside the different operators\n@@ -137,16 +152,38 @@ unique_ptr<LogicalOperator> Optimizer::Optimize(unique_ptr<LogicalOperator> plan\n \t\tcse_optimizer.VisitOperator(*plan);\n \t});\n \n+\t// creates projection maps so unused columns are projected out early\n+\tRunOptimizer(OptimizerType::COLUMN_LIFETIME, [&]() {\n+\t\tColumnLifetimeAnalyzer column_lifetime(true);\n+\t\tcolumn_lifetime.VisitOperator(*plan);\n+\t});\n+\n+\t// perform statistics propagation\n+\tcolumn_binding_map_t<unique_ptr<BaseStatistics>> statistics_map;\n+\tRunOptimizer(OptimizerType::STATISTICS_PROPAGATION, [&]() {\n+\t\tStatisticsPropagator propagator(*this);\n+\t\tpropagator.PropagateStatistics(plan);\n+\t\tstatistics_map = propagator.GetStatisticsMap();\n+\t});\n+\n+\t// remove duplicate aggregates\n \tRunOptimizer(OptimizerType::COMMON_AGGREGATE, [&]() {\n \t\tCommonAggregateOptimizer common_aggregate;\n \t\tcommon_aggregate.VisitOperator(*plan);\n \t});\n \n+\t// creates projection maps so unused columns are projected out early\n \tRunOptimizer(OptimizerType::COLUMN_LIFETIME, [&]() {\n \t\tColumnLifetimeAnalyzer column_lifetime(true);\n \t\tcolumn_lifetime.VisitOperator(*plan);\n \t});\n \n+\t// compress data based on statistics for materializing operators\n+\tRunOptimizer(OptimizerType::COMPRESSED_MATERIALIZATION, [&]() {\n+\t\tCompressedMaterialization compressed_materialization(context, binder, std::move(statistics_map));\n+\t\tcompressed_materialization.Compress(plan);\n+\t});\n+\n \t// transform ORDER BY + LIMIT to TopN\n \tRunOptimizer(OptimizerType::TOP_N, [&]() {\n \t\tTopN topn;\ndiff --git a/src/optimizer/pushdown/pushdown_cross_product.cpp b/src/optimizer/pushdown/pushdown_cross_product.cpp\nindex fa4f76769254..efa3fa4e7a03 100644\n--- a/src/optimizer/pushdown/pushdown_cross_product.cpp\n+++ b/src/optimizer/pushdown/pushdown_cross_product.cpp\n@@ -42,13 +42,13 @@ unique_ptr<LogicalOperator> FilterPushdown::PushdownCrossProduct(unique_ptr<Logi\n \t\tvector<JoinCondition> conditions;\n \t\tvector<unique_ptr<Expression>> arbitrary_expressions;\n \t\tauto join_type = JoinType::INNER;\n-\t\tLogicalComparisonJoin::ExtractJoinConditions(join_type, op->children[0], op->children[1], left_bindings,\n-\t\t                                             right_bindings, join_expressions, conditions,\n+\t\tLogicalComparisonJoin::ExtractJoinConditions(GetContext(), join_type, op->children[0], op->children[1],\n+\t\t                                             left_bindings, right_bindings, join_expressions, conditions,\n \t\t                                             arbitrary_expressions);\n \t\t// create the join from the join conditions\n-\t\treturn LogicalComparisonJoin::CreateJoin(JoinType::INNER, JoinRefType::REGULAR, std::move(op->children[0]),\n-\t\t                                         std::move(op->children[1]), std::move(conditions),\n-\t\t                                         std::move(arbitrary_expressions));\n+\t\treturn LogicalComparisonJoin::CreateJoin(GetContext(), JoinType::INNER, JoinRefType::REGULAR,\n+\t\t                                         std::move(op->children[0]), std::move(op->children[1]),\n+\t\t                                         std::move(conditions), std::move(arbitrary_expressions));\n \t} else {\n \t\t// no join conditions found: keep as cross product\n \t\treturn op;\ndiff --git a/src/optimizer/pushdown/pushdown_get.cpp b/src/optimizer/pushdown/pushdown_get.cpp\nindex 6a74e61abf75..865003fc2f3b 100644\n--- a/src/optimizer/pushdown/pushdown_get.cpp\n+++ b/src/optimizer/pushdown/pushdown_get.cpp\n@@ -4,7 +4,6 @@\n #include \"duckdb/planner/expression/bound_parameter_expression.hpp\"\n #include \"duckdb/planner/operator/logical_filter.hpp\"\n #include \"duckdb/planner/operator/logical_get.hpp\"\n-#include \"duckdb/storage/data_table.hpp\"\n \n namespace duckdb {\n \ndiff --git a/src/optimizer/remove_duplicate_groups.cpp b/src/optimizer/remove_duplicate_groups.cpp\nnew file mode 100644\nindex 000000000000..5ca5d2ade852\n--- /dev/null\n+++ b/src/optimizer/remove_duplicate_groups.cpp\n@@ -0,0 +1,127 @@\n+#include \"duckdb/optimizer/remove_duplicate_groups.hpp\"\n+\n+#include \"duckdb/common/pair.hpp\"\n+#include \"duckdb/planner/expression/bound_columnref_expression.hpp\"\n+#include \"duckdb/planner/operator/logical_aggregate.hpp\"\n+\n+namespace duckdb {\n+\n+void RemoveDuplicateGroups::VisitOperator(LogicalOperator &op) {\n+\tswitch (op.type) {\n+\tcase LogicalOperatorType::LOGICAL_AGGREGATE_AND_GROUP_BY:\n+\t\tVisitAggregate(op.Cast<LogicalAggregate>());\n+\t\tbreak;\n+\tdefault:\n+\t\tbreak;\n+\t}\n+\tLogicalOperatorVisitor::VisitOperatorExpressions(op);\n+\tLogicalOperatorVisitor::VisitOperatorChildren(op);\n+}\n+\n+void RemoveDuplicateGroups::VisitAggregate(LogicalAggregate &aggr) {\n+\tif (!aggr.grouping_functions.empty()) {\n+\t\treturn;\n+\t}\n+\n+\tauto &groups = aggr.groups;\n+\n+\tcolumn_binding_map_t<idx_t> duplicate_map;\n+\tvector<pair<idx_t, idx_t>> duplicates;\n+\tfor (idx_t group_idx = 0; group_idx < groups.size(); group_idx++) {\n+\t\tconst auto &group = groups[group_idx];\n+\t\tif (group->type != ExpressionType::BOUND_COLUMN_REF) {\n+\t\t\tcontinue;\n+\t\t}\n+\t\tconst auto &colref = group->Cast<BoundColumnRefExpression>();\n+\t\tconst auto &binding = colref.binding;\n+\t\tconst auto it = duplicate_map.find(binding);\n+\t\tif (it == duplicate_map.end()) {\n+\t\t\tduplicate_map.emplace(binding, group_idx);\n+\t\t} else {\n+\t\t\tduplicates.emplace_back(it->second, group_idx);\n+\t\t}\n+\t}\n+\n+\tif (duplicates.empty()) {\n+\t\treturn;\n+\t}\n+\n+\t// Sort duplicates by max duplicate group idx, because we want to remove groups from the back\n+\tsort(duplicates.begin(), duplicates.end(),\n+\t     [](const pair<idx_t, idx_t> &lhs, const pair<idx_t, idx_t> &rhs) { return lhs.second > rhs.second; });\n+\n+\t// Now we want to remove the duplicates, but this alters the column bindings coming out of the aggregate,\n+\t// so we keep track of how they shift and do another round of column binding replacements\n+\tcolumn_binding_map_t<ColumnBinding> group_binding_map;\n+\tfor (idx_t group_idx = 0; group_idx < groups.size(); group_idx++) {\n+\t\tgroup_binding_map.emplace(ColumnBinding(aggr.group_index, group_idx),\n+\t\t                          ColumnBinding(aggr.group_index, group_idx));\n+\t}\n+\n+\tfor (idx_t duplicate_idx = 0; duplicate_idx < duplicates.size(); duplicate_idx++) {\n+\t\tconst auto &duplicate = duplicates[duplicate_idx];\n+\t\tconst auto &remaining_idx = duplicate.first;\n+\t\tconst auto &removed_idx = duplicate.second;\n+\n+\t\t// Store expression and remove it from groups\n+\t\tstored_expressions.emplace_back(std::move(groups[removed_idx]));\n+\t\tgroups.erase(groups.begin() + removed_idx);\n+\n+\t\t// This optimizer should run before statistics propagation, so this should be empty\n+\t\t// If it runs after, then group_stats should be updated too\n+\t\tD_ASSERT(aggr.group_stats.empty());\n+\n+\t\t// Remove from grouping sets too\n+\t\tfor (auto &grouping_set : aggr.grouping_sets) {\n+\t\t\t// Replace removed group with duplicate remaining group\n+\t\t\tif (grouping_set.erase(removed_idx) != 0) {\n+\t\t\t\tgrouping_set.insert(remaining_idx);\n+\t\t\t}\n+\n+\t\t\t// Indices shifted: Reinsert groups in the set with group_idx - 1\n+\t\t\tvector<idx_t> group_indices_to_reinsert;\n+\t\t\tfor (auto &entry : grouping_set) {\n+\t\t\t\tif (entry > removed_idx) {\n+\t\t\t\t\tgroup_indices_to_reinsert.emplace_back(entry);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tfor (const auto group_idx : group_indices_to_reinsert) {\n+\t\t\t\tgrouping_set.erase(group_idx);\n+\t\t\t}\n+\t\t\tfor (const auto group_idx : group_indices_to_reinsert) {\n+\t\t\t\tgrouping_set.insert(group_idx - 1);\n+\t\t\t}\n+\t\t}\n+\n+\t\t// Update mapping\n+\t\tauto it = group_binding_map.find(ColumnBinding(aggr.group_index, removed_idx));\n+\t\tD_ASSERT(it != group_binding_map.end());\n+\t\tit->second.column_index = remaining_idx;\n+\n+\t\tfor (auto &map_entry : group_binding_map) {\n+\t\t\tauto &new_binding = map_entry.second;\n+\t\t\tif (new_binding.column_index > removed_idx) {\n+\t\t\t\tnew_binding.column_index--;\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t// Replace all references to the old group binding with the new group binding\n+\tfor (const auto &map_entry : group_binding_map) {\n+\t\tauto it = column_references.find(map_entry.first);\n+\t\tif (it != column_references.end()) {\n+\t\t\tfor (auto expr : it->second) {\n+\t\t\t\texpr.get().binding = map_entry.second;\n+\t\t\t}\n+\t\t}\n+\t}\n+}\n+\n+unique_ptr<Expression> RemoveDuplicateGroups::VisitReplace(BoundColumnRefExpression &expr,\n+                                                           unique_ptr<Expression> *expr_ptr) {\n+\t// add a column reference\n+\tcolumn_references[expr.binding].push_back(expr);\n+\treturn nullptr;\n+}\n+\n+} // namespace duckdb\ndiff --git a/src/optimizer/remove_unused_columns.cpp b/src/optimizer/remove_unused_columns.cpp\nindex 5211c86fda02..4291e174fc10 100644\n--- a/src/optimizer/remove_unused_columns.cpp\n+++ b/src/optimizer/remove_unused_columns.cpp\n@@ -302,6 +302,10 @@ void RemoveUnusedColumns::VisitOperator(LogicalOperator &op) {\n \t\teverything_referenced = true;\n \t\tbreak;\n \t}\n+\tcase LogicalOperatorType::LOGICAL_MATERIALIZED_CTE: {\n+\t\teverything_referenced = true;\n+\t\tbreak;\n+\t}\n \tcase LogicalOperatorType::LOGICAL_CTE_REF: {\n \t\teverything_referenced = true;\n \t\tbreak;\ndiff --git a/src/optimizer/rule/regex_optimizations.cpp b/src/optimizer/rule/regex_optimizations.cpp\nindex a694b529cd82..d1f49121bb4f 100644\n--- a/src/optimizer/rule/regex_optimizations.cpp\n+++ b/src/optimizer/rule/regex_optimizations.cpp\n@@ -3,6 +3,8 @@\n #include \"duckdb/execution/expression_executor.hpp\"\n #include \"duckdb/planner/expression/bound_function_expression.hpp\"\n #include \"duckdb/planner/expression/bound_constant_expression.hpp\"\n+#include \"duckdb/function/scalar/string_functions.hpp\"\n+#include \"duckdb/function/scalar/regexp.hpp\"\n \n #include \"re2/re2.h\"\n #include \"re2/regexp.h\"\n@@ -12,17 +14,138 @@ namespace duckdb {\n RegexOptimizationRule::RegexOptimizationRule(ExpressionRewriter &rewriter) : Rule(rewriter) {\n \tauto func = make_uniq<FunctionExpressionMatcher>();\n \tfunc->function = make_uniq<SpecificFunctionMatcher>(\"regexp_matches\");\n-\tfunc->policy = SetMatcher::Policy::ORDERED;\n+\tfunc->policy = SetMatcher::Policy::SOME_ORDERED;\n \tfunc->matchers.push_back(make_uniq<ExpressionMatcher>());\n \tfunc->matchers.push_back(make_uniq<ConstantExpressionMatcher>());\n+\n \troot = std::move(func);\n }\n \n+struct LikeString {\n+\tbool exists = true;\n+\tbool escaped = false;\n+\tstring like_string = \"\";\n+};\n+\n+static void AddCharacter(char chr, LikeString &ret, bool contains) {\n+\t// if we are not converting into a contains, and the string has LIKE special characters\n+\t// then don't return a possible LIKE match\n+\t// same if the character is a control character\n+\tif (iscntrl(chr) || (!contains && (chr == '%' || chr == '_'))) {\n+\t\tret.exists = false;\n+\t\treturn;\n+\t}\n+\tauto run_as_str {chr};\n+\tret.like_string += run_as_str;\n+}\n+\n+static LikeString GetLikeStringEscaped(duckdb_re2::Regexp *regexp, bool contains = false) {\n+\tD_ASSERT(regexp->op() == duckdb_re2::kRegexpLiteralString || regexp->op() == duckdb_re2::kRegexpLiteral);\n+\tLikeString ret;\n+\n+\tif (regexp->parse_flags() & duckdb_re2::Regexp::FoldCase ||\n+\t    !(regexp->parse_flags() & duckdb_re2::Regexp::OneLine)) {\n+\t\t// parse flags can turn on and off within a regex match, return no optimization\n+\t\t// For now, we just don't optimize if these every turn on.\n+\t\t// TODO: logic to attempt the optimization, then if the parse flags change, then abort\n+\t\tret.exists = false;\n+\t\treturn ret;\n+\t}\n+\n+\t// case insensitivity may be on now, but it can also turn off.\n+\tif (regexp->op() == duckdb_re2::kRegexpLiteralString) {\n+\t\tauto nrunes = (idx_t)regexp->nrunes();\n+\t\tauto runes = regexp->runes();\n+\t\tfor (idx_t i = 0; i < nrunes; i++) {\n+\t\t\tchar chr = toascii(runes[i]);\n+\t\t\tAddCharacter(chr, ret, contains);\n+\t\t\tif (!ret.exists) {\n+\t\t\t\treturn ret;\n+\t\t\t}\n+\t\t}\n+\t} else {\n+\t\tauto rune = regexp->rune();\n+\t\tchar chr = toascii(rune);\n+\t\tAddCharacter(chr, ret, contains);\n+\t}\n+\tD_ASSERT(ret.like_string.size() >= 1 || !ret.exists);\n+\treturn ret;\n+}\n+\n+static LikeString LikeMatchFromRegex(duckdb_re2::RE2 &pattern) {\n+\tLikeString ret = LikeString();\n+\tauto num_subs = pattern.Regexp()->nsub();\n+\tauto subs = pattern.Regexp()->sub();\n+\tauto cur_sub_index = 0;\n+\twhile (cur_sub_index < num_subs) {\n+\t\tswitch (subs[cur_sub_index]->op()) {\n+\t\tcase duckdb_re2::kRegexpAnyChar:\n+\t\t\tif (cur_sub_index == 0) {\n+\t\t\t\tret.like_string += \"%\";\n+\t\t\t}\n+\t\t\tret.like_string += \"_\";\n+\t\t\tif (cur_sub_index + 1 == num_subs) {\n+\t\t\t\tret.like_string += \"%\";\n+\t\t\t}\n+\t\t\tbreak;\n+\t\tcase duckdb_re2::kRegexpStar:\n+\t\t\t// .* is a Star operator is a anyChar operator as a child.\n+\t\t\t// any other child operator would represent a pattern LIKE cannot match.\n+\t\t\tif (subs[cur_sub_index]->nsub() == 1 && subs[cur_sub_index]->sub()[0]->op() == duckdb_re2::kRegexpAnyChar) {\n+\t\t\t\tret.like_string += \"%\";\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tret.exists = false;\n+\t\t\treturn ret;\n+\t\tcase duckdb_re2::kRegexpLiteralString:\n+\t\tcase duckdb_re2::kRegexpLiteral: {\n+\t\t\t// if this is the only matching op, we should have directly called\n+\t\t\t// GetEscapedLikeString\n+\t\t\tD_ASSERT(!(cur_sub_index == 0 && cur_sub_index + 1 == num_subs));\n+\t\t\tif (cur_sub_index == 0) {\n+\t\t\t\tret.like_string += \"%\";\n+\t\t\t}\n+\t\t\t// if the kRegexpLiteral or kRegexpLiteralString is the only op to match\n+\t\t\t// the string can directly be converted into a contains\n+\t\t\tLikeString escaped_like_string = GetLikeStringEscaped(subs[cur_sub_index], false);\n+\t\t\tif (!escaped_like_string.exists) {\n+\t\t\t\treturn escaped_like_string;\n+\t\t\t}\n+\t\t\tret.like_string += escaped_like_string.like_string;\n+\t\t\tret.escaped = escaped_like_string.escaped;\n+\t\t\tif (cur_sub_index + 1 == num_subs) {\n+\t\t\t\tret.like_string += \"%\";\n+\t\t\t}\n+\t\t\tbreak;\n+\t\t}\n+\t\tcase duckdb_re2::kRegexpEndText:\n+\t\tcase duckdb_re2::kRegexpEmptyMatch:\n+\t\tcase duckdb_re2::kRegexpBeginText: {\n+\t\t\tbreak;\n+\t\t}\n+\t\tdefault:\n+\t\t\t// some other regexp op that doesn't have an equivalent to a like string\n+\t\t\t// return false;\n+\t\t\tret.exists = false;\n+\t\t\treturn ret;\n+\t\t}\n+\t\tcur_sub_index += 1;\n+\t}\n+\treturn ret;\n+}\n+\n unique_ptr<Expression> RegexOptimizationRule::Apply(LogicalOperator &op, vector<reference<Expression>> &bindings,\n                                                     bool &changes_made, bool is_root) {\n \tauto &root = bindings[0].get().Cast<BoundFunctionExpression>();\n \tauto &constant_expr = bindings[2].get().Cast<BoundConstantExpression>();\n-\tD_ASSERT(root.children.size() == 2);\n+\tD_ASSERT(root.children.size() == 2 || root.children.size() == 3);\n+\tauto regexp_bind_data = root.bind_info.get()->Cast<RegexpMatchesBindData>();\n+\n+\tauto constant_value = ExpressionExecutor::EvaluateScalar(GetContext(), constant_expr);\n+\tD_ASSERT(constant_value.type() == constant_expr.return_type);\n+\tauto patt_str = StringValue::Get(constant_value);\n+\n+\tduckdb_re2::RE2::Options parsed_options = regexp_bind_data.options;\n \n \tif (constant_expr.value.IsNull()) {\n \t\treturn make_uniq<BoundConstantExpression>(Value(root.return_type));\n@@ -31,34 +154,50 @@ unique_ptr<Expression> RegexOptimizationRule::Apply(LogicalOperator &op, vector<\n \t// the constant_expr is a scalar expression that we have to fold\n \tif (!constant_expr.IsFoldable()) {\n \t\treturn nullptr;\n-\t}\n+\t};\n \n-\tauto constant_value = ExpressionExecutor::EvaluateScalar(GetContext(), constant_expr);\n-\tD_ASSERT(constant_value.type() == constant_expr.return_type);\n-\tauto patt_str = StringValue::Get(constant_value);\n-\n-\tduckdb_re2::RE2 pattern(patt_str);\n+\tduckdb_re2::RE2 pattern(patt_str, parsed_options);\n \tif (!pattern.ok()) {\n \t\treturn nullptr; // this should fail somewhere else\n \t}\n \n+\tLikeString like_string;\n+\t// check for a like string. If we can convert it to a like string, the like string\n+\t// optimizer will further optimize suffix and prefix things.\n \tif (pattern.Regexp()->op() == duckdb_re2::kRegexpLiteralString ||\n \t    pattern.Regexp()->op() == duckdb_re2::kRegexpLiteral) {\n-\n-\t\tstring min;\n-\t\tstring max;\n-\t\tpattern.PossibleMatchRange(&min, &max, patt_str.size() + 1);\n-\t\tif (min != max) {\n+\t\t// convert to contains.\n+\t\tLikeString escaped_like_string = GetLikeStringEscaped(pattern.Regexp(), true);\n+\t\tif (!escaped_like_string.exists) {\n \t\t\treturn nullptr;\n \t\t}\n-\t\tauto parameter = make_uniq<BoundConstantExpression>(Value(std::move(min)));\n+\t\tauto parameter = make_uniq<BoundConstantExpression>(Value(std::move(escaped_like_string.like_string)));\n \t\tauto contains = make_uniq<BoundFunctionExpression>(root.return_type, ContainsFun::GetFunction(),\n \t\t                                                   std::move(root.children), nullptr);\n \t\tcontains->children[1] = std::move(parameter);\n \n \t\treturn std::move(contains);\n+\t} else if (pattern.Regexp()->op() == duckdb_re2::kRegexpConcat) {\n+\t\tlike_string = LikeMatchFromRegex(pattern);\n+\t} else {\n+\t\tlike_string.exists = false;\n+\t}\n+\n+\tif (!like_string.exists) {\n+\t\treturn nullptr;\n+\t}\n+\n+\t// if regexp had options, remove them so the new Like Expression can be matched for other optimizers.\n+\tif (root.children.size() == 3) {\n+\t\troot.children.pop_back();\n+\t\tD_ASSERT(root.children.size() == 2);\n \t}\n-\treturn nullptr;\n+\n+\tauto like_expression = make_uniq<BoundFunctionExpression>(root.return_type, LikeFun::GetLikeFunction(),\n+\t                                                          std::move(root.children), nullptr);\n+\tauto parameter = make_uniq<BoundConstantExpression>(Value(std::move(like_string.like_string)));\n+\tlike_expression->children[1] = std::move(parameter);\n+\treturn std::move(like_expression);\n }\n \n } // namespace duckdb\ndiff --git a/src/optimizer/statistics/expression/CMakeLists.txt b/src/optimizer/statistics/expression/CMakeLists.txt\nindex a1bca55fc340..cb88e3c1c3c6 100644\n--- a/src/optimizer/statistics/expression/CMakeLists.txt\n+++ b/src/optimizer/statistics/expression/CMakeLists.txt\n@@ -2,7 +2,6 @@ add_library_unity(\n   duckdb_optimizer_statistics_expr\n   OBJECT\n   propagate_aggregate.cpp\n-  propagate_and_compress.cpp\n   propagate_between.cpp\n   propagate_case.cpp\n   propagate_cast.cpp\ndiff --git a/src/optimizer/statistics/expression/propagate_and_compress.cpp b/src/optimizer/statistics/expression/propagate_and_compress.cpp\ndeleted file mode 100644\nindex 7b25365b4ed7..000000000000\n--- a/src/optimizer/statistics/expression/propagate_and_compress.cpp\n+++ /dev/null\n@@ -1,118 +0,0 @@\n-#include \"duckdb/function/scalar/operators.hpp\"\n-#include \"duckdb/optimizer/statistics_propagator.hpp\"\n-#include \"duckdb/planner/bound_result_modifier.hpp\"\n-#include \"duckdb/planner/expression/bound_cast_expression.hpp\"\n-#include \"duckdb/planner/expression/bound_constant_expression.hpp\"\n-#include \"duckdb/planner/expression/bound_function_expression.hpp\"\n-#include \"duckdb/storage/statistics/base_statistics.hpp\"\n-#include \"duckdb/common/operator/subtract.hpp\"\n-\n-namespace duckdb {\n-\n-template <class T>\n-bool GetCastType(T signed_range, LogicalType &cast_type) {\n-\tauto range = static_cast<typename std::make_unsigned<decltype(signed_range)>::type>(signed_range);\n-\n-\t// Check if this range fits in a smaller type\n-\tif (range < NumericLimits<uint8_t>::Maximum()) {\n-\t\tcast_type = LogicalType::UTINYINT;\n-\t} else if (sizeof(T) > sizeof(uint16_t) && range < NumericLimits<uint16_t>::Maximum()) {\n-\t\tcast_type = LogicalType::USMALLINT;\n-\t} else if (sizeof(T) > sizeof(uint32_t) && range < NumericLimits<uint32_t>::Maximum()) {\n-\t\tcast_type = LogicalType::UINTEGER;\n-\t} else {\n-\t\treturn false;\n-\t}\n-\treturn true;\n-}\n-\n-template <>\n-bool GetCastType(hugeint_t range, LogicalType &cast_type) {\n-\tif (range < NumericLimits<uint8_t>().Maximum()) {\n-\t\tcast_type = LogicalType::UTINYINT;\n-\t} else if (range < NumericLimits<uint16_t>().Maximum()) {\n-\t\tcast_type = LogicalType::USMALLINT;\n-\t} else if (range < NumericLimits<uint32_t>().Maximum()) {\n-\t\tcast_type = LogicalType::UINTEGER;\n-\t} else if (range < NumericLimits<uint64_t>().Maximum()) {\n-\t\tcast_type = LogicalType::UBIGINT;\n-\t} else {\n-\t\treturn false;\n-\t}\n-\treturn true;\n-}\n-\n-template <class T>\n-unique_ptr<Expression> TemplatedCastToSmallestType(unique_ptr<Expression> expr, BaseStatistics &stats) {\n-\t// Compute range\n-\tif (!NumericStats::HasMinMax(stats)) {\n-\t\treturn expr;\n-\t}\n-\n-\tauto signed_min_val = NumericStats::Min(stats).GetValue<T>();\n-\tauto signed_max_val = NumericStats::Max(stats).GetValue<T>();\n-\tif (signed_max_val < signed_min_val) {\n-\t\treturn expr;\n-\t}\n-\n-\t// Compute range, cast to unsigned to prevent comparing signed with unsigned\n-\tT signed_range;\n-\tif (!TrySubtractOperator::Operation(signed_max_val, signed_min_val, signed_range)) {\n-\t\t// overflow in subtraction: cannot do any simplification\n-\t\treturn expr;\n-\t}\n-\n-\t// Check if this range fits in a smaller type\n-\tLogicalType cast_type;\n-\tif (!GetCastType(signed_range, cast_type)) {\n-\t\treturn expr;\n-\t}\n-\n-\t// Create expression to map to a smaller range\n-\tauto input_type = expr->return_type;\n-\tauto minimum_expr = make_uniq<BoundConstantExpression>(Value::CreateValue(signed_min_val));\n-\tvector<unique_ptr<Expression>> arguments;\n-\targuments.push_back(std::move(expr));\n-\targuments.push_back(std::move(minimum_expr));\n-\tauto minus_expr = make_uniq<BoundFunctionExpression>(input_type, SubtractFun::GetFunction(input_type, input_type),\n-\t                                                     std::move(arguments), nullptr, true);\n-\n-\t// Cast to smaller type\n-\treturn BoundCastExpression::AddDefaultCastToType(std::move(minus_expr), cast_type);\n-}\n-\n-unique_ptr<Expression> CastToSmallestType(unique_ptr<Expression> expr, BaseStatistics &num_stats) {\n-\tauto physical_type = expr->return_type.InternalType();\n-\tswitch (physical_type) {\n-\tcase PhysicalType::UINT8:\n-\tcase PhysicalType::INT8:\n-\t\treturn expr;\n-\tcase PhysicalType::UINT16:\n-\t\treturn TemplatedCastToSmallestType<uint16_t>(std::move(expr), num_stats);\n-\tcase PhysicalType::INT16:\n-\t\treturn TemplatedCastToSmallestType<int16_t>(std::move(expr), num_stats);\n-\tcase PhysicalType::UINT32:\n-\t\treturn TemplatedCastToSmallestType<uint32_t>(std::move(expr), num_stats);\n-\tcase PhysicalType::INT32:\n-\t\treturn TemplatedCastToSmallestType<int32_t>(std::move(expr), num_stats);\n-\tcase PhysicalType::UINT64:\n-\t\treturn TemplatedCastToSmallestType<uint64_t>(std::move(expr), num_stats);\n-\tcase PhysicalType::INT64:\n-\t\treturn TemplatedCastToSmallestType<int64_t>(std::move(expr), num_stats);\n-\tcase PhysicalType::INT128:\n-\t\treturn TemplatedCastToSmallestType<hugeint_t>(std::move(expr), num_stats);\n-\tdefault:\n-\t\tthrow NotImplementedException(\"Unknown integer type!\");\n-\t}\n-}\n-\n-void StatisticsPropagator::PropagateAndCompress(unique_ptr<Expression> &expr, unique_ptr<BaseStatistics> &stats) {\n-\tstats = PropagateExpression(expr);\n-\tif (stats) {\n-\t\tif (expr->return_type.IsIntegral()) {\n-\t\t\texpr = CastToSmallestType(std::move(expr), *stats);\n-\t\t}\n-\t}\n-}\n-\n-} // namespace duckdb\ndiff --git a/src/optimizer/statistics/operator/propagate_join.cpp b/src/optimizer/statistics/operator/propagate_join.cpp\nindex b00fe92b4019..38dcc278b7bf 100644\n--- a/src/optimizer/statistics/operator/propagate_join.cpp\n+++ b/src/optimizer/statistics/operator/propagate_join.cpp\n@@ -1,9 +1,13 @@\n #include \"duckdb/common/types/hugeint.hpp\"\n+#include \"duckdb/optimizer/filter_pushdown.hpp\"\n #include \"duckdb/optimizer/statistics_propagator.hpp\"\n #include \"duckdb/planner/expression/bound_columnref_expression.hpp\"\n+#include \"duckdb/planner/expression/bound_comparison_expression.hpp\"\n+#include \"duckdb/planner/expression/bound_constant_expression.hpp\"\n #include \"duckdb/planner/operator/logical_any_join.hpp\"\n #include \"duckdb/planner/operator/logical_comparison_join.hpp\"\n #include \"duckdb/planner/operator/logical_cross_product.hpp\"\n+#include \"duckdb/planner/operator/logical_filter.hpp\"\n #include \"duckdb/planner/operator/logical_join.hpp\"\n #include \"duckdb/planner/operator/logical_limit.hpp\"\n #include \"duckdb/planner/operator/logical_positional_join.hpp\"\n@@ -13,8 +17,8 @@ namespace duckdb {\n void StatisticsPropagator::PropagateStatistics(LogicalComparisonJoin &join, unique_ptr<LogicalOperator> *node_ptr) {\n \tfor (idx_t i = 0; i < join.conditions.size(); i++) {\n \t\tauto &condition = join.conditions[i];\n-\t\tauto stats_left = PropagateExpression(condition.left);\n-\t\tauto stats_right = PropagateExpression(condition.right);\n+\t\tconst auto stats_left = PropagateExpression(condition.left);\n+\t\tconst auto stats_right = PropagateExpression(condition.right);\n \t\tif (stats_left && stats_right) {\n \t\t\tif ((condition.comparison == ExpressionType::COMPARE_DISTINCT_FROM ||\n \t\t\t     condition.comparison == ExpressionType::COMPARE_NOT_DISTINCT_FROM) &&\n@@ -25,8 +29,8 @@ void StatisticsPropagator::PropagateStatistics(LogicalComparisonJoin &join, uniq\n \t\t\t}\n \t\t\tauto prune_result = PropagateComparison(*stats_left, *stats_right, condition.comparison);\n \t\t\t// Add stats to logical_join for perfect hash join\n-\t\t\tjoin.join_stats.push_back(std::move(stats_left));\n-\t\t\tjoin.join_stats.push_back(std::move(stats_right));\n+\t\t\tjoin.join_stats.push_back(stats_left->ToUnique());\n+\t\t\tjoin.join_stats.push_back(stats_right->ToUnique());\n \t\t\tswitch (prune_result) {\n \t\t\tcase FilterPropagateResult::FILTER_FALSE_OR_NULL:\n \t\t\tcase FilterPropagateResult::FILTER_ALWAYS_FALSE:\n@@ -123,12 +127,21 @@ void StatisticsPropagator::PropagateStatistics(LogicalComparisonJoin &join, uniq\n \t\tcase JoinType::INNER:\n \t\tcase JoinType::SEMI: {\n \t\t\tUpdateFilterStatistics(*condition.left, *condition.right, condition.comparison);\n-\t\t\tauto stats_left = PropagateExpression(condition.left);\n-\t\t\tauto stats_right = PropagateExpression(condition.right);\n+\t\t\tauto updated_stats_left = PropagateExpression(condition.left);\n+\t\t\tauto updated_stats_right = PropagateExpression(condition.right);\n+\n+\t\t\t// Try to push lhs stats down rhs and vice versa\n+\t\t\tif (!context.config.force_index_join && stats_left && stats_right && updated_stats_left &&\n+\t\t\t    updated_stats_right && condition.left->type == ExpressionType::BOUND_COLUMN_REF &&\n+\t\t\t    condition.right->type == ExpressionType::BOUND_COLUMN_REF) {\n+\t\t\t\tCreateFilterFromJoinStats(join.children[0], condition.left, *stats_left, *updated_stats_left);\n+\t\t\t\tCreateFilterFromJoinStats(join.children[1], condition.right, *stats_right, *updated_stats_right);\n+\t\t\t}\n+\n \t\t\t// Update join_stats when is already part of the join\n \t\t\tif (join.join_stats.size() == 2) {\n-\t\t\t\tjoin.join_stats[0] = std::move(stats_left);\n-\t\t\t\tjoin.join_stats[1] = std::move(stats_right);\n+\t\t\t\tjoin.join_stats[0] = std::move(updated_stats_left);\n+\t\t\t\tjoin.join_stats[1] = std::move(updated_stats_right);\n \t\t\t}\n \t\t\tbreak;\n \t\t}\n@@ -281,4 +294,48 @@ unique_ptr<NodeStatistics> StatisticsPropagator::PropagateStatistics(LogicalPosi\n \treturn std::move(node_stats);\n }\n \n+void StatisticsPropagator::CreateFilterFromJoinStats(unique_ptr<LogicalOperator> &child, unique_ptr<Expression> &expr,\n+                                                     const BaseStatistics &stats_before,\n+                                                     const BaseStatistics &stats_after) {\n+\t// Only do this for integral colref's that have stats\n+\tif (expr->type != ExpressionType::BOUND_COLUMN_REF || !expr->return_type.IsIntegral() ||\n+\t    !NumericStats::HasMinMax(stats_before) || !NumericStats::HasMinMax(stats_after)) {\n+\t\treturn;\n+\t}\n+\n+\t// Retrieve min/max\n+\tauto min_before = NumericStats::Min(stats_before);\n+\tauto max_before = NumericStats::Max(stats_before);\n+\tauto min_after = NumericStats::Min(stats_after);\n+\tauto max_after = NumericStats::Max(stats_after);\n+\n+\tvector<unique_ptr<Expression>> filter_exprs;\n+\tif (min_after > min_before) {\n+\t\tfilter_exprs.emplace_back(\n+\t\t    make_uniq<BoundComparisonExpression>(ExpressionType::COMPARE_GREATERTHANOREQUALTO, expr->Copy(),\n+\t\t                                         make_uniq<BoundConstantExpression>(std::move(min_after))));\n+\t}\n+\tif (max_after < max_before) {\n+\t\tfilter_exprs.emplace_back(\n+\t\t    make_uniq<BoundComparisonExpression>(ExpressionType::COMPARE_LESSTHANOREQUALTO, expr->Copy(),\n+\t\t                                         make_uniq<BoundConstantExpression>(std::move(max_after))));\n+\t}\n+\n+\tif (filter_exprs.empty()) {\n+\t\treturn;\n+\t}\n+\n+\tauto filter = make_uniq<LogicalFilter>();\n+\tfilter->children.emplace_back(std::move(child));\n+\tchild = std::move(filter);\n+\n+\tfor (auto &filter_expr : filter_exprs) {\n+\t\tchild->expressions.emplace_back(std::move(filter_expr));\n+\t}\n+\n+\tFilterPushdown filter_pushdown(optimizer);\n+\tchild = filter_pushdown.Rewrite(std::move(child));\n+\tPropagateExpression(expr);\n+}\n+\n } // namespace duckdb\ndiff --git a/src/optimizer/statistics/operator/propagate_order.cpp b/src/optimizer/statistics/operator/propagate_order.cpp\nindex 7b41dc160869..5770fcc88635 100644\n--- a/src/optimizer/statistics/operator/propagate_order.cpp\n+++ b/src/optimizer/statistics/operator/propagate_order.cpp\n@@ -11,7 +11,7 @@ unique_ptr<NodeStatistics> StatisticsPropagator::PropagateStatistics(LogicalOrde\n \n \t// then propagate to each of the order expressions\n \tfor (auto &bound_order : order.orders) {\n-\t\tPropagateAndCompress(bound_order.expression, bound_order.stats);\n+\t\tbound_order.stats = PropagateExpression(bound_order.expression);\n \t}\n \treturn std::move(node_stats);\n }\ndiff --git a/src/optimizer/statistics_propagator.cpp b/src/optimizer/statistics_propagator.cpp\nindex 4c532a3c5f4c..701697233db2 100644\n--- a/src/optimizer/statistics_propagator.cpp\n+++ b/src/optimizer/statistics_propagator.cpp\n@@ -1,24 +1,26 @@\n #include \"duckdb/optimizer/statistics_propagator.hpp\"\n \n #include \"duckdb/main/client_context.hpp\"\n+#include \"duckdb/optimizer/optimizer.hpp\"\n+#include \"duckdb/planner/expression/list.hpp\"\n #include \"duckdb/planner/expression_iterator.hpp\"\n #include \"duckdb/planner/logical_operator.hpp\"\n #include \"duckdb/planner/operator/logical_aggregate.hpp\"\n-#include \"duckdb/planner/operator/logical_empty_result.hpp\"\n #include \"duckdb/planner/operator/logical_cross_product.hpp\"\n+#include \"duckdb/planner/operator/logical_empty_result.hpp\"\n #include \"duckdb/planner/operator/logical_filter.hpp\"\n #include \"duckdb/planner/operator/logical_get.hpp\"\n #include \"duckdb/planner/operator/logical_join.hpp\"\n-#include \"duckdb/planner/operator/logical_projection.hpp\"\n+#include \"duckdb/planner/operator/logical_order.hpp\"\n #include \"duckdb/planner/operator/logical_positional_join.hpp\"\n+#include \"duckdb/planner/operator/logical_projection.hpp\"\n #include \"duckdb/planner/operator/logical_set_operation.hpp\"\n-#include \"duckdb/planner/operator/logical_order.hpp\"\n #include \"duckdb/planner/operator/logical_window.hpp\"\n-#include \"duckdb/planner/expression/list.hpp\"\n \n namespace duckdb {\n \n-StatisticsPropagator::StatisticsPropagator(ClientContext &context) : context(context) {\n+StatisticsPropagator::StatisticsPropagator(Optimizer &optimizer_p)\n+    : optimizer(optimizer_p), context(optimizer.context) {\n }\n \n void StatisticsPropagator::ReplaceWithEmptyResult(unique_ptr<LogicalOperator> &node) {\ndiff --git a/src/optimizer/topn_optimizer.cpp b/src/optimizer/topn_optimizer.cpp\nindex d4d804b3fc30..c194dd84ca47 100644\n--- a/src/optimizer/topn_optimizer.cpp\n+++ b/src/optimizer/topn_optimizer.cpp\n@@ -1,24 +1,34 @@\n #include \"duckdb/optimizer/topn_optimizer.hpp\"\n-#include \"duckdb/planner/operator/logical_order.hpp\"\n+\n+#include \"duckdb/common/limits.hpp\"\n #include \"duckdb/planner/operator/logical_limit.hpp\"\n+#include \"duckdb/planner/operator/logical_order.hpp\"\n #include \"duckdb/planner/operator/logical_top_n.hpp\"\n-#include \"duckdb/common/limits.hpp\"\n \n namespace duckdb {\n \n-unique_ptr<LogicalOperator> TopN::Optimize(unique_ptr<LogicalOperator> op) {\n-\tif (op->type == LogicalOperatorType::LOGICAL_LIMIT &&\n-\t    op->children[0]->type == LogicalOperatorType::LOGICAL_ORDER_BY) {\n-\t\tauto &limit = op->Cast<LogicalLimit>();\n-\t\tauto &order_by = (op->children[0])->Cast<LogicalOrder>();\n+bool TopN::CanOptimize(LogicalOperator &op) {\n+\tif (op.type == LogicalOperatorType::LOGICAL_LIMIT &&\n+\t    op.children[0]->type == LogicalOperatorType::LOGICAL_ORDER_BY) {\n+\t\tauto &limit = op.Cast<LogicalLimit>();\n \n \t\t// This optimization doesn't apply when OFFSET is present without LIMIT\n \t\t// Or if offset is not constant\n \t\tif (limit.limit_val != NumericLimits<int64_t>::Maximum() || limit.offset) {\n-\t\t\tauto topn = make_uniq<LogicalTopN>(std::move(order_by.orders), limit.limit_val, limit.offset_val);\n-\t\t\ttopn->AddChild(std::move(order_by.children[0]));\n-\t\t\top = std::move(topn);\n+\t\t\treturn true;\n \t\t}\n+\t}\n+\treturn false;\n+}\n+\n+unique_ptr<LogicalOperator> TopN::Optimize(unique_ptr<LogicalOperator> op) {\n+\tif (CanOptimize(*op)) {\n+\t\tauto &limit = op->Cast<LogicalLimit>();\n+\t\tauto &order_by = (op->children[0])->Cast<LogicalOrder>();\n+\n+\t\tauto topn = make_uniq<LogicalTopN>(std::move(order_by.orders), limit.limit_val, limit.offset_val);\n+\t\ttopn->AddChild(std::move(order_by.children[0]));\n+\t\top = std::move(topn);\n \t} else {\n \t\tfor (auto &child : op->children) {\n \t\t\tchild = Optimize(std::move(child));\ndiff --git a/src/parallel/executor.cpp b/src/parallel/executor.cpp\nindex 2a1a5cbc710c..f6093854a305 100644\n--- a/src/parallel/executor.cpp\n+++ b/src/parallel/executor.cpp\n@@ -3,6 +3,7 @@\n #include \"duckdb/execution/execution_context.hpp\"\n #include \"duckdb/execution/operator/helper/physical_result_collector.hpp\"\n #include \"duckdb/execution/operator/set/physical_recursive_cte.hpp\"\n+#include \"duckdb/execution/operator/set/physical_cte.hpp\"\n #include \"duckdb/execution/physical_operator.hpp\"\n #include \"duckdb/main/client_context.hpp\"\n #include \"duckdb/main/client_data.hpp\"\n@@ -267,6 +268,10 @@ void Executor::AddRecursiveCTE(PhysicalOperator &rec_cte) {\n \trecursive_ctes.push_back(rec_cte);\n }\n \n+void Executor::AddMaterializedCTE(PhysicalOperator &mat_cte) {\n+\tmaterialized_ctes.push_back(mat_cte);\n+}\n+\n void Executor::ReschedulePipelines(const vector<shared_ptr<MetaPipeline>> &pipelines_p,\n                                    vector<shared_ptr<Event>> &events_p) {\n \tScheduleEventData event_data(pipelines_p, events_p, false);\n@@ -344,6 +349,12 @@ void Executor::InitializeInternal(PhysicalOperator &plan) {\n \t\t\trec_cte.recursive_meta_pipeline->Ready();\n \t\t}\n \n+\t\t// ready materialized cte pipelines too\n+\t\tfor (auto &mat_cte_ref : materialized_ctes) {\n+\t\t\tauto &mat_cte = mat_cte_ref.get().Cast<PhysicalCTE>();\n+\t\t\tmat_cte.recursive_meta_pipeline->Ready();\n+\t\t}\n+\n \t\t// set root pipelines, i.e., all pipelines that end in the final sink\n \t\troot_pipeline->GetPipelines(root_pipelines, false);\n \t\troot_pipeline_idx = 0;\n@@ -381,6 +392,10 @@ void Executor::CancelTasks() {\n \t\t\tauto &rec_cte = rec_cte_ref.get().Cast<PhysicalRecursiveCTE>();\n \t\t\trec_cte.recursive_meta_pipeline.reset();\n \t\t}\n+\t\tfor (auto &mat_cte_ref : materialized_ctes) {\n+\t\t\tauto &mat_cte = mat_cte_ref.get().Cast<PhysicalCTE>();\n+\t\t\tmat_cte.recursive_meta_pipeline.reset();\n+\t\t}\n \t\tpipelines.clear();\n \t\troot_pipelines.clear();\n \t\tto_be_rescheduled_tasks.clear();\ndiff --git a/src/parallel/task_scheduler.cpp b/src/parallel/task_scheduler.cpp\nindex cbf0ba4ace12..43424641aad6 100644\n--- a/src/parallel/task_scheduler.cpp\n+++ b/src/parallel/task_scheduler.cpp\n@@ -1,13 +1,14 @@\n #include \"duckdb/parallel/task_scheduler.hpp\"\n \n+#include \"duckdb/common/chrono.hpp\"\n #include \"duckdb/common/exception.hpp\"\n #include \"duckdb/main/client_context.hpp\"\n #include \"duckdb/main/database.hpp\"\n \n #ifndef DUCKDB_NO_THREADS\n #include \"concurrentqueue.h\"\n-#include \"lightweightsemaphore.h\"\n #include \"duckdb/common/thread.hpp\"\n+#include \"lightweightsemaphore.h\"\n #else\n #include <queue>\n #endif\n@@ -93,7 +94,9 @@ ProducerToken::ProducerToken(TaskScheduler &scheduler, unique_ptr<QueueProducerT\n ProducerToken::~ProducerToken() {\n }\n \n-TaskScheduler::TaskScheduler(DatabaseInstance &db) : db(db), queue(make_uniq<ConcurrentQueue>()) {\n+TaskScheduler::TaskScheduler(DatabaseInstance &db)\n+    : db(db), queue(make_uniq<ConcurrentQueue>()),\n+      allocator_flush_threshold(db.config.options.allocator_flush_threshold) {\n }\n \n TaskScheduler::~TaskScheduler() {\n@@ -146,6 +149,9 @@ void TaskScheduler::ExecuteForever(atomic<bool> *marker) {\n \t\t\t\ttask.reset();\n \t\t\t\tbreak;\n \t\t\t}\n+\n+\t\t\t// Flushes the outstanding allocator's outstanding allocations\n+\t\t\tAllocator::ThreadFlush(allocator_flush_threshold);\n \t\t}\n \t}\n #else\n@@ -241,6 +247,9 @@ void TaskScheduler::SetThreads(int32_t n) {\n #endif\n }\n \n+void TaskScheduler::SetAllocatorFlushTreshold(idx_t threshold) {\n+}\n+\n void TaskScheduler::Signal(idx_t n) {\n #ifndef DUCKDB_NO_THREADS\n \tqueue->semaphore.signal(n);\ndiff --git a/src/parser/common_table_expression_info.cpp b/src/parser/common_table_expression_info.cpp\nindex 1058908a7bc2..43f5bf0f0c77 100644\n--- a/src/parser/common_table_expression_info.cpp\n+++ b/src/parser/common_table_expression_info.cpp\n@@ -7,12 +7,14 @@ namespace duckdb {\n void CommonTableExpressionInfo::FormatSerialize(FormatSerializer &serializer) const {\n \tserializer.WriteProperty(\"aliases\", aliases);\n \tserializer.WriteProperty(\"query\", query);\n+\tserializer.WriteProperty(\"materialized\", materialized);\n }\n \n unique_ptr<CommonTableExpressionInfo> CommonTableExpressionInfo::FormatDeserialize(FormatDeserializer &deserializer) {\n \tauto result = make_uniq<CommonTableExpressionInfo>();\n \tresult->aliases = deserializer.ReadProperty<vector<string>>(\"aliases\");\n \tresult->query = deserializer.ReadProperty<unique_ptr<SelectStatement>>(\"query\");\n+\tresult->materialized = deserializer.ReadProperty<CTEMaterialize>(\"materialized\");\n \treturn result;\n }\n \ndiff --git a/src/parser/expression/lambda_expression.cpp b/src/parser/expression/lambda_expression.cpp\nindex eb57586a7322..434451665373 100644\n--- a/src/parser/expression/lambda_expression.cpp\n+++ b/src/parser/expression/lambda_expression.cpp\n@@ -13,7 +13,7 @@ LambdaExpression::LambdaExpression(unique_ptr<ParsedExpression> lhs, unique_ptr<\n }\n \n string LambdaExpression::ToString() const {\n-\treturn lhs->ToString() + \" -> \" + expr->ToString();\n+\treturn \"(\" + lhs->ToString() + \" -> \" + expr->ToString() + \")\";\n }\n \n bool LambdaExpression::Equal(const LambdaExpression &a, const LambdaExpression &b) {\ndiff --git a/src/parser/parsed_expression_iterator.cpp b/src/parser/parsed_expression_iterator.cpp\nindex 0b113c9d7f59..be997f03d2c8 100644\n--- a/src/parser/parsed_expression_iterator.cpp\n+++ b/src/parser/parsed_expression_iterator.cpp\n@@ -3,6 +3,7 @@\n #include \"duckdb/parser/expression/list.hpp\"\n #include \"duckdb/parser/query_node.hpp\"\n #include \"duckdb/parser/query_node/recursive_cte_node.hpp\"\n+#include \"duckdb/parser/query_node/cte_node.hpp\"\n #include \"duckdb/parser/query_node/select_node.hpp\"\n #include \"duckdb/parser/query_node/set_operation_node.hpp\"\n #include \"duckdb/parser/tableref/list.hpp\"\n@@ -256,6 +257,12 @@ void ParsedExpressionIterator::EnumerateQueryNodeChildren(\n \t\tEnumerateQueryNodeChildren(*rcte_node.right, callback);\n \t\tbreak;\n \t}\n+\tcase QueryNodeType::CTE_NODE: {\n+\t\tauto &cte_node = node.Cast<CTENode>();\n+\t\tEnumerateQueryNodeChildren(*cte_node.query, callback);\n+\t\tEnumerateQueryNodeChildren(*cte_node.child, callback);\n+\t\tbreak;\n+\t}\n \tcase QueryNodeType::SELECT_NODE: {\n \t\tauto &sel_node = node.Cast<SelectNode>();\n \t\tfor (idx_t i = 0; i < sel_node.select_list.size(); i++) {\ndiff --git a/src/parser/query_node.cpp b/src/parser/query_node.cpp\nindex afc84b4483e3..a29db18cb200 100644\n--- a/src/parser/query_node.cpp\n+++ b/src/parser/query_node.cpp\n@@ -3,6 +3,7 @@\n #include \"duckdb/parser/query_node/select_node.hpp\"\n #include \"duckdb/parser/query_node/set_operation_node.hpp\"\n #include \"duckdb/parser/query_node/recursive_cte_node.hpp\"\n+#include \"duckdb/parser/query_node/cte_node.hpp\"\n #include \"duckdb/common/limits.hpp\"\n #include \"duckdb/common/field_writer.hpp\"\n #include \"duckdb/common/serializer/format_serializer.hpp\"\n@@ -21,6 +22,7 @@ CommonTableExpressionMap CommonTableExpressionMap::Copy() const {\n \t\t\tkv_info->aliases.push_back(al);\n \t\t}\n \t\tkv_info->query = unique_ptr_cast<SQLStatement, SelectStatement>(kv.second->query->Copy());\n+\t\tkv_info->materialized = kv.second->materialized;\n \t\tres.map[kv.first] = std::move(kv_info);\n \t}\n \treturn res;\n@@ -59,7 +61,13 @@ string CommonTableExpressionMap::ToString() const {\n \t\t\t}\n \t\t\tresult += \")\";\n \t\t}\n-\t\tresult += \" AS (\";\n+\t\tif (kv.second->materialized == CTEMaterialize::CTE_MATERIALIZE_ALWAYS) {\n+\t\t\tresult += \" AS MATERIALIZED (\";\n+\t\t} else if (kv.second->materialized == CTEMaterialize::CTE_MATERIALIZE_NEVER) {\n+\t\t\tresult += \" AS NOT MATERIALIZED (\";\n+\t\t} else {\n+\t\t\tresult += \" AS (\";\n+\t\t}\n \t\tresult += cte.query->ToString();\n \t\tresult += \")\";\n \t\tfirst_cte = false;\n@@ -159,6 +167,7 @@ void QueryNode::CopyProperties(QueryNode &other) const {\n \t\t\tkv_info->aliases.push_back(al);\n \t\t}\n \t\tkv_info->query = unique_ptr_cast<SQLStatement, SelectStatement>(kv.second->query->Copy());\n+\t\tkv_info->materialized = kv.second->materialized;\n \t\tother.cte_map.map[kv.first] = std::move(kv_info);\n \t}\n }\n@@ -175,6 +184,7 @@ void QueryNode::Serialize(Serializer &main_serializer) const {\n \t\tserializer.WriteString(cte.first);\n \t\tserializer.WriteStringVector(cte.second->aliases);\n \t\tcte.second->query->Serialize(serializer);\n+\t\twriter.WriteField<CTEMaterialize>(cte.second->materialized);\n \t}\n \tSerialize(writer);\n \n@@ -207,6 +217,9 @@ unique_ptr<QueryNode> QueryNode::FormatDeserialize(FormatDeserializer &deseriali\n \tcase QueryNodeType::RECURSIVE_CTE_NODE:\n \t\tresult = RecursiveCTENode::FormatDeserialize(deserializer);\n \t\tbreak;\n+\tcase QueryNodeType::CTE_NODE:\n+\t\tresult = CTENode::FormatDeserialize(deserializer);\n+\t\tbreak;\n \tdefault:\n \t\tthrow SerializationException(\"Could not deserialize Query Node: unknown type!\");\n \t}\n@@ -231,6 +244,7 @@ unique_ptr<QueryNode> QueryNode::Deserialize(Deserializer &main_source) {\n \t\tauto info = make_uniq<CommonTableExpressionInfo>();\n \t\tsource.ReadStringVector(info->aliases);\n \t\tinfo->query = SelectStatement::Deserialize(source);\n+\t\tinfo->materialized = reader.ReadField<CTEMaterialize>(CTEMaterialize::CTE_MATERIALIZE_DEFAULT);\n \t\tnew_map[name] = std::move(info);\n \t}\n \tunique_ptr<QueryNode> result;\n@@ -244,6 +258,9 @@ unique_ptr<QueryNode> QueryNode::Deserialize(Deserializer &main_source) {\n \tcase QueryNodeType::RECURSIVE_CTE_NODE:\n \t\tresult = RecursiveCTENode::Deserialize(reader);\n \t\tbreak;\n+\tcase QueryNodeType::CTE_NODE:\n+\t\tresult = CTENode::Deserialize(reader);\n+\t\tbreak;\n \tdefault:\n \t\tthrow SerializationException(\"Could not deserialize Query Node: unknown type!\");\n \t}\ndiff --git a/src/parser/query_node/CMakeLists.txt b/src/parser/query_node/CMakeLists.txt\nindex 9cd09e447f60..9129b41486b1 100644\n--- a/src/parser/query_node/CMakeLists.txt\n+++ b/src/parser/query_node/CMakeLists.txt\n@@ -1,4 +1,4 @@\n-add_library_unity(duckdb_query_node OBJECT recursive_cte_node.cpp\n+add_library_unity(duckdb_query_node OBJECT recursive_cte_node.cpp cte_node.cpp\n                   select_node.cpp set_operation_node.cpp)\n set(ALL_OBJECT_FILES\n     ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_query_node>\ndiff --git a/src/parser/query_node/cte_node.cpp b/src/parser/query_node/cte_node.cpp\nnew file mode 100644\nindex 000000000000..b04771c26db1\n--- /dev/null\n+++ b/src/parser/query_node/cte_node.cpp\n@@ -0,0 +1,75 @@\n+#include \"duckdb/parser/query_node/cte_node.hpp\"\n+#include \"duckdb/common/field_writer.hpp\"\n+#include \"duckdb/common/serializer/format_serializer.hpp\"\n+#include \"duckdb/common/serializer/format_deserializer.hpp\"\n+\n+namespace duckdb {\n+\n+string CTENode::ToString() const {\n+\tstring result;\n+\tresult += child->ToString();\n+\treturn result;\n+}\n+\n+bool CTENode::Equals(const QueryNode *other_p) const {\n+\tif (!QueryNode::Equals(other_p)) {\n+\t\treturn false;\n+\t}\n+\tif (this == other_p) {\n+\t\treturn true;\n+\t}\n+\tauto &other = other_p->Cast<CTENode>();\n+\n+\tif (!query->Equals(other.query.get())) {\n+\t\treturn false;\n+\t}\n+\tif (!child->Equals(other.child.get())) {\n+\t\treturn false;\n+\t}\n+\treturn true;\n+}\n+\n+unique_ptr<QueryNode> CTENode::Copy() const {\n+\tauto result = make_uniq<CTENode>();\n+\tresult->ctename = ctename;\n+\tresult->query = query->Copy();\n+\tresult->child = child->Copy();\n+\tresult->aliases = aliases;\n+\tthis->CopyProperties(*result);\n+\treturn std::move(result);\n+}\n+\n+void CTENode::Serialize(FieldWriter &writer) const {\n+\twriter.WriteString(ctename);\n+\twriter.WriteSerializable(*query);\n+\twriter.WriteSerializable(*child);\n+\twriter.WriteList<string>(aliases);\n+}\n+\n+unique_ptr<QueryNode> CTENode::Deserialize(FieldReader &reader) {\n+\tauto result = make_uniq<CTENode>();\n+\tresult->ctename = reader.ReadRequired<string>();\n+\tresult->query = reader.ReadRequiredSerializable<QueryNode>();\n+\tresult->child = reader.ReadRequiredSerializable<QueryNode>();\n+\tresult->aliases = reader.ReadRequiredList<string>();\n+\treturn std::move(result);\n+}\n+\n+void CTENode::FormatSerialize(FormatSerializer &serializer) const {\n+\tQueryNode::FormatSerialize(serializer);\n+\tserializer.WriteProperty(\"cte_name\", ctename);\n+\tserializer.WriteProperty(\"query\", *query);\n+\tserializer.WriteProperty(\"child\", *child);\n+\tserializer.WriteProperty(\"aliases\", aliases);\n+}\n+\n+unique_ptr<QueryNode> CTENode::FormatDeserialize(FormatDeserializer &deserializer) {\n+\tauto result = make_uniq<CTENode>();\n+\tdeserializer.ReadProperty(\"cte_name\", result->ctename);\n+\tdeserializer.ReadProperty(\"query\", result->query);\n+\tdeserializer.ReadProperty(\"child\", result->child);\n+\tdeserializer.ReadProperty(\"aliases\", result->aliases);\n+\treturn std::move(result);\n+}\n+\n+} // namespace duckdb\ndiff --git a/src/parser/tableref/joinref.cpp b/src/parser/tableref/joinref.cpp\nindex 38de7f579f35..00f7c78bb419 100644\n--- a/src/parser/tableref/joinref.cpp\n+++ b/src/parser/tableref/joinref.cpp\n@@ -28,6 +28,9 @@ string JoinRef::ToString() const {\n \tcase JoinRefType::POSITIONAL:\n \t\tresult += \"POSITIONAL JOIN \";\n \t\tbreak;\n+\tcase JoinRefType::DEPENDENT:\n+\t\tresult += \"DEPENDENT JOIN \";\n+\t\tbreak;\n \t}\n \tresult += right->ToString();\n \tif (condition) {\ndiff --git a/src/parser/transform/expression/CMakeLists.txt b/src/parser/transform/expression/CMakeLists.txt\nindex 22da6e7520cf..7bb0c8fc7a5f 100644\n--- a/src/parser/transform/expression/CMakeLists.txt\n+++ b/src/parser/transform/expression/CMakeLists.txt\n@@ -18,7 +18,8 @@ add_library_unity(\n   transform_operator.cpp\n   transform_param_ref.cpp\n   transform_positional_reference.cpp\n-  transform_subquery.cpp)\n+  transform_subquery.cpp\n+  transform_multi_assign_reference.cpp)\n set(ALL_OBJECT_FILES\n     ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_transformer_expression>\n     PARENT_SCOPE)\ndiff --git a/src/parser/transform/expression/transform_constant.cpp b/src/parser/transform/expression/transform_constant.cpp\nindex 6794173e74cb..587a4a06307e 100644\n--- a/src/parser/transform/expression/transform_constant.cpp\n+++ b/src/parser/transform/expression/transform_constant.cpp\n@@ -1,8 +1,11 @@\n-#include \"duckdb/parser/expression/constant_expression.hpp\"\n-#include \"duckdb/parser/transformer.hpp\"\n-#include \"duckdb/common/operator/cast_operators.hpp\"\n+#include \"duckdb/common/enum_util.hpp\"\n #include \"duckdb/common/limits.hpp\"\n+#include \"duckdb/common/operator/cast_operators.hpp\"\n #include \"duckdb/common/types/decimal.hpp\"\n+#include \"duckdb/parser/expression/cast_expression.hpp\"\n+#include \"duckdb/parser/expression/constant_expression.hpp\"\n+#include \"duckdb/parser/expression/function_expression.hpp\"\n+#include \"duckdb/parser/transformer.hpp\"\n \n namespace duckdb {\n \n@@ -76,4 +79,53 @@ unique_ptr<ParsedExpression> Transformer::TransformConstant(duckdb_libpgquery::P\n \treturn TransformValue(c.val);\n }\n \n+bool Transformer::ConstructConstantFromExpression(const ParsedExpression &expr, Value &value) {\n+\t// We have to construct it like this because we don't have the ClientContext for binding/executing the expr here\n+\tswitch (expr.type) {\n+\tcase ExpressionType::FUNCTION: {\n+\t\tauto &function = expr.Cast<FunctionExpression>();\n+\t\tif (function.function_name == \"struct_pack\") {\n+\t\t\tunordered_set<string> unique_names;\n+\t\t\tchild_list_t<Value> values;\n+\t\t\tvalues.reserve(function.children.size());\n+\t\t\tfor (const auto &child : function.children) {\n+\t\t\t\tif (!unique_names.insert(child->alias).second) {\n+\t\t\t\t\tthrow BinderException(\"Duplicate struct entry name \\\"%s\\\"\", child->alias);\n+\t\t\t\t}\n+\t\t\t\tValue child_value;\n+\t\t\t\tif (!ConstructConstantFromExpression(*child, child_value)) {\n+\t\t\t\t\treturn false;\n+\t\t\t\t}\n+\t\t\t\tvalues.emplace_back(child->alias, std::move(child_value));\n+\t\t\t}\n+\t\t\tvalue = Value::STRUCT(std::move(values));\n+\t\t\treturn true;\n+\t\t} else {\n+\t\t\treturn false;\n+\t\t}\n+\t}\n+\tcase ExpressionType::VALUE_CONSTANT: {\n+\t\tauto &constant = expr.Cast<ConstantExpression>();\n+\t\tvalue = constant.value;\n+\t\treturn true;\n+\t}\n+\tcase ExpressionType::OPERATOR_CAST: {\n+\t\tauto &cast = expr.Cast<CastExpression>();\n+\t\tValue dummy_value;\n+\t\tif (!ConstructConstantFromExpression(*cast.child, dummy_value)) {\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\tstring error_message;\n+\t\tif (!dummy_value.DefaultTryCastAs(cast.cast_type, value, &error_message)) {\n+\t\t\tthrow ConversionException(\"Unable to cast %s to %s\", dummy_value.ToString(),\n+\t\t\t                          EnumUtil::ToString(cast.cast_type.id()));\n+\t\t}\n+\t\treturn true;\n+\t}\n+\tdefault:\n+\t\treturn false;\n+\t}\n+}\n+\n } // namespace duckdb\ndiff --git a/src/parser/transform/expression/transform_expression.cpp b/src/parser/transform/expression/transform_expression.cpp\nindex 6eaeeed96d2c..9f7e7a89ab6b 100644\n--- a/src/parser/transform/expression/transform_expression.cpp\n+++ b/src/parser/transform/expression/transform_expression.cpp\n@@ -75,6 +75,8 @@ unique_ptr<ParsedExpression> Transformer::TransformExpression(duckdb_libpgquery:\n \t\treturn TransformStarExpression(PGCast<duckdb_libpgquery::PGAStar>(node));\n \tcase duckdb_libpgquery::T_PGBooleanTest:\n \t\treturn TransformBooleanTest(PGCast<duckdb_libpgquery::PGBooleanTest>(node));\n+\tcase duckdb_libpgquery::T_PGMultiAssignRef:\n+\t\treturn TransformMultiAssignRef(PGCast<duckdb_libpgquery::PGMultiAssignRef>(node));\n \n \tdefault:\n \t\tthrow NotImplementedException(\"Expression type %s (%d)\", NodetypeToString(node.type), (int)node.type);\ndiff --git a/src/parser/transform/expression/transform_multi_assign_reference.cpp b/src/parser/transform/expression/transform_multi_assign_reference.cpp\nnew file mode 100644\nindex 000000000000..e2c4937fe0b7\n--- /dev/null\n+++ b/src/parser/transform/expression/transform_multi_assign_reference.cpp\n@@ -0,0 +1,44 @@\n+#include \"duckdb/parser/parsed_expression.hpp\"\n+#include \"duckdb/parser/transformer.hpp\"\n+\n+namespace duckdb {\n+\n+unique_ptr<ParsedExpression> Transformer::TransformMultiAssignRef(duckdb_libpgquery::PGMultiAssignRef &root) {\n+\t// Multi assignment for the ROW function\n+\tif (root.source->type == duckdb_libpgquery::T_PGFuncCall) {\n+\t\tauto func = PGCast<duckdb_libpgquery::PGFuncCall>(*root.source);\n+\n+\t\t// Explicitly only allow ROW function\n+\t\tchar const *function_name =\n+\t\t    PGPointerCast<duckdb_libpgquery::PGValue>(func.funcname->tail->data.ptr_value)->val.str;\n+\t\tif (function_name == nullptr || strlen(function_name) != 3 || strncmp(function_name, \"row\", 3) != 0) {\n+\t\t\treturn TransformExpression(root.source);\n+\t\t}\n+\n+\t\t// Too many columns (ie. (x, y) = (1, 2, 3) )\n+\t\tif (root.ncolumns < func.args->length) {\n+\t\t\tthrow ParserException(\n+\t\t\t    \"Could not perform multiple assignment, target only expects %d values, %d were provided\", root.ncolumns,\n+\t\t\t    func.args->length);\n+\t\t}\n+\n+\t\t// Get the expression corresponding with the current column\n+\t\tidx_t idx = 1;\n+\t\tauto list = func.args->head;\n+\t\twhile (list && idx < static_cast<idx_t>(root.colno)) {\n+\t\t\tlist = list->next;\n+\t\t\t++idx;\n+\t\t}\n+\n+\t\t// Not enough columns (ie. (x, y, z) = (1, 2) )\n+\t\tif (!list) {\n+\t\t\tthrow ParserException(\n+\t\t\t    \"Could not perform multiple assignment, target expects %d values, only %d were provided\", root.ncolumns,\n+\t\t\t    func.args->length);\n+\t\t}\n+\t\treturn TransformExpression(reinterpret_cast<duckdb_libpgquery::PGNode *>(list->data.ptr_value));\n+\t}\n+\treturn TransformExpression(root.source);\n+}\n+\n+} // namespace duckdb\ndiff --git a/src/parser/transform/helpers/transform_cte.cpp b/src/parser/transform/helpers/transform_cte.cpp\nindex 0e43d3e80488..dded0d7d694a 100644\n--- a/src/parser/transform/helpers/transform_cte.cpp\n+++ b/src/parser/transform/helpers/transform_cte.cpp\n@@ -3,6 +3,7 @@\n #include \"duckdb/common/exception.hpp\"\n #include \"duckdb/parser/statement/select_statement.hpp\"\n #include \"duckdb/parser/query_node/recursive_cte_node.hpp\"\n+#include \"duckdb/parser/query_node/cte_node.hpp\"\n \n namespace duckdb {\n \n@@ -10,6 +11,7 @@ unique_ptr<CommonTableExpressionInfo> CommonTableExpressionInfo::Copy() {\n \tauto result = make_uniq<CommonTableExpressionInfo>();\n \tresult->aliases = aliases;\n \tresult->query = unique_ptr_cast<SQLStatement, SelectStatement>(query->Copy());\n+\tresult->materialized = materialized;\n \treturn result;\n }\n \n@@ -29,7 +31,8 @@ void Transformer::ExtractCTEsRecursive(CommonTableExpressionMap &cte_map) {\n \t}\n }\n \n-void Transformer::TransformCTE(duckdb_libpgquery::PGWithClause &de_with_clause, CommonTableExpressionMap &cte_map) {\n+void Transformer::TransformCTE(duckdb_libpgquery::PGWithClause &de_with_clause, CommonTableExpressionMap &cte_map,\n+                               vector<unique_ptr<CTENode>> &materialized_ctes) {\n \t// TODO: might need to update in case of future lawsuit\n \tstored_cte_map.push_back(&cte_map);\n \n@@ -79,6 +82,21 @@ void Transformer::TransformCTE(duckdb_libpgquery::PGWithClause &de_with_clause,\n \t\t\t// can't have two CTEs with same name\n \t\t\tthrow ParserException(\"Duplicate CTE name \\\"%s\\\"\", cte_name);\n \t\t}\n+\n+#ifdef DUCKDB_ALTERNATIVE_VERIFY\n+\t\tif (cte.ctematerialized == duckdb_libpgquery::PGCTEMaterializeDefault) {\n+#else\n+\t\tif (cte.ctematerialized == duckdb_libpgquery::PGCTEMaterializeAlways) {\n+#endif\n+\t\t\tauto materialize = make_uniq<CTENode>();\n+\t\t\tmaterialize->query = info->query->node->Copy();\n+\t\t\tmaterialize->ctename = cte_name;\n+\t\t\tmaterialize->aliases = info->aliases;\n+\t\t\tmaterialized_ctes.push_back(std::move(materialize));\n+\n+\t\t\tinfo->materialized = CTEMaterialize::CTE_MATERIALIZE_ALWAYS;\n+\t\t}\n+\n \t\tcte_map.map[cte_name] = std::move(info);\n \t}\n }\ndiff --git a/src/parser/transform/statement/transform_copy.cpp b/src/parser/transform/statement/transform_copy.cpp\nindex 1445b2119cc0..41c8bea840cb 100644\n--- a/src/parser/transform/statement/transform_copy.cpp\n+++ b/src/parser/transform/statement/transform_copy.cpp\n@@ -1,6 +1,8 @@\n #include \"duckdb/common/string_util.hpp\"\n #include \"duckdb/common/types/value.hpp\"\n+#include \"duckdb/core_functions/scalar/struct_functions.hpp\"\n #include \"duckdb/parser/expression/constant_expression.hpp\"\n+#include \"duckdb/parser/expression/function_expression.hpp\"\n #include \"duckdb/parser/statement/copy_statement.hpp\"\n #include \"duckdb/parser/tableref/basetableref.hpp\"\n #include \"duckdb/parser/transformer.hpp\"\n@@ -47,6 +49,17 @@ void Transformer::TransformCopyOptions(CopyInfo &info, optional_ptr<duckdb_libpg\n \t\tcase duckdb_libpgquery::T_PGAStar:\n \t\t\tinfo.options[def_elem->defname].push_back(Value(\"*\"));\n \t\t\tbreak;\n+\t\tcase duckdb_libpgquery::T_PGFuncCall: {\n+\t\t\tauto func_call = PGPointerCast<duckdb_libpgquery::PGFuncCall>(def_elem->arg);\n+\t\t\tauto func_expr = TransformFuncCall(*func_call);\n+\n+\t\t\tValue value;\n+\t\t\tif (!Transformer::ConstructConstantFromExpression(*func_expr, value)) {\n+\t\t\t\tthrow ParserException(\"Unsupported expression in COPY options: %s\", func_expr->ToString());\n+\t\t\t}\n+\t\t\tinfo.options[def_elem->defname].push_back(std::move(value));\n+\t\t\tbreak;\n+\t\t}\n \t\tdefault: {\n \t\t\tauto val = PGPointerCast<duckdb_libpgquery::PGValue>(def_elem->arg);\n \t\t\tinfo.options[def_elem->defname].push_back(TransformValue(*val)->value);\ndiff --git a/src/parser/transform/statement/transform_delete.cpp b/src/parser/transform/statement/transform_delete.cpp\nindex 643e7c17ff4a..48cde7b4c29e 100644\n--- a/src/parser/transform/statement/transform_delete.cpp\n+++ b/src/parser/transform/statement/transform_delete.cpp\n@@ -5,8 +5,13 @@ namespace duckdb {\n \n unique_ptr<DeleteStatement> Transformer::TransformDelete(duckdb_libpgquery::PGDeleteStmt &stmt) {\n \tauto result = make_uniq<DeleteStatement>();\n+\tvector<unique_ptr<CTENode>> materialized_ctes;\n \tif (stmt.withClause) {\n-\t\tTransformCTE(*PGPointerCast<duckdb_libpgquery::PGWithClause>(stmt.withClause), result->cte_map);\n+\t\tTransformCTE(*PGPointerCast<duckdb_libpgquery::PGWithClause>(stmt.withClause), result->cte_map,\n+\t\t             materialized_ctes);\n+\t\tif (!materialized_ctes.empty()) {\n+\t\t\tthrow NotImplementedException(\"Materialized CTEs are not implemented for delete.\");\n+\t\t}\n \t}\n \n \tresult->condition = TransformExpression(stmt.whereClause);\ndiff --git a/src/parser/transform/statement/transform_insert.cpp b/src/parser/transform/statement/transform_insert.cpp\nindex dfa3c25012c9..30d7aeb62038 100644\n--- a/src/parser/transform/statement/transform_insert.cpp\n+++ b/src/parser/transform/statement/transform_insert.cpp\n@@ -24,8 +24,13 @@ unique_ptr<TableRef> Transformer::TransformValuesList(duckdb_libpgquery::PGList\n \n unique_ptr<InsertStatement> Transformer::TransformInsert(duckdb_libpgquery::PGInsertStmt &stmt) {\n \tauto result = make_uniq<InsertStatement>();\n+\tvector<unique_ptr<CTENode>> materialized_ctes;\n \tif (stmt.withClause) {\n-\t\tTransformCTE(*PGPointerCast<duckdb_libpgquery::PGWithClause>(stmt.withClause), result->cte_map);\n+\t\tTransformCTE(*PGPointerCast<duckdb_libpgquery::PGWithClause>(stmt.withClause), result->cte_map,\n+\t\t             materialized_ctes);\n+\t\tif (!materialized_ctes.empty()) {\n+\t\t\tthrow NotImplementedException(\"Materialized CTEs are not implemented for insert.\");\n+\t\t}\n \t}\n \n \t// first check if there are any columns specified\ndiff --git a/src/parser/transform/statement/transform_pivot_stmt.cpp b/src/parser/transform/statement/transform_pivot_stmt.cpp\nindex fc534756d895..849af1a34ff1 100644\n--- a/src/parser/transform/statement/transform_pivot_stmt.cpp\n+++ b/src/parser/transform/statement/transform_pivot_stmt.cpp\n@@ -128,9 +128,11 @@ unique_ptr<QueryNode> Transformer::TransformPivotStatement(duckdb_libpgquery::PG\n \tauto source = TransformTableRefNode(*pivot->source);\n \n \tauto select_node = make_uniq<SelectNode>();\n+\tvector<unique_ptr<CTENode>> materialized_ctes;\n \t// handle the CTEs\n \tif (select.withClause) {\n-\t\tTransformCTE(*PGPointerCast<duckdb_libpgquery::PGWithClause>(select.withClause), select_node->cte_map);\n+\t\tTransformCTE(*PGPointerCast<duckdb_libpgquery::PGWithClause>(select.withClause), select_node->cte_map,\n+\t\t             materialized_ctes);\n \t}\n \tif (!pivot->columns) {\n \t\t// no pivot columns - not actually a pivot\n@@ -197,7 +199,10 @@ unique_ptr<QueryNode> Transformer::TransformPivotStatement(duckdb_libpgquery::PG\n \tselect_node->from_table = std::move(pivot_ref);\n \t// transform order by/limit modifiers\n \tTransformModifiers(select, *select_node);\n-\treturn std::move(select_node);\n+\n+\tauto node = Transformer::TransformMaterializedCTE(std::move(select_node), materialized_ctes);\n+\n+\treturn node;\n }\n \n } // namespace duckdb\ndiff --git a/src/parser/transform/statement/transform_pragma.cpp b/src/parser/transform/statement/transform_pragma.cpp\nindex f684939395e6..6c9d25e272fc 100644\n--- a/src/parser/transform/statement/transform_pragma.cpp\n+++ b/src/parser/transform/statement/transform_pragma.cpp\n@@ -1,11 +1,12 @@\n-#include \"duckdb/parser/statement/pragma_statement.hpp\"\n-#include \"duckdb/parser/transformer.hpp\"\n-#include \"duckdb/parser/expression/constant_expression.hpp\"\n-#include \"duckdb/parser/expression/comparison_expression.hpp\"\n-#include \"duckdb/execution/expression_executor.hpp\"\n-#include \"duckdb/parser/statement/set_statement.hpp\"\n #include \"duckdb/common/case_insensitive_map.hpp\"\n+#include \"duckdb/common/enum_util.hpp\"\n+#include \"duckdb/execution/expression_executor.hpp\"\n #include \"duckdb/parser/expression/columnref_expression.hpp\"\n+#include \"duckdb/parser/expression/comparison_expression.hpp\"\n+#include \"duckdb/parser/expression/constant_expression.hpp\"\n+#include \"duckdb/parser/statement/pragma_statement.hpp\"\n+#include \"duckdb/parser/statement/set_statement.hpp\"\n+#include \"duckdb/parser/transformer.hpp\"\n \n namespace duckdb {\n \n@@ -22,15 +23,17 @@ unique_ptr<SQLStatement> Transformer::TransformPragma(duckdb_libpgquery::PGPragm\n \n \t\t\tif (expr->type == ExpressionType::COMPARE_EQUAL) {\n \t\t\t\tauto &comp = expr->Cast<ComparisonExpression>();\n-\t\t\t\tif (comp.right->type != ExpressionType::VALUE_CONSTANT) {\n-\t\t\t\t\tthrow ParserException(\"Named parameter requires a constant on the RHS\");\n-\t\t\t\t}\n \t\t\t\tif (comp.left->type != ExpressionType::COLUMN_REF) {\n \t\t\t\t\tthrow ParserException(\"Named parameter requires a column reference on the LHS\");\n \t\t\t\t}\n \t\t\t\tauto &columnref = comp.left->Cast<ColumnRefExpression>();\n-\t\t\t\tauto &constant = comp.right->Cast<ConstantExpression>();\n-\t\t\t\tinfo.named_parameters[columnref.GetName()] = constant.value;\n+\n+\t\t\t\tValue rhs_value;\n+\t\t\t\tif (!Transformer::ConstructConstantFromExpression(*comp.right, rhs_value)) {\n+\t\t\t\t\tthrow ParserException(\"Named parameter requires a constant on the RHS\");\n+\t\t\t\t}\n+\n+\t\t\t\tinfo.named_parameters[columnref.GetName()] = rhs_value;\n \t\t\t} else if (node->type == duckdb_libpgquery::T_PGAConst) {\n \t\t\t\tauto constant = TransformConstant(*PGPointerCast<duckdb_libpgquery::PGAConst>(node.get()));\n \t\t\t\tinfo.parameters.push_back((constant->Cast<ConstantExpression>()).value);\ndiff --git a/src/parser/transform/statement/transform_select_node.cpp b/src/parser/transform/statement/transform_select_node.cpp\nindex cc5b21b36a97..0e4994fa1901 100644\n--- a/src/parser/transform/statement/transform_select_node.cpp\n+++ b/src/parser/transform/statement/transform_select_node.cpp\n@@ -5,6 +5,7 @@\n #include \"duckdb/parser/query_node/set_operation_node.hpp\"\n #include \"duckdb/parser/statement/select_statement.hpp\"\n #include \"duckdb/parser/transformer.hpp\"\n+#include \"duckdb/parser/query_node/cte_node.hpp\"\n \n namespace duckdb {\n \n@@ -45,13 +46,15 @@ unique_ptr<QueryNode> Transformer::TransformSelectInternal(duckdb_libpgquery::PG\n \tauto stack_checker = StackCheck();\n \n \tunique_ptr<QueryNode> node;\n+\tvector<unique_ptr<CTENode>> materialized_ctes;\n \n \tswitch (stmt.op) {\n \tcase duckdb_libpgquery::PG_SETOP_NONE: {\n \t\tnode = make_uniq<SelectNode>();\n \t\tauto &result = node->Cast<SelectNode>();\n \t\tif (stmt.withClause) {\n-\t\t\tTransformCTE(*PGPointerCast<duckdb_libpgquery::PGWithClause>(stmt.withClause), node->cte_map);\n+\t\t\tTransformCTE(*PGPointerCast<duckdb_libpgquery::PGWithClause>(stmt.withClause), node->cte_map,\n+\t\t\t             materialized_ctes);\n \t\t}\n \t\tif (stmt.windowClause) {\n \t\t\tfor (auto window_ele = stmt.windowClause->head; window_ele != nullptr; window_ele = window_ele->next) {\n@@ -113,7 +116,8 @@ unique_ptr<QueryNode> Transformer::TransformSelectInternal(duckdb_libpgquery::PG\n \t\tnode = make_uniq<SetOperationNode>();\n \t\tauto &result = node->Cast<SetOperationNode>();\n \t\tif (stmt.withClause) {\n-\t\t\tTransformCTE(*PGPointerCast<duckdb_libpgquery::PGWithClause>(stmt.withClause), node->cte_map);\n+\t\t\tTransformCTE(*PGPointerCast<duckdb_libpgquery::PGWithClause>(stmt.withClause), node->cte_map,\n+\t\t\t             materialized_ctes);\n \t\t}\n \t\tresult.left = TransformSelectNode(*stmt.larg);\n \t\tresult.right = TransformSelectNode(*stmt.rarg);\n@@ -151,7 +155,12 @@ unique_ptr<QueryNode> Transformer::TransformSelectInternal(duckdb_libpgquery::PG\n \tdefault:\n \t\tthrow NotImplementedException(\"Statement type %d not implemented!\", stmt.op);\n \t}\n+\n \tTransformModifiers(stmt, *node);\n+\n+\t// Handle materialized CTEs\n+\tnode = Transformer::TransformMaterializedCTE(std::move(node), materialized_ctes);\n+\n \treturn node;\n }\n \ndiff --git a/src/parser/transform/statement/transform_update.cpp b/src/parser/transform/statement/transform_update.cpp\nindex 6d7048355e10..c283af83c030 100644\n--- a/src/parser/transform/statement/transform_update.cpp\n+++ b/src/parser/transform/statement/transform_update.cpp\n@@ -19,8 +19,13 @@ unique_ptr<UpdateSetInfo> Transformer::TransformUpdateSetInfo(duckdb_libpgquery:\n \n unique_ptr<UpdateStatement> Transformer::TransformUpdate(duckdb_libpgquery::PGUpdateStmt &stmt) {\n \tauto result = make_uniq<UpdateStatement>();\n+\tvector<unique_ptr<CTENode>> materialized_ctes;\n \tif (stmt.withClause) {\n-\t\tTransformCTE(*PGPointerCast<duckdb_libpgquery::PGWithClause>(stmt.withClause), result->cte_map);\n+\t\tTransformCTE(*PGPointerCast<duckdb_libpgquery::PGWithClause>(stmt.withClause), result->cte_map,\n+\t\t             materialized_ctes);\n+\t\tif (!materialized_ctes.empty()) {\n+\t\t\tthrow NotImplementedException(\"Materialized CTEs are not implemented for update.\");\n+\t\t}\n \t}\n \n \tresult->table = TransformRangeVar(*stmt.relation);\ndiff --git a/src/parser/transformer.cpp b/src/parser/transformer.cpp\nindex e727ef2386a8..dafb83e9e30e 100644\n--- a/src/parser/transformer.cpp\n+++ b/src/parser/transformer.cpp\n@@ -4,6 +4,7 @@\n #include \"duckdb/parser/statement/list.hpp\"\n #include \"duckdb/parser/tableref/emptytableref.hpp\"\n #include \"duckdb/parser/query_node/select_node.hpp\"\n+#include \"duckdb/parser/query_node/cte_node.hpp\"\n #include \"duckdb/parser/parser_options.hpp\"\n \n namespace duckdb {\n@@ -209,4 +210,18 @@ unique_ptr<SQLStatement> Transformer::TransformStatementInternal(duckdb_libpgque\n \t}\n }\n \n+unique_ptr<QueryNode> Transformer::TransformMaterializedCTE(unique_ptr<QueryNode> root,\n+                                                            vector<unique_ptr<CTENode>> &materialized_ctes) {\n+\twhile (!materialized_ctes.empty()) {\n+\t\tunique_ptr<CTENode> node_result;\n+\t\tnode_result = std::move(materialized_ctes.back());\n+\t\tnode_result->cte_map = root->cte_map.Copy();\n+\t\tnode_result->child = std::move(root);\n+\t\troot = std::move(node_result);\n+\t\tmaterialized_ctes.pop_back();\n+\t}\n+\n+\treturn root;\n+}\n+\n } // namespace duckdb\ndiff --git a/src/planner/binder.cpp b/src/planner/binder.cpp\nindex 306b0426e574..e4d2716f4fda 100644\n--- a/src/planner/binder.cpp\n+++ b/src/planner/binder.cpp\n@@ -117,6 +117,9 @@ unique_ptr<BoundQueryNode> Binder::BindNode(QueryNode &node) {\n \tcase QueryNodeType::RECURSIVE_CTE_NODE:\n \t\tresult = BindNode(node.Cast<RecursiveCTENode>());\n \t\tbreak;\n+\tcase QueryNodeType::CTE_NODE:\n+\t\tresult = BindNode(node.Cast<CTENode>());\n+\t\tbreak;\n \tdefault:\n \t\tD_ASSERT(node.type == QueryNodeType::SET_OPERATION_NODE);\n \t\tresult = BindNode(node.Cast<SetOperationNode>());\n@@ -145,6 +148,8 @@ unique_ptr<LogicalOperator> Binder::CreatePlan(BoundQueryNode &node) {\n \t\treturn CreatePlan(node.Cast<BoundSetOperationNode>());\n \tcase QueryNodeType::RECURSIVE_CTE_NODE:\n \t\treturn CreatePlan(node.Cast<BoundRecursiveCTENode>());\n+\tcase QueryNodeType::CTE_NODE:\n+\t\treturn CreatePlan(node.Cast<BoundCTENode>());\n \tdefault:\n \t\tthrow InternalException(\"Unsupported bound query node type\");\n \t}\ndiff --git a/src/planner/binder/query_node/CMakeLists.txt b/src/planner/binder/query_node/CMakeLists.txt\nindex 4dcea52410f8..fd28e0b483bf 100644\n--- a/src/planner/binder/query_node/CMakeLists.txt\n+++ b/src/planner/binder/query_node/CMakeLists.txt\n@@ -4,9 +4,11 @@ add_library_unity(\n   bind_select_node.cpp\n   bind_setop_node.cpp\n   bind_recursive_cte_node.cpp\n+  bind_cte_node.cpp\n   bind_table_macro_node.cpp\n   plan_query_node.cpp\n   plan_recursive_cte_node.cpp\n+  plan_cte_node.cpp\n   plan_select_node.cpp\n   plan_setop.cpp\n   plan_subquery.cpp)\ndiff --git a/src/planner/binder/query_node/bind_cte_node.cpp b/src/planner/binder/query_node/bind_cte_node.cpp\nnew file mode 100644\nindex 000000000000..42f14b9604a3\n--- /dev/null\n+++ b/src/planner/binder/query_node/bind_cte_node.cpp\n@@ -0,0 +1,64 @@\n+#include \"duckdb/parser/expression/constant_expression.hpp\"\n+#include \"duckdb/parser/expression_map.hpp\"\n+#include \"duckdb/parser/query_node/select_node.hpp\"\n+#include \"duckdb/parser/query_node/cte_node.hpp\"\n+#include \"duckdb/planner/binder.hpp\"\n+#include \"duckdb/planner/query_node/bound_cte_node.hpp\"\n+#include \"duckdb/planner/query_node/bound_select_node.hpp\"\n+\n+namespace duckdb {\n+\n+unique_ptr<BoundQueryNode> Binder::BindNode(CTENode &statement) {\n+\tauto result = make_uniq<BoundCTENode>();\n+\n+\t// first recursively visit the materialized CTE operations\n+\t// the left side is visited first and is added to the BindContext of the right side\n+\tD_ASSERT(statement.query);\n+\tD_ASSERT(statement.child);\n+\n+\tresult->ctename = statement.ctename;\n+\tresult->setop_index = GenerateTableIndex();\n+\n+\tresult->query_binder = Binder::CreateBinder(context, this);\n+\tresult->query = result->query_binder->BindNode(*statement.query);\n+\n+\t// the result types of the CTE are the types of the LHS\n+\tresult->types = result->query->types;\n+\t// names are picked from the LHS, unless aliases are explicitly specified\n+\tresult->names = result->query->names;\n+\tfor (idx_t i = 0; i < statement.aliases.size() && i < result->names.size(); i++) {\n+\t\tresult->names[i] = statement.aliases[i];\n+\t}\n+\n+\t// This allows the right side to reference the CTE\n+\tbind_context.AddGenericBinding(result->setop_index, statement.ctename, result->names, result->types);\n+\n+\tresult->child_binder = Binder::CreateBinder(context, this);\n+\n+\t// Move all modifiers to the child node.\n+\tfor (auto &modifier : statement.modifiers) {\n+\t\tstatement.child->modifiers.push_back(std::move(modifier));\n+\t}\n+\n+\tstatement.modifiers.clear();\n+\n+\t// Add bindings of left side to temporary CTE bindings context\n+\tresult->child_binder->bind_context.AddCTEBinding(result->setop_index, statement.ctename, result->names,\n+\t                                                 result->types);\n+\tresult->child = result->child_binder->BindNode(*statement.child);\n+\n+\t// the result types of the CTE are the types of the LHS\n+\tresult->types = result->child->types;\n+\t// names are picked from the LHS, unless aliases are explicitly specified\n+\tresult->names = result->child->names;\n+\tfor (idx_t i = 0; i < statement.aliases.size() && i < result->names.size(); i++) {\n+\t\tresult->names[i] = statement.aliases[i];\n+\t}\n+\n+\tMoveCorrelatedExpressions(*result->query_binder);\n+\tMoveCorrelatedExpressions(*result->child_binder);\n+\n+\treturn std::move(result);\n+}\n+\n+} // namespace duckdb\ndiff --git a/src/planner/binder/query_node/plan_cte_node.cpp b/src/planner/binder/query_node/plan_cte_node.cpp\nnew file mode 100644\nindex 000000000000..cfc079153b05\n--- /dev/null\n+++ b/src/planner/binder/query_node/plan_cte_node.cpp\n@@ -0,0 +1,26 @@\n+#include \"duckdb/common/string_util.hpp\"\n+#include \"duckdb/planner/binder.hpp\"\n+#include \"duckdb/planner/expression/bound_cast_expression.hpp\"\n+#include \"duckdb/planner/operator/logical_materialized_cte.hpp\"\n+#include \"duckdb/planner/operator/logical_projection.hpp\"\n+#include \"duckdb/planner/operator/logical_set_operation.hpp\"\n+#include \"duckdb/planner/query_node/bound_cte_node.hpp\"\n+\n+namespace duckdb {\n+\n+unique_ptr<LogicalOperator> Binder::CreatePlan(BoundCTENode &node) {\n+\t// Generate the logical plan for the cte_query and child.\n+\tauto cte_query = CreatePlan(*node.query);\n+\tauto cte_child = CreatePlan(*node.child);\n+\n+\tauto root = make_uniq<LogicalMaterializedCTE>(node.ctename, node.setop_index, node.types.size(),\n+\t                                              std::move(cte_query), std::move(cte_child));\n+\n+\t// check if there are any unplanned subqueries left in either child\n+\thas_unplanned_dependent_joins =\n+\t    node.child_binder->has_unplanned_dependent_joins || node.query_binder->has_unplanned_dependent_joins;\n+\n+\treturn VisitQueryNode(node, std::move(root));\n+}\n+\n+} // namespace duckdb\ndiff --git a/src/planner/binder/query_node/plan_recursive_cte_node.cpp b/src/planner/binder/query_node/plan_recursive_cte_node.cpp\nindex e8ad57432806..d41345b13208 100644\n--- a/src/planner/binder/query_node/plan_recursive_cte_node.cpp\n+++ b/src/planner/binder/query_node/plan_recursive_cte_node.cpp\n@@ -10,15 +10,15 @@ namespace duckdb {\n \n unique_ptr<LogicalOperator> Binder::CreatePlan(BoundRecursiveCTENode &node) {\n \t// Generate the logical plan for the left and right sides of the set operation\n-\tnode.left_binder->plan_subquery = plan_subquery;\n-\tnode.right_binder->plan_subquery = plan_subquery;\n+\tnode.left_binder->is_outside_flattened = is_outside_flattened;\n+\tnode.right_binder->is_outside_flattened = is_outside_flattened;\n \n \tauto left_node = node.left_binder->CreatePlan(*node.left);\n \tauto right_node = node.right_binder->CreatePlan(*node.right);\n \n \t// check if there are any unplanned subqueries left in either child\n-\thas_unplanned_subqueries =\n-\t    node.left_binder->has_unplanned_subqueries || node.right_binder->has_unplanned_subqueries;\n+\thas_unplanned_dependent_joins =\n+\t    node.left_binder->has_unplanned_dependent_joins || node.right_binder->has_unplanned_dependent_joins;\n \n \t// for both the left and right sides, cast them to the same types\n \tleft_node = CastLogicalOperatorToTypes(node.left->types, node.types, std::move(left_node));\n@@ -30,7 +30,7 @@ unique_ptr<LogicalOperator> Binder::CreatePlan(BoundRecursiveCTENode &node) {\n \t\t                                           std::move(right_node), LogicalOperatorType::LOGICAL_UNION);\n \t\treturn VisitQueryNode(node, std::move(root));\n \t}\n-\tauto root = make_uniq<LogicalRecursiveCTE>(node.setop_index, node.types.size(), node.union_all,\n+\tauto root = make_uniq<LogicalRecursiveCTE>(node.ctename, node.setop_index, node.types.size(), node.union_all,\n \t                                           std::move(left_node), std::move(right_node));\n \n \treturn VisitQueryNode(node, std::move(root));\ndiff --git a/src/planner/binder/query_node/plan_setop.cpp b/src/planner/binder/query_node/plan_setop.cpp\nindex 26f78c20bfd5..3d9b77949e78 100644\n--- a/src/planner/binder/query_node/plan_setop.cpp\n+++ b/src/planner/binder/query_node/plan_setop.cpp\n@@ -60,8 +60,8 @@ unique_ptr<LogicalOperator> Binder::CastLogicalOperatorToTypes(vector<LogicalTyp\n \n unique_ptr<LogicalOperator> Binder::CreatePlan(BoundSetOperationNode &node) {\n \t// Generate the logical plan for the left and right sides of the set operation\n-\tnode.left_binder->plan_subquery = plan_subquery;\n-\tnode.right_binder->plan_subquery = plan_subquery;\n+\tnode.left_binder->is_outside_flattened = is_outside_flattened;\n+\tnode.right_binder->is_outside_flattened = is_outside_flattened;\n \n \tauto left_node = node.left_binder->CreatePlan(*node.left);\n \tauto right_node = node.right_binder->CreatePlan(*node.right);\n@@ -95,8 +95,8 @@ unique_ptr<LogicalOperator> Binder::CreatePlan(BoundSetOperationNode &node) {\n \t}\n \n \t// check if there are any unplanned subqueries left in either child\n-\thas_unplanned_subqueries =\n-\t    node.left_binder->has_unplanned_subqueries || node.right_binder->has_unplanned_subqueries;\n+\thas_unplanned_dependent_joins =\n+\t    node.left_binder->has_unplanned_dependent_joins || node.right_binder->has_unplanned_dependent_joins;\n \n \t// create actual logical ops for setops\n \tLogicalOperatorType logical_type;\ndiff --git a/src/planner/binder/query_node/plan_subquery.cpp b/src/planner/binder/query_node/plan_subquery.cpp\nindex db26ee0d233d..2843970e096d 100644\n--- a/src/planner/binder/query_node/plan_subquery.cpp\n+++ b/src/planner/binder/query_node/plan_subquery.cpp\n@@ -14,6 +14,10 @@\n #include \"duckdb/planner/operator/logical_window.hpp\"\n #include \"duckdb/function/function_binder.hpp\"\n #include \"duckdb/planner/subquery/flatten_dependent_join.hpp\"\n+#include \"duckdb/common/enums/logical_operator_type.hpp\"\n+#include \"duckdb/planner/operator/logical_dependent_join.hpp\"\n+#include \"duckdb/planner/expression_binder/lateral_binder.hpp\"\n+#include \"duckdb/planner/subquery/recursive_dependent_join_planner.hpp\"\n \n namespace duckdb {\n \n@@ -327,43 +331,43 @@ static unique_ptr<Expression> PlanCorrelatedSubquery(Binder &binder, BoundSubque\n \t}\n }\n \n-class RecursiveSubqueryPlanner : public LogicalOperatorVisitor {\n-public:\n-\texplicit RecursiveSubqueryPlanner(Binder &binder) : binder(binder) {\n-\t}\n-\tvoid VisitOperator(LogicalOperator &op) override {\n-\t\tif (!op.children.empty()) {\n-\t\t\troot = std::move(op.children[0]);\n-\t\t\tD_ASSERT(root);\n-\t\t\tVisitOperatorExpressions(op);\n-\t\t\top.children[0] = std::move(root);\n-\t\t\tfor (idx_t i = 0; i < op.children.size(); i++) {\n-\t\t\t\tD_ASSERT(op.children[i]);\n-\t\t\t\tVisitOperator(*op.children[i]);\n-\t\t\t}\n+void RecursiveDependentJoinPlanner::VisitOperator(LogicalOperator &op) {\n+\tif (!op.children.empty()) {\n+\t\troot = std::move(op.children[0]);\n+\t\tD_ASSERT(root);\n+\t\tif (root->type == LogicalOperatorType::LOGICAL_DEPENDENT_JOIN) {\n+\t\t\t// Found a dependent join, flatten it\n+\t\t\tauto &new_root = root->Cast<LogicalDependentJoin>();\n+\t\t\troot = binder.PlanLateralJoin(std::move(new_root.children[0]), std::move(new_root.children[1]),\n+\t\t\t                              new_root.correlated_columns, new_root.join_type,\n+\t\t\t                              std::move(new_root.join_condition));\n+\t\t}\n+\t\tVisitOperatorExpressions(op);\n+\t\top.children[0] = std::move(root);\n+\t\tfor (idx_t i = 0; i < op.children.size(); i++) {\n+\t\t\tD_ASSERT(op.children[i]);\n+\t\t\tVisitOperator(*op.children[i]);\n \t\t}\n \t}\n+}\n \n-\tunique_ptr<Expression> VisitReplace(BoundSubqueryExpression &expr, unique_ptr<Expression> *expr_ptr) override {\n-\t\treturn binder.PlanSubquery(expr, root);\n-\t}\n-\n-private:\n-\tunique_ptr<LogicalOperator> root;\n-\tBinder &binder;\n-};\n+unique_ptr<Expression> RecursiveDependentJoinPlanner::VisitReplace(BoundSubqueryExpression &expr,\n+                                                                   unique_ptr<Expression> *expr_ptr) {\n+\treturn binder.PlanSubquery(expr, root);\n+}\n \n unique_ptr<Expression> Binder::PlanSubquery(BoundSubqueryExpression &expr, unique_ptr<LogicalOperator> &root) {\n \tD_ASSERT(root);\n \t// first we translate the QueryNode of the subquery into a logical plan\n \t// note that we do not plan nested subqueries yet\n \tauto sub_binder = Binder::CreateBinder(context, this);\n-\tsub_binder->plan_subquery = false;\n+\tsub_binder->is_outside_flattened = false;\n \tauto subquery_root = sub_binder->CreatePlan(*expr.subquery);\n \tD_ASSERT(subquery_root);\n \n \t// now we actually flatten the subquery\n \tauto plan = std::move(subquery_root);\n+\n \tunique_ptr<Expression> result_expression;\n \tif (!expr.IsCorrelated()) {\n \t\tresult_expression = PlanUncorrelatedSubquery(*this, expr, root, std::move(plan));\n@@ -371,8 +375,8 @@ unique_ptr<Expression> Binder::PlanSubquery(BoundSubqueryExpression &expr, uniqu\n \t\tresult_expression = PlanCorrelatedSubquery(*this, expr, root, std::move(plan));\n \t}\n \t// finally, we recursively plan the nested subqueries (if there are any)\n-\tif (sub_binder->has_unplanned_subqueries) {\n-\t\tRecursiveSubqueryPlanner plan(*this);\n+\tif (sub_binder->has_unplanned_dependent_joins) {\n+\t\tRecursiveDependentJoinPlanner plan(*this);\n \t\tplan.VisitOperator(*root);\n \t}\n \treturn result_expression;\n@@ -383,7 +387,6 @@ void Binder::PlanSubqueries(unique_ptr<Expression> &expr_ptr, unique_ptr<Logical\n \t\treturn;\n \t}\n \tauto &expr = *expr_ptr;\n-\n \t// first visit the children of the node, if any\n \tExpressionIterator::EnumerateChildren(expr, [&](unique_ptr<Expression> &expr) { PlanSubqueries(expr, root); });\n \n@@ -391,11 +394,11 @@ void Binder::PlanSubqueries(unique_ptr<Expression> &expr_ptr, unique_ptr<Logical\n \tif (expr.expression_class == ExpressionClass::BOUND_SUBQUERY) {\n \t\tauto &subquery = expr.Cast<BoundSubqueryExpression>();\n \t\t// subquery node! plan it\n-\t\tif (subquery.IsCorrelated() && !plan_subquery) {\n+\t\tif (subquery.IsCorrelated() && !is_outside_flattened) {\n \t\t\t// detected a nested correlated subquery\n \t\t\t// we don't plan it yet here, we are currently planning a subquery\n \t\t\t// nested subqueries will only be planned AFTER the current subquery has been flattened entirely\n-\t\t\thas_unplanned_subqueries = true;\n+\t\t\thas_unplanned_dependent_joins = true;\n \t\t\treturn;\n \t\t}\n \t\texpr_ptr = PlanSubquery(subquery, root);\n@@ -411,7 +414,7 @@ unique_ptr<LogicalOperator> Binder::PlanLateralJoin(unique_ptr<LogicalOperator>\n \tvector<unique_ptr<Expression>> arbitrary_expressions;\n \tif (condition) {\n \t\t// extract join conditions, if there are any\n-\t\tLogicalComparisonJoin::ExtractJoinConditions(join_type, left, right, std::move(condition), conditions,\n+\t\tLogicalComparisonJoin::ExtractJoinConditions(context, join_type, left, right, std::move(condition), conditions,\n \t\t                                             arbitrary_expressions);\n \t}\n \ndiff --git a/src/planner/binder/tableref/bind_basetableref.cpp b/src/planner/binder/tableref/bind_basetableref.cpp\nindex 9d010215b60e..095f67e8ba5c 100644\n--- a/src/planner/binder/tableref/bind_basetableref.cpp\n+++ b/src/planner/binder/tableref/bind_basetableref.cpp\n@@ -45,9 +45,18 @@ unique_ptr<BoundTableRef> Binder::Bind(BaseTableRef &ref) {\n \t\t\treturn Bind(subquery, found_cte);\n \t\t} else {\n \t\t\t// There is a CTE binding in the BindContext.\n-\t\t\t// This can only be the case if there is a recursive CTE present.\n+\t\t\t// This can only be the case if there is a recursive CTE,\n+\t\t\t// or a materialized CTE present.\n \t\t\tauto index = GenerateTableIndex();\n-\t\t\tauto result = make_uniq<BoundCTERef>(index, ctebinding->index);\n+\t\t\tauto materialized = cte.materialized;\n+\t\t\tif (materialized == CTEMaterialize::CTE_MATERIALIZE_DEFAULT) {\n+#ifdef DUCKDB_ALTERNATIVE_VERIFY\n+\t\t\t\tmaterialized = CTEMaterialize::CTE_MATERIALIZE_ALWAYS;\n+#else\n+\t\t\t\tmaterialized = CTEMaterialize::CTE_MATERIALIZE_NEVER;\n+#endif\n+\t\t\t}\n+\t\t\tauto result = make_uniq<BoundCTERef>(index, ctebinding->index, materialized);\n \t\t\tauto b = ctebinding;\n \t\t\tauto alias = ref.alias.empty() ? ref.table_name : ref.alias;\n \t\t\tauto names = BindContext::AliasColumnNames(alias, b->names, ref.column_name_alias);\ndiff --git a/src/planner/binder/tableref/bind_joinref.cpp b/src/planner/binder/tableref/bind_joinref.cpp\nindex 7014c125cfbe..a8a0c9ede9c2 100644\n--- a/src/planner/binder/tableref/bind_joinref.cpp\n+++ b/src/planner/binder/tableref/bind_joinref.cpp\n@@ -130,9 +130,19 @@ unique_ptr<BoundTableRef> Binder::Bind(JoinRef &ref) {\n \t{\n \t\tLateralBinder binder(left_binder, context);\n \t\tresult->right = right_binder.Bind(*ref.right);\n-\t\tresult->correlated_columns = binder.ExtractCorrelatedColumns(right_binder);\n-\n-\t\tresult->lateral = binder.HasCorrelatedColumns();\n+\t\tbool is_lateral = false;\n+\t\t// Store the correlated columns in the right binder in bound ref for planning of LATERALs\n+\t\t// Ignore the correlated columns in the left binder, flattening handles those correlations\n+\t\tresult->correlated_columns = right_binder.correlated_columns;\n+\t\t// Find correlations for the current join\n+\t\tfor (auto &cor_col : result->correlated_columns) {\n+\t\t\tif (cor_col.depth == 1) {\n+\t\t\t\t// Depth 1 indicates columns binding from the left indicating a lateral join\n+\t\t\t\tis_lateral = true;\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t}\n+\t\tresult->lateral = is_lateral;\n \t\tif (result->lateral) {\n \t\t\t// lateral join: can only be an INNER or LEFT join\n \t\t\tif (ref.type != JoinType::INNER && ref.type != JoinType::LEFT) {\n@@ -210,6 +220,7 @@ unique_ptr<BoundTableRef> Binder::Bind(JoinRef &ref) {\n \n \tcase JoinRefType::CROSS:\n \tcase JoinRefType::POSITIONAL:\n+\tcase JoinRefType::DEPENDENT:\n \t\tbreak;\n \t}\n \textra_using_columns = RemoveDuplicateUsingColumns(extra_using_columns);\n@@ -268,8 +279,24 @@ unique_ptr<BoundTableRef> Binder::Bind(JoinRef &ref) {\n \n \tbind_context.AddContext(std::move(left_binder.bind_context));\n \tbind_context.AddContext(std::move(right_binder.bind_context));\n-\tMoveCorrelatedExpressions(left_binder);\n-\tMoveCorrelatedExpressions(right_binder);\n+\n+\t// Update the correlated columns for the parent binder\n+\t// For the left binder, depth >= 1 indicates correlations from the parent binder\n+\tfor (const auto &col : left_binder.correlated_columns) {\n+\t\tif (col.depth >= 1) {\n+\t\t\tAddCorrelatedColumn(col);\n+\t\t}\n+\t}\n+\t// For the right binder, depth > 1 indicates correlations from the parent binder\n+\t// (depth = 1 indicates correlations from the left side of the join)\n+\tfor (auto col : right_binder.correlated_columns) {\n+\t\tif (col.depth > 1) {\n+\t\t\t// Decrement the depth to account for the effect of the lateral binder\n+\t\t\tcol.depth--;\n+\t\t\tAddCorrelatedColumn(col);\n+\t\t}\n+\t}\n+\n \tfor (auto &condition : extra_conditions) {\n \t\tif (ref.condition) {\n \t\t\tref.condition = make_uniq<ConjunctionExpression>(ExpressionType::CONJUNCTION_AND, std::move(ref.condition),\ndiff --git a/src/planner/binder/tableref/bind_pivot.cpp b/src/planner/binder/tableref/bind_pivot.cpp\nindex c8d22d267175..ed474f243683 100644\n--- a/src/planner/binder/tableref/bind_pivot.cpp\n+++ b/src/planner/binder/tableref/bind_pivot.cpp\n@@ -18,6 +18,7 @@\n #include \"duckdb/planner/tableref/bound_pivotref.hpp\"\n #include \"duckdb/planner/expression/bound_aggregate_expression.hpp\"\n #include \"duckdb/main/client_config.hpp\"\n+#include \"duckdb/catalog/catalog_entry/aggregate_function_catalog_entry.hpp\"\n \n namespace duckdb {\n \n@@ -66,18 +67,10 @@ static void ExtractPivotExpressions(ParsedExpression &expr, case_insensitive_set\n \t    expr, [&](ParsedExpression &child) { ExtractPivotExpressions(child, handled_columns); });\n }\n \n-struct PivotBindState {\n-\tvector<string> internal_group_names;\n-\tvector<string> group_names;\n-\tvector<string> aggregate_names;\n-\tvector<string> internal_aggregate_names;\n-};\n-\n-static unique_ptr<SelectNode> PivotInitialAggregate(PivotBindState &bind_state, PivotRef &ref,\n-                                                    vector<unique_ptr<ParsedExpression>> all_columns,\n-                                                    const case_insensitive_set_t &handled_columns) {\n-\tauto subquery_stage1 = make_uniq<SelectNode>();\n-\tsubquery_stage1->from_table = std::move(ref.source);\n+static unique_ptr<SelectNode> ConstructInitialGrouping(PivotRef &ref, vector<unique_ptr<ParsedExpression>> all_columns,\n+                                                       const case_insensitive_set_t &handled_columns) {\n+\tauto subquery = make_uniq<SelectNode>();\n+\tsubquery->from_table = std::move(ref.source);\n \tif (ref.groups.empty()) {\n \t\t// if rows are not specified any columns that are not pivoted/aggregated on are added to the GROUP BY clause\n \t\tfor (auto &entry : all_columns) {\n@@ -87,19 +80,74 @@ static unique_ptr<SelectNode> PivotInitialAggregate(PivotBindState &bind_state,\n \t\t\tauto &columnref = entry->Cast<ColumnRefExpression>();\n \t\t\tif (handled_columns.find(columnref.GetColumnName()) == handled_columns.end()) {\n \t\t\t\t// not handled - add to grouping set\n-\t\t\t\tsubquery_stage1->groups.group_expressions.push_back(\n-\t\t\t\t    make_uniq<ConstantExpression>(Value::INTEGER(subquery_stage1->select_list.size() + 1)));\n-\t\t\t\tsubquery_stage1->select_list.push_back(make_uniq<ColumnRefExpression>(columnref.GetColumnName()));\n+\t\t\t\tsubquery->groups.group_expressions.push_back(\n+\t\t\t\t    make_uniq<ConstantExpression>(Value::INTEGER(subquery->select_list.size() + 1)));\n+\t\t\t\tsubquery->select_list.push_back(make_uniq<ColumnRefExpression>(columnref.GetColumnName()));\n \t\t\t}\n \t\t}\n \t} else {\n \t\t// if rows are specified only the columns mentioned in rows are added as groups\n \t\tfor (auto &row : ref.groups) {\n-\t\t\tsubquery_stage1->groups.group_expressions.push_back(\n-\t\t\t    make_uniq<ConstantExpression>(Value::INTEGER(subquery_stage1->select_list.size() + 1)));\n-\t\t\tsubquery_stage1->select_list.push_back(make_uniq<ColumnRefExpression>(row));\n+\t\t\tsubquery->groups.group_expressions.push_back(\n+\t\t\t    make_uniq<ConstantExpression>(Value::INTEGER(subquery->select_list.size() + 1)));\n+\t\t\tsubquery->select_list.push_back(make_uniq<ColumnRefExpression>(row));\n \t\t}\n \t}\n+\treturn subquery;\n+}\n+\n+static unique_ptr<SelectNode> PivotFilteredAggregate(PivotRef &ref, vector<unique_ptr<ParsedExpression>> all_columns,\n+                                                     const case_insensitive_set_t &handled_columns,\n+                                                     vector<PivotValueElement> pivot_values) {\n+\tauto subquery = ConstructInitialGrouping(ref, std::move(all_columns), handled_columns);\n+\n+\t// push the filtered aggregates\n+\tfor (auto &pivot_value : pivot_values) {\n+\t\tunique_ptr<ParsedExpression> filter;\n+\t\tidx_t pivot_value_idx = 0;\n+\t\tfor (auto &pivot_column : ref.pivots) {\n+\t\t\tfor (auto &pivot_expr : pivot_column.pivot_expressions) {\n+\t\t\t\tauto column_ref = make_uniq<CastExpression>(LogicalType::VARCHAR, pivot_expr->Copy());\n+\t\t\t\tauto constant_value = make_uniq<ConstantExpression>(pivot_value.values[pivot_value_idx++]);\n+\t\t\t\tauto comp_expr = make_uniq<ComparisonExpression>(ExpressionType::COMPARE_NOT_DISTINCT_FROM,\n+\t\t\t\t                                                 std::move(column_ref), std::move(constant_value));\n+\t\t\t\tif (filter) {\n+\t\t\t\t\tfilter = make_uniq<ConjunctionExpression>(ExpressionType::CONJUNCTION_AND, std::move(filter),\n+\t\t\t\t\t                                          std::move(comp_expr));\n+\t\t\t\t} else {\n+\t\t\t\t\tfilter = std::move(comp_expr);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\tfor (auto &aggregate : ref.aggregates) {\n+\t\t\tauto copied_aggr = aggregate->Copy();\n+\t\t\tauto &aggr = copied_aggr->Cast<FunctionExpression>();\n+\t\t\taggr.filter = filter->Copy();\n+\t\t\tauto &aggr_name = aggregate->alias;\n+\t\t\tauto name = pivot_value.name;\n+\t\t\tif (ref.aggregates.size() > 1 || !aggr_name.empty()) {\n+\t\t\t\t// if there are multiple aggregates specified we add the name of the aggregate as well\n+\t\t\t\tname += \"_\" + (aggr_name.empty() ? aggregate->GetName() : aggr_name);\n+\t\t\t}\n+\t\t\taggr.alias = name;\n+\t\t\tsubquery->select_list.push_back(std::move(copied_aggr));\n+\t\t}\n+\t}\n+\treturn subquery;\n+}\n+\n+struct PivotBindState {\n+\tvector<string> internal_group_names;\n+\tvector<string> group_names;\n+\tvector<string> aggregate_names;\n+\tvector<string> internal_aggregate_names;\n+};\n+\n+static unique_ptr<SelectNode> PivotInitialAggregate(PivotBindState &bind_state, PivotRef &ref,\n+                                                    vector<unique_ptr<ParsedExpression>> all_columns,\n+                                                    const case_insensitive_set_t &handled_columns) {\n+\tauto subquery_stage1 = ConstructInitialGrouping(ref, std::move(all_columns), handled_columns);\n+\n \tidx_t group_count = 0;\n \tfor (auto &expr : subquery_stage1->select_list) {\n \t\tbind_state.group_names.push_back(expr->GetName());\n@@ -134,6 +182,15 @@ static unique_ptr<SelectNode> PivotInitialAggregate(PivotBindState &bind_state,\n \treturn subquery_stage1;\n }\n \n+unique_ptr<ParsedExpression> ConstructPivotExpression(unique_ptr<ParsedExpression> pivot_expr) {\n+\tauto cast = make_uniq<CastExpression>(LogicalType::VARCHAR, std::move(pivot_expr));\n+\tvector<unique_ptr<ParsedExpression>> coalesce_children;\n+\tcoalesce_children.push_back(std::move(cast));\n+\tcoalesce_children.push_back(make_uniq<ConstantExpression>(Value(\"NULL\")));\n+\tauto coalesce = make_uniq<OperatorExpression>(ExpressionType::OPERATOR_COALESCE, std::move(coalesce_children));\n+\treturn std::move(coalesce);\n+}\n+\n static unique_ptr<SelectNode> PivotListAggregate(PivotBindState &bind_state, PivotRef &ref,\n                                                  unique_ptr<SelectNode> subquery_stage1) {\n \tauto subquery_stage2 = make_uniq<SelectNode>();\n@@ -166,13 +223,7 @@ static unique_ptr<SelectNode> PivotListAggregate(PivotBindState &bind_state, Piv\n \tfor (auto &pivot : ref.pivots) {\n \t\tfor (auto &pivot_expr : pivot.pivot_expressions) {\n \t\t\t// coalesce(pivot::VARCHAR, 'NULL')\n-\t\t\tauto cast = make_uniq<CastExpression>(LogicalType::VARCHAR, std::move(pivot_expr));\n-\t\t\tvector<unique_ptr<ParsedExpression>> coalesce_children;\n-\t\t\tcoalesce_children.push_back(std::move(cast));\n-\t\t\tcoalesce_children.push_back(make_uniq<ConstantExpression>(Value(\"NULL\")));\n-\t\t\tauto coalesce =\n-\t\t\t    make_uniq<OperatorExpression>(ExpressionType::OPERATOR_COALESCE, std::move(coalesce_children));\n-\n+\t\t\tauto coalesce = ConstructPivotExpression(std::move(pivot_expr));\n \t\t\tif (!expr) {\n \t\t\t\texpr = std::move(coalesce);\n \t\t\t} else {\n@@ -250,9 +301,8 @@ unique_ptr<BoundTableRef> Binder::BindBoundPivot(PivotRef &ref) {\n \tauto &aggregates = result->bound_pivot.aggregates;\n \tExtractPivotAggregates(*result->child, aggregates);\n \tif (aggregates.size() != ref.bound_aggregate_names.size()) {\n-\t\tthrow BinderException(\"Pivot aggregate count mismatch. Expected %llu aggregates but found %llu. Are all pivot \"\n-\t\t                      \"expressions aggregate functions?\",\n-\t\t                      ref.bound_aggregate_names.size(), aggregates.size());\n+\t\tthrow InternalException(\"Pivot aggregate count mismatch (expected %llu, found %llu)\",\n+\t\t                        ref.bound_aggregate_names.size(), aggregates.size());\n \t}\n \n \tvector<string> child_names;\n@@ -313,6 +363,10 @@ unique_ptr<SelectNode> Binder::BindPivot(PivotRef &ref, vector<unique_ptr<Parsed\n \t\tif (aggr->IsWindow()) {\n \t\t\tthrow BinderException(FormatError(*aggr, \"Pivot expression cannot contain window functions\"));\n \t\t}\n+\t\t// bind the function as an aggregate to ensure it is an aggregate and not a scalar function\n+\t\tauto &aggr_function = aggr->Cast<FunctionExpression>();\n+\t\t(void)Catalog::GetEntry<AggregateFunctionCatalogEntry>(context, aggr_function.catalog, aggr_function.schema,\n+\t\t                                                       aggr_function.function_name);\n \t\tExtractPivotExpressions(*aggr, handled_columns);\n \t}\n \n@@ -361,40 +415,53 @@ unique_ptr<SelectNode> Binder::BindPivot(PivotRef &ref, vector<unique_ptr<Parsed\n \t\t\tpivots.insert(val);\n \t\t}\n \t}\n-\tauto pivot_limit = ClientConfig::GetConfig(context).pivot_limit;\n+\tauto &client_config = ClientConfig::GetConfig(context);\n+\tauto pivot_limit = client_config.pivot_limit;\n \tif (total_pivots >= pivot_limit) {\n \t\tthrow BinderException(\"Pivot column limit of %llu exceeded. Use SET pivot_limit=X to increase the limit.\",\n-\t\t                      ClientConfig::GetConfig(context).pivot_limit);\n+\t\t                      client_config.pivot_limit);\n \t}\n \n \t// construct the required pivot values recursively\n \tvector<PivotValueElement> pivot_values;\n \tConstructPivots(ref, pivot_values);\n \n+\tunique_ptr<SelectNode> pivot_node;\n \t// pivots have three components\n \t// - the pivots (i.e. future column names)\n \t// - the groups (i.e. the future row names\n \t// - the aggregates (i.e. the values of the pivot columns)\n \n-\t// executing a pivot statement happens in three stages\n-\t// 1) execute the query \"SELECT {groups}, {pivots}, {aggregates} FROM {from_clause} GROUP BY {groups}, {pivots}\n-\t// this computes all values that are required in the final result, but not yet in the correct orientation\n-\t// 2) execute the query \"SELECT {groups}, LIST({pivots}), LIST({aggregates}) FROM [Q1] GROUP BY {groups}\n-\t// this pushes all pivots and aggregates that belong to a specific group together in an aligned manner\n-\t// 3) push a PIVOT operator, that performs the actual pivoting of the values into the different columns\n-\n-\tPivotBindState bind_state;\n-\t// Pivot Stage 1\n-\t// SELECT {groups}, {pivots}, {aggregates} FROM {from_clause} GROUP BY {groups}, {pivots}\n-\tauto subquery_stage1 = PivotInitialAggregate(bind_state, ref, std::move(all_columns), handled_columns);\n-\n-\t// Pivot stage 2\n-\t// SELECT {groups}, LIST({pivots}), LIST({aggregates}) FROM [Q1] GROUP BY {groups}\n-\tauto subquery_stage2 = PivotListAggregate(bind_state, ref, std::move(subquery_stage1));\n-\n-\t// Pivot stage 3\n-\t// construct the final pivot operator\n-\tauto pivot_node = PivotFinalOperator(bind_state, ref, std::move(subquery_stage2), std::move(pivot_values));\n+\t// we have two ways of executing a pivot statement\n+\t// (1) the straightforward manner of filtered aggregates SUM(..) FILTER (pivot_value=X)\n+\t// (2) computing the aggregates once, then using LIST to group the aggregates together with the PIVOT operator\n+\t// -> filtered aggregates are faster when there are FEW pivot values\n+\t// -> LIST is faster when there are MANY pivot values\n+\t// we switch dynamically based on the number of pivots to compute\n+\tif (pivot_values.size() <= client_config.pivot_filter_threshold) {\n+\t\t// use a set of filtered aggregates\n+\t\tpivot_node = PivotFilteredAggregate(ref, std::move(all_columns), handled_columns, std::move(pivot_values));\n+\t} else {\n+\t\t// executing a pivot statement happens in three stages\n+\t\t// 1) execute the query \"SELECT {groups}, {pivots}, {aggregates} FROM {from_clause} GROUP BY {groups}, {pivots}\n+\t\t// this computes all values that are required in the final result, but not yet in the correct orientation\n+\t\t// 2) execute the query \"SELECT {groups}, LIST({pivots}), LIST({aggregates}) FROM [Q1] GROUP BY {groups}\n+\t\t// this pushes all pivots and aggregates that belong to a specific group together in an aligned manner\n+\t\t// 3) push a PIVOT operator, that performs the actual pivoting of the values into the different columns\n+\n+\t\tPivotBindState bind_state;\n+\t\t// Pivot Stage 1\n+\t\t// SELECT {groups}, {pivots}, {aggregates} FROM {from_clause} GROUP BY {groups}, {pivots}\n+\t\tauto subquery_stage1 = PivotInitialAggregate(bind_state, ref, std::move(all_columns), handled_columns);\n+\n+\t\t// Pivot stage 2\n+\t\t// SELECT {groups}, LIST({pivots}), LIST({aggregates}) FROM [Q1] GROUP BY {groups}\n+\t\tauto subquery_stage2 = PivotListAggregate(bind_state, ref, std::move(subquery_stage1));\n+\n+\t\t// Pivot stage 3\n+\t\t// construct the final pivot operator\n+\t\tpivot_node = PivotFinalOperator(bind_state, ref, std::move(subquery_stage2), std::move(pivot_values));\n+\t}\n \treturn pivot_node;\n }\n \ndiff --git a/src/planner/binder/tableref/plan_cteref.cpp b/src/planner/binder/tableref/plan_cteref.cpp\nindex d3363c03dbc2..6f5ba9013c1d 100644\n--- a/src/planner/binder/tableref/plan_cteref.cpp\n+++ b/src/planner/binder/tableref/plan_cteref.cpp\n@@ -13,7 +13,7 @@ unique_ptr<LogicalOperator> Binder::CreatePlan(BoundCTERef &ref) {\n \t\ttypes.push_back(type);\n \t}\n \n-\treturn make_uniq<LogicalCTERef>(index, ref.cte_index, types, ref.bound_columns);\n+\treturn make_uniq<LogicalCTERef>(index, ref.cte_index, types, ref.bound_columns, ref.materialized_cte);\n }\n \n } // namespace duckdb\ndiff --git a/src/planner/binder/tableref/plan_joinref.cpp b/src/planner/binder/tableref/plan_joinref.cpp\nindex d985236efda5..0e3d05d93848 100644\n--- a/src/planner/binder/tableref/plan_joinref.cpp\n+++ b/src/planner/binder/tableref/plan_joinref.cpp\n@@ -10,11 +10,14 @@\n #include \"duckdb/planner/operator/logical_asof_join.hpp\"\n #include \"duckdb/planner/operator/logical_comparison_join.hpp\"\n #include \"duckdb/planner/operator/logical_cross_product.hpp\"\n+#include \"duckdb/planner/operator/logical_dependent_join.hpp\"\n #include \"duckdb/planner/operator/logical_filter.hpp\"\n #include \"duckdb/planner/operator/logical_positional_join.hpp\"\n #include \"duckdb/planner/tableref/bound_joinref.hpp\"\n #include \"duckdb/main/client_context.hpp\"\n #include \"duckdb/planner/expression_binder/lateral_binder.hpp\"\n+#include \"duckdb/planner/subquery/recursive_dependent_join_planner.hpp\"\n+#include \"duckdb/execution/expression_executor.hpp\"\n \n namespace duckdb {\n \n@@ -44,13 +47,11 @@ static bool CreateJoinCondition(Expression &expr, const unordered_set<idx_t> &le\n \treturn false;\n }\n \n-void LogicalComparisonJoin::ExtractJoinConditions(JoinType type, unique_ptr<LogicalOperator> &left_child,\n-                                                  unique_ptr<LogicalOperator> &right_child,\n-                                                  const unordered_set<idx_t> &left_bindings,\n-                                                  const unordered_set<idx_t> &right_bindings,\n-                                                  vector<unique_ptr<Expression>> &expressions,\n-                                                  vector<JoinCondition> &conditions,\n-                                                  vector<unique_ptr<Expression>> &arbitrary_expressions) {\n+void LogicalComparisonJoin::ExtractJoinConditions(\n+    ClientContext &context, JoinType type, unique_ptr<LogicalOperator> &left_child,\n+    unique_ptr<LogicalOperator> &right_child, const unordered_set<idx_t> &left_bindings,\n+    const unordered_set<idx_t> &right_bindings, vector<unique_ptr<Expression>> &expressions,\n+    vector<JoinCondition> &conditions, vector<unique_ptr<Expression>> &arbitrary_expressions) {\n \tfor (auto &expr : expressions) {\n \t\tauto total_side = JoinSide::GetJoinSide(*expr, left_bindings, right_bindings);\n \t\tif (total_side != JoinSide::BOTH) {\n@@ -68,6 +69,15 @@ void LogicalComparisonJoin::ExtractJoinConditions(JoinType type, unique_ptr<Logi\n \t\t\t\tfilter.expressions.push_back(std::move(expr));\n \t\t\t\tcontinue;\n \t\t\t}\n+\t\t\t// if the join is a LEFT JOIN and the join expression constantly evaluates to TRUE,\n+\t\t\t// then we do not add it to the arbitrary expressions\n+\t\t\tif (type == JoinType::LEFT && expr->IsFoldable()) {\n+\t\t\t\tValue result;\n+\t\t\t\tExpressionExecutor::TryEvaluateScalar(context, *expr, result);\n+\t\t\t\tif (!result.IsNull() && result == Value(true)) {\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n+\t\t\t}\n \t\t} else if ((expr->type >= ExpressionType::COMPARE_EQUAL &&\n \t\t            expr->type <= ExpressionType::COMPARE_GREATERTHANOREQUALTO) ||\n \t\t           expr->type == ExpressionType::COMPARE_DISTINCT_FROM ||\n@@ -82,7 +92,8 @@ void LogicalComparisonJoin::ExtractJoinConditions(JoinType type, unique_ptr<Logi\n \t}\n }\n \n-void LogicalComparisonJoin::ExtractJoinConditions(JoinType type, unique_ptr<LogicalOperator> &left_child,\n+void LogicalComparisonJoin::ExtractJoinConditions(ClientContext &context, JoinType type,\n+                                                  unique_ptr<LogicalOperator> &left_child,\n                                                   unique_ptr<LogicalOperator> &right_child,\n                                                   vector<unique_ptr<Expression>> &expressions,\n                                                   vector<JoinCondition> &conditions,\n@@ -90,11 +101,12 @@ void LogicalComparisonJoin::ExtractJoinConditions(JoinType type, unique_ptr<Logi\n \tunordered_set<idx_t> left_bindings, right_bindings;\n \tLogicalJoin::GetTableReferences(*left_child, left_bindings);\n \tLogicalJoin::GetTableReferences(*right_child, right_bindings);\n-\treturn ExtractJoinConditions(type, left_child, right_child, left_bindings, right_bindings, expressions, conditions,\n-\t                             arbitrary_expressions);\n+\treturn ExtractJoinConditions(context, type, left_child, right_child, left_bindings, right_bindings, expressions,\n+\t                             conditions, arbitrary_expressions);\n }\n \n-void LogicalComparisonJoin::ExtractJoinConditions(JoinType type, unique_ptr<LogicalOperator> &left_child,\n+void LogicalComparisonJoin::ExtractJoinConditions(ClientContext &context, JoinType type,\n+                                                  unique_ptr<LogicalOperator> &left_child,\n                                                   unique_ptr<LogicalOperator> &right_child,\n                                                   unique_ptr<Expression> condition, vector<JoinCondition> &conditions,\n                                                   vector<unique_ptr<Expression>> &arbitrary_expressions) {\n@@ -102,10 +114,12 @@ void LogicalComparisonJoin::ExtractJoinConditions(JoinType type, unique_ptr<Logi\n \tvector<unique_ptr<Expression>> expressions;\n \texpressions.push_back(std::move(condition));\n \tLogicalFilter::SplitPredicates(expressions);\n-\treturn ExtractJoinConditions(type, left_child, right_child, expressions, conditions, arbitrary_expressions);\n+\treturn ExtractJoinConditions(context, type, left_child, right_child, expressions, conditions,\n+\t                             arbitrary_expressions);\n }\n \n-unique_ptr<LogicalOperator> LogicalComparisonJoin::CreateJoin(JoinType type, JoinRefType reftype,\n+unique_ptr<LogicalOperator> LogicalComparisonJoin::CreateJoin(ClientContext &context, JoinType type,\n+                                                              JoinRefType reftype,\n                                                               unique_ptr<LogicalOperator> left_child,\n                                                               unique_ptr<LogicalOperator> right_child,\n                                                               vector<JoinCondition> conditions,\n@@ -216,29 +230,37 @@ static bool HasCorrelatedColumns(Expression &expression) {\n \treturn has_correlated_columns;\n }\n \n-unique_ptr<LogicalOperator> LogicalComparisonJoin::CreateJoin(JoinType type, JoinRefType reftype,\n+unique_ptr<LogicalOperator> LogicalComparisonJoin::CreateJoin(ClientContext &context, JoinType type,\n+                                                              JoinRefType reftype,\n                                                               unique_ptr<LogicalOperator> left_child,\n                                                               unique_ptr<LogicalOperator> right_child,\n                                                               unique_ptr<Expression> condition) {\n \tvector<JoinCondition> conditions;\n \tvector<unique_ptr<Expression>> arbitrary_expressions;\n-\tLogicalComparisonJoin::ExtractJoinConditions(type, left_child, right_child, std::move(condition), conditions,\n-\t                                             arbitrary_expressions);\n-\treturn LogicalComparisonJoin::CreateJoin(type, reftype, std::move(left_child), std::move(right_child),\n+\tLogicalComparisonJoin::ExtractJoinConditions(context, type, left_child, right_child, std::move(condition),\n+\t                                             conditions, arbitrary_expressions);\n+\treturn LogicalComparisonJoin::CreateJoin(context, type, reftype, std::move(left_child), std::move(right_child),\n \t                                         std::move(conditions), std::move(arbitrary_expressions));\n }\n \n unique_ptr<LogicalOperator> Binder::CreatePlan(BoundJoinRef &ref) {\n+\tauto old_is_outside_flattened = is_outside_flattened;\n+\t// Plan laterals from outermost to innermost\n+\tif (ref.lateral) {\n+\t\t// Set the flag to ensure that children do not flatten before the root\n+\t\tis_outside_flattened = false;\n+\t}\n \tauto left = CreatePlan(*ref.left);\n \tauto right = CreatePlan(*ref.right);\n+\tis_outside_flattened = old_is_outside_flattened;\n+\n+\t// For joins, depth of the bindings will be one higher on the right because of the lateral binder\n+\t// If the current join does not have correlations between left and right, then the right bindings\n+\t// have depth 1 too high and can be reduced by 1 throughout\n \tif (!ref.lateral && !ref.correlated_columns.empty()) {\n-\t\t// non-lateral join with correlated columns\n-\t\t// this happens if there is a join (or cross product) in a correlated subquery\n-\t\t// due to the lateral binder the expression depth of all correlated columns in the \"ref.correlated_columns\" set\n-\t\t// is 1 too high\n-\t\t// we reduce expression depth of all columns in the \"ref.correlated_columns\" set by 1\n \t\tLateralBinder::ReduceExpressionDepth(*right, ref.correlated_columns);\n \t}\n+\n \tif (ref.type == JoinType::RIGHT && ref.ref_type != JoinRefType::ASOF &&\n \t    ClientConfig::GetConfig(context).enable_optimizer) {\n \t\t// we turn any right outer joins into left outer joins for optimization purposes\n@@ -247,9 +269,22 @@ unique_ptr<LogicalOperator> Binder::CreatePlan(BoundJoinRef &ref) {\n \t\tstd::swap(left, right);\n \t}\n \tif (ref.lateral) {\n-\t\t// lateral join\n-\t\treturn PlanLateralJoin(std::move(left), std::move(right), ref.correlated_columns, ref.type,\n-\t\t                       std::move(ref.condition));\n+\t\tif (!is_outside_flattened) {\n+\t\t\t// If outer dependent joins is yet to be flattened, only plan the lateral\n+\t\t\thas_unplanned_dependent_joins = true;\n+\t\t\treturn LogicalDependentJoin::Create(std::move(left), std::move(right), ref.correlated_columns, ref.type,\n+\t\t\t                                    std::move(ref.condition));\n+\t\t} else {\n+\t\t\t// All outer dependent joins have been planned and flattened, so plan and flatten lateral and recursively\n+\t\t\t// plan the children\n+\t\t\tauto new_plan = PlanLateralJoin(std::move(left), std::move(right), ref.correlated_columns, ref.type,\n+\t\t\t                                std::move(ref.condition));\n+\t\t\tif (has_unplanned_dependent_joins) {\n+\t\t\t\tRecursiveDependentJoinPlanner plan(*this);\n+\t\t\t\tplan.VisitOperator(*new_plan);\n+\t\t\t}\n+\t\t\treturn new_plan;\n+\t\t}\n \t}\n \tswitch (ref.ref_type) {\n \tcase JoinRefType::CROSS:\n@@ -275,7 +310,7 @@ unique_ptr<LogicalOperator> Binder::CreatePlan(BoundJoinRef &ref) {\n \t}\n \n \t// now create the join operator from the join condition\n-\tauto result = LogicalComparisonJoin::CreateJoin(ref.type, ref.ref_type, std::move(left), std::move(right),\n+\tauto result = LogicalComparisonJoin::CreateJoin(context, ref.type, ref.ref_type, std::move(left), std::move(right),\n \t                                                std::move(ref.condition));\n \n \toptional_ptr<LogicalOperator> join;\ndiff --git a/src/planner/binder/tableref/plan_subqueryref.cpp b/src/planner/binder/tableref/plan_subqueryref.cpp\nindex 801776e2a322..821654460ab5 100644\n--- a/src/planner/binder/tableref/plan_subqueryref.cpp\n+++ b/src/planner/binder/tableref/plan_subqueryref.cpp\n@@ -6,10 +6,10 @@ namespace duckdb {\n unique_ptr<LogicalOperator> Binder::CreatePlan(BoundSubqueryRef &ref) {\n \t// generate the logical plan for the subquery\n \t// this happens separately from the current LogicalPlan generation\n-\tref.binder->plan_subquery = plan_subquery;\n+\tref.binder->is_outside_flattened = is_outside_flattened;\n \tauto subquery = ref.binder->CreatePlan(*ref.subquery);\n-\tif (ref.binder->has_unplanned_subqueries) {\n-\t\thas_unplanned_subqueries = true;\n+\tif (ref.binder->has_unplanned_dependent_joins) {\n+\t\thas_unplanned_dependent_joins = true;\n \t}\n \treturn subquery;\n }\ndiff --git a/src/planner/expression_binder/lateral_binder.cpp b/src/planner/expression_binder/lateral_binder.cpp\nindex 4b8047e4f051..18a68ff0f4c2 100644\n--- a/src/planner/expression_binder/lateral_binder.cpp\n+++ b/src/planner/expression_binder/lateral_binder.cpp\n@@ -31,41 +31,10 @@ BindResult LateralBinder::BindColumnRef(unique_ptr<ParsedExpression> &expr_ptr,\n \tif (result.HasError()) {\n \t\treturn result;\n \t}\n-\tif (depth > 1) {\n-\t\tthrow BinderException(\"Nested lateral joins are not supported yet\");\n-\t}\n \tExtractCorrelatedColumns(*result.expression);\n \treturn result;\n }\n \n-vector<CorrelatedColumnInfo> LateralBinder::ExtractCorrelatedColumns(Binder &binder) {\n-\n-\tif (correlated_columns.empty()) {\n-\t\treturn binder.correlated_columns;\n-\t}\n-\n-\t// clear outer\n-\tcorrelated_columns.clear();\n-\tauto all_correlated_columns = binder.correlated_columns;\n-\n-\t// remove outer from inner\n-\tfor (auto &corr_column : correlated_columns) {\n-\t\tauto entry = std::find(binder.correlated_columns.begin(), binder.correlated_columns.end(), corr_column);\n-\t\tif (entry != binder.correlated_columns.end()) {\n-\t\t\tbinder.correlated_columns.erase(entry);\n-\t\t}\n-\t}\n-\n-\t// add inner to outer\n-\tfor (auto &corr_column : binder.correlated_columns) {\n-\t\tcorrelated_columns.push_back(corr_column);\n-\t}\n-\n-\t// clear inner\n-\tbinder.correlated_columns.clear();\n-\treturn all_correlated_columns;\n-}\n-\n BindResult LateralBinder::BindExpression(unique_ptr<ParsedExpression> &expr_ptr, idx_t depth, bool root_expression) {\n \tauto &expr = *expr_ptr;\n \tswitch (expr.GetExpressionClass()) {\n@@ -125,7 +94,11 @@ class ExpressionDepthReducer : public LogicalOperatorVisitor {\n \t\t\tReduceColumnRefDepth(expr.Cast<BoundColumnRefExpression>());\n \t\t}\n \t\tif (expr.GetExpressionClass() == ExpressionClass::BOUND_SUBQUERY) {\n+\t\t\tauto &subquery_ref = expr.Cast<BoundSubqueryExpression>();\n \t\t\tReduceExpressionSubquery(expr.Cast<BoundSubqueryExpression>());\n+\t\t\t// Recursively update the depth in the bindings of the children nodes\n+\t\t\tExpressionIterator::EnumerateQueryNodeChildren(\n+\t\t\t    *subquery_ref.subquery, [&](Expression &child_expr) { ReduceExpressionDepth(child_expr); });\n \t\t}\n \t}\n \ndiff --git a/src/planner/expression_iterator.cpp b/src/planner/expression_iterator.cpp\nindex fe06a3d66dc2..34e6bc10870e 100644\n--- a/src/planner/expression_iterator.cpp\n+++ b/src/planner/expression_iterator.cpp\n@@ -5,6 +5,7 @@\n #include \"duckdb/planner/query_node/bound_select_node.hpp\"\n #include \"duckdb/planner/query_node/bound_set_operation_node.hpp\"\n #include \"duckdb/planner/query_node/bound_recursive_cte_node.hpp\"\n+#include \"duckdb/planner/query_node/bound_cte_node.hpp\"\n #include \"duckdb/planner/tableref/list.hpp\"\n \n namespace duckdb {\n@@ -198,6 +199,11 @@ void ExpressionIterator::EnumerateQueryNodeChildren(BoundQueryNode &node,\n \t\tEnumerateQueryNodeChildren(*cte_node.right, callback);\n \t\tbreak;\n \t}\n+\tcase QueryNodeType::CTE_NODE: {\n+\t\tauto &cte_node = node.Cast<BoundCTENode>();\n+\t\tEnumerateQueryNodeChildren(*cte_node.child, callback);\n+\t\tbreak;\n+\t}\n \tcase QueryNodeType::SELECT_NODE: {\n \t\tauto &bound_select = node.Cast<BoundSelectNode>();\n \t\tfor (auto &expr : bound_select.select_list) {\ndiff --git a/src/planner/logical_operator.cpp b/src/planner/logical_operator.cpp\nindex d1d3462336b0..c91941de1062 100644\n--- a/src/planner/logical_operator.cpp\n+++ b/src/planner/logical_operator.cpp\n@@ -8,6 +8,7 @@\n #include \"duckdb/parser/parser.hpp\"\n #include \"duckdb/planner/operator/list.hpp\"\n #include \"duckdb/planner/operator/logical_extension_operator.hpp\"\n+#include \"duckdb/planner/operator/logical_dependent_join.hpp\"\n \n namespace duckdb {\n \n@@ -283,6 +284,9 @@ unique_ptr<LogicalOperator> LogicalOperator::Deserialize(Deserializer &deseriali\n \tcase LogicalOperatorType::LOGICAL_RECURSIVE_CTE:\n \t\tresult = LogicalRecursiveCTE::Deserialize(state, reader);\n \t\tbreak;\n+\tcase LogicalOperatorType::LOGICAL_MATERIALIZED_CTE:\n+\t\tresult = LogicalMaterializedCTE::Deserialize(state, reader);\n+\t\tbreak;\n \tcase LogicalOperatorType::LOGICAL_INSERT:\n \t\tresult = LogicalInsert::Deserialize(state, reader);\n \t\tbreak;\n@@ -352,6 +356,7 @@ unique_ptr<LogicalOperator> LogicalOperator::Deserialize(Deserializer &deseriali\n \tcase LogicalOperatorType::LOGICAL_PIVOT:\n \t\tresult = LogicalPivot::Deserialize(state, reader);\n \t\tbreak;\n+\tcase LogicalOperatorType::LOGICAL_DEPENDENT_JOIN:\n \tcase LogicalOperatorType::LOGICAL_INVALID:\n \t\t/* no default here to trigger a warning if we forget to implement deserialize for a new operator */\n \t\tthrow SerializationException(\"Invalid type for operator deserialization\");\ndiff --git a/src/planner/logical_operator_visitor.cpp b/src/planner/logical_operator_visitor.cpp\nindex c36aadec5af5..32283e7d6b46 100644\n--- a/src/planner/logical_operator_visitor.cpp\n+++ b/src/planner/logical_operator_visitor.cpp\n@@ -19,6 +19,7 @@ void LogicalOperatorVisitor::VisitOperatorChildren(LogicalOperator &op) {\n \n void LogicalOperatorVisitor::EnumerateExpressions(LogicalOperator &op,\n                                                   const std::function<void(unique_ptr<Expression> *child)> &callback) {\n+\n \tswitch (op.type) {\n \tcase LogicalOperatorType::LOGICAL_EXPRESSION_GET: {\n \t\tauto &get = op.Cast<LogicalExpressionGet>();\n@@ -67,6 +68,7 @@ void LogicalOperatorVisitor::EnumerateExpressions(LogicalOperator &op,\n \t}\n \tcase LogicalOperatorType::LOGICAL_ASOF_JOIN:\n \tcase LogicalOperatorType::LOGICAL_DELIM_JOIN:\n+\tcase LogicalOperatorType::LOGICAL_DEPENDENT_JOIN:\n \tcase LogicalOperatorType::LOGICAL_COMPARISON_JOIN: {\n \t\tif (op.type == LogicalOperatorType::LOGICAL_DELIM_JOIN) {\n \t\t\tauto &delim_join = op.Cast<LogicalDelimJoin>();\ndiff --git a/src/planner/operator/CMakeLists.txt b/src/planner/operator/CMakeLists.txt\nindex f5d18dfacfd4..1528eeed0540 100644\n--- a/src/planner/operator/CMakeLists.txt\n+++ b/src/planner/operator/CMakeLists.txt\n@@ -15,6 +15,7 @@ add_library_unity(\n   logical_delete.cpp\n   logical_delim_get.cpp\n   logical_delim_join.cpp\n+  logical_dependent_join.cpp\n   logical_distinct.cpp\n   logical_dummy_scan.cpp\n   logical_empty_result.cpp\n@@ -36,6 +37,7 @@ add_library_unity(\n   logical_prepare.cpp\n   logical_projection.cpp\n   logical_recursive_cte.cpp\n+  logical_materialized_cte.cpp\n   logical_sample.cpp\n   logical_set.cpp\n   logical_reset.cpp\ndiff --git a/src/planner/operator/logical_cteref.cpp b/src/planner/operator/logical_cteref.cpp\nindex 45dad5c30813..60ad24d40b23 100644\n--- a/src/planner/operator/logical_cteref.cpp\n+++ b/src/planner/operator/logical_cteref.cpp\n@@ -10,6 +10,7 @@ void LogicalCTERef::Serialize(FieldWriter &writer) const {\n \twriter.WriteField(cte_index);\n \twriter.WriteRegularSerializableList(chunk_types);\n \twriter.WriteList<string>(bound_columns);\n+\twriter.WriteField(materialized_cte);\n }\n \n unique_ptr<LogicalOperator> LogicalCTERef::Deserialize(LogicalDeserializationState &state, FieldReader &reader) {\n@@ -17,7 +18,8 @@ unique_ptr<LogicalOperator> LogicalCTERef::Deserialize(LogicalDeserializationSta\n \tauto cte_index = reader.ReadRequired<idx_t>();\n \tauto chunk_types = reader.ReadRequiredSerializableList<LogicalType, LogicalType>();\n \tauto bound_columns = reader.ReadRequiredList<string>();\n-\treturn make_uniq<LogicalCTERef>(table_index, cte_index, chunk_types, bound_columns);\n+\tauto materialized_cte = reader.ReadField<CTEMaterialize>(CTEMaterialize::CTE_MATERIALIZE_DEFAULT);\n+\treturn make_uniq<LogicalCTERef>(table_index, cte_index, chunk_types, bound_columns, materialized_cte);\n }\n \n vector<idx_t> LogicalCTERef::GetTableIndex() const {\ndiff --git a/src/planner/operator/logical_dependent_join.cpp b/src/planner/operator/logical_dependent_join.cpp\nnew file mode 100644\nindex 000000000000..810b54af817d\n--- /dev/null\n+++ b/src/planner/operator/logical_dependent_join.cpp\n@@ -0,0 +1,26 @@\n+#include \"duckdb/planner/operator/logical_dependent_join.hpp\"\n+\n+namespace duckdb {\n+\n+LogicalDependentJoin::LogicalDependentJoin(unique_ptr<LogicalOperator> left, unique_ptr<LogicalOperator> right,\n+                                           vector<CorrelatedColumnInfo> correlated_columns, JoinType type,\n+                                           unique_ptr<Expression> condition)\n+    : LogicalComparisonJoin(type, LogicalOperatorType::LOGICAL_DEPENDENT_JOIN), join_condition(std::move(condition)),\n+      correlated_columns(std::move(correlated_columns)) {\n+\tchildren.push_back(std::move(left));\n+\tchildren.push_back(std::move(right));\n+}\n+\n+unique_ptr<LogicalOperator> LogicalDependentJoin::Create(unique_ptr<LogicalOperator> left,\n+                                                         unique_ptr<LogicalOperator> right,\n+                                                         vector<CorrelatedColumnInfo> correlated_columns, JoinType type,\n+                                                         unique_ptr<Expression> condition) {\n+\treturn make_uniq<LogicalDependentJoin>(std::move(left), std::move(right), std::move(correlated_columns), type,\n+\t                                       std::move(condition));\n+}\n+\n+void LogicalDependentJoin::Serialize(FieldWriter &writer) const {\n+\tthrow InternalException(\"LogicalDependentJoin should not exist in any plan\");\n+}\n+\n+} // namespace duckdb\ndiff --git a/src/planner/operator/logical_materialized_cte.cpp b/src/planner/operator/logical_materialized_cte.cpp\nnew file mode 100644\nindex 000000000000..264e07f383c3\n--- /dev/null\n+++ b/src/planner/operator/logical_materialized_cte.cpp\n@@ -0,0 +1,21 @@\n+#include \"duckdb/planner/operator/logical_materialized_cte.hpp\"\n+\n+#include \"duckdb/common/field_writer.hpp\"\n+\n+namespace duckdb {\n+\n+void LogicalMaterializedCTE::Serialize(FieldWriter &writer) const {\n+\twriter.WriteField(table_index);\n+}\n+\n+unique_ptr<LogicalOperator> LogicalMaterializedCTE::Deserialize(LogicalDeserializationState &state,\n+                                                                FieldReader &reader) {\n+\tauto table_index = reader.ReadRequired<idx_t>();\n+\treturn unique_ptr<LogicalMaterializedCTE>(new LogicalMaterializedCTE(table_index));\n+}\n+\n+vector<idx_t> LogicalMaterializedCTE::GetTableIndex() const {\n+\treturn vector<idx_t> {table_index};\n+}\n+\n+} // namespace duckdb\ndiff --git a/src/planner/subquery/flatten_dependent_join.cpp b/src/planner/subquery/flatten_dependent_join.cpp\nindex 7433e960f0d0..47ec3f16d1a7 100644\n--- a/src/planner/subquery/flatten_dependent_join.cpp\n+++ b/src/planner/subquery/flatten_dependent_join.cpp\n@@ -10,6 +10,7 @@\n #include \"duckdb/planner/operator/list.hpp\"\n #include \"duckdb/planner/subquery/has_correlated_expressions.hpp\"\n #include \"duckdb/planner/subquery/rewrite_correlated_expressions.hpp\"\n+#include \"duckdb/planner/operator/logical_dependent_join.hpp\"\n \n namespace duckdb {\n \n@@ -24,20 +25,32 @@ FlattenDependentJoins::FlattenDependentJoins(Binder &binder, const vector<Correl\n \t}\n }\n \n-bool FlattenDependentJoins::DetectCorrelatedExpressions(LogicalOperator *op, bool lateral) {\n+bool FlattenDependentJoins::DetectCorrelatedExpressions(LogicalOperator *op, bool lateral, idx_t lateral_depth) {\n+\n+\tbool is_lateral_join = false;\n+\n \tD_ASSERT(op);\n \t// check if this entry has correlated expressions\n-\tHasCorrelatedExpressions visitor(correlated_columns, lateral);\n+\tif (op->type == LogicalOperatorType::LOGICAL_DEPENDENT_JOIN) {\n+\t\tis_lateral_join = true;\n+\t}\n+\tHasCorrelatedExpressions visitor(correlated_columns, lateral, lateral_depth);\n \tvisitor.VisitOperator(*op);\n \tbool has_correlation = visitor.has_correlated_expressions;\n+\tint child_idx = 0;\n \t// now visit the children of this entry and check if they have correlated expressions\n \tfor (auto &child : op->children) {\n+\t\tauto new_lateral_depth = lateral_depth;\n+\t\tif (is_lateral_join && child_idx == 1) {\n+\t\t\tnew_lateral_depth = lateral_depth + 1;\n+\t\t}\n \t\t// we OR the property with its children such that has_correlation is true if either\n \t\t// (1) this node has a correlated expression or\n \t\t// (2) one of its children has a correlated expression\n-\t\tif (DetectCorrelatedExpressions(child.get(), lateral)) {\n+\t\tif (DetectCorrelatedExpressions(child.get(), lateral, new_lateral_depth)) {\n \t\t\thas_correlation = true;\n \t\t}\n+\t\tchild_idx++;\n \t}\n \t// set the entry in the map\n \thas_correlated_expressions[op] = has_correlation;\n@@ -46,7 +59,7 @@ bool FlattenDependentJoins::DetectCorrelatedExpressions(LogicalOperator *op, boo\n \n unique_ptr<LogicalOperator> FlattenDependentJoins::PushDownDependentJoin(unique_ptr<LogicalOperator> plan) {\n \tbool propagate_null_values = true;\n-\tauto result = PushDownDependentJoinInternal(std::move(plan), propagate_null_values);\n+\tauto result = PushDownDependentJoinInternal(std::move(plan), propagate_null_values, 0);\n \tif (!replacement_map.empty()) {\n \t\t// check if we have to replace any COUNT aggregates into \"CASE WHEN X IS NULL THEN 0 ELSE COUNT END\"\n \t\tRewriteCountAggregates aggr(replacement_map);\n@@ -70,8 +83,10 @@ bool SubqueryDependentFilter(Expression *expr) {\n \t}\n \treturn false;\n }\n+\n unique_ptr<LogicalOperator> FlattenDependentJoins::PushDownDependentJoinInternal(unique_ptr<LogicalOperator> plan,\n-                                                                                 bool &parent_propagate_null_values) {\n+                                                                                 bool &parent_propagate_null_values,\n+                                                                                 idx_t lateral_depth) {\n \t// first check if the logical operator has correlated expressions\n \tauto entry = has_correlated_expressions.find(plan.get());\n \tD_ASSERT(entry != has_correlated_expressions.end());\n@@ -95,10 +110,11 @@ unique_ptr<LogicalOperator> FlattenDependentJoins::PushDownDependentJoinInternal\n \t\tfor (auto &expr : plan->expressions) {\n \t\t\tany_join |= SubqueryDependentFilter(expr.get());\n \t\t}\n-\t\tplan->children[0] = PushDownDependentJoinInternal(std::move(plan->children[0]), parent_propagate_null_values);\n+\t\tplan->children[0] =\n+\t\t    PushDownDependentJoinInternal(std::move(plan->children[0]), parent_propagate_null_values, lateral_depth);\n \n \t\t// then we replace any correlated expressions with the corresponding entry in the correlated_map\n-\t\tRewriteCorrelatedExpressions rewriter(base_binding, correlated_map);\n+\t\tRewriteCorrelatedExpressions rewriter(base_binding, correlated_map, lateral_depth);\n \t\trewriter.VisitOperator(*plan);\n \t\treturn plan;\n \t}\n@@ -108,10 +124,11 @@ unique_ptr<LogicalOperator> FlattenDependentJoins::PushDownDependentJoinInternal\n \t\tfor (auto &expr : plan->expressions) {\n \t\t\tparent_propagate_null_values &= expr->PropagatesNullValues();\n \t\t}\n-\t\tplan->children[0] = PushDownDependentJoinInternal(std::move(plan->children[0]), parent_propagate_null_values);\n+\t\tplan->children[0] =\n+\t\t    PushDownDependentJoinInternal(std::move(plan->children[0]), parent_propagate_null_values, lateral_depth);\n \n \t\t// then we replace any correlated expressions with the corresponding entry in the correlated_map\n-\t\tRewriteCorrelatedExpressions rewriter(base_binding, correlated_map);\n+\t\tRewriteCorrelatedExpressions rewriter(base_binding, correlated_map, lateral_depth);\n \t\trewriter.VisitOperator(*plan);\n \t\t// now we add all the columns of the delim_scan to the projection list\n \t\tauto &proj = plan->Cast<LogicalProjection>();\n@@ -134,9 +151,10 @@ unique_ptr<LogicalOperator> FlattenDependentJoins::PushDownDependentJoinInternal\n \t\tfor (auto &expr : plan->expressions) {\n \t\t\tparent_propagate_null_values &= expr->PropagatesNullValues();\n \t\t}\n-\t\tplan->children[0] = PushDownDependentJoinInternal(std::move(plan->children[0]), parent_propagate_null_values);\n+\t\tplan->children[0] =\n+\t\t    PushDownDependentJoinInternal(std::move(plan->children[0]), parent_propagate_null_values, lateral_depth);\n \t\t// then we replace any correlated expressions with the corresponding entry in the correlated_map\n-\t\tRewriteCorrelatedExpressions rewriter(base_binding, correlated_map);\n+\t\tRewriteCorrelatedExpressions rewriter(base_binding, correlated_map, lateral_depth);\n \t\trewriter.VisitOperator(*plan);\n \t\t// now we add all the columns of the delim_scan to the grouping operators AND the projection list\n \t\tidx_t delim_table_index;\n@@ -231,22 +249,24 @@ unique_ptr<LogicalOperator> FlattenDependentJoins::PushDownDependentJoinInternal\n \t\tbool right_has_correlation = has_correlated_expressions.find(plan->children[1].get())->second;\n \t\tif (!right_has_correlation) {\n \t\t\t// only left has correlation: push into left\n-\t\t\tplan->children[0] =\n-\t\t\t    PushDownDependentJoinInternal(std::move(plan->children[0]), parent_propagate_null_values);\n+\t\t\tplan->children[0] = PushDownDependentJoinInternal(std::move(plan->children[0]),\n+\t\t\t                                                  parent_propagate_null_values, lateral_depth);\n \t\t\treturn plan;\n \t\t}\n \t\tif (!left_has_correlation) {\n \t\t\t// only right has correlation: push into right\n-\t\t\tplan->children[1] =\n-\t\t\t    PushDownDependentJoinInternal(std::move(plan->children[1]), parent_propagate_null_values);\n+\t\t\tplan->children[1] = PushDownDependentJoinInternal(std::move(plan->children[1]),\n+\t\t\t                                                  parent_propagate_null_values, lateral_depth);\n \t\t\treturn plan;\n \t\t}\n \t\t// both sides have correlation\n \t\t// turn into an inner join\n \t\tauto join = make_uniq<LogicalComparisonJoin>(JoinType::INNER);\n-\t\tplan->children[0] = PushDownDependentJoinInternal(std::move(plan->children[0]), parent_propagate_null_values);\n+\t\tplan->children[0] =\n+\t\t    PushDownDependentJoinInternal(std::move(plan->children[0]), parent_propagate_null_values, lateral_depth);\n \t\tauto left_binding = this->base_binding;\n-\t\tplan->children[1] = PushDownDependentJoinInternal(std::move(plan->children[1]), parent_propagate_null_values);\n+\t\tplan->children[1] =\n+\t\t    PushDownDependentJoinInternal(std::move(plan->children[1]), parent_propagate_null_values, lateral_depth);\n \t\t// add the correlated columns to the join conditions\n \t\tfor (idx_t i = 0; i < correlated_columns.size(); i++) {\n \t\t\tJoinCondition cond;\n@@ -261,6 +281,26 @@ unique_ptr<LogicalOperator> FlattenDependentJoins::PushDownDependentJoinInternal\n \t\tjoin->children.push_back(std::move(plan->children[1]));\n \t\treturn std::move(join);\n \t}\n+\tcase LogicalOperatorType::LOGICAL_DEPENDENT_JOIN: {\n+\t\tauto &dependent_join = plan->Cast<LogicalJoin>();\n+\t\tif (!((dependent_join.join_type == JoinType::INNER) || (dependent_join.join_type == JoinType::LEFT))) {\n+\t\t\tthrow Exception(\"Dependent join can only be INNER or LEFT type\");\n+\t\t}\n+\t\tD_ASSERT(plan->children.size() == 2);\n+\t\t// Push all the bindings down to the left side so the right side knows where to refer DELIM_GET from\n+\t\tplan->children[0] =\n+\t\t    PushDownDependentJoinInternal(std::move(plan->children[0]), parent_propagate_null_values, lateral_depth);\n+\n+\t\t// Normal rewriter like in other joins\n+\t\tRewriteCorrelatedExpressions rewriter(this->base_binding, correlated_map, lateral_depth);\n+\t\trewriter.VisitOperator(*plan);\n+\n+\t\t// Recursive rewriter to visit right side of lateral join and update bindings from left\n+\t\tRewriteCorrelatedExpressions recursive_rewriter(this->base_binding, correlated_map, lateral_depth + 1, true);\n+\t\trecursive_rewriter.VisitOperator(*plan->children[1]);\n+\n+\t\treturn plan;\n+\t}\n \tcase LogicalOperatorType::LOGICAL_ANY_JOIN:\n \tcase LogicalOperatorType::LOGICAL_ASOF_JOIN:\n \tcase LogicalOperatorType::LOGICAL_COMPARISON_JOIN: {\n@@ -274,30 +314,33 @@ unique_ptr<LogicalOperator> FlattenDependentJoins::PushDownDependentJoinInternal\n \t\t\t// inner join\n \t\t\tif (!right_has_correlation) {\n \t\t\t\t// only left has correlation: push into left\n-\t\t\t\tplan->children[0] =\n-\t\t\t\t    PushDownDependentJoinInternal(std::move(plan->children[0]), parent_propagate_null_values);\n+\t\t\t\tplan->children[0] = PushDownDependentJoinInternal(std::move(plan->children[0]),\n+\t\t\t\t                                                  parent_propagate_null_values, lateral_depth);\n+\t\t\t\t// Remove the correlated columns coming from outside for current join node\n \t\t\t\treturn plan;\n \t\t\t}\n \t\t\tif (!left_has_correlation) {\n \t\t\t\t// only right has correlation: push into right\n-\t\t\t\tplan->children[1] =\n-\t\t\t\t    PushDownDependentJoinInternal(std::move(plan->children[1]), parent_propagate_null_values);\n+\t\t\t\tplan->children[1] = PushDownDependentJoinInternal(std::move(plan->children[1]),\n+\t\t\t\t                                                  parent_propagate_null_values, lateral_depth);\n+\t\t\t\t// Remove the correlated columns coming from outside for current join node\n \t\t\t\treturn plan;\n \t\t\t}\n \t\t} else if (join.join_type == JoinType::LEFT) {\n \t\t\t// left outer join\n \t\t\tif (!right_has_correlation) {\n \t\t\t\t// only left has correlation: push into left\n-\t\t\t\tplan->children[0] =\n-\t\t\t\t    PushDownDependentJoinInternal(std::move(plan->children[0]), parent_propagate_null_values);\n+\t\t\t\tplan->children[0] = PushDownDependentJoinInternal(std::move(plan->children[0]),\n+\t\t\t\t                                                  parent_propagate_null_values, lateral_depth);\n+\t\t\t\t// Remove the correlated columns coming from outside for current join node\n \t\t\t\treturn plan;\n \t\t\t}\n \t\t} else if (join.join_type == JoinType::RIGHT) {\n \t\t\t// left outer join\n \t\t\tif (!left_has_correlation) {\n \t\t\t\t// only right has correlation: push into right\n-\t\t\t\tplan->children[1] =\n-\t\t\t\t    PushDownDependentJoinInternal(std::move(plan->children[1]), parent_propagate_null_values);\n+\t\t\t\tplan->children[1] = PushDownDependentJoinInternal(std::move(plan->children[1]),\n+\t\t\t\t                                                  parent_propagate_null_values, lateral_depth);\n \t\t\t\treturn plan;\n \t\t\t}\n \t\t} else if (join.join_type == JoinType::MARK) {\n@@ -305,10 +348,10 @@ unique_ptr<LogicalOperator> FlattenDependentJoins::PushDownDependentJoinInternal\n \t\t\t\tthrow Exception(\"MARK join with correlation in RHS not supported\");\n \t\t\t}\n \t\t\t// push the child into the LHS\n-\t\t\tplan->children[0] =\n-\t\t\t    PushDownDependentJoinInternal(std::move(plan->children[0]), parent_propagate_null_values);\n+\t\t\tplan->children[0] = PushDownDependentJoinInternal(std::move(plan->children[0]),\n+\t\t\t                                                  parent_propagate_null_values, lateral_depth);\n \t\t\t// rewrite expressions in the join conditions\n-\t\t\tRewriteCorrelatedExpressions rewriter(base_binding, correlated_map);\n+\t\t\tRewriteCorrelatedExpressions rewriter(base_binding, correlated_map, lateral_depth);\n \t\t\trewriter.VisitOperator(*plan);\n \t\t\treturn plan;\n \t\t} else {\n@@ -316,9 +359,11 @@ unique_ptr<LogicalOperator> FlattenDependentJoins::PushDownDependentJoinInternal\n \t\t}\n \t\t// both sides have correlation\n \t\t// push into both sides\n-\t\tplan->children[0] = PushDownDependentJoinInternal(std::move(plan->children[0]), parent_propagate_null_values);\n+\t\tplan->children[0] =\n+\t\t    PushDownDependentJoinInternal(std::move(plan->children[0]), parent_propagate_null_values, lateral_depth);\n \t\tauto left_binding = this->base_binding;\n-\t\tplan->children[1] = PushDownDependentJoinInternal(std::move(plan->children[1]), parent_propagate_null_values);\n+\t\tplan->children[1] =\n+\t\t    PushDownDependentJoinInternal(std::move(plan->children[1]), parent_propagate_null_values, lateral_depth);\n \t\tauto right_binding = this->base_binding;\n \t\t// NOTE: for OUTER JOINS it matters what the BASE BINDING is after the join\n \t\t// for the LEFT OUTER JOIN, we want the LEFT side to be the base binding after we push\n@@ -354,7 +399,7 @@ unique_ptr<LogicalOperator> FlattenDependentJoins::PushDownDependentJoinInternal\n \t\t\t}\n \t\t}\n \t\t// then we replace any correlated expressions with the corresponding entry in the correlated_map\n-\t\tRewriteCorrelatedExpressions rewriter(right_binding, correlated_map);\n+\t\tRewriteCorrelatedExpressions rewriter(right_binding, correlated_map, lateral_depth);\n \t\trewriter.VisitOperator(*plan);\n \t\treturn plan;\n \t}\n@@ -371,9 +416,11 @@ unique_ptr<LogicalOperator> FlattenDependentJoins::PushDownDependentJoinInternal\n \t\t// this is done for an optimization to avoid having to compute the total order\n \t\tif (plan->children[0]->type == LogicalOperatorType::LOGICAL_ORDER_BY) {\n \t\t\torder_by = unique_ptr_cast<LogicalOperator, LogicalOrder>(std::move(plan->children[0]));\n-\t\t\tchild = PushDownDependentJoinInternal(std::move(order_by->children[0]), parent_propagate_null_values);\n+\t\t\tchild = PushDownDependentJoinInternal(std::move(order_by->children[0]), parent_propagate_null_values,\n+\t\t\t                                      lateral_depth);\n \t\t} else {\n-\t\t\tchild = PushDownDependentJoinInternal(std::move(plan->children[0]), parent_propagate_null_values);\n+\t\t\tchild = PushDownDependentJoinInternal(std::move(plan->children[0]), parent_propagate_null_values,\n+\t\t\t                                      lateral_depth);\n \t\t}\n \t\tauto child_column_count = child->GetColumnBindings().size();\n \t\t// we push a row_number() OVER (PARTITION BY [correlated columns])\n@@ -437,7 +484,8 @@ unique_ptr<LogicalOperator> FlattenDependentJoins::PushDownDependentJoinInternal\n \tcase LogicalOperatorType::LOGICAL_WINDOW: {\n \t\tauto &window = plan->Cast<LogicalWindow>();\n \t\t// push into children\n-\t\tplan->children[0] = PushDownDependentJoinInternal(std::move(plan->children[0]), parent_propagate_null_values);\n+\t\tplan->children[0] =\n+\t\t    PushDownDependentJoinInternal(std::move(plan->children[0]), parent_propagate_null_values, lateral_depth);\n \t\t// add the correlated columns to the PARTITION BY clauses in the Window\n \t\tfor (auto &expr : window.expressions) {\n \t\t\tD_ASSERT(expr->GetExpressionClass() == ExpressionClass::BOUND_WINDOW);\n@@ -488,9 +536,10 @@ unique_ptr<LogicalOperator> FlattenDependentJoins::PushDownDependentJoinInternal\n \tcase LogicalOperatorType::LOGICAL_EXPRESSION_GET: {\n \t\t// expression get\n \t\t// first we flatten the dependent join in the child\n-\t\tplan->children[0] = PushDownDependentJoinInternal(std::move(plan->children[0]), parent_propagate_null_values);\n+\t\tplan->children[0] =\n+\t\t    PushDownDependentJoinInternal(std::move(plan->children[0]), parent_propagate_null_values, lateral_depth);\n \t\t// then we replace any correlated expressions with the corresponding entry in the correlated_map\n-\t\tRewriteCorrelatedExpressions rewriter(base_binding, correlated_map);\n+\t\tRewriteCorrelatedExpressions rewriter(base_binding, correlated_map, lateral_depth);\n \t\trewriter.VisitOperator(*plan);\n \t\t// now we add all the correlated columns to each of the expressions of the expression scan\n \t\tauto &expr_get = plan->Cast<LogicalExpressionGet>();\n@@ -527,7 +576,10 @@ unique_ptr<LogicalOperator> FlattenDependentJoins::PushDownDependentJoinInternal\n \t\treturn plan;\n \t}\n \tcase LogicalOperatorType::LOGICAL_RECURSIVE_CTE: {\n-\t\tthrow BinderException(\"Recursive CTEs not supported in correlated subquery\");\n+\t\tthrow BinderException(\"Recursive CTEs not (yet) supported in correlated subquery\");\n+\t}\n+\tcase LogicalOperatorType::LOGICAL_MATERIALIZED_CTE: {\n+\t\tthrow BinderException(\"Materialized CTEs not (yet) supported in correlated subquery\");\n \t}\n \tcase LogicalOperatorType::LOGICAL_DELIM_JOIN: {\n \t\tthrow BinderException(\"Nested lateral joins or lateral joins in correlated subqueries are not (yet) supported\");\ndiff --git a/src/planner/subquery/has_correlated_expressions.cpp b/src/planner/subquery/has_correlated_expressions.cpp\nindex bd07ac3fb367..d53cb9849e2f 100644\n--- a/src/planner/subquery/has_correlated_expressions.cpp\n+++ b/src/planner/subquery/has_correlated_expressions.cpp\n@@ -7,8 +7,10 @@\n \n namespace duckdb {\n \n-HasCorrelatedExpressions::HasCorrelatedExpressions(const vector<CorrelatedColumnInfo> &correlated, bool lateral)\n-    : has_correlated_expressions(false), lateral(lateral), correlated_columns(correlated) {\n+HasCorrelatedExpressions::HasCorrelatedExpressions(const vector<CorrelatedColumnInfo> &correlated, bool lateral,\n+                                                   idx_t lateral_depth)\n+    : has_correlated_expressions(false), lateral(lateral), correlated_columns(correlated),\n+      lateral_depth(lateral_depth) {\n }\n \n void HasCorrelatedExpressions::VisitOperator(LogicalOperator &op) {\n@@ -17,18 +19,31 @@ void HasCorrelatedExpressions::VisitOperator(LogicalOperator &op) {\n \n unique_ptr<Expression> HasCorrelatedExpressions::VisitReplace(BoundColumnRefExpression &expr,\n                                                               unique_ptr<Expression> *expr_ptr) {\n-\tif (expr.depth == 0) {\n+\t// Indicates local correlations (all correlations within a child) for the root\n+\tif (expr.depth <= lateral_depth) {\n \t\treturn nullptr;\n \t}\n-\tif (expr.depth > 1) {\n+\n+\t// Should never happen\n+\tif (expr.depth > 1 + lateral_depth) {\n \t\tif (lateral) {\n-\t\t\tthrow BinderException(\"Nested lateral joins are not (yet) supported\");\n+\t\t\tthrow BinderException(\"Invalid lateral depth encountered for an expression\");\n \t\t}\n \t\tthrow InternalException(\"Expression with depth > 1 detected in non-lateral join\");\n \t}\n+\t// Note: This is added, since we only want to set has_correlated_expressions to true when the\n+\t// BoundSubqueryExpression has the same bindings as one of the correlated_columns from the left hand side\n+\t// (correlated_columns is the correlated_columns from left hand side)\n+\tbool found_match = false;\n+\tfor (idx_t i = 0; i < correlated_columns.size(); i++) {\n+\t\tif (correlated_columns[i].binding == expr.binding) {\n+\t\t\tfound_match = true;\n+\t\t\tbreak;\n+\t\t}\n+\t}\n \t// correlated column reference\n-\tD_ASSERT(expr.depth == 1);\n-\thas_correlated_expressions = true;\n+\tD_ASSERT(expr.depth == lateral_depth + 1);\n+\thas_correlated_expressions = found_match;\n \treturn nullptr;\n }\n \ndiff --git a/src/planner/subquery/rewrite_correlated_expressions.cpp b/src/planner/subquery/rewrite_correlated_expressions.cpp\nindex a28ec29f2e45..fd177ccf7735 100644\n--- a/src/planner/subquery/rewrite_correlated_expressions.cpp\n+++ b/src/planner/subquery/rewrite_correlated_expressions.cpp\n@@ -5,34 +5,67 @@\n #include \"duckdb/planner/expression/bound_constant_expression.hpp\"\n #include \"duckdb/planner/expression/bound_operator_expression.hpp\"\n #include \"duckdb/planner/expression/bound_subquery_expression.hpp\"\n+#include \"duckdb/planner/query_node/bound_select_node.hpp\"\n #include \"duckdb/planner/expression_iterator.hpp\"\n+#include \"duckdb/planner/tableref/bound_joinref.hpp\"\n+#include \"duckdb/planner/operator/logical_dependent_join.hpp\"\n \n namespace duckdb {\n \n RewriteCorrelatedExpressions::RewriteCorrelatedExpressions(ColumnBinding base_binding,\n-                                                           column_binding_map_t<idx_t> &correlated_map)\n-    : base_binding(base_binding), correlated_map(correlated_map) {\n+                                                           column_binding_map_t<idx_t> &correlated_map,\n+                                                           idx_t lateral_depth, bool recursive_rewrite)\n+    : base_binding(base_binding), correlated_map(correlated_map), lateral_depth(lateral_depth),\n+      recursive_rewrite(recursive_rewrite) {\n }\n \n void RewriteCorrelatedExpressions::VisitOperator(LogicalOperator &op) {\n+\tif (recursive_rewrite) {\n+\t\t// Update column bindings from left child of lateral to right child\n+\t\tif (op.type == LogicalOperatorType::LOGICAL_DEPENDENT_JOIN) {\n+\t\t\tD_ASSERT(op.children.size() == 2);\n+\t\t\tVisitOperator(*op.children[0]);\n+\t\t\tlateral_depth++;\n+\t\t\tVisitOperator(*op.children[1]);\n+\t\t\tlateral_depth--;\n+\t\t} else {\n+\t\t\tVisitOperatorChildren(op);\n+\t\t}\n+\t}\n+\t// update the bindings in the correlated columns of the dependendent join\n+\tif (op.type == LogicalOperatorType::LOGICAL_DEPENDENT_JOIN) {\n+\t\tauto &plan = op.Cast<LogicalDependentJoin>();\n+\t\tfor (auto &corr : plan.correlated_columns) {\n+\t\t\tauto entry = correlated_map.find(corr.binding);\n+\t\t\tif (entry != correlated_map.end()) {\n+\t\t\t\tcorr.binding = ColumnBinding(base_binding.table_index, base_binding.column_index + entry->second);\n+\t\t\t}\n+\t\t}\n+\t}\n \tVisitOperatorExpressions(op);\n }\n \n unique_ptr<Expression> RewriteCorrelatedExpressions::VisitReplace(BoundColumnRefExpression &expr,\n                                                                   unique_ptr<Expression> *expr_ptr) {\n-\tif (expr.depth == 0) {\n+\tif (expr.depth <= lateral_depth) {\n+\t\t// Indicates local correlations not relevant for the current the rewrite\n \t\treturn nullptr;\n \t}\n \t// correlated column reference\n \t// replace with the entry referring to the duplicate eliminated scan\n-\t// if this assertion occurs it generally means the correlated expressions were not propagated correctly\n-\t// through different binders\n-\tD_ASSERT(expr.depth == 1);\n+\t// if this assertion occurs it generally means the bindings are inappropriate set in the binder or\n+\t// we either missed to account for lateral binder or over-counted for the lateral binder\n+\tD_ASSERT(expr.depth == 1 + lateral_depth);\n \tauto entry = correlated_map.find(expr.binding);\n \tD_ASSERT(entry != correlated_map.end());\n \n \texpr.binding = ColumnBinding(base_binding.table_index, base_binding.column_index + entry->second);\n-\texpr.depth = 0;\n+\tif (recursive_rewrite) {\n+\t\tD_ASSERT(expr.depth > 1);\n+\t\texpr.depth--;\n+\t} else {\n+\t\texpr.depth = 0;\n+\t}\n \treturn nullptr;\n }\n \n@@ -53,6 +86,21 @@ RewriteCorrelatedExpressions::RewriteCorrelatedRecursive::RewriteCorrelatedRecur\n     : parent(parent), base_binding(base_binding), correlated_map(correlated_map) {\n }\n \n+void RewriteCorrelatedExpressions::RewriteCorrelatedRecursive::RewriteJoinRefRecursive(BoundTableRef &ref) {\n+\t// recursively rewrite bindings in the correlated columns for the table ref and all the children\n+\tif (ref.type == TableReferenceType::JOIN) {\n+\t\tauto &bound_join = ref.Cast<BoundJoinRef>();\n+\t\tfor (auto &corr : bound_join.correlated_columns) {\n+\t\t\tauto entry = correlated_map.find(corr.binding);\n+\t\t\tif (entry != correlated_map.end()) {\n+\t\t\t\tcorr.binding = ColumnBinding(base_binding.table_index, base_binding.column_index + entry->second);\n+\t\t\t}\n+\t\t}\n+\t\tRewriteJoinRefRecursive(*bound_join.left);\n+\t\tRewriteJoinRefRecursive(*bound_join.right);\n+\t}\n+}\n+\n void RewriteCorrelatedExpressions::RewriteCorrelatedRecursive::RewriteCorrelatedSubquery(\n     BoundSubqueryExpression &expr) {\n \t// rewrite the binding in the correlated list of the subquery)\n@@ -62,6 +110,16 @@ void RewriteCorrelatedExpressions::RewriteCorrelatedRecursive::RewriteCorrelated\n \t\t\tcorr.binding = ColumnBinding(base_binding.table_index, base_binding.column_index + entry->second);\n \t\t}\n \t}\n+\t// TODO: Cleanup and find a better way to do this\n+\tauto &node = *expr.subquery;\n+\tif (node.type == QueryNodeType::SELECT_NODE) {\n+\t\t// Found an unplanned select node, need to update column bindings correlated columns in the from tables\n+\t\tauto &bound_select = node.Cast<BoundSelectNode>();\n+\t\tif (bound_select.from_table) {\n+\t\t\tBoundTableRef &table_ref = *bound_select.from_table;\n+\t\t\tRewriteJoinRefRecursive(table_ref);\n+\t\t}\n+\t}\n \t// now rewrite any correlated BoundColumnRef expressions inside the subquery\n \tExpressionIterator::EnumerateQueryNodeChildren(*expr.subquery,\n \t                                               [&](Expression &child) { RewriteCorrelatedExpressions(child); });\ndiff --git a/src/storage/arena_allocator.cpp b/src/storage/arena_allocator.cpp\nindex 3deea346cb29..a4bba122cb3b 100644\n--- a/src/storage/arena_allocator.cpp\n+++ b/src/storage/arena_allocator.cpp\n@@ -109,7 +109,6 @@ data_ptr_t ArenaAllocator::ReallocateAligned(data_ptr_t pointer, idx_t old_size,\n }\n \n void ArenaAllocator::Reset() {\n-\n \tif (head) {\n \t\t// destroy all chunks except the current one\n \t\tif (head->next) {\n@@ -148,7 +147,7 @@ ArenaChunk *ArenaAllocator::GetTail() {\n \treturn tail;\n }\n \n-bool ArenaAllocator::IsEmpty() {\n+bool ArenaAllocator::IsEmpty() const {\n \treturn head == nullptr;\n }\n \ndiff --git a/src/storage/buffer/block_manager.cpp b/src/storage/buffer/block_manager.cpp\nindex de72fd3d7b35..8c430e83bb5f 100644\n--- a/src/storage/buffer/block_manager.cpp\n+++ b/src/storage/buffer/block_manager.cpp\n@@ -79,4 +79,7 @@ void BlockManager::UnregisterBlock(block_id_t block_id, bool can_destroy) {\n \t}\n }\n \n+void BlockManager::Truncate() {\n+}\n+\n } // namespace duckdb\ndiff --git a/src/storage/checkpoint_manager.cpp b/src/storage/checkpoint_manager.cpp\nindex c30f8c6acd76..e5258b0cd44f 100644\n--- a/src/storage/checkpoint_manager.cpp\n+++ b/src/storage/checkpoint_manager.cpp\n@@ -111,6 +111,9 @@ void SingleFileCheckpointWriter::CreateCheckpoint() {\n \t// truncate the WAL\n \twal->Truncate(0);\n \n+\t// truncate the file\n+\tblock_manager.Truncate();\n+\n \t// mark all blocks written as part of the metadata as modified\n \tmetadata_writer->MarkWrittenBlocks();\n \ttable_metadata_writer->MarkWrittenBlocks();\ndiff --git a/src/storage/data_table.cpp b/src/storage/data_table.cpp\nindex feb543c1ca13..2b98dd323756 100644\n--- a/src/storage/data_table.cpp\n+++ b/src/storage/data_table.cpp\n@@ -56,7 +56,7 @@ DataTable::DataTable(AttachedDatabase &db, shared_ptr<TableIOManager> table_io_m\n \trow_groups->Verify();\n }\n \n-DataTable::DataTable(ClientContext &context, DataTable &parent, ColumnDefinition &new_column, Expression *default_value)\n+DataTable::DataTable(ClientContext &context, DataTable &parent, ColumnDefinition &new_column, Expression &default_value)\n     : info(parent.info), db(parent.db), is_root(true) {\n \t// add the column definitions from this DataTable\n \tfor (auto &column_def : parent.column_definitions) {\ndiff --git a/src/storage/local_storage.cpp b/src/storage/local_storage.cpp\nindex e1302e12686b..29e2bc1d9b17 100644\n--- a/src/storage/local_storage.cpp\n+++ b/src/storage/local_storage.cpp\n@@ -61,11 +61,11 @@ LocalTableStorage::LocalTableStorage(DataTable &new_dt, LocalTableStorage &paren\n }\n \n LocalTableStorage::LocalTableStorage(ClientContext &context, DataTable &new_dt, LocalTableStorage &parent,\n-                                     ColumnDefinition &new_column, optional_ptr<Expression> default_value)\n+                                     ColumnDefinition &new_column, Expression &default_value)\n     : table_ref(new_dt), allocator(Allocator::Get(new_dt.db)), deleted_rows(parent.deleted_rows),\n       optimistic_writer(new_dt, parent.optimistic_writer), optimistic_writers(std::move(parent.optimistic_writers)),\n       merged_storage(parent.merged_storage) {\n-\trow_groups = parent.row_groups->AddColumn(context, new_column, default_value.get());\n+\trow_groups = parent.row_groups->AddColumn(context, new_column, default_value);\n \tparent.row_groups.reset();\n \tindexes.Move(parent.indexes);\n }\n@@ -508,7 +508,7 @@ void LocalStorage::MoveStorage(DataTable &old_dt, DataTable &new_dt) {\n }\n \n void LocalStorage::AddColumn(DataTable &old_dt, DataTable &new_dt, ColumnDefinition &new_column,\n-                             optional_ptr<Expression> default_value) {\n+                             Expression &default_value) {\n \t// check if there are any pending appends for the old version of the table\n \tauto storage = table_manager.MoveEntry(old_dt);\n \tif (!storage) {\ndiff --git a/src/storage/single_file_block_manager.cpp b/src/storage/single_file_block_manager.cpp\nindex cb8e93d5fc68..a51d9535724b 100644\n--- a/src/storage/single_file_block_manager.cpp\n+++ b/src/storage/single_file_block_manager.cpp\n@@ -368,6 +368,29 @@ void SingleFileBlockManager::Write(FileBuffer &buffer, block_id_t block_id) {\n \tChecksumAndWrite(buffer, BLOCK_START + block_id * Storage::BLOCK_ALLOC_SIZE);\n }\n \n+void SingleFileBlockManager::Truncate() {\n+\tBlockManager::Truncate();\n+\tidx_t blocks_to_truncate = 0;\n+\t// reverse iterate over the free-list\n+\tfor (auto entry = free_list.rbegin(); entry != free_list.rend(); entry++) {\n+\t\tauto block_id = *entry;\n+\t\tif (block_id + 1 != max_block) {\n+\t\t\tbreak;\n+\t\t}\n+\t\tblocks_to_truncate++;\n+\t\tmax_block--;\n+\t}\n+\tif (blocks_to_truncate == 0) {\n+\t\t// nothing to truncate\n+\t\treturn;\n+\t}\n+\t// truncate the file\n+\tfor (idx_t i = 0; i < blocks_to_truncate; i++) {\n+\t\tfree_list.erase(max_block + i);\n+\t}\n+\thandle->Truncate(BLOCK_START + max_block * Storage::BLOCK_ALLOC_SIZE);\n+}\n+\n vector<block_id_t> SingleFileBlockManager::GetFreeListBlocks() {\n \tvector<block_id_t> free_list_blocks;\n \ndiff --git a/src/storage/statistics/string_stats.cpp b/src/storage/statistics/string_stats.cpp\nindex 5f1aefd15960..0cf227d89d62 100644\n--- a/src/storage/statistics/string_stats.cpp\n+++ b/src/storage/statistics/string_stats.cpp\n@@ -1,10 +1,11 @@\n #include \"duckdb/storage/statistics/string_stats.hpp\"\n-#include \"duckdb/storage/statistics/base_statistics.hpp\"\n+\n #include \"duckdb/common/field_writer.hpp\"\n-#include \"utf8proc_wrapper.hpp\"\n #include \"duckdb/common/string_util.hpp\"\n #include \"duckdb/common/types/vector.hpp\"\n #include \"duckdb/main/error_manager.hpp\"\n+#include \"duckdb/storage/statistics/base_statistics.hpp\"\n+#include \"utf8proc_wrapper.hpp\"\n \n namespace duckdb {\n \n@@ -67,6 +68,24 @@ bool StringStats::CanContainUnicode(const BaseStatistics &stats) {\n \treturn StringStats::GetDataUnsafe(stats).has_unicode;\n }\n \n+string GetStringMinMaxValue(const data_t data[]) {\n+\tidx_t len;\n+\tfor (len = 0; len < StringStatsData::MAX_STRING_MINMAX_SIZE; len++) {\n+\t\tif (!data[len]) {\n+\t\t\tbreak;\n+\t\t}\n+\t}\n+\treturn string(const_char_ptr_cast(data), len);\n+}\n+\n+string StringStats::Min(const BaseStatistics &stats) {\n+\treturn GetStringMinMaxValue(StringStats::GetDataUnsafe(stats).min);\n+}\n+\n+string StringStats::Max(const BaseStatistics &stats) {\n+\treturn GetStringMinMaxValue(StringStats::GetDataUnsafe(stats).max);\n+}\n+\n void StringStats::ResetMaxStringLength(BaseStatistics &stats) {\n \tStringStats::GetDataUnsafe(stats).has_max_string_length = false;\n }\ndiff --git a/src/storage/storage_info.cpp b/src/storage/storage_info.cpp\nindex 5d2af68d6175..e7092083adc1 100644\n--- a/src/storage/storage_info.cpp\n+++ b/src/storage/storage_info.cpp\n@@ -2,7 +2,7 @@\n \n namespace duckdb {\n \n-const uint64_t VERSION_NUMBER = 51;\n+const uint64_t VERSION_NUMBER = 52;\n \n struct StorageVersionInfo {\n \tconst char *version_name;\ndiff --git a/src/storage/table/chunk_info.cpp b/src/storage/table/chunk_info.cpp\nindex 71762e6bd6de..cf67e5c92991 100644\n--- a/src/storage/table/chunk_info.cpp\n+++ b/src/storage/table/chunk_info.cpp\n@@ -89,6 +89,10 @@ void ChunkConstantInfo::Serialize(Serializer &serializer) {\n \tserializer.Write<idx_t>(start);\n }\n \n+idx_t ChunkConstantInfo::GetCommittedDeletedCount(idx_t max_count) {\n+\treturn delete_id < TRANSACTION_ID_START ? max_count : 0;\n+}\n+\n unique_ptr<ChunkInfo> ChunkConstantInfo::Deserialize(Deserializer &source) {\n \tauto start = source.Read<idx_t>();\n \n@@ -244,6 +248,19 @@ void ChunkVectorInfo::Serialize(Serializer &serializer) {\n \tserializer.WriteData(data_ptr_cast(deleted_tuples), sizeof(bool) * STANDARD_VECTOR_SIZE);\n }\n \n+idx_t ChunkVectorInfo::GetCommittedDeletedCount(idx_t max_count) {\n+\tif (!any_deleted) {\n+\t\treturn 0;\n+\t}\n+\tidx_t delete_count = 0;\n+\tfor (idx_t i = 0; i < max_count; i++) {\n+\t\tif (deleted[i] < TRANSACTION_ID_START) {\n+\t\t\tdelete_count++;\n+\t\t}\n+\t}\n+\treturn delete_count;\n+}\n+\n unique_ptr<ChunkInfo> ChunkVectorInfo::Deserialize(Deserializer &source) {\n \tauto start = source.Read<idx_t>();\n \ndiff --git a/src/storage/table/row_group.cpp b/src/storage/table/row_group.cpp\nindex a174e0a86d95..537655478d6c 100644\n--- a/src/storage/table/row_group.cpp\n+++ b/src/storage/table/row_group.cpp\n@@ -67,6 +67,21 @@ void VersionNode::SetStart(idx_t start) {\n \t}\n }\n \n+idx_t VersionNode::GetCommittedDeletedCount(idx_t count) {\n+\tidx_t deleted_count = 0;\n+\tfor (idx_t r = 0, i = 0; r < count; r += STANDARD_VECTOR_SIZE, i++) {\n+\t\tif (!info[i]) {\n+\t\t\tcontinue;\n+\t\t}\n+\t\tidx_t max_count = MinValue<idx_t>(STANDARD_VECTOR_SIZE, count - r);\n+\t\tif (max_count == 0) {\n+\t\t\tbreak;\n+\t\t}\n+\t\tdeleted_count += info[i]->GetCommittedDeletedCount(max_count);\n+\t}\n+\treturn deleted_count;\n+}\n+\n RowGroup::~RowGroup() {\n }\n \n@@ -112,10 +127,6 @@ ColumnData &RowGroup::GetColumn(storage_t c) {\n \treturn *columns[c];\n }\n \n-DatabaseInstance &RowGroup::GetDatabase() {\n-\treturn GetCollection().GetDatabase();\n-}\n-\n BlockManager &RowGroup::GetBlockManager() {\n \treturn GetCollection().GetBlockManager();\n }\n@@ -270,7 +281,7 @@ unique_ptr<RowGroup> RowGroup::AlterType(RowGroupCollection &new_collection, con\n }\n \n unique_ptr<RowGroup> RowGroup::AddColumn(RowGroupCollection &new_collection, ColumnDefinition &new_column,\n-                                         ExpressionExecutor &executor, Expression *default_value, Vector &result) {\n+                                         ExpressionExecutor &executor, Expression &default_value, Vector &result) {\n \tVerify();\n \n \t// construct a new column data for the new column\n@@ -285,10 +296,8 @@ unique_ptr<RowGroup> RowGroup::AddColumn(RowGroupCollection &new_collection, Col\n \t\tadded_column->InitializeAppend(state);\n \t\tfor (idx_t i = 0; i < rows_to_write; i += STANDARD_VECTOR_SIZE) {\n \t\t\tidx_t rows_in_this_vector = MinValue<idx_t>(rows_to_write - i, STANDARD_VECTOR_SIZE);\n-\t\t\tif (default_value) {\n-\t\t\t\tdummy_chunk.SetCardinality(rows_in_this_vector);\n-\t\t\t\texecutor.ExecuteExpression(dummy_chunk, result);\n-\t\t\t}\n+\t\t\tdummy_chunk.SetCardinality(rows_in_this_vector);\n+\t\t\texecutor.ExecuteExpression(dummy_chunk, result);\n \t\t\tadded_column->Append(state, result, rows_in_this_vector);\n \t\t}\n \t}\n@@ -796,6 +805,13 @@ RowGroupWriteData RowGroup::WriteToDisk(PartialBlockManager &manager,\n \treturn result;\n }\n \n+bool RowGroup::AllDeleted() {\n+\tif (!version_info) {\n+\t\treturn false;\n+\t}\n+\treturn version_info->GetCommittedDeletedCount(count) == count;\n+}\n+\n RowGroupPointer RowGroup::Checkpoint(RowGroupWriter &writer, TableStatistics &global_stats) {\n \tRowGroupPointer row_group_pointer;\n \ndiff --git a/src/storage/table/row_group_collection.cpp b/src/storage/table/row_group_collection.cpp\nindex 31048c853502..969d75d8aad9 100644\n--- a/src/storage/table/row_group_collection.cpp\n+++ b/src/storage/table/row_group_collection.cpp\n@@ -67,10 +67,6 @@ AttachedDatabase &RowGroupCollection::GetAttached() {\n \treturn GetTableInfo().db;\n }\n \n-DatabaseInstance &RowGroupCollection::GetDatabase() {\n-\treturn GetAttached().GetDatabase();\n-}\n-\n //===--------------------------------------------------------------------===//\n // Initialize\n //===--------------------------------------------------------------------===//\n@@ -97,10 +93,6 @@ RowGroup *RowGroupCollection::GetRowGroup(int64_t index) {\n \treturn (RowGroup *)row_groups->GetSegmentByIndex(index);\n }\n \n-idx_t RowGroupCollection::RowGroupCount() {\n-\treturn row_groups->GetSegmentCount();\n-}\n-\n void RowGroupCollection::Verify() {\n #ifdef DEBUG\n \tidx_t current_total_rows = 0;\n@@ -600,11 +592,24 @@ void RowGroupCollection::UpdateColumn(TransactionData transaction, Vector &row_i\n // Checkpoint\n //===--------------------------------------------------------------------===//\n void RowGroupCollection::Checkpoint(TableDataWriter &writer, TableStatistics &global_stats) {\n-\tfor (auto &row_group : row_groups->Segments()) {\n-\t\tauto rowg_writer = writer.GetRowGroupWriter(row_group);\n-\t\tauto pointer = row_group.Checkpoint(*rowg_writer, global_stats);\n-\t\twriter.AddRowGroup(std::move(pointer), std::move(rowg_writer));\n+\tbool can_vacuum_deletes = info->indexes.Empty();\n+\tidx_t start = this->row_start;\n+\tauto segments = row_groups->MoveSegments();\n+\tauto l = row_groups->Lock();\n+\tfor (auto &entry : segments) {\n+\t\tauto &row_group = *entry.node;\n+\t\tif (can_vacuum_deletes && row_group.AllDeleted()) {\n+\t\t\trow_group.CommitDrop();\n+\t\t\tcontinue;\n+\t\t}\n+\t\trow_group.MoveToCollection(*this, start);\n+\t\tauto row_group_writer = writer.GetRowGroupWriter(row_group);\n+\t\tauto pointer = row_group.Checkpoint(*row_group_writer, global_stats);\n+\t\twriter.AddRowGroup(std::move(pointer), std::move(row_group_writer));\n+\t\trow_groups->AppendSegment(l, std::move(entry.node));\n+\t\tstart += row_group.count;\n \t}\n+\ttotal_rows = start;\n }\n \n //===--------------------------------------------------------------------===//\n@@ -637,7 +642,7 @@ vector<ColumnSegmentInfo> RowGroupCollection::GetColumnSegmentInfo() {\n // Alter\n //===--------------------------------------------------------------------===//\n shared_ptr<RowGroupCollection> RowGroupCollection::AddColumn(ClientContext &context, ColumnDefinition &new_column,\n-                                                             Expression *default_value) {\n+                                                             Expression &default_value) {\n \tidx_t new_column_idx = types.size();\n \tauto new_types = types;\n \tnew_types.push_back(new_column.GetType());\n@@ -647,11 +652,7 @@ shared_ptr<RowGroupCollection> RowGroupCollection::AddColumn(ClientContext &cont\n \tExpressionExecutor executor(context);\n \tDataChunk dummy_chunk;\n \tVector default_vector(new_column.GetType());\n-\tif (!default_value) {\n-\t\tFlatVector::Validity(default_vector).SetAllInvalid(STANDARD_VECTOR_SIZE);\n-\t} else {\n-\t\texecutor.AddExpression(*default_value);\n-\t}\n+\texecutor.AddExpression(default_value);\n \n \tresult->stats.InitializeAddColumn(stats, new_column.GetType());\n \tauto &new_column_stats = result->stats.GetStats(new_column_idx);\ndiff --git a/third_party/concurrentqueue/concurrentqueue.h b/third_party/concurrentqueue/concurrentqueue.h\nindex 5375769b7196..f3e2b1005eec 100644\n--- a/third_party/concurrentqueue/concurrentqueue.h\n+++ b/third_party/concurrentqueue/concurrentqueue.h\n@@ -80,7 +80,7 @@ namespace duckdb_moodycamel { namespace details {\n \tstatic const thread_id_t invalid_thread_id2 = 0xFFFFFFFFU;\t// Not technically guaranteed to be invalid, but is never used in practice. Note that all Win32 thread IDs are presently multiples of 4.\n \tstatic inline thread_id_t thread_id() { return static_cast<thread_id_t>(::GetCurrentThreadId()); }\n } }\n-#elif defined(__arm__) || defined(_M_ARM) || defined(__aarch64__) || (defined(__APPLE__) && TARGET_OS_IPHONE)\n+#elif defined(__arm__) || defined(_M_ARM) || defined(__aarch64__) || (defined(__APPLE__) && TARGET_OS_IPHONE) || defined(__MVS__)\n namespace duckdb_moodycamel { namespace details {\n \tstatic_assert(sizeof(std::thread::id) == 4 || sizeof(std::thread::id) == 8, \"std::thread::id is expected to be either 4 or 8 bytes\");\n \t\n@@ -194,7 +194,7 @@ namespace duckdb_moodycamel { namespace details {\n // VS2013 doesn't support `thread_local`, and MinGW-w64 w/ POSIX threading has a crippling bug: http://sourceforge.net/p/mingw-w64/bugs/445\n // g++ <=4.7 doesn't support thread_local either.\n // Finally, iOS/ARM doesn't have support for it either, and g++/ARM allows it to compile but it's unconfirmed to actually work\n-#if (!defined(_MSC_VER) || _MSC_VER >= 1900) && (!defined(__MINGW32__) && !defined(__MINGW64__) || !defined(__WINPTHREADS_VERSION)) && (!defined(__GNUC__) || __GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)) && (!defined(__APPLE__) || !TARGET_OS_IPHONE) && !defined(__arm__) && !defined(_M_ARM) && !defined(__aarch64__)\n+#if (!defined(_MSC_VER) || _MSC_VER >= 1900) && (!defined(__MINGW32__) && !defined(__MINGW64__) || !defined(__WINPTHREADS_VERSION)) && (!defined(__GNUC__) || __GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)) && (!defined(__APPLE__) || !TARGET_OS_IPHONE) && !defined(__arm__) && !defined(_M_ARM) && !defined(__aarch64__) && !defined(__MVS__)\n // Assume `thread_local` is fully supported in all other C++11 compilers/platforms\n //#define MOODYCAMEL_CPP11_THREAD_LOCAL_SUPPORTED    // always disabled for now since several users report having problems with it on\n #endif\ndiff --git a/third_party/concurrentqueue/lightweightsemaphore.h b/third_party/concurrentqueue/lightweightsemaphore.h\nindex 1a5c0837f3c8..e0c39462f7db 100644\n--- a/third_party/concurrentqueue/lightweightsemaphore.h\n+++ b/third_party/concurrentqueue/lightweightsemaphore.h\n@@ -27,6 +27,8 @@ extern \"C\" {\n #elif defined(__unix__)\n #include <semaphore.h>\n #include <chrono>\n+#elif defined(__MVS__)\n+#include <zos-semaphore.h>\n #endif\n \n namespace duckdb_moodycamel\n@@ -254,6 +256,80 @@ class Semaphore\n \t\t}\n \t}\n };\n+#elif defined(__MVS__)\n+//---------------------------------------------------------\n+// Semaphore (MVS aka z/OS)\n+//---------------------------------------------------------\n+class Semaphore\n+{\n+private:\n+\tsem_t m_sema;\n+\n+\tSemaphore(const Semaphore& other) MOODYCAMEL_DELETE_FUNCTION;\n+\tSemaphore& operator=(const Semaphore& other) MOODYCAMEL_DELETE_FUNCTION;\n+\n+public:\n+\tSemaphore(int initialCount = 0)\n+\t{\n+\t\tassert(initialCount >= 0);\n+\t\tint rc = sem_init(&m_sema, 0, initialCount);\n+\t\tassert(rc == 0);\n+\t\t(void)rc;\n+\t}\n+\n+\t~Semaphore()\n+\t{\n+\t\tsem_destroy(&m_sema);\n+\t}\n+\n+\tbool wait()\n+\t{\n+\t\t// http://stackoverflow.com/questions/2013181/gdb-causes-sem-wait-to-fail-with-eintr-error\n+\t\tint rc;\n+\t\tdo {\n+\t\t\trc = sem_wait(&m_sema);\n+\t\t} while (rc == -1 && errno == EINTR);\n+\t\treturn rc == 0;\n+\t}\n+\n+\tbool try_wait()\n+\t{\n+\t\tint rc;\n+\t\tdo {\n+\t\t\trc = sem_trywait(&m_sema);\n+\t\t} while (rc == -1 && errno == EINTR);\n+\t\treturn rc == 0;\n+\t}\n+\n+\tbool timed_wait(std::uint64_t usecs)\n+\t{\n+\t\tstruct timespec ts;\n+\t\tconst int usecs_in_1_sec = 1000000;\n+\t\tconst int nsecs_in_1_sec = 1000000000;\n+\n+\t\tts.tv_sec = usecs / usecs_in_1_sec;\n+\t\tts.tv_nsec = (usecs % usecs_in_1_sec) * 1000;\n+\n+\t\tint rc;\n+\t\tdo {\n+\t\t\trc = sem_timedwait(&m_sema, &ts);\n+\t\t} while (rc == -1 && errno == EINTR);\n+\t\treturn rc == 0;\n+\t}\n+\n+\tvoid signal()\n+\t{\n+\t\twhile (sem_post(&m_sema) == -1);\n+\t}\n+\n+\tvoid signal(int count)\n+\t{\n+\t\twhile (count-- > 0)\n+\t\t{\n+\t\t\twhile (sem_post(&m_sema) == -1);\n+\t\t}\n+\t}\n+};\n #else\n #error Unsupported platform! (No semaphore wrapper available)\n #endif\ndiff --git a/third_party/fast_float/fast_float/fast_float.h b/third_party/fast_float/fast_float/fast_float.h\nindex 736a32786eb0..d072fc7561d3 100644\n--- a/third_party/fast_float/fast_float/fast_float.h\n+++ b/third_party/fast_float/fast_float/fast_float.h\n@@ -130,6 +130,8 @@ from_chars_result from_chars(const char *first, const char *last,\n #include <machine/endian.h>\n #elif defined(sun) || defined(__sun)\n #include <sys/byteorder.h>\n+#elif defined(__MVS__)\n+#include <sys/endian.h>\n #else\n #include <endian.h>\n #endif\ndiff --git a/third_party/httplib/httplib.hpp b/third_party/httplib/httplib.hpp\nindex 920a94b73395..7d01aaec43b3 100644\n--- a/third_party/httplib/httplib.hpp\n+++ b/third_party/httplib/httplib.hpp\n@@ -183,7 +183,16 @@ using socket_t = SOCKET;\n \n #include <arpa/inet.h>\n #include <cstring>\n+#ifndef __MVS__\n #include <ifaddrs.h>\n+#endif\n+#ifdef __MVS__\n+#include <net/if.h>\n+#include <strings.h>\n+#ifndef NI_MAXHOST\n+#define NI_MAXHOST 1025\n+#endif\n+#endif\n #include <netdb.h>\n #include <netinet/in.h>\n #ifdef __linux__\n@@ -2668,7 +2677,7 @@ inline bool bind_ip_address(socket_t sock, const char *host) {\n \treturn ret;\n }\n \n-#if !defined _WIN32 && !defined ANDROID\n+#if !defined _WIN32 && !defined ANDROID && !defined __MVS__\n #define USE_IF2IP\n #endif\n \ndiff --git a/third_party/libpg_query/grammar/grammar.y b/third_party/libpg_query/grammar/grammar.y\nindex 55457ff72029..a7c284e42689 100644\n--- a/third_party/libpg_query/grammar/grammar.y\n+++ b/third_party/libpg_query/grammar/grammar.y\n@@ -39,6 +39,7 @@\n \tPGAlias\t\t\t\t*alias;\n \tPGRangeVar\t\t\t*range;\n \tPGIntoClause\t\t\t*into;\n+\tPGCTEMaterialize\t\t\tctematerialize;\n \tPGWithClause\t\t\t*with;\n \tPGInferClause\t\t\t*infer;\n \tPGOnConflictClause\t*onconflict;\ndiff --git a/third_party/libpg_query/grammar/statements/copy.y b/third_party/libpg_query/grammar/statements/copy.y\nindex ebe5c281ac46..855759966ce0 100644\n--- a/third_party/libpg_query/grammar/statements/copy.y\n+++ b/third_party/libpg_query/grammar/statements/copy.y\n@@ -103,6 +103,7 @@ copy_generic_opt_arg:\n \t\t\t| NumericOnly\t\t\t\t\t{ $$ = (PGNode *) $1; }\n \t\t\t| '*'\t\t\t\t\t\t\t{ $$ = (PGNode *) makeNode(PGAStar); }\n \t\t\t| '(' copy_generic_opt_arg_list ')'\t\t{ $$ = (PGNode *) $2; }\n+\t\t\t| struct_expr\t\t\t\t\t{ $$ = (PGNode *) $1; }\n \t\t\t| /* EMPTY */\t\t\t\t\t{ $$ = NULL; }\n \t\t;\n \ndiff --git a/third_party/libpg_query/grammar/statements/select.y b/third_party/libpg_query/grammar/statements/select.y\nindex adb481e70290..65026a61f187 100644\n--- a/third_party/libpg_query/grammar/statements/select.y\n+++ b/third_party/libpg_query/grammar/statements/select.y\n@@ -444,17 +444,24 @@ cte_list:\n \t\t| cte_list ',' common_table_expr\t\t{ $$ = lappend($1, $3); }\n \t\t;\n \n-common_table_expr:  name opt_name_list AS '(' PreparableStmt ')'\n+common_table_expr:  name opt_name_list AS opt_materialized '(' PreparableStmt ')'\n \t\t\t{\n \t\t\t\tPGCommonTableExpr *n = makeNode(PGCommonTableExpr);\n \t\t\t\tn->ctename = $1;\n \t\t\t\tn->aliascolnames = $2;\n-\t\t\t\tn->ctequery = $5;\n+\t\t\t\tn->ctematerialized = $4;\n+\t\t\t\tn->ctequery = $6;\n \t\t\t\tn->location = @1;\n \t\t\t\t$$ = (PGNode *) n;\n \t\t\t}\n \t\t;\n \n+opt_materialized:\n+\t\tMATERIALIZED\t\t\t\t\t\t\t{ $$ = PGCTEMaterializeAlways; }\n+\t\t| NOT MATERIALIZED\t\t\t\t\t\t{ $$ = PGCTEMaterializeNever; }\n+\t\t| /*EMPTY*/\t\t\t\t\t\t\t\t{ $$ = PGCTEMaterializeDefault; }\n+\t\t;\n+\n into_clause:\n \t\t\tINTO OptTempTableName\n \t\t\t\t{\n@@ -2733,10 +2740,9 @@ indirection_expr:\t\t'?'\n \t\t\t\t{\n \t\t\t\t\t$$ = $2;\n \t\t\t\t}\n-\t\t\t| '{' dict_arguments_opt_comma '}'\n+\t\t\t| struct_expr\n \t\t\t\t{\n-\t\t\t\t\tPGFuncCall *f = makeFuncCall(SystemFuncName(\"struct_pack\"), $2, @2);\n-\t\t\t\t\t$$ = (PGNode *) f;\n+\t\t\t\t\t$$ = $1;\n \t\t\t\t}\n \t\t\t| MAP '{' opt_map_arguments_opt_comma '}'\n \t\t\t\t{\n@@ -2761,6 +2767,17 @@ indirection_expr:\t\t'?'\n \t\t\t\t}\n \t\t;\n \n+\n+\n+struct_expr:\t\t'{' dict_arguments_opt_comma '}'\n+\t\t\t\t{\n+\t\t\t\t\tPGFuncCall *f = makeFuncCall(SystemFuncName(\"struct_pack\"), $2, @2);\n+\t\t\t\t\t$$ = (PGNode *) f;\n+\t\t\t\t}\n+\t\t;\n+\n+\n+\n func_application:       func_name '(' ')'\n \t\t\t\t{\n \t\t\t\t\t$$ = (PGNode *) makeFuncCall($1, NIL, @1);\ndiff --git a/third_party/libpg_query/grammar/statements/variable_reset.y b/third_party/libpg_query/grammar/statements/variable_reset.y\nindex 1366e5b86539..68140b012c29 100644\n--- a/third_party/libpg_query/grammar/statements/variable_reset.y\n+++ b/third_party/libpg_query/grammar/statements/variable_reset.y\n@@ -1,5 +1,24 @@\n VariableResetStmt:\n-\t\t\tRESET reset_rest\t\t\t\t\t\t{ $$ = (PGNode *) $2; }\n+\t\t\tRESET reset_rest\n+\t\t\t{\n+\t\t\t\t$2->scope = VAR_SET_SCOPE_DEFAULT;\n+\t\t\t\t$$ = (PGNode *) $2;\n+\t\t\t}\n+\t\t\t| RESET LOCAL reset_rest\n+\t\t\t\t{\n+\t\t\t\t\t$3->scope = VAR_SET_SCOPE_LOCAL;\n+\t\t\t\t\t$$ = (PGNode *) $3;\n+\t\t\t\t}\n+\t\t\t| RESET SESSION reset_rest\n+\t\t\t\t{\n+\t\t\t\t\t$3->scope = VAR_SET_SCOPE_SESSION;\n+\t\t\t\t\t$$ = (PGNode *) $3;\n+\t\t\t\t}\n+\t\t\t| RESET GLOBAL reset_rest\n+\t\t\t\t{\n+\t\t\t\t\t$3->scope = VAR_SET_SCOPE_GLOBAL;\n+\t\t\t\t\t$$ = (PGNode *) $3;\n+\t\t\t\t}\n \t\t;\n \n \n@@ -8,7 +27,6 @@ generic_reset:\n \t\t\t\t{\n \t\t\t\t\tPGVariableSetStmt *n = makeNode(PGVariableSetStmt);\n \t\t\t\t\tn->kind = VAR_RESET;\n-\t\t\t\t\tn->scope = VAR_SET_SCOPE_GLOBAL;\n \t\t\t\t\tn->name = $1;\n \t\t\t\t\t$$ = n;\n \t\t\t\t}\n@@ -16,7 +34,6 @@ generic_reset:\n \t\t\t\t{\n \t\t\t\t\tPGVariableSetStmt *n = makeNode(PGVariableSetStmt);\n \t\t\t\t\tn->kind = VAR_RESET_ALL;\n-\t\t\t\t\tn->scope = VAR_SET_SCOPE_GLOBAL;\n \t\t\t\t\t$$ = n;\n \t\t\t\t}\n \t\t;\ndiff --git a/third_party/libpg_query/grammar/types/select.yh b/third_party/libpg_query/grammar/types/select.yh\nindex 0ba84a6a4ffa..012e684d3047 100644\n--- a/third_party/libpg_query/grammar/types/select.yh\n+++ b/third_party/libpg_query/grammar/types/select.yh\n@@ -8,8 +8,7 @@\n %type <node> opt_collate_clause\n \n %type <node> indirection_expr\n-\n-\n+%type <node> struct_expr\n \n \n %type <lockwaitpolicy>\topt_nowait_or_skip\n@@ -115,6 +114,7 @@\n %type <node>\tcommon_table_expr\n %type <with>\twith_clause\n %type <list>\tcte_list\n+%type <ctematerialize>\topt_materialized\n \n %type <list>\twithin_group_clause\n %type <node>\tfilter_clause\ndiff --git a/third_party/libpg_query/include/nodes/parsenodes.hpp b/third_party/libpg_query/include/nodes/parsenodes.hpp\nindex b576c0f539e1..7095d36b206b 100755\n--- a/third_party/libpg_query/include/nodes/parsenodes.hpp\n+++ b/third_party/libpg_query/include/nodes/parsenodes.hpp\n@@ -1058,10 +1058,19 @@ typedef struct PGOnConflictClause {\n  *\n  * We don't currently support the SEARCH or CYCLE clause.\n  */\n+\n+typedef enum PGCTEMaterialize\n+{\n+\tPGCTEMaterializeDefault,\t\t/* no option specified */\n+\tPGCTEMaterializeAlways,\t\t/* MATERIALIZED */\n+\tPGCTEMaterializeNever\t\t\t/* NOT MATERIALIZED */\n+} PGCTEMaterialize;\n+\n typedef struct PGCommonTableExpr {\n \tPGNodeTag type;\n \tchar *ctename;         /* query name (never qualified) */\n \tPGList *aliascolnames; /* optional list of column names */\n+\tPGCTEMaterialize ctematerialized; /* is this an optimization fence? */\n \t/* SelectStmt/InsertStmt/etc before parse analysis, PGQuery afterwards: */\n \tPGNode *ctequery; /* the CTE's subquery */\n \tint location;     /* token location, or -1 if unknown */\ndiff --git a/third_party/libpg_query/include/parser/gram.hpp b/third_party/libpg_query/include/parser/gram.hpp\nindex e0bf2afd273c..8412c59fbc1d 100644\n--- a/third_party/libpg_query/include/parser/gram.hpp\n+++ b/third_party/libpg_query/include/parser/gram.hpp\n@@ -1049,6 +1049,7 @@ typedef union YYSTYPE\n \tPGAlias\t\t\t\t*alias;\n \tPGRangeVar\t\t\t*range;\n \tPGIntoClause\t\t\t*into;\n+\tPGCTEMaterialize\t\t\tctematerialize;\n \tPGWithClause\t\t\t*with;\n \tPGInferClause\t\t\t*infer;\n \tPGOnConflictClause\t*onconflict;\n@@ -1068,7 +1069,7 @@ typedef union YYSTYPE\n \tPGInsertColumnOrder bynameorposition;\n }\n /* Line 1529 of yacc.c.  */\n-#line 1072 \"third_party/libpg_query/grammar/grammar_out.hpp\"\n+#line 1073 \"third_party/libpg_query/grammar/grammar_out.hpp\"\n \tYYSTYPE;\n # define yystype YYSTYPE /* obsolescent; will be withdrawn */\n # define YYSTYPE_IS_DECLARED 1\ndiff --git a/third_party/libpg_query/src_backend_parser_gram.cpp b/third_party/libpg_query/src_backend_parser_gram.cpp\nindex e28ff008548d..ab10ddc17cf0 100644\n--- a/third_party/libpg_query/src_backend_parser_gram.cpp\n+++ b/third_party/libpg_query/src_backend_parser_gram.cpp\n@@ -1269,6 +1269,7 @@ typedef union YYSTYPE\n \tPGAlias\t\t\t\t*alias;\n \tPGRangeVar\t\t\t*range;\n \tPGIntoClause\t\t\t*into;\n+\tPGCTEMaterialize\t\t\tctematerialize;\n \tPGWithClause\t\t\t*with;\n \tPGInferClause\t\t\t*infer;\n \tPGOnConflictClause\t*onconflict;\n@@ -1288,7 +1289,7 @@ typedef union YYSTYPE\n \tPGInsertColumnOrder bynameorposition;\n }\n /* Line 193 of yacc.c.  */\n-#line 1292 \"third_party/libpg_query/grammar/grammar_out.cpp\"\n+#line 1293 \"third_party/libpg_query/grammar/grammar_out.cpp\"\n \tYYSTYPE;\n # define yystype YYSTYPE /* obsolescent; will be withdrawn */\n # define YYSTYPE_IS_DECLARED 1\n@@ -1313,7 +1314,7 @@ typedef struct YYLTYPE\n \n \n /* Line 216 of yacc.c.  */\n-#line 1317 \"third_party/libpg_query/grammar/grammar_out.cpp\"\n+#line 1318 \"third_party/libpg_query/grammar/grammar_out.cpp\"\n \n #ifdef short\n # undef short\n@@ -1528,18 +1529,18 @@ union yyalloc\n #endif\n \n /* YYFINAL -- State number of the termination state.  */\n-#define YYFINAL  677\n+#define YYFINAL  680\n /* YYLAST -- Last index in YYTABLE.  */\n-#define YYLAST   66573\n+#define YYLAST   67027\n \n /* YYNTOKENS -- Number of terminals.  */\n #define YYNTOKENS  511\n /* YYNNTS -- Number of nonterminals.  */\n-#define YYNNTS  437\n+#define YYNNTS  439\n /* YYNRULES -- Number of rules.  */\n-#define YYNRULES  2019\n+#define YYNRULES  2027\n /* YYNRULES -- Number of states.  */\n-#define YYNSTATES  3360\n+#define YYNSTATES  3372\n \n /* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */\n #define YYUNDEFTOK  2\n@@ -1678,183 +1679,184 @@ static const yytype_uint16 yyprhs[] =\n     1469,  1471,  1473,  1475,  1479,  1488,  1500,  1511,  1519,  1530,\n     1540,  1542,  1544,  1547,  1551,  1560,  1572,  1582,  1584,  1586,\n     1590,  1591,  1593,  1597,  1599,  1600,  1602,  1603,  1605,  1606,\n-    1608,  1612,  1614,  1616,  1618,  1622,  1623,  1626,  1629,  1630,\n-    1633,  1634,  1636,  1637,  1639,  1641,  1643,  1647,  1651,  1653,\n-    1655,  1659,  1663,  1667,  1671,  1675,  1679,  1684,  1688,  1691,\n-    1693,  1695,  1697,  1699,  1701,  1705,  1707,  1709,  1713,  1717,\n-    1719,  1722,  1727,  1732,  1735,  1739,  1745,  1751,  1753,  1755,\n-    1759,  1760,  1772,  1784,  1795,  1808,  1810,  1813,  1819,  1824,\n-    1829,  1834,  1839,  1847,  1853,  1858,  1866,  1873,  1883,  1893,\n-    1898,  1900,  1902,  1904,  1906,  1908,  1910,  1912,  1918,  1920,\n-    1922,  1926,  1928,  1931,  1934,  1937,  1941,  1943,  1947,  1954,\n-    1957,  1958,  1962,  1966,  1971,  1976,  1981,  1986,  1990,  1993,\n-    1995,  1997,  1998,  2000,  2002,  2003,  2006,  2008,  2014,  2016,\n-    2017,  2020,  2023,  2024,  2026,  2027,  2031,  2037,  2039,  2043,\n-    2048,  2052,  2054,  2056,  2057,  2060,  2063,  2064,  2067,  2070,\n-    2072,  2074,  2076,  2077,  2080,  2085,  2091,  2096,  2099,  2103,\n-    2106,  2109,  2112,  2115,  2117,  2120,  2124,  2125,  2127,  2128,\n-    2134,  2136,  2141,  2148,  2151,  2153,  2154,  2159,  2160,  2162,\n-    2164,  2167,  2170,  2173,  2175,  2177,  2180,  2183,  2185,  2187,\n-    2189,  2191,  2193,  2195,  2199,  2203,  2204,  2206,  2210,  2212,\n-    2215,  2217,  2219,  2221,  2223,  2225,  2228,  2233,  2238,  2244,\n-    2246,  2248,  2251,  2252,  2255,  2256,  2258,  2262,  2264,  2265,\n-    2267,  2270,  2274,  2277,  2282,  2285,  2289,  2292,  2293,  2295,\n-    2298,  2299,  2304,  2310,  2312,  2315,  2318,  2319,  2321,  2325,\n-    2327,  2330,  2334,  2338,  2342,  2346,  2350,  2354,  2356,  2361,\n-    2371,  2381,  2385,  2386,  2389,  2392,  2393,  2399,  2403,  2405,\n-    2409,  2415,  2419,  2421,  2424,  2426,  2430,  2436,  2438,  2441,\n-    2445,  2450,  2456,  2461,  2467,  2472,  2479,  2485,  2490,  2496,\n-    2502,  2508,  2511,  2516,  2518,  2520,  2521,  2523,  2528,  2534,\n-    2539,  2540,  2543,  2546,  2549,  2551,  2553,  2555,  2557,  2558,\n-    2563,  2566,  2568,  2571,  2574,  2579,  2582,  2589,  2592,  2594,\n-    2598,  2603,  2604,  2607,  2608,  2611,  2612,  2614,  2618,  2622,\n-    2625,  2626,  2629,  2634,  2636,  2638,  2640,  2641,  2644,  2648,\n-    2654,  2661,  2664,  2668,  2674,  2680,  2686,  2690,  2695,  2696,\n-    2698,  2700,  2702,  2704,  2706,  2709,  2714,  2716,  2718,  2720,\n-    2722,  2725,  2729,  2730,  2732,  2734,  2736,  2738,  2740,  2743,\n-    2746,  2749,  2752,  2755,  2757,  2761,  2762,  2764,  2766,  2768,\n-    2770,  2776,  2779,  2781,  2783,  2785,  2787,  2792,  2794,  2797,\n-    2800,  2802,  2806,  2810,  2813,  2815,  2816,  2822,  2825,  2831,\n-    2834,  2836,  2840,  2844,  2845,  2847,  2849,  2851,  2853,  2855,\n-    2857,  2859,  2861,  2863,  2865,  2867,  2869,  2871,  2873,  2875,\n-    2877,  2879,  2881,  2883,  2885,  2887,  2889,  2891,  2893,  2897,\n-    2901,  2905,  2909,  2913,  2917,  2921,  2922,  2924,  2928,  2932,\n-    2938,  2941,  2944,  2948,  2952,  2956,  2960,  2964,  2968,  2972,\n-    2976,  2980,  2984,  2988,  2992,  2996,  3000,  3004,  3007,  3010,\n-    3014,  3018,  3021,  3024,  3028,  3032,  3038,  3043,  3050,  3054,\n-    3060,  3065,  3072,  3077,  3084,  3090,  3098,  3102,  3105,  3110,\n-    3114,  3117,  3121,  3125,  3129,  3133,  3138,  3142,  3147,  3151,\n-    3156,  3162,  3169,  3176,  3184,  3191,  3199,  3206,  3214,  3218,\n-    3223,  3228,  3235,  3237,  3242,  3246,  3252,  3254,  3258,  3261,\n-    3264,  3268,  3272,  3276,  3280,  3284,  3288,  3292,  3296,  3300,\n-    3304,  3308,  3312,  3316,  3320,  3324,  3327,  3330,  3336,  3343,\n-    3350,  3358,  3360,  3362,  3365,  3367,  3369,  3372,  3375,  3379,\n-    3381,  3384,  3389,  3391,  3393,  3396,  3399,  3404,  3406,  3408,\n-    3412,  3416,  3421,  3423,  3427,  3434,  3442,  3452,  3460,  3468,\n-    3474,  3476,  3478,  3480,  3486,  3493,  3500,  3505,  3510,  3515,\n-    3520,  3527,  3533,  3539,  3545,  3550,  3557,  3562,  3570,  3580,\n-    3586,  3587,  3593,  3598,  3599,  3601,  3602,  3605,  3606,  3608,\n-    3612,  3616,  3619,  3622,  3623,  3630,  3632,  3633,  3637,  3638,\n-    3641,  3644,  3645,  3647,  3652,  3655,  3658,  3661,  3664,  3667,\n-    3672,  3676,  3678,  3684,  3688,  3690,  3694,  3696,  3699,  3703,\n-    3705,  3709,  3711,  3714,  3716,  3717,  3719,  3721,  3723,  3725,\n-    3727,  3729,  3731,  3733,  3735,  3737,  3739,  3741,  3743,  3745,\n-    3747,  3749,  3751,  3753,  3755,  3757,  3762,  3764,  3769,  3771,\n-    3776,  3778,  3781,  3783,  3786,  3788,  3791,  3793,  3797,  3799,\n-    3803,  3805,  3808,  3810,  3814,  3816,  3819,  3821,  3822,  3824,\n-    3828,  3830,  3834,  3838,  3840,  3844,  3848,  3849,  3851,  3853,\n-    3855,  3857,  3859,  3861,  3863,  3865,  3867,  3869,  3874,  3878,\n-    3881,  3885,  3886,  3890,  3894,  3897,  3900,  3902,  3903,  3906,\n-    3909,  3913,  3916,  3918,  3920,  3924,  3930,  3932,  3935,  3940,\n-    3943,  3944,  3946,  3947,  3949,  3952,  3956,  3962,  3964,  3965,\n-    3966,  3969,  3970,  3973,  3977,  3981,  3985,  3991,  3992,  3995,\n-    3997,  3998,  4000,  4001,  4003,  4007,  4009,  4012,  4016,  4019,\n-    4021,  4026,  4029,  4031,  4032,  4036,  4038,  4042,  4044,  4047,\n-    4052,  4055,  4056,  4058,  4062,  4064,  4068,  4070,  4073,  4075,\n-    4079,  4081,  4083,  4086,  4088,  4090,  4093,  4095,  4097,  4100,\n-    4108,  4111,  4117,  4121,  4125,  4127,  4129,  4131,  4133,  4135,\n-    4137,  4139,  4141,  4143,  4145,  4147,  4149,  4151,  4153,  4156,\n-    4159,  4163,  4167,  4168,  4170,  4172,  4174,  4180,  4184,  4185,\n-    4187,  4189,  4191,  4193,  4195,  4200,  4208,  4215,  4218,  4219,\n-    4221,  4223,  4225,  4227,  4241,  4258,  4260,  4263,  4264,  4266,\n-    4267,  4269,  4270,  4273,  4274,  4276,  4277,  4284,  4293,  4300,\n-    4309,  4316,  4325,  4329,  4332,  4334,  4335,  4340,  4347,  4351,\n-    4354,  4359,  4363,  4369,  4371,  4372,  4374,  4376,  4377,  4379,\n-    4381,  4383,  4385,  4387,  4389,  4391,  4393,  4395,  4397,  4399,\n-    4401,  4403,  4405,  4407,  4409,  4411,  4413,  4415,  4417,  4419,\n-    4421,  4423,  4425,  4427,  4429,  4431,  4433,  4435,  4437,  4439,\n-    4441,  4443,  4445,  4447,  4449,  4453,  4455,  4457,  4459,  4461,\n-    4463,  4465,  4468,  4470,  4472,  4475,  4479,  4483,  4487,  4489,\n-    4493,  4497,  4500,  4504,  4508,  4512,  4516,  4518,  4520,  4522,\n-    4524,  4528,  4534,  4536,  4538,  4540,  4542,  4546,  4549,  4552,\n-    4556,  4558,  4560,  4565,  4572,  4578,  4583,  4590,  4592,  4594,\n-    4596,  4598,  4600,  4602,  4603,  4605,  4609,  4611,  4612,  4620,\n-    4624,  4626,  4629,  4633,  4636,  4637,  4640,  4641,  4644,  4649,\n-    4655,  4659,  4665,  4667,  4668,  4671,  4672,  4675,  4677,  4679,\n-    4681,  4684,  4688,  4691,  4694,  4697,  4700,  4704,  4709,  4713,\n-    4715,  4717,  4719,  4721,  4722,  4724,  4728,  4730,  4734,  4737,\n-    4747,  4760,  4772,  4785,  4800,  4804,  4809,  4814,  4815,  4823,\n-    4834,  4844,  4847,  4851,  4852,  4857,  4859,  4861,  4863,  4865,\n-    4867,  4869,  4871,  4873,  4875,  4877,  4879,  4881,  4883,  4885,\n-    4887,  4889,  4891,  4893,  4895,  4897,  4899,  4901,  4903,  4905,\n-    4907,  4909,  4911,  4913,  4915,  4917,  4919,  4921,  4923,  4925,\n-    4927,  4929,  4931,  4933,  4935,  4937,  4939,  4941,  4943,  4945,\n-    4947,  4949,  4951,  4953,  4955,  4957,  4959,  4961,  4963,  4965,\n-    4967,  4969,  4971,  4973,  4975,  4977,  4979,  4981,  4983,  4985,\n-    4987,  4989,  4991,  4993,  4995,  4997,  4999,  5001,  5003,  5005,\n-    5007,  5009,  5011,  5013,  5015,  5017,  5019,  5021,  5023,  5025,\n-    5027,  5029,  5031,  5033,  5035,  5037,  5039,  5041,  5043,  5045,\n-    5047,  5049,  5051,  5053,  5055,  5057,  5059,  5061,  5063,  5065,\n-    5067,  5069,  5071,  5073,  5075,  5077,  5079,  5081,  5083,  5085,\n-    5087,  5089,  5091,  5093,  5095,  5097,  5099,  5101,  5103,  5105,\n-    5107,  5109,  5111,  5113,  5115,  5117,  5119,  5121,  5123,  5125,\n-    5127,  5129,  5131,  5133,  5135,  5137,  5139,  5141,  5143,  5145,\n-    5147,  5149,  5151,  5153,  5155,  5157,  5159,  5161,  5163,  5165,\n-    5167,  5169,  5171,  5173,  5175,  5177,  5179,  5181,  5183,  5185,\n-    5187,  5189,  5191,  5193,  5195,  5197,  5199,  5201,  5203,  5205,\n-    5207,  5209,  5211,  5213,  5215,  5217,  5219,  5221,  5223,  5225,\n-    5227,  5229,  5231,  5233,  5235,  5237,  5239,  5241,  5243,  5245,\n-    5247,  5249,  5251,  5253,  5255,  5257,  5259,  5261,  5263,  5265,\n-    5267,  5269,  5271,  5273,  5275,  5277,  5279,  5281,  5283,  5285,\n-    5287,  5289,  5291,  5293,  5295,  5297,  5299,  5301,  5303,  5305,\n-    5307,  5309,  5311,  5313,  5315,  5317,  5319,  5321,  5323,  5325,\n-    5327,  5329,  5331,  5333,  5335,  5337,  5339,  5341,  5343,  5345,\n-    5347,  5349,  5351,  5353,  5355,  5357,  5359,  5361,  5363,  5365,\n-    5367,  5369,  5371,  5373,  5375,  5377,  5379,  5381,  5383,  5385,\n-    5387,  5389,  5391,  5393,  5395,  5397,  5399,  5401,  5403,  5405,\n-    5407,  5409,  5411,  5413,  5415,  5417,  5419,  5421,  5423,  5425,\n-    5427,  5429,  5431,  5433,  5435,  5437,  5439,  5441,  5443,  5445,\n-    5447,  5449,  5451,  5453,  5455,  5457,  5459,  5461,  5463,  5465,\n-    5467,  5469,  5471,  5473,  5475,  5477,  5479,  5481,  5483,  5485,\n-    5487,  5489,  5491,  5493,  5495,  5497,  5499,  5501,  5503,  5505,\n-    5507,  5509,  5511,  5513,  5515,  5517,  5519,  5521,  5523,  5525,\n-    5527,  5529,  5531,  5533,  5535,  5537,  5539,  5541,  5543,  5545,\n-    5547,  5549,  5551,  5553,  5555,  5557,  5559,  5561,  5563,  5565,\n-    5567,  5569,  5571,  5573,  5575,  5577,  5579,  5581,  5583,  5585,\n-    5587,  5589,  5591,  5593,  5595,  5597,  5599,  5601,  5603,  5605,\n-    5607,  5609,  5611,  5613,  5615,  5617,  5619,  5621,  5623,  5625,\n-    5627,  5629,  5631,  5633,  5635,  5637,  5639,  5641,  5643,  5645,\n-    5647,  5649,  5651,  5653,  5655,  5657,  5659,  5661,  5663,  5665,\n-    5667,  5669,  5671,  5673,  5675,  5677,  5679,  5681,  5683,  5685,\n-    5687,  5689,  5691,  5693,  5695,  5697,  5699,  5701,  5703,  5705,\n-    5707,  5709,  5711,  5713,  5715,  5717,  5719,  5721,  5723,  5725,\n-    5727,  5729,  5731,  5733,  5735,  5737,  5739,  5741,  5743,  5745,\n-    5747,  5749,  5751,  5753,  5755,  5757,  5759,  5761,  5763,  5765,\n-    5767,  5769,  5771,  5773,  5775,  5777,  5779,  5781,  5783,  5785,\n-    5787,  5789,  5791,  5793,  5795,  5797,  5799,  5801,  5803,  5805,\n-    5807,  5809,  5811,  5813,  5815,  5817,  5819,  5821,  5823,  5825,\n-    5827,  5829,  5831,  5833,  5835,  5837,  5839,  5841,  5843,  5845,\n-    5847,  5849,  5851,  5853,  5855,  5857,  5859,  5861,  5863,  5865,\n-    5867,  5869,  5871,  5873,  5875,  5877,  5879,  5881,  5883,  5885,\n-    5887,  5889,  5891,  5893,  5895,  5897,  5899,  5901,  5903,  5905,\n-    5907,  5909,  5911,  5913,  5915,  5917,  5919,  5921,  5923,  5925,\n-    5927,  5929,  5931,  5933,  5935,  5937,  5939,  5941,  5943,  5945,\n-    5947,  5949,  5951,  5953,  5955,  5957,  5959,  5961,  5963,  5965,\n-    5967,  5969,  5971,  5973,  5975,  5977,  5979,  5981,  5983,  5985,\n-    5987,  5989,  5991,  5993,  5995,  5997,  5999,  6001,  6003,  6005,\n-    6007,  6009,  6011,  6013,  6015,  6017,  6019,  6021,  6023,  6025,\n-    6027,  6029,  6031,  6033,  6035,  6037,  6039,  6041,  6043,  6045,\n-    6047,  6049,  6051,  6053,  6055,  6057,  6059,  6061,  6063,  6065\n+    1608,  1612,  1614,  1616,  1618,  1622,  1624,  1625,  1628,  1631,\n+    1632,  1635,  1636,  1638,  1639,  1641,  1643,  1645,  1649,  1653,\n+    1655,  1657,  1661,  1665,  1669,  1673,  1677,  1681,  1686,  1690,\n+    1693,  1695,  1697,  1699,  1701,  1703,  1707,  1709,  1711,  1715,\n+    1719,  1721,  1724,  1729,  1734,  1737,  1741,  1747,  1753,  1755,\n+    1757,  1761,  1762,  1774,  1786,  1797,  1810,  1812,  1815,  1821,\n+    1826,  1831,  1836,  1841,  1849,  1855,  1860,  1868,  1875,  1885,\n+    1895,  1900,  1902,  1904,  1906,  1908,  1910,  1912,  1914,  1920,\n+    1922,  1924,  1928,  1930,  1933,  1936,  1939,  1943,  1945,  1949,\n+    1957,  1959,  1962,  1963,  1966,  1967,  1971,  1975,  1980,  1985,\n+    1990,  1995,  1999,  2002,  2004,  2006,  2007,  2009,  2011,  2012,\n+    2015,  2017,  2023,  2025,  2026,  2029,  2032,  2033,  2035,  2036,\n+    2040,  2046,  2048,  2052,  2057,  2061,  2063,  2065,  2066,  2069,\n+    2072,  2073,  2076,  2079,  2081,  2083,  2085,  2086,  2089,  2094,\n+    2100,  2105,  2108,  2112,  2115,  2118,  2121,  2124,  2126,  2129,\n+    2133,  2134,  2136,  2137,  2143,  2145,  2150,  2157,  2160,  2162,\n+    2163,  2168,  2169,  2171,  2173,  2176,  2179,  2182,  2184,  2186,\n+    2189,  2192,  2194,  2196,  2198,  2200,  2202,  2204,  2208,  2212,\n+    2213,  2215,  2219,  2221,  2224,  2226,  2228,  2230,  2232,  2234,\n+    2237,  2242,  2247,  2253,  2255,  2257,  2260,  2261,  2264,  2265,\n+    2267,  2271,  2273,  2274,  2276,  2279,  2283,  2286,  2291,  2294,\n+    2298,  2301,  2302,  2304,  2307,  2308,  2313,  2319,  2321,  2324,\n+    2327,  2328,  2330,  2334,  2336,  2339,  2343,  2347,  2351,  2355,\n+    2359,  2363,  2365,  2370,  2380,  2390,  2394,  2395,  2398,  2401,\n+    2402,  2408,  2412,  2414,  2418,  2424,  2428,  2430,  2433,  2435,\n+    2439,  2445,  2447,  2450,  2454,  2459,  2465,  2470,  2476,  2481,\n+    2488,  2494,  2499,  2505,  2511,  2517,  2520,  2525,  2527,  2529,\n+    2530,  2532,  2537,  2543,  2548,  2549,  2552,  2555,  2558,  2560,\n+    2562,  2564,  2566,  2567,  2572,  2575,  2577,  2580,  2583,  2588,\n+    2591,  2598,  2601,  2603,  2607,  2612,  2613,  2616,  2617,  2620,\n+    2621,  2623,  2627,  2631,  2634,  2635,  2638,  2643,  2645,  2647,\n+    2649,  2650,  2653,  2657,  2663,  2670,  2673,  2677,  2683,  2689,\n+    2695,  2699,  2704,  2705,  2707,  2709,  2711,  2713,  2715,  2718,\n+    2723,  2725,  2727,  2729,  2731,  2734,  2738,  2739,  2741,  2743,\n+    2745,  2747,  2749,  2752,  2755,  2758,  2761,  2764,  2766,  2770,\n+    2771,  2773,  2775,  2777,  2779,  2785,  2788,  2790,  2792,  2794,\n+    2796,  2801,  2803,  2806,  2809,  2811,  2815,  2819,  2822,  2824,\n+    2825,  2831,  2834,  2840,  2843,  2845,  2849,  2853,  2854,  2856,\n+    2858,  2860,  2862,  2864,  2866,  2868,  2870,  2872,  2874,  2876,\n+    2878,  2880,  2882,  2884,  2886,  2888,  2890,  2892,  2894,  2896,\n+    2898,  2900,  2902,  2906,  2910,  2914,  2918,  2922,  2926,  2930,\n+    2931,  2933,  2937,  2941,  2947,  2950,  2953,  2957,  2961,  2965,\n+    2969,  2973,  2977,  2981,  2985,  2989,  2993,  2997,  3001,  3005,\n+    3009,  3013,  3016,  3019,  3023,  3027,  3030,  3033,  3037,  3041,\n+    3047,  3052,  3059,  3063,  3069,  3074,  3081,  3086,  3093,  3099,\n+    3107,  3111,  3114,  3119,  3123,  3126,  3130,  3134,  3138,  3142,\n+    3147,  3151,  3156,  3160,  3165,  3171,  3178,  3185,  3193,  3200,\n+    3208,  3215,  3223,  3227,  3232,  3237,  3244,  3246,  3251,  3255,\n+    3261,  3263,  3267,  3270,  3273,  3277,  3281,  3285,  3289,  3293,\n+    3297,  3301,  3305,  3309,  3313,  3317,  3321,  3325,  3329,  3333,\n+    3336,  3339,  3345,  3352,  3359,  3367,  3369,  3371,  3374,  3376,\n+    3378,  3381,  3384,  3388,  3390,  3393,  3398,  3400,  3402,  3405,\n+    3408,  3413,  3415,  3417,  3421,  3423,  3428,  3430,  3434,  3438,\n+    3445,  3453,  3463,  3471,  3479,  3485,  3487,  3489,  3491,  3497,\n+    3504,  3511,  3516,  3521,  3526,  3531,  3538,  3544,  3550,  3556,\n+    3561,  3568,  3573,  3581,  3591,  3597,  3598,  3604,  3609,  3610,\n+    3612,  3613,  3616,  3617,  3619,  3623,  3627,  3630,  3633,  3634,\n+    3641,  3643,  3644,  3648,  3649,  3652,  3655,  3656,  3658,  3663,\n+    3666,  3669,  3672,  3675,  3678,  3683,  3687,  3689,  3695,  3699,\n+    3701,  3705,  3707,  3710,  3714,  3716,  3720,  3722,  3725,  3727,\n+    3728,  3730,  3732,  3734,  3736,  3738,  3740,  3742,  3744,  3746,\n+    3748,  3750,  3752,  3754,  3756,  3758,  3760,  3762,  3764,  3766,\n+    3768,  3773,  3775,  3780,  3782,  3787,  3789,  3792,  3794,  3797,\n+    3799,  3802,  3804,  3808,  3810,  3814,  3816,  3819,  3821,  3825,\n+    3827,  3830,  3832,  3833,  3835,  3839,  3841,  3845,  3849,  3851,\n+    3855,  3859,  3860,  3862,  3864,  3866,  3868,  3870,  3872,  3874,\n+    3876,  3878,  3880,  3885,  3889,  3892,  3896,  3897,  3901,  3905,\n+    3908,  3911,  3913,  3914,  3917,  3920,  3924,  3927,  3929,  3931,\n+    3935,  3941,  3943,  3946,  3951,  3954,  3955,  3957,  3958,  3960,\n+    3963,  3967,  3973,  3975,  3976,  3977,  3980,  3981,  3984,  3988,\n+    3992,  3996,  4002,  4003,  4006,  4008,  4009,  4011,  4012,  4014,\n+    4018,  4020,  4023,  4027,  4030,  4032,  4037,  4040,  4042,  4043,\n+    4047,  4049,  4053,  4055,  4058,  4063,  4066,  4067,  4069,  4073,\n+    4075,  4079,  4081,  4084,  4086,  4090,  4092,  4094,  4097,  4099,\n+    4101,  4104,  4106,  4108,  4111,  4119,  4122,  4128,  4132,  4136,\n+    4138,  4140,  4142,  4144,  4146,  4148,  4150,  4152,  4154,  4156,\n+    4158,  4160,  4162,  4164,  4167,  4170,  4174,  4178,  4179,  4181,\n+    4183,  4185,  4191,  4195,  4196,  4198,  4200,  4202,  4204,  4206,\n+    4211,  4219,  4226,  4229,  4230,  4232,  4234,  4236,  4238,  4252,\n+    4269,  4271,  4274,  4275,  4277,  4278,  4280,  4281,  4284,  4285,\n+    4287,  4288,  4295,  4304,  4311,  4320,  4327,  4336,  4340,  4343,\n+    4345,  4346,  4351,  4358,  4362,  4365,  4370,  4374,  4380,  4382,\n+    4383,  4385,  4387,  4388,  4390,  4392,  4394,  4396,  4398,  4400,\n+    4402,  4404,  4406,  4408,  4410,  4412,  4414,  4416,  4418,  4420,\n+    4422,  4424,  4426,  4428,  4430,  4432,  4434,  4436,  4438,  4440,\n+    4442,  4444,  4446,  4448,  4450,  4452,  4454,  4456,  4458,  4460,\n+    4464,  4466,  4468,  4470,  4472,  4474,  4476,  4479,  4481,  4483,\n+    4486,  4490,  4494,  4498,  4500,  4504,  4508,  4511,  4515,  4519,\n+    4523,  4527,  4529,  4531,  4533,  4535,  4539,  4545,  4547,  4549,\n+    4551,  4553,  4557,  4560,  4563,  4567,  4569,  4571,  4576,  4583,\n+    4589,  4594,  4601,  4603,  4605,  4607,  4609,  4611,  4613,  4614,\n+    4616,  4620,  4622,  4623,  4631,  4635,  4637,  4640,  4644,  4647,\n+    4648,  4651,  4652,  4655,  4660,  4666,  4670,  4676,  4678,  4679,\n+    4682,  4683,  4686,  4690,  4694,  4698,  4700,  4702,  4704,  4707,\n+    4711,  4714,  4717,  4720,  4723,  4727,  4732,  4736,  4738,  4740,\n+    4742,  4744,  4745,  4747,  4751,  4753,  4757,  4760,  4770,  4783,\n+    4795,  4808,  4823,  4827,  4832,  4837,  4838,  4846,  4857,  4867,\n+    4870,  4874,  4875,  4880,  4882,  4884,  4886,  4888,  4890,  4892,\n+    4894,  4896,  4898,  4900,  4902,  4904,  4906,  4908,  4910,  4912,\n+    4914,  4916,  4918,  4920,  4922,  4924,  4926,  4928,  4930,  4932,\n+    4934,  4936,  4938,  4940,  4942,  4944,  4946,  4948,  4950,  4952,\n+    4954,  4956,  4958,  4960,  4962,  4964,  4966,  4968,  4970,  4972,\n+    4974,  4976,  4978,  4980,  4982,  4984,  4986,  4988,  4990,  4992,\n+    4994,  4996,  4998,  5000,  5002,  5004,  5006,  5008,  5010,  5012,\n+    5014,  5016,  5018,  5020,  5022,  5024,  5026,  5028,  5030,  5032,\n+    5034,  5036,  5038,  5040,  5042,  5044,  5046,  5048,  5050,  5052,\n+    5054,  5056,  5058,  5060,  5062,  5064,  5066,  5068,  5070,  5072,\n+    5074,  5076,  5078,  5080,  5082,  5084,  5086,  5088,  5090,  5092,\n+    5094,  5096,  5098,  5100,  5102,  5104,  5106,  5108,  5110,  5112,\n+    5114,  5116,  5118,  5120,  5122,  5124,  5126,  5128,  5130,  5132,\n+    5134,  5136,  5138,  5140,  5142,  5144,  5146,  5148,  5150,  5152,\n+    5154,  5156,  5158,  5160,  5162,  5164,  5166,  5168,  5170,  5172,\n+    5174,  5176,  5178,  5180,  5182,  5184,  5186,  5188,  5190,  5192,\n+    5194,  5196,  5198,  5200,  5202,  5204,  5206,  5208,  5210,  5212,\n+    5214,  5216,  5218,  5220,  5222,  5224,  5226,  5228,  5230,  5232,\n+    5234,  5236,  5238,  5240,  5242,  5244,  5246,  5248,  5250,  5252,\n+    5254,  5256,  5258,  5260,  5262,  5264,  5266,  5268,  5270,  5272,\n+    5274,  5276,  5278,  5280,  5282,  5284,  5286,  5288,  5290,  5292,\n+    5294,  5296,  5298,  5300,  5302,  5304,  5306,  5308,  5310,  5312,\n+    5314,  5316,  5318,  5320,  5322,  5324,  5326,  5328,  5330,  5332,\n+    5334,  5336,  5338,  5340,  5342,  5344,  5346,  5348,  5350,  5352,\n+    5354,  5356,  5358,  5360,  5362,  5364,  5366,  5368,  5370,  5372,\n+    5374,  5376,  5378,  5380,  5382,  5384,  5386,  5388,  5390,  5392,\n+    5394,  5396,  5398,  5400,  5402,  5404,  5406,  5408,  5410,  5412,\n+    5414,  5416,  5418,  5420,  5422,  5424,  5426,  5428,  5430,  5432,\n+    5434,  5436,  5438,  5440,  5442,  5444,  5446,  5448,  5450,  5452,\n+    5454,  5456,  5458,  5460,  5462,  5464,  5466,  5468,  5470,  5472,\n+    5474,  5476,  5478,  5480,  5482,  5484,  5486,  5488,  5490,  5492,\n+    5494,  5496,  5498,  5500,  5502,  5504,  5506,  5508,  5510,  5512,\n+    5514,  5516,  5518,  5520,  5522,  5524,  5526,  5528,  5530,  5532,\n+    5534,  5536,  5538,  5540,  5542,  5544,  5546,  5548,  5550,  5552,\n+    5554,  5556,  5558,  5560,  5562,  5564,  5566,  5568,  5570,  5572,\n+    5574,  5576,  5578,  5580,  5582,  5584,  5586,  5588,  5590,  5592,\n+    5594,  5596,  5598,  5600,  5602,  5604,  5606,  5608,  5610,  5612,\n+    5614,  5616,  5618,  5620,  5622,  5624,  5626,  5628,  5630,  5632,\n+    5634,  5636,  5638,  5640,  5642,  5644,  5646,  5648,  5650,  5652,\n+    5654,  5656,  5658,  5660,  5662,  5664,  5666,  5668,  5670,  5672,\n+    5674,  5676,  5678,  5680,  5682,  5684,  5686,  5688,  5690,  5692,\n+    5694,  5696,  5698,  5700,  5702,  5704,  5706,  5708,  5710,  5712,\n+    5714,  5716,  5718,  5720,  5722,  5724,  5726,  5728,  5730,  5732,\n+    5734,  5736,  5738,  5740,  5742,  5744,  5746,  5748,  5750,  5752,\n+    5754,  5756,  5758,  5760,  5762,  5764,  5766,  5768,  5770,  5772,\n+    5774,  5776,  5778,  5780,  5782,  5784,  5786,  5788,  5790,  5792,\n+    5794,  5796,  5798,  5800,  5802,  5804,  5806,  5808,  5810,  5812,\n+    5814,  5816,  5818,  5820,  5822,  5824,  5826,  5828,  5830,  5832,\n+    5834,  5836,  5838,  5840,  5842,  5844,  5846,  5848,  5850,  5852,\n+    5854,  5856,  5858,  5860,  5862,  5864,  5866,  5868,  5870,  5872,\n+    5874,  5876,  5878,  5880,  5882,  5884,  5886,  5888,  5890,  5892,\n+    5894,  5896,  5898,  5900,  5902,  5904,  5906,  5908,  5910,  5912,\n+    5914,  5916,  5918,  5920,  5922,  5924,  5926,  5928,  5930,  5932,\n+    5934,  5936,  5938,  5940,  5942,  5944,  5946,  5948,  5950,  5952,\n+    5954,  5956,  5958,  5960,  5962,  5964,  5966,  5968,  5970,  5972,\n+    5974,  5976,  5978,  5980,  5982,  5984,  5986,  5988,  5990,  5992,\n+    5994,  5996,  5998,  6000,  6002,  6004,  6006,  6008,  6010,  6012,\n+    6014,  6016,  6018,  6020,  6022,  6024,  6026,  6028,  6030,  6032,\n+    6034,  6036,  6038,  6040,  6042,  6044,  6046,  6048,  6050,  6052,\n+    6054,  6056,  6058,  6060,  6062,  6064,  6066,  6068,  6070,  6072,\n+    6074,  6076,  6078,  6080,  6082,  6084,  6086,  6088\n };\n \n /* YYRHS -- A `-1'-separated list of the rules' RHS.  */\n static const yytype_int16 yyrhs[] =\n {\n      512,     0,    -1,   513,    -1,   513,   503,   514,    -1,   514,\n-      -1,   889,    -1,   566,    -1,   515,    -1,   922,    -1,   923,\n-      -1,   935,    -1,   890,    -1,   635,    -1,   938,    -1,   631,\n-      -1,   879,    -1,   562,    -1,   576,    -1,   558,    -1,   526,\n-      -1,   918,    -1,   924,    -1,   624,    -1,   564,    -1,   894,\n-      -1,   892,    -1,   893,    -1,   882,    -1,   537,    -1,   911,\n-      -1,   561,    -1,   876,    -1,   535,    -1,   652,    -1,   573,\n-      -1,   634,    -1,   575,    -1,   913,    -1,   927,    -1,   905,\n-      -1,   930,    -1,   936,    -1,    -1,    32,   405,   738,   523,\n-      -1,    32,   405,   186,   148,   738,   523,    -1,    32,   197,\n+      -1,   891,    -1,   566,    -1,   515,    -1,   924,    -1,   925,\n+      -1,   937,    -1,   892,    -1,   635,    -1,   940,    -1,   631,\n+      -1,   881,    -1,   562,    -1,   576,    -1,   558,    -1,   526,\n+      -1,   920,    -1,   926,    -1,   624,    -1,   564,    -1,   896,\n+      -1,   894,    -1,   895,    -1,   884,    -1,   537,    -1,   913,\n+      -1,   561,    -1,   878,    -1,   535,    -1,   652,    -1,   573,\n+      -1,   634,    -1,   575,    -1,   915,    -1,   929,    -1,   907,\n+      -1,   932,    -1,   938,    -1,    -1,    32,   405,   739,   523,\n+      -1,    32,   405,   186,   148,   739,   523,    -1,    32,   197,\n      527,   523,    -1,    32,   197,   186,   148,   527,   523,    -1,\n       32,   370,   527,   523,    -1,    32,   370,   186,   148,   527,\n      523,    -1,    32,   454,   527,   523,    -1,    32,   454,   186,\n      148,   527,   523,    -1,   518,    -1,   516,   518,    -1,   375,\n-     113,   781,    -1,   133,   113,    -1,   347,    -1,   347,   568,\n+     113,   782,    -1,   133,   113,    -1,   347,    -1,   347,   568,\n      569,    -1,   375,   570,    -1,   375,   171,   623,    -1,   522,\n       -1,   519,   504,   522,    -1,    26,   603,    -1,    26,   186,\n      267,   148,   603,    -1,    26,    80,   603,    -1,    26,    80,\n@@ -1867,87 +1869,87 @@ static const yytype_int16 yyrhs[] =\n       32,   536,   528,   516,    -1,    32,   536,   528,   133,   185,\n       -1,    32,   536,   528,   133,   185,   186,   148,    -1,   133,\n      536,   186,   148,   528,   628,    -1,   133,   536,   528,   628,\n-      -1,    32,   536,   528,   525,   427,   751,   747,   521,    -1,\n+      -1,    32,   536,   528,   525,   427,   752,   748,   521,    -1,\n       32,   536,   528,   524,    -1,    26,   593,    -1,    32,    91,\n-     864,   577,    -1,   445,    91,   864,    -1,   133,    91,   186,\n-     148,   864,   628,    -1,   133,    91,   864,   628,    -1,   375,\n+     866,   577,    -1,   445,    91,   866,    -1,   133,    91,   186,\n+     148,   866,   628,    -1,   133,    91,   866,   628,    -1,   375,\n      239,    -1,   375,   436,    -1,   375,   591,    -1,   345,   591,\n-      -1,   524,    -1,   442,   781,    -1,    -1,   587,    -1,   375,\n+      -1,   524,    -1,   442,   782,    -1,    -1,   587,    -1,   375,\n      587,    -1,    26,   587,    -1,   133,   601,    -1,   520,    -1,\n      523,   504,   520,    -1,   286,   500,   519,   501,    -1,   375,\n-     105,    -1,   375,    -1,    -1,   109,   864,    -1,   109,   316,\n-     864,    -1,   109,    30,    -1,   109,   316,    30,    -1,   529,\n-      -1,   528,   531,    -1,     3,    -1,   941,    -1,   942,    -1,\n+     105,    -1,   375,    -1,    -1,   109,   866,    -1,   109,   316,\n+     866,    -1,   109,    30,    -1,   109,   316,    30,    -1,   529,\n+      -1,   528,   531,    -1,     3,    -1,   943,    -1,   944,    -1,\n      528,    -1,     5,    -1,     5,    -1,   532,    -1,   531,   532,\n-      -1,   502,   533,    -1,   534,    -1,     3,    -1,   945,    -1,\n-     941,    -1,   947,    -1,    32,   361,   864,   341,   416,   864,\n-      -1,    32,   405,   738,   341,   416,   864,    -1,    32,   405,\n-     186,   148,   738,   341,   416,   864,    -1,    32,   370,   527,\n-     341,   416,   864,    -1,    32,   370,   186,   148,   527,   341,\n-     416,   864,    -1,    32,   454,   527,   341,   416,   864,    -1,\n-      32,   454,   186,   148,   527,   341,   416,   864,    -1,    32,\n-     197,   527,   341,   416,   864,    -1,    32,   197,   186,   148,\n-     527,   341,   416,   864,    -1,    32,   405,   738,   341,   536,\n-     864,   416,   864,    -1,    32,   405,   186,   148,   738,   341,\n-     536,   864,   416,   864,    -1,    32,   405,   738,   341,    91,\n-     864,   416,   864,    -1,    32,   405,   186,   148,   738,   341,\n-      91,   864,   416,   864,    -1,    80,    -1,    -1,   542,   207,\n+      -1,   502,   533,    -1,   534,    -1,     3,    -1,   947,    -1,\n+     943,    -1,   949,    -1,    32,   361,   866,   341,   416,   866,\n+      -1,    32,   405,   739,   341,   416,   866,    -1,    32,   405,\n+     186,   148,   739,   341,   416,   866,    -1,    32,   370,   527,\n+     341,   416,   866,    -1,    32,   370,   186,   148,   527,   341,\n+     416,   866,    -1,    32,   454,   527,   341,   416,   866,    -1,\n+      32,   454,   186,   148,   527,   341,   416,   866,    -1,    32,\n+     197,   527,   341,   416,   866,    -1,    32,   197,   186,   148,\n+     527,   341,   416,   866,    -1,    32,   405,   739,   341,   536,\n+     866,   416,   866,    -1,    32,   405,   186,   148,   739,   341,\n+     536,   866,   416,   866,    -1,    32,   405,   739,   341,    91,\n+     866,   416,   866,    -1,    32,   405,   186,   148,   739,   341,\n+      91,   866,   416,   866,    -1,    80,    -1,    -1,   542,   207,\n      545,   214,   539,   540,   538,   546,   548,    -1,   652,    -1,\n      295,   549,   447,   652,    -1,   500,   553,   501,   652,    -1,\n      500,   553,   501,   295,   549,   447,   652,    -1,   113,   448,\n       -1,   527,    -1,   527,    40,   528,    -1,    59,   258,    -1,\n-      59,   311,    -1,    -1,   500,   556,   501,   744,    -1,   282,\n-      91,   864,    -1,    -1,   664,    -1,    -1,   528,   845,    -1,\n-     557,   489,   781,    -1,   500,   550,   501,   489,   781,    -1,\n+      59,   311,    -1,    -1,   500,   556,   501,   745,    -1,   282,\n+      91,   866,    -1,    -1,   664,    -1,    -1,   528,   847,    -1,\n+     557,   489,   782,    -1,   500,   550,   501,   489,   782,    -1,\n      287,   343,    -1,   287,   187,    -1,    -1,   282,    89,   541,\n-     129,   439,   375,   555,   744,    -1,   282,    89,   541,   129,\n-     268,    -1,    -1,   528,   551,   552,   679,   680,    -1,   788,\n-     551,   552,   679,   680,    -1,   500,   781,   501,   551,   552,\n-     679,   680,    -1,   349,   851,    -1,    -1,   441,    -1,   404,\n-      -1,   557,    -1,   550,   504,   557,    -1,    78,   871,    -1,\n-      -1,   871,    -1,    -1,   543,    -1,   553,   504,   543,    -1,\n+     129,   439,   375,   555,   745,    -1,   282,    89,   541,   129,\n+     268,    -1,    -1,   528,   551,   552,   680,   681,    -1,   790,\n+     551,   552,   680,   681,    -1,   500,   782,   501,   551,   552,\n+     680,   681,    -1,   349,   853,    -1,    -1,   441,    -1,   404,\n+      -1,   557,    -1,   550,   504,   557,    -1,    78,   873,    -1,\n+      -1,   873,    -1,    -1,   543,    -1,   553,   504,   543,    -1,\n      544,    -1,   554,   504,   544,    -1,   554,    -1,   554,   504,\n-      -1,   547,    -1,   556,   504,   547,    -1,   528,   845,    -1,\n+      -1,   547,    -1,   556,   504,   547,    -1,   528,   847,    -1,\n       98,   427,   527,    40,   140,   653,    -1,    98,   427,   527,\n       40,   140,   500,   559,   501,    -1,    98,   427,   527,    40,\n-     751,    -1,   560,    -1,    -1,   530,    -1,   560,   504,   530,\n-      -1,   313,   528,    -1,   313,   528,   489,   910,    -1,   313,\n-     528,   500,   825,   501,    -1,    98,   622,   370,   527,   563,\n+     752,    -1,   560,    -1,    -1,   530,    -1,   560,   504,   530,\n+      -1,   313,   528,    -1,   313,   528,   489,   912,    -1,   313,\n+     528,   500,   827,   501,    -1,    98,   622,   370,   527,   563,\n       -1,    98,   622,   370,   186,   267,   148,   527,   563,    -1,\n       98,   287,   343,   622,   370,   527,   563,    -1,   567,    -1,\n-      -1,   147,   864,   565,    -1,    98,   622,   405,   940,    40,\n-     147,   864,   565,   939,    -1,    98,   622,   405,   186,   267,\n-     148,   940,    40,   147,   864,   565,   939,    -1,   500,   823,\n+      -1,   147,   866,   565,    -1,    98,   622,   405,   942,    40,\n+     147,   866,   565,   941,    -1,    98,   622,   405,   186,   267,\n+     148,   942,    40,   147,   866,   565,   941,    -1,   500,   825,\n      501,    -1,    -1,    32,   370,   527,   567,    -1,    32,   370,\n      186,   148,   527,   567,    -1,   570,    -1,   567,   570,    -1,\n      462,    -1,   486,    -1,    -1,     4,    -1,   491,     4,    -1,\n-     492,     4,    -1,   572,    -1,    40,   753,    -1,    60,   569,\n+     492,     4,    -1,   572,    -1,    40,   754,    -1,    60,   569,\n       -1,   104,    -1,   265,   104,    -1,   196,   571,   569,    -1,\n      245,   569,    -1,   253,   569,    -1,   265,   245,    -1,   265,\n-     253,    -1,   296,    59,   871,    -1,   370,   258,   871,    -1,\n+     253,    -1,   296,    59,   873,    -1,   370,   258,   873,    -1,\n      389,   568,   569,    -1,   347,    -1,   347,   568,   569,    -1,\n-      59,    -1,    -1,   867,    -1,   491,   867,    -1,   492,   867,\n+      59,    -1,    -1,   869,    -1,   491,   869,    -1,   492,   869,\n       -1,    22,   574,    -1,    52,   574,    -1,   389,   574,    -1,\n       84,   574,    -1,   139,   574,    -1,   354,   574,    -1,   465,\n       -1,   418,    -1,    -1,   440,   527,    -1,    98,   622,   405,\n      527,   500,   609,   501,   598,   590,    -1,    98,   622,   405,\n      186,   267,   148,   527,   500,   609,   501,   598,   590,    -1,\n       98,   287,   343,   622,   405,   527,   500,   609,   501,   598,\n-     590,    -1,    -1,   577,   602,    -1,   617,    -1,   947,    -1,\n-     817,    -1,   569,    -1,   530,    -1,   266,    -1,   500,   567,\n+     590,    -1,    -1,   577,   602,    -1,   617,    -1,   949,    -1,\n+     819,    -1,   569,    -1,   530,    -1,   266,    -1,   500,   567,\n      501,    -1,    -1,   530,    -1,   265,    25,    -1,   348,    -1,\n-      63,    -1,   375,   272,    -1,   375,   113,    -1,    91,   864,\n-     583,    -1,   583,    -1,   597,    -1,    78,   871,    -1,   267,\n+      63,    -1,   375,   272,    -1,   375,   113,    -1,    91,   866,\n+     583,    -1,   583,    -1,   597,    -1,    78,   873,    -1,   267,\n      272,    -1,   272,    -1,   433,   608,    -1,   319,   221,   608,\n-      -1,    72,   500,   781,   501,   592,    -1,   442,    86,   864,\n-      -1,   113,   782,    -1,   335,   527,   611,   620,   589,    -1,\n+      -1,    72,   500,   782,   501,   592,    -1,   442,    86,   866,\n+      -1,   113,   783,    -1,   335,   527,   611,   620,   589,    -1,\n      456,    -1,   395,    -1,   584,    -1,    -1,   171,   623,    40,\n-     185,   579,    -1,   171,   623,    40,   500,   781,   501,   585,\n-      -1,    40,   500,   781,   501,   585,    -1,   601,   580,    -1,\n+     185,   579,    -1,   171,   623,    40,   500,   782,   501,   585,\n+      -1,    40,   500,   782,   501,   585,    -1,   601,   580,    -1,\n      282,   439,   581,    -1,   588,    -1,   613,    -1,   588,   613,\n       -1,   613,   588,    -1,    -1,   282,    84,   133,    -1,   282,\n       84,   118,   357,    -1,   282,    84,   318,   357,    -1,    -1,\n-     500,   595,   501,    -1,   265,   199,    -1,    -1,    91,   864,\n+     500,   595,   501,    -1,   265,   199,    -1,    -1,    91,   866,\n      618,    -1,   618,    -1,    83,    -1,    92,    -1,   114,    -1,\n      185,    -1,   198,    -1,   391,    -1,   394,    -1,    30,    -1,\n      614,    -1,   595,   504,   614,    -1,   442,   197,   605,    -1,\n@@ -1956,7 +1958,7 @@ static const yytype_int16 yyrhs[] =\n       -1,   500,   604,   501,    -1,   600,   195,   594,    -1,   600,\n      145,   594,    -1,    -1,   534,    -1,   267,   115,    -1,   115,\n       -1,   201,   189,    -1,   201,   116,    -1,   267,   444,    -1,\n-     265,   199,    -1,   528,   751,   612,    -1,   528,   750,   586,\n+     265,   199,    -1,   528,   752,   612,    -1,   528,   751,   586,\n      612,    -1,   607,    -1,   604,   504,   607,    -1,   528,    -1,\n      603,    -1,   621,    -1,   593,    -1,   534,   489,   578,    -1,\n      534,    -1,   462,   599,    -1,    -1,   619,    -1,   619,   504,\n@@ -1964,8 +1966,8 @@ static const yytype_int16 yyrhs[] =\n      582,    -1,    -1,   282,   118,   581,    -1,   534,   489,   578,\n       -1,   534,    -1,   534,   502,   534,   489,   578,    -1,   534,\n      502,   534,    -1,   610,    -1,   615,   504,   610,    -1,   615,\n-      -1,   615,   504,    -1,   751,    -1,   868,   872,   495,   427,\n-      -1,   376,   868,   872,   495,   427,    -1,    72,   500,   781,\n+      -1,   615,   504,    -1,   752,    -1,   870,   874,   495,   427,\n+      -1,   376,   870,   874,   495,   427,    -1,    72,   500,   782,\n      501,   577,    -1,   433,   500,   616,   501,   608,   577,    -1,\n      433,   596,   577,    -1,   319,   221,   500,   616,   501,   608,\n      577,    -1,   319,   221,   596,   577,    -1,   164,   221,   500,\n@@ -1975,488 +1977,490 @@ static const yytype_int16 yyrhs[] =\n       -1,   409,    -1,   235,   411,    -1,   235,   409,    -1,   173,\n      411,    -1,   173,   409,    -1,   436,    -1,    -1,    33,    -1,\n       59,   113,    -1,   133,   625,   186,   148,   627,   628,    -1,\n-     133,   625,   627,   628,    -1,   133,   626,   186,   148,   861,\n-     628,    -1,   133,   626,   861,   628,    -1,   133,   629,   864,\n-     282,   871,   628,    -1,   133,   629,   186,   148,   864,   282,\n-     871,   628,    -1,   133,   427,   630,   628,    -1,   133,   427,\n+     133,   625,   627,   628,    -1,   133,   626,   186,   148,   863,\n+     628,    -1,   133,   626,   863,   628,    -1,   133,   629,   866,\n+     282,   873,   628,    -1,   133,   629,   186,   148,   866,   282,\n+     873,   628,    -1,   133,   427,   630,   628,    -1,   133,   427,\n      186,   148,   630,   628,    -1,   405,    -1,   370,    -1,   169,\n       -1,   240,    -1,   240,   405,    -1,   454,    -1,   244,   454,\n       -1,   197,    -1,   164,   405,    -1,    79,    -1,    95,    -1,\n      361,    -1,   391,    -1,   412,   364,   299,    -1,   412,   364,\n      125,    -1,   412,   364,   410,    -1,   412,   364,    88,    -1,\n       24,   246,    -1,   142,   421,    -1,   152,    -1,   164,   105,\n-     466,    -1,   325,    -1,   373,    -1,   871,    -1,   627,   504,\n-     871,    -1,    63,    -1,   348,    -1,    -1,   310,    -1,   358,\n-      -1,   421,    -1,   751,    -1,   630,   504,   751,    -1,    98,\n+     466,    -1,   325,    -1,   373,    -1,   873,    -1,   627,   504,\n+     873,    -1,    63,    -1,   348,    -1,    -1,   310,    -1,   358,\n+      -1,   421,    -1,   752,    -1,   630,   504,   752,    -1,    98,\n      622,   632,   527,   633,    40,   405,   652,    -1,    98,   622,\n      632,   186,   267,   148,   527,   633,    40,   405,   652,    -1,\n       98,   287,   343,   622,   632,   527,   633,    40,   405,   652,\n-      -1,    98,   622,   632,   527,   633,    40,   781,    -1,    98,\n-     622,   632,   186,   267,   148,   527,   633,    40,   781,    -1,\n-      98,   287,   343,   622,   632,   527,   633,    40,   781,    -1,\n-     169,    -1,   240,    -1,   500,   501,    -1,   500,   825,   501,\n-      -1,   542,   439,   919,   375,   555,   718,   920,   548,    -1,\n+      -1,    98,   622,   632,   527,   633,    40,   782,    -1,    98,\n+     622,   632,   186,   267,   148,   527,   633,    40,   782,    -1,\n+      98,   287,   343,   622,   632,   527,   633,    40,   782,    -1,\n+     169,    -1,   240,    -1,   500,   501,    -1,   500,   827,   501,\n+      -1,   542,   439,   921,   375,   555,   719,   922,   548,    -1,\n       96,   647,   527,   611,   645,   636,   641,   650,   637,   568,\n      642,    -1,    96,   500,   652,   501,   416,   641,   650,   568,\n      642,    -1,   167,    -1,   416,    -1,   639,   120,   530,    -1,\n       -1,   649,    -1,   638,   504,   649,    -1,   442,    -1,    -1,\n       40,    -1,    -1,   324,    -1,    -1,   646,    -1,   500,   651,\n-     501,    -1,   902,    -1,   569,    -1,   493,    -1,   500,   638,\n-     501,    -1,    -1,   534,   643,    -1,   462,   280,    -1,    -1,\n-     646,   648,    -1,    -1,    55,    -1,    -1,    55,    -1,   280,\n-      -1,   166,    -1,   119,   640,   530,    -1,   272,   640,   530,\n-      -1,   100,    -1,   181,    -1,   327,   640,   530,    -1,   141,\n-     640,   530,    -1,   163,   327,   615,    -1,   163,   327,   493,\n-      -1,   301,    59,   615,    -1,   301,    59,   493,    -1,   163,\n-     267,   272,   615,    -1,   163,   272,   615,    -1,   137,   530,\n-      -1,   902,    -1,   530,    -1,   392,    -1,   393,    -1,   644,\n-      -1,   651,   504,   644,    -1,   654,    -1,   653,    -1,   500,\n-     654,   501,    -1,   500,   653,   501,    -1,   657,    -1,   655,\n-     676,    -1,   655,   675,   709,   682,    -1,   655,   675,   681,\n-     710,    -1,   664,   655,    -1,   664,   655,   676,    -1,   664,\n-     655,   675,   709,   682,    -1,   664,   655,   675,   681,   710,\n-      -1,   657,    -1,   653,    -1,   368,   673,   850,    -1,    -1,\n-     368,   673,   850,   667,   718,   744,   698,   707,   794,   708,\n-     686,    -1,   368,   672,   852,   667,   718,   744,   698,   707,\n-     794,   708,   686,    -1,   167,   719,   656,   667,   744,   698,\n-     707,   794,   708,   686,    -1,   167,   719,   368,   672,   852,\n-     667,   744,   698,   707,   794,   708,   686,    -1,   717,    -1,\n-     405,   738,    -1,   655,   432,   670,   671,   655,    -1,   655,\n-     432,   670,   655,    -1,   655,   212,   670,   655,    -1,   655,\n-     143,   670,   655,    -1,   659,   721,   442,   852,    -1,   659,\n-     721,   442,   852,   176,    59,   863,    -1,   659,   721,   176,\n-      59,   863,    -1,   659,   721,   282,   663,    -1,   659,   721,\n-     282,   663,   176,    59,   863,    -1,   659,   721,   282,   663,\n-     442,   852,    -1,   659,   721,   282,   663,   442,   852,   176,\n-      59,   863,    -1,   660,   721,   282,   852,   214,   258,   864,\n-     658,   863,    -1,   660,   721,   282,   852,    -1,   447,    -1,\n-     448,    -1,   305,    -1,   307,    -1,   437,    -1,   306,    -1,\n-     782,    -1,   782,   193,   500,   654,   501,    -1,   724,    -1,\n-     661,    -1,   662,   504,   661,    -1,   662,    -1,   662,   504,\n-      -1,   462,   665,    -1,   486,   665,    -1,   462,   333,   665,\n-      -1,   666,    -1,   665,   504,   666,    -1,   864,   873,    40,\n-     500,   878,   501,    -1,   214,   668,    -1,    -1,   411,   669,\n-     527,    -1,   409,   669,   527,    -1,   235,   411,   669,   527,\n-      -1,   235,   409,   669,   527,    -1,   173,   411,   669,   527,\n-      -1,   173,   409,   669,   527,    -1,   436,   669,   527,    -1,\n-     405,   527,    -1,   527,    -1,   405,    -1,    -1,    30,    -1,\n-     128,    -1,    -1,    59,   258,    -1,   128,    -1,   128,   282,\n-     500,   823,   501,    -1,    30,    -1,    -1,   187,   274,    -1,\n-     346,   274,    -1,    -1,   676,    -1,    -1,   288,    59,   677,\n-      -1,   288,    59,    30,   679,   680,    -1,   678,    -1,   677,\n-     504,   678,    -1,   781,   442,   817,   680,    -1,   781,   679,\n-     680,    -1,    41,    -1,   122,    -1,    -1,   485,   159,    -1,\n-     485,   225,    -1,    -1,   683,   684,    -1,   684,   683,    -1,\n-     683,    -1,   684,    -1,   681,    -1,    -1,   232,   692,    -1,\n-     232,   692,   504,   693,    -1,   157,   697,   694,   696,   283,\n-      -1,   157,   697,   696,   283,    -1,   279,   693,    -1,   279,\n-     694,   696,    -1,     4,   495,    -1,     9,   495,    -1,     4,\n-     304,    -1,     9,   304,    -1,     9,    -1,     9,   357,    -1,\n-     442,   359,   688,    -1,    -1,   528,    -1,    -1,   687,   500,\n-     685,   501,   691,    -1,   685,    -1,   685,   500,   528,   501,\n-      -1,   685,   500,   528,   504,     9,   501,    -1,   407,   688,\n-      -1,   689,    -1,    -1,   342,   500,     9,   501,    -1,    -1,\n-     781,    -1,    30,    -1,   781,   495,    -1,     4,   304,    -1,\n-       9,   304,    -1,   781,    -1,   783,    -1,   491,   695,    -1,\n-     492,   695,    -1,   867,    -1,     4,    -1,   356,    -1,   357,\n-      -1,   159,    -1,   264,    -1,   176,    59,   700,    -1,   176,\n-      59,    30,    -1,    -1,   701,    -1,   699,   504,   701,    -1,\n-     699,    -1,   699,   504,    -1,   781,    -1,   702,    -1,   704,\n-      -1,   703,    -1,   705,    -1,   500,   501,    -1,   355,   500,\n-     823,   501,    -1,   101,   500,   823,   501,    -1,   177,   377,\n-     500,   700,   501,    -1,   177,    -1,   178,    -1,   180,   781,\n-      -1,    -1,   326,   781,    -1,    -1,   711,    -1,   162,   329,\n-     283,    -1,   709,    -1,    -1,   712,    -1,   711,   712,    -1,\n-     713,   714,   715,    -1,   162,   439,    -1,   162,   265,   221,\n-     439,    -1,   162,   378,    -1,   162,   221,   378,    -1,   277,\n-     860,    -1,    -1,   271,    -1,   382,   238,    -1,    -1,   448,\n-     500,   823,   501,    -1,   716,   504,   500,   823,   501,    -1,\n-     716,    -1,   716,   504,    -1,   167,   720,    -1,    -1,   721,\n-      -1,   719,   504,   721,    -1,   719,    -1,   719,   504,    -1,\n-     738,   733,   690,    -1,   739,   734,   690,    -1,   717,   732,\n-     690,    -1,   226,   739,   734,    -1,   653,   733,   690,    -1,\n-     226,   653,   733,    -1,   731,    -1,   500,   731,   501,   732,\n-      -1,   721,   305,   500,   852,   162,   727,   722,   501,   733,\n-      -1,   721,   437,   723,   500,   728,   162,   730,   501,   733,\n-      -1,   176,    59,   862,    -1,    -1,   194,   274,    -1,   144,\n-     274,    -1,    -1,   782,   193,   500,   852,   501,    -1,   782,\n-     193,   529,    -1,   784,    -1,   500,   821,   501,    -1,   725,\n-     193,   500,   852,   501,    -1,   725,   193,   529,    -1,   726,\n-      -1,   727,   726,    -1,   529,    -1,   500,   862,   501,    -1,\n-     728,   193,   500,   852,   501,    -1,   729,    -1,   730,   729,\n-      -1,   500,   731,   501,    -1,   721,    99,   219,   721,    -1,\n-     721,   735,   219,   721,   737,    -1,   721,   219,   721,   737,\n-      -1,   721,   261,   735,   219,   721,    -1,   721,   261,   219,\n-     721,    -1,   721,    42,   735,   219,   721,   737,    -1,   721,\n-      42,   219,   721,   737,    -1,   721,   312,   219,   721,    -1,\n-     721,    37,   219,   721,   737,    -1,   721,   369,   219,   721,\n-     737,    -1,    40,   529,   500,   862,   501,    -1,    40,   529,\n-      -1,   528,   500,   862,   501,    -1,   528,    -1,   732,    -1,\n-      -1,   732,    -1,    40,   500,   745,   501,    -1,    40,   529,\n-     500,   745,   501,    -1,   528,   500,   745,   501,    -1,    -1,\n-     168,   736,    -1,   229,   736,    -1,   352,   736,    -1,   369,\n-      -1,    37,    -1,   203,    -1,   291,    -1,    -1,   442,   500,\n-     862,   501,    -1,   282,   781,    -1,   527,    -1,   527,   493,\n-      -1,   283,   527,    -1,   283,   500,   527,   501,    -1,   788,\n-     743,    -1,   357,   167,   500,   741,   501,   743,    -1,   788,\n-     742,    -1,   740,    -1,   741,   504,   740,    -1,    40,   500,\n-     745,   501,    -1,    -1,   486,   289,    -1,    -1,   459,   781,\n-      -1,    -1,   746,    -1,   745,   504,   746,    -1,   529,   751,\n-     747,    -1,    78,   871,    -1,    -1,   528,   751,    -1,   748,\n-     504,   528,   751,    -1,   356,    -1,   398,    -1,   751,    -1,\n-      -1,   753,   752,    -1,   376,   753,   752,    -1,   753,    39,\n-     498,   867,   499,    -1,   376,   753,    39,   498,   867,   499,\n-      -1,   753,    39,    -1,   376,   753,    39,    -1,   749,   500,\n-     748,   501,   752,    -1,   241,   500,   827,   501,   752,    -1,\n-     432,   500,   748,   501,   752,    -1,   752,   498,   499,    -1,\n-     752,   498,   867,   499,    -1,    -1,   755,    -1,   757,    -1,\n-     759,    -1,   763,    -1,   769,    -1,   770,   780,    -1,   770,\n-     500,   867,   501,    -1,   757,    -1,   760,    -1,   764,    -1,\n-     769,    -1,   870,   756,    -1,   500,   824,   501,    -1,    -1,\n-     210,    -1,   211,    -1,   383,    -1,    54,    -1,   330,    -1,\n-     160,   758,    -1,   132,   315,    -1,   111,   756,    -1,   110,\n-     756,    -1,   275,   756,    -1,    57,    -1,   500,   867,   501,\n-      -1,    -1,   761,    -1,   762,    -1,   761,    -1,   762,    -1,\n-      56,   768,   500,   823,   501,    -1,    56,   768,    -1,   765,\n-      -1,   766,    -1,   765,    -1,   766,    -1,   767,   500,   867,\n-     501,    -1,   767,    -1,    70,   768,    -1,    69,   768,    -1,\n-     449,    -1,   260,    70,   768,    -1,   260,    69,   768,    -1,\n-     262,   768,    -1,   451,    -1,    -1,   415,   500,   867,   501,\n-     771,    -1,   415,   771,    -1,   414,   500,   867,   501,   771,\n-      -1,   414,   771,    -1,   213,    -1,   486,   414,   483,    -1,\n-     464,   414,   483,    -1,    -1,   480,    -1,   481,    -1,   255,\n-      -1,   256,    -1,   107,    -1,   108,    -1,   183,    -1,   184,\n-      -1,   251,    -1,   252,    -1,   365,    -1,   366,    -1,   249,\n-      -1,   250,    -1,   247,    -1,   248,    -1,   772,    -1,   773,\n-      -1,   774,    -1,   775,    -1,   776,    -1,   777,    -1,   778,\n-      -1,   779,    -1,   772,   416,   773,    -1,   774,   416,   775,\n-      -1,   774,   416,   776,    -1,   774,   416,   777,    -1,   775,\n-     416,   776,    -1,   775,   416,   777,    -1,   776,   416,   777,\n-      -1,    -1,   783,    -1,   781,    11,   751,    -1,   781,    78,\n-     871,    -1,   781,    46,   414,   483,   781,    -1,   491,   781,\n-      -1,   492,   781,    -1,   781,   491,   781,    -1,   781,   492,\n-     781,    -1,   781,   493,   781,    -1,   781,   494,   781,    -1,\n-     781,    15,   781,    -1,   781,   495,   781,    -1,   781,   496,\n-     781,    -1,   781,    16,   781,    -1,   781,   487,   781,    -1,\n-     781,   488,   781,    -1,   781,   489,   781,    -1,   781,    19,\n-     781,    -1,   781,    20,   781,    -1,   781,    21,   781,    -1,\n-     781,   816,   781,    -1,   816,   781,    -1,   781,   816,    -1,\n-     781,    36,   781,    -1,   781,   287,   781,    -1,   267,   781,\n-      -1,   484,   781,    -1,   781,   172,   781,    -1,   781,   231,\n-     781,    -1,   781,   231,   781,   141,   781,    -1,   781,   484,\n-     231,   781,    -1,   781,   484,   231,   781,   141,   781,    -1,\n-     781,   188,   781,    -1,   781,   188,   781,   141,   781,    -1,\n-     781,   484,   188,   781,    -1,   781,   484,   188,   781,   141,\n-     781,    -1,   781,   380,   416,   781,    -1,   781,   380,   416,\n-     781,   141,   781,    -1,   781,   484,   380,   416,   781,    -1,\n-     781,   484,   380,   416,   781,   141,   781,    -1,   781,   216,\n-     272,    -1,   781,   217,    -1,   781,   216,   267,   272,    -1,\n-     781,   267,   272,    -1,   781,   270,    -1,   781,    17,   781,\n-      -1,   781,    18,   781,    -1,   805,   293,   805,    -1,   781,\n-     216,   423,    -1,   781,   216,   267,   423,    -1,   781,   216,\n-     155,    -1,   781,   216,   267,   155,    -1,   781,   216,   434,\n-      -1,   781,   216,   267,   434,    -1,   781,   216,   128,   167,\n-     781,    -1,   781,   216,   267,   128,   167,   781,    -1,   781,\n-     216,   277,   500,   827,   501,    -1,   781,   216,   267,   277,\n-     500,   827,   501,    -1,   781,    53,   849,   782,    36,   781,\n-      -1,   781,   484,    53,   849,   782,    36,   781,    -1,   781,\n-      53,   402,   782,    36,   781,    -1,   781,   484,    53,   402,\n-     782,    36,   781,    -1,   781,   193,   837,    -1,   781,   484,\n-     193,   837,    -1,   781,   818,   813,   653,    -1,   781,   818,\n-     813,   500,   781,   501,    -1,   113,    -1,    81,   500,   781,\n-     501,    -1,   493,   855,   859,    -1,   528,   502,   493,   855,\n-     859,    -1,   783,    -1,   782,    11,   751,    -1,   491,   782,\n-      -1,   492,   782,    -1,   782,   491,   782,    -1,   782,   492,\n-     782,    -1,   782,   493,   782,    -1,   782,   494,   782,    -1,\n-     782,    15,   782,    -1,   782,   495,   782,    -1,   782,   496,\n-     782,    -1,   782,    16,   782,    -1,   782,   487,   782,    -1,\n-     782,   488,   782,    -1,   782,   489,   782,    -1,   782,    19,\n-     782,    -1,   782,    20,   782,    -1,   782,    21,   782,    -1,\n-     782,   816,   782,    -1,   816,   782,    -1,   782,   816,    -1,\n-     782,   216,   128,   167,   782,    -1,   782,   216,   267,   128,\n-     167,   782,    -1,   782,   216,   277,   500,   827,   501,    -1,\n-     782,   216,   267,   277,   500,   827,   501,    -1,   784,    -1,\n-     805,    -1,   785,   848,    -1,   843,    -1,   866,    -1,   505,\n-       9,    -1,   506,   534,    -1,   498,   824,   499,    -1,   790,\n-      -1,    39,   653,    -1,    39,   498,   824,   499,    -1,   838,\n-      -1,   653,    -1,   653,   531,    -1,   148,   653,    -1,   706,\n-     500,   823,   501,    -1,   507,    -1,    10,    -1,   500,   781,\n-     501,    -1,   508,   808,   509,    -1,   241,   508,   812,   509,\n-      -1,   787,    -1,   865,   500,   501,    -1,   865,   500,   825,\n-     675,   674,   501,    -1,   865,   500,   450,   826,   675,   674,\n-     501,    -1,   865,   500,   825,   504,   450,   826,   675,   674,\n-     501,    -1,   865,   500,    30,   825,   675,   674,   501,    -1,\n-     865,   500,   128,   825,   675,   674,   501,    -1,   786,   791,\n-     792,   793,   797,    -1,   789,    -1,   786,    -1,   789,    -1,\n-      79,   162,   500,   781,   501,    -1,    66,   500,   781,    40,\n-     751,   501,    -1,   426,   500,   781,    40,   751,   501,    -1,\n-     154,   500,   828,   501,    -1,   294,   500,   830,   501,    -1,\n-     311,   500,   832,   501,    -1,   400,   500,   833,   501,    -1,\n-     420,   500,   781,    40,   751,   501,    -1,   422,   500,    58,\n-     836,   501,    -1,   422,   500,   227,   836,   501,    -1,   422,\n-     500,   417,   836,   501,    -1,   422,   500,   836,   501,    -1,\n-     273,   500,   781,   504,   781,   501,    -1,    77,   500,   823,\n-     501,    -1,   498,   781,   162,   528,   193,   781,   499,    -1,\n-     498,   781,   162,   528,   193,   783,   186,   781,   499,    -1,\n-     463,   176,   500,   676,   501,    -1,    -1,   158,   500,   459,\n-     781,   501,    -1,   158,   500,   781,   501,    -1,    -1,   151,\n-      -1,    -1,   461,   795,    -1,    -1,   796,    -1,   795,   504,\n-     796,    -1,   528,    40,   798,    -1,   292,   798,    -1,   292,\n-     528,    -1,    -1,   500,   799,   800,   675,   801,   501,    -1,\n-     528,    -1,    -1,   301,    59,   822,    -1,    -1,   328,   802,\n-      -1,   357,   802,    -1,    -1,   803,    -1,    53,   803,    36,\n-     803,    -1,   429,   314,    -1,   429,   161,    -1,   102,   356,\n-      -1,   781,   314,    -1,   781,   161,    -1,   356,   500,   823,\n-     501,    -1,   356,   500,   501,    -1,   804,    -1,   500,   822,\n-     504,   781,   501,    -1,   529,   510,   781,    -1,   806,    -1,\n-     807,   504,   806,    -1,   807,    -1,   807,   504,    -1,   781,\n-     510,   781,    -1,   809,    -1,   810,   504,   809,    -1,   810,\n-      -1,   810,   504,    -1,   811,    -1,    -1,    38,    -1,   385,\n-      -1,    30,    -1,     8,    -1,   815,    -1,   491,    -1,   492,\n-      -1,   493,    -1,   494,    -1,    15,    -1,   495,    -1,   496,\n-      -1,    16,    -1,   487,    -1,   488,    -1,   489,    -1,    19,\n-      -1,    20,    -1,    21,    -1,     8,    -1,   284,   500,   819,\n-     501,    -1,   814,    -1,   284,   500,   819,   501,    -1,   814,\n-      -1,   284,   500,   819,   501,    -1,   231,    -1,   484,   231,\n-      -1,   172,    -1,   484,   172,    -1,   188,    -1,   484,   188,\n-      -1,   814,    -1,   528,   502,   819,    -1,   783,    -1,   820,\n-     504,   783,    -1,   820,    -1,   820,   504,    -1,   781,    -1,\n-     822,   504,   781,    -1,   822,    -1,   822,   504,    -1,   823,\n-      -1,    -1,   826,    -1,   825,   504,   826,    -1,   781,    -1,\n-     874,    13,   781,    -1,   874,    14,   781,    -1,   751,    -1,\n-     827,   504,   751,    -1,   829,   167,   781,    -1,    -1,     3,\n-      -1,   772,    -1,   773,    -1,   774,    -1,   775,    -1,   776,\n-      -1,   777,    -1,   778,    -1,   779,    -1,   530,    -1,   781,\n-     831,   834,   835,    -1,   781,   831,   834,    -1,   308,   781,\n-      -1,   782,   193,   782,    -1,    -1,   781,   834,   835,    -1,\n-     781,   835,   834,    -1,   781,   834,    -1,   781,   835,    -1,\n-     822,    -1,    -1,   167,   781,    -1,   162,   781,    -1,   781,\n-     167,   823,    -1,   167,   823,    -1,   823,    -1,   653,    -1,\n-     500,   823,   501,    -1,    65,   842,   839,   841,   139,    -1,\n-     840,    -1,   839,   840,    -1,   458,   781,   413,   781,    -1,\n-     135,   781,    -1,    -1,   781,    -1,    -1,   528,    -1,   528,\n-     531,    -1,   498,   781,   499,    -1,   498,   844,   510,   844,\n-     499,    -1,   781,    -1,    -1,    -1,   845,   532,    -1,    -1,\n-     500,   501,    -1,   500,   825,   501,    -1,   502,   533,   846,\n-      -1,   498,   781,   499,    -1,   498,   844,   510,   844,   499,\n-      -1,    -1,   848,   847,    -1,    45,    -1,    -1,   852,    -1,\n-      -1,   853,    -1,   851,   504,   853,    -1,   851,    -1,   851,\n-     504,    -1,   781,    40,   875,    -1,   781,     3,    -1,   781,\n-      -1,   144,   500,   862,   501,    -1,   144,   528,    -1,   854,\n-      -1,    -1,   781,    40,   528,    -1,   856,    -1,   857,   504,\n-     856,    -1,   857,    -1,   857,   504,    -1,   343,   500,   858,\n-     501,    -1,   343,   856,    -1,    -1,   527,    -1,   860,   504,\n-     527,    -1,   864,    -1,   861,   504,   864,    -1,   861,    -1,\n-     861,   504,    -1,   862,    -1,   500,   862,   501,    -1,   529,\n-      -1,   869,    -1,   528,   531,    -1,   867,    -1,     4,    -1,\n-     530,   845,    -1,     6,    -1,     7,    -1,   865,   530,    -1,\n-     865,   500,   825,   675,   674,   501,   530,    -1,   754,   530,\n-      -1,   770,   500,   781,   501,   780,    -1,   770,   867,   780,\n-      -1,   770,   530,   780,    -1,   423,    -1,   155,    -1,   272,\n-      -1,     9,    -1,     3,    -1,   941,    -1,   946,    -1,     3,\n-      -1,   941,    -1,   943,    -1,     3,    -1,   941,    -1,   944,\n-      -1,   528,    -1,   528,   872,    -1,   502,   533,    -1,   872,\n-     502,   533,    -1,   500,   862,   501,    -1,    -1,   868,    -1,\n-     534,    -1,     5,    -1,   316,   864,   877,    40,   878,    -1,\n-     500,   827,   501,    -1,    -1,   652,    -1,   537,    -1,   634,\n-      -1,   635,    -1,   918,    -1,    98,   361,   527,   880,    -1,\n-      98,   361,   186,   267,   148,   527,   880,    -1,    98,   287,\n-     343,   361,   527,   880,    -1,   880,   881,    -1,    -1,   576,\n-      -1,   882,    -1,   562,    -1,   936,    -1,    98,   888,   197,\n-     885,   886,   282,   527,   884,   500,   556,   501,   887,   744,\n-      -1,    98,   888,   197,   885,   186,   267,   148,   605,   282,\n-     527,   884,   500,   556,   501,   887,   744,    -1,   528,    -1,\n-     442,   883,    -1,    -1,    87,    -1,    -1,   605,    -1,    -1,\n-     462,   591,    -1,    -1,   433,    -1,    -1,    32,   405,   738,\n-     375,   361,   864,    -1,    32,   405,   186,   148,   738,   375,\n-     361,   864,    -1,    32,   370,   527,   375,   361,   864,    -1,\n-      32,   370,   186,   148,   527,   375,   361,   864,    -1,    32,\n-     454,   527,   375,   361,   864,    -1,    32,   454,   186,   148,\n-     527,   375,   361,   864,    -1,   163,    73,   891,    -1,    73,\n-     891,    -1,   528,    -1,    -1,   150,   106,   530,   642,    -1,\n-     150,   106,   528,   416,   530,   642,    -1,   192,   106,   530,\n-      -1,   149,   897,    -1,   149,   901,   895,   897,    -1,   149,\n-     452,   897,    -1,   149,   500,   900,   501,   897,    -1,   452,\n-      -1,    -1,   902,    -1,   569,    -1,    -1,   889,    -1,   566,\n-      -1,   515,    -1,   935,    -1,   890,    -1,   635,    -1,   938,\n-      -1,   631,    -1,   879,    -1,   562,    -1,   576,    -1,   558,\n-      -1,   526,    -1,   918,    -1,   624,    -1,   564,    -1,   882,\n-      -1,   537,    -1,   911,    -1,   561,    -1,   876,    -1,   535,\n-      -1,   652,    -1,   573,    -1,   634,    -1,   913,    -1,   927,\n-      -1,   905,    -1,   930,    -1,   936,    -1,     3,    -1,   941,\n-      -1,   945,    -1,   898,    -1,   530,    -1,   903,    -1,   900,\n-     504,   903,    -1,    35,    -1,    34,    -1,   423,    -1,   155,\n-      -1,   282,    -1,   899,    -1,   904,   896,    -1,   898,    -1,\n-     901,    -1,   375,   906,    -1,   375,   235,   906,    -1,   375,\n-     374,   906,    -1,   375,   173,   906,    -1,   907,    -1,   933,\n-     167,   102,    -1,   414,   483,   909,    -1,   361,   530,    -1,\n-     933,   416,   910,    -1,   933,   489,   910,    -1,   933,   416,\n-     113,    -1,   933,   489,   113,    -1,   902,    -1,   569,    -1,\n-     530,    -1,     3,    -1,   770,   530,   780,    -1,   770,   500,\n-     867,   501,   530,    -1,   569,    -1,   113,    -1,   235,    -1,\n-     908,    -1,   910,   504,   908,    -1,   234,   912,    -1,   208,\n-     912,    -1,   163,   208,   912,    -1,   530,    -1,   528,    -1,\n-     443,   915,   917,   895,    -1,   443,   915,   917,   895,   527,\n-     873,    -1,   443,   915,   917,   895,   922,    -1,   443,   500,\n-     916,   501,    -1,   443,   500,   916,   501,   527,   873,    -1,\n-     901,    -1,   452,    -1,   166,    -1,   168,    -1,     3,    -1,\n-     168,    -1,    -1,   914,    -1,   916,   504,   914,    -1,   166,\n-      -1,    -1,   542,   118,   167,   919,   921,   920,   548,    -1,\n-     424,   669,   919,    -1,   738,    -1,   738,   528,    -1,   738,\n-      40,   528,    -1,   459,   781,    -1,    -1,   442,   720,    -1,\n-      -1,   901,   895,    -1,   901,   895,   527,   873,    -1,    47,\n-     925,   530,   926,   642,    -1,   124,   925,     3,    -1,   124,\n-     106,   186,   148,     3,    -1,   106,    -1,    -1,    40,   528,\n-      -1,    -1,   345,   929,    -1,   933,    -1,    30,    -1,   928,\n-      -1,   414,   483,    -1,   418,   218,   230,    -1,   931,   652,\n-      -1,   401,   652,    -1,   401,   934,    -1,   931,   934,    -1,\n-     931,   414,   483,    -1,   931,   418,   218,   230,    -1,   931,\n-      30,   932,    -1,   931,    -1,   379,    -1,   123,    -1,   406,\n-      -1,    -1,   528,    -1,   933,   502,   528,    -1,   528,    -1,\n-     934,   502,   528,    -1,    61,   786,    -1,    98,   622,   454,\n-     527,   611,   887,    40,   652,   937,    -1,    98,   622,   454,\n-     186,   267,   148,   527,   611,   887,    40,   652,   937,    -1,\n-      98,   287,   343,   622,   454,   527,   611,   887,    40,   652,\n-     937,    -1,    98,   622,   333,   454,   527,   500,   615,   501,\n-     887,    40,   652,   937,    -1,    98,   287,   343,   622,   333,\n-     454,   527,   500,   615,   501,   887,    40,   652,   937,    -1,\n-     462,    72,   285,    -1,   462,    64,    72,   285,    -1,   462,\n-     235,    72,   285,    -1,    -1,    98,   622,   405,   940,    40,\n-     652,   939,    -1,    98,   622,   405,   186,   267,   148,   940,\n-      40,   652,   939,    -1,    98,   287,   343,   622,   405,   940,\n-      40,   652,   939,    -1,   462,   105,    -1,   462,   265,   105,\n-      -1,    -1,   527,   611,   598,   590,    -1,    22,    -1,    23,\n-      -1,    24,    -1,    25,    -1,    26,    -1,    27,    -1,    28,\n-      -1,    29,    -1,    31,    -1,    32,    -1,    33,    -1,    43,\n-      -1,    44,    -1,    46,    -1,    47,    -1,    48,    -1,    50,\n-      -1,    51,    -1,    52,    -1,    59,    -1,    60,    -1,    61,\n-      -1,    62,    -1,    63,    -1,    64,    -1,    67,    -1,    68,\n-      -1,    71,    -1,    73,    -1,    74,    -1,    75,    -1,    76,\n-      -1,    82,    -1,    83,    -1,    84,    -1,    85,    -1,    86,\n-      -1,    88,    -1,    89,    -1,    90,    -1,    92,    -1,    93,\n-      -1,    94,    -1,    95,    -1,    96,    -1,    97,    -1,   100,\n-      -1,   101,    -1,   102,    -1,   103,    -1,   104,    -1,   105,\n-      -1,   106,    -1,   107,    -1,   108,    -1,   109,    -1,   112,\n-      -1,   114,    -1,   116,    -1,   117,    -1,   118,    -1,   119,\n-      -1,   120,    -1,   121,    -1,   123,    -1,   124,    -1,   125,\n-      -1,   126,    -1,   127,    -1,   130,    -1,   131,    -1,   132,\n-      -1,   133,    -1,   134,    -1,   136,    -1,   137,    -1,   138,\n-      -1,   140,    -1,   141,    -1,   142,    -1,   144,    -1,   145,\n-      -1,   146,    -1,   147,    -1,   149,    -1,   150,    -1,   151,\n-      -1,   152,    -1,   153,    -1,   156,    -1,   158,    -1,   159,\n-      -1,   161,    -1,   163,    -1,   165,    -1,   169,    -1,   170,\n-      -1,   173,    -1,   175,    -1,   179,    -1,   181,    -1,   182,\n-      -1,   183,    -1,   184,    -1,   185,    -1,   186,    -1,   187,\n-      -1,   189,    -1,   190,    -1,   191,    -1,   192,    -1,   194,\n-      -1,   195,    -1,   196,    -1,   197,    -1,   198,    -1,   199,\n-      -1,   200,    -1,   202,    -1,   205,    -1,   206,    -1,   207,\n-      -1,   208,    -1,   209,    -1,   215,    -1,   218,    -1,   220,\n-      -1,   221,    -1,   222,    -1,   223,    -1,   224,    -1,   225,\n-      -1,   228,    -1,   230,    -1,   233,    -1,   234,    -1,   235,\n-      -1,   236,    -1,   237,    -1,   238,    -1,   239,    -1,   240,\n-      -1,   242,    -1,   243,    -1,   244,    -1,   245,    -1,   246,\n-      -1,   247,    -1,   248,    -1,   249,    -1,   250,    -1,   251,\n-      -1,   252,    -1,   253,    -1,   254,    -1,   255,    -1,   256,\n-      -1,   257,    -1,   258,    -1,   259,    -1,   263,    -1,   264,\n-      -1,   265,    -1,   268,    -1,   269,    -1,   271,    -1,   274,\n-      -1,   276,    -1,   277,    -1,   278,    -1,   280,    -1,   281,\n-      -1,   284,    -1,   285,    -1,   286,    -1,   289,    -1,   292,\n-      -1,   295,    -1,   296,    -1,   297,    -1,   298,    -1,   299,\n-      -1,   300,    -1,   301,    -1,   302,    -1,   303,    -1,   304,\n-      -1,   309,    -1,   310,    -1,   313,    -1,   314,    -1,   316,\n-      -1,   317,    -1,   318,    -1,   320,    -1,   321,    -1,   322,\n-      -1,   323,    -1,   324,    -1,   325,    -1,   327,    -1,   328,\n-      -1,   329,    -1,   331,    -1,   332,    -1,   333,    -1,   334,\n-      -1,   336,    -1,   337,    -1,   338,    -1,   339,    -1,   340,\n-      -1,   341,    -1,   342,    -1,   343,    -1,   344,    -1,   345,\n-      -1,   346,    -1,   347,    -1,   348,    -1,   350,    -1,   351,\n-      -1,   353,    -1,   354,    -1,   355,    -1,   357,    -1,   358,\n-      -1,   359,    -1,   360,    -1,   361,    -1,   362,    -1,   363,\n-      -1,   364,    -1,   365,    -1,   366,    -1,   367,    -1,   370,\n-      -1,   371,    -1,   372,    -1,   373,    -1,   374,    -1,   375,\n-      -1,   377,    -1,   378,    -1,   379,    -1,   381,    -1,   382,\n-      -1,   384,    -1,   386,    -1,   387,    -1,   388,    -1,   389,\n-      -1,   390,    -1,   391,    -1,   392,    -1,   393,    -1,   394,\n-      -1,   395,    -1,   396,    -1,   397,    -1,   399,    -1,   401,\n-      -1,   403,    -1,   404,    -1,   406,    -1,   408,    -1,   409,\n-      -1,   410,    -1,   411,    -1,   412,    -1,   418,    -1,   419,\n-      -1,   421,    -1,   424,    -1,   425,    -1,   427,    -1,   428,\n-      -1,   429,    -1,   430,    -1,   431,    -1,   434,    -1,   435,\n-      -1,   436,    -1,   438,    -1,   439,    -1,   440,    -1,   441,\n-      -1,   443,    -1,   444,    -1,   445,    -1,   446,    -1,   447,\n-      -1,   451,    -1,   453,    -1,   454,    -1,   455,    -1,   456,\n-      -1,   457,    -1,   460,    -1,   463,    -1,   464,    -1,   465,\n-      -1,   466,    -1,   467,    -1,   468,    -1,   480,    -1,   481,\n-      -1,   482,    -1,   483,    -1,    53,    -1,    54,    -1,    56,\n-      -1,    57,    -1,    69,    -1,    70,    -1,    77,    -1,    81,\n-      -1,   110,    -1,   111,    -1,   148,    -1,   154,    -1,   160,\n-      -1,   171,    -1,   177,    -1,   178,    -1,   204,    -1,   210,\n-      -1,   211,    -1,   213,    -1,   241,    -1,   260,    -1,   262,\n-      -1,   266,    -1,   273,    -1,   275,    -1,   290,    -1,   294,\n-      -1,   311,    -1,   315,    -1,   330,    -1,   356,    -1,   376,\n-      -1,   383,    -1,   398,    -1,   400,    -1,   414,    -1,   415,\n-      -1,   420,    -1,   422,    -1,   426,    -1,   448,    -1,   449,\n-      -1,   469,    -1,   470,    -1,   471,    -1,   472,    -1,   473,\n-      -1,   474,    -1,   475,    -1,   476,    -1,   477,    -1,   478,\n-      -1,   479,    -1,    42,    -1,    49,    -1,    55,    -1,    79,\n-      -1,    87,    -1,    99,    -1,   166,    -1,   168,    -1,   171,\n-      -1,   172,    -1,   188,    -1,   203,    -1,   216,    -1,   217,\n-      -1,   219,    -1,   229,    -1,   231,    -1,   241,    -1,   261,\n-      -1,   270,    -1,   291,    -1,   293,    -1,   312,    -1,   352,\n-      -1,   380,    -1,   398,    -1,   407,    -1,   452,    -1,    37,\n-      -1,    42,    -1,    49,    -1,    55,    -1,    79,    -1,    81,\n-      -1,    87,    -1,    99,    -1,   166,    -1,   168,    -1,   172,\n-      -1,   188,    -1,   203,    -1,   216,    -1,   217,    -1,   219,\n-      -1,   229,    -1,   231,    -1,   261,    -1,   270,    -1,   291,\n-      -1,   293,    -1,   312,    -1,   352,    -1,   369,    -1,   380,\n-      -1,   407,    -1,   426,    -1,   452,    -1,    37,    -1,    42,\n-      -1,    49,    -1,    53,    -1,    54,    -1,    55,    -1,    56,\n-      -1,    57,    -1,    70,    -1,    69,    -1,    77,    -1,    79,\n-      -1,    81,    -1,    87,    -1,    99,    -1,   110,    -1,   111,\n-      -1,   148,    -1,   154,    -1,   160,    -1,   166,    -1,   168,\n-      -1,   171,    -1,   172,    -1,   177,    -1,   178,    -1,   188,\n-      -1,   203,    -1,   204,    -1,   211,    -1,   213,    -1,   210,\n-      -1,   216,    -1,   217,    -1,   219,    -1,   229,    -1,   231,\n-      -1,   241,    -1,   260,    -1,   261,    -1,   262,    -1,   266,\n-      -1,   270,    -1,   273,    -1,   275,    -1,   291,    -1,   290,\n-      -1,   293,    -1,   294,    -1,   311,    -1,   312,    -1,   315,\n-      -1,   330,    -1,   352,    -1,   356,    -1,   369,    -1,   376,\n-      -1,   380,    -1,   383,    -1,   398,    -1,   400,    -1,   407,\n-      -1,   414,    -1,   415,    -1,   420,    -1,   422,    -1,   426,\n-      -1,   448,    -1,   449,    -1,   452,    -1,   469,    -1,   470,\n-      -1,   471,    -1,   472,    -1,   473,    -1,   474,    -1,   475,\n-      -1,   476,    -1,   477,    -1,   478,    -1,   479,    -1,    37,\n-      -1,    42,    -1,    49,    -1,    55,    -1,    79,    -1,    81,\n-      -1,    87,    -1,    99,    -1,   166,    -1,   168,    -1,   171,\n-      -1,   172,    -1,   188,    -1,   203,    -1,   216,    -1,   217,\n-      -1,   219,    -1,   229,    -1,   231,    -1,   241,    -1,   261,\n-      -1,   270,    -1,   291,    -1,   293,    -1,   312,    -1,   352,\n-      -1,   369,    -1,   380,    -1,   398,    -1,   407,    -1,   426,\n-      -1,   452,    -1,    30,    -1,    34,    -1,    35,    -1,    36,\n-      -1,    38,    -1,    39,    -1,    40,    -1,    41,    -1,    45,\n-      -1,    58,    -1,    65,    -1,    66,    -1,    72,    -1,    78,\n-      -1,    80,    -1,    91,    -1,    98,    -1,   113,    -1,   115,\n-      -1,   122,    -1,   128,    -1,   129,    -1,   135,    -1,   139,\n-      -1,   143,    -1,   155,    -1,   157,    -1,   162,    -1,   164,\n-      -1,   167,    -1,   174,    -1,   176,    -1,   180,    -1,   193,\n-      -1,   201,    -1,   212,    -1,   214,    -1,   226,    -1,   227,\n-      -1,   232,    -1,   267,    -1,   272,    -1,   279,    -1,   282,\n-      -1,   283,    -1,   287,    -1,   288,    -1,   305,    -1,   306,\n-      -1,   307,    -1,   308,    -1,   319,    -1,   326,    -1,   335,\n-      -1,   349,    -1,   368,    -1,   385,    -1,   402,    -1,   405,\n-      -1,   413,    -1,   416,    -1,   417,    -1,   423,    -1,   432,\n-      -1,   433,    -1,   437,    -1,   442,    -1,   450,    -1,   458,\n-      -1,   459,    -1,   461,    -1,   462,    -1\n+     501,    -1,   904,    -1,   569,    -1,   493,    -1,   500,   638,\n+     501,    -1,   787,    -1,    -1,   534,   643,    -1,   462,   280,\n+      -1,    -1,   646,   648,    -1,    -1,    55,    -1,    -1,    55,\n+      -1,   280,    -1,   166,    -1,   119,   640,   530,    -1,   272,\n+     640,   530,    -1,   100,    -1,   181,    -1,   327,   640,   530,\n+      -1,   141,   640,   530,    -1,   163,   327,   615,    -1,   163,\n+     327,   493,    -1,   301,    59,   615,    -1,   301,    59,   493,\n+      -1,   163,   267,   272,   615,    -1,   163,   272,   615,    -1,\n+     137,   530,    -1,   904,    -1,   530,    -1,   392,    -1,   393,\n+      -1,   644,    -1,   651,   504,   644,    -1,   654,    -1,   653,\n+      -1,   500,   654,   501,    -1,   500,   653,   501,    -1,   657,\n+      -1,   655,   677,    -1,   655,   676,   710,   683,    -1,   655,\n+     676,   682,   711,    -1,   664,   655,    -1,   664,   655,   677,\n+      -1,   664,   655,   676,   710,   683,    -1,   664,   655,   676,\n+     682,   711,    -1,   657,    -1,   653,    -1,   368,   674,   852,\n+      -1,    -1,   368,   674,   852,   668,   719,   745,   699,   708,\n+     796,   709,   687,    -1,   368,   673,   854,   668,   719,   745,\n+     699,   708,   796,   709,   687,    -1,   167,   720,   656,   668,\n+     745,   699,   708,   796,   709,   687,    -1,   167,   720,   368,\n+     673,   854,   668,   745,   699,   708,   796,   709,   687,    -1,\n+     718,    -1,   405,   739,    -1,   655,   432,   671,   672,   655,\n+      -1,   655,   432,   671,   655,    -1,   655,   212,   671,   655,\n+      -1,   655,   143,   671,   655,    -1,   659,   722,   442,   854,\n+      -1,   659,   722,   442,   854,   176,    59,   865,    -1,   659,\n+     722,   176,    59,   865,    -1,   659,   722,   282,   663,    -1,\n+     659,   722,   282,   663,   176,    59,   865,    -1,   659,   722,\n+     282,   663,   442,   854,    -1,   659,   722,   282,   663,   442,\n+     854,   176,    59,   865,    -1,   660,   722,   282,   854,   214,\n+     258,   866,   658,   865,    -1,   660,   722,   282,   854,    -1,\n+     447,    -1,   448,    -1,   305,    -1,   307,    -1,   437,    -1,\n+     306,    -1,   783,    -1,   783,   193,   500,   654,   501,    -1,\n+     725,    -1,   661,    -1,   662,   504,   661,    -1,   662,    -1,\n+     662,   504,    -1,   462,   665,    -1,   486,   665,    -1,   462,\n+     333,   665,    -1,   666,    -1,   665,   504,   666,    -1,   866,\n+     875,    40,   667,   500,   880,   501,    -1,   244,    -1,   267,\n+     244,    -1,    -1,   214,   669,    -1,    -1,   411,   670,   527,\n+      -1,   409,   670,   527,    -1,   235,   411,   670,   527,    -1,\n+     235,   409,   670,   527,    -1,   173,   411,   670,   527,    -1,\n+     173,   409,   670,   527,    -1,   436,   670,   527,    -1,   405,\n+     527,    -1,   527,    -1,   405,    -1,    -1,    30,    -1,   128,\n+      -1,    -1,    59,   258,    -1,   128,    -1,   128,   282,   500,\n+     825,   501,    -1,    30,    -1,    -1,   187,   274,    -1,   346,\n+     274,    -1,    -1,   677,    -1,    -1,   288,    59,   678,    -1,\n+     288,    59,    30,   680,   681,    -1,   679,    -1,   678,   504,\n+     679,    -1,   782,   442,   819,   681,    -1,   782,   680,   681,\n+      -1,    41,    -1,   122,    -1,    -1,   485,   159,    -1,   485,\n+     225,    -1,    -1,   684,   685,    -1,   685,   684,    -1,   684,\n+      -1,   685,    -1,   682,    -1,    -1,   232,   693,    -1,   232,\n+     693,   504,   694,    -1,   157,   698,   695,   697,   283,    -1,\n+     157,   698,   697,   283,    -1,   279,   694,    -1,   279,   695,\n+     697,    -1,     4,   495,    -1,     9,   495,    -1,     4,   304,\n+      -1,     9,   304,    -1,     9,    -1,     9,   357,    -1,   442,\n+     359,   689,    -1,    -1,   528,    -1,    -1,   688,   500,   686,\n+     501,   692,    -1,   686,    -1,   686,   500,   528,   501,    -1,\n+     686,   500,   528,   504,     9,   501,    -1,   407,   689,    -1,\n+     690,    -1,    -1,   342,   500,     9,   501,    -1,    -1,   782,\n+      -1,    30,    -1,   782,   495,    -1,     4,   304,    -1,     9,\n+     304,    -1,   782,    -1,   784,    -1,   491,   696,    -1,   492,\n+     696,    -1,   869,    -1,     4,    -1,   356,    -1,   357,    -1,\n+     159,    -1,   264,    -1,   176,    59,   701,    -1,   176,    59,\n+      30,    -1,    -1,   702,    -1,   700,   504,   702,    -1,   700,\n+      -1,   700,   504,    -1,   782,    -1,   703,    -1,   705,    -1,\n+     704,    -1,   706,    -1,   500,   501,    -1,   355,   500,   825,\n+     501,    -1,   101,   500,   825,   501,    -1,   177,   377,   500,\n+     701,   501,    -1,   177,    -1,   178,    -1,   180,   782,    -1,\n+      -1,   326,   782,    -1,    -1,   712,    -1,   162,   329,   283,\n+      -1,   710,    -1,    -1,   713,    -1,   712,   713,    -1,   714,\n+     715,   716,    -1,   162,   439,    -1,   162,   265,   221,   439,\n+      -1,   162,   378,    -1,   162,   221,   378,    -1,   277,   862,\n+      -1,    -1,   271,    -1,   382,   238,    -1,    -1,   448,   500,\n+     825,   501,    -1,   717,   504,   500,   825,   501,    -1,   717,\n+      -1,   717,   504,    -1,   167,   721,    -1,    -1,   722,    -1,\n+     720,   504,   722,    -1,   720,    -1,   720,   504,    -1,   739,\n+     734,   691,    -1,   740,   735,   691,    -1,   718,   733,   691,\n+      -1,   226,   740,   735,    -1,   653,   734,   691,    -1,   226,\n+     653,   734,    -1,   732,    -1,   500,   732,   501,   733,    -1,\n+     722,   305,   500,   854,   162,   728,   723,   501,   734,    -1,\n+     722,   437,   724,   500,   729,   162,   731,   501,   734,    -1,\n+     176,    59,   864,    -1,    -1,   194,   274,    -1,   144,   274,\n+      -1,    -1,   783,   193,   500,   854,   501,    -1,   783,   193,\n+     529,    -1,   785,    -1,   500,   823,   501,    -1,   726,   193,\n+     500,   854,   501,    -1,   726,   193,   529,    -1,   727,    -1,\n+     728,   727,    -1,   529,    -1,   500,   864,   501,    -1,   729,\n+     193,   500,   854,   501,    -1,   730,    -1,   731,   730,    -1,\n+     500,   732,   501,    -1,   722,    99,   219,   722,    -1,   722,\n+     736,   219,   722,   738,    -1,   722,   219,   722,   738,    -1,\n+     722,   261,   736,   219,   722,    -1,   722,   261,   219,   722,\n+      -1,   722,    42,   736,   219,   722,   738,    -1,   722,    42,\n+     219,   722,   738,    -1,   722,   312,   219,   722,    -1,   722,\n+      37,   219,   722,   738,    -1,   722,   369,   219,   722,   738,\n+      -1,    40,   529,   500,   864,   501,    -1,    40,   529,    -1,\n+     528,   500,   864,   501,    -1,   528,    -1,   733,    -1,    -1,\n+     733,    -1,    40,   500,   746,   501,    -1,    40,   529,   500,\n+     746,   501,    -1,   528,   500,   746,   501,    -1,    -1,   168,\n+     737,    -1,   229,   737,    -1,   352,   737,    -1,   369,    -1,\n+      37,    -1,   203,    -1,   291,    -1,    -1,   442,   500,   864,\n+     501,    -1,   282,   782,    -1,   527,    -1,   527,   493,    -1,\n+     283,   527,    -1,   283,   500,   527,   501,    -1,   790,   744,\n+      -1,   357,   167,   500,   742,   501,   744,    -1,   790,   743,\n+      -1,   741,    -1,   742,   504,   741,    -1,    40,   500,   746,\n+     501,    -1,    -1,   486,   289,    -1,    -1,   459,   782,    -1,\n+      -1,   747,    -1,   746,   504,   747,    -1,   529,   752,   748,\n+      -1,    78,   873,    -1,    -1,   528,   752,    -1,   749,   504,\n+     528,   752,    -1,   356,    -1,   398,    -1,   752,    -1,    -1,\n+     754,   753,    -1,   376,   754,   753,    -1,   754,    39,   498,\n+     869,   499,    -1,   376,   754,    39,   498,   869,   499,    -1,\n+     754,    39,    -1,   376,   754,    39,    -1,   750,   500,   749,\n+     501,   753,    -1,   241,   500,   829,   501,   753,    -1,   432,\n+     500,   749,   501,   753,    -1,   753,   498,   499,    -1,   753,\n+     498,   869,   499,    -1,    -1,   756,    -1,   758,    -1,   760,\n+      -1,   764,    -1,   770,    -1,   771,   781,    -1,   771,   500,\n+     869,   501,    -1,   758,    -1,   761,    -1,   765,    -1,   770,\n+      -1,   872,   757,    -1,   500,   826,   501,    -1,    -1,   210,\n+      -1,   211,    -1,   383,    -1,    54,    -1,   330,    -1,   160,\n+     759,    -1,   132,   315,    -1,   111,   757,    -1,   110,   757,\n+      -1,   275,   757,    -1,    57,    -1,   500,   869,   501,    -1,\n+      -1,   762,    -1,   763,    -1,   762,    -1,   763,    -1,    56,\n+     769,   500,   825,   501,    -1,    56,   769,    -1,   766,    -1,\n+     767,    -1,   766,    -1,   767,    -1,   768,   500,   869,   501,\n+      -1,   768,    -1,    70,   769,    -1,    69,   769,    -1,   449,\n+      -1,   260,    70,   769,    -1,   260,    69,   769,    -1,   262,\n+     769,    -1,   451,    -1,    -1,   415,   500,   869,   501,   772,\n+      -1,   415,   772,    -1,   414,   500,   869,   501,   772,    -1,\n+     414,   772,    -1,   213,    -1,   486,   414,   483,    -1,   464,\n+     414,   483,    -1,    -1,   480,    -1,   481,    -1,   255,    -1,\n+     256,    -1,   107,    -1,   108,    -1,   183,    -1,   184,    -1,\n+     251,    -1,   252,    -1,   365,    -1,   366,    -1,   249,    -1,\n+     250,    -1,   247,    -1,   248,    -1,   773,    -1,   774,    -1,\n+     775,    -1,   776,    -1,   777,    -1,   778,    -1,   779,    -1,\n+     780,    -1,   773,   416,   774,    -1,   775,   416,   776,    -1,\n+     775,   416,   777,    -1,   775,   416,   778,    -1,   776,   416,\n+     777,    -1,   776,   416,   778,    -1,   777,   416,   778,    -1,\n+      -1,   784,    -1,   782,    11,   752,    -1,   782,    78,   873,\n+      -1,   782,    46,   414,   483,   782,    -1,   491,   782,    -1,\n+     492,   782,    -1,   782,   491,   782,    -1,   782,   492,   782,\n+      -1,   782,   493,   782,    -1,   782,   494,   782,    -1,   782,\n+      15,   782,    -1,   782,   495,   782,    -1,   782,   496,   782,\n+      -1,   782,    16,   782,    -1,   782,   487,   782,    -1,   782,\n+     488,   782,    -1,   782,   489,   782,    -1,   782,    19,   782,\n+      -1,   782,    20,   782,    -1,   782,    21,   782,    -1,   782,\n+     818,   782,    -1,   818,   782,    -1,   782,   818,    -1,   782,\n+      36,   782,    -1,   782,   287,   782,    -1,   267,   782,    -1,\n+     484,   782,    -1,   782,   172,   782,    -1,   782,   231,   782,\n+      -1,   782,   231,   782,   141,   782,    -1,   782,   484,   231,\n+     782,    -1,   782,   484,   231,   782,   141,   782,    -1,   782,\n+     188,   782,    -1,   782,   188,   782,   141,   782,    -1,   782,\n+     484,   188,   782,    -1,   782,   484,   188,   782,   141,   782,\n+      -1,   782,   380,   416,   782,    -1,   782,   380,   416,   782,\n+     141,   782,    -1,   782,   484,   380,   416,   782,    -1,   782,\n+     484,   380,   416,   782,   141,   782,    -1,   782,   216,   272,\n+      -1,   782,   217,    -1,   782,   216,   267,   272,    -1,   782,\n+     267,   272,    -1,   782,   270,    -1,   782,    17,   782,    -1,\n+     782,    18,   782,    -1,   807,   293,   807,    -1,   782,   216,\n+     423,    -1,   782,   216,   267,   423,    -1,   782,   216,   155,\n+      -1,   782,   216,   267,   155,    -1,   782,   216,   434,    -1,\n+     782,   216,   267,   434,    -1,   782,   216,   128,   167,   782,\n+      -1,   782,   216,   267,   128,   167,   782,    -1,   782,   216,\n+     277,   500,   829,   501,    -1,   782,   216,   267,   277,   500,\n+     829,   501,    -1,   782,    53,   851,   783,    36,   782,    -1,\n+     782,   484,    53,   851,   783,    36,   782,    -1,   782,    53,\n+     402,   783,    36,   782,    -1,   782,   484,    53,   402,   783,\n+      36,   782,    -1,   782,   193,   839,    -1,   782,   484,   193,\n+     839,    -1,   782,   820,   815,   653,    -1,   782,   820,   815,\n+     500,   782,   501,    -1,   113,    -1,    81,   500,   782,   501,\n+      -1,   493,   857,   861,    -1,   528,   502,   493,   857,   861,\n+      -1,   784,    -1,   783,    11,   752,    -1,   491,   783,    -1,\n+     492,   783,    -1,   783,   491,   783,    -1,   783,   492,   783,\n+      -1,   783,   493,   783,    -1,   783,   494,   783,    -1,   783,\n+      15,   783,    -1,   783,   495,   783,    -1,   783,   496,   783,\n+      -1,   783,    16,   783,    -1,   783,   487,   783,    -1,   783,\n+     488,   783,    -1,   783,   489,   783,    -1,   783,    19,   783,\n+      -1,   783,    20,   783,    -1,   783,    21,   783,    -1,   783,\n+     818,   783,    -1,   818,   783,    -1,   783,   818,    -1,   783,\n+     216,   128,   167,   783,    -1,   783,   216,   267,   128,   167,\n+     783,    -1,   783,   216,   277,   500,   829,   501,    -1,   783,\n+     216,   267,   277,   500,   829,   501,    -1,   785,    -1,   807,\n+      -1,   786,   850,    -1,   845,    -1,   868,    -1,   505,     9,\n+      -1,   506,   534,    -1,   498,   826,   499,    -1,   792,    -1,\n+      39,   653,    -1,    39,   498,   826,   499,    -1,   840,    -1,\n+     653,    -1,   653,   531,    -1,   148,   653,    -1,   707,   500,\n+     825,   501,    -1,   507,    -1,    10,    -1,   500,   782,   501,\n+      -1,   787,    -1,   241,   508,   814,   509,    -1,   789,    -1,\n+     508,   810,   509,    -1,   867,   500,   501,    -1,   867,   500,\n+     827,   676,   675,   501,    -1,   867,   500,   450,   828,   676,\n+     675,   501,    -1,   867,   500,   827,   504,   450,   828,   676,\n+     675,   501,    -1,   867,   500,    30,   827,   676,   675,   501,\n+      -1,   867,   500,   128,   827,   676,   675,   501,    -1,   788,\n+     793,   794,   795,   799,    -1,   791,    -1,   788,    -1,   791,\n+      -1,    79,   162,   500,   782,   501,    -1,    66,   500,   782,\n+      40,   752,   501,    -1,   426,   500,   782,    40,   752,   501,\n+      -1,   154,   500,   830,   501,    -1,   294,   500,   832,   501,\n+      -1,   311,   500,   834,   501,    -1,   400,   500,   835,   501,\n+      -1,   420,   500,   782,    40,   752,   501,    -1,   422,   500,\n+      58,   838,   501,    -1,   422,   500,   227,   838,   501,    -1,\n+     422,   500,   417,   838,   501,    -1,   422,   500,   838,   501,\n+      -1,   273,   500,   782,   504,   782,   501,    -1,    77,   500,\n+     825,   501,    -1,   498,   782,   162,   528,   193,   782,   499,\n+      -1,   498,   782,   162,   528,   193,   784,   186,   782,   499,\n+      -1,   463,   176,   500,   677,   501,    -1,    -1,   158,   500,\n+     459,   782,   501,    -1,   158,   500,   782,   501,    -1,    -1,\n+     151,    -1,    -1,   461,   797,    -1,    -1,   798,    -1,   797,\n+     504,   798,    -1,   528,    40,   800,    -1,   292,   800,    -1,\n+     292,   528,    -1,    -1,   500,   801,   802,   676,   803,   501,\n+      -1,   528,    -1,    -1,   301,    59,   824,    -1,    -1,   328,\n+     804,    -1,   357,   804,    -1,    -1,   805,    -1,    53,   805,\n+      36,   805,    -1,   429,   314,    -1,   429,   161,    -1,   102,\n+     356,    -1,   782,   314,    -1,   782,   161,    -1,   356,   500,\n+     825,   501,    -1,   356,   500,   501,    -1,   806,    -1,   500,\n+     824,   504,   782,   501,    -1,   529,   510,   782,    -1,   808,\n+      -1,   809,   504,   808,    -1,   809,    -1,   809,   504,    -1,\n+     782,   510,   782,    -1,   811,    -1,   812,   504,   811,    -1,\n+     812,    -1,   812,   504,    -1,   813,    -1,    -1,    38,    -1,\n+     385,    -1,    30,    -1,     8,    -1,   817,    -1,   491,    -1,\n+     492,    -1,   493,    -1,   494,    -1,    15,    -1,   495,    -1,\n+     496,    -1,    16,    -1,   487,    -1,   488,    -1,   489,    -1,\n+      19,    -1,    20,    -1,    21,    -1,     8,    -1,   284,   500,\n+     821,   501,    -1,   816,    -1,   284,   500,   821,   501,    -1,\n+     816,    -1,   284,   500,   821,   501,    -1,   231,    -1,   484,\n+     231,    -1,   172,    -1,   484,   172,    -1,   188,    -1,   484,\n+     188,    -1,   816,    -1,   528,   502,   821,    -1,   784,    -1,\n+     822,   504,   784,    -1,   822,    -1,   822,   504,    -1,   782,\n+      -1,   824,   504,   782,    -1,   824,    -1,   824,   504,    -1,\n+     825,    -1,    -1,   828,    -1,   827,   504,   828,    -1,   782,\n+      -1,   876,    13,   782,    -1,   876,    14,   782,    -1,   752,\n+      -1,   829,   504,   752,    -1,   831,   167,   782,    -1,    -1,\n+       3,    -1,   773,    -1,   774,    -1,   775,    -1,   776,    -1,\n+     777,    -1,   778,    -1,   779,    -1,   780,    -1,   530,    -1,\n+     782,   833,   836,   837,    -1,   782,   833,   836,    -1,   308,\n+     782,    -1,   783,   193,   783,    -1,    -1,   782,   836,   837,\n+      -1,   782,   837,   836,    -1,   782,   836,    -1,   782,   837,\n+      -1,   824,    -1,    -1,   167,   782,    -1,   162,   782,    -1,\n+     782,   167,   825,    -1,   167,   825,    -1,   825,    -1,   653,\n+      -1,   500,   825,   501,    -1,    65,   844,   841,   843,   139,\n+      -1,   842,    -1,   841,   842,    -1,   458,   782,   413,   782,\n+      -1,   135,   782,    -1,    -1,   782,    -1,    -1,   528,    -1,\n+     528,   531,    -1,   498,   782,   499,    -1,   498,   846,   510,\n+     846,   499,    -1,   782,    -1,    -1,    -1,   847,   532,    -1,\n+      -1,   500,   501,    -1,   500,   827,   501,    -1,   502,   533,\n+     848,    -1,   498,   782,   499,    -1,   498,   846,   510,   846,\n+     499,    -1,    -1,   850,   849,    -1,    45,    -1,    -1,   854,\n+      -1,    -1,   855,    -1,   853,   504,   855,    -1,   853,    -1,\n+     853,   504,    -1,   782,    40,   877,    -1,   782,     3,    -1,\n+     782,    -1,   144,   500,   864,   501,    -1,   144,   528,    -1,\n+     856,    -1,    -1,   782,    40,   528,    -1,   858,    -1,   859,\n+     504,   858,    -1,   859,    -1,   859,   504,    -1,   343,   500,\n+     860,   501,    -1,   343,   858,    -1,    -1,   527,    -1,   862,\n+     504,   527,    -1,   866,    -1,   863,   504,   866,    -1,   863,\n+      -1,   863,   504,    -1,   864,    -1,   500,   864,   501,    -1,\n+     529,    -1,   871,    -1,   528,   531,    -1,   869,    -1,     4,\n+      -1,   530,   847,    -1,     6,    -1,     7,    -1,   867,   530,\n+      -1,   867,   500,   827,   676,   675,   501,   530,    -1,   755,\n+     530,    -1,   771,   500,   782,   501,   781,    -1,   771,   869,\n+     781,    -1,   771,   530,   781,    -1,   423,    -1,   155,    -1,\n+     272,    -1,     9,    -1,     3,    -1,   943,    -1,   948,    -1,\n+       3,    -1,   943,    -1,   945,    -1,     3,    -1,   943,    -1,\n+     946,    -1,   528,    -1,   528,   874,    -1,   502,   533,    -1,\n+     874,   502,   533,    -1,   500,   864,   501,    -1,    -1,   870,\n+      -1,   534,    -1,     5,    -1,   316,   866,   879,    40,   880,\n+      -1,   500,   829,   501,    -1,    -1,   652,    -1,   537,    -1,\n+     634,    -1,   635,    -1,   920,    -1,    98,   361,   527,   882,\n+      -1,    98,   361,   186,   267,   148,   527,   882,    -1,    98,\n+     287,   343,   361,   527,   882,    -1,   882,   883,    -1,    -1,\n+     576,    -1,   884,    -1,   562,    -1,   938,    -1,    98,   890,\n+     197,   887,   888,   282,   527,   886,   500,   556,   501,   889,\n+     745,    -1,    98,   890,   197,   887,   186,   267,   148,   605,\n+     282,   527,   886,   500,   556,   501,   889,   745,    -1,   528,\n+      -1,   442,   885,    -1,    -1,    87,    -1,    -1,   605,    -1,\n+      -1,   462,   591,    -1,    -1,   433,    -1,    -1,    32,   405,\n+     739,   375,   361,   866,    -1,    32,   405,   186,   148,   739,\n+     375,   361,   866,    -1,    32,   370,   527,   375,   361,   866,\n+      -1,    32,   370,   186,   148,   527,   375,   361,   866,    -1,\n+      32,   454,   527,   375,   361,   866,    -1,    32,   454,   186,\n+     148,   527,   375,   361,   866,    -1,   163,    73,   893,    -1,\n+      73,   893,    -1,   528,    -1,    -1,   150,   106,   530,   642,\n+      -1,   150,   106,   528,   416,   530,   642,    -1,   192,   106,\n+     530,    -1,   149,   899,    -1,   149,   903,   897,   899,    -1,\n+     149,   452,   899,    -1,   149,   500,   902,   501,   899,    -1,\n+     452,    -1,    -1,   904,    -1,   569,    -1,    -1,   891,    -1,\n+     566,    -1,   515,    -1,   937,    -1,   892,    -1,   635,    -1,\n+     940,    -1,   631,    -1,   881,    -1,   562,    -1,   576,    -1,\n+     558,    -1,   526,    -1,   920,    -1,   624,    -1,   564,    -1,\n+     884,    -1,   537,    -1,   913,    -1,   561,    -1,   878,    -1,\n+     535,    -1,   652,    -1,   573,    -1,   634,    -1,   915,    -1,\n+     929,    -1,   907,    -1,   932,    -1,   938,    -1,     3,    -1,\n+     943,    -1,   947,    -1,   900,    -1,   530,    -1,   905,    -1,\n+     902,   504,   905,    -1,    35,    -1,    34,    -1,   423,    -1,\n+     155,    -1,   282,    -1,   901,    -1,   906,   898,    -1,   900,\n+      -1,   903,    -1,   375,   908,    -1,   375,   235,   908,    -1,\n+     375,   374,   908,    -1,   375,   173,   908,    -1,   909,    -1,\n+     935,   167,   102,    -1,   414,   483,   911,    -1,   361,   530,\n+      -1,   935,   416,   912,    -1,   935,   489,   912,    -1,   935,\n+     416,   113,    -1,   935,   489,   113,    -1,   904,    -1,   569,\n+      -1,   530,    -1,     3,    -1,   771,   530,   781,    -1,   771,\n+     500,   869,   501,   530,    -1,   569,    -1,   113,    -1,   235,\n+      -1,   910,    -1,   912,   504,   910,    -1,   234,   914,    -1,\n+     208,   914,    -1,   163,   208,   914,    -1,   530,    -1,   528,\n+      -1,   443,   917,   919,   897,    -1,   443,   917,   919,   897,\n+     527,   875,    -1,   443,   917,   919,   897,   924,    -1,   443,\n+     500,   918,   501,    -1,   443,   500,   918,   501,   527,   875,\n+      -1,   903,    -1,   452,    -1,   166,    -1,   168,    -1,     3,\n+      -1,   168,    -1,    -1,   916,    -1,   918,   504,   916,    -1,\n+     166,    -1,    -1,   542,   118,   167,   921,   923,   922,   548,\n+      -1,   424,   670,   921,    -1,   739,    -1,   739,   528,    -1,\n+     739,    40,   528,    -1,   459,   782,    -1,    -1,   442,   721,\n+      -1,    -1,   903,   897,    -1,   903,   897,   527,   875,    -1,\n+      47,   927,   530,   928,   642,    -1,   124,   927,     3,    -1,\n+     124,   106,   186,   148,     3,    -1,   106,    -1,    -1,    40,\n+     528,    -1,    -1,   345,   931,    -1,   345,   235,   931,    -1,\n+     345,   374,   931,    -1,   345,   173,   931,    -1,   935,    -1,\n+      30,    -1,   930,    -1,   414,   483,    -1,   418,   218,   230,\n+      -1,   933,   652,    -1,   401,   652,    -1,   401,   936,    -1,\n+     933,   936,    -1,   933,   414,   483,    -1,   933,   418,   218,\n+     230,    -1,   933,    30,   934,    -1,   933,    -1,   379,    -1,\n+     123,    -1,   406,    -1,    -1,   528,    -1,   935,   502,   528,\n+      -1,   528,    -1,   936,   502,   528,    -1,    61,   788,    -1,\n+      98,   622,   454,   527,   611,   889,    40,   652,   939,    -1,\n+      98,   622,   454,   186,   267,   148,   527,   611,   889,    40,\n+     652,   939,    -1,    98,   287,   343,   622,   454,   527,   611,\n+     889,    40,   652,   939,    -1,    98,   622,   333,   454,   527,\n+     500,   615,   501,   889,    40,   652,   939,    -1,    98,   287,\n+     343,   622,   333,   454,   527,   500,   615,   501,   889,    40,\n+     652,   939,    -1,   462,    72,   285,    -1,   462,    64,    72,\n+     285,    -1,   462,   235,    72,   285,    -1,    -1,    98,   622,\n+     405,   942,    40,   652,   941,    -1,    98,   622,   405,   186,\n+     267,   148,   942,    40,   652,   941,    -1,    98,   287,   343,\n+     622,   405,   942,    40,   652,   941,    -1,   462,   105,    -1,\n+     462,   265,   105,    -1,    -1,   527,   611,   598,   590,    -1,\n+      22,    -1,    23,    -1,    24,    -1,    25,    -1,    26,    -1,\n+      27,    -1,    28,    -1,    29,    -1,    31,    -1,    32,    -1,\n+      33,    -1,    43,    -1,    44,    -1,    46,    -1,    47,    -1,\n+      48,    -1,    50,    -1,    51,    -1,    52,    -1,    59,    -1,\n+      60,    -1,    61,    -1,    62,    -1,    63,    -1,    64,    -1,\n+      67,    -1,    68,    -1,    71,    -1,    73,    -1,    74,    -1,\n+      75,    -1,    76,    -1,    82,    -1,    83,    -1,    84,    -1,\n+      85,    -1,    86,    -1,    88,    -1,    89,    -1,    90,    -1,\n+      92,    -1,    93,    -1,    94,    -1,    95,    -1,    96,    -1,\n+      97,    -1,   100,    -1,   101,    -1,   102,    -1,   103,    -1,\n+     104,    -1,   105,    -1,   106,    -1,   107,    -1,   108,    -1,\n+     109,    -1,   112,    -1,   114,    -1,   116,    -1,   117,    -1,\n+     118,    -1,   119,    -1,   120,    -1,   121,    -1,   123,    -1,\n+     124,    -1,   125,    -1,   126,    -1,   127,    -1,   130,    -1,\n+     131,    -1,   132,    -1,   133,    -1,   134,    -1,   136,    -1,\n+     137,    -1,   138,    -1,   140,    -1,   141,    -1,   142,    -1,\n+     144,    -1,   145,    -1,   146,    -1,   147,    -1,   149,    -1,\n+     150,    -1,   151,    -1,   152,    -1,   153,    -1,   156,    -1,\n+     158,    -1,   159,    -1,   161,    -1,   163,    -1,   165,    -1,\n+     169,    -1,   170,    -1,   173,    -1,   175,    -1,   179,    -1,\n+     181,    -1,   182,    -1,   183,    -1,   184,    -1,   185,    -1,\n+     186,    -1,   187,    -1,   189,    -1,   190,    -1,   191,    -1,\n+     192,    -1,   194,    -1,   195,    -1,   196,    -1,   197,    -1,\n+     198,    -1,   199,    -1,   200,    -1,   202,    -1,   205,    -1,\n+     206,    -1,   207,    -1,   208,    -1,   209,    -1,   215,    -1,\n+     218,    -1,   220,    -1,   221,    -1,   222,    -1,   223,    -1,\n+     224,    -1,   225,    -1,   228,    -1,   230,    -1,   233,    -1,\n+     234,    -1,   235,    -1,   236,    -1,   237,    -1,   238,    -1,\n+     239,    -1,   240,    -1,   242,    -1,   243,    -1,   244,    -1,\n+     245,    -1,   246,    -1,   247,    -1,   248,    -1,   249,    -1,\n+     250,    -1,   251,    -1,   252,    -1,   253,    -1,   254,    -1,\n+     255,    -1,   256,    -1,   257,    -1,   258,    -1,   259,    -1,\n+     263,    -1,   264,    -1,   265,    -1,   268,    -1,   269,    -1,\n+     271,    -1,   274,    -1,   276,    -1,   277,    -1,   278,    -1,\n+     280,    -1,   281,    -1,   284,    -1,   285,    -1,   286,    -1,\n+     289,    -1,   292,    -1,   295,    -1,   296,    -1,   297,    -1,\n+     298,    -1,   299,    -1,   300,    -1,   301,    -1,   302,    -1,\n+     303,    -1,   304,    -1,   309,    -1,   310,    -1,   313,    -1,\n+     314,    -1,   316,    -1,   317,    -1,   318,    -1,   320,    -1,\n+     321,    -1,   322,    -1,   323,    -1,   324,    -1,   325,    -1,\n+     327,    -1,   328,    -1,   329,    -1,   331,    -1,   332,    -1,\n+     333,    -1,   334,    -1,   336,    -1,   337,    -1,   338,    -1,\n+     339,    -1,   340,    -1,   341,    -1,   342,    -1,   343,    -1,\n+     344,    -1,   345,    -1,   346,    -1,   347,    -1,   348,    -1,\n+     350,    -1,   351,    -1,   353,    -1,   354,    -1,   355,    -1,\n+     357,    -1,   358,    -1,   359,    -1,   360,    -1,   361,    -1,\n+     362,    -1,   363,    -1,   364,    -1,   365,    -1,   366,    -1,\n+     367,    -1,   370,    -1,   371,    -1,   372,    -1,   373,    -1,\n+     374,    -1,   375,    -1,   377,    -1,   378,    -1,   379,    -1,\n+     381,    -1,   382,    -1,   384,    -1,   386,    -1,   387,    -1,\n+     388,    -1,   389,    -1,   390,    -1,   391,    -1,   392,    -1,\n+     393,    -1,   394,    -1,   395,    -1,   396,    -1,   397,    -1,\n+     399,    -1,   401,    -1,   403,    -1,   404,    -1,   406,    -1,\n+     408,    -1,   409,    -1,   410,    -1,   411,    -1,   412,    -1,\n+     418,    -1,   419,    -1,   421,    -1,   424,    -1,   425,    -1,\n+     427,    -1,   428,    -1,   429,    -1,   430,    -1,   431,    -1,\n+     434,    -1,   435,    -1,   436,    -1,   438,    -1,   439,    -1,\n+     440,    -1,   441,    -1,   443,    -1,   444,    -1,   445,    -1,\n+     446,    -1,   447,    -1,   451,    -1,   453,    -1,   454,    -1,\n+     455,    -1,   456,    -1,   457,    -1,   460,    -1,   463,    -1,\n+     464,    -1,   465,    -1,   466,    -1,   467,    -1,   468,    -1,\n+     480,    -1,   481,    -1,   482,    -1,   483,    -1,    53,    -1,\n+      54,    -1,    56,    -1,    57,    -1,    69,    -1,    70,    -1,\n+      77,    -1,    81,    -1,   110,    -1,   111,    -1,   148,    -1,\n+     154,    -1,   160,    -1,   171,    -1,   177,    -1,   178,    -1,\n+     204,    -1,   210,    -1,   211,    -1,   213,    -1,   241,    -1,\n+     260,    -1,   262,    -1,   266,    -1,   273,    -1,   275,    -1,\n+     290,    -1,   294,    -1,   311,    -1,   315,    -1,   330,    -1,\n+     356,    -1,   376,    -1,   383,    -1,   398,    -1,   400,    -1,\n+     414,    -1,   415,    -1,   420,    -1,   422,    -1,   426,    -1,\n+     448,    -1,   449,    -1,   469,    -1,   470,    -1,   471,    -1,\n+     472,    -1,   473,    -1,   474,    -1,   475,    -1,   476,    -1,\n+     477,    -1,   478,    -1,   479,    -1,    42,    -1,    49,    -1,\n+      55,    -1,    79,    -1,    87,    -1,    99,    -1,   166,    -1,\n+     168,    -1,   171,    -1,   172,    -1,   188,    -1,   203,    -1,\n+     216,    -1,   217,    -1,   219,    -1,   229,    -1,   231,    -1,\n+     241,    -1,   261,    -1,   270,    -1,   291,    -1,   293,    -1,\n+     312,    -1,   352,    -1,   380,    -1,   398,    -1,   407,    -1,\n+     452,    -1,    37,    -1,    42,    -1,    49,    -1,    55,    -1,\n+      79,    -1,    81,    -1,    87,    -1,    99,    -1,   166,    -1,\n+     168,    -1,   172,    -1,   188,    -1,   203,    -1,   216,    -1,\n+     217,    -1,   219,    -1,   229,    -1,   231,    -1,   261,    -1,\n+     270,    -1,   291,    -1,   293,    -1,   312,    -1,   352,    -1,\n+     369,    -1,   380,    -1,   407,    -1,   426,    -1,   452,    -1,\n+      37,    -1,    42,    -1,    49,    -1,    53,    -1,    54,    -1,\n+      55,    -1,    56,    -1,    57,    -1,    70,    -1,    69,    -1,\n+      77,    -1,    79,    -1,    81,    -1,    87,    -1,    99,    -1,\n+     110,    -1,   111,    -1,   148,    -1,   154,    -1,   160,    -1,\n+     166,    -1,   168,    -1,   171,    -1,   172,    -1,   177,    -1,\n+     178,    -1,   188,    -1,   203,    -1,   204,    -1,   211,    -1,\n+     213,    -1,   210,    -1,   216,    -1,   217,    -1,   219,    -1,\n+     229,    -1,   231,    -1,   241,    -1,   260,    -1,   261,    -1,\n+     262,    -1,   266,    -1,   270,    -1,   273,    -1,   275,    -1,\n+     291,    -1,   290,    -1,   293,    -1,   294,    -1,   311,    -1,\n+     312,    -1,   315,    -1,   330,    -1,   352,    -1,   356,    -1,\n+     369,    -1,   376,    -1,   380,    -1,   383,    -1,   398,    -1,\n+     400,    -1,   407,    -1,   414,    -1,   415,    -1,   420,    -1,\n+     422,    -1,   426,    -1,   448,    -1,   449,    -1,   452,    -1,\n+     469,    -1,   470,    -1,   471,    -1,   472,    -1,   473,    -1,\n+     474,    -1,   475,    -1,   476,    -1,   477,    -1,   478,    -1,\n+     479,    -1,    37,    -1,    42,    -1,    49,    -1,    55,    -1,\n+      79,    -1,    81,    -1,    87,    -1,    99,    -1,   166,    -1,\n+     168,    -1,   171,    -1,   172,    -1,   188,    -1,   203,    -1,\n+     216,    -1,   217,    -1,   219,    -1,   229,    -1,   231,    -1,\n+     241,    -1,   261,    -1,   270,    -1,   291,    -1,   293,    -1,\n+     312,    -1,   352,    -1,   369,    -1,   380,    -1,   398,    -1,\n+     407,    -1,   426,    -1,   452,    -1,    30,    -1,    34,    -1,\n+      35,    -1,    36,    -1,    38,    -1,    39,    -1,    40,    -1,\n+      41,    -1,    45,    -1,    58,    -1,    65,    -1,    66,    -1,\n+      72,    -1,    78,    -1,    80,    -1,    91,    -1,    98,    -1,\n+     113,    -1,   115,    -1,   122,    -1,   128,    -1,   129,    -1,\n+     135,    -1,   139,    -1,   143,    -1,   155,    -1,   157,    -1,\n+     162,    -1,   164,    -1,   167,    -1,   174,    -1,   176,    -1,\n+     180,    -1,   193,    -1,   201,    -1,   212,    -1,   214,    -1,\n+     226,    -1,   227,    -1,   232,    -1,   267,    -1,   272,    -1,\n+     279,    -1,   282,    -1,   283,    -1,   287,    -1,   288,    -1,\n+     305,    -1,   306,    -1,   307,    -1,   308,    -1,   319,    -1,\n+     326,    -1,   335,    -1,   349,    -1,   368,    -1,   385,    -1,\n+     402,    -1,   405,    -1,   413,    -1,   416,    -1,   417,    -1,\n+     423,    -1,   432,    -1,   433,    -1,   437,    -1,   442,    -1,\n+     450,    -1,   458,    -1,   459,    -1,   461,    -1,   462,    -1\n };\n \n /* YYRLINE[YYN] -- source line where rule number YYN was defined.  */\n static const yytype_uint16 yyrline[] =\n {\n-       0,   489,   489,   505,   517,   526,   527,   528,   529,   530,\n-     531,   532,   533,   534,   535,   536,   537,   538,   539,   540,\n-     541,   542,   543,   544,   545,   546,   547,   548,   549,   550,\n-     551,   552,   553,   554,   555,   556,   557,   558,   559,   560,\n-     561,   562,   564,     9,    18,    27,    36,    45,    54,    63,\n+       0,   490,   490,   506,   518,   527,   528,   529,   530,   531,\n+     532,   533,   534,   535,   536,   537,   538,   539,   540,   541,\n+     542,   543,   544,   545,   546,   547,   548,   549,   550,   551,\n+     552,   553,   554,   555,   556,   557,   558,   559,   560,   561,\n+     562,   563,   565,     9,    18,    27,    36,    45,    54,    63,\n       72,    85,    87,    93,    94,    99,   103,   107,   118,   126,\n      130,   139,   148,   157,   166,   175,   184,   192,   200,   209,\n      218,   227,   236,   253,   262,   271,   280,   290,   303,   318,\n@@ -2497,103 +2501,104 @@ static const yytype_uint16 yyrline[] =\n      138,   139,   142,   143,     8,    20,    33,    46,    58,    70,\n       86,    87,    91,    95,     7,     1,    30,    53,    54,    59,\n       63,    68,    72,    80,    81,    85,    86,    91,    92,    96,\n-      97,   102,   103,   104,   105,   106,   111,   119,   123,   128,\n-     129,   134,   138,   143,   147,   151,   155,   159,   163,   167,\n-     171,   175,   179,   183,   187,   191,   195,   199,   203,   211,\n-     217,   218,   219,   224,   228,    47,    48,    52,    53,    68,\n-      69,    76,    84,    92,   100,   108,   116,   127,   128,   155,\n-     160,   168,   184,   201,   218,   235,   236,   255,   259,   263,\n-     267,   271,   280,   290,   299,   308,   318,   328,   339,   353,\n-     370,   370,   374,   374,   378,   378,   382,   388,   395,   399,\n-     400,   404,   405,   419,   426,   433,   443,   444,   447,   459,\n-     470,   478,   483,   488,   493,   498,   506,   514,   519,   524,\n-     531,   532,   536,   537,   538,   542,   549,   550,   554,   555,\n-     559,   560,   561,   565,   566,   570,   571,   587,   588,   591,\n-     600,   611,   612,   613,   616,   617,   618,   622,   623,   624,\n-     625,   629,   630,   634,   636,   652,   654,   659,   662,   670,\n-     674,   678,   682,   686,   690,   697,   702,   709,   710,   714,\n-     719,   723,   727,   735,   742,   743,   748,   749,   753,   754,\n-     759,   761,   763,   768,   788,   789,   791,   796,   797,   801,\n-     802,   805,   806,   831,   832,   837,   841,   842,   846,   847,\n-     851,   852,   853,   854,   855,   859,   872,   879,   886,   893,\n-     894,   898,   899,   903,   904,   908,   909,   913,   914,   918,\n-     919,   923,   934,   935,   936,   937,   941,   942,   947,   948,\n-     949,   958,   964,   973,   974,   987,   988,   992,   993,   997,\n-     998,  1004,  1010,  1018,  1027,  1035,  1044,  1053,  1057,  1062,\n-    1072,  1085,  1086,  1089,  1090,  1091,  1094,  1102,  1112,  1113,\n-    1116,  1124,  1133,  1137,  1144,  1145,  1149,  1158,  1162,  1187,\n-    1191,  1204,  1218,  1233,  1245,  1258,  1272,  1286,  1299,  1314,\n-    1333,  1339,  1344,  1350,  1357,  1358,  1366,  1370,  1374,  1380,\n-    1387,  1392,  1393,  1394,  1395,  1396,  1397,  1401,  1402,  1414,\n-    1415,  1420,  1427,  1434,  1441,  1473,  1484,  1497,  1502,  1503,\n-    1506,  1507,  1510,  1511,  1516,  1517,  1522,  1526,  1532,  1553,\n-    1561,  1574,  1577,  1581,  1581,  1584,  1585,  1587,  1592,  1599,\n-    1604,  1610,  1615,  1621,  1627,  1633,  1642,  1644,  1647,  1651,\n-    1652,  1653,  1654,  1655,  1656,  1661,  1681,  1682,  1683,  1684,\n-    1695,  1709,  1710,  1716,  1721,  1726,  1731,  1736,  1741,  1746,\n-    1751,  1757,  1763,  1769,  1776,  1798,  1807,  1811,  1819,  1823,\n-    1831,  1843,  1864,  1868,  1874,  1878,  1891,  1899,  1909,  1911,\n-    1913,  1915,  1917,  1919,  1924,  1925,  1932,  1941,  1949,  1958,\n-    1969,  1977,  1978,  1979,  1983,  1983,  1986,  1986,  1989,  1989,\n-    1992,  1992,  1995,  1995,  1998,  1998,  2001,  2001,  2004,  2004,\n-    2007,  2009,  2011,  2013,  2015,  2017,  2019,  2021,  2023,  2028,\n-    2033,  2039,  2046,  2051,  2057,  2063,  2094,  2096,  2098,  2106,\n-    2121,  2123,  2125,  2127,  2129,  2131,  2133,  2135,  2137,  2139,\n-    2141,  2143,  2145,  2147,  2149,  2151,  2154,  2156,  2158,  2161,\n-    2163,  2165,  2167,  2169,  2174,  2179,  2186,  2191,  2198,  2203,\n-    2210,  2215,  2223,  2231,  2239,  2247,  2265,  2273,  2281,  2289,\n-    2297,  2305,  2313,  2317,  2333,  2341,  2349,  2357,  2365,  2373,\n-    2381,  2385,  2389,  2393,  2397,  2405,  2413,  2421,  2429,  2449,\n-    2471,  2482,  2489,  2503,  2511,  2519,  2539,  2541,  2543,  2545,\n-    2547,  2549,  2551,  2553,  2555,  2557,  2559,  2561,  2563,  2565,\n-    2567,  2569,  2571,  2573,  2575,  2577,  2579,  2581,  2585,  2589,\n-    2593,  2607,  2608,  2612,  2626,  2627,  2628,  2635,  2639,  2643,\n-    2646,  2657,  2662,  2664,  2675,  2699,  2710,  2721,  2725,  2732,\n-    2736,  2741,  2758,  2764,  2768,  2775,  2783,  2791,  2802,  2822,\n-    2858,  2869,  2870,  2877,  2883,  2885,  2887,  2891,  2900,  2905,\n-    2912,  2927,  2934,  2938,  2942,  2946,  2950,  2960,  2969,  2991,\n-    2992,  2996,  2997,  2998,  3002,  3003,  3010,  3011,  3015,  3016,\n-    3021,  3029,  3031,  3045,  3048,  3075,  3076,  3079,  3080,  3091,\n-    3097,  3104,  3113,  3130,  3175,  3183,  3191,  3199,  3207,  3228,\n-    3229,  3232,  3233,  3237,  3247,  3248,  3252,  3253,  3257,  3264,\n-    3265,  3270,  3271,  3276,  3277,  3280,  3281,  3282,  3285,  3286,\n-    3289,  3290,  3291,  3292,  3293,  3294,  3295,  3296,  3297,  3298,\n-    3299,  3300,  3301,  3302,  3305,  3307,  3312,  3314,  3319,  3321,\n-    3323,  3325,  3327,  3329,  3331,  3333,  3347,  3349,  3354,  3358,\n-    3365,  3370,  3376,  3380,  3387,  3392,  3399,  3404,  3412,  3416,\n-    3422,  3426,  3435,  3446,  3447,  3451,  3455,  3462,  3463,  3464,\n-    3465,  3466,  3467,  3468,  3469,  3470,  3471,  3481,  3485,  3492,\n-    3499,  3500,  3516,  3520,  3525,  3529,  3544,  3549,  3553,  3556,\n-    3559,  3560,  3561,  3564,  3571,  3581,  3595,  3596,  3600,  3611,\n-    3612,  3615,  3616,  3619,  3623,  3630,  3638,  3649,  3650,  3655,\n-    3656,  3660,  3661,  3662,  3666,  3675,  3683,  3699,  3700,  3705,\n-    3706,  3716,  3717,  3721,  3722,  3726,  3727,  3730,  3746,  3754,\n-    3764,  3765,  3768,  3769,  3772,  3776,  3777,  3781,  3782,  3785,\n-    3786,  3787,  3797,  3798,  3802,  3804,  3810,  3811,  3815,  3816,\n-    3819,  3830,  3833,  3844,  3848,  3852,  3864,  3868,  3877,  3884,\n-    3922,  3926,  3930,  3934,  3938,  3942,  3946,  3952,  3969,  3970,\n-    3971,  3974,  3975,  3976,  3979,  3980,  3981,  3984,  3985,  3988,\n-    3990,  3995,  3996,  3999,  4003,  4004,     7,    18,    19,    23,\n-      24,    25,    26,    27,     7,    26,    50,    73,    80,    85,\n-      86,    87,    88,     8,    33,    62,    66,    67,    72,    73,\n-      78,    79,    83,    84,    89,    90,     7,    16,    25,    34,\n-      43,    52,     5,    12,    22,    23,     7,    19,    33,     9,\n-      16,    26,    33,    44,    45,    50,    51,    52,    57,    58,\n-      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,\n-      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,\n-      79,    80,    81,    82,    83,    84,    85,    86,    90,    91,\n-      92,    97,    98,   103,   107,   115,   116,   121,   122,   123,\n-     129,   134,   142,   143,    10,    16,    22,    28,    38,    39,\n-      47,    58,    70,    78,    86,    93,   103,   105,   111,   115,\n-     119,   134,   141,   142,   143,   147,   148,     7,    14,    20,\n-      28,    29,     8,    22,    36,    48,    56,    70,    71,    72,\n-      73,    74,    87,    88,    93,    94,    98,    99,     7,    18,\n-      31,    35,    42,    53,    54,    60,    61,     9,    19,     7,\n-      18,    25,    34,    35,    39,    40,     2,     7,    15,    26,\n-      27,    34,     3,    10,    17,    24,    31,    38,    45,    52,\n-      61,    61,    63,    63,    65,    66,    70,    71,     6,     8,\n-      21,    34,    47,    65,    87,    88,    89,    90,    11,    24,\n-      37,    54,    55,    56,    61,    74,    74,    74,    74,    74,\n+      97,   102,   103,   104,   105,   106,   107,   112,   120,   124,\n+     129,   130,   135,   139,   144,   148,   152,   156,   160,   164,\n+     168,   172,   176,   180,   184,   188,   192,   196,   200,   204,\n+     212,   218,   219,   220,   225,   229,    47,    48,    52,    53,\n+      68,    69,    76,    84,    92,   100,   108,   116,   127,   128,\n+     155,   160,   168,   184,   201,   218,   235,   236,   255,   259,\n+     263,   267,   271,   280,   290,   299,   308,   318,   328,   339,\n+     353,   370,   370,   374,   374,   378,   378,   382,   388,   395,\n+     399,   400,   404,   405,   419,   426,   433,   443,   444,   447,\n+     460,   461,   462,   466,   477,   485,   490,   495,   500,   505,\n+     513,   521,   526,   531,   538,   539,   543,   544,   545,   549,\n+     556,   557,   561,   562,   566,   567,   568,   572,   573,   577,\n+     578,   594,   595,   598,   607,   618,   619,   620,   623,   624,\n+     625,   629,   630,   631,   632,   636,   637,   641,   643,   659,\n+     661,   666,   669,   677,   681,   685,   689,   693,   697,   704,\n+     709,   716,   717,   721,   726,   730,   734,   742,   749,   750,\n+     755,   756,   760,   761,   766,   768,   770,   775,   795,   796,\n+     798,   803,   804,   808,   809,   812,   813,   838,   839,   844,\n+     848,   849,   853,   854,   858,   859,   860,   861,   862,   866,\n+     879,   886,   893,   900,   901,   905,   906,   910,   911,   915,\n+     916,   920,   921,   925,   926,   930,   941,   942,   943,   944,\n+     948,   949,   954,   955,   956,   965,   971,   980,   981,   994,\n+     995,   999,  1000,  1004,  1005,  1011,  1017,  1025,  1034,  1042,\n+    1051,  1060,  1064,  1069,  1079,  1092,  1093,  1096,  1097,  1098,\n+    1101,  1109,  1119,  1120,  1123,  1131,  1140,  1144,  1151,  1152,\n+    1156,  1165,  1169,  1194,  1198,  1211,  1225,  1240,  1252,  1265,\n+    1279,  1293,  1306,  1321,  1340,  1346,  1351,  1357,  1364,  1365,\n+    1373,  1377,  1381,  1387,  1394,  1399,  1400,  1401,  1402,  1403,\n+    1404,  1408,  1409,  1421,  1422,  1427,  1434,  1441,  1448,  1480,\n+    1491,  1504,  1509,  1510,  1513,  1514,  1517,  1518,  1523,  1524,\n+    1529,  1533,  1539,  1560,  1568,  1581,  1584,  1588,  1588,  1591,\n+    1592,  1594,  1599,  1606,  1611,  1617,  1622,  1628,  1634,  1640,\n+    1649,  1651,  1654,  1658,  1659,  1660,  1661,  1662,  1663,  1668,\n+    1688,  1689,  1690,  1691,  1702,  1716,  1717,  1723,  1728,  1733,\n+    1738,  1743,  1748,  1753,  1758,  1764,  1770,  1776,  1783,  1805,\n+    1814,  1818,  1826,  1830,  1838,  1850,  1871,  1875,  1881,  1885,\n+    1898,  1906,  1916,  1918,  1920,  1922,  1924,  1926,  1931,  1932,\n+    1939,  1948,  1956,  1965,  1976,  1984,  1985,  1986,  1990,  1990,\n+    1993,  1993,  1996,  1996,  1999,  1999,  2002,  2002,  2005,  2005,\n+    2008,  2008,  2011,  2011,  2014,  2016,  2018,  2020,  2022,  2024,\n+    2026,  2028,  2030,  2035,  2040,  2046,  2053,  2058,  2064,  2070,\n+    2101,  2103,  2105,  2113,  2128,  2130,  2132,  2134,  2136,  2138,\n+    2140,  2142,  2144,  2146,  2148,  2150,  2152,  2154,  2156,  2158,\n+    2161,  2163,  2165,  2168,  2170,  2172,  2174,  2176,  2181,  2186,\n+    2193,  2198,  2205,  2210,  2217,  2222,  2230,  2238,  2246,  2254,\n+    2272,  2280,  2288,  2296,  2304,  2312,  2320,  2324,  2340,  2348,\n+    2356,  2364,  2372,  2380,  2388,  2392,  2396,  2400,  2404,  2412,\n+    2420,  2428,  2436,  2456,  2478,  2489,  2496,  2510,  2518,  2526,\n+    2546,  2548,  2550,  2552,  2554,  2556,  2558,  2560,  2562,  2564,\n+    2566,  2568,  2570,  2572,  2574,  2576,  2578,  2580,  2582,  2584,\n+    2586,  2588,  2592,  2596,  2600,  2614,  2615,  2619,  2633,  2634,\n+    2635,  2642,  2646,  2650,  2653,  2664,  2669,  2671,  2682,  2706,\n+    2717,  2728,  2732,  2739,  2743,  2747,  2764,  2772,  2781,  2785,\n+    2792,  2800,  2808,  2819,  2839,  2875,  2886,  2887,  2894,  2900,\n+    2902,  2904,  2908,  2917,  2922,  2929,  2944,  2951,  2955,  2959,\n+    2963,  2967,  2977,  2986,  3008,  3009,  3013,  3014,  3015,  3019,\n+    3020,  3027,  3028,  3032,  3033,  3038,  3046,  3048,  3062,  3065,\n+    3092,  3093,  3096,  3097,  3108,  3114,  3121,  3130,  3147,  3192,\n+    3200,  3208,  3216,  3224,  3245,  3246,  3249,  3250,  3254,  3264,\n+    3265,  3269,  3270,  3274,  3281,  3282,  3287,  3288,  3293,  3294,\n+    3297,  3298,  3299,  3302,  3303,  3306,  3307,  3308,  3309,  3310,\n+    3311,  3312,  3313,  3314,  3315,  3316,  3317,  3318,  3319,  3322,\n+    3324,  3329,  3331,  3336,  3338,  3340,  3342,  3344,  3346,  3348,\n+    3350,  3364,  3366,  3371,  3375,  3382,  3387,  3393,  3397,  3404,\n+    3409,  3416,  3421,  3429,  3433,  3439,  3443,  3452,  3463,  3464,\n+    3468,  3472,  3479,  3480,  3481,  3482,  3483,  3484,  3485,  3486,\n+    3487,  3488,  3498,  3502,  3509,  3516,  3517,  3533,  3537,  3542,\n+    3546,  3561,  3566,  3570,  3573,  3576,  3577,  3578,  3581,  3588,\n+    3598,  3612,  3613,  3617,  3628,  3629,  3632,  3633,  3636,  3640,\n+    3647,  3655,  3666,  3667,  3672,  3673,  3677,  3678,  3679,  3683,\n+    3692,  3700,  3716,  3717,  3722,  3723,  3733,  3734,  3738,  3739,\n+    3743,  3744,  3747,  3763,  3771,  3781,  3782,  3785,  3786,  3789,\n+    3793,  3794,  3798,  3799,  3802,  3803,  3804,  3814,  3815,  3819,\n+    3821,  3827,  3828,  3832,  3833,  3836,  3847,  3850,  3861,  3865,\n+    3869,  3881,  3885,  3894,  3901,  3939,  3943,  3947,  3951,  3955,\n+    3959,  3963,  3969,  3986,  3987,  3988,  3991,  3992,  3993,  3996,\n+    3997,  3998,  4001,  4002,  4005,  4007,  4012,  4013,  4016,  4020,\n+    4021,     7,    18,    19,    23,    24,    25,    26,    27,     7,\n+      26,    50,    73,    80,    85,    86,    87,    88,     8,    33,\n+      62,    66,    67,    72,    73,    78,    79,    83,    84,    89,\n+      90,     7,    16,    25,    34,    43,    52,     5,    12,    22,\n+      23,     7,    19,    33,     9,    16,    26,    33,    44,    45,\n+      50,    51,    52,    57,    58,    59,    60,    61,    62,    63,\n+      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,\n+      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,\n+      84,    85,    86,    90,    91,    92,    97,    98,   103,   107,\n+     115,   116,   121,   122,   123,   129,   134,   142,   143,    10,\n+      16,    22,    28,    38,    39,    47,    58,    70,    78,    86,\n+      93,   103,   105,   111,   115,   119,   134,   141,   142,   143,\n+     147,   148,     7,    14,    20,    28,    29,     8,    22,    36,\n+      48,    56,    70,    71,    72,    73,    74,    87,    88,    93,\n+      94,    98,    99,     7,    18,    31,    35,    42,    53,    54,\n+      60,    61,     9,    19,     7,    18,    25,    34,    35,    39,\n+      40,     2,     7,    12,    17,    26,    33,    43,    44,    51,\n+       3,    10,    17,    24,    31,    38,    45,    52,    61,    61,\n+      63,    63,    65,    66,    70,    71,     6,     8,    21,    34,\n+      47,    65,    87,    88,    89,    90,    11,    24,    37,    54,\n+      55,    56,    61,    74,    74,    74,    74,    74,    74,    74,\n       74,    74,    74,    74,    74,    74,    74,    74,    74,    74,\n       74,    74,    74,    74,    74,    74,    74,    74,    74,    74,\n       74,    74,    74,    74,    74,    74,    74,    74,    74,    74,\n@@ -2624,18 +2629,18 @@ static const yytype_uint16 yyrline[] =\n       74,    74,    74,    74,    74,    74,    74,    74,    74,    74,\n       74,    74,    74,    74,    74,    74,    74,    74,    74,    74,\n       74,    74,    74,    74,    74,    74,    74,    74,    74,    74,\n-      74,    74,    74,    74,    75,    75,    75,    75,    75,    75,\n+      74,    74,    75,    75,    75,    75,    75,    75,    75,    75,\n       75,    75,    75,    75,    75,    75,    75,    75,    75,    75,\n       75,    75,    75,    75,    75,    75,    75,    75,    75,    75,\n       75,    75,    75,    75,    75,    75,    75,    75,    75,    75,\n       75,    75,    75,    75,    75,    75,    75,    75,    75,    75,\n-      75,    75,    75,    75,    75,    75,    75,    75,    76,    76,\n+      75,    75,    75,    75,    75,    75,    76,    76,    76,    76,\n       76,    76,    76,    76,    76,    76,    76,    76,    76,    76,\n       76,    76,    76,    76,    76,    76,    76,    76,    76,    76,\n-      76,    76,    76,    76,    76,    76,    77,    77,    77,    77,\n+      76,    76,    76,    76,    77,    77,    77,    77,    77,    77,\n       77,    77,    77,    77,    77,    77,    77,    77,    77,    77,\n       77,    77,    77,    77,    77,    77,    77,    77,    77,    77,\n-      77,    77,    77,    77,    77,    78,    78,    78,    78,    78,\n+      77,    77,    77,    78,    78,    78,    78,    78,    78,    78,\n       78,    78,    78,    78,    78,    78,    78,    78,    78,    78,\n       78,    78,    78,    78,    78,    78,    78,    78,    78,    78,\n       78,    78,    78,    78,    78,    78,    78,    78,    78,    78,\n@@ -2643,17 +2648,17 @@ static const yytype_uint16 yyrline[] =\n       78,    78,    78,    78,    78,    78,    78,    78,    78,    78,\n       78,    78,    78,    78,    78,    78,    78,    78,    78,    78,\n       78,    78,    78,    78,    78,    78,    78,    78,    78,    78,\n-      78,    78,    78,    78,    78,    78,    79,    79,    79,    79,\n+      78,    78,    78,    78,    79,    79,    79,    79,    79,    79,\n       79,    79,    79,    79,    79,    79,    79,    79,    79,    79,\n       79,    79,    79,    79,    79,    79,    79,    79,    79,    79,\n-      79,    79,    79,    79,    79,    79,    79,    79,    80,    80,\n+      79,    79,    79,    79,    79,    79,    80,    80,    80,    80,\n       80,    80,    80,    80,    80,    80,    80,    80,    80,    80,\n       80,    80,    80,    80,    80,    80,    80,    80,    80,    80,\n       80,    80,    80,    80,    80,    80,    80,    80,    80,    80,\n       80,    80,    80,    80,    80,    80,    80,    80,    80,    80,\n       80,    80,    80,    80,    80,    80,    80,    80,    80,    80,\n       80,    80,    80,    80,    80,    80,    80,    80,    80,    80,\n-      80,    80,    80,    80,    80,    80,    80,    80,    80,    80\n+      80,    80,    80,    80,    80,    80,    80,    80\n };\n #endif\n \n@@ -2784,9 +2789,9 @@ static const char *const yytname[] =\n   \"select_no_parens\", \"select_clause\", \"opt_select\", \"simple_select\",\n   \"value_or_values\", \"pivot_keyword\", \"unpivot_keyword\",\n   \"pivot_column_entry\", \"pivot_column_list_internal\", \"pivot_column_list\",\n-  \"with_clause\", \"cte_list\", \"common_table_expr\", \"into_clause\",\n-  \"OptTempTableName\", \"opt_table\", \"all_or_distinct\", \"by_name\",\n-  \"distinct_clause\", \"opt_all_clause\", \"opt_ignore_nulls\",\n+  \"with_clause\", \"cte_list\", \"common_table_expr\", \"opt_materialized\",\n+  \"into_clause\", \"OptTempTableName\", \"opt_table\", \"all_or_distinct\",\n+  \"by_name\", \"distinct_clause\", \"opt_all_clause\", \"opt_ignore_nulls\",\n   \"opt_sort_clause\", \"sort_clause\", \"sortby_list\", \"sortby\",\n   \"opt_asc_desc\", \"opt_nulls_order\", \"select_limit\", \"opt_select_limit\",\n   \"limit_clause\", \"offset_clause\", \"sample_count\", \"sample_clause\",\n@@ -2817,14 +2822,14 @@ static const char *const yytname[] =\n   \"year_keyword\", \"month_keyword\", \"day_keyword\", \"hour_keyword\",\n   \"minute_keyword\", \"second_keyword\", \"millisecond_keyword\",\n   \"microsecond_keyword\", \"opt_interval\", \"a_expr\", \"b_expr\", \"c_expr\",\n-  \"d_expr\", \"indirection_expr\", \"func_application\", \"func_expr\",\n-  \"func_expr_windowless\", \"func_expr_common_subexpr\", \"list_comprehension\",\n-  \"within_group_clause\", \"filter_clause\", \"export_clause\", \"window_clause\",\n-  \"window_definition_list\", \"window_definition\", \"over_clause\",\n-  \"window_specification\", \"opt_existing_window_name\",\n-  \"opt_partition_clause\", \"opt_frame_clause\", \"frame_extent\",\n-  \"frame_bound\", \"qualified_row\", \"row\", \"dict_arg\", \"dict_arguments\",\n-  \"dict_arguments_opt_comma\", \"map_arg\", \"map_arguments\",\n+  \"d_expr\", \"indirection_expr\", \"struct_expr\", \"func_application\",\n+  \"func_expr\", \"func_expr_windowless\", \"func_expr_common_subexpr\",\n+  \"list_comprehension\", \"within_group_clause\", \"filter_clause\",\n+  \"export_clause\", \"window_clause\", \"window_definition_list\",\n+  \"window_definition\", \"over_clause\", \"window_specification\",\n+  \"opt_existing_window_name\", \"opt_partition_clause\", \"opt_frame_clause\",\n+  \"frame_extent\", \"frame_bound\", \"qualified_row\", \"row\", \"dict_arg\",\n+  \"dict_arguments\", \"dict_arguments_opt_comma\", \"map_arg\", \"map_arguments\",\n   \"map_arguments_opt_comma\", \"opt_map_arguments_opt_comma\", \"sub_type\",\n   \"all_Op\", \"MathOp\", \"qual_Op\", \"qual_all_Op\", \"subquery_Op\",\n   \"any_operator\", \"c_expr_list\", \"c_expr_list_opt_comma\", \"expr_list\",\n@@ -2973,163 +2978,164 @@ static const yytype_uint16 yyr1[] =\n      629,   629,   630,   630,   631,   631,   631,   631,   631,   631,\n      632,   632,   633,   633,   634,   635,   635,   636,   636,   637,\n      637,   638,   638,   639,   639,   640,   640,   641,   641,   642,\n-     642,   643,   643,   643,   643,   643,   644,   645,   645,   646,\n-     646,   647,   647,   648,   648,   648,   648,   648,   648,   648,\n-     648,   648,   648,   648,   648,   648,   648,   648,   648,   649,\n-     650,   650,   650,   651,   651,   652,   652,   653,   653,   654,\n-     654,   654,   654,   654,   654,   654,   654,   655,   655,   656,\n-     656,   657,   657,   657,   657,   657,   657,   657,   657,   657,\n+     642,   643,   643,   643,   643,   643,   643,   644,   645,   645,\n+     646,   646,   647,   647,   648,   648,   648,   648,   648,   648,\n+     648,   648,   648,   648,   648,   648,   648,   648,   648,   648,\n+     649,   650,   650,   650,   651,   651,   652,   652,   653,   653,\n+     654,   654,   654,   654,   654,   654,   654,   654,   655,   655,\n+     656,   656,   657,   657,   657,   657,   657,   657,   657,   657,\n      657,   657,   657,   657,   657,   657,   657,   657,   657,   657,\n-     658,   658,   659,   659,   660,   660,   661,   661,   661,   662,\n-     662,   663,   663,   664,   664,   664,   665,   665,   666,   667,\n-     667,   668,   668,   668,   668,   668,   668,   668,   668,   668,\n-     669,   669,   670,   670,   670,   671,   672,   672,   673,   673,\n-     674,   674,   674,   675,   675,   676,   676,   677,   677,   678,\n-     678,   679,   679,   679,   680,   680,   680,   681,   681,   681,\n-     681,   682,   682,   683,   683,   683,   683,   684,   684,   685,\n-     685,   685,   685,   685,   685,   686,   686,   687,   687,   688,\n-     688,   688,   688,   689,   690,   690,   691,   691,   692,   692,\n-     692,   692,   692,   693,   694,   694,   694,   695,   695,   696,\n-     696,   697,   697,   698,   698,   698,   699,   699,   700,   700,\n-     701,   701,   701,   701,   701,   702,   703,   704,   705,   706,\n-     706,   707,   707,   708,   708,   709,   709,   710,   710,   711,\n-     711,   712,   713,   713,   713,   713,   714,   714,   715,   715,\n-     715,   716,   716,   717,   717,   718,   718,   719,   719,   720,\n-     720,   721,   721,   721,   721,   721,   721,   721,   721,   721,\n-     721,   722,   722,   723,   723,   723,   724,   724,   725,   725,\n-     726,   726,   727,   727,   728,   728,   729,   730,   730,   731,\n-     731,   731,   731,   731,   731,   731,   731,   731,   731,   731,\n-     732,   732,   732,   732,   733,   733,   734,   734,   734,   734,\n-     734,   735,   735,   735,   735,   735,   735,   736,   736,   737,\n-     737,   738,   738,   738,   738,   739,   739,   740,   741,   741,\n-     742,   742,   743,   743,   744,   744,   745,   745,   746,   747,\n-     747,   748,   748,   749,   749,   750,   750,   751,   751,   751,\n-     751,   751,   751,   751,   751,   751,   752,   752,   752,   753,\n-     753,   753,   753,   753,   753,   753,   754,   754,   754,   754,\n-     755,   756,   756,   757,   757,   757,   757,   757,   757,   757,\n-     757,   757,   757,   757,   758,   758,   759,   759,   760,   760,\n-     761,   762,   763,   763,   764,   764,   765,   766,   767,   767,\n-     767,   767,   767,   767,   768,   768,   769,   769,   769,   769,\n-     770,   771,   771,   771,   772,   772,   773,   773,   774,   774,\n-     775,   775,   776,   776,   777,   777,   778,   778,   779,   779,\n-     780,   780,   780,   780,   780,   780,   780,   780,   780,   780,\n-     780,   780,   780,   780,   780,   780,   781,   781,   781,   781,\n-     781,   781,   781,   781,   781,   781,   781,   781,   781,   781,\n-     781,   781,   781,   781,   781,   781,   781,   781,   781,   781,\n-     781,   781,   781,   781,   781,   781,   781,   781,   781,   781,\n-     781,   781,   781,   781,   781,   781,   781,   781,   781,   781,\n+     657,   658,   658,   659,   659,   660,   660,   661,   661,   661,\n+     662,   662,   663,   663,   664,   664,   664,   665,   665,   666,\n+     667,   667,   667,   668,   668,   669,   669,   669,   669,   669,\n+     669,   669,   669,   669,   670,   670,   671,   671,   671,   672,\n+     673,   673,   674,   674,   675,   675,   675,   676,   676,   677,\n+     677,   678,   678,   679,   679,   680,   680,   680,   681,   681,\n+     681,   682,   682,   682,   682,   683,   683,   684,   684,   684,\n+     684,   685,   685,   686,   686,   686,   686,   686,   686,   687,\n+     687,   688,   688,   689,   689,   689,   689,   690,   691,   691,\n+     692,   692,   693,   693,   693,   693,   693,   694,   695,   695,\n+     695,   696,   696,   697,   697,   698,   698,   699,   699,   699,\n+     700,   700,   701,   701,   702,   702,   702,   702,   702,   703,\n+     704,   705,   706,   707,   707,   708,   708,   709,   709,   710,\n+     710,   711,   711,   712,   712,   713,   714,   714,   714,   714,\n+     715,   715,   716,   716,   716,   717,   717,   718,   718,   719,\n+     719,   720,   720,   721,   721,   722,   722,   722,   722,   722,\n+     722,   722,   722,   722,   722,   723,   723,   724,   724,   724,\n+     725,   725,   726,   726,   727,   727,   728,   728,   729,   729,\n+     730,   731,   731,   732,   732,   732,   732,   732,   732,   732,\n+     732,   732,   732,   732,   733,   733,   733,   733,   734,   734,\n+     735,   735,   735,   735,   735,   736,   736,   736,   736,   736,\n+     736,   737,   737,   738,   738,   739,   739,   739,   739,   740,\n+     740,   741,   742,   742,   743,   743,   744,   744,   745,   745,\n+     746,   746,   747,   748,   748,   749,   749,   750,   750,   751,\n+     751,   752,   752,   752,   752,   752,   752,   752,   752,   752,\n+     753,   753,   753,   754,   754,   754,   754,   754,   754,   754,\n+     755,   755,   755,   755,   756,   757,   757,   758,   758,   758,\n+     758,   758,   758,   758,   758,   758,   758,   758,   759,   759,\n+     760,   760,   761,   761,   762,   763,   764,   764,   765,   765,\n+     766,   767,   768,   768,   768,   768,   768,   768,   769,   769,\n+     770,   770,   770,   770,   771,   772,   772,   772,   773,   773,\n+     774,   774,   775,   775,   776,   776,   777,   777,   778,   778,\n+     779,   779,   780,   780,   781,   781,   781,   781,   781,   781,\n      781,   781,   781,   781,   781,   781,   781,   781,   781,   781,\n-     781,   781,   781,   781,   781,   781,   781,   781,   781,   781,\n-     781,   781,   781,   781,   781,   781,   782,   782,   782,   782,\n      782,   782,   782,   782,   782,   782,   782,   782,   782,   782,\n      782,   782,   782,   782,   782,   782,   782,   782,   782,   782,\n-     782,   783,   783,   783,   784,   784,   784,   784,   784,   784,\n-     784,   784,   784,   784,   784,   784,   784,   785,   785,   785,\n-     785,   785,   785,   786,   786,   786,   786,   786,   786,   787,\n-     787,   788,   788,   789,   789,   789,   789,   789,   789,   789,\n-     789,   789,   789,   789,   789,   789,   789,   790,   790,   791,\n-     791,   792,   792,   792,   793,   793,   794,   794,   795,   795,\n-     796,   797,   797,   797,   798,   799,   799,   800,   800,   801,\n-     801,   801,   802,   802,   803,   803,   803,   803,   803,   804,\n-     804,   805,   805,   806,   807,   807,   808,   808,   809,   810,\n-     810,   811,   811,   812,   812,   813,   813,   813,   814,   814,\n-     815,   815,   815,   815,   815,   815,   815,   815,   815,   815,\n-     815,   815,   815,   815,   816,   816,   817,   817,   818,   818,\n-     818,   818,   818,   818,   818,   818,   819,   819,   820,   820,\n-     821,   821,   822,   822,   823,   823,   824,   824,   825,   825,\n-     826,   826,   826,   827,   827,   828,   828,   829,   829,   829,\n-     829,   829,   829,   829,   829,   829,   829,   830,   830,   831,\n-     832,   832,   833,   833,   833,   833,   833,   833,   834,   835,\n-     836,   836,   836,   837,   837,   838,   839,   839,   840,   841,\n-     841,   842,   842,   843,   843,   532,   532,   844,   844,   845,\n-     845,   846,   846,   846,   847,   847,   847,   848,   848,   849,\n-     849,   850,   850,   851,   851,   852,   852,   853,   853,   853,\n-     854,   854,   855,   855,   856,   857,   857,   858,   858,   859,\n-     859,   859,   860,   860,   861,   861,   862,   862,   863,   863,\n-     864,   865,   865,   866,   866,   866,   866,   866,   866,   866,\n-     866,   866,   866,   866,   866,   866,   866,   867,   868,   868,\n-     868,   869,   869,   869,   870,   870,   870,   871,   871,   872,\n-     872,   873,   873,   874,   875,   875,   876,   877,   877,   878,\n-     878,   878,   878,   878,   879,   879,   879,   880,   880,   881,\n-     881,   881,   881,   882,   882,   883,   884,   884,   885,   885,\n-     886,   886,   887,   887,   888,   888,   889,   889,   889,   889,\n-     889,   889,   890,   890,   891,   891,   892,   892,   893,   894,\n-     894,   894,   894,   895,   895,   896,   896,   896,   897,   897,\n-     897,   897,   897,   897,   897,   897,   897,   897,   897,   897,\n-     897,   897,   897,   897,   897,   897,   897,   897,   897,   897,\n-     897,   897,   897,   897,   897,   897,   897,   897,   898,   898,\n-     898,   899,   899,   900,   900,   901,   901,   902,   902,   902,\n-     902,   903,   904,   904,   905,   905,   905,   905,   906,   906,\n-     906,   906,   907,   907,   907,   907,   908,   908,   909,   909,\n-     909,   909,   909,   909,   909,   910,   910,   911,   911,   911,\n-     912,   912,   913,   913,   913,   913,   913,   914,   914,   914,\n-     914,   914,   915,   915,   916,   916,   917,   917,   918,   918,\n-     919,   919,   919,   920,   920,   921,   921,   922,   922,   923,\n-     924,   924,   925,   925,   926,   926,   927,   928,   928,   929,\n-     929,   929,   930,   930,   930,   930,   930,   930,   930,   930,\n-     931,   931,   932,   932,   933,   933,   934,   934,   935,   936,\n-     936,   936,   936,   936,   937,   937,   937,   937,   938,   938,\n-     938,   939,   939,   939,   940,   941,   941,   941,   941,   941,\n-     941,   941,   941,   941,   941,   941,   941,   941,   941,   941,\n-     941,   941,   941,   941,   941,   941,   941,   941,   941,   941,\n-     941,   941,   941,   941,   941,   941,   941,   941,   941,   941,\n-     941,   941,   941,   941,   941,   941,   941,   941,   941,   941,\n-     941,   941,   941,   941,   941,   941,   941,   941,   941,   941,\n-     941,   941,   941,   941,   941,   941,   941,   941,   941,   941,\n-     941,   941,   941,   941,   941,   941,   941,   941,   941,   941,\n-     941,   941,   941,   941,   941,   941,   941,   941,   941,   941,\n-     941,   941,   941,   941,   941,   941,   941,   941,   941,   941,\n-     941,   941,   941,   941,   941,   941,   941,   941,   941,   941,\n-     941,   941,   941,   941,   941,   941,   941,   941,   941,   941,\n-     941,   941,   941,   941,   941,   941,   941,   941,   941,   941,\n-     941,   941,   941,   941,   941,   941,   941,   941,   941,   941,\n-     941,   941,   941,   941,   941,   941,   941,   941,   941,   941,\n-     941,   941,   941,   941,   941,   941,   941,   941,   941,   941,\n-     941,   941,   941,   941,   941,   941,   941,   941,   941,   941,\n-     941,   941,   941,   941,   941,   941,   941,   941,   941,   941,\n-     941,   941,   941,   941,   941,   941,   941,   941,   941,   941,\n-     941,   941,   941,   941,   941,   941,   941,   941,   941,   941,\n-     941,   941,   941,   941,   941,   941,   941,   941,   941,   941,\n-     941,   941,   941,   941,   941,   941,   941,   941,   941,   941,\n-     941,   941,   941,   941,   941,   941,   941,   941,   941,   941,\n-     941,   941,   941,   941,   941,   941,   941,   941,   941,   941,\n-     941,   941,   941,   941,   941,   941,   941,   941,   941,   941,\n-     941,   941,   941,   941,   941,   941,   941,   941,   941,   941,\n-     941,   941,   941,   941,   941,   941,   941,   941,   941,   941,\n-     941,   941,   941,   941,   941,   941,   941,   941,   941,   941,\n-     941,   941,   941,   941,   941,   941,   941,   941,   941,   941,\n-     941,   941,   941,   941,   941,   941,   941,   941,   941,   941,\n-     941,   941,   941,   941,   941,   941,   941,   941,   941,   941,\n-     941,   941,   941,   941,   942,   942,   942,   942,   942,   942,\n-     942,   942,   942,   942,   942,   942,   942,   942,   942,   942,\n-     942,   942,   942,   942,   942,   942,   942,   942,   942,   942,\n-     942,   942,   942,   942,   942,   942,   942,   942,   942,   942,\n-     942,   942,   942,   942,   942,   942,   942,   942,   942,   942,\n-     942,   942,   942,   942,   942,   942,   942,   942,   943,   943,\n+     782,   782,   782,   782,   782,   782,   782,   782,   782,   782,\n+     782,   782,   782,   782,   782,   782,   782,   782,   782,   782,\n+     782,   782,   782,   782,   782,   782,   782,   782,   782,   782,\n+     782,   782,   782,   782,   782,   782,   782,   782,   782,   782,\n+     782,   782,   782,   782,   782,   782,   782,   782,   782,   782,\n+     783,   783,   783,   783,   783,   783,   783,   783,   783,   783,\n+     783,   783,   783,   783,   783,   783,   783,   783,   783,   783,\n+     783,   783,   783,   783,   783,   784,   784,   784,   785,   785,\n+     785,   785,   785,   785,   785,   785,   785,   785,   785,   785,\n+     785,   786,   786,   786,   786,   786,   786,   787,   788,   788,\n+     788,   788,   788,   788,   789,   789,   790,   790,   791,   791,\n+     791,   791,   791,   791,   791,   791,   791,   791,   791,   791,\n+     791,   791,   792,   792,   793,   793,   794,   794,   794,   795,\n+     795,   796,   796,   797,   797,   798,   799,   799,   799,   800,\n+     801,   801,   802,   802,   803,   803,   803,   804,   804,   805,\n+     805,   805,   805,   805,   806,   806,   807,   807,   808,   809,\n+     809,   810,   810,   811,   812,   812,   813,   813,   814,   814,\n+     815,   815,   815,   816,   816,   817,   817,   817,   817,   817,\n+     817,   817,   817,   817,   817,   817,   817,   817,   817,   818,\n+     818,   819,   819,   820,   820,   820,   820,   820,   820,   820,\n+     820,   821,   821,   822,   822,   823,   823,   824,   824,   825,\n+     825,   826,   826,   827,   827,   828,   828,   828,   829,   829,\n+     830,   830,   831,   831,   831,   831,   831,   831,   831,   831,\n+     831,   831,   832,   832,   833,   834,   834,   835,   835,   835,\n+     835,   835,   835,   836,   837,   838,   838,   838,   839,   839,\n+     840,   841,   841,   842,   843,   843,   844,   844,   845,   845,\n+     532,   532,   846,   846,   847,   847,   848,   848,   848,   849,\n+     849,   849,   850,   850,   851,   851,   852,   852,   853,   853,\n+     854,   854,   855,   855,   855,   856,   856,   857,   857,   858,\n+     859,   859,   860,   860,   861,   861,   861,   862,   862,   863,\n+     863,   864,   864,   865,   865,   866,   867,   867,   868,   868,\n+     868,   868,   868,   868,   868,   868,   868,   868,   868,   868,\n+     868,   868,   869,   870,   870,   870,   871,   871,   871,   872,\n+     872,   872,   873,   873,   874,   874,   875,   875,   876,   877,\n+     877,   878,   879,   879,   880,   880,   880,   880,   880,   881,\n+     881,   881,   882,   882,   883,   883,   883,   883,   884,   884,\n+     885,   886,   886,   887,   887,   888,   888,   889,   889,   890,\n+     890,   891,   891,   891,   891,   891,   891,   892,   892,   893,\n+     893,   894,   894,   895,   896,   896,   896,   896,   897,   897,\n+     898,   898,   898,   899,   899,   899,   899,   899,   899,   899,\n+     899,   899,   899,   899,   899,   899,   899,   899,   899,   899,\n+     899,   899,   899,   899,   899,   899,   899,   899,   899,   899,\n+     899,   899,   899,   900,   900,   900,   901,   901,   902,   902,\n+     903,   903,   904,   904,   904,   904,   905,   906,   906,   907,\n+     907,   907,   907,   908,   908,   908,   908,   909,   909,   909,\n+     909,   910,   910,   911,   911,   911,   911,   911,   911,   911,\n+     912,   912,   913,   913,   913,   914,   914,   915,   915,   915,\n+     915,   915,   916,   916,   916,   916,   916,   917,   917,   918,\n+     918,   919,   919,   920,   920,   921,   921,   921,   922,   922,\n+     923,   923,   924,   924,   925,   926,   926,   927,   927,   928,\n+     928,   929,   929,   929,   929,   930,   930,   931,   931,   931,\n+     932,   932,   932,   932,   932,   932,   932,   932,   933,   933,\n+     934,   934,   935,   935,   936,   936,   937,   938,   938,   938,\n+     938,   938,   939,   939,   939,   939,   940,   940,   940,   941,\n+     941,   941,   942,   943,   943,   943,   943,   943,   943,   943,\n+     943,   943,   943,   943,   943,   943,   943,   943,   943,   943,\n+     943,   943,   943,   943,   943,   943,   943,   943,   943,   943,\n+     943,   943,   943,   943,   943,   943,   943,   943,   943,   943,\n+     943,   943,   943,   943,   943,   943,   943,   943,   943,   943,\n+     943,   943,   943,   943,   943,   943,   943,   943,   943,   943,\n+     943,   943,   943,   943,   943,   943,   943,   943,   943,   943,\n+     943,   943,   943,   943,   943,   943,   943,   943,   943,   943,\n+     943,   943,   943,   943,   943,   943,   943,   943,   943,   943,\n+     943,   943,   943,   943,   943,   943,   943,   943,   943,   943,\n+     943,   943,   943,   943,   943,   943,   943,   943,   943,   943,\n+     943,   943,   943,   943,   943,   943,   943,   943,   943,   943,\n+     943,   943,   943,   943,   943,   943,   943,   943,   943,   943,\n+     943,   943,   943,   943,   943,   943,   943,   943,   943,   943,\n+     943,   943,   943,   943,   943,   943,   943,   943,   943,   943,\n+     943,   943,   943,   943,   943,   943,   943,   943,   943,   943,\n+     943,   943,   943,   943,   943,   943,   943,   943,   943,   943,\n+     943,   943,   943,   943,   943,   943,   943,   943,   943,   943,\n+     943,   943,   943,   943,   943,   943,   943,   943,   943,   943,\n      943,   943,   943,   943,   943,   943,   943,   943,   943,   943,\n      943,   943,   943,   943,   943,   943,   943,   943,   943,   943,\n-     943,   943,   943,   943,   943,   943,   944,   944,   944,   944,\n+     943,   943,   943,   943,   943,   943,   943,   943,   943,   943,\n+     943,   943,   943,   943,   943,   943,   943,   943,   943,   943,\n+     943,   943,   943,   943,   943,   943,   943,   943,   943,   943,\n+     943,   943,   943,   943,   943,   943,   943,   943,   943,   943,\n+     943,   943,   943,   943,   943,   943,   943,   943,   943,   943,\n+     943,   943,   943,   943,   943,   943,   943,   943,   943,   943,\n+     943,   943,   943,   943,   943,   943,   943,   943,   943,   943,\n+     943,   943,   943,   943,   943,   943,   943,   943,   943,   943,\n+     943,   943,   943,   943,   943,   943,   943,   943,   943,   943,\n+     943,   943,   943,   943,   943,   943,   943,   943,   943,   943,\n+     943,   943,   944,   944,   944,   944,   944,   944,   944,   944,\n      944,   944,   944,   944,   944,   944,   944,   944,   944,   944,\n      944,   944,   944,   944,   944,   944,   944,   944,   944,   944,\n-     944,   944,   944,   944,   944,   945,   945,   945,   945,   945,\n-     945,   945,   945,   945,   945,   945,   945,   945,   945,   945,\n-     945,   945,   945,   945,   945,   945,   945,   945,   945,   945,\n-     945,   945,   945,   945,   945,   945,   945,   945,   945,   945,\n-     945,   945,   945,   945,   945,   945,   945,   945,   945,   945,\n-     945,   945,   945,   945,   945,   945,   945,   945,   945,   945,\n+     944,   944,   944,   944,   944,   944,   944,   944,   944,   944,\n+     944,   944,   944,   944,   944,   944,   944,   944,   944,   944,\n+     944,   944,   944,   944,   944,   944,   945,   945,   945,   945,\n      945,   945,   945,   945,   945,   945,   945,   945,   945,   945,\n      945,   945,   945,   945,   945,   945,   945,   945,   945,   945,\n-     945,   945,   945,   945,   945,   945,   946,   946,   946,   946,\n+     945,   945,   945,   945,   946,   946,   946,   946,   946,   946,\n      946,   946,   946,   946,   946,   946,   946,   946,   946,   946,\n      946,   946,   946,   946,   946,   946,   946,   946,   946,   946,\n-     946,   946,   946,   946,   946,   946,   946,   946,   947,   947,\n+     946,   946,   946,   947,   947,   947,   947,   947,   947,   947,\n+     947,   947,   947,   947,   947,   947,   947,   947,   947,   947,\n      947,   947,   947,   947,   947,   947,   947,   947,   947,   947,\n      947,   947,   947,   947,   947,   947,   947,   947,   947,   947,\n      947,   947,   947,   947,   947,   947,   947,   947,   947,   947,\n      947,   947,   947,   947,   947,   947,   947,   947,   947,   947,\n      947,   947,   947,   947,   947,   947,   947,   947,   947,   947,\n      947,   947,   947,   947,   947,   947,   947,   947,   947,   947,\n-     947,   947,   947,   947,   947,   947,   947,   947,   947,   947\n+     947,   947,   947,   947,   948,   948,   948,   948,   948,   948,\n+     948,   948,   948,   948,   948,   948,   948,   948,   948,   948,\n+     948,   948,   948,   948,   948,   948,   948,   948,   948,   948,\n+     948,   948,   948,   948,   948,   948,   949,   949,   949,   949,\n+     949,   949,   949,   949,   949,   949,   949,   949,   949,   949,\n+     949,   949,   949,   949,   949,   949,   949,   949,   949,   949,\n+     949,   949,   949,   949,   949,   949,   949,   949,   949,   949,\n+     949,   949,   949,   949,   949,   949,   949,   949,   949,   949,\n+     949,   949,   949,   949,   949,   949,   949,   949,   949,   949,\n+     949,   949,   949,   949,   949,   949,   949,   949,   949,   949,\n+     949,   949,   949,   949,   949,   949,   949,   949\n };\n \n /* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */\n@@ -3180,103 +3186,104 @@ static const yytype_uint8 yyr2[] =\n        1,     1,     1,     3,     8,    11,    10,     7,    10,     9,\n        1,     1,     2,     3,     8,    11,     9,     1,     1,     3,\n        0,     1,     3,     1,     0,     1,     0,     1,     0,     1,\n-       3,     1,     1,     1,     3,     0,     2,     2,     0,     2,\n-       0,     1,     0,     1,     1,     1,     3,     3,     1,     1,\n-       3,     3,     3,     3,     3,     3,     4,     3,     2,     1,\n-       1,     1,     1,     1,     3,     1,     1,     3,     3,     1,\n-       2,     4,     4,     2,     3,     5,     5,     1,     1,     3,\n-       0,    11,    11,    10,    12,     1,     2,     5,     4,     4,\n-       4,     4,     7,     5,     4,     7,     6,     9,     9,     4,\n-       1,     1,     1,     1,     1,     1,     1,     5,     1,     1,\n-       3,     1,     2,     2,     2,     3,     1,     3,     6,     2,\n-       0,     3,     3,     4,     4,     4,     4,     3,     2,     1,\n-       1,     0,     1,     1,     0,     2,     1,     5,     1,     0,\n-       2,     2,     0,     1,     0,     3,     5,     1,     3,     4,\n-       3,     1,     1,     0,     2,     2,     0,     2,     2,     1,\n-       1,     1,     0,     2,     4,     5,     4,     2,     3,     2,\n-       2,     2,     2,     1,     2,     3,     0,     1,     0,     5,\n-       1,     4,     6,     2,     1,     0,     4,     0,     1,     1,\n-       2,     2,     2,     1,     1,     2,     2,     1,     1,     1,\n-       1,     1,     1,     3,     3,     0,     1,     3,     1,     2,\n-       1,     1,     1,     1,     1,     2,     4,     4,     5,     1,\n-       1,     2,     0,     2,     0,     1,     3,     1,     0,     1,\n-       2,     3,     2,     4,     2,     3,     2,     0,     1,     2,\n-       0,     4,     5,     1,     2,     2,     0,     1,     3,     1,\n-       2,     3,     3,     3,     3,     3,     3,     1,     4,     9,\n-       9,     3,     0,     2,     2,     0,     5,     3,     1,     3,\n-       5,     3,     1,     2,     1,     3,     5,     1,     2,     3,\n-       4,     5,     4,     5,     4,     6,     5,     4,     5,     5,\n-       5,     2,     4,     1,     1,     0,     1,     4,     5,     4,\n-       0,     2,     2,     2,     1,     1,     1,     1,     0,     4,\n-       2,     1,     2,     2,     4,     2,     6,     2,     1,     3,\n-       4,     0,     2,     0,     2,     0,     1,     3,     3,     2,\n-       0,     2,     4,     1,     1,     1,     0,     2,     3,     5,\n-       6,     2,     3,     5,     5,     5,     3,     4,     0,     1,\n-       1,     1,     1,     1,     2,     4,     1,     1,     1,     1,\n-       2,     3,     0,     1,     1,     1,     1,     1,     2,     2,\n-       2,     2,     2,     1,     3,     0,     1,     1,     1,     1,\n-       5,     2,     1,     1,     1,     1,     4,     1,     2,     2,\n-       1,     3,     3,     2,     1,     0,     5,     2,     5,     2,\n-       1,     3,     3,     0,     1,     1,     1,     1,     1,     1,\n+       3,     1,     1,     1,     3,     1,     0,     2,     2,     0,\n+       2,     0,     1,     0,     1,     1,     1,     3,     3,     1,\n+       1,     3,     3,     3,     3,     3,     3,     4,     3,     2,\n+       1,     1,     1,     1,     1,     3,     1,     1,     3,     3,\n+       1,     2,     4,     4,     2,     3,     5,     5,     1,     1,\n+       3,     0,    11,    11,    10,    12,     1,     2,     5,     4,\n+       4,     4,     4,     7,     5,     4,     7,     6,     9,     9,\n+       4,     1,     1,     1,     1,     1,     1,     1,     5,     1,\n+       1,     3,     1,     2,     2,     2,     3,     1,     3,     7,\n+       1,     2,     0,     2,     0,     3,     3,     4,     4,     4,\n+       4,     3,     2,     1,     1,     0,     1,     1,     0,     2,\n+       1,     5,     1,     0,     2,     2,     0,     1,     0,     3,\n+       5,     1,     3,     4,     3,     1,     1,     0,     2,     2,\n+       0,     2,     2,     1,     1,     1,     0,     2,     4,     5,\n+       4,     2,     3,     2,     2,     2,     2,     1,     2,     3,\n+       0,     1,     0,     5,     1,     4,     6,     2,     1,     0,\n+       4,     0,     1,     1,     2,     2,     2,     1,     1,     2,\n+       2,     1,     1,     1,     1,     1,     1,     3,     3,     0,\n+       1,     3,     1,     2,     1,     1,     1,     1,     1,     2,\n+       4,     4,     5,     1,     1,     2,     0,     2,     0,     1,\n+       3,     1,     0,     1,     2,     3,     2,     4,     2,     3,\n+       2,     0,     1,     2,     0,     4,     5,     1,     2,     2,\n+       0,     1,     3,     1,     2,     3,     3,     3,     3,     3,\n+       3,     1,     4,     9,     9,     3,     0,     2,     2,     0,\n+       5,     3,     1,     3,     5,     3,     1,     2,     1,     3,\n+       5,     1,     2,     3,     4,     5,     4,     5,     4,     6,\n+       5,     4,     5,     5,     5,     2,     4,     1,     1,     0,\n+       1,     4,     5,     4,     0,     2,     2,     2,     1,     1,\n+       1,     1,     0,     4,     2,     1,     2,     2,     4,     2,\n+       6,     2,     1,     3,     4,     0,     2,     0,     2,     0,\n+       1,     3,     3,     2,     0,     2,     4,     1,     1,     1,\n+       0,     2,     3,     5,     6,     2,     3,     5,     5,     5,\n+       3,     4,     0,     1,     1,     1,     1,     1,     2,     4,\n+       1,     1,     1,     1,     2,     3,     0,     1,     1,     1,\n+       1,     1,     2,     2,     2,     2,     2,     1,     3,     0,\n+       1,     1,     1,     1,     5,     2,     1,     1,     1,     1,\n+       4,     1,     2,     2,     1,     3,     3,     2,     1,     0,\n+       5,     2,     5,     2,     1,     3,     3,     0,     1,     1,\n        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,\n-       1,     1,     1,     1,     1,     1,     1,     1,     3,     3,\n-       3,     3,     3,     3,     3,     0,     1,     3,     3,     5,\n-       2,     2,     3,     3,     3,     3,     3,     3,     3,     3,\n-       3,     3,     3,     3,     3,     3,     3,     2,     2,     3,\n-       3,     2,     2,     3,     3,     5,     4,     6,     3,     5,\n-       4,     6,     4,     6,     5,     7,     3,     2,     4,     3,\n-       2,     3,     3,     3,     3,     4,     3,     4,     3,     4,\n-       5,     6,     6,     7,     6,     7,     6,     7,     3,     4,\n-       4,     6,     1,     4,     3,     5,     1,     3,     2,     2,\n+       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,\n+       1,     1,     3,     3,     3,     3,     3,     3,     3,     0,\n+       1,     3,     3,     5,     2,     2,     3,     3,     3,     3,\n        3,     3,     3,     3,     3,     3,     3,     3,     3,     3,\n-       3,     3,     3,     3,     3,     2,     2,     5,     6,     6,\n-       7,     1,     1,     2,     1,     1,     2,     2,     3,     1,\n-       2,     4,     1,     1,     2,     2,     4,     1,     1,     3,\n-       3,     4,     1,     3,     6,     7,     9,     7,     7,     5,\n-       1,     1,     1,     5,     6,     6,     4,     4,     4,     4,\n-       6,     5,     5,     5,     4,     6,     4,     7,     9,     5,\n-       0,     5,     4,     0,     1,     0,     2,     0,     1,     3,\n-       3,     2,     2,     0,     6,     1,     0,     3,     0,     2,\n-       2,     0,     1,     4,     2,     2,     2,     2,     2,     4,\n-       3,     1,     5,     3,     1,     3,     1,     2,     3,     1,\n-       3,     1,     2,     1,     0,     1,     1,     1,     1,     1,\n+       3,     2,     2,     3,     3,     2,     2,     3,     3,     5,\n+       4,     6,     3,     5,     4,     6,     4,     6,     5,     7,\n+       3,     2,     4,     3,     2,     3,     3,     3,     3,     4,\n+       3,     4,     3,     4,     5,     6,     6,     7,     6,     7,\n+       6,     7,     3,     4,     4,     6,     1,     4,     3,     5,\n+       1,     3,     2,     2,     3,     3,     3,     3,     3,     3,\n+       3,     3,     3,     3,     3,     3,     3,     3,     3,     2,\n+       2,     5,     6,     6,     7,     1,     1,     2,     1,     1,\n+       2,     2,     3,     1,     2,     4,     1,     1,     2,     2,\n+       4,     1,     1,     3,     1,     4,     1,     3,     3,     6,\n+       7,     9,     7,     7,     5,     1,     1,     1,     5,     6,\n+       6,     4,     4,     4,     4,     6,     5,     5,     5,     4,\n+       6,     4,     7,     9,     5,     0,     5,     4,     0,     1,\n+       0,     2,     0,     1,     3,     3,     2,     2,     0,     6,\n+       1,     0,     3,     0,     2,     2,     0,     1,     4,     2,\n+       2,     2,     2,     2,     4,     3,     1,     5,     3,     1,\n+       3,     1,     2,     3,     1,     3,     1,     2,     1,     0,\n+       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,\n        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,\n-       1,     1,     1,     1,     1,     4,     1,     4,     1,     4,\n-       1,     2,     1,     2,     1,     2,     1,     3,     1,     3,\n-       1,     2,     1,     3,     1,     2,     1,     0,     1,     3,\n-       1,     3,     3,     1,     3,     3,     0,     1,     1,     1,\n-       1,     1,     1,     1,     1,     1,     1,     4,     3,     2,\n-       3,     0,     3,     3,     2,     2,     1,     0,     2,     2,\n-       3,     2,     1,     1,     3,     5,     1,     2,     4,     2,\n-       0,     1,     0,     1,     2,     3,     5,     1,     0,     0,\n-       2,     0,     2,     3,     3,     3,     5,     0,     2,     1,\n-       0,     1,     0,     1,     3,     1,     2,     3,     2,     1,\n-       4,     2,     1,     0,     3,     1,     3,     1,     2,     4,\n-       2,     0,     1,     3,     1,     3,     1,     2,     1,     3,\n-       1,     1,     2,     1,     1,     2,     1,     1,     2,     7,\n-       2,     5,     3,     3,     1,     1,     1,     1,     1,     1,\n-       1,     1,     1,     1,     1,     1,     1,     1,     2,     2,\n-       3,     3,     0,     1,     1,     1,     5,     3,     0,     1,\n-       1,     1,     1,     1,     4,     7,     6,     2,     0,     1,\n-       1,     1,     1,    13,    16,     1,     2,     0,     1,     0,\n-       1,     0,     2,     0,     1,     0,     6,     8,     6,     8,\n-       6,     8,     3,     2,     1,     0,     4,     6,     3,     2,\n-       4,     3,     5,     1,     0,     1,     1,     0,     1,     1,\n+       4,     1,     4,     1,     4,     1,     2,     1,     2,     1,\n+       2,     1,     3,     1,     3,     1,     2,     1,     3,     1,\n+       2,     1,     0,     1,     3,     1,     3,     3,     1,     3,\n+       3,     0,     1,     1,     1,     1,     1,     1,     1,     1,\n+       1,     1,     4,     3,     2,     3,     0,     3,     3,     2,\n+       2,     1,     0,     2,     2,     3,     2,     1,     1,     3,\n+       5,     1,     2,     4,     2,     0,     1,     0,     1,     2,\n+       3,     5,     1,     0,     0,     2,     0,     2,     3,     3,\n+       3,     5,     0,     2,     1,     0,     1,     0,     1,     3,\n+       1,     2,     3,     2,     1,     4,     2,     1,     0,     3,\n+       1,     3,     1,     2,     4,     2,     0,     1,     3,     1,\n+       3,     1,     2,     1,     3,     1,     1,     2,     1,     1,\n+       2,     1,     1,     2,     7,     2,     5,     3,     3,     1,\n        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,\n+       1,     1,     1,     2,     2,     3,     3,     0,     1,     1,\n+       1,     5,     3,     0,     1,     1,     1,     1,     1,     4,\n+       7,     6,     2,     0,     1,     1,     1,     1,    13,    16,\n+       1,     2,     0,     1,     0,     1,     0,     2,     0,     1,\n+       0,     6,     8,     6,     8,     6,     8,     3,     2,     1,\n+       0,     4,     6,     3,     2,     4,     3,     5,     1,     0,\n+       1,     1,     0,     1,     1,     1,     1,     1,     1,     1,\n        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,\n        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,\n-       1,     1,     1,     1,     3,     1,     1,     1,     1,     1,\n-       1,     2,     1,     1,     2,     3,     3,     3,     1,     3,\n-       3,     2,     3,     3,     3,     3,     1,     1,     1,     1,\n-       3,     5,     1,     1,     1,     1,     3,     2,     2,     3,\n-       1,     1,     4,     6,     5,     4,     6,     1,     1,     1,\n-       1,     1,     1,     0,     1,     3,     1,     0,     7,     3,\n-       1,     2,     3,     2,     0,     2,     0,     2,     4,     5,\n-       3,     5,     1,     0,     2,     0,     2,     1,     1,     1,\n-       2,     3,     2,     2,     2,     2,     3,     4,     3,     1,\n-       1,     1,     1,     0,     1,     3,     1,     3,     2,     9,\n-      12,    11,    12,    14,     3,     4,     4,     0,     7,    10,\n-       9,     2,     3,     0,     4,     1,     1,     1,     1,     1,\n+       1,     1,     1,     1,     1,     1,     1,     1,     1,     3,\n+       1,     1,     1,     1,     1,     1,     2,     1,     1,     2,\n+       3,     3,     3,     1,     3,     3,     2,     3,     3,     3,\n+       3,     1,     1,     1,     1,     3,     5,     1,     1,     1,\n+       1,     3,     2,     2,     3,     1,     1,     4,     6,     5,\n+       4,     6,     1,     1,     1,     1,     1,     1,     0,     1,\n+       3,     1,     0,     7,     3,     1,     2,     3,     2,     0,\n+       2,     0,     2,     4,     5,     3,     5,     1,     0,     2,\n+       0,     2,     3,     3,     3,     1,     1,     1,     2,     3,\n+       2,     2,     2,     2,     3,     4,     3,     1,     1,     1,\n+       1,     0,     1,     3,     1,     3,     2,     9,    12,    11,\n+      12,    14,     3,     4,     4,     0,     7,    10,     9,     2,\n+       3,     0,     4,     1,     1,     1,     1,     1,     1,     1,\n        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,\n        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,\n        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,\n@@ -3336,7 +3343,7 @@ static const yytype_uint8 yyr2[] =\n        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,\n        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,\n        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,\n-       1,     1,     1,     1,     1,     1,     1,     1,     1,     1\n+       1,     1,     1,     1,     1,     1,     1,     1\n };\n \n /* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state\n@@ -3344,3768 +3351,3968 @@ static const yytype_uint8 yyr2[] =\n    means the default is an error.  */\n static const yytype_uint16 yydefact[] =\n {\n-     152,   242,     0,  1306,  1305,  1373,   242,     0,  1255,   242,\n-     462,   380,     0,  1391,  1373,     0,   242,     0,   152,     0,\n-       0,     0,     0,     0,     0,   522,   525,   523,     0,     0,\n-       0,   242,   559,     0,  1390,   242,     0,     0,   551,   524,\n-       0,  1353,     0,     0,     0,     0,     0,     2,     4,     7,\n+     152,   242,     0,  1311,  1310,  1378,   242,     0,  1260,   242,\n+     463,   380,     0,  1399,  1378,     0,   242,     0,   152,     0,\n+       0,     0,     0,     0,     0,   523,   526,   524,     0,     0,\n+       0,   242,   563,     0,  1398,   242,     0,     0,   555,   525,\n+       0,  1358,     0,     0,     0,     0,     0,     2,     4,     7,\n       19,    32,    28,     0,    18,    30,    16,    23,     6,    34,\n-      36,    17,    22,    14,    35,    12,    33,   498,   485,   564,\n-     497,     0,     0,   151,   663,   505,    31,    15,    27,     5,\n-      11,    25,    26,    24,  1264,    39,    29,    37,    20,     8,\n-       9,    21,    38,    40,  1389,    10,    41,    13,   241,   240,\n-     234,     0,     0,     0,     0,     0,  1372,     0,   235,   108,\n-    1415,  1416,  1417,  1418,  1419,  1420,  1421,  1422,  1423,  1424,\n-    1425,  1778,  1426,  1427,  1428,  1429,  1430,  1779,  1431,  1432,\n-    1433,  1724,  1725,  1780,  1726,  1727,  1434,  1435,  1436,  1437,\n-    1438,  1439,  1440,  1441,  1728,  1729,  1442,  1443,  1444,  1445,\n-    1446,  1730,  1781,  1731,  1447,  1448,  1449,  1450,  1451,  1782,\n-    1452,  1453,  1454,  1455,  1456,  1457,  1458,  1459,  1460,  1783,\n-    1461,  1462,  1463,  1464,  1465,  1466,  1467,  1468,  1469,  1470,\n-    1732,  1733,  1471,  1472,  1473,  1474,  1475,  1476,  1477,  1478,\n-    1479,  1480,  1481,  1482,  1483,  1484,  1485,  1486,  1487,  1488,\n-    1489,  1490,  1491,  1492,  1493,  1494,  1495,  1496,  1497,  1498,\n-    1734,  1499,  1500,  1501,  1502,  1503,  1735,  1504,  1505,  1506,\n-    1736,  1507,  1508,  1509,  1784,  1785,  1510,  1511,  1737,  1787,\n-    1512,  1513,  1738,  1739,  1514,  1515,  1516,  1517,  1518,  1519,\n-    1520,  1521,  1788,  1522,  1523,  1524,  1525,  1526,  1527,  1528,\n-    1529,  1530,  1531,  1532,  1533,  1789,  1740,  1534,  1535,  1536,\n-    1537,  1538,  1741,  1742,  1743,  1539,  1790,  1791,  1540,  1792,\n-    1541,  1542,  1543,  1544,  1545,  1546,  1547,  1793,  1548,  1794,\n-    1549,  1550,  1551,  1552,  1553,  1554,  1555,  1556,  1744,  1557,\n-    1558,  1559,  1560,  1561,  1562,  1563,  1564,  1565,  1566,  1567,\n-    1568,  1569,  1570,  1571,  1572,  1573,  1574,  1745,  1796,  1746,\n-    1575,  1576,  1577,  1747,  1578,  1579,  1797,  1580,  1748,  1581,\n-    1749,  1582,  1583,  1584,  1585,  1586,  1587,  1588,  1589,  1590,\n-    1750,  1798,  1591,  1799,  1751,  1592,  1593,  1594,  1595,  1596,\n-    1597,  1598,  1599,  1600,  1601,  1602,  1603,  1752,  1800,  1604,\n-    1605,  1753,  1606,  1607,  1608,  1609,  1610,  1611,  1612,  1613,\n-    1614,  1615,  1616,  1617,  1754,  1618,  1619,  1620,  1621,  1622,\n-    1623,  1624,  1625,  1626,  1627,  1628,  1629,  1630,  1631,  1632,\n-    1633,  1634,  1635,  1636,  1801,  1637,  1638,  1639,  1755,  1640,\n-    1641,  1642,  1643,  1644,  1645,  1646,  1647,  1648,  1649,  1650,\n-    1651,  1652,  1653,  1654,  1655,  1656,  1756,  1657,  1658,  1659,\n-    1802,  1660,  1661,  1757,  1662,  1663,  1664,  1665,  1666,  1667,\n-    1668,  1669,  1670,  1671,  1672,  1673,  1674,  1758,  1675,  1759,\n-    1676,  1677,  1678,  1679,  1804,  1680,  1681,  1682,  1683,  1684,\n-    1760,  1761,  1685,  1686,  1762,  1687,  1763,  1688,  1689,  1764,\n-    1690,  1691,  1692,  1693,  1694,  1695,  1696,  1697,  1698,  1699,\n-    1700,  1701,  1702,  1703,  1704,  1705,  1706,  1765,  1766,  1707,\n-    1805,  1708,  1709,  1710,  1711,  1712,  1713,  1714,  1715,  1716,\n-    1717,  1718,  1719,  1767,  1768,  1769,  1770,  1771,  1772,  1773,\n-    1774,  1775,  1776,  1777,  1720,  1721,  1722,  1723,     0,  1398,\n-       0,  1181,   109,   110,  1203,   108,  1737,  1744,  1758,  1254,\n-    1253,   109,   237,   461,     0,     0,     0,     0,     0,     0,\n-     374,   373,     0,  1244,   379,     0,     0,   112,   104,  1606,\n-     111,  1180,   102,  1372,     0,     0,   400,   401,     0,   410,\n+      36,    17,    22,    14,    35,    12,    33,   499,   486,   568,\n+     498,     0,     0,   151,   667,   506,    31,    15,    27,     5,\n+      11,    25,    26,    24,  1269,    39,    29,    37,    20,     8,\n+       9,    21,    38,    40,  1397,    10,    41,    13,   241,   240,\n+     234,     0,     0,     0,     0,     0,  1377,     0,   235,   108,\n+    1423,  1424,  1425,  1426,  1427,  1428,  1429,  1430,  1431,  1432,\n+    1433,  1786,  1434,  1435,  1436,  1437,  1438,  1787,  1439,  1440,\n+    1441,  1732,  1733,  1788,  1734,  1735,  1442,  1443,  1444,  1445,\n+    1446,  1447,  1448,  1449,  1736,  1737,  1450,  1451,  1452,  1453,\n+    1454,  1738,  1789,  1739,  1455,  1456,  1457,  1458,  1459,  1790,\n+    1460,  1461,  1462,  1463,  1464,  1465,  1466,  1467,  1468,  1791,\n+    1469,  1470,  1471,  1472,  1473,  1474,  1475,  1476,  1477,  1478,\n+    1740,  1741,  1479,  1480,  1481,  1482,  1483,  1484,  1485,  1486,\n+    1487,  1488,  1489,  1490,  1491,  1492,  1493,  1494,  1495,  1496,\n+    1497,  1498,  1499,  1500,  1501,  1502,  1503,  1504,  1505,  1506,\n+    1742,  1507,  1508,  1509,  1510,  1511,  1743,  1512,  1513,  1514,\n+    1744,  1515,  1516,  1517,  1792,  1793,  1518,  1519,  1745,  1795,\n+    1520,  1521,  1746,  1747,  1522,  1523,  1524,  1525,  1526,  1527,\n+    1528,  1529,  1796,  1530,  1531,  1532,  1533,  1534,  1535,  1536,\n+    1537,  1538,  1539,  1540,  1541,  1797,  1748,  1542,  1543,  1544,\n+    1545,  1546,  1749,  1750,  1751,  1547,  1798,  1799,  1548,  1800,\n+    1549,  1550,  1551,  1552,  1553,  1554,  1555,  1801,  1556,  1802,\n+    1557,  1558,  1559,  1560,  1561,  1562,  1563,  1564,  1752,  1565,\n+    1566,  1567,  1568,  1569,  1570,  1571,  1572,  1573,  1574,  1575,\n+    1576,  1577,  1578,  1579,  1580,  1581,  1582,  1753,  1804,  1754,\n+    1583,  1584,  1585,  1755,  1586,  1587,  1805,  1588,  1756,  1589,\n+    1757,  1590,  1591,  1592,  1593,  1594,  1595,  1596,  1597,  1598,\n+    1758,  1806,  1599,  1807,  1759,  1600,  1601,  1602,  1603,  1604,\n+    1605,  1606,  1607,  1608,  1609,  1610,  1611,  1760,  1808,  1612,\n+    1613,  1761,  1614,  1615,  1616,  1617,  1618,  1619,  1620,  1621,\n+    1622,  1623,  1624,  1625,  1762,  1626,  1627,  1628,  1629,  1630,\n+    1631,  1632,  1633,  1634,  1635,  1636,  1637,  1638,  1639,  1640,\n+    1641,  1642,  1643,  1644,  1809,  1645,  1646,  1647,  1763,  1648,\n+    1649,  1650,  1651,  1652,  1653,  1654,  1655,  1656,  1657,  1658,\n+    1659,  1660,  1661,  1662,  1663,  1664,  1764,  1665,  1666,  1667,\n+    1810,  1668,  1669,  1765,  1670,  1671,  1672,  1673,  1674,  1675,\n+    1676,  1677,  1678,  1679,  1680,  1681,  1682,  1766,  1683,  1767,\n+    1684,  1685,  1686,  1687,  1812,  1688,  1689,  1690,  1691,  1692,\n+    1768,  1769,  1693,  1694,  1770,  1695,  1771,  1696,  1697,  1772,\n+    1698,  1699,  1700,  1701,  1702,  1703,  1704,  1705,  1706,  1707,\n+    1708,  1709,  1710,  1711,  1712,  1713,  1714,  1773,  1774,  1715,\n+    1813,  1716,  1717,  1718,  1719,  1720,  1721,  1722,  1723,  1724,\n+    1725,  1726,  1727,  1775,  1776,  1777,  1778,  1779,  1780,  1781,\n+    1782,  1783,  1784,  1785,  1728,  1729,  1730,  1731,     0,  1406,\n+       0,  1186,   109,   110,  1208,   108,  1745,  1752,  1766,  1259,\n+    1258,   109,   237,   462,     0,     0,     0,     0,     0,     0,\n+     374,   373,     0,  1249,   379,     0,     0,   112,   104,  1614,\n+     111,  1185,   102,  1377,     0,     0,   400,   401,     0,   410,\n        0,   393,   398,   394,     0,   419,   412,   420,   402,   392,\n      413,   403,   391,     0,   421,     0,   396,     0,     0,     0,\n-     238,   203,   152,     0,  1270,  1280,  1289,  1285,  1279,  1287,\n-    1277,  1283,  1269,  1291,  1278,  1282,  1275,  1292,  1273,  1290,\n-    1288,  1276,  1284,  1268,  1272,  1259,  1264,  1295,  1286,  1293,\n-    1281,  1294,  1296,  1271,  1297,  1274,     0,  1255,     0,     0,\n-    1730,  1781,  1735,     0,  1748,     0,  1751,  1752,  1640,  1759,\n-    1762,  1763,  1764,  1765,     0,   731,   111,   106,   715,     0,\n-     500,   667,   677,   715,   720,   981,   743,   982,     0,   113,\n-    1341,  1340,  1338,  1337,   191,  1218,  1378,  1760,  1685,  1394,\n-    1379,  1376,  1377,   239,   558,   556,     0,  1152,  1512,  1551,\n-    1644,  1655,  1760,  1314,  1318,     0,   236,  1396,  1383,     0,\n-    1384,   111,   506,   550,     0,   243,  1352,     0,  1357,     0,\n-    1620,   533,   536,  1212,   534,   498,     0,     1,   152,     0,\n-     158,     0,   554,   554,     0,   554,     0,   490,     0,     0,\n-     498,   493,   497,   664,  1263,  1367,  1393,  1760,  1685,  1382,\n-    1385,  1520,     0,     0,  1520,     0,  1520,     0,  1520,     0,\n-    1375,  1138,     0,  1182,   114,     0,     0,   345,   378,   377,\n-     376,   375,   380,  1520,  1228,     0,   430,   431,     0,     0,\n-       0,     0,     0,  1239,   105,   103,     0,  1370,   408,   409,\n-       0,   399,   395,   397,     0,  1204,  1806,  1807,  1808,   786,\n-    1809,   815,   793,   815,   815,  1810,  1811,  1812,  1813,   782,\n-     782,  1486,   795,  1814,  1815,  1816,  1520,  1817,  1818,   783,\n-     784,   820,  1819,  1820,  1821,  1822,  1823,     0,     0,  1824,\n-     815,  1825,   782,  1826,  1827,  1828,   787,  1829,   753,  1830,\n-       0,  1831,   785,   754,  1832,   823,   823,  1833,     0,   810,\n-    1834,   418,     0,   422,   768,   769,   770,   771,   796,   797,\n-     772,   802,   803,   807,   773,   855,   782,  1205,  1206,  1520,\n-    1207,   418,   414,  1520,   418,  1174,  1520,     0,     0,   199,\n-    1261,  1298,  1835,  1836,  1837,  1838,  1839,  1840,  1841,  1842,\n-    1844,  1843,  1845,  1846,  1847,  1848,  1849,  1850,  1851,  1852,\n-    1853,  1854,  1855,  1856,  1857,  1858,  1859,  1860,  1861,  1862,\n-    1863,  1866,  1864,  1865,  1867,  1868,  1869,  1870,  1871,  1872,\n-    1873,  1874,  1875,  1876,  1877,  1878,  1879,  1881,  1880,  1882,\n-    1883,  1884,  1885,  1886,  1887,  1888,  1889,  1890,  1891,  1892,\n-    1893,  1894,  1895,  1896,  1897,  1898,  1899,  1900,  1901,  1902,\n-    1903,  1904,  1905,  1906,  1907,  1908,  1909,  1910,  1911,  1912,\n-    1913,  1914,  1915,  1312,     0,  1313,  1303,  1267,  1299,  1300,\n-     152,     0,   460,  1252,  1339,     0,     0,     0,  1096,   715,\n-     720,     0,     0,   733,     0,  1111,     0,  1117,     0,     0,\n-       0,   715,   505,     0,   677,   732,   107,     0,   713,   714,\n-     605,   605,   559,     0,   540,   725,     0,     0,   728,   726,\n-       0,   728,     0,     0,     0,   728,   724,   685,     0,   605,\n-       0,   713,   716,   605,     0,   735,  1258,     0,     0,     0,\n-       0,  1380,     0,     0,     0,  1184,  1186,  1187,  1064,  1197,\n-     968,     0,  1725,  1726,  1727,  1132,  1728,  1729,  1731,  1732,\n-    1733,   922,  1734,  1195,  1736,  1738,  1739,  1741,  1742,  1743,\n-    1744,  1745,  1746,     0,  1196,  1749,  1587,  1754,  1755,  1757,\n-    1760,  1761,  1194,  1766,     0,     0,     0,  1163,  1087,     0,\n-       0,     0,   967,     0,  1133,  1139,   963,     0,     0,   776,\n-     777,   798,   799,   778,   804,   805,   779,     0,  1159,   856,\n-     951,  1147,  1000,   972,   980,   959,  1031,   952,     0,   962,\n-     954,  1155,   540,  1153,     0,   955,  1183,   540,  1151,  1317,\n-    1315,  1321,  1316,     0,     0,     0,     0,     0,   107,  1360,\n-    1359,  1351,  1349,  1350,  1348,  1347,  1354,     0,  1356,  1264,\n-    1082,  1084,     0,   535,     0,     0,     0,   488,   487,     3,\n-       0,     0,     0,     0,   552,   553,     0,     0,     0,     0,\n-       0,     0,     0,     0,   648,   579,   580,   582,   645,   649,\n-     657,     0,     0,     0,     0,     0,   494,     0,  1212,  1392,\n-    1388,  1386,     0,     0,     0,   136,   136,     0,     0,     0,\n-       0,     0,    96,    45,    89,     0,     0,     0,     0,   217,\n-     230,     0,     0,     0,     0,     0,   227,     0,     0,   210,\n-      47,   204,   206,     0,   136,     0,    43,     0,     0,     0,\n-      49,     0,   460,  1137,     0,   118,  1948,  1949,  1950,  1951,\n-    1952,  1953,  1954,  1955,  1956,  1957,  1958,  1959,  1960,  1961,\n-    1962,  1963,  1964,  1965,  1966,  1967,  1968,  1969,  1970,  1971,\n-    1972,  1973,  1974,  1975,  1976,  1977,  1978,  1979,  1980,  1981,\n-    1982,  1983,  1984,  1985,  1986,  1987,  1988,  1989,  1990,  1991,\n-    1992,  1993,  1994,  1995,  1996,  1997,  1998,  1999,  2000,  2001,\n-    2002,  2003,  2004,  2005,  2006,  2007,  2008,  2009,  2010,  2011,\n-    2012,  2013,  2014,  1902,  2015,  2016,  2017,  2018,  2019,   116,\n-     117,   120,   119,   121,   115,   108,     0,  1916,  1778,  1779,\n-    1780,  1781,  1731,  1782,  1783,     0,  1784,  1785,  1737,  1787,\n-    1788,  1789,  1790,  1791,  1792,  1793,  1794,  1744,  1796,  1797,\n-    1798,  1799,  1800,  1801,  1942,  1802,  1758,  1804,  1764,     0,\n-    1805,   973,  1090,   564,  1088,  1213,     0,   109,  1200,     0,\n-       0,   458,     0,     0,     0,  1224,     0,     0,  1520,   198,\n-    1520,   345,     0,  1520,   345,  1520,     0,  1238,  1241,     0,\n-     411,   407,   405,   404,   406,   814,   801,   809,   808,  1087,\n-     791,   790,   789,     0,   788,     0,     0,   815,   815,   813,\n-     792,   768,     0,     0,     0,   819,     0,   817,     0,   416,\n-     417,     0,   389,     0,   761,   757,     0,   828,   829,   830,\n-     831,   838,   839,   836,   837,   832,   833,   826,   827,   834,\n-     835,   824,   825,     0,   840,   841,   842,   843,   844,   845,\n-     846,   847,   774,   780,     0,     0,  1208,     0,   384,     0,\n-       0,   386,     0,     0,     0,   152,     0,   211,  1308,  1309,\n-    1307,     0,     0,  1302,  1266,   214,   231,  1311,  1301,  1310,\n-    1265,  1260,     0,     0,  1256,   449,     0,     0,     0,  1097,\n-    1106,  1098,  1099,  1100,  1101,  1102,  1103,  1104,  1105,     0,\n-       0,   676,   674,     0,     0,     0,     0,     0,     0,  1133,\n-       0,   926,   952,     0,     0,     0,  1082,  1116,     0,     0,\n-       0,     0,     0,     0,  1082,  1122,     0,     0,   699,   711,\n-       0,   598,   604,   675,   673,     0,  1152,   668,     0,   745,\n-       0,   725,     0,   724,     0,     0,   727,   721,     0,   722,\n-       0,     0,     0,     0,   723,     0,     0,     0,     0,     0,\n-     671,     0,   711,     0,   672,   742,  1327,  1326,  1335,   192,\n-       0,  1093,     0,   152,  1381,  1395,     0,  1087,   960,  1131,\n-       0,     0,   965,  1044,   881,     0,     0,   882,   860,   861,\n-       0,  1162,  1171,  1082,  1086,     0,   963,  1082,     0,   956,\n-     957,     0,  1034,  1036,     0,     0,  1134,  1185,   964,     0,\n-    1190,     0,   855,   855,  1158,  1064,     0,  1054,  1057,     0,\n-       0,  1061,  1062,  1063,     0,     0,     0,  1150,     0,  1072,\n-    1074,     0,     0,   897,  1070,     0,   900,     0,     0,     0,\n-       0,  1058,  1059,  1060,  1050,  1051,  1052,  1053,  1055,  1056,\n-    1068,  1049,   878,     0,   953,     0,  1003,     0,   877,  1156,\n-     666,     0,  1188,   666,  1329,  1333,  1334,  1328,  1332,     0,\n-    1320,  1319,  1324,  1322,  1325,  1323,  1397,     0,  1361,  1345,\n-       0,  1342,  1085,   661,   537,  1176,     0,     0,  1366,   157,\n-     156,     0,     0,   510,   509,   573,   565,   567,   573,     0,\n-     508,     0,   621,   622,     0,     0,     0,     0,   654,   652,\n-    1184,  1197,   609,   583,   608,     0,     0,   587,     0,   613,\n-     856,   647,   492,   577,   578,   581,   491,     0,   650,     0,\n-     660,     0,   529,   531,   514,   528,   526,   511,   519,   648,\n-     582,     0,  1368,  1387,     0,     0,     0,     0,     0,  1520,\n-       0,     0,   756,    80,    61,   297,   135,     0,     0,     0,\n-       0,     0,     0,     0,    88,    85,    86,    87,     0,     0,\n-       0,     0,   215,   216,   229,     0,   220,   221,   218,   222,\n-     223,     0,     0,   208,   209,     0,     0,     0,     0,   207,\n-       0,     0,     0,     0,     0,     0,     0,     0,  1374,  1369,\n-    1135,  1138,   564,   564,   564,     0,   562,   563,     0,     0,\n-     448,   343,   353,     0,     0,     0,  1228,     0,     0,     0,\n-       0,     0,     0,   380,  1231,  1229,  1227,  1230,  1232,  1492,\n-     186,     0,     0,   194,   197,     0,   342,   316,     0,     0,\n-    1243,     0,     0,     0,  1520,   332,  1240,     0,  1371,     0,\n-       0,     0,   418,     0,   812,   811,   762,   758,     0,     0,\n-       0,     0,     0,     0,   423,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,   418,  1209,     0,   415,   418,  1175,\n-       0,   418,   202,  1262,  1304,   212,   232,   213,   233,   460,\n-     455,   483,     0,   463,   468,   446,     0,   446,     0,   465,\n-     469,   446,   464,     0,   446,   459,     0,   996,     0,   986,\n-       0,     0,   734,     0,     0,   987,   928,   929,     0,     0,\n+     238,   203,   152,     0,  1275,  1285,  1294,  1290,  1284,  1292,\n+    1282,  1288,  1274,  1296,  1283,  1287,  1280,  1297,  1278,  1295,\n+    1293,  1281,  1289,  1273,  1277,  1264,  1269,  1300,  1291,  1298,\n+    1286,  1299,  1301,  1276,  1302,  1279,     0,  1260,     0,     0,\n+    1738,  1789,  1743,     0,  1756,     0,  1759,  1760,  1648,  1767,\n+    1770,  1771,  1772,  1773,     0,   735,   111,   106,   719,     0,\n+     501,   671,   681,   719,   724,   986,   747,   987,     0,   113,\n+    1346,  1345,  1343,  1342,   191,  1223,  1386,  1520,  1559,  1663,\n+    1768,  1693,  1402,  1387,  1381,  1385,   239,   562,   560,     0,\n+    1157,  1520,  1559,  1652,  1663,  1768,  1319,  1323,     0,   236,\n+    1404,  1391,     0,  1392,   111,   507,   554,     0,   243,  1357,\n+       0,  1362,     0,  1628,   534,   537,  1217,   535,   499,     0,\n+       1,   152,     0,   158,     0,   558,   558,     0,   558,     0,\n+     491,     0,     0,   499,   494,   498,   668,  1268,  1372,  1401,\n+    1768,  1693,  1390,  1393,  1528,     0,     0,  1528,     0,  1528,\n+       0,  1528,     0,  1380,  1143,     0,  1187,   114,     0,     0,\n+     345,   378,   377,   376,   375,   380,  1528,  1233,     0,   430,\n+     431,     0,     0,     0,     0,     0,  1244,   105,   103,     0,\n+    1375,   408,   409,     0,   399,   395,   397,     0,  1209,  1814,\n+    1815,  1816,   790,  1817,   819,   797,   819,   819,  1818,  1819,\n+    1820,  1821,   786,   786,  1494,   799,  1822,  1823,  1824,  1528,\n+    1825,  1826,   787,   788,   824,  1827,  1828,  1829,  1830,  1831,\n+       0,     0,  1832,   819,  1833,   786,  1834,  1835,  1836,   791,\n+    1837,   757,  1838,     0,  1839,   789,   758,  1840,   827,   827,\n+    1841,     0,   814,  1842,   418,     0,   422,   772,   773,   774,\n+     775,   800,   801,   776,   806,   807,   811,   777,   859,   786,\n+    1210,  1211,  1528,  1212,   418,   414,  1528,   418,  1179,  1528,\n+       0,     0,   199,  1266,  1303,  1843,  1844,  1845,  1846,  1847,\n+    1848,  1849,  1850,  1852,  1851,  1853,  1854,  1855,  1856,  1857,\n+    1858,  1859,  1860,  1861,  1862,  1863,  1864,  1865,  1866,  1867,\n+    1868,  1869,  1870,  1871,  1874,  1872,  1873,  1875,  1876,  1877,\n+    1878,  1879,  1880,  1881,  1882,  1883,  1884,  1885,  1886,  1887,\n+    1889,  1888,  1890,  1891,  1892,  1893,  1894,  1895,  1896,  1897,\n+    1898,  1899,  1900,  1901,  1902,  1903,  1904,  1905,  1906,  1907,\n+    1908,  1909,  1910,  1911,  1912,  1913,  1914,  1915,  1916,  1917,\n+    1918,  1919,  1920,  1921,  1922,  1923,  1317,     0,  1318,  1308,\n+    1272,  1304,  1305,   152,     0,   461,  1257,  1344,     0,     0,\n+       0,  1101,   719,   724,     0,     0,   737,     0,  1116,     0,\n+    1122,     0,     0,     0,   719,   506,     0,   681,   736,   107,\n+       0,   717,   718,   609,   609,   563,     0,   544,   729,     0,\n+       0,   732,   730,     0,   732,     0,     0,     0,   732,   728,\n+     689,     0,   609,     0,   717,   720,   609,     0,   739,  1263,\n+       0,     0,     0,     0,  1384,  1382,  1383,  1388,     0,     0,\n+       0,  1189,  1191,  1192,  1069,  1202,   972,     0,  1733,  1734,\n+    1735,  1137,  1736,  1737,  1739,  1740,  1741,   926,  1742,  1200,\n+    1744,  1746,  1747,  1749,  1750,  1751,  1752,  1753,  1754,     0,\n+    1201,  1757,  1595,  1762,  1763,  1765,  1768,  1769,  1199,  1774,\n+       0,     0,     0,  1168,  1092,     0,     0,     0,   971,     0,\n+    1138,  1144,   967,     0,     0,   780,   781,   802,   803,   782,\n+     808,   809,   783,     0,  1164,   860,   955,  1152,   974,  1005,\n+     976,   985,   963,  1036,   956,     0,   966,   958,  1160,   544,\n+    1158,     0,   959,  1188,   544,  1156,  1322,  1320,  1326,  1321,\n+       0,     0,     0,     0,     0,   107,  1365,  1364,  1356,  1354,\n+    1355,  1353,  1352,  1359,     0,  1361,  1269,  1087,  1089,     0,\n+     536,     0,     0,     0,   489,   488,     3,     0,     0,     0,\n+       0,   556,   557,     0,     0,     0,     0,     0,     0,     0,\n+       0,   652,   583,   584,   586,   649,   653,   661,     0,     0,\n+       0,     0,     0,   495,     0,  1217,  1400,  1396,  1394,     0,\n+       0,     0,   136,   136,     0,     0,     0,     0,     0,    96,\n+      45,    89,     0,     0,     0,     0,   217,   230,     0,     0,\n+       0,     0,     0,   227,     0,     0,   210,    47,   204,   206,\n+       0,   136,     0,    43,     0,     0,     0,    49,     0,   461,\n+    1142,     0,   118,  1956,  1957,  1958,  1959,  1960,  1961,  1962,\n+    1963,  1964,  1965,  1966,  1967,  1968,  1969,  1970,  1971,  1972,\n+    1973,  1974,  1975,  1976,  1977,  1978,  1979,  1980,  1981,  1982,\n+    1983,  1984,  1985,  1986,  1987,  1988,  1989,  1990,  1991,  1992,\n+    1993,  1994,  1995,  1996,  1997,  1998,  1999,  2000,  2001,  2002,\n+    2003,  2004,  2005,  2006,  2007,  2008,  2009,  2010,  2011,  2012,\n+    2013,  2014,  2015,  2016,  2017,  2018,  2019,  2020,  2021,  2022,\n+    1910,  2023,  2024,  2025,  2026,  2027,   116,   117,   120,   119,\n+     121,   115,   108,     0,  1924,  1786,  1787,  1788,  1789,  1739,\n+    1790,  1791,     0,  1792,  1793,  1745,  1795,  1796,  1797,  1798,\n+    1799,  1800,  1801,  1802,  1752,  1804,  1805,  1806,  1807,  1808,\n+    1809,  1950,  1810,  1766,  1812,  1772,     0,  1813,   978,  1095,\n+     568,  1093,  1218,     0,   109,  1205,     0,     0,   459,     0,\n+       0,     0,  1229,     0,     0,  1528,   198,  1528,   345,     0,\n+    1528,   345,  1528,     0,  1243,  1246,     0,   411,   407,   405,\n+     404,   406,   818,   805,   813,   812,  1092,   795,   794,   793,\n+       0,   792,     0,     0,   819,   819,   817,   796,   772,     0,\n+       0,     0,   823,     0,   821,     0,   416,   417,     0,   389,\n+       0,   765,   761,     0,   832,   833,   834,   835,   842,   843,\n+     840,   841,   836,   837,   830,   831,   838,   839,   828,   829,\n+       0,   844,   845,   846,   847,   848,   849,   850,   851,   778,\n+     784,     0,     0,  1213,     0,   384,     0,     0,   386,     0,\n+       0,     0,   152,     0,   211,  1313,  1314,  1312,     0,     0,\n+    1307,  1271,   214,   231,  1316,  1306,  1315,  1270,  1265,     0,\n+       0,  1261,   449,     0,     0,     0,  1102,  1111,  1103,  1104,\n+    1105,  1106,  1107,  1108,  1109,  1110,     0,     0,   680,   678,\n+       0,     0,     0,     0,     0,     0,  1138,     0,   930,   956,\n+       0,     0,     0,  1087,  1121,     0,     0,     0,     0,     0,\n+       0,  1087,  1127,     0,     0,   703,   715,     0,   602,   608,\n+     679,   677,     0,  1157,   672,     0,   749,     0,   729,     0,\n+     728,     0,     0,   731,   725,     0,   726,     0,     0,     0,\n+       0,   727,     0,     0,     0,     0,     0,   675,     0,   715,\n+       0,   676,   746,  1332,  1331,  1340,   192,     0,  1098,     0,\n+     152,  1389,  1403,     0,  1092,   964,  1136,     0,     0,   969,\n+    1049,   885,     0,     0,   886,   864,   865,     0,  1167,  1176,\n+    1087,  1091,     0,   967,  1087,     0,   960,   961,     0,  1039,\n+    1041,     0,     0,  1139,  1190,   968,     0,  1195,     0,   859,\n+     859,  1163,  1069,     0,  1059,  1062,     0,     0,  1066,  1067,\n+    1068,     0,     0,     0,  1155,     0,  1077,  1079,     0,     0,\n+     901,  1075,     0,   904,     0,     0,     0,     0,  1063,  1064,\n+    1065,  1055,  1056,  1057,  1058,  1060,  1061,  1073,  1054,   882,\n+       0,   957,     0,  1008,     0,   881,  1161,   670,     0,  1193,\n+     670,  1334,  1338,  1339,  1333,  1337,     0,  1325,  1324,  1329,\n+    1327,  1330,  1328,  1405,     0,  1366,  1350,     0,  1347,  1090,\n+     665,   538,  1181,     0,   542,  1371,   157,   156,     0,     0,\n+     511,   510,   577,   569,   571,   577,     0,   509,     0,   625,\n+     626,     0,     0,     0,     0,   658,   656,  1189,  1202,   613,\n+     587,   612,     0,     0,   591,     0,   617,   860,   651,   493,\n+     581,   582,   585,   492,     0,   654,     0,   664,     0,   530,\n+     532,   515,   529,   527,   512,   520,   652,   586,     0,  1373,\n+    1395,     0,     0,     0,     0,     0,  1528,     0,     0,   760,\n+      80,    61,   297,   135,     0,     0,     0,     0,     0,     0,\n+       0,    88,    85,    86,    87,     0,     0,     0,     0,   215,\n+     216,   229,     0,   220,   221,   218,   222,   223,     0,     0,\n+     208,   209,     0,     0,     0,     0,   207,     0,     0,     0,\n+       0,     0,     0,     0,     0,  1379,  1374,  1140,  1143,   568,\n+     568,   568,     0,   566,   567,     0,     0,   448,   343,   353,\n+       0,     0,     0,  1233,     0,     0,     0,     0,     0,     0,\n+     380,  1236,  1234,  1232,  1235,  1237,  1500,   186,     0,     0,\n+     194,   197,     0,   342,   316,     0,     0,  1248,     0,     0,\n+       0,  1528,   332,  1245,     0,  1376,     0,     0,     0,   418,\n+       0,   816,   815,   766,   762,     0,     0,     0,     0,     0,\n+       0,   423,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,   418,  1214,     0,   415,   418,  1180,     0,   418,   202,\n+    1267,  1309,   212,   232,   213,   233,   461,   456,   484,     0,\n+     464,   469,   446,     0,   446,     0,   466,   470,   446,   465,\n+       0,   446,   460,     0,  1001,     0,   991,     0,     0,   738,\n+       0,     0,   992,   932,   933,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,   946,   945,   988,   738,\n-       0,   741,     0,     0,  1114,  1115,     0,   989,     0,     0,\n-    1121,     0,     0,     0,   994,     0,   678,     0,     0,     0,\n-     593,   597,   600,     0,   603,   540,   499,  1512,  1551,     0,\n-     551,   551,   551,   549,   539,     0,   625,     0,     0,     0,\n-     700,     0,     0,   702,   704,     0,     0,   707,     0,   684,\n-     683,     0,     0,     0,     0,   746,     0,  1180,     0,     0,\n-     193,     0,  1217,     0,  1220,  1221,  1222,  1219,  1216,  1223,\n-       0,     0,     0,  1130,  1126,     0,     0,  1039,  1041,  1043,\n-       0,  1048,  1054,  1057,  1061,  1062,  1063,  1058,  1059,  1060,\n-    1050,  1051,  1052,  1053,  1055,  1056,     0,  1076,     0,  1030,\n-       0,     0,  1161,     0,   924,     0,   958,   969,     0,     0,\n-    1037,   970,  1163,  1140,     0,     0,  1193,  1192,   857,   866,\n-     869,   901,   902,   873,   874,   875,   879,  1215,  1214,  1157,\n-       0,  1149,     0,     0,   858,   883,   888,     0,  1123,   918,\n-       0,   906,     0,   896,     0,   904,   908,   884,   899,     0,\n-     880,     0,  1150,  1073,  1075,     0,  1071,     0,   870,   871,\n-     872,   862,   863,   864,   865,   867,   868,   876,  1047,  1045,\n-    1046,     0,  1138,     0,  1148,     0,     0,  1005,     0,     0,\n-     903,  1154,     0,   745,   564,   745,     0,   855,  1362,  1212,\n-    1355,  1212,  1344,  1083,  1177,  1211,   152,     0,  1364,   143,\n-     147,     0,  1139,   177,   179,   666,     0,   571,   572,   576,\n-       0,     0,   576,   555,   507,  1755,  1640,     0,     0,     0,\n-       0,   614,   655,     0,   646,   611,   612,     0,   610,  1184,\n-     615,  1183,   616,   619,   620,   588,  1172,   656,   658,     0,\n-     651,     0,  1178,   513,   532,     0,     0,     0,     0,     0,\n-     496,   495,   662,     0,    46,     0,  1520,    63,     0,     0,\n-       0,     0,     0,     0,   247,     0,   347,   247,   101,  1520,\n-     418,  1520,   418,  1419,  1487,  1656,     0,    59,   321,    92,\n-       0,   129,   350,     0,   306,    82,    97,   122,     0,     0,\n-      48,   205,   219,   224,   125,   228,   225,  1248,   226,   136,\n-       0,    44,     0,   123,     0,  1246,     0,     0,    50,   127,\n-    1250,  1137,     0,   562,   562,   562,     0,  1089,     0,     0,\n-       0,  1091,  1092,   447,     0,   344,     0,   457,   437,   438,\n-     448,  1226,     0,   198,   345,     0,   345,     0,  1228,     0,\n-       0,   188,   184,     0,     0,     0,     0,   343,   335,   333,\n-     366,     0,   340,   334,     0,     0,   292,     0,  1413,     0,\n-       0,     0,     0,   432,     0,     0,     0,     0,     0,   781,\n-     794,   390,   768,     0,   822,   821,   823,   823,   751,   768,\n-       0,   768,     0,   766,     0,   806,   775,   848,   849,   850,\n-     851,   852,   853,   854,   383,  1210,   385,     0,   387,  1257,\n-     453,     0,   452,   456,   451,   450,     0,   445,     0,   478,\n-       0,     0,     0,     0,     0,     0,     0,     0,   983,  1095,\n-       0,  1109,  1108,   927,   934,   937,   941,   942,   943,  1110,\n-       0,     0,     0,   938,   939,   940,   930,   931,   932,   933,\n-     935,   936,   944,   743,     0,     0,   737,  1119,  1118,  1112,\n-    1113,     0,   991,   992,   993,  1120,     0,     0,   712,   591,\n-     589,   592,   594,   590,     0,     0,   745,   551,   551,   551,\n-     551,   548,     0,     0,     0,   744,     0,   642,   708,   706,\n-       0,   730,     0,   703,     0,   709,     0,   694,     0,   701,\n-     750,   717,     0,     0,   719,  1336,  1094,   557,   961,     0,\n-       0,  1127,     0,   923,     0,  1042,   971,     0,  1065,  1029,\n-       0,     0,     0,  1170,     0,  1083,  1033,  1035,  1171,   966,\n-     855,     0,     0,     0,     0,     0,     0,     0,   907,   898,\n-       0,   905,   909,     0,     0,     0,   892,     0,     0,   890,\n-     919,   886,     0,     0,   920,  1137,     0,  1141,     0,     0,\n-    1004,  1013,   669,   665,   625,   562,   625,     0,  1330,  1346,\n-    1343,     0,  1365,     0,   166,     0,     0,     0,     0,   169,\n-     183,   180,  1364,     0,     0,   566,   568,     0,  1066,   576,\n-     570,   618,   617,     0,   586,   653,   584,     0,   659,     0,\n-     530,     0,   516,     0,   687,     0,     0,     0,     0,     0,\n-     296,     0,     0,     0,   247,     0,   355,     0,   362,     0,\n-       0,   347,   328,    81,     0,     0,     0,    55,   100,    73,\n-      65,    51,    79,     0,     0,    84,     0,    77,    94,    95,\n-      93,    98,     0,   257,   282,     0,     0,   293,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,  1136,\n-       0,     0,     0,   564,   560,   561,   974,   481,   482,   480,\n-     210,   354,     0,     0,   196,   342,     0,  1243,     0,  1225,\n-     380,     0,   189,     0,   187,     0,   198,   345,     0,   320,\n-     316,   341,   314,   313,   315,     0,  1414,   203,     0,  1408,\n-     345,  1242,     0,     0,   433,     0,   427,     0,  1237,   800,\n-     764,     0,   818,   816,   765,     0,   763,   759,   767,   418,\n-       0,   441,   479,   484,   466,   471,     0,   477,   473,   472,\n-     467,   475,   474,   470,   984,   995,  1107,     0,     0,     0,\n-       0,   736,   739,     0,   990,   985,   710,     0,     0,   625,\n-       0,     0,     0,     0,   542,   541,   547,     0,     0,  1007,\n-     705,     0,     0,     0,   692,   682,   688,     0,     0,     0,\n-       0,   748,   747,   718,     0,  1129,  1125,  1038,  1040,  1077,\n-    1160,  1082,  1165,  1167,     0,     0,     0,  1032,   925,  1191,\n-     859,     0,     0,   889,  1124,   910,     0,     0,     0,   885,\n-    1065,     0,     0,     0,     0,     0,   894,     0,  1145,  1138,\n-       0,  1144,     0,     0,     0,     0,   979,   670,   642,     0,\n-     642,     0,   538,  1363,     0,  1358,   144,   145,   146,     0,\n-       0,     0,   161,   138,     0,     0,   178,   166,   154,   574,\n-     575,     0,   569,   585,  1173,  1179,   515,     0,   963,     0,\n-       0,   512,     0,   130,   247,     0,     0,    62,     0,   364,\n-     308,   356,   339,   323,     0,     0,     0,   248,     0,   381,\n-       0,     0,   329,     0,     0,     0,     0,   309,     0,     0,\n-     268,     0,     0,   339,     0,   346,   264,   265,     0,    54,\n-      74,     0,    70,     0,    99,     0,     0,     0,     0,     0,\n-      57,    69,     0,    52,     0,   418,   418,    60,  1204,  1806,\n-    1807,  1808,  1809,  1810,  1811,  1812,  1813,  1814,  1815,  1926,\n-    1816,  1817,  1818,  1819,  1820,  1821,  1822,  1823,  1935,  1824,\n-     254,  1825,  1587,  1826,  1827,  1828,  1829,  1830,     0,  1831,\n-     754,  1832,  1833,  2011,  1834,  1050,  1051,   253,   252,   349,\n-     249,   357,   251,     0,  1205,   250,   352,   307,   126,  1249,\n-       0,   124,     0,  1247,   133,   131,   128,  1251,   977,   978,\n-     975,   562,   460,   440,     0,     0,  1413,     0,     0,     0,\n-    1520,     0,   185,     0,  1243,   195,   342,     0,   372,   292,\n-     367,     0,  1413,  1411,     0,  1243,  1407,     0,   424,     0,\n-       0,     0,   760,   752,   388,   454,     0,   476,   947,     0,\n-       0,     0,     0,   601,     0,   607,   642,   546,   545,   544,\n-     543,   624,  1462,  1738,  1639,     0,   628,   623,   626,   631,\n-     633,   632,   634,   630,   641,     0,   644,   729,  1078,  1080,\n-       0,     0,     0,     0,   693,     0,   695,     0,   697,     0,\n-     749,  1128,  1168,  1169,  1164,     0,   856,   916,   914,   911,\n-       0,   912,   893,     0,     0,   891,   887,     0,   921,     0,\n-    1142,     0,   999,     0,  1002,  1016,  1012,  1011,  1007,   974,\n-    1007,  1331,   165,   142,   168,   167,     0,  1139,   175,     0,\n-       0,   166,     0,   170,   434,     0,     0,   527,   686,   520,\n-     521,     0,   360,    64,     0,   339,     0,   247,   325,   324,\n-     327,   322,   326,     0,   382,     0,     0,   266,     0,   273,\n-     311,   312,   310,   267,   339,   345,   269,     0,     0,     0,\n-      66,    56,    53,    58,    67,     0,     0,    68,    71,   750,\n-      83,    76,  1935,  1944,     0,     0,     0,     0,     0,     0,\n-     436,   443,   210,     0,     0,   316,  1410,     0,     0,   429,\n-       0,     0,   342,   190,     0,     0,     0,  1413,     0,     0,\n-     244,     0,   289,     0,   200,  1412,     0,     0,  1399,     0,\n-       0,  1235,  1236,     0,   442,   948,     0,   949,   740,     0,\n-       0,   599,  1007,     0,     0,     0,   635,   629,     0,  1006,\n-    1008,     0,   596,  1081,   689,     0,   691,     0,   715,   564,\n-       0,   715,   698,  1166,   997,     0,   913,   917,   915,   895,\n-    1146,  1143,  1001,  1015,  1018,   644,  1189,   644,     0,     0,\n-     153,     0,     0,   150,   137,   155,  1067,   517,   518,     0,\n-     247,     0,   338,   361,   278,   256,     0,     0,     0,   263,\n-     270,   371,   272,     0,    75,    91,     0,     0,   351,   134,\n-     132,   976,   460,     0,  1243,   292,  1407,   426,     0,     0,\n-       0,   316,   203,  1409,   305,   298,   299,   300,   301,   302,\n-     303,   304,   319,   318,   290,   291,     0,     0,     0,     0,\n-       0,   428,  1237,     0,   172,   181,     0,   172,   950,   602,\n-       0,   644,     0,     0,     0,   627,     0,     0,   643,     0,\n-     503,  1079,     0,   681,   679,   562,     0,   680,     0,     0,\n-     564,   596,   596,   139,     0,   140,   176,     0,     0,     0,\n-     345,   363,   337,     0,   330,   276,   275,   277,   281,     0,\n-     279,     0,   295,     0,   288,   256,     0,    78,     0,   358,\n-     435,   439,     0,   246,  1401,   342,     0,  1407,   292,  1413,\n-    1407,     0,  1404,     0,   425,     0,     0,     0,   174,  1243,\n-       0,   174,     0,   596,   637,     0,   636,  1010,  1009,   598,\n-     690,     0,     0,   998,     0,  1021,   502,   501,     0,     0,\n-       0,     0,   371,     0,   317,     0,     0,   278,     0,   271,\n-     368,   369,   370,     0,   284,   274,   285,    72,    90,   359,\n-       0,   342,  1402,   245,   201,  1400,  1405,  1406,     0,   172,\n-     171,   573,   173,   745,   182,   573,   606,   504,   638,   595,\n-       0,   696,  1017,     0,     0,     0,     0,   149,   745,   160,\n-       0,   288,   336,   331,   255,   280,   294,     0,     0,     0,\n-     286,     0,   287,  1407,     0,   174,   576,  1233,   576,  1724,\n-    1463,  1692,     0,  1019,  1022,  1020,  1014,   141,   148,     0,\n-     247,   260,     0,   259,     0,   348,   283,  1403,  1243,   573,\n-     162,   163,     0,  1026,  1025,  1024,  1028,  1027,   745,   365,\n-     258,   262,   261,   745,   576,     0,   159,  1234,   164,  1023\n+       0,     0,     0,   950,   949,   993,   742,     0,   745,     0,\n+       0,  1119,  1120,     0,   994,     0,     0,  1126,     0,     0,\n+       0,   999,     0,   682,     0,     0,     0,   597,   601,   604,\n+       0,   607,   544,   500,  1520,  1559,     0,   555,   555,   555,\n+     553,   543,     0,   629,     0,     0,     0,   704,     0,     0,\n+     706,   708,     0,     0,   711,     0,   688,   687,     0,     0,\n+       0,     0,   750,     0,  1185,     0,     0,   193,     0,  1222,\n+       0,  1225,  1226,  1227,  1224,  1221,  1228,     0,     0,     0,\n+    1135,  1131,     0,     0,  1044,  1046,  1048,     0,  1053,  1059,\n+    1062,  1066,  1067,  1068,  1063,  1064,  1065,  1055,  1056,  1057,\n+    1058,  1060,  1061,     0,  1081,     0,  1035,     0,     0,  1166,\n+       0,   928,     0,   962,   973,     0,     0,  1042,   977,  1168,\n+    1145,     0,     0,  1198,  1197,   861,   870,   873,   905,   906,\n+     877,   878,   879,   883,  1220,  1219,  1162,     0,  1154,     0,\n+       0,   862,   887,   892,     0,  1128,   922,     0,   910,     0,\n+     900,     0,   908,   912,   888,   903,     0,   884,     0,  1155,\n+    1078,  1080,     0,  1076,     0,   874,   875,   876,   866,   867,\n+     868,   869,   871,   872,   880,  1052,  1050,  1051,     0,  1143,\n+       0,  1153,     0,     0,  1010,     0,     0,   907,  1159,     0,\n+     749,   568,   749,     0,   859,  1367,  1217,  1360,  1217,  1349,\n+    1088,  1182,  1216,   540,     0,     0,     0,  1369,   143,   147,\n+       0,  1144,   177,   179,   670,     0,   575,   576,   580,     0,\n+       0,   580,   559,   508,  1763,  1648,     0,     0,     0,     0,\n+     618,   659,     0,   650,   615,   616,     0,   614,  1189,   619,\n+    1188,   620,   623,   624,   592,  1177,   660,   662,     0,   655,\n+       0,  1183,   514,   533,     0,     0,     0,     0,     0,   497,\n+     496,   666,     0,    46,     0,  1528,    63,     0,     0,     0,\n+       0,     0,     0,   247,     0,   347,   247,   101,  1528,   418,\n+    1528,   418,  1427,  1495,  1664,     0,    59,   321,    92,     0,\n+     129,   350,     0,   306,    82,    97,   122,     0,     0,    48,\n+     205,   219,   224,   125,   228,   225,  1253,   226,   136,     0,\n+      44,     0,   123,     0,  1251,     0,     0,    50,   127,  1255,\n+    1142,     0,   566,   566,   566,     0,  1094,     0,     0,     0,\n+    1096,  1097,   447,     0,   344,     0,   458,   437,   438,   448,\n+    1231,     0,   198,   345,     0,   345,     0,  1233,     0,     0,\n+     188,   184,     0,     0,     0,     0,   343,   335,   333,   366,\n+       0,   340,   334,     0,     0,   292,     0,  1421,     0,     0,\n+       0,     0,   432,     0,     0,     0,     0,     0,   785,   798,\n+     390,   772,     0,   826,   825,   827,   827,   755,   772,     0,\n+     772,     0,   770,     0,   810,   779,   852,   853,   854,   855,\n+     856,   857,   858,   383,  1215,   385,     0,   387,  1262,   453,\n+       0,   452,   457,   455,   451,   450,     0,   445,     0,   479,\n+       0,     0,     0,     0,     0,     0,     0,     0,   988,  1100,\n+       0,  1114,  1113,   931,   938,   941,   945,   946,   947,  1115,\n+       0,     0,     0,   942,   943,   944,   934,   935,   936,   937,\n+     939,   940,   948,   747,     0,     0,   741,  1124,  1123,  1117,\n+    1118,     0,   996,   997,   998,  1125,     0,     0,   716,   595,\n+     593,   596,   598,   594,     0,     0,   749,   555,   555,   555,\n+     555,   552,     0,     0,     0,   748,     0,   646,   712,   710,\n+       0,   734,     0,   707,     0,   713,     0,   698,     0,   705,\n+     754,   721,     0,     0,   723,  1341,  1099,   561,   965,     0,\n+       0,  1132,     0,   927,     0,  1047,   975,     0,  1070,  1034,\n+       0,     0,     0,  1175,     0,  1088,  1038,  1040,  1176,   970,\n+     859,     0,     0,     0,     0,     0,     0,     0,   911,   902,\n+       0,   909,   913,     0,     0,     0,   896,     0,     0,   894,\n+     923,   890,     0,     0,   924,  1142,     0,  1146,     0,     0,\n+    1009,  1018,   673,   669,   629,   566,   629,     0,  1335,  1351,\n+    1348,   541,   152,  1370,     0,   166,     0,     0,     0,     0,\n+     169,   183,   180,  1369,     0,     0,   570,   572,     0,  1071,\n+     580,   574,   622,   621,     0,   590,   657,   588,     0,   663,\n+       0,   531,     0,   517,     0,   691,     0,     0,     0,     0,\n+       0,   296,     0,     0,     0,   247,     0,   355,     0,   362,\n+       0,     0,   347,   328,    81,     0,     0,     0,    55,   100,\n+      73,    65,    51,    79,     0,     0,    84,     0,    77,    94,\n+      95,    93,    98,     0,   257,   282,     0,     0,   293,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+    1141,     0,     0,     0,   568,   564,   565,   979,   482,   483,\n+     481,   210,   354,     0,     0,   196,   342,     0,  1248,     0,\n+    1230,   380,     0,   189,     0,   187,     0,   198,   345,     0,\n+     320,   316,   341,   314,   313,   315,     0,  1422,   203,     0,\n+    1416,   345,  1247,     0,     0,   433,     0,   427,     0,  1242,\n+     804,   768,     0,   822,   820,   769,     0,   767,   763,   771,\n+     418,     0,   441,   480,   485,   467,   472,     0,   478,   474,\n+     473,   468,   476,   475,   471,   989,  1000,  1112,     0,     0,\n+       0,     0,   740,   743,     0,   995,   990,   714,     0,     0,\n+     629,     0,     0,     0,     0,   546,   545,   551,     0,     0,\n+    1012,   709,     0,     0,     0,   696,   686,   692,     0,     0,\n+       0,     0,   752,   751,   722,     0,  1134,  1130,  1043,  1045,\n+    1082,  1165,  1087,  1170,  1172,     0,     0,     0,  1037,   929,\n+    1196,   863,     0,     0,   893,  1129,   914,     0,     0,     0,\n+     889,  1070,     0,     0,     0,     0,     0,   898,     0,  1150,\n+    1143,     0,  1149,     0,     0,     0,     0,   984,   674,   646,\n+       0,   646,     0,     0,  1368,     0,  1363,   144,   145,   146,\n+       0,     0,     0,   161,   138,     0,     0,   178,   166,   154,\n+     578,   579,     0,   573,   589,  1178,  1184,   516,     0,   967,\n+       0,     0,   513,     0,   130,   247,     0,     0,    62,     0,\n+     364,   308,   356,   339,   323,     0,     0,     0,   248,     0,\n+     381,     0,     0,   329,     0,     0,     0,     0,   309,     0,\n+       0,   268,     0,     0,   339,     0,   346,   264,   265,     0,\n+      54,    74,     0,    70,     0,    99,     0,     0,     0,     0,\n+       0,    57,    69,     0,    52,     0,   418,   418,    60,  1209,\n+    1814,  1815,  1816,  1817,  1818,  1819,  1820,  1821,  1822,  1823,\n+    1934,  1824,  1825,  1826,  1827,  1828,  1829,  1830,  1831,  1943,\n+    1832,   254,  1833,  1595,  1834,  1835,  1836,  1837,  1838,     0,\n+    1839,   758,  1840,  1841,  2019,  1842,  1055,  1056,   253,   252,\n+     349,   249,   357,   251,     0,  1210,   250,   352,   307,   126,\n+    1254,     0,   124,     0,  1252,   133,   131,   128,  1256,   982,\n+     983,   980,   566,   461,   440,     0,     0,  1421,     0,     0,\n+       0,  1528,     0,   185,     0,  1248,   195,   342,     0,   372,\n+     292,   367,     0,  1421,  1419,     0,  1248,  1415,     0,   424,\n+       0,     0,     0,   764,   756,   388,   454,     0,   477,   951,\n+       0,     0,     0,     0,   605,     0,   611,   646,   550,   549,\n+     548,   547,   628,  1470,  1746,  1647,     0,   632,   627,   630,\n+     635,   637,   636,   638,   634,   645,     0,   648,   733,  1083,\n+    1085,     0,     0,     0,     0,   697,     0,   699,     0,   701,\n+       0,   753,  1133,  1173,  1174,  1169,     0,   860,   920,   918,\n+     915,     0,   916,   897,     0,     0,   895,   891,     0,   925,\n+       0,  1147,     0,  1004,     0,  1007,  1021,  1017,  1016,  1012,\n+     979,  1012,  1336,   539,   165,   142,   168,   167,     0,  1144,\n+     175,     0,     0,   166,     0,   170,   434,     0,     0,   528,\n+     690,   521,   522,     0,   360,    64,     0,   339,     0,   247,\n+     325,   324,   327,   322,   326,     0,   382,     0,     0,   266,\n+       0,   273,   311,   312,   310,   267,   339,   345,   269,     0,\n+       0,     0,    66,    56,    53,    58,    67,     0,     0,    68,\n+      71,   754,    83,    76,  1943,  1952,     0,     0,     0,     0,\n+       0,     0,   436,   443,   210,     0,     0,   316,  1418,     0,\n+       0,   429,     0,     0,   342,   190,     0,     0,     0,  1421,\n+       0,     0,   244,     0,   289,     0,   200,  1420,     0,     0,\n+    1407,     0,     0,  1240,  1241,     0,   442,   952,     0,   953,\n+     744,     0,     0,   603,  1012,     0,     0,     0,   639,   633,\n+       0,  1011,  1013,     0,   600,  1086,   693,     0,   695,     0,\n+     719,   568,     0,   719,   702,  1171,  1002,     0,   917,   921,\n+     919,   899,  1151,  1148,  1006,  1020,  1023,   648,  1194,   648,\n+       0,     0,   153,     0,     0,   150,   137,   155,  1072,   518,\n+     519,     0,   247,     0,   338,   361,   278,   256,     0,     0,\n+       0,   263,   270,   371,   272,     0,    75,    91,     0,     0,\n+     351,   134,   132,   981,   461,     0,  1248,   292,  1415,   426,\n+       0,     0,     0,   316,   203,  1417,   305,   298,   299,   300,\n+     301,   302,   303,   304,   319,   318,   290,   291,     0,     0,\n+       0,     0,     0,   428,  1242,     0,   172,   181,     0,   172,\n+     954,   606,     0,   648,     0,     0,     0,   631,     0,     0,\n+     647,     0,   504,  1084,     0,   685,   683,   566,     0,   684,\n+       0,     0,   568,   600,   600,   139,     0,   140,   176,     0,\n+       0,     0,   345,   363,   337,     0,   330,   276,   275,   277,\n+     281,     0,   279,     0,   295,     0,   288,   256,     0,    78,\n+       0,   358,   435,   439,     0,   246,  1409,   342,     0,  1415,\n+     292,  1421,  1415,     0,  1412,     0,   425,     0,     0,     0,\n+     174,  1248,     0,   174,     0,   600,   641,     0,   640,  1015,\n+    1014,   602,   694,     0,     0,  1003,     0,  1026,   503,   502,\n+       0,     0,     0,     0,   371,     0,   317,     0,     0,   278,\n+       0,   271,   368,   369,   370,     0,   284,   274,   285,    72,\n+      90,   359,     0,   342,  1410,   245,   201,  1408,  1413,  1414,\n+       0,   172,   171,   577,   173,   749,   182,   577,   610,   505,\n+     642,   599,     0,   700,  1022,     0,     0,     0,     0,   149,\n+     749,   160,     0,   288,   336,   331,   255,   280,   294,     0,\n+       0,     0,   286,     0,   287,  1415,     0,   174,   580,  1238,\n+     580,  1732,  1471,  1700,     0,  1024,  1027,  1025,  1019,   141,\n+     148,     0,   247,   260,     0,   259,     0,   348,   283,  1411,\n+    1248,   577,   162,   163,     0,  1031,  1030,  1029,  1033,  1032,\n+     749,   365,   258,   262,   261,   749,   580,     0,   159,  1239,\n+     164,  1028\n };\n \n /* YYDEFGOTO[NTERM-NUM].  */\n static const yytype_int16 yydefgoto[] =\n {\n-      -1,    46,    47,    48,   564,  2489,  2490,  2491,  2146,  1142,\n-    3207,  2147,  1143,  1144,  2493,   565,   615,  1034,   617,  1035,\n-    1538,   714,  1249,  1250,   566,  1688,   567,  2692,  2070,  2437,\n-    3189,    53,  2948,  2073,  1102,  2951,  3155,  2685,  2946,  2438,\n-    3228,  3281,  2949,  2074,  2075,  3156,  2076,   568,  2543,  2544,\n-     569,   570,  1763,   571,   829,   572,  1764,  1715,  1496,  1162,\n-    1705,  1405,   573,   100,    60,   574,  2478,  2809,  3200,  2504,\n-    3335,  2745,  2746,  3197,  3198,  2481,  2149,  3264,  3265,  2556,\n-    1697,  3259,  2218,  3142,  2153,  2134,  2747,  2226,  3102,  2848,\n-    2150,  2727,  2219,  3193,  1776,  2220,  3194,  2967,  2221,  1742,\n-    1767,  2482,  3266,  2154,  1743,  2477,  2810,  1685,  2222,  3204,\n-    2223,   525,  2731,   575,   557,   558,   821,  1352,   559,   801,\n-     576,   732,  1773,   577,   578,  2200,  3012,  2580,  3013,  2278,\n-    2194,  1414,  2273,  1821,  1745,  1415,   515,  1835,  2581,  2530,\n-    1822,   579,  1036,    68,    69,   954,    70,  2961,    71,    72,\n-    1662,  1663,  1664,   659,   671,   672,  1469,  1904,   664,  1106,\n-    1631,   646,   647,  2190,   686,  1737,  1626,  1627,  2079,  2445,\n-    1655,  1656,  1115,  1116,  1892,  3170,  1893,  1894,  1462,  1463,\n-    3051,  1643,  1647,  1648,  2100,  2090,  1634,  2347,  2886,  2887,\n-    2888,  2889,  2890,  2891,  2892,  1037,  2619,  3062,  1651,  1652,\n-    1118,  1119,  1120,  1660,  2110,    74,    75,  2053,  2422,  2423,\n-     621,  2903,  1488,  1665,  2623,  2624,  2625,  2907,  2908,  2909,\n-     622,   949,   950,   973,   968,  1477,  1913,   623,   624,  1869,\n-    1870,  2316,   975,  1906,  1924,  1925,  2631,  1793,   802,  2135,\n-    1501,  1355,   804,  1038,   805,  1330,  1039,  1334,   807,  1040,\n-    1041,  1042,   810,  1043,  1044,  1045,   813,  1326,  1046,  1047,\n-    1345,  1374,  1375,  1376,  1377,  1378,  1379,  1380,  1381,  1382,\n-    1090,  1666,  1049,  1050,  1051,  1052,  1053,   626,  1054,  1055,\n-    1586,  2047,  2421,  2896,  3059,  3060,  2676,  2937,  3084,  3180,\n-    3295,  3323,  3324,  1056,  1057,  1532,  1533,  1534,  1947,  1948,\n-    1949,  1950,  2041,  1580,  1581,  1058,  2812,  1583,  1968,  2899,\n-    2900,  1091,  1455,  1525,  1293,  1294,  1502,  1429,  1430,  1436,\n-    1844,  1444,  1448,  1874,  1875,  1456,  2009,  1059,  1943,  1944,\n-    2372,  1510,  1060,  1174,  1537,  2671,  2044,  1584,  2003,  1067,\n-    1061,  1068,  1063,  1521,  1522,  2383,  2643,  2644,  1974,  2107,\n-    1615,  2112,  2113,   825,  1064,  1065,  1066,  1295,   501,   816,\n-    3282,  1386,  1096,  1296,  1999,   580,   980,  1938,   581,  1305,\n-    1756,   582,  3042,  2861,  1318,  1777,  2231,   526,   583,   584,\n-     510,    81,    82,    83,   695,  1407,   585,  1408,  1409,   914,\n-      84,  1497,   916,   917,   587,   653,   654,  1498,  1600,  1499,\n-     588,   632,   589,  1086,   668,  1087,  1089,   590,  1080,  2434,\n-    2068,    89,    90,    91,   107,  1172,   591,   640,   641,   592,\n-      94,  1130,   655,   660,   593,   594,  3038,   595,  2559,  1312,\n-     511,   503,   504,   818,  1252,  1298,  1253\n+      -1,    46,    47,    48,   564,  2500,  2501,  2502,  2155,  1149,\n+    3219,  2156,  1150,  1151,  2504,   565,   615,  1040,   617,  1041,\n+    1545,   717,  1256,  1257,   566,  1695,   567,  2703,  2079,  2448,\n+    3201,    53,  2960,  2082,  1109,  2963,  3167,  2696,  2958,  2449,\n+    3240,  3293,  2961,  2083,  2084,  3168,  2085,   568,  2554,  2555,\n+     569,   570,  1770,   571,   832,   572,  1771,  1722,  1503,  1169,\n+    1712,  1412,   573,   100,    60,   574,  2489,  2820,  3212,  2515,\n+    3347,  2756,  2757,  3209,  3210,  2492,  2158,  3276,  3277,  2567,\n+    1704,  3271,  2227,  3154,  2162,  2143,  2758,  2235,  3114,  2859,\n+    2159,  2738,  2228,  3205,  1783,  2229,  3206,  2979,  2230,  1749,\n+    1774,  2493,  3278,  2163,  1750,  2488,  2821,  1692,  2231,  3216,\n+    2232,   525,  2742,   575,   557,   558,   824,  1359,   559,   804,\n+     576,   735,  1780,   577,   578,  2209,  3024,  2591,  3025,  2288,\n+    2203,  1421,  2282,  1828,  1752,  1422,   515,  1842,  2592,  2541,\n+    1829,   579,  1042,    68,    69,   957,    70,  2973,    71,    72,\n+    1669,  1670,  1671,   662,   674,   675,  2075,  1476,  1911,   667,\n+    1113,  1638,   649,   650,  2199,   689,  1744,  1633,  1634,  2088,\n+    2456,  1662,  1663,  1122,  1123,  1899,  3182,  1900,  1901,  1469,\n+    1470,  3063,  1650,  1654,  1655,  2109,  2099,  1641,  2357,  2897,\n+    2898,  2899,  2900,  2901,  2902,  2903,  1043,  2630,  3074,  1658,\n+    1659,  1125,  1126,  1127,  1667,  2119,    74,    75,  2060,  2432,\n+    2433,   621,  2914,  1495,  1672,  2634,  2635,  2636,  2918,  2919,\n+    2920,   622,   952,   953,   976,   971,  1484,  1920,   623,   624,\n+    1876,  1877,  2326,   978,  1913,  1931,  1932,  2642,  1800,   805,\n+    2144,  1508,  1362,   807,  1044,   808,  1337,  1045,  1341,   810,\n+    1046,  1047,  1048,   813,  1049,  1050,  1051,   816,  1333,  1052,\n+    1053,  1352,  1381,  1382,  1383,  1384,  1385,  1386,  1387,  1388,\n+    1389,  1097,  1673,  1055,  1056,  1057,  1058,  1059,  1060,   626,\n+    1061,  1062,  1593,  2054,  2431,  2907,  3071,  3072,  2687,  2948,\n+    3096,  3192,  3307,  3335,  3336,  1063,  1064,  1539,  1540,  1541,\n+    1954,  1955,  1956,  1957,  2048,  1587,  1588,  1065,  2823,  1590,\n+    1975,  2910,  2911,  1098,  1462,  1532,  1300,  1301,  1509,  1436,\n+    1437,  1443,  1851,  1451,  1455,  1881,  1882,  1463,  2016,  1066,\n+    1950,  1951,  2382,  1517,  1067,  1181,  1544,  2682,  2051,  1591,\n+    2010,  1074,  1068,  1075,  1070,  1528,  1529,  2393,  2654,  2655,\n+    1981,  2116,  1622,  2121,  2122,   828,  1071,  1072,  1073,  1302,\n+     501,   819,  3294,  1393,  1103,  1303,  2006,   580,   983,  1945,\n+     581,  1312,  1763,   582,  3054,  2872,  1325,  1784,  2240,   526,\n+     583,   584,   510,    81,    82,    83,   698,  1414,   585,  1415,\n+    1416,   917,    84,  1504,   919,   920,   587,   656,   657,  1505,\n+    1607,  1506,   588,   632,   589,  1093,   671,  1094,  1096,   590,\n+    1087,  2445,  2077,    89,    90,    91,   107,  1179,   591,   643,\n+     644,   592,    94,  1137,   645,   663,   593,   594,  3050,   595,\n+    2570,  1319,   511,   503,   504,   821,  1259,  1305,  1260\n };\n \n /* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing\n    STATE-NUM.  */\n-#define YYPACT_NINF -2827\n+#define YYPACT_NINF -2896\n static const int yypact[] =\n {\n-    6176,   -53,   533, -2827, -2827,   270,   -53, 45492, 59426,   -53,\n-      89,  2198, 47416, -2827,   279,  6036,   -53, 50302, 66056,   472,\n-     258, 28285,   505, 50783, 50783, -2827, -2827, -2827, 59426, 50302,\n-   51264,   -53,   296, 59907, -2827,   -53, 30209, 47897,   330, -2827,\n-   50302,    26,   276, 51745, 50302,  2844,   620,   365, -2827, -2827,\n-   -2827, -2827, -2827,   106, -2827, -2827, -2827, -2827, -2827, -2827,\n-   -2827, -2827, -2827, -2827, -2827, -2827, -2827,   140, -2827,   156,\n-     141, 28285, 28285,  2076,   312, -2827, -2827, -2827, -2827, -2827,\n-   -2827, -2827, -2827, -2827,   510, -2827, -2827, -2827, -2827, -2827,\n-   -2827, -2827, -2827, -2827, 29728, -2827, -2827, -2827, -2827, -2827,\n-   -2827, 52226, 50302, 52707, 48378, 53188, -2827,   986, -2827,   163,\n-   -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827,\n-   -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827,\n-   -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827,\n-   -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827,\n-   -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827,\n-   -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827,\n-   -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827,\n-   -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827,\n-   -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827,\n-   -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827,\n-   -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827,\n-   -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827,   164, -2827,\n-   -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827,\n-   -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827,\n-   -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827,\n-   -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827,\n-   -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827,\n-   -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827,   177, -2827,\n-   -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827,\n-   -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827,\n-   -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827,\n-   -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827,\n-   -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827,\n-   -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827,\n-   -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827,\n-   -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827,\n-   -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827,\n-   -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827,\n-   -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827,\n-   -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827,\n-   -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827,\n-   -2827, -2827, -2827, -2827, -2827, -2827, -2827,   178, -2827, -2827,\n-   -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827,\n-   -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827,\n-   -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827,\n-   -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827,\n-   -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827,\n-   -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827,\n-   -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827,   539, -2827,\n-     499, -2827,   181, -2827, -2827, -2827, -2827, -2827, -2827, -2827,\n-   -2827, -2827, -2827, -2827,  2844, 50302,   532,   649,   662, 53669,\n-   -2827, -2827, 50302, -2827, -2827,    87,   826, -2827, -2827, 48859,\n-   -2827, -2827, -2827,   896,  1084,   866, -2827, -2827,   702, -2827,\n-     102, -2827, -2827,   734,   697, -2827, -2827, -2827, -2827, -2827,\n-   -2827, -2827, -2827,   783, -2827, 63274, -2827, 60388, 54150, 54631,\n-   -2827,   670, 66073, 26838, -2827, -2827, -2827, -2827, -2827, -2827,\n-   -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827,\n-   -2827, -2827, -2827, -2827, -2827, -2827,   510, -2827, -2827, -2827,\n-   -2827, -2827, -2827, -2827, -2827, -2827, 50783, 59426, 50783,   682,\n-     686,  1014,   721, 28766,   731, 30691,   750,   753,  1092,   764,\n-     786,   795,   810,   276, 27320,   775,   539, -2827, 55112, 55112,\n-     -71,  2998, -2827, 55112, 55593, -2827,   827, -2827,   986, -2827,\n-   -2827, -2827, -2827, -2827,   -90,   834, -2827,   864,  1134, -2827,\n-   -2827, -2827,   854, -2827, -2827,  1076, 18347, 18347, 60869, 60869,\n-     986, 60869,   877, -2827, -2827,   103, -2827, -2827, -2827,  2076,\n-     868,   539, -2827, -2827, 47897, -2827, -2827,   290,  1216, 18347,\n-   50302,   888, -2827,   904,   888,   897,   913, -2827,  6176,  1229,\n-    1132, 47897,   307,   307,  1390,   307,   716,   895,  2665,  2892,\n-   -2827,  1791, -2827,   972, -2827, 50302,  1073,  1002,  1271, -2827,\n-     868,  1348,   910,  1160,  1355,  5849,  1368,  1270,  1376,  1299,\n-    1468, 18347, 43087,   539, -2827,  9764,  1028,  1033, -2827, -2827,\n-   -2827, -2827,   749,  1268, -2827,  1498, -2827, -2827,  1097, 56074,\n-   56555, 57036, 57517,  1486, -2827, -2827,  1430, -2827, -2827, -2827,\n-    1114, -2827, -2827, -2827,   170, -2827, -2827, -2827, -2827, -2827,\n-   -2827,  1135, -2827,  1135,  1135, -2827, -2827, -2827, -2827,  1088,\n-    1088,  1276,  1093, -2827, -2827, -2827,  1451, -2827, -2827, -2827,\n-   -2827, -2827, -2827, -2827, -2827, -2827, -2827,  1101,   830, -2827,\n-    1135, -2827,  1088, -2827, -2827, -2827, -2827, -2827, -2827, -2827,\n-   65619, -2827, -2827, -2827, -2827,   628,   655, -2827,  1104, -2827,\n-   -2827,    86,  1119, -2827,  1586, -2827, -2827, -2827, -2827, -2827,\n-   -2827, -2827, -2827,  1121, -2827,  4507,  1088, -2827, -2827,  1493,\n-    1141,   162, -2827,  1506,   169, -2827,  1511,  1385, 18347, -2827,\n-   -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827,\n-   -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827,\n-   -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827,\n-   -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827,\n-   -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827,\n-   -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827,\n-   -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827,   276,\n-   -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827,\n-   -2827, -2827, -2827, -2827,   512, -2827, -2827, 40435, -2827, -2827,\n-   66073,  1257,  1191, -2827, -2827, 18347, 18347,  1197,  2525, 55112,\n-   55593, 18347, 50302, -2827, 18347, 21889,  1199, 18347, 18347, 10270,\n-   18347, 25876, 55112,  2998,  1188, -2827,   652, 50302,  1201, -2827,\n-    1296,  1296,   296, 28285,  1500, -2827,  1561,  1497,  1436, -2827,\n-   28285,  1436,  1946,  1230,  1517,  1436, -2827,   707,  1524,  1296,\n-   31172,  1249, -2827,  1296,  1457, -2827, -2827, 40435, 12800, 63740,\n-    1713, -2827,  1525, 59426,  1256, -2827, -2827, -2827, -2827, -2827,\n-   -2827,   567,  1754,   159,  1755, 18347,   159,   159,  1262,   182,\n-     182, -2827,  1266, -2827,   186,  1267,  1269,  1763,  1766,   161,\n-     116,   830,   159, 18347, -2827,   182,  1273,  1774,  1283,  1781,\n-     188,   216, -2827,   192, 18347, 18347, 18347,  1644, 18347,  9258,\n-    1778, 43087, -2827, 50302,   578, -2827,   539,  1293,   986, -2827,\n-   -2827, -2827, -2827, -2827, -2827, -2827, -2827,   172,  7077, -2827,\n-   -2827, -2827,  1331, -2827, -2827, -2827, -2827,  1503, 18347, -2827,\n-   -2827,  1294,  1500, -2827,   207, -2827, -2827,  1500, -2827, -2827,\n-   -2827, -2827, -2827,   226,  1695, 39473, 39954, 59426,   539, 61350,\n-   -2827, -2827, -2827, -2827, -2827, -2827, -2827,   546, -2827,   510,\n-   41988,  1297,  1301,   888, 50302, 50302,  1760, -2827, -2827, -2827,\n-   47897,   200,  1589,  1431, -2827, -2827,  2076,  2076, 13793,   793,\n-     520,   923, 14299, 18853,  1646,  1526,   385,   444,  1647, -2827,\n-    1533,  1762, 21889, 18347, 18347,   716,   895, 18347,   904, -2827,\n-   -2827, -2827,  1584, 50302, 45973,   482,   503,  1323,  1408,  1325,\n-       5,  1737, -2827,  1326, -2827,  1415, 50302, 65619,   176, -2827,\n-    1776,   176,   176,   667,  1789,  1421,   357,  1591,     6,   453,\n-    1326,  1714, -2827, 47897,   197,   556,  1326, 50302,  1424,   602,\n-    1326, 59426,  1191, 37260,  1350, -2827, -2827, -2827, -2827, -2827,\n-   -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827,\n-   -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827,\n-   -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827,\n-   -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827,\n-   -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827,\n-   -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827,\n-   -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827,\n-   -2827, -2827, -2827, -2827, -2827,   134, 12800, -2827,  1203,  1213,\n-    1224,   360,   122,  1277,  1313, 12800,  1327,  1396,   148,  1413,\n-    1513,  1546,  1549,  1582,  1610,  1622,  1633,   145,  1635,  1637,\n-    1643,  1648,  1651,  1657, -2827,  1663,   158,  1666,   214, 12800,\n-    1680, -2827, 41988,    10, -2827, -2827,  1692,   160, -2827,  1447,\n-   59426,  1402, 50302,   733,  1719,  1775, 64206, 50302,  1605,  1714,\n-    1608,  1377,  1841,  1615,  1033,  1616,  1387, -2827, 61831,  1891,\n-   -2827, -2827, -2827, -2827, -2827, -2827,  1395, -2827, -2827, 18347,\n-   -2827, -2827, -2827,  1887, -2827, 63740, 63740,  1135,  1135, -2827,\n-   -2827,  1858,  1485,  1487,  1887, -2827,  1887, -2827, 59426, -2827,\n-   -2827, 63740, -2827, 59426,  1405,  1409,  1887, -2827, -2827, -2827,\n-   -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827,\n-   -2827, -2827, -2827,  1887,  1495, -2827,  1496,  1499,  1502, -2827,\n-   -2827, -2827, -2827, -2827, 59426, 43087,  1407, 59426, -2827, 50302,\n-   50302, -2827, 50302, 59426,  1422, 66073, 44530, -2827, -2827, -2827,\n-   -2827,   560,   955, -2827, -2827, -2827, -2827, -2827, -2827, -2827,\n-   -2827, -2827,   986, 43087, -2827,  3128, 41033,  1426, 18347, -2827,\n-   -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827,  1427,\n-    1747, -2827, -2827,  6838,  1428, 41073,  1435, 21889, 21889,   539,\n-     252, -2827, -2827, 21889,  1437, 45011, 40953,  1441,  1438, 41414,\n-   14805, 18347, 14805, 14805, 41454, -2827,  1439, 41494, 55112,  1425,\n-   50302, 49340, -2827, -2827, -2827, 18347, 18347,  2998, 49821,  1473,\n-   28285, -2827, 28285, -2827,  1730, 28285, -2827, -2827,  2324, -2827,\n-   28285,  1731, 18347, 28285, -2827, 28285,  1677,  1678,  1454, 28285,\n-   -2827, 50302,  1455, 50302, -2827, -2827, -2827, -2827, -2827,  1452,\n-     677, -2827,   689,  2381, -2827, -2827, 18347, 18347, -2827, 41988,\n-    1507, 18347, -2827, 18347,  6508, 35503, 15311,  6508,  1949,  1949,\n-   33577, -2827,  1627, 41534, -2827,  1475,   968,  7575,  1471, -2827,\n-   -2827,  1466, -2827,  1474,  1476, 38030,   129,   539,   539, 18347,\n-   -2827, 18347,  4109,  4109, -2827,   175, 63740, 18347, 18347, 18347,\n-   18347, 18347, 18347, 18347, 18347, 42606,  1563,   150, 59426, 18347,\n-   18347,  1480,   768, -2827, 18347,  1710, -2827,  1484, 18347,  1570,\n-     157, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,\n-   -2827, -2827, 24400,   219,   635,  1811,  1830,   -54,   269, 18347,\n-    1822,  9764, -2827,  1822, -2827, -2827, -2827, -2827, -2827,   209,\n-   -2827, -2827, -2827,  1452, -2827,  1452, -2827, 59426, -2827, 50302,\n-     290, 46935, 18347, -2827, -2827,  1488,  1489,  1491,  1551, -2827,\n-   -2827, 50302, 34058,  1782, -2827,   363,  1494, -2827, 40913,  1744,\n-    1782,  2076, -2827, -2827, 22901,  1626,  1785,  1725, -2827, -2827,\n-    1705,  1707, -2827,  1509, 42131, 19359, 19359, -2827,  1351, 41988,\n-    1353, -2827, -2827, -2827, -2827, -2827, -2827,    93, -2827, 50302,\n-      39, 31653, -2827,  1514,    58, -2827,  1246,  1839,  1806,  1646,\n-     444,  1520, -2827, -2827,  1416,  1528, 62312, 50302,  1803,  1758,\n-    1812,   317, 63740, -2827, -2827, -2827, -2827, 50302, 59426, 57998,\n-   62793, 43568, 50302, 43087, -2827, -2827, -2827, -2827, 50302,   832,\n-   50302,  6729, -2827, -2827, -2827,   176, -2827, -2827, -2827, -2827,\n-   -2827, 59426, 50302, -2827, -2827,   176, 59426, 50302,   176, -2827,\n-    1656, 50302, 50302, 50302, 50302,  1973, 50302, 50302, -2827, -2827,\n-   -2827, 18347,    40,    40,  1746, 10776,   114, -2827, 18347, 18347,\n-    1715, -2827, -2827,   693,  1757,   149, -2827,  1587, 50302, 50302,\n-   50302, 50302, 50302,   948, -2827, -2827, -2827, -2827, -2827,  1538,\n-   -2827,  1540,  1895, -2827,  1714,  1896, 46454,   701,  3435,  1900,\n-    1588,  1901, 11282,  2011,  1786, -2827, -2827,  1772, -2827, 18347,\n-    1554,  1555,    86,   732, -2827, -2827,  1559,  1409,  1575,  1576,\n-    1562,  1564, 63740,   744, -2827,   780,  1887,   166,  1565,  1566,\n-    1456,  1189,   470,  1352,   162, -2827, 43087, -2827,   169, -2827,\n-    1780,   154, -2827, -2827, -2827, -2827, -2827, -2827, -2827,  1191,\n-   27804, -2827,   811, -2827, -2827,  2024,   986,  2024,   598, -2827,\n-   -2827,  2024, -2827,  2009,  2024, -2827, 63740, -2827,  7862, -2827,\n-   18347, 18347, -2827, 18347,  1902, -2827,  2060,  2060, 63740, 21889,\n-   21889, 21889, 21889, 21889, 21889,   699,  1273, 21889, 21889, 21889,\n-   21889, 21889, 21889, 21889, 21889, 21889, 23407,   319, -2827, -2827,\n-     845,  2041, 18347, 18347,  1921,  1902, 18347, -2827, 63740,  1592,\n-   -2827,  1595,  1596, 18347, -2827, 63740, -2827, 50302,  1603,     0,\n-     -15, -2827,  1585,  1611, -2827,  1500, -2827,   760,   790, 50302,\n-    3570,  3699,  5281, -2827, -2827, 18347,  1911,  2324,  2324, 28285,\n-   -2827, 18347,  1612, -2827, -2827, 28285,  1926, -2827,  2324, -2827,\n-   -2827, 32134,  2324, 63740,   863, -2827, 50302, 63740,   867, 40435,\n-   -2827, 12800, -2827, 63740, -2827, -2827, -2827, -2827, -2827, -2827,\n-    1604,  1609, 18347,    66, -2827,  7980,  6652, -2827,  1613, -2827,\n-    1607, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827, -2827,\n-   -2827, -2827, -2827, -2827, -2827, -2827,  1617, -2827,  1628, -2827,\n-    1630, 50302, -2827, 19865, -2827, 59426, -2827, -2827, 18347, 18347,\n-   50302, -2827,  1644, -2827,  1631, 35992, -2827, -2827, -2827,   187,\n-     335,  8225,   269,  2903,  2903,  2903,  6508, -2827, -2827, -2827,\n-    1652, -2827, 21889, 21889, -2827,  5840,  3464,  9258, -2827, -2827,\n-    1967, -2827,   806, -2827,  1639, -2827, -2827,  3961, -2827, 35503,\n-   37451, 18347,   198, -2827, 18347,  1480, 18347,  1697,  2903,  2903,\n-    2903,   381,   381,   187,   187,   187,   335,   269, -2827, -2827,\n-   -2827,  1640, 18347, 43087, -2827,  1641,  1642,  1992,  1283, 18347,\n-   -2827, -2827, 28285,  1473,    10,  1473,  1887,  4109, -2827,   904,\n-   -2827,   904, -2827, 41988, 50302, -2827,  2381, 28285,  1685,  2105,\n-    2087, 59426, -2827, -2827,  1649,  1822,  1659, -2827, -2827,  1665,\n-   18347,  2107,  1665, -2827,  1782,   -30,  1868,   985,   985,  1351,\n-    1869, -2827, -2827,  1716, -2827, -2827, -2827, 18347, 11788,  1364,\n-   -2827,  1366, -2827, -2827, -2827, -2827, -2827,  1650, -2827,  1918,\n-   -2827, 50302, -2827, -2827, 21889,  2099, 18347, 32615,  2101,  1904,\n-   -2827, -2827, -2827,  1748,  1326, 18347,  1899, -2827,   130,  1667,\n-    2022,   429,  1974, 59426, -2827,   280,   313, -2827,   942,  2025,\n-     154,  2026,   154, 43087, 43087, 43087,   873, -2827, -2827, -2827,\n-     986, -2827,   395,   898, -2827, -2827, -2827, -2827,  1761,   608,\n-    1326,  1714, -2827, -2827, -2827, -2827, -2827, -2827, -2827,   253,\n-     648,  1326,  1765, -2827,  1767, -2827,  1769,   659,  1326, -2827,\n-   -2827, 41988,  1679,   114,   114,   114, 12800, -2827,  1908,  1912,\n-    1693, 41988, 41988, -2827,   174, -2827, 59426, -2827, -2827, -2827,\n-    1715,  1775, 50302,  1714,  1706,  2153,  1033,  1387, -2827,  1862,\n-      21,   171, -2827, 59426, 50302, 50302, 50302, 58479, -2827, -2827,\n-   -2827,  1720,  1703, -2827,   -28,  1931,  1933, 50302,  1764, 50302,\n-    1325,  2187, 50302, -2827,   919, 15817,  2084, 50302,  1732, -2827,\n-   -2827, -2827, -2827,  1887, -2827, -2827,   -92,   -92, -2827, -2827,\n-   59426, -2827,  1740, -2827,  1741, -2827, -2827, -2827, -2827, -2827,\n-   -2827, -2827, -2827, -2827, -2827, -2827, -2827, 59426, -2827, -2827,\n-   -2827, 44049, -2827, -2827, -2827, -2827, 43087, -2827,   986, -2827,\n-     986,  1970, 59426, 38511,   986, 38992,   986,  1745, -2827, 41988,\n-   36014, 41988,  1921, -2827,   230,  2060,   717,   717,   717,  4899,\n-    2080,   220,  1749,   717,   717,   717,   387,   387,   230,   230,\n-     230,  2060,   319,   827, 45011,  1751, -2827, 41988, 41988, -2827,\n-   -2827,  1752, -2827, -2827, -2827, -2827,  1753,  1756, -2827, -2827,\n-   -2827, -2827, -2827, -2827, 59426,   999,  1473,   330,   330,   330,\n-     330, -2827, 50302, 50302, 50302, 41988,  2189,  2072, -2827, -2827,\n-    2324, 41988, 50302, -2827, 25391, -2827, 50302, -2827,  2093, -2827,\n-    2178, -2827, 50302,   920, -2827, -2827, -2827, -2827, -2827, 41822,\n-   18347, -2827,  2119, -2827, 18347, 18347, -2827, 35503, -2827, -2827,\n-    1759,  9258, 41844, -2827,  2069, 36061, 41988, -2827,  1627, -2827,\n-    4109, 18347,   538,  1397, 18347,  1770, 18347,  2096, -2827, -2827,\n-    1768, -2827, -2827, 63740, 18347,  1773,  4137, 21889, 21889,  4833,\n-   -2827,  5483, 18347,  9258, -2827, 37307,  1771,  1777,  1746, 16323,\n-   -2827,  1983,  1790, -2827,  1911,   114,  1911,  1779, -2827, -2827,\n-   -2827,  1795, -2827, 18347,  1916, 59426,   303,  3051,   933, -2827,\n-     539, 34058,  1685, 18347,   641, -2827, -2827,  1797, -2827,  1665,\n-   -2827, -2827, -2827,  1993, -2827, -2827, -2827, 50302, -2827,  1800,\n-   -2827, 31653,  2102,  9258, -2827, 31653, 50302, 50302, 36116,  2131,\n-   -2827, 59426, 59426, 59426, -2827, 59426,  1804,  1808,   796,  1810,\n-     331, -2827,  1828,   796,  2115,   301,  1325,   357,  3313,     8,\n-   -2827, -2827, -2827,  1884, 50302, -2827, 59426, -2827, -2827, -2827,\n-   -2827, -2827, 43568, -2827, -2827, 35021, 43087, -2827, 43087, 50302,\n-   50302, 50302, 50302, 50302, 50302, 50302, 50302, 50302, 50302, -2827,\n-    1815,  1818,  1820,  1746, -2827, -2827, -2827, -2827, -2827, -2827,\n-     453, -2827,   174,  1813, -2827, 46454,  2844,  1588,  2272,  1775,\n-     653, 58945, -2827,  1821,  1819,   946,  1714,  1824,  2286, -2827,\n-     701, 46454, -2827, -2827, -2827,  2243, -2827,   670,   185, -2827,\n-    1033, -2827,  2844,  1387, -2827,  2844, 41988, 59426,  1886, -2827,\n-    1409,  1832, -2827, -2827,  1409, 63740,  1409, -2827, -2827,   154,\n-     951, -2827, -2827, -2827, -2827, -2827, 59426,  1825, -2827,  1825,\n-   -2827, -2827,  1825, -2827, -2827, -2827, -2827, 21889,  2165,  1833,\n-   63740, -2827, -2827, 50302, -2827, -2827, -2827,   952,  1834,  1911,\n-   50302, 50302, 50302, 50302, -2827, -2827, -2827, 16829, 18347,  1873,\n-   -2827,  1836, 13306,  2149, -2827, 24906, -2827,   213,  1842, 32134,\n-   59426, -2827, -2827, -2827, 18347, 41988, -2827, 41988, -2827, -2827,\n-   -2827,  7205, -2827,  1845,  1844, 59426, 18347, -2827, -2827, -2827,\n-     742, 18347, 18347,  5840, -2827, 42057, 18347, 63740,   956,  5840,\n-     221, 18347,  1796,  3068, 18347, 18347,  5673, 36306, -2827, 18347,\n-   12294, -2827,  1850, 18347, 36615, 34539, -2827, 28285,  2072,  1851,\n-    2072,   986, -2827, 41988, 18347, -2827, -2827, -2827, -2827,  1905,\n-     -22, 30209,  2073, -2827,  1865, 59426, -2827,  1916, 41988, -2827,\n-   -2827, 35503, -2827, -2827, -2827, -2827, -2827,  2297,  2182,  1857,\n-    1859, -2827,  1300, -2827, -2827, 59426,  1861, -2827,  1863,   796,\n-   -2827, 59426,  1897, -2827,   254,  2166,    81, -2827, 18347, -2827,\n-    2256,  2333,  1828,  1875, 59426, 50302, 21889, -2827,   665,   190,\n-   -2827,  2156, 50302,  1897,  2292, -2827, -2827, -2827,   331, -2827,\n-    2193,  2113, -2827,   176, -2827, 18347,   331,  2114,   228, 59426,\n-   -2827, -2827,  1574, -2827, 63740,   154,   154, -2827,  1890,  1913,\n-    1914,  1915,  1917,  1919,  1920,  1922,  1923,  1925,  1927, -2827,\n-    1928,  1929,  1930,  1932,  1935,  1936,  1937,  1939,  1101,  1940,\n-   -2827,  1941,  1797,  1943,  1947,  1950,  1952,  1953, 64672,  1955,\n-    1958,  1960,  1961,  1104,  1962,   560,   955, -2827, -2827, -2827,\n-   -2827, -2827, -2827,  1141,  1963, -2827,  1909, -2827, -2827, -2827,\n-    1972, -2827,  1977, -2827, -2827, -2827, -2827, -2827, -2827, -2827,\n-   -2827,   114,  1191,    91, 59426,  1898,  1764,  2362, 17335,   809,\n-    2137,  1910, -2827,   986,  1588, -2827, 46454,  3678,   212,  1933,\n-   -2827,   173,  1764, -2827,  2323,  1588,  1986,  2395, -2827,  2169,\n-   59426,  1966, -2827, -2827, -2827, -2827, 44049,  1825,  5155, 21889,\n-   63740,   960,   970, -2827,  2459,  2127,  2072, -2827, -2827, -2827,\n-   -2827, -2827,  1971,   -36,  1975,  8752,  1968, -2827, -2827, -2827,\n-   -2827, -2827, -2827, 41988, 41988, 59426,  2147, -2827, -2827,  1979,\n-    1978, 33096,  2425,  1985, -2827, 12800, -2827,  2294, -2827, 26357,\n-   -2827, 41988, 18347, -2827, -2827, 37362,  2302,  5840,  5840, 42057,\n-     976, -2827,  5840, 18347, 18347,  5840,  5840, 18347, -2827,  1991,\n-   -2827,   980, -2827, 36637, -2827, 65138, -2827, -2827,  1873,   986,\n-    1873, -2827,  1987, -2827, -2827, -2827,  2046, -2827, -2827,   982,\n-    2405,  1916, 18347, -2827, -2827,  2001, 31653, -2827, -2827, -2827,\n-   -2827, 31653,   796, -2827,  2168,  1897,  2005, -2827, -2827, -2827,\n-   -2827, -2827, -2827, 36684, -2827,    38, 18347, -2827,   837,  4899,\n-   -2827, -2827, -2827, -2827,  1897,  1033, -2827, 50302,  2466,  2359,\n-   -2827, -2827, 41988, -2827, -2827,  1887,  1887, -2827, -2827,  2178,\n-   -2827, -2827, -2827, -2827,  1141,   272, 35021, 50302, 50302,  2008,\n-   -2827, -2827,   453,  2390,   989,   701, -2827,  2844,  2844, 41988,\n-   50302,  2364, 46454, -2827,  2474,  2014, 50302,  1764,   333,   333,\n-   -2827,  2159, -2827,  2160, -2827, -2827,  2480,   268, -2827, 17841,\n-   50302, -2827, -2827, 29247, -2827,  5155,   994, -2827, -2827,  2020,\n-    2023, -2827,  1873, 18347,  2031, 18347, -2827, 20371,  2482,  2021,\n-   -2827, 18347,  2090, 23913, -2827, 18347, -2827, 50302, 55112,    40,\n-    2033, 55112, -2827, -2827, -2827, 18347, -2827,  5840,  5840,  5840,\n-   -2827, -2827, -2827, -2827,  2225,  2147, -2827,  2147, 18347,  2844,\n-     539,  3774, 59426,   -18, -2827, 41988, -2827, -2827, -2827, 50302,\n-   -2827, 43087, -2827,   796,   -76,  2035, 18347, 36739,  2264, -2827,\n-   -2827,  2296, -2827,  2352, -2827,  2098,   498,  2120, -2827, -2827,\n-   -2827, -2827,  1191,   986,  1588,  1933,  1986, -2827,  2042, 50302,\n-    2844,   701,   670, -2827, -2827, -2827, -2827, -2827, -2827, -2827,\n-   -2827, -2827, -2827, -2827, -2827, -2827,  2844,  2469,  2261,  2483,\n-    2844, 41988,  1886, 18347,    79, -2827,  1009,  2476, -2827, -2827,\n-    2547,  2147,  2061, 20371,  2062, -2827,  2064, 59426, 41988,  2202,\n-   -2827, -2827,  2065, -2827, -2827,   114, 18347, -2827, 37552,  2506,\n-    1746,  2090,  2090, -2827,   -22, -2827, -2827,  2478, 29247,  2438,\n-    1033,   796,  2081,  1013, -2827, -2827, -2827, -2827, -2827,  1714,\n-   -2827, 36929,  2307,   132,  2291,  2035, 18347, -2827,  2148, -2827,\n-   -2827, -2827,  2537, -2827, -2827, 46454,  2078,  1986,  1933,  1764,\n-    1986,  2295, -2827,  2298, -2827,  2082, 37238, 59426, 59426,  1588,\n-   29247, 59426,  2083,  2090, -2827,  2085, -2827, -2827, -2827, 49340,\n-   -2827,  2088,  2091, -2827, 18347,   528, -2827, -2827,  2134, 50302,\n-    1017,    -2,  2296, 35021, -2827, 43087,   950,   -76,  2389, -2827,\n-   -2827, -2827, -2827,    88,  2309, -2827,  2315, -2827, 41988, -2827,\n-    2844, 46454, -2827, -2827, -2827, -2827, -2827, -2827, 29247,  2476,\n-   -2827,   363, -2827,  1473, -2827,   363, -2827, -2827, -2827, -2827,\n-     986, -2827,  1441, 20877, 20877,  2103,  2844, -2827,  1473, -2827,\n-    2230,  2291, -2827, -2827, -2827, -2827, -2827,   153,   153,  2490,\n-   -2827,  2173, -2827,  1986,  1021, 59426,  1665, -2827,  1665, 22395,\n-    2257,   195, 40993, -2827, -2827, -2827, -2827, -2827, -2827, 34058,\n-   -2827, -2827,  2591, -2827,   239, -2827, -2827, -2827,  1588,   363,\n-   -2827, -2827,  2581, -2827, -2827, -2827, -2827, -2827,  1473,   796,\n-   -2827, -2827, -2827,  1473,  1665, 21383, -2827, -2827, -2827, -2827\n+    7514,   307,    66, -2896, -2896,   250,   307, 45465, 59880,   307,\n+      77,    65, 47389, -2896,   304,  7700,   307, 50275, 66510,   371,\n+     209, 27839,   462, 50756, 50756, -2896, -2896, -2896, 59880, 50275,\n+   51237,   307,   314, 60361, -2896,   307, 29763, 47870,   221, -2896,\n+   50275,    54,   287, 51718, 50275,  3238,   875,   343, -2896, -2896,\n+   -2896, -2896, -2896,   169, -2896, -2896, -2896, -2896, -2896, -2896,\n+   -2896, -2896, -2896, -2896, -2896, -2896, -2896,   126, -2896,    71,\n+     129, 27839, 27839,   850,   313, -2896, -2896, -2896, -2896, -2896,\n+   -2896, -2896, -2896, -2896,   426, -2896, -2896, -2896, -2896, -2896,\n+   -2896, -2896, -2896, -2896, 29282, -2896, -2896, -2896, -2896, -2896,\n+   -2896, 52199, 50275, 52680, 48351, 53161, -2896,   900, -2896,   160,\n+   -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896,\n+   -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896,\n+   -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896,\n+   -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896,\n+   -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896,\n+   -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896,\n+   -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896,\n+   -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896,\n+   -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896,\n+   -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896,\n+   -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896,\n+   -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896,   175, -2896,\n+   -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896,\n+   -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896,\n+   -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896,\n+   -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896,\n+   -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896,\n+   -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896,   176, -2896,\n+   -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896,\n+   -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896,\n+   -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896,\n+   -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896,\n+   -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896,\n+   -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896,\n+   -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896,\n+   -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896,\n+   -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896,\n+   -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896,\n+   -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896,\n+   -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896,\n+   -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896,\n+   -2896, -2896, -2896, -2896, -2896, -2896, -2896,   185, -2896, -2896,\n+   -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896,\n+   -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896,\n+   -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896,\n+   -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896,\n+   -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896,\n+   -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896,\n+   -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896,   409, -2896,\n+     390, -2896,   186, -2896, -2896, -2896, -2896, -2896, -2896, -2896,\n+   -2896, -2896, -2896, -2896,  3238, 50275,   599,   773,   580, 53642,\n+   -2896, -2896, 50275, -2896, -2896,   796,   740, -2896, -2896, 48832,\n+   -2896, -2896, -2896,   860,  1018,   815, -2896, -2896,   681, -2896,\n+     193, -2896, -2896,   712,   672, -2896, -2896, -2896, -2896, -2896,\n+   -2896, -2896, -2896,   768, -2896, 63728, -2896, 60842, 54123, 54604,\n+   -2896,   641, 66527, 26875, -2896, -2896, -2896, -2896, -2896, -2896,\n+   -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896,\n+   -2896, -2896, -2896, -2896, -2896, -2896,   426, -2896, -2896, -2896,\n+   -2896, -2896, -2896, -2896, -2896, -2896, 50756, 59880, 50756,   651,\n+     658,  1006,   678, 28320,   700, 30245,   742,   754,  1005,   766,\n+     776,   791,   797,   287, 27357,   824,   409, -2896, 55085, 55085,\n+     -67,  2735, -2896, 55085, 55566, -2896,   819, -2896,   900, -2896,\n+   -2896, -2896, -2896, -2896,   373,   813, -2896, 56047, 56047, 56047,\n+     839,  1110, -2896, -2896, -2896,   831, -2896, -2896,  1057, 17906,\n+   17906, 61323, 61323,   900, 61323,   871, -2896, -2896,   252, -2896,\n+   -2896, -2896,   850,   872,   409, -2896, -2896, 47870, -2896, -2896,\n+     278,  1215, 17906, 50275,   911, -2896,   923,   911,   939,   954,\n+   -2896,  7514,  1265,  1174, 47870,   330,   330,  1404,   330,   849,\n+     931,  2381,  2067, -2896,  1168, -2896,   969, -2896, 50275,  1065,\n+     996,  1279, -2896,   872,  1351,   539,  1169,  1366,  7823,  1370,\n+     857,  1382,   874,  1496, 17906, 43060,   409, -2896,  9323,  1043,\n+    1067, -2896, -2896, -2896, -2896,   798,  1303, -2896,  1544, -2896,\n+   -2896,  1138, 56528, 57009, 57490, 57971,  1510, -2896, -2896,  1453,\n+   -2896, -2896, -2896,  1133, -2896, -2896, -2896,   124, -2896, -2896,\n+   -2896, -2896, -2896, -2896,  1152, -2896,  1152,  1152, -2896, -2896,\n+   -2896, -2896,  1106,  1106,  1293,  1111, -2896, -2896, -2896,  1465,\n+   -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896,\n+    1116,  1003, -2896,  1152, -2896,  1106, -2896, -2896, -2896, -2896,\n+   -2896, -2896, -2896, 66073, -2896, -2896, -2896, -2896,   513,   741,\n+   -2896,  1121, -2896, -2896,    74,  1140, -2896,  1599, -2896, -2896,\n+   -2896, -2896, -2896, -2896, -2896, -2896,  1147, -2896,  3378,  1106,\n+   -2896, -2896,  1507,  1155,   225, -2896,  1517,   234, -2896,  1521,\n+    1391, 17906, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896,\n+   -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896,\n+   -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896,\n+   -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896,\n+   -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896,\n+   -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896,\n+   -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896,\n+   -2896, -2896,   287, -2896, -2896, -2896, -2896, -2896, -2896, -2896,\n+   -2896, -2896, -2896, -2896, -2896, -2896, -2896,   259, -2896, -2896,\n+   40367, -2896, -2896, 66527,  1260,  1181, -2896, -2896, 17906, 17906,\n+    1189,  2990, 55085, 55566, 17906, 50275, -2896, 17906, 21448,  1192,\n+   17906, 17906,  9829, 17906, 25913, 55085,  2735,  1197, -2896,   870,\n+   50275,  1204, -2896,  1308,  1308,   314, 27839,  1505, -2896,   834,\n+    1506,  1438, -2896, 27839,  1438,   835,  1240,  1522,  1438, -2896,\n+     286,  1523,  1308, 30726,  1243, -2896,  1308,  1455, -2896, -2896,\n+   40367, 12359, 64194,  1705, -2896, -2896, -2896, -2896,  1516, 59880,\n+    1248, -2896, -2896, -2896, -2896, -2896, -2896,   747,  1744,   158,\n+    1746, 17906,   158,   158,  1252,   187,   187, -2896,  1254, -2896,\n+     191,  1255,  1256,  1752,  1753,   141,   136,  1003,   158, 17906,\n+   -2896,   187,  1259,  1755,  1263,  1759,   137,   154, -2896,   197,\n+   17906, 17906, 17906,  1622, 17906,  8817,  1758, 43060, -2896, 50275,\n+     533, -2896,   409,  1268,   900, -2896, -2896, -2896, -2896, -2896,\n+   -2896, -2896, -2896,   177,  6944, -2896, -2896, -2896, -2896,  1306,\n+   -2896, -2896, -2896, -2896,  1480, 17906, -2896, -2896,  1270,  1505,\n+   -2896,   199, -2896, -2896,  1505, -2896, -2896, -2896, -2896, -2896,\n+     226,  1673, 39405, 39886, 59880,   409, 61804, -2896, -2896, -2896,\n+   -2896, -2896, -2896, -2896,   551, -2896,   426, 41920,  1273,  1275,\n+     911, 50275, 50275,  1738, -2896, -2896, -2896, 47870,   179,  1567,\n+    1407, -2896, -2896,   850,   850, 13352,   743,   358,   228, 13858,\n+   18412,  1625,  1512,   224,   974,  1627, -2896,  1518,  1735, 21448,\n+   17906, 17906,   849,   931, 17906,   923, -2896, -2896, -2896,  1569,\n+   50275, 45946,   783,   852,  1297,  1384,  1304,    15,  1712, -2896,\n+    1301, -2896,  1393, 50275, 66073,   243, -2896,  1748,   243,   243,\n+     570,  1749,  1394,   275,  1553,    63,   271,  1301,  2352, -2896,\n+   47870,   170,   609,  1301, 50275,  1396,   620,  1301, 59880,  1181,\n+   37106,  1305, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896,\n+   -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896,\n+   -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896,\n+   -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896,\n+   -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896,\n+   -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896,\n+   -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896,\n+   -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896,\n+   -2896, -2896,   148, 12359, -2896,  1180,  1198,  1217,   643,   180,\n+    1266,  1272, 12359,  1345,  1350,   159,  1392,  1543,  1552,  1573,\n+    1581,  1613,  1615,  1618,   125,  1623,  1629,  1646,  1649,  1654,\n+    1658, -2896,  1665,   161,  1670,   212, 12359,  1683, -2896, 41920,\n+      20, -2896, -2896,  1688,   171, -2896,  1397, 59880,  1352, 50275,\n+     820,  1669,  1720, 64660, 50275,  1558,  2352,  1559,  1319,  1783,\n+    1560,  1067,  1564,  1335, -2896, 62285,  1835, -2896, -2896, -2896,\n+   -2896, -2896, -2896,  1337, -2896, -2896, 17906, -2896, -2896, -2896,\n+    1830, -2896, 64194, 64194,  1152,  1152, -2896, -2896,  1803,  1430,\n+    1432,  1830, -2896,  1830, -2896, 59880, -2896, -2896, 64194, -2896,\n+   59880,  1349,  1357,  1830, -2896, -2896, -2896, -2896, -2896, -2896,\n+   -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896,\n+    1830,  1440, -2896,  1452,  1466,  1468, -2896, -2896, -2896, -2896,\n+   -2896, 59880, 43060,  1379, 59880, -2896, 50275, 50275, -2896, 50275,\n+   59880,  1385, 66527, 44503, -2896, -2896, -2896, -2896,   812,   950,\n+   -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896,   900,\n+   43060, -2896,  3738, 40965,  1387, 17906, -2896, -2896, -2896, -2896,\n+   -2896, -2896, -2896, -2896, -2896, -2896,  1388,  1700, -2896, -2896,\n+    6815,  1389, 41005,  1390, 21448, 21448,   409,  1813, -2896, -2896,\n+   21448,  1395, 44984, 40885,  1398,  1399, 41346, 14364, 17906, 14364,\n+   14364, 41386, -2896,  1400, 41426, 55085,  1403, 50275, 49313, -2896,\n+   -2896, -2896, 17906, 17906,  2735, 49794,  1433, 27839, -2896, 27839,\n+   -2896,  1674, 27839, -2896, -2896,  2476, -2896, 27839,  1675, 17906,\n+   27839, -2896, 27839,  1621,  1624,  1408, 27839, -2896, 50275,  1410,\n+   50275, -2896, -2896, -2896, -2896, -2896,  1409,   595, -2896,   734,\n+    2234, -2896, -2896, 17906, 17906, -2896, 41920,  1439, 17906, -2896,\n+   17906,  5603, 35057, 14870,  5603,  1888,  1888, 33131, -2896,  1561,\n+   41466, -2896,  1415,  2694, 35546,  1412, -2896, -2896,  1411, -2896,\n+    1413,  1417, 37962,   153,   409,   409, 17906, -2896, 17906,  3714,\n+    3714, -2896,   167, 64194, 17906, 17906, 17906, 17906, 17906, 17906,\n+   17906, 17906, 42579,  1493,   134, 59880, 17906, 17906,  1418,   904,\n+   -2896, 17906,  1647, -2896,  1420, 17906,  1508,   808, 17906, 17906,\n+   17906, 17906, 17906, 17906, 17906, 17906, 17906, -2896, -2896, 23959,\n+     168,   647,  1754,  1764,   -52,   315, 17906,  1761,  9323, -2896,\n+    1761, -2896, -2896, -2896, -2896, -2896,   202, -2896, -2896, -2896,\n+    1409, -2896,  1409, -2896, 59880, -2896, 50275,   278, 46908, 17906,\n+   -2896, -2896,  1431,  1442,   753,  1497, -2896, -2896, 50275, 33612,\n+    1728, -2896,   781,  1437, -2896, 40845,  1690,  1728,   850, -2896,\n+   -2896, 22460,  1568,  1731,  1671, -2896, -2896,  1651,  1652, -2896,\n+    1449, 42063, 18918, 18918, -2896,  1353, 41920,  1355, -2896, -2896,\n+   -2896, -2896, -2896, -2896,   519, -2896, 50275,    61, 31207, -2896,\n+    1454,    40, -2896,  2879,  1784,  1745,  1625,   974,  1460, -2896,\n+   -2896,   937,  1462, 62766, 50275,  1743,  1698,  1750,  -102, 64194,\n+   -2896, -2896, -2896, -2896, 50275, 59880, 58452, 63247, 43541, 50275,\n+   43060, -2896, -2896, -2896, -2896, 50275,  1500, 50275, 37500, -2896,\n+   -2896, -2896,   243, -2896, -2896, -2896, -2896, -2896, 59880, 50275,\n+   -2896, -2896,   243, 59880, 50275,   243, -2896,  1591, 50275, 50275,\n+   50275, 50275,  1593, 50275, 50275, -2896, -2896, -2896, 17906,    21,\n+      21,  1679, 10335,   138, -2896, 17906, 17906,  1645, -2896, -2896,\n+     792,  1692,    88, -2896,  1520, 50275, 50275, 50275, 50275, 50275,\n+    1294, -2896, -2896, -2896, -2896, -2896,  1470, -2896,  1475,  1828,\n+   -2896,  2352,  1833, 46427,   971,  3428,  1837,  1527,  1844, 10841,\n+    1943,  1726, -2896, -2896,  1713, -2896, 17906,  1495,  1498,    74,\n+     806, -2896, -2896,  1499,  1357,  1511,  1515,  1509,  1513, 64194,\n+     817, -2896,   836,  1830,   139,  1519,  1524,  1451,  1012,   855,\n+    1348,   225, -2896, 43060, -2896,   234, -2896,  1719,   157, -2896,\n+   -2896, -2896, -2896, -2896, -2896, -2896,  1181, 24451, -2896,   851,\n+   -2896, -2896,  1968,   900,  1968,   925, -2896, -2896,  1968, -2896,\n+    1950,  1968, -2896, 64194, -2896, 35568, -2896, 17906, 17906, -2896,\n+   17906,  1846, -2896,  2007,  2007, 64194, 21448, 21448, 21448, 21448,\n+   21448, 21448,   631,  1259, 21448, 21448, 21448, 21448, 21448, 21448,\n+   21448, 21448, 21448, 22966,   338, -2896, -2896,   885,  1979, 17906,\n+   17906,  1861,  1846, 17906, -2896, 64194,  1526, -2896,  1529,  1530,\n+   17906, -2896, 64194, -2896, 50275,  1531,    34,    42, -2896,  1533,\n+    1539, -2896,  1505, -2896,   861,   960, 50275,  3860,  5092,  5523,\n+   -2896, -2896, 17906,  1865,  2476,  2476, 27839, -2896, 17906,  1545,\n+   -2896, -2896, 27839,  1884, -2896,  2476, -2896, -2896, 31688,  2476,\n+   64194,   893, -2896, 50275, 64194,   907, 40367, -2896, 12359, -2896,\n+   64194, -2896, -2896, -2896, -2896, -2896, -2896,  1547,  1554, 17906,\n+      73, -2896, 35615,  6523, -2896,  1550, -2896,  1542, -2896, -2896,\n+   -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896,\n+   -2896, -2896, -2896,  1557, -2896,  1555, -2896,  1562, 50275, -2896,\n+   19424, -2896, 59880, -2896, -2896, 17906, 17906, 50275, -2896,  1622,\n+   -2896,  1563, 35670, -2896, -2896, -2896,   240,   914, 42085,   315,\n+    7437,  7437,  7437,  5603, -2896, -2896, -2896,  1575, -2896, 21448,\n+   21448, -2896,  5686,  2535,  8817, -2896, -2896,  1894, -2896,   239,\n+   -2896,  1565, -2896, -2896,  3154, -2896, 35057, 42104, 17906,   143,\n+   -2896, 17906,  1418, 17906,  1650,  7437,  7437,  7437,   357,   357,\n+     240,   240,   240,   914,   315, -2896, -2896, -2896,  1570, 17906,\n+   43060, -2896,  1571,  1574,  1916,  1263, 17906, -2896, -2896, 27839,\n+    1433,    20,  1433,  1830,  3714, -2896,   923, -2896,   923, -2896,\n+   41920, 50275, -2896, -2896,  1824,  1576, 27839,  1614,  2037,  2020,\n+   59880, -2896, -2896,  1582,  1761,  1600, -2896, -2896,  1610, 17906,\n+    1996,  1610, -2896,  1728,     2,  1815,   963,   963,  1353,  1819,\n+   -2896, -2896,  1664, -2896, -2896, -2896, 17906, 11347,  1361, -2896,\n+    1365, -2896, -2896, -2896, -2896, -2896,  1601, -2896,  1869, -2896,\n+   50275, -2896, -2896, 21448,  2049, 17906, 32169,  2052,  1854, -2896,\n+   -2896, -2896,  1697,  1301, 17906,  1848, -2896,    95,  1619,  1973,\n+     -72,  1926, 59880, -2896,   293,   296, -2896,   214,  1976,   157,\n+    1977,   157, 43060, 43060, 43060,   913, -2896, -2896, -2896,   900,\n+   -2896,   267,   920, -2896, -2896, -2896, -2896,  1710,   621,  1301,\n+    2352, -2896, -2896, -2896, -2896, -2896, -2896, -2896,   200,   739,\n+    1301,  1716, -2896,  1717, -2896,  1718,   865,  1301, -2896, -2896,\n+   41920,  1630,   138,   138,   138, 12359, -2896,  1862,  1863,  1637,\n+   41920, 41920, -2896,   147, -2896, 59880, -2896, -2896, -2896,  1645,\n+    1720, 50275,  2352,  1628,  2099,  1067,  1335, -2896,  1797,   846,\n+     809, -2896, 59880, 50275, 50275, 50275, 58933, -2896, -2896, -2896,\n+    1640,  1638, -2896,    -5,  1864,  1866, 50275,  1681, 50275,  1304,\n+    2109, 50275, -2896,   926, 15376,  2002, 50275,  1653, -2896, -2896,\n+   -2896, -2896,  1830, -2896, -2896,   294,   294, -2896, -2896, 59880,\n+   -2896,  1657, -2896,  1659, -2896, -2896, -2896, -2896, -2896, -2896,\n+   -2896, -2896, -2896, -2896, -2896, -2896, 59880, -2896, -2896, -2896,\n+   44022, -2896, -2896, -2896, -2896, -2896, 43060, -2896,   900, -2896,\n+     900,  1879, 59880, 38443,   900, 38924,   900,  1656, -2896, 41920,\n+   35860, 41920,  1861, -2896,   232,  2007,  2072,  2072,  2072,  4980,\n+    1985,   290,  1660,  2072,  2072,  2072,   347,   347,   232,   232,\n+     232,  2007,   338,   819, 44984,  1661, -2896, 41920, 41920, -2896,\n+   -2896,  1662, -2896, -2896, -2896, -2896,  1663,  1666, -2896, -2896,\n+   -2896, -2896, -2896, -2896, 59880,  1161,  1433,   221,   221,   221,\n+     221, -2896, 50275, 50275, 50275, 41920,  2100,  1982, -2896, -2896,\n+    2476, 41920, 50275, -2896, 25428, -2896, 50275, -2896,  2006, -2896,\n+    2092, -2896, 50275,   927, -2896, -2896, -2896, -2896, -2896, 41754,\n+   17906, -2896,  2032, -2896, 17906, 17906, -2896, 35057, -2896, -2896,\n+    1672,  8817, 41776, -2896,  1981, 36169, 41920, -2896,  1561, -2896,\n+    3714, 17906,   257,  3520, 17906,  1676, 17906,  2005, -2896, -2896,\n+    1678, -2896, -2896, 64194, 17906,  1680,  4362, 21448, 21448,  4490,\n+   -2896,  6382, 17906,  8817, -2896, 37415,  1677,  1684,  1679, 15882,\n+   -2896,  1883,  1682, -2896,  1865,   138,  1865,  1695, -2896, -2896,\n+   -2896, -2896,  2234, -2896, 17906,  1827, 59880,   130,  2822,   938,\n+   -2896,   409, 33612,  1614, 17906,   717, -2896, -2896,  1685, -2896,\n+    1610, -2896, -2896, -2896,  1896, -2896, -2896, -2896, 50275, -2896,\n+    1696, -2896, 31207,  2004,  8817, -2896, 31207, 50275, 50275, 36191,\n+    2035, -2896, 59880, 59880, 59880, -2896, 59880,  1687,  1699,   873,\n+    1693,   554, -2896,  1834,   873,  2027,   230,  1304,   275,  5237,\n+     368, -2896, -2896, -2896,  1774, 50275, -2896, 59880, -2896, -2896,\n+   -2896, -2896, -2896, 43541, -2896, -2896, 34575, 43060, -2896, 43060,\n+   50275, 50275, 50275, 50275, 50275, 50275, 50275, 50275, 50275, 50275,\n+   -2896,  1701,  1702,  1704,  1679, -2896, -2896, -2896, -2896, -2896,\n+   -2896,   271, -2896,   147,  1706, -2896, 46427,  3238,  1527,  2167,\n+    1720,    85, 59399, -2896,  1708,  1721,   940,  2352,  1714,  2186,\n+   -2896,   971, 46427, -2896, -2896, -2896,  2155, -2896,   641,   311,\n+   -2896,  1067, -2896,  3238,  1335, -2896,  3238, 41920, 59880,  1798,\n+   -2896,  1357,  1742, -2896, -2896,  1357, 64194,  1357, -2896, -2896,\n+     157,   956, -2896, -2896, -2896, -2896, -2896, 59880,  1739, -2896,\n+    1739, -2896, -2896,  1739, -2896, -2896, -2896, -2896, 21448,  2075,\n+    1747, 64194, -2896, -2896, 50275, -2896, -2896, -2896,   958,  1751,\n+    1865, 50275, 50275, 50275, 50275, -2896, -2896, -2896, 16388, 17906,\n+    1785, -2896,  1760, 12865,  2056, -2896, 24943, -2896,   210,  1762,\n+   31688, 59880, -2896, -2896, -2896, 17906, 41920, -2896, 41920, -2896,\n+   -2896, -2896,  7748, -2896,  1741,  1763, 59880, 17906, -2896, -2896,\n+   -2896,   374, 17906, 17906,  5686, -2896,  5557, 17906, 64194,   972,\n+    5686,   173, 17906,  3582,  4561, 17906, 17906,  6415, 36238, -2896,\n+   17906, 11853, -2896,  1765, 17906, 36293, 34093, -2896, 27839,  1982,\n+    1767,  1982,   900,  1768, 41920, 17906, -2896, -2896, -2896, -2896,\n+    1805,   323, 29763,  1969, -2896,  1766, 59880, -2896,  1827, 41920,\n+   -2896, -2896, 35057, -2896, -2896, -2896, -2896, -2896,  2195,  1843,\n+    1770,  1771, -2896,  1286, -2896, -2896, 59880,  1776, -2896,  1777,\n+     873, -2896, 59880,  1794, -2896,   279,  2061,    86, -2896, 17906,\n+   -2896,  2149,  2225,  1834,  1782, 59880, 50275, 21448, -2896,   550,\n+     207, -2896,  2062, 50275,  1794,  2198, -2896, -2896, -2896,   554,\n+   -2896,  2101,  2013, -2896,   243, -2896, 17906,   554,  2021,   178,\n+   59880, -2896, -2896,  3048, -2896, 64194,   157,   157, -2896,  1792,\n+    1793,  1796,  1801,  1808,  1809,  1810,  1811,  1812,  1814,  1816,\n+   -2896,  1820,  1821,  1822,  1823,  1825,  1829,  1832,  1838,  1116,\n+    1841, -2896,  1849,  1685,  1850,  1853,  1856,  1857,  1858, 65126,\n+    1860,  1868,  1872,  1873,  1121,  1874,   812,   950, -2896, -2896,\n+   -2896, -2896, -2896, -2896,  1155,  1878, -2896,  1826, -2896, -2896,\n+   -2896,  1905, -2896,  1910, -2896, -2896, -2896, -2896, -2896, -2896,\n+   -2896, -2896,   138,  1181,    93, 59880,  1831,  1681,  2289, 16894,\n+     903,  2068,  1836, -2896,   900,  1527, -2896, 46427,  3782,   704,\n+    1866, -2896,   172,  1681, -2896,  2232,  1527,  1877,  2306, -2896,\n+    2066, 59880,  1867, -2896, -2896, -2896, -2896, 44022,  1739,  5778,\n+   21448, 64194,   986,   991, -2896,  2341,  2022,  1982, -2896, -2896,\n+   -2896, -2896, -2896,  1871,   -43,  1881,  8311,  1859, -2896, -2896,\n+   -2896, -2896, -2896, -2896, 41920, 41920, 59880,  2040, -2896, -2896,\n+    1882,  1886, 32650,  2309,  1887, -2896, 12359, -2896,  2190, -2896,\n+   26394, -2896, 41920, 17906, -2896, -2896, 37437,  2199,  5686,  5686,\n+    5557,   992, -2896,  5686, 17906, 17906,  5686,  5686, 17906, -2896,\n+    1890, -2896,  1000, -2896, 36483, -2896, 65592, -2896, -2896,  1785,\n+     900,  1785, -2896, -2896,  1891, -2896, -2896, -2896,  1944, -2896,\n+   -2896,  1004,  2301,  1827, 17906, -2896, -2896,  1895, 31207, -2896,\n+   -2896, -2896, -2896, 31207,   873, -2896,  2063,  1794,  1900, -2896,\n+   -2896, -2896, -2896, -2896, -2896, 36792, -2896,    38, 17906, -2896,\n+     775,  4980, -2896, -2896, -2896, -2896,  1794,  1067, -2896, 50275,\n+    2362,  2255, -2896, -2896, 41920, -2896, -2896,  1830,  1830, -2896,\n+   -2896,  2092, -2896, -2896, -2896, -2896,  1155,   363, 34575, 50275,\n+   50275,  1903, -2896, -2896,   271,  2288,  1008,   971, -2896,  3238,\n+    3238, 41920, 50275,  2261, 46427, -2896,  2374,  1919, 50275,  1681,\n+     377,   377, -2896,  2064, -2896,  2069, -2896, -2896,  2384,   231,\n+   -2896, 17400, 50275, -2896, -2896, 28801, -2896,  5778,  1023, -2896,\n+   -2896,  1928,  1931, -2896,  1785, 17906,  1932, 17906, -2896, 19930,\n+    2388,  1930, -2896, 17906,  1993, 23472, -2896, 17906, -2896, 50275,\n+   55085,    21,  1938, 55085, -2896, -2896, -2896, 17906, -2896,  5686,\n+    5686,  5686, -2896, -2896, -2896, -2896,  2138,  2040, -2896,  2040,\n+   17906,  3238,   409,  3387, 59880,   -15, -2896, 41920, -2896, -2896,\n+   -2896, 50275, -2896, 43060, -2896,   873,   -54,  1940, 17906, 36814,\n+    2169, -2896, -2896,  2203, -2896,  2263, -2896,  2008,   603,  2025,\n+   -2896, -2896, -2896, -2896,  1181,   900,  1527,  1866,  1877, -2896,\n+    1958, 50275,  3238,   971,   641, -2896, -2896, -2896, -2896, -2896,\n+   -2896, -2896, -2896, -2896, -2896, -2896, -2896, -2896,  3238,  2387,\n+    2175,  2389,  3238, 41920,  1798, 17906,    62, -2896,  1024,  2386,\n+   -2896, -2896,  2453,  2040,  1967, 19930,  1970, -2896,  1972, 59880,\n+   41920,  2110, -2896, -2896,  1974, -2896, -2896,   138, 17906, -2896,\n+   37484,  2414,  1679,  1993,  1993, -2896,   323, -2896, -2896,  2383,\n+   28801,  2347,  1067,   873,  1988,  1030, -2896, -2896, -2896, -2896,\n+   -2896,  2352, -2896, 36861,  2213,   189,  2200,  1940, 17906, -2896,\n+    2070, -2896, -2896, -2896,  2455, -2896, -2896, 46427,  1998,  1877,\n+    1866,  1681,  1877,  2208, -2896,  2211, -2896,  2000, 36916, 59880,\n+   59880,  1527, 28801, 59880,  2010,  1993, -2896,  2014, -2896, -2896,\n+   -2896, 49313, -2896,  2015,  2016, -2896, 17906,    27, -2896, -2896,\n+    2054, 50275,  1036,    26,  2203, 34575, -2896, 43060,  1079,   -54,\n+    2304, -2896, -2896, -2896, -2896,   135,  2223, -2896,  2226, -2896,\n+   41920, -2896,  3238, 46427, -2896, -2896, -2896, -2896, -2896, -2896,\n+   28801,  2386, -2896,   781, -2896,  1433, -2896,   781, -2896, -2896,\n+   -2896, -2896,   900, -2896,  1398, 20436, 20436,  2018,  3238, -2896,\n+    1433, -2896,  2139,  2200, -2896, -2896, -2896, -2896, -2896,   194,\n+     194,  2402, -2896,  2082, -2896,  1877,  1041, 59880,  1610, -2896,\n+    1610, 21954,  2168,   204, 40925, -2896, -2896, -2896, -2896, -2896,\n+   -2896, 33612, -2896, -2896,  2502, -2896,   327, -2896, -2896, -2896,\n+    1527,   781, -2896, -2896,  2492, -2896, -2896, -2896, -2896, -2896,\n+    1433,   873, -2896, -2896, -2896,  1433,  1610, 20942, -2896, -2896,\n+   -2896, -2896\n };\n \n /* YYPGOTO[NTERM-NUM].  */\n static const yytype_int16 yypgoto[] =\n {\n-   -2827, -2827, -2827,  1942,    92, -2827, -2827,   133, -2827,   922,\n-   -2827,   121,  -646,   481, -2827,    95,  2799,  2201,  2773,   196,\n-    -494,  -677, -1294,  -925,    97, -1088,    12, -2827, -2827, -2827,\n-   -2827, -2827,  -468,   189, -2827, -2827,  -604, -2457,  -556, -2827,\n-   -2814, -2768, -2827, -2827,  -694, -2826, -1966,    99, -2827, -2827,\n-     100,    11, -2011,   101, -2448,   104,  -699, -1133,  -873, -1146,\n-   -2827,  -121,   107,  1360, -2827,    13, -2088, -2745,  -567, -2827,\n-    -668, -2827,  -337, -2827,  -615, -2827,  -840,  -623,  -655, -2697,\n-   -1098, -2827,  1518,  -378, -2827,   525, -2827, -2436, -2827, -2827,\n-     515, -2827, -1078, -2827, -2152,   138,  -594, -2469, -2446, -2066,\n-    -686,   191,  -596,   167, -2035, -1152, -2827,   541, -2827,  -581,\n-   -2827,  -714, -1925,   110, -2827, -2827,  1290,  -797, -2827,  1343,\n-     111,  1378, -2008,    16,    28, -2827, -2827, -2827, -2827,  -785,\n-     479, -1149, -2827,   406, -2827, -2827, -2827, -2827,  -183,   165,\n-   -2827,     9,  1558,   -43,   -21, -2827,   -13, -2827, -2827, -2827,\n-     571, -2827, -2827,    20,    64,  1597,  -982, -2827, -1447,   650,\n-   -2827,  1738,  1742, -2116,  -661,   -68, -2827,   612, -1589, -2040,\n-    -540,  1025,  1580,  1583,   368, -2804, -2827,  -539, -2827,   180,\n-   -2827, -2827,   607,  1072, -1504, -1503, -2827, -2075, -2827,  -453,\n-    -346, -2827, -2827, -2827, -2827, -2827, -2397, -2108,  -471,  1043,\n-   -2827,  1599, -2827, -2827, -2827, -2827,   117, -1438,  2692,   647,\n-     137, -2827, -2827, -2827, -2827,    90, -2827,   797,  -190, -2827,\n-    2108,  -537,  -618,  1794,  -341,  -209, -1600,    29,  2122,   412,\n-   -2827, -2827,   414, -2000, -1439,   369,  -267,  1380, -2827, -2827,\n-    -548, -1268,  -768, -2827, -2827,   407,   611, -2827, -2827, -2827,\n-    2448,  2465, -2827, -2827,  3259,  3577, -2827,  -637,  3641,  -498,\n-    -759,  1807,  -851,  1809,  -857,  -844,  -847,  1814,  1816, -1464,\n-    4372,   338,  4140, -2132, -2827,   183, -2827, -1410,   215, -2827,\n-   -2827, -2827, -2827, -2183, -2827,  -433, -2827,  -430, -2827, -2827,\n-   -2827,  -555, -2403, -2827,  4215,   758, -2827, -2827,   366, -2827,\n-   -2827, -2827, -2827, -1469, -2827,  5521,   666, -2827, -1929, -2827,\n-   -2827,  -927,  -644, -1033,  -944, -1219, -1296, -2827, -2827, -2827,\n-   -2827, -2827, -2827,  -989, -1720,  -228,   715, -2827, -2827,   800,\n-   -2827, -2827, -2827, -1673, -2010, -2827, -2827, -2827,   728,  1285,\n-      68,  -625, -1538, -2827,   771, -2262, -2827, -2827,   374, -2827,\n-    -475, -1020, -2305,  1263,    22, -2827,  3434, -2409, -2827, -2827,\n-    -554, -2537, -1081, -2827, -2827,   112, -2827,   688,   113, -1609,\n-   -2827,    18, -2827,  -396, -2827, -2827, -2449, -2827,   115,   118,\n-    2170, -2827, -2827, -2827,  -454, -2827,  -490,  -489, -2827, -2827,\n-      32,  -885,  1367, -2827,   120,   660, -2827,   836, -2827,   676,\n-     123,   105,   124,  1158, -2827, -2827, -2827,    33,  -530,   327,\n-   -2827,  1159, -2827, -2827,  2757, -2827,   126, -2827, -2827,   127,\n-   -2827, -2827,  2748,  2685,   128,    19, -2809,   131, -2610, -1624,\n-      -7, -2827, -2827, -2827,  -546, -2827, -2419\n+   -2896, -2896, -2896,  1851,    92, -2896, -2896,    30, -2896,   823,\n+   -2896,    18,  -637,   386, -2896,    94,  3751,  2187,  3418,  1927,\n+    -496,  -689, -1303, -1019,    96, -1095,     7, -2896, -2896, -2896,\n+   -2896, -2896,  -570,    83, -2896, -2896,  -706, -2444,  -659, -2896,\n+   -2819, -2895, -2896, -2896,  -796, -2865, -1985,    97, -2896, -2896,\n+      98,     3, -2002,   100, -2462,   101,  -704, -1137,  -784, -1151,\n+   -2896,  -222,   102,  1367, -2896,     8, -2094, -2752,  -665, -2896,\n+    -766, -2896,  -420, -2896,  -698, -2896,  -764,  -705,  -739, -2703,\n+   -1087, -2896,  1435,  -464, -2896,   438, -2896, -2427, -2896, -2896,\n+     430, -2896, -1117, -2896, -2157,    24,  -680, -2515, -2465, -2083,\n+    -700,    99,  -687,    76, -2051, -1036, -2896,   453, -2896,  -672,\n+   -2896,  -682, -2148,   104, -2896, -2896,  1202,  -789, -2896,  1257,\n+     108,  1284, -2060,    11,    12, -2896, -2896, -2896, -2896,  -855,\n+     387, -1143, -2896,   312, -2896, -2896, -2896, -2896,  -270,    68,\n+   -2896,     9,   306,   -30,   -48, -2896,   -34, -2896, -2896, -2896,\n+     485, -2896, -2896,    23,    49,  1514, -2896,  -987, -2896, -1454,\n+     800, -2896,  1668,  1686, -2136,  -654,   -59, -2896,   520, -1598,\n+   -2040,  -542,   935,  1491,  1494,   273, -2178, -2896,  -632, -2896,\n+     268, -2896, -2896,   514,   983, -1518, -1501, -2896, -2113, -2896,\n+    -550,  -442, -2896, -2896, -2896, -2896, -2896, -2285, -2218,  -529,\n+     952, -2896,  1528, -2896, -2896, -2896, -2896,   174, -1472,  2609,\n+     555,   128, -2896, -2896, -2896, -2896,    -4, -2896,   705,  -286,\n+   -2896,  2023,  -536,  -617,  1703,    75,   260, -1697,    29,  2042,\n+     319, -2896, -2896,   324, -2018, -1445,   263,  -365,  1289, -2896,\n+   -2896,  -539, -1294,  -772, -2896, -2896,  -474,  -456, -2896, -2896,\n+   -2896,  -169,  2406, -2896, -2896,  2419,  3039, -2896,  -613,  3345,\n+    -476,  -753,  1723,  -859,  1733,  -861,  -864,  -857,  1736,  1756,\n+   -1481,  4735,  1556,  1914, -2128, -2896,   825,   162, -2896, -1420,\n+     198, -2896, -2896, -2896, -2896, -2635, -2896,  -528, -2896,  -521,\n+   -2896, -2896, -2896,  -647, -2750, -2896,  2127,   675, -2896, -2896,\n+     281, -2896, -2896, -2896, -2896, -1475, -2896,  5068,   585, -2896,\n+   -1942, -2896, -2896,  -914,  -622, -1044,  -953, -1233, -1312, -2896,\n+   -2896, -2896, -2896, -2896, -2896, -1187, -1692,  -176,   646, -2896,\n+   -2896,   730, -2896, -2896, -2896, -1685, -2020, -2896, -2896, -2896,\n+     655,  1212,    -6,  -644, -1562, -2896,   701, -2284, -2896, -2896,\n+     300, -2896,  -478, -1017, -2321,  3624,   106, -2896,  4484, -2426,\n+   -2896, -2896,  -556, -2553, -1075, -2896, -2896,   109, -2896,   249,\n+     110, -1622, -2896,    19, -2896,  -472, -2896, -2896, -2486, -2896,\n+     111,   112,  2097, -2896, -2896, -2896,  -462, -2896,  -485,  -477,\n+   -2896, -2896,    31,  -887,  1298, -2896,   114,   607, -2896,   764,\n+   -2896,   654,   115,   121,   116,  1086, -2896, -2896, -2896,    13,\n+    -535,   251, -2896,  1090, -2896, -2896,  2696, -2896,   117, -2896,\n+     924,   118, -2896, -2896,    72,  2617,   119,    22, -2140,   123,\n+   -2626, -1631,    -7, -2896, -2896, -2896,  -533, -2896, -2438\n };\n \n /* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If\n    positive, shift that token.  If negative, reduce the rule which\n    number is the opposite.  If zero, do what YYDEFACT says.\n    If YYTABLE_NINF, syntax error.  */\n-#define YYTABLE_NINF -1948\n+#define YYTABLE_NINF -1956\n static const yytype_int16 yytable[] =\n {\n-     502,   687,   676,   822,   713,   969,  1161,   803,  1303,    66,\n-    1447,    56,    52,    61,   502,  1719,    64,   919,    78,    96,\n-      73,  1062,  1341,  1729,  1388,  1092,  1718,  1391,    65,   500,\n-    1125,  1301,  1410,    88,  1500,  1871,  1254,  1347,    73,  2082,\n-    1783,  1694,  2450,   500,  1404,   658,  1967,  1672,  1690,  2483,\n-     586,  2051,   691,  2424,  1928,  2426,  1684,   815,  2182,  1160,\n-     692,  1166,  2440,  1170,   502,   502,   662,  2520,  2521,  2522,\n-    1734,  1424,   830,  1787,   913,  1616,  1723,  1422,  1986,  1987,\n-    1590,  1426,   951,   824,  1425,  1593,  2815,   972,  2837,  2835,\n-    2405,  1805,    49,   500,   500,    50,  2813,    51,  2476,    54,\n-      55,    57,  1528,   699,    58,  2439,  1530,    59,   674,  2852,\n-      62,    63,    76,    77,  2849,    79,  1327,  1328,    80,  2642,\n-      85, -1795,   946,    86,    87,  2205,    92,    93,    95,   633,\n-    2531,    97,   920,   707, -1182, -1921, -1921,  2201,   619, -1201,\n-    -486,  -489,  2102,  1339,   513,  2105,  1114, -1198, -1198,  1349,\n-   -1795,  1103,  3030, -1786,  2319,  2055,  2706,  3227, -1935, -1935,\n-    2711, -1926, -1926, -1803,  -815, -1202,  -820,  1078, -1201, -1786,\n-    -820, -1944, -1944, -1199, -1199,   989,   629,   629,  2545,   629,\n-    1397,   989, -1795, -1803,  1394,   989, -1202,  -782,   619,   619,\n-     499,  -795,  2534,  -823,   666,  2001,  2971,  -810,  1546,  2538,\n-    1598,  2370,  1675,  1548,   625, -1048,  3307,   740,   688,   689,\n-    2022,  -444,   629, -1048,   629,  1117,  3331,  1349,   629,   631,\n-     631,  -823,  2626,  3105,   679,  1349,  3016, -1946, -1946,  1594,\n-    1397,   629,  1349,  1556,  2115,   989,   627,   989,  -486,  -489,\n-    2954,  1848,  3034,  2001,  1695,  1695,  1850,  2587,  2589,  2038,\n-    2592, -1069,  2552,  -619,   625,   625,   726,  2039,  1321, -1069,\n-     988,  3118,  1347,  1848,  3187,  1558,  3299,  1849,  1850,  1254,\n-    1074,  1851,  1852,  1853,  2986,  1703,  3005,  1686,  1706,  1707,\n-    1546,  2938,  1417,  2940,  1547,  1548,   627,   627,  1721,  2331,\n-    2853,  3031,   815,  1081,  1678,  1322,  1780,   952,   684,   682,\n-    3260,  2188,  2048,   710,  2329,  2982,  3032,  2348,  2349,  2679,\n-    2108,  1431,  1732,   680,  1635,  1556,  2198,  3214,  2355,  3195,\n-    2479,  1733,  2359,  2720,     3,     4,   644,   727,   684,  2023,\n-    1848,   597,  3147,  1686,  1849,  1850,  2609,  1104,    21,  1595,\n-    3148,  3054,  2332,  3231,  2511,  2024,  1546,  1558,  2598,  2678,\n-    2025,  2680,  3351,  -755,   728,  2487,  3344,  3028,  1636,  1327,\n-    1328,  -210,  3250,  3134,  2729,    98,  -210,  1717,   683,  2416,\n-    2968,   919,  1342, -1920, -1920,  1339,   106,  3246,  3247,  1702,\n-    3196,  1556,  2944,  2762,  1524,   533,  2719,  1619,  2026,  3004,\n-    2730,   729,  1546,   972,  1343,  3024,  1547,  1548,  1848,   977,\n-    3025,  1254,  1849,  1850,  2077,   951,  3036,  3029,  3272,  2702,\n-     978,  3275,    99,  1558,  2749,  2859,  3135,  3133,  3332,  2945,\n-     728,  2109,  -486,  -489,   645,  3136,  2541,  1556,  3213,  3287,\n-    1411,   919,  3261,   953,  1350,  1105,  2476,  3300,  2476,   771,\n-    1888,  1696,  1696,  2969,   684,  1854,  2049,  3137,  2639,  1680,\n-    2854,  2480,  3314,  2342,  2343,  2344,  1082,   729,  1083,  1558,\n-    2189,  1596,  2983,  3285,  -639,  3315,   598,  3116,  1855,  1323,\n-    1516,  1638,  1693,  1888,  1941,   731,    25,    26,    27,  3052,\n-    2333,   815,  3188,  1671,  -755,  2078,  2750,  2363,  1820,  -486,\n-    -489,  3033,   730,  2626,  3094,  2330,  3100,  2599,  1667,  1668,\n-    2116,  3333,  1350,  3149,  3337,  1693,  1693,   741,  3302,  3345,\n-    1350,  3352,  2265,  3262,  1735,  3110,  2187,  1350,  3138,  1075,\n-     676,  3273,   927,   716,  1942,  2972,   667,  3308,  3334,   919,\n-     919,  3139,  1639,  3011,  2876,  2845,  1856,  2027,  3106,    32,\n-    1536,   731,  1110,  1620,  1931,   681,   988,  3339,   817,  1848,\n-    1967,  2867,  2002,  1849,  1850,  2857,   918,  1851,  1852,  1853,\n-   -1048,  2687,  1686,  1681,  1815,  2199,  2527,  2528,  2751,   989,\n-    1618,   676,  2596,  1687,  2651,  1599,    37,   711,   596,  3125,\n-    1324,   712,    73,  1686,  2102,  1669,  2453,  2815,   685,   514,\n-    1351,  2548,  1076,  2428,  1689,   915,   502,  2813,  2127,  2539,\n-    2407,  1110,  -486,  -489,  2040,   983, -1069,   502,    39,  3274,\n-    1325,   628,  2448,  1722,  2688,  1474, -1795,  1112,  1719,    42,\n-     677,  1481,  1511,  1126,  1513,   500,  2962,   711,  1770, -1182,\n-    1998,   712,  1736,    43, -1201,  1611,   500,  2442,   691,   502,\n-     502,  -486,  -489,  -486,  -489, -1795,   692,  2054, -1786,   815,\n-    3073,  3097,  1342,  1513,  1670,  2531,  3098,    44, -1803,  -815,\n-   -1202,  -820,   502, -1201, -1786,  2253,  1387,  1401,  1402,  2512,\n-    2269,    45,  1541,  1390,  1343,  3212,  1112, -1795, -1803,  1632,\n-    1342, -1202,  1329,  1579,  3219,  1524,  1333,    66,  1344,    56,\n-      52,    61,  -810,  1079,    64,  3218,    78,    96,    73,  1085,\n-    1784,  1785,  1343,   924,   502,  1251,    65,  1591,  1297,  2056,\n-    1079,    88,  2187,  2905,   940,  3009,  1346,  1401,  1402,  2995,\n-    2996,  1365,  1366,  1113,  3140,   988,  1865,  3141,  1848,  2953,\n-     101,   942,  1849,  1850,  1093,   663, -1948, -1948, -1948,  1857,\n-    1858,  1859,  1084,  1860,  1861,  1862,  1863,  1864,  1865,  2417,\n-    2620,   943,  1479,  1546,  1855,  3085,  1484,  3087,  1760,  2132,\n-    1574,  1575,  1576,  1577,  1578,  1579,  2148,  3117,  2152,  2835,\n-      49,  1708,  2955,    50,  1806,    51,   669,    54,    55,    57,\n-    3283,  2980,    58,   817,  1633,    59,   625,   803,    62,    63,\n-      76,    77,   922,    79,   631,  1695,    80,   625,    85,  3014,\n-    2699,    86,    87,  1794,    92,    93,    95,  1880,   815,    97,\n-    1860,  1861,  1862,  1863,  1864,  1865,   693,  2133,   627,  1713,\n-    1558,   502,  1856,  2988,   976,  3025,   516,  2300,  2234,   627,\n-     822,  2993,  2162,  1807,  2815,  1369,  1370,   815,   815,  1811,\n-    1895,  1695,  2165,  1714,  2813,  2168,  1071,  1695,  -210,  -210,\n-     919,  1486,  1629,   815,  2981,  2292,  3293,  1916,  1134,  1254,\n-    1983,  1254,  1940,  1524,  1135,  2281,  2700,  2327,   678,  3161,\n-    2282,  2132,  1970,  1110,  1576,  1577,  1578,  1579,  1111,  3103,\n-    1862,  1863,  1864,  1865,  2505,  3294,  2320,  1695,   517,  3353,\n-    2610,  2611,  2612,  2613,   102,  1984,  2010,  2506,  1695,  1337,\n-    1338,  1487,   726,   103,  1871,  1813,  2327,   913,  1967,  2733,\n-     918,  2723,  1709,  2336,  1808,  1713,  3342,  1724,   502,   502,\n-    1710,  1886,   516,  2011,   502,  2283,  2649,   502,   502,  2473,\n-     502,   502,   502,   502,  2397,  2274,  1134,  3090,   104,  1714,\n-      73,   718,  1135,   719,  2258,  1536,   502,  2272,  1112,  2257,\n-    2736,  2380,  3359,   502,  2260,  2262,  2263,  2259,  2261,  1817,\n-      21,  2398,   694,  1727,   989,  1136,  2301,  2523,  2484,  2510,\n-     918,  1297,   817,   727,  2570,   500,  2302,  3181,  2429,  3182,\n-    2430,  2574,   500,  2576,   517,  2241,   676,   105,   502,  2451,\n-    1147,   629,  1696,  3208,   989,  1113,  2929,  2724,  1988,   715,\n-    1806,  1856,  2161,  1889,  2004,   722,   502,  2264,  1890,  2514,\n-    1148,  2266,  3191,  1395,  2268,  1719,  1396,   502,   502,   502,\n-    2518,   502,   502,   733,  1251,  1857,  1858,  1859,  2124,  1860,\n-    1861,  1862,  1863,  1864,  1865,  2012,  2448,   711,  1696,  2210,\n-    2013,   712,  2280,  1136,  1696,  2014,  2284,  1609,   815,  2286,\n-    1610,   502,  -563,  3233,  1149,  2160,  1693,  -563,   720,  3241,\n-     721,  2725,   520,  2726,   521,  1507,  1747,    45,   918,   918,\n-     619,  2183,  2184,  2185,  2171,  2485,   711,   619,  2399,  2178,\n-    1535,  2513,   736,  2400,  1696,  1623,  1624,   737,  1630,   524,\n-    1467,  2459,  1342,   692,   692,  1696,   692,  1478,    25,    26,\n-      27,   502,  1693,  1748,  3108,   502,   502,  2658,  1693,  2740,\n-    1302,  -498,   738,  1403,  1343,   502,   502,   502,  1137,  1342,\n-     502,   516,  1528,   739,  1420,  -498,  2553,  -563,  1344,  1079,\n-    -498,  1464,  2561,  2042,  2136,  2238,   625,  2043,  1749,   742,\n-     817,  1343,  1747,   625,  1635, -1245,  1150,   744,  1693,  1490,\n-     711,   743, -1182,  1494,   712,  1346,  2741,  2163,   520,  1693,\n-     521,    32,  2166,  2224,  2872,  2225,   806,  1331,   627,  2337,\n-     828,  2338,  2742,  1403,  -563,   627,   927,  1139,  1930,  1748,\n-    -498,  1931,   925,   517,   815,   524,   926,  1750,  1636,  1340,\n-    1932,  2015,  1720,  1933,  2195,  1151,  1137,  2196,    37,  2339,\n-    -498,  2340,  2016,  1152, -1948, -1948, -1948,  1140,  1860,  1861,\n-    1862,  1863,  1864,  1865,  3020,  1153, -1917, -1917,  2148,  2148,\n-    2148,   928,  1879,  1383,  1881,  1882, -1918, -1918,  1137,  2401,\n-      39,   931,  1967,  2242,  1540,  2209,  1933, -1919, -1919,  2325,\n-    2402,    42,  3349,  1542,  2248,  2249,  1154,  -498,  2250,  1297,\n-     934,  1138,  1637,   935,   988,  1139,  -498,  1848,  1297,   936,\n-    1592,  1849,  1850,  1750,   937,  1851,  1852,  1853,   945,  1597,\n-    2743,  1403,  1403,  1440,   919,   532,  3340,  1141,  3341,  2744,\n-     561,  2251,  1297,  3317,  2250,  1140,   938,  2486,  2287,  2487,\n-   -1922, -1922,   635,    45,   815,   939,  1134,  1156,  3328,   817,\n-    2293,  1638,  1135,  2498,  2871,  2500,   673,   673,  1069,  1070,\n-     940,  1072,  2275,   974,  3358,  2276,  1754,  2488,  1755,  2716,\n-    1157,  2718,   502,  1757,  1758,  1134, -1923, -1923,   817,   817,\n-    2321,  1135,  2621,  1107,   979,  1109,  2628,  2326,   815,  1159,\n-   -1924, -1924,  2760,  2495,   817,  2497,  2313,   981,  3356,  2314,\n-     815,  1820,   982,  3357,  2753,  1141,   983,   520,   984,   521,\n-    1073,  2920,  1639,  2395,  2361,   703,   108,  2362,  2364,   512,\n-    1077,  2362,  1359,  1360,  2501,  2360,   560,  2502,  1251,  2360,\n-     815,   523,  1088,   919,   524,  2366,  2582,   815,  2752,   918,\n-    2761,   643,  1094,  2425,  2717,   656,  1100,  2832,  1097,  2507,\n-    -498,   806,  2508,  1136,  1095,   988,  1251,  1331,  1848, -1925,\n-   -1925,   502,  1849,  1850,  1098,    73,  1851,  1852,  1853,  1101,\n-    2564,  2633,  1340,  1931,  2362,   815, -1927, -1927,   915,   815,\n-     502,   502,  1136,  2652,  2694,   815,   502,  2695,   502,  2117,\n-    1365,  1366,  1134,   502,   502,   502,   502,  2844,  1135,  1108,\n-    2196,  3304,  2865,  2873,  1528,  2866,  2874,  2921,   502,   502,\n-    1933,  3047,  1855,   502,  1933,   502,   711,   500,   502,  1097,\n-     712,  3048,  1127,   502,  2362,   502,   502,  3076,   502,  1129,\n-    1933,  3081,   502,  3091,  1931,  1131,  3092,  2572,  2573,  1132,\n-    3124,  2462,   500,  2196,   500,  3158,  1133,   500,  1933,   502,\n-     502,  1145,   500,  1146,   502,   500,   502,   500,  1171,   502,\n-    3229,   500,  1937,  3230,  3254,  1934,  1163,  3255,  3298,  1935,\n-    2537,  3230,  3338,    73,  1167,  3230, -1928, -1928,  1251,  1299,\n-    1856,  1936,   502,  1300,   502,  1304,  1939,  2448,  1306,   817,\n-     502,   502,   502,   502,   502,   502,   502,   502,  1251,  1136,\n-    2051,  1307,   502,   502,  1369,  1370,  1137,   502,    67, -1929,\n-   -1929,   502, -1930, -1930,   502,   502,   502,   502,   502,   502,\n-     502,   502,   502,  1317,  3046,   502,    67,  2148,  1319,   618,\n-    1320,  2816,   502,  2152,  1297,  1137,  1325,   619,  1329,   619,\n-     806,  1332,   619,  1333,    67, -1931, -1931,   619,  1471,  1335,\n-     619,  1336,   619,   675,  1348,   502,   619,  1907,  1819,  1908,\n-    2084,  1164,  1910,  1855,  1147,  1139,  2760,  1914,   692,  1353,\n-    1917,  1356,  1918, -1932, -1932,  1354,  1922,   502,   625,   618,\n-     618,   690,  2808,  3157,  1148, -1933, -1933,  2963,   502,   502,\n-    1168,  1384,  1085,  1385,  1139,  1165, -1934, -1934, -1936, -1936,\n-   -1937, -1937,    67,   625,  1389,   625, -1938, -1938,   625,  1392,\n-     627, -1939, -1939,   625, -1940, -1940,   625,  1393,   625,  2136,\n-   -1941, -1941,   625,  1412,  1169,   817, -1943, -1943,  1149, -1945,\n-   -1945,  1856,  1134,  3010,  1251,   627,  1251,   627,  1135,  1458,\n-     627,  1413,  3316, -1947, -1947,   627,  3318,  1418,   627,  1445,\n-     627,  1460,  1137,  1461,   627,  1738,  1739,  2103,  2104,  -614,\n-    -614,  1367,  1368,  2579,  1468,  1141,  1475,  1369,  1370,   815,\n-    -618,  -618,  -617,  -617,   502,   919,  2931,  1476,  1297,   958,\n-    1482,   502,   502,  1857,  1858,  1859,  1483,  1860,  1861,  1862,\n-    1863,  1864,  1865,  1489,  1141,  2756,  1495,  2959,  2960,  1493,\n-    3354,  1603,  1605,  1503,  1147,  1504,  1506,  2123,   806,  -786,\n-    -793,  1139,  1511,  1983,   959,  1297,    45,  -639,  -783,  -640,\n-    1150,  -784,   502,  1515,  1148,  1846,  1847,  2228,  3157,  -787,\n-    1472,  1867,  2864,  1516,  2448,   817,  -785,  1529,  1520,  1136,\n-     961,  1140,   735,  1539,  1585,  2057,  1587,  1601,  1589,  1251,\n-    1617,  1612,  1613,  1621,   988,  1113,  1622,  1848,  1111,  1657,\n-    1659,  1849,  1850,   918,  1673,  1851,  1852,  1853,  1149,  1151,\n-    3157,  1661,   827,  1691,  1692,  1693,  2839,  1152,  1698,   817,\n-    1699,  1700,  2923,   502,   502,  1704,   502,  1712,  2710,  1153,\n-    1726,   817,   502,   502,   502,   502,   502,   502,  1711,  1716,\n-     502,   502,   502,   502,   502,   502,   502,   502,   502,   502,\n-    1731,  1141,  2831,  1740,  1744,   502,   502,  1752,  3157,   502,\n-    1154,   817,  1762,  1753,  2855,  1765,   502,  1766,   817,  3122,\n-    2991,  1768,  1769,  1771,  1857,  1858,  1859,  1772,  1860,  1861,\n-    1862,  1863,  1864,  1865,  1778,  1779,   989,  1786,   502,  1788,\n-    2733,  1789,   502,  1796,   502,   815,  2734,  1797,   502,  1806,\n-    1150,  1800,  1801,   965,  1840,  1802,   817,   806,  1803,  2735,\n-     817,  1156,   918,  1812,  1297,  1887,   817,  1837,  1839,  1842,\n-    1473,   500,  1905,   673,   682,   502,  1845,   500,  1868,  1877,\n-    1884,  2736,  1137,  2737,  1157,  1876,   806,   806,  -564,  1909,\n-    1915,  1919,  1920,  -564,  1921,  1926,  1929,  2811,  1528,  1151,\n-    1546,  3069,   806,  1159,   676,  1942,   502,  1152,  3000,  3001,\n-    1973,   502,   502,  3210,  1976,  1978,  1979,  2000,  1980,  1153,\n-    2007,  2582,  2018,  1471,  2019,  1981,  2021,  2045,  2046,  2052,\n-    2065,  2066,  2064,  2067,   683,   502,   502,  2169,  2080,  1134,\n-     502,  1139,  2083,   683,  2092,  1135,  2093,   815,  2094,  2095,\n-    1154,  2096,  1855,  2097,   502,  2118,  1403,   502,  2114,   502,\n-    2119,  2122,  2279,  -564,  2129,  2130,   619,  2863,  2125,  2738,\n-    1341,  2170,   619,  2131,   684,   502,  1251,  2197,  2211,  2193,\n-    2213,  2202,   502,  2214,  2215,   502,  2350,  3173,  2229,  2232,\n-    2230,  2235,  2353,  2236,  2237,  2239,  2240,  2243,  2244,  2245,\n-     502,  1156,  2267,  2246,  2277,  2247,  2255,  2256,  2285,  1873,\n-    -564,  1848,    67,   502,   500,  1937,  2910,   815,  1934,   684,\n-    1856,  2315,  1935,  1872,  1157,  2334,    73,  2346,  2354,   500,\n-     502,   502,   625,  2322,  1936,  2739,  2323,  2324,   625,  1939,\n-    2740,  1141,   815,  1159,  2328,  2367,  1136,   502,  2368,   502,\n-    1719,  2335,  2352,  2412,   958,  1951,  2376,  2375,   502,  2377,\n-      67,   675,  1952,  1953,   627,  1403,  1954,  1955,  1956,  2378,\n-     627,  2379,  2389,  2808,  2396,  2391,  1251,  1251,  1251,  2403,\n-    2413,  2418,  2419,  2420,  2433,  2435,  2436,  2741,  2443,   959,\n-    2444,  -620,  2454,  2441,  2457,  2455,  2458,   806,  2461,   815,\n-    2465,   929,  2466,  2742,  2467,  1480,  2469,  2471,   676,   619,\n-    2472,  2475,   941,  2494,  2496,   961,  3192,  2509,  2519,  1297,\n-    2977,  2515,  2524,  2516,   619,  2517,  2525,  2294,  2295,  2296,\n-    2297,  2298,  2299,  2536,  2526,  2303,  2304,  2305,  2306,  2307,\n-    2308,  2309,  2310,  2311,  2312,  2540,  2535,  2551,   498,   509,\n-     817,  2554,  1754,   530,  1755,  2555,  2999,   690,   530,  1757,\n-    1758,  2550,   616,   685,   630,   630,  2558,  2562,   502,   634,\n-     530,   639,  2567,  2569,   639,   625,    67,   657,   661,  2577,\n-    2578,   661,  2586,    21,   530,   530,  2594,  2597,  2617,  2600,\n-     625,  2603,  2618,  2604,  2605,  2629,  2630,  2606,  2636,  1137,\n-    2640,  2743,  2646,  2656,   918,  2684,   815,   627,  2657,  1251,\n-    2744,  2654,   616,   616,  2660,  2675,  2703,  2670,  2707,  2715,\n-    2681,  2669,   627,  1857,  1858,  1859,  2748,  1860,  1861,  1862,\n-    1863,  1864,  1865,   806,  2677,   657,  2682,  2701,   965,  3111,\n-     815,  2705,   661,   530,   661,   661,   661,   502,  2721,  2722,\n-    2728,  2764,  2838,  2834,  2176,  1473,  2828,  3292,  1139,  2829,\n-     919,  2830,  2842,  2843,  2846,  -498,  2847,  2851,  2860,  2196,\n-    3192,  2862,  2869,  2870,  2895,  2875,   500,  2897,   676,  -498,\n-    2392,  2393,  2901,  2906,  -498,  2913,  2503,   502,  2177,  2912,\n-    2672,  2932,  2939,  2943,  2952,  2950,  2956,   673,  2957,  2966,\n-    2958,   955,  2964,   502,  2965,  2970,   956,   502,   502,  2974,\n-     676,   516,   815,  2975,   502,  2976,  2627,  2984,  2987,  2989,\n-    2808,    25,    26,    27,   502,  2990,  2994,   502,  3007,   502,\n-    2529,  2447, -1198,  3008,  -498, -1245,   817,   502,  3006,  3015,\n-     502,   502,  3017,   806,  3021,   502,   502,  2542,  3175,  3162,\n-    3022,  3164,   502,  1983,  -498, -1916, -1917, -1918,  1141, -1919,\n-    2709, -1920, -1921,   957, -1922, -1923,   502, -1924,  3035, -1925,\n-   -1927, -1928, -1929,   517, -1930,  3039,   502, -1931, -1932, -1933,\n-    3172, -1934, -1936, -1937,    32, -1938,  2693,   806,  3037, -1939,\n-    3174,  3040, -1940,  3177, -1941, -1942,   502, -1943,  2811,   806,\n-   -1944,  -498, -1945, -1946, -1947, -1199,  3043,  1403,  3049,  3050,\n-    -498,  3053,  3057,  3061,  2584,  3055,  2585,    10,    67,  3064,\n-    2590,    37,  2593,  3063,  3067,   518,  3068,  3070,  3075,   806,\n-    3080,  3088,   958,  3089,  3093,  1251,   806,   625,  2814,  1251,\n-    3256,  1251,  3096,  3099,  3252,  3101,  3113,  3114,   815,  3121,\n-    3123,   618,  3129,    39,  3130,  3131,  3144,  3145,   618,  3245,\n-    3146,  3159,  3166,  3160,    42,  3167,  3179,   959,  1419,   627,\n-     629,  3163,  3169,  3176,   806,  3199,  2983,  3205,   806,  3203,\n-    3206,  3221,  3215,   960,   806,  2836,  3222,  3209,    21,  1508,\n-    1754,  3242,  1755,   961,  3227,  3223,  3232,  1757,  1758,   519,\n-    1512,  3239,  3234,  3236,  2935,  3244,  3240,  3251,   817,  3249,\n-    3253,  2856,  3258,  3263,  2858,  3269,    45,  3270,  3271,   676,\n-    3276,  3296,  3278,  3277,  3286,   962,  3288,  1526,  3306,  3290,\n-     502,  3309,  3291,   817,  1957,  1958,  1959,  3311,  1960,  1961,\n-    1962,  1963,  1964,  1965,  3326,  3329,  1911,   520,  3307,   521,\n-     502,   502,  3308,  3343,  -498,   502,  3350,  3355,   502,  2492,\n-    1099,  2156,  2763,  2767,  3186,   522,  3284,   502,  3248,   963,\n-    2696,   523,  1357,  1358,   524,  3348,   964,  2997,  3267,   502,\n-    3336,  3109,  3305,  3312,   502,   502,  3330,  2627,   676,   502,\n-     817,  3143,  1683,  1809,   502,  1810,  2474,   502,   502,  2499,\n-     713,  3303,   502,  1297,   690,   690,   502,   690,  3310,  2470,\n-     502,  3301,  2732,  3280,  1804,  2817,   965,   502,  1782,  2532,\n-     711,  1751,  2583,  3044,   712,  2460,    25,    26,    27,  2850,\n-    1465,  1614,  2446,   966,  1466,  2121,  1654,  2833,  1653,   500,\n-    3289,  2807,   955,  2608,  2456,  2811,  2089,   956,  1359,  1360,\n-    3235,  3165,  2120,   620,  2432,  2904,   661,  1658,  2358,  3072,\n-     661,   502,   944,   661,  1432,   930,  2602,  2601,  2529,   502,\n-     530,  2632,  3115,  1795,  3238,  1421,  3237,  1423,  2387,  3325,\n-    2410,  2638,  1427,  2371,  1428,  2662,  2663,  2449,   502,    32,\n-    2408,  1896,  2942,  2388,  2431,   815,  3225,   817,   820,   530,\n-     530,   967,  2648,  1814,   957,  2365,  1912,   923,  2060,  2697,\n-    2062,   534,  1361,  1362,  1363,  1364,  1365,  1366,   642,   700,\n-    1367,  1368,     0,     0,     0,   531,    37,     0,     0,     0,\n-     531,  2814,     0,     0,   619,     0,     0,   921,   509,   630,\n-       0,     0,   531,     0,   498,    38,   661,     0,     0,     0,\n-       0,     0,     0,     0,  1467,   616,   531,   531,    39,   948,\n-     948,     0,     0,  1592,   948,   971,     0,     0,   806,    42,\n-       0,   502,     0,   958,     0,     0,     0,     0,     0,   665,\n-       0,  1121,   676,    43,     0,     0,     0,     0,     0,   639,\n-     639,     0,   639,     0,     0,     0,  3027,     0,     0,   918,\n-     625,     0,   502,   817,     0,   661,     0,    44,   959,     0,\n-       0,   530,     0,     0,     0,   531,     0,  2941,   502,     0,\n-       0,    45,   661,     0,   960,     0,     0,     0,     0,     0,\n-    1369,  1370,   627,     0,   961,     0,   661,     0,  1297,     0,\n-     702,     0,   705,     0,   709,   502,     0,     0,     0,     0,\n-       0,  1545,     0,     0,  1546,     0,   502,   502,  1547,  1548,\n-     502,     0, -1948, -1948, -1948,     0,   962,     0,     0,   955,\n-     661,   661,   661,   661,   956,  2868,     0,     0,     0,     0,\n-    2128,     0,     0,     0,     0,   502,     0,  1122,     0,  1556,\n-    2137,     0,  2140,    67,     0,  2151,  1557,     0,     0,     0,\n-       0,  2155,     0,  2157,     0,     0,     0,     0,     0,   502,\n-     963,     0,     0,     0,     0,  2164,     0,   964,     0,     0,\n-    2167,  1558,     0,     0,  2172,  2173,  2174,  2175,     0,  2179,\n-    2180,   957,     0,     0,     0,     0,     0,     0,     0,  2814,\n-       0,     0,     0,   808,     0,  1371,  1372,     0,     0,     0,\n-       0,    21,     0,     0,   806,     0,     0,   965,     0,     0,\n-     809,     0,     0,     0,     0,     0,  3126,  3127,   618,     0,\n-     618,     0,   502,   618,   966,   955,   502,     0,   618,  3023,\n-     956,   618,     0,   618,     0,     0,   502,   618,   502,     0,\n-     502,     0,     0,     0,   502,     0,   502,     0,   502,     0,\n-     958,    67,  1403,     0,     0,   500,     0,     0,   502,     0,\n-       0,     0,     0,     0,  2979,  1559,   988,     0,     0,  1848,\n-       0,   502,     0,  1849,  1850,     0,     0,  1851,  1852,  1853,\n-       0,  1560,     0,     0,  1251,   959,  1561,   957,  3183,   502,\n-    3185,     0,   967,     0,  2924,     0,     0,  1123,     0,     0,\n-       0,   960,     0,     0,     0,     0,   806,     0,     0,  2008,\n-       0,   961,     0,     0,     0,     0,     0,     0,     0,     0,\n-     948,   971,     0,   661,  1564,  3086,  1439,     0,     0,  3217,\n-       0,     0,   948,   948,     0,     0,   502,     0,   530,    25,\n-      26,    27,     0,   962,   616,  3220,   502,     0,     0,  3224,\n-       0,   616,     0,     0,  2689,     0,   958,     0,     0,   502,\n-       0,   530,     0,     0,  1124,     0,     0,     0,     0,     0,\n-       0,   502,     0,  1823,  1505,     0,   806,  1567,     0,   690,\n-       0,     0,     0,     0,     0,     0,     0,   963,     0,   502,\n-       0,   959,  2807,     0,   964,     0,     0,  3045,     0,     0,\n-     500,   806,    32,     0,     0,     0,     0,   960,    21,     0,\n-       0,     0,     0,   502,     0,     0,   625,   961,  1824,     0,\n-       0,     0,     0,     0,   530,     0,     0,   502,   808,     0,\n-       0,     0,     0,     0,   965,     0,  2814,  1825,  1251,    37,\n-       0,     0,   500,     0,     0,   809,     0,     0,   627,   962,\n-       0,   966,     0,     0,     0,  1826,     0,     0,   806,  1827,\n-       0,   502,     0,     0,     0,     0,     0,     0,  1606,  3313,\n-    1608,    39,     0,  1569,  1855,     0,   502,   502,     0,     0,\n-       0,  1828,    42,     0,  1829,   530,   530,     0,     0,     0,\n-     500,   661,   531,   963,     0,  3327,    43,     0,     0,  1830,\n-     964,     0,   502,     0,   717,     0,     0,  2212,   724,  3211,\n-       0,   725,     0,  1439,     0,     0,    67,  1809,     0,   967,\n-      44,   531,   531,     0,   661,  1682,     0,     0,     0,     0,\n-       0,     0,     0,     0,    45,     0,  2690,   661,   502,     0,\n-     965,     0,  1856,  1147,     0,     0,    25,    26,    27,     0,\n-       0,     0,     0,     0,   661,     0,     0,   966,   661,     0,\n-       0,   625,  1728,  1148,     0,   806,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,  1570,     0,     0,\n-   -1948, -1948, -1948,     0,  1574,  1575,  1576,  1577,  1578,  1579,\n-    1831,     0,     0,   627,   933,     0,     0,     0,  1832,   806,\n-       0,     0,     0,   625,     0,     0,     0,  1149,  2754,    32,\n-       0,     0,     0,     0,     0,     0,  2755,   808,     0,  1833,\n-       0,     0,     0,     0,     0,   967,     0,     0,     0,     0,\n-       0,     0,     0,   531,   809,   627,     0,     0,     0,  2807,\n-       0,     0,     0,     0,     0,  1834,    37,     0,     0,     0,\n-       0,   625,     0,     0,     0,     0,     0,   618,     0,     0,\n-       0,     0,  1545,   618,     0,  1546,     0,     0,     0,  1547,\n-    1548,   806,     0,     0,  2756,     0,  3086,     0,    39,     0,\n-    2557,     0,     0,   627,  1128,     0,     0,     0,     0,    42,\n-       0,  1741,     0,   661,     0,     0,     0,     0,   661,  1150,\n-    1556,     0,     0,    43,     0,     0,     0, -1948,     0,  1775,\n-       0,     0,     0,     0,     0,     0,     0,     0,  1309,  1311,\n-    1314,  1316,     0,     0,     0,     0,     0,    44,     0,     0,\n-       0,     0,  1558,     0,     0,     0,     0,     0,     0,  1792,\n-       0,  2691,     0,     0,  1792,  1857,  1858,  1859,  1151,  1860,\n-    1861,  1862,  1863,  1864,  1865,  1526,  1152,     0,     0,     0,\n-   -1681,     0,     0,     0,     0,     0,     0,     0,  1153,     0,\n-    2757,     0,  2227,  2008,     0,   820,     0,     0,   820,     0,\n-     530,   530,     0,   530,   820,   808,     0,     0,     0,  2414,\n-       0,     0,    21,     0,     0,  2394,     0,     0,     0,  1154,\n-     618,     0,   809,     0,     0,     0,     0,   806,     0,     0,\n-       0,     0,     0,     0,    67,   618,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0, -1948,     0,  1439,  1439,\n-       0,     0,     0,     0,  1439,     0,   498,     0,     0,     0,\n-       0,     0, -1948,     0,     0,     0,     0, -1948,     0,   948,\n-    1156,   530,  1891,     0,     0,     0,     0,     0, -1681,   661,\n-       0,   616,     0,   616,     0,     0,   616,     0,     0,     0,\n-       0,   616,     0,  1157,   616,     0,   616,     0,     0,     0,\n-     616,     0,   530,     0,   530, -1948,     0,     0,     0, -1683,\n-       0,     0,  1159,     0,  2758,     0,     0,  2759,     0,     0,\n-       0,     0,     0, -1681,     0,     0,  1966,     0,     0,     0,\n-    1459,  1972,     0,     0,     0,     0,     0, -1681,     0,  2712,\n-    2713,  1434, -1681,     0,     0,     0,     0, -1681,     0,     0,\n-      25,    26,    27,  1492,     0,     0, -1681,     0,  1567,     0,\n-   -1681,     0,     0,     0,   808,     0,     0,  2765,     0,   820,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,   675,\n-       0,   809,  2818,  2819,  2820,  2821,  2822,  2823,  2824,  2825,\n-    2826,  2827, -1681,   808,   808,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0, -1683,     0,   808,\n-     809,   809, -1681,    32,     0,     0,  1531,     0,  2058,     0,\n-     661,     0,   661,  1693,   811,     0,   809,     0,     0,     0,\n-       0,     0,   661,  2072,     0,  3026,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,  1439,     0,     0,     0,     0,\n-      37,     0, -1683,     0, -1948,    21,     0,     0,     0, -1681,\n-       0,     0, -1681,     0,     0,     0, -1683,     0, -1681,     0,\n-     661, -1683,   530,     0,   806,     0, -1683,   531,   531,     0,\n-       0,     0,    39,     0,     0, -1683,     0,  1682,   530, -1683,\n-       0,     0,     0,    42,     0,     0,     0,     0,   530,  2138,\n-     530,  2142,     0,   530,     0,     0, -1681,    43,     0,   530,\n-       0,   530,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0, -1683,   820,   530,     0,     0,     0,   820,   530, -1681,\n-       0,    44,   530,   530,   530,   530,     0,   530,   530,     0,\n-       0, -1683,  1674,     0,     0,    45,     0,     0,     0,  1526,\n-       0,    21,     0,     0,     0,  1701,     0,     0, -1948,   661,\n-     661,   661,   661,   661,     0,  1574,  1575,  1576,  1577,  1578,\n-    1579,     0,     0,     0,     0,     0,  1725,  2217,     0,  1545,\n-       0,  1526,  1546,     0,     0,   663,  1547,  1548, -1683,     0,\n-       0, -1683,     0,    25,    26,    27,     0, -1683,     0,     0,\n-       0,     0,     0,     0,   808,    67,     0,     0,  2978,     0,\n-       0,     0, -1681,     0,     0,     0,     0,  1556,     0,     0,\n-       0,   809, -1681,     0, -1948,     0,     0,     0,     0,     0,\n-       0,  2708,     0,     0,     0, -1683,     0,     0,     0, -1681,\n-       0, -1681, -1681,     0,     0,     0,     0,     0,     0,  1558,\n-       0,     0,     0,     0,     0,     0,    32,     0, -1683,   811,\n-    1439,  1439,  1439,  1439,  1439,  1439,     0,     0,  1439,  1439,\n-    1439,  1439,  1439,  1439,  1439,  1439,  1439,  1439, -1681,  3184,\n-       0, -1681, -1681, -1681,     0,     0,     0,     0,     0,    25,\n-      26,    27,     0,    37,     0,     0,     0,     0,   530,     0,\n-       0,     0,     0,     0,    67,     0,     0,     0,     0,     0,\n-     661,  1746,  2404,     0,   663,     0,  1761,     0,     0,     0,\n-     616,     0,     0,     0,     0,    39,   616,     0,     0,     0,\n-      67,     0,   530,    67,     0,     0,    42,   530,     0,     0,\n-     808, -1683,   812, -1948,     0,     0,     0,     0,     0,     0,\n-      43, -1683,    32,     0,     0,  1545,     0,   809,  1546, -1948,\n-       0,     0,  1547,  1548, -1948,     0,     0,     0, -1683,     0,\n-   -1683, -1683,   531,   531,    44,   531,     0,     0,     0,     0,\n-       0,     0,   530,     0,     0,     0,  2384,     0,    45,    37,\n-    1526,   530,     0,  1556,     0,     0,     0,     0,     0,     0,\n-   -1948,     0, -1948,     0,     0,     0,   814, -1683,     0,     0,\n-   -1683, -1683, -1683,  1439,  1439,     0,     0,     0,     0,     0,\n-       0,    39,     0,     0,     0,  1558,  1357,  1358,     0,     0,\n-    1966,     0,    42,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,   531,     0,   618,    43,     0,   811,     0,\n-     808,     0,     0,     0,     0,  1567,     0,     0,     0,   675,\n-    3112,     0,     0,   616,     0,     0,     0,   809,     0,     0,\n-      44,     0,     0,     0,  1923,   530,  1927,  1903,   616,     0,\n-    3119,  3120,  2072,     0,    45,     0,     0,     0,  2661,     0,\n-       0,     0,     0,     0,   808,     0,     0,     0,     0,  3132,\n-       0,     0,  1359,  1360,     0,     0,   808,     0,     0,     0,\n-       0,   809,     0,     0,     0,     0,     0,     0,     0, -1948,\n-       0,     0,   530,   809,     0,  1439,     0,     0,   530,     0,\n-       0,     0,     0,     0,     0, -1948,   808,     0,     0,     0,\n-   -1948,     0,     0,   808,  1741,     0,     0,     0,     0,     0,\n-       0, -1948,     0,   809,     0,     0,     0,     0,     0,     0,\n-     809,  1406,     0,     0,     0,     0,  1361,  1362,  1363,  1364,\n-    1365,  1366,     0,     0,  1367,  1368,     0,   812, -1948,     0,\n-       0,   808,     0,     0,     0,   808,     0,     0,     0,     0,\n-       0,   808,     0,     0,     0,     0,     0,     0,   809,     0,\n-       0,     0,   809,     0,     0,     0,     0,  1741,   809,     0,\n-       0,     0,     0,   661,     0,    67,   811,     0,  2059,     0,\n-    2061,  1406,     0,     0,  1741,   661,   661,   661,     0,     0,\n-    2069,  1567,     0,     0,     0,     0,     0,     0,   530,     0,\n-     661,   814,     0,   661,   531,     0,     0,     0,   661,     0,\n-       0,     0,     0,  1526,     0, -1948,     0,     0,     0,     0,\n-     531,  2575,  1574,  1575,  1576,  1577,  1578,  1579,  2106,     0,\n-     531,     0,   531,     0,     0,   531,     0,     0,   820,     0,\n-       0,   531,     0,   531,  1369,  1370,     0,     0,     0,     0,\n-       0,  1543,     0,  1741,  1741,   531,  1741,     0,     0,     0,\n-     531,     0,     0,     0,   531,   531,   531,   531,     0,   531,\n-     531,     0,     0,     0,     0,     0,     0,  1406,     0,  1406,\n-    1406,     0,  3297,     0,     0,   498,     0, -1948,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,  2607,     0,     0,     0,     0,\n-       0,     0,     0,   661,   661,   661,     0,  2203,  2204,  2206,\n-    2207,  2208,     0,   530,     0,  1439,   812,   530,     0,     0,\n-       0,     0,     0,   530,     0,   811,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,    67,    67,     0,  1966,     0,\n-       0,     0,  1406,     0,     0,  1406,  1406,     0,     0,  1371,\n-    1372,     0,     0,     0,   811,   811,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,  1439,  1439,\n-     811,     0,     0,     0,  1357,  1358,     0,     0,     0,     0,\n-     814, -1948,     0,     0,     0,     0,     0,     0,  1574,  1575,\n-    1576,  1577,  1578,  1579,     0,     0,  2686,     0,     0,     0,\n-       0,     0,  2072,     0,     0,     0,     0,    67,     0,    67,\n-       0,     0,     0,     0,     0,     0,     0,     0,   661,     0,\n-     531,     0,   530,     0,     0,   808,   530,   530,   530,     0,\n-       0,     0,  1741,  1682,  1741,     0,  1775,     0,     0,     0,\n-       0,     0,   809,     0,     0,     0,     0,     0,    67,     0,\n-    1359,  1360,     0,     0,  2357,   530,     0,  2766,  2341,  1927,\n-       0,     0,     0,     0,    67,     0,     0,     0,    67,     0,\n-     530,   530,   530,   530,   530,   530,   530,   530,   530,   530,\n-       0,     0,     0,     0,   812,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,  2217,     0,     0,     0,\n-       0,     0,   661,     0,   531,     0,     0,     0,     0,     0,\n-       0,     0,  1682,  1531,  1361,  1362,  1363,  1364,  1365,  1366,\n-       0,     0,  1367,  1368,     0,     0,     0,  1781,  1775,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,  1790,     0,\n-    1791,     0,     0,     0,     0,     0,     0,  1741,   814,     0,\n-    1798,     0,     0,     0,     0,     0,     0,     0,  1439,     0,\n-       0,     0,     0,     0,   530,   811,     0,  1799,     0,     0,\n-       0,   661,   661,   661,   661,     0,     0,     0,     0,     0,\n-       0,     0,     0,  1439,     0,     0,  1439,     0,    67,     0,\n-     530,   820,     0,     0,     0,  1816,  1818,   531,     0,     0,\n-       0,  1545,     0,     0,  1546,     0,  2914,     0,  1547,  1548,\n-       0,   808,     0,     0,    67,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,   809,     0,\n-       0,     0,  1369,  1370,     0,     0,  2936,     0,   616,  1556,\n-       0,     0,     0,   812,   531,     0, -1948,     0,     0,     0,\n-    2464,     0,  2947,     0,     0,     0,  2072,     0,     0,     0,\n-       0,     0,  1966,     0,     0,     0,     0,   988,     0,     0,\n-    1848,  1558,   812,   812,  1849,  1850,  1682,     0,  1851,  1852,\n-    1853,     0,  1741,     0,     0,     0,     0,     0,   812,     0,\n-       0,     0,     0,     0,     0,   820,   530,  1439,     0,     0,\n-       0,   811,     0,   661,     0,     0,     0,   814,     0,     0,\n-       0,     0,     0,   808,     0,     0,     0,     0,     0,     0,\n-    2998,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-     809,     0,     0,     0,  2664,     0,   814,   814,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,  1371,  1372,     0,\n-       0,     0,   814,     0,     0,     0,     0,     0,     0,     0,\n-     531,  2533,     0,     0,     0, -1948,     0,  1373,     0,     0,\n-       0,     0,     0,  2546,  2547,  2549,     0,     0,  1048,  1048,\n-       0, -1948,     0,   808,     0,     0, -1948,     0,  2560,     0,\n-       0,  2563,     0,     0,     0,  1741,  2568,     0,     0,     0,\n-     809,     0,     0,     0,     0,     0,     0,  2217,   808,     0,\n-       0,   811,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,  3041,     0,     0, -1948,   809,     0,     0,     0,     0,\n-    1439,     0,     0,     0,     0,  1441,     0,     0,     0,  2101,\n-    2101,     0,     0,  1173,     0,     0,     0,  1292,     0,     0,\n-       0,     0,     0,     0,     0,   811,  3058,     0,     0,     0,\n-       0,     0,   530,     0,     0,   808,     0,   811,     0,     0,\n-     530,     0,     0,     0,     0,  1855,     0,  1567,     0,     0,\n-       0,     0,   809,   812,     0,   531,     0,     0,     0,   531,\n-       0,     0,     0,     0,     0,  1923,  3083,   811,     0,  1406,\n-       0,  2614,  2615,  2616,   811,     0,     0,     0,     0,  1406,\n-    1442,     0,  1406,     0,     0,     0,     0,   530,     0,     0,\n-       0,     0,   530,   988,     0,     0,  1848,     0,     0,     0,\n-    1849,  1850,     0,     0,  1851,  1852,  1853,     0,     0,     0,\n-       0,     0,   811,  1856,     0,     0,   811,   814,   530,     0,\n-       0,     0,   811,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,   530,   530,\n-       0,     0,   808, -1948,     0,     0,     0,     0,     0,     0,\n-       0,   661,     0,  1682,     0,     0,     0,   530,     0,   809,\n-    2252,  2254,     0,     0,   531,     0,     0,     0,   531,   531,\n-     531,   661,     0,     0,  3154,     0,   808,     0,     0,     0,\n-       0,     0,     0,  1650,  1406,     0,  2704,     0,     0,   812,\n-       0,     0,  1441,   809,  1439,     0,     0,   531,   530,   948,\n-       0,     0,   948,     0,     0,     0,     0,     0,     0,     0,\n-       0, -1697,   531,   531,   531,   531,   531,   531,   531,   531,\n-     531,   531,     0,  2947,     0,     0,     0,  1416,     0,     0,\n-     661,     0,     0,  1433,     0,     0,  1435,     0,     0,  1446,\n-    1449,  1454,  1457,     0,     0,     0,     0, -1948,   808,     0,\n-       0,     0,     0,   814,  1574,  1575,  1576,  1577,  1578,  1579,\n-     661,     0,     0,     0,     0,   809,     0,  1442,     0,     0,\n-    2841,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-    1292,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,  1406,     0,     0,     0,  1509,  3058,   812,\n-       0, -1948,     0,     0,     0,     0,  1923,     0,     0, -1697,\n-       0,     0,     0,     0,     0,  1514,  1857,  1858,  1859,  3154,\n-    1860,  1861,  1862,  1863,  1864,  1865,  1517,  1518,  1519,     0,\n-    1523,  1527,  2357,     0,     0,     0,     0,     0,     0,  2877,\n-    2878,  2879,  2880,   812,     0,     0,  1682,     0,     0,     0,\n-       0,     0,     0,     0, -1697,   812,     0,     0,   820,   820,\n-    1588,  3154,   820,   814,     0,     0,     0,     0, -1697,  1856,\n-    1891,     0,     0, -1697,     0,     0,     0,     0, -1697,     0,\n-     530,     0,     0,     0,   808,   812,     0, -1697,     0,     0,\n-       0, -1697,   812,     0,     0,     0,     0,     0,     0,     0,\n-       0,   809,  1682,     0,     0,     0,   811,   814,     0,  3154,\n-    1628,     0,     0,     0,  1644,  1649,     0,     0,     0,   814,\n-    2427,  1545,     0, -1697,  1546,  1048,  1048,     0,  1547,  1548,\n-     812,     0,     0,     0,   812,     0,     0,     0,   531,     0,\n-     812,     0,     0, -1697,     0,     0,   820,     0,     0,   814,\n-       0,  2452,  2452,     0,     0,     0,   814,     0,     0,  1556,\n-    2072,     0,     0,     0,     0,     0, -1948,     0,     0,     0,\n-       0,  2985,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-   -1697,  1558,     0, -1697,   814,     0,     0,     0,   814, -1697,\n-       0,     0,     0,     0,   814,     0,     0,  1441,  1441,     0,\n-       0,     0,     0,  1441,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0, -1697,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,  2665,     0,     0,     0,  1292,     0,\n-   -1697,     0,     0,     0,     0,     0,     0,  1292,     0,     0,\n-       0,     0,  1857,  1858,  1859,     0,  1860,  1861,  1862,  1863,\n-    1864,  1865,  1442,  1442,     0, -1948,     0,     0,  1442,     0,\n-       0,  1292,   811,     0,     0,     0,     0,     0,     0,     0,\n-       0, -1948,     0,     0,  3066,     0, -1948,  2571,     0,     0,\n-       0,  1545,  2357,     0,  1546,     0,   663,     0,  1547,  1548,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,   808,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0, -1697, -1948,     0,     0,     0,   809,  1556,\n-       0,     0,     0, -1697,     0,     0, -1948,     0,     0,   531,\n-       0,     0,     0,     0,   531,     0,     0,     0,     0,     0,\n-   -1697,     0, -1697, -1697,     0,     0,     0,     0,     0,     0,\n-       0,  1558,     0,     0,     0,     0,     0,     0,     0,     0,\n-     531,     0,     0,     0,   811,     0,     0,  1567,     0,     0,\n-       0,     0,     0,     0,  2091,     0,     0,     0,     0, -1697,\n-     531,   531, -1697, -1697, -1697,     0,     0,     0,     0,     0,\n-    1838,     0,     0,     0,   812,     0,     0,     0,     0,   531,\n-       0,     0,  2050,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,  2927,     0,     0,     0,     0,  3128,\n-       0,     0,  1454,     0,  1454,  1454,     0,     0,     0,     0,\n-       0,     0,     0,     0,   811,     0,     0,  1048,  1048,  3152,\n-     531,     0,     0,     0,     0, -1948,     0,     0,  1545,  1442,\n-       0,  1546,     0,     0,  1048,  1547,  1548,     0,   814,   811,\n-       0, -1948,     0, -1948,     0,     0, -1948,     0,     0,     0,\n-       0,     0,     0,     0,     0,  1134,     0,     0,     0,     0,\n-       0,  1135,     0,  1945,     0,  1946,  1556,     0,     0,  1147,\n-       0,     0,     0, -1948,     0,     0,     0,     0,  3190,     0,\n-       0,     0,     0,     0, -1948,     0,     0,     0,     0,  1148,\n-       0,     0,     0,  1985,     0,     0,   811,     0,  1558,  1989,\n-    1990,  1991,  1992,  1993,  1994,  1995,  1996,     0,  3216,     0,\n-       0,  2005,  2006,     0,     0,     0,  2017,     0,     0,  1406,\n-    2020,     0,     0,  2028,  2029,  2030,  2031,  2032,  2033,  2034,\n-    2035,  2036,     0,  1149,  2037,     0,     0,  1567,     0,     0,\n-       0,  1048,     0,  1292,     0,     0,     0, -1948,     0,     0,\n-       0,     0,     0,     0,  1574,  1575,  1576,  1577,  1578,  1579,\n-     812,     0,  1136,     0,  2063,     0,     0,     0,     0,  1441,\n-    1441,  1441,  1441,  1441,  1441,     0,     0,  1441,  1441,  1441,\n-    1441,  1441,  1441,  1441,  1441,  1441,  1441,     0,     0,     0,\n-       0,     0, -1948,     0,     0,     0,     0,  1518,  1519,     0,\n-       0,     0,   531,   811,     0,     0,     0,     0, -1948,     0,\n-       0,     0,     0, -1948,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,   814,  1150,     0,     0,     0,     0,\n-       0,     0,     0, -1948,     0,     0,     0,   811,     0,     0,\n-     535,     0,     0,     0,  1442,  1442,  1442,  1442,  1442,  1442,\n-       0, -1948,  1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,\n-    1442,  1442,   812,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,  1151,     0,     0,     0,     0,     0,\n-       0,     0,  1152,  2181,     0,     0,     0,  1292,     0,     0,\n-    2191,  2192,     0,     0,  1153,   536,     0,     0,     0,     0,\n-       0,     0,     0,     0,  1567,     0,     0,     0,     0,   811,\n-       0,   537,     0,     0,     0,  1137,     0,     0,     0,     0,\n-       0,     0,  1441,  1441,  1292,  1154,   814,     0,     0,     0,\n-       0,     0,   812,     0,     0,     0,     0, -1948,     0,     0,\n-       0,     0,     0,     0,  1574,  1575,  1576,  1577,  1578,  1579,\n-       0,     0,     0,     0,     0,     0,   -42,   812,   538,     0,\n-       0,     0,     0,     0,     0,     0,     0,  1406,   539,     0,\n-    1155,     0,  1406,     0,  1139,     0,  1156,     0,     1,     0,\n-     540,     0,     0,     0,     0,   541,     0,     0,     2,     0,\n-       3,     4,  2289,  2290,     0,  2291,   814,  1442,  1442,  1157,\n-   -1948,     0,     0,     5,  1158,     0,     0,     0,     6,     0,\n-       0,     0,     0,   542,   812,     0,     0,     7,  1159,  1816,\n-    1818,   814,     0,     0,  2317,  2318,     0,     0,  2063,     8,\n-       0,     0,     0,     0,  1441,     0,     0,     0,     0,     0,\n-       9,     0,     0,     0,     0,   811,     0,     0,     0,     0,\n-       0,     0,    10,     0,    11,     0,   543,  2345,     0,     0,\n-     544,     0,     0,  2351,     0,    12,     0,     0,     0,     0,\n-       0,     0,     0,     0,  1141,     0,     0,     0,   814,    13,\n-      14,     0,     0,  1292,     0,     0,     0,     0,     0,    15,\n-       0,     0,     0,     0,  2369,    16,     0,     0,     0,     0,\n-       0,     0,     0,    17, -1948,    18,    19,     0,     0,  1442,\n-       0,  1574,  1575,  1576,  1577,  1578,  1579,     0,     0,    20,\n-       0,   812,     0,    21,     0,  2382,   545,     0,     0,     0,\n-    2385,  2386,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,   546,     0,     0,     0,     0,     0,     0,    22,     0,\n-       0,     0,     0,     0,     0,   812,     0,     0,     0,     0,\n-       0,     0,     0,     0,    23,     0,     0,     0,     0,     0,\n-       0,     0,     0,  2406,   547,     0,  2409,   548,  2411,     0,\n-       0,     0,     0,     0,     0,   814,   549,     0,     0,   550,\n-      24,     0,     0,     0,  2415,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,   551,     0,  1816,\n-    1818,     0,     0,     0,     0,     0,     0,     0,     0,   814,\n-    1406,   552,     0,     0,     0,     0,     0,   812,   553,     0,\n-       0,     0,  1628,     0,     0,     0,  1443,   554,     0,     0,\n-       0,     0,     0,   555,     0,     0,     0,     0,     0,  1649,\n-    2035,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,    25,    26,    27,     0,     0,     0,     0,  1048,    28,\n-     556,     0,    29,     0,     0,     0,     0,  2468,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,   814,   811,     0,     0,     0,  1545,     0,     0,  1546,\n-       0,    30,     0,  1547,  1548,     0,     0,  1551,  1552,  1553,\n-      31,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,    32,     0,     0,  1441,  1441,     0,\n-       0,    33,     0,     0,  1556,    34,     0,     0,  1292,     0,\n-       0,  1557,     0,     0,     0,    35,     0,     0,     0,  1582,\n-       0,     0,     0,     0,     0,     0,     0,    36,     0,     0,\n-       0,    37,     0,   812,     0,     0,  1558,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-      38,     0,     0,     0,     0,     0,     0,  2566,     0,     0,\n-       0,  1582,     0,    39,     0,     0,    40,     0,     0,    41,\n-       0,     0,  1442,  1442,    42,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,    43,     0,\n-       0,     0,     0,  1443,     0,     0,     0,   814,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-    1545,     0,    44,  1546,     0,     0,     0,  1547,  1548,  1549,\n-    1550,  1551,  1552,  1553,     0,     0,    45,     0,     0,   -42,\n-    1559,     0,     0,     0,     0,     0,     0,  1406,  1554,     0,\n-       0,     0,     0,     0,  1582,     0,  1560,     0,  1556,     0,\n-       0,  1561,     0,     0,     0,  1557,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,  1562,  1563,     0,     0,     0,     0,\n-    1558,     0,     0,     0,     0,     0,     0,  1441,     0,  1564,\n-       0,     0,  2635,     0,     0,     0,  2637,  1946,     0,     0,\n-       0,     0,     0,  2641,     0,  1134,     0,     0,     0,     0,\n-       0,  1135,  2898,  2650,     0,     0,  2653,     0,  2655,  1147,\n-       0,     0,     0,     0,     0,  1565,  2659,     0,  1566,     0,\n-       0,     0,     0,     0,  2666,  2667,  2916,     0,     0,  1148,\n-       0,  2674,  1567,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,  2683,     0,     0,     0,     0,\n-       0,     0,  1442,  1582,     0,  2698,     0,     0,     0,     0,\n-       0,     0,     0,     0,  1559,     0,     0,     0,     0,     0,\n-     812,     0,     0,  1149,     0,  1048,     0,  1442,     0,     0,\n-    1560,     0,     0,     0,     0,  1561,  1545,     0,     0,  1546,\n-       0,     0,     0,  1547,  1548,  1549,  1550,  1551,  1552,  1553,\n-       0,     0,  1136,     0,     0,     0,     0,     0,  1562,  1563,\n-       0,     0,     0,     0,  1554,     0,  1441,     0,     0,     0,\n-       0,     0,     0,  1564,  1556,     0,     0,     0,  1569,     0,\n-       0,  1557,     0,     0,   814,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,  1558,     0,     0,  1565,\n-       0,     0,  1566,     0,     0,  1150,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,  1567,  1582,     0,  1568,\n+     502,   825,   716,    56,  1168,  1069,   972,    52,    61,    66,\n+     690,    64,    65,    88,   502,   679,   806,  1726,  1537,    78,\n+    1308,  1348,    96,    73,  1691,   694,  1454,  1261,  1507,  1725,\n+     922,  1790,  1878,  1417,  2058,  1395,  1736,  2091,  1398,   695,\n+    1132,    73,  2434,  1310,  2436,   661,  1354,  1974,  1697,   586,\n+    1099,  2461,  2494,  2191,  1794,  1935,  2531,  2532,  2533,  1701,\n+    1679,  2451,  2848,  1741,   502,   502,   665,  1432,  1993,  1994,\n+    1431,  1167,  1429,  1173,  1433,  1177,  1730,   833,  2826,   818,\n+     827,  2846,  1597,   954,  2415,  1623,   916,  1600,   975,  1812,\n+    2824,  2487,    49,   677,    50,  2450,    51,    54,    55,   809,\n+      57,    58,    59,   702,    62,   658,  2863,  2653,    63,    76,\n+      77,    79,    80,   500,    85,    86,    87,    92,    93,    95,\n+     949,  1535,  2542,    97,   923,  2214,  -487,   500,  2062,  -490,\n+   -1803,  2210,   513,   710,  2860,  2111,  1411,  1356, -1943, -1943,\n+    3239, -1803,  -827,  1334,  1335,   633,  -824,  1121,   995,  1110,\n+    -824,  2717,   629, -1206,  2114,  2722,  2549,  3042, -1187,  -827,\n+    1124, -1203, -1203,  -819, -1794, -1206, -1811,  1682,  1085,   499,\n+    1346,  2556, -1934, -1934, -1952, -1952, -1207,   500,   500,  2008,\n+   -1794, -1803,   629,   625, -1204, -1204,   995,   995,  2008,  2329,\n+   -1811, -1207,  -786, -1929, -1929,   619,  -799, -1053,  2045,   691,\n+     692,  2983,  -814, -1074,   629, -1053,  2046,   629,  2380,  1401,\n+    2545, -1074,  1328,  -444,   685,   629,  2124,  2358,  2359,   627,\n+    1356,  3028,   669,  3117,  -487, -1954, -1954,  -490,  2365,  1601,\n+    1404,   629,  2369,   625,   625,   995,  2637,  3046,   516,  2998,\n+    2495,  2598,  2600,  1855,  2603,   619,   619,  1404,  1857,  1329,\n+    1693,  1553,   995,  3319,  1702,  2207,  1555,  3343,   516,  1685,\n+    1261,  1728, -1250,   101,  2966,   994,  3130,  3199,  1855,   627,\n+     627,  3017,  1856,  1857,  1354,  2563,  1858,  1859,  1860,  -210,\n+    1693,  1088,   597,   686,  -210,  -623,  1563,   682,  1356,  1338,\n+    3043,  2522,  1787,  2662,  3311,  3159,  1605,  1356,   743,  2690,\n+     517,   955,  1702,  3160,  2055,  3044,    67,  1424,   687,   687,\n+    1739,  1347,     3,     4,  3097,  1438,  3099,   818,  1565,  1740,\n+     517,  2689,  2994,  2691,    67,  2197,  1553,   618,  2620,  2731,\n+    1554,  1555,  2117,  2490,  3066,  3262,  -759,   809,  2339,  1602,\n+    2141,  3207,    67,  2760,   647,  1390,  2341,  2496,  3297,  1855,\n+    3243,   678,   518,  1856,  1857,  3305,   106,  3272,  1855,   687,\n+    1111,  1563,  1856,  1857,  2426,  3356,  1626,  2407,  1553,  3036,\n+    2141,  1710,  1554,  1555,  1713,  1714,   683,   618,   618,   693,\n+    3048,  1117,  1709,  3016,  3306,  1553,   811,   922,  2698,  1334,\n+    1335,  2730,  3037,  1565,  2408,  2980,  1261,   975,  2142,  2342,\n+      67,  1827,  3208,  1563,  2949,  1346,  2951,  3146,  -487,   954,\n+     533,  -490,  1531,  3145,  1687,  2761,  2864,   598,  2609,  1081,\n+    2713,  2870,  1357,  1330,  1724,  3326,   519,   102,  2484,  3173,\n+    1493,  2487,  3351,  2487,  3225,  1565,   103,   956,  1418,   774,\n+    3363,  2699,   648,  2118,  1089,  2650,  1090,   922,  2056,  1642,\n+    1895,  1703,  1565,  2352,  2353,  2354,  1119,  -643,  1112,  3344,\n+    3147,  1603,  3112,  3128,  2491,  3312,  3161,  -759,  2981,  3148,\n+    1948,   104,  3327,  1862,   520,  -487,   521,   596,  -490,  2995,\n+    1494,  3122,  2125,  1895,  2198,  3200,  1674,  1675,  2373,  3273,\n+    3045,  3149,   522,  1643,   520,  1700,   521,  2762,   523,  1703,\n+    1144,   524,  1523,   688,  2208,  1357,   818,  2887,  2637,  2196,\n+    2274,  2409,  1678,  3314,  2868,  1700,  2410,  1639,  3357,  3106,\n+     105,   524,  1627,   719,  1742,  1938,   809,  3285,  1688,  2340,\n+    2984,  1949,  1338,   679,  1331,  3023,  2009,  2343,  3118,  2538,\n+    2539,  1863,  3345,  2005,  1543,  2417,  2878,  1347,   820,   922,\n+     922,  1974, -1053,  2047,   670,  2856,   921,  1644, -1074,  2497,\n+     714,  2498,  3150,  1700,   715,  1141,  2136,  2610,   628,  3346,\n+    3274,  1142,  1625,  1357,  3320,  3151,  2865,   514,  1358,  2111,\n+    2826,  3354,  1357,  2438,   679,    73,  1729,  2740,  -487,  2499,\n+    1676,  -490,  2824,  2559,   918,  2550,   502,  2464,   744,  3364,\n+    3137,  1349,  3064,  1677,  1606,  3286,  1645,   502,   684,  1332,\n+    2607,  3000,  2453,  2741,   694,  2459,  2523,  3371,  1349,  3005,\n+    1726,  1777,  1640,  1350,   811, -1803,   666,  -487,   695,  -487,\n+    -490,  2974,  -490,  1520,  1618,  1133, -1803,  1351,  2262,  3085,\n+    1350,  -824,   502,   502,  1520,  2061,  1743,  3109, -1206,  2542,\n+    3224,   714,  3110, -1187,  1353,   715, -1928, -1928,  -819, -1794,\n+   -1206, -1811,  2411,  2631,  2302,   502,  2992,  1646,  1082,  3007,\n+    3008, -1207,  1143,  2412,  1715, -1794, -1803,  1548,   818,  2157,\n+    1518,  2161,  3231,  2278,    56, -1811, -1207,  1336,    52,    61,\n+      66,  1340,    64,    65,    88,  2330,  1086,  -814,   809,  1598,\n+      78,  1092,  2063,    96,    73,  2196,  3021,   502,  1258,   500,\n+    2916,  1304,   943,  1086,  1531,  2498,  3230,  1408,  1409,   927,\n+     500,  2965,  1100,   658,   658,    98,   658,  2956,  1872,  1394,\n+    1091,  1791,  1792,  1720,  1408,  1409,  1586,  1720,  1397,  2993,\n+    1642,  1083,   946,  2773,  1864,  1865,  1866,  2427,  1867,  1868,\n+    1869,  1870,  1871,  1872,   989,  3295,  2516,  1721,  1349,  2310,\n+    1402,  1721,  2846,  1403,  2957,   625,  -210,  -210,  3152,  2517,\n+    2967,  3153,    99,    49,  1767,    50,   625,    51,    54,    55,\n+    1350,    57,    58,    59,  1643,    62,   820,   672,   945,    63,\n+      76,    77,    79,    80,  3026,    85,    86,    87,    92,    93,\n+      95,   627,  1636,   806,    97,   930,  1581,  1582,  1583,  1584,\n+    1585,  1586,   627,   811,   629,  1716,  1822,   696,  3037,  1801,\n+      67,   995,  2086,  1717,   502,  1144,  2243,  2826,  1902,  1867,\n+    1868,  1869,  1870,  1871,  1872,   825,  1887,   818,  1814,  2824,\n+    1869,  1870,  1871,  1872,  1818,  1923,   681,  2744,  1702,  3040,\n+    1583,  1584,  1585,  1586,  1261,  1990,  1261,   809,  3129,  1702,\n+    1702,  2029,   980,  1693,  3365,  1813,   818,   818,    67,   678,\n+     922,  1478,  1478,   981,  1694,   680,  2710,  2337,   697,  3193,\n+    1145,  3194,   818,  1141,  1146,  3115,   809,   809,  2747,  1142,\n+     718,  1947,  1531,  2621,  2622,  2623,  2624,  1645,  2311,  3041,\n+    1141,  1977,   809,  2087,  1878,   629,  1142,   714,  2312,   932,\n+      21,   715,  1974,   921,  1147,  2346,  2337,  1820,  1815,  2660,\n+     944,   502,   502,   725,  1991,  1553,   916,   502,  2171,  1893,\n+     502,   502,  1693,   502,   502,   502,   502,   736,  2174,  3102,\n+    2284,  2177,  2711,  1696,  2268,  2270,    73,  2267,  2266,   502,\n+    1543,  2269,  2271,  2272,  1824,  3245,   502,  2581,  1646,   995,\n+    1563,  2390,  2534,  1141,  2585,   729,  2587,  2462,   693,  1142,\n+    1731,   516,   995,   921,  1304,   820,    21,  1349,  1702,  2290,\n+    2030,  1734,  2521,  2294,  1148,   811,  2296,    67,  2734,   729,\n+    1143,  2439,  1565,  2440,   502,  2940,  2031,  2073,  3226,  1350,\n+    2250,  2032,   961,   961,  2170,   679,  1117,  1143,   721,  2011,\n+     722,  1118,   502,  1351,  1995,  3258,  3259,    21,  3203,  1726,\n+    2074,   740,  2273,   502,   502,   502,  2275,   502,   502,  2277,\n+    1258,   714,  2017,   517,  1481,  1542,   730,   962,   962,  2033,\n+    1488,  2459,  3120,  2281,  2133,  1703,   739,  2751,    25,    26,\n+      27,  3253,  1616,  1479,  1487,  1617,  1703,  1703,   502,  2018,\n+     730,   741,   500,   964,   964,  1630,  1631,  3299,  1637,   500,\n+    1143,  2169,  1344,  1345,  2735,   921,   921,   818,  2219,   695,\n+     695,  1119,   695,  2524,  1474,  2192,  2193,  2194,  -567,  3284,\n+    2180,  1485,  3287,  -567,  2752,  2187,  1937,   809,  3220,  1938,\n+    2525,  2669,   742,  2470,  1702,  1813,  1372,  1373,   502,  1700,\n+    2753,    32,   502,   502,    25,    26,    27,   745,   625,  1154,\n+    1700,  1700,   502,   502,   502,   625,   746,   502,  1120,   731,\n+     619,  1117,   747,  2157,  2157,  2157,  1086,   619,  2736,  1155,\n+    2737,   831,  1535,  1144,   811,  2049,  2564,   820,    37,  2050,\n+    2145,   928,  2572,  1754,   627,    25,    26,    27,   929,  1309,\n+    1144,   627,  2172,  -567,  2247,  1896,   732,  2175,   930,  2883,\n+    1897,  2019,   939,   811,   811,  1703,  2020,    32,   931,   731,\n+      39,  2021,   723,  1156,   724,  3349,   968,   968,  2034,   811,\n+    1755,    42,  2291, -1925, -1925,  1366,  1367,  2292,  1171,  1727,\n+     934,   733,  1146,  1480,  1480,  1349,  1119,   520,  2754,   521,\n+    -567, -1926, -1926,   818,    37,  1175,   732,  2755,    32,  1146,\n+    1376,  1377,  1471,  1144,  1486,  1756,  2529,  1350,  1491,    67,\n+   -1927, -1927,  1172,   809,   524,  1939,  1754,  1974,  1940,  1700,\n+    1497,  1353,   937,    45,  1501,  1514,    39,    45,  3361,  1176,\n+     734,  2552,  2293,  1120,   938,    37,  1304,    42,  1076,  1077,\n+    2257,  1079,   618,  1372,  1373,  1304,   940,  1827,  2335,   618,\n+    2347,    43,  2348,  1755,  1757,  1157,   941,  3329,  2132, -1930,\n+   -1930,  1886,  1146,  1888,  1889, -1931, -1931,    39,  3352,  1304,\n+    3353,   942,  3340,  2204,   922,    44,  2205,   943,    42,  2882,\n+     734,  1703,  1148,  1515,  2297,   977,   820,  2251,  3032,    45,\n+    1940,   685,  1147,   982,  1519,  1761,  2303,   948,  2258,  1148,\n+    1762,  2259,   987,   818,  1158,  -568,  3370,  2022,   988,   502,\n+    -568,  1764,  1159,   989,  1765,   820,   820,  2260,  2023,   990,\n+    2259,  1533,  3368,   809,  1160,  2632,  2331,  3369,  2771,  2639,\n+      45,   820,  2285,  2336,  1080,  2286,  2931,  1757, -1932, -1932,\n+    2506,  2764,  2508, -1933, -1933,  1700,  2728,   818,   714,  2349,\n+   -1187,  2350,   715,   108,  1084,  1161,   512,  1376,  1377,   818,\n+     686,  1095,  1148,   560,   811,  1258,  2323,   809,  2509,  2324,\n+    2511,  2370,  2405,  2593,  2371,  2370,   921,  2372,   646,   809,\n+    -568,  2376,   659,   922,  2843, -1935, -1935,  2435,  2374,   818,\n+    2763,  2372,  2772,  1258,  2512,  1101,   818,  2513,   502,   693,\n+     693,  2518,   693,  1102,  2519,    73,  1163,  2575,  2644,   809,\n+    1938,  2372,  1107,  2233,   918,  2234,   809,   502,   502,  2705,\n+    1104,  2855,  2706,   502,  2205,   502,  2727,  -568,  2729,  1164,\n+     502,   502,   502,   502,   818,  1105,   687,  2876,   818,  2884,\n+    2877,  1108,  2885,  1115,   818,   502,   502,   516,  1166,  1134,\n+     502,  1136,   502,  2932,   809,   502,  1940,  1535,   809,  1138,\n+     502,  2473,   502,   502,   809,   502,  1114,  3059,  1116,   502,\n+    1940, -1250,  3060,  3088,  2157,  2372,  1940,  1139,  2827,  1140,\n+    2161,  3093,  2583,  2584,  1938,  3103,   502,   502,  3104,  3136,\n+    1152,   502,  2205,   502,  1153,  2548,   502,  1941,  1170,  1944,\n+     811,  1942,  1943,  1946,  3170,  3241,  1141,  1940,  3242,   517,\n+    1174,  3266,  1142,    73,  3267,  1258,  1178,  3310,  2058,   502,\n+    3242,   502,  3350,  2459,  1306,  3242,   820,   502,   502,   502,\n+     502,   502,   502,   502,   502,  1258, -1936, -1936,   500,   502,\n+     502,   984,   985,   986,   502, -1937, -1937,  1307,   502,  3058,\n+    1311,   502,   502,   502,   502,   502,   502,   502,   502,   502,\n+    3316,  2218,   502,   500,  1313,   500, -1938, -1938,   500,   502,\n+    2093,  1304,  1314,   500, -1939, -1939,   500,  1324,   500,  1327,\n+     688,  1326,   500,  1332,   695,  1914,  1336,  1915,  1339,  2975,\n+    1917,  1340,   502,  1342,   625,  1921,  1343,  1141,  1924,  1141,\n+    1925,  1355,  2771,  1142,  1929,  1142, -1940, -1940, -1941, -1941,\n+     811, -1942, -1942,  1143,   502,  3169, -1944, -1944,  1361,   625,\n+    1360,   625, -1945, -1945,   625,   502,   502,  1363,  1092,   625,\n+     627,   619,   625,   619,   625,  1391,   619,  1392,   625, -1946,\n+   -1946,   619, -1947, -1947,   619,  1396,   619, -1948, -1948,  1399,\n+     619, -1949, -1949,  1400,   811,   627,  1419,   627, -1951, -1951,\n+     627,  1420,   820, -1953, -1953,   627,   811,  2145,   627,  1425,\n+     627,  1258,  1452,  1258,   627,  3328, -1955, -1955,  1465,  3330,\n+    3022,  1745,  1746,   520,  1467,   521,  1374,  1375,    67,  2112,\n+    2113,  -618,  -618,  1376,  1377,  1468,   811,  -622,  -622,  1475,\n+    2590,  -621,  -621,   811,  1143,  1482,  1143,   523,  2942,  1483,\n+     524,   502,  2819,  2971,  2972,  1304,  1610,  1612,   502,   502,\n+    1489,  1490,  1496,  1500,  1502,  1510,  1511,   922,  1513,  -790,\n+     818,  -797,  1518,  3366,    45,  -643,  -644,  -787,  -788,  1522,\n+    -791,   811,  1990,  1523,  -789,   811,  1527,  1536,  1546,  1592,\n+     809,   811,  1304,  1594,  1596,  1608,  1620,  1619,  1624,   502,\n+    3169,  1628,  1629,   618,  2237,   618,  1144,  1118,   618,  1664,\n+    2459,  1120,   820,   618,  1668,  1666,   618,  1698,   618,  1680,\n+    1699,  2875,   618,  1705,  1700,  1706,  1258,  1711,  1718,  1707,\n+    1719,  1723,  1733,  1747,  1751,  1738,    67,  1759,  1760,  1773,\n+     921,   994,  3169,  1775,  1855,  1769,  1772,  1776,  1856,  1857,\n+    2721,  1778,  1858,  1859,  1860,  1779,   820,  1786,  1785,   995,\n+     502,   502,  1793,   502,  1795,  1146,  1796,  1803,   820,   502,\n+     502,   502,   502,   502,   502,  1804,  1807,   502,   502,   502,\n+     502,   502,   502,   502,   502,   502,   502,  1847,  1808,  2850,\n+    3169,  2866,   502,   502,  2015,  1147,   502,  1144,   820,  1144,\n+    2842,  1813,  1809,   502,  1810,   820,  1819,  3134,  1844,  1846,\n+    1849,  1852,  1912,  1916,  1922,  1926,  1875,  1949,  1927,  1553,\n+    1884,  1891,  1883,  1894,  1980,   502,  2744,  2007,  1928,   502,\n+    1933,   502,  2745,  1936,  1983,   502,  1985,  1987,  2014,  2025,\n+    2026,  1986,  2053,   820,  2028,  2746,  1988,   820,  2059,   921,\n+    2052,  1304,  2178,   820,  2185,  2071,  1146,   818,  1146,  2076,\n+     686,  2089,   502,  2072,   693,  1148,  2101,  2747,  2092,  2748,\n+     631,   631,  2102,  2106,  2103,  2104,  2105,   809,  2123,  2128,\n+    2127,  2131,  2134,  3081,  2138,  2139,  2179,   687,  2186,  2202,\n+    2220,  2140,  2206,   502,  2211,  2222,  2223,  2822,   502,   502,\n+    3003,  2224,  1535,  2244,   679,  2238,  -499,  3012,  3013,  2239,\n+    2593,  3222,  2241,  2245,  2253,  2246,  2248,  2252,  2254,  2249,\n+    -499,  2276,   502,   502,  1958,  -499,  1861,   502,  2287,  2295,\n+    2255,  1959,  1960,  1880,  2256,  1961,  1962,  1963,  1855,  2325,\n+    2264,   502,   500,  1879,   502,  2265,   502,  2332,   500,  1862,\n+    2333,  2334,  2338,  2344,   713,  2749,  1148,  1348,  1148,  2345,\n+     818,  2356,   502,  1258,  2360,  2362,  2364,  2874,  2377,   502,\n+    2363,  2386,   502,  2378,  2385,  -499,  2388,   811,  2401,  2387,\n+     809,  2406,  3185,  2389,  2399,  2413,  2422,  2430,  2441,   502,\n+    2423,  2428,  2221,  2444,  2429,  -499,  2442,  2446,   625,  2447,\n+     994,    67,   502,  1855,   625,  2921,  2452,  1856,  1857,  2454,\n+     619, -1956, -1956, -1956,  3204,  2455,   619,  1863,  -624,   502,\n+     502,  2750,  2465,  2466,   958,  2468,  2751,  2469,  2472,   959,\n+     818,  2476,  2477,  2478,   627,  2480,   502,  1726,   502,  2482,\n+     627,  2483,  -499,  2486,  2505,  2507,  2520,   502,  2546,  2530,\n+     809,  -499,  2526,  2527,  2528,   818,  2535,  2536,  2537,  2547,\n+    2551,  2561,  2562,  2569,  2565,  1258,  1258,  1258,  2566,  2573,\n+    2578,  2597,  2608,  2752,  2580,   809,  2588,  2605,  2589,  2628,\n+    2611,  2614,  2629,  2615,  2616,   500,   960,  2617,  2640,  2753,\n+    2641,  2647,  2667,  2651,  2657,  2686,  2695,  2665,  2668,  2714,\n+    2718,  2671,   500,  2726,  2681,  2712,  2688,  2680,  1304,  2989,\n+     679,  2732,   818,  2739,   498,   509,  2692,  2716,  2759,   530,\n+    2733,  2775,  2839,  2840,   530,  2841,  2845,  2849,   616,  2853,\n+     630,   630,   809,  1761,  2857,   634,   530,   642,  1762,   820,\n+     642,   625,   618,   660,   664,  2854,  2858,   664,   618,  1764,\n+     530,   530,  1765,   619,  2819,   961,  3011,   502,   625,  2862,\n+    2871,  2873,  2880,  2205,   811,  2923,  2906,  2881,  3204,  2912,\n+     619,  2962,  2886,  2955,  2968,  2964,  2978,   627,   616,   616,\n+    2982,  2908,  2986,  2917,  2924,  2987,  2943,  2754,  2950,  2953,\n+     962,  2969,  2970,   921,   627,  -499,  2755,  2976,  2977,  1258,\n+    2458,   660,  2988,  2996,  2999,  3002,   963,  3001,   664,   530,\n+     664,   664,   664,  3006, -1203, -1924,   964,  3123, -1925,   818,\n+    1864,  1865,  1866, -1926,  1867,  1868,  1869,  1870,  1871,  1872,\n+   -1927, -1928, -1929, -1930, -1931,  3018, -1932,   502, -1933,   809,\n+    1533,  3019, -1935, -1936, -1937, -1938,  3020, -1939,   965,  3029,\n+      10, -1940,  3027,   818, -1941,  3033,  3034,  3047,  2015,  3049,\n+   -1942,   714,  3304, -1944,   922,   715,  3051,   811,  3052,  1131,\n+    3061, -1945, -1946,   809,  2424, -1947,  1863,   502, -1948, -1949,\n+   -1950,   679, -1951,  3069,  3062,   618,  3073,  3055,  3079,  2683,\n+   -1952,  3065,   966,   502, -1953, -1954, -1955,   502,   502,   967,\n+   -1204,  3067,   618,  3082,   502,  3087,  3075,  3076,  3080,  3092,\n+    3105,  3101,  1154,   679,   502,  3100,  3108,   502,  3111,   502,\n+    3113,    21,  3125,  3126,  3133,   818,   820,   502,  3135,  3141,\n+     502,   502,  1155,  1990,  3142,   502,   502,   811,   958,   968,\n+    3143,  3156,   502,   959,  3158,   809,  3157,  3187,  3178,  3171,\n+     500,  3172,  3175,  3184,  3179,  3181,   969,   502,  3188,  3191,\n+    3211,  2995,   811,  3174,  2720,  3176,  3215,   502,  3217,  1941,\n+    3218,  1944,  3221,  1942,  1943,  1946,  1156,  2704,  3227,  3233,\n+    3234,  3235,  3244,  3186,  3239,    73,  3189,   502,  3246,  3251,\n+    2638,  3248,  2946,  3256,  3261,  3252,  3263,  3265,  3270,  2822,\n+     960,  2819,  3275,  1964,  1965,  1966,   625,  1967,  1968,  1969,\n+    1970,  1971,  1972,  3288,  1447,  3282,  3289,  3281,  3283,   811,\n+    3290,  3308,  3264,  3318,   970,  3321,  1258,  3268,  3323,  2825,\n+    1258,  3298,  1258,   958,  3341,  3300,  3302,  3303,   959,  3338,\n+    3319,  3320,   627,   925,  3355,   631,   678,  3362,  3367,  2165,\n+    2774,  2778,  1106,  2503,  3198,  2707,  3296,  3260,  3257,    25,\n+      26,    27,   818,  1552,  3254,  3360,  1553,  3009,  1157,   961,\n+    1554,  1555,  3279,  1761,  3348,   979,  2847,  1128,  1762, -1956,\n+   -1956, -1956,   809,  1867,  1868,  1869,  1870,  1871,  1872,  1764,\n+    3121,  3317,  1765,  3324,  3342,   960,  1690,  3155,  2485,   820,\n+    1078,  1563,  2867,  2510,   962,  2869,  2861,  3315, -1956,  3322,\n+    2481,  2743,  3313,  1811,  1758,  2828,  2543,  1158,  2594,  1789,\n+     963,   502,    32,   679,   820,  1159,   811,  3056,  2471,  2457,\n+     964,  2844,  2130,  1565,  1661,  1621,  1660,  1160,  2619,  3301,\n+    2467,   502,   502,  1472,  2098,  3247,   502,  3177,  2129,   502,\n+     620,  2443,  2915,  2368,  3084,  2643,  1439,   947,   502,    37,\n+     811,  1473,   965,  2613,   961,   933,  3127,  2612,  1161,  1802,\n+     502,  3250,  2283,  1665,  1428,   502,   502,  3249,    38,  3337,\n+     502,   820,  2397,  1129,  1430,   502,  2649,  1434,   502,   502,\n+     716,    39,   679,   502,  1304,  2460,  2404,   502,  2420,   962,\n+    2381,   502,    42,  3292,  2418,  1903,   966,  1435,   502,  2954,\n+    2398,  2693,  3237,   967,   926,   963,    43,  1533,  2659,  1163,\n+    2375,  1821,   664,  2067,  2708,   964,   664, -1956,  2069,   664,\n+     534,   703,   811,     0,     0,     0,   530,     0,     0,     0,\n+      44,     0,  1164, -1956,     0,     0,  2822,     0, -1956,  1533,\n+       0,     0,   502,   968,    45,     0,     0,   965,     0,     0,\n+     502,  1166,  2638,     0,   823,   530,   530,     0,    67,     0,\n+     969,     0,     0,     0,    67,     0,     0,     0,  1918,   502,\n+       0,     0,     0,     0,     0,     0, -1956,     0,   820,     0,\n+       0,     0,   958,     0,     0,     0,     0,   959,     0,     0,\n+    2719,   966,     0,   924,   509,   630,     0,     0,   967,   818,\n+     498,     0,   664,     0,   500,     0,     0,     0,     0,     0,\n+       0,   616,  2825,     0,     0,   951,   951,     0,     0,   809,\n+     951,   974,     0,     0,     0,     0,  1474,     0,   970,  1574,\n+       0,     0,     0,  1130,   642,   642,   642,     0,   968,     0,\n+       0,     0,     0,     0,   960,     0,     0,  -499,   642,   642,\n+       0,   642,   502,     0,     0,   969,     0,  1410,     0,   811,\n+     625,  -499,  1448,    67,   664,     0,  -499,     0,  1427,     0,\n+     530,     0,   619,     0,     0,     0,   679,  3039,     0,     0,\n+     921,   664,     0,   502,   820,     0,     0,     0,     0,    67,\n+       0,     0,    67,     0,     0,   664,   627,   994,     0,   502,\n+    1855,     0,     0,     0,  1856,  1857,     0,     0,  1858,  1859,\n+    1860,     0,     0,   961,     0,     0,  -499,  1410,     0,  1304,\n+       0,     0,     0,   970,     0, -1956,   502,     0,  1919,   664,\n+     664,   664,   664,     0,     0,     0,  -499,   502,   502,     0,\n+       0,   502,     0,     0,     0,  2700,     0,     0,   962,  1533,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,  1442,     0,     0,  1582,     0,  1582,     0,  1443,  1443,\n-       0,  1866,     0,     0,  1443,     0,     0,  1582,     0,     0,\n-    1582,     0,     0,     0,  1151,  1582,     0,     0,  1582,     0,\n-       0,     0,  1152,     0,     0,     0,     0,     0,     0,  2893,\n-    2894,     0,  1570,     0,  1153,  1571,  1572,  1573,     0,  1574,\n-    1575,  1576,  1577,  1578,  1579,     0,  2911,     0,     0,  1441,\n-    1559,     0,     0,     0,     0,  1137,     0,     0,  2915,     0,\n-       0,     0,     0,  2917,  2918,  1154,  1560,     0,  2919,     0,\n-    1582,  1561,  1569,  2922,     0,  1582,  2925,  2926,  1582,  1582,\n-    1582,  2181,  1292,     0,  1582,  2933,     0,     0,  1582,     0,\n-       0,     0,     0,     0,  1562,  1563,  1048,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,  1564,\n-    2158,     0,     0,     0,  1139,     0,  1156,     0,     0,     0,\n-    1544,     0,     0,     0,  1442,  1545,     0,     0,  1546,     0,\n-       0,     0,  1547,  1548,  1549,  1550,  1551,  1552,  1553,  1157,\n-    2973,     0,     0,     0,  2159,  1565,     0,     0,  1566,  1582,\n-       0,     0,     0,  1554,     0,     0,     0,  1555,  1159,     0,\n-       0,     0,  1567,  1556,     0,  1568,     0,  2992,     0,     0,\n-    1557,     0,     0,     0,     0,     0,  1570,     0,     0,  1571,\n-    1572,  1573,     0,  1574,  1575,  1576,  1577,  1578,  1579,  1582,\n-       0,     0,     0,     0,     0,  1558,     0,     0,     0,     0,\n-       0,     0,  2374,     0,     0,  1582,     0,     0,     0,     0,\n-    1582,     0,     0,     0,  1141,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,  1866,     0,     0,\n+       0,     0,     0,     0,   963,     0,     0,   502,     0,     0,\n+       0,   812,     0,     0,   964,     0,     0,     0,     0,     0,\n+       0,  1547,     0,  -499,   814,     0,     0,     0,     0,     0,\n+    1549,   502,  -499,     0,     0,     0,     0,     0,     0,    21,\n+       0,     0,     0,  1426,   618,   629,   965,     0,  1599,     0,\n+    1853,  1854,     0,     0,     0,     0,  1874,  1604,   678,  1410,\n+    1410,  2825,     0,     0,     0,     0,     0,     0,     0, -1956,\n+       0,     0,     0,     0,     0,     0,  1581,  1582,  1583,  1584,\n+    1585,  1586,     0,     0,  1657,     0,     0,     0,  3138,  3139,\n+     966,     0,     0,  1448,   502,     0,     0,   967,   502,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,   502,     0,\n+     502,     0,   502,     0,     0,  1449,   502,     0,   502,     0,\n+     502,     0,  2126,     0,     0,     0,     0,     0,     0,     0,\n+     502,     0,     0,     0,     0,     0,     0,   968,  1154,     0,\n+       0,     0,     0,   502,     0,  1862,   811,  1364,  1365,     0,\n+       0,     0,     0,     0,   969,     0,  1258,     0,  1155,     0,\n+    3195,   502,  3197,     0,     0,     0,     0,  2701,     0,   951,\n+     974,     0,   664,     0,     0,  1446,  -499,    25,    26,    27,\n+       0,   951,   951,     0,     0,     0,     0,   530,     0,     0,\n+       0,     0,     0,   616,     0,     0,     0,     0,     0,     0,\n+     616,  3229,  1156,     0,     0,     0,     0,     0,   502,     0,\n+     530,   500,  1552,  1863,    67,  1553,     0,  3232,   502,  1554,\n+    1555,  3236,   970,  1366,  1367,     0,  1512,     0,     0,     0,\n+       0,   502,     0,     0,     0,     0,     0,     0,     0,     0,\n+      32,     0,   714,   502,     0,  1104,   715,     0,     0,   812,\n+    1563,     0,  1533,     0,     0,     0,     0, -1956,     0,     0,\n+       0,   502,   814,     0,     0,     0,     0,   625,     0,  2767,\n+       0,     0,     0,     0,     0,     0,   530,    37,     0,     0,\n+       0,     0,  1565,     0,     0,   502,     0,  1368,  1369,  1370,\n+    1371,  1372,  1373,     0,  1157,  1374,  1375,     0,     0,   502,\n+       0,     0,     0,   627,     0,     0,  1449,     0,  2825,    39,\n+    1258,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+      42,  1613,     0,  1615,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,   502,    43,     0,     0,     0,   530,   530,\n+       0,  3325,     0,  1158,   664,  2414,     0,     0,   502,   502,\n+       0,  1159,     0,     0,     0,     0,   500,     0,    44,     0,\n+       0,     0,     0,  1160,     0,     0,  1446,  3339,     0,     0,\n+       0,     0,  2702,     0,   502,     0, -1956,   664,  1689,     0,\n+       0,     0,     0,     0,     0,    67,    67,     0,     0,     0,\n+     664,     0, -1956,     0,  1161,     0,  1826, -1956,   500,     0,\n+       0,     0,     0,     0,     0,  1376,  1377,   664,  1448,  1448,\n+     502,   664,   625,     0,  1448,  1735,  1864,  1865,  1866,     0,\n+    1867,  1868,  1869,  1870,  1871,  1872,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0, -1956,     0,     0,   812,     0,\n+       0,     0,     0,     0,     0,  1163,   500,     0,   627,     0,\n+       0,   814,     0,     0,   625,    21,     0,    67,     0,    67,\n+       0,     0,  2304,  2305,  2306,  2307,  2308,  2309,  1164,     0,\n+    2313,  2314,  2315,  2316,  2317,  2318,  2319,  2320,  2321,  2322,\n+     531,     0,     0,     0,     0,   531,     0,  1166,  1574,     0,\n+     627,     0,     0,     0,     0,     0,     0,   531,    67,     0,\n+       0,     0,   625,     0,     0,     0,     0,     0,     0,     0,\n+       0,   531,   531,     0,    67,     0,     0,     0,    67,     0,\n+    1378,  1379,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,  1364,  1365,     0,   627,     0,\n+       0,     0,     0,     0,  1748,     0,   664,     0,     0,     0,\n+       0,   664,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,  1782,     0,     0,     0,     0,     0,     0,     0,\n+     531,     0,     0,     0,     0,     0,     0,     0,   994,     0,\n+       0,  1855,     0,  2064, -1956,  1856,  1857,     0,     0,  1858,\n+    1859,  1860,  1799,    25,    26,    27,     0,  1799,     0,     0,\n+       0,     0,     0,     0,    21,  2100,  2663,     0,     0,     0,\n+     812,  1366,  1367,     0,     0,  2402,  2403,     0,     0,     0,\n+       0,  1449,  1449,   814,     0,  2236,     0,  1449,   823,     0,\n+       0,   823,     0,   530,   530,     0,   530,   823,    67,     0,\n+     994,     0,     0,  1855,   815,    21,     0,  1856,  1857,     0,\n+       0,  1858,  1859,  1860,     0,     0,    32,     0,     0,     0,\n+       0,     0,     0,     0,    67,     0,     0,     0,  2934,     0,\n+       0,     0,     0,     0,     0,  1368,  1369,  1370,  1371,  1372,\n+    1373,  1446,  1446,  1374,  1375,     0,   532,  1446, -1956,   498,\n+       0,   561,     0,    37,     0,  1581,  1582,  1583,  1584,  1585,\n+    1586,     0,   951,   635,   530,  1898,     0,     0,     0,     0,\n+       0,     0,   664,     0,   616,     0,   616,   676,   676,   616,\n+       0,     0,     0,     0,   616,    39,     0,   616,     0,   616,\n+       0,     0,  3196,   616,     0,   530,    42,   530,     0,     0,\n+       0,     0,    25,    26,    27,     0,     0,     0,     0,     0,\n+      43,     0,     0,     0,     0,     0,     0,     0,     0,  1973,\n+       0,     0,     0,     0,  1979,     0,     0,     0,     0,   812,\n+       0,  2057,     0,     0,    44,     0,   706,     0,     0,     0,\n+       0,     0,   814,    25,    26,    27,  1862,     0,    45,     0,\n+       0,     0,     0,  1376,  1377,     0,     0,     0,   812,   812,\n+       0,     0,   823,     0,  1410,    32,     0,     0,     0,     0,\n+    2289,   814,   814,     0,   812,     0,     0,     0,  1449,     0,\n+    1448,  1448,  1448,  1448,  1448,  1448,     0,   814,  1448,  1448,\n+    1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,     0,     0,\n+       0,   668,    37,  1830,     0,     0,    32,     0,  1862,     0,\n+       0,  2065,     0,   664,  1863,   664,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,   664,  2081,     0,     0,     0,\n+       0,  1364,  1365,     0,    39,     0,     0,     0,  1446,     0,\n+       0,     0,   815,    37,     0,    42,     0,     0,  1831,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,    43,\n+       0,     0,   705,   664,   708,   530,   712,  1832,  1378,  1379,\n+   -1689,     0,     0,  1410,     0,    39,  1863,     0,     0,     0,\n+    1689,   530,     0,    44,     0,  1833,    42,     0,  1380,  1834,\n+       0,   530,  2147,   530,  2151,     0,   530,    45,     0,     0,\n+      43,     0,   530,     0,   530,     0,     0,  1366,  1367,     0,\n+     817,  1835,     0,     0,  1836,   823,   530,     0,     0,     0,\n+     823,   530,     0,     0,    44,   530,   530,   530,   530,  1837,\n+     530,   530,     0,  1448,  1448,     0,     0,     0,    45,  3038,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,  3171,     0,     0,     0,     0,     0,     0,\n-    3019,     0,     0,  1545,     0,     0,  1546,     0,  1569,     0,\n-    1547,  1548,  1549,  1550,  1551,  1552,  1553,     0,     0,     0,\n+       0,     0,   664,   664,   664,   664,   664,   531,     0,    21,\n+       0,     0,     0,     0,     0,     0,     0,     0, -1689,   812,\n+    2226,  1368,  1369,  1370,  1371,  1372,  1373,     0,     0,  1374,\n+    1375,     0,   814,  2673,  2674,     0,   531,   531,     0,     0,\n+       0,     0,     0,  1449,  1449,  1449,  1449,  1449,  1449,     0,\n+       0,  1449,  1449,  1449,  1449,  1449,  1449,  1449,  1449,  1449,\n+    1449,     0,     0, -1689,     0,     0,     0,  1864,  1865,  1866,\n+    1838,  1867,  1868,  1869,  1870,  1871,  1872, -1689,  1839,     0,\n+       0,   815, -1689,     0,     0,     0,     0, -1689,     0,     0,\n+       0,     0,     0,     0,     0,     0, -1689,  1448,     0,  1840,\n+   -1689,     0,     0,  1446,  1446,  1446,  1446,  1446,  1446,     0,\n+       0,  1446,  1446,  1446,  1446,  1446,  1446,  1446,  1446,  1446,\n+    1446,     0,     0,     0,     0,  1841,     0,     0,     0,  1864,\n+    1865,  1866, -1689,  1867,  1868,  1869,  1870,  1871,  1872,  1376,\n+    1377,   530,     0,     0,     0,     0,  2514,    25,    26,    27,\n+       0,   531, -1689,   664,     0,   812,     0,     0,     0,     0,\n+       0,     0,     0,   616,     0,     0,     0,     0,   814,   616,\n+       0,     0,     0,     0,     0,   530,     0,     0,     0,     0,\n+     530,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+    2540,     0,     0,     0,     0,     0,  1449,  1449,   817, -1689,\n+       0,     0, -1689,     0,     0,     0,     0,  2553, -1689,     0,\n+      32,     0,     0,   738,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,  2879,   530,     0,     0,     0,  2394,\n+       0,     0,     0,     0,   530,     0,     0,     0,     0,     0,\n+       0,     0,     0,   830,     0,     0, -1689,    37,     0,     0,\n+       0,     0,     0,   815,  1378,  1379,  1446,  1446,     0,     0,\n+       0,     0,     0,     0,     0,   812,     0,  1410,     0, -1689,\n+       0,     0,     0,  1973,     0,  2595,     0,  2596,   814,    39,\n+       0,  2601,     0,  2604,     0,     0,     0,     0,     0,     0,\n+      42,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,    43,     0,   616,     0,     0,   812,\n+    1449,     0,     0,     0,     0,     0,     0,     0,   530,     0,\n+       0,   812,   814,   616,     0,   666,   720,  2081,    44,     0,\n+     727,     0,     0,   728,   814,     0,     0,     0,     0,     0,\n+       0,     0,    45,     0,     0,     0,     0,     0,     0,     0,\n+       0,   812, -1689,     0,     0,     0,     0,   676,   812,     0,\n+       0,     0, -1689,  2991,   814,     0,     0,   530,     0,     0,\n+    1446,   814,     0,   530,     0,     0,     0,     0,     0, -1689,\n+       0, -1689, -1689,     0,     0,     0,     0,   817,     0,  1748,\n+       0,  1448,  1448,     0,     0,     0,   812,     0,     0,     0,\n+     812,     0,     0,     0,     0,     0,   812,     0,     0,   814,\n+       0,     0,   815,   814,     0,     0,   936,     0, -1689,   814,\n+       0, -1689, -1689, -1689,     0,     0,     0,     0,  1466,     0,\n+    1552,     0,     0,  1553,     0,     0,     0,  1554,  1555,     0,\n+       0,   815,   815,     0,     0,     0,     0,     0,     0,     0,\n+       0,  1499,  1748,     0,     0,     0,     0,   815,   664,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,  1563,  1748,\n+     664,   664,   664,     0,     0, -1956,     0,     0,     0,     0,\n+       0,     0,     0,   530,     0,   664,     0,     0,   664,     0,\n+       0,     0,     0,   664,     0,     0,  3057,     0,     0,     0,\n+    1565,     0,     0,  2818,     0,     0,  2586,     0,     0,  1135,\n+       0,     0,     0,     0,     0,     0,     0,  1538,     0,     0,\n+       0,     0,     0,   823,     0,     0,     0,     0,     0,     0,\n+    2540,     0,     0,     0,     0,     0,     0,     0,     0,  1748,\n+    1748,     0,  1748,  1316,  1318,  1321,  1323,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,  1552,   817,\n+       0,  1553,     0,  2672,     0,  1554,  1555,     0,     0,     0,\n+       0,   498,     0,     0,     0,     0,     0,     0,     0,   531,\n+     531,     0,  1448,     0,     0,     0,     0,     0,     0,     0,\n+       0,  2618,     0,     0, -1956,     0,  1563,     0,     0,   664,\n+     664,   664,     0, -1956,  1449,  1449,     0,  2909,     0,   530,\n+   -1956,  1446,     0,   530,     0, -1956,     0,     0,     0,   530,\n+       0,     0,     0,     0,     0,  1599,     0,     0,  1565,   994,\n+       0,  2927,  1855,     0,  1973,     0,  1856,  1857,     0,     0,\n+    1858,  1859,  1860,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,   815, -1956,     0,     0,     0,  2935,     0,     0,\n+       0,     0,     0,     0,  1446,  1446,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,  2952,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,  1554,     0,     0,     0,  2645,     0,     0,     0,  1559,\n-       0,  1556,     0,     0,     0,     0,     0,  1527,  1557,     0,\n-       0,     0,     0,     0,     0,  1560,     0,     0,     0,     0,\n-    1561,     0,     0,     0,     0,     0,     0,  1292,  1442,     0,\n-       0,     0,     0,  1558,  2382,     0,     0,     0,     0,     0,\n-       0,     0,     0,  1562,  1563,  3077,  3078,     0,     0,  3079,\n-       0,     0,     0,     0,     0,     0,     0,     0,  1564,     0,\n+       0,  2675,   812,  2697,     0,     0,     0,     0,     0,  2081,\n+       0,     0,     0,     0,     0,   814,  1574,     0,     0,     0,\n+       0,     0,     0,     0,     0,   664,     0,     0,   817,   530,\n+       0,  1448, -1956,   530,   530,   530,     0,     0,     0,  1748,\n+    1689,  1748,     0,  1782,     0,     0,     0,     0, -1956,     0,\n+       0,     0,     0, -1956,     0,     0,  1441,   817,   817,     0,\n+       0,     0,   530,     0,  2777,     0,     0,     0,     0,     0,\n+       0,     0,     0,   817,     0,     0,     0,   530,   530,   530,\n+     530,   530,   530,   530,   530,   530,   530,     0,     0,     0,\n+       0, -1956,     0,     0,     0,   676,     0,     0,   815,     0,\n+       0,     0,     0,  2226,     0,  1449,     0,     0,     0,   664,\n+       0,     0, -1956,     0,     0,     0,     0,     0,     0,  1689,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,  1570,     0,  3095,  1571,  1572,  1573,     0,  1574,\n-    1575,  1576,  1577,  1578,  1579,     0,     0,     0,     0,     0,\n-       0,     0,  1841,     0,  1565,     0,     0,  1566,  3107,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,  1582,\n-       0,  1567,     0,     0,  1568,     0,     0,  1866,  1866,     0,\n-    1443,  1443,  1443,  1443,  1443,  1443,     0,  1559,  1443,  1443,\n-    1443,  1443,  1443,  1443,  1443,  1443,  1443,  1443,  1866,     0,\n-       0,     0,     0,  1560,     0,     0,     0,     0,  1561,     0,\n+    1449,     0,     0,     0,     0,  1782,     0,     0,     0,     0,\n+       0,     0,     0,     0,  1574,     0,     0,  1862,     0,     0,\n+       0,  3035,     0,     0,  1748,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,  1448,  1446,     0,     0,     0,     0,\n+       0,   530,     0,     0,  1410,     0,     0,     0,   664,   664,\n+     664,   664,     0,     0,   531,   531,     0,   531,     0,   812,\n+    1446,     0,     0,  1446,     0,     0,     0,   530,   823,     0,\n+       0,     0,   814,     0,     0,     0,     0,     0,   815,     0,\n+       0,     0,     0,  2925,     0,  1863, -1956,     0,     0,     0,\n+       0,     0,     0,  1581,  1582,  1583,  1584,  1585,  1586,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,  3151,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,  1562,  1563,     0,     0,     0,     0,     0,     0,  2893,\n-       0,     0,     0,  3168,     0,     0,  1564,  1048,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,  3178,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,  1569,     0,     0,\n-    1048,     0,     0,     0,     0,     0,  1582,  1582,     0,     0,\n-       0,     0,  1565,     0,     0,  1566,     0,     0,  3201,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,  1567,\n-       0,     0,  1568,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,  1582,     0,     0,     0,\n-    1582,  1582,  1582,  1582,  1582,  1582,  1582,  1582,     0,     0,\n-       0,     0,     0,  1443,  1443,  3226,  1582,  1582,     0,     0,\n-       0,     0,     0,     0,     0,  2893,     0,     0,  1582,     0,\n-       0,  1582,     0,     0,     0,     0,     0,     0,  1048,  1582,\n-    1582,  1582,  1582,  1582,  1582,  1582,  1582,  1582,  1582,     0,\n-       0,  1570,     0,     0,  1571,  1572,  1573,     0,  1574,  1575,\n-    1576,  1577,  1578,  1579,     0,     0,     0,     0,  3268,     0,\n-       0,     0,     0,  1545,  1582,  1569,  1546,     0,     0,     0,\n-    1547,  1548,  1549,  1550,  1551,  1552,  1553,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,  1554,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,  1556,     0,     0,     0,     0,     0,     0,  1557,     0,\n-       0,     0,     0,     0,     0,  1443,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,  1558,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,  3322,  3322,     0,     0,     0,\n+   -1956,     0,     0,  2947,  1449,   616,     0,  3098,     0,     0,\n+       0,     0,   815,     0,     0,   531,     0,     0,     0,  2959,\n+       0,  1681,     0,  2081,   815,     0,     0,     0,   817,  1973,\n+       0,     0,     0,     0,  1708,     0,     0,     0,     0,     0,\n+       0,     0,     0,  1689,     0,     0,  1930,     0,  1934,  1748,\n+       0,     0,   812,     0,   815,  1732,     0,     0,     0,     0,\n+       0,   815,   823,   530,  1446,   814,     0,     0,     0,     0,\n+     664,     0,     0,     0,     0,  2818,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,  3010,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,   815,\n+       0,     0,     0,   815, -1956,     0,     0,     0,     0,   815,\n+       0,  1581,  1582,  1583,  1584,  1585,  1586,     0,   994,  3183,\n+       0,  1855,   812,     0,     0,  1856,  1857,     0,     0,  1858,\n+    1859,  1860,     0,     0,     0,   814,     0,  1449,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,   812,     0,     0,\n+       0,  1816,     0,  1817,     0,     0,     0,     0,     0,     0,\n+     814,     0,  1748,     0,   817,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,  2226,     0,     0,     0,  1864,  1865,\n+    1866,     0,  1867,  1868,  1869,  1870,  1871,  1872,  3053,     0,\n+    1753,     0,  3223,     0,     0,  1768,     0,  1446,     0,     0,\n+       0,     0,     0,     0,   812,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,   531,   814,     0,     0,\n+       0,     0, -1691,  3070,     0,     0,     0,     0,     0,   530,\n+       0,     0,   531,     0,     0,     0,     0,   530,     0,     0,\n+       0,     0,   531,     0,   531,     0,     0,   531,     0,     0,\n+       0,     0,     0,   531,     0,   531,     0,     0,     0,     0,\n+       0,     0,     0,  3095,     0,     0,     0,   531,     0,     0,\n+       0,     0,   531,     0,   817,     0,   531,   531,   531,   531,\n+       0,   531,   531,     0,     0,   530,     0,     0,     0,     0,\n+     530,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,  1570,\n-       0,  3322,  1571,  1572,  1573,     0,  1574,  1575,  1576,  1577,\n-    1578,  1579,  1582,     0,     0,     0,  1977,     0,     0,     0,\n-       0,     0,  1582,  1582,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,  3322,     0,     0,\n+       0,   812,     0,     0,     0,     0,   530,     0,   817,     0,\n+   -1691,     0,  2818,     0,   814,     0,  1862,     0,     0,     0,\n+     817,     0,  1449,     0,     0,     0,   530,   530,     0,     0,\n+       0,     0,     0,     0,     0,   812,     0,     0,     0,   664,\n+       0,  1689,     0,     0,     0,   530,  1910,     0,   814,  3098,\n+     817,     0,     0,     0,     0, -1691,     0,   817,     0,   664,\n+       0,     0,  3166,     0,     0,     0,     0,     0,     0, -1691,\n+       0,     0,     0,     0, -1691,     0,     0,     0,     0, -1691,\n+       0,     0,  1446,     0,  1863,   815,   530,   951, -1691,     0,\n+     951,     0, -1691,     0,     0,   817,     0,  1154,     0,   817,\n+       0,     0,     0,     0,     0,   817,     0,   812,     0,     0,\n+       0,  2959,     0,     0,     0,     0,     0,  1155,   664,     0,\n+     814,     0,     0,     0, -1691,     0,     0,     0,  2137,     0,\n+       0,     0,   531,     0,     0,     0,     0,     0,  2146,     0,\n+    2149,     0,     0,  2160, -1691,     0,     0,     0,   664,  2164,\n+       0,  2166,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,  1156,  2765,  2173,     0,     0,  2367,     0,  2176,     0,\n+    2766,  1934,  2181,  2182,  2183,  2184,     0,  2188,  2189,     0,\n+       0,     0,     0,     0,     0,     0,  3070,  2066,     0,  2068,\n+       0, -1691,     0,     0, -1691,     0,     0,     0,     0,  2078,\n+   -1691,     0,     0,     0,  1054,  1054,     0,  3166,     0,     0,\n+       0,     0,     0,     0,     0,     0,   531,     0,     0,     0,\n+       0,     0,     0,     0,  1413,  1538,     0,     0,  2767,     0,\n+       0,     0,     0,     0,  1689,     0,     0,  2115, -1691,     0,\n+       0,     0,     0,     0,   812,     0,   823,   823,     0,  3166,\n+     823,     0,     0,  1157,     0,     0,     0,   814,  1898,     0,\n+       0, -1691,     0,     0,     0,     0,     0,     0,   530,  1180,\n+       0,     0,   815,  1299,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,  1413,     0,     0,  1864,  1865,  1866,\n+    1689,  1867,  1868,  1869,  1870,  1871,  1872,  3166,     0,     0,\n+       0,     0,  1158,     0,     0,     0,     0,     0,     0,   531,\n+    1159,     0,     0,     0,     0,     0,     0,   666,     0,     0,\n+       0,     0,  1160,     0,  2768,     0,  2212,  2213,  2215,  2216,\n+    2217,     0,     0,     0,   823,     0,     0,     0,     0,     0,\n+       0,     0,     0, -1705, -1691,     0,     0,     0,  2081,     0,\n+       0,     0,     0,  1161, -1691,     0,     0,  1550,   531,     0,\n+       0,     0,     0,     0,  2475,     0,     0,     0,     0,     0,\n+       0, -1691,     0, -1691, -1691,   815,     0,     0,     0,     0,\n+       0,     0,     0,     0,  1413,  1552,  1413,  1413,  1553,     0,\n+       0,   817,  1554,  1555,     0,     0,  1558,  1559,  1560,     0,\n+       0,     0,     0,     0,  1163,     0,     0,     0,     0,     0,\n+   -1691,     0,     0, -1691, -1691, -1691,     0,     0,     0,     0,\n+       0,     0,     0,  1563,     0,     0,     0,  1164,     0,     0,\n+    1564,  1552,     0,     0,  1553,     0,     0,     0,  1554,  1555,\n+       0, -1705,  1558,  1559,  1560,   815,  1166,     0,  2769,     0,\n+       0,  2770,     0,     0,     0,  1565,     0,     0,     0,  1413,\n+       0,     0,  1413,  1413,     0,     0,     0,     0,     0,  1563,\n+     815,     0,     0,     0,   531,     0,  1564,  2351,     0,     0,\n+       0,     0,     0,  1423,     0,     0, -1705,     0,     0,  1440,\n+       0,   812,  1442,     0,     0,  1453,  1456,  1461,  1464,     0,\n+   -1705,  1565,     0,     0,   814, -1705,     0,     0,     0,     0,\n+   -1705,     0,     0,     0,  1552,  1816,     0,  1553,     0, -1705,\n+       0,  1554,  1555, -1705,     0,     0,     0,   815,     0,     0,\n+       0,     0,     0,     0,     0,     0,  1299,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,  1566,\n+       0,     0,  1563,     0,     0, -1705,  1516,  1700,     0, -1956,\n+       0,     0,     0,     0,     0,  1567,     0,     0,     0,     0,\n+    1568,     0,     0,     0,  1521, -1705,     0,     0,   817,     0,\n+       0,     0,     0,     0,  1565,  1524,  1525,  1526,     0,  1530,\n+    1534,     0,     0, -1956, -1956,  1566,     0,     0,     0,     0,\n+     531,     0,     0,     0,   531,     0,   994,     0,  1571,  1855,\n+    1930,  1567,     0,  1856,  1857,     0,  1568,  1858,  1859,  1860,\n+    1595,     0, -1705,     0,     0, -1705,     0,     0,     0,     0,\n+       0, -1705,     0,     0,   815,     0,     0,     0,     0,  1569,\n+    1570,     0,     0,     0,  1788,     0,     0, -1956,     0,     0,\n+       0,     0,     0,     0,  1571,  1797,     0,  1798,     0,     0,\n+       0,  1574,     0,     0,     0,     0,     0,  1805,   815, -1705,\n+    1635,     0,     0,     0,  1651,  1656,     0,     0, -1956,     0,\n+    2568,   817,     0,     0,  1806,  1054,  1054,     0,     0,     0,\n+    1572,     0, -1705,  1573, -1956,     0,     0,     0,     0, -1956,\n+       0,     0,     0,     0,     0,     0,     0,  1574,     0,     0,\n+     531,     0,  1823,  1825,   531,   531,   531,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,  1559,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0, -1956,     0,     0,\n+     815,     0,     0,   531,     0,     0,     0,     0,   666,     0,\n+       0,   817,     0,     0,     0,     0,     0,  1576,   531,   531,\n+     531,   531,   531,   531,   531,   531,   531,   531,     0,     0,\n+       0,     0,     0,     0,     0, -1705,   817,     0,     0,     0,\n+       0,     0,  2544,     0,     0, -1705,     0,     0,     0,     0,\n+    1574,     0,     0,     0,  2557,  2558,  2560,     0,     0,     0,\n+       0,     0, -1705,  1576, -1705, -1705,     0,     0,     0,  2571,\n+       0,     0,  2574,     0, -1956,     0,     0,  2579,  1299,     0,\n+       0,     0,     0,     0,     0,     0,  1450,  1299,     0,     0,\n+       0,     0,     0,   817,     0,     0,     0,     0,     0,     0,\n+       0, -1705,     0,     0, -1705, -1705, -1705,     0,     0,     0,\n+       0,  1299,  1930,     0,     0,     0,     0,     0,     0,     0,\n+       0,  1577,     0,     0,  1578,  1579,  1580,     0,  1581,  1582,\n+    1583,  1584,  1585,  1586,     0,     0,     0,   815,  2367,     0,\n+       0,     0,  1863,     0,     0,     0, -1956,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,  1560,     0,     0,     0,     0,  1561,     0,\n+       0,     0,     0,     0,     0,     0,     0,  1577,     0,     0,\n+    1578,  1579,  1580,     0,  1581,  1582,  1583,  1584,  1585,  1586,\n+       0,  2723,  2724,  2625,  2626,  2627,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+     817,     0,  1589,     0,     0,     0,     0,     0,     0,  2776,\n+       0,     0,     0,     0,     0,     0,  2110,  2110,     0,     0,\n+       0,     0,     0,     0,  2829,  2830,  2831,  2832,  2833,  2834,\n+    2835,  2836,  2837,  2838,   817,     0,     0,     0,     0,     0,\n+    1845,     0,     0,     0,   531,  1589,     0,     0,     0,     0,\n+   -1956,     0,     0,     0,     0,     0,     0,  1581,  1582,  1583,\n+    1584,  1585,  1586,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,  1461,     0,  1461,  1461,  1413,  1450,     0,     0,\n+       0,     0,     0,     0,     0,     0,  1413,  1054,  1054,  1413,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,  2715,\n+       0,     0,     0,     0,  1054,     0,   817,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,  1562,  1563,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,  1564,     0,     0,     0,\n-    1582,  1582,  1582,     0,     0,  1866,  1866,  1866,  1866,  1866,\n-    1866,     0,     0,     0,  1866,  1866,  1866,  1866,  1866,  1866,\n-    1866,  1866,  1866,  1866,     0,     0,     0,     0,  1582,  1582,\n-       0,     0,  1565,     0,     0,  1566,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,  1567,\n-       0,     0,  1568,     0,     0,     0,  1582,     0,     0,     0,\n-    1545,     0,  1582,  1546,     0,     0,     0,  1547,  1548,  1549,\n-    1550,  1551,  1552,  1553,     0,     0,     0,     0,     0,     0,\n-    1582,     0,     0,     0,     0,     0,     0,     0,  1554,     0,\n-       0,     0,     0,  1582,     0,     0,  1582,  1582,  1556,     0,\n-       0,     0,     0,  1866,  1866,  1557,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,  1582,  1443,  1443,\n-    1582,     0,  1582,     0,     0,     0,  1582,     0,     0,     0,\n-    1558,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,  1569,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,  1589,     0,\n+       0,     0,     0,  1952,     0,  1953,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,  1864,  1865,  1866,     0,  1867,\n+    1868,  1869,  1870,  1871,  1872,     0,     0,     0,     0,     0,\n+       0,     0,     0,  1992,     0,     0,     0,  2261,  2263,  1996,\n+    1997,  1998,  1999,  2000,  2001,  2002,  2003,     0,     0,     0,\n+       0,  2012,  2013,  2852,   815,     0,  2024,     0,     0,     0,\n+    2027,  1413,     0,  2035,  2036,  2037,  2038,  2039,  2040,  2041,\n+    2042,  2043,     0,     0,  2044,     0,     0,     0,     0,     0,\n+    3078,  1054,     0,  1299,     0,     0,     0,     0,  2367,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,  2070,     0,     0,     0,     0,     0,\n+       0,     0,     0,   817,     0,     0,     0,  1589,     0,     0,\n+    2990,     0,  2888,  2889,  2890,  2891,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,   531,  1525,  1526,     0,\n+    1552,   531,     0,  1553,     0,     0,     0,  1554,  1555,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,  1545,  1582,\n-       0,  1546,     0,     0,     0,  1547,  1548,  1549,  1550,  1551,\n-    1552,  1553,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,  1554,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,  1556,     0,     0,     0,\n-       0,     0,     0,  1557,  1559,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,   531,     0,     0,\n+    1413,     0,     0,  1552,     0,     0,  1553,     0,  1563,     0,\n+    1554,  1555,     0,     0,     0, -1956,     0,   531,   531,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-    1560,     0,     0,     0,     0,  1561,     0,     0,  1558,  1570,\n-       0,     0,  1571,  1572,  1573,     0,  1574,  1575,  1576,  1577,\n-    1578,  1579,     0,     0,     0,     0,  1977,     0,  1562,  1563,\n-       0,     0,     0,     0,     0,     0,     0,  1582,     0,     0,\n-       0,     0,     0,  1564,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,   531,     0,     0,     0,\n+    1565,  1563,     0,     0,     0,     0,     0,     0, -1956,     0,\n+       0,     0,     0,  2190,     0,     0,     0,  1299,     0,     0,\n+    2200,  2201,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,  1589,     0,  1565,     0,     0,     0,   531,     0,     0,\n+       0,     0,     0,     0,  2997,     0,     0,     0,  1589,     0,\n+    1589,     0,  1450,  1450,  1299,  1873,     0,     0,  1450,     0,\n+       0,  1589,     0,  2676,  1589,     0,     0,     0,     0,  1589,\n+       0,  1552,  1589,     0,  1553,     0,     0,     0,  1554,  1555,\n+    1556,  1557,  1558,  1559,  1560,     0,     0,  2437,     0,     0,\n+       0,     0,     0,     0, -1956,     0,  2938,     0,     0,  1561,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,  1563,\n+   -1956,     0,     0,     0,     0, -1956,  1564,     0,     0,     0,\n+    2463,  2463,  2299,  2300,  1589,  2301,     0, -1956,     0,  1589,\n+       0,     0,  1589,  1589,  1589,     0,     0,     0,  1589,     0,\n+       0,  1565,  1589, -1956,     0,     0,     0,     0, -1956,     0,\n+     817,     0,     0, -1956,  2327,  2328,     0,     0,  2070,     0,\n+       0,     0,     0,  3124,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,  1443,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,  1565,\n-       0,     0,  1566,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,  1567,     0,     0,  1568,\n-       0,     0,  1559,     0,     0,     0,  1582,     0,  1582,     0,\n-       0,     0,  1582,     0,     0,     0,     0,     0,  1560,     0,\n-       0,  1582,     0,  1561,  1582,     0,  1582,     0,     0,     0,\n-    1582,     0,     0,  1866,  1866,     0,     0,  1582,  1582,     0,\n-       0,     0,     0,     0,     0,  1582,  1562,  1563,     0,     0,\n-       0,     0,     0,     0,  1582,     0,     0,     0,     0,     0,\n-       0,  1564,     0,     0,     0,     0,     0,     0,     0,  1582,\n+       0,     0,     0,  3131,  3132,     0, -1956,  2355,     0,     0,\n+       0,     0,     0,  2361,     0,     0,     0,     0,     0,     0,\n+       0,     0,  3144,  1589,     0,     0,  1574,     0,     0,     0,\n+       0,     0,     0,  1299,     0,     0,     0,     0,     0,   531,\n+       0,     0,     0,     0,  2379,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,  1566,     0,     0,     0,  1574,\n+       0,     0,     0,  1589,     0,     0,     0,     0,     0,     0,\n+       0,  1567,     0,     0,     0,  2392,  1568,     0,     0,  1589,\n+    2395,  2396,     0,     0,  1589,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,  2582,     0,     0,  1569,\n+    1570,  1873,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,  1571,     0,     0,     0,     0,     0,\n+       0,     0, -1956,  2416,     0,     0,  2419,     0,  2421,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,  1545,     0,     0,  1546,     0,     0,     0,\n-    1547,  1548,  1569,     0,  1551,  1552,  1553,  1565,     0,     0,\n-    1566,     0,     0,     0,     0,     0,     0,  1443,     0,     0,\n-       0,  1554,     0,     0,  1567,     0,     0,  1568,     0,     0,\n-       0,  1556,     0,     0,     0,     0,     0,     0,  1557,     0,\n+       0,     0,     0,  3140,  2425,     0,     0,     0,     0,     0,\n+    1572,     0,     0,  1573,     0, -1956,     0,     0,     0,     0,\n+       0,     0,     0,  3164,     0,     0,     0,  1574,     0,     0,\n+    1575,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,  1552,  1635,     0,  1553,     0,     0,     0,\n+    1554,  1555,  1556,  1557,  1558,  1559,  1560,     0,     0,     0,\n+       0,  1656,  2042,     0,     0,     0,     0,     0,     0,     0,\n+       0,  1561,     0,     0,     0,     0,     0,     0,     0,     0,\n+    1054,  1563,  3202,     0,     0,     0, -1956,     0,  1564,  2479,\n+       0,     0,     0,  1581,  1582,  1583,  1584,  1585,  1586,     0,\n+       0,     0,     0,     0,     0,  3309,     0,     0,     0,     0,\n+       0,     0,  3228,  1565,     0,     0,     0,     0,     0, -1956,\n+       0,     0,     0,  1576,     0,     0,  1581,  1582,  1583,  1584,\n+    1585,  1586,     0,  1589,     0,     0,     0,     0,     0,     0,\n+       0,  1873,  1873,     0,  1450,  1450,  1450,  1450,  1450,  1450,\n+    1299,     0,  1450,  1450,  1450,  1450,  1450,  1450,  1450,  1450,\n+    1450,  1450,  1873,     0,     0,     0,     0,  1551,     0,     0,\n+       0,     0,  1552,     0,     0,  1553,     0,     0,     0,  1554,\n+    1555,  1556,  1557,  1558,  1559,  1560,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,  2577,\n+    1561,     0,     0,     0,  1562,     0,     0,  1566,     0,     0,\n+    1563,     0,     0,     0,     0,     0,     0,  1564,     0,     0,\n+    1413,     0,     0,  1567,     0,     0,     0,  1577,  1568,     0,\n+    1578,  1579,  1580,     0,  1581,  1582,  1583,  1584,  1585,  1586,\n+    1589,  1589,  1565,     0,     0,     0,     0,     0,     0,     0,\n+       0,  1569,  1570,  2384,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,  1571,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+    1589,     0,     0,     0,  1589,  1589,  1589,  1589,  1589,  1589,\n+    1589,  1589,     0,     0,     0,     0,     0,  1450,  1450,     0,\n+    1589,  1589,  1572,     0,     0,  1573,     0,     0,     0,     0,\n+       0,     0,  1589,     0,     0,  1589,     0,     0,     0,  1574,\n+       0,     0,  1575,  1589,  1589,  1589,  1589,  1589,  1589,  1589,\n+    1589,  1589,  1589,     0,     0,  2646,  1566,     0,     0,  2648,\n+    1953,     0,     0,     0,     0,     0,  2652,     0,     0,     0,\n+       0,     0,  1567,     0,     0,     0,  2661,  1568,  1589,  2664,\n+       0,  2666,     0,     0,     0,     0,     0,     0,     0,  2670,\n+       0,     0,     0,     0,     0,     0,     0,  2677,  2678,     0,\n+    1569,  1570,     0,     0,  2685,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,  1571,     0,     0,     0,  2694,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,  2709,\n+       0,  1450,     0,     0,     0,  1576,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,  1054,\n+       0,  1572,     0,     0,  1573,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,  1574,     0,\n+       0,  1575,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,  1413,     0,\n+       0,     0,     0,  1413,     0,     0,     0,     0,  1589,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,  1589,  1589,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,  1558,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,  1577,\n+    1823,  1825,  1578,  1579,  1580,     0,  1581,  1582,  1583,  1584,\n+    1585,  1586,     0,     0,     0,     0,     0,     0,     0,  1848,\n+       0,     0,     0,     0,  1576,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,  1570,     0,     0,  1571,\n-    1572,  1573,     0,  1574,  1575,  1576,  1577,  1578,  1579,     0,\n-    1569,     0,     0,  2288,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,  1866,\n-    1443,     0,     0,     0,     0,     0,     0,  1559,     0,     0,\n+       0,     0,     0,  2904,  2905,     0,     0,  1589,  1589,  1589,\n+       0,     0,  1873,  1873,  1873,  1873,  1873,  1873,     0,     0,\n+    2922,  1873,  1873,  1873,  1873,  1873,  1873,  1873,  1873,  1873,\n+    1873,     0,  2926,     0,     0,  1589,  1589,  2928,  2929,     0,\n+       0,     0,  2930,     0,     0,     0,     0,  2933,     0,     0,\n+    2936,  2937,     0,     0,     0,  2190,  1299,     0,     0,  2944,\n+       0,     0,     0,  1589,     0,     0,     0,     0,  1577,  1589,\n+    1054,  1578,  1579,  1580,     0,  1581,  1582,  1583,  1584,  1585,\n+    1586,     0,     0,     0,     0,  1552,     0,  1589,  1553,     0,\n+       0,     0,  1554,  1555,     0,     0, -1956, -1956, -1956,     0,\n+    1589,     0,     0,  1589,  1589,     0,     0,     0,     0,     0,\n+    1873,  1873,     0,     0,  2985,     0,     0,     0,     0,     0,\n+       0,     0,     0,  1563,  1589,  1450,  1450,  1589,     0,  1589,\n+    1564,  1823,  1825,  1589,     0,     0,     0,     0,     0,     0,\n+       0,  3004,  1413,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,   -42,  1565,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,  1560,  1582,  1582,     0,     0,  1561,     0,\n+       0,     0,     0,     0,     0,     0,     1,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     2,  1589,     3,     4,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,  1582,     0,     0,     0,  1582,     0,  1582,  1582,\n-    1582,  1562,  1563,  1582,     0,     0,  1582,  1582,     0,     0,\n-       0,     0,     0,     0,  1582,     0,  1564,     0,     0,     0,\n-       0,     0,     0,     0,  1570,     0,     0,  1571,  1572,  1573,\n-       0,  1574,  1575,  1576,  1577,  1578,  1579,     0,     0,     0,\n-       0,  2373,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,  1565,     0,  1582,  1566,     0,     0,     0,     0,\n-    1866,     0,     0,     0,     0,     0,     0,     0,     0,  1567,\n-       0,     0,  1568,  1582,     0,     0,     0,     0,     0,     0,\n+       0,     5,     0,     0,     0,     0,     6,     0,     0,     0,\n+       0,     0,     0,     0,     0,     7,     0,     0,     0,     0,\n+       0,     0,     0,     0,  3031,     0,     0,     8,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     9,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,  1566,\n+      10,     0,    11,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,    12,     0,  1567,     0,     0,     0,     0,\n+    1568,  1534,     0,     0,     0,     0,     0,    13,    14,     0,\n+       0,     0,     0,     0,     0,  1589,     0,    15,     0,     0,\n+       0,  1299,     0,    16,     0,     0,     0,     0,  2392,     0,\n+       0,    17,     0,    18,    19,     0,     0,     0,  1571,  3089,\n+    3090,     0,     0,  3091,     0,     0,  1450,    20,     0,     0,\n+       0,    21,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,  3107,\n+       0,     0,     0,     0,     0,     0,    22,     0,     0,     0,\n+       0,     0,     0,     0,  1589,     0,  1589,     0,     0,     0,\n+    1589,  1574,    23,  3119,   535,     0,     0,     0,     0,  1589,\n+       0,     0,  1589,     0,  1589,     0,     0,     0,  1589,     0,\n+       0,  1873,  1873,     0,     0,  1589,  1589,     0,    24,  1413,\n+       0,     0,     0,  1589,     0,     0,  1552,     0,     0,  1553,\n+       0,     0,  1589,  1554,  1555,  1556,  1557,  1558,  1559,  1560,\n+       0,     0,     0,     0,     0,     0,     0,  1589,     0,   536,\n+       0,     0,     0,     0,  1561,     0,  3163,     0,  2656,     0,\n+       0,     0,     0,     0,  1563,   537,     0,     0,     0,     0,\n+       0,  1564,     0,     0,  2904,     0,     0,     0,  3180,     0,\n+       0,     0,  1054,     0,     0,  1450,     0,  1576,     0,    25,\n+      26,    27,  3190,     0,     0,     0,  1565,    28,     0,     0,\n+      29,     0,     0,     0,     0,  1054,     0,     0,     0,     0,\n+       0,     0,   538,     0,     0,     0,     0,     0,     0,  1141,\n+       0,     0,   539,  3213,     0,  1142,     0,     0,     0,    30,\n+       0,     0,     0,  1154,   540,     0,     0,     0,    31,   541,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,    32,  1155,     0,     0,     0,     0,     0,    33,\n+       0,     0,     0,    34,     0,     0,     0,   542,     0,     0,\n+    3238,     0,     0,    35,     0,     0,     0,     0,     0,     0,\n+    2904,     0,     0,     0,     0,    36,     0,     0,     0,    37,\n+    1566,  1577,     0,  1054, -1956, -1956, -1956,  1156,  1581,  1582,\n+    1583,  1584,  1585,  1586,     0,     0,  1567,     0,    38,     0,\n+     543,  1568,     0,     0,   544,     0,     0,  1873,  1450,     0,\n+       0,    39,     0,  3280,    40,     0,  1143,    41,     0,     0,\n+       0,     0,    42,     0,  1569,  1570,     0,     0,     0,     0,\n+       0,     0,  1589,  1589,     0,     0,    43,     0,     0,  1571,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-    1582,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+    1589,     0,     0,     0,  1589,     0,  1589,  1589,  1589,     0,\n+      44,  1589,     0,     0,  1589,  1589,     0,     0,     0,     0,\n+     545,     0,  1589,     0,    45,  1572,     0,   -42,  1573,  1157,\n+       0,     0,     0,     0,     0,   546,     0,     0,     0,     0,\n+       0,     0,  1574,     0,     0,  1575,     0,     0,     0,     0,\n+    3334,  3334,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,  1589,     0,     0,     0,     0,   547,  1873,\n+       0,   548,     0,     0,     0,     0,  3334,     0,  1158,     0,\n+     549,     0,  1589,   550,     0,     0,  1159,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,  1160,     0,\n+       0,   551,     0,     0,     0,     0,     0,     0,     0,  1589,\n+       0,     0,  3334,     0,     0,   552,     0,     0,     0,  1144,\n+       0,     0,   553,     0,     0,     0,     0,     0,     0,  1161,\n+       0,   554,     0,     0,     0,  1873,     0,   555,  1576,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,  1866,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,   556,     0,     0,  1589,  1589,  1589,\n+       0,     0,     0,     0,  1162,     0,     0,     0,  1146,     0,\n+    1163,     0,     0,     0,     0,  1589,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,  1589,     0,     0,\n+       0,     0,     0,  1164,     0,     0,     0,     0,  1165,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,  1582,  1582,\n-    1582,     0,     0,     0,     0,  1569,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,  1582,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,  1582,     0,\n+       0,     0,  1166,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,  1589,  1577,     0,     0,  1578,  1579,  1580,     0,  1581,\n+    1582,  1583,  1584,  1585,  1586,     0,     0,     0,  1589,  1984,\n+       0,     0,     0,     0,     0,     0,     0,     0,  1589,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,  1148,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,  1589,     0,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,  1589,     0,     0,     0,\n+       0,     0,     0,     0,   109,   991,   629,   992,   993,   994,\n+     995,   996,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,   110,   111,   112,   113,   114,   115,   116,\n+     117,     0,   118,   119,   120,     0,     0,     0,  1589,     0,\n+     997,     0,     0,   121,   122,   123,     0,   124,   125,   126,\n+     127,   128,   129,   130,   131,   998,   133,   999,  1000,     0,\n+     136,   137,   138,   139,   140,   141,  1001,   599,   142,   143,\n+    1002,  1003,   146,     0,   147,   148,   149,   150,   600,     0,\n+     601,     0,  1004,   154,   155,   156,   157,   158,   159,   160,\n+     161,   162,  1589,   163,   164,   165,   166,   167,   168,     0,\n+     169,   170,   171,   172,   173,   174,   175,   176,   177,   178,\n+     179,  1005,  1006,   182,  1007,   183,     0,   184,   185,   186,\n+     187,   188,   189,     0,   190,   191,   192,   193,   194,     0,\n+       0,   195,   196,   764,   198,   199,     0,   200,   201,   202,\n+       0,   203,   204,   205,     0,   206,   207,   208,   209,  1008,\n+     211,   212,   213,   214,   215,   602,  1009,   217,     0,   218,\n+     219,  1010,   221,     0,   222,     0,   223,   224,    21,   225,\n+     226,   227,   228,   229,   230,     0,   231,     0,  1011,  1012,\n+     234,     0,   235,   236,   237,   238,   239,   240,   241,   242,\n+     243,   244,   245,   246,     0,   247,   248,   249,   250,   251,\n+     252,   253,     0,   254,   255,   256,   257,   258,   259,   260,\n+     261,  1013,  1014,     0,  1015,     0,   265,   266,   267,   268,\n+     269,   270,   271,   272,   273,   274,   275,     0,     0,   276,\n+     277,   278,   279,     0,   280,   281,   282,   283,   284,   285,\n+     286,   287,  1016,   289,   290,   291,   292,   293,   294,   295,\n+     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,\n+     306,  1017,   308,  1018,   310,   311,   312,   313,  1019,   314,\n+     315,   316,   317,  1020,   604,   319,  1021,   321,   322,   323,\n+       0,   324,   325,     0,     0,  1022,   327,   328,     0,     0,\n+     329,   330,   331,   332,   333,   606,   335,   336,   337,   338,\n+     339,   340,   341,   342,   343,   344,    25,    26,    27,     0,\n+     345,   346,   607,   348,   349,   350,   351,   352,   353,   354,\n+       0,   355,   356,   357,   358,   359,   360,     0,   361,   362,\n+     363,  1023,   365,   366,   367,   368,     0,   369,   370,   371,\n+     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,\n+       0,   382,   383,   384,   385,   386,   387,  1024,   389,   390,\n+     391,   392,   393,   394,   395,   396,   397,   398,   399,    32,\n+       0,   400,   401,   402,   403,   404,   405,   406,   407,   408,\n+     409,   410,   411,   412,  1025,   414,     0,   415,   416,   417,\n+     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,\n+     428,   609,   430,     0,   431,   432,    37,   433,   434,   435,\n+     436,   437,   438,   439,     0,  1026,  1027,     0,     0,   442,\n+     443,   610,   445,   611,  1028,   447,   448,   612,   450,   451,\n+     452,   453,   454,     0,     0,   455,   456,   457,    39,   458,\n+     459,   460,   461,     0,   462,   463,   464,   465,   466,   613,\n+    1029,     0,   469,   470,   471,   472,   473,   474,   475,     0,\n+       0,   476,     0,    43,   477,   478,   479,   480,   481,   482,\n+     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,\n+     493,   494,   495,   496,   497,  1030,     0,    44,     0,     0,\n+       0,     0,  1031,  1032,  1033,     0,     0,     0,     0,  1034,\n+       0,  1035,  3068,     0,     0,     0,  1036,  1037,  1038,  1039,\n+     109,   991,   629,   992,   993,   994,   995,   996,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,   110,\n+     111,   112,   113,   114,   115,   116,   117,     0,   118,   119,\n+     120,     0,     0,     0,     0,     0,   997,     0,     0,   121,\n+     122,   123,     0,   124,   125,   126,   127,   128,   129,   130,\n+     131,   998,   133,   999,  1000,     0,   136,   137,   138,   139,\n+     140,   141,  1001,   599,   142,   143,  1002,  1003,   146,     0,\n+     147,   148,   149,   150,   600,     0,   601,     0,  1004,   154,\n+     155,   156,   157,   158,   159,   160,   161,   162,     0,   163,\n+     164,   165,   166,   167,   168,     0,   169,   170,   171,   172,\n+     173,   174,   175,   176,   177,   178,   179,  1005,  1006,   182,\n+    1007,   183,     0,   184,   185,   186,   187,   188,   189,     0,\n+     190,   191,   192,   193,   194,     0,     0,   195,   196,   764,\n+     198,   199,     0,   200,   201,   202,     0,   203,   204,   205,\n+       0,   206,   207,   208,   209,  1008,   211,   212,   213,   214,\n+     215,   602,  1009,   217,     0,   218,   219,  1010,   221,     0,\n+     222,     0,   223,   224,    21,   225,   226,   227,   228,   229,\n+     230,     0,   231,     0,  1011,  1012,   234,     0,   235,   236,\n+     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,\n+       0,   247,   248,   249,   250,   251,   252,   253,     0,   254,\n+     255,   256,   257,   258,   259,   260,   261,  1013,  1014,     0,\n+    1015,     0,   265,   266,   267,   268,   269,   270,   271,   272,\n+     273,   274,   275,     0,     0,   276,   277,   278,   279,     0,\n+     280,   281,   282,   283,   284,   285,   286,   287,  1016,   289,\n+     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,\n+     300,   301,   302,   303,   304,   305,   306,  1017,   308,  1018,\n+     310,   311,   312,   313,  1019,   314,   315,   316,   317,  1020,\n+     604,   319,  1021,   321,   322,   323,     0,   324,   325,     0,\n+       0,  1022,   327,   328,     0,     0,   329,   330,   331,   332,\n+     333,   606,   335,   336,   337,   338,   339,   340,   341,   342,\n+     343,   344,    25,    26,    27,     0,   345,   346,   607,   348,\n+     349,   350,   351,   352,   353,   354,     0,   355,   356,   357,\n+     358,   359,   360,     0,   361,   362,   363,  1023,   365,   366,\n+     367,   368,     0,   369,   370,   371,   372,   373,   374,   375,\n+     376,   377,   378,   379,   380,   381,     0,   382,   383,   384,\n+     385,   386,   387,  1024,   389,   390,   391,   392,   393,   394,\n+     395,   396,   397,   398,   399,    32,     0,   400,   401,   402,\n+     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,\n+    1025,   414,     0,   415,   416,   417,   418,   419,   420,   421,\n+     422,   423,   424,   425,   426,   427,   428,   609,   430,     0,\n+     431,   432,    37,   433,   434,   435,   436,   437,   438,   439,\n+       0,  1026,  1027,     0,     0,   442,   443,   610,   445,   611,\n+    1028,   447,   448,   612,   450,   451,   452,   453,   454,     0,\n+       0,   455,   456,   457,    39,   458,   459,   460,   461,     0,\n+     462,   463,   464,   465,   466,   613,  1029,     0,   469,   470,\n+     471,   472,   473,   474,   475,     0,     0,   476,     0,    43,\n+     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,\n+     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,\n+     497,  1030,     0,    44,     0,     0,     0,     0,  1031,  1032,\n+    1033,     0,     0,     0,     0,  1034,     0,  1035,     0,     0,\n+       0,     0,  1036,  1037,  1038,  1039,  1262,   991,   629,   992,\n+     993,   994,   995,   996,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,   110,   111,   112,   113,   114,\n+     115,   116,   117,  1263,   118,   119,   120,     0,     0,     0,\n+    1264,     0,   997,     0,     0,  1265,   122,   123,     0,   124,\n+     125,   126,  1266,   128,   129,   130,   131,   998,  1267,   999,\n+    1000,     0,   136,   137,   138,   139,   140,   141,  1001,   599,\n+     142,   143,  1002,  1003,   146,     0,   147,   148,   149,   150,\n+     600,     0,  1268,     0,  1269,   154,   155,   156,   157,   158,\n+    1270,   160,   161,   162,     0,   163,   164,   165,   166,   167,\n+     168,     0,  1271,   170,   171,   172,   173,   174,   175,   176,\n+     177,   178,   179,  1005,  1006,   182,  1007,   183,     0,   184,\n+     185,   186,   187,   188,   189,     0,   190,   191,   192,   193,\n+     194,  1272,     0,   195,   196,   764,   198,   199,     0,   200,\n+     201,   202,     0,   203,   204,   205,     0,   206,   207,   208,\n+     209,  1008,   211,   212,   213,   214,   215,   602,  1009,   217,\n+       0,   218,   219,  1010,   221,     0,   222,     0,   223,  1273,\n+       0,  1274,   226,   227,  1275,  1276,   230,     0,   231,     0,\n+    1011,  1012,   234,     0,   235,   236,   237,   238,   239,   240,\n+     241,  1277,   243,   244,   245,   246,     0,   247,   248,   249,\n+     250,   251,   252,   253,     0,   254,  1278,   256,   257,   258,\n+     259,   260,   261,  1013,  1014,     0,  1015,     0,   265,  1279,\n+    1280,   268,  1281,   270,   271,   272,   273,   274,   275,     0,\n+       0,   276,  1282,   278,  1283,     0,   280,   281,   282,   283,\n+     284,   285,   286,   287,  1284,   289,   290,   291,   292,   293,\n+     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,\n+     304,   305,   306,  1017,  1285,  1018,   310,   311,   312,   313,\n+    1019,   314,   315,  1286,   317,  1020,   604,   319,  1021,   321,\n+     322,   323,     0,   324,   325,     0,     0,  1022,   327,   328,\n+       0,     0,   329,   330,  1287,   332,  1288,   606,   335,   336,\n+     337,   338,   339,   340,   341,   342,   343,   344,     0,     0,\n+       0,     0,   345,   346,   607,  1289,   349,   350,   351,   352,\n+     353,   354,     0,   355,   356,   357,   358,   359,   360,     0,\n+     361,   362,   363,  1023,   365,   366,   367,   368,     0,   369,\n+     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,\n+     380,   381,     0,   382,   383,  1290,   385,   386,   387,  1024,\n+     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,\n+     399,     0,  1291,   400,   401,   402,   403,   404,   405,   406,\n+     407,   408,   409,  1292,   411,   412,  1025,   414,     0,   415,\n+     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,\n+     426,  1293,   428,   609,   430,     0,   431,   432,     0,   433,\n+    1294,   435,   436,   437,   438,   439,     0,  1026,  1027,     0,\n+       0,   442,   443,   610,   445,   611,  1028,   447,   448,  1295,\n+     450,   451,   452,   453,   454,     0,     0,   455,   456,   457,\n+       0,   458,   459,   460,   461,     0,   462,   463,   464,   465,\n+     466,   467,  1029,  1296,   469,  1297,   471,   472,   473,   474,\n+     475,     0,     0,   476,     0,     0,   477,   478,   479,   480,\n+     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,\n+     491,   492,   493,   494,   495,   496,   497,  1030,     0,     0,\n+       0,     0,     0,     0,  1031,  1032,  1033,     0,     0,     0,\n+       0,  1034,     0,  1035,  1298,     0,     0,     0,  1036,  1037,\n+    1038,  1039,   109,   991,   629,   992,   993,   994,   995,   996,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,  1582,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,  1582,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,  1582,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,  1570,\n-       0,     0,  1571,  1572,  1573,     0,  1574,  1575,  1576,  1577,\n-    1578,  1579,  1582,     0,     0,     0,     0,     0,     0,     0,\n+       0,   110,   111,   112,   113,   114,   115,   116,   117,     0,\n+     118,   119,   120,     0,     0,     0,     0,     0,   997,     0,\n+       0,   121,   122,   123,     0,   124,   125,   126,   127,   128,\n+     129,   130,   131,   998,   133,   999,  1000,  1457,   136,   137,\n+     138,   139,   140,   141,  1001,   599,   142,   143,  1002,  1003,\n+     146,     0,   147,   148,   149,   150,   600,     0,   601,     0,\n+    1004,   154,   155,   156,   157,   158,   159,   160,   161,   162,\n+       0,   163,   164,   165,   166,   167,   168,     0,   169,   170,\n+     171,   172,   173,   174,   175,   176,   177,   178,   179,  1005,\n+    1006,   182,  1007,   183,     0,   184,   185,   186,   187,   188,\n+     189,     0,   190,   191,   192,   193,   194,     0,     0,   195,\n+     196,   764,   198,   199,     0,   200,   201,   202,     0,   203,\n+     204,   205,     0,   206,   207,   208,   209,  1008,   211,   212,\n+     213,   214,   215,   602,  1009,   217,     0,   218,   219,  1010,\n+     221,     0,   222,     0,   223,   224,  1458,   225,   226,   227,\n+     228,   229,   230,     0,   231,     0,  1011,  1012,   234,     0,\n+     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,\n+     245,   246,     0,   247,   248,   249,   250,   251,   252,   253,\n+       0,   254,   255,   256,   257,   258,   259,   260,   261,  1013,\n+    1014,     0,  1015,     0,   265,   266,   267,   268,   269,   270,\n+     271,   272,   273,   274,   275,     0,  1459,   276,   277,   278,\n+     279,     0,   280,   281,   282,   283,   284,   285,   286,   287,\n+    1016,   289,   290,   291,   292,   293,   294,   295,   296,   297,\n+     298,   299,   300,   301,   302,   303,   304,   305,   306,  1017,\n+     308,  1018,   310,   311,   312,   313,  1019,   314,   315,   316,\n+     317,  1020,   604,   319,  1021,   321,   322,   323,     0,   324,\n+     325,     0,     0,  1022,   327,   328,     0,     0,   329,   330,\n+     331,   332,   333,   606,   335,   336,   337,   338,   339,   340,\n+     341,   342,   343,   344,     0,     0,     0,     0,   345,   346,\n+     607,   348,   349,   350,   351,   352,   353,   354,     0,   355,\n+     356,   357,   358,   359,   360,     0,   361,   362,   363,  1023,\n+     365,   366,   367,   368,     0,   369,   370,   371,   372,   373,\n+     374,   375,   376,   377,   378,   379,   380,   381,     0,   382,\n+     383,   384,   385,   386,   387,  1024,   389,   390,   391,   392,\n+     393,   394,   395,   396,   397,   398,   399,     0,     0,   400,\n+     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,\n+     411,   412,  1025,   414,     0,   415,   416,   417,   418,   419,\n+     420,   421,   422,   423,   424,   425,   426,   427,   428,   609,\n+     430,     0,   431,   432,     0,   433,   434,   435,   436,   437,\n+     438,   439,     0,  1026,  1027,     0,  1460,   442,   443,   610,\n+     445,   611,  1028,   447,   448,   612,   450,   451,   452,   453,\n+     454,     0,     0,   455,   456,   457,     0,   458,   459,   460,\n+     461,     0,   462,   463,   464,   465,   466,   467,  1029,     0,\n+     469,   470,   471,   472,   473,   474,   475,     0,     0,   476,\n+       0,     0,   477,   478,   479,   480,   481,   482,   483,   484,\n+     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,\n+     495,   496,   497,  1030,     0,     0,     0,     0,     0,     0,\n+    1031,  1032,  1033,     0,     0,     0,     0,  1034,     0,  1035,\n+       0,     0,     0,     0,  1036,  1037,  1038,  1039,  1262,   991,\n+     629,   992,   993,   994,   995,   996,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,   110,   111,   112,\n+     113,   114,   115,   116,   117,     0,   118,   119,   120,     0,\n+       0,     0,  1264,     0,   997,     0,     0,  1265,   122,   123,\n+       0,   124,   125,   126,  1266,   128,   129,   130,   131,   998,\n+    1267,   999,  1000,     0,   136,   137,   138,   139,   140,   141,\n+    1001,   599,   142,   143,  1002,  1003,   146,     0,   147,   148,\n+     149,   150,   600,     0,  1268,     0,  1269,   154,   155,   156,\n+     157,   158,  1270,   160,   161,   162,     0,   163,   164,   165,\n+     166,   167,   168,     0,  1271,   170,   171,   172,   173,   174,\n+     175,   176,   177,   178,   179,  1005,  1006,   182,  1007,   183,\n+       0,   184,   185,   186,   187,   188,   189,     0,   190,   191,\n+     192,   193,   194,     0,     0,   195,   196,   764,   198,   199,\n+       0,   200,   201,   202,     0,   203,   204,   205,     0,   206,\n+     207,   208,   209,  1008,   211,   212,   213,   214,   215,   602,\n+    1009,   217,     0,   218,   219,  1010,   221,     0,   222,     0,\n+     223,  1273,     0,  1274,   226,   227,  1275,  1276,   230,     0,\n+     231,     0,  1011,  1012,   234,     0,   235,   236,   237,   238,\n+     239,   240,   241,  1277,   243,   244,   245,   246,     0,   247,\n+     248,   249,   250,   251,   252,   253,     0,   254,  1278,   256,\n+     257,   258,   259,   260,   261,  1013,  1014,     0,  1015,     0,\n+     265,  1279,  1280,   268,  1281,   270,   271,   272,   273,   274,\n+     275,     0,     0,   276,  1282,   278,  1283,     0,   280,   281,\n+     282,   283,   284,   285,   286,   287,  1284,   289,   290,   291,\n+     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,\n+     302,   303,   304,   305,   306,  1017,  1285,  1018,   310,   311,\n+     312,   313,  1019,   314,   315,  1286,   317,  1020,   604,   319,\n+    1021,   321,   322,   323,     0,   324,   325,     0,     0,  1022,\n+     327,   328,     0,     0,   329,   330,  1287,   332,  1288,   606,\n+     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,\n+       0,     0,     0,     0,   345,   346,   607,  1289,   349,   350,\n+     351,   352,   353,   354,     0,   355,   356,   357,   358,   359,\n+     360,     0,   361,   362,   363,  1023,   365,   366,   367,   368,\n+       0,   369,   370,   371,   372,   373,   374,   375,   376,   377,\n+     378,   379,   380,   381,     0,   382,   383,  1290,   385,   386,\n+     387,  1024,   389,   390,   391,   392,   393,   394,   395,   396,\n+     397,   398,   399,     0,  1291,   400,   401,   402,   403,   404,\n+     405,   406,   407,   408,   409,  1292,   411,   412,  1025,   414,\n+       0,   415,   416,   417,   418,   419,   420,   421,   422,   423,\n+     424,   425,   426,  1293,   428,   609,   430,     0,   431,   432,\n+       0,   433,  1294,   435,   436,   437,   438,   439,     0,  1026,\n+    1027,     0,     0,   442,   443,   610,   445,   611,  1028,   447,\n+     448,  1295,   450,   451,   452,   453,   454,     0,     0,   455,\n+     456,   457,     0,   458,   459,   460,   461,     0,   462,   463,\n+     464,   465,   466,   467,  1029,  2195,   469,  1297,   471,   472,\n+     473,   474,   475,     0,     0,   476,     0,     0,   477,   478,\n+     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,\n+     489,   490,   491,   492,   493,   494,   495,   496,   497,  1030,\n+       0,     0,     0,     0,     0,     0,  1031,  1032,  1033,     0,\n+       0,     0,     0,  1034,     0,  1035,     0,     0,     0,     0,\n+    1036,  1037,  1038,  1039,  1262,   991,   629,   992,   993,   994,\n+     995,   996,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,   110,   111,   112,   113,   114,   115,   116,\n+     117,     0,   118,   119,   120,     0,     0,     0,  1264,     0,\n+     997,     0,     0,  1265,   122,   123,     0,   124,   125,   126,\n+    1266,   128,   129,   130,   131,   998,  1267,   999,  1000,     0,\n+     136,   137,   138,   139,   140,   141,  1001,   599,   142,   143,\n+    1002,  1003,   146,     0,   147,   148,   149,   150,   600,     0,\n+    1268,     0,  1269,   154,   155,   156,   157,   158,  1270,   160,\n+     161,   162,     0,   163,   164,   165,   166,   167,   168,     0,\n+    1271,   170,   171,   172,   173,   174,   175,   176,   177,   178,\n+     179,  1005,  1006,   182,  1007,   183,     0,   184,   185,   186,\n+     187,   188,   189,     0,   190,   191,   192,   193,   194,     0,\n+       0,   195,   196,   764,   198,   199,     0,   200,   201,   202,\n+       0,   203,   204,   205,     0,   206,   207,   208,   209,  1008,\n+     211,   212,   213,   214,   215,   602,  1009,   217,     0,   218,\n+     219,  1010,   221,     0,   222,     0,   223,  1273,     0,  1274,\n+     226,   227,  1275,  1276,   230,     0,   231,     0,  1011,  1012,\n+     234,     0,   235,   236,   237,   238,   239,   240,   241,  1277,\n+     243,   244,   245,   246,     0,   247,   248,   249,   250,   251,\n+     252,   253,     0,   254,  1278,   256,   257,   258,   259,   260,\n+     261,  1013,  1014,     0,  1015,     0,   265,  1279,  1280,   268,\n+    1281,   270,   271,   272,   273,   274,   275,     0,     0,   276,\n+    1282,   278,  1283,     0,   280,   281,   282,   283,   284,   285,\n+     286,   287,  1284,   289,   290,   291,   292,   293,   294,   295,\n+     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,\n+     306,  1017,  1285,  1018,   310,   311,   312,   313,  1019,   314,\n+     315,  1286,   317,  1020,   604,   319,  1021,   321,   322,   323,\n+       0,   324,   325,     0,     0,  1022,   327,   328,     0,     0,\n+     329,   330,  1287,   332,  1288,   606,   335,   336,   337,   338,\n+     339,   340,   341,   342,   343,   344,     0,     0,     0,     0,\n+     345,   346,   607,  1289,   349,   350,   351,   352,   353,   354,\n+       0,   355,   356,   357,   358,   359,   360,     0,   361,   362,\n+     363,  1023,   365,   366,   367,   368,     0,   369,   370,   371,\n+     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,\n+       0,   382,   383,  1290,   385,   386,   387,  1024,   389,   390,\n+     391,   392,   393,   394,   395,   396,   397,   398,   399,     0,\n+    1291,   400,   401,   402,   403,   404,   405,   406,   407,   408,\n+     409,  1292,   411,   412,  1025,   414,     0,   415,   416,   417,\n+     418,   419,   420,   421,   422,   423,   424,   425,   426,  1293,\n+     428,   609,   430,     0,   431,   432,     0,   433,  1294,   435,\n+     436,   437,   438,   439,     0,  1026,  1027,     0,     0,   442,\n+     443,   610,   445,   611,  1028,   447,   448,  1295,   450,   451,\n+     452,   453,   454,     0,     0,   455,   456,   457,     0,   458,\n+     459,   460,   461,     0,   462,   463,   464,   465,   466,   467,\n+    1029,     0,   469,  1297,   471,   472,   473,   474,   475,     0,\n+       0,   476,     0,     0,   477,   478,   479,   480,   481,   482,\n+     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,\n+     493,   494,   495,   496,   497,  1030,     0,     0,     0,     0,\n+       0,     0,  1031,  1032,  1033,     0,     0,     0,     0,  1034,\n+       0,  1035,  2242,     0,     0,     0,  1036,  1037,  1038,  1039,\n+     109,   991,   629,   992,   993,   994,   995,   996,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,   110,\n+     111,   112,   113,   114,   115,   116,   117, -1060,   118,   119,\n+     120,     0,     0,     0,     0, -1060,   997,     0,     0,   121,\n+     122,   123,     0,   124,   125,   126,   127,   128,   129,   130,\n+     131,   998,   133,   999,  1000,     0,   136,   137,   138,   139,\n+     140,   141,  1001,   599,   142,   143,  1002,  1003,   146,     0,\n+     147,   148,   149,   150,   600,     0,   601,     0,  1004,   154,\n+     155,   156,   157,   158,   159,   160,   161,   162,     0,   163,\n+     164,   165,   166,   167,   168,     0,   169,   170,   171,   172,\n+     173,   174,   175,   176,   177,   178,   179,  1005,  1006,   182,\n+    1007,   183,     0,   184,   185,   186,   187,   188,   189,     0,\n+     190,   191,   192,   193,   194,     0,     0,   195,   196,   764,\n+     198,   199,     0,   200,   201,   202,     0,   203,   204,   205,\n+       0,   206,   207,   208,   209,  1008,   211,   212,   213,   214,\n+     215,   602,  1009,   217,     0,   218,   219,  1010,   221,     0,\n+     222,     0,   223,   224,     0,   225,   226,   227,   228,   229,\n+     230,     0,   231,     0,  1011,  1012,   234,     0,   235,   236,\n+     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,\n+       0,   247,   248,   249,   250,   251,   252,   253,     0,   254,\n+     255,   256,   257,   258,   259,   260,   261,  1013,  1014,     0,\n+    1015,     0,   265,   266,   267,   268,   269,   270,   271,   272,\n+     273,   274,   275,     0,     0,   276,   277,   278,   279,     0,\n+     280,   281,   282,   283,   284,   285,   286,   287,  1016,   289,\n+     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,\n+     300,   301,   302,   303,   304,   305,   306,  1017,   308,  1018,\n+     310,   311,   312,   313,  1019,   314,   315,   316,   317,  1020,\n+     604,   319,  1021,   321,   322,   323,     0,   324,   325,     0,\n+       0,  1022,   327,   328,     0,     0,   329,   330,   331,   332,\n+     333,   606,   335,   336,   337,   338,   339,   340,   341,   342,\n+     343,   344,     0,     0,     0,     0,   345,   346,   607,   348,\n+     349,   350,   351,   352,   353,   354,     0,   355,   356,   357,\n+     358,   359,   360,     0,   361,   362,   363,  1023,   365,   366,\n+     367,   368,     0,   369,   370,   371,   372,   373,   374,   375,\n+     376,   377,   378,   379,   380,   381,     0,   382,   383,   384,\n+     385,   386,   387,  1024,   389,   390,   391,   392,   393,   394,\n+     395,   396,   397,   398,   399,     0,     0,   400,   401,   402,\n+     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,\n+    1025,   414, -1060,   415,   416,   417,   418,   419,   420,   421,\n+     422,   423,   424,   425,   426,   427,   428,   609,   430,     0,\n+     431,   432,     0,   433,   434,   435,   436,   437,   438,   439,\n+       0,  1026,  1027,     0,     0,   442,   443,   610,   445,   611,\n+    1028,   447,   448,   612,   450,   451,   452,   453,   454,     0,\n+       0,   455,   456,   457,     0,   458,   459,   460,   461,     0,\n+     462,   463,   464,   465,   466,   467,  1029,     0,   469,   470,\n+     471,   472,   473,   474,   475,     0,     0,   476,     0,     0,\n+     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,\n+     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,\n+     497,  1030,     0,     0,     0,     0,     0,     0,  1031,  1032,\n+    1033,     0,     0,     0,     0,  1034,     0,  1035,     0,     0,\n+       0,     0,  1036,  1037,  1038,  1039,  1262,   991,   629,   992,\n+     993,   994,   995,   996,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,   110,   111,   112,   113,   114,\n+     115,   116,   117,     0,   118,   119,   120,     0,     0,     0,\n+    1264,     0,   997,     0,     0,  1265,   122,   123,     0,   124,\n+     125,   126,  1266,   128,   129,   130,   131,   998,  1267,   999,\n+    1000,     0,   136,   137,   138,   139,   140,   141,  1001,   599,\n+     142,   143,  1002,  1003,   146,     0,   147,   148,   149,   150,\n+     600,     0,  1268,     0,  1269,   154,   155,   156,   157,   158,\n+    1270,   160,   161,   162,     0,   163,   164,   165,   166,   167,\n+     168,     0,  1271,   170,   171,   172,   173,   174,   175,   176,\n+     177,   178,   179,  1005,  1006,   182,  1007,   183,     0,   184,\n+     185,   186,   187,   188,   189,     0,   190,   191,   192,   193,\n+     194,     0,     0,   195,   196,   764,   198,   199,     0,   200,\n+     201,   202,     0,   203,   204,   205,     0,   206,   207,   208,\n+     209,  1008,   211,   212,   213,   214,   215,   602,  1009,   217,\n+       0,   218,   219,  1010,   221,     0,   222,     0,   223,  1273,\n+       0,  1274,   226,   227,  1275,  1276,   230,     0,   231,     0,\n+    1011,  1012,   234,     0,   235,   236,   237,   238,   239,   240,\n+     241,  1277,   243,   244,   245,   246,     0,   247,   248,   249,\n+     250,   251,   252,   253,     0,   254,  1278,   256,   257,   258,\n+     259,   260,   261,  1013,  1014,     0,  1015,     0,   265,  1279,\n+    1280,   268,  1281,   270,   271,   272,   273,   274,   275,     0,\n+       0,   276,  1282,   278,  1283,     0,   280,   281,   282,   283,\n+     284,   285,   286,   287,  1284,   289,   290,   291,   292,   293,\n+     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,\n+     304,   305,   306,  1017,  1285,  1018,   310,   311,   312,   313,\n+    1019,   314,   315,  1286,   317,  1020,   604,   319,  1021,   321,\n+     322,   323,     0,   324,   325,     0,     0,  1022,   327,   328,\n+       0,     0,   329,   330,  1287,   332,  1288,   606,   335,   336,\n+     337,   338,   339,   340,   341,   342,   343,   344,     0,     0,\n+       0,     0,   345,   346,   607,  1289,   349,   350,   351,   352,\n+     353,   354,     0,   355,   356,   357,   358,   359,   360,     0,\n+     361,   362,   363,  1023,   365,   366,   367,   368,     0,   369,\n+     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,\n+     380,   381,     0,   382,   383,  1290,   385,   386,   387,  1024,\n+     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,\n+     399,     0,  1291,   400,   401,   402,   403,   404,   405,   406,\n+     407,   408,   409,  1292,   411,   412,  1025,   414,     0,   415,\n+     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,\n+     426,  1293,   428,   609,   430,     0,   431,   432,     0,   433,\n+    1294,   435,   436,   437,   438,   439,     0,  1026,  1027,     0,\n+       0,   442,   443,   610,   445,   611,  1028,   447,   448,  1295,\n+     450,   451,   452,   453,   454,     0,     0,   455,   456,   457,\n+       0,   458,   459,   460,   461,     0,   462,   463,   464,   465,\n+     466,   467,  1029,     0,   469,  1297,   471,   472,   473,   474,\n+     475,     0,     0,   476,     0,     0,   477,   478,   479,   480,\n+     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,\n+     491,   492,   493,   494,   495,   496,   497,  1030,     0,     0,\n+       0,     0,     0,     0,  1031,  1032,  1033,     0,     0,     0,\n+       0,  1034,     0,  1035,  2941,     0,     0,     0,  1036,  1037,\n+    1038,  1039,  1262,   991,   629,   992,   993,   994,   995,   996,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,  1582,     0,     0,\n-       0,     0,     0,     0,     0,   109,   985,   629,   986,   987,\n-     988,   989,   990,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,   110,   111,   112,   113,   114,   115,\n-     116,   117,     0,   118,   119,   120,     0,     0,     0,  1582,\n-       0,   991,     0,     0,   121,   122,   123,     0,   124,   125,\n-     126,   127,   128,   129,   130,   131,   992,   133,   993,   994,\n-       0,   136,   137,   138,   139,   140,   141,   995,   599,   142,\n-     143,   996,   997,   146,     0,   147,   148,   149,   150,   600,\n-       0,   601,     0,   998,   154,   155,   156,   157,   158,   159,\n-     160,   161,   162,  1582,   163,   164,   165,   166,   167,   168,\n+       0,   110,   111,   112,   113,   114,   115,   116,   117,     0,\n+     118,   119,   120,     0,     0,     0,  1264,     0,   997,     0,\n+       0,  1265,   122,   123,     0,   124,   125,   126,  1266,   128,\n+     129,   130,   131,   998,  1267,   999,  1000,     0,   136,   137,\n+     138,   139,   140,   141,  1001,   599,   142,   143,  1002,  1003,\n+     146,     0,   147,   148,   149,   150,   600,     0,  1268,     0,\n+    1269,   154,   155,   156,   157,   158,  1270,   160,   161,   162,\n+       0,   163,   164,   165,   166,   167,   168,     0,  1271,   170,\n+     171,   172,   173,   174,   175,   176,   177,   178,   179,  1005,\n+    1006,   182,  1007,   183,     0,   184,   185,   186,   187,   188,\n+     189,     0,   190,   191,   192,   193,   194,     0,     0,   195,\n+     196,   764,   198,   199,     0,   200,   201,   202,     0,   203,\n+     204,   205,     0,   206,   207,   208,   209,  1008,   211,   212,\n+     213,   214,   215,   602,  1009,   217,     0,   218,   219,  1010,\n+     221,     0,   222,     0,   223,  1273,     0,  1274,   226,   227,\n+    1275,  1276,   230,     0,   231,     0,  1011,  1012,   234,     0,\n+     235,   236,   237,   238,   239,   240,   241,  1277,   243,   244,\n+     245,   246,     0,   247,   248,   249,   250,   251,   252,   253,\n+       0,   254,  1278,   256,   257,   258,   259,   260,   261,  1013,\n+    1014,     0,  1015,     0,   265,  1279,  1280,   268,  1281,   270,\n+     271,   272,   273,   274,   275,     0,     0,   276,  1282,   278,\n+    1283,     0,   280,   281,   282,   283,   284,   285,   286,   287,\n+    1284,   289,   290,   291,   292,   293,   294,   295,   296,   297,\n+     298,   299,   300,   301,   302,   303,   304,   305,   306,  1017,\n+    1285,  1018,   310,   311,   312,   313,  1019,   314,   315,  1286,\n+     317,  1020,   604,   319,  1021,   321,   322,   323,     0,   324,\n+     325,     0,     0,  1022,   327,   328,     0,     0,   329,   330,\n+    1287,   332,  1288,   606,   335,   336,   337,   338,   339,   340,\n+     341,   342,   343,   344,     0,     0,     0,     0,   345,   346,\n+     607,  1289,   349,   350,   351,   352,   353,   354,     0,   355,\n+     356,   357,   358,   359,   360,     0,   361,   362,   363,  1023,\n+     365,   366,   367,   368,     0,   369,   370,   371,   372,   373,\n+     374,   375,   376,   377,   378,   379,   380,   381,     0,   382,\n+     383,  1290,   385,   386,   387,  1024,   389,   390,   391,   392,\n+     393,   394,   395,   396,   397,   398,   399,     0,  1291,   400,\n+     401,   402,   403,   404,   405,   406,   407,   408,   409,  1292,\n+     411,   412,  1025,   414,     0,   415,   416,   417,   418,   419,\n+     420,   421,   422,   423,   424,   425,   426,  1293,   428,   609,\n+     430,     0,   431,   432,     0,   433,  1294,   435,   436,   437,\n+     438,   439,     0,  1026,  1027,     0,     0,   442,   443,   610,\n+     445,   611,  1028,   447,   448,  1295,   450,   451,   452,   453,\n+     454,     0,     0,   455,   456,   457,     0,   458,   459,   460,\n+     461,     0,   462,   463,   464,   465,   466,   467,  1029,     0,\n+     469,  1297,   471,   472,   473,   474,   475,     0,     0,   476,\n+       0,     0,   477,   478,   479,   480,   481,   482,   483,   484,\n+     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,\n+     495,   496,   497,  1030,     0,     0,     0,     0,     0,     0,\n+    1031,  1032,  1033,     0,     0,     0,     0,  1034,     0,  1035,\n+       0,     0,     0,     0,  1036,  1037,  1038,  1039,   109,   991,\n+     629,   992,   993,     0,   995,   996,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,   110,   111,   112,\n+     113,   114,   115,   116,   117,     0,   118,   119,   120,     0,\n+       0,     0,     0,     0,   997,     0,     0,   121,   122,   123,\n+       0,   124,   125,   126,   127,   128,   129,   130,   131,   998,\n+     133,   999,  1000,     0,   136,   137,   138,   139,   140,   141,\n+    1001,   599,   142,   143,  1002,  1003,   146,     0,   147,   148,\n+     149,   150,   600,     0,   601,     0,   153,   154,   155,   156,\n+     157,   158,   159,   160,   161,   162,     0,   163,   164,   165,\n+     166,   167,   168,     0,   169,   170,   171,   172,   173,   174,\n+     175,   176,   177,   178,   179,  1005,  1006,   182,     0,   183,\n+       0,   184,   185,   186,   187,   188,   189,     0,   190,   191,\n+     192,   193,   194,     0,     0,   195,   196,   764,   198,   199,\n+       0,   200,   201,   202,     0,   203,   204,   205,     0,   206,\n+     207,   208,   209,  1008,   211,   212,   213,   214,   215,   602,\n+    1009,   217,     0,   218,   219,  1010,   221,     0,   222,     0,\n+     223,   224,    21,   225,   226,   227,   228,   229,   230,     0,\n+     231,     0,  1011,  1012,   234,     0,   235,   236,   237,   238,\n+     239,   240,   241,   242,   243,   244,   245,   246,     0,   247,\n+     248,   249,   250,   251,   252,   253,     0,   254,   255,   256,\n+     257,   258,   259,   260,   261,  1013,  1014,     0,  1015,     0,\n+     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,\n+     275,     0,     0,   276,   277,   278,   279,     0,   280,   281,\n+     282,   283,   284,   285,   286,   287,  1016,   289,   290,   291,\n+     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,\n+     302,   303,   304,   305,   306,  1017,   308,  1018,   310,   311,\n+     312,   313,     0,   314,   315,   316,   317,  1020,   604,   319,\n+    1021,   321,   322,   323,     0,   324,   325,     0,     0,   326,\n+     327,   328,     0,     0,   329,   330,   331,   332,   333,   606,\n+     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,\n+      25,    26,    27,     0,   345,   346,   607,   348,   349,   350,\n+     351,   352,   353,   354,     0,   355,   356,   357,   358,   359,\n+     360,     0,   361,   362,   363,  1023,   365,   366,   367,   368,\n+       0,   369,   370,   371,   372,   373,   374,   375,   376,   377,\n+     378,   379,   380,   381,     0,   382,   383,   384,   385,   386,\n+     387,  1024,   389,   390,   391,   392,   393,   394,   395,   396,\n+     397,   398,   399,    32,     0,   400,   401,   402,   403,   404,\n+     405,   406,   407,   408,   409,   410,   411,   412,  1025,   414,\n+       0,   415,   416,   417,   418,   419,   420,   421,   422,   423,\n+     424,   425,   426,   427,   428,   609,   430,     0,   431,   432,\n+      37,   433,   434,   435,   436,   437,   438,   439,     0,  1026,\n+    1027,     0,     0,   442,   443,   610,   445,   611,  1028,   447,\n+     448,   612,   450,   451,   452,   453,   454,     0,     0,   455,\n+     456,   457,    39,   458,   459,   460,   461,     0,   462,   463,\n+     464,   465,   466,   613,  1029,     0,   469,   470,   471,   472,\n+     473,   474,   475,     0,     0,   476,     0,    43,   477,   478,\n+     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,\n+     489,   490,   491,   492,   493,   494,   495,   496,   497,     0,\n+       0,    44,     0,     0,     0,   109,   991,   629,   992,   993,\n+     994,   995,   996,  1034,     0,  1035,     0,     0,     0,     0,\n+    1036,  1037,  1038,  1039,   110,   111,   112,   113,   114,   115,\n+     116,   117,  1632,   118,   119,   120,     0,     0,     0,     0,\n+       0,   997,     0,     0,   121,   122,   123,     0,   124,   125,\n+     126,   127,   128,   129,   130,   131,   998,   133,   999,  1000,\n+       0,   136,   137,   138,   139,   140,   141,  1001,   599,   142,\n+     143,  1002,  1003,   146,     0,   147,   148,   149,   150,   600,\n+       0,   601,     0,  1004,   154,   155,   156,   157,   158,   159,\n+     160,   161,   162,     0,   163,   164,   165,   166,   167,   168,\n        0,   169,   170,   171,   172,   173,   174,   175,   176,   177,\n-     178,   179,   999,  1000,   182,  1001,   183,     0,   184,   185,\n+     178,   179,  1005,  1006,   182,  1007,   183,     0,   184,   185,\n      186,   187,   188,   189,     0,   190,   191,   192,   193,   194,\n-       0,     0,   195,   196,   761,   198,   199,     0,   200,   201,\n+       0,     0,   195,   196,   764,   198,   199,     0,   200,   201,\n      202,     0,   203,   204,   205,     0,   206,   207,   208,   209,\n-    1002,   211,   212,   213,   214,   215,   602,  1003,   217,     0,\n-     218,   219,  1004,   221,     0,   222,     0,   223,   224,    21,\n-     225,   226,   227,   228,   229,   230,     0,   231,     0,  1005,\n-    1006,   234,     0,   235,   236,   237,   238,   239,   240,   241,\n+    1008,   211,   212,   213,   214,   215,   602,  1009,   217,     0,\n+     218,   219,  1010,   221,     0,   222,     0,   223,   224,     0,\n+     225,   226,   227,   228,   229,   230,     0,   231,     0,  1011,\n+    1012,   234,     0,   235,   236,   237,   238,   239,   240,   241,\n      242,   243,   244,   245,   246,     0,   247,   248,   249,   250,\n      251,   252,   253,     0,   254,   255,   256,   257,   258,   259,\n-     260,   261,  1007,  1008,     0,  1009,     0,   265,   266,   267,\n+     260,   261,  1013,  1014,     0,  1015,     0,   265,   266,   267,\n      268,   269,   270,   271,   272,   273,   274,   275,     0,     0,\n      276,   277,   278,   279,     0,   280,   281,   282,   283,   284,\n-     285,   286,   287,  1010,   289,   290,   291,   292,   293,   294,\n+     285,   286,   287,  1016,   289,   290,   291,   292,   293,   294,\n      295,   296,   297,   298,   299,   300,   301,   302,   303,   304,\n-     305,   306,  1011,   308,  1012,   310,   311,   312,   313,  1013,\n-     314,   315,   316,   317,  1014,   604,   319,  1015,   321,   322,\n-     323,     0,   324,   325,     0,     0,  1016,   327,   328,     0,\n+     305,   306,  1017,   308,  1018,   310,   311,   312,   313,  1019,\n+     314,   315,   316,   317,  1020,   604,   319,  1021,   321,   322,\n+     323,     0,   324,   325,     0,     0,  1022,   327,   328,     0,\n        0,   329,   330,   331,   332,   333,   606,   335,   336,   337,\n-     338,   339,   340,   341,   342,   343,   344,    25,    26,    27,\n+     338,   339,   340,   341,   342,   343,   344,     0,     0,     0,\n        0,   345,   346,   607,   348,   349,   350,   351,   352,   353,\n      354,     0,   355,   356,   357,   358,   359,   360,     0,   361,\n-     362,   363,  1017,   365,   366,   367,   368,     0,   369,   370,\n+     362,   363,  1023,   365,   366,   367,   368,     0,   369,   370,\n      371,   372,   373,   374,   375,   376,   377,   378,   379,   380,\n-     381,     0,   382,   383,   384,   385,   386,   387,  1018,   389,\n+     381,     0,   382,   383,   384,   385,   386,   387,  1024,   389,\n      390,   391,   392,   393,   394,   395,   396,   397,   398,   399,\n-      32,     0,   400,   401,   402,   403,   404,   405,   406,   407,\n-     408,   409,   410,   411,   412,  1019,   414,     0,   415,   416,\n+       0,     0,   400,   401,   402,   403,   404,   405,   406,   407,\n+     408,   409,   410,   411,   412,  1025,   414,     0,   415,   416,\n      417,   418,   419,   420,   421,   422,   423,   424,   425,   426,\n-     427,   428,   609,   430,     0,   431,   432,    37,   433,   434,\n-     435,   436,   437,   438,   439,     0,  1020,  1021,     0,     0,\n-     442,   443,   610,   445,   611,  1022,   447,   448,   612,   450,\n-     451,   452,   453,   454,     0,     0,   455,   456,   457,    39,\n+     427,   428,   609,   430,     0,   431,   432,     0,   433,   434,\n+     435,   436,   437,   438,   439,     0,  1026,  1027,     0,     0,\n+     442,   443,   610,   445,   611,  1028,   447,   448,   612,   450,\n+     451,   452,   453,   454,     0,     0,   455,   456,   457,     0,\n      458,   459,   460,   461,     0,   462,   463,   464,   465,   466,\n-     613,  1023,     0,   469,   470,   471,   472,   473,   474,   475,\n-       0,     0,   476,     0,    43,   477,   478,   479,   480,   481,\n+     467,  1029,     0,   469,   470,   471,   472,   473,   474,   475,\n+       0,     0,   476,     0,     0,   477,   478,   479,   480,   481,\n      482,   483,   484,   485,   486,   487,   488,   489,   490,   491,\n-     492,   493,   494,   495,   496,   497,  1024,     0,    44,     0,\n-       0,     0,     0,  1025,  1026,  1027,     0,     0,     0,     0,\n-    1028,     0,  1029,  3056,     0,     0,     0,  1030,  1031,  1032,\n-    1033,   109,   985,   629,   986,   987,   988,   989,   990,     0,\n+     492,   493,   494,   495,   496,   497,  1030,     0,     0,     0,\n+       0,     0,     0,  1031,  1032,  1033,     0,     0,     0,     0,\n+    1034,     0,  1035,     0,     0,     0,     0,  1036,  1037,  1038,\n+    1039,   109,  1647,   629,   992,   993,   994,  1648,   996,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-     110,   111,   112,   113,   114,   115,   116,   117,     0,   118,\n-     119,   120,     0,     0,     0,     0,     0,   991,     0,     0,\n+     110,   111,   112,   113,   114,   115,   116,   117,  1649,   118,\n+     119,   120,     0,     0,     0,     0,     0,   997,     0,     0,\n      121,   122,   123,     0,   124,   125,   126,   127,   128,   129,\n-     130,   131,   992,   133,   993,   994,     0,   136,   137,   138,\n-     139,   140,   141,   995,   599,   142,   143,   996,   997,   146,\n-       0,   147,   148,   149,   150,   600,     0,   601,     0,   998,\n+     130,   131,   998,   133,   999,  1000,     0,   136,   137,   138,\n+     139,   140,   141,  1001,   599,   142,   143,  1002,  1003,   146,\n+       0,   147,   148,   149,   150,   600,     0,   601,     0,  1004,\n      154,   155,   156,   157,   158,   159,   160,   161,   162,     0,\n      163,   164,   165,   166,   167,   168,     0,   169,   170,   171,\n-     172,   173,   174,   175,   176,   177,   178,   179,   999,  1000,\n-     182,  1001,   183,     0,   184,   185,   186,   187,   188,   189,\n+     172,   173,   174,   175,   176,   177,   178,   179,  1005,  1006,\n+     182,  1007,   183,     0,   184,   185,   186,   187,   188,   189,\n        0,   190,   191,   192,   193,   194,     0,     0,   195,   196,\n-     761,   198,   199,     0,   200,   201,   202,     0,   203,   204,\n-     205,     0,   206,   207,   208,   209,  1002,   211,   212,   213,\n-     214,   215,   602,  1003,   217,     0,   218,   219,  1004,   221,\n-       0,   222,     0,   223,   224,    21,   225,   226,   227,   228,\n-     229,   230,     0,   231,     0,  1005,  1006,   234,     0,   235,\n+     764,   198,   199,     0,   200,   201,   202,     0,   203,   204,\n+     205,     0,   206,   207,   208,   209,  1008,   211,   212,   213,\n+     214,   215,   602,  1009,   217,     0,   218,   219,  1010,   221,\n+       0,   222,     0,   223,   224,     0,   225,   226,   227,   228,\n+     229,   230,     0,   231,     0,  1011,  1012,   234,     0,   235,\n      236,   237,   238,   239,   240,   241,   242,   243,   244,   245,\n      246,     0,   247,   248,   249,   250,   251,   252,   253,     0,\n-     254,   255,   256,   257,   258,   259,   260,   261,  1007,  1008,\n-       0,  1009,     0,   265,   266,   267,   268,   269,   270,   271,\n+     254,   255,   256,   257,   258,   259,   260,   261,  1013,  1014,\n+       0,  1015,     0,   265,   266,   267,   268,   269,   270,   271,\n      272,   273,   274,   275,     0,     0,   276,   277,   278,   279,\n-       0,   280,   281,   282,   283,   284,   285,   286,   287,  1010,\n+       0,   280,   281,   282,   283,   284,   285,   286,   287,  1016,\n      289,   290,   291,   292,   293,   294,   295,   296,   297,   298,\n-     299,   300,   301,   302,   303,   304,   305,   306,  1011,   308,\n-    1012,   310,   311,   312,   313,  1013,   314,   315,   316,   317,\n-    1014,   604,   319,  1015,   321,   322,   323,     0,   324,   325,\n-       0,     0,  1016,   327,   328,     0,     0,   329,   330,   331,\n+     299,   300,   301,   302,   303,   304,   305,   306,  1017,   308,\n+    1018,   310,   311,   312,   313,  1019,   314,   315,   316,   317,\n+    1020,   604,   319,  1021,   321,   322,   323,     0,   324,   325,\n+       0,     0,  1022,   327,   328,     0,     0,   329,   330,   331,\n      332,   333,   606,   335,   336,   337,   338,   339,   340,   341,\n-     342,   343,   344,    25,    26,    27,     0,   345,   346,   607,\n+     342,   343,   344,     0,     0,     0,     0,   345,   346,   607,\n      348,   349,   350,   351,   352,   353,   354,     0,   355,   356,\n-     357,   358,   359,   360,     0,   361,   362,   363,  1017,   365,\n+     357,   358,   359,   360,     0,   361,   362,   363,  1023,   365,\n      366,   367,   368,     0,   369,   370,   371,   372,   373,   374,\n      375,   376,   377,   378,   379,   380,   381,     0,   382,   383,\n-     384,   385,   386,   387,  1018,   389,   390,   391,   392,   393,\n-     394,   395,   396,   397,   398,   399,    32,     0,   400,   401,\n+     384,   385,   386,   387,  1024,   389,   390,   391,   392,   393,\n+     394,   395,   396,   397,   398,   399,     0,     0,   400,   401,\n      402,   403,   404,   405,   406,   407,   408,   409,   410,   411,\n-     412,  1019,   414,     0,   415,   416,   417,   418,   419,   420,\n+     412,  1025,   414,     0,   415,   416,   417,   418,   419,   420,\n      421,   422,   423,   424,   425,   426,   427,   428,   609,   430,\n-       0,   431,   432,    37,   433,   434,   435,   436,   437,   438,\n-     439,     0,  1020,  1021,     0,     0,   442,   443,   610,   445,\n-     611,  1022,   447,   448,   612,   450,   451,   452,   453,   454,\n-       0,     0,   455,   456,   457,    39,   458,   459,   460,   461,\n-       0,   462,   463,   464,   465,   466,   613,  1023,     0,   469,\n+       0,   431,   432,     0,   433,   434,   435,   436,   437,   438,\n+     439,     0,  1026,  1027,     0,     0,   442,   443,   610,   445,\n+     611,  1028,   447,   448,   612,   450,   451,   452,   453,   454,\n+       0,     0,   455,   456,   457,     0,   458,   459,   460,   461,\n+       0,   462,   463,   464,   465,   466,   467,  1029,     0,   469,\n      470,   471,   472,   473,   474,   475,     0,     0,   476,     0,\n-      43,   477,   478,   479,   480,   481,   482,   483,   484,   485,\n+       0,   477,   478,   479,   480,   481,   482,   483,   484,   485,\n      486,   487,   488,   489,   490,   491,   492,   493,   494,   495,\n-     496,   497,  1024,     0,    44,     0,     0,     0,     0,  1025,\n-    1026,  1027,     0,     0,     0,     0,  1028,     0,  1029,     0,\n-       0,     0,     0,  1030,  1031,  1032,  1033,  1255,   985,   629,\n-     986,   987,   988,   989,   990,     0,     0,     0,     0,     0,\n+     496,   497,  1030,     0,     0,     0,     0,     0,     0,  1031,\n+    1032,  1033,     0,     0,     0,     0,  1034,     0,  1035,     0,\n+       0,     0,     0,  1036,  1037,  1038,  1039,   109,   991,   629,\n+     992,   993,   994,   995,   996,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,   110,   111,   112,   113,\n-     114,   115,   116,   117,  1256,   118,   119,   120,     0,     0,\n-       0,  1257,     0,   991,     0,     0,  1258,   122,   123,     0,\n-     124,   125,   126,  1259,   128,   129,   130,   131,   992,  1260,\n-     993,   994,     0,   136,   137,   138,   139,   140,   141,   995,\n-     599,   142,   143,   996,   997,   146,     0,   147,   148,   149,\n-     150,   600,     0,  1261,     0,  1262,   154,   155,   156,   157,\n-     158,  1263,   160,   161,   162,     0,   163,   164,   165,   166,\n-     167,   168,     0,  1264,   170,   171,   172,   173,   174,   175,\n-     176,   177,   178,   179,   999,  1000,   182,  1001,   183,     0,\n+     114,   115,   116,   117,     0,   118,   119,   120,     0,     0,\n+       0,     0,     0,   997,     0,     0,   121,   122,   123,     0,\n+     124,   125,   126,   127,   128,   129,   130,   131,   998,   133,\n+     999,  1000,     0,   136,   137,   138,   139,   140,   141,  1001,\n+     599,   142,   143,  1002,  1003,   146,     0,   147,   148,   149,\n+     150,   600,     0,   601,     0,  1004,   154,   155,   156,   157,\n+     158,   159,   160,   161,   162,     0,   163,   164,   165,   166,\n+     167,   168,     0,   169,   170,   171,   172,   173,   174,   175,\n+     176,   177,   178,   179,  1005,  1006,   182,  1007,   183,     0,\n      184,   185,   186,   187,   188,   189,     0,   190,   191,   192,\n-     193,   194,  1265,     0,   195,   196,   761,   198,   199,     0,\n+     193,   194,     0,     0,   195,   196,   764,   198,   199,     0,\n      200,   201,   202,     0,   203,   204,   205,     0,   206,   207,\n-     208,   209,  1002,   211,   212,   213,   214,   215,   602,  1003,\n-     217,     0,   218,   219,  1004,   221,     0,   222,     0,   223,\n-    1266,     0,  1267,   226,   227,  1268,  1269,   230,     0,   231,\n-       0,  1005,  1006,   234,     0,   235,   236,   237,   238,   239,\n-     240,   241,  1270,   243,   244,   245,   246,     0,   247,   248,\n-     249,   250,   251,   252,   253,     0,   254,  1271,   256,   257,\n-     258,   259,   260,   261,  1007,  1008,     0,  1009,     0,   265,\n-    1272,  1273,   268,  1274,   270,   271,   272,   273,   274,   275,\n-       0,     0,   276,  1275,   278,  1276,     0,   280,   281,   282,\n-     283,   284,   285,   286,   287,  1277,   289,   290,   291,   292,\n+     208,   209,  1008,   211,   212,   213,   214,   215,   602,  1009,\n+     217,     0,   218,   219,  1010,   221,     0,   222,     0,   223,\n+     224,  1458,   225,   226,   227,   228,   229,   230,     0,   231,\n+       0,  1011,  1012,   234,     0,   235,   236,   237,   238,   239,\n+     240,   241,   242,   243,   244,   245,   246,     0,   247,   248,\n+     249,   250,   251,   252,   253,     0,   254,   255,   256,   257,\n+     258,   259,   260,   261,  1013,  1014,     0,  1015,     0,   265,\n+     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,\n+       0,     0,   276,   277,   278,   279,     0,   280,   281,   282,\n+     283,   284,   285,   286,   287,  1016,   289,   290,   291,   292,\n      293,   294,   295,   296,   297,   298,   299,   300,   301,   302,\n-     303,   304,   305,   306,  1011,  1278,  1012,   310,   311,   312,\n-     313,  1013,   314,   315,  1279,   317,  1014,   604,   319,  1015,\n-     321,   322,   323,     0,   324,   325,     0,     0,  1016,   327,\n-     328,     0,     0,   329,   330,  1280,   332,  1281,   606,   335,\n+     303,   304,   305,   306,  1017,   308,  1018,   310,   311,   312,\n+     313,  1019,   314,   315,   316,   317,  1020,   604,   319,  1021,\n+     321,   322,   323,     0,   324,   325,     0,     0,  1022,   327,\n+     328,     0,     0,   329,   330,   331,   332,   333,   606,   335,\n      336,   337,   338,   339,   340,   341,   342,   343,   344,     0,\n-       0,     0,     0,   345,   346,   607,  1282,   349,   350,   351,\n+       0,     0,     0,   345,   346,   607,   348,   349,   350,   351,\n      352,   353,   354,     0,   355,   356,   357,   358,   359,   360,\n-       0,   361,   362,   363,  1017,   365,   366,   367,   368,     0,\n+       0,   361,   362,   363,  1023,   365,   366,   367,   368,     0,\n      369,   370,   371,   372,   373,   374,   375,   376,   377,   378,\n-     379,   380,   381,     0,   382,   383,  1283,   385,   386,   387,\n-    1018,   389,   390,   391,   392,   393,   394,   395,   396,   397,\n-     398,   399,     0,  1284,   400,   401,   402,   403,   404,   405,\n-     406,   407,   408,   409,  1285,   411,   412,  1019,   414,     0,\n+     379,   380,   381,     0,   382,   383,   384,   385,   386,   387,\n+    1024,   389,   390,   391,   392,   393,   394,   395,   396,   397,\n+     398,   399,     0,     0,   400,   401,   402,   403,   404,   405,\n+     406,   407,   408,   409,   410,   411,   412,  1025,   414,     0,\n      415,   416,   417,   418,   419,   420,   421,   422,   423,   424,\n-     425,   426,  1286,   428,   609,   430,     0,   431,   432,     0,\n-     433,  1287,   435,   436,   437,   438,   439,     0,  1020,  1021,\n-       0,     0,   442,   443,   610,   445,   611,  1022,   447,   448,\n-    1288,   450,   451,   452,   453,   454,     0,     0,   455,   456,\n+     425,   426,   427,   428,   609,   430,     0,   431,   432,     0,\n+     433,   434,   435,   436,   437,   438,   439,     0,  1026,  1027,\n+       0,     0,   442,   443,   610,   445,   611,  1028,   447,   448,\n+     612,   450,   451,   452,   453,   454,     0,     0,   455,   456,\n      457,     0,   458,   459,   460,   461,     0,   462,   463,   464,\n-     465,   466,   467,  1023,  1289,   469,  1290,   471,   472,   473,\n+     465,   466,   467,  1029,     0,   469,   470,   471,   472,   473,\n      474,   475,     0,     0,   476,     0,     0,   477,   478,   479,\n      480,   481,   482,   483,   484,   485,   486,   487,   488,   489,\n-     490,   491,   492,   493,   494,   495,   496,   497,  1024,     0,\n-       0,     0,     0,     0,     0,  1025,  1026,  1027,     0,     0,\n-       0,     0,  1028,     0,  1029,  1291,     0,     0,     0,  1030,\n-    1031,  1032,  1033,   109,   985,   629,   986,   987,   988,   989,\n-     990,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+     490,   491,   492,   493,   494,   495,   496,   497,  1030,     0,\n+       0,     0,     0,     0,     0,  1031,  1032,  1033,     0,     0,\n+       0,     0,  1034,     0,  1035,     0,     0,     0,     0,  1036,\n+    1037,  1038,  1039,   109,   991,   629,   992,   993,   994,   995,\n+     996,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,   110,   111,   112,   113,   114,   115,   116,   117,\n-       0,   118,   119,   120,     0,     0,     0,     0,     0,   991,\n+       0,   118,   119,   120,     0,     0,     0,     0,     0,   997,\n        0,     0,   121,   122,   123,     0,   124,   125,   126,   127,\n-     128,   129,   130,   131,   992,   133,   993,   994,  1450,   136,\n-     137,   138,   139,   140,   141,   995,   599,   142,   143,   996,\n-     997,   146,     0,   147,   148,   149,   150,   600,     0,   601,\n-       0,   998,   154,   155,   156,   157,   158,   159,   160,   161,\n+     128,   129,   130,   131,   998,   133,   999,  1000,     0,   136,\n+     137,   138,   139,   140,   141,  1001,   599,   142,   143,  1002,\n+    1003,   146,     0,   147,   148,   149,   150,   600,     0,   601,\n+       0,  1004,   154,   155,   156,   157,   158,   159,   160,   161,\n      162,     0,   163,   164,   165,   166,   167,   168,     0,   169,\n      170,   171,   172,   173,   174,   175,   176,   177,   178,   179,\n-     999,  1000,   182,  1001,   183,     0,   184,   185,   186,   187,\n+    1005,  1006,   182,  1007,   183,     0,   184,   185,   186,   187,\n      188,   189,     0,   190,   191,   192,   193,   194,     0,     0,\n-     195,   196,   761,   198,   199,     0,   200,   201,   202,     0,\n-     203,   204,   205,     0,   206,   207,   208,   209,  1002,   211,\n-     212,   213,   214,   215,   602,  1003,   217,     0,   218,   219,\n-    1004,   221,     0,   222,     0,   223,   224,  1451,   225,   226,\n-     227,   228,   229,   230,     0,   231,     0,  1005,  1006,   234,\n+     195,   196,   764,   198,   199,     0,   200,   201,   202,     0,\n+     203,   204,   205,     0,   206,   207,   208,   209,  1008,   211,\n+     212,   213,   214,   215,   602,  1009,   217,     0,   218,   219,\n+    1010,   221,     0,   222,     0,   223,   224,     0,   225,   226,\n+     227,   228,   229,   230,     0,   231,     0,  1011,  1012,   234,\n        0,   235,   236,   237,   238,   239,   240,   241,   242,   243,\n      244,   245,   246,     0,   247,   248,   249,   250,   251,   252,\n      253,     0,   254,   255,   256,   257,   258,   259,   260,   261,\n-    1007,  1008,     0,  1009,     0,   265,   266,   267,   268,   269,\n-     270,   271,   272,   273,   274,   275,     0,  1452,   276,   277,\n+    1013,  1014,     0,  1015,     0,   265,   266,   267,   268,   269,\n+     270,   271,   272,   273,   274,   275,     0,     0,   276,   277,\n      278,   279,     0,   280,   281,   282,   283,   284,   285,   286,\n-     287,  1010,   289,   290,   291,   292,   293,   294,   295,   296,\n+     287,  1016,   289,   290,   291,   292,   293,   294,   295,   296,\n      297,   298,   299,   300,   301,   302,   303,   304,   305,   306,\n-    1011,   308,  1012,   310,   311,   312,   313,  1013,   314,   315,\n-     316,   317,  1014,   604,   319,  1015,   321,   322,   323,     0,\n-     324,   325,     0,     0,  1016,   327,   328,     0,     0,   329,\n+    1017,   308,  1018,   310,   311,   312,   313,  1019,   314,   315,\n+     316,   317,  1020,   604,   319,  1021,   321,   322,   323,     0,\n+     324,   325,     0,     0,  1022,   327,   328,     0,     0,   329,\n      330,   331,   332,   333,   606,   335,   336,   337,   338,   339,\n      340,   341,   342,   343,   344,     0,     0,     0,     0,   345,\n      346,   607,   348,   349,   350,   351,   352,   353,   354,     0,\n      355,   356,   357,   358,   359,   360,     0,   361,   362,   363,\n-    1017,   365,   366,   367,   368,     0,   369,   370,   371,   372,\n+    1023,   365,   366,   367,   368,     0,   369,   370,   371,   372,\n      373,   374,   375,   376,   377,   378,   379,   380,   381,     0,\n-     382,   383,   384,   385,   386,   387,  1018,   389,   390,   391,\n+     382,   383,   384,   385,   386,   387,  1024,   389,   390,   391,\n      392,   393,   394,   395,   396,   397,   398,   399,     0,     0,\n      400,   401,   402,   403,   404,   405,   406,   407,   408,   409,\n-     410,   411,   412,  1019,   414,     0,   415,   416,   417,   418,\n+     410,   411,   412,  1025,   414,     0,   415,   416,   417,   418,\n      419,   420,   421,   422,   423,   424,   425,   426,   427,   428,\n      609,   430,     0,   431,   432,     0,   433,   434,   435,   436,\n-     437,   438,   439,     0,  1020,  1021,     0,  1453,   442,   443,\n-     610,   445,   611,  1022,   447,   448,   612,   450,   451,   452,\n+     437,   438,   439,     0,  1026,  1027,     0,     0,   442,   443,\n+     610,   445,   611,  1028,   447,   448,   612,   450,   451,   452,\n      453,   454,     0,     0,   455,   456,   457,     0,   458,   459,\n-     460,   461,     0,   462,   463,   464,   465,   466,   467,  1023,\n+     460,   461,     0,   462,   463,   464,   465,   466,   467,  1029,\n        0,   469,   470,   471,   472,   473,   474,   475,     0,     0,\n      476,     0,     0,   477,   478,   479,   480,   481,   482,   483,\n      484,   485,   486,   487,   488,   489,   490,   491,   492,   493,\n-     494,   495,   496,   497,  1024,     0,     0,     0,     0,     0,\n-       0,  1025,  1026,  1027,     0,     0,     0,     0,  1028,     0,\n-    1029,     0,     0,     0,     0,  1030,  1031,  1032,  1033,  1255,\n-     985,   629,   986,   987,   988,   989,   990,     0,     0,     0,\n+     494,   495,   496,   497,  1030,     0,     0,     0,     0,     0,\n+       0,  1031,  1032,  1033,     0,     0,     0,     0,  1034,     0,\n+    1035,  1976,     0,     0,     0,  1036,  1037,  1038,  1039,   109,\n+     991,   629,   992,   993,   994,   995,   996,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,   110,   111,\n      112,   113,   114,   115,   116,   117,     0,   118,   119,   120,\n-       0,     0,     0,  1257,     0,   991,     0,     0,  1258,   122,\n-     123,     0,   124,   125,   126,  1259,   128,   129,   130,   131,\n-     992,  1260,   993,   994,     0,   136,   137,   138,   139,   140,\n-     141,   995,   599,   142,   143,   996,   997,   146,     0,   147,\n-     148,   149,   150,   600,     0,  1261,     0,  1262,   154,   155,\n-     156,   157,   158,  1263,   160,   161,   162,     0,   163,   164,\n-     165,   166,   167,   168,     0,  1264,   170,   171,   172,   173,\n-     174,   175,   176,   177,   178,   179,   999,  1000,   182,  1001,\n+       0,     0,     0,     0,     0,   997,     0,     0,   121,   122,\n+     123,     0,   124,   125,   126,   127,   128,   129,   130,   131,\n+     998,   133,   999,  1000,     0,   136,   137,   138,   139,   140,\n+     141,  1001,   599,   142,   143,  1002,  1003,   146,     0,   147,\n+     148,   149,   150,   600,     0,   601,     0,  1004,   154,   155,\n+     156,   157,   158,   159,   160,   161,   162,     0,   163,   164,\n+     165,   166,   167,   168,     0,   169,   170,   171,   172,   173,\n+     174,   175,   176,   177,   178,   179,  1005,  1006,   182,  1007,\n      183,     0,   184,   185,   186,   187,   188,   189,     0,   190,\n-     191,   192,   193,   194,     0,     0,   195,   196,   761,   198,\n+     191,   192,   193,   194,     0,     0,   195,   196,   764,   198,\n      199,     0,   200,   201,   202,     0,   203,   204,   205,     0,\n-     206,   207,   208,   209,  1002,   211,   212,   213,   214,   215,\n-     602,  1003,   217,     0,   218,   219,  1004,   221,     0,   222,\n-       0,   223,  1266,     0,  1267,   226,   227,  1268,  1269,   230,\n-       0,   231,     0,  1005,  1006,   234,     0,   235,   236,   237,\n-     238,   239,   240,   241,  1270,   243,   244,   245,   246,     0,\n-     247,   248,   249,   250,   251,   252,   253,     0,   254,  1271,\n-     256,   257,   258,   259,   260,   261,  1007,  1008,     0,  1009,\n-       0,   265,  1272,  1273,   268,  1274,   270,   271,   272,   273,\n-     274,   275,     0,     0,   276,  1275,   278,  1276,     0,   280,\n-     281,   282,   283,   284,   285,   286,   287,  1277,   289,   290,\n-     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,\n-     301,   302,   303,   304,   305,   306,  1011,  1278,  1012,   310,\n-     311,   312,   313,  1013,   314,   315,  1279,   317,  1014,   604,\n-     319,  1015,   321,   322,   323,     0,   324,   325,     0,     0,\n-    1016,   327,   328,     0,     0,   329,   330,  1280,   332,  1281,\n-     606,   335,   336,   337,   338,   339,   340,   341,   342,   343,\n-     344,     0,     0,     0,     0,   345,   346,   607,  1282,   349,\n+     206,   207,   208,   209,  1008,   211,   212,   213,   214,   215,\n+     602,  1009,   217,     0,   218,   219,  1010,   221,     0,   222,\n+       0,   223,   224,     0,   225,   226,   227,   228,   229,   230,\n+       0,   231,     0,  1011,  1012,   234,     0,   235,   236,   237,\n+     238,   239,   240,   241,   242,   243,   244,   245,   246,     0,\n+     247,   248,   249,   250,   251,   252,   253,     0,   254,   255,\n+     256,   257,   258,   259,   260,   261,  1013,  1014,     0,  1015,\n+       0,   265,   266,   267,   268,   269,   270,   271,   272,   273,\n+     274,   275,     0,     0,   276,   277,   278,   279,     0,   280,\n+     281,   282,   283,   284,   285,   286,   287,  1016,   289,   290,\n+     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,\n+     301,   302,   303,   304,   305,   306,  1017,   308,  1018,   310,\n+     311,   312,   313,  1019,   314,   315,   316,   317,  1020,   604,\n+     319,  1021,   321,   322,   323,     0,   324,   325,     0,     0,\n+    1022,   327,   328,     0,     0,   329,   330,   331,   332,   333,\n+     606,   335,   336,   337,   338,   339,   340,   341,   342,   343,\n+     344,     0,     0,     0,     0,   345,   346,   607,   348,   349,\n      350,   351,   352,   353,   354,     0,   355,   356,   357,   358,\n-     359,   360,     0,   361,   362,   363,  1017,   365,   366,   367,\n+     359,   360,     0,   361,   362,   363,  1023,   365,   366,   367,\n      368,     0,   369,   370,   371,   372,   373,   374,   375,   376,\n-     377,   378,   379,   380,   381,     0,   382,   383,  1283,   385,\n-     386,   387,  1018,   389,   390,   391,   392,   393,   394,   395,\n-     396,   397,   398,   399,     0,  1284,   400,   401,   402,   403,\n-     404,   405,   406,   407,   408,   409,  1285,   411,   412,  1019,\n+     377,   378,   379,   380,   381,     0,   382,   383,   384,   385,\n+     386,   387,  1024,   389,   390,   391,   392,   393,   394,   395,\n+     396,   397,   398,   399,     0,     0,   400,   401,   402,   403,\n+     404,   405,   406,   407,   408,   409,   410,   411,   412,  1025,\n      414,     0,   415,   416,   417,   418,   419,   420,   421,   422,\n-     423,   424,   425,   426,  1286,   428,   609,   430,     0,   431,\n-     432,     0,   433,  1287,   435,   436,   437,   438,   439,     0,\n-    1020,  1021,     0,     0,   442,   443,   610,   445,   611,  1022,\n-     447,   448,  1288,   450,   451,   452,   453,   454,     0,     0,\n+     423,   424,   425,   426,   427,   428,   609,   430,     0,   431,\n+     432,  2576,   433,   434,   435,   436,   437,   438,   439,     0,\n+    1026,  1027,     0,     0,   442,   443,   610,   445,   611,  1028,\n+     447,   448,   612,   450,   451,   452,   453,   454,     0,     0,\n      455,   456,   457,     0,   458,   459,   460,   461,     0,   462,\n-     463,   464,   465,   466,   467,  1023,  2186,   469,  1290,   471,\n+     463,   464,   465,   466,   467,  1029,     0,   469,   470,   471,\n      472,   473,   474,   475,     0,     0,   476,     0,     0,   477,\n      478,   479,   480,   481,   482,   483,   484,   485,   486,   487,\n      488,   489,   490,   491,   492,   493,   494,   495,   496,   497,\n-    1024,     0,     0,     0,     0,     0,     0,  1025,  1026,  1027,\n-       0,     0,     0,     0,  1028,     0,  1029,     0,     0,     0,\n-       0,  1030,  1031,  1032,  1033,  1255,   985,   629,   986,   987,\n-     988,   989,   990,     0,     0,     0,     0,     0,     0,     0,\n+    1030,     0,     0,     0,     0,     0,     0,  1031,  1032,  1033,\n+       0,     0,     0,     0,  1034,     0,  1035,     0,     0,     0,\n+       0,  1036,  1037,  1038,  1039,   109,   991,   629,   992,   993,\n+     994,   995,   996,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,   110,   111,   112,   113,   114,   115,\n-     116,   117,     0,   118,   119,   120,     0,     0,     0,  1257,\n-       0,   991,     0,     0,  1258,   122,   123,     0,   124,   125,\n-     126,  1259,   128,   129,   130,   131,   992,  1260,   993,   994,\n-       0,   136,   137,   138,   139,   140,   141,   995,   599,   142,\n-     143,   996,   997,   146,     0,   147,   148,   149,   150,   600,\n-       0,  1261,     0,  1262,   154,   155,   156,   157,   158,  1263,\n+     116,   117,     0,   118,   119,   120,     0,     0,     0,     0,\n+       0,   997,     0,     0,   121,   122,   123,     0,   124,   125,\n+     126,   127,   128,   129,   130,   131,   998,   133,   999,  1000,\n+       0,   136,   137,   138,   139,   140,   141,  1001,   599,   142,\n+     143,  1002,  1003,   146,     0,   147,   148,   149,   150,   600,\n+       0,   601,     0,  1004,   154,   155,   156,   157,   158,   159,\n      160,   161,   162,     0,   163,   164,   165,   166,   167,   168,\n-       0,  1264,   170,   171,   172,   173,   174,   175,   176,   177,\n-     178,   179,   999,  1000,   182,  1001,   183,     0,   184,   185,\n+       0,   169,   170,   171,   172,   173,   174,   175,   176,   177,\n+     178,   179,  1005,  1006,   182,  1007,   183,     0,   184,   185,\n      186,   187,   188,   189,     0,   190,   191,   192,   193,   194,\n-       0,     0,   195,   196,   761,   198,   199,     0,   200,   201,\n+       0,     0,   195,   196,   764,   198,   199,     0,   200,   201,\n      202,     0,   203,   204,   205,     0,   206,   207,   208,   209,\n-    1002,   211,   212,   213,   214,   215,   602,  1003,   217,     0,\n-     218,   219,  1004,   221,     0,   222,     0,   223,  1266,     0,\n-    1267,   226,   227,  1268,  1269,   230,     0,   231,     0,  1005,\n-    1006,   234,     0,   235,   236,   237,   238,   239,   240,   241,\n-    1270,   243,   244,   245,   246,     0,   247,   248,   249,   250,\n-     251,   252,   253,     0,   254,  1271,   256,   257,   258,   259,\n-     260,   261,  1007,  1008,     0,  1009,     0,   265,  1272,  1273,\n-     268,  1274,   270,   271,   272,   273,   274,   275,     0,     0,\n-     276,  1275,   278,  1276,     0,   280,   281,   282,   283,   284,\n-     285,   286,   287,  1277,   289,   290,   291,   292,   293,   294,\n+    1008,   211,   212,   213,   214,   215,   602,  1009,   217,     0,\n+     218,   219,  1010,   221,     0,   222,     0,   223,   224,     0,\n+     225,   226,   227,   228,   229,   230,     0,   231,     0,  1011,\n+    1012,   234,     0,   235,   236,   237,   238,   239,   240,   241,\n+     242,   243,   244,   245,   246,     0,   247,   248,   249,   250,\n+     251,   252,   253,     0,   254,   255,   256,   257,   258,   259,\n+     260,   261,  1013,  1014,     0,  1015,     0,   265,   266,   267,\n+     268,   269,   270,   271,   272,   273,   274,   275,     0,     0,\n+     276,   277,   278,   279,     0,   280,   281,   282,   283,   284,\n+     285,   286,   287,  1016,   289,   290,   291,   292,   293,   294,\n      295,   296,   297,   298,   299,   300,   301,   302,   303,   304,\n-     305,   306,  1011,  1278,  1012,   310,   311,   312,   313,  1013,\n-     314,   315,  1279,   317,  1014,   604,   319,  1015,   321,   322,\n-     323,     0,   324,   325,     0,     0,  1016,   327,   328,     0,\n-       0,   329,   330,  1280,   332,  1281,   606,   335,   336,   337,\n+     305,   306,  1017,   308,  1018,   310,   311,   312,   313,  1019,\n+     314,   315,   316,   317,  1020,   604,   319,  1021,   321,   322,\n+     323,     0,   324,   325,     0,     0,  1022,   327,   328,     0,\n+       0,   329,   330,   331,   332,   333,   606,   335,   336,   337,\n      338,   339,   340,   341,   342,   343,   344,     0,     0,     0,\n-       0,   345,   346,   607,  1282,   349,   350,   351,   352,   353,\n+       0,   345,   346,   607,   348,   349,   350,   351,   352,   353,\n      354,     0,   355,   356,   357,   358,   359,   360,     0,   361,\n-     362,   363,  1017,   365,   366,   367,   368,     0,   369,   370,\n+     362,   363,  1023,   365,   366,   367,   368,     0,   369,   370,\n      371,   372,   373,   374,   375,   376,   377,   378,   379,   380,\n-     381,     0,   382,   383,  1283,   385,   386,   387,  1018,   389,\n+     381,     0,   382,   383,   384,   385,   386,   387,  1024,   389,\n      390,   391,   392,   393,   394,   395,   396,   397,   398,   399,\n-       0,  1284,   400,   401,   402,   403,   404,   405,   406,   407,\n-     408,   409,  1285,   411,   412,  1019,   414,     0,   415,   416,\n+       0,     0,   400,   401,   402,   403,   404,   405,   406,   407,\n+     408,   409,   410,   411,   412,  1025,   414,     0,   415,   416,\n      417,   418,   419,   420,   421,   422,   423,   424,   425,   426,\n-    1286,   428,   609,   430,     0,   431,   432,     0,   433,  1287,\n-     435,   436,   437,   438,   439,     0,  1020,  1021,     0,     0,\n-     442,   443,   610,   445,   611,  1022,   447,   448,  1288,   450,\n+     427,   428,   609,   430,     0,   431,   432,     0,   433,   434,\n+     435,   436,   437,   438,   439,     0,  1026,  1027,     0,     0,\n+     442,   443,   610,   445,   611,  1028,   447,   448,   612,   450,\n      451,   452,   453,   454,     0,     0,   455,   456,   457,     0,\n      458,   459,   460,   461,     0,   462,   463,   464,   465,   466,\n-     467,  1023,     0,   469,  1290,   471,   472,   473,   474,   475,\n-       0,     0,   476,     0,     0,   477,   478,   479,   480,   481,\n+     467,  1029,     0,   469,   470,   471,   472,   473,   474,   475,\n+       0,  2684,   476,     0,     0,   477,   478,   479,   480,   481,\n      482,   483,   484,   485,   486,   487,   488,   489,   490,   491,\n-     492,   493,   494,   495,   496,   497,  1024,     0,     0,     0,\n-       0,     0,     0,  1025,  1026,  1027,     0,     0,     0,     0,\n-    1028,     0,  1029,  2233,     0,     0,     0,  1030,  1031,  1032,\n-    1033,   109,   985,   629,   986,   987,   988,   989,   990,     0,\n+     492,   493,   494,   495,   496,   497,  1030,     0,     0,     0,\n+       0,     0,     0,  1031,  1032,  1033,     0,     0,     0,     0,\n+    1034,     0,  1035,     0,     0,     0,     0,  1036,  1037,  1038,\n+    1039,   109,   991,   629,   992,   993,   994,   995,   996,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-     110,   111,   112,   113,   114,   115,   116,   117, -1055,   118,\n-     119,   120,     0,     0,     0,     0, -1055,   991,     0,     0,\n+     110,   111,   112,   113,   114,   115,   116,   117,  2892,   118,\n+     119,   120,     0,     0,     0,     0,     0,   997,     0,     0,\n      121,   122,   123,     0,   124,   125,   126,   127,   128,   129,\n-     130,   131,   992,   133,   993,   994,     0,   136,   137,   138,\n-     139,   140,   141,   995,   599,   142,   143,   996,   997,   146,\n-       0,   147,   148,   149,   150,   600,     0,   601,     0,   998,\n+     130,   131,   998,   133,   999,  1000,     0,   136,   137,   138,\n+     139,   140,   141,  1001,   599,   142,   143,  1002,  1003,   146,\n+       0,   147,   148,   149,   150,   600,     0,   601,     0,  1004,\n      154,   155,   156,   157,   158,   159,   160,   161,   162,     0,\n-     163,   164,   165,   166,   167,   168,     0,   169,   170,   171,\n-     172,   173,   174,   175,   176,   177,   178,   179,   999,  1000,\n-     182,  1001,   183,     0,   184,   185,   186,   187,   188,   189,\n+     163,   164,   165,   166,   167,   168,     0,   169,   170,  2893,\n+     172,   173,   174,   175,   176,   177,   178,   179,  1005,  1006,\n+     182,  1007,   183,     0,   184,   185,   186,   187,   188,   189,\n        0,   190,   191,   192,   193,   194,     0,     0,   195,   196,\n-     761,   198,   199,     0,   200,   201,   202,     0,   203,   204,\n-     205,     0,   206,   207,   208,   209,  1002,   211,   212,   213,\n-     214,   215,   602,  1003,   217,     0,   218,   219,  1004,   221,\n+     764,   198,   199,     0,   200,   201,   202,     0,   203,   204,\n+     205,     0,   206,   207,   208,   209,  1008,   211,   212,   213,\n+     214,   215,   602,  1009,   217,     0,   218,   219,  1010,   221,\n        0,   222,     0,   223,   224,     0,   225,   226,   227,   228,\n-     229,   230,     0,   231,     0,  1005,  1006,   234,     0,   235,\n+     229,   230,     0,   231,     0,  2894,  1012,   234,     0,   235,\n      236,   237,   238,   239,   240,   241,   242,   243,   244,   245,\n      246,     0,   247,   248,   249,   250,   251,   252,   253,     0,\n-     254,   255,   256,   257,   258,   259,   260,   261,  1007,  1008,\n-       0,  1009,     0,   265,   266,   267,   268,   269,   270,   271,\n+     254,   255,   256,   257,   258,   259,   260,   261,  1013,  1014,\n+       0,  1015,     0,   265,   266,   267,   268,   269,   270,   271,\n      272,   273,   274,   275,     0,     0,   276,   277,   278,   279,\n-       0,   280,   281,   282,   283,   284,   285,   286,   287,  1010,\n+       0,   280,   281,   282,   283,   284,   285,   286,   287,  1016,\n      289,   290,   291,   292,   293,   294,   295,   296,   297,   298,\n-     299,   300,   301,   302,   303,   304,   305,   306,  1011,   308,\n-    1012,   310,   311,   312,   313,  1013,   314,   315,   316,   317,\n-    1014,   604,   319,  1015,   321,   322,   323,     0,   324,   325,\n-       0,     0,  1016,   327,   328,     0,     0,   329,   330,   331,\n+     299,   300,   301,   302,   303,   304,   305,   306,  1017,   308,\n+    1018,   310,   311,   312,   313,  1019,   314,   315,   316,   317,\n+    1020,   604,   319,  1021,   321,   322,   323,     0,   324,   325,\n+       0,     0,  1022,   327,   328,     0,     0,   329,   330,   331,\n      332,   333,   606,   335,   336,   337,   338,   339,   340,   341,\n      342,   343,   344,     0,     0,     0,     0,   345,   346,   607,\n      348,   349,   350,   351,   352,   353,   354,     0,   355,   356,\n-     357,   358,   359,   360,     0,   361,   362,   363,  1017,   365,\n+     357,   358,   359,   360,     0,   361,   362,   363,  1023,   365,\n      366,   367,   368,     0,   369,   370,   371,   372,   373,   374,\n      375,   376,   377,   378,   379,   380,   381,     0,   382,   383,\n-     384,   385,   386,   387,  1018,   389,   390,   391,   392,   393,\n+     384,   385,   386,  2895,  1024,   389,   390,   391,   392,   393,\n      394,   395,   396,   397,   398,   399,     0,     0,   400,   401,\n      402,   403,   404,   405,   406,   407,   408,   409,   410,   411,\n-     412,  1019,   414, -1055,   415,   416,   417,   418,   419,   420,\n+     412,  1025,   414,     0,   415,   416,   417,   418,   419,   420,\n      421,   422,   423,   424,   425,   426,   427,   428,   609,   430,\n        0,   431,   432,     0,   433,   434,   435,   436,   437,   438,\n-     439,     0,  1020,  1021,     0,     0,   442,   443,   610,   445,\n-     611,  1022,   447,   448,   612,   450,   451,   452,   453,   454,\n+     439,     0,  1026,  1027,     0,     0,   442,   443,   610,   445,\n+     611,  1028,   447,   448,   612,   450,   451,   452,   453,   454,\n        0,     0,   455,   456,   457,     0,   458,   459,   460,   461,\n-       0,   462,   463,   464,   465,   466,   467,  1023,     0,   469,\n+       0,   462,   463,   464,   465,   466,   467,  1029,     0,   469,\n      470,   471,   472,   473,   474,   475,     0,     0,   476,     0,\n        0,   477,   478,   479,   480,   481,   482,   483,   484,   485,\n      486,   487,   488,   489,   490,   491,   492,   493,   494,   495,\n-     496,   497,  1024,     0,     0,     0,     0,     0,     0,  1025,\n-    1026,  1027,     0,     0,     0,     0,  1028,     0,  1029,     0,\n-       0,     0,     0,  1030,  1031,  1032,  1033,  1255,   985,   629,\n-     986,   987,   988,   989,   990,     0,     0,     0,     0,     0,\n+     496,   497,  1030,     0,     0,     0,     0,     0,     0,  1031,\n+    1032,  1033,     0,     0,     0,     0,  1034,     0,  2896,     0,\n+       0,     0,     0,  1036,  1037,  1038,  1039,   109,   991,   629,\n+     992,   993,   994,   995,   996,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,   110,   111,   112,   113,\n      114,   115,   116,   117,     0,   118,   119,   120,     0,     0,\n-       0,  1257,     0,   991,     0,     0,  1258,   122,   123,     0,\n-     124,   125,   126,  1259,   128,   129,   130,   131,   992,  1260,\n-     993,   994,     0,   136,   137,   138,   139,   140,   141,   995,\n-     599,   142,   143,   996,   997,   146,     0,   147,   148,   149,\n-     150,   600,     0,  1261,     0,  1262,   154,   155,   156,   157,\n-     158,  1263,   160,   161,   162,     0,   163,   164,   165,   166,\n-     167,   168,     0,  1264,   170,   171,   172,   173,   174,   175,\n-     176,   177,   178,   179,   999,  1000,   182,  1001,   183,     0,\n+       0,     0,     0,   997,     0,     0,   121,   122,   123,     0,\n+     124,   125,   126,   127,   128,   129,   130,   131,   998,   133,\n+     999,  1000,     0,   136,   137,   138,   139,   140,   141,  1001,\n+     599,   142,   143,  1002,  1003,   146,     0,   147,   148,   149,\n+     150,   600,     0,   601,     0,  1004,   154,   155,   156,   157,\n+     158,   159,   160,   161,   162,     0,   163,   164,   165,   166,\n+     167,   168,     0,   169,   170,   171,   172,   173,   174,   175,\n+     176,   177,   178,   179,  1005,  1006,   182,  1007,   183,     0,\n      184,   185,   186,   187,   188,   189,     0,   190,   191,   192,\n-     193,   194,     0,     0,   195,   196,   761,   198,   199,     0,\n+     193,   194,     0,     0,   195,   196,   764,   198,   199,     0,\n      200,   201,   202,     0,   203,   204,   205,     0,   206,   207,\n-     208,   209,  1002,   211,   212,   213,   214,   215,   602,  1003,\n-     217,     0,   218,   219,  1004,   221,     0,   222,     0,   223,\n-    1266,     0,  1267,   226,   227,  1268,  1269,   230,     0,   231,\n-       0,  1005,  1006,   234,     0,   235,   236,   237,   238,   239,\n-     240,   241,  1270,   243,   244,   245,   246,     0,   247,   248,\n-     249,   250,   251,   252,   253,     0,   254,  1271,   256,   257,\n-     258,   259,   260,   261,  1007,  1008,     0,  1009,     0,   265,\n-    1272,  1273,   268,  1274,   270,   271,   272,   273,   274,   275,\n-       0,     0,   276,  1275,   278,  1276,     0,   280,   281,   282,\n-     283,   284,   285,   286,   287,  1277,   289,   290,   291,   292,\n+     208,   209,  1008,   211,   212,   213,   214,   215,   602,  1009,\n+     217,     0,   218,   219,  1010,   221,     0,   222,     0,   223,\n+     224,     0,   225,   226,   227,   228,   229,   230,     0,   231,\n+       0,  1011,  1012,   234,     0,   235,   236,   237,   238,   239,\n+     240,   241,   242,   243,   244,   245,   246,     0,   247,   248,\n+     249,   250,   251,   252,   253,     0,   254,   255,   256,   257,\n+     258,   259,   260,   261,  1013,  1014,     0,  1015,     0,   265,\n+     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,\n+       0,     0,   276,   277,   278,   279,     0,   280,   281,   282,\n+     283,   284,   285,   286,   287,  1016,   289,   290,   291,   292,\n      293,   294,   295,   296,   297,   298,   299,   300,   301,   302,\n-     303,   304,   305,   306,  1011,  1278,  1012,   310,   311,   312,\n-     313,  1013,   314,   315,  1279,   317,  1014,   604,   319,  1015,\n-     321,   322,   323,     0,   324,   325,     0,     0,  1016,   327,\n-     328,     0,     0,   329,   330,  1280,   332,  1281,   606,   335,\n+     303,   304,   305,   306,  1017,   308,  1018,   310,   311,   312,\n+     313,  1019,   314,   315,   316,   317,  1020,   604,   319,  1021,\n+     321,   322,   323,     0,   324,   325,     0,     0,  1022,   327,\n+     328,     0,     0,   329,   330,   331,   332,   333,   606,   335,\n      336,   337,   338,   339,   340,   341,   342,   343,   344,     0,\n-       0,     0,     0,   345,   346,   607,  1282,   349,   350,   351,\n+       0,     0,     0,   345,   346,   607,   348,   349,   350,   351,\n      352,   353,   354,     0,   355,   356,   357,   358,   359,   360,\n-       0,   361,   362,   363,  1017,   365,   366,   367,   368,     0,\n+       0,   361,   362,   363,  1023,   365,   366,   367,   368,     0,\n      369,   370,   371,   372,   373,   374,   375,   376,   377,   378,\n-     379,   380,   381,     0,   382,   383,  1283,   385,   386,   387,\n-    1018,   389,   390,   391,   392,   393,   394,   395,   396,   397,\n-     398,   399,     0,  1284,   400,   401,   402,   403,   404,   405,\n-     406,   407,   408,   409,  1285,   411,   412,  1019,   414,     0,\n+     379,   380,   381,     0,   382,   383,   384,   385,   386,   387,\n+    1024,   389,   390,   391,   392,   393,   394,   395,   396,   397,\n+     398,   399,     0,     0,   400,   401,   402,   403,   404,   405,\n+     406,   407,   408,   409,   410,   411,   412,  1025,   414,     0,\n      415,   416,   417,   418,   419,   420,   421,   422,   423,   424,\n-     425,   426,  1286,   428,   609,   430,     0,   431,   432,     0,\n-     433,  1287,   435,   436,   437,   438,   439,     0,  1020,  1021,\n-       0,     0,   442,   443,   610,   445,   611,  1022,   447,   448,\n-    1288,   450,   451,   452,   453,   454,     0,     0,   455,   456,\n+     425,   426,   427,   428,   609,   430,     0,   431,   432,  3030,\n+     433,   434,   435,   436,   437,   438,   439,     0,  1026,  1027,\n+       0,     0,   442,   443,   610,   445,   611,  1028,   447,   448,\n+     612,   450,   451,   452,   453,   454,     0,     0,   455,   456,\n      457,     0,   458,   459,   460,   461,     0,   462,   463,   464,\n-     465,   466,   467,  1023,     0,   469,  1290,   471,   472,   473,\n+     465,   466,   467,  1029,     0,   469,   470,   471,   472,   473,\n      474,   475,     0,     0,   476,     0,     0,   477,   478,   479,\n      480,   481,   482,   483,   484,   485,   486,   487,   488,   489,\n-     490,   491,   492,   493,   494,   495,   496,   497,  1024,     0,\n-       0,     0,     0,     0,     0,  1025,  1026,  1027,     0,     0,\n-       0,     0,  1028,     0,  1029,  2930,     0,     0,     0,  1030,\n-    1031,  1032,  1033,  1255,   985,   629,   986,   987,   988,   989,\n-     990,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+     490,   491,   492,   493,   494,   495,   496,   497,  1030,     0,\n+       0,     0,     0,     0,     0,  1031,  1032,  1033,     0,     0,\n+       0,     0,  1034,     0,  1035,     0,     0,     0,     0,  1036,\n+    1037,  1038,  1039,   109,   991,   629,   992,   993,   994,   995,\n+     996,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,   110,   111,   112,   113,   114,   115,   116,   117,\n-       0,   118,   119,   120,     0,     0,     0,  1257,     0,   991,\n-       0,     0,  1258,   122,   123,     0,   124,   125,   126,  1259,\n-     128,   129,   130,   131,   992,  1260,   993,   994,     0,   136,\n-     137,   138,   139,   140,   141,   995,   599,   142,   143,   996,\n-     997,   146,     0,   147,   148,   149,   150,   600,     0,  1261,\n-       0,  1262,   154,   155,   156,   157,   158,  1263,   160,   161,\n-     162,     0,   163,   164,   165,   166,   167,   168,     0,  1264,\n+       0,   118,   119,   120,     0,     0,     0,     0,     0,   997,\n+       0,     0,   121,   122,   123,     0,   124,   125,   126,   127,\n+     128,   129,   130,   131,   998,   133,   999,  1000,     0,   136,\n+     137,   138,   139,   140,   141,  1001,   599,   142,   143,  1002,\n+    1003,   146,     0,   147,   148,   149,   150,   600,     0,   601,\n+       0,  1004,   154,   155,   156,   157,   158,   159,   160,   161,\n+     162,     0,   163,   164,   165,   166,   167,   168,     0,   169,\n      170,   171,   172,   173,   174,   175,   176,   177,   178,   179,\n-     999,  1000,   182,  1001,   183,     0,   184,   185,   186,   187,\n+    1005,  1006,   182,  1007,   183,     0,   184,   185,   186,   187,\n      188,   189,     0,   190,   191,   192,   193,   194,     0,     0,\n-     195,   196,   761,   198,   199,     0,   200,   201,   202,     0,\n-     203,   204,   205,     0,   206,   207,   208,   209,  1002,   211,\n-     212,   213,   214,   215,   602,  1003,   217,     0,   218,   219,\n-    1004,   221,     0,   222,     0,   223,  1266,     0,  1267,   226,\n-     227,  1268,  1269,   230,     0,   231,     0,  1005,  1006,   234,\n-       0,   235,   236,   237,   238,   239,   240,   241,  1270,   243,\n+     195,   196,   764,   198,   199,     0,   200,   201,   202,     0,\n+     203,   204,   205,     0,   206,   207,   208,   209,  1008,   211,\n+     212,   213,   214,   215,   602,  1009,   217,     0,   218,   219,\n+    1010,   221,     0,   222,     0,   223,   224,     0,   225,   226,\n+     227,   228,   229,   230,     0,   231,     0,  1011,  1012,   234,\n+       0,   235,   236,   237,   238,   239,   240,   241,   242,   243,\n      244,   245,   246,     0,   247,   248,   249,   250,   251,   252,\n-     253,     0,   254,  1271,   256,   257,   258,   259,   260,   261,\n-    1007,  1008,     0,  1009,     0,   265,  1272,  1273,   268,  1274,\n-     270,   271,   272,   273,   274,   275,     0,     0,   276,  1275,\n-     278,  1276,     0,   280,   281,   282,   283,   284,   285,   286,\n-     287,  1277,   289,   290,   291,   292,   293,   294,   295,   296,\n+     253,     0,   254,   255,   256,   257,   258,   259,   260,   261,\n+    1013,  1014,     0,  1015,     0,   265,   266,   267,   268,   269,\n+     270,   271,   272,   273,   274,   275,     0,     0,   276,   277,\n+     278,   279,     0,   280,   281,   282,   283,   284,   285,   286,\n+     287,  1016,   289,   290,   291,   292,   293,   294,   295,   296,\n      297,   298,   299,   300,   301,   302,   303,   304,   305,   306,\n-    1011,  1278,  1012,   310,   311,   312,   313,  1013,   314,   315,\n-    1279,   317,  1014,   604,   319,  1015,   321,   322,   323,     0,\n-     324,   325,     0,     0,  1016,   327,   328,     0,     0,   329,\n-     330,  1280,   332,  1281,   606,   335,   336,   337,   338,   339,\n+    1017,   308,  1018,   310,   311,   312,   313,  1019,   314,   315,\n+     316,   317,  1020,   604,   319,  1021,   321,   322,   323,     0,\n+     324,   325,     0,     0,  1022,   327,   328,     0,     0,   329,\n+     330,   331,   332,   333,   606,   335,   336,   337,   338,   339,\n      340,   341,   342,   343,   344,     0,     0,     0,     0,   345,\n-     346,   607,  1282,   349,   350,   351,   352,   353,   354,     0,\n+     346,   607,   348,   349,   350,   351,   352,   353,   354,     0,\n      355,   356,   357,   358,   359,   360,     0,   361,   362,   363,\n-    1017,   365,   366,   367,   368,     0,   369,   370,   371,   372,\n+    1023,   365,   366,   367,   368,     0,   369,   370,   371,   372,\n      373,   374,   375,   376,   377,   378,   379,   380,   381,     0,\n-     382,   383,  1283,   385,   386,   387,  1018,   389,   390,   391,\n-     392,   393,   394,   395,   396,   397,   398,   399,     0,  1284,\n+     382,   383,   384,   385,   386,   387,  1024,   389,   390,   391,\n+     392,   393,   394,   395,   396,   397,   398,   399,     0,     0,\n      400,   401,   402,   403,   404,   405,   406,   407,   408,   409,\n-    1285,   411,   412,  1019,   414,     0,   415,   416,   417,   418,\n-     419,   420,   421,   422,   423,   424,   425,   426,  1286,   428,\n-     609,   430,     0,   431,   432,     0,   433,  1287,   435,   436,\n-     437,   438,   439,     0,  1020,  1021,     0,     0,   442,   443,\n-     610,   445,   611,  1022,   447,   448,  1288,   450,   451,   452,\n+     410,   411,   412,  1025,   414,     0,   415,   416,   417,   418,\n+     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,\n+     609,   430,     0,   431,   432,  3162,   433,   434,   435,   436,\n+     437,   438,   439,     0,  1026,  1027,     0,     0,   442,   443,\n+     610,   445,   611,  1028,   447,   448,   612,   450,   451,   452,\n      453,   454,     0,     0,   455,   456,   457,     0,   458,   459,\n-     460,   461,     0,   462,   463,   464,   465,   466,   467,  1023,\n-       0,   469,  1290,   471,   472,   473,   474,   475,     0,     0,\n+     460,   461,     0,   462,   463,   464,   465,   466,   467,  1029,\n+       0,   469,   470,   471,   472,   473,   474,   475,     0,     0,\n      476,     0,     0,   477,   478,   479,   480,   481,   482,   483,\n      484,   485,   486,   487,   488,   489,   490,   491,   492,   493,\n-     494,   495,   496,   497,  1024,     0,     0,     0,     0,     0,\n-       0,  1025,  1026,  1027,     0,     0,     0,     0,  1028,     0,\n-    1029,     0,     0,     0,     0,  1030,  1031,  1032,  1033,   109,\n-     985,   629,   986,   987,     0,   989,   990,     0,     0,     0,\n+     494,   495,   496,   497,  1030,     0,     0,     0,     0,     0,\n+       0,  1031,  1032,  1033,     0,     0,     0,     0,  1034,     0,\n+    1035,     0,     0,     0,     0,  1036,  1037,  1038,  1039,   109,\n+     991,   629,   992,   993,   994,   995,   996,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,   110,   111,\n      112,   113,   114,   115,   116,   117,     0,   118,   119,   120,\n-       0,     0,     0,     0,     0,   991,     0,     0,   121,   122,\n+       0,     0,     0,     0,     0,   997,     0,     0,   121,   122,\n      123,     0,   124,   125,   126,   127,   128,   129,   130,   131,\n-     992,   133,   993,   994,     0,   136,   137,   138,   139,   140,\n-     141,   995,   599,   142,   143,   996,   997,   146,     0,   147,\n-     148,   149,   150,   600,     0,   601,     0,   153,   154,   155,\n+     998,   133,   999,  1000,     0,   136,   137,   138,   139,   140,\n+     141,  1001,   599,   142,   143,  1002,  1003,   146,     0,   147,\n+     148,   149,   150,   600,     0,   601,     0,  1004,   154,   155,\n      156,   157,   158,   159,   160,   161,   162,     0,   163,   164,\n      165,   166,   167,   168,     0,   169,   170,   171,   172,   173,\n-     174,   175,   176,   177,   178,   179,   999,  1000,   182,     0,\n+     174,   175,   176,   177,   178,   179,  1005,  1006,   182,  1007,\n      183,     0,   184,   185,   186,   187,   188,   189,     0,   190,\n-     191,   192,   193,   194,     0,     0,   195,   196,   761,   198,\n+     191,   192,   193,   194,     0,     0,   195,   196,   764,   198,\n      199,     0,   200,   201,   202,     0,   203,   204,   205,     0,\n-     206,   207,   208,   209,  1002,   211,   212,   213,   214,   215,\n-     602,  1003,   217,     0,   218,   219,  1004,   221,     0,   222,\n-       0,   223,   224,    21,   225,   226,   227,   228,   229,   230,\n-       0,   231,     0,  1005,  1006,   234,     0,   235,   236,   237,\n+     206,   207,   208,   209,  1008,   211,   212,   213,   214,   215,\n+     602,  1009,   217,     0,   218,   219,  1010,   221,     0,   222,\n+       0,   223,   224,     0,   225,   226,   227,   228,   229,   230,\n+       0,   231,     0,  1011,  1012,   234,     0,   235,   236,   237,\n      238,   239,   240,   241,   242,   243,   244,   245,   246,     0,\n      247,   248,   249,   250,   251,   252,   253,     0,   254,   255,\n-     256,   257,   258,   259,   260,   261,  1007,  1008,     0,  1009,\n+     256,   257,   258,   259,   260,   261,  1013,  1014,     0,  1015,\n        0,   265,   266,   267,   268,   269,   270,   271,   272,   273,\n      274,   275,     0,     0,   276,   277,   278,   279,     0,   280,\n-     281,   282,   283,   284,   285,   286,   287,  1010,   289,   290,\n+     281,   282,   283,   284,   285,   286,   287,  1016,   289,   290,\n      291,   292,   293,   294,   295,   296,   297,   298,   299,   300,\n-     301,   302,   303,   304,   305,   306,  1011,   308,  1012,   310,\n-     311,   312,   313,     0,   314,   315,   316,   317,  1014,   604,\n-     319,  1015,   321,   322,   323,     0,   324,   325,     0,     0,\n-     326,   327,   328,     0,     0,   329,   330,   331,   332,   333,\n+     301,   302,   303,   304,   305,   306,  1017,   308,  1018,   310,\n+     311,   312,   313,  1019,   314,   315,   316,   317,  1020,   604,\n+     319,  1021,   321,   322,   323,     0,   324,   325,     0,     0,\n+    1022,   327,   328,     0,     0,   329,   330,   331,   332,   333,\n      606,   335,   336,   337,   338,   339,   340,   341,   342,   343,\n-     344,    25,    26,    27,     0,   345,   346,   607,   348,   349,\n+     344,     0,     0,     0,     0,   345,   346,   607,   348,   349,\n      350,   351,   352,   353,   354,     0,   355,   356,   357,   358,\n-     359,   360,     0,   361,   362,   363,  1017,   365,   366,   367,\n+     359,   360,     0,   361,   362,   363,  1023,   365,   366,   367,\n      368,     0,   369,   370,   371,   372,   373,   374,   375,   376,\n      377,   378,   379,   380,   381,     0,   382,   383,   384,   385,\n-     386,   387,  1018,   389,   390,   391,   392,   393,   394,   395,\n-     396,   397,   398,   399,    32,     0,   400,   401,   402,   403,\n-     404,   405,   406,   407,   408,   409,   410,   411,   412,  1019,\n+     386,   387,  1024,   389,   390,   391,   392,   393,   394,   395,\n+     396,   397,   398,   399,     0,     0,   400,   401,   402,   403,\n+     404,   405,   406,   407,   408,   409,   410,   411,   412,  1025,\n      414,     0,   415,   416,   417,   418,   419,   420,   421,   422,\n      423,   424,   425,   426,   427,   428,   609,   430,     0,   431,\n-     432,    37,   433,   434,   435,   436,   437,   438,   439,     0,\n-    1020,  1021,     0,     0,   442,   443,   610,   445,   611,  1022,\n+     432,     0,   433,   434,   435,   436,   437,   438,   439,     0,\n+    1026,  1027,     0,     0,   442,   443,   610,   445,   611,  1028,\n      447,   448,   612,   450,   451,   452,   453,   454,     0,     0,\n-     455,   456,   457,    39,   458,   459,   460,   461,     0,   462,\n-     463,   464,   465,   466,   613,  1023,     0,   469,   470,   471,\n-     472,   473,   474,   475,     0,     0,   476,     0,    43,   477,\n+     455,   456,   457,     0,   458,   459,   460,   461,     0,   462,\n+     463,   464,   465,   466,   467,  1029,     0,   469,   470,   471,\n+     472,   473,   474,   475,     0,     0,   476,     0,     0,   477,\n      478,   479,   480,   481,   482,   483,   484,   485,   486,   487,\n      488,   489,   490,   491,   492,   493,   494,   495,   496,   497,\n-       0,     0,    44,     0,     0,     0,   109,   985,   629,   986,\n-     987,   988,   989,   990,  1028,     0,  1029,     0,     0,     0,\n-       0,  1030,  1031,  1032,  1033,   110,   111,   112,   113,   114,\n-     115,   116,   117,  1625,   118,   119,   120,     0,     0,     0,\n-       0,     0,   991,     0,     0,   121,   122,   123,     0,   124,\n-     125,   126,   127,   128,   129,   130,   131,   992,   133,   993,\n-     994,     0,   136,   137,   138,   139,   140,   141,   995,   599,\n-     142,   143,   996,   997,   146,     0,   147,   148,   149,   150,\n-     600,     0,   601,     0,   998,   154,   155,   156,   157,   158,\n-     159,   160,   161,   162,     0,   163,   164,   165,   166,   167,\n-     168,     0,   169,   170,   171,   172,   173,   174,   175,   176,\n-     177,   178,   179,   999,  1000,   182,  1001,   183,     0,   184,\n-     185,   186,   187,   188,   189,     0,   190,   191,   192,   193,\n-     194,     0,     0,   195,   196,   761,   198,   199,     0,   200,\n-     201,   202,     0,   203,   204,   205,     0,   206,   207,   208,\n-     209,  1002,   211,   212,   213,   214,   215,   602,  1003,   217,\n-       0,   218,   219,  1004,   221,     0,   222,     0,   223,   224,\n-       0,   225,   226,   227,   228,   229,   230,     0,   231,     0,\n-    1005,  1006,   234,     0,   235,   236,   237,   238,   239,   240,\n-     241,   242,   243,   244,   245,   246,     0,   247,   248,   249,\n-     250,   251,   252,   253,     0,   254,   255,   256,   257,   258,\n-     259,   260,   261,  1007,  1008,     0,  1009,     0,   265,   266,\n-     267,   268,   269,   270,   271,   272,   273,   274,   275,     0,\n-       0,   276,   277,   278,   279,     0,   280,   281,   282,   283,\n-     284,   285,   286,   287,  1010,   289,   290,   291,   292,   293,\n-     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,\n-     304,   305,   306,  1011,   308,  1012,   310,   311,   312,   313,\n-    1013,   314,   315,   316,   317,  1014,   604,   319,  1015,   321,\n-     322,   323,     0,   324,   325,     0,     0,  1016,   327,   328,\n-       0,     0,   329,   330,   331,   332,   333,   606,   335,   336,\n-     337,   338,   339,   340,   341,   342,   343,   344,     0,     0,\n-       0,     0,   345,   346,   607,   348,   349,   350,   351,   352,\n-     353,   354,     0,   355,   356,   357,   358,   359,   360,     0,\n-     361,   362,   363,  1017,   365,   366,   367,   368,     0,   369,\n-     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,\n-     380,   381,     0,   382,   383,   384,   385,   386,   387,  1018,\n-     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,\n-     399,     0,     0,   400,   401,   402,   403,   404,   405,   406,\n-     407,   408,   409,   410,   411,   412,  1019,   414,     0,   415,\n-     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,\n-     426,   427,   428,   609,   430,     0,   431,   432,     0,   433,\n-     434,   435,   436,   437,   438,   439,     0,  1020,  1021,     0,\n-       0,   442,   443,   610,   445,   611,  1022,   447,   448,   612,\n-     450,   451,   452,   453,   454,     0,     0,   455,   456,   457,\n-       0,   458,   459,   460,   461,     0,   462,   463,   464,   465,\n-     466,   467,  1023,     0,   469,   470,   471,   472,   473,   474,\n-     475,     0,     0,   476,     0,     0,   477,   478,   479,   480,\n-     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,\n-     491,   492,   493,   494,   495,   496,   497,  1024,     0,     0,\n-       0,     0,     0,     0,  1025,  1026,  1027,     0,     0,     0,\n-       0,  1028,     0,  1029,     0,     0,     0,     0,  1030,  1031,\n-    1032,  1033,   109,  1640,   629,   986,   987,   988,  1641,   990,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,   110,   111,   112,   113,   114,   115,   116,   117,  1642,\n-     118,   119,   120,     0,     0,     0,     0,     0,   991,     0,\n-       0,   121,   122,   123,     0,   124,   125,   126,   127,   128,\n-     129,   130,   131,   992,   133,   993,   994,     0,   136,   137,\n-     138,   139,   140,   141,   995,   599,   142,   143,   996,   997,\n-     146,     0,   147,   148,   149,   150,   600,     0,   601,     0,\n-     998,   154,   155,   156,   157,   158,   159,   160,   161,   162,\n-       0,   163,   164,   165,   166,   167,   168,     0,   169,   170,\n-     171,   172,   173,   174,   175,   176,   177,   178,   179,   999,\n-    1000,   182,  1001,   183,     0,   184,   185,   186,   187,   188,\n-     189,     0,   190,   191,   192,   193,   194,     0,     0,   195,\n-     196,   761,   198,   199,     0,   200,   201,   202,     0,   203,\n-     204,   205,     0,   206,   207,   208,   209,  1002,   211,   212,\n-     213,   214,   215,   602,  1003,   217,     0,   218,   219,  1004,\n-     221,     0,   222,     0,   223,   224,     0,   225,   226,   227,\n-     228,   229,   230,     0,   231,     0,  1005,  1006,   234,     0,\n-     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,\n-     245,   246,     0,   247,   248,   249,   250,   251,   252,   253,\n-       0,   254,   255,   256,   257,   258,   259,   260,   261,  1007,\n-    1008,     0,  1009,     0,   265,   266,   267,   268,   269,   270,\n-     271,   272,   273,   274,   275,     0,     0,   276,   277,   278,\n-     279,     0,   280,   281,   282,   283,   284,   285,   286,   287,\n-    1010,   289,   290,   291,   292,   293,   294,   295,   296,   297,\n-     298,   299,   300,   301,   302,   303,   304,   305,   306,  1011,\n-     308,  1012,   310,   311,   312,   313,  1013,   314,   315,   316,\n-     317,  1014,   604,   319,  1015,   321,   322,   323,     0,   324,\n-     325,     0,     0,  1016,   327,   328,     0,     0,   329,   330,\n-     331,   332,   333,   606,   335,   336,   337,   338,   339,   340,\n-     341,   342,   343,   344,     0,     0,     0,     0,   345,   346,\n-     607,   348,   349,   350,   351,   352,   353,   354,     0,   355,\n-     356,   357,   358,   359,   360,     0,   361,   362,   363,  1017,\n-     365,   366,   367,   368,     0,   369,   370,   371,   372,   373,\n-     374,   375,   376,   377,   378,   379,   380,   381,     0,   382,\n-     383,   384,   385,   386,   387,  1018,   389,   390,   391,   392,\n-     393,   394,   395,   396,   397,   398,   399,     0,     0,   400,\n-     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,\n-     411,   412,  1019,   414,     0,   415,   416,   417,   418,   419,\n-     420,   421,   422,   423,   424,   425,   426,   427,   428,   609,\n-     430,     0,   431,   432,     0,   433,   434,   435,   436,   437,\n-     438,   439,     0,  1020,  1021,     0,     0,   442,   443,   610,\n-     445,   611,  1022,   447,   448,   612,   450,   451,   452,   453,\n-     454,     0,     0,   455,   456,   457,     0,   458,   459,   460,\n-     461,     0,   462,   463,   464,   465,   466,   467,  1023,     0,\n-     469,   470,   471,   472,   473,   474,   475,     0,     0,   476,\n-       0,     0,   477,   478,   479,   480,   481,   482,   483,   484,\n-     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,\n-     495,   496,   497,  1024,     0,     0,     0,     0,     0,     0,\n-    1025,  1026,  1027,     0,     0,     0,     0,  1028,     0,  1029,\n-       0,     0,     0,     0,  1030,  1031,  1032,  1033,   109,   985,\n-     629,   986,   987,   988,   989,   990,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,   110,   111,   112,\n-     113,   114,   115,   116,   117,     0,   118,   119,   120,     0,\n-       0,     0,     0,     0,   991,     0,     0,   121,   122,   123,\n-       0,   124,   125,   126,   127,   128,   129,   130,   131,   992,\n-     133,   993,   994,     0,   136,   137,   138,   139,   140,   141,\n-     995,   599,   142,   143,   996,   997,   146,     0,   147,   148,\n-     149,   150,   600,     0,   601,     0,   998,   154,   155,   156,\n-     157,   158,   159,   160,   161,   162,     0,   163,   164,   165,\n-     166,   167,   168,     0,   169,   170,   171,   172,   173,   174,\n-     175,   176,   177,   178,   179,   999,  1000,   182,  1001,   183,\n-       0,   184,   185,   186,   187,   188,   189,     0,   190,   191,\n-     192,   193,   194,     0,     0,   195,   196,   761,   198,   199,\n-       0,   200,   201,   202,     0,   203,   204,   205,     0,   206,\n-     207,   208,   209,  1002,   211,   212,   213,   214,   215,   602,\n-    1003,   217,     0,   218,   219,  1004,   221,     0,   222,     0,\n-     223,   224,  1451,   225,   226,   227,   228,   229,   230,     0,\n-     231,     0,  1005,  1006,   234,     0,   235,   236,   237,   238,\n-     239,   240,   241,   242,   243,   244,   245,   246,     0,   247,\n-     248,   249,   250,   251,   252,   253,     0,   254,   255,   256,\n-     257,   258,   259,   260,   261,  1007,  1008,     0,  1009,     0,\n-     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,\n-     275,     0,     0,   276,   277,   278,   279,     0,   280,   281,\n-     282,   283,   284,   285,   286,   287,  1010,   289,   290,   291,\n-     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,\n-     302,   303,   304,   305,   306,  1011,   308,  1012,   310,   311,\n-     312,   313,  1013,   314,   315,   316,   317,  1014,   604,   319,\n-    1015,   321,   322,   323,     0,   324,   325,     0,     0,  1016,\n-     327,   328,     0,     0,   329,   330,   331,   332,   333,   606,\n-     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,\n-       0,     0,     0,     0,   345,   346,   607,   348,   349,   350,\n-     351,   352,   353,   354,     0,   355,   356,   357,   358,   359,\n-     360,     0,   361,   362,   363,  1017,   365,   366,   367,   368,\n-       0,   369,   370,   371,   372,   373,   374,   375,   376,   377,\n-     378,   379,   380,   381,     0,   382,   383,   384,   385,   386,\n-     387,  1018,   389,   390,   391,   392,   393,   394,   395,   396,\n-     397,   398,   399,     0,     0,   400,   401,   402,   403,   404,\n-     405,   406,   407,   408,   409,   410,   411,   412,  1019,   414,\n-       0,   415,   416,   417,   418,   419,   420,   421,   422,   423,\n-     424,   425,   426,   427,   428,   609,   430,     0,   431,   432,\n-       0,   433,   434,   435,   436,   437,   438,   439,     0,  1020,\n-    1021,     0,     0,   442,   443,   610,   445,   611,  1022,   447,\n-     448,   612,   450,   451,   452,   453,   454,     0,     0,   455,\n-     456,   457,     0,   458,   459,   460,   461,     0,   462,   463,\n-     464,   465,   466,   467,  1023,     0,   469,   470,   471,   472,\n-     473,   474,   475,     0,     0,   476,     0,     0,   477,   478,\n-     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,\n-     489,   490,   491,   492,   493,   494,   495,   496,   497,  1024,\n-       0,     0,     0,     0,     0,     0,  1025,  1026,  1027,     0,\n-       0,     0,     0,  1028,     0,  1029,     0,     0,     0,     0,\n-    1030,  1031,  1032,  1033,   109,   985,   629,   986,   987,   988,\n-     989,   990,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,   110,   111,   112,   113,   114,   115,   116,\n-     117,     0,   118,   119,   120,     0,     0,     0,     0,     0,\n-     991,     0,     0,   121,   122,   123,     0,   124,   125,   126,\n-     127,   128,   129,   130,   131,   992,   133,   993,   994,     0,\n-     136,   137,   138,   139,   140,   141,   995,   599,   142,   143,\n-     996,   997,   146,     0,   147,   148,   149,   150,   600,     0,\n-     601,     0,   998,   154,   155,   156,   157,   158,   159,   160,\n-     161,   162,     0,   163,   164,   165,   166,   167,   168,     0,\n-     169,   170,   171,   172,   173,   174,   175,   176,   177,   178,\n-     179,   999,  1000,   182,  1001,   183,     0,   184,   185,   186,\n-     187,   188,   189,     0,   190,   191,   192,   193,   194,     0,\n-       0,   195,   196,   761,   198,   199,     0,   200,   201,   202,\n-       0,   203,   204,   205,     0,   206,   207,   208,   209,  1002,\n-     211,   212,   213,   214,   215,   602,  1003,   217,     0,   218,\n-     219,  1004,   221,     0,   222,     0,   223,   224,     0,   225,\n-     226,   227,   228,   229,   230,     0,   231,     0,  1005,  1006,\n-     234,     0,   235,   236,   237,   238,   239,   240,   241,   242,\n-     243,   244,   245,   246,     0,   247,   248,   249,   250,   251,\n-     252,   253,     0,   254,   255,   256,   257,   258,   259,   260,\n-     261,  1007,  1008,     0,  1009,     0,   265,   266,   267,   268,\n-     269,   270,   271,   272,   273,   274,   275,     0,     0,   276,\n-     277,   278,   279,     0,   280,   281,   282,   283,   284,   285,\n-     286,   287,  1010,   289,   290,   291,   292,   293,   294,   295,\n-     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,\n-     306,  1011,   308,  1012,   310,   311,   312,   313,  1013,   314,\n-     315,   316,   317,  1014,   604,   319,  1015,   321,   322,   323,\n-       0,   324,   325,     0,     0,  1016,   327,   328,     0,     0,\n-     329,   330,   331,   332,   333,   606,   335,   336,   337,   338,\n-     339,   340,   341,   342,   343,   344,     0,     0,     0,     0,\n-     345,   346,   607,   348,   349,   350,   351,   352,   353,   354,\n-       0,   355,   356,   357,   358,   359,   360,     0,   361,   362,\n-     363,  1017,   365,   366,   367,   368,     0,   369,   370,   371,\n-     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,\n-       0,   382,   383,   384,   385,   386,   387,  1018,   389,   390,\n-     391,   392,   393,   394,   395,   396,   397,   398,   399,     0,\n-       0,   400,   401,   402,   403,   404,   405,   406,   407,   408,\n-     409,   410,   411,   412,  1019,   414,     0,   415,   416,   417,\n-     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,\n-     428,   609,   430,     0,   431,   432,     0,   433,   434,   435,\n-     436,   437,   438,   439,     0,  1020,  1021,     0,     0,   442,\n-     443,   610,   445,   611,  1022,   447,   448,   612,   450,   451,\n-     452,   453,   454,     0,     0,   455,   456,   457,     0,   458,\n-     459,   460,   461,     0,   462,   463,   464,   465,   466,   467,\n-    1023,     0,   469,   470,   471,   472,   473,   474,   475,     0,\n-       0,   476,     0,     0,   477,   478,   479,   480,   481,   482,\n-     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,\n-     493,   494,   495,   496,   497,  1024,     0,     0,     0,     0,\n-       0,     0,  1025,  1026,  1027,     0,     0,     0,     0,  1028,\n-       0,  1029,  1969,     0,     0,     0,  1030,  1031,  1032,  1033,\n-     109,   985,   629,   986,   987,   988,   989,   990,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,   110,\n-     111,   112,   113,   114,   115,   116,   117,     0,   118,   119,\n-     120,     0,     0,     0,     0,     0,   991,     0,     0,   121,\n-     122,   123,     0,   124,   125,   126,   127,   128,   129,   130,\n-     131,   992,   133,   993,   994,     0,   136,   137,   138,   139,\n-     140,   141,   995,   599,   142,   143,   996,   997,   146,     0,\n-     147,   148,   149,   150,   600,     0,   601,     0,   998,   154,\n-     155,   156,   157,   158,   159,   160,   161,   162,     0,   163,\n-     164,   165,   166,   167,   168,     0,   169,   170,   171,   172,\n-     173,   174,   175,   176,   177,   178,   179,   999,  1000,   182,\n-    1001,   183,     0,   184,   185,   186,   187,   188,   189,     0,\n-     190,   191,   192,   193,   194,     0,     0,   195,   196,   761,\n-     198,   199,     0,   200,   201,   202,     0,   203,   204,   205,\n-       0,   206,   207,   208,   209,  1002,   211,   212,   213,   214,\n-     215,   602,  1003,   217,     0,   218,   219,  1004,   221,     0,\n-     222,     0,   223,   224,     0,   225,   226,   227,   228,   229,\n-     230,     0,   231,     0,  1005,  1006,   234,     0,   235,   236,\n-     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,\n-       0,   247,   248,   249,   250,   251,   252,   253,     0,   254,\n-     255,   256,   257,   258,   259,   260,   261,  1007,  1008,     0,\n-    1009,     0,   265,   266,   267,   268,   269,   270,   271,   272,\n-     273,   274,   275,     0,     0,   276,   277,   278,   279,     0,\n-     280,   281,   282,   283,   284,   285,   286,   287,  1010,   289,\n-     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,\n-     300,   301,   302,   303,   304,   305,   306,  1011,   308,  1012,\n-     310,   311,   312,   313,  1013,   314,   315,   316,   317,  1014,\n-     604,   319,  1015,   321,   322,   323,     0,   324,   325,     0,\n-       0,  1016,   327,   328,     0,     0,   329,   330,   331,   332,\n-     333,   606,   335,   336,   337,   338,   339,   340,   341,   342,\n-     343,   344,     0,     0,     0,     0,   345,   346,   607,   348,\n-     349,   350,   351,   352,   353,   354,     0,   355,   356,   357,\n-     358,   359,   360,     0,   361,   362,   363,  1017,   365,   366,\n-     367,   368,     0,   369,   370,   371,   372,   373,   374,   375,\n-     376,   377,   378,   379,   380,   381,     0,   382,   383,   384,\n-     385,   386,   387,  1018,   389,   390,   391,   392,   393,   394,\n-     395,   396,   397,   398,   399,     0,     0,   400,   401,   402,\n-     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,\n-    1019,   414,     0,   415,   416,   417,   418,   419,   420,   421,\n-     422,   423,   424,   425,   426,   427,   428,   609,   430,     0,\n-     431,   432,  2565,   433,   434,   435,   436,   437,   438,   439,\n-       0,  1020,  1021,     0,     0,   442,   443,   610,   445,   611,\n-    1022,   447,   448,   612,   450,   451,   452,   453,   454,     0,\n-       0,   455,   456,   457,     0,   458,   459,   460,   461,     0,\n-     462,   463,   464,   465,   466,   467,  1023,     0,   469,   470,\n-     471,   472,   473,   474,   475,     0,     0,   476,     0,     0,\n-     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,\n-     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,\n-     497,  1024,     0,     0,     0,     0,     0,     0,  1025,  1026,\n-    1027,     0,     0,     0,     0,  1028,     0,  1029,     0,     0,\n-       0,     0,  1030,  1031,  1032,  1033,   109,   985,   629,   986,\n-     987,   988,   989,   990,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,   110,   111,   112,   113,   114,\n-     115,   116,   117,     0,   118,   119,   120,     0,     0,     0,\n-       0,     0,   991,     0,     0,   121,   122,   123,     0,   124,\n-     125,   126,   127,   128,   129,   130,   131,   992,   133,   993,\n-     994,     0,   136,   137,   138,   139,   140,   141,   995,   599,\n-     142,   143,   996,   997,   146,     0,   147,   148,   149,   150,\n-     600,     0,   601,     0,   998,   154,   155,   156,   157,   158,\n-     159,   160,   161,   162,     0,   163,   164,   165,   166,   167,\n-     168,     0,   169,   170,   171,   172,   173,   174,   175,   176,\n-     177,   178,   179,   999,  1000,   182,  1001,   183,     0,   184,\n-     185,   186,   187,   188,   189,     0,   190,   191,   192,   193,\n-     194,     0,     0,   195,   196,   761,   198,   199,     0,   200,\n-     201,   202,     0,   203,   204,   205,     0,   206,   207,   208,\n-     209,  1002,   211,   212,   213,   214,   215,   602,  1003,   217,\n-       0,   218,   219,  1004,   221,     0,   222,     0,   223,   224,\n-       0,   225,   226,   227,   228,   229,   230,     0,   231,     0,\n-    1005,  1006,   234,     0,   235,   236,   237,   238,   239,   240,\n-     241,   242,   243,   244,   245,   246,     0,   247,   248,   249,\n-     250,   251,   252,   253,     0,   254,   255,   256,   257,   258,\n-     259,   260,   261,  1007,  1008,     0,  1009,     0,   265,   266,\n-     267,   268,   269,   270,   271,   272,   273,   274,   275,     0,\n-       0,   276,   277,   278,   279,     0,   280,   281,   282,   283,\n-     284,   285,   286,   287,  1010,   289,   290,   291,   292,   293,\n-     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,\n-     304,   305,   306,  1011,   308,  1012,   310,   311,   312,   313,\n-    1013,   314,   315,   316,   317,  1014,   604,   319,  1015,   321,\n-     322,   323,     0,   324,   325,     0,     0,  1016,   327,   328,\n-       0,     0,   329,   330,   331,   332,   333,   606,   335,   336,\n-     337,   338,   339,   340,   341,   342,   343,   344,     0,     0,\n-       0,     0,   345,   346,   607,   348,   349,   350,   351,   352,\n-     353,   354,     0,   355,   356,   357,   358,   359,   360,     0,\n-     361,   362,   363,  1017,   365,   366,   367,   368,     0,   369,\n-     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,\n-     380,   381,     0,   382,   383,   384,   385,   386,   387,  1018,\n-     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,\n-     399,     0,     0,   400,   401,   402,   403,   404,   405,   406,\n-     407,   408,   409,   410,   411,   412,  1019,   414,     0,   415,\n-     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,\n-     426,   427,   428,   609,   430,     0,   431,   432,     0,   433,\n-     434,   435,   436,   437,   438,   439,     0,  1020,  1021,     0,\n-       0,   442,   443,   610,   445,   611,  1022,   447,   448,   612,\n-     450,   451,   452,   453,   454,     0,     0,   455,   456,   457,\n-       0,   458,   459,   460,   461,     0,   462,   463,   464,   465,\n-     466,   467,  1023,     0,   469,   470,   471,   472,   473,   474,\n-     475,     0,  2673,   476,     0,     0,   477,   478,   479,   480,\n-     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,\n-     491,   492,   493,   494,   495,   496,   497,  1024,     0,     0,\n-       0,     0,     0,     0,  1025,  1026,  1027,     0,     0,     0,\n-       0,  1028,     0,  1029,     0,     0,     0,     0,  1030,  1031,\n-    1032,  1033,   109,   985,   629,   986,   987,   988,   989,   990,\n+    1030,     0,     0,     0,     0,     0,     0,  1031,  1032,  1033,\n+       0,     0,     0,     0,  1034,     0,  1035,     0,     0,     0,\n+       0,  1036,  1037,  1038,  1039,   109,   991,   629,   992,   993,\n+     994,   995,   996,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,   110,   111,   112,   113,   114,   115,\n+     116,   117,     0,   118,   119,   120,     0,     0,     0,     0,\n+       0,   997,     0,     0,   121,   122,   123,     0,   124,   125,\n+     126,   127,   128,   129,   130,   131,   998,   133,   999,  1000,\n+       0,   136,   137,   138,   139,   140,   141,  1001,   599,   142,\n+     143,  1002,  1003,   146,     0,   147,   148,   149,   150,   600,\n+       0,   601,     0,  1004,   154,   155,   156,   157,   158,   159,\n+     160,   161,   162,     0,   163,   164,   165,   166,   167,   168,\n+       0,   169,   170,   171,   172,   173,   174,   175,   176,   177,\n+     178,   179,  1005,  1006,   182,  1007,   183,     0,   184,   185,\n+     186,   187,   188,   189,     0,   190,   191,   192,   193,   194,\n+       0,     0,   195,   196,   764,   198,   199,     0,   200,   201,\n+     202,     0,   203,   204,   205,     0,   206,   207,   208,   209,\n+    1008,   211,   212,   213,   214,   215,   602,  1009,   217,     0,\n+     218,   219,  1010,   221,     0,   222,     0,   223,   224,     0,\n+     225,   226,   227,   228,   229,   230,     0,   231,     0,  1011,\n+    1012,   234,     0,   235,   236,   237,   238,   239,   240,   241,\n+     242,   243,   244,   245,   246,     0,   247,   248,   249,   250,\n+     251,   252,   253,     0,   254,   255,   256,   257,   258,   259,\n+     260,   261,  1013,  1014,     0,  1015,     0,   265,   266,   267,\n+     268,   269,   270,   271,   272,   273,   274,   275,     0,     0,\n+     276,   277,   278,   279,     0,   280,   281,   282,   283,   284,\n+     285,   286,   287,  1016,   289,   290,   291,   292,   293,   294,\n+     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,\n+     305,   306,  1017,   308,  1018,   310,   311,   312,   313,  1019,\n+     314,   315,   316,   317,  1020,   604,   319,  1021,   321,   322,\n+     323,     0,   324,   325,     0,     0,  1022,   327,   328,     0,\n+       0,   329,   330,   331,   332,   333,   606,   335,   336,   337,\n+     338,   339,   340,   341,   342,   343,   344,     0,     0,     0,\n+       0,   345,   346,   607,   348,   349,   350,   351,   352,   353,\n+     354,     0,   355,   356,   357,   358,   359,   360,     0,   361,\n+     362,   363,  1023,   365,   366,   367,   368,     0,   369,   370,\n+     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,\n+     381,     0,   382,   383,   384,   385,   386,   387,  1024,   389,\n+     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,\n+       0,     0,   400,   401,   402,   403,   404,   405,   406,   407,\n+     408,   409,   410,   411,   412,  1025,   414,     0,   415,   416,\n+     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,\n+     427,   428,   609,   430,     0,   431,   432,     0,   433,   434,\n+     435,   436,   437,   438,   439,     0,  1026,  1027,     0,     0,\n+     442,   443,   610,   445,   611,  1028,   447,   448,   612,   450,\n+     451,   452,   453,   454,     0,     0,   455,   456,   457,     0,\n+     458,   459,   460,   461,     0,   462,   463,   464,   465,   466,\n+     467,  1029,     0,   469,   470,   471,   472,   473,   474,   475,\n+       0,     0,   476,     0,     0,   477,   478,   479,   480,   481,\n+     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,\n+     492,   493,   494,   495,   496,   497,  1030,     0,     0,     0,\n+       0,     0,     0,  1652,  1653,  1033,     0,     0,     0,     0,\n+    1034,     0,  1035,     0,     0,     0,     0,  1036,  1037,  1038,\n+    1039,   109,  2108,   629,   992,   993,   994,   995,   996,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,   110,   111,   112,   113,   114,   115,   116,   117,  2881,\n-     118,   119,   120,     0,     0,     0,     0,     0,   991,     0,\n-       0,   121,   122,   123,     0,   124,   125,   126,   127,   128,\n-     129,   130,   131,   992,   133,   993,   994,     0,   136,   137,\n-     138,   139,   140,   141,   995,   599,   142,   143,   996,   997,\n-     146,     0,   147,   148,   149,   150,   600,     0,   601,     0,\n-     998,   154,   155,   156,   157,   158,   159,   160,   161,   162,\n-       0,   163,   164,   165,   166,   167,   168,     0,   169,   170,\n-    2882,   172,   173,   174,   175,   176,   177,   178,   179,   999,\n-    1000,   182,  1001,   183,     0,   184,   185,   186,   187,   188,\n-     189,     0,   190,   191,   192,   193,   194,     0,     0,   195,\n-     196,   761,   198,   199,     0,   200,   201,   202,     0,   203,\n-     204,   205,     0,   206,   207,   208,   209,  1002,   211,   212,\n-     213,   214,   215,   602,  1003,   217,     0,   218,   219,  1004,\n-     221,     0,   222,     0,   223,   224,     0,   225,   226,   227,\n-     228,   229,   230,     0,   231,     0,  2883,  1006,   234,     0,\n-     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,\n-     245,   246,     0,   247,   248,   249,   250,   251,   252,   253,\n-       0,   254,   255,   256,   257,   258,   259,   260,   261,  1007,\n-    1008,     0,  1009,     0,   265,   266,   267,   268,   269,   270,\n-     271,   272,   273,   274,   275,     0,     0,   276,   277,   278,\n-     279,     0,   280,   281,   282,   283,   284,   285,   286,   287,\n-    1010,   289,   290,   291,   292,   293,   294,   295,   296,   297,\n-     298,   299,   300,   301,   302,   303,   304,   305,   306,  1011,\n-     308,  1012,   310,   311,   312,   313,  1013,   314,   315,   316,\n-     317,  1014,   604,   319,  1015,   321,   322,   323,     0,   324,\n-     325,     0,     0,  1016,   327,   328,     0,     0,   329,   330,\n-     331,   332,   333,   606,   335,   336,   337,   338,   339,   340,\n-     341,   342,   343,   344,     0,     0,     0,     0,   345,   346,\n-     607,   348,   349,   350,   351,   352,   353,   354,     0,   355,\n-     356,   357,   358,   359,   360,     0,   361,   362,   363,  1017,\n-     365,   366,   367,   368,     0,   369,   370,   371,   372,   373,\n-     374,   375,   376,   377,   378,   379,   380,   381,     0,   382,\n-     383,   384,   385,   386,  2884,  1018,   389,   390,   391,   392,\n-     393,   394,   395,   396,   397,   398,   399,     0,     0,   400,\n-     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,\n-     411,   412,  1019,   414,     0,   415,   416,   417,   418,   419,\n-     420,   421,   422,   423,   424,   425,   426,   427,   428,   609,\n-     430,     0,   431,   432,     0,   433,   434,   435,   436,   437,\n-     438,   439,     0,  1020,  1021,     0,     0,   442,   443,   610,\n-     445,   611,  1022,   447,   448,   612,   450,   451,   452,   453,\n-     454,     0,     0,   455,   456,   457,     0,   458,   459,   460,\n-     461,     0,   462,   463,   464,   465,   466,   467,  1023,     0,\n-     469,   470,   471,   472,   473,   474,   475,     0,     0,   476,\n-       0,     0,   477,   478,   479,   480,   481,   482,   483,   484,\n-     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,\n-     495,   496,   497,  1024,     0,     0,     0,     0,     0,     0,\n-    1025,  1026,  1027,     0,     0,     0,     0,  1028,     0,  2885,\n-       0,     0,     0,     0,  1030,  1031,  1032,  1033,   109,   985,\n-     629,   986,   987,   988,   989,   990,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,   110,   111,   112,\n-     113,   114,   115,   116,   117,     0,   118,   119,   120,     0,\n-       0,     0,     0,     0,   991,     0,     0,   121,   122,   123,\n-       0,   124,   125,   126,   127,   128,   129,   130,   131,   992,\n-     133,   993,   994,     0,   136,   137,   138,   139,   140,   141,\n-     995,   599,   142,   143,   996,   997,   146,     0,   147,   148,\n-     149,   150,   600,     0,   601,     0,   998,   154,   155,   156,\n-     157,   158,   159,   160,   161,   162,     0,   163,   164,   165,\n-     166,   167,   168,     0,   169,   170,   171,   172,   173,   174,\n-     175,   176,   177,   178,   179,   999,  1000,   182,  1001,   183,\n-       0,   184,   185,   186,   187,   188,   189,     0,   190,   191,\n-     192,   193,   194,     0,     0,   195,   196,   761,   198,   199,\n-       0,   200,   201,   202,     0,   203,   204,   205,     0,   206,\n-     207,   208,   209,  1002,   211,   212,   213,   214,   215,   602,\n-    1003,   217,     0,   218,   219,  1004,   221,     0,   222,     0,\n-     223,   224,     0,   225,   226,   227,   228,   229,   230,     0,\n-     231,     0,  1005,  1006,   234,     0,   235,   236,   237,   238,\n-     239,   240,   241,   242,   243,   244,   245,   246,     0,   247,\n-     248,   249,   250,   251,   252,   253,     0,   254,   255,   256,\n-     257,   258,   259,   260,   261,  1007,  1008,     0,  1009,     0,\n-     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,\n-     275,     0,     0,   276,   277,   278,   279,     0,   280,   281,\n-     282,   283,   284,   285,   286,   287,  1010,   289,   290,   291,\n-     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,\n-     302,   303,   304,   305,   306,  1011,   308,  1012,   310,   311,\n-     312,   313,  1013,   314,   315,   316,   317,  1014,   604,   319,\n-    1015,   321,   322,   323,     0,   324,   325,     0,     0,  1016,\n-     327,   328,     0,     0,   329,   330,   331,   332,   333,   606,\n-     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,\n-       0,     0,     0,     0,   345,   346,   607,   348,   349,   350,\n-     351,   352,   353,   354,     0,   355,   356,   357,   358,   359,\n-     360,     0,   361,   362,   363,  1017,   365,   366,   367,   368,\n-       0,   369,   370,   371,   372,   373,   374,   375,   376,   377,\n-     378,   379,   380,   381,     0,   382,   383,   384,   385,   386,\n-     387,  1018,   389,   390,   391,   392,   393,   394,   395,   396,\n-     397,   398,   399,     0,     0,   400,   401,   402,   403,   404,\n-     405,   406,   407,   408,   409,   410,   411,   412,  1019,   414,\n-       0,   415,   416,   417,   418,   419,   420,   421,   422,   423,\n-     424,   425,   426,   427,   428,   609,   430,     0,   431,   432,\n-    3018,   433,   434,   435,   436,   437,   438,   439,     0,  1020,\n-    1021,     0,     0,   442,   443,   610,   445,   611,  1022,   447,\n-     448,   612,   450,   451,   452,   453,   454,     0,     0,   455,\n-     456,   457,     0,   458,   459,   460,   461,     0,   462,   463,\n-     464,   465,   466,   467,  1023,     0,   469,   470,   471,   472,\n-     473,   474,   475,     0,     0,   476,     0,     0,   477,   478,\n-     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,\n-     489,   490,   491,   492,   493,   494,   495,   496,   497,  1024,\n-       0,     0,     0,     0,     0,     0,  1025,  1026,  1027,     0,\n-       0,     0,     0,  1028,     0,  1029,     0,     0,     0,     0,\n-    1030,  1031,  1032,  1033,   109,   985,   629,   986,   987,   988,\n-     989,   990,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,   110,   111,   112,   113,   114,   115,   116,\n-     117,     0,   118,   119,   120,     0,     0,     0,     0,     0,\n-     991,     0,     0,   121,   122,   123,     0,   124,   125,   126,\n-     127,   128,   129,   130,   131,   992,   133,   993,   994,     0,\n-     136,   137,   138,   139,   140,   141,   995,   599,   142,   143,\n-     996,   997,   146,     0,   147,   148,   149,   150,   600,     0,\n-     601,     0,   998,   154,   155,   156,   157,   158,   159,   160,\n-     161,   162,     0,   163,   164,   165,   166,   167,   168,     0,\n-     169,   170,   171,   172,   173,   174,   175,   176,   177,   178,\n-     179,   999,  1000,   182,  1001,   183,     0,   184,   185,   186,\n-     187,   188,   189,     0,   190,   191,   192,   193,   194,     0,\n-       0,   195,   196,   761,   198,   199,     0,   200,   201,   202,\n-       0,   203,   204,   205,     0,   206,   207,   208,   209,  1002,\n-     211,   212,   213,   214,   215,   602,  1003,   217,     0,   218,\n-     219,  1004,   221,     0,   222,     0,   223,   224,     0,   225,\n-     226,   227,   228,   229,   230,     0,   231,     0,  1005,  1006,\n-     234,     0,   235,   236,   237,   238,   239,   240,   241,   242,\n-     243,   244,   245,   246,     0,   247,   248,   249,   250,   251,\n-     252,   253,     0,   254,   255,   256,   257,   258,   259,   260,\n-     261,  1007,  1008,     0,  1009,     0,   265,   266,   267,   268,\n-     269,   270,   271,   272,   273,   274,   275,     0,     0,   276,\n-     277,   278,   279,     0,   280,   281,   282,   283,   284,   285,\n-     286,   287,  1010,   289,   290,   291,   292,   293,   294,   295,\n-     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,\n-     306,  1011,   308,  1012,   310,   311,   312,   313,  1013,   314,\n-     315,   316,   317,  1014,   604,   319,  1015,   321,   322,   323,\n-       0,   324,   325,     0,     0,  1016,   327,   328,     0,     0,\n-     329,   330,   331,   332,   333,   606,   335,   336,   337,   338,\n+     110,   111,   112,   113,   114,   115,   116,   117,     0,   118,\n+     119,   120,     0,     0,     0,     0,     0,   997,     0,     0,\n+     121,   122,   123,     0,   124,   125,   126,   127,   128,   129,\n+     130,   131,   998,   133,   999,  1000,     0,   136,   137,   138,\n+     139,   140,   141,  1001,   599,   142,   143,  1002,  1003,   146,\n+       0,   147,   148,   149,   150,   600,     0,   601,     0,  1004,\n+     154,   155,   156,   157,   158,   159,   160,   161,   162,     0,\n+     163,   164,   165,   166,   167,   168,     0,   169,   170,   171,\n+     172,   173,   174,   175,   176,   177,   178,   179,  1005,  1006,\n+     182,  1007,   183,     0,   184,   185,   186,   187,   188,   189,\n+       0,   190,   191,   192,   193,   194,     0,     0,   195,   196,\n+     764,   198,   199,     0,   200,   201,   202,     0,   203,   204,\n+     205,     0,   206,   207,   208,   209,  1008,   211,   212,   213,\n+     214,   215,   602,  1009,   217,     0,   218,   219,  1010,   221,\n+       0,   222,     0,   223,   224,     0,   225,   226,   227,   228,\n+     229,   230,     0,   231,     0,  1011,  1012,   234,     0,   235,\n+     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,\n+     246,     0,   247,   248,   249,   250,   251,   252,   253,     0,\n+     254,   255,   256,   257,   258,   259,   260,   261,  1013,  1014,\n+       0,  1015,     0,   265,   266,   267,   268,   269,   270,   271,\n+     272,   273,   274,   275,     0,     0,   276,   277,   278,   279,\n+       0,   280,   281,   282,   283,   284,   285,   286,   287,  1016,\n+     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,\n+     299,   300,   301,   302,   303,   304,   305,   306,  1017,   308,\n+    1018,   310,   311,   312,   313,  1019,   314,   315,   316,   317,\n+    1020,   604,   319,  1021,   321,   322,   323,     0,   324,   325,\n+       0,     0,  1022,   327,   328,     0,     0,   329,   330,   331,\n+     332,   333,   606,   335,   336,   337,   338,   339,   340,   341,\n+     342,   343,   344,     0,     0,     0,     0,   345,   346,   607,\n+     348,   349,   350,   351,   352,   353,   354,     0,   355,   356,\n+     357,   358,   359,   360,     0,   361,   362,   363,  1023,   365,\n+     366,   367,   368,     0,   369,   370,   371,   372,   373,   374,\n+     375,   376,   377,   378,   379,   380,   381,     0,   382,   383,\n+     384,   385,   386,   387,  1024,   389,   390,   391,   392,   393,\n+     394,   395,   396,   397,   398,   399,     0,     0,   400,   401,\n+     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,\n+     412,  1025,   414,     0,   415,   416,   417,   418,   419,   420,\n+     421,   422,   423,   424,   425,   426,   427,   428,   609,   430,\n+       0,   431,   432,     0,   433,   434,   435,   436,   437,   438,\n+     439,     0,  1026,  1027,     0,     0,   442,   443,   610,   445,\n+     611,  1028,   447,   448,   612,   450,   451,   452,   453,   454,\n+       0,     0,   455,   456,   457,     0,   458,   459,   460,   461,\n+       0,   462,   463,   464,   465,   466,   467,  1029,     0,   469,\n+     470,   471,   472,   473,   474,   475,     0,     0,   476,     0,\n+       0,   477,   478,   479,   480,   481,   482,   483,   484,   485,\n+     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,\n+     496,   497,  1030,     0,     0,     0,     0,     0,     0,  1031,\n+    1032,  1033,     0,     0,     0,     0,  1034,     0,  1035,     0,\n+       0,     0,     0,  1036,  1037,  1038,  1039,   109,   991,   629,\n+     992,   993,   994,   995,   996,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,   110,   111,   112,   113,\n+     114,   115,   116,   117,     0,   118,   119,   120,     0,     0,\n+       0,     0,     0,   997,     0,     0,   121,   122,   123,     0,\n+     124,   125,   126,   127,   128,   129,   130,   131,   998,   133,\n+     999,  1000,     0,   136,   137,   138,   139,   140,   141,  1001,\n+     599,   142,   143,  1002,  1003,   146,     0,   147,   148,   149,\n+     150,   600,     0,   601,     0,  1004,   154,   155,   156,   157,\n+     158,   159,   160,   161,   162,     0,   163,   164,   165,   166,\n+     167,   168,     0,   169,   170,   171,   172,   173,   174,   175,\n+     176,   177,   178,   179,  1005,  1006,   182,  1007,   183,     0,\n+     184,   185,   186,   187,   188,   189,     0,   190,   191,   192,\n+     193,   194,     0,     0,   195,   196,   764,   198,   199,     0,\n+     200,   201,   202,     0,   203,   204,   205,     0,   206,   207,\n+     208,   209,  1008,   211,   212,   213,   214,   215,   602,  1009,\n+     217,     0,   218,   219,  1010,   221,     0,   222,     0,   223,\n+     224,     0,   225,   226,   227,   228,   229,   230,     0,   231,\n+       0,  1011,  1012,   234,     0,   235,   236,   237,   238,   239,\n+     240,   241,   242,   243,   244,   245,   246,     0,   247,   248,\n+     249,   250,   251,   252,   253,     0,   254,   255,   256,   257,\n+     258,   259,   260,   261,  1013,  1014,     0,  1015,     0,   265,\n+     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,\n+       0,     0,   276,   277,   278,   279,     0,   280,   281,   282,\n+     283,   284,   285,   286,   287,  1016,   289,   290,   291,   292,\n+     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,\n+     303,   304,   305,   306,  1017,   308,  1018,   310,   311,   312,\n+     313,  1019,   314,   315,   316,   317,  1020,   604,   319,  1021,\n+     321,   322,   323,     0,   324,   325,     0,     0,  1022,   327,\n+     328,     0,     0,   329,   330,   331,   332,   333,   606,   335,\n+     336,   337,   338,   339,   340,   341,   342,   343,   344,     0,\n+       0,     0,     0,   345,   346,   607,   348,   349,   350,   351,\n+     352,   353,   354,     0,   355,   356,   357,   358,   359,   360,\n+       0,   361,   362,   363,  1023,   365,   366,   367,   368,     0,\n+     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,\n+     379,   380,   381,     0,   382,   383,   384,   385,   386,   387,\n+    1024,   389,   390,   391,   392,   393,   394,   395,   396,   397,\n+     398,   399,     0,     0,   400,   401,   402,   403,   404,   405,\n+     406,   407,   408,   409,   410,   411,   412,  1025,   414,     0,\n+     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,\n+     425,   426,   427,   428,   609,   430,     0,   431,   432,     0,\n+     433,   434,   435,   436,   437,   438,   439,     0,  1026,  1027,\n+       0,     0,   442,   443,   610,   445,   611,  1028,   447,   448,\n+     612,   450,   451,   452,   453,   454,     0,     0,   455,   456,\n+     457,     0,   458,   459,   460,   461,     0,   462,   463,   464,\n+     465,   466,   467,  1029,     0,   469,   470,   471,   472,   473,\n+     474,   475,     0,     0,   476,     0,     0,   477,   478,   479,\n+     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,\n+     490,   491,   492,   493,   494,   495,   496,   497,  1030,     0,\n+       0,     0,     0,     0,     0,  1031,  1032,  1033,     0,     0,\n+       0,     0,  1034,     0,  2391,     0,     0,     0,     0,  1036,\n+    1037,  1038,  1039,   109,   991,   629,   992,   993,   994,   995,\n+     996,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,   110,   111,   112,   113,   114,   115,   116,   117,\n+       0,   118,   119,   120,     0,     0,     0,     0,     0,   997,\n+       0,     0,   121,   122,   123,     0,   124,   125,   126,   127,\n+     128,   129,   130,   131,   998,   133,   999,  1000,     0,   136,\n+     137,   138,   139,   140,   141,  1001,   599,   142,   143,  1002,\n+    1003,   146,     0,   147,   148,   149,   150,   600,     0,   601,\n+       0,  1004,   154,   155,   156,   157,   158,   159,   160,   161,\n+     162,     0,   163,   164,   165,   166,   167,   168,     0,   169,\n+     170,  2893,   172,   173,   174,   175,   176,   177,   178,   179,\n+    1005,  1006,   182,  1007,   183,     0,   184,   185,   186,   187,\n+     188,   189,     0,   190,   191,   192,   193,   194,     0,     0,\n+     195,   196,   764,   198,   199,     0,   200,   201,   202,     0,\n+     203,   204,   205,     0,   206,   207,   208,   209,  1008,   211,\n+     212,   213,   214,   215,   602,  1009,   217,     0,   218,   219,\n+    1010,   221,     0,   222,     0,   223,   224,     0,   225,   226,\n+     227,   228,   229,   230,     0,   231,     0,  2894,  1012,   234,\n+       0,   235,   236,   237,   238,   239,   240,   241,   242,   243,\n+     244,   245,   246,     0,   247,   248,   249,   250,   251,   252,\n+     253,     0,   254,   255,   256,   257,   258,   259,   260,   261,\n+    1013,  1014,     0,  1015,     0,   265,   266,   267,   268,   269,\n+     270,   271,   272,   273,   274,   275,     0,     0,   276,   277,\n+     278,   279,     0,   280,   281,   282,   283,   284,   285,   286,\n+     287,  1016,   289,   290,   291,   292,   293,   294,   295,   296,\n+     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,\n+    1017,   308,  1018,   310,   311,   312,   313,  1019,   314,   315,\n+     316,   317,  1020,   604,   319,  1021,   321,   322,   323,     0,\n+     324,   325,     0,     0,  1022,   327,   328,     0,     0,   329,\n+     330,   331,   332,   333,   606,   335,   336,   337,   338,   339,\n+     340,   341,   342,   343,   344,     0,     0,     0,     0,   345,\n+     346,   607,   348,   349,   350,   351,   352,   353,   354,     0,\n+     355,   356,   357,   358,   359,   360,     0,   361,   362,   363,\n+    1023,   365,   366,   367,   368,     0,   369,   370,   371,   372,\n+     373,   374,   375,   376,   377,   378,   379,   380,   381,     0,\n+     382,   383,   384,   385,   386,  2895,  1024,   389,   390,   391,\n+     392,   393,   394,   395,   396,   397,   398,   399,     0,     0,\n+     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,\n+     410,   411,   412,  1025,   414,     0,   415,   416,   417,   418,\n+     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,\n+     609,   430,     0,   431,   432,     0,   433,   434,   435,   436,\n+     437,   438,   439,     0,  1026,  1027,     0,     0,   442,   443,\n+     610,   445,   611,  1028,   447,   448,   612,   450,   451,   452,\n+     453,   454,     0,     0,   455,   456,   457,     0,   458,   459,\n+     460,   461,     0,   462,   463,   464,   465,   466,   467,  1029,\n+       0,   469,   470,   471,   472,   473,   474,   475,     0,     0,\n+     476,     0,     0,   477,   478,   479,   480,   481,   482,   483,\n+     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,\n+     494,   495,   496,   497,  1030,     0,     0,     0,     0,     0,\n+       0,  1031,  1032,  1033,     0,     0,     0,     0,  1034,     0,\n+    2896,     0,     0,     0,     0,  1036,  1037,  1038,  1039,   109,\n+     991,   629,   992,   993,   994,   995,   996,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,   110,   111,\n+     112,   113,   114,   115,   116,   117,     0,   118,   119,   120,\n+       0,     0,     0,     0,     0,   997,     0,     0,   121,   122,\n+     123,     0,   124,   125,   126,   127,   128,   129,   130,  3331,\n+     998,   133,   999,  1000,     0,   136,   137,   138,   139,   140,\n+     141,  1001,   599,   142,   143,  1002,  1003,   146,     0,   147,\n+     148,   149,   150,   600,     0,   601,     0,  1004,   154,   155,\n+     156,   157,   158,   159,   160,   161,   162,     0,   163,   164,\n+     165,   166,   167,   168,     0,   169,   170,   171,  3332,   173,\n+     174,   175,   176,   177,   178,   179,  1005,  1006,   182,  1007,\n+     183,     0,   184,   185,   186,   187,   188,   189,     0,   190,\n+     191,   192,   193,   194,     0,     0,   195,   196,   764,   198,\n+     199,     0,   200,   201,   202,     0,   203,   204,   205,     0,\n+     206,   207,   208,   209,  1008,   211,   212,   213,   214,   215,\n+     602,  1009,   217,     0,   218,   219,  1010,   221,     0,   222,\n+       0,   223,   224,     0,   225,   226,   227,   228,   229,   230,\n+       0,   231,     0,  1011,  1012,   234,     0,   235,   236,   237,\n+     238,   239,   240,   241,   242,   243,   244,   245,   246,     0,\n+     247,   248,   249,   250,   251,   252,   253,     0,   254,   255,\n+     256,   257,   258,   259,   260,   261,  1013,  1014,     0,  1015,\n+       0,   265,   266,   267,   268,   269,   270,   271,   272,   273,\n+     274,   275,     0,     0,   276,   277,   278,   279,     0,   280,\n+     281,   282,   283,   284,   285,   286,   287,  1016,   289,   290,\n+     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,\n+     301,   302,   303,   304,   305,   306,  1017,   308,  1018,   310,\n+     311,   312,   313,  1019,   314,   315,   316,   317,  1020,   604,\n+     319,  1021,   321,   322,   323,     0,   324,   325,     0,     0,\n+    1022,   327,   328,     0,     0,   329,   330,   331,   332,   333,\n+     606,   335,   336,   337,   338,   339,   340,   341,   342,   343,\n+     344,     0,     0,     0,     0,   345,   346,   607,   348,   349,\n+     350,   351,   352,   353,   354,     0,   355,   356,   357,   358,\n+     359,   360,     0,   361,   362,   363,  1023,   365,   366,   367,\n+     368,     0,   369,   370,   371,   372,   373,   374,   375,   376,\n+     377,   378,   379,   380,   381,     0,   382,   383,   384,   385,\n+     386,   387,  1024,   389,   390,   391,   392,   393,   394,   395,\n+     396,   397,   398,   399,     0,     0,   400,   401,   402,   403,\n+     404,   405,   406,   407,   408,   409,   410,   411,   412,  1025,\n+     414,     0,   415,   416,   417,   418,   419,   420,   421,   422,\n+     423,   424,   425,   426,   427,   428,   609,   430,     0,   431,\n+     432,     0,   433,   434,   435,   436,   437,   438,   439,     0,\n+    1026,  1027,     0,     0,   442,   443,   610,   445,   611,  1028,\n+     447,   448,   612,   450,   451,  3333,   453,   454,     0,     0,\n+     455,   456,   457,     0,   458,   459,   460,   461,     0,   462,\n+     463,   464,   465,   466,   467,  1029,     0,   469,   470,   471,\n+     472,   473,   474,   475,     0,     0,   476,     0,     0,   477,\n+     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,\n+     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,\n+    1030,     0,     0,     0,     0,     0,     0,  1031,  1032,  1033,\n+       0,     0,     0,     0,  1034,     0,  1035,     0,     0,     0,\n+       0,  1036,  1037,  1038,  1039,   109,   991,   629,   992,   993,\n+     994,   995,   996,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,   110,   111,   112,   113,   114,   115,\n+     116,   117,     0,   118,   119,   120,     0,     0,     0,     0,\n+       0,   997,     0,     0,   121,   122,   123,     0,   124,   125,\n+     126,   127,   128,   129,   130,   131,   998,   133,   999,  1000,\n+       0,   136,   137,   138,   139,   140,   141,  1001,   599,   142,\n+     143,  1002,  1003,   146,     0,   147,   148,   149,   150,   600,\n+       0,   601,     0,  1004,   154,   155,   156,   157,   158,   159,\n+     160,   161,   162,     0,   163,   164,   165,   166,   167,   168,\n+       0,   169,   170,   171,  3332,   173,   174,   175,   176,   177,\n+     178,   179,  1005,  1006,   182,  1007,   183,     0,   184,   185,\n+     186,   187,   188,   189,     0,   190,   191,   192,   193,   194,\n+       0,     0,   195,   196,   764,   198,   199,     0,   200,   201,\n+     202,     0,   203,   204,   205,     0,   206,   207,   208,   209,\n+    1008,   211,   212,   213,   214,   215,   602,  1009,   217,     0,\n+     218,   219,  1010,   221,     0,   222,     0,   223,   224,     0,\n+     225,   226,   227,   228,   229,   230,     0,   231,     0,  1011,\n+    1012,   234,     0,   235,   236,   237,   238,   239,   240,   241,\n+     242,   243,   244,   245,   246,     0,   247,   248,   249,   250,\n+     251,   252,   253,     0,   254,   255,   256,   257,   258,   259,\n+     260,   261,  1013,  1014,     0,  1015,     0,   265,   266,   267,\n+     268,   269,   270,   271,   272,   273,   274,   275,     0,     0,\n+     276,   277,   278,   279,     0,   280,   281,   282,   283,   284,\n+     285,   286,   287,  1016,   289,   290,   291,   292,   293,   294,\n+     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,\n+     305,   306,  1017,   308,  1018,   310,   311,   312,   313,  1019,\n+     314,   315,   316,   317,  1020,   604,   319,  1021,   321,   322,\n+     323,     0,   324,   325,     0,     0,  1022,   327,   328,     0,\n+       0,   329,   330,   331,   332,   333,   606,   335,   336,   337,\n+     338,   339,   340,   341,   342,   343,   344,     0,     0,     0,\n+       0,   345,   346,   607,   348,   349,   350,   351,   352,   353,\n+     354,     0,   355,   356,   357,   358,   359,   360,     0,   361,\n+     362,   363,  1023,   365,   366,   367,   368,     0,   369,   370,\n+     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,\n+     381,     0,   382,   383,   384,   385,   386,   387,  1024,   389,\n+     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,\n+       0,     0,   400,   401,   402,   403,   404,   405,   406,   407,\n+     408,   409,   410,   411,   412,  1025,   414,     0,   415,   416,\n+     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,\n+     427,   428,   609,   430,     0,   431,   432,     0,   433,   434,\n+     435,   436,   437,   438,   439,     0,  1026,  1027,     0,     0,\n+     442,   443,   610,   445,   611,  1028,   447,   448,   612,   450,\n+     451,  3333,   453,   454,     0,     0,   455,   456,   457,     0,\n+     458,   459,   460,   461,     0,   462,   463,   464,   465,   466,\n+     467,  1029,     0,   469,   470,   471,   472,   473,   474,   475,\n+       0,     0,   476,     0,     0,   477,   478,   479,   480,   481,\n+     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,\n+     492,   493,   494,   495,   496,   497,  1030,     0,     0,     0,\n+       0,     0,     0,  1031,  1032,  1033,     0,     0,     0,     0,\n+    1034,     0,  1035,     0,     0,     0,     0,  1036,  1037,  1038,\n+    1039,   109,   991,   629,   992,   993,   994,   995,   996,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+     110,   111,   112,   113,   114,   115,   116,   117,     0,   118,\n+     119,   120,     0,     0,     0,     0,     0,   997,     0,     0,\n+     121,   122,   123,     0,   124,   125,   126,   127,   128,   129,\n+     130,   131,   998,   133,   999,  1000,     0,   136,   137,   138,\n+     139,   140,   141,  1001,   599,   142,   143,  1002,  1003,   146,\n+       0,   147,   148,   149,   150,   600,     0,   601,     0,   153,\n+     154,   155,   156,   157,   158,   159,   160,   161,   162,     0,\n+     163,   164,   165,   166,   167,   168,     0,   169,   170,   171,\n+     172,   173,   174,   175,   176,   177,   178,   179,  1005,  1006,\n+     182,     0,   183,     0,   184,   185,   186,   187,   188,   189,\n+       0,   190,   191,   192,   193,   194,     0,     0,   195,   196,\n+     764,   198,   199,     0,   200,   201,   202,     0,   203,   204,\n+     205,     0,   206,   207,   208,   209,  1008,   211,   212,   213,\n+     214,   215,   602,  1009,   217,     0,   218,   219,  1010,   221,\n+       0,   222,     0,   223,   224,     0,   225,   226,   227,   228,\n+     229,   230,     0,   231,     0,  1011,  1012,   234,     0,   235,\n+     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,\n+     246,     0,   247,   248,   249,   250,   251,   252,   253,     0,\n+     254,   255,   256,   257,   258,   259,   260,   261,  1013,  1014,\n+       0,  1015,     0,   265,   266,   267,   268,   269,   270,   271,\n+     272,   273,   274,   275,     0,     0,   276,   277,   278,   279,\n+       0,   280,   281,   282,   283,   284,   285,   286,   287,  1016,\n+     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,\n+     299,   300,   301,   302,   303,   304,   305,   306,  1017,   308,\n+    1018,   310,   311,   312,   313,     0,   314,   315,   316,   317,\n+    1020,   604,   319,  1021,   321,   322,   323,     0,   324,   325,\n+       0,     0,  1022,   327,   328,     0,     0,   329,   330,   331,\n+     332,   333,   606,   335,   336,   337,   338,   339,   340,   341,\n+     342,   343,   344,     0,     0,     0,     0,   345,   346,   607,\n+     348,   349,   350,   351,   352,   353,   354,     0,   355,   356,\n+     357,   358,   359,   360,     0,   361,   362,   363,  1023,   365,\n+     366,   367,   368,     0,   369,   370,   371,   372,   373,   374,\n+     375,   376,   377,   378,   379,   380,   381,     0,   382,   383,\n+     384,   385,   386,   387,  1024,   389,   390,   391,   392,   393,\n+     394,   395,   396,   397,   398,   399,     0,     0,   400,   401,\n+     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,\n+     412,  1025,   414,     0,   415,   416,   417,   418,   419,   420,\n+     421,   422,   423,   424,   425,   426,   427,   428,   609,   430,\n+       0,   431,   432,     0,   433,   434,   435,   436,   437,   438,\n+     439,     0,  1026,  1027,     0,     0,   442,   443,   610,   445,\n+     611,  1028,   447,   448,   612,   450,   451,   452,   453,   454,\n+       0,     0,   455,   456,   457,     0,   458,   459,   460,   461,\n+       0,   462,   463,   464,   465,   466,   467,  1029,     0,   469,\n+     470,   471,   472,   473,   474,   475,     0,     0,   476,     0,\n+       0,   477,   478,   479,   480,   481,   482,   483,   484,   485,\n+     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,\n+     496,   497,     0,     0,     0,     0,     0,     0,     0,  1444,\n+    1445,     0,     0,     0,     0,     0,  1034,     0,  1035,     0,\n+       0,     0,     0,  1036,  1037,  1038,  1039,   109,   991,   629,\n+     992,   993,   994,   995,   996,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,   110,   111,   112,   113,\n+     114,   115,   116,   117,     0,   118,   119,   120,     0,     0,\n+       0,     0,     0,   997,     0,     0,   121,   122,   123,     0,\n+     124,   125,   126,   127,   128,   129,   130, -1956,   998,   133,\n+     999,  1000,     0,   136,   137,   138,   139,   140,   141,  1001,\n+     599,   142,   143,  1002,  1003,   146,     0,   147,   148,   149,\n+     150,   600,     0,   601,     0,  1004,   154,   155,   156,   157,\n+     158,   159,   160,   161,   162,     0,   163,   164,   165,   166,\n+     167,   168,     0,   169,   170,   171,  3332,   173,   174,   175,\n+     176,   177,   178,   179,  1005,  1006,   182,  1007,   183,     0,\n+     184,   185,   186,   187,   188,   189,     0,   190,   191,   192,\n+     193,   194,     0,     0,   195,   196,   764,   198,   199,     0,\n+     200,   201,   202,     0,   203,   204,   205,     0,   206,   207,\n+     208,   209,  1008,   211,   212,   213,   214,   215,   602,  1009,\n+     217,     0,   218,   219,  1010,   221,     0,   222,     0,   223,\n+     224,     0,   225,   226,   227,   228, -1956,   230,     0,   231,\n+       0,  1011,  1012,   234,     0,   235,   236,   237,   238,   239,\n+     240,   241, -1956,   243,   244,   245,   246,     0,   247,   248,\n+     249,   250,   251,   252,   253,     0,   254,   255,   256,   257,\n+     258,   259,   260,   261,  1013,  1014,     0,  1015,     0,   265,\n+       0,     0,   268,   269,   270,   271,   272,   273,   274,   275,\n+       0,     0,   276,   277,   278, -1956,     0,   280,   281,   282,\n+     283,   284,   285,   286,   287,  1016,   289,   290,   291,   292,\n+     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,\n+     303,   304,   305,   306,  1017,   308,  1018,   310,   311,   312,\n+     313,     0,   314,   315,     0,   317,  1020,   604,   319,  1021,\n+     321,   322,   323,     0,   324,   325,     0,     0,  1022,   327,\n+     328,     0,     0,   329,   330,   331,   332,   333,   606,   335,\n+     336,   337,   338,   339,   340,   341,   342,   343,   344,     0,\n+       0,     0,     0,   345,   346,   607,   348,   349,   350,   351,\n+     352,   353,   354,     0,   355,   356,   357,   358,   359,   360,\n+       0,   361,   362,   363,  1023,   365,   366,   367,   368,     0,\n+     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,\n+     379,   380,   381,     0,   382,   383,   384,   385,   386,   387,\n+    1024,   389,   390,   391,   392,   393,   394,   395,   396,   397,\n+     398,   399,     0,     0,   400,   401,   402,   403,   404,   405,\n+     406,   407,   408,   409, -1956,   411,   412,  1025,   414,     0,\n+     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,\n+     425,   426,   427,   428,   609,   430,     0,   431,   432,     0,\n+     433,   434,   435,   436,   437,   438,   439,     0,  1026,  1027,\n+       0,     0,   442,   443,   610,   445,   611,  1028,   447,   448,\n+     612,   450,   451,  3333,   453,   454,     0,     0,   455,   456,\n+     457,     0,   458,   459,   460,   461,     0,   462,   463,   464,\n+     465,   466,   467,  1029,     0,   469,   470,   471,   472,   473,\n+     474,   475,     0,     0,   476,     0,     0,   477,   478,   479,\n+     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,\n+     490,   491,   492,   493,   494,   495,   496,   497, -1956,     0,\n+       0,     0,     0,     0,     0,  1031,  1032,  1033,     0,     0,\n+       0,     0,  1034,     0,  1035,     0,     0,     0,     0,  1036,\n+    1037,  1038,  1039,   109,   991,   629,   992,   993,     0,   995,\n+     996,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,   110,   111,   112,   113,   114,   115,   116,   117,\n+       0,   118,   119,   120,     0,     0,     0,     0,     0,   997,\n+       0,     0,   121,   122,   123,     0,   124,   125,   126,   127,\n+     128,   129,   130,   131,   998,   133,   999,  1000,     0,   136,\n+     137,   138,   139,   140,   141,  1001,   599,   142,   143,  1002,\n+    1003,   146,     0,   147,   148,   149,   150,   600,     0,   601,\n+       0,   153,   154,   155,   156,   157,   158,   159,   160,   161,\n+     162,     0,   163,   164,   165,   166,   167,   168,     0,   169,\n+     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,\n+    1005,  1006,   182,     0,   183,     0,   184,   185,   186,   187,\n+     188,   189,     0,   190,   191,   192,   193,   194,     0,     0,\n+     195,   196,   764,   198,   199,     0,   200,   201,   202,     0,\n+     203,   204,   205,     0,   206,   207,   208,   209,  1008,   211,\n+     212,   213,   214,   215,   602,  1009,   217,     0,   218,   219,\n+    1010,   221,     0,   222,     0,   223,   224,     0,   225,   226,\n+     227,   228,   229,   230,     0,   231,     0,  1011,  1012,   234,\n+       0,   235,   236,   237,   238,   239,   240,   241,   242,   243,\n+     244,   245,   246,     0,   247,   248,   249,   250,   251,   252,\n+     253,     0,   254,   255,   256,   257,   258,   259,   260,   261,\n+    1013,  1014,     0,  1015,     0,   265,   266,   267,   268,   269,\n+     270,   271,   272,   273,   274,   275,     0,     0,   276,   277,\n+     278,   279,     0,   280,   281,   282,   283,   284,   285,   286,\n+     287,  1016,   289,   290,   291,   292,   293,   294,   295,   296,\n+     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,\n+    1017,   308,  1018,   310,   311,   312,   313,     0,   314,   315,\n+     316,   317,  1020,   604,   319,  1021,   321,   322,   323,     0,\n+     324,   325,     0,     0,   326,   327,   328,     0,     0,   329,\n+     330,   331,   332,   333,   606,   335,   336,   337,   338,   339,\n+     340,   341,   342,   343,   344,     0,     0,     0,     0,   345,\n+     346,   607,   348,   349,   350,   351,   352,   353,   354,     0,\n+     355,   356,   357,   358,   359,   360,     0,   361,   362,   363,\n+    1023,   365,   366,   367,   368,     0,   369,   370,   371,   372,\n+     373,   374,   375,   376,   377,   378,   379,   380,   381,     0,\n+     382,   383,   384,   385,   386,   387,  2094,  2095,   390,   391,\n+     392,   393,   394,   395,   396,   397,   398,   399,     0,     0,\n+     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,\n+     410,   411,   412,  1025,   414,     0,   415,   416,   417,   418,\n+     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,\n+     609,   430,     0,   431,   432,     0,   433,   434,   435,   436,\n+     437,   438,   439,     0,  1026,  1027,     0,     0,   442,   443,\n+     610,   445,   611,  1028,   447,   448,   612,   450,   451,   452,\n+     453,   454,     0,     0,   455,   456,   457,     0,   458,   459,\n+     460,   461,     0,   462,   463,   464,   465,   466,   467,  1029,\n+       0,   469,   470,   471,   472,   473,   474,   475,     0,     0,\n+     476,     0,     0,   477,   478,   479,   480,   481,   482,   483,\n+     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,\n+     494,   495,   496,   497,     0,     0,     0,     0,     0,     0,\n+       0,  2096,  2097,     0,     0,     0,     0,     0,  1034,     0,\n+    1035,     0,     0,     0,     0,  1036,  1037,  1038,  1039,   109,\n+     991,   629,   992,   993,   994,   995,   996,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,   110,   111,\n+     112,   113,   114,   115,   116,   117,     0,   118,   119,   120,\n+       0,     0,     0,     0,     0,   997,     0,     0,   121,   122,\n+     123,     0,   124,   125,   126,   127,   128,   129,   130,   131,\n+     998,   133,   999,  1000,     0,   136,   137,   138,   139,   140,\n+     141,  1001,   599,   142,   143,  1002,  1003,   146,     0,   147,\n+     148,   149,   150,   600,     0,   601,     0,   153,   154,   155,\n+     156,   157,   158,   159,   160,   161,   162,     0,   163,   164,\n+     165,   166,   167,   168,     0,   169,   170,   171,   172,   173,\n+     174,   175,   176,   177,   178,   179,  1005,  1006,   182,     0,\n+     183,     0,   184,   185,   186,   187,   188,   189,     0,   190,\n+     191,   192,   193,   194,     0,     0,   195,   196,   764,   198,\n+     199,     0,   200,   201,   202,     0,   203,   204,   205,     0,\n+     206,   207,   208,   209,  1008,   211,   212,   213,   214,   215,\n+     602,  1009,   217,     0,   218,   219,  1010,   221,     0,   222,\n+       0,   223,   224,     0,   225,   226,   227,   228,   229,   230,\n+       0,   231,     0,  1011,  1012,   234,     0,   235,   236,   237,\n+     238,   239,   240,   241,   242,   243,   244,   245,   246,     0,\n+     247,   248,   249,   250,   251,   252,   253,     0,   254,   255,\n+     256,   257,   258,   259,   260,   261,  1013,  1014,     0,  1015,\n+       0,   265,     0,   267,   268,   269,   270,   271,   272,   273,\n+     274,   275,     0,     0,   276,   277,   278,   279,     0,   280,\n+     281,   282,   283,   284,   285,   286,   287,  1016,   289,   290,\n+     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,\n+     301,   302,   303,   304,   305,   306,  1017,   308,  1018,   310,\n+     311,   312,   313,     0,   314,   315,   316,   317,  1020,   604,\n+     319,  1021,   321,   322,   323,     0,   324,   325,     0,     0,\n+    1022,   327,   328,     0,     0,   329,   330,   331,   332,   333,\n+     606,   335,   336,   337,   338,   339,   340,   341,   342,   343,\n+     344,     0,     0,     0,     0,   345,   346,   607,   348,   349,\n+     350,   351,   352,   353,   354,     0,   355,   356,   357,   358,\n+     359,   360,     0,   361,   362,   363,  1023,   365,   366,   367,\n+     368,     0,   369,   370,   371,   372,   373,   374,   375,   376,\n+     377,   378,   379,   380,   381,     0,   382,   383,   384,   385,\n+     386,   387,  1024,   389,   390,   391,   392,   393,   394,   395,\n+     396,   397,   398,   399,     0,     0,   400,   401,   402,   403,\n+     404,   405,   406,   407,   408,   409,   410,   411,   412,  1025,\n+     414,     0,   415,   416,   417,   418,   419,   420,   421,   422,\n+     423,   424,   425,   426,   427,   428,   609,   430,     0,   431,\n+     432,     0,   433,   434,   435,   436,   437,   438,   439,     0,\n+    1026,  1027,     0,     0,   442,   443,   610,   445,   611,  1028,\n+     447,   448,   612,   450,   451,   452,   453,   454,     0,     0,\n+     455,   456,   457,     0,   458,   459,   460,   461,     0,   462,\n+     463,   464,   465,   466,   467,  1029,     0,   469,   470,   471,\n+     472,   473,   474,   475,     0,     0,   476,     0,     0,   477,\n+     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,\n+     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,\n+       0,     0,     0,     0,     0,     0,     0,  1444,  1445,     0,\n+       0,     0,     0,     0,  1034,     0,  1035,     0,     0,     0,\n+       0,  1036,  1037,  1038,  1039,   109,   991,   629,   992,   993,\n+       0,   995,   996,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,   110,   111,   112,   113,   114,   115,\n+     116,   117,     0,   118,   119,   120,     0,     0,     0,     0,\n+       0,   997,     0,     0,   121,   122,   123,     0,   124,   125,\n+     126,   127,   128,   129,   130,   131,   998,   133,   999,  1000,\n+       0,   136,   137,   138,   139,   140,   141,  1001,   599,   142,\n+     143,  1002,  1003,   146,     0,   147,   148,   149,   150,   600,\n+       0,   601,     0,   153,   154,   155,   156,   157,   158,   159,\n+     160,   161,   162,     0,   163,   164,   165,   166,   167,   168,\n+       0,   169,   170,   171,   172,   173,   174,   175,   176,   177,\n+     178,   179,  1005,  1006,   182,     0,   183,     0,   184,   185,\n+     186,   187,   188,   189,     0,   190,   191,   192,   193,   194,\n+       0,     0,   195,   196,   764,   198,   199,     0,   200,   201,\n+     202,     0,   203,   204,   205,     0,   206,   207,   208,   209,\n+    1008,   211,   212,   213,   214,   215,   602,  1009,   217,     0,\n+     218,   219,  1010,   221,     0,   222,     0,   223,   224,     0,\n+     225,   226,   227,   228,   229,   230,     0,   231,     0,  1011,\n+    1012,   234,     0,   235,   236,   237,   238,   239,   240,   241,\n+     242,   243,   244,   245,   246,     0,   247,   248,   249,   250,\n+     251,   252,   253,     0,   254,   255,   256,   257,   258,   259,\n+     260,   261,  1013,  1014,     0,  1015,     0,   265,   266,   267,\n+     268,   269,   270,   271,   272,   273,   274,   275,     0,     0,\n+     276,   277,   278,   279,     0,   280,   281,   282,   283,   284,\n+     285,   286,   287,  1016,   289,   290,   291,   292,   293,   294,\n+     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,\n+     305,   306,  1017,   308,  1018,   310,   311,   312,   313,     0,\n+     314,   315,   316,   317,  1020,   604,   319,  1021,   321,   322,\n+     323,     0,   324,   325,     0,     0,   326,   327,   328,     0,\n+       0,   329,   330,   331,   332,   333,   606,   335,   336,   337,\n+     338,   339,   340,   341,   342,   343,   344,     0,     0,     0,\n+       0,   345,   346,   607,   348,   349,   350,   351,   352,   353,\n+     354,     0,   355,   356,   357,   358,   359,   360,     0,   361,\n+     362,   363,  1023,   365,   366,   367,   368,     0,   369,   370,\n+     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,\n+     381,     0,   382,   383,   384,   385,   386,   387,  1024,   389,\n+     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,\n+       0,     0,   400,   401,   402,   403,   404,   405,   406,   407,\n+     408,   409,   410,   411,   412,  1025,   414,     0,   415,   416,\n+     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,\n+     427,   428,   609,   430,     0,   431,   432,     0,   433,   434,\n+     435,   436,   437,   438,   439,     0,  1026,  1027,     0,     0,\n+     442,   443,   610,   445,   611,  1028,   447,   448,   612,   450,\n+     451,   452,   453,   454,     0,     0,   455,   456,   457,     0,\n+     458,   459,   460,   461,     0,   462,   463,   464,   465,   466,\n+     467,  1029,     0,   469,   470,   471,   472,   473,   474,   475,\n+       0,     0,   476,     0,     0,   477,   478,   479,   480,   481,\n+     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,\n+     492,   493,   494,   495,   496,   497,     0,     0,     0,     0,\n+       0,     0,   109,   991,   629,   992,   993,   994,   995,   996,\n+    1034,     0,  1035,     0,     0,     0,     0,  1036,  1037,  1038,\n+    1039,   110,   111,   112,   113,   114,   115,   116,   117,     0,\n+     118,   119,   120,     0,     0,     0,     0,     0,   997,     0,\n+       0,   121,   122,   123,     0,   124,   125,   126,   127,   128,\n+     129,   130,     0,   998,   133,   999,  1000,     0,   136,   137,\n+     138,   139,   140,   141,  1001,   599,   142,   143,  1002,  1003,\n+     146,     0,   147,   148,   149,   150,   600,     0,   601,     0,\n+    1004,   154,   155,   156,   157,   158,   159,   160,   161,   162,\n+       0,   163,   164,   165,   166,   167,   168,     0,   169,   170,\n+     171,   172,   173,   174,   175,   176,   177,   178,   179,  1005,\n+    1006,   182,  1007,   183,     0,   184,   185,   186,   187,   188,\n+     189,     0,   190,   191,   192,   193,   194,     0,     0,   195,\n+     196,   764,   198,   199,     0,   200,   201,   202,     0,   203,\n+       0,   205,     0,   206,   207,   208,   209,  1008,   211,   212,\n+     213,   214,   215,   602,  1009,   217,     0,   218,   219,  1010,\n+     221,     0,   222,     0,   223,   224,     0,   225,   226,   227,\n+     228,     0,   230,     0,   231,     0,  1011,  1012,   234,     0,\n+     235,   236,   237,   238,   239,   240,   241,     0,   243,   244,\n+     245,   246,     0,   247,   248,   249,   250,   251,   252,   253,\n+       0,   254,   255,   256,   257,   258,   259,   260,   261,  1013,\n+    1014,     0,  1015,     0,   265,     0,     0,   268,   269,   270,\n+     271,   272,   273,   274,   275,     0,     0,   276,   277,   278,\n+       0,     0,   280,   281,   282,   283,   284,   285,   286,   287,\n+    1016,   289,   290,   291,   292,   293,   294,   295,   296,   297,\n+     298,   299,   300,   301,   302,   303,   304,   305,   306,  1017,\n+     308,  1018,   310,   311,   312,   313,     0,   314,   315,     0,\n+     317,  1020,   604,   319,  1021,   321,   322,   323,     0,   324,\n+     325,     0,     0,  1022,   327,   328,     0,     0,   329,   330,\n+     331,   332,   333,   606,   335,   336,   337,   338,   339,   340,\n+     341,   342,   343,   344,     0,     0,     0,     0,   345,   346,\n+     607,   348,   349,   350,   351,   352,   353,   354,     0,   355,\n+     356,   357,   358,   359,   360,     0,   361,   362,   363,  1023,\n+     365,   366,   367,   368,     0,   369,   370,   371,   372,   373,\n+     374,   375,   376,   377,   378,   379,   380,   381,     0,   382,\n+     383,   384,   385,   386,   387,  1024,   389,   390,   391,   392,\n+     393,   394,   395,   396,   397,   398,   399,     0,     0,   400,\n+     401,   402,   403,   404,   405,   406,   407,   408,   409,     0,\n+     411,   412,  1025,   414,     0,   415,   416,   417,   418,   419,\n+     420,   421,   422,   423,   424,   425,   426,   427,   428,   609,\n+     430,     0,   431,   432,     0,   433,   434,   435,   436,   437,\n+     438,   439,     0,  1026,  1027,     0,     0,   442,   443,   610,\n+     445,   611,  1028,   447,   448,   612,   450,   451,   452,   453,\n+     454,     0,     0,   455,   456,   457,     0,   458,   459,   460,\n+     461,     0,   462,   463,   464,   465,   466,   467,  1029,     0,\n+     469,   470,   471,   472,   473,   474,   475,     0,     0,   476,\n+       0,     0,   477,   478,   479,   480,   481,   482,   483,   484,\n+     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,\n+     495,   496,   497,     0,     0,     0,     0,     0,     0,     0,\n+    1031,  1032,  1033,     0,   834,  1404,   629,  1034,     0,  1035,\n+     995,     0,     0,     0,  1036,  1037,  1038,  1039,     0,     0,\n+       0,     0,     0,   110,   111,   112,   113,   114,   115,   116,\n+     117,     0,   118,   119,   120,     0,     0,     0,   835,     0,\n+       0,     0,     0,   836,   122,   123,     0,   124,   125,   126,\n+     837,   128,   129,   130,   838,   839,   840,   841,   842,     0,\n+     136,   137,   138,   139,   140,   141,     0,     0,   142,   143,\n+     843,   844,   146,     0,   147,   148,   149,   150,   845,     0,\n+     846,     0,   847,   154,   155,   156,   157,   158,   848,   160,\n+     161,   162,     0,   163,   164,   165,   166,   167,   168,     0,\n+     849,   170,   171,   172,   173,   174,   175,   176,   177,   178,\n+     179,   850,   851,   182,     0,   183,     0,   184,   185,   186,\n+     187,   188,   189,     0,   190,   191,   192,   193,   194,     0,\n+       0,   195,   196,   197,   198,   199,     0,   200,   201,   202,\n+       0,   203,   204,   205,     0,   206,   207,   208,   209,   852,\n+     211,   212,   213,   214,   215,   853,  1405,   217,     0,   218,\n+     219,   854,   221,     0,   222,     0,   223,   855,     0,   856,\n+     226,   227,   857,   858,   230,     0,   231,     0,   859,   860,\n+     234,     0,   235,   236,   237,   238,   239,   240,   241,   861,\n+     243,   244,   245,   246,     0,   247,   248,   249,   250,   251,\n+     252,   253,     0,   254,   862,   863,   257,   258,   259,   260,\n+     261,   864,   865,     0,   866,     0,   265,   867,   868,   268,\n+     869,   270,   271,   272,   273,   274,   275,     0,     0,   276,\n+     870,   278,   871,     0,   280,   281,   282,   283,   284,   285,\n+     286,   287,   872,   289,   290,   291,   292,   293,   294,   295,\n+     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,\n+     306,   873,   874,   875,   310,   311,   312,   876,     0,   314,\n+     315,   877,   317,     0,   878,   319,   879,   321,   322,   323,\n+       0,   324,   325,  1406,     0,   326,   327,   328,     0,     0,\n+     329,   880,   881,   332,   882,   883,   335,   336,   337,   338,\n      339,   340,   341,   342,   343,   344,     0,     0,     0,     0,\n-     345,   346,   607,   348,   349,   350,   351,   352,   353,   354,\n+     345,   346,   884,   885,   349,   350,   886,   352,   353,   354,\n        0,   355,   356,   357,   358,   359,   360,     0,   361,   362,\n-     363,  1017,   365,   366,   367,   368,     0,   369,   370,   371,\n+     363,   887,   365,   366,   367,   368,     0,   369,   370,   371,\n      372,   373,   374,   375,   376,   377,   378,   379,   380,   381,\n-       0,   382,   383,   384,   385,   386,   387,  1018,   389,   390,\n+       0,   382,   383,   888,   385,   386,   387,   889,   389,   390,\n      391,   392,   393,   394,   395,   396,   397,   398,   399,     0,\n-       0,   400,   401,   402,   403,   404,   405,   406,   407,   408,\n-     409,   410,   411,   412,  1019,   414,     0,   415,   416,   417,\n-     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,\n-     428,   609,   430,     0,   431,   432,  3150,   433,   434,   435,\n-     436,   437,   438,   439,     0,  1020,  1021,     0,     0,   442,\n-     443,   610,   445,   611,  1022,   447,   448,   612,   450,   451,\n+     890,   400,   401,   402,   403,   404,   405,   891,   407,   408,\n+     409,   892,   411,   412,   893,   414,     0,   415,   416,   417,\n+     418,   419,   420,   421,   422,   423,   424,   425,   426,   894,\n+     428,   895,   430,     0,   431,   432,     0,   433,   896,   435,\n+     436,   437,   438,   439,     0,   897,   898,     0,     0,   442,\n+     443,   899,   445,   900,  1407,   447,   448,   901,   450,   451,\n      452,   453,   454,     0,     0,   455,   456,   457,     0,   458,\n-     459,   460,   461,     0,   462,   463,   464,   465,   466,   467,\n-    1023,     0,   469,   470,   471,   472,   473,   474,   475,     0,\n+     459,   460,   461,     0,   462,   463,   464,   465,   466,  1250,\n+     903,     0,   469,   904,   471,   472,   473,   474,   475,     0,\n        0,   476,     0,     0,   477,   478,   479,   480,   481,   482,\n-     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,\n-     493,   494,   495,   496,   497,  1024,     0,     0,     0,     0,\n-       0,     0,  1025,  1026,  1027,     0,     0,     0,     0,  1028,\n-       0,  1029,     0,     0,     0,     0,  1030,  1031,  1032,  1033,\n-     109,   985,   629,   986,   987,   988,   989,   990,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,   110,\n-     111,   112,   113,   114,   115,   116,   117,     0,   118,   119,\n-     120,     0,     0,     0,     0,     0,   991,     0,     0,   121,\n-     122,   123,     0,   124,   125,   126,   127,   128,   129,   130,\n-     131,   992,   133,   993,   994,     0,   136,   137,   138,   139,\n-     140,   141,   995,   599,   142,   143,   996,   997,   146,     0,\n-     147,   148,   149,   150,   600,     0,   601,     0,   998,   154,\n-     155,   156,   157,   158,   159,   160,   161,   162,     0,   163,\n-     164,   165,   166,   167,   168,     0,   169,   170,   171,   172,\n-     173,   174,   175,   176,   177,   178,   179,   999,  1000,   182,\n-    1001,   183,     0,   184,   185,   186,   187,   188,   189,     0,\n-     190,   191,   192,   193,   194,     0,     0,   195,   196,   761,\n-     198,   199,     0,   200,   201,   202,     0,   203,   204,   205,\n-       0,   206,   207,   208,   209,  1002,   211,   212,   213,   214,\n-     215,   602,  1003,   217,     0,   218,   219,  1004,   221,     0,\n-     222,     0,   223,   224,     0,   225,   226,   227,   228,   229,\n-     230,     0,   231,     0,  1005,  1006,   234,     0,   235,   236,\n-     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,\n-       0,   247,   248,   249,   250,   251,   252,   253,     0,   254,\n-     255,   256,   257,   258,   259,   260,   261,  1007,  1008,     0,\n-    1009,     0,   265,   266,   267,   268,   269,   270,   271,   272,\n-     273,   274,   275,     0,     0,   276,   277,   278,   279,     0,\n-     280,   281,   282,   283,   284,   285,   286,   287,  1010,   289,\n-     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,\n-     300,   301,   302,   303,   304,   305,   306,  1011,   308,  1012,\n-     310,   311,   312,   313,  1013,   314,   315,   316,   317,  1014,\n-     604,   319,  1015,   321,   322,   323,     0,   324,   325,     0,\n-       0,  1016,   327,   328,     0,     0,   329,   330,   331,   332,\n-     333,   606,   335,   336,   337,   338,   339,   340,   341,   342,\n-     343,   344,     0,     0,     0,     0,   345,   346,   607,   348,\n-     349,   350,   351,   352,   353,   354,     0,   355,   356,   357,\n-     358,   359,   360,     0,   361,   362,   363,  1017,   365,   366,\n-     367,   368,     0,   369,   370,   371,   372,   373,   374,   375,\n-     376,   377,   378,   379,   380,   381,     0,   382,   383,   384,\n-     385,   386,   387,  1018,   389,   390,   391,   392,   393,   394,\n-     395,   396,   397,   398,   399,     0,     0,   400,   401,   402,\n-     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,\n-    1019,   414,     0,   415,   416,   417,   418,   419,   420,   421,\n-     422,   423,   424,   425,   426,   427,   428,   609,   430,     0,\n-     431,   432,     0,   433,   434,   435,   436,   437,   438,   439,\n-       0,  1020,  1021,     0,     0,   442,   443,   610,   445,   611,\n-    1022,   447,   448,   612,   450,   451,   452,   453,   454,     0,\n-       0,   455,   456,   457,     0,   458,   459,   460,   461,     0,\n-     462,   463,   464,   465,   466,   467,  1023,     0,   469,   470,\n-     471,   472,   473,   474,   475,     0,     0,   476,     0,     0,\n-     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,\n-     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,\n-     497,  1024,     0,     0,     0,     0,     0,     0,  1025,  1026,\n-    1027,     0,     0,     0,     0,  1028,     0,  1029,     0,     0,\n-       0,     0,  1030,  1031,  1032,  1033,   109,   985,   629,   986,\n-     987,   988,   989,   990,     0,     0,     0,     0,     0,     0,\n+     905,   906,   907,   908,   909,   910,   911,   912,   913,   914,\n+     915,   494,   495,   496,   497,     0,     0,     0,     0,     0,\n+       0,     0,  1408,  1409,  2279,     0,   109,   991,   629,   992,\n+     993,  2280,   995,     0,     0,     0,     0,     0,     0,  1039,\n        0,     0,     0,     0,     0,   110,   111,   112,   113,   114,\n      115,   116,   117,     0,   118,   119,   120,     0,     0,     0,\n-       0,     0,   991,     0,     0,   121,   122,   123,     0,   124,\n-     125,   126,   127,   128,   129,   130,   131,   992,   133,   993,\n-     994,     0,   136,   137,   138,   139,   140,   141,   995,   599,\n-     142,   143,   996,   997,   146,     0,   147,   148,   149,   150,\n-     600,     0,   601,     0,   998,   154,   155,   156,   157,   158,\n+       0,     0,   997,     0,     0,   121,   122,   123,     0,   124,\n+     125,   126,   127,   128,   129,   130,   131,   998,   133,   999,\n+    1000,     0,   136,   137,   138,   139,   140,   141,  1001,     0,\n+     142,   143,  1002,  1003,   146,     0,   147,   148,   149,   150,\n+     151,     0,   152,     0,   153,   154,   155,   156,   157,   158,\n      159,   160,   161,   162,     0,   163,   164,   165,   166,   167,\n      168,     0,   169,   170,   171,   172,   173,   174,   175,   176,\n-     177,   178,   179,   999,  1000,   182,  1001,   183,     0,   184,\n+     177,   178,   179,  1005,  1006,   182,     0,   183,     0,   184,\n      185,   186,   187,   188,   189,     0,   190,   191,   192,   193,\n-     194,     0,     0,   195,   196,   761,   198,   199,     0,   200,\n+     194,     0,     0,   195,   196,   764,   198,   199,     0,   200,\n      201,   202,     0,   203,   204,   205,     0,   206,   207,   208,\n-     209,  1002,   211,   212,   213,   214,   215,   602,  1003,   217,\n-       0,   218,   219,  1004,   221,     0,   222,     0,   223,   224,\n-       0,   225,   226,   227,   228,   229,   230,     0,   231,     0,\n-    1005,  1006,   234,     0,   235,   236,   237,   238,   239,   240,\n+     209,  1008,   211,   212,   213,   214,   215,   216,  1009,   217,\n+       0,   218,   219,  1010,   221,     0,   222,     0,   223,   224,\n+       0,   225,   226,   227,   228,   229,   230,     0,   231,  2913,\n+    1011,  1012,   234,     0,   235,   236,   237,   238,   239,   240,\n      241,   242,   243,   244,   245,   246,     0,   247,   248,   249,\n      250,   251,   252,   253,     0,   254,   255,   256,   257,   258,\n-     259,   260,   261,  1007,  1008,     0,  1009,     0,   265,   266,\n+     259,   260,   261,  1013,  1014,     0,  1015,     0,   265,   266,\n      267,   268,   269,   270,   271,   272,   273,   274,   275,     0,\n        0,   276,   277,   278,   279,     0,   280,   281,   282,   283,\n-     284,   285,   286,   287,  1010,   289,   290,   291,   292,   293,\n+     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,\n      294,   295,   296,   297,   298,   299,   300,   301,   302,   303,\n-     304,   305,   306,  1011,   308,  1012,   310,   311,   312,   313,\n-    1013,   314,   315,   316,   317,  1014,   604,   319,  1015,   321,\n-     322,   323,     0,   324,   325,     0,     0,  1016,   327,   328,\n-       0,     0,   329,   330,   331,   332,   333,   606,   335,   336,\n+     304,   305,   306,  1017,   308,  1018,   310,   311,   312,   313,\n+       0,   314,   315,   316,   317,  1020,   318,   319,  1021,   321,\n+     322,   323,     0,   324,   325,     0,     0,   326,   327,   328,\n+       0,     0,   329,   330,   331,   332,   333,   334,   335,   336,\n      337,   338,   339,   340,   341,   342,   343,   344,     0,     0,\n-       0,     0,   345,   346,   607,   348,   349,   350,   351,   352,\n+       0,     0,   345,   346,   347,   348,   349,   350,   351,   352,\n      353,   354,     0,   355,   356,   357,   358,   359,   360,     0,\n-     361,   362,   363,  1017,   365,   366,   367,   368,     0,   369,\n+     361,   362,   363,  1023,   365,   366,   367,   368,     0,   369,\n      370,   371,   372,   373,   374,   375,   376,   377,   378,   379,\n-     380,   381,     0,   382,   383,   384,   385,   386,   387,  1018,\n+     380,   381,     0,   382,   383,   384,   385,   386,   387,   388,\n      389,   390,   391,   392,   393,   394,   395,   396,   397,   398,\n      399,     0,     0,   400,   401,   402,   403,   404,   405,   406,\n-     407,   408,   409,   410,   411,   412,  1019,   414,     0,   415,\n+     407,   408,   409,   410,   411,   412,  1025,   414,     0,   415,\n      416,   417,   418,   419,   420,   421,   422,   423,   424,   425,\n-     426,   427,   428,   609,   430,     0,   431,   432,     0,   433,\n-     434,   435,   436,   437,   438,   439,     0,  1020,  1021,     0,\n-       0,   442,   443,   610,   445,   611,  1022,   447,   448,   612,\n+     426,   427,   428,   429,   430,     0,   431,   432,     0,   433,\n+     434,   435,   436,   437,   438,   439,     0,  1026,  1027,     0,\n+       0,   442,   443,   444,   445,   446,  1028,   447,   448,   449,\n      450,   451,   452,   453,   454,     0,     0,   455,   456,   457,\n        0,   458,   459,   460,   461,     0,   462,   463,   464,   465,\n-     466,   467,  1023,     0,   469,   470,   471,   472,   473,   474,\n+     466,   467,  1029,     0,   469,   470,   471,   472,   473,   474,\n+     475,     0,     0,   476,     0,     0,   477,   478,   479,   480,\n+     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,\n+     491,   492,   493,   494,   495,   496,   497,     0,     0,     0,\n+       0,   109,   991,   629,   992,   993,     0,   995,     0,     0,\n+       0,  1034,     0,  2633,     0,     0,     0,     0,  1036,  1037,\n+     110,   111,   112,   113,   114,   115,   116,   117,     0,   118,\n+     119,   120,     0,     0,     0,     0,     0,   997,     0,     0,\n+     121,   122,   123,     0,   124,   125,   126,   127,   128,   129,\n+     130,   131,   998,   133,   999,  1000,     0,   136,   137,   138,\n+     139,   140,   141,  1001,     0,   142,   143,  1002,  1003,   146,\n+       0,   147,   148,   149,   150,   151,     0,   152,     0,   153,\n+     154,   155,   156,   157,   158,   159,   160,   161,   162,     0,\n+     163,   164,   165,   166,   167,   168,     0,   169,   170,   171,\n+     172,   173,   174,   175,   176,   177,   178,   179,  1005,  1006,\n+     182,     0,   183,     0,   184,   185,   186,   187,   188,   189,\n+       0,   190,   191,   192,   193,   194,     0,     0,   195,   196,\n+     764,   198,   199,     0,   200,   201,   202,     0,   203,   204,\n+     205,     0,   206,   207,   208,   209,  1008,   211,   212,   213,\n+     214,   215,   216,  1009,   217,     0,   218,   219,  1010,   221,\n+       0,   222,     0,   223,   224,     0,   225,   226,   227,   228,\n+     229,   230,     0,   231,     0,  1011,  1012,   234,     0,   235,\n+     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,\n+     246,     0,   247,   248,   249,   250,   251,   252,   253,     0,\n+     254,   255,   256,   257,   258,   259,   260,   261,  1013,  1014,\n+       0,  1015,     0,   265,   266,   267,   268,   269,   270,   271,\n+     272,   273,   274,   275,     0,     0,   276,   277,   278,   279,\n+       0,   280,   281,   282,   283,   284,   285,   286,   287,   288,\n+     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,\n+     299,   300,   301,   302,   303,   304,   305,   306,  1017,   308,\n+    1018,   310,   311,   312,   313,     0,   314,   315,   316,   317,\n+    1020,   318,   319,  1021,   321,   322,   323,     0,   324,   325,\n+       0,     0,   326,   327,   328,     0,     0,   329,   330,   331,\n+     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,\n+     342,   343,   344,     0,     0,     0,     0,   345,   346,   347,\n+     348,   349,   350,   351,   352,   353,   354,     0,   355,   356,\n+     357,   358,   359,   360,     0,   361,   362,   363,  1023,   365,\n+     366,   367,   368,     0,   369,   370,   371,   372,   373,   374,\n+     375,   376,   377,   378,   379,   380,   381,     0,   382,   383,\n+     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,\n+     394,   395,   396,   397,   398,   399,     0,     0,   400,   401,\n+     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,\n+     412,  1025,   414,     0,   415,   416,   417,   418,   419,   420,\n+     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,\n+       0,   431,   432,     0,   433,   434,   435,   436,   437,   438,\n+     439,     0,  1026,  1027,     0,     0,   442,   443,   444,   445,\n+     446,  1028,   447,   448,   449,   450,   451,   452,   453,   454,\n+       0,     0,   455,   456,   457,     0,   458,   459,   460,   461,\n+       0,   462,   463,   464,   465,   466,   467,  1029,     0,   469,\n+     470,   471,   472,   473,   474,   475,     0,     0,   476,     0,\n+       0,   477,   478,   479,   480,   481,   482,   483,   484,   485,\n+     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,\n+     496,   497,     0,     0,     0,     0,   505,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,  1034,     0,  2633,     0,\n+       0,     0,     0,  1036,  1037,   110,   111,   112,   113,   114,\n+     115,   116,   117,     0,   118,   119,   120,     0,     0,     0,\n+       0,     0,     0,   950,     0,     0,   122,   123,     0,   124,\n+     125,   126,     0,   128,   129,   130,   131,   132,     0,   134,\n+     135,     0,   136,   137,   138,   139,   140,   141,     0,     0,\n+     142,   143,   144,   145,   146,     0,   147,   148,   149,   150,\n+     151,     0,     0,     0,   153,   154,   155,   156,   157,   158,\n+       0,   160,   161,   162,     0,   163,   164,   165,   166,   167,\n+     168,     0,     0,   170,   171,   172,   173,   174,   175,   176,\n+     177,   178,   179,   180,   181,   182,     0,   183,     0,   184,\n+     185,   186,   187,   188,   189,     0,   190,   191,   192,   193,\n+     194,     0,     0,   195,   196,   197,   198,   199,     0,   200,\n+     201,   202,     0,   203,   204,   205,  -499,   206,   207,   208,\n+     209,   210,   211,   212,   213,   214,   215,   216,     0,   217,\n+    -499,   218,   219,   220,   221,  -499,   222,     0,   223,     0,\n+       0,     0,   226,   227,   506,     0,   230,     0,   231,     0,\n+     232,   233,   234,     0,   235,   236,   237,   238,   239,   240,\n+     241,     0,   243,   244,   245,   246,     0,   247,   248,   249,\n+     250,   251,   252,   253,     0,   254,     0,   256,   257,   258,\n+     259,   260,   261,   262,   263,  -499,   264,     0,   265,     0,\n+       0,   268,     0,   270,   271,   272,   273,   274,   275,     0,\n+       0,   276,     0,   278,     0,  -499,   280,   281,   282,   283,\n+     284,   285,   286,   287,   507,   289,   290,   291,   292,   293,\n+     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,\n+     304,   305,   306,   307,     0,   309,   310,   311,   312,   313,\n+       0,   314,   315,     0,   317,     0,   318,   319,   320,   321,\n+     322,   323,  -499,   324,   325,     0,     0,   326,   327,   328,\n+       0,  -499,   329,   330,     0,   332,     0,   334,   335,   336,\n+     337,   338,   339,   340,   341,   342,   343,   344,     0,     0,\n+       0,     0,   345,   346,   347,     0,   349,   350,   351,   352,\n+     353,   354,     0,   355,   356,   357,   358,   359,   360,     0,\n+     361,   362,   363,   364,   365,   366,   367,   368,     0,   369,\n+     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,\n+     380,   381,     0,   382,   383,     0,   385,   386,   387,   388,\n+     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,\n+     399,     0,     0,   400,   401,   402,   403,   404,   405,   406,\n+     407,   408,   409,     0,   411,   412,   413,   414,     0,   415,\n+     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,\n+     426,   508,   428,   429,   430,     0,   431,   432,     0,   433,\n+       0,   435,   436,   437,   438,   439,     0,   440,   441,     0,\n+       0,   442,   443,   444,   445,   446,     0,   447,   448,   449,\n+     450,   451,   452,   453,   454,  -499,     0,   455,   456,   457,\n+       0,   458,   459,   460,   461,     0,   462,   463,   464,   465,\n+     466,   467,   468,     0,   469,     0,   471,   472,   473,   474,\n      475,     0,     0,   476,     0,     0,   477,   478,   479,   480,\n      481,   482,   483,   484,   485,   486,   487,   488,   489,   490,\n-     491,   492,   493,   494,   495,   496,   497,  1024,     0,     0,\n-       0,     0,     0,     0,  1645,  1646,  1027,     0,     0,     0,\n-       0,  1028,     0,  1029,     0,     0,     0,     0,  1030,  1031,\n-    1032,  1033,   109,  2099,   629,   986,   987,   988,   989,   990,\n+     491,   492,   493,   494,   495,   496,   497,   505,     0,   527,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,   110,   111,   112,   113,   114,   115,   116,   117,     0,\n-     118,   119,   120,     0,     0,     0,     0,     0,   991,     0,\n-       0,   121,   122,   123,     0,   124,   125,   126,   127,   128,\n-     129,   130,   131,   992,   133,   993,   994,     0,   136,   137,\n-     138,   139,   140,   141,   995,   599,   142,   143,   996,   997,\n-     146,     0,   147,   148,   149,   150,   600,     0,   601,     0,\n-     998,   154,   155,   156,   157,   158,   159,   160,   161,   162,\n-       0,   163,   164,   165,   166,   167,   168,     0,   169,   170,\n-     171,   172,   173,   174,   175,   176,   177,   178,   179,   999,\n-    1000,   182,  1001,   183,     0,   184,   185,   186,   187,   188,\n-     189,     0,   190,   191,   192,   193,   194,     0,     0,   195,\n-     196,   761,   198,   199,     0,   200,   201,   202,     0,   203,\n-     204,   205,     0,   206,   207,   208,   209,  1002,   211,   212,\n-     213,   214,   215,   602,  1003,   217,     0,   218,   219,  1004,\n-     221,     0,   222,     0,   223,   224,     0,   225,   226,   227,\n-     228,   229,   230,     0,   231,     0,  1005,  1006,   234,     0,\n-     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,\n-     245,   246,     0,   247,   248,   249,   250,   251,   252,   253,\n-       0,   254,   255,   256,   257,   258,   259,   260,   261,  1007,\n-    1008,     0,  1009,     0,   265,   266,   267,   268,   269,   270,\n-     271,   272,   273,   274,   275,     0,     0,   276,   277,   278,\n-     279,     0,   280,   281,   282,   283,   284,   285,   286,   287,\n-    1010,   289,   290,   291,   292,   293,   294,   295,   296,   297,\n-     298,   299,   300,   301,   302,   303,   304,   305,   306,  1011,\n-     308,  1012,   310,   311,   312,   313,  1013,   314,   315,   316,\n-     317,  1014,   604,   319,  1015,   321,   322,   323,     0,   324,\n-     325,     0,     0,  1016,   327,   328,     0,     0,   329,   330,\n-     331,   332,   333,   606,   335,   336,   337,   338,   339,   340,\n-     341,   342,   343,   344,     0,     0,     0,     0,   345,   346,\n-     607,   348,   349,   350,   351,   352,   353,   354,     0,   355,\n-     356,   357,   358,   359,   360,     0,   361,   362,   363,  1017,\n-     365,   366,   367,   368,     0,   369,   370,   371,   372,   373,\n-     374,   375,   376,   377,   378,   379,   380,   381,     0,   382,\n-     383,   384,   385,   386,   387,  1018,   389,   390,   391,   392,\n-     393,   394,   395,   396,   397,   398,   399,     0,     0,   400,\n-     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,\n-     411,   412,  1019,   414,     0,   415,   416,   417,   418,   419,\n-     420,   421,   422,   423,   424,   425,   426,   427,   428,   609,\n-     430,     0,   431,   432,     0,   433,   434,   435,   436,   437,\n-     438,   439,     0,  1020,  1021,     0,     0,   442,   443,   610,\n-     445,   611,  1022,   447,   448,   612,   450,   451,   452,   453,\n-     454,     0,     0,   455,   456,   457,     0,   458,   459,   460,\n-     461,     0,   462,   463,   464,   465,   466,   467,  1023,     0,\n-     469,   470,   471,   472,   473,   474,   475,     0,     0,   476,\n-       0,     0,   477,   478,   479,   480,   481,   482,   483,   484,\n-     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,\n-     495,   496,   497,  1024,     0,     0,     0,     0,     0,     0,\n-    1025,  1026,  1027,     0,     0,     0,     0,  1028,     0,  1029,\n-       0,     0,     0,     0,  1030,  1031,  1032,  1033,   109,   985,\n-     629,   986,   987,   988,   989,   990,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,   110,   111,   112,\n-     113,   114,   115,   116,   117,     0,   118,   119,   120,     0,\n-       0,     0,     0,     0,   991,     0,     0,   121,   122,   123,\n-       0,   124,   125,   126,   127,   128,   129,   130,   131,   992,\n-     133,   993,   994,     0,   136,   137,   138,   139,   140,   141,\n-     995,   599,   142,   143,   996,   997,   146,     0,   147,   148,\n-     149,   150,   600,     0,   601,     0,   998,   154,   155,   156,\n-     157,   158,   159,   160,   161,   162,     0,   163,   164,   165,\n-     166,   167,   168,     0,   169,   170,   171,   172,   173,   174,\n-     175,   176,   177,   178,   179,   999,  1000,   182,  1001,   183,\n+       0,     0,     0,     0,  1104,     0,   110,   111,   112,   113,\n+     114,   115,   116,   117,     0,   118,   119,   120,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,   122,   123,     0,\n+     124,   125,   126,     0,   128,   129,   130,   131,   132,     0,\n+     134,   135,     0,   136,   137,   138,   139,   140,   141,     0,\n+       0,   142,   143,   144,   145,   146,     0,   147,   148,   149,\n+     150,   151,     0,     0,     0,   153,   154,   155,   156,   157,\n+     158,     0,   160,   161,   162,     0,   163,   164,   165,   166,\n+     167,   168,     0,     0,   170,   171,   172,   173,   174,   175,\n+     176,   177,   178,   179,   180,   181,   182,     0,   183,     0,\n+     184,   185,   186,   187,   188,   189,     0,   190,   191,   192,\n+     193,   194,     0,     0,   195,   196,   197,   198,   199,     0,\n+     200,   201,   202,     0,   203,   204,   205,     0,   206,   207,\n+     208,   209,   210,   211,   212,   213,   214,   215,   216,     0,\n+     217,     0,   218,   219,   220,   221,     0,   222,     0,   223,\n+       0,     0,     0,   226,   227,   506,     0,   230,     0,   231,\n+       0,   232,   233,   234,     0,   235,   236,   237,   238,   239,\n+     240,   241,     0,   243,   244,   245,   246,     0,   247,   248,\n+     249,   250,   251,   252,   253,     0,   254,     0,   256,   257,\n+     258,   259,   260,   261,   262,   263,     0,   264,     0,   265,\n+       0,     0,   268,     0,   270,   271,   272,   273,   274,   275,\n+       0,     0,   276,     0,   278,     0,     0,   280,   281,   282,\n+     283,   284,   285,   286,   287,   507,   289,   290,   291,   292,\n+     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,\n+     303,   304,   305,   306,   307,     0,   309,   310,   311,   312,\n+     313,     0,   314,   315,     0,   317,     0,   318,   319,   320,\n+     321,   322,   323,     0,   324,   325,     0,     0,   326,   327,\n+     328,     0,     0,   329,   330,     0,   332,     0,   334,   335,\n+     336,   337,   338,   339,   340,   341,   342,   343,   344,     0,\n+       0,     0,     0,   345,   346,   347,     0,   349,   350,   351,\n+     352,   353,   354,     0,   355,   356,   357,   358,   359,   360,\n+       0,   361,   362,   363,   364,   365,   366,   367,   368,     0,\n+     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,\n+     379,   380,   381,     0,   382,   383,     0,   385,   386,   387,\n+     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,\n+     398,   399,     0,     0,   400,   401,   402,   403,   404,   405,\n+     406,   407,   408,   409,     0,   411,   412,   413,   414,     0,\n+     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,\n+     425,   426,   508,   428,   429,   430,     0,   431,   432,     0,\n+     433,     0,   435,   436,   437,   438,   439,     0,   440,   441,\n+       0,     0,   442,   443,   444,   445,   446,     0,   447,   448,\n+     449,   450,   451,   452,   453,   454,     0,     0,   455,   456,\n+     457,     0,   458,   459,   460,   461,     0,   462,   463,   464,\n+     465,   466,   467,   468,     0,   469,     0,   471,   472,   473,\n+     474,   475,     0,     0,   476,     0,     0,   477,   478,   479,\n+     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,\n+     490,   491,   492,   493,   494,   495,   496,   497,   834,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,  2366,  3083,     0,   110,   111,   112,\n+     113,   114,   115,   116,   117,     0,   118,   119,   120,     3,\n+       4,     0,   835,     0,     0,     0,     0,   836,   122,   123,\n+       0,   124,   125,   126,   837,   128,   129,   130,   838,   839,\n+     840,   841,   842,     0,   136,   137,   138,   139,   140,   141,\n+       0,     0,   142,   143,   843,   844,   146,     0,   147,   148,\n+     149,   150,   845,     0,   846,     0,   847,   154,   155,   156,\n+     157,   158,   848,   160,   161,   162,     0,   163,   164,   165,\n+     166,   167,   168,     0,   849,   170,   171,   172,   173,   174,\n+     175,   176,   177,   178,   179,   850,   851,   182,     0,   183,\n        0,   184,   185,   186,   187,   188,   189,     0,   190,   191,\n-     192,   193,   194,     0,     0,   195,   196,   761,   198,   199,\n+     192,   193,   194,     0,     0,   195,   196,   197,   198,   199,\n        0,   200,   201,   202,     0,   203,   204,   205,     0,   206,\n-     207,   208,   209,  1002,   211,   212,   213,   214,   215,   602,\n-    1003,   217,     0,   218,   219,  1004,   221,     0,   222,     0,\n-     223,   224,     0,   225,   226,   227,   228,   229,   230,     0,\n-     231,     0,  1005,  1006,   234,     0,   235,   236,   237,   238,\n-     239,   240,   241,   242,   243,   244,   245,   246,     0,   247,\n-     248,   249,   250,   251,   252,   253,     0,   254,   255,   256,\n-     257,   258,   259,   260,   261,  1007,  1008,     0,  1009,     0,\n-     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,\n-     275,     0,     0,   276,   277,   278,   279,     0,   280,   281,\n-     282,   283,   284,   285,   286,   287,  1010,   289,   290,   291,\n+     207,   208,   209,   852,   211,   212,   213,   214,   215,   853,\n+       0,   217,     0,   218,   219,   854,   221,     0,   222,     0,\n+     223,   855,    21,   856,   226,   227,   857,   858,   230,     0,\n+     231,     0,   859,   860,   234,     0,   235,   236,   237,   238,\n+     239,   240,   241,   861,   243,   244,   245,   246,     0,   247,\n+     248,   249,   250,   251,   252,   253,     0,   254,   862,   863,\n+     257,   258,   259,   260,   261,   864,   865,     0,   866,     0,\n+     265,   867,   868,   268,   869,   270,   271,   272,   273,   274,\n+     275,     0,     0,   276,   870,   278,   871,     0,   280,   281,\n+     282,   283,   284,   285,   286,   287,   872,   289,   290,   291,\n      292,   293,   294,   295,   296,   297,   298,   299,   300,   301,\n-     302,   303,   304,   305,   306,  1011,   308,  1012,   310,   311,\n-     312,   313,  1013,   314,   315,   316,   317,  1014,   604,   319,\n-    1015,   321,   322,   323,     0,   324,   325,     0,     0,  1016,\n-     327,   328,     0,     0,   329,   330,   331,   332,   333,   606,\n+     302,   303,   304,   305,   306,   873,   874,   875,   310,   311,\n+     312,   876,     0,   314,   315,   877,   317,     0,   878,   319,\n+     879,   321,   322,   323,     0,   324,   325,     0,     0,   326,\n+     327,   328,     0,     0,   329,   880,   881,   332,   882,   883,\n      335,   336,   337,   338,   339,   340,   341,   342,   343,   344,\n-       0,     0,     0,     0,   345,   346,   607,   348,   349,   350,\n-     351,   352,   353,   354,     0,   355,   356,   357,   358,   359,\n-     360,     0,   361,   362,   363,  1017,   365,   366,   367,   368,\n+      25,    26,    27,     0,   345,   346,   884,   885,   349,   350,\n+     886,   352,   353,   354,     0,   355,   356,   357,   358,   359,\n+     360,     0,   361,   362,   363,   887,   365,   366,   367,   368,\n        0,   369,   370,   371,   372,   373,   374,   375,   376,   377,\n-     378,   379,   380,   381,     0,   382,   383,   384,   385,   386,\n-     387,  1018,   389,   390,   391,   392,   393,   394,   395,   396,\n-     397,   398,   399,     0,     0,   400,   401,   402,   403,   404,\n-     405,   406,   407,   408,   409,   410,   411,   412,  1019,   414,\n+     378,   379,   380,   381,     0,   382,   383,   888,   385,   386,\n+     387,   889,   389,   390,   391,   392,   393,   394,   395,   396,\n+     397,   398,   399,    32,   890,   400,   401,   402,   403,   404,\n+     405,   891,   407,   408,   409,   892,   411,   412,   893,   414,\n        0,   415,   416,   417,   418,   419,   420,   421,   422,   423,\n-     424,   425,   426,   427,   428,   609,   430,     0,   431,   432,\n-       0,   433,   434,   435,   436,   437,   438,   439,     0,  1020,\n-    1021,     0,     0,   442,   443,   610,   445,   611,  1022,   447,\n-     448,   612,   450,   451,   452,   453,   454,     0,     0,   455,\n-     456,   457,     0,   458,   459,   460,   461,     0,   462,   463,\n-     464,   465,   466,   467,  1023,     0,   469,   470,   471,   472,\n-     473,   474,   475,     0,     0,   476,     0,     0,   477,   478,\n-     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,\n-     489,   490,   491,   492,   493,   494,   495,   496,   497,  1024,\n-       0,     0,     0,     0,     0,     0,  1025,  1026,  1027,     0,\n-       0,     0,     0,  1028,     0,  2381,     0,     0,     0,     0,\n-    1030,  1031,  1032,  1033,   109,   985,   629,   986,   987,   988,\n-     989,   990,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,   110,   111,   112,   113,   114,   115,   116,\n-     117,     0,   118,   119,   120,     0,     0,     0,     0,     0,\n-     991,     0,     0,   121,   122,   123,     0,   124,   125,   126,\n-     127,   128,   129,   130,   131,   992,   133,   993,   994,     0,\n-     136,   137,   138,   139,   140,   141,   995,   599,   142,   143,\n-     996,   997,   146,     0,   147,   148,   149,   150,   600,     0,\n-     601,     0,   998,   154,   155,   156,   157,   158,   159,   160,\n-     161,   162,     0,   163,   164,   165,   166,   167,   168,     0,\n-     169,   170,  2882,   172,   173,   174,   175,   176,   177,   178,\n-     179,   999,  1000,   182,  1001,   183,     0,   184,   185,   186,\n-     187,   188,   189,     0,   190,   191,   192,   193,   194,     0,\n-       0,   195,   196,   761,   198,   199,     0,   200,   201,   202,\n-       0,   203,   204,   205,     0,   206,   207,   208,   209,  1002,\n-     211,   212,   213,   214,   215,   602,  1003,   217,     0,   218,\n-     219,  1004,   221,     0,   222,     0,   223,   224,     0,   225,\n-     226,   227,   228,   229,   230,     0,   231,     0,  2883,  1006,\n-     234,     0,   235,   236,   237,   238,   239,   240,   241,   242,\n-     243,   244,   245,   246,     0,   247,   248,   249,   250,   251,\n-     252,   253,     0,   254,   255,   256,   257,   258,   259,   260,\n-     261,  1007,  1008,     0,  1009,     0,   265,   266,   267,   268,\n-     269,   270,   271,   272,   273,   274,   275,     0,     0,   276,\n-     277,   278,   279,     0,   280,   281,   282,   283,   284,   285,\n-     286,   287,  1010,   289,   290,   291,   292,   293,   294,   295,\n-     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,\n-     306,  1011,   308,  1012,   310,   311,   312,   313,  1013,   314,\n-     315,   316,   317,  1014,   604,   319,  1015,   321,   322,   323,\n-       0,   324,   325,     0,     0,  1016,   327,   328,     0,     0,\n-     329,   330,   331,   332,   333,   606,   335,   336,   337,   338,\n-     339,   340,   341,   342,   343,   344,     0,     0,     0,     0,\n-     345,   346,   607,   348,   349,   350,   351,   352,   353,   354,\n-       0,   355,   356,   357,   358,   359,   360,     0,   361,   362,\n-     363,  1017,   365,   366,   367,   368,     0,   369,   370,   371,\n-     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,\n-       0,   382,   383,   384,   385,   386,  2884,  1018,   389,   390,\n-     391,   392,   393,   394,   395,   396,   397,   398,   399,     0,\n-       0,   400,   401,   402,   403,   404,   405,   406,   407,   408,\n-     409,   410,   411,   412,  1019,   414,     0,   415,   416,   417,\n-     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,\n-     428,   609,   430,     0,   431,   432,     0,   433,   434,   435,\n-     436,   437,   438,   439,     0,  1020,  1021,     0,     0,   442,\n-     443,   610,   445,   611,  1022,   447,   448,   612,   450,   451,\n-     452,   453,   454,     0,     0,   455,   456,   457,     0,   458,\n-     459,   460,   461,     0,   462,   463,   464,   465,   466,   467,\n-    1023,     0,   469,   470,   471,   472,   473,   474,   475,     0,\n-       0,   476,     0,     0,   477,   478,   479,   480,   481,   482,\n-     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,\n-     493,   494,   495,   496,   497,  1024,     0,     0,     0,     0,\n-       0,     0,  1025,  1026,  1027,     0,     0,     0,     0,  1028,\n-       0,  2885,     0,     0,     0,     0,  1030,  1031,  1032,  1033,\n-     109,   985,   629,   986,   987,   988,   989,   990,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,   110,\n+     424,   425,   426,   894,   428,   895,   430,     0,   431,   432,\n+      37,   433,   896,   435,   436,   437,   438,   439,     0,   897,\n+     898,     0,     0,   442,   443,   899,   445,   900,     0,   447,\n+     448,   901,   450,   451,   452,   453,   454,     0,     0,   455,\n+     456,   457,    39,   458,   459,   460,   461,     0,   462,   463,\n+     464,   465,   466,   902,   903,     0,   469,   904,   471,   472,\n+     473,   474,   475,     0,     0,   476,     0,    43,   477,   478,\n+     479,   480,   481,   482,   905,   906,   907,   908,   909,   910,\n+     911,   912,   913,   914,   915,   494,   495,   496,   497,     0,\n+     109,    44,   527,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,    45,     0,     0,     0,   110,\n      111,   112,   113,   114,   115,   116,   117,     0,   118,   119,\n-     120,     0,     0,     0,     0,     0,   991,     0,     0,   121,\n+     120,     0,     0,     0,     0,     0,     0,     0,     0,   121,\n      122,   123,     0,   124,   125,   126,   127,   128,   129,   130,\n-    3319,   992,   133,   993,   994,     0,   136,   137,   138,   139,\n-     140,   141,   995,   599,   142,   143,   996,   997,   146,     0,\n-     147,   148,   149,   150,   600,     0,   601,     0,   998,   154,\n+     131,   132,   133,   134,   135,     0,   136,   137,   138,   139,\n+     140,   141,     0,   599,   142,   143,   144,   145,   146,     0,\n+     147,   148,   149,   150,   600,     0,   601,     0,   153,   154,\n      155,   156,   157,   158,   159,   160,   161,   162,     0,   163,\n-     164,   165,   166,   167,   168,     0,   169,   170,   171,  3320,\n-     173,   174,   175,   176,   177,   178,   179,   999,  1000,   182,\n-    1001,   183,     0,   184,   185,   186,   187,   188,   189,     0,\n-     190,   191,   192,   193,   194,     0,     0,   195,   196,   761,\n+     164,   165,   166,   167,   168,     0,   169,   170,   171,   172,\n+     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,\n+       0,   183,     0,   184,   185,   186,   187,   188,   189,     0,\n+     190,   191,   192,   193,   194,     0,     0,   195,   196,   197,\n      198,   199,     0,   200,   201,   202,     0,   203,   204,   205,\n-       0,   206,   207,   208,   209,  1002,   211,   212,   213,   214,\n-     215,   602,  1003,   217,     0,   218,   219,  1004,   221,     0,\n-     222,     0,   223,   224,     0,   225,   226,   227,   228,   229,\n-     230,     0,   231,     0,  1005,  1006,   234,     0,   235,   236,\n+       0,   206,   207,   208,   209,   210,   211,   212,   213,   214,\n+     215,   602,     0,   217,     0,   218,   219,   220,   221,     0,\n+     222,     0,   223,   224,    21,   225,   226,   227,   228,   229,\n+     230,     0,   231,     0,   232,   233,   234,     0,   235,   236,\n      237,   238,   239,   240,   241,   242,   243,   244,   245,   246,\n        0,   247,   248,   249,   250,   251,   252,   253,     0,   254,\n-     255,   256,   257,   258,   259,   260,   261,  1007,  1008,     0,\n-    1009,     0,   265,   266,   267,   268,   269,   270,   271,   272,\n-     273,   274,   275,     0,     0,   276,   277,   278,   279,     0,\n-     280,   281,   282,   283,   284,   285,   286,   287,  1010,   289,\n+     255,   256,   257,   258,   259,   260,   261,   262,   263,     0,\n+     264,     0,   265,   266,   267,   268,   269,   270,   271,   272,\n+     273,   274,   275,   603,     0,   276,   277,   278,   279,     0,\n+     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,\n      290,   291,   292,   293,   294,   295,   296,   297,   298,   299,\n-     300,   301,   302,   303,   304,   305,   306,  1011,   308,  1012,\n-     310,   311,   312,   313,  1013,   314,   315,   316,   317,  1014,\n-     604,   319,  1015,   321,   322,   323,     0,   324,   325,     0,\n-       0,  1016,   327,   328,     0,     0,   329,   330,   331,   332,\n+     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,\n+     310,   311,   312,   313,     0,   314,   315,   316,   317,     0,\n+     604,   319,   320,   321,   322,   323,     0,   324,   325,     0,\n+     605,   326,   327,   328,     0,     0,   329,   330,   331,   332,\n      333,   606,   335,   336,   337,   338,   339,   340,   341,   342,\n-     343,   344,     0,     0,     0,     0,   345,   346,   607,   348,\n+     343,   344,    25,    26,    27,     0,   345,   346,   607,   348,\n      349,   350,   351,   352,   353,   354,     0,   355,   356,   357,\n-     358,   359,   360,     0,   361,   362,   363,  1017,   365,   366,\n+     358,   359,   360,     0,   361,   362,   363,   364,   365,   366,\n      367,   368,     0,   369,   370,   371,   372,   373,   374,   375,\n      376,   377,   378,   379,   380,   381,     0,   382,   383,   384,\n-     385,   386,   387,  1018,   389,   390,   391,   392,   393,   394,\n-     395,   396,   397,   398,   399,     0,     0,   400,   401,   402,\n+     385,   386,   387,   388,   608,   390,   391,   392,   393,   394,\n+     395,   396,   397,   398,   399,    32,     0,   400,   401,   402,\n      403,   404,   405,   406,   407,   408,   409,   410,   411,   412,\n-    1019,   414,     0,   415,   416,   417,   418,   419,   420,   421,\n+     413,   414,     0,   415,   416,   417,   418,   419,   420,   421,\n      422,   423,   424,   425,   426,   427,   428,   609,   430,     0,\n-     431,   432,     0,   433,   434,   435,   436,   437,   438,   439,\n-       0,  1020,  1021,     0,     0,   442,   443,   610,   445,   611,\n-    1022,   447,   448,   612,   450,   451,  3321,   453,   454,     0,\n-       0,   455,   456,   457,     0,   458,   459,   460,   461,     0,\n-     462,   463,   464,   465,   466,   467,  1023,     0,   469,   470,\n-     471,   472,   473,   474,   475,     0,     0,   476,     0,     0,\n+     431,   432,    37,   433,   434,   435,   436,   437,   438,   439,\n+       0,   440,   441,     0,     0,   442,   443,   610,   445,   611,\n+       0,   447,   448,   612,   450,   451,   452,   453,   454,     0,\n+       0,   455,   456,   457,    39,   458,   459,   460,   461,     0,\n+     462,   463,   464,   465,   466,   613,   468,     0,   469,   470,\n+     471,   472,   473,   474,   475,     0,     0,   476,     0,    43,\n      477,   478,   479,   480,   481,   482,   483,   484,   485,   486,\n      487,   488,   489,   490,   491,   492,   493,   494,   495,   496,\n-     497,  1024,     0,     0,     0,     0,     0,     0,  1025,  1026,\n-    1027,     0,     0,     0,     0,  1028,     0,  1029,     0,     0,\n-       0,     0,  1030,  1031,  1032,  1033,   109,   985,   629,   986,\n-     987,   988,   989,   990,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,   110,   111,   112,   113,   114,\n-     115,   116,   117,     0,   118,   119,   120,     0,     0,     0,\n-       0,     0,   991,     0,     0,   121,   122,   123,     0,   124,\n-     125,   126,   127,   128,   129,   130,   131,   992,   133,   993,\n-     994,     0,   136,   137,   138,   139,   140,   141,   995,   599,\n-     142,   143,   996,   997,   146,     0,   147,   148,   149,   150,\n-     600,     0,   601,     0,   998,   154,   155,   156,   157,   158,\n-     159,   160,   161,   162,     0,   163,   164,   165,   166,   167,\n-     168,     0,   169,   170,   171,  3320,   173,   174,   175,   176,\n-     177,   178,   179,   999,  1000,   182,  1001,   183,     0,   184,\n-     185,   186,   187,   188,   189,     0,   190,   191,   192,   193,\n-     194,     0,     0,   195,   196,   761,   198,   199,     0,   200,\n-     201,   202,     0,   203,   204,   205,     0,   206,   207,   208,\n-     209,  1002,   211,   212,   213,   214,   215,   602,  1003,   217,\n-       0,   218,   219,  1004,   221,     0,   222,     0,   223,   224,\n-       0,   225,   226,   227,   228,   229,   230,     0,   231,     0,\n-    1005,  1006,   234,     0,   235,   236,   237,   238,   239,   240,\n-     241,   242,   243,   244,   245,   246,     0,   247,   248,   249,\n-     250,   251,   252,   253,     0,   254,   255,   256,   257,   258,\n-     259,   260,   261,  1007,  1008,     0,  1009,     0,   265,   266,\n-     267,   268,   269,   270,   271,   272,   273,   274,   275,     0,\n-       0,   276,   277,   278,   279,     0,   280,   281,   282,   283,\n-     284,   285,   286,   287,  1010,   289,   290,   291,   292,   293,\n-     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,\n-     304,   305,   306,  1011,   308,  1012,   310,   311,   312,   313,\n-    1013,   314,   315,   316,   317,  1014,   604,   319,  1015,   321,\n-     322,   323,     0,   324,   325,     0,     0,  1016,   327,   328,\n-       0,     0,   329,   330,   331,   332,   333,   606,   335,   336,\n-     337,   338,   339,   340,   341,   342,   343,   344,     0,     0,\n-       0,     0,   345,   346,   607,   348,   349,   350,   351,   352,\n-     353,   354,     0,   355,   356,   357,   358,   359,   360,     0,\n-     361,   362,   363,  1017,   365,   366,   367,   368,     0,   369,\n-     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,\n-     380,   381,     0,   382,   383,   384,   385,   386,   387,  1018,\n-     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,\n-     399,     0,     0,   400,   401,   402,   403,   404,   405,   406,\n-     407,   408,   409,   410,   411,   412,  1019,   414,     0,   415,\n-     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,\n-     426,   427,   428,   609,   430,     0,   431,   432,     0,   433,\n-     434,   435,   436,   437,   438,   439,     0,  1020,  1021,     0,\n-       0,   442,   443,   610,   445,   611,  1022,   447,   448,   612,\n-     450,   451,  3321,   453,   454,     0,     0,   455,   456,   457,\n-       0,   458,   459,   460,   461,     0,   462,   463,   464,   465,\n-     466,   467,  1023,     0,   469,   470,   471,   472,   473,   474,\n-     475,     0,     0,   476,     0,     0,   477,   478,   479,   480,\n-     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,\n-     491,   492,   493,   494,   495,   496,   497,  1024,     0,     0,\n-       0,     0,     0,     0,  1025,  1026,  1027,     0,     0,     0,\n-       0,  1028,     0,  1029,     0,     0,     0,     0,  1030,  1031,\n-    1032,  1033,   109,   985,   629,   986,   987,   988,   989,   990,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+     497,     0,   109,    44,   527,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,   614,     0,     0,\n        0,   110,   111,   112,   113,   114,   115,   116,   117,     0,\n-     118,   119,   120,     0,     0,     0,     0,     0,   991,     0,\n+     118,   119,   120,     0,     0,     0,     0,     0,     0,     0,\n        0,   121,   122,   123,     0,   124,   125,   126,   127,   128,\n-     129,   130,   131,   992,   133,   993,   994,     0,   136,   137,\n-     138,   139,   140,   141,   995,   599,   142,   143,   996,   997,\n+     129,   130,   131,   132,   133,   134,   135,     0,   136,   137,\n+     138,   139,   140,   141,     0,   599,   142,   143,   144,   145,\n      146,     0,   147,   148,   149,   150,   600,     0,   601,     0,\n      153,   154,   155,   156,   157,   158,   159,   160,   161,   162,\n        0,   163,   164,   165,   166,   167,   168,     0,   169,   170,\n-     171,   172,   173,   174,   175,   176,   177,   178,   179,   999,\n-    1000,   182,     0,   183,     0,   184,   185,   186,   187,   188,\n+     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,\n+     181,   182,     0,   183,     0,   184,   185,   186,   187,   188,\n      189,     0,   190,   191,   192,   193,   194,     0,     0,   195,\n-     196,   761,   198,   199,     0,   200,   201,   202,     0,   203,\n-     204,   205,     0,   206,   207,   208,   209,  1002,   211,   212,\n-     213,   214,   215,   602,  1003,   217,     0,   218,   219,  1004,\n+     196,   197,   198,   199,     0,   200,   201,   202,     0,   203,\n+     204,   205,     0,   206,   207,   208,   209,   210,   211,   212,\n+     213,   214,   215,   602,     0,   217,     0,   218,   219,   220,\n      221,     0,   222,     0,   223,   224,     0,   225,   226,   227,\n-     228,   229,   230,     0,   231,     0,  1005,  1006,   234,     0,\n+     228,   229,   230,     0,   231,     0,   232,   233,   234,     0,\n      235,   236,   237,   238,   239,   240,   241,   242,   243,   244,\n      245,   246,     0,   247,   248,   249,   250,   251,   252,   253,\n-       0,   254,   255,   256,   257,   258,   259,   260,   261,  1007,\n-    1008,     0,  1009,     0,   265,   266,   267,   268,   269,   270,\n-     271,   272,   273,   274,   275,     0,     0,   276,   277,   278,\n+       0,   254,   255,   256,   257,   258,   259,   260,   261,   262,\n+     263,     0,   264,     0,   265,   266,   267,   268,   269,   270,\n+     271,   272,   273,   274,   275,   603,     0,   276,   277,   278,\n      279,     0,   280,   281,   282,   283,   284,   285,   286,   287,\n-    1010,   289,   290,   291,   292,   293,   294,   295,   296,   297,\n-     298,   299,   300,   301,   302,   303,   304,   305,   306,  1011,\n-     308,  1012,   310,   311,   312,   313,     0,   314,   315,   316,\n-     317,  1014,   604,   319,  1015,   321,   322,   323,     0,   324,\n-     325,     0,     0,  1016,   327,   328,     0,     0,   329,   330,\n+     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,\n+     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,\n+     308,   309,   310,   311,   312,   313,     0,   314,   315,   316,\n+     317,     0,   604,   319,   320,   321,   322,   323,     0,   324,\n+     325,     0,   605,   326,   327,   328,     0,     0,   329,   330,\n      331,   332,   333,   606,   335,   336,   337,   338,   339,   340,\n      341,   342,   343,   344,     0,     0,     0,     0,   345,   346,\n      607,   348,   349,   350,   351,   352,   353,   354,     0,   355,\n-     356,   357,   358,   359,   360,     0,   361,   362,   363,  1017,\n+     356,   357,   358,   359,   360,     0,   361,   362,   363,   364,\n      365,   366,   367,   368,     0,   369,   370,   371,   372,   373,\n      374,   375,   376,   377,   378,   379,   380,   381,     0,   382,\n-     383,   384,   385,   386,   387,  1018,   389,   390,   391,   392,\n+     383,   384,   385,   386,   387,   388,   608,   390,   391,   392,\n      393,   394,   395,   396,   397,   398,   399,     0,     0,   400,\n      401,   402,   403,   404,   405,   406,   407,   408,   409,   410,\n-     411,   412,  1019,   414,     0,   415,   416,   417,   418,   419,\n+     411,   412,   413,   414,     0,   415,   416,   417,   418,   419,\n      420,   421,   422,   423,   424,   425,   426,   427,   428,   609,\n      430,     0,   431,   432,     0,   433,   434,   435,   436,   437,\n-     438,   439,     0,  1020,  1021,     0,     0,   442,   443,   610,\n-     445,   611,  1022,   447,   448,   612,   450,   451,   452,   453,\n+     438,   439,     0,   440,   441,     0,     0,   442,   443,   610,\n+     445,   611,     0,   447,   448,   612,   450,   451,   452,   453,\n      454,     0,     0,   455,   456,   457,     0,   458,   459,   460,\n-     461,     0,   462,   463,   464,   465,   466,   467,  1023,     0,\n+     461,     0,   462,   463,   464,   465,   466,   613,   468,     0,\n      469,   470,   471,   472,   473,   474,   475,     0,     0,   476,\n        0,     0,   477,   478,   479,   480,   481,   482,   483,   484,\n      485,   486,   487,   488,   489,   490,   491,   492,   493,   494,\n-     495,   496,   497,     0,     0,     0,     0,     0,     0,     0,\n-    1437,  1438,     0,     0,     0,     0,     0,  1028,     0,  1029,\n-       0,     0,     0,     0,  1030,  1031,  1032,  1033,   109,   985,\n-     629,   986,   987,   988,   989,   990,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,   110,   111,   112,\n-     113,   114,   115,   116,   117,     0,   118,   119,   120,     0,\n-       0,     0,     0,     0,   991,     0,     0,   121,   122,   123,\n-       0,   124,   125,   126,   127,   128,   129,   130, -1948,   992,\n-     133,   993,   994,     0,   136,   137,   138,   139,   140,   141,\n-     995,   599,   142,   143,   996,   997,   146,     0,   147,   148,\n-     149,   150,   600,     0,   601,     0,   998,   154,   155,   156,\n-     157,   158,   159,   160,   161,   162,     0,   163,   164,   165,\n-     166,   167,   168,     0,   169,   170,   171,  3320,   173,   174,\n-     175,   176,   177,   178,   179,   999,  1000,   182,  1001,   183,\n-       0,   184,   185,   186,   187,   188,   189,     0,   190,   191,\n-     192,   193,   194,     0,     0,   195,   196,   761,   198,   199,\n-       0,   200,   201,   202,     0,   203,   204,   205,     0,   206,\n-     207,   208,   209,  1002,   211,   212,   213,   214,   215,   602,\n-    1003,   217,     0,   218,   219,  1004,   221,     0,   222,     0,\n-     223,   224,     0,   225,   226,   227,   228, -1948,   230,     0,\n-     231,     0,  1005,  1006,   234,     0,   235,   236,   237,   238,\n-     239,   240,   241, -1948,   243,   244,   245,   246,     0,   247,\n-     248,   249,   250,   251,   252,   253,     0,   254,   255,   256,\n-     257,   258,   259,   260,   261,  1007,  1008,     0,  1009,     0,\n-     265,     0,     0,   268,   269,   270,   271,   272,   273,   274,\n-     275,     0,     0,   276,   277,   278, -1948,     0,   280,   281,\n-     282,   283,   284,   285,   286,   287,  1010,   289,   290,   291,\n-     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,\n-     302,   303,   304,   305,   306,  1011,   308,  1012,   310,   311,\n-     312,   313,     0,   314,   315,     0,   317,  1014,   604,   319,\n-    1015,   321,   322,   323,     0,   324,   325,     0,     0,  1016,\n-     327,   328,     0,     0,   329,   330,   331,   332,   333,   606,\n-     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,\n-       0,     0,     0,     0,   345,   346,   607,   348,   349,   350,\n-     351,   352,   353,   354,     0,   355,   356,   357,   358,   359,\n-     360,     0,   361,   362,   363,  1017,   365,   366,   367,   368,\n-       0,   369,   370,   371,   372,   373,   374,   375,   376,   377,\n-     378,   379,   380,   381,     0,   382,   383,   384,   385,   386,\n-     387,  1018,   389,   390,   391,   392,   393,   394,   395,   396,\n-     397,   398,   399,     0,     0,   400,   401,   402,   403,   404,\n-     405,   406,   407,   408,   409, -1948,   411,   412,  1019,   414,\n-       0,   415,   416,   417,   418,   419,   420,   421,   422,   423,\n-     424,   425,   426,   427,   428,   609,   430,     0,   431,   432,\n-       0,   433,   434,   435,   436,   437,   438,   439,     0,  1020,\n-    1021,     0,     0,   442,   443,   610,   445,   611,  1022,   447,\n-     448,   612,   450,   451,  3321,   453,   454,     0,     0,   455,\n-     456,   457,     0,   458,   459,   460,   461,     0,   462,   463,\n-     464,   465,   466,   467,  1023,     0,   469,   470,   471,   472,\n-     473,   474,   475,     0,     0,   476,     0,     0,   477,   478,\n-     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,\n-     489,   490,   491,   492,   493,   494,   495,   496,   497, -1948,\n-       0,     0,     0,     0,     0,     0,  1025,  1026,  1027,     0,\n-       0,     0,     0,  1028,     0,  1029,     0,     0,     0,     0,\n-    1030,  1031,  1032,  1033,   109,   985,   629,   986,   987,     0,\n-     989,   990,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,   110,   111,   112,   113,   114,   115,   116,\n-     117,     0,   118,   119,   120,     0,     0,     0,     0,     0,\n-     991,     0,     0,   121,   122,   123,     0,   124,   125,   126,\n-     127,   128,   129,   130,   131,   992,   133,   993,   994,     0,\n-     136,   137,   138,   139,   140,   141,   995,   599,   142,   143,\n-     996,   997,   146,     0,   147,   148,   149,   150,   600,     0,\n-     601,     0,   153,   154,   155,   156,   157,   158,   159,   160,\n-     161,   162,     0,   163,   164,   165,   166,   167,   168,     0,\n-     169,   170,   171,   172,   173,   174,   175,   176,   177,   178,\n-     179,   999,  1000,   182,     0,   183,     0,   184,   185,   186,\n-     187,   188,   189,     0,   190,   191,   192,   193,   194,     0,\n-       0,   195,   196,   761,   198,   199,     0,   200,   201,   202,\n-       0,   203,   204,   205,     0,   206,   207,   208,   209,  1002,\n-     211,   212,   213,   214,   215,   602,  1003,   217,     0,   218,\n-     219,  1004,   221,     0,   222,     0,   223,   224,     0,   225,\n-     226,   227,   228,   229,   230,     0,   231,     0,  1005,  1006,\n-     234,     0,   235,   236,   237,   238,   239,   240,   241,   242,\n-     243,   244,   245,   246,     0,   247,   248,   249,   250,   251,\n-     252,   253,     0,   254,   255,   256,   257,   258,   259,   260,\n-     261,  1007,  1008,     0,  1009,     0,   265,   266,   267,   268,\n-     269,   270,   271,   272,   273,   274,   275,     0,     0,   276,\n-     277,   278,   279,     0,   280,   281,   282,   283,   284,   285,\n-     286,   287,  1010,   289,   290,   291,   292,   293,   294,   295,\n-     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,\n-     306,  1011,   308,  1012,   310,   311,   312,   313,     0,   314,\n-     315,   316,   317,  1014,   604,   319,  1015,   321,   322,   323,\n-       0,   324,   325,     0,     0,   326,   327,   328,     0,     0,\n-     329,   330,   331,   332,   333,   606,   335,   336,   337,   338,\n-     339,   340,   341,   342,   343,   344,     0,     0,     0,     0,\n-     345,   346,   607,   348,   349,   350,   351,   352,   353,   354,\n-       0,   355,   356,   357,   358,   359,   360,     0,   361,   362,\n-     363,  1017,   365,   366,   367,   368,     0,   369,   370,   371,\n-     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,\n-       0,   382,   383,   384,   385,   386,   387,  2085,  2086,   390,\n-     391,   392,   393,   394,   395,   396,   397,   398,   399,     0,\n-       0,   400,   401,   402,   403,   404,   405,   406,   407,   408,\n-     409,   410,   411,   412,  1019,   414,     0,   415,   416,   417,\n-     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,\n-     428,   609,   430,     0,   431,   432,     0,   433,   434,   435,\n-     436,   437,   438,   439,     0,  1020,  1021,     0,     0,   442,\n-     443,   610,   445,   611,  1022,   447,   448,   612,   450,   451,\n-     452,   453,   454,     0,     0,   455,   456,   457,     0,   458,\n-     459,   460,   461,     0,   462,   463,   464,   465,   466,   467,\n-    1023,     0,   469,   470,   471,   472,   473,   474,   475,     0,\n-       0,   476,     0,     0,   477,   478,   479,   480,   481,   482,\n-     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,\n-     493,   494,   495,   496,   497,     0,     0,     0,     0,     0,\n-       0,     0,  2087,  2088,     0,     0,     0,     0,     0,  1028,\n-       0,  1029,     0,     0,     0,     0,  1030,  1031,  1032,  1033,\n-     109,   985,   629,   986,   987,   988,   989,   990,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,   110,\n-     111,   112,   113,   114,   115,   116,   117,     0,   118,   119,\n-     120,     0,     0,     0,     0,     0,   991,     0,     0,   121,\n-     122,   123,     0,   124,   125,   126,   127,   128,   129,   130,\n-     131,   992,   133,   993,   994,     0,   136,   137,   138,   139,\n-     140,   141,   995,   599,   142,   143,   996,   997,   146,     0,\n-     147,   148,   149,   150,   600,     0,   601,     0,   153,   154,\n-     155,   156,   157,   158,   159,   160,   161,   162,     0,   163,\n-     164,   165,   166,   167,   168,     0,   169,   170,   171,   172,\n-     173,   174,   175,   176,   177,   178,   179,   999,  1000,   182,\n-       0,   183,     0,   184,   185,   186,   187,   188,   189,     0,\n-     190,   191,   192,   193,   194,     0,     0,   195,   196,   761,\n-     198,   199,     0,   200,   201,   202,     0,   203,   204,   205,\n-       0,   206,   207,   208,   209,  1002,   211,   212,   213,   214,\n-     215,   602,  1003,   217,     0,   218,   219,  1004,   221,     0,\n-     222,     0,   223,   224,     0,   225,   226,   227,   228,   229,\n-     230,     0,   231,     0,  1005,  1006,   234,     0,   235,   236,\n-     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,\n-       0,   247,   248,   249,   250,   251,   252,   253,     0,   254,\n-     255,   256,   257,   258,   259,   260,   261,  1007,  1008,     0,\n-    1009,     0,   265,     0,   267,   268,   269,   270,   271,   272,\n-     273,   274,   275,     0,     0,   276,   277,   278,   279,     0,\n-     280,   281,   282,   283,   284,   285,   286,   287,  1010,   289,\n-     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,\n-     300,   301,   302,   303,   304,   305,   306,  1011,   308,  1012,\n-     310,   311,   312,   313,     0,   314,   315,   316,   317,  1014,\n-     604,   319,  1015,   321,   322,   323,     0,   324,   325,     0,\n-       0,  1016,   327,   328,     0,     0,   329,   330,   331,   332,\n-     333,   606,   335,   336,   337,   338,   339,   340,   341,   342,\n-     343,   344,     0,     0,     0,     0,   345,   346,   607,   348,\n-     349,   350,   351,   352,   353,   354,     0,   355,   356,   357,\n-     358,   359,   360,     0,   361,   362,   363,  1017,   365,   366,\n-     367,   368,     0,   369,   370,   371,   372,   373,   374,   375,\n-     376,   377,   378,   379,   380,   381,     0,   382,   383,   384,\n-     385,   386,   387,  1018,   389,   390,   391,   392,   393,   394,\n-     395,   396,   397,   398,   399,     0,     0,   400,   401,   402,\n-     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,\n-    1019,   414,     0,   415,   416,   417,   418,   419,   420,   421,\n-     422,   423,   424,   425,   426,   427,   428,   609,   430,     0,\n-     431,   432,     0,   433,   434,   435,   436,   437,   438,   439,\n-       0,  1020,  1021,     0,     0,   442,   443,   610,   445,   611,\n-    1022,   447,   448,   612,   450,   451,   452,   453,   454,     0,\n-       0,   455,   456,   457,     0,   458,   459,   460,   461,     0,\n-     462,   463,   464,   465,   466,   467,  1023,     0,   469,   470,\n-     471,   472,   473,   474,   475,     0,     0,   476,     0,     0,\n-     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,\n-     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,\n-     497,     0,     0,     0,     0,     0,     0,     0,  1437,  1438,\n-       0,     0,     0,     0,     0,  1028,     0,  1029,     0,     0,\n-       0,     0,  1030,  1031,  1032,  1033,   109,   985,   629,   986,\n-     987,     0,   989,   990,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,   110,   111,   112,   113,   114,\n-     115,   116,   117,     0,   118,   119,   120,     0,     0,     0,\n-       0,     0,   991,     0,     0,   121,   122,   123,     0,   124,\n-     125,   126,   127,   128,   129,   130,   131,   992,   133,   993,\n-     994,     0,   136,   137,   138,   139,   140,   141,   995,   599,\n-     142,   143,   996,   997,   146,     0,   147,   148,   149,   150,\n-     600,     0,   601,     0,   153,   154,   155,   156,   157,   158,\n-     159,   160,   161,   162,     0,   163,   164,   165,   166,   167,\n-     168,     0,   169,   170,   171,   172,   173,   174,   175,   176,\n-     177,   178,   179,   999,  1000,   182,     0,   183,     0,   184,\n-     185,   186,   187,   188,   189,     0,   190,   191,   192,   193,\n-     194,     0,     0,   195,   196,   761,   198,   199,     0,   200,\n-     201,   202,     0,   203,   204,   205,     0,   206,   207,   208,\n-     209,  1002,   211,   212,   213,   214,   215,   602,  1003,   217,\n-       0,   218,   219,  1004,   221,     0,   222,     0,   223,   224,\n-       0,   225,   226,   227,   228,   229,   230,     0,   231,     0,\n-    1005,  1006,   234,     0,   235,   236,   237,   238,   239,   240,\n-     241,   242,   243,   244,   245,   246,     0,   247,   248,   249,\n-     250,   251,   252,   253,     0,   254,   255,   256,   257,   258,\n-     259,   260,   261,  1007,  1008,     0,  1009,     0,   265,   266,\n-     267,   268,   269,   270,   271,   272,   273,   274,   275,     0,\n-       0,   276,   277,   278,   279,     0,   280,   281,   282,   283,\n-     284,   285,   286,   287,  1010,   289,   290,   291,   292,   293,\n-     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,\n-     304,   305,   306,  1011,   308,  1012,   310,   311,   312,   313,\n-       0,   314,   315,   316,   317,  1014,   604,   319,  1015,   321,\n-     322,   323,     0,   324,   325,     0,     0,   326,   327,   328,\n-       0,     0,   329,   330,   331,   332,   333,   606,   335,   336,\n-     337,   338,   339,   340,   341,   342,   343,   344,     0,     0,\n-       0,     0,   345,   346,   607,   348,   349,   350,   351,   352,\n-     353,   354,     0,   355,   356,   357,   358,   359,   360,     0,\n-     361,   362,   363,  1017,   365,   366,   367,   368,     0,   369,\n-     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,\n-     380,   381,     0,   382,   383,   384,   385,   386,   387,  1018,\n-     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,\n-     399,     0,     0,   400,   401,   402,   403,   404,   405,   406,\n-     407,   408,   409,   410,   411,   412,  1019,   414,     0,   415,\n-     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,\n-     426,   427,   428,   609,   430,     0,   431,   432,     0,   433,\n-     434,   435,   436,   437,   438,   439,     0,  1020,  1021,     0,\n-       0,   442,   443,   610,   445,   611,  1022,   447,   448,   612,\n-     450,   451,   452,   453,   454,     0,     0,   455,   456,   457,\n-       0,   458,   459,   460,   461,     0,   462,   463,   464,   465,\n-     466,   467,  1023,     0,   469,   470,   471,   472,   473,   474,\n-     475,     0,     0,   476,     0,     0,   477,   478,   479,   480,\n-     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,\n-     491,   492,   493,   494,   495,   496,   497,     0,     0,     0,\n-       0,     0,     0,   109,   985,   629,   986,   987,   988,   989,\n-     990,  1028,     0,  1029,     0,     0,     0,     0,  1030,  1031,\n-    1032,  1033,   110,   111,   112,   113,   114,   115,   116,   117,\n-       0,   118,   119,   120,     0,     0,     0,     0,     0,   991,\n+     495,   496,   497,   109,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,   614,\n+       0,     0,   110,   111,   112,   113,   114,   115,   116,   117,\n+       0,   118,   119,   120,     0,     0,     0,     0,     0,     0,\n        0,     0,   121,   122,   123,     0,   124,   125,   126,   127,\n-     128,   129,   130,     0,   992,   133,   993,   994,     0,   136,\n-     137,   138,   139,   140,   141,   995,   599,   142,   143,   996,\n-     997,   146,     0,   147,   148,   149,   150,   600,     0,   601,\n-       0,   998,   154,   155,   156,   157,   158,   159,   160,   161,\n+     128,   129,   130,   131,   132,   133,   134,   135,     0,   136,\n+     137,   138,   139,   140,   141,     0,   599,   142,   143,   144,\n+     145,   146,     0,   147,   148,   149,   150,   600,     0,   601,\n+       0,   153,   154,   155,   156,   157,   158,   159,   160,   161,\n      162,     0,   163,   164,   165,   166,   167,   168,     0,   169,\n      170,   171,   172,   173,   174,   175,   176,   177,   178,   179,\n-     999,  1000,   182,  1001,   183,     0,   184,   185,   186,   187,\n+     180,   181,   182,     0,   183,     0,   184,   185,   186,   187,\n      188,   189,     0,   190,   191,   192,   193,   194,     0,     0,\n-     195,   196,   761,   198,   199,     0,   200,   201,   202,     0,\n-     203,     0,   205,     0,   206,   207,   208,   209,  1002,   211,\n-     212,   213,   214,   215,   602,  1003,   217,     0,   218,   219,\n-    1004,   221,     0,   222,     0,   223,   224,     0,   225,   226,\n-     227,   228,     0,   230,     0,   231,     0,  1005,  1006,   234,\n-       0,   235,   236,   237,   238,   239,   240,   241,     0,   243,\n+     195,   196,   197,   198,   199,     0,   200,   201,   202,     0,\n+     203,   204,   205,     0,   206,   207,   208,   209,   210,   211,\n+     212,   213,   214,   215,   602,     0,   217,     0,   218,   219,\n+     220,   221,     0,   222,     0,   223,   224,     0,   225,   226,\n+     227,   228,   229,   230,     0,   231,     0,   232,   233,   234,\n+       0,   235,   236,   237,   238,   239,   240,   241,   242,   243,\n      244,   245,   246,     0,   247,   248,   249,   250,   251,   252,\n      253,     0,   254,   255,   256,   257,   258,   259,   260,   261,\n-    1007,  1008,     0,  1009,     0,   265,     0,     0,   268,   269,\n+     262,   263,     0,   264,     0,   265,   266,   267,   268,   269,\n      270,   271,   272,   273,   274,   275,     0,     0,   276,   277,\n-     278,     0,     0,   280,   281,   282,   283,   284,   285,   286,\n-     287,  1010,   289,   290,   291,   292,   293,   294,   295,   296,\n+     278,   279,     0,   280,   281,   282,   283,   284,   285,   286,\n+     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,\n      297,   298,   299,   300,   301,   302,   303,   304,   305,   306,\n-    1011,   308,  1012,   310,   311,   312,   313,     0,   314,   315,\n-       0,   317,  1014,   604,   319,  1015,   321,   322,   323,     0,\n-     324,   325,     0,     0,  1016,   327,   328,     0,     0,   329,\n+     307,   308,   309,   310,   311,   312,   313,     0,   314,   315,\n+     316,   317,     0,   604,   319,   320,   321,   322,   323,     0,\n+     324,   325,     0,     0,   326,   327,   328,     0,     0,   329,\n      330,   331,   332,   333,   606,   335,   336,   337,   338,   339,\n      340,   341,   342,   343,   344,     0,     0,     0,     0,   345,\n      346,   607,   348,   349,   350,   351,   352,   353,   354,     0,\n      355,   356,   357,   358,   359,   360,     0,   361,   362,   363,\n-    1017,   365,   366,   367,   368,     0,   369,   370,   371,   372,\n+     364,   365,   366,   367,   368,     0,   369,   370,   371,   372,\n      373,   374,   375,   376,   377,   378,   379,   380,   381,     0,\n-     382,   383,   384,   385,   386,   387,  1018,   389,   390,   391,\n+     382,   383,   384,   385,   386,   387,   388,   608,   390,   391,\n      392,   393,   394,   395,   396,   397,   398,   399,     0,     0,\n      400,   401,   402,   403,   404,   405,   406,   407,   408,   409,\n-       0,   411,   412,  1019,   414,     0,   415,   416,   417,   418,\n+     410,   411,   412,   413,   414,     0,   415,   416,   417,   418,\n      419,   420,   421,   422,   423,   424,   425,   426,   427,   428,\n      609,   430,     0,   431,   432,     0,   433,   434,   435,   436,\n-     437,   438,   439,     0,  1020,  1021,     0,     0,   442,   443,\n-     610,   445,   611,  1022,   447,   448,   612,   450,   451,   452,\n+     437,   438,   439,     0,   440,   441,     0,     0,   442,   443,\n+     610,   445,   611,     0,   447,   448,   612,   450,   451,   452,\n      453,   454,     0,     0,   455,   456,   457,     0,   458,   459,\n-     460,   461,     0,   462,   463,   464,   465,   466,   467,  1023,\n+     460,   461,     0,   462,   463,   464,   465,   466,   467,   468,\n        0,   469,   470,   471,   472,   473,   474,   475,     0,     0,\n      476,     0,     0,   477,   478,   479,   480,   481,   482,   483,\n      484,   485,   486,   487,   488,   489,   490,   491,   492,   493,\n-     494,   495,   496,   497,     0,     0,     0,     0,     0,     0,\n-       0,  1025,  1026,  1027,     0,     0,     0,     0,  1028,     0,\n-    1029,     0,     0,     0,     0,  1030,  1031,  1032,  1033,   109,\n-     985,   629,   986,   987,     0,   989,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,   110,   111,\n-     112,   113,   114,   115,   116,   117,     0,   118,   119,   120,\n-       0,     0,     0,     0,     0,   991,     0,     0,   121,   122,\n-     123,     0,   124,   125,   126,   127,   128,   129,   130,   131,\n-     992,   133,   993,   994,     0,   136,   137,   138,   139,   140,\n-     141,   995,     0,   142,   143,   996,   997,   146,     0,   147,\n-     148,   149,   150,   151,     0,   152,     0,   153,   154,   155,\n-     156,   157,   158,   159,   160,   161,   162,     0,   163,   164,\n-     165,   166,   167,   168,     0,   169,   170,   171,   172,   173,\n-     174,   175,   176,   177,   178,   179,   999,  1000,   182,     0,\n-     183,     0,   184,   185,   186,   187,   188,   189,     0,   190,\n-     191,   192,   193,   194,     0,     0,   195,   196,   761,   198,\n-     199,     0,   200,   201,   202,     0,   203,   204,   205,     0,\n-     206,   207,   208,   209,  1002,   211,   212,   213,   214,   215,\n-     216,  1003,   217,     0,   218,   219,  1004,   221,     0,   222,\n-       0,   223,   224,     0,   225,   226,   227,   228,   229,   230,\n-       0,   231,  2902,  1005,  1006,   234,     0,   235,   236,   237,\n-     238,   239,   240,   241,   242,   243,   244,   245,   246,     0,\n-     247,   248,   249,   250,   251,   252,   253,     0,   254,   255,\n-     256,   257,   258,   259,   260,   261,  1007,  1008,     0,  1009,\n-       0,   265,   266,   267,   268,   269,   270,   271,   272,   273,\n-     274,   275,     0,     0,   276,   277,   278,   279,     0,   280,\n-     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,\n-     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,\n-     301,   302,   303,   304,   305,   306,  1011,   308,  1012,   310,\n-     311,   312,   313,     0,   314,   315,   316,   317,  1014,   318,\n-     319,  1015,   321,   322,   323,     0,   324,   325,     0,     0,\n-     326,   327,   328,     0,     0,   329,   330,   331,   332,   333,\n-     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,\n-     344,     0,     0,     0,     0,   345,   346,   347,   348,   349,\n-     350,   351,   352,   353,   354,     0,   355,   356,   357,   358,\n-     359,   360,     0,   361,   362,   363,  1017,   365,   366,   367,\n-     368,     0,   369,   370,   371,   372,   373,   374,   375,   376,\n-     377,   378,   379,   380,   381,     0,   382,   383,   384,   385,\n-     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,\n-     396,   397,   398,   399,     0,     0,   400,   401,   402,   403,\n-     404,   405,   406,   407,   408,   409,   410,   411,   412,  1019,\n-     414,     0,   415,   416,   417,   418,   419,   420,   421,   422,\n-     423,   424,   425,   426,   427,   428,   429,   430,     0,   431,\n-     432,     0,   433,   434,   435,   436,   437,   438,   439,     0,\n-    1020,  1021,     0,     0,   442,   443,   444,   445,   446,  1022,\n-     447,   448,   449,   450,   451,   452,   453,   454,     0,     0,\n-     455,   456,   457,     0,   458,   459,   460,   461,     0,   462,\n-     463,   464,   465,   466,   467,  1023,     0,   469,   470,   471,\n-     472,   473,   474,   475,     0,     0,   476,     0,     0,   477,\n-     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,\n-     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,\n-       0,     0,     0,     0,   109,   985,   629,   986,   987,     0,\n-     989,     0,     0,     0,  1028,     0,  2622,     0,     0,     0,\n-       0,  1030,  1031,   110,   111,   112,   113,   114,   115,   116,\n+     494,   495,   496,   497,   109,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+      45,     0,     0,   110,   111,   112,   113,   114,   115,   116,\n      117,     0,   118,   119,   120,     0,     0,     0,     0,     0,\n-     991,     0,     0,   121,   122,   123,     0,   124,   125,   126,\n-     127,   128,   129,   130,   131,   992,   133,   993,   994,     0,\n-     136,   137,   138,   139,   140,   141,   995,     0,   142,   143,\n-     996,   997,   146,     0,   147,   148,   149,   150,   151,     0,\n-     152,     0,   153,   154,   155,   156,   157,   158,   159,   160,\n+       0,     0,     0,   121,   122,   123,     0,   124,   125,   126,\n+     127,   128,   129,   130,   131,   132,   133,   134,   135,     0,\n+     136,   137,   138,   139,   140,   141,     0,   599,   142,   143,\n+     144,   145,   146,     0,   147,   148,   149,   150,   600,     0,\n+     601,     0,   153,   154,   155,   156,   157,   158,   159,   160,\n      161,   162,     0,   163,   164,   165,   166,   167,   168,     0,\n      169,   170,   171,   172,   173,   174,   175,   176,   177,   178,\n-     179,   999,  1000,   182,     0,   183,     0,   184,   185,   186,\n+     179,   180,   181,   182,     0,   183,     0,   184,   185,   186,\n      187,   188,   189,     0,   190,   191,   192,   193,   194,     0,\n-       0,   195,   196,   761,   198,   199,     0,   200,   201,   202,\n-       0,   203,   204,   205,     0,   206,   207,   208,   209,  1002,\n-     211,   212,   213,   214,   215,   216,  1003,   217,     0,   218,\n-     219,  1004,   221,     0,   222,     0,   223,   224,     0,   225,\n-     226,   227,   228,   229,   230,     0,   231,     0,  1005,  1006,\n+       0,   195,   196,   197,   198,   199,     0,   200,   201,   202,\n+       0,   203,   204,   205,     0,   206,   207,   208,   209,   210,\n+     211,   212,   213,   214,   215,   602,     0,   217,     0,   218,\n+     219,   220,   221,     0,   222,     0,   223,   224,     0,   225,\n+     226,   227,   228,   229,   230,     0,   231,     0,   232,   233,\n      234,     0,   235,   236,   237,   238,   239,   240,   241,   242,\n      243,   244,   245,   246,     0,   247,   248,   249,   250,   251,\n      252,   253,     0,   254,   255,   256,   257,   258,   259,   260,\n-     261,  1007,  1008,     0,  1009,     0,   265,   266,   267,   268,\n+     261,   262,   263,     0,   264,     0,   265,   266,   267,   268,\n      269,   270,   271,   272,   273,   274,   275,     0,     0,   276,\n      277,   278,   279,     0,   280,   281,   282,   283,   284,   285,\n      286,   287,   288,   289,   290,   291,   292,   293,   294,   295,\n      296,   297,   298,   299,   300,   301,   302,   303,   304,   305,\n-     306,  1011,   308,  1012,   310,   311,   312,   313,     0,   314,\n-     315,   316,   317,  1014,   318,   319,  1015,   321,   322,   323,\n+     306,   307,   308,   309,   310,   311,   312,   313,     0,   314,\n+     315,   316,   317,     0,   604,   319,   320,   321,   322,   323,\n        0,   324,   325,     0,     0,   326,   327,   328,     0,     0,\n-     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,\n+     329,   330,   331,   332,   333,   606,   335,   336,   337,   338,\n      339,   340,   341,   342,   343,   344,     0,     0,     0,     0,\n-     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,\n+     345,   346,   607,   348,   349,   350,   351,   352,   353,   354,\n        0,   355,   356,   357,   358,   359,   360,     0,   361,   362,\n-     363,  1017,   365,   366,   367,   368,     0,   369,   370,   371,\n+     363,   364,   365,   366,   367,   368,     0,   369,   370,   371,\n      372,   373,   374,   375,   376,   377,   378,   379,   380,   381,\n        0,   382,   383,   384,   385,   386,   387,   388,   389,   390,\n      391,   392,   393,   394,   395,   396,   397,   398,   399,     0,\n        0,   400,   401,   402,   403,   404,   405,   406,   407,   408,\n-     409,   410,   411,   412,  1019,   414,     0,   415,   416,   417,\n+     409,   410,   411,   412,   413,   414,     0,   415,   416,   417,\n      418,   419,   420,   421,   422,   423,   424,   425,   426,   427,\n-     428,   429,   430,     0,   431,   432,     0,   433,   434,   435,\n-     436,   437,   438,   439,     0,  1020,  1021,     0,     0,   442,\n-     443,   444,   445,   446,  1022,   447,   448,   449,   450,   451,\n+     428,   609,   430,     0,   431,   432,     0,   433,   434,   435,\n+     436,   437,   438,   439,     0,   440,   441,     0,     0,   442,\n+     443,   610,   445,   611,     0,   447,   448,   612,   450,   451,\n      452,   453,   454,     0,     0,   455,   456,   457,     0,   458,\n      459,   460,   461,     0,   462,   463,   464,   465,   466,   467,\n-    1023,     0,   469,   470,   471,   472,   473,   474,   475,     0,\n+     468,     0,   469,   470,   471,   472,   473,   474,   475,     0,\n        0,   476,     0,     0,   477,   478,   479,   480,   481,   482,\n      483,   484,   485,   486,   487,   488,   489,   490,   491,   492,\n-     493,   494,   495,   496,   497,     0,     0,     0,     0,   505,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,  1028,\n-       0,  2622,     0,     0,     0,     0,  1030,  1031,   110,   111,\n-     112,   113,   114,   115,   116,   117,     0,   118,   119,   120,\n-       0,     0,     0,     0,     0,     0,   947,     0,     0,   122,\n-     123,     0,   124,   125,   126,     0,   128,   129,   130,   131,\n-     132,     0,   134,   135,     0,   136,   137,   138,   139,   140,\n-     141,     0,     0,   142,   143,   144,   145,   146,     0,   147,\n-     148,   149,   150,   151,     0,     0,     0,   153,   154,   155,\n-     156,   157,   158,     0,   160,   161,   162,     0,   163,   164,\n-     165,   166,   167,   168,     0,     0,   170,   171,   172,   173,\n-     174,   175,   176,   177,   178,   179,   180,   181,   182,     0,\n-     183,     0,   184,   185,   186,   187,   188,   189,     0,   190,\n-     191,   192,   193,   194,     0,     0,   195,   196,   197,   198,\n-     199,     0,   200,   201,   202,     0,   203,   204,   205,  -498,\n-     206,   207,   208,   209,   210,   211,   212,   213,   214,   215,\n-     216,     0,   217,  -498,   218,   219,   220,   221,  -498,   222,\n-       0,   223,     0,     0,     0,   226,   227,   506,     0,   230,\n-       0,   231,     0,   232,   233,   234,     0,   235,   236,   237,\n-     238,   239,   240,   241,     0,   243,   244,   245,   246,     0,\n-     247,   248,   249,   250,   251,   252,   253,     0,   254,     0,\n-     256,   257,   258,   259,   260,   261,   262,   263,  -498,   264,\n-       0,   265,     0,     0,   268,     0,   270,   271,   272,   273,\n-     274,   275,     0,     0,   276,     0,   278,     0,  -498,   280,\n-     281,   282,   283,   284,   285,   286,   287,   507,   289,   290,\n-     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,\n-     301,   302,   303,   304,   305,   306,   307,     0,   309,   310,\n-     311,   312,   313,     0,   314,   315,     0,   317,     0,   318,\n-     319,   320,   321,   322,   323,  -498,   324,   325,     0,     0,\n-     326,   327,   328,     0,  -498,   329,   330,     0,   332,     0,\n-     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,\n-     344,     0,     0,     0,     0,   345,   346,   347,     0,   349,\n-     350,   351,   352,   353,   354,     0,   355,   356,   357,   358,\n-     359,   360,     0,   361,   362,   363,   364,   365,   366,   367,\n-     368,     0,   369,   370,   371,   372,   373,   374,   375,   376,\n-     377,   378,   379,   380,   381,     0,   382,   383,     0,   385,\n-     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,\n-     396,   397,   398,   399,     0,     0,   400,   401,   402,   403,\n-     404,   405,   406,   407,   408,   409,     0,   411,   412,   413,\n-     414,     0,   415,   416,   417,   418,   419,   420,   421,   422,\n-     423,   424,   425,   426,   508,   428,   429,   430,     0,   431,\n-     432,     0,   433,     0,   435,   436,   437,   438,   439,     0,\n-     440,   441,     0,     0,   442,   443,   444,   445,   446,     0,\n-     447,   448,   449,   450,   451,   452,   453,   454,  -498,     0,\n-     455,   456,   457,     0,   458,   459,   460,   461,     0,   462,\n-     463,   464,   465,   466,   467,   468,     0,   469,     0,   471,\n-     472,   473,   474,   475,     0,     0,   476,     0,     0,   477,\n-     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,\n-     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,\n-     505,     0,   527,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,  1097,     0,   110,\n-     111,   112,   113,   114,   115,   116,   117,     0,   118,   119,\n-     120,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-     122,   123,     0,   124,   125,   126,     0,   128,   129,   130,\n-     131,   132,     0,   134,   135,     0,   136,   137,   138,   139,\n-     140,   141,     0,     0,   142,   143,   144,   145,   146,     0,\n-     147,   148,   149,   150,   151,     0,     0,     0,   153,   154,\n-     155,   156,   157,   158,     0,   160,   161,   162,     0,   163,\n-     164,   165,   166,   167,   168,     0,     0,   170,   171,   172,\n-     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,\n-       0,   183,     0,   184,   185,   186,   187,   188,   189,     0,\n-     190,   191,   192,   193,   194,     0,     0,   195,   196,   197,\n-     198,   199,     0,   200,   201,   202,     0,   203,   204,   205,\n-       0,   206,   207,   208,   209,   210,   211,   212,   213,   214,\n-     215,   216,     0,   217,     0,   218,   219,   220,   221,     0,\n-     222,     0,   223,     0,     0,     0,   226,   227,   506,     0,\n-     230,     0,   231,     0,   232,   233,   234,     0,   235,   236,\n-     237,   238,   239,   240,   241,     0,   243,   244,   245,   246,\n-       0,   247,   248,   249,   250,   251,   252,   253,     0,   254,\n-       0,   256,   257,   258,   259,   260,   261,   262,   263,     0,\n-     264,     0,   265,     0,     0,   268,     0,   270,   271,   272,\n-     273,   274,   275,     0,     0,   276,     0,   278,     0,     0,\n-     280,   281,   282,   283,   284,   285,   286,   287,   507,   289,\n-     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,\n-     300,   301,   302,   303,   304,   305,   306,   307,     0,   309,\n-     310,   311,   312,   313,     0,   314,   315,     0,   317,     0,\n-     318,   319,   320,   321,   322,   323,     0,   324,   325,     0,\n-       0,   326,   327,   328,     0,     0,   329,   330,     0,   332,\n-       0,   334,   335,   336,   337,   338,   339,   340,   341,   342,\n-     343,   344,     0,     0,     0,     0,   345,   346,   347,     0,\n-     349,   350,   351,   352,   353,   354,     0,   355,   356,   357,\n-     358,   359,   360,     0,   361,   362,   363,   364,   365,   366,\n-     367,   368,     0,   369,   370,   371,   372,   373,   374,   375,\n-     376,   377,   378,   379,   380,   381,     0,   382,   383,     0,\n-     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,\n-     395,   396,   397,   398,   399,     0,     0,   400,   401,   402,\n-     403,   404,   405,   406,   407,   408,   409,     0,   411,   412,\n-     413,   414,     0,   415,   416,   417,   418,   419,   420,   421,\n-     422,   423,   424,   425,   426,   508,   428,   429,   430,     0,\n-     431,   432,     0,   433,     0,   435,   436,   437,   438,   439,\n-       0,   440,   441,     0,     0,   442,   443,   444,   445,   446,\n-       0,   447,   448,   449,   450,   451,   452,   453,   454,     0,\n-       0,   455,   456,   457,     0,   458,   459,   460,   461,     0,\n-     462,   463,   464,   465,   466,   467,   468,     0,   469,     0,\n-     471,   472,   473,   474,   475,     0,     0,   476,     0,     0,\n-     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,\n-     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,\n-     497,   831,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,  2356,  3071,     0,\n-     110,   111,   112,   113,   114,   115,   116,   117,     0,   118,\n-     119,   120,     3,     4,     0,   832,     0,     0,     0,     0,\n-     833,   122,   123,     0,   124,   125,   126,   834,   128,   129,\n-     130,   835,   836,   837,   838,   839,     0,   136,   137,   138,\n-     139,   140,   141,     0,     0,   142,   143,   840,   841,   146,\n-       0,   147,   148,   149,   150,   842,     0,   843,     0,   844,\n-     154,   155,   156,   157,   158,   845,   160,   161,   162,     0,\n-     163,   164,   165,   166,   167,   168,     0,   846,   170,   171,\n-     172,   173,   174,   175,   176,   177,   178,   179,   847,   848,\n-     182,     0,   183,     0,   184,   185,   186,   187,   188,   189,\n-       0,   190,   191,   192,   193,   194,     0,     0,   195,   196,\n-     197,   198,   199,     0,   200,   201,   202,     0,   203,   204,\n-     205,     0,   206,   207,   208,   209,   849,   211,   212,   213,\n-     214,   215,   850,     0,   217,     0,   218,   219,   851,   221,\n-       0,   222,     0,   223,   852,    21,   853,   226,   227,   854,\n-     855,   230,     0,   231,     0,   856,   857,   234,     0,   235,\n-     236,   237,   238,   239,   240,   241,   858,   243,   244,   245,\n-     246,     0,   247,   248,   249,   250,   251,   252,   253,     0,\n-     254,   859,   860,   257,   258,   259,   260,   261,   861,   862,\n-       0,   863,     0,   265,   864,   865,   268,   866,   270,   271,\n-     272,   273,   274,   275,     0,     0,   276,   867,   278,   868,\n-       0,   280,   281,   282,   283,   284,   285,   286,   287,   869,\n-     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,\n-     299,   300,   301,   302,   303,   304,   305,   306,   870,   871,\n-     872,   310,   311,   312,   873,     0,   314,   315,   874,   317,\n-       0,   875,   319,   876,   321,   322,   323,     0,   324,   325,\n-       0,     0,   326,   327,   328,     0,     0,   329,   877,   878,\n-     332,   879,   880,   335,   336,   337,   338,   339,   340,   341,\n-     342,   343,   344,    25,    26,    27,     0,   345,   346,   881,\n-     882,   349,   350,   883,   352,   353,   354,     0,   355,   356,\n-     357,   358,   359,   360,     0,   361,   362,   363,   884,   365,\n-     366,   367,   368,     0,   369,   370,   371,   372,   373,   374,\n-     375,   376,   377,   378,   379,   380,   381,     0,   382,   383,\n-     885,   385,   386,   387,   886,   389,   390,   391,   392,   393,\n-     394,   395,   396,   397,   398,   399,    32,   887,   400,   401,\n-     402,   403,   404,   405,   888,   407,   408,   409,   889,   411,\n-     412,   890,   414,     0,   415,   416,   417,   418,   419,   420,\n-     421,   422,   423,   424,   425,   426,   891,   428,   892,   430,\n-       0,   431,   432,    37,   433,   893,   435,   436,   437,   438,\n-     439,     0,   894,   895,     0,     0,   442,   443,   896,   445,\n-     897,     0,   447,   448,   898,   450,   451,   452,   453,   454,\n-       0,     0,   455,   456,   457,    39,   458,   459,   460,   461,\n-       0,   462,   463,   464,   465,   466,   899,   900,     0,   469,\n-     901,   471,   472,   473,   474,   475,     0,     0,   476,     0,\n-      43,   477,   478,   479,   480,   481,   482,   902,   903,   904,\n-     905,   906,   907,   908,   909,   910,   911,   912,   494,   495,\n-     496,   497,     0,   109,    44,   527,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,    45,     0,\n-       0,     0,   110,   111,   112,   113,   114,   115,   116,   117,\n-       0,   118,   119,   120,     0,     0,     0,     0,     0,     0,\n-       0,     0,   121,   122,   123,     0,   124,   125,   126,   127,\n-     128,   129,   130,   131,   132,   133,   134,   135,     0,   136,\n-     137,   138,   139,   140,   141,     0,   599,   142,   143,   144,\n-     145,   146,     0,   147,   148,   149,   150,   600,     0,   601,\n-       0,   153,   154,   155,   156,   157,   158,   159,   160,   161,\n-     162,     0,   163,   164,   165,   166,   167,   168,     0,   169,\n-     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,\n-     180,   181,   182,     0,   183,     0,   184,   185,   186,   187,\n-     188,   189,     0,   190,   191,   192,   193,   194,     0,     0,\n-     195,   196,   197,   198,   199,     0,   200,   201,   202,     0,\n-     203,   204,   205,     0,   206,   207,   208,   209,   210,   211,\n-     212,   213,   214,   215,   602,     0,   217,     0,   218,   219,\n-     220,   221,     0,   222,     0,   223,   224,    21,   225,   226,\n-     227,   228,   229,   230,     0,   231,     0,   232,   233,   234,\n-       0,   235,   236,   237,   238,   239,   240,   241,   242,   243,\n-     244,   245,   246,     0,   247,   248,   249,   250,   251,   252,\n-     253,     0,   254,   255,   256,   257,   258,   259,   260,   261,\n-     262,   263,     0,   264,     0,   265,   266,   267,   268,   269,\n-     270,   271,   272,   273,   274,   275,   603,     0,   276,   277,\n-     278,   279,     0,   280,   281,   282,   283,   284,   285,   286,\n-     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,\n-     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,\n-     307,   308,   309,   310,   311,   312,   313,     0,   314,   315,\n-     316,   317,     0,   604,   319,   320,   321,   322,   323,     0,\n-     324,   325,     0,   605,   326,   327,   328,     0,     0,   329,\n-     330,   331,   332,   333,   606,   335,   336,   337,   338,   339,\n-     340,   341,   342,   343,   344,    25,    26,    27,     0,   345,\n-     346,   607,   348,   349,   350,   351,   352,   353,   354,     0,\n-     355,   356,   357,   358,   359,   360,     0,   361,   362,   363,\n-     364,   365,   366,   367,   368,     0,   369,   370,   371,   372,\n-     373,   374,   375,   376,   377,   378,   379,   380,   381,     0,\n-     382,   383,   384,   385,   386,   387,   388,   608,   390,   391,\n-     392,   393,   394,   395,   396,   397,   398,   399,    32,     0,\n-     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,\n-     410,   411,   412,   413,   414,     0,   415,   416,   417,   418,\n-     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,\n-     609,   430,     0,   431,   432,    37,   433,   434,   435,   436,\n-     437,   438,   439,     0,   440,   441,     0,     0,   442,   443,\n-     610,   445,   611,     0,   447,   448,   612,   450,   451,   452,\n-     453,   454,     0,     0,   455,   456,   457,    39,   458,   459,\n-     460,   461,     0,   462,   463,   464,   465,   466,   613,   468,\n-       0,   469,   470,   471,   472,   473,   474,   475,     0,     0,\n-     476,     0,    43,   477,   478,   479,   480,   481,   482,   483,\n-     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,\n-     494,   495,   496,   497,     0,     0,    44,   831,  1397,   629,\n-       0,     0,     0,   989,     0,     0,     0,     0,     0,     0,\n-     614,     0,     0,     0,     0,     0,   110,   111,   112,   113,\n-     114,   115,   116,   117,     0,   118,   119,   120,     0,     0,\n-       0,   832,     0,     0,     0,     0,   833,   122,   123,     0,\n-     124,   125,   126,   834,   128,   129,   130,   835,   836,   837,\n-     838,   839,     0,   136,   137,   138,   139,   140,   141,     0,\n-       0,   142,   143,   840,   841,   146,     0,   147,   148,   149,\n-     150,   842,     0,   843,     0,   844,   154,   155,   156,   157,\n-     158,   845,   160,   161,   162,     0,   163,   164,   165,   166,\n-     167,   168,     0,   846,   170,   171,   172,   173,   174,   175,\n-     176,   177,   178,   179,   847,   848,   182,     0,   183,     0,\n-     184,   185,   186,   187,   188,   189,     0,   190,   191,   192,\n-     193,   194,     0,     0,   195,   196,   197,   198,   199,     0,\n-     200,   201,   202,     0,   203,   204,   205,     0,   206,   207,\n-     208,   209,   849,   211,   212,   213,   214,   215,   850,  1398,\n-     217,     0,   218,   219,   851,   221,     0,   222,     0,   223,\n-     852,     0,   853,   226,   227,   854,   855,   230,     0,   231,\n-       0,   856,   857,   234,     0,   235,   236,   237,   238,   239,\n-     240,   241,   858,   243,   244,   245,   246,     0,   247,   248,\n-     249,   250,   251,   252,   253,     0,   254,   859,   860,   257,\n-     258,   259,   260,   261,   861,   862,     0,   863,     0,   265,\n-     864,   865,   268,   866,   270,   271,   272,   273,   274,   275,\n-       0,     0,   276,   867,   278,   868,     0,   280,   281,   282,\n-     283,   284,   285,   286,   287,   869,   289,   290,   291,   292,\n-     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,\n-     303,   304,   305,   306,   870,   871,   872,   310,   311,   312,\n-     873,     0,   314,   315,   874,   317,     0,   875,   319,   876,\n-     321,   322,   323,     0,   324,   325,  1399,     0,   326,   327,\n-     328,     0,     0,   329,   877,   878,   332,   879,   880,   335,\n-     336,   337,   338,   339,   340,   341,   342,   343,   344,     0,\n-       0,     0,     0,   345,   346,   881,   882,   349,   350,   883,\n-     352,   353,   354,     0,   355,   356,   357,   358,   359,   360,\n-       0,   361,   362,   363,   884,   365,   366,   367,   368,     0,\n-     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,\n-     379,   380,   381,     0,   382,   383,   885,   385,   386,   387,\n-     886,   389,   390,   391,   392,   393,   394,   395,   396,   397,\n-     398,   399,     0,   887,   400,   401,   402,   403,   404,   405,\n-     888,   407,   408,   409,   889,   411,   412,   890,   414,     0,\n-     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,\n-     425,   426,   891,   428,   892,   430,     0,   431,   432,     0,\n-     433,   893,   435,   436,   437,   438,   439,     0,   894,   895,\n-       0,     0,   442,   443,   896,   445,   897,  1400,   447,   448,\n-     898,   450,   451,   452,   453,   454,     0,     0,   455,   456,\n-     457,     0,   458,   459,   460,   461,     0,   462,   463,   464,\n-     465,   466,  1243,   900,     0,   469,   901,   471,   472,   473,\n-     474,   475,     0,     0,   476,     0,     0,   477,   478,   479,\n-     480,   481,   482,   902,   903,   904,   905,   906,   907,   908,\n-     909,   910,   911,   912,   494,   495,   496,   497,   109,     0,\n-     527,     0,     0,     0,     0,  1401,  1402,  2270,     0,     0,\n-       0,     0,     0,     0,  2271,     0,     0,   110,   111,   112,\n+     493,   494,   495,   496,   497,   505,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,  3165,     0,     0,   110,   111,   112,   113,   114,   115,\n+     116,   117,   699,   118,   119,   120,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,   122,   123,     0,   124,   125,\n+     126,     0,   128,   129,   130,   131,   132,     0,   134,   135,\n+       0,   136,   137,   138,   139,   140,   141,     0,     0,   142,\n+     143,   144,   145,   146,     0,   147,   148,   149,   150,   151,\n+       0,     0,     0,   153,   154,   155,   156,   157,   158,     0,\n+     160,   161,   162,     0,   163,   164,   165,   166,   167,   168,\n+       0,     0,   170,   171,   172,   173,   174,   175,   176,   177,\n+     178,   179,   180,   181,   182,     0,   183,     0,   184,   185,\n+     186,   187,   188,   189,     0,   190,   191,   192,   193,   194,\n+       0,     0,   195,   196,   197,   198,   199,     0,   200,   201,\n+     202,     0,   203,   204,   205,     0,   206,   207,   208,   209,\n+     210,   211,   212,   213,   214,   215,   216,     0,   217,     0,\n+     218,   219,   220,   221,     0,   222,     0,   223,     0,    21,\n+       0,   226,   227,   506,     0,   230,     0,   231,     0,   232,\n+     233,   234,     0,   235,   236,   237,   238,   239,   240,   241,\n+       0,   243,   244,   245,   246,     0,   247,   248,   249,   250,\n+     251,   252,   253,     0,   254,     0,   256,   257,   258,   259,\n+     260,   261,   262,   263,     0,   264,     0,   265,     0,     0,\n+     268,     0,   270,   271,   272,   273,   274,   275,     0,     0,\n+     276,     0,   278,     0,     0,   280,   281,   282,   283,   284,\n+     285,   286,   287,   507,   289,   290,   291,   292,   293,   294,\n+     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,\n+     305,   306,   307,     0,   309,   310,   311,   312,   313,     0,\n+     314,   315,     0,   317,     0,   318,   319,   320,   321,   322,\n+     323,     0,   324,   325,     0,     0,   326,   327,   328,     0,\n+       0,   329,   330,     0,   332,     0,   334,   335,   336,   337,\n+     338,   339,   340,   341,   342,   343,   344,    25,    26,    27,\n+       0,   345,   346,   347,     0,   349,   350,   351,   352,   353,\n+     354,     0,   355,   356,   357,   358,   359,   360,     0,   361,\n+     362,   363,   364,   365,   366,   367,   368,     0,   369,   370,\n+     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,\n+     381,     0,   382,   383,     0,   385,   386,   387,   388,   389,\n+     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,\n+      32,     0,   400,   401,   402,   403,   404,   405,   406,   407,\n+     408,   409,     0,   411,   412,   413,   414,     0,   415,   416,\n+     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,\n+     508,   428,   429,   430,     0,   431,   432,    37,   433,     0,\n+     435,   436,   437,   438,   439,     0,   700,   441,     0,     0,\n+     701,   443,   444,   445,   446,     0,   447,   448,   449,   450,\n+     451,   452,   453,   454,     0,     0,   455,   456,   457,    39,\n+     458,   459,   460,   461,     0,   462,   463,   464,   465,   466,\n+     613,   468,     0,   469,     0,   471,   472,   473,   474,   475,\n+       0,     0,   476,     0,    43,   477,   478,   479,   480,   481,\n+     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,\n+     492,   493,   494,   495,   496,   497,   505,     0,    44,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,    45,     0,     0,   110,   111,   112,   113,   114,\n+     115,   116,   117,     0,   118,   119,   120,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,   122,   123,     0,   124,\n+     125,   126,     0,   128,   129,   130,   131,   132,     0,   134,\n+     135,     0,   136,   137,   138,   139,   140,   141,     0,     0,\n+     142,   143,   144,   145,   146,     0,   147,   148,   149,   150,\n+     151,     0,     0,     0,   153,   154,   155,   156,   157,   158,\n+       0,   160,   161,   162,     0,   163,   164,   165,   166,   167,\n+     168,     0,     0,   170,   171,   172,   173,   174,   175,   176,\n+     177,   178,   179,   180,   181,   182,     0,   183,     0,   184,\n+     185,   186,   187,   188,   189,     0,   190,   191,   192,   193,\n+     194,     0,     0,   195,   196,   197,   198,   199,     0,   200,\n+     201,   202,     0,   203,   204,   205,     0,   206,   207,   208,\n+     209,   210,   211,   212,   213,   214,   215,   216,     0,   217,\n+       0,   218,   219,   220,   221,     0,   222,     0,   223,     0,\n+      21,     0,   226,   227,   506,     0,   230,     0,   231,     0,\n+     232,   233,   234,     0,   235,   236,   237,   238,   239,   240,\n+     241,     0,   243,   244,   245,   246,     0,   247,   248,   249,\n+     250,   251,   252,   253,     0,   254,     0,   256,   257,   258,\n+     259,   260,   261,   262,   263,     0,   264,     0,   265,     0,\n+       0,   268,     0,   270,   271,   272,   273,   274,   275,     0,\n+       0,   276,     0,   278,     0,     0,   280,   281,   282,   283,\n+     284,   285,   286,   287,   507,   289,   290,   291,   292,   293,\n+     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,\n+     304,   305,   306,   307,     0,   309,   310,   311,   312,   313,\n+       0,   314,   315,     0,   317,     0,   318,   319,   320,   321,\n+     322,   323,     0,   324,   325,     0,     0,   326,   327,   328,\n+       0,     0,   329,   330,     0,   332,     0,   334,   335,   336,\n+     337,   338,   339,   340,   341,   342,   343,   344,    25,    26,\n+      27,     0,   345,   346,   347,     0,   349,   350,   351,   352,\n+     353,   354,     0,   355,   356,   357,   358,   359,   360,     0,\n+     361,   362,   363,   364,   365,   366,   367,   368,     0,   369,\n+     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,\n+     380,   381,     0,   382,   383,     0,   385,   386,   387,   388,\n+     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,\n+     399,    32,     0,   400,   401,   402,   403,   404,   405,   406,\n+     407,   408,   409,     0,   411,   412,   413,   414,     0,   415,\n+     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,\n+     426,   508,   428,   429,   430,     0,   431,   432,    37,   433,\n+       0,   435,   436,   437,   438,   439,     0,   440,   441,     0,\n+       0,   442,   443,   444,   445,   446,     0,   447,   448,   449,\n+     450,   451,   452,   453,   454,     0,     0,   455,   456,   457,\n+      39,   458,   459,   460,   461,     0,   462,   463,   464,   465,\n+     466,   613,   468,     0,   469,     0,   471,   472,   473,   474,\n+     475,     0,     0,   476,     0,    43,   477,   478,   479,   480,\n+     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,\n+     491,   492,   493,   494,   495,   496,   497,     0,   505,    44,\n+     527,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,    45,     0,     0,     0,   110,   111,   112,\n      113,   114,   115,   116,   117,     0,   118,   119,   120,     0,\n-       0,     0,     0,     0,     0,     0,     0,   121,   122,   123,\n-       0,   124,   125,   126,   127,   128,   129,   130,   131,   132,\n-     133,   134,   135,     0,   136,   137,   138,   139,   140,   141,\n-       0,   599,   142,   143,   144,   145,   146,     0,   147,   148,\n-     149,   150,   600,     0,   601,     0,   153,   154,   155,   156,\n-     157,   158,   159,   160,   161,   162,     0,   163,   164,   165,\n-     166,   167,   168,     0,   169,   170,   171,   172,   173,   174,\n+       0,     0,     0,     0,     0,     0,     0,     0,   122,   123,\n+       0,   124,   125,   126,     0,   128,   129,   130,   131,   132,\n+       0,   134,   135,     0,   136,   137,   138,   139,   140,   141,\n+       0,     0,   142,   143,   144,   145,   146,     0,   147,   148,\n+     149,   150,   151,     0,     0,     0,   153,   154,   155,   156,\n+     157,   158,     0,   160,   161,   162,     0,   163,   164,   165,\n+     166,   167,   168,     0,     0,   170,   171,   172,   173,   174,\n      175,   176,   177,   178,   179,   180,   181,   182,     0,   183,\n        0,   184,   185,   186,   187,   188,   189,     0,   190,   191,\n      192,   193,   194,     0,     0,   195,   196,   197,   198,   199,\n        0,   200,   201,   202,     0,   203,   204,   205,     0,   206,\n-     207,   208,   209,   210,   211,   212,   213,   214,   215,   602,\n+     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,\n        0,   217,     0,   218,   219,   220,   221,     0,   222,     0,\n-     223,   224,     0,   225,   226,   227,   228,   229,   230,     0,\n+     223,     0,     0,     0,   226,   227,   506,     0,   230,     0,\n      231,     0,   232,   233,   234,     0,   235,   236,   237,   238,\n-     239,   240,   241,   242,   243,   244,   245,   246,     0,   247,\n-     248,   249,   250,   251,   252,   253,     0,   254,   255,   256,\n+     239,   240,   241,     0,   243,   244,   245,   246,     0,   247,\n+     248,   249,   250,   251,   252,   253,     0,   254,     0,   256,\n      257,   258,   259,   260,   261,   262,   263,     0,   264,     0,\n-     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,\n-     275,   603,     0,   276,   277,   278,   279,     0,   280,   281,\n-     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,\n+     265,     0,     0,   268,     0,   270,   271,   272,   273,   274,\n+     275,     0,     0,   276,     0,   278,     0,     0,   280,   281,\n+     282,   283,   284,   285,   286,   287,   507,   289,   290,   291,\n      292,   293,   294,   295,   296,   297,   298,   299,   300,   301,\n-     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,\n-     312,   313,     0,   314,   315,   316,   317,     0,   604,   319,\n-     320,   321,   322,   323,     0,   324,   325,     0,   605,   326,\n-     327,   328,     0,     0,   329,   330,   331,   332,   333,   606,\n+     302,   303,   304,   305,   306,   307,     0,   309,   310,   311,\n+     312,   313,     0,   314,   315,     0,   317,     0,   318,   319,\n+     320,   321,   322,   323,     0,   324,   325,     0,     0,   326,\n+     327,   328,     0,     0,   329,   330,     0,   332,     0,   334,\n      335,   336,   337,   338,   339,   340,   341,   342,   343,   344,\n-       0,     0,     0,     0,   345,   346,   607,   348,   349,   350,\n+       0,     0,     0,     0,   345,   346,   347,     0,   349,   350,\n      351,   352,   353,   354,     0,   355,   356,   357,   358,   359,\n      360,     0,   361,   362,   363,   364,   365,   366,   367,   368,\n        0,   369,   370,   371,   372,   373,   374,   375,   376,   377,\n-     378,   379,   380,   381,     0,   382,   383,   384,   385,   386,\n-     387,   388,   608,   390,   391,   392,   393,   394,   395,   396,\n+     378,   379,   380,   381,     0,   382,   383,     0,   385,   386,\n+     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,\n      397,   398,   399,     0,     0,   400,   401,   402,   403,   404,\n-     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,\n+     405,   406,   407,   408,   409,     0,   411,   412,   413,   414,\n        0,   415,   416,   417,   418,   419,   420,   421,   422,   423,\n-     424,   425,   426,   427,   428,   609,   430,     0,   431,   432,\n-       0,   433,   434,   435,   436,   437,   438,   439,     0,   440,\n-     441,     0,     0,   442,   443,   610,   445,   611,     0,   447,\n-     448,   612,   450,   451,   452,   453,   454,     0,     0,   455,\n+     424,   425,   426,   508,   428,   429,   430,     0,   431,   432,\n+       0,   433,     0,   435,   436,   437,   438,   439,     0,   440,\n+     441,     0,     0,   442,   443,   444,   445,   446,     0,   447,\n+     448,   449,   450,   451,   452,   453,   454,     0,     0,   455,\n      456,   457,     0,   458,   459,   460,   461,     0,   462,   463,\n-     464,   465,   466,   613,   468,     0,   469,   470,   471,   472,\n+     464,   465,   466,   467,   468,     0,   469,     0,   471,   472,\n      473,   474,   475,     0,     0,   476,     0,     0,   477,   478,\n      479,   480,   481,   482,   483,   484,   485,   486,   487,   488,\n-     489,   490,   491,   492,   493,   494,   495,   496,   497,   109,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,   614,     0,     0,   110,   111,\n+     489,   490,   491,   492,   493,   494,   495,   496,   497,   505,\n+       0,   527,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,   935,     0,     0,   110,   111,\n      112,   113,   114,   115,   116,   117,     0,   118,   119,   120,\n-       0,     0,     0,     0,     0,     0,     0,     0,   121,   122,\n-     123,     0,   124,   125,   126,   127,   128,   129,   130,   131,\n-     132,   133,   134,   135,     0,   136,   137,   138,   139,   140,\n-     141,     0,   599,   142,   143,   144,   145,   146,     0,   147,\n-     148,   149,   150,   600,     0,   601,     0,   153,   154,   155,\n-     156,   157,   158,   159,   160,   161,   162,     0,   163,   164,\n-     165,   166,   167,   168,     0,   169,   170,   171,   172,   173,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,   122,\n+     123,     0,   124,   125,   126,     0,   128,   129,   130,   131,\n+     132,     0,   134,   135,     0,   136,   137,   138,   139,   140,\n+     141,     0,     0,   142,   143,   144,   145,   146,     0,   147,\n+     148,   149,   150,   151,     0,     0,     0,   153,   154,   155,\n+     156,   157,   158,     0,   160,   161,   162,     0,   163,   164,\n+     165,   166,   167,   168,     0,     0,   170,   171,   172,   173,\n      174,   175,   176,   177,   178,   179,   180,   181,   182,     0,\n      183,     0,   184,   185,   186,   187,   188,   189,     0,   190,\n      191,   192,   193,   194,     0,     0,   195,   196,   197,   198,\n      199,     0,   200,   201,   202,     0,   203,   204,   205,     0,\n      206,   207,   208,   209,   210,   211,   212,   213,   214,   215,\n-     602,     0,   217,     0,   218,   219,   220,   221,     0,   222,\n-       0,   223,   224,     0,   225,   226,   227,   228,   229,   230,\n+     216,     0,   217,     0,   218,   219,   220,   221,     0,   222,\n+       0,   223,     0,     0,     0,   226,   227,   506,     0,   230,\n        0,   231,     0,   232,   233,   234,     0,   235,   236,   237,\n-     238,   239,   240,   241,   242,   243,   244,   245,   246,     0,\n-     247,   248,   249,   250,   251,   252,   253,     0,   254,   255,\n+     238,   239,   240,   241,     0,   243,   244,   245,   246,     0,\n+     247,   248,   249,   250,   251,   252,   253,     0,   254,     0,\n      256,   257,   258,   259,   260,   261,   262,   263,     0,   264,\n-       0,   265,   266,   267,   268,   269,   270,   271,   272,   273,\n-     274,   275,     0,     0,   276,   277,   278,   279,     0,   280,\n-     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,\n+       0,   265,     0,     0,   268,     0,   270,   271,   272,   273,\n+     274,   275,     0,     0,   276,     0,   278,     0,     0,   280,\n+     281,   282,   283,   284,   285,   286,   287,   507,   289,   290,\n      291,   292,   293,   294,   295,   296,   297,   298,   299,   300,\n-     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,\n-     311,   312,   313,     0,   314,   315,   316,   317,     0,   604,\n+     301,   302,   303,   304,   305,   306,   307,     0,   309,   310,\n+     311,   312,   313,     0,   314,   315,     0,   317,     0,   318,\n      319,   320,   321,   322,   323,     0,   324,   325,     0,     0,\n-     326,   327,   328,     0,     0,   329,   330,   331,   332,   333,\n-     606,   335,   336,   337,   338,   339,   340,   341,   342,   343,\n-     344,     0,     0,     0,     0,   345,   346,   607,   348,   349,\n+     326,   327,   328,     0,     0,   329,   330,     0,   332,     0,\n+     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,\n+     344,     0,     0,     0,     0,   345,   346,   347,     0,   349,\n      350,   351,   352,   353,   354,     0,   355,   356,   357,   358,\n      359,   360,     0,   361,   362,   363,   364,   365,   366,   367,\n      368,     0,   369,   370,   371,   372,   373,   374,   375,   376,\n-     377,   378,   379,   380,   381,     0,   382,   383,   384,   385,\n-     386,   387,   388,   608,   390,   391,   392,   393,   394,   395,\n+     377,   378,   379,   380,   381,     0,   382,   383,     0,   385,\n+     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,\n      396,   397,   398,   399,     0,     0,   400,   401,   402,   403,\n-     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,\n+     404,   405,   406,   407,   408,   409,     0,   411,   412,   413,\n      414,     0,   415,   416,   417,   418,   419,   420,   421,   422,\n-     423,   424,   425,   426,   427,   428,   609,   430,     0,   431,\n-     432,     0,   433,   434,   435,   436,   437,   438,   439,     0,\n-     440,   441,     0,     0,   442,   443,   610,   445,   611,     0,\n-     447,   448,   612,   450,   451,   452,   453,   454,     0,     0,\n+     423,   424,   425,   426,   508,   428,   429,   430,     0,   431,\n+     432,     0,   433,     0,   435,   436,   437,   438,   439,     0,\n+     440,   441,     0,     0,   442,   443,   444,   445,   446,     0,\n+     447,   448,   449,   450,   451,   452,   453,   454,     0,     0,\n      455,   456,   457,     0,   458,   459,   460,   461,     0,   462,\n-     463,   464,   465,   466,   467,   468,     0,   469,   470,   471,\n+     463,   464,   465,   466,   467,   468,     0,   469,     0,   471,\n      472,   473,   474,   475,     0,     0,   476,     0,     0,   477,\n      478,   479,   480,   481,   482,   483,   484,   485,   486,   487,\n      488,   489,   490,   491,   492,   493,   494,   495,   496,   497,\n-     109,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,    45,     0,     0,   110,\n+     505,     0,   527,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,  1498,     0,     0,   110,\n      111,   112,   113,   114,   115,   116,   117,     0,   118,   119,\n-     120,     0,     0,     0,     0,     0,     0,     0,     0,   121,\n-     122,   123,     0,   124,   125,   126,   127,   128,   129,   130,\n-     131,   132,   133,   134,   135,     0,   136,   137,   138,   139,\n-     140,   141,     0,   599,   142,   143,   144,   145,   146,     0,\n-     147,   148,   149,   150,   600,     0,   601,     0,   153,   154,\n-     155,   156,   157,   158,   159,   160,   161,   162,     0,   163,\n-     164,   165,   166,   167,   168,     0,   169,   170,   171,   172,\n+     120,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+     122,   123,     0,   124,   125,   126,     0,   128,   129,   130,\n+     131,   132,     0,   134,   135,     0,   136,   137,   138,   139,\n+     140,   141,     0,     0,   142,   143,   144,   145,   146,     0,\n+     147,   148,   149,   150,   151,     0,     0,     0,   153,   154,\n+     155,   156,   157,   158,     0,   160,   161,   162,     0,   163,\n+     164,   165,   166,   167,   168,     0,     0,   170,   171,   172,\n      173,   174,   175,   176,   177,   178,   179,   180,   181,   182,\n        0,   183,     0,   184,   185,   186,   187,   188,   189,     0,\n      190,   191,   192,   193,   194,     0,     0,   195,   196,   197,\n      198,   199,     0,   200,   201,   202,     0,   203,   204,   205,\n        0,   206,   207,   208,   209,   210,   211,   212,   213,   214,\n-     215,   602,     0,   217,     0,   218,   219,   220,   221,     0,\n-     222,     0,   223,   224,     0,   225,   226,   227,   228,   229,\n+     215,   216,     0,   217,     0,   218,   219,   220,   221,     0,\n+     222,     0,   223,     0,     0,     0,   226,   227,   506,     0,\n      230,     0,   231,     0,   232,   233,   234,     0,   235,   236,\n-     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,\n+     237,   238,   239,   240,   241,     0,   243,   244,   245,   246,\n        0,   247,   248,   249,   250,   251,   252,   253,     0,   254,\n-     255,   256,   257,   258,   259,   260,   261,   262,   263,     0,\n-     264,     0,   265,   266,   267,   268,   269,   270,   271,   272,\n-     273,   274,   275,     0,     0,   276,   277,   278,   279,     0,\n-     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,\n+       0,   256,   257,   258,   259,   260,   261,   262,   263,     0,\n+     264,     0,   265,     0,     0,   268,     0,   270,   271,   272,\n+     273,   274,   275,     0,     0,   276,     0,   278,     0,     0,\n+     280,   281,   282,   283,   284,   285,   286,   287,   507,   289,\n      290,   291,   292,   293,   294,   295,   296,   297,   298,   299,\n-     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,\n-     310,   311,   312,   313,     0,   314,   315,   316,   317,     0,\n-     604,   319,   320,   321,   322,   323,     0,   324,   325,     0,\n-       0,   326,   327,   328,     0,     0,   329,   330,   331,   332,\n-     333,   606,   335,   336,   337,   338,   339,   340,   341,   342,\n-     343,   344,     0,     0,     0,     0,   345,   346,   607,   348,\n+     300,   301,   302,   303,   304,   305,   306,   307,     0,   309,\n+     310,   311,   312,   313,     0,   314,   315,     0,   317,     0,\n+     318,   319,   320,   321,   322,   323,     0,   324,   325,     0,\n+       0,   326,   327,   328,     0,     0,   329,   330,     0,   332,\n+       0,   334,   335,   336,   337,   338,   339,   340,   341,   342,\n+     343,   344,     0,     0,     0,     0,   345,   346,   347,     0,\n      349,   350,   351,   352,   353,   354,     0,   355,   356,   357,\n      358,   359,   360,     0,   361,   362,   363,   364,   365,   366,\n      367,   368,     0,   369,   370,   371,   372,   373,   374,   375,\n-     376,   377,   378,   379,   380,   381,     0,   382,   383,   384,\n+     376,   377,   378,   379,   380,   381,     0,   382,   383,     0,\n      385,   386,   387,   388,   389,   390,   391,   392,   393,   394,\n      395,   396,   397,   398,   399,     0,     0,   400,   401,   402,\n-     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,\n+     403,   404,   405,   406,   407,   408,   409,     0,   411,   412,\n      413,   414,     0,   415,   416,   417,   418,   419,   420,   421,\n-     422,   423,   424,   425,   426,   427,   428,   609,   430,     0,\n-     431,   432,     0,   433,   434,   435,   436,   437,   438,   439,\n-       0,   440,   441,     0,     0,   442,   443,   610,   445,   611,\n-       0,   447,   448,   612,   450,   451,   452,   453,   454,     0,\n+     422,   423,   424,   425,   426,   508,   428,   429,   430,     0,\n+     431,   432,     0,   433,     0,   435,   436,   437,   438,   439,\n+       0,   440,   441,     0,     0,   442,   443,   444,   445,   446,\n+       0,   447,   448,   449,   450,   451,   452,   453,   454,     0,\n        0,   455,   456,   457,     0,   458,   459,   460,   461,     0,\n-     462,   463,   464,   465,   466,   467,   468,     0,   469,   470,\n+     462,   463,   464,   465,   466,   467,   468,     0,   469,     0,\n      471,   472,   473,   474,   475,     0,     0,   476,     0,     0,\n      477,   478,   479,   480,   481,   482,   483,   484,   485,   486,\n      487,   488,   489,   490,   491,   492,   493,   494,   495,   496,\n-     497,   505,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,  3153,     0,     0,\n-     110,   111,   112,   113,   114,   115,   116,   117,   696,   118,\n+     497,   505,     0,   527,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,  2120,     0,     0,\n+     110,   111,   112,   113,   114,   115,   116,   117,     0,   118,\n      119,   120,     0,     0,     0,     0,     0,     0,     0,     0,\n        0,   122,   123,     0,   124,   125,   126,     0,   128,   129,\n      130,   131,   132,     0,   134,   135,     0,   136,   137,   138,\n@@ -7119,7 +7326,7 @@ static const yytype_int16 yytable[] =\n      197,   198,   199,     0,   200,   201,   202,     0,   203,   204,\n      205,     0,   206,   207,   208,   209,   210,   211,   212,   213,\n      214,   215,   216,     0,   217,     0,   218,   219,   220,   221,\n-       0,   222,     0,   223,     0,    21,     0,   226,   227,   506,\n+       0,   222,     0,   223,     0,     0,     0,   226,   227,   506,\n        0,   230,     0,   231,     0,   232,   233,   234,     0,   235,\n      236,   237,   238,   239,   240,   241,     0,   243,   244,   245,\n      246,     0,   247,   248,   249,   250,   251,   252,   253,     0,\n@@ -7133,26 +7340,26 @@ static const yytype_int16 yytable[] =\n        0,   318,   319,   320,   321,   322,   323,     0,   324,   325,\n        0,     0,   326,   327,   328,     0,     0,   329,   330,     0,\n      332,     0,   334,   335,   336,   337,   338,   339,   340,   341,\n-     342,   343,   344,    25,    26,    27,     0,   345,   346,   347,\n+     342,   343,   344,     0,     0,     0,     0,   345,   346,   347,\n        0,   349,   350,   351,   352,   353,   354,     0,   355,   356,\n      357,   358,   359,   360,     0,   361,   362,   363,   364,   365,\n      366,   367,   368,     0,   369,   370,   371,   372,   373,   374,\n      375,   376,   377,   378,   379,   380,   381,     0,   382,   383,\n        0,   385,   386,   387,   388,   389,   390,   391,   392,   393,\n-     394,   395,   396,   397,   398,   399,    32,     0,   400,   401,\n+     394,   395,   396,   397,   398,   399,     0,     0,   400,   401,\n      402,   403,   404,   405,   406,   407,   408,   409,     0,   411,\n      412,   413,   414,     0,   415,   416,   417,   418,   419,   420,\n      421,   422,   423,   424,   425,   426,   508,   428,   429,   430,\n-       0,   431,   432,    37,   433,     0,   435,   436,   437,   438,\n-     439,     0,   697,   441,     0,     0,   698,   443,   444,   445,\n+       0,   431,   432,     0,   433,     0,   435,   436,   437,   438,\n+     439,     0,   440,   441,     0,     0,   442,   443,   444,   445,\n      446,     0,   447,   448,   449,   450,   451,   452,   453,   454,\n-       0,     0,   455,   456,   457,    39,   458,   459,   460,   461,\n-       0,   462,   463,   464,   465,   466,   613,   468,     0,   469,\n+       0,     0,   455,   456,   457,     0,   458,   459,   460,   461,\n+       0,   462,   463,   464,   465,   466,   467,   468,     0,   469,\n        0,   471,   472,   473,   474,   475,     0,     0,   476,     0,\n-      43,   477,   478,   479,   480,   481,   482,   483,   484,   485,\n+       0,   477,   478,   479,   480,   481,   482,   483,   484,   485,\n      486,   487,   488,   489,   490,   491,   492,   493,   494,   495,\n-     496,   497,   505,     0,    44,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,    45,     0,\n+     496,   497,   505,     0,   527,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,  2366,     0,\n        0,   110,   111,   112,   113,   114,   115,   116,   117,     0,\n      118,   119,   120,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,   122,   123,     0,   124,   125,   126,     0,   128,\n@@ -7167,7 +7374,7 @@ static const yytype_int16 yytable[] =\n      196,   197,   198,   199,     0,   200,   201,   202,     0,   203,\n      204,   205,     0,   206,   207,   208,   209,   210,   211,   212,\n      213,   214,   215,   216,     0,   217,     0,   218,   219,   220,\n-     221,     0,   222,     0,   223,     0,    21,     0,   226,   227,\n+     221,     0,   222,     0,   223,     0,     0,     0,   226,   227,\n      506,     0,   230,     0,   231,     0,   232,   233,   234,     0,\n      235,   236,   237,   238,   239,   240,   241,     0,   243,   244,\n      245,   246,     0,   247,   248,   249,   250,   251,   252,   253,\n@@ -7181,27 +7388,75 @@ static const yytype_int16 yytable[] =\n      317,     0,   318,   319,   320,   321,   322,   323,     0,   324,\n      325,     0,     0,   326,   327,   328,     0,     0,   329,   330,\n        0,   332,     0,   334,   335,   336,   337,   338,   339,   340,\n-     341,   342,   343,   344,    25,    26,    27,     0,   345,   346,\n+     341,   342,   343,   344,     0,     0,     0,     0,   345,   346,\n      347,     0,   349,   350,   351,   352,   353,   354,     0,   355,\n      356,   357,   358,   359,   360,     0,   361,   362,   363,   364,\n      365,   366,   367,   368,     0,   369,   370,   371,   372,   373,\n      374,   375,   376,   377,   378,   379,   380,   381,     0,   382,\n      383,     0,   385,   386,   387,   388,   389,   390,   391,   392,\n-     393,   394,   395,   396,   397,   398,   399,    32,     0,   400,\n+     393,   394,   395,   396,   397,   398,   399,     0,     0,   400,\n      401,   402,   403,   404,   405,   406,   407,   408,   409,     0,\n      411,   412,   413,   414,     0,   415,   416,   417,   418,   419,\n      420,   421,   422,   423,   424,   425,   426,   508,   428,   429,\n-     430,     0,   431,   432,    37,   433,     0,   435,   436,   437,\n+     430,     0,   431,   432,     0,   433,     0,   435,   436,   437,\n      438,   439,     0,   440,   441,     0,     0,   442,   443,   444,\n      445,   446,     0,   447,   448,   449,   450,   451,   452,   453,\n-     454,     0,     0,   455,   456,   457,    39,   458,   459,   460,\n-     461,     0,   462,   463,   464,   465,   466,   613,   468,     0,\n+     454,     0,     0,   455,   456,   457,     0,   458,   459,   460,\n+     461,     0,   462,   463,   464,   465,   466,   467,   468,     0,\n      469,     0,   471,   472,   473,   474,   475,     0,     0,   476,\n-       0,    43,   477,   478,   479,   480,   481,   482,   483,   484,\n+       0,     0,   477,   478,   479,   480,   481,   482,   483,   484,\n      485,   486,   487,   488,   489,   490,   491,   492,   493,   494,\n-     495,   496,   497,     0,   505,    44,   527,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,    45,\n-       0,     0,     0,   110,   111,   112,   113,   114,   115,   116,\n+     495,   496,   497,   505,     0,   527,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,  2474,\n+       0,     0,   110,   111,   112,   113,   114,   115,   116,   117,\n+       0,   118,   119,   120,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,   122,   123,     0,   124,   125,   126,     0,\n+     128,   129,   130,   131,   132,     0,   134,   135,     0,   136,\n+     137,   138,   139,   140,   141,     0,     0,   142,   143,   144,\n+     145,   146,     0,   147,   148,   149,   150,   151,     0,     0,\n+       0,   153,   154,   155,   156,   157,   158,     0,   160,   161,\n+     162,     0,   163,   164,   165,   166,   167,   168,     0,     0,\n+     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,\n+     180,   181,   182,     0,   183,     0,   184,   185,   186,   187,\n+     188,   189,     0,   190,   191,   192,   193,   194,     0,     0,\n+     195,   196,   197,   198,   199,     0,   200,   201,   202,     0,\n+     203,   204,   205,     0,   206,   207,   208,   209,   210,   211,\n+     212,   213,   214,   215,   216,     0,   217,     0,   218,   219,\n+     220,   221,     0,   222,     0,   223,     0,     0,     0,   226,\n+     227,   506,     0,   230,     0,   231,     0,   232,   233,   234,\n+       0,   235,   236,   237,   238,   239,   240,   241,     0,   243,\n+     244,   245,   246,     0,   247,   248,   249,   250,   251,   252,\n+     253,     0,   254,     0,   256,   257,   258,   259,   260,   261,\n+     262,   263,     0,   264,     0,   265,     0,     0,   268,     0,\n+     270,   271,   272,   273,   274,   275,     0,     0,   276,     0,\n+     278,     0,     0,   280,   281,   282,   283,   284,   285,   286,\n+     287,   507,   289,   290,   291,   292,   293,   294,   295,   296,\n+     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,\n+     307,     0,   309,   310,   311,   312,   313,     0,   314,   315,\n+       0,   317,     0,   318,   319,   320,   321,   322,   323,     0,\n+     324,   325,     0,     0,   326,   327,   328,     0,     0,   329,\n+     330,     0,   332,     0,   334,   335,   336,   337,   338,   339,\n+     340,   341,   342,   343,   344,     0,     0,     0,     0,   345,\n+     346,   347,     0,   349,   350,   351,   352,   353,   354,     0,\n+     355,   356,   357,   358,   359,   360,     0,   361,   362,   363,\n+     364,   365,   366,   367,   368,     0,   369,   370,   371,   372,\n+     373,   374,   375,   376,   377,   378,   379,   380,   381,     0,\n+     382,   383,     0,   385,   386,   387,   388,   389,   390,   391,\n+     392,   393,   394,   395,   396,   397,   398,   399,     0,     0,\n+     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,\n+       0,   411,   412,   413,   414,     0,   415,   416,   417,   418,\n+     419,   420,   421,   422,   423,   424,   425,   426,   508,   428,\n+     429,   430,     0,   431,   432,     0,   433,     0,   435,   436,\n+     437,   438,   439,     0,   440,   441,     0,     0,   442,   443,\n+     444,   445,   446,     0,   447,   448,   449,   450,   451,   452,\n+     453,   454,     0,     0,   455,   456,   457,     0,   458,   459,\n+     460,   461,     0,   462,   463,   464,   465,   466,   467,   468,\n+       0,   469,     0,   471,   472,   473,   474,   475,     0,     0,\n+     476,     0,     0,   477,   478,   479,   480,   481,   482,   483,\n+     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,\n+     494,   495,   496,   497,   505,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+    3077,     0,     0,   110,   111,   112,   113,   114,   115,   116,\n      117,     0,   118,   119,   120,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,   122,   123,     0,   124,   125,   126,\n        0,   128,   129,   130,   131,   132,     0,   134,   135,     0,\n@@ -7247,9 +7502,9 @@ static const yytype_int16 yytable[] =\n      468,     0,   469,     0,   471,   472,   473,   474,   475,     0,\n        0,   476,     0,     0,   477,   478,   479,   480,   481,   482,\n      483,   484,   485,   486,   487,   488,   489,   490,   491,   492,\n-     493,   494,   495,   496,   497,   505,     0,   527,     0,     0,\n+     493,   494,   495,   496,   497,   505,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,   932,     0,     0,   110,   111,   112,   113,   114,   115,\n+       0,  1978,     0,     0,   110,   111,   112,   113,   114,   115,\n      116,   117,     0,   118,   119,   120,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,   122,   123,     0,   124,   125,\n      126,     0,   128,   129,   130,   131,   132,     0,   134,   135,\n@@ -7295,9 +7550,9 @@ static const yytype_int16 yytable[] =\n      467,   468,     0,   469,     0,   471,   472,   473,   474,   475,\n        0,     0,   476,     0,     0,   477,   478,   479,   480,   481,\n      482,   483,   484,   485,   486,   487,   488,   489,   490,   491,\n-     492,   493,   494,   495,   496,   497,   505,     0,   527,     0,\n+     492,   493,   494,   495,   496,   497,   505,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,  1491,     0,     0,   110,   111,   112,   113,   114,\n+       0,     0,  2080,     0,     0,   110,   111,   112,   113,   114,\n      115,   116,   117,     0,   118,   119,   120,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,   122,   123,     0,   124,\n      125,   126,     0,   128,   129,   130,   131,   132,     0,   134,\n@@ -7343,153 +7598,57 @@ static const yytype_int16 yytable[] =\n      466,   467,   468,     0,   469,     0,   471,   472,   473,   474,\n      475,     0,     0,   476,     0,     0,   477,   478,   479,   480,\n      481,   482,   483,   484,   485,   486,   487,   488,   489,   490,\n-     491,   492,   493,   494,   495,   496,   497,   505,     0,   527,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,  2111,     0,     0,   110,   111,   112,   113,\n-     114,   115,   116,   117,     0,   118,   119,   120,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,   122,   123,     0,\n-     124,   125,   126,     0,   128,   129,   130,   131,   132,     0,\n-     134,   135,     0,   136,   137,   138,   139,   140,   141,     0,\n-       0,   142,   143,   144,   145,   146,     0,   147,   148,   149,\n-     150,   151,     0,     0,     0,   153,   154,   155,   156,   157,\n-     158,     0,   160,   161,   162,     0,   163,   164,   165,   166,\n-     167,   168,     0,     0,   170,   171,   172,   173,   174,   175,\n-     176,   177,   178,   179,   180,   181,   182,     0,   183,     0,\n-     184,   185,   186,   187,   188,   189,     0,   190,   191,   192,\n-     193,   194,     0,     0,   195,   196,   197,   198,   199,     0,\n-     200,   201,   202,     0,   203,   204,   205,     0,   206,   207,\n-     208,   209,   210,   211,   212,   213,   214,   215,   216,     0,\n-     217,     0,   218,   219,   220,   221,     0,   222,     0,   223,\n-       0,     0,     0,   226,   227,   506,     0,   230,     0,   231,\n-       0,   232,   233,   234,     0,   235,   236,   237,   238,   239,\n-     240,   241,     0,   243,   244,   245,   246,     0,   247,   248,\n-     249,   250,   251,   252,   253,     0,   254,     0,   256,   257,\n-     258,   259,   260,   261,   262,   263,     0,   264,     0,   265,\n-       0,     0,   268,     0,   270,   271,   272,   273,   274,   275,\n-       0,     0,   276,     0,   278,     0,     0,   280,   281,   282,\n-     283,   284,   285,   286,   287,   507,   289,   290,   291,   292,\n-     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,\n-     303,   304,   305,   306,   307,     0,   309,   310,   311,   312,\n-     313,     0,   314,   315,     0,   317,     0,   318,   319,   320,\n-     321,   322,   323,     0,   324,   325,     0,     0,   326,   327,\n-     328,     0,     0,   329,   330,     0,   332,     0,   334,   335,\n-     336,   337,   338,   339,   340,   341,   342,   343,   344,     0,\n-       0,     0,     0,   345,   346,   347,     0,   349,   350,   351,\n-     352,   353,   354,     0,   355,   356,   357,   358,   359,   360,\n-       0,   361,   362,   363,   364,   365,   366,   367,   368,     0,\n-     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,\n-     379,   380,   381,     0,   382,   383,     0,   385,   386,   387,\n-     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,\n-     398,   399,     0,     0,   400,   401,   402,   403,   404,   405,\n-     406,   407,   408,   409,     0,   411,   412,   413,   414,     0,\n-     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,\n-     425,   426,   508,   428,   429,   430,     0,   431,   432,     0,\n-     433,     0,   435,   436,   437,   438,   439,     0,   440,   441,\n-       0,     0,   442,   443,   444,   445,   446,     0,   447,   448,\n-     449,   450,   451,   452,   453,   454,     0,     0,   455,   456,\n-     457,     0,   458,   459,   460,   461,     0,   462,   463,   464,\n-     465,   466,   467,   468,     0,   469,     0,   471,   472,   473,\n-     474,   475,     0,     0,   476,     0,     0,   477,   478,   479,\n-     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,\n-     490,   491,   492,   493,   494,   495,   496,   497,   505,     0,\n-     527,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,  2356,     0,     0,   110,   111,   112,\n-     113,   114,   115,   116,   117,     0,   118,   119,   120,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,   122,   123,\n-       0,   124,   125,   126,     0,   128,   129,   130,   131,   132,\n-       0,   134,   135,     0,   136,   137,   138,   139,   140,   141,\n-       0,     0,   142,   143,   144,   145,   146,     0,   147,   148,\n-     149,   150,   151,     0,     0,     0,   153,   154,   155,   156,\n-     157,   158,     0,   160,   161,   162,     0,   163,   164,   165,\n-     166,   167,   168,     0,     0,   170,   171,   172,   173,   174,\n-     175,   176,   177,   178,   179,   180,   181,   182,     0,   183,\n-       0,   184,   185,   186,   187,   188,   189,     0,   190,   191,\n-     192,   193,   194,     0,     0,   195,   196,   197,   198,   199,\n-       0,   200,   201,   202,     0,   203,   204,   205,     0,   206,\n-     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,\n-       0,   217,     0,   218,   219,   220,   221,     0,   222,     0,\n-     223,     0,     0,     0,   226,   227,   506,     0,   230,     0,\n-     231,     0,   232,   233,   234,     0,   235,   236,   237,   238,\n-     239,   240,   241,     0,   243,   244,   245,   246,     0,   247,\n-     248,   249,   250,   251,   252,   253,     0,   254,     0,   256,\n-     257,   258,   259,   260,   261,   262,   263,     0,   264,     0,\n-     265,     0,     0,   268,     0,   270,   271,   272,   273,   274,\n-     275,     0,     0,   276,     0,   278,     0,     0,   280,   281,\n-     282,   283,   284,   285,   286,   287,   507,   289,   290,   291,\n+     491,   492,   493,   494,   495,   496,   497,     0,  2779,  1404,\n+     629,     0,     0,  1958,   995,     0,     0,     0,     0,     0,\n+    1959,  1960,     0,  2946,  1961,  1962,  1963,   110,   111,   112,\n+     113,   114,   115,   116,   117,  1183,   118,   119,   120,  1184,\n+    1185,  1186,  2780,  1187,  1188,  1189,  1190,  2781,   122,   123,\n+    1191,   124,   125,   126,  2782,   128,   129,   130,     0,   752,\n+    2783,   754,   755,  1192,   136,   137,   138,   139,   140,   141,\n+    1193,  1194,   142,   143,   756,   757,   146,  1195,   147,   148,\n+     149,   150,     0,  1196,  2784,  1197,  2785,   154,   155,   156,\n+     157,   158,  2786,   160,   161,   162,  1198,   163,   164,   165,\n+     166,   167,   168,  1199,  2787,   170,   171,   172,   173,   174,\n+     175,   176,   177,   178,   179,   762,   763,   182,  1200,   183,\n+    1201,   184,   185,   186,   187,   188,   189,  1202,   190,   191,\n+     192,   193,   194,  1203,  1204,   195,   196,   764,   198,   199,\n+    1205,   200,   201,   202,  1206,   203,   204,   205,  1207,   206,\n+     207,   208,   209,     0,   211,   212,   213,   214,   215,     0,\n+    1208,   217,  1209,   218,   219,   765,   221,  1210,   222,  1211,\n+     223,  2788,  1212,  2789,   226,   227,  2790,  2791,   230,  1213,\n+     231,  1214,     0,     0,   234,  1215,   235,   236,   237,   238,\n+     239,   240,   241,  2792,   243,   244,   245,   246,  1216,   247,\n+     248,   249,   250,   251,   252,   253,  1217,   254,  2793,     0,\n+     257,   258,   259,   260,   261,   772,   773,  1218,   774,  1219,\n+     265,  2794,  2795,   268,  2796,   270,   271,   272,   273,   274,\n+     275,  1220,  1221,   276,  2797,   278,  2798,  1222,   280,   281,\n+     282,   283,   284,   285,   286,   287,  2799,   289,   290,   291,\n      292,   293,   294,   295,   296,   297,   298,   299,   300,   301,\n-     302,   303,   304,   305,   306,   307,     0,   309,   310,   311,\n-     312,   313,     0,   314,   315,     0,   317,     0,   318,   319,\n-     320,   321,   322,   323,     0,   324,   325,     0,     0,   326,\n-     327,   328,     0,     0,   329,   330,     0,   332,     0,   334,\n+     302,   303,   304,   305,   306,   781,  2800,   783,   310,   311,\n+     312,  2801,  1223,   314,   315,  2802,   317,  1224,     0,   319,\n+     785,   321,   322,   323,  1225,   324,   325,  1226,  1227,  2803,\n+     327,   328,  1228,  1229,   329,     0,  2804,   332,  2805,     0,\n      335,   336,   337,   338,   339,   340,   341,   342,   343,   344,\n-       0,     0,     0,     0,   345,   346,   347,     0,   349,   350,\n-     351,   352,   353,   354,     0,   355,   356,   357,   358,   359,\n-     360,     0,   361,   362,   363,   364,   365,   366,   367,   368,\n-       0,   369,   370,   371,   372,   373,   374,   375,   376,   377,\n-     378,   379,   380,   381,     0,   382,   383,     0,   385,   386,\n-     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,\n-     397,   398,   399,     0,     0,   400,   401,   402,   403,   404,\n-     405,   406,   407,   408,   409,     0,   411,   412,   413,   414,\n-       0,   415,   416,   417,   418,   419,   420,   421,   422,   423,\n-     424,   425,   426,   508,   428,   429,   430,     0,   431,   432,\n-       0,   433,     0,   435,   436,   437,   438,   439,     0,   440,\n-     441,     0,     0,   442,   443,   444,   445,   446,     0,   447,\n-     448,   449,   450,   451,   452,   453,   454,     0,     0,   455,\n-     456,   457,     0,   458,   459,   460,   461,     0,   462,   463,\n-     464,   465,   466,   467,   468,     0,   469,     0,   471,   472,\n-     473,   474,   475,     0,     0,   476,     0,     0,   477,   478,\n-     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,\n-     489,   490,   491,   492,   493,   494,   495,   496,   497,   505,\n-       0,   527,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,  2463,     0,     0,   110,   111,\n-     112,   113,   114,   115,   116,   117,     0,   118,   119,   120,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,   122,\n-     123,     0,   124,   125,   126,     0,   128,   129,   130,   131,\n-     132,     0,   134,   135,     0,   136,   137,   138,   139,   140,\n-     141,     0,     0,   142,   143,   144,   145,   146,     0,   147,\n-     148,   149,   150,   151,     0,     0,     0,   153,   154,   155,\n-     156,   157,   158,     0,   160,   161,   162,     0,   163,   164,\n-     165,   166,   167,   168,     0,     0,   170,   171,   172,   173,\n-     174,   175,   176,   177,   178,   179,   180,   181,   182,     0,\n-     183,     0,   184,   185,   186,   187,   188,   189,     0,   190,\n-     191,   192,   193,   194,     0,     0,   195,   196,   197,   198,\n-     199,     0,   200,   201,   202,     0,   203,   204,   205,     0,\n-     206,   207,   208,   209,   210,   211,   212,   213,   214,   215,\n-     216,     0,   217,     0,   218,   219,   220,   221,     0,   222,\n-       0,   223,     0,     0,     0,   226,   227,   506,     0,   230,\n-       0,   231,     0,   232,   233,   234,     0,   235,   236,   237,\n-     238,   239,   240,   241,     0,   243,   244,   245,   246,     0,\n-     247,   248,   249,   250,   251,   252,   253,     0,   254,     0,\n-     256,   257,   258,   259,   260,   261,   262,   263,     0,   264,\n-       0,   265,     0,     0,   268,     0,   270,   271,   272,   273,\n-     274,   275,     0,     0,   276,     0,   278,     0,     0,   280,\n-     281,   282,   283,   284,   285,   286,   287,   507,   289,   290,\n-     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,\n-     301,   302,   303,   304,   305,   306,   307,     0,   309,   310,\n-     311,   312,   313,     0,   314,   315,     0,   317,     0,   318,\n-     319,   320,   321,   322,   323,     0,   324,   325,     0,     0,\n-     326,   327,   328,     0,     0,   329,   330,     0,   332,     0,\n-     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,\n-     344,     0,     0,     0,     0,   345,   346,   347,     0,   349,\n-     350,   351,   352,   353,   354,     0,   355,   356,   357,   358,\n-     359,   360,     0,   361,   362,   363,   364,   365,   366,   367,\n-     368,     0,   369,   370,   371,   372,   373,   374,   375,   376,\n-     377,   378,   379,   380,   381,     0,   382,   383,     0,   385,\n-     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,\n-     396,   397,   398,   399,     0,     0,   400,   401,   402,   403,\n-     404,   405,   406,   407,   408,   409,     0,   411,   412,   413,\n-     414,     0,   415,   416,   417,   418,   419,   420,   421,   422,\n-     423,   424,   425,   426,   508,   428,   429,   430,     0,   431,\n-     432,     0,   433,     0,   435,   436,   437,   438,   439,     0,\n-     440,   441,     0,     0,   442,   443,   444,   445,   446,     0,\n-     447,   448,   449,   450,   451,   452,   453,   454,     0,     0,\n-     455,   456,   457,     0,   458,   459,   460,   461,     0,   462,\n-     463,   464,   465,   466,   467,   468,     0,   469,     0,   471,\n-     472,   473,   474,   475,     0,     0,   476,     0,     0,   477,\n-     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,\n-     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,\n-     505,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,  3065,     0,     0,   110,\n+    1230,  1231,  1232,  1233,   345,   346,     0,  2806,   349,   350,\n+       0,   352,   353,   354,  1234,   355,   356,   357,   358,   359,\n+     360,  1235,   361,   362,   363,   789,   365,   366,   367,   368,\n+    1236,   369,   370,   371,   372,   373,   374,   375,   376,   377,\n+     378,   379,   380,   381,  1237,   382,   383,  2807,   385,   386,\n+     387,   791,   389,   390,   391,   392,   393,   394,   395,   396,\n+     397,   398,   399,  1238,  2808,   400,   401,   402,   403,   404,\n+     405,  2809,   407,   408,   409,  2810,   411,   412,   795,   414,\n+    1239,   415,   416,   417,   418,   419,   420,   421,   422,   423,\n+     424,   425,   426,  2811,   428,     0,   430,  1240,   431,   432,\n+    1241,   433,  2812,   435,   436,   437,   438,   439,  1242,   798,\n+     799,  1243,  1244,   442,   443,     0,   445,     0,  1245,   447,\n+     448,  2813,   450,   451,   452,   453,   454,  2814,  1247,   455,\n+     456,   457,  1248,   458,   459,   460,   461,  1249,   462,   463,\n+     464,   465,   466,     0,   802,  1251,   469,  2815,   471,   472,\n+     473,   474,   475,  1252,  1253,   476,  1254,  1255,   477,   478,\n+     479,   480,   481,   482,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,   494,   495,   496,   497,     0,\n+     505,     0,  1964,  1965,  1966,  1958,  2816,  2817,  1969,  1970,\n+    1971,  1972,  1959,  1960,     0,     0,  1961,  1962,  1963,   110,\n      111,   112,   113,   114,   115,   116,   117,     0,   118,   119,\n      120,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n      122,   123,     0,   124,   125,   126,     0,   128,   129,   130,\n@@ -7536,153 +7695,299 @@ static const yytype_int16 yytable[] =\n      471,   472,   473,   474,   475,     0,     0,   476,     0,     0,\n      477,   478,   479,   480,   481,   482,   483,   484,   485,   486,\n      487,   488,   489,   490,   491,   492,   493,   494,   495,   496,\n-     497,   505,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,  1971,     0,     0,\n-     110,   111,   112,   113,   114,   115,   116,   117,     0,   118,\n-     119,   120,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,   122,   123,     0,   124,   125,   126,     0,   128,   129,\n-     130,   131,   132,     0,   134,   135,     0,   136,   137,   138,\n-     139,   140,   141,     0,     0,   142,   143,   144,   145,   146,\n-       0,   147,   148,   149,   150,   151,     0,     0,     0,   153,\n-     154,   155,   156,   157,   158,     0,   160,   161,   162,     0,\n-     163,   164,   165,   166,   167,   168,     0,     0,   170,   171,\n-     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,\n-     182,     0,   183,     0,   184,   185,   186,   187,   188,   189,\n-       0,   190,   191,   192,   193,   194,     0,     0,   195,   196,\n-     197,   198,   199,     0,   200,   201,   202,     0,   203,   204,\n-     205,     0,   206,   207,   208,   209,   210,   211,   212,   213,\n-     214,   215,   216,     0,   217,     0,   218,   219,   220,   221,\n-       0,   222,     0,   223,     0,     0,     0,   226,   227,   506,\n-       0,   230,     0,   231,     0,   232,   233,   234,     0,   235,\n-     236,   237,   238,   239,   240,   241,     0,   243,   244,   245,\n-     246,     0,   247,   248,   249,   250,   251,   252,   253,     0,\n-     254,     0,   256,   257,   258,   259,   260,   261,   262,   263,\n-       0,   264,     0,   265,     0,     0,   268,     0,   270,   271,\n-     272,   273,   274,   275,     0,     0,   276,     0,   278,     0,\n-       0,   280,   281,   282,   283,   284,   285,   286,   287,   507,\n-     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,\n-     299,   300,   301,   302,   303,   304,   305,   306,   307,     0,\n-     309,   310,   311,   312,   313,     0,   314,   315,     0,   317,\n-       0,   318,   319,   320,   321,   322,   323,     0,   324,   325,\n-       0,     0,   326,   327,   328,     0,     0,   329,   330,     0,\n-     332,     0,   334,   335,   336,   337,   338,   339,   340,   341,\n-     342,   343,   344,     0,     0,     0,     0,   345,   346,   347,\n-       0,   349,   350,   351,   352,   353,   354,     0,   355,   356,\n-     357,   358,   359,   360,     0,   361,   362,   363,   364,   365,\n-     366,   367,   368,     0,   369,   370,   371,   372,   373,   374,\n-     375,   376,   377,   378,   379,   380,   381,     0,   382,   383,\n-       0,   385,   386,   387,   388,   389,   390,   391,   392,   393,\n-     394,   395,   396,   397,   398,   399,     0,     0,   400,   401,\n-     402,   403,   404,   405,   406,   407,   408,   409,     0,   411,\n-     412,   413,   414,     0,   415,   416,   417,   418,   419,   420,\n-     421,   422,   423,   424,   425,   426,   508,   428,   429,   430,\n-       0,   431,   432,     0,   433,     0,   435,   436,   437,   438,\n-     439,     0,   440,   441,     0,     0,   442,   443,   444,   445,\n-     446,     0,   447,   448,   449,   450,   451,   452,   453,   454,\n-       0,     0,   455,   456,   457,     0,   458,   459,   460,   461,\n-       0,   462,   463,   464,   465,   466,   467,   468,     0,   469,\n-       0,   471,   472,   473,   474,   475,     0,     0,   476,     0,\n-       0,   477,   478,   479,   480,   481,   482,   483,   484,   485,\n-     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,\n-     496,   497,   505,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,  2071,     0,\n-       0,   110,   111,   112,   113,   114,   115,   116,   117,     0,\n-     118,   119,   120,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,   122,   123,     0,   124,   125,   126,     0,   128,\n-     129,   130,   131,   132,     0,   134,   135,     0,   136,   137,\n-     138,   139,   140,   141,     0,     0,   142,   143,   144,   145,\n-     146,     0,   147,   148,   149,   150,   151,     0,     0,     0,\n-     153,   154,   155,   156,   157,   158,     0,   160,   161,   162,\n-       0,   163,   164,   165,   166,   167,   168,     0,     0,   170,\n-     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,\n-     181,   182,     0,   183,     0,   184,   185,   186,   187,   188,\n-     189,     0,   190,   191,   192,   193,   194,     0,     0,   195,\n-     196,   197,   198,   199,     0,   200,   201,   202,     0,   203,\n-     204,   205,     0,   206,   207,   208,   209,   210,   211,   212,\n-     213,   214,   215,   216,     0,   217,     0,   218,   219,   220,\n-     221,     0,   222,     0,   223,     0,     0,     0,   226,   227,\n-     506,     0,   230,     0,   231,     0,   232,   233,   234,     0,\n-     235,   236,   237,   238,   239,   240,   241,     0,   243,   244,\n-     245,   246,     0,   247,   248,   249,   250,   251,   252,   253,\n-       0,   254,     0,   256,   257,   258,   259,   260,   261,   262,\n-     263,     0,   264,     0,   265,     0,     0,   268,     0,   270,\n-     271,   272,   273,   274,   275,     0,     0,   276,     0,   278,\n-       0,     0,   280,   281,   282,   283,   284,   285,   286,   287,\n-     507,   289,   290,   291,   292,   293,   294,   295,   296,   297,\n-     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,\n-       0,   309,   310,   311,   312,   313,     0,   314,   315,     0,\n-     317,     0,   318,   319,   320,   321,   322,   323,     0,   324,\n-     325,     0,     0,   326,   327,   328,     0,     0,   329,   330,\n-       0,   332,     0,   334,   335,   336,   337,   338,   339,   340,\n-     341,   342,   343,   344,     0,     0,     0,     0,   345,   346,\n-     347,     0,   349,   350,   351,   352,   353,   354,     0,   355,\n-     356,   357,   358,   359,   360,     0,   361,   362,   363,   364,\n-     365,   366,   367,   368,     0,   369,   370,   371,   372,   373,\n-     374,   375,   376,   377,   378,   379,   380,   381,     0,   382,\n-     383,     0,   385,   386,   387,   388,   389,   390,   391,   392,\n-     393,   394,   395,   396,   397,   398,   399,     0,     0,   400,\n-     401,   402,   403,   404,   405,   406,   407,   408,   409,     0,\n-     411,   412,   413,   414,     0,   415,   416,   417,   418,   419,\n-     420,   421,   422,   423,   424,   425,   426,   508,   428,   429,\n-     430,     0,   431,   432,     0,   433,     0,   435,   436,   437,\n-     438,   439,     0,   440,   441,     0,     0,   442,   443,   444,\n-     445,   446,     0,   447,   448,   449,   450,   451,   452,   453,\n-     454,     0,     0,   455,   456,   457,     0,   458,   459,   460,\n-     461,     0,   462,   463,   464,   465,   466,   467,   468,     0,\n-     469,     0,   471,   472,   473,   474,   475,     0,     0,   476,\n-       0,     0,   477,   478,   479,   480,   481,   482,   483,   484,\n-     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,\n-     495,   496,   497,     0,  2768,  1397,   629,     0,     0,  1951,\n-     989,     0,     0,     0,     0,     0,  1952,  1953,     0,  2935,\n-    1954,  1955,  1956,   110,   111,   112,   113,   114,   115,   116,\n-     117,  1176,   118,   119,   120,  1177,  1178,  1179,  2769,  1180,\n-    1181,  1182,  1183,  2770,   122,   123,  1184,   124,   125,   126,\n-    2771,   128,   129,   130,     0,   749,  2772,   751,   752,  1185,\n-     136,   137,   138,   139,   140,   141,  1186,  1187,   142,   143,\n-     753,   754,   146,  1188,   147,   148,   149,   150,     0,  1189,\n-    2773,  1190,  2774,   154,   155,   156,   157,   158,  2775,   160,\n-     161,   162,  1191,   163,   164,   165,   166,   167,   168,  1192,\n-    2776,   170,   171,   172,   173,   174,   175,   176,   177,   178,\n-     179,   759,   760,   182,  1193,   183,  1194,   184,   185,   186,\n-     187,   188,   189,  1195,   190,   191,   192,   193,   194,  1196,\n-    1197,   195,   196,   761,   198,   199,  1198,   200,   201,   202,\n-    1199,   203,   204,   205,  1200,   206,   207,   208,   209,     0,\n-     211,   212,   213,   214,   215,     0,  1201,   217,  1202,   218,\n-     219,   762,   221,  1203,   222,  1204,   223,  2777,  1205,  2778,\n-     226,   227,  2779,  2780,   230,  1206,   231,  1207,     0,     0,\n-     234,  1208,   235,   236,   237,   238,   239,   240,   241,  2781,\n-     243,   244,   245,   246,  1209,   247,   248,   249,   250,   251,\n-     252,   253,  1210,   254,  2782,     0,   257,   258,   259,   260,\n-     261,   769,   770,  1211,   771,  1212,   265,  2783,  2784,   268,\n-    2785,   270,   271,   272,   273,   274,   275,  1213,  1214,   276,\n-    2786,   278,  2787,  1215,   280,   281,   282,   283,   284,   285,\n-     286,   287,  2788,   289,   290,   291,   292,   293,   294,   295,\n-     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,\n-     306,   778,  2789,   780,   310,   311,   312,  2790,  1216,   314,\n-     315,  2791,   317,  1217,     0,   319,   782,   321,   322,   323,\n-    1218,   324,   325,  1219,  1220,  2792,   327,   328,  1221,  1222,\n-     329,     0,  2793,   332,  2794,     0,   335,   336,   337,   338,\n-     339,   340,   341,   342,   343,   344,  1223,  1224,  1225,  1226,\n-     345,   346,     0,  2795,   349,   350,     0,   352,   353,   354,\n-    1227,   355,   356,   357,   358,   359,   360,  1228,   361,   362,\n-     363,   786,   365,   366,   367,   368,  1229,   369,   370,   371,\n-     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,\n-    1230,   382,   383,  2796,   385,   386,   387,   788,   389,   390,\n-     391,   392,   393,   394,   395,   396,   397,   398,   399,  1231,\n-    2797,   400,   401,   402,   403,   404,   405,  2798,   407,   408,\n-     409,  2799,   411,   412,   792,   414,  1232,   415,   416,   417,\n-     418,   419,   420,   421,   422,   423,   424,   425,   426,  2800,\n-     428,     0,   430,  1233,   431,   432,  1234,   433,  2801,   435,\n-     436,   437,   438,   439,  1235,   795,   796,  1236,  1237,   442,\n-     443,     0,   445,     0,  1238,   447,   448,  2802,   450,   451,\n-     452,   453,   454,  2803,  1240,   455,   456,   457,  1241,   458,\n-     459,   460,   461,  1242,   462,   463,   464,   465,   466,     0,\n-     799,  1244,   469,  2804,   471,   472,   473,   474,   475,  1245,\n-    1246,   476,  1247,  1248,   477,   478,   479,   480,   481,   482,\n+     497,     0,     0,     0,  1964,  1965,  1966,     0,  1967,  1968,\n+    1969,  1970,  1971,  1972,  1552,     0,     0,  1553,     0,     0,\n+       0,  1554,  1555,  1556,  1557,  1558,  1559,  1560,     0,     0,\n+       0,     0,     0,     0,     0,     0,  1552,     0,     0,  1553,\n+       0,     0,  1561,  1554,  1555,  1556,  1557,  1558,  1559,  1560,\n+       0,     0,  1563,     0,     0,     0,     0,     0,     0,  1564,\n+       0,     0,     0,     0,  1561,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,  1563,     0,     0,     0,     0,     0,\n+       0,  1564,     0,  1552,  1565,     0,  1553,     0,     0,     0,\n+    1554,  1555,  1556,  1557,  1558,  1559,  1560,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,  1565,     0,     0,     0,\n+       0,  1561,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,  1563,     0,     0,     0,     0,     0,     0,  1564,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,  1552,     0,\n+       0,  1553,     0,     0,     0,  1554,  1555,  1556,  1557,  1558,\n+    1559,  1560,     0,  1565,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,  1561,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,  1563,     0,  1566,     0,\n+       0,     0,     0,  1564,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,  1567,     0,     0,     0,     0,  1568,\n+    1566,     0,     0,     0,     0,     0,     0,     0,  1565,     0,\n+       0,     0,     0,     0,     0,     0,  1567,     0,     0,     0,\n+       0,  1568,  1569,  1570,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,  1571,     0,     0,\n+       0,     0,     0,     0,  1569,  1570,     0,  1566,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,  1571,\n+       0,     0,     0,  1567,     0,     0,     0,     0,  1568,     0,\n+       0,     0,     0,  1572,     0,     0,  1573,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+    1574,  1569,  1570,  1575,     0,  1572,     0,     0,  1573,     0,\n+       0,     0,  1566,     0,     0,     0,  1571,     0,     0,     0,\n+       0,     0,  1574,     0,     0,  1575,     0,     0,  1567,     0,\n+       0,     0,     0,  1568,     0,     0,     0,     0,  1552,     0,\n+       0,  1553,     0,     0,     0,  1554,  1555,  1556,  1557,  1558,\n+    1559,  1560,  1572,     0,     0,  1573,  1569,  1570,     0,     0,\n+       0,     0,     0,     0,     0,     0,  1561,     0,     0,  1574,\n+       0,  1571,  1575,     0,     0,     0,  1563,     0,     0,     0,\n+       0,     0,     0,  1564,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,  1576,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,  1572,  1565,     0,\n+    1573,     0,     0,     0,     0,     0,     0,     0,  1576,     0,\n+       0,     0,     0,     0,  1574,     0,     0,  1575,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,  1576,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+    1577,     0,  1566,  1578,  1579,  1580,     0,  1581,  1582,  1583,\n+    1584,  1585,  1586,     0,     0,     0,     0,  1984,  1567,     0,\n+    1576,     0,  1577,  1568,     0,  1578,  1579,  1580,     0,  1581,\n+    1582,  1583,  1584,  1585,  1586,     0,     0,     0,     0,  2298,\n+       0,     0,     0,     0,     0,     0,  1569,  1570,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,  1571,     0,     0,     0,     0,     0,     0,     0,  1577,\n+       0,     0,  1578,  1579,  1580,     0,  1581,  1582,  1583,  1584,\n+    1585,  1586,     0,     0,     0,     0,  2383,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,  1572,     0,     0,\n+    1573,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,  1574,     0,     0,  1575,     0,     0,\n+       0,     0,     0,     0,  1577,     0,     0,  1578,  1579,  1580,\n+       0,  1581,  1582,  1583,  1584,  1585,  1586,     0,     0,     0,\n+       0,  2400,     0,     0,     0,     0,     0,  1552,     0,     0,\n+    1553,     0,     0,     0,  1554,  1555,  1556,  1557,  1558,  1559,\n+    1560,     0,     0,     0,     0,     0,     0,     0,     0,  1552,\n+       0,     0,  1553,     0,     0,  1561,  1554,  1555,  1556,  1557,\n+    1558,  1559,  1560,     0,     0,  1563,     0,     0,     0,     0,\n+       0,     0,  1564,     0,     0,     0,     0,  1561,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,  1563,     0,     0,\n+    1576,     0,     0,     0,  1564,     0,  1552,  1565,     0,  1553,\n+       0,     0,     0,  1554,  1555,  1556,  1557,  1558,  1559,  1560,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,  1565,\n+       0,     0,     0,     0,  1561,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,  1563,     0,     0,     0,     0,     0,\n+       0,  1564,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,  1552,     0,     0,  1553,     0,     0,     0,  1554,  1555,\n+    1556,  1557,  1558,  1559,  1560,     0,  1565,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,  1561,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,  1563,\n+       0,  1566,     0,     0,  1577,     0,  1564,  1578,  1579,  1580,\n+       0,  1581,  1582,  1583,  1584,  1585,  1586,  1567,     0,     0,\n+       0,  2606,  1568,  1566,     0,     0,     0,     0,     0,     0,\n+       0,  1565,     0,     0,     0,     0,     0,     0,     0,  1567,\n+       0,     0,     0,     0,  1568,  1569,  1570,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+    1571,     0,     0,     0,     0,     0,     0,  1569,  1570,     0,\n+    1566,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,  1571,     0,     0,     0,  1567,     0,     0,     0,\n+       0,  1568,     0,     0,     0,     0,  1572,     0,     0,  1573,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,  1574,  1569,  1570,  1575,     0,  1572,     0,\n+       0,  1573,     0,     0,     0,  1566,     0,     0,     0,  1571,\n+       0,     0,     0,     0,     0,  1574,     0,     0,  1575,     0,\n+       0,  1567,     0,     0,     0,     0,  1568,     0,     0,     0,\n+       0,  1552,     0,     0,  1553,     0,     0,     0,  1554,  1555,\n+    1556,  1557,  1558,  1559,  1560,  1572,     0,     0,  1573,  1569,\n+    1570,     0,     0,     0,     0,     0,     0,     0,     0,  1561,\n+       0,     0,  1574,     0,  1571,  1575,     0,     0,     0,  1563,\n+       0,     0,     0,     0,     0,     0,  1564,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,  1576,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+    1572,  1565,     0,  1573,     0,     0,     0,     0,     0,     0,\n+       0,  1576,     0,     0,     0,     0,     0,  1574,     0,     0,\n+    1575,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,  1576,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,  1577,     0,  1566,  1578,  1579,  1580,     0,\n+    1581,  1582,  1583,  1584,  1585,  1586,     0,     0,     0,     0,\n+    2658,  1567,     0,  1576,     0,  1577,  1568,     0,  1578,  1579,\n+    1580,     0,  1581,  1582,  1583,  1584,  1585,  1586,     0,     0,\n+       0,     0,  2725,     0,     0,     0,     0,     0,     0,  1569,\n+    1570,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,  1571,     0,     0,     0,     0,     0,\n+       0,     0,  1577,     0,     0,  1578,  1579,  1580,     0,  1581,\n+    1582,  1583,  1584,  1585,  1586,     0,     0,     0,     0,  2939,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+    1572,     0,     0,  1573,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,  1574,     0,     0,\n+    1575,     0,     0,     0,     0,     0,     0,  1577,     0,     0,\n+    1578,  1579,  1580,     0,  1581,  1582,  1583,  1584,  1585,  1586,\n+       0,     0,     0,     0,  2945,     0,     0,     0,     0,     0,\n+    1552,     0,     0,  1553,     0,     0,     0,  1554,  1555,  1556,\n+    1557,  1558,  1559,  1560,     0,     0,     0,     0,     0,     0,\n+       0,     0,  1552,     0,     0,  1553,     0,     0,  1561,  1554,\n+    1555,  1556,  1557,  1558,  1559,  1560,     0,     0,  1563,     0,\n+       0,     0,     0,     0,     0,  1564,     0,     0,     0,     0,\n+    1561,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+    1563,     0,     0,  1576,     0,     0,     0,  1564,     0,  1552,\n+    1565,     0,  1553,     0,     0,     0,  1554,  1555,  1556,  1557,\n+    1558,  1559,  1560,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,  1565,     0,     0,     0,     0,  1561,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,  1563,     0,     0,\n+       0,     0,     0,     0,  1564,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,  1552,     0,     0,  1553,     0,     0,\n+       0,  1554,  1555,  1556,  1557,  1558,  1559,  1560,     0,  1565,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,  1561,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,  1563,     0,  1566,     0,     0,  1577,     0,  1564,\n+    1578,  1579,  1580,     0,  1581,  1582,  1583,  1584,  1585,  1586,\n+    1567,     0,     0,     0,  3094,  1568,  1566,     0,     0,     0,\n+       0,     0,     0,     0,  1565,     0,     0,     0,     0,     0,\n+       0,     0,  1567,     0,     0,     0,     0,  1568,  1569,  1570,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,  1571,     0,     0,     0,     0,     0,     0,\n+    1569,  1570,     0,  1566,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,  1571,     0,     0,     0,  1567,\n+       0,     0,     0,     0,  1568,     0,     0,     0,     0,  1572,\n+       0,     0,  1573,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,  1574,  1569,  1570,  1575,\n+       0,  1572,     0,     0,  1573,     0,     0,     0,  1566,     0,\n+       0,     0,  1571,     0,     0,     0,     0,     0,  1574,     0,\n+       0,  1575,     0,     0,  1567,     0,     0,     0,     0,  1568,\n+       0,     0,     0,     0,  1552,     0,     0,  1553,     0,     0,\n+       0,  1554,  1555,  1556,  1557,  1558,  1559,  1560,  1572,     0,\n+       0,  1573,  1569,  1570,     0,     0,     0,     0,     0,     0,\n+       0,     0,  1561,     0,     0,  1574,     0,  1571,  1575,     0,\n+       0,     0,  1563,     0,     0,     0,     0,     0,     0,  1564,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,  1576,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,  1572,  1565,     0,  1573,     0,     0,     0,\n+       0,     0,     0,     0,  1576,     0,     0,     0,     0,     0,\n+    1574,     0,     0,  1575,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,   494,   495,   496,   497,     0,   505,     0,  1957,  1958,\n-    1959,  1951,  2805,  2806,  1962,  1963,  1964,  1965,  1952,  1953,\n-       0,     0,  1954,  1955,  1956,   110,   111,   112,   113,   114,\n+       0,  1576,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,  1577,     0,  1566,  1578,\n+    1579,  1580,     0,  1581,  1582,  1583,  1584,  1585,  1586,     0,\n+       0,     0,     0,  3116,  1567,     0,  1576,     0,  1577,  1568,\n+       0,  1578,  1579,  1580,     0,  1581,  1582,  1583,  1584,  1585,\n+    1586,     0,     0,     0,     0,  3214,     0,     0,     0,     0,\n+       0,     0,  1569,  1570,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,  1571,     0,     0,\n+       0,     0,     0,     0,     0,  1577,     0,     0,  1578,  1579,\n+    1580,     0,  1581,  1582,  1583,  1584,  1585,  1586,     0,     0,\n+       0,     0,  3269,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,  1572,     0,     0,  1573,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+    1574,     0,     0,  1575,     0,     0,     0,     0,     0,     0,\n+    1577,     0,     0,  1578,  1579,  1580,     0,  1581,  1582,  1583,\n+    1584,  1585,  1586,     0,     0,     0,     0,  3291,     0,     0,\n+       0,     0,     0,  1552,     0,     0,  1553,     0,     0,     0,\n+    1554,  1555,  1556,  1557,  1558,  1559,  1560,     0,     0,     0,\n+       0,     0,     0,     0,     0,  1552,     0,     0,  1553,     0,\n+       0,  1561,  1554,  1555,  1556,  1557,  1558,  1559,  1560,     0,\n+       0,  1563,     0,     0,     0,     0,     0,     0,  1564,     0,\n+       0,     0,     0,  1561,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,  1563,     0,     0,  1576,     0,     0,     0,\n+    1564,     0,  1552,  1565,     0,  1553,     0,     0,     0,  1554,\n+    1555,  1556,  1557,  1558,  1559,  1560,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,  1565,     0,     0,     0,     0,\n+    1561,     0,     0,     0,     0,     0,  1141,     0,     0,     0,\n+    1563,     0,  1142,     0,     0,     0,     0,  1564,     0,     0,\n+    1154,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+    1155,     0,  1565,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,  1566,     0,     0,\n+    1577,     0,     0,  1578,  1579,  1580,     0,  1581,  1582,  1583,\n+    1584,  1585,  1586,  1567,  1156,  1737,     0,     0,  1568,  1566,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,  1567,     0,     0,     0,     0,\n+    1568,  1569,  1570,  1143,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,  1571,     0,     0,     0,\n+       0,     0,     0,  1569,  1570,     0,  1566,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,  1571,     0,\n+       0,     0,  1567,     0,     0,     0,     0,  1568,     0,     0,\n+       0,     0,  1572,     0,     0,  1573,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,  1157,     0,     0,  1574,\n+    1569,  1570,  1575,     0,  1572,     0,     0,  1573,     0,     0,\n+       0,     0,     0,     0,     0,  1571,     0,     0,     0,     0,\n+       0,  1574,     0,     0,  1575,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,  1158,     0,     0,     0,     0,\n+       0,  1572,     0,  1159,  1573,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,  1160,     0,     0,  1574,     0,\n+       0,  1575,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,  1144,     0,     0,     0,\n+       0,     0,     0,     0,     0,  1576,  1161,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,  1576,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,  2167,     0,     0,     0,  1146,     0,  1163,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,  1576,     0,     0,     0,     0,     0,\n+    1164,     0,     0,     0,     0,  2168,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,  1166,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,  1577,\n+       0,     0,  1578,  1579,  1580,     0,  1581,  1582,  1583,  1584,\n+    1585,  1586,     0,     0,  2679,     0,     0,     0,     0,     0,\n+       0,  1577,     0,     0,  1578,  1579,  1580,     0,  1581,  1582,\n+    1583,  1584,  1585,  1586,     0,     0,  3086,     0,     0,     0,\n+       0,     0,     0,     0,     0,  1148,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,  1182,     0,     0,  1577,     0,\n+       0,  1578,  1579,  1580,     0,  1581,  1582,  1583,  1584,  1585,\n+    1586,     0,     0,  3255,   110,   111,   112,   113,   114,   115,\n+     116,   117,  1183,   118,   119,   120,  1184,  1185,  1186,   835,\n+    1187,  1188,  1189,  1190,   836,   122,   123,  1191,   124,   125,\n+     126,   837,   128,   129,   130,   838,   839,   840,   841,   842,\n+    1192,   136,   137,   138,   139,   140,   141,  1193,  1194,   142,\n+     143,   843,   844,   146,  1195,   147,   148,   149,   150,   845,\n+    1196,   846,  1197,   847,   154,   155,   156,   157,   158,   848,\n+     160,   161,   162,  1198,   163,   164,   165,   166,   167,   168,\n+    1199,   849,   170,   171,   172,   173,   174,   175,   176,   177,\n+     178,   179,   850,   851,   182,  1200,   183,  1201,   184,   185,\n+     186,   187,   188,   189,  1202,   190,   191,   192,   193,   194,\n+    1203,  1204,   195,   196,   197,   198,   199,  1205,   200,   201,\n+     202,  1206,   203,   204,   205,  1207,   206,   207,   208,   209,\n+     852,   211,   212,   213,   214,   215,   853,  1208,   217,  1209,\n+     218,   219,   854,   221,  1210,   222,  1211,   223,   855,  1212,\n+     856,   226,   227,   857,   858,   230,  1213,   231,  1214,   859,\n+     860,   234,  1215,   235,   236,   237,   238,   239,   240,   241,\n+     861,   243,   244,   245,   246,  1216,   247,   248,   249,   250,\n+     251,   252,   253,  1217,   254,   862,   863,   257,   258,   259,\n+     260,   261,   864,   865,  1218,   866,  1219,   265,   867,   868,\n+     268,   869,   270,   271,   272,   273,   274,   275,  1220,  1221,\n+     276,   870,   278,   871,  1222,   280,   281,   282,   283,   284,\n+     285,   286,   287,   872,   289,   290,   291,   292,   293,   294,\n+     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,\n+     305,   306,   873,   874,   875,   310,   311,   312,   876,  1223,\n+     314,   315,   877,   317,  1224,   878,   319,   879,   321,   322,\n+     323,  1225,   324,   325,  1226,  1227,   326,   327,   328,  1228,\n+    1229,   329,   880,   881,   332,   882,   883,   335,   336,   337,\n+     338,   339,   340,   341,   342,   343,   344,  1230,  1231,  1232,\n+    1233,   345,   346,   884,   885,   349,   350,   886,   352,   353,\n+     354,  1234,   355,   356,   357,   358,   359,   360,  1235,   361,\n+     362,   363,   887,   365,   366,   367,   368,  1236,   369,   370,\n+     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,\n+     381,  1237,   382,   383,   888,   385,   386,   387,   889,   389,\n+     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,\n+    1238,   890,   400,   401,   402,   403,   404,   405,   891,   407,\n+     408,   409,   892,   411,   412,   893,   414,  1239,   415,   416,\n+     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,\n+     894,   428,   895,   430,  1240,   431,   432,  1241,   433,   896,\n+     435,   436,   437,   438,   439,  1242,   897,   898,  1243,  1244,\n+     442,   443,   899,   445,   900,  1245,   447,   448,   901,   450,\n+     451,   452,   453,   454,  1246,  1247,   455,   456,   457,  1248,\n+     458,   459,   460,   461,  1249,   462,   463,   464,   465,   466,\n+    1250,   903,  1251,   469,   904,   471,   472,   473,   474,   475,\n+    1252,  1253,   476,  1254,  1255,   477,   478,   479,   480,   481,\n+     482,   905,   906,   907,   908,   909,   910,   911,   912,   913,\n+     914,   915,   494,   495,   496,   497,   505,     0,     0,     0,\n+       0,     0,     0,     0,     0,  1989,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,   110,   111,   112,   113,   114,\n      115,   116,   117,     0,   118,   119,   120,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,   122,   123,     0,   124,\n      125,   126,     0,   128,   129,   130,   131,   132,     0,   134,\n@@ -7728,1024 +8033,1064 @@ static const yytype_int16 yytable[] =\n      466,   467,   468,     0,   469,     0,   471,   472,   473,   474,\n      475,     0,     0,   476,     0,     0,   477,   478,   479,   480,\n      481,   482,   483,   484,   485,   486,   487,   488,   489,   490,\n-     491,   492,   493,   494,   495,   496,   497,     0,     0,     0,\n-    1957,  1958,  1959,     0,  1960,  1961,  1962,  1963,  1964,  1965,\n-    1545,     0,     0,  1546,     0,     0,     0,  1547,  1548,  1549,\n-    1550,  1551,  1552,  1553,     0,     0,     0,     0,     0,     0,\n-       0,     0,  1545,     0,     0,  1546,     0,     0,  1554,  1547,\n-    1548,  1549,  1550,  1551,  1552,  1553,     0,     0,  1556,     0,\n-       0,     0,     0,     0,     0,  1557,     0,     0,     0,     0,\n-    1554,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-    1556,     0,     0,     0,     0,     0,     0,  1557,     0,  1545,\n-    1558,     0,  1546,     0,     0,     0,  1547,  1548,  1549,  1550,\n-    1551,  1552,  1553,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,  1558,     0,     0,     0,     0,  1554,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,  1556,     0,     0,\n-       0,     0,     0,     0,  1557,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,  1545,     0,     0,  1546,     0,     0,\n-       0,  1547,  1548,  1549,  1550,  1551,  1552,  1553,     0,  1558,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,  1554,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,  1556,     0,  1559,     0,     0,     0,     0,  1557,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-    1560,     0,     0,     0,     0,  1561,  1559,     0,     0,     0,\n-       0,     0,     0,     0,  1558,     0,     0,     0,     0,     0,\n-       0,     0,  1560,     0,     0,     0,     0,  1561,  1562,  1563,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,  1564,     0,     0,     0,     0,     0,     0,\n-    1562,  1563,     0,  1559,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,  1564,     0,     0,     0,  1560,\n-       0,     0,     0,     0,  1561,     0,     0,     0,     0,  1565,\n-       0,     0,  1566,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,  1567,  1562,  1563,  1568,\n-       0,  1565,     0,     0,  1566,     0,     0,     0,  1559,     0,\n-       0,     0,  1564,     0,     0,     0,     0,     0,  1567,     0,\n-       0,  1568,     0,     0,  1560,     0,     0,     0,     0,  1561,\n-       0,     0,     0,     0,  1545,     0,     0,  1546,     0,     0,\n-       0,  1547,  1548,  1549,  1550,  1551,  1552,  1553,  1565,     0,\n-       0,  1566,  1562,  1563,     0,     0,     0,     0,     0,     0,\n-       0,     0,  1554,     0,     0,  1567,     0,  1564,  1568,     0,\n-       0,     0,  1556,     0,     0,     0,     0,     0,     0,  1557,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,  1569,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,  1565,  1558,     0,  1566,     0,     0,     0,\n-       0,     0,     0,     0,  1569,     0,     0,     0,     0,     0,\n-    1567,     0,     0,  1568,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,  1569,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,  1570,     0,  1559,  1571,\n-    1572,  1573,     0,  1574,  1575,  1576,  1577,  1578,  1579,     0,\n-       0,     0,     0,  2390,  1560,     0,  1569,     0,  1570,  1561,\n-       0,  1571,  1572,  1573,     0,  1574,  1575,  1576,  1577,  1578,\n-    1579,     0,     0,     0,     0,  2595,     0,     0,     0,     0,\n-       0,     0,  1562,  1563,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,  1564,     0,     0,\n-       0,     0,     0,     0,     0,  1570,     0,     0,  1571,  1572,\n-    1573,     0,  1574,  1575,  1576,  1577,  1578,  1579,     0,     0,\n-       0,     0,  2647,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,  1565,     0,     0,  1566,     0,     0,     0,\n+     491,   492,   493,   494,   495,   496,   497,   505,     0,     0,\n+       0,     0,     0,     0,     0,     0,  2599,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,   110,   111,   112,   113,\n+     114,   115,   116,   117,     0,   118,   119,   120,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,   122,   123,     0,\n+     124,   125,   126,     0,   128,   129,   130,   131,   132,     0,\n+     134,   135,     0,   136,   137,   138,   139,   140,   141,     0,\n+       0,   142,   143,   144,   145,   146,     0,   147,   148,   149,\n+     150,   151,     0,     0,     0,   153,   154,   155,   156,   157,\n+     158,     0,   160,   161,   162,     0,   163,   164,   165,   166,\n+     167,   168,     0,     0,   170,   171,   172,   173,   174,   175,\n+     176,   177,   178,   179,   180,   181,   182,     0,   183,     0,\n+     184,   185,   186,   187,   188,   189,     0,   190,   191,   192,\n+     193,   194,     0,     0,   195,   196,   197,   198,   199,     0,\n+     200,   201,   202,     0,   203,   204,   205,     0,   206,   207,\n+     208,   209,   210,   211,   212,   213,   214,   215,   216,     0,\n+     217,     0,   218,   219,   220,   221,     0,   222,     0,   223,\n+       0,     0,     0,   226,   227,   506,     0,   230,     0,   231,\n+       0,   232,   233,   234,     0,   235,   236,   237,   238,   239,\n+     240,   241,     0,   243,   244,   245,   246,     0,   247,   248,\n+     249,   250,   251,   252,   253,     0,   254,     0,   256,   257,\n+     258,   259,   260,   261,   262,   263,     0,   264,     0,   265,\n+       0,     0,   268,     0,   270,   271,   272,   273,   274,   275,\n+       0,     0,   276,     0,   278,     0,     0,   280,   281,   282,\n+     283,   284,   285,   286,   287,   507,   289,   290,   291,   292,\n+     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,\n+     303,   304,   305,   306,   307,     0,   309,   310,   311,   312,\n+     313,     0,   314,   315,     0,   317,     0,   318,   319,   320,\n+     321,   322,   323,     0,   324,   325,     0,     0,   326,   327,\n+     328,     0,     0,   329,   330,     0,   332,     0,   334,   335,\n+     336,   337,   338,   339,   340,   341,   342,   343,   344,     0,\n+       0,     0,     0,   345,   346,   347,     0,   349,   350,   351,\n+     352,   353,   354,     0,   355,   356,   357,   358,   359,   360,\n+       0,   361,   362,   363,   364,   365,   366,   367,   368,     0,\n+     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,\n+     379,   380,   381,     0,   382,   383,     0,   385,   386,   387,\n+     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,\n+     398,   399,     0,     0,   400,   401,   402,   403,   404,   405,\n+     406,   407,   408,   409,     0,   411,   412,   413,   414,     0,\n+     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,\n+     425,   426,   508,   428,   429,   430,     0,   431,   432,     0,\n+     433,     0,   435,   436,   437,   438,   439,     0,   440,   441,\n+       0,     0,   442,   443,   444,   445,   446,     0,   447,   448,\n+     449,   450,   451,   452,   453,   454,     0,     0,   455,   456,\n+     457,     0,   458,   459,   460,   461,     0,   462,   463,   464,\n+     465,   466,   467,   468,     0,   469,     0,   471,   472,   473,\n+     474,   475,     0,     0,   476,     0,     0,   477,   478,   479,\n+     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,\n+     490,   491,   492,   493,   494,   495,   496,   497,   834,  1404,\n+     629,     0,     0,     0,   995,     0,     0,  2602,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,   110,   111,   112,\n+     113,   114,   115,   116,   117,     0,   118,   119,   120,     0,\n+       0,     0,   835,     0,     0,     0,     0,   836,   122,   123,\n+       0,   124,   125,   126,   837,   128,   129,   130,   838,   839,\n+     840,   841,   842,     0,   136,   137,   138,   139,   140,   141,\n+       0,     0,   142,   143,   843,   844,   146,     0,   147,   148,\n+     149,   150,   845,     0,   846,     0,   847,   154,   155,   156,\n+     157,   158,   848,   160,   161,   162,     0,   163,   164,   165,\n+     166,   167,   168,     0,   849,   170,   171,   172,   173,   174,\n+     175,   176,   177,   178,   179,   850,   851,   182,  1609,   183,\n+       0,   184,   185,   186,   187,   188,   189,     0,   190,   191,\n+     192,   193,   194,     0,     0,   195,   196,   197,   198,   199,\n+       0,   200,   201,   202,     0,   203,   204,   205,     0,   206,\n+     207,   208,   209,   852,   211,   212,   213,   214,   215,   853,\n+    1405,   217,     0,   218,   219,   854,   221,     0,   222,     0,\n+     223,   855,     0,   856,   226,   227,   857,   858,   230,     0,\n+     231,     0,   859,   860,   234,     0,   235,   236,   237,   238,\n+     239,   240,   241,   861,   243,   244,   245,   246,     0,   247,\n+     248,   249,   250,   251,   252,   253,     0,   254,   862,   863,\n+     257,   258,   259,   260,   261,   864,   865,     0,   866,     0,\n+     265,   867,   868,   268,   869,   270,   271,   272,   273,   274,\n+     275,     0,     0,   276,   870,   278,   871,     0,   280,   281,\n+     282,   283,   284,   285,   286,   287,   872,   289,   290,   291,\n+     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,\n+     302,   303,   304,   305,   306,   873,   874,   875,   310,   311,\n+     312,   876,     0,   314,   315,   877,   317,     0,   878,   319,\n+     879,   321,   322,   323,     0,   324,   325,  1406,     0,   326,\n+     327,   328,     0,     0,   329,   880,   881,   332,   882,   883,\n+     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,\n+       0,     0,     0,     0,   345,   346,   884,   885,   349,   350,\n+     886,   352,   353,   354,     0,   355,   356,   357,   358,   359,\n+     360,     0,   361,   362,   363,   887,   365,   366,   367,   368,\n+       0,   369,   370,   371,   372,   373,   374,   375,   376,   377,\n+     378,   379,   380,   381,     0,   382,   383,   888,   385,   386,\n+     387,   889,   389,   390,   391,   392,   393,   394,   395,   396,\n+     397,   398,   399,     0,   890,   400,   401,   402,   403,   404,\n+     405,   891,   407,   408,   409,   892,   411,   412,   893,   414,\n+       0,   415,   416,   417,   418,   419,   420,   421,   422,   423,\n+     424,   425,   426,   894,   428,   895,   430,     0,   431,   432,\n+       0,   433,   896,   435,   436,   437,   438,   439,     0,   897,\n+     898,     0,     0,   442,   443,   899,   445,   900,  1407,   447,\n+     448,   901,   450,   451,   452,   453,   454,     0,     0,   455,\n+     456,   457,     0,   458,   459,   460,   461,     0,   462,   463,\n+     464,   465,   466,  1250,   903,     0,   469,   904,   471,   472,\n+     473,   474,   475,     0,     0,   476,     0,     0,   477,   478,\n+     479,   480,   481,   482,   905,   906,   907,   908,   909,   910,\n+     911,   912,   913,   914,   915,   494,   495,   496,   497,   834,\n+    1404,   629,     0,     0,     0,   995,  1408,  1409,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,   110,   111,\n+     112,   113,   114,   115,   116,   117,     0,   118,   119,   120,\n+       0,     0,     0,   835,     0,     0,     0,     0,   836,   122,\n+     123,     0,   124,   125,   126,   837,   128,   129,   130,   838,\n+     839,   840,   841,   842,     0,   136,   137,   138,   139,   140,\n+     141,     0,     0,   142,   143,   843,   844,   146,     0,   147,\n+     148,   149,   150,   845,     0,   846,     0,   847,   154,   155,\n+     156,   157,   158,   848,   160,   161,   162,     0,   163,   164,\n+     165,   166,   167,   168,     0,   849,   170,   171,   172,   173,\n+     174,   175,   176,   177,   178,   179,   850,   851,   182,  1611,\n+     183,     0,   184,   185,   186,   187,   188,   189,     0,   190,\n+     191,   192,   193,   194,     0,     0,   195,   196,   197,   198,\n+     199,     0,   200,   201,   202,     0,   203,   204,   205,     0,\n+     206,   207,   208,   209,   852,   211,   212,   213,   214,   215,\n+     853,  1405,   217,     0,   218,   219,   854,   221,     0,   222,\n+       0,   223,   855,     0,   856,   226,   227,   857,   858,   230,\n+       0,   231,     0,   859,   860,   234,     0,   235,   236,   237,\n+     238,   239,   240,   241,   861,   243,   244,   245,   246,     0,\n+     247,   248,   249,   250,   251,   252,   253,     0,   254,   862,\n+     863,   257,   258,   259,   260,   261,   864,   865,     0,   866,\n+       0,   265,   867,   868,   268,   869,   270,   271,   272,   273,\n+     274,   275,     0,     0,   276,   870,   278,   871,     0,   280,\n+     281,   282,   283,   284,   285,   286,   287,   872,   289,   290,\n+     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,\n+     301,   302,   303,   304,   305,   306,   873,   874,   875,   310,\n+     311,   312,   876,     0,   314,   315,   877,   317,     0,   878,\n+     319,   879,   321,   322,   323,     0,   324,   325,  1406,     0,\n+     326,   327,   328,     0,     0,   329,   880,   881,   332,   882,\n+     883,   335,   336,   337,   338,   339,   340,   341,   342,   343,\n+     344,     0,     0,     0,     0,   345,   346,   884,   885,   349,\n+     350,   886,   352,   353,   354,     0,   355,   356,   357,   358,\n+     359,   360,     0,   361,   362,   363,   887,   365,   366,   367,\n+     368,     0,   369,   370,   371,   372,   373,   374,   375,   376,\n+     377,   378,   379,   380,   381,     0,   382,   383,   888,   385,\n+     386,   387,   889,   389,   390,   391,   392,   393,   394,   395,\n+     396,   397,   398,   399,     0,   890,   400,   401,   402,   403,\n+     404,   405,   891,   407,   408,   409,   892,   411,   412,   893,\n+     414,     0,   415,   416,   417,   418,   419,   420,   421,   422,\n+     423,   424,   425,   426,   894,   428,   895,   430,     0,   431,\n+     432,     0,   433,   896,   435,   436,   437,   438,   439,     0,\n+     897,   898,     0,     0,   442,   443,   899,   445,   900,  1407,\n+     447,   448,   901,   450,   451,   452,   453,   454,     0,     0,\n+     455,   456,   457,     0,   458,   459,   460,   461,     0,   462,\n+     463,   464,   465,   466,  1250,   903,     0,   469,   904,   471,\n+     472,   473,   474,   475,     0,     0,   476,     0,     0,   477,\n+     478,   479,   480,   481,   482,   905,   906,   907,   908,   909,\n+     910,   911,   912,   913,   914,   915,   494,   495,   496,   497,\n+     834,  1404,   629,     0,     0,     0,   995,  1408,  1409,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,   110,\n+     111,   112,   113,   114,   115,   116,   117,     0,   118,   119,\n+     120,     0,     0,     0,   835,     0,     0,     0,     0,   836,\n+     122,   123,     0,   124,   125,   126,   837,   128,   129,   130,\n+     838,   839,   840,   841,   842,     0,   136,   137,   138,   139,\n+     140,   141,     0,     0,   142,   143,   843,   844,   146,     0,\n+     147,   148,   149,   150,   845,     0,   846,     0,   847,   154,\n+     155,   156,   157,   158,   848,   160,   161,   162,     0,   163,\n+     164,   165,   166,   167,   168,     0,   849,   170,   171,   172,\n+     173,   174,   175,   176,   177,   178,   179,   850,   851,   182,\n+       0,   183,     0,   184,   185,   186,   187,   188,   189,     0,\n+     190,   191,   192,   193,   194,     0,     0,   195,   196,   197,\n+     198,   199,     0,   200,   201,   202,     0,   203,   204,   205,\n+       0,   206,   207,   208,   209,   852,   211,   212,   213,   214,\n+     215,   853,  1405,   217,     0,   218,   219,   854,   221,     0,\n+     222,     0,   223,   855,     0,   856,   226,   227,   857,   858,\n+     230,     0,   231,     0,   859,   860,   234,     0,   235,   236,\n+     237,   238,   239,   240,   241,   861,   243,   244,   245,   246,\n+       0,   247,   248,   249,   250,   251,   252,   253,     0,   254,\n+     862,   863,   257,   258,   259,   260,   261,   864,   865,     0,\n+     866,     0,   265,   867,   868,   268,   869,   270,   271,   272,\n+     273,   274,   275,     0,     0,   276,   870,   278,   871,     0,\n+     280,   281,   282,   283,   284,   285,   286,   287,   872,   289,\n+     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,\n+     300,   301,   302,   303,   304,   305,   306,   873,   874,   875,\n+     310,   311,   312,   876,     0,   314,   315,   877,   317,     0,\n+     878,   319,   879,   321,   322,   323,     0,   324,   325,  1406,\n+       0,   326,   327,   328,     0,     0,   329,   880,   881,   332,\n+     882,   883,   335,   336,   337,   338,   339,   340,   341,   342,\n+     343,   344,     0,     0,     0,     0,   345,   346,   884,   885,\n+     349,   350,   886,   352,   353,   354,     0,   355,   356,   357,\n+     358,   359,   360,     0,   361,   362,   363,   887,   365,   366,\n+     367,   368,     0,   369,   370,   371,   372,   373,   374,   375,\n+     376,   377,   378,   379,   380,   381,     0,   382,   383,   888,\n+     385,   386,   387,   889,   389,   390,   391,   392,   393,   394,\n+     395,   396,   397,   398,   399,     0,   890,   400,   401,   402,\n+     403,   404,   405,   891,   407,   408,   409,   892,   411,   412,\n+     893,   414,     0,   415,   416,   417,   418,   419,   420,   421,\n+     422,   423,   424,   425,   426,   894,   428,   895,   430,     0,\n+     431,   432,     0,   433,   896,   435,   436,   437,   438,   439,\n+       0,   897,   898,     0,     0,   442,   443,   899,   445,   900,\n+    1407,   447,   448,   901,   450,   451,   452,   453,   454,     0,\n+       0,   455,   456,   457,     0,   458,   459,   460,   461,     0,\n+     462,   463,   464,   465,   466,  1250,   903,     0,   469,   904,\n+     471,   472,   473,   474,   475,     0,     0,   476,     0,     0,\n+     477,   478,   479,   480,   481,   482,   905,   906,   907,   908,\n+     909,   910,   911,   912,   913,   914,   915,   494,   495,   496,\n+     497,     0,     0,  1552,     0,     0,  1553,     0,  1408,  1409,\n+    1554,  1555,  1556,  1557,  1558,  1559,  1560,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-    1567,     0,     0,  1568,     0,     0,     0,     0,     0,     0,\n-    1570,     0,     0,  1571,  1572,  1573,     0,  1574,  1575,  1576,\n-    1577,  1578,  1579,     0,     0,     0,     0,  2714,     0,     0,\n-       0,     0,     0,  1545,     0,     0,  1546,     0,     0,     0,\n-    1547,  1548,  1549,  1550,  1551,  1552,  1553,     0,     0,     0,\n-       0,     0,     0,     0,     0,  1545,     0,     0,  1546,     0,\n-       0,  1554,  1547,  1548,  1549,  1550,  1551,  1552,  1553,     0,\n-       0,  1556,     0,     0,     0,     0,     0,     0,  1557,     0,\n-       0,     0,     0,  1554,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,  1556,     0,     0,  1569,     0,     0,     0,\n-    1557,     0,  1545,  1558,     0,  1546,     0,     0,     0,  1547,\n-    1548,  1549,  1550,  1551,  1552,  1553,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,  1558,     0,     0,     0,     0,\n-    1554,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-    1556,     0,     0,     0,     0,     0,     0,  1557,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,  1545,     0,     0,\n-    1546,     0,     0,     0,  1547,  1548,  1549,  1550,  1551,  1552,\n-    1553,     0,  1558,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,  1554,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,  1556,     0,  1559,     0,     0,\n-    1570,     0,  1557,  1571,  1572,  1573,     0,  1574,  1575,  1576,\n-    1577,  1578,  1579,  1560,     0,     0,     0,  2928,  1561,  1559,\n-       0,     0,     0,     0,     0,     0,     0,  1558,     0,     0,\n-       0,     0,     0,     0,     0,  1560,     0,     0,     0,     0,\n-    1561,  1562,  1563,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,  1564,     0,     0,     0,\n-       0,     0,     0,  1562,  1563,     0,  1559,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,  1564,     0,\n-       0,     0,  1560,     0,     0,     0,     0,  1561,     0,     0,\n-       0,     0,  1565,     0,     0,  1566,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,  1567,\n-    1562,  1563,  1568,     0,  1565,     0,     0,  1566,     0,     0,\n-       0,  1559,     0,     0,     0,  1564,     0,     0,     0,     0,\n-       0,  1567,     0,     0,  1568,     0,     0,  1560,     0,     0,\n-       0,     0,  1561,     0,     0,     0,     0,  1545,     0,     0,\n-    1546,     0,     0,     0,  1547,  1548,  1549,  1550,  1551,  1552,\n-    1553,  1565,     0,     0,  1566,  1562,  1563,     0,     0,     0,\n-       0,     0,     0,     0,     0,  1554,     0,     0,  1567,     0,\n-    1564,  1568,     0,     0,     0,  1556,     0,     0,     0,     0,\n-       0,     0,  1557,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,  1569,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,  1565,  1558,     0,  1566,\n-       0,     0,     0,     0,     0,     0,     0,  1569,     0,     0,\n-       0,     0,     0,  1567,     0,     0,  1568,     0,     0,     0,\n+       0,  1561,     0,     0,     0,     0,  2086,     0,     0,     0,\n+       0,  1563,     0,  1552,     0,     0,  1553,     0,  1564,     0,\n+    1554,  1555,  1556,  1557,  1558,  1559,  1560,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,  1561,     0,  1565,     0,     0,     0,     0,     0,     0,\n+       0,  1563,     0,  1552,     0,     0,  1553,     0,  1564,     0,\n+    1554,  1555,  1556,  1557,  1558,  1559,  1560,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,  1561,     0,  1565,     0,     0,     0,  2087,     0,     0,\n+       0,  1563,     0,  1552,     0,     0,  1553,     0,  1564,     0,\n+    1554,  1555,  1556,  1557,  1558,  1559,  1560,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,  1569,     0,     0,     0,     0,     0,\n+       0,  1561,     0,  1565,     0,  1843,     0,     0,     0,     0,\n+       0,  1563,     0,  1552,     0,     0,  1553,  1566,  1564,     0,\n+    1554,  1555,  1556,  1557,  1558,  1559,  1560,     0,     0,     0,\n+       0,     0,     0,  1567,     0,     0,     0,     0,  1568,     0,\n+       0,  1561,     0,  1565,     0,     0,     0,  1879,     0,     0,\n+       0,  1563,  1880,     0,     0,     0,     0,  1566,  1564,     0,\n+       0,  1569,  1570,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,  1567,     0,     0,  1571,     0,  1568,     0,\n+       0,     0,     0,  1565,     0,     0,  3358,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,  1566,     0,     0,\n+       0,  1569,  1570,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,  1572,  1567,     0,  1573,  1571,     0,  1568,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,  1574,\n+       0,     0,  1575,     0,     0,     0,     0,  1566,     0,     0,\n+       0,  1569,  1570,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,  1572,  1567,     0,  1573,  1571,     0,  1568,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,  1574,\n+       0,     0,  1575,     0,     0,     0,     0,  1566,     0,     0,\n+       0,  1569,  1570,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,  1572,  1567,     0,  1573,  1571,     0,  1568,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,  1574,\n+       0,     0,  1575,     0,     0,     0,     0,     0,     0,     0,\n+       0,  1569,  1570,     0,     0,  1576,     0,     0,     0,     0,\n+       0,     0,  1572,     0,     0,  1573,  1571,     0,     0,  3359,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,  1574,\n+       0,     0,  1575,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,  1576,     0,     0,     0,     0,\n+       0,     0,  1572,     0,     0,  1573,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,  2090,     0,  1574,\n+       0,     0,  1575,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,  1576,     0,     0,     0,     0,\n+       0,     0,     0,  1850,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,  1577,\n+       0,     0,  1578,  1579,  1580,     0,  1581,  1582,  1583,  1584,\n+    1585,  1586,     0,     0,     0,  1576,     0,     0,     0,     0,\n+       0,     0,     0,     0,  1552,     0,     0,  1553,     0,     0,\n+       0,  1554,  1555,  1556,  1557,  1558,  1559,  1560,     0,  1577,\n+       0,     0,  1578,  1579,  1580,     0,  1581,  1582,  1583,  1584,\n+    1585,  1586,  1561,     0,     0,  1576,  1885,     0,     0,     0,\n+       0,     0,  1563,     0,  1552,     0,     0,  1553,     0,  1564,\n+       0,  1554,  1555,  1556,  1557,  1558,  1559,  1560,     0,  1577,\n+       0,     0,  1578,  1579,  1580,     0,  1581,  1582,  1583,  1584,\n+    1585,  1586,  1561,     0,  1565,     0,     0,     0,     0,     0,\n+       0,     0,  1563,     0,  1552,     0,     0,  1553,     0,  1564,\n+       0,  1554,  1555,  1556,  1557,  1558,  1559,  1560,     0,  1577,\n+       0,     0,  1578,  1579,  1580,     0,  1581,  1582,  1583,  1584,\n+    1585,  1586,  1561,     0,  1565,     0,  1892,     0,     0,     0,\n+       0,     0,  1563,     0,  1552,     0,     0,  1553,     0,  1564,\n+       0,  1554,  1555,  1556,  1557,  1558,  1559,  1560,     0,  1577,\n+       0,     0,  1578,  1579,  1580,     0,  1581,  1582,  1583,  1584,\n+    1585,  1586,  1561,     0,  1565,     0,     0,     0,     0,     0,\n+       0,     0,  1563,     0,     0,     0,     0,     0,  1566,  1564,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,  1567,     0,     0,     0,     0,  1568,\n+       0,     0,     0,     0,  1565,     0,     0,     0,     0,     0,\n+       0,     0,     0,  1890,     0,     0,     0,     0,  1566,     0,\n+       0,     0,  1569,  1570,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,  1567,     0,     0,  1571,     0,  1568,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,  1570,\n-       0,  1559,  1571,  1572,  1573,     0,  1574,  1575,  1576,  1577,\n-    1578,  1579,     0,     0,     0,     0,  2934,  1560,     0,  1569,\n-       0,  1570,  1561,     0,  1571,  1572,  1573,     0,  1574,  1575,\n-    1576,  1577,  1578,  1579,     0,     0,     0,     0,  3082,     0,\n-       0,     0,     0,     0,     0,  1562,  1563,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,  1566,     0,\n+       0,     0,  1569,  1570,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,  1572,  1567,     0,  1573,  1571,     0,  1568,\n+       0,     0,     0,     0,     0,     0,     0,     0,  1982,     0,\n+    1574,     0,     0,  1575,     0,     0,     0,     0,  1566,     0,\n+       0,     0,  1569,  1570,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,  1572,  1567,     0,  1573,  1571,     0,  1568,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-    1564,     0,     0,     0,     0,     0,     0,     0,  1570,     0,\n-       0,  1571,  1572,  1573,     0,  1574,  1575,  1576,  1577,  1578,\n-    1579,     0,     0,     0,     0,  3104,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,  1565,     0,     0,  1566,\n+    1574,     0,     0,  1575,     0,     0,     0,     0,     0,     0,\n+       0,     0,  1569,  1570,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,  1572,     0,     0,  1573,  1571,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,  1567,     0,     0,  1568,     0,     0,     0,\n-       0,     0,     0,  1570,     0,     0,  1571,  1572,  1573,     0,\n-    1574,  1575,  1576,  1577,  1578,  1579,     0,     0,     0,     0,\n-    3202,     0,     0,     0,     0,     0,  1545,     0,     0,  1546,\n-       0,     0,     0,  1547,  1548,  1549,  1550,  1551,  1552,  1553,\n-       0,     0,     0,     0,     0,     0,     0,     0,  1545,     0,\n-       0,  1546,     0,     0,  1554,  1547,  1548,  1549,  1550,  1551,\n-    1552,  1553,     0,     0,  1556,     0,     0,     0,     0,     0,\n-       0,  1557,     0,     0,     0,     0,  1554,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,  1556,     0,     0,  1569,\n-       0,     0,     0,  1557,     0,  1545,  1558,     0,  1546,     0,\n-       0,     0,  1547,  1548,  1549,  1550,  1551,  1552,  1553,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,  1558,     0,\n-       0,     0,     0,  1554,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,  1556,     0,     0,     0,     0,     0,     0,\n-    1557,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-    1545,     0,     0,  1546,     0,     0,     0,  1547,  1548,  1549,\n-    1550,  1551,  1552,  1553,     0,  1558,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,  1554,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,  1556,     0,\n-    1559,     0,     0,  1570,     0,  1557,  1571,  1572,  1573,     0,\n-    1574,  1575,  1576,  1577,  1578,  1579,  1560,     0,     0,     0,\n-    3257,  1561,  1559,     0,     0,     0,     0,     0,     0,     0,\n-    1558,     0,     0,     0,     0,     0,     0,     0,  1560,     0,\n-       0,     0,     0,  1561,  1562,  1563,     0,     0,     0,  1545,\n-       0,     0,  1546,     0,     0,     0,  1547,  1548,     0,  1564,\n-    1551,  1552,  1553,     0,     0,     0,  1562,  1563,     0,  1559,\n-       0,     0,     0,     0,     0,     0,     0,  1554,     0,     0,\n-       0,  1564,     0,     0,     0,  1560,     0,  1556,     0,     0,\n-    1561,     0,     0,     0,  1557,  1565,     0,     0,  1566,     0,\n+    1574,     0,     0,  1575,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,  1576,     0,     0,     0,\n+       0,     0,     0,  1572,     0,     0,  1573,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,  1567,  1562,  1563,  1568,     0,  1565,     0,  1558,\n-    1566,     0,     0,     0,  1559,     0,     0,     0,  1564,     0,\n-       0,     0,     0,     0,  1567,     0,     0,  1568,     0,     0,\n-    1560,     0,     0,     0,     0,  1561,     0,     0,     0,     0,\n-    1545,     0,     0,  1546,     0,     0,     0,  1547,  1548,  1549,\n-    1550,  1551,  1552,  1553,  1565,     0,     0,  1566,  1562,  1563,\n-       0,     0,     0,     0,     0,     0,     0,     0,  1554,     0,\n-       0,  1567,     0,  1564,  1568,     0,     0,     0,  1556,     0,\n-       0,     0,     0,     0,     0,  1557,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,  1569,     0,\n-       0,     0,     0,  1559,     0,     0,     0,     0,     0,  1565,\n-    1558,     0,  1566,     0,     0,     0,     0,     0,     0,  1560,\n-    1569,     0,     0,     0,  1561,     0,  1567,     0,     0,  1568,\n+    1574,     0,     0,  1575,     0,     0,     0,     0,     0,     0,\n+       0,     0,  1552,     0,     0,  1553,  1576,     0,     0,  1554,\n+    1555,  1556,  1557,  1558,  1559,  1560,     0,     0,     0,     0,\n+       0,     0,     0,     0,  1552,     0,     0,  1553,     0,     0,\n+    1561,  1554,  1555,  1556,  1557,  1558,  1559,  1560,     0,     0,\n+    1563,     0,     0,     0,     0,     0,  1576,  1564,     0,     0,\n+       0,     0,  1561,     0,     0,     0,  2656,     0,     0,     0,\n+       0,     0,  1563,     0,     0,     0,     0,     0,     0,  1564,\n+    1577,     0,  1565,  1578,  1579,  1580,     0,  1581,  1582,  1583,\n+    1584,  1585,  1586,     0,     0,     0,  1576,     0,     0,     0,\n+       0,     0,     0,     0,  1565,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,  1562,  1563,     0,\n+    1577,     0,     0,  1578,  1579,  1580,     0,  1581,  1582,  1583,\n+    1584,  1585,  1586,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,  1564,     0,     0,     0,     0,  1569,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+    1577,     0,     0,  1578,  1579,  1580,     0,  1581,  1582,  1583,\n+    1584,  1585,  1586,     0,     0,     0,  1566,     0,  1552,     0,\n+       0,  1553,     0,     0,     0,  1554,  1555,  1556,  1557,  1558,\n+    1559,  1560,  1567,     0,     0,     0,     0,  1568,  1566,     0,\n+    1577,     0,     0,  1578,  1579,  1580,  1561,  1581,  1582,  1583,\n+    1584,  1585,  1586,     0,  1567,     0,  1563,     0,     0,  1568,\n+    1569,  1570,     0,  1564,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,  1571,     0,     0,     0,     0,\n+       0,     0,  1569,  1570,     0,     0,     0,     0,  1565,     0,\n+       0,     0,     0,     0,     0,     0,     0,  1571,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,  1565,     0,\n-       0,  1566,  1570,     0,  1559,  1571,  1572,  1573,     0,  1574,\n-    1575,  1576,  1577,  1578,  1579,  1567,     0,     0,     0,  3279,\n-    1560,     0,  1569,     0,  1570,  1561,     0,  1571,  1572,  1573,\n-       0,  1574,  1575,  1576,  1577,  1578,  1579,     0,     0,  1730,\n-       0,     0,     0,     0,     0,     0,     0,     0,  1562,  1563,\n+       0,  1572,     0,     0,  1573,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,  1574,     0,\n+       0,  1575,     0,  1572,     0,     0,  1573,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,  1564,     0,     0,     0,     0,     0,     0,\n-       0,  1570,     0,     0,  1571,  1572,  1573,     0,  1574,  1575,\n-    1576,  1577,  1578,  1579,     0,     0,  2668,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,  1565,\n-       0,     0,  1566,     0,     0,     0,     0,     0,     0,     0,\n-       0,  1569,     0,     0,     0,     0,  1567,     0,     0,  1568,\n-       0,     0,     0,     0,     0,     0,  1570,     0,     0,  1571,\n-    1572,  1573,     0,  1574,  1575,  1576,  1577,  1578,  1579,     0,\n-       0,  3074,     0,     0,     0,     0,     0,     0,     0,     0,\n+    1574,     0,     0,  1575,     0,     0,     0,     0,     0,     0,\n+       0,  1552,     0,     0,  1553,     0,     0,     0,  1554,  1555,\n+    1556,  1557,  1558,  1559,  1560,     0,     0,     0,     0,     0,\n+       0,     0,  1566,  1552,     0,     0,  1553,     0,     0,  1561,\n+    1554,  1555,     0,     0,  1558,  1559,  1560,     0,  1567,  1563,\n+       0,     0,  1552,  1568,     0,  1553,  1564,     0,     0,  1554,\n+    1555,  1561,     0,  1558,  1559,  1560,     0,     0,     0,     0,\n+       0,  1563,     0,     0,  1576,     0,  1569,  1570,  1564,     0,\n+    1561,  1565,     0,     0,     0,     0,     0,     0,     0,     0,\n+    1563,  1571,     0,     0,     0,     0,  1576,  1564,     0,     0,\n+       0,     0,     0,  1565,     0,     0,     0,  2645,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,  1565,     0,     0,     0,     0,  1572,     0,     0,\n+    1573,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,  1574,     0,     0,  1575,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,  1566,     0,     0,  1577,     0,\n+       0,  1578,  1579,  1580,     0,  1581,  1582,  1583,  1584,  1585,\n+    1586,  1567,     0,     0,     0,     0,  1568,  1566,     0,     0,\n+    1577,     0,     0,  1578,  1579,  1580,     0,  1581,  1582,  1583,\n+    1584,  1585,  1586,  1567,     0,     0,  1566,     0,  1568,  1569,\n+    1570,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,  1567,     0,  1571,     0,     0,  1568,     0,     0,\n+    1576,  1569,  1570,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,  1571,     0,     0,     0,\n+    1569,  1570,     0,     0,     0,     0,     0,     0,     0,     0,\n+    1572,     0,     0,  1573,     0,  1571,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,  1574,     0,     0,\n+    1575,     0,  1572,     0,     0,  1573,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,  1574,\n+       0,  1572,  1575,     0,  1573,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,  1574,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,  1577,     0,     0,  1578,  1579,  1580,\n+       0,  1581,  1582,  1583,  1584,  1585,  1586,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,  1569,     0,     0,  1570,     0,     0,  1571,  1572,\n-    1573,     0,  1574,  1575,  1576,  1577,  1578,  1579,     0,     0,\n+       0,     0,     0,  1576,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,  1576,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,  1576,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,  1577,     0,     0,\n+    1578,  1579,  1580,     0,  1581,  1582,  1583,  1584,  2107,  1586,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,  1577,\n+       0,     0,  1578,  1579,  1580,     0,  1581,  1582,  1583,  1584,\n+    1585,  1586,  1182,     0,  2004,     0,     0,     0,  1577,     0,\n+       0,  1578,  1579,  1580,     0,  1581,  1582,  1583,  1584,  1585,\n+    1586,   110,   111,   112,   113,   114,   115,   116,   117,  1183,\n+     118,   119,   120,  1184,  1185,  1186,   835,  1187,  1188,  1189,\n+    1190,   836,   122,   123,  1191,   124,   125,   126,   837,   128,\n+     129,   130,   838,   839,   840,   841,   842,  1192,   136,   137,\n+     138,   139,   140,   141,  1193,  1194,   142,   143,   843,   844,\n+     146,  1195,   147,   148,   149,   150,   845,  1196,   846,  1197,\n+     847,   154,   155,   156,   157,   158,   848,   160,   161,   162,\n+    1198,   163,   164,   165,   166,   167,   168,  1199,   849,   170,\n+     171,   172,   173,   174,   175,   176,   177,   178,   179,   850,\n+     851,   182,  1200,   183,  1201,   184,   185,   186,   187,   188,\n+     189,  1202,   190,   191,   192,   193,   194,  1203,  1204,   195,\n+     196,   197,   198,   199,  1205,   200,   201,   202,  1206,   203,\n+     204,   205,  1207,   206,   207,   208,   209,   852,   211,   212,\n+     213,   214,   215,   853,  1208,   217,  1209,   218,   219,   854,\n+     221,  1210,   222,  1211,   223,   855,  1212,   856,   226,   227,\n+     857,   858,   230,  1213,   231,  1214,   859,   860,   234,  1215,\n+     235,   236,   237,   238,   239,   240,   241,   861,   243,   244,\n+     245,   246,  1216,   247,   248,   249,   250,   251,   252,   253,\n+    1217,   254,   862,   863,   257,   258,   259,   260,   261,   864,\n+     865,  1218,   866,  1219,   265,   867,   868,   268,   869,   270,\n+     271,   272,   273,   274,   275,  1220,  1221,   276,   870,   278,\n+     871,  1222,   280,   281,   282,   283,   284,   285,   286,   287,\n+     872,   289,   290,   291,   292,   293,   294,   295,   296,   297,\n+     298,   299,   300,   301,   302,   303,   304,   305,   306,   873,\n+     874,   875,   310,   311,   312,   876,  1223,   314,   315,   877,\n+     317,  1224,   878,   319,   879,   321,   322,   323,  1225,   324,\n+     325,  1226,  1227,   326,   327,   328,  1228,  1229,   329,   880,\n+     881,   332,   882,   883,   335,   336,   337,   338,   339,   340,\n+     341,   342,   343,   344,  1230,  1231,  1232,  1233,   345,   346,\n+     884,   885,   349,   350,   886,   352,   353,   354,  1234,   355,\n+     356,   357,   358,   359,   360,  1235,   361,   362,   363,   887,\n+     365,   366,   367,   368,  1236,   369,   370,   371,   372,   373,\n+     374,   375,   376,   377,   378,   379,   380,   381,  1237,   382,\n+     383,   888,   385,   386,   387,   889,   389,   390,   391,   392,\n+     393,   394,   395,   396,   397,   398,   399,  1238,   890,   400,\n+     401,   402,   403,   404,   405,   891,   407,   408,   409,   892,\n+     411,   412,   893,   414,  1239,   415,   416,   417,   418,   419,\n+     420,   421,   422,   423,   424,   425,   426,   894,   428,   895,\n+     430,  1240,   431,   432,  1241,   433,   896,   435,   436,   437,\n+     438,   439,  1242,   897,   898,  1243,  1244,   442,   443,   899,\n+     445,   900,  1245,   447,   448,   901,   450,   451,   452,   453,\n+     454,  1246,  1247,   455,   456,   457,  1248,   458,   459,   460,\n+     461,  1249,   462,   463,   464,   465,   466,  1250,   903,  1251,\n+     469,   904,   471,   472,   473,   474,   475,  1252,  1253,   476,\n+    1254,  1255,   477,   478,   479,   480,   481,   482,   905,   906,\n+     907,   908,   909,   910,   911,   912,   913,   914,   915,   494,\n+     495,   496,   497,  1182,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,  1175,     0,     0,  1570,     0,     0,  1571,\n-    1572,  1573,     0,  1574,  1575,  1576,  1577,  1578,  1579,     0,\n-       0,  3243,   110,   111,   112,   113,   114,   115,   116,   117,\n-    1176,   118,   119,   120,  1177,  1178,  1179,   832,  1180,  1181,\n-    1182,  1183,   833,   122,   123,  1184,   124,   125,   126,   834,\n-     128,   129,   130,   835,   836,   837,   838,   839,  1185,   136,\n-     137,   138,   139,   140,   141,  1186,  1187,   142,   143,   840,\n-     841,   146,  1188,   147,   148,   149,   150,   842,  1189,   843,\n-    1190,   844,   154,   155,   156,   157,   158,   845,   160,   161,\n-     162,  1191,   163,   164,   165,   166,   167,   168,  1192,   846,\n+       0,     0,   110,   111,   112,   113,   114,   115,   116,   117,\n+    1183,   118,   119,   120,  1184,  1185,  1186,   835,  1187,  1188,\n+    1189,  1190,   836,   122,   123,  1191,   124,   125,   126,   837,\n+     128,   129,   130,   838,   839,   840,   841,   842,  1192,   136,\n+     137,   138,   139,   140,   141,  1193,  1194,   142,   143,   843,\n+     844,   146,  1195,   147,   148,   149,   150,   845,  1196,   846,\n+    1197,   847,   154,   155,   156,   157,   158,   848,   160,   161,\n+     162,  1198,   163,   164,   165,   166,   167,   168,  1199,   849,\n      170,   171,   172,   173,   174,   175,   176,   177,   178,   179,\n-     847,   848,   182,  1193,   183,  1194,   184,   185,   186,   187,\n-     188,   189,  1195,   190,   191,   192,   193,   194,  1196,  1197,\n-     195,   196,   197,   198,   199,  1198,   200,   201,   202,  1199,\n-     203,   204,   205,  1200,   206,   207,   208,   209,   849,   211,\n-     212,   213,   214,   215,   850,  1201,   217,  1202,   218,   219,\n-     851,   221,  1203,   222,  1204,   223,   852,  1205,   853,   226,\n-     227,   854,   855,   230,  1206,   231,  1207,   856,   857,   234,\n-    1208,   235,   236,   237,   238,   239,   240,   241,   858,   243,\n-     244,   245,   246,  1209,   247,   248,   249,   250,   251,   252,\n-     253,  1210,   254,   859,   860,   257,   258,   259,   260,   261,\n-     861,   862,  1211,   863,  1212,   265,   864,   865,   268,   866,\n-     270,   271,   272,   273,   274,   275,  1213,  1214,   276,   867,\n-     278,   868,  1215,   280,   281,   282,   283,   284,   285,   286,\n-     287,   869,   289,   290,   291,   292,   293,   294,   295,   296,\n+     850,   851,   182,  1200,   183,  1201,   184,   185,   186,   187,\n+     188,   189,  1202,   190,   191,   192,   193,   194,  1203,  1204,\n+     195,   196,   197,   198,   199,  1205,   200,   201,   202,  1206,\n+     203,   204,   205,  1207,   206,   207,   208,   209,   852,   211,\n+     212,   213,   214,   215,   853,  1208,   217,  1209,   218,   219,\n+     854,   221,  1210,   222,  1211,   223,   855,  1212,   856,   226,\n+     227,   857,   858,   230,  1213,   231,  1214,   859,   860,   234,\n+    1215,   235,   236,   237,   238,   239,   240,   241,   861,   243,\n+     244,   245,   246,  1216,   247,   248,   249,   250,   251,   252,\n+     253,  1217,   254,   862,   863,   257,   258,   259,   260,   261,\n+     864,   865,  1218,   866,  1219,   265,   867,   868,   268,   869,\n+     270,   271,   272,   273,   274,   275,  1220,  1221,   276,   870,\n+     278,   871,  1222,   280,   281,   282,   283,   284,   285,   286,\n+     287,   872,   289,   290,   291,   292,   293,   294,   295,   296,\n      297,   298,   299,   300,   301,   302,   303,   304,   305,   306,\n-     870,   871,   872,   310,   311,   312,   873,  1216,   314,   315,\n-     874,   317,  1217,   875,   319,   876,   321,   322,   323,  1218,\n-     324,   325,  1219,  1220,   326,   327,   328,  1221,  1222,   329,\n-     877,   878,   332,   879,   880,   335,   336,   337,   338,   339,\n-     340,   341,   342,   343,   344,  1223,  1224,  1225,  1226,   345,\n-     346,   881,   882,   349,   350,   883,   352,   353,   354,  1227,\n-     355,   356,   357,   358,   359,   360,  1228,   361,   362,   363,\n-     884,   365,   366,   367,   368,  1229,   369,   370,   371,   372,\n-     373,   374,   375,   376,   377,   378,   379,   380,   381,  1230,\n-     382,   383,   885,   385,   386,   387,   886,   389,   390,   391,\n-     392,   393,   394,   395,   396,   397,   398,   399,  1231,   887,\n-     400,   401,   402,   403,   404,   405,   888,   407,   408,   409,\n-     889,   411,   412,   890,   414,  1232,   415,   416,   417,   418,\n-     419,   420,   421,   422,   423,   424,   425,   426,   891,   428,\n-     892,   430,  1233,   431,   432,  1234,   433,   893,   435,   436,\n-     437,   438,   439,  1235,   894,   895,  1236,  1237,   442,   443,\n-     896,   445,   897,  1238,   447,   448,   898,   450,   451,   452,\n-     453,   454,  1239,  1240,   455,   456,   457,  1241,   458,   459,\n-     460,   461,  1242,   462,   463,   464,   465,   466,  1243,   900,\n-    1244,   469,   901,   471,   472,   473,   474,   475,  1245,  1246,\n-     476,  1247,  1248,   477,   478,   479,   480,   481,   482,   902,\n-     903,   904,   905,   906,   907,   908,   909,   910,   911,   912,\n-     494,   495,   496,   497,   505,     0,     0,     0,     0,     0,\n-       0,     0,     0,  1982,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,   110,   111,   112,   113,   114,   115,   116,\n-     117,     0,   118,   119,   120,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,   122,   123,     0,   124,   125,   126,\n-       0,   128,   129,   130,   131,   132,     0,   134,   135,     0,\n-     136,   137,   138,   139,   140,   141,     0,     0,   142,   143,\n-     144,   145,   146,     0,   147,   148,   149,   150,   151,     0,\n-       0,     0,   153,   154,   155,   156,   157,   158,     0,   160,\n-     161,   162,     0,   163,   164,   165,   166,   167,   168,     0,\n-       0,   170,   171,   172,   173,   174,   175,   176,   177,   178,\n-     179,   180,   181,   182,     0,   183,     0,   184,   185,   186,\n-     187,   188,   189,     0,   190,   191,   192,   193,   194,     0,\n-       0,   195,   196,   197,   198,   199,     0,   200,   201,   202,\n-       0,   203,   204,   205,     0,   206,   207,   208,   209,   210,\n-     211,   212,   213,   214,   215,   216,     0,   217,     0,   218,\n-     219,   220,   221,     0,   222,     0,   223,     0,     0,     0,\n-     226,   227,   506,     0,   230,     0,   231,     0,   232,   233,\n-     234,     0,   235,   236,   237,   238,   239,   240,   241,     0,\n-     243,   244,   245,   246,     0,   247,   248,   249,   250,   251,\n-     252,   253,     0,   254,     0,   256,   257,   258,   259,   260,\n-     261,   262,   263,     0,   264,     0,   265,     0,     0,   268,\n-       0,   270,   271,   272,   273,   274,   275,     0,     0,   276,\n-       0,   278,     0,     0,   280,   281,   282,   283,   284,   285,\n-     286,   287,   507,   289,   290,   291,   292,   293,   294,   295,\n+     873,   874,   875,   310,   311,   312,   876,  1223,   314,   315,\n+     877,   317,  1224,   878,   319,   879,   321,   322,   323,  1225,\n+     324,   325,  1226,  1227,   326,   327,   328,  1228,  1229,   329,\n+     880,   881,   332,   882,   883,   335,   336,   337,   338,   339,\n+     340,   341,   342,   343,   344,  1230,  1231,  1232,  1233,   345,\n+     346,   884,   885,   349,   350,   886,   352,   353,   354,  1234,\n+     355,   356,   357,   358,   359,   360,  1235,   361,   362,   363,\n+     887,   365,   366,   367,   368,  1236,   369,   370,   371,   372,\n+     373,   374,   375,   376,   377,   378,   379,   380,   381,  1237,\n+     382,   383,   888,   385,   386,   387,   889,   389,   390,   391,\n+     392,   393,   394,   395,   396,   397,   398,   399,  1238,   890,\n+     400,   401,   402,   403,   404,   405,   891,   407,   408,   409,\n+     892,   411,   412,   893,   414,  1239,   415,   416,   417,   418,\n+     419,   420,   421,   422,   423,   424,   425,   426,   894,   428,\n+     895,   430,  1240,   431,   432,  1241,   433,   896,   435,   436,\n+     437,   438,   439,  1242,   897,   898,  1243,  1244,   442,   443,\n+     899,   445,   900,  1245,   447,   448,   901,   450,   451,   452,\n+     453,   454,  1246,  1247,   455,   456,   457,  1248,   458,   459,\n+     460,   461,  1249,   462,   463,   464,   465,   466,  1250,   903,\n+    1251,   469,   904,   471,   472,   473,   474,   475,  1252,  1253,\n+     476,  1254,  1255,   477,   478,   479,   480,   481,   482,   905,\n+     906,   907,   908,   909,   910,   911,   912,   913,   914,   915,\n+     494,   495,   496,   497,  1182,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,   110,   111,   112,   113,  2152,   115,   116,\n+     117,  1183,   118,   119,   120,  1184,  1185,  1186,   835,  1187,\n+    1188,  1189,  1190,   836,   122,   123,  1191,   124,   125,   126,\n+     837,   128,   129,   130,   838,   839,   840,   841,   842,  1192,\n+     136,   137,   138,   139,   140,   141,  1193,  1194,   142,   143,\n+     843,   844,   146,  1195,   147,   148,   149,   150,   845,  1196,\n+     846,  1197,   847,   154,   155,   156,   157,   158,   848,   160,\n+     161,   162,  1198,   163,   164,   165,   166,   167,   168,  1199,\n+     849,   170,   171,   172,   173,   174,   175,   176,   177,   178,\n+     179,   850,   851,   182,  1200,   183,  1201,   184,   185,   186,\n+     187,   188,   189,  1202,   190,   191,   192,   193,   194,  1203,\n+    1204,   195,   196,   197,  2153,   199,  1205,   200,   201,   202,\n+    1206,   203,   204,   205,  1207,   206,   207,   208,   209,   852,\n+     211,   212,   213,   214,   215,   853,  1208,   217,  1209,   218,\n+     219,   854,   221,  1210,   222,  1211,   223,   855,  1212,   856,\n+     226,   227,   857,   858,   230,  1213,   231,  1214,   859,   860,\n+     234,  1215,   235,   236,   237,   238,   239,   240,   241,   861,\n+     243,   244,   245,   246,  1216,   247,   248,   249,   250,   251,\n+     252,   253,  1217,   254,   862,   863,   257,   258,   259,   260,\n+     261,   864,   865,  1218,   866,  1219,   265,   867,   868,   268,\n+     869,   270,   271,   272,   273,   274,   275,  1220,  1221,   276,\n+     870,   278,   871,  1222,   280,   281,   282,   283,   284,   285,\n+     286,   287,   872,   289,   290,   291,   292,   293,   294,   295,\n      296,   297,   298,   299,   300,   301,   302,   303,   304,   305,\n-     306,   307,     0,   309,   310,   311,   312,   313,     0,   314,\n-     315,     0,   317,     0,   318,   319,   320,   321,   322,   323,\n-       0,   324,   325,     0,     0,   326,   327,   328,     0,     0,\n-     329,   330,     0,   332,     0,   334,   335,   336,   337,   338,\n-     339,   340,   341,   342,   343,   344,     0,     0,     0,     0,\n-     345,   346,   347,     0,   349,   350,   351,   352,   353,   354,\n-       0,   355,   356,   357,   358,   359,   360,     0,   361,   362,\n-     363,   364,   365,   366,   367,   368,     0,   369,   370,   371,\n+     306,   873,   874,   875,   310,   311,   312,   876,  1223,   314,\n+     315,   877,   317,  1224,   878,   319,   879,   321,   322,   323,\n+    1225,   324,   325,  1226,  1227,   326,   327,   328,  1228,  1229,\n+     329,   880,   881,   332,   882,   883,   335,   336,   337,   338,\n+     339,   340,   341,   342,   343,   344,  1230,  1231,  1232,  1233,\n+     345,   346,   884,   885,   349,   350,   886,   352,   353,   354,\n+    1234,   355,   356,   357,   358,   359,   360,  1235,   361,   362,\n+     363,   887,   365,   366,   367,   368,  1236,   369,   370,   371,\n      372,   373,   374,   375,   376,   377,   378,   379,   380,   381,\n-       0,   382,   383,     0,   385,   386,   387,   388,   389,   390,\n-     391,   392,   393,   394,   395,   396,   397,   398,   399,     0,\n-       0,   400,   401,   402,   403,   404,   405,   406,   407,   408,\n-     409,     0,   411,   412,   413,   414,     0,   415,   416,   417,\n-     418,   419,   420,   421,   422,   423,   424,   425,   426,   508,\n-     428,   429,   430,     0,   431,   432,     0,   433,     0,   435,\n-     436,   437,   438,   439,     0,   440,   441,     0,     0,   442,\n-     443,   444,   445,   446,     0,   447,   448,   449,   450,   451,\n-     452,   453,   454,     0,     0,   455,   456,   457,     0,   458,\n-     459,   460,   461,     0,   462,   463,   464,   465,   466,   467,\n-     468,     0,   469,     0,   471,   472,   473,   474,   475,     0,\n-       0,   476,     0,     0,   477,   478,   479,   480,   481,   482,\n-     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,\n-     493,   494,   495,   496,   497,   505,     0,     0,     0,     0,\n-       0,     0,     0,     0,  2588,     0,     0,     0,     0,     0,\n+    1237,   382,   383,   888,   385,   386,   387,   889,   389,   390,\n+     391,   392,   393,   394,   395,   396,   397,   398,   399,  1238,\n+     890,   400,   401,   402,   403,   404,  2154,   891,   407,   408,\n+     409,   892,   411,   412,   893,   414,  1239,   415,   416,   417,\n+     418,   419,   420,   421,   422,   423,   424,   425,   426,   894,\n+     428,   895,   430,  1240,   431,   432,  1241,   433,   896,   435,\n+     436,   437,   438,   439,  1242,   897,   898,  1243,  1244,   442,\n+     443,   899,   445,   900,  1245,   447,   448,   901,   450,   451,\n+     452,   453,   454,  1246,  1247,   455,   456,   457,  1248,   458,\n+     459,   460,   461,  1249,   462,   463,   464,   465,   466,  1250,\n+     903,  1251,   469,   904,   471,   472,   473,   474,   475,  1252,\n+    1253,   476,  1254,  1255,   477,   478,   479,   480,   481,   482,\n+     905,   906,   907,   908,   909,   910,   911,   912,   913,   914,\n+     915,   494,   495,   496,   497,   834,     0,   629,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,   110,   111,   112,   113,   114,   115,\n-     116,   117,     0,   118,   119,   120,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,   122,   123,     0,   124,   125,\n-     126,     0,   128,   129,   130,   131,   132,     0,   134,   135,\n+     116,   117,     0,   118,   119,   120,     0,     0,     0,   835,\n+       0,     0,     0,     0,   836,   122,   123,     0,   124,   125,\n+     126,   837,   128,   129,   130,   838,   839,   840,   841,   842,\n        0,   136,   137,   138,   139,   140,   141,     0,     0,   142,\n-     143,   144,   145,   146,     0,   147,   148,   149,   150,   151,\n-       0,     0,     0,   153,   154,   155,   156,   157,   158,     0,\n+     143,   843,   844,   146,     0,   147,   148,   149,   150,   845,\n+       0,   846,     0,   847,   154,   155,   156,   157,   158,   848,\n      160,   161,   162,     0,   163,   164,   165,   166,   167,   168,\n-       0,     0,   170,   171,   172,   173,   174,   175,   176,   177,\n-     178,   179,   180,   181,   182,     0,   183,     0,   184,   185,\n+       0,   849,   170,   171,   172,   173,   174,   175,   176,   177,\n+     178,   179,   850,   851,   182,     0,   183,     0,   184,   185,\n      186,   187,   188,   189,     0,   190,   191,   192,   193,   194,\n        0,     0,   195,   196,   197,   198,   199,     0,   200,   201,\n      202,     0,   203,   204,   205,     0,   206,   207,   208,   209,\n-     210,   211,   212,   213,   214,   215,   216,     0,   217,     0,\n-     218,   219,   220,   221,     0,   222,     0,   223,     0,     0,\n-       0,   226,   227,   506,     0,   230,     0,   231,     0,   232,\n-     233,   234,     0,   235,   236,   237,   238,   239,   240,   241,\n-       0,   243,   244,   245,   246,     0,   247,   248,   249,   250,\n-     251,   252,   253,     0,   254,     0,   256,   257,   258,   259,\n-     260,   261,   262,   263,     0,   264,     0,   265,     0,     0,\n-     268,     0,   270,   271,   272,   273,   274,   275,     0,     0,\n-     276,     0,   278,     0,     0,   280,   281,   282,   283,   284,\n-     285,   286,   287,   507,   289,   290,   291,   292,   293,   294,\n+     852,   211,   212,   213,   214,   215,   853,  1405,   217,     0,\n+     218,   219,   854,   221,     0,   222,     0,   223,   855,     0,\n+     856,   226,   227,   857,   858,   230,     0,   231,     0,   859,\n+     860,   234,     0,   235,   236,   237,   238,   239,   240,   241,\n+     861,   243,   244,   245,   246,     0,   247,   248,   249,   250,\n+     251,   252,   253,     0,   254,   862,   863,   257,   258,   259,\n+     260,   261,   864,   865,     0,   866,     0,   265,   867,   868,\n+     268,   869,   270,   271,   272,   273,   274,   275,     0,     0,\n+     276,   870,   278,   871,     0,   280,   281,   282,   283,   284,\n+     285,   286,   287,   872,   289,   290,   291,   292,   293,   294,\n      295,   296,   297,   298,   299,   300,   301,   302,   303,   304,\n-     305,   306,   307,     0,   309,   310,   311,   312,   313,     0,\n-     314,   315,     0,   317,     0,   318,   319,   320,   321,   322,\n-     323,     0,   324,   325,     0,     0,   326,   327,   328,     0,\n-       0,   329,   330,     0,   332,     0,   334,   335,   336,   337,\n+     305,   306,   873,   874,   875,   310,   311,   312,   876,     0,\n+     314,   315,   877,   317,     0,   878,   319,   879,   321,   322,\n+     323,     0,   324,   325,  1406,     0,   326,   327,   328,     0,\n+       0,   329,   880,   881,   332,   882,   883,   335,   336,   337,\n      338,   339,   340,   341,   342,   343,   344,     0,     0,     0,\n-       0,   345,   346,   347,     0,   349,   350,   351,   352,   353,\n+       0,   345,   346,   884,   885,   349,   350,   886,   352,   353,\n      354,     0,   355,   356,   357,   358,   359,   360,     0,   361,\n-     362,   363,   364,   365,   366,   367,   368,     0,   369,   370,\n+     362,   363,   887,   365,   366,   367,   368,     0,   369,   370,\n      371,   372,   373,   374,   375,   376,   377,   378,   379,   380,\n-     381,     0,   382,   383,     0,   385,   386,   387,   388,   389,\n+     381,     0,   382,   383,   888,   385,   386,   387,   889,   389,\n      390,   391,   392,   393,   394,   395,   396,   397,   398,   399,\n-       0,     0,   400,   401,   402,   403,   404,   405,   406,   407,\n-     408,   409,     0,   411,   412,   413,   414,     0,   415,   416,\n+       0,   890,   400,   401,   402,   403,   404,   405,   891,   407,\n+     408,   409,   892,   411,   412,   893,   414,     0,   415,   416,\n      417,   418,   419,   420,   421,   422,   423,   424,   425,   426,\n-     508,   428,   429,   430,     0,   431,   432,     0,   433,     0,\n-     435,   436,   437,   438,   439,     0,   440,   441,     0,     0,\n-     442,   443,   444,   445,   446,     0,   447,   448,   449,   450,\n+     894,   428,   895,   430,     0,   431,   432,     0,   433,   896,\n+     435,   436,   437,   438,   439,     0,   897,   898,     0,     0,\n+     442,   443,   899,   445,   900,  1407,   447,   448,   901,   450,\n      451,   452,   453,   454,     0,     0,   455,   456,   457,     0,\n      458,   459,   460,   461,     0,   462,   463,   464,   465,   466,\n-     467,   468,     0,   469,     0,   471,   472,   473,   474,   475,\n+    1250,   903,     0,   469,   904,   471,   472,   473,   474,   475,\n        0,     0,   476,     0,     0,   477,   478,   479,   480,   481,\n-     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,\n-     492,   493,   494,   495,   496,   497,   831,  1397,   629,     0,\n-       0,     0,   989,     0,     0,  2591,     0,     0,     0,     0,\n+     482,   905,   906,   907,   908,   909,   910,   911,   912,   913,\n+     914,   915,   494,   495,   496,   497,   834,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,   110,   111,   112,   113,   114,\n-     115,   116,   117,     0,   118,   119,   120,     0,     0,     0,\n-     832,     0,     0,     0,     0,   833,   122,   123,     0,   124,\n-     125,   126,   834,   128,   129,   130,   835,   836,   837,   838,\n-     839,     0,   136,   137,   138,   139,   140,   141,     0,     0,\n-     142,   143,   840,   841,   146,     0,   147,   148,   149,   150,\n-     842,     0,   843,     0,   844,   154,   155,   156,   157,   158,\n-     845,   160,   161,   162,     0,   163,   164,   165,   166,   167,\n-     168,     0,   846,   170,   171,   172,   173,   174,   175,   176,\n-     177,   178,   179,   847,   848,   182,  1602,   183,     0,   184,\n+     115,   116,   117,     0,   118,   119,   120,     3,     4,     0,\n+     835,     0,     0,     0,     0,   836,   122,   123,     0,   124,\n+     125,   126,   837,   128,   129,   130,   838,   839,   840,   841,\n+     842,     0,   136,   137,   138,   139,   140,   141,     0,     0,\n+     142,   143,   843,   844,   146,     0,   147,   148,   149,   150,\n+     845,     0,   846,     0,   847,   154,   155,   156,   157,   158,\n+     848,   160,   161,   162,     0,   163,   164,   165,   166,   167,\n+     168,     0,   849,   170,   171,   172,   173,   174,   175,   176,\n+     177,   178,   179,   850,   851,   182,     0,   183,     0,   184,\n      185,   186,   187,   188,   189,     0,   190,   191,   192,   193,\n      194,     0,     0,   195,   196,   197,   198,   199,     0,   200,\n      201,   202,     0,   203,   204,   205,     0,   206,   207,   208,\n-     209,   849,   211,   212,   213,   214,   215,   850,  1398,   217,\n-       0,   218,   219,   851,   221,     0,   222,     0,   223,   852,\n-       0,   853,   226,   227,   854,   855,   230,     0,   231,     0,\n-     856,   857,   234,     0,   235,   236,   237,   238,   239,   240,\n-     241,   858,   243,   244,   245,   246,     0,   247,   248,   249,\n-     250,   251,   252,   253,     0,   254,   859,   860,   257,   258,\n-     259,   260,   261,   861,   862,     0,   863,     0,   265,   864,\n-     865,   268,   866,   270,   271,   272,   273,   274,   275,     0,\n-       0,   276,   867,   278,   868,     0,   280,   281,   282,   283,\n-     284,   285,   286,   287,   869,   289,   290,   291,   292,   293,\n+     209,   852,   211,   212,   213,   214,   215,   853,     0,   217,\n+       0,   218,   219,   854,   221,     0,   222,     0,   223,   855,\n+       0,   856,   226,   227,   857,   858,   230,     0,   231,     0,\n+     859,   860,   234,     0,   235,   236,   237,   238,   239,   240,\n+     241,   861,   243,   244,   245,   246,     0,   247,   248,   249,\n+     250,   251,   252,   253,     0,   254,   862,   863,   257,   258,\n+     259,   260,   261,   864,   865,     0,   866,     0,   265,   867,\n+     868,   268,   869,   270,   271,   272,   273,   274,   275,     0,\n+       0,   276,   870,   278,   871,     0,   280,   281,   282,   283,\n+     284,   285,   286,   287,   872,   289,   290,   291,   292,   293,\n      294,   295,   296,   297,   298,   299,   300,   301,   302,   303,\n-     304,   305,   306,   870,   871,   872,   310,   311,   312,   873,\n-       0,   314,   315,   874,   317,     0,   875,   319,   876,   321,\n-     322,   323,     0,   324,   325,  1399,     0,   326,   327,   328,\n-       0,     0,   329,   877,   878,   332,   879,   880,   335,   336,\n+     304,   305,   306,   873,   874,   875,   310,   311,   312,   876,\n+       0,   314,   315,   877,   317,     0,   878,   319,   879,   321,\n+     322,   323,     0,   324,   325,     0,     0,   326,   327,   328,\n+       0,     0,   329,   880,   881,   332,   882,   883,   335,   336,\n      337,   338,   339,   340,   341,   342,   343,   344,     0,     0,\n-       0,     0,   345,   346,   881,   882,   349,   350,   883,   352,\n+       0,     0,   345,   346,   884,   885,   349,   350,   886,   352,\n      353,   354,     0,   355,   356,   357,   358,   359,   360,     0,\n-     361,   362,   363,   884,   365,   366,   367,   368,     0,   369,\n+     361,   362,   363,   887,   365,   366,   367,   368,     0,   369,\n      370,   371,   372,   373,   374,   375,   376,   377,   378,   379,\n-     380,   381,     0,   382,   383,   885,   385,   386,   387,   886,\n+     380,   381,     0,   382,   383,   888,   385,   386,   387,   889,\n      389,   390,   391,   392,   393,   394,   395,   396,   397,   398,\n-     399,     0,   887,   400,   401,   402,   403,   404,   405,   888,\n-     407,   408,   409,   889,   411,   412,   890,   414,     0,   415,\n+     399,     0,   890,   400,   401,   402,   403,   404,   405,   891,\n+     407,   408,   409,   892,   411,   412,   893,   414,     0,   415,\n      416,   417,   418,   419,   420,   421,   422,   423,   424,   425,\n-     426,   891,   428,   892,   430,     0,   431,   432,     0,   433,\n-     893,   435,   436,   437,   438,   439,     0,   894,   895,     0,\n-       0,   442,   443,   896,   445,   897,  1400,   447,   448,   898,\n+     426,   894,   428,   895,   430,     0,   431,   432,     0,   433,\n+     896,   435,   436,   437,   438,   439,     0,   897,   898,     0,\n+       0,   442,   443,   899,   445,   900,     0,   447,   448,   901,\n      450,   451,   452,   453,   454,     0,     0,   455,   456,   457,\n        0,   458,   459,   460,   461,     0,   462,   463,   464,   465,\n-     466,  1243,   900,     0,   469,   901,   471,   472,   473,   474,\n+     466,  1250,   903,     0,   469,   904,   471,   472,   473,   474,\n      475,     0,     0,   476,     0,     0,   477,   478,   479,   480,\n-     481,   482,   902,   903,   904,   905,   906,   907,   908,   909,\n-     910,   911,   912,   494,   495,   496,   497,   831,  1397,   629,\n-       0,     0,     0,   989,  1401,  1402,     0,     0,     0,     0,\n+     481,   482,   905,   906,   907,   908,   909,   910,   911,   912,\n+     913,   914,   915,   494,   495,   496,   497,   109,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,   110,   111,   112,   113,\n      114,   115,   116,   117,     0,   118,   119,   120,     0,     0,\n-       0,   832,     0,     0,     0,     0,   833,   122,   123,     0,\n-     124,   125,   126,   834,   128,   129,   130,   835,   836,   837,\n-     838,   839,     0,   136,   137,   138,   139,   140,   141,     0,\n-       0,   142,   143,   840,   841,   146,     0,   147,   148,   149,\n-     150,   842,     0,   843,     0,   844,   154,   155,   156,   157,\n-     158,   845,   160,   161,   162,     0,   163,   164,   165,   166,\n-     167,   168,     0,   846,   170,   171,   172,   173,   174,   175,\n-     176,   177,   178,   179,   847,   848,   182,  1604,   183,     0,\n+       0,     0,     0,     0,     0,     0,   121,   122,   123,     0,\n+     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,\n+     134,   135,     0,   136,   137,   138,   139,   140,   141,     0,\n+     599,   142,   143,   144,   145,   146,     0,   147,   148,   149,\n+     150,   600,     0,   601,     0,   153,   154,   155,   156,   157,\n+     158,   159,   160,   161,   162,     0,   163,   164,   165,   166,\n+     167,   168,     0,   169,   170,   171,   172,   173,   174,   175,\n+     176,   177,   178,   179,   180,   181,   182,     0,   183,     0,\n      184,   185,   186,   187,   188,   189,     0,   190,   191,   192,\n      193,   194,     0,     0,   195,   196,   197,   198,   199,     0,\n      200,   201,   202,     0,   203,   204,   205,     0,   206,   207,\n-     208,   209,   849,   211,   212,   213,   214,   215,   850,  1398,\n-     217,     0,   218,   219,   851,   221,     0,   222,     0,   223,\n-     852,     0,   853,   226,   227,   854,   855,   230,     0,   231,\n-       0,   856,   857,   234,     0,   235,   236,   237,   238,   239,\n-     240,   241,   858,   243,   244,   245,   246,     0,   247,   248,\n-     249,   250,   251,   252,   253,     0,   254,   859,   860,   257,\n-     258,   259,   260,   261,   861,   862,     0,   863,     0,   265,\n-     864,   865,   268,   866,   270,   271,   272,   273,   274,   275,\n-       0,     0,   276,   867,   278,   868,     0,   280,   281,   282,\n-     283,   284,   285,   286,   287,   869,   289,   290,   291,   292,\n+     208,   209,   210,   211,   212,   213,   214,   215,   602,     0,\n+     217,     0,   218,   219,   220,   221,     0,   222,     0,   223,\n+     224,     0,   225,   226,   227,   228,   229,   230,     0,   231,\n+       0,   232,   233,   234,     0,   235,   236,   237,   238,   239,\n+     240,   241,   242,   243,   244,   245,   246,     0,   247,   248,\n+     249,   250,   251,   252,   253,     0,   254,   255,   256,   257,\n+     258,   259,   260,   261,   262,   263,     0,   264,     0,   265,\n+     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,\n+       0,     0,   276,   277,   278,   279,     0,   280,   281,   282,\n+     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,\n      293,   294,   295,   296,   297,   298,   299,   300,   301,   302,\n-     303,   304,   305,   306,   870,   871,   872,   310,   311,   312,\n-     873,     0,   314,   315,   874,   317,     0,   875,   319,   876,\n-     321,   322,   323,     0,   324,   325,  1399,     0,   326,   327,\n-     328,     0,     0,   329,   877,   878,   332,   879,   880,   335,\n+     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,\n+     313,     0,   314,   315,   316,   317,     0,   604,   319,   320,\n+     321,   322,   323,     0,   324,   325,     0,     0,   326,   327,\n+     328,     0,     0,   329,   330,   331,   332,   333,   606,   335,\n      336,   337,   338,   339,   340,   341,   342,   343,   344,     0,\n-       0,     0,     0,   345,   346,   881,   882,   349,   350,   883,\n+       0,     0,     0,   345,   346,   607,   348,   349,   350,   351,\n      352,   353,   354,     0,   355,   356,   357,   358,   359,   360,\n-       0,   361,   362,   363,   884,   365,   366,   367,   368,     0,\n+       0,   361,   362,   363,   364,   365,   366,   367,   368,     0,\n      369,   370,   371,   372,   373,   374,   375,   376,   377,   378,\n-     379,   380,   381,     0,   382,   383,   885,   385,   386,   387,\n-     886,   389,   390,   391,   392,   393,   394,   395,   396,   397,\n-     398,   399,     0,   887,   400,   401,   402,   403,   404,   405,\n-     888,   407,   408,   409,   889,   411,   412,   890,   414,     0,\n+     379,   380,   381,     0,   382,   383,   384,   385,   386,   387,\n+     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,\n+     398,   399,     0,     0,   400,   401,   402,   403,   404,   405,\n+     406,   407,   408,   409,   410,   411,   412,   413,   414,     0,\n      415,   416,   417,   418,   419,   420,   421,   422,   423,   424,\n-     425,   426,   891,   428,   892,   430,     0,   431,   432,     0,\n-     433,   893,   435,   436,   437,   438,   439,     0,   894,   895,\n-       0,     0,   442,   443,   896,   445,   897,  1400,   447,   448,\n-     898,   450,   451,   452,   453,   454,     0,     0,   455,   456,\n+     425,   426,   427,   428,   609,   430,     0,   431,   432,     0,\n+     433,   434,   435,   436,   437,   438,   439,     0,   440,   441,\n+       0,     0,   442,   443,   610,   445,   611,     0,   447,   448,\n+     612,   450,   451,   452,   453,   454,     0,     0,   455,   456,\n      457,     0,   458,   459,   460,   461,     0,   462,   463,   464,\n-     465,   466,  1243,   900,     0,   469,   901,   471,   472,   473,\n+     465,   466,   467,   468,     0,   469,   470,   471,   472,   473,\n      474,   475,     0,     0,   476,     0,     0,   477,   478,   479,\n-     480,   481,   482,   902,   903,   904,   905,   906,   907,   908,\n-     909,   910,   911,   912,   494,   495,   496,   497,   831,  1397,\n-     629,     0,     0,     0,   989,  1401,  1402,     0,     0,     0,\n+     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,\n+     490,   491,   492,   493,   494,   495,   496,   497,   109,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,   110,   111,   112,\n      113,   114,   115,   116,   117,     0,   118,   119,   120,     0,\n-       0,     0,   832,     0,     0,     0,     0,   833,   122,   123,\n-       0,   124,   125,   126,   834,   128,   129,   130,   835,   836,\n-     837,   838,   839,     0,   136,   137,   138,   139,   140,   141,\n-       0,     0,   142,   143,   840,   841,   146,     0,   147,   148,\n-     149,   150,   842,     0,   843,     0,   844,   154,   155,   156,\n-     157,   158,   845,   160,   161,   162,     0,   163,   164,   165,\n-     166,   167,   168,     0,   846,   170,   171,   172,   173,   174,\n-     175,   176,   177,   178,   179,   847,   848,   182,     0,   183,\n+       0,     0,     0,     0,     0,     0,     0,   121,   122,   123,\n+       0,   124,   125,   126,   127,   128,   129,   130,   131,   132,\n+     133,   134,   135,     0,   136,   137,   138,   139,   140,   141,\n+       0,     0,   142,   143,   144,   145,   146,     0,   147,   148,\n+     149,   150,   151,     0,   152,     0,   153,   154,   155,   156,\n+     157,   158,   159,   160,   161,   162,     0,   163,   164,   165,\n+     166,   167,   168,     0,   169,   170,   171,   172,   173,   174,\n+     175,   176,   177,   178,   179,   180,   181,   182,     0,   183,\n        0,   184,   185,   186,   187,   188,   189,     0,   190,   191,\n      192,   193,   194,     0,     0,   195,   196,   197,   198,   199,\n        0,   200,   201,   202,     0,   203,   204,   205,     0,   206,\n-     207,   208,   209,   849,   211,   212,   213,   214,   215,   850,\n-    1398,   217,     0,   218,   219,   851,   221,     0,   222,     0,\n-     223,   852,     0,   853,   226,   227,   854,   855,   230,     0,\n-     231,     0,   856,   857,   234,     0,   235,   236,   237,   238,\n-     239,   240,   241,   858,   243,   244,   245,   246,     0,   247,\n-     248,   249,   250,   251,   252,   253,     0,   254,   859,   860,\n-     257,   258,   259,   260,   261,   861,   862,     0,   863,     0,\n-     265,   864,   865,   268,   866,   270,   271,   272,   273,   274,\n-     275,     0,     0,   276,   867,   278,   868,     0,   280,   281,\n-     282,   283,   284,   285,   286,   287,   869,   289,   290,   291,\n+     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,\n+       0,   217,     0,   218,   219,   220,   221,     0,   222,     0,\n+     223,   224,     0,   225,   226,   227,   228,   229,   230,     0,\n+     231,     0,   232,   233,   234,     0,   235,   236,   237,   238,\n+     239,   240,   241,   242,   243,   244,   245,   246,     0,   247,\n+     248,   249,   250,   251,   252,   253,     0,   254,   255,   256,\n+     257,   258,   259,   260,   261,   262,   263,     0,   264,     0,\n+     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,\n+     275,     0,     0,   276,   277,   278,   279,     0,   280,   281,\n+     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,\n      292,   293,   294,   295,   296,   297,   298,   299,   300,   301,\n-     302,   303,   304,   305,   306,   870,   871,   872,   310,   311,\n-     312,   873,     0,   314,   315,   874,   317,     0,   875,   319,\n-     876,   321,   322,   323,     0,   324,   325,  1399,     0,   326,\n-     327,   328,     0,     0,   329,   877,   878,   332,   879,   880,\n+     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,\n+     312,   313,     0,   314,   315,   316,   317,     0,   318,   319,\n+     320,   321,   322,   323,     0,   324,   325,     0,     0,   326,\n+     327,   328,     0,     0,   329,   330,   331,   332,   333,   334,\n      335,   336,   337,   338,   339,   340,   341,   342,   343,   344,\n-       0,     0,     0,     0,   345,   346,   881,   882,   349,   350,\n-     883,   352,   353,   354,     0,   355,   356,   357,   358,   359,\n-     360,     0,   361,   362,   363,   884,   365,   366,   367,   368,\n+       0,     0,     0,     0,   345,   346,   347,   348,   349,   350,\n+     351,   352,   353,   354,     0,   355,   356,   357,   358,   359,\n+     360,     0,   361,   362,   363,   364,   365,   366,   367,   368,\n        0,   369,   370,   371,   372,   373,   374,   375,   376,   377,\n-     378,   379,   380,   381,     0,   382,   383,   885,   385,   386,\n-     387,   886,   389,   390,   391,   392,   393,   394,   395,   396,\n-     397,   398,   399,     0,   887,   400,   401,   402,   403,   404,\n-     405,   888,   407,   408,   409,   889,   411,   412,   890,   414,\n+     378,   379,   380,   381,     0,   382,   383,   384,   385,   386,\n+     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,\n+     397,   398,   399,     0,     0,   400,   401,   402,   403,   404,\n+     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,\n        0,   415,   416,   417,   418,   419,   420,   421,   422,   423,\n-     424,   425,   426,   891,   428,   892,   430,     0,   431,   432,\n-       0,   433,   893,   435,   436,   437,   438,   439,     0,   894,\n-     895,     0,     0,   442,   443,   896,   445,   897,  1400,   447,\n-     448,   898,   450,   451,   452,   453,   454,     0,     0,   455,\n+     424,   425,   426,   427,   428,   429,   430,     0,   431,   432,\n+       0,   433,   434,   435,   436,   437,   438,   439,     0,   440,\n+     441,     0,     0,   442,   443,   444,   445,   446,     0,   447,\n+     448,   449,   450,   451,   452,   453,   454,     0,     0,   455,\n      456,   457,     0,   458,   459,   460,   461,     0,   462,   463,\n-     464,   465,   466,  1243,   900,     0,   469,   901,   471,   472,\n+     464,   465,   466,   467,   468,     0,   469,   470,   471,   472,\n      473,   474,   475,     0,     0,   476,     0,     0,   477,   478,\n-     479,   480,   481,   482,   902,   903,   904,   905,   906,   907,\n-     908,   909,   910,   911,   912,   494,   495,   496,   497,     0,\n-       0,  1545,     0,     0,  1546,     0,  1401,  1402,  1547,  1548,\n-    1549,  1550,  1551,  1552,  1553,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,  1554,\n-       0,     0,     0,     0,  2077,     0,     0,     0,     0,  1556,\n-       0,  1545,     0,     0,  1546,     0,  1557,     0,  1547,  1548,\n-    1549,  1550,  1551,  1552,  1553,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,  1554,\n-       0,  1558,     0,     0,     0,     0,     0,     0,     0,  1556,\n-       0,  1545,     0,     0,  1546,     0,  1557,     0,  1547,  1548,\n-    1549,  1550,  1551,  1552,  1553,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,  1554,\n-       0,  1558,     0,     0,     0,  2078,     0,     0,     0,  1556,\n-       0,  1545,     0,     0,  1546,     0,  1557,     0,  1547,  1548,\n-    1549,  1550,  1551,  1552,  1553,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,  1554,\n-       0,  1558,     0,  1836,     0,     0,     0,     0,     0,  1556,\n-       0,  1545,     0,     0,  1546,  1559,  1557,     0,  1547,  1548,\n-    1549,  1550,  1551,  1552,  1553,     0,     0,     0,     0,     0,\n-       0,  1560,     0,     0,     0,     0,  1561,     0,     0,  1554,\n-       0,  1558,     0,     0,     0,  1872,     0,     0,     0,  1556,\n-    1873,     0,     0,     0,     0,  1559,  1557,     0,     0,  1562,\n-    1563,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,  1560,     0,     0,  1564,     0,  1561,     0,     0,     0,\n-       0,  1558,     0,     0,  3346,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,  1559,     0,     0,     0,  1562,\n-    1563,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-    1565,  1560,     0,  1566,  1564,     0,  1561,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,  1567,     0,     0,\n-    1568,     0,     0,     0,     0,  1559,     0,     0,     0,  1562,\n-    1563,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-    1565,  1560,     0,  1566,  1564,     0,  1561,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,  1567,     0,     0,\n-    1568,     0,     0,     0,     0,  1559,     0,     0,     0,  1562,\n-    1563,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-    1565,  1560,     0,  1566,  1564,     0,  1561,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,  1567,     0,     0,\n-    1568,     0,     0,     0,     0,     0,     0,     0,     0,  1562,\n-    1563,     0,     0,  1569,     0,     0,     0,     0,     0,     0,\n-    1565,     0,     0,  1566,  1564,     0,     0,  3347,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,  1567,     0,     0,\n-    1568,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,  1569,     0,     0,     0,     0,     0,     0,\n-    1565,     0,     0,  1566,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,  2081,     0,  1567,     0,     0,\n-    1568,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,  1569,     0,     0,     0,     0,     0,     0,\n-       0,  1843,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,  1570,     0,     0,\n-    1571,  1572,  1573,     0,  1574,  1575,  1576,  1577,  1578,  1579,\n-       0,     0,     0,  1569,     0,     0,     0,     0,     0,     0,\n-       0,     0,  1545,     0,     0,  1546,     0,     0,     0,  1547,\n-    1548,  1549,  1550,  1551,  1552,  1553,     0,  1570,     0,     0,\n-    1571,  1572,  1573,     0,  1574,  1575,  1576,  1577,  1578,  1579,\n-    1554,     0,     0,  1569,  1878,     0,     0,     0,     0,     0,\n-    1556,     0,  1545,     0,     0,  1546,     0,  1557,     0,  1547,\n-    1548,  1549,  1550,  1551,  1552,  1553,     0,  1570,     0,     0,\n-    1571,  1572,  1573,     0,  1574,  1575,  1576,  1577,  1578,  1579,\n-    1554,     0,  1558,     0,     0,     0,     0,     0,     0,     0,\n-    1556,     0,  1545,     0,     0,  1546,     0,  1557,     0,  1547,\n-    1548,  1549,  1550,  1551,  1552,  1553,     0,  1570,     0,     0,\n-    1571,  1572,  1573,     0,  1574,  1575,  1576,  1577,  1578,  1579,\n-    1554,     0,  1558,     0,  1885,     0,     0,     0,     0,     0,\n-    1556,     0,  1545,     0,     0,  1546,     0,  1557,     0,  1547,\n-    1548,  1549,  1550,  1551,  1552,  1553,     0,  1570,     0,     0,\n-    1571,  1572,  1573,     0,  1574,  1575,  1576,  1577,  1578,  1579,\n-    1554,     0,  1558,     0,     0,     0,     0,     0,     0,     0,\n-    1556,     0,     0,     0,     0,     0,  1559,  1557,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,  1560,     0,     0,     0,     0,  1561,     0,     0,\n-       0,     0,  1558,     0,     0,     0,     0,     0,     0,     0,\n-       0,  1883,     0,     0,     0,     0,  1559,     0,     0,     0,\n-    1562,  1563,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,  1560,     0,     0,  1564,     0,  1561,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,  1559,     0,     0,     0,\n-    1562,  1563,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,  1565,  1560,     0,  1566,  1564,     0,  1561,     0,     0,\n-       0,     0,     0,     0,     0,     0,  1975,     0,  1567,     0,\n-       0,  1568,     0,     0,     0,     0,  1559,     0,     0,     0,\n-    1562,  1563,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,  1565,  1560,     0,  1566,  1564,     0,  1561,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,  1567,     0,\n-       0,  1568,     0,     0,     0,     0,     0,     0,     0,     0,\n-    1562,  1563,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,  1565,     0,     0,  1566,  1564,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,  1567,     0,\n-       0,  1568,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,  1569,     0,     0,     0,     0,     0,\n-       0,  1565,     0,     0,  1566,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,  1567,     0,\n-       0,  1568,     0,     0,     0,     0,     0,     0,     0,     0,\n-    1545,     0,     0,  1546,  1569,     0,     0,  1547,  1548,  1549,\n-    1550,  1551,  1552,  1553,     0,     0,     0,     0,     0,     0,\n-       0,     0,  1545,     0,     0,  1546,     0,     0,  1554,  1547,\n-    1548,  1549,  1550,  1551,  1552,  1553,     0,     0,  1556,     0,\n-       0,     0,     0,     0,  1569,  1557,     0,     0,     0,     0,\n-    1554,     0,     0,     0,  2645,     0,     0,     0,     0,     0,\n-    1556,     0,     0,     0,     0,     0,     0,  1557,  1570,     0,\n-    1558,  1571,  1572,  1573,     0,  1574,  1575,  1576,  1577,  1578,\n-    1579,     0,     0,     0,  1569,     0,     0,     0,     0,     0,\n-       0,     0,  1558,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,  1570,     0,\n-       0,  1571,  1572,  1573,     0,  1574,  1575,  1576,  1577,  1578,\n-    1579,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,  1570,     0,\n-       0,  1571,  1572,  1573,     0,  1574,  1575,  1576,  1577,  1578,\n-    1579,     0,     0,     0,  1559,     0,  1545,     0,     0,  1546,\n-       0,     0,     0,  1547,  1548,  1549,  1550,  1551,  1552,  1553,\n-    1560,     0,     0,     0,     0,  1561,  1559,     0,  1570,     0,\n-       0,  1571,  1572,  1573,  1554,  1574,  1575,  1576,  1577,  1578,\n-    1579,     0,  1560,     0,  1556,     0,     0,  1561,  1562,  1563,\n-       0,  1557,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,  1564,     0,     0,     0,     0,     0,     0,\n-    1562,  1563,     0,     0,     0,  1545,  1558,     0,  1546,     0,\n-       0,     0,  1547,  1548,     0,  1564,  1551,  1552,  1553,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,  1565,\n-       0,     0,  1566,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,  1556,     0,     0,  1567,     0,     0,  1568,\n-    1557,  1565,     0,     0,  1566,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,  1567,     0,\n-       0,  1568,     0,     0,     0,  1558,     0,     0,     0,  1545,\n-       0,     0,  1546,     0,     0,     0,  1547,  1548,  1549,  1550,\n-    1551,  1552,  1553,     0,     0,     0,     0,     0,     0,     0,\n-    1559,     0,     0,     0,     0,     0,     0,  1554,     0,     0,\n-       0,     0,     0,     0,     0,     0,  1560,  1556,     0,     0,\n-       0,  1561,     0,     0,  1557,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,  1569,     0,  1562,  1563,     0,     0,     0,  1558,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,  1564,\n-       0,     0,     0,     0,  1569,     0,     0,     0,     0,  1559,\n-       0,     0,     0,     0,     0,  2634,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,  1560,     0,     0,     0,     0,\n-    1561,     0,     0,     0,     0,  1565,     0,     0,  1566,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,  1567, -1948, -1948,  1568,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,  1564,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,  1559,     0,     0,  1570,     0,     0,  1571,\n-    1572,  1573,     0,  1574,  1575,  1576,  1577,  1578,  1579,  1560,\n-       0,     0,     0,     0,  1561,     0,     0, -1948,  1570,     0,\n-       0,  1571,  1572,  1573,     0,  1574,  1575,  1576,  1577,  1578,\n-    1579,  1567,     0,     0,     0,     0,     0,  1562,  1563,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,  1564,     0,     0,     0,     0,     0,  1569,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,  1565,     0,\n-       0,  1566,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,  1567,     0,     0,  1568,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,  1569,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,  1570,     0,     0,  1571,  1572,  1573,     0,  1574,\n-    1575,  1576,  1577,  1578,  1579,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,  1569,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,  1570,     0,     0,  1571,  1572,  1573,     0,  1574,  1575,\n-    1576,  1577,  1578,  1579,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,\n+     489,   490,   491,   492,   493,   494,   495,   496,   497,   505,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,  1175,\n-       0,  1997,     0,     0,     0,  1570,     0,     0,  1571,  1572,\n-    1573,     0,  1574,  1575,  1576,  1577,  2098,  1579,   110,   111,\n-     112,   113,   114,   115,   116,   117,  1176,   118,   119,   120,\n-    1177,  1178,  1179,   832,  1180,  1181,  1182,  1183,   833,   122,\n-     123,  1184,   124,   125,   126,   834,   128,   129,   130,   835,\n-     836,   837,   838,   839,  1185,   136,   137,   138,   139,   140,\n-     141,  1186,  1187,   142,   143,   840,   841,   146,  1188,   147,\n-     148,   149,   150,   842,  1189,   843,  1190,   844,   154,   155,\n-     156,   157,   158,   845,   160,   161,   162,  1191,   163,   164,\n-     165,   166,   167,   168,  1192,   846,   170,   171,   172,   173,\n-     174,   175,   176,   177,   178,   179,   847,   848,   182,  1193,\n-     183,  1194,   184,   185,   186,   187,   188,   189,  1195,   190,\n-     191,   192,   193,   194,  1196,  1197,   195,   196,   197,   198,\n-     199,  1198,   200,   201,   202,  1199,   203,   204,   205,  1200,\n-     206,   207,   208,   209,   849,   211,   212,   213,   214,   215,\n-     850,  1201,   217,  1202,   218,   219,   851,   221,  1203,   222,\n-    1204,   223,   852,  1205,   853,   226,   227,   854,   855,   230,\n-    1206,   231,  1207,   856,   857,   234,  1208,   235,   236,   237,\n-     238,   239,   240,   241,   858,   243,   244,   245,   246,  1209,\n-     247,   248,   249,   250,   251,   252,   253,  1210,   254,   859,\n-     860,   257,   258,   259,   260,   261,   861,   862,  1211,   863,\n-    1212,   265,   864,   865,   268,   866,   270,   271,   272,   273,\n-     274,   275,  1213,  1214,   276,   867,   278,   868,  1215,   280,\n-     281,   282,   283,   284,   285,   286,   287,   869,   289,   290,\n+       0,     0,     0,     0,     0,     0,     0,     0,   110,   111,\n+     112,   113,   114,   115,   116,   117,     0,   118,   119,   120,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,   122,\n+     123,     0,   124,   125,   126,     0,   128,   129,   130,   131,\n+     132,     0,   134,   135,     0,   136,   137,   138,   139,   140,\n+     141,     0,     0,   142,   143,   144,   145,   146,  1682,   147,\n+     148,   149,   150,   151,     0,     0,  1683,   153,   154,   155,\n+     156,   157,   158,     0,   160,   161,   162,  1684,   163,   164,\n+     165,   166,   167,   168,     0,     0,   170,   171,   172,   173,\n+     174,   175,   176,   177,   178,   179,   180,   181,   182,     0,\n+     183,     0,   184,   185,   186,   187,   188,   189,     0,   190,\n+     191,   192,   193,   194,     0,     0,   195,   196,   197,   198,\n+     199,     0,   200,   201,   202,     0,   203,   204,   205,     0,\n+     206,   207,   208,   209,   210,   211,   212,   213,   214,   215,\n+     216,     0,   217,     0,   218,   219,   220,   221,     0,   222,\n+    1685,   223,     0,     0,     0,   226,   227,   506,     0,   230,\n+       0,   231,     0,   232,   233,   234,     0,   235,   236,   237,\n+     238,   239,  1686,   241,     0,   243,   244,   245,   246,     0,\n+     247,   248,   249,   250,   251,   252,   253,     0,   254,     0,\n+     256,   257,   258,   259,   260,   261,   262,   263,     0,   264,\n+       0,   265,     0,     0,   268,     0,   270,   271,   272,   273,\n+     274,   275,     0,     0,   276,     0,   278,     0,     0,   280,\n+     281,   282,   283,   284,   285,   286,   287,   507,   289,   290,\n      291,   292,   293,   294,   295,   296,   297,   298,   299,   300,\n-     301,   302,   303,   304,   305,   306,   870,   871,   872,   310,\n-     311,   312,   873,  1216,   314,   315,   874,   317,  1217,   875,\n-     319,   876,   321,   322,   323,  1218,   324,   325,  1219,  1220,\n-     326,   327,   328,  1221,  1222,   329,   877,   878,   332,   879,\n-     880,   335,   336,   337,   338,   339,   340,   341,   342,   343,\n-     344,  1223,  1224,  1225,  1226,   345,   346,   881,   882,   349,\n-     350,   883,   352,   353,   354,  1227,   355,   356,   357,   358,\n-     359,   360,  1228,   361,   362,   363,   884,   365,   366,   367,\n-     368,  1229,   369,   370,   371,   372,   373,   374,   375,   376,\n-     377,   378,   379,   380,   381,  1230,   382,   383,   885,   385,\n-     386,   387,   886,   389,   390,   391,   392,   393,   394,   395,\n-     396,   397,   398,   399,  1231,   887,   400,   401,   402,   403,\n-     404,   405,   888,   407,   408,   409,   889,   411,   412,   890,\n-     414,  1232,   415,   416,   417,   418,   419,   420,   421,   422,\n-     423,   424,   425,   426,   891,   428,   892,   430,  1233,   431,\n-     432,  1234,   433,   893,   435,   436,   437,   438,   439,  1235,\n-     894,   895,  1236,  1237,   442,   443,   896,   445,   897,  1238,\n-     447,   448,   898,   450,   451,   452,   453,   454,  1239,  1240,\n-     455,   456,   457,  1241,   458,   459,   460,   461,  1242,   462,\n-     463,   464,   465,   466,  1243,   900,  1244,   469,   901,   471,\n-     472,   473,   474,   475,  1245,  1246,   476,  1247,  1248,   477,\n-     478,   479,   480,   481,   482,   902,   903,   904,   905,   906,\n-     907,   908,   909,   910,   911,   912,   494,   495,   496,   497,\n-    1175,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+     301,   302,   303,   304,   305,   306,   307,     0,   309,   310,\n+     311,   312,   313,     0,   314,   315,     0,   317,     0,   318,\n+     319,   320,   321,   322,   323,     0,   324,   325,     0,     0,\n+     326,   327,   328,     0,     0,   329,   330,     0,   332,     0,\n+     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,\n+     344,     0,     0,     0,     0,   345,   346,   347,     0,   349,\n+     350,   351,   352,   353,   354,  1687,   355,   356,   357,   358,\n+     359,   360,     0,   361,   362,   363,   364,   365,   366,   367,\n+     368,     0,   369,   370,   371,   372,   373,   374,   375,   376,\n+     377,   378,   379,   380,   381,     0,   382,   383,     0,   385,\n+     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,\n+     396,   397,   398,   399,     0,     0,   400,   401,   402,   403,\n+     404,   405,   406,   407,   408,   409,     0,   411,   412,   413,\n+     414,     0,   415,   416,   417,   418,   419,   420,   421,   422,\n+     423,   424,   425,   426,   508,   428,   429,   430,     0,   431,\n+     432,     0,   433,     0,   435,   436,   437,   438,   439,     0,\n+     440,   441,     0,     0,   442,   443,   444,   445,   446,     0,\n+     447,   448,   449,   450,   451,   452,   453,   454,     0,  1688,\n+     455,   456,   457,     0,   458,   459,   460,   461,     0,   462,\n+     463,   464,   465,   466,   467,   468,     0,   469,     0,   471,\n+     472,   473,   474,   475,     0,     0,   476,     0,     0,   477,\n+     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,\n+     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,\n+     505,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,   110,\n-     111,   112,   113,   114,   115,   116,   117,  1176,   118,   119,\n-     120,  1177,  1178,  1179,   832,  1180,  1181,  1182,  1183,   833,\n-     122,   123,  1184,   124,   125,   126,   834,   128,   129,   130,\n-     835,   836,   837,   838,   839,  1185,   136,   137,   138,   139,\n-     140,   141,  1186,  1187,   142,   143,   840,   841,   146,  1188,\n-     147,   148,   149,   150,   842,  1189,   843,  1190,   844,   154,\n-     155,   156,   157,   158,   845,   160,   161,   162,  1191,   163,\n-     164,   165,   166,   167,   168,  1192,   846,   170,   171,   172,\n-     173,   174,   175,   176,   177,   178,   179,   847,   848,   182,\n-    1193,   183,  1194,   184,   185,   186,   187,   188,   189,  1195,\n-     190,   191,   192,   193,   194,  1196,  1197,   195,   196,   197,\n-     198,   199,  1198,   200,   201,   202,  1199,   203,   204,   205,\n-    1200,   206,   207,   208,   209,   849,   211,   212,   213,   214,\n-     215,   850,  1201,   217,  1202,   218,   219,   851,   221,  1203,\n-     222,  1204,   223,   852,  1205,   853,   226,   227,   854,   855,\n-     230,  1206,   231,  1207,   856,   857,   234,  1208,   235,   236,\n-     237,   238,   239,   240,   241,   858,   243,   244,   245,   246,\n-    1209,   247,   248,   249,   250,   251,   252,   253,  1210,   254,\n-     859,   860,   257,   258,   259,   260,   261,   861,   862,  1211,\n-     863,  1212,   265,   864,   865,   268,   866,   270,   271,   272,\n-     273,   274,   275,  1213,  1214,   276,   867,   278,   868,  1215,\n-     280,   281,   282,   283,   284,   285,   286,   287,   869,   289,\n+     111,   112,   113,   114,   115,   116,   117,     0,   118,   119,\n+     120,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+     122,   123,     0,   124,   125,   126,     0,   128,   129,   130,\n+     131,   132,     0,   134,   135,     0,   136,   137,   138,   139,\n+     140,   141,     0,     0,   142,   143,   144,   145,   146,  1682,\n+     147,   148,   149,   150,   151,     0,     0,     0,   153,   154,\n+     155,   156,   157,   158,     0,   160,   161,   162,  1684,   163,\n+     164,   165,   166,   167,   168,     0,     0,   170,   171,   172,\n+     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,\n+       0,   183,     0,   184,   185,   186,   187,   188,   189,     0,\n+     190,   191,   192,   193,   194,     0,     0,   195,   196,   197,\n+     198,   199,     0,   200,   201,   202,     0,   203,   204,   205,\n+       0,   206,   207,   208,   209,   210,   211,   212,   213,   214,\n+     215,   216,     0,   217,     0,   218,   219,   220,   221,     0,\n+     222,  1685,   223,     0,     0,     0,   226,   227,   506,     0,\n+     230,     0,   231,     0,   232,   233,   234,     0,   235,   236,\n+     237,   238,   239,   240,   241,     0,   243,   244,   245,   246,\n+       0,   247,   248,   249,   250,   251,   252,   253,     0,   254,\n+       0,   256,   257,   258,   259,   260,   261,   262,   263,     0,\n+     264,     0,   265,     0,     0,   268,     0,   270,   271,   272,\n+     273,   274,   275,     0,     0,   276,     0,   278,  2225,     0,\n+     280,   281,   282,   283,   284,   285,   286,   287,   507,   289,\n      290,   291,   292,   293,   294,   295,   296,   297,   298,   299,\n-     300,   301,   302,   303,   304,   305,   306,   870,   871,   872,\n-     310,   311,   312,   873,  1216,   314,   315,   874,   317,  1217,\n-     875,   319,   876,   321,   322,   323,  1218,   324,   325,  1219,\n-    1220,   326,   327,   328,  1221,  1222,   329,   877,   878,   332,\n-     879,   880,   335,   336,   337,   338,   339,   340,   341,   342,\n-     343,   344,  1223,  1224,  1225,  1226,   345,   346,   881,   882,\n-     349,   350,   883,   352,   353,   354,  1227,   355,   356,   357,\n-     358,   359,   360,  1228,   361,   362,   363,   884,   365,   366,\n-     367,   368,  1229,   369,   370,   371,   372,   373,   374,   375,\n-     376,   377,   378,   379,   380,   381,  1230,   382,   383,   885,\n-     385,   386,   387,   886,   389,   390,   391,   392,   393,   394,\n-     395,   396,   397,   398,   399,  1231,   887,   400,   401,   402,\n-     403,   404,   405,   888,   407,   408,   409,   889,   411,   412,\n-     890,   414,  1232,   415,   416,   417,   418,   419,   420,   421,\n-     422,   423,   424,   425,   426,   891,   428,   892,   430,  1233,\n-     431,   432,  1234,   433,   893,   435,   436,   437,   438,   439,\n-    1235,   894,   895,  1236,  1237,   442,   443,   896,   445,   897,\n-    1238,   447,   448,   898,   450,   451,   452,   453,   454,  1239,\n-    1240,   455,   456,   457,  1241,   458,   459,   460,   461,  1242,\n-     462,   463,   464,   465,   466,  1243,   900,  1244,   469,   901,\n-     471,   472,   473,   474,   475,  1245,  1246,   476,  1247,  1248,\n-     477,   478,   479,   480,   481,   482,   902,   903,   904,   905,\n-     906,   907,   908,   909,   910,   911,   912,   494,   495,   496,\n-     497,  1175,     0,     0,     0,     0,     0,     0,     0,     0,\n+     300,   301,   302,   303,   304,   305,   306,   307,     0,   309,\n+     310,   311,   312,   313,     0,   314,   315,     0,   317,     0,\n+     318,   319,   320,   321,   322,   323,     0,   324,   325,     0,\n+       0,   326,   327,   328,     0,     0,   329,   330,     0,   332,\n+       0,   334,   335,   336,   337,   338,   339,   340,   341,   342,\n+     343,   344,     0,     0,     0,     0,   345,   346,   347,     0,\n+     349,   350,   351,   352,   353,   354,  1687,   355,   356,   357,\n+     358,   359,   360,     0,   361,   362,   363,   364,   365,   366,\n+     367,   368,     0,   369,   370,   371,   372,   373,   374,   375,\n+     376,   377,   378,   379,   380,   381,     0,   382,   383,     0,\n+     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,\n+     395,   396,   397,   398,   399,     0,     0,   400,   401,   402,\n+     403,   404,   405,   406,   407,   408,   409,     0,   411,   412,\n+     413,   414,     0,   415,   416,   417,   418,   419,   420,   421,\n+     422,   423,   424,   425,   426,   508,   428,   429,   430,     0,\n+     431,   432,     0,   433,     0,   435,   436,   437,   438,   439,\n+       0,   440,   441,     0,     0,   442,   443,   444,   445,   446,\n+       0,   447,   448,   449,   450,   451,   452,   453,   454,     0,\n+    1688,   455,   456,   457,     0,   458,   459,   460,   461,     0,\n+     462,   463,   464,   465,   466,   467,   468,     0,   469,     0,\n+     471,   472,   473,   474,   475,     0,     0,   476,     0,     0,\n+     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,\n+     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,\n+     497,   505,     0,   527,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-     110,   111,   112,   113,  2143,   115,   116,   117,  1176,   118,\n-     119,   120,  1177,  1178,  1179,   832,  1180,  1181,  1182,  1183,\n-     833,   122,   123,  1184,   124,   125,   126,   834,   128,   129,\n-     130,   835,   836,   837,   838,   839,  1185,   136,   137,   138,\n-     139,   140,   141,  1186,  1187,   142,   143,   840,   841,   146,\n-    1188,   147,   148,   149,   150,   842,  1189,   843,  1190,   844,\n-     154,   155,   156,   157,   158,   845,   160,   161,   162,  1191,\n-     163,   164,   165,   166,   167,   168,  1192,   846,   170,   171,\n-     172,   173,   174,   175,   176,   177,   178,   179,   847,   848,\n-     182,  1193,   183,  1194,   184,   185,   186,   187,   188,   189,\n-    1195,   190,   191,   192,   193,   194,  1196,  1197,   195,   196,\n-     197,  2144,   199,  1198,   200,   201,   202,  1199,   203,   204,\n-     205,  1200,   206,   207,   208,   209,   849,   211,   212,   213,\n-     214,   215,   850,  1201,   217,  1202,   218,   219,   851,   221,\n-    1203,   222,  1204,   223,   852,  1205,   853,   226,   227,   854,\n-     855,   230,  1206,   231,  1207,   856,   857,   234,  1208,   235,\n-     236,   237,   238,   239,   240,   241,   858,   243,   244,   245,\n-     246,  1209,   247,   248,   249,   250,   251,   252,   253,  1210,\n-     254,   859,   860,   257,   258,   259,   260,   261,   861,   862,\n-    1211,   863,  1212,   265,   864,   865,   268,   866,   270,   271,\n-     272,   273,   274,   275,  1213,  1214,   276,   867,   278,   868,\n-    1215,   280,   281,   282,   283,   284,   285,   286,   287,   869,\n+     110,   111,   112,   113,   114,   115,   116,   117,     0,   118,\n+     119,   120,     3,     4,     0,     0,     0,     0,     0,     0,\n+       0,   122,   123,     0,   124,   125,   126,     0,   128,   129,\n+     130,   131,   132,     0,   134,   135,     0,   136,   137,   138,\n+     139,   140,   141,     0,     0,   142,   143,   144,   145,   146,\n+       0,   147,   148,   149,   150,   151,     0,     0,     0,   153,\n+     154,   155,   156,   157,   158,     0,   160,   161,   162,     0,\n+     163,   164,   165,   166,   167,   168,     0,     0,   170,   171,\n+     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,\n+     182,     0,   183,     0,   184,   185,   186,   187,   188,   189,\n+       0,   190,   191,   192,   193,   194,     0,     0,   195,   196,\n+     197,   198,   199,     0,   200,   201,   202,     0,   203,   204,\n+     205,     0,   206,   207,   208,   209,   210,   211,   212,   213,\n+     214,   215,   216,     0,   217,     0,   218,   219,   220,   221,\n+       0,   222,     0,   223,     0,     0,     0,   226,   227,   506,\n+       0,   230,     0,   231,     0,   232,   233,   234,     0,   235,\n+     236,   237,   238,   239,   240,   241,     0,   243,   244,   245,\n+     246,     0,   247,   248,   249,   250,   251,   252,   253,     0,\n+     254,     0,   256,   257,   258,   259,   260,   261,   262,   263,\n+       0,   264,     0,   265,     0,     0,   268,     0,   270,   271,\n+     272,   273,   274,   275,     0,     0,   276,     0,   278,     0,\n+       0,   280,   281,   282,   283,   284,   285,   286,   287,   507,\n      289,   290,   291,   292,   293,   294,   295,   296,   297,   298,\n-     299,   300,   301,   302,   303,   304,   305,   306,   870,   871,\n-     872,   310,   311,   312,   873,  1216,   314,   315,   874,   317,\n-    1217,   875,   319,   876,   321,   322,   323,  1218,   324,   325,\n-    1219,  1220,   326,   327,   328,  1221,  1222,   329,   877,   878,\n-     332,   879,   880,   335,   336,   337,   338,   339,   340,   341,\n-     342,   343,   344,  1223,  1224,  1225,  1226,   345,   346,   881,\n-     882,   349,   350,   883,   352,   353,   354,  1227,   355,   356,\n-     357,   358,   359,   360,  1228,   361,   362,   363,   884,   365,\n-     366,   367,   368,  1229,   369,   370,   371,   372,   373,   374,\n-     375,   376,   377,   378,   379,   380,   381,  1230,   382,   383,\n-     885,   385,   386,   387,   886,   389,   390,   391,   392,   393,\n-     394,   395,   396,   397,   398,   399,  1231,   887,   400,   401,\n-     402,   403,   404,  2145,   888,   407,   408,   409,   889,   411,\n-     412,   890,   414,  1232,   415,   416,   417,   418,   419,   420,\n-     421,   422,   423,   424,   425,   426,   891,   428,   892,   430,\n-    1233,   431,   432,  1234,   433,   893,   435,   436,   437,   438,\n-     439,  1235,   894,   895,  1236,  1237,   442,   443,   896,   445,\n-     897,  1238,   447,   448,   898,   450,   451,   452,   453,   454,\n-    1239,  1240,   455,   456,   457,  1241,   458,   459,   460,   461,\n-    1242,   462,   463,   464,   465,   466,  1243,   900,  1244,   469,\n-     901,   471,   472,   473,   474,   475,  1245,  1246,   476,  1247,\n-    1248,   477,   478,   479,   480,   481,   482,   902,   903,   904,\n-     905,   906,   907,   908,   909,   910,   911,   912,   494,   495,\n-     496,   497,   831,     0,   629,     0,     0,     0,     0,     0,\n+     299,   300,   301,   302,   303,   304,   305,   306,   307,     0,\n+     309,   310,   311,   312,   313,     0,   314,   315,     0,   317,\n+       0,   318,   319,   320,   321,   322,   323,     0,   324,   325,\n+       0,     0,   326,   327,   328,     0,     0,   329,   330,     0,\n+     332,     0,   334,   335,   336,   337,   338,   339,   340,   341,\n+     342,   343,   344,     0,     0,     0,     0,   345,   346,   347,\n+       0,   349,   350,   351,   352,   353,   354,     0,   355,   356,\n+     357,   358,   359,   360,     0,   361,   362,   363,   364,   365,\n+     366,   367,   368,     0,   369,   370,   371,   372,   373,   374,\n+     375,   376,   377,   378,   379,   380,   381,     0,   382,   383,\n+       0,   385,   386,   387,   388,   389,   390,   391,   392,   393,\n+     394,   395,   396,   397,   398,   399,     0,     0,   400,   401,\n+     402,   403,   404,   405,   406,   407,   408,   409,     0,   411,\n+     412,   413,   414,     0,   415,   416,   417,   418,   419,   420,\n+     421,   422,   423,   424,   425,   426,   508,   428,   429,   430,\n+       0,   431,   432,     0,   433,     0,   435,   436,   437,   438,\n+     439,     0,   440,   441,     0,     0,   442,   443,   444,   445,\n+     446,     0,   447,   448,   449,   450,   451,   452,   453,   454,\n+       0,     0,   455,   456,   457,     0,   458,   459,   460,   461,\n+       0,   462,   463,   464,   465,   466,   467,   468,     0,   469,\n+       0,   471,   472,   473,   474,   475,     0,     0,   476,     0,\n+       0,   477,   478,   479,   480,   481,   482,   483,   484,   485,\n+     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,\n+     496,   497,   505,     0,   527,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,   110,   111,   112,   113,   114,   115,   116,   117,     0,\n-     118,   119,   120,     0,     0,     0,   832,     0,     0,     0,\n-       0,   833,   122,   123,     0,   124,   125,   126,   834,   128,\n-     129,   130,   835,   836,   837,   838,   839,     0,   136,   137,\n-     138,   139,   140,   141,     0,     0,   142,   143,   840,   841,\n-     146,     0,   147,   148,   149,   150,   842,     0,   843,     0,\n-     844,   154,   155,   156,   157,   158,   845,   160,   161,   162,\n-       0,   163,   164,   165,   166,   167,   168,     0,   846,   170,\n-     171,   172,   173,   174,   175,   176,   177,   178,   179,   847,\n-     848,   182,     0,   183,     0,   184,   185,   186,   187,   188,\n+       0,   110,   111,   112,   113,   114,   115,   116,   117,   528,\n+     118,   119,   120,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,   122,   123,     0,   124,   125,   126,     0,   128,\n+     129,   130,   131,   132,     0,   134,   135,     0,   136,   137,\n+     138,   139,   140,   141,     0,     0,   142,   143,   144,   145,\n+     146,     0,   147,   148,   149,   150,   151,     0,     0,     0,\n+     153,   154,   155,   156,   157,   158,     0,   160,   161,   162,\n+       0,   163,   164,   165,   166,   167,   168,     0,     0,   170,\n+     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,\n+     181,   182,     0,   183,     0,   184,   185,   186,   187,   188,\n      189,     0,   190,   191,   192,   193,   194,     0,     0,   195,\n      196,   197,   198,   199,     0,   200,   201,   202,     0,   203,\n-     204,   205,     0,   206,   207,   208,   209,   849,   211,   212,\n-     213,   214,   215,   850,  1398,   217,     0,   218,   219,   851,\n-     221,     0,   222,     0,   223,   852,     0,   853,   226,   227,\n-     854,   855,   230,     0,   231,     0,   856,   857,   234,     0,\n-     235,   236,   237,   238,   239,   240,   241,   858,   243,   244,\n+     204,   205,     0,   206,   207,   208,   209,   210,   211,   212,\n+     213,   214,   215,   216,     0,   217,     0,   218,   219,   220,\n+     221,     0,   222,     0,   223,     0,     0,     0,   226,   227,\n+     506,     0,   230,     0,   231,     0,   232,   233,   234,     0,\n+     235,   236,   237,   238,   239,   240,   241,     0,   243,   244,\n      245,   246,     0,   247,   248,   249,   250,   251,   252,   253,\n-       0,   254,   859,   860,   257,   258,   259,   260,   261,   861,\n-     862,     0,   863,     0,   265,   864,   865,   268,   866,   270,\n-     271,   272,   273,   274,   275,     0,     0,   276,   867,   278,\n-     868,     0,   280,   281,   282,   283,   284,   285,   286,   287,\n-     869,   289,   290,   291,   292,   293,   294,   295,   296,   297,\n-     298,   299,   300,   301,   302,   303,   304,   305,   306,   870,\n-     871,   872,   310,   311,   312,   873,     0,   314,   315,   874,\n-     317,     0,   875,   319,   876,   321,   322,   323,     0,   324,\n-     325,  1399,     0,   326,   327,   328,     0,     0,   329,   877,\n-     878,   332,   879,   880,   335,   336,   337,   338,   339,   340,\n+       0,   254,     0,   256,   257,   258,   259,   260,   261,   262,\n+     263,     0,   264,     0,   265,     0,     0,   268,     0,   270,\n+     271,   272,   273,   274,   275,     0,     0,   276,     0,   278,\n+       0,     0,   280,   281,   282,   283,   284,   285,   286,   287,\n+     507,   289,   290,   291,   292,   293,   294,   295,   296,   297,\n+     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,\n+       0,   309,   310,   311,   312,   313,     0,   314,   315,     0,\n+     317,     0,   318,   319,   320,   321,   322,   323,     0,   324,\n+     325,     0,     0,   326,   327,   328,     0,     0,   329,   330,\n+       0,   332,     0,   334,   335,   336,   337,   338,   339,   340,\n      341,   342,   343,   344,     0,     0,     0,     0,   345,   346,\n-     881,   882,   349,   350,   883,   352,   353,   354,     0,   355,\n-     356,   357,   358,   359,   360,     0,   361,   362,   363,   884,\n+     347,     0,   349,   350,   351,   529,   353,   354,     0,   355,\n+     356,   357,   358,   359,   360,     0,   361,   362,   363,   364,\n      365,   366,   367,   368,     0,   369,   370,   371,   372,   373,\n      374,   375,   376,   377,   378,   379,   380,   381,     0,   382,\n-     383,   885,   385,   386,   387,   886,   389,   390,   391,   392,\n-     393,   394,   395,   396,   397,   398,   399,     0,   887,   400,\n-     401,   402,   403,   404,   405,   888,   407,   408,   409,   889,\n-     411,   412,   890,   414,     0,   415,   416,   417,   418,   419,\n-     420,   421,   422,   423,   424,   425,   426,   891,   428,   892,\n-     430,     0,   431,   432,     0,   433,   893,   435,   436,   437,\n-     438,   439,     0,   894,   895,     0,     0,   442,   443,   896,\n-     445,   897,  1400,   447,   448,   898,   450,   451,   452,   453,\n+     383,     0,   385,   386,   387,   388,   389,   390,   391,   392,\n+     393,   394,   395,   396,   397,   398,   399,     0,     0,   400,\n+     401,   402,   403,   404,   405,   406,   407,   408,   409,     0,\n+     411,   412,   413,   414,     0,   415,   416,   417,   418,   419,\n+     420,   421,   422,   423,   424,   425,   426,   508,   428,   429,\n+     430,     0,   431,   432,     0,   433,     0,   435,   436,   437,\n+     438,   439,     0,   440,   441,     0,     0,   442,   443,   444,\n+     445,   446,     0,   447,   448,   449,   450,   451,   452,   453,\n      454,     0,     0,   455,   456,   457,     0,   458,   459,   460,\n-     461,     0,   462,   463,   464,   465,   466,  1243,   900,     0,\n-     469,   901,   471,   472,   473,   474,   475,     0,     0,   476,\n-       0,     0,   477,   478,   479,   480,   481,   482,   902,   903,\n-     904,   905,   906,   907,   908,   909,   910,   911,   912,   494,\n-     495,   496,   497,   831,     0,     0,     0,     0,     0,     0,\n+     461,     0,   462,   463,   464,   465,   466,   467,   468,     0,\n+     469,     0,   471,   472,   473,   474,   475,     0,     0,   476,\n+       0,     0,   477,   478,   479,   480,   481,   482,   483,   484,\n+     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,\n+     495,   496,   497,   505,     0,   527,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,   110,   111,   112,   113,   114,   115,   116,   117,\n-       0,   118,   119,   120,     3,     4,     0,   832,     0,     0,\n-       0,     0,   833,   122,   123,     0,   124,   125,   126,   834,\n-     128,   129,   130,   835,   836,   837,   838,   839,     0,   136,\n-     137,   138,   139,   140,   141,     0,     0,   142,   143,   840,\n-     841,   146,     0,   147,   148,   149,   150,   842,     0,   843,\n-       0,   844,   154,   155,   156,   157,   158,   845,   160,   161,\n-     162,     0,   163,   164,   165,   166,   167,   168,     0,   846,\n+       0,   118,   119,   120,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,   122,   123,     0,   124,   125,   126,     0,\n+     128,   129,   130,   131,   132,     0,   134,   135,     0,   136,\n+     137,   138,   139,   140,   141,     0,     0,   142,   143,   144,\n+     145,   146,     0,   147,   148,   149,   150,   151,     0,     0,\n+       0,   153,   154,   155,   156,   157,   158,     0,   160,   161,\n+     162,     0,   163,   164,   165,   166,   167,   168,     0,     0,\n      170,   171,   172,   173,   174,   175,   176,   177,   178,   179,\n-     847,   848,   182,     0,   183,     0,   184,   185,   186,   187,\n+     180,   181,   182,     0,   183,     0,   184,   185,   186,   187,\n      188,   189,     0,   190,   191,   192,   193,   194,     0,     0,\n      195,   196,   197,   198,   199,     0,   200,   201,   202,     0,\n-     203,   204,   205,     0,   206,   207,   208,   209,   849,   211,\n-     212,   213,   214,   215,   850,     0,   217,     0,   218,   219,\n-     851,   221,     0,   222,     0,   223,   852,     0,   853,   226,\n-     227,   854,   855,   230,     0,   231,     0,   856,   857,   234,\n-       0,   235,   236,   237,   238,   239,   240,   241,   858,   243,\n+     203,   204,   205,     0,   206,   207,   208,   209,   210,   211,\n+     212,   213,   214,   215,   216,     0,   217,     0,   218,   219,\n+     220,   221,     0,   222,     0,   223,     0,     0,     0,   226,\n+     227,   506,     0,   230,     0,   231,     0,   232,   233,   234,\n+       0,   235,   236,   237,   238,   239,   240,   241,     0,   243,\n      244,   245,   246,     0,   247,   248,   249,   250,   251,   252,\n-     253,     0,   254,   859,   860,   257,   258,   259,   260,   261,\n-     861,   862,     0,   863,     0,   265,   864,   865,   268,   866,\n-     270,   271,   272,   273,   274,   275,     0,     0,   276,   867,\n-     278,   868,     0,   280,   281,   282,   283,   284,   285,   286,\n-     287,   869,   289,   290,   291,   292,   293,   294,   295,   296,\n+     253,     0,   254,     0,   256,   257,   258,   259,   260,   261,\n+     262,   263,     0,   264,     0,   265,     0,     0,   268,     0,\n+     270,   271,   272,   273,   274,   275,     0,     0,   276,     0,\n+     278,     0,     0,   280,   281,   282,   283,   284,   285,   286,\n+     287,   507,   289,   290,   291,   292,   293,   294,   295,   296,\n      297,   298,   299,   300,   301,   302,   303,   304,   305,   306,\n-     870,   871,   872,   310,   311,   312,   873,     0,   314,   315,\n-     874,   317,     0,   875,   319,   876,   321,   322,   323,     0,\n-     324,   325,     0,     0,   326,   327,   328,     0,     0,   329,\n-     877,   878,   332,   879,   880,   335,   336,   337,   338,   339,\n+     307,     0,   309,   310,   311,   312,   313,     0,   314,   315,\n+       0,   317,     0,   318,   319,   320,   321,   322,   323,     0,\n+     324,   325,     0,   605,   326,   327,   328,     0,     0,   329,\n+     330,     0,   332,     0,   334,   335,   336,   337,   338,   339,\n      340,   341,   342,   343,   344,     0,     0,     0,     0,   345,\n-     346,   881,   882,   349,   350,   883,   352,   353,   354,     0,\n+     346,   347,     0,   349,   350,   351,   352,   353,   354,     0,\n      355,   356,   357,   358,   359,   360,     0,   361,   362,   363,\n-     884,   365,   366,   367,   368,     0,   369,   370,   371,   372,\n+     364,   365,   366,   367,   368,     0,   369,   370,   371,   372,\n      373,   374,   375,   376,   377,   378,   379,   380,   381,     0,\n-     382,   383,   885,   385,   386,   387,   886,   389,   390,   391,\n-     392,   393,   394,   395,   396,   397,   398,   399,     0,   887,\n-     400,   401,   402,   403,   404,   405,   888,   407,   408,   409,\n-     889,   411,   412,   890,   414,     0,   415,   416,   417,   418,\n-     419,   420,   421,   422,   423,   424,   425,   426,   891,   428,\n-     892,   430,     0,   431,   432,     0,   433,   893,   435,   436,\n-     437,   438,   439,     0,   894,   895,     0,     0,   442,   443,\n-     896,   445,   897,     0,   447,   448,   898,   450,   451,   452,\n+     382,   383,     0,   385,   386,   387,   388,   389,   390,   391,\n+     392,   393,   394,   395,   396,   397,   398,   399,     0,     0,\n+     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,\n+       0,   411,   412,   413,   414,     0,   415,   416,   417,   418,\n+     419,   420,   421,   422,   423,   424,   425,   426,   508,   428,\n+     429,   430,     0,   431,   432,     0,   433,     0,   435,   436,\n+     437,   438,   439,     0,   440,   441,     0,     0,   442,   443,\n+     444,   445,   446,     0,   447,   448,   449,   450,   451,   452,\n      453,   454,     0,     0,   455,   456,   457,     0,   458,   459,\n-     460,   461,     0,   462,   463,   464,   465,   466,  1243,   900,\n-       0,   469,   901,   471,   472,   473,   474,   475,     0,     0,\n-     476,     0,     0,   477,   478,   479,   480,   481,   482,   902,\n-     903,   904,   905,   906,   907,   908,   909,   910,   911,   912,\n-     494,   495,   496,   497,   109,     0,     0,     0,     0,     0,\n+     460,   461,     0,   462,   463,   464,   465,   466,   467,   468,\n+       0,   469,     0,   471,   472,   473,   474,   475,     0,     0,\n+     476,     0,     0,   477,   478,   479,   480,   481,   482,   483,\n+     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,\n+     494,   495,   496,   497,   505,     0,   527,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,   110,   111,   112,   113,   114,   115,   116,\n      117,     0,   118,   119,   120,     0,     0,     0,     0,     0,\n-       0,     0,     0,   121,   122,   123,     0,   124,   125,   126,\n-     127,   128,   129,   130,   131,   132,   133,   134,   135,     0,\n-     136,   137,   138,   139,   140,   141,     0,   599,   142,   143,\n-     144,   145,   146,     0,   147,   148,   149,   150,   600,     0,\n-     601,     0,   153,   154,   155,   156,   157,   158,   159,   160,\n+       0,     0,     0,     0,   122,   123,     0,   124,   125,   126,\n+       0,   128,   129,   130,   131,   132,     0,   134,   135,     0,\n+     136,   137,   138,   139,   140,   141,     0,     0,   142,   143,\n+     144,   145,   146,     0,   147,   148,   149,   150,   151,     0,\n+       0,     0,   153,   154,   155,   156,   157,   158,     0,   160,\n      161,   162,     0,   163,   164,   165,   166,   167,   168,     0,\n-     169,   170,   171,   172,   173,   174,   175,   176,   177,   178,\n+       0,   170,   171,   172,   173,   174,   175,   176,   177,   178,\n      179,   180,   181,   182,     0,   183,     0,   184,   185,   186,\n      187,   188,   189,     0,   190,   191,   192,   193,   194,     0,\n        0,   195,   196,   197,   198,   199,     0,   200,   201,   202,\n        0,   203,   204,   205,     0,   206,   207,   208,   209,   210,\n-     211,   212,   213,   214,   215,   602,     0,   217,     0,   218,\n-     219,   220,   221,     0,   222,     0,   223,   224,     0,   225,\n-     226,   227,   228,   229,   230,     0,   231,     0,   232,   233,\n-     234,     0,   235,   236,   237,   238,   239,   240,   241,   242,\n+     211,   212,   213,   214,   215,   216,     0,   217,     0,   218,\n+     219,   220,   221,     0,   222,     0,   223,     0,     0,     0,\n+     226,   227,   506,     0,   230,     0,   231,     0,   232,   233,\n+     234,     0,   235,   236,   237,   238,   239,   709,   241,     0,\n      243,   244,   245,   246,     0,   247,   248,   249,   250,   251,\n-     252,   253,     0,   254,   255,   256,   257,   258,   259,   260,\n-     261,   262,   263,     0,   264,     0,   265,   266,   267,   268,\n-     269,   270,   271,   272,   273,   274,   275,     0,     0,   276,\n-     277,   278,   279,     0,   280,   281,   282,   283,   284,   285,\n-     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,\n+     252,   253,     0,   254,     0,   256,   257,   258,   259,   260,\n+     261,   262,   263,     0,   264,     0,   265,     0,     0,   268,\n+       0,   270,   271,   272,   273,   274,   275,     0,     0,   276,\n+       0,   278,     0,     0,   280,   281,   282,   283,   284,   285,\n+     286,   287,   507,   289,   290,   291,   292,   293,   294,   295,\n      296,   297,   298,   299,   300,   301,   302,   303,   304,   305,\n-     306,   307,   308,   309,   310,   311,   312,   313,     0,   314,\n-     315,   316,   317,     0,   604,   319,   320,   321,   322,   323,\n-       0,   324,   325,     0,     0,   326,   327,   328,     0,     0,\n-     329,   330,   331,   332,   333,   606,   335,   336,   337,   338,\n+     306,   307,     0,   309,   310,   311,   312,   313,     0,   314,\n+     315,     0,   317,     0,   318,   319,   320,   321,   322,   323,\n+       0,   324,   325,     0,   605,   326,   327,   328,     0,     0,\n+     329,   330,     0,   332,     0,   334,   335,   336,   337,   338,\n      339,   340,   341,   342,   343,   344,     0,     0,     0,     0,\n-     345,   346,   607,   348,   349,   350,   351,   352,   353,   354,\n+     345,   346,   347,     0,   349,   350,   351,   352,   353,   354,\n        0,   355,   356,   357,   358,   359,   360,     0,   361,   362,\n      363,   364,   365,   366,   367,   368,     0,   369,   370,   371,\n      372,   373,   374,   375,   376,   377,   378,   379,   380,   381,\n-       0,   382,   383,   384,   385,   386,   387,   388,   389,   390,\n+       0,   382,   383,     0,   385,   386,   387,   388,   389,   390,\n      391,   392,   393,   394,   395,   396,   397,   398,   399,     0,\n        0,   400,   401,   402,   403,   404,   405,   406,   407,   408,\n-     409,   410,   411,   412,   413,   414,     0,   415,   416,   417,\n-     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,\n-     428,   609,   430,     0,   431,   432,     0,   433,   434,   435,\n+     409,     0,   411,   412,   413,   414,     0,   415,   416,   417,\n+     418,   419,   420,   421,   422,   423,   424,   425,   426,   508,\n+     428,   429,   430,     0,   431,   432,     0,   433,     0,   435,\n      436,   437,   438,   439,     0,   440,   441,     0,     0,   442,\n-     443,   610,   445,   611,     0,   447,   448,   612,   450,   451,\n+     443,   444,   445,   446,     0,   447,   448,   449,   450,   451,\n      452,   453,   454,     0,     0,   455,   456,   457,     0,   458,\n      459,   460,   461,     0,   462,   463,   464,   465,   466,   467,\n-     468,     0,   469,   470,   471,   472,   473,   474,   475,     0,\n+     468,     0,   469,     0,   471,   472,   473,   474,   475,     0,\n        0,   476,     0,     0,   477,   478,   479,   480,   481,   482,\n      483,   484,   485,   486,   487,   488,   489,   490,   491,   492,\n-     493,   494,   495,   496,   497,   109,     0,     0,     0,     0,\n+     493,   494,   495,   496,   497,   505,     0,   527,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,   110,   111,   112,   113,   114,   115,\n-     116,   117,     0,   118,   119,   120,     0,     0,     0,     0,\n-       0,     0,     0,     0,   121,   122,   123,     0,   124,   125,\n-     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,\n+     116,   117,   737,   118,   119,   120,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,   122,   123,     0,   124,   125,\n+     126,     0,   128,   129,   130,   131,   132,     0,   134,   135,\n        0,   136,   137,   138,   139,   140,   141,     0,     0,   142,\n      143,   144,   145,   146,     0,   147,   148,   149,   150,   151,\n-       0,   152,     0,   153,   154,   155,   156,   157,   158,   159,\n+       0,     0,     0,   153,   154,   155,   156,   157,   158,     0,\n      160,   161,   162,     0,   163,   164,   165,   166,   167,   168,\n-       0,   169,   170,   171,   172,   173,   174,   175,   176,   177,\n+       0,     0,   170,   171,   172,   173,   174,   175,   176,   177,\n      178,   179,   180,   181,   182,     0,   183,     0,   184,   185,\n      186,   187,   188,   189,     0,   190,   191,   192,   193,   194,\n        0,     0,   195,   196,   197,   198,   199,     0,   200,   201,\n      202,     0,   203,   204,   205,     0,   206,   207,   208,   209,\n      210,   211,   212,   213,   214,   215,   216,     0,   217,     0,\n-     218,   219,   220,   221,     0,   222,     0,   223,   224,     0,\n-     225,   226,   227,   228,   229,   230,     0,   231,     0,   232,\n+     218,   219,   220,   221,     0,   222,     0,   223,     0,     0,\n+       0,   226,   227,   506,     0,   230,     0,   231,     0,   232,\n      233,   234,     0,   235,   236,   237,   238,   239,   240,   241,\n-     242,   243,   244,   245,   246,     0,   247,   248,   249,   250,\n-     251,   252,   253,     0,   254,   255,   256,   257,   258,   259,\n-     260,   261,   262,   263,     0,   264,     0,   265,   266,   267,\n-     268,   269,   270,   271,   272,   273,   274,   275,     0,     0,\n-     276,   277,   278,   279,     0,   280,   281,   282,   283,   284,\n-     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,\n+       0,   243,   244,   245,   246,     0,   247,   248,   249,   250,\n+     251,   252,   253,     0,   254,     0,   256,   257,   258,   259,\n+     260,   261,   262,   263,     0,   264,     0,   265,     0,     0,\n+     268,     0,   270,   271,   272,   273,   274,   275,     0,     0,\n+     276,     0,   278,     0,     0,   280,   281,   282,   283,   284,\n+     285,   286,   287,   507,   289,   290,   291,   292,   293,   294,\n      295,   296,   297,   298,   299,   300,   301,   302,   303,   304,\n-     305,   306,   307,   308,   309,   310,   311,   312,   313,     0,\n-     314,   315,   316,   317,     0,   318,   319,   320,   321,   322,\n+     305,   306,   307,     0,   309,   310,   311,   312,   313,     0,\n+     314,   315,     0,   317,     0,   318,   319,   320,   321,   322,\n      323,     0,   324,   325,     0,     0,   326,   327,   328,     0,\n-       0,   329,   330,   331,   332,   333,   334,   335,   336,   337,\n+       0,   329,   330,     0,   332,     0,   334,   335,   336,   337,\n      338,   339,   340,   341,   342,   343,   344,     0,     0,     0,\n-       0,   345,   346,   347,   348,   349,   350,   351,   352,   353,\n+       0,   345,   346,   347,     0,   349,   350,   351,   352,   353,\n      354,     0,   355,   356,   357,   358,   359,   360,     0,   361,\n      362,   363,   364,   365,   366,   367,   368,     0,   369,   370,\n      371,   372,   373,   374,   375,   376,   377,   378,   379,   380,\n-     381,     0,   382,   383,   384,   385,   386,   387,   388,   389,\n+     381,     0,   382,   383,     0,   385,   386,   387,   388,   389,\n      390,   391,   392,   393,   394,   395,   396,   397,   398,   399,\n        0,     0,   400,   401,   402,   403,   404,   405,   406,   407,\n-     408,   409,   410,   411,   412,   413,   414,     0,   415,   416,\n+     408,   409,     0,   411,   412,   413,   414,     0,   415,   416,\n      417,   418,   419,   420,   421,   422,   423,   424,   425,   426,\n-     427,   428,   429,   430,     0,   431,   432,     0,   433,   434,\n+     508,   428,   429,   430,     0,   431,   432,     0,   433,     0,\n      435,   436,   437,   438,   439,     0,   440,   441,     0,     0,\n      442,   443,   444,   445,   446,     0,   447,   448,   449,   450,\n      451,   452,   453,   454,     0,     0,   455,   456,   457,     0,\n      458,   459,   460,   461,     0,   462,   463,   464,   465,   466,\n-     467,   468,     0,   469,   470,   471,   472,   473,   474,   475,\n+     467,   468,     0,   469,     0,   471,   472,   473,   474,   475,\n        0,     0,   476,     0,     0,   477,   478,   479,   480,   481,\n      482,   483,   484,   485,   486,   487,   488,   489,   490,   491,\n-     492,   493,   494,   495,   496,   497,   505,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+     492,   493,   494,   495,   496,   497,   505,  1896,     0,     0,\n+       0,     0,  1897,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,   110,   111,   112,   113,   114,\n      115,   116,   117,     0,   118,   119,   120,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,   122,   123,     0,   124,\n      125,   126,     0,   128,   129,   130,   131,   132,     0,   134,\n      135,     0,   136,   137,   138,   139,   140,   141,     0,     0,\n-     142,   143,   144,   145,   146,  1675,   147,   148,   149,   150,\n-     151,     0,     0,  1676,   153,   154,   155,   156,   157,   158,\n-       0,   160,   161,   162,  1677,   163,   164,   165,   166,   167,\n+     142,   143,   144,   145,   146,     0,   147,   148,   149,   150,\n+     151,     0,     0,     0,   153,   154,   155,   156,   157,   158,\n+       0,   160,   161,   162,     0,   163,   164,   165,   166,   167,\n      168,     0,     0,   170,   171,   172,   173,   174,   175,   176,\n      177,   178,   179,   180,   181,   182,     0,   183,     0,   184,\n      185,   186,   187,   188,   189,     0,   190,   191,   192,   193,\n      194,     0,     0,   195,   196,   197,   198,   199,     0,   200,\n      201,   202,     0,   203,   204,   205,     0,   206,   207,   208,\n      209,   210,   211,   212,   213,   214,   215,   216,     0,   217,\n-       0,   218,   219,   220,   221,     0,   222,  1678,   223,     0,\n+       0,   218,   219,   220,   221,     0,   222,     0,   223,     0,\n        0,     0,   226,   227,   506,     0,   230,     0,   231,     0,\n-     232,   233,   234,     0,   235,   236,   237,   238,   239,  1679,\n+     232,   233,   234,     0,   235,   236,   237,   238,   239,   240,\n      241,     0,   243,   244,   245,   246,     0,   247,   248,   249,\n      250,   251,   252,   253,     0,   254,     0,   256,   257,   258,\n      259,   260,   261,   262,   263,     0,   264,     0,   265,     0,\n@@ -8759,7 +9104,7 @@ static const yytype_int16 yytable[] =\n        0,     0,   329,   330,     0,   332,     0,   334,   335,   336,\n      337,   338,   339,   340,   341,   342,   343,   344,     0,     0,\n        0,     0,   345,   346,   347,     0,   349,   350,   351,   352,\n-     353,   354,  1680,   355,   356,   357,   358,   359,   360,     0,\n+     353,   354,     0,   355,   356,   357,   358,   359,   360,     0,\n      361,   362,   363,   364,   365,   366,   367,   368,     0,   369,\n      370,   371,   372,   373,   374,   375,   376,   377,   378,   379,\n      380,   381,     0,   382,   383,     0,   385,   386,   387,   388,\n@@ -8770,35 +9115,35 @@ static const yytype_int16 yytable[] =\n      426,   508,   428,   429,   430,     0,   431,   432,     0,   433,\n        0,   435,   436,   437,   438,   439,     0,   440,   441,     0,\n        0,   442,   443,   444,   445,   446,     0,   447,   448,   449,\n-     450,   451,   452,   453,   454,     0,  1681,   455,   456,   457,\n+     450,   451,   452,   453,   454,     0,     0,   455,   456,   457,\n        0,   458,   459,   460,   461,     0,   462,   463,   464,   465,\n      466,   467,   468,     0,   469,     0,   471,   472,   473,   474,\n      475,     0,     0,   476,     0,     0,   477,   478,   479,   480,\n      481,   482,   483,   484,   485,   486,   487,   488,   489,   490,\n-     491,   492,   493,   494,   495,   496,   497,   505,     0,     0,\n+     491,   492,   493,   494,   495,   496,   497,   505,     0,   527,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,   110,   111,   112,   113,\n      114,   115,   116,   117,     0,   118,   119,   120,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,   122,   123,     0,\n      124,   125,   126,     0,   128,   129,   130,   131,   132,     0,\n      134,   135,     0,   136,   137,   138,   139,   140,   141,     0,\n-       0,   142,   143,   144,   145,   146,  1675,   147,   148,   149,\n+       0,   142,   143,   144,   145,   146,     0,   147,   148,   149,\n      150,   151,     0,     0,     0,   153,   154,   155,   156,   157,\n-     158,     0,   160,   161,   162,  1677,   163,   164,   165,   166,\n+     158,     0,   160,   161,   162,     0,   163,   164,   165,   166,\n      167,   168,     0,     0,   170,   171,   172,   173,   174,   175,\n      176,   177,   178,   179,   180,   181,   182,     0,   183,     0,\n      184,   185,   186,   187,   188,   189,     0,   190,   191,   192,\n      193,   194,     0,     0,   195,   196,   197,   198,   199,     0,\n      200,   201,   202,     0,   203,   204,   205,     0,   206,   207,\n      208,   209,   210,   211,   212,   213,   214,   215,   216,     0,\n-     217,     0,   218,   219,   220,   221,     0,   222,  1678,   223,\n-       0,     0,     0,   226,   227,   506,     0,   230,     0,   231,\n+     217,     0,   218,   219,   220,   221,     0,   222,     0,   223,\n+       0,     0,     0,   226,   227,   506,     0,  1904,     0,   231,\n        0,   232,   233,   234,     0,   235,   236,   237,   238,   239,\n      240,   241,     0,   243,   244,   245,   246,     0,   247,   248,\n      249,   250,   251,   252,   253,     0,   254,     0,   256,   257,\n      258,   259,   260,   261,   262,   263,     0,   264,     0,   265,\n        0,     0,   268,     0,   270,   271,   272,   273,   274,   275,\n-       0,     0,   276,     0,   278,  2216,     0,   280,   281,   282,\n+       0,     0,   276,     0,   278,     0,     0,   280,   281,  1905,\n      283,   284,   285,   286,   287,   507,   289,   290,   291,   292,\n      293,   294,   295,   296,   297,   298,   299,   300,   301,   302,\n      303,   304,   305,   306,   307,     0,   309,   310,   311,   312,\n@@ -8807,7 +9152,7 @@ static const yytype_int16 yytable[] =\n      328,     0,     0,   329,   330,     0,   332,     0,   334,   335,\n      336,   337,   338,   339,   340,   341,   342,   343,   344,     0,\n        0,     0,     0,   345,   346,   347,     0,   349,   350,   351,\n-     352,   353,   354,  1680,   355,   356,   357,   358,   359,   360,\n+     352,   353,   354,     0,   355,   356,   357,   358,   359,   360,\n        0,   361,   362,   363,   364,   365,   366,   367,   368,     0,\n      369,   370,   371,   372,   373,   374,   375,   376,   377,   378,\n      379,   380,   381,     0,   382,   383,     0,   385,   386,   387,\n@@ -8815,19 +9160,19 @@ static const yytype_int16 yytable[] =\n      398,   399,     0,     0,   400,   401,   402,   403,   404,   405,\n      406,   407,   408,   409,     0,   411,   412,   413,   414,     0,\n      415,   416,   417,   418,   419,   420,   421,   422,   423,   424,\n-     425,   426,   508,   428,   429,   430,     0,   431,   432,     0,\n-     433,     0,   435,   436,   437,   438,   439,     0,   440,   441,\n+     425,   426,   508,   428,   429,   430,     0,   431,   432,  1906,\n+     433,     0,   435,  1907,   437,  1908,   439,     0,   440,   441,\n        0,     0,   442,   443,   444,   445,   446,     0,   447,   448,\n-     449,   450,   451,   452,   453,   454,     0,  1681,   455,   456,\n-     457,     0,   458,   459,   460,   461,     0,   462,   463,   464,\n+     449,   450,   451,   452,   453,   454,     0,     0,   455,   456,\n+    1909,     0,   458,   459,   460,   461,     0,   462,   463,   464,\n      465,   466,   467,   468,     0,   469,     0,   471,   472,   473,\n      474,   475,     0,     0,   476,     0,     0,   477,   478,   479,\n      480,   481,   482,   483,   484,   485,   486,   487,   488,   489,\n      490,   491,   492,   493,   494,   495,   496,   497,   505,     0,\n      527,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,   110,   111,   112,\n-     113,   114,   115,   116,   117,     0,   118,   119,   120,     3,\n-       4,     0,     0,     0,     0,     0,     0,     0,   122,   123,\n+     113,   114,   115,   116,   117,     0,   118,   119,   120,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,   122,   123,\n        0,   124,   125,   126,     0,   128,   129,   130,   131,   132,\n        0,   134,   135,     0,   136,   137,   138,   139,   140,   141,\n        0,     0,   142,   143,   144,   145,   146,     0,   147,   148,\n@@ -8872,9 +9217,9 @@ static const yytype_int16 yytable[] =\n      473,   474,   475,     0,     0,   476,     0,     0,   477,   478,\n      479,   480,   481,   482,   483,   484,   485,   486,   487,   488,\n      489,   490,   491,   492,   493,   494,   495,   496,   497,   505,\n-       0,   527,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,   629,     0,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,   110,   111,\n-     112,   113,   114,   115,   116,   117,   528,   118,   119,   120,\n+     112,   113,   114,   115,   116,   117,     0,   118,   119,   120,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,   122,\n      123,     0,   124,   125,   126,     0,   128,   129,   130,   131,\n      132,     0,   134,   135,     0,   136,   137,   138,   139,   140,\n@@ -8903,7 +9248,7 @@ static const yytype_int16 yytable[] =\n      326,   327,   328,     0,     0,   329,   330,     0,   332,     0,\n      334,   335,   336,   337,   338,   339,   340,   341,   342,   343,\n      344,     0,     0,     0,     0,   345,   346,   347,     0,   349,\n-     350,   351,   529,   353,   354,     0,   355,   356,   357,   358,\n+     350,   351,   352,   353,   354,     0,   355,   356,   357,   358,\n      359,   360,     0,   361,   362,   363,   364,   365,   366,   367,\n      368,     0,   369,   370,   371,   372,   373,   374,   375,   376,\n      377,   378,   379,   380,   381,     0,   382,   383,     0,   385,\n@@ -8920,9 +9265,9 @@ static const yytype_int16 yytable[] =\n      472,   473,   474,   475,     0,     0,   476,     0,     0,   477,\n      478,   479,   480,   481,   482,   483,   484,   485,   486,   487,\n      488,   489,   490,   491,   492,   493,   494,   495,   496,   497,\n-     505,     0,   527,     0,     0,     0,     0,     0,     0,     0,\n+     505,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,   110,\n-     111,   112,   113,   114,   115,   116,   117,     0,   118,   119,\n+     111,   112,   113,   114,   115,   116,   117,   636,   118,   119,\n      120,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n      122,   123,     0,   124,   125,   126,     0,   128,   129,   130,\n      131,   132,     0,   134,   135,     0,   136,   137,   138,   139,\n@@ -8937,18 +9282,18 @@ static const yytype_int16 yytable[] =\n        0,   206,   207,   208,   209,   210,   211,   212,   213,   214,\n      215,   216,     0,   217,     0,   218,   219,   220,   221,     0,\n      222,     0,   223,     0,     0,     0,   226,   227,   506,     0,\n-     230,     0,   231,     0,   232,   233,   234,     0,   235,   236,\n+     637,     0,   231,     0,   232,   233,   234,     0,   235,   236,\n      237,   238,   239,   240,   241,     0,   243,   244,   245,   246,\n        0,   247,   248,   249,   250,   251,   252,   253,     0,   254,\n        0,   256,   257,   258,   259,   260,   261,   262,   263,     0,\n      264,     0,   265,     0,     0,   268,     0,   270,   271,   272,\n      273,   274,   275,     0,     0,   276,     0,   278,     0,     0,\n-     280,   281,   282,   283,   284,   285,   286,   287,   507,   289,\n+     280,   281,   638,   283,   284,   285,   286,   287,   507,   289,\n      290,   291,   292,   293,   294,   295,   296,   297,   298,   299,\n      300,   301,   302,   303,   304,   305,   306,   307,     0,   309,\n      310,   311,   312,   313,     0,   314,   315,     0,   317,     0,\n      318,   319,   320,   321,   322,   323,     0,   324,   325,     0,\n-     605,   326,   327,   328,     0,     0,   329,   330,     0,   332,\n+       0,   326,   327,   328,     0,     0,   329,   330,     0,   332,\n        0,   334,   335,   336,   337,   338,   339,   340,   341,   342,\n      343,   344,     0,     0,     0,     0,   345,   346,   347,     0,\n      349,   350,   351,   352,   353,   354,     0,   355,   356,   357,\n@@ -8957,11 +9302,11 @@ static const yytype_int16 yytable[] =\n      376,   377,   378,   379,   380,   381,     0,   382,   383,     0,\n      385,   386,   387,   388,   389,   390,   391,   392,   393,   394,\n      395,   396,   397,   398,   399,     0,     0,   400,   401,   402,\n-     403,   404,   405,   406,   407,   408,   409,     0,   411,   412,\n+     403,   639,   405,   406,   407,   408,   409,     0,   411,   412,\n      413,   414,     0,   415,   416,   417,   418,   419,   420,   421,\n      422,   423,   424,   425,   426,   508,   428,   429,   430,     0,\n      431,   432,     0,   433,     0,   435,   436,   437,   438,   439,\n-       0,   440,   441,     0,     0,   442,   443,   444,   445,   446,\n+       0,   640,   441,     0,     0,   641,   443,   444,   445,   446,\n        0,   447,   448,   449,   450,   451,   452,   453,   454,     0,\n        0,   455,   456,   457,     0,   458,   459,   460,   461,     0,\n      462,   463,   464,   465,   466,   467,   468,     0,   469,     0,\n@@ -8986,7 +9331,7 @@ static const yytype_int16 yytable[] =\n      214,   215,   216,     0,   217,     0,   218,   219,   220,   221,\n        0,   222,     0,   223,     0,     0,     0,   226,   227,   506,\n        0,   230,     0,   231,     0,   232,   233,   234,     0,   235,\n-     236,   237,   238,   239,   706,   241,     0,   243,   244,   245,\n+     236,   237,   238,   239,   240,   241,     0,   243,   244,   245,\n      246,     0,   247,   248,   249,   250,   251,   252,   253,     0,\n      254,     0,   256,   257,   258,   259,   260,   261,   262,   263,\n        0,   264,     0,   265,     0,     0,   268,     0,   270,   271,\n@@ -8996,12 +9341,12 @@ static const yytype_int16 yytable[] =\n      299,   300,   301,   302,   303,   304,   305,   306,   307,     0,\n      309,   310,   311,   312,   313,     0,   314,   315,     0,   317,\n        0,   318,   319,   320,   321,   322,   323,     0,   324,   325,\n-       0,   605,   326,   327,   328,     0,     0,   329,   330,     0,\n+       0,     0,   326,   327,   328,     0,     0,   329,   330,     0,\n      332,     0,   334,   335,   336,   337,   338,   339,   340,   341,\n      342,   343,   344,     0,     0,     0,     0,   345,   346,   347,\n        0,   349,   350,   351,   352,   353,   354,     0,   355,   356,\n      357,   358,   359,   360,     0,   361,   362,   363,   364,   365,\n-     366,   367,   368,     0,   369,   370,   371,   372,   373,   374,\n+     366,   673,   368,     0,   369,   370,   371,   372,   373,   374,\n      375,   376,   377,   378,   379,   380,   381,     0,   382,   383,\n        0,   385,   386,   387,   388,   389,   390,   391,   392,   393,\n      394,   395,   396,   397,   398,   399,     0,     0,   400,   401,\n@@ -9018,7 +9363,7 @@ static const yytype_int16 yytable[] =\n      486,   487,   488,   489,   490,   491,   492,   493,   494,   495,\n      496,   497,   505,     0,   527,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,   110,   111,   112,   113,   114,   115,   116,   117,   734,\n+       0,   110,   111,   112,   113,   114,   115,   116,   117,     0,\n      118,   119,   120,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,   122,   123,     0,   124,   125,   126,     0,   128,\n      129,   130,   131,   132,     0,   134,   135,     0,   136,   137,\n@@ -9034,7 +9379,7 @@ static const yytype_int16 yytable[] =\n      213,   214,   215,   216,     0,   217,     0,   218,   219,   220,\n      221,     0,   222,     0,   223,     0,     0,     0,   226,   227,\n      506,     0,   230,     0,   231,     0,   232,   233,   234,     0,\n-     235,   236,   237,   238,   239,   240,   241,     0,   243,   244,\n+     235,   236,   237,   238,   239,   704,   241,     0,   243,   244,\n      245,   246,     0,   247,   248,   249,   250,   251,   252,   253,\n        0,   254,     0,   256,   257,   258,   259,   260,   261,   262,\n      263,     0,   264,     0,   265,     0,     0,   268,     0,   270,\n@@ -9064,7 +9409,7 @@ static const yytype_int16 yytable[] =\n      469,     0,   471,   472,   473,   474,   475,     0,     0,   476,\n        0,     0,   477,   478,   479,   480,   481,   482,   483,   484,\n      485,   486,   487,   488,   489,   490,   491,   492,   493,   494,\n-     495,   496,   497,   505,  1889,     0,     0,     0,     0,  1890,\n+     495,   496,   497,   505,     0,   527,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,   110,   111,   112,   113,   114,   115,   116,   117,\n        0,   118,   119,   120,     0,     0,     0,     0,     0,     0,\n@@ -9082,7 +9427,7 @@ static const yytype_int16 yytable[] =\n      212,   213,   214,   215,   216,     0,   217,     0,   218,   219,\n      220,   221,     0,   222,     0,   223,     0,     0,     0,   226,\n      227,   506,     0,   230,     0,   231,     0,   232,   233,   234,\n-       0,   235,   236,   237,   238,   239,   240,   241,     0,   243,\n+       0,   235,   236,   237,   238,   239,   707,   241,     0,   243,\n      244,   245,   246,     0,   247,   248,   249,   250,   251,   252,\n      253,     0,   254,     0,   256,   257,   258,   259,   260,   261,\n      262,   263,     0,   264,     0,   265,     0,     0,   268,     0,\n@@ -9129,13 +9474,13 @@ static const yytype_int16 yytable[] =\n        0,   203,   204,   205,     0,   206,   207,   208,   209,   210,\n      211,   212,   213,   214,   215,   216,     0,   217,     0,   218,\n      219,   220,   221,     0,   222,     0,   223,     0,     0,     0,\n-     226,   227,   506,     0,  1897,     0,   231,     0,   232,   233,\n-     234,     0,   235,   236,   237,   238,   239,   240,   241,     0,\n+     226,   227,   506,     0,   230,     0,   231,     0,   232,   233,\n+     234,     0,   235,   236,   237,   238,   239,   711,   241,     0,\n      243,   244,   245,   246,     0,   247,   248,   249,   250,   251,\n      252,   253,     0,   254,     0,   256,   257,   258,   259,   260,\n      261,   262,   263,     0,   264,     0,   265,     0,     0,   268,\n        0,   270,   271,   272,   273,   274,   275,     0,     0,   276,\n-       0,   278,     0,     0,   280,   281,  1898,   283,   284,   285,\n+       0,   278,     0,     0,   280,   281,   282,   283,   284,   285,\n      286,   287,   507,   289,   290,   291,   292,   293,   294,   295,\n      296,   297,   298,   299,   300,   301,   302,   303,   304,   305,\n      306,   307,     0,   309,   310,   311,   312,   313,     0,   314,\n@@ -9152,10 +9497,10 @@ static const yytype_int16 yytable[] =\n        0,   400,   401,   402,   403,   404,   405,   406,   407,   408,\n      409,     0,   411,   412,   413,   414,     0,   415,   416,   417,\n      418,   419,   420,   421,   422,   423,   424,   425,   426,   508,\n-     428,   429,   430,     0,   431,   432,  1899,   433,     0,   435,\n-    1900,   437,  1901,   439,     0,   440,   441,     0,     0,   442,\n+     428,   429,   430,     0,   431,   432,     0,   433,     0,   435,\n+     436,   437,   438,   439,     0,   440,   441,     0,     0,   442,\n      443,   444,   445,   446,     0,   447,   448,   449,   450,   451,\n-     452,   453,   454,     0,     0,   455,   456,  1902,     0,   458,\n+     452,   453,   454,     0,     0,   455,   456,   457,     0,   458,\n      459,   460,   461,     0,   462,   463,   464,   465,   466,   467,\n      468,     0,   469,     0,   471,   472,   473,   474,   475,     0,\n        0,   476,     0,     0,   477,   478,   479,   480,   481,   482,\n@@ -9178,7 +9523,7 @@ static const yytype_int16 yytable[] =\n      210,   211,   212,   213,   214,   215,   216,     0,   217,     0,\n      218,   219,   220,   221,     0,   222,     0,   223,     0,     0,\n        0,   226,   227,   506,     0,   230,     0,   231,     0,   232,\n-     233,   234,     0,   235,   236,   237,   238,   239,   240,   241,\n+     233,   234,     0,   235,   236,   237,   238,   239,   726,   241,\n        0,   243,   244,   245,   246,     0,   247,   248,   249,   250,\n      251,   252,   253,     0,   254,     0,   256,   257,   258,   259,\n      260,   261,   262,   263,     0,   264,     0,   265,     0,     0,\n@@ -9208,7 +9553,7 @@ static const yytype_int16 yytable[] =\n      467,   468,     0,   469,     0,   471,   472,   473,   474,   475,\n        0,     0,   476,     0,     0,   477,   478,   479,   480,   481,\n      482,   483,   484,   485,   486,   487,   488,   489,   490,   491,\n-     492,   493,   494,   495,   496,   497,   505,     0,   629,     0,\n+     492,   493,   494,   495,   496,   497,   505,     0,   527,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,   110,   111,   112,   113,   114,\n      115,   116,   117,     0,   118,   119,   120,     0,     0,     0,\n@@ -9226,7 +9571,7 @@ static const yytype_int16 yytable[] =\n      209,   210,   211,   212,   213,   214,   215,   216,     0,   217,\n        0,   218,   219,   220,   221,     0,   222,     0,   223,     0,\n        0,     0,   226,   227,   506,     0,   230,     0,   231,     0,\n-     232,   233,   234,     0,   235,   236,   237,   238,   239,   240,\n+     232,   233,   234,     0,   235,   236,   237,   238,   239,   826,\n      241,     0,   243,   244,   245,   246,     0,   247,   248,   249,\n      250,   251,   252,   253,     0,   254,     0,   256,   257,   258,\n      259,   260,   261,   262,   263,     0,   264,     0,   265,     0,\n@@ -9256,10 +9601,10 @@ static const yytype_int16 yytable[] =\n      466,   467,   468,     0,   469,     0,   471,   472,   473,   474,\n      475,     0,     0,   476,     0,     0,   477,   478,   479,   480,\n      481,   482,   483,   484,   485,   486,   487,   488,   489,   490,\n-     491,   492,   493,   494,   495,   496,   497,   505,     0,     0,\n+     491,   492,   493,   494,   495,   496,   497,   505,     0,   527,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,   110,   111,   112,   113,\n-     114,   115,   116,   117,   636,   118,   119,   120,     0,     0,\n+     114,   115,   116,   117,     0,   118,   119,   120,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,   122,   123,     0,\n      124,   125,   126,     0,   128,   129,   130,   131,   132,     0,\n      134,   135,     0,   136,   137,   138,   139,   140,   141,     0,\n@@ -9275,7 +9620,7 @@ static const yytype_int16 yytable[] =\n      217,     0,   218,   219,   220,   221,     0,   222,     0,   223,\n        0,     0,     0,   226,   227,   506,     0,   230,     0,   231,\n        0,   232,   233,   234,     0,   235,   236,   237,   238,   239,\n-     240,   241,     0,   243,   244,   245,   246,     0,   247,   248,\n+     829,   241,     0,   243,   244,   245,   246,     0,   247,   248,\n      249,   250,   251,   252,   253,     0,   254,     0,   256,   257,\n      258,   259,   260,   261,   262,   263,     0,   264,     0,   265,\n        0,     0,   268,     0,   270,   271,   272,   273,   274,   275,\n@@ -9297,18 +9642,18 @@ static const yytype_int16 yytable[] =\n      406,   407,   408,   409,     0,   411,   412,   413,   414,     0,\n      415,   416,   417,   418,   419,   420,   421,   422,   423,   424,\n      425,   426,   508,   428,   429,   430,     0,   431,   432,     0,\n-     433,     0,   435,   436,   437,   438,   439,     0,   637,   441,\n-       0,     0,   638,   443,   444,   445,   446,     0,   447,   448,\n+     433,     0,   435,   436,   437,   438,   439,     0,   440,   441,\n+       0,     0,   442,   443,   444,   445,   446,     0,   447,   448,\n      449,   450,   451,   452,   453,   454,     0,     0,   455,   456,\n      457,     0,   458,   459,   460,   461,     0,   462,   463,   464,\n      465,   466,   467,   468,     0,   469,     0,   471,   472,   473,\n      474,   475,     0,     0,   476,     0,     0,   477,   478,   479,\n      480,   481,   482,   483,   484,   485,   486,   487,   488,   489,\n      490,   491,   492,   493,   494,   495,   496,   497,   505,     0,\n-     527,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,   110,   111,   112,\n      113,   114,   115,   116,   117,     0,   118,   119,   120,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,   122,   123,\n+       0,     0,     0,     0,     0,   950,     0,     0,   122,   123,\n        0,   124,   125,   126,     0,   128,   129,   130,   131,   132,\n        0,   134,   135,     0,   136,   137,   138,   139,   140,   141,\n        0,     0,   142,   143,   144,   145,   146,     0,   147,   148,\n@@ -9337,7 +9682,7 @@ static const yytype_int16 yytable[] =\n      335,   336,   337,   338,   339,   340,   341,   342,   343,   344,\n        0,     0,     0,     0,   345,   346,   347,     0,   349,   350,\n      351,   352,   353,   354,     0,   355,   356,   357,   358,   359,\n-     360,     0,   361,   362,   363,   364,   365,   366,   670,   368,\n+     360,     0,   361,   362,   363,   364,   365,   366,   367,   368,\n        0,   369,   370,   371,   372,   373,   374,   375,   376,   377,\n      378,   379,   380,   381,     0,   382,   383,     0,   385,   386,\n      387,   388,   389,   390,   391,   392,   393,   394,   395,   396,\n@@ -9353,10 +9698,10 @@ static const yytype_int16 yytable[] =\n      473,   474,   475,     0,     0,   476,     0,     0,   477,   478,\n      479,   480,   481,   482,   483,   484,   485,   486,   487,   488,\n      489,   490,   491,   492,   493,   494,   495,   496,   497,   505,\n-       0,   527,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,   110,   111,\n      112,   113,   114,   115,   116,   117,     0,   118,   119,   120,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,   122,\n+       0,     0,     0,     0,     0,     0,   973,     0,     0,   122,\n      123,     0,   124,   125,   126,     0,   128,   129,   130,   131,\n      132,     0,   134,   135,     0,   136,   137,   138,   139,   140,\n      141,     0,     0,   142,   143,   144,   145,   146,     0,   147,\n@@ -9371,7 +9716,7 @@ static const yytype_int16 yytable[] =\n      216,     0,   217,     0,   218,   219,   220,   221,     0,   222,\n        0,   223,     0,     0,     0,   226,   227,   506,     0,   230,\n        0,   231,     0,   232,   233,   234,     0,   235,   236,   237,\n-     238,   239,   701,   241,     0,   243,   244,   245,   246,     0,\n+     238,   239,   240,   241,     0,   243,   244,   245,   246,     0,\n      247,   248,   249,   250,   251,   252,   253,     0,   254,     0,\n      256,   257,   258,   259,   260,   261,   262,   263,     0,   264,\n        0,   265,     0,     0,   268,     0,   270,   271,   272,   273,\n@@ -9401,9 +9746,9 @@ static const yytype_int16 yytable[] =\n      472,   473,   474,   475,     0,     0,   476,     0,     0,   477,\n      478,   479,   480,   481,   482,   483,   484,   485,   486,   487,\n      488,   489,   490,   491,   492,   493,   494,   495,   496,   497,\n-     505,     0,   527,     0,     0,     0,     0,     0,     0,     0,\n+     505,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,   110,\n-     111,   112,   113,   114,   115,   116,   117,     0,   118,   119,\n+     111,   112,   113,   114,   115,   116,   117,   636,   118,   119,\n      120,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n      122,   123,     0,   124,   125,   126,     0,   128,   129,   130,\n      131,   132,     0,   134,   135,     0,   136,   137,   138,   139,\n@@ -9419,7 +9764,7 @@ static const yytype_int16 yytable[] =\n      215,   216,     0,   217,     0,   218,   219,   220,   221,     0,\n      222,     0,   223,     0,     0,     0,   226,   227,   506,     0,\n      230,     0,   231,     0,   232,   233,   234,     0,   235,   236,\n-     237,   238,   239,   704,   241,     0,   243,   244,   245,   246,\n+     237,   238,   239,   240,   241,     0,   243,   244,   245,   246,\n        0,   247,   248,   249,   250,   251,   252,   253,     0,   254,\n        0,   256,   257,   258,   259,   260,   261,   262,   263,     0,\n      264,     0,   265,     0,     0,   268,     0,   270,   271,   272,\n@@ -9442,7 +9787,7 @@ static const yytype_int16 yytable[] =\n      413,   414,     0,   415,   416,   417,   418,   419,   420,   421,\n      422,   423,   424,   425,   426,   508,   428,   429,   430,     0,\n      431,   432,     0,   433,     0,   435,   436,   437,   438,   439,\n-       0,   440,   441,     0,     0,   442,   443,   444,   445,   446,\n+       0,   640,   441,     0,     0,   641,   443,   444,   445,   446,\n        0,   447,   448,   449,   450,   451,   452,   453,   454,     0,\n        0,   455,   456,   457,     0,   458,   459,   460,   461,     0,\n      462,   463,   464,   465,   466,   467,   468,     0,   469,     0,\n@@ -9467,7 +9812,7 @@ static const yytype_int16 yytable[] =\n      214,   215,   216,     0,   217,     0,   218,   219,   220,   221,\n        0,   222,     0,   223,     0,     0,     0,   226,   227,   506,\n        0,   230,     0,   231,     0,   232,   233,   234,     0,   235,\n-     236,   237,   238,   239,   708,   241,     0,   243,   244,   245,\n+     236,   237,   238,   239,  1315,   241,     0,   243,   244,   245,\n      246,     0,   247,   248,   249,   250,   251,   252,   253,     0,\n      254,     0,   256,   257,   258,   259,   260,   261,   262,   263,\n        0,   264,     0,   265,     0,     0,   268,     0,   270,   271,\n@@ -9515,7 +9860,7 @@ static const yytype_int16 yytable[] =\n      213,   214,   215,   216,     0,   217,     0,   218,   219,   220,\n      221,     0,   222,     0,   223,     0,     0,     0,   226,   227,\n      506,     0,   230,     0,   231,     0,   232,   233,   234,     0,\n-     235,   236,   237,   238,   239,   723,   241,     0,   243,   244,\n+     235,   236,   237,   238,   239,  1317,   241,     0,   243,   244,\n      245,   246,     0,   247,   248,   249,   250,   251,   252,   253,\n        0,   254,     0,   256,   257,   258,   259,   260,   261,   262,\n      263,     0,   264,     0,   265,     0,     0,   268,     0,   270,\n@@ -9563,7 +9908,7 @@ static const yytype_int16 yytable[] =\n      212,   213,   214,   215,   216,     0,   217,     0,   218,   219,\n      220,   221,     0,   222,     0,   223,     0,     0,     0,   226,\n      227,   506,     0,   230,     0,   231,     0,   232,   233,   234,\n-       0,   235,   236,   237,   238,   239,   823,   241,     0,   243,\n+       0,   235,   236,   237,   238,   239,  1320,   241,     0,   243,\n      244,   245,   246,     0,   247,   248,   249,   250,   251,   252,\n      253,     0,   254,     0,   256,   257,   258,   259,   260,   261,\n      262,   263,     0,   264,     0,   265,     0,     0,   268,     0,\n@@ -9611,7 +9956,7 @@ static const yytype_int16 yytable[] =\n      211,   212,   213,   214,   215,   216,     0,   217,     0,   218,\n      219,   220,   221,     0,   222,     0,   223,     0,     0,     0,\n      226,   227,   506,     0,   230,     0,   231,     0,   232,   233,\n-     234,     0,   235,   236,   237,   238,   239,   826,   241,     0,\n+     234,     0,   235,   236,   237,   238,   239,  1322,   241,     0,\n      243,   244,   245,   246,     0,   247,   248,   249,   250,   251,\n      252,   253,     0,   254,     0,   256,   257,   258,   259,   260,\n      261,   262,   263,     0,   264,     0,   265,     0,     0,   268,\n@@ -9641,11 +9986,11 @@ static const yytype_int16 yytable[] =\n      468,     0,   469,     0,   471,   472,   473,   474,   475,     0,\n        0,   476,     0,     0,   477,   478,   479,   480,   481,   482,\n      483,   484,   485,   486,   487,   488,   489,   490,   491,   492,\n-     493,   494,   495,   496,   497,   505,     0,     0,     0,     0,\n+     493,   494,   495,   496,   497,   505,     0,   527,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,   110,   111,   112,   113,   114,   115,\n      116,   117,     0,   118,   119,   120,     0,     0,     0,     0,\n-       0,     0,   947,     0,     0,   122,   123,     0,   124,   125,\n+       0,     0,     0,     0,     0,   122,   123,     0,   124,   125,\n      126,     0,   128,   129,   130,   131,   132,     0,   134,   135,\n        0,   136,   137,   138,   139,   140,   141,     0,     0,   142,\n      143,   144,   145,   146,     0,   147,   148,   149,   150,   151,\n@@ -9659,7 +10004,7 @@ static const yytype_int16 yytable[] =\n      210,   211,   212,   213,   214,   215,   216,     0,   217,     0,\n      218,   219,   220,   221,     0,   222,     0,   223,     0,     0,\n        0,   226,   227,   506,     0,   230,     0,   231,     0,   232,\n-     233,   234,     0,   235,   236,   237,   238,   239,   240,   241,\n+     233,   234,     0,   235,   236,   237,   238,   239,  2148,   241,\n        0,   243,   244,   245,   246,     0,   247,   248,   249,   250,\n      251,   252,   253,     0,   254,     0,   256,   257,   258,   259,\n      260,   261,   262,   263,     0,   264,     0,   265,     0,     0,\n@@ -9689,63 +10034,302 @@ static const yytype_int16 yytable[] =\n      467,   468,     0,   469,     0,   471,   472,   473,   474,   475,\n        0,     0,   476,     0,     0,   477,   478,   479,   480,   481,\n      482,   483,   484,   485,   486,   487,   488,   489,   490,   491,\n-     492,   493,   494,   495,   496,   497,   505,     0,     0,     0,\n+     492,   493,   494,   495,   496,   497,   748,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,   110,   111,   112,   113,   114,\n      115,   116,   117,     0,   118,   119,   120,     0,     0,     0,\n-       0,     0,     0,   970,     0,     0,   122,   123,     0,   124,\n-     125,   126,     0,   128,   129,   130,   131,   132,     0,   134,\n-     135,     0,   136,   137,   138,   139,   140,   141,     0,     0,\n-     142,   143,   144,   145,   146,     0,   147,   148,   149,   150,\n-     151,     0,     0,     0,   153,   154,   155,   156,   157,   158,\n-       0,   160,   161,   162,     0,   163,   164,   165,   166,   167,\n-     168,     0,     0,   170,   171,   172,   173,   174,   175,   176,\n-     177,   178,   179,   180,   181,   182,     0,   183,     0,   184,\n+     749,     0,     0,  -760,     0,   750,   122,   123,     0,   124,\n+     125,   126,   751,   128,   129,   130,     0,   752,   753,   754,\n+     755,     0,   136,   137,   138,   139,   140,   141,     0,     0,\n+     142,   143,   756,   757,   146,     0,   147,   148,   149,   150,\n+       0,     0,   758,     0,   759,   154,   155,   156,   157,   158,\n+     760,   160,   161,   162,     0,   163,   164,   165,   166,   167,\n+     168,     0,   761,   170,   171,   172,   173,   174,   175,   176,\n+     177,   178,   179,   762,   763,   182,     0,   183,     0,   184,\n      185,   186,   187,   188,   189,     0,   190,   191,   192,   193,\n-     194,     0,     0,   195,   196,   197,   198,   199,     0,   200,\n+     194,     0,     0,   195,   196,   764,   198,   199,     0,   200,\n      201,   202,     0,   203,   204,   205,     0,   206,   207,   208,\n-     209,   210,   211,   212,   213,   214,   215,   216,     0,   217,\n-       0,   218,   219,   220,   221,     0,   222,     0,   223,     0,\n-       0,     0,   226,   227,   506,     0,   230,     0,   231,     0,\n-     232,   233,   234,     0,   235,   236,   237,   238,   239,   240,\n-     241,     0,   243,   244,   245,   246,     0,   247,   248,   249,\n-     250,   251,   252,   253,     0,   254,     0,   256,   257,   258,\n-     259,   260,   261,   262,   263,     0,   264,     0,   265,     0,\n-       0,   268,     0,   270,   271,   272,   273,   274,   275,     0,\n-       0,   276,     0,   278,     0,     0,   280,   281,   282,   283,\n-     284,   285,   286,   287,   507,   289,   290,   291,   292,   293,\n+     209,     0,   211,   212,   213,   214,   215,     0,     0,   217,\n+       0,   218,   219,   765,   221,     0,   222,     0,   223,   766,\n+       0,   767,   226,   227,  -760,   768,   230,     0,   231,     0,\n+       0,     0,   234,     0,   235,   236,   237,   238,   239,   240,\n+     241,   770,   243,   244,   245,   246,     0,   247,   248,   249,\n+     250,   251,   252,   253,     0,   254,   771,     0,   257,   258,\n+     259,   260,   261,   772,   773,     0,   774,     0,   265,   775,\n+     776,   268,   777,   270,   271,   272,   273,   274,   275,     0,\n+       0,   276,   778,   278,   779,     0,   280,   281,   282,   283,\n+     284,   285,   286,   287,   780,   289,   290,   291,   292,   293,\n      294,   295,   296,   297,   298,   299,   300,   301,   302,   303,\n-     304,   305,   306,   307,     0,   309,   310,   311,   312,   313,\n-       0,   314,   315,     0,   317,     0,   318,   319,   320,   321,\n+     304,   305,   306,   781,   782,   783,   310,   311,   312,     0,\n+       0,   314,   315,   784,   317,     0,     0,   319,   785,   321,\n      322,   323,     0,   324,   325,     0,     0,   326,   327,   328,\n-       0,     0,   329,   330,     0,   332,     0,   334,   335,   336,\n+       0,     0,   329,     0,   786,   332,   787,     0,   335,   336,\n      337,   338,   339,   340,   341,   342,   343,   344,     0,     0,\n-       0,     0,   345,   346,   347,     0,   349,   350,   351,   352,\n+       0,     0,   345,   346,     0,   788,   349,   350,     0,   352,\n      353,   354,     0,   355,   356,   357,   358,   359,   360,     0,\n-     361,   362,   363,   364,   365,   366,   367,   368,     0,   369,\n+     361,   362,   363,   789,   365,   366,   367,   368,     0,   369,\n      370,   371,   372,   373,   374,   375,   376,   377,   378,   379,\n-     380,   381,     0,   382,   383,     0,   385,   386,   387,   388,\n+     380,   381,     0,   382,   383,   790,   385,   386,   387,   791,\n      389,   390,   391,   392,   393,   394,   395,   396,   397,   398,\n-     399,     0,     0,   400,   401,   402,   403,   404,   405,   406,\n-     407,   408,   409,     0,   411,   412,   413,   414,     0,   415,\n+     399,     0,   792,   400,   401,   402,   403,   404,   405,   793,\n+     407,   408,   409,   794,   411,   412,   795,   414,     0,   415,\n      416,   417,   418,   419,   420,   421,   422,   423,   424,   425,\n-     426,   508,   428,   429,   430,     0,   431,   432,     0,   433,\n-       0,   435,   436,   437,   438,   439,     0,   440,   441,     0,\n-       0,   442,   443,   444,   445,   446,     0,   447,   448,   449,\n-     450,   451,   452,   453,   454,     0,     0,   455,   456,   457,\n+     426,   796,   428,     0,   430,     0,   431,   432,     0,   433,\n+     797,   435,   436,   437,   438,   439,     0,   798,   799,     0,\n+       0,   442,   443,     0,   445,     0,     0,   447,   448,   800,\n+     450,   451,   452,   453,   454,   801,     0,   455,   456,   457,\n        0,   458,   459,   460,   461,     0,   462,   463,   464,   465,\n-     466,   467,   468,     0,   469,     0,   471,   472,   473,   474,\n+     466,     0,   802,     0,   469,   803,   471,   472,   473,   474,\n      475,     0,     0,   476,     0,     0,   477,   478,   479,   480,\n-     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,\n-     491,   492,   493,   494,   495,   496,   497,   505,     0,   527,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,   110,   111,   112,   113,\n-     114,   115,   116,   117,     0,   118,   119,   120,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,   122,   123,     0,\n-     124,   125,   126,     0,   128,   129,   130,   131,   132,     0,\n-     134,   135,     0,   136,   137,   138,   139,   140,   141,     0,\n-       0,   142,   143,   144,   145,   146,     0,   147,   148,   149,\n-     150,   151,     0,     0,     0,   153,   154,   155,   156,   157,\n+     481,   482,   505,     0,   527,     0,     0,     0,     0,     0,\n+       0,     0,     0,   494,   495,   496,   497,     0,     0,     0,\n+       0,   110,   111,   112,   113,   114,   115,   116,   117,     0,\n+     118,   119,   120,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,   122,   123,     0,   124,   125,   126,     0,   128,\n+     129,   130,   131,   132,     0,   134,   135,     0,   136,   137,\n+     138,   139,   140,   141,     0,     0,   142,   143,   144,   145,\n+     146,     0,   147,   148,   149,   150,   151,     0,     0,     0,\n+     153,   154,   155,   156,   157,   158,     0,   160,   161,   162,\n+       0,   163,   164,   165,   166,   167,   168,     0,     0,   170,\n+     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,\n+     181,   182,     0,   183,     0,   184,   185,   186,   187,   188,\n+     189,     0,   190,   191,   192,   193,   194,     0,     0,   195,\n+     196,   197,   198,   199,     0,   200,   201,   202,     0,   203,\n+     204,   205,     0,   206,   207,   208,   209,   210,   211,   212,\n+     213,   214,   215,   216,     0,   217,     0,   218,   219,   220,\n+     221,     0,   222,     0,   223,     0,     0,     0,   226,   227,\n+     506,     0,   230,     0,   231,     0,   232,   233,   234,     0,\n+     235,   236,   237,   238,   239,  2851,   241,     0,   243,   244,\n+     245,   246,     0,   247,   248,   249,   250,   251,   252,   253,\n+       0,   254,     0,   256,   257,   258,   259,   260,   261,   262,\n+     263,     0,   264,     0,   265,     0,     0,   268,     0,   270,\n+     271,   272,   273,   274,   275,     0,     0,   276,     0,   278,\n+       0,     0,   280,   281,   282,   283,   284,   285,   286,   287,\n+     507,   289,   290,   291,   292,   293,   294,   295,   296,   297,\n+     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,\n+       0,   309,   310,   311,   312,   313,     0,   314,   315,     0,\n+     317,     0,   318,   319,   320,   321,   322,   323,     0,   324,\n+     325,     0,     0,   326,   327,   328,     0,     0,   329,   330,\n+       0,   332,     0,   334,   335,   336,   337,   338,   339,   340,\n+     341,   342,   343,   344,     0,     0,     0,     0,   345,   346,\n+     347,     0,   349,   350,   351,   352,   353,   354,     0,   355,\n+     356,   357,   358,   359,   360,     0,   361,   362,   363,   364,\n+     365,   366,   367,   368,     0,   369,   370,   371,   372,   373,\n+     374,   375,   376,   377,   378,   379,   380,   381,     0,   382,\n+     383,     0,   385,   386,   387,   388,   389,   390,   391,   392,\n+     393,   394,   395,   396,   397,   398,   399,     0,     0,   400,\n+     401,   402,   403,   404,   405,   406,   407,   408,   409,     0,\n+     411,   412,   413,   414,     0,   415,   416,   417,   418,   419,\n+     420,   421,   422,   423,   424,   425,   426,   508,   428,   429,\n+     430,     0,   431,   432,     0,   433,     0,   435,   436,   437,\n+     438,   439,     0,   440,   441,     0,     0,   442,   443,   444,\n+     445,   446,     0,   447,   448,   449,   450,   451,   452,   453,\n+     454,     0,     0,   455,   456,   457,     0,   458,   459,   460,\n+     461,     0,   462,   463,   464,   465,   466,   467,   468,     0,\n+     469,     0,   471,   472,   473,   474,   475,     0,     0,   476,\n+       0,     0,   477,   478,   479,   480,   481,   482,   483,   484,\n+     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,\n+     495,   496,   497,   505,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,   110,   111,   112,   113,   114,   115,   116,   117,\n+       0,   118,   119,   120,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,   122,   123,     0,   124,   125,   126,     0,\n+     128,   129,   130,   131,   132,     0,   134,   135,     0,   136,\n+     137,   138,   139,   140,   141,     0,     0,   142,   143,   144,\n+     145,   146,     0,   147,   148,   149,   150,   151,     0,     0,\n+       0,   153,   154,   155,   156,   157,   158,     0,   160,   161,\n+     162,     0,   163,   164,   165,   166,   167,   168,     0,     0,\n+     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,\n+     180,   181,   182,     0,   183,     0,   184,   185,   186,   187,\n+     188,   189,     0,   190,   191,   192,   193,   194,     0,     0,\n+     195,   196,   197,   198,   199,     0,   200,   201,   202,     0,\n+     203,   204,   205,     0,   206,   207,   208,   209,   210,   211,\n+     212,   213,   214,   215,   216,     0,   217,     0,   218,   219,\n+     220,   221,     0,   222,     0,   223,     0,     0,     0,   226,\n+     227,   506,     0,   230,     0,   231,     0,   232,   233,   234,\n+       0,   235,   236,   237,   238,   239,   240,   241,     0,   243,\n+     244,   245,   246,     0,   247,   248,   249,   250,   251,   252,\n+     253,     0,   254,     0,   256,   257,   258,   259,   260,   261,\n+     262,   263,     0,   264,     0,   265,     0,     0,   268,     0,\n+     270,   271,   272,   273,   274,   275,     0,     0,   276,     0,\n+     278,     0,     0,   280,   281,   282,   283,   284,   285,   286,\n+     287,   507,   289,   290,   291,   292,   293,   294,   295,   296,\n+     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,\n+     307,     0,   309,   310,   311,   312,   313,     0,   314,   315,\n+       0,   317,     0,   318,   319,   320,   321,   322,   323,     0,\n+     324,   325,     0,     0,   326,   327,   328,     0,     0,   329,\n+     330,     0,   332,     0,   334,   335,   336,   337,   338,   339,\n+     340,   341,   342,   343,   344,     0,     0,     0,     0,   345,\n+     346,   347,     0,   349,   350,   351,   352,   353,   354,     0,\n+     355,   356,   357,   358,   359,   360,     0,   361,   362,   363,\n+     364,   365,   366,   367,   368,     0,   369,   370,   371,   372,\n+     373,   374,   375,   376,   377,   378,   379,   380,   381,     0,\n+     382,   383,     0,   385,   386,   387,   388,   389,   390,   391,\n+     392,   393,   394,   395,   396,   397,   398,   399,     0,     0,\n+     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,\n+       0,   411,   412,   413,   414,     0,   415,   416,   417,   418,\n+     419,   420,   421,   422,   423,   424,   425,   426,   508,   428,\n+     429,   430,     0,   431,   432,     0,   433,     0,   435,   436,\n+     437,   438,   439,     0,   440,   441,     0,     0,   442,   443,\n+     444,   445,   446,     0,   447,   448,   449,   450,   451,   452,\n+     453,   454,     0,     0,   455,   456,   457,     0,   458,   459,\n+     460,   461,     0,   462,   463,   464,   465,   466,   467,   468,\n+       0,   469,     0,   471,   472,   473,   474,   475,     0,     0,\n+     476,     0,     0,   477,   478,   479,   480,   481,   482,   483,\n+     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,\n+     494,   495,   496,   497,   505,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,   110,   111,   112,   113,   114,   115,   116,\n+     117,     0,   118,   119,   120,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,   122,   123,     0,   124,   125,   126,\n+       0,   128,   129,   130,   131,   132,     0,   134,   135,     0,\n+     136,   137,   138,   139,   140,   141,     0,     0,   142,   143,\n+     144,   145,   146,     0,   147,   148,   149,   150,   151,     0,\n+       0,     0,   153,   154,   155,   156,   157,   158,     0,   160,\n+     161,   162,     0,   163,   164,   165,   166,   167,   168,     0,\n+       0,   170,   171,   172,   173,   174,   175,   176,   177,   178,\n+     179,   180,   181,   182,     0,   183,     0,   184,   185,   186,\n+     187,   188,   189,     0,   190,   191,   192,   193,   194,     0,\n+       0,   195,   196,   197,   198,   199,     0,   200,   201,   202,\n+       0,   203,   204,   205,     0,   206,   207,   208,   209,   210,\n+     211,   212,   213,   214,   215,   216,     0,   217,     0,   218,\n+     219,   220,   221,     0,   222,     0,   223,     0,     0,     0,\n+     226,   227,   506,     0,   651,     0,   231,     0,   232,   233,\n+     234,     0,   235,   236,   237,   238,   239,   240,   241,     0,\n+     243,   244,   245,   246,     0,   247,   248,   249,   250,   251,\n+     252,   253,     0,   254,     0,   256,   257,   258,   259,   260,\n+     261,   262,   263,     0,   264,     0,   265,     0,     0,   268,\n+       0,   270,   271,   272,   273,   274,   275,     0,     0,   276,\n+       0,   278,     0,     0,   280,   281,   652,   283,   284,   285,\n+     286,   287,   507,   289,   290,   291,   292,   293,   294,   295,\n+     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,\n+     306,   307,     0,   309,   310,   311,   312,   313,     0,   314,\n+     315,     0,   317,     0,   318,   319,   320,   321,   322,   323,\n+       0,   324,   325,     0,     0,   326,   327,   328,     0,     0,\n+     329,   330,     0,   332,     0,   334,   335,   336,   337,   338,\n+     339,   340,   341,   342,   343,   344,     0,     0,     0,     0,\n+     345,   346,   347,     0,   349,   350,   351,   352,   353,   354,\n+       0,   355,   356,   357,   358,   359,   360,     0,   361,   362,\n+     363,   364,   365,   366,   367,   368,     0,   369,   370,   371,\n+     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,\n+       0,   382,   383,     0,   385,   386,   387,   388,   389,   390,\n+     391,   392,   653,   394,   395,   396,   397,   398,   399,     0,\n+       0,   400,   401,   402,   403,   654,   405,   406,   407,   408,\n+     409,     0,   411,   412,   413,   414,     0,   415,   416,   417,\n+     418,   419,   420,   421,   422,   423,   424,   425,   426,   508,\n+     428,   429,   430,     0,   431,   432,     0,   433,     0,   435,\n+     436,   437,   438,   439,     0,   655,   441,     0,     0,   442,\n+     443,   444,   445,   446,     0,   447,   448,   449,   450,   451,\n+     452,   453,   454,     0,     0,   455,   456,   457,     0,   458,\n+     459,   460,   461,     0,   462,   463,   464,   465,   466,   467,\n+     468,     0,   469,     0,   471,   472,   473,   474,   475,     0,\n+       0,   476,     0,     0,   477,   478,   479,   480,   481,   482,\n+     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,\n+     493,   494,   495,   496,   497,   505,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,   110,   111,   112,   113,   114,   115,\n+     116,   117,     0,   118,   119,   120,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,   122,   123,     0,   124,   125,\n+     126,     0,   128,   129,   130,   131,   132,     0,   134,   135,\n+       0,   136,   137,   138,   139,   140,   141,     0,     0,   142,\n+     143,   144,   145,   146,     0,   147,   148,   149,   150,   151,\n+       0,     0,     0,   153,   154,   155,   156,   157,   158,     0,\n+     160,   161,   162,     0,   163,   164,   165,   166,   167,   168,\n+       0,     0,   170,   171,   172,   173,   174,   175,   176,   177,\n+     178,   179,   180,   181,   182,     0,   183,     0,   184,   185,\n+     186,   187,   188,   189,     0,   190,   191,   192,   193,   194,\n+       0,     0,   195,   196,   197,   198,   199,     0,   200,   201,\n+     202,     0,   203,   204,   205,     0,   206,   207,   208,   209,\n+     210,   211,   212,   213,   214,   215,   216,     0,   217,     0,\n+     218,   219,   220,   221,     0,   222,     0,   223,     0,     0,\n+       0,   226,   227,   506,     0,   230,     0,   231,     0,   232,\n+     233,   234,     0,   235,   236,   237,   238,   239,   822,   241,\n+       0,   243,   244,   245,   246,     0,   247,   248,   249,   250,\n+     251,   252,   253,     0,   254,     0,   256,   257,   258,   259,\n+     260,   261,   262,   263,     0,   264,     0,   265,     0,     0,\n+     268,     0,   270,   271,   272,   273,   274,   275,     0,     0,\n+     276,     0,   278,     0,     0,   280,   281,   282,   283,   284,\n+     285,   286,   287,   507,   289,   290,   291,   292,   293,   294,\n+     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,\n+     305,   306,   307,     0,   309,   310,   311,   312,   313,     0,\n+     314,   315,     0,   317,     0,   318,   319,   320,   321,   322,\n+     323,     0,   324,   325,     0,     0,   326,   327,   328,     0,\n+       0,   329,   330,     0,   332,     0,   334,   335,   336,   337,\n+     338,   339,   340,   341,   342,   343,   344,     0,     0,     0,\n+       0,   345,   346,   347,     0,   349,   350,   351,   352,   353,\n+     354,     0,   355,   356,   357,   358,   359,   360,     0,   361,\n+     362,   363,   364,   365,   366,   367,   368,     0,   369,   370,\n+     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,\n+     381,     0,   382,   383,     0,   385,   386,   387,   388,   389,\n+     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,\n+       0,     0,   400,   401,   402,   403,   404,   405,   406,   407,\n+     408,   409,     0,   411,   412,   413,   414,     0,   415,   416,\n+     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,\n+     508,   428,   429,   430,     0,   431,   432,     0,   433,     0,\n+     435,   436,   437,   438,   439,     0,   440,   441,     0,     0,\n+     442,   443,   444,   445,   446,     0,   447,   448,   449,   450,\n+     451,   452,   453,   454,     0,     0,   455,   456,   457,     0,\n+     458,   459,   460,   461,     0,   462,   463,   464,   465,   466,\n+     467,   468,     0,   469,     0,   471,   472,   473,   474,   475,\n+       0,     0,   476,     0,     0,   477,   478,   479,   480,   481,\n+     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,\n+     492,   493,   494,   495,   496,   497,   505,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,   110,   111,   112,   113,   114,\n+     115,   116,   117,     0,   118,   119,   120,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,   122,   123,     0,   124,\n+     125,   126,     0,   128,   129,   130,   131,   132,     0,   134,\n+     135,     0,   136,   137,   138,   139,   140,   141,     0,     0,\n+     142,   143,   144,   145,   146,     0,   147,   148,   149,   150,\n+     151,     0,     0,     0,   153,   154,   155,   156,   157,   158,\n+       0,   160,   161,   162,     0,   163,   164,   165,   166,   167,\n+     168,     0,     0,   170,   171,   172,   173,   174,   175,   176,\n+     177,   178,   179,   180,   181,   182,     0,   183,     0,   184,\n+     185,   186,   187,   188,   189,     0,   190,   191,   192,   193,\n+     194,     0,     0,   195,   196,   197,   198,   199,     0,   200,\n+     201,   202,     0,   203,   204,   205,     0,   206,   207,   208,\n+     209,   210,   211,   212,   213,   214,   215,   216,     0,   217,\n+       0,   218,   219,   220,   221,     0,   222,     0,   223,     0,\n+       0,     0,   226,   227,   506,     0,   230,     0,   231,     0,\n+     232,   233,   234,     0,   235,   236,   237,   238,   239,   240,\n+     241,     0,   243,   244,   245,   246,     0,   247,   248,   249,\n+     250,   251,   252,   253,     0,   254,     0,   256,   257,   258,\n+     259,   260,   261,   262,   263,     0,   264,     0,   265,     0,\n+       0,   268,     0,   270,   271,   272,   273,   274,   275,     0,\n+       0,   276,     0,   278,     0,     0,   280,   281,   282,   283,\n+     284,   285,   286,   287,   507,   289,   290,   291,   292,   293,\n+     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,\n+     304,   305,   306,   307,     0,   309,   310,   311,   312,   313,\n+       0,   314,   315,     0,   317,     0,   318,   319,   320,   321,\n+     322,   323,     0,   324,   325,     0,     0,   326,   327,   328,\n+       0,     0,   329,   330,     0,   332,     0,   334,   335,   336,\n+     337,   338,   339,   340,   341,   342,   343,   344,     0,     0,\n+       0,     0,   345,   346,   347,     0,   349,   350,   351,   352,\n+     353,   354,     0,   355,   356,   357,   358,   359,   360,     0,\n+     361,   362,   363,   364,   365,   366,   367,   368,     0,   369,\n+     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,\n+     380,   381,     0,   382,   383,     0,   385,   386,   387,   388,\n+     389,   390,   391,   392,   653,   394,   395,   396,   397,   398,\n+     399,     0,     0,   400,   401,   402,   403,   404,   405,   406,\n+     407,   408,   409,     0,   411,   412,   413,   414,     0,   415,\n+     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,\n+     426,   508,   428,   429,   430,     0,   431,   432,     0,   433,\n+       0,   435,   436,   437,   438,   439,     0,   655,   441,     0,\n+       0,   442,   443,   444,   445,   446,     0,   447,   448,   449,\n+     450,   451,   452,   453,   454,     0,     0,   455,   456,   457,\n+       0,   458,   459,   460,   461,     0,   462,   463,   464,   465,\n+     466,   467,   468,     0,   469,     0,   471,   472,   473,   474,\n+     475,     0,     0,   476,     0,     0,   477,   478,   479,   480,\n+     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,\n+     491,   492,   493,   494,   495,   496,   497,   505,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,   110,   111,   112,   113,\n+     114,   115,   116,   117,     0,   118,   119,   120,     0,     0,\n+       0,     0,     0,     0,  1614,     0,     0,   122,   123,     0,\n+     124,   125,   126,     0,   128,   129,   130,   131,   132,     0,\n+     134,   135,     0,   136,   137,   138,   139,   140,   141,     0,\n+       0,   142,   143,   144,   145,   146,     0,   147,   148,   149,\n+     150,   151,     0,     0,     0,   153,   154,   155,   156,   157,\n      158,     0,   160,   161,   162,     0,   163,   164,   165,   166,\n      167,   168,     0,     0,   170,   171,   172,   173,   174,   175,\n      176,   177,   178,   179,   180,   181,   182,     0,   183,     0,\n@@ -9756,7 +10340,7 @@ static const yytype_int16 yytable[] =\n      217,     0,   218,   219,   220,   221,     0,   222,     0,   223,\n        0,     0,     0,   226,   227,   506,     0,   230,     0,   231,\n        0,   232,   233,   234,     0,   235,   236,   237,   238,   239,\n-    1308,   241,     0,   243,   244,   245,   246,     0,   247,   248,\n+     240,   241,     0,   243,   244,   245,   246,     0,   247,   248,\n      249,   250,   251,   252,   253,     0,   254,     0,   256,   257,\n      258,   259,   260,   261,   262,   263,     0,   264,     0,   265,\n        0,     0,   268,     0,   270,   271,   272,   273,   274,   275,\n@@ -9774,7 +10358,7 @@ static const yytype_int16 yytable[] =\n      369,   370,   371,   372,   373,   374,   375,   376,   377,   378,\n      379,   380,   381,     0,   382,   383,     0,   385,   386,   387,\n      388,   389,   390,   391,   392,   393,   394,   395,   396,   397,\n-     398,   399,     0,     0,   400,   401,   402,   403,   404,   405,\n+     398,   399,     0,     0,   400,   401,   402,   403,   404,     0,\n      406,   407,   408,   409,     0,   411,   412,   413,   414,     0,\n      415,   416,   417,   418,   419,   420,   421,   422,   423,   424,\n      425,   426,   508,   428,   429,   430,     0,   431,   432,     0,\n@@ -9786,7 +10370,7 @@ static const yytype_int16 yytable[] =\n      474,   475,     0,     0,   476,     0,     0,   477,   478,   479,\n      480,   481,   482,   483,   484,   485,   486,   487,   488,   489,\n      490,   491,   492,   493,   494,   495,   496,   497,   505,     0,\n-     527,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,   110,   111,   112,\n      113,   114,   115,   116,   117,     0,   118,   119,   120,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,   122,   123,\n@@ -9804,7 +10388,7 @@ static const yytype_int16 yytable[] =\n        0,   217,     0,   218,   219,   220,   221,     0,   222,     0,\n      223,     0,     0,     0,   226,   227,   506,     0,   230,     0,\n      231,     0,   232,   233,   234,     0,   235,   236,   237,   238,\n-     239,  1310,   241,     0,   243,   244,   245,   246,     0,   247,\n+     239,  1781,   241,     0,   243,   244,   245,   246,     0,   247,\n      248,   249,   250,   251,   252,   253,     0,   254,     0,   256,\n      257,   258,   259,   260,   261,   262,   263,     0,   264,     0,\n      265,     0,     0,   268,     0,   270,   271,   272,   273,   274,\n@@ -9834,7 +10418,7 @@ static const yytype_int16 yytable[] =\n      473,   474,   475,     0,     0,   476,     0,     0,   477,   478,\n      479,   480,   481,   482,   483,   484,   485,   486,   487,   488,\n      489,   490,   491,   492,   493,   494,   495,   496,   497,   505,\n-       0,   527,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,   110,   111,\n      112,   113,   114,   115,   116,   117,     0,   118,   119,   120,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,   122,\n@@ -9852,7 +10436,7 @@ static const yytype_int16 yytable[] =\n      216,     0,   217,     0,   218,   219,   220,   221,     0,   222,\n        0,   223,     0,     0,     0,   226,   227,   506,     0,   230,\n        0,   231,     0,   232,   233,   234,     0,   235,   236,   237,\n-     238,   239,  1313,   241,     0,   243,   244,   245,   246,     0,\n+     238,   239,  2135,   241,     0,   243,   244,   245,   246,     0,\n      247,   248,   249,   250,   251,   252,   253,     0,   254,     0,\n      256,   257,   258,   259,   260,   261,   262,   263,     0,   264,\n        0,   265,     0,     0,   268,     0,   270,   271,   272,   273,\n@@ -9882,7 +10466,7 @@ static const yytype_int16 yytable[] =\n      472,   473,   474,   475,     0,     0,   476,     0,     0,   477,\n      478,   479,   480,   481,   482,   483,   484,   485,   486,   487,\n      488,   489,   490,   491,   492,   493,   494,   495,   496,   497,\n-     505,     0,   527,     0,     0,     0,     0,     0,     0,     0,\n+     505,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,   110,\n      111,   112,   113,   114,   115,   116,   117,     0,   118,   119,\n      120,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n@@ -9900,7 +10484,7 @@ static const yytype_int16 yytable[] =\n      215,   216,     0,   217,     0,   218,   219,   220,   221,     0,\n      222,     0,   223,     0,     0,     0,   226,   227,   506,     0,\n      230,     0,   231,     0,   232,   233,   234,     0,   235,   236,\n-     237,   238,   239,  1315,   241,     0,   243,   244,   245,   246,\n+     237,   238,   239,  2150,   241,     0,   243,   244,   245,   246,\n        0,   247,   248,   249,   250,   251,   252,   253,     0,   254,\n        0,   256,   257,   258,   259,   260,   261,   262,   263,     0,\n      264,     0,   265,     0,     0,   268,     0,   270,   271,   272,\n@@ -9930,2922 +10514,1188 @@ static const yytype_int16 yytable[] =\n      471,   472,   473,   474,   475,     0,     0,   476,     0,     0,\n      477,   478,   479,   480,   481,   482,   483,   484,   485,   486,\n      487,   488,   489,   490,   491,   492,   493,   494,   495,   496,\n-     497,   505,     0,   527,     0,     0,     0,     0,     0,     0,\n+     497,   748,     0,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n      110,   111,   112,   113,   114,   115,   116,   117,     0,   118,\n-     119,   120,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,   122,   123,     0,   124,   125,   126,     0,   128,   129,\n-     130,   131,   132,     0,   134,   135,     0,   136,   137,   138,\n-     139,   140,   141,     0,     0,   142,   143,   144,   145,   146,\n-       0,   147,   148,   149,   150,   151,     0,     0,     0,   153,\n-     154,   155,   156,   157,   158,     0,   160,   161,   162,     0,\n-     163,   164,   165,   166,   167,   168,     0,     0,   170,   171,\n-     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,\n+     119,   120,     0,     0,     0,   749,     0,     0,     0,     0,\n+     750,   122,   123,     0,   124,   125,   126,   751,   128,   129,\n+     130,     0,   752,   753,   754,   755,     0,   136,   137,   138,\n+     139,   140,   141,     0,     0,   142,   143,   756,   757,   146,\n+       0,   147,   148,   149,   150,     0,     0,   758,     0,   759,\n+     154,   155,   156,   157,   158,   760,   160,   161,   162,     0,\n+     163,   164,   165,   166,   167,   168,     0,   761,   170,   171,\n+     172,   173,   174,   175,   176,   177,   178,   179,   762,   763,\n      182,     0,   183,     0,   184,   185,   186,   187,   188,   189,\n        0,   190,   191,   192,   193,   194,     0,     0,   195,   196,\n-     197,   198,   199,     0,   200,   201,   202,     0,   203,   204,\n-     205,     0,   206,   207,   208,   209,   210,   211,   212,   213,\n-     214,   215,   216,     0,   217,     0,   218,   219,   220,   221,\n-       0,   222,     0,   223,     0,     0,     0,   226,   227,   506,\n-       0,   230,     0,   231,     0,   232,   233,   234,     0,   235,\n-     236,   237,   238,   239,  2139,   241,     0,   243,   244,   245,\n+     764,   198,   199,     0,   200,   201,   202,     0,   203,   204,\n+     205,     0,   206,   207,   208,   209,     0,   211,   212,   213,\n+     214,   215,     0,     0,   217,     0,   218,   219,   765,   221,\n+       0,   222,     0,   223,   766,     0,   767,   226,   227,     0,\n+     768,   230,     0,   231,     0,     0,     0,   234,     0,   235,\n+     236,   237,   238,   239,   769,   241,   770,   243,   244,   245,\n      246,     0,   247,   248,   249,   250,   251,   252,   253,     0,\n-     254,     0,   256,   257,   258,   259,   260,   261,   262,   263,\n-       0,   264,     0,   265,     0,     0,   268,     0,   270,   271,\n-     272,   273,   274,   275,     0,     0,   276,     0,   278,     0,\n-       0,   280,   281,   282,   283,   284,   285,   286,   287,   507,\n+     254,   771,     0,   257,   258,   259,   260,   261,   772,   773,\n+       0,   774,     0,   265,   775,   776,   268,   777,   270,   271,\n+     272,   273,   274,   275,     0,     0,   276,   778,   278,   779,\n+       0,   280,   281,   282,   283,   284,   285,   286,   287,   780,\n      289,   290,   291,   292,   293,   294,   295,   296,   297,   298,\n-     299,   300,   301,   302,   303,   304,   305,   306,   307,     0,\n-     309,   310,   311,   312,   313,     0,   314,   315,     0,   317,\n-       0,   318,   319,   320,   321,   322,   323,     0,   324,   325,\n-       0,     0,   326,   327,   328,     0,     0,   329,   330,     0,\n-     332,     0,   334,   335,   336,   337,   338,   339,   340,   341,\n-     342,   343,   344,     0,     0,     0,     0,   345,   346,   347,\n-       0,   349,   350,   351,   352,   353,   354,     0,   355,   356,\n-     357,   358,   359,   360,     0,   361,   362,   363,   364,   365,\n+     299,   300,   301,   302,   303,   304,   305,   306,   781,   782,\n+     783,   310,   311,   312,     0,     0,   314,   315,   784,   317,\n+       0,     0,   319,   785,   321,   322,   323,     0,   324,   325,\n+       0,     0,   326,   327,   328,     0,     0,   329,     0,   786,\n+     332,   787,     0,   335,   336,   337,   338,   339,   340,   341,\n+     342,   343,   344,     0,     0,     0,     0,   345,   346,     0,\n+     788,   349,   350,     0,   352,   353,   354,     0,   355,   356,\n+     357,   358,   359,   360,     0,   361,   362,   363,   789,   365,\n      366,   367,   368,     0,   369,   370,   371,   372,   373,   374,\n      375,   376,   377,   378,   379,   380,   381,     0,   382,   383,\n-       0,   385,   386,   387,   388,   389,   390,   391,   392,   393,\n-     394,   395,   396,   397,   398,   399,     0,     0,   400,   401,\n-     402,   403,   404,   405,   406,   407,   408,   409,     0,   411,\n-     412,   413,   414,     0,   415,   416,   417,   418,   419,   420,\n-     421,   422,   423,   424,   425,   426,   508,   428,   429,   430,\n-       0,   431,   432,     0,   433,     0,   435,   436,   437,   438,\n-     439,     0,   440,   441,     0,     0,   442,   443,   444,   445,\n-     446,     0,   447,   448,   449,   450,   451,   452,   453,   454,\n-       0,     0,   455,   456,   457,     0,   458,   459,   460,   461,\n-       0,   462,   463,   464,   465,   466,   467,   468,     0,   469,\n-       0,   471,   472,   473,   474,   475,     0,     0,   476,     0,\n-       0,   477,   478,   479,   480,   481,   482,   483,   484,   485,\n-     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,\n-     496,   497,   745,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,   110,   111,   112,   113,   114,   115,   116,   117,     0,\n-     118,   119,   120,     0,     0,     0,   746,     0,     0,  -756,\n-       0,   747,   122,   123,     0,   124,   125,   126,   748,   128,\n-     129,   130,     0,   749,   750,   751,   752,     0,   136,   137,\n-     138,   139,   140,   141,     0,     0,   142,   143,   753,   754,\n-     146,     0,   147,   148,   149,   150,     0,     0,   755,     0,\n-     756,   154,   155,   156,   157,   158,   757,   160,   161,   162,\n-       0,   163,   164,   165,   166,   167,   168,     0,   758,   170,\n-     171,   172,   173,   174,   175,   176,   177,   178,   179,   759,\n-     760,   182,     0,   183,     0,   184,   185,   186,   187,   188,\n-     189,     0,   190,   191,   192,   193,   194,     0,     0,   195,\n-     196,   761,   198,   199,     0,   200,   201,   202,     0,   203,\n-     204,   205,     0,   206,   207,   208,   209,     0,   211,   212,\n-     213,   214,   215,     0,     0,   217,     0,   218,   219,   762,\n-     221,     0,   222,     0,   223,   763,     0,   764,   226,   227,\n-    -756,   765,   230,     0,   231,     0,     0,     0,   234,     0,\n-     235,   236,   237,   238,   239,   240,   241,   767,   243,   244,\n-     245,   246,     0,   247,   248,   249,   250,   251,   252,   253,\n-       0,   254,   768,     0,   257,   258,   259,   260,   261,   769,\n-     770,     0,   771,     0,   265,   772,   773,   268,   774,   270,\n-     271,   272,   273,   274,   275,     0,     0,   276,   775,   278,\n-     776,     0,   280,   281,   282,   283,   284,   285,   286,   287,\n-     777,   289,   290,   291,   292,   293,   294,   295,   296,   297,\n-     298,   299,   300,   301,   302,   303,   304,   305,   306,   778,\n-     779,   780,   310,   311,   312,     0,     0,   314,   315,   781,\n-     317,     0,     0,   319,   782,   321,   322,   323,     0,   324,\n-     325,     0,     0,   326,   327,   328,     0,     0,   329,     0,\n-     783,   332,   784,     0,   335,   336,   337,   338,   339,   340,\n-     341,   342,   343,   344,     0,     0,     0,     0,   345,   346,\n-       0,   785,   349,   350,     0,   352,   353,   354,     0,   355,\n-     356,   357,   358,   359,   360,     0,   361,   362,   363,   786,\n-     365,   366,   367,   368,     0,   369,   370,   371,   372,   373,\n-     374,   375,   376,   377,   378,   379,   380,   381,     0,   382,\n-     383,   787,   385,   386,   387,   788,   389,   390,   391,   392,\n-     393,   394,   395,   396,   397,   398,   399,     0,   789,   400,\n-     401,   402,   403,   404,   405,   790,   407,   408,   409,   791,\n-     411,   412,   792,   414,     0,   415,   416,   417,   418,   419,\n-     420,   421,   422,   423,   424,   425,   426,   793,   428,     0,\n-     430,     0,   431,   432,     0,   433,   794,   435,   436,   437,\n-     438,   439,     0,   795,   796,     0,     0,   442,   443,     0,\n-     445,     0,     0,   447,   448,   797,   450,   451,   452,   453,\n-     454,   798,     0,   455,   456,   457,     0,   458,   459,   460,\n-     461,     0,   462,   463,   464,   465,   466,     0,   799,     0,\n-     469,   800,   471,   472,   473,   474,   475,     0,     0,   476,\n-       0,     0,   477,   478,   479,   480,   481,   482,   505,     0,\n-     527,     0,     0,     0,     0,     0,     0,     0,     0,   494,\n-     495,   496,   497,     0,     0,     0,     0,   110,   111,   112,\n-     113,   114,   115,   116,   117,     0,   118,   119,   120,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,   122,   123,\n-       0,   124,   125,   126,     0,   128,   129,   130,   131,   132,\n-       0,   134,   135,     0,   136,   137,   138,   139,   140,   141,\n-       0,     0,   142,   143,   144,   145,   146,     0,   147,   148,\n-     149,   150,   151,     0,     0,     0,   153,   154,   155,   156,\n-     157,   158,     0,   160,   161,   162,     0,   163,   164,   165,\n-     166,   167,   168,     0,     0,   170,   171,   172,   173,   174,\n-     175,   176,   177,   178,   179,   180,   181,   182,     0,   183,\n-       0,   184,   185,   186,   187,   188,   189,     0,   190,   191,\n-     192,   193,   194,     0,     0,   195,   196,   197,   198,   199,\n-       0,   200,   201,   202,     0,   203,   204,   205,     0,   206,\n-     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,\n-       0,   217,     0,   218,   219,   220,   221,     0,   222,     0,\n-     223,     0,     0,     0,   226,   227,   506,     0,   230,     0,\n-     231,     0,   232,   233,   234,     0,   235,   236,   237,   238,\n-     239,  2840,   241,     0,   243,   244,   245,   246,     0,   247,\n-     248,   249,   250,   251,   252,   253,     0,   254,     0,   256,\n-     257,   258,   259,   260,   261,   262,   263,     0,   264,     0,\n-     265,     0,     0,   268,     0,   270,   271,   272,   273,   274,\n-     275,     0,     0,   276,     0,   278,     0,     0,   280,   281,\n-     282,   283,   284,   285,   286,   287,   507,   289,   290,   291,\n-     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,\n-     302,   303,   304,   305,   306,   307,     0,   309,   310,   311,\n-     312,   313,     0,   314,   315,     0,   317,     0,   318,   319,\n-     320,   321,   322,   323,     0,   324,   325,     0,     0,   326,\n-     327,   328,     0,     0,   329,   330,     0,   332,     0,   334,\n-     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,\n-       0,     0,     0,     0,   345,   346,   347,     0,   349,   350,\n-     351,   352,   353,   354,     0,   355,   356,   357,   358,   359,\n-     360,     0,   361,   362,   363,   364,   365,   366,   367,   368,\n-       0,   369,   370,   371,   372,   373,   374,   375,   376,   377,\n-     378,   379,   380,   381,     0,   382,   383,     0,   385,   386,\n-     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,\n-     397,   398,   399,     0,     0,   400,   401,   402,   403,   404,\n-     405,   406,   407,   408,   409,     0,   411,   412,   413,   414,\n-       0,   415,   416,   417,   418,   419,   420,   421,   422,   423,\n-     424,   425,   426,   508,   428,   429,   430,     0,   431,   432,\n-       0,   433,     0,   435,   436,   437,   438,   439,     0,   440,\n-     441,     0,     0,   442,   443,   444,   445,   446,     0,   447,\n-     448,   449,   450,   451,   452,   453,   454,     0,     0,   455,\n-     456,   457,     0,   458,   459,   460,   461,     0,   462,   463,\n-     464,   465,   466,   467,   468,     0,   469,     0,   471,   472,\n-     473,   474,   475,     0,     0,   476,     0,     0,   477,   478,\n-     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,\n-     489,   490,   491,   492,   493,   494,   495,   496,   497,   505,\n+     790,   385,   386,   387,   791,   389,   390,   391,   392,   393,\n+     394,   395,   396,   397,   398,   399,     0,   792,   400,   401,\n+     402,   403,   404,   405,   793,   407,   408,   409,   794,   411,\n+     412,   795,   414,     0,   415,   416,   417,   418,   419,   420,\n+     421,   422,   423,   424,   425,   426,   796,   428,     0,   430,\n+       0,   431,   432,     0,   433,   797,   435,   436,   437,   438,\n+     439,     0,   798,   799,     0,     0,   442,   443,     0,   445,\n+       0,     0,   447,   448,   800,   450,   451,   452,   453,   454,\n+     801,     0,   455,   456,   457,     0,   458,   459,   460,   461,\n+       0,   462,   463,   464,   465,   466,     0,   802,     0,   469,\n+     803,   471,   472,   473,   474,   475,     0,     0,   476,     0,\n+       0,   477,   478,   479,   480,   481,   482,   748,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,   494,   495,\n+     496,   497,     0,     0,     0,     0,   110,   111,   112,   113,\n+     114,   115,   116,   117,     0,   118,   119,   120,     0,     0,\n+       0,   749,     0,     0,     0,     0,   750,   122,   123,     0,\n+     124,   125,   126,   751,   128,   129,   130,     0,   752,   753,\n+     754,   755,     0,   136,   137,   138,   139,   140,   141,     0,\n+       0,   142,   143,   756,   757,   146,     0,   147,   148,   149,\n+     150,     0,     0,   758,     0,   759,   154,   155,   156,   157,\n+     158,   760,   160,   161,   162,     0,   163,   164,   165,   166,\n+     167,   168,     0,   761,   170,   171,   172,   173,   174,   175,\n+     176,   177,   178,   179,   762,   763,   182,     0,   183,     0,\n+     184,   185,   186,   187,   188,   189,     0,   190,   191,   192,\n+     193,   194,     0,     0,   195,   196,   764,   198,   199,     0,\n+     200,   201,   202,     0,   203,   204,   205,     0,   206,   207,\n+     208,   209,     0,   211,   212,   213,   214,   215,     0,     0,\n+     217,     0,   218,   219,   765,   221,     0,   222,     0,   223,\n+     766,     0,   767,   226,   227,     0,   768,   230,     0,   231,\n+       0,     0,     0,   234,     0,   235,   236,   237,   238,   239,\n+     240,   241,   770,   243,   244,   245,   246,     0,   247,   248,\n+     249,   250,   251,   252,   253,     0,   254,   771,     0,   257,\n+     258,   259,   260,   261,   772,   773,     0,   774,     0,   265,\n+     775,   776,   268,   777,   270,   271,   272,   273,   274,   275,\n+       0,     0,   276,   778,   278,   779,     0,   280,   281,   282,\n+     283,   284,   285,   286,   287,   780,   289,   290,   291,   292,\n+     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,\n+     303,   304,   305,   306,   781,   782,   783,   310,   311,   312,\n+       0,     0,   314,   315,   784,   317,     0,     0,   319,   785,\n+     321,   322,   323,     0,   324,   325,     0,     0,   326,   327,\n+     328,     0,     0,   329,     0,   786,   332,   787,     0,   335,\n+     336,   337,   338,   339,   340,   341,   342,   343,   344,     0,\n+       0,     0,     0,   345,   346,     0,   788,   349,   350,     0,\n+     352,   353,   354,     0,   355,   356,   357,   358,   359,   360,\n+       0,   361,   362,   363,   789,   365,   366,   367,   368,     0,\n+     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,\n+     379,   380,   381,     0,   382,   383,   790,   385,   386,   387,\n+     791,   389,   390,   391,   392,   393,   394,   395,   396,   397,\n+     398,   399,     0,   792,   400,   401,   402,   403,   404,   405,\n+     793,   407,   408,   409,   794,   411,   412,   795,   414,     0,\n+     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,\n+     425,   426,   796,   428,     0,   430,     0,   431,   432,     0,\n+     433,   797,   435,   436,   437,   438,   439,     0,   798,   799,\n+       0,     0,   442,   443,     0,   445,     0,     0,   447,   448,\n+     800,   450,   451,   452,   453,   454,   801,     0,   455,   456,\n+     457,     0,   458,   459,   460,   461,     0,   462,   463,   464,\n+     465,   466,     0,   802,     0,   469,   803,   471,   472,   473,\n+     474,   475,     0,     0,   476,     0,     0,   477,   478,   479,\n+     480,   481,   482,   748,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,   494,   495,   496,   497,     0,     0,\n+       0,     0,   110,   111,   112,   113,   114,   115,   116,   117,\n+       0,   118,   119,   120,     0,     0,     0,   749,     0,     0,\n+       0,     0,   750,   122,   123,     0,   124,   125,   126,   751,\n+     128,   129,   130,     0,   752,   753,   754,   755,     0,   136,\n+     137,   138,   139,   140,   141,     0,     0,   142,   143,   756,\n+     757,   146,     0,   147,   148,   149,   150,     0,     0,   758,\n+       0,   759,   154,   155,   156,   157,   158,   760,   160,   161,\n+     162,     0,   163,   164,   165,   166,   167,   168,     0,   761,\n+     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,\n+     762,   763,   182,     0,   183,     0,   184,   185,   186,   187,\n+     188,   189,     0,   190,   191,   192,   193,   194,     0,     0,\n+     195,   196,   764,   198,   199,     0,   200,   201,   202,     0,\n+    1766,   204,   205,     0,   206,   207,   208,   209,     0,   211,\n+     212,   213,   214,   215,     0,     0,   217,     0,   218,   219,\n+     765,   221,     0,   222,     0,   223,   766,     0,   767,   226,\n+     227,     0,   768,   230,     0,   231,     0,     0,     0,   234,\n+       0,   235,   236,   237,   238,   239,   240,   241,   770,   243,\n+     244,   245,   246,     0,   247,   248,   249,   250,   251,   252,\n+     253,     0,   254,   771,     0,   257,   258,   259,   260,   261,\n+     772,   773,     0,   774,     0,   265,   775,   776,   268,   777,\n+     270,   271,   272,   273,   274,   275,     0,     0,   276,   778,\n+     278,   779,     0,   280,   281,   282,   283,   284,   285,   286,\n+     287,   780,   289,   290,   291,   292,   293,   294,   295,   296,\n+     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,\n+     781,   782,   783,   310,   311,   312,     0,     0,   314,   315,\n+     784,   317,     0,     0,   319,   785,   321,   322,   323,     0,\n+     324,   325,     0,     0,   326,   327,   328,     0,     0,   329,\n+       0,   786,   332,   787,     0,   335,   336,   337,   338,   339,\n+     340,   341,   342,   343,   344,     0,     0,     0,     0,   345,\n+     346,     0,   788,   349,   350,     0,   352,   353,   354,     0,\n+     355,   356,   357,   358,   359,   360,     0,   361,   362,   363,\n+     789,   365,   366,   367,   368,     0,   369,   370,   371,   372,\n+     373,   374,   375,   376,   377,   378,   379,   380,   381,     0,\n+     382,   383,   790,   385,   386,   387,   791,   389,   390,   391,\n+     392,   393,   394,   395,   396,   397,   398,   399,     0,   792,\n+     400,   401,   402,   403,   404,   405,   793,   407,   408,   409,\n+     794,   411,   412,   795,   414,     0,   415,   416,   417,   418,\n+     419,   420,   421,   422,   423,   424,   425,   426,   796,   428,\n+       0,   430,     0,   431,   432,     0,   433,   797,   435,   436,\n+     437,   438,   439,     0,   798,   799,     0,     0,   442,   443,\n+       0,   445,     0,     0,   447,   448,   800,   450,   451,   452,\n+     453,   454,   801,     0,   455,   456,   457,     0,   458,   459,\n+     460,   461,     0,   462,   463,   464,   465,   466,     0,   802,\n+       0,   469,   803,   471,   472,   473,   474,   475,     0,     0,\n+     476,     0,     0,   477,   478,   479,   480,   481,   482,  2779,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,   110,   111,\n+     494,   495,   496,   497,     0,     0,     0,     0,   110,   111,\n      112,   113,   114,   115,   116,   117,     0,   118,   119,   120,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,   122,\n-     123,     0,   124,   125,   126,     0,   128,   129,   130,   131,\n-     132,     0,   134,   135,     0,   136,   137,   138,   139,   140,\n-     141,     0,     0,   142,   143,   144,   145,   146,     0,   147,\n-     148,   149,   150,   151,     0,     0,     0,   153,   154,   155,\n-     156,   157,   158,     0,   160,   161,   162,     0,   163,   164,\n-     165,   166,   167,   168,     0,     0,   170,   171,   172,   173,\n-     174,   175,   176,   177,   178,   179,   180,   181,   182,     0,\n+       0,     0,     0,  2780,     0,     0,     0,     0,  2781,   122,\n+     123,     0,   124,   125,   126,  2782,   128,   129,   130,     0,\n+     752,  2783,   754,   755,     0,   136,   137,   138,   139,   140,\n+     141,     0,     0,   142,   143,   756,   757,   146,     0,   147,\n+     148,   149,   150,     0,     0,  2784,     0,  2785,   154,   155,\n+     156,   157,   158,  2786,   160,   161,   162,     0,   163,   164,\n+     165,   166,   167,   168,     0,  2787,   170,   171,   172,   173,\n+     174,   175,   176,   177,   178,   179,   762,   763,   182,     0,\n      183,     0,   184,   185,   186,   187,   188,   189,     0,   190,\n-     191,   192,   193,   194,     0,     0,   195,   196,   197,   198,\n+     191,   192,   193,   194,     0,     0,   195,   196,   764,   198,\n      199,     0,   200,   201,   202,     0,   203,   204,   205,     0,\n-     206,   207,   208,   209,   210,   211,   212,   213,   214,   215,\n-     216,     0,   217,     0,   218,   219,   220,   221,     0,   222,\n-       0,   223,     0,     0,     0,   226,   227,   506,     0,   230,\n-       0,   231,     0,   232,   233,   234,     0,   235,   236,   237,\n-     238,   239,   240,   241,     0,   243,   244,   245,   246,     0,\n-     247,   248,   249,   250,   251,   252,   253,     0,   254,     0,\n-     256,   257,   258,   259,   260,   261,   262,   263,     0,   264,\n-       0,   265,     0,     0,   268,     0,   270,   271,   272,   273,\n-     274,   275,     0,     0,   276,     0,   278,     0,     0,   280,\n-     281,   282,   283,   284,   285,   286,   287,   507,   289,   290,\n+     206,   207,   208,   209,     0,   211,   212,   213,   214,   215,\n+       0,     0,   217,     0,   218,   219,   765,   221,     0,   222,\n+       0,   223,  2788,     0,  2789,   226,   227,  2790,  2791,   230,\n+       0,   231,     0,     0,     0,   234,     0,   235,   236,   237,\n+     238,   239,   240,   241,  2792,   243,   244,   245,   246,     0,\n+     247,   248,   249,   250,   251,   252,   253,     0,   254,  2793,\n+       0,   257,   258,   259,   260,   261,   772,   773,     0,   774,\n+       0,   265,  2794,  2795,   268,  2796,   270,   271,   272,   273,\n+     274,   275,     0,     0,   276,  2797,   278,  2798,     0,   280,\n+     281,   282,   283,   284,   285,   286,   287,  3014,   289,   290,\n      291,   292,   293,   294,   295,   296,   297,   298,   299,   300,\n-     301,   302,   303,   304,   305,   306,   307,     0,   309,   310,\n-     311,   312,   313,     0,   314,   315,     0,   317,     0,   318,\n-     319,   320,   321,   322,   323,     0,   324,   325,     0,     0,\n-     326,   327,   328,     0,     0,   329,   330,     0,   332,     0,\n-     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,\n-     344,     0,     0,     0,     0,   345,   346,   347,     0,   349,\n-     350,   351,   352,   353,   354,     0,   355,   356,   357,   358,\n-     359,   360,     0,   361,   362,   363,   364,   365,   366,   367,\n+     301,   302,   303,   304,   305,   306,   781,  2800,   783,   310,\n+     311,   312,     0,     0,   314,   315,  2802,   317,     0,     0,\n+     319,   785,   321,   322,   323,     0,   324,   325,     0,     0,\n+     326,   327,   328,     0,     0,   329,     0,  2804,   332,  2805,\n+       0,   335,   336,   337,   338,   339,   340,   341,   342,   343,\n+     344,     0,     0,     0,     0,   345,   346,     0,  2806,   349,\n+     350,     0,   352,   353,   354,     0,   355,   356,   357,   358,\n+     359,   360,     0,   361,   362,   363,   789,   365,   366,   367,\n      368,     0,   369,   370,   371,   372,   373,   374,   375,   376,\n-     377,   378,   379,   380,   381,     0,   382,   383,     0,   385,\n-     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,\n-     396,   397,   398,   399,     0,     0,   400,   401,   402,   403,\n-     404,   405,   406,   407,   408,   409,     0,   411,   412,   413,\n+     377,   378,   379,   380,   381,     0,   382,   383,  2807,   385,\n+     386,   387,     0,   389,   390,   391,   392,   393,   394,   395,\n+     396,   397,   398,   399,     0,  2808,   400,   401,   402,   403,\n+     404,   405,     0,   407,   408,   409,  2810,   411,   412,   795,\n      414,     0,   415,   416,   417,   418,   419,   420,   421,   422,\n-     423,   424,   425,   426,   508,   428,   429,   430,     0,   431,\n-     432,     0,   433,     0,   435,   436,   437,   438,   439,     0,\n-     440,   441,     0,     0,   442,   443,   444,   445,   446,     0,\n-     447,   448,   449,   450,   451,   452,   453,   454,     0,     0,\n+     423,   424,   425,   426,  3015,   428,     0,   430,     0,   431,\n+     432,     0,   433,  2812,   435,   436,   437,   438,   439,     0,\n+     798,   799,     0,     0,   442,   443,     0,   445,     0,     0,\n+     447,   448,  2813,   450,   451,   452,   453,   454,     0,     0,\n      455,   456,   457,     0,   458,   459,   460,   461,     0,   462,\n-     463,   464,   465,   466,   467,   468,     0,   469,     0,   471,\n+     463,   464,   465,   466,     0,   802,     0,   469,  2815,   471,\n      472,   473,   474,   475,     0,     0,   476,     0,     0,   477,\n-     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,\n-     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,\n-     505,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,   110,\n-     111,   112,   113,   114,   115,   116,   117,     0,   118,   119,\n-     120,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-     122,   123,     0,   124,   125,   126,     0,   128,   129,   130,\n-     131,   132,     0,   134,   135,     0,   136,   137,   138,   139,\n-     140,   141,     0,     0,   142,   143,   144,   145,   146,     0,\n-     147,   148,   149,   150,   151,     0,     0,     0,   153,   154,\n-     155,   156,   157,   158,     0,   160,   161,   162,     0,   163,\n-     164,   165,   166,   167,   168,     0,     0,   170,   171,   172,\n-     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,\n-       0,   183,     0,   184,   185,   186,   187,   188,   189,     0,\n-     190,   191,   192,   193,   194,     0,     0,   195,   196,   197,\n-     198,   199,     0,   200,   201,   202,     0,   203,   204,   205,\n-       0,   206,   207,   208,   209,   210,   211,   212,   213,   214,\n-     215,   216,     0,   217,     0,   218,   219,   220,   221,     0,\n-     222,     0,   223,     0,     0,     0,   226,   227,   506,     0,\n-     648,     0,   231,     0,   232,   233,   234,     0,   235,   236,\n-     237,   238,   239,   240,   241,     0,   243,   244,   245,   246,\n-       0,   247,   248,   249,   250,   251,   252,   253,     0,   254,\n-       0,   256,   257,   258,   259,   260,   261,   262,   263,     0,\n-     264,     0,   265,     0,     0,   268,     0,   270,   271,   272,\n-     273,   274,   275,     0,     0,   276,     0,   278,     0,     0,\n-     280,   281,   649,   283,   284,   285,   286,   287,   507,   289,\n-     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,\n-     300,   301,   302,   303,   304,   305,   306,   307,     0,   309,\n-     310,   311,   312,   313,     0,   314,   315,     0,   317,     0,\n-     318,   319,   320,   321,   322,   323,     0,   324,   325,     0,\n-       0,   326,   327,   328,     0,     0,   329,   330,     0,   332,\n-       0,   334,   335,   336,   337,   338,   339,   340,   341,   342,\n-     343,   344,     0,     0,     0,     0,   345,   346,   347,     0,\n-     349,   350,   351,   352,   353,   354,     0,   355,   356,   357,\n-     358,   359,   360,     0,   361,   362,   363,   364,   365,   366,\n-     367,   368,     0,   369,   370,   371,   372,   373,   374,   375,\n-     376,   377,   378,   379,   380,   381,     0,   382,   383,     0,\n-     385,   386,   387,   388,   389,   390,   391,   392,   650,   394,\n-     395,   396,   397,   398,   399,     0,     0,   400,   401,   402,\n-     403,   651,   405,   406,   407,   408,   409,     0,   411,   412,\n-     413,   414,     0,   415,   416,   417,   418,   419,   420,   421,\n-     422,   423,   424,   425,   426,   508,   428,   429,   430,     0,\n-     431,   432,     0,   433,     0,   435,   436,   437,   438,   439,\n-       0,   652,   441,     0,     0,   442,   443,   444,   445,   446,\n-       0,   447,   448,   449,   450,   451,   452,   453,   454,     0,\n-       0,   455,   456,   457,     0,   458,   459,   460,   461,     0,\n-     462,   463,   464,   465,   466,   467,   468,     0,   469,     0,\n-     471,   472,   473,   474,   475,     0,     0,   476,     0,     0,\n-     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,\n-     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,\n-     497,   505,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-     110,   111,   112,   113,   114,   115,   116,   117,     0,   118,\n-     119,   120,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,   122,   123,     0,   124,   125,   126,     0,   128,   129,\n-     130,   131,   132,     0,   134,   135,     0,   136,   137,   138,\n-     139,   140,   141,     0,     0,   142,   143,   144,   145,   146,\n-       0,   147,   148,   149,   150,   151,     0,     0,     0,   153,\n-     154,   155,   156,   157,   158,     0,   160,   161,   162,     0,\n-     163,   164,   165,   166,   167,   168,     0,     0,   170,   171,\n-     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,\n-     182,     0,   183,     0,   184,   185,   186,   187,   188,   189,\n-       0,   190,   191,   192,   193,   194,     0,     0,   195,   196,\n-     197,   198,   199,     0,   200,   201,   202,     0,   203,   204,\n-     205,     0,   206,   207,   208,   209,   210,   211,   212,   213,\n-     214,   215,   216,     0,   217,     0,   218,   219,   220,   221,\n-       0,   222,     0,   223,     0,     0,     0,   226,   227,   506,\n-       0,   230,     0,   231,     0,   232,   233,   234,     0,   235,\n-     236,   237,   238,   239,   819,   241,     0,   243,   244,   245,\n-     246,     0,   247,   248,   249,   250,   251,   252,   253,     0,\n-     254,     0,   256,   257,   258,   259,   260,   261,   262,   263,\n-       0,   264,     0,   265,     0,     0,   268,     0,   270,   271,\n-     272,   273,   274,   275,     0,     0,   276,     0,   278,     0,\n-       0,   280,   281,   282,   283,   284,   285,   286,   287,   507,\n-     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,\n-     299,   300,   301,   302,   303,   304,   305,   306,   307,     0,\n-     309,   310,   311,   312,   313,     0,   314,   315,     0,   317,\n-       0,   318,   319,   320,   321,   322,   323,     0,   324,   325,\n-       0,     0,   326,   327,   328,     0,     0,   329,   330,     0,\n-     332,     0,   334,   335,   336,   337,   338,   339,   340,   341,\n-     342,   343,   344,     0,     0,     0,     0,   345,   346,   347,\n-       0,   349,   350,   351,   352,   353,   354,     0,   355,   356,\n-     357,   358,   359,   360,     0,   361,   362,   363,   364,   365,\n-     366,   367,   368,     0,   369,   370,   371,   372,   373,   374,\n-     375,   376,   377,   378,   379,   380,   381,     0,   382,   383,\n-       0,   385,   386,   387,   388,   389,   390,   391,   392,   393,\n-     394,   395,   396,   397,   398,   399,     0,     0,   400,   401,\n-     402,   403,   404,   405,   406,   407,   408,   409,     0,   411,\n-     412,   413,   414,     0,   415,   416,   417,   418,   419,   420,\n-     421,   422,   423,   424,   425,   426,   508,   428,   429,   430,\n-       0,   431,   432,     0,   433,     0,   435,   436,   437,   438,\n-     439,     0,   440,   441,     0,     0,   442,   443,   444,   445,\n-     446,     0,   447,   448,   449,   450,   451,   452,   453,   454,\n-       0,     0,   455,   456,   457,     0,   458,   459,   460,   461,\n-       0,   462,   463,   464,   465,   466,   467,   468,     0,   469,\n-       0,   471,   472,   473,   474,   475,     0,     0,   476,     0,\n-       0,   477,   478,   479,   480,   481,   482,   483,   484,   485,\n-     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,\n-     496,   497,   505,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,   110,   111,   112,   113,   114,   115,   116,   117,     0,\n-     118,   119,   120,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,   122,   123,     0,   124,   125,   126,     0,   128,\n-     129,   130,   131,   132,     0,   134,   135,     0,   136,   137,\n-     138,   139,   140,   141,     0,     0,   142,   143,   144,   145,\n-     146,     0,   147,   148,   149,   150,   151,     0,     0,     0,\n-     153,   154,   155,   156,   157,   158,     0,   160,   161,   162,\n-       0,   163,   164,   165,   166,   167,   168,     0,     0,   170,\n-     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,\n-     181,   182,     0,   183,     0,   184,   185,   186,   187,   188,\n-     189,     0,   190,   191,   192,   193,   194,     0,     0,   195,\n-     196,   197,   198,   199,     0,   200,   201,   202,     0,   203,\n-     204,   205,     0,   206,   207,   208,   209,   210,   211,   212,\n-     213,   214,   215,   216,     0,   217,     0,   218,   219,   220,\n-     221,     0,   222,     0,   223,     0,     0,     0,   226,   227,\n-     506,     0,   230,     0,   231,     0,   232,   233,   234,     0,\n-     235,   236,   237,   238,   239,   240,   241,     0,   243,   244,\n-     245,   246,     0,   247,   248,   249,   250,   251,   252,   253,\n-       0,   254,     0,   256,   257,   258,   259,   260,   261,   262,\n-     263,     0,   264,     0,   265,     0,     0,   268,     0,   270,\n-     271,   272,   273,   274,   275,     0,     0,   276,     0,   278,\n-       0,     0,   280,   281,   282,   283,   284,   285,   286,   287,\n-     507,   289,   290,   291,   292,   293,   294,   295,   296,   297,\n-     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,\n-       0,   309,   310,   311,   312,   313,     0,   314,   315,     0,\n-     317,     0,   318,   319,   320,   321,   322,   323,     0,   324,\n-     325,     0,     0,   326,   327,   328,     0,     0,   329,   330,\n-       0,   332,     0,   334,   335,   336,   337,   338,   339,   340,\n-     341,   342,   343,   344,     0,     0,     0,     0,   345,   346,\n-     347,     0,   349,   350,   351,   352,   353,   354,     0,   355,\n-     356,   357,   358,   359,   360,     0,   361,   362,   363,   364,\n-     365,   366,   367,   368,     0,   369,   370,   371,   372,   373,\n-     374,   375,   376,   377,   378,   379,   380,   381,     0,   382,\n-     383,     0,   385,   386,   387,   388,   389,   390,   391,   392,\n-     650,   394,   395,   396,   397,   398,   399,     0,     0,   400,\n-     401,   402,   403,   404,   405,   406,   407,   408,   409,     0,\n-     411,   412,   413,   414,     0,   415,   416,   417,   418,   419,\n-     420,   421,   422,   423,   424,   425,   426,   508,   428,   429,\n-     430,     0,   431,   432,     0,   433,     0,   435,   436,   437,\n-     438,   439,     0,   652,   441,     0,     0,   442,   443,   444,\n-     445,   446,     0,   447,   448,   449,   450,   451,   452,   453,\n-     454,     0,     0,   455,   456,   457,     0,   458,   459,   460,\n-     461,     0,   462,   463,   464,   465,   466,   467,   468,     0,\n-     469,     0,   471,   472,   473,   474,   475,     0,     0,   476,\n-       0,     0,   477,   478,   479,   480,   481,   482,   483,   484,\n-     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,\n-     495,   496,   497,   505,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,   110,   111,   112,   113,   114,   115,   116,   117,\n-       0,   118,   119,   120,     0,     0,     0,     0,     0,     0,\n-    1607,     0,     0,   122,   123,     0,   124,   125,   126,     0,\n-     128,   129,   130,   131,   132,     0,   134,   135,     0,   136,\n-     137,   138,   139,   140,   141,     0,     0,   142,   143,   144,\n-     145,   146,     0,   147,   148,   149,   150,   151,     0,     0,\n-       0,   153,   154,   155,   156,   157,   158,     0,   160,   161,\n-     162,     0,   163,   164,   165,   166,   167,   168,     0,     0,\n-     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,\n-     180,   181,   182,     0,   183,     0,   184,   185,   186,   187,\n-     188,   189,     0,   190,   191,   192,   193,   194,     0,     0,\n-     195,   196,   197,   198,   199,     0,   200,   201,   202,     0,\n-     203,   204,   205,     0,   206,   207,   208,   209,   210,   211,\n-     212,   213,   214,   215,   216,     0,   217,     0,   218,   219,\n-     220,   221,     0,   222,     0,   223,     0,     0,     0,   226,\n-     227,   506,     0,   230,     0,   231,     0,   232,   233,   234,\n-       0,   235,   236,   237,   238,   239,   240,   241,     0,   243,\n-     244,   245,   246,     0,   247,   248,   249,   250,   251,   252,\n-     253,     0,   254,     0,   256,   257,   258,   259,   260,   261,\n-     262,   263,     0,   264,     0,   265,     0,     0,   268,     0,\n-     270,   271,   272,   273,   274,   275,     0,     0,   276,     0,\n-     278,     0,     0,   280,   281,   282,   283,   284,   285,   286,\n-     287,   507,   289,   290,   291,   292,   293,   294,   295,   296,\n-     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,\n-     307,     0,   309,   310,   311,   312,   313,     0,   314,   315,\n-       0,   317,     0,   318,   319,   320,   321,   322,   323,     0,\n-     324,   325,     0,     0,   326,   327,   328,     0,     0,   329,\n-     330,     0,   332,     0,   334,   335,   336,   337,   338,   339,\n-     340,   341,   342,   343,   344,     0,     0,     0,     0,   345,\n-     346,   347,     0,   349,   350,   351,   352,   353,   354,     0,\n-     355,   356,   357,   358,   359,   360,     0,   361,   362,   363,\n-     364,   365,   366,   367,   368,     0,   369,   370,   371,   372,\n-     373,   374,   375,   376,   377,   378,   379,   380,   381,     0,\n-     382,   383,     0,   385,   386,   387,   388,   389,   390,   391,\n-     392,   393,   394,   395,   396,   397,   398,   399,     0,     0,\n-     400,   401,   402,   403,   404,     0,   406,   407,   408,   409,\n-       0,   411,   412,   413,   414,     0,   415,   416,   417,   418,\n-     419,   420,   421,   422,   423,   424,   425,   426,   508,   428,\n-     429,   430,     0,   431,   432,     0,   433,     0,   435,   436,\n-     437,   438,   439,     0,   440,   441,     0,     0,   442,   443,\n-     444,   445,   446,     0,   447,   448,   449,   450,   451,   452,\n-     453,   454,     0,     0,   455,   456,   457,     0,   458,   459,\n-     460,   461,     0,   462,   463,   464,   465,   466,   467,   468,\n-       0,   469,     0,   471,   472,   473,   474,   475,     0,     0,\n-     476,     0,     0,   477,   478,   479,   480,   481,   482,   483,\n-     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,\n-     494,   495,   496,   497,   505,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,   110,   111,   112,   113,   114,   115,   116,\n-     117,     0,   118,   119,   120,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,   122,   123,     0,   124,   125,   126,\n-       0,   128,   129,   130,   131,   132,     0,   134,   135,     0,\n-     136,   137,   138,   139,   140,   141,     0,     0,   142,   143,\n-     144,   145,   146,     0,   147,   148,   149,   150,   151,     0,\n-       0,     0,   153,   154,   155,   156,   157,   158,     0,   160,\n-     161,   162,     0,   163,   164,   165,   166,   167,   168,     0,\n-       0,   170,   171,   172,   173,   174,   175,   176,   177,   178,\n-     179,   180,   181,   182,     0,   183,     0,   184,   185,   186,\n-     187,   188,   189,     0,   190,   191,   192,   193,   194,     0,\n-       0,   195,   196,   197,   198,   199,     0,   200,   201,   202,\n-       0,   203,   204,   205,     0,   206,   207,   208,   209,   210,\n-     211,   212,   213,   214,   215,   216,     0,   217,     0,   218,\n-     219,   220,   221,     0,   222,     0,   223,     0,     0,     0,\n-     226,   227,   506,     0,   230,     0,   231,     0,   232,   233,\n-     234,     0,   235,   236,   237,   238,   239,  1774,   241,     0,\n-     243,   244,   245,   246,     0,   247,   248,   249,   250,   251,\n-     252,   253,     0,   254,     0,   256,   257,   258,   259,   260,\n-     261,   262,   263,     0,   264,     0,   265,     0,     0,   268,\n-       0,   270,   271,   272,   273,   274,   275,     0,     0,   276,\n-       0,   278,     0,     0,   280,   281,   282,   283,   284,   285,\n-     286,   287,   507,   289,   290,   291,   292,   293,   294,   295,\n-     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,\n-     306,   307,     0,   309,   310,   311,   312,   313,     0,   314,\n-     315,     0,   317,     0,   318,   319,   320,   321,   322,   323,\n-       0,   324,   325,     0,     0,   326,   327,   328,     0,     0,\n-     329,   330,     0,   332,     0,   334,   335,   336,   337,   338,\n-     339,   340,   341,   342,   343,   344,     0,     0,     0,     0,\n-     345,   346,   347,     0,   349,   350,   351,   352,   353,   354,\n-       0,   355,   356,   357,   358,   359,   360,     0,   361,   362,\n-     363,   364,   365,   366,   367,   368,     0,   369,   370,   371,\n-     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,\n-       0,   382,   383,     0,   385,   386,   387,   388,   389,   390,\n-     391,   392,   393,   394,   395,   396,   397,   398,   399,     0,\n-       0,   400,   401,   402,   403,   404,   405,   406,   407,   408,\n-     409,     0,   411,   412,   413,   414,     0,   415,   416,   417,\n-     418,   419,   420,   421,   422,   423,   424,   425,   426,   508,\n-     428,   429,   430,     0,   431,   432,     0,   433,     0,   435,\n-     436,   437,   438,   439,     0,   440,   441,     0,     0,   442,\n-     443,   444,   445,   446,     0,   447,   448,   449,   450,   451,\n-     452,   453,   454,     0,     0,   455,   456,   457,     0,   458,\n-     459,   460,   461,     0,   462,   463,   464,   465,   466,   467,\n-     468,     0,   469,     0,   471,   472,   473,   474,   475,     0,\n-       0,   476,     0,     0,   477,   478,   479,   480,   481,   482,\n-     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,\n-     493,   494,   495,   496,   497,   505,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,   110,   111,   112,   113,   114,   115,\n-     116,   117,     0,   118,   119,   120,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,   122,   123,     0,   124,   125,\n-     126,     0,   128,   129,   130,   131,   132,     0,   134,   135,\n-       0,   136,   137,   138,   139,   140,   141,     0,     0,   142,\n-     143,   144,   145,   146,     0,   147,   148,   149,   150,   151,\n-       0,     0,     0,   153,   154,   155,   156,   157,   158,     0,\n-     160,   161,   162,     0,   163,   164,   165,   166,   167,   168,\n-       0,     0,   170,   171,   172,   173,   174,   175,   176,   177,\n-     178,   179,   180,   181,   182,     0,   183,     0,   184,   185,\n-     186,   187,   188,   189,     0,   190,   191,   192,   193,   194,\n-       0,     0,   195,   196,   197,   198,   199,     0,   200,   201,\n-     202,     0,   203,   204,   205,     0,   206,   207,   208,   209,\n-     210,   211,   212,   213,   214,   215,   216,     0,   217,     0,\n-     218,   219,   220,   221,     0,   222,     0,   223,     0,     0,\n-       0,   226,   227,   506,     0,   230,     0,   231,     0,   232,\n-     233,   234,     0,   235,   236,   237,   238,   239,  2126,   241,\n-       0,   243,   244,   245,   246,     0,   247,   248,   249,   250,\n-     251,   252,   253,     0,   254,     0,   256,   257,   258,   259,\n-     260,   261,   262,   263,     0,   264,     0,   265,     0,     0,\n-     268,     0,   270,   271,   272,   273,   274,   275,     0,     0,\n-     276,     0,   278,     0,     0,   280,   281,   282,   283,   284,\n-     285,   286,   287,   507,   289,   290,   291,   292,   293,   294,\n-     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,\n-     305,   306,   307,     0,   309,   310,   311,   312,   313,     0,\n-     314,   315,     0,   317,     0,   318,   319,   320,   321,   322,\n-     323,     0,   324,   325,     0,     0,   326,   327,   328,     0,\n-       0,   329,   330,     0,   332,     0,   334,   335,   336,   337,\n-     338,   339,   340,   341,   342,   343,   344,     0,     0,     0,\n-       0,   345,   346,   347,     0,   349,   350,   351,   352,   353,\n-     354,     0,   355,   356,   357,   358,   359,   360,     0,   361,\n-     362,   363,   364,   365,   366,   367,   368,     0,   369,   370,\n-     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,\n-     381,     0,   382,   383,     0,   385,   386,   387,   388,   389,\n-     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,\n-       0,     0,   400,   401,   402,   403,   404,   405,   406,   407,\n-     408,   409,     0,   411,   412,   413,   414,     0,   415,   416,\n-     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,\n-     508,   428,   429,   430,     0,   431,   432,     0,   433,     0,\n-     435,   436,   437,   438,   439,     0,   440,   441,     0,     0,\n-     442,   443,   444,   445,   446,     0,   447,   448,   449,   450,\n-     451,   452,   453,   454,     0,     0,   455,   456,   457,     0,\n-     458,   459,   460,   461,     0,   462,   463,   464,   465,   466,\n-     467,   468,     0,   469,     0,   471,   472,   473,   474,   475,\n-       0,     0,   476,     0,     0,   477,   478,   479,   480,   481,\n-     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,\n-     492,   493,   494,   495,   496,   497,   505,     0,     0,     0,\n+     478,   479,   480,   481,   482,   505,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,   494,   495,   496,   497,\n+       0,     0,     0,     0,   110,   111,   112,   113,   114,   115,\n+     116,   117,     0,   118,   119,   120,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,   122,   123,     0,   124,   125,\n+     126,     0,   128,   129,   130,   131,   132,     0,   134,   135,\n+       0,   136,   137,   138,   139,   140,   141,     0,     0,   142,\n+     143,   144,   145,   146,     0,   147,   148,   149,   150,   151,\n+       0,     0,     0,   153,   154,   155,   156,   157,   158,     0,\n+     160,   161,   162,     0,   163,   164,   165,   166,   167,   168,\n+       0,     0,   170,   171,   172,   173,   174,   175,   176,   177,\n+     178,   179,   180,   181,   182,     0,   183,     0,   184,   185,\n+     186,   187,   188,   189,     0,   190,   191,   192,   193,   194,\n+       0,     0,   195,   196,   197,   198,   199,     0,   200,   201,\n+     202,     0,   203,   204,   205,     0,   206,   207,   208,   209,\n+     210,   211,   212,   213,   214,   215,   216,     0,   217,     0,\n+     218,   219,   220,   221,     0,   222,     0,   223,     0,     0,\n+       0,   226,   227,   506,     0,   230,     0,   231,     0,   232,\n+     233,   234,     0,   235,   236,   237,   238,   239,   240,   241,\n+       0,   243,   244,   245,   246,     0,   247,   248,   249,   250,\n+     251,   252,   253,     0,   254,     0,   256,   257,   258,   259,\n+     260,   261,   262,   263,     0,   264,     0,   265,     0,     0,\n+     268,     0,   270,   271,   272,   273,   274,   275,     0,     0,\n+     276,     0,   278,     0,     0,   280,   281,   282,   283,   284,\n+     285,   286,   287,   507,   289,   290,   291,   292,   293,   294,\n+     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,\n+     305,   306,   307,     0,   309,   310,   311,   312,   313,     0,\n+     314,   315,     0,   317,     0,   318,   319,   320,   321,   322,\n+     323,     0,   324,   325,     0,     0,   326,   327,   328,     0,\n+       0,   329,   330,     0,   332,     0,   334,   335,   336,   337,\n+     338,   339,   340,     0,   342,   343,   344,     0,     0,     0,\n+       0,   345,   346,   347,     0,   349,   350,   351,   352,   353,\n+     354,     0,   355,   356,   357,   358,   359,   360,     0,   361,\n+       0,   363,   364,   365,   366,   367,   368,     0,   369,   370,\n+     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,\n+     381,     0,   382,   383,     0,   385,   386,   387,   388,     0,\n+     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,\n+       0,     0,   400,   401,   402,   403,   404,   405,   406,   407,\n+     408,   409,     0,   411,   412,   413,   414,     0,   415,   416,\n+     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,\n+     508,   428,   429,   430,     0,   431,   432,     0,   433,     0,\n+     435,   436,   437,   438,   439,     0,   440,   441,     0,     0,\n+     442,   443,   444,   445,   446,     0,   447,   448,   449,   450,\n+     451,   452,   453,   454,     0,     0,   455,   456,   457,     0,\n+     458,   459,   460,   461,     0,   462,   463,   464,   465,   466,\n+     467,   468,     0,   469,     0,   471,   472,   473,   474,   475,\n+       0,     0,   476,     0,     0,   477,   478,   479,   480,   481,\n+     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,\n+     492,   493,   494,   495,   496,   497,   748,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,   110,   111,   112,   113,   114,\n      115,   116,   117,     0,   118,   119,   120,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,   122,   123,     0,   124,\n-     125,   126,     0,   128,   129,   130,   131,   132,     0,   134,\n-     135,     0,   136,   137,   138,   139,   140,   141,     0,     0,\n-     142,   143,   144,   145,   146,     0,   147,   148,   149,   150,\n-     151,     0,     0,     0,   153,   154,   155,   156,   157,   158,\n-       0,   160,   161,   162,     0,   163,   164,   165,   166,   167,\n-     168,     0,     0,   170,   171,   172,   173,   174,   175,   176,\n-     177,   178,   179,   180,   181,   182,     0,   183,     0,   184,\n+     749,     0,     0,     0,     0,   750,   122,   123,     0,   124,\n+     125,   126,   751,   128,   129,   130,     0,   752,   753,   754,\n+     755,     0,   136,   137,   138,   139,   140,   141,     0,     0,\n+     142,   143,   756,   757,   146,     0,   147,   148,   149,   150,\n+       0,     0,   758,     0,   759,   154,   155,   156,   157,   158,\n+     760,   160,   161,   162,     0,   163,   164,   165,   166,   167,\n+     168,     0,   761,   170,   171,   172,   173,   174,   175,   176,\n+     177,   178,   179,   762,   763,   182,     0,   183,     0,   184,\n      185,   186,   187,   188,   189,     0,   190,   191,   192,   193,\n-     194,     0,     0,   195,   196,   197,   198,   199,     0,   200,\n+     194,     0,     0,   195,   196,   764,   198,   199,     0,   200,\n      201,   202,     0,   203,   204,   205,     0,   206,   207,   208,\n-     209,   210,   211,   212,   213,   214,   215,   216,     0,   217,\n-       0,   218,   219,   220,   221,     0,   222,     0,   223,     0,\n-       0,     0,   226,   227,   506,     0,   230,     0,   231,     0,\n-     232,   233,   234,     0,   235,   236,   237,   238,   239,  2141,\n-     241,     0,   243,   244,   245,   246,     0,   247,   248,   249,\n-     250,   251,   252,   253,     0,   254,     0,   256,   257,   258,\n-     259,   260,   261,   262,   263,     0,   264,     0,   265,     0,\n-       0,   268,     0,   270,   271,   272,   273,   274,   275,     0,\n-       0,   276,     0,   278,     0,     0,   280,   281,   282,   283,\n-     284,   285,   286,   287,   507,   289,   290,   291,   292,   293,\n+     209,     0,   211,   212,   213,   214,   215,     0,     0,   217,\n+       0,   218,   219,   765,   221,     0,   222,     0,   223,   766,\n+       0,   767,   226,   227,     0,   768,   230,     0,   231,     0,\n+       0,     0,   234,     0,   235,   236,   237,   238,   239,   240,\n+     241,   770,   243,   244,   245,   246,     0,   247,   248,   249,\n+     250,   251,   252,   253,     0,   254,   771,     0,   257,   258,\n+     259,   260,   261,   772,   773,     0,   774,     0,   265,   775,\n+     776,   268,   777,   270,   271,   272,   273,   274,   275,     0,\n+       0,   276,   778,   278,   779,     0,   280,   281,   282,   283,\n+     284,   285,   286,   287,     0,   289,   290,   291,   292,   293,\n      294,   295,   296,   297,   298,   299,   300,   301,   302,   303,\n-     304,   305,   306,   307,     0,   309,   310,   311,   312,   313,\n-       0,   314,   315,     0,   317,     0,   318,   319,   320,   321,\n+     304,   305,   306,   781,   782,   783,   310,   311,   312,     0,\n+       0,   314,   315,   784,   317,     0,     0,   319,   785,   321,\n      322,   323,     0,   324,   325,     0,     0,   326,   327,   328,\n-       0,     0,   329,   330,     0,   332,     0,   334,   335,   336,\n+       0,     0,   329,     0,   786,   332,   787,     0,   335,   336,\n      337,   338,   339,   340,   341,   342,   343,   344,     0,     0,\n-       0,     0,   345,   346,   347,     0,   349,   350,   351,   352,\n+       0,     0,   345,   346,     0,   788,   349,   350,     0,   352,\n      353,   354,     0,   355,   356,   357,   358,   359,   360,     0,\n-     361,   362,   363,   364,   365,   366,   367,   368,     0,   369,\n+     361,   362,   363,   789,   365,   366,   367,   368,     0,   369,\n      370,   371,   372,   373,   374,   375,   376,   377,   378,   379,\n-     380,   381,     0,   382,   383,     0,   385,   386,   387,   388,\n+     380,   381,     0,   382,   383,   790,   385,   386,   387,     0,\n      389,   390,   391,   392,   393,   394,   395,   396,   397,   398,\n-     399,     0,     0,   400,   401,   402,   403,   404,   405,   406,\n-     407,   408,   409,     0,   411,   412,   413,   414,     0,   415,\n+     399,     0,   792,   400,   401,   402,   403,   404,   405,     0,\n+     407,   408,   409,   794,   411,   412,   795,   414,     0,   415,\n      416,   417,   418,   419,   420,   421,   422,   423,   424,   425,\n-     426,   508,   428,   429,   430,     0,   431,   432,     0,   433,\n-       0,   435,   436,   437,   438,   439,     0,   440,   441,     0,\n-       0,   442,   443,   444,   445,   446,     0,   447,   448,   449,\n+     426,     0,   428,     0,   430,     0,   431,   432,     0,   433,\n+     797,   435,   436,   437,   438,   439,     0,   798,   799,     0,\n+       0,   442,   443,     0,   445,     0,     0,   447,   448,   800,\n      450,   451,   452,   453,   454,     0,     0,   455,   456,   457,\n        0,   458,   459,   460,   461,     0,   462,   463,   464,   465,\n-     466,   467,   468,     0,   469,     0,   471,   472,   473,   474,\n-     475,     0,     0,   476,     0,     0,   477,   478,   479,   480,\n-     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,\n-     491,   492,   493,   494,   495,   496,   497,   745,     0,     0,\n+     466,     0,   802,     0,   469,   803,   471,   472,   473,   474,\n+     475,     0,     1,   476,     0,     0,   477,   478,   479,   480,\n+     481,   482,     2,     0,     3,     4,     0,     0,     0,     1,\n+       0,     0,     0,   494,   495,   496,   497,     0,     0,     2,\n+       0,     0,     6,     0,     0,     0,     0,     0,     0,     0,\n+       0,     7,     0,     0,     0,     0,     0,     0,     0,     6,\n+       0,     0,     0,     8,     0,     0,     0,     0,     7,     0,\n+       0,     0,     0,     0,     9,     0,     0,     0,     0,     0,\n+       8,     0,     0,     0,     0,     0,    10,     0,    11,     0,\n+       0,     9,     0,     0,     0,     0,     0,     0,     0,    12,\n+       0,     0,     0,    10,     0,    11,     0,     0,     0,     0,\n+       0,     0,     0,    13,     0,     0,    12,     0,     0,     0,\n+       0,     0,     0,    15,     0,     0,     0,     0,     0,    16,\n+      13,     0,     0,     0,     0,     0,     0,    17,     0,     0,\n+      15,     0,     0,     0,     0,     0,    16,     0,     0,     0,\n+       0,     0,     0,    20,    17,     0,     0,    21,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,   110,   111,   112,   113,\n-     114,   115,   116,   117,     0,   118,   119,   120,     0,     0,\n-       0,   746,     0,     0,     0,     0,   747,   122,   123,     0,\n-     124,   125,   126,   748,   128,   129,   130,     0,   749,   750,\n-     751,   752,     0,   136,   137,   138,   139,   140,   141,     0,\n-       0,   142,   143,   753,   754,   146,     0,   147,   148,   149,\n-     150,     0,     0,   755,     0,   756,   154,   155,   156,   157,\n-     158,   757,   160,   161,   162,     0,   163,   164,   165,   166,\n-     167,   168,     0,   758,   170,   171,   172,   173,   174,   175,\n-     176,   177,   178,   179,   759,   760,   182,     0,   183,     0,\n-     184,   185,   186,   187,   188,   189,     0,   190,   191,   192,\n-     193,   194,     0,     0,   195,   196,   761,   198,   199,     0,\n-     200,   201,   202,     0,   203,   204,   205,     0,   206,   207,\n-     208,   209,     0,   211,   212,   213,   214,   215,     0,     0,\n-     217,     0,   218,   219,   762,   221,     0,   222,     0,   223,\n-     763,     0,   764,   226,   227,     0,   765,   230,     0,   231,\n-       0,     0,     0,   234,     0,   235,   236,   237,   238,   239,\n-     766,   241,   767,   243,   244,   245,   246,     0,   247,   248,\n-     249,   250,   251,   252,   253,     0,   254,   768,     0,   257,\n-     258,   259,   260,   261,   769,   770,     0,   771,     0,   265,\n-     772,   773,   268,   774,   270,   271,   272,   273,   274,   275,\n-       0,     0,   276,   775,   278,   776,     0,   280,   281,   282,\n-     283,   284,   285,   286,   287,   777,   289,   290,   291,   292,\n-     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,\n-     303,   304,   305,   306,   778,   779,   780,   310,   311,   312,\n-       0,     0,   314,   315,   781,   317,     0,     0,   319,   782,\n-     321,   322,   323,     0,   324,   325,     0,     0,   326,   327,\n-     328,     0,     0,   329,     0,   783,   332,   784,     0,   335,\n-     336,   337,   338,   339,   340,   341,   342,   343,   344,     0,\n-       0,     0,     0,   345,   346,     0,   785,   349,   350,     0,\n-     352,   353,   354,     0,   355,   356,   357,   358,   359,   360,\n-       0,   361,   362,   363,   786,   365,   366,   367,   368,     0,\n-     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,\n-     379,   380,   381,     0,   382,   383,   787,   385,   386,   387,\n-     788,   389,   390,   391,   392,   393,   394,   395,   396,   397,\n-     398,   399,     0,   789,   400,   401,   402,   403,   404,   405,\n-     790,   407,   408,   409,   791,   411,   412,   792,   414,     0,\n-     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,\n-     425,   426,   793,   428,     0,   430,     0,   431,   432,     0,\n-     433,   794,   435,   436,   437,   438,   439,     0,   795,   796,\n-       0,     0,   442,   443,     0,   445,     0,     0,   447,   448,\n-     797,   450,   451,   452,   453,   454,   798,     0,   455,   456,\n-     457,     0,   458,   459,   460,   461,     0,   462,   463,   464,\n-     465,   466,     0,   799,     0,   469,   800,   471,   472,   473,\n-     474,   475,     0,     0,   476,     0,     0,   477,   478,   479,\n-     480,   481,   482,   745,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,   494,   495,   496,   497,     0,     0,\n-       0,     0,   110,   111,   112,   113,   114,   115,   116,   117,\n-       0,   118,   119,   120,     0,     0,     0,   746,     0,     0,\n-       0,     0,   747,   122,   123,     0,   124,   125,   126,   748,\n-     128,   129,   130,     0,   749,   750,   751,   752,     0,   136,\n-     137,   138,   139,   140,   141,     0,     0,   142,   143,   753,\n-     754,   146,     0,   147,   148,   149,   150,     0,     0,   755,\n-       0,   756,   154,   155,   156,   157,   158,   757,   160,   161,\n-     162,     0,   163,   164,   165,   166,   167,   168,     0,   758,\n-     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,\n-     759,   760,   182,     0,   183,     0,   184,   185,   186,   187,\n-     188,   189,     0,   190,   191,   192,   193,   194,     0,     0,\n-     195,   196,   761,   198,   199,     0,   200,   201,   202,     0,\n-     203,   204,   205,     0,   206,   207,   208,   209,     0,   211,\n-     212,   213,   214,   215,     0,     0,   217,     0,   218,   219,\n-     762,   221,     0,   222,     0,   223,   763,     0,   764,   226,\n-     227,     0,   765,   230,     0,   231,     0,     0,     0,   234,\n-       0,   235,   236,   237,   238,   239,   240,   241,   767,   243,\n-     244,   245,   246,     0,   247,   248,   249,   250,   251,   252,\n-     253,     0,   254,   768,     0,   257,   258,   259,   260,   261,\n-     769,   770,     0,   771,     0,   265,   772,   773,   268,   774,\n-     270,   271,   272,   273,   274,   275,     0,     0,   276,   775,\n-     278,   776,     0,   280,   281,   282,   283,   284,   285,   286,\n-     287,   777,   289,   290,   291,   292,   293,   294,   295,   296,\n-     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,\n-     778,   779,   780,   310,   311,   312,     0,     0,   314,   315,\n-     781,   317,     0,     0,   319,   782,   321,   322,   323,     0,\n-     324,   325,     0,     0,   326,   327,   328,     0,     0,   329,\n-       0,   783,   332,   784,     0,   335,   336,   337,   338,   339,\n-     340,   341,   342,   343,   344,     0,     0,     0,     0,   345,\n-     346,     0,   785,   349,   350,     0,   352,   353,   354,     0,\n-     355,   356,   357,   358,   359,   360,     0,   361,   362,   363,\n-     786,   365,   366,   367,   368,     0,   369,   370,   371,   372,\n-     373,   374,   375,   376,   377,   378,   379,   380,   381,     0,\n-     382,   383,   787,   385,   386,   387,   788,   389,   390,   391,\n-     392,   393,   394,   395,   396,   397,   398,   399,     0,   789,\n-     400,   401,   402,   403,   404,   405,   790,   407,   408,   409,\n-     791,   411,   412,   792,   414,     0,   415,   416,   417,   418,\n-     419,   420,   421,   422,   423,   424,   425,   426,   793,   428,\n-       0,   430,     0,   431,   432,     0,   433,   794,   435,   436,\n-     437,   438,   439,     0,   795,   796,     0,     0,   442,   443,\n-       0,   445,     0,     0,   447,   448,   797,   450,   451,   452,\n-     453,   454,   798,     0,   455,   456,   457,     0,   458,   459,\n-     460,   461,     0,   462,   463,   464,   465,   466,     0,   799,\n-       0,   469,   800,   471,   472,   473,   474,   475,     0,     0,\n-     476,     0,     0,   477,   478,   479,   480,   481,   482,   745,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-     494,   495,   496,   497,     0,     0,     0,     0,   110,   111,\n-     112,   113,   114,   115,   116,   117,     0,   118,   119,   120,\n-       0,     0,     0,   746,     0,     0,     0,     0,   747,   122,\n-     123,     0,   124,   125,   126,   748,   128,   129,   130,     0,\n-     749,   750,   751,   752,     0,   136,   137,   138,   139,   140,\n-     141,     0,     0,   142,   143,   753,   754,   146,     0,   147,\n-     148,   149,   150,     0,     0,   755,     0,   756,   154,   155,\n-     156,   157,   158,   757,   160,   161,   162,     0,   163,   164,\n-     165,   166,   167,   168,     0,   758,   170,   171,   172,   173,\n-     174,   175,   176,   177,   178,   179,   759,   760,   182,     0,\n-     183,     0,   184,   185,   186,   187,   188,   189,     0,   190,\n-     191,   192,   193,   194,     0,     0,   195,   196,   761,   198,\n-     199,     0,   200,   201,   202,     0,  1759,   204,   205,     0,\n-     206,   207,   208,   209,     0,   211,   212,   213,   214,   215,\n-       0,     0,   217,     0,   218,   219,   762,   221,     0,   222,\n-       0,   223,   763,     0,   764,   226,   227,     0,   765,   230,\n-       0,   231,     0,     0,     0,   234,     0,   235,   236,   237,\n-     238,   239,   240,   241,   767,   243,   244,   245,   246,     0,\n-     247,   248,   249,   250,   251,   252,   253,     0,   254,   768,\n-       0,   257,   258,   259,   260,   261,   769,   770,     0,   771,\n-       0,   265,   772,   773,   268,   774,   270,   271,   272,   273,\n-     274,   275,     0,     0,   276,   775,   278,   776,     0,   280,\n-     281,   282,   283,   284,   285,   286,   287,   777,   289,   290,\n-     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,\n-     301,   302,   303,   304,   305,   306,   778,   779,   780,   310,\n-     311,   312,     0,     0,   314,   315,   781,   317,     0,     0,\n-     319,   782,   321,   322,   323,     0,   324,   325,     0,     0,\n-     326,   327,   328,     0,     0,   329,     0,   783,   332,   784,\n-       0,   335,   336,   337,   338,   339,   340,   341,   342,   343,\n-     344,     0,     0,     0,     0,   345,   346,     0,   785,   349,\n-     350,     0,   352,   353,   354,     0,   355,   356,   357,   358,\n-     359,   360,     0,   361,   362,   363,   786,   365,   366,   367,\n-     368,     0,   369,   370,   371,   372,   373,   374,   375,   376,\n-     377,   378,   379,   380,   381,     0,   382,   383,   787,   385,\n-     386,   387,   788,   389,   390,   391,   392,   393,   394,   395,\n-     396,   397,   398,   399,     0,   789,   400,   401,   402,   403,\n-     404,   405,   790,   407,   408,   409,   791,   411,   412,   792,\n-     414,     0,   415,   416,   417,   418,   419,   420,   421,   422,\n-     423,   424,   425,   426,   793,   428,     0,   430,     0,   431,\n-     432,     0,   433,   794,   435,   436,   437,   438,   439,     0,\n-     795,   796,     0,     0,   442,   443,     0,   445,     0,     0,\n-     447,   448,   797,   450,   451,   452,   453,   454,   798,     0,\n-     455,   456,   457,     0,   458,   459,   460,   461,     0,   462,\n-     463,   464,   465,   466,     0,   799,     0,   469,   800,   471,\n-     472,   473,   474,   475,     0,     0,   476,     0,     0,   477,\n-     478,   479,   480,   481,   482,  2768,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,   494,   495,   496,   497,\n-       0,     0,     0,     0,   110,   111,   112,   113,   114,   115,\n-     116,   117,     0,   118,   119,   120,     0,     0,     0,  2769,\n-       0,     0,     0,     0,  2770,   122,   123,     0,   124,   125,\n-     126,  2771,   128,   129,   130,     0,   749,  2772,   751,   752,\n-       0,   136,   137,   138,   139,   140,   141,     0,     0,   142,\n-     143,   753,   754,   146,     0,   147,   148,   149,   150,     0,\n-       0,  2773,     0,  2774,   154,   155,   156,   157,   158,  2775,\n-     160,   161,   162,     0,   163,   164,   165,   166,   167,   168,\n-       0,  2776,   170,   171,   172,   173,   174,   175,   176,   177,\n-     178,   179,   759,   760,   182,     0,   183,     0,   184,   185,\n-     186,   187,   188,   189,     0,   190,   191,   192,   193,   194,\n-       0,     0,   195,   196,   761,   198,   199,     0,   200,   201,\n-     202,     0,   203,   204,   205,     0,   206,   207,   208,   209,\n-       0,   211,   212,   213,   214,   215,     0,     0,   217,     0,\n-     218,   219,   762,   221,     0,   222,     0,   223,  2777,     0,\n-    2778,   226,   227,  2779,  2780,   230,     0,   231,     0,     0,\n-       0,   234,     0,   235,   236,   237,   238,   239,   240,   241,\n-    2781,   243,   244,   245,   246,     0,   247,   248,   249,   250,\n-     251,   252,   253,     0,   254,  2782,     0,   257,   258,   259,\n-     260,   261,   769,   770,     0,   771,     0,   265,  2783,  2784,\n-     268,  2785,   270,   271,   272,   273,   274,   275,     0,     0,\n-     276,  2786,   278,  2787,     0,   280,   281,   282,   283,   284,\n-     285,   286,   287,  3002,   289,   290,   291,   292,   293,   294,\n-     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,\n-     305,   306,   778,  2789,   780,   310,   311,   312,     0,     0,\n-     314,   315,  2791,   317,     0,     0,   319,   782,   321,   322,\n-     323,     0,   324,   325,     0,     0,   326,   327,   328,     0,\n-       0,   329,     0,  2793,   332,  2794,     0,   335,   336,   337,\n-     338,   339,   340,   341,   342,   343,   344,     0,     0,     0,\n-       0,   345,   346,     0,  2795,   349,   350,     0,   352,   353,\n-     354,     0,   355,   356,   357,   358,   359,   360,     0,   361,\n-     362,   363,   786,   365,   366,   367,   368,     0,   369,   370,\n-     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,\n-     381,     0,   382,   383,  2796,   385,   386,   387,     0,   389,\n-     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,\n-       0,  2797,   400,   401,   402,   403,   404,   405,     0,   407,\n-     408,   409,  2799,   411,   412,   792,   414,     0,   415,   416,\n-     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,\n-    3003,   428,     0,   430,     0,   431,   432,     0,   433,  2801,\n-     435,   436,   437,   438,   439,     0,   795,   796,     0,     0,\n-     442,   443,     0,   445,     0,     0,   447,   448,  2802,   450,\n-     451,   452,   453,   454,     0,     0,   455,   456,   457,     0,\n-     458,   459,   460,   461,     0,   462,   463,   464,   465,   466,\n-       0,   799,     0,   469,  2804,   471,   472,   473,   474,   475,\n-       0,     0,   476,     0,     0,   477,   478,   479,   480,   481,\n-     482,   505,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,   494,   495,   496,   497,     0,     0,     0,     0,\n-     110,   111,   112,   113,   114,   115,   116,   117,     0,   118,\n-     119,   120,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,   122,   123,     0,   124,   125,   126,     0,   128,   129,\n-     130,   131,   132,     0,   134,   135,     0,   136,   137,   138,\n-     139,   140,   141,     0,     0,   142,   143,   144,   145,   146,\n-       0,   147,   148,   149,   150,   151,     0,     0,     0,   153,\n-     154,   155,   156,   157,   158,     0,   160,   161,   162,     0,\n-     163,   164,   165,   166,   167,   168,     0,     0,   170,   171,\n-     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,\n-     182,     0,   183,     0,   184,   185,   186,   187,   188,   189,\n-       0,   190,   191,   192,   193,   194,     0,     0,   195,   196,\n-     197,   198,   199,     0,   200,   201,   202,     0,   203,   204,\n-     205,     0,   206,   207,   208,   209,   210,   211,   212,   213,\n-     214,   215,   216,     0,   217,     0,   218,   219,   220,   221,\n-       0,   222,     0,   223,     0,     0,     0,   226,   227,   506,\n-       0,   230,     0,   231,     0,   232,   233,   234,     0,   235,\n-     236,   237,   238,   239,   240,   241,     0,   243,   244,   245,\n-     246,     0,   247,   248,   249,   250,   251,   252,   253,     0,\n-     254,     0,   256,   257,   258,   259,   260,   261,   262,   263,\n-       0,   264,     0,   265,     0,     0,   268,     0,   270,   271,\n-     272,   273,   274,   275,     0,     0,   276,     0,   278,     0,\n-       0,   280,   281,   282,   283,   284,   285,   286,   287,   507,\n-     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,\n-     299,   300,   301,   302,   303,   304,   305,   306,   307,     0,\n-     309,   310,   311,   312,   313,     0,   314,   315,     0,   317,\n-       0,   318,   319,   320,   321,   322,   323,     0,   324,   325,\n-       0,     0,   326,   327,   328,     0,     0,   329,   330,     0,\n-     332,     0,   334,   335,   336,   337,   338,   339,   340,     0,\n-     342,   343,   344,     0,     0,     0,     0,   345,   346,   347,\n-       0,   349,   350,   351,   352,   353,   354,     0,   355,   356,\n-     357,   358,   359,   360,     0,   361,     0,   363,   364,   365,\n-     366,   367,   368,     0,   369,   370,   371,   372,   373,   374,\n-     375,   376,   377,   378,   379,   380,   381,     0,   382,   383,\n-       0,   385,   386,   387,   388,     0,   390,   391,   392,   393,\n-     394,   395,   396,   397,   398,   399,     0,     0,   400,   401,\n-     402,   403,   404,   405,   406,   407,   408,   409,     0,   411,\n-     412,   413,   414,     0,   415,   416,   417,   418,   419,   420,\n-     421,   422,   423,   424,   425,   426,   508,   428,   429,   430,\n-       0,   431,   432,     0,   433,     0,   435,   436,   437,   438,\n-     439,     0,   440,   441,     0,     0,   442,   443,   444,   445,\n-     446,     0,   447,   448,   449,   450,   451,   452,   453,   454,\n-       0,     0,   455,   456,   457,     0,   458,   459,   460,   461,\n-       0,   462,   463,   464,   465,   466,   467,   468,     0,   469,\n-       0,   471,   472,   473,   474,   475,     0,     0,   476,     0,\n-       0,   477,   478,   479,   480,   481,   482,   483,   484,   485,\n-     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,\n-     496,   497,   745,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,   110,   111,   112,   113,   114,   115,   116,   117,     0,\n-     118,   119,   120,     0,     0,     0,   746,     0,     0,     0,\n-       0,   747,   122,   123,     0,   124,   125,   126,   748,   128,\n-     129,   130,     0,   749,   750,   751,   752,     0,   136,   137,\n-     138,   139,   140,   141,     0,     0,   142,   143,   753,   754,\n-     146,     0,   147,   148,   149,   150,     0,     0,   755,     0,\n-     756,   154,   155,   156,   157,   158,   757,   160,   161,   162,\n-       0,   163,   164,   165,   166,   167,   168,     0,   758,   170,\n-     171,   172,   173,   174,   175,   176,   177,   178,   179,   759,\n-     760,   182,     0,   183,     0,   184,   185,   186,   187,   188,\n-     189,     0,   190,   191,   192,   193,   194,     0,     0,   195,\n-     196,   761,   198,   199,     0,   200,   201,   202,     0,   203,\n-     204,   205,     0,   206,   207,   208,   209,     0,   211,   212,\n-     213,   214,   215,     0,     0,   217,     0,   218,   219,   762,\n-     221,     0,   222,     0,   223,   763,     0,   764,   226,   227,\n-       0,   765,   230,     0,   231,     0,     0,     0,   234,     0,\n-     235,   236,   237,   238,   239,   240,   241,   767,   243,   244,\n-     245,   246,     0,   247,   248,   249,   250,   251,   252,   253,\n-       0,   254,   768,     0,   257,   258,   259,   260,   261,   769,\n-     770,     0,   771,     0,   265,   772,   773,   268,   774,   270,\n-     271,   272,   273,   274,   275,     0,     0,   276,   775,   278,\n-     776,     0,   280,   281,   282,   283,   284,   285,   286,   287,\n-       0,   289,   290,   291,   292,   293,   294,   295,   296,   297,\n-     298,   299,   300,   301,   302,   303,   304,   305,   306,   778,\n-     779,   780,   310,   311,   312,     0,     0,   314,   315,   781,\n-     317,     0,     0,   319,   782,   321,   322,   323,     0,   324,\n-     325,     0,     0,   326,   327,   328,     0,     0,   329,     0,\n-     783,   332,   784,     0,   335,   336,   337,   338,   339,   340,\n-     341,   342,   343,   344,     0,     0,     0,     0,   345,   346,\n-       0,   785,   349,   350,     0,   352,   353,   354,     0,   355,\n-     356,   357,   358,   359,   360,     0,   361,   362,   363,   786,\n-     365,   366,   367,   368,     0,   369,   370,   371,   372,   373,\n-     374,   375,   376,   377,   378,   379,   380,   381,     0,   382,\n-     383,   787,   385,   386,   387,     0,   389,   390,   391,   392,\n-     393,   394,   395,   396,   397,   398,   399,     0,   789,   400,\n-     401,   402,   403,   404,   405,     0,   407,   408,   409,   791,\n-     411,   412,   792,   414,     0,   415,   416,   417,   418,   419,\n-     420,   421,   422,   423,   424,   425,   426,     0,   428,     0,\n-     430,     0,   431,   432,     0,   433,   794,   435,   436,   437,\n-     438,   439,     0,   795,   796,     0,     0,   442,   443,     0,\n-     445,     0,     0,   447,   448,   797,   450,   451,   452,   453,\n-     454,     0,     0,   455,   456,   457,     0,   458,   459,   460,\n-     461,     0,   462,   463,   464,   465,   466,     0,   799,     0,\n-     469,   800,   471,   472,   473,   474,   475,     0,     1,   476,\n-       0,     0,   477,   478,   479,   480,   481,   482,     2,     0,\n-       3,     4,     0,     0,     0,     1,     0,     0,     0,   494,\n-     495,   496,   497,     0,     0,     2,     0,     0,     6,     0,\n-       0,     0,     0,     0,     0,     0,     0,     7,     0,     0,\n-       0,     0,     0,     0,     0,     6,     0,     0,     0,     8,\n-       0,     0,     0,     0,     7,     0,     0,     0,     0,     0,\n-       9,     0,     0,     0,     0,     0,     8,     0,     0,     0,\n-       0,     0,    10,     0,    11,     0,     0,     9,     0,     0,\n-       0,     0,     0,     0,     0,    12,     0,     0,     0,    10,\n-       0,    11,     0,     0,     0,     0,     0,     0,     0,    13,\n-       0,     0,    12,     0,     0,     0,     0,     0,     0,    15,\n-       0,     0,     0,     0,     0,    16,    13,     0,     0,     0,\n-       0,     0,     0,    17,     0,     0,    15,     0,     0,     0,\n-       0,     0,    16,     0,     0,     0,     0,     0,     0,    20,\n-      17,     0,     0,    21,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,    20,     0,     0,     0,\n-      21,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+      20,     0,     0,     0,    21,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,    23,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,    23,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,    23,     0,     0,     0,     0,     0,     0,     0,     0,\n-      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,    24,     0,     0,\n+       0,     0,     0,     0,     0,    23,     0,     0,     0,     0,\n+       0,     0,     0,     0,    24,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,    24,     0,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,    25,    26,    27,     0,     0,     0,     0,     0,    28,\n-       0,     0,    29,     0,     0,     0,     0,     0,    25,    26,\n-      27,     0,     0,     0,     0,     0,    28,     0,     0,    29,\n+       0,     0,     0,     0,     0,    25,    26,    27,     0,     0,\n+       0,     0,     0,    28,     0,     0,    29,     0,     0,     0,\n+       0,     0,    25,    26,    27,     0,     0,     0,     0,     0,\n+      28,     0,     0,    29,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,    30,     0,     0,     0,     0,\n+       0,     0,     0,     0,    31,     0,     0,     0,     0,     0,\n+       0,     0,    30,     0,     0,     0,     0,     0,    32,     0,\n+       0,    31,     0,     0,     0,    33,     0,     0,     0,    34,\n+       0,     0,     0,     0,     0,    32,     0,     0,     0,    35,\n+       0,     0,    33,     0,     0,     0,    34,     0,     0,     0,\n+       0,    36,     0,     0,     0,    37,    35,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,    36,     0,\n+       0,     0,    37,     0,    38,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,    39,     0,     0,\n+       0,    38,     0,    41,     0,     0,     0,     0,    42,     0,\n+       0,     0,   562,     0,    39,     0,     0,     0,     0,     0,\n+      41,     0,    43,     0,     0,    42,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,    43,\n+       0,     0,     0,     0,     0,     0,    44,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,    30,     0,     0,     0,     0,     0,     0,     0,     0,\n-      31,     0,     0,     0,     0,     0,     0,     0,    30,     0,\n-       0,     0,     0,     0,    32,     0,     0,    31,     0,     0,\n-       0,    33,     0,     0,     0,    34,     0,     0,     0,     0,\n-       0,    32,     0,     0,     0,    35,     0,     0,    33,     0,\n-       0,     0,    34,     0,     0,     0,     0,    36,     0,     0,\n-       0,    37,    35,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,    36,     0,     0,     0,    37,     0,\n-      38,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,    39,     0,     0,     0,    38,     0,    41,\n-       0,     0,     0,     0,    42,     0,     0,     0,   562,     0,\n-      39,     0,     0,     0,     0,     0,    41,     0,    43,     0,\n-       0,    42,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,    43,     0,     0,     0,     0,\n-       0,     0,    44,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,   563,     0,     0,    44,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,    45\n+     563,     0,     0,    44,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,    45\n };\n \n static const yytype_int16 yycheck[] =\n {\n-       7,    69,    45,   557,   498,   623,   705,   555,   722,     0,\n-     937,     0,     0,     0,    21,  1161,     0,   563,     0,     0,\n-       0,   646,   790,  1172,   821,   669,  1159,   824,     0,     7,\n-     691,   717,   917,     0,   978,  1445,   713,   796,    18,  1628,\n-    1336,  1139,  2082,    21,   917,    36,  1515,  1128,  1136,  2137,\n-      18,  1589,    73,  2053,  1493,  2055,  1134,   555,  1731,   705,\n-      73,   707,  2072,   709,    71,    72,    37,  2183,  2184,  2185,\n-    1289,   928,   562,  1341,   563,  1095,  1164,   928,  1542,  1543,\n-    1062,   928,   619,   558,   928,  1067,  2505,   624,  2537,  2535,\n-    2019,  1385,     0,    71,    72,     0,  2505,     0,  2133,     0,\n-       0,     0,  1029,    94,     0,  2071,  1031,     0,    44,  2557,\n-       0,     0,     0,     0,  2550,     0,   753,   754,     0,  2381,\n-       0,     5,   616,     0,     0,  1749,     0,     0,     0,    24,\n-    2196,     0,   586,   104,     5,    13,    14,  1746,    21,     5,\n-       0,     0,  1646,   780,    55,  1648,   686,    13,    14,    63,\n-       5,   681,  2849,     5,  1874,  1593,  2461,    78,    13,    14,\n-    2465,    13,    14,     5,     5,     5,     5,   661,     5,     5,\n-       9,    13,    14,    13,    14,     9,     5,     5,  2213,     5,\n-       4,     9,     5,     5,   828,     9,     5,     5,    71,    72,\n-       7,     5,  2203,     5,   168,    45,   115,     5,    11,  2207,\n-    1073,   135,    72,    16,    21,    30,   118,   105,    71,    72,\n-      53,   120,     5,    38,     5,   686,    63,    63,     5,    23,\n-      24,     5,  2354,   185,   118,    63,  2836,    13,    14,     3,\n-       4,     5,    63,    46,   176,     9,    21,     9,    98,    98,\n-    2697,    11,  2852,    45,   239,   239,    16,  2282,  2283,    30,\n-    2285,    30,   280,   283,    71,    72,   169,    38,    88,    38,\n-       8,  3006,  1021,    11,   282,    78,   268,    15,    16,   946,\n-     167,    19,    20,    21,  2743,  1148,  2813,    80,  1151,  1152,\n-      11,  2678,   926,  2680,    15,    16,    71,    72,    91,   304,\n-     105,   118,   790,     3,   164,   125,  1329,   368,   288,   143,\n-     168,   187,   356,   107,   304,   115,   133,  1907,  1908,  2425,\n-     271,   929,  1256,   207,   221,    46,   167,  3126,  1918,   395,\n-      40,  1265,  1922,  2475,    34,    35,    30,   240,   288,   172,\n-      11,    73,    64,    80,    15,    16,  2336,    30,   167,   113,\n-      72,   377,   357,  3157,    91,   188,    11,    78,   128,  2424,\n-     193,  2426,   113,    40,   333,   347,   161,   145,   265,   996,\n-     997,     4,  3188,    30,    33,   418,     9,   361,   212,  2042,\n-     116,   917,   464,    13,    14,  1012,   106,  3181,  3182,  1147,\n-     456,    46,   404,   375,  1028,   106,  2474,   187,   231,  2798,\n-      59,   370,    11,   930,   486,  2844,    15,    16,    11,   489,\n-    2846,  1078,    15,    16,    41,   942,  2855,   195,  3217,  2449,\n-     500,  3220,   465,    78,   113,  2567,    83,  3027,   265,   441,\n-     333,   382,   282,   282,   128,    92,   405,    46,  3125,  3233,\n-     920,   977,   300,   504,   348,   128,  2471,   439,  2473,   213,\n-    1460,   436,   436,   189,   288,   193,   500,   114,  2377,   319,\n-     265,   171,  3278,  1900,  1901,  1902,   166,   370,   168,    78,\n-     346,   235,   272,  3231,   500,  3279,   208,  3004,   216,   299,\n-     500,   378,   500,  1493,  1507,   454,   305,   306,   307,  2876,\n-     495,   979,   500,  1127,   171,   122,   185,  1926,  1413,   349,\n-     349,   318,   405,  2625,  2951,   495,  2965,   277,  1123,  1124,\n-     442,   348,   348,   235,  3313,   500,   500,   405,  3253,   314,\n-     348,   272,  1806,   381,   504,  2984,  1735,   348,   185,   416,\n-     563,  3218,   162,   514,   458,   444,   500,   439,   375,  1075,\n-    1076,   198,   439,   442,  2609,  2546,   284,   380,   500,   368,\n-    1034,   454,   157,   343,   504,   439,     8,  3315,   555,    11,\n-    2019,  2586,   402,    15,    16,  2563,   563,    19,    20,    21,\n-     385,   258,    80,   433,     4,   416,   392,   393,   267,     9,\n-    1100,   614,  2292,    91,    36,  1073,   405,   498,   106,  3015,\n-     410,   502,   562,    80,  2088,  1125,  2089,  3006,   432,   500,\n-     504,  2215,   489,  2057,    91,   563,   603,  3006,  1676,  2208,\n-     402,   157,   462,   462,   385,   502,   385,   614,   437,  3219,\n-     451,   106,  2081,   416,   311,   956,   500,   232,  1764,   448,\n-       0,   962,   500,   691,   508,   603,  2714,   498,  1314,   500,\n-    1555,   502,  1293,   462,   500,  1089,   614,  2075,   659,   646,\n-     647,   501,   501,   503,   503,   500,   659,  1591,   500,  1147,\n-    2912,  2956,   464,   508,  1125,  2721,  2961,   486,   500,   500,\n-     500,   500,   669,   500,   500,   499,   504,   491,   492,   416,\n-    1819,   500,   500,   504,   486,  3124,   232,   500,   500,   159,\n-     464,   500,   500,   496,  3132,  1329,   500,   678,   500,   678,\n-     678,   678,   500,   664,   678,  3131,   678,   678,   678,   667,\n-    1337,  1338,   486,   598,   711,   712,   678,   500,   715,   500,\n-     681,   678,  1931,   500,   500,  2831,   500,   491,   492,   491,\n-     492,   251,   252,   279,   391,     8,   496,   394,    11,  2695,\n-     197,   614,    15,    16,   670,   405,    19,    20,    21,   487,\n-     488,   489,   452,   491,   492,   493,   494,   495,   496,  2043,\n-    2350,   614,   961,    11,   216,  2938,   965,  2940,  1306,   442,\n-     491,   492,   493,   494,   495,   496,  1691,   495,  1693,  3215,\n-     678,   104,  2701,   678,   502,   678,   500,   678,   678,   678,\n-    3229,   116,   678,   790,   264,   678,   603,  1335,   678,   678,\n-     678,   678,   596,   678,   598,   239,   678,   614,   678,  2834,\n-     159,   678,   678,  1351,   678,   678,   678,  1451,  1306,   678,\n-     491,   492,   493,   494,   495,   496,   504,   500,   603,   462,\n-      78,   828,   284,  2748,   628,  3271,   173,   128,  1772,   614,\n-    1384,  2756,  1705,  1387,  3253,   365,   366,  1335,  1336,  1393,\n-    1465,   239,  1715,   486,  3253,  1718,   650,   239,   491,   492,\n-    1396,   144,    59,  1351,   189,  1844,   328,  1482,    26,  1536,\n-    1537,  1538,  1506,  1507,    32,   267,   225,  1887,   503,  3052,\n-     272,   442,  1516,   157,   493,   494,   495,   496,   162,  2967,\n-     493,   494,   495,   496,   489,   357,  1875,   239,   235,  3338,\n-    2337,  2338,  2339,  2340,   361,  1539,   128,   502,   239,    69,\n-      70,   194,   169,   370,  2314,  1395,  1926,  1396,  2377,    72,\n-     917,   115,   245,  1895,  1389,   462,  3319,   361,   925,   926,\n-     253,  1458,   173,   155,   931,   327,  2390,   934,   935,   500,\n-     937,   938,   939,   940,   128,  1820,    26,  2947,   405,   486,\n-     920,   409,    32,   411,  1801,  1439,   953,  1820,   232,  1800,\n-     113,  1971,  3355,   960,  1801,  1802,  1803,  1801,  1802,     4,\n-     167,   155,   452,   361,     9,   133,   267,  2186,    26,   361,\n-     977,   978,   979,   240,  2242,   953,   277,  3085,  2059,  3087,\n-    2061,  2249,   960,  2251,   235,  1782,  1029,   454,   995,     4,\n-      40,     5,   436,   495,     9,   279,  2669,   201,  1546,   500,\n-     502,   284,  1701,     4,  1558,   343,  1013,  1804,     9,   361,\n-      60,  1808,  3100,   501,  1811,  2161,   504,  1024,  1025,  1026,\n-     361,  1028,  1029,   197,  1031,   487,   488,   489,  1674,   491,\n-     492,   493,   494,   495,   496,   267,  2505,   498,   436,  1753,\n-     272,   502,  1827,   133,   436,   277,  1831,   501,  1546,  1834,\n-     504,  1058,   157,  3161,   104,  1701,   500,   162,   409,  3175,\n-     411,   265,   409,   267,   411,   498,   333,   500,  1075,  1076,\n-     953,  1732,  1733,  1734,  1720,   133,   498,   960,   272,  1725,\n-     502,  2169,   186,   277,   436,  1106,  1107,     3,  1109,   436,\n-     953,  2111,   464,  1106,  1107,   436,  1109,   960,   305,   306,\n-     307,  1108,   500,   370,   267,  1112,  1113,  2403,   500,   272,\n-     361,   143,   246,   917,   486,  1122,  1123,  1124,   286,   464,\n-    1127,   173,  2049,   421,   928,   157,  2224,   232,   500,  1100,\n-     162,   951,  2230,   498,  1682,  1779,   953,   502,   405,   405,\n-    1147,   486,   333,   960,   221,   197,   196,   364,   500,   969,\n-     498,   454,   500,   973,   502,   500,   319,  1711,   409,   500,\n-     411,   368,  1716,   462,  2603,   464,   555,   760,   953,   409,\n-     500,   411,   335,   977,   279,   960,   162,   345,   501,   370,\n-     212,   504,   500,   235,  1682,   436,   500,   454,   265,   782,\n-     501,   423,  1163,   504,   501,   245,   286,   504,   405,   409,\n-     232,   411,   434,   253,   487,   488,   489,   375,   491,   492,\n-     493,   494,   495,   496,   405,   265,    13,    14,  2143,  2144,\n-    2145,   500,  1450,   816,  1452,  1453,    13,    14,   286,   423,\n-     437,   500,  2701,   501,  1038,   287,   504,    13,    14,  1883,\n-     434,   448,  3330,  1047,  1792,   501,   296,   279,   504,  1256,\n-     500,   341,   329,   500,     8,   345,   288,    11,  1265,   167,\n-    1064,    15,    16,   454,   500,    19,    20,    21,   493,  1073,\n-     433,  1075,  1076,   935,  1820,    12,  3316,   445,  3318,   442,\n-      17,   501,  1289,  3283,   504,   375,   500,   345,  1836,   347,\n-      13,    14,    29,   500,  1792,   500,    26,   347,  3298,  1306,\n-    1848,   378,    32,  2143,  2600,  2145,    43,    44,   648,   649,\n-     500,   651,   501,   486,  3354,   504,  1305,   375,  1305,  2471,\n-     370,  2473,  1329,  1305,  1305,    26,    13,    14,  1335,  1336,\n-    1878,    32,  2352,   683,   500,   685,  2356,  1885,  1836,   389,\n-      13,    14,  2488,  2140,  1351,  2142,   501,   483,  3348,   504,\n-    1848,  2276,   218,  3353,  2487,   445,   502,   409,   282,   411,\n-     483,  2657,   439,  2007,   501,   102,     6,   504,   501,     9,\n-     502,   504,   183,   184,   501,  1923,    16,   504,  1385,  1927,\n-    1878,   433,   166,  1929,   436,  1933,  2271,  1885,  2486,  1396,\n-    2488,    31,   504,  2054,  2472,    35,   167,  2530,   501,   501,\n-     432,   790,   504,   133,   500,     8,  1413,  1000,    11,    13,\n-      14,  1418,    15,    16,   501,  1395,    19,    20,    21,   287,\n-     501,   501,  1015,   504,   504,  1923,    13,    14,  1396,  1927,\n-    1437,  1438,   133,    36,   501,  1933,  1443,   504,  1445,   193,\n-     251,   252,    26,  1450,  1451,  1452,  1453,   501,    32,    59,\n-     504,   501,   501,   501,  2381,   504,   504,   501,  1465,  1466,\n-     504,   501,   216,  1470,   504,  1472,   498,  1445,  1475,   501,\n-     502,   501,   500,  1480,   504,  1482,  1483,   501,  1485,   406,\n-     504,   501,  1489,   501,   504,   483,   504,  2246,  2247,   218,\n-     501,  2116,  1470,   504,  1472,   501,   148,  1475,   504,  1506,\n-    1507,   341,  1480,   148,  1511,  1483,  1513,  1485,    40,  1516,\n-     501,  1489,  1503,   504,   501,  1503,   148,   504,   501,  1503,\n-    2206,   504,   501,  1503,   148,   504,    13,    14,  1535,   501,\n-     284,  1503,  1539,   500,  1541,   267,  1503,  3006,    40,  1546,\n-    1547,  1548,  1549,  1550,  1551,  1552,  1553,  1554,  1555,   133,\n-    3088,   454,  1559,  1560,   365,   366,   286,  1564,     0,    13,\n-      14,  1568,    13,    14,  1571,  1572,  1573,  1574,  1575,  1576,\n-    1577,  1578,  1579,    87,  2870,  1582,    18,  2502,   148,    21,\n-     466,  2506,  1589,  2508,  1591,   286,   451,  1470,   500,  1472,\n-     979,   315,  1475,   500,    36,    13,    14,  1480,    37,   148,\n-    1483,   500,  1485,    45,   500,  1612,  1489,  1470,  1412,  1472,\n-    1631,   341,  1475,   216,    40,   345,  2762,  1480,  1631,   500,\n-    1483,   500,  1485,    13,    14,    39,  1489,  1634,  1445,    71,\n-      72,    73,  2505,  3043,    60,    13,    14,  2715,  1645,  1646,\n-     341,   148,  1610,   502,   345,   375,    13,    14,    13,    14,\n-      13,    14,    94,  1470,   148,  1472,    13,    14,  1475,   148,\n-    1445,    13,    14,  1480,    13,    14,  1483,   282,  1485,  2217,\n-      13,    14,  1489,   416,   375,  1682,    13,    14,   104,    13,\n-      14,   284,    26,  2832,  1691,  1470,  1693,  1472,    32,   501,\n-    1475,   500,  3281,    13,    14,  1480,  3285,   500,  1483,   500,\n-    1485,   500,   286,   407,  1489,    13,    14,   356,   357,   356,\n-     357,   255,   256,  2267,   214,   445,   219,   365,   366,  2217,\n-     356,   357,   356,   357,  1731,  2271,  2670,   291,  1735,   168,\n-     500,  1738,  1739,   487,   488,   489,   219,   491,   492,   493,\n-     494,   495,   496,   219,   445,   171,   289,   447,   448,   500,\n-    3339,  1075,  1076,    40,    40,   230,   500,   341,  1147,     5,\n-       5,   345,   500,  2440,   203,  1772,   500,   500,     5,   500,\n-     196,     5,  1779,   500,    60,  1437,  1438,  1768,  3188,     5,\n-     219,  1443,  2579,   500,  3253,  1792,     5,     9,   144,   133,\n-     229,   375,   529,   500,   463,  1599,   293,   102,   504,  1806,\n-      40,   504,   501,   214,     8,   279,   375,    11,   162,   162,\n-     277,    15,    16,  1820,   230,    19,    20,    21,   104,   245,\n-    3230,    59,   559,   500,   416,   500,  2540,   253,    91,  1836,\n-     504,   416,    36,  1840,  1841,    59,  1843,   416,  2463,   265,\n-     416,  1848,  1849,  1850,  1851,  1852,  1853,  1854,    59,   258,\n-    1857,  1858,  1859,  1860,  1861,  1862,  1863,  1864,  1865,  1866,\n-     510,   445,  2523,   416,   462,  1872,  1873,   148,  3278,  1876,\n-     296,  1878,   267,    98,  2560,   267,  1883,   500,  1885,  3012,\n-    2753,    40,   267,   267,   487,   488,   489,   500,   491,   492,\n-     493,   494,   495,   496,     3,   500,     9,    39,  1905,   414,\n-      72,   414,  1909,   498,  1911,  2403,    78,   498,  1915,   502,\n-     196,   416,   416,   352,   167,   416,  1923,  1306,   416,    91,\n-    1927,   347,  1929,   501,  1931,   500,  1933,   501,   501,   501,\n-     369,  1909,   459,   670,   143,  1942,   501,  1915,   501,   501,\n-     501,   113,   286,   115,   370,   504,  1335,  1336,   157,   219,\n-     219,   274,   274,   162,   500,   500,   504,  2505,  2885,   245,\n-      11,  2905,  1351,   389,  2007,   458,  1973,   253,  2765,  2766,\n-     343,  1978,  1979,  3122,   499,   504,   510,   414,   504,   265,\n-     500,  2866,   272,    37,   500,   509,   416,   176,   158,   167,\n-     501,   500,   504,   442,   212,  2002,  2003,   341,   504,    26,\n-    2007,   345,   258,   212,   378,    32,   221,  2505,   283,   304,\n-     296,   304,   216,   504,  2021,   176,  1820,  2024,   504,  2026,\n-     214,   501,  1826,   232,   221,   267,  1909,  2575,   500,   201,\n-    2798,   375,  1915,   221,   288,  2042,  2043,   280,   500,   324,\n-     500,   454,  2049,   148,   148,  2052,  1909,  3067,   148,   148,\n-     462,    40,  1915,   267,   282,   501,   501,   498,   483,   483,\n-    2067,   347,   282,   501,    40,   501,   501,   501,    59,   167,\n-     279,    11,   514,  2080,  2052,  2066,  2630,  2575,  2066,   288,\n-     284,    40,  2066,   162,   370,   500,  2066,   176,   162,  2067,\n-    2097,  2098,  1909,   501,  2066,   267,   501,   501,  1915,  2066,\n-     272,   445,  2600,   389,   501,   501,   133,  2114,   499,  2116,\n-    3256,   500,   500,   416,   168,     8,   509,   504,  2125,   502,\n-     562,   563,    15,    16,  1909,  1929,    19,    20,    21,   501,\n-    1915,   501,   501,  3006,   167,   483,  2143,  2144,  2145,   500,\n-     500,   500,   500,   151,   459,    40,    59,   319,   489,   203,\n-     485,   283,   283,   504,   504,   439,   238,  1546,    59,  2657,\n-      59,   603,   258,   335,   416,   219,   267,   500,  2211,  2052,\n-     148,   197,   614,   148,   148,   229,  3101,   416,   499,  2186,\n-    2734,   416,   274,   416,  2067,   416,   274,  1849,  1850,  1851,\n-    1852,  1853,  1854,    40,   501,  1857,  1858,  1859,  1860,  1861,\n-    1862,  1863,  1864,  1865,  1866,   343,   500,   504,     7,     8,\n-    2217,   280,  2201,    12,  2201,   282,  2764,   659,    17,  2201,\n-    2201,   501,    21,   432,    23,    24,   462,    40,  2235,    28,\n-      29,    30,   148,   501,    33,  2052,   678,    36,    37,   499,\n-     499,    40,   272,   167,    43,    44,   501,   167,    59,   500,\n-    2067,   500,   180,   501,   501,   162,    78,   501,   139,   286,\n-     501,   433,   193,   167,  2271,   349,  2764,  2052,   500,  2276,\n-     442,   501,    71,    72,   501,   292,   283,   500,   176,   148,\n-     501,   510,  2067,   487,   488,   489,   171,   491,   492,   493,\n-     494,   495,   496,  1682,   504,    94,   501,   500,   352,  2985,\n-    2798,   501,   101,   102,   103,   104,   105,  2314,   504,   501,\n-     500,   427,    40,   500,   341,   369,   501,  3244,   345,   501,\n-    2866,   501,   501,   504,   500,   143,    40,    84,   442,   504,\n-    3255,   499,   167,   500,   461,   501,  2314,   501,  2381,   157,\n-    2002,  2003,   193,   501,   162,   501,  2150,  2354,   375,   504,\n-    2418,   501,   501,   448,   489,   282,    59,  1094,   501,   462,\n-     501,    37,   501,  2370,   501,   199,    42,  2374,  2375,   113,\n-    2413,   173,  2870,    40,  2381,   500,  2354,   221,    86,   186,\n-    3253,   305,   306,   307,  2391,   272,   272,  2394,   416,  2396,\n-    2194,   284,   502,   416,   212,   197,  2403,  2404,   489,   501,\n-    2407,  2408,    40,  1792,   267,  2412,  2413,  2211,  3069,  3053,\n-     500,  3055,  2419,  3090,   232,   502,   502,   502,   445,   502,\n-    2463,   502,   502,    99,   502,   502,  2433,   502,   105,   502,\n-     502,   502,   502,   235,   502,    40,  2443,   502,   502,   502,\n-    3065,   502,   502,   502,   368,   502,  2437,  1836,   462,   502,\n-    3068,   282,   502,  3071,   502,   502,  2463,   502,  3006,  1848,\n-     502,   279,   502,   502,   502,   502,   500,  2271,     9,   342,\n-     288,   500,   504,   326,  2278,   500,  2280,    96,   920,   501,\n-    2284,   405,  2286,   504,    59,   287,   501,   193,   186,  1878,\n-     499,   504,   168,   447,    89,  2502,  1885,  2314,  2505,  2506,\n-    3199,  2508,   501,   335,  3190,   500,    40,   148,  3006,   501,\n-     120,   953,   148,   437,    40,   501,   357,   357,   960,  3180,\n-      40,   501,    40,   500,   448,   504,   301,   203,     3,  2314,\n-       5,   500,   442,   500,  1923,   500,   272,   185,  1927,   243,\n-     442,    72,   500,   219,  1933,  2536,   285,   427,   167,   991,\n-    2539,  3176,  2539,   229,    78,    72,     9,  2539,  2539,   361,\n-    1002,   359,   501,   501,   500,    59,   501,   129,  2575,    91,\n-     489,  2562,   265,   282,  2565,   427,   500,    40,   500,  2622,\n-     285,   447,   500,   285,   501,   261,   501,  1029,   199,   501,\n-    2597,   282,   501,  2600,   487,   488,   489,   282,   491,   492,\n-     493,   494,   495,   496,   501,   375,   282,   409,   118,   411,\n-    2617,  2618,   439,   356,   432,  2622,    25,    36,  2625,  2138,\n-     678,  1699,  2489,  2502,  3092,   427,  3230,  2634,  3184,   305,\n-    2441,   433,   107,   108,   436,  3329,   312,  2758,  3205,  2646,\n-    3308,  2978,  3257,  3266,  2651,  2652,  3301,  2625,  2691,  2656,\n-    2657,  3029,  1134,  1390,  2661,  1392,  2131,  2664,  2665,  2144,\n-    3154,  3255,  2669,  2670,  1106,  1107,  2673,  1109,  3264,  2128,\n-    2677,  3252,  2481,  3227,  1384,  2508,   352,  2684,  1335,  2200,\n-     498,  1303,  2276,  2866,   502,  2114,   305,   306,   307,  2551,\n-     952,  1094,  2080,   369,   952,  1670,  1116,  2532,  1115,  2677,\n-    3239,  2505,    37,  2335,  2097,  3253,  1634,    42,   183,   184,\n-    3163,  3057,  1669,    21,  2067,  2625,   515,  1118,  1921,  2909,\n-     519,  2728,   614,   522,   930,   603,  2314,  2313,  2532,  2736,\n-     529,  2362,  2999,  1353,  3167,   928,  3166,   928,  1980,  3294,\n-    2025,  2375,   928,  1943,   928,  2407,  2408,  2081,  2755,   368,\n-    2022,  1466,  2684,  1982,  2066,  3253,  3152,  2764,   557,   558,\n-     559,   437,  2388,  1396,    99,  1929,   442,   597,  1610,  2442,\n-    1611,    14,   247,   248,   249,   250,   251,   252,    30,    94,\n-     255,   256,    -1,    -1,    -1,    12,   405,    -1,    -1,    -1,\n-      17,  2798,    -1,    -1,  2677,    -1,    -1,   596,   597,   598,\n-      -1,    -1,    29,    -1,   603,   424,   605,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,  2677,   614,    43,    44,   437,   618,\n-     619,    -1,    -1,  2627,   623,   624,    -1,    -1,  2217,   448,\n-      -1,  2838,    -1,   168,    -1,    -1,    -1,    -1,    -1,    40,\n-      -1,   176,  2885,   462,    -1,    -1,    -1,    -1,    -1,   648,\n-     649,    -1,   651,    -1,    -1,    -1,  2847,    -1,    -1,  2866,\n-    2677,    -1,  2869,  2870,    -1,   664,    -1,   486,   203,    -1,\n-      -1,   670,    -1,    -1,    -1,   102,    -1,  2681,  2885,    -1,\n-      -1,   500,   681,    -1,   219,    -1,    -1,    -1,    -1,    -1,\n-     365,   366,  2677,    -1,   229,    -1,   695,    -1,  2905,    -1,\n-     101,    -1,   103,    -1,   105,  2912,    -1,    -1,    -1,    -1,\n-      -1,     8,    -1,    -1,    11,    -1,  2923,  2924,    15,    16,\n-    2927,    -1,    19,    20,    21,    -1,   261,    -1,    -1,    37,\n-     729,   730,   731,   732,    42,  2597,    -1,    -1,    -1,    -1,\n-    1677,    -1,    -1,    -1,    -1,  2952,    -1,   282,    -1,    46,\n-    1687,    -1,  1689,  1395,    -1,  1692,    53,    -1,    -1,    -1,\n-      -1,  1698,    -1,  1700,    -1,    -1,    -1,    -1,    -1,  2976,\n-     305,    -1,    -1,    -1,    -1,  1712,    -1,   312,    -1,    -1,\n-    1717,    78,    -1,    -1,  1721,  1722,  1723,  1724,    -1,  1726,\n-    1727,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3006,\n-      -1,    -1,    -1,   555,    -1,   480,   481,    -1,    -1,    -1,\n-      -1,   167,    -1,    -1,  2403,    -1,    -1,   352,    -1,    -1,\n-     555,    -1,    -1,    -1,    -1,    -1,  3017,  3018,  1470,    -1,\n-    1472,    -1,  3039,  1475,   369,    37,  3043,    -1,  1480,  2843,\n-      42,  1483,    -1,  1485,    -1,    -1,  3053,  1489,  3055,    -1,\n-    3057,    -1,    -1,    -1,  3061,    -1,  3063,    -1,  3065,    -1,\n-     168,  1503,  2866,    -1,    -1,  3043,    -1,    -1,  3075,    -1,\n-      -1,    -1,    -1,    -1,  2736,   172,     8,    -1,    -1,    11,\n-      -1,  3088,    -1,    15,    16,    -1,    -1,    19,    20,    21,\n-      -1,   188,    -1,    -1,  3101,   203,   193,    99,  3089,  3106,\n-    3091,    -1,   437,    -1,    36,    -1,    -1,   442,    -1,    -1,\n-      -1,   219,    -1,    -1,    -1,    -1,  2505,    -1,    -1,  1561,\n-      -1,   229,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-     929,   930,    -1,   932,   231,  2939,   935,    -1,    -1,  3130,\n-      -1,    -1,   941,   942,    -1,    -1,  3153,    -1,   947,   305,\n-     306,   307,    -1,   261,   953,  3146,  3163,    -1,    -1,  3150,\n-      -1,   960,    -1,    -1,   113,    -1,   168,    -1,    -1,  3176,\n-      -1,   970,    -1,    -1,   282,    -1,    -1,    -1,    -1,    -1,\n-      -1,  3188,    -1,    55,   983,    -1,  2575,   284,    -1,  1631,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,   305,    -1,  3206,\n-      -1,   203,  3006,    -1,   312,    -1,    -1,  2869,    -1,    -1,\n-    3188,  2600,   368,    -1,    -1,    -1,    -1,   219,   167,    -1,\n-      -1,    -1,    -1,  3230,    -1,    -1,  3043,   229,   100,    -1,\n-      -1,    -1,    -1,    -1,  1033,    -1,    -1,  3244,   790,    -1,\n-      -1,    -1,    -1,    -1,   352,    -1,  3253,   119,  3255,   405,\n-      -1,    -1,  3230,    -1,    -1,   790,    -1,    -1,  3043,   261,\n-      -1,   369,    -1,    -1,    -1,   137,    -1,    -1,  2657,   141,\n-      -1,  3278,    -1,    -1,    -1,    -1,    -1,    -1,  1077,  3270,\n-    1079,   437,    -1,   380,   216,    -1,  3293,  3294,    -1,    -1,\n-      -1,   163,   448,    -1,   166,  1094,  1095,    -1,    -1,    -1,\n-    3278,  1100,   529,   305,    -1,  3296,   462,    -1,    -1,   181,\n-     312,    -1,  3319,    -1,   515,    -1,    -1,  1759,   519,  3123,\n-      -1,   522,    -1,  1122,    -1,    -1,  1768,  2064,    -1,   437,\n-     486,   558,   559,    -1,  1133,  1134,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,   500,    -1,   295,  1146,  3355,    -1,\n-     352,    -1,   284,    40,    -1,    -1,   305,   306,   307,    -1,\n-      -1,    -1,    -1,    -1,  1163,    -1,    -1,   369,  1167,    -1,\n-      -1,  3188,  1171,    60,    -1,  2764,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,   484,    -1,    -1,\n-     487,   488,   489,    -1,   491,   492,   493,   494,   495,   496,\n-     272,    -1,    -1,  3188,   605,    -1,    -1,    -1,   280,  2798,\n-      -1,    -1,    -1,  3230,    -1,    -1,    -1,   104,   105,   368,\n-      -1,    -1,    -1,    -1,    -1,    -1,   113,   979,    -1,   301,\n-      -1,    -1,    -1,    -1,    -1,   437,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,   670,   979,  3230,    -1,    -1,    -1,  3253,\n-      -1,    -1,    -1,    -1,    -1,   327,   405,    -1,    -1,    -1,\n-      -1,  3278,    -1,    -1,    -1,    -1,    -1,  1909,    -1,    -1,\n-      -1,    -1,     8,  1915,    -1,    11,    -1,    -1,    -1,    15,\n-      16,  2870,    -1,    -1,   171,    -1,  3290,    -1,   437,    -1,\n-    2227,    -1,    -1,  3278,   695,    -1,    -1,    -1,    -1,   448,\n-      -1,  1300,    -1,  1302,    -1,    -1,    -1,    -1,  1307,   196,\n-      46,    -1,    -1,   462,    -1,    -1,    -1,    53,    -1,  1318,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   729,   730,\n-     731,   732,    -1,    -1,    -1,    -1,    -1,   486,    -1,    -1,\n-      -1,    -1,    78,    -1,    -1,    -1,    -1,    -1,    -1,  1348,\n-      -1,   500,    -1,    -1,  1353,   487,   488,   489,   245,   491,\n-     492,   493,   494,   495,   496,  2007,   253,    -1,    -1,    -1,\n-       0,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   265,    -1,\n-     267,    -1,   147,  2025,    -1,  1384,    -1,    -1,  1387,    -1,\n-    1389,  1390,    -1,  1392,  1393,  1147,    -1,    -1,    -1,  2041,\n-      -1,    -1,   167,    -1,    -1,   141,    -1,    -1,    -1,   296,\n-    2052,    -1,  1147,    -1,    -1,    -1,    -1,  3006,    -1,    -1,\n-      -1,    -1,    -1,    -1,  2066,  2067,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,   172,    -1,  1437,  1438,\n-      -1,    -1,    -1,    -1,  1443,    -1,  1445,    -1,    -1,    -1,\n-      -1,    -1,   188,    -1,    -1,    -1,    -1,   193,    -1,  1458,\n-     347,  1460,  1461,    -1,    -1,    -1,    -1,    -1,    98,  1468,\n-      -1,  1470,    -1,  1472,    -1,    -1,  1475,    -1,    -1,    -1,\n-      -1,  1480,    -1,   370,  1483,    -1,  1485,    -1,    -1,    -1,\n-    1489,    -1,  1491,    -1,  1493,   231,    -1,    -1,    -1,     0,\n-      -1,    -1,   389,    -1,   391,    -1,    -1,   394,    -1,    -1,\n-      -1,    -1,    -1,   143,    -1,    -1,  1515,    -1,    -1,    -1,\n-     947,  1520,    -1,    -1,    -1,    -1,    -1,   157,    -1,  2466,\n-    2467,   932,   162,    -1,    -1,    -1,    -1,   167,    -1,    -1,\n-     305,   306,   307,   970,    -1,    -1,   176,    -1,   284,    -1,\n-     180,    -1,    -1,    -1,  1306,    -1,    -1,  2494,    -1,  1558,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2211,\n-      -1,  1306,  2509,  2510,  2511,  2512,  2513,  2514,  2515,  2516,\n-    2517,  2518,   212,  1335,  1336,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,  1351,\n-    1335,  1336,   232,   368,    -1,    -1,  1033,    -1,  1607,    -1,\n-    1609,    -1,  1611,   500,   555,    -1,  1351,    -1,    -1,    -1,\n-      -1,    -1,  1621,  1622,    -1,   147,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,  1634,    -1,    -1,    -1,    -1,\n-     405,    -1,   143,    -1,   380,   167,    -1,    -1,    -1,   279,\n-      -1,    -1,   282,    -1,    -1,    -1,   157,    -1,   288,    -1,\n-    1659,   162,  1661,    -1,  3253,    -1,   167,  1094,  1095,    -1,\n-      -1,    -1,   437,    -1,    -1,   176,    -1,  1676,  1677,   180,\n-      -1,    -1,    -1,   448,    -1,    -1,    -1,    -1,  1687,  1688,\n-    1689,  1690,    -1,  1692,    -1,    -1,   326,   462,    -1,  1698,\n-      -1,  1700,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,   212,  1711,  1712,    -1,    -1,    -1,  1716,  1717,   349,\n-      -1,   486,  1721,  1722,  1723,  1724,    -1,  1726,  1727,    -1,\n-      -1,   232,  1133,    -1,    -1,   500,    -1,    -1,    -1,  2381,\n-      -1,   167,    -1,    -1,    -1,  1146,    -1,    -1,   484,  1748,\n-    1749,  1750,  1751,  1752,    -1,   491,   492,   493,   494,   495,\n-     496,    -1,    -1,    -1,    -1,    -1,  1167,  1766,    -1,     8,\n-      -1,  2413,    11,    -1,    -1,   405,    15,    16,   279,    -1,\n-      -1,   282,    -1,   305,   306,   307,    -1,   288,    -1,    -1,\n-      -1,    -1,    -1,    -1,  1546,  2437,    -1,    -1,  2735,    -1,\n-      -1,    -1,   432,    -1,    -1,    -1,    -1,    46,    -1,    -1,\n-      -1,  1546,   442,    -1,    53,    -1,    -1,    -1,    -1,    -1,\n-      -1,  2463,    -1,    -1,    -1,   326,    -1,    -1,    -1,   459,\n-      -1,   461,   462,    -1,    -1,    -1,    -1,    -1,    -1,    78,\n-      -1,    -1,    -1,    -1,    -1,    -1,   368,    -1,   349,   790,\n-    1849,  1850,  1851,  1852,  1853,  1854,    -1,    -1,  1857,  1858,\n-    1859,  1860,  1861,  1862,  1863,  1864,  1865,  1866,   498,   295,\n-      -1,   501,   502,   503,    -1,    -1,    -1,    -1,    -1,   305,\n-     306,   307,    -1,   405,    -1,    -1,    -1,    -1,  1887,    -1,\n-      -1,    -1,    -1,    -1,  2536,    -1,    -1,    -1,    -1,    -1,\n-    1899,  1302,   141,    -1,   405,    -1,  1307,    -1,    -1,    -1,\n-    1909,    -1,    -1,    -1,    -1,   437,  1915,    -1,    -1,    -1,\n-    2562,    -1,  1921,  2565,    -1,    -1,   448,  1926,    -1,    -1,\n-    1682,   432,   555,   172,    -1,    -1,    -1,    -1,    -1,    -1,\n-     462,   442,   368,    -1,    -1,     8,    -1,  1682,    11,   188,\n-      -1,    -1,    15,    16,   193,    -1,    -1,    -1,   459,    -1,\n-     461,   462,  1389,  1390,   486,  1392,    -1,    -1,    -1,    -1,\n-      -1,    -1,  1971,    -1,    -1,    -1,  1975,    -1,   500,   405,\n-    2622,  1980,    -1,    46,    -1,    -1,    -1,    -1,    -1,    -1,\n-      53,    -1,   231,    -1,    -1,    -1,   555,   498,    -1,    -1,\n-     501,   502,   503,  2002,  2003,    -1,    -1,    -1,    -1,    -1,\n-      -1,   437,    -1,    -1,    -1,    78,   107,   108,    -1,    -1,\n-    2019,    -1,   448,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,  1460,    -1,  2677,   462,    -1,   979,    -1,\n-    1792,    -1,    -1,    -1,    -1,   284,    -1,    -1,    -1,  2691,\n-    2987,    -1,    -1,  2052,    -1,    -1,    -1,  1792,    -1,    -1,\n-     486,    -1,    -1,    -1,  1491,  2064,  1493,  1468,  2067,    -1,\n-    3007,  3008,  2071,    -1,   500,    -1,    -1,    -1,   141,    -1,\n-      -1,    -1,    -1,    -1,  1836,    -1,    -1,    -1,    -1,  3026,\n-      -1,    -1,   183,   184,    -1,    -1,  1848,    -1,    -1,    -1,\n-      -1,  1836,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   172,\n-      -1,    -1,  2111,  1848,    -1,  2114,    -1,    -1,  2117,    -1,\n-      -1,    -1,    -1,    -1,    -1,   188,  1878,    -1,    -1,    -1,\n-     193,    -1,    -1,  1885,  2133,    -1,    -1,    -1,    -1,    -1,\n-      -1,   380,    -1,  1878,    -1,    -1,    -1,    -1,    -1,    -1,\n-    1885,   917,    -1,    -1,    -1,    -1,   247,   248,   249,   250,\n-     251,   252,    -1,    -1,   255,   256,    -1,   790,   231,    -1,\n-      -1,  1923,    -1,    -1,    -1,  1927,    -1,    -1,    -1,    -1,\n-      -1,  1933,    -1,    -1,    -1,    -1,    -1,    -1,  1923,    -1,\n-      -1,    -1,  1927,    -1,    -1,    -1,    -1,  2196,  1933,    -1,\n-      -1,    -1,    -1,  2202,    -1,  2847,  1147,    -1,  1609,    -1,\n-    1611,   977,    -1,    -1,  2213,  2214,  2215,  2216,    -1,    -1,\n-    1621,   284,    -1,    -1,    -1,    -1,    -1,    -1,  2227,    -1,\n-    2229,   790,    -1,  2232,  1661,    -1,    -1,    -1,  2237,    -1,\n-      -1,    -1,    -1,  2885,    -1,   484,    -1,    -1,    -1,    -1,\n-    1677,  2250,   491,   492,   493,   494,   495,   496,  1659,    -1,\n-    1687,    -1,  1689,    -1,    -1,  1692,    -1,    -1,  2267,    -1,\n-      -1,  1698,    -1,  1700,   365,   366,    -1,    -1,    -1,    -1,\n-      -1,  1047,    -1,  2282,  2283,  1712,  2285,    -1,    -1,    -1,\n-    1717,    -1,    -1,    -1,  1721,  1722,  1723,  1724,    -1,  1726,\n-    1727,    -1,    -1,    -1,    -1,    -1,    -1,  1073,    -1,  1075,\n-    1076,    -1,  3249,    -1,    -1,  2314,    -1,   380,    -1,    -1,\n+       7,   557,   498,     0,   708,   649,   623,     0,     0,     0,\n+      69,     0,     0,     0,    21,    45,   555,  1168,  1037,     0,\n+     720,   793,     0,     0,  1141,    73,   940,   716,   981,  1166,\n+     563,  1343,  1452,   920,  1596,   824,  1179,  1635,   827,    73,\n+     694,    18,  2060,   725,  2062,    36,   799,  1522,  1143,    18,\n+     672,  2091,  2146,  1738,  1348,  1500,  2192,  2193,  2194,  1146,\n+    1135,  2081,  2548,  1296,    71,    72,    37,   931,  1549,  1550,\n+     931,   708,   931,   710,   931,   712,  1171,   562,  2516,   555,\n+     558,  2546,  1069,   619,  2026,  1102,   563,  1074,   624,  1392,\n+    2516,  2142,     0,    44,     0,  2080,     0,     0,     0,   555,\n+       0,     0,     0,    94,     0,    33,  2568,  2391,     0,     0,\n+       0,     0,     0,     7,     0,     0,     0,     0,     0,     0,\n+     616,  1035,  2205,     0,   586,  1756,     0,    21,  1600,     0,\n+       5,  1753,    55,   104,  2561,  1653,   920,    63,    13,    14,\n+      78,     5,     5,   756,   757,    24,     5,   689,     9,   684,\n+       9,  2472,     5,     5,  1655,  2476,  2216,  2860,     5,     5,\n+     689,    13,    14,     5,     5,     5,     5,    72,   664,     7,\n+     783,  2222,    13,    14,    13,    14,     5,    71,    72,    45,\n+       5,     5,     5,    21,    13,    14,     9,     9,    45,  1881,\n+       5,     5,     5,    13,    14,    21,     5,    30,    30,    71,\n+      72,   115,     5,    30,     5,    38,    38,     5,   135,   831,\n+    2212,    38,    88,   120,   143,     5,   176,  1914,  1915,    21,\n+      63,  2847,   168,   185,    98,    13,    14,    98,  1925,     3,\n+       4,     5,  1929,    71,    72,     9,  2364,  2863,   173,  2754,\n+      26,  2292,  2293,    11,  2295,    71,    72,     4,    16,   125,\n+      80,    11,     9,   118,   239,   167,    16,    63,   173,   164,\n+     949,    91,   197,   197,  2708,     8,  3018,   282,    11,    71,\n+      72,  2824,    15,    16,  1027,   280,    19,    20,    21,     4,\n+      80,     3,    73,   212,     9,   283,    46,   118,    63,   763,\n+     118,    91,  1336,    36,   268,    64,  1080,    63,   105,  2435,\n+     235,   368,   239,    72,   356,   133,     0,   929,   288,   288,\n+    1263,   785,    34,    35,  2949,   932,  2951,   793,    78,  1272,\n+     235,  2434,   115,  2436,    18,   187,    11,    21,  2346,  2486,\n+      15,    16,   271,    40,   377,  3200,    40,   793,   304,   113,\n+     442,   395,    36,   113,    30,   819,   304,   133,  3243,    11,\n+    3169,    45,   287,    15,    16,   328,   106,   168,    11,   288,\n+      30,    46,    15,    16,  2049,   161,   187,   128,    11,  2855,\n+     442,  1155,    15,    16,  1158,  1159,   207,    71,    72,    73,\n+    2866,   157,  1154,  2809,   357,    11,   555,   920,   258,  1002,\n+    1003,  2485,  2857,    78,   155,   116,  1085,   933,   500,   357,\n+      94,  1420,   456,    46,  2689,  1018,  2691,    30,   282,   945,\n+     106,   282,  1034,  3039,   319,   185,   105,   208,   128,   167,\n+    2460,  2578,   348,   299,   361,  3290,   361,   361,   500,  3064,\n+     144,  2482,  3327,  2484,  3137,    78,   370,   504,   923,   213,\n+     113,   311,   128,   382,   166,  2387,   168,   980,   500,   221,\n+    1467,   436,    78,  1907,  1908,  1909,   232,   500,   128,   265,\n+      83,   235,  2977,  3016,   171,   439,   235,   171,   189,    92,\n+    1514,   405,  3291,   216,   409,   349,   411,   106,   349,   272,\n+     194,  2996,   442,  1500,   346,   500,  1130,  1131,  1933,   300,\n+     318,   114,   427,   265,   409,   500,   411,   267,   433,   436,\n+     286,   436,   500,   432,   416,   348,   982,  2620,  2636,  1742,\n+    1813,   272,  1134,  3265,  2574,   500,   277,   159,   314,  2963,\n+     454,   436,   343,   514,   504,   504,   982,  3230,   433,   495,\n+     444,   458,  1006,   563,   410,   442,   402,   495,   500,   392,\n+     393,   284,   348,  1562,  1040,   402,  2597,  1021,   555,  1082,\n+    1083,  2026,   385,   385,   500,  2557,   563,   329,   385,   345,\n+     498,   347,   185,   500,   502,    26,  1683,   277,   106,   375,\n+     381,    32,  1107,   348,   439,   198,   265,   500,   504,  2097,\n+    3018,  3331,   348,  2064,   614,   562,   416,    33,   462,   375,\n+    1132,   462,  3018,  2224,   563,  2217,   603,  2098,   405,   272,\n+    3027,   464,  2887,  1132,  1080,  3231,   378,   614,   439,   451,\n+    2302,  2759,  2084,    59,   662,  2090,   416,  3367,   464,  2767,\n+    1771,  1321,   264,   486,   793,   500,   405,   501,   662,   503,\n+     501,  2725,   503,   508,  1096,   694,   500,   500,   499,  2923,\n+     486,   500,   649,   650,   508,  1598,  1300,  2968,   500,  2732,\n+    3136,   498,  2973,   500,   500,   502,    13,    14,   500,   500,\n+     500,   500,   423,  2360,  1851,   672,   116,   439,   416,   491,\n+     492,   500,   133,   434,   104,   500,   500,   500,  1154,  1698,\n+     500,  1700,  3144,  1826,   681,   500,   500,   500,   681,   681,\n+     681,   500,   681,   681,   681,  1882,   667,   500,  1154,   500,\n+     681,   670,   500,   681,   681,  1938,  2842,   714,   715,   603,\n+     500,   718,   500,   684,  1336,   347,  3143,   491,   492,   598,\n+     614,  2706,   673,   651,   652,   418,   654,   404,   496,   504,\n+     452,  1344,  1345,   462,   491,   492,   496,   462,   504,   189,\n+     221,   489,   614,   375,   487,   488,   489,  2050,   491,   492,\n+     493,   494,   495,   496,   502,  3241,   489,   486,   464,   128,\n+     501,   486,  3227,   504,   441,   603,   491,   492,   391,   502,\n+    2712,   394,   465,   681,  1313,   681,   614,   681,   681,   681,\n+     486,   681,   681,   681,   265,   681,   793,   500,   614,   681,\n+     681,   681,   681,   681,  2845,   681,   681,   681,   681,   681,\n+     681,   603,    59,  1342,   681,   162,   491,   492,   493,   494,\n+     495,   496,   614,   982,     5,   245,     4,   504,  3283,  1358,\n+     514,     9,    41,   253,   831,   286,  1779,  3265,  1472,   491,\n+     492,   493,   494,   495,   496,  1391,  1458,  1313,  1394,  3265,\n+     493,   494,   495,   496,  1400,  1489,   503,    72,   239,   145,\n+     493,   494,   495,   496,  1543,  1544,  1545,  1313,   495,   239,\n+     239,    53,   489,    80,  3350,   502,  1342,  1343,   562,   563,\n+    1403,    37,    37,   500,    91,     0,   159,  1894,   452,  3097,\n+     341,  3099,  1358,    26,   345,  2979,  1342,  1343,   113,    32,\n+     500,  1513,  1514,  2347,  2348,  2349,  2350,   378,   267,   195,\n+      26,  1523,  1358,   122,  2324,     5,    32,   498,   277,   603,\n+     167,   502,  2387,   920,   375,  1902,  1933,  1402,  1396,  2400,\n+     614,   928,   929,   343,  1546,    11,  1403,   934,  1712,  1465,\n+     937,   938,    80,   940,   941,   942,   943,   197,  1722,  2959,\n+    1827,  1725,   225,    91,  1808,  1809,   923,  1808,  1807,   956,\n+    1446,  1808,  1809,  1810,     4,  3173,   963,  2251,   439,     9,\n+      46,  1978,  2195,    26,  2258,   169,  2260,     4,   662,    32,\n+     361,   173,     9,   980,   981,   982,   167,   464,   239,  1834,\n+     172,   361,   361,  1838,   445,  1154,  1841,   681,   115,   169,\n+     133,  2066,    78,  2068,  1001,  2680,   188,   244,  3138,   486,\n+    1789,   193,   168,   168,  1708,  1035,   157,   133,   409,  1565,\n+     411,   162,  1019,   500,  1553,  3193,  3194,   167,  3112,  2170,\n+     267,     3,  1811,  1030,  1031,  1032,  1815,  1034,  1035,  1818,\n+    1037,   498,   128,   235,   959,   502,   240,   203,   203,   231,\n+     965,  2516,   267,  1827,  1681,   436,   186,   272,   305,   306,\n+     307,  3187,   501,   219,   219,   504,   436,   436,  1065,   155,\n+     240,   246,   956,   229,   229,  1113,  1114,  3245,  1116,   963,\n+     133,  1708,    69,    70,   201,  1082,  1083,  1553,  1760,  1113,\n+    1114,   232,  1116,  2178,   956,  1739,  1740,  1741,   157,  3229,\n+    1727,   963,  3232,   162,   319,  1732,   501,  1553,   495,   504,\n+     361,  2413,   421,  2120,   239,   502,   251,   252,  1115,   500,\n+     335,   368,  1119,  1120,   305,   306,   307,   405,   956,    40,\n+     500,   500,  1129,  1130,  1131,   963,   454,  1134,   279,   333,\n+     956,   157,   364,  2152,  2153,  2154,  1107,   963,   265,    60,\n+     267,   500,  2056,   286,  1313,   498,  2233,  1154,   405,   502,\n+    1689,   500,  2239,   333,   956,   305,   306,   307,   500,   361,\n+     286,   963,  1718,   232,  1786,     4,   370,  1723,   162,  2614,\n+       9,   267,   167,  1342,  1343,   436,   272,   368,   500,   333,\n+     437,   277,   409,   104,   411,  3325,   352,   352,   380,  1358,\n+     370,   448,   267,    13,    14,   183,   184,   272,   341,  1170,\n+     500,   405,   345,   369,   369,   464,   232,   409,   433,   411,\n+     279,    13,    14,  1689,   405,   341,   370,   442,   368,   345,\n+     365,   366,   954,   286,   964,   405,   361,   486,   968,   923,\n+      13,    14,   375,  1689,   436,   501,   333,  2712,   504,   500,\n+     972,   500,   500,   500,   976,   498,   437,   500,  3342,   375,\n+     454,   405,   327,   279,   500,   405,  1263,   448,   651,   652,\n+    1799,   654,   956,   251,   252,  1272,   500,  2286,  1890,   963,\n+     409,   462,   411,   370,   454,   196,   500,  3295,   341,    13,\n+      14,  1457,   345,  1459,  1460,    13,    14,   437,  3328,  1296,\n+    3330,   500,  3310,   501,  1827,   486,   504,   500,   448,  2611,\n+     454,   436,   445,   997,  1843,   486,  1313,   501,   405,   500,\n+     504,   143,   375,   500,  1008,  1312,  1855,   493,   501,   445,\n+    1312,   504,   483,  1799,   245,   157,  3366,   423,   218,  1336,\n+     162,  1312,   253,   502,  1312,  1342,  1343,   501,   434,   282,\n+     504,  1035,  3360,  1799,   265,  2362,  1885,  3365,  2499,  2366,\n+     500,  1358,   501,  1892,   483,   504,  2668,   454,    13,    14,\n+    2149,  2498,  2151,    13,    14,   500,  2483,  1843,   498,   409,\n+     500,   411,   502,     6,   502,   296,     9,   365,   366,  1855,\n+     212,   166,   445,    16,  1553,  1392,   501,  1843,  2152,   504,\n+    2154,  1930,  2014,  2280,   501,  1934,  1403,   504,    31,  1855,\n+     232,  1940,    35,  1936,  2541,    13,    14,  2061,   501,  1885,\n+    2497,   504,  2499,  1420,   501,   504,  1892,   504,  1425,  1113,\n+    1114,   501,  1116,   500,   504,  1402,   347,   501,   501,  1885,\n+     504,   504,   167,   462,  1403,   464,  1892,  1444,  1445,   501,\n+     501,   501,   504,  1450,   504,  1452,  2482,   279,  2484,   370,\n+    1457,  1458,  1459,  1460,  1930,   501,   288,   501,  1934,   501,\n+     504,   287,   504,    59,  1940,  1472,  1473,   173,   389,   500,\n+    1477,   406,  1479,   501,  1930,  1482,   504,  2391,  1934,   483,\n+    1487,  2125,  1489,  1490,  1940,  1492,   686,   501,   688,  1496,\n+     504,   197,   501,   501,  2513,   504,   504,   218,  2517,   148,\n+    2519,   501,  2255,  2256,   504,   501,  1513,  1514,   504,   501,\n+     341,  1518,   504,  1520,   148,  2215,  1523,  1510,   148,  1510,\n+    1689,  1510,  1510,  1510,   501,   501,    26,   504,   504,   235,\n+     148,   501,    32,  1510,   504,  1542,    40,   501,  3100,  1546,\n+     504,  1548,   501,  3018,   501,   504,  1553,  1554,  1555,  1556,\n+    1557,  1558,  1559,  1560,  1561,  1562,    13,    14,  1452,  1566,\n+    1567,   637,   638,   639,  1571,    13,    14,   500,  1575,  2881,\n+     267,  1578,  1579,  1580,  1581,  1582,  1583,  1584,  1585,  1586,\n+     501,   287,  1589,  1477,    40,  1479,    13,    14,  1482,  1596,\n+    1638,  1598,   454,  1487,    13,    14,  1490,    87,  1492,   466,\n+     432,   148,  1496,   451,  1638,  1477,   500,  1479,   315,  2726,\n+    1482,   500,  1619,   148,  1452,  1487,   500,    26,  1490,    26,\n+    1492,   500,  2773,    32,  1496,    32,    13,    14,    13,    14,\n+    1799,    13,    14,   133,  1641,  3055,    13,    14,    39,  1477,\n+     500,  1479,    13,    14,  1482,  1652,  1653,   500,  1617,  1487,\n+    1452,  1477,  1490,  1479,  1492,   148,  1482,   502,  1496,    13,\n+      14,  1487,    13,    14,  1490,   148,  1492,    13,    14,   148,\n+    1496,    13,    14,   282,  1843,  1477,   416,  1479,    13,    14,\n+    1482,   500,  1689,    13,    14,  1487,  1855,  2226,  1490,   500,\n+    1492,  1698,   500,  1700,  1496,  3293,    13,    14,   501,  3297,\n+    2843,    13,    14,   409,   500,   411,   255,   256,  1402,   356,\n+     357,   356,   357,   365,   366,   407,  1885,   356,   357,   214,\n+    2276,   356,   357,  1892,   133,   219,   133,   433,  2681,   291,\n+     436,  1738,  2516,   447,   448,  1742,  1082,  1083,  1745,  1746,\n+     500,   219,   219,   500,   289,    40,   230,  2280,   500,     5,\n+    2226,     5,   500,  3351,   500,   500,   500,     5,     5,   500,\n+       5,  1930,  2451,   500,     5,  1934,   144,     9,   500,   463,\n+    2226,  1940,  1779,   293,   504,   102,   501,   504,    40,  1786,\n+    3200,   214,   375,  1477,  1775,  1479,   286,   162,  1482,   162,\n+    3265,   279,  1799,  1487,    59,   277,  1490,   500,  1492,   230,\n+     416,  2590,  1496,    91,   500,   504,  1813,    59,    59,   416,\n+     416,   258,   416,   416,   462,   510,  1510,   148,    98,   500,\n+    1827,     8,  3242,    40,    11,   267,   267,   267,    15,    16,\n+    2474,   267,    19,    20,    21,   500,  1843,   500,     3,     9,\n+    1847,  1848,    39,  1850,   414,   345,   414,   498,  1855,  1856,\n+    1857,  1858,  1859,  1860,  1861,   498,   416,  1864,  1865,  1866,\n+    1867,  1868,  1869,  1870,  1871,  1872,  1873,   167,   416,  2551,\n+    3290,  2571,  1879,  1880,  1568,   375,  1883,   286,  1885,   286,\n+    2534,   502,   416,  1890,   416,  1892,   501,  3024,   501,   501,\n+     501,   501,   459,   219,   219,   274,   501,   458,   274,    11,\n+     501,   501,   504,   500,   343,  1912,    72,   414,   500,  1916,\n+     500,  1918,    78,   504,   499,  1922,   504,   504,   500,   272,\n+     500,   510,   158,  1930,   416,    91,   509,  1934,   167,  1936,\n+     176,  1938,   341,  1940,   341,   504,   345,  2413,   345,   442,\n+     212,   504,  1949,   501,  1638,   445,   378,   113,   258,   115,\n+      23,    24,   221,   504,   283,   304,   304,  2413,   504,   214,\n+     176,   501,   500,  2916,   221,   267,   375,   288,   375,   324,\n+     500,   221,   280,  1980,   454,   500,   148,  2516,  1985,  1986,\n+    2764,   148,  2896,    40,  2014,   148,   143,  2776,  2777,   462,\n+    2877,  3134,   148,   267,   483,   282,   501,   498,   483,   501,\n+     157,   282,  2009,  2010,     8,   162,   193,  2014,    40,    59,\n+     501,    15,    16,   167,   501,    19,    20,    21,    11,    40,\n+     501,  2028,  1916,   162,  2031,   501,  2033,   501,  1922,   216,\n+     501,   501,   501,   500,   107,   201,   445,  2809,   445,   500,\n+    2516,   176,  2049,  2050,  1916,   500,   162,  2586,   501,  2056,\n+    1922,   509,  2059,   499,   504,   212,   501,  2226,   483,   502,\n+    2516,   167,  3079,   501,   501,   500,   416,   151,   244,  2076,\n+     500,   500,  1766,   459,   500,   232,   500,    40,  1916,    59,\n+       8,  1775,  2089,    11,  1922,  2641,   504,    15,    16,   489,\n+    1916,    19,    20,    21,  3113,   485,  1922,   284,   283,  2106,\n+    2107,   267,   283,   439,    37,   504,   272,   238,    59,    42,\n+    2586,    59,   258,   416,  1916,   267,  2123,  3268,  2125,   500,\n+    1922,   148,   279,   197,   148,   148,   416,  2134,   500,   499,\n+    2586,   288,   416,   416,   416,  2611,   274,   274,   501,    40,\n+     343,   501,   504,   462,   280,  2152,  2153,  2154,   282,    40,\n+     148,   272,   167,   319,   501,  2611,   499,   501,   499,    59,\n+     500,   500,   180,   501,   501,  2059,    99,   501,   162,   335,\n+      78,   139,   167,   501,   193,   292,   349,   501,   500,   283,\n+     176,   501,  2076,   148,   500,   500,   504,   510,  2195,  2745,\n+    2220,   504,  2668,   500,     7,     8,   501,   501,   171,    12,\n+     501,   427,   501,   501,    17,   501,   500,    40,    21,   501,\n+      23,    24,  2668,  2210,   500,    28,    29,    30,  2210,  2226,\n+      33,  2059,  1916,    36,    37,   504,    40,    40,  1922,  2210,\n+      43,    44,  2210,  2059,  3018,   168,  2775,  2244,  2076,    84,\n+     442,   499,   167,   504,  2413,   504,   461,   500,  3267,   193,\n+    2076,   282,   501,   448,    59,   489,   462,  2059,    71,    72,\n+     199,   501,   113,   501,   501,    40,   501,   433,   501,   501,\n+     203,   501,   501,  2280,  2076,   432,   442,   501,   501,  2286,\n+     284,    94,   500,   221,    86,   272,   219,   186,   101,   102,\n+     103,   104,   105,   272,   502,   502,   229,  2997,   502,  2775,\n+     487,   488,   489,   502,   491,   492,   493,   494,   495,   496,\n+     502,   502,   502,   502,   502,   489,   502,  2324,   502,  2775,\n+    2014,   416,   502,   502,   502,   502,   416,   502,   261,    40,\n+      96,   502,   501,  2809,   502,   267,   500,   105,  2032,   462,\n+     502,   498,  3256,   502,  2877,   502,    40,  2516,   282,   282,\n+       9,   502,   502,  2809,  2048,   502,   284,  2364,   502,   502,\n+     502,  2391,   502,   504,   342,  2059,   326,   500,    59,  2428,\n+     502,   500,   305,  2380,   502,   502,   502,  2384,  2385,   312,\n+     502,   500,  2076,   193,  2391,   186,   504,   501,   501,   499,\n+      89,   447,    40,  2423,  2401,   504,   501,  2404,   335,  2406,\n+     500,   167,    40,   148,   501,  2881,  2413,  2414,   120,   148,\n+    2417,  2418,    60,  3102,    40,  2422,  2423,  2586,    37,   352,\n+     501,   357,  2429,    42,    40,  2881,   357,  3081,    40,   501,\n+    2324,   500,   500,  3077,   504,   442,   369,  2444,   500,   301,\n+     500,   272,  2611,  3065,  2474,  3067,   243,  2454,   185,  2442,\n+     442,  2442,   427,  2442,  2442,  2442,   104,  2448,   500,    72,\n+     285,    72,     9,  3080,    78,  2442,  3083,  2474,   501,   359,\n+    2364,   501,   500,    59,    91,   501,   129,   489,   265,  3018,\n+      99,  3265,   282,   487,   488,   489,  2324,   491,   492,   493,\n+     494,   495,   496,   285,   938,    40,   285,   427,   500,  2668,\n+     500,   447,  3202,   199,   437,   282,  2513,  3211,   282,  2516,\n+    2517,   501,  2519,    37,   375,   501,   501,   501,    42,   501,\n+     118,   439,  2324,   596,   356,   598,  2220,    25,    36,  1706,\n+    2500,  2513,   681,  2147,  3104,  2452,  3242,  3196,  3192,   305,\n+     306,   307,  3018,     8,  3188,  3341,    11,  2769,   196,   168,\n+      15,    16,  3217,  2550,  3320,   628,  2547,   176,  2550,   487,\n+     488,   489,  3018,   491,   492,   493,   494,   495,   496,  2550,\n+    2990,  3269,  2550,  3278,  3313,    99,  1141,  3041,  2140,  2586,\n+     653,    46,  2573,  2153,   203,  2576,  2562,  3267,    53,  3276,\n+    2137,  2492,  3264,  1391,  1310,  2519,  2209,   245,  2286,  1342,\n+     219,  2608,   368,  2633,  2611,   253,  2775,  2877,  2123,  2089,\n+     229,  2543,  1677,    78,  1123,  1101,  1122,   265,  2345,  3251,\n+    2106,  2628,  2629,   955,  1641,  3175,  2633,  3069,  1676,  2636,\n+      21,  2076,  2636,  1928,  2920,  2372,   933,   614,  2645,   405,\n+    2809,   955,   261,  2324,   168,   603,  3011,  2323,   296,  1360,\n+    2657,  3179,  1827,  1125,   931,  2662,  2663,  3178,   424,  3306,\n+    2667,  2668,  1987,   282,   931,  2672,  2385,   931,  2675,  2676,\n+    3166,   437,  2702,  2680,  2681,  2090,   141,  2684,  2032,   203,\n+    1950,  2688,   448,  3239,  2029,  1473,   305,   931,  2695,  2695,\n+    1989,  2442,  3164,   312,   597,   219,   462,  2391,  2398,   347,\n+    1936,  1403,   515,  1617,  2453,   229,   519,   172,  1618,   522,\n+      14,    94,  2881,    -1,    -1,    -1,   529,    -1,    -1,    -1,\n+     486,    -1,   370,   188,    -1,    -1,  3265,    -1,   193,  2423,\n+      -1,    -1,  2739,   352,   500,    -1,    -1,   261,    -1,    -1,\n+    2747,   389,  2636,    -1,   557,   558,   559,    -1,  2442,    -1,\n+     369,    -1,    -1,    -1,  2448,    -1,    -1,    -1,   282,  2766,\n+      -1,    -1,    -1,    -1,    -1,    -1,   231,    -1,  2775,    -1,\n+      -1,    -1,    37,    -1,    -1,    -1,    -1,    42,    -1,    -1,\n+    2474,   305,    -1,   596,   597,   598,    -1,    -1,   312,  3265,\n+     603,    -1,   605,    -1,  2688,    -1,    -1,    -1,    -1,    -1,\n+      -1,   614,  2809,    -1,    -1,   618,   619,    -1,    -1,  3265,\n+     623,   624,    -1,    -1,    -1,    -1,  2688,    -1,   437,   284,\n+      -1,    -1,    -1,   442,   637,   638,   639,    -1,   352,    -1,\n+      -1,    -1,    -1,    -1,    99,    -1,    -1,   143,   651,   652,\n+      -1,   654,  2849,    -1,    -1,   369,    -1,   920,    -1,  3018,\n+    2688,   157,   938,  2547,   667,    -1,   162,    -1,   931,    -1,\n+     673,    -1,  2688,    -1,    -1,    -1,  2896,  2858,    -1,    -1,\n+    2877,   684,    -1,  2880,  2881,    -1,    -1,    -1,    -1,  2573,\n+      -1,    -1,  2576,    -1,    -1,   698,  2688,     8,    -1,  2896,\n+      11,    -1,    -1,    -1,    15,    16,    -1,    -1,    19,    20,\n+      21,    -1,    -1,   168,    -1,    -1,   212,   980,    -1,  2916,\n+      -1,    -1,    -1,   437,    -1,   380,  2923,    -1,   442,   732,\n+     733,   734,   735,    -1,    -1,    -1,   232,  2934,  2935,    -1,\n+      -1,  2938,    -1,    -1,    -1,   113,    -1,    -1,   203,  2633,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,  2334,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,  2342,  2343,  2344,    -1,  1748,  1749,  1750,\n-    1751,  1752,    -1,  2352,    -1,  2354,   979,  2356,    -1,    -1,\n-      -1,    -1,    -1,  2362,    -1,  1306,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,  3017,  3018,    -1,  2377,    -1,\n-      -1,    -1,  1148,    -1,    -1,  1151,  1152,    -1,    -1,   480,\n-     481,    -1,    -1,    -1,  1335,  1336,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2407,  2408,\n-    1351,    -1,    -1,    -1,   107,   108,    -1,    -1,    -1,    -1,\n-     979,   484,    -1,    -1,    -1,    -1,    -1,    -1,   491,   492,\n-     493,   494,   495,   496,    -1,    -1,  2435,    -1,    -1,    -1,\n-      -1,    -1,  2441,    -1,    -1,    -1,    -1,  3089,    -1,  3091,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2457,    -1,\n-    1887,    -1,  2461,    -1,    -1,  2217,  2465,  2466,  2467,    -1,\n-      -1,    -1,  2471,  2472,  2473,    -1,  2475,    -1,    -1,    -1,\n-      -1,    -1,  2217,    -1,    -1,    -1,    -1,    -1,  3130,    -1,\n-     183,   184,    -1,    -1,  1921,  2494,    -1,  2496,  1899,  1926,\n-      -1,    -1,    -1,    -1,  3146,    -1,    -1,    -1,  3150,    -1,\n-    2509,  2510,  2511,  2512,  2513,  2514,  2515,  2516,  2517,  2518,\n-      -1,    -1,    -1,    -1,  1147,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,  2535,    -1,    -1,    -1,\n-      -1,    -1,  2541,    -1,  1971,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,  2551,  1980,   247,   248,   249,   250,   251,   252,\n-      -1,    -1,   255,   256,    -1,    -1,    -1,  1333,  2567,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1344,    -1,\n-    1346,    -1,    -1,    -1,    -1,    -1,    -1,  2586,  1147,    -1,\n-    1356,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2597,    -1,\n-      -1,    -1,    -1,    -1,  2603,  1546,    -1,  1373,    -1,    -1,\n-      -1,  2610,  2611,  2612,  2613,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,  2622,    -1,    -1,  2625,    -1,  3270,    -1,\n-    2629,  2630,    -1,    -1,    -1,  1401,  1402,  2064,    -1,    -1,\n-      -1,     8,    -1,    -1,    11,    -1,  2645,    -1,    15,    16,\n-      -1,  2403,    -1,    -1,  3296,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2403,    -1,\n-      -1,    -1,   365,   366,    -1,    -1,  2675,    -1,  2677,    46,\n-      -1,    -1,    -1,  1306,  2111,    -1,    53,    -1,    -1,    -1,\n-    2117,    -1,  2691,    -1,    -1,    -1,  2695,    -1,    -1,    -1,\n-      -1,    -1,  2701,    -1,    -1,    -1,    -1,     8,    -1,    -1,\n-      11,    78,  1335,  1336,    15,    16,  2715,    -1,    19,    20,\n-      21,    -1,  2721,    -1,    -1,    -1,    -1,    -1,  1351,    -1,\n-      -1,    -1,    -1,    -1,    -1,  2734,  2735,  2736,    -1,    -1,\n-      -1,  1682,    -1,  2742,    -1,    -1,    -1,  1306,    -1,    -1,\n-      -1,    -1,    -1,  2505,    -1,    -1,    -1,    -1,    -1,    -1,\n-    2759,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-    2505,    -1,    -1,    -1,   141,    -1,  1335,  1336,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,   480,   481,    -1,\n-      -1,    -1,  1351,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-    2227,  2202,    -1,    -1,    -1,   172,    -1,   500,    -1,    -1,\n-      -1,    -1,    -1,  2214,  2215,  2216,    -1,    -1,   646,   647,\n-      -1,   188,    -1,  2575,    -1,    -1,   193,    -1,  2229,    -1,\n-      -1,  2232,    -1,    -1,    -1,  2834,  2237,    -1,    -1,    -1,\n-    2575,    -1,    -1,    -1,    -1,    -1,    -1,  2846,  2600,    -1,\n-      -1,  1792,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,  2860,    -1,    -1,   231,  2600,    -1,    -1,    -1,    -1,\n-    2869,    -1,    -1,    -1,    -1,   935,    -1,    -1,    -1,  1645,\n-    1646,    -1,    -1,   711,    -1,    -1,    -1,   715,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,  1836,  2895,    -1,    -1,    -1,\n-      -1,    -1,  2901,    -1,    -1,  2657,    -1,  1848,    -1,    -1,\n-    2909,    -1,    -1,    -1,    -1,   216,    -1,   284,    -1,    -1,\n-      -1,    -1,  2657,  1546,    -1,  2352,    -1,    -1,    -1,  2356,\n-      -1,    -1,    -1,    -1,    -1,  2362,  2935,  1878,    -1,  1705,\n-      -1,  2342,  2343,  2344,  1885,    -1,    -1,    -1,    -1,  1715,\n-     935,    -1,  1718,    -1,    -1,    -1,    -1,  2956,    -1,    -1,\n-      -1,    -1,  2961,     8,    -1,    -1,    11,    -1,    -1,    -1,\n-      15,    16,    -1,    -1,    19,    20,    21,    -1,    -1,    -1,\n-      -1,    -1,  1923,   284,    -1,    -1,  1927,  1546,  2987,    -1,\n-      -1,    -1,  1933,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3007,  3008,\n-      -1,    -1,  2764,   380,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,  3020,    -1,  3022,    -1,    -1,    -1,  3026,    -1,  2764,\n-    1796,  1797,    -1,    -1,  2461,    -1,    -1,    -1,  2465,  2466,\n-    2467,  3040,    -1,    -1,  3043,    -1,  2798,    -1,    -1,    -1,\n-      -1,    -1,    -1,  1113,  1820,    -1,  2457,    -1,    -1,  1682,\n-      -1,    -1,  1122,  2798,  3063,    -1,    -1,  2494,  3067,  3068,\n-      -1,    -1,  3071,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,     0,  2509,  2510,  2511,  2512,  2513,  2514,  2515,  2516,\n-    2517,  2518,    -1,  3092,    -1,    -1,    -1,   925,    -1,    -1,\n-    3099,    -1,    -1,   931,    -1,    -1,   934,    -1,    -1,   937,\n-     938,   939,   940,    -1,    -1,    -1,    -1,   484,  2870,    -1,\n-      -1,    -1,    -1,  1682,   491,   492,   493,   494,   495,   496,\n-    3129,    -1,    -1,    -1,    -1,  2870,    -1,  1122,    -1,    -1,\n-    2541,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-     978,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,  1929,    -1,    -1,    -1,   995,  3167,  1792,\n-      -1,   216,    -1,    -1,    -1,    -1,  2603,    -1,    -1,    98,\n-      -1,    -1,    -1,    -1,    -1,  1013,   487,   488,   489,  3188,\n-     491,   492,   493,   494,   495,   496,  1024,  1025,  1026,    -1,\n-    1028,  1029,  2629,    -1,    -1,    -1,    -1,    -1,    -1,  2610,\n-    2611,  2612,  2613,  1836,    -1,    -1,  3215,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,   143,  1848,    -1,    -1,  3227,  3228,\n-    1058,  3230,  3231,  1792,    -1,    -1,    -1,    -1,   157,   284,\n-    3239,    -1,    -1,   162,    -1,    -1,    -1,    -1,   167,    -1,\n-    3249,    -1,    -1,    -1,  3006,  1878,    -1,   176,    -1,    -1,\n-      -1,   180,  1885,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,  3006,  3271,    -1,    -1,    -1,  2217,  1836,    -1,  3278,\n-    1108,    -1,    -1,    -1,  1112,  1113,    -1,    -1,    -1,  1848,\n-    2056,     8,    -1,   212,    11,  1123,  1124,    -1,    15,    16,\n-    1923,    -1,    -1,    -1,  1927,    -1,    -1,    -1,  2735,    -1,\n-    1933,    -1,    -1,   232,    -1,    -1,  3315,    -1,    -1,  1878,\n-      -1,  2087,  2088,    -1,    -1,    -1,  1885,    -1,    -1,    46,\n-    3329,    -1,    -1,    -1,    -1,    -1,    53,    -1,    -1,    -1,\n-      -1,  2742,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,   219,    -1,    -1,  2964,    -1,    -1,\n+      -1,   555,    -1,    -1,   229,    -1,    -1,    -1,    -1,    -1,\n+      -1,  1044,    -1,   279,   555,    -1,    -1,    -1,    -1,    -1,\n+    1053,  2988,   288,    -1,    -1,    -1,    -1,    -1,    -1,   167,\n+      -1,    -1,    -1,     3,  2688,     5,   261,    -1,  1071,    -1,\n+    1444,  1445,    -1,    -1,    -1,    -1,  1450,  1080,  2702,  1082,\n+    1083,  3018,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   484,\n+      -1,    -1,    -1,    -1,    -1,    -1,   491,   492,   493,   494,\n+     495,   496,    -1,    -1,  1120,    -1,    -1,    -1,  3029,  3030,\n+     305,    -1,    -1,  1129,  3051,    -1,    -1,   312,  3055,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3065,    -1,\n+    3067,    -1,  3069,    -1,    -1,   938,  3073,    -1,  3075,    -1,\n+    3077,    -1,   193,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+    3087,    -1,    -1,    -1,    -1,    -1,    -1,   352,    40,    -1,\n+      -1,    -1,    -1,  3100,    -1,   216,  3265,   107,   108,    -1,\n+      -1,    -1,    -1,    -1,   369,    -1,  3113,    -1,    60,    -1,\n+    3101,  3118,  3103,    -1,    -1,    -1,    -1,   295,    -1,   932,\n+     933,    -1,   935,    -1,    -1,   938,   432,   305,   306,   307,\n+      -1,   944,   945,    -1,    -1,    -1,    -1,   950,    -1,    -1,\n+      -1,    -1,    -1,   956,    -1,    -1,    -1,    -1,    -1,    -1,\n+     963,  3142,   104,    -1,    -1,    -1,    -1,    -1,  3165,    -1,\n+     973,  3055,     8,   284,  2858,    11,    -1,  3158,  3175,    15,\n+      16,  3162,   437,   183,   184,    -1,   989,    -1,    -1,    -1,\n+      -1,  3188,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+     368,    -1,   498,  3200,    -1,   501,   502,    -1,    -1,   793,\n+      46,    -1,  2896,    -1,    -1,    -1,    -1,    53,    -1,    -1,\n+      -1,  3218,   793,    -1,    -1,    -1,    -1,  3055,    -1,   171,\n+      -1,    -1,    -1,    -1,    -1,    -1,  1039,   405,    -1,    -1,\n+      -1,    -1,    78,    -1,    -1,  3242,    -1,   247,   248,   249,\n+     250,   251,   252,    -1,   196,   255,   256,    -1,    -1,  3256,\n+      -1,    -1,    -1,  3055,    -1,    -1,  1129,    -1,  3265,   437,\n+    3267,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+     448,  1084,    -1,  1086,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,  3290,   462,    -1,    -1,    -1,  1101,  1102,\n+      -1,  3282,    -1,   245,  1107,   141,    -1,    -1,  3305,  3306,\n+      -1,   253,    -1,    -1,    -1,    -1,  3200,    -1,   486,    -1,\n+      -1,    -1,    -1,   265,    -1,    -1,  1129,  3308,    -1,    -1,\n+      -1,    -1,   500,    -1,  3331,    -1,   172,  1140,  1141,    -1,\n+      -1,    -1,    -1,    -1,    -1,  3029,  3030,    -1,    -1,    -1,\n+    1153,    -1,   188,    -1,   296,    -1,  1419,   193,  3242,    -1,\n+      -1,    -1,    -1,    -1,    -1,   365,   366,  1170,  1444,  1445,\n+    3367,  1174,  3200,    -1,  1450,  1178,   487,   488,   489,    -1,\n+     491,   492,   493,   494,   495,   496,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,   231,    -1,    -1,   982,    -1,\n+      -1,    -1,    -1,    -1,    -1,   347,  3290,    -1,  3200,    -1,\n+      -1,   982,    -1,    -1,  3242,   167,    -1,  3101,    -1,  3103,\n+      -1,    -1,  1856,  1857,  1858,  1859,  1860,  1861,   370,    -1,\n+    1864,  1865,  1866,  1867,  1868,  1869,  1870,  1871,  1872,  1873,\n+      12,    -1,    -1,    -1,    -1,    17,    -1,   389,   284,    -1,\n+    3242,    -1,    -1,    -1,    -1,    -1,    -1,    29,  3142,    -1,\n+      -1,    -1,  3290,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    43,    44,    -1,  3158,    -1,    -1,    -1,  3162,    -1,\n+     480,   481,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,   107,   108,    -1,  3290,    -1,\n+      -1,    -1,    -1,    -1,  1307,    -1,  1309,    -1,    -1,    -1,\n+      -1,  1314,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,  1325,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+     102,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,\n+      -1,    11,    -1,  1606,   380,    15,    16,    -1,    -1,    19,\n+      20,    21,  1355,   305,   306,   307,    -1,  1360,    -1,    -1,\n+      -1,    -1,    -1,    -1,   167,  1641,    36,    -1,    -1,    -1,\n+    1154,   183,   184,    -1,    -1,  2009,  2010,    -1,    -1,    -1,\n+      -1,  1444,  1445,  1154,    -1,   147,    -1,  1450,  1391,    -1,\n+      -1,  1394,    -1,  1396,  1397,    -1,  1399,  1400,  3282,    -1,\n+       8,    -1,    -1,    11,   555,   167,    -1,    15,    16,    -1,\n+      -1,    19,    20,    21,    -1,    -1,   368,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,  3308,    -1,    -1,    -1,    36,    -1,\n+      -1,    -1,    -1,    -1,    -1,   247,   248,   249,   250,   251,\n+     252,  1444,  1445,   255,   256,    -1,    12,  1450,   484,  1452,\n+      -1,    17,    -1,   405,    -1,   491,   492,   493,   494,   495,\n+     496,    -1,  1465,    29,  1467,  1468,    -1,    -1,    -1,    -1,\n+      -1,    -1,  1475,    -1,  1477,    -1,  1479,    43,    44,  1482,\n+      -1,    -1,    -1,    -1,  1487,   437,    -1,  1490,    -1,  1492,\n+      -1,    -1,   295,  1496,    -1,  1498,   448,  1500,    -1,    -1,\n+      -1,    -1,   305,   306,   307,    -1,    -1,    -1,    -1,    -1,\n+     462,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1522,\n+      -1,    -1,    -1,    -1,  1527,    -1,    -1,    -1,    -1,  1313,\n+      -1,  1594,    -1,    -1,   486,    -1,   102,    -1,    -1,    -1,\n+      -1,    -1,  1313,   305,   306,   307,   216,    -1,   500,    -1,\n+      -1,    -1,    -1,   365,   366,    -1,    -1,    -1,  1342,  1343,\n+      -1,    -1,  1565,    -1,  1827,   368,    -1,    -1,    -1,    -1,\n+    1833,  1342,  1343,    -1,  1358,    -1,    -1,    -1,  1641,    -1,\n+    1856,  1857,  1858,  1859,  1860,  1861,    -1,  1358,  1864,  1865,\n+    1866,  1867,  1868,  1869,  1870,  1871,  1872,  1873,    -1,    -1,\n+      -1,    40,   405,    55,    -1,    -1,   368,    -1,   216,    -1,\n+      -1,  1614,    -1,  1616,   284,  1618,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,  1628,  1629,    -1,    -1,    -1,\n+      -1,   107,   108,    -1,   437,    -1,    -1,    -1,  1641,    -1,\n+      -1,    -1,   793,   405,    -1,   448,    -1,    -1,   100,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   462,\n+      -1,    -1,   101,  1666,   103,  1668,   105,   119,   480,   481,\n+       0,    -1,    -1,  1936,    -1,   437,   284,    -1,    -1,    -1,\n+    1683,  1684,    -1,   486,    -1,   137,   448,    -1,   500,   141,\n+      -1,  1694,  1695,  1696,  1697,    -1,  1699,   500,    -1,    -1,\n+     462,    -1,  1705,    -1,  1707,    -1,    -1,   183,   184,    -1,\n+     555,   163,    -1,    -1,   166,  1718,  1719,    -1,    -1,    -1,\n+    1723,  1724,    -1,    -1,   486,  1728,  1729,  1730,  1731,   181,\n+    1733,  1734,    -1,  2009,  2010,    -1,    -1,    -1,   500,   147,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-     279,    78,    -1,   282,  1923,    -1,    -1,    -1,  1927,   288,\n-      -1,    -1,    -1,    -1,  1933,    -1,    -1,  1437,  1438,    -1,\n-      -1,    -1,    -1,  1443,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,  1755,  1756,  1757,  1758,  1759,   529,    -1,   167,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,  1553,\n+    1773,   247,   248,   249,   250,   251,   252,    -1,    -1,   255,\n+     256,    -1,  1553,  2417,  2418,    -1,   558,   559,    -1,    -1,\n+      -1,    -1,    -1,  1856,  1857,  1858,  1859,  1860,  1861,    -1,\n+      -1,  1864,  1865,  1866,  1867,  1868,  1869,  1870,  1871,  1872,\n+    1873,    -1,    -1,   143,    -1,    -1,    -1,   487,   488,   489,\n+     272,   491,   492,   493,   494,   495,   496,   157,   280,    -1,\n+      -1,   982,   162,    -1,    -1,    -1,    -1,   167,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,   176,  2123,    -1,   301,\n+     180,    -1,    -1,  1856,  1857,  1858,  1859,  1860,  1861,    -1,\n+      -1,  1864,  1865,  1866,  1867,  1868,  1869,  1870,  1871,  1872,\n+    1873,    -1,    -1,    -1,    -1,   327,    -1,    -1,    -1,   487,\n+     488,   489,   212,   491,   492,   493,   494,   495,   496,   365,\n+     366,  1894,    -1,    -1,    -1,    -1,  2159,   305,   306,   307,\n+      -1,   673,   232,  1906,    -1,  1689,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,  1916,    -1,    -1,    -1,    -1,  1689,  1922,\n+      -1,    -1,    -1,    -1,    -1,  1928,    -1,    -1,    -1,    -1,\n+    1933,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+    2203,    -1,    -1,    -1,    -1,    -1,  2009,  2010,   793,   279,\n+      -1,    -1,   282,    -1,    -1,    -1,    -1,  2220,   288,    -1,\n+     368,    -1,    -1,   529,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,  2608,  1978,    -1,    -1,    -1,  1982,\n+      -1,    -1,    -1,    -1,  1987,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,   559,    -1,    -1,   326,   405,    -1,    -1,\n+      -1,    -1,    -1,  1154,   480,   481,  2009,  2010,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,  1799,    -1,  2280,    -1,   349,\n+      -1,    -1,    -1,  2026,    -1,  2288,    -1,  2290,  1799,   437,\n+      -1,  2294,    -1,  2296,    -1,    -1,    -1,    -1,    -1,    -1,\n+     448,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,   462,    -1,  2059,    -1,    -1,  1843,\n+    2123,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2071,    -1,\n+      -1,  1855,  1843,  2076,    -1,   405,   515,  2080,   486,    -1,\n+     519,    -1,    -1,   522,  1855,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,   500,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,  1885,   432,    -1,    -1,    -1,    -1,   673,  1892,    -1,\n+      -1,    -1,   442,  2747,  1885,    -1,    -1,  2120,    -1,    -1,\n+    2123,  1892,    -1,  2126,    -1,    -1,    -1,    -1,    -1,   459,\n+      -1,   461,   462,    -1,    -1,    -1,    -1,   982,    -1,  2142,\n+      -1,  2417,  2418,    -1,    -1,    -1,  1930,    -1,    -1,    -1,\n+    1934,    -1,    -1,    -1,    -1,    -1,  1940,    -1,    -1,  1930,\n+      -1,    -1,  1313,  1934,    -1,    -1,   605,    -1,   498,  1940,\n+      -1,   501,   502,   503,    -1,    -1,    -1,    -1,   950,    -1,\n+       8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,    -1,\n+      -1,  1342,  1343,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,   973,  2205,    -1,    -1,    -1,    -1,  1358,  2211,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,  2222,\n+    2223,  2224,  2225,    -1,    -1,    53,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,  2236,    -1,  2238,    -1,    -1,  2241,    -1,\n+      -1,    -1,    -1,  2246,    -1,    -1,  2880,    -1,    -1,    -1,\n+      78,    -1,    -1,  2516,    -1,    -1,  2259,    -1,    -1,   698,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1039,    -1,    -1,\n+      -1,    -1,    -1,  2276,    -1,    -1,    -1,    -1,    -1,    -1,\n+    2543,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2292,\n+    2293,    -1,  2295,   732,   733,   734,   735,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,  1154,\n+      -1,    11,    -1,   141,    -1,    15,    16,    -1,    -1,    -1,\n+      -1,  2324,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1101,\n+    1102,    -1,  2608,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,  2344,    -1,    -1,   172,    -1,    46,    -1,    -1,  2352,\n+    2353,  2354,    -1,    53,  2417,  2418,    -1,  2633,    -1,  2362,\n+     188,  2364,    -1,  2366,    -1,   193,    -1,    -1,    -1,  2372,\n+      -1,    -1,    -1,    -1,    -1,  2638,    -1,    -1,    78,     8,\n+      -1,  2657,    11,    -1,  2387,    -1,    15,    16,    -1,    -1,\n+      19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,  1553,   231,    -1,    -1,    -1,    36,    -1,    -1,\n+      -1,    -1,    -1,    -1,  2417,  2418,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2692,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,   326,    -1,    -1,\n+      -1,   141,  2226,  2446,    -1,    -1,    -1,    -1,    -1,  2452,\n+      -1,    -1,    -1,    -1,    -1,  2226,   284,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,  2468,    -1,    -1,  1313,  2472,\n+      -1,  2747,   172,  2476,  2477,  2478,    -1,    -1,    -1,  2482,\n+    2483,  2484,    -1,  2486,    -1,    -1,    -1,    -1,   188,    -1,\n+      -1,    -1,    -1,   193,    -1,    -1,   935,  1342,  1343,    -1,\n+      -1,    -1,  2505,    -1,  2507,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,  1358,    -1,    -1,    -1,  2520,  2521,  2522,\n+    2523,  2524,  2525,  2526,  2527,  2528,  2529,    -1,    -1,    -1,\n+      -1,   231,    -1,    -1,    -1,  1101,    -1,    -1,  1689,    -1,\n+      -1,    -1,    -1,  2546,    -1,  2608,    -1,    -1,    -1,  2552,\n+      -1,    -1,   380,    -1,    -1,    -1,    -1,    -1,    -1,  2562,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,   141,    -1,    -1,    -1,  1256,    -1,\n-     349,    -1,    -1,    -1,    -1,    -1,    -1,  1265,    -1,    -1,\n-      -1,    -1,   487,   488,   489,    -1,   491,   492,   493,   494,\n-     495,   496,  1437,  1438,    -1,   172,    -1,    -1,  1443,    -1,\n-      -1,  1289,  2403,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,   188,    -1,    -1,  2901,    -1,   193,  2243,    -1,    -1,\n-      -1,     8,  2909,    -1,    11,    -1,   405,    -1,    15,    16,\n+    2633,    -1,    -1,    -1,    -1,  2578,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,   284,    -1,    -1,   216,    -1,    -1,\n+      -1,  2854,    -1,    -1,  2597,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,  2880,  2608,    -1,    -1,    -1,    -1,\n+      -1,  2614,    -1,    -1,  2877,    -1,    -1,    -1,  2621,  2622,\n+    2623,  2624,    -1,    -1,  1396,  1397,    -1,  1399,    -1,  2413,\n+    2633,    -1,    -1,  2636,    -1,    -1,    -1,  2640,  2641,    -1,\n+      -1,    -1,  2413,    -1,    -1,    -1,    -1,    -1,  1799,    -1,\n+      -1,    -1,    -1,  2656,    -1,   284,   484,    -1,    -1,    -1,\n+      -1,    -1,    -1,   491,   492,   493,   494,   495,   496,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,  3253,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,   432,   231,    -1,    -1,    -1,  3253,    46,\n-      -1,    -1,    -1,   442,    -1,    -1,    53,    -1,    -1,  2956,\n-      -1,    -1,    -1,    -1,  2961,    -1,    -1,    -1,    -1,    -1,\n-     459,    -1,   461,   462,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    78,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-    2987,    -1,    -1,    -1,  2505,    -1,    -1,   284,    -1,    -1,\n-      -1,    -1,    -1,    -1,  1634,    -1,    -1,    -1,    -1,   498,\n-    3007,  3008,   501,   502,   503,    -1,    -1,    -1,    -1,    -1,\n-    1418,    -1,    -1,    -1,  2217,    -1,    -1,    -1,    -1,  3026,\n-      -1,    -1,  1587,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,   141,    -1,    -1,    -1,    -1,  3020,\n-      -1,    -1,  1450,    -1,  1452,  1453,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,  2575,    -1,    -1,  1465,  1466,  3040,\n-    3067,    -1,    -1,    -1,    -1,   172,    -1,    -1,     8,  1634,\n-      -1,    11,    -1,    -1,  1482,    15,    16,    -1,  2217,  2600,\n-      -1,   188,    -1,   380,    -1,    -1,   193,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    26,    -1,    -1,    -1,    -1,\n-      -1,    32,    -1,  1511,    -1,  1513,    46,    -1,    -1,    40,\n-      -1,    -1,    -1,    53,    -1,    -1,    -1,    -1,  3099,    -1,\n-      -1,    -1,    -1,    -1,   231,    -1,    -1,    -1,    -1,    60,\n-      -1,    -1,    -1,  1541,    -1,    -1,  2657,    -1,    78,  1547,\n-    1548,  1549,  1550,  1551,  1552,  1553,  1554,    -1,  3129,    -1,\n-      -1,  1559,  1560,    -1,    -1,    -1,  1564,    -1,    -1,  2505,\n-    1568,    -1,    -1,  1571,  1572,  1573,  1574,  1575,  1576,  1577,\n-    1578,  1579,    -1,   104,  1582,    -1,    -1,   284,    -1,    -1,\n-      -1,  1589,    -1,  1591,    -1,    -1,    -1,   484,    -1,    -1,\n-      -1,    -1,    -1,    -1,   491,   492,   493,   494,   495,   496,\n-    2403,    -1,   133,    -1,  1612,    -1,    -1,    -1,    -1,  1849,\n-    1850,  1851,  1852,  1853,  1854,    -1,    -1,  1857,  1858,  1859,\n-    1860,  1861,  1862,  1863,  1864,  1865,  1866,    -1,    -1,    -1,\n-      -1,    -1,   172,    -1,    -1,    -1,    -1,  1645,  1646,    -1,\n-      -1,    -1,  3249,  2764,    -1,    -1,    -1,    -1,   188,    -1,\n-      -1,    -1,    -1,   193,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,  2403,   196,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,   380,    -1,    -1,    -1,  2798,    -1,    -1,\n-      24,    -1,    -1,    -1,  1849,  1850,  1851,  1852,  1853,  1854,\n-      -1,   231,  1857,  1858,  1859,  1860,  1861,  1862,  1863,  1864,\n-    1865,  1866,  2505,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,   245,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,   253,  1731,    -1,    -1,    -1,  1735,    -1,    -1,\n-    1738,  1739,    -1,    -1,   265,    79,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,   284,    -1,    -1,    -1,    -1,  2870,\n-      -1,    95,    -1,    -1,    -1,   286,    -1,    -1,    -1,    -1,\n-      -1,    -1,  2002,  2003,  1772,   296,  2505,    -1,    -1,    -1,\n-      -1,    -1,  2575,    -1,    -1,    -1,    -1,   484,    -1,    -1,\n-      -1,    -1,    -1,    -1,   491,   492,   493,   494,   495,   496,\n-      -1,    -1,    -1,    -1,    -1,    -1,     0,  2600,   142,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2753,   152,    -1,\n-     341,    -1,  2758,    -1,   345,    -1,   347,    -1,    22,    -1,\n-     164,    -1,    -1,    -1,    -1,   169,    -1,    -1,    32,    -1,\n-      34,    35,  1840,  1841,    -1,  1843,  2575,  2002,  2003,   370,\n-     380,    -1,    -1,    47,   375,    -1,    -1,    -1,    52,    -1,\n-      -1,    -1,    -1,   197,  2657,    -1,    -1,    61,   389,  2805,\n-    2806,  2600,    -1,    -1,  1872,  1873,    -1,    -1,  1876,    73,\n-      -1,    -1,    -1,    -1,  2114,    -1,    -1,    -1,    -1,    -1,\n-      84,    -1,    -1,    -1,    -1,  3006,    -1,    -1,    -1,    -1,\n-      -1,    -1,    96,    -1,    98,    -1,   240,  1905,    -1,    -1,\n-     244,    -1,    -1,  1911,    -1,   109,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,   445,    -1,    -1,    -1,  2657,   123,\n-     124,    -1,    -1,  1931,    -1,    -1,    -1,    -1,    -1,   133,\n-      -1,    -1,    -1,    -1,  1942,   139,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,   147,   484,   149,   150,    -1,    -1,  2114,\n-      -1,   491,   492,   493,   494,   495,   496,    -1,    -1,   163,\n-      -1,  2764,    -1,   167,    -1,  1973,   310,    -1,    -1,    -1,\n-    1978,  1979,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,   325,    -1,    -1,    -1,    -1,    -1,    -1,   192,    -1,\n-      -1,    -1,    -1,    -1,    -1,  2798,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,   208,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,  2021,   358,    -1,  2024,   361,  2026,    -1,\n-      -1,    -1,    -1,    -1,    -1,  2764,   370,    -1,    -1,   373,\n-     234,    -1,    -1,    -1,  2042,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,   391,    -1,  2995,\n-    2996,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2798,\n-    3006,   405,    -1,    -1,    -1,    -1,    -1,  2870,   412,    -1,\n-      -1,    -1,  2080,    -1,    -1,    -1,   935,   421,    -1,    -1,\n-      -1,    -1,    -1,   427,    -1,    -1,    -1,    -1,    -1,  2097,\n-    2098,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,   305,   306,   307,    -1,    -1,    -1,    -1,  2116,   313,\n-     454,    -1,   316,    -1,    -1,    -1,    -1,  2125,    -1,    -1,\n+     380,    -1,    -1,  2686,  2747,  2688,    -1,  2950,    -1,    -1,\n+      -1,    -1,  1843,    -1,    -1,  1467,    -1,    -1,    -1,  2702,\n+      -1,  1140,    -1,  2706,  1855,    -1,    -1,    -1,  1553,  2712,\n+      -1,    -1,    -1,    -1,  1153,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,  2726,    -1,    -1,  1498,    -1,  1500,  2732,\n+      -1,    -1,  2516,    -1,  1885,  1174,    -1,    -1,    -1,    -1,\n+      -1,  1892,  2745,  2746,  2747,  2516,    -1,    -1,    -1,    -1,\n+    2753,    -1,    -1,    -1,    -1,  3018,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2770,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1930,\n+      -1,    -1,    -1,  1934,   484,    -1,    -1,    -1,    -1,  1940,\n+      -1,   491,   492,   493,   494,   495,   496,    -1,     8,  3075,\n+      -1,    11,  2586,    -1,    -1,    15,    16,    -1,    -1,    19,\n+      20,    21,    -1,    -1,    -1,  2586,    -1,  2880,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2611,    -1,    -1,\n+      -1,  1397,    -1,  1399,    -1,    -1,    -1,    -1,    -1,    -1,\n+    2611,    -1,  2845,    -1,  1689,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,  2857,    -1,    -1,    -1,   487,   488,\n+     489,    -1,   491,   492,   493,   494,   495,   496,  2871,    -1,\n+    1309,    -1,  3135,    -1,    -1,  1314,    -1,  2880,    -1,    -1,\n+      -1,    -1,    -1,    -1,  2668,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,  1668,  2668,    -1,    -1,\n+      -1,    -1,     0,  2906,    -1,    -1,    -1,    -1,    -1,  2912,\n+      -1,    -1,  1684,    -1,    -1,    -1,    -1,  2920,    -1,    -1,\n+      -1,    -1,  1694,    -1,  1696,    -1,    -1,  1699,    -1,    -1,\n+      -1,    -1,    -1,  1705,    -1,  1707,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,  2946,    -1,    -1,    -1,  1719,    -1,    -1,\n+      -1,    -1,  1724,    -1,  1799,    -1,  1728,  1729,  1730,  1731,\n+      -1,  1733,  1734,    -1,    -1,  2968,    -1,    -1,    -1,    -1,\n+    2973,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,  2870,  3253,    -1,    -1,    -1,     8,    -1,    -1,    11,\n-      -1,   345,    -1,    15,    16,    -1,    -1,    19,    20,    21,\n-     354,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,   368,    -1,    -1,  2407,  2408,    -1,\n-      -1,   375,    -1,    -1,    46,   379,    -1,    -1,  2186,    -1,\n-      -1,    53,    -1,    -1,    -1,   389,    -1,    -1,    -1,  1048,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,   401,    -1,    -1,\n-      -1,   405,    -1,  3006,    -1,    -1,    78,    -1,    -1,    -1,\n+      -1,  2775,    -1,    -1,    -1,    -1,  2999,    -1,  1843,    -1,\n+      98,    -1,  3265,    -1,  2775,    -1,   216,    -1,    -1,    -1,\n+    1855,    -1,  3075,    -1,    -1,    -1,  3019,  3020,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,  2809,    -1,    -1,    -1,  3032,\n+      -1,  3034,    -1,    -1,    -1,  3038,  1475,    -1,  2809,  3302,\n+    1885,    -1,    -1,    -1,    -1,   143,    -1,  1892,    -1,  3052,\n+      -1,    -1,  3055,    -1,    -1,    -1,    -1,    -1,    -1,   157,\n+      -1,    -1,    -1,    -1,   162,    -1,    -1,    -1,    -1,   167,\n+      -1,    -1,  3075,    -1,   284,  2226,  3079,  3080,   176,    -1,\n+    3083,    -1,   180,    -1,    -1,  1930,    -1,    40,    -1,  1934,\n+      -1,    -1,    -1,    -1,    -1,  1940,    -1,  2881,    -1,    -1,\n+      -1,  3104,    -1,    -1,    -1,    -1,    -1,    60,  3111,    -1,\n+    2881,    -1,    -1,    -1,   212,    -1,    -1,    -1,  1684,    -1,\n+      -1,    -1,  1894,    -1,    -1,    -1,    -1,    -1,  1694,    -1,\n+    1696,    -1,    -1,  1699,   232,    -1,    -1,    -1,  3141,  1705,\n+      -1,  1707,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,   104,   105,  1719,    -1,    -1,  1928,    -1,  1724,    -1,\n+     113,  1933,  1728,  1729,  1730,  1731,    -1,  1733,  1734,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,  3179,  1616,    -1,  1618,\n+      -1,   279,    -1,    -1,   282,    -1,    -1,    -1,    -1,  1628,\n+     288,    -1,    -1,    -1,   649,   650,    -1,  3200,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,  1978,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,   920,  1987,    -1,    -1,   171,    -1,\n+      -1,    -1,    -1,    -1,  3227,    -1,    -1,  1666,   326,    -1,\n+      -1,    -1,    -1,    -1,  3018,    -1,  3239,  3240,    -1,  3242,\n+    3243,    -1,    -1,   196,    -1,    -1,    -1,  3018,  3251,    -1,\n+      -1,   349,    -1,    -1,    -1,    -1,    -1,    -1,  3261,   714,\n+      -1,    -1,  2413,   718,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,   980,    -1,    -1,   487,   488,   489,\n+    3283,   491,   492,   493,   494,   495,   496,  3290,    -1,    -1,\n+      -1,    -1,   245,    -1,    -1,    -1,    -1,    -1,    -1,  2071,\n+     253,    -1,    -1,    -1,    -1,    -1,    -1,   405,    -1,    -1,\n+      -1,    -1,   265,    -1,   267,    -1,  1755,  1756,  1757,  1758,\n+    1759,    -1,    -1,    -1,  3327,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,     0,   432,    -1,    -1,    -1,  3341,    -1,\n+      -1,    -1,    -1,   296,   442,    -1,    -1,  1053,  2120,    -1,\n+      -1,    -1,    -1,    -1,  2126,    -1,    -1,    -1,    -1,    -1,\n+      -1,   459,    -1,   461,   462,  2516,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,  1080,     8,  1082,  1083,    11,    -1,\n+      -1,  2226,    15,    16,    -1,    -1,    19,    20,    21,    -1,\n+      -1,    -1,    -1,    -1,   347,    -1,    -1,    -1,    -1,    -1,\n+     498,    -1,    -1,   501,   502,   503,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    46,    -1,    -1,    -1,   370,    -1,    -1,\n+      53,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,\n+      -1,    98,    19,    20,    21,  2586,   389,    -1,   391,    -1,\n+      -1,   394,    -1,    -1,    -1,    78,    -1,    -1,    -1,  1155,\n+      -1,    -1,  1158,  1159,    -1,    -1,    -1,    -1,    -1,    46,\n+    2611,    -1,    -1,    -1,  2236,    -1,    53,  1906,    -1,    -1,\n+      -1,    -1,    -1,   928,    -1,    -1,   143,    -1,    -1,   934,\n+      -1,  3265,   937,    -1,    -1,   940,   941,   942,   943,    -1,\n+     157,    78,    -1,    -1,  3265,   162,    -1,    -1,    -1,    -1,\n+     167,    -1,    -1,    -1,     8,  2071,    -1,    11,    -1,   176,\n+      -1,    15,    16,   180,    -1,    -1,    -1,  2668,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,   981,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   172,\n+      -1,    -1,    46,    -1,    -1,   212,  1001,   500,    -1,    53,\n+      -1,    -1,    -1,    -1,    -1,   188,    -1,    -1,    -1,    -1,\n+     193,    -1,    -1,    -1,  1019,   232,    -1,    -1,  2413,    -1,\n+      -1,    -1,    -1,    -1,    78,  1030,  1031,  1032,    -1,  1034,\n+    1035,    -1,    -1,   216,   217,   172,    -1,    -1,    -1,    -1,\n+    2362,    -1,    -1,    -1,  2366,    -1,     8,    -1,   231,    11,\n+    2372,   188,    -1,    15,    16,    -1,   193,    19,    20,    21,\n+    1065,    -1,   279,    -1,    -1,   282,    -1,    -1,    -1,    -1,\n+      -1,   288,    -1,    -1,  2775,    -1,    -1,    -1,    -1,   216,\n+     217,    -1,    -1,    -1,  1340,    -1,    -1,   270,    -1,    -1,\n+      -1,    -1,    -1,    -1,   231,  1351,    -1,  1353,    -1,    -1,\n+      -1,   284,    -1,    -1,    -1,    -1,    -1,  1363,  2809,   326,\n+    1115,    -1,    -1,    -1,  1119,  1120,    -1,    -1,   172,    -1,\n+    2236,  2516,    -1,    -1,  1380,  1130,  1131,    -1,    -1,    -1,\n+     267,    -1,   349,   270,   188,    -1,    -1,    -1,    -1,   193,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,   284,    -1,    -1,\n+    2472,    -1,  1408,  1409,  2476,  2477,  2478,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-     424,    -1,    -1,    -1,    -1,    -1,    -1,  2235,    -1,    -1,\n-      -1,  1090,    -1,   437,    -1,    -1,   440,    -1,    -1,   443,\n-      -1,    -1,  2407,  2408,   448,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   462,    -1,\n-      -1,    -1,    -1,  1122,    -1,    -1,    -1,  3006,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,   231,    -1,    -1,\n+    2881,    -1,    -1,  2505,    -1,    -1,    -1,    -1,   405,    -1,\n+      -1,  2586,    -1,    -1,    -1,    -1,    -1,   380,  2520,  2521,\n+    2522,  2523,  2524,  2525,  2526,  2527,  2528,  2529,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,   432,  2611,    -1,    -1,    -1,\n+      -1,    -1,  2211,    -1,    -1,   442,    -1,    -1,    -1,    -1,\n+     284,    -1,    -1,    -1,  2223,  2224,  2225,    -1,    -1,    -1,\n+      -1,    -1,   459,   380,   461,   462,    -1,    -1,    -1,  2238,\n+      -1,    -1,  2241,    -1,   216,    -1,    -1,  2246,  1263,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,   938,  1272,    -1,    -1,\n+      -1,    -1,    -1,  2668,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,   498,    -1,    -1,   501,   502,   503,    -1,    -1,    -1,\n+      -1,  1296,  2614,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,   484,    -1,    -1,   487,   488,   489,    -1,   491,   492,\n+     493,   494,   495,   496,    -1,    -1,    -1,  3018,  2640,    -1,\n+      -1,    -1,   284,    -1,    -1,    -1,   380,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-       8,    -1,   486,    11,    -1,    -1,    -1,    15,    16,    17,\n-      18,    19,    20,    21,    -1,    -1,   500,    -1,    -1,   503,\n-     172,    -1,    -1,    -1,    -1,    -1,    -1,  3253,    36,    -1,\n-      -1,    -1,    -1,    -1,  1173,    -1,   188,    -1,    46,    -1,\n-      -1,   193,    -1,    -1,    -1,    53,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,   484,    -1,    -1,\n+     487,   488,   489,    -1,   491,   492,   493,   494,   495,   496,\n+      -1,  2477,  2478,  2352,  2353,  2354,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,   216,   217,    -1,    -1,    -1,    -1,\n-      78,    -1,    -1,    -1,    -1,    -1,    -1,  2597,    -1,   231,\n-      -1,    -1,  2370,    -1,    -1,    -1,  2374,  2375,    -1,    -1,\n-      -1,    -1,    -1,  2381,    -1,    26,    -1,    -1,    -1,    -1,\n-      -1,    32,  2622,  2391,    -1,    -1,  2394,    -1,  2396,    40,\n-      -1,    -1,    -1,    -1,    -1,   267,  2404,    -1,   270,    -1,\n-      -1,    -1,    -1,    -1,  2412,  2413,  2646,    -1,    -1,    60,\n-      -1,  2419,   284,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,  2433,    -1,    -1,    -1,    -1,\n-      -1,    -1,  2597,  1292,    -1,  2443,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,   172,    -1,    -1,    -1,    -1,    -1,\n-    3253,    -1,    -1,   104,    -1,  2463,    -1,  2622,    -1,    -1,\n-     188,    -1,    -1,    -1,    -1,   193,     8,    -1,    -1,    11,\n-      -1,    -1,    -1,    15,    16,    17,    18,    19,    20,    21,\n-      -1,    -1,   133,    -1,    -1,    -1,    -1,    -1,   216,   217,\n-      -1,    -1,    -1,    -1,    36,    -1,  2736,    -1,    -1,    -1,\n-      -1,    -1,    -1,   231,    46,    -1,    -1,    -1,   380,    -1,\n-      -1,    53,    -1,    -1,  3253,    -1,    -1,    -1,    -1,    -1,\n+    2775,    -1,  1054,    -1,    -1,    -1,    -1,    -1,    -1,  2505,\n+      -1,    -1,    -1,    -1,    -1,    -1,  1652,  1653,    -1,    -1,\n+      -1,    -1,    -1,    -1,  2520,  2521,  2522,  2523,  2524,  2525,\n+    2526,  2527,  2528,  2529,  2809,    -1,    -1,    -1,    -1,    -1,\n+    1425,    -1,    -1,    -1,  2746,  1097,    -1,    -1,    -1,    -1,\n+     484,    -1,    -1,    -1,    -1,    -1,    -1,   491,   492,   493,\n+     494,   495,   496,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,  1457,    -1,  1459,  1460,  1712,  1129,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,  1722,  1472,  1473,  1725,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2468,\n+      -1,    -1,    -1,    -1,  1489,    -1,  2881,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    78,    -1,    -1,   267,\n-      -1,    -1,   270,    -1,    -1,   196,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,   284,  1416,    -1,   287,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1180,    -1,\n+      -1,    -1,    -1,  1518,    -1,  1520,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,   487,   488,   489,    -1,   491,\n+     492,   493,   494,   495,   496,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,  1548,    -1,    -1,    -1,  1803,  1804,  1554,\n+    1555,  1556,  1557,  1558,  1559,  1560,  1561,    -1,    -1,    -1,\n+      -1,  1566,  1567,  2552,  3265,    -1,  1571,    -1,    -1,    -1,\n+    1575,  1827,    -1,  1578,  1579,  1580,  1581,  1582,  1583,  1584,\n+    1585,  1586,    -1,    -1,  1589,    -1,    -1,    -1,    -1,    -1,\n+    2912,  1596,    -1,  1598,    -1,    -1,    -1,    -1,  2920,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,  2736,    -1,    -1,  1433,    -1,  1435,    -1,  1437,  1438,\n-      -1,  1440,    -1,    -1,  1443,    -1,    -1,  1446,    -1,    -1,\n-    1449,    -1,    -1,    -1,   245,  1454,    -1,    -1,  1457,    -1,\n-      -1,    -1,   253,    -1,    -1,    -1,    -1,    -1,    -1,  2617,\n-    2618,    -1,   484,    -1,   265,   487,   488,   489,    -1,   491,\n-     492,   493,   494,   495,   496,    -1,  2634,    -1,    -1,  2869,\n-     172,    -1,    -1,    -1,    -1,   286,    -1,    -1,  2646,    -1,\n-      -1,    -1,    -1,  2651,  2652,   296,   188,    -1,  2656,    -1,\n-    1509,   193,   380,  2661,    -1,  1514,  2664,  2665,  1517,  1518,\n-    1519,  2669,  2670,    -1,  1523,  2673,    -1,    -1,  1527,    -1,\n-      -1,    -1,    -1,    -1,   216,   217,  2684,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   231,\n-     341,    -1,    -1,    -1,   345,    -1,   347,    -1,    -1,    -1,\n-       3,    -1,    -1,    -1,  2869,     8,    -1,    -1,    11,    -1,\n-      -1,    -1,    15,    16,    17,    18,    19,    20,    21,   370,\n-    2728,    -1,    -1,    -1,   375,   267,    -1,    -1,   270,  1588,\n-      -1,    -1,    -1,    36,    -1,    -1,    -1,    40,   389,    -1,\n-      -1,    -1,   284,    46,    -1,   287,    -1,  2755,    -1,    -1,\n-      53,    -1,    -1,    -1,    -1,    -1,   484,    -1,    -1,   487,\n-     488,   489,    -1,   491,   492,   493,   494,   495,   496,  1628,\n-      -1,    -1,    -1,    -1,    -1,    78,    -1,    -1,    -1,    -1,\n-      -1,    -1,   510,    -1,    -1,  1644,    -1,    -1,    -1,    -1,\n-    1649,    -1,    -1,    -1,   445,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1666,    -1,    -1,\n+      -1,    -1,    -1,    -1,  1619,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,  3018,    -1,    -1,    -1,  1299,    -1,    -1,\n+    2746,    -1,  2621,  2622,  2623,  2624,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,  2968,  1652,  1653,    -1,\n+       8,  2973,    -1,    11,    -1,    -1,    -1,    15,    16,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,  3063,    -1,    -1,    -1,    -1,    -1,    -1,\n-    2838,    -1,    -1,     8,    -1,    -1,    11,    -1,   380,    -1,\n-      15,    16,    17,    18,    19,    20,    21,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2999,    -1,    -1,\n+    1936,    -1,    -1,     8,    -1,    -1,    11,    -1,    46,    -1,\n+      15,    16,    -1,    -1,    -1,    53,    -1,  3019,  3020,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    36,    -1,    -1,    -1,    40,    -1,    -1,    -1,   172,\n-      -1,    46,    -1,    -1,    -1,    -1,    -1,  2885,    53,    -1,\n-      -1,    -1,    -1,    -1,    -1,   188,    -1,    -1,    -1,    -1,\n-     193,    -1,    -1,    -1,    -1,    -1,    -1,  2905,  3063,    -1,\n-      -1,    -1,    -1,    78,  2912,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,   216,   217,  2923,  2924,    -1,    -1,  2927,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   231,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,  3038,    -1,    -1,    -1,\n+      78,    46,    -1,    -1,    -1,    -1,    -1,    -1,    53,    -1,\n+      -1,    -1,    -1,  1738,    -1,    -1,    -1,  1742,    -1,    -1,\n+    1745,  1746,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,  1423,    -1,    78,    -1,    -1,    -1,  3079,    -1,    -1,\n+      -1,    -1,    -1,    -1,  2753,    -1,    -1,    -1,  1440,    -1,\n+    1442,    -1,  1444,  1445,  1779,  1447,    -1,    -1,  1450,    -1,\n+      -1,  1453,    -1,   141,  1456,    -1,    -1,    -1,    -1,  1461,\n+      -1,     8,  1464,    -1,    11,    -1,    -1,    -1,    15,    16,\n+      17,    18,    19,    20,    21,    -1,    -1,  2063,    -1,    -1,\n+      -1,    -1,    -1,    -1,   172,    -1,   141,    -1,    -1,    36,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,\n+     188,    -1,    -1,    -1,    -1,   193,    53,    -1,    -1,    -1,\n+    2096,  2097,  1847,  1848,  1516,  1850,    -1,   172,    -1,  1521,\n+      -1,    -1,  1524,  1525,  1526,    -1,    -1,    -1,  1530,    -1,\n+      -1,    78,  1534,   188,    -1,    -1,    -1,    -1,   193,    -1,\n+    3265,    -1,    -1,   231,  1879,  1880,    -1,    -1,  1883,    -1,\n+      -1,    -1,    -1,  2999,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,   484,    -1,  2952,   487,   488,   489,    -1,   491,\n-     492,   493,   494,   495,   496,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,   504,    -1,   267,    -1,    -1,   270,  2976,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1838,\n-      -1,   284,    -1,    -1,   287,    -1,    -1,  1846,  1847,    -1,\n-    1849,  1850,  1851,  1852,  1853,  1854,    -1,   172,  1857,  1858,\n-    1859,  1860,  1861,  1862,  1863,  1864,  1865,  1866,  1867,    -1,\n-      -1,    -1,    -1,   188,    -1,    -1,    -1,    -1,   193,    -1,\n+      -1,    -1,    -1,  3019,  3020,    -1,   231,  1912,    -1,    -1,\n+      -1,    -1,    -1,  1918,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,  3038,  1595,    -1,    -1,   284,    -1,    -1,    -1,\n+      -1,    -1,    -1,  1938,    -1,    -1,    -1,    -1,    -1,  3261,\n+      -1,    -1,    -1,    -1,  1949,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,   172,    -1,    -1,    -1,   284,\n+      -1,    -1,    -1,  1635,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,   188,    -1,    -1,    -1,  1980,   193,    -1,    -1,  1651,\n+    1985,  1986,    -1,    -1,  1656,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,  2252,    -1,    -1,   216,\n+     217,  1673,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,   231,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,   380,  2028,    -1,    -1,  2031,    -1,  2033,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,  3039,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,   216,   217,    -1,    -1,    -1,    -1,    -1,    -1,  3057,\n-      -1,    -1,    -1,  3061,    -1,    -1,   231,  3065,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3075,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,    -1,    -1,\n-    3088,    -1,    -1,    -1,    -1,    -1,  1945,  1946,    -1,    -1,\n-      -1,    -1,   267,    -1,    -1,   270,    -1,    -1,  3106,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   284,\n-      -1,    -1,   287,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,  1985,    -1,    -1,    -1,\n-    1989,  1990,  1991,  1992,  1993,  1994,  1995,  1996,    -1,    -1,\n-      -1,    -1,    -1,  2002,  2003,  3153,  2005,  2006,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,  3163,    -1,    -1,  2017,    -1,\n-      -1,  2020,    -1,    -1,    -1,    -1,    -1,    -1,  3176,  2028,\n-    2029,  2030,  2031,  2032,  2033,  2034,  2035,  2036,  2037,    -1,\n-      -1,   484,    -1,    -1,   487,   488,   489,    -1,   491,   492,\n-     493,   494,   495,   496,    -1,    -1,    -1,    -1,  3206,    -1,\n-      -1,    -1,    -1,     8,  2063,   380,    11,    -1,    -1,    -1,\n+      -1,    -1,    -1,  3032,  2049,    -1,    -1,    -1,    -1,    -1,\n+     267,    -1,    -1,   270,    -1,   380,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,  3052,    -1,    -1,    -1,   284,    -1,    -1,\n+     287,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,     8,  2089,    -1,    11,    -1,    -1,    -1,\n       15,    16,    17,    18,    19,    20,    21,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,  2106,  2107,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    36,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    46,    -1,    -1,    -1,    -1,    -1,    -1,    53,    -1,\n-      -1,    -1,    -1,    -1,    -1,  2114,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    78,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,  3293,  3294,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   484,\n-      -1,  3319,   487,   488,   489,    -1,   491,   492,   493,   494,\n-     495,   496,  2181,    -1,    -1,    -1,   501,    -1,    -1,    -1,\n-      -1,    -1,  2191,  2192,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3355,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,   172,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,   188,    -1,    -1,    -1,    -1,   193,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,   216,   217,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+    2125,    46,  3111,    -1,    -1,    -1,   484,    -1,    53,  2134,\n+      -1,    -1,    -1,   491,   492,   493,   494,   495,   496,    -1,\n+      -1,    -1,    -1,    -1,    -1,  3261,    -1,    -1,    -1,    -1,\n+      -1,    -1,  3141,    78,    -1,    -1,    -1,    -1,    -1,   484,\n+      -1,    -1,    -1,   380,    -1,    -1,   491,   492,   493,   494,\n+     495,   496,    -1,  1845,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,  1853,  1854,    -1,  1856,  1857,  1858,  1859,  1860,  1861,\n+    2195,    -1,  1864,  1865,  1866,  1867,  1868,  1869,  1870,  1871,\n+    1872,  1873,  1874,    -1,    -1,    -1,    -1,     3,    -1,    -1,\n+      -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,\n+      16,    17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2244,\n+      36,    -1,    -1,    -1,    40,    -1,    -1,   172,    -1,    -1,\n+      46,    -1,    -1,    -1,    -1,    -1,    -1,    53,    -1,    -1,\n+    2516,    -1,    -1,   188,    -1,    -1,    -1,   484,   193,    -1,\n+     487,   488,   489,    -1,   491,   492,   493,   494,   495,   496,\n+    1952,  1953,    78,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,   216,   217,   510,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,   231,    -1,    -1,    -1,\n-    2289,  2290,  2291,    -1,    -1,  2294,  2295,  2296,  2297,  2298,\n-    2299,    -1,    -1,    -1,  2303,  2304,  2305,  2306,  2307,  2308,\n-    2309,  2310,  2311,  2312,    -1,    -1,    -1,    -1,  2317,  2318,\n-      -1,    -1,   267,    -1,    -1,   270,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   284,\n-      -1,    -1,   287,    -1,    -1,    -1,  2345,    -1,    -1,    -1,\n-       8,    -1,  2351,    11,    -1,    -1,    -1,    15,    16,    17,\n-      18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,\n-    2369,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,\n-      -1,    -1,    -1,  2382,    -1,    -1,  2385,  2386,    46,    -1,\n-      -1,    -1,    -1,  2392,  2393,    53,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2406,  2407,  2408,\n-    2409,    -1,  2411,    -1,    -1,    -1,  2415,    -1,    -1,    -1,\n-      78,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,   380,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,  2468,\n-      -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,    19,\n-      20,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    46,    -1,    -1,    -1,\n-      -1,    -1,    -1,    53,   172,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-     188,    -1,    -1,    -1,    -1,   193,    -1,    -1,    78,   484,\n-      -1,    -1,   487,   488,   489,    -1,   491,   492,   493,   494,\n-     495,   496,    -1,    -1,    -1,    -1,   501,    -1,   216,   217,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2566,    -1,    -1,\n-      -1,    -1,    -1,   231,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2597,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   267,\n-      -1,    -1,   270,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,   284,    -1,    -1,   287,\n-      -1,    -1,   172,    -1,    -1,    -1,  2635,    -1,  2637,    -1,\n-      -1,    -1,  2641,    -1,    -1,    -1,    -1,    -1,   188,    -1,\n-      -1,  2650,    -1,   193,  2653,    -1,  2655,    -1,    -1,    -1,\n-    2659,    -1,    -1,  2662,  2663,    -1,    -1,  2666,  2667,    -1,\n-      -1,    -1,    -1,    -1,    -1,  2674,   216,   217,    -1,    -1,\n-      -1,    -1,    -1,    -1,  2683,    -1,    -1,    -1,    -1,    -1,\n-      -1,   231,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2698,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,\n-      15,    16,   380,    -1,    19,    20,    21,   267,    -1,    -1,\n-     270,    -1,    -1,    -1,    -1,    -1,    -1,  2736,    -1,    -1,\n-      -1,    36,    -1,    -1,   284,    -1,    -1,   287,    -1,    -1,\n-      -1,    46,    -1,    -1,    -1,    -1,    -1,    -1,    53,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    78,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+    1992,    -1,    -1,    -1,  1996,  1997,  1998,  1999,  2000,  2001,\n+    2002,  2003,    -1,    -1,    -1,    -1,    -1,  2009,  2010,    -1,\n+    2012,  2013,   267,    -1,    -1,   270,    -1,    -1,    -1,    -1,\n+      -1,    -1,  2024,    -1,    -1,  2027,    -1,    -1,    -1,   284,\n+      -1,    -1,   287,  2035,  2036,  2037,  2038,  2039,  2040,  2041,\n+    2042,  2043,  2044,    -1,    -1,  2380,   172,    -1,    -1,  2384,\n+    2385,    -1,    -1,    -1,    -1,    -1,  2391,    -1,    -1,    -1,\n+      -1,    -1,   188,    -1,    -1,    -1,  2401,   193,  2070,  2404,\n+      -1,  2406,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2414,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2422,  2423,    -1,\n+     216,   217,    -1,    -1,  2429,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,   231,    -1,    -1,    -1,  2444,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2454,\n+      -1,  2123,    -1,    -1,    -1,   380,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2474,\n+      -1,   267,    -1,    -1,   270,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   284,    -1,\n+      -1,   287,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2764,    -1,\n+      -1,    -1,    -1,  2769,    -1,    -1,    -1,    -1,  2190,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2200,  2201,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,   484,    -1,    -1,   487,\n-     488,   489,    -1,   491,   492,   493,   494,   495,   496,    -1,\n-     380,    -1,    -1,   501,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2868,\n-    2869,    -1,    -1,    -1,    -1,    -1,    -1,   172,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   484,\n+    2816,  2817,   487,   488,   489,    -1,   491,   492,   493,   494,\n+     495,   496,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   504,\n+      -1,    -1,    -1,    -1,   380,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,   188,  2893,  2894,    -1,    -1,   193,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,  2911,    -1,    -1,    -1,  2915,    -1,  2917,  2918,\n-    2919,   216,   217,  2922,    -1,    -1,  2925,  2926,    -1,    -1,\n-      -1,    -1,    -1,    -1,  2933,    -1,   231,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,   484,    -1,    -1,   487,   488,   489,\n-      -1,   491,   492,   493,   494,   495,   496,    -1,    -1,    -1,\n-      -1,   501,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,   267,    -1,  2973,   270,    -1,    -1,    -1,    -1,\n-    2979,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   284,\n-      -1,    -1,   287,  2992,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,  2628,  2629,    -1,    -1,  2299,  2300,  2301,\n+      -1,    -1,  2304,  2305,  2306,  2307,  2308,  2309,    -1,    -1,\n+    2645,  2313,  2314,  2315,  2316,  2317,  2318,  2319,  2320,  2321,\n+    2322,    -1,  2657,    -1,    -1,  2327,  2328,  2662,  2663,    -1,\n+      -1,    -1,  2667,    -1,    -1,    -1,    -1,  2672,    -1,    -1,\n+    2675,  2676,    -1,    -1,    -1,  2680,  2681,    -1,    -1,  2684,\n+      -1,    -1,    -1,  2355,    -1,    -1,    -1,    -1,   484,  2361,\n+    2695,   487,   488,   489,    -1,   491,   492,   493,   494,   495,\n+     496,    -1,    -1,    -1,    -1,     8,    -1,  2379,    11,    -1,\n+      -1,    -1,    15,    16,    -1,    -1,    19,    20,    21,    -1,\n+    2392,    -1,    -1,  2395,  2396,    -1,    -1,    -1,    -1,    -1,\n+    2402,  2403,    -1,    -1,  2739,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    46,  2416,  2417,  2418,  2419,    -1,  2421,\n+      53,  3007,  3008,  2425,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,  2766,  3018,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,     0,    78,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-    3019,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    22,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    32,  2479,    34,    35,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,  3045,    -1,    -1,    -1,\n+      -1,    47,    -1,    -1,    -1,    -1,    52,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    61,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,  2849,    -1,    -1,    73,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   172,\n+      96,    -1,    98,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,   109,    -1,   188,    -1,    -1,    -1,    -1,\n+     193,  2896,    -1,    -1,    -1,    -1,    -1,   123,   124,    -1,\n+      -1,    -1,    -1,    -1,    -1,  2577,    -1,   133,    -1,    -1,\n+      -1,  2916,    -1,   139,    -1,    -1,    -1,    -1,  2923,    -1,\n+      -1,   147,    -1,   149,   150,    -1,    -1,    -1,   231,  2934,\n+    2935,    -1,    -1,  2938,    -1,    -1,  2608,   163,    -1,    -1,\n+      -1,   167,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2964,\n+      -1,    -1,    -1,    -1,    -1,    -1,   192,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,  2646,    -1,  2648,    -1,    -1,    -1,\n+    2652,   284,   208,  2988,    24,    -1,    -1,    -1,    -1,  2661,\n+      -1,    -1,  2664,    -1,  2666,    -1,    -1,    -1,  2670,    -1,\n+      -1,  2673,  2674,    -1,    -1,  2677,  2678,    -1,   234,  3265,\n+      -1,    -1,    -1,  2685,    -1,    -1,     8,    -1,    -1,    11,\n+      -1,    -1,  2694,    15,    16,    17,    18,    19,    20,    21,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2709,    -1,    79,\n+      -1,    -1,    -1,    -1,    36,    -1,  3051,    -1,    40,    -1,\n+      -1,    -1,    -1,    -1,    46,    95,    -1,    -1,    -1,    -1,\n+      -1,    53,    -1,    -1,  3069,    -1,    -1,    -1,  3073,    -1,\n+      -1,    -1,  3077,    -1,    -1,  2747,    -1,   380,    -1,   305,\n+     306,   307,  3087,    -1,    -1,    -1,    78,   313,    -1,    -1,\n+     316,    -1,    -1,    -1,    -1,  3100,    -1,    -1,    -1,    -1,\n+      -1,    -1,   142,    -1,    -1,    -1,    -1,    -1,    -1,    26,\n+      -1,    -1,   152,  3118,    -1,    32,    -1,    -1,    -1,   345,\n+      -1,    -1,    -1,    40,   164,    -1,    -1,    -1,   354,   169,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,   368,    60,    -1,    -1,    -1,    -1,    -1,   375,\n+      -1,    -1,    -1,   379,    -1,    -1,    -1,   197,    -1,    -1,\n+    3165,    -1,    -1,   389,    -1,    -1,    -1,    -1,    -1,    -1,\n+    3175,    -1,    -1,    -1,    -1,   401,    -1,    -1,    -1,   405,\n+     172,   484,    -1,  3188,   487,   488,   489,   104,   491,   492,\n+     493,   494,   495,   496,    -1,    -1,   188,    -1,   424,    -1,\n+     240,   193,    -1,    -1,   244,    -1,    -1,  2879,  2880,    -1,\n+      -1,   437,    -1,  3218,   440,    -1,   133,   443,    -1,    -1,\n+      -1,    -1,   448,    -1,   216,   217,    -1,    -1,    -1,    -1,\n+      -1,    -1,  2904,  2905,    -1,    -1,   462,    -1,    -1,   231,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3077,  3078,\n-    3079,    -1,    -1,    -1,    -1,   380,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,  3095,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3107,    -1,\n+    2922,    -1,    -1,    -1,  2926,    -1,  2928,  2929,  2930,    -1,\n+     486,  2933,    -1,    -1,  2936,  2937,    -1,    -1,    -1,    -1,\n+     310,    -1,  2944,    -1,   500,   267,    -1,   503,   270,   196,\n+      -1,    -1,    -1,    -1,    -1,   325,    -1,    -1,    -1,    -1,\n+      -1,    -1,   284,    -1,    -1,   287,    -1,    -1,    -1,    -1,\n+    3305,  3306,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,  2985,    -1,    -1,    -1,    -1,   358,  2991,\n+      -1,   361,    -1,    -1,    -1,    -1,  3331,    -1,   245,    -1,\n+     370,    -1,  3004,   373,    -1,    -1,   253,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   265,    -1,\n+      -1,   391,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3031,\n+      -1,    -1,  3367,    -1,    -1,   405,    -1,    -1,    -1,   286,\n+      -1,    -1,   412,    -1,    -1,    -1,    -1,    -1,    -1,   296,\n+      -1,   421,    -1,    -1,    -1,  3057,    -1,   427,   380,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,   454,    -1,    -1,  3089,  3090,  3091,\n+      -1,    -1,    -1,    -1,   341,    -1,    -1,    -1,   345,    -1,\n+     347,    -1,    -1,    -1,    -1,  3107,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3119,    -1,    -1,\n+      -1,    -1,    -1,   370,    -1,    -1,    -1,    -1,   375,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,   389,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,  3151,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3168,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3178,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   484,\n-      -1,    -1,   487,   488,   489,    -1,   491,   492,   493,   494,\n-     495,   496,  3201,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,  3163,   484,    -1,    -1,   487,   488,   489,    -1,   491,\n+     492,   493,   494,   495,   496,    -1,    -1,    -1,  3180,   501,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3190,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   445,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3226,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,     3,     4,     5,     6,     7,\n-       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,\n-      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,  3268,\n-      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    47,\n-      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,\n-      -1,    59,    60,    61,    62,    63,    64,    65,    66,    67,\n-      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,\n-      -1,    79,    -1,    81,    82,    83,    84,    85,    86,    87,\n-      88,    89,    90,  3322,    92,    93,    94,    95,    96,    97,\n-      -1,    99,   100,   101,   102,   103,   104,   105,   106,   107,\n-     108,   109,   110,   111,   112,   113,   114,    -1,   116,   117,\n-     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,\n-      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,\n-     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,\n-     148,   149,   150,   151,   152,   153,   154,   155,   156,    -1,\n-     158,   159,   160,   161,    -1,   163,    -1,   165,   166,   167,\n-     168,   169,   170,   171,   172,   173,    -1,   175,    -1,   177,\n-     178,   179,    -1,   181,   182,   183,   184,   185,   186,   187,\n-     188,   189,   190,   191,   192,    -1,   194,   195,   196,   197,\n-     198,   199,   200,    -1,   202,   203,   204,   205,   206,   207,\n-     208,   209,   210,   211,    -1,   213,    -1,   215,   216,   217,\n-     218,   219,   220,   221,   222,   223,   224,   225,    -1,    -1,\n-     228,   229,   230,   231,    -1,   233,   234,   235,   236,   237,\n-     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,\n-     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,\n-     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,\n-     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,\n-     278,    -1,   280,   281,    -1,    -1,   284,   285,   286,    -1,\n-      -1,   289,   290,   291,   292,   293,   294,   295,   296,   297,\n-     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,\n-      -1,   309,   310,   311,   312,   313,   314,   315,   316,   317,\n-     318,    -1,   320,   321,   322,   323,   324,   325,    -1,   327,\n-     328,   329,   330,   331,   332,   333,   334,    -1,   336,   337,\n-     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,\n-     348,    -1,   350,   351,   352,   353,   354,   355,   356,   357,\n-     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,\n-     368,    -1,   370,   371,   372,   373,   374,   375,   376,   377,\n-     378,   379,   380,   381,   382,   383,   384,    -1,   386,   387,\n-     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,\n-     398,   399,   400,   401,    -1,   403,   404,   405,   406,   407,\n-     408,   409,   410,   411,   412,    -1,   414,   415,    -1,    -1,\n-     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,\n-     428,   429,   430,   431,    -1,    -1,   434,   435,   436,   437,\n-     438,   439,   440,   441,    -1,   443,   444,   445,   446,   447,\n-     448,   449,    -1,   451,   452,   453,   454,   455,   456,   457,\n-      -1,    -1,   460,    -1,   462,   463,   464,   465,   466,   467,\n-     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,\n-     478,   479,   480,   481,   482,   483,   484,    -1,   486,    -1,\n-      -1,    -1,    -1,   491,   492,   493,    -1,    -1,    -1,    -1,\n-     498,    -1,   500,   501,    -1,    -1,    -1,   505,   506,   507,\n-     508,     3,     4,     5,     6,     7,     8,     9,    10,    -1,\n+      -1,  3213,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,\n-      32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,\n-      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,\n-      52,    53,    54,    55,    56,    57,    -1,    59,    60,    61,\n-      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,\n-      -1,    73,    74,    75,    76,    77,    -1,    79,    -1,    81,\n-      82,    83,    84,    85,    86,    87,    88,    89,    90,    -1,\n-      92,    93,    94,    95,    96,    97,    -1,    99,   100,   101,\n-     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,\n-     112,   113,   114,    -1,   116,   117,   118,   119,   120,   121,\n-      -1,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,\n-     132,   133,   134,    -1,   136,   137,   138,    -1,   140,   141,\n-     142,    -1,   144,   145,   146,   147,   148,   149,   150,   151,\n-     152,   153,   154,   155,   156,    -1,   158,   159,   160,   161,\n-      -1,   163,    -1,   165,   166,   167,   168,   169,   170,   171,\n-     172,   173,    -1,   175,    -1,   177,   178,   179,    -1,   181,\n-     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,\n-     192,    -1,   194,   195,   196,   197,   198,   199,   200,    -1,\n-     202,   203,   204,   205,   206,   207,   208,   209,   210,   211,\n-      -1,   213,    -1,   215,   216,   217,   218,   219,   220,   221,\n-     222,   223,   224,   225,    -1,    -1,   228,   229,   230,   231,\n-      -1,   233,   234,   235,   236,   237,   238,   239,   240,   241,\n-     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,\n-     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,\n-     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,\n-     272,   273,   274,   275,   276,   277,   278,    -1,   280,   281,\n-      -1,    -1,   284,   285,   286,    -1,    -1,   289,   290,   291,\n-     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,\n-     302,   303,   304,   305,   306,   307,    -1,   309,   310,   311,\n-     312,   313,   314,   315,   316,   317,   318,    -1,   320,   321,\n-     322,   323,   324,   325,    -1,   327,   328,   329,   330,   331,\n-     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,\n-     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,\n-     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,\n-     362,   363,   364,   365,   366,   367,   368,    -1,   370,   371,\n-     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,\n-     382,   383,   384,    -1,   386,   387,   388,   389,   390,   391,\n-     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,\n-      -1,   403,   404,   405,   406,   407,   408,   409,   410,   411,\n-     412,    -1,   414,   415,    -1,    -1,   418,   419,   420,   421,\n-     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,\n-      -1,    -1,   434,   435,   436,   437,   438,   439,   440,   441,\n-      -1,   443,   444,   445,   446,   447,   448,   449,    -1,   451,\n-     452,   453,   454,   455,   456,   457,    -1,    -1,   460,    -1,\n-     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,\n-     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,\n-     482,   483,   484,    -1,   486,    -1,    -1,    -1,    -1,   491,\n-     492,   493,    -1,    -1,    -1,    -1,   498,    -1,   500,    -1,\n-      -1,    -1,    -1,   505,   506,   507,   508,     3,     4,     5,\n-       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,\n-      26,    27,    28,    29,    30,    31,    32,    33,    -1,    -1,\n-      -1,    37,    -1,    39,    -1,    -1,    42,    43,    44,    -1,\n-      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,\n-      56,    57,    -1,    59,    60,    61,    62,    63,    64,    65,\n-      66,    67,    68,    69,    70,    71,    -1,    73,    74,    75,\n-      76,    77,    -1,    79,    -1,    81,    82,    83,    84,    85,\n-      86,    87,    88,    89,    90,    -1,    92,    93,    94,    95,\n-      96,    97,    -1,    99,   100,   101,   102,   103,   104,   105,\n-     106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,\n-     116,   117,   118,   119,   120,   121,    -1,   123,   124,   125,\n-     126,   127,   128,    -1,   130,   131,   132,   133,   134,    -1,\n-     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,\n-     146,   147,   148,   149,   150,   151,   152,   153,   154,   155,\n-     156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,\n-     166,    -1,   168,   169,   170,   171,   172,   173,    -1,   175,\n-      -1,   177,   178,   179,    -1,   181,   182,   183,   184,   185,\n-     186,   187,   188,   189,   190,   191,   192,    -1,   194,   195,\n-     196,   197,   198,   199,   200,    -1,   202,   203,   204,   205,\n-     206,   207,   208,   209,   210,   211,    -1,   213,    -1,   215,\n-     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,\n-      -1,    -1,   228,   229,   230,   231,    -1,   233,   234,   235,\n-     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,\n-     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,\n-     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,\n-     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,\n-     276,   277,   278,    -1,   280,   281,    -1,    -1,   284,   285,\n-     286,    -1,    -1,   289,   290,   291,   292,   293,   294,   295,\n-     296,   297,   298,   299,   300,   301,   302,   303,   304,    -1,\n-      -1,    -1,    -1,   309,   310,   311,   312,   313,   314,   315,\n-     316,   317,   318,    -1,   320,   321,   322,   323,   324,   325,\n-      -1,   327,   328,   329,   330,   331,   332,   333,   334,    -1,\n-     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,\n-     346,   347,   348,    -1,   350,   351,   352,   353,   354,   355,\n-     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,\n-     366,   367,    -1,   369,   370,   371,   372,   373,   374,   375,\n-     376,   377,   378,   379,   380,   381,   382,   383,   384,    -1,\n-     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,\n-     396,   397,   398,   399,   400,   401,    -1,   403,   404,    -1,\n-     406,   407,   408,   409,   410,   411,   412,    -1,   414,   415,\n-      -1,    -1,   418,   419,   420,   421,   422,   423,   424,   425,\n-     426,   427,   428,   429,   430,   431,    -1,    -1,   434,   435,\n-     436,    -1,   438,   439,   440,   441,    -1,   443,   444,   445,\n-     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,\n-     456,   457,    -1,    -1,   460,    -1,    -1,   463,   464,   465,\n-     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,\n-     476,   477,   478,   479,   480,   481,   482,   483,   484,    -1,\n-      -1,    -1,    -1,    -1,    -1,   491,   492,   493,    -1,    -1,\n-      -1,    -1,   498,    -1,   500,   501,    -1,    -1,    -1,   505,\n-     506,   507,   508,     3,     4,     5,     6,     7,     8,     9,\n-      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,\n-      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,\n-      -1,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,\n-      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,\n-      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,\n-      70,    71,    -1,    73,    74,    75,    76,    77,    -1,    79,\n-      -1,    81,    82,    83,    84,    85,    86,    87,    88,    89,\n-      90,    -1,    92,    93,    94,    95,    96,    97,    -1,    99,\n-     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,\n-     110,   111,   112,   113,   114,    -1,   116,   117,   118,   119,\n-     120,   121,    -1,   123,   124,   125,   126,   127,    -1,    -1,\n-     130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,\n-     140,   141,   142,    -1,   144,   145,   146,   147,   148,   149,\n-     150,   151,   152,   153,   154,   155,   156,    -1,   158,   159,\n-     160,   161,    -1,   163,    -1,   165,   166,   167,   168,   169,\n-     170,   171,   172,   173,    -1,   175,    -1,   177,   178,   179,\n-      -1,   181,   182,   183,   184,   185,   186,   187,   188,   189,\n-     190,   191,   192,    -1,   194,   195,   196,   197,   198,   199,\n-     200,    -1,   202,   203,   204,   205,   206,   207,   208,   209,\n-     210,   211,    -1,   213,    -1,   215,   216,   217,   218,   219,\n-     220,   221,   222,   223,   224,   225,    -1,   227,   228,   229,\n-     230,   231,    -1,   233,   234,   235,   236,   237,   238,   239,\n-     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,\n-     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,\n-     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,\n-     270,   271,   272,   273,   274,   275,   276,   277,   278,    -1,\n-     280,   281,    -1,    -1,   284,   285,   286,    -1,    -1,   289,\n-     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,\n-     300,   301,   302,   303,   304,    -1,    -1,    -1,    -1,   309,\n-     310,   311,   312,   313,   314,   315,   316,   317,   318,    -1,\n-     320,   321,   322,   323,   324,   325,    -1,   327,   328,   329,\n-     330,   331,   332,   333,   334,    -1,   336,   337,   338,   339,\n-     340,   341,   342,   343,   344,   345,   346,   347,   348,    -1,\n-     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,\n-     360,   361,   362,   363,   364,   365,   366,   367,    -1,    -1,\n-     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,\n-     380,   381,   382,   383,   384,    -1,   386,   387,   388,   389,\n-     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,\n-     400,   401,    -1,   403,   404,    -1,   406,   407,   408,   409,\n-     410,   411,   412,    -1,   414,   415,    -1,   417,   418,   419,\n-     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,\n-     430,   431,    -1,    -1,   434,   435,   436,    -1,   438,   439,\n-     440,   441,    -1,   443,   444,   445,   446,   447,   448,   449,\n-      -1,   451,   452,   453,   454,   455,   456,   457,    -1,    -1,\n-     460,    -1,    -1,   463,   464,   465,   466,   467,   468,   469,\n-     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,\n-     480,   481,   482,   483,   484,    -1,    -1,    -1,    -1,    -1,\n-      -1,   491,   492,   493,    -1,    -1,    -1,    -1,   498,    -1,\n-     500,    -1,    -1,    -1,    -1,   505,   506,   507,   508,     3,\n-       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,\n-      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,\n-      -1,    -1,    -1,    37,    -1,    39,    -1,    -1,    42,    43,\n-      44,    -1,    46,    47,    48,    49,    50,    51,    52,    53,\n-      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,\n-      64,    65,    66,    67,    68,    69,    70,    71,    -1,    73,\n-      74,    75,    76,    77,    -1,    79,    -1,    81,    82,    83,\n-      84,    85,    86,    87,    88,    89,    90,    -1,    92,    93,\n-      94,    95,    96,    97,    -1,    99,   100,   101,   102,   103,\n-     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,\n-     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,\n-     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,\n-     134,    -1,   136,   137,   138,    -1,   140,   141,   142,    -1,\n-     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,\n-     154,   155,   156,    -1,   158,   159,   160,   161,    -1,   163,\n-      -1,   165,   166,    -1,   168,   169,   170,   171,   172,   173,\n-      -1,   175,    -1,   177,   178,   179,    -1,   181,   182,   183,\n-     184,   185,   186,   187,   188,   189,   190,   191,   192,    -1,\n-     194,   195,   196,   197,   198,   199,   200,    -1,   202,   203,\n-     204,   205,   206,   207,   208,   209,   210,   211,    -1,   213,\n-      -1,   215,   216,   217,   218,   219,   220,   221,   222,   223,\n-     224,   225,    -1,    -1,   228,   229,   230,   231,    -1,   233,\n-     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,\n-     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,\n-     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,\n-     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,\n-     274,   275,   276,   277,   278,    -1,   280,   281,    -1,    -1,\n-     284,   285,   286,    -1,    -1,   289,   290,   291,   292,   293,\n-     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,\n-     304,    -1,    -1,    -1,    -1,   309,   310,   311,   312,   313,\n-     314,   315,   316,   317,   318,    -1,   320,   321,   322,   323,\n-     324,   325,    -1,   327,   328,   329,   330,   331,   332,   333,\n-     334,    -1,   336,   337,   338,   339,   340,   341,   342,   343,\n-     344,   345,   346,   347,   348,    -1,   350,   351,   352,   353,\n-     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,\n-     364,   365,   366,   367,    -1,   369,   370,   371,   372,   373,\n-     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,\n-     384,    -1,   386,   387,   388,   389,   390,   391,   392,   393,\n-     394,   395,   396,   397,   398,   399,   400,   401,    -1,   403,\n-     404,    -1,   406,   407,   408,   409,   410,   411,   412,    -1,\n-     414,   415,    -1,    -1,   418,   419,   420,   421,   422,   423,\n-     424,   425,   426,   427,   428,   429,   430,   431,    -1,    -1,\n-     434,   435,   436,    -1,   438,   439,   440,   441,    -1,   443,\n-     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,\n-     454,   455,   456,   457,    -1,    -1,   460,    -1,    -1,   463,\n-     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,\n-     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,\n-     484,    -1,    -1,    -1,    -1,    -1,    -1,   491,   492,   493,\n-      -1,    -1,    -1,    -1,   498,    -1,   500,    -1,    -1,    -1,\n-      -1,   505,   506,   507,   508,     3,     4,     5,     6,     7,\n-       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,\n-      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    37,\n-      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    47,\n-      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,\n-      -1,    59,    60,    61,    62,    63,    64,    65,    66,    67,\n-      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,\n-      -1,    79,    -1,    81,    82,    83,    84,    85,    86,    87,\n-      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,\n-      -1,    99,   100,   101,   102,   103,   104,   105,   106,   107,\n-     108,   109,   110,   111,   112,   113,   114,    -1,   116,   117,\n-     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,\n-      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,\n-     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,\n-     148,   149,   150,   151,   152,   153,   154,   155,   156,    -1,\n-     158,   159,   160,   161,    -1,   163,    -1,   165,   166,    -1,\n-     168,   169,   170,   171,   172,   173,    -1,   175,    -1,   177,\n-     178,   179,    -1,   181,   182,   183,   184,   185,   186,   187,\n-     188,   189,   190,   191,   192,    -1,   194,   195,   196,   197,\n-     198,   199,   200,    -1,   202,   203,   204,   205,   206,   207,\n-     208,   209,   210,   211,    -1,   213,    -1,   215,   216,   217,\n-     218,   219,   220,   221,   222,   223,   224,   225,    -1,    -1,\n-     228,   229,   230,   231,    -1,   233,   234,   235,   236,   237,\n-     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,\n-     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,\n-     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,\n-     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,\n-     278,    -1,   280,   281,    -1,    -1,   284,   285,   286,    -1,\n-      -1,   289,   290,   291,   292,   293,   294,   295,   296,   297,\n-     298,   299,   300,   301,   302,   303,   304,    -1,    -1,    -1,\n-      -1,   309,   310,   311,   312,   313,   314,   315,   316,   317,\n-     318,    -1,   320,   321,   322,   323,   324,   325,    -1,   327,\n-     328,   329,   330,   331,   332,   333,   334,    -1,   336,   337,\n-     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,\n-     348,    -1,   350,   351,   352,   353,   354,   355,   356,   357,\n-     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,\n-      -1,   369,   370,   371,   372,   373,   374,   375,   376,   377,\n-     378,   379,   380,   381,   382,   383,   384,    -1,   386,   387,\n-     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,\n-     398,   399,   400,   401,    -1,   403,   404,    -1,   406,   407,\n-     408,   409,   410,   411,   412,    -1,   414,   415,    -1,    -1,\n-     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,\n-     428,   429,   430,   431,    -1,    -1,   434,   435,   436,    -1,\n-     438,   439,   440,   441,    -1,   443,   444,   445,   446,   447,\n-     448,   449,    -1,   451,   452,   453,   454,   455,   456,   457,\n-      -1,    -1,   460,    -1,    -1,   463,   464,   465,   466,   467,\n-     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,\n-     478,   479,   480,   481,   482,   483,   484,    -1,    -1,    -1,\n-      -1,    -1,    -1,   491,   492,   493,    -1,    -1,    -1,    -1,\n-     498,    -1,   500,   501,    -1,    -1,    -1,   505,   506,   507,\n-     508,     3,     4,     5,     6,     7,     8,     9,    10,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,\n-      32,    33,    -1,    -1,    -1,    -1,    38,    39,    -1,    -1,\n-      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,\n-      52,    53,    54,    55,    56,    57,    -1,    59,    60,    61,\n-      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,\n-      -1,    73,    74,    75,    76,    77,    -1,    79,    -1,    81,\n-      82,    83,    84,    85,    86,    87,    88,    89,    90,    -1,\n-      92,    93,    94,    95,    96,    97,    -1,    99,   100,   101,\n-     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,\n-     112,   113,   114,    -1,   116,   117,   118,   119,   120,   121,\n-      -1,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,\n-     132,   133,   134,    -1,   136,   137,   138,    -1,   140,   141,\n-     142,    -1,   144,   145,   146,   147,   148,   149,   150,   151,\n-     152,   153,   154,   155,   156,    -1,   158,   159,   160,   161,\n-      -1,   163,    -1,   165,   166,    -1,   168,   169,   170,   171,\n-     172,   173,    -1,   175,    -1,   177,   178,   179,    -1,   181,\n-     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,\n-     192,    -1,   194,   195,   196,   197,   198,   199,   200,    -1,\n-     202,   203,   204,   205,   206,   207,   208,   209,   210,   211,\n-      -1,   213,    -1,   215,   216,   217,   218,   219,   220,   221,\n-     222,   223,   224,   225,    -1,    -1,   228,   229,   230,   231,\n-      -1,   233,   234,   235,   236,   237,   238,   239,   240,   241,\n-     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,\n-     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,\n-     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,\n-     272,   273,   274,   275,   276,   277,   278,    -1,   280,   281,\n-      -1,    -1,   284,   285,   286,    -1,    -1,   289,   290,   291,\n-     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,\n-     302,   303,   304,    -1,    -1,    -1,    -1,   309,   310,   311,\n-     312,   313,   314,   315,   316,   317,   318,    -1,   320,   321,\n-     322,   323,   324,   325,    -1,   327,   328,   329,   330,   331,\n-     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,\n-     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,\n-     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,\n-     362,   363,   364,   365,   366,   367,    -1,    -1,   370,   371,\n-     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,\n-     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,\n-     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,\n-      -1,   403,   404,    -1,   406,   407,   408,   409,   410,   411,\n-     412,    -1,   414,   415,    -1,    -1,   418,   419,   420,   421,\n-     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,\n-      -1,    -1,   434,   435,   436,    -1,   438,   439,   440,   441,\n-      -1,   443,   444,   445,   446,   447,   448,   449,    -1,   451,\n-     452,   453,   454,   455,   456,   457,    -1,    -1,   460,    -1,\n-      -1,   463,   464,   465,   466,   467,   468,   469,   470,   471,\n-     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,\n-     482,   483,   484,    -1,    -1,    -1,    -1,    -1,    -1,   491,\n-     492,   493,    -1,    -1,    -1,    -1,   498,    -1,   500,    -1,\n-      -1,    -1,    -1,   505,   506,   507,   508,     3,     4,     5,\n-       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,\n-      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,\n-      -1,    37,    -1,    39,    -1,    -1,    42,    43,    44,    -1,\n-      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,\n-      56,    57,    -1,    59,    60,    61,    62,    63,    64,    65,\n-      66,    67,    68,    69,    70,    71,    -1,    73,    74,    75,\n-      76,    77,    -1,    79,    -1,    81,    82,    83,    84,    85,\n-      86,    87,    88,    89,    90,    -1,    92,    93,    94,    95,\n-      96,    97,    -1,    99,   100,   101,   102,   103,   104,   105,\n-     106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,\n-     116,   117,   118,   119,   120,   121,    -1,   123,   124,   125,\n-     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,\n-     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,\n-     146,   147,   148,   149,   150,   151,   152,   153,   154,   155,\n-     156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,\n-     166,    -1,   168,   169,   170,   171,   172,   173,    -1,   175,\n-      -1,   177,   178,   179,    -1,   181,   182,   183,   184,   185,\n-     186,   187,   188,   189,   190,   191,   192,    -1,   194,   195,\n-     196,   197,   198,   199,   200,    -1,   202,   203,   204,   205,\n-     206,   207,   208,   209,   210,   211,    -1,   213,    -1,   215,\n-     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,\n-      -1,    -1,   228,   229,   230,   231,    -1,   233,   234,   235,\n-     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,\n-     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,\n-     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,\n-     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,\n-     276,   277,   278,    -1,   280,   281,    -1,    -1,   284,   285,\n-     286,    -1,    -1,   289,   290,   291,   292,   293,   294,   295,\n-     296,   297,   298,   299,   300,   301,   302,   303,   304,    -1,\n-      -1,    -1,    -1,   309,   310,   311,   312,   313,   314,   315,\n-     316,   317,   318,    -1,   320,   321,   322,   323,   324,   325,\n-      -1,   327,   328,   329,   330,   331,   332,   333,   334,    -1,\n-     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,\n-     346,   347,   348,    -1,   350,   351,   352,   353,   354,   355,\n-     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,\n-     366,   367,    -1,   369,   370,   371,   372,   373,   374,   375,\n-     376,   377,   378,   379,   380,   381,   382,   383,   384,    -1,\n-     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,\n-     396,   397,   398,   399,   400,   401,    -1,   403,   404,    -1,\n-     406,   407,   408,   409,   410,   411,   412,    -1,   414,   415,\n-      -1,    -1,   418,   419,   420,   421,   422,   423,   424,   425,\n-     426,   427,   428,   429,   430,   431,    -1,    -1,   434,   435,\n-     436,    -1,   438,   439,   440,   441,    -1,   443,   444,   445,\n-     446,   447,   448,   449,    -1,   451,   452,   453,   454,   455,\n-     456,   457,    -1,    -1,   460,    -1,    -1,   463,   464,   465,\n-     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,\n-     476,   477,   478,   479,   480,   481,   482,   483,   484,    -1,\n-      -1,    -1,    -1,    -1,    -1,   491,   492,   493,    -1,    -1,\n-      -1,    -1,   498,    -1,   500,   501,    -1,    -1,    -1,   505,\n-     506,   507,   508,     3,     4,     5,     6,     7,     8,     9,\n-      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,\n-      -1,    31,    32,    33,    -1,    -1,    -1,    37,    -1,    39,\n-      -1,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,\n-      50,    51,    52,    53,    54,    55,    56,    57,    -1,    59,\n-      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,\n-      70,    71,    -1,    73,    74,    75,    76,    77,    -1,    79,\n-      -1,    81,    82,    83,    84,    85,    86,    87,    88,    89,\n-      90,    -1,    92,    93,    94,    95,    96,    97,    -1,    99,\n-     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,\n-     110,   111,   112,   113,   114,    -1,   116,   117,   118,   119,\n-     120,   121,    -1,   123,   124,   125,   126,   127,    -1,    -1,\n-     130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,\n-     140,   141,   142,    -1,   144,   145,   146,   147,   148,   149,\n-     150,   151,   152,   153,   154,   155,   156,    -1,   158,   159,\n-     160,   161,    -1,   163,    -1,   165,   166,    -1,   168,   169,\n-     170,   171,   172,   173,    -1,   175,    -1,   177,   178,   179,\n-      -1,   181,   182,   183,   184,   185,   186,   187,   188,   189,\n-     190,   191,   192,    -1,   194,   195,   196,   197,   198,   199,\n-     200,    -1,   202,   203,   204,   205,   206,   207,   208,   209,\n-     210,   211,    -1,   213,    -1,   215,   216,   217,   218,   219,\n-     220,   221,   222,   223,   224,   225,    -1,    -1,   228,   229,\n-     230,   231,    -1,   233,   234,   235,   236,   237,   238,   239,\n-     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,\n-     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,\n-     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,\n-     270,   271,   272,   273,   274,   275,   276,   277,   278,    -1,\n-     280,   281,    -1,    -1,   284,   285,   286,    -1,    -1,   289,\n-     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,\n-     300,   301,   302,   303,   304,    -1,    -1,    -1,    -1,   309,\n-     310,   311,   312,   313,   314,   315,   316,   317,   318,    -1,\n-     320,   321,   322,   323,   324,   325,    -1,   327,   328,   329,\n-     330,   331,   332,   333,   334,    -1,   336,   337,   338,   339,\n-     340,   341,   342,   343,   344,   345,   346,   347,   348,    -1,\n-     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,\n-     360,   361,   362,   363,   364,   365,   366,   367,    -1,   369,\n-     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,\n-     380,   381,   382,   383,   384,    -1,   386,   387,   388,   389,\n-     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,\n-     400,   401,    -1,   403,   404,    -1,   406,   407,   408,   409,\n-     410,   411,   412,    -1,   414,   415,    -1,    -1,   418,   419,\n-     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,\n-     430,   431,    -1,    -1,   434,   435,   436,    -1,   438,   439,\n-     440,   441,    -1,   443,   444,   445,   446,   447,   448,   449,\n-      -1,   451,   452,   453,   454,   455,   456,   457,    -1,    -1,\n-     460,    -1,    -1,   463,   464,   465,   466,   467,   468,   469,\n-     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,\n-     480,   481,   482,   483,   484,    -1,    -1,    -1,    -1,    -1,\n-      -1,   491,   492,   493,    -1,    -1,    -1,    -1,   498,    -1,\n-     500,    -1,    -1,    -1,    -1,   505,   506,   507,   508,     3,\n-       4,     5,     6,     7,    -1,     9,    10,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,\n-      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,\n-      -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,\n-      44,    -1,    46,    47,    48,    49,    50,    51,    52,    53,\n-      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,\n-      64,    65,    66,    67,    68,    69,    70,    71,    -1,    73,\n-      74,    75,    76,    77,    -1,    79,    -1,    81,    82,    83,\n-      84,    85,    86,    87,    88,    89,    90,    -1,    92,    93,\n-      94,    95,    96,    97,    -1,    99,   100,   101,   102,   103,\n-     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,\n-     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,\n-     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,\n-     134,    -1,   136,   137,   138,    -1,   140,   141,   142,    -1,\n-     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,\n-     154,   155,   156,    -1,   158,   159,   160,   161,    -1,   163,\n-      -1,   165,   166,   167,   168,   169,   170,   171,   172,   173,\n-      -1,   175,    -1,   177,   178,   179,    -1,   181,   182,   183,\n-     184,   185,   186,   187,   188,   189,   190,   191,   192,    -1,\n-     194,   195,   196,   197,   198,   199,   200,    -1,   202,   203,\n-     204,   205,   206,   207,   208,   209,   210,   211,    -1,   213,\n-      -1,   215,   216,   217,   218,   219,   220,   221,   222,   223,\n-     224,   225,    -1,    -1,   228,   229,   230,   231,    -1,   233,\n-     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,\n-     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,\n-     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,\n-     264,   265,   266,    -1,   268,   269,   270,   271,   272,   273,\n-     274,   275,   276,   277,   278,    -1,   280,   281,    -1,    -1,\n-     284,   285,   286,    -1,    -1,   289,   290,   291,   292,   293,\n-     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,\n-     304,   305,   306,   307,    -1,   309,   310,   311,   312,   313,\n-     314,   315,   316,   317,   318,    -1,   320,   321,   322,   323,\n-     324,   325,    -1,   327,   328,   329,   330,   331,   332,   333,\n-     334,    -1,   336,   337,   338,   339,   340,   341,   342,   343,\n-     344,   345,   346,   347,   348,    -1,   350,   351,   352,   353,\n-     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,\n-     364,   365,   366,   367,   368,    -1,   370,   371,   372,   373,\n-     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,\n-     384,    -1,   386,   387,   388,   389,   390,   391,   392,   393,\n-     394,   395,   396,   397,   398,   399,   400,   401,    -1,   403,\n-     404,   405,   406,   407,   408,   409,   410,   411,   412,    -1,\n-     414,   415,    -1,    -1,   418,   419,   420,   421,   422,   423,\n-     424,   425,   426,   427,   428,   429,   430,   431,    -1,    -1,\n-     434,   435,   436,   437,   438,   439,   440,   441,    -1,   443,\n-     444,   445,   446,   447,   448,   449,    -1,   451,   452,   453,\n-     454,   455,   456,   457,    -1,    -1,   460,    -1,   462,   463,\n-     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,\n-     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,\n-      -1,    -1,   486,    -1,    -1,    -1,     3,     4,     5,     6,\n-       7,     8,     9,    10,   498,    -1,   500,    -1,    -1,    -1,\n-      -1,   505,   506,   507,   508,    22,    23,    24,    25,    26,\n-      27,    28,    29,    30,    31,    32,    33,    -1,    -1,    -1,\n-      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,\n-      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,\n-      57,    -1,    59,    60,    61,    62,    63,    64,    65,    66,\n-      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,\n-      77,    -1,    79,    -1,    81,    82,    83,    84,    85,    86,\n-      87,    88,    89,    90,    -1,    92,    93,    94,    95,    96,\n-      97,    -1,    99,   100,   101,   102,   103,   104,   105,   106,\n-     107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,\n-     117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,\n-     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,   136,\n-     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,\n-     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,\n-      -1,   158,   159,   160,   161,    -1,   163,    -1,   165,   166,\n-      -1,   168,   169,   170,   171,   172,   173,    -1,   175,    -1,\n-     177,   178,   179,    -1,   181,   182,   183,   184,   185,   186,\n-     187,   188,   189,   190,   191,   192,    -1,   194,   195,   196,\n-     197,   198,   199,   200,    -1,   202,   203,   204,   205,   206,\n-     207,   208,   209,   210,   211,    -1,   213,    -1,   215,   216,\n-     217,   218,   219,   220,   221,   222,   223,   224,   225,    -1,\n-      -1,   228,   229,   230,   231,    -1,   233,   234,   235,   236,\n-     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,\n-     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,\n-     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,\n-     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,\n-     277,   278,    -1,   280,   281,    -1,    -1,   284,   285,   286,\n-      -1,    -1,   289,   290,   291,   292,   293,   294,   295,   296,\n-     297,   298,   299,   300,   301,   302,   303,   304,    -1,    -1,\n-      -1,    -1,   309,   310,   311,   312,   313,   314,   315,   316,\n-     317,   318,    -1,   320,   321,   322,   323,   324,   325,    -1,\n-     327,   328,   329,   330,   331,   332,   333,   334,    -1,   336,\n-     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,\n-     347,   348,    -1,   350,   351,   352,   353,   354,   355,   356,\n-     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,\n-     367,    -1,    -1,   370,   371,   372,   373,   374,   375,   376,\n-     377,   378,   379,   380,   381,   382,   383,   384,    -1,   386,\n-     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,\n-     397,   398,   399,   400,   401,    -1,   403,   404,    -1,   406,\n-     407,   408,   409,   410,   411,   412,    -1,   414,   415,    -1,\n-      -1,   418,   419,   420,   421,   422,   423,   424,   425,   426,\n-     427,   428,   429,   430,   431,    -1,    -1,   434,   435,   436,\n-      -1,   438,   439,   440,   441,    -1,   443,   444,   445,   446,\n-     447,   448,   449,    -1,   451,   452,   453,   454,   455,   456,\n-     457,    -1,    -1,   460,    -1,    -1,   463,   464,   465,   466,\n-     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,\n-     477,   478,   479,   480,   481,   482,   483,   484,    -1,    -1,\n-      -1,    -1,    -1,    -1,   491,   492,   493,    -1,    -1,    -1,\n-      -1,   498,    -1,   500,    -1,    -1,    -1,    -1,   505,   506,\n-     507,   508,     3,     4,     5,     6,     7,     8,     9,    10,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    22,    23,    24,    25,    26,    27,    28,    29,    30,\n-      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,\n-      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,\n-      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,\n-      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,\n-      71,    -1,    73,    74,    75,    76,    77,    -1,    79,    -1,\n-      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,\n-      -1,    92,    93,    94,    95,    96,    97,    -1,    99,   100,\n-     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,\n-     111,   112,   113,   114,    -1,   116,   117,   118,   119,   120,\n-     121,    -1,   123,   124,   125,   126,   127,    -1,    -1,   130,\n-     131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,\n-     141,   142,    -1,   144,   145,   146,   147,   148,   149,   150,\n-     151,   152,   153,   154,   155,   156,    -1,   158,   159,   160,\n-     161,    -1,   163,    -1,   165,   166,    -1,   168,   169,   170,\n-     171,   172,   173,    -1,   175,    -1,   177,   178,   179,    -1,\n-     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,\n-     191,   192,    -1,   194,   195,   196,   197,   198,   199,   200,\n-      -1,   202,   203,   204,   205,   206,   207,   208,   209,   210,\n-     211,    -1,   213,    -1,   215,   216,   217,   218,   219,   220,\n-     221,   222,   223,   224,   225,    -1,    -1,   228,   229,   230,\n-     231,    -1,   233,   234,   235,   236,   237,   238,   239,   240,\n-     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,\n-     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,\n-     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,\n-     271,   272,   273,   274,   275,   276,   277,   278,    -1,   280,\n-     281,    -1,    -1,   284,   285,   286,    -1,    -1,   289,   290,\n-     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,\n-     301,   302,   303,   304,    -1,    -1,    -1,    -1,   309,   310,\n-     311,   312,   313,   314,   315,   316,   317,   318,    -1,   320,\n-     321,   322,   323,   324,   325,    -1,   327,   328,   329,   330,\n-     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,\n-     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,\n-     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,\n-     361,   362,   363,   364,   365,   366,   367,    -1,    -1,   370,\n-     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,\n-     381,   382,   383,   384,    -1,   386,   387,   388,   389,   390,\n-     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,\n-     401,    -1,   403,   404,    -1,   406,   407,   408,   409,   410,\n-     411,   412,    -1,   414,   415,    -1,    -1,   418,   419,   420,\n-     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,\n-     431,    -1,    -1,   434,   435,   436,    -1,   438,   439,   440,\n-     441,    -1,   443,   444,   445,   446,   447,   448,   449,    -1,\n-     451,   452,   453,   454,   455,   456,   457,    -1,    -1,   460,\n-      -1,    -1,   463,   464,   465,   466,   467,   468,   469,   470,\n-     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,\n-     481,   482,   483,   484,    -1,    -1,    -1,    -1,    -1,    -1,\n-     491,   492,   493,    -1,    -1,    -1,    -1,   498,    -1,   500,\n-      -1,    -1,    -1,    -1,   505,   506,   507,   508,     3,     4,\n-       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,\n-      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,\n-      -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,\n-      -1,    46,    47,    48,    49,    50,    51,    52,    53,    54,\n-      55,    56,    57,    -1,    59,    60,    61,    62,    63,    64,\n-      65,    66,    67,    68,    69,    70,    71,    -1,    73,    74,\n-      75,    76,    77,    -1,    79,    -1,    81,    82,    83,    84,\n-      85,    86,    87,    88,    89,    90,    -1,    92,    93,    94,\n-      95,    96,    97,    -1,    99,   100,   101,   102,   103,   104,\n-     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,\n-      -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,\n-     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,\n-      -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,\n-     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,\n-     155,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,\n-     165,   166,   167,   168,   169,   170,   171,   172,   173,    -1,\n-     175,    -1,   177,   178,   179,    -1,   181,   182,   183,   184,\n-     185,   186,   187,   188,   189,   190,   191,   192,    -1,   194,\n-     195,   196,   197,   198,   199,   200,    -1,   202,   203,   204,\n-     205,   206,   207,   208,   209,   210,   211,    -1,   213,    -1,\n-     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,\n-     225,    -1,    -1,   228,   229,   230,   231,    -1,   233,   234,\n-     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,\n-     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,\n-     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,\n-     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,\n-     275,   276,   277,   278,    -1,   280,   281,    -1,    -1,   284,\n-     285,   286,    -1,    -1,   289,   290,   291,   292,   293,   294,\n-     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,\n-      -1,    -1,    -1,    -1,   309,   310,   311,   312,   313,   314,\n-     315,   316,   317,   318,    -1,   320,   321,   322,   323,   324,\n-     325,    -1,   327,   328,   329,   330,   331,   332,   333,   334,\n-      -1,   336,   337,   338,   339,   340,   341,   342,   343,   344,\n-     345,   346,   347,   348,    -1,   350,   351,   352,   353,   354,\n-     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,\n-     365,   366,   367,    -1,    -1,   370,   371,   372,   373,   374,\n-     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,\n-      -1,   386,   387,   388,   389,   390,   391,   392,   393,   394,\n-     395,   396,   397,   398,   399,   400,   401,    -1,   403,   404,\n-      -1,   406,   407,   408,   409,   410,   411,   412,    -1,   414,\n-     415,    -1,    -1,   418,   419,   420,   421,   422,   423,   424,\n-     425,   426,   427,   428,   429,   430,   431,    -1,    -1,   434,\n-     435,   436,    -1,   438,   439,   440,   441,    -1,   443,   444,\n-     445,   446,   447,   448,   449,    -1,   451,   452,   453,   454,\n-     455,   456,   457,    -1,    -1,   460,    -1,    -1,   463,   464,\n-     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,\n-     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,\n-      -1,    -1,    -1,    -1,    -1,    -1,   491,   492,   493,    -1,\n-      -1,    -1,    -1,   498,    -1,   500,    -1,    -1,    -1,    -1,\n-     505,   506,   507,   508,     3,     4,     5,     6,     7,     8,\n-       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,\n-      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,\n-      39,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,\n-      49,    50,    51,    52,    53,    54,    55,    56,    57,    -1,\n-      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,\n-      69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,\n-      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,\n-      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,\n-      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,\n-     109,   110,   111,   112,   113,   114,    -1,   116,   117,   118,\n-     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,\n-      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,\n-      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,\n-     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,\n-     159,   160,   161,    -1,   163,    -1,   165,   166,    -1,   168,\n-     169,   170,   171,   172,   173,    -1,   175,    -1,   177,   178,\n-     179,    -1,   181,   182,   183,   184,   185,   186,   187,   188,\n-     189,   190,   191,   192,    -1,   194,   195,   196,   197,   198,\n-     199,   200,    -1,   202,   203,   204,   205,   206,   207,   208,\n-     209,   210,   211,    -1,   213,    -1,   215,   216,   217,   218,\n-     219,   220,   221,   222,   223,   224,   225,    -1,    -1,   228,\n-     229,   230,   231,    -1,   233,   234,   235,   236,   237,   238,\n-     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,\n-     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,\n-     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,\n-     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,\n-      -1,   280,   281,    -1,    -1,   284,   285,   286,    -1,    -1,\n-     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,\n-     299,   300,   301,   302,   303,   304,    -1,    -1,    -1,    -1,\n-     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,\n-      -1,   320,   321,   322,   323,   324,   325,    -1,   327,   328,\n-     329,   330,   331,   332,   333,   334,    -1,   336,   337,   338,\n-     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,\n-      -1,   350,   351,   352,   353,   354,   355,   356,   357,   358,\n-     359,   360,   361,   362,   363,   364,   365,   366,   367,    -1,\n-      -1,   370,   371,   372,   373,   374,   375,   376,   377,   378,\n-     379,   380,   381,   382,   383,   384,    -1,   386,   387,   388,\n-     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,\n-     399,   400,   401,    -1,   403,   404,    -1,   406,   407,   408,\n-     409,   410,   411,   412,    -1,   414,   415,    -1,    -1,   418,\n-     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,\n-     429,   430,   431,    -1,    -1,   434,   435,   436,    -1,   438,\n-     439,   440,   441,    -1,   443,   444,   445,   446,   447,   448,\n-     449,    -1,   451,   452,   453,   454,   455,   456,   457,    -1,\n-      -1,   460,    -1,    -1,   463,   464,   465,   466,   467,   468,\n-     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,\n-     479,   480,   481,   482,   483,   484,    -1,    -1,    -1,    -1,\n-      -1,    -1,   491,   492,   493,    -1,    -1,    -1,    -1,   498,\n-      -1,   500,   501,    -1,    -1,    -1,   505,   506,   507,   508,\n-       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,\n-      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,\n-      33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,\n-      43,    44,    -1,    46,    47,    48,    49,    50,    51,    52,\n-      53,    54,    55,    56,    57,    -1,    59,    60,    61,    62,\n-      63,    64,    65,    66,    67,    68,    69,    70,    71,    -1,\n-      73,    74,    75,    76,    77,    -1,    79,    -1,    81,    82,\n-      83,    84,    85,    86,    87,    88,    89,    90,    -1,    92,\n-      93,    94,    95,    96,    97,    -1,    99,   100,   101,   102,\n-     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,\n-     113,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,\n-     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,\n-     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,\n-      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,\n-     153,   154,   155,   156,    -1,   158,   159,   160,   161,    -1,\n-     163,    -1,   165,   166,    -1,   168,   169,   170,   171,   172,\n-     173,    -1,   175,    -1,   177,   178,   179,    -1,   181,   182,\n-     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,\n-      -1,   194,   195,   196,   197,   198,   199,   200,    -1,   202,\n-     203,   204,   205,   206,   207,   208,   209,   210,   211,    -1,\n-     213,    -1,   215,   216,   217,   218,   219,   220,   221,   222,\n-     223,   224,   225,    -1,    -1,   228,   229,   230,   231,    -1,\n-     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,\n-     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,\n-     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,\n-     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,\n-     273,   274,   275,   276,   277,   278,    -1,   280,   281,    -1,\n-      -1,   284,   285,   286,    -1,    -1,   289,   290,   291,   292,\n-     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,\n-     303,   304,    -1,    -1,    -1,    -1,   309,   310,   311,   312,\n-     313,   314,   315,   316,   317,   318,    -1,   320,   321,   322,\n-     323,   324,   325,    -1,   327,   328,   329,   330,   331,   332,\n-     333,   334,    -1,   336,   337,   338,   339,   340,   341,   342,\n-     343,   344,   345,   346,   347,   348,    -1,   350,   351,   352,\n-     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,\n-     363,   364,   365,   366,   367,    -1,    -1,   370,   371,   372,\n-     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,\n-     383,   384,    -1,   386,   387,   388,   389,   390,   391,   392,\n-     393,   394,   395,   396,   397,   398,   399,   400,   401,    -1,\n-     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,\n-      -1,   414,   415,    -1,    -1,   418,   419,   420,   421,   422,\n-     423,   424,   425,   426,   427,   428,   429,   430,   431,    -1,\n-      -1,   434,   435,   436,    -1,   438,   439,   440,   441,    -1,\n-     443,   444,   445,   446,   447,   448,   449,    -1,   451,   452,\n-     453,   454,   455,   456,   457,    -1,    -1,   460,    -1,    -1,\n-     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,\n-     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,\n-     483,   484,    -1,    -1,    -1,    -1,    -1,    -1,   491,   492,\n-     493,    -1,    -1,    -1,    -1,   498,    -1,   500,    -1,    -1,\n-      -1,    -1,   505,   506,   507,   508,     3,     4,     5,     6,\n-       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,\n-      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,\n-      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,\n-      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,\n-      57,    -1,    59,    60,    61,    62,    63,    64,    65,    66,\n-      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,\n-      77,    -1,    79,    -1,    81,    82,    83,    84,    85,    86,\n-      87,    88,    89,    90,    -1,    92,    93,    94,    95,    96,\n-      97,    -1,    99,   100,   101,   102,   103,   104,   105,   106,\n-     107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,\n-     117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,\n-     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,   136,\n-     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,\n-     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,\n-      -1,   158,   159,   160,   161,    -1,   163,    -1,   165,   166,\n-      -1,   168,   169,   170,   171,   172,   173,    -1,   175,    -1,\n-     177,   178,   179,    -1,   181,   182,   183,   184,   185,   186,\n-     187,   188,   189,   190,   191,   192,    -1,   194,   195,   196,\n-     197,   198,   199,   200,    -1,   202,   203,   204,   205,   206,\n-     207,   208,   209,   210,   211,    -1,   213,    -1,   215,   216,\n-     217,   218,   219,   220,   221,   222,   223,   224,   225,    -1,\n-      -1,   228,   229,   230,   231,    -1,   233,   234,   235,   236,\n-     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,\n-     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,\n-     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,\n-     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,\n-     277,   278,    -1,   280,   281,    -1,    -1,   284,   285,   286,\n-      -1,    -1,   289,   290,   291,   292,   293,   294,   295,   296,\n-     297,   298,   299,   300,   301,   302,   303,   304,    -1,    -1,\n-      -1,    -1,   309,   310,   311,   312,   313,   314,   315,   316,\n-     317,   318,    -1,   320,   321,   322,   323,   324,   325,    -1,\n-     327,   328,   329,   330,   331,   332,   333,   334,    -1,   336,\n-     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,\n-     347,   348,    -1,   350,   351,   352,   353,   354,   355,   356,\n-     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,\n-     367,    -1,    -1,   370,   371,   372,   373,   374,   375,   376,\n-     377,   378,   379,   380,   381,   382,   383,   384,    -1,   386,\n-     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,\n-     397,   398,   399,   400,   401,    -1,   403,   404,    -1,   406,\n-     407,   408,   409,   410,   411,   412,    -1,   414,   415,    -1,\n-      -1,   418,   419,   420,   421,   422,   423,   424,   425,   426,\n-     427,   428,   429,   430,   431,    -1,    -1,   434,   435,   436,\n-      -1,   438,   439,   440,   441,    -1,   443,   444,   445,   446,\n-     447,   448,   449,    -1,   451,   452,   453,   454,   455,   456,\n-     457,    -1,   459,   460,    -1,    -1,   463,   464,   465,   466,\n-     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,\n-     477,   478,   479,   480,   481,   482,   483,   484,    -1,    -1,\n-      -1,    -1,    -1,    -1,   491,   492,   493,    -1,    -1,    -1,\n-      -1,   498,    -1,   500,    -1,    -1,    -1,    -1,   505,   506,\n-     507,   508,     3,     4,     5,     6,     7,     8,     9,    10,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    22,    23,    24,    25,    26,    27,    28,    29,    30,\n-      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,\n-      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,\n-      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,\n-      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,\n-      71,    -1,    73,    74,    75,    76,    77,    -1,    79,    -1,\n-      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,\n-      -1,    92,    93,    94,    95,    96,    97,    -1,    99,   100,\n-     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,\n-     111,   112,   113,   114,    -1,   116,   117,   118,   119,   120,\n-     121,    -1,   123,   124,   125,   126,   127,    -1,    -1,   130,\n-     131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,\n-     141,   142,    -1,   144,   145,   146,   147,   148,   149,   150,\n-     151,   152,   153,   154,   155,   156,    -1,   158,   159,   160,\n-     161,    -1,   163,    -1,   165,   166,    -1,   168,   169,   170,\n-     171,   172,   173,    -1,   175,    -1,   177,   178,   179,    -1,\n-     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,\n-     191,   192,    -1,   194,   195,   196,   197,   198,   199,   200,\n-      -1,   202,   203,   204,   205,   206,   207,   208,   209,   210,\n-     211,    -1,   213,    -1,   215,   216,   217,   218,   219,   220,\n-     221,   222,   223,   224,   225,    -1,    -1,   228,   229,   230,\n-     231,    -1,   233,   234,   235,   236,   237,   238,   239,   240,\n-     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,\n-     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,\n-     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,\n-     271,   272,   273,   274,   275,   276,   277,   278,    -1,   280,\n-     281,    -1,    -1,   284,   285,   286,    -1,    -1,   289,   290,\n-     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,\n-     301,   302,   303,   304,    -1,    -1,    -1,    -1,   309,   310,\n-     311,   312,   313,   314,   315,   316,   317,   318,    -1,   320,\n-     321,   322,   323,   324,   325,    -1,   327,   328,   329,   330,\n-     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,\n-     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,\n-     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,\n-     361,   362,   363,   364,   365,   366,   367,    -1,    -1,   370,\n-     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,\n-     381,   382,   383,   384,    -1,   386,   387,   388,   389,   390,\n-     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,\n-     401,    -1,   403,   404,    -1,   406,   407,   408,   409,   410,\n-     411,   412,    -1,   414,   415,    -1,    -1,   418,   419,   420,\n-     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,\n-     431,    -1,    -1,   434,   435,   436,    -1,   438,   439,   440,\n-     441,    -1,   443,   444,   445,   446,   447,   448,   449,    -1,\n-     451,   452,   453,   454,   455,   456,   457,    -1,    -1,   460,\n-      -1,    -1,   463,   464,   465,   466,   467,   468,   469,   470,\n-     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,\n-     481,   482,   483,   484,    -1,    -1,    -1,    -1,    -1,    -1,\n-     491,   492,   493,    -1,    -1,    -1,    -1,   498,    -1,   500,\n-      -1,    -1,    -1,    -1,   505,   506,   507,   508,     3,     4,\n-       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,\n-      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,\n-      -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,\n-      -1,    46,    47,    48,    49,    50,    51,    52,    53,    54,\n-      55,    56,    57,    -1,    59,    60,    61,    62,    63,    64,\n-      65,    66,    67,    68,    69,    70,    71,    -1,    73,    74,\n-      75,    76,    77,    -1,    79,    -1,    81,    82,    83,    84,\n-      85,    86,    87,    88,    89,    90,    -1,    92,    93,    94,\n-      95,    96,    97,    -1,    99,   100,   101,   102,   103,   104,\n-     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,\n-      -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,\n-     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,\n-      -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,\n-     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,\n-     155,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,\n-     165,   166,    -1,   168,   169,   170,   171,   172,   173,    -1,\n-     175,    -1,   177,   178,   179,    -1,   181,   182,   183,   184,\n-     185,   186,   187,   188,   189,   190,   191,   192,    -1,   194,\n-     195,   196,   197,   198,   199,   200,    -1,   202,   203,   204,\n-     205,   206,   207,   208,   209,   210,   211,    -1,   213,    -1,\n-     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,\n-     225,    -1,    -1,   228,   229,   230,   231,    -1,   233,   234,\n-     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,\n-     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,\n-     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,\n-     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,\n-     275,   276,   277,   278,    -1,   280,   281,    -1,    -1,   284,\n-     285,   286,    -1,    -1,   289,   290,   291,   292,   293,   294,\n-     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,\n-      -1,    -1,    -1,    -1,   309,   310,   311,   312,   313,   314,\n-     315,   316,   317,   318,    -1,   320,   321,   322,   323,   324,\n-     325,    -1,   327,   328,   329,   330,   331,   332,   333,   334,\n-      -1,   336,   337,   338,   339,   340,   341,   342,   343,   344,\n-     345,   346,   347,   348,    -1,   350,   351,   352,   353,   354,\n-     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,\n-     365,   366,   367,    -1,    -1,   370,   371,   372,   373,   374,\n-     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,\n-      -1,   386,   387,   388,   389,   390,   391,   392,   393,   394,\n-     395,   396,   397,   398,   399,   400,   401,    -1,   403,   404,\n-     405,   406,   407,   408,   409,   410,   411,   412,    -1,   414,\n-     415,    -1,    -1,   418,   419,   420,   421,   422,   423,   424,\n-     425,   426,   427,   428,   429,   430,   431,    -1,    -1,   434,\n-     435,   436,    -1,   438,   439,   440,   441,    -1,   443,   444,\n-     445,   446,   447,   448,   449,    -1,   451,   452,   453,   454,\n-     455,   456,   457,    -1,    -1,   460,    -1,    -1,   463,   464,\n-     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,\n-     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,\n-      -1,    -1,    -1,    -1,    -1,    -1,   491,   492,   493,    -1,\n-      -1,    -1,    -1,   498,    -1,   500,    -1,    -1,    -1,    -1,\n-     505,   506,   507,   508,     3,     4,     5,     6,     7,     8,\n-       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,\n-      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,\n-      39,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,\n-      49,    50,    51,    52,    53,    54,    55,    56,    57,    -1,\n-      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,\n-      69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,\n-      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,\n-      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,\n-      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,\n-     109,   110,   111,   112,   113,   114,    -1,   116,   117,   118,\n-     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,\n-      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,\n-      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,\n-     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,\n-     159,   160,   161,    -1,   163,    -1,   165,   166,    -1,   168,\n-     169,   170,   171,   172,   173,    -1,   175,    -1,   177,   178,\n-     179,    -1,   181,   182,   183,   184,   185,   186,   187,   188,\n-     189,   190,   191,   192,    -1,   194,   195,   196,   197,   198,\n-     199,   200,    -1,   202,   203,   204,   205,   206,   207,   208,\n-     209,   210,   211,    -1,   213,    -1,   215,   216,   217,   218,\n-     219,   220,   221,   222,   223,   224,   225,    -1,    -1,   228,\n-     229,   230,   231,    -1,   233,   234,   235,   236,   237,   238,\n-     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,\n-     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,\n-     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,\n-     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,\n-      -1,   280,   281,    -1,    -1,   284,   285,   286,    -1,    -1,\n-     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,\n-     299,   300,   301,   302,   303,   304,    -1,    -1,    -1,    -1,\n-     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,\n-      -1,   320,   321,   322,   323,   324,   325,    -1,   327,   328,\n-     329,   330,   331,   332,   333,   334,    -1,   336,   337,   338,\n-     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,\n-      -1,   350,   351,   352,   353,   354,   355,   356,   357,   358,\n-     359,   360,   361,   362,   363,   364,   365,   366,   367,    -1,\n-      -1,   370,   371,   372,   373,   374,   375,   376,   377,   378,\n-     379,   380,   381,   382,   383,   384,    -1,   386,   387,   388,\n-     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,\n-     399,   400,   401,    -1,   403,   404,   405,   406,   407,   408,\n-     409,   410,   411,   412,    -1,   414,   415,    -1,    -1,   418,\n-     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,\n-     429,   430,   431,    -1,    -1,   434,   435,   436,    -1,   438,\n-     439,   440,   441,    -1,   443,   444,   445,   446,   447,   448,\n-     449,    -1,   451,   452,   453,   454,   455,   456,   457,    -1,\n-      -1,   460,    -1,    -1,   463,   464,   465,   466,   467,   468,\n-     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,\n-     479,   480,   481,   482,   483,   484,    -1,    -1,    -1,    -1,\n-      -1,    -1,   491,   492,   493,    -1,    -1,    -1,    -1,   498,\n-      -1,   500,    -1,    -1,    -1,    -1,   505,   506,   507,   508,\n-       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,\n-      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,\n-      33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,\n-      43,    44,    -1,    46,    47,    48,    49,    50,    51,    52,\n-      53,    54,    55,    56,    57,    -1,    59,    60,    61,    62,\n-      63,    64,    65,    66,    67,    68,    69,    70,    71,    -1,\n-      73,    74,    75,    76,    77,    -1,    79,    -1,    81,    82,\n-      83,    84,    85,    86,    87,    88,    89,    90,    -1,    92,\n-      93,    94,    95,    96,    97,    -1,    99,   100,   101,   102,\n-     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,\n-     113,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,\n-     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,\n-     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,\n-      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,\n-     153,   154,   155,   156,    -1,   158,   159,   160,   161,    -1,\n-     163,    -1,   165,   166,    -1,   168,   169,   170,   171,   172,\n-     173,    -1,   175,    -1,   177,   178,   179,    -1,   181,   182,\n-     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,\n-      -1,   194,   195,   196,   197,   198,   199,   200,    -1,   202,\n-     203,   204,   205,   206,   207,   208,   209,   210,   211,    -1,\n-     213,    -1,   215,   216,   217,   218,   219,   220,   221,   222,\n-     223,   224,   225,    -1,    -1,   228,   229,   230,   231,    -1,\n-     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,\n-     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,\n-     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,\n-     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,\n-     273,   274,   275,   276,   277,   278,    -1,   280,   281,    -1,\n-      -1,   284,   285,   286,    -1,    -1,   289,   290,   291,   292,\n-     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,\n-     303,   304,    -1,    -1,    -1,    -1,   309,   310,   311,   312,\n-     313,   314,   315,   316,   317,   318,    -1,   320,   321,   322,\n-     323,   324,   325,    -1,   327,   328,   329,   330,   331,   332,\n-     333,   334,    -1,   336,   337,   338,   339,   340,   341,   342,\n-     343,   344,   345,   346,   347,   348,    -1,   350,   351,   352,\n-     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,\n-     363,   364,   365,   366,   367,    -1,    -1,   370,   371,   372,\n-     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,\n-     383,   384,    -1,   386,   387,   388,   389,   390,   391,   392,\n-     393,   394,   395,   396,   397,   398,   399,   400,   401,    -1,\n-     403,   404,    -1,   406,   407,   408,   409,   410,   411,   412,\n-      -1,   414,   415,    -1,    -1,   418,   419,   420,   421,   422,\n-     423,   424,   425,   426,   427,   428,   429,   430,   431,    -1,\n-      -1,   434,   435,   436,    -1,   438,   439,   440,   441,    -1,\n-     443,   444,   445,   446,   447,   448,   449,    -1,   451,   452,\n-     453,   454,   455,   456,   457,    -1,    -1,   460,    -1,    -1,\n-     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,\n-     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,\n-     483,   484,    -1,    -1,    -1,    -1,    -1,    -1,   491,   492,\n-     493,    -1,    -1,    -1,    -1,   498,    -1,   500,    -1,    -1,\n-      -1,    -1,   505,   506,   507,   508,     3,     4,     5,     6,\n-       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,\n-      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,\n-      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,\n-      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,\n-      57,    -1,    59,    60,    61,    62,    63,    64,    65,    66,\n-      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,\n-      77,    -1,    79,    -1,    81,    82,    83,    84,    85,    86,\n-      87,    88,    89,    90,    -1,    92,    93,    94,    95,    96,\n-      97,    -1,    99,   100,   101,   102,   103,   104,   105,   106,\n-     107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,\n-     117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,\n-     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,   136,\n-     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,\n-     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,\n-      -1,   158,   159,   160,   161,    -1,   163,    -1,   165,   166,\n-      -1,   168,   169,   170,   171,   172,   173,    -1,   175,    -1,\n-     177,   178,   179,    -1,   181,   182,   183,   184,   185,   186,\n-     187,   188,   189,   190,   191,   192,    -1,   194,   195,   196,\n-     197,   198,   199,   200,    -1,   202,   203,   204,   205,   206,\n-     207,   208,   209,   210,   211,    -1,   213,    -1,   215,   216,\n-     217,   218,   219,   220,   221,   222,   223,   224,   225,    -1,\n-      -1,   228,   229,   230,   231,    -1,   233,   234,   235,   236,\n-     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,\n-     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,\n-     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,\n-     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,\n-     277,   278,    -1,   280,   281,    -1,    -1,   284,   285,   286,\n-      -1,    -1,   289,   290,   291,   292,   293,   294,   295,   296,\n-     297,   298,   299,   300,   301,   302,   303,   304,    -1,    -1,\n-      -1,    -1,   309,   310,   311,   312,   313,   314,   315,   316,\n-     317,   318,    -1,   320,   321,   322,   323,   324,   325,    -1,\n-     327,   328,   329,   330,   331,   332,   333,   334,    -1,   336,\n-     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,\n-     347,   348,    -1,   350,   351,   352,   353,   354,   355,   356,\n-     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,\n-     367,    -1,    -1,   370,   371,   372,   373,   374,   375,   376,\n-     377,   378,   379,   380,   381,   382,   383,   384,    -1,   386,\n-     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,\n-     397,   398,   399,   400,   401,    -1,   403,   404,    -1,   406,\n-     407,   408,   409,   410,   411,   412,    -1,   414,   415,    -1,\n-      -1,   418,   419,   420,   421,   422,   423,   424,   425,   426,\n-     427,   428,   429,   430,   431,    -1,    -1,   434,   435,   436,\n-      -1,   438,   439,   440,   441,    -1,   443,   444,   445,   446,\n-     447,   448,   449,    -1,   451,   452,   453,   454,   455,   456,\n-     457,    -1,    -1,   460,    -1,    -1,   463,   464,   465,   466,\n-     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,\n-     477,   478,   479,   480,   481,   482,   483,   484,    -1,    -1,\n-      -1,    -1,    -1,    -1,   491,   492,   493,    -1,    -1,    -1,\n-      -1,   498,    -1,   500,    -1,    -1,    -1,    -1,   505,   506,\n-     507,   508,     3,     4,     5,     6,     7,     8,     9,    10,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,\n-      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,\n-      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,\n-      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,\n-      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,\n-      71,    -1,    73,    74,    75,    76,    77,    -1,    79,    -1,\n-      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,\n-      -1,    92,    93,    94,    95,    96,    97,    -1,    99,   100,\n-     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,\n-     111,   112,   113,   114,    -1,   116,   117,   118,   119,   120,\n-     121,    -1,   123,   124,   125,   126,   127,    -1,    -1,   130,\n-     131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,\n-     141,   142,    -1,   144,   145,   146,   147,   148,   149,   150,\n-     151,   152,   153,   154,   155,   156,    -1,   158,   159,   160,\n-     161,    -1,   163,    -1,   165,   166,    -1,   168,   169,   170,\n-     171,   172,   173,    -1,   175,    -1,   177,   178,   179,    -1,\n-     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,\n-     191,   192,    -1,   194,   195,   196,   197,   198,   199,   200,\n-      -1,   202,   203,   204,   205,   206,   207,   208,   209,   210,\n-     211,    -1,   213,    -1,   215,   216,   217,   218,   219,   220,\n-     221,   222,   223,   224,   225,    -1,    -1,   228,   229,   230,\n-     231,    -1,   233,   234,   235,   236,   237,   238,   239,   240,\n-     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,\n-     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,\n-     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,\n-     271,   272,   273,   274,   275,   276,   277,   278,    -1,   280,\n-     281,    -1,    -1,   284,   285,   286,    -1,    -1,   289,   290,\n-     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,\n-     301,   302,   303,   304,    -1,    -1,    -1,    -1,   309,   310,\n-     311,   312,   313,   314,   315,   316,   317,   318,    -1,   320,\n-     321,   322,   323,   324,   325,    -1,   327,   328,   329,   330,\n-     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,\n-     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,\n-     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,\n-     361,   362,   363,   364,   365,   366,   367,    -1,    -1,   370,\n-     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,\n-     381,   382,   383,   384,    -1,   386,   387,   388,   389,   390,\n-     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,\n-     401,    -1,   403,   404,    -1,   406,   407,   408,   409,   410,\n-     411,   412,    -1,   414,   415,    -1,    -1,   418,   419,   420,\n-     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,\n-     431,    -1,    -1,   434,   435,   436,    -1,   438,   439,   440,\n-     441,    -1,   443,   444,   445,   446,   447,   448,   449,    -1,\n-     451,   452,   453,   454,   455,   456,   457,    -1,    -1,   460,\n-      -1,    -1,   463,   464,   465,   466,   467,   468,   469,   470,\n-     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,\n-     481,   482,   483,   484,    -1,    -1,    -1,    -1,    -1,    -1,\n-     491,   492,   493,    -1,    -1,    -1,    -1,   498,    -1,   500,\n-      -1,    -1,    -1,    -1,   505,   506,   507,   508,     3,     4,\n-       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,\n-      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,\n-      -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,\n-      -1,    46,    47,    48,    49,    50,    51,    52,    53,    54,\n-      55,    56,    57,    -1,    59,    60,    61,    62,    63,    64,\n-      65,    66,    67,    68,    69,    70,    71,    -1,    73,    74,\n-      75,    76,    77,    -1,    79,    -1,    81,    82,    83,    84,\n-      85,    86,    87,    88,    89,    90,    -1,    92,    93,    94,\n-      95,    96,    97,    -1,    99,   100,   101,   102,   103,   104,\n-     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,\n-      -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,\n-     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,\n-      -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,\n-     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,\n-     155,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,\n-     165,   166,    -1,   168,   169,   170,   171,   172,   173,    -1,\n-     175,    -1,   177,   178,   179,    -1,   181,   182,   183,   184,\n-     185,   186,   187,   188,   189,   190,   191,   192,    -1,   194,\n-     195,   196,   197,   198,   199,   200,    -1,   202,   203,   204,\n-     205,   206,   207,   208,   209,   210,   211,    -1,   213,    -1,\n-     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,\n-     225,    -1,    -1,   228,   229,   230,   231,    -1,   233,   234,\n-     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,\n-     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,\n-     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,\n-     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,\n-     275,   276,   277,   278,    -1,   280,   281,    -1,    -1,   284,\n-     285,   286,    -1,    -1,   289,   290,   291,   292,   293,   294,\n-     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,\n-      -1,    -1,    -1,    -1,   309,   310,   311,   312,   313,   314,\n-     315,   316,   317,   318,    -1,   320,   321,   322,   323,   324,\n-     325,    -1,   327,   328,   329,   330,   331,   332,   333,   334,\n-      -1,   336,   337,   338,   339,   340,   341,   342,   343,   344,\n-     345,   346,   347,   348,    -1,   350,   351,   352,   353,   354,\n-     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,\n-     365,   366,   367,    -1,    -1,   370,   371,   372,   373,   374,\n-     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,\n-      -1,   386,   387,   388,   389,   390,   391,   392,   393,   394,\n-     395,   396,   397,   398,   399,   400,   401,    -1,   403,   404,\n-      -1,   406,   407,   408,   409,   410,   411,   412,    -1,   414,\n-     415,    -1,    -1,   418,   419,   420,   421,   422,   423,   424,\n-     425,   426,   427,   428,   429,   430,   431,    -1,    -1,   434,\n-     435,   436,    -1,   438,   439,   440,   441,    -1,   443,   444,\n-     445,   446,   447,   448,   449,    -1,   451,   452,   453,   454,\n-     455,   456,   457,    -1,    -1,   460,    -1,    -1,   463,   464,\n-     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,\n-     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,\n-      -1,    -1,    -1,    -1,    -1,    -1,   491,   492,   493,    -1,\n-      -1,    -1,    -1,   498,    -1,   500,    -1,    -1,    -1,    -1,\n-     505,   506,   507,   508,     3,     4,     5,     6,     7,     8,\n+      -1,    -1,    -1,    -1,    -1,    -1,  3238,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,     3,     4,     5,     6,     7,     8,\n        9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,\n-      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,\n+      29,    -1,    31,    32,    33,    -1,    -1,    -1,  3280,    -1,\n       39,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,\n       49,    50,    51,    52,    53,    54,    55,    56,    57,    -1,\n       59,    60,    61,    62,    63,    64,    65,    66,    67,    68,\n       69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,\n       79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,\n-      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,\n+      89,    90,  3334,    92,    93,    94,    95,    96,    97,    -1,\n       99,   100,   101,   102,   103,   104,   105,   106,   107,   108,\n      109,   110,   111,   112,   113,   114,    -1,   116,   117,   118,\n      119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,\n       -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,\n       -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,\n      149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,\n-     159,   160,   161,    -1,   163,    -1,   165,   166,    -1,   168,\n+     159,   160,   161,    -1,   163,    -1,   165,   166,   167,   168,\n      169,   170,   171,   172,   173,    -1,   175,    -1,   177,   178,\n      179,    -1,   181,   182,   183,   184,   185,   186,   187,   188,\n      189,   190,   191,   192,    -1,   194,   195,   196,   197,   198,\n@@ -12859,27 +11709,27 @@ static const yytype_int16 yycheck[] =\n      269,   270,   271,   272,   273,   274,   275,   276,   277,   278,\n       -1,   280,   281,    -1,    -1,   284,   285,   286,    -1,    -1,\n      289,   290,   291,   292,   293,   294,   295,   296,   297,   298,\n-     299,   300,   301,   302,   303,   304,    -1,    -1,    -1,    -1,\n+     299,   300,   301,   302,   303,   304,   305,   306,   307,    -1,\n      309,   310,   311,   312,   313,   314,   315,   316,   317,   318,\n       -1,   320,   321,   322,   323,   324,   325,    -1,   327,   328,\n      329,   330,   331,   332,   333,   334,    -1,   336,   337,   338,\n      339,   340,   341,   342,   343,   344,   345,   346,   347,   348,\n       -1,   350,   351,   352,   353,   354,   355,   356,   357,   358,\n-     359,   360,   361,   362,   363,   364,   365,   366,   367,    -1,\n+     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,\n       -1,   370,   371,   372,   373,   374,   375,   376,   377,   378,\n      379,   380,   381,   382,   383,   384,    -1,   386,   387,   388,\n      389,   390,   391,   392,   393,   394,   395,   396,   397,   398,\n-     399,   400,   401,    -1,   403,   404,    -1,   406,   407,   408,\n+     399,   400,   401,    -1,   403,   404,   405,   406,   407,   408,\n      409,   410,   411,   412,    -1,   414,   415,    -1,    -1,   418,\n      419,   420,   421,   422,   423,   424,   425,   426,   427,   428,\n-     429,   430,   431,    -1,    -1,   434,   435,   436,    -1,   438,\n+     429,   430,   431,    -1,    -1,   434,   435,   436,   437,   438,\n      439,   440,   441,    -1,   443,   444,   445,   446,   447,   448,\n      449,    -1,   451,   452,   453,   454,   455,   456,   457,    -1,\n-      -1,   460,    -1,    -1,   463,   464,   465,   466,   467,   468,\n+      -1,   460,    -1,   462,   463,   464,   465,   466,   467,   468,\n      469,   470,   471,   472,   473,   474,   475,   476,   477,   478,\n-     479,   480,   481,   482,   483,   484,    -1,    -1,    -1,    -1,\n+     479,   480,   481,   482,   483,   484,    -1,   486,    -1,    -1,\n       -1,    -1,   491,   492,   493,    -1,    -1,    -1,    -1,   498,\n-      -1,   500,    -1,    -1,    -1,    -1,   505,   506,   507,   508,\n+      -1,   500,   501,    -1,    -1,    -1,   505,   506,   507,   508,\n        3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,\n       23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,\n@@ -12896,7 +11746,7 @@ static const yytype_int16 yycheck[] =\n      133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,\n       -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,\n      153,   154,   155,   156,    -1,   158,   159,   160,   161,    -1,\n-     163,    -1,   165,   166,    -1,   168,   169,   170,   171,   172,\n+     163,    -1,   165,   166,   167,   168,   169,   170,   171,   172,\n      173,    -1,   175,    -1,   177,   178,   179,    -1,   181,   182,\n      183,   184,   185,   186,   187,   188,   189,   190,   191,   192,\n       -1,   194,   195,   196,   197,   198,   199,   200,    -1,   202,\n@@ -12910,31 +11760,31 @@ static const yytype_int16 yycheck[] =\n      273,   274,   275,   276,   277,   278,    -1,   280,   281,    -1,\n       -1,   284,   285,   286,    -1,    -1,   289,   290,   291,   292,\n      293,   294,   295,   296,   297,   298,   299,   300,   301,   302,\n-     303,   304,    -1,    -1,    -1,    -1,   309,   310,   311,   312,\n+     303,   304,   305,   306,   307,    -1,   309,   310,   311,   312,\n      313,   314,   315,   316,   317,   318,    -1,   320,   321,   322,\n      323,   324,   325,    -1,   327,   328,   329,   330,   331,   332,\n      333,   334,    -1,   336,   337,   338,   339,   340,   341,   342,\n      343,   344,   345,   346,   347,   348,    -1,   350,   351,   352,\n      353,   354,   355,   356,   357,   358,   359,   360,   361,   362,\n-     363,   364,   365,   366,   367,    -1,    -1,   370,   371,   372,\n+     363,   364,   365,   366,   367,   368,    -1,   370,   371,   372,\n      373,   374,   375,   376,   377,   378,   379,   380,   381,   382,\n      383,   384,    -1,   386,   387,   388,   389,   390,   391,   392,\n      393,   394,   395,   396,   397,   398,   399,   400,   401,    -1,\n-     403,   404,    -1,   406,   407,   408,   409,   410,   411,   412,\n+     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,\n       -1,   414,   415,    -1,    -1,   418,   419,   420,   421,   422,\n      423,   424,   425,   426,   427,   428,   429,   430,   431,    -1,\n-      -1,   434,   435,   436,    -1,   438,   439,   440,   441,    -1,\n+      -1,   434,   435,   436,   437,   438,   439,   440,   441,    -1,\n      443,   444,   445,   446,   447,   448,   449,    -1,   451,   452,\n-     453,   454,   455,   456,   457,    -1,    -1,   460,    -1,    -1,\n+     453,   454,   455,   456,   457,    -1,    -1,   460,    -1,   462,\n      463,   464,   465,   466,   467,   468,   469,   470,   471,   472,\n      473,   474,   475,   476,   477,   478,   479,   480,   481,   482,\n-     483,   484,    -1,    -1,    -1,    -1,    -1,    -1,   491,   492,\n+     483,   484,    -1,   486,    -1,    -1,    -1,    -1,   491,   492,\n      493,    -1,    -1,    -1,    -1,   498,    -1,   500,    -1,    -1,\n       -1,    -1,   505,   506,   507,   508,     3,     4,     5,     6,\n        7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,\n-      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,\n-      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,\n+      27,    28,    29,    30,    31,    32,    33,    -1,    -1,    -1,\n+      37,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,\n       47,    48,    49,    50,    51,    52,    53,    54,    55,    56,\n       57,    -1,    59,    60,    61,    62,    63,    64,    65,    66,\n       67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,\n@@ -12943,7 +11793,7 @@ static const yytype_int16 yycheck[] =\n       97,    -1,    99,   100,   101,   102,   103,   104,   105,   106,\n      107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,\n      117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,\n-     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,   136,\n+     127,   128,    -1,   130,   131,   132,   133,   134,    -1,   136,\n      137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,\n      147,   148,   149,   150,   151,   152,   153,   154,   155,   156,\n       -1,   158,   159,   160,   161,    -1,   163,    -1,   165,   166,\n@@ -12967,7 +11817,7 @@ static const yytype_int16 yycheck[] =\n      337,   338,   339,   340,   341,   342,   343,   344,   345,   346,\n      347,   348,    -1,   350,   351,   352,   353,   354,   355,   356,\n      357,   358,   359,   360,   361,   362,   363,   364,   365,   366,\n-     367,    -1,    -1,   370,   371,   372,   373,   374,   375,   376,\n+     367,    -1,   369,   370,   371,   372,   373,   374,   375,   376,\n      377,   378,   379,   380,   381,   382,   383,   384,    -1,   386,\n      387,   388,   389,   390,   391,   392,   393,   394,   395,   396,\n      397,   398,   399,   400,   401,    -1,   403,   404,    -1,   406,\n@@ -12975,39 +11825,39 @@ static const yytype_int16 yycheck[] =\n       -1,   418,   419,   420,   421,   422,   423,   424,   425,   426,\n      427,   428,   429,   430,   431,    -1,    -1,   434,   435,   436,\n       -1,   438,   439,   440,   441,    -1,   443,   444,   445,   446,\n-     447,   448,   449,    -1,   451,   452,   453,   454,   455,   456,\n+     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,\n      457,    -1,    -1,   460,    -1,    -1,   463,   464,   465,   466,\n      467,   468,   469,   470,   471,   472,   473,   474,   475,   476,\n      477,   478,   479,   480,   481,   482,   483,   484,    -1,    -1,\n       -1,    -1,    -1,    -1,   491,   492,   493,    -1,    -1,    -1,\n-      -1,   498,    -1,   500,    -1,    -1,    -1,    -1,   505,   506,\n+      -1,   498,    -1,   500,   501,    -1,    -1,    -1,   505,   506,\n      507,   508,     3,     4,     5,     6,     7,     8,     9,    10,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,\n       31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,\n       -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,\n-      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,\n+      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,\n       61,    62,    63,    64,    65,    66,    67,    68,    69,    70,\n       71,    -1,    73,    74,    75,    76,    77,    -1,    79,    -1,\n       81,    82,    83,    84,    85,    86,    87,    88,    89,    90,\n       -1,    92,    93,    94,    95,    96,    97,    -1,    99,   100,\n      101,   102,   103,   104,   105,   106,   107,   108,   109,   110,\n-     111,   112,    -1,   114,    -1,   116,   117,   118,   119,   120,\n+     111,   112,   113,   114,    -1,   116,   117,   118,   119,   120,\n      121,    -1,   123,   124,   125,   126,   127,    -1,    -1,   130,\n      131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,\n      141,   142,    -1,   144,   145,   146,   147,   148,   149,   150,\n      151,   152,   153,   154,   155,   156,    -1,   158,   159,   160,\n-     161,    -1,   163,    -1,   165,   166,    -1,   168,   169,   170,\n+     161,    -1,   163,    -1,   165,   166,   167,   168,   169,   170,\n      171,   172,   173,    -1,   175,    -1,   177,   178,   179,    -1,\n      181,   182,   183,   184,   185,   186,   187,   188,   189,   190,\n      191,   192,    -1,   194,   195,   196,   197,   198,   199,   200,\n       -1,   202,   203,   204,   205,   206,   207,   208,   209,   210,\n      211,    -1,   213,    -1,   215,   216,   217,   218,   219,   220,\n-     221,   222,   223,   224,   225,    -1,    -1,   228,   229,   230,\n+     221,   222,   223,   224,   225,    -1,   227,   228,   229,   230,\n      231,    -1,   233,   234,   235,   236,   237,   238,   239,   240,\n      241,   242,   243,   244,   245,   246,   247,   248,   249,   250,\n      251,   252,   253,   254,   255,   256,   257,   258,   259,   260,\n-     261,   262,   263,   264,   265,   266,    -1,   268,   269,   270,\n+     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,\n      271,   272,   273,   274,   275,   276,   277,   278,    -1,   280,\n      281,    -1,    -1,   284,   285,   286,    -1,    -1,   289,   290,\n      291,   292,   293,   294,   295,   296,   297,   298,   299,   300,\n@@ -13022,20 +11872,20 @@ static const yytype_int16 yycheck[] =\n      381,   382,   383,   384,    -1,   386,   387,   388,   389,   390,\n      391,   392,   393,   394,   395,   396,   397,   398,   399,   400,\n      401,    -1,   403,   404,    -1,   406,   407,   408,   409,   410,\n-     411,   412,    -1,   414,   415,    -1,    -1,   418,   419,   420,\n+     411,   412,    -1,   414,   415,    -1,   417,   418,   419,   420,\n      421,   422,   423,   424,   425,   426,   427,   428,   429,   430,\n      431,    -1,    -1,   434,   435,   436,    -1,   438,   439,   440,\n      441,    -1,   443,   444,   445,   446,   447,   448,   449,    -1,\n      451,   452,   453,   454,   455,   456,   457,    -1,    -1,   460,\n       -1,    -1,   463,   464,   465,   466,   467,   468,   469,   470,\n      471,   472,   473,   474,   475,   476,   477,   478,   479,   480,\n-     481,   482,   483,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-     491,   492,    -1,    -1,    -1,    -1,    -1,   498,    -1,   500,\n+     481,   482,   483,   484,    -1,    -1,    -1,    -1,    -1,    -1,\n+     491,   492,   493,    -1,    -1,    -1,    -1,   498,    -1,   500,\n       -1,    -1,    -1,    -1,   505,   506,   507,   508,     3,     4,\n        5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,\n       25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,\n-      -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,\n+      -1,    -1,    37,    -1,    39,    -1,    -1,    42,    43,    44,\n       -1,    46,    47,    48,    49,    50,    51,    52,    53,    54,\n       55,    56,    57,    -1,    59,    60,    61,    62,    63,    64,\n       65,    66,    67,    68,    69,    70,    71,    -1,    73,    74,\n@@ -13053,12 +11903,12 @@ static const yytype_int16 yycheck[] =\n      185,   186,   187,   188,   189,   190,   191,   192,    -1,   194,\n      195,   196,   197,   198,   199,   200,    -1,   202,   203,   204,\n      205,   206,   207,   208,   209,   210,   211,    -1,   213,    -1,\n-     215,    -1,    -1,   218,   219,   220,   221,   222,   223,   224,\n+     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,\n      225,    -1,    -1,   228,   229,   230,   231,    -1,   233,   234,\n      235,   236,   237,   238,   239,   240,   241,   242,   243,   244,\n      245,   246,   247,   248,   249,   250,   251,   252,   253,   254,\n      255,   256,   257,   258,   259,   260,   261,   262,   263,   264,\n-     265,   266,    -1,   268,   269,    -1,   271,   272,   273,   274,\n+     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,\n      275,   276,   277,   278,    -1,   280,   281,    -1,    -1,   284,\n      285,   286,    -1,    -1,   289,   290,   291,   292,   293,   294,\n      295,   296,   297,   298,   299,   300,   301,   302,   303,   304,\n@@ -13068,7 +11918,7 @@ static const yytype_int16 yycheck[] =\n       -1,   336,   337,   338,   339,   340,   341,   342,   343,   344,\n      345,   346,   347,   348,    -1,   350,   351,   352,   353,   354,\n      355,   356,   357,   358,   359,   360,   361,   362,   363,   364,\n-     365,   366,   367,    -1,    -1,   370,   371,   372,   373,   374,\n+     365,   366,   367,    -1,   369,   370,   371,   372,   373,   374,\n      375,   376,   377,   378,   379,   380,   381,   382,   383,   384,\n       -1,   386,   387,   388,   389,   390,   391,   392,   393,   394,\n      395,   396,   397,   398,   399,   400,   401,    -1,   403,   404,\n@@ -13076,16 +11926,16 @@ static const yytype_int16 yycheck[] =\n      415,    -1,    -1,   418,   419,   420,   421,   422,   423,   424,\n      425,   426,   427,   428,   429,   430,   431,    -1,    -1,   434,\n      435,   436,    -1,   438,   439,   440,   441,    -1,   443,   444,\n-     445,   446,   447,   448,   449,    -1,   451,   452,   453,   454,\n+     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,\n      455,   456,   457,    -1,    -1,   460,    -1,    -1,   463,   464,\n      465,   466,   467,   468,   469,   470,   471,   472,   473,   474,\n      475,   476,   477,   478,   479,   480,   481,   482,   483,   484,\n       -1,    -1,    -1,    -1,    -1,    -1,   491,   492,   493,    -1,\n       -1,    -1,    -1,   498,    -1,   500,    -1,    -1,    -1,    -1,\n-     505,   506,   507,   508,     3,     4,     5,     6,     7,    -1,\n+     505,   506,   507,   508,     3,     4,     5,     6,     7,     8,\n        9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,\n-      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,\n+      29,    -1,    31,    32,    33,    -1,    -1,    -1,    37,    -1,\n       39,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,\n       49,    50,    51,    52,    53,    54,    55,    56,    57,    -1,\n       59,    60,    61,    62,    63,    64,    65,    66,    67,    68,\n@@ -13093,7 +11943,7 @@ static const yytype_int16 yycheck[] =\n       79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,\n       89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,\n       99,   100,   101,   102,   103,   104,   105,   106,   107,   108,\n-     109,   110,   111,   112,    -1,   114,    -1,   116,   117,   118,\n+     109,   110,   111,   112,   113,   114,    -1,   116,   117,   118,\n      119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,\n       -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,\n       -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,\n@@ -13108,7 +11958,7 @@ static const yytype_int16 yycheck[] =\n      229,   230,   231,    -1,   233,   234,   235,   236,   237,   238,\n      239,   240,   241,   242,   243,   244,   245,   246,   247,   248,\n      249,   250,   251,   252,   253,   254,   255,   256,   257,   258,\n-     259,   260,   261,   262,   263,   264,   265,   266,    -1,   268,\n+     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,\n      269,   270,   271,   272,   273,   274,   275,   276,   277,   278,\n       -1,   280,   281,    -1,    -1,   284,   285,   286,    -1,    -1,\n      289,   290,   291,   292,   293,   294,   295,   296,   297,   298,\n@@ -13119,7 +11969,7 @@ static const yytype_int16 yycheck[] =\n      339,   340,   341,   342,   343,   344,   345,   346,   347,   348,\n       -1,   350,   351,   352,   353,   354,   355,   356,   357,   358,\n      359,   360,   361,   362,   363,   364,   365,   366,   367,    -1,\n-      -1,   370,   371,   372,   373,   374,   375,   376,   377,   378,\n+     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,\n      379,   380,   381,   382,   383,   384,    -1,   386,   387,   388,\n      389,   390,   391,   392,   393,   394,   395,   396,   397,   398,\n      399,   400,   401,    -1,   403,   404,    -1,   406,   407,   408,\n@@ -13130,13 +11980,13 @@ static const yytype_int16 yycheck[] =\n      449,    -1,   451,   452,   453,   454,   455,   456,   457,    -1,\n       -1,   460,    -1,    -1,   463,   464,   465,   466,   467,   468,\n      469,   470,   471,   472,   473,   474,   475,   476,   477,   478,\n-     479,   480,   481,   482,   483,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,   491,   492,    -1,    -1,    -1,    -1,    -1,   498,\n-      -1,   500,    -1,    -1,    -1,    -1,   505,   506,   507,   508,\n+     479,   480,   481,   482,   483,   484,    -1,    -1,    -1,    -1,\n+      -1,    -1,   491,   492,   493,    -1,    -1,    -1,    -1,   498,\n+      -1,   500,   501,    -1,    -1,    -1,   505,   506,   507,   508,\n        3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,\n-      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,\n-      33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,\n+      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,\n+      33,    -1,    -1,    -1,    -1,    38,    39,    -1,    -1,    42,\n       43,    44,    -1,    46,    47,    48,    49,    50,    51,    52,\n       53,    54,    55,    56,    57,    -1,    59,    60,    61,    62,\n       63,    64,    65,    66,    67,    68,    69,    70,    71,    -1,\n@@ -13144,7 +11994,7 @@ static const yytype_int16 yycheck[] =\n       83,    84,    85,    86,    87,    88,    89,    90,    -1,    92,\n       93,    94,    95,    96,    97,    -1,    99,   100,   101,   102,\n      103,   104,   105,   106,   107,   108,   109,   110,   111,   112,\n-      -1,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,\n+     113,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,\n      123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,\n      133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,\n       -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,\n@@ -13154,12 +12004,12 @@ static const yytype_int16 yycheck[] =\n      183,   184,   185,   186,   187,   188,   189,   190,   191,   192,\n       -1,   194,   195,   196,   197,   198,   199,   200,    -1,   202,\n      203,   204,   205,   206,   207,   208,   209,   210,   211,    -1,\n-     213,    -1,   215,    -1,   217,   218,   219,   220,   221,   222,\n+     213,    -1,   215,   216,   217,   218,   219,   220,   221,   222,\n      223,   224,   225,    -1,    -1,   228,   229,   230,   231,    -1,\n      233,   234,   235,   236,   237,   238,   239,   240,   241,   242,\n      243,   244,   245,   246,   247,   248,   249,   250,   251,   252,\n      253,   254,   255,   256,   257,   258,   259,   260,   261,   262,\n-     263,   264,   265,   266,    -1,   268,   269,   270,   271,   272,\n+     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,\n      273,   274,   275,   276,   277,   278,    -1,   280,   281,    -1,\n       -1,   284,   285,   286,    -1,    -1,   289,   290,   291,   292,\n      293,   294,   295,   296,   297,   298,   299,   300,   301,   302,\n@@ -13171,7 +12021,7 @@ static const yytype_int16 yycheck[] =\n      353,   354,   355,   356,   357,   358,   359,   360,   361,   362,\n      363,   364,   365,   366,   367,    -1,    -1,   370,   371,   372,\n      373,   374,   375,   376,   377,   378,   379,   380,   381,   382,\n-     383,   384,    -1,   386,   387,   388,   389,   390,   391,   392,\n+     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,\n      393,   394,   395,   396,   397,   398,   399,   400,   401,    -1,\n      403,   404,    -1,   406,   407,   408,   409,   410,   411,   412,\n       -1,   414,   415,    -1,    -1,   418,   419,   420,   421,   422,\n@@ -13181,20 +12031,20 @@ static const yytype_int16 yycheck[] =\n      453,   454,   455,   456,   457,    -1,    -1,   460,    -1,    -1,\n      463,   464,   465,   466,   467,   468,   469,   470,   471,   472,\n      473,   474,   475,   476,   477,   478,   479,   480,   481,   482,\n-     483,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   491,   492,\n-      -1,    -1,    -1,    -1,    -1,   498,    -1,   500,    -1,    -1,\n+     483,   484,    -1,    -1,    -1,    -1,    -1,    -1,   491,   492,\n+     493,    -1,    -1,    -1,    -1,   498,    -1,   500,    -1,    -1,\n       -1,    -1,   505,   506,   507,   508,     3,     4,     5,     6,\n-       7,    -1,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,\n+       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,\n       27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,\n-      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,\n+      37,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,\n       47,    48,    49,    50,    51,    52,    53,    54,    55,    56,\n       57,    -1,    59,    60,    61,    62,    63,    64,    65,    66,\n       67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,\n       77,    -1,    79,    -1,    81,    82,    83,    84,    85,    86,\n       87,    88,    89,    90,    -1,    92,    93,    94,    95,    96,\n       97,    -1,    99,   100,   101,   102,   103,   104,   105,   106,\n-     107,   108,   109,   110,   111,   112,    -1,   114,    -1,   116,\n+     107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,\n      117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,\n      127,    -1,    -1,   130,   131,   132,   133,   134,    -1,   136,\n      137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,\n@@ -13210,7 +12060,7 @@ static const yytype_int16 yycheck[] =\n      237,   238,   239,   240,   241,   242,   243,   244,   245,   246,\n      247,   248,   249,   250,   251,   252,   253,   254,   255,   256,\n      257,   258,   259,   260,   261,   262,   263,   264,   265,   266,\n-      -1,   268,   269,   270,   271,   272,   273,   274,   275,   276,\n+     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,\n      277,   278,    -1,   280,   281,    -1,    -1,   284,   285,   286,\n       -1,    -1,   289,   290,   291,   292,   293,   294,   295,   296,\n      297,   298,   299,   300,   301,   302,   303,   304,    -1,    -1,\n@@ -13220,7 +12070,7 @@ static const yytype_int16 yycheck[] =\n      337,   338,   339,   340,   341,   342,   343,   344,   345,   346,\n      347,   348,    -1,   350,   351,   352,   353,   354,   355,   356,\n      357,   358,   359,   360,   361,   362,   363,   364,   365,   366,\n-     367,    -1,    -1,   370,   371,   372,   373,   374,   375,   376,\n+     367,    -1,   369,   370,   371,   372,   373,   374,   375,   376,\n      377,   378,   379,   380,   381,   382,   383,   384,    -1,   386,\n      387,   388,   389,   390,   391,   392,   393,   394,   395,   396,\n      397,   398,   399,   400,   401,    -1,   403,   404,    -1,   406,\n@@ -13231,35 +12081,1047 @@ static const yytype_int16 yycheck[] =\n      447,   448,   449,    -1,   451,   452,   453,   454,   455,   456,\n      457,    -1,    -1,   460,    -1,    -1,   463,   464,   465,   466,\n      467,   468,   469,   470,   471,   472,   473,   474,   475,   476,\n-     477,   478,   479,   480,   481,   482,   483,    -1,    -1,    -1,\n-      -1,    -1,    -1,     3,     4,     5,     6,     7,     8,     9,\n-      10,   498,    -1,   500,    -1,    -1,    -1,    -1,   505,   506,\n-     507,   508,    22,    23,    24,    25,    26,    27,    28,    29,\n+     477,   478,   479,   480,   481,   482,   483,   484,    -1,    -1,\n+      -1,    -1,    -1,    -1,   491,   492,   493,    -1,    -1,    -1,\n+      -1,   498,    -1,   500,   501,    -1,    -1,    -1,   505,   506,\n+     507,   508,     3,     4,     5,     6,     7,     8,     9,    10,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,\n+      31,    32,    33,    -1,    -1,    -1,    37,    -1,    39,    -1,\n+      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,\n+      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,\n+      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,\n+      71,    -1,    73,    74,    75,    76,    77,    -1,    79,    -1,\n+      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,\n+      -1,    92,    93,    94,    95,    96,    97,    -1,    99,   100,\n+     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,\n+     111,   112,   113,   114,    -1,   116,   117,   118,   119,   120,\n+     121,    -1,   123,   124,   125,   126,   127,    -1,    -1,   130,\n+     131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,\n+     141,   142,    -1,   144,   145,   146,   147,   148,   149,   150,\n+     151,   152,   153,   154,   155,   156,    -1,   158,   159,   160,\n+     161,    -1,   163,    -1,   165,   166,    -1,   168,   169,   170,\n+     171,   172,   173,    -1,   175,    -1,   177,   178,   179,    -1,\n+     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,\n+     191,   192,    -1,   194,   195,   196,   197,   198,   199,   200,\n+      -1,   202,   203,   204,   205,   206,   207,   208,   209,   210,\n+     211,    -1,   213,    -1,   215,   216,   217,   218,   219,   220,\n+     221,   222,   223,   224,   225,    -1,    -1,   228,   229,   230,\n+     231,    -1,   233,   234,   235,   236,   237,   238,   239,   240,\n+     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,\n+     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,\n+     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,\n+     271,   272,   273,   274,   275,   276,   277,   278,    -1,   280,\n+     281,    -1,    -1,   284,   285,   286,    -1,    -1,   289,   290,\n+     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,\n+     301,   302,   303,   304,    -1,    -1,    -1,    -1,   309,   310,\n+     311,   312,   313,   314,   315,   316,   317,   318,    -1,   320,\n+     321,   322,   323,   324,   325,    -1,   327,   328,   329,   330,\n+     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,\n+     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,\n+     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,\n+     361,   362,   363,   364,   365,   366,   367,    -1,   369,   370,\n+     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,\n+     381,   382,   383,   384,    -1,   386,   387,   388,   389,   390,\n+     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,\n+     401,    -1,   403,   404,    -1,   406,   407,   408,   409,   410,\n+     411,   412,    -1,   414,   415,    -1,    -1,   418,   419,   420,\n+     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,\n+     431,    -1,    -1,   434,   435,   436,    -1,   438,   439,   440,\n+     441,    -1,   443,   444,   445,   446,   447,   448,   449,    -1,\n+     451,   452,   453,   454,   455,   456,   457,    -1,    -1,   460,\n+      -1,    -1,   463,   464,   465,   466,   467,   468,   469,   470,\n+     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,\n+     481,   482,   483,   484,    -1,    -1,    -1,    -1,    -1,    -1,\n+     491,   492,   493,    -1,    -1,    -1,    -1,   498,    -1,   500,\n+      -1,    -1,    -1,    -1,   505,   506,   507,   508,     3,     4,\n+       5,     6,     7,    -1,     9,    10,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,\n+      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,\n+      -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,\n+      -1,    46,    47,    48,    49,    50,    51,    52,    53,    54,\n+      55,    56,    57,    -1,    59,    60,    61,    62,    63,    64,\n+      65,    66,    67,    68,    69,    70,    71,    -1,    73,    74,\n+      75,    76,    77,    -1,    79,    -1,    81,    82,    83,    84,\n+      85,    86,    87,    88,    89,    90,    -1,    92,    93,    94,\n+      95,    96,    97,    -1,    99,   100,   101,   102,   103,   104,\n+     105,   106,   107,   108,   109,   110,   111,   112,    -1,   114,\n+      -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,\n+     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,\n+      -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,\n+     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,\n+     155,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,\n+     165,   166,   167,   168,   169,   170,   171,   172,   173,    -1,\n+     175,    -1,   177,   178,   179,    -1,   181,   182,   183,   184,\n+     185,   186,   187,   188,   189,   190,   191,   192,    -1,   194,\n+     195,   196,   197,   198,   199,   200,    -1,   202,   203,   204,\n+     205,   206,   207,   208,   209,   210,   211,    -1,   213,    -1,\n+     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,\n+     225,    -1,    -1,   228,   229,   230,   231,    -1,   233,   234,\n+     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,\n+     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,\n+     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,\n+     265,   266,    -1,   268,   269,   270,   271,   272,   273,   274,\n+     275,   276,   277,   278,    -1,   280,   281,    -1,    -1,   284,\n+     285,   286,    -1,    -1,   289,   290,   291,   292,   293,   294,\n+     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,\n+     305,   306,   307,    -1,   309,   310,   311,   312,   313,   314,\n+     315,   316,   317,   318,    -1,   320,   321,   322,   323,   324,\n+     325,    -1,   327,   328,   329,   330,   331,   332,   333,   334,\n+      -1,   336,   337,   338,   339,   340,   341,   342,   343,   344,\n+     345,   346,   347,   348,    -1,   350,   351,   352,   353,   354,\n+     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,\n+     365,   366,   367,   368,    -1,   370,   371,   372,   373,   374,\n+     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,\n+      -1,   386,   387,   388,   389,   390,   391,   392,   393,   394,\n+     395,   396,   397,   398,   399,   400,   401,    -1,   403,   404,\n+     405,   406,   407,   408,   409,   410,   411,   412,    -1,   414,\n+     415,    -1,    -1,   418,   419,   420,   421,   422,   423,   424,\n+     425,   426,   427,   428,   429,   430,   431,    -1,    -1,   434,\n+     435,   436,   437,   438,   439,   440,   441,    -1,   443,   444,\n+     445,   446,   447,   448,   449,    -1,   451,   452,   453,   454,\n+     455,   456,   457,    -1,    -1,   460,    -1,   462,   463,   464,\n+     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,\n+     475,   476,   477,   478,   479,   480,   481,   482,   483,    -1,\n+      -1,   486,    -1,    -1,    -1,     3,     4,     5,     6,     7,\n+       8,     9,    10,   498,    -1,   500,    -1,    -1,    -1,    -1,\n+     505,   506,   507,   508,    22,    23,    24,    25,    26,    27,\n+      28,    29,    30,    31,    32,    33,    -1,    -1,    -1,    -1,\n+      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    47,\n+      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,\n+      -1,    59,    60,    61,    62,    63,    64,    65,    66,    67,\n+      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,\n+      -1,    79,    -1,    81,    82,    83,    84,    85,    86,    87,\n+      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,\n+      -1,    99,   100,   101,   102,   103,   104,   105,   106,   107,\n+     108,   109,   110,   111,   112,   113,   114,    -1,   116,   117,\n+     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,\n+      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,\n+     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,\n+     148,   149,   150,   151,   152,   153,   154,   155,   156,    -1,\n+     158,   159,   160,   161,    -1,   163,    -1,   165,   166,    -1,\n+     168,   169,   170,   171,   172,   173,    -1,   175,    -1,   177,\n+     178,   179,    -1,   181,   182,   183,   184,   185,   186,   187,\n+     188,   189,   190,   191,   192,    -1,   194,   195,   196,   197,\n+     198,   199,   200,    -1,   202,   203,   204,   205,   206,   207,\n+     208,   209,   210,   211,    -1,   213,    -1,   215,   216,   217,\n+     218,   219,   220,   221,   222,   223,   224,   225,    -1,    -1,\n+     228,   229,   230,   231,    -1,   233,   234,   235,   236,   237,\n+     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,\n+     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,\n+     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,\n+     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,\n+     278,    -1,   280,   281,    -1,    -1,   284,   285,   286,    -1,\n+      -1,   289,   290,   291,   292,   293,   294,   295,   296,   297,\n+     298,   299,   300,   301,   302,   303,   304,    -1,    -1,    -1,\n+      -1,   309,   310,   311,   312,   313,   314,   315,   316,   317,\n+     318,    -1,   320,   321,   322,   323,   324,   325,    -1,   327,\n+     328,   329,   330,   331,   332,   333,   334,    -1,   336,   337,\n+     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,\n+     348,    -1,   350,   351,   352,   353,   354,   355,   356,   357,\n+     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,\n+      -1,    -1,   370,   371,   372,   373,   374,   375,   376,   377,\n+     378,   379,   380,   381,   382,   383,   384,    -1,   386,   387,\n+     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,\n+     398,   399,   400,   401,    -1,   403,   404,    -1,   406,   407,\n+     408,   409,   410,   411,   412,    -1,   414,   415,    -1,    -1,\n+     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,\n+     428,   429,   430,   431,    -1,    -1,   434,   435,   436,    -1,\n+     438,   439,   440,   441,    -1,   443,   444,   445,   446,   447,\n+     448,   449,    -1,   451,   452,   453,   454,   455,   456,   457,\n+      -1,    -1,   460,    -1,    -1,   463,   464,   465,   466,   467,\n+     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,\n+     478,   479,   480,   481,   482,   483,   484,    -1,    -1,    -1,\n+      -1,    -1,    -1,   491,   492,   493,    -1,    -1,    -1,    -1,\n+     498,    -1,   500,    -1,    -1,    -1,    -1,   505,   506,   507,\n+     508,     3,     4,     5,     6,     7,     8,     9,    10,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,\n+      32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,\n+      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,\n+      52,    53,    54,    55,    56,    57,    -1,    59,    60,    61,\n+      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,\n+      -1,    73,    74,    75,    76,    77,    -1,    79,    -1,    81,\n+      82,    83,    84,    85,    86,    87,    88,    89,    90,    -1,\n+      92,    93,    94,    95,    96,    97,    -1,    99,   100,   101,\n+     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,\n+     112,   113,   114,    -1,   116,   117,   118,   119,   120,   121,\n+      -1,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,\n+     132,   133,   134,    -1,   136,   137,   138,    -1,   140,   141,\n+     142,    -1,   144,   145,   146,   147,   148,   149,   150,   151,\n+     152,   153,   154,   155,   156,    -1,   158,   159,   160,   161,\n+      -1,   163,    -1,   165,   166,    -1,   168,   169,   170,   171,\n+     172,   173,    -1,   175,    -1,   177,   178,   179,    -1,   181,\n+     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,\n+     192,    -1,   194,   195,   196,   197,   198,   199,   200,    -1,\n+     202,   203,   204,   205,   206,   207,   208,   209,   210,   211,\n+      -1,   213,    -1,   215,   216,   217,   218,   219,   220,   221,\n+     222,   223,   224,   225,    -1,    -1,   228,   229,   230,   231,\n+      -1,   233,   234,   235,   236,   237,   238,   239,   240,   241,\n+     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,\n+     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,\n+     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,\n+     272,   273,   274,   275,   276,   277,   278,    -1,   280,   281,\n+      -1,    -1,   284,   285,   286,    -1,    -1,   289,   290,   291,\n+     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,\n+     302,   303,   304,    -1,    -1,    -1,    -1,   309,   310,   311,\n+     312,   313,   314,   315,   316,   317,   318,    -1,   320,   321,\n+     322,   323,   324,   325,    -1,   327,   328,   329,   330,   331,\n+     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,\n+     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,\n+     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,\n+     362,   363,   364,   365,   366,   367,    -1,    -1,   370,   371,\n+     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,\n+     382,   383,   384,    -1,   386,   387,   388,   389,   390,   391,\n+     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,\n+      -1,   403,   404,    -1,   406,   407,   408,   409,   410,   411,\n+     412,    -1,   414,   415,    -1,    -1,   418,   419,   420,   421,\n+     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,\n+      -1,    -1,   434,   435,   436,    -1,   438,   439,   440,   441,\n+      -1,   443,   444,   445,   446,   447,   448,   449,    -1,   451,\n+     452,   453,   454,   455,   456,   457,    -1,    -1,   460,    -1,\n+      -1,   463,   464,   465,   466,   467,   468,   469,   470,   471,\n+     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,\n+     482,   483,   484,    -1,    -1,    -1,    -1,    -1,    -1,   491,\n+     492,   493,    -1,    -1,    -1,    -1,   498,    -1,   500,    -1,\n+      -1,    -1,    -1,   505,   506,   507,   508,     3,     4,     5,\n+       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,\n+      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,\n+      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,\n+      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,\n+      56,    57,    -1,    59,    60,    61,    62,    63,    64,    65,\n+      66,    67,    68,    69,    70,    71,    -1,    73,    74,    75,\n+      76,    77,    -1,    79,    -1,    81,    82,    83,    84,    85,\n+      86,    87,    88,    89,    90,    -1,    92,    93,    94,    95,\n+      96,    97,    -1,    99,   100,   101,   102,   103,   104,   105,\n+     106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,\n+     116,   117,   118,   119,   120,   121,    -1,   123,   124,   125,\n+     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,\n+     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,\n+     146,   147,   148,   149,   150,   151,   152,   153,   154,   155,\n+     156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,\n+     166,   167,   168,   169,   170,   171,   172,   173,    -1,   175,\n+      -1,   177,   178,   179,    -1,   181,   182,   183,   184,   185,\n+     186,   187,   188,   189,   190,   191,   192,    -1,   194,   195,\n+     196,   197,   198,   199,   200,    -1,   202,   203,   204,   205,\n+     206,   207,   208,   209,   210,   211,    -1,   213,    -1,   215,\n+     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,\n+      -1,    -1,   228,   229,   230,   231,    -1,   233,   234,   235,\n+     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,\n+     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,\n+     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,\n+     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,\n+     276,   277,   278,    -1,   280,   281,    -1,    -1,   284,   285,\n+     286,    -1,    -1,   289,   290,   291,   292,   293,   294,   295,\n+     296,   297,   298,   299,   300,   301,   302,   303,   304,    -1,\n+      -1,    -1,    -1,   309,   310,   311,   312,   313,   314,   315,\n+     316,   317,   318,    -1,   320,   321,   322,   323,   324,   325,\n+      -1,   327,   328,   329,   330,   331,   332,   333,   334,    -1,\n+     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,\n+     346,   347,   348,    -1,   350,   351,   352,   353,   354,   355,\n+     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,\n+     366,   367,    -1,    -1,   370,   371,   372,   373,   374,   375,\n+     376,   377,   378,   379,   380,   381,   382,   383,   384,    -1,\n+     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,\n+     396,   397,   398,   399,   400,   401,    -1,   403,   404,    -1,\n+     406,   407,   408,   409,   410,   411,   412,    -1,   414,   415,\n+      -1,    -1,   418,   419,   420,   421,   422,   423,   424,   425,\n+     426,   427,   428,   429,   430,   431,    -1,    -1,   434,   435,\n+     436,    -1,   438,   439,   440,   441,    -1,   443,   444,   445,\n+     446,   447,   448,   449,    -1,   451,   452,   453,   454,   455,\n+     456,   457,    -1,    -1,   460,    -1,    -1,   463,   464,   465,\n+     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,\n+     476,   477,   478,   479,   480,   481,   482,   483,   484,    -1,\n+      -1,    -1,    -1,    -1,    -1,   491,   492,   493,    -1,    -1,\n+      -1,    -1,   498,    -1,   500,    -1,    -1,    -1,    -1,   505,\n+     506,   507,   508,     3,     4,     5,     6,     7,     8,     9,\n+      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,\n+      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,\n+      -1,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,\n+      50,    51,    52,    53,    54,    55,    56,    57,    -1,    59,\n+      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,\n+      70,    71,    -1,    73,    74,    75,    76,    77,    -1,    79,\n+      -1,    81,    82,    83,    84,    85,    86,    87,    88,    89,\n+      90,    -1,    92,    93,    94,    95,    96,    97,    -1,    99,\n+     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,\n+     110,   111,   112,   113,   114,    -1,   116,   117,   118,   119,\n+     120,   121,    -1,   123,   124,   125,   126,   127,    -1,    -1,\n+     130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,\n+     140,   141,   142,    -1,   144,   145,   146,   147,   148,   149,\n+     150,   151,   152,   153,   154,   155,   156,    -1,   158,   159,\n+     160,   161,    -1,   163,    -1,   165,   166,    -1,   168,   169,\n+     170,   171,   172,   173,    -1,   175,    -1,   177,   178,   179,\n+      -1,   181,   182,   183,   184,   185,   186,   187,   188,   189,\n+     190,   191,   192,    -1,   194,   195,   196,   197,   198,   199,\n+     200,    -1,   202,   203,   204,   205,   206,   207,   208,   209,\n+     210,   211,    -1,   213,    -1,   215,   216,   217,   218,   219,\n+     220,   221,   222,   223,   224,   225,    -1,    -1,   228,   229,\n+     230,   231,    -1,   233,   234,   235,   236,   237,   238,   239,\n+     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,\n+     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,\n+     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,\n+     270,   271,   272,   273,   274,   275,   276,   277,   278,    -1,\n+     280,   281,    -1,    -1,   284,   285,   286,    -1,    -1,   289,\n+     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,\n+     300,   301,   302,   303,   304,    -1,    -1,    -1,    -1,   309,\n+     310,   311,   312,   313,   314,   315,   316,   317,   318,    -1,\n+     320,   321,   322,   323,   324,   325,    -1,   327,   328,   329,\n+     330,   331,   332,   333,   334,    -1,   336,   337,   338,   339,\n+     340,   341,   342,   343,   344,   345,   346,   347,   348,    -1,\n+     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,\n+     360,   361,   362,   363,   364,   365,   366,   367,    -1,    -1,\n+     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,\n+     380,   381,   382,   383,   384,    -1,   386,   387,   388,   389,\n+     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,\n+     400,   401,    -1,   403,   404,    -1,   406,   407,   408,   409,\n+     410,   411,   412,    -1,   414,   415,    -1,    -1,   418,   419,\n+     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,\n+     430,   431,    -1,    -1,   434,   435,   436,    -1,   438,   439,\n+     440,   441,    -1,   443,   444,   445,   446,   447,   448,   449,\n+      -1,   451,   452,   453,   454,   455,   456,   457,    -1,    -1,\n+     460,    -1,    -1,   463,   464,   465,   466,   467,   468,   469,\n+     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,\n+     480,   481,   482,   483,   484,    -1,    -1,    -1,    -1,    -1,\n+      -1,   491,   492,   493,    -1,    -1,    -1,    -1,   498,    -1,\n+     500,   501,    -1,    -1,    -1,   505,   506,   507,   508,     3,\n+       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,\n+      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,\n+      -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,\n+      44,    -1,    46,    47,    48,    49,    50,    51,    52,    53,\n+      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,\n+      64,    65,    66,    67,    68,    69,    70,    71,    -1,    73,\n+      74,    75,    76,    77,    -1,    79,    -1,    81,    82,    83,\n+      84,    85,    86,    87,    88,    89,    90,    -1,    92,    93,\n+      94,    95,    96,    97,    -1,    99,   100,   101,   102,   103,\n+     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,\n+     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,\n+     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,\n+     134,    -1,   136,   137,   138,    -1,   140,   141,   142,    -1,\n+     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,\n+     154,   155,   156,    -1,   158,   159,   160,   161,    -1,   163,\n+      -1,   165,   166,    -1,   168,   169,   170,   171,   172,   173,\n+      -1,   175,    -1,   177,   178,   179,    -1,   181,   182,   183,\n+     184,   185,   186,   187,   188,   189,   190,   191,   192,    -1,\n+     194,   195,   196,   197,   198,   199,   200,    -1,   202,   203,\n+     204,   205,   206,   207,   208,   209,   210,   211,    -1,   213,\n+      -1,   215,   216,   217,   218,   219,   220,   221,   222,   223,\n+     224,   225,    -1,    -1,   228,   229,   230,   231,    -1,   233,\n+     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,\n+     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,\n+     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,\n+     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,\n+     274,   275,   276,   277,   278,    -1,   280,   281,    -1,    -1,\n+     284,   285,   286,    -1,    -1,   289,   290,   291,   292,   293,\n+     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,\n+     304,    -1,    -1,    -1,    -1,   309,   310,   311,   312,   313,\n+     314,   315,   316,   317,   318,    -1,   320,   321,   322,   323,\n+     324,   325,    -1,   327,   328,   329,   330,   331,   332,   333,\n+     334,    -1,   336,   337,   338,   339,   340,   341,   342,   343,\n+     344,   345,   346,   347,   348,    -1,   350,   351,   352,   353,\n+     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,\n+     364,   365,   366,   367,    -1,    -1,   370,   371,   372,   373,\n+     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,\n+     384,    -1,   386,   387,   388,   389,   390,   391,   392,   393,\n+     394,   395,   396,   397,   398,   399,   400,   401,    -1,   403,\n+     404,   405,   406,   407,   408,   409,   410,   411,   412,    -1,\n+     414,   415,    -1,    -1,   418,   419,   420,   421,   422,   423,\n+     424,   425,   426,   427,   428,   429,   430,   431,    -1,    -1,\n+     434,   435,   436,    -1,   438,   439,   440,   441,    -1,   443,\n+     444,   445,   446,   447,   448,   449,    -1,   451,   452,   453,\n+     454,   455,   456,   457,    -1,    -1,   460,    -1,    -1,   463,\n+     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,\n+     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,\n+     484,    -1,    -1,    -1,    -1,    -1,    -1,   491,   492,   493,\n+      -1,    -1,    -1,    -1,   498,    -1,   500,    -1,    -1,    -1,\n+      -1,   505,   506,   507,   508,     3,     4,     5,     6,     7,\n+       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,\n+      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,\n+      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    47,\n+      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,\n+      -1,    59,    60,    61,    62,    63,    64,    65,    66,    67,\n+      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,\n+      -1,    79,    -1,    81,    82,    83,    84,    85,    86,    87,\n+      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,\n+      -1,    99,   100,   101,   102,   103,   104,   105,   106,   107,\n+     108,   109,   110,   111,   112,   113,   114,    -1,   116,   117,\n+     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,\n+      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,\n+     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,\n+     148,   149,   150,   151,   152,   153,   154,   155,   156,    -1,\n+     158,   159,   160,   161,    -1,   163,    -1,   165,   166,    -1,\n+     168,   169,   170,   171,   172,   173,    -1,   175,    -1,   177,\n+     178,   179,    -1,   181,   182,   183,   184,   185,   186,   187,\n+     188,   189,   190,   191,   192,    -1,   194,   195,   196,   197,\n+     198,   199,   200,    -1,   202,   203,   204,   205,   206,   207,\n+     208,   209,   210,   211,    -1,   213,    -1,   215,   216,   217,\n+     218,   219,   220,   221,   222,   223,   224,   225,    -1,    -1,\n+     228,   229,   230,   231,    -1,   233,   234,   235,   236,   237,\n+     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,\n+     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,\n+     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,\n+     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,\n+     278,    -1,   280,   281,    -1,    -1,   284,   285,   286,    -1,\n+      -1,   289,   290,   291,   292,   293,   294,   295,   296,   297,\n+     298,   299,   300,   301,   302,   303,   304,    -1,    -1,    -1,\n+      -1,   309,   310,   311,   312,   313,   314,   315,   316,   317,\n+     318,    -1,   320,   321,   322,   323,   324,   325,    -1,   327,\n+     328,   329,   330,   331,   332,   333,   334,    -1,   336,   337,\n+     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,\n+     348,    -1,   350,   351,   352,   353,   354,   355,   356,   357,\n+     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,\n+      -1,    -1,   370,   371,   372,   373,   374,   375,   376,   377,\n+     378,   379,   380,   381,   382,   383,   384,    -1,   386,   387,\n+     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,\n+     398,   399,   400,   401,    -1,   403,   404,    -1,   406,   407,\n+     408,   409,   410,   411,   412,    -1,   414,   415,    -1,    -1,\n+     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,\n+     428,   429,   430,   431,    -1,    -1,   434,   435,   436,    -1,\n+     438,   439,   440,   441,    -1,   443,   444,   445,   446,   447,\n+     448,   449,    -1,   451,   452,   453,   454,   455,   456,   457,\n+      -1,   459,   460,    -1,    -1,   463,   464,   465,   466,   467,\n+     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,\n+     478,   479,   480,   481,   482,   483,   484,    -1,    -1,    -1,\n+      -1,    -1,    -1,   491,   492,   493,    -1,    -1,    -1,    -1,\n+     498,    -1,   500,    -1,    -1,    -1,    -1,   505,   506,   507,\n+     508,     3,     4,     5,     6,     7,     8,     9,    10,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,\n+      32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,\n+      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,\n+      52,    53,    54,    55,    56,    57,    -1,    59,    60,    61,\n+      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,\n+      -1,    73,    74,    75,    76,    77,    -1,    79,    -1,    81,\n+      82,    83,    84,    85,    86,    87,    88,    89,    90,    -1,\n+      92,    93,    94,    95,    96,    97,    -1,    99,   100,   101,\n+     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,\n+     112,   113,   114,    -1,   116,   117,   118,   119,   120,   121,\n+      -1,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,\n+     132,   133,   134,    -1,   136,   137,   138,    -1,   140,   141,\n+     142,    -1,   144,   145,   146,   147,   148,   149,   150,   151,\n+     152,   153,   154,   155,   156,    -1,   158,   159,   160,   161,\n+      -1,   163,    -1,   165,   166,    -1,   168,   169,   170,   171,\n+     172,   173,    -1,   175,    -1,   177,   178,   179,    -1,   181,\n+     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,\n+     192,    -1,   194,   195,   196,   197,   198,   199,   200,    -1,\n+     202,   203,   204,   205,   206,   207,   208,   209,   210,   211,\n+      -1,   213,    -1,   215,   216,   217,   218,   219,   220,   221,\n+     222,   223,   224,   225,    -1,    -1,   228,   229,   230,   231,\n+      -1,   233,   234,   235,   236,   237,   238,   239,   240,   241,\n+     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,\n+     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,\n+     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,\n+     272,   273,   274,   275,   276,   277,   278,    -1,   280,   281,\n+      -1,    -1,   284,   285,   286,    -1,    -1,   289,   290,   291,\n+     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,\n+     302,   303,   304,    -1,    -1,    -1,    -1,   309,   310,   311,\n+     312,   313,   314,   315,   316,   317,   318,    -1,   320,   321,\n+     322,   323,   324,   325,    -1,   327,   328,   329,   330,   331,\n+     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,\n+     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,\n+     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,\n+     362,   363,   364,   365,   366,   367,    -1,    -1,   370,   371,\n+     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,\n+     382,   383,   384,    -1,   386,   387,   388,   389,   390,   391,\n+     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,\n+      -1,   403,   404,    -1,   406,   407,   408,   409,   410,   411,\n+     412,    -1,   414,   415,    -1,    -1,   418,   419,   420,   421,\n+     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,\n+      -1,    -1,   434,   435,   436,    -1,   438,   439,   440,   441,\n+      -1,   443,   444,   445,   446,   447,   448,   449,    -1,   451,\n+     452,   453,   454,   455,   456,   457,    -1,    -1,   460,    -1,\n+      -1,   463,   464,   465,   466,   467,   468,   469,   470,   471,\n+     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,\n+     482,   483,   484,    -1,    -1,    -1,    -1,    -1,    -1,   491,\n+     492,   493,    -1,    -1,    -1,    -1,   498,    -1,   500,    -1,\n+      -1,    -1,    -1,   505,   506,   507,   508,     3,     4,     5,\n+       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,\n+      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,\n+      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,\n+      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,\n+      56,    57,    -1,    59,    60,    61,    62,    63,    64,    65,\n+      66,    67,    68,    69,    70,    71,    -1,    73,    74,    75,\n+      76,    77,    -1,    79,    -1,    81,    82,    83,    84,    85,\n+      86,    87,    88,    89,    90,    -1,    92,    93,    94,    95,\n+      96,    97,    -1,    99,   100,   101,   102,   103,   104,   105,\n+     106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,\n+     116,   117,   118,   119,   120,   121,    -1,   123,   124,   125,\n+     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,\n+     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,\n+     146,   147,   148,   149,   150,   151,   152,   153,   154,   155,\n+     156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,\n+     166,    -1,   168,   169,   170,   171,   172,   173,    -1,   175,\n+      -1,   177,   178,   179,    -1,   181,   182,   183,   184,   185,\n+     186,   187,   188,   189,   190,   191,   192,    -1,   194,   195,\n+     196,   197,   198,   199,   200,    -1,   202,   203,   204,   205,\n+     206,   207,   208,   209,   210,   211,    -1,   213,    -1,   215,\n+     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,\n+      -1,    -1,   228,   229,   230,   231,    -1,   233,   234,   235,\n+     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,\n+     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,\n+     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,\n+     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,\n+     276,   277,   278,    -1,   280,   281,    -1,    -1,   284,   285,\n+     286,    -1,    -1,   289,   290,   291,   292,   293,   294,   295,\n+     296,   297,   298,   299,   300,   301,   302,   303,   304,    -1,\n+      -1,    -1,    -1,   309,   310,   311,   312,   313,   314,   315,\n+     316,   317,   318,    -1,   320,   321,   322,   323,   324,   325,\n+      -1,   327,   328,   329,   330,   331,   332,   333,   334,    -1,\n+     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,\n+     346,   347,   348,    -1,   350,   351,   352,   353,   354,   355,\n+     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,\n+     366,   367,    -1,    -1,   370,   371,   372,   373,   374,   375,\n+     376,   377,   378,   379,   380,   381,   382,   383,   384,    -1,\n+     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,\n+     396,   397,   398,   399,   400,   401,    -1,   403,   404,   405,\n+     406,   407,   408,   409,   410,   411,   412,    -1,   414,   415,\n+      -1,    -1,   418,   419,   420,   421,   422,   423,   424,   425,\n+     426,   427,   428,   429,   430,   431,    -1,    -1,   434,   435,\n+     436,    -1,   438,   439,   440,   441,    -1,   443,   444,   445,\n+     446,   447,   448,   449,    -1,   451,   452,   453,   454,   455,\n+     456,   457,    -1,    -1,   460,    -1,    -1,   463,   464,   465,\n+     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,\n+     476,   477,   478,   479,   480,   481,   482,   483,   484,    -1,\n+      -1,    -1,    -1,    -1,    -1,   491,   492,   493,    -1,    -1,\n+      -1,    -1,   498,    -1,   500,    -1,    -1,    -1,    -1,   505,\n+     506,   507,   508,     3,     4,     5,     6,     7,     8,     9,\n+      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,\n+      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,\n+      -1,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,\n+      50,    51,    52,    53,    54,    55,    56,    57,    -1,    59,\n+      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,\n+      70,    71,    -1,    73,    74,    75,    76,    77,    -1,    79,\n+      -1,    81,    82,    83,    84,    85,    86,    87,    88,    89,\n+      90,    -1,    92,    93,    94,    95,    96,    97,    -1,    99,\n+     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,\n+     110,   111,   112,   113,   114,    -1,   116,   117,   118,   119,\n+     120,   121,    -1,   123,   124,   125,   126,   127,    -1,    -1,\n+     130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,\n+     140,   141,   142,    -1,   144,   145,   146,   147,   148,   149,\n+     150,   151,   152,   153,   154,   155,   156,    -1,   158,   159,\n+     160,   161,    -1,   163,    -1,   165,   166,    -1,   168,   169,\n+     170,   171,   172,   173,    -1,   175,    -1,   177,   178,   179,\n+      -1,   181,   182,   183,   184,   185,   186,   187,   188,   189,\n+     190,   191,   192,    -1,   194,   195,   196,   197,   198,   199,\n+     200,    -1,   202,   203,   204,   205,   206,   207,   208,   209,\n+     210,   211,    -1,   213,    -1,   215,   216,   217,   218,   219,\n+     220,   221,   222,   223,   224,   225,    -1,    -1,   228,   229,\n+     230,   231,    -1,   233,   234,   235,   236,   237,   238,   239,\n+     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,\n+     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,\n+     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,\n+     270,   271,   272,   273,   274,   275,   276,   277,   278,    -1,\n+     280,   281,    -1,    -1,   284,   285,   286,    -1,    -1,   289,\n+     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,\n+     300,   301,   302,   303,   304,    -1,    -1,    -1,    -1,   309,\n+     310,   311,   312,   313,   314,   315,   316,   317,   318,    -1,\n+     320,   321,   322,   323,   324,   325,    -1,   327,   328,   329,\n+     330,   331,   332,   333,   334,    -1,   336,   337,   338,   339,\n+     340,   341,   342,   343,   344,   345,   346,   347,   348,    -1,\n+     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,\n+     360,   361,   362,   363,   364,   365,   366,   367,    -1,    -1,\n+     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,\n+     380,   381,   382,   383,   384,    -1,   386,   387,   388,   389,\n+     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,\n+     400,   401,    -1,   403,   404,   405,   406,   407,   408,   409,\n+     410,   411,   412,    -1,   414,   415,    -1,    -1,   418,   419,\n+     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,\n+     430,   431,    -1,    -1,   434,   435,   436,    -1,   438,   439,\n+     440,   441,    -1,   443,   444,   445,   446,   447,   448,   449,\n+      -1,   451,   452,   453,   454,   455,   456,   457,    -1,    -1,\n+     460,    -1,    -1,   463,   464,   465,   466,   467,   468,   469,\n+     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,\n+     480,   481,   482,   483,   484,    -1,    -1,    -1,    -1,    -1,\n+      -1,   491,   492,   493,    -1,    -1,    -1,    -1,   498,    -1,\n+     500,    -1,    -1,    -1,    -1,   505,   506,   507,   508,     3,\n+       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,\n+      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,\n+      -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,\n+      44,    -1,    46,    47,    48,    49,    50,    51,    52,    53,\n+      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,\n+      64,    65,    66,    67,    68,    69,    70,    71,    -1,    73,\n+      74,    75,    76,    77,    -1,    79,    -1,    81,    82,    83,\n+      84,    85,    86,    87,    88,    89,    90,    -1,    92,    93,\n+      94,    95,    96,    97,    -1,    99,   100,   101,   102,   103,\n+     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,\n+     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,\n+     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,\n+     134,    -1,   136,   137,   138,    -1,   140,   141,   142,    -1,\n+     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,\n+     154,   155,   156,    -1,   158,   159,   160,   161,    -1,   163,\n+      -1,   165,   166,    -1,   168,   169,   170,   171,   172,   173,\n+      -1,   175,    -1,   177,   178,   179,    -1,   181,   182,   183,\n+     184,   185,   186,   187,   188,   189,   190,   191,   192,    -1,\n+     194,   195,   196,   197,   198,   199,   200,    -1,   202,   203,\n+     204,   205,   206,   207,   208,   209,   210,   211,    -1,   213,\n+      -1,   215,   216,   217,   218,   219,   220,   221,   222,   223,\n+     224,   225,    -1,    -1,   228,   229,   230,   231,    -1,   233,\n+     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,\n+     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,\n+     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,\n+     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,\n+     274,   275,   276,   277,   278,    -1,   280,   281,    -1,    -1,\n+     284,   285,   286,    -1,    -1,   289,   290,   291,   292,   293,\n+     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,\n+     304,    -1,    -1,    -1,    -1,   309,   310,   311,   312,   313,\n+     314,   315,   316,   317,   318,    -1,   320,   321,   322,   323,\n+     324,   325,    -1,   327,   328,   329,   330,   331,   332,   333,\n+     334,    -1,   336,   337,   338,   339,   340,   341,   342,   343,\n+     344,   345,   346,   347,   348,    -1,   350,   351,   352,   353,\n+     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,\n+     364,   365,   366,   367,    -1,    -1,   370,   371,   372,   373,\n+     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,\n+     384,    -1,   386,   387,   388,   389,   390,   391,   392,   393,\n+     394,   395,   396,   397,   398,   399,   400,   401,    -1,   403,\n+     404,    -1,   406,   407,   408,   409,   410,   411,   412,    -1,\n+     414,   415,    -1,    -1,   418,   419,   420,   421,   422,   423,\n+     424,   425,   426,   427,   428,   429,   430,   431,    -1,    -1,\n+     434,   435,   436,    -1,   438,   439,   440,   441,    -1,   443,\n+     444,   445,   446,   447,   448,   449,    -1,   451,   452,   453,\n+     454,   455,   456,   457,    -1,    -1,   460,    -1,    -1,   463,\n+     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,\n+     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,\n+     484,    -1,    -1,    -1,    -1,    -1,    -1,   491,   492,   493,\n+      -1,    -1,    -1,    -1,   498,    -1,   500,    -1,    -1,    -1,\n+      -1,   505,   506,   507,   508,     3,     4,     5,     6,     7,\n+       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,\n+      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,\n+      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    47,\n+      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,\n+      -1,    59,    60,    61,    62,    63,    64,    65,    66,    67,\n+      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,\n+      -1,    79,    -1,    81,    82,    83,    84,    85,    86,    87,\n+      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,\n+      -1,    99,   100,   101,   102,   103,   104,   105,   106,   107,\n+     108,   109,   110,   111,   112,   113,   114,    -1,   116,   117,\n+     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,\n+      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,\n+     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,\n+     148,   149,   150,   151,   152,   153,   154,   155,   156,    -1,\n+     158,   159,   160,   161,    -1,   163,    -1,   165,   166,    -1,\n+     168,   169,   170,   171,   172,   173,    -1,   175,    -1,   177,\n+     178,   179,    -1,   181,   182,   183,   184,   185,   186,   187,\n+     188,   189,   190,   191,   192,    -1,   194,   195,   196,   197,\n+     198,   199,   200,    -1,   202,   203,   204,   205,   206,   207,\n+     208,   209,   210,   211,    -1,   213,    -1,   215,   216,   217,\n+     218,   219,   220,   221,   222,   223,   224,   225,    -1,    -1,\n+     228,   229,   230,   231,    -1,   233,   234,   235,   236,   237,\n+     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,\n+     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,\n+     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,\n+     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,\n+     278,    -1,   280,   281,    -1,    -1,   284,   285,   286,    -1,\n+      -1,   289,   290,   291,   292,   293,   294,   295,   296,   297,\n+     298,   299,   300,   301,   302,   303,   304,    -1,    -1,    -1,\n+      -1,   309,   310,   311,   312,   313,   314,   315,   316,   317,\n+     318,    -1,   320,   321,   322,   323,   324,   325,    -1,   327,\n+     328,   329,   330,   331,   332,   333,   334,    -1,   336,   337,\n+     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,\n+     348,    -1,   350,   351,   352,   353,   354,   355,   356,   357,\n+     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,\n+      -1,    -1,   370,   371,   372,   373,   374,   375,   376,   377,\n+     378,   379,   380,   381,   382,   383,   384,    -1,   386,   387,\n+     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,\n+     398,   399,   400,   401,    -1,   403,   404,    -1,   406,   407,\n+     408,   409,   410,   411,   412,    -1,   414,   415,    -1,    -1,\n+     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,\n+     428,   429,   430,   431,    -1,    -1,   434,   435,   436,    -1,\n+     438,   439,   440,   441,    -1,   443,   444,   445,   446,   447,\n+     448,   449,    -1,   451,   452,   453,   454,   455,   456,   457,\n+      -1,    -1,   460,    -1,    -1,   463,   464,   465,   466,   467,\n+     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,\n+     478,   479,   480,   481,   482,   483,   484,    -1,    -1,    -1,\n+      -1,    -1,    -1,   491,   492,   493,    -1,    -1,    -1,    -1,\n+     498,    -1,   500,    -1,    -1,    -1,    -1,   505,   506,   507,\n+     508,     3,     4,     5,     6,     7,     8,     9,    10,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,\n+      32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,\n+      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,\n+      52,    53,    54,    55,    56,    57,    -1,    59,    60,    61,\n+      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,\n+      -1,    73,    74,    75,    76,    77,    -1,    79,    -1,    81,\n+      82,    83,    84,    85,    86,    87,    88,    89,    90,    -1,\n+      92,    93,    94,    95,    96,    97,    -1,    99,   100,   101,\n+     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,\n+     112,   113,   114,    -1,   116,   117,   118,   119,   120,   121,\n+      -1,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,\n+     132,   133,   134,    -1,   136,   137,   138,    -1,   140,   141,\n+     142,    -1,   144,   145,   146,   147,   148,   149,   150,   151,\n+     152,   153,   154,   155,   156,    -1,   158,   159,   160,   161,\n+      -1,   163,    -1,   165,   166,    -1,   168,   169,   170,   171,\n+     172,   173,    -1,   175,    -1,   177,   178,   179,    -1,   181,\n+     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,\n+     192,    -1,   194,   195,   196,   197,   198,   199,   200,    -1,\n+     202,   203,   204,   205,   206,   207,   208,   209,   210,   211,\n+      -1,   213,    -1,   215,   216,   217,   218,   219,   220,   221,\n+     222,   223,   224,   225,    -1,    -1,   228,   229,   230,   231,\n+      -1,   233,   234,   235,   236,   237,   238,   239,   240,   241,\n+     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,\n+     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,\n+     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,\n+     272,   273,   274,   275,   276,   277,   278,    -1,   280,   281,\n+      -1,    -1,   284,   285,   286,    -1,    -1,   289,   290,   291,\n+     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,\n+     302,   303,   304,    -1,    -1,    -1,    -1,   309,   310,   311,\n+     312,   313,   314,   315,   316,   317,   318,    -1,   320,   321,\n+     322,   323,   324,   325,    -1,   327,   328,   329,   330,   331,\n+     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,\n+     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,\n+     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,\n+     362,   363,   364,   365,   366,   367,    -1,    -1,   370,   371,\n+     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,\n+     382,   383,   384,    -1,   386,   387,   388,   389,   390,   391,\n+     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,\n+      -1,   403,   404,    -1,   406,   407,   408,   409,   410,   411,\n+     412,    -1,   414,   415,    -1,    -1,   418,   419,   420,   421,\n+     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,\n+      -1,    -1,   434,   435,   436,    -1,   438,   439,   440,   441,\n+      -1,   443,   444,   445,   446,   447,   448,   449,    -1,   451,\n+     452,   453,   454,   455,   456,   457,    -1,    -1,   460,    -1,\n+      -1,   463,   464,   465,   466,   467,   468,   469,   470,   471,\n+     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,\n+     482,   483,   484,    -1,    -1,    -1,    -1,    -1,    -1,   491,\n+     492,   493,    -1,    -1,    -1,    -1,   498,    -1,   500,    -1,\n+      -1,    -1,    -1,   505,   506,   507,   508,     3,     4,     5,\n+       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,\n+      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,\n+      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,\n+      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,\n+      56,    57,    -1,    59,    60,    61,    62,    63,    64,    65,\n+      66,    67,    68,    69,    70,    71,    -1,    73,    74,    75,\n+      76,    77,    -1,    79,    -1,    81,    82,    83,    84,    85,\n+      86,    87,    88,    89,    90,    -1,    92,    93,    94,    95,\n+      96,    97,    -1,    99,   100,   101,   102,   103,   104,   105,\n+     106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,\n+     116,   117,   118,   119,   120,   121,    -1,   123,   124,   125,\n+     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,\n+     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,\n+     146,   147,   148,   149,   150,   151,   152,   153,   154,   155,\n+     156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,\n+     166,    -1,   168,   169,   170,   171,   172,   173,    -1,   175,\n+      -1,   177,   178,   179,    -1,   181,   182,   183,   184,   185,\n+     186,   187,   188,   189,   190,   191,   192,    -1,   194,   195,\n+     196,   197,   198,   199,   200,    -1,   202,   203,   204,   205,\n+     206,   207,   208,   209,   210,   211,    -1,   213,    -1,   215,\n+     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,\n+      -1,    -1,   228,   229,   230,   231,    -1,   233,   234,   235,\n+     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,\n+     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,\n+     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,\n+     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,\n+     276,   277,   278,    -1,   280,   281,    -1,    -1,   284,   285,\n+     286,    -1,    -1,   289,   290,   291,   292,   293,   294,   295,\n+     296,   297,   298,   299,   300,   301,   302,   303,   304,    -1,\n+      -1,    -1,    -1,   309,   310,   311,   312,   313,   314,   315,\n+     316,   317,   318,    -1,   320,   321,   322,   323,   324,   325,\n+      -1,   327,   328,   329,   330,   331,   332,   333,   334,    -1,\n+     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,\n+     346,   347,   348,    -1,   350,   351,   352,   353,   354,   355,\n+     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,\n+     366,   367,    -1,    -1,   370,   371,   372,   373,   374,   375,\n+     376,   377,   378,   379,   380,   381,   382,   383,   384,    -1,\n+     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,\n+     396,   397,   398,   399,   400,   401,    -1,   403,   404,    -1,\n+     406,   407,   408,   409,   410,   411,   412,    -1,   414,   415,\n+      -1,    -1,   418,   419,   420,   421,   422,   423,   424,   425,\n+     426,   427,   428,   429,   430,   431,    -1,    -1,   434,   435,\n+     436,    -1,   438,   439,   440,   441,    -1,   443,   444,   445,\n+     446,   447,   448,   449,    -1,   451,   452,   453,   454,   455,\n+     456,   457,    -1,    -1,   460,    -1,    -1,   463,   464,   465,\n+     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,\n+     476,   477,   478,   479,   480,   481,   482,   483,   484,    -1,\n+      -1,    -1,    -1,    -1,    -1,   491,   492,   493,    -1,    -1,\n+      -1,    -1,   498,    -1,   500,    -1,    -1,    -1,    -1,   505,\n+     506,   507,   508,     3,     4,     5,     6,     7,     8,     9,\n+      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,\n+      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,\n+      -1,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,\n+      50,    51,    52,    53,    54,    55,    56,    57,    -1,    59,\n+      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,\n+      70,    71,    -1,    73,    74,    75,    76,    77,    -1,    79,\n+      -1,    81,    82,    83,    84,    85,    86,    87,    88,    89,\n+      90,    -1,    92,    93,    94,    95,    96,    97,    -1,    99,\n+     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,\n+     110,   111,   112,   113,   114,    -1,   116,   117,   118,   119,\n+     120,   121,    -1,   123,   124,   125,   126,   127,    -1,    -1,\n+     130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,\n+     140,   141,   142,    -1,   144,   145,   146,   147,   148,   149,\n+     150,   151,   152,   153,   154,   155,   156,    -1,   158,   159,\n+     160,   161,    -1,   163,    -1,   165,   166,    -1,   168,   169,\n+     170,   171,   172,   173,    -1,   175,    -1,   177,   178,   179,\n+      -1,   181,   182,   183,   184,   185,   186,   187,   188,   189,\n+     190,   191,   192,    -1,   194,   195,   196,   197,   198,   199,\n+     200,    -1,   202,   203,   204,   205,   206,   207,   208,   209,\n+     210,   211,    -1,   213,    -1,   215,   216,   217,   218,   219,\n+     220,   221,   222,   223,   224,   225,    -1,    -1,   228,   229,\n+     230,   231,    -1,   233,   234,   235,   236,   237,   238,   239,\n+     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,\n+     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,\n+     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,\n+     270,   271,   272,   273,   274,   275,   276,   277,   278,    -1,\n+     280,   281,    -1,    -1,   284,   285,   286,    -1,    -1,   289,\n+     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,\n+     300,   301,   302,   303,   304,    -1,    -1,    -1,    -1,   309,\n+     310,   311,   312,   313,   314,   315,   316,   317,   318,    -1,\n+     320,   321,   322,   323,   324,   325,    -1,   327,   328,   329,\n+     330,   331,   332,   333,   334,    -1,   336,   337,   338,   339,\n+     340,   341,   342,   343,   344,   345,   346,   347,   348,    -1,\n+     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,\n+     360,   361,   362,   363,   364,   365,   366,   367,    -1,    -1,\n+     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,\n+     380,   381,   382,   383,   384,    -1,   386,   387,   388,   389,\n+     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,\n+     400,   401,    -1,   403,   404,    -1,   406,   407,   408,   409,\n+     410,   411,   412,    -1,   414,   415,    -1,    -1,   418,   419,\n+     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,\n+     430,   431,    -1,    -1,   434,   435,   436,    -1,   438,   439,\n+     440,   441,    -1,   443,   444,   445,   446,   447,   448,   449,\n+      -1,   451,   452,   453,   454,   455,   456,   457,    -1,    -1,\n+     460,    -1,    -1,   463,   464,   465,   466,   467,   468,   469,\n+     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,\n+     480,   481,   482,   483,   484,    -1,    -1,    -1,    -1,    -1,\n+      -1,   491,   492,   493,    -1,    -1,    -1,    -1,   498,    -1,\n+     500,    -1,    -1,    -1,    -1,   505,   506,   507,   508,     3,\n+       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,\n+      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,\n+      -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,\n+      44,    -1,    46,    47,    48,    49,    50,    51,    52,    53,\n+      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,\n+      64,    65,    66,    67,    68,    69,    70,    71,    -1,    73,\n+      74,    75,    76,    77,    -1,    79,    -1,    81,    82,    83,\n+      84,    85,    86,    87,    88,    89,    90,    -1,    92,    93,\n+      94,    95,    96,    97,    -1,    99,   100,   101,   102,   103,\n+     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,\n+     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,\n+     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,\n+     134,    -1,   136,   137,   138,    -1,   140,   141,   142,    -1,\n+     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,\n+     154,   155,   156,    -1,   158,   159,   160,   161,    -1,   163,\n+      -1,   165,   166,    -1,   168,   169,   170,   171,   172,   173,\n+      -1,   175,    -1,   177,   178,   179,    -1,   181,   182,   183,\n+     184,   185,   186,   187,   188,   189,   190,   191,   192,    -1,\n+     194,   195,   196,   197,   198,   199,   200,    -1,   202,   203,\n+     204,   205,   206,   207,   208,   209,   210,   211,    -1,   213,\n+      -1,   215,   216,   217,   218,   219,   220,   221,   222,   223,\n+     224,   225,    -1,    -1,   228,   229,   230,   231,    -1,   233,\n+     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,\n+     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,\n+     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,\n+     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,\n+     274,   275,   276,   277,   278,    -1,   280,   281,    -1,    -1,\n+     284,   285,   286,    -1,    -1,   289,   290,   291,   292,   293,\n+     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,\n+     304,    -1,    -1,    -1,    -1,   309,   310,   311,   312,   313,\n+     314,   315,   316,   317,   318,    -1,   320,   321,   322,   323,\n+     324,   325,    -1,   327,   328,   329,   330,   331,   332,   333,\n+     334,    -1,   336,   337,   338,   339,   340,   341,   342,   343,\n+     344,   345,   346,   347,   348,    -1,   350,   351,   352,   353,\n+     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,\n+     364,   365,   366,   367,    -1,    -1,   370,   371,   372,   373,\n+     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,\n+     384,    -1,   386,   387,   388,   389,   390,   391,   392,   393,\n+     394,   395,   396,   397,   398,   399,   400,   401,    -1,   403,\n+     404,    -1,   406,   407,   408,   409,   410,   411,   412,    -1,\n+     414,   415,    -1,    -1,   418,   419,   420,   421,   422,   423,\n+     424,   425,   426,   427,   428,   429,   430,   431,    -1,    -1,\n+     434,   435,   436,    -1,   438,   439,   440,   441,    -1,   443,\n+     444,   445,   446,   447,   448,   449,    -1,   451,   452,   453,\n+     454,   455,   456,   457,    -1,    -1,   460,    -1,    -1,   463,\n+     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,\n+     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,\n+     484,    -1,    -1,    -1,    -1,    -1,    -1,   491,   492,   493,\n+      -1,    -1,    -1,    -1,   498,    -1,   500,    -1,    -1,    -1,\n+      -1,   505,   506,   507,   508,     3,     4,     5,     6,     7,\n+       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,\n+      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,\n+      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    47,\n+      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,\n+      -1,    59,    60,    61,    62,    63,    64,    65,    66,    67,\n+      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,\n+      -1,    79,    -1,    81,    82,    83,    84,    85,    86,    87,\n+      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,\n+      -1,    99,   100,   101,   102,   103,   104,   105,   106,   107,\n+     108,   109,   110,   111,   112,   113,   114,    -1,   116,   117,\n+     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,\n+      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,\n+     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,\n+     148,   149,   150,   151,   152,   153,   154,   155,   156,    -1,\n+     158,   159,   160,   161,    -1,   163,    -1,   165,   166,    -1,\n+     168,   169,   170,   171,   172,   173,    -1,   175,    -1,   177,\n+     178,   179,    -1,   181,   182,   183,   184,   185,   186,   187,\n+     188,   189,   190,   191,   192,    -1,   194,   195,   196,   197,\n+     198,   199,   200,    -1,   202,   203,   204,   205,   206,   207,\n+     208,   209,   210,   211,    -1,   213,    -1,   215,   216,   217,\n+     218,   219,   220,   221,   222,   223,   224,   225,    -1,    -1,\n+     228,   229,   230,   231,    -1,   233,   234,   235,   236,   237,\n+     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,\n+     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,\n+     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,\n+     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,\n+     278,    -1,   280,   281,    -1,    -1,   284,   285,   286,    -1,\n+      -1,   289,   290,   291,   292,   293,   294,   295,   296,   297,\n+     298,   299,   300,   301,   302,   303,   304,    -1,    -1,    -1,\n+      -1,   309,   310,   311,   312,   313,   314,   315,   316,   317,\n+     318,    -1,   320,   321,   322,   323,   324,   325,    -1,   327,\n+     328,   329,   330,   331,   332,   333,   334,    -1,   336,   337,\n+     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,\n+     348,    -1,   350,   351,   352,   353,   354,   355,   356,   357,\n+     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,\n+      -1,    -1,   370,   371,   372,   373,   374,   375,   376,   377,\n+     378,   379,   380,   381,   382,   383,   384,    -1,   386,   387,\n+     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,\n+     398,   399,   400,   401,    -1,   403,   404,    -1,   406,   407,\n+     408,   409,   410,   411,   412,    -1,   414,   415,    -1,    -1,\n+     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,\n+     428,   429,   430,   431,    -1,    -1,   434,   435,   436,    -1,\n+     438,   439,   440,   441,    -1,   443,   444,   445,   446,   447,\n+     448,   449,    -1,   451,   452,   453,   454,   455,   456,   457,\n+      -1,    -1,   460,    -1,    -1,   463,   464,   465,   466,   467,\n+     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,\n+     478,   479,   480,   481,   482,   483,   484,    -1,    -1,    -1,\n+      -1,    -1,    -1,   491,   492,   493,    -1,    -1,    -1,    -1,\n+     498,    -1,   500,    -1,    -1,    -1,    -1,   505,   506,   507,\n+     508,     3,     4,     5,     6,     7,     8,     9,    10,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,\n+      32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,\n+      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,\n+      52,    53,    54,    55,    56,    57,    -1,    59,    60,    61,\n+      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,\n+      -1,    73,    74,    75,    76,    77,    -1,    79,    -1,    81,\n+      82,    83,    84,    85,    86,    87,    88,    89,    90,    -1,\n+      92,    93,    94,    95,    96,    97,    -1,    99,   100,   101,\n+     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,\n+     112,    -1,   114,    -1,   116,   117,   118,   119,   120,   121,\n+      -1,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,\n+     132,   133,   134,    -1,   136,   137,   138,    -1,   140,   141,\n+     142,    -1,   144,   145,   146,   147,   148,   149,   150,   151,\n+     152,   153,   154,   155,   156,    -1,   158,   159,   160,   161,\n+      -1,   163,    -1,   165,   166,    -1,   168,   169,   170,   171,\n+     172,   173,    -1,   175,    -1,   177,   178,   179,    -1,   181,\n+     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,\n+     192,    -1,   194,   195,   196,   197,   198,   199,   200,    -1,\n+     202,   203,   204,   205,   206,   207,   208,   209,   210,   211,\n+      -1,   213,    -1,   215,   216,   217,   218,   219,   220,   221,\n+     222,   223,   224,   225,    -1,    -1,   228,   229,   230,   231,\n+      -1,   233,   234,   235,   236,   237,   238,   239,   240,   241,\n+     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,\n+     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,\n+     262,   263,   264,   265,   266,    -1,   268,   269,   270,   271,\n+     272,   273,   274,   275,   276,   277,   278,    -1,   280,   281,\n+      -1,    -1,   284,   285,   286,    -1,    -1,   289,   290,   291,\n+     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,\n+     302,   303,   304,    -1,    -1,    -1,    -1,   309,   310,   311,\n+     312,   313,   314,   315,   316,   317,   318,    -1,   320,   321,\n+     322,   323,   324,   325,    -1,   327,   328,   329,   330,   331,\n+     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,\n+     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,\n+     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,\n+     362,   363,   364,   365,   366,   367,    -1,    -1,   370,   371,\n+     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,\n+     382,   383,   384,    -1,   386,   387,   388,   389,   390,   391,\n+     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,\n+      -1,   403,   404,    -1,   406,   407,   408,   409,   410,   411,\n+     412,    -1,   414,   415,    -1,    -1,   418,   419,   420,   421,\n+     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,\n+      -1,    -1,   434,   435,   436,    -1,   438,   439,   440,   441,\n+      -1,   443,   444,   445,   446,   447,   448,   449,    -1,   451,\n+     452,   453,   454,   455,   456,   457,    -1,    -1,   460,    -1,\n+      -1,   463,   464,   465,   466,   467,   468,   469,   470,   471,\n+     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,\n+     482,   483,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   491,\n+     492,    -1,    -1,    -1,    -1,    -1,   498,    -1,   500,    -1,\n+      -1,    -1,    -1,   505,   506,   507,   508,     3,     4,     5,\n+       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,\n+      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,\n+      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,\n+      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,\n+      56,    57,    -1,    59,    60,    61,    62,    63,    64,    65,\n+      66,    67,    68,    69,    70,    71,    -1,    73,    74,    75,\n+      76,    77,    -1,    79,    -1,    81,    82,    83,    84,    85,\n+      86,    87,    88,    89,    90,    -1,    92,    93,    94,    95,\n+      96,    97,    -1,    99,   100,   101,   102,   103,   104,   105,\n+     106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,\n+     116,   117,   118,   119,   120,   121,    -1,   123,   124,   125,\n+     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,\n+     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,\n+     146,   147,   148,   149,   150,   151,   152,   153,   154,   155,\n+     156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,\n+     166,    -1,   168,   169,   170,   171,   172,   173,    -1,   175,\n+      -1,   177,   178,   179,    -1,   181,   182,   183,   184,   185,\n+     186,   187,   188,   189,   190,   191,   192,    -1,   194,   195,\n+     196,   197,   198,   199,   200,    -1,   202,   203,   204,   205,\n+     206,   207,   208,   209,   210,   211,    -1,   213,    -1,   215,\n+      -1,    -1,   218,   219,   220,   221,   222,   223,   224,   225,\n+      -1,    -1,   228,   229,   230,   231,    -1,   233,   234,   235,\n+     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,\n+     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,\n+     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,\n+     266,    -1,   268,   269,    -1,   271,   272,   273,   274,   275,\n+     276,   277,   278,    -1,   280,   281,    -1,    -1,   284,   285,\n+     286,    -1,    -1,   289,   290,   291,   292,   293,   294,   295,\n+     296,   297,   298,   299,   300,   301,   302,   303,   304,    -1,\n+      -1,    -1,    -1,   309,   310,   311,   312,   313,   314,   315,\n+     316,   317,   318,    -1,   320,   321,   322,   323,   324,   325,\n+      -1,   327,   328,   329,   330,   331,   332,   333,   334,    -1,\n+     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,\n+     346,   347,   348,    -1,   350,   351,   352,   353,   354,   355,\n+     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,\n+     366,   367,    -1,    -1,   370,   371,   372,   373,   374,   375,\n+     376,   377,   378,   379,   380,   381,   382,   383,   384,    -1,\n+     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,\n+     396,   397,   398,   399,   400,   401,    -1,   403,   404,    -1,\n+     406,   407,   408,   409,   410,   411,   412,    -1,   414,   415,\n+      -1,    -1,   418,   419,   420,   421,   422,   423,   424,   425,\n+     426,   427,   428,   429,   430,   431,    -1,    -1,   434,   435,\n+     436,    -1,   438,   439,   440,   441,    -1,   443,   444,   445,\n+     446,   447,   448,   449,    -1,   451,   452,   453,   454,   455,\n+     456,   457,    -1,    -1,   460,    -1,    -1,   463,   464,   465,\n+     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,\n+     476,   477,   478,   479,   480,   481,   482,   483,   484,    -1,\n+      -1,    -1,    -1,    -1,    -1,   491,   492,   493,    -1,    -1,\n+      -1,    -1,   498,    -1,   500,    -1,    -1,    -1,    -1,   505,\n+     506,   507,   508,     3,     4,     5,     6,     7,    -1,     9,\n+      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,\n       -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,\n       -1,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,\n-      50,    51,    52,    -1,    54,    55,    56,    57,    -1,    59,\n+      50,    51,    52,    53,    54,    55,    56,    57,    -1,    59,\n       60,    61,    62,    63,    64,    65,    66,    67,    68,    69,\n       70,    71,    -1,    73,    74,    75,    76,    77,    -1,    79,\n       -1,    81,    82,    83,    84,    85,    86,    87,    88,    89,\n       90,    -1,    92,    93,    94,    95,    96,    97,    -1,    99,\n      100,   101,   102,   103,   104,   105,   106,   107,   108,   109,\n-     110,   111,   112,   113,   114,    -1,   116,   117,   118,   119,\n+     110,   111,   112,    -1,   114,    -1,   116,   117,   118,   119,\n      120,   121,    -1,   123,   124,   125,   126,   127,    -1,    -1,\n      130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,\n-     140,    -1,   142,    -1,   144,   145,   146,   147,   148,   149,\n+     140,   141,   142,    -1,   144,   145,   146,   147,   148,   149,\n      150,   151,   152,   153,   154,   155,   156,    -1,   158,   159,\n      160,   161,    -1,   163,    -1,   165,   166,    -1,   168,   169,\n-     170,   171,    -1,   173,    -1,   175,    -1,   177,   178,   179,\n-      -1,   181,   182,   183,   184,   185,   186,   187,    -1,   189,\n+     170,   171,   172,   173,    -1,   175,    -1,   177,   178,   179,\n+      -1,   181,   182,   183,   184,   185,   186,   187,   188,   189,\n      190,   191,   192,    -1,   194,   195,   196,   197,   198,   199,\n      200,    -1,   202,   203,   204,   205,   206,   207,   208,   209,\n-     210,   211,    -1,   213,    -1,   215,    -1,    -1,   218,   219,\n+     210,   211,    -1,   213,    -1,   215,   216,   217,   218,   219,\n      220,   221,   222,   223,   224,   225,    -1,    -1,   228,   229,\n-     230,    -1,    -1,   233,   234,   235,   236,   237,   238,   239,\n+     230,   231,    -1,   233,   234,   235,   236,   237,   238,   239,\n      240,   241,   242,   243,   244,   245,   246,   247,   248,   249,\n      250,   251,   252,   253,   254,   255,   256,   257,   258,   259,\n      260,   261,   262,   263,   264,   265,   266,    -1,   268,   269,\n-      -1,   271,   272,   273,   274,   275,   276,   277,   278,    -1,\n+     270,   271,   272,   273,   274,   275,   276,   277,   278,    -1,\n      280,   281,    -1,    -1,   284,   285,   286,    -1,    -1,   289,\n      290,   291,   292,   293,   294,   295,   296,   297,   298,   299,\n      300,   301,   302,   303,   304,    -1,    -1,    -1,    -1,   309,\n@@ -13270,7 +13132,7 @@ static const yytype_int16 yycheck[] =\n      350,   351,   352,   353,   354,   355,   356,   357,   358,   359,\n      360,   361,   362,   363,   364,   365,   366,   367,    -1,    -1,\n      370,   371,   372,   373,   374,   375,   376,   377,   378,   379,\n-      -1,   381,   382,   383,   384,    -1,   386,   387,   388,   389,\n+     380,   381,   382,   383,   384,    -1,   386,   387,   388,   389,\n      390,   391,   392,   393,   394,   395,   396,   397,   398,   399,\n      400,   401,    -1,   403,   404,    -1,   406,   407,   408,   409,\n      410,   411,   412,    -1,   414,   415,    -1,    -1,   418,   419,\n@@ -13281,15 +13143,15 @@ static const yytype_int16 yycheck[] =\n      460,    -1,    -1,   463,   464,   465,   466,   467,   468,   469,\n      470,   471,   472,   473,   474,   475,   476,   477,   478,   479,\n      480,   481,   482,   483,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,   491,   492,   493,    -1,    -1,    -1,    -1,   498,    -1,\n+      -1,   491,   492,    -1,    -1,    -1,    -1,    -1,   498,    -1,\n      500,    -1,    -1,    -1,    -1,   505,   506,   507,   508,     3,\n-       4,     5,     6,     7,    -1,     9,    -1,    -1,    -1,    -1,\n+       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,\n       24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,\n       -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,\n       44,    -1,    46,    47,    48,    49,    50,    51,    52,    53,\n       54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,\n-      64,    65,    -1,    67,    68,    69,    70,    71,    -1,    73,\n+      64,    65,    66,    67,    68,    69,    70,    71,    -1,    73,\n       74,    75,    76,    77,    -1,    79,    -1,    81,    82,    83,\n       84,    85,    86,    87,    88,    89,    90,    -1,    92,    93,\n       94,    95,    96,    97,    -1,    99,   100,   101,   102,   103,\n@@ -13300,11 +13162,11 @@ static const yytype_int16 yycheck[] =\n      144,   145,   146,   147,   148,   149,   150,   151,   152,   153,\n      154,   155,   156,    -1,   158,   159,   160,   161,    -1,   163,\n       -1,   165,   166,    -1,   168,   169,   170,   171,   172,   173,\n-      -1,   175,   176,   177,   178,   179,    -1,   181,   182,   183,\n+      -1,   175,    -1,   177,   178,   179,    -1,   181,   182,   183,\n      184,   185,   186,   187,   188,   189,   190,   191,   192,    -1,\n      194,   195,   196,   197,   198,   199,   200,    -1,   202,   203,\n      204,   205,   206,   207,   208,   209,   210,   211,    -1,   213,\n-      -1,   215,   216,   217,   218,   219,   220,   221,   222,   223,\n+      -1,   215,    -1,   217,   218,   219,   220,   221,   222,   223,\n      224,   225,    -1,    -1,   228,   229,   230,   231,    -1,   233,\n      234,   235,   236,   237,   238,   239,   240,   241,   242,   243,\n      244,   245,   246,   247,   248,   249,   250,   251,   252,   253,\n@@ -13331,13 +13193,113 @@ static const yytype_int16 yycheck[] =\n      454,   455,   456,   457,    -1,    -1,   460,    -1,    -1,   463,\n      464,   465,   466,   467,   468,   469,   470,   471,   472,   473,\n      474,   475,   476,   477,   478,   479,   480,   481,   482,   483,\n-      -1,    -1,    -1,    -1,     3,     4,     5,     6,     7,    -1,\n-       9,    -1,    -1,    -1,   498,    -1,   500,    -1,    -1,    -1,\n-      -1,   505,   506,    22,    23,    24,    25,    26,    27,    28,\n-      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,\n-      39,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,   491,   492,    -1,\n+      -1,    -1,    -1,    -1,   498,    -1,   500,    -1,    -1,    -1,\n+      -1,   505,   506,   507,   508,     3,     4,     5,     6,     7,\n+      -1,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,\n+      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,\n+      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    47,\n+      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,\n+      -1,    59,    60,    61,    62,    63,    64,    65,    66,    67,\n+      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,\n+      -1,    79,    -1,    81,    82,    83,    84,    85,    86,    87,\n+      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,\n+      -1,    99,   100,   101,   102,   103,   104,   105,   106,   107,\n+     108,   109,   110,   111,   112,    -1,   114,    -1,   116,   117,\n+     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,\n+      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,\n+     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,\n+     148,   149,   150,   151,   152,   153,   154,   155,   156,    -1,\n+     158,   159,   160,   161,    -1,   163,    -1,   165,   166,    -1,\n+     168,   169,   170,   171,   172,   173,    -1,   175,    -1,   177,\n+     178,   179,    -1,   181,   182,   183,   184,   185,   186,   187,\n+     188,   189,   190,   191,   192,    -1,   194,   195,   196,   197,\n+     198,   199,   200,    -1,   202,   203,   204,   205,   206,   207,\n+     208,   209,   210,   211,    -1,   213,    -1,   215,   216,   217,\n+     218,   219,   220,   221,   222,   223,   224,   225,    -1,    -1,\n+     228,   229,   230,   231,    -1,   233,   234,   235,   236,   237,\n+     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,\n+     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,\n+     258,   259,   260,   261,   262,   263,   264,   265,   266,    -1,\n+     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,\n+     278,    -1,   280,   281,    -1,    -1,   284,   285,   286,    -1,\n+      -1,   289,   290,   291,   292,   293,   294,   295,   296,   297,\n+     298,   299,   300,   301,   302,   303,   304,    -1,    -1,    -1,\n+      -1,   309,   310,   311,   312,   313,   314,   315,   316,   317,\n+     318,    -1,   320,   321,   322,   323,   324,   325,    -1,   327,\n+     328,   329,   330,   331,   332,   333,   334,    -1,   336,   337,\n+     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,\n+     348,    -1,   350,   351,   352,   353,   354,   355,   356,   357,\n+     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,\n+      -1,    -1,   370,   371,   372,   373,   374,   375,   376,   377,\n+     378,   379,   380,   381,   382,   383,   384,    -1,   386,   387,\n+     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,\n+     398,   399,   400,   401,    -1,   403,   404,    -1,   406,   407,\n+     408,   409,   410,   411,   412,    -1,   414,   415,    -1,    -1,\n+     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,\n+     428,   429,   430,   431,    -1,    -1,   434,   435,   436,    -1,\n+     438,   439,   440,   441,    -1,   443,   444,   445,   446,   447,\n+     448,   449,    -1,   451,   452,   453,   454,   455,   456,   457,\n+      -1,    -1,   460,    -1,    -1,   463,   464,   465,   466,   467,\n+     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,\n+     478,   479,   480,   481,   482,   483,    -1,    -1,    -1,    -1,\n+      -1,    -1,     3,     4,     5,     6,     7,     8,     9,    10,\n+     498,    -1,   500,    -1,    -1,    -1,    -1,   505,   506,   507,\n+     508,    22,    23,    24,    25,    26,    27,    28,    29,    -1,\n+      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,\n+      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,\n+      51,    52,    -1,    54,    55,    56,    57,    -1,    59,    60,\n+      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,\n+      71,    -1,    73,    74,    75,    76,    77,    -1,    79,    -1,\n+      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,\n+      -1,    92,    93,    94,    95,    96,    97,    -1,    99,   100,\n+     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,\n+     111,   112,   113,   114,    -1,   116,   117,   118,   119,   120,\n+     121,    -1,   123,   124,   125,   126,   127,    -1,    -1,   130,\n+     131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,\n+      -1,   142,    -1,   144,   145,   146,   147,   148,   149,   150,\n+     151,   152,   153,   154,   155,   156,    -1,   158,   159,   160,\n+     161,    -1,   163,    -1,   165,   166,    -1,   168,   169,   170,\n+     171,    -1,   173,    -1,   175,    -1,   177,   178,   179,    -1,\n+     181,   182,   183,   184,   185,   186,   187,    -1,   189,   190,\n+     191,   192,    -1,   194,   195,   196,   197,   198,   199,   200,\n+      -1,   202,   203,   204,   205,   206,   207,   208,   209,   210,\n+     211,    -1,   213,    -1,   215,    -1,    -1,   218,   219,   220,\n+     221,   222,   223,   224,   225,    -1,    -1,   228,   229,   230,\n+      -1,    -1,   233,   234,   235,   236,   237,   238,   239,   240,\n+     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,\n+     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,\n+     261,   262,   263,   264,   265,   266,    -1,   268,   269,    -1,\n+     271,   272,   273,   274,   275,   276,   277,   278,    -1,   280,\n+     281,    -1,    -1,   284,   285,   286,    -1,    -1,   289,   290,\n+     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,\n+     301,   302,   303,   304,    -1,    -1,    -1,    -1,   309,   310,\n+     311,   312,   313,   314,   315,   316,   317,   318,    -1,   320,\n+     321,   322,   323,   324,   325,    -1,   327,   328,   329,   330,\n+     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,\n+     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,\n+     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,\n+     361,   362,   363,   364,   365,   366,   367,    -1,    -1,   370,\n+     371,   372,   373,   374,   375,   376,   377,   378,   379,    -1,\n+     381,   382,   383,   384,    -1,   386,   387,   388,   389,   390,\n+     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,\n+     401,    -1,   403,   404,    -1,   406,   407,   408,   409,   410,\n+     411,   412,    -1,   414,   415,    -1,    -1,   418,   419,   420,\n+     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,\n+     431,    -1,    -1,   434,   435,   436,    -1,   438,   439,   440,\n+     441,    -1,   443,   444,   445,   446,   447,   448,   449,    -1,\n+     451,   452,   453,   454,   455,   456,   457,    -1,    -1,   460,\n+      -1,    -1,   463,   464,   465,   466,   467,   468,   469,   470,\n+     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,\n+     481,   482,   483,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+     491,   492,   493,    -1,     3,     4,     5,   498,    -1,   500,\n+       9,    -1,    -1,    -1,   505,   506,   507,   508,    -1,    -1,\n+      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,\n+      29,    -1,    31,    32,    33,    -1,    -1,    -1,    37,    -1,\n+      -1,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,\n       49,    50,    51,    52,    53,    54,    55,    56,    57,    -1,\n-      59,    60,    61,    62,    63,    64,    65,    -1,    67,    68,\n+      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,\n       69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,\n       79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,\n       89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,\n@@ -13358,131 +13320,84 @@ static const yytype_int16 yycheck[] =\n      239,   240,   241,   242,   243,   244,   245,   246,   247,   248,\n      249,   250,   251,   252,   253,   254,   255,   256,   257,   258,\n      259,   260,   261,   262,   263,   264,   265,   266,    -1,   268,\n-     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,\n-      -1,   280,   281,    -1,    -1,   284,   285,   286,    -1,    -1,\n-     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,\n-     299,   300,   301,   302,   303,   304,    -1,    -1,    -1,    -1,\n-     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,\n-      -1,   320,   321,   322,   323,   324,   325,    -1,   327,   328,\n-     329,   330,   331,   332,   333,   334,    -1,   336,   337,   338,\n-     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,\n-      -1,   350,   351,   352,   353,   354,   355,   356,   357,   358,\n-     359,   360,   361,   362,   363,   364,   365,   366,   367,    -1,\n-      -1,   370,   371,   372,   373,   374,   375,   376,   377,   378,\n-     379,   380,   381,   382,   383,   384,    -1,   386,   387,   388,\n-     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,\n-     399,   400,   401,    -1,   403,   404,    -1,   406,   407,   408,\n-     409,   410,   411,   412,    -1,   414,   415,    -1,    -1,   418,\n-     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,\n-     429,   430,   431,    -1,    -1,   434,   435,   436,    -1,   438,\n-     439,   440,   441,    -1,   443,   444,   445,   446,   447,   448,\n-     449,    -1,   451,   452,   453,   454,   455,   456,   457,    -1,\n-      -1,   460,    -1,    -1,   463,   464,   465,   466,   467,   468,\n-     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,\n-     479,   480,   481,   482,   483,    -1,    -1,    -1,    -1,     3,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   498,\n-      -1,   500,    -1,    -1,    -1,    -1,   505,   506,    22,    23,\n-      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,\n-      -1,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    43,\n-      44,    -1,    46,    47,    48,    -1,    50,    51,    52,    53,\n-      54,    -1,    56,    57,    -1,    59,    60,    61,    62,    63,\n-      64,    -1,    -1,    67,    68,    69,    70,    71,    -1,    73,\n-      74,    75,    76,    77,    -1,    -1,    -1,    81,    82,    83,\n-      84,    85,    86,    -1,    88,    89,    90,    -1,    92,    93,\n-      94,    95,    96,    97,    -1,    -1,   100,   101,   102,   103,\n-     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,\n-     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,\n-     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,\n-     134,    -1,   136,   137,   138,    -1,   140,   141,   142,   143,\n-     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,\n-     154,    -1,   156,   157,   158,   159,   160,   161,   162,   163,\n-      -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,\n-      -1,   175,    -1,   177,   178,   179,    -1,   181,   182,   183,\n-     184,   185,   186,   187,    -1,   189,   190,   191,   192,    -1,\n-     194,   195,   196,   197,   198,   199,   200,    -1,   202,    -1,\n-     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,\n-      -1,   215,    -1,    -1,   218,    -1,   220,   221,   222,   223,\n-     224,   225,    -1,    -1,   228,    -1,   230,    -1,   232,   233,\n-     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,\n-     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,\n-     254,   255,   256,   257,   258,   259,   260,    -1,   262,   263,\n-     264,   265,   266,    -1,   268,   269,    -1,   271,    -1,   273,\n-     274,   275,   276,   277,   278,   279,   280,   281,    -1,    -1,\n-     284,   285,   286,    -1,   288,   289,   290,    -1,   292,    -1,\n-     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,\n-     304,    -1,    -1,    -1,    -1,   309,   310,   311,    -1,   313,\n-     314,   315,   316,   317,   318,    -1,   320,   321,   322,   323,\n-     324,   325,    -1,   327,   328,   329,   330,   331,   332,   333,\n-     334,    -1,   336,   337,   338,   339,   340,   341,   342,   343,\n-     344,   345,   346,   347,   348,    -1,   350,   351,    -1,   353,\n-     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,\n-     364,   365,   366,   367,    -1,    -1,   370,   371,   372,   373,\n-     374,   375,   376,   377,   378,   379,    -1,   381,   382,   383,\n-     384,    -1,   386,   387,   388,   389,   390,   391,   392,   393,\n-     394,   395,   396,   397,   398,   399,   400,   401,    -1,   403,\n-     404,    -1,   406,    -1,   408,   409,   410,   411,   412,    -1,\n-     414,   415,    -1,    -1,   418,   419,   420,   421,   422,    -1,\n-     424,   425,   426,   427,   428,   429,   430,   431,   432,    -1,\n-     434,   435,   436,    -1,   438,   439,   440,   441,    -1,   443,\n-     444,   445,   446,   447,   448,   449,    -1,   451,    -1,   453,\n-     454,   455,   456,   457,    -1,    -1,   460,    -1,    -1,   463,\n-     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,\n-     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,\n-       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,   501,    -1,    22,\n-      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,\n-      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      43,    44,    -1,    46,    47,    48,    -1,    50,    51,    52,\n-      53,    54,    -1,    56,    57,    -1,    59,    60,    61,    62,\n-      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    -1,\n-      73,    74,    75,    76,    77,    -1,    -1,    -1,    81,    82,\n-      83,    84,    85,    86,    -1,    88,    89,    90,    -1,    92,\n-      93,    94,    95,    96,    97,    -1,    -1,   100,   101,   102,\n-     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,\n-      -1,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,\n-     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,\n-     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,\n-      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,\n-     153,   154,    -1,   156,    -1,   158,   159,   160,   161,    -1,\n-     163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,\n-     173,    -1,   175,    -1,   177,   178,   179,    -1,   181,   182,\n-     183,   184,   185,   186,   187,    -1,   189,   190,   191,   192,\n-      -1,   194,   195,   196,   197,   198,   199,   200,    -1,   202,\n-      -1,   204,   205,   206,   207,   208,   209,   210,   211,    -1,\n-     213,    -1,   215,    -1,    -1,   218,    -1,   220,   221,   222,\n-     223,   224,   225,    -1,    -1,   228,    -1,   230,    -1,    -1,\n-     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,\n-     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,\n-     253,   254,   255,   256,   257,   258,   259,   260,    -1,   262,\n-     263,   264,   265,   266,    -1,   268,   269,    -1,   271,    -1,\n-     273,   274,   275,   276,   277,   278,    -1,   280,   281,    -1,\n-      -1,   284,   285,   286,    -1,    -1,   289,   290,    -1,   292,\n-      -1,   294,   295,   296,   297,   298,   299,   300,   301,   302,\n-     303,   304,    -1,    -1,    -1,    -1,   309,   310,   311,    -1,\n-     313,   314,   315,   316,   317,   318,    -1,   320,   321,   322,\n-     323,   324,   325,    -1,   327,   328,   329,   330,   331,   332,\n-     333,   334,    -1,   336,   337,   338,   339,   340,   341,   342,\n-     343,   344,   345,   346,   347,   348,    -1,   350,   351,    -1,\n-     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,\n-     363,   364,   365,   366,   367,    -1,    -1,   370,   371,   372,\n-     373,   374,   375,   376,   377,   378,   379,    -1,   381,   382,\n-     383,   384,    -1,   386,   387,   388,   389,   390,   391,   392,\n-     393,   394,   395,   396,   397,   398,   399,   400,   401,    -1,\n-     403,   404,    -1,   406,    -1,   408,   409,   410,   411,   412,\n-      -1,   414,   415,    -1,    -1,   418,   419,   420,   421,   422,\n-      -1,   424,   425,   426,   427,   428,   429,   430,   431,    -1,\n-      -1,   434,   435,   436,    -1,   438,   439,   440,   441,    -1,\n-     443,   444,   445,   446,   447,   448,   449,    -1,   451,    -1,\n-     453,   454,   455,   456,   457,    -1,    -1,   460,    -1,    -1,\n-     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,\n-     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,\n-     483,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,   500,   501,    -1,\n+     269,   270,   271,    -1,   273,   274,   275,   276,   277,   278,\n+      -1,   280,   281,   282,    -1,   284,   285,   286,    -1,    -1,\n+     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,\n+     299,   300,   301,   302,   303,   304,    -1,    -1,    -1,    -1,\n+     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,\n+      -1,   320,   321,   322,   323,   324,   325,    -1,   327,   328,\n+     329,   330,   331,   332,   333,   334,    -1,   336,   337,   338,\n+     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,\n+      -1,   350,   351,   352,   353,   354,   355,   356,   357,   358,\n+     359,   360,   361,   362,   363,   364,   365,   366,   367,    -1,\n+     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,\n+     379,   380,   381,   382,   383,   384,    -1,   386,   387,   388,\n+     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,\n+     399,   400,   401,    -1,   403,   404,    -1,   406,   407,   408,\n+     409,   410,   411,   412,    -1,   414,   415,    -1,    -1,   418,\n+     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,\n+     429,   430,   431,    -1,    -1,   434,   435,   436,    -1,   438,\n+     439,   440,   441,    -1,   443,   444,   445,   446,   447,   448,\n+     449,    -1,   451,   452,   453,   454,   455,   456,   457,    -1,\n+      -1,   460,    -1,    -1,   463,   464,   465,   466,   467,   468,\n+     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,\n+     479,   480,   481,   482,   483,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,   491,   492,   493,    -1,     3,     4,     5,     6,\n+       7,   500,     9,    -1,    -1,    -1,    -1,    -1,    -1,   508,\n+      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,\n+      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,\n+      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,\n+      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,\n+      57,    -1,    59,    60,    61,    62,    63,    64,    65,    -1,\n+      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,\n+      77,    -1,    79,    -1,    81,    82,    83,    84,    85,    86,\n+      87,    88,    89,    90,    -1,    92,    93,    94,    95,    96,\n+      97,    -1,    99,   100,   101,   102,   103,   104,   105,   106,\n+     107,   108,   109,   110,   111,   112,    -1,   114,    -1,   116,\n+     117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,\n+     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,   136,\n+     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,\n+     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,\n+      -1,   158,   159,   160,   161,    -1,   163,    -1,   165,   166,\n+      -1,   168,   169,   170,   171,   172,   173,    -1,   175,   176,\n+     177,   178,   179,    -1,   181,   182,   183,   184,   185,   186,\n+     187,   188,   189,   190,   191,   192,    -1,   194,   195,   196,\n+     197,   198,   199,   200,    -1,   202,   203,   204,   205,   206,\n+     207,   208,   209,   210,   211,    -1,   213,    -1,   215,   216,\n+     217,   218,   219,   220,   221,   222,   223,   224,   225,    -1,\n+      -1,   228,   229,   230,   231,    -1,   233,   234,   235,   236,\n+     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,\n+     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,\n+     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,\n+      -1,   268,   269,   270,   271,   272,   273,   274,   275,   276,\n+     277,   278,    -1,   280,   281,    -1,    -1,   284,   285,   286,\n+      -1,    -1,   289,   290,   291,   292,   293,   294,   295,   296,\n+     297,   298,   299,   300,   301,   302,   303,   304,    -1,    -1,\n+      -1,    -1,   309,   310,   311,   312,   313,   314,   315,   316,\n+     317,   318,    -1,   320,   321,   322,   323,   324,   325,    -1,\n+     327,   328,   329,   330,   331,   332,   333,   334,    -1,   336,\n+     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,\n+     347,   348,    -1,   350,   351,   352,   353,   354,   355,   356,\n+     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,\n+     367,    -1,    -1,   370,   371,   372,   373,   374,   375,   376,\n+     377,   378,   379,   380,   381,   382,   383,   384,    -1,   386,\n+     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,\n+     397,   398,   399,   400,   401,    -1,   403,   404,    -1,   406,\n+     407,   408,   409,   410,   411,   412,    -1,   414,   415,    -1,\n+      -1,   418,   419,   420,   421,   422,   423,   424,   425,   426,\n+     427,   428,   429,   430,   431,    -1,    -1,   434,   435,   436,\n+      -1,   438,   439,   440,   441,    -1,   443,   444,   445,   446,\n+     447,   448,   449,    -1,   451,   452,   453,   454,   455,   456,\n+     457,    -1,    -1,   460,    -1,    -1,   463,   464,   465,   466,\n+     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,\n+     477,   478,   479,   480,   481,   482,   483,    -1,    -1,    -1,\n+      -1,     3,     4,     5,     6,     7,    -1,     9,    -1,    -1,\n+      -1,   498,    -1,   500,    -1,    -1,    -1,    -1,   505,   506,\n       22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,\n-      32,    33,    34,    35,    -1,    37,    -1,    -1,    -1,    -1,\n+      32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,\n       42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,\n       52,    53,    54,    55,    56,    57,    -1,    59,    60,    61,\n-      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,\n+      62,    63,    64,    65,    -1,    67,    68,    69,    70,    71,\n       -1,    73,    74,    75,    76,    77,    -1,    79,    -1,    81,\n       82,    83,    84,    85,    86,    87,    88,    89,    90,    -1,\n       92,    93,    94,    95,    96,    97,    -1,    99,   100,   101,\n@@ -13491,8 +13406,8 @@ static const yytype_int16 yycheck[] =\n       -1,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,\n      132,   133,   134,    -1,   136,   137,   138,    -1,   140,   141,\n      142,    -1,   144,   145,   146,   147,   148,   149,   150,   151,\n-     152,   153,   154,    -1,   156,    -1,   158,   159,   160,   161,\n-      -1,   163,    -1,   165,   166,   167,   168,   169,   170,   171,\n+     152,   153,   154,   155,   156,    -1,   158,   159,   160,   161,\n+      -1,   163,    -1,   165,   166,    -1,   168,   169,   170,   171,\n      172,   173,    -1,   175,    -1,   177,   178,   179,    -1,   181,\n      182,   183,   184,   185,   186,   187,   188,   189,   190,   191,\n      192,    -1,   194,   195,   196,   197,   198,   199,   200,    -1,\n@@ -13503,29 +13418,270 @@ static const yytype_int16 yycheck[] =\n      242,   243,   244,   245,   246,   247,   248,   249,   250,   251,\n      252,   253,   254,   255,   256,   257,   258,   259,   260,   261,\n      262,   263,   264,   265,   266,    -1,   268,   269,   270,   271,\n-      -1,   273,   274,   275,   276,   277,   278,    -1,   280,   281,\n+     272,   273,   274,   275,   276,   277,   278,    -1,   280,   281,\n       -1,    -1,   284,   285,   286,    -1,    -1,   289,   290,   291,\n      292,   293,   294,   295,   296,   297,   298,   299,   300,   301,\n-     302,   303,   304,   305,   306,   307,    -1,   309,   310,   311,\n+     302,   303,   304,    -1,    -1,    -1,    -1,   309,   310,   311,\n      312,   313,   314,   315,   316,   317,   318,    -1,   320,   321,\n      322,   323,   324,   325,    -1,   327,   328,   329,   330,   331,\n      332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,\n      342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,\n      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,\n-     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,\n+     362,   363,   364,   365,   366,   367,    -1,    -1,   370,   371,\n      372,   373,   374,   375,   376,   377,   378,   379,   380,   381,\n      382,   383,   384,    -1,   386,   387,   388,   389,   390,   391,\n      392,   393,   394,   395,   396,   397,   398,   399,   400,   401,\n-      -1,   403,   404,   405,   406,   407,   408,   409,   410,   411,\n+      -1,   403,   404,    -1,   406,   407,   408,   409,   410,   411,\n      412,    -1,   414,   415,    -1,    -1,   418,   419,   420,   421,\n-     422,    -1,   424,   425,   426,   427,   428,   429,   430,   431,\n-      -1,    -1,   434,   435,   436,   437,   438,   439,   440,   441,\n+     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,\n+      -1,    -1,   434,   435,   436,    -1,   438,   439,   440,   441,\n       -1,   443,   444,   445,   446,   447,   448,   449,    -1,   451,\n      452,   453,   454,   455,   456,   457,    -1,    -1,   460,    -1,\n-     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,\n+      -1,   463,   464,   465,   466,   467,   468,   469,   470,   471,\n      472,   473,   474,   475,   476,   477,   478,   479,   480,   481,\n-     482,   483,    -1,     3,   486,     5,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   500,    -1,\n+     482,   483,    -1,    -1,    -1,    -1,     3,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,   498,    -1,   500,    -1,\n+      -1,    -1,    -1,   505,   506,    22,    23,    24,    25,    26,\n+      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,\n+      -1,    -1,    -1,    40,    -1,    -1,    43,    44,    -1,    46,\n+      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,\n+      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,\n+      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,\n+      77,    -1,    -1,    -1,    81,    82,    83,    84,    85,    86,\n+      -1,    88,    89,    90,    -1,    92,    93,    94,    95,    96,\n+      97,    -1,    -1,   100,   101,   102,   103,   104,   105,   106,\n+     107,   108,   109,   110,   111,   112,    -1,   114,    -1,   116,\n+     117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,\n+     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,   136,\n+     137,   138,    -1,   140,   141,   142,   143,   144,   145,   146,\n+     147,   148,   149,   150,   151,   152,   153,   154,    -1,   156,\n+     157,   158,   159,   160,   161,   162,   163,    -1,   165,    -1,\n+      -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,\n+     177,   178,   179,    -1,   181,   182,   183,   184,   185,   186,\n+     187,    -1,   189,   190,   191,   192,    -1,   194,   195,   196,\n+     197,   198,   199,   200,    -1,   202,    -1,   204,   205,   206,\n+     207,   208,   209,   210,   211,   212,   213,    -1,   215,    -1,\n+      -1,   218,    -1,   220,   221,   222,   223,   224,   225,    -1,\n+      -1,   228,    -1,   230,    -1,   232,   233,   234,   235,   236,\n+     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,\n+     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,\n+     257,   258,   259,   260,    -1,   262,   263,   264,   265,   266,\n+      -1,   268,   269,    -1,   271,    -1,   273,   274,   275,   276,\n+     277,   278,   279,   280,   281,    -1,    -1,   284,   285,   286,\n+      -1,   288,   289,   290,    -1,   292,    -1,   294,   295,   296,\n+     297,   298,   299,   300,   301,   302,   303,   304,    -1,    -1,\n+      -1,    -1,   309,   310,   311,    -1,   313,   314,   315,   316,\n+     317,   318,    -1,   320,   321,   322,   323,   324,   325,    -1,\n+     327,   328,   329,   330,   331,   332,   333,   334,    -1,   336,\n+     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,\n+     347,   348,    -1,   350,   351,    -1,   353,   354,   355,   356,\n+     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,\n+     367,    -1,    -1,   370,   371,   372,   373,   374,   375,   376,\n+     377,   378,   379,    -1,   381,   382,   383,   384,    -1,   386,\n+     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,\n+     397,   398,   399,   400,   401,    -1,   403,   404,    -1,   406,\n+      -1,   408,   409,   410,   411,   412,    -1,   414,   415,    -1,\n+      -1,   418,   419,   420,   421,   422,    -1,   424,   425,   426,\n+     427,   428,   429,   430,   431,   432,    -1,   434,   435,   436,\n+      -1,   438,   439,   440,   441,    -1,   443,   444,   445,   446,\n+     447,   448,   449,    -1,   451,    -1,   453,   454,   455,   456,\n+     457,    -1,    -1,   460,    -1,    -1,   463,   464,   465,   466,\n+     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,\n+     477,   478,   479,   480,   481,   482,   483,     3,    -1,     5,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,   501,    -1,    22,    23,    24,    25,\n+      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,\n+      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,\n+      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,\n+      -1,    67,    68,    69,    70,    71,    -1,    73,    74,    75,\n+      76,    77,    -1,    -1,    -1,    81,    82,    83,    84,    85,\n+      86,    -1,    88,    89,    90,    -1,    92,    93,    94,    95,\n+      96,    97,    -1,    -1,   100,   101,   102,   103,   104,   105,\n+     106,   107,   108,   109,   110,   111,   112,    -1,   114,    -1,\n+     116,   117,   118,   119,   120,   121,    -1,   123,   124,   125,\n+     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,\n+     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,\n+     146,   147,   148,   149,   150,   151,   152,   153,   154,    -1,\n+     156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,\n+      -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,\n+      -1,   177,   178,   179,    -1,   181,   182,   183,   184,   185,\n+     186,   187,    -1,   189,   190,   191,   192,    -1,   194,   195,\n+     196,   197,   198,   199,   200,    -1,   202,    -1,   204,   205,\n+     206,   207,   208,   209,   210,   211,    -1,   213,    -1,   215,\n+      -1,    -1,   218,    -1,   220,   221,   222,   223,   224,   225,\n+      -1,    -1,   228,    -1,   230,    -1,    -1,   233,   234,   235,\n+     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,\n+     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,\n+     256,   257,   258,   259,   260,    -1,   262,   263,   264,   265,\n+     266,    -1,   268,   269,    -1,   271,    -1,   273,   274,   275,\n+     276,   277,   278,    -1,   280,   281,    -1,    -1,   284,   285,\n+     286,    -1,    -1,   289,   290,    -1,   292,    -1,   294,   295,\n+     296,   297,   298,   299,   300,   301,   302,   303,   304,    -1,\n+      -1,    -1,    -1,   309,   310,   311,    -1,   313,   314,   315,\n+     316,   317,   318,    -1,   320,   321,   322,   323,   324,   325,\n+      -1,   327,   328,   329,   330,   331,   332,   333,   334,    -1,\n+     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,\n+     346,   347,   348,    -1,   350,   351,    -1,   353,   354,   355,\n+     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,\n+     366,   367,    -1,    -1,   370,   371,   372,   373,   374,   375,\n+     376,   377,   378,   379,    -1,   381,   382,   383,   384,    -1,\n+     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,\n+     396,   397,   398,   399,   400,   401,    -1,   403,   404,    -1,\n+     406,    -1,   408,   409,   410,   411,   412,    -1,   414,   415,\n+      -1,    -1,   418,   419,   420,   421,   422,    -1,   424,   425,\n+     426,   427,   428,   429,   430,   431,    -1,    -1,   434,   435,\n+     436,    -1,   438,   439,   440,   441,    -1,   443,   444,   445,\n+     446,   447,   448,   449,    -1,   451,    -1,   453,   454,   455,\n+     456,   457,    -1,    -1,   460,    -1,    -1,   463,   464,   465,\n+     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,\n+     476,   477,   478,   479,   480,   481,   482,   483,     3,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,   500,   501,    -1,    22,    23,    24,\n+      25,    26,    27,    28,    29,    -1,    31,    32,    33,    34,\n+      35,    -1,    37,    -1,    -1,    -1,    -1,    42,    43,    44,\n+      -1,    46,    47,    48,    49,    50,    51,    52,    53,    54,\n+      55,    56,    57,    -1,    59,    60,    61,    62,    63,    64,\n+      -1,    -1,    67,    68,    69,    70,    71,    -1,    73,    74,\n+      75,    76,    77,    -1,    79,    -1,    81,    82,    83,    84,\n+      85,    86,    87,    88,    89,    90,    -1,    92,    93,    94,\n+      95,    96,    97,    -1,    99,   100,   101,   102,   103,   104,\n+     105,   106,   107,   108,   109,   110,   111,   112,    -1,   114,\n+      -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,\n+     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,\n+      -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,\n+     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,\n+      -1,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,\n+     165,   166,   167,   168,   169,   170,   171,   172,   173,    -1,\n+     175,    -1,   177,   178,   179,    -1,   181,   182,   183,   184,\n+     185,   186,   187,   188,   189,   190,   191,   192,    -1,   194,\n+     195,   196,   197,   198,   199,   200,    -1,   202,   203,   204,\n+     205,   206,   207,   208,   209,   210,   211,    -1,   213,    -1,\n+     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,\n+     225,    -1,    -1,   228,   229,   230,   231,    -1,   233,   234,\n+     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,\n+     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,\n+     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,\n+     265,   266,    -1,   268,   269,   270,   271,    -1,   273,   274,\n+     275,   276,   277,   278,    -1,   280,   281,    -1,    -1,   284,\n+     285,   286,    -1,    -1,   289,   290,   291,   292,   293,   294,\n+     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,\n+     305,   306,   307,    -1,   309,   310,   311,   312,   313,   314,\n+     315,   316,   317,   318,    -1,   320,   321,   322,   323,   324,\n+     325,    -1,   327,   328,   329,   330,   331,   332,   333,   334,\n+      -1,   336,   337,   338,   339,   340,   341,   342,   343,   344,\n+     345,   346,   347,   348,    -1,   350,   351,   352,   353,   354,\n+     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,\n+     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,\n+     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,\n+      -1,   386,   387,   388,   389,   390,   391,   392,   393,   394,\n+     395,   396,   397,   398,   399,   400,   401,    -1,   403,   404,\n+     405,   406,   407,   408,   409,   410,   411,   412,    -1,   414,\n+     415,    -1,    -1,   418,   419,   420,   421,   422,    -1,   424,\n+     425,   426,   427,   428,   429,   430,   431,    -1,    -1,   434,\n+     435,   436,   437,   438,   439,   440,   441,    -1,   443,   444,\n+     445,   446,   447,   448,   449,    -1,   451,   452,   453,   454,\n+     455,   456,   457,    -1,    -1,   460,    -1,   462,   463,   464,\n+     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,\n+     475,   476,   477,   478,   479,   480,   481,   482,   483,    -1,\n+       3,   486,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,   500,    -1,    -1,    -1,    22,\n+      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,\n+      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,\n+      43,    44,    -1,    46,    47,    48,    49,    50,    51,    52,\n+      53,    54,    55,    56,    57,    -1,    59,    60,    61,    62,\n+      63,    64,    -1,    66,    67,    68,    69,    70,    71,    -1,\n+      73,    74,    75,    76,    77,    -1,    79,    -1,    81,    82,\n+      83,    84,    85,    86,    87,    88,    89,    90,    -1,    92,\n+      93,    94,    95,    96,    97,    -1,    99,   100,   101,   102,\n+     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,\n+      -1,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,\n+     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,\n+     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,\n+      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,\n+     153,   154,    -1,   156,    -1,   158,   159,   160,   161,    -1,\n+     163,    -1,   165,   166,   167,   168,   169,   170,   171,   172,\n+     173,    -1,   175,    -1,   177,   178,   179,    -1,   181,   182,\n+     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,\n+      -1,   194,   195,   196,   197,   198,   199,   200,    -1,   202,\n+     203,   204,   205,   206,   207,   208,   209,   210,   211,    -1,\n+     213,    -1,   215,   216,   217,   218,   219,   220,   221,   222,\n+     223,   224,   225,   226,    -1,   228,   229,   230,   231,    -1,\n+     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,\n+     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,\n+     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,\n+     263,   264,   265,   266,    -1,   268,   269,   270,   271,    -1,\n+     273,   274,   275,   276,   277,   278,    -1,   280,   281,    -1,\n+     283,   284,   285,   286,    -1,    -1,   289,   290,   291,   292,\n+     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,\n+     303,   304,   305,   306,   307,    -1,   309,   310,   311,   312,\n+     313,   314,   315,   316,   317,   318,    -1,   320,   321,   322,\n+     323,   324,   325,    -1,   327,   328,   329,   330,   331,   332,\n+     333,   334,    -1,   336,   337,   338,   339,   340,   341,   342,\n+     343,   344,   345,   346,   347,   348,    -1,   350,   351,   352,\n+     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,\n+     363,   364,   365,   366,   367,   368,    -1,   370,   371,   372,\n+     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,\n+     383,   384,    -1,   386,   387,   388,   389,   390,   391,   392,\n+     393,   394,   395,   396,   397,   398,   399,   400,   401,    -1,\n+     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,\n+      -1,   414,   415,    -1,    -1,   418,   419,   420,   421,   422,\n+      -1,   424,   425,   426,   427,   428,   429,   430,   431,    -1,\n+      -1,   434,   435,   436,   437,   438,   439,   440,   441,    -1,\n+     443,   444,   445,   446,   447,   448,   449,    -1,   451,   452,\n+     453,   454,   455,   456,   457,    -1,    -1,   460,    -1,   462,\n+     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,\n+     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,\n+     483,    -1,     3,   486,     5,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,   500,    -1,    -1,\n+      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,\n+      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,\n+      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,\n+      61,    62,    63,    64,    -1,    66,    67,    68,    69,    70,\n+      71,    -1,    73,    74,    75,    76,    77,    -1,    79,    -1,\n+      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,\n+      -1,    92,    93,    94,    95,    96,    97,    -1,    99,   100,\n+     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,\n+     111,   112,    -1,   114,    -1,   116,   117,   118,   119,   120,\n+     121,    -1,   123,   124,   125,   126,   127,    -1,    -1,   130,\n+     131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,\n+     141,   142,    -1,   144,   145,   146,   147,   148,   149,   150,\n+     151,   152,   153,   154,    -1,   156,    -1,   158,   159,   160,\n+     161,    -1,   163,    -1,   165,   166,    -1,   168,   169,   170,\n+     171,   172,   173,    -1,   175,    -1,   177,   178,   179,    -1,\n+     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,\n+     191,   192,    -1,   194,   195,   196,   197,   198,   199,   200,\n+      -1,   202,   203,   204,   205,   206,   207,   208,   209,   210,\n+     211,    -1,   213,    -1,   215,   216,   217,   218,   219,   220,\n+     221,   222,   223,   224,   225,   226,    -1,   228,   229,   230,\n+     231,    -1,   233,   234,   235,   236,   237,   238,   239,   240,\n+     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,\n+     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,\n+     261,   262,   263,   264,   265,   266,    -1,   268,   269,   270,\n+     271,    -1,   273,   274,   275,   276,   277,   278,    -1,   280,\n+     281,    -1,   283,   284,   285,   286,    -1,    -1,   289,   290,\n+     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,\n+     301,   302,   303,   304,    -1,    -1,    -1,    -1,   309,   310,\n+     311,   312,   313,   314,   315,   316,   317,   318,    -1,   320,\n+     321,   322,   323,   324,   325,    -1,   327,   328,   329,   330,\n+     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,\n+     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,\n+     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,\n+     361,   362,   363,   364,   365,   366,   367,    -1,    -1,   370,\n+     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,\n+     381,   382,   383,   384,    -1,   386,   387,   388,   389,   390,\n+     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,\n+     401,    -1,   403,   404,    -1,   406,   407,   408,   409,   410,\n+     411,   412,    -1,   414,   415,    -1,    -1,   418,   419,   420,\n+     421,   422,    -1,   424,   425,   426,   427,   428,   429,   430,\n+     431,    -1,    -1,   434,   435,   436,    -1,   438,   439,   440,\n+     441,    -1,   443,   444,   445,   446,   447,   448,   449,    -1,\n+     451,   452,   453,   454,   455,   456,   457,    -1,    -1,   460,\n+      -1,    -1,   463,   464,   465,   466,   467,   468,   469,   470,\n+     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,\n+     481,   482,   483,     3,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   500,\n       -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,\n       -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,\n@@ -13540,234 +13696,330 @@ static const yytype_int16 yycheck[] =\n      130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,\n      140,   141,   142,    -1,   144,   145,   146,   147,   148,   149,\n      150,   151,   152,   153,   154,    -1,   156,    -1,   158,   159,\n-     160,   161,    -1,   163,    -1,   165,   166,   167,   168,   169,\n+     160,   161,    -1,   163,    -1,   165,   166,    -1,   168,   169,\n      170,   171,   172,   173,    -1,   175,    -1,   177,   178,   179,\n       -1,   181,   182,   183,   184,   185,   186,   187,   188,   189,\n      190,   191,   192,    -1,   194,   195,   196,   197,   198,   199,\n      200,    -1,   202,   203,   204,   205,   206,   207,   208,   209,\n      210,   211,    -1,   213,    -1,   215,   216,   217,   218,   219,\n-     220,   221,   222,   223,   224,   225,   226,    -1,   228,   229,\n+     220,   221,   222,   223,   224,   225,    -1,    -1,   228,   229,\n      230,   231,    -1,   233,   234,   235,   236,   237,   238,   239,\n      240,   241,   242,   243,   244,   245,   246,   247,   248,   249,\n      250,   251,   252,   253,   254,   255,   256,   257,   258,   259,\n      260,   261,   262,   263,   264,   265,   266,    -1,   268,   269,\n      270,   271,    -1,   273,   274,   275,   276,   277,   278,    -1,\n-     280,   281,    -1,   283,   284,   285,   286,    -1,    -1,   289,\n+     280,   281,    -1,    -1,   284,   285,   286,    -1,    -1,   289,\n      290,   291,   292,   293,   294,   295,   296,   297,   298,   299,\n-     300,   301,   302,   303,   304,   305,   306,   307,    -1,   309,\n+     300,   301,   302,   303,   304,    -1,    -1,    -1,    -1,   309,\n      310,   311,   312,   313,   314,   315,   316,   317,   318,    -1,\n      320,   321,   322,   323,   324,   325,    -1,   327,   328,   329,\n      330,   331,   332,   333,   334,    -1,   336,   337,   338,   339,\n      340,   341,   342,   343,   344,   345,   346,   347,   348,    -1,\n      350,   351,   352,   353,   354,   355,   356,   357,   358,   359,\n-     360,   361,   362,   363,   364,   365,   366,   367,   368,    -1,\n+     360,   361,   362,   363,   364,   365,   366,   367,    -1,    -1,\n      370,   371,   372,   373,   374,   375,   376,   377,   378,   379,\n      380,   381,   382,   383,   384,    -1,   386,   387,   388,   389,\n      390,   391,   392,   393,   394,   395,   396,   397,   398,   399,\n-     400,   401,    -1,   403,   404,   405,   406,   407,   408,   409,\n+     400,   401,    -1,   403,   404,    -1,   406,   407,   408,   409,\n      410,   411,   412,    -1,   414,   415,    -1,    -1,   418,   419,\n      420,   421,   422,    -1,   424,   425,   426,   427,   428,   429,\n-     430,   431,    -1,    -1,   434,   435,   436,   437,   438,   439,\n+     430,   431,    -1,    -1,   434,   435,   436,    -1,   438,   439,\n      440,   441,    -1,   443,   444,   445,   446,   447,   448,   449,\n       -1,   451,   452,   453,   454,   455,   456,   457,    -1,    -1,\n-     460,    -1,   462,   463,   464,   465,   466,   467,   468,   469,\n+     460,    -1,    -1,   463,   464,   465,   466,   467,   468,   469,\n      470,   471,   472,   473,   474,   475,   476,   477,   478,   479,\n-     480,   481,   482,   483,    -1,    -1,   486,     3,     4,     5,\n-      -1,    -1,    -1,     9,    -1,    -1,    -1,    -1,    -1,    -1,\n-     500,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,\n-      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,\n-      -1,    37,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,\n-      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,\n-      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,\n-      -1,    67,    68,    69,    70,    71,    -1,    73,    74,    75,\n-      76,    77,    -1,    79,    -1,    81,    82,    83,    84,    85,\n-      86,    87,    88,    89,    90,    -1,    92,    93,    94,    95,\n-      96,    97,    -1,    99,   100,   101,   102,   103,   104,   105,\n-     106,   107,   108,   109,   110,   111,   112,    -1,   114,    -1,\n-     116,   117,   118,   119,   120,   121,    -1,   123,   124,   125,\n-     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,\n-     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,\n-     146,   147,   148,   149,   150,   151,   152,   153,   154,   155,\n-     156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,\n-     166,    -1,   168,   169,   170,   171,   172,   173,    -1,   175,\n-      -1,   177,   178,   179,    -1,   181,   182,   183,   184,   185,\n-     186,   187,   188,   189,   190,   191,   192,    -1,   194,   195,\n-     196,   197,   198,   199,   200,    -1,   202,   203,   204,   205,\n-     206,   207,   208,   209,   210,   211,    -1,   213,    -1,   215,\n-     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,\n-      -1,    -1,   228,   229,   230,   231,    -1,   233,   234,   235,\n-     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,\n-     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,\n-     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,\n-     266,    -1,   268,   269,   270,   271,    -1,   273,   274,   275,\n-     276,   277,   278,    -1,   280,   281,   282,    -1,   284,   285,\n-     286,    -1,    -1,   289,   290,   291,   292,   293,   294,   295,\n-     296,   297,   298,   299,   300,   301,   302,   303,   304,    -1,\n-      -1,    -1,    -1,   309,   310,   311,   312,   313,   314,   315,\n-     316,   317,   318,    -1,   320,   321,   322,   323,   324,   325,\n-      -1,   327,   328,   329,   330,   331,   332,   333,   334,    -1,\n-     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,\n-     346,   347,   348,    -1,   350,   351,   352,   353,   354,   355,\n-     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,\n-     366,   367,    -1,   369,   370,   371,   372,   373,   374,   375,\n-     376,   377,   378,   379,   380,   381,   382,   383,   384,    -1,\n-     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,\n-     396,   397,   398,   399,   400,   401,    -1,   403,   404,    -1,\n-     406,   407,   408,   409,   410,   411,   412,    -1,   414,   415,\n-      -1,    -1,   418,   419,   420,   421,   422,   423,   424,   425,\n-     426,   427,   428,   429,   430,   431,    -1,    -1,   434,   435,\n-     436,    -1,   438,   439,   440,   441,    -1,   443,   444,   445,\n-     446,   447,   448,   449,    -1,   451,   452,   453,   454,   455,\n-     456,   457,    -1,    -1,   460,    -1,    -1,   463,   464,   465,\n-     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,\n-     476,   477,   478,   479,   480,   481,   482,   483,     3,    -1,\n-       5,    -1,    -1,    -1,    -1,   491,   492,   493,    -1,    -1,\n-      -1,    -1,    -1,    -1,   500,    -1,    -1,    22,    23,    24,\n+     480,   481,   482,   483,     3,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+     500,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,\n+      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,\n+      49,    50,    51,    52,    53,    54,    55,    56,    57,    -1,\n+      59,    60,    61,    62,    63,    64,    -1,    66,    67,    68,\n+      69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,\n+      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,\n+      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,\n+      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,\n+     109,   110,   111,   112,    -1,   114,    -1,   116,   117,   118,\n+     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,\n+      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,\n+      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,\n+     149,   150,   151,   152,   153,   154,    -1,   156,    -1,   158,\n+     159,   160,   161,    -1,   163,    -1,   165,   166,    -1,   168,\n+     169,   170,   171,   172,   173,    -1,   175,    -1,   177,   178,\n+     179,    -1,   181,   182,   183,   184,   185,   186,   187,   188,\n+     189,   190,   191,   192,    -1,   194,   195,   196,   197,   198,\n+     199,   200,    -1,   202,   203,   204,   205,   206,   207,   208,\n+     209,   210,   211,    -1,   213,    -1,   215,   216,   217,   218,\n+     219,   220,   221,   222,   223,   224,   225,    -1,    -1,   228,\n+     229,   230,   231,    -1,   233,   234,   235,   236,   237,   238,\n+     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,\n+     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,\n+     259,   260,   261,   262,   263,   264,   265,   266,    -1,   268,\n+     269,   270,   271,    -1,   273,   274,   275,   276,   277,   278,\n+      -1,   280,   281,    -1,    -1,   284,   285,   286,    -1,    -1,\n+     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,\n+     299,   300,   301,   302,   303,   304,    -1,    -1,    -1,    -1,\n+     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,\n+      -1,   320,   321,   322,   323,   324,   325,    -1,   327,   328,\n+     329,   330,   331,   332,   333,   334,    -1,   336,   337,   338,\n+     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,\n+      -1,   350,   351,   352,   353,   354,   355,   356,   357,   358,\n+     359,   360,   361,   362,   363,   364,   365,   366,   367,    -1,\n+      -1,   370,   371,   372,   373,   374,   375,   376,   377,   378,\n+     379,   380,   381,   382,   383,   384,    -1,   386,   387,   388,\n+     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,\n+     399,   400,   401,    -1,   403,   404,    -1,   406,   407,   408,\n+     409,   410,   411,   412,    -1,   414,   415,    -1,    -1,   418,\n+     419,   420,   421,   422,    -1,   424,   425,   426,   427,   428,\n+     429,   430,   431,    -1,    -1,   434,   435,   436,    -1,   438,\n+     439,   440,   441,    -1,   443,   444,   445,   446,   447,   448,\n+     449,    -1,   451,   452,   453,   454,   455,   456,   457,    -1,\n+      -1,   460,    -1,    -1,   463,   464,   465,   466,   467,   468,\n+     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,\n+     479,   480,   481,   482,   483,     3,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,   500,    -1,    -1,    22,    23,    24,    25,    26,    27,\n+      28,    29,    30,    31,    32,    33,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,\n+      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,\n+      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,\n+      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,\n+      -1,    -1,    -1,    81,    82,    83,    84,    85,    86,    -1,\n+      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,\n+      -1,    -1,   100,   101,   102,   103,   104,   105,   106,   107,\n+     108,   109,   110,   111,   112,    -1,   114,    -1,   116,   117,\n+     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,\n+      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,\n+     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,\n+     148,   149,   150,   151,   152,   153,   154,    -1,   156,    -1,\n+     158,   159,   160,   161,    -1,   163,    -1,   165,    -1,   167,\n+      -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,   177,\n+     178,   179,    -1,   181,   182,   183,   184,   185,   186,   187,\n+      -1,   189,   190,   191,   192,    -1,   194,   195,   196,   197,\n+     198,   199,   200,    -1,   202,    -1,   204,   205,   206,   207,\n+     208,   209,   210,   211,    -1,   213,    -1,   215,    -1,    -1,\n+     218,    -1,   220,   221,   222,   223,   224,   225,    -1,    -1,\n+     228,    -1,   230,    -1,    -1,   233,   234,   235,   236,   237,\n+     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,\n+     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,\n+     258,   259,   260,    -1,   262,   263,   264,   265,   266,    -1,\n+     268,   269,    -1,   271,    -1,   273,   274,   275,   276,   277,\n+     278,    -1,   280,   281,    -1,    -1,   284,   285,   286,    -1,\n+      -1,   289,   290,    -1,   292,    -1,   294,   295,   296,   297,\n+     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,\n+      -1,   309,   310,   311,    -1,   313,   314,   315,   316,   317,\n+     318,    -1,   320,   321,   322,   323,   324,   325,    -1,   327,\n+     328,   329,   330,   331,   332,   333,   334,    -1,   336,   337,\n+     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,\n+     348,    -1,   350,   351,    -1,   353,   354,   355,   356,   357,\n+     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,\n+     368,    -1,   370,   371,   372,   373,   374,   375,   376,   377,\n+     378,   379,    -1,   381,   382,   383,   384,    -1,   386,   387,\n+     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,\n+     398,   399,   400,   401,    -1,   403,   404,   405,   406,    -1,\n+     408,   409,   410,   411,   412,    -1,   414,   415,    -1,    -1,\n+     418,   419,   420,   421,   422,    -1,   424,   425,   426,   427,\n+     428,   429,   430,   431,    -1,    -1,   434,   435,   436,   437,\n+     438,   439,   440,   441,    -1,   443,   444,   445,   446,   447,\n+     448,   449,    -1,   451,    -1,   453,   454,   455,   456,   457,\n+      -1,    -1,   460,    -1,   462,   463,   464,   465,   466,   467,\n+     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,\n+     478,   479,   480,   481,   482,   483,     3,    -1,   486,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,   500,    -1,    -1,    22,    23,    24,    25,    26,\n+      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,\n+      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,\n+      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,\n+      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,\n+      77,    -1,    -1,    -1,    81,    82,    83,    84,    85,    86,\n+      -1,    88,    89,    90,    -1,    92,    93,    94,    95,    96,\n+      97,    -1,    -1,   100,   101,   102,   103,   104,   105,   106,\n+     107,   108,   109,   110,   111,   112,    -1,   114,    -1,   116,\n+     117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,\n+     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,   136,\n+     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,\n+     147,   148,   149,   150,   151,   152,   153,   154,    -1,   156,\n+      -1,   158,   159,   160,   161,    -1,   163,    -1,   165,    -1,\n+     167,    -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,\n+     177,   178,   179,    -1,   181,   182,   183,   184,   185,   186,\n+     187,    -1,   189,   190,   191,   192,    -1,   194,   195,   196,\n+     197,   198,   199,   200,    -1,   202,    -1,   204,   205,   206,\n+     207,   208,   209,   210,   211,    -1,   213,    -1,   215,    -1,\n+      -1,   218,    -1,   220,   221,   222,   223,   224,   225,    -1,\n+      -1,   228,    -1,   230,    -1,    -1,   233,   234,   235,   236,\n+     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,\n+     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,\n+     257,   258,   259,   260,    -1,   262,   263,   264,   265,   266,\n+      -1,   268,   269,    -1,   271,    -1,   273,   274,   275,   276,\n+     277,   278,    -1,   280,   281,    -1,    -1,   284,   285,   286,\n+      -1,    -1,   289,   290,    -1,   292,    -1,   294,   295,   296,\n+     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,\n+     307,    -1,   309,   310,   311,    -1,   313,   314,   315,   316,\n+     317,   318,    -1,   320,   321,   322,   323,   324,   325,    -1,\n+     327,   328,   329,   330,   331,   332,   333,   334,    -1,   336,\n+     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,\n+     347,   348,    -1,   350,   351,    -1,   353,   354,   355,   356,\n+     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,\n+     367,   368,    -1,   370,   371,   372,   373,   374,   375,   376,\n+     377,   378,   379,    -1,   381,   382,   383,   384,    -1,   386,\n+     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,\n+     397,   398,   399,   400,   401,    -1,   403,   404,   405,   406,\n+      -1,   408,   409,   410,   411,   412,    -1,   414,   415,    -1,\n+      -1,   418,   419,   420,   421,   422,    -1,   424,   425,   426,\n+     427,   428,   429,   430,   431,    -1,    -1,   434,   435,   436,\n+     437,   438,   439,   440,   441,    -1,   443,   444,   445,   446,\n+     447,   448,   449,    -1,   451,    -1,   453,   454,   455,   456,\n+     457,    -1,    -1,   460,    -1,   462,   463,   464,   465,   466,\n+     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,\n+     477,   478,   479,   480,   481,   482,   483,    -1,     3,   486,\n+       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,   500,    -1,    -1,    -1,    22,    23,    24,\n       25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,    44,\n-      -1,    46,    47,    48,    49,    50,    51,    52,    53,    54,\n-      55,    56,    57,    -1,    59,    60,    61,    62,    63,    64,\n-      -1,    66,    67,    68,    69,    70,    71,    -1,    73,    74,\n-      75,    76,    77,    -1,    79,    -1,    81,    82,    83,    84,\n-      85,    86,    87,    88,    89,    90,    -1,    92,    93,    94,\n-      95,    96,    97,    -1,    99,   100,   101,   102,   103,   104,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,\n+      -1,    46,    47,    48,    -1,    50,    51,    52,    53,    54,\n+      -1,    56,    57,    -1,    59,    60,    61,    62,    63,    64,\n+      -1,    -1,    67,    68,    69,    70,    71,    -1,    73,    74,\n+      75,    76,    77,    -1,    -1,    -1,    81,    82,    83,    84,\n+      85,    86,    -1,    88,    89,    90,    -1,    92,    93,    94,\n+      95,    96,    97,    -1,    -1,   100,   101,   102,   103,   104,\n      105,   106,   107,   108,   109,   110,   111,   112,    -1,   114,\n       -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,\n      125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,\n       -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,\n      145,   146,   147,   148,   149,   150,   151,   152,   153,   154,\n       -1,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,\n-     165,   166,    -1,   168,   169,   170,   171,   172,   173,    -1,\n+     165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,\n      175,    -1,   177,   178,   179,    -1,   181,   182,   183,   184,\n-     185,   186,   187,   188,   189,   190,   191,   192,    -1,   194,\n-     195,   196,   197,   198,   199,   200,    -1,   202,   203,   204,\n+     185,   186,   187,    -1,   189,   190,   191,   192,    -1,   194,\n+     195,   196,   197,   198,   199,   200,    -1,   202,    -1,   204,\n      205,   206,   207,   208,   209,   210,   211,    -1,   213,    -1,\n-     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,\n-     225,   226,    -1,   228,   229,   230,   231,    -1,   233,   234,\n-     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,\n-     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,\n-     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,\n-     265,   266,    -1,   268,   269,   270,   271,    -1,   273,   274,\n-     275,   276,   277,   278,    -1,   280,   281,    -1,   283,   284,\n-     285,   286,    -1,    -1,   289,   290,   291,   292,   293,   294,\n+     215,    -1,    -1,   218,    -1,   220,   221,   222,   223,   224,\n+     225,    -1,    -1,   228,    -1,   230,    -1,    -1,   233,   234,\n+     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,\n+     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,\n+     255,   256,   257,   258,   259,   260,    -1,   262,   263,   264,\n+     265,   266,    -1,   268,   269,    -1,   271,    -1,   273,   274,\n+     275,   276,   277,   278,    -1,   280,   281,    -1,    -1,   284,\n+     285,   286,    -1,    -1,   289,   290,    -1,   292,    -1,   294,\n      295,   296,   297,   298,   299,   300,   301,   302,   303,   304,\n-      -1,    -1,    -1,    -1,   309,   310,   311,   312,   313,   314,\n+      -1,    -1,    -1,    -1,   309,   310,   311,    -1,   313,   314,\n      315,   316,   317,   318,    -1,   320,   321,   322,   323,   324,\n      325,    -1,   327,   328,   329,   330,   331,   332,   333,   334,\n       -1,   336,   337,   338,   339,   340,   341,   342,   343,   344,\n-     345,   346,   347,   348,    -1,   350,   351,   352,   353,   354,\n+     345,   346,   347,   348,    -1,   350,   351,    -1,   353,   354,\n      355,   356,   357,   358,   359,   360,   361,   362,   363,   364,\n      365,   366,   367,    -1,    -1,   370,   371,   372,   373,   374,\n-     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,\n+     375,   376,   377,   378,   379,    -1,   381,   382,   383,   384,\n       -1,   386,   387,   388,   389,   390,   391,   392,   393,   394,\n      395,   396,   397,   398,   399,   400,   401,    -1,   403,   404,\n-      -1,   406,   407,   408,   409,   410,   411,   412,    -1,   414,\n+      -1,   406,    -1,   408,   409,   410,   411,   412,    -1,   414,\n      415,    -1,    -1,   418,   419,   420,   421,   422,    -1,   424,\n      425,   426,   427,   428,   429,   430,   431,    -1,    -1,   434,\n      435,   436,    -1,   438,   439,   440,   441,    -1,   443,   444,\n-     445,   446,   447,   448,   449,    -1,   451,   452,   453,   454,\n+     445,   446,   447,   448,   449,    -1,   451,    -1,   453,   454,\n      455,   456,   457,    -1,    -1,   460,    -1,    -1,   463,   464,\n      465,   466,   467,   468,   469,   470,   471,   472,   473,   474,\n      475,   476,   477,   478,   479,   480,   481,   482,   483,     3,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,   500,    -1,    -1,    22,    23,\n       24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,\n-      44,    -1,    46,    47,    48,    49,    50,    51,    52,    53,\n-      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,\n-      64,    -1,    66,    67,    68,    69,    70,    71,    -1,    73,\n-      74,    75,    76,    77,    -1,    79,    -1,    81,    82,    83,\n-      84,    85,    86,    87,    88,    89,    90,    -1,    92,    93,\n-      94,    95,    96,    97,    -1,    99,   100,   101,   102,   103,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,\n+      44,    -1,    46,    47,    48,    -1,    50,    51,    52,    53,\n+      54,    -1,    56,    57,    -1,    59,    60,    61,    62,    63,\n+      64,    -1,    -1,    67,    68,    69,    70,    71,    -1,    73,\n+      74,    75,    76,    77,    -1,    -1,    -1,    81,    82,    83,\n+      84,    85,    86,    -1,    88,    89,    90,    -1,    92,    93,\n+      94,    95,    96,    97,    -1,    -1,   100,   101,   102,   103,\n      104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,\n      114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,\n      124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,\n      134,    -1,   136,   137,   138,    -1,   140,   141,   142,    -1,\n      144,   145,   146,   147,   148,   149,   150,   151,   152,   153,\n      154,    -1,   156,    -1,   158,   159,   160,   161,    -1,   163,\n-      -1,   165,   166,    -1,   168,   169,   170,   171,   172,   173,\n+      -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,\n       -1,   175,    -1,   177,   178,   179,    -1,   181,   182,   183,\n-     184,   185,   186,   187,   188,   189,   190,   191,   192,    -1,\n-     194,   195,   196,   197,   198,   199,   200,    -1,   202,   203,\n+     184,   185,   186,   187,    -1,   189,   190,   191,   192,    -1,\n+     194,   195,   196,   197,   198,   199,   200,    -1,   202,    -1,\n      204,   205,   206,   207,   208,   209,   210,   211,    -1,   213,\n-      -1,   215,   216,   217,   218,   219,   220,   221,   222,   223,\n-     224,   225,    -1,    -1,   228,   229,   230,   231,    -1,   233,\n+      -1,   215,    -1,    -1,   218,    -1,   220,   221,   222,   223,\n+     224,   225,    -1,    -1,   228,    -1,   230,    -1,    -1,   233,\n      234,   235,   236,   237,   238,   239,   240,   241,   242,   243,\n      244,   245,   246,   247,   248,   249,   250,   251,   252,   253,\n-     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,\n-     264,   265,   266,    -1,   268,   269,   270,   271,    -1,   273,\n+     254,   255,   256,   257,   258,   259,   260,    -1,   262,   263,\n+     264,   265,   266,    -1,   268,   269,    -1,   271,    -1,   273,\n      274,   275,   276,   277,   278,    -1,   280,   281,    -1,    -1,\n-     284,   285,   286,    -1,    -1,   289,   290,   291,   292,   293,\n+     284,   285,   286,    -1,    -1,   289,   290,    -1,   292,    -1,\n      294,   295,   296,   297,   298,   299,   300,   301,   302,   303,\n-     304,    -1,    -1,    -1,    -1,   309,   310,   311,   312,   313,\n+     304,    -1,    -1,    -1,    -1,   309,   310,   311,    -1,   313,\n      314,   315,   316,   317,   318,    -1,   320,   321,   322,   323,\n      324,   325,    -1,   327,   328,   329,   330,   331,   332,   333,\n      334,    -1,   336,   337,   338,   339,   340,   341,   342,   343,\n-     344,   345,   346,   347,   348,    -1,   350,   351,   352,   353,\n+     344,   345,   346,   347,   348,    -1,   350,   351,    -1,   353,\n      354,   355,   356,   357,   358,   359,   360,   361,   362,   363,\n      364,   365,   366,   367,    -1,    -1,   370,   371,   372,   373,\n-     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,\n+     374,   375,   376,   377,   378,   379,    -1,   381,   382,   383,\n      384,    -1,   386,   387,   388,   389,   390,   391,   392,   393,\n      394,   395,   396,   397,   398,   399,   400,   401,    -1,   403,\n-     404,    -1,   406,   407,   408,   409,   410,   411,   412,    -1,\n+     404,    -1,   406,    -1,   408,   409,   410,   411,   412,    -1,\n      414,   415,    -1,    -1,   418,   419,   420,   421,   422,    -1,\n      424,   425,   426,   427,   428,   429,   430,   431,    -1,    -1,\n      434,   435,   436,    -1,   438,   439,   440,   441,    -1,   443,\n-     444,   445,   446,   447,   448,   449,    -1,   451,   452,   453,\n+     444,   445,   446,   447,   448,   449,    -1,   451,    -1,   453,\n      454,   455,   456,   457,    -1,    -1,   460,    -1,    -1,   463,\n      464,   465,   466,   467,   468,   469,   470,   471,   472,   473,\n      474,   475,   476,   477,   478,   479,   480,   481,   482,   483,\n-       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,   500,    -1,    -1,    22,\n       23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,\n-      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,\n-      43,    44,    -1,    46,    47,    48,    49,    50,    51,    52,\n-      53,    54,    55,    56,    57,    -1,    59,    60,    61,    62,\n-      63,    64,    -1,    66,    67,    68,    69,    70,    71,    -1,\n-      73,    74,    75,    76,    77,    -1,    79,    -1,    81,    82,\n-      83,    84,    85,    86,    87,    88,    89,    90,    -1,    92,\n-      93,    94,    95,    96,    97,    -1,    99,   100,   101,   102,\n+      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      43,    44,    -1,    46,    47,    48,    -1,    50,    51,    52,\n+      53,    54,    -1,    56,    57,    -1,    59,    60,    61,    62,\n+      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    -1,\n+      73,    74,    75,    76,    77,    -1,    -1,    -1,    81,    82,\n+      83,    84,    85,    86,    -1,    88,    89,    90,    -1,    92,\n+      93,    94,    95,    96,    97,    -1,    -1,   100,   101,   102,\n      103,   104,   105,   106,   107,   108,   109,   110,   111,   112,\n       -1,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,\n      123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,\n      133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,\n       -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,\n      153,   154,    -1,   156,    -1,   158,   159,   160,   161,    -1,\n-     163,    -1,   165,   166,    -1,   168,   169,   170,   171,   172,\n+     163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,\n      173,    -1,   175,    -1,   177,   178,   179,    -1,   181,   182,\n-     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,\n+     183,   184,   185,   186,   187,    -1,   189,   190,   191,   192,\n       -1,   194,   195,   196,   197,   198,   199,   200,    -1,   202,\n-     203,   204,   205,   206,   207,   208,   209,   210,   211,    -1,\n-     213,    -1,   215,   216,   217,   218,   219,   220,   221,   222,\n-     223,   224,   225,    -1,    -1,   228,   229,   230,   231,    -1,\n+      -1,   204,   205,   206,   207,   208,   209,   210,   211,    -1,\n+     213,    -1,   215,    -1,    -1,   218,    -1,   220,   221,   222,\n+     223,   224,   225,    -1,    -1,   228,    -1,   230,    -1,    -1,\n      233,   234,   235,   236,   237,   238,   239,   240,   241,   242,\n      243,   244,   245,   246,   247,   248,   249,   250,   251,   252,\n-     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,\n-     263,   264,   265,   266,    -1,   268,   269,   270,   271,    -1,\n+     253,   254,   255,   256,   257,   258,   259,   260,    -1,   262,\n+     263,   264,   265,   266,    -1,   268,   269,    -1,   271,    -1,\n      273,   274,   275,   276,   277,   278,    -1,   280,   281,    -1,\n-      -1,   284,   285,   286,    -1,    -1,   289,   290,   291,   292,\n-     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,\n-     303,   304,    -1,    -1,    -1,    -1,   309,   310,   311,   312,\n+      -1,   284,   285,   286,    -1,    -1,   289,   290,    -1,   292,\n+      -1,   294,   295,   296,   297,   298,   299,   300,   301,   302,\n+     303,   304,    -1,    -1,    -1,    -1,   309,   310,   311,    -1,\n      313,   314,   315,   316,   317,   318,    -1,   320,   321,   322,\n      323,   324,   325,    -1,   327,   328,   329,   330,   331,   332,\n      333,   334,    -1,   336,   337,   338,   339,   340,   341,   342,\n-     343,   344,   345,   346,   347,   348,    -1,   350,   351,   352,\n+     343,   344,   345,   346,   347,   348,    -1,   350,   351,    -1,\n      353,   354,   355,   356,   357,   358,   359,   360,   361,   362,\n      363,   364,   365,   366,   367,    -1,    -1,   370,   371,   372,\n-     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,\n+     373,   374,   375,   376,   377,   378,   379,    -1,   381,   382,\n      383,   384,    -1,   386,   387,   388,   389,   390,   391,   392,\n      393,   394,   395,   396,   397,   398,   399,   400,   401,    -1,\n-     403,   404,    -1,   406,   407,   408,   409,   410,   411,   412,\n+     403,   404,    -1,   406,    -1,   408,   409,   410,   411,   412,\n       -1,   414,   415,    -1,    -1,   418,   419,   420,   421,   422,\n       -1,   424,   425,   426,   427,   428,   429,   430,   431,    -1,\n       -1,   434,   435,   436,    -1,   438,   439,   440,   441,    -1,\n-     443,   444,   445,   446,   447,   448,   449,    -1,   451,   452,\n+     443,   444,   445,   446,   447,   448,   449,    -1,   451,    -1,\n      453,   454,   455,   456,   457,    -1,    -1,   460,    -1,    -1,\n      463,   464,   465,   466,   467,   468,   469,   470,   471,   472,\n      473,   474,   475,   476,   477,   478,   479,   480,   481,   482,\n-     483,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+     483,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,   500,    -1,    -1,\n-      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,\n+      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,\n       32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,\n       52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,\n@@ -13781,7 +14033,7 @@ static const yytype_int16 yycheck[] =\n      132,   133,   134,    -1,   136,   137,   138,    -1,   140,   141,\n      142,    -1,   144,   145,   146,   147,   148,   149,   150,   151,\n      152,   153,   154,    -1,   156,    -1,   158,   159,   160,   161,\n-      -1,   163,    -1,   165,    -1,   167,    -1,   169,   170,   171,\n+      -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,\n       -1,   173,    -1,   175,    -1,   177,   178,   179,    -1,   181,\n      182,   183,   184,   185,   186,   187,    -1,   189,   190,   191,\n      192,    -1,   194,   195,   196,   197,   198,   199,   200,    -1,\n@@ -13795,25 +14047,25 @@ static const yytype_int16 yycheck[] =\n       -1,   273,   274,   275,   276,   277,   278,    -1,   280,   281,\n       -1,    -1,   284,   285,   286,    -1,    -1,   289,   290,    -1,\n      292,    -1,   294,   295,   296,   297,   298,   299,   300,   301,\n-     302,   303,   304,   305,   306,   307,    -1,   309,   310,   311,\n+     302,   303,   304,    -1,    -1,    -1,    -1,   309,   310,   311,\n       -1,   313,   314,   315,   316,   317,   318,    -1,   320,   321,\n      322,   323,   324,   325,    -1,   327,   328,   329,   330,   331,\n      332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,\n      342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,\n       -1,   353,   354,   355,   356,   357,   358,   359,   360,   361,\n-     362,   363,   364,   365,   366,   367,   368,    -1,   370,   371,\n+     362,   363,   364,   365,   366,   367,    -1,    -1,   370,   371,\n      372,   373,   374,   375,   376,   377,   378,   379,    -1,   381,\n      382,   383,   384,    -1,   386,   387,   388,   389,   390,   391,\n      392,   393,   394,   395,   396,   397,   398,   399,   400,   401,\n-      -1,   403,   404,   405,   406,    -1,   408,   409,   410,   411,\n+      -1,   403,   404,    -1,   406,    -1,   408,   409,   410,   411,\n      412,    -1,   414,   415,    -1,    -1,   418,   419,   420,   421,\n      422,    -1,   424,   425,   426,   427,   428,   429,   430,   431,\n-      -1,    -1,   434,   435,   436,   437,   438,   439,   440,   441,\n+      -1,    -1,   434,   435,   436,    -1,   438,   439,   440,   441,\n       -1,   443,   444,   445,   446,   447,   448,   449,    -1,   451,\n       -1,   453,   454,   455,   456,   457,    -1,    -1,   460,    -1,\n-     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,\n+      -1,   463,   464,   465,   466,   467,   468,   469,   470,   471,\n      472,   473,   474,   475,   476,   477,   478,   479,   480,   481,\n-     482,   483,     3,    -1,   486,    -1,    -1,    -1,    -1,    -1,\n+     482,   483,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   500,    -1,\n       -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,\n       31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n@@ -13829,7 +14081,7 @@ static const yytype_int16 yycheck[] =\n      131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,\n      141,   142,    -1,   144,   145,   146,   147,   148,   149,   150,\n      151,   152,   153,   154,    -1,   156,    -1,   158,   159,   160,\n-     161,    -1,   163,    -1,   165,    -1,   167,    -1,   169,   170,\n+     161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,\n      171,    -1,   173,    -1,   175,    -1,   177,   178,   179,    -1,\n      181,   182,   183,   184,   185,   186,   187,    -1,   189,   190,\n      191,   192,    -1,   194,   195,   196,   197,   198,   199,   200,\n@@ -13843,27 +14095,75 @@ static const yytype_int16 yycheck[] =\n      271,    -1,   273,   274,   275,   276,   277,   278,    -1,   280,\n      281,    -1,    -1,   284,   285,   286,    -1,    -1,   289,   290,\n       -1,   292,    -1,   294,   295,   296,   297,   298,   299,   300,\n-     301,   302,   303,   304,   305,   306,   307,    -1,   309,   310,\n+     301,   302,   303,   304,    -1,    -1,    -1,    -1,   309,   310,\n      311,    -1,   313,   314,   315,   316,   317,   318,    -1,   320,\n      321,   322,   323,   324,   325,    -1,   327,   328,   329,   330,\n      331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,\n      341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,\n      351,    -1,   353,   354,   355,   356,   357,   358,   359,   360,\n-     361,   362,   363,   364,   365,   366,   367,   368,    -1,   370,\n+     361,   362,   363,   364,   365,   366,   367,    -1,    -1,   370,\n      371,   372,   373,   374,   375,   376,   377,   378,   379,    -1,\n      381,   382,   383,   384,    -1,   386,   387,   388,   389,   390,\n      391,   392,   393,   394,   395,   396,   397,   398,   399,   400,\n-     401,    -1,   403,   404,   405,   406,    -1,   408,   409,   410,\n+     401,    -1,   403,   404,    -1,   406,    -1,   408,   409,   410,\n      411,   412,    -1,   414,   415,    -1,    -1,   418,   419,   420,\n      421,   422,    -1,   424,   425,   426,   427,   428,   429,   430,\n-     431,    -1,    -1,   434,   435,   436,   437,   438,   439,   440,\n+     431,    -1,    -1,   434,   435,   436,    -1,   438,   439,   440,\n      441,    -1,   443,   444,   445,   446,   447,   448,   449,    -1,\n      451,    -1,   453,   454,   455,   456,   457,    -1,    -1,   460,\n-      -1,   462,   463,   464,   465,   466,   467,   468,   469,   470,\n+      -1,    -1,   463,   464,   465,   466,   467,   468,   469,   470,\n      471,   472,   473,   474,   475,   476,   477,   478,   479,   480,\n-     481,   482,   483,    -1,     3,   486,     5,    -1,    -1,    -1,\n+     481,   482,   483,     3,    -1,     5,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   500,\n-      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,\n+      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,\n+      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,\n+      50,    51,    52,    53,    54,    -1,    56,    57,    -1,    59,\n+      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,\n+      70,    71,    -1,    73,    74,    75,    76,    77,    -1,    -1,\n+      -1,    81,    82,    83,    84,    85,    86,    -1,    88,    89,\n+      90,    -1,    92,    93,    94,    95,    96,    97,    -1,    -1,\n+     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,\n+     110,   111,   112,    -1,   114,    -1,   116,   117,   118,   119,\n+     120,   121,    -1,   123,   124,   125,   126,   127,    -1,    -1,\n+     130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,\n+     140,   141,   142,    -1,   144,   145,   146,   147,   148,   149,\n+     150,   151,   152,   153,   154,    -1,   156,    -1,   158,   159,\n+     160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,\n+     170,   171,    -1,   173,    -1,   175,    -1,   177,   178,   179,\n+      -1,   181,   182,   183,   184,   185,   186,   187,    -1,   189,\n+     190,   191,   192,    -1,   194,   195,   196,   197,   198,   199,\n+     200,    -1,   202,    -1,   204,   205,   206,   207,   208,   209,\n+     210,   211,    -1,   213,    -1,   215,    -1,    -1,   218,    -1,\n+     220,   221,   222,   223,   224,   225,    -1,    -1,   228,    -1,\n+     230,    -1,    -1,   233,   234,   235,   236,   237,   238,   239,\n+     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,\n+     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,\n+     260,    -1,   262,   263,   264,   265,   266,    -1,   268,   269,\n+      -1,   271,    -1,   273,   274,   275,   276,   277,   278,    -1,\n+     280,   281,    -1,    -1,   284,   285,   286,    -1,    -1,   289,\n+     290,    -1,   292,    -1,   294,   295,   296,   297,   298,   299,\n+     300,   301,   302,   303,   304,    -1,    -1,    -1,    -1,   309,\n+     310,   311,    -1,   313,   314,   315,   316,   317,   318,    -1,\n+     320,   321,   322,   323,   324,   325,    -1,   327,   328,   329,\n+     330,   331,   332,   333,   334,    -1,   336,   337,   338,   339,\n+     340,   341,   342,   343,   344,   345,   346,   347,   348,    -1,\n+     350,   351,    -1,   353,   354,   355,   356,   357,   358,   359,\n+     360,   361,   362,   363,   364,   365,   366,   367,    -1,    -1,\n+     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,\n+      -1,   381,   382,   383,   384,    -1,   386,   387,   388,   389,\n+     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,\n+     400,   401,    -1,   403,   404,    -1,   406,    -1,   408,   409,\n+     410,   411,   412,    -1,   414,   415,    -1,    -1,   418,   419,\n+     420,   421,   422,    -1,   424,   425,   426,   427,   428,   429,\n+     430,   431,    -1,    -1,   434,   435,   436,    -1,   438,   439,\n+     440,   441,    -1,   443,   444,   445,   446,   447,   448,   449,\n+      -1,   451,    -1,   453,   454,   455,   456,   457,    -1,    -1,\n+     460,    -1,    -1,   463,   464,   465,   466,   467,   468,   469,\n+     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,\n+     480,   481,   482,   483,     3,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+     500,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,\n       29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,\n       -1,    50,    51,    52,    53,    54,    -1,    56,    57,    -1,\n@@ -13909,7 +14209,7 @@ static const yytype_int16 yycheck[] =\n      449,    -1,   451,    -1,   453,   454,   455,   456,   457,    -1,\n       -1,   460,    -1,    -1,   463,   464,   465,   466,   467,   468,\n      469,   470,   471,   472,   473,   474,   475,   476,   477,   478,\n-     479,   480,   481,   482,   483,     3,    -1,     5,    -1,    -1,\n+     479,   480,   481,   482,   483,     3,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,   500,    -1,    -1,    22,    23,    24,    25,    26,    27,\n       28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,\n@@ -13957,7 +14257,7 @@ static const yytype_int16 yycheck[] =\n      448,   449,    -1,   451,    -1,   453,   454,   455,   456,   457,\n       -1,    -1,   460,    -1,    -1,   463,   464,   465,   466,   467,\n      468,   469,   470,   471,   472,   473,   474,   475,   476,   477,\n-     478,   479,   480,   481,   482,   483,     3,    -1,     5,    -1,\n+     478,   479,   480,   481,   482,   483,     3,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,   500,    -1,    -1,    22,    23,    24,    25,    26,\n       27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,\n@@ -13990,168 +14290,72 @@ static const yytype_int16 yycheck[] =\n      297,   298,   299,   300,   301,   302,   303,   304,    -1,    -1,\n       -1,    -1,   309,   310,   311,    -1,   313,   314,   315,   316,\n      317,   318,    -1,   320,   321,   322,   323,   324,   325,    -1,\n-     327,   328,   329,   330,   331,   332,   333,   334,    -1,   336,\n-     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,\n-     347,   348,    -1,   350,   351,    -1,   353,   354,   355,   356,\n-     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,\n-     367,    -1,    -1,   370,   371,   372,   373,   374,   375,   376,\n-     377,   378,   379,    -1,   381,   382,   383,   384,    -1,   386,\n-     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,\n-     397,   398,   399,   400,   401,    -1,   403,   404,    -1,   406,\n-      -1,   408,   409,   410,   411,   412,    -1,   414,   415,    -1,\n-      -1,   418,   419,   420,   421,   422,    -1,   424,   425,   426,\n-     427,   428,   429,   430,   431,    -1,    -1,   434,   435,   436,\n-      -1,   438,   439,   440,   441,    -1,   443,   444,   445,   446,\n-     447,   448,   449,    -1,   451,    -1,   453,   454,   455,   456,\n-     457,    -1,    -1,   460,    -1,    -1,   463,   464,   465,   466,\n-     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,\n-     477,   478,   479,   480,   481,   482,   483,     3,    -1,     5,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,   500,    -1,    -1,    22,    23,    24,    25,\n-      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,\n-      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,\n-      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,\n-      -1,    67,    68,    69,    70,    71,    -1,    73,    74,    75,\n-      76,    77,    -1,    -1,    -1,    81,    82,    83,    84,    85,\n-      86,    -1,    88,    89,    90,    -1,    92,    93,    94,    95,\n-      96,    97,    -1,    -1,   100,   101,   102,   103,   104,   105,\n-     106,   107,   108,   109,   110,   111,   112,    -1,   114,    -1,\n-     116,   117,   118,   119,   120,   121,    -1,   123,   124,   125,\n-     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,\n-     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,\n-     146,   147,   148,   149,   150,   151,   152,   153,   154,    -1,\n-     156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,\n-      -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,\n-      -1,   177,   178,   179,    -1,   181,   182,   183,   184,   185,\n-     186,   187,    -1,   189,   190,   191,   192,    -1,   194,   195,\n-     196,   197,   198,   199,   200,    -1,   202,    -1,   204,   205,\n-     206,   207,   208,   209,   210,   211,    -1,   213,    -1,   215,\n-      -1,    -1,   218,    -1,   220,   221,   222,   223,   224,   225,\n-      -1,    -1,   228,    -1,   230,    -1,    -1,   233,   234,   235,\n-     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,\n-     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,\n-     256,   257,   258,   259,   260,    -1,   262,   263,   264,   265,\n-     266,    -1,   268,   269,    -1,   271,    -1,   273,   274,   275,\n-     276,   277,   278,    -1,   280,   281,    -1,    -1,   284,   285,\n-     286,    -1,    -1,   289,   290,    -1,   292,    -1,   294,   295,\n-     296,   297,   298,   299,   300,   301,   302,   303,   304,    -1,\n-      -1,    -1,    -1,   309,   310,   311,    -1,   313,   314,   315,\n-     316,   317,   318,    -1,   320,   321,   322,   323,   324,   325,\n-      -1,   327,   328,   329,   330,   331,   332,   333,   334,    -1,\n-     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,\n-     346,   347,   348,    -1,   350,   351,    -1,   353,   354,   355,\n-     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,\n-     366,   367,    -1,    -1,   370,   371,   372,   373,   374,   375,\n-     376,   377,   378,   379,    -1,   381,   382,   383,   384,    -1,\n-     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,\n-     396,   397,   398,   399,   400,   401,    -1,   403,   404,    -1,\n-     406,    -1,   408,   409,   410,   411,   412,    -1,   414,   415,\n-      -1,    -1,   418,   419,   420,   421,   422,    -1,   424,   425,\n-     426,   427,   428,   429,   430,   431,    -1,    -1,   434,   435,\n-     436,    -1,   438,   439,   440,   441,    -1,   443,   444,   445,\n-     446,   447,   448,   449,    -1,   451,    -1,   453,   454,   455,\n-     456,   457,    -1,    -1,   460,    -1,    -1,   463,   464,   465,\n-     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,\n-     476,   477,   478,   479,   480,   481,   482,   483,     3,    -1,\n-       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,   500,    -1,    -1,    22,    23,    24,\n-      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,\n-      -1,    46,    47,    48,    -1,    50,    51,    52,    53,    54,\n-      -1,    56,    57,    -1,    59,    60,    61,    62,    63,    64,\n-      -1,    -1,    67,    68,    69,    70,    71,    -1,    73,    74,\n-      75,    76,    77,    -1,    -1,    -1,    81,    82,    83,    84,\n-      85,    86,    -1,    88,    89,    90,    -1,    92,    93,    94,\n-      95,    96,    97,    -1,    -1,   100,   101,   102,   103,   104,\n-     105,   106,   107,   108,   109,   110,   111,   112,    -1,   114,\n-      -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,\n-     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,\n-      -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,\n-     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,\n-      -1,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,\n-     165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,\n-     175,    -1,   177,   178,   179,    -1,   181,   182,   183,   184,\n-     185,   186,   187,    -1,   189,   190,   191,   192,    -1,   194,\n-     195,   196,   197,   198,   199,   200,    -1,   202,    -1,   204,\n-     205,   206,   207,   208,   209,   210,   211,    -1,   213,    -1,\n-     215,    -1,    -1,   218,    -1,   220,   221,   222,   223,   224,\n-     225,    -1,    -1,   228,    -1,   230,    -1,    -1,   233,   234,\n+     327,   328,   329,   330,   331,   332,   333,   334,    -1,   336,\n+     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,\n+     347,   348,    -1,   350,   351,    -1,   353,   354,   355,   356,\n+     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,\n+     367,    -1,    -1,   370,   371,   372,   373,   374,   375,   376,\n+     377,   378,   379,    -1,   381,   382,   383,   384,    -1,   386,\n+     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,\n+     397,   398,   399,   400,   401,    -1,   403,   404,    -1,   406,\n+      -1,   408,   409,   410,   411,   412,    -1,   414,   415,    -1,\n+      -1,   418,   419,   420,   421,   422,    -1,   424,   425,   426,\n+     427,   428,   429,   430,   431,    -1,    -1,   434,   435,   436,\n+      -1,   438,   439,   440,   441,    -1,   443,   444,   445,   446,\n+     447,   448,   449,    -1,   451,    -1,   453,   454,   455,   456,\n+     457,    -1,    -1,   460,    -1,    -1,   463,   464,   465,   466,\n+     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,\n+     477,   478,   479,   480,   481,   482,   483,    -1,     3,     4,\n+       5,    -1,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,\n+      15,    16,    -1,   500,    19,    20,    21,    22,    23,    24,\n+      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,\n+      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,\n+      45,    46,    47,    48,    49,    50,    51,    52,    -1,    54,\n+      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,\n+      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,\n+      75,    76,    -1,    78,    79,    80,    81,    82,    83,    84,\n+      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,\n+      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,\n+     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,\n+     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,\n+     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,\n+     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,\n+     145,   146,   147,    -1,   149,   150,   151,   152,   153,    -1,\n+     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,\n+     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,\n+     175,   176,    -1,    -1,   179,   180,   181,   182,   183,   184,\n+     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,\n+     195,   196,   197,   198,   199,   200,   201,   202,   203,    -1,\n+     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,\n+     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,\n+     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,\n      235,   236,   237,   238,   239,   240,   241,   242,   243,   244,\n      245,   246,   247,   248,   249,   250,   251,   252,   253,   254,\n-     255,   256,   257,   258,   259,   260,    -1,   262,   263,   264,\n-     265,   266,    -1,   268,   269,    -1,   271,    -1,   273,   274,\n-     275,   276,   277,   278,    -1,   280,   281,    -1,    -1,   284,\n-     285,   286,    -1,    -1,   289,   290,    -1,   292,    -1,   294,\n+     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,\n+     265,   266,   267,   268,   269,   270,   271,   272,    -1,   274,\n+     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,\n+     285,   286,   287,   288,   289,    -1,   291,   292,   293,    -1,\n      295,   296,   297,   298,   299,   300,   301,   302,   303,   304,\n-      -1,    -1,    -1,    -1,   309,   310,   311,    -1,   313,   314,\n-     315,   316,   317,   318,    -1,   320,   321,   322,   323,   324,\n-     325,    -1,   327,   328,   329,   330,   331,   332,   333,   334,\n-      -1,   336,   337,   338,   339,   340,   341,   342,   343,   344,\n-     345,   346,   347,   348,    -1,   350,   351,    -1,   353,   354,\n+     305,   306,   307,   308,   309,   310,    -1,   312,   313,   314,\n+      -1,   316,   317,   318,   319,   320,   321,   322,   323,   324,\n+     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,\n+     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,\n+     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,\n      355,   356,   357,   358,   359,   360,   361,   362,   363,   364,\n-     365,   366,   367,    -1,    -1,   370,   371,   372,   373,   374,\n-     375,   376,   377,   378,   379,    -1,   381,   382,   383,   384,\n-      -1,   386,   387,   388,   389,   390,   391,   392,   393,   394,\n-     395,   396,   397,   398,   399,   400,   401,    -1,   403,   404,\n-      -1,   406,    -1,   408,   409,   410,   411,   412,    -1,   414,\n-     415,    -1,    -1,   418,   419,   420,   421,   422,    -1,   424,\n-     425,   426,   427,   428,   429,   430,   431,    -1,    -1,   434,\n-     435,   436,    -1,   438,   439,   440,   441,    -1,   443,   444,\n-     445,   446,   447,   448,   449,    -1,   451,    -1,   453,   454,\n-     455,   456,   457,    -1,    -1,   460,    -1,    -1,   463,   464,\n-     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,\n-     475,   476,   477,   478,   479,   480,   481,   482,   483,     3,\n-      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,   500,    -1,    -1,    22,    23,\n-      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,\n-      44,    -1,    46,    47,    48,    -1,    50,    51,    52,    53,\n-      54,    -1,    56,    57,    -1,    59,    60,    61,    62,    63,\n-      64,    -1,    -1,    67,    68,    69,    70,    71,    -1,    73,\n-      74,    75,    76,    77,    -1,    -1,    -1,    81,    82,    83,\n-      84,    85,    86,    -1,    88,    89,    90,    -1,    92,    93,\n-      94,    95,    96,    97,    -1,    -1,   100,   101,   102,   103,\n-     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,\n-     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,\n-     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,\n-     134,    -1,   136,   137,   138,    -1,   140,   141,   142,    -1,\n-     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,\n-     154,    -1,   156,    -1,   158,   159,   160,   161,    -1,   163,\n-      -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,\n-      -1,   175,    -1,   177,   178,   179,    -1,   181,   182,   183,\n-     184,   185,   186,   187,    -1,   189,   190,   191,   192,    -1,\n-     194,   195,   196,   197,   198,   199,   200,    -1,   202,    -1,\n-     204,   205,   206,   207,   208,   209,   210,   211,    -1,   213,\n-      -1,   215,    -1,    -1,   218,    -1,   220,   221,   222,   223,\n-     224,   225,    -1,    -1,   228,    -1,   230,    -1,    -1,   233,\n-     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,\n-     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,\n-     254,   255,   256,   257,   258,   259,   260,    -1,   262,   263,\n-     264,   265,   266,    -1,   268,   269,    -1,   271,    -1,   273,\n-     274,   275,   276,   277,   278,    -1,   280,   281,    -1,    -1,\n-     284,   285,   286,    -1,    -1,   289,   290,    -1,   292,    -1,\n-     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,\n-     304,    -1,    -1,    -1,    -1,   309,   310,   311,    -1,   313,\n-     314,   315,   316,   317,   318,    -1,   320,   321,   322,   323,\n-     324,   325,    -1,   327,   328,   329,   330,   331,   332,   333,\n-     334,    -1,   336,   337,   338,   339,   340,   341,   342,   343,\n-     344,   345,   346,   347,   348,    -1,   350,   351,    -1,   353,\n-     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,\n-     364,   365,   366,   367,    -1,    -1,   370,   371,   372,   373,\n-     374,   375,   376,   377,   378,   379,    -1,   381,   382,   383,\n-     384,    -1,   386,   387,   388,   389,   390,   391,   392,   393,\n-     394,   395,   396,   397,   398,   399,   400,   401,    -1,   403,\n-     404,    -1,   406,    -1,   408,   409,   410,   411,   412,    -1,\n-     414,   415,    -1,    -1,   418,   419,   420,   421,   422,    -1,\n-     424,   425,   426,   427,   428,   429,   430,   431,    -1,    -1,\n-     434,   435,   436,    -1,   438,   439,   440,   441,    -1,   443,\n-     444,   445,   446,   447,   448,   449,    -1,   451,    -1,   453,\n-     454,   455,   456,   457,    -1,    -1,   460,    -1,    -1,   463,\n-     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,\n-     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,\n-       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,   500,    -1,    -1,    22,\n+     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,\n+     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,\n+     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,\n+     395,   396,   397,   398,   399,    -1,   401,   402,   403,   404,\n+     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,\n+     415,   416,   417,   418,   419,    -1,   421,    -1,   423,   424,\n+     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,\n+     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,\n+     445,   446,   447,    -1,   449,   450,   451,   452,   453,   454,\n+     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,\n+     465,   466,   467,   468,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,   480,   481,   482,   483,    -1,\n+       3,    -1,   487,   488,   489,     8,   491,   492,   493,   494,\n+     495,   496,    15,    16,    -1,    -1,    19,    20,    21,    22,\n       23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,\n       33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n       43,    44,    -1,    46,    47,    48,    -1,    50,    51,    52,\n@@ -14198,207 +14402,139 @@ static const yytype_int16 yycheck[] =\n      453,   454,   455,   456,   457,    -1,    -1,   460,    -1,    -1,\n      463,   464,   465,   466,   467,   468,   469,   470,   471,   472,\n      473,   474,   475,   476,   477,   478,   479,   480,   481,   482,\n-     483,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,   500,    -1,    -1,\n-      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,\n-      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,\n-      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,\n-      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,\n-      -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,    81,\n-      82,    83,    84,    85,    86,    -1,    88,    89,    90,    -1,\n-      92,    93,    94,    95,    96,    97,    -1,    -1,   100,   101,\n-     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,\n-     112,    -1,   114,    -1,   116,   117,   118,   119,   120,   121,\n-      -1,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,\n-     132,   133,   134,    -1,   136,   137,   138,    -1,   140,   141,\n-     142,    -1,   144,   145,   146,   147,   148,   149,   150,   151,\n-     152,   153,   154,    -1,   156,    -1,   158,   159,   160,   161,\n-      -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,\n-      -1,   173,    -1,   175,    -1,   177,   178,   179,    -1,   181,\n-     182,   183,   184,   185,   186,   187,    -1,   189,   190,   191,\n-     192,    -1,   194,   195,   196,   197,   198,   199,   200,    -1,\n-     202,    -1,   204,   205,   206,   207,   208,   209,   210,   211,\n-      -1,   213,    -1,   215,    -1,    -1,   218,    -1,   220,   221,\n-     222,   223,   224,   225,    -1,    -1,   228,    -1,   230,    -1,\n-      -1,   233,   234,   235,   236,   237,   238,   239,   240,   241,\n-     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,\n-     252,   253,   254,   255,   256,   257,   258,   259,   260,    -1,\n-     262,   263,   264,   265,   266,    -1,   268,   269,    -1,   271,\n-      -1,   273,   274,   275,   276,   277,   278,    -1,   280,   281,\n-      -1,    -1,   284,   285,   286,    -1,    -1,   289,   290,    -1,\n-     292,    -1,   294,   295,   296,   297,   298,   299,   300,   301,\n-     302,   303,   304,    -1,    -1,    -1,    -1,   309,   310,   311,\n-      -1,   313,   314,   315,   316,   317,   318,    -1,   320,   321,\n-     322,   323,   324,   325,    -1,   327,   328,   329,   330,   331,\n-     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,\n-     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,\n-      -1,   353,   354,   355,   356,   357,   358,   359,   360,   361,\n-     362,   363,   364,   365,   366,   367,    -1,    -1,   370,   371,\n-     372,   373,   374,   375,   376,   377,   378,   379,    -1,   381,\n-     382,   383,   384,    -1,   386,   387,   388,   389,   390,   391,\n-     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,\n-      -1,   403,   404,    -1,   406,    -1,   408,   409,   410,   411,\n-     412,    -1,   414,   415,    -1,    -1,   418,   419,   420,   421,\n-     422,    -1,   424,   425,   426,   427,   428,   429,   430,   431,\n-      -1,    -1,   434,   435,   436,    -1,   438,   439,   440,   441,\n-      -1,   443,   444,   445,   446,   447,   448,   449,    -1,   451,\n-      -1,   453,   454,   455,   456,   457,    -1,    -1,   460,    -1,\n-      -1,   463,   464,   465,   466,   467,   468,   469,   470,   471,\n-     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,\n-     482,   483,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   500,    -1,\n-      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,\n-      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,    50,\n-      51,    52,    53,    54,    -1,    56,    57,    -1,    59,    60,\n-      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,\n-      71,    -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,\n-      81,    82,    83,    84,    85,    86,    -1,    88,    89,    90,\n-      -1,    92,    93,    94,    95,    96,    97,    -1,    -1,   100,\n-     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,\n-     111,   112,    -1,   114,    -1,   116,   117,   118,   119,   120,\n-     121,    -1,   123,   124,   125,   126,   127,    -1,    -1,   130,\n-     131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,\n-     141,   142,    -1,   144,   145,   146,   147,   148,   149,   150,\n-     151,   152,   153,   154,    -1,   156,    -1,   158,   159,   160,\n-     161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,\n-     171,    -1,   173,    -1,   175,    -1,   177,   178,   179,    -1,\n-     181,   182,   183,   184,   185,   186,   187,    -1,   189,   190,\n-     191,   192,    -1,   194,   195,   196,   197,   198,   199,   200,\n-      -1,   202,    -1,   204,   205,   206,   207,   208,   209,   210,\n-     211,    -1,   213,    -1,   215,    -1,    -1,   218,    -1,   220,\n-     221,   222,   223,   224,   225,    -1,    -1,   228,    -1,   230,\n-      -1,    -1,   233,   234,   235,   236,   237,   238,   239,   240,\n-     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,\n-     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,\n-      -1,   262,   263,   264,   265,   266,    -1,   268,   269,    -1,\n-     271,    -1,   273,   274,   275,   276,   277,   278,    -1,   280,\n-     281,    -1,    -1,   284,   285,   286,    -1,    -1,   289,   290,\n-      -1,   292,    -1,   294,   295,   296,   297,   298,   299,   300,\n-     301,   302,   303,   304,    -1,    -1,    -1,    -1,   309,   310,\n-     311,    -1,   313,   314,   315,   316,   317,   318,    -1,   320,\n-     321,   322,   323,   324,   325,    -1,   327,   328,   329,   330,\n-     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,\n-     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,\n-     351,    -1,   353,   354,   355,   356,   357,   358,   359,   360,\n-     361,   362,   363,   364,   365,   366,   367,    -1,    -1,   370,\n-     371,   372,   373,   374,   375,   376,   377,   378,   379,    -1,\n-     381,   382,   383,   384,    -1,   386,   387,   388,   389,   390,\n-     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,\n-     401,    -1,   403,   404,    -1,   406,    -1,   408,   409,   410,\n-     411,   412,    -1,   414,   415,    -1,    -1,   418,   419,   420,\n-     421,   422,    -1,   424,   425,   426,   427,   428,   429,   430,\n-     431,    -1,    -1,   434,   435,   436,    -1,   438,   439,   440,\n-     441,    -1,   443,   444,   445,   446,   447,   448,   449,    -1,\n-     451,    -1,   453,   454,   455,   456,   457,    -1,    -1,   460,\n-      -1,    -1,   463,   464,   465,   466,   467,   468,   469,   470,\n-     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,\n-     481,   482,   483,    -1,     3,     4,     5,    -1,    -1,     8,\n-       9,    -1,    -1,    -1,    -1,    -1,    15,    16,    -1,   500,\n-      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,\n-      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,\n-      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,\n-      49,    50,    51,    52,    -1,    54,    55,    56,    57,    58,\n-      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,\n-      69,    70,    71,    72,    73,    74,    75,    76,    -1,    78,\n-      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,\n-      89,    90,    91,    92,    93,    94,    95,    96,    97,    98,\n-      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,\n-     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,\n-     119,   120,   121,   122,   123,   124,   125,   126,   127,   128,\n-     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,\n-     139,   140,   141,   142,   143,   144,   145,   146,   147,    -1,\n-     149,   150,   151,   152,   153,    -1,   155,   156,   157,   158,\n-     159,   160,   161,   162,   163,   164,   165,   166,   167,   168,\n-     169,   170,   171,   172,   173,   174,   175,   176,    -1,    -1,\n-     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,\n-     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,\n-     199,   200,   201,   202,   203,    -1,   205,   206,   207,   208,\n-     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,\n-     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,\n-     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,\n-     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,\n-     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,\n-     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,\n-     269,   270,   271,   272,    -1,   274,   275,   276,   277,   278,\n-     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,\n-     289,    -1,   291,   292,   293,    -1,   295,   296,   297,   298,\n-     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,\n-     309,   310,    -1,   312,   313,   314,    -1,   316,   317,   318,\n-     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,\n-     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,\n-     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,\n-     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,\n-     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,\n-     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,\n-     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,\n-     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,\n-     399,    -1,   401,   402,   403,   404,   405,   406,   407,   408,\n-     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,\n-     419,    -1,   421,    -1,   423,   424,   425,   426,   427,   428,\n-     429,   430,   431,   432,   433,   434,   435,   436,   437,   438,\n-     439,   440,   441,   442,   443,   444,   445,   446,   447,    -1,\n-     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,\n-     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,\n+     483,    -1,    -1,    -1,   487,   488,   489,    -1,   491,   492,\n+     493,   494,   495,   496,     8,    -1,    -1,    11,    -1,    -1,\n+      -1,    15,    16,    17,    18,    19,    20,    21,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,\n+      -1,    -1,    36,    15,    16,    17,    18,    19,    20,    21,\n+      -1,    -1,    46,    -1,    -1,    -1,    -1,    -1,    -1,    53,\n+      -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    46,    -1,    -1,    -1,    -1,    -1,\n+      -1,    53,    -1,     8,    78,    -1,    11,    -1,    -1,    -1,\n+      15,    16,    17,    18,    19,    20,    21,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    78,    -1,    -1,    -1,\n+      -1,    36,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    46,    -1,    -1,    -1,    -1,    -1,    -1,    53,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,\n+      -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,    19,\n+      20,    21,    -1,    78,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    46,    -1,   172,    -1,\n+      -1,    -1,    -1,    53,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,   188,    -1,    -1,    -1,    -1,   193,\n+     172,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    78,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,   188,    -1,    -1,    -1,\n+      -1,   193,   216,   217,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,   231,    -1,    -1,\n+      -1,    -1,    -1,    -1,   216,   217,    -1,   172,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   231,\n+      -1,    -1,    -1,   188,    -1,    -1,    -1,    -1,   193,    -1,\n+      -1,    -1,    -1,   267,    -1,    -1,   270,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+     284,   216,   217,   287,    -1,   267,    -1,    -1,   270,    -1,\n+      -1,    -1,   172,    -1,    -1,    -1,   231,    -1,    -1,    -1,\n+      -1,    -1,   284,    -1,    -1,   287,    -1,    -1,   188,    -1,\n+      -1,    -1,    -1,   193,    -1,    -1,    -1,    -1,     8,    -1,\n+      -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,    19,\n+      20,    21,   267,    -1,    -1,   270,   216,   217,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,   284,\n+      -1,   231,   287,    -1,    -1,    -1,    46,    -1,    -1,    -1,\n+      -1,    -1,    -1,    53,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,   380,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,   267,    78,    -1,\n+     270,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,    -1,\n+      -1,    -1,    -1,    -1,   284,    -1,    -1,   287,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,   480,   481,   482,   483,    -1,     3,    -1,   487,   488,\n-     489,     8,   491,   492,   493,   494,   495,   496,    15,    16,\n-      -1,    -1,    19,    20,    21,    22,    23,    24,    25,    26,\n-      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,\n-      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,\n-      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,\n-      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,\n-      77,    -1,    -1,    -1,    81,    82,    83,    84,    85,    86,\n-      -1,    88,    89,    90,    -1,    92,    93,    94,    95,    96,\n-      97,    -1,    -1,   100,   101,   102,   103,   104,   105,   106,\n-     107,   108,   109,   110,   111,   112,    -1,   114,    -1,   116,\n-     117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,\n-     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,   136,\n-     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,\n-     147,   148,   149,   150,   151,   152,   153,   154,    -1,   156,\n-      -1,   158,   159,   160,   161,    -1,   163,    -1,   165,    -1,\n-      -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,\n-     177,   178,   179,    -1,   181,   182,   183,   184,   185,   186,\n-     187,    -1,   189,   190,   191,   192,    -1,   194,   195,   196,\n-     197,   198,   199,   200,    -1,   202,    -1,   204,   205,   206,\n-     207,   208,   209,   210,   211,    -1,   213,    -1,   215,    -1,\n-      -1,   218,    -1,   220,   221,   222,   223,   224,   225,    -1,\n-      -1,   228,    -1,   230,    -1,    -1,   233,   234,   235,   236,\n-     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,\n-     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,\n-     257,   258,   259,   260,    -1,   262,   263,   264,   265,   266,\n-      -1,   268,   269,    -1,   271,    -1,   273,   274,   275,   276,\n-     277,   278,    -1,   280,   281,    -1,    -1,   284,   285,   286,\n-      -1,    -1,   289,   290,    -1,   292,    -1,   294,   295,   296,\n-     297,   298,   299,   300,   301,   302,   303,   304,    -1,    -1,\n-      -1,    -1,   309,   310,   311,    -1,   313,   314,   315,   316,\n-     317,   318,    -1,   320,   321,   322,   323,   324,   325,    -1,\n-     327,   328,   329,   330,   331,   332,   333,   334,    -1,   336,\n-     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,\n-     347,   348,    -1,   350,   351,    -1,   353,   354,   355,   356,\n-     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,\n-     367,    -1,    -1,   370,   371,   372,   373,   374,   375,   376,\n-     377,   378,   379,    -1,   381,   382,   383,   384,    -1,   386,\n-     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,\n-     397,   398,   399,   400,   401,    -1,   403,   404,    -1,   406,\n-      -1,   408,   409,   410,   411,   412,    -1,   414,   415,    -1,\n-      -1,   418,   419,   420,   421,   422,    -1,   424,   425,   426,\n-     427,   428,   429,   430,   431,    -1,    -1,   434,   435,   436,\n-      -1,   438,   439,   440,   441,    -1,   443,   444,   445,   446,\n-     447,   448,   449,    -1,   451,    -1,   453,   454,   455,   456,\n-     457,    -1,    -1,   460,    -1,    -1,   463,   464,   465,   466,\n-     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,\n-     477,   478,   479,   480,   481,   482,   483,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,   380,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+     484,    -1,   172,   487,   488,   489,    -1,   491,   492,   493,\n+     494,   495,   496,    -1,    -1,    -1,    -1,   501,   188,    -1,\n+     380,    -1,   484,   193,    -1,   487,   488,   489,    -1,   491,\n+     492,   493,   494,   495,   496,    -1,    -1,    -1,    -1,   501,\n+      -1,    -1,    -1,    -1,    -1,    -1,   216,   217,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,   231,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   484,\n+      -1,    -1,   487,   488,   489,    -1,   491,   492,   493,   494,\n+     495,   496,    -1,    -1,    -1,    -1,   501,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,   267,    -1,    -1,\n+     270,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,   284,    -1,    -1,   287,    -1,    -1,\n+      -1,    -1,    -1,    -1,   484,    -1,    -1,   487,   488,   489,\n+      -1,   491,   492,   493,   494,   495,   496,    -1,    -1,    -1,\n+      -1,   501,    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,\n+      11,    -1,    -1,    -1,    15,    16,    17,    18,    19,    20,\n+      21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,\n+      -1,    -1,    11,    -1,    -1,    36,    15,    16,    17,    18,\n+      19,    20,    21,    -1,    -1,    46,    -1,    -1,    -1,    -1,\n+      -1,    -1,    53,    -1,    -1,    -1,    -1,    36,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,    -1,    -1,\n+     380,    -1,    -1,    -1,    53,    -1,     8,    78,    -1,    11,\n+      -1,    -1,    -1,    15,    16,    17,    18,    19,    20,    21,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    78,\n+      -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    46,    -1,    -1,    -1,    -1,    -1,\n+      -1,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,\n+      17,    18,    19,    20,    21,    -1,    78,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,\n+      -1,   172,    -1,    -1,   484,    -1,    53,   487,   488,   489,\n+      -1,   491,   492,   493,   494,   495,   496,   188,    -1,    -1,\n+      -1,   501,   193,   172,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    78,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   188,\n+      -1,    -1,    -1,    -1,   193,   216,   217,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+     231,    -1,    -1,    -1,    -1,    -1,    -1,   216,   217,    -1,\n+     172,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,   231,    -1,    -1,    -1,   188,    -1,    -1,    -1,\n+      -1,   193,    -1,    -1,    -1,    -1,   267,    -1,    -1,   270,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,   284,   216,   217,   287,    -1,   267,    -1,\n+      -1,   270,    -1,    -1,    -1,   172,    -1,    -1,    -1,   231,\n+      -1,    -1,    -1,    -1,    -1,   284,    -1,    -1,   287,    -1,\n+      -1,   188,    -1,    -1,    -1,    -1,   193,    -1,    -1,    -1,\n+      -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,\n+      17,    18,    19,    20,    21,   267,    -1,    -1,   270,   216,\n+     217,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,\n+      -1,    -1,   284,    -1,   231,   287,    -1,    -1,    -1,    46,\n+      -1,    -1,    -1,    -1,    -1,    -1,    53,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+     267,    78,    -1,   270,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,   380,    -1,    -1,    -1,    -1,    -1,   284,    -1,    -1,\n+     287,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,   484,    -1,   172,   487,   488,   489,    -1,\n+     491,   492,   493,   494,   495,   496,    -1,    -1,    -1,    -1,\n+     501,   188,    -1,   380,    -1,   484,   193,    -1,   487,   488,\n+     489,    -1,   491,   492,   493,   494,   495,   496,    -1,    -1,\n+      -1,    -1,   501,    -1,    -1,    -1,    -1,    -1,    -1,   216,\n+     217,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,   231,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,   484,    -1,    -1,   487,   488,   489,    -1,   491,\n+     492,   493,   494,   495,   496,    -1,    -1,    -1,    -1,   501,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+     267,    -1,    -1,   270,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,   284,    -1,    -1,\n+     287,    -1,    -1,    -1,    -1,    -1,    -1,   484,    -1,    -1,\n      487,   488,   489,    -1,   491,   492,   493,   494,   495,   496,\n+      -1,    -1,    -1,    -1,   501,    -1,    -1,    -1,    -1,    -1,\n        8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,\n       18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    36,    15,\n       16,    17,    18,    19,    20,    21,    -1,    -1,    46,    -1,\n       -1,    -1,    -1,    -1,    -1,    53,    -1,    -1,    -1,    -1,\n       36,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      46,    -1,    -1,    -1,    -1,    -1,    -1,    53,    -1,     8,\n+      46,    -1,    -1,   380,    -1,    -1,    -1,    53,    -1,     8,\n       78,    -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,\n       19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    78,    -1,    -1,    -1,    -1,    36,    -1,    -1,\n@@ -14408,9 +14544,9 @@ static const yytype_int16 yycheck[] =\n       -1,    15,    16,    17,    18,    19,    20,    21,    -1,    78,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    36,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    46,    -1,   172,    -1,    -1,    -1,    -1,    53,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-     188,    -1,    -1,    -1,    -1,   193,   172,    -1,    -1,    -1,\n+      -1,    -1,    46,    -1,   172,    -1,    -1,   484,    -1,    53,\n+     487,   488,   489,    -1,   491,   492,   493,   494,   495,   496,\n+     188,    -1,    -1,    -1,   501,   193,   172,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    78,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,   188,    -1,    -1,    -1,    -1,   193,   216,   217,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n@@ -14464,379 +14600,196 @@ static const yytype_int16 yycheck[] =\n       53,    -1,     8,    78,    -1,    11,    -1,    -1,    -1,    15,\n       16,    17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    78,    -1,    -1,    -1,    -1,\n-      36,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      46,    -1,    -1,    -1,    -1,    -1,    -1,    53,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,\n-      11,    -1,    -1,    -1,    15,    16,    17,    18,    19,    20,\n-      21,    -1,    78,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    46,    -1,   172,    -1,    -1,\n-     484,    -1,    53,   487,   488,   489,    -1,   491,   492,   493,\n-     494,   495,   496,   188,    -1,    -1,    -1,   501,   193,   172,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    78,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,   188,    -1,    -1,    -1,    -1,\n-     193,   216,   217,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,   231,    -1,    -1,    -1,\n-      -1,    -1,    -1,   216,   217,    -1,   172,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   231,    -1,\n-      -1,    -1,   188,    -1,    -1,    -1,    -1,   193,    -1,    -1,\n-      -1,    -1,   267,    -1,    -1,   270,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   284,\n-     216,   217,   287,    -1,   267,    -1,    -1,   270,    -1,    -1,\n-      -1,   172,    -1,    -1,    -1,   231,    -1,    -1,    -1,    -1,\n-      -1,   284,    -1,    -1,   287,    -1,    -1,   188,    -1,    -1,\n-      -1,    -1,   193,    -1,    -1,    -1,    -1,     8,    -1,    -1,\n-      11,    -1,    -1,    -1,    15,    16,    17,    18,    19,    20,\n-      21,   267,    -1,    -1,   270,   216,   217,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,   284,    -1,\n-     231,   287,    -1,    -1,    -1,    46,    -1,    -1,    -1,    -1,\n-      -1,    -1,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,   380,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,   267,    78,    -1,   270,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,    -1,    -1,\n-      -1,    -1,    -1,   284,    -1,    -1,   287,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,   380,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   484,\n-      -1,   172,   487,   488,   489,    -1,   491,   492,   493,   494,\n-     495,   496,    -1,    -1,    -1,    -1,   501,   188,    -1,   380,\n-      -1,   484,   193,    -1,   487,   488,   489,    -1,   491,   492,\n-     493,   494,   495,   496,    -1,    -1,    -1,    -1,   501,    -1,\n-      -1,    -1,    -1,    -1,    -1,   216,   217,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-     231,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   484,    -1,\n-      -1,   487,   488,   489,    -1,   491,   492,   493,   494,   495,\n-     496,    -1,    -1,    -1,    -1,   501,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,   267,    -1,    -1,   270,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,   284,    -1,    -1,   287,    -1,    -1,    -1,\n-      -1,    -1,    -1,   484,    -1,    -1,   487,   488,   489,    -1,\n-     491,   492,   493,   494,   495,   496,    -1,    -1,    -1,    -1,\n-     501,    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,\n-      -1,    -1,    -1,    15,    16,    17,    18,    19,    20,    21,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,\n-      -1,    11,    -1,    -1,    36,    15,    16,    17,    18,    19,\n-      20,    21,    -1,    -1,    46,    -1,    -1,    -1,    -1,    -1,\n-      -1,    53,    -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    46,    -1,    -1,   380,\n-      -1,    -1,    -1,    53,    -1,     8,    78,    -1,    11,    -1,\n-      -1,    -1,    15,    16,    17,    18,    19,    20,    21,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    78,    -1,\n-      -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    46,    -1,    -1,    -1,    -1,    -1,    -1,\n-      53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-       8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,\n-      18,    19,    20,    21,    -1,    78,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,    -1,\n-     172,    -1,    -1,   484,    -1,    53,   487,   488,   489,    -1,\n-     491,   492,   493,   494,   495,   496,   188,    -1,    -1,    -1,\n-     501,   193,   172,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      78,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   188,    -1,\n-      -1,    -1,    -1,   193,   216,   217,    -1,    -1,    -1,     8,\n-      -1,    -1,    11,    -1,    -1,    -1,    15,    16,    -1,   231,\n-      19,    20,    21,    -1,    -1,    -1,   216,   217,    -1,   172,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,\n-      -1,   231,    -1,    -1,    -1,   188,    -1,    46,    -1,    -1,\n-     193,    -1,    -1,    -1,    53,   267,    -1,    -1,   270,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,   284,   216,   217,   287,    -1,   267,    -1,    78,\n-     270,    -1,    -1,    -1,   172,    -1,    -1,    -1,   231,    -1,\n-      -1,    -1,    -1,    -1,   284,    -1,    -1,   287,    -1,    -1,\n-     188,    -1,    -1,    -1,    -1,   193,    -1,    -1,    -1,    -1,\n-       8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,\n-      18,    19,    20,    21,   267,    -1,    -1,   270,   216,   217,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,\n-      -1,   284,    -1,   231,   287,    -1,    -1,    -1,    46,    -1,\n-      -1,    -1,    -1,    -1,    -1,    53,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,    -1,\n-      -1,    -1,    -1,   172,    -1,    -1,    -1,    -1,    -1,   267,\n-      78,    -1,   270,    -1,    -1,    -1,    -1,    -1,    -1,   188,\n-     380,    -1,    -1,    -1,   193,    -1,   284,    -1,    -1,   287,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,   216,   217,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,   231,    -1,    -1,    -1,    -1,   380,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   267,    -1,\n-      -1,   270,   484,    -1,   172,   487,   488,   489,    -1,   491,\n-     492,   493,   494,   495,   496,   284,    -1,    -1,    -1,   501,\n-     188,    -1,   380,    -1,   484,   193,    -1,   487,   488,   489,\n-      -1,   491,   492,   493,   494,   495,   496,    -1,    -1,   499,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   216,   217,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,   231,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,   484,    -1,    -1,   487,   488,   489,    -1,   491,   492,\n-     493,   494,   495,   496,    -1,    -1,   499,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   267,\n-      -1,    -1,   270,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,   380,    -1,    -1,    -1,    -1,   284,    -1,    -1,   287,\n-      -1,    -1,    -1,    -1,    -1,    -1,   484,    -1,    -1,   487,\n-     488,   489,    -1,   491,   492,   493,   494,   495,   496,    -1,\n-      -1,   499,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,   380,    -1,    -1,   484,    -1,    -1,   487,   488,\n-     489,    -1,   491,   492,   493,   494,   495,   496,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      36,    -1,    -1,    -1,    -1,    -1,    26,    -1,    -1,    -1,\n+      46,    -1,    32,    -1,    -1,    -1,    -1,    53,    -1,    -1,\n+      40,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      60,    -1,    78,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,   172,    -1,    -1,\n+     484,    -1,    -1,   487,   488,   489,    -1,   491,   492,   493,\n+     494,   495,   496,   188,   104,   499,    -1,    -1,   193,   172,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,     3,    -1,    -1,   484,    -1,    -1,   487,\n-     488,   489,    -1,   491,   492,   493,   494,   495,   496,    -1,\n-      -1,   499,    22,    23,    24,    25,    26,    27,    28,    29,\n-      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,\n-      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,\n-      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,\n-      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,\n-      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,\n-      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,\n-      90,    91,    92,    93,    94,    95,    96,    97,    98,    99,\n-     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,\n-     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,\n-     120,   121,   122,   123,   124,   125,   126,   127,   128,   129,\n-     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,\n-     140,   141,   142,   143,   144,   145,   146,   147,   148,   149,\n-     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,\n-     160,   161,   162,   163,   164,   165,   166,   167,   168,   169,\n-     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,\n-     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,\n-     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,\n-     200,   201,   202,   203,   204,   205,   206,   207,   208,   209,\n-     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,\n-     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,\n-     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,\n-     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,\n-     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,\n-     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,\n-     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,\n-     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,\n-     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,\n-     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,\n-     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,\n-     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,\n-     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,\n-     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,\n-     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,\n-     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,\n-     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,\n-     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,\n-     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,\n-     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,\n-     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,\n-     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,\n-     430,   431,   432,   433,   434,   435,   436,   437,   438,   439,\n-     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,\n-     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,\n-     460,   461,   462,   463,   464,   465,   466,   467,   468,   469,\n-     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,\n-     480,   481,   482,   483,     3,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,   493,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,\n-      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,\n-      -1,    50,    51,    52,    53,    54,    -1,    56,    57,    -1,\n-      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,\n-      69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,\n-      -1,    -1,    81,    82,    83,    84,    85,    86,    -1,    88,\n-      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,\n-      -1,   100,   101,   102,   103,   104,   105,   106,   107,   108,\n-     109,   110,   111,   112,    -1,   114,    -1,   116,   117,   118,\n-     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,\n-      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,\n-      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,\n-     149,   150,   151,   152,   153,   154,    -1,   156,    -1,   158,\n-     159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,\n-     169,   170,   171,    -1,   173,    -1,   175,    -1,   177,   178,\n-     179,    -1,   181,   182,   183,   184,   185,   186,   187,    -1,\n-     189,   190,   191,   192,    -1,   194,   195,   196,   197,   198,\n-     199,   200,    -1,   202,    -1,   204,   205,   206,   207,   208,\n-     209,   210,   211,    -1,   213,    -1,   215,    -1,    -1,   218,\n-      -1,   220,   221,   222,   223,   224,   225,    -1,    -1,   228,\n-      -1,   230,    -1,    -1,   233,   234,   235,   236,   237,   238,\n-     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,\n-     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,\n-     259,   260,    -1,   262,   263,   264,   265,   266,    -1,   268,\n-     269,    -1,   271,    -1,   273,   274,   275,   276,   277,   278,\n-      -1,   280,   281,    -1,    -1,   284,   285,   286,    -1,    -1,\n-     289,   290,    -1,   292,    -1,   294,   295,   296,   297,   298,\n-     299,   300,   301,   302,   303,   304,    -1,    -1,    -1,    -1,\n-     309,   310,   311,    -1,   313,   314,   315,   316,   317,   318,\n-      -1,   320,   321,   322,   323,   324,   325,    -1,   327,   328,\n-     329,   330,   331,   332,   333,   334,    -1,   336,   337,   338,\n-     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,\n-      -1,   350,   351,    -1,   353,   354,   355,   356,   357,   358,\n-     359,   360,   361,   362,   363,   364,   365,   366,   367,    -1,\n-      -1,   370,   371,   372,   373,   374,   375,   376,   377,   378,\n-     379,    -1,   381,   382,   383,   384,    -1,   386,   387,   388,\n-     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,\n-     399,   400,   401,    -1,   403,   404,    -1,   406,    -1,   408,\n-     409,   410,   411,   412,    -1,   414,   415,    -1,    -1,   418,\n-     419,   420,   421,   422,    -1,   424,   425,   426,   427,   428,\n-     429,   430,   431,    -1,    -1,   434,   435,   436,    -1,   438,\n-     439,   440,   441,    -1,   443,   444,   445,   446,   447,   448,\n-     449,    -1,   451,    -1,   453,   454,   455,   456,   457,    -1,\n-      -1,   460,    -1,    -1,   463,   464,   465,   466,   467,   468,\n-     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,\n-     479,   480,   481,   482,   483,     3,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,   493,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,\n-      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,\n-      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,\n-      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,\n-      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,\n-      -1,    -1,    -1,    81,    82,    83,    84,    85,    86,    -1,\n-      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,\n-      -1,    -1,   100,   101,   102,   103,   104,   105,   106,   107,\n-     108,   109,   110,   111,   112,    -1,   114,    -1,   116,   117,\n-     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,\n-      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,\n-     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,\n-     148,   149,   150,   151,   152,   153,   154,    -1,   156,    -1,\n-     158,   159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,\n-      -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,   177,\n-     178,   179,    -1,   181,   182,   183,   184,   185,   186,   187,\n-      -1,   189,   190,   191,   192,    -1,   194,   195,   196,   197,\n-     198,   199,   200,    -1,   202,    -1,   204,   205,   206,   207,\n-     208,   209,   210,   211,    -1,   213,    -1,   215,    -1,    -1,\n-     218,    -1,   220,   221,   222,   223,   224,   225,    -1,    -1,\n-     228,    -1,   230,    -1,    -1,   233,   234,   235,   236,   237,\n+      -1,    -1,    -1,    -1,    -1,   188,    -1,    -1,    -1,    -1,\n+     193,   216,   217,   133,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,   231,    -1,    -1,    -1,\n+      -1,    -1,    -1,   216,   217,    -1,   172,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   231,    -1,\n+      -1,    -1,   188,    -1,    -1,    -1,    -1,   193,    -1,    -1,\n+      -1,    -1,   267,    -1,    -1,   270,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,   284,\n+     216,   217,   287,    -1,   267,    -1,    -1,   270,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,   231,    -1,    -1,    -1,    -1,\n+      -1,   284,    -1,    -1,   287,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,   245,    -1,    -1,    -1,    -1,\n+      -1,   267,    -1,   253,   270,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,   265,    -1,    -1,   284,    -1,\n+      -1,   287,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,   286,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,   380,   296,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,   341,    -1,    -1,    -1,   345,    -1,   347,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,   380,    -1,    -1,    -1,    -1,    -1,\n+     370,    -1,    -1,    -1,    -1,   375,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   389,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   484,\n+      -1,    -1,   487,   488,   489,    -1,   491,   492,   493,   494,\n+     495,   496,    -1,    -1,   499,    -1,    -1,    -1,    -1,    -1,\n+      -1,   484,    -1,    -1,   487,   488,   489,    -1,   491,   492,\n+     493,   494,   495,   496,    -1,    -1,   499,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,   445,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,     3,    -1,    -1,   484,    -1,\n+      -1,   487,   488,   489,    -1,   491,   492,   493,   494,   495,\n+     496,    -1,    -1,   499,    22,    23,    24,    25,    26,    27,\n+      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,\n+      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,\n+      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,\n+      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,\n+      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,\n+      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,\n+      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,\n+      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,\n+     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,\n+     118,   119,   120,   121,   122,   123,   124,   125,   126,   127,\n+     128,   129,   130,   131,   132,   133,   134,   135,   136,   137,\n+     138,   139,   140,   141,   142,   143,   144,   145,   146,   147,\n+     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,\n+     158,   159,   160,   161,   162,   163,   164,   165,   166,   167,\n+     168,   169,   170,   171,   172,   173,   174,   175,   176,   177,\n+     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,\n+     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,\n+     198,   199,   200,   201,   202,   203,   204,   205,   206,   207,\n+     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,\n+     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,\n+     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,\n      238,   239,   240,   241,   242,   243,   244,   245,   246,   247,\n      248,   249,   250,   251,   252,   253,   254,   255,   256,   257,\n-     258,   259,   260,    -1,   262,   263,   264,   265,   266,    -1,\n-     268,   269,    -1,   271,    -1,   273,   274,   275,   276,   277,\n-     278,    -1,   280,   281,    -1,    -1,   284,   285,   286,    -1,\n-      -1,   289,   290,    -1,   292,    -1,   294,   295,   296,   297,\n-     298,   299,   300,   301,   302,   303,   304,    -1,    -1,    -1,\n-      -1,   309,   310,   311,    -1,   313,   314,   315,   316,   317,\n-     318,    -1,   320,   321,   322,   323,   324,   325,    -1,   327,\n-     328,   329,   330,   331,   332,   333,   334,    -1,   336,   337,\n+     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,\n+     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,\n+     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,\n+     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,\n+     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,\n+     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,\n+     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,\n+     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,\n      338,   339,   340,   341,   342,   343,   344,   345,   346,   347,\n-     348,    -1,   350,   351,    -1,   353,   354,   355,   356,   357,\n+     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,\n      358,   359,   360,   361,   362,   363,   364,   365,   366,   367,\n-      -1,    -1,   370,   371,   372,   373,   374,   375,   376,   377,\n-     378,   379,    -1,   381,   382,   383,   384,    -1,   386,   387,\n+     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,\n+     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,\n      388,   389,   390,   391,   392,   393,   394,   395,   396,   397,\n-     398,   399,   400,   401,    -1,   403,   404,    -1,   406,    -1,\n-     408,   409,   410,   411,   412,    -1,   414,   415,    -1,    -1,\n-     418,   419,   420,   421,   422,    -1,   424,   425,   426,   427,\n-     428,   429,   430,   431,    -1,    -1,   434,   435,   436,    -1,\n-     438,   439,   440,   441,    -1,   443,   444,   445,   446,   447,\n-     448,   449,    -1,   451,    -1,   453,   454,   455,   456,   457,\n-      -1,    -1,   460,    -1,    -1,   463,   464,   465,   466,   467,\n+     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,\n+     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,\n+     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,\n+     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,\n+     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,\n+     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,\n+     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,\n      468,   469,   470,   471,   472,   473,   474,   475,   476,   477,\n-     478,   479,   480,   481,   482,   483,     3,     4,     5,    -1,\n-      -1,    -1,     9,    -1,    -1,   493,    -1,    -1,    -1,    -1,\n+     478,   479,   480,   481,   482,   483,     3,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,   493,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,\n       27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,\n-      37,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,    46,\n-      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,\n+      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,\n+      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,\n       57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,\n       67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,\n-      77,    -1,    79,    -1,    81,    82,    83,    84,    85,    86,\n-      87,    88,    89,    90,    -1,    92,    93,    94,    95,    96,\n-      97,    -1,    99,   100,   101,   102,   103,   104,   105,   106,\n-     107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,\n+      77,    -1,    -1,    -1,    81,    82,    83,    84,    85,    86,\n+      -1,    88,    89,    90,    -1,    92,    93,    94,    95,    96,\n+      97,    -1,    -1,   100,   101,   102,   103,   104,   105,   106,\n+     107,   108,   109,   110,   111,   112,    -1,   114,    -1,   116,\n      117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,\n      127,    -1,    -1,   130,   131,   132,   133,   134,    -1,   136,\n      137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,\n-     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,\n-      -1,   158,   159,   160,   161,    -1,   163,    -1,   165,   166,\n-      -1,   168,   169,   170,   171,   172,   173,    -1,   175,    -1,\n+     147,   148,   149,   150,   151,   152,   153,   154,    -1,   156,\n+      -1,   158,   159,   160,   161,    -1,   163,    -1,   165,    -1,\n+      -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,\n      177,   178,   179,    -1,   181,   182,   183,   184,   185,   186,\n-     187,   188,   189,   190,   191,   192,    -1,   194,   195,   196,\n-     197,   198,   199,   200,    -1,   202,   203,   204,   205,   206,\n-     207,   208,   209,   210,   211,    -1,   213,    -1,   215,   216,\n-     217,   218,   219,   220,   221,   222,   223,   224,   225,    -1,\n-      -1,   228,   229,   230,   231,    -1,   233,   234,   235,   236,\n+     187,    -1,   189,   190,   191,   192,    -1,   194,   195,   196,\n+     197,   198,   199,   200,    -1,   202,    -1,   204,   205,   206,\n+     207,   208,   209,   210,   211,    -1,   213,    -1,   215,    -1,\n+      -1,   218,    -1,   220,   221,   222,   223,   224,   225,    -1,\n+      -1,   228,    -1,   230,    -1,    -1,   233,   234,   235,   236,\n      237,   238,   239,   240,   241,   242,   243,   244,   245,   246,\n      247,   248,   249,   250,   251,   252,   253,   254,   255,   256,\n-     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,\n-      -1,   268,   269,   270,   271,    -1,   273,   274,   275,   276,\n-     277,   278,    -1,   280,   281,   282,    -1,   284,   285,   286,\n-      -1,    -1,   289,   290,   291,   292,   293,   294,   295,   296,\n+     257,   258,   259,   260,    -1,   262,   263,   264,   265,   266,\n+      -1,   268,   269,    -1,   271,    -1,   273,   274,   275,   276,\n+     277,   278,    -1,   280,   281,    -1,    -1,   284,   285,   286,\n+      -1,    -1,   289,   290,    -1,   292,    -1,   294,   295,   296,\n      297,   298,   299,   300,   301,   302,   303,   304,    -1,    -1,\n-      -1,    -1,   309,   310,   311,   312,   313,   314,   315,   316,\n+      -1,    -1,   309,   310,   311,    -1,   313,   314,   315,   316,\n      317,   318,    -1,   320,   321,   322,   323,   324,   325,    -1,\n      327,   328,   329,   330,   331,   332,   333,   334,    -1,   336,\n      337,   338,   339,   340,   341,   342,   343,   344,   345,   346,\n-     347,   348,    -1,   350,   351,   352,   353,   354,   355,   356,\n+     347,   348,    -1,   350,   351,    -1,   353,   354,   355,   356,\n      357,   358,   359,   360,   361,   362,   363,   364,   365,   366,\n-     367,    -1,   369,   370,   371,   372,   373,   374,   375,   376,\n-     377,   378,   379,   380,   381,   382,   383,   384,    -1,   386,\n+     367,    -1,    -1,   370,   371,   372,   373,   374,   375,   376,\n+     377,   378,   379,    -1,   381,   382,   383,   384,    -1,   386,\n      387,   388,   389,   390,   391,   392,   393,   394,   395,   396,\n      397,   398,   399,   400,   401,    -1,   403,   404,    -1,   406,\n-     407,   408,   409,   410,   411,   412,    -1,   414,   415,    -1,\n-      -1,   418,   419,   420,   421,   422,   423,   424,   425,   426,\n+      -1,   408,   409,   410,   411,   412,    -1,   414,   415,    -1,\n+      -1,   418,   419,   420,   421,   422,    -1,   424,   425,   426,\n      427,   428,   429,   430,   431,    -1,    -1,   434,   435,   436,\n       -1,   438,   439,   440,   441,    -1,   443,   444,   445,   446,\n-     447,   448,   449,    -1,   451,   452,   453,   454,   455,   456,\n+     447,   448,   449,    -1,   451,    -1,   453,   454,   455,   456,\n      457,    -1,    -1,   460,    -1,    -1,   463,   464,   465,   466,\n      467,   468,   469,   470,   471,   472,   473,   474,   475,   476,\n-     477,   478,   479,   480,   481,   482,   483,     3,     4,     5,\n-      -1,    -1,    -1,     9,   491,   492,    -1,    -1,    -1,    -1,\n+     477,   478,   479,   480,   481,   482,   483,     3,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,   493,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,\n       26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,\n-      -1,    37,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,\n-      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,\n+      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,\n       56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,\n       -1,    67,    68,    69,    70,    71,    -1,    73,    74,    75,\n-      76,    77,    -1,    79,    -1,    81,    82,    83,    84,    85,\n-      86,    87,    88,    89,    90,    -1,    92,    93,    94,    95,\n-      96,    97,    -1,    99,   100,   101,   102,   103,   104,   105,\n-     106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,\n+      76,    77,    -1,    -1,    -1,    81,    82,    83,    84,    85,\n+      86,    -1,    88,    89,    90,    -1,    92,    93,    94,    95,\n+      96,    97,    -1,    -1,   100,   101,   102,   103,   104,   105,\n+     106,   107,   108,   109,   110,   111,   112,    -1,   114,    -1,\n      116,   117,   118,   119,   120,   121,    -1,   123,   124,   125,\n      126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,\n      136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,\n-     146,   147,   148,   149,   150,   151,   152,   153,   154,   155,\n+     146,   147,   148,   149,   150,   151,   152,   153,   154,    -1,\n      156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,\n-     166,    -1,   168,   169,   170,   171,   172,   173,    -1,   175,\n+      -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,\n       -1,   177,   178,   179,    -1,   181,   182,   183,   184,   185,\n-     186,   187,   188,   189,   190,   191,   192,    -1,   194,   195,\n-     196,   197,   198,   199,   200,    -1,   202,   203,   204,   205,\n+     186,   187,    -1,   189,   190,   191,   192,    -1,   194,   195,\n+     196,   197,   198,   199,   200,    -1,   202,    -1,   204,   205,\n      206,   207,   208,   209,   210,   211,    -1,   213,    -1,   215,\n-     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,\n-      -1,    -1,   228,   229,   230,   231,    -1,   233,   234,   235,\n+      -1,    -1,   218,    -1,   220,   221,   222,   223,   224,   225,\n+      -1,    -1,   228,    -1,   230,    -1,    -1,   233,   234,   235,\n      236,   237,   238,   239,   240,   241,   242,   243,   244,   245,\n      246,   247,   248,   249,   250,   251,   252,   253,   254,   255,\n-     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,\n-     266,    -1,   268,   269,   270,   271,    -1,   273,   274,   275,\n-     276,   277,   278,    -1,   280,   281,   282,    -1,   284,   285,\n-     286,    -1,    -1,   289,   290,   291,   292,   293,   294,   295,\n+     256,   257,   258,   259,   260,    -1,   262,   263,   264,   265,\n+     266,    -1,   268,   269,    -1,   271,    -1,   273,   274,   275,\n+     276,   277,   278,    -1,   280,   281,    -1,    -1,   284,   285,\n+     286,    -1,    -1,   289,   290,    -1,   292,    -1,   294,   295,\n      296,   297,   298,   299,   300,   301,   302,   303,   304,    -1,\n-      -1,    -1,    -1,   309,   310,   311,   312,   313,   314,   315,\n+      -1,    -1,    -1,   309,   310,   311,    -1,   313,   314,   315,\n      316,   317,   318,    -1,   320,   321,   322,   323,   324,   325,\n       -1,   327,   328,   329,   330,   331,   332,   333,   334,    -1,\n      336,   337,   338,   339,   340,   341,   342,   343,   344,   345,\n-     346,   347,   348,    -1,   350,   351,   352,   353,   354,   355,\n+     346,   347,   348,    -1,   350,   351,    -1,   353,   354,   355,\n      356,   357,   358,   359,   360,   361,   362,   363,   364,   365,\n-     366,   367,    -1,   369,   370,   371,   372,   373,   374,   375,\n-     376,   377,   378,   379,   380,   381,   382,   383,   384,    -1,\n+     366,   367,    -1,    -1,   370,   371,   372,   373,   374,   375,\n+     376,   377,   378,   379,    -1,   381,   382,   383,   384,    -1,\n      386,   387,   388,   389,   390,   391,   392,   393,   394,   395,\n      396,   397,   398,   399,   400,   401,    -1,   403,   404,    -1,\n-     406,   407,   408,   409,   410,   411,   412,    -1,   414,   415,\n-      -1,    -1,   418,   419,   420,   421,   422,   423,   424,   425,\n+     406,    -1,   408,   409,   410,   411,   412,    -1,   414,   415,\n+      -1,    -1,   418,   419,   420,   421,   422,    -1,   424,   425,\n      426,   427,   428,   429,   430,   431,    -1,    -1,   434,   435,\n      436,    -1,   438,   439,   440,   441,    -1,   443,   444,   445,\n-     446,   447,   448,   449,    -1,   451,   452,   453,   454,   455,\n+     446,   447,   448,   449,    -1,   451,    -1,   453,   454,   455,\n      456,   457,    -1,    -1,   460,    -1,    -1,   463,   464,   465,\n      466,   467,   468,   469,   470,   471,   472,   473,   474,   475,\n      476,   477,   478,   479,   480,   481,   482,   483,     3,     4,\n-       5,    -1,    -1,    -1,     9,   491,   492,    -1,    -1,    -1,\n+       5,    -1,    -1,    -1,     9,    -1,    -1,   493,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,\n       25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,\n       -1,    -1,    37,    -1,    -1,    -1,    -1,    42,    43,    44,\n@@ -14846,7 +14799,7 @@ static const yytype_int16 yycheck[] =\n       75,    76,    77,    -1,    79,    -1,    81,    82,    83,    84,\n       85,    86,    87,    88,    89,    90,    -1,    92,    93,    94,\n       95,    96,    97,    -1,    99,   100,   101,   102,   103,   104,\n-     105,   106,   107,   108,   109,   110,   111,   112,    -1,   114,\n+     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,\n       -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,\n      125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,\n       -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,\n@@ -14883,468 +14836,424 @@ static const yytype_int16 yycheck[] =\n      445,   446,   447,   448,   449,    -1,   451,   452,   453,   454,\n      455,   456,   457,    -1,    -1,   460,    -1,    -1,   463,   464,\n      465,   466,   467,   468,   469,   470,   471,   472,   473,   474,\n-     475,   476,   477,   478,   479,   480,   481,   482,   483,    -1,\n-      -1,     8,    -1,    -1,    11,    -1,   491,   492,    15,    16,\n-      17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,\n-      -1,    -1,    -1,    -1,    41,    -1,    -1,    -1,    -1,    46,\n-      -1,     8,    -1,    -1,    11,    -1,    53,    -1,    15,    16,\n-      17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,\n-      -1,    78,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,\n-      -1,     8,    -1,    -1,    11,    -1,    53,    -1,    15,    16,\n-      17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,\n-      -1,    78,    -1,    -1,    -1,   122,    -1,    -1,    -1,    46,\n-      -1,     8,    -1,    -1,    11,    -1,    53,    -1,    15,    16,\n-      17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,\n-      -1,    78,    -1,    40,    -1,    -1,    -1,    -1,    -1,    46,\n-      -1,     8,    -1,    -1,    11,   172,    53,    -1,    15,    16,\n-      17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,\n-      -1,   188,    -1,    -1,    -1,    -1,   193,    -1,    -1,    36,\n-      -1,    78,    -1,    -1,    -1,   162,    -1,    -1,    -1,    46,\n-     167,    -1,    -1,    -1,    -1,   172,    53,    -1,    -1,   216,\n-     217,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,   188,    -1,    -1,   231,    -1,   193,    -1,    -1,    -1,\n-      -1,    78,    -1,    -1,   161,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,   172,    -1,    -1,    -1,   216,\n-     217,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-     267,   188,    -1,   270,   231,    -1,   193,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,   284,    -1,    -1,\n-     287,    -1,    -1,    -1,    -1,   172,    -1,    -1,    -1,   216,\n-     217,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-     267,   188,    -1,   270,   231,    -1,   193,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,   284,    -1,    -1,\n-     287,    -1,    -1,    -1,    -1,   172,    -1,    -1,    -1,   216,\n-     217,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-     267,   188,    -1,   270,   231,    -1,   193,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,   284,    -1,    -1,\n-     287,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   216,\n-     217,    -1,    -1,   380,    -1,    -1,    -1,    -1,    -1,    -1,\n-     267,    -1,    -1,   270,   231,    -1,    -1,   314,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,   284,    -1,    -1,\n-     287,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,   380,    -1,    -1,    -1,    -1,    -1,    -1,\n-     267,    -1,    -1,   270,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,   442,    -1,   284,    -1,    -1,\n-     287,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,   380,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,   308,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,   484,    -1,    -1,\n-     487,   488,   489,    -1,   491,   492,   493,   494,   495,   496,\n-      -1,    -1,    -1,   380,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,\n-      16,    17,    18,    19,    20,    21,    -1,   484,    -1,    -1,\n-     487,   488,   489,    -1,   491,   492,   493,   494,   495,   496,\n-      36,    -1,    -1,   380,    40,    -1,    -1,    -1,    -1,    -1,\n-      46,    -1,     8,    -1,    -1,    11,    -1,    53,    -1,    15,\n-      16,    17,    18,    19,    20,    21,    -1,   484,    -1,    -1,\n-     487,   488,   489,    -1,   491,   492,   493,   494,   495,   496,\n-      36,    -1,    78,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      46,    -1,     8,    -1,    -1,    11,    -1,    53,    -1,    15,\n-      16,    17,    18,    19,    20,    21,    -1,   484,    -1,    -1,\n-     487,   488,   489,    -1,   491,   492,   493,   494,   495,   496,\n-      36,    -1,    78,    -1,    40,    -1,    -1,    -1,    -1,    -1,\n-      46,    -1,     8,    -1,    -1,    11,    -1,    53,    -1,    15,\n-      16,    17,    18,    19,    20,    21,    -1,   484,    -1,    -1,\n-     487,   488,   489,    -1,   491,   492,   493,   494,   495,   496,\n-      36,    -1,    78,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      46,    -1,    -1,    -1,    -1,    -1,   172,    53,    -1,    -1,\n+     475,   476,   477,   478,   479,   480,   481,   482,   483,     3,\n+       4,     5,    -1,    -1,    -1,     9,   491,   492,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,\n+      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,\n+      -1,    -1,    -1,    37,    -1,    -1,    -1,    -1,    42,    43,\n+      44,    -1,    46,    47,    48,    49,    50,    51,    52,    53,\n+      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,\n+      64,    -1,    -1,    67,    68,    69,    70,    71,    -1,    73,\n+      74,    75,    76,    77,    -1,    79,    -1,    81,    82,    83,\n+      84,    85,    86,    87,    88,    89,    90,    -1,    92,    93,\n+      94,    95,    96,    97,    -1,    99,   100,   101,   102,   103,\n+     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,\n+     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,\n+     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,\n+     134,    -1,   136,   137,   138,    -1,   140,   141,   142,    -1,\n+     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,\n+     154,   155,   156,    -1,   158,   159,   160,   161,    -1,   163,\n+      -1,   165,   166,    -1,   168,   169,   170,   171,   172,   173,\n+      -1,   175,    -1,   177,   178,   179,    -1,   181,   182,   183,\n+     184,   185,   186,   187,   188,   189,   190,   191,   192,    -1,\n+     194,   195,   196,   197,   198,   199,   200,    -1,   202,   203,\n+     204,   205,   206,   207,   208,   209,   210,   211,    -1,   213,\n+      -1,   215,   216,   217,   218,   219,   220,   221,   222,   223,\n+     224,   225,    -1,    -1,   228,   229,   230,   231,    -1,   233,\n+     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,\n+     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,\n+     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,\n+     264,   265,   266,    -1,   268,   269,   270,   271,    -1,   273,\n+     274,   275,   276,   277,   278,    -1,   280,   281,   282,    -1,\n+     284,   285,   286,    -1,    -1,   289,   290,   291,   292,   293,\n+     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,\n+     304,    -1,    -1,    -1,    -1,   309,   310,   311,   312,   313,\n+     314,   315,   316,   317,   318,    -1,   320,   321,   322,   323,\n+     324,   325,    -1,   327,   328,   329,   330,   331,   332,   333,\n+     334,    -1,   336,   337,   338,   339,   340,   341,   342,   343,\n+     344,   345,   346,   347,   348,    -1,   350,   351,   352,   353,\n+     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,\n+     364,   365,   366,   367,    -1,   369,   370,   371,   372,   373,\n+     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,\n+     384,    -1,   386,   387,   388,   389,   390,   391,   392,   393,\n+     394,   395,   396,   397,   398,   399,   400,   401,    -1,   403,\n+     404,    -1,   406,   407,   408,   409,   410,   411,   412,    -1,\n+     414,   415,    -1,    -1,   418,   419,   420,   421,   422,   423,\n+     424,   425,   426,   427,   428,   429,   430,   431,    -1,    -1,\n+     434,   435,   436,    -1,   438,   439,   440,   441,    -1,   443,\n+     444,   445,   446,   447,   448,   449,    -1,   451,   452,   453,\n+     454,   455,   456,   457,    -1,    -1,   460,    -1,    -1,   463,\n+     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,\n+     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,\n+       3,     4,     5,    -1,    -1,    -1,     9,   491,   492,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,\n+      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,\n+      33,    -1,    -1,    -1,    37,    -1,    -1,    -1,    -1,    42,\n+      43,    44,    -1,    46,    47,    48,    49,    50,    51,    52,\n+      53,    54,    55,    56,    57,    -1,    59,    60,    61,    62,\n+      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    -1,\n+      73,    74,    75,    76,    77,    -1,    79,    -1,    81,    82,\n+      83,    84,    85,    86,    87,    88,    89,    90,    -1,    92,\n+      93,    94,    95,    96,    97,    -1,    99,   100,   101,   102,\n+     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,\n+      -1,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,\n+     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,\n+     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,\n+      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,\n+     153,   154,   155,   156,    -1,   158,   159,   160,   161,    -1,\n+     163,    -1,   165,   166,    -1,   168,   169,   170,   171,   172,\n+     173,    -1,   175,    -1,   177,   178,   179,    -1,   181,   182,\n+     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,\n+      -1,   194,   195,   196,   197,   198,   199,   200,    -1,   202,\n+     203,   204,   205,   206,   207,   208,   209,   210,   211,    -1,\n+     213,    -1,   215,   216,   217,   218,   219,   220,   221,   222,\n+     223,   224,   225,    -1,    -1,   228,   229,   230,   231,    -1,\n+     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,\n+     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,\n+     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,\n+     263,   264,   265,   266,    -1,   268,   269,   270,   271,    -1,\n+     273,   274,   275,   276,   277,   278,    -1,   280,   281,   282,\n+      -1,   284,   285,   286,    -1,    -1,   289,   290,   291,   292,\n+     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,\n+     303,   304,    -1,    -1,    -1,    -1,   309,   310,   311,   312,\n+     313,   314,   315,   316,   317,   318,    -1,   320,   321,   322,\n+     323,   324,   325,    -1,   327,   328,   329,   330,   331,   332,\n+     333,   334,    -1,   336,   337,   338,   339,   340,   341,   342,\n+     343,   344,   345,   346,   347,   348,    -1,   350,   351,   352,\n+     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,\n+     363,   364,   365,   366,   367,    -1,   369,   370,   371,   372,\n+     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,\n+     383,   384,    -1,   386,   387,   388,   389,   390,   391,   392,\n+     393,   394,   395,   396,   397,   398,   399,   400,   401,    -1,\n+     403,   404,    -1,   406,   407,   408,   409,   410,   411,   412,\n+      -1,   414,   415,    -1,    -1,   418,   419,   420,   421,   422,\n+     423,   424,   425,   426,   427,   428,   429,   430,   431,    -1,\n+      -1,   434,   435,   436,    -1,   438,   439,   440,   441,    -1,\n+     443,   444,   445,   446,   447,   448,   449,    -1,   451,   452,\n+     453,   454,   455,   456,   457,    -1,    -1,   460,    -1,    -1,\n+     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,\n+     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,\n+     483,    -1,    -1,     8,    -1,    -1,    11,    -1,   491,   492,\n+      15,    16,    17,    18,    19,    20,    21,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,   188,    -1,    -1,    -1,    -1,   193,    -1,    -1,\n-      -1,    -1,    78,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,   167,    -1,    -1,    -1,    -1,   172,    -1,    -1,    -1,\n-     216,   217,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,   188,    -1,    -1,   231,    -1,   193,    -1,    -1,\n+      -1,    36,    -1,    -1,    -1,    -1,    41,    -1,    -1,    -1,\n+      -1,    46,    -1,     8,    -1,    -1,    11,    -1,    53,    -1,\n+      15,    16,    17,    18,    19,    20,    21,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,   172,    -1,    -1,    -1,\n-     216,   217,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,   267,   188,    -1,   270,   231,    -1,   193,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,   162,    -1,   284,    -1,\n-      -1,   287,    -1,    -1,    -1,    -1,   172,    -1,    -1,    -1,\n-     216,   217,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,   267,   188,    -1,   270,   231,    -1,   193,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   284,    -1,\n-      -1,   287,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-     216,   217,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,   267,    -1,    -1,   270,   231,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   284,    -1,\n-      -1,   287,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,   380,    -1,    -1,    -1,    -1,    -1,\n-      -1,   267,    -1,    -1,   270,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   284,    -1,\n-      -1,   287,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-       8,    -1,    -1,    11,   380,    -1,    -1,    15,    16,    17,\n-      18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    36,    15,\n-      16,    17,    18,    19,    20,    21,    -1,    -1,    46,    -1,\n-      -1,    -1,    -1,    -1,   380,    53,    -1,    -1,    -1,    -1,\n-      36,    -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,    -1,\n-      46,    -1,    -1,    -1,    -1,    -1,    -1,    53,   484,    -1,\n-      78,   487,   488,   489,    -1,   491,   492,   493,   494,   495,\n-     496,    -1,    -1,    -1,   380,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    78,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   484,    -1,\n-      -1,   487,   488,   489,    -1,   491,   492,   493,   494,   495,\n-     496,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    36,    -1,    78,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    46,    -1,     8,    -1,    -1,    11,    -1,    53,    -1,\n+      15,    16,    17,    18,    19,    20,    21,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   484,    -1,\n-      -1,   487,   488,   489,    -1,   491,   492,   493,   494,   495,\n-     496,    -1,    -1,    -1,   172,    -1,     8,    -1,    -1,    11,\n-      -1,    -1,    -1,    15,    16,    17,    18,    19,    20,    21,\n-     188,    -1,    -1,    -1,    -1,   193,   172,    -1,   484,    -1,\n-      -1,   487,   488,   489,    36,   491,   492,   493,   494,   495,\n-     496,    -1,   188,    -1,    46,    -1,    -1,   193,   216,   217,\n-      -1,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,   231,    -1,    -1,    -1,    -1,    -1,    -1,\n-     216,   217,    -1,    -1,    -1,     8,    78,    -1,    11,    -1,\n-      -1,    -1,    15,    16,    -1,   231,    19,    20,    21,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   267,\n-      -1,    -1,   270,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    46,    -1,    -1,   284,    -1,    -1,   287,\n-      53,   267,    -1,    -1,   270,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   284,    -1,\n-      -1,   287,    -1,    -1,    -1,    78,    -1,    -1,    -1,     8,\n-      -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,\n-      19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-     172,    -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,   188,    46,    -1,    -1,\n-      -1,   193,    -1,    -1,    53,    -1,    -1,    -1,    -1,    -1,\n+      -1,    36,    -1,    78,    -1,    -1,    -1,   122,    -1,    -1,\n+      -1,    46,    -1,     8,    -1,    -1,    11,    -1,    53,    -1,\n+      15,    16,    17,    18,    19,    20,    21,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,   380,    -1,   216,   217,    -1,    -1,    -1,    78,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   231,\n-      -1,    -1,    -1,    -1,   380,    -1,    -1,    -1,    -1,   172,\n-      -1,    -1,    -1,    -1,    -1,   413,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,   188,    -1,    -1,    -1,    -1,\n-     193,    -1,    -1,    -1,    -1,   267,    -1,    -1,   270,    -1,\n+      -1,    36,    -1,    78,    -1,    40,    -1,    -1,    -1,    -1,\n+      -1,    46,    -1,     8,    -1,    -1,    11,   172,    53,    -1,\n+      15,    16,    17,    18,    19,    20,    21,    -1,    -1,    -1,\n+      -1,    -1,    -1,   188,    -1,    -1,    -1,    -1,   193,    -1,\n+      -1,    36,    -1,    78,    -1,    -1,    -1,   162,    -1,    -1,\n+      -1,    46,   167,    -1,    -1,    -1,    -1,   172,    53,    -1,\n+      -1,   216,   217,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,   188,    -1,    -1,   231,    -1,   193,    -1,\n+      -1,    -1,    -1,    78,    -1,    -1,   161,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,   172,    -1,    -1,\n+      -1,   216,   217,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,   267,   188,    -1,   270,   231,    -1,   193,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   284,\n+      -1,    -1,   287,    -1,    -1,    -1,    -1,   172,    -1,    -1,\n+      -1,   216,   217,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,   267,   188,    -1,   270,   231,    -1,   193,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   284,\n+      -1,    -1,   287,    -1,    -1,    -1,    -1,   172,    -1,    -1,\n+      -1,   216,   217,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,   267,   188,    -1,   270,   231,    -1,   193,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   284,\n+      -1,    -1,   287,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,   216,   217,    -1,    -1,   380,    -1,    -1,    -1,    -1,\n+      -1,    -1,   267,    -1,    -1,   270,   231,    -1,    -1,   314,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   284,\n+      -1,    -1,   287,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,   380,    -1,    -1,    -1,    -1,\n+      -1,    -1,   267,    -1,    -1,   270,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,   442,    -1,   284,\n+      -1,    -1,   287,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,   380,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,   308,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   484,\n+      -1,    -1,   487,   488,   489,    -1,   491,   492,   493,   494,\n+     495,   496,    -1,    -1,    -1,   380,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,\n+      -1,    15,    16,    17,    18,    19,    20,    21,    -1,   484,\n+      -1,    -1,   487,   488,   489,    -1,   491,   492,   493,   494,\n+     495,   496,    36,    -1,    -1,   380,    40,    -1,    -1,    -1,\n+      -1,    -1,    46,    -1,     8,    -1,    -1,    11,    -1,    53,\n+      -1,    15,    16,    17,    18,    19,    20,    21,    -1,   484,\n+      -1,    -1,   487,   488,   489,    -1,   491,   492,   493,   494,\n+     495,   496,    36,    -1,    78,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    46,    -1,     8,    -1,    -1,    11,    -1,    53,\n+      -1,    15,    16,    17,    18,    19,    20,    21,    -1,   484,\n+      -1,    -1,   487,   488,   489,    -1,   491,   492,   493,   494,\n+     495,   496,    36,    -1,    78,    -1,    40,    -1,    -1,    -1,\n+      -1,    -1,    46,    -1,     8,    -1,    -1,    11,    -1,    53,\n+      -1,    15,    16,    17,    18,    19,    20,    21,    -1,   484,\n+      -1,    -1,   487,   488,   489,    -1,   491,   492,   493,   494,\n+     495,   496,    36,    -1,    78,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    46,    -1,    -1,    -1,    -1,    -1,   172,    53,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,   284,   216,   217,   287,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   231,    -1,\n+      -1,    -1,    -1,    -1,   188,    -1,    -1,    -1,    -1,   193,\n+      -1,    -1,    -1,    -1,    78,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,   167,    -1,    -1,    -1,    -1,   172,    -1,\n+      -1,    -1,   216,   217,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,   188,    -1,    -1,   231,    -1,   193,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,   172,    -1,    -1,   484,    -1,    -1,   487,\n-     488,   489,    -1,   491,   492,   493,   494,   495,   496,   188,\n-      -1,    -1,    -1,    -1,   193,    -1,    -1,   270,   484,    -1,\n-      -1,   487,   488,   489,    -1,   491,   492,   493,   494,   495,\n-     496,   284,    -1,    -1,    -1,    -1,    -1,   216,   217,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   172,    -1,\n+      -1,    -1,   216,   217,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,   267,   188,    -1,   270,   231,    -1,   193,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   162,    -1,\n+     284,    -1,    -1,   287,    -1,    -1,    -1,    -1,   172,    -1,\n+      -1,    -1,   216,   217,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,   267,   188,    -1,   270,   231,    -1,   193,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,   231,    -1,    -1,    -1,    -1,    -1,   380,    -1,\n+     284,    -1,    -1,   287,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,   216,   217,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,   267,    -1,    -1,   270,   231,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+     284,    -1,    -1,   287,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,   380,    -1,    -1,    -1,\n+      -1,    -1,    -1,   267,    -1,    -1,   270,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   267,    -1,\n-      -1,   270,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,   284,    -1,    -1,   287,    -1,\n+     284,    -1,    -1,   287,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,     8,    -1,    -1,    11,   380,    -1,    -1,    15,\n+      16,    17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,\n+      36,    15,    16,    17,    18,    19,    20,    21,    -1,    -1,\n+      46,    -1,    -1,    -1,    -1,    -1,   380,    53,    -1,    -1,\n+      -1,    -1,    36,    -1,    -1,    -1,    40,    -1,    -1,    -1,\n+      -1,    -1,    46,    -1,    -1,    -1,    -1,    -1,    -1,    53,\n+     484,    -1,    78,   487,   488,   489,    -1,   491,   492,   493,\n+     494,   495,   496,    -1,    -1,    -1,   380,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    78,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,    -1,    -1,\n+     484,    -1,    -1,   487,   488,   489,    -1,   491,   492,   493,\n+     494,   495,   496,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+     484,    -1,    -1,   487,   488,   489,    -1,   491,   492,   493,\n+     494,   495,   496,    -1,    -1,    -1,   172,    -1,     8,    -1,\n+      -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,    19,\n+      20,    21,   188,    -1,    -1,    -1,    -1,   193,   172,    -1,\n+     484,    -1,    -1,   487,   488,   489,    36,   491,   492,   493,\n+     494,   495,   496,    -1,   188,    -1,    46,    -1,    -1,   193,\n+     216,   217,    -1,    53,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,   231,    -1,    -1,    -1,    -1,\n+      -1,    -1,   216,   217,    -1,    -1,    -1,    -1,    78,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,   231,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,   484,    -1,    -1,   487,   488,   489,    -1,   491,\n-     492,   493,   494,   495,   496,    -1,    -1,    -1,    -1,    -1,\n+      -1,   267,    -1,    -1,   270,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   284,    -1,\n+      -1,   287,    -1,   267,    -1,    -1,   270,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+     284,    -1,    -1,   287,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,\n+      17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,   172,     8,    -1,    -1,    11,    -1,    -1,    36,\n+      15,    16,    -1,    -1,    19,    20,    21,    -1,   188,    46,\n+      -1,    -1,     8,   193,    -1,    11,    53,    -1,    -1,    15,\n+      16,    36,    -1,    19,    20,    21,    -1,    -1,    -1,    -1,\n+      -1,    46,    -1,    -1,   380,    -1,   216,   217,    53,    -1,\n+      36,    78,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      46,   231,    -1,    -1,    -1,    -1,   380,    53,    -1,    -1,\n+      -1,    -1,    -1,    78,    -1,    -1,    -1,   413,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,   380,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    78,    -1,    -1,    -1,    -1,   267,    -1,    -1,\n+     270,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,   284,    -1,    -1,   287,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,   484,    -1,    -1,   487,   488,   489,    -1,   491,   492,\n-     493,   494,   495,   496,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,   172,    -1,    -1,   484,    -1,\n+      -1,   487,   488,   489,    -1,   491,   492,   493,   494,   495,\n+     496,   188,    -1,    -1,    -1,    -1,   193,   172,    -1,    -1,\n+     484,    -1,    -1,   487,   488,   489,    -1,   491,   492,   493,\n+     494,   495,   496,   188,    -1,    -1,   172,    -1,   193,   216,\n+     217,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,   188,    -1,   231,    -1,    -1,   193,    -1,    -1,\n+     380,   216,   217,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,   231,    -1,    -1,    -1,\n+     216,   217,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+     267,    -1,    -1,   270,    -1,   231,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,   284,    -1,    -1,\n+     287,    -1,   267,    -1,    -1,   270,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   284,\n+      -1,   267,   287,    -1,   270,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   284,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,   484,    -1,    -1,   487,   488,   489,\n+      -1,   491,   492,   493,   494,   495,   496,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,   380,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,\n-      -1,     5,    -1,    -1,    -1,   484,    -1,    -1,   487,   488,\n-     489,    -1,   491,   492,   493,   494,   495,   496,    22,    23,\n-      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,\n-      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,\n-      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,\n-      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,\n-      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,\n-      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,\n-      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,\n-      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,\n-     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,\n-     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,\n-     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,\n-     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,\n-     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,\n-     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,\n-     164,   165,   166,   167,   168,   169,   170,   171,   172,   173,\n-     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,\n-     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,\n-     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,\n-     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,\n-     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,\n-     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,\n-     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,\n-     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,\n-     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,\n-     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,\n-     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,\n-     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,\n-     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,\n-     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,\n-     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,\n-     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,\n-     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,\n-     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,\n-     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,\n-     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,\n-     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,\n-     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,\n-     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,\n-     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,\n-     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,\n-     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,\n-     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,\n-     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,\n-     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,\n-     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,\n-     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,\n-       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,\n-      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,\n-      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,\n-      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,\n-      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,\n-      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,\n-      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,\n-      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,\n-      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,\n-     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,\n-     113,   114,   115,   116,   117,   118,   119,   120,   121,   122,\n-     123,   124,   125,   126,   127,   128,   129,   130,   131,   132,\n-     133,   134,   135,   136,   137,   138,   139,   140,   141,   142,\n-     143,   144,   145,   146,   147,   148,   149,   150,   151,   152,\n-     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,\n-     163,   164,   165,   166,   167,   168,   169,   170,   171,   172,\n-     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,\n-     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,\n-     193,   194,   195,   196,   197,   198,   199,   200,   201,   202,\n-     203,   204,   205,   206,   207,   208,   209,   210,   211,   212,\n-     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,\n-     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,\n-     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,\n-     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,\n-     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,\n-     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,\n-     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,\n-     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,\n-     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,\n-     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,\n-     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,\n-     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,\n-     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,\n-     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,\n-     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,\n-     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,\n-     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,\n-     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,\n-     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,\n-     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,\n-     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,\n-     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,\n-     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,\n-     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,\n-     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,\n-     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,\n-     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,\n-     483,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,   380,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,\n-      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,\n-      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,\n-      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,\n-      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,\n-      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,\n-      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,\n-      92,    93,    94,    95,    96,    97,    98,    99,   100,   101,\n-     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,\n-     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,\n-     122,   123,   124,   125,   126,   127,   128,   129,   130,   131,\n-     132,   133,   134,   135,   136,   137,   138,   139,   140,   141,\n-     142,   143,   144,   145,   146,   147,   148,   149,   150,   151,\n-     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,\n-     162,   163,   164,   165,   166,   167,   168,   169,   170,   171,\n-     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,\n-     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,\n-     192,   193,   194,   195,   196,   197,   198,   199,   200,   201,\n-     202,   203,   204,   205,   206,   207,   208,   209,   210,   211,\n-     212,   213,   214,   215,   216,   217,   218,   219,   220,   221,\n-     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,\n-     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,\n-     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,\n-     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,\n-     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,\n-     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,\n-     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,\n-     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,\n-     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,\n-     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,\n-     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,\n-     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,\n-     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,\n-     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,\n-     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,\n-     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,\n-     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,\n-     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,\n-     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,\n-     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,\n-     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,\n-     432,   433,   434,   435,   436,   437,   438,   439,   440,   441,\n-     442,   443,   444,   445,   446,   447,   448,   449,   450,   451,\n-     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,\n-     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,\n-     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,\n-     482,   483,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,   380,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,\n-      31,    32,    33,    -1,    -1,    -1,    37,    -1,    -1,    -1,\n-      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,\n-      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,\n-      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,\n-      71,    -1,    73,    74,    75,    76,    77,    -1,    79,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,   484,    -1,    -1,\n+     487,   488,   489,    -1,   491,   492,   493,   494,   495,   496,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   484,\n+      -1,    -1,   487,   488,   489,    -1,   491,   492,   493,   494,\n+     495,   496,     3,    -1,     5,    -1,    -1,    -1,   484,    -1,\n+      -1,   487,   488,   489,    -1,   491,   492,   493,   494,   495,\n+     496,    22,    23,    24,    25,    26,    27,    28,    29,    30,\n+      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,\n+      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,\n+      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,\n+      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,\n+      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,\n       81,    82,    83,    84,    85,    86,    87,    88,    89,    90,\n-      -1,    92,    93,    94,    95,    96,    97,    -1,    99,   100,\n+      91,    92,    93,    94,    95,    96,    97,    98,    99,   100,\n      101,   102,   103,   104,   105,   106,   107,   108,   109,   110,\n-     111,   112,    -1,   114,    -1,   116,   117,   118,   119,   120,\n-     121,    -1,   123,   124,   125,   126,   127,    -1,    -1,   130,\n-     131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,\n-     141,   142,    -1,   144,   145,   146,   147,   148,   149,   150,\n-     151,   152,   153,   154,   155,   156,    -1,   158,   159,   160,\n-     161,    -1,   163,    -1,   165,   166,    -1,   168,   169,   170,\n-     171,   172,   173,    -1,   175,    -1,   177,   178,   179,    -1,\n+     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,\n+     121,   122,   123,   124,   125,   126,   127,   128,   129,   130,\n+     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,\n+     141,   142,   143,   144,   145,   146,   147,   148,   149,   150,\n+     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,\n+     161,   162,   163,   164,   165,   166,   167,   168,   169,   170,\n+     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,\n      181,   182,   183,   184,   185,   186,   187,   188,   189,   190,\n-     191,   192,    -1,   194,   195,   196,   197,   198,   199,   200,\n-      -1,   202,   203,   204,   205,   206,   207,   208,   209,   210,\n-     211,    -1,   213,    -1,   215,   216,   217,   218,   219,   220,\n-     221,   222,   223,   224,   225,    -1,    -1,   228,   229,   230,\n-     231,    -1,   233,   234,   235,   236,   237,   238,   239,   240,\n+     191,   192,   193,   194,   195,   196,   197,   198,   199,   200,\n+     201,   202,   203,   204,   205,   206,   207,   208,   209,   210,\n+     211,   212,   213,   214,   215,   216,   217,   218,   219,   220,\n+     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,\n+     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,\n      241,   242,   243,   244,   245,   246,   247,   248,   249,   250,\n      251,   252,   253,   254,   255,   256,   257,   258,   259,   260,\n-     261,   262,   263,   264,   265,   266,    -1,   268,   269,   270,\n-     271,    -1,   273,   274,   275,   276,   277,   278,    -1,   280,\n-     281,   282,    -1,   284,   285,   286,    -1,    -1,   289,   290,\n+     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,\n+     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,\n+     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,\n      291,   292,   293,   294,   295,   296,   297,   298,   299,   300,\n-     301,   302,   303,   304,    -1,    -1,    -1,    -1,   309,   310,\n-     311,   312,   313,   314,   315,   316,   317,   318,    -1,   320,\n-     321,   322,   323,   324,   325,    -1,   327,   328,   329,   330,\n-     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,\n-     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,\n+     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,\n+     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,\n+     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,\n+     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,\n+     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,\n      351,   352,   353,   354,   355,   356,   357,   358,   359,   360,\n-     361,   362,   363,   364,   365,   366,   367,    -1,   369,   370,\n+     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,\n      371,   372,   373,   374,   375,   376,   377,   378,   379,   380,\n-     381,   382,   383,   384,    -1,   386,   387,   388,   389,   390,\n+     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,\n      391,   392,   393,   394,   395,   396,   397,   398,   399,   400,\n-     401,    -1,   403,   404,    -1,   406,   407,   408,   409,   410,\n-     411,   412,    -1,   414,   415,    -1,    -1,   418,   419,   420,\n+     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,\n+     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,\n      421,   422,   423,   424,   425,   426,   427,   428,   429,   430,\n-     431,    -1,    -1,   434,   435,   436,    -1,   438,   439,   440,\n-     441,    -1,   443,   444,   445,   446,   447,   448,   449,    -1,\n-     451,   452,   453,   454,   455,   456,   457,    -1,    -1,   460,\n-      -1,    -1,   463,   464,   465,   466,   467,   468,   469,   470,\n+     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,\n+     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,\n+     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,\n+     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,\n      471,   472,   473,   474,   475,   476,   477,   478,   479,   480,\n      481,   482,   483,     3,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,\n-      -1,    31,    32,    33,    34,    35,    -1,    37,    -1,    -1,\n-      -1,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,\n-      50,    51,    52,    53,    54,    55,    56,    57,    -1,    59,\n-      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,\n-      70,    71,    -1,    73,    74,    75,    76,    77,    -1,    79,\n-      -1,    81,    82,    83,    84,    85,    86,    87,    88,    89,\n-      90,    -1,    92,    93,    94,    95,    96,    97,    -1,    99,\n+      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,\n+      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,\n+      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,\n+      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,\n+      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,\n+      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,\n+      90,    91,    92,    93,    94,    95,    96,    97,    98,    99,\n      100,   101,   102,   103,   104,   105,   106,   107,   108,   109,\n-     110,   111,   112,    -1,   114,    -1,   116,   117,   118,   119,\n-     120,   121,    -1,   123,   124,   125,   126,   127,    -1,    -1,\n-     130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,\n-     140,   141,   142,    -1,   144,   145,   146,   147,   148,   149,\n-     150,   151,   152,   153,   154,    -1,   156,    -1,   158,   159,\n-     160,   161,    -1,   163,    -1,   165,   166,    -1,   168,   169,\n-     170,   171,   172,   173,    -1,   175,    -1,   177,   178,   179,\n-      -1,   181,   182,   183,   184,   185,   186,   187,   188,   189,\n-     190,   191,   192,    -1,   194,   195,   196,   197,   198,   199,\n-     200,    -1,   202,   203,   204,   205,   206,   207,   208,   209,\n-     210,   211,    -1,   213,    -1,   215,   216,   217,   218,   219,\n-     220,   221,   222,   223,   224,   225,    -1,    -1,   228,   229,\n-     230,   231,    -1,   233,   234,   235,   236,   237,   238,   239,\n+     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,\n+     120,   121,   122,   123,   124,   125,   126,   127,   128,   129,\n+     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,\n+     140,   141,   142,   143,   144,   145,   146,   147,   148,   149,\n+     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,\n+     160,   161,   162,   163,   164,   165,   166,   167,   168,   169,\n+     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,\n+     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,\n+     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,\n+     200,   201,   202,   203,   204,   205,   206,   207,   208,   209,\n+     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,\n+     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,\n+     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,\n      240,   241,   242,   243,   244,   245,   246,   247,   248,   249,\n      250,   251,   252,   253,   254,   255,   256,   257,   258,   259,\n-     260,   261,   262,   263,   264,   265,   266,    -1,   268,   269,\n-     270,   271,    -1,   273,   274,   275,   276,   277,   278,    -1,\n-     280,   281,    -1,    -1,   284,   285,   286,    -1,    -1,   289,\n+     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,\n+     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,\n+     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,\n      290,   291,   292,   293,   294,   295,   296,   297,   298,   299,\n-     300,   301,   302,   303,   304,    -1,    -1,    -1,    -1,   309,\n-     310,   311,   312,   313,   314,   315,   316,   317,   318,    -1,\n-     320,   321,   322,   323,   324,   325,    -1,   327,   328,   329,\n-     330,   331,   332,   333,   334,    -1,   336,   337,   338,   339,\n-     340,   341,   342,   343,   344,   345,   346,   347,   348,    -1,\n+     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,\n+     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,\n+     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,\n+     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,\n+     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,\n      350,   351,   352,   353,   354,   355,   356,   357,   358,   359,\n-     360,   361,   362,   363,   364,   365,   366,   367,    -1,   369,\n+     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,\n      370,   371,   372,   373,   374,   375,   376,   377,   378,   379,\n-     380,   381,   382,   383,   384,    -1,   386,   387,   388,   389,\n+     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,\n      390,   391,   392,   393,   394,   395,   396,   397,   398,   399,\n-     400,   401,    -1,   403,   404,    -1,   406,   407,   408,   409,\n-     410,   411,   412,    -1,   414,   415,    -1,    -1,   418,   419,\n-     420,   421,   422,    -1,   424,   425,   426,   427,   428,   429,\n-     430,   431,    -1,    -1,   434,   435,   436,    -1,   438,   439,\n-     440,   441,    -1,   443,   444,   445,   446,   447,   448,   449,\n-      -1,   451,   452,   453,   454,   455,   456,   457,    -1,    -1,\n-     460,    -1,    -1,   463,   464,   465,   466,   467,   468,   469,\n+     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,\n+     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,\n+     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,\n+     430,   431,   432,   433,   434,   435,   436,   437,   438,   439,\n+     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,\n+     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,\n+     460,   461,   462,   463,   464,   465,   466,   467,   468,   469,\n      470,   471,   472,   473,   474,   475,   476,   477,   478,   479,\n      480,   481,   482,   483,     3,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,\n-      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,\n-      49,    50,    51,    52,    53,    54,    55,    56,    57,    -1,\n-      59,    60,    61,    62,    63,    64,    -1,    66,    67,    68,\n-      69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,\n-      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,\n-      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,\n+      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,\n+      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,\n+      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,\n+      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,\n+      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,\n+      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,\n+      89,    90,    91,    92,    93,    94,    95,    96,    97,    98,\n       99,   100,   101,   102,   103,   104,   105,   106,   107,   108,\n-     109,   110,   111,   112,    -1,   114,    -1,   116,   117,   118,\n-     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,\n-      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,\n-      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,\n-     149,   150,   151,   152,   153,   154,    -1,   156,    -1,   158,\n-     159,   160,   161,    -1,   163,    -1,   165,   166,    -1,   168,\n-     169,   170,   171,   172,   173,    -1,   175,    -1,   177,   178,\n-     179,    -1,   181,   182,   183,   184,   185,   186,   187,   188,\n-     189,   190,   191,   192,    -1,   194,   195,   196,   197,   198,\n-     199,   200,    -1,   202,   203,   204,   205,   206,   207,   208,\n-     209,   210,   211,    -1,   213,    -1,   215,   216,   217,   218,\n-     219,   220,   221,   222,   223,   224,   225,    -1,    -1,   228,\n-     229,   230,   231,    -1,   233,   234,   235,   236,   237,   238,\n+     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,\n+     119,   120,   121,   122,   123,   124,   125,   126,   127,   128,\n+     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,\n+     139,   140,   141,   142,   143,   144,   145,   146,   147,   148,\n+     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,\n+     159,   160,   161,   162,   163,   164,   165,   166,   167,   168,\n+     169,   170,   171,   172,   173,   174,   175,   176,   177,   178,\n+     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,\n+     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,\n+     199,   200,   201,   202,   203,   204,   205,   206,   207,   208,\n+     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,\n+     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,\n+     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,\n      239,   240,   241,   242,   243,   244,   245,   246,   247,   248,\n      249,   250,   251,   252,   253,   254,   255,   256,   257,   258,\n-     259,   260,   261,   262,   263,   264,   265,   266,    -1,   268,\n-     269,   270,   271,    -1,   273,   274,   275,   276,   277,   278,\n-      -1,   280,   281,    -1,    -1,   284,   285,   286,    -1,    -1,\n+     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,\n+     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,\n+     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,\n      289,   290,   291,   292,   293,   294,   295,   296,   297,   298,\n-     299,   300,   301,   302,   303,   304,    -1,    -1,    -1,    -1,\n+     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,\n      309,   310,   311,   312,   313,   314,   315,   316,   317,   318,\n-      -1,   320,   321,   322,   323,   324,   325,    -1,   327,   328,\n-     329,   330,   331,   332,   333,   334,    -1,   336,   337,   338,\n+     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,\n+     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,\n      339,   340,   341,   342,   343,   344,   345,   346,   347,   348,\n-      -1,   350,   351,   352,   353,   354,   355,   356,   357,   358,\n-     359,   360,   361,   362,   363,   364,   365,   366,   367,    -1,\n-      -1,   370,   371,   372,   373,   374,   375,   376,   377,   378,\n-     379,   380,   381,   382,   383,   384,    -1,   386,   387,   388,\n+     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,\n+     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,\n+     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,\n+     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,\n      389,   390,   391,   392,   393,   394,   395,   396,   397,   398,\n-     399,   400,   401,    -1,   403,   404,    -1,   406,   407,   408,\n-     409,   410,   411,   412,    -1,   414,   415,    -1,    -1,   418,\n-     419,   420,   421,   422,    -1,   424,   425,   426,   427,   428,\n-     429,   430,   431,    -1,    -1,   434,   435,   436,    -1,   438,\n-     439,   440,   441,    -1,   443,   444,   445,   446,   447,   448,\n-     449,    -1,   451,   452,   453,   454,   455,   456,   457,    -1,\n-      -1,   460,    -1,    -1,   463,   464,   465,   466,   467,   468,\n+     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,\n+     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,\n+     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,\n+     429,   430,   431,   432,   433,   434,   435,   436,   437,   438,\n+     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,\n+     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,\n+     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,\n      469,   470,   471,   472,   473,   474,   475,   476,   477,   478,\n-     479,   480,   481,   482,   483,     3,    -1,    -1,    -1,    -1,\n+     479,   480,   481,   482,   483,     3,    -1,     5,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,\n-      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,\n+      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    37,\n       -1,    -1,    -1,    -1,    42,    43,    44,    -1,    46,    47,\n       48,    49,    50,    51,    52,    53,    54,    55,    56,    57,\n       -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,\n@@ -15356,7 +15265,7 @@ static const yytype_int16 yycheck[] =\n      118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,\n       -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,\n      138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,\n-     148,   149,   150,   151,   152,   153,   154,    -1,   156,    -1,\n+     148,   149,   150,   151,   152,   153,   154,   155,   156,    -1,\n      158,   159,   160,   161,    -1,   163,    -1,   165,   166,    -1,\n      168,   169,   170,   171,   172,   173,    -1,   175,    -1,   177,\n      178,   179,    -1,   181,   182,   183,   184,   185,   186,   187,\n@@ -15369,7 +15278,7 @@ static const yytype_int16 yycheck[] =\n      248,   249,   250,   251,   252,   253,   254,   255,   256,   257,\n      258,   259,   260,   261,   262,   263,   264,   265,   266,    -1,\n      268,   269,   270,   271,    -1,   273,   274,   275,   276,   277,\n-     278,    -1,   280,   281,    -1,    -1,   284,   285,   286,    -1,\n+     278,    -1,   280,   281,   282,    -1,   284,   285,   286,    -1,\n       -1,   289,   290,   291,   292,   293,   294,   295,   296,   297,\n      298,   299,   300,   301,   302,   303,   304,    -1,    -1,    -1,\n       -1,   309,   310,   311,   312,   313,   314,   315,   316,   317,\n@@ -15378,12 +15287,12 @@ static const yytype_int16 yycheck[] =\n      338,   339,   340,   341,   342,   343,   344,   345,   346,   347,\n      348,    -1,   350,   351,   352,   353,   354,   355,   356,   357,\n      358,   359,   360,   361,   362,   363,   364,   365,   366,   367,\n-      -1,    -1,   370,   371,   372,   373,   374,   375,   376,   377,\n+      -1,   369,   370,   371,   372,   373,   374,   375,   376,   377,\n      378,   379,   380,   381,   382,   383,   384,    -1,   386,   387,\n      388,   389,   390,   391,   392,   393,   394,   395,   396,   397,\n      398,   399,   400,   401,    -1,   403,   404,    -1,   406,   407,\n      408,   409,   410,   411,   412,    -1,   414,   415,    -1,    -1,\n-     418,   419,   420,   421,   422,    -1,   424,   425,   426,   427,\n+     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,\n      428,   429,   430,   431,    -1,    -1,   434,   435,   436,    -1,\n      438,   439,   440,   441,    -1,   443,   444,   445,   446,   447,\n      448,   449,    -1,   451,   452,   453,   454,   455,   456,   457,\n@@ -15392,157 +15301,157 @@ static const yytype_int16 yycheck[] =\n      478,   479,   480,   481,   482,   483,     3,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,\n-      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,\n-      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,\n+      27,    28,    29,    -1,    31,    32,    33,    34,    35,    -1,\n+      37,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,    46,\n+      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,\n       57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,\n-      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,\n-      77,    -1,    -1,    80,    81,    82,    83,    84,    85,    86,\n-      -1,    88,    89,    90,    91,    92,    93,    94,    95,    96,\n-      97,    -1,    -1,   100,   101,   102,   103,   104,   105,   106,\n+      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,\n+      77,    -1,    79,    -1,    81,    82,    83,    84,    85,    86,\n+      87,    88,    89,    90,    -1,    92,    93,    94,    95,    96,\n+      97,    -1,    99,   100,   101,   102,   103,   104,   105,   106,\n      107,   108,   109,   110,   111,   112,    -1,   114,    -1,   116,\n      117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,\n      127,    -1,    -1,   130,   131,   132,   133,   134,    -1,   136,\n      137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,\n      147,   148,   149,   150,   151,   152,   153,   154,    -1,   156,\n-      -1,   158,   159,   160,   161,    -1,   163,   164,   165,    -1,\n-      -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,\n+      -1,   158,   159,   160,   161,    -1,   163,    -1,   165,   166,\n+      -1,   168,   169,   170,   171,   172,   173,    -1,   175,    -1,\n      177,   178,   179,    -1,   181,   182,   183,   184,   185,   186,\n-     187,    -1,   189,   190,   191,   192,    -1,   194,   195,   196,\n-     197,   198,   199,   200,    -1,   202,    -1,   204,   205,   206,\n-     207,   208,   209,   210,   211,    -1,   213,    -1,   215,    -1,\n-      -1,   218,    -1,   220,   221,   222,   223,   224,   225,    -1,\n-      -1,   228,    -1,   230,    -1,    -1,   233,   234,   235,   236,\n+     187,   188,   189,   190,   191,   192,    -1,   194,   195,   196,\n+     197,   198,   199,   200,    -1,   202,   203,   204,   205,   206,\n+     207,   208,   209,   210,   211,    -1,   213,    -1,   215,   216,\n+     217,   218,   219,   220,   221,   222,   223,   224,   225,    -1,\n+      -1,   228,   229,   230,   231,    -1,   233,   234,   235,   236,\n      237,   238,   239,   240,   241,   242,   243,   244,   245,   246,\n      247,   248,   249,   250,   251,   252,   253,   254,   255,   256,\n-     257,   258,   259,   260,    -1,   262,   263,   264,   265,   266,\n-      -1,   268,   269,    -1,   271,    -1,   273,   274,   275,   276,\n+     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,\n+      -1,   268,   269,   270,   271,    -1,   273,   274,   275,   276,\n      277,   278,    -1,   280,   281,    -1,    -1,   284,   285,   286,\n-      -1,    -1,   289,   290,    -1,   292,    -1,   294,   295,   296,\n+      -1,    -1,   289,   290,   291,   292,   293,   294,   295,   296,\n      297,   298,   299,   300,   301,   302,   303,   304,    -1,    -1,\n-      -1,    -1,   309,   310,   311,    -1,   313,   314,   315,   316,\n-     317,   318,   319,   320,   321,   322,   323,   324,   325,    -1,\n+      -1,    -1,   309,   310,   311,   312,   313,   314,   315,   316,\n+     317,   318,    -1,   320,   321,   322,   323,   324,   325,    -1,\n      327,   328,   329,   330,   331,   332,   333,   334,    -1,   336,\n      337,   338,   339,   340,   341,   342,   343,   344,   345,   346,\n-     347,   348,    -1,   350,   351,    -1,   353,   354,   355,   356,\n+     347,   348,    -1,   350,   351,   352,   353,   354,   355,   356,\n      357,   358,   359,   360,   361,   362,   363,   364,   365,   366,\n-     367,    -1,    -1,   370,   371,   372,   373,   374,   375,   376,\n-     377,   378,   379,    -1,   381,   382,   383,   384,    -1,   386,\n+     367,    -1,   369,   370,   371,   372,   373,   374,   375,   376,\n+     377,   378,   379,   380,   381,   382,   383,   384,    -1,   386,\n      387,   388,   389,   390,   391,   392,   393,   394,   395,   396,\n      397,   398,   399,   400,   401,    -1,   403,   404,    -1,   406,\n-      -1,   408,   409,   410,   411,   412,    -1,   414,   415,    -1,\n+     407,   408,   409,   410,   411,   412,    -1,   414,   415,    -1,\n       -1,   418,   419,   420,   421,   422,    -1,   424,   425,   426,\n-     427,   428,   429,   430,   431,    -1,   433,   434,   435,   436,\n+     427,   428,   429,   430,   431,    -1,    -1,   434,   435,   436,\n       -1,   438,   439,   440,   441,    -1,   443,   444,   445,   446,\n-     447,   448,   449,    -1,   451,    -1,   453,   454,   455,   456,\n+     447,   448,   449,    -1,   451,   452,   453,   454,   455,   456,\n      457,    -1,    -1,   460,    -1,    -1,   463,   464,   465,   466,\n      467,   468,   469,   470,   471,   472,   473,   474,   475,   476,\n      477,   478,   479,   480,   481,   482,   483,     3,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,\n       26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,\n-      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,\n+      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,\n       56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,\n-      -1,    67,    68,    69,    70,    71,    72,    73,    74,    75,\n-      76,    77,    -1,    -1,    -1,    81,    82,    83,    84,    85,\n-      86,    -1,    88,    89,    90,    91,    92,    93,    94,    95,\n-      96,    97,    -1,    -1,   100,   101,   102,   103,   104,   105,\n+      66,    67,    68,    69,    70,    71,    -1,    73,    74,    75,\n+      76,    77,    -1,    79,    -1,    81,    82,    83,    84,    85,\n+      86,    87,    88,    89,    90,    -1,    92,    93,    94,    95,\n+      96,    97,    -1,    99,   100,   101,   102,   103,   104,   105,\n      106,   107,   108,   109,   110,   111,   112,    -1,   114,    -1,\n      116,   117,   118,   119,   120,   121,    -1,   123,   124,   125,\n      126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,\n      136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,\n      146,   147,   148,   149,   150,   151,   152,   153,   154,    -1,\n-     156,    -1,   158,   159,   160,   161,    -1,   163,   164,   165,\n-      -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,\n+     156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,\n+     166,    -1,   168,   169,   170,   171,   172,   173,    -1,   175,\n       -1,   177,   178,   179,    -1,   181,   182,   183,   184,   185,\n-     186,   187,    -1,   189,   190,   191,   192,    -1,   194,   195,\n-     196,   197,   198,   199,   200,    -1,   202,    -1,   204,   205,\n+     186,   187,   188,   189,   190,   191,   192,    -1,   194,   195,\n+     196,   197,   198,   199,   200,    -1,   202,   203,   204,   205,\n      206,   207,   208,   209,   210,   211,    -1,   213,    -1,   215,\n-      -1,    -1,   218,    -1,   220,   221,   222,   223,   224,   225,\n-      -1,    -1,   228,    -1,   230,   231,    -1,   233,   234,   235,\n+     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,\n+      -1,    -1,   228,   229,   230,   231,    -1,   233,   234,   235,\n      236,   237,   238,   239,   240,   241,   242,   243,   244,   245,\n      246,   247,   248,   249,   250,   251,   252,   253,   254,   255,\n-     256,   257,   258,   259,   260,    -1,   262,   263,   264,   265,\n-     266,    -1,   268,   269,    -1,   271,    -1,   273,   274,   275,\n+     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,\n+     266,    -1,   268,   269,   270,   271,    -1,   273,   274,   275,\n      276,   277,   278,    -1,   280,   281,    -1,    -1,   284,   285,\n-     286,    -1,    -1,   289,   290,    -1,   292,    -1,   294,   295,\n+     286,    -1,    -1,   289,   290,   291,   292,   293,   294,   295,\n      296,   297,   298,   299,   300,   301,   302,   303,   304,    -1,\n-      -1,    -1,    -1,   309,   310,   311,    -1,   313,   314,   315,\n-     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,\n+      -1,    -1,    -1,   309,   310,   311,   312,   313,   314,   315,\n+     316,   317,   318,    -1,   320,   321,   322,   323,   324,   325,\n       -1,   327,   328,   329,   330,   331,   332,   333,   334,    -1,\n      336,   337,   338,   339,   340,   341,   342,   343,   344,   345,\n-     346,   347,   348,    -1,   350,   351,    -1,   353,   354,   355,\n+     346,   347,   348,    -1,   350,   351,   352,   353,   354,   355,\n      356,   357,   358,   359,   360,   361,   362,   363,   364,   365,\n      366,   367,    -1,    -1,   370,   371,   372,   373,   374,   375,\n-     376,   377,   378,   379,    -1,   381,   382,   383,   384,    -1,\n+     376,   377,   378,   379,   380,   381,   382,   383,   384,    -1,\n      386,   387,   388,   389,   390,   391,   392,   393,   394,   395,\n      396,   397,   398,   399,   400,   401,    -1,   403,   404,    -1,\n-     406,    -1,   408,   409,   410,   411,   412,    -1,   414,   415,\n+     406,   407,   408,   409,   410,   411,   412,    -1,   414,   415,\n       -1,    -1,   418,   419,   420,   421,   422,    -1,   424,   425,\n-     426,   427,   428,   429,   430,   431,    -1,   433,   434,   435,\n+     426,   427,   428,   429,   430,   431,    -1,    -1,   434,   435,\n      436,    -1,   438,   439,   440,   441,    -1,   443,   444,   445,\n-     446,   447,   448,   449,    -1,   451,    -1,   453,   454,   455,\n+     446,   447,   448,   449,    -1,   451,   452,   453,   454,   455,\n      456,   457,    -1,    -1,   460,    -1,    -1,   463,   464,   465,\n      466,   467,   468,   469,   470,   471,   472,   473,   474,   475,\n      476,   477,   478,   479,   480,   481,   482,   483,     3,    -1,\n-       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,\n-      25,    26,    27,    28,    29,    -1,    31,    32,    33,    34,\n-      35,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,\n-      -1,    46,    47,    48,    -1,    50,    51,    52,    53,    54,\n-      -1,    56,    57,    -1,    59,    60,    61,    62,    63,    64,\n+      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,    44,\n+      -1,    46,    47,    48,    49,    50,    51,    52,    53,    54,\n+      55,    56,    57,    -1,    59,    60,    61,    62,    63,    64,\n       -1,    -1,    67,    68,    69,    70,    71,    -1,    73,    74,\n-      75,    76,    77,    -1,    -1,    -1,    81,    82,    83,    84,\n-      85,    86,    -1,    88,    89,    90,    -1,    92,    93,    94,\n-      95,    96,    97,    -1,    -1,   100,   101,   102,   103,   104,\n+      75,    76,    77,    -1,    79,    -1,    81,    82,    83,    84,\n+      85,    86,    87,    88,    89,    90,    -1,    92,    93,    94,\n+      95,    96,    97,    -1,    99,   100,   101,   102,   103,   104,\n      105,   106,   107,   108,   109,   110,   111,   112,    -1,   114,\n       -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,\n      125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,\n       -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,\n      145,   146,   147,   148,   149,   150,   151,   152,   153,   154,\n       -1,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,\n-     165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,\n+     165,   166,    -1,   168,   169,   170,   171,   172,   173,    -1,\n      175,    -1,   177,   178,   179,    -1,   181,   182,   183,   184,\n-     185,   186,   187,    -1,   189,   190,   191,   192,    -1,   194,\n-     195,   196,   197,   198,   199,   200,    -1,   202,    -1,   204,\n+     185,   186,   187,   188,   189,   190,   191,   192,    -1,   194,\n+     195,   196,   197,   198,   199,   200,    -1,   202,   203,   204,\n      205,   206,   207,   208,   209,   210,   211,    -1,   213,    -1,\n-     215,    -1,    -1,   218,    -1,   220,   221,   222,   223,   224,\n-     225,    -1,    -1,   228,    -1,   230,    -1,    -1,   233,   234,\n+     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,\n+     225,    -1,    -1,   228,   229,   230,   231,    -1,   233,   234,\n      235,   236,   237,   238,   239,   240,   241,   242,   243,   244,\n      245,   246,   247,   248,   249,   250,   251,   252,   253,   254,\n-     255,   256,   257,   258,   259,   260,    -1,   262,   263,   264,\n-     265,   266,    -1,   268,   269,    -1,   271,    -1,   273,   274,\n+     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,\n+     265,   266,    -1,   268,   269,   270,   271,    -1,   273,   274,\n      275,   276,   277,   278,    -1,   280,   281,    -1,    -1,   284,\n-     285,   286,    -1,    -1,   289,   290,    -1,   292,    -1,   294,\n+     285,   286,    -1,    -1,   289,   290,   291,   292,   293,   294,\n      295,   296,   297,   298,   299,   300,   301,   302,   303,   304,\n-      -1,    -1,    -1,    -1,   309,   310,   311,    -1,   313,   314,\n+      -1,    -1,    -1,    -1,   309,   310,   311,   312,   313,   314,\n      315,   316,   317,   318,    -1,   320,   321,   322,   323,   324,\n      325,    -1,   327,   328,   329,   330,   331,   332,   333,   334,\n       -1,   336,   337,   338,   339,   340,   341,   342,   343,   344,\n-     345,   346,   347,   348,    -1,   350,   351,    -1,   353,   354,\n+     345,   346,   347,   348,    -1,   350,   351,   352,   353,   354,\n      355,   356,   357,   358,   359,   360,   361,   362,   363,   364,\n      365,   366,   367,    -1,    -1,   370,   371,   372,   373,   374,\n-     375,   376,   377,   378,   379,    -1,   381,   382,   383,   384,\n+     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,\n       -1,   386,   387,   388,   389,   390,   391,   392,   393,   394,\n      395,   396,   397,   398,   399,   400,   401,    -1,   403,   404,\n-      -1,   406,    -1,   408,   409,   410,   411,   412,    -1,   414,\n+      -1,   406,   407,   408,   409,   410,   411,   412,    -1,   414,\n      415,    -1,    -1,   418,   419,   420,   421,   422,    -1,   424,\n      425,   426,   427,   428,   429,   430,   431,    -1,    -1,   434,\n      435,   436,    -1,   438,   439,   440,   441,    -1,   443,   444,\n-     445,   446,   447,   448,   449,    -1,   451,    -1,   453,   454,\n+     445,   446,   447,   448,   449,    -1,   451,   452,   453,   454,\n      455,   456,   457,    -1,    -1,   460,    -1,    -1,   463,   464,\n      465,   466,   467,   468,   469,   470,   471,   472,   473,   474,\n      475,   476,   477,   478,   479,   480,   481,   482,   483,     3,\n-      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,\n-      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,\n+      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,\n       44,    -1,    46,    47,    48,    -1,    50,    51,    52,    53,\n       54,    -1,    56,    57,    -1,    59,    60,    61,    62,    63,\n-      64,    -1,    -1,    67,    68,    69,    70,    71,    -1,    73,\n-      74,    75,    76,    77,    -1,    -1,    -1,    81,    82,    83,\n-      84,    85,    86,    -1,    88,    89,    90,    -1,    92,    93,\n+      64,    -1,    -1,    67,    68,    69,    70,    71,    72,    73,\n+      74,    75,    76,    77,    -1,    -1,    80,    81,    82,    83,\n+      84,    85,    86,    -1,    88,    89,    90,    91,    92,    93,\n       94,    95,    96,    97,    -1,    -1,   100,   101,   102,   103,\n      104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,\n      114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,\n@@ -15550,7 +15459,7 @@ static const yytype_int16 yycheck[] =\n      134,    -1,   136,   137,   138,    -1,   140,   141,   142,    -1,\n      144,   145,   146,   147,   148,   149,   150,   151,   152,   153,\n      154,    -1,   156,    -1,   158,   159,   160,   161,    -1,   163,\n-      -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,\n+     164,   165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,\n       -1,   175,    -1,   177,   178,   179,    -1,   181,   182,   183,\n      184,   185,   186,   187,    -1,   189,   190,   191,   192,    -1,\n      194,   195,   196,   197,   198,   199,   200,    -1,   202,    -1,\n@@ -15565,7 +15474,7 @@ static const yytype_int16 yycheck[] =\n      284,   285,   286,    -1,    -1,   289,   290,    -1,   292,    -1,\n      294,   295,   296,   297,   298,   299,   300,   301,   302,   303,\n      304,    -1,    -1,    -1,    -1,   309,   310,   311,    -1,   313,\n-     314,   315,   316,   317,   318,    -1,   320,   321,   322,   323,\n+     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,\n      324,   325,    -1,   327,   328,   329,   330,   331,   332,   333,\n      334,    -1,   336,   337,   338,   339,   340,   341,   342,   343,\n      344,   345,   346,   347,   348,    -1,   350,   351,    -1,   353,\n@@ -15576,21 +15485,21 @@ static const yytype_int16 yycheck[] =\n      394,   395,   396,   397,   398,   399,   400,   401,    -1,   403,\n      404,    -1,   406,    -1,   408,   409,   410,   411,   412,    -1,\n      414,   415,    -1,    -1,   418,   419,   420,   421,   422,    -1,\n-     424,   425,   426,   427,   428,   429,   430,   431,    -1,    -1,\n+     424,   425,   426,   427,   428,   429,   430,   431,    -1,   433,\n      434,   435,   436,    -1,   438,   439,   440,   441,    -1,   443,\n      444,   445,   446,   447,   448,   449,    -1,   451,    -1,   453,\n      454,   455,   456,   457,    -1,    -1,   460,    -1,    -1,   463,\n      464,   465,   466,   467,   468,   469,   470,   471,   472,   473,\n      474,   475,   476,   477,   478,   479,   480,   481,   482,   483,\n-       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,\n       23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,\n       33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n       43,    44,    -1,    46,    47,    48,    -1,    50,    51,    52,\n       53,    54,    -1,    56,    57,    -1,    59,    60,    61,    62,\n-      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    -1,\n+      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    72,\n       73,    74,    75,    76,    77,    -1,    -1,    -1,    81,    82,\n-      83,    84,    85,    86,    -1,    88,    89,    90,    -1,    92,\n+      83,    84,    85,    86,    -1,    88,    89,    90,    91,    92,\n       93,    94,    95,    96,    97,    -1,    -1,   100,   101,   102,\n      103,   104,   105,   106,   107,   108,   109,   110,   111,   112,\n       -1,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,\n@@ -15598,22 +15507,22 @@ static const yytype_int16 yycheck[] =\n      133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,\n       -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,\n      153,   154,    -1,   156,    -1,   158,   159,   160,   161,    -1,\n-     163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,\n+     163,   164,   165,    -1,    -1,    -1,   169,   170,   171,    -1,\n      173,    -1,   175,    -1,   177,   178,   179,    -1,   181,   182,\n      183,   184,   185,   186,   187,    -1,   189,   190,   191,   192,\n       -1,   194,   195,   196,   197,   198,   199,   200,    -1,   202,\n       -1,   204,   205,   206,   207,   208,   209,   210,   211,    -1,\n      213,    -1,   215,    -1,    -1,   218,    -1,   220,   221,   222,\n-     223,   224,   225,    -1,    -1,   228,    -1,   230,    -1,    -1,\n+     223,   224,   225,    -1,    -1,   228,    -1,   230,   231,    -1,\n      233,   234,   235,   236,   237,   238,   239,   240,   241,   242,\n      243,   244,   245,   246,   247,   248,   249,   250,   251,   252,\n      253,   254,   255,   256,   257,   258,   259,   260,    -1,   262,\n      263,   264,   265,   266,    -1,   268,   269,    -1,   271,    -1,\n      273,   274,   275,   276,   277,   278,    -1,   280,   281,    -1,\n-     283,   284,   285,   286,    -1,    -1,   289,   290,    -1,   292,\n+      -1,   284,   285,   286,    -1,    -1,   289,   290,    -1,   292,\n       -1,   294,   295,   296,   297,   298,   299,   300,   301,   302,\n      303,   304,    -1,    -1,    -1,    -1,   309,   310,   311,    -1,\n-     313,   314,   315,   316,   317,   318,    -1,   320,   321,   322,\n+     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,\n      323,   324,   325,    -1,   327,   328,   329,   330,   331,   332,\n      333,   334,    -1,   336,   337,   338,   339,   340,   341,   342,\n      343,   344,   345,   346,   347,   348,    -1,   350,   351,    -1,\n@@ -15625,7 +15534,7 @@ static const yytype_int16 yycheck[] =\n      403,   404,    -1,   406,    -1,   408,   409,   410,   411,   412,\n       -1,   414,   415,    -1,    -1,   418,   419,   420,   421,   422,\n       -1,   424,   425,   426,   427,   428,   429,   430,   431,    -1,\n-      -1,   434,   435,   436,    -1,   438,   439,   440,   441,    -1,\n+     433,   434,   435,   436,    -1,   438,   439,   440,   441,    -1,\n      443,   444,   445,   446,   447,   448,   449,    -1,   451,    -1,\n      453,   454,   455,   456,   457,    -1,    -1,   460,    -1,    -1,\n      463,   464,   465,   466,   467,   468,   469,   470,   471,   472,\n@@ -15633,7 +15542,7 @@ static const yytype_int16 yycheck[] =\n      483,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n       22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,\n-      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      32,    33,    34,    35,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,\n       52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,\n       62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,\n@@ -15658,7 +15567,7 @@ static const yytype_int16 yycheck[] =\n      252,   253,   254,   255,   256,   257,   258,   259,   260,    -1,\n      262,   263,   264,   265,   266,    -1,   268,   269,    -1,   271,\n       -1,   273,   274,   275,   276,   277,   278,    -1,   280,   281,\n-      -1,   283,   284,   285,   286,    -1,    -1,   289,   290,    -1,\n+      -1,    -1,   284,   285,   286,    -1,    -1,   289,   290,    -1,\n      292,    -1,   294,   295,   296,   297,   298,   299,   300,   301,\n      302,   303,   304,    -1,    -1,    -1,    -1,   309,   310,   311,\n       -1,   313,   314,   315,   316,   317,   318,    -1,   320,   321,\n@@ -15726,7 +15635,7 @@ static const yytype_int16 yycheck[] =\n      451,    -1,   453,   454,   455,   456,   457,    -1,    -1,   460,\n       -1,    -1,   463,   464,   465,   466,   467,   468,   469,   470,\n      471,   472,   473,   474,   475,   476,   477,   478,   479,   480,\n-     481,   482,   483,     3,     4,    -1,    -1,    -1,    -1,     9,\n+     481,   482,   483,     3,    -1,     5,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,\n       -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,\n@@ -15754,7 +15663,7 @@ static const yytype_int16 yycheck[] =\n      250,   251,   252,   253,   254,   255,   256,   257,   258,   259,\n      260,    -1,   262,   263,   264,   265,   266,    -1,   268,   269,\n       -1,   271,    -1,   273,   274,   275,   276,   277,   278,    -1,\n-     280,   281,    -1,    -1,   284,   285,   286,    -1,    -1,   289,\n+     280,   281,    -1,   283,   284,   285,   286,    -1,    -1,   289,\n      290,    -1,   292,    -1,   294,   295,   296,   297,   298,   299,\n      300,   301,   302,   303,   304,    -1,    -1,    -1,    -1,   309,\n      310,   311,    -1,   313,   314,   315,   316,   317,   318,    -1,\n@@ -15802,7 +15711,7 @@ static const yytype_int16 yycheck[] =\n      249,   250,   251,   252,   253,   254,   255,   256,   257,   258,\n      259,   260,    -1,   262,   263,   264,   265,   266,    -1,   268,\n      269,    -1,   271,    -1,   273,   274,   275,   276,   277,   278,\n-      -1,   280,   281,    -1,    -1,   284,   285,   286,    -1,    -1,\n+      -1,   280,   281,    -1,   283,   284,   285,   286,    -1,    -1,\n      289,   290,    -1,   292,    -1,   294,   295,   296,   297,   298,\n      299,   300,   301,   302,   303,   304,    -1,    -1,    -1,    -1,\n      309,   310,   311,    -1,   313,   314,   315,   316,   317,   318,\n@@ -15814,7 +15723,7 @@ static const yytype_int16 yycheck[] =\n       -1,   370,   371,   372,   373,   374,   375,   376,   377,   378,\n      379,    -1,   381,   382,   383,   384,    -1,   386,   387,   388,\n      389,   390,   391,   392,   393,   394,   395,   396,   397,   398,\n-     399,   400,   401,    -1,   403,   404,   405,   406,    -1,   408,\n+     399,   400,   401,    -1,   403,   404,    -1,   406,    -1,   408,\n      409,   410,   411,   412,    -1,   414,   415,    -1,    -1,   418,\n      419,   420,   421,   422,    -1,   424,   425,   426,   427,   428,\n      429,   430,   431,    -1,    -1,   434,   435,   436,    -1,   438,\n@@ -15825,7 +15734,7 @@ static const yytype_int16 yycheck[] =\n      479,   480,   481,   482,   483,     3,    -1,     5,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,\n-      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,\n+      28,    29,    30,    31,    32,    33,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,\n       48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,\n       -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,\n@@ -15870,8 +15779,8 @@ static const yytype_int16 yycheck[] =\n      448,   449,    -1,   451,    -1,   453,   454,   455,   456,   457,\n       -1,    -1,   460,    -1,    -1,   463,   464,   465,   466,   467,\n      468,   469,   470,   471,   472,   473,   474,   475,   476,   477,\n-     478,   479,   480,   481,   482,   483,     3,    -1,     5,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+     478,   479,   480,   481,   482,   483,     3,     4,    -1,    -1,\n+      -1,    -1,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,\n       27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,\n@@ -15918,10 +15827,10 @@ static const yytype_int16 yycheck[] =\n      447,   448,   449,    -1,   451,    -1,   453,   454,   455,   456,\n      457,    -1,    -1,   460,    -1,    -1,   463,   464,   465,   466,\n      467,   468,   469,   470,   471,   472,   473,   474,   475,   476,\n-     477,   478,   479,   480,   481,   482,   483,     3,    -1,    -1,\n+     477,   478,   479,   480,   481,   482,   483,     3,    -1,     5,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,\n-      26,    27,    28,    29,    30,    31,    32,    33,    -1,    -1,\n+      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,\n       46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,\n       56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,\n@@ -15958,7 +15867,7 @@ static const yytype_int16 yycheck[] =\n      366,   367,    -1,    -1,   370,   371,   372,   373,   374,   375,\n      376,   377,   378,   379,    -1,   381,   382,   383,   384,    -1,\n      386,   387,   388,   389,   390,   391,   392,   393,   394,   395,\n-     396,   397,   398,   399,   400,   401,    -1,   403,   404,    -1,\n+     396,   397,   398,   399,   400,   401,    -1,   403,   404,   405,\n      406,    -1,   408,   409,   410,   411,   412,    -1,   414,   415,\n       -1,    -1,   418,   419,   420,   421,   422,    -1,   424,   425,\n      426,   427,   428,   429,   430,   431,    -1,    -1,   434,   435,\n@@ -16063,9 +15972,9 @@ static const yytype_int16 yycheck[] =\n      454,   455,   456,   457,    -1,    -1,   460,    -1,    -1,   463,\n      464,   465,   466,   467,   468,   469,   470,   471,   472,   473,\n      474,   475,   476,   477,   478,   479,   480,   481,   482,   483,\n-       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,\n-      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,\n+      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,\n       33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n       43,    44,    -1,    46,    47,    48,    -1,    50,    51,    52,\n       53,    54,    -1,    56,    57,    -1,    59,    60,    61,    62,\n@@ -16303,11 +16212,11 @@ static const yytype_int16 yycheck[] =\n      449,    -1,   451,    -1,   453,   454,   455,   456,   457,    -1,\n       -1,   460,    -1,    -1,   463,   464,   465,   466,   467,   468,\n      469,   470,   471,   472,   473,   474,   475,   476,   477,   478,\n-     479,   480,   481,   482,   483,     3,    -1,    -1,    -1,    -1,\n+     479,   480,   481,   482,   483,     3,    -1,     5,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,\n       28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,\n-      -1,    -1,    40,    -1,    -1,    43,    44,    -1,    46,    47,\n+      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,\n       48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,\n       -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,\n       68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,\n@@ -16351,11 +16260,11 @@ static const yytype_int16 yycheck[] =\n      448,   449,    -1,   451,    -1,   453,   454,   455,   456,   457,\n       -1,    -1,   460,    -1,    -1,   463,   464,   465,   466,   467,\n      468,   469,   470,   471,   472,   473,   474,   475,   476,   477,\n-     478,   479,   480,   481,   482,   483,     3,    -1,    -1,    -1,\n+     478,   479,   480,   481,   482,   483,     3,    -1,     5,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,\n       27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,\n-      -1,    -1,    -1,    40,    -1,    -1,    43,    44,    -1,    46,\n+      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,\n       47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,\n       57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,\n       67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,\n@@ -16448,10 +16357,10 @@ static const yytype_int16 yycheck[] =\n      456,   457,    -1,    -1,   460,    -1,    -1,   463,   464,   465,\n      466,   467,   468,   469,   470,   471,   472,   473,   474,   475,\n      476,   477,   478,   479,   480,   481,   482,   483,     3,    -1,\n-       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,\n       25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,\n+      -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    43,    44,\n       -1,    46,    47,    48,    -1,    50,    51,    52,    53,    54,\n       -1,    56,    57,    -1,    59,    60,    61,    62,    63,    64,\n       -1,    -1,    67,    68,    69,    70,    71,    -1,    73,    74,\n@@ -16496,10 +16405,10 @@ static const yytype_int16 yycheck[] =\n      455,   456,   457,    -1,    -1,   460,    -1,    -1,   463,   464,\n      465,   466,   467,   468,   469,   470,   471,   472,   473,   474,\n      475,   476,   477,   478,   479,   480,   481,   482,   483,     3,\n-      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,\n       24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,\n+      -1,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    43,\n       44,    -1,    46,    47,    48,    -1,    50,    51,    52,    53,\n       54,    -1,    56,    57,    -1,    59,    60,    61,    62,    63,\n       64,    -1,    -1,    67,    68,    69,    70,    71,    -1,    73,\n@@ -16544,9 +16453,9 @@ static const yytype_int16 yycheck[] =\n      454,   455,   456,   457,    -1,    -1,   460,    -1,    -1,   463,\n      464,   465,   466,   467,   468,   469,   470,   471,   472,   473,\n      474,   475,   476,   477,   478,   479,   480,   481,   482,   483,\n-       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,\n-      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,\n+      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,\n       33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n       43,    44,    -1,    46,    47,    48,    -1,    50,    51,    52,\n       53,    54,    -1,    56,    57,    -1,    59,    60,    61,    62,\n@@ -16640,247 +16549,247 @@ static const yytype_int16 yycheck[] =\n       -1,   453,   454,   455,   456,   457,    -1,    -1,   460,    -1,\n       -1,   463,   464,   465,   466,   467,   468,   469,   470,   471,\n      472,   473,   474,   475,   476,   477,   478,   479,   480,   481,\n-     482,   483,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+     482,   483,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,\n-      31,    32,    33,    -1,    -1,    -1,    37,    -1,    -1,    40,\n-      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,\n-      51,    52,    -1,    54,    55,    56,    57,    -1,    59,    60,\n+      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,    50,\n+      51,    52,    53,    54,    -1,    56,    57,    -1,    59,    60,\n       61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,\n-      71,    -1,    73,    74,    75,    76,    -1,    -1,    79,    -1,\n-      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,\n-      -1,    92,    93,    94,    95,    96,    97,    -1,    99,   100,\n+      71,    -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,\n+      81,    82,    83,    84,    85,    86,    -1,    88,    89,    90,\n+      -1,    92,    93,    94,    95,    96,    97,    -1,    -1,   100,\n      101,   102,   103,   104,   105,   106,   107,   108,   109,   110,\n      111,   112,    -1,   114,    -1,   116,   117,   118,   119,   120,\n      121,    -1,   123,   124,   125,   126,   127,    -1,    -1,   130,\n      131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,\n-     141,   142,    -1,   144,   145,   146,   147,    -1,   149,   150,\n-     151,   152,   153,    -1,    -1,   156,    -1,   158,   159,   160,\n-     161,    -1,   163,    -1,   165,   166,    -1,   168,   169,   170,\n-     171,   172,   173,    -1,   175,    -1,    -1,    -1,   179,    -1,\n-     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,\n+     141,   142,    -1,   144,   145,   146,   147,   148,   149,   150,\n+     151,   152,   153,   154,    -1,   156,    -1,   158,   159,   160,\n+     161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,\n+     171,    -1,   173,    -1,   175,    -1,   177,   178,   179,    -1,\n+     181,   182,   183,   184,   185,   186,   187,    -1,   189,   190,\n      191,   192,    -1,   194,   195,   196,   197,   198,   199,   200,\n-      -1,   202,   203,    -1,   205,   206,   207,   208,   209,   210,\n-     211,    -1,   213,    -1,   215,   216,   217,   218,   219,   220,\n-     221,   222,   223,   224,   225,    -1,    -1,   228,   229,   230,\n-     231,    -1,   233,   234,   235,   236,   237,   238,   239,   240,\n+      -1,   202,    -1,   204,   205,   206,   207,   208,   209,   210,\n+     211,    -1,   213,    -1,   215,    -1,    -1,   218,    -1,   220,\n+     221,   222,   223,   224,   225,    -1,    -1,   228,    -1,   230,\n+      -1,    -1,   233,   234,   235,   236,   237,   238,   239,   240,\n      241,   242,   243,   244,   245,   246,   247,   248,   249,   250,\n      251,   252,   253,   254,   255,   256,   257,   258,   259,   260,\n-     261,   262,   263,   264,   265,    -1,    -1,   268,   269,   270,\n-     271,    -1,    -1,   274,   275,   276,   277,   278,    -1,   280,\n-     281,    -1,    -1,   284,   285,   286,    -1,    -1,   289,    -1,\n-     291,   292,   293,    -1,   295,   296,   297,   298,   299,   300,\n+      -1,   262,   263,   264,   265,   266,    -1,   268,   269,    -1,\n+     271,    -1,   273,   274,   275,   276,   277,   278,    -1,   280,\n+     281,    -1,    -1,   284,   285,   286,    -1,    -1,   289,   290,\n+      -1,   292,    -1,   294,   295,   296,   297,   298,   299,   300,\n      301,   302,   303,   304,    -1,    -1,    -1,    -1,   309,   310,\n-      -1,   312,   313,   314,    -1,   316,   317,   318,    -1,   320,\n+     311,    -1,   313,   314,   315,   316,   317,   318,    -1,   320,\n      321,   322,   323,   324,   325,    -1,   327,   328,   329,   330,\n      331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,\n      341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,\n-     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,\n-     361,   362,   363,   364,   365,   366,   367,    -1,   369,   370,\n-     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,\n+     351,    -1,   353,   354,   355,   356,   357,   358,   359,   360,\n+     361,   362,   363,   364,   365,   366,   367,    -1,    -1,   370,\n+     371,   372,   373,   374,   375,   376,   377,   378,   379,    -1,\n      381,   382,   383,   384,    -1,   386,   387,   388,   389,   390,\n-     391,   392,   393,   394,   395,   396,   397,   398,   399,    -1,\n-     401,    -1,   403,   404,    -1,   406,   407,   408,   409,   410,\n-     411,   412,    -1,   414,   415,    -1,    -1,   418,   419,    -1,\n-     421,    -1,    -1,   424,   425,   426,   427,   428,   429,   430,\n-     431,   432,    -1,   434,   435,   436,    -1,   438,   439,   440,\n-     441,    -1,   443,   444,   445,   446,   447,    -1,   449,    -1,\n-     451,   452,   453,   454,   455,   456,   457,    -1,    -1,   460,\n-      -1,    -1,   463,   464,   465,   466,   467,   468,     3,    -1,\n-       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   480,\n-     481,   482,   483,    -1,    -1,    -1,    -1,    22,    23,    24,\n-      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,\n-      -1,    46,    47,    48,    -1,    50,    51,    52,    53,    54,\n-      -1,    56,    57,    -1,    59,    60,    61,    62,    63,    64,\n-      -1,    -1,    67,    68,    69,    70,    71,    -1,    73,    74,\n-      75,    76,    77,    -1,    -1,    -1,    81,    82,    83,    84,\n-      85,    86,    -1,    88,    89,    90,    -1,    92,    93,    94,\n-      95,    96,    97,    -1,    -1,   100,   101,   102,   103,   104,\n-     105,   106,   107,   108,   109,   110,   111,   112,    -1,   114,\n-      -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,\n-     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,\n-      -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,\n-     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,\n-      -1,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,\n-     165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,\n-     175,    -1,   177,   178,   179,    -1,   181,   182,   183,   184,\n-     185,   186,   187,    -1,   189,   190,   191,   192,    -1,   194,\n-     195,   196,   197,   198,   199,   200,    -1,   202,    -1,   204,\n-     205,   206,   207,   208,   209,   210,   211,    -1,   213,    -1,\n-     215,    -1,    -1,   218,    -1,   220,   221,   222,   223,   224,\n-     225,    -1,    -1,   228,    -1,   230,    -1,    -1,   233,   234,\n-     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,\n-     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,\n-     255,   256,   257,   258,   259,   260,    -1,   262,   263,   264,\n-     265,   266,    -1,   268,   269,    -1,   271,    -1,   273,   274,\n-     275,   276,   277,   278,    -1,   280,   281,    -1,    -1,   284,\n-     285,   286,    -1,    -1,   289,   290,    -1,   292,    -1,   294,\n-     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,\n-      -1,    -1,    -1,    -1,   309,   310,   311,    -1,   313,   314,\n-     315,   316,   317,   318,    -1,   320,   321,   322,   323,   324,\n-     325,    -1,   327,   328,   329,   330,   331,   332,   333,   334,\n-      -1,   336,   337,   338,   339,   340,   341,   342,   343,   344,\n-     345,   346,   347,   348,    -1,   350,   351,    -1,   353,   354,\n-     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,\n-     365,   366,   367,    -1,    -1,   370,   371,   372,   373,   374,\n-     375,   376,   377,   378,   379,    -1,   381,   382,   383,   384,\n-      -1,   386,   387,   388,   389,   390,   391,   392,   393,   394,\n-     395,   396,   397,   398,   399,   400,   401,    -1,   403,   404,\n-      -1,   406,    -1,   408,   409,   410,   411,   412,    -1,   414,\n-     415,    -1,    -1,   418,   419,   420,   421,   422,    -1,   424,\n-     425,   426,   427,   428,   429,   430,   431,    -1,    -1,   434,\n-     435,   436,    -1,   438,   439,   440,   441,    -1,   443,   444,\n-     445,   446,   447,   448,   449,    -1,   451,    -1,   453,   454,\n-     455,   456,   457,    -1,    -1,   460,    -1,    -1,   463,   464,\n-     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,\n-     475,   476,   477,   478,   479,   480,   481,   482,   483,     3,\n+     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,\n+     401,    -1,   403,   404,    -1,   406,    -1,   408,   409,   410,\n+     411,   412,    -1,   414,   415,    -1,    -1,   418,   419,   420,\n+     421,   422,    -1,   424,   425,   426,   427,   428,   429,   430,\n+     431,    -1,    -1,   434,   435,   436,    -1,   438,   439,   440,\n+     441,    -1,   443,   444,   445,   446,   447,   448,   449,    -1,\n+     451,    -1,   453,   454,   455,   456,   457,    -1,    -1,   460,\n+      -1,    -1,   463,   464,   465,   466,   467,   468,   469,   470,\n+     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,\n+     481,   482,   483,     3,    -1,     5,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,\n-      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,\n-      44,    -1,    46,    47,    48,    -1,    50,    51,    52,    53,\n-      54,    -1,    56,    57,    -1,    59,    60,    61,    62,    63,\n-      64,    -1,    -1,    67,    68,    69,    70,    71,    -1,    73,\n-      74,    75,    76,    77,    -1,    -1,    -1,    81,    82,    83,\n-      84,    85,    86,    -1,    88,    89,    90,    -1,    92,    93,\n-      94,    95,    96,    97,    -1,    -1,   100,   101,   102,   103,\n-     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,\n-     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,\n-     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,\n-     134,    -1,   136,   137,   138,    -1,   140,   141,   142,    -1,\n-     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,\n-     154,    -1,   156,    -1,   158,   159,   160,   161,    -1,   163,\n-      -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,\n-      -1,   175,    -1,   177,   178,   179,    -1,   181,   182,   183,\n-     184,   185,   186,   187,    -1,   189,   190,   191,   192,    -1,\n-     194,   195,   196,   197,   198,   199,   200,    -1,   202,    -1,\n-     204,   205,   206,   207,   208,   209,   210,   211,    -1,   213,\n-      -1,   215,    -1,    -1,   218,    -1,   220,   221,   222,   223,\n-     224,   225,    -1,    -1,   228,    -1,   230,    -1,    -1,   233,\n-     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,\n-     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,\n-     254,   255,   256,   257,   258,   259,   260,    -1,   262,   263,\n-     264,   265,   266,    -1,   268,   269,    -1,   271,    -1,   273,\n-     274,   275,   276,   277,   278,    -1,   280,   281,    -1,    -1,\n-     284,   285,   286,    -1,    -1,   289,   290,    -1,   292,    -1,\n-     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,\n-     304,    -1,    -1,    -1,    -1,   309,   310,   311,    -1,   313,\n-     314,   315,   316,   317,   318,    -1,   320,   321,   322,   323,\n-     324,   325,    -1,   327,   328,   329,   330,   331,   332,   333,\n-     334,    -1,   336,   337,   338,   339,   340,   341,   342,   343,\n-     344,   345,   346,   347,   348,    -1,   350,   351,    -1,   353,\n-     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,\n-     364,   365,   366,   367,    -1,    -1,   370,   371,   372,   373,\n-     374,   375,   376,   377,   378,   379,    -1,   381,   382,   383,\n-     384,    -1,   386,   387,   388,   389,   390,   391,   392,   393,\n-     394,   395,   396,   397,   398,   399,   400,   401,    -1,   403,\n-     404,    -1,   406,    -1,   408,   409,   410,   411,   412,    -1,\n-     414,   415,    -1,    -1,   418,   419,   420,   421,   422,    -1,\n-     424,   425,   426,   427,   428,   429,   430,   431,    -1,    -1,\n-     434,   435,   436,    -1,   438,   439,   440,   441,    -1,   443,\n-     444,   445,   446,   447,   448,   449,    -1,   451,    -1,   453,\n-     454,   455,   456,   457,    -1,    -1,   460,    -1,    -1,   463,\n-     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,\n-     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,\n-       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,\n-      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,\n-      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      43,    44,    -1,    46,    47,    48,    -1,    50,    51,    52,\n-      53,    54,    -1,    56,    57,    -1,    59,    60,    61,    62,\n-      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    -1,\n-      73,    74,    75,    76,    77,    -1,    -1,    -1,    81,    82,\n-      83,    84,    85,    86,    -1,    88,    89,    90,    -1,    92,\n-      93,    94,    95,    96,    97,    -1,    -1,   100,   101,   102,\n-     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,\n-      -1,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,\n-     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,\n-     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,\n-      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,\n-     153,   154,    -1,   156,    -1,   158,   159,   160,   161,    -1,\n-     163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,\n-     173,    -1,   175,    -1,   177,   178,   179,    -1,   181,   182,\n-     183,   184,   185,   186,   187,    -1,   189,   190,   191,   192,\n-      -1,   194,   195,   196,   197,   198,   199,   200,    -1,   202,\n-      -1,   204,   205,   206,   207,   208,   209,   210,   211,    -1,\n-     213,    -1,   215,    -1,    -1,   218,    -1,   220,   221,   222,\n-     223,   224,   225,    -1,    -1,   228,    -1,   230,    -1,    -1,\n-     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,\n-     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,\n-     253,   254,   255,   256,   257,   258,   259,   260,    -1,   262,\n-     263,   264,   265,   266,    -1,   268,   269,    -1,   271,    -1,\n-     273,   274,   275,   276,   277,   278,    -1,   280,   281,    -1,\n-      -1,   284,   285,   286,    -1,    -1,   289,   290,    -1,   292,\n-      -1,   294,   295,   296,   297,   298,   299,   300,   301,   302,\n-     303,   304,    -1,    -1,    -1,    -1,   309,   310,   311,    -1,\n-     313,   314,   315,   316,   317,   318,    -1,   320,   321,   322,\n-     323,   324,   325,    -1,   327,   328,   329,   330,   331,   332,\n-     333,   334,    -1,   336,   337,   338,   339,   340,   341,   342,\n-     343,   344,   345,   346,   347,   348,    -1,   350,   351,    -1,\n-     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,\n-     363,   364,   365,   366,   367,    -1,    -1,   370,   371,   372,\n-     373,   374,   375,   376,   377,   378,   379,    -1,   381,   382,\n-     383,   384,    -1,   386,   387,   388,   389,   390,   391,   392,\n-     393,   394,   395,   396,   397,   398,   399,   400,   401,    -1,\n-     403,   404,    -1,   406,    -1,   408,   409,   410,   411,   412,\n-      -1,   414,   415,    -1,    -1,   418,   419,   420,   421,   422,\n-      -1,   424,   425,   426,   427,   428,   429,   430,   431,    -1,\n-      -1,   434,   435,   436,    -1,   438,   439,   440,   441,    -1,\n-     443,   444,   445,   446,   447,   448,   449,    -1,   451,    -1,\n-     453,   454,   455,   456,   457,    -1,    -1,   460,    -1,    -1,\n-     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,\n-     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,\n-     483,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,\n+      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,\n+      50,    51,    52,    53,    54,    -1,    56,    57,    -1,    59,\n+      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,\n+      70,    71,    -1,    73,    74,    75,    76,    77,    -1,    -1,\n+      -1,    81,    82,    83,    84,    85,    86,    -1,    88,    89,\n+      90,    -1,    92,    93,    94,    95,    96,    97,    -1,    -1,\n+     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,\n+     110,   111,   112,    -1,   114,    -1,   116,   117,   118,   119,\n+     120,   121,    -1,   123,   124,   125,   126,   127,    -1,    -1,\n+     130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,\n+     140,   141,   142,    -1,   144,   145,   146,   147,   148,   149,\n+     150,   151,   152,   153,   154,    -1,   156,    -1,   158,   159,\n+     160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,\n+     170,   171,    -1,   173,    -1,   175,    -1,   177,   178,   179,\n+      -1,   181,   182,   183,   184,   185,   186,   187,    -1,   189,\n+     190,   191,   192,    -1,   194,   195,   196,   197,   198,   199,\n+     200,    -1,   202,    -1,   204,   205,   206,   207,   208,   209,\n+     210,   211,    -1,   213,    -1,   215,    -1,    -1,   218,    -1,\n+     220,   221,   222,   223,   224,   225,    -1,    -1,   228,    -1,\n+     230,    -1,    -1,   233,   234,   235,   236,   237,   238,   239,\n+     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,\n+     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,\n+     260,    -1,   262,   263,   264,   265,   266,    -1,   268,   269,\n+      -1,   271,    -1,   273,   274,   275,   276,   277,   278,    -1,\n+     280,   281,    -1,    -1,   284,   285,   286,    -1,    -1,   289,\n+     290,    -1,   292,    -1,   294,   295,   296,   297,   298,   299,\n+     300,   301,   302,   303,   304,    -1,    -1,    -1,    -1,   309,\n+     310,   311,    -1,   313,   314,   315,   316,   317,   318,    -1,\n+     320,   321,   322,   323,   324,   325,    -1,   327,   328,   329,\n+     330,   331,   332,   333,   334,    -1,   336,   337,   338,   339,\n+     340,   341,   342,   343,   344,   345,   346,   347,   348,    -1,\n+     350,   351,    -1,   353,   354,   355,   356,   357,   358,   359,\n+     360,   361,   362,   363,   364,   365,   366,   367,    -1,    -1,\n+     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,\n+      -1,   381,   382,   383,   384,    -1,   386,   387,   388,   389,\n+     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,\n+     400,   401,    -1,   403,   404,    -1,   406,    -1,   408,   409,\n+     410,   411,   412,    -1,   414,   415,    -1,    -1,   418,   419,\n+     420,   421,   422,    -1,   424,   425,   426,   427,   428,   429,\n+     430,   431,    -1,    -1,   434,   435,   436,    -1,   438,   439,\n+     440,   441,    -1,   443,   444,   445,   446,   447,   448,   449,\n+      -1,   451,    -1,   453,   454,   455,   456,   457,    -1,    -1,\n+     460,    -1,    -1,   463,   464,   465,   466,   467,   468,   469,\n+     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,\n+     480,   481,   482,   483,     3,    -1,     5,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,\n-      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,\n-      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,\n-      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,\n-      -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,    81,\n-      82,    83,    84,    85,    86,    -1,    88,    89,    90,    -1,\n-      92,    93,    94,    95,    96,    97,    -1,    -1,   100,   101,\n-     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,\n-     112,    -1,   114,    -1,   116,   117,   118,   119,   120,   121,\n-      -1,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,\n-     132,   133,   134,    -1,   136,   137,   138,    -1,   140,   141,\n-     142,    -1,   144,   145,   146,   147,   148,   149,   150,   151,\n-     152,   153,   154,    -1,   156,    -1,   158,   159,   160,   161,\n-      -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,\n-      -1,   173,    -1,   175,    -1,   177,   178,   179,    -1,   181,\n-     182,   183,   184,   185,   186,   187,    -1,   189,   190,   191,\n-     192,    -1,   194,   195,   196,   197,   198,   199,   200,    -1,\n-     202,    -1,   204,   205,   206,   207,   208,   209,   210,   211,\n-      -1,   213,    -1,   215,    -1,    -1,   218,    -1,   220,   221,\n-     222,   223,   224,   225,    -1,    -1,   228,    -1,   230,    -1,\n-      -1,   233,   234,   235,   236,   237,   238,   239,   240,   241,\n-     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,\n-     252,   253,   254,   255,   256,   257,   258,   259,   260,    -1,\n-     262,   263,   264,   265,   266,    -1,   268,   269,    -1,   271,\n-      -1,   273,   274,   275,   276,   277,   278,    -1,   280,   281,\n-      -1,    -1,   284,   285,   286,    -1,    -1,   289,   290,    -1,\n-     292,    -1,   294,   295,   296,   297,   298,   299,   300,   301,\n-     302,   303,   304,    -1,    -1,    -1,    -1,   309,   310,   311,\n-      -1,   313,   314,   315,   316,   317,   318,    -1,   320,   321,\n-     322,   323,   324,   325,    -1,   327,   328,   329,   330,   331,\n-     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,\n-     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,\n-      -1,   353,   354,   355,   356,   357,   358,   359,   360,   361,\n-     362,   363,   364,   365,   366,   367,    -1,    -1,   370,   371,\n-     372,   373,   374,   375,   376,   377,   378,   379,    -1,   381,\n-     382,   383,   384,    -1,   386,   387,   388,   389,   390,   391,\n-     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,\n-      -1,   403,   404,    -1,   406,    -1,   408,   409,   410,   411,\n-     412,    -1,   414,   415,    -1,    -1,   418,   419,   420,   421,\n-     422,    -1,   424,   425,   426,   427,   428,   429,   430,   431,\n-      -1,    -1,   434,   435,   436,    -1,   438,   439,   440,   441,\n-      -1,   443,   444,   445,   446,   447,   448,   449,    -1,   451,\n-      -1,   453,   454,   455,   456,   457,    -1,    -1,   460,    -1,\n-      -1,   463,   464,   465,   466,   467,   468,   469,   470,   471,\n-     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,\n-     482,   483,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,\n+      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,\n+      -1,    50,    51,    52,    53,    54,    -1,    56,    57,    -1,\n+      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,\n+      69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,\n+      -1,    -1,    81,    82,    83,    84,    85,    86,    -1,    88,\n+      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,\n+      -1,   100,   101,   102,   103,   104,   105,   106,   107,   108,\n+     109,   110,   111,   112,    -1,   114,    -1,   116,   117,   118,\n+     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,\n+      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,\n+      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,\n+     149,   150,   151,   152,   153,   154,    -1,   156,    -1,   158,\n+     159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,\n+     169,   170,   171,    -1,   173,    -1,   175,    -1,   177,   178,\n+     179,    -1,   181,   182,   183,   184,   185,   186,   187,    -1,\n+     189,   190,   191,   192,    -1,   194,   195,   196,   197,   198,\n+     199,   200,    -1,   202,    -1,   204,   205,   206,   207,   208,\n+     209,   210,   211,    -1,   213,    -1,   215,    -1,    -1,   218,\n+      -1,   220,   221,   222,   223,   224,   225,    -1,    -1,   228,\n+      -1,   230,    -1,    -1,   233,   234,   235,   236,   237,   238,\n+     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,\n+     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,\n+     259,   260,    -1,   262,   263,   264,   265,   266,    -1,   268,\n+     269,    -1,   271,    -1,   273,   274,   275,   276,   277,   278,\n+      -1,   280,   281,    -1,    -1,   284,   285,   286,    -1,    -1,\n+     289,   290,    -1,   292,    -1,   294,   295,   296,   297,   298,\n+     299,   300,   301,   302,   303,   304,    -1,    -1,    -1,    -1,\n+     309,   310,   311,    -1,   313,   314,   315,   316,   317,   318,\n+      -1,   320,   321,   322,   323,   324,   325,    -1,   327,   328,\n+     329,   330,   331,   332,   333,   334,    -1,   336,   337,   338,\n+     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,\n+      -1,   350,   351,    -1,   353,   354,   355,   356,   357,   358,\n+     359,   360,   361,   362,   363,   364,   365,   366,   367,    -1,\n+      -1,   370,   371,   372,   373,   374,   375,   376,   377,   378,\n+     379,    -1,   381,   382,   383,   384,    -1,   386,   387,   388,\n+     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,\n+     399,   400,   401,    -1,   403,   404,    -1,   406,    -1,   408,\n+     409,   410,   411,   412,    -1,   414,   415,    -1,    -1,   418,\n+     419,   420,   421,   422,    -1,   424,   425,   426,   427,   428,\n+     429,   430,   431,    -1,    -1,   434,   435,   436,    -1,   438,\n+     439,   440,   441,    -1,   443,   444,   445,   446,   447,   448,\n+     449,    -1,   451,    -1,   453,   454,   455,   456,   457,    -1,\n+      -1,   460,    -1,    -1,   463,   464,   465,   466,   467,   468,\n+     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,\n+     479,   480,   481,   482,   483,     3,    -1,     5,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,\n+      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,\n+      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,\n+      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,\n+      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,\n+      -1,    -1,    -1,    81,    82,    83,    84,    85,    86,    -1,\n+      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,\n+      -1,    -1,   100,   101,   102,   103,   104,   105,   106,   107,\n+     108,   109,   110,   111,   112,    -1,   114,    -1,   116,   117,\n+     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,\n+      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,\n+     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,\n+     148,   149,   150,   151,   152,   153,   154,    -1,   156,    -1,\n+     158,   159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,\n+      -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,   177,\n+     178,   179,    -1,   181,   182,   183,   184,   185,   186,   187,\n+      -1,   189,   190,   191,   192,    -1,   194,   195,   196,   197,\n+     198,   199,   200,    -1,   202,    -1,   204,   205,   206,   207,\n+     208,   209,   210,   211,    -1,   213,    -1,   215,    -1,    -1,\n+     218,    -1,   220,   221,   222,   223,   224,   225,    -1,    -1,\n+     228,    -1,   230,    -1,    -1,   233,   234,   235,   236,   237,\n+     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,\n+     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,\n+     258,   259,   260,    -1,   262,   263,   264,   265,   266,    -1,\n+     268,   269,    -1,   271,    -1,   273,   274,   275,   276,   277,\n+     278,    -1,   280,   281,    -1,    -1,   284,   285,   286,    -1,\n+      -1,   289,   290,    -1,   292,    -1,   294,   295,   296,   297,\n+     298,   299,   300,   301,   302,   303,   304,    -1,    -1,    -1,\n+      -1,   309,   310,   311,    -1,   313,   314,   315,   316,   317,\n+     318,    -1,   320,   321,   322,   323,   324,   325,    -1,   327,\n+     328,   329,   330,   331,   332,   333,   334,    -1,   336,   337,\n+     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,\n+     348,    -1,   350,   351,    -1,   353,   354,   355,   356,   357,\n+     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,\n+      -1,    -1,   370,   371,   372,   373,   374,   375,   376,   377,\n+     378,   379,    -1,   381,   382,   383,   384,    -1,   386,   387,\n+     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,\n+     398,   399,   400,   401,    -1,   403,   404,    -1,   406,    -1,\n+     408,   409,   410,   411,   412,    -1,   414,   415,    -1,    -1,\n+     418,   419,   420,   421,   422,    -1,   424,   425,   426,   427,\n+     428,   429,   430,   431,    -1,    -1,   434,   435,   436,    -1,\n+     438,   439,   440,   441,    -1,   443,   444,   445,   446,   447,\n+     448,   449,    -1,   451,    -1,   453,   454,   455,   456,   457,\n+      -1,    -1,   460,    -1,    -1,   463,   464,   465,   466,   467,\n+     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,\n+     478,   479,   480,   481,   482,   483,     3,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,\n+      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,\n+      37,    -1,    -1,    40,    -1,    42,    43,    44,    -1,    46,\n+      47,    48,    49,    50,    51,    52,    -1,    54,    55,    56,\n+      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,\n+      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,\n+      -1,    -1,    79,    -1,    81,    82,    83,    84,    85,    86,\n+      87,    88,    89,    90,    -1,    92,    93,    94,    95,    96,\n+      97,    -1,    99,   100,   101,   102,   103,   104,   105,   106,\n+     107,   108,   109,   110,   111,   112,    -1,   114,    -1,   116,\n+     117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,\n+     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,   136,\n+     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,\n+     147,    -1,   149,   150,   151,   152,   153,    -1,    -1,   156,\n+      -1,   158,   159,   160,   161,    -1,   163,    -1,   165,   166,\n+      -1,   168,   169,   170,   171,   172,   173,    -1,   175,    -1,\n+      -1,    -1,   179,    -1,   181,   182,   183,   184,   185,   186,\n+     187,   188,   189,   190,   191,   192,    -1,   194,   195,   196,\n+     197,   198,   199,   200,    -1,   202,   203,    -1,   205,   206,\n+     207,   208,   209,   210,   211,    -1,   213,    -1,   215,   216,\n+     217,   218,   219,   220,   221,   222,   223,   224,   225,    -1,\n+      -1,   228,   229,   230,   231,    -1,   233,   234,   235,   236,\n+     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,\n+     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,\n+     257,   258,   259,   260,   261,   262,   263,   264,   265,    -1,\n+      -1,   268,   269,   270,   271,    -1,    -1,   274,   275,   276,\n+     277,   278,    -1,   280,   281,    -1,    -1,   284,   285,   286,\n+      -1,    -1,   289,    -1,   291,   292,   293,    -1,   295,   296,\n+     297,   298,   299,   300,   301,   302,   303,   304,    -1,    -1,\n+      -1,    -1,   309,   310,    -1,   312,   313,   314,    -1,   316,\n+     317,   318,    -1,   320,   321,   322,   323,   324,   325,    -1,\n+     327,   328,   329,   330,   331,   332,   333,   334,    -1,   336,\n+     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,\n+     347,   348,    -1,   350,   351,   352,   353,   354,   355,   356,\n+     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,\n+     367,    -1,   369,   370,   371,   372,   373,   374,   375,   376,\n+     377,   378,   379,   380,   381,   382,   383,   384,    -1,   386,\n+     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,\n+     397,   398,   399,    -1,   401,    -1,   403,   404,    -1,   406,\n+     407,   408,   409,   410,   411,   412,    -1,   414,   415,    -1,\n+      -1,   418,   419,    -1,   421,    -1,    -1,   424,   425,   426,\n+     427,   428,   429,   430,   431,   432,    -1,   434,   435,   436,\n+      -1,   438,   439,   440,   441,    -1,   443,   444,   445,   446,\n+     447,    -1,   449,    -1,   451,   452,   453,   454,   455,   456,\n+     457,    -1,    -1,   460,    -1,    -1,   463,   464,   465,   466,\n+     467,   468,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,   480,   481,   482,   483,    -1,    -1,    -1,\n       -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,\n       31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,    50,\n@@ -16931,7 +16840,7 @@ static const yytype_int16 yycheck[] =\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,\n       -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,\n-      40,    -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,\n+      -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,\n       50,    51,    52,    53,    54,    -1,    56,    57,    -1,    59,\n       60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,\n       70,    71,    -1,    73,    74,    75,    76,    77,    -1,    -1,\n@@ -16964,7 +16873,7 @@ static const yytype_int16 yycheck[] =\n      340,   341,   342,   343,   344,   345,   346,   347,   348,    -1,\n      350,   351,    -1,   353,   354,   355,   356,   357,   358,   359,\n      360,   361,   362,   363,   364,   365,   366,   367,    -1,    -1,\n-     370,   371,   372,   373,   374,    -1,   376,   377,   378,   379,\n+     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,\n       -1,   381,   382,   383,   384,    -1,   386,   387,   388,   389,\n      390,   391,   392,   393,   394,   395,   396,   397,   398,   399,\n      400,   401,    -1,   403,   404,    -1,   406,    -1,   408,   409,\n@@ -17121,7 +17030,246 @@ static const yytype_int16 yycheck[] =\n      467,   468,   469,   470,   471,   472,   473,   474,   475,   476,\n      477,   478,   479,   480,   481,   482,   483,     3,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,\n+      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,\n+      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,\n+      -1,    -1,    -1,    -1,    40,    -1,    -1,    43,    44,    -1,\n+      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,\n+      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,\n+      -1,    67,    68,    69,    70,    71,    -1,    73,    74,    75,\n+      76,    77,    -1,    -1,    -1,    81,    82,    83,    84,    85,\n+      86,    -1,    88,    89,    90,    -1,    92,    93,    94,    95,\n+      96,    97,    -1,    -1,   100,   101,   102,   103,   104,   105,\n+     106,   107,   108,   109,   110,   111,   112,    -1,   114,    -1,\n+     116,   117,   118,   119,   120,   121,    -1,   123,   124,   125,\n+     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,\n+     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,\n+     146,   147,   148,   149,   150,   151,   152,   153,   154,    -1,\n+     156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,\n+      -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,\n+      -1,   177,   178,   179,    -1,   181,   182,   183,   184,   185,\n+     186,   187,    -1,   189,   190,   191,   192,    -1,   194,   195,\n+     196,   197,   198,   199,   200,    -1,   202,    -1,   204,   205,\n+     206,   207,   208,   209,   210,   211,    -1,   213,    -1,   215,\n+      -1,    -1,   218,    -1,   220,   221,   222,   223,   224,   225,\n+      -1,    -1,   228,    -1,   230,    -1,    -1,   233,   234,   235,\n+     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,\n+     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,\n+     256,   257,   258,   259,   260,    -1,   262,   263,   264,   265,\n+     266,    -1,   268,   269,    -1,   271,    -1,   273,   274,   275,\n+     276,   277,   278,    -1,   280,   281,    -1,    -1,   284,   285,\n+     286,    -1,    -1,   289,   290,    -1,   292,    -1,   294,   295,\n+     296,   297,   298,   299,   300,   301,   302,   303,   304,    -1,\n+      -1,    -1,    -1,   309,   310,   311,    -1,   313,   314,   315,\n+     316,   317,   318,    -1,   320,   321,   322,   323,   324,   325,\n+      -1,   327,   328,   329,   330,   331,   332,   333,   334,    -1,\n+     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,\n+     346,   347,   348,    -1,   350,   351,    -1,   353,   354,   355,\n+     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,\n+     366,   367,    -1,    -1,   370,   371,   372,   373,   374,    -1,\n+     376,   377,   378,   379,    -1,   381,   382,   383,   384,    -1,\n+     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,\n+     396,   397,   398,   399,   400,   401,    -1,   403,   404,    -1,\n+     406,    -1,   408,   409,   410,   411,   412,    -1,   414,   415,\n+      -1,    -1,   418,   419,   420,   421,   422,    -1,   424,   425,\n+     426,   427,   428,   429,   430,   431,    -1,    -1,   434,   435,\n+     436,    -1,   438,   439,   440,   441,    -1,   443,   444,   445,\n+     446,   447,   448,   449,    -1,   451,    -1,   453,   454,   455,\n+     456,   457,    -1,    -1,   460,    -1,    -1,   463,   464,   465,\n+     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,\n+     476,   477,   478,   479,   480,   481,   482,   483,     3,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,\n+      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,\n+      -1,    46,    47,    48,    -1,    50,    51,    52,    53,    54,\n+      -1,    56,    57,    -1,    59,    60,    61,    62,    63,    64,\n+      -1,    -1,    67,    68,    69,    70,    71,    -1,    73,    74,\n+      75,    76,    77,    -1,    -1,    -1,    81,    82,    83,    84,\n+      85,    86,    -1,    88,    89,    90,    -1,    92,    93,    94,\n+      95,    96,    97,    -1,    -1,   100,   101,   102,   103,   104,\n+     105,   106,   107,   108,   109,   110,   111,   112,    -1,   114,\n+      -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,\n+     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,\n+      -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,\n+     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,\n+      -1,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,\n+     165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,\n+     175,    -1,   177,   178,   179,    -1,   181,   182,   183,   184,\n+     185,   186,   187,    -1,   189,   190,   191,   192,    -1,   194,\n+     195,   196,   197,   198,   199,   200,    -1,   202,    -1,   204,\n+     205,   206,   207,   208,   209,   210,   211,    -1,   213,    -1,\n+     215,    -1,    -1,   218,    -1,   220,   221,   222,   223,   224,\n+     225,    -1,    -1,   228,    -1,   230,    -1,    -1,   233,   234,\n+     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,\n+     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,\n+     255,   256,   257,   258,   259,   260,    -1,   262,   263,   264,\n+     265,   266,    -1,   268,   269,    -1,   271,    -1,   273,   274,\n+     275,   276,   277,   278,    -1,   280,   281,    -1,    -1,   284,\n+     285,   286,    -1,    -1,   289,   290,    -1,   292,    -1,   294,\n+     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,\n+      -1,    -1,    -1,    -1,   309,   310,   311,    -1,   313,   314,\n+     315,   316,   317,   318,    -1,   320,   321,   322,   323,   324,\n+     325,    -1,   327,   328,   329,   330,   331,   332,   333,   334,\n+      -1,   336,   337,   338,   339,   340,   341,   342,   343,   344,\n+     345,   346,   347,   348,    -1,   350,   351,    -1,   353,   354,\n+     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,\n+     365,   366,   367,    -1,    -1,   370,   371,   372,   373,   374,\n+     375,   376,   377,   378,   379,    -1,   381,   382,   383,   384,\n+      -1,   386,   387,   388,   389,   390,   391,   392,   393,   394,\n+     395,   396,   397,   398,   399,   400,   401,    -1,   403,   404,\n+      -1,   406,    -1,   408,   409,   410,   411,   412,    -1,   414,\n+     415,    -1,    -1,   418,   419,   420,   421,   422,    -1,   424,\n+     425,   426,   427,   428,   429,   430,   431,    -1,    -1,   434,\n+     435,   436,    -1,   438,   439,   440,   441,    -1,   443,   444,\n+     445,   446,   447,   448,   449,    -1,   451,    -1,   453,   454,\n+     455,   456,   457,    -1,    -1,   460,    -1,    -1,   463,   464,\n+     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,\n+     475,   476,   477,   478,   479,   480,   481,   482,   483,     3,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,\n+      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,\n+      44,    -1,    46,    47,    48,    -1,    50,    51,    52,    53,\n+      54,    -1,    56,    57,    -1,    59,    60,    61,    62,    63,\n+      64,    -1,    -1,    67,    68,    69,    70,    71,    -1,    73,\n+      74,    75,    76,    77,    -1,    -1,    -1,    81,    82,    83,\n+      84,    85,    86,    -1,    88,    89,    90,    -1,    92,    93,\n+      94,    95,    96,    97,    -1,    -1,   100,   101,   102,   103,\n+     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,\n+     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,\n+     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,\n+     134,    -1,   136,   137,   138,    -1,   140,   141,   142,    -1,\n+     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,\n+     154,    -1,   156,    -1,   158,   159,   160,   161,    -1,   163,\n+      -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,\n+      -1,   175,    -1,   177,   178,   179,    -1,   181,   182,   183,\n+     184,   185,   186,   187,    -1,   189,   190,   191,   192,    -1,\n+     194,   195,   196,   197,   198,   199,   200,    -1,   202,    -1,\n+     204,   205,   206,   207,   208,   209,   210,   211,    -1,   213,\n+      -1,   215,    -1,    -1,   218,    -1,   220,   221,   222,   223,\n+     224,   225,    -1,    -1,   228,    -1,   230,    -1,    -1,   233,\n+     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,\n+     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,\n+     254,   255,   256,   257,   258,   259,   260,    -1,   262,   263,\n+     264,   265,   266,    -1,   268,   269,    -1,   271,    -1,   273,\n+     274,   275,   276,   277,   278,    -1,   280,   281,    -1,    -1,\n+     284,   285,   286,    -1,    -1,   289,   290,    -1,   292,    -1,\n+     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,\n+     304,    -1,    -1,    -1,    -1,   309,   310,   311,    -1,   313,\n+     314,   315,   316,   317,   318,    -1,   320,   321,   322,   323,\n+     324,   325,    -1,   327,   328,   329,   330,   331,   332,   333,\n+     334,    -1,   336,   337,   338,   339,   340,   341,   342,   343,\n+     344,   345,   346,   347,   348,    -1,   350,   351,    -1,   353,\n+     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,\n+     364,   365,   366,   367,    -1,    -1,   370,   371,   372,   373,\n+     374,   375,   376,   377,   378,   379,    -1,   381,   382,   383,\n+     384,    -1,   386,   387,   388,   389,   390,   391,   392,   393,\n+     394,   395,   396,   397,   398,   399,   400,   401,    -1,   403,\n+     404,    -1,   406,    -1,   408,   409,   410,   411,   412,    -1,\n+     414,   415,    -1,    -1,   418,   419,   420,   421,   422,    -1,\n+     424,   425,   426,   427,   428,   429,   430,   431,    -1,    -1,\n+     434,   435,   436,    -1,   438,   439,   440,   441,    -1,   443,\n+     444,   445,   446,   447,   448,   449,    -1,   451,    -1,   453,\n+     454,   455,   456,   457,    -1,    -1,   460,    -1,    -1,   463,\n+     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,\n+     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,\n+       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,\n+      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,\n+      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      43,    44,    -1,    46,    47,    48,    -1,    50,    51,    52,\n+      53,    54,    -1,    56,    57,    -1,    59,    60,    61,    62,\n+      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    -1,\n+      73,    74,    75,    76,    77,    -1,    -1,    -1,    81,    82,\n+      83,    84,    85,    86,    -1,    88,    89,    90,    -1,    92,\n+      93,    94,    95,    96,    97,    -1,    -1,   100,   101,   102,\n+     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,\n+      -1,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,\n+     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,\n+     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,\n+      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,\n+     153,   154,    -1,   156,    -1,   158,   159,   160,   161,    -1,\n+     163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,\n+     173,    -1,   175,    -1,   177,   178,   179,    -1,   181,   182,\n+     183,   184,   185,   186,   187,    -1,   189,   190,   191,   192,\n+      -1,   194,   195,   196,   197,   198,   199,   200,    -1,   202,\n+      -1,   204,   205,   206,   207,   208,   209,   210,   211,    -1,\n+     213,    -1,   215,    -1,    -1,   218,    -1,   220,   221,   222,\n+     223,   224,   225,    -1,    -1,   228,    -1,   230,    -1,    -1,\n+     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,\n+     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,\n+     253,   254,   255,   256,   257,   258,   259,   260,    -1,   262,\n+     263,   264,   265,   266,    -1,   268,   269,    -1,   271,    -1,\n+     273,   274,   275,   276,   277,   278,    -1,   280,   281,    -1,\n+      -1,   284,   285,   286,    -1,    -1,   289,   290,    -1,   292,\n+      -1,   294,   295,   296,   297,   298,   299,   300,   301,   302,\n+     303,   304,    -1,    -1,    -1,    -1,   309,   310,   311,    -1,\n+     313,   314,   315,   316,   317,   318,    -1,   320,   321,   322,\n+     323,   324,   325,    -1,   327,   328,   329,   330,   331,   332,\n+     333,   334,    -1,   336,   337,   338,   339,   340,   341,   342,\n+     343,   344,   345,   346,   347,   348,    -1,   350,   351,    -1,\n+     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,\n+     363,   364,   365,   366,   367,    -1,    -1,   370,   371,   372,\n+     373,   374,   375,   376,   377,   378,   379,    -1,   381,   382,\n+     383,   384,    -1,   386,   387,   388,   389,   390,   391,   392,\n+     393,   394,   395,   396,   397,   398,   399,   400,   401,    -1,\n+     403,   404,    -1,   406,    -1,   408,   409,   410,   411,   412,\n+      -1,   414,   415,    -1,    -1,   418,   419,   420,   421,   422,\n+      -1,   424,   425,   426,   427,   428,   429,   430,   431,    -1,\n+      -1,   434,   435,   436,    -1,   438,   439,   440,   441,    -1,\n+     443,   444,   445,   446,   447,   448,   449,    -1,   451,    -1,\n+     453,   454,   455,   456,   457,    -1,    -1,   460,    -1,    -1,\n+     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,\n+     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,\n+     483,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,\n+      32,    33,    -1,    -1,    -1,    37,    -1,    -1,    -1,    -1,\n+      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,\n+      52,    -1,    54,    55,    56,    57,    -1,    59,    60,    61,\n+      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,\n+      -1,    73,    74,    75,    76,    -1,    -1,    79,    -1,    81,\n+      82,    83,    84,    85,    86,    87,    88,    89,    90,    -1,\n+      92,    93,    94,    95,    96,    97,    -1,    99,   100,   101,\n+     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,\n+     112,    -1,   114,    -1,   116,   117,   118,   119,   120,   121,\n+      -1,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,\n+     132,   133,   134,    -1,   136,   137,   138,    -1,   140,   141,\n+     142,    -1,   144,   145,   146,   147,    -1,   149,   150,   151,\n+     152,   153,    -1,    -1,   156,    -1,   158,   159,   160,   161,\n+      -1,   163,    -1,   165,   166,    -1,   168,   169,   170,    -1,\n+     172,   173,    -1,   175,    -1,    -1,    -1,   179,    -1,   181,\n+     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,\n+     192,    -1,   194,   195,   196,   197,   198,   199,   200,    -1,\n+     202,   203,    -1,   205,   206,   207,   208,   209,   210,   211,\n+      -1,   213,    -1,   215,   216,   217,   218,   219,   220,   221,\n+     222,   223,   224,   225,    -1,    -1,   228,   229,   230,   231,\n+      -1,   233,   234,   235,   236,   237,   238,   239,   240,   241,\n+     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,\n+     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,\n+     262,   263,   264,   265,    -1,    -1,   268,   269,   270,   271,\n+      -1,    -1,   274,   275,   276,   277,   278,    -1,   280,   281,\n+      -1,    -1,   284,   285,   286,    -1,    -1,   289,    -1,   291,\n+     292,   293,    -1,   295,   296,   297,   298,   299,   300,   301,\n+     302,   303,   304,    -1,    -1,    -1,    -1,   309,   310,    -1,\n+     312,   313,   314,    -1,   316,   317,   318,    -1,   320,   321,\n+     322,   323,   324,   325,    -1,   327,   328,   329,   330,   331,\n+     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,\n+     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,\n+     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,\n+     362,   363,   364,   365,   366,   367,    -1,   369,   370,   371,\n+     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,\n+     382,   383,   384,    -1,   386,   387,   388,   389,   390,   391,\n+     392,   393,   394,   395,   396,   397,   398,   399,    -1,   401,\n+      -1,   403,   404,    -1,   406,   407,   408,   409,   410,   411,\n+     412,    -1,   414,   415,    -1,    -1,   418,   419,    -1,   421,\n+      -1,    -1,   424,   425,   426,   427,   428,   429,   430,   431,\n+     432,    -1,   434,   435,   436,    -1,   438,   439,   440,   441,\n+      -1,   443,   444,   445,   446,   447,    -1,   449,    -1,   451,\n+     452,   453,   454,   455,   456,   457,    -1,    -1,   460,    -1,\n+      -1,   463,   464,   465,   466,   467,   468,     3,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   480,   481,\n+     482,   483,    -1,    -1,    -1,    -1,    22,    23,    24,    25,\n       26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,\n       -1,    37,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,\n       46,    47,    48,    49,    50,    51,    52,    -1,    54,    55,\n@@ -17229,7 +17377,7 @@ static const yytype_int16 yycheck[] =\n      134,    -1,   136,   137,   138,    -1,   140,   141,   142,    -1,\n      144,   145,   146,   147,    -1,   149,   150,   151,   152,   153,\n       -1,    -1,   156,    -1,   158,   159,   160,   161,    -1,   163,\n-      -1,   165,   166,    -1,   168,   169,   170,    -1,   172,   173,\n+      -1,   165,   166,    -1,   168,   169,   170,   171,   172,   173,\n       -1,   175,    -1,    -1,    -1,   179,    -1,   181,   182,   183,\n      184,   185,   186,   187,   188,   189,   190,   191,   192,    -1,\n      194,   195,   196,   197,   198,   199,   200,    -1,   202,   203,\n@@ -17248,208 +17396,161 @@ static const yytype_int16 yycheck[] =\n      324,   325,    -1,   327,   328,   329,   330,   331,   332,   333,\n      334,    -1,   336,   337,   338,   339,   340,   341,   342,   343,\n      344,   345,   346,   347,   348,    -1,   350,   351,   352,   353,\n-     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,\n+     354,   355,    -1,   357,   358,   359,   360,   361,   362,   363,\n      364,   365,   366,   367,    -1,   369,   370,   371,   372,   373,\n-     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,\n+     374,   375,    -1,   377,   378,   379,   380,   381,   382,   383,\n      384,    -1,   386,   387,   388,   389,   390,   391,   392,   393,\n      394,   395,   396,   397,   398,   399,    -1,   401,    -1,   403,\n      404,    -1,   406,   407,   408,   409,   410,   411,   412,    -1,\n      414,   415,    -1,    -1,   418,   419,    -1,   421,    -1,    -1,\n-     424,   425,   426,   427,   428,   429,   430,   431,   432,    -1,\n+     424,   425,   426,   427,   428,   429,   430,   431,    -1,    -1,\n      434,   435,   436,    -1,   438,   439,   440,   441,    -1,   443,\n      444,   445,   446,   447,    -1,   449,    -1,   451,   452,   453,\n      454,   455,   456,   457,    -1,    -1,   460,    -1,    -1,   463,\n      464,   465,   466,   467,   468,     3,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,   480,   481,   482,   483,\n       -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,\n-      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    37,\n-      -1,    -1,    -1,    -1,    42,    43,    44,    -1,    46,    47,\n-      48,    49,    50,    51,    52,    -1,    54,    55,    56,    57,\n+      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,\n+      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,\n       -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,\n-      68,    69,    70,    71,    -1,    73,    74,    75,    76,    -1,\n-      -1,    79,    -1,    81,    82,    83,    84,    85,    86,    87,\n+      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,\n+      -1,    -1,    -1,    81,    82,    83,    84,    85,    86,    -1,\n       88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,\n-      -1,    99,   100,   101,   102,   103,   104,   105,   106,   107,\n+      -1,    -1,   100,   101,   102,   103,   104,   105,   106,   107,\n      108,   109,   110,   111,   112,    -1,   114,    -1,   116,   117,\n      118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,\n       -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,\n      138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,\n-      -1,   149,   150,   151,   152,   153,    -1,    -1,   156,    -1,\n-     158,   159,   160,   161,    -1,   163,    -1,   165,   166,    -1,\n-     168,   169,   170,   171,   172,   173,    -1,   175,    -1,    -1,\n-      -1,   179,    -1,   181,   182,   183,   184,   185,   186,   187,\n-     188,   189,   190,   191,   192,    -1,   194,   195,   196,   197,\n-     198,   199,   200,    -1,   202,   203,    -1,   205,   206,   207,\n-     208,   209,   210,   211,    -1,   213,    -1,   215,   216,   217,\n-     218,   219,   220,   221,   222,   223,   224,   225,    -1,    -1,\n-     228,   229,   230,   231,    -1,   233,   234,   235,   236,   237,\n-     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,\n-     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,\n-     258,   259,   260,   261,   262,   263,   264,   265,    -1,    -1,\n-     268,   269,   270,   271,    -1,    -1,   274,   275,   276,   277,\n-     278,    -1,   280,   281,    -1,    -1,   284,   285,   286,    -1,\n-      -1,   289,    -1,   291,   292,   293,    -1,   295,   296,   297,\n-     298,   299,   300,   301,   302,   303,   304,    -1,    -1,    -1,\n-      -1,   309,   310,    -1,   312,   313,   314,    -1,   316,   317,\n-     318,    -1,   320,   321,   322,   323,   324,   325,    -1,   327,\n-     328,   329,   330,   331,   332,   333,   334,    -1,   336,   337,\n-     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,\n-     348,    -1,   350,   351,   352,   353,   354,   355,    -1,   357,\n-     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,\n-      -1,   369,   370,   371,   372,   373,   374,   375,    -1,   377,\n-     378,   379,   380,   381,   382,   383,   384,    -1,   386,   387,\n-     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,\n-     398,   399,    -1,   401,    -1,   403,   404,    -1,   406,   407,\n-     408,   409,   410,   411,   412,    -1,   414,   415,    -1,    -1,\n-     418,   419,    -1,   421,    -1,    -1,   424,   425,   426,   427,\n-     428,   429,   430,   431,    -1,    -1,   434,   435,   436,    -1,\n-     438,   439,   440,   441,    -1,   443,   444,   445,   446,   447,\n-      -1,   449,    -1,   451,   452,   453,   454,   455,   456,   457,\n-      -1,    -1,   460,    -1,    -1,   463,   464,   465,   466,   467,\n-     468,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,   480,   481,   482,   483,    -1,    -1,    -1,    -1,\n-      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,\n-      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,\n-      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,\n-      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,\n-      -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,    81,\n-      82,    83,    84,    85,    86,    -1,    88,    89,    90,    -1,\n-      92,    93,    94,    95,    96,    97,    -1,    -1,   100,   101,\n-     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,\n-     112,    -1,   114,    -1,   116,   117,   118,   119,   120,   121,\n-      -1,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,\n-     132,   133,   134,    -1,   136,   137,   138,    -1,   140,   141,\n-     142,    -1,   144,   145,   146,   147,   148,   149,   150,   151,\n-     152,   153,   154,    -1,   156,    -1,   158,   159,   160,   161,\n-      -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,\n-      -1,   173,    -1,   175,    -1,   177,   178,   179,    -1,   181,\n-     182,   183,   184,   185,   186,   187,    -1,   189,   190,   191,\n-     192,    -1,   194,   195,   196,   197,   198,   199,   200,    -1,\n-     202,    -1,   204,   205,   206,   207,   208,   209,   210,   211,\n-      -1,   213,    -1,   215,    -1,    -1,   218,    -1,   220,   221,\n-     222,   223,   224,   225,    -1,    -1,   228,    -1,   230,    -1,\n-      -1,   233,   234,   235,   236,   237,   238,   239,   240,   241,\n-     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,\n-     252,   253,   254,   255,   256,   257,   258,   259,   260,    -1,\n-     262,   263,   264,   265,   266,    -1,   268,   269,    -1,   271,\n-      -1,   273,   274,   275,   276,   277,   278,    -1,   280,   281,\n-      -1,    -1,   284,   285,   286,    -1,    -1,   289,   290,    -1,\n-     292,    -1,   294,   295,   296,   297,   298,   299,   300,    -1,\n-     302,   303,   304,    -1,    -1,    -1,    -1,   309,   310,   311,\n-      -1,   313,   314,   315,   316,   317,   318,    -1,   320,   321,\n-     322,   323,   324,   325,    -1,   327,    -1,   329,   330,   331,\n-     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,\n-     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,\n-      -1,   353,   354,   355,   356,    -1,   358,   359,   360,   361,\n-     362,   363,   364,   365,   366,   367,    -1,    -1,   370,   371,\n-     372,   373,   374,   375,   376,   377,   378,   379,    -1,   381,\n-     382,   383,   384,    -1,   386,   387,   388,   389,   390,   391,\n-     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,\n-      -1,   403,   404,    -1,   406,    -1,   408,   409,   410,   411,\n-     412,    -1,   414,   415,    -1,    -1,   418,   419,   420,   421,\n-     422,    -1,   424,   425,   426,   427,   428,   429,   430,   431,\n-      -1,    -1,   434,   435,   436,    -1,   438,   439,   440,   441,\n-      -1,   443,   444,   445,   446,   447,   448,   449,    -1,   451,\n-      -1,   453,   454,   455,   456,   457,    -1,    -1,   460,    -1,\n-      -1,   463,   464,   465,   466,   467,   468,   469,   470,   471,\n-     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,\n-     482,   483,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,\n-      31,    32,    33,    -1,    -1,    -1,    37,    -1,    -1,    -1,\n-      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,\n-      51,    52,    -1,    54,    55,    56,    57,    -1,    59,    60,\n-      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,\n-      71,    -1,    73,    74,    75,    76,    -1,    -1,    79,    -1,\n-      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,\n-      -1,    92,    93,    94,    95,    96,    97,    -1,    99,   100,\n-     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,\n-     111,   112,    -1,   114,    -1,   116,   117,   118,   119,   120,\n-     121,    -1,   123,   124,   125,   126,   127,    -1,    -1,   130,\n-     131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,\n-     141,   142,    -1,   144,   145,   146,   147,    -1,   149,   150,\n-     151,   152,   153,    -1,    -1,   156,    -1,   158,   159,   160,\n-     161,    -1,   163,    -1,   165,   166,    -1,   168,   169,   170,\n-      -1,   172,   173,    -1,   175,    -1,    -1,    -1,   179,    -1,\n-     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,\n-     191,   192,    -1,   194,   195,   196,   197,   198,   199,   200,\n-      -1,   202,   203,    -1,   205,   206,   207,   208,   209,   210,\n-     211,    -1,   213,    -1,   215,   216,   217,   218,   219,   220,\n-     221,   222,   223,   224,   225,    -1,    -1,   228,   229,   230,\n-     231,    -1,   233,   234,   235,   236,   237,   238,   239,   240,\n-      -1,   242,   243,   244,   245,   246,   247,   248,   249,   250,\n-     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,\n-     261,   262,   263,   264,   265,    -1,    -1,   268,   269,   270,\n-     271,    -1,    -1,   274,   275,   276,   277,   278,    -1,   280,\n-     281,    -1,    -1,   284,   285,   286,    -1,    -1,   289,    -1,\n-     291,   292,   293,    -1,   295,   296,   297,   298,   299,   300,\n-     301,   302,   303,   304,    -1,    -1,    -1,    -1,   309,   310,\n-      -1,   312,   313,   314,    -1,   316,   317,   318,    -1,   320,\n-     321,   322,   323,   324,   325,    -1,   327,   328,   329,   330,\n-     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,\n-     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,\n-     351,   352,   353,   354,   355,    -1,   357,   358,   359,   360,\n-     361,   362,   363,   364,   365,   366,   367,    -1,   369,   370,\n-     371,   372,   373,   374,   375,    -1,   377,   378,   379,   380,\n-     381,   382,   383,   384,    -1,   386,   387,   388,   389,   390,\n-     391,   392,   393,   394,   395,   396,   397,    -1,   399,    -1,\n-     401,    -1,   403,   404,    -1,   406,   407,   408,   409,   410,\n-     411,   412,    -1,   414,   415,    -1,    -1,   418,   419,    -1,\n-     421,    -1,    -1,   424,   425,   426,   427,   428,   429,   430,\n-     431,    -1,    -1,   434,   435,   436,    -1,   438,   439,   440,\n-     441,    -1,   443,   444,   445,   446,   447,    -1,   449,    -1,\n-     451,   452,   453,   454,   455,   456,   457,    -1,    22,   460,\n-      -1,    -1,   463,   464,   465,   466,   467,   468,    32,    -1,\n-      34,    35,    -1,    -1,    -1,    22,    -1,    -1,    -1,   480,\n-     481,   482,   483,    -1,    -1,    32,    -1,    -1,    52,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    61,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    52,    -1,    -1,    -1,    73,\n-      -1,    -1,    -1,    -1,    61,    -1,    -1,    -1,    -1,    -1,\n-      84,    -1,    -1,    -1,    -1,    -1,    73,    -1,    -1,    -1,\n-      -1,    -1,    96,    -1,    98,    -1,    -1,    84,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,   109,    -1,    -1,    -1,    96,\n-      -1,    98,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   123,\n-      -1,    -1,   109,    -1,    -1,    -1,    -1,    -1,    -1,   133,\n-      -1,    -1,    -1,    -1,    -1,   139,   123,    -1,    -1,    -1,\n-      -1,    -1,    -1,   147,    -1,    -1,   133,    -1,    -1,    -1,\n-      -1,    -1,   139,    -1,    -1,    -1,    -1,    -1,    -1,   163,\n-     147,    -1,    -1,   167,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,   163,    -1,    -1,    -1,\n-     167,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+     148,   149,   150,   151,   152,   153,   154,    -1,   156,    -1,\n+     158,   159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,\n+      -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,   177,\n+     178,   179,    -1,   181,   182,   183,   184,   185,   186,   187,\n+      -1,   189,   190,   191,   192,    -1,   194,   195,   196,   197,\n+     198,   199,   200,    -1,   202,    -1,   204,   205,   206,   207,\n+     208,   209,   210,   211,    -1,   213,    -1,   215,    -1,    -1,\n+     218,    -1,   220,   221,   222,   223,   224,   225,    -1,    -1,\n+     228,    -1,   230,    -1,    -1,   233,   234,   235,   236,   237,\n+     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,\n+     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,\n+     258,   259,   260,    -1,   262,   263,   264,   265,   266,    -1,\n+     268,   269,    -1,   271,    -1,   273,   274,   275,   276,   277,\n+     278,    -1,   280,   281,    -1,    -1,   284,   285,   286,    -1,\n+      -1,   289,   290,    -1,   292,    -1,   294,   295,   296,   297,\n+     298,   299,   300,    -1,   302,   303,   304,    -1,    -1,    -1,\n+      -1,   309,   310,   311,    -1,   313,   314,   315,   316,   317,\n+     318,    -1,   320,   321,   322,   323,   324,   325,    -1,   327,\n+      -1,   329,   330,   331,   332,   333,   334,    -1,   336,   337,\n+     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,\n+     348,    -1,   350,   351,    -1,   353,   354,   355,   356,    -1,\n+     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,\n+      -1,    -1,   370,   371,   372,   373,   374,   375,   376,   377,\n+     378,   379,    -1,   381,   382,   383,   384,    -1,   386,   387,\n+     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,\n+     398,   399,   400,   401,    -1,   403,   404,    -1,   406,    -1,\n+     408,   409,   410,   411,   412,    -1,   414,   415,    -1,    -1,\n+     418,   419,   420,   421,   422,    -1,   424,   425,   426,   427,\n+     428,   429,   430,   431,    -1,    -1,   434,   435,   436,    -1,\n+     438,   439,   440,   441,    -1,   443,   444,   445,   446,   447,\n+     448,   449,    -1,   451,    -1,   453,   454,   455,   456,   457,\n+      -1,    -1,   460,    -1,    -1,   463,   464,   465,   466,   467,\n+     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,\n+     478,   479,   480,   481,   482,   483,     3,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,\n+      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,\n+      37,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,    46,\n+      47,    48,    49,    50,    51,    52,    -1,    54,    55,    56,\n+      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,\n+      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,\n+      -1,    -1,    79,    -1,    81,    82,    83,    84,    85,    86,\n+      87,    88,    89,    90,    -1,    92,    93,    94,    95,    96,\n+      97,    -1,    99,   100,   101,   102,   103,   104,   105,   106,\n+     107,   108,   109,   110,   111,   112,    -1,   114,    -1,   116,\n+     117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,\n+     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,   136,\n+     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,\n+     147,    -1,   149,   150,   151,   152,   153,    -1,    -1,   156,\n+      -1,   158,   159,   160,   161,    -1,   163,    -1,   165,   166,\n+      -1,   168,   169,   170,    -1,   172,   173,    -1,   175,    -1,\n+      -1,    -1,   179,    -1,   181,   182,   183,   184,   185,   186,\n+     187,   188,   189,   190,   191,   192,    -1,   194,   195,   196,\n+     197,   198,   199,   200,    -1,   202,   203,    -1,   205,   206,\n+     207,   208,   209,   210,   211,    -1,   213,    -1,   215,   216,\n+     217,   218,   219,   220,   221,   222,   223,   224,   225,    -1,\n+      -1,   228,   229,   230,   231,    -1,   233,   234,   235,   236,\n+     237,   238,   239,   240,    -1,   242,   243,   244,   245,   246,\n+     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,\n+     257,   258,   259,   260,   261,   262,   263,   264,   265,    -1,\n+      -1,   268,   269,   270,   271,    -1,    -1,   274,   275,   276,\n+     277,   278,    -1,   280,   281,    -1,    -1,   284,   285,   286,\n+      -1,    -1,   289,    -1,   291,   292,   293,    -1,   295,   296,\n+     297,   298,   299,   300,   301,   302,   303,   304,    -1,    -1,\n+      -1,    -1,   309,   310,    -1,   312,   313,   314,    -1,   316,\n+     317,   318,    -1,   320,   321,   322,   323,   324,   325,    -1,\n+     327,   328,   329,   330,   331,   332,   333,   334,    -1,   336,\n+     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,\n+     347,   348,    -1,   350,   351,   352,   353,   354,   355,    -1,\n+     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,\n+     367,    -1,   369,   370,   371,   372,   373,   374,   375,    -1,\n+     377,   378,   379,   380,   381,   382,   383,   384,    -1,   386,\n+     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,\n+     397,    -1,   399,    -1,   401,    -1,   403,   404,    -1,   406,\n+     407,   408,   409,   410,   411,   412,    -1,   414,   415,    -1,\n+      -1,   418,   419,    -1,   421,    -1,    -1,   424,   425,   426,\n+     427,   428,   429,   430,   431,    -1,    -1,   434,   435,   436,\n+      -1,   438,   439,   440,   441,    -1,   443,   444,   445,   446,\n+     447,    -1,   449,    -1,   451,   452,   453,   454,   455,   456,\n+     457,    -1,    22,   460,    -1,    -1,   463,   464,   465,   466,\n+     467,   468,    32,    -1,    34,    35,    -1,    -1,    -1,    22,\n+      -1,    -1,    -1,   480,   481,   482,   483,    -1,    -1,    32,\n+      -1,    -1,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    61,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    52,\n+      -1,    -1,    -1,    73,    -1,    -1,    -1,    -1,    61,    -1,\n+      -1,    -1,    -1,    -1,    84,    -1,    -1,    -1,    -1,    -1,\n+      73,    -1,    -1,    -1,    -1,    -1,    96,    -1,    98,    -1,\n+      -1,    84,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   109,\n+      -1,    -1,    -1,    96,    -1,    98,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,   123,    -1,    -1,   109,    -1,    -1,    -1,\n+      -1,    -1,    -1,   133,    -1,    -1,    -1,    -1,    -1,   139,\n+     123,    -1,    -1,    -1,    -1,    -1,    -1,   147,    -1,    -1,\n+     133,    -1,    -1,    -1,    -1,    -1,   139,    -1,    -1,    -1,\n+      -1,    -1,    -1,   163,   147,    -1,    -1,   167,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,   208,    -1,    -1,    -1,    -1,    -1,\n+     163,    -1,    -1,    -1,   167,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,   208,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-     234,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,   234,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   208,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,   208,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,   234,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,   234,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,   305,   306,   307,    -1,    -1,    -1,    -1,    -1,   313,\n-      -1,    -1,   316,    -1,    -1,    -1,    -1,    -1,   305,   306,\n-     307,    -1,    -1,    -1,    -1,    -1,   313,    -1,    -1,   316,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,   345,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-     354,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   345,    -1,\n-      -1,    -1,    -1,    -1,   368,    -1,    -1,   354,    -1,    -1,\n-      -1,   375,    -1,    -1,    -1,   379,    -1,    -1,    -1,    -1,\n-      -1,   368,    -1,    -1,    -1,   389,    -1,    -1,   375,    -1,\n-      -1,    -1,   379,    -1,    -1,    -1,    -1,   401,    -1,    -1,\n-      -1,   405,   389,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,   401,    -1,    -1,    -1,   405,    -1,\n-     424,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,   437,    -1,    -1,    -1,   424,    -1,   443,\n-      -1,    -1,    -1,    -1,   448,    -1,    -1,    -1,   452,    -1,\n-     437,    -1,    -1,    -1,    -1,    -1,   443,    -1,   462,    -1,\n-      -1,   448,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,   462,    -1,    -1,    -1,    -1,\n-      -1,    -1,   486,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,   500,    -1,    -1,   486,\n+      -1,    -1,    -1,    -1,    -1,   305,   306,   307,    -1,    -1,\n+      -1,    -1,    -1,   313,    -1,    -1,   316,    -1,    -1,    -1,\n+      -1,    -1,   305,   306,   307,    -1,    -1,    -1,    -1,    -1,\n+     313,    -1,    -1,   316,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,   345,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,   354,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,   345,    -1,    -1,    -1,    -1,    -1,   368,    -1,\n+      -1,   354,    -1,    -1,    -1,   375,    -1,    -1,    -1,   379,\n+      -1,    -1,    -1,    -1,    -1,   368,    -1,    -1,    -1,   389,\n+      -1,    -1,   375,    -1,    -1,    -1,   379,    -1,    -1,    -1,\n+      -1,   401,    -1,    -1,    -1,   405,   389,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   401,    -1,\n+      -1,    -1,   405,    -1,   424,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,   437,    -1,    -1,\n+      -1,   424,    -1,   443,    -1,    -1,    -1,    -1,   448,    -1,\n+      -1,    -1,   452,    -1,   437,    -1,    -1,    -1,    -1,    -1,\n+     443,    -1,   462,    -1,    -1,   448,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   462,\n+      -1,    -1,    -1,    -1,    -1,    -1,   486,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,   500\n+     500,    -1,    -1,   486,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,   500\n };\n \n /* YYSTOS[STATE-NUM] -- The (internal number of the) accessing\n@@ -17463,10 +17564,10 @@ static const yytype_uint16 yystos[] =\n      440,   443,   448,   462,   486,   500,   512,   513,   514,   515,\n      526,   535,   537,   542,   558,   561,   562,   564,   566,   573,\n      575,   576,   624,   631,   634,   635,   652,   653,   654,   655,\n-     657,   659,   660,   664,   716,   717,   876,   879,   882,   889,\n-     890,   892,   893,   894,   901,   905,   911,   913,   918,   922,\n-     923,   924,   927,   930,   931,   935,   936,   938,   418,   465,\n-     574,   197,   361,   370,   405,   454,   106,   925,   574,     3,\n+     657,   659,   660,   664,   717,   718,   878,   881,   884,   891,\n+     892,   894,   895,   896,   903,   907,   913,   915,   920,   924,\n+     925,   926,   929,   932,   933,   937,   938,   940,   418,   465,\n+     574,   197,   361,   370,   405,   454,   106,   927,   574,     3,\n       22,    23,    24,    25,    26,    27,    28,    29,    31,    32,\n       33,    42,    43,    44,    46,    47,    48,    49,    50,    51,\n       52,    53,    54,    55,    56,    57,    59,    60,    61,    62,\n@@ -17505,293 +17606,295 @@ static const yytype_uint16 yystos[] =\n      440,   441,   443,   444,   445,   446,   447,   448,   449,   451,\n      452,   453,   454,   455,   456,   457,   460,   463,   464,   465,\n      466,   467,   468,   469,   470,   471,   472,   473,   474,   475,\n-     476,   477,   478,   479,   480,   481,   482,   483,   528,   786,\n-     865,   869,   941,   942,   943,     3,   171,   241,   398,   528,\n-     891,   941,   574,    55,   500,   647,   173,   235,   287,   361,\n-     409,   411,   427,   433,   436,   622,   888,     5,    30,   316,\n-     528,   529,   864,   106,   925,    24,    79,    95,   142,   152,\n+     476,   477,   478,   479,   480,   481,   482,   483,   528,   788,\n+     867,   871,   943,   944,   945,     3,   171,   241,   398,   528,\n+     893,   943,   574,    55,   500,   647,   173,   235,   287,   361,\n+     409,   411,   427,   433,   436,   622,   890,     5,    30,   316,\n+     528,   529,   866,   106,   927,    24,    79,    95,   142,   152,\n      164,   169,   197,   240,   244,   310,   325,   358,   361,   370,\n      373,   391,   405,   412,   421,   427,   454,   625,   626,   629,\n-     574,   864,   452,   500,   515,   526,   535,   537,   558,   561,\n+     574,   866,   452,   500,   515,   526,   535,   537,   558,   561,\n      562,   564,   566,   573,   576,   624,   631,   634,   635,   652,\n-     876,   879,   882,   889,   890,   897,   901,   905,   911,   913,\n-     918,   927,   930,   935,   936,   938,   106,    73,   208,    66,\n+     878,   881,   884,   891,   892,   899,   903,   907,   913,   915,\n+     920,   929,   932,   937,   938,   940,   106,    73,   208,    66,\n       77,    79,   154,   226,   273,   283,   294,   311,   357,   400,\n-     420,   422,   426,   448,   500,   527,   528,   529,   653,   717,\n-     719,   721,   731,   738,   739,   786,   788,   789,   106,     5,\n-     528,   530,   912,   912,   528,   864,    30,   414,   418,   528,\n-     928,   929,   933,   574,    30,   128,   672,   673,   173,   235,\n-     361,   374,   414,   906,   907,   933,   574,   528,   652,   664,\n-     934,   528,   738,   405,   669,   527,   168,   500,   915,   500,\n-     333,   665,   666,   864,   665,   653,   654,     0,   503,   118,\n-     207,   439,   143,   212,   288,   432,   675,   676,   721,   721,\n-     653,   655,   657,   504,   452,   895,    30,   414,   418,   652,\n-     934,   186,   527,   864,   186,   527,   186,   738,   186,   527,\n-     530,   498,   502,   531,   532,   500,   652,   527,   409,   411,\n-     409,   411,   343,   186,   527,   527,   169,   240,   333,   370,\n-     405,   454,   632,   197,    30,   864,   186,     3,   246,   421,\n-     105,   405,   405,   454,   364,     3,    37,    42,    49,    54,\n-      55,    56,    57,    69,    70,    79,    81,    87,    99,   110,\n-     111,   132,   160,   166,   168,   172,   186,   188,   203,   210,\n-     211,   213,   216,   217,   219,   229,   231,   241,   260,   261,\n-     262,   270,   275,   291,   293,   312,   330,   352,   356,   369,\n-     376,   380,   383,   398,   407,   414,   415,   426,   432,   449,\n-     452,   630,   749,   751,   753,   755,   757,   759,   761,   762,\n-     763,   765,   766,   767,   769,   770,   870,   941,   944,   186,\n-     528,   627,   871,   186,   861,   864,   186,   864,   500,   565,\n-     897,     3,    37,    42,    49,    53,    54,    55,    56,    57,\n-      69,    70,    77,    79,    81,    87,    99,   110,   111,   148,\n-     154,   160,   166,   168,   171,   172,   177,   178,   188,   203,\n-     204,   210,   211,   213,   216,   217,   219,   229,   231,   241,\n-     260,   261,   262,   266,   270,   273,   275,   290,   291,   293,\n-     294,   311,   312,   315,   330,   352,   356,   369,   376,   380,\n-     383,   398,   400,   407,   414,   415,   420,   422,   426,   448,\n-     449,   452,   469,   470,   471,   472,   473,   474,   475,   476,\n-     477,   478,   479,   898,   900,   901,   903,   904,   941,   945,\n-     895,   528,   530,   891,   912,   500,   500,   162,   500,   653,\n-     739,   500,   500,   527,   500,   500,   167,   500,   500,   500,\n-     500,   653,   717,   721,   731,   493,   531,    40,   528,   732,\n-     733,   732,   368,   504,   656,    37,    42,    99,   168,   203,\n-     219,   229,   261,   305,   312,   352,   369,   437,   735,   733,\n-      40,   528,   732,   734,   486,   743,   530,   489,   500,   500,\n-     877,   483,   218,   502,   282,     4,     6,     7,     8,     9,\n-      10,    39,    54,    56,    57,    65,    69,    70,    81,   110,\n-     111,   113,   148,   155,   160,   177,   178,   210,   211,   213,\n-     241,   260,   262,   267,   272,   275,   284,   330,   356,   383,\n-     414,   415,   423,   449,   484,   491,   492,   493,   498,   500,\n-     505,   506,   507,   508,   528,   530,   653,   706,   754,   757,\n-     760,   761,   762,   764,   765,   766,   769,   770,   781,   783,\n-     784,   785,   786,   787,   789,   790,   804,   805,   816,   838,\n-     843,   851,   852,   853,   865,   866,   867,   850,   852,   906,\n-     906,   530,   906,   483,   167,   416,   489,   502,   531,   738,\n-     919,     3,   166,   168,   452,   901,   914,   916,   166,   917,\n-     781,   822,   823,   665,   504,   500,   873,   501,   501,   514,\n-     167,   287,   545,   919,    30,   128,   670,   670,    59,   670,\n-     157,   162,   232,   279,   681,   683,   684,   709,   711,   712,\n-     713,   176,   282,   442,   282,   675,   676,   500,   527,   406,\n-     932,   483,   218,   148,    26,    32,   133,   286,   341,   345,\n-     375,   445,   520,   523,   524,   341,   148,    40,    60,   104,\n-     196,   245,   253,   265,   296,   341,   347,   370,   375,   389,\n-     523,   567,   570,   148,   341,   375,   523,   148,   341,   375,\n-     523,    40,   926,   781,   844,     3,    30,    34,    35,    36,\n-      38,    39,    40,    41,    45,    58,    65,    66,    72,    78,\n-      80,    91,    98,   113,   115,   122,   128,   129,   135,   139,\n-     143,   155,   157,   162,   164,   167,   174,   176,   180,   193,\n-     201,   212,   214,   226,   227,   232,   267,   272,   279,   282,\n-     283,   287,   288,   305,   306,   307,   308,   319,   326,   335,\n-     349,   368,   385,   402,   405,   413,   416,   417,   423,   432,\n-     433,   437,   442,   448,   450,   458,   459,   461,   462,   533,\n-     534,   941,   945,   947,   532,     3,    30,    37,    42,    49,\n-      55,    79,    81,    87,    99,   128,   166,   168,   171,   172,\n-     188,   203,   216,   217,   219,   229,   231,   241,   261,   270,\n-     291,   293,   312,   352,   369,   380,   398,   407,   426,   450,\n-     452,   501,   781,   825,   826,   868,   874,   941,   946,   501,\n-     500,   611,   361,   622,   267,   880,    40,   454,   186,   527,\n-     186,   527,   940,   186,   527,   186,   527,    87,   885,   148,\n-     466,    88,   125,   299,   410,   451,   768,   768,   768,   500,\n-     756,   756,   315,   500,   758,   148,   500,    69,    70,   768,\n-     756,   753,   464,   486,   500,   771,   500,   771,   500,    63,\n-     348,   504,   628,   500,    39,   752,   500,   107,   108,   183,\n-     184,   247,   248,   249,   250,   251,   252,   255,   256,   365,\n-     366,   480,   481,   500,   772,   773,   774,   775,   776,   777,\n-     778,   779,   780,   756,   148,   502,   872,   504,   628,   148,\n-     504,   628,   148,   282,   823,   501,   504,     4,   155,   282,\n-     423,   491,   492,   530,   569,   572,   867,   896,   898,   899,\n-     902,   897,   416,   500,   642,   646,   781,   823,   500,     3,\n-     530,   772,   773,   774,   775,   776,   777,   778,   779,   828,\n-     829,   733,   734,   781,   527,   781,   830,   491,   492,   528,\n-     782,   783,   805,   816,   832,   500,   781,   822,   833,   781,\n-      58,   167,   227,   417,   781,   823,   836,   781,   501,   529,\n-     500,   407,   689,   690,   690,   672,   673,   721,   214,   667,\n-     219,    37,   219,   369,   735,   219,   291,   736,   721,   736,\n-     219,   735,   500,   219,   736,   219,   144,   194,   723,   219,\n-     690,   500,   529,   500,   690,   289,   569,   902,   908,   910,\n-     825,   751,   827,    40,   230,   528,   500,   498,   653,   781,\n-     842,   500,   653,   508,   781,   500,   500,   781,   781,   781,\n-     144,   854,   855,   781,   823,   824,   653,   781,   822,     9,\n-     534,   529,   806,   807,   808,   502,   531,   845,   531,   500,\n-     530,   500,   530,   867,     3,     8,    11,    15,    16,    17,\n-      18,    19,    20,    21,    36,    40,    46,    53,    78,   172,\n-     188,   193,   216,   217,   231,   267,   270,   284,   287,   380,\n-     484,   487,   488,   489,   491,   492,   493,   494,   495,   496,\n-     814,   815,   816,   818,   848,   463,   791,   293,   781,   504,\n-     667,   500,   530,   667,     3,   113,   235,   530,   569,   770,\n-     909,   102,   113,   910,   113,   910,   528,    40,   528,   501,\n-     504,   895,   504,   501,   666,   861,   862,    40,   919,   187,\n-     343,   214,   375,   655,   655,    30,   677,   678,   781,    59,\n-     655,   671,   159,   264,   697,   221,   265,   329,   378,   439,\n-       4,     9,    30,   692,   781,   491,   492,   693,   694,   781,\n-     783,   709,   710,   684,   683,   681,   682,   162,   712,   277,\n-     714,    59,   661,   662,   663,   724,   782,   852,   852,   681,\n-     709,   823,   873,   230,   527,    72,    80,    91,   164,   186,\n-     319,   433,   528,   593,   603,   618,    80,    91,   536,    91,\n-     536,   500,   416,   500,   591,   239,   436,   591,    91,   504,\n-     416,   527,   753,   569,    59,   571,   569,   569,   104,   245,\n-     253,    59,   416,   462,   486,   568,   258,   361,   568,   570,\n-     738,    91,   416,   536,   361,   527,   416,   361,   528,   642,\n-     499,   510,   825,   825,   826,   504,   675,   676,    13,    14,\n-     416,   528,   610,   615,   462,   645,   527,   333,   370,   405,\n-     454,   632,   148,    98,   562,   576,   881,   882,   936,   140,\n-     751,   527,   267,   563,   567,   267,   500,   611,    40,   267,\n-     611,   267,   500,   633,   186,   528,   605,   886,     3,   500,\n-     824,   867,   630,   827,   768,   768,    39,   752,   414,   414,\n-     867,   867,   528,   748,   751,   748,   498,   498,   867,   867,\n-     416,   416,   416,   416,   627,   533,   502,   871,   861,   864,\n-     864,   871,   501,   897,   903,     4,   867,     4,   867,   530,\n-     534,   644,   651,    55,   100,   119,   137,   141,   163,   166,\n-     181,   272,   280,   301,   327,   648,    40,   501,   781,   501,\n-     167,   504,   501,   308,   831,   501,   782,   782,    11,    15,\n-      16,    19,    20,    21,   193,   216,   284,   487,   488,   489,\n-     491,   492,   493,   494,   495,   496,   816,   782,   501,   740,\n-     741,   788,   162,   167,   834,   835,   504,   501,    40,   836,\n-     823,   836,   836,   167,   501,    40,   732,   500,   862,     4,\n-       9,   528,   685,   687,   688,   852,   850,   173,   235,   405,\n-     409,   411,   436,   527,   668,   459,   744,   721,   721,   219,\n-     721,   282,   442,   737,   721,   219,   852,   721,   721,   274,\n-     274,   500,   721,   529,   745,   746,   500,   529,   745,   504,\n-     501,   504,   501,   504,   537,   634,   635,   652,   878,   918,\n-     823,   824,   458,   839,   840,   781,   781,   809,   810,   811,\n-     812,     8,    15,    16,    19,    20,    21,   487,   488,   489,\n-     491,   492,   493,   494,   495,   496,   528,   814,   819,   501,\n-     823,   500,   528,   343,   859,   162,   499,   501,   504,   510,\n-     504,   509,   493,   532,   823,   781,   780,   780,   751,   781,\n-     781,   781,   781,   781,   781,   781,   781,     5,   534,   875,\n-     414,    45,   402,   849,   871,   781,   781,   500,   653,   837,\n-     128,   155,   267,   272,   277,   423,   434,   781,   272,   500,\n-     781,   416,    53,   172,   188,   193,   231,   380,   781,   781,\n-     781,   781,   781,   781,   781,   781,   781,   781,    30,    38,\n-     385,   813,   498,   502,   847,   176,   158,   792,   356,   500,\n-     805,   853,   167,   718,   825,   718,   500,   530,   528,   527,\n-     914,   527,   922,   781,   504,   501,   500,   442,   921,   527,\n-     539,   500,   528,   544,   554,   555,   557,    41,   122,   679,\n-     504,   442,   679,   258,   655,   356,   357,   491,   492,   694,\n-     696,   783,   378,   221,   283,   304,   304,   504,   495,     4,\n-     695,   867,   695,   356,   357,   696,   527,   860,   271,   382,\n-     715,   500,   862,   863,   504,   176,   442,   193,   176,   214,\n-     710,   682,   501,   341,   523,   500,   186,   603,   864,   221,\n-     267,   221,   442,   500,   596,   750,   751,   864,   528,   186,\n-     864,   186,   528,    26,   133,   375,   519,   522,   534,   587,\n-     601,   864,   534,   595,   614,   864,   520,   864,   341,   375,\n-     523,   567,   569,   871,   864,   569,   871,   864,   569,   341,\n-     375,   523,   864,   864,   864,   864,   341,   375,   523,   864,\n-     864,   781,   844,   675,   675,   675,   450,   826,   187,   346,\n-     674,   781,   781,   324,   641,   501,   504,   280,   167,   416,\n-     636,   880,   454,   527,   527,   940,   527,   527,   527,   287,\n-     622,   500,   653,   500,   148,   148,   231,   528,   593,   603,\n-     606,   609,   619,   621,   462,   464,   598,   147,   652,   148,\n-     462,   887,   148,   501,   825,    40,   267,   282,   823,   501,\n-     501,   628,   501,   498,   483,   483,   501,   501,   751,   501,\n-     504,   501,   867,   499,   867,   501,   501,   773,   775,   776,\n-     777,   776,   777,   777,   628,   533,   628,   282,   628,   642,\n-     493,   500,   569,   643,   902,   501,   504,    40,   640,   530,\n-     640,   267,   272,   327,   640,    59,   640,   751,   501,   781,\n-     781,   781,   834,   751,   782,   782,   782,   782,   782,   782,\n-     128,   267,   277,   782,   782,   782,   782,   782,   782,   782,\n-     782,   782,   782,   501,   504,    40,   742,   781,   781,   835,\n-     834,   751,   501,   501,   501,   823,   751,   862,   501,   304,\n-     495,   304,   357,   495,   500,   500,   667,   409,   411,   409,\n-     411,   527,   669,   669,   669,   781,   176,   698,   737,   737,\n-     721,   781,   500,   721,   162,   737,   500,   529,   728,   737,\n-     751,   501,   504,   745,   501,   908,   751,   501,   499,   781,\n-     135,   840,   841,   501,   510,   504,   509,   502,   501,   501,\n-     862,   500,   781,   856,   528,   781,   781,   806,   855,   501,\n-     501,   483,   782,   782,   141,   823,   167,   128,   155,   272,\n-     277,   423,   434,   500,   141,   819,   781,   402,   849,   781,\n-     837,   781,   416,   500,   653,   781,   844,   533,   500,   500,\n-     151,   793,   719,   720,   744,   675,   744,   867,   780,   873,\n-     873,   878,   720,   459,   920,    40,    59,   540,   550,   557,\n-     845,   504,   718,   489,   485,   680,   678,   284,   814,   817,\n-     680,     4,   867,   696,   283,   439,   693,   504,   238,   862,\n-     661,    59,   852,   500,   529,    59,   258,   416,   781,   267,\n-     618,   500,   148,   500,   596,   197,   615,   616,   577,    40,\n-     171,   586,   612,   577,    26,   133,   345,   347,   375,   516,\n-     517,   518,   524,   525,   148,   628,   148,   628,   587,   601,\n-     587,   501,   504,   530,   580,   489,   502,   501,   504,   416,\n-     361,    91,   416,   536,   361,   416,   416,   416,   361,   499,\n-     674,   674,   674,   826,   274,   274,   501,   392,   393,   530,\n-     650,   610,   641,   527,   563,   500,    40,   611,   633,   880,\n-     343,   405,   530,   559,   560,   615,   527,   527,   940,   527,\n-     501,   504,   280,   591,   280,   282,   590,   864,   462,   939,\n-     527,   591,    40,   527,   501,   405,   781,   148,   527,   501,\n-     752,   867,   771,   771,   752,   528,   752,   499,   499,   871,\n-     638,   649,   902,   644,   530,   530,   272,   615,   493,   615,\n-     530,   493,   615,   530,   501,   501,   835,   167,   128,   277,\n-     500,   743,   740,   500,   501,   501,   501,   528,   685,   744,\n-     669,   669,   669,   669,   527,   527,   527,    59,   180,   707,\n-     737,   862,   500,   725,   726,   727,   784,   865,   862,   162,\n-      78,   747,   746,   501,   413,   781,   139,   781,   809,   819,\n-     501,   781,   856,   857,   858,    40,   193,   501,   859,   780,\n-     781,    36,    36,   781,   501,   781,   167,   500,   827,   781,\n-     501,   141,   782,   782,   141,   141,   781,   781,   499,   510,\n-     500,   846,   676,   459,   781,   292,   797,   504,   698,   674,\n-     698,   501,   501,   781,   349,   548,   528,   258,   311,   113,\n-     295,   500,   538,   652,   501,   504,   544,   920,   781,   159,\n-     225,   500,   680,   283,   527,   501,   863,   176,   653,   654,\n-     852,   863,   864,   864,   501,   148,   616,   603,   616,   577,\n-     605,   504,   501,   115,   201,   265,   267,   602,   500,    33,\n-      59,   623,   612,    72,    78,    91,   113,   115,   201,   267,\n-     272,   319,   335,   433,   442,   582,   583,   597,   171,   113,\n-     185,   267,   591,   568,   105,   113,   171,   267,   391,   394,\n-     570,   591,   375,   518,   427,   864,   528,   522,     3,    37,\n-      42,    49,    55,    79,    81,    87,    99,   166,   168,   171,\n-     172,   188,   203,   216,   217,   219,   229,   231,   241,   261,\n-     266,   270,   284,   291,   293,   312,   352,   369,   376,   380,\n-     398,   407,   426,   432,   452,   491,   492,   530,   569,   578,\n-     617,   751,   817,   868,   941,   947,   534,   614,   864,   864,\n-     864,   864,   864,   864,   864,   864,   864,   864,   501,   501,\n-     501,   675,   568,   650,   500,   609,   652,   887,    40,   622,\n-     186,   527,   501,   504,   501,   563,   500,    40,   600,   598,\n-     606,    84,   565,   105,   265,   611,   652,   633,   652,   605,\n-     442,   884,   499,   751,   628,   501,   504,   615,   782,   167,\n-     500,   827,   745,   501,   504,   501,   698,   527,   527,   527,\n-     527,    30,   101,   177,   355,   500,   699,   700,   701,   702,\n-     703,   704,   705,   781,   781,   461,   794,   501,   783,   820,\n-     821,   193,   176,   722,   726,   500,   501,   728,   729,   730,\n-     871,   781,   504,   501,   528,   781,   783,   781,   781,   781,\n-     827,   501,   781,    36,    36,   781,   781,   141,   501,   844,\n-     501,   825,   501,   781,   501,   500,   528,   798,   707,   501,\n-     707,   530,   851,   448,   404,   441,   549,   528,   543,   553,\n-     282,   546,   489,   557,   548,   819,    59,   501,   501,   447,\n-     448,   658,   577,   603,   501,   501,   462,   608,   116,   189,\n-     199,   115,   444,   781,   113,    40,   500,   871,   864,   782,\n-     116,   189,   115,   272,   221,   527,   608,    86,   623,   186,\n-     272,   569,   781,   623,   272,   491,   492,   572,   528,   751,\n-     628,   628,   241,   398,   868,   872,   489,   416,   416,   674,\n-     642,   442,   637,   639,   615,   501,   939,    40,   405,   781,\n-     405,   267,   500,   530,   887,   609,   147,   652,   145,   195,\n-     590,   118,   133,   318,   939,   105,   887,   462,   937,    40,\n-     282,   528,   883,   500,   649,   782,   827,   501,   501,     9,\n-     342,   691,   707,   500,   377,   500,   501,   504,   528,   795,\n-     796,   326,   708,   504,   501,   500,   529,    59,   501,   825,\n-     193,   501,   729,   856,   499,   186,   501,   781,   781,   781,\n-     499,   501,   501,   528,   799,   794,   530,   794,   504,   447,\n-     845,   501,   504,    89,   548,   781,   501,   863,   863,   335,\n-     608,   500,   599,   577,   501,   185,   500,   781,   267,   583,\n-     608,   611,   864,    40,   148,   747,   872,   495,   578,   864,\n-     864,   501,   568,   120,   501,   598,   652,   652,   527,   148,\n-      40,   501,   864,   939,    30,    83,    92,   114,   185,   198,\n-     391,   394,   594,   594,   357,   357,    40,    64,    72,   235,\n-     405,   781,   527,   500,   528,   547,   556,   788,   501,   501,\n-     500,   794,   823,   500,   823,   701,    40,   504,   781,   442,\n-     686,   783,   852,   862,   733,   675,   500,   733,   781,   301,\n-     800,   708,   708,   652,   295,   652,   543,   282,   500,   541,\n-     527,   577,   534,   604,   607,   395,   456,   584,   585,   500,\n-     579,   781,   501,   243,   620,   185,   442,   521,   495,   427,\n-     642,   530,   887,   590,   937,   500,   527,   652,   598,   565,\n-     652,    72,   285,    72,   652,   884,   781,    78,   551,   501,\n-     504,   551,     9,   708,   501,   700,   501,   798,   796,   359,\n-     501,   674,   852,   499,    59,   675,   686,   686,   549,    91,\n-     556,   129,   611,   489,   501,   504,   567,   501,   265,   592,\n-     168,   300,   381,   282,   588,   589,   613,   579,   781,   427,\n-      40,   500,   937,   590,   939,   937,   285,   285,   500,   501,\n-     871,   552,   871,   887,   547,   552,   501,   686,   501,   688,\n-     501,   501,   822,   328,   357,   801,   447,   864,   501,   268,\n-     439,   620,   578,   607,   501,   585,   199,   118,   439,   282,\n-     613,   282,   588,   652,   556,   551,   679,   744,   679,    53,\n-     102,   429,   781,   802,   803,   802,   501,   652,   744,   375,\n-     589,    63,   265,   348,   375,   581,   581,   937,   501,   552,\n-     680,   680,   803,   356,   161,   314,   161,   314,   555,   577,\n-      25,   113,   272,   887,   679,    36,   744,   744,   680,   803\n+     420,   422,   426,   448,   500,   527,   528,   529,   653,   718,\n+     720,   722,   732,   739,   740,   788,   790,   791,   106,     5,\n+     528,   530,   914,   914,   528,   866,    30,   173,   235,   374,\n+     414,   418,   528,   930,   931,   935,   574,    30,   128,   673,\n+     674,   173,   235,   361,   374,   414,   908,   909,   935,   574,\n+     528,   652,   664,   936,   528,   739,   405,   670,   527,   168,\n+     500,   917,   500,   333,   665,   666,   866,   665,   653,   654,\n+       0,   503,   118,   207,   439,   143,   212,   288,   432,   676,\n+     677,   722,   722,   653,   655,   657,   504,   452,   897,    30,\n+     414,   418,   652,   936,   186,   527,   866,   186,   527,   186,\n+     739,   186,   527,   530,   498,   502,   531,   532,   500,   652,\n+     527,   409,   411,   409,   411,   343,   186,   527,   527,   169,\n+     240,   333,   370,   405,   454,   632,   197,    30,   866,   186,\n+       3,   246,   421,   105,   405,   405,   454,   364,     3,    37,\n+      42,    49,    54,    55,    56,    57,    69,    70,    79,    81,\n+      87,    99,   110,   111,   132,   160,   166,   168,   172,   186,\n+     188,   203,   210,   211,   213,   216,   217,   219,   229,   231,\n+     241,   260,   261,   262,   270,   275,   291,   293,   312,   330,\n+     352,   356,   369,   376,   380,   383,   398,   407,   414,   415,\n+     426,   432,   449,   452,   630,   750,   752,   754,   756,   758,\n+     760,   762,   763,   764,   766,   767,   768,   770,   771,   872,\n+     943,   946,   186,   528,   627,   873,   186,   863,   866,   186,\n+     866,   500,   565,   899,     3,    37,    42,    49,    53,    54,\n+      55,    56,    57,    69,    70,    77,    79,    81,    87,    99,\n+     110,   111,   148,   154,   160,   166,   168,   171,   172,   177,\n+     178,   188,   203,   204,   210,   211,   213,   216,   217,   219,\n+     229,   231,   241,   260,   261,   262,   266,   270,   273,   275,\n+     290,   291,   293,   294,   311,   312,   315,   330,   352,   356,\n+     369,   376,   380,   383,   398,   400,   407,   414,   415,   420,\n+     422,   426,   448,   449,   452,   469,   470,   471,   472,   473,\n+     474,   475,   476,   477,   478,   479,   900,   902,   903,   905,\n+     906,   943,   947,   897,   528,   530,   893,   914,   500,   500,\n+     162,   500,   653,   740,   500,   500,   527,   500,   500,   167,\n+     500,   500,   500,   500,   653,   718,   722,   732,   493,   531,\n+      40,   528,   733,   734,   733,   368,   504,   656,    37,    42,\n+      99,   168,   203,   219,   229,   261,   305,   312,   352,   369,\n+     437,   736,   734,    40,   528,   733,   735,   486,   744,   530,\n+     489,   500,   500,   879,   931,   931,   931,   483,   218,   502,\n+     282,     4,     6,     7,     8,     9,    10,    39,    54,    56,\n+      57,    65,    69,    70,    81,   110,   111,   113,   148,   155,\n+     160,   177,   178,   210,   211,   213,   241,   260,   262,   267,\n+     272,   275,   284,   330,   356,   383,   414,   415,   423,   449,\n+     484,   491,   492,   493,   498,   500,   505,   506,   507,   508,\n+     528,   530,   653,   707,   755,   758,   761,   762,   763,   765,\n+     766,   767,   770,   771,   782,   784,   785,   786,   787,   788,\n+     789,   791,   792,   806,   807,   818,   840,   845,   853,   854,\n+     855,   867,   868,   869,   852,   854,   908,   908,   530,   908,\n+     483,   167,   416,   489,   502,   531,   739,   921,     3,   166,\n+     168,   452,   903,   916,   918,   166,   919,   782,   824,   825,\n+     665,   504,   500,   875,   501,   501,   514,   167,   287,   545,\n+     921,    30,   128,   671,   671,    59,   671,   157,   162,   232,\n+     279,   682,   684,   685,   710,   712,   713,   714,   176,   282,\n+     442,   282,   676,   677,   500,   527,   406,   934,   483,   218,\n+     148,    26,    32,   133,   286,   341,   345,   375,   445,   520,\n+     523,   524,   341,   148,    40,    60,   104,   196,   245,   253,\n+     265,   296,   341,   347,   370,   375,   389,   523,   567,   570,\n+     148,   341,   375,   523,   148,   341,   375,   523,    40,   928,\n+     782,   846,     3,    30,    34,    35,    36,    38,    39,    40,\n+      41,    45,    58,    65,    66,    72,    78,    80,    91,    98,\n+     113,   115,   122,   128,   129,   135,   139,   143,   155,   157,\n+     162,   164,   167,   174,   176,   180,   193,   201,   212,   214,\n+     226,   227,   232,   267,   272,   279,   282,   283,   287,   288,\n+     305,   306,   307,   308,   319,   326,   335,   349,   368,   385,\n+     402,   405,   413,   416,   417,   423,   432,   433,   437,   442,\n+     448,   450,   458,   459,   461,   462,   533,   534,   943,   947,\n+     949,   532,     3,    30,    37,    42,    49,    55,    79,    81,\n+      87,    99,   128,   166,   168,   171,   172,   188,   203,   216,\n+     217,   219,   229,   231,   241,   261,   270,   291,   293,   312,\n+     352,   369,   380,   398,   407,   426,   450,   452,   501,   782,\n+     827,   828,   870,   876,   943,   948,   501,   500,   611,   361,\n+     622,   267,   882,    40,   454,   186,   527,   186,   527,   942,\n+     186,   527,   186,   527,    87,   887,   148,   466,    88,   125,\n+     299,   410,   451,   769,   769,   769,   500,   757,   757,   315,\n+     500,   759,   148,   500,    69,    70,   769,   757,   754,   464,\n+     486,   500,   772,   500,   772,   500,    63,   348,   504,   628,\n+     500,    39,   753,   500,   107,   108,   183,   184,   247,   248,\n+     249,   250,   251,   252,   255,   256,   365,   366,   480,   481,\n+     500,   773,   774,   775,   776,   777,   778,   779,   780,   781,\n+     757,   148,   502,   874,   504,   628,   148,   504,   628,   148,\n+     282,   825,   501,   504,     4,   155,   282,   423,   491,   492,\n+     530,   569,   572,   869,   898,   900,   901,   904,   899,   416,\n+     500,   642,   646,   782,   825,   500,     3,   530,   773,   774,\n+     775,   776,   777,   778,   779,   780,   830,   831,   734,   735,\n+     782,   527,   782,   832,   491,   492,   528,   783,   784,   807,\n+     818,   834,   500,   782,   824,   835,   782,    58,   167,   227,\n+     417,   782,   825,   838,   782,   501,   529,   500,   407,   690,\n+     691,   691,   673,   674,   722,   214,   668,   219,    37,   219,\n+     369,   736,   219,   291,   737,   722,   737,   219,   736,   500,\n+     219,   737,   219,   144,   194,   724,   219,   691,   500,   529,\n+     500,   691,   289,   569,   904,   910,   912,   827,   752,   829,\n+      40,   230,   528,   500,   498,   653,   782,   844,   500,   653,\n+     508,   782,   500,   500,   782,   782,   782,   144,   856,   857,\n+     782,   825,   826,   653,   782,   824,     9,   534,   529,   808,\n+     809,   810,   502,   531,   847,   531,   500,   530,   500,   530,\n+     869,     3,     8,    11,    15,    16,    17,    18,    19,    20,\n+      21,    36,    40,    46,    53,    78,   172,   188,   193,   216,\n+     217,   231,   267,   270,   284,   287,   380,   484,   487,   488,\n+     489,   491,   492,   493,   494,   495,   496,   816,   817,   818,\n+     820,   850,   463,   793,   293,   782,   504,   668,   500,   530,\n+     668,     3,   113,   235,   530,   569,   771,   911,   102,   113,\n+     912,   113,   912,   528,    40,   528,   501,   504,   897,   504,\n+     501,   666,   863,   864,    40,   921,   187,   343,   214,   375,\n+     655,   655,    30,   678,   679,   782,    59,   655,   672,   159,\n+     264,   698,   221,   265,   329,   378,   439,     4,     9,    30,\n+     693,   782,   491,   492,   694,   695,   782,   784,   710,   711,\n+     685,   684,   682,   683,   162,   713,   277,   715,    59,   661,\n+     662,   663,   725,   783,   854,   854,   682,   710,   825,   875,\n+     230,   527,    72,    80,    91,   164,   186,   319,   433,   528,\n+     593,   603,   618,    80,    91,   536,    91,   536,   500,   416,\n+     500,   591,   239,   436,   591,    91,   504,   416,   527,   754,\n+     569,    59,   571,   569,   569,   104,   245,   253,    59,   416,\n+     462,   486,   568,   258,   361,   568,   570,   739,    91,   416,\n+     536,   361,   527,   416,   361,   528,   642,   499,   510,   827,\n+     827,   828,   504,   676,   677,    13,    14,   416,   528,   610,\n+     615,   462,   645,   527,   333,   370,   405,   454,   632,   148,\n+      98,   562,   576,   883,   884,   938,   140,   752,   527,   267,\n+     563,   567,   267,   500,   611,    40,   267,   611,   267,   500,\n+     633,   186,   528,   605,   888,     3,   500,   826,   869,   630,\n+     829,   769,   769,    39,   753,   414,   414,   869,   869,   528,\n+     749,   752,   749,   498,   498,   869,   869,   416,   416,   416,\n+     416,   627,   533,   502,   873,   863,   866,   866,   873,   501,\n+     899,   905,     4,   869,     4,   869,   530,   534,   644,   651,\n+      55,   100,   119,   137,   141,   163,   166,   181,   272,   280,\n+     301,   327,   648,    40,   501,   782,   501,   167,   504,   501,\n+     308,   833,   501,   783,   783,    11,    15,    16,    19,    20,\n+      21,   193,   216,   284,   487,   488,   489,   491,   492,   493,\n+     494,   495,   496,   818,   783,   501,   741,   742,   790,   162,\n+     167,   836,   837,   504,   501,    40,   838,   825,   838,   838,\n+     167,   501,    40,   733,   500,   864,     4,     9,   528,   686,\n+     688,   689,   854,   852,   173,   235,   405,   409,   411,   436,\n+     527,   669,   459,   745,   722,   722,   219,   722,   282,   442,\n+     738,   722,   219,   854,   722,   722,   274,   274,   500,   722,\n+     529,   746,   747,   500,   529,   746,   504,   501,   504,   501,\n+     504,   537,   634,   635,   652,   880,   920,   825,   826,   458,\n+     841,   842,   782,   782,   811,   812,   813,   814,     8,    15,\n+      16,    19,    20,    21,   487,   488,   489,   491,   492,   493,\n+     494,   495,   496,   528,   816,   821,   501,   825,   500,   528,\n+     343,   861,   162,   499,   501,   504,   510,   504,   509,   493,\n+     532,   825,   782,   781,   781,   752,   782,   782,   782,   782,\n+     782,   782,   782,   782,     5,   534,   877,   414,    45,   402,\n+     851,   873,   782,   782,   500,   653,   839,   128,   155,   267,\n+     272,   277,   423,   434,   782,   272,   500,   782,   416,    53,\n+     172,   188,   193,   231,   380,   782,   782,   782,   782,   782,\n+     782,   782,   782,   782,   782,    30,    38,   385,   815,   498,\n+     502,   849,   176,   158,   794,   356,   500,   807,   855,   167,\n+     719,   827,   719,   500,   530,   528,   527,   916,   527,   924,\n+     782,   504,   501,   244,   267,   667,   442,   923,   527,   539,\n+     500,   528,   544,   554,   555,   557,    41,   122,   680,   504,\n+     442,   680,   258,   655,   356,   357,   491,   492,   695,   697,\n+     784,   378,   221,   283,   304,   304,   504,   495,     4,   696,\n+     869,   696,   356,   357,   697,   527,   862,   271,   382,   716,\n+     500,   864,   865,   504,   176,   442,   193,   176,   214,   711,\n+     683,   501,   341,   523,   500,   186,   603,   866,   221,   267,\n+     221,   442,   500,   596,   751,   752,   866,   528,   186,   866,\n+     186,   528,    26,   133,   375,   519,   522,   534,   587,   601,\n+     866,   534,   595,   614,   866,   520,   866,   341,   375,   523,\n+     567,   569,   873,   866,   569,   873,   866,   569,   341,   375,\n+     523,   866,   866,   866,   866,   341,   375,   523,   866,   866,\n+     782,   846,   676,   676,   676,   450,   828,   187,   346,   675,\n+     782,   782,   324,   641,   501,   504,   280,   167,   416,   636,\n+     882,   454,   527,   527,   942,   527,   527,   527,   287,   622,\n+     500,   653,   500,   148,   148,   231,   528,   593,   603,   606,\n+     609,   619,   621,   462,   464,   598,   147,   652,   148,   462,\n+     889,   148,   501,   827,    40,   267,   282,   825,   501,   501,\n+     628,   501,   498,   483,   483,   501,   501,   752,   501,   504,\n+     501,   869,   499,   869,   501,   501,   774,   776,   777,   778,\n+     777,   778,   778,   628,   533,   628,   282,   628,   642,   493,\n+     500,   569,   643,   787,   904,   501,   504,    40,   640,   530,\n+     640,   267,   272,   327,   640,    59,   640,   752,   501,   782,\n+     782,   782,   836,   752,   783,   783,   783,   783,   783,   783,\n+     128,   267,   277,   783,   783,   783,   783,   783,   783,   783,\n+     783,   783,   783,   501,   504,    40,   743,   782,   782,   837,\n+     836,   752,   501,   501,   501,   825,   752,   864,   501,   304,\n+     495,   304,   357,   495,   500,   500,   668,   409,   411,   409,\n+     411,   527,   670,   670,   670,   782,   176,   699,   738,   738,\n+     722,   782,   500,   722,   162,   738,   500,   529,   729,   738,\n+     752,   501,   504,   746,   501,   910,   752,   501,   499,   782,\n+     135,   842,   843,   501,   510,   504,   509,   502,   501,   501,\n+     864,   500,   782,   858,   528,   782,   782,   808,   857,   501,\n+     501,   483,   783,   783,   141,   825,   167,   128,   155,   272,\n+     277,   423,   434,   500,   141,   821,   782,   402,   851,   782,\n+     839,   782,   416,   500,   653,   782,   846,   533,   500,   500,\n+     151,   795,   720,   721,   745,   676,   745,   869,   781,   875,\n+     875,   244,   500,   721,   459,   922,    40,    59,   540,   550,\n+     557,   847,   504,   719,   489,   485,   681,   679,   284,   816,\n+     819,   681,     4,   869,   697,   283,   439,   694,   504,   238,\n+     864,   661,    59,   854,   500,   529,    59,   258,   416,   782,\n+     267,   618,   500,   148,   500,   596,   197,   615,   616,   577,\n+      40,   171,   586,   612,   577,    26,   133,   345,   347,   375,\n+     516,   517,   518,   524,   525,   148,   628,   148,   628,   587,\n+     601,   587,   501,   504,   530,   580,   489,   502,   501,   504,\n+     416,   361,    91,   416,   536,   361,   416,   416,   416,   361,\n+     499,   675,   675,   675,   828,   274,   274,   501,   392,   393,\n+     530,   650,   610,   641,   527,   563,   500,    40,   611,   633,\n+     882,   343,   405,   530,   559,   560,   615,   527,   527,   942,\n+     527,   501,   504,   280,   591,   280,   282,   590,   866,   462,\n+     941,   527,   591,    40,   527,   501,   405,   782,   148,   527,\n+     501,   753,   869,   772,   772,   753,   528,   753,   499,   499,\n+     873,   638,   649,   904,   644,   530,   530,   272,   615,   493,\n+     615,   530,   493,   615,   530,   501,   501,   837,   167,   128,\n+     277,   500,   744,   741,   500,   501,   501,   501,   528,   686,\n+     745,   670,   670,   670,   670,   527,   527,   527,    59,   180,\n+     708,   738,   864,   500,   726,   727,   728,   785,   867,   864,\n+     162,    78,   748,   747,   501,   413,   782,   139,   782,   811,\n+     821,   501,   782,   858,   859,   860,    40,   193,   501,   861,\n+     781,   782,    36,    36,   782,   501,   782,   167,   500,   829,\n+     782,   501,   141,   783,   783,   141,   141,   782,   782,   499,\n+     510,   500,   848,   677,   459,   782,   292,   799,   504,   699,\n+     675,   699,   501,   880,   782,   349,   548,   528,   258,   311,\n+     113,   295,   500,   538,   652,   501,   504,   544,   922,   782,\n+     159,   225,   500,   681,   283,   527,   501,   865,   176,   653,\n+     654,   854,   865,   866,   866,   501,   148,   616,   603,   616,\n+     577,   605,   504,   501,   115,   201,   265,   267,   602,   500,\n+      33,    59,   623,   612,    72,    78,    91,   113,   115,   201,\n+     267,   272,   319,   335,   433,   442,   582,   583,   597,   171,\n+     113,   185,   267,   591,   568,   105,   113,   171,   267,   391,\n+     394,   570,   591,   375,   518,   427,   866,   528,   522,     3,\n+      37,    42,    49,    55,    79,    81,    87,    99,   166,   168,\n+     171,   172,   188,   203,   216,   217,   219,   229,   231,   241,\n+     261,   266,   270,   284,   291,   293,   312,   352,   369,   376,\n+     380,   398,   407,   426,   432,   452,   491,   492,   530,   569,\n+     578,   617,   752,   819,   870,   943,   949,   534,   614,   866,\n+     866,   866,   866,   866,   866,   866,   866,   866,   866,   501,\n+     501,   501,   676,   568,   650,   500,   609,   652,   889,    40,\n+     622,   186,   527,   501,   504,   501,   563,   500,    40,   600,\n+     598,   606,    84,   565,   105,   265,   611,   652,   633,   652,\n+     605,   442,   886,   499,   752,   628,   501,   504,   615,   783,\n+     167,   500,   829,   746,   501,   504,   501,   699,   527,   527,\n+     527,   527,    30,   101,   177,   355,   500,   700,   701,   702,\n+     703,   704,   705,   706,   782,   782,   461,   796,   501,   784,\n+     822,   823,   193,   176,   723,   727,   500,   501,   729,   730,\n+     731,   873,   782,   504,   501,   528,   782,   784,   782,   782,\n+     782,   829,   501,   782,    36,    36,   782,   782,   141,   501,\n+     846,   501,   827,   501,   782,   501,   500,   528,   800,   708,\n+     501,   708,   530,   501,   853,   448,   404,   441,   549,   528,\n+     543,   553,   282,   546,   489,   557,   548,   821,    59,   501,\n+     501,   447,   448,   658,   577,   603,   501,   501,   462,   608,\n+     116,   189,   199,   115,   444,   782,   113,    40,   500,   873,\n+     866,   783,   116,   189,   115,   272,   221,   527,   608,    86,\n+     623,   186,   272,   569,   782,   623,   272,   491,   492,   572,\n+     528,   752,   628,   628,   241,   398,   870,   874,   489,   416,\n+     416,   675,   642,   442,   637,   639,   615,   501,   941,    40,\n+     405,   782,   405,   267,   500,   530,   889,   609,   147,   652,\n+     145,   195,   590,   118,   133,   318,   941,   105,   889,   462,\n+     939,    40,   282,   528,   885,   500,   649,   783,   829,   501,\n+     501,     9,   342,   692,   708,   500,   377,   500,   501,   504,\n+     528,   797,   798,   326,   709,   504,   501,   500,   529,    59,\n+     501,   827,   193,   501,   730,   858,   499,   186,   501,   782,\n+     782,   782,   499,   501,   501,   528,   801,   796,   530,   796,\n+     504,   447,   847,   501,   504,    89,   548,   782,   501,   865,\n+     865,   335,   608,   500,   599,   577,   501,   185,   500,   782,\n+     267,   583,   608,   611,   866,    40,   148,   748,   874,   495,\n+     578,   866,   866,   501,   568,   120,   501,   598,   652,   652,\n+     527,   148,    40,   501,   866,   941,    30,    83,    92,   114,\n+     185,   198,   391,   394,   594,   594,   357,   357,    40,    64,\n+      72,   235,   405,   782,   527,   500,   528,   547,   556,   790,\n+     501,   501,   500,   796,   825,   500,   825,   702,    40,   504,\n+     782,   442,   687,   784,   854,   864,   734,   676,   500,   734,\n+     782,   301,   802,   709,   709,   652,   295,   652,   543,   282,\n+     500,   541,   527,   577,   534,   604,   607,   395,   456,   584,\n+     585,   500,   579,   782,   501,   243,   620,   185,   442,   521,\n+     495,   427,   642,   530,   889,   590,   939,   500,   527,   652,\n+     598,   565,   652,    72,   285,    72,   652,   886,   782,    78,\n+     551,   501,   504,   551,     9,   709,   501,   701,   501,   800,\n+     798,   359,   501,   675,   854,   499,    59,   676,   687,   687,\n+     549,    91,   556,   129,   611,   489,   501,   504,   567,   501,\n+     265,   592,   168,   300,   381,   282,   588,   589,   613,   579,\n+     782,   427,    40,   500,   939,   590,   941,   939,   285,   285,\n+     500,   501,   873,   552,   873,   889,   547,   552,   501,   687,\n+     501,   689,   501,   501,   824,   328,   357,   803,   447,   866,\n+     501,   268,   439,   620,   578,   607,   501,   585,   199,   118,\n+     439,   282,   613,   282,   588,   652,   556,   551,   680,   745,\n+     680,    53,   102,   429,   782,   804,   805,   804,   501,   652,\n+     745,   375,   589,    63,   265,   348,   375,   581,   581,   939,\n+     501,   552,   681,   681,   805,   356,   161,   314,   161,   314,\n+     555,   577,    25,   113,   272,   889,   680,    36,   745,   745,\n+     681,   805\n };\n \n #define yyerrok\t\t(yyerrstatus = 0)\n@@ -18634,14 +18737,14 @@ YYLTYPE yylloc;\n   switch (yyn)\n     {\n         case 2:\n-#line 490 \"third_party/libpg_query/grammar/grammar.y\"\n+#line 491 \"third_party/libpg_query/grammar/grammar.y\"\n     {\n \t\t\t\tpg_yyget_extra(yyscanner)->parsetree = (yyvsp[(1) - (1)].list);\n \t\t\t;}\n     break;\n \n   case 3:\n-#line 506 \"third_party/libpg_query/grammar/grammar.y\"\n+#line 507 \"third_party/libpg_query/grammar/grammar.y\"\n     {\n \t\t\t\t\tif ((yyvsp[(1) - (3)].list) != NIL)\n \t\t\t\t\t{\n@@ -18656,7 +18759,7 @@ YYLTYPE yylloc;\n     break;\n \n   case 4:\n-#line 518 \"third_party/libpg_query/grammar/grammar.y\"\n+#line 519 \"third_party/libpg_query/grammar/grammar.y\"\n     {\n \t\t\t\t\tif ((yyvsp[(1) - (1)].node) != NULL)\n \t\t\t\t\t\t(yyval.list) = list_make1(makeRawStmt((yyvsp[(1) - (1)].node), 0));\n@@ -18666,7 +18769,7 @@ YYLTYPE yylloc;\n     break;\n \n   case 42:\n-#line 564 \"third_party/libpg_query/grammar/grammar.y\"\n+#line 565 \"third_party/libpg_query/grammar/grammar.y\"\n     { (yyval.node) = NULL; ;}\n     break;\n \n@@ -22003,175 +22106,175 @@ YYLTYPE yylloc;\n \n   case 455:\n #line 106 \"third_party/libpg_query/grammar/statements/copy.y\"\n-    { (yyval.node) = NULL; ;}\n+    { (yyval.node) = (PGNode *) (yyvsp[(1) - (1)].node); ;}\n     break;\n \n   case 456:\n-#line 112 \"third_party/libpg_query/grammar/statements/copy.y\"\n+#line 107 \"third_party/libpg_query/grammar/statements/copy.y\"\n+    { (yyval.node) = NULL; ;}\n+    break;\n+\n+  case 457:\n+#line 113 \"third_party/libpg_query/grammar/statements/copy.y\"\n     {\n \t\t\t\t\t(yyval.defelt) = makeDefElem((yyvsp[(1) - (2)].str), (yyvsp[(2) - (2)].node), (yylsp[(1) - (2)]));\n \t\t\t\t;}\n     break;\n \n-  case 457:\n-#line 120 \"third_party/libpg_query/grammar/statements/copy.y\"\n+  case 458:\n+#line 121 \"third_party/libpg_query/grammar/statements/copy.y\"\n     {\n \t\t\t\t\t(yyval.defelt) = makeDefElem(\"oids\", (PGNode *)makeInteger(true), (yylsp[(1) - (2)]));\n \t\t\t\t;}\n     break;\n \n-  case 458:\n-#line 123 \"third_party/libpg_query/grammar/statements/copy.y\"\n+  case 459:\n+#line 124 \"third_party/libpg_query/grammar/statements/copy.y\"\n     { (yyval.defelt) = NULL; ;}\n     break;\n \n-  case 459:\n-#line 128 \"third_party/libpg_query/grammar/statements/copy.y\"\n+  case 460:\n+#line 129 \"third_party/libpg_query/grammar/statements/copy.y\"\n     { (yyval.list) = lappend((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].defelt)); ;}\n     break;\n \n-  case 460:\n-#line 129 \"third_party/libpg_query/grammar/statements/copy.y\"\n+  case 461:\n+#line 130 \"third_party/libpg_query/grammar/statements/copy.y\"\n     { (yyval.list) = NIL; ;}\n     break;\n \n-  case 461:\n-#line 135 \"third_party/libpg_query/grammar/statements/copy.y\"\n+  case 462:\n+#line 136 \"third_party/libpg_query/grammar/statements/copy.y\"\n     {\n \t\t\t\t\t(yyval.defelt) = makeDefElem(\"format\", (PGNode *)makeString(\"binary\"), (yylsp[(1) - (1)]));\n \t\t\t\t;}\n     break;\n \n-  case 462:\n-#line 138 \"third_party/libpg_query/grammar/statements/copy.y\"\n+  case 463:\n+#line 139 \"third_party/libpg_query/grammar/statements/copy.y\"\n     { (yyval.defelt) = NULL; ;}\n     break;\n \n-  case 463:\n-#line 144 \"third_party/libpg_query/grammar/statements/copy.y\"\n+  case 464:\n+#line 145 \"third_party/libpg_query/grammar/statements/copy.y\"\n     {\n \t\t\t\t\t(yyval.defelt) = makeDefElem(\"format\", (PGNode *)makeString(\"binary\"), (yylsp[(1) - (1)]));\n \t\t\t\t;}\n     break;\n \n-  case 464:\n-#line 148 \"third_party/libpg_query/grammar/statements/copy.y\"\n+  case 465:\n+#line 149 \"third_party/libpg_query/grammar/statements/copy.y\"\n     {\n \t\t\t\t\t(yyval.defelt) = makeDefElem(\"oids\", (PGNode *)makeInteger(true), (yylsp[(1) - (1)]));\n \t\t\t\t;}\n     break;\n \n-  case 465:\n-#line 152 \"third_party/libpg_query/grammar/statements/copy.y\"\n+  case 466:\n+#line 153 \"third_party/libpg_query/grammar/statements/copy.y\"\n     {\n \t\t\t\t\t(yyval.defelt) = makeDefElem(\"freeze\", (PGNode *)makeInteger(true), (yylsp[(1) - (1)]));\n \t\t\t\t;}\n     break;\n \n-  case 466:\n-#line 156 \"third_party/libpg_query/grammar/statements/copy.y\"\n+  case 467:\n+#line 157 \"third_party/libpg_query/grammar/statements/copy.y\"\n     {\n \t\t\t\t\t(yyval.defelt) = makeDefElem(\"delimiter\", (PGNode *)makeString((yyvsp[(3) - (3)].str)), (yylsp[(1) - (3)]));\n \t\t\t\t;}\n     break;\n \n-  case 467:\n-#line 160 \"third_party/libpg_query/grammar/statements/copy.y\"\n+  case 468:\n+#line 161 \"third_party/libpg_query/grammar/statements/copy.y\"\n     {\n \t\t\t\t\t(yyval.defelt) = makeDefElem(\"null\", (PGNode *)makeString((yyvsp[(3) - (3)].str)), (yylsp[(1) - (3)]));\n \t\t\t\t;}\n     break;\n \n-  case 468:\n-#line 164 \"third_party/libpg_query/grammar/statements/copy.y\"\n+  case 469:\n+#line 165 \"third_party/libpg_query/grammar/statements/copy.y\"\n     {\n \t\t\t\t\t(yyval.defelt) = makeDefElem(\"format\", (PGNode *)makeString(\"csv\"), (yylsp[(1) - (1)]));\n \t\t\t\t;}\n     break;\n \n-  case 469:\n-#line 168 \"third_party/libpg_query/grammar/statements/copy.y\"\n+  case 470:\n+#line 169 \"third_party/libpg_query/grammar/statements/copy.y\"\n     {\n \t\t\t\t\t(yyval.defelt) = makeDefElem(\"header\", (PGNode *)makeInteger(true), (yylsp[(1) - (1)]));\n \t\t\t\t;}\n     break;\n \n-  case 470:\n-#line 172 \"third_party/libpg_query/grammar/statements/copy.y\"\n+  case 471:\n+#line 173 \"third_party/libpg_query/grammar/statements/copy.y\"\n     {\n \t\t\t\t\t(yyval.defelt) = makeDefElem(\"quote\", (PGNode *)makeString((yyvsp[(3) - (3)].str)), (yylsp[(1) - (3)]));\n \t\t\t\t;}\n     break;\n \n-  case 471:\n-#line 176 \"third_party/libpg_query/grammar/statements/copy.y\"\n+  case 472:\n+#line 177 \"third_party/libpg_query/grammar/statements/copy.y\"\n     {\n \t\t\t\t\t(yyval.defelt) = makeDefElem(\"escape\", (PGNode *)makeString((yyvsp[(3) - (3)].str)), (yylsp[(1) - (3)]));\n \t\t\t\t;}\n     break;\n \n-  case 472:\n-#line 180 \"third_party/libpg_query/grammar/statements/copy.y\"\n+  case 473:\n+#line 181 \"third_party/libpg_query/grammar/statements/copy.y\"\n     {\n \t\t\t\t\t(yyval.defelt) = makeDefElem(\"force_quote\", (PGNode *)(yyvsp[(3) - (3)].list), (yylsp[(1) - (3)]));\n \t\t\t\t;}\n     break;\n \n-  case 473:\n-#line 184 \"third_party/libpg_query/grammar/statements/copy.y\"\n+  case 474:\n+#line 185 \"third_party/libpg_query/grammar/statements/copy.y\"\n     {\n \t\t\t\t\t(yyval.defelt) = makeDefElem(\"force_quote\", (PGNode *)makeNode(PGAStar), (yylsp[(1) - (3)]));\n \t\t\t\t;}\n     break;\n \n-  case 474:\n-#line 188 \"third_party/libpg_query/grammar/statements/copy.y\"\n+  case 475:\n+#line 189 \"third_party/libpg_query/grammar/statements/copy.y\"\n     {\n \t\t\t\t\t(yyval.defelt) = makeDefElem(\"partition_by\", (PGNode *)(yyvsp[(3) - (3)].list), (yylsp[(1) - (3)]));\n \t\t\t\t;}\n     break;\n \n-  case 475:\n-#line 192 \"third_party/libpg_query/grammar/statements/copy.y\"\n+  case 476:\n+#line 193 \"third_party/libpg_query/grammar/statements/copy.y\"\n     {\n \t\t\t\t\t(yyval.defelt) = makeDefElem(\"partition_by\", (PGNode *)makeNode(PGAStar), (yylsp[(1) - (3)]));\n \t\t\t\t;}\n     break;\n \n-  case 476:\n-#line 196 \"third_party/libpg_query/grammar/statements/copy.y\"\n+  case 477:\n+#line 197 \"third_party/libpg_query/grammar/statements/copy.y\"\n     {\n \t\t\t\t\t(yyval.defelt) = makeDefElem(\"force_not_null\", (PGNode *)(yyvsp[(4) - (4)].list), (yylsp[(1) - (4)]));\n \t\t\t\t;}\n     break;\n \n-  case 477:\n-#line 200 \"third_party/libpg_query/grammar/statements/copy.y\"\n+  case 478:\n+#line 201 \"third_party/libpg_query/grammar/statements/copy.y\"\n     {\n \t\t\t\t\t(yyval.defelt) = makeDefElem(\"force_null\", (PGNode *)(yyvsp[(3) - (3)].list), (yylsp[(1) - (3)]));\n \t\t\t\t;}\n     break;\n \n-  case 478:\n-#line 204 \"third_party/libpg_query/grammar/statements/copy.y\"\n+  case 479:\n+#line 205 \"third_party/libpg_query/grammar/statements/copy.y\"\n     {\n \t\t\t\t\t(yyval.defelt) = makeDefElem(\"encoding\", (PGNode *)makeString((yyvsp[(2) - (2)].str)), (yylsp[(1) - (2)]));\n \t\t\t\t;}\n     break;\n \n-  case 479:\n-#line 211 \"third_party/libpg_query/grammar/statements/copy.y\"\n-    { (yyval.node) = (PGNode *) makeString((yyvsp[(1) - (1)].str)); ;}\n-    break;\n-\n   case 480:\n-#line 217 \"third_party/libpg_query/grammar/statements/copy.y\"\n-    { (yyval.str) = (yyvsp[(1) - (1)].str); ;}\n+#line 212 \"third_party/libpg_query/grammar/statements/copy.y\"\n+    { (yyval.node) = (PGNode *) makeString((yyvsp[(1) - (1)].str)); ;}\n     break;\n \n   case 481:\n #line 218 \"third_party/libpg_query/grammar/statements/copy.y\"\n-    { (yyval.str) = NULL; ;}\n+    { (yyval.str) = (yyvsp[(1) - (1)].str); ;}\n     break;\n \n   case 482:\n@@ -22180,35 +22283,40 @@ YYLTYPE yylloc;\n     break;\n \n   case 483:\n-#line 225 \"third_party/libpg_query/grammar/statements/copy.y\"\n+#line 220 \"third_party/libpg_query/grammar/statements/copy.y\"\n+    { (yyval.str) = NULL; ;}\n+    break;\n+\n+  case 484:\n+#line 226 \"third_party/libpg_query/grammar/statements/copy.y\"\n     {\n \t\t\t\t\t(yyval.list) = list_make1((yyvsp[(1) - (1)].defelt));\n \t\t\t\t;}\n     break;\n \n-  case 484:\n-#line 229 \"third_party/libpg_query/grammar/statements/copy.y\"\n+  case 485:\n+#line 230 \"third_party/libpg_query/grammar/statements/copy.y\"\n     {\n \t\t\t\t\t(yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].defelt));\n \t\t\t\t;}\n     break;\n \n-  case 487:\n+  case 488:\n #line 52 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (yyvsp[(2) - (3)].node); ;}\n     break;\n \n-  case 488:\n+  case 489:\n #line 53 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (yyvsp[(2) - (3)].node); ;}\n     break;\n \n-  case 489:\n+  case 490:\n #line 68 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}\n     break;\n \n-  case 490:\n+  case 491:\n #line 70 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tinsertSelectOptions((PGSelectStmt *) (yyvsp[(1) - (2)].node), (yyvsp[(2) - (2)].list), NIL,\n@@ -22218,7 +22326,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 491:\n+  case 492:\n #line 77 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tinsertSelectOptions((PGSelectStmt *) (yyvsp[(1) - (4)].node), (yyvsp[(2) - (4)].list), (yyvsp[(3) - (4)].list),\n@@ -22229,7 +22337,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 492:\n+  case 493:\n #line 85 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tinsertSelectOptions((PGSelectStmt *) (yyvsp[(1) - (4)].node), (yyvsp[(2) - (4)].list), (yyvsp[(4) - (4)].list),\n@@ -22240,7 +22348,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 493:\n+  case 494:\n #line 93 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tinsertSelectOptions((PGSelectStmt *) (yyvsp[(2) - (2)].node), NULL, NIL,\n@@ -22251,7 +22359,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 494:\n+  case 495:\n #line 101 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tinsertSelectOptions((PGSelectStmt *) (yyvsp[(2) - (3)].node), (yyvsp[(3) - (3)].list), NIL,\n@@ -22262,7 +22370,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 495:\n+  case 496:\n #line 109 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tinsertSelectOptions((PGSelectStmt *) (yyvsp[(2) - (5)].node), (yyvsp[(3) - (5)].list), (yyvsp[(4) - (5)].list),\n@@ -22273,7 +22381,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 496:\n+  case 497:\n #line 117 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tinsertSelectOptions((PGSelectStmt *) (yyvsp[(2) - (5)].node), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].list),\n@@ -22284,24 +22392,24 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 497:\n+  case 498:\n #line 127 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}\n     break;\n \n-  case 498:\n+  case 499:\n #line 128 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}\n     break;\n \n-  case 499:\n+  case 500:\n #line 156 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t(yyval.list) = (yyvsp[(3) - (3)].list);\n \t\t\t;}\n     break;\n \n-  case 500:\n+  case 501:\n #line 160 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\tPGAStar *star = makeNode(PGAStar);\n@@ -22309,7 +22417,7 @@ YYLTYPE yylloc;\n \t\t\t;}\n     break;\n \n-  case 501:\n+  case 502:\n #line 171 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGSelectStmt *n = makeNode(PGSelectStmt);\n@@ -22326,7 +22434,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 502:\n+  case 503:\n #line 187 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGSelectStmt *n = makeNode(PGSelectStmt);\n@@ -22344,7 +22452,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 503:\n+  case 504:\n #line 204 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGSelectStmt *n = makeNode(PGSelectStmt);\n@@ -22361,7 +22469,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 504:\n+  case 505:\n #line 221 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGSelectStmt *n = makeNode(PGSelectStmt);\n@@ -22379,12 +22487,12 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 505:\n+  case 506:\n #line 235 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}\n     break;\n \n-  case 506:\n+  case 507:\n #line 237 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t/* same as SELECT * FROM relation_expr */\n@@ -22406,35 +22514,35 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 507:\n+  case 508:\n #line 256 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = makeSetOp(PG_SETOP_UNION_BY_NAME, (yyvsp[(3) - (5)].boolean), (yyvsp[(1) - (5)].node), (yyvsp[(5) - (5)].node));\n \t\t\t\t;}\n     break;\n \n-  case 508:\n+  case 509:\n #line 260 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = makeSetOp(PG_SETOP_UNION, (yyvsp[(3) - (4)].boolean), (yyvsp[(1) - (4)].node), (yyvsp[(4) - (4)].node));\n \t\t\t\t;}\n     break;\n \n-  case 509:\n+  case 510:\n #line 264 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = makeSetOp(PG_SETOP_INTERSECT, (yyvsp[(3) - (4)].boolean), (yyvsp[(1) - (4)].node), (yyvsp[(4) - (4)].node));\n \t\t\t\t;}\n     break;\n \n-  case 510:\n+  case 511:\n #line 268 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = makeSetOp(PG_SETOP_EXCEPT, (yyvsp[(3) - (4)].boolean), (yyvsp[(1) - (4)].node), (yyvsp[(4) - (4)].node));\n \t\t\t\t;}\n     break;\n \n-  case 511:\n+  case 512:\n #line 272 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGSelectStmt *res = makeNode(PGSelectStmt);\n@@ -22446,7 +22554,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 512:\n+  case 513:\n #line 281 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGSelectStmt *res = makeNode(PGSelectStmt);\n@@ -22459,7 +22567,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 513:\n+  case 514:\n #line 291 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGSelectStmt *res = makeNode(PGSelectStmt);\n@@ -22471,7 +22579,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 514:\n+  case 515:\n #line 300 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGSelectStmt *res = makeNode(PGSelectStmt);\n@@ -22483,7 +22591,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 515:\n+  case 516:\n #line 309 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGSelectStmt *res = makeNode(PGSelectStmt);\n@@ -22496,7 +22604,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 516:\n+  case 517:\n #line 319 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGSelectStmt *res = makeNode(PGSelectStmt);\n@@ -22509,7 +22617,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 517:\n+  case 518:\n #line 329 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGSelectStmt *res = makeNode(PGSelectStmt);\n@@ -22523,7 +22631,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 518:\n+  case 519:\n #line 340 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGSelectStmt *res = makeNode(PGSelectStmt);\n@@ -22540,7 +22648,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 519:\n+  case 520:\n #line 354 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGSelectStmt *res = makeNode(PGSelectStmt);\n@@ -22557,7 +22665,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 526:\n+  case 527:\n #line 383 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\tPGPivot *n = makeNode(PGPivot);\n@@ -22566,7 +22674,7 @@ YYLTYPE yylloc;\n \t\t\t;}\n     break;\n \n-  case 527:\n+  case 528:\n #line 389 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\tPGPivot *n = makeNode(PGPivot);\n@@ -22576,32 +22684,32 @@ YYLTYPE yylloc;\n \t\t\t;}\n     break;\n \n-  case 528:\n+  case 529:\n #line 395 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}\n     break;\n \n-  case 529:\n+  case 530:\n #line 399 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make1((yyvsp[(1) - (1)].node)); ;}\n     break;\n \n-  case 530:\n+  case 531:\n #line 400 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node)); ;}\n     break;\n \n-  case 531:\n+  case 532:\n #line 404 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = (yyvsp[(1) - (1)].list); ;}\n     break;\n \n-  case 532:\n+  case 533:\n #line 405 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = (yyvsp[(1) - (2)].list); ;}\n     break;\n \n-  case 533:\n+  case 534:\n #line 420 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t(yyval.with) = makeNode(PGWithClause);\n@@ -22611,7 +22719,7 @@ YYLTYPE yylloc;\n \t\t\t;}\n     break;\n \n-  case 534:\n+  case 535:\n #line 427 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t(yyval.with) = makeNode(PGWithClause);\n@@ -22621,7 +22729,7 @@ YYLTYPE yylloc;\n \t\t\t;}\n     break;\n \n-  case 535:\n+  case 536:\n #line 434 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t(yyval.with) = makeNode(PGWithClause);\n@@ -22631,30 +22739,46 @@ YYLTYPE yylloc;\n \t\t\t;}\n     break;\n \n-  case 536:\n+  case 537:\n #line 443 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make1((yyvsp[(1) - (1)].node)); ;}\n     break;\n \n-  case 537:\n+  case 538:\n #line 444 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node)); ;}\n     break;\n \n-  case 538:\n+  case 539:\n #line 448 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\tPGCommonTableExpr *n = makeNode(PGCommonTableExpr);\n-\t\t\t\tn->ctename = (yyvsp[(1) - (6)].str);\n-\t\t\t\tn->aliascolnames = (yyvsp[(2) - (6)].list);\n-\t\t\t\tn->ctequery = (yyvsp[(5) - (6)].node);\n-\t\t\t\tn->location = (yylsp[(1) - (6)]);\n+\t\t\t\tn->ctename = (yyvsp[(1) - (7)].str);\n+\t\t\t\tn->aliascolnames = (yyvsp[(2) - (7)].list);\n+\t\t\t\tn->ctematerialized = (yyvsp[(4) - (7)].ctematerialize);\n+\t\t\t\tn->ctequery = (yyvsp[(6) - (7)].node);\n+\t\t\t\tn->location = (yylsp[(1) - (7)]);\n \t\t\t\t(yyval.node) = (PGNode *) n;\n \t\t\t;}\n     break;\n \n-  case 539:\n+  case 540:\n #line 460 \"third_party/libpg_query/grammar/statements/select.y\"\n+    { (yyval.ctematerialize) = PGCTEMaterializeAlways; ;}\n+    break;\n+\n+  case 541:\n+#line 461 \"third_party/libpg_query/grammar/statements/select.y\"\n+    { (yyval.ctematerialize) = PGCTEMaterializeNever; ;}\n+    break;\n+\n+  case 542:\n+#line 462 \"third_party/libpg_query/grammar/statements/select.y\"\n+    { (yyval.ctematerialize) = PGCTEMaterializeDefault; ;}\n+    break;\n+\n+  case 543:\n+#line 467 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.into) = makeNode(PGIntoClause);\n \t\t\t\t\t(yyval.into)->rel = (yyvsp[(2) - (2)].range);\n@@ -22666,45 +22790,45 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 540:\n-#line 470 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 544:\n+#line 477 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.into) = NULL; ;}\n     break;\n \n-  case 541:\n-#line 479 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 545:\n+#line 486 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.range) = (yyvsp[(3) - (3)].range);\n \t\t\t\t\t(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;\n \t\t\t\t;}\n     break;\n \n-  case 542:\n-#line 484 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 546:\n+#line 491 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.range) = (yyvsp[(3) - (3)].range);\n \t\t\t\t\t(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;\n \t\t\t\t;}\n     break;\n \n-  case 543:\n-#line 489 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 547:\n+#line 496 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.range) = (yyvsp[(4) - (4)].range);\n \t\t\t\t\t(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;\n \t\t\t\t;}\n     break;\n \n-  case 544:\n-#line 494 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 548:\n+#line 501 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.range) = (yyvsp[(4) - (4)].range);\n \t\t\t\t\t(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;\n \t\t\t\t;}\n     break;\n \n-  case 545:\n-#line 499 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 549:\n+#line 506 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tereport(PGWARNING,\n \t\t\t\t\t\t\t(errmsg(\"GLOBAL is deprecated in temporary table creation\"),\n@@ -22714,8 +22838,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 546:\n-#line 507 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 550:\n+#line 514 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tereport(PGWARNING,\n \t\t\t\t\t\t\t(errmsg(\"GLOBAL is deprecated in temporary table creation\"),\n@@ -22725,112 +22849,112 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 547:\n-#line 515 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 551:\n+#line 522 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.range) = (yyvsp[(3) - (3)].range);\n \t\t\t\t\t(yyval.range)->relpersistence = PG_RELPERSISTENCE_UNLOGGED;\n \t\t\t\t;}\n     break;\n \n-  case 548:\n-#line 520 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 552:\n+#line 527 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.range) = (yyvsp[(2) - (2)].range);\n \t\t\t\t\t(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;\n \t\t\t\t;}\n     break;\n \n-  case 549:\n-#line 525 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 553:\n+#line 532 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.range) = (yyvsp[(1) - (1)].range);\n \t\t\t\t\t(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;\n \t\t\t\t;}\n     break;\n \n-  case 550:\n-#line 531 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 554:\n+#line 538 \"third_party/libpg_query/grammar/statements/select.y\"\n     {;}\n     break;\n \n-  case 551:\n-#line 532 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 555:\n+#line 539 \"third_party/libpg_query/grammar/statements/select.y\"\n     {;}\n     break;\n \n-  case 552:\n-#line 536 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 556:\n+#line 543 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.boolean) = true; ;}\n     break;\n \n-  case 553:\n-#line 537 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 557:\n+#line 544 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.boolean) = false; ;}\n     break;\n \n-  case 554:\n-#line 538 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 558:\n+#line 545 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.boolean) = false; ;}\n     break;\n \n-  case 555:\n-#line 542 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 559:\n+#line 549 \"third_party/libpg_query/grammar/statements/select.y\"\n     { ;}\n     break;\n \n-  case 556:\n-#line 549 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 560:\n+#line 556 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make1(NIL); ;}\n     break;\n \n-  case 557:\n-#line 550 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 561:\n+#line 557 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = (yyvsp[(4) - (5)].list); ;}\n     break;\n \n-  case 558:\n-#line 554 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 562:\n+#line 561 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = NIL;;}\n     break;\n \n-  case 559:\n-#line 555 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 563:\n+#line 562 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = NIL; ;}\n     break;\n \n-  case 560:\n-#line 559 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 564:\n+#line 566 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.boolean) = true;;}\n     break;\n \n-  case 561:\n-#line 560 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 565:\n+#line 567 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.boolean) = false;;}\n     break;\n \n-  case 562:\n-#line 561 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 566:\n+#line 568 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.boolean) = false; ;}\n     break;\n \n-  case 563:\n-#line 565 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 567:\n+#line 572 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = (yyvsp[(1) - (1)].list);;}\n     break;\n \n-  case 564:\n-#line 566 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 568:\n+#line 573 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = NIL; ;}\n     break;\n \n-  case 565:\n-#line 570 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 569:\n+#line 577 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = (yyvsp[(3) - (3)].list); ;}\n     break;\n \n-  case 566:\n-#line 572 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 570:\n+#line 579 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGSortBy *sort = makeNode(PGSortBy);\n \t\t\t\t\tPGAStar *star = makeNode(PGAStar);\n@@ -22845,18 +22969,18 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 567:\n-#line 587 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 571:\n+#line 594 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make1((yyvsp[(1) - (1)].sortby)); ;}\n     break;\n \n-  case 568:\n-#line 588 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 572:\n+#line 595 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].sortby)); ;}\n     break;\n \n-  case 569:\n-#line 592 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 573:\n+#line 599 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.sortby) = makeNode(PGSortBy);\n \t\t\t\t\t(yyval.sortby)->node = (yyvsp[(1) - (4)].node);\n@@ -22867,8 +22991,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 570:\n-#line 601 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 574:\n+#line 608 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.sortby) = makeNode(PGSortBy);\n \t\t\t\t\t(yyval.sortby)->node = (yyvsp[(1) - (3)].node);\n@@ -22879,73 +23003,73 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 571:\n-#line 611 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 575:\n+#line 618 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.sortorder) = PG_SORTBY_ASC; ;}\n     break;\n \n-  case 572:\n-#line 612 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 576:\n+#line 619 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.sortorder) = PG_SORTBY_DESC; ;}\n     break;\n \n-  case 573:\n-#line 613 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 577:\n+#line 620 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.sortorder) = PG_SORTBY_DEFAULT; ;}\n     break;\n \n-  case 574:\n-#line 616 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 578:\n+#line 623 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.nullorder) = PG_SORTBY_NULLS_FIRST; ;}\n     break;\n \n-  case 575:\n-#line 617 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 579:\n+#line 624 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.nullorder) = PG_SORTBY_NULLS_LAST; ;}\n     break;\n \n-  case 576:\n-#line 618 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 580:\n+#line 625 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.nullorder) = PG_SORTBY_NULLS_DEFAULT; ;}\n     break;\n \n-  case 577:\n-#line 622 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 581:\n+#line 629 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make2((yyvsp[(2) - (2)].node), (yyvsp[(1) - (2)].node)); ;}\n     break;\n \n-  case 578:\n-#line 623 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 582:\n+#line 630 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make2((yyvsp[(1) - (2)].node), (yyvsp[(2) - (2)].node)); ;}\n     break;\n \n-  case 579:\n-#line 624 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 583:\n+#line 631 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make2(NULL, (yyvsp[(1) - (1)].node)); ;}\n     break;\n \n-  case 580:\n-#line 625 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 584:\n+#line 632 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make2((yyvsp[(1) - (1)].node), NULL); ;}\n     break;\n \n-  case 581:\n-#line 629 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 585:\n+#line 636 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = (yyvsp[(1) - (1)].list); ;}\n     break;\n \n-  case 582:\n-#line 630 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 586:\n+#line 637 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make2(NULL,NULL); ;}\n     break;\n \n-  case 583:\n-#line 635 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 587:\n+#line 642 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (yyvsp[(2) - (2)].node); ;}\n     break;\n \n-  case 584:\n-#line 637 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 588:\n+#line 644 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t/* Disabled because it was too confusing, bjm 2002-02-18 */\n \t\t\t\t\tereport(ERROR,\n@@ -22956,378 +23080,378 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 585:\n-#line 653 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 589:\n+#line 660 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (yyvsp[(3) - (5)].node); ;}\n     break;\n \n-  case 586:\n-#line 655 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 590:\n+#line 662 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = makeIntConst(1, -1); ;}\n     break;\n \n-  case 587:\n-#line 660 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 591:\n+#line 667 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (yyvsp[(2) - (2)].node); ;}\n     break;\n \n-  case 588:\n-#line 663 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 592:\n+#line 670 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (yyvsp[(2) - (3)].node); ;}\n     break;\n \n-  case 589:\n-#line 671 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 593:\n+#line 678 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t(yyval.node) = makeSampleSize(makeFloat((yyvsp[(1) - (2)].str)), true);\n \t\t;}\n     break;\n \n-  case 590:\n-#line 675 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 594:\n+#line 682 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t(yyval.node) = makeSampleSize(makeInteger((yyvsp[(1) - (2)].ival)), true);\n \t\t;}\n     break;\n \n-  case 591:\n-#line 679 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 595:\n+#line 686 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t(yyval.node) = makeSampleSize(makeFloat((yyvsp[(1) - (2)].str)), true);\n \t\t;}\n     break;\n \n-  case 592:\n-#line 683 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 596:\n+#line 690 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t(yyval.node) = makeSampleSize(makeInteger((yyvsp[(1) - (2)].ival)), true);\n \t\t;}\n     break;\n \n-  case 593:\n-#line 687 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 597:\n+#line 694 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t(yyval.node) = makeSampleSize(makeInteger((yyvsp[(1) - (1)].ival)), false);\n \t\t;}\n     break;\n \n-  case 594:\n-#line 691 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 598:\n+#line 698 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t(yyval.node) = makeSampleSize(makeInteger((yyvsp[(1) - (2)].ival)), false);\n \t\t;}\n     break;\n \n-  case 595:\n-#line 698 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 599:\n+#line 705 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = (yyvsp[(3) - (3)].node);\n \t\t\t\t;}\n     break;\n \n-  case 596:\n-#line 702 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 600:\n+#line 709 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = NULL; ;}\n     break;\n \n-  case 597:\n-#line 709 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 601:\n+#line 716 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}\n     break;\n \n-  case 598:\n-#line 710 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 602:\n+#line 717 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.str) = NULL; ;}\n     break;\n \n-  case 599:\n-#line 715 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 603:\n+#line 722 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tint seed = (yyvsp[(5) - (5)].ival);\n \t\t\t\t\t(yyval.node) = makeSampleOptions((yyvsp[(3) - (5)].node), (yyvsp[(1) - (5)].str), &seed, (yylsp[(1) - (5)]));\n \t\t\t\t;}\n     break;\n \n-  case 600:\n-#line 720 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 604:\n+#line 727 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t(yyval.node) = makeSampleOptions((yyvsp[(1) - (1)].node), NULL, NULL, (yylsp[(1) - (1)]));\n \t\t;}\n     break;\n \n-  case 601:\n-#line 724 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 605:\n+#line 731 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t(yyval.node) = makeSampleOptions((yyvsp[(1) - (4)].node), (yyvsp[(3) - (4)].str), NULL, (yylsp[(1) - (4)]));\n \t\t;}\n     break;\n \n-  case 602:\n-#line 728 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 606:\n+#line 735 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\tint seed = (yyvsp[(5) - (6)].ival);\n \t\t\t(yyval.node) = makeSampleOptions((yyvsp[(1) - (6)].node), (yyvsp[(3) - (6)].str), &seed, (yylsp[(1) - (6)]));\n \t\t;}\n     break;\n \n-  case 603:\n-#line 736 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 607:\n+#line 743 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = (yyvsp[(2) - (2)].node);\n \t\t\t\t;}\n     break;\n \n-  case 604:\n-#line 742 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 608:\n+#line 749 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}\n     break;\n \n-  case 605:\n-#line 743 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 609:\n+#line 750 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = NULL; ;}\n     break;\n \n-  case 606:\n-#line 748 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 610:\n+#line 755 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.ival) = (yyvsp[(3) - (4)].ival); ;}\n     break;\n \n-  case 607:\n-#line 749 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 611:\n+#line 756 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.ival) = -1; ;}\n     break;\n \n-  case 608:\n-#line 753 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 612:\n+#line 760 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}\n     break;\n \n-  case 609:\n-#line 755 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 613:\n+#line 762 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t/* LIMIT ALL is represented as a NULL constant */\n \t\t\t\t\t(yyval.node) = makeNullAConst((yylsp[(1) - (1)]));\n \t\t\t\t;}\n     break;\n \n-  case 610:\n-#line 760 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 614:\n+#line 767 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = makeLimitPercent((yyvsp[(1) - (2)].node)); ;}\n     break;\n \n-  case 611:\n-#line 762 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 615:\n+#line 769 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = makeLimitPercent(makeFloatConst((yyvsp[(1) - (2)].str),(yylsp[(1) - (2)]))); ;}\n     break;\n \n-  case 612:\n-#line 764 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 616:\n+#line 771 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = makeLimitPercent(makeIntConst((yyvsp[(1) - (2)].ival),(yylsp[(1) - (2)]))); ;}\n     break;\n \n-  case 613:\n-#line 768 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 617:\n+#line 775 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}\n     break;\n \n-  case 614:\n-#line 788 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 618:\n+#line 795 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}\n     break;\n \n-  case 615:\n-#line 790 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 619:\n+#line 797 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, \"+\", NULL, (yyvsp[(2) - (2)].node), (yylsp[(1) - (2)])); ;}\n     break;\n \n-  case 616:\n-#line 792 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 620:\n+#line 799 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = doNegate((yyvsp[(2) - (2)].node), (yylsp[(1) - (2)])); ;}\n     break;\n \n-  case 617:\n-#line 796 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 621:\n+#line 803 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = makeIntConst((yyvsp[(1) - (1)].ival),(yylsp[(1) - (1)])); ;}\n     break;\n \n-  case 618:\n-#line 797 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 622:\n+#line 804 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = makeFloatConst((yyvsp[(1) - (1)].str),(yylsp[(1) - (1)])); ;}\n     break;\n \n-  case 619:\n-#line 801 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 623:\n+#line 808 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.ival) = 0; ;}\n     break;\n \n-  case 620:\n-#line 802 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 624:\n+#line 809 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.ival) = 0; ;}\n     break;\n \n-  case 621:\n-#line 805 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 625:\n+#line 812 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.ival) = 0; ;}\n     break;\n \n-  case 622:\n-#line 806 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 626:\n+#line 813 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.ival) = 0; ;}\n     break;\n \n-  case 623:\n-#line 831 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 627:\n+#line 838 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = (yyvsp[(3) - (3)].list); ;}\n     break;\n \n-  case 624:\n-#line 833 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 628:\n+#line 840 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGNode *node = (PGNode *) makeGroupingSet(GROUPING_SET_ALL, NIL, (yylsp[(3) - (3)]));\n \t\t\t\t\t(yyval.list) = list_make1(node);\n \t\t\t\t;}\n     break;\n \n-  case 625:\n-#line 837 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 629:\n+#line 844 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = NIL; ;}\n     break;\n \n-  case 626:\n-#line 841 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 630:\n+#line 848 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make1((yyvsp[(1) - (1)].node)); ;}\n     break;\n \n-  case 627:\n-#line 842 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 631:\n+#line 849 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = lappend((yyvsp[(1) - (3)].list),(yyvsp[(3) - (3)].node)); ;}\n     break;\n \n-  case 628:\n-#line 846 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 632:\n+#line 853 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = (yyvsp[(1) - (1)].list); ;}\n     break;\n \n-  case 629:\n-#line 847 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 633:\n+#line 854 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = (yyvsp[(1) - (2)].list); ;}\n     break;\n \n-  case 630:\n-#line 851 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 634:\n+#line 858 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}\n     break;\n \n-  case 631:\n-#line 852 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 635:\n+#line 859 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}\n     break;\n \n-  case 632:\n-#line 853 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 636:\n+#line 860 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}\n     break;\n \n-  case 633:\n-#line 854 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 637:\n+#line 861 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}\n     break;\n \n-  case 634:\n-#line 855 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 638:\n+#line 862 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}\n     break;\n \n-  case 635:\n-#line 860 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 639:\n+#line 867 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_EMPTY, NIL, (yylsp[(1) - (2)]));\n \t\t\t\t;}\n     break;\n \n-  case 636:\n-#line 873 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 640:\n+#line 880 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_ROLLUP, (yyvsp[(3) - (4)].list), (yylsp[(1) - (4)]));\n \t\t\t\t;}\n     break;\n \n-  case 637:\n-#line 880 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 641:\n+#line 887 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_CUBE, (yyvsp[(3) - (4)].list), (yylsp[(1) - (4)]));\n \t\t\t\t;}\n     break;\n \n-  case 638:\n-#line 887 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 642:\n+#line 894 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_SETS, (yyvsp[(4) - (5)].list), (yylsp[(1) - (5)]));\n \t\t\t\t;}\n     break;\n \n-  case 639:\n-#line 893 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 643:\n+#line 900 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = NULL; ;}\n     break;\n \n-  case 640:\n-#line 894 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 644:\n+#line 901 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = NULL; ;}\n     break;\n \n-  case 641:\n-#line 898 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 645:\n+#line 905 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (yyvsp[(2) - (2)].node); ;}\n     break;\n \n-  case 642:\n-#line 899 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 646:\n+#line 906 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = NULL; ;}\n     break;\n \n-  case 643:\n-#line 903 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 647:\n+#line 910 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (yyvsp[(2) - (2)].node); ;}\n     break;\n \n-  case 644:\n-#line 904 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 648:\n+#line 911 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = NULL; ;}\n     break;\n \n-  case 645:\n-#line 908 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 649:\n+#line 915 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = (yyvsp[(1) - (1)].list); ;}\n     break;\n \n-  case 646:\n-#line 909 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 650:\n+#line 916 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = NIL; ;}\n     break;\n \n-  case 647:\n-#line 913 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 651:\n+#line 920 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = (yyvsp[(1) - (1)].list); ;}\n     break;\n \n-  case 648:\n-#line 914 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 652:\n+#line 921 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = NIL; ;}\n     break;\n \n-  case 649:\n-#line 918 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 653:\n+#line 925 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make1((yyvsp[(1) - (1)].node)); ;}\n     break;\n \n-  case 650:\n-#line 919 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 654:\n+#line 926 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = lappend((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].node)); ;}\n     break;\n \n-  case 651:\n-#line 924 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 655:\n+#line 931 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGLockingClause *n = makeNode(PGLockingClause);\n \t\t\t\t\tn->lockedRels = (yyvsp[(2) - (3)].list);\n@@ -23337,53 +23461,53 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 652:\n-#line 934 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 656:\n+#line 941 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.lockstrength) = LCS_FORUPDATE; ;}\n     break;\n \n-  case 653:\n-#line 935 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 657:\n+#line 942 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.lockstrength) = PG_LCS_FORNOKEYUPDATE; ;}\n     break;\n \n-  case 654:\n-#line 936 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 658:\n+#line 943 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.lockstrength) = PG_LCS_FORSHARE; ;}\n     break;\n \n-  case 655:\n-#line 937 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 659:\n+#line 944 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.lockstrength) = PG_LCS_FORKEYSHARE; ;}\n     break;\n \n-  case 656:\n-#line 941 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 660:\n+#line 948 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = (yyvsp[(2) - (2)].list); ;}\n     break;\n \n-  case 657:\n-#line 942 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 661:\n+#line 949 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = NIL; ;}\n     break;\n \n-  case 658:\n-#line 947 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 662:\n+#line 954 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.lockwaitpolicy) = LockWaitError; ;}\n     break;\n \n-  case 659:\n-#line 948 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 663:\n+#line 955 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.lockwaitpolicy) = PGLockWaitSkip; ;}\n     break;\n \n-  case 660:\n-#line 949 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 664:\n+#line 956 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.lockwaitpolicy) = PGLockWaitBlock; ;}\n     break;\n \n-  case 661:\n-#line 959 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 665:\n+#line 966 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGSelectStmt *n = makeNode(PGSelectStmt);\n \t\t\t\t\tn->valuesLists = list_make1((yyvsp[(3) - (4)].list));\n@@ -23391,8 +23515,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 662:\n-#line 965 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 666:\n+#line 972 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGSelectStmt *n = (PGSelectStmt *) (yyvsp[(1) - (5)].node);\n \t\t\t\t\tn->valuesLists = lappend(n->valuesLists, (yyvsp[(4) - (5)].list));\n@@ -23400,48 +23524,48 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 663:\n-#line 973 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 667:\n+#line 980 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}\n     break;\n \n-  case 664:\n-#line 974 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 668:\n+#line 981 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (yyvsp[(1) - (2)].node); ;}\n     break;\n \n-  case 665:\n-#line 987 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 669:\n+#line 994 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = (yyvsp[(2) - (2)].list); ;}\n     break;\n \n-  case 666:\n-#line 988 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 670:\n+#line 995 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = NIL; ;}\n     break;\n \n-  case 667:\n-#line 992 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 671:\n+#line 999 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make1((yyvsp[(1) - (1)].node)); ;}\n     break;\n \n-  case 668:\n-#line 993 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 672:\n+#line 1000 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node)); ;}\n     break;\n \n-  case 669:\n-#line 997 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 673:\n+#line 1004 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = (yyvsp[(1) - (1)].list); ;}\n     break;\n \n-  case 670:\n-#line 998 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 674:\n+#line 1005 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = (yyvsp[(1) - (2)].list); ;}\n     break;\n \n-  case 671:\n-#line 1005 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 675:\n+#line 1012 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyvsp[(1) - (3)].range)->alias = (yyvsp[(2) - (3)].alias);\n \t\t\t\t\t(yyvsp[(1) - (3)].range)->sample = (yyvsp[(3) - (3)].node);\n@@ -23449,8 +23573,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 672:\n-#line 1011 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 676:\n+#line 1018 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGRangeFunction *n = (PGRangeFunction *) (yyvsp[(1) - (3)].node);\n \t\t\t\t\tn->alias = (PGAlias*) linitial((yyvsp[(2) - (3)].list));\n@@ -23460,8 +23584,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 673:\n-#line 1019 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 677:\n+#line 1026 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\tPGRangeSubselect *n = makeNode(PGRangeSubselect);\n \t\t\t\tn->lateral = false;\n@@ -23472,8 +23596,8 @@ YYLTYPE yylloc;\n \t\t\t;}\n     break;\n \n-  case 674:\n-#line 1028 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 678:\n+#line 1035 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGRangeFunction *n = (PGRangeFunction *) (yyvsp[(2) - (3)].node);\n \t\t\t\t\tn->lateral = true;\n@@ -23483,8 +23607,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 675:\n-#line 1036 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 679:\n+#line 1043 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGRangeSubselect *n = makeNode(PGRangeSubselect);\n \t\t\t\t\tn->lateral = false;\n@@ -23495,8 +23619,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 676:\n-#line 1045 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 680:\n+#line 1052 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGRangeSubselect *n = makeNode(PGRangeSubselect);\n \t\t\t\t\tn->lateral = true;\n@@ -23507,23 +23631,23 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 677:\n-#line 1054 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 681:\n+#line 1061 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = (PGNode *) (yyvsp[(1) - (1)].jexpr);\n \t\t\t\t;}\n     break;\n \n-  case 678:\n-#line 1058 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 682:\n+#line 1065 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyvsp[(2) - (4)].jexpr)->alias = (yyvsp[(4) - (4)].alias);\n \t\t\t\t\t(yyval.node) = (PGNode *) (yyvsp[(2) - (4)].jexpr);\n \t\t\t\t;}\n     break;\n \n-  case 679:\n-#line 1063 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 683:\n+#line 1070 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGPivotExpr *n = makeNode(PGPivotExpr);\n \t\t\t\t\tn->source = (yyvsp[(1) - (9)].node);\n@@ -23535,8 +23659,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 680:\n-#line 1073 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 684:\n+#line 1080 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGPivotExpr *n = makeNode(PGPivotExpr);\n \t\t\t\t\tn->source = (yyvsp[(1) - (9)].node);\n@@ -23548,33 +23672,33 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 681:\n-#line 1085 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 685:\n+#line 1092 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = (yyvsp[(3) - (3)].list); ;}\n     break;\n \n-  case 682:\n-#line 1086 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 686:\n+#line 1093 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = NULL; ;}\n     break;\n \n-  case 683:\n-#line 1089 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 687:\n+#line 1096 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.boolean) = true; ;}\n     break;\n \n-  case 684:\n-#line 1090 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 688:\n+#line 1097 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.boolean) = false; ;}\n     break;\n \n-  case 685:\n-#line 1091 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 689:\n+#line 1098 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.boolean) = false; ;}\n     break;\n \n-  case 686:\n-#line 1095 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 690:\n+#line 1102 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\tPGPivot *n = makeNode(PGPivot);\n \t\t\tn->pivot_columns = list_make1((yyvsp[(1) - (5)].node));\n@@ -23583,8 +23707,8 @@ YYLTYPE yylloc;\n \t\t;}\n     break;\n \n-  case 687:\n-#line 1103 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 691:\n+#line 1110 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\tPGPivot *n = makeNode(PGPivot);\n \t\t\tn->pivot_columns = list_make1((yyvsp[(1) - (3)].node));\n@@ -23593,18 +23717,18 @@ YYLTYPE yylloc;\n \t\t;}\n     break;\n \n-  case 688:\n-#line 1112 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 692:\n+#line 1119 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make1((yyvsp[(1) - (1)].node)); ;}\n     break;\n \n-  case 689:\n-#line 1113 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 693:\n+#line 1120 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = (yyvsp[(2) - (3)].list); ;}\n     break;\n \n-  case 690:\n-#line 1117 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 694:\n+#line 1124 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\tPGPivot *n = makeNode(PGPivot);\n \t\t\tn->pivot_columns = (yyvsp[(1) - (5)].list);\n@@ -23613,8 +23737,8 @@ YYLTYPE yylloc;\n \t\t;}\n     break;\n \n-  case 691:\n-#line 1125 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 695:\n+#line 1132 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\tPGPivot *n = makeNode(PGPivot);\n \t\t\tn->pivot_columns = (yyvsp[(1) - (3)].list);\n@@ -23623,32 +23747,32 @@ YYLTYPE yylloc;\n \t\t;}\n     break;\n \n-  case 692:\n-#line 1134 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 696:\n+#line 1141 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.list) = list_make1((yyvsp[(1) - (1)].node));\n \t\t\t\t;}\n     break;\n \n-  case 693:\n-#line 1138 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 697:\n+#line 1145 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.list) = lappend((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].node));\n \t\t\t\t;}\n     break;\n \n-  case 694:\n-#line 1144 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 698:\n+#line 1151 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make1(makeString((yyvsp[(1) - (1)].str))); ;}\n     break;\n \n-  case 695:\n-#line 1145 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 699:\n+#line 1152 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = (yyvsp[(2) - (3)].list); ;}\n     break;\n \n-  case 696:\n-#line 1150 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 700:\n+#line 1157 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\tPGPivot *n = makeNode(PGPivot);\n \t\t\tn->unpivot_columns = (yyvsp[(1) - (5)].list);\n@@ -23657,29 +23781,29 @@ YYLTYPE yylloc;\n \t\t;}\n     break;\n \n-  case 697:\n-#line 1159 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 701:\n+#line 1166 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.list) = list_make1((yyvsp[(1) - (1)].node));\n \t\t\t\t;}\n     break;\n \n-  case 698:\n-#line 1163 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 702:\n+#line 1170 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.list) = lappend((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].node));\n \t\t\t\t;}\n     break;\n \n-  case 699:\n-#line 1188 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 703:\n+#line 1195 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.jexpr) = (yyvsp[(2) - (3)].jexpr);\n \t\t\t\t;}\n     break;\n \n-  case 700:\n-#line 1192 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 704:\n+#line 1199 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t/* CROSS JOIN is same as unqualified inner join */\n \t\t\t\t\tPGJoinExpr *n = makeNode(PGJoinExpr);\n@@ -23694,8 +23818,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 701:\n-#line 1205 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 705:\n+#line 1212 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGJoinExpr *n = makeNode(PGJoinExpr);\n \t\t\t\t\tn->jointype = (yyvsp[(2) - (5)].jtype);\n@@ -23711,8 +23835,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 702:\n-#line 1219 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 706:\n+#line 1226 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t/* letting join_type reduce to empty doesn't work */\n \t\t\t\t\tPGJoinExpr *n = makeNode(PGJoinExpr);\n@@ -23729,8 +23853,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 703:\n-#line 1234 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 707:\n+#line 1241 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGJoinExpr *n = makeNode(PGJoinExpr);\n \t\t\t\t\tn->jointype = (yyvsp[(3) - (5)].jtype);\n@@ -23744,8 +23868,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 704:\n-#line 1246 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 708:\n+#line 1253 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t/* letting join_type reduce to empty doesn't work */\n \t\t\t\t\tPGJoinExpr *n = makeNode(PGJoinExpr);\n@@ -23760,8 +23884,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 705:\n-#line 1259 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 709:\n+#line 1266 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGJoinExpr *n = makeNode(PGJoinExpr);\n \t\t\t\t\tn->jointype = (yyvsp[(3) - (6)].jtype);\n@@ -23777,8 +23901,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 706:\n-#line 1273 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 710:\n+#line 1280 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGJoinExpr *n = makeNode(PGJoinExpr);\n \t\t\t\t\tn->jointype = PG_JOIN_INNER;\n@@ -23794,8 +23918,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 707:\n-#line 1287 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 711:\n+#line 1294 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t/* POSITIONAL JOIN is a coordinated scan */\n \t\t\t\t\tPGJoinExpr *n = makeNode(PGJoinExpr);\n@@ -23810,8 +23934,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 708:\n-#line 1300 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 712:\n+#line 1307 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n                     /* ANTI JOIN is a filter */\n                     PGJoinExpr *n = makeNode(PGJoinExpr);\n@@ -23828,8 +23952,8 @@ YYLTYPE yylloc;\n                 ;}\n     break;\n \n-  case 709:\n-#line 1315 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 713:\n+#line 1322 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n                    /* SEMI JOIN is also a filter */\n                    PGJoinExpr *n = makeNode(PGJoinExpr);\n@@ -23847,8 +23971,8 @@ YYLTYPE yylloc;\n                ;}\n     break;\n \n-  case 710:\n-#line 1334 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 714:\n+#line 1341 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.alias) = makeNode(PGAlias);\n \t\t\t\t\t(yyval.alias)->aliasname = (yyvsp[(2) - (5)].str);\n@@ -23856,16 +23980,16 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 711:\n-#line 1340 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 715:\n+#line 1347 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.alias) = makeNode(PGAlias);\n \t\t\t\t\t(yyval.alias)->aliasname = (yyvsp[(2) - (2)].str);\n \t\t\t\t;}\n     break;\n \n-  case 712:\n-#line 1345 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 716:\n+#line 1352 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.alias) = makeNode(PGAlias);\n \t\t\t\t\t(yyval.alias)->aliasname = (yyvsp[(1) - (4)].str);\n@@ -23873,40 +23997,40 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 713:\n-#line 1351 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 717:\n+#line 1358 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.alias) = makeNode(PGAlias);\n \t\t\t\t\t(yyval.alias)->aliasname = (yyvsp[(1) - (1)].str);\n \t\t\t\t;}\n     break;\n \n-  case 714:\n-#line 1357 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 718:\n+#line 1364 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.alias) = (yyvsp[(1) - (1)].alias); ;}\n     break;\n \n-  case 715:\n-#line 1358 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 719:\n+#line 1365 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.alias) = NULL; ;}\n     break;\n \n-  case 716:\n-#line 1367 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 720:\n+#line 1374 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.list) = list_make2((yyvsp[(1) - (1)].alias), NIL);\n \t\t\t\t;}\n     break;\n \n-  case 717:\n-#line 1371 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 721:\n+#line 1378 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.list) = list_make2(NULL, (yyvsp[(3) - (4)].list));\n \t\t\t\t;}\n     break;\n \n-  case 718:\n-#line 1375 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 722:\n+#line 1382 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGAlias *a = makeNode(PGAlias);\n \t\t\t\t\ta->aliasname = (yyvsp[(2) - (5)].str);\n@@ -23914,8 +24038,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 719:\n-#line 1381 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 723:\n+#line 1388 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGAlias *a = makeNode(PGAlias);\n \t\t\t\t\ta->aliasname = (yyvsp[(1) - (4)].str);\n@@ -23923,65 +24047,65 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 720:\n-#line 1387 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 724:\n+#line 1394 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.list) = list_make2(NULL, NIL);\n \t\t\t\t;}\n     break;\n \n-  case 721:\n-#line 1392 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 725:\n+#line 1399 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.jtype) = PG_JOIN_FULL; ;}\n     break;\n \n-  case 722:\n-#line 1393 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 726:\n+#line 1400 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.jtype) = PG_JOIN_LEFT; ;}\n     break;\n \n-  case 723:\n-#line 1394 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 727:\n+#line 1401 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.jtype) = PG_JOIN_RIGHT; ;}\n     break;\n \n-  case 724:\n-#line 1395 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 728:\n+#line 1402 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.jtype) = PG_JOIN_SEMI; ;}\n     break;\n \n-  case 725:\n-#line 1396 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 729:\n+#line 1403 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.jtype) = PG_JOIN_ANTI; ;}\n     break;\n \n-  case 726:\n-#line 1397 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 730:\n+#line 1404 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.jtype) = PG_JOIN_INNER; ;}\n     break;\n \n-  case 727:\n-#line 1401 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 731:\n+#line 1408 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = NULL; ;}\n     break;\n \n-  case 728:\n-#line 1402 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 732:\n+#line 1409 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = NULL; ;}\n     break;\n \n-  case 729:\n-#line 1414 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 733:\n+#line 1421 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (PGNode *) (yyvsp[(3) - (4)].list); ;}\n     break;\n \n-  case 730:\n-#line 1415 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 734:\n+#line 1422 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (yyvsp[(2) - (2)].node); ;}\n     break;\n \n-  case 731:\n-#line 1421 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 735:\n+#line 1428 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t/* inheritance query, implicitly */\n \t\t\t\t\t(yyval.range) = (yyvsp[(1) - (1)].range);\n@@ -23990,8 +24114,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 732:\n-#line 1428 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 736:\n+#line 1435 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t/* inheritance query, explicitly */\n \t\t\t\t\t(yyval.range) = (yyvsp[(1) - (2)].range);\n@@ -24000,8 +24124,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 733:\n-#line 1435 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 737:\n+#line 1442 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t/* no inheritance */\n \t\t\t\t\t(yyval.range) = (yyvsp[(2) - (2)].range);\n@@ -24010,8 +24134,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 734:\n-#line 1442 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 738:\n+#line 1449 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t/* no inheritance, SQL99-style syntax */\n \t\t\t\t\t(yyval.range) = (yyvsp[(3) - (4)].range);\n@@ -24020,8 +24144,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 735:\n-#line 1474 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 739:\n+#line 1481 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGRangeFunction *n = makeNode(PGRangeFunction);\n \t\t\t\t\tn->lateral = false;\n@@ -24034,8 +24158,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 736:\n-#line 1485 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 740:\n+#line 1492 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGRangeFunction *n = makeNode(PGRangeFunction);\n \t\t\t\t\tn->lateral = false;\n@@ -24048,67 +24172,67 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 737:\n-#line 1498 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 741:\n+#line 1505 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make2((yyvsp[(1) - (2)].node), (yyvsp[(2) - (2)].list)); ;}\n     break;\n \n-  case 738:\n-#line 1502 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 742:\n+#line 1509 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make1((yyvsp[(1) - (1)].list)); ;}\n     break;\n \n-  case 739:\n-#line 1503 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 743:\n+#line 1510 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].list)); ;}\n     break;\n \n-  case 740:\n-#line 1506 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 744:\n+#line 1513 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = (yyvsp[(3) - (4)].list); ;}\n     break;\n \n-  case 741:\n-#line 1507 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 745:\n+#line 1514 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = NIL; ;}\n     break;\n \n-  case 742:\n-#line 1510 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 746:\n+#line 1517 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.boolean) = true; ;}\n     break;\n \n-  case 743:\n-#line 1511 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 747:\n+#line 1518 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.boolean) = false; ;}\n     break;\n \n-  case 744:\n-#line 1516 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 748:\n+#line 1523 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (yyvsp[(2) - (2)].node); ;}\n     break;\n \n-  case 745:\n-#line 1517 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 749:\n+#line 1524 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = NULL; ;}\n     break;\n \n-  case 746:\n-#line 1523 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 750:\n+#line 1530 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.list) = list_make1((yyvsp[(1) - (1)].node));\n \t\t\t\t;}\n     break;\n \n-  case 747:\n-#line 1527 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 751:\n+#line 1534 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node));\n \t\t\t\t;}\n     break;\n \n-  case 748:\n-#line 1533 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 752:\n+#line 1540 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGColumnDef *n = makeNode(PGColumnDef);\n \t\t\t\t\tn->colname = (yyvsp[(1) - (3)].str);\n@@ -24128,8 +24252,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 749:\n-#line 1554 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 753:\n+#line 1561 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGCollateClause *n = makeNode(PGCollateClause);\n \t\t\t\t\tn->arg = NULL;\n@@ -24139,45 +24263,45 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 750:\n-#line 1561 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 754:\n+#line 1568 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = NULL; ;}\n     break;\n \n-  case 751:\n-#line 1574 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 755:\n+#line 1581 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n              (yyval.list) = list_make1(list_make2(makeString((yyvsp[(1) - (2)].str)), (yyvsp[(2) - (2)].typnam)));\n             ;}\n     break;\n \n-  case 752:\n-#line 1577 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 756:\n+#line 1584 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n              (yyval.list) = lappend((yyvsp[(1) - (4)].list), list_make2(makeString((yyvsp[(3) - (4)].str)), (yyvsp[(4) - (4)].typnam)));\n             ;}\n     break;\n \n-  case 755:\n-#line 1584 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 759:\n+#line 1591 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.typnam) = (yyvsp[(1) - (1)].typnam); ;}\n     break;\n \n-  case 756:\n-#line 1585 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 760:\n+#line 1592 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.typnam) = NULL; ;}\n     break;\n \n-  case 757:\n-#line 1588 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 761:\n+#line 1595 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.typnam) = (yyvsp[(1) - (2)].typnam);\n \t\t\t\t\t(yyval.typnam)->arrayBounds = (yyvsp[(2) - (2)].list);\n \t\t\t\t;}\n     break;\n \n-  case 758:\n-#line 1593 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 762:\n+#line 1600 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.typnam) = (yyvsp[(2) - (3)].typnam);\n \t\t\t\t\t(yyval.typnam)->arrayBounds = (yyvsp[(3) - (3)].list);\n@@ -24185,16 +24309,16 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 759:\n-#line 1600 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 763:\n+#line 1607 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.typnam) = (yyvsp[(1) - (5)].typnam);\n \t\t\t\t\t(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[(4) - (5)].ival)));\n \t\t\t\t;}\n     break;\n \n-  case 760:\n-#line 1605 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 764:\n+#line 1612 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.typnam) = (yyvsp[(2) - (6)].typnam);\n \t\t\t\t\t(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[(5) - (6)].ival)));\n@@ -24202,16 +24326,16 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 761:\n-#line 1611 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 765:\n+#line 1618 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.typnam) = (yyvsp[(1) - (2)].typnam);\n \t\t\t\t\t(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));\n \t\t\t\t;}\n     break;\n \n-  case 762:\n-#line 1616 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 766:\n+#line 1623 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.typnam) = (yyvsp[(2) - (3)].typnam);\n \t\t\t\t\t(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));\n@@ -24219,8 +24343,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 763:\n-#line 1621 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 767:\n+#line 1628 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n                (yyval.typnam) = SystemTypeName(\"struct\");\n                (yyval.typnam)->arrayBounds = (yyvsp[(5) - (5)].list);\n@@ -24229,8 +24353,8 @@ YYLTYPE yylloc;\n                ;}\n     break;\n \n-  case 764:\n-#line 1627 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 768:\n+#line 1634 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n                (yyval.typnam) = SystemTypeName(\"map\");\n                (yyval.typnam)->arrayBounds = (yyvsp[(5) - (5)].list);\n@@ -24239,8 +24363,8 @@ YYLTYPE yylloc;\n \t\t\t;}\n     break;\n \n-  case 765:\n-#line 1633 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 769:\n+#line 1640 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t   (yyval.typnam) = SystemTypeName(\"union\");\n \t\t\t   (yyval.typnam)->arrayBounds = (yyvsp[(5) - (5)].list);\n@@ -24249,56 +24373,56 @@ YYLTYPE yylloc;\n \t\t\t;}\n     break;\n \n-  case 766:\n-#line 1643 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 770:\n+#line 1650 \"third_party/libpg_query/grammar/statements/select.y\"\n     {  (yyval.list) = lappend((yyvsp[(1) - (3)].list), makeInteger(-1)); ;}\n     break;\n \n-  case 767:\n-#line 1645 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 771:\n+#line 1652 \"third_party/libpg_query/grammar/statements/select.y\"\n     {  (yyval.list) = lappend((yyvsp[(1) - (4)].list), makeInteger((yyvsp[(3) - (4)].ival))); ;}\n     break;\n \n-  case 768:\n-#line 1647 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 772:\n+#line 1654 \"third_party/libpg_query/grammar/statements/select.y\"\n     {  (yyval.list) = NIL; ;}\n     break;\n \n-  case 769:\n-#line 1651 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 773:\n+#line 1658 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.typnam) = (yyvsp[(1) - (1)].typnam); ;}\n     break;\n \n-  case 770:\n-#line 1652 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 774:\n+#line 1659 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.typnam) = (yyvsp[(1) - (1)].typnam); ;}\n     break;\n \n-  case 771:\n-#line 1653 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 775:\n+#line 1660 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.typnam) = (yyvsp[(1) - (1)].typnam); ;}\n     break;\n \n-  case 772:\n-#line 1654 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 776:\n+#line 1661 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.typnam) = (yyvsp[(1) - (1)].typnam); ;}\n     break;\n \n-  case 773:\n-#line 1655 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 777:\n+#line 1662 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.typnam) = (yyvsp[(1) - (1)].typnam); ;}\n     break;\n \n-  case 774:\n-#line 1657 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 778:\n+#line 1664 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.typnam) = (yyvsp[(1) - (2)].typnam);\n \t\t\t\t\t(yyval.typnam)->typmods = (yyvsp[(2) - (2)].list);\n \t\t\t\t;}\n     break;\n \n-  case 775:\n-#line 1662 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 779:\n+#line 1669 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.typnam) = (yyvsp[(1) - (4)].typnam);\n \t\t\t\t\t(yyval.typnam)->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),\n@@ -24306,28 +24430,28 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 776:\n-#line 1681 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 780:\n+#line 1688 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.typnam) = (yyvsp[(1) - (1)].typnam); ;}\n     break;\n \n-  case 777:\n-#line 1682 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 781:\n+#line 1689 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.typnam) = (yyvsp[(1) - (1)].typnam); ;}\n     break;\n \n-  case 778:\n-#line 1683 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 782:\n+#line 1690 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.typnam) = (yyvsp[(1) - (1)].typnam); ;}\n     break;\n \n-  case 779:\n-#line 1684 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 783:\n+#line 1691 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.typnam) = (yyvsp[(1) - (1)].typnam); ;}\n     break;\n \n-  case 780:\n-#line 1696 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 784:\n+#line 1703 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.typnam) = makeTypeName((yyvsp[(1) - (2)].str));\n \t\t\t\t\t(yyval.typnam)->typmods = (yyvsp[(2) - (2)].list);\n@@ -24335,74 +24459,74 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 781:\n-#line 1709 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 785:\n+#line 1716 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = (yyvsp[(2) - (3)].list); ;}\n     break;\n \n-  case 782:\n-#line 1710 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 786:\n+#line 1717 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = NIL; ;}\n     break;\n \n-  case 783:\n-#line 1717 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 787:\n+#line 1724 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.typnam) = SystemTypeName(\"int4\");\n \t\t\t\t\t(yyval.typnam)->location = (yylsp[(1) - (1)]);\n \t\t\t\t;}\n     break;\n \n-  case 784:\n-#line 1722 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 788:\n+#line 1729 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.typnam) = SystemTypeName(\"int4\");\n \t\t\t\t\t(yyval.typnam)->location = (yylsp[(1) - (1)]);\n \t\t\t\t;}\n     break;\n \n-  case 785:\n-#line 1727 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 789:\n+#line 1734 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.typnam) = SystemTypeName(\"int2\");\n \t\t\t\t\t(yyval.typnam)->location = (yylsp[(1) - (1)]);\n \t\t\t\t;}\n     break;\n \n-  case 786:\n-#line 1732 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 790:\n+#line 1739 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.typnam) = SystemTypeName(\"int8\");\n \t\t\t\t\t(yyval.typnam)->location = (yylsp[(1) - (1)]);\n \t\t\t\t;}\n     break;\n \n-  case 787:\n-#line 1737 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 791:\n+#line 1744 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.typnam) = SystemTypeName(\"float4\");\n \t\t\t\t\t(yyval.typnam)->location = (yylsp[(1) - (1)]);\n \t\t\t\t;}\n     break;\n \n-  case 788:\n-#line 1742 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 792:\n+#line 1749 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.typnam) = (yyvsp[(2) - (2)].typnam);\n \t\t\t\t\t(yyval.typnam)->location = (yylsp[(1) - (2)]);\n \t\t\t\t;}\n     break;\n \n-  case 789:\n-#line 1747 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 793:\n+#line 1754 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.typnam) = SystemTypeName(\"float8\");\n \t\t\t\t\t(yyval.typnam)->location = (yylsp[(1) - (2)]);\n \t\t\t\t;}\n     break;\n \n-  case 790:\n-#line 1752 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 794:\n+#line 1759 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.typnam) = SystemTypeName(\"numeric\");\n \t\t\t\t\t(yyval.typnam)->typmods = (yyvsp[(2) - (2)].list);\n@@ -24410,8 +24534,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 791:\n-#line 1758 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 795:\n+#line 1765 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.typnam) = SystemTypeName(\"numeric\");\n \t\t\t\t\t(yyval.typnam)->typmods = (yyvsp[(2) - (2)].list);\n@@ -24419,8 +24543,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 792:\n-#line 1764 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 796:\n+#line 1771 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.typnam) = SystemTypeName(\"numeric\");\n \t\t\t\t\t(yyval.typnam)->typmods = (yyvsp[(2) - (2)].list);\n@@ -24428,16 +24552,16 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 793:\n-#line 1770 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 797:\n+#line 1777 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.typnam) = SystemTypeName(\"bool\");\n \t\t\t\t\t(yyval.typnam)->location = (yylsp[(1) - (1)]);\n \t\t\t\t;}\n     break;\n \n-  case 794:\n-#line 1777 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 798:\n+#line 1784 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t/*\n \t\t\t\t\t * Check FLOAT() precision limits assuming IEEE floating\n@@ -24460,44 +24584,44 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 795:\n-#line 1798 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 799:\n+#line 1805 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.typnam) = SystemTypeName(\"float4\");\n \t\t\t\t;}\n     break;\n \n-  case 796:\n-#line 1808 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 800:\n+#line 1815 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.typnam) = (yyvsp[(1) - (1)].typnam);\n \t\t\t\t;}\n     break;\n \n-  case 797:\n-#line 1812 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 801:\n+#line 1819 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.typnam) = (yyvsp[(1) - (1)].typnam);\n \t\t\t\t;}\n     break;\n \n-  case 798:\n-#line 1820 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 802:\n+#line 1827 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.typnam) = (yyvsp[(1) - (1)].typnam);\n \t\t\t\t;}\n     break;\n \n-  case 799:\n-#line 1824 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 803:\n+#line 1831 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.typnam) = (yyvsp[(1) - (1)].typnam);\n \t\t\t\t\t(yyval.typnam)->typmods = NIL;\n \t\t\t\t;}\n     break;\n \n-  case 800:\n-#line 1832 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 804:\n+#line 1839 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tconst char *typname;\n \n@@ -24508,8 +24632,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 801:\n-#line 1844 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 805:\n+#line 1851 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t/* bit defaults to bit(1), varbit to no limit */\n \t\t\t\t\tif ((yyvsp[(2) - (2)].boolean))\n@@ -24525,29 +24649,29 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 802:\n-#line 1865 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 806:\n+#line 1872 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.typnam) = (yyvsp[(1) - (1)].typnam);\n \t\t\t\t;}\n     break;\n \n-  case 803:\n-#line 1869 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 807:\n+#line 1876 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.typnam) = (yyvsp[(1) - (1)].typnam);\n \t\t\t\t;}\n     break;\n \n-  case 804:\n-#line 1875 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 808:\n+#line 1882 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.typnam) = (yyvsp[(1) - (1)].typnam);\n \t\t\t\t;}\n     break;\n \n-  case 805:\n-#line 1879 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 809:\n+#line 1886 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t/* Length was not specified so allow to be unrestricted.\n \t\t\t\t\t * This handles problems with fixed-length (bpchar) strings\n@@ -24560,8 +24684,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 806:\n-#line 1892 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 810:\n+#line 1899 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.typnam) = SystemTypeName((yyvsp[(1) - (4)].conststr));\n \t\t\t\t\t(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[(3) - (4)].ival), (yylsp[(3) - (4)])));\n@@ -24569,8 +24693,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 807:\n-#line 1900 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 811:\n+#line 1907 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.typnam) = SystemTypeName((yyvsp[(1) - (1)].conststr));\n \t\t\t\t\t/* char defaults to char(1), varchar to no limit */\n@@ -24580,48 +24704,48 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 808:\n-#line 1910 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 812:\n+#line 1917 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.conststr) = (yyvsp[(2) - (2)].boolean) ? \"varchar\": \"bpchar\"; ;}\n     break;\n \n-  case 809:\n-#line 1912 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 813:\n+#line 1919 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.conststr) = (yyvsp[(2) - (2)].boolean) ? \"varchar\": \"bpchar\"; ;}\n     break;\n \n-  case 810:\n-#line 1914 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 814:\n+#line 1921 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.conststr) = \"varchar\"; ;}\n     break;\n \n-  case 811:\n-#line 1916 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 815:\n+#line 1923 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.conststr) = (yyvsp[(3) - (3)].boolean) ? \"varchar\": \"bpchar\"; ;}\n     break;\n \n-  case 812:\n-#line 1918 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 816:\n+#line 1925 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.conststr) = (yyvsp[(3) - (3)].boolean) ? \"varchar\": \"bpchar\"; ;}\n     break;\n \n-  case 813:\n-#line 1920 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 817:\n+#line 1927 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.conststr) = (yyvsp[(2) - (2)].boolean) ? \"varchar\": \"bpchar\"; ;}\n     break;\n \n-  case 814:\n-#line 1924 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 818:\n+#line 1931 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.boolean) = true; ;}\n     break;\n \n-  case 815:\n-#line 1925 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 819:\n+#line 1932 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.boolean) = false; ;}\n     break;\n \n-  case 816:\n-#line 1933 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 820:\n+#line 1940 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tif ((yyvsp[(5) - (5)].boolean))\n \t\t\t\t\t\t(yyval.typnam) = SystemTypeName(\"timestamptz\");\n@@ -24632,8 +24756,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 817:\n-#line 1942 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 821:\n+#line 1949 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tif ((yyvsp[(2) - (2)].boolean))\n \t\t\t\t\t\t(yyval.typnam) = SystemTypeName(\"timestamptz\");\n@@ -24643,8 +24767,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 818:\n-#line 1950 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 822:\n+#line 1957 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tif ((yyvsp[(5) - (5)].boolean))\n \t\t\t\t\t\t(yyval.typnam) = SystemTypeName(\"timetz\");\n@@ -24655,8 +24779,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 819:\n-#line 1959 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 823:\n+#line 1966 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tif ((yyvsp[(2) - (2)].boolean))\n \t\t\t\t\t\t(yyval.typnam) = SystemTypeName(\"timetz\");\n@@ -24666,87 +24790,87 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 820:\n-#line 1970 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 824:\n+#line 1977 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.typnam) = SystemTypeName(\"interval\");\n \t\t\t\t\t(yyval.typnam)->location = (yylsp[(1) - (1)]);\n \t\t\t\t;}\n     break;\n \n-  case 821:\n-#line 1977 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 825:\n+#line 1984 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.boolean) = true; ;}\n     break;\n \n-  case 822:\n-#line 1978 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 826:\n+#line 1985 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.boolean) = false; ;}\n     break;\n \n-  case 823:\n-#line 1979 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 827:\n+#line 1986 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.boolean) = false; ;}\n     break;\n \n-  case 840:\n-#line 2008 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 844:\n+#line 2015 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR), (yylsp[(1) - (1)]))); ;}\n     break;\n \n-  case 841:\n-#line 2010 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 845:\n+#line 2017 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MONTH), (yylsp[(1) - (1)]))); ;}\n     break;\n \n-  case 842:\n-#line 2012 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 846:\n+#line 2019 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY), (yylsp[(1) - (1)]))); ;}\n     break;\n \n-  case 843:\n-#line 2014 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 847:\n+#line 2021 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR), (yylsp[(1) - (1)]))); ;}\n     break;\n \n-  case 844:\n-#line 2016 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 848:\n+#line 2023 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE), (yylsp[(1) - (1)]))); ;}\n     break;\n \n-  case 845:\n-#line 2018 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 849:\n+#line 2025 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(SECOND), (yylsp[(1) - (1)]))); ;}\n     break;\n \n-  case 846:\n-#line 2020 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 850:\n+#line 2027 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MILLISECOND), (yylsp[(1) - (1)]))); ;}\n     break;\n \n-  case 847:\n-#line 2022 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 851:\n+#line 2029 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MICROSECOND), (yylsp[(1) - (1)]))); ;}\n     break;\n \n-  case 848:\n-#line 2024 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 852:\n+#line 2031 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR) |\n \t\t\t\t\t\t\t\t\t\t\t\t INTERVAL_MASK(MONTH), (yylsp[(1) - (3)])));\n \t\t\t\t;}\n     break;\n \n-  case 849:\n-#line 2029 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 853:\n+#line 2036 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |\n \t\t\t\t\t\t\t\t\t\t\t\t INTERVAL_MASK(HOUR), (yylsp[(1) - (3)])));\n \t\t\t\t;}\n     break;\n \n-  case 850:\n-#line 2034 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 854:\n+#line 2041 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |\n \t\t\t\t\t\t\t\t\t\t\t\t INTERVAL_MASK(HOUR) |\n@@ -24754,8 +24878,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 851:\n-#line 2040 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 855:\n+#line 2047 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |\n \t\t\t\t\t\t\t\t\t\t\t\t INTERVAL_MASK(HOUR) |\n@@ -24764,16 +24888,16 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 852:\n-#line 2047 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 856:\n+#line 2054 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |\n \t\t\t\t\t\t\t\t\t\t\t\t INTERVAL_MASK(MINUTE), (yylsp[(1) - (3)])));\n \t\t\t\t;}\n     break;\n \n-  case 853:\n-#line 2052 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 857:\n+#line 2059 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |\n \t\t\t\t\t\t\t\t\t\t\t\t INTERVAL_MASK(MINUTE) |\n@@ -24781,31 +24905,31 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 854:\n-#line 2058 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 858:\n+#line 2065 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE) |\n \t\t\t\t\t\t\t\t\t\t\t\t INTERVAL_MASK(SECOND), (yylsp[(1) - (3)])));\n \t\t\t\t;}\n     break;\n \n-  case 855:\n-#line 2063 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 859:\n+#line 2070 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = NIL; ;}\n     break;\n \n-  case 856:\n-#line 2094 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 860:\n+#line 2101 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}\n     break;\n \n-  case 857:\n-#line 2097 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 861:\n+#line 2104 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = makeTypeCast((yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].typnam), 0, (yylsp[(2) - (3)])); ;}\n     break;\n \n-  case 858:\n-#line 2099 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 862:\n+#line 2106 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGCollateClause *n = makeNode(PGCollateClause);\n \t\t\t\t\tn->arg = (yyvsp[(1) - (3)].node);\n@@ -24815,8 +24939,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 859:\n-#line 2107 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 863:\n+#line 2114 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName(\"timezone\"),\n \t\t\t\t\t\t\t\t\t\t\t   list_make2((yyvsp[(5) - (5)].node), (yyvsp[(1) - (5)].node)),\n@@ -24824,139 +24948,139 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 860:\n-#line 2122 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 864:\n+#line 2129 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, \"+\", NULL, (yyvsp[(2) - (2)].node), (yylsp[(1) - (2)])); ;}\n     break;\n \n-  case 861:\n-#line 2124 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 865:\n+#line 2131 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = doNegate((yyvsp[(2) - (2)].node), (yylsp[(1) - (2)])); ;}\n     break;\n \n-  case 862:\n-#line 2126 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 866:\n+#line 2133 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, \"+\", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}\n     break;\n \n-  case 863:\n-#line 2128 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 867:\n+#line 2135 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, \"-\", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}\n     break;\n \n-  case 864:\n-#line 2130 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 868:\n+#line 2137 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, \"*\", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}\n     break;\n \n-  case 865:\n-#line 2132 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 869:\n+#line 2139 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, \"/\", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}\n     break;\n \n-  case 866:\n-#line 2134 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 870:\n+#line 2141 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, \"//\", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}\n     break;\n \n-  case 867:\n-#line 2136 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 871:\n+#line 2143 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, \"%\", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}\n     break;\n \n-  case 868:\n-#line 2138 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 872:\n+#line 2145 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, \"^\", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}\n     break;\n \n-  case 869:\n-#line 2140 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 873:\n+#line 2147 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, \"**\", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}\n     break;\n \n-  case 870:\n-#line 2142 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 874:\n+#line 2149 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, \"<\", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}\n     break;\n \n-  case 871:\n-#line 2144 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 875:\n+#line 2151 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, \">\", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}\n     break;\n \n-  case 872:\n-#line 2146 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 876:\n+#line 2153 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, \"=\", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}\n     break;\n \n-  case 873:\n-#line 2148 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 877:\n+#line 2155 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, \"<=\", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}\n     break;\n \n-  case 874:\n-#line 2150 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 878:\n+#line 2157 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, \">=\", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}\n     break;\n \n-  case 875:\n-#line 2152 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 879:\n+#line 2159 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, \"<>\", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}\n     break;\n \n-  case 876:\n-#line 2155 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 880:\n+#line 2162 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[(2) - (3)].list), (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}\n     break;\n \n-  case 877:\n-#line 2157 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 881:\n+#line 2164 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[(1) - (2)].list), NULL, (yyvsp[(2) - (2)].node), (yylsp[(1) - (2)])); ;}\n     break;\n \n-  case 878:\n-#line 2159 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 882:\n+#line 2166 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[(2) - (2)].list), (yyvsp[(1) - (2)].node), NULL, (yylsp[(2) - (2)])); ;}\n     break;\n \n-  case 879:\n-#line 2162 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 883:\n+#line 2169 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = makeAndExpr((yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}\n     break;\n \n-  case 880:\n-#line 2164 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 884:\n+#line 2171 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = makeOrExpr((yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}\n     break;\n \n-  case 881:\n-#line 2166 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 885:\n+#line 2173 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = makeNotExpr((yyvsp[(2) - (2)].node), (yylsp[(1) - (2)])); ;}\n     break;\n \n-  case 882:\n-#line 2168 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 886:\n+#line 2175 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = makeNotExpr((yyvsp[(2) - (2)].node), (yylsp[(1) - (2)])); ;}\n     break;\n \n-  case 883:\n-#line 2170 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 887:\n+#line 2177 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_GLOB, \"~~~\",\n \t\t\t\t\t\t\t\t\t\t\t\t   (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)]));\n \t\t\t\t;}\n     break;\n \n-  case 884:\n-#line 2175 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 888:\n+#line 2182 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, \"~~\",\n \t\t\t\t\t\t\t\t\t\t\t\t   (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)]));\n \t\t\t\t;}\n     break;\n \n-  case 885:\n-#line 2180 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 889:\n+#line 2187 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGFuncCall *n = makeFuncCall(SystemFuncName(\"like_escape\"),\n \t\t\t\t\t\t\t\t\t\t\t   list_make3((yyvsp[(1) - (5)].node), (yyvsp[(3) - (5)].node), (yyvsp[(5) - (5)].node)),\n@@ -24965,16 +25089,16 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 886:\n-#line 2187 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 890:\n+#line 2194 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, \"!~~\",\n \t\t\t\t\t\t\t\t\t\t\t\t   (yyvsp[(1) - (4)].node), (yyvsp[(4) - (4)].node), (yylsp[(2) - (4)]));\n \t\t\t\t;}\n     break;\n \n-  case 887:\n-#line 2192 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 891:\n+#line 2199 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGFuncCall *n = makeFuncCall(SystemFuncName(\"not_like_escape\"),\n \t\t\t\t\t\t\t\t\t\t\t   list_make3((yyvsp[(1) - (6)].node), (yyvsp[(4) - (6)].node), (yyvsp[(6) - (6)].node)),\n@@ -24983,16 +25107,16 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 888:\n-#line 2199 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 892:\n+#line 2206 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, \"~~*\",\n \t\t\t\t\t\t\t\t\t\t\t\t   (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)]));\n \t\t\t\t;}\n     break;\n \n-  case 889:\n-#line 2204 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 893:\n+#line 2211 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGFuncCall *n = makeFuncCall(SystemFuncName(\"ilike_escape\"),\n \t\t\t\t\t\t\t\t\t\t\t   list_make3((yyvsp[(1) - (5)].node), (yyvsp[(3) - (5)].node), (yyvsp[(5) - (5)].node)),\n@@ -25001,16 +25125,16 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 890:\n-#line 2211 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 894:\n+#line 2218 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, \"!~~*\",\n \t\t\t\t\t\t\t\t\t\t\t\t   (yyvsp[(1) - (4)].node), (yyvsp[(4) - (4)].node), (yylsp[(2) - (4)]));\n \t\t\t\t;}\n     break;\n \n-  case 891:\n-#line 2216 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 895:\n+#line 2223 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGFuncCall *n = makeFuncCall(SystemFuncName(\"not_ilike_escape\"),\n \t\t\t\t\t\t\t\t\t\t\t   list_make3((yyvsp[(1) - (6)].node), (yyvsp[(4) - (6)].node), (yyvsp[(6) - (6)].node)),\n@@ -25019,8 +25143,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 892:\n-#line 2224 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 896:\n+#line 2231 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGFuncCall *n = makeFuncCall(SystemFuncName(\"similar_escape\"),\n \t\t\t\t\t\t\t\t\t\t\t   list_make2((yyvsp[(4) - (4)].node), makeNullAConst(-1)),\n@@ -25030,8 +25154,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 893:\n-#line 2232 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 897:\n+#line 2239 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGFuncCall *n = makeFuncCall(SystemFuncName(\"similar_escape\"),\n \t\t\t\t\t\t\t\t\t\t\t   list_make2((yyvsp[(4) - (6)].node), (yyvsp[(6) - (6)].node)),\n@@ -25041,8 +25165,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 894:\n-#line 2240 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 898:\n+#line 2247 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGFuncCall *n = makeFuncCall(SystemFuncName(\"similar_escape\"),\n \t\t\t\t\t\t\t\t\t\t\t   list_make2((yyvsp[(5) - (5)].node), makeNullAConst(-1)),\n@@ -25052,8 +25176,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 895:\n-#line 2248 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 899:\n+#line 2255 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGFuncCall *n = makeFuncCall(SystemFuncName(\"similar_escape\"),\n \t\t\t\t\t\t\t\t\t\t\t   list_make2((yyvsp[(5) - (7)].node), (yyvsp[(7) - (7)].node)),\n@@ -25063,8 +25187,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 896:\n-#line 2266 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 900:\n+#line 2273 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGNullTest *n = makeNode(PGNullTest);\n \t\t\t\t\tn->arg = (PGExpr *) (yyvsp[(1) - (3)].node);\n@@ -25074,8 +25198,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 897:\n-#line 2274 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 901:\n+#line 2281 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGNullTest *n = makeNode(PGNullTest);\n \t\t\t\t\tn->arg = (PGExpr *) (yyvsp[(1) - (2)].node);\n@@ -25085,8 +25209,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 898:\n-#line 2282 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 902:\n+#line 2289 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGNullTest *n = makeNode(PGNullTest);\n \t\t\t\t\tn->arg = (PGExpr *) (yyvsp[(1) - (4)].node);\n@@ -25096,8 +25220,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 899:\n-#line 2290 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 903:\n+#line 2297 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGNullTest *n = makeNode(PGNullTest);\n \t\t\t\t\tn->arg = (PGExpr *) (yyvsp[(1) - (3)].node);\n@@ -25107,8 +25231,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 900:\n-#line 2298 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 904:\n+#line 2305 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGNullTest *n = makeNode(PGNullTest);\n \t\t\t\t\tn->arg = (PGExpr *) (yyvsp[(1) - (2)].node);\n@@ -25118,8 +25242,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 901:\n-#line 2306 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 905:\n+#line 2313 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\tPGLambdaFunction *n = makeNode(PGLambdaFunction);\n \t\t\t\tn->lhs = (yyvsp[(1) - (3)].node);\n@@ -25129,15 +25253,15 @@ YYLTYPE yylloc;\n \t\t\t;}\n     break;\n \n-  case 902:\n-#line 2314 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 906:\n+#line 2321 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t\t\t(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, \"->>\", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)]));\n \t\t\t;}\n     break;\n \n-  case 903:\n-#line 2318 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 907:\n+#line 2325 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tif (list_length((yyvsp[(1) - (3)].list)) != 2)\n \t\t\t\t\t\tereport(ERROR,\n@@ -25155,8 +25279,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 904:\n-#line 2334 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 908:\n+#line 2341 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGBooleanTest *b = makeNode(PGBooleanTest);\n \t\t\t\t\tb->arg = (PGExpr *) (yyvsp[(1) - (3)].node);\n@@ -25166,8 +25290,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 905:\n-#line 2342 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 909:\n+#line 2349 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGBooleanTest *b = makeNode(PGBooleanTest);\n \t\t\t\t\tb->arg = (PGExpr *) (yyvsp[(1) - (4)].node);\n@@ -25177,8 +25301,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 906:\n-#line 2350 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 910:\n+#line 2357 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGBooleanTest *b = makeNode(PGBooleanTest);\n \t\t\t\t\tb->arg = (PGExpr *) (yyvsp[(1) - (3)].node);\n@@ -25188,8 +25312,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 907:\n-#line 2358 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 911:\n+#line 2365 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGBooleanTest *b = makeNode(PGBooleanTest);\n \t\t\t\t\tb->arg = (PGExpr *) (yyvsp[(1) - (4)].node);\n@@ -25199,8 +25323,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 908:\n-#line 2366 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 912:\n+#line 2373 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGBooleanTest *b = makeNode(PGBooleanTest);\n \t\t\t\t\tb->arg = (PGExpr *) (yyvsp[(1) - (3)].node);\n@@ -25210,8 +25334,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 909:\n-#line 2374 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 913:\n+#line 2381 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGBooleanTest *b = makeNode(PGBooleanTest);\n \t\t\t\t\tb->arg = (PGExpr *) (yyvsp[(1) - (4)].node);\n@@ -25221,36 +25345,36 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 910:\n-#line 2382 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 914:\n+#line 2389 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, \"=\", (yyvsp[(1) - (5)].node), (yyvsp[(5) - (5)].node), (yylsp[(2) - (5)]));\n \t\t\t\t;}\n     break;\n \n-  case 911:\n-#line 2386 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 915:\n+#line 2393 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, \"=\", (yyvsp[(1) - (6)].node), (yyvsp[(6) - (6)].node), (yylsp[(2) - (6)]));\n \t\t\t\t;}\n     break;\n \n-  case 912:\n-#line 2390 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 916:\n+#line 2397 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, \"=\", (yyvsp[(1) - (6)].node), (PGNode *) (yyvsp[(5) - (6)].list), (yylsp[(2) - (6)]));\n \t\t\t\t;}\n     break;\n \n-  case 913:\n-#line 2394 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 917:\n+#line 2401 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, \"<>\", (yyvsp[(1) - (7)].node), (PGNode *) (yyvsp[(6) - (7)].list), (yylsp[(2) - (7)]));\n \t\t\t\t;}\n     break;\n \n-  case 914:\n-#line 2398 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 918:\n+#line 2405 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN,\n \t\t\t\t\t\t\t\t\t\t\t\t   \"BETWEEN\",\n@@ -25260,8 +25384,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 915:\n-#line 2406 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 919:\n+#line 2413 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN,\n \t\t\t\t\t\t\t\t\t\t\t\t   \"NOT BETWEEN\",\n@@ -25271,8 +25395,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 916:\n-#line 2414 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 920:\n+#line 2421 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN_SYM,\n \t\t\t\t\t\t\t\t\t\t\t\t   \"BETWEEN SYMMETRIC\",\n@@ -25282,8 +25406,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 917:\n-#line 2422 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 921:\n+#line 2429 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN_SYM,\n \t\t\t\t\t\t\t\t\t\t\t\t   \"NOT BETWEEN SYMMETRIC\",\n@@ -25293,8 +25417,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 918:\n-#line 2430 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 922:\n+#line 2437 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t/* in_expr returns a PGSubLink or a list of a_exprs */\n \t\t\t\t\tif (IsA((yyvsp[(3) - (3)].node), PGSubLink))\n@@ -25316,8 +25440,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 919:\n-#line 2450 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 923:\n+#line 2457 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t/* in_expr returns a PGSubLink or a list of a_exprs */\n \t\t\t\t\tif (IsA((yyvsp[(4) - (4)].node), PGSubLink))\n@@ -25341,8 +25465,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 920:\n-#line 2472 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 924:\n+#line 2479 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGSubLink *n = makeNode(PGSubLink);\n \t\t\t\t\tn->subLinkType = (yyvsp[(3) - (4)].subquerytype);\n@@ -25355,8 +25479,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 921:\n-#line 2483 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 925:\n+#line 2490 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tif ((yyvsp[(3) - (6)].subquerytype) == PG_ANY_SUBLINK)\n \t\t\t\t\t\t(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ANY, (yyvsp[(2) - (6)].list), (yyvsp[(1) - (6)].node), (yyvsp[(5) - (6)].node), (yylsp[(2) - (6)]));\n@@ -25365,8 +25489,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 922:\n-#line 2490 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 926:\n+#line 2497 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t/*\n \t\t\t\t\t * The SQL spec only allows DEFAULT in \"contextually typed\n@@ -25382,8 +25506,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 923:\n-#line 2504 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 927:\n+#line 2511 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGAStar *star = makeNode(PGAStar);\n \t\t\t\t\tstar->expr = (yyvsp[(3) - (4)].node);\n@@ -25393,8 +25517,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 924:\n-#line 2512 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 928:\n+#line 2519 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGAStar *star = makeNode(PGAStar);\n \t\t\t\t\tstar->except_list = (yyvsp[(2) - (3)].list);\n@@ -25404,8 +25528,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 925:\n-#line 2520 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 929:\n+#line 2527 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGAStar *star = makeNode(PGAStar);\n \t\t\t\t\tstar->relation = (yyvsp[(1) - (5)].str);\n@@ -25416,149 +25540,149 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 926:\n-#line 2540 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 930:\n+#line 2547 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}\n     break;\n \n-  case 927:\n-#line 2542 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 931:\n+#line 2549 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = makeTypeCast((yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].typnam), 0, (yylsp[(2) - (3)])); ;}\n     break;\n \n-  case 928:\n-#line 2544 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 932:\n+#line 2551 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, \"+\", NULL, (yyvsp[(2) - (2)].node), (yylsp[(1) - (2)])); ;}\n     break;\n \n-  case 929:\n-#line 2546 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 933:\n+#line 2553 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = doNegate((yyvsp[(2) - (2)].node), (yylsp[(1) - (2)])); ;}\n     break;\n \n-  case 930:\n-#line 2548 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 934:\n+#line 2555 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, \"+\", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}\n     break;\n \n-  case 931:\n-#line 2550 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 935:\n+#line 2557 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, \"-\", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}\n     break;\n \n-  case 932:\n-#line 2552 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 936:\n+#line 2559 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, \"*\", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}\n     break;\n \n-  case 933:\n-#line 2554 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 937:\n+#line 2561 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, \"/\", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}\n     break;\n \n-  case 934:\n-#line 2556 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 938:\n+#line 2563 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, \"//\", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}\n     break;\n \n-  case 935:\n-#line 2558 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 939:\n+#line 2565 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, \"%\", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}\n     break;\n \n-  case 936:\n-#line 2560 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 940:\n+#line 2567 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, \"^\", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}\n     break;\n \n-  case 937:\n-#line 2562 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 941:\n+#line 2569 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, \"**\", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}\n     break;\n \n-  case 938:\n-#line 2564 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 942:\n+#line 2571 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, \"<\", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}\n     break;\n \n-  case 939:\n-#line 2566 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 943:\n+#line 2573 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, \">\", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}\n     break;\n \n-  case 940:\n-#line 2568 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 944:\n+#line 2575 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, \"=\", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}\n     break;\n \n-  case 941:\n-#line 2570 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 945:\n+#line 2577 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, \"<=\", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}\n     break;\n \n-  case 942:\n-#line 2572 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 946:\n+#line 2579 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, \">=\", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}\n     break;\n \n-  case 943:\n-#line 2574 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 947:\n+#line 2581 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, \"<>\", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}\n     break;\n \n-  case 944:\n-#line 2576 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 948:\n+#line 2583 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[(2) - (3)].list), (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}\n     break;\n \n-  case 945:\n-#line 2578 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 949:\n+#line 2585 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[(1) - (2)].list), NULL, (yyvsp[(2) - (2)].node), (yylsp[(1) - (2)])); ;}\n     break;\n \n-  case 946:\n-#line 2580 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 950:\n+#line 2587 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[(2) - (2)].list), (yyvsp[(1) - (2)].node), NULL, (yylsp[(2) - (2)])); ;}\n     break;\n \n-  case 947:\n-#line 2582 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 951:\n+#line 2589 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, \"=\", (yyvsp[(1) - (5)].node), (yyvsp[(5) - (5)].node), (yylsp[(2) - (5)]));\n \t\t\t\t;}\n     break;\n \n-  case 948:\n-#line 2586 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 952:\n+#line 2593 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, \"=\", (yyvsp[(1) - (6)].node), (yyvsp[(6) - (6)].node), (yylsp[(2) - (6)]));\n \t\t\t\t;}\n     break;\n \n-  case 949:\n-#line 2590 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 953:\n+#line 2597 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, \"=\", (yyvsp[(1) - (6)].node), (PGNode *) (yyvsp[(5) - (6)].list), (yylsp[(2) - (6)]));\n \t\t\t\t;}\n     break;\n \n-  case 950:\n-#line 2594 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 954:\n+#line 2601 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, \"<>\", (yyvsp[(1) - (7)].node), (PGNode *) (yyvsp[(6) - (7)].list), (yylsp[(2) - (7)]));\n \t\t\t\t;}\n     break;\n \n-  case 952:\n-#line 2608 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 956:\n+#line 2615 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\tPGFuncCall *n = makeFuncCall(SystemFuncName(\"row\"), (yyvsp[(1) - (1)].list), (yylsp[(1) - (1)]));\n \t\t\t\t(yyval.node) = (PGNode *) n;\n \t\t\t;}\n     break;\n \n-  case 953:\n-#line 2613 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 957:\n+#line 2620 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tif ((yyvsp[(2) - (2)].list))\n \t\t\t\t\t{\n@@ -25572,18 +25696,18 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 954:\n-#line 2626 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 958:\n+#line 2633 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}\n     break;\n \n-  case 955:\n-#line 2627 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 959:\n+#line 2634 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}\n     break;\n \n-  case 956:\n-#line 2629 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 960:\n+#line 2636 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGPositionalReference *n = makeNode(PGPositionalReference);\n \t\t\t\t\tn->position = (yyvsp[(2) - (2)].ival);\n@@ -25592,30 +25716,30 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 957:\n-#line 2636 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 961:\n+#line 2643 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = makeNamedParamRef((yyvsp[(2) - (2)].str), (yylsp[(1) - (2)]));\n \t\t\t\t;}\n     break;\n \n-  case 958:\n-#line 2639 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 962:\n+#line 2646 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\tPGFuncCall *n = makeFuncCall(SystemFuncName(\"list_value\"), (yyvsp[(2) - (3)].list), (yylsp[(2) - (3)]));\n \t\t\t\t(yyval.node) = (PGNode *) n;\n \t\t\t;}\n     break;\n \n-  case 959:\n-#line 2643 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 963:\n+#line 2650 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t(yyval.node) = (yyvsp[(1) - (1)].node);\n \t\t\t;}\n     break;\n \n-  case 960:\n-#line 2647 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 964:\n+#line 2654 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGSubLink *n = makeNode(PGSubLink);\n \t\t\t\t\tn->subLinkType = PG_ARRAY_SUBLINK;\n@@ -25628,8 +25752,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 961:\n-#line 2657 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 965:\n+#line 2664 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\tPGList *func_name = list_make1(makeString(\"construct_array\"));\n \t\t\t\tPGFuncCall *n = makeFuncCall(func_name, (yyvsp[(3) - (4)].list), (yylsp[(1) - (4)]));\n@@ -25637,13 +25761,13 @@ YYLTYPE yylloc;\n \t\t\t;}\n     break;\n \n-  case 962:\n-#line 2663 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 966:\n+#line 2670 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}\n     break;\n \n-  case 963:\n-#line 2665 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 967:\n+#line 2672 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGSubLink *n = makeNode(PGSubLink);\n \t\t\t\t\tn->subLinkType = PG_EXPR_SUBLINK;\n@@ -25656,8 +25780,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 964:\n-#line 2676 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 968:\n+#line 2683 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t/*\n \t\t\t\t\t * Because the select_with_parens nonterminal is designed\n@@ -25683,8 +25807,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 965:\n-#line 2700 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 969:\n+#line 2707 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGSubLink *n = makeNode(PGSubLink);\n \t\t\t\t\tn->subLinkType = PG_EXISTS_SUBLINK;\n@@ -25697,8 +25821,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 966:\n-#line 2711 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 970:\n+#line 2718 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t  PGGroupingFunc *g = makeNode(PGGroupingFunc);\n \t\t\t\t  g->args = (yyvsp[(3) - (4)].list);\n@@ -25707,15 +25831,15 @@ YYLTYPE yylloc;\n \t\t\t  ;}\n     break;\n \n-  case 967:\n-#line 2722 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 971:\n+#line 2729 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = makeParamRef(0, (yylsp[(1) - (1)]));\n \t\t\t\t;}\n     break;\n \n-  case 968:\n-#line 2726 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 972:\n+#line 2733 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGParamRef *p = makeNode(PGParamRef);\n \t\t\t\t\tp->number = (yyvsp[(1) - (1)].ival);\n@@ -25724,23 +25848,22 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 969:\n-#line 2733 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 973:\n+#line 2740 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = (yyvsp[(2) - (3)].node);\n \t\t\t\t;}\n     break;\n \n-  case 970:\n-#line 2737 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 974:\n+#line 2744 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n-\t\t\t\t\tPGFuncCall *f = makeFuncCall(SystemFuncName(\"struct_pack\"), (yyvsp[(2) - (3)].list), (yylsp[(2) - (3)]));\n-\t\t\t\t\t(yyval.node) = (PGNode *) f;\n+\t\t\t\t\t(yyval.node) = (yyvsp[(1) - (1)].node);\n \t\t\t\t;}\n     break;\n \n-  case 971:\n-#line 2742 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 975:\n+#line 2748 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGList *key_list = NULL;\n \t\t\t\t\tPGList *value_list = NULL;\n@@ -25759,22 +25882,30 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 972:\n-#line 2759 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 976:\n+#line 2765 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = (yyvsp[(1) - (1)].node);\n \t\t\t\t;}\n     break;\n \n-  case 973:\n-#line 2765 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 977:\n+#line 2773 \"third_party/libpg_query/grammar/statements/select.y\"\n+    {\n+\t\t\t\t\tPGFuncCall *f = makeFuncCall(SystemFuncName(\"struct_pack\"), (yyvsp[(2) - (3)].list), (yylsp[(2) - (3)]));\n+\t\t\t\t\t(yyval.node) = (PGNode *) f;\n+\t\t\t\t;}\n+    break;\n+\n+  case 978:\n+#line 2782 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = (PGNode *) makeFuncCall((yyvsp[(1) - (3)].list), NIL, (yylsp[(1) - (3)]));\n \t\t\t\t;}\n     break;\n \n-  case 974:\n-#line 2769 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 979:\n+#line 2786 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGFuncCall *n = makeFuncCall((yyvsp[(1) - (6)].list), (yyvsp[(3) - (6)].list), (yylsp[(1) - (6)]));\n \t\t\t\t\tn->agg_order = (yyvsp[(4) - (6)].list);\n@@ -25783,8 +25914,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 975:\n-#line 2776 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 980:\n+#line 2793 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGFuncCall *n = makeFuncCall((yyvsp[(1) - (7)].list), list_make1((yyvsp[(4) - (7)].node)), (yylsp[(1) - (7)]));\n \t\t\t\t\tn->func_variadic = true;\n@@ -25794,8 +25925,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 976:\n-#line 2784 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 981:\n+#line 2801 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGFuncCall *n = makeFuncCall((yyvsp[(1) - (9)].list), lappend((yyvsp[(3) - (9)].list), (yyvsp[(6) - (9)].node)), (yylsp[(1) - (9)]));\n \t\t\t\t\tn->func_variadic = true;\n@@ -25805,8 +25936,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 977:\n-#line 2792 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 982:\n+#line 2809 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGFuncCall *n = makeFuncCall((yyvsp[(1) - (7)].list), (yyvsp[(4) - (7)].list), (yylsp[(1) - (7)]));\n \t\t\t\t\tn->agg_order = (yyvsp[(5) - (7)].list);\n@@ -25819,8 +25950,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 978:\n-#line 2803 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 983:\n+#line 2820 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGFuncCall *n = makeFuncCall((yyvsp[(1) - (7)].list), (yyvsp[(4) - (7)].list), (yylsp[(1) - (7)]));\n \t\t\t\t\tn->agg_order = (yyvsp[(5) - (7)].list);\n@@ -25830,8 +25961,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 979:\n-#line 2823 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 984:\n+#line 2840 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGFuncCall *n = (PGFuncCall *) (yyvsp[(1) - (5)].node);\n \t\t\t\t\t/*\n@@ -25869,23 +26000,23 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 980:\n-#line 2859 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 985:\n+#line 2876 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}\n     break;\n \n-  case 981:\n-#line 2869 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 986:\n+#line 2886 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}\n     break;\n \n-  case 982:\n-#line 2870 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 987:\n+#line 2887 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}\n     break;\n \n-  case 983:\n-#line 2878 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 988:\n+#line 2895 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName(\"pg_collation_for\"),\n \t\t\t\t\t\t\t\t\t\t\t   list_make1((yyvsp[(4) - (5)].node)),\n@@ -25893,25 +26024,25 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 984:\n-#line 2884 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 989:\n+#line 2901 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = makeTypeCast((yyvsp[(3) - (6)].node), (yyvsp[(5) - (6)].typnam), 0, (yylsp[(1) - (6)])); ;}\n     break;\n \n-  case 985:\n-#line 2886 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 990:\n+#line 2903 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = makeTypeCast((yyvsp[(3) - (6)].node), (yyvsp[(5) - (6)].typnam), 1, (yylsp[(1) - (6)])); ;}\n     break;\n \n-  case 986:\n-#line 2888 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 991:\n+#line 2905 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName(\"date_part\"), (yyvsp[(3) - (4)].list), (yylsp[(1) - (4)]));\n \t\t\t\t;}\n     break;\n \n-  case 987:\n-#line 2892 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 992:\n+#line 2909 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t/* overlay(A PLACING B FROM C FOR D) is converted to\n \t\t\t\t\t * overlay(A, B, C, D)\n@@ -25922,16 +26053,16 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 988:\n-#line 2901 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 993:\n+#line 2918 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t/* position(A in B) is converted to position(B, A) */\n \t\t\t\t\t(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName(\"position\"), (yyvsp[(3) - (4)].list), (yylsp[(1) - (4)]));\n \t\t\t\t;}\n     break;\n \n-  case 989:\n-#line 2906 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 994:\n+#line 2923 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t/* substring(A from B for C) is converted to\n \t\t\t\t\t * substring(A, B, C) - thomas 2000-11-28\n@@ -25940,8 +26071,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 990:\n-#line 2913 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 995:\n+#line 2930 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t/* TREAT(expr AS target) converts expr of a particular type to target,\n \t\t\t\t\t * which is defined to be a subtype of the original expression.\n@@ -25958,8 +26089,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 991:\n-#line 2928 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 996:\n+#line 2945 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t/* various trim expressions are defined in SQL\n \t\t\t\t\t * - thomas 1997-07-19\n@@ -25968,36 +26099,36 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 992:\n-#line 2935 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 997:\n+#line 2952 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName(\"ltrim\"), (yyvsp[(4) - (5)].list), (yylsp[(1) - (5)]));\n \t\t\t\t;}\n     break;\n \n-  case 993:\n-#line 2939 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 998:\n+#line 2956 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName(\"rtrim\"), (yyvsp[(4) - (5)].list), (yylsp[(1) - (5)]));\n \t\t\t\t;}\n     break;\n \n-  case 994:\n-#line 2943 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 999:\n+#line 2960 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName(\"trim\"), (yyvsp[(3) - (4)].list), (yylsp[(1) - (4)]));\n \t\t\t\t;}\n     break;\n \n-  case 995:\n-#line 2947 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1000:\n+#line 2964 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NULLIF, \"=\", (yyvsp[(3) - (6)].node), (yyvsp[(5) - (6)].node), (yylsp[(1) - (6)]));\n \t\t\t\t;}\n     break;\n \n-  case 996:\n-#line 2951 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1001:\n+#line 2968 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGCoalesceExpr *c = makeNode(PGCoalesceExpr);\n \t\t\t\t\tc->args = (yyvsp[(3) - (4)].list);\n@@ -26006,8 +26137,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 997:\n-#line 2961 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1002:\n+#line 2978 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGLambdaFunction *lambda = makeNode(PGLambdaFunction);\n \t\t\t\t\tlambda->lhs = makeColumnRef((yyvsp[(4) - (7)].str), NIL, (yylsp[(4) - (7)]), yyscanner);\n@@ -26018,8 +26149,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 998:\n-#line 2970 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1003:\n+#line 2987 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGLambdaFunction *lambda = makeNode(PGLambdaFunction);\n \t\t\t\t\tlambda->lhs = makeColumnRef((yyvsp[(4) - (9)].str), NIL, (yylsp[(4) - (9)]), yyscanner);\n@@ -26036,63 +26167,63 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 999:\n-#line 2991 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1004:\n+#line 3008 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = (yyvsp[(4) - (5)].list); ;}\n     break;\n \n-  case 1000:\n-#line 2992 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1005:\n+#line 3009 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = NIL; ;}\n     break;\n \n-  case 1001:\n-#line 2996 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1006:\n+#line 3013 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (yyvsp[(4) - (5)].node); ;}\n     break;\n \n-  case 1002:\n-#line 2997 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1007:\n+#line 3014 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (yyvsp[(3) - (4)].node); ;}\n     break;\n \n-  case 1003:\n-#line 2998 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1008:\n+#line 3015 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = NULL; ;}\n     break;\n \n-  case 1004:\n-#line 3002 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1009:\n+#line 3019 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.boolean) = true; ;}\n     break;\n \n-  case 1005:\n-#line 3003 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1010:\n+#line 3020 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.boolean) = false; ;}\n     break;\n \n-  case 1006:\n-#line 3010 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1011:\n+#line 3027 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = (yyvsp[(2) - (2)].list); ;}\n     break;\n \n-  case 1007:\n-#line 3011 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1012:\n+#line 3028 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = NIL; ;}\n     break;\n \n-  case 1008:\n-#line 3015 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1013:\n+#line 3032 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make1((yyvsp[(1) - (1)].windef)); ;}\n     break;\n \n-  case 1009:\n-#line 3017 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1014:\n+#line 3034 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].windef)); ;}\n     break;\n \n-  case 1010:\n-#line 3022 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1015:\n+#line 3039 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGWindowDef *n = (yyvsp[(3) - (3)].windef);\n \t\t\t\t\tn->name = (yyvsp[(1) - (3)].str);\n@@ -26100,13 +26231,13 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1011:\n-#line 3030 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1016:\n+#line 3047 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.windef) = (yyvsp[(2) - (2)].windef); ;}\n     break;\n \n-  case 1012:\n-#line 3032 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1017:\n+#line 3049 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGWindowDef *n = makeNode(PGWindowDef);\n \t\t\t\t\tn->name = (yyvsp[(2) - (2)].str);\n@@ -26121,13 +26252,13 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1013:\n-#line 3045 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1018:\n+#line 3062 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.windef) = NULL; ;}\n     break;\n \n-  case 1014:\n-#line 3050 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1019:\n+#line 3067 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGWindowDef *n = makeNode(PGWindowDef);\n \t\t\t\t\tn->name = NULL;\n@@ -26143,28 +26274,28 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1015:\n-#line 3075 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1020:\n+#line 3092 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}\n     break;\n \n-  case 1016:\n-#line 3076 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1021:\n+#line 3093 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.str) = NULL; ;}\n     break;\n \n-  case 1017:\n-#line 3079 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1022:\n+#line 3096 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = (yyvsp[(3) - (3)].list); ;}\n     break;\n \n-  case 1018:\n-#line 3080 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1023:\n+#line 3097 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = NIL; ;}\n     break;\n \n-  case 1019:\n-#line 3092 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1024:\n+#line 3109 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGWindowDef *n = (yyvsp[(2) - (2)].windef);\n \t\t\t\t\tn->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_RANGE;\n@@ -26172,8 +26303,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1020:\n-#line 3098 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1025:\n+#line 3115 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGWindowDef *n = (yyvsp[(2) - (2)].windef);\n \t\t\t\t\tn->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_ROWS;\n@@ -26181,8 +26312,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1021:\n-#line 3104 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1026:\n+#line 3121 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGWindowDef *n = makeNode(PGWindowDef);\n \t\t\t\t\tn->frameOptions = FRAMEOPTION_DEFAULTS;\n@@ -26192,8 +26323,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1022:\n-#line 3114 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1027:\n+#line 3131 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGWindowDef *n = (yyvsp[(1) - (1)].windef);\n \t\t\t\t\t/* reject invalid cases */\n@@ -26212,8 +26343,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1023:\n-#line 3131 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1028:\n+#line 3148 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGWindowDef *n1 = (yyvsp[(2) - (4)].windef);\n \t\t\t\t\tPGWindowDef *n2 = (yyvsp[(4) - (4)].windef);\n@@ -26252,8 +26383,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1024:\n-#line 3176 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1029:\n+#line 3193 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGWindowDef *n = makeNode(PGWindowDef);\n \t\t\t\t\tn->frameOptions = FRAMEOPTION_START_UNBOUNDED_PRECEDING;\n@@ -26263,8 +26394,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1025:\n-#line 3184 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1030:\n+#line 3201 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGWindowDef *n = makeNode(PGWindowDef);\n \t\t\t\t\tn->frameOptions = FRAMEOPTION_START_UNBOUNDED_FOLLOWING;\n@@ -26274,8 +26405,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1026:\n-#line 3192 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1031:\n+#line 3209 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGWindowDef *n = makeNode(PGWindowDef);\n \t\t\t\t\tn->frameOptions = FRAMEOPTION_START_CURRENT_ROW;\n@@ -26285,8 +26416,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1027:\n-#line 3200 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1032:\n+#line 3217 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGWindowDef *n = makeNode(PGWindowDef);\n \t\t\t\t\tn->frameOptions = FRAMEOPTION_START_VALUE_PRECEDING;\n@@ -26296,8 +26427,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1028:\n-#line 3208 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1033:\n+#line 3225 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGWindowDef *n = makeNode(PGWindowDef);\n \t\t\t\t\tn->frameOptions = FRAMEOPTION_START_VALUE_FOLLOWING;\n@@ -26307,28 +26438,28 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1029:\n-#line 3228 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1034:\n+#line 3245 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = (yyvsp[(3) - (4)].list); ;}\n     break;\n \n-  case 1030:\n-#line 3229 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1035:\n+#line 3246 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = NIL; ;}\n     break;\n \n-  case 1031:\n-#line 3232 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1036:\n+#line 3249 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = (yyvsp[(1) - (1)].list);;}\n     break;\n \n-  case 1032:\n-#line 3233 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1037:\n+#line 3250 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = lappend((yyvsp[(2) - (5)].list), (yyvsp[(4) - (5)].node)); ;}\n     break;\n \n-  case 1033:\n-#line 3237 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1038:\n+#line 3254 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\tPGNamedArgExpr *na = makeNode(PGNamedArgExpr);\n \t\tna->name = (yyvsp[(1) - (3)].str);\n@@ -26339,321 +26470,321 @@ YYLTYPE yylloc;\n \t;}\n     break;\n \n-  case 1034:\n-#line 3247 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1039:\n+#line 3264 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make1((yyvsp[(1) - (1)].node)); ;}\n     break;\n \n-  case 1035:\n-#line 3248 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1040:\n+#line 3265 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node)); ;}\n     break;\n \n-  case 1036:\n-#line 3252 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1041:\n+#line 3269 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = (yyvsp[(1) - (1)].list); ;}\n     break;\n \n-  case 1037:\n-#line 3253 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1042:\n+#line 3270 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = (yyvsp[(1) - (2)].list); ;}\n     break;\n \n-  case 1038:\n-#line 3258 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1043:\n+#line 3275 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t(yyval.list) = list_make2((yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node));\n \t\t\t;}\n     break;\n \n-  case 1039:\n-#line 3264 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1044:\n+#line 3281 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make1((yyvsp[(1) - (1)].list)); ;}\n     break;\n \n-  case 1040:\n-#line 3265 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1045:\n+#line 3282 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].list)); ;}\n     break;\n \n-  case 1041:\n-#line 3270 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1046:\n+#line 3287 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = (yyvsp[(1) - (1)].list); ;}\n     break;\n \n-  case 1042:\n-#line 3271 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1047:\n+#line 3288 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = (yyvsp[(1) - (2)].list); ;}\n     break;\n \n-  case 1043:\n-#line 3276 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1048:\n+#line 3293 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = (yyvsp[(1) - (1)].list); ;}\n     break;\n \n-  case 1044:\n-#line 3277 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1049:\n+#line 3294 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = NULL; ;}\n     break;\n \n-  case 1045:\n-#line 3280 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1050:\n+#line 3297 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.subquerytype) = PG_ANY_SUBLINK; ;}\n     break;\n \n-  case 1046:\n-#line 3281 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1051:\n+#line 3298 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.subquerytype) = PG_ANY_SUBLINK; ;}\n     break;\n \n-  case 1047:\n-#line 3282 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1052:\n+#line 3299 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.subquerytype) = PG_ALL_SUBLINK; ;}\n     break;\n \n-  case 1048:\n-#line 3285 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1053:\n+#line 3302 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}\n     break;\n \n-  case 1049:\n-#line 3286 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1054:\n+#line 3303 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.str) = (char*) (yyvsp[(1) - (1)].conststr); ;}\n     break;\n \n-  case 1050:\n-#line 3289 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1055:\n+#line 3306 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.conststr) = \"+\"; ;}\n     break;\n \n-  case 1051:\n-#line 3290 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1056:\n+#line 3307 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.conststr) = \"-\"; ;}\n     break;\n \n-  case 1052:\n-#line 3291 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1057:\n+#line 3308 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.conststr) = \"*\"; ;}\n     break;\n \n-  case 1053:\n-#line 3292 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1058:\n+#line 3309 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.conststr) = \"/\"; ;}\n     break;\n \n-  case 1054:\n-#line 3293 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1059:\n+#line 3310 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.conststr) = \"//\"; ;}\n     break;\n \n-  case 1055:\n-#line 3294 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1060:\n+#line 3311 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.conststr) = \"%\"; ;}\n     break;\n \n-  case 1056:\n-#line 3295 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1061:\n+#line 3312 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.conststr) = \"^\"; ;}\n     break;\n \n-  case 1057:\n-#line 3296 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1062:\n+#line 3313 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.conststr) = \"**\"; ;}\n     break;\n \n-  case 1058:\n-#line 3297 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1063:\n+#line 3314 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.conststr) = \"<\"; ;}\n     break;\n \n-  case 1059:\n-#line 3298 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1064:\n+#line 3315 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.conststr) = \">\"; ;}\n     break;\n \n-  case 1060:\n-#line 3299 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1065:\n+#line 3316 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.conststr) = \"=\"; ;}\n     break;\n \n-  case 1061:\n-#line 3300 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1066:\n+#line 3317 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.conststr) = \"<=\"; ;}\n     break;\n \n-  case 1062:\n-#line 3301 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1067:\n+#line 3318 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.conststr) = \">=\"; ;}\n     break;\n \n-  case 1063:\n-#line 3302 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1068:\n+#line 3319 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.conststr) = \"<>\"; ;}\n     break;\n \n-  case 1064:\n-#line 3306 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1069:\n+#line 3323 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make1(makeString((yyvsp[(1) - (1)].str))); ;}\n     break;\n \n-  case 1065:\n-#line 3308 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1070:\n+#line 3325 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = (yyvsp[(3) - (4)].list); ;}\n     break;\n \n-  case 1066:\n-#line 3313 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1071:\n+#line 3330 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make1(makeString((yyvsp[(1) - (1)].str))); ;}\n     break;\n \n-  case 1067:\n-#line 3315 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1072:\n+#line 3332 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = (yyvsp[(3) - (4)].list); ;}\n     break;\n \n-  case 1068:\n-#line 3320 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1073:\n+#line 3337 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make1(makeString((yyvsp[(1) - (1)].str))); ;}\n     break;\n \n-  case 1069:\n-#line 3322 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1074:\n+#line 3339 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = (yyvsp[(3) - (4)].list); ;}\n     break;\n \n-  case 1070:\n-#line 3324 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1075:\n+#line 3341 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make1(makeString(\"~~\")); ;}\n     break;\n \n-  case 1071:\n-#line 3326 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1076:\n+#line 3343 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make1(makeString(\"!~~\")); ;}\n     break;\n \n-  case 1072:\n-#line 3328 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1077:\n+#line 3345 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make1(makeString(\"~~~\")); ;}\n     break;\n \n-  case 1073:\n-#line 3330 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1078:\n+#line 3347 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make1(makeString(\"!~~~\")); ;}\n     break;\n \n-  case 1074:\n-#line 3332 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1079:\n+#line 3349 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make1(makeString(\"~~*\")); ;}\n     break;\n \n-  case 1075:\n-#line 3334 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1080:\n+#line 3351 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make1(makeString(\"!~~*\")); ;}\n     break;\n \n-  case 1076:\n-#line 3348 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1081:\n+#line 3365 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make1(makeString((yyvsp[(1) - (1)].str))); ;}\n     break;\n \n-  case 1077:\n-#line 3350 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1082:\n+#line 3367 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = lcons(makeString((yyvsp[(1) - (3)].str)), (yyvsp[(3) - (3)].list)); ;}\n     break;\n \n-  case 1078:\n-#line 3355 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1083:\n+#line 3372 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.list) = list_make1((yyvsp[(1) - (1)].node));\n \t\t\t\t;}\n     break;\n \n-  case 1079:\n-#line 3359 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1084:\n+#line 3376 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node));\n \t\t\t\t;}\n     break;\n \n-  case 1080:\n-#line 3366 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1085:\n+#line 3383 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.list) = (yyvsp[(1) - (1)].list);\n \t\t\t\t;}\n     break;\n \n-  case 1081:\n-#line 3371 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1086:\n+#line 3388 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.list) = (yyvsp[(1) - (2)].list);\n \t\t\t\t;}\n     break;\n \n-  case 1082:\n-#line 3377 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1087:\n+#line 3394 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.list) = list_make1((yyvsp[(1) - (1)].node));\n \t\t\t\t;}\n     break;\n \n-  case 1083:\n-#line 3381 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1088:\n+#line 3398 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node));\n \t\t\t\t;}\n     break;\n \n-  case 1084:\n-#line 3388 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1089:\n+#line 3405 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.list) = (yyvsp[(1) - (1)].list);\n \t\t\t\t;}\n     break;\n \n-  case 1085:\n-#line 3393 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1090:\n+#line 3410 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.list) = (yyvsp[(1) - (2)].list);\n \t\t\t\t;}\n     break;\n \n-  case 1086:\n-#line 3400 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1091:\n+#line 3417 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.list) = (yyvsp[(1) - (1)].list);\n \t\t\t\t;}\n     break;\n \n-  case 1087:\n-#line 3404 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1092:\n+#line 3421 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.list) = NULL;\n \t\t\t\t;}\n     break;\n \n-  case 1088:\n-#line 3413 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1093:\n+#line 3430 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.list) = list_make1((yyvsp[(1) - (1)].node));\n \t\t\t\t;}\n     break;\n \n-  case 1089:\n-#line 3417 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1094:\n+#line 3434 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node));\n \t\t\t\t;}\n     break;\n \n-  case 1090:\n-#line 3423 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1095:\n+#line 3440 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = (yyvsp[(1) - (1)].node);\n \t\t\t\t;}\n     break;\n \n-  case 1091:\n-#line 3427 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1096:\n+#line 3444 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGNamedArgExpr *na = makeNode(PGNamedArgExpr);\n \t\t\t\t\tna->name = (yyvsp[(1) - (3)].str);\n@@ -26664,8 +26795,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1092:\n-#line 3436 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1097:\n+#line 3453 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGNamedArgExpr *na = makeNode(PGNamedArgExpr);\n \t\t\t\t\tna->name = (yyvsp[(1) - (3)].str);\n@@ -26676,131 +26807,131 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1093:\n-#line 3446 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1098:\n+#line 3463 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make1((yyvsp[(1) - (1)].typnam)); ;}\n     break;\n \n-  case 1094:\n-#line 3447 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1099:\n+#line 3464 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typnam)); ;}\n     break;\n \n-  case 1095:\n-#line 3452 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1100:\n+#line 3469 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.list) = list_make2(makeStringConst((yyvsp[(1) - (3)].str), (yylsp[(1) - (3)])), (yyvsp[(3) - (3)].node));\n \t\t\t\t;}\n     break;\n \n-  case 1096:\n-#line 3455 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1101:\n+#line 3472 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = NIL; ;}\n     break;\n \n-  case 1097:\n-#line 3462 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1102:\n+#line 3479 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}\n     break;\n \n-  case 1098:\n-#line 3463 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1103:\n+#line 3480 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.str) = (char*) \"year\"; ;}\n     break;\n \n-  case 1099:\n-#line 3464 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1104:\n+#line 3481 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.str) = (char*) \"month\"; ;}\n     break;\n \n-  case 1100:\n-#line 3465 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1105:\n+#line 3482 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.str) = (char*) \"day\"; ;}\n     break;\n \n-  case 1101:\n-#line 3466 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1106:\n+#line 3483 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.str) = (char*) \"hour\"; ;}\n     break;\n \n-  case 1102:\n-#line 3467 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1107:\n+#line 3484 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.str) = (char*) \"minute\"; ;}\n     break;\n \n-  case 1103:\n-#line 3468 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1108:\n+#line 3485 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.str) = (char*) \"second\"; ;}\n     break;\n \n-  case 1104:\n-#line 3469 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1109:\n+#line 3486 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.str) = (char*) \"millisecond\"; ;}\n     break;\n \n-  case 1105:\n-#line 3470 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1110:\n+#line 3487 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.str) = (char*) \"microsecond\"; ;}\n     break;\n \n-  case 1106:\n-#line 3471 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1111:\n+#line 3488 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}\n     break;\n \n-  case 1107:\n-#line 3482 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1112:\n+#line 3499 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.list) = list_make4((yyvsp[(1) - (4)].node), (yyvsp[(2) - (4)].node), (yyvsp[(3) - (4)].node), (yyvsp[(4) - (4)].node));\n \t\t\t\t;}\n     break;\n \n-  case 1108:\n-#line 3486 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1113:\n+#line 3503 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.list) = list_make3((yyvsp[(1) - (3)].node), (yyvsp[(2) - (3)].node), (yyvsp[(3) - (3)].node));\n \t\t\t\t;}\n     break;\n \n-  case 1109:\n-#line 3493 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1114:\n+#line 3510 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (yyvsp[(2) - (2)].node); ;}\n     break;\n \n-  case 1110:\n-#line 3499 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1115:\n+#line 3516 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make2((yyvsp[(3) - (3)].node), (yyvsp[(1) - (3)].node)); ;}\n     break;\n \n-  case 1111:\n-#line 3500 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1116:\n+#line 3517 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = NIL; ;}\n     break;\n \n-  case 1112:\n-#line 3517 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1117:\n+#line 3534 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.list) = list_make3((yyvsp[(1) - (3)].node), (yyvsp[(2) - (3)].node), (yyvsp[(3) - (3)].node));\n \t\t\t\t;}\n     break;\n \n-  case 1113:\n-#line 3521 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1118:\n+#line 3538 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t/* not legal per SQL99, but might as well allow it */\n \t\t\t\t\t(yyval.list) = list_make3((yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yyvsp[(2) - (3)].node));\n \t\t\t\t;}\n     break;\n \n-  case 1114:\n-#line 3526 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1119:\n+#line 3543 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.list) = list_make2((yyvsp[(1) - (2)].node), (yyvsp[(2) - (2)].node));\n \t\t\t\t;}\n     break;\n \n-  case 1115:\n-#line 3530 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1120:\n+#line 3547 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t/*\n \t\t\t\t\t * Since there are no cases where this syntax allows\n@@ -26817,45 +26948,45 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1116:\n-#line 3545 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1121:\n+#line 3562 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.list) = (yyvsp[(1) - (1)].list);\n \t\t\t\t;}\n     break;\n \n-  case 1117:\n-#line 3549 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1122:\n+#line 3566 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = NIL; ;}\n     break;\n \n-  case 1118:\n-#line 3553 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1123:\n+#line 3570 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (yyvsp[(2) - (2)].node); ;}\n     break;\n \n-  case 1119:\n-#line 3556 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1124:\n+#line 3573 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (yyvsp[(2) - (2)].node); ;}\n     break;\n \n-  case 1120:\n-#line 3559 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1125:\n+#line 3576 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = lappend((yyvsp[(3) - (3)].list), (yyvsp[(1) - (3)].node)); ;}\n     break;\n \n-  case 1121:\n-#line 3560 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1126:\n+#line 3577 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = (yyvsp[(2) - (2)].list); ;}\n     break;\n \n-  case 1122:\n-#line 3561 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1127:\n+#line 3578 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = (yyvsp[(1) - (1)].list); ;}\n     break;\n \n-  case 1123:\n-#line 3565 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1128:\n+#line 3582 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGSubLink *n = makeNode(PGSubLink);\n \t\t\t\t\tn->subselect = (yyvsp[(1) - (1)].node);\n@@ -26864,13 +26995,13 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1124:\n-#line 3571 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1129:\n+#line 3588 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (PGNode *)(yyvsp[(2) - (3)].list); ;}\n     break;\n \n-  case 1125:\n-#line 3582 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1130:\n+#line 3599 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGCaseExpr *c = makeNode(PGCaseExpr);\n \t\t\t\t\tc->casetype = InvalidOid; /* not analyzed yet */\n@@ -26882,18 +27013,18 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1126:\n-#line 3595 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1131:\n+#line 3612 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make1((yyvsp[(1) - (1)].node)); ;}\n     break;\n \n-  case 1127:\n-#line 3596 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1132:\n+#line 3613 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = lappend((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].node)); ;}\n     break;\n \n-  case 1128:\n-#line 3601 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1133:\n+#line 3618 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGCaseWhen *w = makeNode(PGCaseWhen);\n \t\t\t\t\tw->expr = (PGExpr *) (yyvsp[(2) - (4)].node);\n@@ -26903,42 +27034,42 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1129:\n-#line 3611 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1134:\n+#line 3628 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (yyvsp[(2) - (2)].node); ;}\n     break;\n \n-  case 1130:\n-#line 3612 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1135:\n+#line 3629 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = NULL; ;}\n     break;\n \n-  case 1131:\n-#line 3615 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1136:\n+#line 3632 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}\n     break;\n \n-  case 1132:\n-#line 3616 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1137:\n+#line 3633 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = NULL; ;}\n     break;\n \n-  case 1133:\n-#line 3620 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1138:\n+#line 3637 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = makeColumnRef((yyvsp[(1) - (1)].str), NIL, (yylsp[(1) - (1)]), yyscanner);\n \t\t\t\t;}\n     break;\n \n-  case 1134:\n-#line 3624 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1139:\n+#line 3641 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = makeColumnRef((yyvsp[(1) - (2)].str), (yyvsp[(2) - (2)].list), (yylsp[(1) - (2)]), yyscanner);\n \t\t\t\t;}\n     break;\n \n-  case 1135:\n-#line 3631 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1140:\n+#line 3648 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGAIndices *ai = makeNode(PGAIndices);\n \t\t\t\t\tai->is_slice = false;\n@@ -26948,8 +27079,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1136:\n-#line 3639 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1141:\n+#line 3656 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGAIndices *ai = makeNode(PGAIndices);\n \t\t\t\t\tai->is_slice = true;\n@@ -26959,43 +27090,43 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1137:\n-#line 3649 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1142:\n+#line 3666 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}\n     break;\n \n-  case 1138:\n-#line 3650 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1143:\n+#line 3667 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = NULL; ;}\n     break;\n \n-  case 1139:\n-#line 3655 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1144:\n+#line 3672 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = NIL; ;}\n     break;\n \n-  case 1140:\n-#line 3656 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1145:\n+#line 3673 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = lappend((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].node)); ;}\n     break;\n \n-  case 1141:\n-#line 3660 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1146:\n+#line 3677 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = NULL; ;}\n     break;\n \n-  case 1142:\n-#line 3661 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1147:\n+#line 3678 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make1(NULL); ;}\n     break;\n \n-  case 1143:\n-#line 3662 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1148:\n+#line 3679 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = (yyvsp[(2) - (3)].list); ;}\n     break;\n \n-  case 1144:\n-#line 3667 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1149:\n+#line 3684 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tif ((yyvsp[(3) - (3)].list)) {\n \t\t\t\t\t\tPGFuncCall *n = makeFuncCall(list_make1(makeString((yyvsp[(2) - (3)].str))), (yyvsp[(3) - (3)].list)->head->data.ptr_value ? (yyvsp[(3) - (3)].list) : NULL, (yylsp[(2) - (3)]));\n@@ -27006,8 +27137,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1145:\n-#line 3676 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1150:\n+#line 3693 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGAIndices *ai = makeNode(PGAIndices);\n \t\t\t\t\tai->is_slice = false;\n@@ -27017,8 +27148,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1146:\n-#line 3684 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1151:\n+#line 3701 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGAIndices *ai = makeNode(PGAIndices);\n \t\t\t\t\tai->is_slice = true;\n@@ -27028,48 +27159,48 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1147:\n-#line 3699 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1152:\n+#line 3716 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = NIL; ;}\n     break;\n \n-  case 1148:\n-#line 3700 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1153:\n+#line 3717 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = lappend((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].node)); ;}\n     break;\n \n-  case 1151:\n-#line 3716 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1156:\n+#line 3733 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = (yyvsp[(1) - (1)].list); ;}\n     break;\n \n-  case 1152:\n-#line 3717 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1157:\n+#line 3734 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = NIL; ;}\n     break;\n \n-  case 1153:\n-#line 3721 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1158:\n+#line 3738 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make1((yyvsp[(1) - (1)].target)); ;}\n     break;\n \n-  case 1154:\n-#line 3722 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1159:\n+#line 3739 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].target)); ;}\n     break;\n \n-  case 1155:\n-#line 3726 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1160:\n+#line 3743 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = (yyvsp[(1) - (1)].list); ;}\n     break;\n \n-  case 1156:\n-#line 3727 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1161:\n+#line 3744 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = (yyvsp[(1) - (2)].list); ;}\n     break;\n \n-  case 1157:\n-#line 3731 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1162:\n+#line 3748 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.target) = makeNode(PGResTarget);\n \t\t\t\t\t(yyval.target)->name = (yyvsp[(3) - (3)].str);\n@@ -27079,8 +27210,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1158:\n-#line 3747 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1163:\n+#line 3764 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.target) = makeNode(PGResTarget);\n \t\t\t\t\t(yyval.target)->name = (yyvsp[(2) - (2)].str);\n@@ -27090,8 +27221,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1159:\n-#line 3755 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1164:\n+#line 3772 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.target) = makeNode(PGResTarget);\n \t\t\t\t\t(yyval.target)->name = NULL;\n@@ -27101,140 +27232,140 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1160:\n-#line 3764 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1165:\n+#line 3781 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = (yyvsp[(3) - (4)].list); ;}\n     break;\n \n-  case 1161:\n-#line 3765 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1166:\n+#line 3782 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make1(makeString((yyvsp[(2) - (2)].str))); ;}\n     break;\n \n-  case 1162:\n-#line 3768 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1167:\n+#line 3785 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = (yyvsp[(1) - (1)].list); ;}\n     break;\n \n-  case 1163:\n-#line 3769 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1168:\n+#line 3786 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = NULL; ;}\n     break;\n \n-  case 1164:\n-#line 3772 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1169:\n+#line 3789 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make2((yyvsp[(1) - (3)].node), makeString((yyvsp[(3) - (3)].str))); ;}\n     break;\n \n-  case 1165:\n-#line 3776 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1170:\n+#line 3793 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make1((yyvsp[(1) - (1)].list)); ;}\n     break;\n \n-  case 1166:\n-#line 3777 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1171:\n+#line 3794 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].list)); ;}\n     break;\n \n-  case 1167:\n-#line 3781 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1172:\n+#line 3798 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = (yyvsp[(1) - (1)].list); ;}\n     break;\n \n-  case 1168:\n-#line 3782 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1173:\n+#line 3799 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = (yyvsp[(1) - (2)].list); ;}\n     break;\n \n-  case 1169:\n-#line 3785 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1174:\n+#line 3802 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = (yyvsp[(3) - (4)].list); ;}\n     break;\n \n-  case 1170:\n-#line 3786 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1175:\n+#line 3803 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make1((yyvsp[(2) - (2)].list)); ;}\n     break;\n \n-  case 1171:\n-#line 3787 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1176:\n+#line 3804 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = NULL; ;}\n     break;\n \n-  case 1172:\n-#line 3797 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1177:\n+#line 3814 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make1((yyvsp[(1) - (1)].range)); ;}\n     break;\n \n-  case 1173:\n-#line 3798 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1178:\n+#line 3815 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].range)); ;}\n     break;\n \n-  case 1174:\n-#line 3803 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1179:\n+#line 3820 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make1(makeString((yyvsp[(1) - (1)].str))); ;}\n     break;\n \n-  case 1175:\n-#line 3805 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1180:\n+#line 3822 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), makeString((yyvsp[(3) - (3)].str))); ;}\n     break;\n \n-  case 1176:\n-#line 3810 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1181:\n+#line 3827 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = (yyvsp[(1) - (1)].list); ;}\n     break;\n \n-  case 1177:\n-#line 3811 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1182:\n+#line 3828 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = (yyvsp[(1) - (2)].list); ;}\n     break;\n \n-  case 1178:\n-#line 3815 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1183:\n+#line 3832 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = (yyvsp[(1) - (1)].list); ;}\n     break;\n \n-  case 1179:\n-#line 3816 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1184:\n+#line 3833 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = (yyvsp[(2) - (3)].list); ;}\n     break;\n \n-  case 1180:\n-#line 3819 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1185:\n+#line 3836 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}\n     break;\n \n-  case 1181:\n-#line 3831 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1186:\n+#line 3848 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make1(makeString((yyvsp[(1) - (1)].str))); ;}\n     break;\n \n-  case 1182:\n-#line 3834 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1187:\n+#line 3851 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t\t(yyval.list) = check_func_name(lcons(makeString((yyvsp[(1) - (2)].str)), (yyvsp[(2) - (2)].list)),\n \t\t\t\t\t\t\t\t\t\t\t yyscanner);\n \t\t\t\t\t;}\n     break;\n \n-  case 1183:\n-#line 3845 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1188:\n+#line 3862 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = makeIntConst((yyvsp[(1) - (1)].ival), (yylsp[(1) - (1)]));\n \t\t\t\t;}\n     break;\n \n-  case 1184:\n-#line 3849 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1189:\n+#line 3866 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = makeFloatConst((yyvsp[(1) - (1)].str), (yylsp[(1) - (1)]));\n \t\t\t\t;}\n     break;\n \n-  case 1185:\n-#line 3853 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1190:\n+#line 3870 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tif ((yyvsp[(2) - (2)].list))\n \t\t\t\t\t{\n@@ -27248,15 +27379,15 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1186:\n-#line 3865 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1191:\n+#line 3882 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = makeBitStringConst((yyvsp[(1) - (1)].str), (yylsp[(1) - (1)]));\n \t\t\t\t;}\n     break;\n \n-  case 1187:\n-#line 3869 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1192:\n+#line 3886 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t/* This is a bit constant per SQL99:\n \t\t\t\t\t * Without Feature F511, \"BIT data type\",\n@@ -27267,8 +27398,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1188:\n-#line 3878 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1193:\n+#line 3895 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t/* generic type 'literal' syntax */\n \t\t\t\t\tPGTypeName *t = makeTypeNameFromNameList((yyvsp[(1) - (2)].list));\n@@ -27277,8 +27408,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1189:\n-#line 3885 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1194:\n+#line 3902 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t/* generic syntax with a type modifier */\n \t\t\t\t\tPGTypeName *t = makeTypeNameFromNameList((yyvsp[(1) - (7)].list));\n@@ -27318,146 +27449,146 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1190:\n-#line 3923 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1195:\n+#line 3940 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = makeStringConstCast((yyvsp[(2) - (2)].str), (yylsp[(2) - (2)]), (yyvsp[(1) - (2)].typnam));\n \t\t\t\t;}\n     break;\n \n-  case 1191:\n-#line 3927 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1196:\n+#line 3944 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = makeIntervalNode((yyvsp[(3) - (5)].node), (yylsp[(3) - (5)]), (yyvsp[(5) - (5)].list));\n \t\t\t\t;}\n     break;\n \n-  case 1192:\n-#line 3931 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1197:\n+#line 3948 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = makeIntervalNode((yyvsp[(2) - (3)].ival), (yylsp[(2) - (3)]), (yyvsp[(3) - (3)].list));\n \t\t\t\t;}\n     break;\n \n-  case 1193:\n-#line 3935 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1198:\n+#line 3952 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = makeIntervalNode((yyvsp[(2) - (3)].str), (yylsp[(2) - (3)]), (yyvsp[(3) - (3)].list));\n \t\t\t\t;}\n     break;\n \n-  case 1194:\n-#line 3939 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1199:\n+#line 3956 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = makeBoolAConst(true, (yylsp[(1) - (1)]));\n \t\t\t\t;}\n     break;\n \n-  case 1195:\n-#line 3943 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1200:\n+#line 3960 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = makeBoolAConst(false, (yylsp[(1) - (1)]));\n \t\t\t\t;}\n     break;\n \n-  case 1196:\n-#line 3947 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1201:\n+#line 3964 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = makeNullAConst((yylsp[(1) - (1)]));\n \t\t\t\t;}\n     break;\n \n-  case 1197:\n-#line 3952 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1202:\n+#line 3969 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.ival) = (yyvsp[(1) - (1)].ival); ;}\n     break;\n \n-  case 1198:\n-#line 3969 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1203:\n+#line 3986 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}\n     break;\n \n-  case 1199:\n-#line 3970 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1204:\n+#line 3987 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}\n     break;\n \n-  case 1200:\n-#line 3971 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1205:\n+#line 3988 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}\n     break;\n \n-  case 1201:\n-#line 3974 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1206:\n+#line 3991 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}\n     break;\n \n-  case 1202:\n-#line 3975 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1207:\n+#line 3992 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}\n     break;\n \n-  case 1203:\n-#line 3976 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1208:\n+#line 3993 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}\n     break;\n \n-  case 1204:\n-#line 3979 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1209:\n+#line 3996 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}\n     break;\n \n-  case 1205:\n-#line 3980 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1210:\n+#line 3997 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}\n     break;\n \n-  case 1206:\n-#line 3981 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1211:\n+#line 3998 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}\n     break;\n \n-  case 1207:\n-#line 3984 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1212:\n+#line 4001 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make1(makeString((yyvsp[(1) - (1)].str))); ;}\n     break;\n \n-  case 1208:\n-#line 3985 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1213:\n+#line 4002 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = lcons(makeString((yyvsp[(1) - (2)].str)), (yyvsp[(2) - (2)].list)); ;}\n     break;\n \n-  case 1209:\n-#line 3989 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1214:\n+#line 4006 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make1(makeString((yyvsp[(2) - (2)].str))); ;}\n     break;\n \n-  case 1210:\n-#line 3991 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1215:\n+#line 4008 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), makeString((yyvsp[(3) - (3)].str))); ;}\n     break;\n \n-  case 1211:\n-#line 3995 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1216:\n+#line 4012 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = (yyvsp[(2) - (3)].list); ;}\n     break;\n \n-  case 1212:\n-#line 3996 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1217:\n+#line 4013 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = NIL; ;}\n     break;\n \n-  case 1214:\n-#line 4003 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1219:\n+#line 4020 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}\n     break;\n \n-  case 1215:\n-#line 4004 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1220:\n+#line 4021 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}\n     break;\n \n-  case 1216:\n+  case 1221:\n #line 8 \"third_party/libpg_query/grammar/statements/prepare.y\"\n     {\n \t\t\t\t\tPGPrepareStmt *n = makeNode(PGPrepareStmt);\n@@ -27468,17 +27599,17 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1217:\n+  case 1222:\n #line 18 \"third_party/libpg_query/grammar/statements/prepare.y\"\n     { (yyval.list) = (yyvsp[(2) - (3)].list); ;}\n     break;\n \n-  case 1218:\n+  case 1223:\n #line 19 \"third_party/libpg_query/grammar/statements/prepare.y\"\n     { (yyval.list) = NIL; ;}\n     break;\n \n-  case 1224:\n+  case 1229:\n #line 8 \"third_party/libpg_query/grammar/statements/create_schema.y\"\n     {\n \t\t\t\t\tPGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);\n@@ -27500,7 +27631,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1225:\n+  case 1230:\n #line 27 \"third_party/libpg_query/grammar/statements/create_schema.y\"\n     {\n \t\t\t\t\tPGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);\n@@ -27527,7 +27658,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1226:\n+  case 1231:\n #line 51 \"third_party/libpg_query/grammar/statements/create_schema.y\"\n     {\n \t\t\t\t\tPGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);\n@@ -27549,7 +27680,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1227:\n+  case 1232:\n #line 74 \"third_party/libpg_query/grammar/statements/create_schema.y\"\n     {\n \t\t\t\t\tif ((yyloc) < 0)\t\t\t/* see comments for YYLLOC_DEFAULT */\n@@ -27558,12 +27689,12 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1228:\n+  case 1233:\n #line 80 \"third_party/libpg_query/grammar/statements/create_schema.y\"\n     { (yyval.list) = NIL; ;}\n     break;\n \n-  case 1233:\n+  case 1238:\n #line 11 \"third_party/libpg_query/grammar/statements/index.y\"\n     {\n \t\t\t\t\tPGIndexStmt *n = makeNode(PGIndexStmt);\n@@ -27589,7 +27720,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1234:\n+  case 1239:\n #line 36 \"third_party/libpg_query/grammar/statements/index.y\"\n     {\n \t\t\t\t\tPGIndexStmt *n = makeNode(PGIndexStmt);\n@@ -27615,62 +27746,62 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1235:\n+  case 1240:\n #line 62 \"third_party/libpg_query/grammar/statements/index.y\"\n     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}\n     break;\n \n-  case 1236:\n+  case 1241:\n #line 66 \"third_party/libpg_query/grammar/statements/index.y\"\n     { (yyval.str) = (yyvsp[(2) - (2)].str); ;}\n     break;\n \n-  case 1237:\n+  case 1242:\n #line 67 \"third_party/libpg_query/grammar/statements/index.y\"\n     { (yyval.str) = (char*) DEFAULT_INDEX_TYPE; ;}\n     break;\n \n-  case 1238:\n+  case 1243:\n #line 72 \"third_party/libpg_query/grammar/statements/index.y\"\n     { (yyval.boolean) = true; ;}\n     break;\n \n-  case 1239:\n+  case 1244:\n #line 73 \"third_party/libpg_query/grammar/statements/index.y\"\n     { (yyval.boolean) = false; ;}\n     break;\n \n-  case 1240:\n+  case 1245:\n #line 78 \"third_party/libpg_query/grammar/statements/index.y\"\n     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}\n     break;\n \n-  case 1241:\n+  case 1246:\n #line 79 \"third_party/libpg_query/grammar/statements/index.y\"\n     { (yyval.str) = NULL; ;}\n     break;\n \n-  case 1242:\n+  case 1247:\n #line 83 \"third_party/libpg_query/grammar/statements/index.y\"\n     { (yyval.list) = (yyvsp[(2) - (2)].list); ;}\n     break;\n \n-  case 1243:\n+  case 1248:\n #line 84 \"third_party/libpg_query/grammar/statements/index.y\"\n     { (yyval.list) = NIL; ;}\n     break;\n \n-  case 1244:\n+  case 1249:\n #line 89 \"third_party/libpg_query/grammar/statements/index.y\"\n     { (yyval.boolean) = true; ;}\n     break;\n \n-  case 1245:\n+  case 1250:\n #line 90 \"third_party/libpg_query/grammar/statements/index.y\"\n     { (yyval.boolean) = false; ;}\n     break;\n \n-  case 1246:\n+  case 1251:\n #line 8 \"third_party/libpg_query/grammar/statements/alter_schema.y\"\n     {\n \t\t\t\t\tPGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);\n@@ -27682,7 +27813,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1247:\n+  case 1252:\n #line 17 \"third_party/libpg_query/grammar/statements/alter_schema.y\"\n     {\n \t\t\t\t\tPGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);\n@@ -27694,7 +27825,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1248:\n+  case 1253:\n #line 26 \"third_party/libpg_query/grammar/statements/alter_schema.y\"\n     {\n \t\t\t\t\tPGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);\n@@ -27706,7 +27837,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1249:\n+  case 1254:\n #line 35 \"third_party/libpg_query/grammar/statements/alter_schema.y\"\n     {\n \t\t\t\t\tPGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);\n@@ -27718,7 +27849,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1250:\n+  case 1255:\n #line 44 \"third_party/libpg_query/grammar/statements/alter_schema.y\"\n     {\n \t\t\t\t\tPGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);\n@@ -27730,7 +27861,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1251:\n+  case 1256:\n #line 53 \"third_party/libpg_query/grammar/statements/alter_schema.y\"\n     {\n \t\t\t\t\tPGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);\n@@ -27742,7 +27873,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1252:\n+  case 1257:\n #line 6 \"third_party/libpg_query/grammar/statements/checkpoint.y\"\n     {\n \t\t\t\t\tPGCheckPointStmt *n = makeNode(PGCheckPointStmt);\n@@ -27752,7 +27883,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1253:\n+  case 1258:\n #line 13 \"third_party/libpg_query/grammar/statements/checkpoint.y\"\n     {\n \t\t\t\t\tPGCheckPointStmt *n = makeNode(PGCheckPointStmt);\n@@ -27762,17 +27893,17 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1254:\n+  case 1259:\n #line 22 \"third_party/libpg_query/grammar/statements/checkpoint.y\"\n     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}\n     break;\n \n-  case 1255:\n+  case 1260:\n #line 23 \"third_party/libpg_query/grammar/statements/checkpoint.y\"\n     { (yyval.str) = NULL; ;}\n     break;\n \n-  case 1256:\n+  case 1261:\n #line 8 \"third_party/libpg_query/grammar/statements/export.y\"\n     {\n \t\t\t\t\tPGExportStmt *n = makeNode(PGExportStmt);\n@@ -27786,7 +27917,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1257:\n+  case 1262:\n #line 20 \"third_party/libpg_query/grammar/statements/export.y\"\n     {\n \t\t\t\t\tPGExportStmt *n = makeNode(PGExportStmt);\n@@ -27800,7 +27931,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1258:\n+  case 1263:\n #line 34 \"third_party/libpg_query/grammar/statements/export.y\"\n     {\n \t\t\t\t\tPGImportStmt *n = makeNode(PGImportStmt);\n@@ -27809,7 +27940,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1259:\n+  case 1264:\n #line 10 \"third_party/libpg_query/grammar/statements/explain.y\"\n     {\n \t\t\t\t\tPGExplainStmt *n = makeNode(PGExplainStmt);\n@@ -27819,7 +27950,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1260:\n+  case 1265:\n #line 17 \"third_party/libpg_query/grammar/statements/explain.y\"\n     {\n \t\t\t\t\tPGExplainStmt *n = makeNode(PGExplainStmt);\n@@ -27832,7 +27963,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1261:\n+  case 1266:\n #line 27 \"third_party/libpg_query/grammar/statements/explain.y\"\n     {\n \t\t\t\t\tPGExplainStmt *n = makeNode(PGExplainStmt);\n@@ -27842,7 +27973,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1262:\n+  case 1267:\n #line 34 \"third_party/libpg_query/grammar/statements/explain.y\"\n     {\n \t\t\t\t\tPGExplainStmt *n = makeNode(PGExplainStmt);\n@@ -27852,118 +27983,118 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1263:\n+  case 1268:\n #line 44 \"third_party/libpg_query/grammar/statements/explain.y\"\n     { (yyval.boolean) = true; ;}\n     break;\n \n-  case 1264:\n+  case 1269:\n #line 45 \"third_party/libpg_query/grammar/statements/explain.y\"\n     { (yyval.boolean) = false; ;}\n     break;\n \n-  case 1265:\n+  case 1270:\n #line 50 \"third_party/libpg_query/grammar/statements/explain.y\"\n     { (yyval.node) = (PGNode *) makeString((yyvsp[(1) - (1)].str)); ;}\n     break;\n \n-  case 1266:\n+  case 1271:\n #line 51 \"third_party/libpg_query/grammar/statements/explain.y\"\n     { (yyval.node) = (PGNode *) (yyvsp[(1) - (1)].value); ;}\n     break;\n \n-  case 1267:\n+  case 1272:\n #line 52 \"third_party/libpg_query/grammar/statements/explain.y\"\n     { (yyval.node) = NULL; ;}\n     break;\n \n-  case 1298:\n+  case 1303:\n #line 90 \"third_party/libpg_query/grammar/statements/explain.y\"\n     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}\n     break;\n \n-  case 1299:\n+  case 1304:\n #line 91 \"third_party/libpg_query/grammar/statements/explain.y\"\n     { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}\n     break;\n \n-  case 1300:\n+  case 1305:\n #line 92 \"third_party/libpg_query/grammar/statements/explain.y\"\n     { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}\n     break;\n \n-  case 1301:\n+  case 1306:\n #line 97 \"third_party/libpg_query/grammar/statements/explain.y\"\n     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}\n     break;\n \n-  case 1302:\n+  case 1307:\n #line 98 \"third_party/libpg_query/grammar/statements/explain.y\"\n     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}\n     break;\n \n-  case 1303:\n+  case 1308:\n #line 104 \"third_party/libpg_query/grammar/statements/explain.y\"\n     {\n \t\t\t\t\t(yyval.list) = list_make1((yyvsp[(1) - (1)].defelt));\n \t\t\t\t;}\n     break;\n \n-  case 1304:\n+  case 1309:\n #line 108 \"third_party/libpg_query/grammar/statements/explain.y\"\n     {\n \t\t\t\t\t(yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].defelt));\n \t\t\t\t;}\n     break;\n \n-  case 1305:\n+  case 1310:\n #line 115 \"third_party/libpg_query/grammar/statements/explain.y\"\n     {;}\n     break;\n \n-  case 1306:\n+  case 1311:\n #line 116 \"third_party/libpg_query/grammar/statements/explain.y\"\n     {;}\n     break;\n \n-  case 1307:\n+  case 1312:\n #line 121 \"third_party/libpg_query/grammar/statements/explain.y\"\n     { (yyval.str) = (char*) \"true\"; ;}\n     break;\n \n-  case 1308:\n+  case 1313:\n #line 122 \"third_party/libpg_query/grammar/statements/explain.y\"\n     { (yyval.str) = (char*) \"false\"; ;}\n     break;\n \n-  case 1309:\n+  case 1314:\n #line 123 \"third_party/libpg_query/grammar/statements/explain.y\"\n     { (yyval.str) = (char*) \"on\"; ;}\n     break;\n \n-  case 1310:\n+  case 1315:\n #line 129 \"third_party/libpg_query/grammar/statements/explain.y\"\n     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}\n     break;\n \n-  case 1311:\n+  case 1316:\n #line 135 \"third_party/libpg_query/grammar/statements/explain.y\"\n     {\n \t\t\t\t\t(yyval.defelt) = makeDefElem((yyvsp[(1) - (2)].str), (yyvsp[(2) - (2)].node), (yylsp[(1) - (2)]));\n \t\t\t\t;}\n     break;\n \n-  case 1312:\n+  case 1317:\n #line 142 \"third_party/libpg_query/grammar/statements/explain.y\"\n     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}\n     break;\n \n-  case 1313:\n+  case 1318:\n #line 143 \"third_party/libpg_query/grammar/statements/explain.y\"\n     { (yyval.str) = (char*) \"analyze\"; ;}\n     break;\n \n-  case 1314:\n+  case 1319:\n #line 11 \"third_party/libpg_query/grammar/statements/variable_set.y\"\n     {\n \t\t\t\t\tPGVariableSetStmt *n = (yyvsp[(2) - (2)].vsetstmt);\n@@ -27972,7 +28103,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1315:\n+  case 1320:\n #line 17 \"third_party/libpg_query/grammar/statements/variable_set.y\"\n     {\n \t\t\t\t\tPGVariableSetStmt *n = (yyvsp[(3) - (3)].vsetstmt);\n@@ -27981,7 +28112,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1316:\n+  case 1321:\n #line 23 \"third_party/libpg_query/grammar/statements/variable_set.y\"\n     {\n \t\t\t\t\tPGVariableSetStmt *n = (yyvsp[(3) - (3)].vsetstmt);\n@@ -27990,7 +28121,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1317:\n+  case 1322:\n #line 29 \"third_party/libpg_query/grammar/statements/variable_set.y\"\n     {\n \t\t\t\t\tPGVariableSetStmt *n = (yyvsp[(3) - (3)].vsetstmt);\n@@ -27999,12 +28130,12 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1318:\n+  case 1323:\n #line 38 \"third_party/libpg_query/grammar/statements/variable_set.y\"\n     {(yyval.vsetstmt) = (yyvsp[(1) - (1)].vsetstmt);;}\n     break;\n \n-  case 1319:\n+  case 1324:\n #line 40 \"third_party/libpg_query/grammar/statements/variable_set.y\"\n     {\n \t\t\t\t\tPGVariableSetStmt *n = makeNode(PGVariableSetStmt);\n@@ -28014,7 +28145,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1320:\n+  case 1325:\n #line 48 \"third_party/libpg_query/grammar/statements/variable_set.y\"\n     {\n \t\t\t\t\tPGVariableSetStmt *n = makeNode(PGVariableSetStmt);\n@@ -28028,7 +28159,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1321:\n+  case 1326:\n #line 59 \"third_party/libpg_query/grammar/statements/variable_set.y\"\n     {\n \t\t\t\t\tPGVariableSetStmt *n = makeNode(PGVariableSetStmt);\n@@ -28039,7 +28170,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1322:\n+  case 1327:\n #line 71 \"third_party/libpg_query/grammar/statements/variable_set.y\"\n     {\n \t\t\t\t\tPGVariableSetStmt *n = makeNode(PGVariableSetStmt);\n@@ -28050,7 +28181,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1323:\n+  case 1328:\n #line 79 \"third_party/libpg_query/grammar/statements/variable_set.y\"\n     {\n \t\t\t\t\tPGVariableSetStmt *n = makeNode(PGVariableSetStmt);\n@@ -28061,7 +28192,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1324:\n+  case 1329:\n #line 87 \"third_party/libpg_query/grammar/statements/variable_set.y\"\n     {\n \t\t\t\t\tPGVariableSetStmt *n = makeNode(PGVariableSetStmt);\n@@ -28071,7 +28202,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1325:\n+  case 1330:\n #line 94 \"third_party/libpg_query/grammar/statements/variable_set.y\"\n     {\n \t\t\t\t\tPGVariableSetStmt *n = makeNode(PGVariableSetStmt);\n@@ -28081,31 +28212,31 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1326:\n+  case 1331:\n #line 104 \"third_party/libpg_query/grammar/statements/variable_set.y\"\n     { (yyval.node) = makeStringConst((yyvsp[(1) - (1)].str), (yylsp[(1) - (1)])); ;}\n     break;\n \n-  case 1327:\n+  case 1332:\n #line 106 \"third_party/libpg_query/grammar/statements/variable_set.y\"\n     { (yyval.node) = makeAConst((yyvsp[(1) - (1)].value), (yylsp[(1) - (1)])); ;}\n     break;\n \n-  case 1328:\n+  case 1333:\n #line 112 \"third_party/libpg_query/grammar/statements/variable_set.y\"\n     {\n \t\t\t\t\t(yyval.node) = makeStringConst((yyvsp[(1) - (1)].str), (yylsp[(1) - (1)]));\n \t\t\t\t;}\n     break;\n \n-  case 1329:\n+  case 1334:\n #line 116 \"third_party/libpg_query/grammar/statements/variable_set.y\"\n     {\n \t\t\t\t\t(yyval.node) = makeStringConst((yyvsp[(1) - (1)].str), (yylsp[(1) - (1)]));\n \t\t\t\t;}\n     break;\n \n-  case 1330:\n+  case 1335:\n #line 120 \"third_party/libpg_query/grammar/statements/variable_set.y\"\n     {\n \t\t\t\t\tPGTypeName *t = (yyvsp[(1) - (3)].typnam);\n@@ -28123,7 +28254,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1331:\n+  case 1336:\n #line 135 \"third_party/libpg_query/grammar/statements/variable_set.y\"\n     {\n \t\t\t\t\tPGTypeName *t = (yyvsp[(1) - (5)].typnam);\n@@ -28133,32 +28264,32 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1332:\n+  case 1337:\n #line 141 \"third_party/libpg_query/grammar/statements/variable_set.y\"\n     { (yyval.node) = makeAConst((yyvsp[(1) - (1)].value), (yylsp[(1) - (1)])); ;}\n     break;\n \n-  case 1333:\n+  case 1338:\n #line 142 \"third_party/libpg_query/grammar/statements/variable_set.y\"\n     { (yyval.node) = NULL; ;}\n     break;\n \n-  case 1334:\n+  case 1339:\n #line 143 \"third_party/libpg_query/grammar/statements/variable_set.y\"\n     { (yyval.node) = NULL; ;}\n     break;\n \n-  case 1335:\n+  case 1340:\n #line 147 \"third_party/libpg_query/grammar/statements/variable_set.y\"\n     { (yyval.list) = list_make1((yyvsp[(1) - (1)].node)); ;}\n     break;\n \n-  case 1336:\n+  case 1341:\n #line 148 \"third_party/libpg_query/grammar/statements/variable_set.y\"\n     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node)); ;}\n     break;\n \n-  case 1337:\n+  case 1342:\n #line 8 \"third_party/libpg_query/grammar/statements/load.y\"\n     {\n \t\t\t\t\tPGLoadStmt *n = makeNode(PGLoadStmt);\n@@ -28168,7 +28299,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1338:\n+  case 1343:\n #line 14 \"third_party/libpg_query/grammar/statements/load.y\"\n     {\n                     PGLoadStmt *n = makeNode(PGLoadStmt);\n@@ -28178,7 +28309,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1339:\n+  case 1344:\n #line 20 \"third_party/libpg_query/grammar/statements/load.y\"\n     {\n                       PGLoadStmt *n = makeNode(PGLoadStmt);\n@@ -28188,17 +28319,17 @@ YYLTYPE yylloc;\n                 ;}\n     break;\n \n-  case 1340:\n+  case 1345:\n #line 28 \"third_party/libpg_query/grammar/statements/load.y\"\n     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}\n     break;\n \n-  case 1341:\n+  case 1346:\n #line 29 \"third_party/libpg_query/grammar/statements/load.y\"\n     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}\n     break;\n \n-  case 1342:\n+  case 1347:\n #line 9 \"third_party/libpg_query/grammar/statements/vacuum.y\"\n     {\n \t\t\t\t\tPGVacuumStmt *n = makeNode(PGVacuumStmt);\n@@ -28215,7 +28346,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1343:\n+  case 1348:\n #line 23 \"third_party/libpg_query/grammar/statements/vacuum.y\"\n     {\n \t\t\t\t\tPGVacuumStmt *n = makeNode(PGVacuumStmt);\n@@ -28232,7 +28363,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1344:\n+  case 1349:\n #line 37 \"third_party/libpg_query/grammar/statements/vacuum.y\"\n     {\n \t\t\t\t\tPGVacuumStmt *n = (PGVacuumStmt *) (yyvsp[(5) - (5)].node);\n@@ -28247,7 +28378,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1345:\n+  case 1350:\n #line 49 \"third_party/libpg_query/grammar/statements/vacuum.y\"\n     {\n \t\t\t\t\tPGVacuumStmt *n = makeNode(PGVacuumStmt);\n@@ -28258,7 +28389,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1346:\n+  case 1351:\n #line 57 \"third_party/libpg_query/grammar/statements/vacuum.y\"\n     {\n \t\t\t\t\tPGVacuumStmt *n = makeNode(PGVacuumStmt);\n@@ -28271,27 +28402,27 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1347:\n+  case 1352:\n #line 70 \"third_party/libpg_query/grammar/statements/vacuum.y\"\n     { (yyval.ival) = PG_VACOPT_ANALYZE; ;}\n     break;\n \n-  case 1348:\n+  case 1353:\n #line 71 \"third_party/libpg_query/grammar/statements/vacuum.y\"\n     { (yyval.ival) = PG_VACOPT_VERBOSE; ;}\n     break;\n \n-  case 1349:\n+  case 1354:\n #line 72 \"third_party/libpg_query/grammar/statements/vacuum.y\"\n     { (yyval.ival) = PG_VACOPT_FREEZE; ;}\n     break;\n \n-  case 1350:\n+  case 1355:\n #line 73 \"third_party/libpg_query/grammar/statements/vacuum.y\"\n     { (yyval.ival) = PG_VACOPT_FULL; ;}\n     break;\n \n-  case 1351:\n+  case 1356:\n #line 75 \"third_party/libpg_query/grammar/statements/vacuum.y\"\n     {\n \t\t\t\t\tif (strcmp((yyvsp[(1) - (1)].str), \"disable_page_skipping\") == 0)\n@@ -28304,37 +28435,37 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1352:\n+  case 1357:\n #line 87 \"third_party/libpg_query/grammar/statements/vacuum.y\"\n     { (yyval.boolean) = true; ;}\n     break;\n \n-  case 1353:\n+  case 1358:\n #line 88 \"third_party/libpg_query/grammar/statements/vacuum.y\"\n     { (yyval.boolean) = false; ;}\n     break;\n \n-  case 1354:\n+  case 1359:\n #line 93 \"third_party/libpg_query/grammar/statements/vacuum.y\"\n     { (yyval.ival) = (yyvsp[(1) - (1)].ival); ;}\n     break;\n \n-  case 1355:\n+  case 1360:\n #line 94 \"third_party/libpg_query/grammar/statements/vacuum.y\"\n     { (yyval.ival) = (yyvsp[(1) - (3)].ival) | (yyvsp[(3) - (3)].ival); ;}\n     break;\n \n-  case 1356:\n+  case 1361:\n #line 98 \"third_party/libpg_query/grammar/statements/vacuum.y\"\n     { (yyval.boolean) = true; ;}\n     break;\n \n-  case 1357:\n+  case 1362:\n #line 99 \"third_party/libpg_query/grammar/statements/vacuum.y\"\n     { (yyval.boolean) = false; ;}\n     break;\n \n-  case 1358:\n+  case 1363:\n #line 9 \"third_party/libpg_query/grammar/statements/delete.y\"\n     {\n \t\t\t\t\tPGDeleteStmt *n = makeNode(PGDeleteStmt);\n@@ -28347,7 +28478,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1359:\n+  case 1364:\n #line 19 \"third_party/libpg_query/grammar/statements/delete.y\"\n     {\n \t\t\t\t\tPGDeleteStmt *n = makeNode(PGDeleteStmt);\n@@ -28360,14 +28491,14 @@ YYLTYPE yylloc;\n \t\t\t    ;}\n     break;\n \n-  case 1360:\n+  case 1365:\n #line 32 \"third_party/libpg_query/grammar/statements/delete.y\"\n     {\n \t\t\t\t\t(yyval.range) = (yyvsp[(1) - (1)].range);\n \t\t\t\t;}\n     break;\n \n-  case 1361:\n+  case 1366:\n #line 36 \"third_party/libpg_query/grammar/statements/delete.y\"\n     {\n \t\t\t\t\tPGAlias *alias = makeNode(PGAlias);\n@@ -28377,7 +28508,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1362:\n+  case 1367:\n #line 43 \"third_party/libpg_query/grammar/statements/delete.y\"\n     {\n \t\t\t\t\tPGAlias *alias = makeNode(PGAlias);\n@@ -28387,27 +28518,27 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1363:\n+  case 1368:\n #line 53 \"third_party/libpg_query/grammar/statements/delete.y\"\n     { (yyval.node) = (yyvsp[(2) - (2)].node); ;}\n     break;\n \n-  case 1364:\n+  case 1369:\n #line 54 \"third_party/libpg_query/grammar/statements/delete.y\"\n     { (yyval.node) = NULL; ;}\n     break;\n \n-  case 1365:\n+  case 1370:\n #line 60 \"third_party/libpg_query/grammar/statements/delete.y\"\n     { (yyval.list) = (yyvsp[(2) - (2)].list); ;}\n     break;\n \n-  case 1366:\n+  case 1371:\n #line 61 \"third_party/libpg_query/grammar/statements/delete.y\"\n     { (yyval.list) = NIL; ;}\n     break;\n \n-  case 1367:\n+  case 1372:\n #line 10 \"third_party/libpg_query/grammar/statements/analyze.y\"\n     {\n \t\t\t\t\tPGVacuumStmt *n = makeNode(PGVacuumStmt);\n@@ -28420,7 +28551,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1368:\n+  case 1373:\n #line 20 \"third_party/libpg_query/grammar/statements/analyze.y\"\n     {\n \t\t\t\t\tPGVacuumStmt *n = makeNode(PGVacuumStmt);\n@@ -28433,7 +28564,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1369:\n+  case 1374:\n #line 8 \"third_party/libpg_query/grammar/statements/attach.y\"\n     {\n \t\t\t\t\tPGAttachStmt *n = makeNode(PGAttachStmt);\n@@ -28444,7 +28575,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1370:\n+  case 1375:\n #line 19 \"third_party/libpg_query/grammar/statements/attach.y\"\n     {\n \t\t\t\t\tPGDetachStmt *n = makeNode(PGDetachStmt);\n@@ -28454,7 +28585,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1371:\n+  case 1376:\n #line 26 \"third_party/libpg_query/grammar/statements/attach.y\"\n     {\n \t\t\t\t\tPGDetachStmt *n = makeNode(PGDetachStmt);\n@@ -28464,59 +28595,84 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1372:\n+  case 1377:\n #line 34 \"third_party/libpg_query/grammar/statements/attach.y\"\n     {;}\n     break;\n \n-  case 1373:\n+  case 1378:\n #line 35 \"third_party/libpg_query/grammar/statements/attach.y\"\n     {;}\n     break;\n \n-  case 1374:\n+  case 1379:\n #line 39 \"third_party/libpg_query/grammar/statements/attach.y\"\n     { (yyval.str) = (yyvsp[(2) - (2)].str); ;}\n     break;\n \n-  case 1375:\n+  case 1380:\n #line 40 \"third_party/libpg_query/grammar/statements/attach.y\"\n     { (yyval.str) = NULL; ;}\n     break;\n \n-  case 1376:\n-#line 2 \"third_party/libpg_query/grammar/statements/variable_reset.y\"\n-    { (yyval.node) = (PGNode *) (yyvsp[(2) - (2)].vsetstmt); ;}\n+  case 1381:\n+#line 3 \"third_party/libpg_query/grammar/statements/variable_reset.y\"\n+    {\n+\t\t\t\t(yyvsp[(2) - (2)].vsetstmt)->scope = VAR_SET_SCOPE_DEFAULT;\n+\t\t\t\t(yyval.node) = (PGNode *) (yyvsp[(2) - (2)].vsetstmt);\n+\t\t\t;}\n     break;\n \n-  case 1377:\n+  case 1382:\n #line 8 \"third_party/libpg_query/grammar/statements/variable_reset.y\"\n+    {\n+\t\t\t\t\t(yyvsp[(3) - (3)].vsetstmt)->scope = VAR_SET_SCOPE_LOCAL;\n+\t\t\t\t\t(yyval.node) = (PGNode *) (yyvsp[(3) - (3)].vsetstmt);\n+\t\t\t\t;}\n+    break;\n+\n+  case 1383:\n+#line 13 \"third_party/libpg_query/grammar/statements/variable_reset.y\"\n+    {\n+\t\t\t\t\t(yyvsp[(3) - (3)].vsetstmt)->scope = VAR_SET_SCOPE_SESSION;\n+\t\t\t\t\t(yyval.node) = (PGNode *) (yyvsp[(3) - (3)].vsetstmt);\n+\t\t\t\t;}\n+    break;\n+\n+  case 1384:\n+#line 18 \"third_party/libpg_query/grammar/statements/variable_reset.y\"\n+    {\n+\t\t\t\t\t(yyvsp[(3) - (3)].vsetstmt)->scope = VAR_SET_SCOPE_GLOBAL;\n+\t\t\t\t\t(yyval.node) = (PGNode *) (yyvsp[(3) - (3)].vsetstmt);\n+\t\t\t\t;}\n+    break;\n+\n+  case 1385:\n+#line 27 \"third_party/libpg_query/grammar/statements/variable_reset.y\"\n     {\n \t\t\t\t\tPGVariableSetStmt *n = makeNode(PGVariableSetStmt);\n \t\t\t\t\tn->kind = VAR_RESET;\n-\t\t\t\t\tn->scope = VAR_SET_SCOPE_GLOBAL;\n \t\t\t\t\tn->name = (yyvsp[(1) - (1)].str);\n \t\t\t\t\t(yyval.vsetstmt) = n;\n \t\t\t\t;}\n     break;\n \n-  case 1378:\n-#line 16 \"third_party/libpg_query/grammar/statements/variable_reset.y\"\n+  case 1386:\n+#line 34 \"third_party/libpg_query/grammar/statements/variable_reset.y\"\n     {\n \t\t\t\t\tPGVariableSetStmt *n = makeNode(PGVariableSetStmt);\n \t\t\t\t\tn->kind = VAR_RESET_ALL;\n-\t\t\t\t\tn->scope = VAR_SET_SCOPE_GLOBAL;\n \t\t\t\t\t(yyval.vsetstmt) = n;\n \t\t\t\t;}\n     break;\n \n-  case 1379:\n-#line 26 \"third_party/libpg_query/grammar/statements/variable_reset.y\"\n+  case 1387:\n+#line 43 \"third_party/libpg_query/grammar/statements/variable_reset.y\"\n     { (yyval.vsetstmt) = (yyvsp[(1) - (1)].vsetstmt); ;}\n     break;\n \n-  case 1380:\n-#line 28 \"third_party/libpg_query/grammar/statements/variable_reset.y\"\n+  case 1388:\n+#line 45 \"third_party/libpg_query/grammar/statements/variable_reset.y\"\n     {\n \t\t\t\t\tPGVariableSetStmt *n = makeNode(PGVariableSetStmt);\n \t\t\t\t\tn->kind = VAR_RESET;\n@@ -28525,8 +28681,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1381:\n-#line 35 \"third_party/libpg_query/grammar/statements/variable_reset.y\"\n+  case 1389:\n+#line 52 \"third_party/libpg_query/grammar/statements/variable_reset.y\"\n     {\n \t\t\t\t\tPGVariableSetStmt *n = makeNode(PGVariableSetStmt);\n \t\t\t\t\tn->kind = VAR_RESET;\n@@ -28535,7 +28691,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1382:\n+  case 1390:\n #line 3 \"third_party/libpg_query/grammar/statements/variable_show.y\"\n     {\n \t\t\t\tPGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);\n@@ -28546,7 +28702,7 @@ YYLTYPE yylloc;\n \t\t\t;}\n     break;\n \n-  case 1383:\n+  case 1391:\n #line 10 \"third_party/libpg_query/grammar/statements/variable_show.y\"\n     {\n \t\t\t\tPGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);\n@@ -28557,7 +28713,7 @@ YYLTYPE yylloc;\n \t\t\t;}\n     break;\n \n-  case 1384:\n+  case 1392:\n #line 18 \"third_party/libpg_query/grammar/statements/variable_show.y\"\n     {\n \t\t\t\tPGVariableShowStmt *n = makeNode(PGVariableShowStmt);\n@@ -28567,7 +28723,7 @@ YYLTYPE yylloc;\n \t\t\t;}\n     break;\n \n-  case 1385:\n+  case 1393:\n #line 25 \"third_party/libpg_query/grammar/statements/variable_show.y\"\n     {\n \t\t\t\tPGVariableShowStmt *n = makeNode(PGVariableShowStmt);\n@@ -28577,7 +28733,7 @@ YYLTYPE yylloc;\n \t\t\t;}\n     break;\n \n-  case 1386:\n+  case 1394:\n #line 32 \"third_party/libpg_query/grammar/statements/variable_show.y\"\n     {\n \t\t\t\tPGVariableShowStmt *n = makeNode(PGVariableShowStmt);\n@@ -28587,7 +28743,7 @@ YYLTYPE yylloc;\n \t\t\t;}\n     break;\n \n-  case 1387:\n+  case 1395:\n #line 39 \"third_party/libpg_query/grammar/statements/variable_show.y\"\n     {\n \t\t\t\tPGVariableShowStmt *n = makeNode(PGVariableShowStmt);\n@@ -28597,7 +28753,7 @@ YYLTYPE yylloc;\n \t\t\t;}\n     break;\n \n-  case 1388:\n+  case 1396:\n #line 46 \"third_party/libpg_query/grammar/statements/variable_show.y\"\n     {\n \t\t\t\tPGVariableShowStmt *n = makeNode(PGVariableShowStmt);\n@@ -28607,7 +28763,7 @@ YYLTYPE yylloc;\n \t\t\t;}\n     break;\n \n-  case 1389:\n+  case 1397:\n #line 53 \"third_party/libpg_query/grammar/statements/variable_show.y\"\n     {\n \t\t\t\tPGVariableShowStmt *n = makeNode(PGVariableShowStmt);\n@@ -28617,27 +28773,27 @@ YYLTYPE yylloc;\n \t\t\t;}\n     break;\n \n-  case 1394:\n+  case 1402:\n #line 65 \"third_party/libpg_query/grammar/statements/variable_show.y\"\n     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}\n     break;\n \n-  case 1395:\n+  case 1403:\n #line 67 \"third_party/libpg_query/grammar/statements/variable_show.y\"\n     { (yyval.str) = psprintf(\"%s.%s\", (yyvsp[(1) - (3)].str), (yyvsp[(3) - (3)].str)); ;}\n     break;\n \n-  case 1396:\n+  case 1404:\n #line 70 \"third_party/libpg_query/grammar/statements/variable_show.y\"\n     { (yyval.str) = psprintf(\"\\\"%s\\\"\", (yyvsp[(1) - (1)].str)); ;}\n     break;\n \n-  case 1397:\n+  case 1405:\n #line 72 \"third_party/libpg_query/grammar/statements/variable_show.y\"\n     { (yyval.str) = psprintf(\"%s.\\\"%s\\\"\", (yyvsp[(1) - (3)].str), (yyvsp[(3) - (3)].str)); ;}\n     break;\n \n-  case 1398:\n+  case 1406:\n #line 7 \"third_party/libpg_query/grammar/statements/call.y\"\n     {\n \t\t\t\t\tPGCallStmt *n = makeNode(PGCallStmt);\n@@ -28646,7 +28802,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1399:\n+  case 1407:\n #line 10 \"third_party/libpg_query/grammar/statements/view.y\"\n     {\n \t\t\t\t\tPGViewStmt *n = makeNode(PGViewStmt);\n@@ -28661,7 +28817,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1400:\n+  case 1408:\n #line 23 \"third_party/libpg_query/grammar/statements/view.y\"\n     {\n \t\t\t\t\tPGViewStmt *n = makeNode(PGViewStmt);\n@@ -28676,7 +28832,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1401:\n+  case 1409:\n #line 36 \"third_party/libpg_query/grammar/statements/view.y\"\n     {\n \t\t\t\t\tPGViewStmt *n = makeNode(PGViewStmt);\n@@ -28691,7 +28847,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1402:\n+  case 1410:\n #line 49 \"third_party/libpg_query/grammar/statements/view.y\"\n     {\n \t\t\t\t\tPGViewStmt *n = makeNode(PGViewStmt);\n@@ -28711,7 +28867,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1403:\n+  case 1411:\n #line 67 \"third_party/libpg_query/grammar/statements/view.y\"\n     {\n \t\t\t\t\tPGViewStmt *n = makeNode(PGViewStmt);\n@@ -28731,27 +28887,27 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1404:\n+  case 1412:\n #line 87 \"third_party/libpg_query/grammar/statements/view.y\"\n     { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; ;}\n     break;\n \n-  case 1405:\n+  case 1413:\n #line 88 \"third_party/libpg_query/grammar/statements/view.y\"\n     { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; ;}\n     break;\n \n-  case 1406:\n+  case 1414:\n #line 89 \"third_party/libpg_query/grammar/statements/view.y\"\n     { (yyval.viewcheckoption) = PG_LOCAL_CHECK_OPTION; ;}\n     break;\n \n-  case 1407:\n+  case 1415:\n #line 90 \"third_party/libpg_query/grammar/statements/view.y\"\n     { (yyval.viewcheckoption) = PG_NO_CHECK_OPTION; ;}\n     break;\n \n-  case 1408:\n+  case 1416:\n #line 12 \"third_party/libpg_query/grammar/statements/create_as.y\"\n     {\n \t\t\t\t\tPGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);\n@@ -28767,7 +28923,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1409:\n+  case 1417:\n #line 25 \"third_party/libpg_query/grammar/statements/create_as.y\"\n     {\n \t\t\t\t\tPGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);\n@@ -28783,7 +28939,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1410:\n+  case 1418:\n #line 38 \"third_party/libpg_query/grammar/statements/create_as.y\"\n     {\n \t\t\t\t\tPGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);\n@@ -28799,22 +28955,22 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1411:\n+  case 1419:\n #line 54 \"third_party/libpg_query/grammar/statements/create_as.y\"\n     { (yyval.boolean) = true; ;}\n     break;\n \n-  case 1412:\n+  case 1420:\n #line 55 \"third_party/libpg_query/grammar/statements/create_as.y\"\n     { (yyval.boolean) = false; ;}\n     break;\n \n-  case 1413:\n+  case 1421:\n #line 56 \"third_party/libpg_query/grammar/statements/create_as.y\"\n     { (yyval.boolean) = true; ;}\n     break;\n \n-  case 1414:\n+  case 1422:\n #line 62 \"third_party/libpg_query/grammar/statements/create_as.y\"\n     {\n \t\t\t\t\t(yyval.into) = makeNode(PGIntoClause);\n@@ -28829,7 +28985,7 @@ YYLTYPE yylloc;\n \n \n /* Line 1267 of yacc.c.  */\n-#line 28833 \"third_party/libpg_query/grammar/grammar_out.cpp\"\n+#line 28989 \"third_party/libpg_query/grammar/grammar_out.cpp\"\n       default: break;\n     }\n   YY_SYMBOL_PRINT (\"-> $$ =\", yyr1[yyn], &yyval, &yyloc);\ndiff --git a/tools/jdbc/duckdb_extension_config.cmake b/tools/jdbc/duckdb_extension_config.cmake\nnew file mode 100644\nindex 000000000000..ba7c0b278241\n--- /dev/null\n+++ b/tools/jdbc/duckdb_extension_config.cmake\n@@ -0,0 +1,9 @@\n+################################################################################\n+# JDBC DuckDB extension config\n+################################################################################\n+#\n+# This is the default extension configuration for JDBC builds. Basically it means that all these extensions are\n+# \"baked in\" to the python binaries.\n+duckdb_extension_load(visualizer)\n+duckdb_extension_load(parquet)\n+duckdb_extension_load(icu)\n\\ No newline at end of file\ndiff --git a/tools/jdbc/src/jni/duckdb_java.cpp b/tools/jdbc/src/jni/duckdb_java.cpp\nindex b2206f79b264..e841a5641912 100644\n--- a/tools/jdbc/src/jni/duckdb_java.cpp\n+++ b/tools/jdbc/src/jni/duckdb_java.cpp\n@@ -1081,6 +1081,8 @@ JNIEXPORT jlong JNICALL Java_org_duckdb_DuckDBNative_duckdb_1jdbc_1arrow_1stream\n \t\tenv->ThrowNew(J_SQLException, e.what());\n \t\treturn 0;\n \t}\n+\t//\tUnreachable\n+\treturn 0;\n }\n \n class JavaArrowTabularStreamFactory {\ndiff --git a/tools/jdbc/src/main/java/org/duckdb/DuckDBResultSet.java b/tools/jdbc/src/main/java/org/duckdb/DuckDBResultSet.java\nindex 1e38932c0e3f..c57eb1c8e79a 100644\n--- a/tools/jdbc/src/main/java/org/duckdb/DuckDBResultSet.java\n+++ b/tools/jdbc/src/main/java/org/duckdb/DuckDBResultSet.java\n@@ -1141,7 +1141,11 @@ public void updateNClob(int columnIndex, Reader reader) throws SQLException {\n \tpublic void updateNClob(String columnLabel, Reader reader) throws SQLException {\n \t\tthrow new SQLFeatureNotSupportedException(\"updateNClob\");\n \t}\n-\n+\t\n+\tprivate boolean isTimestamp(DuckDBColumnType sqlType) {\n+\t\treturn (sqlType == DuckDBColumnType.TIMESTAMP || sqlType == DuckDBColumnType.TIMESTAMP_WITH_TIME_ZONE);\n+\t}\n+\t\n \tpublic <T> T getObject(int columnIndex, Class<T> type) throws SQLException {\n \t\tif (type == null) {\n \t\t\tthrow new SQLException(\"type is null\");\n@@ -1193,8 +1197,7 @@ public <T> T getObject(int columnIndex, Class<T> type) throws SQLException {\n \t\t\t\tthrow new SQLException(\"Can't convert value to integer \" + type.toString());\n \t\t\t}\n \t\t} else if (type == Long.class) {\n-\t\t\tif (sqlType == DuckDBColumnType.BIGINT\n-\t\t\t\t\t|| sqlType == DuckDBColumnType.TIMESTAMP) {\n+\t\t\tif (sqlType == DuckDBColumnType.BIGINT || isTimestamp(sqlType)) {\n \t\t\t\treturn type.cast(getLong(columnIndex));\n \t\t\t} else if (sqlType == DuckDBColumnType.UINTEGER) {\n \t\t\t\tthrow new SQLException(\"Can't convert value to long \" + type.toString());\n@@ -1227,13 +1230,13 @@ public <T> T getObject(int columnIndex, Class<T> type) throws SQLException {\n \t\t\t\tthrow new SQLException(\"Can't convert value to Time \" + type.toString());\n \t\t\t}\n \t\t} else if (type == Timestamp.class) {\n-\t\t\tif (sqlType == DuckDBColumnType.TIMESTAMP) {\n+\t\t\tif (isTimestamp(sqlType)) {\n \t\t\t\treturn type.cast(getTimestamp(columnIndex));\n \t\t\t} else {\n \t\t\t\tthrow new SQLException(\"Can't convert value to Timestamp \" + type.toString());\n \t\t\t}\n \t\t} else if (type == LocalDateTime.class) {\n-\t\t\tif (sqlType == DuckDBColumnType.TIMESTAMP) {\n+\t\t\tif (isTimestamp(sqlType)) {\n \t\t\t\treturn type.cast(getLocalDateTime(columnIndex));\n \t\t\t} else {\n \t\t\t\tthrow new SQLException(\"Can't convert value to LocalDateTime \" + type.toString());\ndiff --git a/tools/jdbc/src/main/java/org/duckdb/DuckDBVector.java b/tools/jdbc/src/main/java/org/duckdb/DuckDBVector.java\nindex 76ad064a29cb..b85605d0f7d1 100644\n--- a/tools/jdbc/src/main/java/org/duckdb/DuckDBVector.java\n+++ b/tools/jdbc/src/main/java/org/duckdb/DuckDBVector.java\n@@ -171,7 +171,7 @@ Timestamp getTimestamp(int idx) throws SQLException {\n \t\t\treturn null;\n \t\t}\n \n-\t\tif (isType(DuckDBColumnType.TIMESTAMP)) {\n+\t\tif (isType(DuckDBColumnType.TIMESTAMP) || isType(DuckDBColumnType.TIMESTAMP_WITH_TIME_ZONE)) {\n \t\t\treturn DuckDBTimestamp.toSqlTimestamp(getbuf(idx, 8).getLong());\n \t\t}\n \t\tif (isType(DuckDBColumnType.TIMESTAMP_MS)) {\n@@ -306,7 +306,7 @@ long getLong(int idx) throws SQLException {\n \t\tif (check_and_null(idx)) {\n \t\t\treturn 0;\n \t\t}\n-\t\tif (isType(DuckDBColumnType.BIGINT) || isType(DuckDBColumnType.TIMESTAMP)) {\n+\t\tif (isType(DuckDBColumnType.BIGINT) || isType(DuckDBColumnType.TIMESTAMP) || isType(DuckDBColumnType.TIMESTAMP_WITH_TIME_ZONE)) {\n \t\t\treturn getbuf(idx, 8).getLong();\n \t\t}\n \t\tObject o = getObject(idx);\n@@ -468,7 +468,7 @@ Timestamp getTimestamp(int idx, Calendar cal) throws SQLException {\n \t\t}\n \t\t// Our raw data is already a proper count of units since the epoch\n \t\t// So just construct the SQL Timestamp.\n-\t\tif (isType(DuckDBColumnType.TIMESTAMP)) {\n+\t\tif (isType(DuckDBColumnType.TIMESTAMP) || isType(DuckDBColumnType.TIMESTAMP_WITH_TIME_ZONE)) {\n \t\t\treturn DuckDBTimestamp.fromMicroInstant(getbuf(idx, 8).getLong());\n \t\t}\n \t\tif (isType(DuckDBColumnType.TIMESTAMP_MS)) {\n@@ -488,7 +488,7 @@ LocalDateTime getLocalDateTime(int idx) throws SQLException {\n \t\tif (check_and_null(idx)) {\n \t\t\treturn null;\n \t\t}\n-\t\tif (isType(DuckDBColumnType.TIMESTAMP)) {\n+\t\tif (isType(DuckDBColumnType.TIMESTAMP) || isType(DuckDBColumnType.TIMESTAMP_WITH_TIME_ZONE)) {\n \t\t\treturn DuckDBTimestamp.toLocalDateTime(getbuf(idx, 8).getLong());\n \t\t}\n \t\tObject o = getObject(idx);\ndiff --git a/tools/nodejs/binding.gyp.in b/tools/nodejs/binding.gyp.in\nindex 25039a076c58..0d93a6da9b7e 100644\n--- a/tools/nodejs/binding.gyp.in\n+++ b/tools/nodejs/binding.gyp.in\n@@ -17,7 +17,7 @@\n             ],\n             \"defines\": [\n                 \"NAPI_DISABLE_CPP_EXCEPTIONS=1\",\n-                \"NAPI_VERSION=5\",\n+                \"NAPI_VERSION=6\",\n                 \"${DEFINES}\"\n             ],\n             \"cflags_cc\": [\ndiff --git a/tools/nodejs/configure.py b/tools/nodejs/configure.py\nindex 3409c8a10e57..754fd090f34a 100644\n--- a/tools/nodejs/configure.py\n+++ b/tools/nodejs/configure.py\n@@ -20,7 +20,7 @@\n sys.path.append(scripts_dir)\n import package_build\n \n-defines = ['BUILD_{}_EXTENSION'.format(ext.upper()) for ext in extensions]\n+defines = ['DUCKDB_EXTENSION_{}_LINKED'.format(ext.upper()) for ext in extensions]\n \n if os.environ.get('DUCKDB_NODE_BUILD_CACHE') == '1' and os.path.isfile(cache_file):\n     with open(cache_file, 'rb') as f:\ndiff --git a/tools/nodejs/duckdb_extension_config.cmake b/tools/nodejs/duckdb_extension_config.cmake\nnew file mode 100644\nindex 000000000000..9352d28fe5ed\n--- /dev/null\n+++ b/tools/nodejs/duckdb_extension_config.cmake\n@@ -0,0 +1,10 @@\n+################################################################################\n+# NodeJS DuckDB extension config\n+################################################################################\n+#\n+# This is the default extension configuration for NodeJS builds. Basically it means that all these extensions are\n+# \"baked in\" to the NodeJS binaries Note that the configuration here is only when building Node using the main\n+# CMakeLists.txt file with the `BUILD_R` variable.\n+# TODO: unify this by making setup.py also use this configuration, making this the config for all Node builds\n+duckdb_extension_load(json)\n+duckdb_extension_load(icu)\n\\ No newline at end of file\ndiff --git a/tools/nodejs/src/statement.cpp b/tools/nodejs/src/statement.cpp\nindex 910d8996dd87..94a22f841015 100644\n--- a/tools/nodejs/src/statement.cpp\n+++ b/tools/nodejs/src/statement.cpp\n@@ -147,7 +147,7 @@ static Napi::Value convert_col_val(Napi::Env &env, duckdb::Value dval, duckdb::L\n \t\tvalue = Napi::Number::New(env, duckdb::IntegerValue::Get(dval));\n \t} break;\n \tcase duckdb::LogicalTypeId::BIGINT: {\n-\t\tvalue = Napi::Number::New(env, duckdb::BigIntValue::Get(dval));\n+\t\tvalue = Napi::BigInt::New(env, duckdb::BigIntValue::Get(dval));\n \t} break;\n \tcase duckdb::LogicalTypeId::UTINYINT: {\n \t\tvalue = Napi::Number::New(env, duckdb::UTinyIntValue::Get(dval));\n@@ -159,7 +159,7 @@ static Napi::Value convert_col_val(Napi::Env &env, duckdb::Value dval, duckdb::L\n \t\tvalue = Napi::Number::New(env, duckdb::UIntegerValue::Get(dval));\n \t} break;\n \tcase duckdb::LogicalTypeId::UBIGINT: {\n-\t\tvalue = Napi::Number::New(env, duckdb::UBigIntValue::Get(dval));\n+\t\tvalue = Napi::BigInt::New(env, duckdb::UBigIntValue::Get(dval));\n \t} break;\n \tcase duckdb::LogicalTypeId::FLOAT: {\n \t\tvalue = Napi::Number::New(env, duckdb::FloatValue::Get(dval));\n@@ -168,7 +168,13 @@ static Napi::Value convert_col_val(Napi::Env &env, duckdb::Value dval, duckdb::L\n \t\tvalue = Napi::Number::New(env, duckdb::DoubleValue::Get(dval));\n \t} break;\n \tcase duckdb::LogicalTypeId::HUGEINT: {\n-\t\tvalue = Napi::Number::New(env, dval.GetValue<double>());\n+\t\tauto val = duckdb::HugeIntValue::Get(dval);\n+\t\tauto negative = val.upper < 0;\n+\t\tif (negative) {\n+\t\t\tduckdb::Hugeint::NegateInPlace(val); // remove signing bit\n+\t\t}\n+\t\tconst uint64_t words[] = {val.lower, val.upper};\n+\t\tvalue = Napi::BigInt::New(env, negative, 2, words);\n \t} break;\n \tcase duckdb::LogicalTypeId::DECIMAL: {\n \t\tvalue = Napi::Number::New(env, dval.GetValue<double>());\ndiff --git a/tools/nodejs/tsconfig.json b/tools/nodejs/tsconfig.json\nindex 41f07895e243..d152d1811eec 100644\n--- a/tools/nodejs/tsconfig.json\n+++ b/tools/nodejs/tsconfig.json\n@@ -2,6 +2,7 @@\n   \"compilerOptions\": {\n     \"allowJs\": false,\n     \"esModuleInterop\": true,\n+    \"lib\": [\"ES2015\"],\n     \"noImplicitAny\": true,\n     \"strict\": true,\n     \"outDir\": \"./dist\",\ndiff --git a/tools/pythonpkg/duckdb-stubs/__init__.pyi b/tools/pythonpkg/duckdb-stubs/__init__.pyi\nindex 46d0328e0a4c..acbaa1e732de 100644\n--- a/tools/pythonpkg/duckdb-stubs/__init__.pyi\n+++ b/tools/pythonpkg/duckdb-stubs/__init__.pyi\n@@ -170,6 +170,7 @@ class DuckDBPyConnection:\n     def from_substrait_json(self, json: str) -> DuckDBPyRelation: ...\n     def get_table_names(self, query: str) -> Set[str]: ...\n     def install_extension(self, *args, **kwargs) -> None: ...\n+    def interrupt(self) -> None: ...\n     def list_filesystems(self) -> list: ...\n     def filesystem_is_registered(self, name: str) -> bool: ...\n     def load_extension(self, extension: str) -> None: ...\n@@ -522,6 +523,7 @@ def get_substrait(query: str, connection: DuckDBPyConnection = ...) -> DuckDBPyR\n def get_substrait_json(query: str, connection: DuckDBPyConnection = ...) -> DuckDBPyRelation: ...\n def get_table_names(query: str, connection: DuckDBPyConnection = ...) -> Set[str]: ...\n def install_extension(*args, connection: DuckDBPyConnection = ..., **kwargs) -> None: ...\n+def interrupt(connection: DuckDBPyConnection = ...) -> None: ...\n def list_filesystems(connection: DuckDBPyConnection = ...) -> list: ...\n def filesystem_is_registered(name: str, connection: DuckDBPyConnection = ...) -> bool: ...\n def load_extension(extension: str, connection: DuckDBPyConnection = ...) -> None: ...\ndiff --git a/tools/pythonpkg/duckdb_extension_config.cmake b/tools/pythonpkg/duckdb_extension_config.cmake\nnew file mode 100644\nindex 000000000000..a142f9171d26\n--- /dev/null\n+++ b/tools/pythonpkg/duckdb_extension_config.cmake\n@@ -0,0 +1,15 @@\n+################################################################################\n+# Python DuckDB extension config\n+################################################################################\n+#\n+# This is the default extension configuration for Python builds. Basically it means that all these extensions are\n+# \"baked in\" to the python binaries. Note that the configuration here is only when building Python using the main\n+# CMakeLists.txt file with the `BUILD_PYTHON` variable.\n+# TODO: unify this by making setup.py also use this configuration, making this the config for all python builds\n+duckdb_extension_load(json)\n+duckdb_extension_load(fts)\n+duckdb_extension_load(visualizer)\n+duckdb_extension_load(tpcds)\n+duckdb_extension_load(tpch)\n+duckdb_extension_load(parquet)\n+duckdb_extension_load(icu)\n\\ No newline at end of file\ndiff --git a/tools/pythonpkg/duckdb_python.cpp b/tools/pythonpkg/duckdb_python.cpp\nindex 505fd890a9b8..d8ed141bffad 100644\n--- a/tools/pythonpkg/duckdb_python.cpp\n+++ b/tools/pythonpkg/duckdb_python.cpp\n@@ -107,6 +107,8 @@ static void InitializeConnectionMethods(py::module_ &m) {\n \t         \"Execute the given prepared statement multiple times using the list of parameter sets in parameters\",\n \t         py::arg(\"query\"), py::arg(\"parameters\") = py::none(), py::arg(\"connection\") = py::none())\n \t    .def(\"close\", &PyConnectionWrapper::Close, \"Close the connection\", py::arg(\"connection\") = py::none())\n+\t    .def(\"interrupt\", &PyConnectionWrapper::Interrupt, \"Interrupt pending operations\",\n+\t         py::arg(\"connection\") = py::none())\n \t    .def(\"fetchone\", &PyConnectionWrapper::FetchOne, \"Fetch a single row from a result following execute\",\n \t         py::arg(\"connection\") = py::none())\n \t    .def(\"fetchmany\", &PyConnectionWrapper::FetchMany, \"Fetch the next set of rows from a result following execute\",\ndiff --git a/tools/pythonpkg/setup.py b/tools/pythonpkg/setup.py\nindex a340ce10d22e..3efa1d852530 100755\n--- a/tools/pythonpkg/setup.py\n+++ b/tools/pythonpkg/setup.py\n@@ -143,7 +143,7 @@ def open_utf8(fpath, flags):\n     extensions += ['httpfs']\n \n for ext in extensions:\n-    toolchain_args.extend(['-DBUILD_{}_EXTENSION'.format(ext.upper())])\n+    toolchain_args.extend(['-DDUCKDB_EXTENSION_{}_LINKED'.format(ext.upper())])\n \n class get_pybind_include(object):\n     def __init__(self, user=False):\ndiff --git a/tools/pythonpkg/src/include/duckdb_python/connection_wrapper.hpp b/tools/pythonpkg/src/include/duckdb_python/connection_wrapper.hpp\nindex 43f1ea410494..8ea2573fca5d 100644\n--- a/tools/pythonpkg/src/include/duckdb_python/connection_wrapper.hpp\n+++ b/tools/pythonpkg/src/include/duckdb_python/connection_wrapper.hpp\n@@ -113,6 +113,8 @@ class PyConnectionWrapper {\n \n \tstatic void Close(shared_ptr<DuckDBPyConnection> conn = nullptr);\n \n+\tstatic void Interrupt(shared_ptr<DuckDBPyConnection> conn = nullptr);\n+\n \tstatic shared_ptr<DuckDBPyConnection> Cursor(shared_ptr<DuckDBPyConnection> conn = nullptr);\n \n \tstatic Optional<py::list> GetDescription(shared_ptr<DuckDBPyConnection> conn = nullptr);\ndiff --git a/tools/pythonpkg/src/include/duckdb_python/pyconnection/pyconnection.hpp b/tools/pythonpkg/src/include/duckdb_python/pyconnection/pyconnection.hpp\nindex b6c2533a934f..da577fb39c67 100644\n--- a/tools/pythonpkg/src/include/duckdb_python/pyconnection/pyconnection.hpp\n+++ b/tools/pythonpkg/src/include/duckdb_python/pyconnection/pyconnection.hpp\n@@ -162,6 +162,8 @@ struct DuckDBPyConnection : public std::enable_shared_from_this<DuckDBPyConnecti\n \n \tvoid Close();\n \n+\tvoid Interrupt();\n+\n \tModifiedMemoryFileSystem &GetObjectFileSystem();\n \n \t// cursor() is stupid\ndiff --git a/tools/pythonpkg/src/pyconnection.cpp b/tools/pythonpkg/src/pyconnection.cpp\nindex fe47bea63fe0..26b9331e5b1e 100644\n--- a/tools/pythonpkg/src/pyconnection.cpp\n+++ b/tools/pythonpkg/src/pyconnection.cpp\n@@ -152,6 +152,7 @@ static void InitializeConnectionMethods(py::class_<DuckDBPyConnection, shared_pt\n \t         \"Execute the given prepared statement multiple times using the list of parameter sets in parameters\",\n \t         py::arg(\"query\"), py::arg(\"parameters\") = py::none())\n \t    .def(\"close\", &DuckDBPyConnection::Close, \"Close the connection\")\n+\t    .def(\"interrupt\", &DuckDBPyConnection::Interrupt, \"Interrupt pending operations\")\n \t    .def(\"fetchone\", &DuckDBPyConnection::FetchOne, \"Fetch a single row from a result following execute\")\n \t    .def(\"fetchmany\", &DuckDBPyConnection::FetchMany, \"Fetch the next set of rows from a result following execute\",\n \t         py::arg(\"size\") = 1)\n@@ -1202,6 +1203,13 @@ void DuckDBPyConnection::Close() {\n \tcursors.clear();\n }\n \n+void DuckDBPyConnection::Interrupt() {\n+\tif (!connection) {\n+\t\tthrow ConnectionException(\"Connection has already been closed\");\n+\t}\n+\tconnection->Interrupt();\n+}\n+\n void DuckDBPyConnection::InstallExtension(const string &extension, bool force_install) {\n \tExtensionHelper::InstallExtension(*connection->context, extension, force_install);\n }\ndiff --git a/tools/pythonpkg/src/pyduckdb/connection_wrapper.cpp b/tools/pythonpkg/src/pyduckdb/connection_wrapper.cpp\nindex 6e645b4225d4..9e01ef239950 100644\n--- a/tools/pythonpkg/src/pyduckdb/connection_wrapper.cpp\n+++ b/tools/pythonpkg/src/pyduckdb/connection_wrapper.cpp\n@@ -215,6 +215,10 @@ void PyConnectionWrapper::Close(shared_ptr<DuckDBPyConnection> conn) {\n \tconn->Close();\n }\n \n+void PyConnectionWrapper::Interrupt(shared_ptr<DuckDBPyConnection> conn) {\n+\tconn->Interrupt();\n+}\n+\n shared_ptr<DuckDBPyConnection> PyConnectionWrapper::Cursor(shared_ptr<DuckDBPyConnection> conn) {\n \treturn conn->Cursor();\n }\ndiff --git a/tools/rpkg/.Rbuildignore b/tools/rpkg/.Rbuildignore\nindex 5e07fb510e97..3859f2c40782 100644\n--- a/tools/rpkg/.Rbuildignore\n+++ b/tools/rpkg/.Rbuildignore\n@@ -16,3 +16,4 @@ deploy-*\n CMakeLists.txt\n NEWS.md\n tests/regression\n+duckdb_extension_config.cmake\n\\ No newline at end of file\ndiff --git a/tools/rpkg/duckdb_extension_config.cmake b/tools/rpkg/duckdb_extension_config.cmake\nnew file mode 100644\nindex 000000000000..8a12cd2a4fa2\n--- /dev/null\n+++ b/tools/rpkg/duckdb_extension_config.cmake\n@@ -0,0 +1,11 @@\n+################################################################################\n+# R Package DuckDB extension config\n+################################################################################\n+#\n+# This is the default extension configuration for R builds. Basically it  means that all these extensions\n+# are \"baked in\" to the R binaries. Note that the configuration here is only when building R using the main\n+# CMakeLists.txt file with the `BUILD_R` variable.\n+# TODO: unify this by making setup.py also use this configuration, making this the config for all R builds\n+duckdb_extension_load(visualizer)\n+duckdb_extension_load(parquet)\n+duckdb_extension_load(icu)\n\\ No newline at end of file\ndiff --git a/tools/rpkg/rconfigure.py b/tools/rpkg/rconfigure.py\nindex 6f955ef09b41..71b52711198d 100644\n--- a/tools/rpkg/rconfigure.py\n+++ b/tools/rpkg/rconfigure.py\n@@ -32,8 +32,9 @@ def open_utf8(fpath, flags):\n         return open(fpath, flags, encoding=\"utf8\")\n \n extension_list = \"\"\n+\n for ext in extensions:\n-    extension_list += ' -DBUILD_{}_EXTENSION'.format(ext.upper())\n+    extension_list += ' -DDUCKDB_EXTENSION_{}_LINKED'.format(ext.upper())\n     extension_list += \" -DDUCKDB_BUILD_LIBRARY\"\n \n libraries = []\ndiff --git a/tools/sqlite3_api_wrapper/CMakeLists.txt b/tools/sqlite3_api_wrapper/CMakeLists.txt\nindex a04bf7f92c69..1dbae5a565e5 100644\n--- a/tools/sqlite3_api_wrapper/CMakeLists.txt\n+++ b/tools/sqlite3_api_wrapper/CMakeLists.txt\n@@ -10,7 +10,7 @@ add_definitions(-DUSE_DUCKDB_SHELL_WRAPPER)\n \n include_directories(../../third_party/utf8proc/include)\n \n-if(NOT BUILD_AUTOCOMPLETE_EXTENSION AND NOT DISABLE_BUILTIN_EXTENSIONS)\n+if(DUCKDB_EXTENSION_AUTOCOMPLETE_SHOULD_LINK)\n   include_directories(../../extension/autocomplete/include)\n   set(ALL_OBJECT_FILES ${ALL_OBJECT_FILES}\n                        ../../extension/autocomplete/autocomplete_extension.cpp)\n",
  "test_patch": "diff --git a/test/api/CMakeLists.txt b/test/api/CMakeLists.txt\nindex 30f528f11009..8e10df1ac2ed 100644\n--- a/test/api/CMakeLists.txt\n+++ b/test/api/CMakeLists.txt\n@@ -23,13 +23,14 @@ set(TEST_API_OBJECTS\n     test_progress_bar.cpp\n     test_threads.cpp\n     test_windows_header_compatibility.cpp\n-    test_windows_unicode_path.cpp)\n+    test_windows_unicode_path.cpp\n+    test_object_cache.cpp)\n \n if(NOT WIN32)\n   set(TEST_API_OBJECTS ${TEST_API_OBJECTS} test_read_only.cpp)\n endif()\n \n-if(${BUILD_TPCH_EXTENSION} AND NOT ${DISABLE_BUILTIN_EXTENSIONS})\n+if(DUCKDB_EXTENSION_TPCH_SHOULD_LINK)\n   include_directories(../../extension/tpch/include)\n   set(TEST_API_OBJECTS ${TEST_API_OBJECTS} test_tpch_with_relations.cpp\n                        serialized_plans/test_plan_serialization_bwc.cpp)\ndiff --git a/test/api/adbc/test_adbc.cpp b/test/api/adbc/test_adbc.cpp\nindex 6d7a5b233883..8a89c939f291 100644\n--- a/test/api/adbc/test_adbc.cpp\n+++ b/test/api/adbc/test_adbc.cpp\n@@ -567,3 +567,162 @@ TEST_CASE(\"Test ADBC Transaction Errors\", \"[adbc]\") {\n \n \tREQUIRE(SUCCESS(AdbcConnectionRollback(&adbc_connection, &adbc_error)));\n }\n+\n+TEST_CASE(\"Test ADBC ConnectionGetTableSchema\", \"[adbc]\") {\n+\tif (!duckdb_lib) {\n+\t\treturn;\n+\t}\n+\tduckdb_adbc::AdbcDatabase adbc_database;\n+\tduckdb_adbc::AdbcConnection adbc_connection;\n+\n+\tduckdb_adbc::AdbcError adbc_error;\n+\tduckdb_adbc::InitiliazeADBCError(&adbc_error);\n+\n+\tArrowSchema arrow_schema;\n+\tREQUIRE(SUCCESS(AdbcDatabaseNew(&adbc_database, &adbc_error)));\n+\tREQUIRE(SUCCESS(AdbcDatabaseSetOption(&adbc_database, \"driver\", duckdb_lib, &adbc_error)));\n+\tREQUIRE(SUCCESS(AdbcDatabaseSetOption(&adbc_database, \"entrypoint\", \"duckdb_adbc_init\", &adbc_error)));\n+\tREQUIRE(SUCCESS(AdbcDatabaseSetOption(&adbc_database, \"path\", \":memory:\", &adbc_error)));\n+\n+\tREQUIRE(SUCCESS(AdbcDatabaseInit(&adbc_database, &adbc_error)));\n+\n+\tREQUIRE(SUCCESS(AdbcConnectionNew(&adbc_connection, &adbc_error)));\n+\tREQUIRE(SUCCESS(AdbcConnectionInit(&adbc_connection, &adbc_database, &adbc_error)));\n+\n+\t// Test successful schema return\n+\tREQUIRE(SUCCESS(\n+\t    AdbcConnectionGetTableSchema(&adbc_connection, nullptr, \"main\", \"duckdb_indexes\", &arrow_schema, &adbc_error)));\n+\tREQUIRE(arrow_schema.n_children == 12);\n+\tarrow_schema.release(&arrow_schema);\n+\n+\t// Test Catalog Name (Not accepted)\n+\tREQUIRE(!SUCCESS(\n+\t    AdbcConnectionGetTableSchema(&adbc_connection, \"bla\", \"main\", \"duckdb_indexes\", &arrow_schema, &adbc_error)));\n+\tREQUIRE(std::strcmp(adbc_error.message,\n+\t                    \"Catalog Name is not used in DuckDB. It must be set to nullptr or an empty string\") == 0);\n+\tadbc_error.release(&adbc_error);\n+\n+\t// Test null schema name\n+\tREQUIRE(!SUCCESS(AdbcConnectionGetTableSchema(&adbc_connection, nullptr, nullptr, \"duckdb_indexes\", &arrow_schema,\n+\t                                              &adbc_error)));\n+\tREQUIRE(std::strcmp(adbc_error.message, \"AdbcConnectionGetTableSchema: must provide db_schema\") == 0);\n+\tadbc_error.release(&adbc_error);\n+\n+\t// Empty schema should be fine\n+\tREQUIRE(SUCCESS(\n+\t    AdbcConnectionGetTableSchema(&adbc_connection, nullptr, \"\", \"duckdb_indexes\", &arrow_schema, &adbc_error)));\n+\tREQUIRE(arrow_schema.n_children == 12);\n+\tarrow_schema.release(&arrow_schema);\n+\n+\t// Test null and empty table name\n+\tREQUIRE(!SUCCESS(AdbcConnectionGetTableSchema(&adbc_connection, nullptr, \"\", nullptr, &arrow_schema, &adbc_error)));\n+\tREQUIRE(std::strcmp(adbc_error.message, \"AdbcConnectionGetTableSchema: must provide table_name\") == 0);\n+\tadbc_error.release(&adbc_error);\n+\n+\tREQUIRE(!SUCCESS(AdbcConnectionGetTableSchema(&adbc_connection, nullptr, \"\", \"\", &arrow_schema, &adbc_error)));\n+\tREQUIRE(std::strcmp(adbc_error.message, \"AdbcConnectionGetTableSchema: must provide table_name\") == 0);\n+\tadbc_error.release(&adbc_error);\n+\n+\t// Test invalid schema\n+\n+\tREQUIRE(!SUCCESS(\n+\t    AdbcConnectionGetTableSchema(&adbc_connection, nullptr, \"b\", \"duckdb_indexes\", &arrow_schema, &adbc_error)));\n+\tREQUIRE(std::strcmp(adbc_error.message, \"Catalog Error: Table with name duckdb_indexes does not exist!\\nDid you \"\n+\t                                        \"mean \\\"main.duckdb_indexes\\\"?\\nLINE 1: SELECT * FROM b.duckdb_indexes \"\n+\t                                        \"LIMIT 0;\\n                      ^\\nunable to initialize statement\") == 0);\n+\tadbc_error.release(&adbc_error);\n+\n+\t// Test invalid table\n+\tREQUIRE(!SUCCESS(\n+\t    AdbcConnectionGetTableSchema(&adbc_connection, nullptr, \"\", \"duckdb_indexeeees\", &arrow_schema, &adbc_error)));\n+\tREQUIRE(\n+\t    std::strcmp(\n+\t        adbc_error.message,\n+\t        \"Catalog Error: Table with name duckdb_indexeeees does not exist!\\nDid you mean \\\"duckdb_indexes\\\"?\\nLINE \"\n+\t        \"1: SELECT * FROM duckdb_indexeeees LIMIT 0;\\n                      ^\\nunable to initialize statement\") ==\n+\t    0);\n+\tadbc_error.release(&adbc_error);\n+}\n+\n+TEST_CASE(\"Test ADBC Substrait\", \"[adbc]\") {\n+\tif (!duckdb_lib) {\n+\t\treturn;\n+\t}\n+\tduckdb_adbc::AdbcDatabase adbc_database;\n+\tduckdb_adbc::AdbcConnection adbc_connection;\n+\n+\tduckdb_adbc::AdbcError adbc_error;\n+\tduckdb_adbc::AdbcStatement adbc_statement;\n+\tduckdb_adbc::InitiliazeADBCError(&adbc_error);\n+\n+\tArrowArrayStream arrow_stream;\n+\tArrowArray arrow_array;\n+\n+\tREQUIRE(SUCCESS(AdbcDatabaseNew(&adbc_database, &adbc_error)));\n+\tREQUIRE(SUCCESS(AdbcDatabaseSetOption(&adbc_database, \"driver\", duckdb_lib, &adbc_error)));\n+\tREQUIRE(SUCCESS(AdbcDatabaseSetOption(&adbc_database, \"entrypoint\", \"duckdb_adbc_init\", &adbc_error)));\n+\tREQUIRE(SUCCESS(AdbcDatabaseSetOption(&adbc_database, \"path\", \":memory:\", &adbc_error)));\n+\n+\tREQUIRE(SUCCESS(AdbcDatabaseInit(&adbc_database, &adbc_error)));\n+\n+\tREQUIRE(SUCCESS(AdbcConnectionNew(&adbc_connection, &adbc_error)));\n+\tREQUIRE(SUCCESS(AdbcConnectionInit(&adbc_connection, &adbc_database, &adbc_error)));\n+\n+\tauto conn = (duckdb::Connection *)adbc_connection.private_data;\n+\tif (!conn->context->db->ExtensionIsLoaded(\"substrait\")) {\n+\t\t// We need substrait to run this test\n+\t\treturn;\n+\t}\n+\t// Insert Data\n+\tADBCTestDatabase db;\n+\tauto &input_data = db.Query(\"SELECT 'Push Ups' as exercise, 3 as difficulty_level;\");\n+\tstring table_name = \"crossfit\";\n+\tREQUIRE(SUCCESS(AdbcStatementNew(&adbc_connection, &adbc_statement, &adbc_error)));\n+\n+\tREQUIRE(SUCCESS(duckdb_adbc::StatementSetOption(&adbc_statement, ADBC_INGEST_OPTION_TARGET_TABLE,\n+\t                                                table_name.c_str(), &adbc_error)));\n+\n+\tREQUIRE(SUCCESS(duckdb_adbc::StatementBindStream(&adbc_statement, &input_data, &adbc_error)));\n+\n+\tREQUIRE(SUCCESS(duckdb_adbc::StatementExecuteQuery(&adbc_statement, nullptr, nullptr, &adbc_error)));\n+\n+\t// SELECT COUNT(*) FROM CROSSFIT\n+\tauto str_plan =\n+\t    \"\\\\x12\\\\x09\\\\x1A\\\\x07\\\\x10\\\\x01\\\\x1A\\\\x03lte\\\\x12\\\\x11\\\\x1A\\\\x0F\\\\x10\\\\x02\\\\x1A\\\\x0Bis_not_\"\n+\t    \"null\\\\x12\\\\x09\\\\x1A\\\\x07\\\\x10\\\\x03\\\\x1A\\\\x03and\\\\x12\\\\x0B\\\\x1A\\\\x09\\\\x10\\\\x04\\\\x1A\\\\x05count\\\\x1A\\\\xC7\\\\x01\\\\x\"\n+\t    \"12\\\\xC4\\\\x01\\\\x0A\\\\xB7\\\\x01:\\\\xB4\\\\x01\\\\x12\\\\xA7\\\\x01\\\\x22\\\\xA4\\\\x01\\\\x12\\\\x93\\\\x01\\\\x0A\\\\x90\\\\x01\\\\x12.\"\n+\t    \"\\\\x0A\\\\x08exercise\\\\x0A\\\\x0Fdificulty_level\\\\x12\\\\x11\\\\x0A\\\\x07\\\\xB2\\\\x01\\\\x04\\\\x08\\\\x0D\\\\x18\\\\x01\\\\x0A\\\\x04*\"\n+\t    \"\\\\x02\\\\x10\\\\x01\\\\x18\\\\x02\\\\x1AJ\\\\x1AH\\\\x08\\\\x03\\\\x1A\\\\x04\\\\x0A\\\\x02\\\\x10\\\\x01\\\\x22\\\\x22\\\\x1A \"\n+\t    \"\\\\x1A\\\\x1E\\\\x08\\\\x01\\\\x1A\\\\x04*\"\n+\t    \"\\\\x02\\\\x10\\\\x01\\\\x22\\\\x0C\\\\x1A\\\\x0A\\\\x12\\\\x08\\\\x0A\\\\x04\\\\x12\\\\x02\\\\x08\\\\x01\\\\x22\\\\x00\\\\x22\\\\x06\\\\x1A\\\\x04\\\\x0A\"\n+\t    \"\\\\x02(\\\\x05\\\\x22\\\\x1A\\\\x1A\\\\x18\\\\x1A\\\\x16\\\\x08\\\\x02\\\\x1A\\\\x04*\"\n+\t    \"\\\\x02\\\\x10\\\\x01\\\\x22\\\\x0C\\\\x1A\\\\x0A\\\\x12\\\\x08\\\\x0A\\\\x04\\\\x12\\\\x02\\\\x08\\\\x01\\\\x22\\\\x00\\\\x22\\\\x06\\\\x0A\\\\x02\\\\x0A\"\n+\t    \"\\\\x00\\\\x10\\\\x01:\\\\x0A\\\\x0A\\\\x08crossfit\\\\x1A\\\\x00\\\\x22\\\\x0A\\\\x0A\\\\x08\\\\x08\\\\x04*\\\\x04:\"\n+\t    \"\\\\x02\\\\x10\\\\x01\\\\x1A\\\\x08\\\\x12\\\\x06\\\\x0A\\\\x02\\\\x12\\\\x00\\\\x22\\\\x00\\\\x12\\\\x08exercise2\\\\x0A\\\\x10\\\\x18*\"\n+\t    \"\\\\x06DuckDB\";\n+\tauto plan = (uint8_t *)str_plan;\n+\tsize_t length = strlen(str_plan);\n+\tREQUIRE(SUCCESS(AdbcStatementNew(&adbc_connection, &adbc_statement, &adbc_error)));\n+\tREQUIRE(SUCCESS(AdbcStatementSetSubstraitPlan(&adbc_statement, plan, length, &adbc_error)));\n+\tint64_t rows_affected;\n+\tREQUIRE(SUCCESS(AdbcStatementExecuteQuery(&adbc_statement, &arrow_stream, &rows_affected, &adbc_error)));\n+\tarrow_stream.get_next(&arrow_stream, &arrow_array);\n+\tREQUIRE(((int64_t *)arrow_array.children[0]->buffers[1])[0] == 1);\n+\tarrow_array.release(&arrow_array);\n+\tarrow_stream.release(&arrow_stream);\n+\n+\t// Try some errors\n+\tREQUIRE(!SUCCESS(AdbcStatementSetSubstraitPlan(&adbc_statement, nullptr, length, &adbc_error)));\n+\tREQUIRE(std::strcmp(adbc_error.message, \"Substrait Plan is not set\") == 0);\n+\tadbc_error.release(&adbc_error);\n+\n+\tREQUIRE(!SUCCESS(AdbcStatementSetSubstraitPlan(&adbc_statement, plan, 0, &adbc_error)));\n+\tREQUIRE(std::strcmp(adbc_error.message, \"Can't execute plan with size = 0\") == 0);\n+\tadbc_error.release(&adbc_error);\n+\n+\t// Broken Plan\n+\tREQUIRE(!SUCCESS(AdbcStatementSetSubstraitPlan(&adbc_statement, plan, 5, &adbc_error)));\n+\tREQUIRE(std::strcmp(adbc_error.message, \"Conversion Error: Invalid hex escape code encountered in string -> blob \"\n+\t                                        \"conversion: unterminated escape code at end of blob\") == 0);\n+\tadbc_error.release(&adbc_error);\n+}\ndiff --git a/test/api/capi/test_capi_arrow.cpp b/test/api/capi/test_capi_arrow.cpp\nindex f6637f3c6283..a1d772667a88 100644\n--- a/test/api/capi/test_capi_arrow.cpp\n+++ b/test/api/capi/test_capi_arrow.cpp\n@@ -1,9 +1,11 @@\n #include \"capi_tester.hpp\"\n+#include \"duckdb/common/arrow/arrow_appender.hpp\"\n+#include \"duckdb/common/arrow/arrow_converter.hpp\"\n \n using namespace duckdb;\n using namespace std;\n \n-TEST_CASE(\"Test arrow in C API\", \"[capi]\") {\n+TEST_CASE(\"Test arrow in C API\", \"[capi][arrow]\") {\n \tCAPITester tester;\n \tduckdb::unique_ptr<CAPIResult> result;\n \tduckdb_prepared_statement stmt = nullptr;\n@@ -12,8 +14,7 @@ TEST_CASE(\"Test arrow in C API\", \"[capi]\") {\n \t// open the database in in-memory mode\n \tREQUIRE(tester.OpenDatabase(nullptr));\n \n-\t// test rows changed\n-\t{\n+\tSECTION(\"test rows changed\") {\n \t\tREQUIRE_NO_FAIL(tester.Query(\"CREATE TABLE test(a INTEGER)\"));\n \t\tREQUIRE(duckdb_query_arrow(tester.connection, \"INSERT INTO test VALUES (1), (2);\", &arrow_result) ==\n \t\t        DuckDBSuccess);\n@@ -22,8 +23,7 @@ TEST_CASE(\"Test arrow in C API\", \"[capi]\") {\n \t\tREQUIRE_NO_FAIL(tester.Query(\"drop table test\"));\n \t}\n \n-\t// test query arrow\n-\t{\n+\tSECTION(\"test query arrow\") {\n \t\tREQUIRE(duckdb_query_arrow(tester.connection, \"SELECT 42 AS VALUE\", &arrow_result) == DuckDBSuccess);\n \t\tREQUIRE(duckdb_arrow_row_count(arrow_result) == 1);\n \t\tREQUIRE(duckdb_arrow_column_count(arrow_result) == 1);\n@@ -52,8 +52,7 @@ TEST_CASE(\"Test arrow in C API\", \"[capi]\") {\n \t\tduckdb_destroy_arrow(&arrow_result);\n \t}\n \n-\t// test multiple chunks\n-\t{\n+\tSECTION(\"test multiple chunks\") {\n \t\t// create table that consists of multiple chunks\n \t\tREQUIRE_NO_FAIL(tester.Query(\"CREATE TABLE test(a INTEGER)\"));\n \t\tREQUIRE_NO_FAIL(\n@@ -86,8 +85,7 @@ TEST_CASE(\"Test arrow in C API\", \"[capi]\") {\n \t\tREQUIRE_NO_FAIL(tester.Query(\"drop table test\"));\n \t}\n \n-\t// test prepare query arrow\n-\t{\n+\tSECTION(\"test prepare query arrow\") {\n \t\tREQUIRE(duckdb_prepare(tester.connection, \"SELECT CAST($1 AS BIGINT)\", &stmt) == DuckDBSuccess);\n \t\tREQUIRE(stmt != nullptr);\n \t\tREQUIRE(duckdb_bind_int64(stmt, 1, 42) == DuckDBSuccess);\n@@ -109,4 +107,131 @@ TEST_CASE(\"Test arrow in C API\", \"[capi]\") {\n \t\tduckdb_destroy_arrow(&arrow_result);\n \t\tduckdb_destroy_prepare(&stmt);\n \t}\n+\n+\tSECTION(\"test scan\") {\n+\t\tconst auto logical_types = duckdb::vector<LogicalType> {LogicalType(LogicalTypeId::INTEGER)};\n+\t\tconst auto column_names = duckdb::vector<string> {\"value\"};\n+\n+\t\tArrowSchema *arrow_schema = new ArrowSchema();\n+\t\tArrowOptions options;\n+\t\tduckdb::ArrowConverter::ToArrowSchema(arrow_schema, logical_types, column_names, options);\n+\n+\t\tArrowArray *arrow_array = new ArrowArray();\n+\n+\t\tSECTION(\"empty array\") {\n+\t\t\t// Create an empty view with a `value` column.\n+\t\t\tstring view_name = \"foo_empty_table\";\n+\t\t\tArrowArrayStream *out_stream;\n+\t\t\tREQUIRE(duckdb_arrow_array_scan(tester.connection, view_name.c_str(),\n+\t\t\t                                reinterpret_cast<duckdb_arrow_schema>(arrow_schema),\n+\t\t\t                                reinterpret_cast<duckdb_arrow_array>(arrow_array),\n+\t\t\t                                reinterpret_cast<duckdb_arrow_stream *>(&out_stream)) == DuckDBSuccess);\n+\n+\t\t\t// Get created view from DB.\n+\t\t\tauto get_query = \"SELECT * FROM \" + view_name + \";\";\n+\t\t\tREQUIRE(duckdb_prepare(tester.connection, get_query.c_str(), &stmt) == DuckDBSuccess);\n+\t\t\tREQUIRE(stmt != nullptr);\n+\t\t\tREQUIRE(duckdb_execute_prepared_arrow(stmt, &arrow_result) == DuckDBSuccess);\n+\n+\t\t\t// Recover array from results.\n+\t\t\tArrowArray *out_array = new ArrowArray();\n+\t\t\tREQUIRE(duckdb_query_arrow_array(arrow_result, reinterpret_cast<duckdb_arrow_array *>(&out_array)) ==\n+\t\t\t        DuckDBSuccess);\n+\t\t\tREQUIRE(out_array->length == 0);\n+\t\t\tREQUIRE(out_array->release == nullptr);\n+\t\t\tdelete out_array;\n+\n+\t\t\tout_stream->release(out_stream);\n+\t\t\tdelete out_stream;\n+\n+\t\t\tREQUIRE(arrow_array->release == nullptr);\n+\t\t}\n+\n+\t\tSECTION(\"big array\") {\n+\t\t\t// Create a view with a `value` column containing 4096 values.\n+\t\t\tint num_buffers = 2, size = STANDARD_VECTOR_SIZE * num_buffers;\n+\t\t\tArrowOptions options;\n+\t\t\tArrowAppender appender(logical_types, size, options);\n+\t\t\tAllocator allocator;\n+\n+\t\t\tauto data_chunks = std::vector<DataChunk>(num_buffers);\n+\t\t\tfor (int i = 0; i < num_buffers; i++) {\n+\t\t\t\tauto data_chunk = &data_chunks[i];\n+\t\t\t\tdata_chunk->Initialize(allocator, logical_types, STANDARD_VECTOR_SIZE);\n+\t\t\t\tdata_chunk->SetCardinality(STANDARD_VECTOR_SIZE);\n+\t\t\t\tfor (int row = 0; row < STANDARD_VECTOR_SIZE; row++) {\n+\t\t\t\t\tdata_chunk->SetValue(0, row, duckdb::Value(i));\n+\t\t\t\t}\n+\n+\t\t\t\tappender.Append(*data_chunk, 0, data_chunk->size(), data_chunk->size());\n+\t\t\t}\n+\n+\t\t\t*arrow_array = appender.Finalize();\n+\n+\t\t\t// Create view.\n+\t\t\tstring view_name = \"foo_table\";\n+\t\t\tArrowArrayStream *out_stream;\n+\t\t\tREQUIRE(duckdb_arrow_array_scan(tester.connection, view_name.c_str(),\n+\t\t\t                                reinterpret_cast<duckdb_arrow_schema>(arrow_schema),\n+\t\t\t                                reinterpret_cast<duckdb_arrow_array>(arrow_array),\n+\t\t\t                                reinterpret_cast<duckdb_arrow_stream *>(&out_stream)) == DuckDBSuccess);\n+\n+\t\t\t// Get created view from DB.\n+\t\t\tauto get_query = \"SELECT * FROM \" + view_name + \";\";\n+\t\t\tREQUIRE(duckdb_prepare(tester.connection, get_query.c_str(), &stmt) == DuckDBSuccess);\n+\t\t\tREQUIRE(stmt != nullptr);\n+\t\t\tREQUIRE(duckdb_execute_prepared_arrow(stmt, &arrow_result) == DuckDBSuccess);\n+\n+\t\t\t// Recover array from results.\n+\t\t\tArrowArray *out_array = new ArrowArray();\n+\t\t\tREQUIRE(duckdb_query_arrow_array(arrow_result, reinterpret_cast<duckdb_arrow_array *>(&out_array)) ==\n+\t\t\t        DuckDBSuccess);\n+\t\t\tREQUIRE(out_array->length == STANDARD_VECTOR_SIZE);\n+\t\t\tout_array->release(out_array);\n+\t\t\tdelete out_array;\n+\n+\t\t\tout_array = new ArrowArray();\n+\t\t\tREQUIRE(duckdb_query_arrow_array(arrow_result, reinterpret_cast<duckdb_arrow_array *>(&out_array)) ==\n+\t\t\t        DuckDBSuccess);\n+\t\t\tREQUIRE(out_array->length == STANDARD_VECTOR_SIZE);\n+\t\t\tout_array->release(out_array);\n+\t\t\tdelete out_array;\n+\n+\t\t\tout_array = new ArrowArray();\n+\t\t\tREQUIRE(duckdb_query_arrow_array(arrow_result, reinterpret_cast<duckdb_arrow_array *>(&out_array)) ==\n+\t\t\t        DuckDBSuccess);\n+\t\t\tREQUIRE(out_array->length == 0);\n+\t\t\tREQUIRE(out_array->release == nullptr);\n+\t\t\tdelete out_array;\n+\n+\t\t\tout_stream->release(out_stream);\n+\t\t\tdelete out_stream;\n+\n+\t\t\tREQUIRE(arrow_array->release != nullptr);\n+\t\t}\n+\n+\t\tSECTION(\"null schema\") {\n+\t\t\t// Creating a view with a null schema should fail gracefully.\n+\t\t\tstring view_name = \"foo_empty_table_null_schema\";\n+\t\t\tArrowArrayStream *out_stream;\n+\t\t\tREQUIRE(duckdb_arrow_array_scan(tester.connection, view_name.c_str(), nullptr,\n+\t\t\t                                reinterpret_cast<duckdb_arrow_array>(arrow_array),\n+\t\t\t                                reinterpret_cast<duckdb_arrow_stream *>(&out_stream)) == DuckDBError);\n+\n+\t\t\tout_stream->release(out_stream);\n+\t\t\tdelete out_stream;\n+\t\t}\n+\n+\t\tarrow_schema->release(arrow_schema);\n+\t\tdelete arrow_schema;\n+\n+\t\tif (arrow_array->release != nullptr) {\n+\t\t\tarrow_array->release(arrow_array);\n+\t\t}\n+\n+\t\tdelete arrow_array;\n+\n+\t\tduckdb_destroy_arrow(&arrow_result);\n+\t\tduckdb_destroy_prepare(&stmt);\n+\t}\n }\ndiff --git a/test/api/test_object_cache.cpp b/test/api/test_object_cache.cpp\nnew file mode 100644\nindex 000000000000..a2dd2b5d8ab2\n--- /dev/null\n+++ b/test/api/test_object_cache.cpp\n@@ -0,0 +1,58 @@\n+#include \"catch.hpp\"\n+#include \"test_helpers.hpp\"\n+\n+#include \"duckdb/storage/object_cache.hpp\"\n+\n+using namespace duckdb;\n+using namespace std;\n+\n+struct TestObject : public ObjectCacheEntry {\n+\tint value;\n+\n+\tTestObject(int value) : value(value) {\n+\t}\n+\n+\tstring GetObjectType() override {\n+\t\treturn ObjectType();\n+\t}\n+\n+\tstatic string ObjectType() {\n+\t\treturn \"TestObject\";\n+\t}\n+};\n+\n+struct AnotherTestObject : public ObjectCacheEntry {\n+\tint value;\n+\tAnotherTestObject(int value) : value(value) {\n+\t}\n+\tstring GetObjectType() override {\n+\t\treturn ObjectType();\n+\t}\n+\n+\tstatic string ObjectType() {\n+\t\treturn \"AnotherTestObject\";\n+\t}\n+};\n+\n+TEST_CASE(\"Test ObjectCache\", \"[api]\") {\n+\tDuckDB db;\n+\tConnection con(db);\n+\tauto &context = *con.context;\n+\n+\tauto &cache = ObjectCache::GetObjectCache(context);\n+\n+\tREQUIRE(cache.GetObject(\"test\") == nullptr);\n+\tcache.Put(\"test\", make_shared<TestObject>(42));\n+\n+\tREQUIRE(cache.GetObject(\"test\") != nullptr);\n+\n+\tcache.Delete(\"test\");\n+\tREQUIRE(cache.GetObject(\"test\") == nullptr);\n+\n+\tREQUIRE(cache.GetOrCreate<TestObject>(\"test\", 42) != nullptr);\n+\tREQUIRE(cache.Get<TestObject>(\"test\") != nullptr);\n+\tREQUIRE(cache.GetOrCreate<TestObject>(\"test\", 1337)->value == 42);\n+\tREQUIRE(cache.Get<TestObject>(\"test\")->value == 42);\n+\n+\tREQUIRE(cache.GetOrCreate<AnotherTestObject>(\"test\", 13) == nullptr);\n+}\ndiff --git a/test/api/test_reset.cpp b/test/api/test_reset.cpp\nindex 584765b6af7a..38bd793dd45f 100644\n--- a/test/api/test_reset.cpp\n+++ b/test/api/test_reset.cpp\n@@ -1,10 +1,9 @@\n #include \"catch.hpp\"\n #include \"test_helpers.hpp\"\n \n-#include <set>\n-#include <map>\n-\n #include <iostream>\n+#include <map>\n+#include <set>\n \n using namespace duckdb;\n using namespace std;\n@@ -77,6 +76,7 @@ OptionValueSet &GetValueForOption(const string &name) {\n \t    {\"ordered_aggregate_threshold\", {Value::UBIGINT(idx_t(1) << 12)}},\n \t    {\"null_order\", {\"nulls_first\"}},\n \t    {\"perfect_ht_threshold\", {0}},\n+\t    {\"pivot_filter_threshold\", {999}},\n \t    {\"pivot_limit\", {999}},\n \t    {\"preserve_identifier_case\", {false}},\n \t    {\"preserve_insertion_order\", {false}},\n@@ -89,6 +89,7 @@ OptionValueSet &GetValueForOption(const string &name) {\n \t    {\"worker_threads\", {42}},\n \t    {\"enable_http_metadata_cache\", {true}},\n \t    {\"force_bitpacking_mode\", {\"constant\"}},\n+\t    {\"allocator_flush_threshold\", {\"4.2GB\"}},\n \t    {\"arrow_large_buffer_size\", {true}},\n \t};\n \t// Every option that's not excluded has to be part of this map\n@@ -133,7 +134,6 @@ void RequireValueEqual(ConfigurationOption *op, const Value &left, const Value &\n //! New options should be added to the value_map in GetValueForOption\n //! Or added to the 'excluded_options' in OptionIsExcludedFromTest\n TEST_CASE(\"Test RESET statement for ClientConfig options\", \"[api]\") {\n-\n \t// Create a connection\n \tDuckDB db(nullptr);\n \tConnection con(db);\ndiff --git a/test/fuzzer/pedro/art_concatenate_prefix.test b/test/fuzzer/pedro/art_concatenate_prefix.test\nindex 114fd2b2e57e..bf023f62ae96 100644\n--- a/test/fuzzer/pedro/art_concatenate_prefix.test\n+++ b/test/fuzzer/pedro/art_concatenate_prefix.test\n@@ -9,7 +9,7 @@ statement ok\n CREATE INDEX i0 ON t0 (c0, (BLOB '\\xE7\\x1F\\x8B&\\xF0'));\n \n statement ok\n-INSERT INTO t0 VALUES (-2041046163),(35016222);\n+INSERT INTO t0 VALUES (-2041046163), (35016222);\n \n statement ok\n TRUNCATE t0;\n\\ No newline at end of file\ndiff --git a/test/fuzzer/pedro/duplicate_cte.test b/test/fuzzer/pedro/duplicate_cte.test\nindex ce09b2195b6e..61230f92ed91 100644\n--- a/test/fuzzer/pedro/duplicate_cte.test\n+++ b/test/fuzzer/pedro/duplicate_cte.test\n@@ -8,6 +8,8 @@ pragma enable_verification\n statement ok\n CREATE TABLE t0(c0 INT);\n \n+require noalternativeverify\n+\n statement ok\n WITH t0 AS (SELECT 2) INSERT INTO t0 (WITH t0 AS (SELECT 2) SELECT 2);\n \ndiff --git a/test/issues/general/test_3997.test b/test/issues/general/test_3997.test\nindex 2e3c90251c20..8b7c6b23d6f0 100644\n--- a/test/issues/general/test_3997.test\n+++ b/test/issues/general/test_3997.test\n@@ -8,6 +8,8 @@ PRAGMA enable_verification;\n statement ok\n create table x (x int);\n \n+require noalternativeverify\n+\n statement ok\n with y(y) as (select 1) insert into x (select y from y);\n \ndiff --git a/test/issues/monetdb/analytics13.test_coverage b/test/issues/monetdb/analytics13.test_slow\nsimilarity index 99%\nrename from test/issues/monetdb/analytics13.test_coverage\nrename to test/issues/monetdb/analytics13.test_slow\nindex 44a2f21a9cc4..bba9e1612365 100644\n--- a/test/issues/monetdb/analytics13.test_coverage\n+++ b/test/issues/monetdb/analytics13.test_slow\n@@ -1,4 +1,4 @@\n-# name: test/issues/monetdb/analytics13.test_coverage\n+# name: test/issues/monetdb/analytics13.test_slow\n # description: MonetDB Test for grouping sets\n # group: [monetdb]\n \ndiff --git a/test/optimizer/compressed_materialization.test_coverage b/test/optimizer/compressed_materialization.test_coverage\nnew file mode 100644\nindex 000000000000..d74ad3ec8ec4\n--- /dev/null\n+++ b/test/optimizer/compressed_materialization.test_coverage\n@@ -0,0 +1,184 @@\n+# name: test/optimizer/compressed_materialization.test_coverage\n+# description: Compressed materialization test\n+# group: [optimizer]\n+\n+statement ok\n+pragma enable_verification\n+\n+statement ok\n+PRAGMA explain_output = OPTIMIZED_ONLY\n+\n+# these functions live in the catalog, but cannot be called directly\n+statement error\n+select __internal_compress_string_utinyint('L')\n+----\n+Binder Error: Compressed materialization functions are for internal use only!\n+\n+# tricky tests taken from test/sql/subquery/scalar/test_issue_6136.test\n+statement ok\n+create table r as select * from values (1, 1, 'a', 'A'), (1, null, 'b', 'B'), (1, 2, 'c', 'C'), (2, null, 'd', 'D') t(ra, rb, x, y);\n+\n+statement ok\n+create table b as select * from values (1, 1, 1), (2, 1, 2), (3, 1, 3), (4, 1, null), (5, 2, 1), (6, 2, null), (7, 99, 99) t(id, ba, bb);\n+\n+query T\n+select (\n+    select {'x': first(x), 'y': first(y), '__matches': count(*)}\n+    from (\n+        select *\n+        from r\n+        where ba = ra and (bb = rb or rb is null)\n+        order by all\n+    )\n+    group by ra, rb)\n+from b\n+----\n+{'x': b, 'y': B, '__matches': 1}\n+{'x': b, 'y': B, '__matches': 1}\n+{'x': b, 'y': B, '__matches': 1}\n+{'x': b, 'y': B, '__matches': 1}\n+{'x': d, 'y': D, '__matches': 1}\n+{'x': d, 'y': D, '__matches': 1}\n+NULL\n+\n+query T\n+select\n+  coalesce((select {'x': first(x), 'y': first(y), '__matches': count(*)} from r where ba = ra and (bb = rb or rb is null) group by ra, rb order by bb = rb), {'x': null, 'y': null, '__matches': 0}) as ref2\n+from b\n+----\n+{'x': b, 'y': B, '__matches': 1}\n+{'x': b, 'y': B, '__matches': 1}\n+{'x': b, 'y': B, '__matches': 1}\n+{'x': b, 'y': B, '__matches': 1}\n+{'x': d, 'y': D, '__matches': 1}\n+{'x': d, 'y': D, '__matches': 1}\n+{'x': NULL, 'y': NULL, '__matches': 0}\n+\n+# we should see compress twice (in the ORDER BY expression and payload) and decompress once (just the payload)\n+statement ok\n+create table t1 as select range i from range(10)\n+\n+query II\n+explain select i from t1 order by 10-i\n+----\n+logical_opt\t<REGEX>:(.*__internal_decompress.*){1}(.*__internal_compress.*){2}\n+\n+statement ok\n+create table test as\n+select (range + 7) % 4 i,\n+       (range + 7) % 11 j\n+from range(10)\n+\n+# should see compress exactly twice (for columns i and j)\n+# if we see less than twice we're not compressing,\n+# and if we see it more than twice we're likely compressing and decompressing twice (once for each ORDER BY)\n+# but we can compress once, then do both ORDER BYs, then decompress\n+query II\n+explain select count(i), count(j) from (select i, j from (select i, j from test order by j offset 1) order by j offset 1)\n+----\n+logical_opt\t<REGEX>:(.*__internal_compress.*){2}\n+\n+# should see it exactly once here, as we can only compress the group (i), not the value being summed (j)\n+# after the GROUP BY we do the ORDER BY, and finally decompress\n+query II\n+explain select i, sum(j) from test group by i order by i\n+----\n+logical_opt\t<REGEX>:(.*__internal_compress.*){1}\n+\n+# We can't deal with duplicate projections (yet) so this should see 3 compresses instead of 1\n+query II\n+explain select count(j1), count(j2) from (select j j1, j j2 from (select j from test order by j offset 1) order by j1, j2 offset 1)\n+----\n+logical_opt\t<REGEX>:(.*__internal_compress.*){3}\n+\n+query II\n+explain select distinct i, j from test order by i, j\n+----\n+logical_opt\t<REGEX>:(.*__internal_compress.*){2}\n+\n+# taken from third_party/sqllogictest/test/index/orderby_nosort/10/slt_good_27.test\n+# the problem was that statistics propagation created an index join after \"filter_prune\" happened\n+statement ok\n+CREATE TABLE tab3(pk INTEGER PRIMARY KEY, col0 INTEGER, col1 FLOAT, col2 TEXT, col3 INTEGER, col4 FLOAT, col5 TEXT)\n+\n+statement ok\n+INSERT INTO tab3 VALUES\n+    (0,461,479.93,'idmdh',456,464.90,'nczyk'),\n+    (1,473,482.60,'bguxh',460,466.25,'oseln'),\n+    (2,474,484.45,'bnzmd',461,467.13,'kvwna'),\n+    (3,475,485.1,'obtlj',462,468.73,'jkjbo'),\n+    (4,477,486.62,'gjtbr',463,469.9,'bhers'),\n+    (5,479,489.59,'bkxfm',464,470.29,'aklru'),\n+    (6,481,495.30,'owirt',466,471.55,'lysig'),\n+    (7,482,496.31,'yergm',467,473.31,'rkpxn'),\n+    (8,484,497.51,'fszui',468,474.44,'ztexm'),\n+    (9,486,498.24,'eueji',469,477.28,'amvcc')\n+\n+statement ok\n+CREATE UNIQUE INDEX idx_tab3_4 ON tab3 (col3)\n+\n+query I\n+SELECT pk FROM tab3 WHERE col0 IN (SELECT col3 FROM tab3 WHERE (col1 > 93.79)) ORDER BY 1 DESC\n+----\n+0\n+\n+# and of course some tpch stuff\n+\n+statement ok\n+pragma disable_verification\n+\n+require tpch\n+\n+statement ok\n+call dbgen(sf=0.01)\n+\n+statement ok\n+PRAGMA explain_output = PHYSICAL_ONLY\n+\n+# tpch q1 should use perfect hash aggregate\n+query II\n+EXPLAIN\n+SELECT\n+    l_returnflag,\n+    l_linestatus,\n+    sum(l_quantity) AS sum_qty,\n+    sum(l_extendedprice) AS sum_base_price,\n+    sum(l_extendedprice * (1 - l_discount)) AS sum_disc_price,\n+    sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) AS sum_charge,\n+    avg(l_quantity) AS avg_qty,\n+    avg(l_extendedprice) AS avg_price,\n+    avg(l_discount) AS avg_disc,\n+    count(*) AS count_order\n+FROM\n+    lineitem\n+WHERE\n+    l_shipdate <= CAST('1998-09-02' AS date)\n+GROUP BY\n+    l_returnflag,\n+    l_linestatus\n+ORDER BY\n+    l_returnflag,\n+    l_linestatus;\n+----\n+physical_plan\t<REGEX>:.*PERFECT_HASH_GROUP_BY.*\n+\n+statement ok\n+PRAGMA explain_output = OPTIMIZED_ONLY\n+\n+# test that we're compressing lineitem\n+query II\n+explain select * from lineitem order by l_shipdate\n+----\n+logical_opt\t<REGEX>:.*__internal_decompress.*__internal_compress.*\n+\n+# test that we get the same result with and without compressed materialization\n+query IIIIIIIIIIIIIII nosort q0\n+select * from lineitem order by l_shipdate\n+----\n+\n+statement ok\n+set disabled_optimizers to 'compressed_materialization'\n+\n+query IIIIIIIIIIIIIII nosort q0\n+select * from lineitem order by l_shipdate\n+----\ndiff --git a/test/optimizer/deliminator.test b/test/optimizer/deliminator.test\nindex f3b5eb15a2b8..aa6187e00316 100644\n--- a/test/optimizer/deliminator.test\n+++ b/test/optimizer/deliminator.test\n@@ -31,11 +31,10 @@ explain SELECT s_name, s_address FROM supplier, nation WHERE s_suppkey IN ( SELE\n ----\n logical_opt\t<!REGEX>:.*DELIM_JOIN.*\n \n-#query II\n-#explain SELECT s_name, count(*) AS numwait FROM supplier, lineitem l1, orders, nation WHERE s_suppkey = l1.l_suppkey AND o_orderkey = l1.l_orderkey AND o_orderstatus = 'F' AND l1.l_receiptdate > l1.l_commitdate AND EXISTS ( SELECT * FROM lineitem l2 WHERE l2.l_orderkey = l1.l_orderkey AND l2.l_suppkey <> l1.l_suppkey) AND NOT EXISTS ( SELECT * FROM lineitem l3 WHERE l3.l_orderkey = l1.l_orderkey AND l3.l_suppkey <> l1.l_suppkey AND l3.l_receiptdate > l3.l_commitdate) AND s_nationkey = n_nationkey AND n_name = 'SAUDI ARABIA' GROUP BY s_name ORDER BY numwait DESC, s_name LIMIT 100;\n-#----\n-#logical_opt\t<!REGEX>:.*DELIM_JOIN.*\n-\n+query II\n+explain SELECT s_name, count(*) AS numwait FROM supplier, lineitem l1, orders, nation WHERE s_suppkey = l1.l_suppkey AND o_orderkey = l1.l_orderkey AND o_orderstatus = 'F' AND l1.l_receiptdate > l1.l_commitdate AND EXISTS ( SELECT * FROM lineitem l2 WHERE l2.l_orderkey = l1.l_orderkey AND l2.l_suppkey <> l1.l_suppkey) AND NOT EXISTS ( SELECT * FROM lineitem l3 WHERE l3.l_orderkey = l1.l_orderkey AND l3.l_suppkey <> l1.l_suppkey AND l3.l_receiptdate > l3.l_commitdate) AND s_nationkey = n_nationkey AND n_name = 'SAUDI ARABIA' GROUP BY s_name ORDER BY numwait DESC, s_name LIMIT 100;\n+----\n+logical_opt\t<!REGEX>:.*DELIM_JOIN.*\n \n statement ok\n CREATE TABLE integers(i INTEGER, j integer)\ndiff --git a/test/optimizer/deliminator_optimizer.test b/test/optimizer/deliminator_optimizer.test\nnew file mode 100644\nindex 000000000000..d8665d130e9f\n--- /dev/null\n+++ b/test/optimizer/deliminator_optimizer.test\n@@ -0,0 +1,235 @@\n+# name: test/optimizer/deliminator_optimizer.test\n+# description: Test the Deliminator optimizer\n+# group: [optimizer]\n+\n+statement ok\n+CREATE TABLE integers(i INTEGER)\n+\n+# specific edge case with two DelimGets under the DelimJoin\n+statement ok\n+SELECT i, (SELECT MIN(i+2*i1.i) FROM integers) FROM integers i1 ORDER BY i\n+\n+statement ok\n+INSERT INTO integers VALUES (1), (2), (3)\n+\n+statement ok\n+PRAGMA explain_output = OPTIMIZED_ONLY\n+\n+# correlated any/all\n+query II\n+EXPLAIN SELECT i=ANY(SELECT i FROM integers WHERE i=i1.i) FROM integers i1 ORDER BY i\n+----\n+logical_opt\t<!REGEX>:.*DELIM_JOIN.*\n+\n+query II\n+EXPLAIN SELECT i=ALL(SELECT i FROM integers WHERE i=i1.i) FROM integers i1 ORDER BY i\n+----\n+logical_opt\t<!REGEX>:.*DELIM_JOIN.*\n+\n+# correlated where\n+statement ok\n+CREATE TABLE test (id INTEGER, b INTEGER)\n+\n+query II\n+EXPLAIN SELECT * FROM test WHERE b=(SELECT MIN(b) FROM test AS a WHERE a.id=test.id)\n+----\n+logical_opt\t<!REGEX>:.*DELIM_JOIN.*\n+\n+# TPC-H\n+require tpch\n+\n+statement ok\n+CALL dbgen(sf=0.0001)\n+\n+# q02\n+query II\n+EXPLAIN\n+SELECT\n+    s_acctbal,\n+    s_name,\n+    n_name,\n+    p_partkey,\n+    p_mfgr,\n+    s_address,\n+    s_phone,\n+    s_comment\n+FROM\n+    part,\n+    supplier,\n+    partsupp,\n+    nation,\n+    region\n+WHERE\n+    p_partkey = ps_partkey\n+    AND s_suppkey = ps_suppkey\n+    AND p_size = 15\n+    AND p_type LIKE '%BRASS'\n+    AND s_nationkey = n_nationkey\n+    AND n_regionkey = r_regionkey\n+    AND r_name = 'EUROPE'\n+    AND ps_supplycost = (\n+        SELECT\n+            min(ps_supplycost)\n+        FROM\n+            partsupp,\n+            supplier,\n+            nation,\n+            region\n+        WHERE\n+            p_partkey = ps_partkey\n+            AND s_suppkey = ps_suppkey\n+            AND s_nationkey = n_nationkey\n+            AND n_regionkey = r_regionkey\n+            AND r_name = 'EUROPE')\n+ORDER BY\n+    s_acctbal DESC,\n+    n_name,\n+    s_name,\n+    p_partkey\n+LIMIT 100\n+----\n+logical_opt\t<!REGEX>:.*DELIM_JOIN.*\n+\n+# q04\n+query II\n+EXPLAIN\n+SELECT\n+    o_orderpriority,\n+    count(*) AS order_count\n+FROM\n+    orders\n+WHERE\n+    o_orderdate >= CAST('1993-07-01' AS date)\n+    AND o_orderdate < CAST('1993-10-01' AS date)\n+    AND EXISTS (\n+        SELECT\n+            *\n+        FROM\n+            lineitem\n+        WHERE\n+            l_orderkey = o_orderkey\n+            AND l_commitdate < l_receiptdate)\n+GROUP BY\n+    o_orderpriority\n+ORDER BY\n+    o_orderpriority\n+----\n+logical_opt\t<!REGEX>:.*DELIM_JOIN.*\n+\n+# q17\n+query II\n+EXPLAIN\n+SELECT\n+    sum(l_extendedprice) / 7.0 AS avg_yearly\n+FROM\n+    lineitem,\n+    part\n+WHERE\n+    p_partkey = l_partkey\n+    AND p_brand = 'Brand#23'\n+    AND p_container = 'MED BOX'\n+    AND l_quantity < (\n+        SELECT\n+            0.2 * avg(l_quantity)\n+        FROM\n+            lineitem\n+        WHERE\n+            l_partkey = p_partkey)\n+----\n+logical_opt\t<!REGEX>:.*DELIM_JOIN.*\n+\n+# q20\n+query II\n+EXPLAIN\n+SELECT\n+    s_name,\n+    s_address\n+FROM\n+    supplier,\n+    nation\n+WHERE\n+    s_suppkey IN (\n+        SELECT\n+            ps_suppkey\n+        FROM\n+            partsupp\n+        WHERE\n+            ps_partkey IN (\n+                SELECT\n+                    p_partkey\n+                FROM\n+                    part\n+                WHERE\n+                    p_name LIKE 'forest%')\n+                AND ps_availqty > (\n+                    SELECT\n+                        0.5 * sum(l_quantity)\n+                    FROM\n+                        lineitem\n+                    WHERE\n+                        l_partkey = ps_partkey\n+                        AND l_suppkey = ps_suppkey\n+                        AND l_shipdate >= CAST('1994-01-01' AS date)\n+                        AND l_shipdate < CAST('1995-01-01' AS date)))\n+            AND s_nationkey = n_nationkey\n+            AND n_name = 'CANADA'\n+        ORDER BY\n+            s_name\n+----\n+logical_opt\t<!REGEX>:.*DELIM_JOIN.*\n+\n+# q21\n+query II\n+EXPLAIN\n+SELECT\n+    cntrycode,\n+    count(*) AS numcust,\n+    sum(c_acctbal) AS totacctbal\n+FROM (\n+    SELECT\n+        substring(c_phone FROM 1 FOR 2) AS cntrycode,\n+        c_acctbal\n+    FROM\n+        customer\n+    WHERE\n+        substring(c_phone FROM 1 FOR 2) IN ('13', '31', '23', '29', '30', '18', '17')\n+        AND c_acctbal > (\n+            SELECT\n+                avg(c_acctbal)\n+            FROM\n+                customer\n+            WHERE\n+                c_acctbal > 0.00\n+                AND substring(c_phone FROM 1 FOR 2) IN ('13', '31', '23', '29', '30', '18', '17'))\n+            AND NOT EXISTS (\n+                SELECT\n+                    *\n+                FROM\n+                    orders\n+                WHERE\n+                    o_custkey = c_custkey)) AS custsale\n+GROUP BY\n+    cntrycode\n+ORDER BY\n+    cntrycode\n+----\n+logical_opt\t<!REGEX>:.*DELIM_JOIN.*\n+\n+# FTS\n+require fts\n+\n+require noalternativeverify\n+\n+statement ok\n+CREATE TABLE documents(id VARCHAR, body VARCHAR)\n+\n+statement ok\n+INSERT INTO documents VALUES ('doc1', ' QU\u00c1CKING+QU\u00c1CKING+QU\u00c1CKING'), ('doc2', ' B\u00c1RKING+B\u00c1RKING+B\u00c1RKING+B\u00c1RKING'), ('doc3', ' M\u00c9OWING+M\u00c9OWING+M\u00c9OWING+M\u00c9OWING+M\u00c9OWING+999')\n+\n+statement ok\n+PRAGMA create_fts_index('documents', 'id', 'body', overwrite=1)\n+\n+query II\n+EXPLAIN SELECT score, id, body FROM (SELECT *, fts_main_documents.match_bm25(id, 'quacked barked') AS score FROM documents) sq WHERE score IS NOT NULL ORDER BY score DESC\n+----\n+logical_opt\t<!REGEX>:.*DELIM_JOIN.*\ndiff --git a/test/optimizer/deliminator_optimizer.test_slow b/test/optimizer/deliminator_optimizer.test_slow\ndeleted file mode 100644\nindex c2751a7f295f..000000000000\n--- a/test/optimizer/deliminator_optimizer.test_slow\n+++ /dev/null\n@@ -1,237 +0,0 @@\n-# name: test/optimizer/deliminator_optimizer.test_slow\n-# description: Test the Deliminator optimizer\n-# group: [optimizer]\n-\n-statement ok\n-CREATE TABLE integers(i INTEGER)\n-\n-# specific edge case with two DelimGets under the DelimJoin\n-statement ok\n-SELECT i, (SELECT MIN(i+2*i1.i) FROM integers) FROM integers i1 ORDER BY i\n-\n-statement ok\n-INSERT INTO integers VALUES (1), (2), (3)\n-\n-statement ok\n-PRAGMA explain_output = OPTIMIZED_ONLY\n-\n-# correlated any/all\n-query II\n-EXPLAIN SELECT i=ANY(SELECT i FROM integers WHERE i=i1.i) FROM integers i1 ORDER BY i\n-----\n-logical_opt\t<!REGEX>:.*DELIM_JOIN.*\n-\n-query II\n-EXPLAIN SELECT i=ALL(SELECT i FROM integers WHERE i=i1.i) FROM integers i1 ORDER BY i\n-----\n-logical_opt\t<!REGEX>:.*DELIM_JOIN.*\n-\n-# correlated where\n-statement ok\n-CREATE TABLE test (id INTEGER, b INTEGER)\n-\n-# TODO: re-enable when the query planner does not push a LEFT join here\n-#query II\n-#EXPLAIN SELECT * FROM test WHERE b=(SELECT MIN(b) FROM test AS a WHERE a.id=test.id)\n-#----\n-#logical_opt\t<!REGEX>:.*DELIM_JOIN.*\n-\n-# FTS\n-require fts\n-\n-statement ok\n-CREATE TABLE documents(id VARCHAR, body VARCHAR)\n-\n-statement ok\n-INSERT INTO documents VALUES ('doc1', ' QU\u00c1CKING+QU\u00c1CKING+QU\u00c1CKING'), ('doc2', ' B\u00c1RKING+B\u00c1RKING+B\u00c1RKING+B\u00c1RKING'), ('doc3', ' M\u00c9OWING+M\u00c9OWING+M\u00c9OWING+M\u00c9OWING+M\u00c9OWING+999')\n-\n-statement ok\n-PRAGMA create_fts_index('documents', 'id', 'body', overwrite=1)\n-\n-query II\n-EXPLAIN SELECT score, id, body FROM (SELECT *, fts_main_documents.match_bm25(id, 'quacked barked') AS score FROM documents) sq WHERE score IS NOT NULL ORDER BY score DESC\n-----\n-logical_opt\t<!REGEX>:.*DELIM_JOIN.*\n-\n-# TPC-H\n-require tpch\n-\n-statement ok\n-CALL dbgen(sf=0.01)\n-\n-# q02\n-# TODO: re-enable when the query planner does not push a LEFT join here\n-#query II\n-#EXPLAIN\n-#SELECT\n-#    s_acctbal,\n-#    s_name,\n-#    n_name,\n-#    p_partkey,\n-#    p_mfgr,\n-#    s_address,\n-#    s_phone,\n-#    s_comment\n-#FROM\n-#    part,\n-#    supplier,\n-#    partsupp,\n-#    nation,\n-#    region\n-#WHERE\n-#    p_partkey = ps_partkey\n-#    AND s_suppkey = ps_suppkey\n-#    AND p_size = 15\n-#    AND p_type LIKE '%BRASS'\n-#    AND s_nationkey = n_nationkey\n-#    AND n_regionkey = r_regionkey\n-#    AND r_name = 'EUROPE'\n-#    AND ps_supplycost = (\n-#        SELECT\n-#            min(ps_supplycost)\n-#        FROM\n-#            partsupp,\n-#            supplier,\n-#            nation,\n-#            region\n-#        WHERE\n-#            p_partkey = ps_partkey\n-#            AND s_suppkey = ps_suppkey\n-#            AND s_nationkey = n_nationkey\n-#            AND n_regionkey = r_regionkey\n-#            AND r_name = 'EUROPE')\n-#ORDER BY\n-#    s_acctbal DESC,\n-#    n_name,\n-#    s_name,\n-#    p_partkey\n-#LIMIT 100\n-#----\n-#logical_opt\t<!REGEX>:.*DELIM_JOIN.*\n-\n-# q04\n-query II\n-EXPLAIN\n-SELECT\n-    o_orderpriority,\n-    count(*) AS order_count\n-FROM\n-    orders\n-WHERE\n-    o_orderdate >= CAST('1993-07-01' AS date)\n-    AND o_orderdate < CAST('1993-10-01' AS date)\n-    AND EXISTS (\n-        SELECT\n-            *\n-        FROM\n-            lineitem\n-        WHERE\n-            l_orderkey = o_orderkey\n-            AND l_commitdate < l_receiptdate)\n-GROUP BY\n-    o_orderpriority\n-ORDER BY\n-    o_orderpriority\n-----\n-logical_opt\t<!REGEX>:.*DELIM_JOIN.*\n-\n-# q17\n-# TODO: re-enable when the query planner does not push a LEFT join here\n-#query II\n-#EXPLAIN\n-#SELECT\n-#    sum(l_extendedprice) / 7.0 AS avg_yearly\n-#FROM\n-#    lineitem,\n-#    part\n-#WHERE\n-#    p_partkey = l_partkey\n-#    AND p_brand = 'Brand#23'\n-#    AND p_container = 'MED BOX'\n-#    AND l_quantity < (\n-#        SELECT\n-#            0.2 * avg(l_quantity)\n-#        FROM\n-#            lineitem\n-#        WHERE\n-#            l_partkey = p_partkey)\n-#----\n-#logical_opt\t<!REGEX>:.*DELIM_JOIN.*\n-\n-# q20\n-# TODO: re-enable when the query planner does not push a LEFT join here\n-#query II\n-#EXPLAIN\n-#SELECT\n-#    s_name,\n-#    s_address\n-#FROM\n-#    supplier,\n-#    nation\n-#WHERE\n-#    s_suppkey IN (\n-#        SELECT\n-#            ps_suppkey\n-#        FROM\n-#            partsupp\n-#        WHERE\n-#            ps_partkey IN (\n-#                SELECT\n-#                    p_partkey\n-#                FROM\n-#                    part\n-#                WHERE\n-#                    p_name LIKE 'forest%')\n-#                AND ps_availqty > (\n-#                    SELECT\n-#                        0.5 * sum(l_quantity)\n-#                    FROM\n-#                        lineitem\n-#                    WHERE\n-#                        l_partkey = ps_partkey\n-#                        AND l_suppkey = ps_suppkey\n-#                        AND l_shipdate >= CAST('1994-01-01' AS date)\n-#                        AND l_shipdate < CAST('1995-01-01' AS date)))\n-#            AND s_nationkey = n_nationkey\n-#            AND n_name = 'CANADA'\n-#        ORDER BY\n-#            s_name\n-#----\n-#logical_opt\t<!REGEX>:.*DELIM_JOIN.*\n-\n-# q21\n-query II\n-EXPLAIN\n-SELECT\n-    cntrycode,\n-    count(*) AS numcust,\n-    sum(c_acctbal) AS totacctbal\n-FROM (\n-    SELECT\n-        substring(c_phone FROM 1 FOR 2) AS cntrycode,\n-        c_acctbal\n-    FROM\n-        customer\n-    WHERE\n-        substring(c_phone FROM 1 FOR 2) IN ('13', '31', '23', '29', '30', '18', '17')\n-        AND c_acctbal > (\n-            SELECT\n-                avg(c_acctbal)\n-            FROM\n-                customer\n-            WHERE\n-                c_acctbal > 0.00\n-                AND substring(c_phone FROM 1 FOR 2) IN ('13', '31', '23', '29', '30', '18', '17'))\n-            AND NOT EXISTS (\n-                SELECT\n-                    *\n-                FROM\n-                    orders\n-                WHERE\n-                    o_custkey = c_custkey)) AS custsale\n-GROUP BY\n-    cntrycode\n-ORDER BY\n-    cntrycode\n-----\n-logical_opt\t<!REGEX>:.*DELIM_JOIN.*\ndiff --git a/test/optimizer/joins/no_duplicate_elimination_join.test b/test/optimizer/joins/no_duplicate_elimination_join.test\nnew file mode 100644\nindex 000000000000..7d5caf96f2e8\n--- /dev/null\n+++ b/test/optimizer/joins/no_duplicate_elimination_join.test\n@@ -0,0 +1,28 @@\n+# name: test/optimizer/joins/no_duplicate_elimination_join.test\n+# description: In the join order optimizer queries need to have the correct bindings\n+# group: [joins]\n+\n+statement ok\n+pragma debug_force_no_cross_product=true;\n+\n+statement ok\n+Create table test0 as select * from range(1000);\n+\n+statement ok\n+Create table test1 as select * from range(1000);\n+\n+statement ok\n+Create table test2 as select * from range(1000);\n+\n+statement ok\n+Create table test3 as select * from range(100);\n+\n+statement ok\n+Create table test4 as select * from range(400);\n+\n+statement ok\n+SELECT * FROM  test0, test1, test2,test3, test4\n+WHERE test1.range + test4.range = test2.range AND test1.range + test4.range = test3.range AND test1.range = test4.range AND test1.range = test0.range;\n+\n+statement ok\n+SELECT * FROM test0, test1, test2, test3, test4 WHERE test1.range + test4.range = test2.range AND test1.range + test4.range = test3.range AND test1.range = test4.range AND test1.range = test0.range AND test1.range + test3.range = test0.range;\n\\ No newline at end of file\ndiff --git a/test/optimizer/regex_optimizer.test b/test/optimizer/regex_optimizer.test\nindex 071e4f6bc06c..59ee520b49e4 100644\n--- a/test/optimizer/regex_optimizer.test\n+++ b/test/optimizer/regex_optimizer.test\n@@ -5,12 +5,11 @@\n statement ok\n CREATE TABLE test(s VARCHAR);\n \n-statement ok\n-INSERT INTO test VALUES ('aaa');\n-\n statement ok\n PRAGMA explain_output = OPTIMIZED_ONLY;\n \n+statement ok\n+INSERT INTO test VALUES ('aaa');\n \n # contains optimization: /aaa/ -> contains(aaa)\n query I nosort regexconstantpattern\n@@ -42,3 +41,190 @@ SELECT regexp_matches(s, 'a') FROM test\n query I nosort correct_result\n SELECT contains(s, 'aaa') FROM test\n ----\n+\n+\n+query I nosort correct_result\n+SELECT regexp_matches(s, '^a') FROM TEST;\n+----\n+aaa\n+\n+query I nosort correct_result\n+SELECT regexp_matches(s, '^aa') FROM TEST;\n+----\n+aaa\n+\n+statement ok\n+DELETE FROM test;\n+\n+statement ok\n+INSERT INTO test VALUES ('aaa'), ('a.a'), ('baba'), ('abba'), ('a\\.a'), ('a_a');\n+\n+query II\n+explain analyze select regexp_matches(s, 'a.a', 's'), s from test;\n+----\n+analyzed_plan\t<REGEX>:.*~~\\(s, '%a_a%'\\).*\n+\n+query I nosort\n+select s from test where regexp_matches(s, 'a.a', 's');\n+----\n+aaa\n+a.a\n+baba\n+a_a\n+\n+\n+query II\n+explain analyze SELECT regexp_matches(s, 'a.*a', 's'), s FROM TEST;\n+----\n+analyzed_plan\t<REGEX>:.*~~\\(s, '%a%a%'\\).*\n+\n+query I nosort\n+SELECT s FROM TEST where regexp_matches(s, 'a.*a', 's');\n+----\n+aaa\n+a.a\n+baba\n+abba\n+a\\.a\n+a_a\n+\n+query II\n+explain analyze SELECT regexp_matches(s, '^a.*b$', 's'), s FROM TEST;\n+----\n+analyzed_plan\t<REGEX>:.*~~\\(s, 'a%b'\\).*\n+\n+query I\n+SELECT s FROM TEST where regexp_matches(s, '^a.*b$', 's');\n+----\n+\n+query II\n+explain analyze select regexp_matches(s, 'a_a'), s from test;\n+----\n+analyzed_plan\t<REGEX>:.*contains\\(s, 'a_a'\\).*\n+\n+query II\n+explain analyze select regexp_matches(s, 'a%a'), s from test;\n+----\n+analyzed_plan\t<REGEX>:.*contains\\(s, 'a%a'\\).*\n+\n+query II\n+explain analyze select regexp_matches(s, 'a\\\\a'), s from test;\n+----\n+analyzed_plan\t<REGEX>:.*contains\\(s, 'a\\\\a'\\).*\n+\n+query I\n+select s from test where regexp_matches(s, 'a_a');\n+----\n+a_a\n+\n+query II\n+explain analyze select regexp_matches(s, 'a\\.a'), s from test;\n+----\n+analyzed_plan\t<REGEX>:.*contains\\(s, 'a.a'\\).*\n+\n+query I\n+select s from test where regexp_matches(s, 'a\\.a');\n+----\n+a.a\n+\n+query II\n+explain analyze SELECT regexp_matches(s, '^a'), s FROM TEST;\n+----\n+analyzed_plan\t<REGEX>:.*prefix\\(s, 'a'\\).*\n+\n+query I nosort\n+SELECT s FROM TEST where regexp_matches(s, '^a');\n+----\n+aaa\n+a.a\n+abba\n+a\\.a\n+a_a\n+\n+query II\n+explain analyze SELECT regexp_matches(s, 'a$'), s FROM TEST;\n+----\n+analyzed_plan\t<REGEX>:.*suffix\\(s, 'a'\\).*\n+\n+query I nosort\n+SELECT s FROM TEST where regexp_matches(s, 'a$');\n+----\n+aaa\n+a.a\n+baba\n+abba\n+a\\.a\n+a_a\n+\n+query II\n+explain analyze SELECT regexp_matches(s, 'aaa.'), s FROM TEST;\n+----\n+analyzed_plan\t<REGEX>:.*regexp_matches\\(s, 'aaa.'\\).*\n+\n+query II\n+explain analyze SELECT regexp_matches(s, 'aaa.', 's'), s FROM TEST;\n+----\n+analyzed_plan\t<REGEX>:.*~~\\(s, '%aaa_%'\\).*\n+\n+query II\n+explain analyze SELECT regexp_matches(s, '.aaa', 's'), s FROM TEST;\n+----\n+analyzed_plan\t<REGEX>:.*~~\\(s, '%_aaa%'\\).*\n+\n+query II\n+explain analyze SELECT regexp_matches(s, '^.aaa', 's'), s FROM TEST;\n+----\n+analyzed_plan\t<REGEX>:.*~~\\(s, '_aaa%'\\).*\n+\n+query II\n+explain analyze SELECT regexp_matches(s, '.aaa$', 's'), s FROM TEST;\n+----\n+analyzed_plan\t<REGEX>:.*~~\\(s, '%_aaa'\\).*\n+\n+query II\n+explain analyze select regexp_matches(s, '.*green.*', 's'), s, from test;\n+----\n+analyzed_plan\t<REGEX>:.*contains\\(s, 'green'\\).*\n+\n+query II\n+explain analyze select regexp_matches(s, '.*special.*requests.*', 's'), s from test;\n+----\n+analyzed_plan\t<REGEX>:.*~~\\(s, '%special%requests%'\\).*\n+\n+statement ok\n+DELETE from test;\n+\n+# Test matching newlines with and without 's' option\n+\n+# inserts 'aaa\\naaa'\n+statement ok\n+insert into test values (concat('aaa', chr(10), 'aaa'));\n+\n+query I\n+select count(s) from test where regexp_matches(s, 'aaa');\n+----\n+1\n+\n+# no matches since 's' option not passed\n+query I\n+select count(s) from test where regexp_matches(s, 'aaa.');\n+----\n+0\n+\n+# 's' option passed, so we match the string aaa\\naaa\n+query I\n+select count(s) from test where regexp_matches(s, 'aaa.', 's');\n+----\n+1 \n+\n+# when regexp_matches arguments are incorrect, an error is produced\n+statement error\n+select count(s) from test where regexp_matches(s);\n+----\n+Binder Error\n+\n+# when regexp_matches arguments are incorrect, an error is produced\n+statement error\n+select count(s) from test where regexp_matches('aaa');\n+----\n+Binder Error\ndiff --git a/test/optimizer/regex_to_like_optimizer.test b/test/optimizer/regex_to_like_optimizer.test\nnew file mode 100644\nindex 000000000000..4f5eb2465055\n--- /dev/null\n+++ b/test/optimizer/regex_to_like_optimizer.test\n@@ -0,0 +1,29 @@\n+# name: test/optimizer/regex_to_like_optimizer.test\n+# description: Test regex to like Optimization Rules\n+# group: [optimizer]\n+\n+statement ok\n+CREATE TABLE test(word VARCHAR);\n+\n+statement ok\n+INSERT INTO test VALUES ('BIGSmall'), ('bIGSmall'), ('BIGsmall'), ('bigsmall');\n+\n+# must match [Bb]S\n+query II\n+select word, regexp_matches(word, '(?i)b.*(?-i)[S]') from test; \n+----\n+BIGSmall\ttrue\n+bIGSmall\ttrue\n+BIGsmall\tfalse\n+bigsmall\tfalse\n+\n+# must match[Bb]s\n+query II\n+select word, regexp_matches(word, '(?i)[b].*(?-i)[s]') from test;\n+----\n+BIGSmall\tfalse\n+bIGSmall\tfalse\n+BIGsmall\ttrue\n+bigsmall\ttrue\n+\n+\ndiff --git a/test/optimizer/statistics/statistics_filter.test_coverage b/test/optimizer/statistics/statistics_filter.test_slow\nsimilarity index 98%\nrename from test/optimizer/statistics/statistics_filter.test_coverage\nrename to test/optimizer/statistics/statistics_filter.test_slow\nindex 95b876426f69..7cf2add6f9d1 100644\n--- a/test/optimizer/statistics/statistics_filter.test_coverage\n+++ b/test/optimizer/statistics/statistics_filter.test_slow\n@@ -1,4 +1,4 @@\n-# name: test/optimizer/statistics/statistics_filter.test_coverage\n+# name: test/optimizer/statistics/statistics_filter.test_slow\n # description: Statistics propagation test with filters\n # group: [statistics]\n \ndiff --git a/test/optimizer/using_optimizer.test b/test/optimizer/using_optimizer.test\nindex bb4ea141d724..0e592c89fdbc 100644\n--- a/test/optimizer/using_optimizer.test\n+++ b/test/optimizer/using_optimizer.test\n@@ -105,7 +105,7 @@ explain select i from a left outer join b using (i) right join c using (i);\n ----\n \n query II nosort leftright\n-explain select a.i from a left outer join b on (a.i=b.i) right join c on (a.i=c.i);\n+explain select c.i from a left outer join b on (a.i=b.i) right join c on (a.i=c.i);\n ----\n \n # full outer join\ndiff --git a/test/parquet/test_parquet_reader.test_coverage b/test/parquet/test_parquet_reader.test_slow\nsimilarity index 99%\nrename from test/parquet/test_parquet_reader.test_coverage\nrename to test/parquet/test_parquet_reader.test_slow\nindex 998c4e32035b..3ecbc229269f 100644\n--- a/test/parquet/test_parquet_reader.test_coverage\n+++ b/test/parquet/test_parquet_reader.test_slow\n@@ -1,4 +1,4 @@\n-# name: test/parquet/test_parquet_reader.test_coverage\n+# name: test/parquet/test_parquet_reader.test_slow\n # description: Test Parquet Reader with files on data/parquet-testing\n # group: [parquet]\n \ndiff --git a/test/sql/aggregate/aggregates/test_list_aggregate.test_coverage b/test/sql/aggregate/aggregates/test_list_aggregate.test_slow\nsimilarity index 96%\nrename from test/sql/aggregate/aggregates/test_list_aggregate.test_coverage\nrename to test/sql/aggregate/aggregates/test_list_aggregate.test_slow\nindex b483cb77e17b..27ab8d1f6697 100644\n--- a/test/sql/aggregate/aggregates/test_list_aggregate.test_coverage\n+++ b/test/sql/aggregate/aggregates/test_list_aggregate.test_slow\n@@ -1,4 +1,4 @@\n-# name: test/sql/aggregate/aggregates/test_list_aggregate.test_coverage\n+# name: test/sql/aggregate/aggregates/test_list_aggregate.test_slow\n # description: Test aggregate list\n # group: [aggregates]\n \ndiff --git a/test/sql/aggregate/aggregates/test_perfect_ht.test b/test/sql/aggregate/aggregates/test_perfect_ht.test\nindex 1aa91fd66e4b..332254023d0e 100644\n--- a/test/sql/aggregate/aggregates/test_perfect_ht.test\n+++ b/test/sql/aggregate/aggregates/test_perfect_ht.test\n@@ -11,8 +11,16 @@ PRAGMA enable_verification\n statement ok\n PRAGMA perfect_ht_threshold=20;\n \n+foreach type INTEGER UINTEGER BIGINT UBIGINT\n+\n+foreach optimizer 'compressed_materialization' ''\n+\n+# we run these tests with and without compressed materialization to make sure we cover all types\n+statement ok\n+SET disabled_optimizers to ${optimizer}\n+\n statement ok\n-CREATE TABLE timeseries(year INTEGER, val INTEGER);\n+CREATE OR REPLACE TABLE timeseries(year ${type}, val ${type});\n \n statement ok\n INSERT INTO timeseries VALUES (1996, 10), (1997, 12), (1996, 20), (2001, 30), (NULL, 1), (1996, NULL);\n@@ -34,6 +42,10 @@ NULL\t[1]\t1\n 1997\t[12]\t12\n 2001\t[30]\t30\n \n+endloop\n+\n+endloop\n+\n # many small columns each having only the values 0 and 1\n # total possible combinations is 2^10, but there are only 2 groups\n statement ok\ndiff --git a/test/sql/aggregate/distinct/grouped/coverage.test_coverage b/test/sql/aggregate/distinct/grouped/coverage.test_slow\nsimilarity index 96%\nrename from test/sql/aggregate/distinct/grouped/coverage.test_coverage\nrename to test/sql/aggregate/distinct/grouped/coverage.test_slow\nindex 1fa914d140e9..5278d49cc087 100644\n--- a/test/sql/aggregate/distinct/grouped/coverage.test_coverage\n+++ b/test/sql/aggregate/distinct/grouped/coverage.test_slow\n@@ -1,4 +1,4 @@\n-# name: test/sql/aggregate/distinct/grouped/coverage.test_coverage\n+# name: test/sql/aggregate/distinct/grouped/coverage.test_slow\n # description: DISTINCT aggregations\n # group: [grouped]\n \ndiff --git a/test/sql/aggregate/distinct/grouped/long_input.test_coverage b/test/sql/aggregate/distinct/grouped/long_input.test_slow\nsimilarity index 88%\nrename from test/sql/aggregate/distinct/grouped/long_input.test_coverage\nrename to test/sql/aggregate/distinct/grouped/long_input.test_slow\nindex ee2d328609c7..ba03f402eada 100644\n--- a/test/sql/aggregate/distinct/grouped/long_input.test_coverage\n+++ b/test/sql/aggregate/distinct/grouped/long_input.test_slow\n@@ -1,4 +1,4 @@\n-# name: test/sql/aggregate/distinct/grouped/long_input.test_coverage\n+# name: test/sql/aggregate/distinct/grouped/long_input.test_slow\n # description: DISTINCT aggregations\n # group: [grouped]\n \ndiff --git a/test/sql/aggregate/distinct/grouped/partitioned_case.test_coverage b/test/sql/aggregate/distinct/grouped/partitioned_case.test_slow\nsimilarity index 98%\nrename from test/sql/aggregate/distinct/grouped/partitioned_case.test_coverage\nrename to test/sql/aggregate/distinct/grouped/partitioned_case.test_slow\nindex 4798f2e054e0..f1b790142a6a 100644\n--- a/test/sql/aggregate/distinct/grouped/partitioned_case.test_coverage\n+++ b/test/sql/aggregate/distinct/grouped/partitioned_case.test_slow\n@@ -1,4 +1,4 @@\n-# name: test/sql/aggregate/distinct/grouped/partitioned_case.test_coverage\n+# name: test/sql/aggregate/distinct/grouped/partitioned_case.test_slow\n # group: [grouped]\n \n # force parallelism of the queries\ndiff --git a/test/sql/aggregate/distinct/ungrouped/test_distinct_ungrouped.test_coverage b/test/sql/aggregate/distinct/ungrouped/test_distinct_ungrouped.test_slow\nsimilarity index 98%\nrename from test/sql/aggregate/distinct/ungrouped/test_distinct_ungrouped.test_coverage\nrename to test/sql/aggregate/distinct/ungrouped/test_distinct_ungrouped.test_slow\nindex 1cb57163d3f8..63530629f749 100644\n--- a/test/sql/aggregate/distinct/ungrouped/test_distinct_ungrouped.test_coverage\n+++ b/test/sql/aggregate/distinct/ungrouped/test_distinct_ungrouped.test_slow\n@@ -1,4 +1,4 @@\n-# name: test/sql/aggregate/distinct/ungrouped/test_distinct_ungrouped.test_coverage\n+# name: test/sql/aggregate/distinct/ungrouped/test_distinct_ungrouped.test_slow\n # description: DISTINCT aggregations, without GROUP BY\n # group: [ungrouped]\n \ndiff --git a/test/sql/aggregate/distinct/ungrouped/test_distinct_ungrouped_parallel.test_coverage b/test/sql/aggregate/distinct/ungrouped/test_distinct_ungrouped_parallel.test_slow\nsimilarity index 96%\nrename from test/sql/aggregate/distinct/ungrouped/test_distinct_ungrouped_parallel.test_coverage\nrename to test/sql/aggregate/distinct/ungrouped/test_distinct_ungrouped_parallel.test_slow\nindex 1309558ac21d..b78bfdb6d954 100644\n--- a/test/sql/aggregate/distinct/ungrouped/test_distinct_ungrouped_parallel.test_coverage\n+++ b/test/sql/aggregate/distinct/ungrouped/test_distinct_ungrouped_parallel.test_slow\n@@ -1,4 +1,4 @@\n-# name: test/sql/aggregate/distinct/ungrouped/test_distinct_ungrouped_parallel.test_coverage\n+# name: test/sql/aggregate/distinct/ungrouped/test_distinct_ungrouped_parallel.test_slow\n # description: DISTINCT aggregations, without GROUP BY\n # group: [ungrouped]\n \ndiff --git a/test/sql/aggregate/group/test_group_by_error.test b/test/sql/aggregate/group/test_group_by_error.test\nnew file mode 100644\nindex 000000000000..c819f16514f7\n--- /dev/null\n+++ b/test/sql/aggregate/group/test_group_by_error.test\n@@ -0,0 +1,19 @@\n+# name: test/sql/aggregate/group/test_group_by_error.test\n+# description: Test GROUP BY errors\n+# group: [group]\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+statement ok\n+CREATE TABLE tbl(i INT)\n+\n+statement error\n+SELECT * FROM tbl GROUP BY DEFAULT\n+----\n+cannot contain DEFAULT\n+\n+statement error\n+SELECT * FROM tbl GROUP BY SUM(41)\n+----\n+cannot contain aggregates\ndiff --git a/test/sql/binder/test_null_type_propagation.test b/test/sql/binder/test_null_type_propagation.test\nindex 35fa1f74f129..39dec9c0624f 100644\n--- a/test/sql/binder/test_null_type_propagation.test\n+++ b/test/sql/binder/test_null_type_propagation.test\n@@ -197,6 +197,8 @@ SELECT * FROM cte\n ----\n NULL\n \n+require noalternativeverify\n+\n query I\n WITH cte AS (SELECT NULL)\n SELECT * FROM cte UNION ALL SELECT CAST(1 AS BOOLEAN)\ndiff --git a/test/sql/catalog/function/test_cte_macro.test b/test/sql/catalog/function/test_cte_macro.test\nindex 4d696c13ebc6..e2734ee5249d 100644\n--- a/test/sql/catalog/function/test_cte_macro.test\n+++ b/test/sql/catalog/function/test_cte_macro.test\n@@ -40,6 +40,9 @@ SELECT plus42(42)\n ----\n 84\n \n+# temporary solution until decorrelation of materialized CTEs is implemented\n+require noalternativeverify\n+\n query T\n SELECT plus42(a) FROM integers\n ----\ndiff --git a/test/sql/catalog/function/test_macro_default_arg.test_coverage b/test/sql/catalog/function/test_macro_default_arg.test_slow\nsimilarity index 91%\nrename from test/sql/catalog/function/test_macro_default_arg.test_coverage\nrename to test/sql/catalog/function/test_macro_default_arg.test_slow\nindex f909b7903cff..495fd9ec6966 100644\n--- a/test/sql/catalog/function/test_macro_default_arg.test_coverage\n+++ b/test/sql/catalog/function/test_macro_default_arg.test_slow\n@@ -1,4 +1,4 @@\n-# name: test/sql/catalog/function/test_macro_default_arg.test_coverage\n+# name: test/sql/catalog/function/test_macro_default_arg.test_slow\n # group: [function]\n \n statement ok\ndiff --git a/test/sql/catalog/function/test_table_macro_complex.test b/test/sql/catalog/function/test_table_macro_complex.test\nindex b9ede2a44716..6db06f5c34cb 100644\n--- a/test/sql/catalog/function/test_table_macro_complex.test\n+++ b/test/sql/catalog/function/test_table_macro_complex.test\n@@ -33,6 +33,11 @@ select * from dates_between('2021-01-01', '2021-02-04');\n 2021-01-01 00:00:00\n 2021-02-01 00:00:00\n \n+\n+# alternative verify turns this CTE into a materialized CTE,\n+# which then does not terminate anymore.\n+require noalternativeverify\n+\n statement ok\n CREATE MACRO fibonacci(n0, n1, nlimit, noffset) AS TABLE\n WITH RECURSIVE fib AS (\ndiff --git a/test/sql/copy/csv/csv_write_gz.test_coverage b/test/sql/copy/csv/csv_write_gz.test_slow\nsimilarity index 93%\nrename from test/sql/copy/csv/csv_write_gz.test_coverage\nrename to test/sql/copy/csv/csv_write_gz.test_slow\nindex 687757f03361..82d4b3f33754 100644\n--- a/test/sql/copy/csv/csv_write_gz.test_coverage\n+++ b/test/sql/copy/csv/csv_write_gz.test_slow\n@@ -1,4 +1,4 @@\n-# name: test/sql/copy/csv/csv_write_gz.test_coverage\n+# name: test/sql/copy/csv/csv_write_gz.test_slow\n # description: Test round-trip writing of gzip CSV files\n # group: [csv]\n \ndiff --git a/test/sql/copy/csv/csv_write_zstd.test_coverage b/test/sql/copy/csv/csv_write_zstd.test_slow\nsimilarity index 93%\nrename from test/sql/copy/csv/csv_write_zstd.test_coverage\nrename to test/sql/copy/csv/csv_write_zstd.test_slow\nindex 5b2171aa1f3e..da59db8bc410 100644\n--- a/test/sql/copy/csv/csv_write_zstd.test_coverage\n+++ b/test/sql/copy/csv/csv_write_zstd.test_slow\n@@ -1,4 +1,4 @@\n-# name: test/sql/copy/csv/csv_write_zstd.test_coverage\n+# name: test/sql/copy/csv/csv_write_zstd.test_slow\n # description: Test round-trip writing of zstd CSV files\n # group: [csv]\n \ndiff --git a/test/sql/copy/csv/data/error/mismatch/bad.csv b/test/sql/copy/csv/data/error/mismatch/bad.csv\nnew file mode 100644\nindex 000000000000..d7ac0f102b31\n--- /dev/null\n+++ b/test/sql/copy/csv/data/error/mismatch/bad.csv\n@@ -0,0 +1,3 @@\n+1,2,AAA,\n+4,BBB,9,\n+6,7,CCC,\n\\ No newline at end of file\ndiff --git a/test/sql/copy/csv/data/error/mismatch/bad2.csv b/test/sql/copy/csv/data/error/mismatch/bad2.csv\nnew file mode 100644\nindex 000000000000..e4b07932e9cd\n--- /dev/null\n+++ b/test/sql/copy/csv/data/error/mismatch/bad2.csv\n@@ -0,0 +1,3 @@\n+1,2,DDD,\n+4,5,9,\n+EEE,7,FFF,\n\\ No newline at end of file\ndiff --git a/test/sql/copy/csv/data/error/mismatch/big_bad.csv b/test/sql/copy/csv/data/error/mismatch/big_bad.csv\nnew file mode 100644\nindex 000000000000..fa6e3c1a5a68\n--- /dev/null\n+++ b/test/sql/copy/csv/data/error/mismatch/big_bad.csv\n@@ -0,0 +1,4096 @@\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+B, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+C, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n\\ No newline at end of file\ndiff --git a/test/sql/copy/csv/data/error/mismatch/big_bad2.csv b/test/sql/copy/csv/data/error/mismatch/big_bad2.csv\nnew file mode 100644\nindex 000000000000..069d407017a5\n--- /dev/null\n+++ b/test/sql/copy/csv/data/error/mismatch/big_bad2.csv\n@@ -0,0 +1,4096 @@\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+B, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+C, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n+1, A\n\\ No newline at end of file\ndiff --git a/test/sql/copy/csv/data/error/mismatch/example.tsv b/test/sql/copy/csv/data/error/mismatch/example.tsv\nnew file mode 100644\nindex 000000000000..d2af1d75dd71\n--- /dev/null\n+++ b/test/sql/copy/csv/data/error/mismatch/example.tsv\n@@ -0,0 +1,3 @@\n+alice\t10\t1\t20\n+bobby\t12\t2\tNOT_A_NUMBER\n+charlie\t7\t3\t30\n\\ No newline at end of file\ndiff --git a/test/sql/copy/csv/data/error/mismatch/half1.csv b/test/sql/copy/csv/data/error/mismatch/half1.csv\nnew file mode 100644\nindex 000000000000..3527d5db3092\n--- /dev/null\n+++ b/test/sql/copy/csv/data/error/mismatch/half1.csv\n@@ -0,0 +1,2049 @@\n+num,str\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+1,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n\\ No newline at end of file\ndiff --git a/test/sql/copy/csv/data/error/mismatch/half2.csv b/test/sql/copy/csv/data/error/mismatch/half2.csv\nnew file mode 100644\nindex 000000000000..cb0a04b977ae\n--- /dev/null\n+++ b/test/sql/copy/csv/data/error/mismatch/half2.csv\n@@ -0,0 +1,4097 @@\n+num,str\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+1,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT2\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n+A,TEXT1\n\\ No newline at end of file\ndiff --git a/test/sql/copy/csv/data/error/mismatch/part1.csv b/test/sql/copy/csv/data/error/mismatch/part1.csv\nnew file mode 100644\nindex 000000000000..06e12a229db5\n--- /dev/null\n+++ b/test/sql/copy/csv/data/error/mismatch/part1.csv\n@@ -0,0 +1,4097 @@\n+COL1,COL2\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+B,BAD1B\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+C,BAD1C\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n\\ No newline at end of file\ndiff --git a/test/sql/copy/csv/data/error/mismatch/part2.csv b/test/sql/copy/csv/data/error/mismatch/part2.csv\nnew file mode 100644\nindex 000000000000..7d5a6aef9d69\n--- /dev/null\n+++ b/test/sql/copy/csv/data/error/mismatch/part2.csv\n@@ -0,0 +1,4097 @@\n+COL1,COL2\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+B,BAD2B\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+C,BAD2C\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n\\ No newline at end of file\ndiff --git a/test/sql/copy/csv/data/error/mismatch/part3.csv b/test/sql/copy/csv/data/error/mismatch/part3.csv\nnew file mode 100644\nindex 000000000000..06e12a229db5\n--- /dev/null\n+++ b/test/sql/copy/csv/data/error/mismatch/part3.csv\n@@ -0,0 +1,4097 @@\n+COL1,COL2\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+B,BAD1B\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+C,BAD1C\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n+1,TEXT\n\\ No newline at end of file\ndiff --git a/test/sql/copy/csv/data/error/mismatch/small1.csv b/test/sql/copy/csv/data/error/mismatch/small1.csv\nnew file mode 100644\nindex 000000000000..b1d61d2cff4b\n--- /dev/null\n+++ b/test/sql/copy/csv/data/error/mismatch/small1.csv\n@@ -0,0 +1,6 @@\n+COL1,COL2\n+1,A\n+X,Y\n+2,B\n+3,C\n+X,Y\n\\ No newline at end of file\ndiff --git a/test/sql/copy/csv/data/error/mismatch/small2.csv b/test/sql/copy/csv/data/error/mismatch/small2.csv\nnew file mode 100644\nindex 000000000000..236b929ae1a8\n--- /dev/null\n+++ b/test/sql/copy/csv/data/error/mismatch/small2.csv\n@@ -0,0 +1,5 @@\n+COL1,COL2\n+1,A\n+X,Y\n+3,C\n+X,Y\n\\ No newline at end of file\ndiff --git a/test/sql/copy/csv/rejects/csv_rejects_auto.test b/test/sql/copy/csv/rejects/csv_rejects_auto.test\nnew file mode 100644\nindex 000000000000..f4fee0bc9052\n--- /dev/null\n+++ b/test/sql/copy/csv/rejects/csv_rejects_auto.test\n@@ -0,0 +1,230 @@\n+# name: test/sql/copy/csv/rejects/csv_rejects_auto.test\n+# group: [rejects]\n+\n+require skip_reload\n+\n+# FIXME: https://github.com/duckdb/duckdb/issues/7755\n+require vector_size 2048\n+\n+# Test invalid arguments\n+statement error\n+SELECT * FROM read_csv_auto(\n+    'test/sql/copy/csv/data/error/mismatch/bad.csv', \n+    ignore_errors=false,\n+    rejects_table='csv_rejects_table'\n+)\n+----\n+only supported when IGNORE_ERRORS is set to true\n+\n+statement error\n+SELECT * FROM read_csv_auto(\n+    'test/sql/copy/csv/data/error/mismatch/bad.csv', \n+    ignore_errors=true,\n+    rejects_table='')\n+----\n+REJECTS_TABLE option cannot be empty\n+\n+statement error\n+SELECT * FROM read_csv_auto(\n+    'test/sql/copy/csv/data/error/mismatch/bad.csv', \n+    ignore_errors=true,\n+    rejects_table='csv_rejects_table',\n+    union_by_name=true)\n+----\n+UNION_BY_NAME is set to true\n+\n+statement error\n+SELECT * FROM read_csv_auto(\n+    'test/sql/copy/csv/data/error/mismatch/bad.csv', \n+    ignore_errors=true,\n+    rejects_limit=10)\n+----\n+REJECTS_LIMIT option is only supported when REJECTS_TABLE is set to a table name\n+\n+statement error\n+SELECT * FROM read_csv_auto(\n+    'test/sql/copy/csv/data/error/mismatch/bad.csv', \n+    ignore_errors=true,\n+    rejects_table='csv_rejects_table',\n+    rejects_limit=-1)\n+----\n+REJECTS_LIMIT: cannot be negative\n+\n+foreach PARALLEL true false\n+\n+query III\n+SELECT typeof(first(column0)), typeof(first(column1)), COUNT(*) FROM read_csv_auto(\n+    'test/sql/copy/csv/data/error/mismatch/big_bad*.csv',\n+    sample_size=3000,\n+    rejects_table='csv_rejects_table',\n+    ignore_errors=true, \n+\tparallel=${PARALLEL});\n+----\n+VARCHAR\tVARCHAR\t8192\n+\n+statement ok\n+DROP TABLE csv_rejects_table;\n+\n+# Ensure that we can get the schema if we reduce the sample size and ignore errors\n+query IIIII\n+SELECT typeof(first(column0)), typeof(first(column1)), COUNT(*), SUM(column0), MAX(len(column1)) FROM read_csv_auto(\n+    'test/sql/copy/csv/data/error/mismatch/big_bad*.csv',\n+    sample_size=100,\n+    rejects_table='csv_rejects_table',\n+    ignore_errors=true,\n+\tparallel=${PARALLEL});\n+----\n+BIGINT\tVARCHAR\t8188\t8188\t2\n+\n+query IIIIII rowsort\n+SELECT regexp_replace(\"file\", '\\\\', '/', 'g') , \"line\", \"column\", \"column_name\", \"parsed_value\", \"error\"\n+FROM csv_rejects_table;\n+----\n+test/sql/copy/csv/data/error/mismatch/big_bad.csv\t2000\t0\t\"column0\"\tB\tCould not convert string 'B' to 'BIGINT'\n+test/sql/copy/csv/data/error/mismatch/big_bad.csv\t4000\t0\t\"column0\"\tC\tCould not convert string 'C' to 'BIGINT'\n+test/sql/copy/csv/data/error/mismatch/big_bad2.csv\t1000\t0\t\"column0\"\tB\tCould not convert string 'B' to 'BIGINT'\n+test/sql/copy/csv/data/error/mismatch/big_bad2.csv\t3000\t0\t\"column0\"\tC\tCould not convert string 'C' to 'BIGINT'\n+\n+statement ok\n+DROP TABLE csv_rejects_table;\n+\n+# Test with recovery columns\n+query I\n+SELECT SUM(COL1) FROM read_csv_auto(\n+    'test/sql/copy/csv/data/error/mismatch/part*.csv',\n+    header=true,\n+    ignore_errors=true,\n+\tsample_size=10,\n+    rejects_table='csv_rejects_table',\n+    rejects_recovery_columns=['COL2'],\n+\tparallel=${PARALLEL});\n+----\n+12282\n+\n+query IIIIIII rowsort\n+SELECT \"line\", \"column\", \"column_name\", \"parsed_value\", \"recovery_columns\", \"error\", regexp_replace(\"file\", '\\\\', '/', 'g') \n+FROM csv_rejects_table;\n+----\n+1001\t0\t\"COL1\"\tB\t{'COL2': BAD2B}\tCould not convert string 'B' to 'BIGINT'\ttest/sql/copy/csv/data/error/mismatch/part2.csv\n+2001\t0\t\"COL1\"\tB\t{'COL2': BAD1B}\tCould not convert string 'B' to 'BIGINT'\ttest/sql/copy/csv/data/error/mismatch/part1.csv\n+2001\t0\t\"COL1\"\tB\t{'COL2': BAD1B}\tCould not convert string 'B' to 'BIGINT'\ttest/sql/copy/csv/data/error/mismatch/part3.csv\n+3001\t0\t\"COL1\"\tC\t{'COL2': BAD2C}\tCould not convert string 'C' to 'BIGINT'\ttest/sql/copy/csv/data/error/mismatch/part2.csv\n+4001\t0\t\"COL1\"\tC\t{'COL2': BAD1C}\tCould not convert string 'C' to 'BIGINT'\ttest/sql/copy/csv/data/error/mismatch/part1.csv\n+4001\t0\t\"COL1\"\tC\t{'COL2': BAD1C}\tCould not convert string 'C' to 'BIGINT'\ttest/sql/copy/csv/data/error/mismatch/part3.csv\n+\n+statement ok\n+DROP TABLE csv_rejects_table;\n+\n+# Test with lots of errors \n+query I\n+SELECT SUM(num) FROM read_csv_auto(\n+\t'test/sql/copy/csv/data/error/mismatch/half1.csv',\n+\theader=true,\n+\tignore_errors=true,\n+\tsample_size=1000,\n+\trejects_table='csv_rejects_table',\n+\tparallel=${PARALLEL});\n+----\n+1024\n+\n+query I\n+SELECT COUNT(*) FROM csv_rejects_table;\n+----\n+1024\n+\n+statement ok\n+DROP TABLE csv_rejects_table;\n+\n+# Test same with COPY\n+statement ok\n+CREATE TABLE tbl1 (col1 BIGINT, col2 VARCHAR);\n+\n+statement ok\n+COPY tbl1 FROM 'test/sql/copy/csv/data/error/mismatch/half1.csv' \n+WITH (HEADER, IGNORE_ERRORS TRUE, PARALLEL ${PARALLEL}, SAMPLE_SIZE 1000, REJECTS_TABLE 'csv_rejects_table');\n+\n+query I\n+SELECT SUM(col1) FROM tbl1;\n+----\n+1024\n+\n+query I\n+SELECT COUNT(*) FROM csv_rejects_table;\n+----\n+1024\n+\n+statement ok\n+DROP TABLE csv_rejects_table;\n+\n+statement ok\n+DROP TABLE tbl1;\n+\n+# Test with more errors than STANDARD_VECTOR_SIZE\n+query I\n+SELECT SUM(num) FROM read_csv_auto(\n+\t'test/sql/copy/csv/data/error/mismatch/half2.csv',\n+\theader=true,\n+\tignore_errors=true,\n+\tsample_size=1000,\n+\trejects_table='csv_rejects_table',\n+\tparallel=${PARALLEL});\n+----\n+1024\n+\n+query I\n+SELECT COUNT(*) FROM csv_rejects_table;\n+----\n+3072\n+\n+statement ok\n+DROP TABLE csv_rejects_table;\n+\n+statement ok\n+CREATE TABLE tbl1 (col1 BIGINT, col2 VARCHAR);\n+\n+statement ok\n+COPY tbl1 FROM 'test/sql/copy/csv/data/error/mismatch/half2.csv' \n+WITH (HEADER, IGNORE_ERRORS TRUE, PARALLEL ${PARALLEL}, SAMPLE_SIZE 1000, REJECTS_TABLE 'csv_rejects_table');\n+\n+query I\n+SELECT SUM(col1) FROM tbl1;\n+----\n+1024\n+\n+query I\n+SELECT COUNT(*) FROM csv_rejects_table;\n+----\n+3072\n+\n+statement ok\n+DROP TABLE csv_rejects_table;\n+\n+statement ok\n+DROP TABLE tbl1;\n+\n+# Test with more errors than STANDARD_VECTOR_SIZE and limit\n+statement ok\n+CREATE TABLE tbl1 (col1 BIGINT, col2 VARCHAR);\n+\n+statement ok\n+COPY tbl1 FROM 'test/sql/copy/csv/data/error/mismatch/half2.csv' \n+WITH (HEADER, IGNORE_ERRORS TRUE, PARALLEL ${PARALLEL}, SAMPLE_SIZE 1000, REJECTS_TABLE 'csv_rejects_table', REJECTS_LIMIT 1337);\n+\n+query I\n+SELECT SUM(col1) FROM tbl1;\n+----\n+1024\n+\n+query I\n+SELECT COUNT(*) FROM csv_rejects_table;\n+----\n+1337\n+\n+statement ok\n+DROP TABLE csv_rejects_table;\n+\n+statement ok\n+DROP TABLE tbl1;\n+\n+\n+endloop PARALLEL\n\\ No newline at end of file\ndiff --git a/test/sql/copy/csv/rejects/csv_rejects_read.test b/test/sql/copy/csv/rejects/csv_rejects_read.test\nnew file mode 100644\nindex 000000000000..d8ba9a7d0df8\n--- /dev/null\n+++ b/test/sql/copy/csv/rejects/csv_rejects_read.test\n@@ -0,0 +1,296 @@\n+# name: test/sql/copy/csv/rejects/csv_rejects_read.test\n+# group: [rejects]\n+\n+require skip_reload\n+\n+# FIXME: https://github.com/duckdb/duckdb/issues/7755\n+require vector_size 2048\n+\n+# Test invalid arguments\n+statement error\n+SELECT * FROM read_csv(\n+    'test/sql/copy/csv/data/error/mismatch/bad.csv', \n+    columns = {'col0': 'INTEGER', 'col1': 'INTEGER', 'col2': 'VARCHAR'},\n+    ignore_errors=false,\n+    rejects_table='csv_rejects_table'\n+)\n+----\n+only supported when IGNORE_ERRORS is set to true\n+\n+statement error\n+SELECT * FROM read_csv(\n+    'test/sql/copy/csv/data/error/mismatch/bad.csv', \n+    columns = {'col0': 'INTEGER', 'col1': 'INTEGER', 'col2': 'VARCHAR'},\n+    ignore_errors=true,\n+    rejects_table='')\n+----\n+REJECTS_TABLE option cannot be empty\n+\n+statement error\n+SELECT * FROM read_csv(\n+    'test/sql/copy/csv/data/error/mismatch/bad.csv', \n+    columns = {'col0': 'INTEGER', 'col1': 'INTEGER', 'col2': 'VARCHAR'},\n+    ignore_errors=true,\n+    rejects_table='csv_rejects_table',\n+    union_by_name=true)\n+----\n+UNION_BY_NAME is set to true\n+\n+statement error\n+SELECT * FROM read_csv(\n+    'test/sql/copy/csv/data/error/mismatch/bad.csv', \n+    columns = {'col0': 'INTEGER', 'col1': 'INTEGER', 'col2': 'VARCHAR'},\n+    ignore_errors=true,\n+    rejects_limit=10)\n+----\n+REJECTS_LIMIT option is only supported when REJECTS_TABLE is set to a table name\n+\n+statement error\n+SELECT * FROM read_csv(\n+    'test/sql/copy/csv/data/error/mismatch/bad.csv', \n+    columns = {'col0': 'INTEGER', 'col1': 'INTEGER', 'col2': 'VARCHAR'},\n+    ignore_errors=true,\n+    rejects_table='csv_rejects_table',\n+    rejects_limit=-1)\n+----\n+REJECTS_LIMIT: cannot be negative\n+\n+foreach PARALLEL true false\n+\n+# Basic test\n+query III rowsort\n+SELECT * FROM read_csv(\n+    'test/sql/copy/csv/data/error/mismatch/bad.csv', \n+    columns = {'col0': 'INTEGER', 'col1': 'INTEGER', 'col2': 'VARCHAR'},\n+    rejects_table='csv_rejects_table',\n+    ignore_errors=true, parallel=${PARALLEL});\n+----\n+1\t2\tAAA\n+6\t7\tCCC\n+\n+query IIIIII rowsort\n+SELECT \"line\", \"column\", \"column_name\", \"parsed_value\", \"error\", regexp_replace(\"file\", '\\\\', '/', 'g') \n+FROM csv_rejects_table;\n+----\n+2\t1\t\"col1\"\tBBB\tCould not convert string 'BBB' to 'INTEGER'\ttest/sql/copy/csv/data/error/mismatch/bad.csv\n+\n+statement ok\n+DROP TABLE csv_rejects_table;\n+\n+# Test with multiple columns on the same row\n+query III rowsort\n+SELECT * FROM read_csv(\n+    'test/sql/copy/csv/data/error/mismatch/bad2.csv', \n+    columns = {'col0': 'INTEGER', 'col1': 'INTEGER', 'col2': 'INTEGER'}, \n+    rejects_table='csv_rejects_table',\n+    ignore_errors=true, parallel=${PARALLEL});\n+----\n+4\t5\t9\n+\n+query IIIIII rowsort\n+SELECT \"line\", \"column\", \"column_name\", \"parsed_value\", \"error\", regexp_replace(\"file\", '\\\\', '/', 'g') \n+FROM csv_rejects_table;\n+----\n+1\t2\t\"col2\"\tDDD\tCould not convert string 'DDD' to 'INTEGER'\ttest/sql/copy/csv/data/error/mismatch/bad2.csv\n+3\t0\t\"col0\"\tEEE\tCould not convert string 'EEE' to 'INTEGER'\ttest/sql/copy/csv/data/error/mismatch/bad2.csv\n+3\t2\t\"col2\"\tFFF\tCould not convert string 'FFF' to 'INTEGER'\ttest/sql/copy/csv/data/error/mismatch/bad2.csv\n+\n+statement ok\n+DROP TABLE csv_rejects_table;\n+\n+# Test with multiple files\n+query III rowsort\n+SELECT * FROM read_csv(\n+    'test/sql/copy/csv/data/error/mismatch/bad*.csv', \n+    columns = {'col0': 'INTEGER', 'col1': 'INTEGER', 'col2': 'VARCHAR'}, \n+    rejects_table='csv_rejects_table',\n+    ignore_errors=true, parallel=${PARALLEL});\n+----\n+1\t2\tAAA\n+1\t2\tDDD\n+4\t5\t9\n+6\t7\tCCC\n+\n+\n+query IIIIII rowsort\n+SELECT \"line\", \"column\", \"column_name\", \"parsed_value\", \"error\", regexp_replace(\"file\", '\\\\', '/', 'g') \n+FROM csv_rejects_table;\n+----\n+2\t1\t\"col1\"\tBBB\tCould not convert string 'BBB' to 'INTEGER'\ttest/sql/copy/csv/data/error/mismatch/bad.csv\n+3\t0\t\"col0\"\tEEE\tCould not convert string 'EEE' to 'INTEGER'\ttest/sql/copy/csv/data/error/mismatch/bad2.csv\n+\n+statement ok\n+DROP TABLE csv_rejects_table;\n+\n+# Set limit\n+\n+query III rowsort\n+SELECT * FROM read_csv(\n+    'test/sql/copy/csv/data/error/mismatch/bad*.csv', \n+    columns = {'col0': 'INTEGER', 'col1': 'INTEGER', 'col2': 'VARCHAR'},\n+    rejects_table='csv_rejects_table',\n+    rejects_limit=2,\n+    ignore_errors=true, parallel=${PARALLEL});\n+----\n+1\t2\tAAA\n+1\t2\tDDD\n+4\t5\t9\n+6\t7\tCCC\n+\n+# We should now only have two errors logged\n+query I\n+SELECT COUNT(*) FROM csv_rejects_table\n+----\n+2\n+\n+statement ok\n+DROP TABLE csv_rejects_table;\n+\n+# Try with bigger files\n+query I\n+SELECT SUM(num) FROM read_csv(\n+    'test/sql/copy/csv/data/error/mismatch/big_bad.csv', \n+    columns = {'num': 'INTEGER', 'str': 'VARCHAR'},\n+    rejects_table='csv_rejects_table',\n+    ignore_errors=true, parallel=${PARALLEL});\n+----\n+4094\n+\n+query  IIIIII rowsort\n+SELECT \"line\", \"column\", \"column_name\", \"parsed_value\", \"error\", regexp_replace(\"file\", '\\\\', '/', 'g') \n+FROM csv_rejects_table;\n+----\n+2000\t0\t\"num\"\tB\tCould not convert string 'B' to 'INTEGER'\ttest/sql/copy/csv/data/error/mismatch/big_bad.csv\n+4000\t0\t\"num\"\tC\tCould not convert string 'C' to 'INTEGER'\ttest/sql/copy/csv/data/error/mismatch/big_bad.csv\n+\n+statement ok\n+DROP TABLE csv_rejects_table;\n+\n+query I\n+SELECT SUM(num) FROM read_csv(\n+    'test/sql/copy/csv/data/error/mismatch/big_bad2.csv', \n+    columns = {'num': 'INTEGER', 'str': 'VARCHAR'},\n+    rejects_table='csv_rejects_table',\n+    ignore_errors=true, parallel=${PARALLEL})\n+----\n+4094\n+\n+query  IIIIII rowsort\n+SELECT \"line\", \"column\", \"column_name\", \"parsed_value\", \"error\", regexp_replace(\"file\", '\\\\', '/', 'g') \n+FROM csv_rejects_table;\n+----\n+1000\t0\t\"num\"\tB\tCould not convert string 'B' to 'INTEGER'\ttest/sql/copy/csv/data/error/mismatch/big_bad2.csv\n+3000\t0\t\"num\"\tC\tCould not convert string 'C' to 'INTEGER'\ttest/sql/copy/csv/data/error/mismatch/big_bad2.csv\n+\n+statement ok\n+DROP TABLE csv_rejects_table;\n+\n+# Test with multiple big files\n+query I\n+SELECT SUM(num) FROM read_csv(\n+    'test/sql/copy/csv/data/error/mismatch/big_*.csv', \n+    columns = {'num': 'INTEGER', 'str': 'VARCHAR'},\n+    rejects_table='csv_rejects_table',\n+    ignore_errors=true, parallel=${PARALLEL});\n+----\n+8188\n+\n+query  IIIIII rowsort\n+SELECT \"line\", \"column\", \"column_name\", \"parsed_value\", \"error\", regexp_replace(\"file\", '\\\\', '/', 'g') \n+FROM csv_rejects_table;\n+----\n+1000\t0\t\"num\"\tB\tCould not convert string 'B' to 'INTEGER'\ttest/sql/copy/csv/data/error/mismatch/big_bad2.csv\n+2000\t0\t\"num\"\tB\tCould not convert string 'B' to 'INTEGER'\ttest/sql/copy/csv/data/error/mismatch/big_bad.csv\n+3000\t0\t\"num\"\tC\tCould not convert string 'C' to 'INTEGER'\ttest/sql/copy/csv/data/error/mismatch/big_bad2.csv\n+4000\t0\t\"num\"\tC\tCould not convert string 'C' to 'INTEGER'\ttest/sql/copy/csv/data/error/mismatch/big_bad.csv\n+\n+statement ok\n+DROP TABLE csv_rejects_table;\n+\n+# Test with multiple rejects table in the same query\n+query IIII rowsort\n+SELECT * \n+FROM read_csv(\n+    'test/sql/copy/csv/data/error/mismatch/small1.csv', \n+    header = true,\n+    columns = {'num': 'INTEGER', 'str': 'VARCHAR'},\n+    rejects_table='csv_rejects_table_left',\n+    ignore_errors=true,\n+\tparallel=${PARALLEL}) as L\n+JOIN read_csv(\n+    'test/sql/copy/csv/data/error/mismatch/small2.csv',\n+    header = true,\n+    columns = {'num': 'INTEGER', 'str': 'VARCHAR'},\n+    rejects_table='csv_rejects_table_right',\n+    ignore_errors=true,\n+\tparallel=${PARALLEL}) as R\n+ON L.num = R.num;\n+----\n+1\tA\t1\tA\n+3\tC\t3\tC\n+\n+query IIIIII rowsort\n+SELECT \"line\", \"column\", \"column_name\", \"parsed_value\", \"error\", regexp_replace(\"file\", '\\\\', '/', 'g') \n+FROM csv_rejects_table_left;\n+----\n+3\t0\t\"num\"\tX\tCould not convert string 'X' to 'INTEGER'\ttest/sql/copy/csv/data/error/mismatch/small1.csv\n+6\t0\t\"num\"\tX\tCould not convert string 'X' to 'INTEGER'\ttest/sql/copy/csv/data/error/mismatch/small1.csv\n+\n+query IIIIII rowsort\n+SELECT \"line\", \"column\", \"column_name\", \"parsed_value\", \"error\", regexp_replace(\"file\", '\\\\', '/', 'g') \n+FROM csv_rejects_table_right;\n+----\n+3\t0\t\"num\"\tX\tCould not convert string 'X' to 'INTEGER'\ttest/sql/copy/csv/data/error/mismatch/small2.csv\n+5\t0\t\"num\"\tX\tCould not convert string 'X' to 'INTEGER'\ttest/sql/copy/csv/data/error/mismatch/small2.csv\n+\n+statement ok\n+DROP TABLE csv_rejects_table_left;\n+\n+statement ok\n+DROP TABLE csv_rejects_table_right;\n+\n+# Test with multiple rejects table in the same query, with different limits\n+# (only one reject should be logged in right table)\n+query IIII rowsort\n+SELECT * \n+FROM read_csv(\n+    'test/sql/copy/csv/data/error/mismatch/small1.csv', \n+    header = true,\n+    columns = {'num': 'INTEGER', 'str': 'VARCHAR'},\n+    rejects_table='csv_rejects_table_left',\n+    ignore_errors=true,\n+\tparallel=${PARALLEL}) as L\n+JOIN read_csv(\n+    'test/sql/copy/csv/data/error/mismatch/small2.csv',\n+    header = true,\n+    columns = {'num': 'INTEGER', 'str': 'VARCHAR'},\n+    rejects_table='csv_rejects_table_right',\n+\trejects_limit=1,\n+    ignore_errors=true,\n+\tparallel=${PARALLEL}) as R\n+ON L.num = R.num;\n+----\n+1\tA\t1\tA\n+3\tC\t3\tC\n+\n+\n+query IIIIII rowsort\n+SELECT \"line\", \"column\", \"column_name\", \"parsed_value\", \"error\", regexp_replace(\"file\", '\\\\', '/', 'g') \n+FROM csv_rejects_table_left;\n+----\n+3\t0\t\"num\"\tX\tCould not convert string 'X' to 'INTEGER'\ttest/sql/copy/csv/data/error/mismatch/small1.csv\n+6\t0\t\"num\"\tX\tCould not convert string 'X' to 'INTEGER'\ttest/sql/copy/csv/data/error/mismatch/small1.csv\n+\n+query I\n+SELECT COUNT(*) \n+FROM csv_rejects_table_right;\n+----\n+1\n+\n+statement ok\n+DROP TABLE csv_rejects_table_left;\n+\n+statement ok\n+DROP TABLE csv_rejects_table_right;\n+\n+endloop\n\\ No newline at end of file\ndiff --git a/test/sql/copy/csv/rejects/csv_rejects_recovery.test b/test/sql/copy/csv/rejects/csv_rejects_recovery.test\nnew file mode 100644\nindex 000000000000..a53fbb42a8c2\n--- /dev/null\n+++ b/test/sql/copy/csv/rejects/csv_rejects_recovery.test\n@@ -0,0 +1,87 @@\n+# name: test/sql/copy/csv/rejects/csv_rejects_recovery.test\n+# group: [rejects]\n+\n+require skip_reload\n+\n+# Test invalid arguments\n+\n+# Should not work without rejects_table\n+statement error\n+SELECT SUM(COL1) + SUM(COL3) FROM read_csv(\n+    'test/sql/copy/csv/data/error/mismatch/part*.csv',\n+    ignore_errors=true,\n+    header=true,\n+    columns = {COL3 :'INTEGER', COL1: 'INTEGER', COL2: 'VARCHAR'},\n+    rejects_recovery_columns=['COL2']\n+);\n+----\n+only supported when REJECTS_TABLE is set to a table name\n+\n+# Should not work without rejects_recovery_columns as list\n+statement error\n+SELECT SUM(COL1) + SUM(COL3) FROM read_csv(\n+    'test/sql/copy/csv/data/error/mismatch/part*.csv',\n+    header=true,\n+    columns = {COL3 :'INTEGER', COL1: 'INTEGER', COL2: 'VARCHAR'},\n+    rejects_table='csv_rejects_table',\n+    rejects_recovery_columns=['NON_EXISTING_COLUMN'],\n+    ignore_errors=true\n+);\n+----\n+REJECTS_RECOVERY_COLUMNS: column \"NON_EXISTING_COLUMN\" not found\n+\n+foreach PARALLEL true false\n+\n+# Basic test\n+query IIII rowsort\n+SELECT * FROM read_csv(\n+    'test/sql/copy/csv/data/error/mismatch/example.tsv', \n+    sep='\\t',\n+    columns = {'name': 'VARCHAR', 'age': 'INTEGER', 'id': 'INTEGER', 'count': 'INTEGER'}, \n+    rejects_table='csv_rejects_table',\n+    rejects_recovery_columns=['name', 'age'],\n+    ignore_errors=true,\n+    parallel=${PARALLEL}\n+);\n+----\n+alice\t10\t1\t20\n+charlie\t7\t3\t30\n+\n+query IIIIIII rowsort\n+SELECT \"line\", \"column\", \"column_name\", \"parsed_value\", \"recovery_columns\", \"error\", regexp_replace(\"file\", '\\\\', '/', 'g') \n+FROM csv_rejects_table;\n+----\n+2\t3\t\"count\"\tNOT_A_NUMBER\t{'name': bobby, 'age': 12}\tCould not convert string 'NOT_A_NUMBER' to 'INTEGER'\ttest/sql/copy/csv/data/error/mismatch/example.tsv\n+\n+statement ok\n+DROP TABLE csv_rejects_table;\n+\n+# We should not prune columns that are part of the rejects_recovery_columns\n+query I\n+SELECT SUM(COL1) FROM read_csv(\n+    'test/sql/copy/csv/data/error/mismatch/part*.csv',\n+    columns = {COL1: 'INTEGER', COL2: 'VARCHAR'},\n+    header=true,\n+    rejects_table='csv_rejects_table',\n+    rejects_recovery_columns=['COL2'],\n+    ignore_errors=true,\n+    parallel=${PARALLEL}\n+);\n+----\n+12282\n+\n+query IIIIIII rowsort\n+SELECT \"line\", \"column\", \"column_name\", \"parsed_value\", \"recovery_columns\", \"error\", regexp_replace(\"file\", '\\\\', '/', 'g') \n+FROM csv_rejects_table;\n+----\n+1001\t0\t\"COL1\"\tB\t{'COL2': BAD2B}\tCould not convert string 'B' to 'INTEGER'\ttest/sql/copy/csv/data/error/mismatch/part2.csv\n+2001\t0\t\"COL1\"\tB\t{'COL2': BAD1B}\tCould not convert string 'B' to 'INTEGER'\ttest/sql/copy/csv/data/error/mismatch/part1.csv\n+2001\t0\t\"COL1\"\tB\t{'COL2': BAD1B}\tCould not convert string 'B' to 'INTEGER'\ttest/sql/copy/csv/data/error/mismatch/part3.csv\n+3001\t0\t\"COL1\"\tC\t{'COL2': BAD2C}\tCould not convert string 'C' to 'INTEGER'\ttest/sql/copy/csv/data/error/mismatch/part2.csv\n+4001\t0\t\"COL1\"\tC\t{'COL2': BAD1C}\tCould not convert string 'C' to 'INTEGER'\ttest/sql/copy/csv/data/error/mismatch/part1.csv\n+4001\t0\t\"COL1\"\tC\t{'COL2': BAD1C}\tCould not convert string 'C' to 'INTEGER'\ttest/sql/copy/csv/data/error/mismatch/part3.csv\n+\n+statement ok\n+DROP TABLE csv_rejects_table;\n+\n+endloop\n\\ No newline at end of file\ndiff --git a/test/sql/copy/parquet/batched_write/parquet_write_memory_limit.test_slow b/test/sql/copy/parquet/batched_write/parquet_write_memory_limit.test_slow\nindex 421e0343983b..9ce054832479 100644\n--- a/test/sql/copy/parquet/batched_write/parquet_write_memory_limit.test_slow\n+++ b/test/sql/copy/parquet/batched_write/parquet_write_memory_limit.test_slow\n@@ -10,9 +10,13 @@ require 64bit\n statement ok\n COPY (SELECT i, i // 5 AS j FROM range(100000000) t(i)) TO '__TEST_DIR__/large_integers.parquet'\n \n-# set a memory limit of 300MB\n+# set threads to 4 and a memory limit of 900MB. the limit in this test used to be 300MB,\n+# but we weren't using the BufferAllocator for the ColumnDataCollection buffers in ParquetWriteLocalState\n statement ok\n-SET memory_limit='300MB'\n+SET threads=4\n+\n+statement ok\n+SET memory_limit='900MB'\n \n # stream from one parquet file to another\n query I\ndiff --git a/test/sql/copy/parquet/writer/list_of_bools.test_coverage b/test/sql/copy/parquet/writer/list_of_bools.test_slow\nsimilarity index 96%\nrename from test/sql/copy/parquet/writer/list_of_bools.test_coverage\nrename to test/sql/copy/parquet/writer/list_of_bools.test_slow\nindex d404068f6cfc..1ea086d34b0a 100644\n--- a/test/sql/copy/parquet/writer/list_of_bools.test_coverage\n+++ b/test/sql/copy/parquet/writer/list_of_bools.test_slow\n@@ -1,4 +1,4 @@\n-# name: test/sql/copy/parquet/writer/list_of_bools.test_coverage\n+# name: test/sql/copy/parquet/writer/list_of_bools.test_slow\n # description: Parquet write list of bools\n # group: [writer]\n \ndiff --git a/test/sql/copy/parquet/writer/parquet_large_blobs.test_coverage b/test/sql/copy/parquet/writer/parquet_large_blobs.test_slow\nsimilarity index 89%\nrename from test/sql/copy/parquet/writer/parquet_large_blobs.test_coverage\nrename to test/sql/copy/parquet/writer/parquet_large_blobs.test_slow\nindex d9a76df1433d..ecafb1664856 100644\n--- a/test/sql/copy/parquet/writer/parquet_large_blobs.test_coverage\n+++ b/test/sql/copy/parquet/writer/parquet_large_blobs.test_slow\n@@ -1,4 +1,4 @@\n-# name: test/sql/copy/parquet/writer/parquet_large_blobs.test_coverage\n+# name: test/sql/copy/parquet/writer/parquet_large_blobs.test_slow\n # description: Test writing of large blobs into parquet files\n # group: [writer]\n \ndiff --git a/test/sql/copy/parquet/writer/parquet_write_field_id.test b/test/sql/copy/parquet/writer/parquet_write_field_id.test\nnew file mode 100644\nindex 000000000000..c21ad661a088\n--- /dev/null\n+++ b/test/sql/copy/parquet/writer/parquet_write_field_id.test\n@@ -0,0 +1,374 @@\n+# name: test/sql/copy/parquet/writer/parquet_write_field_id.test\n+# description: Parquet writer FIELD_IDS tests\n+# group: [writer]\n+\n+require parquet\n+\n+# need to supply an argument\n+statement error\n+copy (select range as i from range(10)) to '__TEST_DIR__/my.parquet' (FIELD_IDS)\n+----\n+Binder Error\n+\n+# j is not present so we can't have a field id\n+statement error\n+copy (select range as i from range(10)) to '__TEST_DIR__/my.parquet' (FIELD_IDS {j:42})\n+----\n+Binder Error\n+\n+# we can't do functions here\n+statement error\n+copy (select range as i from range(10)) to '__TEST_DIR__/my.parquet' (FIELD_IDS {i:42-1})\n+----\n+Parser Error\n+\n+# this should work\n+statement ok\n+copy (select range as i from range(10)) to '__TEST_DIR__/my.parquet' (FIELD_IDS {i:42})\n+\n+query I\n+select field_id from parquet_schema('__TEST_DIR__/my.parquet') where name = 'i'\n+----\n+42\n+\n+# needs to be castable to integer, so this works\n+statement ok\n+copy (select range as i from range(10)) to '__TEST_DIR__/my.parquet' (FIELD_IDS {i:'42'})\n+\n+query I\n+select field_id from parquet_schema('__TEST_DIR__/my.parquet') where name = 'i'\n+----\n+42\n+\n+# but this doesn't\n+statement error\n+copy (select range as i from range(10)) to '__TEST_DIR__/my.parquet' (FIELD_IDS {i:'abc'})\n+----\n+Invalid Input Error\n+\n+# we can do casts\n+statement ok\n+copy (select range as i from range(10)) to '__TEST_DIR__/my.parquet' (FIELD_IDS {i:42::hugeint})\n+\n+query I\n+select field_id from parquet_schema('__TEST_DIR__/my.parquet') where name = 'i'\n+----\n+42\n+\n+# wrong casts should lead to ConversionException\n+statement error\n+copy (select range as i from range(10)) to '__TEST_DIR__/my.parquet' (FIELD_IDS {i:1024::utinyint})\n+----\n+Conversion Error\n+\n+# we can't do functions inside of casts (this one is just for coverage)\n+statement error\n+copy (select range as i from range(10)) to '__TEST_DIR__/my.parquet' (FIELD_IDS {i:cast(42-1 as hugeint)})\n+----\n+Parser Error\n+\n+# field id can't be a colref\n+statement error\n+copy (select range as i from range(10)) to '__TEST_DIR__/my.parquet' (FIELD_IDS {i:i})\n+----\n+Parser Error\n+\n+# this shouldn't work\n+statement error\n+copy (select range as i from range(10)) to '__TEST_DIR__/my.parquet' (FIELD_IDS 'oops')\n+----\n+Binder Error\n+\n+# can't have duplicate field id keys\n+statement error\n+copy (select range as i, range as j from range(10)) to '__TEST_DIR__/my.parquet' (FIELD_IDS {i:42,i:43})\n+----\n+Binder Error\n+\n+# can't have duplicate field id values either\n+statement error\n+copy (select range as i, range as j from range(10)) to '__TEST_DIR__/my.parquet' (FIELD_IDS {i:42,j:42})\n+----\n+Binder Error\n+\n+# we don't have to supply a field_id for all columns\n+statement ok\n+copy (select range as i, range as j from range(10)) to '__TEST_DIR__/my.parquet' (FIELD_IDS {i:42})\n+\n+query I\n+select field_id from parquet_schema('__TEST_DIR__/my.parquet') where name = 'i'\n+----\n+42\n+\n+query I\n+select field_id from parquet_schema('__TEST_DIR__/my.parquet') where name = 'j'\n+----\n+NULL\n+\n+# but we can\n+statement ok\n+copy (select range as i, range as j from range(10)) to '__TEST_DIR__/my.parquet' (FIELD_IDS {i:42,j:43})\n+\n+query I\n+select field_id from parquet_schema('__TEST_DIR__/my.parquet') where name = 'i'\n+----\n+42\n+\n+query I\n+select field_id from parquet_schema('__TEST_DIR__/my.parquet') where name = 'j'\n+----\n+43\n+\n+# we can also specify the col like this\n+statement ok\n+copy (select range as i, range as j from range(10)) to '__TEST_DIR__/my.parquet' (FIELD_IDS {i:{__duckdb_field_id:42},j:{__duckdb_field_id:43}})\n+\n+query I\n+select field_id from parquet_schema('__TEST_DIR__/my.parquet') where name = 'i'\n+----\n+42\n+\n+query I\n+select field_id from parquet_schema('__TEST_DIR__/my.parquet') where name = 'j'\n+----\n+43\n+\n+# i is not a nested type, so we can't specify nested field ids\n+statement error\n+copy (select range as i, range as j from range(10)) to '__TEST_DIR__/my.parquet' (FIELD_IDS {i:{__duckdb_field_id:42,j:43}})\n+----\n+Binder Error\n+\n+# we tested a non-nested column type, now do all the nested types so we test all the code paths\n+\n+# list\n+statement ok\n+copy (select range(range, range + 3) as i from range(10)) to '__TEST_DIR__/my.parquet' (FIELD_IDS {i:{__duckdb_field_id:42,element:43}})\n+\n+query I\n+select field_id from parquet_schema('__TEST_DIR__/my.parquet') where name = 'i'\n+----\n+42\n+\n+query I\n+select field_id from parquet_schema('__TEST_DIR__/my.parquet') where name = 'element'\n+----\n+43\n+\n+# we don't have to specify a field_id for the top-level list, we can also just specify for the nested children\n+statement ok\n+copy (select range(range, range + 3) as i from range(10)) to '__TEST_DIR__/my.parquet' (FIELD_IDS {i:{element:43}})\n+\n+query I\n+select field_id from parquet_schema('__TEST_DIR__/my.parquet') where name = 'i'\n+----\n+NULL\n+\n+query I\n+select field_id from parquet_schema('__TEST_DIR__/my.parquet') where name = 'element'\n+----\n+43\n+\n+# list child is always called \"element\"\n+statement error\n+copy (select range(range, range + 3) as i from range(10)) to '__TEST_DIR__/my.parquet' (FIELD_IDS {i:{__duckdb_field_id:42,elem:43}})\n+----\n+Binder Error: Column name \"elem\" specified in FIELD_IDS not found. Available column names: [element]\n+\n+# struct\n+statement ok\n+copy (select {f : range} as i from range(10)) to '__TEST_DIR__/my.parquet' (FIELD_IDS {i:{__duckdb_field_id:42,f:43}})\n+\n+query I\n+select field_id from parquet_schema('__TEST_DIR__/my.parquet') where name = 'i' and num_children > 0\n+----\n+42\n+\n+query I\n+select field_id from parquet_schema('__TEST_DIR__/my.parquet') where name = 'f'\n+----\n+43\n+\n+# struct does not have child \"g\"\n+statement error\n+copy (select {f : range} as i from range(10)) to '__TEST_DIR__/my.parquet' (FIELD_IDS {i:{__duckdb_field_id:42,g:43}})\n+----\n+Binder Error: Column name \"g\" specified in FIELD_IDS not found. Available column names: [f]\n+\n+# map\n+statement ok\n+copy (select map {range : 10 - range} as i from range(10)) to '__TEST_DIR__/my.parquet' (FIELD_IDS {i:{__duckdb_field_id:42,key:43,value:44}})\n+\n+query I\n+select field_id from parquet_schema('__TEST_DIR__/my.parquet') where name = 'i' and num_children > 0\n+----\n+42\n+\n+query I\n+select field_id from parquet_schema('__TEST_DIR__/my.parquet') where name = 'key'\n+----\n+43\n+\n+query I\n+select field_id from parquet_schema('__TEST_DIR__/my.parquet') where name = 'value'\n+----\n+44\n+\n+# map type children need to be called \"key\" and \"value\"\n+statement error\n+copy (select map {range : 10 - range} as i from range(10)) to '__TEST_DIR__/my.parquet' (FIELD_IDS {i:{__duckdb_field_id:42,k:43,v:44}})\n+----\n+Binder Error: Column name \"k\" specified in FIELD_IDS not found.\n+\n+# test auto-generation (flat)\n+statement ok\n+copy (select range as i, range as j from range(10)) to '__TEST_DIR__/my.parquet' (FIELD_IDS 'auto')\n+\n+query I\n+select field_id from parquet_schema('__TEST_DIR__/my.parquet') where name = 'i'\n+----\n+0\n+\n+query I\n+select field_id from parquet_schema('__TEST_DIR__/my.parquet') where name = 'j'\n+----\n+1\n+\n+# big nestedness\n+statement ok\n+copy (select map {'my_key' : [{j : 42}]} as i) to '__TEST_DIR__/my.parquet' (FIELD_IDS {i:{__duckdb_field_id:42,key:43,value:{__duckdb_field_id:44,element:{__duckdb_field_id:45,j:46}}}})\n+\n+query II\n+select name, field_id from parquet_schema('__TEST_DIR__/my.parquet') where name in ('i', 'key', 'value', 'element', 'j') order by field_id\n+----\n+i\t42\n+key\t43\n+value\t44\n+element\t45\n+j\t46\n+\n+# we can't specify \"f\" in the first level struct\n+statement error\n+copy (select {f : range} as i from range(10)) to '__TEST_DIR__/my.parquet' (FIELD_IDS {i:{__duckdb_field_id:42}, f:43})\n+----\n+Binder Error\n+\n+# needs to be called exactly \"__duckdb_field_id\"\n+statement error\n+copy (select {f : range} as i from range(10)) to '__TEST_DIR__/my.parquet' (FIELD_IDS {i:{field_id:42, f:43}})\n+----\n+Binder Error\n+\n+# test auto-generation (list)\n+statement ok\n+copy (select range(range, range + 3) as i from range(10)) to '__TEST_DIR__/my.parquet' (FIELD_IDS 'auto')\n+\n+query I\n+select field_id from parquet_schema('__TEST_DIR__/my.parquet') where name = 'i'\n+----\n+0\n+\n+query I\n+select field_id from parquet_schema('__TEST_DIR__/my.parquet') where name = 'element'\n+----\n+1\n+\n+# test auto-generation (struct)\n+statement ok\n+copy (select {f : range} as i from range(10)) to '__TEST_DIR__/my.parquet' (FIELD_IDS 'auto')\n+\n+query I\n+select field_id from parquet_schema('__TEST_DIR__/my.parquet') where name = 'i' and num_children > 0\n+----\n+0\n+\n+query I\n+select field_id from parquet_schema('__TEST_DIR__/my.parquet') where name = 'f'\n+----\n+1\n+\n+# test auto-generation (map)\n+statement ok\n+copy (select map {range : 10 - range} as i from range(10)) to '__TEST_DIR__/my.parquet' (FIELD_IDS 'auto')\n+\n+query I\n+select field_id from parquet_schema('__TEST_DIR__/my.parquet') where name = 'i' and num_children > 0\n+----\n+0\n+\n+query I\n+select field_id from parquet_schema('__TEST_DIR__/my.parquet') where name = 'key'\n+----\n+1\n+\n+query I\n+select field_id from parquet_schema('__TEST_DIR__/my.parquet') where name = 'value'\n+----\n+2\n+\n+# test auto-generation (big nestedness)\n+statement ok\n+copy (select map {'my_key' : [{j : 42}]} as i) to '__TEST_DIR__/my.parquet' (FIELD_IDS 'auto')\n+\n+query II\n+select name, field_id from parquet_schema('__TEST_DIR__/my.parquet') where name in ('i', 'key', 'value', 'element', 'j') order by field_id\n+----\n+i\t0\n+key\t1\n+value\t2\n+element\t3\n+j\t4\n+\n+# cannot have a column named \"__duckdb_field_id\"\n+statement error\n+copy (select range as __duckdb_field_id from range(10)) to '__TEST_DIR__/my.parquet' (FIELD_IDS {__duckdb_field_id : 42})\n+----\n+Binder Error\n+\n+statement error\n+copy (select {__duckdb_field_id : range} as __duckdb_field_id from range(10)) to '__TEST_DIR__/my.parquet' (FIELD_IDS {__duckdb_field_id : {__duckdb_field_id : 42}})\n+----\n+Binder Error\n+\n+# we should be case insensitive here (it's just DuckDB col names / struct col names)\n+statement ok\n+copy (select range as i from range(10)) to '__TEST_DIR__/my.parquet' (FIELD_IDS {\"I\" : 42})\n+\n+query I\n+select field_id from parquet_schema('__TEST_DIR__/my.parquet') where name = 'i'\n+----\n+42\n+\n+statement ok\n+copy (select range as \"I\" from range(10)) to '__TEST_DIR__/my.parquet' (FIELD_IDS {i : 42})\n+\n+query I\n+select field_id from parquet_schema('__TEST_DIR__/my.parquet') where name = 'I'\n+----\n+42\n+\n+statement ok\n+copy (select {f : range} as i from range(10)) to '__TEST_DIR__/my.parquet' (FIELD_IDS {\"I\" : {__duckdb_field_id: 42, \"F\": 43}})\n+\n+query I\n+select field_id from parquet_schema('__TEST_DIR__/my.parquet') where name = 'i' and num_children > 0\n+----\n+42\n+\n+query I\n+select field_id from parquet_schema('__TEST_DIR__/my.parquet') where name = 'f'\n+----\n+43\n+\n+statement ok\n+copy (select {\"F\" : range} as \"I\" from range(10)) to '__TEST_DIR__/my.parquet' (FIELD_IDS {i : {__duckdb_field_id: 42, f: 43}})\n+\n+query I\n+select field_id from parquet_schema('__TEST_DIR__/my.parquet') where name = 'I' and num_children > 0\n+----\n+42\n+\n+query I\n+select field_id from parquet_schema('__TEST_DIR__/my.parquet') where name = 'F'\n+----\n+43\ndiff --git a/test/sql/copy/parquet/writer/parquet_write_memory_usage.test b/test/sql/copy/parquet/writer/parquet_write_memory_usage.test\nnew file mode 100644\nindex 000000000000..29a19bfe4609\n--- /dev/null\n+++ b/test/sql/copy/parquet/writer/parquet_write_memory_usage.test\n@@ -0,0 +1,28 @@\n+# name: test/sql/copy/parquet/writer/parquet_write_memory_usage.test\n+# description: Parquet writer memory usage\n+# group: [writer]\n+\n+require parquet\n+\n+load __TEST_DIR__/parquet_write_memory_usage.db\n+\n+statement ok\n+set threads=1\n+\n+foreach memory_limit,row_group_size 0.3mb,20480 0.6mb,40960\n+\n+statement ok\n+set memory_limit='${memory_limit}'\n+\n+statement ok\n+copy (select * from range(163840)) to '__TEST_DIR__/parquet_write_memory_usage.parquet' (row_group_size ${row_group_size})\n+\n+statement ok\n+set memory_limit='4gb'\n+\n+query T\n+select sum(range) = (count(*) * (count(*) - 1)) // 2 from '__TEST_DIR__/parquet_write_memory_usage.parquet'\n+----\n+true\n+\n+endloop\ndiff --git a/test/sql/copy/parquet/writer/write_stats_min_max.test_coverage b/test/sql/copy/parquet/writer/write_stats_min_max.test_slow\nsimilarity index 98%\nrename from test/sql/copy/parquet/writer/write_stats_min_max.test_coverage\nrename to test/sql/copy/parquet/writer/write_stats_min_max.test_slow\nindex 7bd0953b1fa7..2259612b3d60 100644\n--- a/test/sql/copy/parquet/writer/write_stats_min_max.test_coverage\n+++ b/test/sql/copy/parquet/writer/write_stats_min_max.test_slow\n@@ -1,4 +1,4 @@\n-# name: test/sql/copy/parquet/writer/write_stats_min_max.test_coverage\n+# name: test/sql/copy/parquet/writer/write_stats_min_max.test_slow\n # description: Write min/max stats to Parquet files\n # group: [writer]\n \ndiff --git a/test/sql/cte/materialized/dml_materialized_cte.test b/test/sql/cte/materialized/dml_materialized_cte.test\nnew file mode 100644\nindex 000000000000..eb858ddc93a0\n--- /dev/null\n+++ b/test/sql/cte/materialized/dml_materialized_cte.test\n@@ -0,0 +1,26 @@\n+# name: test/sql/cte/materialized/dml_materialized_cte.test\n+# description: Test DML statements with materialized Common Table Expressions (CTE)\n+# group: [materialized]\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+require noalternativeverify\n+\n+statement ok\n+create table a(i integer);\n+\n+statement ok\n+insert into a values (42);\n+\n+statement error\n+WITH t(x) AS MATERIALIZED (VALUES (42))\n+INSERT INTO a (SELECT * FROM t);\n+\n+statement error\n+WITH t(x) AS MATERIALIZED (VALUES (42))\n+DELETE FROM a WHERE a.i IN (SELECT * FROM t);\n+\n+statement error\n+WITH t(x) AS MATERIALIZED (VALUES (42))\n+UPDATE a SET i = 0 WHERE a.i IN (SELECT * FROM t);\ndiff --git a/test/sql/cte/materialized/game_of_life_materialized.test_slow b/test/sql/cte/materialized/game_of_life_materialized.test_slow\nnew file mode 100644\nindex 000000000000..76c5cbe4fe00\n--- /dev/null\n+++ b/test/sql/cte/materialized/game_of_life_materialized.test_slow\n@@ -0,0 +1,65 @@\n+# name: test/sql/cte/materialized/game_of_life_materialized.test_slow\n+# description: Run conways game of life as a CTE (https://gist.github.com/janickr/58fab629ee3ea7e5638a)\n+# group: [materialized]\n+\n+statement ok\n+create table series as select * from generate_series(-1,1) x(n);\n+\n+# conway\n+query III\n+with recursive generation1(x,y) as materialized (   --the initial board setup\n+  select 2, 3\n+  union\n+  select 3, 3\n+  union\n+  select 4, 3\n+),\n+game(n, x, y) as materialized (\n+  select 1 AS n, x, y from generation1 -- generation 1 is initial board setup\n+  union all\n+  select n+1, new_x, new_y from   -- generation n+1\n+  (\n+    select n, x+offset_x new_x, y+offset_y new_y, max(self) over (partition by n+1, x+offset_x, y+offset_y) cell_was_already_alive\n+    from game, (\n+        select x.n offset_x, y.n offset_y, case when x.n = 0 and y.n = 0 then 1 else 0 end self\n+        from series x(n), series y(n) --join 2 row generators to get 9 pairs\n+      ) offsets_to_neighbours_and_self(offset_x, offset_y, self)\n+    where n < 100\n+  ) all_impacts\n+  group by n+1, new_x, new_y, cell_was_already_alive -- from all impacts back to cells\n+  having (cell_was_already_alive=1 and count(*) < 5 and count(*) > 2) or count(*) = 3 --decide if cell is alive\n+)\n+select * from game where n=4 order by n, x, y; --select generation 4\n+----\n+4\t3\t2\n+4\t3\t3\n+4\t3\t4\n+\n+query III\n+with recursive generation1(x,y) as materialized (   --the initial board setup\n+  select 2, 3\n+  union\n+  select 3, 3\n+  union\n+  select 4, 3\n+),\n+game(n, x, y) as materialized (\n+  select 1 AS n, x, y from generation1 -- generation 1 is initial board setup\n+  union all\n+  select n+1, new_x, new_y from   -- generation n+1\n+  (\n+    select n, x+offset_x new_x, y+offset_y new_y, max(self) over (partition by n+1, x+offset_x, y+offset_y) cell_was_already_alive\n+    from game, (\n+        select x.n offset_x, y.n offset_y, case when x.n = 0 and y.n = 0 then 1 else 0 end self\n+        from generate_series(-1,1) x(n), generate_series(-1,1) y(n) --join 2 row generators to get 9 pairs\n+      ) offsets_to_neighbours_and_self(offset_x, offset_y, self)\n+    where n < 100\n+  ) all_impacts\n+  group by n+1, new_x, new_y, cell_was_already_alive -- from all impacts back to cells\n+  having (cell_was_already_alive=1 and count(*) < 5 and count(*) > 2) or count(*) = 3 --decide if cell is alive\n+)\n+select * from game where n=4 order by n, x, y; --select generation 4\n+----\n+4\t3\t2\n+4\t3\t3\n+4\t3\t4\ndiff --git a/test/sql/cte/materialized/incorrect_recursive_cte_materialized.test b/test/sql/cte/materialized/incorrect_recursive_cte_materialized.test\nnew file mode 100644\nindex 000000000000..fae2f54fdb6b\n--- /dev/null\n+++ b/test/sql/cte/materialized/incorrect_recursive_cte_materialized.test\n@@ -0,0 +1,16 @@\n+# name: test/sql/cte/materialized/incorrect_recursive_cte_materialized.test\n+# description: Incorrect recursive ctes\n+# group: [materialized]\n+\n+# recursive CTE without UNION is just a normal CTE\n+query I\n+WITH RECURSIVE cte AS MATERIALIZED (SELECT 42) SELECT * FROM cte;\n+----\n+42\n+\n+# we only support recursive ctes with union or union all\n+statement error\n+with recursive t as MATERIALIZED (select 1 as x intersect select x+1 from t where x < 3) select * from t order by x\n+\n+statement error\n+with recursive t as MATERIALIZED (select 1 as x except select x+1 from t where x < 3) select * from t order by x\ndiff --git a/test/sql/cte/materialized/recursive_array_slice_materialized.test b/test/sql/cte/materialized/recursive_array_slice_materialized.test\nnew file mode 100644\nindex 000000000000..104339a551ac\n--- /dev/null\n+++ b/test/sql/cte/materialized/recursive_array_slice_materialized.test\n@@ -0,0 +1,76 @@\n+# name: test/sql/cte/materialized/recursive_array_slice_materialized.test\n+# description: Issue #3005: array_slice prevents row values to be used more than once\n+# group: [materialized]\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+statement ok\n+CREATE TABLE p(loc int8);\n+\n+statement ok\n+INSERT INTO p VALUES (1);\n+\n+query II\n+WITH RECURSIVE t(y, arr) AS MATERIALIZED\n+(\n+  SELECT 1, array[1,2,3,4,5,6]\n+    UNION ALL\n+  SELECT y+1, arr[:loc]\n+  FROM   t, p\n+  WHERE y < 10\n+) SELECT * FROM t;\n+----\n+1\t[1, 2, 3, 4, 5, 6]\n+2\t[1]\n+3\t[1]\n+4\t[1]\n+5\t[1]\n+6\t[1]\n+7\t[1]\n+8\t[1]\n+9\t[1]\n+10\t[1]\n+\n+query II\n+WITH RECURSIVE t(y, arr) AS MATERIALIZED\n+(\n+  SELECT 1, array[1,2,3,4,5,6]\n+    UNION ALL\n+  SELECT y+1, arr\n+  FROM   t, p\n+  WHERE y < 10\n+    AND y = loc\n+) SELECT * FROM t;\n+----\n+1\t[1, 2, 3, 4, 5, 6]\n+2\t[1, 2, 3, 4, 5, 6]\n+\n+query II\n+WITH RECURSIVE t(y, arr) AS MATERIALIZED\n+(\n+  SELECT 1, array[1,2,3,4,5,6]\n+    UNION ALL\n+  SELECT y+1, arr[:loc]\n+  FROM   t, p\n+  WHERE y < 10\n+    AND y = loc\n+) SELECT * FROM t;\n+----\n+1\t[1, 2, 3, 4, 5, 6]\n+2\t[1]\n+\n+query I\n+WITH RECURSIVE t(arr) AS MATERIALIZED\n+(\n+  SELECT array[1,2,3,4,5,6]\n+    UNION ALL\n+  SELECT  arr[arr[1]+1:6]\n+  FROM   t\n+  WHERE arr[1] < 6\n+) SELECT * FROM t;\n+----\n+[1, 2, 3, 4, 5, 6]\n+[2, 3, 4, 5, 6]\n+[4, 5, 6]\n+[]\ndiff --git a/test/sql/cte/materialized/recursive_cte_complex_pipelines.test b/test/sql/cte/materialized/recursive_cte_complex_pipelines.test\nnew file mode 100644\nindex 000000000000..b1e5c1417639\n--- /dev/null\n+++ b/test/sql/cte/materialized/recursive_cte_complex_pipelines.test\n@@ -0,0 +1,133 @@\n+# name: test/sql/cte/materialized/recursive_cte_complex_pipelines.test\n+# description: Recursive CTEs with complex pipelines\n+# group: [materialized]\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+# recursive CTE with various cross products\n+query I\n+WITH RECURSIVE t AS MATERIALIZED\n+(\n+\tSELECT 1 AS x\n+UNION\n+\tSELECT t1.x + t2.x + t3.x AS x\n+\tFROM t t1, t t2, t t3\n+\tWHERE t1.x < 100\n+)\n+SELECT * FROM t ORDER BY 1;\n+----\n+1\n+3\n+9\n+27\n+81\n+243\n+\n+# what if we have different types?\n+query I\n+WITH RECURSIVE t AS MATERIALIZED\n+(\n+\tSELECT 1 AS x\n+UNION\n+\tSELECT (t1.x + t2.x + t3.x)::HUGEINT AS x\n+\tFROM t t1, t t2, t t3\n+\tWHERE t1.x < 100\n+)\n+SELECT * FROM t ORDER BY 1;\n+----\n+1\n+3\n+9\n+27\n+81\n+243\n+\n+statement ok\n+CREATE TABLE a AS SELECT * FROM range(100) t1(i)\n+\n+# recursive CTE with aggregates\n+query I\n+WITH RECURSIVE t AS MATERIALIZED\n+(\n+\tSELECT 1 AS x\n+UNION\n+\tSELECT SUM(x) AS x\n+\tFROM t, a\n+\tWHERE x < 1000000\n+)\n+SELECT * FROM t ORDER BY 1 NULLS LAST;\n+----\n+1\n+100\n+10000\n+1000000\n+NULL\n+\n+# the same but with a hash join\n+query I\n+WITH RECURSIVE t AS MATERIALIZED\n+(\n+\tSELECT 1 AS x\n+UNION\n+\tSELECT SUM(x) AS x\n+\tFROM t, a\n+\tWHERE x < 1000000 AND t.x=a.i\n+)\n+SELECT * FROM t ORDER BY 1 NULLS LAST;\n+----\n+1\n+\n+# nested aggregates\n+query I\n+WITH RECURSIVE t AS MATERIALIZED\n+(\n+\tSELECT 1 AS x\n+UNION\n+\tSELECT SUM(x)\n+\tFROM\n+\t\t(SELECT SUM(x) FROM t) t1(x), a\n+\tWHERE x < 1000\n+)\n+SELECT * FROM t ORDER BY 1 NULLS LAST;\n+----\n+1\n+100\n+10000\n+NULL\n+\n+# non-correlated subqueries\n+query I\n+WITH RECURSIVE t AS MATERIALIZED\n+(\n+\tSELECT 1 AS x\n+UNION\n+\tSELECT (SELECT x + 1 FROM t) AS x\n+\tFROM t\n+\tWHERE x < 5\n+)\n+SELECT * FROM t ORDER BY 1 NULLS LAST;\n+----\n+1\n+2\n+3\n+4\n+5\n+\n+# correlated subqueries\n+query I\n+WITH RECURSIVE t AS MATERIALIZED\n+(\n+\tSELECT 1 AS x\n+UNION\n+\tSELECT (SELECT t.x+t2.x FROM t t2 LIMIT 1) AS x\n+\tFROM t\n+\tWHERE x < 10\n+)\n+SELECT * FROM t ORDER BY 1 NULLS LAST;\n+----\n+1\n+2\n+4\n+8\n+16\ndiff --git a/test/sql/cte/materialized/recursive_cte_correlated_subquery_materialized.test_slow b/test/sql/cte/materialized/recursive_cte_correlated_subquery_materialized.test_slow\nnew file mode 100644\nindex 000000000000..b9a15409d367\n--- /dev/null\n+++ b/test/sql/cte/materialized/recursive_cte_correlated_subquery_materialized.test_slow\n@@ -0,0 +1,33 @@\n+# name: test/sql/cte/materialized/recursive_cte_correlated_subquery_materialized.test_slow\n+# description: Issue #2713: reports struct_extract error when run a sql\n+# group: [materialized]\n+\n+query I\n+WITH RECURSIVE\n+input(sud) AS MATERIALIZED (\n+VALUES('53..7....6..195....98....6.8...6...34..8.3..17...2...6.6....28....419..5....8..79')\n+),\n+digits(z, lp) AS MATERIALIZED (\n+SELECT CAST(lp+1 AS TEXT), lp::int+1 FROM generate_series(0,8,1) t(lp)\n+),\n+x(s, ind) AS MATERIALIZED (\n+SELECT sud, instr(sud, '.') FROM input\n+UNION ALL\n+SELECT\n+substr(s, 1, ind::int-1) || z || substr(s, ind::int+1),\n+instr(substr(s, 1, ind::int-1) || z || substr(s, ind::int+1), '.' )\n+FROM x, digits AS z\n+WHERE ind::int>0\n+AND NOT EXISTS (\n+SELECT 1\n+FROM digits AS lp\n+WHERE z.z = substr(s, ((ind::int-1)//9)*9 + lp, 1)\n+OR z.z = substr(s, ((ind::int-1)%9) + (lp-1)*9 + 1, 1)\n+OR z.z = substr(s, (((ind::int-1)//3) % 3) * 3\n++ ((ind::int-1)//27) * 27 + lp\n++ ((lp-1) // 3) * 6, 1)\n+)\n+)\n+SELECT s FROM x WHERE ind::int=0;\n+----\n+534678912672195348198342567859761423426853791713924856961537284287419635345286179\ndiff --git a/test/sql/cte/materialized/recursive_cte_error_materialized.test b/test/sql/cte/materialized/recursive_cte_error_materialized.test\nnew file mode 100644\nindex 000000000000..736a3759784f\n--- /dev/null\n+++ b/test/sql/cte/materialized/recursive_cte_error_materialized.test\n@@ -0,0 +1,30 @@\n+# name: test/sql/cte/materialized/recursive_cte_error_materialized.test\n+# description: Recursive CTEs with an error thrown in the pipelines\n+# group: [materialized]\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+statement ok\n+CREATE TABLE tag(id int, name string, subclassof int);\n+\n+statement ok\n+INSERT INTO tag VALUES\n+  (7, 'Music',  9),\n+  (8, 'Movies', 9),\n+  (9, 'Art',    NULL)\n+;\n+\n+statement error\n+WITH RECURSIVE tag_hierarchy(id, source, path, target) AS materialized (\n+  SELECT id, name, name AS path, NULL AS target -- this should be '' for correct behaviour\n+  FROM tag\n+  WHERE subclassof IS NULL\n+  UNION ALL\n+  SELECT tag.id, tag.name, tag_hierarchy.path || ' <- ' || tag.name, tag.name AS target\n+  FROM tag, tag_hierarchy\n+  WHERE tag.subclassof = tag_hierarchy.id\n+)\n+SELECT source, path, target\n+FROM tag_hierarchy\n+;\ndiff --git a/test/sql/cte/materialized/recursive_hang_2745_materialized.test b/test/sql/cte/materialized/recursive_hang_2745_materialized.test\nnew file mode 100644\nindex 000000000000..4d53c2f12362\n--- /dev/null\n+++ b/test/sql/cte/materialized/recursive_hang_2745_materialized.test\n@@ -0,0 +1,120 @@\n+# name: test/sql/cte/materialized/recursive_hang_2745_materialized.test\n+# description: Issue #2745: sql with RECURSIVE keyword but does not RECURSIVE hang\n+# group: [materialized]\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+query III\n+with RECURSIVE parents_tab (id , value , parent )\n+as MATERIALIZED (values (1, 1, 2), (2, 2, 4), (3, 1, 4), (4, 2, -1), (5, 1, 2), (6, 2, 7), (7, 1, -1)\n+),\n+parents_tab2(id , value , parent )\n+as MATERIALIZED (values (1, 1, 2), (2, 2, 4), (3, 1, 4), (4, 2, -1), (5, 1, 2), (6, 2, 7), (7, 1, -1)\n+),\n+parents as MATERIALIZED (\n+    select * from parents_tab\n+    union all\n+    select id, value+2, parent from parents_tab2\n+)\n+select * from parents;\n+----\n+1\t1\t2\n+2\t2\t4\n+3\t1\t4\n+4\t2\t-1\n+5\t1\t2\n+6\t2\t7\n+7\t1\t-1\n+1\t3\t2\n+2\t4\t4\n+3\t3\t4\n+4\t4\t-1\n+5\t3\t2\n+6\t4\t7\n+7\t3\t-1\n+\n+query III\n+with RECURSIVE parents_tab (id , value , parent )\n+as MATERIALIZED (values (1, 1, 2), (2, 2, 4), (3, 1, 4), (4, 2, -1), (5, 1, 2), (6, 2, 7), (7, 1, -1)\n+),\n+parents_tab2(id , value , parent )\n+as MATERIALIZED (values (1, 1, 2), (2, 2, 4), (3, 1, 4), (4, 2, -1), (5, 1, 2), (6, 2, 7), (7, 1, -1)\n+)\n+select * from parents_tab\n+union all\n+select id, value+2, parent from parents_tab2;\n+----\n+1\t1\t2\n+2\t2\t4\n+3\t1\t4\n+4\t2\t-1\n+5\t1\t2\n+6\t2\t7\n+7\t1\t-1\n+1\t3\t2\n+2\t4\t4\n+3\t3\t4\n+4\t4\t-1\n+5\t3\t2\n+6\t4\t7\n+7\t3\t-1\n+\n+query III\n+with parents_tab (id , value , parent )\n+as MATERIALIZED (values (1, 1, 2), (2, 2, 4), (3, 1, 4), (4, 2, -1), (5, 1, 2), (6, 2, 7), (7, 1, -1)\n+),\n+parents_tab2(id , value , parent )\n+as MATERIALIZED (values (1, 1, 2), (2, 2, 4), (3, 1, 4), (4, 2, -1), (5, 1, 2), (6, 2, 7), (7, 1, -1)\n+),\n+parents as MATERIALIZED (\n+    select * from parents_tab\n+    union all\n+    select id, value+2, parent from parents_tab2\n+)\n+select * from parents;\n+----\n+1\t1\t2\n+2\t2\t4\n+3\t1\t4\n+4\t2\t-1\n+5\t1\t2\n+6\t2\t7\n+7\t1\t-1\n+1\t3\t2\n+2\t4\t4\n+3\t3\t4\n+4\t4\t-1\n+5\t3\t2\n+6\t4\t7\n+7\t3\t-1\n+\n+statement ok\n+create view vparents as\n+with RECURSIVE parents_tab (id , value , parent )\n+as MATERIALIZED (values (1, 1, 2), (2, 2, 4), (3, 1, 4), (4, 2, -1), (5, 1, 2), (6, 2, 7), (7, 1, -1)\n+),\n+parents_tab2 (id , value , parent )\n+as MATERIALIZED (values (1, 1, 2), (2, 2, 4), (3, 1, 4), (4, 2, -1), (5, 1, 2), (6, 2, 7), (7, 1, -1)\n+)\n+select * from parents_tab\n+union all\n+select id, value+2, parent from parents_tab2;\n+\n+query III\n+select * from vparents;\n+----\n+1\t1\t2\n+2\t2\t4\n+3\t1\t4\n+4\t2\t-1\n+5\t1\t2\n+6\t2\t7\n+7\t1\t-1\n+1\t3\t2\n+2\t4\t4\n+3\t3\t4\n+4\t4\t-1\n+5\t3\t2\n+6\t4\t7\n+7\t3\t-1\ndiff --git a/test/sql/cte/materialized/test_bug_922_materialized.test b/test/sql/cte/materialized/test_bug_922_materialized.test\nnew file mode 100644\nindex 000000000000..cd00c58e6a25\n--- /dev/null\n+++ b/test/sql/cte/materialized/test_bug_922_materialized.test\n@@ -0,0 +1,11 @@\n+# name: test/sql/cte/materialized/test_bug_922_materialized.test\n+# description: Test for a crash reported in issue #922\n+# group: [materialized]\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+query I\n+WITH my_list(value) AS MATERIALIZED (VALUES (1), (2), (3))\n+    SELECT * FROM my_list LIMIT 0 OFFSET 1\n+----\ndiff --git a/test/sql/cte/materialized/test_cte_in_cte_materialized.test b/test/sql/cte/materialized/test_cte_in_cte_materialized.test\nnew file mode 100644\nindex 000000000000..8864c270761d\n--- /dev/null\n+++ b/test/sql/cte/materialized/test_cte_in_cte_materialized.test\n@@ -0,0 +1,58 @@\n+# name: test/sql/cte/materialized/test_cte_in_cte_materialized.test\n+# description: Test Nested Common Table Expressions (CTE)\n+# group: [materialized]\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+statement ok\n+create table a(i integer);\n+\n+statement ok\n+insert into a values (42);\n+\n+query I\n+with cte1 as MATERIALIZED (Select i as j from a) select * from cte1;\n+----\n+42\n+\n+query I\n+with cte1 as MATERIALIZED (with b as MATERIALIZED (Select i as j from a) Select j from b) select x from cte1 t1(x);\n+----\n+42\n+\n+query I\n+with cte1(xxx) as MATERIALIZED (with ncte(yyy) as MATERIALIZED (Select i as j from a) Select yyy from ncte) select xxx from cte1;\n+----\n+42\n+\n+query II\n+with cte1 as MATERIALIZED (with b as MATERIALIZED (Select i as j from a) select j from b), cte2 as MATERIALIZED (with c as MATERIALIZED (select ref.j+1 as k from cte1 as ref) select k from c) select * from cte1 , cte2;\n+----\n+42\t43\n+\n+# duplicate CTE alias\n+statement error\n+with cte1 as MATERIALIZED (select 42), cte1 as MATERIALIZED (select 42) select * FROM cte1;\n+\n+# refer to CTE in subquery tableref\n+query I\n+with cte1 as MATERIALIZED (Select i as j from a) select * from (with cte2 as MATERIALIZED (select max(j) as j from cte1) select * from cte2) f\n+----\n+42\n+\n+# refer to CTE in subquery expression\n+query I\n+with cte1 as MATERIALIZED (Select i as j from a) select * from cte1 where j = (with cte2 as MATERIALIZED (select max(j) as j from cte1) select j from cte2);\n+----\n+42\n+\n+require noalternativeverify\n+\n+# refer to same-named CTE in a subquery expression\n+statement error\n+with cte as MATERIALIZED (Select i as j from a) select * from cte where j = (with cte as MATERIALIZED (select max(j) as j from cte) select j from cte);\n+\n+# self-refer to non-existent cte\n+statement error\n+with cte as MATERIALIZED (select * from cte) select * from cte\ndiff --git a/test/sql/cte/materialized/test_cte_materialized.test b/test/sql/cte/materialized/test_cte_materialized.test\nnew file mode 100644\nindex 000000000000..8c6d0a6bbdbe\n--- /dev/null\n+++ b/test/sql/cte/materialized/test_cte_materialized.test\n@@ -0,0 +1,155 @@\n+# name: test/sql/cte/materialized/test_cte_materialized.test\n+# description: Test Common Table Expressions (CTE)\n+# group: [materialized]\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+statement ok\n+create table a(i integer);\n+\n+statement ok\n+insert into a values (42);\n+\n+query I\n+with cte1 as MATERIALIZED (Select i as j from a) select * from cte1;\n+----\n+42\n+\n+query I\n+with cte1 as MATERIALIZED (Select i as j from a) select x from cte1 t1(x);\n+----\n+42\n+\n+query I\n+with cte1(xxx) as MATERIALIZED (Select i as j from a) select xxx from cte1;\n+----\n+42\n+\n+query I\n+with cte1(xxx) as MATERIALIZED (Select i as j from a) select x from cte1 t1(x);\n+----\n+42\n+\n+query II\n+with cte1 as MATERIALIZED (Select i as j from a), cte2 as MATERIALIZED (select ref.j as k from cte1 as ref), cte3 as MATERIALIZED (select ref2.j+1 as i from cte1 as ref2) select * from cte2 , cte3;\n+----\n+42\t43\n+\n+query I\n+with cte1 as MATERIALIZED (select i as j from a), cte2 as MATERIALIZED (select ref.j as k from cte1 as ref), cte3 as MATERIALIZED (select ref2.j+1 as i from cte1 as ref2) select * from cte2 union all select * FROM cte3;\n+----\n+42\n+43\n+\n+# duplicate CTE alias\n+statement error\n+with cte1 as MATERIALIZED (select 42), cte1 as MATERIALIZED (select 42) select * FROM cte1;\n+\n+# reference to CTE before its actually defined\n+query I\n+with cte3 as MATERIALIZED (select ref2.j as i from cte1 as ref2), cte1 as MATERIALIZED (Select i as j from a), cte2 as MATERIALIZED (select ref.j+1 as k from cte1 as ref) select * from cte2 union all select * FROM cte3;\n+----\n+43\n+42\n+\n+# multiple uses of same CTE\n+query II\n+with cte1 as MATERIALIZED (Select i as j from a) select * from cte1 cte11, cte1 cte12;\n+----\n+42\t42\n+\n+# refer to CTE in subquery\n+query I\n+with cte1 as MATERIALIZED (Select i as j from a) select * from cte1 where j = (select max(j) from cte1 as cte2);\n+----\n+42\n+\n+# multi-column name alias\n+query II\n+with cte1(x, y) as MATERIALIZED (select 42 a, 84 b) select zzz, y from cte1 t1(zzz);\n+----\n+42\t84\n+\n+# use a CTE in a view definition\n+statement ok\n+create view va AS (with cte as MATERIALIZED (Select i as j from a) select * from cte);\n+\n+query I\n+select * from va\n+----\n+42\n+\n+# nested CTE views that re-use CTE aliases\n+query I\n+with cte AS MATERIALIZED (SELECT * FROM va) SELECT * FROM cte;\n+----\n+42\n+\n+# multiple ctes in a view definition\n+statement ok\n+create view vb AS (with cte1 as MATERIALIZED (Select i as j from a), cte2 as MATERIALIZED (select ref.j+1 as k from cte1 as ref) select * from cte2);\n+\n+query I\n+select * from vb\n+----\n+43\n+\n+# cte in set operation node\n+query I\n+SELECT 1 UNION ALL (WITH cte AS MATERIALIZED (SELECT 42) SELECT * FROM cte);\n+----\n+1\n+42\n+\n+# cte in recursive cte\n+query I\n+WITH RECURSIVE cte(d) AS MATERIALIZED (\n+\t\tSELECT 1\n+\tUNION ALL\n+\t\t(WITH c(d) AS (SELECT * FROM cte)\n+\t\t\tSELECT d + 1\n+\t\t\tFROM c\n+\t\t\tWHERE FALSE\n+\t\t)\n+)\n+SELECT max(d) FROM cte;\n+----\n+1\n+\n+# test CTE with nested aliases in where clause\n+query II\n+with cte (a) as MATERIALIZED (\n+    select 1\n+)\n+select\n+    a as alias1,\n+    alias1 as alias2\n+from cte\n+where alias2 > 0;\n+----\n+1\t1\n+\n+# test materialized CTE in recursive CTE\n+query II\n+WITH RECURSIVE t(x,v) AS (\n+  SELECT 1, ARRAY[] :: int[]\n+    UNION ALL\n+  (WITH u(x) AS MATERIALIZED (SELECT 1)\n+    SELECT f.x, (SELECT array_agg(x) FROM u)\n+    FROM   t, LATERAL (SELECT t.x + 1) AS f(x)\n+    WHERE  t.x < 5\n+  )\n+) SELECT * FROM t ORDER BY x;\n+----\n+1\t[]\n+2\t[1]\n+3\t[1]\n+4\t[1]\n+5\t[1]\n+\n+query I\n+SELECT * FROM (WITH t(x) AS MATERIALIZED (SELECT * FROM generate_series(1,10) LIMIT 75%) SELECT * FROM t LIMIT 80%) AS _(x) ORDER BY x LIMIT 50%;\n+----\n+1\n+2\ndiff --git a/test/sql/cte/materialized/test_cte_overflow_materialized.test b/test/sql/cte/materialized/test_cte_overflow_materialized.test\nnew file mode 100644\nindex 000000000000..c4fd7affcae6\n--- /dev/null\n+++ b/test/sql/cte/materialized/test_cte_overflow_materialized.test\n@@ -0,0 +1,17 @@\n+# name: test/sql/cte/materialized/test_cte_overflow_materialized.test\n+# description: Ensure no stack overflow for CTE names that match existing tables\n+# group: [materialized]\n+\n+statement ok\n+create table a (id integer)\n+\n+statement ok\n+insert into a values (1729)\n+\n+statement ok\n+create view va as (with v as MATERIALIZED (select * from a) select * from v)\n+\n+query I\n+with a as MATERIALIZED (select * from va) select * from a\n+----\n+1729\ndiff --git a/test/sql/cte/materialized/test_materialized_cte.test b/test/sql/cte/materialized/test_materialized_cte.test\nnew file mode 100644\nindex 000000000000..193c32971a69\n--- /dev/null\n+++ b/test/sql/cte/materialized/test_materialized_cte.test\n@@ -0,0 +1,77 @@\n+# name: test/sql/cte/materialized/test_materialized_cte.test\n+# description: Test Materialized Common Table Expressions (CTE)\n+# group: [materialized]\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+query I\n+WITH t(x) AS MATERIALIZED (SELECT 1) SELECT * FROM t;\n+----\n+1\n+\n+query II\n+WITH t(x) AS MATERIALIZED (SELECT t FROM generate_series(1,3) AS _(t)) SELECT t1.x,1 as y FROM t AS t1 ORDER BY x;\n+----\n+1\t1\n+2\t1\n+3\t1\n+\n+query II\n+WITH t(x) AS MATERIALIZED (SELECT t FROM generate_series(1,3) AS _(t)) SELECT t1.x, t1.x FROM t AS t1 ORDER BY x;\n+----\n+1\t1\n+2\t2\n+3\t3\n+\n+query II\n+WITH t(x) AS MATERIALIZED (SELECT t FROM generate_series(1,3) AS _(t)) SELECT t1.x, t2.x FROM t AS t1, t AS t2 ORDER BY t1.x, t2.x;\n+----\n+1\t1\n+1\t2\n+1\t3\n+2\t1\n+2\t2\n+2\t3\n+3\t1\n+3\t2\n+3\t3\n+\n+query II\n+WITH t(x) AS MATERIALIZED (SELECT 1),\n+     u(x) AS MATERIALIZED (SELECT 2)\n+  SELECT *\n+  FROM u FULL OUTER JOIN t ON TRUE;\n+----\n+2\t1\n+\n+query I\n+WITH t(x) AS MATERIALIZED (SELECT x FROM generate_series(1,10) AS _(x) limit 4)   SELECT DISTINCT x   FROM t order by x desc;\n+----\n+4\n+3\n+2\n+1\n+\n+query I\n+WITH t(x) AS MATERIALIZED (SELECT x FROM generate_series(1,10) AS _(x) limit 4)   SELECT DISTINCT x   FROM t order by x desc LIMIT 2;\n+----\n+4\n+3\n+\n+query I\n+WITH t(x) AS MATERIALIZED (\n+  WITH u(x) AS MATERIALIZED (\n+    SELECT 42\n+  ) SELECT * FROM u\n+) SELECT * FROM t;\n+----\n+42\n+\n+query I\n+WITH t(x) AS MATERIALIZED (SELECT 1),\n+     u(x) AS MATERIALIZED (SELECT x+1 FROM t)\n+  TABLE u UNION ALL TABLE t;\n+----\n+2\n+1\ndiff --git a/test/sql/cte/materialized/test_nested_recursive_cte_materialized.test b/test/sql/cte/materialized/test_nested_recursive_cte_materialized.test\nnew file mode 100644\nindex 000000000000..d6edee00ca18\n--- /dev/null\n+++ b/test/sql/cte/materialized/test_nested_recursive_cte_materialized.test\n@@ -0,0 +1,59 @@\n+# name: test/sql/cte/materialized/test_nested_recursive_cte_materialized.test\n+# description: Test Nested Recursive Common Table Expressions (CTE)\n+# group: [materialized]\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+query I\n+WITH RECURSIVE t(x) AS MATERIALIZED\n+(\n+  SELECT 1\n+    UNION ALL\n+  SELECT x+1\n+  FROM   t\n+  WHERE  x < 4\n+),\n+u(x) AS MATERIALIZED\n+(\n+  SELECT *\n+  FROM   t\n+    UNION ALL\n+  SELECT u.x * 2 + t.x\n+  FROM   u, t\n+  WHERE  u.x < 32\n+)\n+SELECT *\n+FROM   u\n+ORDER BY x\n+LIMIT 5;\n+----\n+1\n+2\n+3\n+3\n+4\n+\n+query III\n+WITH RECURSIVE collatz(x, t, steps) AS MATERIALIZED\n+(\n+  SELECT x, x, 0\n+  FROM   (WITH RECURSIVE n(t) AS (SELECT 1 UNION ALL SELECT t+1 FROM n WHERE t < 10) SELECT * FROM n) AS _(x)\n+    UNION ALL\n+  (SELECT x, CASE WHEN t%2 = 1 THEN t * 3 + p ELSE t / 2 END, steps + p\n+   FROM   collatz, (WITH RECURSIVE n(t) AS (SELECT 1 UNION ALL SELECT t+1 FROM n WHERE t < 1) SELECT * FROM n) AS _(p)\n+   WHERE  t <> 1)\n+)\n+SELECT * FROM collatz WHERE t = 1\n+ORDER BY x;\n+----\n+1\t1\t0\n+2\t1\t1\n+3\t1\t7\n+4\t1\t 2\n+5\t1\t 5\n+6\t1\t 8\n+7\t1\t16\n+8\t1\t 3\n+9\t1\t19\n+10\t1\t6\ndiff --git a/test/sql/cte/materialized/test_outer_joins_recursive_cte_materialized.test b/test/sql/cte/materialized/test_outer_joins_recursive_cte_materialized.test\nnew file mode 100644\nindex 000000000000..602a8d0e59b0\n--- /dev/null\n+++ b/test/sql/cte/materialized/test_outer_joins_recursive_cte_materialized.test\n@@ -0,0 +1,30 @@\n+# name: test/sql/cte/materialized/test_outer_joins_recursive_cte_materialized.test\n+# description: Test Recursive Common Table Expressions (CTE) with outer joins\n+# group: [materialized]\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+statement ok\n+CREATE TABLE v(x INT);\n+\n+statement ok\n+INSERT INTO v\n+VALUES\n+(1),(2),(3);\n+\n+query II\n+WITH RECURSIVE t(x) AS MATERIALIZED\n+(\n+  SELECT 1\n+    UNION ALL\n+  SELECT x + 1\n+  FROM   (SELECT t.x+1 FROM v AS _(p) FULL OUTER JOIN t ON t.x = p) AS _(x)\n+  WHERE  x < 10\n+) SELECT * FROM v AS _(p) RIGHT OUTER JOIN t ON t.x = p ORDER BY p NULLS LAST;\n+----\n+1\t1\n+3\t3\n+NULL\t5\n+NULL\t7\n+NULL\t9\ndiff --git a/test/sql/cte/materialized/test_recursive_cte_tutorial_materialized.test b/test/sql/cte/materialized/test_recursive_cte_tutorial_materialized.test\nnew file mode 100644\nindex 000000000000..7733e1f2306e\n--- /dev/null\n+++ b/test/sql/cte/materialized/test_recursive_cte_tutorial_materialized.test\n@@ -0,0 +1,141 @@\n+# name: test/sql/cte/materialized/test_recursive_cte_tutorial_materialized.test\n+# description: Test Recursive CTEs from the CyberTec tutorial: https://www.cybertec-postgresql.com/en/recursive-queries-postgresql/\n+# group: [materialized]\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+statement ok\n+CREATE TABLE emp (empno INTEGER PRIMARY KEY,\n+                  ename VARCHAR,\n+\t\t\t\t  job VARCHAR,\n+\t\t\t\t  mgr INTEGER,\n+\t\t\t\t  hiredate DATE,\n+\t\t\t\t  sal DOUBLE,\n+\t\t\t\t  comm DOUBLE,\n+\t\t\t\t  deptno INTEGER);\n+\n+statement ok\n+INSERT INTO emp VALUES (7839, 'KING', 'PRESIDENT', NULL, DATE '1981-11-17', 5000.00, NULL, 10);\n+INSERT INTO emp VALUES (7698, 'BLAKE', 'MANAGER', 7839, DATE '1981-05-01', 2850.00, NULL, 30);\n+INSERT INTO emp VALUES (7782, 'CLARK', 'MANAGER', 7839, DATE '1981-06-09', 2450.00, NULL, 10);\n+INSERT INTO emp VALUES (7566, 'JONES', 'MANAGER', 7839, DATE '1981-04-02', 2975.00, NULL, 20);\n+INSERT INTO emp VALUES (7902, 'FORD', 'ANALYST', 7566, DATE '1981-12-03', 3000.00, NULL, 20);\n+INSERT INTO emp VALUES (7369, 'SMITH', 'CLERK', 7902, DATE '1980-12-17', 800.00, NULL, 20);\n+INSERT INTO emp VALUES (7499, 'ALLEN', 'SALESMAN', 7698, DATE '1981-02-20', 1600.00, 300.00, 30);\n+INSERT INTO emp VALUES (7521, 'WARD', 'SALESMAN', 7698, DATE '1981-02-22', 1250.00, 500.00, 30);\n+INSERT INTO emp VALUES (7654, 'MARTIN', 'SALESMAN', 7698, DATE '1981-09-28', 1250.00, 1400.00, 30);\n+INSERT INTO emp VALUES (7844, 'TURNER', 'SALESMAN', 7698, DATE '1981-09-08', 1500.00, 0.00, 30);\n+INSERT INTO emp VALUES (7900, 'JAMES', 'CLERK', 7698, DATE '1981-12-03', 950.00, NULL, 30);\n+INSERT INTO emp VALUES (7934, 'MILLER', 'CLERK', 7782, DATE '1982-01-23', 1300.00, NULL, 10);\n+\n+query II\n+WITH RECURSIVE ctename AS MATERIALIZED (\n+      SELECT empno, ename\n+      FROM emp\n+      WHERE empno = 7566\n+   UNION ALL\n+      SELECT emp.empno, emp.ename\n+      FROM emp\n+         JOIN ctename ON emp.mgr = ctename.empno\n+)\n+SELECT * FROM ctename;\n+----\n+7566\tJONES\n+7902\tFORD\n+7369\tSMITH\n+\n+query III\n+WITH RECURSIVE ctename AS MATERIALIZED (\n+      SELECT empno, ename,\n+             0 AS level\n+      FROM emp\n+      WHERE empno = 7566\n+   UNION ALL\n+      SELECT emp.empno, emp.ename,\n+             ctename.level + 1\n+      FROM emp\n+         JOIN ctename ON emp.mgr = ctename.empno\n+)\n+SELECT * FROM ctename;\n+----\n+7566\tJONES\t0\n+7902\tFORD\t1\n+7369\tSMITH\t2\n+\n+query III\n+WITH RECURSIVE ctename AS MATERIALIZED (\n+      SELECT empno, ename,\n+             ename AS path\n+      FROM emp\n+      WHERE empno = 7566\n+   UNION ALL\n+      SELECT emp.empno, emp.ename,\n+             ctename.path || ' -> ' || emp.ename\n+      FROM emp\n+         JOIN ctename ON emp.mgr = ctename.empno\n+)\n+SELECT * FROM ctename;\n+----\n+7566\tJONES\tJONES\n+7902\tFORD\tJONES -> FORD\n+7369\tSMITH\tJONES -> FORD -> SMITH\n+\n+statement ok\n+CREATE VIEW ctenames AS (\n+  WITH RECURSIVE ctename AS MATERIALIZED (\n+      SELECT empno, ename,\n+             ename AS path\n+      FROM emp\n+      WHERE empno = 7566\n+     UNION ALL\n+      SELECT emp.empno, emp.ename,\n+             ctename.path || ' -> ' || emp.ename\n+      FROM emp\n+         JOIN ctename ON emp.mgr = ctename.empno\n+  )\n+  SELECT * FROM ctename\n+);\n+\n+query III\n+SELECT * FROM ctenames;\n+----\n+7566\tJONES\tJONES\n+7902\tFORD\tJONES -> FORD\n+7369\tSMITH\tJONES -> FORD -> SMITH\n+\n+query II\n+WITH RECURSIVE fib AS MATERIALIZED (\n+      SELECT 1 AS n,\n+             1::bigint AS \"fib\u2099\",\n+             1::bigint AS \"fib\u2099\u208a\u2081\"\n+   UNION ALL\n+      SELECT n+1,\n+             \"fib\u2099\u208a\u2081\",\n+             \"fib\u2099\" + \"fib\u2099\u208a\u2081\"\n+      FROM fib\n+      WHERE  n <= 20\n+)\n+SELECT n, \"fib\u2099\" FROM fib\n+LIMIT 20;\n+----\n+1\t1\n+2\t1\n+3\t2\n+4\t3\n+5\t5\n+6\t8\n+7\t13\n+8\t21\n+9\t34\n+10\t55\n+11\t89\n+12\t144\n+13\t233\n+14\t377\n+15\t610\n+16\t987\n+17\t1597\n+18\t2584\n+19\t4181\n+20\t6765\ndiff --git a/test/sql/cte/materialized/test_recursive_cte_union_all_materialized.test b/test/sql/cte/materialized/test_recursive_cte_union_all_materialized.test\nnew file mode 100644\nindex 000000000000..846dd39855d3\n--- /dev/null\n+++ b/test/sql/cte/materialized/test_recursive_cte_union_all_materialized.test\n@@ -0,0 +1,111 @@\n+# name: test/sql/cte/materialized/test_recursive_cte_union_all_materialized.test\n+# description: Test Recursive Common Table Expressions UNION ALL (CTE)\n+# group: [materialized]\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+# simple recursive CTE\n+query I\n+with recursive t as MATERIALIZED (select 1 as x union all select x+1 from t where x < 3) select * from t\n+----\n+1\n+2\n+3\n+\n+# simple recursive CTE with an alias\n+query I\n+with recursive t as MATERIALIZED (select 1 as x union all select x+1 from t as m where m.x < 3) select * from t\n+----\n+1\n+2\n+3\n+\n+# recursive CTE with multiple references and aliases\n+query I\n+with recursive t as MATERIALIZED (select 1 as x union all select m.x+f.x from t as m, t as f where m.x < 3) select * from t\n+----\n+1\n+2\n+4\n+\n+# strings and multiple columns\n+query IT\n+with recursive t as MATERIALIZED (select 1 as x, 'hello' as y union all select x+1, y || '-' || 'hello' from t where x < 3) select * from t;\n+----\n+1\thello\n+2\thello-hello\n+3\thello-hello-hello\n+\n+# referencing same CTE multiple times\n+query I\n+with recursive t as MATERIALIZED (select 1 as x union all select x+1 from t where x < 3) select min(a1.x) from t a1, t a2;\n+----\n+1\n+\n+# nested uncorrelated subquery\n+query I\n+with recursive t as MATERIALIZED (select 1 as x union all select x+(SELECT 1) from t where x < 3) select * from t;\n+----\n+1\n+2\n+3\n+\n+# use with recursive in table creation\n+statement ok\n+create table integers as with recursive t as MATERIALIZED (select 1 as x union all select x+1 from t where x < 3) select * from t;\n+\n+# more complex uncorrelated subquery\n+query I\n+with recursive t as MATERIALIZED (select (select min(x) from integers) as x union all select x+1 from t where x < 3) select * from t;\n+----\n+1\n+2\n+3\n+\n+# aggregate function\n+query I\n+with recursive t as MATERIALIZED (select 1 as x union all select sum(x+1) AS x from t where x < 3 group by x) select * from t\n+----\n+1\n+2\n+3\n+\n+# recursive CTE with table-producing function\n+query I\n+WITH RECURSIVE t AS MATERIALIZED (\n+\tSELECT 1 AS i\n+\tUNION ALL\n+\tSELECT j\n+\tFROM t, generate_series(0, 10, 1) series(j)\n+\tWHERE j=i+1\n+)\n+SELECT * FROM t;\n+----\n+1\n+2\n+3\n+4\n+5\n+6\n+7\n+8\n+9\n+10\n+\n+# order by is not allowed in the recursive term of ctes\n+statement error\n+with recursive t as MATERIALIZED (select 1 as x union all select x+1 from t where x < 3 order by x) select * from t\n+\n+# limit is not allowed in the recursive term of ctes\n+statement error\n+with recursive t as MATERIALIZED (select 1 as x union all select x+1 from t where x < 3 LIMIT 1) select * from t\n+\n+# offset is not allowed in the recursive term of ctes\n+statement error\n+with recursive t as MATERIALIZED (select 1 as x union all select x+1 from t where x < 3 OFFSET 1) select * from t\n+\n+# offset is not allowed in the recursive term of ctes\n+statement error\n+with recursive t as MATERIALIZED (select 1 as x union all select x+1 from t where x < 3 LIMIT 1 OFFSET 1) select * from t\n+\ndiff --git a/test/sql/cte/materialized/test_recursive_cte_union_materialized.test b/test/sql/cte/materialized/test_recursive_cte_union_materialized.test\nnew file mode 100644\nindex 000000000000..6af32e21d18f\n--- /dev/null\n+++ b/test/sql/cte/materialized/test_recursive_cte_union_materialized.test\n@@ -0,0 +1,136 @@\n+# name: test/sql/cte/materialized/test_recursive_cte_union_materialized.test\n+# description: Test Recursive Common Table Expressions UNION (CTE)\n+# group: [materialized]\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+# simple recursive CTE\n+query I\n+with recursive t as MATERIALIZED (select 1 as x union select x+1 from t where x < 3) select * from t order by x\n+----\n+1\n+2\n+3\n+\n+query I\n+with recursive t(x) as MATERIALIZED (select 1 union select x+1 from t where x < 3) select * from t order by x\n+----\n+1\n+2\n+3\n+\n+# test some aliases\n+query I\n+with recursive t(x) as MATERIALIZED (select 1 union select x+1 from t where x < 3) select zz from t t1(zz) order by zz\n+----\n+1\n+2\n+3\n+\n+query I\n+with recursive t(x) as MATERIALIZED (select 1 union select zzz+1 from t t1(zzz) where zzz < 3) select zz from t t1(zz) order by zz\n+----\n+1\n+2\n+3\n+\n+# UNION semantics prevents infinite loop here\n+query I\n+with recursive t as MATERIALIZED (select 1 as x union select x from t) select * from t\n+----\n+1\n+\n+# simple recursive CTE with an alias\n+query I\n+with recursive t as MATERIALIZED (select 1 as x union select x+1 from t as m where m.x < 3) select * from t order by x\n+----\n+1\n+2\n+3\n+\n+# recursive CTE with multiple references and aliases\n+query I\n+with recursive t as MATERIALIZED (select 1 as x union select m.x+f.x from t as m, t as f where m.x < 3) select * from t order by x\n+----\n+1\n+2\n+4\n+\n+# strings and multiple columns\n+query IT\n+with recursive t as MATERIALIZED (select 1 as x, 'hello' as y union select x+1, y || '-' || 'hello' from t where x < 3) select * from t order by x;\n+----\n+1\thello\n+2\thello-hello\n+3\thello-hello-hello\n+\n+# referencing same CTE multiple times\n+query I\n+with recursive t as MATERIALIZED (select 1 as x union select x+1 from t where x < 3) select min(a1.x) from t a1, t a2;\n+----\n+1\n+\n+# nested uncorrelated subquery\n+query I\n+with recursive t as MATERIALIZED (select 1 as x union select x+(SELECT 1) from t where x < 3) select * from t order by x;\n+----\n+1\n+2\n+3\n+\n+# correlated subquery\n+query I\n+with recursive t as MATERIALIZED (select 1 as x union select x+(SELECT 1+t.x) from t where x < 5) select * from t order by x;\n+----\n+1\n+3\n+7\n+\n+# use with recursive in table creation\n+statement ok\n+create table integers as with recursive t as MATERIALIZED (select 1 as x union select x+1 from t where x < 3) select * from t;\n+\n+# more complex uncorrelated subquery\n+query I\n+with recursive t as MATERIALIZED (select (select min(x) from integers) as x union select x+1 from t where x < 3) select * from t order by x;\n+----\n+1\n+2\n+3\n+\n+# aggregate functions\n+query I\n+with recursive t as MATERIALIZED (select 1 as x union select sum(x+1) from t where x < 3) select * from t order by 1 nulls last\n+----\n+1\n+2\n+3\n+NULL\n+\n+# order by is not allowed in the recursive term of ctes\n+statement error\n+with recursive t as MATERIALIZED (select 1 as x union select sum(x+1) from t where x < 3 order by x) select * from t\n+\n+# limit is not allowed in the recursive term of ctes\n+statement error\n+with recursive t as MATERIALIZED (select 1 as x union select sum(x+1) from t where x < 3 LIMIT 1) select * from t\n+\n+# offset is not allowed in the recursive term of ctes\n+statement error\n+with recursive t as MATERIALIZED (select 1 as x union select sum(x+1) from t where x < 3 OFFSET 1) select * from t\n+\n+# offset is not allowed in the recursive term of ctes\n+statement error\n+with recursive t as MATERIALIZED (select 1 as x union select sum(x+1) from t where x < 3 LIMIT 1 OFFSET 1) select * from t\n+\n+# create a view from a recursive cte\n+statement ok\n+create view vr as (with recursive t(x) as MATERIALIZED (select 1 union select x+1 from t where x < 3) select * from t order by x)\n+\n+query I\n+select * from vr\n+----\n+1\n+2\n+3\ndiff --git a/test/sql/cte/test_cte_in_cte.test b/test/sql/cte/test_cte_in_cte.test\nindex f22fe61bb8b5..97092a44306c 100644\n--- a/test/sql/cte/test_cte_in_cte.test\n+++ b/test/sql/cte/test_cte_in_cte.test\n@@ -47,6 +47,8 @@ with cte1 as (Select i as j from a) select * from cte1 where j = (with cte2 as (\n ----\n 42\n \n+require noalternativeverify\n+\n # refer to same-named CTE in a subquery expression\n query I\n with cte as (Select i as j from a) select * from cte where j = (with cte as (select max(j) as j from cte) select j from cte);\ndiff --git a/test/sql/cte/test_outer_joins_recursive_cte.test b/test/sql/cte/test_outer_joins_recursive_cte.test\nindex c64e9cb0e908..98c232e9fd10 100644\n--- a/test/sql/cte/test_outer_joins_recursive_cte.test\n+++ b/test/sql/cte/test_outer_joins_recursive_cte.test\n@@ -21,7 +21,7 @@ WITH RECURSIVE t(x) AS\n   SELECT x + 1\n   FROM   (SELECT t.x+1 FROM v AS _(p) FULL OUTER JOIN t ON t.x = p) AS _(x)\n   WHERE  x < 10\n-) SELECT * FROM v AS _(p) RIGHT OUTER JOIN t ON t.x = p ORDER BY p NULLS LAST;\n+) SELECT * FROM v AS _(p) RIGHT OUTER JOIN t ON t.x = p ORDER BY p, t NULLS LAST;\n ----\n 1\t1\n 3\t3\ndiff --git a/test/sql/cte/test_recursive_cte_tutorial.test b/test/sql/cte/test_recursive_cte_tutorial.test\nindex 98c0f775b649..cff19f414e5e 100644\n--- a/test/sql/cte/test_recursive_cte_tutorial.test\n+++ b/test/sql/cte/test_recursive_cte_tutorial.test\n@@ -104,6 +104,8 @@ SELECT * FROM ctenames;\n 7902\tFORD\tJONES -> FORD\n 7369\tSMITH\tJONES -> FORD -> SMITH\n \n+require noalternativeverify\n+\n query II\n WITH RECURSIVE fib AS (\n       SELECT 1 AS n,\ndiff --git a/test/sql/cte/test_recursive_cte_union.test b/test/sql/cte/test_recursive_cte_union.test\nindex 1b89af8f26e2..0c0d43e164ca 100644\n--- a/test/sql/cte/test_recursive_cte_union.test\n+++ b/test/sql/cte/test_recursive_cte_union.test\n@@ -79,6 +79,8 @@ with recursive t as (select 1 as x union select x+(SELECT 1) from t where x < 3)\n 2\n 3\n \n+require noalternativeverify\n+\n # hash join\n query I\n with recursive t as (select 1 as x union all select * from (select x from t where x < 5) tbl(i) join (select 1) tbl2(i) using (i)) select * from t limit 3;\ndiff --git a/test/sql/cte/test_recursive_cte_union_all.test b/test/sql/cte/test_recursive_cte_union_all.test\nindex fdd8e34d23b9..f0fe53c3fb1a 100644\n--- a/test/sql/cte/test_recursive_cte_union_all.test\n+++ b/test/sql/cte/test_recursive_cte_union_all.test\n@@ -71,6 +71,8 @@ with recursive t as (select 1 as x union all select sum(x+1) AS x from t where x\n 2\n 3\n \n+require noalternativeverify\n+\n # infinite aggregate function: will result in timeout if pipelining is not implemented\n query I\n with recursive t as (select 1 as x union all select sum(x+1) AS x from t where x < 3)\ndiff --git a/test/sql/filter/test_filter_clause.test_coverage b/test/sql/filter/test_filter_clause.test_slow\nsimilarity index 99%\nrename from test/sql/filter/test_filter_clause.test_coverage\nrename to test/sql/filter/test_filter_clause.test_slow\nindex e8cadeb98f38..1ad55f22021b 100644\n--- a/test/sql/filter/test_filter_clause.test_coverage\n+++ b/test/sql/filter/test_filter_clause.test_slow\n@@ -1,4 +1,4 @@\n-# name: test/sql/filter/test_filter_clause.test_coverage\n+# name: test/sql/filter/test_filter_clause.test_slow\n # description: Test aggregation with filter clause\n # group: [filter]\n \ndiff --git a/test/sql/fts/test_indexing.test_slow b/test/sql/fts/test_indexing.test_slow\nindex 42c26851d89c..1e1f33820d7f 100644\n--- a/test/sql/fts/test_indexing.test_slow\n+++ b/test/sql/fts/test_indexing.test_slow\n@@ -37,7 +37,7 @@ statement error\n PRAGMA create_fts_index('documents', 'id', 'body')\n \n statement ok\n-PRAGMA create_fts_index('documents', 'id', 'body', overwrite=1)\n+PRAGMA create_fts_index('documents', 'id', 'body', overwrite=true)\n \n # drop and re-create\n statement ok\ndiff --git a/test/sql/function/date/test_date_part.test b/test/sql/function/date/test_date_part.test\nindex 30aecbb195e7..d10addd52d80 100644\n--- a/test/sql/function/date/test_date_part.test\n+++ b/test/sql/function/date/test_date_part.test\n@@ -383,6 +383,45 @@ WHERE p IS DISTINCT FROM f;\n \n endloop\n \n+# Function-only parts\n+query II\n+SELECT d, epoch_ns(d) \n+FROM dates \n+WHERE d != '0044-03-15 (BC)' OR d IS NULL\n+ORDER BY ALL;\n+----\n+NULL\tNULL\n+-infinity\tNULL\n+1992-01-01\t694224000000000000\n+1992-03-03\t699580800000000000\n+1992-05-05\t705024000000000000\n+2022-01-01\t1640995200000000000\n+infinity\tNULL\n+\n+query II\n+SELECT d, epoch_us(d) FROM dates ORDER BY ALL;\n+----\n+NULL\tNULL\n+-infinity\tNULL\n+0044-03-15 (BC)\t-63517824000000000\n+1992-01-01\t694224000000000\n+1992-03-03\t699580800000000\n+1992-05-05\t705024000000000\n+2022-01-01\t1640995200000000\n+infinity\tNULL\n+\n+query II\n+SELECT d, epoch_ms(d) FROM dates ORDER BY ALL;\n+----\n+NULL\tNULL\n+-infinity\tNULL\n+0044-03-15 (BC)\t-63517824000000\n+1992-01-01\t694224000000\n+1992-03-03\t699580800000\n+1992-05-05\t705024000000\n+2022-01-01\t1640995200000\n+infinity\tNULL\n+\n #\n # Structs\n #\ndiff --git a/test/sql/function/generic/big_case.test_coverage b/test/sql/function/generic/big_case.test_slow\nsimilarity index 99%\nrename from test/sql/function/generic/big_case.test_coverage\nrename to test/sql/function/generic/big_case.test_slow\nindex 0b4b2a60042b..edc1bcf9e304 100644\n--- a/test/sql/function/generic/big_case.test_coverage\n+++ b/test/sql/function/generic/big_case.test_slow\n@@ -1,4 +1,4 @@\n-# name: test/sql/function/generic/big_case.test_coverage\n+# name: test/sql/function/generic/big_case.test_slow\n # description: Test large case statement\n # group: [generic]\n \ndiff --git a/test/sql/function/generic/test_case.test_coverage b/test/sql/function/generic/test_case.test_slow\nsimilarity index 96%\nrename from test/sql/function/generic/test_case.test_coverage\nrename to test/sql/function/generic/test_case.test_slow\nindex 858e1fcf5887..82732e89a7bb 100644\n--- a/test/sql/function/generic/test_case.test_coverage\n+++ b/test/sql/function/generic/test_case.test_slow\n@@ -1,4 +1,4 @@\n-# name: test/sql/function/generic/test_case.test_coverage\n+# name: test/sql/function/generic/test_case.test_slow\n # description: Test case statement\n # group: [generic]\n \ndiff --git a/test/sql/function/interval/test_date_part.test b/test/sql/function/interval/test_date_part.test\nindex 6ee786798500..a7f41f24dce8 100644\n--- a/test/sql/function/interval/test_date_part.test\n+++ b/test/sql/function/interval/test_date_part.test\n@@ -154,13 +154,44 @@ ORDER BY 1;\n 1 year 4 months\t{'hour': 0, 'minute': 0, 'second': 0, 'epoch': 41925600}\n 2 years\t{'hour': 0, 'minute': 0, 'second': 0, 'epoch': 63115200}\n \n+# Function-only parts\n+query II\n+SELECT i, epoch_ns(i) AS parts\n+FROM intervals\n+ORDER BY 1;\n+----\n+00:34:26.3434\t2066343400000\n+42 days\t3628800000000000\n+1 year 4 months\t41472000000000000\n+2 years\t62208000000000000\n+\n+query II\n+SELECT i, epoch_us(i) AS parts\n+FROM intervals\n+ORDER BY 1;\n+----\n+00:34:26.3434\t2066343400\n+42 days\t3628800000000\n+1 year 4 months\t41472000000000\n+2 years\t62208000000000\n+\n+query II\n+SELECT i, epoch_ms(i) AS parts\n+FROM intervals\n+ORDER BY 1;\n+----\n+00:34:26.3434\t2066343\n+42 days\t3628800000\n+1 year 4 months\t41472000000\n+2 years\t62208000000\n+\n # Invalid parts\n \n foreach datepart dow isodow doy week isoyear yearweek era timezone timezone_hour timezone_minute\n \n statement error\n-SELECT d, DATE_PART(['${datepart}'], d) AS parts\n-FROM dates\n+SELECT i, DATE_PART(['${datepart}'], i) AS parts\n+FROM intervals\n ORDER BY 1;\n \n endloop\ndiff --git a/test/sql/function/list/list_concat.test b/test/sql/function/list/list_concat.test\nindex fa84873b110c..ab7f8a546d46 100644\n--- a/test/sql/function/list/list_concat.test\n+++ b/test/sql/function/list/list_concat.test\n@@ -145,7 +145,7 @@ SELECT list_append(NULL, 3)\n [3]\n \n query II rowsort\n-SELECT i, list_append(list_concat(j, k), i) FROM lists\n+SELECT i, list_append(list_concat(j, k), i) FROM lists ORDER BY i;\n ----\n 0\t[0, 4, 8, 12, 0, 4, 8, 12, 0]\n 1\t[1, 5, 9, 13, 1, 5, 9, 13, 1]\ndiff --git a/test/sql/function/list/list_has_any_and_all.test_slow b/test/sql/function/list/list_has_any_and_all.test_slow\nnew file mode 100644\nindex 000000000000..346fa69f756a\n--- /dev/null\n+++ b/test/sql/function/list/list_has_any_and_all.test_slow\n@@ -0,0 +1,24 @@\n+# name: test/sql/function/list/list_has_any_and_all.test_slow\n+# description: Test list_has_any and list_has_all functions on Large Lists\n+# group: [list]\n+\n+statement ok\n+create table large_lists(l1 int[], l2 int[]);\n+\n+statement ok\n+insert into large_lists values (range(1, 3000), range(2000, 3000));\n+\n+statement ok\n+insert into large_lists values (range(3000), range(3000));\n+\n+query I\n+select list_has_any(l1, l2) from large_lists;\n+----\n+1\n+1\n+\n+query I\n+select list_has_all(l1, l2) from large_lists;\n+----\n+1\n+1\ndiff --git a/test/sql/function/list/list_has_any_and_has_all.test b/test/sql/function/list/list_has_any_and_has_all.test\nnew file mode 100644\nindex 000000000000..d2484355e0fc\n--- /dev/null\n+++ b/test/sql/function/list/list_has_any_and_has_all.test\n@@ -0,0 +1,269 @@\n+# name: test/sql/function/list/list_has_any_and_has_all.test\n+# description: Test list_has_any and list_has_all functions\n+# group: [list]\n+\n+query I\n+select list_has_any([1,2,3], [2,3,4]);\n+----\n+true\n+\n+query I\n+select list_has_all([1,2,3], [2,3,4]);\n+----\n+false\n+\n+# Test NULLs\n+\n+statement ok\n+CREATE TABLE list_data(l1 int[], l2 int[]);\n+\n+statement ok\n+INSERT INTO list_data VALUES (NULL, NULL);\n+\n+statement ok\n+INSERT INTO list_data VALUES (NULL, [1,2,3]);\n+\n+statement ok\n+INSERT INTO list_data VALUES ([1,2,3], NULL);\n+\n+statement ok\n+INSERT INTO list_data VALUES ([1,2,3], [2,3,NULL]);\n+\n+statement ok\n+INSERT INTO list_data VALUES ([1,2,NULL], [2,3,NULL]);\n+\n+statement ok\n+INSERT INTO list_data VALUES ([1,2,NULL], [NULL,3,4]);\n+\n+statement ok\n+INSERT INTO list_data VALUES ([1,2,3], [1,2,3]);\n+\n+statement ok\n+INSERT INTO list_data VALUES ([1,2,3], [1,2,NULL]);\n+\n+query I\n+select list_has_any(l1, l2) from list_data;\n+----\n+NULL\n+NULL\n+NULL\n+1\n+1\n+0\n+1\n+1\n+\n+query I\n+select list_has_all(l1, l2) from list_data;\n+----\n+NULL\n+NULL\n+NULL\n+1\n+0\n+0\n+1\n+1\n+\n+# Test Lists in Lists\n+\n+statement ok\n+DROP TABLE list_data;\n+\n+statement ok\n+create table list_of_list(l1 int[][], l2 int[][]);\n+\n+statement ok\n+insert into list_of_list values (NULL, NULL);\n+\n+statement ok\n+insert into list_of_list values ([[1 , 2, 3], NULL, [3, 2, 1]], [[2, 3, 4], NULL, [1, 2, 3]]);\n+\n+statement ok\n+insert into list_of_list values ([[1 , 2, 3], NULL, [3, 2, 1]], [[8, 8, 8], NULL, [8, 8, 8]]);\n+\n+statement ok\n+insert into list_of_list values ([[1 , 2, 3], NULL, [8, 8, 8]], [[8, 8, 8], NULL, [1, 2, 3]]);\n+\n+query I\n+select list_has_any(l1, l2) from list_of_list;\n+----\n+NULL\n+1\n+0\n+1\n+\n+query I\n+select list_has_all(l1, l2) from list_of_list;\n+----\n+NULL\n+0\n+0\n+1\n+\n+statement ok\n+drop table list_of_list;\n+\n+# test string lists\n+\n+statement ok\n+create table list_of_strings(l1 string[], l2 string[]);\n+\n+statement ok\n+insert into list_of_strings values (NULL, NULL);\n+\n+statement ok\n+insert into list_of_strings values ([NULL, 'a', 'b', 'c'], [NULL, 'b', 'c', 'd']);\n+\n+statement ok\n+insert into list_of_strings values (['a', 'b', 'c'], ['a', 'b', 'c']);\n+\n+statement ok\n+insert into list_of_strings values (['here is a very long long string that is def more than 12 bytes', 'and a shorty'], ['here is a very long long string that is def more than 12 bytes', 'here is a very long long string that is def more than 12 bytes', 'c', 'd']);\n+\n+statement ok\n+insert into list_of_strings values (['here is a very long long string that is def more than 12 bytes', 'and a shorty'], ['here is a very long string that is def more than 12 bytes', 'here is a very long string that is def more than 12 bytes', 'c', 'd']);\n+\n+statement ok\n+insert into list_of_strings values (['here is a very long long string that is def more than 12 bytes', 'and a shorty'], ['here is a very long long string that is def more than 12 bytes', 'and a shorty']);\n+\n+query I\n+select list_has_any(l1, l2) from list_of_strings;\n+----\n+NULL\n+1\n+1\n+1\n+0\n+1\n+\n+query I\n+select list_has_all(l1, l2) from list_of_strings;\n+----\n+NULL\n+0\n+1\n+0\n+0\n+1\n+\n+# test error cases\n+\n+statement error\n+select list_has_any(l1) from list_of_strings;\n+\n+statement error\n+select list_has_any(l1, l2, l1) from list_of_strings;\n+\n+statement error\n+select list_has_all(l1) from list_of_strings;\n+\n+statement error\n+select list_has_all(l1, l2, l1) from list_of_strings;\n+\n+statement error\n+select list_has_all([1, 2], 1);\n+\n+statement error\n+select list_has_any([[1,2], [2,4]], ['abc', 'def']);\n+\n+# Test Function in Function\n+\n+foreach f list_has_all list_has_any array_has_all array_has_any\n+\n+statement ok\n+create table tbl(l1 int[], l2 int[]);\n+\n+statement ok\n+insert into tbl values ([1,2,3], [2,3,4]);\n+\n+query I\n+select ${f}(list_intersect(l1, l2), list_intersect(l2, l1)) from tbl;\n+----\n+1\n+\n+statement ok\n+drop table tbl;\n+\n+endloop\n+\n+# Test Lists of Different Lengths\n+\n+statement ok\n+create table tbl(l1 int[], l2 int[]);\n+\n+statement ok\n+insert into tbl values ([1,2,3,4,5,6], [2,3,4]);\n+\n+statement ok\n+insert into tbl values ([1,2,3], [1,2,3,4,7,8,9]);\n+\n+query I\n+select list_has_any(l1, l2) from tbl;\n+----\n+1\n+1\n+\n+query I\n+select list_has_all(l1, l2) from tbl;\n+----\n+1\n+0\n+\n+query I\n+select list_has_all(l2, l1) from tbl;\n+----\n+0\n+1\n+\n+# Operators\n+query I\n+select l1 && l2 from tbl;\n+----\n+1\n+1\n+\n+statement error\n+select 'hello' && l1 from tbl;\n+\n+query I\n+select NULL && [NULL];\n+----\n+NULL\n+\n+query I\n+select l1 && NULL from tbl;\n+----\n+NULL\n+NULL\n+\n+query I\n+select l1 @> l2 from tbl;\n+----\n+1\n+0\n+\n+query I\n+select l1 <@ l2 from tbl;\n+----\n+0\n+1\n+\n+statement error\n+select 'hello' @> l1 from tbl;\n+\n+statement error\n+select 'hello' <@ l1 from tbl;\n+\n+query I\n+select l1 @> NULL from tbl;\n+----\n+NULL\n+NULL\n+\n+query I\n+select l1 <@ NULL from tbl;\n+----\n+NULL\n+NULL\n+\ndiff --git a/test/sql/function/list/list_intersect.test b/test/sql/function/list/list_intersect.test\nnew file mode 100644\nindex 000000000000..b63a6212da8c\n--- /dev/null\n+++ b/test/sql/function/list/list_intersect.test\n@@ -0,0 +1,135 @@\n+# name: test/sql/function/list/list_intersect.test\n+# description: Test list_intersect\n+# group: [list]\n+\n+foreach f list_intersect array_intersect\n+\n+query I\n+select ${f}([1,2,3], [2,3,4]);\n+----\n+[2, 3]\n+\n+statement ok\n+CREATE TABLE list_data(l1 int[], l2 int[]);\n+\n+statement ok\n+INSERT INTO list_data VALUES (NULL, NULL);\n+\n+statement ok\n+INSERT INTO list_data VALUES (NULL, [1,2,3]);\n+\n+statement ok\n+INSERT INTO list_data VALUES ([1,2,3], NULL);\n+\n+statement ok\n+INSERT INTO list_data VALUES ([1,2,3], [2,3,NULL]);\n+\n+statement ok\n+INSERT INTO list_data VALUES ([1,2,NULL], [2,3,NULL]);\n+\n+query I\n+select ${f}(l1, l2) from list_data;\n+----\n+NULL\n+NULL\n+[]\n+[2, 3]\n+[2]\n+\n+statement ok\n+DROP TABLE list_data;\n+\n+statement ok\n+create table list_of_list(l1 int[][], l2 int[][]);\n+\n+statement ok\n+insert into list_of_list values (NULL, NULL);\n+\n+statement ok\n+insert into list_of_list values ([[1 , 2, 3], NULL, [3, 2, 1]], [[ 2, 3, 4], NULL, [1, 2, 3]]);\n+\n+query I\n+select ${f}(l1, l2) from list_of_list;\n+----\n+NULL\n+[[1, 2, 3]]\n+\n+statement ok\n+drop table list_of_list;\n+\n+statement ok\n+create table list_of_strings(l1 string[], l2 string[]);\n+\n+statement ok\n+insert into list_of_strings values (NULL, NULL);\n+\n+statement ok\n+insert into list_of_strings values ([NULL, 'a', 'b', 'c'], [NULL, 'b', 'c', 'd']);\n+\n+statement ok\n+insert into list_of_strings values (['here is a very long long string that is def more than 12 bytes', 'and a shorty'], ['here is a very long long string that is def more than 12 bytes', 'here is a very long long string that is def more than 12 bytes', 'c', 'd']);\n+\n+query I\n+select ${f}(l1, l2) from list_of_strings;\n+----\n+NULL\n+[b, c]\n+[here is a very long long string that is def more than 12 bytes]\n+\n+statement ok\n+drop table list_of_strings;\n+\n+endloop\n+\n+# test error cases\n+\n+statement error\n+select list_intersect(l1) from list_of_strings;\n+\n+statement error\n+select list_intersect(l1, l2, l1) from list_of_strings;\n+\n+statement error\n+select list_intersect([[1,2], [2,4]], ['abc', 'def']);\n+\n+# Test Large Lists\n+\n+statement ok\n+create table large_lists(l1 int[], l2 int[]);\n+\n+statement ok\n+insert into large_lists values (range(1, 3000), range(2000, 3000));\n+\n+statement ok\n+insert into large_lists values (range(3000), range(3000));\n+\n+statement ok\n+select list_intersect(l1, l2) from large_lists;\n+\n+query I\n+select list_intersect(list_intersect([1,2,3,4], [4,5,6,7]), list_intersect([4,5,6,7],[1,2,3,4]));\n+----\n+[4]\n+\n+query I\n+select list_intersect(list_filter([1,2,3,4], x -> x > 2), list_filter([4,5,6,7], x -> x > 2));\n+----\n+[4]\n+\n+statement ok\n+prepare q1 as select list_intersect(?, ?);\n+\n+query I\n+execute q1(['abc', 'def'], ['def', 'ghi']);\n+----\n+[def]\n+\n+statement ok\n+CREATE TABLE all_types AS SELECT * FROM test_all_types();\n+\n+foreach colname bool tinyint smallint int bigint hugeint utinyint usmallint uint ubigint date time timestamp timestamp_s timestamp_ms timestamp_ns time_tz timestamp_tz float double dec_4_1 dec_9_4 dec_18_6 dec38_10 uuid interval varchar blob small_enum medium_enum large_enum int_array double_array date_array timestamp_array timestamptz_array varchar_array nested_int_array struct struct_of_arrays array_of_structs map\n+\n+statement ok\n+select list_intersect([\"${colname}\"], [\"${colname}\"]) FROM all_types;\n+\n+endloop\ndiff --git a/test/sql/function/list/list_resize.test b/test/sql/function/list/list_resize.test\nnew file mode 100644\nindex 000000000000..b082ec6766cb\n--- /dev/null\n+++ b/test/sql/function/list/list_resize.test\n@@ -0,0 +1,302 @@\n+# name: test/sql/function/list/list_resize.test\n+# description: test for list_resize()\n+# group: [list]\n+\n+statement ok\n+PRAGMA enable_verification;\n+\n+query I\n+SELECT list_resize([1, 2, 4], 2);\n+----\n+[1, 2]\n+\n+statement ok\n+create table tbl(a int[], b int);\n+\n+statement ok\n+insert into tbl values ([5,4,3], 3);\n+\n+statement ok\n+insert into tbl values ([1,2,3], 5);\n+\n+statement ok\n+insert into tbl values (NULL, 8);\n+\n+statement ok\n+insert into tbl values ([10,11,12], 2);\n+\n+query I\n+select list_resize(a, b) from tbl;\n+----\n+[5, 4, 3]\n+[1, 2, 3, NULL, NULL]\n+NULL\n+[10, 11]\n+\n+query I\n+SELECT list_resize([], 2);\n+----\n+[NULL, NULL]\n+\n+# Strings\n+\n+statement ok\n+create table string_tbl(a string[], b int);\n+\n+statement ok\n+insert into string_tbl values (['abc', 'def'], 3);\n+\n+statement ok\n+insert into string_tbl values (['d', 'ef', 'ghij'], 8);\n+\n+statement ok\n+insert into string_tbl values (['lmnopqrs'], 5);\n+\n+statement ok\n+insert into string_tbl values (['here is a little story about a duck,', 'whose name is harold.', 'He is a cool duck who lives in a cool world'], 5);\n+\n+query I\n+select list_resize(a, b) from string_tbl;\n+----\n+[abc, def, NULL]\n+[d, ef, ghij, NULL, NULL, NULL, NULL, NULL]\n+[lmnopqrs, NULL, NULL, NULL, NULL]\n+[here is a little story about a duck,, whose name is harold., He is a cool duck who lives in a cool world, NULL, NULL]\n+\n+# Null Check\n+\n+query I\n+SELECT list_resize(NULL, 1, 1);\n+----\n+NULL\n+\n+query I\n+SELECT list_resize(NULL, 2, NULL);\n+----\n+NULL\n+\n+query I\n+SELECT list_resize(NULL, NULL, NULL);\n+----\n+NULL\n+\n+statement ok\n+SELECT list_resize([1,2,3], NULL);\n+\n+statement ok\n+CREATE TABLE nulls(l INT[], b INT);\n+\n+statement ok\n+INSERT INTO nulls VALUES ([1, 2, 3], 2), (NULL, 6), ([], 4), ([NULL, NULL, 5, 6, NULL], 6);\n+\n+query I\n+SELECT list_resize(l, b) FROM nulls;\n+----\n+[1, 2]\n+NULL\n+[NULL, NULL, NULL, NULL]\n+[NULL, NULL, 5, 6, NULL, NULL]\n+\n+# Nested Lists\n+\n+query I\n+SELECT list_resize([[1], [1, 2], NULL, [NULL], [], [1, 2, 3]], 3)\n+----\n+[[1], [1, 2], NULL]\n+\n+statement ok\n+create table list_tbl(a int[][], b int);\n+\n+statement ok\n+insert into list_tbl values ([[1, 2, 3], [4, 5, 6]], 3);\n+\n+statement ok\n+insert into list_tbl values ([[7, 8, 9], [10, NULL, 6], [9, 8, 7]], 5);\n+\n+statement ok\n+insert into list_tbl values ([[1, 2, 3], NULL, [4, 5, 6]], 2);\n+\n+query I\n+select list_resize(a, b) from list_tbl;\n+----\n+[[1, 2, 3], [4, 5, 6], NULL]\n+[[7, 8, 9], [10, NULL, 6], [9, 8, 7], NULL, NULL]\n+[[1, 2, 3], NULL]\n+\n+# Structs\n+\n+query I\n+select list_resize([{'i': 1,'j': 2}, NULL, {'i': 3, 'j': 4}], 2);\n+----\n+[{'i': 1, 'j': 2}, NULL]\n+\n+query I\n+select list_resize([{'i': 1,'j': [2, 3]}, NULL, {'i': 1, 'j': [2, 3]}], 4);\n+----\n+[{'i': 1, 'j': [2, 3]}, NULL, {'i': 1, 'j': [2, 3]}, NULL]\n+\n+# Nested Lists of Structs and Structs of Lists in Structs and Lists of Structs in Lists\n+\n+query I\n+select list_resize([{'i': 1,'j': [{'a': 1, 'b': 2}, {'a': 3, 'b': 4}]}, NULL, {'i': 1, 'j': [{'a': 1, 'b': 2}, {'a': 3, 'b': 4}]}], 4);\n+----\n+[{'i': 1, 'j': [{'a': 1, 'b': 2}, {'a': 3, 'b': 4}]}, NULL, {'i': 1, 'j': [{'a': 1, 'b': 2}, {'a': 3, 'b': 4}]}, NULL]\n+\n+query I\n+select list_resize([{'i': 1,'j': [{'a': 1, 'b': [2, 3]}, {'a': 3, 'b': [4, 5]}]}, NULL, {'i': 1, 'j': [{'a': 1, 'b': [2, 3]}, {'a': 3, 'b': [4, 5]}]}], 4);\n+----\n+[{'i': 1, 'j': [{'a': 1, 'b': [2, 3]}, {'a': 3, 'b': [4, 5]}]}, NULL, {'i': 1, 'j': [{'a': 1, 'b': [2, 3]}, {'a': 3, 'b': [4, 5]}]}, NULL]\n+\n+query I\n+select list_resize([[[1, 2, 3], [4, 5, 6]], [[ 7, 8, 9 ]], [[10, 11, 12], [13, 14, 15]]], 2);\n+----\n+[[[1, 2, 3], [4, 5, 6]], [[7, 8, 9]]]\n+\n+query I\n+select list_resize([[[1, 2, 3], [4, 5, 6]], [[ 7, 8, 9 ], NULL], NULL, [NULL], [[10, 11, 12], [13, 14, 15]]], 8);\n+----\n+[[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], NULL], NULL, [NULL], [[10, 11, 12], [13, 14, 15]], NULL, NULL, NULL]\n+\n+# Nested Function\n+\n+query I\n+select list_resize([1, 2, 3], len(list_resize([1, 2, 3], 2)));\n+----\n+[1, 2]\n+\n+query I\n+select list_resize(list_filter([1, 2, 3, 4, 5, 6], x -> x > 1), 4);\n+----\n+[2, 3, 4, 5]\n+\n+# Default Values\n+\n+query I\n+SELECT list_resize([1, 2], 3, 4)\n+----\n+[1, 2, 4]\n+\n+statement ok\n+create table def(tbl int[], b int, d int);\n+\n+statement ok\n+insert into def values ([1, 2, 3], 5, 4);\n+\n+statement ok\n+insert into def values ([4, 5, 6], 6, NULL);\n+\n+statement ok\n+insert into def values ([7, 8, NULL], 3, 10);\n+\n+query I\n+select list_resize(tbl, b, d) from def;\n+----\n+[1, 2, 3, 4, 4]\n+[4, 5, 6, NULL, NULL, NULL]\n+[7, 8, NULL]\n+\n+query I\n+SELECT list_resize([1, 2], 3, NULL)\n+----\n+[1, 2, NULL]\n+\n+# Struct Default Values\n+query I\n+select list_resize([{'i': 1,'j': [2, 3]}, NULL, {'i': 1, 'j': [2, 3]}], 4, {'i': 5, 'j': [10, 10]});\n+----\n+[{'i': 1, 'j': [2, 3]}, NULL, {'i': 1, 'j': [2, 3]}, {'i': 5, 'j': [10, 10]}]\n+\n+query I\n+select list_resize([{'i': 1,'j': [2, 3]}, NULL, {'i': 1, 'j': [2, 3]}], 6, NULL);\n+----\n+[{'i': 1, 'j': [2, 3]}, NULL, {'i': 1, 'j': [2, 3]}, NULL, NULL, NULL]\n+\n+# Lists that exceed standard vector size (2048)\n+statement ok\n+SELECT list_resize(range(10000), 4000);\n+\n+\n+statement ok\n+SELECT list_resize([1, 2, 3], 4000);\n+\n+# Vector_types\n+statement ok\n+CREATE TABLE bool_table(a bool[], b int);\n+\n+statement ok\n+INSERT INTO bool_table VALUES ([true, false, true], 1);\n+\n+statement ok\n+INSERT INTO bool_table VALUES ([false, true, false], 2);\n+\n+statement ok\n+INSERT INTO bool_table VALUES ([true, true, NULL], 3);\n+\n+query I\n+SELECT list_resize(a, b) FROM bool_table;\n+----\n+[true]\n+[false, true]\n+[true, true, NULL]\n+\n+\n+query I\n+SELECT list_resize([true], 2);\n+----\n+[true, NULL]\n+\n+query I\n+SELECT list_resize([false], 2);\n+----\n+[false, NULL]\n+\n+query I\n+SELECT list_resize([NULL], 2);\n+----\n+[NULL, NULL]\n+\n+# Prepared Statements\n+statement ok\n+prepare q1 as select list_resize(?, ?);\n+\n+statement ok\n+prepare q2 as select array_resize(?, ?);\n+\n+foreach q q1 q2\n+\n+query I\n+execute ${q}([1, 2, 3], 4);\n+----\n+[1, 2, 3, NULL]\n+\n+query I\n+execute ${q}([1, 2, 3], 2);\n+----\n+[1, 2]\n+\n+query I\n+execute ${q}([1, 2, 3], 0);\n+----\n+[]\n+\n+query I\n+execute ${q}([1, 2, 3], NULL);\n+----\n+[]\n+\n+query I\n+execute ${q}([1, 2, 3], 1.4);\n+----\n+[1]\n+\n+statement ok\n+execute ${q}([2], 2::TINYINT);\n+\n+endloop\n+\n+query I\n+SELECT list_resize([1, 2, 3]::BIGINT[], 5, 42);\n+----\n+[1, 2, 3, 42, 42]\n+\n+\ndiff --git a/test/sql/function/list/list_resize_error.test b/test/sql/function/list/list_resize_error.test\nnew file mode 100644\nindex 000000000000..2587cf91baf3\n--- /dev/null\n+++ b/test/sql/function/list/list_resize_error.test\n@@ -0,0 +1,59 @@\n+# name: test/sql/function/list/list_resize_error.test\n+# description: test for list_resize() that should error\n+# group: [list]\n+\n+statement ok\n+PRAGMA enable_verification;\n+\n+statement ok\n+prepare q1 as select list_resize(?, ?);\n+\n+statement ok\n+prepare q2 as select array_resize(?, ?);\n+\n+foreach q q1 q2\n+\n+statement error\n+execute ${q}([1, 2, 3], -1);\n+\n+statement error\n+execute ${q}([1, 2, 3], 'a');\n+\n+statement error\n+execute ${q}('cici n est pas een list', 2);\n+\n+statement error\n+execute ${q}([1, 2, 3], 'huh');\n+----\n+Conversion Error: Could not convert string 'huh' to UINT64\n+\n+statement error\n+execute ${q}();\n+\n+statement error\n+execute ${q}([1, 2, 3]);\n+\n+endloop\n+\n+statement ok\n+prepare q3 as select list_resize(?, ?, ?);\n+\n+statement ok\n+prepare q4 as select array_resize(?, ?, ?);\n+\n+foreach q q3 q4\n+\n+statement error\n+execute ${q}([1, 2, 3], 5, 'abc');\n+----\n+Conversion Error: Could not convert string 'abc' to INT32\n+\n+statement error\n+execute ${q}([1, 2, 3], 2, 3, 4);\n+\n+statement error\n+execute ${q}([1, 2, 3], 1, [1, 2, 3]);\n+----\n+Conversion Error: Unimplemented type for cast (INTEGER[] -> INTEGER)\n+\n+endloop\ndiff --git a/test/sql/function/list/list_resize_types.test_slow b/test/sql/function/list/list_resize_types.test_slow\nnew file mode 100644\nindex 000000000000..f3fabc6e48f8\n--- /dev/null\n+++ b/test/sql/function/list/list_resize_types.test_slow\n@@ -0,0 +1,46 @@\n+# name: test/sql/function/list/list_resize_types.test_slow\n+# description: test for list_resize() that take a long time\n+# group: [list]\n+\n+statement ok\n+PRAGMA enable_verification;\n+\n+query I\n+select list_resize(c, 3) from test_vector_types(NULL::INT[], false) t(c);\n+----\n+[-2147483648, 2147483647, NULL]\n+[NULL, NULL, NULL]\n+[NULL, NULL, NULL]\n+[-2147483648, 2147483647, NULL]\n+[-2147483648, 2147483647, NULL]\n+[-2147483648, 2147483647, NULL]\n+[NULL, NULL, NULL]\n+[NULL, NULL, NULL]\n+[3, 5, NULL]\n+[NULL, NULL, NULL]\n+[7, NULL, NULL]\n+\n+query I\n+select list_resize(c, 1) from test_vector_types(NULL::INT[], false) t(c);\n+----\n+[-2147483648]\n+[NULL]\n+[NULL]\n+[-2147483648]\n+[-2147483648]\n+[-2147483648]\n+[NULL]\n+[NULL]\n+[3]\n+[NULL]\n+[7]\n+\n+statement ok\n+CREATE TABLE all_types AS SELECT * FROM test_all_types();\n+\n+foreach colname bool tinyint smallint int bigint hugeint utinyint usmallint uint ubigint date time timestamp timestamp_s timestamp_ms timestamp_ns time_tz timestamp_tz float double dec_4_1 dec_9_4 dec_18_6 dec38_10 uuid interval varchar blob small_enum medium_enum large_enum int_array double_array date_array timestamp_array timestamptz_array varchar_array nested_int_array struct struct_of_arrays array_of_structs map\n+\n+statement ok\n+select list_resize([\"${colname}\"], 2) FROM all_types;\n+\n+endloop\ndiff --git a/test/sql/function/list/list_sort.test b/test/sql/function/list/list_sort.test\nindex 690fe3ff235c..34dd58fb8423 100644\n--- a/test/sql/function/list/list_sort.test\n+++ b/test/sql/function/list/list_sort.test\n@@ -457,4 +457,4 @@ statement ok\n CREATE TABLE health (a VARCHAR[]);\n \n statement ok\n-INSERT INTO health SELECT list_sort(string_to_array(s, ',')) AS a FROM stage;\n\\ No newline at end of file\n+INSERT INTO health SELECT list_sort(string_to_array(s, ',')) AS a FROM stage;\ndiff --git a/test/sql/function/time/test_date_part.test b/test/sql/function/time/test_date_part.test\nindex 77e83bf7d815..69f66e25ff9d 100644\n--- a/test/sql/function/time/test_date_part.test\n+++ b/test/sql/function/time/test_date_part.test\n@@ -182,6 +182,31 @@ ORDER BY 1;\n 20:08:10.33\t{'epoch': 72490, 'second': 10, 'timezone': 0, 'timezone_hour': 0, 'timezone_minute': 0}\n 20:08:10.998\t{'epoch': 72490, 'second': 10, 'timezone': 0, 'timezone_hour': 0, 'timezone_minute': 0}\n \n+# Function-only parts\n+query II\n+SELECT d, epoch_ns(d) FROM times ORDER BY ALL;\n+----\n+00:01:20\t80000000000\n+20:08:10.001\t72490001000000\n+20:08:10.33\t72490330000000\n+20:08:10.998\t72490998000000\n+\n+query II\n+SELECT d, epoch_us(d) FROM times ORDER BY ALL;\n+----\n+00:01:20\t80000000\n+20:08:10.001\t72490001000\n+20:08:10.33\t72490330000\n+20:08:10.998\t72490998000\n+\n+query II\n+SELECT d, epoch_ms(d) FROM times ORDER BY ALL;\n+----\n+00:01:20\t80000\n+20:08:10.001\t72490001\n+20:08:10.33\t72490330\n+20:08:10.998\t72490998\n+\n # Invalid parts\n \n foreach datepart year month day decade century millennium quarter dow isodow doy week isoyear yearweek era\ndiff --git a/test/sql/function/timestamp/date_diff.test_coverage b/test/sql/function/timestamp/date_diff.test_slow\nsimilarity index 99%\nrename from test/sql/function/timestamp/date_diff.test_coverage\nrename to test/sql/function/timestamp/date_diff.test_slow\nindex ffe7264e2186..da08d701c0d9 100644\n--- a/test/sql/function/timestamp/date_diff.test_coverage\n+++ b/test/sql/function/timestamp/date_diff.test_slow\n@@ -1,4 +1,4 @@\n-# name: test/sql/function/timestamp/date_diff.test_coverage\n+# name: test/sql/function/timestamp/date_diff.test_slow\n # description: Test the DATEDIFF function\n # group: [timestamp]\n \ndiff --git a/test/sql/function/timestamp/date_sub.test_coverage b/test/sql/function/timestamp/date_sub.test_slow\nsimilarity index 99%\nrename from test/sql/function/timestamp/date_sub.test_coverage\nrename to test/sql/function/timestamp/date_sub.test_slow\nindex 3c90aa3cc161..7449e656d9f4 100644\n--- a/test/sql/function/timestamp/date_sub.test_coverage\n+++ b/test/sql/function/timestamp/date_sub.test_slow\n@@ -1,4 +1,4 @@\n-# name: test/sql/function/timestamp/date_sub.test_coverage\n+# name: test/sql/function/timestamp/date_sub.test_slow\n # description: Test the DATESUB function\n # group: [timestamp]\n \ndiff --git a/test/sql/function/timestamp/make_date.test b/test/sql/function/timestamp/make_date.test\nindex 3375ba72ed85..50bb6ae13127 100644\n--- a/test/sql/function/timestamp/make_date.test\n+++ b/test/sql/function/timestamp/make_date.test\n@@ -211,6 +211,12 @@ SELECT\n ----\n 2021-12-30 12:41:46.123456\tNULL\tNULL\tNULL\tNULL\tNULL\tNULL\n \n+# From microseconds\n+query II\n+SELECT make_timestamp(0), make_timestamp(1684509234845000);\n+----\n+1970-01-01 00:00:00\t2023-05-19 15:13:54.845\n+\n #\n # Times\n #\ndiff --git a/test/sql/function/timestamp/test_date_part.test b/test/sql/function/timestamp/test_date_part.test\nindex a83aea584235..9b676a92e770 100644\n--- a/test/sql/function/timestamp/test_date_part.test\n+++ b/test/sql/function/timestamp/test_date_part.test\n@@ -536,6 +536,240 @@ NULL\tNULL\n 2022-01-01\t{'year': 2022, 'month': 1, 'months': 1}\n infinity\t{'year': NULL, 'month': NULL, 'months': NULL}\n \n+#\n+# Function-only parts\n+#\n+query II\n+SELECT ts, epoch_us(ts) FROM timestamps ORDER BY ALL;\n+----\n+NULL\tNULL\n+-infinity\tNULL\n+1962-07-31 12:20:48.123456\t-234185951876544\n+1969-01-01 01:03:20.45432\t-31532199545680\n+1992-01-01 01:01:01.4\t694227661400000\n+1992-01-01 01:01:02.2\t694227662200000\n+1992-01-01 01:01:02.4\t694227662400000\n+1993-08-14 08:22:33\t745316553000000\n+1993-08-14 08:22:33.42\t745316553420000\n+2001-04-20 14:42:11\t987777731000000\n+2001-04-20 14:42:11.123\t987777731123000\n+2004-01-31 12:00:00.00005\t1075550400000050\n+2004-01-31 12:00:00.05\t1075550400050000\n+2004-02-01 12:00:00.00005\t1075636800000050\n+2004-02-01 12:00:00.05\t1075636800050000\n+2004-02-29 13:05:47.123456\t1078059947123456\n+2008-01-01 00:00:01.5\t1199145601500000\n+2008-01-01 00:00:01.594\t1199145601594000\n+2008-01-01 00:00:01.794\t1199145601794000\n+2008-01-01 00:00:01.88926\t1199145601889260\n+2008-01-01 00:00:01.894\t1199145601894000\n+2008-01-01 00:00:01.98926\t1199145601989260\n+2008-01-01 00:00:01.99926\t1199145601999260\n+2008-01-01 00:00:11.1\t1199145611100000\n+2019-01-06 04:03:02.123456\t1546747382123456\n+2019-01-06 04:03:02.5\t1546747382500000\n+2020-01-01 00:00:01.88926\t1577836801889260\n+2020-12-31 21:25:58.745232\t1609449958745232\n+2021-04-15 14:55:17.915\t1618498517915000\n+2021-04-15 14:55:17.915\t1618498517915000\n+2021-05-02 12:11:49.5\t1619957509500000\n+2021-12-01 13:54:48.123456\t1638366888123456\n+2022-01-01 00:00:41\t1640995241000000\n+infinity\tNULL\n+\n+# EPOCH_US doesn't  require ICU\n+query II\n+SELECT ts::TIMESTAMPTZ, epoch_us(ts::TIMESTAMPTZ) FROM timestamps ORDER BY ALL;\n+----\n+NULL\tNULL\n+-infinity\tNULL\n+1962-07-31 12:20:48.123456+00\t-234185951876544\n+1969-01-01 01:03:20.45432+00\t-31532199545680\n+1992-01-01 01:01:01.4+00\t694227661400000\n+1992-01-01 01:01:02.2+00\t694227662200000\n+1992-01-01 01:01:02.4+00\t694227662400000\n+1993-08-14 08:22:33+00\t745316553000000\n+1993-08-14 08:22:33.42+00\t745316553420000\n+2001-04-20 14:42:11+00\t987777731000000\n+2001-04-20 14:42:11.123+00\t987777731123000\n+2004-01-31 12:00:00.00005+00\t1075550400000050\n+2004-01-31 12:00:00.05+00\t1075550400050000\n+2004-02-01 12:00:00.00005+00\t1075636800000050\n+2004-02-01 12:00:00.05+00\t1075636800050000\n+2004-02-29 13:05:47.123456+00\t1078059947123456\n+2008-01-01 00:00:01.5+00\t1199145601500000\n+2008-01-01 00:00:01.594+00\t1199145601594000\n+2008-01-01 00:00:01.794+00\t1199145601794000\n+2008-01-01 00:00:01.88926+00\t1199145601889260\n+2008-01-01 00:00:01.894+00\t1199145601894000\n+2008-01-01 00:00:01.98926+00\t1199145601989260\n+2008-01-01 00:00:01.99926+00\t1199145601999260\n+2008-01-01 00:00:11.1+00\t1199145611100000\n+2019-01-06 04:03:02.123456+00\t1546747382123456\n+2019-01-06 04:03:02.5+00\t1546747382500000\n+2020-01-01 00:00:01.88926+00\t1577836801889260\n+2020-12-31 21:25:58.745232+00\t1609449958745232\n+2021-04-15 14:55:17.915+00\t1618498517915000\n+2021-04-15 14:55:17.915+00\t1618498517915000\n+2021-05-02 12:11:49.5+00\t1619957509500000\n+2021-12-01 13:54:48.123456+00\t1638366888123456\n+2022-01-01 00:00:41+00\t1640995241000000\n+infinity\tNULL\n+\n+query II\n+SELECT ts, epoch_ms(ts) FROM timestamps ORDER BY ALL;\n+----\n+NULL\tNULL\n+-infinity\tNULL\n+1962-07-31 12:20:48.123456\t-234185951876\n+1969-01-01 01:03:20.45432\t-31532199545\n+1992-01-01 01:01:01.4\t694227661400\n+1992-01-01 01:01:02.2\t694227662200\n+1992-01-01 01:01:02.4\t694227662400\n+1993-08-14 08:22:33\t745316553000\n+1993-08-14 08:22:33.42\t745316553420\n+2001-04-20 14:42:11\t987777731000\n+2001-04-20 14:42:11.123\t987777731123\n+2004-01-31 12:00:00.00005\t1075550400000\n+2004-01-31 12:00:00.05\t1075550400050\n+2004-02-01 12:00:00.00005\t1075636800000\n+2004-02-01 12:00:00.05\t1075636800050\n+2004-02-29 13:05:47.123456\t1078059947123\n+2008-01-01 00:00:01.5\t1199145601500\n+2008-01-01 00:00:01.594\t1199145601594\n+2008-01-01 00:00:01.794\t1199145601794\n+2008-01-01 00:00:01.88926\t1199145601889\n+2008-01-01 00:00:01.894\t1199145601894\n+2008-01-01 00:00:01.98926\t1199145601989\n+2008-01-01 00:00:01.99926\t1199145601999\n+2008-01-01 00:00:11.1\t1199145611100\n+2019-01-06 04:03:02.123456\t1546747382123\n+2019-01-06 04:03:02.5\t1546747382500\n+2020-01-01 00:00:01.88926\t1577836801889\n+2020-12-31 21:25:58.745232\t1609449958745\n+2021-04-15 14:55:17.915\t1618498517915\n+2021-04-15 14:55:17.915\t1618498517915\n+2021-05-02 12:11:49.5\t1619957509500\n+2021-12-01 13:54:48.123456\t1638366888123\n+2022-01-01 00:00:41\t1640995241000\n+infinity\tNULL\n+\n+# EPOCH_MS doesn't  require ICU\n+query II\n+SELECT ts::TIMESTAMPTZ, epoch_ms(ts::TIMESTAMPTZ) FROM timestamps ORDER BY ALL;\n+----\n+NULL\tNULL\n+-infinity\tNULL\n+1962-07-31 12:20:48.123456+00\t-234185951876\n+1969-01-01 01:03:20.45432+00\t-31532199545\n+1992-01-01 01:01:01.4+00\t694227661400\n+1992-01-01 01:01:02.2+00\t694227662200\n+1992-01-01 01:01:02.4+00\t694227662400\n+1993-08-14 08:22:33+00\t745316553000\n+1993-08-14 08:22:33.42+00\t745316553420\n+2001-04-20 14:42:11+00\t987777731000\n+2001-04-20 14:42:11.123+00\t987777731123\n+2004-01-31 12:00:00.00005+00\t1075550400000\n+2004-01-31 12:00:00.05+00\t1075550400050\n+2004-02-01 12:00:00.00005+00\t1075636800000\n+2004-02-01 12:00:00.05+00\t1075636800050\n+2004-02-29 13:05:47.123456+00\t1078059947123\n+2008-01-01 00:00:01.5+00\t1199145601500\n+2008-01-01 00:00:01.594+00\t1199145601594\n+2008-01-01 00:00:01.794+00\t1199145601794\n+2008-01-01 00:00:01.88926+00\t1199145601889\n+2008-01-01 00:00:01.894+00\t1199145601894\n+2008-01-01 00:00:01.98926+00\t1199145601989\n+2008-01-01 00:00:01.99926+00\t1199145601999\n+2008-01-01 00:00:11.1+00\t1199145611100\n+2019-01-06 04:03:02.123456+00\t1546747382123\n+2019-01-06 04:03:02.5+00\t1546747382500\n+2020-01-01 00:00:01.88926+00\t1577836801889\n+2020-12-31 21:25:58.745232+00\t1609449958745\n+2021-04-15 14:55:17.915+00\t1618498517915\n+2021-04-15 14:55:17.915+00\t1618498517915\n+2021-05-02 12:11:49.5+00\t1619957509500\n+2021-12-01 13:54:48.123456+00\t1638366888123\n+2022-01-01 00:00:41+00\t1640995241000\n+infinity\tNULL\n+\n+query II\n+SELECT ts, epoch_ns(ts) FROM timestamps ORDER BY ALL;\n+----\n+NULL\tNULL\n+-infinity\tNULL\n+1962-07-31 12:20:48.123456\t-234185951876544000\n+1969-01-01 01:03:20.45432\t-31532199545680000\n+1992-01-01 01:01:01.4\t694227661400000000\n+1992-01-01 01:01:02.2\t694227662200000000\n+1992-01-01 01:01:02.4\t694227662400000000\n+1993-08-14 08:22:33\t745316553000000000\n+1993-08-14 08:22:33.42\t745316553420000000\n+2001-04-20 14:42:11\t987777731000000000\n+2001-04-20 14:42:11.123\t987777731123000000\n+2004-01-31 12:00:00.00005\t1075550400000050000\n+2004-01-31 12:00:00.05\t1075550400050000000\n+2004-02-01 12:00:00.00005\t1075636800000050000\n+2004-02-01 12:00:00.05\t1075636800050000000\n+2004-02-29 13:05:47.123456\t1078059947123456000\n+2008-01-01 00:00:01.5\t1199145601500000000\n+2008-01-01 00:00:01.594\t1199145601594000000\n+2008-01-01 00:00:01.794\t1199145601794000000\n+2008-01-01 00:00:01.88926\t1199145601889260000\n+2008-01-01 00:00:01.894\t1199145601894000000\n+2008-01-01 00:00:01.98926\t1199145601989260000\n+2008-01-01 00:00:01.99926\t1199145601999260000\n+2008-01-01 00:00:11.1\t1199145611100000000\n+2019-01-06 04:03:02.123456\t1546747382123456000\n+2019-01-06 04:03:02.5\t1546747382500000000\n+2020-01-01 00:00:01.88926\t1577836801889260000\n+2020-12-31 21:25:58.745232\t1609449958745232000\n+2021-04-15 14:55:17.915\t1618498517915000000\n+2021-04-15 14:55:17.915\t1618498517915000000\n+2021-05-02 12:11:49.5\t1619957509500000000\n+2021-12-01 13:54:48.123456\t1638366888123456000\n+2022-01-01 00:00:41\t1640995241000000000\n+infinity\tNULL\n+\n+# EPOCH_NS doesn't  require ICU\n+query II\n+SELECT ts::TIMESTAMPTZ, epoch_ns(ts::TIMESTAMPTZ) FROM timestamps ORDER BY ALL;\n+----\n+NULL\tNULL\n+-infinity\tNULL\n+1962-07-31 12:20:48.123456+00\t-234185951876544000\n+1969-01-01 01:03:20.45432+00\t-31532199545680000\n+1992-01-01 01:01:01.4+00\t694227661400000000\n+1992-01-01 01:01:02.2+00\t694227662200000000\n+1992-01-01 01:01:02.4+00\t694227662400000000\n+1993-08-14 08:22:33+00\t745316553000000000\n+1993-08-14 08:22:33.42+00\t745316553420000000\n+2001-04-20 14:42:11+00\t987777731000000000\n+2001-04-20 14:42:11.123+00\t987777731123000000\n+2004-01-31 12:00:00.00005+00\t1075550400000050000\n+2004-01-31 12:00:00.05+00\t1075550400050000000\n+2004-02-01 12:00:00.00005+00\t1075636800000050000\n+2004-02-01 12:00:00.05+00\t1075636800050000000\n+2004-02-29 13:05:47.123456+00\t1078059947123456000\n+2008-01-01 00:00:01.5+00\t1199145601500000000\n+2008-01-01 00:00:01.594+00\t1199145601594000000\n+2008-01-01 00:00:01.794+00\t1199145601794000000\n+2008-01-01 00:00:01.88926+00\t1199145601889260000\n+2008-01-01 00:00:01.894+00\t1199145601894000000\n+2008-01-01 00:00:01.98926+00\t1199145601989260000\n+2008-01-01 00:00:01.99926+00\t1199145601999260000\n+2008-01-01 00:00:11.1+00\t1199145611100000000\n+2019-01-06 04:03:02.123456+00\t1546747382123456000\n+2019-01-06 04:03:02.5+00\t1546747382500000000\n+2020-01-01 00:00:01.88926+00\t1577836801889260000\n+2020-12-31 21:25:58.745232+00\t1609449958745232000\n+2021-04-15 14:55:17.915+00\t1618498517915000000\n+2021-04-15 14:55:17.915+00\t1618498517915000000\n+2021-05-02 12:11:49.5+00\t1619957509500000000\n+2021-12-01 13:54:48.123456+00\t1638366888123456000\n+2022-01-01 00:00:41+00\t1640995241000000000\n+infinity\tNULL\n+\n # Invalid parts\n statement error\n SELECT ts, DATE_PART(['duck', 'month', 'day'], ts) AS parts\ndiff --git a/test/sql/function/timestamp/test_icu_makedate.test b/test/sql/function/timestamp/test_icu_makedate.test\nindex 1d31b9b6347e..15d37016a9a9 100644\n--- a/test/sql/function/timestamp/test_icu_makedate.test\n+++ b/test/sql/function/timestamp/test_icu_makedate.test\n@@ -124,6 +124,12 @@ SELECT make_timestamptz(2021, -1, 1, 0, 0, 0) mts\n ----\n 2020-11-01 00:00:00-07\n \n+# From microseconds\n+query II\n+SELECT make_timestamptz(0), make_timestamptz(1684509234845000);\n+----\n+1969-12-31 16:00:00-08\t2023-05-19 08:13:54.845-07\n+\n #\n # Argument time zones\n #\ndiff --git a/test/sql/generated_columns/virtual/natural_join.test_coverage b/test/sql/generated_columns/virtual/natural_join.test_slow\nsimilarity index 82%\nrename from test/sql/generated_columns/virtual/natural_join.test_coverage\nrename to test/sql/generated_columns/virtual/natural_join.test_slow\nindex 5c6e0eee51ca..72460081cf80 100644\n--- a/test/sql/generated_columns/virtual/natural_join.test_coverage\n+++ b/test/sql/generated_columns/virtual/natural_join.test_slow\n@@ -1,4 +1,4 @@\n-# name: test/sql/generated_columns/virtual/natural_join.test_coverage\n+# name: test/sql/generated_columns/virtual/natural_join.test_slow\n # group: [virtual]\n \n statement ok\ndiff --git a/test/sql/index/art/art_eager_constraint_checking.test b/test/sql/index/art/constraints/test_art_eager_constraint_checking.test\nsimilarity index 95%\nrename from test/sql/index/art/art_eager_constraint_checking.test\nrename to test/sql/index/art/constraints/test_art_eager_constraint_checking.test\nindex ea10aac83d60..23a5bed2acd9 100644\n--- a/test/sql/index/art/art_eager_constraint_checking.test\n+++ b/test/sql/index/art/constraints/test_art_eager_constraint_checking.test\n@@ -1,6 +1,9 @@\n-# name: test/sql/index/art/art_eager_constraint_checking.test\n+# name: test/sql/index/art/constraints/test_art_eager_constraint_checking.test\n # description: Contains different tests triggering the eager ART constraint violation\n-# group: [art]\n+# group: [constraints]\n+\n+statement ok\n+PRAGMA enable_verification\n \n # issue 7182\n \ndiff --git a/test/sql/index/art/index_large_abort.test b/test/sql/index/art/constraints/test_art_large_abort.test\nsimilarity index 90%\nrename from test/sql/index/art/index_large_abort.test\nrename to test/sql/index/art/constraints/test_art_large_abort.test\nindex 55f06803cdb9..06c8c27307c1 100644\n--- a/test/sql/index/art/index_large_abort.test\n+++ b/test/sql/index/art/constraints/test_art_large_abort.test\n@@ -1,6 +1,6 @@\n-# name: test/sql/index/art/index_large_abort.test\n+# name: test/sql/index/art/constraints/test_art_large_abort.test\n # description: Test abort of large insertion of negative values into index and verify that all elements are correctly deleted\n-# group: [art]\n+# group: [constraints]\n \n statement ok\n PRAGMA enable_verification\ndiff --git a/test/sql/index/art/test_art_create_index_delete.test b/test/sql/index/art/create_drop/test_art_create_index_delete.test\nsimilarity index 75%\nrename from test/sql/index/art/test_art_create_index_delete.test\nrename to test/sql/index/art/create_drop/test_art_create_index_delete.test\nindex d81dbc24f79b..ff6bcb3fda7c 100644\n--- a/test/sql/index/art/test_art_create_index_delete.test\n+++ b/test/sql/index/art/create_drop/test_art_create_index_delete.test\n@@ -1,12 +1,12 @@\n-# name: test/sql/index/art/test_art_create_index_delete.test\n-# description: ART Create index with deletes\n-# group: [art]\n+# name: test/sql/index/art/create_drop/test_art_create_index_delete.test\n+# description: Test ART creation with deletions and multiple connections\n+# group: [create_drop]\n \n statement ok\n-SET immediate_transaction_mode=true\n+PRAGMA enable_verification\n \n statement ok\n-PRAGMA enable_verification\n+SET immediate_transaction_mode=true\n \n statement ok\n CREATE TABLE integers(i INTEGER)\n@@ -42,7 +42,7 @@ query I\n SELECT * FROM integers WHERE i=2;\n ----\n \n-# con1 still sees the old state\n+# connection 1 still sees the old state\n query I con1\n SELECT * FROM integers WHERE i=1;\n ----\ndiff --git a/test/sql/index/art/test_art_create_index_duplicate_deletes.test b/test/sql/index/art/create_drop/test_art_create_index_duplicate_deletes.test\nsimilarity index 71%\nrename from test/sql/index/art/test_art_create_index_duplicate_deletes.test\nrename to test/sql/index/art/create_drop/test_art_create_index_duplicate_deletes.test\nindex 1f192f96d186..72594dbd72d8 100644\n--- a/test/sql/index/art/test_art_create_index_duplicate_deletes.test\n+++ b/test/sql/index/art/create_drop/test_art_create_index_duplicate_deletes.test\n@@ -1,6 +1,6 @@\n-# name: test/sql/index/art/test_art_create_index_duplicate_deletes.test\n-# description: ART Create index with deletes\n-# group: [art]\n+# name: test/sql/index/art/create_drop/test_art_create_index_duplicate_deletes.test\n+# description: Test ART index creation with deletes\n+# group: [create_drop]\n \n statement ok\n PRAGMA enable_verification\ndiff --git a/test/sql/index/art/test_art_big_range.test b/test/sql/index/art/create_drop/test_art_create_many_duplicates.test\nsimilarity index 84%\nrename from test/sql/index/art/test_art_big_range.test\nrename to test/sql/index/art/create_drop/test_art_create_many_duplicates.test\nindex bea9b590affa..4e7000ff816e 100644\n--- a/test/sql/index/art/test_art_big_range.test\n+++ b/test/sql/index/art/create_drop/test_art_create_many_duplicates.test\n@@ -1,6 +1,6 @@\n-# name: test/sql/index/art/test_art_big_range.test\n-# description: ART Simple Big Range\n-# group: [art]\n+# name: test/sql/index/art/create_drop/test_art_create_many_duplicates.test\n+# description: Test ART creation with many duplicates in leaves\n+# group: [create_drop]\n \n statement ok\n PRAGMA enable_verification\ndiff --git a/test/sql/index/art/test_art_big_range_deletions.test b/test/sql/index/art/create_drop/test_art_create_many_duplicates_deletes.test\nsimilarity index 61%\nrename from test/sql/index/art/test_art_big_range_deletions.test\nrename to test/sql/index/art/create_drop/test_art_create_many_duplicates_deletes.test\nindex 2794e381ce03..d77c6804dd3a 100644\n--- a/test/sql/index/art/test_art_big_range_deletions.test\n+++ b/test/sql/index/art/create_drop/test_art_create_many_duplicates_deletes.test\n@@ -1,11 +1,10 @@\n-# name: test/sql/index/art/test_art_big_range_deletions.test\n-# description: ART Simple Big Range\n-# group: [art]\n+# name: test/sql/index/art/create_drop/test_art_create_many_duplicates_deletes.test\n+# description: Test ART creation with many duplicates in leaves and deletions\n+# group: [create_drop]\n \n statement ok\n PRAGMA enable_verification\n \n-# now perform a an index creation and scan with deletions with a second transaction\n statement ok\n BEGIN TRANSACTION\n \n@@ -30,18 +29,12 @@ INSERT INTO integers SELECT * FROM repeat(5, 1500) t1(i)\n statement ok\n COMMIT\n \n-# second transaction: begin and verify counts\n-# now delete entries in the first transaction\n statement ok\n DELETE FROM integers WHERE i = 5\n \n-# verify that the counts are still correct in the second transaction\n-# create an index in the first transaction now\n statement ok\n CREATE INDEX i_index ON integers(i)\n \n-# verify that the counts are still correct for con2\n-# do a bunch of queries in the first transaction\n query I\n SELECT count(i) FROM integers WHERE i > 1 AND i < 3\n ----\n@@ -65,6 +58,4 @@ SELECT count(i) FROM integers WHERE i < 4\n query I\n SELECT count(i) FROM integers WHERE i < 5\n ----\n-6000\n-\n-# verify that the counts are still correct in the second transaction\n+6000\n\\ No newline at end of file\ndiff --git a/test/sql/index/art/test_create_unique_index.test b/test/sql/index/art/create_drop/test_art_create_unique.test\nsimilarity index 65%\nrename from test/sql/index/art/test_create_unique_index.test\nrename to test/sql/index/art/create_drop/test_art_create_unique.test\nindex 69a3b8698fbb..afffc934e7ff 100644\n--- a/test/sql/index/art/test_create_unique_index.test\n+++ b/test/sql/index/art/create_drop/test_art_create_unique.test\n@@ -1,9 +1,6 @@\n-# name: test/sql/index/art/test_create_unique_index.test\n-# description: CREATE UNIQUE INDEX\n-# group: [art]\n-\n-statement ok\n-PRAGMA enable_verification\n+# name: test/sql/index/art/create_drop/test_art_create_unique.test\n+# description: Test unique ART creation\n+# group: [create_drop]\n \n statement ok\n PRAGMA enable_verification\ndiff --git a/test/sql/index/art/test_drop_index.test b/test/sql/index/art/create_drop/test_art_drop_index.test\nsimilarity index 87%\nrename from test/sql/index/art/test_drop_index.test\nrename to test/sql/index/art/create_drop/test_art_drop_index.test\nindex 05818d311cae..9f1e92612fe8 100644\n--- a/test/sql/index/art/test_drop_index.test\n+++ b/test/sql/index/art/create_drop/test_art_drop_index.test\n@@ -1,6 +1,6 @@\n-# name: test/sql/index/art/test_drop_index.test\n-# description: Test Drop Index\n-# group: [art]\n+# name: test/sql/index/art/create_drop/test_art_drop_index.test\n+# description: Test the DROP INDEX statement\n+# group: [create_drop]\n \n statement ok\n PRAGMA enable_verification\ndiff --git a/test/sql/index/art/test_invalid_index.test b/test/sql/index/art/create_drop/test_art_invalid_create_index.test\nsimilarity index 82%\nrename from test/sql/index/art/test_invalid_index.test\nrename to test/sql/index/art/create_drop/test_art_invalid_create_index.test\nindex 2b9bd425c33d..06e6fb6953b3 100644\n--- a/test/sql/index/art/test_invalid_index.test\n+++ b/test/sql/index/art/create_drop/test_art_invalid_create_index.test\n@@ -1,6 +1,6 @@\n-# name: test/sql/index/art/test_invalid_index.test\n-# description: Index Exceptions\n-# group: [art]\n+# name: test/sql/index/art/create_drop/test_art_invalid_create_index.test\n+# description: Test triggering different exceptions\n+# group: [create_drop]\n \n statement ok\n PRAGMA enable_verification\ndiff --git a/test/sql/index/art/test_many_versions.test b/test/sql/index/art/create_drop/test_art_many_versions.test\nsimilarity index 94%\nrename from test/sql/index/art/test_many_versions.test\nrename to test/sql/index/art/create_drop/test_art_many_versions.test\nindex cfbefd1459fa..a0e294c9a487 100644\n--- a/test/sql/index/art/test_many_versions.test\n+++ b/test/sql/index/art/create_drop/test_art_many_versions.test\n@@ -1,6 +1,6 @@\n-# name: test/sql/index/art/test_many_versions.test\n+# name: test/sql/index/art/create_drop/test_art_many_versions.test\n # description: Test ART index creation with many versions\n-# group: [art]\n+# group: [create_drop]\n \n statement ok\n SET immediate_transaction_mode=true\ndiff --git a/test/sql/index/art/test_art_single_value.test b/test/sql/index/art/create_drop/test_art_single_value.test\nsimilarity index 83%\nrename from test/sql/index/art/test_art_single_value.test\nrename to test/sql/index/art/create_drop/test_art_single_value.test\nindex 6c8368093cf8..eafda922effc 100644\n--- a/test/sql/index/art/test_art_single_value.test\n+++ b/test/sql/index/art/create_drop/test_art_single_value.test\n@@ -1,6 +1,6 @@\n-# name: test/sql/index/art/test_art_single_value.test\n-# description: Test ART index with single value\n-# group: [art]\n+# name: test/sql/index/art/create_drop/test_art_single_value.test\n+# description: Test an ART containing a single value\n+# group: [create_drop]\n \n statement ok\n PRAGMA enable_verification\ndiff --git a/test/sql/index/art/test_art_linear_insert.test_slow b/test/sql/index/art/insert_update_delete/test_art_linear_insert.test_slow\nsimilarity index 89%\nrename from test/sql/index/art/test_art_linear_insert.test_slow\nrename to test/sql/index/art/insert_update_delete/test_art_linear_insert.test_slow\nindex 1936bc146df7..629e7edbfe43 100644\n--- a/test/sql/index/art/test_art_linear_insert.test_slow\n+++ b/test/sql/index/art/insert_update_delete/test_art_linear_insert.test_slow\n@@ -1,6 +1,9 @@\n-# name: test/sql/index/art/test_art_linear_insert.test_slow\n+# name: test/sql/index/art/insert_update_delete/test_art_linear_insert.test_slow\n # description: Test ART index with linear insertions and deletes\n-# group: [art]\n+# group: [insert_update_delete]\n+\n+statement ok\n+PRAGMA enable_verification\n \n statement ok\n PRAGMA force_index_join\n@@ -35,7 +38,7 @@ SELECT COUNT(*)-${i} FROM integers WHERE i >= 0;\n \n endloop\n \n-#now delete data sequentially\n+# now delete data sequentially\n \n loop i 1 5\n \n@@ -69,7 +72,7 @@ SELECT COUNT(*)-${i} FROM integers WHERE i >= 0;\n \n endloop\n \n-#now delete data sequentially\n+# now delete data sequentially\n \n loop i 1 17\n \n@@ -84,7 +87,6 @@ SELECT COUNT(*)+${i} FROM integers WHERE i >= 0;\n \n endloop\n \n-\n # BREAKING POINT: [48]\n loop i 1 49\n \n@@ -104,7 +106,7 @@ SELECT COUNT(*)-${i} FROM integers WHERE i >= 0;\n \n endloop\n \n-#now delete data sequentially\n+# now delete data sequentially\n \n loop i 1 49\n \n@@ -138,7 +140,7 @@ SELECT COUNT(*)-${i} FROM integers WHERE i >= 0;\n \n endloop\n \n-#now delete data sequentially\n+# now delete data sequentially\n \n loop i 1 257\n \n@@ -173,7 +175,7 @@ SELECT COUNT(*)-${i} FROM integers WHERE i >= 0;\n \n endloop\n \n-#now delete data sequentially\n+# now delete data sequentially\n \n loop i 1 1025\n \ndiff --git a/test/sql/index/art/test_art_non_linear_insertion.test_slow b/test/sql/index/art/insert_update_delete/test_art_non_linear_insertion.test_slow\nsimilarity index 71%\nrename from test/sql/index/art/test_art_non_linear_insertion.test_slow\nrename to test/sql/index/art/insert_update_delete/test_art_non_linear_insertion.test_slow\nindex d356aae09824..f7cb1d3df0e9 100644\n--- a/test/sql/index/art/test_art_non_linear_insertion.test_slow\n+++ b/test/sql/index/art/insert_update_delete/test_art_non_linear_insertion.test_slow\n@@ -1,6 +1,9 @@\n-# name: test/sql/index/art/test_art_non_linear_insertion.test_slow\n-# description: Test ART index with non-linear insertion\n-# group: [art]\n+# name: test/sql/index/art/insert_update_delete/test_art_non_linear_insertion.test_slow\n+# description: Test Anon-linear insertions into an ART\n+# group: [insert_update_delete]\n+\n+statement ok\n+PRAGMA enable_verification\n \n statement ok\n CREATE TABLE integers(i INTEGER)\n@@ -24,7 +27,6 @@ INSERT INTO integers SELECT * FROM range(0, 1000, 2)\n \n endloop\n \n-\n query I\n SELECT COUNT(*) FROM integers\n ----\ndiff --git a/test/sql/index/art/test_art_index_random_deletion.test_slow b/test/sql/index/art/insert_update_delete/test_art_random_deletion.test_slow\nsimilarity index 81%\nrename from test/sql/index/art/test_art_index_random_deletion.test_slow\nrename to test/sql/index/art/insert_update_delete/test_art_random_deletion.test_slow\nindex 143a3428cac0..30a87f23f27e 100644\n--- a/test/sql/index/art/test_art_index_random_deletion.test_slow\n+++ b/test/sql/index/art/insert_update_delete/test_art_random_deletion.test_slow\n@@ -1,6 +1,6 @@\n-# name: test/sql/index/art/test_art_index_random_deletion.test_slow\n-# description: Test ART index with random deletions\n-# group: [art]\n+# name: test/sql/index/art/insert_update_delete/test_art_random_deletion.test_slow\n+# description: Test ART index with a random deletion\n+# group: [insert_update_delete]\n \n statement ok\n PRAGMA force_index_join\ndiff --git a/test/sql/index/art/test_art_sel_vector.test b/test/sql/index/art/insert_update_delete/test_art_sel_vector.test\nsimilarity index 88%\nrename from test/sql/index/art/test_art_sel_vector.test\nrename to test/sql/index/art/insert_update_delete/test_art_sel_vector.test\nindex 2ff87e615aab..6948b75d2c8f 100644\n--- a/test/sql/index/art/test_art_sel_vector.test\n+++ b/test/sql/index/art/insert_update_delete/test_art_sel_vector.test\n@@ -1,6 +1,6 @@\n-# name: test/sql/index/art/test_art_sel_vector.test\n-# description: Test ART index with selection vector\n-# group: [art]\n+# name: test/sql/index/art/insert_update_delete/test_art_sel_vector.test\n+# description: Test ART usage with selection vectors\n+# group: [insert_update_delete]\n \n statement ok\n PRAGMA enable_verification\ndiff --git a/test/sql/index/art/test_art_simple_update.test b/test/sql/index/art/insert_update_delete/test_art_simple_update.test\nsimilarity index 78%\nrename from test/sql/index/art/test_art_simple_update.test\nrename to test/sql/index/art/insert_update_delete/test_art_simple_update.test\nindex 6627a3706fd9..811d895591a3 100644\n--- a/test/sql/index/art/test_art_simple_update.test\n+++ b/test/sql/index/art/insert_update_delete/test_art_simple_update.test\n@@ -1,6 +1,6 @@\n-# name: test/sql/index/art/test_art_simple_update.test\n-# description: Test ART index with simple updates\n-# group: [art]\n+# name: test/sql/index/art/insert_update_delete/test_art_simple_update.test\n+# description: Test simple updates on the ART\n+# group: [insert_update_delete]\n \n statement ok\n PRAGMA enable_verification\n@@ -42,5 +42,4 @@ SELECT * FROM integers WHERE i > 0\n 1\n \n statement ok con1\n-ROLLBACK\n-\n+ROLLBACK\n\\ No newline at end of file\ndiff --git a/test/sql/index/art/test_art_update.test b/test/sql/index/art/insert_update_delete/test_art_update.test\nsimilarity index 74%\nrename from test/sql/index/art/test_art_update.test\nrename to test/sql/index/art/insert_update_delete/test_art_update.test\nindex c1cabd32d213..dca395665991 100644\n--- a/test/sql/index/art/test_art_update.test\n+++ b/test/sql/index/art/insert_update_delete/test_art_update.test\n@@ -1,6 +1,6 @@\n-# name: test/sql/index/art/test_art_update.test\n-# description: Test updates on ART index\n-# group: [art]\n+# name: test/sql/index/art/insert_update_delete/test_art_update.test\n+# description: Test updates on the ART\n+# group: [insert_update_delete]\n \n statement ok\n PRAGMA enable_verification\n@@ -26,5 +26,4 @@ DELETE FROM integers WHERE rowid=1\n query II\n SELECT * FROM integers WHERE j>5\n ----\n-1\t10\n-\n+1\t10\n\\ No newline at end of file\ndiff --git a/test/sql/index/art/test_art_update_other_column.test b/test/sql/index/art/insert_update_delete/test_art_update_other_column.test\nsimilarity index 91%\nrename from test/sql/index/art/test_art_update_other_column.test\nrename to test/sql/index/art/insert_update_delete/test_art_update_other_column.test\nindex 52ba36b8c1c1..1e1ec0a0fae3 100644\n--- a/test/sql/index/art/test_art_update_other_column.test\n+++ b/test/sql/index/art/insert_update_delete/test_art_update_other_column.test\n@@ -1,13 +1,12 @@\n-# name: test/sql/index/art/test_art_update_other_column.test\n-# description: Test ART index on table with updates to other columns\n-# group: [art]\n+# name: test/sql/index/art/insert_update_delete/test_art_update_other_column.test\n+# description: Test an ART index on a table with updates to other columns\n+# group: [insert_update_delete]\n \n statement ok\n PRAGMA enable_verification\n \n require skip_reload\n \n-\n statement ok con1\n CREATE TABLE integers(i BIGINT, j INTEGER, k VARCHAR)\n \ndiff --git a/test/sql/index/art/test_art_update_same_value.test b/test/sql/index/art/insert_update_delete/test_art_update_same_value.test\nsimilarity index 84%\nrename from test/sql/index/art/test_art_update_same_value.test\nrename to test/sql/index/art/insert_update_delete/test_art_update_same_value.test\nindex 786fd43ca425..a41721c93ec7 100644\n--- a/test/sql/index/art/test_art_update_same_value.test\n+++ b/test/sql/index/art/insert_update_delete/test_art_update_same_value.test\n@@ -1,6 +1,6 @@\n-# name: test/sql/index/art/test_art_update_same_value.test\n-# description: Test ART index with multiple updates on the same value\n-# group: [art]\n+# name: test/sql/index/art/insert_update_delete/test_art_update_same_value.test\n+# description: Test the ART index with multiple updates on the same value\n+# group: [insert_update_delete]\n \n statement ok\n PRAGMA enable_verification\ndiff --git a/test/sql/index/art/test_art_big_update.test_coverage b/test/sql/index/art/insert_update_delete/test_art_update_scans.test_slow\nsimilarity index 84%\nrename from test/sql/index/art/test_art_big_update.test_coverage\nrename to test/sql/index/art/insert_update_delete/test_art_update_scans.test_slow\nindex fe66555c1b0c..c17916a78b60 100644\n--- a/test/sql/index/art/test_art_big_update.test_coverage\n+++ b/test/sql/index/art/insert_update_delete/test_art_update_scans.test_slow\n@@ -1,6 +1,9 @@\n-# name: test/sql/index/art/test_art_big_update.test_coverage\n-# description: Test updates resulting from big index scans\n-# group: [art]\n+# name: test/sql/index/art/insert_update_delete/test_art_update_scans.test_slow\n+# description: Test mixing updates, insertions, deletions and big scans\n+# group: [insert_update_delete]\n+\n+statement ok\n+PRAGMA enable_verification\n \n statement ok\n BEGIN TRANSACTION\ndiff --git a/test/sql/index/art/test_art_fuzzer_issues.test b/test/sql/index/art/issues/test_art_fuzzer.test\nsimilarity index 96%\nrename from test/sql/index/art/test_art_fuzzer_issues.test\nrename to test/sql/index/art/issues/test_art_fuzzer.test\nindex d5de0e61590c..73a40a0cc0d0 100644\n--- a/test/sql/index/art/test_art_fuzzer_issues.test\n+++ b/test/sql/index/art/issues/test_art_fuzzer.test\n@@ -1,6 +1,6 @@\n-# name: test/sql/index/art/test_art_fuzzer_issues.test\n+# name: test/sql/index/art/issues/test_art_fuzzer.test\n # description: Test different ART fuzzer issues\n-# group: [art]\n+# group: [issues]\n \n statement ok\n PRAGMA enable_verification\ndiff --git a/test/sql/index/art/test_art_persisted.test b/test/sql/index/art/issues/test_art_fuzzer_persisted.test\nsimilarity index 82%\nrename from test/sql/index/art/test_art_persisted.test\nrename to test/sql/index/art/issues/test_art_fuzzer_persisted.test\nindex 5407e78d56de..e3710c01fa81 100644\n--- a/test/sql/index/art/test_art_persisted.test\n+++ b/test/sql/index/art/issues/test_art_fuzzer_persisted.test\n@@ -1,6 +1,6 @@\n-# name: test/sql/index/art/test_art_persisted.test\n+# name: test/sql/index/art/issues/test_art_fuzzer_persisted.test\n # description: Test ART fuzzer issue with persisted database\n-# group: [art]\n+# group: [issues]\n \n statement ok\n PRAGMA enable_verification\ndiff --git a/test/sql/index/art/test_art_create_index.test b/test/sql/index/art/issues/test_art_issue_4976.test\nsimilarity index 69%\nrename from test/sql/index/art/test_art_create_index.test\nrename to test/sql/index/art/issues/test_art_issue_4976.test\nindex 9f88af5dc60d..d32b361aacf4 100644\n--- a/test/sql/index/art/test_art_create_index.test\n+++ b/test/sql/index/art/issues/test_art_issue_4976.test\n@@ -1,8 +1,7 @@\n-# name: test/sql/index/art/test_art_create_index.test\n-# description: CREATE INDEX\n-# group: [art]\n+# name: test/sql/index/art/issues/test_art_issue_4976.test\n+# description: Test CREATE INDEX on default timestamp column\n+# group: [issues]\n \n-# test to reproduce issue #4976\n statement ok\n PRAGMA enable_verification\n \ndiff --git a/test/sql/index/art/issue_6603_index_join.test b/test/sql/index/art/issues/test_art_issue_6603.test\nsimilarity index 89%\nrename from test/sql/index/art/issue_6603_index_join.test\nrename to test/sql/index/art/issues/test_art_issue_6603.test\nindex 69827af1f4ad..ed5aa7da42d1 100644\n--- a/test/sql/index/art/issue_6603_index_join.test\n+++ b/test/sql/index/art/issues/test_art_issue_6603.test\n@@ -1,6 +1,6 @@\n-# name: test/sql/index/art/issue_6603_index_join.test\n-# description: Test index join\n-# group: [art]\n+# name: test/sql/index/art/issues/test_art_issue_6603.test\n+# description: Test index join issue 6603\n+# group: [issues]\n \n statement ok\n PRAGMA enable_verification\ndiff --git a/test/sql/index/art/issue_6799_index_join.test b/test/sql/index/art/issues/test_art_issue_6799.test\nsimilarity index 83%\nrename from test/sql/index/art/issue_6799_index_join.test\nrename to test/sql/index/art/issues/test_art_issue_6799.test\nindex d0f7764e7b53..64783f789ec6 100644\n--- a/test/sql/index/art/issue_6799_index_join.test\n+++ b/test/sql/index/art/issues/test_art_issue_6799.test\n@@ -1,6 +1,6 @@\n-# name: test/sql/index/art/issue_6799_index_join.test\n-# description: Test index join\n-# group: [art]\n+# name: test/sql/index/art/issues/test_art_issue_6799.test\n+# description: Test index join issue 6799\n+# group: [issues]\n \n statement ok\n PRAGMA enable_verification\ndiff --git a/test/sql/index/art/art_issue_7349.test b/test/sql/index/art/issues/test_art_issue_7349.test\nsimilarity index 85%\nrename from test/sql/index/art/art_issue_7349.test\nrename to test/sql/index/art/issues/test_art_issue_7349.test\nindex 958bb4cbf650..61428a233355 100644\n--- a/test/sql/index/art/art_issue_7349.test\n+++ b/test/sql/index/art/issues/test_art_issue_7349.test\n@@ -1,6 +1,9 @@\n-# name: test/sql/index/art/art_issue_7349.test\n+# name: test/sql/index/art/issues/test_art_issue_7349.test\n # description: Test ensuring that we do not rollback twice when throwing an exception during commit\n-# group: [art]\n+# group: [issues]\n+\n+statement ok\n+PRAGMA enable_verification\n \n # setting up the different tables and the UNIQUE index\n \n@@ -34,7 +37,8 @@ INSERT INTO tab0 VALUES('2006-12-25');\n \n statement error\n INSERT INTO td VALUES (date '2008-02-29');\n-Constraint Error: Failed to commit: Constraint Error: PRIMARY KEY or UNIQUE constraint violated: duplicate key \"2008-02-29\"\n+----\n+Constraint Error: Duplicate key \"tz: 2008-02-29\" violates unique constraint. If this is an unexpected constraint violation please double check with the known index limitations section in our documentation (docs - sql - indexes).\n \n statement ok\n COMMIT TRANSACTION;\n@@ -66,10 +70,14 @@ START TRANSACTION;\n statement ok\n INSERT INTO tab0 VALUES('2006-12-25');\n \n-statement error\n+statement ok\n INSERT INTO td VALUES('2006-12-25');\n-----\n-Constraint Error: Duplicate key \"tz: 2006-12-25\" violates unique constraint. If this is an unexpected constraint violation please double check with the known index limitations section in our documentation (docs - sql - indexes).\n \n statement ok\n COMMIT TRANSACTION;\n+\n+query I\n+SELECT tz FROM td ORDER BY tz;\n+----\n+2006-12-25\n+2008-02-29\n\\ No newline at end of file\ndiff --git a/test/sql/index/art/art_issue_7530.test b/test/sql/index/art/issues/test_art_issue_7530.test\nsimilarity index 68%\nrename from test/sql/index/art/art_issue_7530.test\nrename to test/sql/index/art/issues/test_art_issue_7530.test\nindex 79cc79677a6d..92e1a2ed2917 100644\n--- a/test/sql/index/art/art_issue_7530.test\n+++ b/test/sql/index/art/issues/test_art_issue_7530.test\n@@ -1,6 +1,9 @@\n-# name: test/sql/index/art/art_issue_7530.test\n+# name: test/sql/index/art/issues/test_art_issue_7530.test\n # description: Test to ensure correct multi-value leaf deletions\n-# group: [art]\n+# group: [issues]\n+\n+statement ok\n+PRAGMA enable_verification\n \n statement ok\n CREATE TABLE t14(c0 BIGINT);\ndiff --git a/test/sql/index/art/test_art_index_join.test b/test/sql/index/art/join/test_art_index_join.test\nsimilarity index 86%\nrename from test/sql/index/art/test_art_index_join.test\nrename to test/sql/index/art/join/test_art_index_join.test\nindex a1d685fc2ed4..c21f4f8dab08 100644\n--- a/test/sql/index/art/test_art_index_join.test\n+++ b/test/sql/index/art/join/test_art_index_join.test\n@@ -1,6 +1,6 @@\n-# name: test/sql/index/art/test_art_index_join.test\n-# description: ART Join\n-# group: [art]\n+# name: test/sql/index/art/join/test_art_index_join.test\n+# description: Test ART index join\n+# group: [join]\n \n statement ok\n PRAGMA enable_verification\ndiff --git a/test/sql/index/art/test_art_join.test_slow b/test/sql/index/art/join/test_art_index_join.test_slow\nsimilarity index 78%\nrename from test/sql/index/art/test_art_join.test_slow\nrename to test/sql/index/art/join/test_art_index_join.test_slow\nindex 89c2e9eaa11e..545a452f2d5d 100644\n--- a/test/sql/index/art/test_art_join.test_slow\n+++ b/test/sql/index/art/join/test_art_index_join.test_slow\n@@ -1,6 +1,9 @@\n-# name: test/sql/index/art/test_art_join.test_slow\n-# description: Test Joins using art indexes\n-# group: [art]\n+# name: test/sql/index/art/join/test_art_index_join.test_slow\n+# description: Test ART index joins\n+# group: [join]\n+\n+statement ok\n+PRAGMA enable_verification\n \n statement ok\n PRAGMA explain_output = PHYSICAL_ONLY;\n@@ -29,6 +32,10 @@ INSERT INTO t2 SELECT i+1 FROM range(50,100) tbl(i);\n statement ok\n INSERT INTO t3 SELECT i+1 FROM range(0,100) tbl(i);\n \n+# have do disable this otherwise we get a perfect hash join\n+statement ok\n+set disabled_optimizers to 'statistics_propagation'\n+\n # standalone limit\n query II\n EXPLAIN select count(t1.i) from t1 inner join t2 on (t1.i = t2.i)\n@@ -61,7 +68,7 @@ statement ok\n CREATE INDEX w_index ON words using art(word);\n \n statement ok\n-COPY words FROM 'benchmark/micro/index/indexjoin.csv.gz' (DELIMITER ',' , AUTO_DETECT FALSE)\n+COPY words FROM 'data/csv/index_join.csv.gz' (DELIMITER ',' , AUTO_DETECT FALSE)\n \n query II\n SELECT w2.doc as doc2, COUNT(*) AS c FROM words AS w1 JOIN words AS w2 ON (w1.word=w2.word) GROUP BY doc2 ORDER BY c DESC LIMIT 10\ndiff --git a/test/sql/index/art/index_join_pushdown.test b/test/sql/index/art/join/test_art_index_join_pushdown.test\nsimilarity index 95%\nrename from test/sql/index/art/index_join_pushdown.test\nrename to test/sql/index/art/join/test_art_index_join_pushdown.test\nindex 6d53a276cd40..9d413d8a0abb 100644\n--- a/test/sql/index/art/index_join_pushdown.test\n+++ b/test/sql/index/art/join/test_art_index_join_pushdown.test\n@@ -1,6 +1,6 @@\n-# name: test/sql/index/art/index_join_pushdown.test\n-# description: Test index join\n-# group: [art]\n+# name: test/sql/index/art/join/test_art_index_join_pushdown.test\n+# description: Test index join pushdown\n+# group: [join]\n \n statement ok\n PRAGMA enable_verification\ndiff --git a/test/sql/index/art/test_art_index_join_with_nulls.test b/test/sql/index/art/join/test_art_index_join_with_nulls.test\nsimilarity index 93%\nrename from test/sql/index/art/test_art_index_join_with_nulls.test\nrename to test/sql/index/art/join/test_art_index_join_with_nulls.test\nindex 930c648e4fe5..5dba3f6c6a45 100644\n--- a/test/sql/index/art/test_art_index_join_with_nulls.test\n+++ b/test/sql/index/art/join/test_art_index_join_with_nulls.test\n@@ -1,6 +1,6 @@\n-# name: test/sql/index/art/test_art_index_join_with_nulls.test\n+# name: test/sql/index/art/join/test_art_index_join_with_nulls.test\n # description: Test that we reset keys correctly during index joins\n-# group: [art]\n+# group: [join]\n \n # this tests contains the reproducible example of issue 7267 in a reduced size\n \ndiff --git a/test/sql/index/art/test_multi_dimensional_index_join.test b/test/sql/index/art/join/test_art_multi_dimensional_index_join.test\nsimilarity index 83%\nrename from test/sql/index/art/test_multi_dimensional_index_join.test\nrename to test/sql/index/art/join/test_art_multi_dimensional_index_join.test\nindex daa671b7b74c..579752cb6031 100644\n--- a/test/sql/index/art/test_multi_dimensional_index_join.test\n+++ b/test/sql/index/art/join/test_art_multi_dimensional_index_join.test\n@@ -1,6 +1,6 @@\n-# name: test/sql/index/art/test_multi_dimensional_index_join.test\n-# description: ART Join\n-# group: [art]\n+# name: test/sql/index/art/join/test_art_multi_dimensional_index_join.test\n+# description: Test multi dimensional index joins on an ART\n+# group: [join]\n \n statement ok\n PRAGMA enable_verification\n@@ -36,7 +36,6 @@ ORDER BY 1, 2;\n 3\t4\n 4\t5\n \n-\n query II\n SELECT p1.id,p2.id\n FROM Person p1\ndiff --git a/test/sql/index/art/test_art_memory_usage.test_slow b/test/sql/index/art/memory/test_art_linear.test_slow\nsimilarity index 92%\nrename from test/sql/index/art/test_art_memory_usage.test_slow\nrename to test/sql/index/art/memory/test_art_linear.test_slow\nindex 14ffd12c2bce..ee0e6be1d25e 100644\n--- a/test/sql/index/art/test_art_memory_usage.test_slow\n+++ b/test/sql/index/art/memory/test_art_linear.test_slow\n@@ -1,6 +1,11 @@\n-# name: test/sql/index/art/test_art_memory_usage.test_slow\n-# description: Test ART index with many matches\n-# group: [art]\n+# name: test/sql/index/art/memory/test_art_linear.test_slow\n+# description: Test the memory usage of the ART for linear integer insertions\n+# group: [memory]\n+\n+# FIXME: once we inline leaves, these numbers should all go down\n+\n+statement ok\n+PRAGMA enable_verification\n \n require noforcestorage\n \ndiff --git a/test/sql/index/art/memory/test_art_non_linear.test_slow b/test/sql/index/art/memory/test_art_non_linear.test_slow\nnew file mode 100644\nindex 000000000000..6cd3e1a22c01\n--- /dev/null\n+++ b/test/sql/index/art/memory/test_art_non_linear.test_slow\n@@ -0,0 +1,120 @@\n+# name: test/sql/index/art/memory/test_art_non_linear.test_slow\n+# description: Test the memory usage of the ART for various workloads\n+# group: [memory]\n+\n+# FIXME: once we inline leaves, these numbers should all go down\n+\n+statement ok\n+PRAGMA enable_verification;\n+\n+require noforcestorage\n+\n+require skip_reload\n+\n+statement ok\n+CREATE FUNCTION mem_to_bytes(x) AS CASE\n+    WHEN CONTAINS(x, 'KB') THEN REPLACE(x, 'KB', '')::INT * 1000\n+    WHEN CONTAINS(x, 'MB') THEN REPLACE(x, 'MB', '')::INT * 1000 * 1000\n+    WHEN CONTAINS(x, 'GB') THEN REPLACE(x, 'GB', '')::INT * 1000 * 1000 * 1000\n+    WHEN CONTAINS(x, 'TB') THEN REPLACE(x, 'TB', '')::INT * 1000 * 1000 * 1000 * 1000\n+    WHEN x = '0 bytes' THEN 0\n+    ELSE x::INT END;\n+\n+# test 100K short strings\n+\n+statement ok\n+CREATE TABLE strings_temp AS\n+    SELECT ((i * 95823983533) % 100000)::VARCHAR AS s1,\n+           ((i * 547892347987) % 1000)::VARCHAR AS s2,\n+            ((i * 847892347987) % 100)::VARCHAR AS s3,\n+        FROM range(100000) tbl(i);\n+\n+statement ok\n+CREATE TABLE art AS SELECT s1 || 'a' || s2 || 'b' || s3 || 'c' AS id FROM strings_temp;\n+\n+statement ok\n+DROP TABLE strings_temp;\n+\n+statement ok\n+CREATE INDEX idx ON art USING ART(id);\n+\n+# 12 blocks for prefixes, 10 blocks for leaves, 7 blocks for Node16\n+# 29 blocks * 256KB = 7424KB\n+# WITHOUT the index, our database size is already approximately 2MB here\n+\n+query I\n+SELECT mem_to_bytes(memory_usage) < 11000000 FROM pragma_database_size();\n+----\n+true\n+\n+statement ok\n+DROP TABLE art;\n+\n+# test 100K long strings\n+\n+statement ok\n+CREATE TABLE strings_temp AS\n+    SELECT ((i * 95823983533) % 100000)::VARCHAR AS s1,\n+           ((i * 547892347987) % 1000)::VARCHAR AS s2,\n+            ((i * 847892347987) % 100)::VARCHAR AS s3,\n+        FROM range(100000) tbl(i);\n+\n+statement ok\n+CREATE TABLE art AS SELECT s3 || 'a' || s2 || 'b' || s3 || 'c' || repeat(s2, s3::INT) || s1 || 'a' || s3 || 'c' AS id FROM strings_temp;\n+\n+statement ok\n+DROP TABLE strings_temp;\n+\n+statement ok\n+CREATE INDEX idx ON art USING ART(id);\n+\n+# 1 block for prefixes, 10 blocks for 100K distinct leaves, 3 blocks for Node4, 7 blocks for Node16,\n+# 21 blocks * 256KB = 5376KB\n+# WITHOUT the index, our database size is already approximately 17MB here\n+\n+query I\n+SELECT mem_to_bytes(memory_usage) < 25000000 FROM pragma_database_size();\n+----\n+true\n+\n+statement ok\n+DROP TABLE art;\n+\n+# test 100K mostly distinct BIGINT keys\n+\n+statement ok\n+CREATE TABLE art AS SELECT (range * 9876983769044::INT128 % 10000000)::INT64 AS id FROM range(100000);\n+\n+statement ok\n+CREATE INDEX idx ON art USING ART(id);\n+\n+# 10 blocks for approx. 100K distinct leaves, 8 blocks for Node4, 2 blocks for Node256\n+# 20 blocks * 256KB = 5120KB\n+\n+query I\n+SELECT mem_to_bytes(memory_usage) < 7000000 FROM pragma_database_size();\n+----\n+true\n+\n+statement ok\n+DROP TABLE art;\n+\n+# test 100K mostly duplicate INTEGER keys\n+\n+statement ok\n+CREATE TABLE art AS SELECT (range * 9876983769044::INT128 % 1000)::INT64 AS id FROM range(100000);\n+\n+statement ok\n+CREATE INDEX idx ON art USING ART(id);\n+\n+# 1 block for prefixes, 4 blocks for leaf segments, 1 block for leaves,\n+# 1 block for Node4, 1 block for Node256\n+# 8 blocks * 256KB = 2048KB\n+\n+query I\n+SELECT mem_to_bytes(memory_usage) < 4000000 FROM pragma_database_size();\n+----\n+true\n+\n+statement ok\n+DROP TABLE art;\n\\ No newline at end of file\ndiff --git a/test/sql/index/art/test_art_multi_column.test b/test/sql/index/art/multi_column/test_art_multi_column.test\nsimilarity index 89%\nrename from test/sql/index/art/test_art_multi_column.test\nrename to test/sql/index/art/multi_column/test_art_multi_column.test\nindex 00d1f6d35e1b..c0a1b6357cfa 100644\n--- a/test/sql/index/art/test_art_multi_column.test\n+++ b/test/sql/index/art/multi_column/test_art_multi_column.test\n@@ -1,6 +1,6 @@\n-# name: test/sql/index/art/test_art_multi_column.test\n+# name: test/sql/index/art/multi_column/test_art_multi_column.test\n # description: Test ART index on table with multiple columns\n-# group: [art]\n+# group: [multi_column]\n \n statement ok\n PRAGMA enable_verification\ndiff --git a/test/sql/index/art/test_art_multi_column.test_slow b/test/sql/index/art/multi_column/test_art_multi_column.test_slow\nsimilarity index 86%\nrename from test/sql/index/art/test_art_multi_column.test_slow\nrename to test/sql/index/art/multi_column/test_art_multi_column.test_slow\nindex 242c35e87d3e..6a4f9983148b 100644\n--- a/test/sql/index/art/test_art_multi_column.test_slow\n+++ b/test/sql/index/art/multi_column/test_art_multi_column.test_slow\n@@ -1,9 +1,11 @@\n-# name: test/sql/index/art/test_art_multi_column.test_slow\n-# description: Test ART index on table with multiple columns\n-# group: [art]\n+# name: test/sql/index/art/multi_column/test_art_multi_column.test_slow\n+# description: Test ART index on table with multiple columns and connections\n+# group: [multi_column]\n \n-require skip_reload\n+statement ok\n+PRAGMA enable_verification\n \n+require skip_reload\n \n statement ok\n PRAGMA force_index_join\ndiff --git a/test/sql/index/art/test_art_multi_predicate.test b/test/sql/index/art/multi_column/test_art_multi_predicate.test\nsimilarity index 64%\nrename from test/sql/index/art/test_art_multi_predicate.test\nrename to test/sql/index/art/multi_column/test_art_multi_predicate.test\nindex 0a92248120b9..5f35437d4ff8 100644\n--- a/test/sql/index/art/test_art_multi_predicate.test\n+++ b/test/sql/index/art/multi_column/test_art_multi_predicate.test\n@@ -1,6 +1,6 @@\n-# name: test/sql/index/art/test_art_multi_predicate.test\n-# description: Test ART index with multiple predicates\n-# group: [art]\n+# name: test/sql/index/art/multi_column/test_art_multi_predicate.test\n+# description: Test a point lookup with multiple predicates\n+# group: [multi_column]\n \n statement ok\n PRAGMA enable_verification\ndiff --git a/test/sql/index/art/test_art_node_leaf_with_duplicates_multi_column.test b/test/sql/index/art/nodes/test_art_leaf_with_duplicates.test\nsimilarity index 86%\nrename from test/sql/index/art/test_art_node_leaf_with_duplicates_multi_column.test\nrename to test/sql/index/art/nodes/test_art_leaf_with_duplicates.test\nindex cd33b67b049f..a16d5b512b73 100644\n--- a/test/sql/index/art/test_art_node_leaf_with_duplicates_multi_column.test\n+++ b/test/sql/index/art/nodes/test_art_leaf_with_duplicates.test\n@@ -1,6 +1,6 @@\n-# name: test/sql/index/art/test_art_node_leaf_with_duplicates_multi_column.test\n-# description: ART Node Leaf with removing duplicated keys from multi column table\n-# group: [art]\n+# name: test/sql/index/art/nodes/test_art_leaf_with_duplicates.test\n+# description: Test ART leaf containing duplicates on multi column table\n+# group: [nodes]\n \n statement ok\n PRAGMA enable_verification\ndiff --git a/test/sql/index/art/test_art_node_leaf_with_duplicates.test_coverage b/test/sql/index/art/nodes/test_art_leaf_with_duplicates.test_slow\nsimilarity index 92%\nrename from test/sql/index/art/test_art_node_leaf_with_duplicates.test_coverage\nrename to test/sql/index/art/nodes/test_art_leaf_with_duplicates.test_slow\nindex b9a3033dec31..324c1f1784b4 100644\n--- a/test/sql/index/art/test_art_node_leaf_with_duplicates.test_coverage\n+++ b/test/sql/index/art/nodes/test_art_leaf_with_duplicates.test_slow\n@@ -1,6 +1,6 @@\n-# name: test/sql/index/art/test_art_node_leaf_with_duplicates.test_coverage\n-# description: ART Node Leaf with removing duplicated keys\n-# group: [art]\n+# name: test/sql/index/art/nodes/test_art_leaf_with_duplicates.test_slow\n+# description: Test ART leaf containing duplicates\n+# group: [nodes]\n \n statement ok\n PRAGMA enable_verification\ndiff --git a/test/sql/index/art/test_art_node_16.test b/test/sql/index/art/nodes/test_art_node_16.test\nsimilarity index 87%\nrename from test/sql/index/art/test_art_node_16.test\nrename to test/sql/index/art/nodes/test_art_node_16.test\nindex 83a14e84878c..648d988dbea3 100644\n--- a/test/sql/index/art/test_art_node_16.test\n+++ b/test/sql/index/art/nodes/test_art_node_16.test\n@@ -1,13 +1,13 @@\n-# name: test/sql/index/art/test_art_node_16.test\n-# description: ART Node 16\n-# group: [art]\n-\n-# load the DB from disk\n-load __TEST_DIR__/test_index.db\n+# name: test/sql/index/art/nodes/test_art_node_16.test\n+# description: Test ART Node 16\n+# group: [nodes]\n \n statement ok\n PRAGMA enable_verification\n \n+# load the DB from disk\n+load __TEST_DIR__/test_index.db\n+\n statement ok\n CREATE TABLE integers(i integer)\n \n@@ -15,6 +15,7 @@ statement ok\n CREATE INDEX i_index ON integers(i)\n \n # insert elements\n+\n loop i 0 6\n \n statement ok\n@@ -24,8 +25,8 @@ endloop\n \n restart\n \n-\n # verify counts\n+\n loop i 0 6\n \n query I\ndiff --git a/test/sql/index/art/test_art_node_256.test b/test/sql/index/art/nodes/test_art_node_256.test\nsimilarity index 85%\nrename from test/sql/index/art/test_art_node_256.test\nrename to test/sql/index/art/nodes/test_art_node_256.test\nindex aee7349e2c6a..835175f1f092 100644\n--- a/test/sql/index/art/test_art_node_256.test\n+++ b/test/sql/index/art/nodes/test_art_node_256.test\n@@ -1,6 +1,9 @@\n-# name: test/sql/index/art/test_art_node_256.test\n-# description: ART Node 256\n-# group: [art]\n+# name: test/sql/index/art/nodes/test_art_node_256.test\n+# description: Test ART Node 256\n+# group: [nodes]\n+\n+statement ok\n+PRAGMA enable_verification\n \n # load the DB from disk\n load __TEST_DIR__/test_index.db\n@@ -12,6 +15,7 @@ statement ok\n CREATE INDEX i_index ON integers(i)\n \n # insert elements\n+\n loop i 0 60\n \n statement ok\n@@ -22,6 +26,7 @@ endloop\n restart\n \n # verify counts\n+\n loop i 0 20\n \n query I\n@@ -44,8 +49,11 @@ SELECT sum(i) FROM integers WHERE i > 15\n 1710\n \n # delete an element and reinsert it\n+\n statement ok\n DELETE FROM integers WHERE i=16;\n+\n+statement ok\n INSERT INTO integers VALUES (16);\n \n query I\ndiff --git a/test/sql/index/art/test_art_node_4.test b/test/sql/index/art/nodes/test_art_node_4.test\nsimilarity index 87%\nrename from test/sql/index/art/test_art_node_4.test\nrename to test/sql/index/art/nodes/test_art_node_4.test\nindex 812e231a7bee..af5f9b696615 100644\n--- a/test/sql/index/art/test_art_node_4.test\n+++ b/test/sql/index/art/nodes/test_art_node_4.test\n@@ -1,13 +1,13 @@\n-# name: test/sql/index/art/test_art_node_4.test\n-# description: ART Node 4\n-# group: [art]\n-\n-# load the DB from disk\n-load __TEST_DIR__/test_index.db\n+# name: test/sql/index/art/nodes/test_art_node_4.test\n+# description: Test ART Node 4\n+# group: [nodes]\n \n statement ok\n PRAGMA enable_verification\n \n+# load the DB from disk\n+load __TEST_DIR__/test_index.db\n+\n statement ok\n CREATE TABLE integers(i integer)\n \n@@ -15,6 +15,7 @@ statement ok\n CREATE INDEX i_index ON integers(i)\n \n # insert elements\n+\n loop i 0 4\n \n statement ok\n@@ -24,8 +25,8 @@ endloop\n \n restart\n \n-\n # verify counts\n+\n loop i 0 4\n \n query I\ndiff --git a/test/sql/index/art/test_art_node_48.test b/test/sql/index/art/nodes/test_art_node_48.test\nsimilarity index 56%\nrename from test/sql/index/art/test_art_node_48.test\nrename to test/sql/index/art/nodes/test_art_node_48.test\nindex cbabb91d4aed..86e39003fa27 100644\n--- a/test/sql/index/art/test_art_node_48.test\n+++ b/test/sql/index/art/nodes/test_art_node_48.test\n@@ -1,13 +1,13 @@\n-# name: test/sql/index/art/test_art_node_48.test\n-# description: ART Node 48\n-# group: [art]\n-\n-# load the DB from disk\n-load __TEST_DIR__/test_index.db\n+# name: test/sql/index/art/nodes/test_art_node_48.test\n+# description: Test ART Node 48\n+# group: [nodes]\n \n statement ok\n PRAGMA enable_verification\n \n+# load the DB from disk\n+load __TEST_DIR__/test_index.db\n+\n statement ok\n CREATE TABLE integers(i integer)\n \n@@ -15,6 +15,7 @@ statement ok\n CREATE INDEX i_index ON integers(i)\n \n # insert elements\n+\n loop i 0 20\n \n statement ok\n@@ -25,6 +26,7 @@ endloop\n restart\n \n # verify counts\n+\n loop i 0 20\n \n query I\n@@ -47,8 +49,11 @@ SELECT sum(i) FROM integers WHERE i > 15\n 90\n \n # delete an element and reinsert it\n+\n statement ok\n DELETE FROM integers WHERE i=16;\n+\n+statement ok\n INSERT INTO integers VALUES (16);\n \n query I\n@@ -78,3 +83,36 @@ DROP INDEX i_index\n \n statement ok\n DROP TABLE integers\n+\n+statement ok\n+CREATE TABLE n48_tbl(i varchar, k integer)\n+\n+statement ok\n+INSERT INTO n48_tbl SELECT 'a', range FROM range(10000);\n+\n+statement ok\n+INSERT INTO n48_tbl SELECT 'b', range FROM range(25);\n+\n+statement ok\n+INSERT INTO n48_tbl SELECT 'c', range FROM range(25);\n+\n+statement ok\n+CREATE INDEX n48_tbl_idx ON n48_tbl(i, k);\n+\n+# test freeing all the children of a Node48\n+\n+statement ok\n+CREATE TABLE n48_free (id INTEGER);\n+\n+statement ok\n+INSERT INTO n48_free SELECT range % 100 FROM range(2048);\n+\n+loop i 0 20\n+\n+statement ok\n+INSERT INTO n48_free VALUES (${i} + 107);\n+\n+endloop\n+\n+statement ok\n+CREATE INDEX idx_n48_free ON n48_free(id);\ndiff --git a/test/sql/index/art/test_art_index_prefix.test_coverage b/test/sql/index/art/nodes/test_art_prefix_edge_cases.test_slow\nsimilarity index 98%\nrename from test/sql/index/art/test_art_index_prefix.test_coverage\nrename to test/sql/index/art/nodes/test_art_prefix_edge_cases.test_slow\nindex 41bb991b24aa..ee5a002b9f75 100644\n--- a/test/sql/index/art/test_art_index_prefix.test_coverage\n+++ b/test/sql/index/art/nodes/test_art_prefix_edge_cases.test_slow\n@@ -1,6 +1,6 @@\n-# name: test/sql/index/art/test_art_index_prefix.test_coverage\n-# description: Test ART index with prefixes\n-# group: [art]\n+# name: test/sql/index/art/nodes/test_art_prefix_edge_cases.test_slow\n+# description: Test ART prefix edge cases\n+# group: [nodes]\n \n statement ok\n PRAGMA enable_verification\ndiff --git a/test/sql/index/art/art_coverage.test b/test/sql/index/art/nodes/test_art_prefixes.test\nsimilarity index 74%\nrename from test/sql/index/art/art_coverage.test\nrename to test/sql/index/art/nodes/test_art_prefixes.test\nindex 949a5d7f91b0..a7fc06c695de 100644\n--- a/test/sql/index/art/art_coverage.test\n+++ b/test/sql/index/art/nodes/test_art_prefixes.test\n@@ -1,39 +1,42 @@\n-# name: test/sql/index/art/art_coverage.test\n-# description: Test edge cases to increase ART coverage\n-# group: [art]\n+# name: test/sql/index/art/nodes/test_art_prefixes.test\n+# description: Test different ART prefixes\n+# group: [nodes]\n+\n+statement ok\n+PRAGMA enable_verification\n \n require vector_size 2048\n \n # very mixed-length prefixes\n \n statement ok\n-CREATE TABLE different_prefixes(str VARCHAR)\n+CREATE TABLE different_prefixes(str VARCHAR);\n \n statement ok\n-INSERT INTO different_prefixes SELECT 'my first very long prefix that is really very long' || range FROM range(2048)\n+INSERT INTO different_prefixes SELECT 'my first very long prefix that is really very long' || range FROM range(2048);\n \n statement ok\n-INSERT INTO different_prefixes SELECT (range / 100)::VARCHAR || range::VARCHAR FROM range(2048)\n+INSERT INTO different_prefixes SELECT (range / 100)::VARCHAR || range::VARCHAR FROM range(2048);\n \n statement ok\n-INSERT INTO different_prefixes SELECT 'my first very long prefix, the other not quite as long prefix that is still very long' || range FROM range(2048)\n+INSERT INTO different_prefixes SELECT 'my first very long prefix, the other not quite as long prefix that is still very long' || range FROM range(2048);\n \n statement ok\n-INSERT INTO different_prefixes SELECT 'my first very long prefix, the other not quite as long prefix that is still very long and even longer omg!' || range FROM range(2048)\n+INSERT INTO different_prefixes SELECT 'my first very long prefix, the other not quite as long prefix that is still very long and even longer omg!' || range FROM range(2048);\n \n statement ok\n-INSERT INTO different_prefixes SELECT range::VARCHAR || (range + 1)::VARCHAR FROM range(2048)\n+INSERT INTO different_prefixes SELECT range::VARCHAR || (range + 1)::VARCHAR FROM range(2048);\n \n statement ok\n-CREATE INDEX idx_different_prefixes ON different_prefixes(str)\n+CREATE INDEX idx_different_prefixes ON different_prefixes(str);\n \n statement ok\n DELETE FROM different_prefixes\n-WHERE rowid IN (SELECT rowid FROM different_prefixes LIMIT 1000)\n+WHERE rowid IN (SELECT rowid FROM different_prefixes LIMIT 1000);\n \n statement ok\n DELETE FROM different_prefixes\n-WHERE rowid IN (SELECT rowid FROM different_prefixes LIMIT 3000)\n+WHERE rowid IN (SELECT rowid FROM different_prefixes LIMIT 3000);\n \n statement ok\n DROP INDEX idx_different_prefixes;\n@@ -41,22 +44,22 @@ DROP INDEX idx_different_prefixes;\n # this time all prefixes are long\n \n statement ok\n-CREATE TABLE longer_prefixes(str VARCHAR)\n+CREATE TABLE longer_prefixes(str VARCHAR);\n \n statement ok\n INSERT INTO longer_prefixes\n-SELECT 'my first very long prefix that is really very long' || range FROM range(2048)\n+SELECT 'my first very long prefix that is really very long' || range FROM range(2048);\n \n statement ok\n INSERT INTO longer_prefixes\n-SELECT 'my first very long prefix, the other not quite as long prefix that is still very long' || range FROM range(2048)\n+SELECT 'my first very long prefix, the other not quite as long prefix that is still very long' || range FROM range(2048);\n \n statement ok\n-CREATE INDEX idx_longer_prefixes ON longer_prefixes(str)\n+CREATE INDEX idx_longer_prefixes ON longer_prefixes(str);\n \n query I\n SELECT str FROM longer_prefixes\n-WHERE str = 'my first very long prefix that is really very long77'\n+WHERE str = 'my first very long prefix that is really very long77';\n ----\n my first very long prefix that is really very long77\n \n@@ -66,7 +69,7 @@ DROP INDEX idx_longer_prefixes;\n # more distinct prefixes\n \n statement ok\n-CREATE TABLE distinct_prefixes (str VARCHAR)\n+CREATE TABLE distinct_prefixes (str VARCHAR);\n \n statement ok\n INSERT INTO distinct_prefixes SELECT\n@@ -76,15 +79,15 @@ INSERT INTO distinct_prefixes SELECT\n \tFROM range(100000);\n \n statement ok\n-CREATE INDEX idx_distinct_prefixes ON distinct_prefixes(str)\n+CREATE INDEX idx_distinct_prefixes ON distinct_prefixes(str);\n \n statement ok\n-DROP INDEX idx_distinct_prefixes\n+DROP INDEX idx_distinct_prefixes;\n \n # more mixed-length distinct prefixes\n \n statement ok\n-CREATE TABLE mixed_distinct_prefixes (str VARCHAR)\n+CREATE TABLE mixed_distinct_prefixes (str VARCHAR);\n \n statement ok\n INSERT INTO mixed_distinct_prefixes SELECT\n@@ -105,19 +108,19 @@ INSERT INTO mixed_distinct_prefixes SELECT\n \tFROM range(100000);\n \n statement ok\n-CREATE INDEX idx_mixed_distinct_prefixes ON mixed_distinct_prefixes(str)\n+CREATE INDEX idx_mixed_distinct_prefixes ON mixed_distinct_prefixes(str);\n \n statement ok\n DELETE FROM mixed_distinct_prefixes\n-WHERE rowid IN (SELECT rowid FROM mixed_distinct_prefixes LIMIT 1000)\n+WHERE rowid IN (SELECT rowid FROM mixed_distinct_prefixes LIMIT 1000);\n \n statement ok\n DELETE FROM mixed_distinct_prefixes\n-WHERE rowid IN (SELECT rowid FROM mixed_distinct_prefixes LIMIT 1000)\n+WHERE rowid IN (SELECT rowid FROM mixed_distinct_prefixes LIMIT 1000);\n \n statement ok\n DELETE FROM mixed_distinct_prefixes\n-WHERE rowid IN (SELECT rowid FROM mixed_distinct_prefixes LIMIT 1000)\n+WHERE rowid IN (SELECT rowid FROM mixed_distinct_prefixes LIMIT 1000);\n \n statement ok\n-DROP INDEX idx_mixed_distinct_prefixes\n\\ No newline at end of file\n+DROP INDEX idx_mixed_distinct_prefixes;\n\\ No newline at end of file\ndiff --git a/test/sql/index/art/nodes/test_art_prefixes_restart.test b/test/sql/index/art/nodes/test_art_prefixes_restart.test\nnew file mode 100644\nindex 000000000000..87fbdce34a98\n--- /dev/null\n+++ b/test/sql/index/art/nodes/test_art_prefixes_restart.test\n@@ -0,0 +1,65 @@\n+# name: test/sql/index/art/nodes/test_art_prefixes_restart.test\n+# description: Test the (de)serialization of different ART prefixes\n+# group: [nodes]\n+\n+load __TEST_DIR__/test_art_prefixes.db\n+\n+statement ok\n+CREATE TABLE tbl (id INTEGER);\n+\n+statement ok\n+CREATE INDEX idx ON tbl(id);\n+\n+# insert two children into a Node4\n+statement ok\n+INSERT INTO tbl VALUES (1), (2);\n+\n+restart\n+\n+# delete one child, the other child will still be serialized\n+statement ok\n+DELETE FROM tbl WHERE id = 1;\n+\n+# now do the same, but with a very long shared prefix\n+\n+statement ok\n+CREATE TABLE tbl_varchar (id VARCHAR);\n+\n+statement ok\n+CREATE INDEX idx_varchar ON tbl_varchar(id);\n+\n+# insert two children into a Node4\n+statement ok\n+INSERT INTO tbl_varchar VALUES\n+\t('hello I am a prefix, and it is a beautiful sommer evening, and the plants are blossoming - 1'),\n+\t('hello I am a prefix, and it is a beautiful sommer evening, and the plants are blossoming - 2');\n+\n+restart\n+\n+# delete one child, the other child will still be serialized\n+statement ok\n+DELETE FROM tbl_varchar\n+WHERE id = 'hello I am a prefix, and it is a beautiful sommer evening, and the plants are blossoming - 1';\n+\n+# now we test splitting prefixes\n+\n+statement ok\n+DELETE FROM tbl_varchar;\n+\n+statement ok\n+INSERT INTO tbl_varchar VALUES ('012345678901234'), ('012345678901235');\n+\n+# now with swizzled prefixes\n+\n+statement ok\n+DELETE FROM tbl_varchar;\n+\n+statement ok\n+INSERT INTO tbl_varchar VALUES\n+\t('0123456789-0123456789-0123456789-0123456789');\n+\n+restart\n+\n+statement ok\n+INSERT INTO tbl_varchar VALUES\n+\t('0123456779-0123456789-0123456789-0123456789');\n\\ No newline at end of file\ndiff --git a/test/sql/index/art/test_art_many_matches.test b/test/sql/index/art/scan/test_art_many_matches.test\nsimilarity index 94%\nrename from test/sql/index/art/test_art_many_matches.test\nrename to test/sql/index/art/scan/test_art_many_matches.test\nindex a29c450c7278..710cebdb7672 100644\n--- a/test/sql/index/art/test_art_many_matches.test\n+++ b/test/sql/index/art/scan/test_art_many_matches.test\n@@ -1,6 +1,6 @@\n-# name: test/sql/index/art/test_art_many_matches.test\n+# name: test/sql/index/art/scan/test_art_many_matches.test\n # description: Test ART index with many matches\n-# group: [art]\n+# group: [scan]\n \n statement ok\n PRAGMA enable_verification\ndiff --git a/test/sql/index/art/test_art_negative_range.test b/test/sql/index/art/scan/test_art_negative_range_scan.test\nsimilarity index 76%\nrename from test/sql/index/art/test_art_negative_range.test\nrename to test/sql/index/art/scan/test_art_negative_range_scan.test\nindex eee009a4f1d8..60eeaf3d0514 100644\n--- a/test/sql/index/art/test_art_negative_range.test\n+++ b/test/sql/index/art/scan/test_art_negative_range_scan.test\n@@ -1,6 +1,6 @@\n-# name: test/sql/index/art/test_art_negative_range.test\n-# description: ART Negative Range\n-# group: [art]\n+# name: test/sql/index/art/scan/test_art_negative_range_scan.test\n+# description: Test negative range scans on an ART\n+# group: [scan]\n \n statement ok\n PRAGMA enable_verification\n@@ -33,5 +33,4 @@ statement ok\n DROP INDEX i_index\n \n statement ok\n-DROP TABLE integers\n-\n+DROP TABLE integers\n\\ No newline at end of file\ndiff --git a/test/sql/index/art/test_art_prepared.test b/test/sql/index/art/scan/test_art_prepared_scan.test\nsimilarity index 74%\nrename from test/sql/index/art/test_art_prepared.test\nrename to test/sql/index/art/scan/test_art_prepared_scan.test\nindex d81b35cd1072..8464720e95a1 100644\n--- a/test/sql/index/art/test_art_prepared.test\n+++ b/test/sql/index/art/scan/test_art_prepared_scan.test\n@@ -1,6 +1,9 @@\n-# name: test/sql/index/art/test_art_prepared.test\n-# description: Test ART with prepared statements\n-# group: [art]\n+# name: test/sql/index/art/scan/test_art_prepared_scan.test\n+# description: Test the usage of prepared statements for ART index scans\n+# group: [scan]\n+\n+statement ok\n+PRAGMA enable_verification\n \n statement ok\n CREATE TABLE integers(i INTEGER);\ndiff --git a/test/sql/index/art/test_art_index_range_scan.test b/test/sql/index/art/scan/test_art_range_scan.test\nsimilarity index 91%\nrename from test/sql/index/art/test_art_index_range_scan.test\nrename to test/sql/index/art/scan/test_art_range_scan.test\nindex e4e84a7a4210..8b86d62ab45c 100644\n--- a/test/sql/index/art/test_art_index_range_scan.test\n+++ b/test/sql/index/art/scan/test_art_range_scan.test\n@@ -1,6 +1,6 @@\n-# name: test/sql/index/art/test_art_index_range_scan.test\n-# description: Test ART index scan\n-# group: [art]\n+# name: test/sql/index/art/scan/test_art_range_scan.test\n+# description: Test ART range scan\n+# group: [scan]\n \n statement ok\n PRAGMA enable_verification\ndiff --git a/test/sql/index/art/test_art_pk_storage.test b/test/sql/index/art/storage/test_art_checkpoint.test\nsimilarity index 73%\nrename from test/sql/index/art/test_art_pk_storage.test\nrename to test/sql/index/art/storage/test_art_checkpoint.test\nindex 2826973201a6..1d098221a035 100644\n--- a/test/sql/index/art/test_art_pk_storage.test\n+++ b/test/sql/index/art/storage/test_art_checkpoint.test\n@@ -1,6 +1,6 @@\n-# name: test/sql/index/art/test_art_pk_storage.test\n-# description: ART Storage\n-# group: [art]\n+# name: test/sql/index/art/storage/test_art_checkpoint.test\n+# description: Test checkpointing an ART\n+# group: [storage]\n \n # load the DB from disk\n load __TEST_DIR__/test_index.db\ndiff --git a/test/sql/index/test_index_import.test b/test/sql/index/art/storage/test_art_import.test\nsimilarity index 79%\nrename from test/sql/index/test_index_import.test\nrename to test/sql/index/art/storage/test_art_import.test\nindex 426d129a5a33..bc5eb3e8267f 100644\n--- a/test/sql/index/test_index_import.test\n+++ b/test/sql/index/art/storage/test_art_import.test\n@@ -1,6 +1,6 @@\n-# name: test/sql/index/test_index_import.test\n-# description: Test if indexes are properly created when importing\n-# group: [index]\n+# name: test/sql/index/art/storage/test_art_import.test\n+# description: Test index creation when importing the ART\n+# group: [storage]\n \n statement ok\n PRAGMA enable_verification\ndiff --git a/test/sql/index/art/test_art_import_export.test b/test/sql/index/art/storage/test_art_import_export.test\nsimilarity index 78%\nrename from test/sql/index/art/test_art_import_export.test\nrename to test/sql/index/art/storage/test_art_import_export.test\nindex 6bc4f881d5aa..5f1fb5e9c69a 100644\n--- a/test/sql/index/art/test_art_import_export.test\n+++ b/test/sql/index/art/storage/test_art_import_export.test\n@@ -1,6 +1,9 @@\n-# name: test/sql/index/art/test_art_import_export.test\n-# description: Test that the index is correctly exported and imported\n-# group: [art]\n+# name: test/sql/index/art/storage/test_art_import_export.test\n+# description: Test the export and import of the ART\n+# group: [storage]\n+\n+statement ok\n+PRAGMA enable_verification\n \n # issue 4126\n \ndiff --git a/test/sql/index/art/test_art_storage.test b/test/sql/index/art/storage/test_art_storage.test\nsimilarity index 72%\nrename from test/sql/index/art/test_art_storage.test\nrename to test/sql/index/art/storage/test_art_storage.test\nindex 68b8e5ab6df7..3de0c524de98 100644\n--- a/test/sql/index/art/test_art_storage.test\n+++ b/test/sql/index/art/storage/test_art_storage.test\n@@ -1,6 +1,9 @@\n-# name: test/sql/index/art/test_art_storage.test\n-# description: ART Storage\n-# group: [art]\n+# name: test/sql/index/art/storage/test_art_storage.test\n+# description: Test ART storage\n+# group: [storage]\n+\n+statement ok\n+PRAGMA enable_verification\n \n # load the DB from disk\n load __TEST_DIR__/test_index.db\ndiff --git a/test/sql/index/art/test_art_big_negative.test b/test/sql/index/art/test_art_big_negative.test\ndeleted file mode 100644\nindex 81aab8ed3477..000000000000\n--- a/test/sql/index/art/test_art_big_negative.test\n+++ /dev/null\n@@ -1,10 +0,0 @@\n-# name: test/sql/index/art/test_art_big_negative.test\n-# description: Test ART index with negative values and big values\n-# group: [art]\n-\n-statement ok\n-CREATE TABLE integers(i BIGINT)\n-\n-statement ok\n-CREATE INDEX i_index ON integers using art(i)\n-\ndiff --git a/test/sql/index/art/test_art_coverage_leaf.test b/test/sql/index/art/test_art_coverage_leaf.test\nnew file mode 100644\nindex 000000000000..be4ab8542312\n--- /dev/null\n+++ b/test/sql/index/art/test_art_coverage_leaf.test\n@@ -0,0 +1,74 @@\n+# name: test/sql/index/art/test_art_coverage_leaf.test\n+# description: ART coverage tests for leaf code coverage\n+# group: [art]\n+\n+# test deserialization of leaf segments\n+\n+load __TEST_DIR__/art_vacuum.db\n+\n+statement ok\n+CREATE TABLE duplicates (id UBIGINT);\n+\n+statement ok\n+INSERT INTO duplicates SELECT range + 500 FROM range(500);\n+\n+loop i 0 16\n+\n+statement ok\n+INSERT INTO duplicates SELECT range FROM range(500);\n+\n+endloop\n+\n+statement ok\n+INSERT INTO duplicates SELECT range + 1000 FROM range(500);\n+\n+statement ok\n+CREATE INDEX idx_duplicates ON duplicates(id);\n+\n+restart\n+\n+query I\n+SELECT id FROM duplicates WHERE id = 255;\n+----\n+255\n+255\n+255\n+255\n+255\n+255\n+255\n+255\n+255\n+255\n+255\n+255\n+255\n+255\n+255\n+255\n+\n+# test different paths in the Leaf::Merge functionality\n+\n+statement ok\n+CREATE TABLE leaf_merge_1 (id UINT32, id2 INT64);\n+\n+statement ok\n+INSERT INTO leaf_merge_1 SELECT range, range FROM range (0, 2048, 1);\n+\n+statement ok\n+INSERT INTO leaf_merge_1 SELECT 2047, 2047 FROM range (10);\n+\n+statement ok\n+CREATE INDEX idx_merge_1 ON leaf_merge_1(id, id2);\n+\n+statement ok\n+CREATE TABLE leaf_merge_2 (id UINT32, id2 INT64);\n+\n+statement ok\n+INSERT INTO leaf_merge_2 SELECT range, range FROM range (0, 2048, 1);\n+\n+statement ok\n+INSERT INTO leaf_merge_2 VALUES (2047, 2047)\n+\n+statement ok\n+CREATE INDEX idx_merge_2 ON leaf_merge_2(id, id2);\n\\ No newline at end of file\ndiff --git a/test/sql/index/art/test_art_coverage_types.test b/test/sql/index/art/test_art_coverage_types.test\nnew file mode 100644\nindex 000000000000..74308242a410\n--- /dev/null\n+++ b/test/sql/index/art/test_art_coverage_types.test\n@@ -0,0 +1,97 @@\n+# name: test/sql/index/art/test_art_coverage_types.test\n+# description: ART coverage tests with different key types\n+# group: [art]\n+\n+# aborting merge due to constraint violation\n+\n+statement ok\n+CREATE TABLE duplicate_id (id UINT32, id2 INT64);\n+\n+statement ok\n+INSERT INTO duplicate_id SELECT range, range FROM range (0, 2048, 1);\n+\n+statement ok\n+INSERT INTO duplicate_id VALUES (2047, 2047);\n+\n+statement error\n+CREATE UNIQUE INDEX idx ON duplicate_id(id, id2);\n+----\n+Constraint Error: Data contains duplicates on indexed column(s)\n+\n+statement ok\n+DROP TABLE duplicate_id;\n+\n+# test more key types\n+\n+statement ok\n+CREATE TABLE int128_first (id INT128, id2 INT128);\n+\n+statement ok\n+INSERT INTO int128_first SELECT range, range FROM range(5000);\n+\n+statement ok\n+CREATE UNIQUE INDEX idx_1 ON int128_first(id, id2);\n+\n+statement ok\n+CREATE TABLE uint8_first (id UINT8, id2 UINT8);\n+\n+statement ok\n+INSERT INTO uint8_first SELECT range, range FROM range(128);\n+\n+statement ok\n+CREATE INDEX idx_2 ON uint8_first(id, id2);\n+\n+statement ok\n+CREATE TABLE uint64_first (id UINT64, id2 UINT32, id3 UINT64, id4 FLOAT);\n+\n+statement ok\n+INSERT INTO uint64_first SELECT range, range, range, 0.456 + range FROM range(5000);\n+\n+statement ok\n+CREATE INDEX idx_3 ON uint64_first(id, id2, id3, id4);\n+\n+# test more key types with point lookups\n+\n+statement ok\n+CREATE TABLE int128_point AS SELECT range::INT128 AS id FROM range(5000);\n+\n+statement ok\n+CREATE INDEX idx_int128_point ON int128_point(id);\n+\n+query I\n+SELECT id FROM int128_point WHERE id = 2048;\n+----\n+2048\n+\n+statement ok\n+CREATE TABLE uint64_point AS SELECT range::UINT64 AS id FROM range(5000);\n+\n+statement ok\n+CREATE INDEX idx_uint64_point ON uint64_point(id);\n+\n+query I\n+SELECT id FROM uint64_point WHERE id = 2048;\n+----\n+2048\n+\n+statement ok\n+CREATE TABLE uint32_point AS SELECT range::UINT32 AS id FROM range(5000);\n+\n+statement ok\n+CREATE INDEX idx_uint32_point ON uint32_point(id);\n+\n+query I\n+SELECT id FROM uint32_point WHERE id = 2048;\n+----\n+2048\n+\n+statement ok\n+CREATE TABLE uint8_point AS SELECT range::UINT8 AS id FROM range(128);\n+\n+statement ok\n+CREATE INDEX idx_uint8_point ON uint8_point(id);\n+\n+query I\n+SELECT id FROM uint8_point WHERE id = 100;\n+----\n+100\n\\ No newline at end of file\ndiff --git a/test/sql/index/art/test_art_bigint.test_slow b/test/sql/index/art/types/test_art_bigint.test_slow\nsimilarity index 95%\nrename from test/sql/index/art/test_art_bigint.test_slow\nrename to test/sql/index/art/types/test_art_bigint.test_slow\nindex 881507e772c3..98fd9235d2c8 100644\n--- a/test/sql/index/art/test_art_bigint.test_slow\n+++ b/test/sql/index/art/types/test_art_bigint.test_slow\n@@ -1,6 +1,9 @@\n-# name: test/sql/index/art/test_art_bigint.test_slow\n-# description: ART Integer Type: BIGINT\n-# group: [art]\n+# name: test/sql/index/art/types/test_art_bigint.test_slow\n+# description: Test ART BIGINT key type\n+# group: [types]\n+\n+statement ok\n+PRAGMA enable_verification\n \n require skip_reload\n \ndiff --git a/test/sql/index/art/test_boolean_index.test b/test/sql/index/art/types/test_art_boolean.test\nsimilarity index 65%\nrename from test/sql/index/art/test_boolean_index.test\nrename to test/sql/index/art/types/test_art_boolean.test\nindex 6c95caae2fa8..88529f2023ff 100644\n--- a/test/sql/index/art/test_boolean_index.test\n+++ b/test/sql/index/art/types/test_art_boolean.test\n@@ -1,6 +1,6 @@\n-# name: test/sql/index/art/test_boolean_index.test\n-# description: Test boolean art index\n-# group: [art]\n+# name: test/sql/index/art/types/test_art_boolean.test\n+# description: Test ART BOOLEAN key type\n+# group: [types]\n \n statement ok\n PRAGMA enable_verification\ndiff --git a/test/sql/index/art/test_art_double_special.test b/test/sql/index/art/types/test_art_double.test\nsimilarity index 78%\nrename from test/sql/index/art/test_art_double_special.test\nrename to test/sql/index/art/types/test_art_double.test\nindex b7fc1c6bb02d..443343b53d36 100644\n--- a/test/sql/index/art/test_art_double_special.test\n+++ b/test/sql/index/art/types/test_art_double.test\n@@ -1,6 +1,6 @@\n-# name: test/sql/index/art/test_art_double_special.test\n-# description: ART Double Special Cases\n-# group: [art]\n+# name: test/sql/index/art/types/test_art_double.test\n+# description: Test ART DOUBLE key type\n+# group: [types]\n \n statement ok\n PRAGMA enable_verification\ndiff --git a/test/sql/index/art/test_art_multi_column_expression.test b/test/sql/index/art/types/test_art_expression_key.test\nsimilarity index 82%\nrename from test/sql/index/art/test_art_multi_column_expression.test\nrename to test/sql/index/art/types/test_art_expression_key.test\nindex d329048cb75e..3413d86a5891 100644\n--- a/test/sql/index/art/test_art_multi_column_expression.test\n+++ b/test/sql/index/art/types/test_art_expression_key.test\n@@ -1,6 +1,6 @@\n-# name: test/sql/index/art/test_art_multi_column_expression.test\n-# description: Test ART index that requires multiple columns for expression\n-# group: [art]\n+# name: test/sql/index/art/types/test_art_expression_key.test\n+# description: Test an ART index with an expression containing multiple columns as its key type\n+# group: [types]\n \n statement ok\n PRAGMA enable_verification\ndiff --git a/test/sql/index/art/test_art_integer.test_slow b/test/sql/index/art/types/test_art_integer.test_slow\nsimilarity index 95%\nrename from test/sql/index/art/test_art_integer.test_slow\nrename to test/sql/index/art/types/test_art_integer.test_slow\nindex 648931079964..a06a885a9d55 100644\n--- a/test/sql/index/art/test_art_integer.test_slow\n+++ b/test/sql/index/art/types/test_art_integer.test_slow\n@@ -1,6 +1,9 @@\n-# name: test/sql/index/art/test_art_integer.test_slow\n-# description: ART Integer Type: INTEGER\n-# group: [art]\n+# name: test/sql/index/art/types/test_art_integer.test_slow\n+# description: Test ART INTEGER key type\n+# group: [types]\n+\n+statement ok\n+PRAGMA enable_verification\n \n require skip_reload\n \ndiff --git a/test/sql/index/art/test_art_integer_types.test b/test/sql/index/art/types/test_art_integer_types.test\nsimilarity index 91%\nrename from test/sql/index/art/test_art_integer_types.test\nrename to test/sql/index/art/types/test_art_integer_types.test\nindex fb169d7e3c7f..20ac892adcf1 100644\n--- a/test/sql/index/art/test_art_integer_types.test\n+++ b/test/sql/index/art/types/test_art_integer_types.test\n@@ -1,6 +1,6 @@\n-# name: test/sql/index/art/test_art_integer_types.test\n-# description: Test ART with different Integer Types\n-# group: [art]\n+# name: test/sql/index/art/types/test_art_integer_types.test\n+# description: Test different integer types for ART keys\n+# group: [types]\n \n statement ok\n PRAGMA enable_verification\ndiff --git a/test/sql/index/art/test_art_fp_special.test b/test/sql/index/art/types/test_art_real.test\nsimilarity index 79%\nrename from test/sql/index/art/test_art_fp_special.test\nrename to test/sql/index/art/types/test_art_real.test\nindex 15a10e672758..204720e17adf 100644\n--- a/test/sql/index/art/test_art_fp_special.test\n+++ b/test/sql/index/art/types/test_art_real.test\n@@ -1,6 +1,6 @@\n-# name: test/sql/index/art/test_art_fp_special.test\n-# description: ART FP Special Cases\n-# group: [art]\n+# name: test/sql/index/art/types/test_art_real.test\n+# description: Test ART REAL key type\n+# group: [types]\n \n statement ok\n PRAGMA enable_verification\ndiff --git a/test/sql/index/art/test_art_fp_unique.test b/test/sql/index/art/types/test_art_real_pk.test\nsimilarity index 86%\nrename from test/sql/index/art/test_art_fp_unique.test\nrename to test/sql/index/art/types/test_art_real_pk.test\nindex 531bebe3ce29..3995b19ce4b6 100644\n--- a/test/sql/index/art/test_art_fp_unique.test\n+++ b/test/sql/index/art/types/test_art_real_pk.test\n@@ -1,6 +1,6 @@\n-# name: test/sql/index/art/test_art_fp_unique.test\n-# description: ART FP Unique Constraint\n-# group: [art]\n+# name: test/sql/index/art/types/test_art_real_pk.test\n+# description: Test ART REAL key type for a primary key\n+# group: [types]\n \n statement ok\n PRAGMA enable_verification\ndiff --git a/test/sql/index/art/test_art_smallint.test_slow b/test/sql/index/art/types/test_art_smallint.test_slow\nsimilarity index 95%\nrename from test/sql/index/art/test_art_smallint.test_slow\nrename to test/sql/index/art/types/test_art_smallint.test_slow\nindex f0cddd503386..4c1ff5676cce 100644\n--- a/test/sql/index/art/test_art_smallint.test_slow\n+++ b/test/sql/index/art/types/test_art_smallint.test_slow\n@@ -1,6 +1,9 @@\n-# name: test/sql/index/art/test_art_smallint.test_slow\n-# description: ART Integer Type: SMALLINT\n-# group: [art]\n+# name: test/sql/index/art/types/test_art_smallint.test_slow\n+# description: Test ART SMALLINT key type\n+# group: [types]\n+\n+statement ok\n+PRAGMA enable_verification\n \n require skip_reload\n \ndiff --git a/test/sql/index/art/test_art_tinyint.test_slow b/test/sql/index/art/types/test_art_tinyint.test_slow\nsimilarity index 95%\nrename from test/sql/index/art/test_art_tinyint.test_slow\nrename to test/sql/index/art/types/test_art_tinyint.test_slow\nindex 508c064be448..ffd200adbabf 100644\n--- a/test/sql/index/art/test_art_tinyint.test_slow\n+++ b/test/sql/index/art/types/test_art_tinyint.test_slow\n@@ -1,9 +1,11 @@\n-# name: test/sql/index/art/test_art_tinyint.test_slow\n-# description: ART Integer Type: tinyint\n-# group: [art]\n+# name: test/sql/index/art/types/test_art_tinyint.test_slow\n+# description: Test ART TINYINT key type\n+# group: [types]\n \n-require skip_reload\n+statement ok\n+PRAGMA enable_verification\n \n+require skip_reload\n \n statement ok\n PRAGMA force_index_join\ndiff --git a/test/sql/index/art/test_art_types.test_coverage b/test/sql/index/art/types/test_art_types.test_slow\nsimilarity index 94%\nrename from test/sql/index/art/test_art_types.test_coverage\nrename to test/sql/index/art/types/test_art_types.test_slow\nindex 650d6285f2dc..3f56f9556a58 100644\n--- a/test/sql/index/art/test_art_types.test_coverage\n+++ b/test/sql/index/art/types/test_art_types.test_slow\n@@ -1,6 +1,9 @@\n-# name: test/sql/index/art/test_art_types.test_coverage\n-# description: Test ART with different types\n-# group: [art]\n+# name: test/sql/index/art/types/test_art_types.test_slow\n+# description: Test ART operations with different types\n+# group: [types]\n+\n+statement ok\n+PRAGMA enable_verification\n \n foreach type <numeric> decimal(4,1) decimal(8,1) decimal(12,1) decimal(18,1)\n \n@@ -90,7 +93,6 @@ DROP TABLE integers\n \n endloop\n \n-\n foreach type <numeric> decimal(4,1) decimal(8,1) decimal(12,1) decimal(18,1)\n \n foreach type2 <numeric> decimal(4,1) decimal(8,1) decimal(12,1) decimal(18,1)\ndiff --git a/test/sql/index/art/test_art_string.test b/test/sql/index/art/types/test_art_varchar.test\nsimilarity index 94%\nrename from test/sql/index/art/test_art_string.test\nrename to test/sql/index/art/types/test_art_varchar.test\nindex e1db15be50b5..26a497c3f15f 100644\n--- a/test/sql/index/art/test_art_string.test\n+++ b/test/sql/index/art/types/test_art_varchar.test\n@@ -1,6 +1,6 @@\n-# name: test/sql/index/art/test_art_string.test\n-# description: ART Strings\n-# group: [art]\n+# name: test/sql/index/art/types/test_art_varchar.test\n+# description: Test ART VARCHAR key type\n+# group: [types]\n \n statement ok\n PRAGMA enable_verification\ndiff --git a/test/sql/index/art/test_art_vacuum_integers.test_slow b/test/sql/index/art/vacuum/test_art_vacuum_integers.test_slow\nsimilarity index 97%\nrename from test/sql/index/art/test_art_vacuum_integers.test_slow\nrename to test/sql/index/art/vacuum/test_art_vacuum_integers.test_slow\nindex 5b9f5a1e57ac..16183f7448c2 100644\n--- a/test/sql/index/art/test_art_vacuum_integers.test_slow\n+++ b/test/sql/index/art/vacuum/test_art_vacuum_integers.test_slow\n@@ -1,13 +1,13 @@\n-# name: test/sql/index/art/test_art_vacuum_integers.test_slow\n+# name: test/sql/index/art/vacuum/test_art_vacuum_integers.test_slow\n # description: Test checkpointing for vacuum operations with integers\n-# group: [art]\n-\n-# load the DB from disk\n-load __TEST_DIR__/test_art_vacuum_integers.db\n+# group: [vacuum]\n \n statement ok\n PRAGMA enable_verification\n \n+# load the DB from disk\n+load __TEST_DIR__/test_art_vacuum_integers.db\n+\n statement ok\n CREATE FUNCTION mem_to_bytes(x) AS CASE\n     WHEN CONTAINS(x, 'KB') THEN REPLACE(x, 'KB', '')::INT * 1000\ndiff --git a/test/sql/index/art/test_art_vacuum_strings.test_slow b/test/sql/index/art/vacuum/test_art_vacuum_strings.test_slow\nsimilarity index 97%\nrename from test/sql/index/art/test_art_vacuum_strings.test_slow\nrename to test/sql/index/art/vacuum/test_art_vacuum_strings.test_slow\nindex e6103d37c4ad..de931adaee18 100644\n--- a/test/sql/index/art/test_art_vacuum_strings.test_slow\n+++ b/test/sql/index/art/vacuum/test_art_vacuum_strings.test_slow\n@@ -1,13 +1,13 @@\n-# name: test/sql/index/art/test_art_vacuum_strings.test_slow\n+# name: test/sql/index/art/vacuum/test_art_vacuum_strings.test_slow\n # description: Test checkpointing for vacuum operations with strings\n-# group: [art]\n-\n-# load the DB from disk\n-load __TEST_DIR__/test_art_vacuum_strings.db\n+# group: [vacuum]\n \n statement ok\n PRAGMA enable_verification\n \n+# load the DB from disk\n+load __TEST_DIR__/test_art_vacuum_strings.db\n+\n statement ok\n CREATE FUNCTION mem_to_bytes(x) AS CASE\n     WHEN CONTAINS(x, 'KB') THEN REPLACE(x, 'KB', '')::INT * 1000\ndiff --git a/test/sql/join/asof/test_asof_join.test_slow b/test/sql/join/asof/test_asof_join.test_slow\nnew file mode 100644\nindex 000000000000..f5353eb0d4bb\n--- /dev/null\n+++ b/test/sql/join/asof/test_asof_join.test_slow\n@@ -0,0 +1,64 @@\n+# name: test/sql/join/asof/test_asof_join.test_slow\n+# description: Coverage tests for AsOf Joins\n+# group: [asof]\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+statement ok\n+pragma verify_external\n+\n+# Highly skewed data to trigger spin-waits\n+statement ok\n+CREATE TABLE build AS\n+\tSELECT \n+\t\t'1990-03-21 13:00:00'::TIMESTAMP + INTERVAL (range) MINUTE AS begin,\n+\t\trange % 4 AS key,\n+\t\trange AS value,\n+\tFROM range(0, 10000000);\n+\n+statement ok\n+CREATE TABLE skewed_probe (begin TIMESTAMP, key INTEGER);\n+\n+statement ok\n+INSERT INTO skewed_probe\n+\tSELECT \n+\t\t'1990-04-21 13:00:01'::TIMESTAMP + INTERVAL (range) MINUTE AS begin,\n+\t\t0::INTEGER AS key,\n+\tFROM range(0, 5);\n+\n+statement ok\n+INSERT INTO skewed_probe\n+\tSELECT \n+\t\t'1990-05-21 13:00:01'::TIMESTAMP + INTERVAL (range) MINUTE AS begin,\n+\t\t1::INTEGER AS key,\n+\tFROM range(0, 10);\n+\n+statement ok\n+INSERT INTO skewed_probe\n+\tSELECT \n+\t\t'1990-06-21 13:00:01'::TIMESTAMP + INTERVAL (range) MINUTE AS begin,\n+\t\t2::INTEGER AS key,\n+\tFROM range(0, 20);\n+\n+statement ok\n+INSERT INTO skewed_probe\n+\tSELECT \n+\t\t'1990-03-21 13:00:01'::TIMESTAMP + INTERVAL (range) MINUTE AS begin,\n+\t\t3::INTEGER AS key,\n+\tFROM range(0, 10000000);\n+\n+\n+# Early finish to some left partition scans: Highly skewed data\n+query II\n+SELECT SUM(value), COUNT(*)\n+FROM skewed_probe ASOF JOIN build USING(key, begin);\n+----\n+49999983751397\t10000032\n+\n+# Blocked until all left scans are completed\n+query II\n+SELECT SUM(value), COUNT(*)\n+FROM skewed_probe ASOF RIGHT JOIN build USING(key, begin);\n+----\n+87499975015813\t17500020\ndiff --git a/test/sql/join/asof/test_asof_join_merge.test b/test/sql/join/asof/test_asof_join_merge.test\nnew file mode 100644\nindex 000000000000..ae92cf02e676\n--- /dev/null\n+++ b/test/sql/join/asof/test_asof_join_merge.test\n@@ -0,0 +1,22 @@\n+# name: test/sql/join/asof/test_asof_join_merge.test\n+# description: Test merge queue and repartitioning\n+# group: [asof]\n+\n+statement ok\n+PRAGMA memory_limit='400M'\n+\n+statement ok\n+PRAGMA threads=4\n+\n+query II\n+WITH build AS (\n+\tSELECT k, ('2021-01-01'::TIMESTAMP + INTERVAL (i) SECOND) AS t, i % 37 AS v\n+\tFROM range(3000000) t(i), range(2) tk(k)\n+), probe AS (\n+\tSELECT k, t \n+\tFROM range(2) tk(k), \n+\t\t range('2021-01-01 00:00:30'::TIMESTAMP, '2021-02-01 00:00:30'::TIMESTAMP, INTERVAL 1 HOUR) tt(t)\n+) SELECT SUM(v) AS v, COUNT(*) AS n\n+FROM probe ASOF JOIN build USING(k, t)\n+----\n+26790\t1488\ndiff --git a/test/sql/join/asof/test_asof_join_missing.test_slow b/test/sql/join/asof/test_asof_join_missing.test_slow\nindex da7b88aa7063..523a8fc25b68 100644\n--- a/test/sql/join/asof/test_asof_join_missing.test_slow\n+++ b/test/sql/join/asof/test_asof_join_missing.test_slow\n@@ -33,6 +33,20 @@ FROM probe ASOF JOIN build USING(k, t);\n ----\n 108\n \n+# Coverage: Missing right side bin\n+query II\n+WITH build AS (\n+\tSELECT k * 2 as k, '2001-01-01 00:00:00'::TIMESTAMP + INTERVAL (v) MINUTE AS t, v\n+\tFROM range(0,10) vals(v), range(0,5) keys(k)\n+), probe AS (\n+\tSELECT k / 2 AS k, t - INTERVAL (30) SECOND AS t\n+\tFROM build\n+)\n+SELECT SUM(v), COUNT(*)\n+FROM probe ASOF JOIN build USING(k, t);\n+----\n+108\t27\n+\n # 20 dates, 5 keys\n query I\n WITH build AS (\ndiff --git a/test/sql/join/asof/test_asof_join_timestamps.test b/test/sql/join/asof/test_asof_join_timestamps.test\nindex a30ba984b45a..7e2a6ec0e69e 100644\n--- a/test/sql/join/asof/test_asof_join_timestamps.test\n+++ b/test/sql/join/asof/test_asof_join_timestamps.test\n@@ -145,3 +145,62 @@ ORDER BY ALL\n 2023-03-21 21:00:00\t3\n infinity\t9\n NULL\t-1\n+\n+#\n+# Coverage\n+#\n+\n+# rhs_sink.count == 0\n+query II\n+SELECT p.begin, e.value\n+FROM probe0 p ASOF LEFT JOIN (SELECT * FROM events0 WHERE log(value + 5) > 10) e\n+ON p.begin >= e.begin\n+ORDER BY p.begin ASC\n+----\n+2023-03-21 12:00:00\tNULL\n+2023-03-21 13:00:00\tNULL\n+2023-03-21 14:00:00\tNULL\n+2023-03-21 15:00:00\tNULL\n+2023-03-21 16:00:00\tNULL\n+2023-03-21 17:00:00\tNULL\n+2023-03-21 18:00:00\tNULL\n+2023-03-21 19:00:00\tNULL\n+2023-03-21 20:00:00\tNULL\n+2023-03-21 21:00:00\tNULL\n+infinity\tNULL\n+NULL\tNULL\n+\n+# EmptyResultIfRHSIsEmpty\n+query II\n+SELECT p.begin, e.value\n+FROM probe0 p ASOF RIGHT JOIN (SELECT * FROM events0 WHERE log(value + 5) > 10) e\n+ON p.begin >= e.begin\n+ORDER BY p.begin ASC\n+----\n+\n+# SEMI JOIN\n+query I\n+SELECT p.begin\n+FROM probe0 p ASOF SEMI JOIN events0 e\n+ON p.begin >= e.begin\n+ORDER BY p.begin ASC\n+----\n+2023-03-21 13:00:00\n+2023-03-21 14:00:00\n+2023-03-21 15:00:00\n+2023-03-21 16:00:00\n+2023-03-21 17:00:00\n+2023-03-21 18:00:00\n+2023-03-21 19:00:00\n+2023-03-21 20:00:00\n+2023-03-21 21:00:00\n+infinity\n+\n+# ANTI JOIN\n+query I\n+SELECT p.begin\n+FROM probe0 p ASOF ANTI JOIN events0 e\n+ON p.begin >= e.begin\n+ORDER BY p.begin ASC\n+----\n+2023-03-21 12:00:00\ndiff --git a/test/sql/join/asof/test_asof_join_tpch.test_slow b/test/sql/join/asof/test_asof_join_tpch.test_slow\nnew file mode 100644\nindex 000000000000..071df8d0e65a\n--- /dev/null\n+++ b/test/sql/join/asof/test_asof_join_tpch.test_slow\n@@ -0,0 +1,25 @@\n+# name: test/sql/join/asof/test_asof_join_tpch.test_slow\n+# description: AsOf Join using floating point keys in TPC-H\n+# group: [asof]\n+\n+require tpch\n+\n+statement ok\n+CALL dbgen(sf=0.1, suffix='_normal');\n+\n+statement ok\n+CREATE TABLE lineitem_dbl AS SELECT * REPLACE (l_orderkey::DOUBLE  + 0.25 AS l_orderkey) FROM lineitem_normal;\n+\n+statement ok\n+CREATE TABLE orders_dbl AS SELECT * REPLACE (o_orderkey::DOUBLE AS o_orderkey) FROM orders_normal;\n+\n+query I\n+SELECT COUNT(*) from lineitem_normal join orders_normal on (l_orderkey=o_orderkey);\n+----\n+600572\n+\n+query I\n+SELECT COUNT(*) \n+FROM lineitem_dbl ASOF JOIN orders_dbl ON (l_orderkey >= o_orderkey);\n+----\n+600572\ndiff --git a/test/sql/join/external/simple_external_join.test_slow b/test/sql/join/external/simple_external_join.test_coverage\nsimilarity index 73%\nrename from test/sql/join/external/simple_external_join.test_slow\nrename to test/sql/join/external/simple_external_join.test_coverage\nindex c07a56828da8..79a5c9afb5e2 100644\n--- a/test/sql/join/external/simple_external_join.test_slow\n+++ b/test/sql/join/external/simple_external_join.test_coverage\n@@ -1,4 +1,4 @@\n-# name: test/sql/join/external/simple_external_join.test_slow\n+# name: test/sql/join/external/simple_external_join.test_coverage\n # description: Test simple external join\n # group: [external]\n \n@@ -13,15 +13,28 @@ create table t2 (j varchar)\n # Create tables with large string values so that strings aren't inlined\n # The tables have some overlapping values to keep the join result small\n statement ok\n-insert into t1 select concat(range::VARCHAR, repeat('0', 50)) i from range(100000) order by random()\n+insert into t1 select concat(range::VARCHAR, repeat('0', 50)) i from range(100000)\n \n statement ok\n-insert into t2 select concat(range::VARCHAR, repeat('0', 50)) j from range(90000, 500000) order by random()\n+insert into t2 select concat(range::VARCHAR, repeat('0', 50)) j from range(90000, 500000)\n \n-# tight memory settings for the external joins\n+# we want tight memory settings for the external joins\n statement ok\n pragma verify_parallelism\n \n+# with 1 thread we can do a tighter memory limit\n+statement ok\n+pragma threads=1\n+\n+statement ok\n+pragma memory_limit='25mb'\n+\n+query I\n+select count(*) from t1, t2 where i = j\n+----\n+10000\n+\n+# now with more threads and a slightly higher limit\n statement ok\n pragma threads=4\n \ndiff --git a/test/sql/join/full_outer/test_full_outer_join_many_matches.test_coverage b/test/sql/join/full_outer/test_full_outer_join_many_matches.test_slow\nsimilarity index 99%\nrename from test/sql/join/full_outer/test_full_outer_join_many_matches.test_coverage\nrename to test/sql/join/full_outer/test_full_outer_join_many_matches.test_slow\nindex bed0facb8fa1..29ccc000af29 100644\n--- a/test/sql/join/full_outer/test_full_outer_join_many_matches.test_coverage\n+++ b/test/sql/join/full_outer/test_full_outer_join_many_matches.test_slow\n@@ -1,4 +1,4 @@\n-# name: test/sql/join/full_outer/test_full_outer_join_many_matches.test_coverage\n+# name: test/sql/join/full_outer/test_full_outer_join_many_matches.test_slow\n # description: Test FULL OUTER JOIN with many matches\n # group: [full_outer]\n \ndiff --git a/test/sql/join/inner/test_join_invisible_probe.test_coverage b/test/sql/join/inner/test_join_invisible_probe.test_coverage\ndeleted file mode 100644\nindex 8cce648628dc..000000000000\n--- a/test/sql/join/inner/test_join_invisible_probe.test_coverage\n+++ /dev/null\n@@ -1,39 +0,0 @@\n-# name: test/sql/join/inner/test_join_invisible_probe.test_coverage\n-# description: Test joins that would generate a perfect hashtable\n-# group: [inner]\n-\n-statement ok\n-PRAGMA enable_verification\n-\n-# create the table integers with the values 0..1000\n-statement ok\n-CREATE TABLE test3 AS SELECT range r FROM range(0, 1024, 1);\n-\n-statement ok\n-CREATE TABLE test4 AS SELECT range r FROM range(0, 1024, 1);\n-\n-# START LOOP 0..10\n-loop i 0 9\n-\n-statement ok\n-INSERT INTO test4 SELECT * FROM test3;\n-\n-endloop\n-\n-\n-query I\n-select test3.r, test4.r from test3,test4 where test3.r=test4.r order by test3.r, test4.r;\n-----\n-20480 values hashing to 35ba7ce9ff11516c6ab6793a3bf802e4\n-\n-loop i 0 90\n-\n-statement ok\n-INSERT INTO test4 SELECT * FROM test3;\n-\n-endloop\n-\n-query I\n-select test3.r, test4.r from test3,test4 where test3.r=test4.r order by test3.r, test4.r;\n-----\n-204800 values hashing to 77cdae057078ab7ba8339275f564fac1\ndiff --git a/test/sql/join/inner/test_join_invisible_probe.test_slow b/test/sql/join/inner/test_join_invisible_probe.test_slow\nindex c17388355901..3432daf6fed0 100644\n--- a/test/sql/join/inner/test_join_invisible_probe.test_slow\n+++ b/test/sql/join/inner/test_join_invisible_probe.test_slow\n@@ -2,8 +2,6 @@\n # description: Test joins that would generate a perfect hashtable\n # group: [inner]\n \n-require 64bit\n-\n statement ok\n PRAGMA enable_verification\n \n@@ -39,33 +37,3 @@ query I\n select test3.r, test4.r from test3,test4 where test3.r=test4.r order by test3.r, test4.r;\n ----\n 204800 values hashing to 77cdae057078ab7ba8339275f564fac1\n-\n-#This is really slow on smaller vector sizes\n-require vector_size 1024\n-\n-loop i 0 900\n-\n-statement ok\n-INSERT INTO test4 SELECT * FROM test3;\n-\n-endloop\n-\n-\n-query I\n-select test3.r, test4.r from test3,test4 where test3.r=test4.r order by test3.r, test4.r;\n-----\n-2048000 values hashing to bccebf996dfc50af5dcf31a047785871\n-\n-loop i 0 9000\n-\n-statement ok\n-INSERT INTO test4 SELECT * FROM test3;\n-\n-endloop\n-\n-\n-\n-query I\n-select test3.r, test4.r from test3,test4 where test3.r=test4.r order by test3.r, test4.r;\n-----\n-20480000 values hashing to 7b4097bf858201ecb9231cf9c1578b12\n\\ No newline at end of file\ndiff --git a/test/sql/join/inner/test_join_perfect_hash.test b/test/sql/join/inner/test_join_perfect_hash.test\nindex 3130d99ecb6e..02ca8bf83c87 100644\n--- a/test/sql/join/inner/test_join_perfect_hash.test\n+++ b/test/sql/join/inner/test_join_perfect_hash.test\n@@ -51,15 +51,16 @@ DROP TABLE test2;\n \n endloop\n \n+foreach type TINYINT SMALLINT INTEGER BIGINT\n \n statement ok\n-CREATE TABLE test3 (a INTEGER, b INTEGER);\n+CREATE OR REPLACE TABLE test3 (a ${type}, b ${type});\n \n statement ok\n INSERT INTO test3 VALUES (-11, -1), (-12, -2), (13, 3)\n \n statement ok\n-CREATE TABLE test4 (b INTEGER, c INTEGER);\n+CREATE OR REPLACE TABLE test4 (b ${type}, c ${type});\n \n statement ok\n INSERT INTO test4 VALUES (-1, -10), (-2, -20), (3, 30), (-1, -10), (-2, -20), (3, 30), (-1, -10), (-2, -20), (3, 30), (-1, -10), (-2, -20), (3, 30), (-1, -10), (-2, -20), (3, 30)\n@@ -84,14 +85,18 @@ SELECT a, test3.b,c FROM test3, test4 WHERE test3.b = test4.b order by a, test3.\n 13\t3\t30\n 13\t3\t30\n \n+endloop\n+\n+foreach type <integral>\n+\n statement ok\n-CREATE TABLE test5 (a INTEGER, b INTEGER);\n+CREATE OR REPLACE TABLE test5 (a ${type}, b ${type});\n \n statement ok\n INSERT INTO test5 VALUES (11, 1), (12, 2), (13, 3), (14, null), (null, 4)\n \n statement ok\n-CREATE TABLE test6 (b INTEGER, c INTEGER);\n+CREATE OR REPLACE TABLE test6 (b ${type}, c ${type});\n \n statement ok\n INSERT INTO test6 VALUES (1, 10), (2, 20), (3, 30), (1, 10), (2, 20), (3, 30), (1, 10), (2, 20), (3, 30), (1, 10), (2, 20), (3, 30), (1, 10), (2, 20), (3, 30), (4, 40), (null, 30), (1, null)\n@@ -120,13 +125,13 @@ NULL\t4\t40\n \n \n statement ok\n-CREATE TABLE test7 (a INTEGER, b INTEGER);\n+CREATE OR REPLACE TABLE test7 (a ${type}, b ${type});\n \n statement ok\n INSERT INTO test7 VALUES (11, 1), (12, 2), (13, 3), (15, 5)\n \n statement ok\n-CREATE TABLE test8 (b INTEGER, c INTEGER);\n+CREATE OR REPLACE TABLE test8 (b ${type}, c ${type});\n \n statement ok\n INSERT INTO test8 VALUES (1, 10), (2, 20), (3, 30), (1, 10), (2, 20), (3, 30), (1, 10), (2, 20), (3, 30), (1, 10), (2, 20), (3, 30), (1, 10), (2, 20), (3, 30), (4, 40)\n@@ -151,6 +156,8 @@ SELECT a, test7.b,c FROM test7, test8 WHERE test7.b = test8.b order by a, test7.\n 13\t3\t30\n 13\t3\t30\n \n+endloop\n+\n # create the table integers with the values 0..1026\n statement ok\n CREATE TABLE test9 AS SELECT range r FROM range(0, 1026, 1);\ndiff --git a/test/sql/join/inner/test_join_types.test_coverage b/test/sql/join/inner/test_join_types.test_slow\nsimilarity index 95%\nrename from test/sql/join/inner/test_join_types.test_coverage\nrename to test/sql/join/inner/test_join_types.test_slow\nindex 77ba9a54048b..8c9e4acb1211 100644\n--- a/test/sql/join/inner/test_join_types.test_coverage\n+++ b/test/sql/join/inner/test_join_types.test_slow\n@@ -1,4 +1,4 @@\n-# name: test/sql/join/inner/test_join_types.test_coverage\n+# name: test/sql/join/inner/test_join_types.test_slow\n # description: Test joins with different types\n # group: [inner]\n \ndiff --git a/test/sql/join/left_outer/test_left_join_on_true.test b/test/sql/join/left_outer/test_left_join_on_true.test\nnew file mode 100644\nindex 000000000000..f8554ddc8458\n--- /dev/null\n+++ b/test/sql/join/left_outer/test_left_join_on_true.test\n@@ -0,0 +1,124 @@\n+# name: test/sql/join/left_outer/test_left_join_on_true.test\n+# description: Test ON TRUE join conditions\n+# group: [left_outer]\n+\n+query II\n+WITH t AS (\n+  SELECT 1 AS r, [{n:1}, {n:2}] AS s\n+  UNION\n+  SELECT 2 AS r, [{n:3}, {n:4}] AS s\n+)\n+SELECT r, s1.s.n FROM t\n+LEFT JOIN UNNEST(s) AS s1(s) ON TRUE\n+ORDER BY 1, 2\n+----\n+1\t1\n+1\t2\n+2\t3\n+2\t4\n+\n+query II\n+WITH t AS (\n+  SELECT 1 AS r, ARRAY[1, 2, 3] AS a\n+  UNION SELECT 2 AS r, ARRAY[4] AS a\n+  UNION SELECT 4 AS r, ARRAY[] AS a\n+)\n+SELECT r, a.value\n+FROM t\n+LEFT JOIN UNNEST(a) AS a(value) ON TRUE\n+ORDER BY 1, 2\n+----\n+1\t1\n+1\t2\n+1\t3\n+2\t4\n+4\tNULL\n+\n+# more than one condition\n+\n+query II\n+WITH t AS (\n+  SELECT 1 AS r, ARRAY[1, 2, 3] AS a\n+  UNION SELECT 2 AS r, ARRAY[4] AS a\n+  UNION SELECT 4 AS r, ARRAY[]::INTEGER[] AS a\n+)\n+SELECT r, a.value\n+FROM t\n+LEFT JOIN UNNEST(a) AS a(value) ON TRUE AND a.value IS NULL\n+ORDER BY 1, 2\n+----\n+1\tNULL\n+2\tNULL\n+4\tNULL\n+\n+query II\n+WITH t AS (\n+  SELECT 1 AS r, ARRAY[1, 2, 3] AS a\n+  UNION SELECT 2 AS r, ARRAY[4] AS a\n+  UNION SELECT 4 AS r, ARRAY[] AS a\n+)\n+SELECT r, a.value\n+FROM t\n+LEFT JOIN UNNEST(a) AS a(value) ON (1 = 1) AND TRUE AND list_contains([2, 3], 2)\n+ORDER BY 1, 2\n+----\n+1\t1\n+1\t2\n+1\t3\n+2\t4\n+4\tNULL\n+\n+# non-true constant expressions cause a binder error\n+\n+statement error\n+WITH t AS (\n+  SELECT 1 AS r, [{n:1}, {n:2}] AS s\n+  UNION\n+  SELECT 2 AS r, [{n:3}, {n:4}] AS s\n+)\n+SELECT r, s1.s.n FROM t\n+LEFT JOIN UNNEST(s) AS s1(s) ON FALSE\n+----\n+Binder Error: Join condition for non-inner LATERAL JOIN must be a comparison between the left and right side\n+\n+# test non-lateral left joins\n+\n+statement ok\n+CREATE TABLE integers(i INTEGER, j INTEGER)\n+\n+statement ok\n+INSERT INTO integers VALUES (1, 2), (2, 3), (3, 4)\n+\n+statement ok\n+CREATE TABLE integers2(k INTEGER, l INTEGER)\n+\n+statement ok\n+INSERT INTO integers2 VALUES (1, 10), (2, 20)\n+\n+query IIII\n+SELECT * FROM integers LEFT OUTER JOIN integers2 ON TRUE AND integers.i=integers2.k AND TRUE ORDER BY i\n+----\n+1\t2\t1\t10\n+2\t3\t2\t20\n+3\t4\tNULL\tNULL\n+\n+query IIII\n+SELECT * FROM integers LEFT OUTER JOIN integers2 ON TRUE AND integers.i=integers2.k AND FALSE ORDER BY i\n+----\n+1\t2\tNULL\tNULL\n+2\t3\tNULL\tNULL\n+3\t4\tNULL\tNULL\n+\n+# this is just a cross product\n+\n+query IIII\n+SELECT * FROM integers LEFT OUTER JOIN integers2 ON TRUE ORDER BY i\n+----\n+1\t2\t1\t10\n+1\t2\t2\t20\n+2\t3\t1\t10\n+2\t3\t2\t20\n+3\t4\t1\t10\n+3\t4\t2\t20\n+\n+\ndiff --git a/test/sql/join/mark/test_mark_join_types.test_coverage b/test/sql/join/mark/test_mark_join_types.test_slow\nsimilarity index 96%\nrename from test/sql/join/mark/test_mark_join_types.test_coverage\nrename to test/sql/join/mark/test_mark_join_types.test_slow\nindex c68447caf4a1..aa542f6f35d3 100644\n--- a/test/sql/join/mark/test_mark_join_types.test_coverage\n+++ b/test/sql/join/mark/test_mark_join_types.test_slow\n@@ -1,4 +1,4 @@\n-# name: test/sql/join/mark/test_mark_join_types.test_coverage\n+# name: test/sql/join/mark/test_mark_join_types.test_slow\n # description: Test mark join with different types\n # group: [mark]\n \ndiff --git a/test/sql/join/test_not_distinct_from.test_coverage b/test/sql/join/test_not_distinct_from.test_slow\nsimilarity index 98%\nrename from test/sql/join/test_not_distinct_from.test_coverage\nrename to test/sql/join/test_not_distinct_from.test_slow\nindex 2102c999c309..56bec996b0d0 100644\n--- a/test/sql/join/test_not_distinct_from.test_coverage\n+++ b/test/sql/join/test_not_distinct_from.test_slow\n@@ -1,4 +1,4 @@\n-# name: test/sql/join/test_not_distinct_from.test_coverage\n+# name: test/sql/join/test_not_distinct_from.test_slow\n # description: Test join on is not distinct from query\n # group: [join]\n \ndiff --git a/test/sql/json/json_nested_casts.test b/test/sql/json/json_nested_casts.test\nindex 5406eaff795f..03614edf8c41 100644\n--- a/test/sql/json/json_nested_casts.test\n+++ b/test/sql/json/json_nested_casts.test\n@@ -98,6 +98,12 @@ SELECT '42'::UNION(u VARCHAR)::JSON\n ----\n 42\n \n+# try_cast works too\n+query I\n+SELECT TRY_CAST('{\"duck\":42' AS JSON)\n+----\n+NULL\n+\n # we support our nested to and from JSON (just calls to_json and from_json - well tested)\n query I\n SELECT {duck: 42}::JSON\ndiff --git a/test/sql/json/read_json_dates.test b/test/sql/json/read_json_dates.test\nindex 135871cbc3ee..58de523b314f 100644\n--- a/test/sql/json/read_json_dates.test\n+++ b/test/sql/json/read_json_dates.test\n@@ -59,6 +59,12 @@ select typeof(d), d from read_ndjson('__TEST_DIR__/my_file.json', columns={d: 'D\n ----\n DATE\t1996-03-27\n \n+# wrong format read_ndjson\n+statement error\n+select typeof(d), d from read_ndjson('__TEST_DIR__/my_file.json', columns={d: 'DATE'}, dateformat='%d-%Y-%m')\n+----\n+Invalid Input Error\n+\n # forced format COPY\n statement ok\n drop table if exists date_copy_test\n@@ -94,6 +100,12 @@ select typeof(t), t from read_ndjson('__TEST_DIR__/my_file.json', columns={t: 'T\n ----\n TIMESTAMP\t1996-03-27 07:42:33\n \n+# wrong format read_ndjson\n+statement error\n+select typeof(t), t from read_ndjson('__TEST_DIR__/my_file.json', columns={t: 'TIMESTAMP'}, timestamp_format='%H:%M:%S%y-%m-%d')\n+----\n+Invalid Input Error\n+\n # forced format COPY\n statement ok\n drop table if exists timestamp_copy_test\ndiff --git a/test/sql/json/test_json_copy.test_slow b/test/sql/json/test_json_copy.test_slow\nindex 7149c54db8d0..f1bd05a4fcf8 100644\n--- a/test/sql/json/test_json_copy.test_slow\n+++ b/test/sql/json/test_json_copy.test_slow\n@@ -192,13 +192,29 @@ copy (select range as i from range(10)) to '__TEST_DIR__/my.json' (COMPRESSION)\n Binder Error\n \n statement ok\n-copy (select range as i from range(10)) to '__TEST_DIR__/my.json' (COMPRESSION GZIP)\n+copy (select range as i from range(10)) to '__TEST_DIR__/my.json.gz' (COMPRESSION GZIP)\n \n statement ok\n create table my_range (i bigint)\n \n statement ok\n-copy my_range from '__TEST_DIR__/my.json' (COMPRESSION GZIP)\n+copy my_range from '__TEST_DIR__/my.json.gz' (COMPRESSION GZIP)\n+\n+# we can auto-detect even though we have compressed\n+statement ok\n+select * from '__TEST_DIR__/my.json.gz'\n+\n+# works with zstd too, but we skip this test for now\n+# it works in CLI, but not in unittest for some reason (ZSTD is not in VirtualFileSystem::compressed_fs)\n+mode skip\n+\n+statement ok\n+copy (select range as i from range(10)) to '__TEST_DIR__/my.json.zst' (COMPRESSION ZSTD)\n+\n+statement ok\n+select * from '__TEST_DIR__/my.json.zst'\n+\n+mode unskip\n \n query I\n select * from my_range\ndiff --git a/test/sql/json/test_json_dollar.test b/test/sql/json/test_json_dollar.test\ndeleted file mode 100644\nindex 9b72d4337bcf..000000000000\n--- a/test/sql/json/test_json_dollar.test\n+++ /dev/null\n@@ -1,98 +0,0 @@\n-# name: test/sql/json/test_json_dollar.test\n-# description: Test JSON $ notation\n-# group: [json]\n-\n-require json\n-\n-statement ok\n-pragma enable_verification\n-\n-query T\n-select json_extract('{\"my_field\": \"duck\"}', '$.my_field')\n-----\n-\"duck\"\n-\n-query T\n-select json_extract('[0, 1, 2]', '$[1]')\n-----\n-1\n-\n-query T\n-select json_extract('[[1]]', '$[0][0]')\n-----\n-1\n-\n-statement ok\n-create table test (j varchar, q varchar)\n-\n-statement ok\n-insert into test values ('{\"my_field\": {\"my_nested_field\": [\"goose\", \"duck\"]}}', '$.my_field.my_nested_field[0]')\n-\n-query T\n-select json_extract(j, '$.my_field.my_nested_field[0]') from test\n-----\n-\"goose\"\n-\n-query T\n-select json_extract(j, '$.my_field.my_nested_field[#-1]') from test\n-----\n-\"duck\"\n-\n-query T\n-select json_extract(j, '$.my_field.my_nested_field[#-2]') from test\n-----\n-\"goose\"\n-\n-query T\n-select json_extract(j, '$.my_field.my_nested_field[#-3]') from test\n-----\n-NULL\n-\n-query T\n-select json_extract(j, '$.my_field.my_nested_field[#]') from test\n-----\n-NULL\n-\n-query T\n-select json_extract(j, q) from test\n-----\n-\"goose\"\n-\n-query T\n-select json_extract('{\"my_field\": [{\"my_nested_field\": [\"duck\", \"goose\"]}]}', '$.my_field[0].my_nested_field[0]')\n-----\n-\"duck\"\n-\n-query T\n-select json_extract('{\"my_field\": [{\"my_nested_field\": [\"duck\", \"goose\"]}]}', '$.my_field[#-1].my_nested_field[#-1]')\n-----\n-\"goose\"\n-\n-# some NULLs\n-\n-query T\n-select json_extract(j, '$.my_field.my_nested_field.3') from test\n-----\n-NULL\n-\n-# path error\n-statement error\n-select json_extract('{\"a\": {\"b\": \"c\"}}', '$[]');\n-\n-statement error\n-select json_extract(j, '$.my_field[my_nested_field[#-3]') from test\n-\n-statement error\n-select json_extract(j, '$.my_field.my_nested_field[!]') from test\n-\n-statement error\n-select json_extract('{\"a\": {\"b\": \"c\"}}', '$.a..');\n-\n-statement error\n-select json_extract('{\"a\": {\"b\": \"c\"}}', '$[[');\n-\n-statement error\n-select json_extract('{\"a\": {\"b\": \"c\"}}', '$[.');\n-\n-statement error\n-select json_extract('{\"a\": {\"b\": \"c\"}}', '$]');\ndiff --git a/test/sql/json/test_json_empty_object.test b/test/sql/json/test_json_empty_object.test\nindex cedbff22accd..93c543d46b97 100644\n--- a/test/sql/json/test_json_empty_object.test\n+++ b/test/sql/json/test_json_empty_object.test\n@@ -16,7 +16,7 @@ select json_structure('{}')\n statement error\n select json_transform('{}', '{}')\n ----\n-Invalid Input Error: Empty object in JSON structure\n+Binder Error: Empty object in JSON structure\n \n # create a JSON file with an empty struct\n statement ok\ndiff --git a/test/sql/json/test_json_extract.test b/test/sql/json/test_json_extract.test\nindex 9453a1b23de1..c08f6c6da23b 100644\n--- a/test/sql/json/test_json_extract.test\n+++ b/test/sql/json/test_json_extract.test\n@@ -120,6 +120,15 @@ SELECT json_extract('{\"a\":2,\"c\":[4,5,{\"f\":7}]}', '$.x');\n ----\n NULL\n \n+# list of paths must be constant\n+statement error\n+with tbl as (\n+    select '{\"a\":2,\"c\":[4,5],\"f\":7}' j, ['$.c','$.a'] p\n+)\n+SELECT json_extract(j, p);\n+----\n+Binder Error\n+\n query T\n SELECT json_extract('{\"a\":2,\"c\":[4,5],\"f\":7}', ['$.c','$.a']);\n ----\n@@ -146,69 +155,78 @@ SELECT json_extract(j, '$.b[#]') FROM t1;\n ----\n NULL\n \n-query T\n-SELECT json_extract(j, '$.b[#-1]') FROM t1;\n+# -0 is interpreted as just 0, just like in python\n+query II\n+SELECT json_extract(j, '$.b[#-0]') a, a = json_extract(j, '$.b[-0]') FROM t1;\n ----\n-4\n+1\ttrue\n \n-query T\n-SELECT json_extract(j, '$.b[#-2]') FROM t1;\n+query II\n+SELECT json_extract(j, '$.b[#-1]') a, a = json_extract(j, '$.b[-1]') FROM t1;\n ----\n-[2,3]\n+4\ttrue\n \n-query T\n-SELECT json_extract(j, '$.b[#-02]') FROM t1;\n+query TT\n+SELECT json_extract(j, '$.b[#-2]') a, a = json_extract(j, '$.b[-2]') FROM t1;\n ----\n-[2,3]\n+[2,3]\ttrue\n \n-query T\n-SELECT json_extract(j, '$.b[#-3]') FROM t1;\n+query TT\n+SELECT json_extract(j, '$.b[#-02]') a, a = json_extract(j, '$.b[-02]') FROM t1;\n ----\n-1\n+[2,3]\ttrue\n \n-query T\n-SELECT json_extract(j, '$.b[#-4]') FROM t1;\n+query TT\n+SELECT json_extract(j, '$.b[#-3]') a, a = json_extract(j, '$.b[-3]') FROM t1;\n ----\n-NULL\n+1\ttrue\n \n-query T\n-SELECT json_extract(j, '$.b[#-2][#-1]') FROM t1;\n+query TT\n+SELECT json_extract(j, '$.b[#-4]'), json_extract(j, '$.b[-4]') FROM t1;\n ----\n-3\n+NULL\tNULL\n \n-query T\n-SELECT j::JSON->'$.b[#-2][#-1]' FROM t1;\n+query TT\n+SELECT json_extract(j, '$.b[#-2][#-1]') a, a = json_extract(j, '$.b[-2][-1]') FROM t1;\n ----\n-3\n+3\ttrue\n \n-query T\n-SELECT json_extract(j, ['$.b[0]', '$.b[#-1]']) FROM t1;\n+query TT\n+SELECT j::JSON->'$.b[#-2][#-1]' a, a = (j::JSON->'$.b[-2][-1]') FROM t1;\n ----\n-[1, 4]\n+3\ttrue\n \n-query T\n-SELECT j::JSON->['$.b[0]', '$.b[#-1]'] FROM t1;\n+query TT\n+SELECT json_extract(j, ['$.b[0]', '$.b[#-1]']) a, a = json_extract(j, ['$.b[0]', '$.b[-1]']) FROM t1;\n ----\n-[1, 4]\n+[1, 4]\ttrue\n \n-query T\n-SELECT json_extract(j, '$.a[#-1]') FROM t1;\n+query TT\n+SELECT j::JSON->['$.b[0]', '$.b[#-1]'] a, a = (j::JSON->['$.b[0]', '$.b[-1]']) FROM t1;\n ----\n-NULL\n+[1, 4]\ttrue\n \n-query T\n-SELECT json_extract(j, '$.b[#-000001]') FROM t1;\n+query TT\n+SELECT json_extract(j, '$.a[#-1]'), json_extract(j, '$.a[-1]') FROM t1;\n ----\n-4\n+NULL\tNULL\n \n-query T\n-SELECT j::JSON->'$.b[#-000001]' FROM t1;\n+query TT\n+SELECT json_extract(j, '$.b[#-000001]') a, a = json_extract(j, '$.b[-000001]') FROM t1;\n+----\n+4\ttrue\n+\n+query TT\n+SELECT j::JSON->'$.b[#-000001]' a, a = (j::JSON->'$.b[-000001]') FROM t1;\n ----\n-4\n+4\ttrue\n \n statement error\n SELECT json_extract(j, '$.b[#-]') FROM t1;\n \n+statement error\n+SELECT json_extract(j, '$.b[-]') FROM t1;\n+\n statement error\n SELECT json_extract(j, '$.b[#9]') FROM t1;\n \ndiff --git a/test/sql/json/test_json_path.test b/test/sql/json/test_json_path.test\nnew file mode 100644\nindex 000000000000..dc3a82e5ddd4\n--- /dev/null\n+++ b/test/sql/json/test_json_path.test\n@@ -0,0 +1,209 @@\n+# name: test/sql/json/test_json_path.test\n+# description: Test JSON extract (path notation)\n+# group: [json]\n+\n+require json\n+\n+statement ok\n+pragma enable_verification\n+\n+statement error\n+select json_extract('{\"my_field\": \"duck\"}', '')\n+----\n+Binder Error\n+\n+query T\n+select json_extract('{\"my_field\": \"duck\"}', '$.my_field')\n+----\n+\"duck\"\n+\n+query T\n+select json_extract('[0, 1, 2]', '$[1]')\n+----\n+1\n+\n+query T\n+select json_extract('[[1]]', '$[0][0]')\n+----\n+1\n+\n+statement ok\n+create table test (j varchar, q varchar)\n+\n+statement ok\n+insert into test values ('{\"my_field\": {\"my_nested_field\": [\"goose\", \"duck\"]}}', '$.my_field.my_nested_field[0]')\n+\n+# wrong syntax\n+statement error\n+select json_extract(j, '$.my_field.my_nested_field[]') from test\n+----\n+Binder Error\n+\n+query T\n+select json_extract(j, '$.my_field.my_nested_field[0]') from test\n+----\n+\"goose\"\n+\n+# SQLite's indexing from back of the list requires '#'\n+query T\n+select json_extract(j, '$.my_field.my_nested_field[#-1]') from test\n+----\n+\"duck\"\n+\n+query T\n+select json_extract(j, '$.my_field.my_nested_field[#-2]') from test\n+----\n+\"goose\"\n+\n+query T\n+select json_extract(j, '$.my_field.my_nested_field[#-3]') from test\n+----\n+NULL\n+\n+query T\n+select json_extract(j, '$.my_field.my_nested_field[#]') from test\n+----\n+NULL\n+\n+# we can also do without '#'\n+query T\n+select json_extract(j, '$.my_field.my_nested_field[-1]') from test\n+----\n+\"duck\"\n+\n+query T\n+select json_extract(j, '$.my_field.my_nested_field[-2]') from test\n+----\n+\"goose\"\n+\n+query T\n+select json_extract(j, '$.my_field.my_nested_field[-3]') from test\n+----\n+NULL\n+\n+query T\n+select json_extract(j, q) from test\n+----\n+\"goose\"\n+\n+query T\n+select json_extract('{\"my_field\": [{\"my_nested_field\": [\"duck\", \"goose\"]}]}', '$.my_field[0].my_nested_field[0]')\n+----\n+\"duck\"\n+\n+query T\n+select json_extract('{\"my_field\": [{\"my_nested_field\": [\"duck\", \"goose\"]}]}', '$.my_field[#-1].my_nested_field[#-1]')\n+----\n+\"goose\"\n+\n+# some NULLs\n+query T\n+select json_extract(j, '$.my_field.my_nested_field.3') from test\n+----\n+NULL\n+\n+# invalid path error that happens during execution, not binding\n+statement error\n+with tbl as (\n+    select '[{\"duck\":42},{\"duck\":43}]' j, '$duck' p\n+)\n+select json_extract(j, p) from tbl\n+----\n+Invalid Input Error\n+\n+# path error\n+statement error\n+select json_extract('{\"a\": {\"b\": \"c\"}}', '$[]');\n+\n+statement error\n+select json_extract('{\"a\": {\"b\": \"c\"}}', '$[#');\n+\n+statement error\n+select json_extract(j, '$.my_field[my_nested_field[#-3]') from test\n+\n+statement error\n+select json_extract(j, '$.my_field.my_nested_field[!]') from test\n+\n+statement error\n+select json_extract('{\"a\": {\"b\": \"c\"}}', '$.a..');\n+\n+statement error\n+select json_extract('{\"a\": {\"b\": \"c\"}}', '$[[');\n+\n+statement error\n+select json_extract('{\"a\": {\"b\": \"c\"}}', '$[.');\n+\n+statement error\n+select json_extract('{\"a\": {\"b\": \"c\"}}', '$]');\n+\n+# with JSON path we support wildcards in arrays and objects, this results in a LIST\n+query T\n+select json_extract('[{\"duck\":42},{\"duck\":43}]', '$[*].duck')\n+----\n+[42, 43]\n+\n+query T\n+select json_extract('{\"duck\":42, \"goose\":43}', '$.*');\n+----\n+[42, 43]\n+\n+# check for invalid syntax\n+statement error\n+select json_extract('[{\"duck\":42},{\"duck\":43}]', '$[*.duck')\n+----\n+Binder Error: JSON path error\n+\n+statement error\n+select json_extract('[{\"duck\":42},{\"duck\":43}]', '$*.duck')\n+----\n+Binder Error: JSON path error\n+\n+statement error\n+select json_extract('{\"duck\":42, \"goose\":43}', '$.[*]');\n+----\n+Binder Error: JSON path error\n+\n+# wildcards yields empty list if none are found\n+query T\n+select json_extract('[{\"duck\":42},{\"duck\":43}]', '$.*')\n+----\n+[]\n+\n+query T\n+select json_extract('{\"duck\":[42,43]}', '$.*[-1]')\n+----\n+[43]\n+\n+# can have multiple wildcards\n+query T\n+select json_extract('[{\"duck\":42},{\"duck\":43}]', '$[*].*')\n+----\n+[42, 43]\n+\n+# wildcards do not work when path param is not foldable\n+statement error\n+with tbl as (\n+    select '[{\"duck\":42},{\"duck\":43}]' j, '$[*].duck' p\n+)\n+select json_extract(j, p) from tbl\n+----\n+Invalid Input Error\n+\n+# wildcards do not work inside of a multi-extract\n+statement error\n+select json_extract('[{\"duck\":42},{\"goose\":43}]', ['$[*].duck', '$[*].goose'])\n+----\n+Binder Error\n+\n+# test with a larger input\n+query T\n+select sum((to_json({duck:range})->'$.*')[1]::int) = sum(range) from range(10000)\n+----\n+1\n+\n+# test some nulls (JSON Path reference implementation returns NULLs in wildcards),\n+# if the path is not there, it's not added to the LIST\n+query T\n+select json_extract('[{\"duck\":null},{\"duck\":42},{\"duck\":null},{}]', '$[*].*')\n+----\n+[NULL, 42, NULL]\ndiff --git a/test/sql/json/test_json_transform.test b/test/sql/json/test_json_transform.test\nindex 2463d73f362a..771e8b3fe35f 100644\n--- a/test/sql/json/test_json_transform.test\n+++ b/test/sql/json/test_json_transform.test\n@@ -22,6 +22,11 @@ statement error\n select from_json_strict('42', '\"DATE\"')\n \n # singletons\n+statement error\n+select json_transform('42', '42')\n+----\n+Binder Error\n+\n query T\n select json_transform('42', '\"UBIGINT\"')\n ----\n@@ -58,6 +63,26 @@ select json_transform('{\"a\": 42}', '{\"a\":\"UBIGINT\"}')\n ----\n {'a': 42}\n \n+statement error\n+select json_transform_strict('{\"a\": 42, \"a\":43}', '{\"a\":\"UBIGINT\"}')\n+----\n+Invalid Input Error\n+\n+statement error\n+select json_transform_strict('{}', '{\"a\":\"UBIGINT\"}')\n+----\n+Invalid Input Error\n+\n+statement error\n+select json_transform_strict('{}', '[\"UBIGINT\"]')\n+----\n+Invalid Input Error\n+\n+query T\n+select json_transform('[{}, [42]]', '[[\"UBIGINT\"]]')\n+----\n+[NULL, [42]]\n+\n query T\n select json_transform('{\"a\": null}', '{\"a\":\"UBIGINT\"}')\n ----\n@@ -72,6 +97,16 @@ statement error\n select json_transform('{\"a\": 42}', '{\"a\":\"ARRAY\"}')\n \n # arrays\n+statement error\n+select json_transform('[1,2,3]', '[\"UBIGINT\", \"BIGINT\"]')\n+----\n+Binder Error\n+\n+query T\n+select list_sum(json_transform(range(5000)::JSON, '[\"UBIGINT\"]'))::UBIGINT s\n+----\n+12497500\n+\n query T\n select json_transform('[1,2,3]', '[\"UBIGINT\"]')\n ----\n@@ -339,6 +374,11 @@ select json_transform('42', '\"UUID\"')\n ----\n NULL\n \n+statement error\n+select json_transform_strict('42', '\"UUID\"')\n+----\n+Invalid Input Error\n+\n query T\n select json_transform('-42', '\"UUID\"')\n ----\ndiff --git a/test/sql/order/order_parallel_complex.test_coverage b/test/sql/order/order_parallel_complex.test_slow\nsimilarity index 96%\nrename from test/sql/order/order_parallel_complex.test_coverage\nrename to test/sql/order/order_parallel_complex.test_slow\nindex 5b9fd1b22364..26b9eea8e1cf 100644\n--- a/test/sql/order/order_parallel_complex.test_coverage\n+++ b/test/sql/order/order_parallel_complex.test_slow\n@@ -1,4 +1,4 @@\n-# name: test/sql/order/order_parallel_complex.test_coverage\n+# name: test/sql/order/order_parallel_complex.test_slow\n # description: Test ORDER BY keyword with multiple threads (internal and external sorting)\n # group: [order]\n \ndiff --git a/test/sql/order/order_parallel_fixed.test_coverage b/test/sql/order/order_parallel_fixed.test_slow\nsimilarity index 95%\nrename from test/sql/order/order_parallel_fixed.test_coverage\nrename to test/sql/order/order_parallel_fixed.test_slow\nindex 4ac1dbf91966..74ad388a7e5a 100644\n--- a/test/sql/order/order_parallel_fixed.test_coverage\n+++ b/test/sql/order/order_parallel_fixed.test_slow\n@@ -1,4 +1,4 @@\n-# name: test/sql/order/order_parallel_fixed.test_coverage\n+# name: test/sql/order/order_parallel_fixed.test_slow\n # description: Test ORDER BY keyword with multiple threads (internal and external sorting)\n # group: [order]\n \ndiff --git a/test/sql/order/order_parallel_varsize.test_coverage b/test/sql/order/order_parallel_varsize.test_slow\nsimilarity index 96%\nrename from test/sql/order/order_parallel_varsize.test_coverage\nrename to test/sql/order/order_parallel_varsize.test_slow\nindex fe4e864fab1a..efdff70a8dc8 100644\n--- a/test/sql/order/order_parallel_varsize.test_coverage\n+++ b/test/sql/order/order_parallel_varsize.test_slow\n@@ -1,4 +1,4 @@\n-# name: test/sql/order/order_parallel_varsize.test_coverage\n+# name: test/sql/order/order_parallel_varsize.test_slow\n # description: Test ORDER BY keyword with multiple threads (internal and external sorting)\n # group: [order]\n \ndiff --git a/test/sql/order/persistent_list_of_varchar_order.test_coverage b/test/sql/order/persistent_list_of_varchar_order.test_slow\nsimilarity index 88%\nrename from test/sql/order/persistent_list_of_varchar_order.test_coverage\nrename to test/sql/order/persistent_list_of_varchar_order.test_slow\nindex 7d683a8ee8cd..83479b144197 100644\n--- a/test/sql/order/persistent_list_of_varchar_order.test_coverage\n+++ b/test/sql/order/persistent_list_of_varchar_order.test_slow\n@@ -1,4 +1,4 @@\n-# name: test/sql/order/persistent_list_of_varchar_order.test_coverage\n+# name: test/sql/order/persistent_list_of_varchar_order.test_slow\n # description: Test ORDER BY on persistent list of varchars\n # group: [order]\n \ndiff --git a/test/sql/order/test_order_nested.test_coverage b/test/sql/order/test_order_nested.test_slow\nsimilarity index 99%\nrename from test/sql/order/test_order_nested.test_coverage\nrename to test/sql/order/test_order_nested.test_slow\nindex b90ca04b8464..d88b0b620be6 100644\n--- a/test/sql/order/test_order_nested.test_coverage\n+++ b/test/sql/order/test_order_nested.test_slow\n@@ -1,4 +1,4 @@\n-# name: test/sql/order/test_order_nested.test_coverage\n+# name: test/sql/order/test_order_nested.test_slow\n # description: Test ORDER BY keyword (nested types)\n # group: [order]\n \ndiff --git a/test/sql/order/test_order_variable_size_payload.test_coverage b/test/sql/order/test_order_variable_size_payload.test_slow\nsimilarity index 99%\nrename from test/sql/order/test_order_variable_size_payload.test_coverage\nrename to test/sql/order/test_order_variable_size_payload.test_slow\nindex 474e68e6d97a..c955b15cfefd 100644\n--- a/test/sql/order/test_order_variable_size_payload.test_coverage\n+++ b/test/sql/order/test_order_variable_size_payload.test_slow\n@@ -1,4 +1,4 @@\n-# name: test/sql/order/test_order_variable_size_payload.test_coverage\n+# name: test/sql/order/test_order_variable_size_payload.test_slow\n # description: Test ORDER BY keyword (variable size sorting/payload columns)\n # group: [order]\n \ndiff --git a/test/sql/parallelism/intraquery/test_aggregations_parallelism.test_coverage b/test/sql/parallelism/intraquery/test_aggregations_parallelism.test_slow\nsimilarity index 99%\nrename from test/sql/parallelism/intraquery/test_aggregations_parallelism.test_coverage\nrename to test/sql/parallelism/intraquery/test_aggregations_parallelism.test_slow\nindex e95b9d45ddea..f6ab52ce1a1f 100644\n--- a/test/sql/parallelism/intraquery/test_aggregations_parallelism.test_coverage\n+++ b/test/sql/parallelism/intraquery/test_aggregations_parallelism.test_slow\n@@ -1,4 +1,4 @@\n-# name: test/sql/parallelism/intraquery/test_aggregations_parallelism.test_coverage\n+# name: test/sql/parallelism/intraquery/test_aggregations_parallelism.test_slow\n # description: Test parallel aggregations\n # group: [intraquery]\n \ndiff --git a/test/sql/parallelism/intraquery/test_list_parallelism.test_coverage b/test/sql/parallelism/intraquery/test_list_parallelism.test_slow\nsimilarity index 98%\nrename from test/sql/parallelism/intraquery/test_list_parallelism.test_coverage\nrename to test/sql/parallelism/intraquery/test_list_parallelism.test_slow\nindex cccec460aa7e..4f79324f64f3 100644\n--- a/test/sql/parallelism/intraquery/test_list_parallelism.test_coverage\n+++ b/test/sql/parallelism/intraquery/test_list_parallelism.test_slow\n@@ -1,4 +1,4 @@\n-# name: test/sql/parallelism/intraquery/test_list_parallelism.test_coverage\n+# name: test/sql/parallelism/intraquery/test_list_parallelism.test_slow\n # description: Test list aggregates on a small-ish tables in parallel(few thousand rows)\n # group: [intraquery]\n \ndiff --git a/test/sql/pivot/pivot_6390.test b/test/sql/pivot/pivot_6390.test\nindex ddf066c9edb7..20e59047c07e 100644\n--- a/test/sql/pivot/pivot_6390.test\n+++ b/test/sql/pivot/pivot_6390.test\n@@ -95,6 +95,8 @@ SELECT 'C3',2010,80\n from CPB pivot (sum(jg) for nf in (2010, 2017, 2018, 2022) group by cpdh)\n ----\n \n+require noalternativeverify\n+\n # nested CTEs with overlapping names\n query IIIII rowsort pivot\n WITH CPB AS (SELECT 42)\n@@ -115,3 +117,93 @@ FROM  (\n \t)\n \tpivot CPB on nf using sum(jg) group by cpdh)\n ----\n+\n+query IIIII rowsort pivot\n+WITH CPB(CPDH,NF,JG) AS MATERIALIZED (\n+SELECT 'C1',2022,10\n+UNION ALL\n+SELECT 'C1',2018,20\n+UNION ALL\n+SELECT 'C1',2017,0\n+UNION ALL\n+SELECT 'C2',2022,10\n+UNION ALL\n+SELECT 'C2',2010,30\n+UNION ALL\n+SELECT 'C3',2010,80\n+)\n+pivot CPB on nf IN (2010, 2017, 2018, 2022) using sum(jg)group by cpdh\n+----\n+\n+query IIIII rowsort pivot\n+WITH CPB(CPDH,NF,JG) AS MATERIALIZED (\n+SELECT 'C1',2022,10\n+UNION ALL\n+SELECT 'C1',2018,20\n+UNION ALL\n+SELECT 'C1',2017,0\n+UNION ALL\n+SELECT 'C2',2022,10\n+UNION ALL\n+SELECT 'C2',2010,30\n+UNION ALL\n+SELECT 'C3',2010,80\n+)\n+pivot CPB on nf using sum(jg)group by cpdh\n+----\n+\n+query IIIII rowsort pivot\n+WITH CPB(CPDH,NF,JG) AS MATERIALIZED (\n+SELECT 'C1',2022,10\n+UNION ALL\n+SELECT 'C1',2018,20\n+UNION ALL\n+SELECT 'C1',2017,0\n+UNION ALL\n+SELECT 'C2',2022,10\n+UNION ALL\n+SELECT 'C2',2010,30\n+UNION ALL\n+SELECT 'C3',2010,80\n+)\n+SELECT *\n+FROM  (pivot CPB on nf using sum(jg)group by cpdh)\n+----\n+\n+query IIIII rowsort pivot\n+WITH CPB(CPDH,NF,JG) AS MATERIALIZED (\n+SELECT 'C1',2022,10\n+UNION ALL\n+SELECT 'C1',2018,20\n+UNION ALL\n+SELECT 'C1',2017,0\n+UNION ALL\n+SELECT 'C2',2022,10\n+UNION ALL\n+SELECT 'C2',2010,30\n+UNION ALL\n+SELECT 'C3',2010,80\n+)\n+from CPB pivot (sum(jg) for nf in (2010, 2017, 2018, 2022) group by cpdh)\n+----\n+\n+# nested CTEs with overlapping names\n+query IIIII rowsort pivot\n+WITH CPB AS (SELECT 42)\n+SELECT *\n+FROM  (\n+\tWITH CPB(CPDH,NF,JG) AS MATERIALIZED (\n+\t\tSELECT 'C1',2022,10\n+\t\tUNION ALL\n+\t\tSELECT 'C1',2018,20\n+\t\tUNION ALL\n+\t\tSELECT 'C1',2017,0\n+\t\tUNION ALL\n+\t\tSELECT 'C2',2022,10\n+\t\tUNION ALL\n+\t\tSELECT 'C2',2010,30\n+\t\tUNION ALL\n+\t\tSELECT 'C3',2010,80\n+\t)\n+\tpivot CPB on nf using sum(jg) group by cpdh)\n+----\n\\ No newline at end of file\ndiff --git a/test/sql/pivot/pivot_errors.test b/test/sql/pivot/pivot_errors.test\nnew file mode 100644\nindex 000000000000..5fb6ddec3b5f\n--- /dev/null\n+++ b/test/sql/pivot/pivot_errors.test\n@@ -0,0 +1,40 @@\n+# name: test/sql/pivot/pivot_errors.test\n+# description: Test pivot errors\n+# group: [pivot]\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+statement ok\n+CREATE TABLE test(i INT, j VARCHAR);\n+\n+statement error\n+PIVOT test ON j IN ('a', 'b') USING SUM(test.i);\n+----\n+PIVOT expression cannot contain qualified columns\n+\n+statement ok\n+SET pivot_filter_threshold=0\n+\n+statement error\n+PIVOT test ON j IN ('a', 'b') USING current_date();\n+----\n+current_date is not an aggregate function\n+\n+statement ok\n+SET pivot_filter_threshold=100\n+\n+statement error\n+PIVOT test ON j IN ('a', 'b') USING current_date();\n+----\n+current_date is not an aggregate function\n+\n+statement error\n+PIVOT test ON j IN ('a', 'b') USING sum(41) over ();\n+----\n+must be an aggregate\n+\n+statement error\n+PIVOT test ON j IN ('a', 'b') USING sum(sum(41) over ());\n+----\n+cannot contain window functions\ndiff --git a/test/sql/pivot/pivot_example.test b/test/sql/pivot/pivot_example.test\nindex a77d9de24330..5f128bb01957 100644\n--- a/test/sql/pivot/pivot_example.test\n+++ b/test/sql/pivot/pivot_example.test\n@@ -35,6 +35,11 @@ INSERT INTO Cities VALUES ('US', 'New York City', 2010, 8175);\n statement ok\n INSERT INTO Cities VALUES ('US', 'New York City', 2020, 8772);\n \n+statement ok\n+SET pivot_filter_threshold=99\n+\n+loop i 0 2\n+\n statement ok\n PIVOT Cities ON Country, Name IN ('xx') USING SUM(Population);\n \n@@ -80,33 +85,6 @@ PIVOT Cities ON Year USING SUM(Population) GROUP BY Country;\n NL\t1005\t1065\t1158\n US\t8579\t8783\t9510\n \n-# unpivot\n-statement ok\n-CREATE TABLE PivotedCities AS PIVOT Cities ON Year USING SUM(Population);\n-\n-query IIII nosort unpivot\n-UNPIVOT PivotedCities ON 2000, 2010, 2020 INTO NAME Year VALUE Population;\n-----\n-\n-query IIII nosort unpivot\n-FROM PivotedCities UNPIVOT(Population FOR Year IN (2000, 2010, 2020));\n-----\n-\n-query IIII nosort unpivot\n-UNPIVOT PivotedCities ON 2000, 2010, 2020;\n-----\n-\n-query IIII nosort unpivot\n-UNPIVOT PivotedCities ON COLUMNS('\\d+');\n-----\n-\n-query IIII nosort unpivot\n-UNPIVOT PivotedCities ON * EXCLUDE (Country, Name)\n-----\n-\n-query IIII nosort unpivot\n-PIVOT_LONGER PivotedCities ON 2000, 2010, 2020;\n-\n # use pivots in a set operation\n statement ok\n PIVOT Cities ON Year USING SUM(Population)\n@@ -179,6 +157,38 @@ PIVOT Cities ON Year USING SUM(Population) GROUP BY country ORDER BY ALL\n NL\t1005\t1065\t1158\n US\t8579\t8783\t9510\n \n+statement ok\n+SET pivot_filter_threshold=0\n+\n+endloop\n+\n+# unpivot\n+statement ok\n+CREATE TABLE PivotedCities AS PIVOT Cities ON Year USING SUM(Population);\n+\n+query IIII nosort unpivot\n+UNPIVOT PivotedCities ON 2000, 2010, 2020 INTO NAME Year VALUE Population;\n+----\n+\n+query IIII nosort unpivot\n+FROM PivotedCities UNPIVOT(Population FOR Year IN (2000, 2010, 2020));\n+----\n+\n+query IIII nosort unpivot\n+UNPIVOT PivotedCities ON 2000, 2010, 2020;\n+----\n+\n+query IIII nosort unpivot\n+UNPIVOT PivotedCities ON COLUMNS('\\d+');\n+----\n+\n+query IIII nosort unpivot\n+UNPIVOT PivotedCities ON * EXCLUDE (Country, Name)\n+----\n+\n+query IIII nosort unpivot\n+PIVOT_LONGER PivotedCities ON 2000, 2010, 2020;\n+\n # unpivot order by/limit\n query IIII\n UNPIVOT PivotedCities ON 2000, 2010, 2020 ORDER BY ALL DESC LIMIT 1\ndiff --git a/test/sql/pivot/top_level_pivot_syntax.test b/test/sql/pivot/top_level_pivot_syntax.test\nindex 2c07ae1219c9..767b48456e19 100644\n--- a/test/sql/pivot/top_level_pivot_syntax.test\n+++ b/test/sql/pivot/top_level_pivot_syntax.test\n@@ -112,6 +112,14 @@ SELECT * FROM pivoted_sales ORDER BY empid DESC;\n 2\t39500\t90700\t12000\t5300\n 1\t10400\t8000\t11000\t18000\n \n+# in CTE\n+query IIIII\n+WITH pivoted_sales AS MATERIALIZED (PIVOT monthly_sales ON MONTH USING SUM(AMOUNT) GROUP BY empid)\n+SELECT * FROM pivoted_sales ORDER BY empid DESC;\n+----\n+2\t39500\t90700\t12000\t5300\n+1\t10400\t8000\t11000\t18000\n+\n statement error\n CREATE VIEW v1 AS PIVOT monthly_sales ON MONTH USING SUM(AMOUNT)\n ----\ndiff --git a/test/sql/pragma/test_pragma_output.test_coverage b/test/sql/pragma/test_pragma_output.test_slow\nsimilarity index 98%\nrename from test/sql/pragma/test_pragma_output.test_coverage\nrename to test/sql/pragma/test_pragma_output.test_slow\nindex 1986767909ea..f53a3c0f79d7 100644\n--- a/test/sql/pragma/test_pragma_output.test_coverage\n+++ b/test/sql/pragma/test_pragma_output.test_slow\n@@ -1,4 +1,4 @@\n-# name: test/sql/pragma/test_pragma_output.test_coverage\n+# name: test/sql/pragma/test_pragma_output.test_slow\n # description: Test last_profiling_output, detailed_profiling_output and all_profiling_output pragma\n # group: [pragma]\n \ndiff --git a/test/sql/projection/test_coalesce.test_coverage b/test/sql/projection/test_coalesce.test_slow\nsimilarity index 99%\nrename from test/sql/projection/test_coalesce.test_coverage\nrename to test/sql/projection/test_coalesce.test_slow\nindex 618e0dc7822f..2a0303deb0b6 100644\n--- a/test/sql/projection/test_coalesce.test_coverage\n+++ b/test/sql/projection/test_coalesce.test_slow\n@@ -1,4 +1,4 @@\n-# name: test/sql/projection/test_coalesce.test_coverage\n+# name: test/sql/projection/test_coalesce.test_slow\n # description: Test COALESCE expression\n # group: [projection]\n \ndiff --git a/test/sql/projection/test_many_values.test_coverage b/test/sql/projection/test_many_values.test_slow\nsimilarity index 99%\nrename from test/sql/projection/test_many_values.test_coverage\nrename to test/sql/projection/test_many_values.test_slow\nindex 2bedf91aba54..e923cebac749 100644\n--- a/test/sql/projection/test_many_values.test_coverage\n+++ b/test/sql/projection/test_many_values.test_slow\n@@ -1,4 +1,4 @@\n-# name: test/sql/projection/test_many_values.test_coverage\n+# name: test/sql/projection/test_many_values.test_slow\n # description: Test value list in selection\n # group: [projection]\n \ndiff --git a/test/sql/storage/all_types_storage.test_coverage b/test/sql/storage/all_types_storage.test_slow\nsimilarity index 89%\nrename from test/sql/storage/all_types_storage.test_coverage\nrename to test/sql/storage/all_types_storage.test_slow\nindex b1695d381965..4265b3281eb8 100644\n--- a/test/sql/storage/all_types_storage.test_coverage\n+++ b/test/sql/storage/all_types_storage.test_slow\n@@ -1,4 +1,4 @@\n-# name: test/sql/storage/all_types_storage.test_coverage\n+# name: test/sql/storage/all_types_storage.test_slow\n # description: Test all types function\n # group: [storage]\n \ndiff --git a/test/sql/storage/all_types_storage_large.test_coverage b/test/sql/storage/all_types_storage_large.test_slow\nsimilarity index 90%\nrename from test/sql/storage/all_types_storage_large.test_coverage\nrename to test/sql/storage/all_types_storage_large.test_slow\nindex fd182d36aa45..64be3ef0937d 100644\n--- a/test/sql/storage/all_types_storage_large.test_coverage\n+++ b/test/sql/storage/all_types_storage_large.test_slow\n@@ -1,4 +1,4 @@\n-# name: test/sql/storage/all_types_storage_large.test_coverage\n+# name: test/sql/storage/all_types_storage_large.test_slow\n # description: Test all types storage (large)\n # group: [storage]\n \ndiff --git a/test/sql/storage/checkpoint_abort_before_truncate.test_coverage b/test/sql/storage/checkpoint_abort_before_truncate.test_slow\nsimilarity index 94%\nrename from test/sql/storage/checkpoint_abort_before_truncate.test_coverage\nrename to test/sql/storage/checkpoint_abort_before_truncate.test_slow\nindex 667f95788e26..452bdea4a279 100644\n--- a/test/sql/storage/checkpoint_abort_before_truncate.test_coverage\n+++ b/test/sql/storage/checkpoint_abort_before_truncate.test_slow\n@@ -1,4 +1,4 @@\n-# name: test/sql/storage/checkpoint_abort_before_truncate.test_coverage\n+# name: test/sql/storage/checkpoint_abort_before_truncate.test_slow\n # description: Test correct behavior if we unexpectedly abort after a checkpoint but before the WAL is successfully truncated\n # group: [storage]\n \ndiff --git a/test/sql/storage/compression/bitpacking/bitpacking_bitwidths.test_coverage b/test/sql/storage/compression/bitpacking/bitpacking_bitwidths.test_slow\nsimilarity index 99%\nrename from test/sql/storage/compression/bitpacking/bitpacking_bitwidths.test_coverage\nrename to test/sql/storage/compression/bitpacking/bitpacking_bitwidths.test_slow\nindex 3f5aad3568ea..254c87c90306 100644\n--- a/test/sql/storage/compression/bitpacking/bitpacking_bitwidths.test_coverage\n+++ b/test/sql/storage/compression/bitpacking/bitpacking_bitwidths.test_slow\n@@ -1,4 +1,4 @@\n-# name: test/sql/storage/compression/bitpacking/bitpacking_bitwidths.test_coverage\n+# name: test/sql/storage/compression/bitpacking/bitpacking_bitwidths.test_slow\n # description: Test bitpacking with values that compress to all different widths\n # group: [bitpacking]\n \ndiff --git a/test/sql/storage/compression/bitpacking/bitpacking_compression_ratio.test_coverage b/test/sql/storage/compression/bitpacking/bitpacking_compression_ratio.test_slow\nsimilarity index 99%\nrename from test/sql/storage/compression/bitpacking/bitpacking_compression_ratio.test_coverage\nrename to test/sql/storage/compression/bitpacking/bitpacking_compression_ratio.test_slow\nindex 9be4766172ef..2acb9164fa50 100644\n--- a/test/sql/storage/compression/bitpacking/bitpacking_compression_ratio.test_coverage\n+++ b/test/sql/storage/compression/bitpacking/bitpacking_compression_ratio.test_slow\n@@ -1,4 +1,4 @@\n-# name: test/sql/storage/compression/bitpacking/bitpacking_compression_ratio.test_coverage\n+# name: test/sql/storage/compression/bitpacking/bitpacking_compression_ratio.test_slow\n # description: Assert bitpacking compression ratio is within reasonable margins for each mode\n # group: [bitpacking]\n \ndiff --git a/test/sql/storage/compression/bitpacking/bitpacking_fatal_forced.test_coverage b/test/sql/storage/compression/bitpacking/bitpacking_fatal_forced.test_slow\nsimilarity index 97%\nrename from test/sql/storage/compression/bitpacking/bitpacking_fatal_forced.test_coverage\nrename to test/sql/storage/compression/bitpacking/bitpacking_fatal_forced.test_slow\nindex 4edef26e53e0..252f4f7d5aa5 100644\n--- a/test/sql/storage/compression/bitpacking/bitpacking_fatal_forced.test_coverage\n+++ b/test/sql/storage/compression/bitpacking/bitpacking_fatal_forced.test_slow\n@@ -1,4 +1,4 @@\n-# name: test/sql/storage/compression/bitpacking/bitpacking_fatal_forced.test_coverage\n+# name: test/sql/storage/compression/bitpacking/bitpacking_fatal_forced.test_slow\n # description: Test forced bitpacking, with value ranges that are rejected by the bitpacking compression analyze step\n # group: [bitpacking]\n \ndiff --git a/test/sql/storage/compression/bitpacking/bitpacking_lists.test_coverage b/test/sql/storage/compression/bitpacking/bitpacking_lists.test_slow\nsimilarity index 99%\nrename from test/sql/storage/compression/bitpacking/bitpacking_lists.test_coverage\nrename to test/sql/storage/compression/bitpacking/bitpacking_lists.test_slow\nindex 9866fd688c14..0a556616d906 100644\n--- a/test/sql/storage/compression/bitpacking/bitpacking_lists.test_coverage\n+++ b/test/sql/storage/compression/bitpacking/bitpacking_lists.test_slow\n@@ -1,4 +1,4 @@\n-# name: test/sql/storage/compression/bitpacking/bitpacking_lists.test_coverage\n+# name: test/sql/storage/compression/bitpacking/bitpacking_lists.test_slow\n # description: Test storage with Bitpacking inside lists\n # group: [bitpacking]\n \ndiff --git a/test/sql/storage/compression/bitpacking/bitpacking_types.test_coverage b/test/sql/storage/compression/bitpacking/bitpacking_types.test_slow\nsimilarity index 99%\nrename from test/sql/storage/compression/bitpacking/bitpacking_types.test_coverage\nrename to test/sql/storage/compression/bitpacking/bitpacking_types.test_slow\nindex 22e9f5dc49b4..daf13456cc57 100644\n--- a/test/sql/storage/compression/bitpacking/bitpacking_types.test_coverage\n+++ b/test/sql/storage/compression/bitpacking/bitpacking_types.test_slow\n@@ -1,4 +1,4 @@\n-# name: test/sql/storage/compression/bitpacking/bitpacking_types.test_coverage\n+# name: test/sql/storage/compression/bitpacking/bitpacking_types.test_slow\n # description: Test bitpacking with different types, especially around the numerical limits\n # group: [bitpacking]\n \ndiff --git a/test/sql/storage/compression/constant/constant_columns.test_coverage b/test/sql/storage/compression/constant/constant_columns.test_slow\nsimilarity index 99%\nrename from test/sql/storage/compression/constant/constant_columns.test_coverage\nrename to test/sql/storage/compression/constant/constant_columns.test_slow\nindex 35ef3abd478b..7346a6597f3a 100644\n--- a/test/sql/storage/compression/constant/constant_columns.test_coverage\n+++ b/test/sql/storage/compression/constant/constant_columns.test_slow\n@@ -1,4 +1,4 @@\n-# name: test/sql/storage/compression/constant/constant_columns.test_coverage\n+# name: test/sql/storage/compression/constant/constant_columns.test_slow\n # description: Test storage of constant columns (columns that all have the same value)\n # group: [constant]\n \ndiff --git a/test/sql/storage/compression/constant/constant_columns_top_n.test_coverage b/test/sql/storage/compression/constant/constant_columns_top_n.test_slow\nsimilarity index 96%\nrename from test/sql/storage/compression/constant/constant_columns_top_n.test_coverage\nrename to test/sql/storage/compression/constant/constant_columns_top_n.test_slow\nindex a39c04044a68..842fdbbff0c2 100644\n--- a/test/sql/storage/compression/constant/constant_columns_top_n.test_coverage\n+++ b/test/sql/storage/compression/constant/constant_columns_top_n.test_slow\n@@ -1,4 +1,4 @@\n-# name: test/sql/storage/compression/constant/constant_columns_top_n.test_coverage\n+# name: test/sql/storage/compression/constant/constant_columns_top_n.test_slow\n # description: Test Top-N operation on constant columns\n # group: [constant]\n \ndiff --git a/test/sql/storage/compression/constant/constant_columns_types.test_coverage b/test/sql/storage/compression/constant/constant_columns_types.test_slow\nsimilarity index 98%\nrename from test/sql/storage/compression/constant/constant_columns_types.test_coverage\nrename to test/sql/storage/compression/constant/constant_columns_types.test_slow\nindex f4b20dbcf732..54b962ce44d0 100644\n--- a/test/sql/storage/compression/constant/constant_columns_types.test_coverage\n+++ b/test/sql/storage/compression/constant/constant_columns_types.test_slow\n@@ -1,4 +1,4 @@\n-# name: test/sql/storage/compression/constant/constant_columns_types.test_coverage\n+# name: test/sql/storage/compression/constant/constant_columns_types.test_slow\n # description: Test storage of constant columns with various types\n # group: [constant]\n \ndiff --git a/test/sql/storage/compression/constant/constant_columns_updates.test_coverage b/test/sql/storage/compression/constant/constant_columns_updates.test_slow\nsimilarity index 97%\nrename from test/sql/storage/compression/constant/constant_columns_updates.test_coverage\nrename to test/sql/storage/compression/constant/constant_columns_updates.test_slow\nindex 9ede62de207f..1f147fd53452 100644\n--- a/test/sql/storage/compression/constant/constant_columns_updates.test_coverage\n+++ b/test/sql/storage/compression/constant/constant_columns_updates.test_slow\n@@ -1,4 +1,4 @@\n-# name: test/sql/storage/compression/constant/constant_columns_updates.test_coverage\n+# name: test/sql/storage/compression/constant/constant_columns_updates.test_slow\n # description: Test storage of constant columns with updates\n # group: [constant]\n \ndiff --git a/test/sql/storage/compression/dictionary/dictionary_compression_ratio.test_coverage b/test/sql/storage/compression/dictionary/dictionary_compression_ratio.test_slow\nsimilarity index 98%\nrename from test/sql/storage/compression/dictionary/dictionary_compression_ratio.test_coverage\nrename to test/sql/storage/compression/dictionary/dictionary_compression_ratio.test_slow\nindex ee4d85a65265..c62f30652369 100644\n--- a/test/sql/storage/compression/dictionary/dictionary_compression_ratio.test_coverage\n+++ b/test/sql/storage/compression/dictionary/dictionary_compression_ratio.test_slow\n@@ -1,4 +1,4 @@\n-# name: test/sql/storage/compression/dictionary/dictionary_compression_ratio.test_coverage\n+# name: test/sql/storage/compression/dictionary/dictionary_compression_ratio.test_slow\n # description: Assert dictionary compression ratio is within reasonable margins\n # group: [dictionary]\n \ndiff --git a/test/sql/storage/compression/patas/patas_compression_ratio.test_coverage b/test/sql/storage/compression/patas/patas_compression_ratio.test_slow\nsimilarity index 99%\nrename from test/sql/storage/compression/patas/patas_compression_ratio.test_coverage\nrename to test/sql/storage/compression/patas/patas_compression_ratio.test_slow\nindex b44c62e54938..a0fab688e127 100644\n--- a/test/sql/storage/compression/patas/patas_compression_ratio.test_coverage\n+++ b/test/sql/storage/compression/patas/patas_compression_ratio.test_slow\n@@ -1,4 +1,4 @@\n-# name: test/sql/storage/compression/patas/patas_compression_ratio.test_coverage\n+# name: test/sql/storage/compression/patas/patas_compression_ratio.test_slow\n # description: Assert patas compression ratio is within reasonable margins\n # group: [patas]\n \ndiff --git a/test/sql/storage/compression/rle/list_rle.test_coverage b/test/sql/storage/compression/rle/list_rle.test_slow\nsimilarity index 95%\nrename from test/sql/storage/compression/rle/list_rle.test_coverage\nrename to test/sql/storage/compression/rle/list_rle.test_slow\nindex b19503898cfc..598abe931ad7 100644\n--- a/test/sql/storage/compression/rle/list_rle.test_coverage\n+++ b/test/sql/storage/compression/rle/list_rle.test_slow\n@@ -1,4 +1,4 @@\n-# name: test/sql/storage/compression/rle/list_rle.test_coverage\n+# name: test/sql/storage/compression/rle/list_rle.test_slow\n # description: Test storage with RLE inside lists\n # group: [rle]\n \ndiff --git a/test/sql/storage/compression/rle/rle_compression_ratio.test_coverage b/test/sql/storage/compression/rle/rle_compression_ratio.test_slow\nsimilarity index 99%\nrename from test/sql/storage/compression/rle/rle_compression_ratio.test_coverage\nrename to test/sql/storage/compression/rle/rle_compression_ratio.test_slow\nindex ebf727b5d4f2..fbe0722f0b6c 100644\n--- a/test/sql/storage/compression/rle/rle_compression_ratio.test_coverage\n+++ b/test/sql/storage/compression/rle/rle_compression_ratio.test_slow\n@@ -1,4 +1,4 @@\n-# name: test/sql/storage/compression/rle/rle_compression_ratio.test_coverage\n+# name: test/sql/storage/compression/rle/rle_compression_ratio.test_slow\n # description: Assert rle compression ratio is within reasonable margins\n # group: [rle]\n \ndiff --git a/test/sql/storage/compression/string/lists.test_coverage b/test/sql/storage/compression/string/lists.test_slow\nsimilarity index 96%\nrename from test/sql/storage/compression/string/lists.test_coverage\nrename to test/sql/storage/compression/string/lists.test_slow\nindex 565644f573c8..beba84486537 100644\n--- a/test/sql/storage/compression/string/lists.test_coverage\n+++ b/test/sql/storage/compression/string/lists.test_slow\n@@ -1,4 +1,4 @@\n-# name: test/sql/storage/compression/string/lists.test_coverage\n+# name: test/sql/storage/compression/string/lists.test_slow\n # description: Test storage with string compression inside lists\n # group: [string]\n \ndiff --git a/test/sql/storage/partial_blocks/many_columns_alter_type.test_coverage b/test/sql/storage/partial_blocks/many_columns_alter_type.test_slow\nsimilarity index 99%\nrename from test/sql/storage/partial_blocks/many_columns_alter_type.test_coverage\nrename to test/sql/storage/partial_blocks/many_columns_alter_type.test_slow\nindex 59fd407c9265..c9ff04812768 100644\n--- a/test/sql/storage/partial_blocks/many_columns_alter_type.test_coverage\n+++ b/test/sql/storage/partial_blocks/many_columns_alter_type.test_slow\n@@ -1,4 +1,4 @@\n-# name: test/sql/storage/partial_blocks/many_columns_alter_type.test_coverage\n+# name: test/sql/storage/partial_blocks/many_columns_alter_type.test_slow\n # description: Verify that altering columns with multi-use blocks does not leak memory\n # group: [partial_blocks]\n \ndiff --git a/test/sql/storage/partial_blocks/many_columns_drop_column.test_coverage b/test/sql/storage/partial_blocks/many_columns_drop_column.test_slow\nsimilarity index 99%\nrename from test/sql/storage/partial_blocks/many_columns_drop_column.test_coverage\nrename to test/sql/storage/partial_blocks/many_columns_drop_column.test_slow\nindex fd660bec910b..db8ccf85836e 100644\n--- a/test/sql/storage/partial_blocks/many_columns_drop_column.test_coverage\n+++ b/test/sql/storage/partial_blocks/many_columns_drop_column.test_slow\n@@ -1,4 +1,4 @@\n-# name: test/sql/storage/partial_blocks/many_columns_drop_column.test_coverage\n+# name: test/sql/storage/partial_blocks/many_columns_drop_column.test_slow\n # description: Verify that dropping columns with multi-use blocks does not leak memory\n # group: [partial_blocks]\n \ndiff --git a/test/sql/storage/partial_blocks/many_columns_drop_table_leak.test_coverage b/test/sql/storage/partial_blocks/many_columns_drop_table_leak.test_slow\nsimilarity index 99%\nrename from test/sql/storage/partial_blocks/many_columns_drop_table_leak.test_coverage\nrename to test/sql/storage/partial_blocks/many_columns_drop_table_leak.test_slow\nindex 5b7d6e19662a..535de9491df6 100644\n--- a/test/sql/storage/partial_blocks/many_columns_drop_table_leak.test_coverage\n+++ b/test/sql/storage/partial_blocks/many_columns_drop_table_leak.test_slow\n@@ -1,4 +1,4 @@\n-# name: test/sql/storage/partial_blocks/many_columns_drop_table_leak.test_coverage\n+# name: test/sql/storage/partial_blocks/many_columns_drop_table_leak.test_slow\n # description: Verify that dropping tables with multi-use blocks does not leak memory\n # group: [partial_blocks]\n \ndiff --git a/test/sql/storage/partial_blocks/many_columns_lists.test_coverage b/test/sql/storage/partial_blocks/many_columns_lists.test_slow\nsimilarity index 99%\nrename from test/sql/storage/partial_blocks/many_columns_lists.test_coverage\nrename to test/sql/storage/partial_blocks/many_columns_lists.test_slow\nindex 61217e6a805f..4afcd13bcc7d 100644\n--- a/test/sql/storage/partial_blocks/many_columns_lists.test_coverage\n+++ b/test/sql/storage/partial_blocks/many_columns_lists.test_slow\n@@ -1,4 +1,4 @@\n-# name: test/sql/storage/partial_blocks/many_columns_lists.test_coverage\n+# name: test/sql/storage/partial_blocks/many_columns_lists.test_slow\n # description: Test storing many columns with lists\n # group: [partial_blocks]\n \ndiff --git a/test/sql/storage/partial_blocks/many_columns_structs.test_coverage b/test/sql/storage/partial_blocks/many_columns_structs.test_slow\nsimilarity index 99%\nrename from test/sql/storage/partial_blocks/many_columns_structs.test_coverage\nrename to test/sql/storage/partial_blocks/many_columns_structs.test_slow\nindex 3a5e66f64125..c712a12ad93e 100644\n--- a/test/sql/storage/partial_blocks/many_columns_structs.test_coverage\n+++ b/test/sql/storage/partial_blocks/many_columns_structs.test_slow\n@@ -1,4 +1,4 @@\n-# name: test/sql/storage/partial_blocks/many_columns_structs.test_coverage\n+# name: test/sql/storage/partial_blocks/many_columns_structs.test_slow\n # description: Test storing many columns of structs\n # group: [partial_blocks]\n \ndiff --git a/test/sql/storage/test_index_checkpoint.test b/test/sql/storage/test_index_checkpoint.test\nindex 7d3077dadb72..4efff03daea8 100644\n--- a/test/sql/storage/test_index_checkpoint.test\n+++ b/test/sql/storage/test_index_checkpoint.test\n@@ -2,6 +2,8 @@\n # description: Verify that database footprint remains within expected bounds when writing index data.\n # group: [storage]\n \n+# FIXME: once we inline leaves and refactor the (de)serialization, these numbers should all go down\n+\n require skip_reload\n \n load __TEST_DIR__/test_index_checkpoint.db\n@@ -11,24 +13,27 @@ statement ok\n PRAGMA wal_autocheckpoint='1TB';\n \n statement ok\n-create table t2 (i integer,  uid varchar);\n+CREATE TABLE t2 (i integer,  uid varchar);\n \n statement ok\n-create unique index iu on t2(uid);\n+INSERT INTO t2 SELECT i.range AS i, gen_random_uuid() AS uid FROM range(10000) AS i;\n \n statement ok\n-insert into t2 select i.range as i, gen_random_uuid() as uid FROM range(10000) as i;\n+CREATE UNIQUE INDEX iu ON t2(uid);\n \n statement ok\n CHECKPOINT;\n \n statement ok\n-select * from pragma_database_size();\n-\n-# A prior version of index checkpoint caused index data to be written twice,\n-# which results in a database size of 2.8MB (11 blocks). When the data is not\n-# duplicated, the size is just under 1.8MB (7 blocks). This verifies we do not regress.\n+SELECT * FROM pragma_database_size();\n+\n+# A prior version of index checkpoint caused index data to be written twice.\n+# If a node type exists, then we write at least one block for it.\n+# Due to the UUIDs causing many different prefixes, we have 4 blocks for prefixes.\n+# We can fit all 10k leaves on one LEAF block. Then, we have one NODE4 block and\n+# one NODE16 block. This makes a total of 7 blocks for the index. With extra blocks from\n+# storing the data, we should stay below 12 blocks.\n query I\n-select total_blocks * block_size < 2100000 from pragma_database_size();\n+SELECT total_blocks < 12 FROM pragma_database_size();\n ----\n true\ndiff --git a/test/sql/storage/test_reclaim_space_update.test_slow b/test/sql/storage/test_reclaim_space_update.test_slow\nindex 1ee64e799c1f..975a6164e4d4 100644\n--- a/test/sql/storage/test_reclaim_space_update.test_slow\n+++ b/test/sql/storage/test_reclaim_space_update.test_slow\n@@ -48,8 +48,10 @@ SELECT MIN(i), MAX(i), COUNT(*) FROM integers\n statement ok\n CHECKPOINT;\n \n-query I nosort expected_blocks\n-select total_blocks from pragma_database_size();\n+query I\n+select total_blocks<10 from pragma_database_size();\n+----\n+true\n \n query III\n SELECT MIN(i), MAX(i), COUNT(*) FROM integers\ndiff --git a/test/sql/storage/test_truncate_persistent.test b/test/sql/storage/test_truncate_persistent.test\nnew file mode 100644\nindex 000000000000..d3b8bb5b774b\n--- /dev/null\n+++ b/test/sql/storage/test_truncate_persistent.test\n@@ -0,0 +1,35 @@\n+# name: test/sql/storage/test_truncate_persistent.test\n+# description: Test storage of truncate\n+# group: [storage]\n+\n+# load the DB from disk\n+load __TEST_DIR__/test_store_truncate.db\n+\n+statement ok\n+CREATE TABLE test AS FROM range(250000) t(i);\n+\n+statement ok\n+DELETE FROM test WHERE i < 150000\n+\n+statement ok\n+CHECKPOINT\n+\n+query I\n+SELECT COUNT(*) FROM test\n+----\n+100000\n+\n+statement ok\n+TRUNCATE test\n+\n+query I\n+SELECT COUNT(*) FROM test\n+----\n+0\n+\n+restart\n+\n+query I\n+SELECT COUNT(*) FROM test\n+----\n+0\ndiff --git a/test/sql/storage/vacuum/test_truncate_after_delete.test_slow b/test/sql/storage/vacuum/test_truncate_after_delete.test_slow\nnew file mode 100644\nindex 000000000000..a4c765334588\n--- /dev/null\n+++ b/test/sql/storage/vacuum/test_truncate_after_delete.test_slow\n@@ -0,0 +1,85 @@\n+# name: test/sql/storage/vacuum/test_truncate_after_delete.test_slow\n+# description: Test truncating of the database file after data is deleted\n+# group: [vacuum]\n+\n+load __TEST_DIR__/truncate_after_delete.db\n+\n+statement ok\n+CREATE TABLE uuids(i VARCHAR);\n+\n+loop i 0 10\n+\n+statement ok\n+DROP TABLE IF EXISTS integers\n+\n+statement ok\n+INSERT INTO uuids SELECT uuid()::varchar FROM range(1000000);\n+\n+statement ok\n+CHECKPOINT\n+\n+query I\n+SELECT total_blocks > 50 FROM pragma_database_size();\n+----\n+true\n+\n+# note that just deleting does not free the space yet\n+# that is because deleting + checkpointing causes the metadata to be written at the END of the file\n+# as we cannot override the deleted data yet\n+statement ok\n+DELETE FROM uuids\n+\n+statement ok\n+CHECKPOINT\n+\n+# doing ANOTHER action and checkpointing again causes the data to be truncated\n+# since the metadata can then overwrite the previously written data\n+statement ok\n+CREATE TABLE integers(i INTEGER);\n+\n+statement ok\n+INSERT INTO integers VALUES (1), (2), (3);\n+\n+statement ok\n+CHECKPOINT\n+\n+query I\n+SELECT total_blocks < 10 FROM pragma_database_size();\n+----\n+true\n+\n+endloop\n+\n+restart\n+\n+query I\n+FROM integers\n+----\n+1\n+2\n+3\n+\n+query I\n+FROM uuids\n+----\n+\n+# resume operation after truncation\n+restart\n+\n+statement ok\n+DELETE FROM integers\n+\n+statement ok\n+INSERT INTO integers FROM range(1000000);\n+\n+query I\n+SELECT SUM(i) FROM integers\n+----\n+499999500000\n+\n+restart\n+\n+query I\n+SELECT SUM(i) FROM integers\n+----\n+499999500000\ndiff --git a/test/sql/storage/vacuum/vacuum_deletes_cleanup.test_slow b/test/sql/storage/vacuum/vacuum_deletes_cleanup.test_slow\nnew file mode 100644\nindex 000000000000..59341af0ac2f\n--- /dev/null\n+++ b/test/sql/storage/vacuum/vacuum_deletes_cleanup.test_slow\n@@ -0,0 +1,92 @@\n+# name: test/sql/storage/vacuum/vacuum_deletes_cleanup.test_slow\n+# description: Verify that deleting rows and re-appending does not increase storage size\n+# group: [vacuum]\n+\n+load __TEST_DIR__/vacuum_deletes_cleanup.db\n+\n+statement ok\n+CREATE TABLE integers(i INTEGER);\n+\n+# verify that deleting an entire table in a loop doesn't increase database size (i.e. deletes are vacuumed correctly)\n+loop i 0 10\n+\n+statement ok\n+INSERT INTO integers SELECT * FROM range(1000000);\n+\n+query I\n+SELECT SUM(i) FROM integers\n+----\n+499999500000\n+\n+statement ok\n+DELETE FROM integers\n+\n+query I\n+SELECT SUM(i) FROM integers\n+----\n+NULL\n+\n+query I\n+SELECT total_blocks * block_size < 15 * 262144 FROM pragma_database_size()\n+----\n+true\n+\n+endloop\n+\n+# do the same but delete in segments\n+loop i 0 10\n+\n+statement ok\n+INSERT INTO integers SELECT * FROM range(1000000);\n+\n+query I\n+SELECT SUM(i) FROM integers\n+----\n+499999500000\n+\n+statement ok\n+DELETE FROM integers WHERE i < 200000\n+\n+query I\n+SELECT SUM(i) FROM integers\n+----\n+479999600000\n+\n+statement ok\n+DELETE FROM integers WHERE i < 400000\n+\n+query I\n+SELECT SUM(i) FROM integers\n+----\n+419999700000\n+\n+statement ok\n+DELETE FROM integers WHERE i < 600000\n+\n+query I\n+SELECT SUM(i) FROM integers\n+----\n+319999800000\n+\n+statement ok\n+DELETE FROM integers WHERE i < 800000\n+\n+query I\n+SELECT SUM(i) FROM integers\n+----\n+179999900000\n+\n+statement ok\n+DELETE FROM integers\n+\n+query I\n+SELECT SUM(i) FROM integers\n+----\n+NULL\n+\n+query I\n+SELECT total_blocks * block_size < 15 * 262144 FROM pragma_database_size()\n+----\n+true\n+\n+endloop\ndiff --git a/test/sql/storage/vacuum/vacuum_deletes_index.test b/test/sql/storage/vacuum/vacuum_deletes_index.test\nnew file mode 100644\nindex 000000000000..1465c5c274ab\n--- /dev/null\n+++ b/test/sql/storage/vacuum/vacuum_deletes_index.test\n@@ -0,0 +1,19 @@\n+# name: test/sql/storage/vacuum/vacuum_deletes_index.test\n+# description: Test vacuuming of deletes in combination with indexes\n+# group: [vacuum]\n+\n+load __TEST_DIR__/vacuum_deletes_cleanup.db\n+\n+statement ok\n+CREATE TABLE integers(i INTEGER PRIMARY KEY);\n+\n+statement ok\n+INSERT INTO integers SELECT * FROM range(1000000);\n+\n+statement ok\n+DELETE FROM integers WHERE i < 500000\n+\n+query I\n+SELECT * FROM integers WHERE i=600000\n+----\n+600000\ndiff --git a/test/sql/storage_version/storage_version.db b/test/sql/storage_version/storage_version.db\nindex 4881560e1ef6..fc2dac5b3ce0 100644\nBinary files a/test/sql/storage_version/storage_version.db and b/test/sql/storage_version/storage_version.db differ\ndiff --git a/test/sql/subquery/complex/correlated_list_aggregate.test_coverage b/test/sql/subquery/complex/correlated_list_aggregate.test_slow\nsimilarity index 99%\nrename from test/sql/subquery/complex/correlated_list_aggregate.test_coverage\nrename to test/sql/subquery/complex/correlated_list_aggregate.test_slow\nindex 0f4c5cd851c5..96a8ae251430 100644\n--- a/test/sql/subquery/complex/correlated_list_aggregate.test_coverage\n+++ b/test/sql/subquery/complex/correlated_list_aggregate.test_slow\n@@ -1,4 +1,4 @@\n-# name: test/sql/subquery/complex/correlated_list_aggregate.test_coverage\n+# name: test/sql/subquery/complex/correlated_list_aggregate.test_slow\n # description: Test correlated aggregate subqueries\n # group: [complex]\n \ndiff --git a/test/sql/subquery/complex/expensive_deduplication_3593.test_coverage b/test/sql/subquery/complex/expensive_deduplication_3593.test_slow\nsimilarity index 99%\nrename from test/sql/subquery/complex/expensive_deduplication_3593.test_coverage\nrename to test/sql/subquery/complex/expensive_deduplication_3593.test_slow\nindex aaaeba6e0cff..66dde11509fd 100644\n--- a/test/sql/subquery/complex/expensive_deduplication_3593.test_coverage\n+++ b/test/sql/subquery/complex/expensive_deduplication_3593.test_slow\n@@ -1,4 +1,4 @@\n-# name: test/sql/subquery/complex/expensive_deduplication_3593.test_coverage\n+# name: test/sql/subquery/complex/expensive_deduplication_3593.test_slow\n # description: Issue #3593: Macros causes crash: memory consumption or recursion or something\n # group: [complex]\n \ndiff --git a/test/sql/subquery/complex/nested_correlated_list.test_coverage b/test/sql/subquery/complex/nested_correlated_list.test_slow\nsimilarity index 99%\nrename from test/sql/subquery/complex/nested_correlated_list.test_coverage\nrename to test/sql/subquery/complex/nested_correlated_list.test_slow\nindex 5a2baaffa802..24eb3b9a7487 100644\n--- a/test/sql/subquery/complex/nested_correlated_list.test_coverage\n+++ b/test/sql/subquery/complex/nested_correlated_list.test_slow\n@@ -1,4 +1,4 @@\n-# name: test/sql/subquery/complex/nested_correlated_list.test_coverage\n+# name: test/sql/subquery/complex/nested_correlated_list.test_slow\n # description: Test nested correlated list subqueries\n # group: [complex]\n \ndiff --git a/test/sql/subquery/lateral/lateral_join_nested.test b/test/sql/subquery/lateral/lateral_join_nested.test\nindex 992157cc68f4..15de81993230 100644\n--- a/test/sql/subquery/lateral/lateral_join_nested.test\n+++ b/test/sql/subquery/lateral/lateral_join_nested.test\n@@ -23,13 +23,237 @@ NULL\tNULL\t16\n 2\t48\t16\n 3\t60\t16\n \n-statement error\n+query III\n SELECT i1.i, SUM(r2.k), COUNT(*) FROM integers i1, LATERAL (SELECT i1.i+i2.i FROM integers i2, LATERAL (SELECT i1.i+i2.i+i3.i FROM integers i3) r3) r2(k) GROUP BY i1.i ORDER BY i1.i;\n ----\n-Nested lateral joins\n+NULL\tNULL\t16\n+1\t36\t16\n+2\t48\t16\n+3\t60\t16\n \n # lateral join inside correlated subquery\n-statement error\n+query I\n SELECT (SELECT k+l FROM (SELECT i1.i + 1) t1(k), LATERAL (SELECT k + 1) t2(l)) FROM integers i1 ORDER BY i;\n ----\n-Nested lateral joins\n+NULL\n+5\n+7\n+9\n+\n+# random stress tests for laterals and subqueries\n+query I\n+SELECT * FROM (SELECT 42) t(i) WHERE i IN (SELECT l FROM (SELECT 42) t(l) , (SELECT i * 2) t2(j), (SELECT i + j) t3(k) WHERE k IN (SELECT l*3 FROM (SELECT 42 l) t4(l) WHERE k-i = j));\n+----\n+42\n+\n+query III\n+SELECT * FROM (SELECT 42) t(i), (SELECT * FROM (SELECT 142 k) t3(k), (SELECT 1 WHERE k-i=100) t4(l));\n+----\n+42\t142\t1\n+\n+query III\n+SELECT * FROM (SELECT 42) t1(i), (SELECT 22) t2(j), (SELECT 1 WHERE i+j=64) t3(l);\n+----\n+42\t22\t1\n+\n+query III\n+SELECT * FROM (SELECT 64) t1(i), (SELECT 22) t2(j), (SELECT 1 WHERE i+j=64) t3(l);\n+----\n+\n+query III\n+SELECT * FROM (SELECT 42) t1(i), (SELECT 22) t2(j), (SELECT i+j WHERE i+j=64) t3(l);\n+----\n+42\t22\t64\n+\n+query III\n+SELECT * FROM (SELECT i,j,k FROM (SELECT 42) t(i), (SELECT i * 2) t2(j), (SELECT i + j) t3(k));\n+----\n+42\t84\t126\n+\n+query III\n+SELECT * FROM (SELECT i,j,k FROM (SELECT 42) t(i), (SELECT i * 2) t2(j), (SELECT i + j) t3(k));\n+----\n+42\t84\t126\n+\n+query III\n+SELECT * FROM (SELECT 42) t(i), (SELECT * FROM (SELECT 142 k) t3(k), (SELECT 1 WHERE i+k=0) t4(l));\n+----\n+\n+query III\n+SELECT * FROM (SELECT * FROM (SELECT 42) t1(i), (SELECT 22) t2(j), (SELECT 1 WHERE i+j=64) t3(l));\n+----\n+42\t22\t1\n+\n+query III\n+SELECT * FROM (SELECT * FROM (SELECT 42) t(i), (SELECT * FROM (SELECT 142 k) t3(k), (SELECT 1 WHERE k-i=100) t4(l)));\n+----\n+42\t142\t1\n+\n+query III\n+SELECT * FROM (SELECT * FROM (SELECT 42) t(i), (SELECT * FROM (SELECT 142 k) t3(k), (SELECT 1 WHERE i-k=-100) t4(l)));\n+----\n+42\t142\t1\n+\n+query IIII\n+SELECT * FROM (SELECT 42) t(i), (SELECT * FROM (SELECT 142 k) t3(k), (SELECT * FROM (SELECT 242 l) t4(l), (SELECT 1 WHERE i+l+k=426) t5(m)));\n+----\n+42\t142\t242\t1\n+\n+query I\n+SELECT i FROM (SELECT 42) t(i) WHERE i*2 IN (SELECT j FROM (SELECT i) t(l) , (SELECT l+i) t2(j), (SELECT i+j) t3(k));\n+----\n+42\n+\n+query I\n+SELECT * FROM (SELECT 42) t(i) WHERE i IN (SELECT k FROM (SELECT 42) t(k) WHERE k IN (SELECT l FROM (SELECT 42 l) t4(l) WHERE i-k IN (SELECT * FROM (SELECT i+5))));\n+----\n+\n+query III\n+SELECT * FROM (SELECT 42) t(i), (SELECT * FROM (SELECT 142 k) t3(k), (SELECT 1 WHERE i+k=0) t4(l));\n+----\n+\n+query II\n+SELECT * FROM (SELECT 42) t4(m), (SELECT 64) t5(n) WHERE m IN ( SELECT j FROM (SELECT 21*m*n) t(i), (SELECT m) t2(j));\n+----\n+42\t64\n+\n+query I\n+SELECT * FROM (SELECT 42) t4(m) WHERE m IN ( SELECT i FROM (SELECT m) t(i), (SELECT i*m/2 * 2/m) t2(j));\n+----\n+42\n+\n+query I\n+ SELECT * FROM (SELECT 10) t(i) WHERE i IN (SELECT k FROM (SELECT 20) t(k) WHERE k IN (SELECT l FROM (SELECT 30) t4(l) WHERE i-k IN (SELECT * FROM (SELECT i+100))));\n+----\n+\n+query I\n+ SELECT * FROM (SELECT 42) t(i) WHERE i IN (SELECT k FROM (SELECT 42) t(k) WHERE k IN (SELECT l FROM (SELECT 42 l) t4(l) WHERE i-k IN (SELECT * FROM (SELECT 0))));\n+----\n+42\n+\n+query I\n+ SELECT * FROM (SELECT 42) t(i) WHERE i IN (SELECT k FROM (SELECT 42) t(k) WHERE k IN (SELECT i FROM (SELECT i) t4 WHERE i*2-k IN (SELECT * FROM (SELECT i))));\n+----\n+42\n+\n+query III\n+ SELECT * FROM (SELECT 42) t1(i), (SELECT 22) t2(j), (SELECT i+j WHERE i+j=(SELECT 64)) t3(l);\n+----\n+42\t22\t64\n+\n+query I\n+ SELECT * FROM (SELECT 42) t(i) WHERE i IN (SELECT k FROM (SELECT i) t(k) WHERE k = 0);\n+----\n+\n+query I\n+SELECT * FROM (SELECT 42) t(i) WHERE i IN (SELECT l FROM (SELECT 42) t(l) WHERE l IN (SELECT l FROM (SELECT 42 l) t4(l), (SELECT l+5) t5(n) WHERE i+2*l IN (SELECT k FROM (SELECT i+5), (SELECT i * 2) t2(j), (SELECT i + j) t3(k) WHERE k-l IN (SELECT i*2))));\n+----\n+42\n+\n+query I\n+SELECT (SELECT (SELECT k FROM (SELECT i) t2(j), (SELECT j) t3(k))) FROM (SELECT 42) t(i);\n+----\n+42\n+\n+query I\n+SELECT i FROM (SELECT 42) t(i) WHERE i IN (SELECT l FROM (SELECT 42) t(l) , (SELECT 42) t2(j), (SELECT i+j+l) t3(k));\n+----\n+42\n+\n+query IIII\n+SELECT * FROM (SELECT 42) t(i),\n+              (SELECT *\n+               FROM (SELECT 142) t3(y),\n+                    (SELECT *\n+                     FROM (SELECT 242) t4(z),\n+                          (SELECT 58 WHERE i+y+z=426) t5(m)))\n+WHERE z-y-m IN (SELECT l FROM (SELECT 42) t(l)\n+            WHERE l IN (SELECT l FROM (SELECT 42 l) t4(l),\n+                                      (SELECT l+5) t5(n)\n+                        WHERE i+2*l IN (SELECT k FROM (SELECT i+5),\n+                                                      (SELECT i * 2) t2(j),\n+                                                      (SELECT i + j) t3(k)\n+                                        WHERE k-l IN (SELECT i*2))\n+            ));\n+----\n+42\t142\t242\t58\n+\n+query I\n+SELECT (SELECT (SELECT k\n+                FROM (SELECT i) t2(j),\n+                     (SELECT j) t3(k)))\n+FROM (SELECT 42) t(i)\n+WHERE i IN (SELECT l FROM (SELECT 42) t(l)\n+            WHERE l IN (SELECT l FROM (SELECT 42 l) t4(l),\n+                                      (SELECT l+5) t5(n)\n+                        WHERE i+2*l IN (SELECT k FROM (SELECT i+5),\n+                                                      (SELECT i * 2) t2(j),\n+                                                      (SELECT i + j) t3(k)\n+                                        WHERE k-l IN (SELECT i*2))\n+            ));\n+----\n+42\n+\n+query I\n+SELECT * FROM (SELECT 42) t(i)\n+WHERE i IN (SELECT l FROM (SELECT 42) t4(l)\n+            WHERE l IN (SELECT l FROM (SELECT (SELECT z-y As l\n+                                               FROM (SELECT x) t20(y),\n+                                                    (SELECT y+x) t21(z))\n+                                       FROM (SELECT 42) t22(x)),\n+                                      (SELECT l+5) t5(n)\n+                        WHERE i+2*l IN (SELECT k FROM (SELECT i+5),\n+                                                      (SELECT i * 2) t2(j),\n+                                                      (SELECT i + j) t3(k)\n+                                        WHERE k-l IN (SELECT i*2))\n+            ));\n+----\n+42\n+\n+query I\n+SELECT (SELECT res.*\n+        FROM (SELECT 1) AS t2(z),\n+                   (SELECT (SELECT i\n+                          FROM (SELECT MAX(k) FROM generate_series(1,10) t(k)) AS t(i)\n+                          GROUP BY i\n+                          HAVING (COUNT(*)) =\n+                                 ((SELECT x)))) res)\n+FROM generate_series(1, 5) t(x);\n+----\n+10\n+NULL\n+NULL\n+NULL\n+NULL\n+\n+statement ok\n+create view strings as (with recursive t(a) as (select 1 union select a+1 from t where a < 5) select * from t order by a);\n+\n+query I\n+select sum(a)\n+from strings\n+where a in (select k\n+            from (select 1) t(l) ,\n+                 (select 1+l) t2(j),\n+                 (select a-j\n+                  from strings) t3(k));\n+----\n+6\n+\n+statement ok\n+create view strings2 as (with recursive t2(b) as (select 0 union select 10*a from strings where a < 5) select * from t2 order by b);\n+\n+query I\n+select *\n+from strings2\n+where b in (select k\n+            from (select 10) t(l) ,\n+                 (select 10+l) t2(j),\n+                 (select l+10*a\n+                  from strings) t3(k))\n+group by b\n+having b%20 == 0\n+order by b desc;\n+----\n+40\n+20\ndiff --git a/test/sql/subquery/lateral/lateral_values.test b/test/sql/subquery/lateral/lateral_values.test\nindex da87ca13f925..3825c8f4d848 100644\n--- a/test/sql/subquery/lateral/lateral_values.test\n+++ b/test/sql/subquery/lateral/lateral_values.test\n@@ -22,8 +22,22 @@ NULL\tNULL\n 2\t3\n 3\t4\n \n-# we do not (yet) support referencing columns multiple levels down\n-statement error\n+query III\n SELECT * FROM integers a, integers b JOIN LATERAL (VALUES (a.i)) ss(x) ON (true) ORDER BY a.i, b.i;\n ----\n-Nested lateral joins\n+NULL\tNULL\tNULL\n+NULL\t1\tNULL\n+NULL\t2\tNULL\n+NULL\t3\tNULL\n+1\tNULL\t1\n+1\t1\t1\n+1\t2\t1\n+1\t3\t1\n+2\tNULL\t2\n+2\t1\t2\n+2\t2\t2\n+2\t3\t2\n+3\tNULL\t3\n+3\t1\t3\n+3\t2\t3\n+3\t3\t3\ndiff --git a/test/sql/subquery/lateral/pg_lateral.test b/test/sql/subquery/lateral/pg_lateral.test\nindex 919b3e44fb32..a63c1581c948 100644\n--- a/test/sql/subquery/lateral/pg_lateral.test\n+++ b/test/sql/subquery/lateral/pg_lateral.test\n@@ -315,7 +315,7 @@ where ss1.c2 = 0;\n \n mode unskip\n \n-statement error\n+query IIII\n select i8.*, ss.v, t.unique2\n   from int8_tbl i8\n     left join int4_tbl i4 on i4.f1 = 1\n@@ -323,7 +323,7 @@ select i8.*, ss.v, t.unique2\n     left join tenk1 t on t.unique2 = ss.v\n where q2 = 456;\n ----\n-Join condition for non-inner LATERAL JOIN must be a comparison\n+123\t456\tNULL\tNULL\n \n query II\n select unique2, x.*\n@@ -337,11 +337,16 @@ from int4_tbl x, lateral (select unique2 from tenk1 where f1 = unique1) ss;\n ----\n 9998\t0\n \n-statement error\n+query II\n select unique2, x.*\n-from int4_tbl x left join lateral (select unique1, unique2 from tenk1 where f1 = unique1) ss on true;\n+from int4_tbl x left join lateral (select unique1, unique2 from tenk1 where f1 = unique1) ss on true\n+order by all;\n ----\n-Join condition for non-inner LATERAL JOIN must be a comparison\n+9998\t0\n+NULL\t-2147483647\n+NULL\t-123456\n+NULL\t123456\n+NULL\t2147483647\n \n # FIXME: INTERNAL Error: Logical operator type \"DELIM_JOIN\" for dependent join\n mode skip\n@@ -376,17 +381,17 @@ select * from generate_series(100,200) g(g),\n 123\t123\t4567890123456789\n 123\t4567890123456789\t123\n \n-statement error\n+query I\n select count(*) from tenk1 a,\n   tenk1 b join lateral (values(a.unique1)) ss(x) on b.unique2 = ss.x;\n ----\n-Nested lateral joins\n+10000\n \n-statement error\n+query I\n select count(*) from tenk1 a,\n   tenk1 b join lateral (values(a.unique1),(-1)) ss(x) on b.unique2 = ss.x;\n ----\n-Nested lateral joins\n+10000\n \n query III\n select * from (select f1/2 as x from int4_tbl) ss1 join int4_tbl i4 on x = f1,\ndiff --git a/test/sql/subquery/scalar/correlated_pivot.test b/test/sql/subquery/scalar/correlated_pivot.test\nindex 4c819b6c1d58..011ce3645b2a 100644\n--- a/test/sql/subquery/scalar/correlated_pivot.test\n+++ b/test/sql/subquery/scalar/correlated_pivot.test\n@@ -11,6 +11,9 @@ CREATE TABLE Product(DaysToManufacture int, StandardCost int);\n statement ok\n INSERT INTO Product VALUES (0, 5.0885), (1, 223.88), (2, 359.1082), (4, 949.4105);\n \n+statement ok\n+SET pivot_filter_threshold=0\n+\n # pivot\n statement error\n SELECT DaysToManufacture, StandardCost, (SELECT [\"0\", \"1\", \"2\", \"3\", \"4\"] FROM\n@@ -60,3 +63,14 @@ SELECT DaysToManufacture, StandardCost, (SELECT LIST(cost) FROM\n FROM Product\n ----\n PIVOT is not supported in correlated subqueries yet\n+\n+statement ok\n+RESET pivot_filter_threshold\n+\n+statement ok\n+RESET SESSION pivot_filter_threshold\n+\n+statement error\n+RESET GLOBAL pivot_filter_threshold\n+----\n+cannot be reset globally\ndiff --git a/test/sql/subquery/scalar/expression_get.test_coverage b/test/sql/subquery/scalar/expression_get.test_slow\nsimilarity index 97%\nrename from test/sql/subquery/scalar/expression_get.test_coverage\nrename to test/sql/subquery/scalar/expression_get.test_slow\nindex 0ff6b5216bc2..3017ace04136 100644\n--- a/test/sql/subquery/scalar/expression_get.test_coverage\n+++ b/test/sql/subquery/scalar/expression_get.test_slow\n@@ -1,4 +1,4 @@\n-# name: test/sql/subquery/scalar/expression_get.test_coverage\n+# name: test/sql/subquery/scalar/expression_get.test_slow\n # description: Issue #2701: Nested selecting max from column values gives dependent join internal error\n # group: [scalar]\n \ndiff --git a/test/sql/subquery/scalar/test_correlated_aggregate_subquery.test_coverage b/test/sql/subquery/scalar/test_correlated_aggregate_subquery.test_slow\nsimilarity index 99%\nrename from test/sql/subquery/scalar/test_correlated_aggregate_subquery.test_coverage\nrename to test/sql/subquery/scalar/test_correlated_aggregate_subquery.test_slow\nindex 927da9bc9e38..d39a076b4c32 100644\n--- a/test/sql/subquery/scalar/test_correlated_aggregate_subquery.test_coverage\n+++ b/test/sql/subquery/scalar/test_correlated_aggregate_subquery.test_slow\n@@ -1,4 +1,4 @@\n-# name: test/sql/subquery/scalar/test_correlated_aggregate_subquery.test_coverage\n+# name: test/sql/subquery/scalar/test_correlated_aggregate_subquery.test_slow\n # description: Test correlated aggregate subqueries\n # group: [scalar]\n \ndiff --git a/test/sql/subquery/scalar/test_correlated_subquery.test b/test/sql/subquery/scalar/test_correlated_subquery.test\nindex a8445ade9475..6d50961cb21a 100644\n--- a/test/sql/subquery/scalar/test_correlated_subquery.test\n+++ b/test/sql/subquery/scalar/test_correlated_subquery.test\n@@ -14,6 +14,9 @@ CREATE TABLE integers(i INTEGER)\n statement ok\n INSERT INTO integers VALUES (1), (2), (3), (NULL)\n \n+# temporary solution until decorrelation of materialized CTEs is implemented\n+require noalternativeverify\n+\n # scalar select with correlation\n query II\n SELECT i, (SELECT 42+i1.i) AS j FROM integers i1 ORDER BY i;\ndiff --git a/test/sql/subquery/scalar/test_correlated_subquery_cte.test b/test/sql/subquery/scalar/test_correlated_subquery_cte.test\nindex f9f106431e3b..d8319d5b4e21 100644\n--- a/test/sql/subquery/scalar/test_correlated_subquery_cte.test\n+++ b/test/sql/subquery/scalar/test_correlated_subquery_cte.test\n@@ -14,6 +14,8 @@ CREATE TABLE integers(i INTEGER)\n statement ok\n INSERT INTO integers VALUES (1), (2), (3), (NULL)\n \n+require noalternativeverify\n+\n # scalar select with correlation\n query II\n SELECT i, (WITH i2 AS (SELECT 42+i1.i AS j) SELECT j FROM i2) AS j FROM integers i1 ORDER BY i;\ndiff --git a/test/sql/subquery/scalar/test_nested_correlated_subquery.test_coverage b/test/sql/subquery/scalar/test_nested_correlated_subquery.test_slow\nsimilarity index 99%\nrename from test/sql/subquery/scalar/test_nested_correlated_subquery.test_coverage\nrename to test/sql/subquery/scalar/test_nested_correlated_subquery.test_slow\nindex fe09cfb9ce9c..4b88950f1d81 100644\n--- a/test/sql/subquery/scalar/test_nested_correlated_subquery.test_coverage\n+++ b/test/sql/subquery/scalar/test_nested_correlated_subquery.test_slow\n@@ -1,4 +1,4 @@\n-# name: test/sql/subquery/scalar/test_nested_correlated_subquery.test_coverage\n+# name: test/sql/subquery/scalar/test_nested_correlated_subquery.test_slow\n # description: Test nested correlated subqueries\n # group: [scalar]\n \ndiff --git a/test/sql/subquery/scalar/test_scalar_subquery_cte.test b/test/sql/subquery/scalar/test_scalar_subquery_cte.test\nindex 91adf72d3635..4d20ceae923d 100644\n--- a/test/sql/subquery/scalar/test_scalar_subquery_cte.test\n+++ b/test/sql/subquery/scalar/test_scalar_subquery_cte.test\n@@ -105,6 +105,9 @@ SELECT CASE WHEN c>(WITH cte AS (SELECT sum(c)/count(*) FROM t1) SELECT * FROM c\n 1000\n 214\n \n+# temporary solution until decorrelation of materialized CTEs is implemented\n+require noalternativeverify\n+\n # correlated subqueries\n query IR\n SELECT a, (WITH cte AS (SELECT SUM(b) FROM test tsub WHERE test.a=tsub.a) SELECT * FROM cte) FROM test\ndiff --git a/test/sql/subquery/table/test_nested_table_subquery.test_coverage b/test/sql/subquery/table/test_nested_table_subquery.test_slow\nsimilarity index 99%\nrename from test/sql/subquery/table/test_nested_table_subquery.test_coverage\nrename to test/sql/subquery/table/test_nested_table_subquery.test_slow\nindex f11640b91ac5..6cacc87953dd 100644\n--- a/test/sql/subquery/table/test_nested_table_subquery.test_coverage\n+++ b/test/sql/subquery/table/test_nested_table_subquery.test_slow\n@@ -1,4 +1,4 @@\n-# name: test/sql/subquery/table/test_nested_table_subquery.test_coverage\n+# name: test/sql/subquery/table/test_nested_table_subquery.test_slow\n # description: Nested table subquery\n # group: [table]\n \ndiff --git a/test/sql/types/enum/test_enum_table.test b/test/sql/types/enum/test_enum_table.test\nindex d48f0067d382..2426ac2b40f4 100644\n--- a/test/sql/types/enum/test_enum_table.test\n+++ b/test/sql/types/enum/test_enum_table.test\n@@ -173,11 +173,11 @@ statement ok\n INSERT INTO person VALUES ('Diego', 'sad', 'happy','Seat'), ('Tim', 'happy', 'sad','Fiets');\n \n query II\n-select count(*), current_mood from person group by current_mood\n+select count(*), current_mood from person group by current_mood order by all\n ----\n 1\tok\n-2\tsad\n 1\thappy\n+2\tsad\n \n query II\n select name, current_mood from person order by current_mood\ndiff --git a/test/sql/types/list/big_unnest.test_coverage b/test/sql/types/list/big_unnest.test_slow\nsimilarity index 90%\nrename from test/sql/types/list/big_unnest.test_coverage\nrename to test/sql/types/list/big_unnest.test_slow\nindex 87536dffac5f..13384949b83f 100644\n--- a/test/sql/types/list/big_unnest.test_coverage\n+++ b/test/sql/types/list/big_unnest.test_slow\n@@ -1,4 +1,4 @@\n-# name: test/sql/types/list/big_unnest.test_coverage\n+# name: test/sql/types/list/big_unnest.test_slow\n # description: Test large unnests\n # group: [list]\n \ndiff --git a/test/sql/types/list/large_nested_lists.test_coverage b/test/sql/types/list/large_nested_lists.test_slow\nsimilarity index 97%\nrename from test/sql/types/list/large_nested_lists.test_coverage\nrename to test/sql/types/list/large_nested_lists.test_slow\nindex bfb0afead4d5..c03b556c8906 100644\n--- a/test/sql/types/list/large_nested_lists.test_coverage\n+++ b/test/sql/types/list/large_nested_lists.test_slow\n@@ -1,4 +1,4 @@\n-# name: test/sql/types/list/large_nested_lists.test_coverage\n+# name: test/sql/types/list/large_nested_lists.test_slow\n # description: Test large nested lists\n # group: [list]\n \ndiff --git a/test/sql/types/list/list_extract_types.test_coverage b/test/sql/types/list/list_extract_types.test_slow\nsimilarity index 93%\nrename from test/sql/types/list/list_extract_types.test_coverage\nrename to test/sql/types/list/list_extract_types.test_slow\nindex 87e4db940d6a..17c775536249 100644\n--- a/test/sql/types/list/list_extract_types.test_coverage\n+++ b/test/sql/types/list/list_extract_types.test_slow\n@@ -1,4 +1,4 @@\n-# name: test/sql/types/list/list_extract_types.test_coverage\n+# name: test/sql/types/list/list_extract_types.test_slow\n # description: Test list extract on various types\n # group: [list]\n \ndiff --git a/test/sql/types/list/many_lists.test_coverage b/test/sql/types/list/many_lists.test_slow\nsimilarity index 95%\nrename from test/sql/types/list/many_lists.test_coverage\nrename to test/sql/types/list/many_lists.test_slow\nindex 86df777b6e27..1e674988dd0e 100644\n--- a/test/sql/types/list/many_lists.test_coverage\n+++ b/test/sql/types/list/many_lists.test_slow\n@@ -1,4 +1,4 @@\n-# name: test/sql/types/list/many_lists.test_coverage\n+# name: test/sql/types/list/many_lists.test_slow\n # description: Test many lists\n # group: [list]\n \ndiff --git a/test/sql/types/struct/struct_distinct.test b/test/sql/types/struct/struct_distinct.test\nindex 1d2408d592f6..642e7d196598 100644\n--- a/test/sql/types/struct/struct_distinct.test\n+++ b/test/sql/types/struct/struct_distinct.test\n@@ -5,44 +5,46 @@\n statement ok\n PRAGMA enable_verification\n \n+foreach type <numeric>\n+\n # Constant single integer column distinct\n query T\n-SELECT {'x': 1} IS NOT DISTINCT FROM {'x': 2}\n+SELECT {'x': 1::${type}} IS NOT DISTINCT FROM {'x': 2::${type}}\n ----\n false\n \n query T\n-SELECT {'x': 1} IS NOT DISTINCT FROM {'x': 1}\n+SELECT {'x': 1::${type}} IS NOT DISTINCT FROM {'x': 1::${type}}\n ----\n true\n \n query T\n-SELECT NULL IS NOT DISTINCT FROM {'x': 1}\n+SELECT NULL IS NOT DISTINCT FROM {'x': 1::${type}}\n ----\n false\n \n query T\n-SELECT {'x': 1} IS DISTINCT FROM {'x': 2}\n+SELECT {'x': 1::${type}} IS DISTINCT FROM {'x': 2::${type}}\n ----\n true\n \n query T\n-SELECT {'x': 1} IS DISTINCT FROM {'x': 1}\n+SELECT {'x': 1::${type}} IS DISTINCT FROM {'x': 1::${type}}\n ----\n false\n \n query T\n-SELECT {'x': 1} IS DISTINCT FROM NULL\n+SELECT {'x': 1::${type}} IS DISTINCT FROM NULL\n ----\n true\n \n statement ok\n-CREATE VIEW struct_int AS SELECT * FROM (VALUES\n-\t({'x': 1}, {'x': 1}),\n-\t({'x': 1}, {'x': 2}),\n-\t({'x': 2}, {'x': 1}),\n-\t(NULL, {'x': 1}),\n-\t({'x': 2}, NULL),\n+CREATE OR REPLACE VIEW struct_int AS SELECT * FROM (VALUES\n+\t({'x': 1::${type}}, {'x': 1::${type}}),\n+\t({'x': 1::${type}}, {'x': 2::${type}}),\n+\t({'x': 2::${type}}, {'x': 1::${type}}),\n+\t(NULL, {'x': 1::${type}}),\n+\t({'x': 2::${type}}, NULL),\n \t(NULL, NULL)\n \t) tbl(l, r);\n \n@@ -66,6 +68,8 @@ true\n true\n false\n \n+endloop\n+\n # Constant single string column distinct\n query T\n SELECT {'x': 'duck'} IS NOT DISTINCT FROM {'x': 'goose'}\ndiff --git a/test/sql/types/test_all_types.test_coverage b/test/sql/types/test_all_types.test_slow\nsimilarity index 98%\nrename from test/sql/types/test_all_types.test_coverage\nrename to test/sql/types/test_all_types.test_slow\nindex 0d819abb282b..dd1f73d771a3 100644\n--- a/test/sql/types/test_all_types.test_coverage\n+++ b/test/sql/types/test_all_types.test_slow\n@@ -1,4 +1,4 @@\n-# name: test/sql/types/test_all_types.test_coverage\n+# name: test/sql/types/test_all_types.test_slow\n # description: Test all types function\n # group: [types]\n \ndiff --git a/test/sql/types/uuid/test_uuid.test_coverage b/test/sql/types/uuid/test_uuid.test_slow\nsimilarity index 99%\nrename from test/sql/types/uuid/test_uuid.test_coverage\nrename to test/sql/types/uuid/test_uuid.test_slow\nindex 7b1f6d33dfd5..31513acee290 100644\n--- a/test/sql/types/uuid/test_uuid.test_coverage\n+++ b/test/sql/types/uuid/test_uuid.test_slow\n@@ -1,4 +1,4 @@\n-# name: test/sql/types/uuid/test_uuid.test_coverage\n+# name: test/sql/types/uuid/test_uuid.test_slow\n # description: Test UUID type\n # group: [uuid]\n \ndiff --git a/test/sql/update/string_update_issue_2471.test_coverage b/test/sql/update/string_update_issue_2471.test_slow\nsimilarity index 91%\nrename from test/sql/update/string_update_issue_2471.test_coverage\nrename to test/sql/update/string_update_issue_2471.test_slow\nindex 6711d6014452..e18caefafeba 100644\n--- a/test/sql/update/string_update_issue_2471.test_coverage\n+++ b/test/sql/update/string_update_issue_2471.test_slow\n@@ -1,4 +1,4 @@\n-# name: test/sql/update/string_update_issue_2471.test_coverage\n+# name: test/sql/update/string_update_issue_2471.test_slow\n # description: Repeated update of string values\n # group: [update]\n \ndiff --git a/test/sql/update/test_multiple_assignment.test b/test/sql/update/test_multiple_assignment.test\nnew file mode 100644\nindex 000000000000..66f320f57047\n--- /dev/null\n+++ b/test/sql/update/test_multiple_assignment.test\n@@ -0,0 +1,81 @@\n+# name: test/sql/update/test_multiple_assignment.test\n+# description: Update with multiple assignment\n+# group: [update]\n+\n+#        create table and insert some values\n+# ---------------------------------------------------\n+statement ok\n+CREATE TABLE tbl (key INT, fruit VARCHAR, cost INT);\n+\n+statement ok\n+INSERT INTO tbl VALUES (1, 'apple', 2), (2, 'orange', 3);\n+\n+#                    simple case\n+# ---------------------------------------------------\n+statement ok\n+UPDATE tbl SET (key, fruit, cost) = (1, 'pear', 2);\n+\n+query III\n+SELECT * FROM tbl;\n+----\n+1\tpear\t2\n+1\tpear\t2\n+\n+#                    ROW function\n+# ---------------------------------------------------\n+statement ok\n+UPDATE tbl SET (key, fruit, cost) = (2, 'apple', 3);\n+\n+query III\n+SELECT * FROM tbl;\n+----\n+2\tapple\t3\n+2\tapple\t3\n+\n+#                      1 value\n+# ---------------------------------------------------\n+statement ok\n+UPDATE tbl SET (key, fruit, cost) = 3;\n+\n+query III\n+SELECT * FROM tbl;\n+----\n+3\t3\t3\n+3\t3\t3\n+\n+#                   too few values\n+# ---------------------------------------------------\n+statement error\n+UPDATE tbl SET (key, fruit, cost) = (1, 2);\n+----\n+Parser Error: Could not perform multiple assignment, target expects 3 values, only 2 were provided\n+\n+#                  too many values\n+# ---------------------------------------------------\n+statement error\n+UPDATE tbl SET (key, fruit, cost) = (1, 2, 3, 4);\n+----\n+Parser Error: Could not perform multiple assignment, target only expects 3 values, 4 were provided\n+\n+#            functions should still work\n+# ---------------------------------------------------\n+statement ok\n+UPDATE tbl SET (key, fruit, cost) = ADD(key, cost);\n+\n+query III\n+SELECT * FROM tbl;\n+----\n+6\t6\t6\n+6\t6\t6\n+\n+#                   empty lists\n+# ---------------------------------------------------\n+statement error\n+UPDATE tbl SET () = (key, fruit);\n+----\n+Parser Error: syntax error at or near \")\"\n+\n+statement error\n+UPDATE tbl SET (key, fruit) = ();\n+----\n+Parser Error: syntax error at or near \")\"\ndiff --git a/test/sql/upsert/insert_or_replace.test_coverage b/test/sql/upsert/insert_or_replace.test_slow\nsimilarity index 92%\nrename from test/sql/upsert/insert_or_replace.test_coverage\nrename to test/sql/upsert/insert_or_replace.test_slow\nindex 3f6b6347748c..49407e025734 100644\n--- a/test/sql/upsert/insert_or_replace.test_coverage\n+++ b/test/sql/upsert/insert_or_replace.test_slow\n@@ -1,4 +1,4 @@\n-# name: test/sql/upsert/insert_or_replace.test_coverage\n+# name: test/sql/upsert/insert_or_replace.test_slow\n # group: [upsert]\n \n statement ok\ndiff --git a/test/sql/vector_types/list_vector_types.test_coverage b/test/sql/vector_types/list_vector_types.test_slow\nsimilarity index 97%\nrename from test/sql/vector_types/list_vector_types.test_coverage\nrename to test/sql/vector_types/list_vector_types.test_slow\nindex bea74f233177..0805c86e40f4 100644\n--- a/test/sql/vector_types/list_vector_types.test_coverage\n+++ b/test/sql/vector_types/list_vector_types.test_slow\n@@ -1,4 +1,4 @@\n-# name: test/sql/vector_types/list_vector_types.test_coverage\n+# name: test/sql/vector_types/list_vector_types.test_slow\n # description: Vector Types test: lists\n # group: [vector_types]\n \ndiff --git a/test/sql/vector_types/struct_vector_types.test_coverage b/test/sql/vector_types/struct_vector_types.test_slow\nsimilarity index 97%\nrename from test/sql/vector_types/struct_vector_types.test_coverage\nrename to test/sql/vector_types/struct_vector_types.test_slow\nindex 6de4c965445d..4099839e0a18 100644\n--- a/test/sql/vector_types/struct_vector_types.test_coverage\n+++ b/test/sql/vector_types/struct_vector_types.test_slow\n@@ -1,4 +1,4 @@\n-# name: test/sql/vector_types/struct_vector_types.test_coverage\n+# name: test/sql/vector_types/struct_vector_types.test_slow\n # description: Vector Types test: structs\n # group: [vector_types]\n \ndiff --git a/test/sql/window/test_parallel_window.test_slow b/test/sql/window/test_parallel_window.test_slow\nindex 4eeb65228803..6a4d59c9e3fd 100644\n--- a/test/sql/window/test_parallel_window.test_slow\n+++ b/test/sql/window/test_parallel_window.test_slow\n@@ -2,24 +2,12 @@\n # description: Hashing and parallel execution\n # group: [window]\n \n-#statement ok\n-#PRAGMA enable_verification\n-\n statement ok\n PRAGMA threads=4\n \n statement ok\n PRAGMA verify_parallelism\n \n-statement ok\n-PRAGMA enable_profiling\n-\n-statement ok\n-PRAGMA profiling_output='__TEST_DIR__/test.json'\n-\n-statement ok\n-PRAGMA profiling_mode = detailed\n-\n # Create a table large enough to fill the partitions\n statement ok\n create table integers as select range i from range(0, 1000000);\ndiff --git a/test/sql/window/test_window_wide_frame.test_coverage b/test/sql/window/test_window_wide_frame.test_slow\nsimilarity index 91%\nrename from test/sql/window/test_window_wide_frame.test_coverage\nrename to test/sql/window/test_window_wide_frame.test_slow\nindex 4fc4fe6a4f7f..163799cfa67a 100644\n--- a/test/sql/window/test_window_wide_frame.test_coverage\n+++ b/test/sql/window/test_window_wide_frame.test_slow\n@@ -1,4 +1,4 @@\n-# name: test/sql/window/test_window_wide_frame.test_coverage\n+# name: test/sql/window/test_window_wide_frame.test_slow\n # description: Test wide temporal range frames\n # group: [window]\n \ndiff --git a/test/sqlite/select1.test_coverage b/test/sqlite/select1.test_slow\nsimilarity index 99%\nrename from test/sqlite/select1.test_coverage\nrename to test/sqlite/select1.test_slow\nindex 1d1fa2999ff1..373f93a0ddea 100644\n--- a/test/sqlite/select1.test_coverage\n+++ b/test/sqlite/select1.test_slow\n@@ -1,4 +1,4 @@\n-# name: test/sqlite/select1.test_coverage\n+# name: test/sqlite/select1.test_slow\n # group: [sqlite]\n \n statement ok\ndiff --git a/test/sqlite/select2.test_coverage b/test/sqlite/select2.test_slow\nsimilarity index 99%\nrename from test/sqlite/select2.test_coverage\nrename to test/sqlite/select2.test_slow\nindex db5ddd3e80a1..da8fdb5465b8 100644\n--- a/test/sqlite/select2.test_coverage\n+++ b/test/sqlite/select2.test_slow\n@@ -1,4 +1,4 @@\n-# name: test/sqlite/select2.test_coverage\n+# name: test/sqlite/select2.test_slow\n # group: [sqlite]\n \n hash-threshold 8\ndiff --git a/test/sqlite/sqllogic_test_runner.cpp b/test/sqlite/sqllogic_test_runner.cpp\nindex 07320f6365dd..ea4ffc2a20c0 100644\n--- a/test/sqlite/sqllogic_test_runner.cpp\n+++ b/test/sqlite/sqllogic_test_runner.cpp\n@@ -94,6 +94,9 @@ void SQLLogicTestRunner::Reconnect() {\n \tif (original_sqlite_test) {\n \t\tcon->Query(\"SET integer_division=true\");\n \t}\n+#ifdef DUCKDB_ALTERNATIVE_VERIFY\n+\tcon->Query(\"SET pivot_filter_threshold=0\");\n+#endif\n \tif (enable_verification) {\n \t\tcon->EnableQueryVerification();\n \t}\n@@ -514,6 +517,10 @@ void SQLLogicTestRunner::ExecuteFile(string script) {\n \t\t\t\t}\n \t\t\t} else if (param == \"skip_reload\") {\n \t\t\t\tskip_reload = true;\n+\t\t\t} else if (param == \"noalternativeverify\") {\n+#ifdef DUCKDB_ALTERNATIVE_VERIFY\n+\t\t\t\treturn;\n+#endif\n \t\t\t} else {\n \t\t\t\tauto result = ExtensionHelper::LoadExtension(*db, param);\n \t\t\t\tif (result == ExtensionLoadResult::LOADED_EXTENSION) {\ndiff --git a/test/sqlite/test_sqllogictest.cpp b/test/sqlite/test_sqllogictest.cpp\nindex 0d233952df8e..a0b63d43c680 100644\n--- a/test/sqlite/test_sqllogictest.cpp\n+++ b/test/sqlite/test_sqllogictest.cpp\n@@ -59,7 +59,7 @@ static string ParseGroupFromPath(string file) {\n \t\textension = \"[.]\";\n \t}\n \tif (file.find(\".test_coverage\") != std::string::npos) {\n-\t\t// \"slow\" in the name indicates a slow test (i.e. only run as part of allunit)\n+\t\t// \"coverage\" in the name indicates a coverage test (i.e. only run as part of coverage)\n \t\treturn \"[coverage][.]\";\n \t}\n \t// move backwards to the last slash\ndiff --git a/tools/jdbc/src/test/java/org/duckdb/test/TestDuckDBJDBC.java b/tools/jdbc/src/test/java/org/duckdb/test/TestDuckDBJDBC.java\nindex c82a783647b3..1c1ab9b45954 100644\n--- a/tools/jdbc/src/test/java/org/duckdb/test/TestDuckDBJDBC.java\n+++ b/tools/jdbc/src/test/java/org/duckdb/test/TestDuckDBJDBC.java\n@@ -509,6 +509,29 @@ public static void test_timestamp_as_long() throws Exception {\n \t\tstmt.close();\n \t\tconn.close();\n \t}\n+\t\n+\tpublic static void test_timestamptz_as_long() throws Exception {\n+\t\tConnection conn = DriverManager.getConnection(\"jdbc:duckdb:\");\n+\t\tStatement stmt = conn.createStatement();\n+\n+\t\tResultSet rs;\n+\n+\t\tstmt.execute(\"SET CALENDAR='gregorian'\");\n+\t\tstmt.execute(\"SET TIMEZONE='America/Los_Angeles'\");\n+\t\tstmt.execute(\"CREATE TABLE t (id INT, t1 TIMESTAMPTZ)\");\n+\t\tstmt.execute(\"INSERT INTO t (id, t1) VALUES (1, '2022-01-01T12:11:10Z')\");\n+\t\tstmt.execute(\"INSERT INTO t (id, t1) VALUES (2, '2022-01-01T12:11:11Z')\");\n+\n+\t\trs = stmt.executeQuery(\"SELECT * FROM t ORDER BY id\");\n+\t\trs.next();\n+\t\tassertEquals(rs.getLong(2), 1641039070000000L);\n+\t\trs.next();\n+\t\tassertEquals(rs.getLong(2), 1641039071000000L);\n+\n+\t\trs.close();\n+\t\tstmt.close();\n+\t\tconn.close();\n+\t}\n \n     public static void test_consecutive_timestamps() throws Exception {\n     \tlong expected = 986860800000L;\n@@ -535,7 +558,7 @@ public static void test_throw_wrong_datatype() throws Exception {\n \t\trs.next();\n \n \t\ttry {\n-\t\t\trs.getTimestamp(2);\n+\t\t\trs.getShort(2);\n \t\t\tfail();\n \t\t} catch (IllegalArgumentException e) {\n \t\t}\ndiff --git a/tools/nodejs/test/test_all_types.test.ts b/tools/nodejs/test/test_all_types.test.ts\nnew file mode 100644\nindex 000000000000..85f07bcb35e1\n--- /dev/null\n+++ b/tools/nodejs/test/test_all_types.test.ts\n@@ -0,0 +1,233 @@\n+import { expect } from \"chai\";\n+import duckdb, { DuckDbError, TableData } from \"..\";\n+\n+function get_all_types(): Promise<string[]> {\n+  return new Promise((resolve, reject) => {\n+    const conn = new duckdb.Database(\":memory:\");\n+    conn.all(\n+      \"describe select * from test_all_types()\",\n+      (error: DuckDbError | null, data: TableData) => {\n+        if (error) reject(error);\n+        resolve(data.map((row) => row.column_name));\n+      }\n+    );\n+  });\n+}\n+\n+function timedelta(obj: { days: number; micros: number; months: number }) {\n+  return obj;\n+}\n+\n+// We replace these values since the extreme ranges are not supported in native-node.\n+const replacement_values: Record<string, string> = {\n+  timestamp:\n+    \"'1990-01-01 00:00:00'::TIMESTAMP, '9999-12-31 23:59:59'::TIMESTAMP, NULL::TIMESTAMP\",\n+  // TODO: fix these, they are currently being returned as strings\n+  //   timestamp_s: \"'1990-01-01 00:00:00'::TIMESTAMP_S\",\n+  //   timestamp_ns: \"'1990-01-01 00:00:00'::TIMESTAMP_NS\",\n+  //   timestamp_ms: \"'1990-01-01 00:00:00'::TIMESTAMP_MS\",\n+  timestamp_tz:\n+    \"'1990-01-01 00:00:00Z'::TIMESTAMPTZ, '9999-12-31 23:59:59.999999Z'::TIMESTAMPTZ, NULL::TIMESTAMPTZ\",\n+  date: \"'1990-01-01'::DATE, '9999-12-31'::DATE, NULL::DATE\",\n+  date_array:\n+    \"[], ['1970-01-01'::DATE, NULL, '0001-01-01'::DATE, '9999-12-31'::DATE,], [NULL::DATE,]\",\n+  timestamp_array:\n+    \"[], ['1970-01-01'::TIMESTAMP, NULL, '0001-01-01'::TIMESTAMP, '9999-12-31 23:59:59.999999'::TIMESTAMP,], [NULL::TIMESTAMP,]\",\n+  timestamptz_array:\n+    \"[], ['1970-01-01 00:00:00Z'::TIMESTAMPTZ, NULL, '0001-01-01 00:00:00Z'::TIMESTAMPTZ, '9999-12-31 23:59:59.999999Z'::TIMESTAMPTZ,], [NULL::TIMESTAMPTZ,]\",\n+};\n+\n+const correct_answer_map: Record<string, any[]> = {\n+  bool: [false, true, null],\n+\n+  tinyint: [-128, 127, null],\n+  smallint: [-32768, 32767, null],\n+\n+  int: [-2147483648, 2147483647, null],\n+  bigint: [BigInt(\"-9223372036854775808\"), BigInt(\"9223372036854775807\"), null],\n+\n+  hugeint: [\n+    BigInt(\"-170141183460469231731687303715884105727\"),\n+    BigInt(\"170141183460469231731687303715884105727\"),\n+    null,\n+  ],\n+\n+  utinyint: [0, 255, null],\n+  usmallint: [0, 65535, null],\n+\n+  uint: [0, 4294967295, null],\n+  ubigint: [BigInt(0), BigInt(\"18446744073709551615\"), null],\n+\n+  time: [\"00:00:00\", \"23:59:59.999999\", null],\n+\n+  float: [-3.4028234663852886e38, 3.4028234663852886e38, null],\n+  double: [-1.7976931348623157e308, 1.7976931348623157e308, null],\n+\n+  dec_4_1: [-999.9, 999.9, null],\n+  dec_9_4: [-99999.9999, 99999.9999, null],\n+  dec_18_6: [\"-999999999999.999999\", \"999999999999.999999\", null],\n+  dec38_10: [\n+    \"-9999999999999999999999999999.9999999999\",\n+    \"9999999999999999999999999999.9999999999\",\n+    null,\n+  ],\n+  uuid: [\n+    \"00000000-0000-0000-0000-000000000001\",\n+    \"ffffffff-ffff-ffff-ffff-ffffffffffff\",\n+    null,\n+  ],\n+  varchar: [\"\ud83e\udd86\ud83e\udd86\ud83e\udd86\ud83e\udd86\ud83e\udd86\ud83e\udd86\", \"goo\\0se\", null],\n+  json: [\"\ud83e\udd86\ud83e\udd86\ud83e\udd86\ud83e\udd86\ud83e\udd86\ud83e\udd86\", \"goose\", null],\n+  blob: [\n+    Buffer.from(\"thisisalongblob\\x00withnullbytes\"),\n+    Buffer.from(\"\\x00\\x00\\x00a\"),\n+    null,\n+  ],\n+  bit: [\"0010001001011100010101011010111\", \"10101\", null],\n+  small_enum: [\"DUCK_DUCK_ENUM\", \"GOOSE\", null],\n+  medium_enum: [\"enum_0\", \"enum_299\", null],\n+  large_enum: [\"enum_0\", \"enum_69999\", null],\n+  date_array: [\n+    [],\n+    [\n+      new Date(1970, 0, 1),\n+      null,\n+      new Date(\"0001-01-01T00:00:00.000Z\"),\n+      new Date(\"9999-12-31T00:00:00.000Z\"),\n+    ],\n+    [null],\n+  ],\n+  timestamp_array: [\n+    [],\n+    [\n+      new Date(1970, 0, 1),\n+      null,\n+      new Date(\"0001-01-01T00:00:00.000Z\"),\n+      new Date(\"9999-12-31T23:59:59.999Z\"),\n+    ],\n+    [null],\n+  ],\n+\n+  timestamptz_array: [\n+    [],\n+    [\n+      new Date(1970, 0, 1),\n+      null,\n+      new Date(\"0001-01-01T00:00:00.000Z\"),\n+      new Date(\"9999-12-31T23:59:59.999Z\"),\n+    ],\n+    [null],\n+  ],\n+\n+  int_array: [[], [42, 999, null, null, -42], null],\n+  varchar_array: [[], [\"\ud83e\udd86\ud83e\udd86\ud83e\udd86\ud83e\udd86\ud83e\udd86\ud83e\udd86\", \"goose\", null, \"\"], null],\n+\n+  double_array: [\n+    [],\n+    [\n+      42.0,\n+      Number.NaN,\n+      Number.POSITIVE_INFINITY,\n+      Number.NEGATIVE_INFINITY,\n+      null,\n+      -42.0,\n+    ],\n+    null,\n+  ],\n+\n+  nested_int_array: [\n+    [],\n+    [[], [42, 999, null, null, -42], null, [], [42, 999, null, null, -42]],\n+    null,\n+  ],\n+  struct: [{ a: null, b: null }, { a: 42, b: \"\ud83e\udd86\ud83e\udd86\ud83e\udd86\ud83e\udd86\ud83e\udd86\ud83e\udd86\" }, null],\n+\n+  struct_of_arrays: [\n+    { a: null, b: null },\n+    {\n+      a: [42, 999, null, null, -42],\n+      b: [\"\ud83e\udd86\ud83e\udd86\ud83e\udd86\ud83e\udd86\ud83e\udd86\ud83e\udd86\", \"goose\", null, \"\"],\n+    },\n+    null,\n+  ],\n+\n+  array_of_structs: [\n+    [],\n+    [{ a: null, b: null }, { a: 42, b: \"\ud83e\udd86\ud83e\udd86\ud83e\udd86\ud83e\udd86\ud83e\udd86\ud83e\udd86\" }, null],\n+    null,\n+  ],\n+  map: [\"{}\", \"{key1=\ud83e\udd86\ud83e\udd86\ud83e\udd86\ud83e\udd86\ud83e\udd86\ud83e\udd86, key2=goose}\", null],\n+\n+  time_tz: [\"00:00:00+00\", \"23:59:59.999999+00\", null],\n+  interval: [\n+    timedelta({\n+      days: 0,\n+      months: 0,\n+      micros: 0,\n+    }),\n+    timedelta({ days: 999, months: 999, micros: 999999999 }),\n+    null,\n+  ],\n+\n+  timestamp: [\n+    new Date(\"1990-01-01T00:00\"),\n+    new Date(\"9999-12-31T23:59:59.000Z\"),\n+    null,\n+  ],\n+  date: [new Date(\"1990-01-01\"), new Date(\"9999-12-31\"), null],\n+  timestamp_s: [\"290309-12-22 (BC) 00:00:00\", \"294247-01-10 04:00:54\", null],\n+\n+  timestamp_ns: [\n+    \"1677-09-21 00:12:43.145225\",\n+    \"2262-04-11 23:47:16.854775\",\n+    null,\n+  ],\n+  timestamp_ms: [\n+    \"290309-12-22 (BC) 00:00:00\",\n+    \"294247-01-10 04:00:54.775\",\n+    null,\n+  ],\n+  timestamp_tz: [\n+    new Date(\"1990-01-01T00:00:00.000Z\"),\n+    new Date(\"9999-12-31T23:59:59.999Z\"),\n+    null,\n+  ],\n+};\n+\n+const suite = describe(\"test_all_types\", () => {\n+  before(async function () {\n+    const all_types = await get_all_types();\n+\n+    for (const cur_type of all_types) {\n+      // FIXME: these currently have too high a precision to be tested\n+      if ([\"dec_18_6\", \"dec38_10\"].includes(cur_type)) continue;\n+\n+      suite.addTest(\n+        it(cur_type, async () => {\n+          const conn = new duckdb.Database(\":memory:\");\n+\n+          let query: string;\n+          if (cur_type in replacement_values) {\n+            query = `select UNNEST([${replacement_values[cur_type]}]) AS ${cur_type}`;\n+          } else {\n+            query = `select \"${cur_type}\" from test_all_types()`;\n+          }\n+\n+          let result = await new Promise<any[]>((resolve, reject) =>\n+            conn.all(query, (err: DuckDbError | null, data: TableData) =>\n+              err ? reject(err) : resolve(data)\n+            )\n+          );\n+\n+          result = result.map((row) => row[cur_type]); // pluck values\n+\n+          const correct_result = correct_answer_map[cur_type];\n+\n+          expect(result).deep.eq(correct_result);\n+        })\n+      );\n+    }\n+  });\n+\n+  it(\"dummy\", () => {});\n+});\ndiff --git a/tools/pythonpkg/tests/fast/api/test_connection_interrupt.py b/tools/pythonpkg/tests/fast/api/test_connection_interrupt.py\nnew file mode 100644\nindex 000000000000..7685a77ba66d\n--- /dev/null\n+++ b/tools/pythonpkg/tests/fast/api/test_connection_interrupt.py\n@@ -0,0 +1,26 @@\n+import threading\n+import time\n+\n+import duckdb\n+import pytest\n+\n+\n+class TestConnectionInterrupt(object):\n+    def test_connection_interrupt(self):\n+        conn = duckdb.connect()\n+\n+        def interrupt():\n+            # Wait for query to start running before interrupting\n+            time.sleep(0.1)\n+            conn.interrupt()\n+\n+        thread = threading.Thread(target=interrupt)\n+        thread.start()\n+        with pytest.raises(duckdb.InterruptException):\n+            conn.execute(\"select count(*) from range(1000000000)\").fetchall()\n+\n+    def test_interrupt_closed_connection(self):\n+        conn = duckdb.connect()\n+        conn.close()\n+        with pytest.raises(duckdb.ConnectionException):\n+            conn.interrupt()\ndiff --git a/tools/pythonpkg/tests/fast/api/test_duckdb_connection.py b/tools/pythonpkg/tests/fast/api/test_duckdb_connection.py\nindex acad3bc1e38b..b3b63cc9854d 100644\n--- a/tools/pythonpkg/tests/fast/api/test_duckdb_connection.py\n+++ b/tools/pythonpkg/tests/fast/api/test_duckdb_connection.py\n@@ -257,6 +257,9 @@ def test_description(self):\n     def test_close(self):\n         assert None != duckdb.close\n \n+    def test_interrupt(self):\n+        assert None != duckdb.interrupt\n+\n     def test_wrap_coverage(self):\n         con = duckdb.default_connection\n         assert str(con.__class__) == \"<class 'duckdb.DuckDBPyConnection'>\"\ndiff --git a/tools/pythonpkg/tests/fast/arrow/test_arrow_fetch_recordbatch.py b/tools/pythonpkg/tests/fast/arrow/test_arrow_fetch_recordbatch.py\nindex fec4719fc301..d4ea64c2dece 100644\n--- a/tools/pythonpkg/tests/fast/arrow/test_arrow_fetch_recordbatch.py\n+++ b/tools/pythonpkg/tests/fast/arrow/test_arrow_fetch_recordbatch.py\n@@ -248,6 +248,23 @@ def test_record_batch_query_error(self):\n         with pytest.raises(OSError, match='Conversion Error'):\n             record_batch_reader.read_next_batch()\n \n+    def test_many_list_batches(self):\n+        conn = duckdb.connect()\n+\n+        conn.execute(\"\"\"\n+            create or replace table tbl as select * from (select {'a': [5,4,3,2,1]}), range(10000000)\n+        \"\"\")\n+\n+        query = \"SELECT * FROM tbl\"\n+        chunk_size = 1_000_000\n+\n+        # Because this produces multiple chunks, this caused a segfault before\n+        # because we changed some data in the first batch fetch\n+        batch_iter = conn.execute(query).fetch_record_batch(chunk_size)\n+        for batch in batch_iter:\n+            del batch\n+\n+\n     def test_many_chunk_sizes(self):\n         object_size = 1000000\n         duckdb_cursor = duckdb.connect()\n",
  "problem_statement": "fts extension: BOOLEAN params for create_fts_index only accepts INTEGERs\n### What happens?\n\nThe documentation for the `create_fts_index` PRAGMA statement indicates that its parameters `strip_accents`, `lower`, and `overwrite` take `BOOLEAN` values, however in practice, they currently only accept `INTEGER`s.\n\n### To Reproduce\n\nThis works ok:\r\n\r\n    PRAGMA create_fts_index('my_table', 'col_id', 'col', overwrite=1);\r\n\r\nWhereas this does not:\r\n\r\n    PRAGMA create_fts_index('my_table', 'col_id', 'col', overwrite=true);\r\n\r\nResulting in this error: `Error: Parser Error: Named parameter requires a constant on the RHS`\n\n### OS:\n\nUbuntu\n\n### DuckDB Version:\n\nv0.8.2-dev87 8a17511028\n\n### DuckDB Client:\n\nCLI\n\n### Full Name:\n\nNed Letcher\n\n### Affiliation:\n\nThoughtworks\n\n### Have you tried this on the latest `master` branch?\n\n- [X] I agree\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] I agree\n",
  "hints_text": "",
  "created_at": "2023-07-04T06:01:44Z"
}