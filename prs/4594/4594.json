{
  "repo": "duckdb/duckdb",
  "pull_number": 4594,
  "instance_id": "duckdb__duckdb-4594",
  "issue_numbers": [
    "4590"
  ],
  "base_commit": "c281cfef354bbebbffa4e774179da7fee34828b3",
  "patch": "diff --git a/src/common/types/vector.cpp b/src/common/types/vector.cpp\nindex 883232d7f365..78372a78bf9f 100644\n--- a/src/common/types/vector.cpp\n+++ b/src/common/types/vector.cpp\n@@ -1464,7 +1464,7 @@ vector<idx_t> ListVector::Search(Vector &list, const Value &key, idx_t row) {\n \tvector<idx_t> offsets;\n \n \tauto &list_vector = ListVector::GetEntry(list);\n-\tauto &entry = ((list_entry_t *)list.GetData())[row];\n+\tauto &entry = ListVector::GetData(list)[row];\n \n \tswitch (list_vector.GetType().InternalType()) {\n \tcase PhysicalType::BOOL:\ndiff --git a/src/function/scalar/map/map_extract.cpp b/src/function/scalar/map/map_extract.cpp\nindex 305d0edb8f2b..044cb85de70d 100644\n--- a/src/function/scalar/map/map_extract.cpp\n+++ b/src/function/scalar/map/map_extract.cpp\n@@ -15,7 +15,7 @@ void FillResult(Value &values, Vector &result, idx_t row) {\n \t}\n \n \t//! now set the pointer\n-\tauto &entry = ((list_entry_t *)result.GetData())[row];\n+\tauto &entry = ListVector::GetData(result)[row];\n \tentry.length = list_values.size();\n \tentry.offset = current_offset;\n }\n@@ -25,19 +25,29 @@ static void MapExtractFunction(DataChunk &args, ExpressionState &state, Vector &\n \tD_ASSERT(args.data[0].GetType().id() == LogicalTypeId::MAP);\n \tresult.SetVectorType(VectorType::FLAT_VECTOR);\n \n+\tif (args.data[1].GetType().id() == LogicalTypeId::SQLNULL) {\n+\t\t//! We don't need to look through the map if the 'key' to look for is NULL\n+\t\t//! Because maps can't have NULL as key\n+\t\tListVector::SetListSize(result, 0);\n+\t\tresult.SetVectorType(VectorType::CONSTANT_VECTOR);\n+\t\tauto list_data = ConstantVector::GetData<list_entry_t>(result);\n+\t\tlist_data->offset = 0;\n+\t\tlist_data->length = 0;\n+\t\tresult.Verify(args.size());\n+\t\treturn;\n+\t}\n+\n \tauto &map = args.data[0];\n \tauto &key = args.data[1];\n \n-\tauto key_value = key.GetValue(0);\n \tUnifiedVectorFormat offset_data;\n \n \tauto &children = StructVector::GetEntries(map);\n+\n \tchildren[0]->ToUnifiedFormat(args.size(), offset_data);\n-\tauto &key_type = ListType::GetChildType(children[0]->GetType());\n-\tif (key_type != LogicalTypeId::SQLNULL) {\n-\t\tkey_value = key_value.CastAs(key_type);\n-\t}\n \tfor (idx_t row = 0; row < args.size(); row++) {\n+\t\tidx_t row_index = offset_data.sel->get_index(row);\n+\t\tauto key_value = key.GetValue(row_index);\n \t\tauto offsets = ListVector::Search(*children[0], key_value, offset_data.sel->get_index(row));\n \t\tauto values = ListVector::GetValuesFromOffsets(*children[1], offsets);\n \t\tFillResult(values, result, row);\n@@ -58,11 +68,14 @@ static unique_ptr<FunctionData> MapExtractBind(ClientContext &context, ScalarFun\n \tif (arguments[0]->return_type.id() != LogicalTypeId::MAP) {\n \t\tthrow BinderException(\"MAP_EXTRACT can only operate on MAPs\");\n \t}\n-\tauto &child_types = StructType::GetChildTypes(arguments[0]->return_type);\n-\tauto &value_type = ListType::GetChildType(child_types[1].second);\n+\tauto &value_type = MapType::ValueType(arguments[0]->return_type);\n \n \t//! Here we have to construct the List Type that will be returned\n \tbound_function.return_type = LogicalType::LIST(value_type);\n+\tauto key_type = MapType::KeyType(arguments[0]->return_type);\n+\tif (key_type.id() != LogicalTypeId::SQLNULL && arguments[1]->return_type.id() != LogicalTypeId::SQLNULL) {\n+\t\tbound_function.arguments[1] = MapType::KeyType(arguments[0]->return_type);\n+\t}\n \treturn make_unique<VariableReturnBindData>(value_type);\n }\n \n",
  "test_patch": "diff --git a/test/sql/types/nested/map/test_map_subscript.test b/test/sql/types/nested/map/test_map_subscript.test\nindex a9b602ac4e56..be6dde913ee0 100644\n--- a/test/sql/types/nested/map/test_map_subscript.test\n+++ b/test/sql/types/nested/map/test_map_subscript.test\n@@ -195,5 +195,3 @@ from (SELECT a%4 as grp, list(a) as lsta, list(a) as lstb FROM range(7) tbl(a) g\n 1\t{1=1, 5=5}\t[NULL]\n 2\t{2=2, 6=6}\t[]\n 3\t{3=3}\t[]\n-\n-\ndiff --git a/test/sql/types/nested/map/test_map_subscript_from_column.test b/test/sql/types/nested/map/test_map_subscript_from_column.test\nnew file mode 100644\nindex 000000000000..1c1057ab7875\n--- /dev/null\n+++ b/test/sql/types/nested/map/test_map_subscript_from_column.test\n@@ -0,0 +1,44 @@\n+# name: test/sql/types/nested/map/test_map_subscript_from_column.test\n+# group: [map]\n+\n+statement ok\n+create table t1 (\n+\tid int,\n+\tk integer[],\n+\tv decimal[]\n+);\n+\n+statement ok\n+insert into t1 \n+SELECT * FROM (VALUES\n+\t(0, [1,2,3,4], [1.0, 2.0, 3.0, 4.0]),\n+\t(1, [5,6,7,8], [5.0, 6.0, 7.0, 8.0]),\n+\t(2, [9,10,11,12], [9.0, 10.0, 11.0, 12.0]),\n+\t(3, [13,14,15,16], [13.0, 14.0, 15.0, 16.0]),\n+\t(4, [17,18,19,20], [17.0, 18.0, 19.0, 20.0]),\n+\t(5, [21,22,23,24], [21.0, 22.0, 23.0, 24.0]),\n+\t(6, [25,26,27,28], [25.0, 26.0, 27.0, 28.0]),\n+\t(7, [29,30,31,32], [29.0, 30.0, 31.0, 32.0]),\n+\t(8, [33,34,35,36], [33.0, 34.0, 35.0, 36.0]),\n+\t(9, [37,38,39,40], [37.0, 38.0, 39.0, 40.0])\n+)\n+\n+statement ok\n+create table t2 (id int, v_map map(integer, decimal), k integer[]);\n+\n+statement ok\n+insert into t2 select id, map(k,v), k from t1;\n+\n+query I\n+select v_map[array_sort(k, 'DESC', 'NULLS LAST')[1]] from t2 limit 10;\n+----\n+[4.000]\n+[8.000]\n+[12.000]\n+[16.000]\n+[20.000]\n+[24.000]\n+[28.000]\n+[32.000]\n+[36.000]\n+[40.000]\n",
  "problem_statement": "map[entry] used in multi-row case, but return Incorrect results\n### What happens?\n\nmap[entry] used in multi-row case, but return Incorrect results, some map[entry] no results.\n\n### To Reproduce\n\n```\r\ncreate table t1 (id int, k float8[], v numeric[]);\r\n\r\ninsert into t1 \r\nselect \r\ngenerate_series, \r\n[(random()*100)::float8, (random()*100)::float8, (random()*100)::float8, (random()*100)::float8], \r\n[(random()*100)::numeric, (random()*100)::numeric, (random()*100)::numeric, (random()*100)::numeric]\r\nfrom generate_series(1,1000);\r\n\r\n\r\nselect * from t1 limit 10;\r\n\u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 id \u2502                                        k                                        \u2502                v                 \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 1  \u2502 [11.16937385200741, 95.8525169631123, 14.96787912095149, 91.43671728471217]     \u2502 [92.021, 35.289, 39.456, 87.582] \u2502\r\n\u2502 2  \u2502 [17.423948183987278, 84.25555633945753, 4.3259101929901895, 16.98639854252953]  \u2502 [93.521, 72.287, 35.128, 90.006] \u2502\r\n\u2502 3  \u2502 [92.2745976346253, 95.69644112971064, 62.07402224235098, 73.28854870826204]     \u2502 [78.309, 66.085, 4.861, 91.508]  \u2502\r\n\u2502 4  \u2502 [86.89964604258995, 98.16639474550412, 91.14385554360781, 34.335507041387146]   \u2502 [49.390, 15.129, 50.420, 40.268] \u2502\r\n\u2502 5  \u2502 [19.39417378031513, 79.37516113262977, 11.292100746951089, 38.22825377300108]   \u2502 [84.122, 82.529, 13.576, 58.504] \u2502\r\n\u2502 6  \u2502 [90.70183636869812, 40.517623149910385, 26.8095445183128, 7.944494697252404]    \u2502 [26.349, 29.863, 84.530, 43.415] \u2502\r\n\u2502 7  \u2502 [54.61782919117665, 65.90019005022482, 61.10493819255031, 49.45131010595972]    \u2502 [64.396, 74.232, 14.787, 32.315] \u2502\r\n\u2502 8  \u2502 [2.3417069814963516, 88.03378650639992, 12.379745303741597, 18.882166458964853] \u2502 [79.234, 43.398, 54.175, 47.952] \u2502\r\n\u2502 9  \u2502 [22.776224842010116, 18.045670007831806, 74.94138262116849, 35.122861558367234] \u2502 [7.719, 69.285, 85.415, 11.131]  \u2502\r\n\u2502 10 \u2502 [56.16691286120725, 2.420740877841772, 77.54608254822578, 95.03478701110808]    \u2502 [68.135, 62.069, 89.292, 21.453] \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\ncreate table t2 (id int, v_map map(float8, numeric), k float8[]); \r\ninsert into t2 select id, map(k,v), k from t1;\r\n\r\n\r\nselect * from t2 limit 10;\r\n\u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 id \u2502                                       v_map                                        \u2502                                        k                                        \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 1  \u2502 {11.16937385200741=92.021, 95.8525169631123=35.289, 14.96787912095149=39.456, 9... \u2502 [11.16937385200741, 95.8525169631123, 14.96787912095149, 91.43671728471217]     \u2502\r\n\u2502 2  \u2502 {17.423948183987278=93.521, 84.25555633945753=72.287, 4.3259101929901895=35.128... \u2502 [17.423948183987278, 84.25555633945753, 4.3259101929901895, 16.98639854252953]  \u2502\r\n\u2502 3  \u2502 {92.2745976346253=78.309, 95.69644112971064=66.085, 62.07402224235098=4.861, 73... \u2502 [92.2745976346253, 95.69644112971064, 62.07402224235098, 73.28854870826204]     \u2502\r\n\u2502 4  \u2502 {86.89964604258995=49.390, 98.16639474550412=15.129, 91.14385554360781=50.420, ... \u2502 [86.89964604258995, 98.16639474550412, 91.14385554360781, 34.335507041387146]   \u2502\r\n\u2502 5  \u2502 {19.39417378031513=84.122, 79.37516113262977=82.529, 11.292100746951089=13.576,... \u2502 [19.39417378031513, 79.37516113262977, 11.292100746951089, 38.22825377300108]   \u2502\r\n\u2502 6  \u2502 {90.70183636869812=26.349, 40.517623149910385=29.863, 26.8095445183128=84.530, ... \u2502 [90.70183636869812, 40.517623149910385, 26.8095445183128, 7.944494697252404]    \u2502\r\n\u2502 7  \u2502 {54.61782919117665=64.396, 65.90019005022482=74.232, 61.10493819255031=14.787, ... \u2502 [54.61782919117665, 65.90019005022482, 61.10493819255031, 49.45131010595972]    \u2502\r\n\u2502 8  \u2502 {2.3417069814963516=79.234, 88.03378650639992=43.398, 12.379745303741597=54.175... \u2502 [2.3417069814963516, 88.03378650639992, 12.379745303741597, 18.882166458964853] \u2502\r\n\u2502 9  \u2502 {22.776224842010116=7.719, 18.045670007831806=69.285, 74.94138262116849=85.415,... \u2502 [22.776224842010116, 18.045670007831806, 74.94138262116849, 35.122861558367234] \u2502\r\n\u2502 10 \u2502 {56.16691286120725=68.135, 2.420740877841772=62.069, 77.54608254822578=89.292, ... \u2502 [56.16691286120725, 2.420740877841772, 77.54608254822578, 95.03478701110808]    \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n\r\n\r\nselect v_map[array_sort(k, 'DESC', 'NULLS LAST')[1]] from t2 limit 10;\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 v_map[array_sort(k, 'DESC', 'NULLS LAST')[1]] \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 [35.289]                                      \u2502\r\n\u2502 []                                            \u2502\r\n\u2502 []                                            \u2502\r\n\u2502 []                                            \u2502\r\n\u2502 []                                            \u2502\r\n\u2502 []                                            \u2502\r\n\u2502 []                                            \u2502\r\n\u2502 []                                            \u2502\r\n\u2502 []                                            \u2502\r\n\u2502 []                                            \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n```\n\n### OS:\n\nMacOS\n\n### DuckDB Version:\n\n4.0.1-dev commit: 0d2d7930d2789405a0d07a15e37485fe70faee3e\n\n### DuckDB Client:\n\nCLI\n\n### Full Name:\n\nDigoal Zhou\n\n### Affiliation:\n\nAlibaba\n\n### Have you tried this on the latest `master` branch?\n\n- [X] I agree\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] I agree\n",
  "hints_text": "Thijs, can you have a look please?\nAh it's always using index 0 of the key argument vector, instead of using the key of the current row\r\nWill push a fix when I translate this test to a reproducible example (random + the map unique key constraint is a recipe for random CI failures)",
  "created_at": "2022-09-02T18:32:05Z"
}