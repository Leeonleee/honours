{
  "repo": "duckdb/duckdb",
  "pull_number": 10896,
  "instance_id": "duckdb__duckdb-10896",
  "issue_numbers": [
    "10889",
    "10889"
  ],
  "base_commit": "a33cd7e63558e655eb2b20349e9c92175b500472",
  "patch": "diff --git a/src/include/duckdb/storage/table/column_segment.hpp b/src/include/duckdb/storage/table/column_segment.hpp\nindex 6ae03d4f3aa9..fa11971603a2 100644\n--- a/src/include/duckdb/storage/table/column_segment.hpp\n+++ b/src/include/duckdb/storage/table/column_segment.hpp\n@@ -68,8 +68,8 @@ class ColumnSegment : public SegmentBase<ColumnSegment> {\n \t//! Fetch a value of the specific row id and append it to the result\n \tvoid FetchRow(ColumnFetchState &state, row_t row_id, Vector &result, idx_t result_idx);\n \n-\tstatic idx_t FilterSelection(SelectionVector &sel, Vector &result, const TableFilter &filter,\n-\t                             idx_t &approved_tuple_count, ValidityMask &mask);\n+\tstatic idx_t FilterSelection(SelectionVector &sel, Vector &vector, UnifiedVectorFormat &vdata,\n+\t                             const TableFilter &filter, idx_t scan_count, idx_t &approved_tuple_count);\n \n \t//! Skip a scan forward to the row_index specified in the scan state\n \tvoid Skip(ColumnScanState &state);\ndiff --git a/src/storage/table/column_data.cpp b/src/storage/table/column_data.cpp\nindex 550408b8c77b..605258876be6 100644\n--- a/src/storage/table/column_data.cpp\n+++ b/src/storage/table/column_data.cpp\n@@ -210,8 +210,10 @@ idx_t ColumnData::ScanCount(ColumnScanState &state, Vector &result, idx_t count)\n void ColumnData::Select(TransactionData transaction, idx_t vector_index, ColumnScanState &state, Vector &result,\n                         SelectionVector &sel, idx_t &count, const TableFilter &filter) {\n \tidx_t scan_count = Scan(transaction, vector_index, state, result);\n-\tresult.Flatten(scan_count);\n-\tColumnSegment::FilterSelection(sel, result, filter, count, FlatVector::Validity(result));\n+\n+\tUnifiedVectorFormat vdata;\n+\tresult.ToUnifiedFormat(scan_count, vdata);\n+\tColumnSegment::FilterSelection(sel, result, vdata, filter, scan_count, count);\n }\n \n void ColumnData::FilterScan(TransactionData transaction, idx_t vector_index, ColumnScanState &state, Vector &result,\ndiff --git a/src/storage/table/column_segment.cpp b/src/storage/table/column_segment.cpp\nindex c0f67a0ca8e6..175791b612a4 100644\n--- a/src/storage/table/column_segment.cpp\n+++ b/src/storage/table/column_segment.cpp\n@@ -244,12 +244,15 @@ void ColumnSegment::CommitDropSegment() {\n // Filter Selection\n //===--------------------------------------------------------------------===//\n template <class T, class OP, bool HAS_NULL>\n-static idx_t TemplatedFilterSelection(T *vec, T predicate, SelectionVector &sel, idx_t approved_tuple_count,\n-                                      ValidityMask &mask, SelectionVector &result_sel) {\n+static idx_t TemplatedFilterSelection(UnifiedVectorFormat &vdata, T predicate, SelectionVector &sel,\n+                                      idx_t approved_tuple_count, SelectionVector &result_sel) {\n+\tauto &mask = vdata.validity;\n+\tauto vec = UnifiedVectorFormat::GetData<T>(vdata);\n \tidx_t result_count = 0;\n \tfor (idx_t i = 0; i < approved_tuple_count; i++) {\n \t\tauto idx = sel.get_index(i);\n-\t\tif ((!HAS_NULL || mask.RowIsValid(idx)) && OP::Operation(vec[idx], predicate)) {\n+\t\tauto vector_idx = vdata.sel->get_index(idx);\n+\t\tif ((!HAS_NULL || mask.RowIsValid(vector_idx)) && OP::Operation(vec[vector_idx], predicate)) {\n \t\t\tresult_sel.set_index(result_count++, idx);\n \t\t}\n \t}\n@@ -257,68 +260,69 @@ static idx_t TemplatedFilterSelection(T *vec, T predicate, SelectionVector &sel,\n }\n \n template <class T>\n-static void FilterSelectionSwitch(T *vec, T predicate, SelectionVector &sel, idx_t &approved_tuple_count,\n-                                  ExpressionType comparison_type, ValidityMask &mask) {\n+static void FilterSelectionSwitch(UnifiedVectorFormat &vdata, T predicate, SelectionVector &sel,\n+                                  idx_t &approved_tuple_count, ExpressionType comparison_type) {\n \tSelectionVector new_sel(approved_tuple_count);\n+\tauto &mask = vdata.validity;\n \t// the inplace loops take the result as the last parameter\n \tswitch (comparison_type) {\n \tcase ExpressionType::COMPARE_EQUAL: {\n \t\tif (mask.AllValid()) {\n \t\t\tapproved_tuple_count =\n-\t\t\t    TemplatedFilterSelection<T, Equals, false>(vec, predicate, sel, approved_tuple_count, mask, new_sel);\n+\t\t\t    TemplatedFilterSelection<T, Equals, false>(vdata, predicate, sel, approved_tuple_count, new_sel);\n \t\t} else {\n \t\t\tapproved_tuple_count =\n-\t\t\t    TemplatedFilterSelection<T, Equals, true>(vec, predicate, sel, approved_tuple_count, mask, new_sel);\n+\t\t\t    TemplatedFilterSelection<T, Equals, true>(vdata, predicate, sel, approved_tuple_count, new_sel);\n \t\t}\n \t\tbreak;\n \t}\n \tcase ExpressionType::COMPARE_NOTEQUAL: {\n \t\tif (mask.AllValid()) {\n \t\t\tapproved_tuple_count =\n-\t\t\t    TemplatedFilterSelection<T, NotEquals, false>(vec, predicate, sel, approved_tuple_count, mask, new_sel);\n+\t\t\t    TemplatedFilterSelection<T, NotEquals, false>(vdata, predicate, sel, approved_tuple_count, new_sel);\n \t\t} else {\n \t\t\tapproved_tuple_count =\n-\t\t\t    TemplatedFilterSelection<T, NotEquals, true>(vec, predicate, sel, approved_tuple_count, mask, new_sel);\n+\t\t\t    TemplatedFilterSelection<T, NotEquals, true>(vdata, predicate, sel, approved_tuple_count, new_sel);\n \t\t}\n \t\tbreak;\n \t}\n \tcase ExpressionType::COMPARE_LESSTHAN: {\n \t\tif (mask.AllValid()) {\n \t\t\tapproved_tuple_count =\n-\t\t\t    TemplatedFilterSelection<T, LessThan, false>(vec, predicate, sel, approved_tuple_count, mask, new_sel);\n+\t\t\t    TemplatedFilterSelection<T, LessThan, false>(vdata, predicate, sel, approved_tuple_count, new_sel);\n \t\t} else {\n \t\t\tapproved_tuple_count =\n-\t\t\t    TemplatedFilterSelection<T, LessThan, true>(vec, predicate, sel, approved_tuple_count, mask, new_sel);\n+\t\t\t    TemplatedFilterSelection<T, LessThan, true>(vdata, predicate, sel, approved_tuple_count, new_sel);\n \t\t}\n \t\tbreak;\n \t}\n \tcase ExpressionType::COMPARE_GREATERTHAN: {\n \t\tif (mask.AllValid()) {\n-\t\t\tapproved_tuple_count = TemplatedFilterSelection<T, GreaterThan, false>(vec, predicate, sel,\n-\t\t\t                                                                       approved_tuple_count, mask, new_sel);\n+\t\t\tapproved_tuple_count =\n+\t\t\t    TemplatedFilterSelection<T, GreaterThan, false>(vdata, predicate, sel, approved_tuple_count, new_sel);\n \t\t} else {\n-\t\t\tapproved_tuple_count = TemplatedFilterSelection<T, GreaterThan, true>(vec, predicate, sel,\n-\t\t\t                                                                      approved_tuple_count, mask, new_sel);\n+\t\t\tapproved_tuple_count =\n+\t\t\t    TemplatedFilterSelection<T, GreaterThan, true>(vdata, predicate, sel, approved_tuple_count, new_sel);\n \t\t}\n \t\tbreak;\n \t}\n \tcase ExpressionType::COMPARE_LESSTHANOREQUALTO: {\n \t\tif (mask.AllValid()) {\n-\t\t\tapproved_tuple_count = TemplatedFilterSelection<T, LessThanEquals, false>(\n-\t\t\t    vec, predicate, sel, approved_tuple_count, mask, new_sel);\n+\t\t\tapproved_tuple_count = TemplatedFilterSelection<T, LessThanEquals, false>(vdata, predicate, sel,\n+\t\t\t                                                                          approved_tuple_count, new_sel);\n \t\t} else {\n-\t\t\tapproved_tuple_count = TemplatedFilterSelection<T, LessThanEquals, true>(\n-\t\t\t    vec, predicate, sel, approved_tuple_count, mask, new_sel);\n+\t\t\tapproved_tuple_count =\n+\t\t\t    TemplatedFilterSelection<T, LessThanEquals, true>(vdata, predicate, sel, approved_tuple_count, new_sel);\n \t\t}\n \t\tbreak;\n \t}\n \tcase ExpressionType::COMPARE_GREATERTHANOREQUALTO: {\n \t\tif (mask.AllValid()) {\n-\t\t\tapproved_tuple_count = TemplatedFilterSelection<T, GreaterThanEquals, false>(\n-\t\t\t    vec, predicate, sel, approved_tuple_count, mask, new_sel);\n+\t\t\tapproved_tuple_count = TemplatedFilterSelection<T, GreaterThanEquals, false>(vdata, predicate, sel,\n+\t\t\t                                                                             approved_tuple_count, new_sel);\n \t\t} else {\n-\t\t\tapproved_tuple_count = TemplatedFilterSelection<T, GreaterThanEquals, true>(\n-\t\t\t    vec, predicate, sel, approved_tuple_count, mask, new_sel);\n+\t\t\tapproved_tuple_count = TemplatedFilterSelection<T, GreaterThanEquals, true>(vdata, predicate, sel,\n+\t\t\t                                                                            approved_tuple_count, new_sel);\n \t\t}\n \t\tbreak;\n \t}\n@@ -329,7 +333,8 @@ static void FilterSelectionSwitch(T *vec, T predicate, SelectionVector &sel, idx\n }\n \n template <bool IS_NULL>\n-static idx_t TemplatedNullSelection(SelectionVector &sel, idx_t &approved_tuple_count, ValidityMask &mask) {\n+static idx_t TemplatedNullSelection(UnifiedVectorFormat &vdata, SelectionVector &sel, idx_t &approved_tuple_count) {\n+\tauto &mask = vdata.validity;\n \tif (mask.AllValid()) {\n \t\t// no NULL values\n \t\tif (IS_NULL) {\n@@ -343,7 +348,8 @@ static idx_t TemplatedNullSelection(SelectionVector &sel, idx_t &approved_tuple_\n \t\tidx_t result_count = 0;\n \t\tfor (idx_t i = 0; i < approved_tuple_count; i++) {\n \t\t\tauto idx = sel.get_index(i);\n-\t\t\tif (mask.RowIsValid(idx) != IS_NULL) {\n+\t\t\tauto vector_idx = vdata.sel->get_index(idx);\n+\t\t\tif (mask.RowIsValid(vector_idx) != IS_NULL) {\n \t\t\t\tresult_sel.set_index(result_count++, idx);\n \t\t\t}\n \t\t}\n@@ -353,8 +359,8 @@ static idx_t TemplatedNullSelection(SelectionVector &sel, idx_t &approved_tuple_\n \t}\n }\n \n-idx_t ColumnSegment::FilterSelection(SelectionVector &sel, Vector &result, const TableFilter &filter,\n-                                     idx_t &approved_tuple_count, ValidityMask &mask) {\n+idx_t ColumnSegment::FilterSelection(SelectionVector &sel, Vector &vector, UnifiedVectorFormat &vdata,\n+                                     const TableFilter &filter, idx_t scan_count, idx_t &approved_tuple_count) {\n \tswitch (filter.filter_type) {\n \tcase TableFilterType::CONJUNCTION_OR: {\n \t\t// similar to the CONJUNCTION_AND, but we need to take care of the SelectionVectors (OR all of them)\n@@ -365,7 +371,7 @@ idx_t ColumnSegment::FilterSelection(SelectionVector &sel, Vector &result, const\n \t\t\tSelectionVector temp_sel;\n \t\t\ttemp_sel.Initialize(sel);\n \t\t\tidx_t temp_tuple_count = approved_tuple_count;\n-\t\t\tidx_t temp_count = FilterSelection(temp_sel, result, *child_filter, temp_tuple_count, mask);\n+\t\t\tidx_t temp_count = FilterSelection(temp_sel, vector, vdata, *child_filter, scan_count, temp_tuple_count);\n \t\t\t// tuples passed, move them into the actual result vector\n \t\t\tfor (idx_t i = 0; i < temp_count; i++) {\n \t\t\t\tauto new_idx = temp_sel.get_index(i);\n@@ -388,127 +394,111 @@ idx_t ColumnSegment::FilterSelection(SelectionVector &sel, Vector &result, const\n \tcase TableFilterType::CONJUNCTION_AND: {\n \t\tauto &conjunction_and = filter.Cast<ConjunctionAndFilter>();\n \t\tfor (auto &child_filter : conjunction_and.child_filters) {\n-\t\t\tFilterSelection(sel, result, *child_filter, approved_tuple_count, mask);\n+\t\t\tFilterSelection(sel, vector, vdata, *child_filter, scan_count, approved_tuple_count);\n \t\t}\n \t\treturn approved_tuple_count;\n \t}\n \tcase TableFilterType::CONSTANT_COMPARISON: {\n \t\tauto &constant_filter = filter.Cast<ConstantFilter>();\n \t\t// the inplace loops take the result as the last parameter\n-\t\tswitch (result.GetType().InternalType()) {\n+\t\tswitch (vector.GetType().InternalType()) {\n \t\tcase PhysicalType::UINT8: {\n-\t\t\tauto result_flat = FlatVector::GetData<uint8_t>(result);\n \t\t\tauto predicate = UTinyIntValue::Get(constant_filter.constant);\n-\t\t\tFilterSelectionSwitch<uint8_t>(result_flat, predicate, sel, approved_tuple_count,\n-\t\t\t                               constant_filter.comparison_type, mask);\n+\t\t\tFilterSelectionSwitch<uint8_t>(vdata, predicate, sel, approved_tuple_count,\n+\t\t\t                               constant_filter.comparison_type);\n \t\t\tbreak;\n \t\t}\n \t\tcase PhysicalType::UINT16: {\n-\t\t\tauto result_flat = FlatVector::GetData<uint16_t>(result);\n \t\t\tauto predicate = USmallIntValue::Get(constant_filter.constant);\n-\t\t\tFilterSelectionSwitch<uint16_t>(result_flat, predicate, sel, approved_tuple_count,\n-\t\t\t                                constant_filter.comparison_type, mask);\n+\t\t\tFilterSelectionSwitch<uint16_t>(vdata, predicate, sel, approved_tuple_count,\n+\t\t\t                                constant_filter.comparison_type);\n \t\t\tbreak;\n \t\t}\n \t\tcase PhysicalType::UINT32: {\n-\t\t\tauto result_flat = FlatVector::GetData<uint32_t>(result);\n \t\t\tauto predicate = UIntegerValue::Get(constant_filter.constant);\n-\t\t\tFilterSelectionSwitch<uint32_t>(result_flat, predicate, sel, approved_tuple_count,\n-\t\t\t                                constant_filter.comparison_type, mask);\n+\t\t\tFilterSelectionSwitch<uint32_t>(vdata, predicate, sel, approved_tuple_count,\n+\t\t\t                                constant_filter.comparison_type);\n \t\t\tbreak;\n \t\t}\n \t\tcase PhysicalType::UINT64: {\n-\t\t\tauto result_flat = FlatVector::GetData<uint64_t>(result);\n \t\t\tauto predicate = UBigIntValue::Get(constant_filter.constant);\n-\t\t\tFilterSelectionSwitch<uint64_t>(result_flat, predicate, sel, approved_tuple_count,\n-\t\t\t                                constant_filter.comparison_type, mask);\n+\t\t\tFilterSelectionSwitch<uint64_t>(vdata, predicate, sel, approved_tuple_count,\n+\t\t\t                                constant_filter.comparison_type);\n \t\t\tbreak;\n \t\t}\n \t\tcase PhysicalType::INT8: {\n-\t\t\tauto result_flat = FlatVector::GetData<int8_t>(result);\n \t\t\tauto predicate = TinyIntValue::Get(constant_filter.constant);\n-\t\t\tFilterSelectionSwitch<int8_t>(result_flat, predicate, sel, approved_tuple_count,\n-\t\t\t                              constant_filter.comparison_type, mask);\n+\t\t\tFilterSelectionSwitch<int8_t>(vdata, predicate, sel, approved_tuple_count, constant_filter.comparison_type);\n \t\t\tbreak;\n \t\t}\n \t\tcase PhysicalType::INT16: {\n-\t\t\tauto result_flat = FlatVector::GetData<int16_t>(result);\n \t\t\tauto predicate = SmallIntValue::Get(constant_filter.constant);\n-\t\t\tFilterSelectionSwitch<int16_t>(result_flat, predicate, sel, approved_tuple_count,\n-\t\t\t                               constant_filter.comparison_type, mask);\n+\t\t\tFilterSelectionSwitch<int16_t>(vdata, predicate, sel, approved_tuple_count,\n+\t\t\t                               constant_filter.comparison_type);\n \t\t\tbreak;\n \t\t}\n \t\tcase PhysicalType::INT32: {\n-\t\t\tauto result_flat = FlatVector::GetData<int32_t>(result);\n \t\t\tauto predicate = IntegerValue::Get(constant_filter.constant);\n-\t\t\tFilterSelectionSwitch<int32_t>(result_flat, predicate, sel, approved_tuple_count,\n-\t\t\t                               constant_filter.comparison_type, mask);\n+\t\t\tFilterSelectionSwitch<int32_t>(vdata, predicate, sel, approved_tuple_count,\n+\t\t\t                               constant_filter.comparison_type);\n \t\t\tbreak;\n \t\t}\n \t\tcase PhysicalType::INT64: {\n-\t\t\tauto result_flat = FlatVector::GetData<int64_t>(result);\n \t\t\tauto predicate = BigIntValue::Get(constant_filter.constant);\n-\t\t\tFilterSelectionSwitch<int64_t>(result_flat, predicate, sel, approved_tuple_count,\n-\t\t\t                               constant_filter.comparison_type, mask);\n+\t\t\tFilterSelectionSwitch<int64_t>(vdata, predicate, sel, approved_tuple_count,\n+\t\t\t                               constant_filter.comparison_type);\n \t\t\tbreak;\n \t\t}\n \t\tcase PhysicalType::INT128: {\n-\t\t\tauto result_flat = FlatVector::GetData<hugeint_t>(result);\n \t\t\tauto predicate = HugeIntValue::Get(constant_filter.constant);\n-\t\t\tFilterSelectionSwitch<hugeint_t>(result_flat, predicate, sel, approved_tuple_count,\n-\t\t\t                                 constant_filter.comparison_type, mask);\n+\t\t\tFilterSelectionSwitch<hugeint_t>(vdata, predicate, sel, approved_tuple_count,\n+\t\t\t                                 constant_filter.comparison_type);\n \t\t\tbreak;\n \t\t}\n \t\tcase PhysicalType::UINT128: {\n-\t\t\tauto result_flat = FlatVector::GetData<uhugeint_t>(result);\n \t\t\tauto predicate = UhugeIntValue::Get(constant_filter.constant);\n-\t\t\tFilterSelectionSwitch<uhugeint_t>(result_flat, predicate, sel, approved_tuple_count,\n-\t\t\t                                  constant_filter.comparison_type, mask);\n+\t\t\tFilterSelectionSwitch<uhugeint_t>(vdata, predicate, sel, approved_tuple_count,\n+\t\t\t                                  constant_filter.comparison_type);\n \t\t\tbreak;\n \t\t}\n \t\tcase PhysicalType::FLOAT: {\n-\t\t\tauto result_flat = FlatVector::GetData<float>(result);\n \t\t\tauto predicate = FloatValue::Get(constant_filter.constant);\n-\t\t\tFilterSelectionSwitch<float>(result_flat, predicate, sel, approved_tuple_count,\n-\t\t\t                             constant_filter.comparison_type, mask);\n+\t\t\tFilterSelectionSwitch<float>(vdata, predicate, sel, approved_tuple_count, constant_filter.comparison_type);\n \t\t\tbreak;\n \t\t}\n \t\tcase PhysicalType::DOUBLE: {\n-\t\t\tauto result_flat = FlatVector::GetData<double>(result);\n \t\t\tauto predicate = DoubleValue::Get(constant_filter.constant);\n-\t\t\tFilterSelectionSwitch<double>(result_flat, predicate, sel, approved_tuple_count,\n-\t\t\t                              constant_filter.comparison_type, mask);\n+\t\t\tFilterSelectionSwitch<double>(vdata, predicate, sel, approved_tuple_count, constant_filter.comparison_type);\n \t\t\tbreak;\n \t\t}\n \t\tcase PhysicalType::VARCHAR: {\n-\t\t\tauto result_flat = FlatVector::GetData<string_t>(result);\n \t\t\tauto predicate = string_t(StringValue::Get(constant_filter.constant));\n-\t\t\tFilterSelectionSwitch<string_t>(result_flat, predicate, sel, approved_tuple_count,\n-\t\t\t                                constant_filter.comparison_type, mask);\n+\t\t\tFilterSelectionSwitch<string_t>(vdata, predicate, sel, approved_tuple_count,\n+\t\t\t                                constant_filter.comparison_type);\n \t\t\tbreak;\n \t\t}\n \t\tcase PhysicalType::BOOL: {\n-\t\t\tauto result_flat = FlatVector::GetData<bool>(result);\n \t\t\tauto predicate = BooleanValue::Get(constant_filter.constant);\n-\t\t\tFilterSelectionSwitch<bool>(result_flat, predicate, sel, approved_tuple_count,\n-\t\t\t                            constant_filter.comparison_type, mask);\n+\t\t\tFilterSelectionSwitch<bool>(vdata, predicate, sel, approved_tuple_count, constant_filter.comparison_type);\n \t\t\tbreak;\n \t\t}\n \t\tdefault:\n-\t\t\tthrow InvalidTypeException(result.GetType(), \"Invalid type for filter pushed down to table comparison\");\n+\t\t\tthrow InvalidTypeException(vector.GetType(), \"Invalid type for filter pushed down to table comparison\");\n \t\t}\n \t\treturn approved_tuple_count;\n \t}\n \tcase TableFilterType::IS_NULL:\n-\t\treturn TemplatedNullSelection<true>(sel, approved_tuple_count, mask);\n+\t\treturn TemplatedNullSelection<true>(vdata, sel, approved_tuple_count);\n \tcase TableFilterType::IS_NOT_NULL:\n-\t\treturn TemplatedNullSelection<false>(sel, approved_tuple_count, mask);\n+\t\treturn TemplatedNullSelection<false>(vdata, sel, approved_tuple_count);\n \tcase TableFilterType::STRUCT_EXTRACT: {\n \t\tauto &struct_filter = filter.Cast<StructFilter>();\n \t\t// Apply the filter on the child vector\n-\t\tauto &child_vec = StructVector::GetEntries(result)[struct_filter.child_idx];\n-\t\tauto &child_mask = FlatVector::Validity(*child_vec);\n-\t\treturn FilterSelection(sel, *child_vec, *struct_filter.child_filter, approved_tuple_count, child_mask);\n+\t\tauto &child_vec = StructVector::GetEntries(vector)[struct_filter.child_idx];\n+\t\tUnifiedVectorFormat child_data;\n+\t\tchild_vec->ToUnifiedFormat(scan_count, child_data);\n+\t\treturn FilterSelection(sel, *child_vec, child_data, *struct_filter.child_filter, scan_count,\n+\t\t                       approved_tuple_count);\n \t}\n \tdefault:\n \t\tthrow InternalException(\"FIXME: unsupported type for filter selection\");\n",
  "test_patch": "diff --git a/test/sql/storage/filter_pushdown_struct.test b/test/sql/storage/filter_pushdown_struct.test\nnew file mode 100644\nindex 000000000000..d82fec5a750d\n--- /dev/null\n+++ b/test/sql/storage/filter_pushdown_struct.test\n@@ -0,0 +1,34 @@\n+# name: test/sql/storage/filter_pushdown_struct.test\n+# description: Issue #10889 - The result of a WHERE clause on a \"large\" table of structs change when duckdb is connected to a persistent database file\n+# group: [storage]\n+\n+# load the DB from disk\n+load __TEST_DIR__/filter_pushdown_struct.db\n+\n+statement ok\n+CREATE TABLE tbl (a STRUCT(\"id\" VARCHAR), b STRUCT(\"id\" VARCHAR));\n+\n+statement ok\n+INSERT INTO tbl SELECT {'id': LPAD(i::VARCHAR, 4, '0')}, {'id': 'abc'} FROM range(10000) t(i)\n+\n+query I\n+SELECT COUNT(*) FROM (SELECT * FROM tbl WHERE b.id='abc') t\n+----\n+10000\n+\n+restart\n+\n+query I\n+SELECT COUNT(*) FROM (SELECT * FROM tbl WHERE b.id='abc') t\n+----\n+10000\n+\n+statement ok\n+INSERT INTO tbl SELECT {'id': LPAD((i + 10000)::VARCHAR, 4, '0')}, {'id': 'bcd'} FROM range(10000) t(i)\n+\n+restart\n+\n+query I\n+SELECT COUNT(*) FROM (SELECT * FROM tbl WHERE b.id='bcd') t\n+----\n+10000\n",
  "problem_statement": "The result of a WHERE clause on a \"large\" table of structs change when duckdb is connected to a persistent database file\n### What happens?\n\nThe result of a WHERE clause on a \"large\" table of structs change when duckdb is connected to a persistent database file.\n\n### To Reproduce\n\nRunning `duckdb` with a temporary in-memory database, generating and populating a table, running `SELECT * FROM tbl WHERE b.\"id\"='abc';` \r\n\r\n```sql\r\nCREATE TABLE tbl (a STRUCT(\"id\" VARCHAR), b STRUCT(\"id\" VARCHAR));\r\nWITH RECURSIVE numbers AS (\r\n    SELECT 0 AS n\r\n    UNION ALL\r\n    SELECT n+1 FROM numbers WHERE n < 9999\r\n)\r\nINSERT INTO tbl (a, b)\r\nSELECT\r\n    json_object('id', LPAD(n::VARCHAR, 4, '0')),\r\n    json_object('id', 'abc')\r\nFROM numbers;\r\n\r\nSELECT * FROM tbl WHERE b.\"id\"='abc';\r\n```\r\nProduces the expected result: \r\n```\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502         a          \u2502         b          \u2502\r\n\u2502 struct(id varchar) \u2502 struct(id varchar) \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 {'id': 0000}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0001}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0002}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0003}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0004}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0005}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0006}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0007}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0008}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0009}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0010}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0011}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0012}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0013}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0014}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0015}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0016}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0017}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0018}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0019}       \u2502 {'id': abc}        \u2502\r\n\u2502      \u00b7             \u2502      \u00b7             \u2502\r\n\u2502      \u00b7             \u2502      \u00b7             \u2502\r\n\u2502      \u00b7             \u2502      \u00b7             \u2502\r\n\u2502 {'id': 9980}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9981}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9982}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9983}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9984}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9985}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9986}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9987}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9988}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9989}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9990}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9991}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9992}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9993}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9994}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9995}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9996}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9997}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9998}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9999}       \u2502 {'id': abc}        \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 10000 rows (40 shown)         2 columns \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\nRunning the same query when the table is loaded from a persistent database file (if the table is large), changes the result of the query:\r\n\r\n```sql\r\n.open bug.duckdb\r\nCREATE TABLE tbl (a STRUCT(\"id\" VARCHAR), b STRUCT(\"id\" VARCHAR));\r\nWITH RECURSIVE numbers AS (\r\n    SELECT 0 AS n\r\n    UNION ALL\r\n    SELECT n+1 FROM numbers WHERE n < 9999\r\n)\r\nINSERT INTO tbl (a, b)\r\nSELECT\r\n    json_object('id', LPAD(n::VARCHAR, 4, '0')),\r\n    json_object('id', 'abc')\r\nFROM numbers;\r\nSELECT * FROM tbl WHERE b.\"id\"='abc'; --This will output Table 1\r\n\r\n.open bug.duckdb\r\nSELECT * FROM tbl WHERE b.\"id\"='abc'; --This will output Table 2\r\n```\r\n\r\nTable 1:\r\n\r\n```\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502         a          \u2502         b          \u2502\r\n\u2502 struct(id varchar) \u2502 struct(id varchar) \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 {'id': 0000}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0001}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0002}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0003}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0004}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0005}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0006}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0007}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0008}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0009}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0010}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0011}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0012}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0013}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0014}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0015}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0016}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0017}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0018}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0019}       \u2502 {'id': abc}        \u2502\r\n\u2502      \u00b7             \u2502      \u00b7             \u2502\r\n\u2502      \u00b7             \u2502      \u00b7             \u2502\r\n\u2502      \u00b7             \u2502      \u00b7             \u2502\r\n\u2502 {'id': 9980}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9981}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9982}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9983}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9984}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9985}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9986}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9987}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9988}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9989}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9990}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9991}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9992}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9993}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9994}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9995}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9996}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9997}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9998}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9999}       \u2502 {'id': abc}        \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 10000 rows (40 shown)         2 columns \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\nTable 2:\r\n\r\n```\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502         a          \u2502         b          \u2502\r\n\u2502 struct(id varchar) \u2502 struct(id varchar) \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 {'id': 0001}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 2049}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 4097}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 6145}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 8192}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 8193}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 8194}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 8195}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 8196}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 8197}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 8198}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 8199}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 8200}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 8201}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 8202}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 8203}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 8204}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 8205}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 8206}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 8207}       \u2502 {'id': abc}        \u2502\r\n\u2502      \u00b7             \u2502      \u00b7             \u2502\r\n\u2502      \u00b7             \u2502      \u00b7             \u2502\r\n\u2502      \u00b7             \u2502      \u00b7             \u2502\r\n\u2502 {'id': 9980}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9981}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9982}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9983}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9984}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9985}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9986}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9987}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9988}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9989}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9990}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9991}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9992}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9993}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9994}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9995}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9996}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9997}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9998}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9999}       \u2502 {'id': abc}        \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 1812 rows (40 shown)          2 columns \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\n\n### OS:\n\nmacOS 14.1.2 - arm64 (M3 Pro)\n\n### DuckDB Version:\n\n0.10\n\n### DuckDB Client:\n\nCLI (Also tested in Python client)\n\n### Full Name:\n\nFredrik Norlin\n\n### Affiliation:\n\nSkovik\n\n### Have you tried this on the latest [nightly build](https://duckdb.org/docs/installation/?version=main)?\n\nI have tested with a release build (and could not test with a nightly build)\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] Yes, I have\nThe result of a WHERE clause on a \"large\" table of structs change when duckdb is connected to a persistent database file\n### What happens?\n\nThe result of a WHERE clause on a \"large\" table of structs change when duckdb is connected to a persistent database file.\n\n### To Reproduce\n\nRunning `duckdb` with a temporary in-memory database, generating and populating a table, running `SELECT * FROM tbl WHERE b.\"id\"='abc';` \r\n\r\n```sql\r\nCREATE TABLE tbl (a STRUCT(\"id\" VARCHAR), b STRUCT(\"id\" VARCHAR));\r\nWITH RECURSIVE numbers AS (\r\n    SELECT 0 AS n\r\n    UNION ALL\r\n    SELECT n+1 FROM numbers WHERE n < 9999\r\n)\r\nINSERT INTO tbl (a, b)\r\nSELECT\r\n    json_object('id', LPAD(n::VARCHAR, 4, '0')),\r\n    json_object('id', 'abc')\r\nFROM numbers;\r\n\r\nSELECT * FROM tbl WHERE b.\"id\"='abc';\r\n```\r\nProduces the expected result: \r\n```\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502         a          \u2502         b          \u2502\r\n\u2502 struct(id varchar) \u2502 struct(id varchar) \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 {'id': 0000}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0001}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0002}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0003}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0004}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0005}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0006}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0007}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0008}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0009}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0010}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0011}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0012}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0013}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0014}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0015}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0016}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0017}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0018}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0019}       \u2502 {'id': abc}        \u2502\r\n\u2502      \u00b7             \u2502      \u00b7             \u2502\r\n\u2502      \u00b7             \u2502      \u00b7             \u2502\r\n\u2502      \u00b7             \u2502      \u00b7             \u2502\r\n\u2502 {'id': 9980}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9981}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9982}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9983}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9984}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9985}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9986}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9987}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9988}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9989}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9990}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9991}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9992}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9993}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9994}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9995}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9996}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9997}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9998}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9999}       \u2502 {'id': abc}        \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 10000 rows (40 shown)         2 columns \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\nRunning the same query when the table is loaded from a persistent database file (if the table is large), changes the result of the query:\r\n\r\n```sql\r\n.open bug.duckdb\r\nCREATE TABLE tbl (a STRUCT(\"id\" VARCHAR), b STRUCT(\"id\" VARCHAR));\r\nWITH RECURSIVE numbers AS (\r\n    SELECT 0 AS n\r\n    UNION ALL\r\n    SELECT n+1 FROM numbers WHERE n < 9999\r\n)\r\nINSERT INTO tbl (a, b)\r\nSELECT\r\n    json_object('id', LPAD(n::VARCHAR, 4, '0')),\r\n    json_object('id', 'abc')\r\nFROM numbers;\r\nSELECT * FROM tbl WHERE b.\"id\"='abc'; --This will output Table 1\r\n\r\n.open bug.duckdb\r\nSELECT * FROM tbl WHERE b.\"id\"='abc'; --This will output Table 2\r\n```\r\n\r\nTable 1:\r\n\r\n```\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502         a          \u2502         b          \u2502\r\n\u2502 struct(id varchar) \u2502 struct(id varchar) \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 {'id': 0000}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0001}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0002}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0003}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0004}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0005}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0006}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0007}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0008}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0009}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0010}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0011}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0012}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0013}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0014}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0015}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0016}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0017}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0018}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0019}       \u2502 {'id': abc}        \u2502\r\n\u2502      \u00b7             \u2502      \u00b7             \u2502\r\n\u2502      \u00b7             \u2502      \u00b7             \u2502\r\n\u2502      \u00b7             \u2502      \u00b7             \u2502\r\n\u2502 {'id': 9980}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9981}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9982}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9983}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9984}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9985}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9986}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9987}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9988}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9989}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9990}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9991}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9992}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9993}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9994}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9995}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9996}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9997}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9998}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9999}       \u2502 {'id': abc}        \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 10000 rows (40 shown)         2 columns \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\nTable 2:\r\n\r\n```\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502         a          \u2502         b          \u2502\r\n\u2502 struct(id varchar) \u2502 struct(id varchar) \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 {'id': 0001}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 2049}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 4097}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 6145}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 8192}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 8193}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 8194}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 8195}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 8196}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 8197}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 8198}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 8199}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 8200}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 8201}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 8202}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 8203}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 8204}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 8205}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 8206}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 8207}       \u2502 {'id': abc}        \u2502\r\n\u2502      \u00b7             \u2502      \u00b7             \u2502\r\n\u2502      \u00b7             \u2502      \u00b7             \u2502\r\n\u2502      \u00b7             \u2502      \u00b7             \u2502\r\n\u2502 {'id': 9980}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9981}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9982}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9983}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9984}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9985}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9986}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9987}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9988}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9989}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9990}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9991}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9992}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9993}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9994}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9995}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9996}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9997}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9998}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 9999}       \u2502 {'id': abc}        \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 1812 rows (40 shown)          2 columns \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\n\n### OS:\n\nmacOS 14.1.2 - arm64 (M3 Pro)\n\n### DuckDB Version:\n\n0.10\n\n### DuckDB Client:\n\nCLI (Also tested in Python client)\n\n### Full Name:\n\nFredrik Norlin\n\n### Affiliation:\n\nSkovik\n\n### Have you tried this on the latest [nightly build](https://duckdb.org/docs/installation/?version=main)?\n\nI have tested with a release build (and could not test with a nightly build)\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] Yes, I have\n",
  "hints_text": "I did some experimenting when trying to create a reproducible example, and as expected based on the id's above, 2048 rows is a breakpoint:\r\n```sql\r\n.open bug.duckdb\r\nCREATE TABLE tbl (a STRUCT(\"id\" VARCHAR), b STRUCT(\"id\" VARCHAR));\r\nWITH RECURSIVE numbers AS (\r\n    SELECT 0 AS n\r\n    UNION ALL\r\n    SELECT n+1 FROM numbers WHERE n < 9999\r\n)\r\nINSERT INTO tbl (a, b)\r\nSELECT\r\n    json_object('id', LPAD(n::VARCHAR, 4, '0')),\r\n    json_object('id', 'abc')\r\nFROM numbers;\r\n\r\nCREATE TABLE tbl2047 AS SELECT * FROM tbl LIMIT 2047;\r\nCREATE TABLE tbl2048 AS SELECT * FROM tbl LIMIT 2048;\r\n.open bug.duckdb\r\nSELECT * FROM tbl2047 WHERE b.\"id\"='abc'; --This will output Table 1\r\nSELECT * FROM tbl2048 WHERE b.\"id\"='abc'; --This will output Table 2\r\n```\r\nTable 1:\r\n```\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502         a          \u2502         b          \u2502\r\n\u2502 struct(id varchar) \u2502 struct(id varchar) \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 {'id': 0000}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0001}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0002}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0003}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0004}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0005}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0006}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0007}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0008}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0009}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0010}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0011}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0012}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0013}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0014}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0015}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0016}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0017}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0018}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0019}       \u2502 {'id': abc}        \u2502\r\n\u2502      \u00b7             \u2502      \u00b7             \u2502\r\n\u2502      \u00b7             \u2502      \u00b7             \u2502\r\n\u2502      \u00b7             \u2502      \u00b7             \u2502\r\n\u2502 {'id': 2027}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 2028}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 2029}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 2030}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 2031}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 2032}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 2033}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 2034}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 2035}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 2036}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 2037}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 2038}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 2039}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 2040}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 2041}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 2042}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 2043}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 2044}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 2045}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 2046}       \u2502 {'id': abc}        \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 2047 rows (40 shown)          2 columns \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\nTable 2:\r\n```\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502         a          \u2502         b          \u2502\r\n\u2502 struct(id varchar) \u2502 struct(id varchar) \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 {'id': 0001}       \u2502 {'id': abc}        \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\nThe problem also is seems to be connected with the struct datatype, since converting the column type to JSON or VARCHAR \"fixes\" the issue:\r\n\r\n```sql\r\n.open bug.duckdb\r\nCREATE TABLE tbl (a STRUCT(\"id\" VARCHAR), b STRUCT(\"id\" VARCHAR));\r\nWITH RECURSIVE numbers AS (\r\n    SELECT 0 AS n\r\n    UNION ALL\r\n    SELECT n+1 FROM numbers WHERE n < 9999\r\n)\r\nINSERT INTO tbl (a, b)\r\nSELECT\r\n    json_object('id', LPAD(n::VARCHAR, 4, '0')),\r\n    json_object('id', 'abc')\r\nFROM numbers;\r\n\r\nCREATE TABLE tbljson AS SELECT * FROM tbl;\r\nCREATE TABLE tblvarchar AS SELECT * FROM tbl;\r\nALTER TABLE tbljson ALTER b TYPE JSON;\r\nALTER TABLE tblvarchar ALTER b TYPE VARCHAR;\r\n.open bug.duckdb\r\nSELECT * FROM tbljson WHERE b.\"id\"='\"abc\"'; --This will output Table 3\r\nSELECT * FROM tblvarchar WHERE b = '{''id'': abc}'; --This will output Table 4\r\n```\r\nTable 3:\r\n```\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502         a          \u2502      b       \u2502\r\n\u2502 struct(id varchar) \u2502     json     \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 {'id': 0000}       \u2502 {\"id\":\"abc\"} \u2502\r\n\u2502 {'id': 0001}       \u2502 {\"id\":\"abc\"} \u2502\r\n\u2502 {'id': 0002}       \u2502 {\"id\":\"abc\"} \u2502\r\n\u2502 {'id': 0003}       \u2502 {\"id\":\"abc\"} \u2502\r\n\u2502 {'id': 0004}       \u2502 {\"id\":\"abc\"} \u2502\r\n\u2502 {'id': 0005}       \u2502 {\"id\":\"abc\"} \u2502\r\n\u2502 {'id': 0006}       \u2502 {\"id\":\"abc\"} \u2502\r\n\u2502 {'id': 0007}       \u2502 {\"id\":\"abc\"} \u2502\r\n\u2502 {'id': 0008}       \u2502 {\"id\":\"abc\"} \u2502\r\n\u2502 {'id': 0009}       \u2502 {\"id\":\"abc\"} \u2502\r\n\u2502 {'id': 0010}       \u2502 {\"id\":\"abc\"} \u2502\r\n\u2502 {'id': 0011}       \u2502 {\"id\":\"abc\"} \u2502\r\n\u2502 {'id': 0012}       \u2502 {\"id\":\"abc\"} \u2502\r\n\u2502 {'id': 0013}       \u2502 {\"id\":\"abc\"} \u2502\r\n\u2502 {'id': 0014}       \u2502 {\"id\":\"abc\"} \u2502\r\n\u2502 {'id': 0015}       \u2502 {\"id\":\"abc\"} \u2502\r\n\u2502 {'id': 0016}       \u2502 {\"id\":\"abc\"} \u2502\r\n\u2502 {'id': 0017}       \u2502 {\"id\":\"abc\"} \u2502\r\n\u2502 {'id': 0018}       \u2502 {\"id\":\"abc\"} \u2502\r\n\u2502 {'id': 0019}       \u2502 {\"id\":\"abc\"} \u2502\r\n\u2502      \u00b7             \u2502      \u00b7       \u2502\r\n\u2502      \u00b7             \u2502      \u00b7       \u2502\r\n\u2502      \u00b7             \u2502      \u00b7       \u2502\r\n\u2502 {'id': 9980}       \u2502 {\"id\":\"abc\"} \u2502\r\n\u2502 {'id': 9981}       \u2502 {\"id\":\"abc\"} \u2502\r\n\u2502 {'id': 9982}       \u2502 {\"id\":\"abc\"} \u2502\r\n\u2502 {'id': 9983}       \u2502 {\"id\":\"abc\"} \u2502\r\n\u2502 {'id': 9984}       \u2502 {\"id\":\"abc\"} \u2502\r\n\u2502 {'id': 9985}       \u2502 {\"id\":\"abc\"} \u2502\r\n\u2502 {'id': 9986}       \u2502 {\"id\":\"abc\"} \u2502\r\n\u2502 {'id': 9987}       \u2502 {\"id\":\"abc\"} \u2502\r\n\u2502 {'id': 9988}       \u2502 {\"id\":\"abc\"} \u2502\r\n\u2502 {'id': 9989}       \u2502 {\"id\":\"abc\"} \u2502\r\n\u2502 {'id': 9990}       \u2502 {\"id\":\"abc\"} \u2502\r\n\u2502 {'id': 9991}       \u2502 {\"id\":\"abc\"} \u2502\r\n\u2502 {'id': 9992}       \u2502 {\"id\":\"abc\"} \u2502\r\n\u2502 {'id': 9993}       \u2502 {\"id\":\"abc\"} \u2502\r\n\u2502 {'id': 9994}       \u2502 {\"id\":\"abc\"} \u2502\r\n\u2502 {'id': 9995}       \u2502 {\"id\":\"abc\"} \u2502\r\n\u2502 {'id': 9996}       \u2502 {\"id\":\"abc\"} \u2502\r\n\u2502 {'id': 9997}       \u2502 {\"id\":\"abc\"} \u2502\r\n\u2502 {'id': 9998}       \u2502 {\"id\":\"abc\"} \u2502\r\n\u2502 {'id': 9999}       \u2502 {\"id\":\"abc\"} \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 10000 rows (40 shown)   2 columns \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\nTable 4:\r\n```\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502         a          \u2502      b      \u2502\r\n\u2502 struct(id varchar) \u2502   varchar   \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 {'id': 0000}       \u2502 {'id': abc} \u2502\r\n\u2502 {'id': 0001}       \u2502 {'id': abc} \u2502\r\n\u2502 {'id': 0002}       \u2502 {'id': abc} \u2502\r\n\u2502 {'id': 0003}       \u2502 {'id': abc} \u2502\r\n\u2502 {'id': 0004}       \u2502 {'id': abc} \u2502\r\n\u2502 {'id': 0005}       \u2502 {'id': abc} \u2502\r\n\u2502 {'id': 0006}       \u2502 {'id': abc} \u2502\r\n\u2502 {'id': 0007}       \u2502 {'id': abc} \u2502\r\n\u2502 {'id': 0008}       \u2502 {'id': abc} \u2502\r\n\u2502 {'id': 0009}       \u2502 {'id': abc} \u2502\r\n\u2502 {'id': 0010}       \u2502 {'id': abc} \u2502\r\n\u2502 {'id': 0011}       \u2502 {'id': abc} \u2502\r\n\u2502 {'id': 0012}       \u2502 {'id': abc} \u2502\r\n\u2502 {'id': 0013}       \u2502 {'id': abc} \u2502\r\n\u2502 {'id': 0014}       \u2502 {'id': abc} \u2502\r\n\u2502 {'id': 0015}       \u2502 {'id': abc} \u2502\r\n\u2502 {'id': 0016}       \u2502 {'id': abc} \u2502\r\n\u2502 {'id': 0017}       \u2502 {'id': abc} \u2502\r\n\u2502 {'id': 0018}       \u2502 {'id': abc} \u2502\r\n\u2502 {'id': 0019}       \u2502 {'id': abc} \u2502\r\n\u2502      \u00b7             \u2502      \u00b7      \u2502\r\n\u2502      \u00b7             \u2502      \u00b7      \u2502\r\n\u2502      \u00b7             \u2502      \u00b7      \u2502\r\n\u2502 {'id': 9980}       \u2502 {'id': abc} \u2502\r\n\u2502 {'id': 9981}       \u2502 {'id': abc} \u2502\r\n\u2502 {'id': 9982}       \u2502 {'id': abc} \u2502\r\n\u2502 {'id': 9983}       \u2502 {'id': abc} \u2502\r\n\u2502 {'id': 9984}       \u2502 {'id': abc} \u2502\r\n\u2502 {'id': 9985}       \u2502 {'id': abc} \u2502\r\n\u2502 {'id': 9986}       \u2502 {'id': abc} \u2502\r\n\u2502 {'id': 9987}       \u2502 {'id': abc} \u2502\r\n\u2502 {'id': 9988}       \u2502 {'id': abc} \u2502\r\n\u2502 {'id': 9989}       \u2502 {'id': abc} \u2502\r\n\u2502 {'id': 9990}       \u2502 {'id': abc} \u2502\r\n\u2502 {'id': 9991}       \u2502 {'id': abc} \u2502\r\n\u2502 {'id': 9992}       \u2502 {'id': abc} \u2502\r\n\u2502 {'id': 9993}       \u2502 {'id': abc} \u2502\r\n\u2502 {'id': 9994}       \u2502 {'id': abc} \u2502\r\n\u2502 {'id': 9995}       \u2502 {'id': abc} \u2502\r\n\u2502 {'id': 9996}       \u2502 {'id': abc} \u2502\r\n\u2502 {'id': 9997}       \u2502 {'id': abc} \u2502\r\n\u2502 {'id': 9998}       \u2502 {'id': abc} \u2502\r\n\u2502 {'id': 9999}       \u2502 {'id': abc} \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 10000 rows (40 shown)  2 columns \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\nNotice how the query actually returns results that do not contain the right values when every row in column b do not contain the same value:\r\n\r\n```sql\r\n.open bug.duckdb\r\nCREATE TABLE tbl (a STRUCT(\"id\" VARCHAR), b STRUCT(\"id\" VARCHAR));\r\nWITH RECURSIVE numbers AS (\r\n    SELECT 0 AS n\r\n    UNION ALL\r\n    SELECT n+1 FROM numbers WHERE n < 999\r\n)\r\nINSERT INTO tbl (a, b)\r\nSELECT\r\n    json_object('id', LPAD(n::VARCHAR, 4, '0')),\r\n    json_object('id', 'abc')\r\nFROM numbers;\r\n\r\nWITH RECURSIVE numbers AS (\r\n    SELECT 1000 AS n\r\n    UNION ALL\r\n    SELECT n+1 FROM numbers WHERE n < 9999\r\n)\r\nINSERT INTO tbl (a, b)\r\nSELECT\r\n    json_object('id', LPAD(n::VARCHAR, 4, '0')),\r\n    json_object('id', floor(n/10))\r\nFROM numbers;\r\n\r\nSELECT * FROM tbl; --This will output Table 5\r\n\r\n.open bug.duckdb\r\nSELECT * FROM tbl WHERE b.\"id\"='abc'; --This will output Table 6\r\n```\r\nTable 5:\r\n```\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502         a          \u2502         b          \u2502\r\n\u2502 struct(id varchar) \u2502 struct(id varchar) \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 {'id': 0000}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0001}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0002}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0003}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0004}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0005}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0006}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0007}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0008}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0009}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0010}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0011}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0012}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0013}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0014}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0015}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0016}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0017}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0018}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0019}       \u2502 {'id': abc}        \u2502\r\n\u2502      \u00b7             \u2502      \u00b7             \u2502\r\n\u2502      \u00b7             \u2502      \u00b7             \u2502\r\n\u2502      \u00b7             \u2502      \u00b7             \u2502\r\n\u2502 {'id': 9980}       \u2502 {'id': 998.0}      \u2502\r\n\u2502 {'id': 9981}       \u2502 {'id': 998.0}      \u2502\r\n\u2502 {'id': 9982}       \u2502 {'id': 998.0}      \u2502\r\n\u2502 {'id': 9983}       \u2502 {'id': 998.0}      \u2502\r\n\u2502 {'id': 9984}       \u2502 {'id': 998.0}      \u2502\r\n\u2502 {'id': 9985}       \u2502 {'id': 998.0}      \u2502\r\n\u2502 {'id': 9986}       \u2502 {'id': 998.0}      \u2502\r\n\u2502 {'id': 9987}       \u2502 {'id': 998.0}      \u2502\r\n\u2502 {'id': 9988}       \u2502 {'id': 998.0}      \u2502\r\n\u2502 {'id': 9989}       \u2502 {'id': 998.0}      \u2502\r\n\u2502 {'id': 9990}       \u2502 {'id': 999.0}      \u2502\r\n\u2502 {'id': 9991}       \u2502 {'id': 999.0}      \u2502\r\n\u2502 {'id': 9992}       \u2502 {'id': 999.0}      \u2502\r\n\u2502 {'id': 9993}       \u2502 {'id': 999.0}      \u2502\r\n\u2502 {'id': 9994}       \u2502 {'id': 999.0}      \u2502\r\n\u2502 {'id': 9995}       \u2502 {'id': 999.0}      \u2502\r\n\u2502 {'id': 9996}       \u2502 {'id': 999.0}      \u2502\r\n\u2502 {'id': 9997}       \u2502 {'id': 999.0}      \u2502\r\n\u2502 {'id': 9998}       \u2502 {'id': 999.0}      \u2502\r\n\u2502 {'id': 9999}       \u2502 {'id': 999.0}      \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 10000 rows (40 shown)         2 columns \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\nTable 6:\r\n```\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502         a          \u2502         b          \u2502\r\n\u2502 struct(id varchar) \u2502 struct(id varchar) \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 {'id': 0001}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 2049}       \u2502 {'id': 204.0}      \u2502\r\n\u2502 {'id': 4097}       \u2502 {'id': 409.0}      \u2502\r\n\u2502 {'id': 6145}       \u2502 {'id': 614.0}      \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\n@fredriknorlin thanks for reporting this, particularly for your efforts in making reproducers! We'll take a look.\nI did some experimenting when trying to create a reproducible example, and as expected based on the id's above, 2048 rows is a breakpoint:\r\n```sql\r\n.open bug.duckdb\r\nCREATE TABLE tbl (a STRUCT(\"id\" VARCHAR), b STRUCT(\"id\" VARCHAR));\r\nWITH RECURSIVE numbers AS (\r\n    SELECT 0 AS n\r\n    UNION ALL\r\n    SELECT n+1 FROM numbers WHERE n < 9999\r\n)\r\nINSERT INTO tbl (a, b)\r\nSELECT\r\n    json_object('id', LPAD(n::VARCHAR, 4, '0')),\r\n    json_object('id', 'abc')\r\nFROM numbers;\r\n\r\nCREATE TABLE tbl2047 AS SELECT * FROM tbl LIMIT 2047;\r\nCREATE TABLE tbl2048 AS SELECT * FROM tbl LIMIT 2048;\r\n.open bug.duckdb\r\nSELECT * FROM tbl2047 WHERE b.\"id\"='abc'; --This will output Table 1\r\nSELECT * FROM tbl2048 WHERE b.\"id\"='abc'; --This will output Table 2\r\n```\r\nTable 1:\r\n```\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502         a          \u2502         b          \u2502\r\n\u2502 struct(id varchar) \u2502 struct(id varchar) \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 {'id': 0000}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0001}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0002}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0003}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0004}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0005}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0006}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0007}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0008}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0009}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0010}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0011}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0012}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0013}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0014}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0015}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0016}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0017}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0018}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0019}       \u2502 {'id': abc}        \u2502\r\n\u2502      \u00b7             \u2502      \u00b7             \u2502\r\n\u2502      \u00b7             \u2502      \u00b7             \u2502\r\n\u2502      \u00b7             \u2502      \u00b7             \u2502\r\n\u2502 {'id': 2027}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 2028}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 2029}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 2030}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 2031}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 2032}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 2033}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 2034}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 2035}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 2036}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 2037}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 2038}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 2039}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 2040}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 2041}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 2042}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 2043}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 2044}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 2045}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 2046}       \u2502 {'id': abc}        \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 2047 rows (40 shown)          2 columns \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\nTable 2:\r\n```\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502         a          \u2502         b          \u2502\r\n\u2502 struct(id varchar) \u2502 struct(id varchar) \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 {'id': 0001}       \u2502 {'id': abc}        \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\nThe problem also is seems to be connected with the struct datatype, since converting the column type to JSON or VARCHAR \"fixes\" the issue:\r\n\r\n```sql\r\n.open bug.duckdb\r\nCREATE TABLE tbl (a STRUCT(\"id\" VARCHAR), b STRUCT(\"id\" VARCHAR));\r\nWITH RECURSIVE numbers AS (\r\n    SELECT 0 AS n\r\n    UNION ALL\r\n    SELECT n+1 FROM numbers WHERE n < 9999\r\n)\r\nINSERT INTO tbl (a, b)\r\nSELECT\r\n    json_object('id', LPAD(n::VARCHAR, 4, '0')),\r\n    json_object('id', 'abc')\r\nFROM numbers;\r\n\r\nCREATE TABLE tbljson AS SELECT * FROM tbl;\r\nCREATE TABLE tblvarchar AS SELECT * FROM tbl;\r\nALTER TABLE tbljson ALTER b TYPE JSON;\r\nALTER TABLE tblvarchar ALTER b TYPE VARCHAR;\r\n.open bug.duckdb\r\nSELECT * FROM tbljson WHERE b.\"id\"='\"abc\"'; --This will output Table 3\r\nSELECT * FROM tblvarchar WHERE b = '{''id'': abc}'; --This will output Table 4\r\n```\r\nTable 3:\r\n```\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502         a          \u2502      b       \u2502\r\n\u2502 struct(id varchar) \u2502     json     \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 {'id': 0000}       \u2502 {\"id\":\"abc\"} \u2502\r\n\u2502 {'id': 0001}       \u2502 {\"id\":\"abc\"} \u2502\r\n\u2502 {'id': 0002}       \u2502 {\"id\":\"abc\"} \u2502\r\n\u2502 {'id': 0003}       \u2502 {\"id\":\"abc\"} \u2502\r\n\u2502 {'id': 0004}       \u2502 {\"id\":\"abc\"} \u2502\r\n\u2502 {'id': 0005}       \u2502 {\"id\":\"abc\"} \u2502\r\n\u2502 {'id': 0006}       \u2502 {\"id\":\"abc\"} \u2502\r\n\u2502 {'id': 0007}       \u2502 {\"id\":\"abc\"} \u2502\r\n\u2502 {'id': 0008}       \u2502 {\"id\":\"abc\"} \u2502\r\n\u2502 {'id': 0009}       \u2502 {\"id\":\"abc\"} \u2502\r\n\u2502 {'id': 0010}       \u2502 {\"id\":\"abc\"} \u2502\r\n\u2502 {'id': 0011}       \u2502 {\"id\":\"abc\"} \u2502\r\n\u2502 {'id': 0012}       \u2502 {\"id\":\"abc\"} \u2502\r\n\u2502 {'id': 0013}       \u2502 {\"id\":\"abc\"} \u2502\r\n\u2502 {'id': 0014}       \u2502 {\"id\":\"abc\"} \u2502\r\n\u2502 {'id': 0015}       \u2502 {\"id\":\"abc\"} \u2502\r\n\u2502 {'id': 0016}       \u2502 {\"id\":\"abc\"} \u2502\r\n\u2502 {'id': 0017}       \u2502 {\"id\":\"abc\"} \u2502\r\n\u2502 {'id': 0018}       \u2502 {\"id\":\"abc\"} \u2502\r\n\u2502 {'id': 0019}       \u2502 {\"id\":\"abc\"} \u2502\r\n\u2502      \u00b7             \u2502      \u00b7       \u2502\r\n\u2502      \u00b7             \u2502      \u00b7       \u2502\r\n\u2502      \u00b7             \u2502      \u00b7       \u2502\r\n\u2502 {'id': 9980}       \u2502 {\"id\":\"abc\"} \u2502\r\n\u2502 {'id': 9981}       \u2502 {\"id\":\"abc\"} \u2502\r\n\u2502 {'id': 9982}       \u2502 {\"id\":\"abc\"} \u2502\r\n\u2502 {'id': 9983}       \u2502 {\"id\":\"abc\"} \u2502\r\n\u2502 {'id': 9984}       \u2502 {\"id\":\"abc\"} \u2502\r\n\u2502 {'id': 9985}       \u2502 {\"id\":\"abc\"} \u2502\r\n\u2502 {'id': 9986}       \u2502 {\"id\":\"abc\"} \u2502\r\n\u2502 {'id': 9987}       \u2502 {\"id\":\"abc\"} \u2502\r\n\u2502 {'id': 9988}       \u2502 {\"id\":\"abc\"} \u2502\r\n\u2502 {'id': 9989}       \u2502 {\"id\":\"abc\"} \u2502\r\n\u2502 {'id': 9990}       \u2502 {\"id\":\"abc\"} \u2502\r\n\u2502 {'id': 9991}       \u2502 {\"id\":\"abc\"} \u2502\r\n\u2502 {'id': 9992}       \u2502 {\"id\":\"abc\"} \u2502\r\n\u2502 {'id': 9993}       \u2502 {\"id\":\"abc\"} \u2502\r\n\u2502 {'id': 9994}       \u2502 {\"id\":\"abc\"} \u2502\r\n\u2502 {'id': 9995}       \u2502 {\"id\":\"abc\"} \u2502\r\n\u2502 {'id': 9996}       \u2502 {\"id\":\"abc\"} \u2502\r\n\u2502 {'id': 9997}       \u2502 {\"id\":\"abc\"} \u2502\r\n\u2502 {'id': 9998}       \u2502 {\"id\":\"abc\"} \u2502\r\n\u2502 {'id': 9999}       \u2502 {\"id\":\"abc\"} \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 10000 rows (40 shown)   2 columns \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\nTable 4:\r\n```\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502         a          \u2502      b      \u2502\r\n\u2502 struct(id varchar) \u2502   varchar   \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 {'id': 0000}       \u2502 {'id': abc} \u2502\r\n\u2502 {'id': 0001}       \u2502 {'id': abc} \u2502\r\n\u2502 {'id': 0002}       \u2502 {'id': abc} \u2502\r\n\u2502 {'id': 0003}       \u2502 {'id': abc} \u2502\r\n\u2502 {'id': 0004}       \u2502 {'id': abc} \u2502\r\n\u2502 {'id': 0005}       \u2502 {'id': abc} \u2502\r\n\u2502 {'id': 0006}       \u2502 {'id': abc} \u2502\r\n\u2502 {'id': 0007}       \u2502 {'id': abc} \u2502\r\n\u2502 {'id': 0008}       \u2502 {'id': abc} \u2502\r\n\u2502 {'id': 0009}       \u2502 {'id': abc} \u2502\r\n\u2502 {'id': 0010}       \u2502 {'id': abc} \u2502\r\n\u2502 {'id': 0011}       \u2502 {'id': abc} \u2502\r\n\u2502 {'id': 0012}       \u2502 {'id': abc} \u2502\r\n\u2502 {'id': 0013}       \u2502 {'id': abc} \u2502\r\n\u2502 {'id': 0014}       \u2502 {'id': abc} \u2502\r\n\u2502 {'id': 0015}       \u2502 {'id': abc} \u2502\r\n\u2502 {'id': 0016}       \u2502 {'id': abc} \u2502\r\n\u2502 {'id': 0017}       \u2502 {'id': abc} \u2502\r\n\u2502 {'id': 0018}       \u2502 {'id': abc} \u2502\r\n\u2502 {'id': 0019}       \u2502 {'id': abc} \u2502\r\n\u2502      \u00b7             \u2502      \u00b7      \u2502\r\n\u2502      \u00b7             \u2502      \u00b7      \u2502\r\n\u2502      \u00b7             \u2502      \u00b7      \u2502\r\n\u2502 {'id': 9980}       \u2502 {'id': abc} \u2502\r\n\u2502 {'id': 9981}       \u2502 {'id': abc} \u2502\r\n\u2502 {'id': 9982}       \u2502 {'id': abc} \u2502\r\n\u2502 {'id': 9983}       \u2502 {'id': abc} \u2502\r\n\u2502 {'id': 9984}       \u2502 {'id': abc} \u2502\r\n\u2502 {'id': 9985}       \u2502 {'id': abc} \u2502\r\n\u2502 {'id': 9986}       \u2502 {'id': abc} \u2502\r\n\u2502 {'id': 9987}       \u2502 {'id': abc} \u2502\r\n\u2502 {'id': 9988}       \u2502 {'id': abc} \u2502\r\n\u2502 {'id': 9989}       \u2502 {'id': abc} \u2502\r\n\u2502 {'id': 9990}       \u2502 {'id': abc} \u2502\r\n\u2502 {'id': 9991}       \u2502 {'id': abc} \u2502\r\n\u2502 {'id': 9992}       \u2502 {'id': abc} \u2502\r\n\u2502 {'id': 9993}       \u2502 {'id': abc} \u2502\r\n\u2502 {'id': 9994}       \u2502 {'id': abc} \u2502\r\n\u2502 {'id': 9995}       \u2502 {'id': abc} \u2502\r\n\u2502 {'id': 9996}       \u2502 {'id': abc} \u2502\r\n\u2502 {'id': 9997}       \u2502 {'id': abc} \u2502\r\n\u2502 {'id': 9998}       \u2502 {'id': abc} \u2502\r\n\u2502 {'id': 9999}       \u2502 {'id': abc} \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 10000 rows (40 shown)  2 columns \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\nNotice how the query actually returns results that do not contain the right values when every row in column b do not contain the same value:\r\n\r\n```sql\r\n.open bug.duckdb\r\nCREATE TABLE tbl (a STRUCT(\"id\" VARCHAR), b STRUCT(\"id\" VARCHAR));\r\nWITH RECURSIVE numbers AS (\r\n    SELECT 0 AS n\r\n    UNION ALL\r\n    SELECT n+1 FROM numbers WHERE n < 999\r\n)\r\nINSERT INTO tbl (a, b)\r\nSELECT\r\n    json_object('id', LPAD(n::VARCHAR, 4, '0')),\r\n    json_object('id', 'abc')\r\nFROM numbers;\r\n\r\nWITH RECURSIVE numbers AS (\r\n    SELECT 1000 AS n\r\n    UNION ALL\r\n    SELECT n+1 FROM numbers WHERE n < 9999\r\n)\r\nINSERT INTO tbl (a, b)\r\nSELECT\r\n    json_object('id', LPAD(n::VARCHAR, 4, '0')),\r\n    json_object('id', floor(n/10))\r\nFROM numbers;\r\n\r\nSELECT * FROM tbl; --This will output Table 5\r\n\r\n.open bug.duckdb\r\nSELECT * FROM tbl WHERE b.\"id\"='abc'; --This will output Table 6\r\n```\r\nTable 5:\r\n```\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502         a          \u2502         b          \u2502\r\n\u2502 struct(id varchar) \u2502 struct(id varchar) \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 {'id': 0000}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0001}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0002}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0003}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0004}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0005}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0006}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0007}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0008}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0009}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0010}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0011}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0012}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0013}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0014}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0015}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0016}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0017}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0018}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 0019}       \u2502 {'id': abc}        \u2502\r\n\u2502      \u00b7             \u2502      \u00b7             \u2502\r\n\u2502      \u00b7             \u2502      \u00b7             \u2502\r\n\u2502      \u00b7             \u2502      \u00b7             \u2502\r\n\u2502 {'id': 9980}       \u2502 {'id': 998.0}      \u2502\r\n\u2502 {'id': 9981}       \u2502 {'id': 998.0}      \u2502\r\n\u2502 {'id': 9982}       \u2502 {'id': 998.0}      \u2502\r\n\u2502 {'id': 9983}       \u2502 {'id': 998.0}      \u2502\r\n\u2502 {'id': 9984}       \u2502 {'id': 998.0}      \u2502\r\n\u2502 {'id': 9985}       \u2502 {'id': 998.0}      \u2502\r\n\u2502 {'id': 9986}       \u2502 {'id': 998.0}      \u2502\r\n\u2502 {'id': 9987}       \u2502 {'id': 998.0}      \u2502\r\n\u2502 {'id': 9988}       \u2502 {'id': 998.0}      \u2502\r\n\u2502 {'id': 9989}       \u2502 {'id': 998.0}      \u2502\r\n\u2502 {'id': 9990}       \u2502 {'id': 999.0}      \u2502\r\n\u2502 {'id': 9991}       \u2502 {'id': 999.0}      \u2502\r\n\u2502 {'id': 9992}       \u2502 {'id': 999.0}      \u2502\r\n\u2502 {'id': 9993}       \u2502 {'id': 999.0}      \u2502\r\n\u2502 {'id': 9994}       \u2502 {'id': 999.0}      \u2502\r\n\u2502 {'id': 9995}       \u2502 {'id': 999.0}      \u2502\r\n\u2502 {'id': 9996}       \u2502 {'id': 999.0}      \u2502\r\n\u2502 {'id': 9997}       \u2502 {'id': 999.0}      \u2502\r\n\u2502 {'id': 9998}       \u2502 {'id': 999.0}      \u2502\r\n\u2502 {'id': 9999}       \u2502 {'id': 999.0}      \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 10000 rows (40 shown)         2 columns \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\nTable 6:\r\n```\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502         a          \u2502         b          \u2502\r\n\u2502 struct(id varchar) \u2502 struct(id varchar) \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 {'id': 0001}       \u2502 {'id': abc}        \u2502\r\n\u2502 {'id': 2049}       \u2502 {'id': 204.0}      \u2502\r\n\u2502 {'id': 4097}       \u2502 {'id': 409.0}      \u2502\r\n\u2502 {'id': 6145}       \u2502 {'id': 614.0}      \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\n@fredriknorlin thanks for reporting this, particularly for your efforts in making reproducers! We'll take a look.",
  "created_at": "2024-02-28T13:53:14Z"
}