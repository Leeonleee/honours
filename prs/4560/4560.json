{
  "repo": "duckdb/duckdb",
  "pull_number": 4560,
  "instance_id": "duckdb__duckdb-4560",
  "issue_numbers": [
    "4537"
  ],
  "base_commit": "0d2d7930d2789405a0d07a15e37485fe70faee3e",
  "patch": "diff --git a/tools/nodejs/src/statement.cpp b/tools/nodejs/src/statement.cpp\nindex b5536be0e886..e0c954c86d57 100644\n--- a/tools/nodejs/src/statement.cpp\n+++ b/tools/nodejs/src/statement.cpp\n@@ -139,18 +139,36 @@ static Napi::Value convert_col_val(Napi::Env &env, duckdb::Value dval, duckdb::L\n \tcase duckdb::LogicalTypeId::BOOLEAN: {\n \t\tvalue = Napi::Boolean::New(env, duckdb::BooleanValue::Get(dval));\n \t} break;\n+\tcase duckdb::LogicalTypeId::TINYINT: {\n+\t\tvalue = Napi::Number::New(env, duckdb::TinyIntValue::Get(dval));\n+\t} break;\n+\tcase duckdb::LogicalTypeId::SMALLINT: {\n+\t\tvalue = Napi::Number::New(env, duckdb::SmallIntValue::Get(dval));\n+\t} break;\n \tcase duckdb::LogicalTypeId::INTEGER: {\n \t\tvalue = Napi::Number::New(env, duckdb::IntegerValue::Get(dval));\n \t} break;\n+\tcase duckdb::LogicalTypeId::BIGINT: {\n+\t\tvalue = Napi::Number::New(env, duckdb::BigIntValue::Get(dval));\n+\t} break;\n+\tcase duckdb::LogicalTypeId::UTINYINT: {\n+\t\tvalue = Napi::Number::New(env, duckdb::UTinyIntValue::Get(dval));\n+\t} break;\n+\tcase duckdb::LogicalTypeId::USMALLINT: {\n+\t\tvalue = Napi::Number::New(env, duckdb::USmallIntValue::Get(dval));\n+\t} break;\n+\tcase duckdb::LogicalTypeId::UINTEGER: {\n+\t\tvalue = Napi::Number::New(env, duckdb::UIntegerValue::Get(dval));\n+\t} break;\n+\tcase duckdb::LogicalTypeId::UBIGINT: {\n+\t\tvalue = Napi::Number::New(env, duckdb::UBigIntValue::Get(dval));\n+\t} break;\n \tcase duckdb::LogicalTypeId::FLOAT: {\n \t\tvalue = Napi::Number::New(env, duckdb::FloatValue::Get(dval));\n \t} break;\n \tcase duckdb::LogicalTypeId::DOUBLE: {\n \t\tvalue = Napi::Number::New(env, duckdb::DoubleValue::Get(dval));\n \t} break;\n-\tcase duckdb::LogicalTypeId::BIGINT: {\n-\t\tvalue = Napi::Number::New(env, duckdb::BigIntValue::Get(dval));\n-\t} break;\n \tcase duckdb::LogicalTypeId::HUGEINT: {\n \t\tvalue = Napi::Number::New(env, dval.GetValue<double>());\n \t} break;\n",
  "test_patch": "diff --git a/tools/nodejs/test/data_type_support.test.js b/tools/nodejs/test/data_type_support.test.js\nindex 971945719a09..d8ff7b9b9636 100644\n--- a/tools/nodejs/test/data_type_support.test.js\n+++ b/tools/nodejs/test/data_type_support.test.js\n@@ -20,6 +20,33 @@ describe(\"data type support\", function () {\n       done();\n     });\n   });\n+\n+  it(\"supports INTEGER values\", function (done) {\n+    db.run(\"CREATE TABLE integer_table (a TINYINT, b SMALLINT, c INTEGER, d BIGINT, e UTINYINT, f USMALLINT, g UINTEGER, h UBIGINT)\");\n+    const stmt = db.prepare(\"INSERT INTO integer_table VALUES (?, ?, ?, ?, ?, ?, ?, ?)\");\n+\n+    // Numerical limits\n+    signedMinValue = (bitWidth) => Math.max(-(2**(bitWidth-1)-1)-1, Number.MIN_SAFE_INTEGER);\n+    signedMaxValue = (bitWidth) => Math.min(2**(bitWidth-1)-1, Number.MAX_SAFE_INTEGER);\n+    unsignedMaxValue = (bitWidth) => Math.min(2**(bitWidth)-1, Number.MAX_SAFE_INTEGER);\n+    let minValues = [signedMinValue(8), signedMinValue(16), signedMinValue(32), signedMinValue(64), 0, 0, 0, 0];\n+    let maxValues = [signedMinValue(8), signedMinValue(16), signedMinValue(32), signedMinValue(64), unsignedMaxValue(8), unsignedMaxValue(16), unsignedMaxValue(32), unsignedMaxValue(64)];\n+\n+    // Insert values\n+    stmt.run(...minValues);\n+    stmt.run(...maxValues);\n+\n+    db.prepare(\"SELECT * from integer_table;\").all((err, res) => {\n+      assert(err === null);\n+      assert(res.length === 2);\n+      assert(Object.entries(res[0]).length === 8);\n+      assert(Object.entries(res[1]).length === 8);\n+      assert.deepEqual(Object.entries(res[0]).map(v => v[1]), minValues);\n+      assert.deepEqual(Object.entries(res[1]).map(v => v[1]), maxValues);\n+      done();\n+    });\n+  });\n+\n   it(\"supports INTERVAL values\", function (done) {\n     db.prepare(\n       `SELECT\n",
  "problem_statement": "NodeJS binding crashes with UINTEGER\n### What happens?\n\nNodeJS client crashes when we use UINTEGER type.\r\n\r\nIf column has only a single value, we have an error:\r\n```sql\r\nVALUES (1::UINTEGER);\r\n```\r\n```\r\n[Error: Data type is not supported UINTEGER]\r\n```\r\n\r\nBut with multiple values it crashes:\r\n```sql\r\nVALUES (1::UINTEGER),(2::UINTEGER);\r\n```\r\n```\r\nFATAL ERROR: Error::ThrowAsJavaScriptException napi_throw\r\n 1: 0x10abc4b55 node::Abort() (.cold.1) [/Users/mpn/.nvm/versions/node/v18.1.0/bin/node]\r\n 2: 0x10969ed39 node::Abort() [/Users/mpn/.nvm/versions/node/v18.1.0/bin/node]\r\n 3: 0x10969eeaf node::OnFatalError(char const*, char const*) [/Users/mpn/.nvm/versions/node/v18.1.0/bin/node]\r\n 4: 0x10969ed49 node::FatalError(char const*, char const*) [/Users/mpn/.nvm/versions/node/v18.1.0/bin/node]\r\n 5: 0x10966cb8a napi_fatal_error [/Users/mpn/.nvm/versions/node/v18.1.0/bin/node]\r\n 6: 0x11143a75a Napi::Error::Fatal(char const*, char const*) [/Users/mpn/work/test/duckdb/node_modules/duckdb/lib/binding/duckdb.node]\r\n 7: 0x11143b39d Napi::Error::ThrowAsJavaScriptException() const [/Users/mpn/work/test/duckdb/node_modules/duckdb/lib/binding/duckdb.node]\r\n 8: 0x111450d37 node_duckdb::convert_col_val(Napi::Env&, duckdb::Value, duckdb::LogicalTypeId) [/Users/mpn/work/test/duckdb/node_modules/duckdb/lib/binding/duckdb.node]\r\n 9: 0x11145023a node_duckdb::convert_chunk(Napi::Env&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >, duckdb::DataChunk&) [/Users/mpn/work/test/duckdb/node_modules/duckdb/lib/binding/duckdb.node]\r\n10: 0x11144fcd0 node_duckdb::RunPreparedTask::Callback() [/Users/mpn/work/test/duckdb/node_modules/duckdb/lib/binding/duckdb.node]\r\n11: 0x111440363 node_duckdb::Task::DoCallback() [/Users/mpn/work/test/duckdb/node_modules/duckdb/lib/binding/duckdb.node]\r\n12: 0x11143d298 node_duckdb::TaskCompleteCallback(napi_env__*, napi_status, void*) [/Users/mpn/work/test/duckdb/node_modules/duckdb/lib/binding/duckdb.node]\r\n13: 0x10966f0e9 (anonymous namespace)::uvimpl::Work::AfterThreadPoolWork(int) [/Users/mpn/.nvm/versions/node/v18.1.0/bin/node]\r\n14: 0x10a13b228 uv__work_done [/Users/mpn/.nvm/versions/node/v18.1.0/bin/node]\r\n15: 0x10a1403eb uv__async_io [/Users/mpn/.nvm/versions/node/v18.1.0/bin/node]\r\n16: 0x10a1541db uv__io_poll [/Users/mpn/.nvm/versions/node/v18.1.0/bin/node]\r\n17: 0x10a140971 uv_run [/Users/mpn/.nvm/versions/node/v18.1.0/bin/node]\r\n18: 0x1095cff9f node::SpinEventLoop(node::Environment*) [/Users/mpn/.nvm/versions/node/v18.1.0/bin/node]\r\n19: 0x1096e1b71 node::NodeMainInstance::Run(int*, node::Environment*) [/Users/mpn/.nvm/versions/node/v18.1.0/bin/node]\r\n20: 0x1096e17e3 node::NodeMainInstance::Run() [/Users/mpn/.nvm/versions/node/v18.1.0/bin/node]\r\n21: 0x10966aca1 node::Start(int, char**) [/Users/mpn/.nvm/versions/node/v18.1.0/bin/node]\r\n22: 0x11547f52e \r\n[1]    93980 abort      node test.mjs\r\n```\r\n\n\n### To Reproduce\n\n```sql\r\nVALUES (1::UINTEGER),(2::UINTEGER);\r\n```\n\n### OS:\n\niOS\n\n### DuckDB Version:\n\nv0.4.1-dev2348\n\n### DuckDB Client:\n\nNodeJS\n\n### Full Name:\n\nMaxime Petitjean\n\n### Affiliation:\n\nStoic\n\n### Have you tried this on the latest `master` branch?\n\n- [X] I agree\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] I agree\n",
  "hints_text": "@samansmink can you have a look at this, ideally before the weekend? thanks!\nSure!",
  "created_at": "2022-09-02T11:57:06Z"
}