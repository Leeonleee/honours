{
  "repo": "duckdb/duckdb",
  "pull_number": 9816,
  "instance_id": "duckdb__duckdb-9816",
  "issue_numbers": [
    "9806",
    "9806"
  ],
  "base_commit": "275f4a7e9564db08cc3cda211e1f63a7967308cf",
  "patch": "diff --git a/src/optimizer/filter_combiner.cpp b/src/optimizer/filter_combiner.cpp\nindex 9461c20006fc..f3d6141a3fb9 100644\n--- a/src/optimizer/filter_combiner.cpp\n+++ b/src/optimizer/filter_combiner.cpp\n@@ -593,7 +593,7 @@ FilterResult FilterCombiner::AddBoundComparisonFilter(Expression &expr) {\n \t\tauto &scalar = left_is_scalar ? comparison.left : comparison.right;\n \t\tValue constant_value;\n \t\tif (!ExpressionExecutor::TryEvaluateScalar(context, *scalar, constant_value)) {\n-\t\t\treturn FilterResult::UNSATISFIABLE;\n+\t\t\treturn FilterResult::UNSUPPORTED;\n \t\t}\n \t\tif (constant_value.IsNull()) {\n \t\t\t// comparisons with null are always null (i.e. will never result in rows)\n",
  "test_patch": "diff --git a/test/issues/rigger/overflow_filter_pushdown.test b/test/issues/rigger/overflow_filter_pushdown.test\nnew file mode 100644\nindex 000000000000..2c2cef9a6417\n--- /dev/null\n+++ b/test/issues/rigger/overflow_filter_pushdown.test\n@@ -0,0 +1,24 @@\n+# name: test/issues/rigger/overflow_filter_pushdown.test\n+# description: Issue #9806 - Unexpected Results when using IS NOT NULL\n+# group: [rigger]\n+\n+statement ok\n+CREATE TABLE t0(c0 INT);\n+\n+statement ok\n+INSERT INTO t0 VALUES (1);\n+\n+query I\n+SELECT * FROM t0;\n+----\n+1\n+\n+query I\n+SELECT c0>=(2147483647 + 1 IS NOT NULL) FROM t0;\n+----\n+true\n+\n+query I\n+SELECT * FROM t0 WHERE c0>=(2147483647 + 1 IS NOT NULL);\n+----\n+1\n",
  "problem_statement": "Unexpected Results when using IS NOT NULL\n### What happens?\n\nConsidering the test case below: The third `SELECT` returns an empty result, which is surprising: If the result of second query is `true`, the value of the comparison expression should be true, and thus the third query should return the row in `t0`. \n\n### To Reproduce\n\n```sql\r\nCREATE TABLE t0(c0 INT);\r\nINSERT INTO t0 VALUES (1);\r\n\r\n-- Here 2147483647 + 1 could be any two integers adding up larger than INT32 and causing an overflow\r\nSELECT * FROM t0; -- 1\r\nSELECT c0>=(2147483647 + 1 IS NOT NULL) FROM t0; -- true\r\nSELECT * FROM t0 WHERE c0>=(2147483647 + 1 IS NOT NULL); \r\n-- Expected: 1\r\n-- Actual: empty\r\n```\n\n### OS:\n\nubuntu 22.04\n\n### DuckDB Version:\n\nv0.9.3-dev879 ff339cdc95\n\n### DuckDB Client:\n\nCLI\n\n### Full Name:\n\nSuyang Zhong\n\n### Affiliation:\n\nNUS\n\n### Have you tried this on the latest `main` branch?\n\nI have tested with a main build\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] Yes, I have\nUnexpected Results when using IS NOT NULL\n### What happens?\n\nConsidering the test case below: The third `SELECT` returns an empty result, which is surprising: If the result of second query is `true`, the value of the comparison expression should be true, and thus the third query should return the row in `t0`. \n\n### To Reproduce\n\n```sql\r\nCREATE TABLE t0(c0 INT);\r\nINSERT INTO t0 VALUES (1);\r\n\r\n-- Here 2147483647 + 1 could be any two integers adding up larger than INT32 and causing an overflow\r\nSELECT * FROM t0; -- 1\r\nSELECT c0>=(2147483647 + 1 IS NOT NULL) FROM t0; -- true\r\nSELECT * FROM t0 WHERE c0>=(2147483647 + 1 IS NOT NULL); \r\n-- Expected: 1\r\n-- Actual: empty\r\n```\n\n### OS:\n\nubuntu 22.04\n\n### DuckDB Version:\n\nv0.9.3-dev879 ff339cdc95\n\n### DuckDB Client:\n\nCLI\n\n### Full Name:\n\nSuyang Zhong\n\n### Affiliation:\n\nNUS\n\n### Have you tried this on the latest `main` branch?\n\nI have tested with a main build\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] Yes, I have\n",
  "hints_text": "\n",
  "created_at": "2023-11-27T14:49:36Z"
}