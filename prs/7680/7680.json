{
  "repo": "duckdb/duckdb",
  "pull_number": 7680,
  "instance_id": "duckdb__duckdb-7680",
  "issue_numbers": [
    "7663",
    "7663"
  ],
  "base_commit": "aac029220ae28679b98bfbb68cdee5572ecfcccf",
  "patch": "diff --git a/src/catalog/catalog_search_path.cpp b/src/catalog/catalog_search_path.cpp\nindex b7c6a882e3df..f609d068e240 100644\n--- a/src/catalog/catalog_search_path.cpp\n+++ b/src/catalog/catalog_search_path.cpp\n@@ -5,6 +5,7 @@\n #include \"duckdb/common/string_util.hpp\"\n #include \"duckdb/main/client_context.hpp\"\n #include \"duckdb/catalog/catalog.hpp\"\n+#include \"duckdb/main/database_manager.hpp\"\n \n namespace duckdb {\n \n@@ -225,4 +226,20 @@ void CatalogSearchPath::SetPaths(vector<CatalogSearchEntry> new_paths) {\n \tpaths.emplace_back(SYSTEM_CATALOG, \"pg_catalog\");\n }\n \n+bool CatalogSearchPath::SchemaInSearchPath(ClientContext &context, const string &catalog_name,\n+                                           const string &schema_name) {\n+\tfor (auto &path : paths) {\n+\t\tif (path.schema != schema_name) {\n+\t\t\tcontinue;\n+\t\t}\n+\t\tif (path.catalog == catalog_name) {\n+\t\t\treturn true;\n+\t\t}\n+\t\tif (IsInvalidCatalog(path.catalog) && catalog_name == DatabaseManager::GetDefaultDatabase(context)) {\n+\t\t\treturn true;\n+\t\t}\n+\t}\n+\treturn false;\n+}\n+\n } // namespace duckdb\ndiff --git a/src/core_functions/function_list.cpp b/src/core_functions/function_list.cpp\nindex eced050363de..04fd3975069e 100644\n--- a/src/core_functions/function_list.cpp\n+++ b/src/core_functions/function_list.cpp\n@@ -169,6 +169,7 @@ static StaticFunctionDefinition internal_functions[] = {\n \tDUCKDB_SCALAR_FUNCTION_SET(HexFun),\n \tDUCKDB_AGGREGATE_FUNCTION_SET(HistogramFun),\n \tDUCKDB_SCALAR_FUNCTION_SET(HoursFun),\n+\tDUCKDB_SCALAR_FUNCTION(InSearchPathFun),\n \tDUCKDB_SCALAR_FUNCTION(InstrFun),\n \tDUCKDB_SCALAR_FUNCTION_SET(IsFiniteFun),\n \tDUCKDB_SCALAR_FUNCTION_SET(IsInfiniteFun),\ndiff --git a/src/core_functions/scalar/generic/functions.json b/src/core_functions/scalar/generic/functions.json\nindex da54fee91b72..1194a2a689a8 100644\n--- a/src/core_functions/scalar/generic/functions.json\n+++ b/src/core_functions/scalar/generic/functions.json\n@@ -84,6 +84,13 @@\n         \"example\": \"current_database()\",\n         \"type\": \"scalar_function\"\n     },\n+    {\n+        \"name\": \"in_search_path\",\n+        \"parameters\": \"database_name,schema_name\",\n+        \"description\": \"Returns whether or not the database/schema are in the search path.\",\n+        \"example\": \"in_search_path('memory', 'main')\",\n+        \"type\": \"scalar_function\"\n+    },\n     {\n         \"name\": \"txid_current\",\n         \"parameters\": \"\",\ndiff --git a/src/core_functions/scalar/generic/system_functions.cpp b/src/core_functions/scalar/generic/system_functions.cpp\nindex d3302f920d84..1bfb8555b182 100644\n--- a/src/core_functions/scalar/generic/system_functions.cpp\n+++ b/src/core_functions/scalar/generic/system_functions.cpp\n@@ -49,6 +49,16 @@ static void CurrentSchemasFunction(DataChunk &input, ExpressionState &state, Vec\n \tresult.Reference(val);\n }\n \n+// in_search_path\n+static void InSearchPathFunction(DataChunk &input, ExpressionState &state, Vector &result) {\n+\tauto &context = state.GetContext();\n+\tauto &search_path = ClientData::Get(context).catalog_search_path;\n+\tBinaryExecutor::Execute<string_t, string_t, bool>(\n+\t    input.data[0], input.data[1], result, input.size(), [&](string_t db_name, string_t schema_name) {\n+\t\t    return search_path->SchemaInSearchPath(context, db_name.GetString(), schema_name.GetString());\n+\t    });\n+}\n+\n // txid_current\n static void TransactionIdCurrent(DataChunk &input, ExpressionState &state, Vector &result) {\n \tauto &context = state.GetContext();\n@@ -83,6 +93,10 @@ ScalarFunction CurrentSchemasFun::GetFunction() {\n \treturn ScalarFunction({LogicalType::BOOLEAN}, varchar_list_type, CurrentSchemasFunction);\n }\n \n+ScalarFunction InSearchPathFun::GetFunction() {\n+\treturn ScalarFunction({LogicalType::VARCHAR, LogicalType::VARCHAR}, LogicalType::BOOLEAN, InSearchPathFunction);\n+}\n+\n ScalarFunction CurrentTransactionIdFun::GetFunction() {\n \treturn ScalarFunction({}, LogicalType::BIGINT, TransactionIdCurrent);\n }\ndiff --git a/src/function/pragma/pragma_queries.cpp b/src/function/pragma/pragma_queries.cpp\nindex 61a7cf4d1d5b..f8a0ea1ec18a 100644\n--- a/src/function/pragma/pragma_queries.cpp\n+++ b/src/function/pragma/pragma_queries.cpp\n@@ -18,21 +18,18 @@ string PragmaTableInfo(ClientContext &context, const FunctionParameters &paramet\n }\n \n string PragmaShowTables(ClientContext &context, const FunctionParameters &parameters) {\n-\tauto catalog = DatabaseManager::GetDefaultDatabase(context);\n-\tauto schema = ClientData::Get(context).catalog_search_path->GetDefault().schema;\n-\tschema = (schema == INVALID_SCHEMA) ? DEFAULT_SCHEMA : schema; // NOLINT\n-\n-\tauto where_clause = StringUtil::Format(\"where ((database_name = '%s') and (schema_name = '%s'))\", catalog, schema);\n \t// clang-format off\n-\tauto pragma_query = StringUtil::Format(R\"EOF(\n+\treturn R\"EOF(\n \twith \"tables\" as\n \t(\n \t\tSELECT table_name as \"name\"\n-\t\tFROM duckdb_tables %s\n+\t\tFROM duckdb_tables\n+\t\twhere in_search_path(database_name, schema_name)\n \t), \"views\" as\n \t(\n \t\tSELECT view_name as \"name\"\n-\t\tFROM duckdb_views %s\n+\t\tFROM duckdb_views\n+\t\twhere in_search_path(database_name, schema_name)\n \t), db_objects as\n \t(\n \t\tSELECT \"name\" FROM \"tables\"\n@@ -41,26 +38,39 @@ string PragmaShowTables(ClientContext &context, const FunctionParameters &parame\n \t)\n \tSELECT \"name\"\n \tFROM db_objects\n-\tORDER BY \"name\";)EOF\", where_clause, where_clause);\n+\tORDER BY \"name\";)EOF\";\n \t// clang-format on\n-\n-\treturn pragma_query;\n }\n \n string PragmaShowTablesExpanded(ClientContext &context, const FunctionParameters &parameters) {\n \treturn R\"(\n-\t\t\tSELECT\n-\t\t\t\tt.database_name AS database,\n-\t\t\t\tt.schema_name AS schema,\n-\t\t\t\tt.table_name,\n-\t\t\t\tLIST(c.column_name order by c.column_index) AS column_names,\n-\t\t\t\tLIST(c.data_type order by c.column_index) AS column_types,\n-\t\t\t\tFIRST(t.temporary) AS temporary,\n-\t\t\tFROM duckdb_tables t\n-\t\t\tJOIN duckdb_columns c\n-\t\t\tUSING (table_oid)\n-\t\t\tGROUP BY t.database_name, t.schema_name, t.table_name\n-\t\t\tORDER BY t.database_name, t.schema_name, t.table_name;\n+\tSELECT\n+\t\tt.database_name AS database,\n+\t\tt.schema_name AS schema,\n+\t\tt.table_name AS name,\n+\t\tLIST(c.column_name order by c.column_index) AS column_names,\n+\t\tLIST(c.data_type order by c.column_index) AS column_types,\n+\t\tFIRST(t.temporary) AS temporary,\n+\tFROM duckdb_tables t\n+\tJOIN duckdb_columns c\n+\tUSING (table_oid)\n+\tGROUP BY database, schema, name\n+\n+\tUNION ALL\n+\n+\tSELECT\n+\t\tv.database_name AS database,\n+\t\tv.schema_name AS schema,\n+\t\tv.view_name AS name,\n+\t\tLIST(c.column_name order by c.column_index) AS column_names,\n+\t\tLIST(c.data_type order by c.column_index) AS column_types,\n+\t\tFIRST(v.temporary) AS temporary,\n+\tFROM duckdb_views v\n+\tJOIN duckdb_columns c\n+\tON (v.view_oid=c.table_oid)\n+\tGROUP BY database, schema, name\n+\n+\tORDER BY database, schema, name\n \t)\";\n }\n \ndiff --git a/src/include/duckdb/catalog/catalog_search_path.hpp b/src/include/duckdb/catalog/catalog_search_path.hpp\nindex 9d27f01eda8c..da6da08ec508 100644\n--- a/src/include/duckdb/catalog/catalog_search_path.hpp\n+++ b/src/include/duckdb/catalog/catalog_search_path.hpp\n@@ -56,6 +56,8 @@ class CatalogSearchPath {\n \tDUCKDB_API vector<string> GetSchemasForCatalog(const string &catalog);\n \tDUCKDB_API vector<string> GetCatalogsForSchema(const string &schema);\n \n+\tDUCKDB_API bool SchemaInSearchPath(ClientContext &context, const string &catalog_name, const string &schema_name);\n+\n private:\n \tvoid SetPaths(vector<CatalogSearchEntry> new_paths);\n \ndiff --git a/src/include/duckdb/core_functions/scalar/generic_functions.hpp b/src/include/duckdb/core_functions/scalar/generic_functions.hpp\nindex e55af139ec16..ca060da1a027 100644\n--- a/src/include/duckdb/core_functions/scalar/generic_functions.hpp\n+++ b/src/include/duckdb/core_functions/scalar/generic_functions.hpp\n@@ -121,6 +121,15 @@ struct CurrentDatabaseFun {\n \tstatic ScalarFunction GetFunction();\n };\n \n+struct InSearchPathFun {\n+\tstatic constexpr const char *Name = \"in_search_path\";\n+\tstatic constexpr const char *Parameters = \"database_name,schema_name\";\n+\tstatic constexpr const char *Description = \"Returns whether or not the database/schema are in the search path.\";\n+\tstatic constexpr const char *Example = \"in_search_path('memory', 'main')\";\n+\n+\tstatic ScalarFunction GetFunction();\n+};\n+\n struct CurrentTransactionIdFun {\n \tstatic constexpr const char *Name = \"txid_current\";\n \tstatic constexpr const char *Parameters = \"\";\ndiff --git a/src/include/duckdb/core_functions/scalar/map_functions.hpp b/src/include/duckdb/core_functions/scalar/map_functions.hpp\nindex 865328980c67..9f6c2a609d6b 100644\n--- a/src/include/duckdb/core_functions/scalar/map_functions.hpp\n+++ b/src/include/duckdb/core_functions/scalar/map_functions.hpp\n@@ -43,10 +43,7 @@ struct MapEntriesFun {\n struct MapExtractFun {\n \tstatic constexpr const char *Name = \"map_extract\";\n \tstatic constexpr const char *Parameters = \"map,key\";\n-\tstatic constexpr const char *Description =\n-\t    \"Return a list containing the value for a given key or an empty list if the key is not contained in the map. \"\n-\t    \"The type of the key provided in the second parameter must match the type of the map\u2019s keys else an error is \"\n-\t    \"returned.\";\n+\tstatic constexpr const char *Description = \"Return a list containing the value for a given key or an empty list if the key is not contained in the map. The type of the key provided in the second parameter must match the type of the map\u2019s keys else an error is returned.\";\n \tstatic constexpr const char *Example = \"map_extract(map(['key'], ['val']), 'key')\";\n \n \tstatic ScalarFunction GetFunction();\n@@ -70,8 +67,7 @@ struct MapFromEntriesFun {\n struct MapConcatFun {\n \tstatic constexpr const char *Name = \"map_concat\";\n \tstatic constexpr const char *Parameters = \"any,...\";\n-\tstatic constexpr const char *Description = \"Returns a map created from merging the input maps, on key collision \"\n-\t                                           \"the value is taken from the last map with that key\";\n+\tstatic constexpr const char *Description = \"Returns a map created from merging the input maps, on key collision the value is taken from the last map with that key\";\n \tstatic constexpr const char *Example = \"map_concat(map([1,2], ['a', 'b']), map([2,3], ['c', 'd']));\";\n \n \tstatic ScalarFunction GetFunction();\ndiff --git a/src/include/duckdb/core_functions/scalar/string_functions.hpp b/src/include/duckdb/core_functions/scalar/string_functions.hpp\nindex 5409fe93695c..75034d387bfa 100644\n--- a/src/include/duckdb/core_functions/scalar/string_functions.hpp\n+++ b/src/include/duckdb/core_functions/scalar/string_functions.hpp\n@@ -31,8 +31,7 @@ struct StartsWithFun {\n struct ASCIIFun {\n \tstatic constexpr const char *Name = \"ascii\";\n \tstatic constexpr const char *Parameters = \"string\";\n-\tstatic constexpr const char *Description =\n-\t    \"Returns an integer that represents the Unicode code point of the first character of the string.\";\n+\tstatic constexpr const char *Description = \"Returns an integer that represents the Unicode code point of the first character of the string.\";\n \tstatic constexpr const char *Example = \"ascii('\u03a9')\";\n \n \tstatic ScalarFunction GetFunction();\n@@ -41,8 +40,7 @@ struct ASCIIFun {\n struct BarFun {\n \tstatic constexpr const char *Name = \"bar\";\n \tstatic constexpr const char *Parameters = \"x,min,max,width\";\n-\tstatic constexpr const char *Description = \"Draw a band whose width is proportional to (x - min) and equal to \"\n-\t                                           \"width characters when x = max. width defaults to 80.\";\n+\tstatic constexpr const char *Description = \"Draw a band whose width is proportional to (x - min) and equal to width characters when x = max. width defaults to 80.\";\n \tstatic constexpr const char *Example = \"bar(5, 0, 20, 10)\";\n \n \tstatic ScalarFunctionSet GetFunctions();\n@@ -66,8 +64,7 @@ struct ToBinaryFun {\n struct ChrFun {\n \tstatic constexpr const char *Name = \"chr\";\n \tstatic constexpr const char *Parameters = \"code_point\";\n-\tstatic constexpr const char *Description =\n-\t    \"returns a character which is corresponding the ASCII code value or Unicode code point\";\n+\tstatic constexpr const char *Description = \"returns a character which is corresponding the ASCII code value or Unicode code point\";\n \tstatic constexpr const char *Example = \"chr(65)\";\n \n \tstatic ScalarFunction GetFunction();\n@@ -76,10 +73,7 @@ struct ChrFun {\n struct DamerauLevenshteinFun {\n \tstatic constexpr const char *Name = \"damerau_levenshtein\";\n \tstatic constexpr const char *Parameters = \"str1,str2\";\n-\tstatic constexpr const char *Description =\n-\t    \"Extension of Levenshtein distance to also include transposition of adjacent characters as an allowed edit \"\n-\t    \"operation. In other words, the minimum number of edit operations (insertions, deletions, substitutions or \"\n-\t    \"transpositions) required to change one string to another. Different case is considered different.\";\n+\tstatic constexpr const char *Description = \"Extension of Levenshtein distance to also include transposition of adjacent characters as an allowed edit operation. In other words, the minimum number of edit operations (insertions, deletions, substitutions or transpositions) required to change one string to another. Different case is considered different.\";\n \tstatic constexpr const char *Example = \"damerau_levenshtein('hello', 'world')\";\n \n \tstatic ScalarFunction GetFunction();\n@@ -112,8 +106,7 @@ struct FormatreadabledecimalsizeFun {\n struct HammingFun {\n \tstatic constexpr const char *Name = \"hamming\";\n \tstatic constexpr const char *Parameters = \"str1,str2\";\n-\tstatic constexpr const char *Description = \"The number of positions with different characters for 2 strings of \"\n-\t                                           \"equal length. Different case is considered different.\";\n+\tstatic constexpr const char *Description = \"The number of positions with different characters for 2 strings of equal length. Different case is considered different.\";\n \tstatic constexpr const char *Example = \"hamming('duck','luck')\";\n \n \tstatic ScalarFunction GetFunction();\n@@ -143,8 +136,7 @@ struct ToHexFun {\n struct InstrFun {\n \tstatic constexpr const char *Name = \"instr\";\n \tstatic constexpr const char *Parameters = \"haystack,needle\";\n-\tstatic constexpr const char *Description =\n-\t    \"Return location of first occurrence of needle in haystack, counting from 1. Returns 0 if no match found.\";\n+\tstatic constexpr const char *Description = \"Return location of first occurrence of needle in haystack, counting from 1. Returns 0 if no match found.\";\n \tstatic constexpr const char *Example = \"instr('test test','es')\";\n \n \tstatic ScalarFunction GetFunction();\n@@ -165,8 +157,7 @@ struct PositionFun {\n struct JaccardFun {\n \tstatic constexpr const char *Name = \"jaccard\";\n \tstatic constexpr const char *Parameters = \"str1,str2\";\n-\tstatic constexpr const char *Description = \"The Jaccard similarity between two strings. Different case is \"\n-\t                                           \"considered different. Returns a number between 0 and 1.\";\n+\tstatic constexpr const char *Description = \"The Jaccard similarity between two strings. Different case is considered different. Returns a number between 0 and 1.\";\n \tstatic constexpr const char *Example = \"jaccard('duck','luck')\";\n \n \tstatic ScalarFunction GetFunction();\n@@ -175,8 +166,7 @@ struct JaccardFun {\n struct JaroSimilarityFun {\n \tstatic constexpr const char *Name = \"jaro_similarity\";\n \tstatic constexpr const char *Parameters = \"str1,str2\";\n-\tstatic constexpr const char *Description = \"The Jaro similarity between two strings. Different case is considered \"\n-\t                                           \"different. Returns a number between 0 and 1.\";\n+\tstatic constexpr const char *Description = \"The Jaro similarity between two strings. Different case is considered different. Returns a number between 0 and 1.\";\n \tstatic constexpr const char *Example = \"jaro_similarity('duck','duckdb')\";\n \n \tstatic ScalarFunction GetFunction();\n@@ -185,8 +175,7 @@ struct JaroSimilarityFun {\n struct JaroWinklerSimilarityFun {\n \tstatic constexpr const char *Name = \"jaro_winkler_similarity\";\n \tstatic constexpr const char *Parameters = \"str1,str2\";\n-\tstatic constexpr const char *Description = \"The Jaro-Winkler similarity between two strings. Different case is \"\n-\t                                           \"considered different. Returns a number between 0 and 1.\";\n+\tstatic constexpr const char *Description = \"The Jaro-Winkler similarity between two strings. Different case is considered different. Returns a number between 0 and 1.\";\n \tstatic constexpr const char *Example = \"jaro_winkler_similarity('duck','duckdb')\";\n \n \tstatic ScalarFunction GetFunction();\n@@ -213,9 +202,7 @@ struct LeftGraphemeFun {\n struct LevenshteinFun {\n \tstatic constexpr const char *Name = \"levenshtein\";\n \tstatic constexpr const char *Parameters = \"str1,str2\";\n-\tstatic constexpr const char *Description =\n-\t    \"The minimum number of single-character edits (insertions, deletions or substitutions) required to change one \"\n-\t    \"string to the other. Different case is considered different.\";\n+\tstatic constexpr const char *Description = \"The minimum number of single-character edits (insertions, deletions or substitutions) required to change one string to the other. Different case is considered different.\";\n \tstatic constexpr const char *Example = \"levenshtein('duck','db')\";\n \n \tstatic ScalarFunction GetFunction();\n@@ -230,8 +217,7 @@ struct Editdist3Fun {\n struct LpadFun {\n \tstatic constexpr const char *Name = \"lpad\";\n \tstatic constexpr const char *Parameters = \"string,count,character\";\n-\tstatic constexpr const char *Description =\n-\t    \"Pads the string with the character from the left until it has count characters\";\n+\tstatic constexpr const char *Description = \"Pads the string with the character from the left until it has count characters\";\n \tstatic constexpr const char *Example = \"lpad('hello', 10, '>')\";\n \n \tstatic ScalarFunction GetFunction();\n@@ -240,8 +226,7 @@ struct LpadFun {\n struct LtrimFun {\n \tstatic constexpr const char *Name = \"ltrim\";\n \tstatic constexpr const char *Parameters = \"string,characters\";\n-\tstatic constexpr const char *Description =\n-\t    \"Removes any occurrences of any of the characters from the left side of the string\";\n+\tstatic constexpr const char *Description = \"Removes any occurrences of any of the characters from the left side of the string\";\n \tstatic constexpr const char *Example = \"ltrim('>>>>test<<', '><')\";\n \n \tstatic ScalarFunctionSet GetFunctions();\n@@ -340,8 +325,7 @@ struct RightGraphemeFun {\n struct RpadFun {\n \tstatic constexpr const char *Name = \"rpad\";\n \tstatic constexpr const char *Parameters = \"string,count,character\";\n-\tstatic constexpr const char *Description =\n-\t    \"Pads the string with the character from the right until it has count characters\";\n+\tstatic constexpr const char *Description = \"Pads the string with the character from the right until it has count characters\";\n \tstatic constexpr const char *Example = \"rpad('hello', 10, '<')\";\n \n \tstatic ScalarFunction GetFunction();\n@@ -350,8 +334,7 @@ struct RpadFun {\n struct RtrimFun {\n \tstatic constexpr const char *Name = \"rtrim\";\n \tstatic constexpr const char *Parameters = \"string,characters\";\n-\tstatic constexpr const char *Description =\n-\t    \"Removes any occurrences of any of the characters from the right side of the string\";\n+\tstatic constexpr const char *Description = \"Removes any occurrences of any of the characters from the right side of the string\";\n \tstatic constexpr const char *Example = \"rtrim('>>>>test<<', '><')\";\n \n \tstatic ScalarFunctionSet GetFunctions();\n@@ -408,9 +391,7 @@ struct RegexpSplitToArrayFun {\n struct TranslateFun {\n \tstatic constexpr const char *Name = \"translate\";\n \tstatic constexpr const char *Parameters = \"string,from,to\";\n-\tstatic constexpr const char *Description =\n-\t    \"Replaces each character in string that matches a character in the from set with the corresponding character \"\n-\t    \"in the to set. If from is longer than to, occurrences of the extra characters in from are deleted.\";\n+\tstatic constexpr const char *Description = \"Replaces each character in string that matches a character in the from set with the corresponding character in the to set. If from is longer than to, occurrences of the extra characters in from are deleted.\";\n \tstatic constexpr const char *Example = \"translate('12345', '143', 'ax')\";\n \n \tstatic ScalarFunction GetFunction();\n@@ -419,8 +400,7 @@ struct TranslateFun {\n struct TrimFun {\n \tstatic constexpr const char *Name = \"trim\";\n \tstatic constexpr const char *Parameters = \"string,characters\";\n-\tstatic constexpr const char *Description =\n-\t    \"Removes any occurrences of any of the characters from either side of the string\";\n+\tstatic constexpr const char *Description = \"Removes any occurrences of any of the characters from either side of the string\";\n \tstatic constexpr const char *Example = \"trim('>>>>test<<', '><')\";\n \n \tstatic ScalarFunctionSet GetFunctions();\n",
  "test_patch": "diff --git a/test/sql/attach/attach_show_table.test b/test/sql/attach/attach_show_table.test\nindex a3fcacf069a8..e82391e81191 100644\n--- a/test/sql/attach/attach_show_table.test\n+++ b/test/sql/attach/attach_show_table.test\n@@ -51,4 +51,11 @@ USE db2.test_schema;\n query I\n SHOW TABLES\n ----\n+table_in_db2\n table_in_db2_test_schema\n+\n+statement ok\n+FROM table_in_db2\n+\n+statement ok\n+FROM table_in_db2_test_schema\ndiff --git a/test/sql/pragma/test_show_tables_temp_views.test b/test/sql/pragma/test_show_tables_temp_views.test\nnew file mode 100644\nindex 000000000000..a17fda9761fc\n--- /dev/null\n+++ b/test/sql/pragma/test_show_tables_temp_views.test\n@@ -0,0 +1,55 @@\n+# name: test/sql/pragma/test_show_tables_temp_views.test\n+# description: Test SHOW/DESCRIBE tables with views\n+# group: [pragma]\n+\n+require noforcestorage\n+\n+statement ok\n+CREATE TEMPORARY VIEW v1 AS SELECT 42 AS a\n+\n+query I\n+SHOW TABLES\n+----\n+v1\n+\n+query IIIIII\n+SHOW ALL TABLES\n+----\n+temp\tmain\tv1\t[a]\t[INTEGER]\ttrue\n+\n+statement ok\n+CREATE VIEW v2 AS SELECT 42 AS b\n+\n+statement ok\n+CREATE SCHEMA s1;\n+\n+statement ok\n+CREATE VIEW s1.v3 AS SELECT 42 AS c\n+\n+query I\n+SHOW TABLES\n+----\n+v1\n+v2\n+\n+query IIIIII\n+SHOW ALL TABLES\n+----\n+memory\tmain\tv2\t[b]\t[INTEGER]\tfalse\n+memory\ts1\tv3\t[c]\t[INTEGER]\tfalse\n+temp\tmain\tv1\t[a]\t[INTEGER]\ttrue\n+\n+statement ok\n+SET schema='s1';\n+\n+query I\n+FROM v2\n+----\n+42\n+\n+query I\n+SHOW TABLES\n+----\n+v1\n+v2\n+v3\n",
  "problem_statement": "Neither SHOW TABLES nor SHOW ALL TABLES  show temporary views\n### What happens?\n\nWe made some changes to SHOW TABLES/SHOW ALL TABLES, and it seems those have caused the schema search path to no longer be correctly respected.\n\n### To Reproduce\n\n```sql\r\nD create temporary view v1 as select 42;\r\nD show tables;\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502  name   \u2502\r\n\u2502 varchar \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 0 rows  \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\nD show all tables;\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 database \u2502 schema  \u2502 table_name \u2502 column_names \u2502 column_types \u2502 temporary \u2502\r\n\u2502 varchar  \u2502 varchar \u2502  varchar   \u2502  varchar[]   \u2502  varchar[]   \u2502  boolean  \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502                                  0 rows                                   \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\n\n### OS:\n\nMacOS\n\n### DuckDB Version:\n\nlatest\n\n### DuckDB Client:\n\nCLI\n\n### Full Name:\n\nMark Raasveldt\n\n### Affiliation:\n\nDuckDB Labs\n\n### Have you tried this on the latest `master` branch?\n\n- [X] I agree\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] I agree\nNeither SHOW TABLES nor SHOW ALL TABLES  show temporary views\n### What happens?\n\nWe made some changes to SHOW TABLES/SHOW ALL TABLES, and it seems those have caused the schema search path to no longer be correctly respected.\n\n### To Reproduce\n\n```sql\r\nD create temporary view v1 as select 42;\r\nD show tables;\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502  name   \u2502\r\n\u2502 varchar \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 0 rows  \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\nD show all tables;\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 database \u2502 schema  \u2502 table_name \u2502 column_names \u2502 column_types \u2502 temporary \u2502\r\n\u2502 varchar  \u2502 varchar \u2502  varchar   \u2502  varchar[]   \u2502  varchar[]   \u2502  boolean  \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502                                  0 rows                                   \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\n\n### OS:\n\nMacOS\n\n### DuckDB Version:\n\nlatest\n\n### DuckDB Client:\n\nCLI\n\n### Full Name:\n\nMark Raasveldt\n\n### Affiliation:\n\nDuckDB Labs\n\n### Have you tried this on the latest `master` branch?\n\n- [X] I agree\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] I agree\n",
  "hints_text": "\n",
  "created_at": "2023-05-25T13:03:48Z"
}