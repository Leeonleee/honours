{
  "repo": "duckdb/duckdb",
  "pull_number": 5130,
  "instance_id": "duckdb__duckdb-5130",
  "issue_numbers": [
    "5125"
  ],
  "base_commit": "80276d09a30c3775c237b8b88e4794308173e01d",
  "patch": "diff --git a/tools/nodejs/src/statement.cpp b/tools/nodejs/src/statement.cpp\nindex e0c954c86d57..0b1ffde1d36a 100644\n--- a/tools/nodejs/src/statement.cpp\n+++ b/tools/nodejs/src/statement.cpp\n@@ -225,8 +225,7 @@ static Napi::Value convert_col_val(Napi::Env &env, duckdb::Value dval, duckdb::L\n \t\tvalue = object_value;\n \t} break;\n \tdefault:\n-\t\tNapi::Error::New(env, \"Data type is not supported \" + dval.type().ToString()).ThrowAsJavaScriptException();\n-\t\treturn env.Null();\n+\t\tvalue = Napi::String::New(env, dval.ToString());\n \t}\n \n \treturn value;\n",
  "test_patch": "diff --git a/tools/nodejs/test/data_type_support.test.js b/tools/nodejs/test/data_type_support.test.js\nindex d8ff7b9b9636..aceff734a6f3 100644\n--- a/tools/nodejs/test/data_type_support.test.js\n+++ b/tools/nodejs/test/data_type_support.test.js\n@@ -188,4 +188,10 @@ describe(\"data type support\", function () {\n       done();\n     });\n   });\n+  it(\"converts unsupported data types to strings\", function(done) {\n+      db.all(\"SELECT CAST('11:10:10' AS TIME) as time\", function(err, rows) {\n+          assert.equal(rows[0].time, '11:10:10');\n+          done();\n+      });\n+  });\n });\n",
  "problem_statement": "Querying a `TIME` type from NodeJS crashes the Javascript Interpreter\n### What happens?\n\nJavascript does not have support for a built-in `TIME` data type, so if you try to query for a `TIME` column from Node you are supposed to get a Javascript exception about the data type being unsupported, but instead, the interpreter crashes like so:\r\n\r\n```\r\n> Uncaught Error: Data type is not supported TIME\r\n> node[76445]: ../src/node_util.cc:242:static void node::util::WeakReference::DecRef(const FunctionCallbackInfo<v8::Value> &): Assertion `(weak_ref->reference_count_) >= (1)' failed.\r\n 1: 0x10728a4e8 node::Abort() [/usr/local/Cellar/node/18.10.0/bin/node]\r\n 2: 0x10728a4d3 node::Abort() [/usr/local/Cellar/node/18.10.0/bin/node]\r\n 3: 0x10731a7b4 node::util::GuessHandleType(v8::FunctionCallbackInfo<v8::Value> const&) [/usr/local/Cellar/node/18.10.0/bin/node]\r\n 4: 0x107436c37 v8::internal::FunctionCallbackArguments::Call(v8::internal::CallHandlerInfo) [/usr/local/Cellar/node/18.10.0/bin/node]\r\n 5: 0x107436a1d v8::internal::MaybeHandle<v8::internal::Object> v8::internal::(anonymous namespace)::HandleApiCallHelper<false>(v8::internal::Isolate*, v8::internal::Handle<v8::internal::HeapObject>, v8::internal::Handle<v8::internal::HeapObject>, v8::internal::Handle<v8::internal::FunctionTemplateInfo>, v8::internal::Handle<v8::internal::Object>, v8::internal::BuiltinArguments) [/usr/local/Cellar/node/18.10.0/bin/node]\r\n 6: 0x1074364a5 v8::internal::Builtin_HandleApiCall(int, unsigned long*, v8::internal::Isolate*) [/usr/local/Cellar/node/18.10.0/bin/node]\r\n 7: 0x1070dfef9 Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit [/usr/local/Cellar/node/18.10.0/bin/node]\r\n```\n\n### To Reproduce\n\nHere's some NodeJS code to run that can easily reproduce the issue:\r\n\r\n```\r\nconst { Database } = require('duckdb');\r\nconst db = new Database('/tmp/test.db');\r\ndb.all(\"SELECT CAST('11:10:10' as TIME) as time\", function(err, res) {\r\n  if (err) {\r\n    console.log(\"An error!\");\r\n  }\r\n  console.log(res[0].time);\r\n});\r\n```\n\n### OS:\n\nOS X\n\n### DuckDB Version:\n\n0.5.1\n\n### DuckDB Client:\n\nNodeJS\n\n### Full Name:\n\nJosh Wills\n\n### Affiliation:\n\nWeaveGrid\n\n### Have you tried this on the latest `master` branch?\n\n- [X] I agree\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] I agree\n",
  "hints_text": "",
  "created_at": "2022-10-29T17:29:47Z"
}