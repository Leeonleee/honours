diff --git a/src/function/scalar/struct/struct_extract.cpp b/src/function/scalar/struct/struct_extract.cpp
index 26fc31fe694e..b4ef1c8d6156 100644
--- a/src/function/scalar/struct/struct_extract.cpp
+++ b/src/function/scalar/struct/struct_extract.cpp
@@ -98,7 +98,7 @@ static unique_ptr<FunctionData> StructExtractBind(ClientContext &context, Scalar
 	}
 
 	bound_function.return_type = std::move(return_type);
-	return make_uniq<StructExtractBindData>(key_index);
+	return StructExtractFun::GetBindData(key_index);
 }
 
 static unique_ptr<FunctionData> StructExtractBindIndex(ClientContext &context, ScalarFunction &bound_function,
@@ -134,7 +134,7 @@ static unique_ptr<FunctionData> StructExtractBindIndex(ClientContext &context, S
 		                      index, struct_children.size());
 	}
 	bound_function.return_type = struct_children[NumericCast<idx_t>(index - 1)].second;
-	return make_uniq<StructExtractBindData>(NumericCast<idx_t>(index - 1));
+	return StructExtractFun::GetBindData(NumericCast<idx_t>(index - 1));
 }
 
 static unique_ptr<BaseStatistics> PropagateStructExtractStats(ClientContext &context, FunctionStatisticsInput &input) {
@@ -146,6 +146,10 @@ static unique_ptr<BaseStatistics> PropagateStructExtractStats(ClientContext &con
 	return struct_child_stats[info.index].ToUnique();
 }
 
+unique_ptr<FunctionData> StructExtractFun::GetBindData(idx_t index) {
+	return make_uniq<StructExtractBindData>(index);
+}
+
 ScalarFunction StructExtractFun::KeyExtractFunction() {
 	return ScalarFunction("struct_extract", {LogicalTypeId::STRUCT, LogicalType::VARCHAR}, LogicalType::ANY,
 	                      StructExtractFunction, StructExtractBind, nullptr, PropagateStructExtractStats);
diff --git a/src/include/duckdb/function/scalar/nested_functions.hpp b/src/include/duckdb/function/scalar/nested_functions.hpp
index 2ac436ff2c9b..d29607ead95f 100644
--- a/src/include/duckdb/function/scalar/nested_functions.hpp
+++ b/src/include/duckdb/function/scalar/nested_functions.hpp
@@ -125,6 +125,7 @@ struct StructExtractFun {
 	static ScalarFunction KeyExtractFunction();
 	static ScalarFunction IndexExtractFunction();
 	static ScalarFunctionSet GetFunctions();
+	static unique_ptr<FunctionData> GetBindData(idx_t index);
 	static void RegisterFunction(BuiltinFunctions &set);
 };
 
diff --git a/src/planner/filter/struct_filter.cpp b/src/planner/filter/struct_filter.cpp
index 4cc45c5d366c..2c9c3541f7b4 100644
--- a/src/planner/filter/struct_filter.cpp
+++ b/src/planner/filter/struct_filter.cpp
@@ -2,7 +2,9 @@
 #include "duckdb/storage/statistics/base_statistics.hpp"
 #include "duckdb/storage/statistics/struct_stats.hpp"
 #include "duckdb/common/string_util.hpp"
+#include "duckdb/planner/expression/bound_constant_expression.hpp"
 #include "duckdb/planner/expression/bound_function_expression.hpp"
+#include "duckdb/function/scalar/nested_functions.hpp"
 
 namespace duckdb {
 
@@ -36,6 +38,12 @@ unique_ptr<TableFilter> StructFilter::Copy() const {
 }
 
 unique_ptr<Expression> StructFilter::ToExpression(const Expression &column) const {
-	throw NotImplementedException("StructFilter::ToExpression not yet supported");
+	auto &child_type = StructType::GetChildType(column.return_type, child_idx);
+	vector<unique_ptr<Expression>> arguments;
+	arguments.push_back(column.Copy());
+	arguments.push_back(make_uniq<BoundConstantExpression>(Value::BIGINT(NumericCast<int64_t>(child_idx))));
+	auto child = make_uniq<BoundFunctionExpression>(child_type, StructExtractFun::IndexExtractFunction(),
+	                                                std::move(arguments), StructExtractFun::GetBindData(child_idx));
+	return child_filter->ToExpression(*child);
 }
 } // namespace duckdb
