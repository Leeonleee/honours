diff --git a/tools/jdbc/src/jni/duckdb_java.cpp b/tools/jdbc/src/jni/duckdb_java.cpp
index 155389074d7f..4c9642a6a53a 100644
--- a/tools/jdbc/src/jni/duckdb_java.cpp
+++ b/tools/jdbc/src/jni/duckdb_java.cpp
@@ -22,6 +22,22 @@ static string byte_array_to_string(JNIEnv *env, jbyteArray ba_j) {
 	return ret;
 }
 
+static jobject decode_charbuffer_to_jstring(JNIEnv *env, const char *d_str, idx_t d_str_len) {
+	jclass charset_class = env->FindClass("java/nio/charset/Charset");
+	jclass charbuffer_class = env->FindClass("java/nio/CharBuffer");
+	jmethodID for_name =
+		env->GetStaticMethodID(charset_class, "forName", "(Ljava/lang/String;)Ljava/nio/charset/Charset;");
+	jobject charset = env->CallStaticObjectMethod(charset_class, for_name, env->NewStringUTF("UTF-8"));
+	jmethodID charset_decode =
+		env->GetMethodID(charset_class, "decode", "(Ljava/nio/ByteBuffer;)Ljava/nio/CharBuffer;");
+	jmethodID charbuffer_to_string = env->GetMethodID(charbuffer_class, "toString", "()Ljava/lang/String;");
+
+	auto bb = env->NewDirectByteBuffer((void *)d_str, d_str_len);
+	auto j_cb = env->CallObjectMethod(charset, charset_decode, bb);
+	auto j_str = env->CallObjectMethod(j_cb, charbuffer_to_string);
+	return j_str;
+}
+
 JNIEXPORT jobject JNICALL Java_org_duckdb_DuckDBNative_duckdb_1jdbc_1startup(JNIEnv *env, jclass, jbyteArray database_j,
                                                                              jboolean read_only) {
 	auto database = byte_array_to_string(env, database_j);
@@ -225,7 +241,7 @@ JNIEXPORT jobject JNICALL Java_org_duckdb_DuckDBNative_duckdb_1jdbc_1meta(JNIEnv
 	auto type_array = env->NewObjectArray(column_count, env->FindClass("java/lang/String"), nullptr);
 
 	for (idx_t col_idx = 0; col_idx < column_count; col_idx++) {
-		env->SetObjectArrayElement(name_array, col_idx, env->NewStringUTF(names[col_idx].c_str()));
+		env->SetObjectArrayElement(name_array, col_idx, decode_charbuffer_to_jstring(env, names[col_idx].c_str(), names[col_idx].length()));
 		env->SetObjectArrayElement(type_array, col_idx, env->NewStringUTF(types[col_idx].ToString().c_str()));
 	}
 
@@ -246,18 +262,6 @@ JNIEXPORT jobjectArray JNICALL Java_org_duckdb_DuckDBNative_duckdb_1jdbc_1fetch(
 	}
 	auto row_count = res_ref->chunk->size();
 
-	// ugh
-	jclass charset_class = env->FindClass("java/nio/charset/Charset");
-	jclass charbuffer_class = env->FindClass("java/nio/CharBuffer");
-	jmethodID for_name =
-	    env->GetStaticMethodID(charset_class, "forName", "(Ljava/lang/String;)Ljava/nio/charset/Charset;");
-	jobject charset = env->CallStaticObjectMethod(charset_class, for_name, env->NewStringUTF("UTF-8"));
-	jmethodID charset_decode =
-	    env->GetMethodID(charset_class, "decode", "(Ljava/nio/ByteBuffer;)Ljava/nio/CharBuffer;");
-	jmethodID charbuffer_to_string = env->GetMethodID(charbuffer_class, "toString", "()Ljava/lang/String;");
-	jclass string_class = env->FindClass("java/lang/String");
-	// eough
-
 	auto vec_array = (jobjectArray)env->NewObjectArray(res_ref->chunk->ColumnCount(),
 	                                                   env->FindClass("org/duckdb/DuckDBVector"), nullptr);
 	for (idx_t col_idx = 0; col_idx < res_ref->chunk->ColumnCount(); col_idx++) {
@@ -319,17 +323,13 @@ JNIEXPORT jobjectArray JNICALL Java_org_duckdb_DuckDBNative_duckdb_1jdbc_1fetch(
 			// fall through on purpose
 		}
 		case LogicalTypeId::VARCHAR:
-			varlen_data = env->NewObjectArray(row_count, string_class, nullptr);
+			varlen_data = env->NewObjectArray(row_count, env->FindClass("java/lang/String"), nullptr);
 			for (idx_t row_idx = 0; row_idx < row_count; row_idx++) {
 				if (FlatVector::Nullmask(vec)[row_idx]) {
 					continue;
 				}
-				// omg
 				auto d_str = ((string_t *)FlatVector::GetData(vec))[row_idx];
-				auto bb = env->NewDirectByteBuffer((void *)d_str.GetDataUnsafe(), d_str.GetSize());
-				auto j_cb = env->CallObjectMethod(charset, charset_decode, bb);
-				auto j_str = env->CallObjectMethod(j_cb, charbuffer_to_string);
-
+				auto j_str = decode_charbuffer_to_jstring(env, d_str.GetDataUnsafe(), d_str.GetSize());
 				env->SetObjectArrayElement(varlen_data, row_idx, j_str);
 			}
 			break;
