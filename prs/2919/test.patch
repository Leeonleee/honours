diff --git a/src/function/table/system/test_all_types.cpp b/src/function/table/system/test_all_types.cpp
index fb260416682c..f0ceacdd057c 100644
--- a/src/function/table/system/test_all_types.cpp
+++ b/src/function/table/system/test_all_types.cpp
@@ -166,7 +166,7 @@ static vector<TestType> GetTestTypes() {
 }
 
 static unique_ptr<FunctionData> TestAllTypesBind(ClientContext &context, vector<Value> &inputs,
-                                                 unordered_map<string, Value> &named_parameters,
+                                                 named_parameter_map_t &named_parameters,
                                                  vector<LogicalType> &input_table_types,
                                                  vector<string> &input_table_names, vector<LogicalType> &return_types,
                                                  vector<string> &names) {
diff --git a/test/optimizer/pushdown/table_or_pushdown.test b/test/optimizer/pushdown/table_or_pushdown.test
index 5973db29c9a3..4f3fb0d3cf6d 100644
--- a/test/optimizer/pushdown/table_or_pushdown.test
+++ b/test/optimizer/pushdown/table_or_pushdown.test
@@ -6,7 +6,7 @@ statement ok
 PRAGMA enable_verification
 
 statement ok
-CREATE TABLE integers AS SELECT a as A, a as B FROM generate_series(1, 5, 1) tbl(a)
+CREATE TABLE integers AS SELECT a as a, a as b FROM generate_series(1, 5, 1) tbl(a)
 
 #### test OR filters with multiple columns in the root OR, e.g., a=1 OR b=2
 query II
diff --git a/test/sql/catalog/case_insensitive_operations.test b/test/sql/catalog/case_insensitive_operations.test
new file mode 100644
index 000000000000..cdb43f916306
--- /dev/null
+++ b/test/sql/catalog/case_insensitive_operations.test
@@ -0,0 +1,146 @@
+# name: test/sql/catalog/case_insensitive_operations.test
+# description: Test case insensitive operations
+# group: [catalog]
+
+statement ok
+PRAGMA enable_verification
+
+loop i 0 2
+
+statement ok
+CREATE TABLE INTEGERS(I INTEGER);
+
+statement ok
+INSERT INTO integers (i) VALUES (1), (2), (3), (NULL);
+
+query I
+SELECT integers.i FROM integers ORDER BY i;
+----
+NULL
+1
+2
+3
+
+query I
+SELECT integers.i AS i FROM integers GROUP BY I ORDER BY "integers"."I";
+----
+NULL
+1
+2
+3
+
+query I
+SELECT integers.i AS "ZZZ" FROM integers GROUP BY "zzz" ORDER BY "INTEGERS"."i";
+----
+NULL
+1
+2
+3
+
+
+query I
+WITH "CTE"("ZZZ") AS (
+	SELECT integers.i AS "ZZZ" FROM integers GROUP BY "zzz"
+)
+SELECT * FROM cte ORDER BY zZz;
+----
+NULL
+1
+2
+3
+
+statement error
+WITH "CTE"("ZZZ") AS (
+	SELECT integers.i AS "ZZZ" FROM integers GROUP BY "zzz"
+),
+	"cte" AS (SELECT 42)
+
+query I
+UPDATE integers SET i=integers.i+1
+----
+4
+
+query I
+SELECT i FROM integers ORDER BY integers.i;
+----
+NULL
+2
+3
+4
+
+query I
+DELETE FROM integers WHERE i IS NULL;
+----
+1
+
+query I
+SELECT i FROM integers ORDER BY integers.i;
+----
+2
+3
+4
+
+statement ok
+ALTER TABLE integers ADD COLUMN J INTEGER;
+
+query II
+SELECT i, j FROM integers ORDER BY integers.i;
+----
+2	NULL
+3	NULL
+4	NULL
+
+query I
+UPDATE integers SET j=integers.i;
+----
+3
+
+statement ok
+ALTER TABLE integers DROP COLUMN i;
+
+query I
+SELECT j FROM integers ORDER BY integers.j;
+----
+2
+3
+4
+
+query I
+SELECT tbl.k FROM (SELECT j FROM integers) TBL(K) ORDER BY K;
+----
+2
+3
+4
+
+statement ok
+DROP TABLE integers;
+
+# structs
+statement ok
+CREATE TABLE STRUCTS(S ROW(I ROW(K INTEGER)));
+
+statement ok
+INSERT INTO structs VALUES ({'i': {'k': 42}});
+
+query III
+SELECT structs.S.i.K, "STRUCTS"."S"."I"."K", "structs"."s"."i"."k" FROM structs
+----
+42	42	42
+
+query I
+SELECT "STRUCTS"."S"."I"."K" FROM structs GROUP BY "STRUCTS"."S"."I"."K"
+----
+42
+
+query I
+SELECT structs.S.i.K FROM structs GROUP BY structs.S.i.K
+----
+42
+
+statement ok
+DROP TABLE structs;
+
+statement ok
+PRAGMA preserve_identifier_case=false;
+
+endloop
diff --git a/test/sql/collate/test_collate_expression.test b/test/sql/collate/test_collate_expression.test
index 29746c26ea07..1c13c18c7811 100644
--- a/test/sql/collate/test_collate_expression.test
+++ b/test/sql/collate/test_collate_expression.test
@@ -13,6 +13,16 @@ SELECT 'hëllo' COLLATE NOACCENT='hello'
 ----
 1
 
+query T
+SELECT 'hëllo' COLLATE POSIX='hello'
+----
+0
+
+query T
+SELECT 'hëllo' COLLATE C='hello'
+----
+0
+
 statement ok
 SELECT * FROM collate_test WHERE s='hello'
 
diff --git a/test/sql/copy/csv/test_read_csv.test b/test/sql/copy/csv/test_read_csv.test
index 36cb9944d92e..9c2f85806a5f 100644
--- a/test/sql/copy/csv/test_read_csv.test
+++ b/test/sql/copy/csv/test_read_csv.test
@@ -10,7 +10,7 @@ statement ok
 CREATE TABLE abac_tbl (a VARCHAR, b VARCHAR, c VARCHAR);
 
 query I
-INSERT INTO abac_tbl SELECT * FROM read_csv('test/sql/copy/csv/data/abac/abac.csv', columns=STRUCT_PACK(a := 'VARCHAR', b := 'VARCHAR', c := 'VARCHAR'), sep='ABAC', auto_detect='false')
+INSERT INTO abac_tbl SELECT * FROM read_csv('test/sql/copy/csv/data/abac/abac.csv', COLUMNS=STRUCT_PACK(a := 'VARCHAR', b := 'VARCHAR', c := 'VARCHAR'), sep='ABAC', auto_detect='false')
 ----
 1
 
diff --git a/test/sql/settings/setting_preserve_identifier_case.test b/test/sql/settings/setting_preserve_identifier_case.test
new file mode 100644
index 000000000000..537a6e2b42e1
--- /dev/null
+++ b/test/sql/settings/setting_preserve_identifier_case.test
@@ -0,0 +1,41 @@
+# name: test/sql/settings/setting_preserve_identifier_case.test
+# description: Test preserve_identifier_case setting
+# group: [settings]
+
+query I
+SELECT value FROM duckdb_settings() WHERE name='preserve_identifier_case'
+----
+True
+
+statement ok
+CREATE SCHEMA MYSCHEMA;
+
+statement ok
+CREATE TABLE MYSCHEMA.INTEGERS(I INTEGER);
+
+query III
+SELECT duckdb_tables.schema_name, duckdb_tables.table_name, column_name FROM duckdb_tables JOIN duckdb_columns USING (table_oid);
+----
+MYSCHEMA	INTEGERS	I
+
+statement ok
+DROP SCHEMA MYSCHEMA CASCADE
+
+statement ok
+SET preserve_identifier_case TO false;
+
+query I
+SELECT value FROM duckdb_settings() WHERE name='preserve_identifier_case'
+----
+False
+
+statement ok
+CREATE SCHEMA MYSCHEMA;
+
+statement ok
+CREATE TABLE MYSCHEMA.INTEGERS(I INTEGER);
+
+query III
+SELECT duckdb_tables.schema_name, duckdb_tables.table_name, column_name FROM duckdb_tables JOIN duckdb_columns USING (table_oid);
+----
+myschema	integers	i
diff --git a/tools/shell/shell-test.py b/tools/shell/shell-test.py
index d071836d24a7..8f43e8f147d4 100644
--- a/tools/shell/shell-test.py
+++ b/tools/shell/shell-test.py
@@ -413,14 +413,14 @@ def tf():
 
 # .dump test
 test('''
-CREATE TABLE a (I INTEGER);
+CREATE TABLE a (i INTEGER);
 .changes off
 INSERT INTO a VALUES (42);
 .dump
 ''', 'CREATE TABLE a(i INTEGER)')
 
 test('''
-CREATE TABLE a (I INTEGER);
+CREATE TABLE a (i INTEGER);
 .changes off
 INSERT INTO a VALUES (42);
 .dump
@@ -428,7 +428,7 @@ def tf():
 
 # .dump a specific table
 test('''
-CREATE TABLE a (I INTEGER);
+CREATE TABLE a (i INTEGER);
 .changes off
 INSERT INTO a VALUES (42);
 .dump a
@@ -436,7 +436,7 @@ def tf():
 
 # .dump LIKE
 test('''
-CREATE TABLE a (I INTEGER);
+CREATE TABLE a (i INTEGER);
 .changes off
 INSERT INTO a VALUES (42);
 .dump a%
