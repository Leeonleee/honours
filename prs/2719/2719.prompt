You will be provided with a partial code base and an issue statement explaining a problem to resolve.
In your output, give nothing but the code (no markdown) so that your output can be copy pasted and run immediately with no changes

<issue>
reports struct_extract error when run  a sql
#### What happens?
reports struct_extract error when run  a sql in duckdb v0.3.2dev, that sql can run in v0.3.0 and v0.3.1 correctly

seems related with https://github.com/duckdb/duckdb/issues/2554

#### To Reproduce

```sql
WITH RECURSIVE
input(sud) AS (
VALUES('53..7....6..195....98....6.8...6...34..8.3..17...2...6.6....28....419..5....8..79')
),
digits(z, lp) AS (
SELECT CAST(lp+1 AS TEXT), lp::int+1 FROM range(0,9) t(lp)
),
x(s, ind) AS (
SELECT sud, instr(sud, '.') FROM input
UNION ALL
SELECT
substr(s, 1, ind::int-1) || z || substr(s, ind::int+1),
instr( substr(s, 1, ind::int-1) || z || substr(s, ind::int+1), '.' )
FROM x, digits AS z
WHERE ind::int>0
AND NOT EXISTS (
SELECT 1
FROM digits AS lp
WHERE z.z = substr(s, ((ind::int-1)/9)*9 + lp, 1)
OR z.z = substr(s, ((ind::int-1)%9) + (lp-1)*9 + 1, 1)
OR z.z = substr(s, (((ind::int-1)/3) % 3) * 3
+ ((ind::int-1)/27) * 27 + lp
+ ((lp-1) / 3) * 6, 1)
)
)
SELECT s FROM x WHERE ind::int=0;


---run in v0.3.0 46a0fc50a /v0.3.1 88aa81c6b

│ 5346789126721953481983425678597614234268537917139248569615372842874196353452861... │

---run in v0.3.2-dev173 a73d33c14 /v0.3.2-dev330 ae8562793
Error: Binder Error: No function matches the given name and argument types 'struct_extract(VARCHAR, VARCHAR)'. You might need to add explicit type cas
ts.
        Candidate functions:
        struct_extract(STRUCT, VARCHAR) -> ANY

```

#### Environment (please complete the following information):
 - OS: [e.g. iOS]windows7 x64
 - DuckDB Version: [e.g. 22]0.3.2dev
 - DuckDB Client: [e.g. Python]CLI

#### Before Submitting

- [x] **Have you tried this on the latest `master` branch?**
* **Python**: `pip install duckdb --upgrade --pre`
* **R**: `install.packages("https://github.com/duckdb/duckdb/releases/download/master-builds/duckdb_r_src.tar.gz", repos = NULL)`
* **Other Platforms**: You can find binaries [here](https://github.com/duckdb/duckdb/releases/tag/master-builds) or compile from source.

- [x] **Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?**

reports struct_extract error when run  a sql
#### What happens?
reports struct_extract error when run  a sql in duckdb v0.3.2dev, that sql can run in v0.3.0 and v0.3.1 correctly

seems related with https://github.com/duckdb/duckdb/issues/2554

#### To Reproduce

```sql
WITH RECURSIVE
input(sud) AS (
VALUES('53..7....6..195....98....6.8...6...34..8.3..17...2...6.6....28....419..5....8..79')
),
digits(z, lp) AS (
SELECT CAST(lp+1 AS TEXT), lp::int+1 FROM range(0,9) t(lp)
),
x(s, ind) AS (
SELECT sud, instr(sud, '.') FROM input
UNION ALL
SELECT
substr(s, 1, ind::int-1) || z || substr(s, ind::int+1),
instr( substr(s, 1, ind::int-1) || z || substr(s, ind::int+1), '.' )
FROM x, digits AS z
WHERE ind::int>0
AND NOT EXISTS (
SELECT 1
FROM digits AS lp
WHERE z.z = substr(s, ((ind::int-1)/9)*9 + lp, 1)
OR z.z = substr(s, ((ind::int-1)%9) + (lp-1)*9 + 1, 1)
OR z.z = substr(s, (((ind::int-1)/3) % 3) * 3
+ ((ind::int-1)/27) * 27 + lp
+ ((lp-1) / 3) * 6, 1)
)
)
SELECT s FROM x WHERE ind::int=0;


---run in v0.3.0 46a0fc50a /v0.3.1 88aa81c6b

│ 5346789126721953481983425678597614234268537917139248569615372842874196353452861... │

---run in v0.3.2-dev173 a73d33c14 /v0.3.2-dev330 ae8562793
Error: Binder Error: No function matches the given name and argument types 'struct_extract(VARCHAR, VARCHAR)'. You might need to add explicit type cas
ts.
        Candidate functions:
        struct_extract(STRUCT, VARCHAR) -> ANY

```

#### Environment (please complete the following information):
 - OS: [e.g. iOS]windows7 x64
 - DuckDB Version: [e.g. 22]0.3.2dev
 - DuckDB Client: [e.g. Python]CLI

#### Before Submitting

- [x] **Have you tried this on the latest `master` branch?**
* **Python**: `pip install duckdb --upgrade --pre`
* **R**: `install.packages("https://github.com/duckdb/duckdb/releases/download/master-builds/duckdb_r_src.tar.gz", repos = NULL)`
* **Other Platforms**: You can find binaries [here](https://github.com/duckdb/duckdb/releases/tag/master-builds) or compile from source.

- [x] **Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?**


</issue>
<code>
[start of README.md]
1: <div align="center">
2:   <img src="https://duckdb.org/images/DuckDB_Logo_dl.png" height="50">
3: </div>
4: <p>&nbsp;</p>
5: 
6: <p align="center">
7:   <a href="https://github.com/duckdb/duckdb/actions">
8:     <img src="https://github.com/cwida/duckdb/workflows/.github/workflows/main.yml/badge.svg?branch=master" alt=".github/workflows/main.yml">
9:   </a>
10:   <a href="https://www.codefactor.io/repository/github/cwida/duckdb">
11:     <img src="https://www.codefactor.io/repository/github/cwida/duckdb/badge" alt="CodeFactor"/>
12:   </a>
13:   <a href="https://app.codecov.io/gh/duckdb/duckdb">
14:     <img src="https://codecov.io/gh/duckdb/duckdb/branch/master/graph/badge.svg?token=FaxjcfFghN" alt="codecov"/>
15:   </a>
16: </p>
17: 
18: ## DuckDB
19: DuckDB is a high-performance analytical database system. It is designed to be fast, reliable and easy to use. DuckDB provides a rich SQL dialect, with support far beyond basic SQL. DuckDB supports arbitrary and nested correlated subqueries, window functions, collations, complex types (arrays, structs), and more. For more information on the goals of DuckDB, please refer to [the Why DuckDB page on our website](https://duckdb.org/docs/why_duckdb.html).
20: 
21: ## Installation
22: If you want to install and use DuckDB, please see [our website](https://www.duckdb.org) for installation and usage instructions.
23: 
24: ## Data Import
25: For CSV files and Parquet files, data import is as simple as referencing the file in the FROM clause:
26: 
27: ```sql
28: SELECT * FROM 'myfile.csv';
29: SELECT * FROM 'myfile.parquet';
30: ```
31: 
32: Refer to our [Data Import](https://duckdb.org/docs/data/overview) section for more information.
33: 
34: ## SQL Reference
35: The [website](https://duckdb.org/docs/sql/introduction) contains a reference of functions and SQL constructs available in DuckDB.
36: 
37: ## Development
38: For development, DuckDB requires [CMake](https://cmake.org), Python3 and a `C++11` compliant compiler. Run `make` in the root directory to compile the sources. For development, use `make debug` to build a non-optimized debug version. You should run `make unit` and `make allunit` to verify that your version works properly after making changes. To test performance, you can run several standard benchmarks from the root directory by executing `./build/release/benchmark/benchmark_runner`.
39: 
40: Please also refer to our [Contribution Guide](CONTRIBUTING.md).
41: 
42: 
[end of README.md]
[start of src/planner/binder/expression/bind_function_expression.cpp]
1: #include "duckdb/catalog/catalog.hpp"
2: #include "duckdb/catalog/catalog_entry/scalar_function_catalog_entry.hpp"
3: #include "duckdb/execution/expression_executor.hpp"
4: #include "duckdb/parser/expression/function_expression.hpp"
5: #include "duckdb/planner/expression/bound_cast_expression.hpp"
6: #include "duckdb/planner/expression/bound_constant_expression.hpp"
7: #include "duckdb/planner/expression/bound_function_expression.hpp"
8: #include "duckdb/planner/expression_binder.hpp"
9: #include "duckdb/planner/binder.hpp"
10: 
11: namespace duckdb {
12: 
13: BindResult ExpressionBinder::BindExpression(FunctionExpression &function, idx_t depth,
14:                                             unique_ptr<ParsedExpression> *expr_ptr) {
15: 	// lookup the function in the catalog
16: 	QueryErrorContext error_context(binder.root_statement, function.query_location);
17: 
18: 	if (function.function_name == "unnest" || function.function_name == "unlist") {
19: 		// special case, not in catalog
20: 		// TODO make sure someone does not create such a function OR
21: 		// have unnest live in catalog, too
22: 		return BindUnnest(function, depth);
23: 	}
24: 	auto &catalog = Catalog::GetCatalog(context);
25: 	auto func = catalog.GetEntry(context, CatalogType::SCALAR_FUNCTION_ENTRY, function.schema, function.function_name,
26: 	                             false, error_context);
27: 	switch (func->type) {
28: 	case CatalogType::SCALAR_FUNCTION_ENTRY:
29: 		// scalar function
30: 		return BindFunction(function, (ScalarFunctionCatalogEntry *)func, depth);
31: 	case CatalogType::MACRO_ENTRY:
32: 		// macro function
33: 		return BindMacro(function, (MacroCatalogEntry *)func, depth, expr_ptr);
34: 	default:
35: 		// aggregate function
36: 		return BindAggregate(function, (AggregateFunctionCatalogEntry *)func, depth);
37: 	}
38: }
39: 
40: BindResult ExpressionBinder::BindFunction(FunctionExpression &function, ScalarFunctionCatalogEntry *func, idx_t depth) {
41: 	// bind the children of the function expression
42: 	string error;
43: 	for (idx_t i = 0; i < function.children.size(); i++) {
44: 		BindChild(function.children[i], depth, error);
45: 	}
46: 	if (!error.empty()) {
47: 		return BindResult(error);
48: 	}
49: 	// all children bound successfully
50: 	// extract the children and types
51: 	vector<unique_ptr<Expression>> children;
52: 	for (idx_t i = 0; i < function.children.size(); i++) {
53: 		auto &child = (BoundExpression &)*function.children[i];
54: 		children.push_back(move(child.expr));
55: 	}
56: 	unique_ptr<Expression> result =
57: 	    ScalarFunction::BindScalarFunction(context, *func, move(children), error, function.is_operator);
58: 	if (!result) {
59: 		throw BinderException(binder.FormatError(function, error));
60: 	}
61: 	return BindResult(move(result));
62: }
63: 
64: BindResult ExpressionBinder::BindAggregate(FunctionExpression &expr, AggregateFunctionCatalogEntry *function,
65:                                            idx_t depth) {
66: 	return BindResult(binder.FormatError(expr, UnsupportedAggregateMessage()));
67: }
68: 
69: BindResult ExpressionBinder::BindUnnest(FunctionExpression &expr, idx_t depth) {
70: 	return BindResult(binder.FormatError(expr, UnsupportedUnnestMessage()));
71: }
72: 
73: string ExpressionBinder::UnsupportedAggregateMessage() {
74: 	return "Aggregate functions are not supported here";
75: }
76: 
77: string ExpressionBinder::UnsupportedUnnestMessage() {
78: 	return "UNNEST not supported here";
79: }
80: 
81: } // namespace duckdb
[end of src/planner/binder/expression/bind_function_expression.cpp]
</code>
Here is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.
<patch>
--- a/file.cpp
+++ b/file.cpp
@@ -3,35 +3,44 @@
 #include <cstdlib>
 
 int euclidean(int a, int b) {
-    while (b) {
-        int temp = b;
-        b = a % b;
-        a = temp;
+    if (b == 0) {
+        return a;
     }
-    return a;
+    return euclidean(b, a % b);
 }
 
 std::vector<std::pair<int, int>> bresenham(int x0, int y0, int x1, int y1) {
     std::vector<std::pair<int, int>> points;
     int dx = abs(x1 - x0);
     int dy = abs(y1 - y0);
+    int x = x0, y = y0;
     int sx = (x0 < x1) ? 1 : -1;
     int sy = (y0 < y1) ? 1 : -1;
-    int err = dx - dy;
 
-    while (true) {
-        points.emplace_back(x0, y0);
-        if (x0 == x1 && y0 == y1) break;
-        int e2 = 2 * err;
-        if (e2 > -dy) {
+    if (dx > dy) {
+        int err = dx / 2;
+        while (x != x1) {
+            points.emplace_back(x, y);
             err -= dy;
-            x0 += sx;
+            if (err < 0) {
+                y += sy;
+                err += dx;
+            }
+            x += sx;
         }
-        if (e2 < dx) {
-            err += dx;
-            y0 += sy;
+    } else {
+        int err = dy / 2;
+        while (y != y1) {
+            points.emplace_back(x, y);
+            err -= dx;
+            if (err < 0) {
+                x += sx;
+                err += dy;
+            }
+            y += sy;
         }
     }
 
+    points.emplace_back(x, y);
     return points;
 }

</patch>

I need you to solve the provided issue by generating a single patch file that I can apply directly to this repository using git apply.
Please respond with a single patch file in the format shown above.
Make sure to only include the patch file contents so that the contents of your output can be copied into a patch file and applied directly

Respond below: