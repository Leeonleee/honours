{
  "repo": "duckdb/duckdb",
  "pull_number": 14784,
  "instance_id": "duckdb__duckdb-14784",
  "issue_numbers": [
    "14540",
    "14540"
  ],
  "base_commit": "1fe66c2ca4d6ae5aa88a46df6b9d4406e19ed35f",
  "patch": "diff --git a/src/optimizer/unnest_rewriter.cpp b/src/optimizer/unnest_rewriter.cpp\nindex 796a9338b946..e5f9ccf4bbaf 100644\n--- a/src/optimizer/unnest_rewriter.cpp\n+++ b/src/optimizer/unnest_rewriter.cpp\n@@ -122,7 +122,7 @@ bool UnnestRewriter::RewriteCandidate(unique_ptr<LogicalOperator> &candidate) {\n \tD_ASSERT(delim_join.type == LogicalOperatorType::LOGICAL_DELIM_JOIN);\n \tGetDelimColumns(delim_join);\n \n-\t// LHS of the LOGICAL_DELIM_JOIN is a LOGICAL_WINDOW that contains a LOGICAL_PROJECTION\n+\t// LHS of the LOGICAL_DELIM_JOIN is a LOGICAL_WINDOW that contains a LOGICAL_PROJECTION/LOGICAL_CROSS_JOIN\n \t// this lhs_proj later becomes the child of the UNNEST\n \n \tidx_t delim_idx = delim_join.delim_flipped ? 1 : 0;\n@@ -279,7 +279,7 @@ void UnnestRewriter::UpdateBoundUnnestBindings(UnnestRewriterPlanUpdater &update\n \n \t\t\tif (delim_binding.table_index == unnest_binding.table_index) {\n \t\t\t\tunnest_binding.table_index = overwritten_tbl_idx;\n-\t\t\t\tunnest_binding.column_index++;\n+\t\t\t\tunnest_binding.column_index = i;\n \t\t\t\tupdater.replace_bindings.emplace_back(unnest_binding, delim_binding);\n \t\t\t\tunnest_cols.erase(unnest_it);\n \t\t\t\tbreak;\n",
  "test_patch": "diff --git a/test/issues/general/test_14540.test b/test/issues/general/test_14540.test\nnew file mode 100644\nindex 000000000000..222cd552b6ad\n--- /dev/null\n+++ b/test/issues/general/test_14540.test\n@@ -0,0 +1,43 @@\n+# name: test/issues/general/test_14540.test\n+# description: Issue 14540 - INTERNAL Error: Failed to bind column reference(a unnest rewriter fail)\n+# group: [general]\n+\n+statement ok\n+PRAGMA enable_verification;\n+\n+statement ok\n+CREATE TABLE QueryRequest AS SELECT * FROM (\n+  \n+    SELECT\n+      ['A', 'B']::text[] AS query_request\n+   UNION ALL\n+  \n+    SELECT\n+      ['A']::text[] AS query_request\n+   UNION ALL\n+  \n+    SELECT\n+      ['B']::text[] AS query_request\n+  \n+) AS UNUSED_TABLE_NAME;\n+\n+statement ok\n+CREATE TABLE ObjectAttributes AS SELECT\n+  'zero' AS object_id,\n+  ['a']::text[] AS logica_value;\n+\n+query IIII rowsort\n+SELECT\n+  QueryRequest.query_request AS query_request,\n+  ObjectAttributes.object_id AS object_id,\n+  ObjectAttributes.logica_value AS object_attributes,\n+  count(DISTINCT x_9.unnested_pod) AS attributes_union\n+FROM\n+  QueryRequest AS QueryRequest, ObjectAttributes AS ObjectAttributes, (select unnest(((ObjectAttributes.logica_value) || (QueryRequest.query_request))) as unnested_pod) as x_9\n+WHERE\n+  (ObjectAttributes.object_id = 'zero')\n+GROUP BY QueryRequest.query_request, ObjectAttributes.object_id, ObjectAttributes.logica_value;\n+----\n+[A, B]\tzero\t[a]\t3\n+[A]\tzero\t[a]\t2\n+[B]\tzero\t[a]\t2\n",
  "problem_statement": "INTERNAL Error: Failed to bind column reference\n### What happens?\n\nHere is a minimal example of my query:\r\n\r\n```\r\n-- Initializing DuckDB environment.\r\ncreate schema if not exists logica_home;\r\n\r\n-- Logica type: logicarecord383307722\r\ndrop type if exists logicarecord383307722 cascade; create type logicarecord383307722 as struct(a timestamp);\r\nDROP TABLE IF EXISTS logica_home.QueryRequest;\r\nCREATE TABLE logica_home.QueryRequest AS SELECT * FROM (\r\n  \r\n    SELECT\r\n      ['A', 'B']::text[] AS query_request\r\n   UNION ALL\r\n  \r\n    SELECT\r\n      ['A']::text[] AS query_request\r\n   UNION ALL\r\n  \r\n    SELECT\r\n      ['B']::text[] AS query_request\r\n  \r\n) AS UNUSED_TABLE_NAME  ;\r\n\r\n-- Interacting with table logica_home.QueryRequest\r\n\r\nDROP TABLE IF EXISTS logica_home.ObjectAttributes;\r\nCREATE TABLE logica_home.ObjectAttributes AS SELECT\r\n  'zero' AS object_id,\r\n  ['a']::text[] AS logica_value;\r\n\r\n-- Interacting with table logica_home.ObjectAttributes\r\n\r\nSELECT\r\n  QueryRequest.query_request AS query_request,\r\n  ObjectAttributes.object_id AS object_id,\r\n  ObjectAttributes.logica_value AS object_attributes,\r\n  ARRAY_AGG(DISTINCT x_9.unnested_pod) AS attributes_union\r\nFROM\r\n  logica_home.QueryRequest AS QueryRequest, logica_home.ObjectAttributes AS ObjectAttributes, (select unnest(((ObjectAttributes.logica_value) || (QueryRequest.query_request))) as unnested_pod) as x_9\r\nWHERE\r\n  (ObjectAttributes.object_id = 'zero')\r\nGROUP BY QueryRequest.query_request, ObjectAttributes.object_id, ObjectAttributes.logica_value;\r\n```\r\n\r\nWhen I run it I get:\r\n\r\n```\r\nINTERNAL Error: Failed to bind column reference \"query_request\" [17.2] (bindings: {#[0.0], #[1.0], #[1.1]})\r\nThis error signals an assertion failure within DuckDB. This usually occurs due to unexpected conditions or errors in the program's logic.\r\nFor more information, see https://duckdb.org/docs/dev/internal_errors\r\n```\r\n\r\nLooks like exactly the situation to file a bug :-)\r\n\r\nLet me know if I can be of any help in understanding this error.\r\n\r\n\n\n### To Reproduce\n\n```\r\n-- Initializing DuckDB environment.\r\ncreate schema if not exists logica_home;\r\n\r\n-- Logica type: logicarecord383307722\r\ndrop type if exists logicarecord383307722 cascade; create type logicarecord383307722 as struct(a timestamp);\r\nDROP TABLE IF EXISTS logica_home.QueryRequest;\r\nCREATE TABLE logica_home.QueryRequest AS SELECT * FROM (\r\n  \r\n    SELECT\r\n      ['A', 'B']::text[] AS query_request\r\n   UNION ALL\r\n  \r\n    SELECT\r\n      ['A']::text[] AS query_request\r\n   UNION ALL\r\n  \r\n    SELECT\r\n      ['B']::text[] AS query_request\r\n  \r\n) AS UNUSED_TABLE_NAME  ;\r\n\r\n-- Interacting with table logica_home.QueryRequest\r\n\r\nDROP TABLE IF EXISTS logica_home.ObjectAttributes;\r\nCREATE TABLE logica_home.ObjectAttributes AS SELECT\r\n  'zero' AS object_id,\r\n  ['a']::text[] AS logica_value;\r\n\r\n-- Interacting with table logica_home.ObjectAttributes\r\n\r\nSELECT\r\n  QueryRequest.query_request AS query_request,\r\n  ObjectAttributes.object_id AS object_id,\r\n  ObjectAttributes.logica_value AS object_attributes,\r\n  ARRAY_AGG(DISTINCT x_9.unnested_pod) AS attributes_union\r\nFROM\r\n  logica_home.QueryRequest AS QueryRequest, logica_home.ObjectAttributes AS ObjectAttributes, (select unnest(((ObjectAttributes.logica_value) || (QueryRequest.query_request))) as unnested_pod) as x_9\r\nWHERE\r\n  (ObjectAttributes.object_id = 'zero')\r\nGROUP BY QueryRequest.query_request, ObjectAttributes.object_id, ObjectAttributes.logica_value;\r\n```\n\n### OS:\n\nGoogle CoLab\n\n### DuckDB Version:\n\nwhatever installs with pip install\n\n### DuckDB Client:\n\nPython, also your playground\n\n### Hardware:\n\n_No response_\n\n### Full Name:\n\nEvgeny Skvortsov\n\n### Affiliation:\n\nGoogle, working with duckdb within open source project Logica\n\n### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.\n\nI have tested with a stable release\n\n### Did you include all relevant data sets for reproducing the issue?\n\nYes\n\n### Did you include all code required to reproduce the issue?\n\n- [X] Yes, I have\n\n### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?\n\n- [X] Yes, I have\nINTERNAL Error: Failed to bind column reference\n### What happens?\n\nHere is a minimal example of my query:\r\n\r\n```\r\n-- Initializing DuckDB environment.\r\ncreate schema if not exists logica_home;\r\n\r\n-- Logica type: logicarecord383307722\r\ndrop type if exists logicarecord383307722 cascade; create type logicarecord383307722 as struct(a timestamp);\r\nDROP TABLE IF EXISTS logica_home.QueryRequest;\r\nCREATE TABLE logica_home.QueryRequest AS SELECT * FROM (\r\n  \r\n    SELECT\r\n      ['A', 'B']::text[] AS query_request\r\n   UNION ALL\r\n  \r\n    SELECT\r\n      ['A']::text[] AS query_request\r\n   UNION ALL\r\n  \r\n    SELECT\r\n      ['B']::text[] AS query_request\r\n  \r\n) AS UNUSED_TABLE_NAME  ;\r\n\r\n-- Interacting with table logica_home.QueryRequest\r\n\r\nDROP TABLE IF EXISTS logica_home.ObjectAttributes;\r\nCREATE TABLE logica_home.ObjectAttributes AS SELECT\r\n  'zero' AS object_id,\r\n  ['a']::text[] AS logica_value;\r\n\r\n-- Interacting with table logica_home.ObjectAttributes\r\n\r\nSELECT\r\n  QueryRequest.query_request AS query_request,\r\n  ObjectAttributes.object_id AS object_id,\r\n  ObjectAttributes.logica_value AS object_attributes,\r\n  ARRAY_AGG(DISTINCT x_9.unnested_pod) AS attributes_union\r\nFROM\r\n  logica_home.QueryRequest AS QueryRequest, logica_home.ObjectAttributes AS ObjectAttributes, (select unnest(((ObjectAttributes.logica_value) || (QueryRequest.query_request))) as unnested_pod) as x_9\r\nWHERE\r\n  (ObjectAttributes.object_id = 'zero')\r\nGROUP BY QueryRequest.query_request, ObjectAttributes.object_id, ObjectAttributes.logica_value;\r\n```\r\n\r\nWhen I run it I get:\r\n\r\n```\r\nINTERNAL Error: Failed to bind column reference \"query_request\" [17.2] (bindings: {#[0.0], #[1.0], #[1.1]})\r\nThis error signals an assertion failure within DuckDB. This usually occurs due to unexpected conditions or errors in the program's logic.\r\nFor more information, see https://duckdb.org/docs/dev/internal_errors\r\n```\r\n\r\nLooks like exactly the situation to file a bug :-)\r\n\r\nLet me know if I can be of any help in understanding this error.\r\n\r\n\n\n### To Reproduce\n\n```\r\n-- Initializing DuckDB environment.\r\ncreate schema if not exists logica_home;\r\n\r\n-- Logica type: logicarecord383307722\r\ndrop type if exists logicarecord383307722 cascade; create type logicarecord383307722 as struct(a timestamp);\r\nDROP TABLE IF EXISTS logica_home.QueryRequest;\r\nCREATE TABLE logica_home.QueryRequest AS SELECT * FROM (\r\n  \r\n    SELECT\r\n      ['A', 'B']::text[] AS query_request\r\n   UNION ALL\r\n  \r\n    SELECT\r\n      ['A']::text[] AS query_request\r\n   UNION ALL\r\n  \r\n    SELECT\r\n      ['B']::text[] AS query_request\r\n  \r\n) AS UNUSED_TABLE_NAME  ;\r\n\r\n-- Interacting with table logica_home.QueryRequest\r\n\r\nDROP TABLE IF EXISTS logica_home.ObjectAttributes;\r\nCREATE TABLE logica_home.ObjectAttributes AS SELECT\r\n  'zero' AS object_id,\r\n  ['a']::text[] AS logica_value;\r\n\r\n-- Interacting with table logica_home.ObjectAttributes\r\n\r\nSELECT\r\n  QueryRequest.query_request AS query_request,\r\n  ObjectAttributes.object_id AS object_id,\r\n  ObjectAttributes.logica_value AS object_attributes,\r\n  ARRAY_AGG(DISTINCT x_9.unnested_pod) AS attributes_union\r\nFROM\r\n  logica_home.QueryRequest AS QueryRequest, logica_home.ObjectAttributes AS ObjectAttributes, (select unnest(((ObjectAttributes.logica_value) || (QueryRequest.query_request))) as unnested_pod) as x_9\r\nWHERE\r\n  (ObjectAttributes.object_id = 'zero')\r\nGROUP BY QueryRequest.query_request, ObjectAttributes.object_id, ObjectAttributes.logica_value;\r\n```\n\n### OS:\n\nGoogle CoLab\n\n### DuckDB Version:\n\nwhatever installs with pip install\n\n### DuckDB Client:\n\nPython, also your playground\n\n### Hardware:\n\n_No response_\n\n### Full Name:\n\nEvgeny Skvortsov\n\n### Affiliation:\n\nGoogle, working with duckdb within open source project Logica\n\n### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.\n\nI have tested with a stable release\n\n### Did you include all relevant data sets for reproducing the issue?\n\nYes\n\n### Did you include all code required to reproduce the issue?\n\n- [X] Yes, I have\n\n### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?\n\n- [X] Yes, I have\n",
  "hints_text": "\n",
  "created_at": "2024-11-11T12:16:58Z"
}