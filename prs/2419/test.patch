diff --git a/test/sql/binder/test_having_alias.test b/test/sql/binder/test_having_alias.test
index cfcc4a8fa287..1218ddfdddde 100644
--- a/test/sql/binder/test_having_alias.test
+++ b/test/sql/binder/test_having_alias.test
@@ -22,17 +22,13 @@ SELECT i, COUNT(*) AS k FROM integers GROUP BY i HAVING k=1 ORDER BY i;
 statement error
 SELECT i, COUNT(*) AS k FROM integers GROUP BY i HAVING integers.k=1 ORDER BY i;
 
-# aliases take priority
+# column name wins over the alias
 query II
-SELECT i AS j, COUNT(*) AS i FROM integers GROUP BY j HAVING i=1 ORDER BY 1;
+SELECT 1 AS i, COUNT(*) FROM integers GROUP BY i HAVING i=2;
 ----
-0	1
 1	1
-2	1
-3	1
-4	1
 
-# unless qualified
+# as if qualified
 query II
 SELECT i AS j, COUNT(*) AS i FROM integers GROUP BY j HAVING integers.i=1 ORDER BY i;
 ----
@@ -49,20 +45,19 @@ SELECT COUNT(i) AS j FROM integers HAVING j=5;
 ----
 5
 
-# potentially recursive alias
-query I
+# These don't work since i in HAVING refers the column instead of the alias
+# (SQLite says: 'Error: a GROUP BY clause is required before HAVING')
+statement error
 SELECT COUNT(i) AS i FROM integers HAVING i=5;
-----
-5
 
-query I
+statement error
 SELECT COUNT(i) AS i FROM integers HAVING i=5 ORDER BY i;
 ----
 5
 
 # use the same alias multiple times
 query I
-SELECT COUNT(i) AS i FROM integers HAVING i=i;
+SELECT COUNT(i) AS j FROM integers HAVING j=j;
 ----
 5
 
diff --git a/test/sql/filter/test_alias_filter.test b/test/sql/filter/test_alias_filter.test
index 0f0c7f4979e7..c03c4c10ff10 100644
--- a/test/sql/filter/test_alias_filter.test
+++ b/test/sql/filter/test_alias_filter.test
@@ -12,9 +12,43 @@ statement ok
 INSERT INTO integers VALUES (1), (2), (3), (NULL)
 
 # this fails in postgres and monetdb, but succeeds in sqlite
-# for now, we have this fail as well because it simplifies our life
-# the filter occurs before the projection, hence "j" is not computed until AFTER the filter normally
-# we probably want to change this to succeed
+query I
+SELECT i % 2 AS k FROM integers WHERE k<>0;
+----
+1
+1
+
+# These cases roughly follows what HAVING does.
+# See test/sql/binder/test_having_alias.test.
+
+# alias cannot be qualified
 statement error
-SELECT i % 2 AS j FROM integers WHERE j<>0;
+SELECT i % 2 AS k FROM integers WHERE integers.k<>0;
+
+# columns take priority
+query I
+SELECT i % 2 AS i FROM integers WHERE i<>0;
+----
+1
+0
+1
 
+# columns with qualified name
+query I
+SELECT i % 2 AS k FROM integers WHERE integers.i<>0;
+----
+1
+0
+1
+
+# use the same alias multiple times
+query I
+SELECT i % 2 AS k FROM integers WHERE k=k;
+----
+1
+0
+1
+
+# alias to an aggregate doesn't work.
+statement error
+SELECT i % 2 AS o, COUNT(i) AS c FROM integers WHERE c = 0 GROUP BY o;
