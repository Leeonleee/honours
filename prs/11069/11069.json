{
  "repo": "duckdb/duckdb",
  "pull_number": 11069,
  "instance_id": "duckdb__duckdb-11069",
  "issue_numbers": [
    "10752"
  ],
  "base_commit": "10bc4c92efd38e91b10d8e1326a8b3b075a83319",
  "patch": "diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt\nindex cfcb4a4eda14..d45ae7fb65fd 100644\n--- a/src/CMakeLists.txt\n+++ b/src/CMakeLists.txt\n@@ -33,6 +33,9 @@ set(DUCKDB_SYSTEM_LIBS ${CMAKE_DL_LIBS})\n if(MSVC OR MINGW)\n   set(DUCKDB_SYSTEM_LIBS ${DUCKDB_SYSTEM_LIBS} ws2_32 rstrtmgr)\n endif()\n+if(MSVC)\n+  set(DUCKDB_SYSTEM_LIBS ${DUCKDB_SYSTEM_LIBS} bcrypt)\n+endif()\n \n if(MSVC)\n   add_definitions(/bigobj)\ndiff --git a/src/include/duckdb/common/limits.hpp b/src/include/duckdb/common/limits.hpp\nindex 21e28f7d45b6..9cc01d08fd35 100644\n--- a/src/include/duckdb/common/limits.hpp\n+++ b/src/include/duckdb/common/limits.hpp\n@@ -29,10 +29,10 @@ struct NumericLimits {\n \tstatic constexpr T Maximum() {\n \t\treturn std::numeric_limits<T>::max();\n \t}\n-\tDUCKDB_API static constexpr bool IsSigned() {\n+\tstatic constexpr bool IsSigned() {\n \t\treturn std::is_signed<T>::value;\n \t}\n-\tDUCKDB_API static constexpr idx_t Digits();\n+\tstatic constexpr idx_t Digits();\n };\n \n template <>\ndiff --git a/third_party/mbedtls/include/mbedtls/mbedtls_config.h b/third_party/mbedtls/include/mbedtls/mbedtls_config.h\nindex 25337be28999..fdd591f5b8d9 100644\n--- a/third_party/mbedtls/include/mbedtls/mbedtls_config.h\n+++ b/third_party/mbedtls/include/mbedtls/mbedtls_config.h\n@@ -17,6 +17,3 @@\n #define MBEDTLS_ARIA_C\n #define MBEDTLS_GCM_C\n #define MBEDTLS_ENTROPY_C\n-#if defined(_WIN32)\n-#define MBEDTLS_NO_PLATFORM_ENTROPY\n-#endif\ndiff --git a/third_party/mbedtls/library/entropy_poll.cpp b/third_party/mbedtls/library/entropy_poll.cpp\nindex c894fb6b3ed4..067ec2f3c6f3 100644\n--- a/third_party/mbedtls/library/entropy_poll.cpp\n+++ b/third_party/mbedtls/library/entropy_poll.cpp\n@@ -49,12 +49,12 @@\n \n #if defined(_WIN32) && !defined(EFIX64) && !defined(EFI32)\n \n-#if !defined(_WIN32_WINNT)\n-#define _WIN32_WINNT 0x0400\n-#endif\n #include <windows.h>\n-#include <wincrypt.h>\n+#include <bcrypt.h>\n+#include <intsafe.h>\n \n+#if defined(__MINGW32__)\n+// MINGW\n int mbedtls_platform_entropy_poll( void *data, unsigned char *output, size_t len,\n                            size_t *olen )\n {\n@@ -79,6 +79,34 @@ int mbedtls_platform_entropy_poll( void *data, unsigned char *output, size_t len\n \n     return( 0 );\n }\n+#else\n+int mbedtls_platform_entropy_poll(void *data, unsigned char *output, size_t len,\n+                                  size_t *olen)\n+{\n+    ((void) data);\n+    *olen = 0;\n+\n+    /*\n+     * BCryptGenRandom takes ULONG for size, which is smaller than size_t on\n+     * 64-bit Windows platforms. Extract entropy in chunks of len (dependent\n+     * on ULONG_MAX) size.\n+     */\n+    while (len != 0) {\n+        unsigned long ulong_bytes =\n+            (len > ULONG_MAX) ? ULONG_MAX : (unsigned long) len;\n+\n+        if (!BCRYPT_SUCCESS(BCryptGenRandom(NULL, output, ulong_bytes,\n+                                            BCRYPT_USE_SYSTEM_PREFERRED_RNG))) {\n+            return MBEDTLS_ERR_ENTROPY_SOURCE_FAILED;\n+        }\n+\n+        *olen += ulong_bytes;\n+        len -= ulong_bytes;\n+    }\n+\n+    return 0;\n+}\n+#endif\n #else /* _WIN32 && !EFIX64 && !EFI32 */\n \n /*\ndiff --git a/tools/pythonpkg/setup.py b/tools/pythonpkg/setup.py\nindex 506b6f7c2404..1907fec77d4f 100644\n--- a/tools/pythonpkg/setup.py\n+++ b/tools/pythonpkg/setup.py\n@@ -194,9 +194,9 @@ def open_utf8(fpath, flags):\n \n define_macros.extend([('DUCKDB_EXTENSION_AUTOLOAD_DEFAULT', '1'), ('DUCKDB_EXTENSION_AUTOINSTALL_DEFAULT', '1')])\n \n-linker_args = toolchain_args\n+linker_args = toolchain_args[:]\n if platform.system() == 'Windows':\n-    linker_args.extend(['rstrtmgr.lib'])\n+    linker_args.extend(['rstrtmgr.lib', 'bcrypt.lib'])\n \n extra_files = []\n header_files = []\n",
  "test_patch": "diff --git a/test/sql/copy/parquet/parquet_encryption.test_slow b/test/sql/copy/parquet/parquet_encryption.test\nsimilarity index 52%\nrename from test/sql/copy/parquet/parquet_encryption.test_slow\nrename to test/sql/copy/parquet/parquet_encryption.test\nindex b3d23dc8f973..67972227bd5d 100644\n--- a/test/sql/copy/parquet/parquet_encryption.test_slow\n+++ b/test/sql/copy/parquet/parquet_encryption.test\n@@ -1,9 +1,12 @@\n-# name: test/sql/copy/parquet/parquet_encryption.test_slow\n+# name: test/sql/copy/parquet/parquet_encryption.test\n # description: Test Parquet encryption\n # group: [parquet]\n \n require parquet\n \n+# parquet keys are not persisted across restarts\n+require noforcestorage\n+\n statement ok\n PRAGMA enable_verification\n \n@@ -84,91 +87,3 @@ statement error\n SELECT * FROM read_parquet('__TEST_DIR__/unencrypted.parquet', encryption_config={footer_key: 'key256'})\n ----\n Invalid Input Error\n-\n-# roundtrip all of TPCH\n-statement ok\n-PRAGMA disable_verification\n-\n-require tpch\n-\n-statement ok\n-CALL dbgen(sf=1)\n-\n-statement ok\n-EXPORT DATABASE '__TEST_DIR__/tpch_encrypted' (FORMAT 'parquet', ENCRYPTION_CONFIG {footer_key: 'key128'})\n-\n-load :memory:\n-\n-# re-add key upon loading the DB again\n-statement ok\n-PRAGMA add_parquet_key('key128', '0123456789112345')\n-\n-statement ok\n-IMPORT DATABASE '__TEST_DIR__/tpch_encrypted'\n-\n-loop i 1 9\n-\n-query I\n-PRAGMA tpch(${i})\n-----\n-<FILE>:extension/tpch/dbgen/answers/sf1/q0${i}.csv\n-\n-endloop\n-\n-loop i 10 23\n-\n-query I\n-PRAGMA tpch(${i})\n-----\n-<FILE>:extension/tpch/dbgen/answers/sf1/q${i}.csv\n-\n-endloop\n-\n-# now again without importing the DB, just with views, so we can test projection/filter pushdown\n-load :memory:\n-\n-# re-add key upon loading the DB again\n-statement ok\n-PRAGMA add_parquet_key('key128', '0123456789112345')\n-\n-statement ok\n-CREATE VIEW lineitem AS SELECT * FROM read_parquet('__TEST_DIR__/tpch_encrypted/lineitem.parquet', encryption_config={footer_key: 'key128'});\n-\n-statement ok\n-CREATE VIEW orders AS SELECT * FROM read_parquet('__TEST_DIR__/tpch_encrypted/orders.parquet', encryption_config={footer_key: 'key128'});\n-\n-statement ok\n-CREATE VIEW partsupp AS SELECT * FROM read_parquet('__TEST_DIR__/tpch_encrypted/partsupp.parquet', encryption_config={footer_key: 'key128'});\n-\n-statement ok\n-CREATE VIEW part AS SELECT * FROM read_parquet('__TEST_DIR__/tpch_encrypted/part.parquet', encryption_config={footer_key: 'key128'});\n-\n-statement ok\n-CREATE VIEW customer AS SELECT * FROM read_parquet('__TEST_DIR__/tpch_encrypted/customer.parquet', encryption_config={footer_key: 'key128'});\n-\n-statement ok\n-CREATE VIEW supplier AS SELECT * FROM read_parquet('__TEST_DIR__/tpch_encrypted/supplier.parquet', encryption_config={footer_key: 'key128'});\n-\n-statement ok\n-CREATE VIEW nation AS SELECT * FROM read_parquet('__TEST_DIR__/tpch_encrypted/nation.parquet', encryption_config={footer_key: 'key128'});\n-\n-statement ok\n-CREATE VIEW region AS SELECT * FROM read_parquet('__TEST_DIR__/tpch_encrypted/region.parquet', encryption_config={footer_key: 'key128'});\n-\n-loop i 1 9\n-\n-query I\n-PRAGMA tpch(${i})\n-----\n-<FILE>:extension/tpch/dbgen/answers/sf1/q0${i}.csv\n-\n-endloop\n-\n-loop i 10 23\n-\n-query I\n-PRAGMA tpch(${i})\n-----\n-<FILE>:extension/tpch/dbgen/answers/sf1/q${i}.csv\n-\n-endloop\ndiff --git a/test/sql/copy/parquet/parquet_encryption_tpch.test_slow b/test/sql/copy/parquet/parquet_encryption_tpch.test_slow\nnew file mode 100644\nindex 000000000000..7f2644162f25\n--- /dev/null\n+++ b/test/sql/copy/parquet/parquet_encryption_tpch.test_slow\n@@ -0,0 +1,92 @@\n+# name: test/sql/copy/parquet/parquet_encryption_tpch.test_slow\n+# description: Test Parquet encryption for TPC-H\n+# group: [parquet]\n+\n+require parquet\n+\n+require tpch\n+\n+statement ok\n+CALL dbgen(sf=1)\n+\n+statement ok\n+PRAGMA add_parquet_key('key128', '0123456789112345')\n+\n+statement ok\n+EXPORT DATABASE '__TEST_DIR__/tpch_encrypted' (FORMAT 'parquet', ENCRYPTION_CONFIG {footer_key: 'key128'})\n+\n+load :memory:\n+\n+# re-add key upon loading the DB again\n+statement ok\n+PRAGMA add_parquet_key('key128', '0123456789112345')\n+\n+statement ok\n+IMPORT DATABASE '__TEST_DIR__/tpch_encrypted'\n+\n+loop i 1 9\n+\n+query I\n+PRAGMA tpch(${i})\n+----\n+<FILE>:extension/tpch/dbgen/answers/sf1/q0${i}.csv\n+\n+endloop\n+\n+loop i 10 23\n+\n+query I\n+PRAGMA tpch(${i})\n+----\n+<FILE>:extension/tpch/dbgen/answers/sf1/q${i}.csv\n+\n+endloop\n+\n+# now again without importing the DB, just with views, so we can test projection/filter pushdown\n+load :memory:\n+\n+# re-add key upon loading the DB again\n+statement ok\n+PRAGMA add_parquet_key('key128', '0123456789112345')\n+\n+statement ok\n+CREATE VIEW lineitem AS SELECT * FROM read_parquet('__TEST_DIR__/tpch_encrypted/lineitem.parquet', encryption_config={footer_key: 'key128'});\n+\n+statement ok\n+CREATE VIEW orders AS SELECT * FROM read_parquet('__TEST_DIR__/tpch_encrypted/orders.parquet', encryption_config={footer_key: 'key128'});\n+\n+statement ok\n+CREATE VIEW partsupp AS SELECT * FROM read_parquet('__TEST_DIR__/tpch_encrypted/partsupp.parquet', encryption_config={footer_key: 'key128'});\n+\n+statement ok\n+CREATE VIEW part AS SELECT * FROM read_parquet('__TEST_DIR__/tpch_encrypted/part.parquet', encryption_config={footer_key: 'key128'});\n+\n+statement ok\n+CREATE VIEW customer AS SELECT * FROM read_parquet('__TEST_DIR__/tpch_encrypted/customer.parquet', encryption_config={footer_key: 'key128'});\n+\n+statement ok\n+CREATE VIEW supplier AS SELECT * FROM read_parquet('__TEST_DIR__/tpch_encrypted/supplier.parquet', encryption_config={footer_key: 'key128'});\n+\n+statement ok\n+CREATE VIEW nation AS SELECT * FROM read_parquet('__TEST_DIR__/tpch_encrypted/nation.parquet', encryption_config={footer_key: 'key128'});\n+\n+statement ok\n+CREATE VIEW region AS SELECT * FROM read_parquet('__TEST_DIR__/tpch_encrypted/region.parquet', encryption_config={footer_key: 'key128'});\n+\n+loop i 1 9\n+\n+query I\n+PRAGMA tpch(${i})\n+----\n+<FILE>:extension/tpch/dbgen/answers/sf1/q0${i}.csv\n+\n+endloop\n+\n+loop i 10 23\n+\n+query I\n+PRAGMA tpch(${i})\n+----\n+<FILE>:extension/tpch/dbgen/answers/sf1/q${i}.csv\n+\n+endloop\n",
  "problem_statement": "Export to Parquet file with encryption\n### What happens?\r\n\r\nExport to encrypted Parquet file failed with Error: Invalid Error: Unable to generate random data for Windows DuckDB client\r\n\r\n\r\n### To Reproduce\r\n\r\nI'm doing very simple test for .10 version on fresh DuckDB client on windows instance.\r\n(Downloaded latest version with winget install DuckDB.cli )\r\n\r\n```SQL\r\ncreate table md (Id int);\r\nselect * from md;\r\n```\r\nOutput:\r\n```\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 Id \u2502\r\n\u2502 int32 \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 0 rows \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n```SQL\r\ninsert into md (Id) values (1);\r\ninsert into md (Id) values (2);\r\nselect * from md;\r\n```\r\nOutput:\r\n```\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 Id \u2502\r\n\u2502 int32 \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 1 \u2502\r\n\u2502 2 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n```SQL\r\nPRAGMA add_parquet_key('key256', '01234567891123450123456789112345');\r\n```\r\nOutput:\r\n```\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 Success \u2502\r\n\u2502 boolean \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 0 rows \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n```SQL\r\nCOPY md TO 'tbl.parquet' (ENCRYPTION_CONFIG {footer_key: 'key256'});\r\n```\r\nOutput:\r\n```\r\nError: Invalid Error: Unable to generate random data\r\n```\r\n\r\nI tried with nightly build with the same results.\r\nAlso tried to use .open test.db first , also the same error.\r\n\r\n\r\n### OS:\r\n\r\nWindows 10 Pro x64\r\n\r\n### DuckDB Version:\r\n\r\n0.10.0\r\n\r\n### DuckDB Client:\r\n\r\nWin DuckDB.cli\r\n\r\n### Full Name:\r\n\r\nAlex Nikitin\r\n\r\n### Affiliation:\r\n\r\nPartners Intl\r\n\r\n### Have you tried this on the latest [nightly build](https://duckdb.org/docs/installation/?version=main)?\r\n\r\nI have tested with a nightly build\r\n\r\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\r\n\r\n- [X] Yes, I have\n",
  "hints_text": "Thanks, I could indeed reproduce this on Windows (Win11, DuckDB installed via WinGet).",
  "created_at": "2024-03-09T13:07:57Z"
}