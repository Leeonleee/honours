{
  "repo": "duckdb/duckdb",
  "pull_number": 11255,
  "instance_id": "duckdb__duckdb-11255",
  "issue_numbers": [
    "11250"
  ],
  "base_commit": "e245e2927f14fb8bcbe7c794218fb73449f3dce1",
  "patch": "diff --git a/tools/pythonpkg/src/pyduckdb/connection_wrapper.cpp b/tools/pythonpkg/src/pyduckdb/connection_wrapper.cpp\nindex c35942cacb4d..5cc56d11f906 100644\n--- a/tools/pythonpkg/src/pyduckdb/connection_wrapper.cpp\n+++ b/tools/pythonpkg/src/pyduckdb/connection_wrapper.cpp\n@@ -77,7 +77,10 @@ shared_ptr<DuckDBPyType> PyConnectionWrapper::Type(const string &type_str, share\n \tif (!conn) {\n \t\tconn = DuckDBPyConnection::DefaultConnection();\n \t}\n-\treturn conn->Type(type_str);\n+\tauto &context = *conn->connection->context;\n+\tshared_ptr<DuckDBPyType> result;\n+\tcontext.RunFunctionInTransaction([&result, &type_str, &conn]() { result = conn->Type(type_str); });\n+\treturn result;\n }\n \n shared_ptr<DuckDBPyConnection> PyConnectionWrapper::ExecuteMany(const py::object &query, py::object params,\n",
  "test_patch": "diff --git a/tools/pythonpkg/tests/fast/test_type.py b/tools/pythonpkg/tests/fast/test_type.py\nindex 9350a4088149..d8723d45e22b 100644\n--- a/tools/pythonpkg/tests/fast/test_type.py\n+++ b/tools/pythonpkg/tests/fast/test_type.py\n@@ -196,6 +196,13 @@ def test_attribute_accessor(self):\n         child_type = type.v2.child\n         assert str(child_type) == 'MAP(BLOB, BIT)'\n \n+    def test_json_type(self):\n+        json_type = duckdb.type('JSON')\n+\n+        val = duckdb.Value('{\"duck\": 42}', json_type)\n+        res = duckdb.execute(\"select typeof($1)\", [val]).fetchone()\n+        assert res == ('JSON',)\n+\n     # NOTE: we can support this, but I don't think going through hoops for an outdated version of python is worth it\n     @pytest.mark.skipif(sys.version_info < (3, 9), reason=\"python3.7 does not store Optional[..] in a recognized way\")\n     def test_optional(self):\n",
  "problem_statement": "Python function `duckdb.type()` cannot resolve JSON type\n### What happens?\n\n`duckdb.type()` function throws the following error when the type string contains `JSON`:\r\n```\r\nduckdb.duckdb.InternalException: INTERNAL Error: TransactionContext::ActiveTransaction called without active transaction\r\n```\r\n\r\nAs a side note, the same error is thrown for any invalid string, e.g., `duckdb.type('randomstring')`.\n\n### To Reproduce\n\nMinimal reproducible example:\r\n```python\r\nimport duckdb\r\nduckdb.type('JSON')\r\n```\r\n\r\nIt throws the error above.\n\n### OS:\n\nFedora Linux 38, x86\n\n### DuckDB Version:\n\n0.10.0\n\n### DuckDB Client:\n\nPython\n\n### Full Name:\n\nZiya Mukhtarov\n\n### Affiliation:\n\nCWI\n\n### Have you tried this on the latest [nightly build](https://duckdb.org/docs/installation/?version=main)?\n\nI have tested with a nightly build\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] Yes, I have\n",
  "hints_text": "",
  "created_at": "2024-03-19T16:23:08Z"
}