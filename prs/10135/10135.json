{
  "repo": "duckdb/duckdb",
  "pull_number": 10135,
  "instance_id": "duckdb__duckdb-10135",
  "issue_numbers": [
    "10008",
    "10008"
  ],
  "base_commit": "28543c9782b3def06a3a17d164fc6dca720b5fbc",
  "patch": "diff --git a/src/main/prepared_statement_data.cpp b/src/main/prepared_statement_data.cpp\nindex 4bc356ce822a..4ff723546832 100644\n--- a/src/main/prepared_statement_data.cpp\n+++ b/src/main/prepared_statement_data.cpp\n@@ -36,7 +36,9 @@ bool PreparedStatementData::RequireRebind(ClientContext &context, optional_ptr<c\n \tfor (auto &it : value_map) {\n \t\tauto &identifier = it.first;\n \t\tauto lookup = values->find(identifier);\n-\t\tD_ASSERT(lookup != values->end());\n+\t\tif (lookup == values->end()) {\n+\t\t\tbreak;\n+\t\t}\n \t\tif (lookup->second.type() != it.second->return_type) {\n \t\t\treturn true;\n \t\t}\ndiff --git a/src/planner/binder/statement/bind_create_table.cpp b/src/planner/binder/statement/bind_create_table.cpp\nindex 56672a22e6a2..6016273f1b86 100644\n--- a/src/planner/binder/statement/bind_create_table.cpp\n+++ b/src/planner/binder/statement/bind_create_table.cpp\n@@ -216,6 +216,9 @@ void Binder::BindDefaultValues(const ColumnList &columns, vector<unique_ptr<Expr\n \t\t\t// we bind a copy of the DEFAULT value because binding is destructive\n \t\t\t// and we want to keep the original expression around for serialization\n \t\t\tauto default_copy = column.DefaultValue().Copy();\n+\t\t\tif (default_copy->HasParameter()) {\n+\t\t\t\tthrow BinderException(\"DEFAULT values cannot contain parameters\");\n+\t\t\t}\n \t\t\tConstantBinder default_binder(*this, context, \"DEFAULT value\");\n \t\t\tdefault_binder.target_type = column.Type();\n \t\t\tbound_default = default_binder.Bind(default_copy);\ndiff --git a/tools/shell/shell.c b/tools/shell/shell.c\nindex 74e199375f5d..16032d3d5605 100644\n--- a/tools/shell/shell.c\n+++ b/tools/shell/shell.c\n@@ -12540,37 +12540,7 @@ static void bind_table_init(ShellState *p){\n ** tables.  The table must be in the TEMP schema.\n */\n static void bind_prepared_stmt(ShellState *pArg, sqlite3_stmt *pStmt){\n-  int nVar;\n-  int i;\n-  int rc;\n-  sqlite3_stmt *pQ = 0;\n-\n-  nVar = sqlite3_bind_parameter_count(pStmt);\n-  if( nVar==0 ) return;  /* Nothing to do */\n-  if( sqlite3_table_column_metadata(pArg->db, \"TEMP\", \"sqlite_parameters\",\n-                                    \"key\", 0, 0, 0, 0, 0)!=SQLITE_OK ){\n-    return; /* Parameter table does not exist */\n-  }\n-  rc = sqlite3_prepare_v2(pArg->db,\n-          \"SELECT value FROM temp.sqlite_parameters\"\n-          \" WHERE key=?1\", -1, &pQ, 0);\n-  if( rc || pQ==0 ) return;\n-  for(i=1; i<=nVar; i++){\n-    char zNum[30];\n-    const char *zVar = sqlite3_bind_parameter_name(pStmt, i);\n-    if( zVar==0 ){\n-      sqlite3_snprintf(sizeof(zNum),zNum,\"?%d\",i);\n-      zVar = zNum;\n-    }\n-    sqlite3_bind_text(pQ, 1, zVar, -1, SQLITE_STATIC);\n-    if( sqlite3_step(pQ)==SQLITE_ROW ){\n-      sqlite3_bind_value(pStmt, i, sqlite3_column_value(pQ, 0));\n-    }else{\n-      sqlite3_bind_null(pStmt, i);\n-    }\n-    sqlite3_reset(pQ);\n-  }\n-  sqlite3_finalize(pQ);\n+  return;\n }\n \n /*\n",
  "test_patch": "diff --git a/test/sql/catalog/table/create_table_parameters.test b/test/sql/catalog/table/create_table_parameters.test\nnew file mode 100644\nindex 000000000000..01f15a9ad03f\n--- /dev/null\n+++ b/test/sql/catalog/table/create_table_parameters.test\n@@ -0,0 +1,12 @@\n+# name: test/sql/catalog/table/create_table_parameters.test\n+# description: Issue #10008 - DuckDB SIGSEGV when creating table with DEFAULT ?\n+# group: [table]\n+\n+statement error\n+CREATE TABLE t0 ( c1 INT DEFAULT ? );\n+----\n+DEFAULT values cannot contain parameters\n+\n+statement error\n+CREATE TABLE t0 ( c1 INT CHECK (?) );\n+----\n",
  "problem_statement": "DuckDB SIGSEGV when creating table with DEFAULT ?\n### What happens?\n\nThe latest release version of DuckDB (`v0.9.2` `3c695d7ba94d`) crashes when executing the following query:\r\n\r\n```sql\r\nCREATE TABLE t0 ( c1 INT DEFAULT ? );\r\nINSERT INTO t0 VALUES (0);\r\n```\r\n\r\nHere is the Stack Trace from GDB: \r\n\r\n```\r\n(gdb) bt\r\n#0  duckdb::LogicalType::operator== (this=0x28, rhs=...) at /Users/sly/Desktop/Projects/DBMSs/duckdb/duckdb_ori/src/common/types.cpp:1090\r\n#1  0x0000aaaaaaf5f7f0 in duckdb::LogicalType::operator!= (rhs=..., this=<optimized out>)\r\n    at /Users/sly/Desktop/Projects/DBMSs/duckdb/duckdb_ori/src/include/duckdb/common/types.hpp:280\r\n#2  duckdb::PreparedStatementData::RequireRebind (this=<optimized out>, context=..., values=...)\r\n    at /Users/sly/Desktop/Projects/DBMSs/duckdb/duckdb_ori/src/main/prepared_statement_data.cpp:40\r\n#3  0x0000aaaaaaf7350c in duckdb::ClientContext::PendingStatementOrPreparedStatement (this=this@entry=0xaaaaac304030, lock=..., query=\"INSERT INTO v0 VALUES (0);\",\r\n    statement=..., prepared=std::shared_ptr<duckdb::PreparedStatementData> (use count 1, weak count 0) = {...}, parameters=...)\r\n    at /usr/include/c++/9/bits/shared_ptr_base.h:1020\r\n#4  0x0000aaaaaaf74af8 in duckdb::ClientContext::PendingStatementOrPreparedStatementInternal (this=this@entry=0xaaaaac304030, lock=...,\r\n    query=\"INSERT INTO v0 VALUES (0);\", statement=..., prepared=std::shared_ptr<duckdb::PreparedStatementData> (use count 1, weak count 0) = {...}, parameters=...)\r\n    at /usr/include/c++/9/bits/move.h:74\r\n#5  0x0000aaaaaaf74f9c in duckdb::ClientContext::PendingQueryPreparedInternal (this=this@entry=0xaaaaac304030, lock=..., query=\"INSERT INTO v0 VALUES (0);\",\r\n    prepared=std::shared_ptr<duckdb::PreparedStatementData> (use count 1, weak count 0) = {...}, parameters=...) at /usr/include/c++/9/tuple:918\r\n#6  0x0000aaaaaaf75104 in duckdb::ClientContext::PendingQuery (this=0xaaaaac304030, query=\"INSERT INTO v0 VALUES (0);\",\r\n    prepared=std::shared_ptr<duckdb::PreparedStatementData> (use count 1, weak count 0) = {...}, parameters=...)\r\n    at /Users/sly/Desktop/Projects/DBMSs/duckdb/duckdb_ori/src/include/duckdb/common/unique_ptr.hpp:19\r\n#7  0x0000aaaaaaf75370 in duckdb::PreparedStatement::PendingQuery (this=this@entry=0xaaaaac317410, named_values=std::unordered_map with 0 elements,\r\n    allow_stream_result=allow_stream_result@entry=false) at /usr/include/c++/9/bits/shared_ptr_base.h:1020\r\n#8  0x0000aaaaaaf75848 in duckdb::PreparedStatement::PendingQuery (this=0xaaaaac317410, values=..., allow_stream_result=allow_stream_result@entry=false)\r\n    at /Users/sly/Desktop/Projects/DBMSs/duckdb/duckdb_ori/src/main/prepared_statement.cpp:94\r\n#9  0x0000aaaaaaf759a8 in duckdb::PreparedStatement::Execute (this=<optimized out>, values=..., allow_stream_result=allow_stream_result@entry=false)\r\n    at /Users/sly/Desktop/Projects/DBMSs/duckdb/duckdb_ori/src/main/prepared_statement.cpp:81\r\n#10 0x0000aaaaaabb1da4 in duckdb_shell_sqlite3_print_duckbox (pStmt=0xaaaaac30ddc0, max_rows=40, max_width=0, null_value=0xffffffffde7c \"\", columnar=0)\r\n    at /Users/sly/Desktop/Projects/DBMSs/duckdb/duckdb_ori/src/include/duckdb/common/unique_ptr.hpp:38\r\n#11 0x0000aaaaaab9ecdc in exec_prepared_stmt (pArg=0xffffffffdd68, pStmt=0xaaaaac30ddc0) at /Users/sly/Desktop/Projects/DBMSs/duckdb/duckdb_ori/tools/shell/shell.c:12901\r\n#12 0x0000aaaaaab9fcd4 in shell_exec (pArg=0xffffffffdd68, zSql=<optimized out>, pzErrMsg=<optimized out>)\r\n    at /Users/sly/Desktop/Projects/DBMSs/duckdb/duckdb_ori/tools/shell/shell.c:13236\r\n#13 0x0000aaaaaaba17dc in runOneSqlLine (p=0xffffffffdd68, zSql=0xaaaaac1f6680 \"INSERT INTO v0 VALUES (0);\", in=0x0, startline=3)\r\n    at /Users/sly/Desktop/Projects/DBMSs/duckdb/duckdb_ori/tools/shell/shell.c:19655\r\n#14 0x0000aaaaaaba8e5c in process_input (p=0xffffffffdd68) at /Users/sly/Desktop/Projects/DBMSs/duckdb/duckdb_ori/tools/shell/shell.c:19773\r\n#15 0x0000aaaaaab8c794 in main (argc=<optimized out>, argv=0xfffffffff0c8) at /Users/sly/Desktop/Projects/DBMSs/duckdb/duckdb_ori/tools/shell/shell.c:20586\r\n```\r\n\r\nThis bug is also reproducible on the latest `main` branch: `24148408432`. \r\n\n\n### To Reproduce\n\n1. Clone the DuckDB Git from the official repo.\r\n2. Checkout to either the latest main or release version: `v0.9.2` (3c695d7ba94d).\r\n3. Compile the DuckDB binary by using either make reldebug or make debug.\r\n4. Run the compiled DuckDB and input the following SQL:\r\n\r\n```sql\r\nCREATE TABLE t0 ( c1 INT DEFAULT ? );\r\nINSERT INTO t0 VALUES (0);\r\n```\r\n\r\n5. Observe and log the crash information.\r\n\n\n### OS:\n\nUbuntu 20.04 LTS\n\n### DuckDB Version:\n\n0.9.2\n\n### DuckDB Client:\n\nDuckDB official command line client\n\n### Full Name:\n\nYu Liang\n\n### Affiliation:\n\nThe Pennsylvania State University\n\n### Have you tried this on the latest `main` branch?\n\nI have tested with a main build\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] Yes, I have\nDuckDB SIGSEGV when creating table with DEFAULT ?\n### What happens?\n\nThe latest release version of DuckDB (`v0.9.2` `3c695d7ba94d`) crashes when executing the following query:\r\n\r\n```sql\r\nCREATE TABLE t0 ( c1 INT DEFAULT ? );\r\nINSERT INTO t0 VALUES (0);\r\n```\r\n\r\nHere is the Stack Trace from GDB: \r\n\r\n```\r\n(gdb) bt\r\n#0  duckdb::LogicalType::operator== (this=0x28, rhs=...) at /Users/sly/Desktop/Projects/DBMSs/duckdb/duckdb_ori/src/common/types.cpp:1090\r\n#1  0x0000aaaaaaf5f7f0 in duckdb::LogicalType::operator!= (rhs=..., this=<optimized out>)\r\n    at /Users/sly/Desktop/Projects/DBMSs/duckdb/duckdb_ori/src/include/duckdb/common/types.hpp:280\r\n#2  duckdb::PreparedStatementData::RequireRebind (this=<optimized out>, context=..., values=...)\r\n    at /Users/sly/Desktop/Projects/DBMSs/duckdb/duckdb_ori/src/main/prepared_statement_data.cpp:40\r\n#3  0x0000aaaaaaf7350c in duckdb::ClientContext::PendingStatementOrPreparedStatement (this=this@entry=0xaaaaac304030, lock=..., query=\"INSERT INTO v0 VALUES (0);\",\r\n    statement=..., prepared=std::shared_ptr<duckdb::PreparedStatementData> (use count 1, weak count 0) = {...}, parameters=...)\r\n    at /usr/include/c++/9/bits/shared_ptr_base.h:1020\r\n#4  0x0000aaaaaaf74af8 in duckdb::ClientContext::PendingStatementOrPreparedStatementInternal (this=this@entry=0xaaaaac304030, lock=...,\r\n    query=\"INSERT INTO v0 VALUES (0);\", statement=..., prepared=std::shared_ptr<duckdb::PreparedStatementData> (use count 1, weak count 0) = {...}, parameters=...)\r\n    at /usr/include/c++/9/bits/move.h:74\r\n#5  0x0000aaaaaaf74f9c in duckdb::ClientContext::PendingQueryPreparedInternal (this=this@entry=0xaaaaac304030, lock=..., query=\"INSERT INTO v0 VALUES (0);\",\r\n    prepared=std::shared_ptr<duckdb::PreparedStatementData> (use count 1, weak count 0) = {...}, parameters=...) at /usr/include/c++/9/tuple:918\r\n#6  0x0000aaaaaaf75104 in duckdb::ClientContext::PendingQuery (this=0xaaaaac304030, query=\"INSERT INTO v0 VALUES (0);\",\r\n    prepared=std::shared_ptr<duckdb::PreparedStatementData> (use count 1, weak count 0) = {...}, parameters=...)\r\n    at /Users/sly/Desktop/Projects/DBMSs/duckdb/duckdb_ori/src/include/duckdb/common/unique_ptr.hpp:19\r\n#7  0x0000aaaaaaf75370 in duckdb::PreparedStatement::PendingQuery (this=this@entry=0xaaaaac317410, named_values=std::unordered_map with 0 elements,\r\n    allow_stream_result=allow_stream_result@entry=false) at /usr/include/c++/9/bits/shared_ptr_base.h:1020\r\n#8  0x0000aaaaaaf75848 in duckdb::PreparedStatement::PendingQuery (this=0xaaaaac317410, values=..., allow_stream_result=allow_stream_result@entry=false)\r\n    at /Users/sly/Desktop/Projects/DBMSs/duckdb/duckdb_ori/src/main/prepared_statement.cpp:94\r\n#9  0x0000aaaaaaf759a8 in duckdb::PreparedStatement::Execute (this=<optimized out>, values=..., allow_stream_result=allow_stream_result@entry=false)\r\n    at /Users/sly/Desktop/Projects/DBMSs/duckdb/duckdb_ori/src/main/prepared_statement.cpp:81\r\n#10 0x0000aaaaaabb1da4 in duckdb_shell_sqlite3_print_duckbox (pStmt=0xaaaaac30ddc0, max_rows=40, max_width=0, null_value=0xffffffffde7c \"\", columnar=0)\r\n    at /Users/sly/Desktop/Projects/DBMSs/duckdb/duckdb_ori/src/include/duckdb/common/unique_ptr.hpp:38\r\n#11 0x0000aaaaaab9ecdc in exec_prepared_stmt (pArg=0xffffffffdd68, pStmt=0xaaaaac30ddc0) at /Users/sly/Desktop/Projects/DBMSs/duckdb/duckdb_ori/tools/shell/shell.c:12901\r\n#12 0x0000aaaaaab9fcd4 in shell_exec (pArg=0xffffffffdd68, zSql=<optimized out>, pzErrMsg=<optimized out>)\r\n    at /Users/sly/Desktop/Projects/DBMSs/duckdb/duckdb_ori/tools/shell/shell.c:13236\r\n#13 0x0000aaaaaaba17dc in runOneSqlLine (p=0xffffffffdd68, zSql=0xaaaaac1f6680 \"INSERT INTO v0 VALUES (0);\", in=0x0, startline=3)\r\n    at /Users/sly/Desktop/Projects/DBMSs/duckdb/duckdb_ori/tools/shell/shell.c:19655\r\n#14 0x0000aaaaaaba8e5c in process_input (p=0xffffffffdd68) at /Users/sly/Desktop/Projects/DBMSs/duckdb/duckdb_ori/tools/shell/shell.c:19773\r\n#15 0x0000aaaaaab8c794 in main (argc=<optimized out>, argv=0xfffffffff0c8) at /Users/sly/Desktop/Projects/DBMSs/duckdb/duckdb_ori/tools/shell/shell.c:20586\r\n```\r\n\r\nThis bug is also reproducible on the latest `main` branch: `24148408432`. \r\n\n\n### To Reproduce\n\n1. Clone the DuckDB Git from the official repo.\r\n2. Checkout to either the latest main or release version: `v0.9.2` (3c695d7ba94d).\r\n3. Compile the DuckDB binary by using either make reldebug or make debug.\r\n4. Run the compiled DuckDB and input the following SQL:\r\n\r\n```sql\r\nCREATE TABLE t0 ( c1 INT DEFAULT ? );\r\nINSERT INTO t0 VALUES (0);\r\n```\r\n\r\n5. Observe and log the crash information.\r\n\n\n### OS:\n\nUbuntu 20.04 LTS\n\n### DuckDB Version:\n\n0.9.2\n\n### DuckDB Client:\n\nDuckDB official command line client\n\n### Full Name:\n\nYu Liang\n\n### Affiliation:\n\nThe Pennsylvania State University\n\n### Have you tried this on the latest `main` branch?\n\nI have tested with a main build\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] Yes, I have\n",
  "hints_text": "hello, I fail to fast reproduce, it seems that default value with '?' is not allowed?\r\n\r\nI have to use \"CREATE TABLE test(i INT DEFAULT '?')\" to create table, note the default value. And no crash happened @SteveLeungYL \n> hello, I fail to fast reproduce, it seems that default value with '?' is not allowed?\r\n> \r\n> I have to use \"CREATE TABLE test(i INT DEFAULT '?')\" to create table, note the default value. And no crash happened @SteveLeungYL\r\n\r\nYes. The first `CREATE TABLE` statement does return an error. On my terminal, the error being: `sqlite3_table_column_metadata: unsupported`. However, continuing with the second statement will trigger the Segmentation Fault, even if the first statement failed with error. \r\n\r\nNotably, the `?` sign does not come with quote. Only the \"CREATE TABLE test(i INT DEFAULT ?); INSERT INTO test VALUES (0);\" would trigger the bug. \nThanks. This indeed should not segfault.\nhello, I fail to fast reproduce, it seems that default value with '?' is not allowed?\r\n\r\nI have to use \"CREATE TABLE test(i INT DEFAULT '?')\" to create table, note the default value. And no crash happened @SteveLeungYL \n> hello, I fail to fast reproduce, it seems that default value with '?' is not allowed?\r\n> \r\n> I have to use \"CREATE TABLE test(i INT DEFAULT '?')\" to create table, note the default value. And no crash happened @SteveLeungYL\r\n\r\nYes. The first `CREATE TABLE` statement does return an error. On my terminal, the error being: `sqlite3_table_column_metadata: unsupported`. However, continuing with the second statement will trigger the Segmentation Fault, even if the first statement failed with error. \r\n\r\nNotably, the `?` sign does not come with quote. Only the \"CREATE TABLE test(i INT DEFAULT ?); INSERT INTO test VALUES (0);\" would trigger the bug. \nThanks. This indeed should not segfault.",
  "created_at": "2024-01-04T17:16:24Z"
}