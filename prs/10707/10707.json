{
  "repo": "duckdb/duckdb",
  "pull_number": 10707,
  "instance_id": "duckdb__duckdb-10707",
  "issue_numbers": [
    "10682"
  ],
  "base_commit": "4ac7a549a36a34bca54ef39eb98044c5a57d79ab",
  "patch": "diff --git a/.gitignore b/.gitignore\nindex 28f07693ceca..67114a06f137 100644\n--- a/.gitignore\n+++ b/.gitignore\n@@ -290,6 +290,7 @@ cmake_build\n cmake-build-debug\n cmake-build-release\n cmake-build-relwithdebinfo\n+CMakeUserPresets.json\n \n # Generated documentation\n docs\ndiff --git a/tools/jdbc/src/jni/duckdb_java.cpp b/tools/jdbc/src/jni/duckdb_java.cpp\nindex d94b4b30862f..83fe204248f6 100644\n--- a/tools/jdbc/src/jni/duckdb_java.cpp\n+++ b/tools/jdbc/src/jni/duckdb_java.cpp\n@@ -844,7 +844,15 @@ jobject ProcessVector(JNIEnv *env, Connection *conn_ref, Vector &vec, idx_t row_\n \tcase LogicalTypeId::DOUBLE:\n \t\tconstlen_data = env->NewDirectByteBuffer(FlatVector::GetData(vec), row_count * sizeof(double));\n \t\tbreak;\n+\tcase LogicalTypeId::DATE:\n+\t\tconstlen_data = env->NewDirectByteBuffer(FlatVector::GetData(vec), row_count * sizeof(date_t));\n+\t\tbreak;\n+\tcase LogicalTypeId::TIME:\n+\t\tconstlen_data = env->NewDirectByteBuffer(FlatVector::GetData(vec), row_count * sizeof(dtime_t));\n+\t\tbreak;\n \tcase LogicalTypeId::TIME_TZ:\n+\t\tconstlen_data = env->NewDirectByteBuffer(FlatVector::GetData(vec), row_count * sizeof(dtime_tz_t));\n+\t\tbreak;\n \tcase LogicalTypeId::TIMESTAMP_SEC:\n \tcase LogicalTypeId::TIMESTAMP_MS:\n \tcase LogicalTypeId::TIMESTAMP:\ndiff --git a/tools/jdbc/src/main/java/org/duckdb/DuckDBVector.java b/tools/jdbc/src/main/java/org/duckdb/DuckDBVector.java\nindex 50f994f5348f..9c975737c2c8 100644\n--- a/tools/jdbc/src/main/java/org/duckdb/DuckDBVector.java\n+++ b/tools/jdbc/src/main/java/org/duckdb/DuckDBVector.java\n@@ -25,6 +25,7 @@\n import java.util.HashMap;\n import java.util.Calendar;\n import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n \n class DuckDBVector {\n     // Constant to construct BigDecimals from hugeint_t\n@@ -124,13 +125,31 @@ Object getObject(int idx) throws SQLException {\n         }\n     }\n \n-    LocalTime getLocalTime(int idx) throws SQLException {\n+    LocalTime getLocalTime(int idx) {\n+        if (check_and_null(idx)) {\n+            return null;\n+        }\n+\n+        if (isType(DuckDBColumnType.TIME)) {\n+            long microseconds = getbuf(idx, 8).getLong();\n+            long nanoseconds = TimeUnit.MICROSECONDS.toNanos(microseconds);\n+            return LocalTime.ofNanoOfDay(nanoseconds);\n+        }\n+\n         String lazyString = getLazyString(idx);\n \n         return lazyString == null ? null : LocalTime.parse(lazyString);\n     }\n \n-    LocalDate getLocalDate(int idx) throws SQLException {\n+    LocalDate getLocalDate(int idx) {\n+        if (check_and_null(idx)) {\n+            return null;\n+        }\n+\n+        if (isType(DuckDBColumnType.DATE)) {\n+            return LocalDate.ofEpochDay(getbuf(idx, 4).getInt());\n+        }\n+\n         String lazyString = getLazyString(idx);\n \n         if (\"infinity\".equals(lazyString))\n@@ -276,7 +295,11 @@ Date getDate(int idx) {\n         if (check_and_null(idx)) {\n             return null;\n         }\n-        // TODO: load from native format\n+\n+        if (isType(DuckDBColumnType.DATE)) {\n+            return Date.valueOf(this.getLocalDate(idx));\n+        }\n+\n         String string_value = getLazyString(idx);\n         if (string_value == null) {\n             return null;\n@@ -296,11 +319,15 @@ OffsetTime getOffsetTime(int idx) {\n     }\n \n     Time getTime(int idx) {\n-        // TODO: load from native format\n-        String string_value = getLazyString(idx);\n-        if (string_value == null) {\n+        if (check_and_null(idx)) {\n             return null;\n         }\n+\n+        if (isType(DuckDBColumnType.TIME)) {\n+            return Time.valueOf(getLocalTime(idx));\n+        }\n+\n+        String string_value = getLazyString(idx);\n         try {\n             return Time.valueOf(string_value);\n         } catch (Exception e) {\n",
  "test_patch": "diff --git a/tools/jdbc/src/test/java/org/duckdb/TestDuckDBJDBC.java b/tools/jdbc/src/test/java/org/duckdb/TestDuckDBJDBC.java\nindex 6bba6b174591..7b1ea96814e2 100644\n--- a/tools/jdbc/src/test/java/org/duckdb/TestDuckDBJDBC.java\n+++ b/tools/jdbc/src/test/java/org/duckdb/TestDuckDBJDBC.java\n@@ -1733,7 +1733,7 @@ public static void test_evil_date() throws Exception {\n         ResultSet rs = stmt.executeQuery(\"SELECT '5131-08-05 (BC)'::date d\");\n \n         assertTrue(rs.next());\n-        assertNull(rs.getDate(\"d\"));\n+        assertEquals(rs.getDate(\"d\"), Date.valueOf(LocalDate.of(-5130, 8, 5)));\n \n         assertFalse(rs.next());\n         rs.close();\n@@ -3756,8 +3756,8 @@ static <K, V> Map<K, V> mapOf(Object... pairs) {\n         correct_answer_map.put(\"double_array\",\n                                trio(42.0, Double.NaN, Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY, null, -42.0));\n         correct_answer_map.put(\n-            \"date_array\", trio(LocalDate.parse(\"1970-01-01\"), LocalDate.parse(\"999999999-12-31\", FORMAT_DATE),\n-                               LocalDate.parse(\"-999999999-01-01\", FORMAT_DATE), null, LocalDate.parse(\"2022-05-12\")));\n+            \"date_array\", trio(LocalDate.parse(\"1970-01-01\"), LocalDate.parse(\"5881580-07-11\", FORMAT_DATE),\n+                               LocalDate.parse(\"-5877641-06-24\", FORMAT_DATE), null, LocalDate.parse(\"2022-05-12\")));\n         correct_answer_map.put(\"timestamp_array\", trio(Timestamp.valueOf(\"1970-01-01 00:00:00.0\"),\n                                                        DuckDBTimestamp.toSqlTimestamp(9223372036854775807L),\n                                                        DuckDBTimestamp.toSqlTimestamp(-9223372036854775807L), null,\n@@ -4245,6 +4245,15 @@ public static void test_get_binary_stream() throws Exception {\n         }\n     }\n \n+    public static void test_fractional_time() throws Exception {\n+        try (Connection conn = DriverManager.getConnection(JDBC_URL);\n+             PreparedStatement stmt = conn.prepareStatement(\"SELECT '01:02:03.123'::TIME\");\n+             ResultSet rs = stmt.executeQuery()) {\n+            assertTrue(rs.next());\n+            assertEquals(rs.getTime(1), Time.valueOf(LocalTime.of(1, 2, 3, 123)));\n+        }\n+    }\n+\n     public static void main(String[] args) throws Exception {\n         System.exit(runTests(args, TestDuckDBJDBC.class, TestExtensionTypes.class));\n     }\n",
  "problem_statement": "JDBC ResultSet.getTime() returns null if time value has fractional seconds\n### What happens?\r\n\r\nI cannot fetch `ResultSet.getTime()` from the JDBC driver.\r\n\r\n### To Reproduce\r\n\r\nTry this Java code:\r\n\r\n```java\r\nimport org.duckdb.DuckDBConnection;\r\nimport java.sql.DriverManager;\r\n\r\nDuckDBConnection connection = (DuckDBConnection) DriverManager.getConnection(\"jdbc:duckdb:\");\r\ntry (\r\n    Statement s = connection.createStatement();\r\n    ResultSet rs = s.executeQuery(\"select current_time\")\r\n) {\r\n    while (rs.next()) {\r\n        System.out.println(rs.getTime(1));\r\n        System.out.println(rs.getString(1));\r\n    }\r\n}\r\n```\r\n\r\nIt prints something along the lines of:\r\n\r\n```\r\nnull\r\n09:32:52.936\r\n```\r\n\r\nThe problem is that `java.sql.Time.valueOf(String)` doesn't accept fractional seconds. After the exception is thrown by JDBC, `null` is simply returned:\r\n\r\nhttps://github.com/duckdb/duckdb/blob/21389fa53053fb36c4d37d922e34041b46969576/tools/jdbc/src/main/java/org/duckdb/DuckDBVector.java#L307\r\n\r\n### OS:\r\n\r\nMicrosoft Windows [Version 10.0.22631.3007]\r\n\r\n### DuckDB Version:\r\n\r\n0.10.0\r\n\r\n### DuckDB Client:\r\n\r\nJDBC\r\n\r\n### Full Name:\r\n\r\nLukas Eder\r\n\r\n### Affiliation:\r\n\r\nData Geekery\r\n\r\n### Have you tried this on the latest [nightly build](https://duckdb.org/docs/installation/?version=main)?\r\n\r\nI have tested with a nightly build\r\n\r\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\r\n\r\n- [X] Yes, I have\n",
  "hints_text": "",
  "created_at": "2024-02-16T06:49:28Z"
}