You will be provided with a partial code base and an issue statement explaining a problem to resolve.
In your output, give nothing but the code (no markdown) so that your output can be copy pasted and run immediately with no changes.
In the patch file, please make sure to include the line numbers and a blank line at the end so it can be applied using git apply.

<issue>
Misleading error message appender - not all columns appended
### What happens?

When using the appender (https://duckdb.org/docs/api/c/appender) and when appending an _insufficient_ number of columns, an error is raised.

The text of the error message thrown
```
InvalidInputException("Call to EndRow before all rows have been appended to!");
```
appears to be misleading, though, as it talks about rows, when columns are missing. It may be preferable to have
```
InvalidInputException("Call to EndRow before all columns have been appended to!");
```
or even
```
InvalidInputException("Call to EndRow before all columns of the row have been appended!");
```

For reference, see https://github.com/duckdb/duckdb-java/blob/966fb56335a931b651901eb30e6fb38e32f21f73/src/duckdb/src/main/appender.cpp#L114

### To Reproduce

Run an appender which does not append enough columns.

### OS:

Arch Linux x86_64

### DuckDB Version:

1.1.0

### DuckDB Client:

C / Java

### Hardware:

_No response_

### Full Name:

Stefan Hoffmeister

### Affiliation:

none

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have tested with a stable release

### Did you include all relevant data sets for reproducing the issue?

Yes

### Did you include all code required to reproduce the issue?

- [X] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [X] Yes, I have

</issue>
<code>
[start of README.md]
1: <div align="center">
2:   <picture>
3:     <source media="(prefers-color-scheme: light)" srcset="logo/DuckDB_Logo-horizontal.svg">
4:     <source media="(prefers-color-scheme: dark)" srcset="logo/DuckDB_Logo-horizontal-dark-mode.svg">
5:     <img alt="DuckDB logo" src="logo/DuckDB_Logo-horizontal.svg" height="100">
6:   </picture>
7: </div>
8: <br>
9: 
10: <p align="center">
11:   <a href="https://github.com/duckdb/duckdb/actions"><img src="https://github.com/duckdb/duckdb/actions/workflows/Main.yml/badge.svg?branch=main" alt="Github Actions Badge"></a>
12:   <a href="https://discord.gg/tcvwpjfnZx"><img src="https://shields.io/discord/909674491309850675" alt="discord" /></a>
13:   <a href="https://github.com/duckdb/duckdb/releases/"><img src="https://img.shields.io/github/v/release/duckdb/duckdb?color=brightgreen&display_name=tag&logo=duckdb&logoColor=white" alt="Latest Release"></a>
14: </p>
15: 
16: ## DuckDB
17: 
18: DuckDB is a high-performance analytical database system. It is designed to be fast, reliable, portable, and easy to use. DuckDB provides a rich SQL dialect, with support far beyond basic SQL. DuckDB supports arbitrary and nested correlated subqueries, window functions, collations, complex types (arrays, structs, maps), and [several extensions designed to make SQL easier to use](https://duckdb.org/docs/guides/sql_features/friendly_sql).
19: 
20: DuckDB is available as a [standalone CLI application](https://duckdb.org/docs/api/cli/overview) and has clients for [Python](https://duckdb.org/docs/api/python/overview), [R](https://duckdb.org/docs/api/r), [Java](https://duckdb.org/docs/api/java), [Wasm](https://duckdb.org/docs/api/wasm/overview), etc., with deep integrations with packages such as [pandas](https://duckdb.org/docs/guides/python/sql_on_pandas) and [dplyr](https://duckdblabs.github.io/duckplyr/).
21: 
22: For more information on using DuckDB, please refer to the [DuckDB documentation](https://duckdb.org/docs/).
23: 
24: ## Installation
25: 
26: If you want to install DuckDB, please see [our installation page](https://duckdb.org/docs/installation) for instructions.
27: 
28: ## Data Import
29: 
30: For CSV files and Parquet files, data import is as simple as referencing the file in the FROM clause:
31: 
32: ```sql
33: SELECT * FROM 'myfile.csv';
34: SELECT * FROM 'myfile.parquet';
35: ```
36: 
37: Refer to our [Data Import](https://duckdb.org/docs/data/overview) section for more information.
38: 
39: ## SQL Reference
40: 
41: The documentation contains a [SQL introduction and reference](https://duckdb.org/docs/sql/introduction).
42: 
43: ## Development
44: 
45: For development, DuckDB requires [CMake](https://cmake.org), Python3 and a `C++11` compliant compiler. Run `make` in the root directory to compile the sources. For development, use `make debug` to build a non-optimized debug version. You should run `make unit` and `make allunit` to verify that your version works properly after making changes. To test performance, you can run `BUILD_BENCHMARK=1 BUILD_TPCH=1 make` and then perform several standard benchmarks from the root directory by executing `./build/release/benchmark/benchmark_runner`. The details of benchmarks are in our [Benchmark Guide](benchmark/README.md).
46: 
47: Please also refer to our [Build Guide](https://duckdb.org/dev/building) and [Contribution Guide](CONTRIBUTING.md).
48: 
49: ## Support
50: 
51: See the [Support Options](https://duckdblabs.com/support/) page.
[end of README.md]
[start of src/main/appender.cpp]
1: #include "duckdb/main/appender.hpp"
2: 
3: #include "duckdb/catalog/catalog_entry/duck_table_entry.hpp"
4: #include "duckdb/catalog/catalog_entry/table_catalog_entry.hpp"
5: #include "duckdb/common/exception.hpp"
6: #include "duckdb/common/operator/cast_operators.hpp"
7: #include "duckdb/common/operator/decimal_cast_operators.hpp"
8: #include "duckdb/common/operator/string_cast.hpp"
9: #include "duckdb/common/string_util.hpp"
10: #include "duckdb/common/types/column/column_data_collection.hpp"
11: #include "duckdb/main/client_context.hpp"
12: #include "duckdb/main/connection.hpp"
13: #include "duckdb/main/database.hpp"
14: #include "duckdb/storage/data_table.hpp"
15: #include "duckdb/planner/expression_binder/constant_binder.hpp"
16: #include "duckdb/planner/expression/bound_constant_expression.hpp"
17: #include "duckdb/execution/expression_executor.hpp"
18: 
19: namespace duckdb {
20: 
21: BaseAppender::BaseAppender(Allocator &allocator, AppenderType type_p)
22:     : allocator(allocator), column(0), appender_type(type_p) {
23: }
24: 
25: BaseAppender::BaseAppender(Allocator &allocator_p, vector<LogicalType> types_p, AppenderType type_p,
26:                            idx_t flush_count_p)
27:     : allocator(allocator_p), types(std::move(types_p)), collection(make_uniq<ColumnDataCollection>(allocator, types)),
28:       column(0), appender_type(type_p), flush_count(flush_count_p) {
29: 	InitializeChunk();
30: }
31: 
32: BaseAppender::~BaseAppender() {
33: }
34: 
35: void BaseAppender::Destructor() {
36: 	if (Exception::UncaughtException()) {
37: 		return;
38: 	}
39: 	// flush any remaining chunks, but only if we are not cleaning up the appender as part of an exception stack unwind
40: 	// wrapped in a try/catch because Close() can throw if the table was dropped in the meantime
41: 	try {
42: 		Close();
43: 	} catch (...) { // NOLINT
44: 	}
45: }
46: 
47: InternalAppender::InternalAppender(ClientContext &context_p, TableCatalogEntry &table_p, idx_t flush_count_p)
48:     : BaseAppender(Allocator::DefaultAllocator(), table_p.GetTypes(), AppenderType::PHYSICAL, flush_count_p),
49:       context(context_p), table(table_p) {
50: }
51: 
52: InternalAppender::~InternalAppender() {
53: 	Destructor();
54: }
55: 
56: Appender::Appender(Connection &con, const string &schema_name, const string &table_name)
57:     : BaseAppender(Allocator::DefaultAllocator(), AppenderType::LOGICAL), context(con.context) {
58: 	description = con.TableInfo(schema_name, table_name);
59: 	if (!description) {
60: 		// table could not be found
61: 		throw CatalogException(StringUtil::Format("Table \"%s.%s\" could not be found", schema_name, table_name));
62: 	}
63: 	vector<optional_ptr<const ParsedExpression>> defaults;
64: 	for (auto &column : description->columns) {
65: 		types.push_back(column.Type());
66: 		defaults.push_back(column.HasDefaultValue() ? &column.DefaultValue() : nullptr);
67: 	}
68: 	auto binder = Binder::CreateBinder(*context);
69: 
70: 	context->RunFunctionInTransaction([&]() {
71: 		for (idx_t i = 0; i < types.size(); i++) {
72: 			auto &type = types[i];
73: 			auto &expr = defaults[i];
74: 
75: 			if (!expr) {
76: 				// Insert NULL
77: 				default_values[i] = Value(type);
78: 				continue;
79: 			}
80: 			auto default_copy = expr->Copy();
81: 			D_ASSERT(!default_copy->HasParameter());
82: 			ConstantBinder default_binder(*binder, *context, "DEFAULT value");
83: 			default_binder.target_type = type;
84: 			auto bound_default = default_binder.Bind(default_copy);
85: 			Value result_value;
86: 			if (bound_default->IsFoldable() &&
87: 			    ExpressionExecutor::TryEvaluateScalar(*context, *bound_default, result_value)) {
88: 				// Insert the evaluated Value
89: 				default_values[i] = result_value;
90: 			} else {
91: 				// These are not supported currently, we don't add them to the 'default_values' map
92: 			}
93: 		}
94: 	});
95: 
96: 	InitializeChunk();
97: 	collection = make_uniq<ColumnDataCollection>(allocator, types);
98: }
99: 
100: Appender::Appender(Connection &con, const string &table_name) : Appender(con, DEFAULT_SCHEMA, table_name) {
101: }
102: 
103: Appender::~Appender() {
104: 	Destructor();
105: }
106: 
107: void BaseAppender::InitializeChunk() {
108: 	chunk.Initialize(allocator, types);
109: }
110: 
111: void BaseAppender::BeginRow() {
112: }
113: 
114: void BaseAppender::EndRow() {
115: 	// check that all rows have been appended to
116: 	if (column != chunk.ColumnCount()) {
117: 		throw InvalidInputException("Call to EndRow before all rows have been appended to!");
118: 	}
119: 	column = 0;
120: 	chunk.SetCardinality(chunk.size() + 1);
121: 	if (chunk.size() >= STANDARD_VECTOR_SIZE) {
122: 		FlushChunk();
123: 	}
124: }
125: 
126: template <class SRC, class DST>
127: void BaseAppender::AppendValueInternal(Vector &col, SRC input) {
128: 	FlatVector::GetData<DST>(col)[chunk.size()] = Cast::Operation<SRC, DST>(input);
129: }
130: 
131: template <class SRC, class DST>
132: void BaseAppender::AppendDecimalValueInternal(Vector &col, SRC input) {
133: 	switch (appender_type) {
134: 	case AppenderType::LOGICAL: {
135: 		auto &type = col.GetType();
136: 		D_ASSERT(type.id() == LogicalTypeId::DECIMAL);
137: 		auto width = DecimalType::GetWidth(type);
138: 		auto scale = DecimalType::GetScale(type);
139: 		CastParameters parameters;
140: 		TryCastToDecimal::Operation<SRC, DST>(input, FlatVector::GetData<DST>(col)[chunk.size()], parameters, width,
141: 		                                      scale);
142: 		return;
143: 	}
144: 	case AppenderType::PHYSICAL: {
145: 		AppendValueInternal<SRC, DST>(col, input);
146: 		return;
147: 	}
148: 	default:
149: 		throw InternalException("Type not implemented for AppenderType");
150: 	}
151: }
152: 
153: template <class T>
154: void BaseAppender::AppendValueInternal(T input) {
155: 	if (column >= types.size()) {
156: 		throw InvalidInputException("Too many appends for chunk!");
157: 	}
158: 	auto &col = chunk.data[column];
159: 	switch (col.GetType().id()) {
160: 	case LogicalTypeId::BOOLEAN:
161: 		AppendValueInternal<T, bool>(col, input);
162: 		break;
163: 	case LogicalTypeId::UTINYINT:
164: 		AppendValueInternal<T, uint8_t>(col, input);
165: 		break;
166: 	case LogicalTypeId::TINYINT:
167: 		AppendValueInternal<T, int8_t>(col, input);
168: 		break;
169: 	case LogicalTypeId::USMALLINT:
170: 		AppendValueInternal<T, uint16_t>(col, input);
171: 		break;
172: 	case LogicalTypeId::SMALLINT:
173: 		AppendValueInternal<T, int16_t>(col, input);
174: 		break;
175: 	case LogicalTypeId::UINTEGER:
176: 		AppendValueInternal<T, uint32_t>(col, input);
177: 		break;
178: 	case LogicalTypeId::INTEGER:
179: 		AppendValueInternal<T, int32_t>(col, input);
180: 		break;
181: 	case LogicalTypeId::UBIGINT:
182: 		AppendValueInternal<T, uint64_t>(col, input);
183: 		break;
184: 	case LogicalTypeId::BIGINT:
185: 		AppendValueInternal<T, int64_t>(col, input);
186: 		break;
187: 	case LogicalTypeId::HUGEINT:
188: 		AppendValueInternal<T, hugeint_t>(col, input);
189: 		break;
190: 	case LogicalTypeId::UHUGEINT:
191: 		AppendValueInternal<T, uhugeint_t>(col, input);
192: 		break;
193: 	case LogicalTypeId::FLOAT:
194: 		AppendValueInternal<T, float>(col, input);
195: 		break;
196: 	case LogicalTypeId::DOUBLE:
197: 		AppendValueInternal<T, double>(col, input);
198: 		break;
199: 	case LogicalTypeId::DECIMAL:
200: 		switch (col.GetType().InternalType()) {
201: 		case PhysicalType::INT16:
202: 			AppendDecimalValueInternal<T, int16_t>(col, input);
203: 			break;
204: 		case PhysicalType::INT32:
205: 			AppendDecimalValueInternal<T, int32_t>(col, input);
206: 			break;
207: 		case PhysicalType::INT64:
208: 			AppendDecimalValueInternal<T, int64_t>(col, input);
209: 			break;
210: 		case PhysicalType::INT128:
211: 			AppendDecimalValueInternal<T, hugeint_t>(col, input);
212: 			break;
213: 		default:
214: 			throw InternalException("Internal type not recognized for Decimal");
215: 		}
216: 		break;
217: 	case LogicalTypeId::DATE:
218: 		AppendValueInternal<T, date_t>(col, input);
219: 		break;
220: 	case LogicalTypeId::TIMESTAMP:
221: 	case LogicalTypeId::TIMESTAMP_TZ:
222: 		AppendValueInternal<T, timestamp_t>(col, input);
223: 		break;
224: 	case LogicalTypeId::TIME:
225: 		AppendValueInternal<T, dtime_t>(col, input);
226: 		break;
227: 	case LogicalTypeId::TIME_TZ:
228: 		AppendValueInternal<T, dtime_tz_t>(col, input);
229: 		break;
230: 	case LogicalTypeId::INTERVAL:
231: 		AppendValueInternal<T, interval_t>(col, input);
232: 		break;
233: 	case LogicalTypeId::VARCHAR:
234: 		FlatVector::GetData<string_t>(col)[chunk.size()] = StringCast::Operation<T>(input, col);
235: 		break;
236: 	default:
237: 		AppendValue(Value::CreateValue<T>(input));
238: 		return;
239: 	}
240: 	column++;
241: }
242: 
243: template <>
244: void BaseAppender::Append(bool value) {
245: 	AppendValueInternal<bool>(value);
246: }
247: 
248: template <>
249: void BaseAppender::Append(int8_t value) {
250: 	AppendValueInternal<int8_t>(value);
251: }
252: 
253: template <>
254: void BaseAppender::Append(int16_t value) {
255: 	AppendValueInternal<int16_t>(value);
256: }
257: 
258: template <>
259: void BaseAppender::Append(int32_t value) {
260: 	AppendValueInternal<int32_t>(value);
261: }
262: 
263: template <>
264: void BaseAppender::Append(int64_t value) {
265: 	AppendValueInternal<int64_t>(value);
266: }
267: 
268: template <>
269: void BaseAppender::Append(hugeint_t value) {
270: 	AppendValueInternal<hugeint_t>(value);
271: }
272: 
273: template <>
274: void BaseAppender::Append(uhugeint_t value) {
275: 	AppendValueInternal<uhugeint_t>(value);
276: }
277: 
278: template <>
279: void BaseAppender::Append(uint8_t value) {
280: 	AppendValueInternal<uint8_t>(value);
281: }
282: 
283: template <>
284: void BaseAppender::Append(uint16_t value) {
285: 	AppendValueInternal<uint16_t>(value);
286: }
287: 
288: template <>
289: void BaseAppender::Append(uint32_t value) {
290: 	AppendValueInternal<uint32_t>(value);
291: }
292: 
293: template <>
294: void BaseAppender::Append(uint64_t value) {
295: 	AppendValueInternal<uint64_t>(value);
296: }
297: 
298: template <>
299: void BaseAppender::Append(const char *value) {
300: 	AppendValueInternal<string_t>(string_t(value));
301: }
302: 
303: void BaseAppender::Append(const char *value, uint32_t length) {
304: 	AppendValueInternal<string_t>(string_t(value, length));
305: }
306: 
307: template <>
308: void BaseAppender::Append(string_t value) {
309: 	AppendValueInternal<string_t>(value);
310: }
311: 
312: template <>
313: void BaseAppender::Append(float value) {
314: 	AppendValueInternal<float>(value);
315: }
316: 
317: template <>
318: void BaseAppender::Append(double value) {
319: 	AppendValueInternal<double>(value);
320: }
321: 
322: template <>
323: void BaseAppender::Append(date_t value) {
324: 	AppendValueInternal<date_t>(value);
325: }
326: 
327: template <>
328: void BaseAppender::Append(dtime_t value) {
329: 	AppendValueInternal<dtime_t>(value);
330: }
331: 
332: template <>
333: void BaseAppender::Append(timestamp_t value) {
334: 	AppendValueInternal<timestamp_t>(value);
335: }
336: 
337: template <>
338: void BaseAppender::Append(interval_t value) {
339: 	AppendValueInternal<interval_t>(value);
340: }
341: 
342: template <>
343: void BaseAppender::Append(Value value) { // NOLINT: template shtuff
344: 	if (column >= chunk.ColumnCount()) {
345: 		throw InvalidInputException("Too many appends for chunk!");
346: 	}
347: 	AppendValue(value);
348: }
349: 
350: template <>
351: void BaseAppender::Append(std::nullptr_t value) {
352: 	if (column >= chunk.ColumnCount()) {
353: 		throw InvalidInputException("Too many appends for chunk!");
354: 	}
355: 	auto &col = chunk.data[column++];
356: 	FlatVector::SetNull(col, chunk.size(), true);
357: }
358: 
359: void BaseAppender::AppendValue(const Value &value) {
360: 	chunk.SetValue(column, chunk.size(), value);
361: 	column++;
362: }
363: 
364: void BaseAppender::AppendDataChunk(DataChunk &chunk) {
365: 	auto chunk_types = chunk.GetTypes();
366: 	if (chunk_types != types) {
367: 		for (idx_t i = 0; i < chunk.ColumnCount(); i++) {
368: 			if (chunk.data[i].GetType() != types[i]) {
369: 				throw InvalidInputException("Type mismatch in Append DataChunk and the types required for appender, "
370: 				                            "expected %s but got %s for column %d",
371: 				                            types[i].ToString(), chunk.data[i].GetType().ToString(), i + 1);
372: 			}
373: 		}
374: 	}
375: 	collection->Append(chunk);
376: 	if (collection->Count() >= flush_count) {
377: 		Flush();
378: 	}
379: }
380: 
381: void BaseAppender::FlushChunk() {
382: 	if (chunk.size() == 0) {
383: 		return;
384: 	}
385: 	collection->Append(chunk);
386: 	chunk.Reset();
387: 	if (collection->Count() >= flush_count) {
388: 		Flush();
389: 	}
390: }
391: 
392: void BaseAppender::Flush() {
393: 	// check that all vectors have the same length before appending
394: 	if (column != 0) {
395: 		throw InvalidInputException("Failed to Flush appender: incomplete append to row!");
396: 	}
397: 
398: 	FlushChunk();
399: 	if (collection->Count() == 0) {
400: 		return;
401: 	}
402: 	FlushInternal(*collection);
403: 
404: 	collection->Reset();
405: 	column = 0;
406: }
407: 
408: void Appender::FlushInternal(ColumnDataCollection &collection) {
409: 	context->Append(*description, collection);
410: }
411: 
412: void Appender::AppendDefault() {
413: 	auto it = default_values.find(column);
414: 	auto &column_def = description->columns[column];
415: 	if (it == default_values.end()) {
416: 		throw NotImplementedException(
417: 		    "AppendDefault is currently not supported for column \"%s\" because default expression is not foldable.",
418: 		    column_def.Name());
419: 	}
420: 	auto &default_value = it->second;
421: 	Append(default_value);
422: }
423: 
424: void InternalAppender::FlushInternal(ColumnDataCollection &collection) {
425: 	auto binder = Binder::CreateBinder(context);
426: 	auto bound_constraints = binder->BindConstraints(table);
427: 	table.GetStorage().LocalAppend(table, context, collection, bound_constraints);
428: }
429: 
430: void BaseAppender::Close() {
431: 	if (column == 0 || column == types.size()) {
432: 		Flush();
433: 	}
434: }
435: 
436: } // namespace duckdb
[end of src/main/appender.cpp]
</code>
Here is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.
<patch>
--- a/file.cpp
+++ b/file.cpp
@@ -3,35 +3,44 @@
 #include <cstdlib>
 
 int euclidean(int a, int b) {
-    while (b) {
-        int temp = b;
-        b = a % b;
-        a = temp;
+    if (b == 0) {
+        return a;
     }
-    return a;
+    return euclidean(b, a % b);
 }
 
 std::vector<std::pair<int, int>> bresenham(int x0, int y0, int x1, int y1) {
     std::vector<std::pair<int, int>> points;
     int dx = abs(x1 - x0);
     int dy = abs(y1 - y0);
+    int x = x0, y = y0;
     int sx = (x0 < x1) ? 1 : -1;
     int sy = (y0 < y1) ? 1 : -1;
-    int err = dx - dy;
 
-    while (true) {
-        points.emplace_back(x0, y0);
-        if (x0 == x1 && y0 == y1) break;
-        int e2 = 2 * err;
-        if (e2 > -dy) {
+    if (dx > dy) {
+        int err = dx / 2;
+        while (x != x1) {
+            points.emplace_back(x, y);
             err -= dy;
-            x0 += sx;
+            if (err < 0) {
+                y += sy;
+                err += dx;
+            }
+            x += sx;
         }
-        if (e2 < dx) {
-            err += dx;
-            y0 += sy;
+    } else {
+        int err = dy / 2;
+        while (y != y1) {
+            points.emplace_back(x, y);
+            err -= dx;
+            if (err < 0) {
+                x += sx;
+                err += dy;
+            }
+            y += sy;
         }
     }
 
+    points.emplace_back(x, y);
     return points;
 }

</patch>

I need you to solve the provided issue by generating a single patch file that I can apply directly to this repository using git apply.
Please respond with a single patch file in the format shown above.
Make sure to only include the patch file contents so that the contents of your output can be copied into a patch file and applied directly

Respond below: