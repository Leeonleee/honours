{
  "repo": "duckdb/duckdb",
  "pull_number": 13957,
  "instance_id": "duckdb__duckdb-13957",
  "issue_numbers": [
    "13941"
  ],
  "base_commit": "75d4bd0cc759dcb609ab349b87bff07dddf2ebb7",
  "patch": "diff --git a/src/main/appender.cpp b/src/main/appender.cpp\nindex 564fff2e923d..ae3608524149 100644\n--- a/src/main/appender.cpp\n+++ b/src/main/appender.cpp\n@@ -114,7 +114,7 @@ void BaseAppender::BeginRow() {\n void BaseAppender::EndRow() {\n \t// check that all rows have been appended to\n \tif (column != chunk.ColumnCount()) {\n-\t\tthrow InvalidInputException(\"Call to EndRow before all rows have been appended to!\");\n+\t\tthrow InvalidInputException(\"Call to EndRow before all columns have been appended to!\");\n \t}\n \tcolumn = 0;\n \tchunk.SetCardinality(chunk.size() + 1);\n",
  "test_patch": "diff --git a/test/api/capi/test_capi_appender.cpp b/test/api/capi/test_capi_appender.cpp\nindex f48b68baad86..2c232b5e4807 100644\n--- a/test/api/capi/test_capi_appender.cpp\n+++ b/test/api/capi/test_capi_appender.cpp\n@@ -245,7 +245,7 @@ TEST_CASE(\"Test appender statements in C API\", \"[capi]\") {\n \t// Missing column.\n \tREQUIRE(duckdb_appender_end_row(appender) == DuckDBError);\n \tREQUIRE(duckdb_appender_error(appender) != nullptr);\n-\tTestAppenderError(appender, \"Call to EndRow before all rows have been appended to\");\n+\tTestAppenderError(appender, \"Call to EndRow before all columns have been appended to\");\n \n \t// Append the missing column.\n \tREQUIRE(duckdb_append_varchar(appender, \"Hello, World\") == DuckDBSuccess);\n",
  "problem_statement": "Misleading error message appender - not all columns appended\n### What happens?\n\nWhen using the appender (https://duckdb.org/docs/api/c/appender) and when appending an _insufficient_ number of columns, an error is raised.\r\n\r\nThe text of the error message thrown\r\n```\r\nInvalidInputException(\"Call to EndRow before all rows have been appended to!\");\r\n```\r\nappears to be misleading, though, as it talks about rows, when columns are missing. It may be preferable to have\r\n```\r\nInvalidInputException(\"Call to EndRow before all columns have been appended to!\");\r\n```\r\nor even\r\n```\r\nInvalidInputException(\"Call to EndRow before all columns of the row have been appended!\");\r\n```\r\n\r\nFor reference, see https://github.com/duckdb/duckdb-java/blob/966fb56335a931b651901eb30e6fb38e32f21f73/src/duckdb/src/main/appender.cpp#L114\n\n### To Reproduce\n\nRun an appender which does not append enough columns.\n\n### OS:\n\nArch Linux x86_64\n\n### DuckDB Version:\n\n1.1.0\n\n### DuckDB Client:\n\nC / Java\n\n### Hardware:\n\n_No response_\n\n### Full Name:\n\nStefan Hoffmeister\n\n### Affiliation:\n\nnone\n\n### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.\n\nI have tested with a stable release\n\n### Did you include all relevant data sets for reproducing the issue?\n\nYes\n\n### Did you include all code required to reproduce the issue?\n\n- [X] Yes, I have\n\n### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?\n\n- [X] Yes, I have\n",
  "hints_text": "",
  "created_at": "2024-09-16T11:13:26Z"
}