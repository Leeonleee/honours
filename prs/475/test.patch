diff --git a/test/api/test_api.cpp b/test/api/test_api.cpp
index e11567facc6c..6646fcd6a9a4 100644
--- a/test/api/test_api.cpp
+++ b/test/api/test_api.cpp
@@ -95,6 +95,19 @@ TEST_CASE("Test closing result after database is gone", "[api]") {
 	streaming_result.reset();
 }
 
+TEST_CASE("Test closing database with open prepared statements", "[api]") {
+	auto db = make_unique<DuckDB>(nullptr);
+	auto conn = make_unique<Connection>(*db);
+
+	auto p1 = conn->Prepare("CREATE TABLE a (i INTEGER)");
+	p1->Execute();
+	auto p2 = conn->Prepare("INSERT INTO a VALUES (42)");
+	p2->Execute();
+
+	db.reset();
+	conn.reset();
+}
+
 static void parallel_query(Connection *conn, bool *correct, size_t threadnr) {
 	correct[threadnr] = true;
 	for (size_t i = 0; i < 100; i++) {
diff --git a/test/sql/aggregate/test_aggregate.cpp b/test/sql/aggregate/test_aggregate.cpp
index c3542b35bac9..04d672fc8b01 100644
--- a/test/sql/aggregate/test_aggregate.cpp
+++ b/test/sql/aggregate/test_aggregate.cpp
@@ -392,3 +392,23 @@ TEST_CASE("Test GROUP BY with many groups", "[aggregate][.]") {
 	REQUIRE(CHECK_COLUMN(result, 0, {49995000}));
 	REQUIRE(CHECK_COLUMN(result, 1, {30000}));
 }
+
+TEST_CASE("Test FIRST with non-inlined strings", "[aggregate]") {
+	unique_ptr<QueryResult> result;
+	DuckDB db(nullptr);
+	Connection con(db);
+
+	REQUIRE_NO_FAIL(con.Query("CREATE TABLE tbl(a INTEGER, b VARCHAR)"));
+	REQUIRE_NO_FAIL(con.Query("INSERT INTO tbl VALUES (1, NULL), (2, 'thisisalongstring'), (3, 'thisisalsoalongstring')"));
+
+	// non-grouped aggregate
+	result = con.Query("SELECT FIRST(b) FROM tbl WHERE a=2");
+	REQUIRE(CHECK_COLUMN(result, 0, {"thisisalongstring"}));
+	result = con.Query("SELECT FIRST(b) FROM tbl WHERE a=1");
+	REQUIRE(CHECK_COLUMN(result, 0, {Value()}));
+
+	// grouped aggregate
+	result = con.Query("SELECT a, FIRST(b) FROM tbl GROUP BY a ORDER BY a");
+	REQUIRE(CHECK_COLUMN(result, 0, {1, 2, 3}));
+	REQUIRE(CHECK_COLUMN(result, 1, {Value(), "thisisalongstring", "thisisalsoalongstring"}));
+}
