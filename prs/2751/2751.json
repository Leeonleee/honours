{
  "repo": "duckdb/duckdb",
  "pull_number": 2751,
  "instance_id": "duckdb__duckdb-2751",
  "issue_numbers": [
    "2750",
    "2750"
  ],
  "base_commit": "9585116720be286710169831f7713dd778f43658",
  "patch": "diff --git a/extension/parquet/parquet-extension.cpp b/extension/parquet/parquet-extension.cpp\nindex 1e33a84beeaa..3b5c2971d6cb 100644\n--- a/extension/parquet/parquet-extension.cpp\n+++ b/extension/parquet/parquet-extension.cpp\n@@ -194,6 +194,10 @@ class ParquetScanFunction {\n \t                                                vector<LogicalType> &input_table_types,\n \t                                                vector<string> &input_table_names,\n \t                                                vector<LogicalType> &return_types, vector<string> &names) {\n+\t\tauto &config = DBConfig::GetConfig(context);\n+\t\tif (!config.enable_external_access) {\n+\t\t\tthrow PermissionException(\"Scanning Parquet files is disabled through configuration\");\n+\t\t}\n \t\tauto file_name = inputs[0].GetValue<string>();\n \t\tParquetOptions parquet_options(context);\n \t\tfor (auto &kv : named_parameters) {\n@@ -211,6 +215,10 @@ class ParquetScanFunction {\n \t                                                    vector<LogicalType> &input_table_types,\n \t                                                    vector<string> &input_table_names,\n \t                                                    vector<LogicalType> &return_types, vector<string> &names) {\n+\t\tauto &config = DBConfig::GetConfig(context);\n+\t\tif (!config.enable_external_access) {\n+\t\t\tthrow PermissionException(\"Scanning Parquet files is disabled through configuration\");\n+\t\t}\n \t\tFileSystem &fs = FileSystem::GetFileSystem(context);\n \t\tvector<string> files;\n \t\tfor (auto &val : inputs[0].list_value) {\ndiff --git a/extension/parquet/parquet_metadata.cpp b/extension/parquet/parquet_metadata.cpp\nindex e021286f5e95..3c22f44c2b32 100644\n--- a/extension/parquet/parquet_metadata.cpp\n+++ b/extension/parquet/parquet_metadata.cpp\n@@ -3,6 +3,7 @@\n \n #ifndef DUCKDB_AMALGAMATION\n #include \"duckdb/common/types/blob.hpp\"\n+#include \"duckdb/main/config.hpp\"\n #endif\n \n namespace duckdb {\n@@ -408,6 +409,10 @@ unique_ptr<FunctionData> ParquetMetaDataBind(ClientContext &context, vector<Valu\n                                              unordered_map<string, Value> &named_parameters,\n                                              vector<LogicalType> &input_table_types, vector<string> &input_table_names,\n                                              vector<LogicalType> &return_types, vector<string> &names) {\n+\tauto &config = DBConfig::GetConfig(context);\n+\tif (!config.enable_external_access) {\n+\t\tthrow PermissionException(\"Scanning Parquet files is disabled through configuration\");\n+\t}\n \tif (SCHEMA) {\n \t\tParquetMetaDataOperatorData::BindSchema(return_types, names);\n \t} else {\ndiff --git a/src/common/exception.cpp b/src/common/exception.cpp\nindex fb962b80a515..801c5b127d8b 100644\n--- a/src/common/exception.cpp\n+++ b/src/common/exception.cpp\n@@ -98,6 +98,8 @@ string Exception::ExceptionTypeToString(ExceptionType type) {\n \t\treturn \"Invalid Input\";\n \tcase ExceptionType::OUT_OF_MEMORY:\n \t\treturn \"Out of Memory\";\n+\tcase ExceptionType::PERMISSION:\n+\t\treturn \"Permission\";\n \tdefault:\n \t\treturn \"Unknown\";\n \t}\n@@ -183,6 +185,9 @@ CatalogException::CatalogException(const string &msg) : StandardException(Except\n ParserException::ParserException(const string &msg) : StandardException(ExceptionType::PARSER, msg) {\n }\n \n+PermissionException::PermissionException(const string &msg) : StandardException(ExceptionType::PERMISSION, msg) {\n+}\n+\n SyntaxException::SyntaxException(const string &msg) : Exception(ExceptionType::SYNTAX, msg) {\n }\n \ndiff --git a/src/execution/physical_plan/plan_export.cpp b/src/execution/physical_plan/plan_export.cpp\nindex a4141c557f9e..64d3f21aaead 100644\n--- a/src/execution/physical_plan/plan_export.cpp\n+++ b/src/execution/physical_plan/plan_export.cpp\n@@ -1,10 +1,15 @@\n #include \"duckdb/execution/physical_plan_generator.hpp\"\n #include \"duckdb/execution/operator/persistent/physical_export.hpp\"\n #include \"duckdb/planner/operator/logical_export.hpp\"\n+#include \"duckdb/main/config.hpp\"\n \n namespace duckdb {\n \n unique_ptr<PhysicalOperator> PhysicalPlanGenerator::CreatePlan(LogicalExport &op) {\n+\tauto &config = DBConfig::GetConfig(context);\n+\tif (!config.enable_external_access) {\n+\t\tthrow PermissionException(\"Export is disabled through configuration\");\n+\t}\n \tauto export_node = make_unique<PhysicalExport>(op.types, op.function, move(op.copy_info), op.estimated_cardinality,\n \t                                               op.exported_tables);\n \t// plan the underlying copy statements, if any\ndiff --git a/src/function/pragma/pragma_queries.cpp b/src/function/pragma/pragma_queries.cpp\nindex 414014d6b07a..cb1d80ae0b82 100644\n--- a/src/function/pragma/pragma_queries.cpp\n+++ b/src/function/pragma/pragma_queries.cpp\n@@ -1,6 +1,7 @@\n #include \"duckdb/function/pragma/pragma_functions.hpp\"\n #include \"duckdb/common/string_util.hpp\"\n #include \"duckdb/common/file_system.hpp\"\n+#include \"duckdb/main/config.hpp\"\n \n namespace duckdb {\n \n@@ -42,6 +43,10 @@ string PragmaVersion(ClientContext &context, const FunctionParameters &parameter\n }\n \n string PragmaImportDatabase(ClientContext &context, const FunctionParameters &parameters) {\n+\tauto &config = DBConfig::GetConfig(context);\n+\tif (!config.enable_external_access) {\n+\t\tthrow PermissionException(\"Import is disabled through configuration\");\n+\t}\n \tauto &fs = FileSystem::GetFileSystem(context);\n \tauto *opener = FileSystem::GetFileOpener(context);\n \ndiff --git a/src/function/table/glob.cpp b/src/function/table/glob.cpp\nindex 855dfbde00ae..61116bc88206 100644\n--- a/src/function/table/glob.cpp\n+++ b/src/function/table/glob.cpp\n@@ -2,6 +2,7 @@\n #include \"duckdb/function/table_function.hpp\"\n #include \"duckdb/function/function_set.hpp\"\n #include \"duckdb/common/file_system.hpp\"\n+#include \"duckdb/main/config.hpp\"\n \n namespace duckdb {\n \n@@ -14,6 +15,10 @@ static unique_ptr<FunctionData> GlobFunctionBind(ClientContext &context, vector<\n                                                  vector<LogicalType> &input_table_types,\n                                                  vector<string> &input_table_names, vector<LogicalType> &return_types,\n                                                  vector<string> &names) {\n+\tauto &config = DBConfig::GetConfig(context);\n+\tif (!config.enable_external_access) {\n+\t\tthrow PermissionException(\"Globbing is disabled through configuration\");\n+\t}\n \tauto result = make_unique<GlobFunctionBindData>();\n \tauto &fs = FileSystem::GetFileSystem(context);\n \tresult->files = fs.Glob(inputs[0].str_value);\ndiff --git a/src/function/table/read_csv.cpp b/src/function/table/read_csv.cpp\nindex 8bcbd64c54f2..26fefbf597c0 100644\n--- a/src/function/table/read_csv.cpp\n+++ b/src/function/table/read_csv.cpp\n@@ -18,6 +18,10 @@ static unique_ptr<FunctionData> ReadCSVBind(ClientContext &context, vector<Value\n                                             unordered_map<string, Value> &named_parameters,\n                                             vector<LogicalType> &input_table_types, vector<string> &input_table_names,\n                                             vector<LogicalType> &return_types, vector<string> &names) {\n+\tauto &config = DBConfig::GetConfig(context);\n+\tif (!config.enable_external_access) {\n+\t\tthrow PermissionException(\"Scanning CSV files is disabled through configuration\");\n+\t}\n \tauto result = make_unique<ReadCSVData>();\n \tauto &options = result->options;\n \ndiff --git a/src/include/duckdb/common/exception.hpp b/src/include/duckdb/common/exception.hpp\nindex 28d3cead0656..3e23a5b30bc4 100644\n--- a/src/include/duckdb/common/exception.hpp\n+++ b/src/include/duckdb/common/exception.hpp\n@@ -73,7 +73,8 @@ enum class ExceptionType {\n \tINTERNAL =\n \t    31, // Internal exception: exception that indicates something went wrong internally (i.e. bug in the code base)\n \tINVALID_INPUT = 32, // Input or arguments error\n-\tOUT_OF_MEMORY = 33  // out of memory\n+\tOUT_OF_MEMORY = 33, // out of memory\n+\tPERMISSION = 34     // insufficient permissions\n };\n \n class Exception : public std::exception {\n@@ -137,6 +138,16 @@ class ParserException : public StandardException {\n \t}\n };\n \n+class PermissionException : public StandardException {\n+public:\n+\tDUCKDB_API explicit PermissionException(const string &msg);\n+\n+\ttemplate <typename... Args>\n+\texplicit PermissionException(const string &msg, Args... params)\n+\t    : PermissionException(ConstructMessage(msg, params...)) {\n+\t}\n+};\n+\n class BinderException : public StandardException {\n public:\n \tDUCKDB_API explicit BinderException(const string &msg);\ndiff --git a/src/main/extension/extension_install.cpp b/src/main/extension/extension_install.cpp\nindex 175f70bbbfb8..9601c2ddb796 100644\n--- a/src/main/extension/extension_install.cpp\n+++ b/src/main/extension/extension_install.cpp\n@@ -17,7 +17,7 @@ const vector<string> ExtensionHelper::PATH_COMPONENTS = {\".duckdb\", \"extensions\"\n void ExtensionHelper::InstallExtension(DatabaseInstance &db, const string &extension, bool force_install) {\n \tauto &config = DBConfig::GetConfig(db);\n \tif (!config.enable_external_access) {\n-\t\tthrow Exception(\"Installing extensions is disabled\");\n+\t\tthrow PermissionException(\"Installing extensions is disabled through configuration\");\n \t}\n \tauto &fs = FileSystem::GetFileSystem(db);\n \ndiff --git a/src/main/extension/extension_load.cpp b/src/main/extension/extension_load.cpp\nindex 9c11042cf738..be79b6838c2e 100644\n--- a/src/main/extension/extension_load.cpp\n+++ b/src/main/extension/extension_load.cpp\n@@ -21,7 +21,7 @@ static T LoadFunctionFromDLL(void *dll, const string &function_name, const strin\n void ExtensionHelper::LoadExternalExtension(DatabaseInstance &db, const string &extension) {\n \tauto &config = DBConfig::GetConfig(db);\n \tif (!config.enable_external_access) {\n-\t\tthrow Exception(\"Loading external extensions is disabled\");\n+\t\tthrow PermissionException(\"Loading external extensions is disabled through configuration\");\n \t}\n \tauto &fs = FileSystem::GetFileSystem(db);\n \tauto filename = fs.ConvertSeparators(extension);\ndiff --git a/src/main/settings/settings.cpp b/src/main/settings/settings.cpp\nindex 27c99b778216..fe9e60c5b10b 100644\n--- a/src/main/settings/settings.cpp\n+++ b/src/main/settings/settings.cpp\n@@ -232,10 +232,11 @@ Value DisabledOptimizersSetting::GetSetting(ClientContext &context) {\n // Enable External Access\n //===--------------------------------------------------------------------===//\n void EnableExternalAccessSetting::SetGlobal(DatabaseInstance *db, DBConfig &config, const Value &input) {\n-\tif (db) {\n+\tauto new_value = input.GetValue<bool>();\n+\tif (db && new_value) {\n \t\tthrow InvalidInputException(\"Cannot change enable_external_access setting while database is running\");\n \t}\n-\tconfig.enable_external_access = input.GetValue<bool>();\n+\tconfig.enable_external_access = new_value;\n }\n \n Value EnableExternalAccessSetting::GetSetting(ClientContext &context) {\ndiff --git a/src/planner/binder/statement/bind_copy.cpp b/src/planner/binder/statement/bind_copy.cpp\nindex 573eb2ea0d79..1083cc8cd279 100644\n--- a/src/planner/binder/statement/bind_copy.cpp\n+++ b/src/planner/binder/statement/bind_copy.cpp\n@@ -22,7 +22,7 @@ BoundStatement Binder::BindCopyTo(CopyStatement &stmt) {\n \t// COPY TO a file\n \tauto &config = DBConfig::GetConfig(context);\n \tif (!config.enable_external_access) {\n-\t\tthrow Exception(\"COPY TO is disabled by configuration\");\n+\t\tthrow PermissionException(\"COPY TO is disabled by configuration\");\n \t}\n \tBoundStatement result;\n \tresult.types = {LogicalType::BIGINT};\n@@ -52,7 +52,7 @@ BoundStatement Binder::BindCopyTo(CopyStatement &stmt) {\n BoundStatement Binder::BindCopyFrom(CopyStatement &stmt) {\n \tauto &config = DBConfig::GetConfig(context);\n \tif (!config.enable_external_access) {\n-\t\tthrow Exception(\"COPY FROM is disabled by configuration\");\n+\t\tthrow PermissionException(\"COPY FROM is disabled by configuration\");\n \t}\n \tBoundStatement result;\n \tresult.types = {LogicalType::BIGINT};\ndiff --git a/src/planner/binder/statement/bind_export.cpp b/src/planner/binder/statement/bind_export.cpp\nindex 257999e49a59..957e51843f8a 100644\n--- a/src/planner/binder/statement/bind_export.cpp\n+++ b/src/planner/binder/statement/bind_export.cpp\n@@ -43,7 +43,7 @@ BoundStatement Binder::Bind(ExportStatement &stmt) {\n \t// COPY TO a file\n \tauto &config = DBConfig::GetConfig(context);\n \tif (!config.enable_external_access) {\n-\t\tthrow Exception(\"COPY TO is disabled by configuration\");\n+\t\tthrow PermissionException(\"COPY TO is disabled through configuration\");\n \t}\n \tBoundStatement result;\n \tresult.types = {LogicalType::BOOLEAN};\n",
  "test_patch": "diff --git a/test/sql/copy/csv/csv_external_access.test b/test/sql/copy/csv/csv_external_access.test\nnew file mode 100644\nindex 000000000000..743f41f7fbec\n--- /dev/null\n+++ b/test/sql/copy/csv/csv_external_access.test\n@@ -0,0 +1,28 @@\n+# name: test/sql/copy/csv/csv_external_access.test\n+# description: Test that enable_external_access blocks CSV readers\n+# group: [csv]\n+\n+statement ok\n+CREATE TABLE date_test(d date);\n+\n+statement ok\n+COPY date_test FROM 'test/sql/copy/csv/data/test/date.csv';\n+\n+statement ok\n+SET enable_external_access=false;\n+\n+statement error\n+SELECT * FROM read_csv('test/sql/copy/csv/data/test/date.csv', columns = {'d': 'DATE'});\n+\n+statement error\n+SELECT * FROM read_csv_auto('test/sql/copy/csv/data/test/date.csv');\n+\n+statement error\n+COPY date_test FROM 'test/sql/copy/csv/data/test/date.csv';\n+\n+statement error\n+COPY date_test TO '__TEST_DIR__/date.csv'\n+\n+# we also can't just enable external access again\n+statement error\n+SET enable_external_access=true;\ndiff --git a/test/sql/copy/parquet/parquet_external_access.test b/test/sql/copy/parquet/parquet_external_access.test\nnew file mode 100644\nindex 000000000000..82731a917cd1\n--- /dev/null\n+++ b/test/sql/copy/parquet/parquet_external_access.test\n@@ -0,0 +1,42 @@\n+# name: test/sql/copy/parquet/parquet_external_access.test\n+# description: Test that enable_external_access blocks Parquet reads\n+# group: [parquet]\n+\n+require parquet\n+\n+# we cannot read parquet files\n+statement ok\n+CREATE TABLE lineitem AS SELECT * FROM 'data/parquet-testing/arrow/lineitem-arrow.parquet'\n+\n+statement ok\n+SET enable_external_access=false;\n+\n+# we cannot read parquet files\n+statement error\n+SELECT * FROM 'data/parquet-testing/arrow/lineitem-arrow.parquet'\n+\n+# or their metadata\n+statement error\n+SELECT * FROM parquet_metadata('data/parquet-testing/arrow/lineitem-arrow.parquet')\n+\n+statement error\n+SELECT * FROM parquet_schema('data/parquet-testing/arrow/lineitem-arrow.parquet')\n+\n+# also not in a list\n+statement error\n+SELECT * FROM parquet_scan(['data/parquet-testing/arrow/lineitem-arrow.parquet', 'data/parquet-testing/arrow/lineitem-arrow.parquet'])\n+\n+# neither can we glob\n+statement error\n+SELECT * FROM glob('data/parquet-testing/arrow/lineitem-arrow.parquet')\n+\n+# or copy to/from...\n+statement error\n+COPY lineitem FROM 'data/parquet-testing/arrow/lineitem-arrow.parquet'\n+\n+statement error\n+COPY lineitem TO '__TEST_DIR__/lineitem.parquet'\n+\n+# we also can't just enable external access again\n+statement error\n+SET enable_external_access=true;\ndiff --git a/test/sql/export/export_external_access.test b/test/sql/export/export_external_access.test\nnew file mode 100644\nindex 000000000000..585c11fa3797\n--- /dev/null\n+++ b/test/sql/export/export_external_access.test\n@@ -0,0 +1,24 @@\n+# name: test/sql/export/export_external_access.test\n+# description: Test export database\n+# group: [export]\n+\n+statement ok\n+BEGIN TRANSACTION\n+\n+statement ok\n+CREATE TABLE integers(i INTEGER, j INTEGER, CHECK(i+j<10))\n+\n+statement ok\n+EXPORT DATABASE '__TEST_DIR__/export_permissions_test' (FORMAT CSV)\n+\n+statement ok\n+ROLLBACK\n+\n+statement ok\n+SET enable_external_access=false\n+\n+statement error\n+IMPORT DATABASE '__TEST_DIR__/export_permissions_test'\n+\n+statement error\n+EXPORT DATABASE '__TEST_DIR__/export_permissions_test2' (FORMAT CSV)\n",
  "problem_statement": "Python enable_external_access config flag does not restrict csv/parquet access\n#### What happens?\r\nHi Folks!\r\n\r\nOne of my coworkers was testing out the enable_external_access config parameter that you added for us (thank you!). Unfortunately, it does not work like we had expected. It does correctly restrict access to DataFrames in the global scope, but it does not restrict file system access for csv or parquet files. We are completely open to a separate flag that would restrict file system access, or for that capability to be added to this flag - whichever is easier! We have other protections in place to isolate users and prevent them from accessing things we want to protect so this is not urgent or gating a deployment, but this would be a really great security feature for us.\r\n\r\nRelated prior issue: #1773\r\n\r\nThanks!\r\n-Alex\r\n\r\n#### To Reproduce\r\n```python\r\nimport duckdb\r\nimport pandas as pd\r\n\r\ndftest = pd.DataFrame([{\"This\":1,\"is\":2,\"a\":3,\"test\":4},{\"This\":5,\"is\":6,\"a\":7,\"test\":8}])\r\ndftest.to_csv('test.csv')\r\nfile_creation_conn = duckdb.connect(':memory:', config={'enable_external_access': True})\r\nfile_creation_conn.execute(\"COPY (select * from dftest) to 'test.parquet' WITH (FORMAT PARQUET)\").fetchdf()\r\nfile_creation_conn.close()\r\n\r\n# The goal is to disable dataframe as well as filesystem access for this connection\r\nconn = duckdb.connect(':memory:', config={'enable_external_access': False})\r\n\r\n#The following statements succeed when they should fail:\r\ndf = conn.execute(\"select * from parquet_scan('test.parquet')\").fetchdf()\r\nprint('parquet_scan results:\\n',df)\r\ndf = conn.execute('select * from \"test.parquet\"').fetchdf()\r\nprint('test.parquet results:\\n',df)\r\ndf = conn.execute(\"select * from 'test.csv'\").fetchdf()\r\nprint('test.csv results:\\n',df)\r\ndf = conn.execute(\"select * from read_csv_auto('test.csv')\").fetchdf()\r\nprint('read_csv_auto results:\\n',df)\r\n\r\n#This statement correctly fails \r\ndf = conn.execute(\"select * from dftest\").fetchdf()\r\nprint('select * from dftest results:\\n',df)\r\n```\r\n#### Environment (please complete the following information):\r\n - OS: Windows\r\n - DuckDB Version: 0.3.1 and 0.3.2.dev521\r\n - DuckDB Client: Python\r\n\r\n#### Before Submitting\r\n\r\n- [X] **Have you tried this on the latest `master` branch?**\r\n\r\n- [X] **Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?**\r\n\r\n\nPython enable_external_access config flag does not restrict csv/parquet access\n#### What happens?\r\nHi Folks!\r\n\r\nOne of my coworkers was testing out the enable_external_access config parameter that you added for us (thank you!). Unfortunately, it does not work like we had expected. It does correctly restrict access to DataFrames in the global scope, but it does not restrict file system access for csv or parquet files. We are completely open to a separate flag that would restrict file system access, or for that capability to be added to this flag - whichever is easier! We have other protections in place to isolate users and prevent them from accessing things we want to protect so this is not urgent or gating a deployment, but this would be a really great security feature for us.\r\n\r\nRelated prior issue: #1773\r\n\r\nThanks!\r\n-Alex\r\n\r\n#### To Reproduce\r\n```python\r\nimport duckdb\r\nimport pandas as pd\r\n\r\ndftest = pd.DataFrame([{\"This\":1,\"is\":2,\"a\":3,\"test\":4},{\"This\":5,\"is\":6,\"a\":7,\"test\":8}])\r\ndftest.to_csv('test.csv')\r\nfile_creation_conn = duckdb.connect(':memory:', config={'enable_external_access': True})\r\nfile_creation_conn.execute(\"COPY (select * from dftest) to 'test.parquet' WITH (FORMAT PARQUET)\").fetchdf()\r\nfile_creation_conn.close()\r\n\r\n# The goal is to disable dataframe as well as filesystem access for this connection\r\nconn = duckdb.connect(':memory:', config={'enable_external_access': False})\r\n\r\n#The following statements succeed when they should fail:\r\ndf = conn.execute(\"select * from parquet_scan('test.parquet')\").fetchdf()\r\nprint('parquet_scan results:\\n',df)\r\ndf = conn.execute('select * from \"test.parquet\"').fetchdf()\r\nprint('test.parquet results:\\n',df)\r\ndf = conn.execute(\"select * from 'test.csv'\").fetchdf()\r\nprint('test.csv results:\\n',df)\r\ndf = conn.execute(\"select * from read_csv_auto('test.csv')\").fetchdf()\r\nprint('read_csv_auto results:\\n',df)\r\n\r\n#This statement correctly fails \r\ndf = conn.execute(\"select * from dftest\").fetchdf()\r\nprint('select * from dftest results:\\n',df)\r\n```\r\n#### Environment (please complete the following information):\r\n - OS: Windows\r\n - DuckDB Version: 0.3.1 and 0.3.2.dev521\r\n - DuckDB Client: Python\r\n\r\n#### Before Submitting\r\n\r\n- [X] **Have you tried this on the latest `master` branch?**\r\n\r\n- [X] **Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?**\r\n\r\n\n",
  "hints_text": "Thanks for the report! This looks like a small oversight, disabling external access should disable all external file system operations. Will have a look.\nFigured it was something small! Thanks as always Mark!\nThanks for the report! This looks like a small oversight, disabling external access should disable all external file system operations. Will have a look.\nFigured it was something small! Thanks as always Mark!",
  "created_at": "2021-12-07T19:38:09Z"
}