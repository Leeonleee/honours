{
  "repo": "duckdb/duckdb",
  "pull_number": 6001,
  "instance_id": "duckdb__duckdb-6001",
  "issue_numbers": [
    "5675"
  ],
  "base_commit": "db526dcf95c643735ddf78a531aaeb58d9ac716f",
  "patch": "diff --git a/src/storage/compression/fsst.cpp b/src/storage/compression/fsst.cpp\nindex a57ef2bd03ba..af928bd644d2 100644\n--- a/src/storage/compression/fsst.cpp\n+++ b/src/storage/compression/fsst.cpp\n@@ -212,17 +212,11 @@ class FSSTCompressionState : public CompressionState {\n \t\t}\n \t}\n \n-\tvoid CreateEmptySegment(idx_t row_start) {\n-\t\tauto &db = checkpointer.GetDatabase();\n-\t\tauto &type = checkpointer.GetType();\n-\t\tauto compressed_segment = ColumnSegment::CreateTransientSegment(db, type, row_start);\n-\t\tcurrent_segment = std::move(compressed_segment);\n-\n-\t\tcurrent_segment->function = function;\n-\n-\t\t// Reset the buffers and string map\n+\tvoid Reset() {\n \t\tindex_buffer.clear();\n \t\tcurrent_width = 0;\n+\t\tmax_compressed_string_length = 0;\n+\t\tlast_fitting_size = 0;\n \n \t\t// Reset the pointers into the current segment\n \t\tauto &buffer_manager = BufferManager::GetBufferManager(current_segment->db);\n@@ -231,6 +225,15 @@ class FSSTCompressionState : public CompressionState {\n \t\tcurrent_end_ptr = current_handle.Ptr() + current_dictionary.end;\n \t}\n \n+\tvoid CreateEmptySegment(idx_t row_start) {\n+\t\tauto &db = checkpointer.GetDatabase();\n+\t\tauto &type = checkpointer.GetType();\n+\t\tauto compressed_segment = ColumnSegment::CreateTransientSegment(db, type, row_start);\n+\t\tcurrent_segment = std::move(compressed_segment);\n+\t\tcurrent_segment->function = function;\n+\t\tReset();\n+\t}\n+\n \tvoid UpdateState(string_t uncompressed_string, unsigned char *compressed_string, size_t compressed_string_len) {\n \n \t\tif (!HasEnoughSpace(compressed_string_len)) {\n@@ -284,10 +287,14 @@ class FSSTCompressionState : public CompressionState {\n \t\t    BitpackingPrimitives::GetRequiredSize(current_string_count + 1, required_minimum_width);\n \n \t\t// TODO switch to a symbol table per RowGroup, saves a bit of space\n-\t\tidx_t required_space = sizeof(fsst_compression_header_t) + current_dict_size + dict_offsets_size + string_len +\n-\t\t                       fsst_serialized_symbol_table_size;\n+\t\tauto required_size = sizeof(fsst_compression_header_t) + current_dict_size + dict_offsets_size + string_len +\n+\t\t                     fsst_serialized_symbol_table_size;\n \n-\t\treturn required_space <= Storage::BLOCK_SIZE;\n+\t\tif (required_size <= Storage::BLOCK_SIZE) {\n+\t\t\tlast_fitting_size = required_size;\n+\t\t\treturn true;\n+\t\t}\n+\t\treturn false;\n \t}\n \n \tvoid Flush(bool final = false) {\n@@ -313,6 +320,10 @@ class FSSTCompressionState : public CompressionState {\n \t\tauto total_size = sizeof(fsst_compression_header_t) + compressed_index_buffer_size + current_dictionary.size +\n \t\t                  fsst_serialized_symbol_table_size;\n \n+\t\tif (total_size != last_fitting_size) {\n+\t\t\tthrow InternalException(\"FSST string compression failed due to incorrect size calculation\");\n+\t\t}\n+\n \t\t// calculate ptr and offsets\n \t\tauto base_ptr = handle.Ptr();\n \t\tauto header_ptr = (fsst_compression_header_t *)base_ptr;\n@@ -334,11 +345,6 @@ class FSSTCompressionState : public CompressionState {\n \t\tStore<uint32_t>(symbol_table_offset, (data_ptr_t)&header_ptr->fsst_symbol_table_offset);\n \t\tStore<uint32_t>((uint32_t)current_width, (data_ptr_t)&header_ptr->bitpacking_width);\n \n-\t\tif (symbol_table_offset + fsst_serialized_symbol_table_size >\n-\t\t    current_dictionary.end - current_dictionary.size) {\n-\t\t\tthrow InternalException(\"FSST string compression failed due to incorrect size calculation\");\n-\t\t}\n-\n \t\tif (total_size >= FSSTStorage::COMPACTION_FLUSH_LIMIT) {\n \t\t\t// the block is full enough, don't bother moving around the dictionary\n \t\t\treturn Storage::BLOCK_SIZE;\n@@ -369,8 +375,9 @@ class FSSTCompressionState : public CompressionState {\n \t// Buffers and map for current segment\n \tstd::vector<uint32_t> index_buffer;\n \n-\tsize_t max_compressed_string_length = 0;\n-\tbitpacking_width_t current_width = 0;\n+\tsize_t max_compressed_string_length;\n+\tbitpacking_width_t current_width;\n+\tidx_t last_fitting_size;\n \n \tduckdb_fsst_encoder_t *fsst_encoder = nullptr;\n \tunsigned char fsst_serialized_symbol_table[sizeof(duckdb_fsst_decoder_t)];\n",
  "test_patch": "diff --git a/test/sql/storage/compression/fsst/issue_5675.test b/test/sql/storage/compression/fsst/issue_5675.test\nnew file mode 100644\nindex 000000000000..5761cd7c87f5\n--- /dev/null\n+++ b/test/sql/storage/compression/fsst/issue_5675.test\n@@ -0,0 +1,43 @@\n+# name: test/sql/storage/compression/fsst/issue_5675.test\n+# description: fix for issue #5675\n+# group: [fsst]\n+\n+load __TEST_DIR__/issue_5675.db\n+\n+require parquet\n+\n+statement ok\n+pragma threads=1\n+\n+statement ok\n+CREATE TABLE TEST (col VARCHAR);\n+\n+# A very long random string -> this will compress very poorly\n+statement ok\n+INSERT INTO TEST\n+    SELECT '33y93uhg3qi3f13hnh8xjrvvbz7iwevroaaif8v5ecfetwnd5yqde9mna8753399lj5r2u5rps5tuu0xsetmsxi80dacku7uz0q3r7h3r9gboq4c41t4h8brm6t7hcb2zg41g7elknivchc3ff409nhczhc7ciledplgcql5sfjb1x2ctuvf6cjdckfkq56ranj67qkzdnvj8guw8rxyd55298ziig0adhqsi0jdx60exhq6vv8hfqarfpvfma8qoqtv5kzte4mofm41w5uy0zdk4tjd5i7673pyigseb4mb3g6u5rwac1s8s1xcoobjoexp340hbr7vk1fwqdfisdm94967tvqxmirn6ml4ccaw3r7bh04e2p5txvea0vi965t29vbv1858ystdqpc8s9aalij445brgn55gpwtgmpbg8tkg7plw05aw8auijbkl9v4go9azrbqcb3yipi1hphmazfrzuta6qdys89usu672vs18qbricebs2rjhsqud8iemug1fr31hoaxu0lg7yfg2i8i9ufmrkgg8dtv5dw5edxptw48meec88iunibox2bc72eq5d59fmg2db7r8xtj1wptoak72on1v5jis1s024hvebx3nudmx78s32dszihs8mvkpt37fxsza9nccbo0jmyu7wzspkl1tqtbkx17lc043weyu2qavtp7vzvuyk9j7l7gha5kr6x295l9sk610ya8820atujz6dpcnkp4fuyatyefo4acc1g05ipcf2bwjgtz48ewzivm8p6kh7e1dp715x5as9bvs5i9n9pxvhp6jo7clnj987iojgztfk2fk9980gr8i69frtci4cj6rxlf9ig228tyljlqd53nwxnz7mvqjymohyqjsuunjdnioo199cl8m6fvv3hu8vh0v8otcohrskwan81p1ncqkf2svf97gyz2cu7bfrvbv03o6bflqdm60ojl0z1yta41m416mkdljpuxzk7gs9tj121jnvfe9piw1ow3ibu66eyrs2cmxopyhio4h7toekptm4xysmx96pdbjxx0kugwj4mfgjwj40ijkpwz0kjs39eumuexyooldizgzidhzk7hecfqamlnolbescpiuqrfyewm4evn2tx3cnoun9y3mciact4ont84q9z99r4wt76wusjtoz11xv5rgkz1t2dy3wtzog1ifhmprfymrzt0lzlsugjru5m6ubq87dmyzu9fwo8sivuea2zedogsm93sgwgrbomalj213ejyic4w9wgobnqjogd9j0h24u8dddr238elpqwk4sr2dznvw2fthow2l5ckua9z022nj3hktzae4jnyu7ckohdowy91lmh6ns10sialoa146x5sfje0fc4i1dt1dwbcygtmadjwjhytsvsq879y9tfud08fg2c1a01yzb5yy1z5cj99aherty940w91qjl0zl27p58enhtdvr0wzqpkgkxno93vj9qm7fiszrzcbmlowwfeusty9dkm9i4vskzovrgjpp91op2654acbblntyxra484e8ejbmehtecdh25patwrs016w7gqtvtzgufg9znmuxwcczrwgqpfkgwj27pfu56z5sd9241vjz8364zxfwfogjvhdxcxfgh6u4lbqmu1870ei2snna70atxputk4ybpj1r1e0ut4zcz8786eofale8on8uysws7mfs8o3uen21zjtqnc260s6e9tc1lpw2qk2vjsg10escmlj8hliba24sauabdc7ttj2pmv2xjh0photfpywqfbw7f9av3jxyplfap42nc9ttz1xqbrb3seieu2cnnwjc8vqxuacprwcdznwzrc99e28zf5q6y9c2exm9rbofy09w854xkplwlx2v2qjfm36r4jhwi953i993xhgu3um0qeisyfw8aicc52itcc53e98wer9iluwqrttx25vjr2ukk7m0olyzksbj9gaiu4tii3vcmk994ouvzse4khfd4ud9uxea4n8ahdshzpflx0feh0s1r9nv6e6fxipxiclaqs4hul93pbka016cq2l9cogc3tueqhwuximt11gws89uhjf81dhkowdrr0lh19yso5r2hclhblr3c0ykac7ieecfth4xbyz31hr3ug4gd8lbgkvh0hm5tgtyy84qnptuif7l6do0ksktathok43eyflzcq7z8wulniynjhqmnlrdjisosqt3mr02iuahfg7ldzvop71ezhxzgix6xzn93e2pjfo9ejjp5aqgocif4vob6t1be3hg0hn5597h5f66v2m6swkjed482ggfnw894rhxaurk67dsj2albqndwkz25rjxrahlj2eeinxqq93a30o86i865jter4g7wm0brhz5csy5kgb51sawjkc9kfcsqz92c4d7cf7f28kgtruroohlxli6bve96r2ff3eoqqupwifodag20lfp25t0fx61254kwm3s6runk0hcfn9opo2fsduoibmqdrzfnmmf431af441tkur3rhx1o08ovl9uf4xxachfj7acy58g7fnfkk4od5pfjvr20l85dfes3tq9vyom2vbx0m2r5sokx6c7chetqpphdk9etnpqxwwspcnqrq8hcrjka52lgc1y41fvnhxcdisx7w9b9l19p2rmdj4tqx4ezjghgi06b9vil6hkvllt3m2ym9e21mlqy1v0e5yoypwj32k5ri8et1bn2uqmjaw8gpcegsvv9wz45i2ggnntszj0nx05dl1u46mcb66y43xd2tyow6v6wokbeputut9ybaxz7o3hcq41s2p97mxpv34guz7xxbdhezhvja06m298nqx0qsh4tn14vcwt7kdv9rvpcwljzese17dwmnhmi38iqxf8hp5dannyffr8ijrwmxn3ezmfg6f4l8a4mwyhfcjvziu4uy9a62d8wrfskakvwh9h89rfjpa4k8edrq6jjkf9a7xu0vibp3g3escq0jjt209xxyztpy1u1yf9r2hgmw7mwa4j4565w74ib5ocn8q5wrawc9m17o1i8e3mvoc6bkj96nwm5iti5krq5xjwy8rd7j0tjkjzvupus5d64d1zt4fezbuvhieygyl0jlv8s8m24u3jj822tf1wwukafoksuigt1ttsni935ly51cqokl5k09t4y3hjszbj1cisjg18cqsqwqcrlai7exaefpknsa6euj7k0kaqbf4lya7f29zmytpzc32t3vqs2b0967a80ybxykz6fvyjdraj43831rnq19xh4m000gyi0bu5jgp8x53eibhya5xtqdglmdjrhen0md1fha4k0y95ze3v5cxssdeyqwj9y8a8eco858nf9uj6f83z3uk9yk7zi90lmcy8bm6es36hxwj8g1yygj5evne8ire0q6pa2e0jh9wmubpsv53tcof1pvhvvd7b03i2srdeykcq7sn88bv2huz39pmd4m012nx6jib7c53ape70i6gwefvatqetrvj94oq6bm50eqo4c72csqdwn55xpoq27pqot90zfzpnb690eund78eoss6ltg7zhkc4hk0qjvrl8me8cgzy0py4btyhhsks9i0veou0ia84nxbkwo758dn3m0kgp60jxcrgdjuyojbh5u67qlu69lthdzmzshij0mhlaa05rdrn9vdv1440v2rozpwdtvxzfvykb0tjx700eqdr164zy7d3ji8g82souaiui7n96my35ocgt0xmdrss'\n+    FROM range(0,1) tbl(i);\n+\n+# Now several, slightly shorter, but still near 4k limit strings\n+statement ok\n+INSERT INTO TEST\n+    SELECT '5yqde9mna8753399lj5r2u5rps5tuu0xsetmsxi80dacku7uz0q3r7h3r9gboq4c41t4h8brm6t7hcb2zg41g7elknivchc3ff409nhczhc7ciledplgcql5sfjb1x2ctuvf6cjdckfkq56ranj67qkzdnvj8guw8rxyd55298ziig0adhqsi0jdx60exhq6vv8hfqarfpvfma8qoqtv5kzte4mofm41w5uy0zdk4tjd5i7673pyigseb4mb3g6u5rwac1s8s1xcoobjoexp340hbr7vk1fwqdfisdm94967tvqxmirn6ml4ccaw3r7bh04e2p5txvea0vi965t29vbv1858ystdqpc8s9aalij445brgn55gpwtgmpbg8tkg7plw05aw8auijbkl9v4go9azrbqcb3yipi1hphmazfrzuta6qdys89usu672vs18qbricebs2rjhsqud8iemug1fr31hoaxu0lg7yfg2i8i9ufmrkgg8dtv5dw5edxptw48meec88iunibox2bc72eq5d59fmg2db7r8xtj1wptoak72on1v5jis1s024hvebx3nudmx78s32dszihs8mvkpt37fxsza9nccbo0jmyu7wzspkl1tqtbkx17lc043weyu2qavtp7vzvuyk9j7l7gha5kr6x295l9sk610ya8820atujz6dpcnkp4fuyatyefo4acc1g05ipcf2bwjgtz48ewzivm8p6kh7e1dp715x5as9bvs5i9n9pxvhp6jo7clnj987iojgztfk2fk9980gr8i69frtci4cj6rxlf9ig228tyljlqd53nwxnz7mvqjymohyqjsuunjdnioo199cl8m6fvv3hu8vh0v8otcohrskwan81p1ncqkf2svf97gyz2cu7bfrvbv03o6bflqdm60ojl0z1yta41m416mkdljpuxzk7gs9tj121jnvfe9piw1ow3ibu66eyrs2cmxopyhio4h7toekptm4xysmx96pdbjxx0kugwj4mfgjwj40ijkpwz0kjs39eumuexyooldizgzidhzk7hecfqamlnolbescpiuqrfyewm4evn2tx3cnoun9y3mciact4ont84q9z99r4wt76wusjtoz11xv5rgkz1t2dy3wtzog1ifhmprfymrzt0lzlsugjru5m6ubq87dmyzu9fwo8sivuea2zedogsm93sgwgrbomalj213ejyic4w9wgobnqjogd9j0h24u8dddr238elpqwk4sr2dznvw2fthow2l5ckua9z022nj3hktzae4jnyu7ckohdowy91lmh6ns10sialoa146x5sfje0fc4i1dt1dwbcygtmadjwjhytsvsq879y9tfud08fg2c1a01yzb5yy1z5cj99aherty940w91qjl0zl27p58enhtdvr0wzqpkgkxno93vj9qm7fiszrzcbmlowwfeusty9dkm9i4vskzovrgjpp91op2654acbblntyxra484e8ejbmehtecdh25patwrs016w7gqtvtzgufg9znmuxwcczrwgqpfkgwj27pfu56z5sd9241vjz8364zxfwfogjvhdxcxfgh6u4lbqmu1870ei2snna70atxputk4ybpj1r1e0ut4zcz8786eofale8on8uysws7mfs8o3uen21zjtqnc260s6e9tc1lpw2qk2vjsg10escmlj8hliba24sauabdc7ttj2pmv2xjh0photfpywqfbw7f9av3jxyplfap42nc9ttz1xqbrb3seieu2cnnwjc8vqxuacprwcdznwzrc99e28zf5q6y9c2exm9rbofy09w854xkplwlx2v2qjfm36r4jhwi953i993xhgu3um0qeisyfw8aicc52itcc53e98wer9iluwqrttx25vjr2ukk7m0olyzksbj9gaiu4tii3vcmk994ouvzse4khfd4ud9uxea4n8ahdshzpflx0feh0s1r9nv6e6fxipxiclaqs4hul93pbka016cq2l9cogc3tueqhwuximt11gws89uhjf81dhkowdrr0lh19yso5r2hclhblr3c0ykac7ieecfth4xbyz31hr3ug4gd8lbgkvh0hm5tgtyy84qnptuif7l6do0ksktathok43eyflzcq7z8wulniynjhqmnlrdjisosqt3mr02iuahfg7ldzvop71ezhxzgix6xzn93e2pjfo9ejjp5aqgocif4vob6t1be3hg0hn5597h5f66v2m6swkjed482ggfnw894rhxaurk67dsj2albqndwkz25rjxrahlj2eeinxqq93a30o86i865jter4g7wm0brhz5csy5kgb51sawjkc9kfcsqz92c4d7cf7f28kgtruroohlxli6bve96r2ff3eoqqupwifodag20lfp25t0fx61254kwm3s6runk0hcfn9opo2fsduoibmqdrzfnmmf431af441tkur3rhx1o08ovl9uf4xxachfj7acy58g7fnfkk4od5pfjvr20l85dfes3tq9vyom2vbx0m2r5sokx6c7chetqpphdk9etnpqxwwspcnqrq8hcrjka52lgc1y41fvnhxcdisx7w9b9l19p2rmdj4tqx4ezjghgi06b9vil6hkvllt3m2ym9e21mlqy1v0e5yoypwj32k5ri8et1bn2uqmjaw8gpcegsvv9wz45i2ggnntszj0nx05dl1u46mcb66y43xd2tyow6v6wokbeputut9ybaxz7o3hcq41s2p97mxpv34guz7xxbdhezhvja06m298nqx0qsh4tn14vcwt7kdv9rvpcwljzese17dwmnhmi38iqxf8hp5dannyffr8ijrwmxn3ezmfg6f4l8a4mwyhfcjvziu4uy9a62d8wrfskakvwh9h89rfjpa4k8edrq6jjkf9a7xu0vibp3g3escq0jjt209xxyztpy1u1yf9r2hgmw7mwa4j4565w74ib5ocn8q5wrawc9m17o1i8e3mvoc6bkj96nwm5iti5krq5xjwy8rd7j0tjkjzvupus5d64d1zt4fezbuvhieygyl0jlv8s8m24u3jj822tf1wwukafoksuigt1ttsni935ly51cqokl5k09t4y3hjszbj1cisjg18cqsqwqcrlai7exaefpknsa6euj7k0kaqbf4lya7f29zmytpzc32t3vqs2b0967a80ybxykz6fvyjdraj43831rnq19xh4m000gyi0bu5jgp8x53eibhya5xtqdglmdjrhen0md1fha4k0y95ze3v5cxssdeyqwj9y8a8eco858nf9uj6f83z3uk9yk7zi90lmcy8bm6es36hxwj8g1yygj5evne8ire0q6pa2e0jh9wmubpsv53tcof1pvhvvd7b03i2srdeykcq7sn88bv2huz39pmd4m012nx6jib7c53ape70i6gwefvatqetrvj94oq6bm50eqo4c72csqdwn55xpoq27pqot90zfzpnb690eund78eoss6ltg7zhkc4hk0qjvrl8me8cgzy0py4btyhhsks9i0veou0ia84nxbkwo758dn3m0kgp60jxcrgdjuyojbh5u67qlu69lthdzmzshij0mhlaa05rdrn9vdv1440v2rozpwdtvxzfvykb0tjx700eqdr164zy7d3ji8g82souaiui7n96my35ocgt0xmdrss'\n+    FROM range(0,90) tbl(i);\n+\n+# Followed by many empty strings ->\n+statement ok\n+INSERT INTO TEST SELECT '' FROM range(0,100000) tbl(i);\n+\n+# With the finishing move of a single char string\n+statement ok\n+INSERT INTO TEST values ('33y93uhg3qi3f13hnh8xjrvvbz7iwevroaaif8v5ecfetwnd5yqde9mna8753399lj5r2u5rps5tuu0xsetmsxi80dacku7uz0q3r7h3r9gboq4c41t4h8brm6t7hcb2zg41g7elknivchc3ff409nhczhc7ciledplgcql5sfjb1x2ctuvf6cjdckfkq56ranj67qkzdnvj8guw8rxyd55298ziig0adhqsi0jdx60exhq6vv8hfqarfpvfma8qoqtv5kzte4mofm41w5uy0zdk4tjd5i7673pyigseb4mb3g6u5rwac1s8s1xcoobjoexp340hbr7vk1fwqdfisdm94967tvqxmirn6ml4ccaw3r7bh04e2p5txvea0vi965t29vbv1858ystdqpc8s9aalij445brgn55gpwtgmpbg8tkg7plw05aw8auijbkl9v4go9azrbqcb3yipi1hphmazfrzuta6qdys89usu672vs18qbricebs2rjhsqud8iemug1fr31hoaxu0lg7yfg2i8i9ufmrkgg8dtv5dw5edxptw48meec88iunibox2bc72eq5d59fmg2db7r8xtj1wptoak72on1v5jis1s024hvebx3nudmx78s32dszihs8mvkpt37fxsza9nccbo0jmyu7wzspkl1tqtbkx17lc043weyu2qavtp7vzvuyk9j7l7gha5kr6x295l9sk610ya8820atujz6dpcnkp4fuyatyefo4acc1g05ipcf2bwjgtz48ewzivm8p6kh7e1dp715x5as9bvs5i9n9pxvhp6jo7clnj987iojgztfk2fk9980gr8i69frtci4cj6rxlf9ig228tyljlqd53nwxnz7mvqjymohyqjsuunjdnioo199cl8m6fvv3hu8vh0v8otcohrskwan81p1ncqkf2svf97gyz2cu7bfrvbv03o6bflqdm60ojl0z1yta41m416mkdljpuxzk7gs9tj121jnvfe9piw1ow3ibu66eyrs2cmxopyhio4h7toekptm4xysmx96pdbjxx0kugwj4mfgjwj40ijkpwz0kjs39eumuexyooldizgzidhzk7hecfqamlnolbescpiuqrfyewm4evn2tx3cnoun9y3mciact4ont84q9z99r4wt76wusjtoz11xv5rgkz1t2dy3wtzog1ifhmprfymrzt0lzlsugjru5m6ubq87dmyzu9fwo8sivuea2zedogsm93sgwgrbomalj213ejyic4w9wgobnqjogd9j0h24u8dddr238elpqwk4sr2dznvw2fthow2l5ckua9z022nj3hktzae4jnyu7ckohdowy91lmh6ns10sialoa146x5sfje0fc4i1dt1dwbcygtmadjwjhytsvsq879y9tfud08fg2c1a01yzb5yy1z5cj99aherty940w91qjl0zl27p58enhtdvr0wzqpkgkxno93vj9qm7fiszrzcbmlowwfeusty9dkm9i4vskzovrgjpp91op2654acbblntyxra484e8ejbmehtecdh25patwrs016w7gqtvtzgufg9znmuxwcczrwgqpfkgwj27pfu56z5sd9241vjz8364zxfwfogjvhdxcxfgh6u4lbqmu1870ei2snna70atxputk4ybpj1r1e0ut4zcz8786eofale8on8uysws7mfs8o3uen21zjtqnc260s6e9tc1lpw2qk2vjsg10escmlj8hliba24sauabdc7ttj2pmv2xjh0photfpywqfbw7f9av3jxyplfap42nc9ttz1xqbrb3seieu2cnnwjc8vqxuacprwcdznwzrc99e28zf5q6y9c2exm9rbofy09w854xkplwlx2v2qjfm36r4jhwi953i993xhgu3um0qeisyfw8aicc52itcc53e98wer9iluwqrttx25vjr2ukk7m0olyzksbj9gaiu4tii3vcmk994ouvzse4khfd4ud9uxea4n8ahdshzpflx0feh0s1r9nv6e6fxipxiclaqs4hul93pbka016cq2l9cogc3tueqhwuximt11gws89uhjf81dhkowdrr0lh19yso5r2hclhblr3c0ykac7ieecfth4xbyz31hr3ug4gd8lbgkvh0hm5tgtyy84qnptuif7l6do0ksktathok43eyflzcq7z8wulniynjhqmnlrdjisosqt3mr02iuahfg7ldzvop71ezhxzgix6xzn93e2pjfo9ejjp5aqgocif4vob6t1be3hg0hn5597h5f66v2m6swkjed482ggfnw894rhxaurk67dsj2albqndwkz25rjxrahlj2eeinxqq93a30o86i865jter4g7wm0brhz5csy5kgb51sawjkc9kfcsqz92c4d7cf7f28kgtruroohlxli6bve96r2ff3eoqqupwifodag20lfp25t0fx61254kwm3s6runk0hcfn9opo2fsduoibmqdrzfnmmf431af441tkur3rhx1o08ovl9uf4xxachfj7acy58g7fnfkk4od5pfjvr20l85dfes3tq9vyom2vbx0m2r5sokx6c7chetqpphdk9etnpqxwwspcnqrq8hcrjka52lgc1y41fvnhxcdisx7w9b9l19p2rmdj4tqx4ezjghgi06b9vil6hkvllt3m2ym9e21mlqy1v0e5yoypwj32k5ri8et1bn2uqmjaw8gpcegsvv9wz45i2ggnntszj0nx05dl1u46mcb66y43xd2tyow6v6wokbeputut9ybaxz7o3hcq41s2p97mxpv34guz7xxbdhezhvja06m298nqx0qsh4tn14vcwt7kdv9rvpcwljzese17dwmnhmi38iqxf8hp5dannyffr8ijrwmxn3ezmfg6f4l8a4mwyhfcjvziu4uy9a62d8wrfskakvwh9h89rfjpa4k8edrq6jjkf9a7xu0vibp3g3escq0jjt209xxyztpy1u1yf9r2hgmw7mwa4j4565w74ib5ocn8q5wrawc9m17o1i8e3mvoc6bkj96nwm5iti5krq5xjwy8rd7j0tjkjzvupus5d64d1zt4fezbuvhieygyl0jlv8s8m24u3jj822tf1wwukafoksuigt1ttsni935ly51cqokl5k09t4y3hjszbj1cisjg18cqsqwqcrlai7exaefpknsa6euj7k0kaqbf4lya7f29zmytpzc32t3vqs2b0967a80ybxykz6fvyjdraj43831rnq19xh4m000gyi0bu5jgp8x53eibhya5xtqdglmdjrhen0md1fha4k0y95ze3v5cxssdeyqwj9y8a8eco858nf9uj6f83z3uk9yk7zi90lmcy8bm6es36hxwj8g1yygj5evne8ire0q6pa2e0jh9wmubpsv53tcof1pvhvvd7b03i2srdeykcq7sn88bv2huz39pmd4m012nx6jib7c53ape70i6gwefvatqetrvj94oq6bm50eqo4c72csqdwn55xpoq27pqot90zfzpnb690eund78eoss6ltg7zhkc4hk0qjvrl8me8cgzy0py4btyhhsks9i0veou0ia84nxbkwo758dn3m0kgp60jxcrgdjuyojbh5u67qlu69lthdzmzshij0mhlaa05rdrn9vdv1440v2rozpwdtvxzfvykb0tjx700eqdr164zy7d3ji8g82souaiui7n96my35ocgt0xmdrss');\n+\n+# Now create our FSST table\n+statement ok\n+pragma force_compression='fsst';\n+\n+statement ok\n+CREATE TABLE TEST2 as SELECT * FROM TEST;\n+\n+statement ok\n+CHECKPOINT;\n",
  "problem_statement": "FSST string compression failed due to incorrect size calculation\n### What happens?\r\n\r\nWhen trying to create a table like this\r\n\r\n```sql\r\nCREATE TABLE xxx AS SELECT tbl.*, '12345' AS dedup_group\r\n                FROM read_parquet('path/glob/*.snappy.parquet') AS tbl;\r\n```\r\n\r\nI get the following error after a few dozen seconds\r\n\r\n```\r\nInternalException: INTERNAL Error: FSST string compression failed due to incorrect size calculation\r\n```\r\n\r\n### To Reproduce\r\n\r\nI'm guessing it's somehow dependant on the parquet file that I'm trying to load in but sadly I can't share the data due to privacy reasons. I'm happy to try and generate artificial data that exhibits the same problem but I need some help thinking of ideas what the issue might be so that I don't waste time trying every possible combination.\r\n\r\nThe parquet files are about 80MB each and were generated from Spark (Scala).\r\n\r\nUnfortunately that's the only extra information I have available at the moment but again I'm happy to continue digging.\r\n\r\n### OS:\r\n\r\nmacOS \r\n\r\n### DuckDB Version:\r\n\r\n0.6.1, 0.6.2dev447\r\n\r\n### DuckDB Client:\r\n\r\nPython\r\n\r\n### Full Name:\r\n\r\nRik Nauta\r\n\r\n### Affiliation:\r\n\r\nLMU AB\r\n\r\n### Have you tried this on the latest `master` branch?\r\n\r\n- [X] I agree\r\n\r\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\r\n\r\n- [X] I agree\n",
  "hints_text": "update: I just saw there's a `enable_fsst_vectors` setting so tried changing that to `True` but it hasn't solved the issue.\nupdate: maybe someone more knowledgeable kind think of something in the details of https://github.com/duckdb/duckdb/pull/4366?\nThanks for the report, but can you please try to make it reproducible by creating a dataset you *can* share?\n@RXminuS This is very hard to figure out without any idea of the data. Given that duckdb compresses the data per rowgroup and per column, there should be (at least) 1 offending here. Maybe this specific column is not privacy sensitive? If it is, some statistics would already be helpful: min length, max length, nulls, etc\r\n\r\n\r\n\nYeah I'm happy to try and create a dataset, however I have about 80 columns in there with a bunch of mixed and nested fields so I was trying to see if there were some initial hunches as to what the problem might be so I can try those columns first because by just randomly sampling the data I've not been able to reproduce it. \r\n\r\nWhat also would be really helpful if there was some way of increasing the logs so that I can figure out what the offending row (or even file) is?\n@samansmink if I'd loop through every column in the dataset and exclude each one in turn should that be able to isolate the issue then?\nAlso a hunch...I don't know if that matters is that some of the data is from the internet and so probably messy. What would happen if in a string there are invalid utf-8 code-pairs? Could that upset the count somehow?\n> Thanks for the report, but can you please try to make it reproducible by creating a dataset you _can_ share?\r\n\r\nAbsolutely! I felt really bad opening the issue with so little information but I also hoped that having at least the error message up here might bring other people who unknowingly are experiencing the same and Googling for it. The message first presented itself through SQLAlchemy / ibis and I've had issues with parquet in the past as well. So since the error message is very generic it took me a while to bring it back to DuckDB instead of one of the other components involved.\r\n\r\nBut I'll do my best to isolate the datapoint as per suggestions in this thread and really appreciate any help with honing down the issue and patience to get there.\r\n\r\nP.S. Also, I'd be remiss if I didn't at least give a massive shoutout to DuckDB...It's quacking awesome! <3\nDuckDB...It's quacking awesome!\r\n\r\nLike that :-) \n@RXminuS \r\n\r\n> @samansmink if I'd loop through every column in the dataset and exclude each one in turn should that be able to isolate the issue then?\r\n\r\nI would go the other way around, selecting a single column for every string column in your dataset. Then if it turns out to be one of the nested fields you can do a similar trick with `struct_extract` where you select only part of the nested type.\r\n\r\n> Also a hunch...I don't know if that matters is that some of the data is from the internet and so probably messy. What would happen if in a string there are invalid utf-8 code-pairs? Could that upset the count somehow?\r\n\r\nThis should work I think, FSST also works on BLOB types\r\n\r\n\nJust FYI, I'm still investigating. Just been a bit busy around the holidays.\nHi @RXminuS, have you made any progress with the reproduction of this? I would reaally like to have this one fixed before our next release \ud83d\ude01  \r\n\r\nIf there's any way I can help, let me know! \nI'm still hunting it down. I've isolated it to a file and a column...but it seems that the row that causes it keeps moving. However...I have a suspicion that https://github.com/duckdb/duckdb/pull/5824 might be related. I'm testing the latest dev branch now to confirm.\nNope...issue still remains. What's weird is that sometimes I get a full blown error with a stack trace and sometimes nothing more than \r\n<img width=\"205\" alt=\"CleanShot 2023-01-17 at 00 52 03@2x\" src=\"https://user-images.githubusercontent.com/3949285/212781678-468305d3-8916-45a9-8431-d70c35725ab8.png\">\r\n\r\nWhat's weird is that the file loads just fine in Tad Viewer as well. I'm going to keep finding a row that by its own reproduces the error but it's slow going \ud83d\ude22 \n<img width=\"911\" alt=\"CleanShot 2023-01-17 at 00 55 26@2x\" src=\"https://user-images.githubusercontent.com/3949285/212781913-34287992-e5ae-41df-b06e-131915713675.png\">\r\n\nOk, I think I figured out why the rows keep changing...it writes something to the .wal file that then subsequently breaks all following queries. Is there any way that file can be of use?\n> What's weird is that the file loads just fine in Tad Viewer as well. I'm going to keep finding a row that by its own reproduces the error but it's slow going \r\n\r\nIt's likely not a row, but an individual column that contains a combination of values that FSST does not handle correctly.\r\n\r\n> Ok, I think I figured out why the rows keep changing...it writes something to the .wal file that then subsequently breaks all following queries. Is there any way that file can be of use?\r\n\r\nThat could be, but the WAL file also contains the actual data. The actual data you are loading would be more helpful. You could also send it to us by e-mail - there's no need to publish it publicly.\r\n\r\nAlternatively you can try using a scrambling tool such as [Faker](https://faker.readthedocs.io/en/master/) to scramble the Parquet files, and checking to see if the problem persists?\r\n\r\nI've written [a script for scrambling Parquet files](https://gist.github.com/Mytherin/a841f01eb68ba8abe1d7e321d4f927e1) - and another user wrote [this scrambling tool](https://gist.github.com/AlexanderVR/d2ed810799be4649446ef0d51364a404). Perhaps those could be helpful as well. \r\n\r\n\n@Mytherin yeah that seems likely now. When I run a `LIMIT X` on the rows to be inserted then if I go over 122182 I get the error. But if I only select that row by itself it works just fine.\r\n\r\nThe problem I have is that the data itself is not the only thing that's confidential...it's actually the structure of the data and the data this company I'm working for has available.\r\n\r\nI'll see if I can scramble some of the column names and values and still keep the error occurring. Alternatively; I'm looking if it's not easier to just add some logging in DuckDB and output the data that's problematic to a crash dump.\nHave you tried trying to isolate which column is causing the issue? DuckDB stores data in columnar format, and columns are compressed individually. It is likely you will be able to replicate this issue by only selecting the individual column, e.g.:\r\n\r\n```sql\r\nCREATE TABLE xxx AS SELECT tbl.col1\r\n                FROM read_parquet('path/glob/*.snappy.parquet') AS tbl;\r\n```\r\n\r\nIf that is the case perhaps you could share the individual column with us? It is possible the individual column does not by itself represent confidential data.\nYeah I know which top level column it is, however it's a nested struct so there's a bunch of different sized arrays and stuff in there. I can try selecting only sub-columns and seeing if I can narrow it down further.\nAh, I see. Unnesting the struct might change the storage layout and result in the bug not occuring - but removing parts of the struct should not change the storage layout of the other parts. For example, if your column definition looks like this:\r\n\r\n\r\n```sql\r\nSTRUCT(s VARCHAR[], i INT)[];\r\n```\r\n\r\nThe `s` and `i` columns are stored separately, so turning it into this should not affect storage:\r\n\r\n```sql\r\nSTRUCT(s VARCHAR[])[];\r\n```\nI've gotten a hard NO to share the data that's problematic; and have been unsuccessful in replicating the issue with the sensitive fields removed / altered.\r\n\r\nI think it's time for a different tactic...\r\n\r\nI'm going to try build and write a test locally for me like was done for #5824 .  Then I'll post debug information & stack traces. If someone's available I'm happy to do a remote pair-programming session where we try to fix the issue together. Hopefully we can find the underlying root cause that way without needing to share the data itself.\n> I've gotten a hard NO to share the data that's problematic; and have been unsuccessful in replicating the issue with the sensitive fields removed / altered.\r\n\r\n@RXminuS thats understandable. I'll do some digging into the code tomorrow and also see if I can reproduce the error by bruteforcing a bunch of differently distributed random data through.\r\n\r\nIf that fails i would certainly be down for a remote pair-programming session, that'll be super helpful for sure!\r\n\r\n\r\n\n@RXminuS I haven't managed to reproduce this with a bunch of random data so I would propose the following:\r\n\r\nI made a branch at https://github.com/samansmink/duckdb/tree/instrumented-fsst-compression where I added a bunch of print statements and some extra checks on the relevant variables. Could you rerun your query on the offending column and send me the output? If you have any questions also feel free to also reach out through the duckdb discord or to me directly: 'Sam Ansmink#3611'\r\n\r\nIf that still fails I think a pair debugging session would be our best bet to catch this\r\n\nAwesome @samansmink ! I was literally close to crying this week because I just kept going around in circles and had so many things going on and feel super bad that I haven't been able to be more concrete issue description up yet or put up some rudimentary PR...and then you just made my day \ud83d\ude47\u200d\u2642\ufe0f \r\n\r\nSidenote...I'm only desperate to get it working because I absolutely love DuckDB and now my whole team is super excited to start using all the data pipelines and scripts I have made flowing in and out of it.\r\n\r\nAnyways, thanks again for adding the instrumentation. I'm going to give this a shot later this weekend. I'll keep you posted\n@RXminuS ah no worries! the log output should give a pretty good idea of whats going wrong, then a fix should not be too difficult i think\nI've built DuckDB from source using `BUILD_PYTHON=1 make debug` and if I do a pip uninstall duckdb I indeed see\r\n![CleanShot 2023-01-23 at 15 49 10@2x](https://user-images.githubusercontent.com/3949285/214069515-51e545db-d165-4d25-b1bc-c7613fa0b3b2.png)\r\n\r\nBut when running from python I'm not seeing any additional logs. Do I need to add a make flag or is there a dump saved somewhere?\r\n![CleanShot 2023-01-23 at 15 45 51@2x](https://user-images.githubusercontent.com/3949285/214068812-ba47607a-edf7-40ae-8403-e3e85ce0c27d.png)\r\n\nPerhaps try running `pip uninstall` multiple times until it returns `WARNING: Skipping duckdb as it is not installed.` and then building from source? `pip` tends to keep multiple versions of the system around and it can lead to the wrong version being used by accident.\n@RXminuS ah could you run it with the duckdb cli instead? that would be:\r\n\r\n```\r\n./build/debug/duckdb <some path to where the db will be created>\r\n```\r\n\nOh derp! I cloned your repo but forgot to switch branches \ud83e\udd26 Will rebuild now\nGeez...the logs are already > 1GB and it's still going (that' just logging \"HasEnoughSpace\" etc.) How can I best send this?\n@RXminuS  ah sorry my bad, I should have mentioned this, im only interested in the tail of this log right before the crash. During FSST compression we need to \"fill up\" memory blocks. To do this we repeatedly call the `HasEnoughSpace` method to confirm the data we want to add still fits. During finalize however, the code somehow gets to a different total size than during the compression.\r\n\r\nSo if you could send me the last 1000 lines or so? \r\nwhat i need is the last few logs of the `HasEnoughSpace` and the `Finalize` logs right before the crash. I'm hoping that there's going to be a discrepancy between those two that shows which variable is corrupted/wrong\r\n\r\n\n```\r\n33=HasEnoughSpace (len: 0, max_len: 4, req_width: 493)\r\nHasEnoughSpace (len: , HasEnoughSpace (len: 00, max_len: , max_len: 1520, req_width: 0, offset_size: 0, , seg_count: req_width: offset_size: 1496428476, , seg_count: space_calc: 39878, space_calc: 1616+2+14964++0+0+0+320=+4822=15004)\r\nHasEnoughSpace (len: )\r\n0HasEnoughSpace (len: 0, max_len: 15, req_width: , max_len: 0, offset_size: 4, 0req_width: 30, , seg_count: 28477, space_calc: offset_size: 16+0+0+0+32=1496448, )\r\nSUMMARY: AddressSanitizer: heap-buffer-overflow bitpacking.cpp:76 in std::__1::enable_if<(((unsigned short)6) + ((unsigned short)30)) >= ((unsigned char)32), void>::type duckdb_fastpforlib::internal::pack_single_in<unsigned int, (unsigned short)6, (unsigned short)30, 63u, (unsigned char)32>(unsigned int, unsigned int*&)\r\nHasEnoughSpace (len: seg_count: 0, max_len: 15, req_width: 398790, , offset_size: space_calc: , offset_size: 0, 0, seg_count: seg_count: 2847887001, space_calc: 16, +space_calc: 0+0+0+16+32=48)\r\n16+HasEnoughSpace (len: 2+14964+0+22=15004)\r\nHasEnoughSpace (len: 00, max_len: 4+00+0+33=49)\r\n, max_len: HasEnoughSpace (len: 0, max_len: 20, req_width: 0, offset_size: 150, seg_count: , req_width: , 3, req_width: offset_size: 014964, , seg_count: offset_size: 0, 8700239880, space_calc: , space_calc: 16seg_count: 28479, space_calc: 16++0+00++00+0+33=49)\r\n+HasEnoughSpace (len: 0, max_len: 20, req_width: 0, 32=16+48offset_size: 0, seg_count: 87003, space_calc: )\r\nHasEnoughSpace (len: 160, max_len: 15+, 2+14964+req_width: 00, +offset_size: 0, 0seg_count: +28480, space_calc: 16+0+0+00++32=480)\r\nHasEnoughSpace (len: 22=15004)\r\n0, max_len: +1533=49)\r\nHasEnoughSpace (len: , 0, max_len: req_width: HasEnoughSpace (len: 0, max_len: 4, req_width: 3, 0, 20, req_width: 0, offset_size: offset_size: 0, seg_count: 0, seg_count: offset_size: 14964, 87004, space_calc: 16+0+0+0+33seg_count: 28481=39881, space_calc: 4916, space_calc: +16+20+14964+0+22=15004)\r\nHasEnoughSpace (len: +)\r\n0, max_len: HasEnoughSpace (len: 40, 0+, max_len: 20, req_width: 0, offset_size: 00+32=48)\r\nHasEnoughSpace (len: , req_width: 0, max_len: 153, offset_size: 14964, seg_count: 39882, , req_width: seg_count: 087005, space_calc: 16+0+0, space_calc: 16+offset_size: +2+00, seg_count: +28482, space_calc: 16+14964+330=+49)\r\nHasEnoughSpace (len: 0, max_len: 20, 0+req_width: 0+22=0+3215004)\r\n=48)\r\n0, offset_size: 0, seg_count: 87006HasEnoughSpace (len: HasEnoughSpace (len: 0, max_len: 15, 0req_width: , space_calc: 16+, max_len: 400+, 0+0+33=49)\r\nHasEnoughSpace (len: offset_size: 0, max_len: , req_width: 0, seg_count: 28483, space_calc: 16+0320, req_width: +0, , 0+offset_size: offset_size: 00, 14964seg_count: 87007, space_calc: 16, +0+0+seg_count: 0+33=49)\r\nHasEnoughSpace (len: 39883+, space_calc: 0, max_len: 16+20, req_width: 032=, offset_size: 480)\r\n, HasEnoughSpace (len: 0, max_len: 15, seg_count: 2+87008, req_width: 14964+0+22=15004)\r\nHasEnoughSpace (len: 0space_calc: , offset_size: 016, seg_count: +28484, 0space_calc: +160+0++0+0+0+3332==0, max_len: 48)\r\nHasEnoughSpace (len: 490, max_len: 15)\r\nHasEnoughSpace (len: 0, max_len: , req_width: 4, req_width: 0, 203, offset_size: , req_width: offset_size: 149640, seg_count: , 0, 39884offset_size: 0, seg_count: seg_count: 2848587009, , space_calc: space_calc: 1616++0, 0+space_calc: 160+0++330=+490)\r\n+32=48)\r\nShadow bytes around the buggy address:\r\n  0x10005d2f52b0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\r\n  0x10005d2f52c0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\r\n  0x10005d2f52d0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\r\n  0x10005d2f52e0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\r\n  0x10005d2f52f0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\r\n=>0x10005d2f5300:[fa]fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\r\n  0x10005d2f5310: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\r\n  0x10005d2f5320: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\r\n  0x10005d2f5330: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\r\n  0x10005d2f5340: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\r\n  0x10005d2f5350: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\r\nShadow byte legend (one shadow byte represents 8 application bytes):\r\n  Addressable:           00\r\n  Partially addressable: 01 02 03 04 05 06 07\r\n  Heap left redzone:       fa\r\n  Freed heap region:       fd\r\n  Stack left redzone:      f1\r\n  Stack mid redzone:       f2\r\n  Stack right redzone:     f3\r\n  Stack after return:      f5\r\n  Stack use after scope:   f8\r\n  Global redzone:          f9\r\n  Global init order:       f6\r\n  Poisoned by user:        f7\r\n  Container overflow:      fc\r\n  Array cookie:            ac\r\n  Intra object redzone:    bb\r\n  ASan internal:           fe\r\n  Left alloca redzone:     ca\r\n  Right alloca redzone:    cb\r\nHasEnoughSpace (len: +0, max_len: 15, req_width: 0, 2offset_size: 0, seg_count: +28486, 14964space_calc: +16+00++220=+150040+)\r\n32HasEnoughSpace (len: 0, max_len: 4=, req_width: 3, 48)\r\nHasEnoughSpace (len: 0HasEnoughSpace (len: offset_size: , max_len: 20, req_width: 0, offset_size: 0, seg_count: 87010, space_calc: 16+0+0+149640, max_len: , 15, seg_count: req_width: 0, offset_size: 039885, space_calc: 16+2+14964+0+22, seg_count: 028487=15004)\r\nHasEnoughSpace (len: 0, , max_len: space_calc: 4, req_width: 3, 16offset_size: +14964, 0seg_count: +39886, 0+space_calc: 33=1649)\r\nHasEnoughSpace (len: +00, max_len: 20, +2+14964+32+0+=22=4815004)\r\nHasEnoughSpace (len: 0, max_len: 4, req_width: 3, offset_size: 14964, seg_count: 39887, space_calc: 16+2+14964+0+22=15004)\r\nreq_width: )\r\nHasEnoughSpace (len: 0HasEnoughSpace (len: , max_len: 0, max_len: 04, , req_width: offset_size: 3, offset_size: 0, 1496415, seg_count: 39888, space_calc: seg_count: 1687011, space_calc: 16+0++2+14964, 0+0+22=15004)\r\nHasEnoughSpace (len: +00, max_len: +4, 33req_width: 3, offset_size: req_width: =49)\r\n0, 14964HasEnoughSpace (len: 0offset_size: , seg_count: 39889, space_calc: , max_len: 20, req_width: 0, offset_size: 0, 0, seg_count: 16+2+28488, 14964space_calc: 16+0++seg_count: 0087012+22=15004, +0+32=48)\r\nspace_calc: HasEnoughSpace (len: 0, max_len: 15, req_width: 16+00, +0offset_size: +00, +seg_count: 33)\r\nHasEnoughSpace (len: 0, max_len: 4, req_width: 3, offset_size: 14964, seg_count: 39890, space_calc: 16+2+14964+0+22=15004=49)\r\n28489)\r\nHasEnoughSpace (len: HasEnoughSpace (len: 0, max_len: 4, req_width: 3, 0offset_size: 14964, seg_count: , max_len: 3989120, , space_calc: req_width: 016, +offset_size: 2+14964+0+0, seg_count: 87013, 22, =15004)\r\nHasEnoughSpace (len: 0, max_len: 4, space_calc: 16+0+req_width: 3, offset_size: space_calc: 160+0++014964, seg_count: 3239892, space_calc: 16+2++14964+0+22=15004)\r\n0+=48)\r\nHasEnoughSpace (len: 00, max_len: 15, req_width: 0, +HasEnoughSpace (len: 33=49)\r\nHasEnoughSpace (len: 0, max_len: 0, max_len: 20, offset_size: 0, seg_count: 28490, space_calc: 4req_width: , req_width: 16+30, , 0+0+0offset_size: offset_size: 0, seg_count: +1496432=48)\r\nHasEnoughSpace (len: 0, max_len: 15, req_width: 0, 87014, space_calc: 16seg_count: +398930+0+0+33=49)\r\nHasEnoughSpace (len: , , offset_size: space_calc: 0, max_len: 16020, req_width: 0, offset_size: 0, , +2+seg_count: 14964+28491, space_calc: 16+0seg_count: 87015, +space_calc: 220+=0+150040)\r\n16+0+0+0+33=49)\r\nHasEnoughSpace (len: 0, max_len: 20HasEnoughSpace (len: +0, max_len: 4, , req_width: 320, =offset_size: req_width: 3, offset_size: 1496448)\r\nHasEnoughSpace (len: 0, seg_count: 39894, 0, max_len: , seg_count: 15, 87016req_width: space_calc: 0, offset_size: 160, +seg_count: , space_calc: 2+16+149640++0+22=15004028492+0+33, )\r\nHasEnoughSpace (len: =490, max_len: 4, req_width: 3, offset_size: 14964, seg_count: 39895, space_calc: 16+2+14964+0+22=15004)\r\nspace_calc: HasEnoughSpace (len: )\r\n16+0, max_len: 04HasEnoughSpace (len: , req_width: 3, offset_size: 14964, seg_count: +00+0+, max_len: 32=20, 48)\r\nHasEnoughSpace (len: req_width: 00, 39896offset_size: , space_calc: 016+, 2+seg_count: , max_len: 87017, space_calc: 16+0+0+0+33=154914964, req_width: 0, offset_size: 0, seg_count: +028493)\r\n, HasEnoughSpace (len: 0, max_len: 20, req_width: +space_calc: 0, offset_size: 2216=15004)\r\n0, seg_count: 87018, space_calc: +HasEnoughSpace (len: 0, max_len: 4, req_width: 3, offset_size: 14964, seg_count: 01639897+0+0+0+, 33space_calc: =16+2+14964+0+0+0+3249)\r\n+22==15004)\r\n48)\r\nHasEnoughSpace (len: HasEnoughSpace (len: HasEnoughSpace (len: 0, max_len: 4, req_width: 0, max_len: 315, offset_size: , 14964req_width: , seg_count: 0, max_len: 20, req_width: 0, 0, offset_size: 0, seg_count: 28494, space_calc: 16+0+0+0+39898offset_size: 0, seg_count: , space_calc: 16+2+14964+0+22=15004)\r\n87019, 32=48)\r\nHasEnoughSpace (len: space_calc: 160, max_len: 15, req_width: 0+, HasEnoughSpace (len: offset_size: 000+0+0+33, max_len: , seg_count: 428495, =space_calc: 4916)\r\nHasEnoughSpace (len: 0, +, max_len: 20, req_width: 0, offset_size: 0+0+00+req_width: 32=3, offset_size: 14964, , seg_count: seg_count: 8702039899, , space_calc: space_calc: 1616++0248+0+0+33=49)\r\n)\r\nHasEnoughSpace (len: +0, max_len: 1514964, req_width: 0, HasEnoughSpace (len: +0, max_len: 20, req_width: 0, offset_size: 0, seg_count: 87021, space_calc: 16+0+0+0+33=0offset_size: 49)\r\nHasEnoughSpace (len: 0, max_len: 20, req_width: 0, offset_size: 00+, 22, seg_count: 87022, space_calc: 16+0+0+seg_count: 0+33=49)\r\nHasEnoughSpace (len: 284960, max_len: =, space_calc: 2015004)\r\n, HasEnoughSpace (len: 0, max_len: 16+0+0+req_width: 0, offset_size: 0, seg_count: 87023, 0+32=48)\r\nHasEnoughSpace (len: 0, max_len: 15, req_width: 0, offset_size: 04space_calc: 16, req_width: +3, 0, +0+0+33seg_count: =49offset_size: 28497, space_calc: 16+0+014964+, seg_count: 39900)\r\nHasEnoughSpace (len: , 0space_calc: 0+16+2+14964+, max_len: 32=48)\r\n0+HasEnoughSpace (len: 0, max_len: 2220, =15004)\r\nHasEnoughSpace (len: 15, 0req_width: 0, max_len: req_width: 4, req_width: 3, 0, , offset_size: 0, seg_count: offset_size: 870240, , seg_count: offset_size: 28498, space_calc: 14964, seg_count: 1639901space_calc: +0, space_calc: 1616+0+0+32=48)\r\n==81109==ABORTING\r\nHasEnoughSpace (len: ++02++014964++0+330=49)\r\nH15EnoughSpace (len: 0, max_len: H15, req_width: 220=, max_len: 20, req_width: 150040)\r\n[1]    81109 abort      ./duckdb ../../../test.duckdb\r\n```\nIs that helpful at all? I've saved the entire log (7GB) so let me know if you need me to aggregate / filter / tail something else. At least small win...I've finally been able to provide some actual debug information \ud83c\udf89 \ud83d\ude05\n@RXminuS sent you an email, lets move this discussion there to reduce the noise a bit :)",
  "created_at": "2023-01-26T11:59:31Z"
}