{
  "repo": "duckdb/duckdb",
  "pull_number": 8348,
  "instance_id": "duckdb__duckdb-8348",
  "issue_numbers": [
    "8321",
    "8321"
  ],
  "base_commit": "eeb87ed067971dbc5369c5f161c3899123eea3e6",
  "patch": "diff --git a/tools/pythonpkg/src/pandas/bind.cpp b/tools/pythonpkg/src/pandas/bind.cpp\nindex 47c43a48bcee..f0b80dbf9020 100644\n--- a/tools/pythonpkg/src/pandas/bind.cpp\n+++ b/tools/pythonpkg/src/pandas/bind.cpp\n@@ -9,13 +9,14 @@ namespace {\n \n struct PandasBindColumn {\n public:\n-\tPandasBindColumn(py::handle name, py::handle type, py::handle column) : name(name), type(type), handle(column) {\n+\tPandasBindColumn(py::handle name, py::handle type, py::object column)\n+\t    : name(name), type(type), handle(std::move(column)) {\n \t}\n \n public:\n \tpy::handle name;\n \tpy::handle type;\n-\tpy::handle handle;\n+\tpy::object handle;\n };\n \n struct PandasDataFrameBind {\n@@ -27,7 +28,7 @@ struct PandasDataFrameBind {\n \t}\n \tPandasBindColumn operator[](idx_t index) const {\n \t\tD_ASSERT(index < names.size());\n-\t\tauto column = getter(names[index]);\n+\t\tauto column = py::reinterpret_borrow<py::object>(getter(names[index]));\n \t\tauto type = types[index];\n \t\tauto name = names[index];\n \t\treturn PandasBindColumn(name, type, column);\n@@ -43,7 +44,7 @@ struct PandasDataFrameBind {\n \n }; // namespace\n \n-static LogicalType BindColumn(PandasBindColumn column_p, PandasColumnBindData &bind_data,\n+static LogicalType BindColumn(PandasBindColumn &column_p, PandasColumnBindData &bind_data,\n                               const ClientContext &context) {\n \tLogicalType column_type;\n \tauto &column = column_p.handle;\n@@ -132,7 +133,8 @@ void Pandas::Bind(const ClientContext &context, py::handle df_p, vector<PandasCo\n \t\tPandasColumnBindData bind_data;\n \n \t\tnames.emplace_back(py::str(df.names[col_idx]));\n-\t\tauto column_type = BindColumn(df[col_idx], bind_data, context);\n+\t\tauto column = df[col_idx];\n+\t\tauto column_type = BindColumn(column, bind_data, context);\n \n \t\treturn_types.push_back(column_type);\n \t\tbind_columns.push_back(std::move(bind_data));\n",
  "test_patch": "diff --git a/tools/pythonpkg/tests/fast/pandas/test_copy_on_write.py b/tools/pythonpkg/tests/fast/pandas/test_copy_on_write.py\nnew file mode 100644\nindex 000000000000..d6194984a5a0\n--- /dev/null\n+++ b/tools/pythonpkg/tests/fast/pandas/test_copy_on_write.py\n@@ -0,0 +1,44 @@\n+import duckdb\n+import pytest\n+import pandas\n+import datetime\n+\n+\n+# Make sure the variable get's properly reset even in case of error\n+@pytest.fixture(autouse=True)\n+def scoped_copy_on_write_setting():\n+    old_value = pandas.options.mode.copy_on_write\n+    pandas.options.mode.copy_on_write = True\n+    yield\n+    # Reset it at the end of the function\n+    pandas.options.mode.copy_on_write = old_value\n+    return\n+\n+\n+def convert_to_result(col):\n+    return [(x,) for x in col]\n+\n+\n+class TestCopyOnWrite(object):\n+    @pytest.mark.parametrize(\n+        'col',\n+        [\n+            ['a', 'b', 'this is a long string'],\n+            [1.2334, None, 234.12],\n+            [123234, -213123, 2324234],\n+            [datetime.date(1990, 12, 7), None, datetime.date(1940, 1, 13)],\n+            [datetime.datetime(2012, 6, 21, 13, 23, 45, 328), None],\n+        ],\n+    )\n+    def test_copy_on_write(self, col):\n+        assert pandas.options.mode.copy_on_write == True\n+        con = duckdb.connect()\n+        df_in = pandas.DataFrame(\n+            {\n+                'numbers': col,\n+            }\n+        )\n+        rel = con.sql('select * from df_in')\n+        res = rel.fetchall()\n+        expected = convert_to_result(col)\n+        assert res == expected\n",
  "problem_statement": "Segfault with pandas copy on write\n### What happens?\n\nDuckDB crashes with a segmentation fault if it is passed a pandas `DataFrame` that uses copy-on-write, even if the `DataFrame` hasn't actually had any copies made.\r\n\r\nThis has been observed in GitHub Actions on Linux, on an Ubuntu developer machine and on M1 macOS.\n\n### To Reproduce\n\n`demo.py`:\r\n``` python\r\nimport faulthandler\r\n\r\nimport duckdb\r\nimport pandas as pd\r\n\r\nfaulthandler.enable()\r\n\r\npd.options.mode.copy_on_write = True  # setting this to False or omitting avoids the crash\r\n\r\nx = pd.DataFrame({\r\n    'foo': [3],\r\n})\r\n\r\nprint(\"Duck!\")\r\nduckdb.query(\"SELECT x.foo FROM x\")\r\n```\r\n\r\n``` shell\r\npython3.11 -m venv venv\r\n. venv/bin/activate\r\npip install pandas==2.0.3 duckdb==0.8.1\r\npython demo.py\r\n```\n\n### OS:\n\nUbuntu 22.04.2 LTS (x86-64); macOS M1\n\n### DuckDB Version:\n\n0.8.1; 0.8.2.dev1862\n\n### DuckDB Client:\n\nPython\n\n### Full Name:\n\nPeter Law\n\n### Affiliation:\n\nMarks & Spencer\n\n### Have you tried this on the latest `master` branch?\n\n- [X] I agree\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] I agree\nSegfault with pandas copy on write\n### What happens?\n\nDuckDB crashes with a segmentation fault if it is passed a pandas `DataFrame` that uses copy-on-write, even if the `DataFrame` hasn't actually had any copies made.\r\n\r\nThis has been observed in GitHub Actions on Linux, on an Ubuntu developer machine and on M1 macOS.\n\n### To Reproduce\n\n`demo.py`:\r\n``` python\r\nimport faulthandler\r\n\r\nimport duckdb\r\nimport pandas as pd\r\n\r\nfaulthandler.enable()\r\n\r\npd.options.mode.copy_on_write = True  # setting this to False or omitting avoids the crash\r\n\r\nx = pd.DataFrame({\r\n    'foo': [3],\r\n})\r\n\r\nprint(\"Duck!\")\r\nduckdb.query(\"SELECT x.foo FROM x\")\r\n```\r\n\r\n``` shell\r\npython3.11 -m venv venv\r\n. venv/bin/activate\r\npip install pandas==2.0.3 duckdb==0.8.1\r\npython demo.py\r\n```\n\n### OS:\n\nUbuntu 22.04.2 LTS (x86-64); macOS M1\n\n### DuckDB Version:\n\n0.8.1; 0.8.2.dev1862\n\n### DuckDB Client:\n\nPython\n\n### Full Name:\n\nPeter Law\n\n### Affiliation:\n\nMarks & Spencer\n\n### Have you tried this on the latest `master` branch?\n\n- [X] I agree\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] I agree\n",
  "hints_text": "\n",
  "created_at": "2023-07-24T13:29:40Z"
}