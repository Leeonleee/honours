{
  "repo": "duckdb/duckdb",
  "pull_number": 3547,
  "instance_id": "duckdb__duckdb-3547",
  "issue_numbers": [
    "3273"
  ],
  "base_commit": "463e45ba98754b0e2fdc8bc5b1481dfbc7a7398d",
  "patch": "diff --git a/src/include/duckdb/common/field_writer.hpp b/src/include/duckdb/common/field_writer.hpp\nindex df3b1b5a3b51..50486f301a5c 100644\n--- a/src/include/duckdb/common/field_writer.hpp\n+++ b/src/include/duckdb/common/field_writer.hpp\n@@ -199,7 +199,7 @@ class FieldReader {\n \t}\n \n \ttemplate <class T, class RETURN_TYPE = unique_ptr<T>, typename... ARGS>\n-\tRETURN_TYPE ReadSerializable(RETURN_TYPE default_value, ARGS &&... args) {\n+\tRETURN_TYPE ReadSerializable(RETURN_TYPE default_value, ARGS &&...args) {\n \t\tif (field_count >= max_field_count) {\n \t\t\t// field is not there, read the default value\n \t\t\treturn default_value;\n@@ -221,7 +221,7 @@ class FieldReader {\n \t}\n \n \ttemplate <class T, class RETURN_TYPE = unique_ptr<T>, typename... ARGS>\n-\tRETURN_TYPE ReadRequiredSerializable(ARGS &&... args) {\n+\tRETURN_TYPE ReadRequiredSerializable(ARGS &&...args) {\n \t\tif (field_count >= max_field_count) {\n \t\t\t// field is not there, read the default value\n \t\t\tthrow SerializationException(\"Attempting to read mandatory field, but field is missing\");\ndiff --git a/tools/jdbc/src/jni/duckdb_java.cpp b/tools/jdbc/src/jni/duckdb_java.cpp\nindex 978b3d0e0194..ee3eada0bdb5 100644\n--- a/tools/jdbc/src/jni/duckdb_java.cpp\n+++ b/tools/jdbc/src/jni/duckdb_java.cpp\n@@ -273,8 +273,38 @@ JNIEXPORT jobject JNICALL Java_org_duckdb_DuckDBNative_duckdb_1jdbc_1prepare(JNI\n \n \tauto query = byte_array_to_string(env, query_j);\n \n+\t// invalid sql raises a parse exception\n+\t// need to be caught and thrown via JNI\n+\tvector<unique_ptr<SQLStatement>> statements;\n+\ttry {\n+\t\tstatements = conn_ref->ExtractStatements(query.c_str());\n+\t} catch (const std::exception &e) {\n+\t\tenv->ThrowNew(J_SQLException, e.what());\n+\t\treturn nullptr;\n+\t}\n+\n+\tif (statements.empty()) {\n+\t\tenv->ThrowNew(J_SQLException, \"No statements to execute.\");\n+\t\treturn nullptr;\n+\t}\n+\n+\t// if there are multiple statements, we directly execute the statements besides the last one\n+\t// we only return the result of the last statement to the user, unless one of the previous statements fails\n+\tfor (idx_t i = 0; i + 1 < statements.size(); i++) {\n+\t\ttry {\n+\t\t\tauto res = conn_ref->Query(move(statements[i]));\n+\t\t\tif (!res->success) {\n+\t\t\t\tenv->ThrowNew(J_SQLException, res->error.c_str());\n+\t\t\t\treturn nullptr;\n+\t\t\t}\n+\t\t} catch (const std::exception &ex) {\n+\t\t\tenv->ThrowNew(J_SQLException, ex.what());\n+\t\t\treturn nullptr;\n+\t\t}\n+\t}\n+\n \tauto stmt_ref = new StatementHolder();\n-\tstmt_ref->stmt = conn_ref->Prepare(query);\n+\tstmt_ref->stmt = conn_ref->Prepare(move(statements.back()));\n \tif (!stmt_ref->stmt->success) {\n \t\tstring error_msg = string(stmt_ref->stmt->error);\n \t\tstmt_ref->stmt = nullptr;\n",
  "test_patch": "diff --git a/tools/jdbc/src/test/java/org/duckdb/test/TestDuckDBJDBC.java b/tools/jdbc/src/test/java/org/duckdb/test/TestDuckDBJDBC.java\nindex 5ff42089b2f0..c3c77b8d5224 100644\n--- a/tools/jdbc/src/test/java/org/duckdb/test/TestDuckDBJDBC.java\n+++ b/tools/jdbc/src/test/java/org/duckdb/test/TestDuckDBJDBC.java\n@@ -236,7 +236,7 @@ public static void test_enum() throws Exception {\n \t\tStatement stmt = conn.createStatement();\n \n \t\tResultSet rs;\n-\t\n+\n \t\t// Test 8 bit enum + different access ways\n \t\tstmt.execute(\"CREATE TYPE enum_test AS ENUM ('Enum1', 'enum2', '1\u00fc\u00f6\u00f1');\");\n \t\tstmt.execute(\"CREATE TABLE t (id INT, e1 enum_test);\");\n@@ -278,40 +278,40 @@ public static void test_enum() throws Exception {\n \t\trs.close();\n \n \t\t// Test 16 bit enum\n-\t\tstmt.execute(\"CREATE TYPE enum_long AS ENUM ('enum0' ,'enum1' ,'enum2' ,'enum3' ,'enum4' ,'enum5' ,'enum6'\" \n-\t\t+ \",'enum7' ,'enum8' ,'enum9' ,'enum10' ,'enum11' ,'enum12' ,'enum13' ,'enum14' ,'enum15' ,'enum16' ,'enum17'\" \n-\t\t+ \",'enum18' ,'enum19' ,'enum20' ,'enum21' ,'enum22' ,'enum23' ,'enum24' ,'enum25' ,'enum26' ,'enum27' ,'enum28'\" \n-\t\t+ \",'enum29' ,'enum30' ,'enum31' ,'enum32' ,'enum33' ,'enum34' ,'enum35' ,'enum36' ,'enum37' ,'enum38' ,'enum39'\" \n-\t\t+ \",'enum40' ,'enum41' ,'enum42' ,'enum43' ,'enum44' ,'enum45' ,'enum46' ,'enum47' ,'enum48' ,'enum49' ,'enum50'\" \n-\t\t+ \",'enum51' ,'enum52' ,'enum53' ,'enum54' ,'enum55' ,'enum56' ,'enum57' ,'enum58' ,'enum59' ,'enum60' ,'enum61'\" \n-\t\t+ \",'enum62' ,'enum63' ,'enum64' ,'enum65' ,'enum66' ,'enum67' ,'enum68' ,'enum69' ,'enum70' ,'enum71' ,'enum72'\" \n-\t\t+ \",'enum73' ,'enum74' ,'enum75' ,'enum76' ,'enum77' ,'enum78' ,'enum79' ,'enum80' ,'enum81' ,'enum82' ,'enum83'\" \n-\t\t+ \",'enum84' ,'enum85' ,'enum86' ,'enum87' ,'enum88' ,'enum89' ,'enum90' ,'enum91' ,'enum92' ,'enum93' ,'enum94'\" \n+\t\tstmt.execute(\"CREATE TYPE enum_long AS ENUM ('enum0' ,'enum1' ,'enum2' ,'enum3' ,'enum4' ,'enum5' ,'enum6'\"\n+\t\t+ \",'enum7' ,'enum8' ,'enum9' ,'enum10' ,'enum11' ,'enum12' ,'enum13' ,'enum14' ,'enum15' ,'enum16' ,'enum17'\"\n+\t\t+ \",'enum18' ,'enum19' ,'enum20' ,'enum21' ,'enum22' ,'enum23' ,'enum24' ,'enum25' ,'enum26' ,'enum27' ,'enum28'\"\n+\t\t+ \",'enum29' ,'enum30' ,'enum31' ,'enum32' ,'enum33' ,'enum34' ,'enum35' ,'enum36' ,'enum37' ,'enum38' ,'enum39'\"\n+\t\t+ \",'enum40' ,'enum41' ,'enum42' ,'enum43' ,'enum44' ,'enum45' ,'enum46' ,'enum47' ,'enum48' ,'enum49' ,'enum50'\"\n+\t\t+ \",'enum51' ,'enum52' ,'enum53' ,'enum54' ,'enum55' ,'enum56' ,'enum57' ,'enum58' ,'enum59' ,'enum60' ,'enum61'\"\n+\t\t+ \",'enum62' ,'enum63' ,'enum64' ,'enum65' ,'enum66' ,'enum67' ,'enum68' ,'enum69' ,'enum70' ,'enum71' ,'enum72'\"\n+\t\t+ \",'enum73' ,'enum74' ,'enum75' ,'enum76' ,'enum77' ,'enum78' ,'enum79' ,'enum80' ,'enum81' ,'enum82' ,'enum83'\"\n+\t\t+ \",'enum84' ,'enum85' ,'enum86' ,'enum87' ,'enum88' ,'enum89' ,'enum90' ,'enum91' ,'enum92' ,'enum93' ,'enum94'\"\n \t\t+ \",'enum95' ,'enum96' ,'enum97' ,'enum98' ,'enum99' ,'enum100' ,'enum101' ,'enum102' ,'enum103' ,'enum104' \"\n-\t\t+ \",'enum105' ,'enum106' ,'enum107' ,'enum108' ,'enum109' ,'enum110' ,'enum111' ,'enum112' ,'enum113' ,'enum114'\" \n-\t\t+ \",'enum115' ,'enum116' ,'enum117' ,'enum118' ,'enum119' ,'enum120' ,'enum121' ,'enum122' ,'enum123' ,'enum124'\" \n-\t\t+ \",'enum125' ,'enum126' ,'enum127' ,'enum128' ,'enum129' ,'enum130' ,'enum131' ,'enum132' ,'enum133' ,'enum134'\" \n-\t\t+ \",'enum135' ,'enum136' ,'enum137' ,'enum138' ,'enum139' ,'enum140' ,'enum141' ,'enum142' ,'enum143' ,'enum144'\" \n-\t\t+ \",'enum145' ,'enum146' ,'enum147' ,'enum148' ,'enum149' ,'enum150' ,'enum151' ,'enum152' ,'enum153' ,'enum154'\" \n-\t\t+ \",'enum155' ,'enum156' ,'enum157' ,'enum158' ,'enum159' ,'enum160' ,'enum161' ,'enum162' ,'enum163' ,'enum164'\" \n-\t\t+ \",'enum165' ,'enum166' ,'enum167' ,'enum168' ,'enum169' ,'enum170' ,'enum171' ,'enum172' ,'enum173' ,'enum174'\" \n-\t\t+ \",'enum175' ,'enum176' ,'enum177' ,'enum178' ,'enum179' ,'enum180' ,'enum181' ,'enum182' ,'enum183' ,'enum184'\" \n-\t\t+ \",'enum185' ,'enum186' ,'enum187' ,'enum188' ,'enum189' ,'enum190' ,'enum191' ,'enum192' ,'enum193' ,'enum194'\" \n-\t\t+ \",'enum195' ,'enum196' ,'enum197' ,'enum198' ,'enum199' ,'enum200' ,'enum201' ,'enum202' ,'enum203' ,'enum204'\" \n-\t\t+ \",'enum205' ,'enum206' ,'enum207' ,'enum208' ,'enum209' ,'enum210' ,'enum211' ,'enum212' ,'enum213' ,'enum214'\" \n-\t\t+ \",'enum215' ,'enum216' ,'enum217' ,'enum218' ,'enum219' ,'enum220' ,'enum221' ,'enum222' ,'enum223' ,'enum224'\" \n-\t\t+ \",'enum225' ,'enum226' ,'enum227' ,'enum228' ,'enum229' ,'enum230' ,'enum231' ,'enum232' ,'enum233' ,'enum234'\" \n-\t\t+ \",'enum235' ,'enum236' ,'enum237' ,'enum238' ,'enum239' ,'enum240' ,'enum241' ,'enum242' ,'enum243' ,'enum244'\" \n-\t\t+ \",'enum245' ,'enum246' ,'enum247' ,'enum248' ,'enum249' ,'enum250' ,'enum251' ,'enum252' ,'enum253' ,'enum254'\" \n-\t\t+ \",'enum255' ,'enum256' ,'enum257' ,'enum258' ,'enum259' ,'enum260' ,'enum261' ,'enum262' ,'enum263' ,'enum264'\" \n-\t\t+ \",'enum265' ,'enum266' ,'enum267' ,'enum268' ,'enum269' ,'enum270' ,'enum271' ,'enum272' ,'enum273' ,'enum274'\" \n-\t\t+ \",'enum275' ,'enum276' ,'enum277' ,'enum278' ,'enum279' ,'enum280' ,'enum281' ,'enum282' ,'enum283' ,'enum284'\" \n-\t\t+ \",'enum285' ,'enum286' ,'enum287' ,'enum288' ,'enum289' ,'enum290' ,'enum291' ,'enum292' ,'enum293' ,'enum294'\" \n+\t\t+ \",'enum105' ,'enum106' ,'enum107' ,'enum108' ,'enum109' ,'enum110' ,'enum111' ,'enum112' ,'enum113' ,'enum114'\"\n+\t\t+ \",'enum115' ,'enum116' ,'enum117' ,'enum118' ,'enum119' ,'enum120' ,'enum121' ,'enum122' ,'enum123' ,'enum124'\"\n+\t\t+ \",'enum125' ,'enum126' ,'enum127' ,'enum128' ,'enum129' ,'enum130' ,'enum131' ,'enum132' ,'enum133' ,'enum134'\"\n+\t\t+ \",'enum135' ,'enum136' ,'enum137' ,'enum138' ,'enum139' ,'enum140' ,'enum141' ,'enum142' ,'enum143' ,'enum144'\"\n+\t\t+ \",'enum145' ,'enum146' ,'enum147' ,'enum148' ,'enum149' ,'enum150' ,'enum151' ,'enum152' ,'enum153' ,'enum154'\"\n+\t\t+ \",'enum155' ,'enum156' ,'enum157' ,'enum158' ,'enum159' ,'enum160' ,'enum161' ,'enum162' ,'enum163' ,'enum164'\"\n+\t\t+ \",'enum165' ,'enum166' ,'enum167' ,'enum168' ,'enum169' ,'enum170' ,'enum171' ,'enum172' ,'enum173' ,'enum174'\"\n+\t\t+ \",'enum175' ,'enum176' ,'enum177' ,'enum178' ,'enum179' ,'enum180' ,'enum181' ,'enum182' ,'enum183' ,'enum184'\"\n+\t\t+ \",'enum185' ,'enum186' ,'enum187' ,'enum188' ,'enum189' ,'enum190' ,'enum191' ,'enum192' ,'enum193' ,'enum194'\"\n+\t\t+ \",'enum195' ,'enum196' ,'enum197' ,'enum198' ,'enum199' ,'enum200' ,'enum201' ,'enum202' ,'enum203' ,'enum204'\"\n+\t\t+ \",'enum205' ,'enum206' ,'enum207' ,'enum208' ,'enum209' ,'enum210' ,'enum211' ,'enum212' ,'enum213' ,'enum214'\"\n+\t\t+ \",'enum215' ,'enum216' ,'enum217' ,'enum218' ,'enum219' ,'enum220' ,'enum221' ,'enum222' ,'enum223' ,'enum224'\"\n+\t\t+ \",'enum225' ,'enum226' ,'enum227' ,'enum228' ,'enum229' ,'enum230' ,'enum231' ,'enum232' ,'enum233' ,'enum234'\"\n+\t\t+ \",'enum235' ,'enum236' ,'enum237' ,'enum238' ,'enum239' ,'enum240' ,'enum241' ,'enum242' ,'enum243' ,'enum244'\"\n+\t\t+ \",'enum245' ,'enum246' ,'enum247' ,'enum248' ,'enum249' ,'enum250' ,'enum251' ,'enum252' ,'enum253' ,'enum254'\"\n+\t\t+ \",'enum255' ,'enum256' ,'enum257' ,'enum258' ,'enum259' ,'enum260' ,'enum261' ,'enum262' ,'enum263' ,'enum264'\"\n+\t\t+ \",'enum265' ,'enum266' ,'enum267' ,'enum268' ,'enum269' ,'enum270' ,'enum271' ,'enum272' ,'enum273' ,'enum274'\"\n+\t\t+ \",'enum275' ,'enum276' ,'enum277' ,'enum278' ,'enum279' ,'enum280' ,'enum281' ,'enum282' ,'enum283' ,'enum284'\"\n+\t\t+ \",'enum285' ,'enum286' ,'enum287' ,'enum288' ,'enum289' ,'enum290' ,'enum291' ,'enum292' ,'enum293' ,'enum294'\"\n \t\t+ \",'enum295' ,'enum296' ,'enum297' ,'enum298' ,'enum299');\");\n-\t\t\n+\n \t\tstmt.execute(\"CREATE TABLE t2 (id INT, e1 enum_long);\");\n \t\tstmt.execute(\"INSERT INTO t2 (id, e1) VALUES (1, 'enum290');\");\n-\t\n+\n \t\tps = conn.prepareStatement(\"SELECT e1 FROM t2 WHERE id = ?\");\n \t\tps.setObject(1, 1);\n \t\trs = ps.executeQuery();\n@@ -328,7 +328,7 @@ public static void test_timestamp_tz() throws Exception {\n \t\tStatement stmt = conn.createStatement();\n \n \t\tResultSet rs;\n-\t\t\n+\n \t\tstmt.execute(\"CREATE TABLE t (id INT, t1 TIMESTAMPTZ)\");\n \t\tstmt.execute(\"INSERT INTO t (id, t1) VALUES (1, '2022-01-01T12:11:10+02')\");\n \t\tstmt.execute(\"INSERT INTO t (id, t1) VALUES (2, '2022-01-01T12:11:10')\");\n@@ -565,7 +565,7 @@ public static void test_duckdb_timestamp() throws Exception {\n \t\tduckdb_timestamp_test();\n \n \t\t// Store default time zone\n-\t\tTimeZone defaultTZ = TimeZone.getDefault(); \n+\t\tTimeZone defaultTZ = TimeZone.getDefault();\n \n \t\t// Test with different time zones\n \t\tTimeZone.setDefault(TimeZone.getTimeZone(\"America/Lima\"));\n@@ -596,7 +596,7 @@ public static void duckdb_timestamp_test() throws Exception {\n \t\tTimestamp cts2 = new DuckDBTimestamp(ts2).toSqlTimestamp();\n \t\tTimestamp cts3 = new DuckDBTimestamp(ts3).toSqlTimestamp();\n \t\tTimestamp cts4 = new DuckDBTimestamp(ts4).toSqlTimestamp();\n-\t\t\n+\n \t\tassertTrue(ts0.getTime() == cts0.getTime());\n \t\tassertTrue(ts0.compareTo(cts0) == 0);\n \t\tassertTrue(ts1.getTime() == cts1.getTime());\n@@ -615,14 +615,14 @@ public static void duckdb_timestamp_test() throws Exception {\n \t\tDuckDBTimestamp dts5 = new DuckDBTimestamp(ts2);\n \t\tassertTrue(dts5.toSqlTimestamp().compareTo(ts2) == 0);\n \n-\t\t// Insert and read a timestamp \n+\t\t// Insert and read a timestamp\n \t\tstmt.execute(\"INSERT INTO a (ts) VALUES ('2005-11-02 07:59:58')\");\n \t\tResultSet rs = stmt.executeQuery(\n \t\t\t\t\"SELECT * FROM a\");\n \t\tassertTrue(rs.next());\n \t\tassertEquals(rs.getObject(\"ts\"), Timestamp.valueOf(\"2005-11-02 07:59:58\"));\n \t\tassertEquals(rs.getTimestamp(\"ts\"), Timestamp.valueOf(\"2005-11-02 07:59:58\"));\n-\t\n+\n \t\trs.close();\n \t\tstmt.close();\n \n@@ -687,7 +687,7 @@ public static void test_duckdb_localdatetime() throws Exception {\n \t\tps1.setObject(1, ldt);\n \t\tps1.execute();\n \t\tps1.close();\n-\t\t\n+\n \t\tPreparedStatement ps2 = conn.prepareStatement(\"SELECT * FROM x\");\n \t\tResultSet rs2 = ps2.executeQuery();\n \n@@ -700,7 +700,7 @@ public static void test_duckdb_localdatetime() throws Exception {\n \t\tstmt.close();\n \t\tconn.close();\n \t}\n-\t\n+\n \tpublic static void test_duckdb_getObject_with_class() throws Exception {\n \t\tConnection conn = DriverManager.getConnection(\"jdbc:duckdb:\");\n \t\tStatement stmt = conn.createStatement();\n@@ -728,10 +728,10 @@ public static void test_duckdb_getObject_with_class() throws Exception {\n \t\tassertEquals(rs.getTimestamp(10), rs.getObject(10, Timestamp.class));\n \t\tassertEquals(rs.getObject(10, LocalDateTime.class), LocalDateTime.parse(\"1970-01-03T03:42:23\"));\n \t\tassertEquals(rs.getObject(10, LocalDateTime.class), LocalDateTime.of(1970,1,3,3,42,23));\n-\t\tassertEquals(rs.getBigDecimal(11), rs.getObject(11, BigDecimal.class)); \n-\t\tassertEquals(rs.getBigDecimal(12), rs.getObject(12, BigDecimal.class)); \n-\t\tassertEquals(rs.getBigDecimal(13), rs.getObject(13, BigDecimal.class)); \n-\t\tassertEquals(rs.getBigDecimal(14), rs.getObject(14, BigDecimal.class)); \n+\t\tassertEquals(rs.getBigDecimal(11), rs.getObject(11, BigDecimal.class));\n+\t\tassertEquals(rs.getBigDecimal(12), rs.getObject(12, BigDecimal.class));\n+\t\tassertEquals(rs.getBigDecimal(13), rs.getObject(13, BigDecimal.class));\n+\t\tassertEquals(rs.getBigDecimal(14), rs.getObject(14, BigDecimal.class));\n \n \t\t// Missing implementations, should never reach assertTrue(false)\n \t\ttry {\n@@ -745,19 +745,19 @@ public static void test_duckdb_getObject_with_class() throws Exception {\n \t\t\tassertTrue(false);\n \t\t}\n \t\tcatch (SQLException e) {}\n-\t\t\t\n+\n \t\ttry {\n \t\t\trs.getObject(13, Integer.class);\n \t\t\tassertTrue(false);\n \t\t}\n \t\tcatch (SQLException e) {}\n-\t\t\t\n+\n \t\ttry {\n \t\t\trs.getObject(14, Long.class);\n \t\t\tassertTrue(false);\n \t\t}\n \t\tcatch (SQLException e) {}\n-\t\t\t\n+\n \t\ttry {\n \t\t\trs.getObject(15, BigInteger.class);\n \t\t\tassertTrue(false);\n@@ -782,6 +782,38 @@ public static void test_duckdb_getObject_with_class() throws Exception {\n \t\tconn.close();\n \t}\n \n+\tpublic static void test_multiple_statements_execution() throws Exception {\n+\t\tConnection conn = (DuckDBConnection) DriverManager.getConnection(\"jdbc:duckdb:\");\n+\t\tStatement stmt = conn.createStatement();\n+\t\tResultSet rs = stmt\n+\t\t\t\t.executeQuery(\n+\t\t\t\t\t\t\"CREATE TABLE integers(i integer);\\n\" +\n+\t\t\t\t\t\t\t\t\"insert into integers select * from range(10);\" +\n+\t\t\t\t\t\t\t\t\"select * from integers;\");\n+\t\tint i = 0;\n+\t\twhile (rs.next()) {\n+\t\t\tassertEquals(rs.getInt(\"i\"), i);\n+\t\t\ti++;\n+\t\t}\n+\t\tassertEquals(i, 10);\n+\t}\n+\n+\tpublic static void test_multiple_statements_exception() throws Exception {\n+\t\tConnection conn = (DuckDBConnection) DriverManager.getConnection(\"jdbc:duckdb:\");\n+\t\tStatement stmt = conn.createStatement();\n+\t\tboolean succ = false;\n+\t\ttry {\n+\t\t\tstmt.executeQuery(\n+\t\t\t\t\t\"CREATE TABLE integers(i integer, i boolean);\\n\" +\n+\t\t\t\t\t\t\t\"CREATE TABLE integers2(i integer);\\n\" +\n+\t\t\t\t\t\t\t\"insert into integers2 select * from range(10);\\n\" +\n+\t\t\t\t\t\t\t\"select * from integers2;\");\n+\t\t\tsucc = true;\n+\t\t} catch (Exception ex) {\n+\t\t\tassertFalse(succ);\n+\t\t}\n+\t}\n+\n \tpublic static void test_bigdecimal() throws Exception {\n \t\tConnection conn = DriverManager.getConnection(\"jdbc:duckdb:\");\n \t\tStatement stmt = conn.createStatement();\n@@ -794,7 +826,7 @@ public static void test_bigdecimal() throws Exception {\n \t\tps1.setObject(4, new BigDecimal(\"99999999999.9999999\"));\n \t\tps1.setObject(5, new BigDecimal(\"9999999999999999999999999999.9999999999\"));\n \t\tps1.execute();\n-\t\t\n+\n \t\tps1.clearParameters();\n \t\tps1.setBigDecimal(1, new BigDecimal(\"2\"));\n \t\tps1.setBigDecimal(2, new BigDecimal(\"-999.9\"));\n@@ -825,11 +857,11 @@ public static void test_bigdecimal() throws Exception {\n \t\tResultSet rs = ps.executeQuery();\n \t\twhile (rs.next())\n \t\t{\n-\t\t\tassertEquals(rs.getBigDecimal(1), rs.getObject(1, BigDecimal.class)); \n-\t\t\tassertEquals(rs.getBigDecimal(2), rs.getObject(2, BigDecimal.class)); \n-\t\t\tassertEquals(rs.getBigDecimal(3), rs.getObject(3, BigDecimal.class)); \n-\t\t\tassertEquals(rs.getBigDecimal(4), rs.getObject(4, BigDecimal.class)); \n-\t\t\tassertEquals(rs.getBigDecimal(5), rs.getObject(5, BigDecimal.class)); \n+\t\t\tassertEquals(rs.getBigDecimal(1), rs.getObject(1, BigDecimal.class));\n+\t\t\tassertEquals(rs.getBigDecimal(2), rs.getObject(2, BigDecimal.class));\n+\t\t\tassertEquals(rs.getBigDecimal(3), rs.getObject(3, BigDecimal.class));\n+\t\t\tassertEquals(rs.getBigDecimal(4), rs.getObject(4, BigDecimal.class));\n+\t\t\tassertEquals(rs.getBigDecimal(5), rs.getObject(5, BigDecimal.class));\n \t\t}\n \n \t\trs.close();\n@@ -921,14 +953,14 @@ public static void test_lots_of_decimals() throws Exception {\n \n \t\tPreparedStatement ps1 = conn.prepareStatement(\"INSERT INTO q (id, dec32, dec64, dec128) VALUES (?, ?, ?, ?)\");\n \t\tps1.setObject(1, new BigDecimal(\"1\"));\n-\t\t\n+\n \t\tBigDecimal dec32_org = new BigDecimal(\"99999.9999\");\n \t\tBigDecimal dec64_org = new BigDecimal(\"99999999999.9999999\");\n \t\tBigDecimal dec128_org = new BigDecimal(\"9999999999999999999999999999.9999999999\");\n \n-\t\tps1.setObject(2, dec32_org); \n+\t\tps1.setObject(2, dec32_org);\n \t\tps1.setObject(3, dec64_org);\n-\t\tps1.setObject(4, dec128_org); \n+\t\tps1.setObject(4, dec128_org);\n \t\tps1.execute();\n \n \t\tPreparedStatement ps2 = conn.prepareStatement(\"SELECT * FROM q WHERE id = ?\");\n@@ -945,7 +977,7 @@ public static void test_lots_of_decimals() throws Exception {\n \t\t\tassertEquals(dec32_org, dec32);\n \t\t\tassertEquals(dec64_org, dec64);\n \t\t\tassertEquals(dec128_org, dec128);\n-\t\t\t\n+\n \t\t\tdec32 = rs.getBigDecimal(2);\n \t\t\tdec64 = rs.getBigDecimal(3);\n \t\t\tdec128 = rs.getBigDecimal(4);\n@@ -2102,4 +2134,4 @@ public static void main(String[] args) throws Exception {\n \t\t}\n \t\tSystem.out.println(\"OK\");\n \t}\n-}\n+}\n\\ No newline at end of file\n",
  "problem_statement": "JDBC import database error\n#### What happens?\r\nJDBC import database error\r\n\r\n#### To Reproduce\r\n`@Test \r\n   public void importDuckDB() throws SQLException, IOException { \r\n\r\n       final String EXPORT_SQL_TEMPLATE = \"EXPORT DATABASE '%s' (FORMAT PARQUET);\"; \r\n       String path = \"export\"; \r\n       File export = new File(path); \r\n       if (export.exists()) { \r\n           export.delete(); \r\n       } \r\n       export.mkdir(); \r\n       System.out.println(export.getAbsolutePath()); \r\n       try (Connection conn = DriverManager.getConnection(\"jdbc:duckdb:db001\"); Statement stmt = conn.createStatement();) { \r\n           stmt.execute(\"CREATE SCHEMA IF NOT EXISTS mydb\"); \r\n           stmt.execute(\"CREATE TABLE IF NOT EXISTS mydb.student(id INTEGER,name VARCHAR,PRIMARY KEY(id))\"); \r\n           stmt.execute(String.format(EXPORT_SQL_TEMPLATE, path)); \r\n       } \r\n\r\n       final String IMPORT_SQL_TEMPLATE = \"IMPORT DATABASE '%s';\"; \r\n\r\n       try (Connection conn = DriverManager.getConnection(\"jdbc:duckdb:db002\"); Statement stmt = conn.createStatement();) { \r\n           stmt.execute(String.format(IMPORT_SQL_TEMPLATE, path)); \r\n       } \r\n\r\n   }\r\n\r\nerror info:\r\njava.sql.SQLException: Cannot prepare multiple statements at once! \r\n\r\n     at org.duckdb.DuckDBNative.duckdb_jdbc_prepare(Native Method) \r\n     at org.duckdb.DuckDBPreparedStatement.prepare(DuckDBPreparedStatement.java:73) \r\n     at org.duckdb.DuckDBPreparedStatement.execute(DuckDBPreparedStatement.java:121)\r\n`\r\n\r\n#### Environment (please complete the following information):\r\n - OS: win10\r\n - DuckDB Version: 0.3.1\r\n - DuckDB Client: jdbc-0.3.1\r\n\n",
  "hints_text": "Thanks for using DuckDB! Does this same issue happen on version 0.3.2?\n\r\n\r\n> Thanks for using DuckDB! Does this same issue happen on version 0.3.2?\r\n\r\nyes,this same issue also  happen on version 0.3.2\nProbably needs something similar than in #1102 and #3107.\nIn any case, you could try to execute the statements in `schema.sql` and `load.sql` (generated by `EXPORT` to the same folder as exported tables) manually (or in a loop) one by one.",
  "created_at": "2022-05-01T01:59:50Z"
}