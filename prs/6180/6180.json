{
  "repo": "duckdb/duckdb",
  "pull_number": 6180,
  "instance_id": "duckdb__duckdb-6180",
  "issue_numbers": [
    "6160"
  ],
  "base_commit": "3ee9cbb0ea40212d326e2d147b08b1f569ed3f13",
  "patch": "diff --git a/tools/jdbc/src/main/java/org/duckdb/DuckDBDatabaseMetaData.java b/tools/jdbc/src/main/java/org/duckdb/DuckDBDatabaseMetaData.java\nindex 8b24ccab4541..5731c1ce90f6 100644\n--- a/tools/jdbc/src/main/java/org/duckdb/DuckDBDatabaseMetaData.java\n+++ b/tools/jdbc/src/main/java/org/duckdb/DuckDBDatabaseMetaData.java\n@@ -675,29 +675,36 @@ public ResultSet getTables(String catalog, String schemaPattern, String tableNam\n \t\tif (catalog != null && !catalog.isEmpty()) {\n \t\t\tthrow new SQLException(\"Actual catalog argument is not supported, got \" + catalog);\n \t\t}\n+\t\tif (schemaPattern == null) {\n+\t\t\tschemaPattern = \"%\";\n+\t\t}\n+\t\tif (tableNamePattern == null) {\n+\t\t\ttableNamePattern = \"%\";\n+\t\t}\n \t\tString table_type_str = \"\";\n \t\tif (types != null && types.length > 0) {\n-\t\t\ttable_type_str = \"table_type IN (\";\n \t\t\tfor (int i = 0; i < types.length; i++) {\n-\t\t\t\ttable_type_str += \"'\" + types[i] + \"'\";\n-\t\t\t\tif (i < types.length - 1) {\n+\t\t\t\tif (i > 0) {\n \t\t\t\t\ttable_type_str += ',';\n \t\t\t\t}\n+\t\t\t\ttable_type_str += \"?\";\n \t\t\t}\n-\t\t\ttable_type_str += \") AND \";\n-\t\t}\n-\t\tif (schemaPattern == null) {\n-\t\t\tschemaPattern = \"%\";\n-\t\t}\n-\t\tif (tableNamePattern == null) {\n-\t\t\ttableNamePattern = \"%\";\n+\t\t\ttable_type_str = \" AND table_type IN (\" + table_type_str + \")\";\n \t\t}\n \t\tPreparedStatement ps = conn.prepareStatement(\n-\t\t\t\t\"SELECT table_catalog AS 'TABLE_CAT', table_schema AS 'TABLE_SCHEM', table_name AS 'TABLE_NAME', table_type as 'TABLE_TYPE', NULL AS 'REMARKS', NULL AS 'TYPE_CAT', NULL AS 'TYPE_SCHEM', NULL AS 'TYPE_NAME', NULL as 'SELF_REFERENCING_COL_NAME', NULL as 'REF_GENERATION' FROM information_schema.tables WHERE \"\n-\t\t\t\t\t\t+ table_type_str\n-\t\t\t\t\t\t+ \" table_schema LIKE ? AND table_name LIKE ? ORDER BY \\\"TABLE_TYPE\\\", \\\"TABLE_CAT\\\", \\\"TABLE_SCHEM\\\", \\\"TABLE_NAME\\\"\");\n+\t\t\t\"SELECT table_catalog AS 'TABLE_CAT', table_schema AS 'TABLE_SCHEM', table_name AS 'TABLE_NAME'\" +\n+\t\t\t\", table_type as 'TABLE_TYPE', NULL AS 'REMARKS', NULL AS 'TYPE_CAT', NULL AS 'TYPE_SCHEM'\" +\n+\t\t\t\", NULL AS 'TYPE_NAME', NULL as 'SELF_REFERENCING_COL_NAME', NULL as 'REF_GENERATION' \" +\n+\t\t\t\"FROM information_schema.tables WHERE table_schema LIKE ? AND table_name LIKE ? \" + table_type_str +\n+\t\t\t\"ORDER BY \\\"TABLE_TYPE\\\", \\\"TABLE_CAT\\\", \\\"TABLE_SCHEM\\\", \\\"TABLE_NAME\\\"\"\n+\t\t);\n \t\tps.setString(1, schemaPattern);\n \t\tps.setString(2, tableNamePattern);\n+\t\tif (types != null && types.length > 0) {\n+\t\t\tfor (int i = 0; i < types.length; i++) {\n+\t\t\t  ps.setString(3 + i, types[i]);\n+\t\t\t}\n+\t\t}\n \t\treturn ps.executeQuery();\n \n \t}\n",
  "test_patch": "diff --git a/tools/jdbc/src/test/java/org/duckdb/test/TestDuckDBJDBC.java b/tools/jdbc/src/test/java/org/duckdb/test/TestDuckDBJDBC.java\nindex 50eeb8a1b195..1f140c33b147 100644\n--- a/tools/jdbc/src/test/java/org/duckdb/test/TestDuckDBJDBC.java\n+++ b/tools/jdbc/src/test/java/org/duckdb/test/TestDuckDBJDBC.java\n@@ -1800,6 +1800,27 @@ public static void test_schema_reflection() throws Exception {\n \t\tconn.close();\n \t}\n \n+\tpublic static void test_get_tables_param_binding_for_table_types() throws Exception {\n+\t\tConnection conn = DriverManager.getConnection(\"jdbc:duckdb:\");\n+\t\tDatabaseMetaData databaseMetaData = conn.getMetaData();\n+\t\tResultSet rs = databaseMetaData.getTables(null, null, null, new String[] {\n+\t\t\t\"') UNION ALL \" +\n+\t\t\t\"SELECT\" + \n+\t\t\t\" 'fake catalog'\" +\n+\t\t\t\", ?\" +\n+\t\t\t\", ?\" + \n+\t\t\t\", 'fake table type'\" +\n+\t\t\t\", 'fake remarks'\" +\n+\t\t\t\", 'fake type cat'\" + \n+\t\t\t\", 'fake type schem'\" +\n+\t\t\t\", 'fake type name'\" +\n+\t\t\t\", 'fake self referencing col name'\" +\n+\t\t\t\", 'fake ref generation' -- \"\n+\t\t});\n+\t\tassertFalse(rs.next());\n+\t\trs.close();\n+\t}\n+\n \tpublic static void test_get_table_types() throws Exception {\n \t\tString[] tableTypesArray = new String[]{\"BASE TABLE\", \"LOCAL TEMPORARY\", \"VIEW\"};\n \t\tList<String> tableTypesList = new ArrayList<String>(Arrays.asList(tableTypesArray));\n@@ -1808,9 +1829,9 @@ public static void test_get_table_types() throws Exception {\n \t\tConnection conn = DriverManager.getConnection(\"jdbc:duckdb:\");\n \t\tDatabaseMetaData databaseMetaData = conn.getMetaData();\n \t\tResultSet rs = databaseMetaData.getTableTypes();\n-\t\t\n+\n \t\tfor (int i = 0; i < tableTypesArray.length; i++) {\n-\t\t\tassertTrue(rs.next(), \"Expected a row from table\");\n+\t\t\tassertTrue(rs.next(), \"Expected a row from table types resultset\");\n \t\t\tString tableTypeFromResultSet = rs.getString(\"TABLE_TYPE\");\n \t\t\tString tableTypeFromList = tableTypesList.get(i);\n \t\t\tassertTrue(\n@@ -1820,9 +1841,8 @@ public static void test_get_table_types() throws Exception {\n \t\t\t\t\"value from resultset \" + tableTypeFromResultSet\n \t\t\t);\n \t\t}\n-\t\trs.close();\n \t}\n-\t\n+  \n \tpublic static void test_connect_wrong_url_bug848() throws Exception {\n \t\tDriver d = new DuckDBDriver();\n \t\tassertNull(d.connect(\"jdbc:h2:\", null));\n",
  "problem_statement": "DuckDBJ: org.duckdb.DuckDBDatabaseMetaData.getTables() does not sanitize values of table_type argument (SQL injection)\n### What happens?\r\n\r\nMethod `getTables()` of class `org.duckdb.DuckDBDatabaseMetaData` uses string concatenation to build a condition on string values from the tableTypes parameter. These values are not sanitized or escaped. \r\n\r\nTo be clear I don't want to sound alarmist about it, considering the intended use of duckdb I don't think this should count as a security issue. Still it would be nicer if this would be fixed.\r\n\r\n### To Reproduce\r\n\r\n```\r\n\tpublic static void test_getTables_sqlInjectionSafe() throws Exception {\r\n\t\tConnection conn = DriverManager.getConnection(\"jdbc:duckdb:\");\r\n\t\tDatabaseMetaData databaseMetaData = connection.getMetaData();\r\n\r\n\t\tString catalog = null;\r\n\t\tString schema = null;\r\n\t\tString tableNamePattern = null;\r\n\t\tString[] tableTypes = {\"BASE TABLE\"};\r\n\r\n\t\tResultSet resultSet;\r\n\r\n\t\tresultSet = databaseMetaData.getTables(catalog, schema, tableNamePattern, tableTypes);\r\n\t\tassertFalse(\r\n\t\t\tresultSet.next(),\r\n\t\t\t\"Ensure the database has no tables\"\r\n\t\t);\r\n\r\n\t\ttableTypes[0] = \"') UNION ALL \" +\r\n\t\t\t\"SELECT\" + \r\n\t\t\t\" 'fake catalog'\" +\r\n\t\t\t\", ?\" +\r\n\t\t\t\", ?\" + \r\n\t\t\t\", 'fake table_type'\" +\r\n\t\t\t\", 'fake remarks'\" +\r\n\t\t\t\", 'fake type cat'\" + \r\n\t\t\t\", 'fake type schem'\" +\r\n\t\t\t\", 'fake type name'\" +\r\n\t\t\t\", 'fake self referencing col name'\" +\r\n\t\t\t\", 'fake ref generation'\" +\t\t\" -- \";\r\n\t\tresultSet = databaseMetaData.getTables(catalog, schema, tableNamePattern, tableTypes);\r\n\t\tassertFalse(\r\n\t\t\tresultSet.next(),\r\n\t\t\t\"Ensure the database has no tables\"\r\n\t\t);\r\n\r\n\t}\r\n\r\n```\r\n\r\n### OS:\r\n\r\nWindows 10 Pro\r\n\r\n### DuckDB Version:\r\n\r\nv0.6.2-dev2100\r\n\r\n### DuckDB Client:\r\n\r\nDuckDBJ (jdbc)\r\n\r\n### Full Name:\r\n\r\nRoland Bouman\r\n\r\n### Affiliation:\r\n\r\nJust-Bi.nl (an EPAM company) \r\n\r\n### Have you tried this on the latest `master` branch?\r\n\r\n- [X] I agree\r\n\r\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\r\n\r\n- [X] I agree\n",
  "hints_text": "If so desired I can send a PR for the test suite and/or a PR to fix it. The current implementation already uses parameter binding for the other arguments, it is trivial to use that for the table types as well. ",
  "created_at": "2023-02-09T22:22:47Z"
}