{
  "repo": "duckdb/duckdb",
  "pull_number": 13871,
  "instance_id": "duckdb__duckdb-13871",
  "issue_numbers": [
    "13805",
    "13805"
  ],
  "base_commit": "e99b6f097437fb7511fdce17722a34d8f7e5ab11",
  "patch": "diff --git a/src/planner/binder/tableref/bind_basetableref.cpp b/src/planner/binder/tableref/bind_basetableref.cpp\nindex 40f2662d4500..d3e65e8b9fe7 100644\n--- a/src/planner/binder/tableref/bind_basetableref.cpp\n+++ b/src/planner/binder/tableref/bind_basetableref.cpp\n@@ -202,6 +202,17 @@ unique_ptr<BoundTableRef> Binder::Bind(BaseTableRef &ref) {\n \t\t\t\treturn replacement_scan_bind_result;\n \t\t\t}\n \t\t}\n+\t\tauto &config = DBConfig::GetConfig(context);\n+\t\tif (context.config.use_replacement_scans && config.options.enable_external_access &&\n+\t\t    ExtensionHelper::IsFullPath(full_path)) {\n+\t\t\tauto &fs = FileSystem::GetFileSystem(context);\n+\t\t\tif (fs.FileExists(full_path)) {\n+\t\t\t\tthrow BinderException(\n+\t\t\t\t    \"No extension found that is capable of reading the file \\\"%s\\\"\\n* If this file is a supported file \"\n+\t\t\t\t    \"format you can explicitly use the reader functions, such as read_csv, read_json or read_parquet\",\n+\t\t\t\t    full_path);\n+\t\t\t}\n+\t\t}\n \n \t\t// could not find an alternative: bind again to get the error\n \t\t(void)entry_retriever.GetEntry(CatalogType::TABLE_ENTRY, ref.catalog_name, ref.schema_name, ref.table_name,\n",
  "test_patch": "diff --git a/test/sql/copy/parquet/replacement_scan_custom_extension.test b/test/sql/copy/parquet/replacement_scan_custom_extension.test\nnew file mode 100644\nindex 000000000000..843e4a7458c1\n--- /dev/null\n+++ b/test/sql/copy/parquet/replacement_scan_custom_extension.test\n@@ -0,0 +1,21 @@\n+# name: test/sql/copy/parquet/replacement_scan_custom_extension.test\n+# description: Test unknown extensions in replacement scans\n+# group: [parquet]\n+\n+require parquet\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+statement ok\n+COPY (SELECT 42 a) to '__TEST_DIR__/lists.my_file_extension' (FORMAT PARQUET);\n+\n+statement error\n+FROM '__TEST_DIR__/lists.my_file_extension';\n+----\n+No extension found that is capable of reading the file\n+\n+query I\n+FROM read_parquet('__TEST_DIR__/lists.my_file_extension')\n+----\n+42\n",
  "problem_statement": "\"Table with name [...] does not exist\" when reading file that exists\n### What happens?\r\n\r\nTrying to read a zipped CSV file and getting an error that the file doesn't exist. I've verified it exists.\r\n\r\n### To Reproduce\r\n\r\nI'm trying to read a zipped CSV file from the DuckDB shell:\r\n\r\n```\r\nD select count(*) from '~/03nov2023.csv.zip';\r\n```\r\n\r\nbut getting an error:\r\n\r\n```sh\r\nCatalog Error: Table with name ~/03nov2023.csv.zip does not exist!\r\nDid you mean \"temp.information_schema.schemata\"?\r\nLINE 1: select count(*) from '~/03nov2023.csv.zip';\r\n```\r\n\r\nI suspect that DuckDB may not like my ZIP file (or may not decompress ZIP files at all); if that's the case, I think the error message could be tweaked to say something like \"DuckDB does not decompress ZIP files\" rather than \"the file doesn't exist\". I'm new to the project, but happy to help contribute in any way I can \ud83d\ude04 \r\n\r\n### OS:\r\n\r\nmacOS 14.4.1 M1 (arm64)\r\n\r\n### DuckDB Version:\r\n\r\nv1.0.0 1f98600c2c\r\n\r\n### DuckDB Client:\r\n\r\nDuckDB shell\r\n\r\n### Hardware:\r\n\r\n_No response_\r\n\r\n### Full Name:\r\n\r\nRobert Martin\r\n\r\n### Affiliation:\r\n\r\nRobert Martin\r\n\r\n### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.\r\n\r\nI have tested with a stable release\r\n\r\n### Did you include all relevant data sets for reproducing the issue?\r\n\r\nNot applicable - the reproduction does not require a data set\r\n\r\n### Did you include all code required to reproduce the issue?\r\n\r\n- [X] Yes, I have\r\n\r\n### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?\r\n\r\n- [X] Yes, I have\n\"Table with name [...] does not exist\" when reading file that exists\n### What happens?\r\n\r\nTrying to read a zipped CSV file and getting an error that the file doesn't exist. I've verified it exists.\r\n\r\n### To Reproduce\r\n\r\nI'm trying to read a zipped CSV file from the DuckDB shell:\r\n\r\n```\r\nD select count(*) from '~/03nov2023.csv.zip';\r\n```\r\n\r\nbut getting an error:\r\n\r\n```sh\r\nCatalog Error: Table with name ~/03nov2023.csv.zip does not exist!\r\nDid you mean \"temp.information_schema.schemata\"?\r\nLINE 1: select count(*) from '~/03nov2023.csv.zip';\r\n```\r\n\r\nI suspect that DuckDB may not like my ZIP file (or may not decompress ZIP files at all); if that's the case, I think the error message could be tweaked to say something like \"DuckDB does not decompress ZIP files\" rather than \"the file doesn't exist\". I'm new to the project, but happy to help contribute in any way I can \ud83d\ude04 \r\n\r\n### OS:\r\n\r\nmacOS 14.4.1 M1 (arm64)\r\n\r\n### DuckDB Version:\r\n\r\nv1.0.0 1f98600c2c\r\n\r\n### DuckDB Client:\r\n\r\nDuckDB shell\r\n\r\n### Hardware:\r\n\r\n_No response_\r\n\r\n### Full Name:\r\n\r\nRobert Martin\r\n\r\n### Affiliation:\r\n\r\nRobert Martin\r\n\r\n### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.\r\n\r\nI have tested with a stable release\r\n\r\n### Did you include all relevant data sets for reproducing the issue?\r\n\r\nNot applicable - the reproduction does not require a data set\r\n\r\n### Did you include all code required to reproduce the issue?\r\n\r\n- [X] Yes, I have\r\n\r\n### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?\r\n\r\n- [X] Yes, I have\n",
  "hints_text": "The issue here is that `from 'file.csv.zip'` does not trigger the replacement scan that transforms to `from read_csv('file.csv.zip')` as the file extension isnt recognized\r\n\r\nThat might be fixed on 1.1.0 as work was recently done on this logic iirc\nThanks for the quick and helpful answer @Tishj!\r\n\r\nJust to clarify, does DuckDB not perform ZIP decompression?\n@bertday no unfortunately :(\nThat's helpful to know. Thank you @djouallah \ud83d\ude04 \nThe issue here is that `from 'file.csv.zip'` does not trigger the replacement scan that transforms to `from read_csv('file.csv.zip')` as the file extension isnt recognized\r\n\r\nThat might be fixed on 1.1.0 as work was recently done on this logic iirc\nThanks for the quick and helpful answer @Tishj!\r\n\r\nJust to clarify, does DuckDB not perform ZIP decompression?\n@bertday no unfortunately :(\nThat's helpful to know. Thank you @djouallah \ud83d\ude04 ",
  "created_at": "2024-09-11T11:40:42Z"
}