{
  "repo": "duckdb/duckdb",
  "pull_number": 7534,
  "instance_id": "duckdb__duckdb-7534",
  "issue_numbers": [
    "7513"
  ],
  "base_commit": "4e856aa5296a1693c242637c689759e4d389b063",
  "patch": "diff --git a/tools/pythonpkg/src/pyconnection.cpp b/tools/pythonpkg/src/pyconnection.cpp\nindex bd83ff38ad7d..5dfae0f400a5 100644\n--- a/tools/pythonpkg/src/pyconnection.cpp\n+++ b/tools/pythonpkg/src/pyconnection.cpp\n@@ -910,21 +910,28 @@ unique_ptr<DuckDBPyRelation> DuckDBPyConnection::RunQuery(const string &query, c\n \t// FIXME: we should add support for a relation object over a column data collection to make this more efficient\n \tvector<vector<Value>> values;\n \tvector<string> names = res->names;\n-\twhile (true) {\n-\t\tauto chunk = res->Fetch();\n-\t\tif (!chunk || chunk->size() == 0) {\n-\t\t\tbreak;\n-\t\t}\n-\t\tfor (idx_t r = 0; r < chunk->size(); r++) {\n-\t\t\tvector<Value> row;\n-\t\t\tfor (idx_t c = 0; c < chunk->ColumnCount(); c++) {\n-\t\t\t\trow.push_back(chunk->data[c].GetValue(r));\n+\t{\n+\t\tpy::gil_scoped_release release;\n+\n+\t\twhile (true) {\n+\t\t\tauto chunk = res->Fetch();\n+\t\t\tif (res->HasError()) {\n+\t\t\t\tres->ThrowError();\n+\t\t\t}\n+\t\t\tif (!chunk || chunk->size() == 0) {\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tfor (idx_t r = 0; r < chunk->size(); r++) {\n+\t\t\t\tvector<Value> row;\n+\t\t\t\tfor (idx_t c = 0; c < chunk->ColumnCount(); c++) {\n+\t\t\t\t\trow.push_back(chunk->data[c].GetValue(r));\n+\t\t\t\t}\n+\t\t\t\tvalues.push_back(std::move(row));\n \t\t\t}\n-\t\t\tvalues.push_back(std::move(row));\n \t\t}\n-\t}\n-\tif (values.empty()) {\n-\t\treturn nullptr;\n+\t\tif (values.empty()) {\n+\t\t\treturn nullptr;\n+\t\t}\n \t}\n \treturn make_uniq<DuckDBPyRelation>(make_uniq<ValueRelation>(connection->context, values, names));\n }\n",
  "test_patch": "diff --git a/tools/pythonpkg/tests/fast/api/test_duckdb_query.py b/tools/pythonpkg/tests/fast/api/test_duckdb_query.py\nindex 9cad7a8c2557..b1bf7abe318f 100644\n--- a/tools/pythonpkg/tests/fast/api/test_duckdb_query.py\n+++ b/tools/pythonpkg/tests/fast/api/test_duckdb_query.py\n@@ -1,6 +1,7 @@\n \n import duckdb\n import pytest\n+from conftest import NumpyPandas, ArrowPandas\n \n class TestDuckDBQuery(object):\n     def test_duckdb_query(self, duckdb_cursor):\n@@ -18,6 +19,19 @@ def test_duckdb_query(self, duckdb_cursor):\n         res = duckdb.query('select 42; select 84;').fetchall()\n         assert res == [(84,)]\n \n+    @pytest.mark.parametrize('pandas', [NumpyPandas(), ArrowPandas()])\n+    def test_duckdb_from_query_multiple_statements(self, pandas):\n+        tst_df = pandas.DataFrame({'a':[1,23,3,5]})\n+\n+        res = duckdb.sql('''\n+        select 42; select *\n+        from tst_df\n+        union all\n+        select *\n+        from tst_df;\n+        ''').fetchall()\n+        assert res == [(1,), (23,), (3,), (5,), (1,), (23,), (3,), (5,)]\n+\n     def test_duckdb_from_query(self, duckdb_cursor):\n         # duckdb.from_query cannot be used to run arbitrary queries\n         with pytest.raises(duckdb.ParserException, match='duckdb.from_query cannot be used to run arbitrary SQL queries'):\n",
  "problem_statement": "union all wrong result with pandas DataFrame\n### What happens?\n\nThe sql syntax union all fails to query the dataframe's table. The results of only one query are displayed\n\n### To Reproduce\n\ntst_df = pd.DataFrame({'a':[1,23,3,5]})\r\n\r\nduckdb.sql('''\r\nselect *\r\nfrom tst_df\r\nunion all \r\nselect *\r\nfrom tst_df\r\n''')\n\n### OS:\n\ncentos \n\n### DuckDB Version:\n\n'0.7.1'\n\n### DuckDB Client:\n\npython\n\n### Full Name:\n\nlotus \n\n### Affiliation:\n\nxxx\n\n### Have you tried this on the latest `master` branch?\n\n- [X] I agree\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] I agree\n",
  "hints_text": "I'm getting:\r\n```\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502   a   \u2502\r\n\u2502 int64 \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502     1 \u2502\r\n\u2502    23 \u2502\r\n\u2502     3 \u2502\r\n\u2502     5 \u2502\r\n\u2502     1 \u2502\r\n\u2502    23 \u2502\r\n\u2502     3 \u2502\r\n\u2502     5 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\nWhat are you expecting the results to be?\nIf you're looking for something like this:\r\n```sql\r\nD with tst_df as (select 1,23,3,5)\r\n> select * from tst_df union all select * from tst_df;\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502   1   \u2502  23   \u2502   3   \u2502   5   \u2502\r\n\u2502 int32 \u2502 int32 \u2502 int32 \u2502 int32 \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502     1 \u2502    23 \u2502     3 \u2502     5 \u2502\r\n\u2502     1 \u2502    23 \u2502     3 \u2502     5 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\nThen you need multiple columns\n> I'm getting:\r\n> \r\n> ```\r\n> \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n> \u2502   a   \u2502\r\n> \u2502 int64 \u2502\r\n> \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n> \u2502     1 \u2502\r\n> \u2502    23 \u2502\r\n> \u2502     3 \u2502\r\n> \u2502     5 \u2502\r\n> \u2502     1 \u2502\r\n> \u2502    23 \u2502\r\n> \u2502     3 \u2502\r\n> \u2502     5 \u2502\r\n> \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n> ```\r\n> \r\n> What are you expecting the results to be?\r\n\r\nYou got the right result, but that's all I got\r\n\r\nPython == 3.7.13\r\npandas ==1.3.5\r\n\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502   a   \u2502\r\n\u2502 int64 \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502     1 \u2502\r\n\u2502    23 \u2502\r\n\u2502     3 \u2502\r\n\u2502     5 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n\r\nmaybe i find the reason:\r\n# tools.py\r\n\r\nimport duckdb\r\n\r\ndef sql(sql,tz='xx'):\r\n    result =  duckdb.sql(f'''set Timezone='{tz}'; \r\n                    {sql} ''')\r\n    return result\r\n\r\n\r\n# main.py\r\nimport tools\r\n\r\ntst_df = pd.DataFrame({'a':[1,23,3,5]})\r\n\r\ntools.sql('''\r\nselect *\r\nfrom tst_df\r\nunion all\r\nselect *\r\nfrom tst_df\r\n''')\nYah, I can reproduce on pandas 2.0.1 and 0.7.2-dev3666\t\r\n\r\n```import pandas as pd\r\n\r\nimport duckdb \r\n\r\ntst_df = pd.DataFrame({'a':[1,23,3,5]})\r\n\r\nduckdb.sql('''\r\nset timezone = 'UTC';\r\nselect *\r\nfrom tst_df\r\nunion all\r\nselect *\r\nfrom tst_df\r\n''')\r\n```\r\n\r\n![image](https://github.com/duckdb/duckdb/assets/104510378/d842a18a-c5d5-4165-a674-6de617d90d72)\r\n\r\n#### without the timezone:\r\n```\r\nimport pandas as pd\r\nimport duckdb \r\ntst_df = pd.DataFrame({'a':[1,23,3,5]})\r\nduckdb.sql('''\r\nselect *\r\nfrom tst_df\r\nunion all\r\nselect *\r\nfrom tst_df\r\n''')\r\n```\r\n![image](https://github.com/duckdb/duckdb/assets/104510378/ffaadba5-14de-4900-9322-02705a48d876)\r\n\nThanks! I can reproduce this - it looks like it is related to executing multiple statements inside a `.sql` block - e.g.:\r\n\r\n```python\r\nimport duckdb\r\nimport pandas as pd \r\n\r\ntst_df = pd.DataFrame({'a':[1,23,3,5]})\r\n\r\nduckdb.sql('''\r\nselect 42;\r\nselect *\r\nfrom tst_df\r\nunion all\r\nselect *\r\nfrom tst_df;\r\n''').show()\r\n# \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n# \u2502   a   \u2502\r\n# \u2502 int64 \u2502\r\n# \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n# \u2502     1 \u2502\r\n# \u2502    23 \u2502\r\n# \u2502     3 \u2502\r\n# \u2502     5 \u2502\r\n# \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\n\r\nIt seems to work correctly in `.execute`:\r\n\r\n```sql\r\n\r\nduckdb.execute('''\r\nselect 42;\r\nselect *\r\nfrom tst_df\r\nunion all\r\nselect *\r\nfrom tst_df;\r\n''').fetchall()\r\n# [(1,), (23,), (3,), (5,), (1,), (23,), (3,), (5,)]\r\n```\r\n@Tishj could you have a look?\n```\r\n      success = false\r\n      error = {\r\n        initialized = true\r\n        type = INVALID_INPUT\r\n        raw_message = \"PandasScan called but GIL was already held!\"\r\n        final_message = \"\"\r\n        exception_instance = std::__1::shared_ptr<duckdb::Exception>::element_type @ 0x00006000026591b8 strong=1 weak=1 {\r\n          __ptr_ = 0x00006000026591b8\r\n        }\r\n      }\r\n```\r\nWe silently ignored the error",
  "created_at": "2023-05-16T09:19:24Z"
}