{
  "repo": "duckdb/duckdb",
  "pull_number": 12956,
  "instance_id": "duckdb__duckdb-12956",
  "issue_numbers": [
    "12946"
  ],
  "base_commit": "6ee72f45e53988ebd34e660d4e3a86bde47b953f",
  "patch": "diff --git a/tools/juliapkg/Project.toml b/tools/juliapkg/Project.toml\nindex 061d50a90ab9..eb6553dd40db 100644\n--- a/tools/juliapkg/Project.toml\n+++ b/tools/juliapkg/Project.toml\n@@ -1,7 +1,7 @@\n name = \"DuckDB\"\n uuid = \"d2f5444f-75bc-4fdf-ac35-56f514c445e1\"\n authors = [\"Mark Raasveldt <mark@duckdblabs.com\", \"Hannes M\u00fchleisen <hannes@duckdblabs.com>\"]\n-version = \"1.0.0\"\n+version = \"1.0.1\"\n \n [deps]\n DBInterface = \"a10d1c49-ce27-4219-8d33-6db1a4562965\"\ndiff --git a/tools/juliapkg/src/api.jl b/tools/juliapkg/src/api.jl\nindex dd1f841b5b3c..54afe8b93172 100644\n--- a/tools/juliapkg/src/api.jl\n+++ b/tools/juliapkg/src/api.jl\n@@ -2610,7 +2610,7 @@ Append an int32_t value to the appender.\n DUCKDB_API duckdb_state duckdb_append_int32(duckdb_appender appender, int32_t value);\n \"\"\"\n function duckdb_append_int32(appender, value)\n-    return ccall((:duckdb_append_int16, libduckdb), duckdb_state, (duckdb_appender, Int32), appender, value)\n+    return ccall((:duckdb_append_int32, libduckdb), duckdb_state, (duckdb_appender, Int32), appender, value)\n end\n \n \"\"\"\n",
  "test_patch": "diff --git a/tools/juliapkg/test/test_appender.jl b/tools/juliapkg/test/test_appender.jl\nindex d06871b16e05..e5e4beeb9cf5 100644\n--- a/tools/juliapkg/test/test_appender.jl\n+++ b/tools/juliapkg/test/test_appender.jl\n@@ -81,6 +81,7 @@ end\n         (; col_name = :timestamp, duck_type = \"TIMESTAMP\", append_value = Dates.DateTime(\"1970-01-02T01:23:45.678\")),\n         (; col_name = :missingval, duck_type = \"INTEGER\", append_value = missing),\n         (; col_name = :nothingval, duck_type = \"INTEGER\", append_value = nothing, ref_value = missing),\n+        (; col_name = :largeval, duck_type = \"INTEGER\", append_value = Int32(2^16)),\n         (; col_name = :uuid, duck_type = \"UUID\", append_value = uuid),\n         (; col_name = :varchar, duck_type = \"VARCHAR\", append_value = \"Foo\")\n     ]\n",
  "problem_statement": "Appending Int32 via Julia client truncates module Int16\n### What happens?\r\n\r\nWhen appending an `Int32` (4 byte integer) julia value to a DuckDB, it gets truncated module `Int16` (2 byte integer). For example, appending an `Int32(2^16)` fills the entry with the value `0` instead of `65536`. Might be due to [this line](https://github.com/duckdb/duckdb/blob/0ec9ff78c80e0d11268b22fbfc7e35fd47bc558b/tools/juliapkg/src/api.jl#L2613) in the DuckDB source code.\r\n\r\n### To Reproduce\r\n\r\nScript:\r\n\r\n```julia\r\nusing DuckDB\r\ndb = DuckDB.DB(\"test.duckdb\")\r\n\r\nDBInterface.execute(db, \"CREATE TABLE mytable(id INTEGER)\")\r\n\r\nappender = DuckDB.Appender(db, \"mytable\")\r\n\r\nDuckDB.append(appender, Int32(2^16))\r\nDuckDB.end_row(appender)\r\nDuckDB.flush(appender)\r\nDuckDB.close(appender)\r\n\r\nres = DBInterface.execute(db, \"SELECT id FROM mytable\")\r\n```\r\n\r\nOutput:\r\n\r\n```julia\r\n(id = Union{Missing, Int32}[0],)\r\n```\r\n\r\nwhereas I was expecting\r\n\r\n```julia\r\n(id = Union{Missing, Int32}[65536],)\r\n```\r\n\r\nThis is my minimal julia (v1.10.4) enviroment to reproduce\r\n\r\n```\r\n(jl_CoroC4) pkg> status\r\nStatus `/tmp/jl_CoroC4/Project.toml`\r\n  [d2f5444f] DuckDB v1.0.0\r\n\r\n(jl_CoroC4) pkg> status --manifest\r\nStatus `/tmp/jl_CoroC4/Manifest.toml`\r\n  [a10d1c49] DBInterface v2.6.1\r\n  [9a962f9c] DataAPI v1.16.0\r\n  [e2d170a0] DataValueInterfaces v1.0.0\r\n  [d2f5444f] DuckDB v1.0.0\r\n  [fb4d412d] FixedPointDecimals v0.5.2\r\n  [842dd82b] InlineStrings v1.4.1\r\n  [82899510] IteratorInterfaceExtensions v1.0.0\r\n  [692b3bcd] JLLWrappers v1.5.0\r\n  [bac558e1] OrderedCollections v1.6.3\r\n  [69de0a69] Parsers v2.8.1\r\n  [aea7be01] PrecompileTools v1.2.1\r\n  [21216c6a] Preferences v1.4.3\r\n  [3783bdb8] TableTraits v1.0.1\r\n  [bd369af6] Tables v1.11.1\r\n  [ea10d353] WeakRefStrings v1.4.2\r\n  [2cbbab25] DuckDB_jll v1.0.0+0\r\n  [56f22d72] Artifacts\r\n  [ade2ca70] Dates\r\n  [8f399da3] Libdl\r\n  [37e2e46d] LinearAlgebra\r\n  [de0858da] Printf\r\n  [9a3f8284] Random\r\n  [ea8e919c] SHA v0.7.0\r\n  [fa267f1f] TOML v1.0.3\r\n  [cf7118a7] UUIDs\r\n  [4ec0a83e] Unicode\r\n  [e66e0078] CompilerSupportLibraries_jll v1.1.1+0\r\n  [4536629a] OpenBLAS_jll v0.3.23+4\r\n  [8e850b90] libblastrampoline_jll v5.8.0+1\r\n```\r\n\r\n### OS:\r\n\r\nUbuntu 24.04 amd64\r\n\r\n### DuckDB Version:\r\n\r\n1.0.0 (everything installed by adding DuckDB.jl v1.0.0)\r\n\r\n### DuckDB Client:\r\n\r\nJulia (julia v1.10.4)\r\n\r\n### Full Name:\r\n\r\nPietro Vertechi\r\n\r\n### Affiliation:\r\n\r\nLambda Solutions\r\n\r\n### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.\r\n\r\nI have tested with the stable release.\r\n\r\n### Did you include all relevant data sets for reproducing the issue?\r\n\r\nNot applicable - the reproduction does not require a data set\r\n\r\n### Did you include all code required to reproduce the issue?\r\n\r\n- [X] Yes, I have\r\n\r\n### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?\r\n\r\n- [X] Yes, I have\n",
  "hints_text": "",
  "created_at": "2024-07-11T15:21:55Z"
}