{
  "repo": "duckdb/duckdb",
  "pull_number": 12376,
  "instance_id": "duckdb__duckdb-12376",
  "issue_numbers": [
    "11921",
    "11921"
  ],
  "base_commit": "9a03e8b2cf0d8d8f4e072f391328d9c17b45edf8",
  "patch": "diff --git a/src/planner/expression/bound_cast_expression.cpp b/src/planner/expression/bound_cast_expression.cpp\nindex 81aaf32108a7..bc23de68f65d 100644\n--- a/src/planner/expression/bound_cast_expression.cpp\n+++ b/src/planner/expression/bound_cast_expression.cpp\n@@ -158,17 +158,7 @@ bool BoundCastExpression::CastIsInvertible(const LogicalType &source_type, const\n \t\t}\n \t\tbreak;\n \tcase LogicalTypeId::VARCHAR:\n-\t\tswitch (target_type.id()) {\n-\t\tcase LogicalTypeId::TIMESTAMP:\n-\t\tcase LogicalTypeId::TIMESTAMP_NS:\n-\t\tcase LogicalTypeId::TIMESTAMP_MS:\n-\t\tcase LogicalTypeId::TIMESTAMP_SEC:\n-\t\tcase LogicalTypeId::TIMESTAMP_TZ:\n-\t\t\treturn true;\n-\t\tdefault:\n-\t\t\treturn false;\n-\t\t}\n-\t\tbreak;\n+\t\treturn false;\n \tdefault:\n \t\tbreak;\n \t}\n",
  "test_patch": "diff --git a/test/sql/optimizer/expression/test_timestamp_offset.test b/test/sql/optimizer/expression/test_timestamp_offset.test\nnew file mode 100644\nindex 000000000000..d2adaee0d889\n--- /dev/null\n+++ b/test/sql/optimizer/expression/test_timestamp_offset.test\n@@ -0,0 +1,50 @@\n+# name: test/sql/optimizer/expression/test_timestamp_offset.test\n+# description: Test pushdown of varchars converted to timestamps\n+# group: [expression]\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+statement ok\n+create or replace table table1 (\n+    timestamp_str varchar\n+);\n+\n+statement ok\n+insert into table1 values ('2024-05-03 01:00:00'), ('2024-05-03 01:00:02');\n+\n+query II\n+select timestamp_str, cast(timestamp_str as timestamp)\n+from table1\n+where cast(timestamp_str as timestamp) > cast('2024-05-03 01:00:00' as timestamp);\n+----\n+2024-05-03 01:00:02\t2024-05-03 01:00:02\n+\n+statement ok\n+truncate table table1;\n+\n+statement ok\n+insert into table1 values ('2024-05-03T01:00:00+00:00'), ('2024-05-03T01:00:02+00:00');\n+\n+query II\n+select timestamp_str, cast(timestamp_str as timestamp)\n+from table1\n+where cast(timestamp_str as timestamp) > cast('2024-05-03 01:00:00' as timestamp);\n+----\n+2024-05-03T01:00:02+00:00\t2024-05-03 01:00:02\n+\n+query II\n+select timestamp_str, cast(timestamp_str as timestamp)\n+from table1\n+where cast(timestamp_str as timestamp) > cast('2024-05-03T01:00:00+00:00' as timestamp);\n+----\n+2024-05-03T01:00:02+00:00\t2024-05-03 01:00:02\n+\n+query II\n+select * from (\n+    select timestamp_str, cast(timestamp_str as timestamp) as timestamp_column\n+    from table1\n+)\n+where timestamp_column > cast('2024-05-03 01:00:00' as timestamp);\n+----\n+2024-05-03T01:00:02+00:00\t2024-05-03 01:00:02\n",
  "problem_statement": "Wrong comparison for timestamp depending on if it's in a subquery or not\n### What happens?\r\n\r\nWhen using a timestamp to filter a table on a timestamp column, I get a different result depending on if a timestamp conversion happened in a subquery or not. I hope the example below clarifies it. Let me know if you need more infos!\r\n\r\nI found #11377 which sounds a bit similar.\r\n\r\n### To Reproduce\r\n\r\n```sql\r\n/* -----------\r\nSetup\r\n----------- */\r\ncreate or replace table table1 (\r\n    timestamp_str varchar\r\n);\r\n\r\n\r\n/* -----------\r\nThe code below returns exactly one row as expected\r\n----------- */\r\ninsert into table1 values ('2024-05-03 01:00:00'), ('2024-05-03 01:00:02');\r\n\r\nselect timestamp_str, cast(timestamp_str as timestamp)\r\nfrom table1\r\nwhere cast(timestamp_str as timestamp) > cast('2024-05-03 01:00:00' as timestamp);\r\n\r\n\r\n/* -----------\r\nIf I change the inserted values to include offsets of +00:00, I get 2 rows although\r\nI would expect only one row to be returned as above.\r\n----------- */\r\ntruncate table table1;\r\n\r\ninsert into table1 values ('2024-05-03T01:00:00+00:00'), ('2024-05-03T01:00:02+00:00');\r\n\r\nselect timestamp_str, cast(timestamp_str as timestamp)\r\nfrom table1\r\nwhere cast(timestamp_str as timestamp) > cast('2024-05-03 01:00:00' as timestamp);\r\n\r\n-- Also does not work if I include the offset in the where statement\r\nselect timestamp_str, cast(timestamp_str as timestamp)\r\nfrom table1\r\nwhere cast(timestamp_str as timestamp) > cast('2024-05-03T01:00:00+00:00' as timestamp);\r\n\r\n/* -----------\r\nIt works when I move the cast into a subquery\r\n----------- */\r\nselect * from (\r\n    select timestamp_str, cast(timestamp_str as timestamp) as timestamp_column\r\n    from table1\r\n)\r\nwhere timestamp_column > cast('2024-05-03 01:00:00' as timestamp);\r\n\r\n```\r\n\r\n### OS:\r\n\r\nLinux\r\n\r\n### DuckDB Version:\r\n\r\n0.10.2\r\n\r\n### DuckDB Client:\r\n\r\nCLI and Python\r\n\r\n### Full Name:\r\n\r\nStefan Binder\r\n\r\n### Affiliation:\r\n\r\nEnergy Infrastructure Partners AG\r\n\r\n### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.\r\n\r\nI have tested with a stable release and the nightly release which was available on 2024-05-03.\r\n\r\n### Did you include all relevant data sets for reproducing the issue?\r\n\r\nYes\r\n\r\n### Did you include all code required to reproduce the issue?\r\n\r\n- [X] Yes, I have\r\n\r\n### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?\r\n\r\n- [X] Yes, I have\nWrong comparison for timestamp depending on if it's in a subquery or not\n### What happens?\r\n\r\nWhen using a timestamp to filter a table on a timestamp column, I get a different result depending on if a timestamp conversion happened in a subquery or not. I hope the example below clarifies it. Let me know if you need more infos!\r\n\r\nI found #11377 which sounds a bit similar.\r\n\r\n### To Reproduce\r\n\r\n```sql\r\n/* -----------\r\nSetup\r\n----------- */\r\ncreate or replace table table1 (\r\n    timestamp_str varchar\r\n);\r\n\r\n\r\n/* -----------\r\nThe code below returns exactly one row as expected\r\n----------- */\r\ninsert into table1 values ('2024-05-03 01:00:00'), ('2024-05-03 01:00:02');\r\n\r\nselect timestamp_str, cast(timestamp_str as timestamp)\r\nfrom table1\r\nwhere cast(timestamp_str as timestamp) > cast('2024-05-03 01:00:00' as timestamp);\r\n\r\n\r\n/* -----------\r\nIf I change the inserted values to include offsets of +00:00, I get 2 rows although\r\nI would expect only one row to be returned as above.\r\n----------- */\r\ntruncate table table1;\r\n\r\ninsert into table1 values ('2024-05-03T01:00:00+00:00'), ('2024-05-03T01:00:02+00:00');\r\n\r\nselect timestamp_str, cast(timestamp_str as timestamp)\r\nfrom table1\r\nwhere cast(timestamp_str as timestamp) > cast('2024-05-03 01:00:00' as timestamp);\r\n\r\n-- Also does not work if I include the offset in the where statement\r\nselect timestamp_str, cast(timestamp_str as timestamp)\r\nfrom table1\r\nwhere cast(timestamp_str as timestamp) > cast('2024-05-03T01:00:00+00:00' as timestamp);\r\n\r\n/* -----------\r\nIt works when I move the cast into a subquery\r\n----------- */\r\nselect * from (\r\n    select timestamp_str, cast(timestamp_str as timestamp) as timestamp_column\r\n    from table1\r\n)\r\nwhere timestamp_column > cast('2024-05-03 01:00:00' as timestamp);\r\n\r\n```\r\n\r\n### OS:\r\n\r\nLinux\r\n\r\n### DuckDB Version:\r\n\r\n0.10.2\r\n\r\n### DuckDB Client:\r\n\r\nCLI and Python\r\n\r\n### Full Name:\r\n\r\nStefan Binder\r\n\r\n### Affiliation:\r\n\r\nEnergy Infrastructure Partners AG\r\n\r\n### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.\r\n\r\nI have tested with a stable release and the nightly release which was available on 2024-05-03.\r\n\r\n### Did you include all relevant data sets for reproducing the issue?\r\n\r\nYes\r\n\r\n### Did you include all code required to reproduce the issue?\r\n\r\n- [X] Yes, I have\r\n\r\n### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?\r\n\r\n- [X] Yes, I have\n",
  "hints_text": "I am quite interested in this problem. \r\nIs anyone working on it? \r\nIf possible, could it be assigned to me?\nI am quite interested in this problem. \r\nIs anyone working on it? \r\nIf possible, could it be assigned to me?",
  "created_at": "2024-06-04T14:59:43Z"
}