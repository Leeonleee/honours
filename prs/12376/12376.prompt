You will be provided with a partial code base and an issue statement explaining a problem to resolve.
In your output, give nothing but the code (no markdown) so that your output can be copy pasted and run immediately with no changes.
In the patch file, please make sure to include the line numbers and a blank line at the end so it can be applied using git apply.

<issue>
Wrong comparison for timestamp depending on if it's in a subquery or not
### What happens?

When using a timestamp to filter a table on a timestamp column, I get a different result depending on if a timestamp conversion happened in a subquery or not. I hope the example below clarifies it. Let me know if you need more infos!

I found #11377 which sounds a bit similar.

### To Reproduce

```sql
/* -----------
Setup
----------- */
create or replace table table1 (
    timestamp_str varchar
);


/* -----------
The code below returns exactly one row as expected
----------- */
insert into table1 values ('2024-05-03 01:00:00'), ('2024-05-03 01:00:02');

select timestamp_str, cast(timestamp_str as timestamp)
from table1
where cast(timestamp_str as timestamp) > cast('2024-05-03 01:00:00' as timestamp);


/* -----------
If I change the inserted values to include offsets of +00:00, I get 2 rows although
I would expect only one row to be returned as above.
----------- */
truncate table table1;

insert into table1 values ('2024-05-03T01:00:00+00:00'), ('2024-05-03T01:00:02+00:00');

select timestamp_str, cast(timestamp_str as timestamp)
from table1
where cast(timestamp_str as timestamp) > cast('2024-05-03 01:00:00' as timestamp);

-- Also does not work if I include the offset in the where statement
select timestamp_str, cast(timestamp_str as timestamp)
from table1
where cast(timestamp_str as timestamp) > cast('2024-05-03T01:00:00+00:00' as timestamp);

/* -----------
It works when I move the cast into a subquery
----------- */
select * from (
    select timestamp_str, cast(timestamp_str as timestamp) as timestamp_column
    from table1
)
where timestamp_column > cast('2024-05-03 01:00:00' as timestamp);

```

### OS:

Linux

### DuckDB Version:

0.10.2

### DuckDB Client:

CLI and Python

### Full Name:

Stefan Binder

### Affiliation:

Energy Infrastructure Partners AG

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have tested with a stable release and the nightly release which was available on 2024-05-03.

### Did you include all relevant data sets for reproducing the issue?

Yes

### Did you include all code required to reproduce the issue?

- [X] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [X] Yes, I have
Wrong comparison for timestamp depending on if it's in a subquery or not
### What happens?

When using a timestamp to filter a table on a timestamp column, I get a different result depending on if a timestamp conversion happened in a subquery or not. I hope the example below clarifies it. Let me know if you need more infos!

I found #11377 which sounds a bit similar.

### To Reproduce

```sql
/* -----------
Setup
----------- */
create or replace table table1 (
    timestamp_str varchar
);


/* -----------
The code below returns exactly one row as expected
----------- */
insert into table1 values ('2024-05-03 01:00:00'), ('2024-05-03 01:00:02');

select timestamp_str, cast(timestamp_str as timestamp)
from table1
where cast(timestamp_str as timestamp) > cast('2024-05-03 01:00:00' as timestamp);


/* -----------
If I change the inserted values to include offsets of +00:00, I get 2 rows although
I would expect only one row to be returned as above.
----------- */
truncate table table1;

insert into table1 values ('2024-05-03T01:00:00+00:00'), ('2024-05-03T01:00:02+00:00');

select timestamp_str, cast(timestamp_str as timestamp)
from table1
where cast(timestamp_str as timestamp) > cast('2024-05-03 01:00:00' as timestamp);

-- Also does not work if I include the offset in the where statement
select timestamp_str, cast(timestamp_str as timestamp)
from table1
where cast(timestamp_str as timestamp) > cast('2024-05-03T01:00:00+00:00' as timestamp);

/* -----------
It works when I move the cast into a subquery
----------- */
select * from (
    select timestamp_str, cast(timestamp_str as timestamp) as timestamp_column
    from table1
)
where timestamp_column > cast('2024-05-03 01:00:00' as timestamp);

```

### OS:

Linux

### DuckDB Version:

0.10.2

### DuckDB Client:

CLI and Python

### Full Name:

Stefan Binder

### Affiliation:

Energy Infrastructure Partners AG

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have tested with a stable release and the nightly release which was available on 2024-05-03.

### Did you include all relevant data sets for reproducing the issue?

Yes

### Did you include all code required to reproduce the issue?

- [X] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [X] Yes, I have

</issue>
<code>
[start of README.md]
1: <div align="center">
2:   <picture>
3:     <source media="(prefers-color-scheme: light)" srcset="logo/DuckDB_Logo-horizontal.svg">
4:     <source media="(prefers-color-scheme: dark)" srcset="logo/DuckDB_Logo-horizontal-dark-mode.svg">
5:     <img alt="DuckDB logo" src="logo/DuckDB_Logo-horizontal.svg" height="100">
6:   </picture>
7: </div>
8: <br>
9: 
10: <p align="center">
11:   <a href="https://github.com/duckdb/duckdb/actions"><img src="https://github.com/duckdb/duckdb/actions/workflows/Main.yml/badge.svg?branch=main" alt="Github Actions Badge"></a>
12:   <a href="https://discord.gg/tcvwpjfnZx"><img src="https://shields.io/discord/909674491309850675" alt="discord" /></a>
13:   <a href="https://github.com/duckdb/duckdb/releases/"><img src="https://img.shields.io/github/v/release/duckdb/duckdb?color=brightgreen&display_name=tag&logo=duckdb&logoColor=white" alt="Latest Release"></a>
14: </p>
15: 
16: ## DuckDB
17: 
18: DuckDB is a high-performance analytical database system. It is designed to be fast, reliable, portable, and easy to use. DuckDB provides a rich SQL dialect, with support far beyond basic SQL. DuckDB supports arbitrary and nested correlated subqueries, window functions, collations, complex types (arrays, structs, maps), and [several extensions designed to make SQL easier to use](https://duckdb.org/docs/guides/sql_features/friendly_sql).
19: 
20: DuckDB is available as a [standalone CLI application](https://duckdb.org/docs/api/cli/overview) and has clients for [Python](https://duckdb.org/docs/api/python/overview), [R](https://duckdb.org/docs/api/r), [Java](https://duckdb.org/docs/api/java), [Wasm](https://duckdb.org/docs/api/wasm/overview), etc., with deep integrations with packages such as [pandas](https://duckdb.org/docs/guides/python/sql_on_pandas) and [dplyr](https://duckdblabs.github.io/duckplyr/).
21: 
22: For more information on using DuckDB, please refer to the [DuckDB documentation](https://duckdb.org/docs/).
23: 
24: ## Installation
25: 
26: If you want to install DuckDB, please see [our installation page](https://www.duckdb.org/docs/installation) for instructions.
27: 
28: ## Data Import
29: 
30: For CSV files and Parquet files, data import is as simple as referencing the file in the FROM clause:
31: 
32: ```sql
33: SELECT * FROM 'myfile.csv';
34: SELECT * FROM 'myfile.parquet';
35: ```
36: 
37: Refer to our [Data Import](https://duckdb.org/docs/data/overview) section for more information.
38: 
39: ## SQL Reference
40: 
41: The documentation contains a [SQL introduction and reference](https://duckdb.org/docs/sql/introduction).
42: 
43: ## Development
44: 
45: For development, DuckDB requires [CMake](https://cmake.org), Python3 and a `C++11` compliant compiler. Run `make` in the root directory to compile the sources. For development, use `make debug` to build a non-optimized debug version. You should run `make unit` and `make allunit` to verify that your version works properly after making changes. To test performance, you can run `BUILD_BENCHMARK=1 BUILD_TPCH=1 make` and then perform several standard benchmarks from the root directory by executing `./build/release/benchmark/benchmark_runner`. The details of benchmarks are in our [Benchmark Guide](benchmark/README.md).
46: 
47: Please also refer to our [Build Guide](https://duckdb.org/dev/building) and [Contribution Guide](CONTRIBUTING.md).
48: 
49: ## Support
50: 
51: See the [Support Options](https://duckdblabs.com/support/) page.
[end of README.md]
[start of src/planner/expression/bound_cast_expression.cpp]
1: #include "duckdb/planner/expression/bound_cast_expression.hpp"
2: #include "duckdb/planner/expression/bound_default_expression.hpp"
3: #include "duckdb/planner/expression/bound_parameter_expression.hpp"
4: #include "duckdb/planner/expression/bound_constant_expression.hpp"
5: #include "duckdb/function/cast_rules.hpp"
6: #include "duckdb/function/cast/cast_function_set.hpp"
7: #include "duckdb/main/config.hpp"
8: 
9: namespace duckdb {
10: 
11: static BoundCastInfo BindCastFunction(ClientContext &context, const LogicalType &source, const LogicalType &target) {
12: 	auto &cast_functions = DBConfig::GetConfig(context).GetCastFunctions();
13: 	GetCastFunctionInput input(context);
14: 	return cast_functions.GetCastFunction(source, target, input);
15: }
16: 
17: BoundCastExpression::BoundCastExpression(unique_ptr<Expression> child_p, LogicalType target_type_p,
18:                                          BoundCastInfo bound_cast_p, bool try_cast_p)
19:     : Expression(ExpressionType::OPERATOR_CAST, ExpressionClass::BOUND_CAST, std::move(target_type_p)),
20:       child(std::move(child_p)), try_cast(try_cast_p), bound_cast(std::move(bound_cast_p)) {
21: }
22: 
23: BoundCastExpression::BoundCastExpression(ClientContext &context, unique_ptr<Expression> child_p,
24:                                          LogicalType target_type_p)
25:     : Expression(ExpressionType::OPERATOR_CAST, ExpressionClass::BOUND_CAST, std::move(target_type_p)),
26:       child(std::move(child_p)), try_cast(false),
27:       bound_cast(BindCastFunction(context, child->return_type, return_type)) {
28: }
29: 
30: unique_ptr<Expression> AddCastExpressionInternal(unique_ptr<Expression> expr, const LogicalType &target_type,
31:                                                  BoundCastInfo bound_cast, bool try_cast) {
32: 	if (ExpressionBinder::GetExpressionReturnType(*expr) == target_type) {
33: 		return expr;
34: 	}
35: 	auto &expr_type = expr->return_type;
36: 	if (target_type.id() == LogicalTypeId::LIST && expr_type.id() == LogicalTypeId::LIST) {
37: 		auto &target_list = ListType::GetChildType(target_type);
38: 		auto &expr_list = ListType::GetChildType(expr_type);
39: 		if (target_list.id() == LogicalTypeId::ANY || expr_list == target_list) {
40: 			return expr;
41: 		}
42: 	}
43: 	auto result = make_uniq<BoundCastExpression>(std::move(expr), target_type, std::move(bound_cast), try_cast);
44: 	result->query_location = result->child->query_location;
45: 	return std::move(result);
46: }
47: 
48: unique_ptr<Expression> AddCastToTypeInternal(unique_ptr<Expression> expr, const LogicalType &target_type,
49:                                              CastFunctionSet &cast_functions, GetCastFunctionInput &get_input,
50:                                              bool try_cast) {
51: 	D_ASSERT(expr);
52: 	if (expr->expression_class == ExpressionClass::BOUND_PARAMETER) {
53: 		auto &parameter = expr->Cast<BoundParameterExpression>();
54: 		if (!target_type.IsValid()) {
55: 			// invalidate the parameter
56: 			parameter.parameter_data->return_type = LogicalType::INVALID;
57: 			parameter.return_type = target_type;
58: 			return expr;
59: 		}
60: 		if (parameter.parameter_data->return_type.id() == LogicalTypeId::INVALID) {
61: 			// we don't know the type of this parameter
62: 			parameter.return_type = target_type;
63: 			return expr;
64: 		}
65: 		if (parameter.parameter_data->return_type.id() == LogicalTypeId::UNKNOWN) {
66: 			// prepared statement parameter cast - but there is no type, convert the type
67: 			parameter.parameter_data->return_type = target_type;
68: 			parameter.return_type = target_type;
69: 			return expr;
70: 		}
71: 		// prepared statement parameter already has a type
72: 		if (parameter.parameter_data->return_type == target_type) {
73: 			// this type! we are done
74: 			parameter.return_type = parameter.parameter_data->return_type;
75: 			return expr;
76: 		}
77: 		// invalidate the type
78: 		parameter.parameter_data->return_type = LogicalType::INVALID;
79: 		parameter.return_type = target_type;
80: 		return expr;
81: 	} else if (expr->expression_class == ExpressionClass::BOUND_DEFAULT) {
82: 		D_ASSERT(target_type.IsValid());
83: 		auto &def = expr->Cast<BoundDefaultExpression>();
84: 		def.return_type = target_type;
85: 	}
86: 	if (!target_type.IsValid()) {
87: 		return expr;
88: 	}
89: 
90: 	auto cast_function = cast_functions.GetCastFunction(expr->return_type, target_type, get_input);
91: 	return AddCastExpressionInternal(std::move(expr), target_type, std::move(cast_function), try_cast);
92: }
93: 
94: unique_ptr<Expression> BoundCastExpression::AddDefaultCastToType(unique_ptr<Expression> expr,
95:                                                                  const LogicalType &target_type, bool try_cast) {
96: 	CastFunctionSet default_set;
97: 	GetCastFunctionInput get_input;
98: 	get_input.query_location = expr->query_location;
99: 	return AddCastToTypeInternal(std::move(expr), target_type, default_set, get_input, try_cast);
100: }
101: 
102: unique_ptr<Expression> BoundCastExpression::AddCastToType(ClientContext &context, unique_ptr<Expression> expr,
103:                                                           const LogicalType &target_type, bool try_cast) {
104: 	auto &cast_functions = DBConfig::GetConfig(context).GetCastFunctions();
105: 	GetCastFunctionInput get_input(context);
106: 	get_input.query_location = expr->query_location;
107: 	return AddCastToTypeInternal(std::move(expr), target_type, cast_functions, get_input, try_cast);
108: }
109: 
110: unique_ptr<Expression> BoundCastExpression::AddArrayCastToList(ClientContext &context, unique_ptr<Expression> expr) {
111: 	if (expr->return_type.id() != LogicalTypeId::ARRAY) {
112: 		return expr;
113: 	}
114: 	auto &child_type = ArrayType::GetChildType(expr->return_type);
115: 	return BoundCastExpression::AddCastToType(context, std::move(expr), LogicalType::LIST(child_type));
116: }
117: 
118: bool BoundCastExpression::CastIsInvertible(const LogicalType &source_type, const LogicalType &target_type) {
119: 	D_ASSERT(source_type.IsValid() && target_type.IsValid());
120: 	if (source_type.id() == LogicalTypeId::BOOLEAN || target_type.id() == LogicalTypeId::BOOLEAN) {
121: 		return false;
122: 	}
123: 	if (source_type.id() == LogicalTypeId::FLOAT || target_type.id() == LogicalTypeId::FLOAT) {
124: 		return false;
125: 	}
126: 	if (source_type.id() == LogicalTypeId::DOUBLE || target_type.id() == LogicalTypeId::DOUBLE) {
127: 		return false;
128: 	}
129: 	if (source_type.id() == LogicalTypeId::DECIMAL || target_type.id() == LogicalTypeId::DECIMAL) {
130: 		uint8_t source_width, target_width;
131: 		uint8_t source_scale, target_scale;
132: 		// cast to or from decimal
133: 		// cast is only invertible if the cast is strictly widening
134: 		if (!source_type.GetDecimalProperties(source_width, source_scale)) {
135: 			return false;
136: 		}
137: 		if (!target_type.GetDecimalProperties(target_width, target_scale)) {
138: 			return false;
139: 		}
140: 		if (target_scale < source_scale) {
141: 			return false;
142: 		}
143: 		return true;
144: 	}
145: 	switch (source_type.id()) {
146: 	case LogicalTypeId::TIMESTAMP:
147: 	case LogicalTypeId::TIMESTAMP_TZ:
148: 	case LogicalTypeId::TIMESTAMP_SEC:
149: 	case LogicalTypeId::TIMESTAMP_MS:
150: 	case LogicalTypeId::TIMESTAMP_NS:
151: 		switch (target_type.id()) {
152: 		case LogicalTypeId::DATE:
153: 		case LogicalTypeId::TIME:
154: 		case LogicalTypeId::TIME_TZ:
155: 			return false;
156: 		default:
157: 			break;
158: 		}
159: 		break;
160: 	case LogicalTypeId::VARCHAR:
161: 		switch (target_type.id()) {
162: 		case LogicalTypeId::TIMESTAMP:
163: 		case LogicalTypeId::TIMESTAMP_NS:
164: 		case LogicalTypeId::TIMESTAMP_MS:
165: 		case LogicalTypeId::TIMESTAMP_SEC:
166: 		case LogicalTypeId::TIMESTAMP_TZ:
167: 			return true;
168: 		default:
169: 			return false;
170: 		}
171: 		break;
172: 	default:
173: 		break;
174: 	}
175: 	if (target_type.id() == LogicalTypeId::VARCHAR) {
176: 		switch (source_type.id()) {
177: 		case LogicalTypeId::DATE:
178: 		case LogicalTypeId::TIME:
179: 		case LogicalTypeId::TIMESTAMP:
180: 		case LogicalTypeId::TIMESTAMP_NS:
181: 		case LogicalTypeId::TIMESTAMP_MS:
182: 		case LogicalTypeId::TIMESTAMP_SEC:
183: 		case LogicalTypeId::TIME_TZ:
184: 		case LogicalTypeId::TIMESTAMP_TZ:
185: 			return true;
186: 		default:
187: 			return false;
188: 		}
189: 	}
190: 	return true;
191: }
192: 
193: string BoundCastExpression::ToString() const {
194: 	return (try_cast ? "TRY_CAST(" : "CAST(") + child->GetName() + " AS " + return_type.ToString() + ")";
195: }
196: 
197: bool BoundCastExpression::Equals(const BaseExpression &other_p) const {
198: 	if (!Expression::Equals(other_p)) {
199: 		return false;
200: 	}
201: 	auto &other = other_p.Cast<BoundCastExpression>();
202: 	if (!Expression::Equals(*child, *other.child)) {
203: 		return false;
204: 	}
205: 	if (try_cast != other.try_cast) {
206: 		return false;
207: 	}
208: 	return true;
209: }
210: 
211: unique_ptr<Expression> BoundCastExpression::Copy() {
212: 	auto copy = make_uniq<BoundCastExpression>(child->Copy(), return_type, bound_cast.Copy(), try_cast);
213: 	copy->CopyProperties(*this);
214: 	return std::move(copy);
215: }
216: 
217: } // namespace duckdb
[end of src/planner/expression/bound_cast_expression.cpp]
</code>
Here is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.
<patch>
--- a/file.cpp
+++ b/file.cpp
@@ -3,35 +3,44 @@
 #include <cstdlib>
 
 int euclidean(int a, int b) {
-    while (b) {
-        int temp = b;
-        b = a % b;
-        a = temp;
+    if (b == 0) {
+        return a;
     }
-    return a;
+    return euclidean(b, a % b);
 }
 
 std::vector<std::pair<int, int>> bresenham(int x0, int y0, int x1, int y1) {
     std::vector<std::pair<int, int>> points;
     int dx = abs(x1 - x0);
     int dy = abs(y1 - y0);
+    int x = x0, y = y0;
     int sx = (x0 < x1) ? 1 : -1;
     int sy = (y0 < y1) ? 1 : -1;
-    int err = dx - dy;
 
-    while (true) {
-        points.emplace_back(x0, y0);
-        if (x0 == x1 && y0 == y1) break;
-        int e2 = 2 * err;
-        if (e2 > -dy) {
+    if (dx > dy) {
+        int err = dx / 2;
+        while (x != x1) {
+            points.emplace_back(x, y);
             err -= dy;
-            x0 += sx;
+            if (err < 0) {
+                y += sy;
+                err += dx;
+            }
+            x += sx;
         }
-        if (e2 < dx) {
-            err += dx;
-            y0 += sy;
+    } else {
+        int err = dy / 2;
+        while (y != y1) {
+            points.emplace_back(x, y);
+            err -= dx;
+            if (err < 0) {
+                x += sx;
+                err += dy;
+            }
+            y += sy;
         }
     }
 
+    points.emplace_back(x, y);
     return points;
 }

</patch>

I need you to solve the provided issue by generating a single patch file that I can apply directly to this repository using git apply.
Please respond with a single patch file in the format shown above.
Make sure to only include the patch file contents so that the contents of your output can be copied into a patch file and applied directly

Respond below: