{
  "repo": "duckdb/duckdb",
  "pull_number": 1953,
  "instance_id": "duckdb__duckdb-1953",
  "issue_numbers": [
    "1189"
  ],
  "base_commit": "35176b99b995799dc0a2958920079f77e9610dc8",
  "patch": "diff --git a/src/catalog/catalog_entry/view_catalog_entry.cpp b/src/catalog/catalog_entry/view_catalog_entry.cpp\nindex 4e3d42afb1e3..ca5c43217fc1 100644\n--- a/src/catalog/catalog_entry/view_catalog_entry.cpp\n+++ b/src/catalog/catalog_entry/view_catalog_entry.cpp\n@@ -81,7 +81,8 @@ unique_ptr<CreateViewInfo> ViewCatalogEntry::Deserialize(Deserializer &source) {\n \n string ViewCatalogEntry::ToSQL() {\n \tif (sql.empty()) {\n-\t\tthrow NotImplementedException(\"Cannot convert VIEW to SQL because it was not created with a SQL statement\");\n+\t\t//! Return empty sql with view name so pragma view_tables don't complain\n+\t\treturn sql;\n \t}\n \treturn sql + \"\\n;\";\n }\n",
  "test_patch": "diff --git a/tools/pythonpkg/tests/arrow/test_view.py b/tools/pythonpkg/tests/arrow/test_view.py\nnew file mode 100644\nindex 000000000000..3a4a384c52f0\n--- /dev/null\n+++ b/tools/pythonpkg/tests/arrow/test_view.py\n@@ -0,0 +1,22 @@\n+import duckdb\n+import os\n+import sys\n+try:\n+    import pyarrow\n+    import pyarrow.parquet\n+    can_run = True\n+except:\n+    can_run = False\n+\n+class TestArrowView(object):\n+    def test_arrow_view(self, duckdb_cursor):\n+        if not can_run:\n+            return\n+        parquet_filename = os.path.join(os.path.dirname(os.path.realpath(__file__)),'data','userdata1.parquet')\n+        cols = 'id, first_name, last_name, email, gender, ip_address, cc, country, birthdate, salary, title, comments'\n+        duckdb_conn = duckdb.connect()\n+        userdata_parquet_table = pyarrow.parquet.read_table(parquet_filename)\n+        userdata_parquet_table.validate(full=True)\n+        duckdb_conn.from_arrow_table(userdata_parquet_table).create_view('arrow_view')\n+        assert (duckdb_conn.execute(\"PRAGMA show_tables\").fetchone() == ('arrow_view',))\n+        assert(duckdb_conn.execute(\"select avg(salary)::INT from arrow_view\").fetchone()[0] == 149005)\n",
  "problem_statement": "Joining 3 arrow tables\nIf I have 3 pandas dataframes I can register 3 dataframes and can write execute sql to join all 3 tables and thinking of how to do the same with arrow table.\r\nExample for pandas\r\ndb= duckdb.connect(database=\":memory:\")\r\ndb.register(\"a\",dataframe_a)\r\ndb.register(\"b\",dataframe_b)\r\ndb.register(\"c\",dataframe_c)\r\ndb.execute(\"select * from a inner join b on a.col1=b.col1 inner join c on b.col2=c.col1\").arrow()\r\n\r\nI see duckdb.from_arrow_table but it seems Ilike standalone table unlike  pandas dataframe\n",
  "hints_text": "The function `duckdb.from_arrow_table` returns a relation. Any relation can be turned into a view by using the `create_view` method. The Pandas `register` method is only shorthand for `db.from_df(df).create_view('a')`. For an arrow table you can use the following syntax to create a view:\r\n\r\n```python\r\ndb.from_arrow_table(tbl).create_view('a')\r\n```\r\n\r\nYou can then use the view in any queries.\r\n\r\nThe arrow support is still somewhat new so let us know if you run into any issues.\nHi, many thanks for the very nice project!\r\nRelated to the above issue\r\n\r\ndf_new is an arrow table\r\n`con.from_arrow_table(df_new).create_view('df_duckview2')`\r\nreturns -Expression Tree-, -Result Columns- -Result Preview- all good!\r\n\r\n```\r\ncon.execute(\"PRAGMA show_tables\")\r\n```\r\nReturns RuntimeError: Not implemented Error: Cannot convert VIEW to SQL because it was not created with a SQL statement\r\n\r\n```\r\ncon.execute(\"SELECT count(*) FROM df_duckview2\")\r\nprint(con.fetchall())\r\n```\r\n\r\nreturns 0 even though the df2 contains data\r\nAlso the next time I try to re-run I get:\r\nRuntimeError: Invalid Input Error: arrow_scan: get_schema failed(): stream was released\r\n\r\n```\r\ncon.execute(\"PRAGMA table_info('df_duckview2')\")\r\nprint(con.fetchall())\r\n\r\n```\r\nreturns the correct schema\r\n\r\n\r\nWhereas if instead of a view I register a table:\r\n`con.from_arrow_table(df_new).create('df_duckview2')`\r\nall works well:\r\n```\r\nPRAGMA show_tables\r\nPRAGMA table_info('df_duckview2')\r\ncon.execute(\"SELECT count(*) FROM df_duckview2\")\r\nprint(con.fetchone())\r\n```\r\n_____________________________________________\r\npyarrow = 3.0.0\r\nduckdb = 0.2.4\r\n\r\nLet me know if you need any further info.\r\nMany thanks again!",
  "created_at": "2021-07-03T11:08:55Z"
}