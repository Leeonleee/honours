{
  "repo": "duckdb/duckdb",
  "pull_number": 3011,
  "instance_id": "duckdb__duckdb-3011",
  "issue_numbers": [
    "2986",
    "2986"
  ],
  "base_commit": "506b05a102a566d8e4a2d2376fbffdf90c5fd711",
  "patch": "diff --git a/third_party/libpg_query/pg_functions.cpp b/third_party/libpg_query/pg_functions.cpp\nindex ae644db1177a..7d5392da86fb 100644\n--- a/third_party/libpg_query/pg_functions.cpp\n+++ b/third_party/libpg_query/pg_functions.cpp\n@@ -55,12 +55,17 @@ static void allocate_new(parser_state *state, size_t n) {\n \n void *palloc(size_t n) {\n \t// we need to align our pointers for the sanitizer\n-\tauto aligned_n = ((n + 7) / 8) * 8;\n+\tauto allocate_n = n + sizeof(size_t);\n+\tauto aligned_n = ((allocate_n + 7) / 8) * 8;\n \tif (pg_parser_state.malloc_pos + aligned_n > PG_MALLOC_SIZE) {\n \t\tallocate_new(&pg_parser_state, aligned_n);\n \t}\n \n-\tvoid *ptr = pg_parser_state.malloc_ptrs[pg_parser_state.malloc_ptr_idx - 1] + pg_parser_state.malloc_pos;\n+\t// store the length of the allocation\n+\tchar *base_ptr = pg_parser_state.malloc_ptrs[pg_parser_state.malloc_ptr_idx - 1] + pg_parser_state.malloc_pos;\n+\tmemcpy(base_ptr, &n, sizeof(size_t));\n+\t// store the actual pointer\n+\tchar *ptr = (char*) base_ptr + sizeof(size_t);\n \tmemset(ptr, 0, n);\n \tpg_parser_state.malloc_pos += aligned_n;\n \treturn ptr;\n@@ -173,7 +178,14 @@ void *palloc0fast(size_t n) { // very fast\n \treturn palloc(n);\n }\n void *repalloc(void *ptr, size_t n) {\n-\treturn palloc(n);\n+\t// get the length of the allocation\n+\tsize_t old_len;\n+\tchar *old_len_ptr = (char *) ptr - sizeof(size_t);\n+\tmemcpy((void *) &old_len, old_len_ptr, sizeof(size_t));\n+\t// re-allocate and copy the data\n+\tvoid *new_buf = palloc(n);\n+\tmemcpy(new_buf, ptr, old_len);\n+\treturn new_buf;\n }\n char *NameListToString(PGList *names) {\n \tthrow std::runtime_error(\"NameListToString NOT IMPLEMENTED\");\n",
  "test_patch": "diff --git a/test/sql/json/large_quoted_string_constant.test b/test/sql/json/large_quoted_string_constant.test\nnew file mode 100644\nindex 000000000000..b1d21279f2e9\n--- /dev/null\n+++ b/test/sql/json/large_quoted_string_constant.test\n@@ -0,0 +1,84 @@\n+# name: test/sql/json/large_quoted_string_constant.test\n+# description: Issue #2986: Large string constant with quotes\n+# group: [json]\n+\n+statement ok\n+CREATE TABLE j2 (id INT, json VARCHAR, src VARCHAR);\n+\n+statement ok\n+INSERT INTO j2(id,json,src)\n+    VALUES(3,'[\n+    {\n+        \"id\": \"0001\",\n+        \"type\": \"donut\",\n+        \"name\": \"Cake\",\n+        \"ppu\": 0.55,\n+        \"batters\":\n+            {\n+                \"batter\":\n+                    [\n+                        { \"id\": \"1001\", \"type\": \"Regular\" },\n+                        { \"id\": \"1002\", \"type\": \"Chocolate\" },\n+                        { \"id\": \"1003\", \"type\": \"Blueberry\" },\n+                        { \"id\": \"1004\", \"type\": \"Devil''s Food\" }\n+                    ]\n+            },\n+        \"topping\":\n+            [\n+                { \"id\": \"5001\", \"type\": \"None\" },\n+                { \"id\": \"5002\", \"type\": \"Glazed\" },\n+                { \"id\": \"5005\", \"type\": \"Sugar\" },\n+                { \"id\": \"5007\", \"type\": \"Powdered Sugar\" },\n+                { \"id\": \"5006\", \"type\": \"Chocolate with Sprinkles\" },\n+                { \"id\": \"5003\", \"type\": \"Chocolate\" },\n+                { \"id\": \"5004\", \"type\": \"Maple\" }\n+            ]\n+    },\n+    {\n+        \"id\": \"0002\",\n+        \"type\": \"donut\",\n+        \"name\": \"Raised\",\n+        \"ppu\": 0.55,\n+        \"batters\":\n+            {\n+                \"batter\":\n+                    [\n+                        { \"id\": \"1001\", \"type\": \"Regular\" }\n+                    ]\n+            },\n+        \"topping\":\n+            [\n+                { \"id\": \"5001\", \"type\": \"None\" },\n+                { \"id\": \"5002\", \"type\": \"Glazed\" },\n+                { \"id\": \"5005\", \"type\": \"Sugar\" },\n+                { \"id\": \"5003\", \"type\": \"Chocolate\" },\n+                { \"id\": \"5004\", \"type\": \"Maple\" }\n+            ]\n+    },\n+    {\n+        \"id\": \"0003\",\n+        \"type\": \"donut\",\n+        \"name\": \"Old Fashioned\",\n+        \"ppu\": 0.55,\n+        \"batters\":\n+            {\n+                \"batter\":\n+                    [\n+                        { \"id\": \"1001\", \"type\": \"Regular\" },\n+                        { \"id\": \"1002\", \"type\": \"Chocolate\" }\n+                    ]\n+            },\n+        \"topping\":\n+            [\n+                { \"id\": \"5001\", \"type\": \"None\" },\n+                { \"id\": \"5002\", \"type\": \"Glazed\" },\n+                { \"id\": \"5003\", \"type\": \"Chocolate\" },\n+                { \"id\": \"5004\", \"type\": \"Maple\" }\n+            ]\n+    }\n+    ]','https://adobe.github.io/Spry/samples/data_region/JSONDataSetSample.html');\n+\n+query I\n+SELECT len(json) FROM j2;\n+----\n+2115\n",
  "problem_statement": "Long string with double apostrophe becomes empty string\n#### What happens?\r\nA long string with an apostrophe becomes an empty string.\r\n\r\n#### To Reproduce\r\n```sql\r\nCREATE TABLE j2 (id INT, json VARCHAR, src VARCHAR);\r\nINSERT INTO j2(id,json,src)\r\n    VALUES(3,'[\r\n    {\r\n        \"id\": \"0001\",\r\n        \"type\": \"donut\",\r\n        \"name\": \"Cake\",\r\n        \"ppu\": 0.55,\r\n        \"batters\":\r\n            {\r\n                \"batter\":\r\n                    [\r\n                        { \"id\": \"1001\", \"type\": \"Regular\" },\r\n                        { \"id\": \"1002\", \"type\": \"Chocolate\" },\r\n                        { \"id\": \"1003\", \"type\": \"Blueberry\" },\r\n                        { \"id\": \"1004\", \"type\": \"Devil''s Food\" }\r\n                    ]\r\n            },\r\n        \"topping\":\r\n            [\r\n                { \"id\": \"5001\", \"type\": \"None\" },\r\n                { \"id\": \"5002\", \"type\": \"Glazed\" },\r\n                { \"id\": \"5005\", \"type\": \"Sugar\" },\r\n                { \"id\": \"5007\", \"type\": \"Powdered Sugar\" },\r\n                { \"id\": \"5006\", \"type\": \"Chocolate with Sprinkles\" },\r\n                { \"id\": \"5003\", \"type\": \"Chocolate\" },\r\n                { \"id\": \"5004\", \"type\": \"Maple\" }\r\n            ]\r\n    },\r\n    {\r\n        \"id\": \"0002\",\r\n        \"type\": \"donut\",\r\n        \"name\": \"Raised\",\r\n        \"ppu\": 0.55,\r\n        \"batters\":\r\n            {\r\n                \"batter\":\r\n                    [\r\n                        { \"id\": \"1001\", \"type\": \"Regular\" }\r\n                    ]\r\n            },\r\n        \"topping\":\r\n            [\r\n                { \"id\": \"5001\", \"type\": \"None\" },\r\n                { \"id\": \"5002\", \"type\": \"Glazed\" },\r\n                { \"id\": \"5005\", \"type\": \"Sugar\" },\r\n                { \"id\": \"5003\", \"type\": \"Chocolate\" },\r\n                { \"id\": \"5004\", \"type\": \"Maple\" }\r\n            ]\r\n    },\r\n    {\r\n        \"id\": \"0003\",\r\n        \"type\": \"donut\",\r\n        \"name\": \"Old Fashioned\",\r\n        \"ppu\": 0.55,\r\n        \"batters\":\r\n            {\r\n                \"batter\":\r\n                    [\r\n                        { \"id\": \"1001\", \"type\": \"Regular\" },\r\n                        { \"id\": \"1002\", \"type\": \"Chocolate\" }\r\n                    ]\r\n            },\r\n        \"topping\":\r\n            [\r\n                { \"id\": \"5001\", \"type\": \"None\" },\r\n                { \"id\": \"5002\", \"type\": \"Glazed\" },\r\n                { \"id\": \"5003\", \"type\": \"Chocolate\" },\r\n                { \"id\": \"5004\", \"type\": \"Maple\" }\r\n            ]\r\n    }\r\n    ]','https://adobe.github.io/Spry/samples/data_region/JSONDataSetSample.html');\r\nSELECT json = '' FROM j2;\r\n-- true\r\n```\r\nWe would expect the query to return `false`.\r\n\r\nThe bug does not occur when I remove the `''` from `\"Devil''s Food\"`.\r\nThe bug also does not appear when the string is much shorter, e.g.:\r\n```sql\r\nCREATE TABLE j2 (id INT, json VARCHAR, src VARCHAR);\r\nINSERT INTO j2(id,json,src)\r\n    VALUES(3,'[\r\n    {\r\n        \"id\": \"0001\",\r\n        \"type\": \"donut\",\r\n        \"name\": \"Cake\",\r\n        \"ppu\": 0.55,\r\n        \"batters\":\r\n            {\r\n                \"batter\":\r\n                    [\r\n                        { \"id\": \"1001\", \"type\": \"Regular\" },\r\n                        { \"id\": \"1002\", \"type\": \"Chocolate\" },\r\n                        { \"id\": \"1003\", \"type\": \"Blueberry\" },\r\n                        { \"id\": \"1004\", \"type\": \"Devil''s Food\" }\r\n                    ]\r\n            },\r\n        \"topping\":\r\n            [\r\n                { \"id\": \"5001\", \"type\": \"None\" },\r\n                { \"id\": \"5002\", \"type\": \"Glazed\" },\r\n                { \"id\": \"5005\", \"type\": \"Sugar\" },\r\n                { \"id\": \"5007\", \"type\": \"Powdered Sugar\" },\r\n                { \"id\": \"5006\", \"type\": \"Chocolate with Sprinkles\" },\r\n                { \"id\": \"5003\", \"type\": \"Chocolate\" },\r\n                { \"id\": \"5004\", \"type\": \"Maple\" }\r\n            ]\r\n    }\r\n    ]','https://adobe.github.io/Spry/samples/data_region/JSONDataSetSample.html');\r\nSELECT json = '' FROM j2;\r\n-- false\r\n```\r\n\r\nThe string is stored correctly. I ran the same query in Postgres to see if it has something to do with the parser, but there it worked fine.\r\n\r\n#### Environment (please complete the following information):\r\n - OS: macOS\r\n - DuckDB Version: master\r\n - DuckDB Client: CLI\r\n\r\n#### Before Submitting\r\n\r\n- [x] **Have you tried this on the latest `master` branch?**\r\n* **Python**: `pip install duckdb --upgrade --pre`\r\n* **R**: `install.packages(\"https://github.com/duckdb/duckdb/releases/download/master-builds/duckdb_r_src.tar.gz\", repos = NULL)`\r\n* **Other Platforms**: You can find binaries [here](https://github.com/duckdb/duckdb/releases/tag/master-builds) or compile from source.\r\n\r\n- [x] **Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?**\r\n\nLong string with double apostrophe becomes empty string\n#### What happens?\r\nA long string with an apostrophe becomes an empty string.\r\n\r\n#### To Reproduce\r\n```sql\r\nCREATE TABLE j2 (id INT, json VARCHAR, src VARCHAR);\r\nINSERT INTO j2(id,json,src)\r\n    VALUES(3,'[\r\n    {\r\n        \"id\": \"0001\",\r\n        \"type\": \"donut\",\r\n        \"name\": \"Cake\",\r\n        \"ppu\": 0.55,\r\n        \"batters\":\r\n            {\r\n                \"batter\":\r\n                    [\r\n                        { \"id\": \"1001\", \"type\": \"Regular\" },\r\n                        { \"id\": \"1002\", \"type\": \"Chocolate\" },\r\n                        { \"id\": \"1003\", \"type\": \"Blueberry\" },\r\n                        { \"id\": \"1004\", \"type\": \"Devil''s Food\" }\r\n                    ]\r\n            },\r\n        \"topping\":\r\n            [\r\n                { \"id\": \"5001\", \"type\": \"None\" },\r\n                { \"id\": \"5002\", \"type\": \"Glazed\" },\r\n                { \"id\": \"5005\", \"type\": \"Sugar\" },\r\n                { \"id\": \"5007\", \"type\": \"Powdered Sugar\" },\r\n                { \"id\": \"5006\", \"type\": \"Chocolate with Sprinkles\" },\r\n                { \"id\": \"5003\", \"type\": \"Chocolate\" },\r\n                { \"id\": \"5004\", \"type\": \"Maple\" }\r\n            ]\r\n    },\r\n    {\r\n        \"id\": \"0002\",\r\n        \"type\": \"donut\",\r\n        \"name\": \"Raised\",\r\n        \"ppu\": 0.55,\r\n        \"batters\":\r\n            {\r\n                \"batter\":\r\n                    [\r\n                        { \"id\": \"1001\", \"type\": \"Regular\" }\r\n                    ]\r\n            },\r\n        \"topping\":\r\n            [\r\n                { \"id\": \"5001\", \"type\": \"None\" },\r\n                { \"id\": \"5002\", \"type\": \"Glazed\" },\r\n                { \"id\": \"5005\", \"type\": \"Sugar\" },\r\n                { \"id\": \"5003\", \"type\": \"Chocolate\" },\r\n                { \"id\": \"5004\", \"type\": \"Maple\" }\r\n            ]\r\n    },\r\n    {\r\n        \"id\": \"0003\",\r\n        \"type\": \"donut\",\r\n        \"name\": \"Old Fashioned\",\r\n        \"ppu\": 0.55,\r\n        \"batters\":\r\n            {\r\n                \"batter\":\r\n                    [\r\n                        { \"id\": \"1001\", \"type\": \"Regular\" },\r\n                        { \"id\": \"1002\", \"type\": \"Chocolate\" }\r\n                    ]\r\n            },\r\n        \"topping\":\r\n            [\r\n                { \"id\": \"5001\", \"type\": \"None\" },\r\n                { \"id\": \"5002\", \"type\": \"Glazed\" },\r\n                { \"id\": \"5003\", \"type\": \"Chocolate\" },\r\n                { \"id\": \"5004\", \"type\": \"Maple\" }\r\n            ]\r\n    }\r\n    ]','https://adobe.github.io/Spry/samples/data_region/JSONDataSetSample.html');\r\nSELECT json = '' FROM j2;\r\n-- true\r\n```\r\nWe would expect the query to return `false`.\r\n\r\nThe bug does not occur when I remove the `''` from `\"Devil''s Food\"`.\r\nThe bug also does not appear when the string is much shorter, e.g.:\r\n```sql\r\nCREATE TABLE j2 (id INT, json VARCHAR, src VARCHAR);\r\nINSERT INTO j2(id,json,src)\r\n    VALUES(3,'[\r\n    {\r\n        \"id\": \"0001\",\r\n        \"type\": \"donut\",\r\n        \"name\": \"Cake\",\r\n        \"ppu\": 0.55,\r\n        \"batters\":\r\n            {\r\n                \"batter\":\r\n                    [\r\n                        { \"id\": \"1001\", \"type\": \"Regular\" },\r\n                        { \"id\": \"1002\", \"type\": \"Chocolate\" },\r\n                        { \"id\": \"1003\", \"type\": \"Blueberry\" },\r\n                        { \"id\": \"1004\", \"type\": \"Devil''s Food\" }\r\n                    ]\r\n            },\r\n        \"topping\":\r\n            [\r\n                { \"id\": \"5001\", \"type\": \"None\" },\r\n                { \"id\": \"5002\", \"type\": \"Glazed\" },\r\n                { \"id\": \"5005\", \"type\": \"Sugar\" },\r\n                { \"id\": \"5007\", \"type\": \"Powdered Sugar\" },\r\n                { \"id\": \"5006\", \"type\": \"Chocolate with Sprinkles\" },\r\n                { \"id\": \"5003\", \"type\": \"Chocolate\" },\r\n                { \"id\": \"5004\", \"type\": \"Maple\" }\r\n            ]\r\n    }\r\n    ]','https://adobe.github.io/Spry/samples/data_region/JSONDataSetSample.html');\r\nSELECT json = '' FROM j2;\r\n-- false\r\n```\r\n\r\nThe string is stored correctly. I ran the same query in Postgres to see if it has something to do with the parser, but there it worked fine.\r\n\r\n#### Environment (please complete the following information):\r\n - OS: macOS\r\n - DuckDB Version: master\r\n - DuckDB Client: CLI\r\n\r\n#### Before Submitting\r\n\r\n- [x] **Have you tried this on the latest `master` branch?**\r\n* **Python**: `pip install duckdb --upgrade --pre`\r\n* **R**: `install.packages(\"https://github.com/duckdb/duckdb/releases/download/master-builds/duckdb_r_src.tar.gz\", repos = NULL)`\r\n* **Other Platforms**: You can find binaries [here](https://github.com/duckdb/duckdb/releases/tag/master-builds) or compile from source.\r\n\r\n- [x] **Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?**\r\n\n",
  "hints_text": "\n",
  "created_at": "2022-01-31T12:02:23Z"
}