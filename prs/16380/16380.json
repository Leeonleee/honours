{
  "repo": "duckdb/duckdb",
  "pull_number": 16380,
  "instance_id": "duckdb__duckdb-16380",
  "issue_numbers": [
    "16340"
  ],
  "base_commit": "7c5028689dc1f5ed033445c6e5875c3b7b878f47",
  "patch": "diff --git a/src/function/scalar/string/regexp.cpp b/src/function/scalar/string/regexp.cpp\nindex 2383e3b578a0..f91121a075ea 100644\n--- a/src/function/scalar/string/regexp.cpp\n+++ b/src/function/scalar/string/regexp.cpp\n@@ -186,6 +186,9 @@ static void RegexReplaceFunction(DataChunk &args, ExpressionState &state, Vector\n \t\tTernaryExecutor::Execute<string_t, string_t, string_t, string_t>(\n \t\t    strings, patterns, replaces, result, args.size(), [&](string_t input, string_t pattern, string_t replace) {\n \t\t\t    RE2 re(CreateStringPiece(pattern), info.options);\n+\t\t\t    if (!re.ok()) {\n+\t\t\t\t    throw InvalidInputException(re.error());\n+\t\t\t    }\n \t\t\t    std::string sstring = input.GetString();\n \t\t\t    if (info.global_replace) {\n \t\t\t\t    RE2::GlobalReplace(&sstring, re, CreateStringPiece(replace));\ndiff --git a/src/include/duckdb/function/scalar/regexp.hpp b/src/include/duckdb/function/scalar/regexp.hpp\nindex fa6a3e91f81a..5ac80ab089af 100644\n--- a/src/include/duckdb/function/scalar/regexp.hpp\n+++ b/src/include/duckdb/function/scalar/regexp.hpp\n@@ -140,6 +140,9 @@ struct RegexLocalState : public FunctionLocalState {\n \texplicit RegexLocalState(RegexpBaseBindData &info, bool extract_all = false)\n \t    : constant_pattern(duckdb_re2::StringPiece(info.constant_string.c_str(), info.constant_string.size()),\n \t                       info.options) {\n+\t\tif (!constant_pattern.ok()) {\n+\t\t\tthrow InvalidInputException(constant_pattern.error());\n+\t\t}\n \t\tif (extract_all) {\n \t\t\tauto group_count_p = constant_pattern.NumberOfCapturingGroups();\n \t\t\tif (group_count_p != -1) {\n",
  "test_patch": "diff --git a/test/sql/function/string/regex_extract_all.test b/test/sql/function/string/regex_extract_all.test\nindex 207ccf14e28c..f6102e448cde 100644\n--- a/test/sql/function/string/regex_extract_all.test\n+++ b/test/sql/function/string/regex_extract_all.test\n@@ -280,7 +280,7 @@ select regexp_extract_all('abc', '(a)(b)')\n statement error\n select regexp_extract_all('', '(')\n ----\n-Invalid Input Error: Pattern failed to parse, error: 'missing ): ('\n+Invalid Input Error: missing )\n \n query I\n select regexp_extract_all('abcdef', 'ac.*e.')\n@@ -546,7 +546,7 @@ FROM (\n   VALUES ('acd'), ('abcd'), ('abbcd'), ('abbbcd')\n ) AS t(str)\n ----\n-Invalid Input Error: Pattern failed to parse, error: 'bad repetition operator: ++'\n+Invalid Input Error: bad repetition operator: ++\n \n query IIIIIII\n SELECT\ndiff --git a/test/sql/function/string/regex_replace.test b/test/sql/function/string/regex_replace.test\nindex 1d8047c8bb53..b3474d27c3b9 100644\n--- a/test/sql/function/string/regex_replace.test\n+++ b/test/sql/function/string/regex_replace.test\n@@ -90,3 +90,32 @@ statement error\n SELECT regexp_replace('asdf', '.*SD.*', 'a', 'q')\n ----\n \n+# this used to fail as it should but lets make sure it still fails\n+statement error\n+select regexp_matches('abc', '*');\n+----\n+no argument for repetition operator: *\n+\n+# this used to silently swallow the error from the invalid regex\n+statement error\n+select regexp_replace('abc', '*', 'X');\n+----\n+no argument for repetition operator: *\n+\n+# make sure this also holds for non-constant case\n+statement ok\n+create table regex (s string, r string);\n+\n+statement ok\n+insert into regex values ('abc', '*');\n+\n+statement error\n+select regexp_matches(s, r) from regex;\n+----\n+no argument for repetition operator: *\n+\n+statement error\n+select regexp_replace(s, r, 'X') from regex;\n+----\n+no argument for repetition operator: *\n+\n",
  "problem_statement": "regexp_replace silently ignores errors in the regexp pattern\n### What happens?\n\n`regexp_replace` silently returns the original string if the regexp pattern contains errors.\nThis is not the case for ` regexp_matches`.\n\n### To Reproduce\n\n`regexp_replace` seems to ignore errors:\n```\nselect regexp_replace('abc', '*', 'X');\n```\nPostgres throws an error: \"invalid regular expression\"\nDuckDB returns `abc`\n\nBut `regexp_matches` properly throws errors:\n```\nselect regexp_matches('abc', '*');\n```\nDuckDB and Postgres both complain about the invalid regular expression.\n\n### OS:\n\nUbuntu\n\n### DuckDB Version:\n\nv1.2.1-dev629 d9ee15f45e\n\n### DuckDB Client:\n\nshell\n\n### Hardware:\n\n_No response_\n\n### Full Name:\n\nAltan Birler\n\n### Affiliation:\n\nTUM\n\n### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.\n\nI have tested with a source build\n\n### Did you include all relevant data sets for reproducing the issue?\n\nYes\n\n### Did you include all code required to reproduce the issue?\n\n- [x] Yes, I have\n\n### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?\n\n- [x] Yes, I have\n",
  "hints_text": "@szarnyasg could this be a good bug for a first contribute? I'd like to take a stab at it.",
  "created_at": "2025-02-24T13:43:45Z"
}