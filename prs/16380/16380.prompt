You will be provided with a partial code base and an issue statement explaining a problem to resolve.
In your output, give nothing but the code (no markdown) so that your output can be copy pasted and run immediately with no changes.
In the patch file, please make sure to include the line numbers and a blank line at the end so it can be applied using git apply.

<issue>
regexp_replace silently ignores errors in the regexp pattern
### What happens?

`regexp_replace` silently returns the original string if the regexp pattern contains errors.
This is not the case for ` regexp_matches`.

### To Reproduce

`regexp_replace` seems to ignore errors:
```
select regexp_replace('abc', '*', 'X');
```
Postgres throws an error: "invalid regular expression"
DuckDB returns `abc`

But `regexp_matches` properly throws errors:
```
select regexp_matches('abc', '*');
```
DuckDB and Postgres both complain about the invalid regular expression.

### OS:

Ubuntu

### DuckDB Version:

v1.2.1-dev629 d9ee15f45e

### DuckDB Client:

shell

### Hardware:

_No response_

### Full Name:

Altan Birler

### Affiliation:

TUM

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have tested with a source build

### Did you include all relevant data sets for reproducing the issue?

Yes

### Did you include all code required to reproduce the issue?

- [x] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [x] Yes, I have

</issue>
<code>
[start of README.md]
1: <div align="center">
2:   <picture>
3:     <source media="(prefers-color-scheme: light)" srcset="logo/DuckDB_Logo-horizontal.svg">
4:     <source media="(prefers-color-scheme: dark)" srcset="logo/DuckDB_Logo-horizontal-dark-mode.svg">
5:     <img alt="DuckDB logo" src="logo/DuckDB_Logo-horizontal.svg" height="100">
6:   </picture>
7: </div>
8: <br>
9: 
10: <p align="center">
11:   <a href="https://github.com/duckdb/duckdb/actions"><img src="https://github.com/duckdb/duckdb/actions/workflows/Main.yml/badge.svg?branch=main" alt="Github Actions Badge"></a>
12:   <a href="https://discord.gg/tcvwpjfnZx"><img src="https://shields.io/discord/909674491309850675" alt="discord" /></a>
13:   <a href="https://github.com/duckdb/duckdb/releases/"><img src="https://img.shields.io/github/v/release/duckdb/duckdb?color=brightgreen&display_name=tag&logo=duckdb&logoColor=white" alt="Latest Release"></a>
14: </p>
15: 
16: ## DuckDB
17: 
18: DuckDB is a high-performance analytical database system. It is designed to be fast, reliable, portable, and easy to use. DuckDB provides a rich SQL dialect, with support far beyond basic SQL. DuckDB supports arbitrary and nested correlated subqueries, window functions, collations, complex types (arrays, structs, maps), and [several extensions designed to make SQL easier to use](https://duckdb.org/docs/guides/sql_features/friendly_sql).
19: 
20: DuckDB is available as a [standalone CLI application](https://duckdb.org/docs/api/cli/overview) and has clients for [Python](https://duckdb.org/docs/api/python/overview), [R](https://duckdb.org/docs/api/r), [Java](https://duckdb.org/docs/api/java), [Wasm](https://duckdb.org/docs/api/wasm/overview), etc., with deep integrations with packages such as [pandas](https://duckdb.org/docs/guides/python/sql_on_pandas) and [dplyr](https://duckdb.org/docs/api/r#duckplyr-dplyr-api).
21: 
22: For more information on using DuckDB, please refer to the [DuckDB documentation](https://duckdb.org/docs/).
23: 
24: ## Installation
25: 
26: If you want to install DuckDB, please see [our installation page](https://duckdb.org/docs/installation/) for instructions.
27: 
28: ## Data Import
29: 
30: For CSV files and Parquet files, data import is as simple as referencing the file in the FROM clause:
31: 
32: ```sql
33: SELECT * FROM 'myfile.csv';
34: SELECT * FROM 'myfile.parquet';
35: ```
36: 
37: Refer to our [Data Import](https://duckdb.org/docs/data/overview) section for more information.
38: 
39: ## SQL Reference
40: 
41: The documentation contains a [SQL introduction and reference](https://duckdb.org/docs/sql/introduction).
42: 
43: ## Development
44: 
45: For development, DuckDB requires [CMake](https://cmake.org), Python3 and a `C++11` compliant compiler. Run `make` in the root directory to compile the sources. For development, use `make debug` to build a non-optimized debug version. You should run `make unit` and `make allunit` to verify that your version works properly after making changes. To test performance, you can run `BUILD_BENCHMARK=1 BUILD_TPCH=1 make` and then perform several standard benchmarks from the root directory by executing `./build/release/benchmark/benchmark_runner`. The details of benchmarks are in our [Benchmark Guide](benchmark/README.md).
46: 
47: Please also refer to our [Build Guide](https://duckdb.org/dev/building) and [Contribution Guide](CONTRIBUTING.md).
48: 
49: ## Support
50: 
51: See the [Support Options](https://duckdblabs.com/support/) page.
[end of README.md]
[start of src/function/scalar/string/regexp.cpp]
1: #include "duckdb/function/scalar/regexp.hpp"
2: 
3: #include "duckdb/common/exception.hpp"
4: #include "duckdb/common/vector_operations/binary_executor.hpp"
5: #include "duckdb/common/vector_operations/ternary_executor.hpp"
6: #include "duckdb/common/vector_operations/unary_executor.hpp"
7: #include "duckdb/common/vector_operations/vector_operations.hpp"
8: #include "duckdb/execution/expression_executor.hpp"
9: #include "duckdb/function/scalar/string_functions.hpp"
10: #include "duckdb/planner/expression/bound_function_expression.hpp"
11: #include "utf8proc_wrapper.hpp"
12: 
13: namespace duckdb {
14: 
15: using regexp_util::CreateStringPiece;
16: using regexp_util::Extract;
17: using regexp_util::ParseRegexOptions;
18: using regexp_util::TryParseConstantPattern;
19: 
20: static bool RegexOptionsEquals(const duckdb_re2::RE2::Options &opt_a, const duckdb_re2::RE2::Options &opt_b) {
21: 	return opt_a.case_sensitive() == opt_b.case_sensitive();
22: }
23: 
24: RegexpBaseBindData::RegexpBaseBindData() : constant_pattern(false) {
25: }
26: RegexpBaseBindData::RegexpBaseBindData(duckdb_re2::RE2::Options options, string constant_string_p,
27:                                        bool constant_pattern)
28:     : options(options), constant_string(std::move(constant_string_p)), constant_pattern(constant_pattern) {
29: }
30: 
31: RegexpBaseBindData::~RegexpBaseBindData() {
32: }
33: 
34: bool RegexpBaseBindData::Equals(const FunctionData &other_p) const {
35: 	auto &other = other_p.Cast<RegexpBaseBindData>();
36: 	return constant_pattern == other.constant_pattern && constant_string == other.constant_string &&
37: 	       RegexOptionsEquals(options, other.options);
38: }
39: 
40: unique_ptr<FunctionLocalState> RegexInitLocalState(ExpressionState &state, const BoundFunctionExpression &expr,
41:                                                    FunctionData *bind_data) {
42: 	auto &info = bind_data->Cast<RegexpBaseBindData>();
43: 	if (info.constant_pattern) {
44: 		return make_uniq<RegexLocalState>(info);
45: 	}
46: 	return nullptr;
47: }
48: 
49: //===--------------------------------------------------------------------===//
50: // Regexp Matches
51: //===--------------------------------------------------------------------===//
52: RegexpMatchesBindData::RegexpMatchesBindData(duckdb_re2::RE2::Options options, string constant_string_p,
53:                                              bool constant_pattern)
54:     : RegexpBaseBindData(options, std::move(constant_string_p), constant_pattern) {
55: 	if (constant_pattern) {
56: 		auto pattern = make_uniq<RE2>(constant_string, options);
57: 		if (!pattern->ok()) {
58: 			throw InvalidInputException(pattern->error());
59: 		}
60: 
61: 		range_success = pattern->PossibleMatchRange(&range_min, &range_max, 1000);
62: 	} else {
63: 		range_success = false;
64: 	}
65: }
66: 
67: RegexpMatchesBindData::RegexpMatchesBindData(duckdb_re2::RE2::Options options, string constant_string_p,
68:                                              bool constant_pattern, string range_min_p, string range_max_p,
69:                                              bool range_success)
70:     : RegexpBaseBindData(options, std::move(constant_string_p), constant_pattern), range_min(std::move(range_min_p)),
71:       range_max(std::move(range_max_p)), range_success(range_success) {
72: }
73: 
74: unique_ptr<FunctionData> RegexpMatchesBindData::Copy() const {
75: 	return make_uniq<RegexpMatchesBindData>(options, constant_string, constant_pattern, range_min, range_max,
76: 	                                        range_success);
77: }
78: 
79: unique_ptr<FunctionData> RegexpMatchesBind(ClientContext &context, ScalarFunction &bound_function,
80:                                            vector<unique_ptr<Expression>> &arguments) {
81: 	// pattern is the second argument. If its constant, we can already prepare the pattern and store it for later.
82: 	D_ASSERT(arguments.size() == 2 || arguments.size() == 3);
83: 	RE2::Options options;
84: 	options.set_log_errors(false);
85: 	if (arguments.size() == 3) {
86: 		ParseRegexOptions(context, *arguments[2], options);
87: 	}
88: 
89: 	string constant_string;
90: 	bool constant_pattern;
91: 	constant_pattern = TryParseConstantPattern(context, *arguments[1], constant_string);
92: 	return make_uniq<RegexpMatchesBindData>(options, std::move(constant_string), constant_pattern);
93: }
94: 
95: struct RegexPartialMatch {
96: 	static inline bool Operation(const duckdb_re2::StringPiece &input, duckdb_re2::RE2 &re) {
97: 		return duckdb_re2::RE2::PartialMatch(input, re);
98: 	}
99: };
100: 
101: struct RegexFullMatch {
102: 	static inline bool Operation(const duckdb_re2::StringPiece &input, duckdb_re2::RE2 &re) {
103: 		return duckdb_re2::RE2::FullMatch(input, re);
104: 	}
105: };
106: 
107: template <class OP>
108: static void RegexpMatchesFunction(DataChunk &args, ExpressionState &state, Vector &result) {
109: 	auto &strings = args.data[0];
110: 	auto &patterns = args.data[1];
111: 
112: 	auto &func_expr = state.expr.Cast<BoundFunctionExpression>();
113: 	auto &info = func_expr.bind_info->Cast<RegexpMatchesBindData>();
114: 
115: 	if (info.constant_pattern) {
116: 		auto &lstate = ExecuteFunctionState::GetFunctionState(state)->Cast<RegexLocalState>();
117: 		UnaryExecutor::Execute<string_t, bool>(strings, result, args.size(), [&](string_t input) {
118: 			return OP::Operation(CreateStringPiece(input), lstate.constant_pattern);
119: 		});
120: 	} else {
121: 		BinaryExecutor::Execute<string_t, string_t, bool>(strings, patterns, result, args.size(),
122: 		                                                  [&](string_t input, string_t pattern) {
123: 			                                                  RE2 re(CreateStringPiece(pattern), info.options);
124: 			                                                  if (!re.ok()) {
125: 				                                                  throw InvalidInputException(re.error());
126: 			                                                  }
127: 			                                                  return OP::Operation(CreateStringPiece(input), re);
128: 		                                                  });
129: 	}
130: }
131: 
132: //===--------------------------------------------------------------------===//
133: // Regexp Replace
134: //===--------------------------------------------------------------------===//
135: RegexpReplaceBindData::RegexpReplaceBindData() : global_replace(false) {
136: }
137: 
138: RegexpReplaceBindData::RegexpReplaceBindData(duckdb_re2::RE2::Options options, string constant_string_p,
139:                                              bool constant_pattern, bool global_replace)
140:     : RegexpBaseBindData(options, std::move(constant_string_p), constant_pattern), global_replace(global_replace) {
141: }
142: 
143: unique_ptr<FunctionData> RegexpReplaceBindData::Copy() const {
144: 	auto copy = make_uniq<RegexpReplaceBindData>(options, constant_string, constant_pattern, global_replace);
145: 	return std::move(copy);
146: }
147: 
148: bool RegexpReplaceBindData::Equals(const FunctionData &other_p) const {
149: 	auto &other = other_p.Cast<RegexpReplaceBindData>();
150: 	return RegexpBaseBindData::Equals(other) && global_replace == other.global_replace;
151: }
152: 
153: static unique_ptr<FunctionData> RegexReplaceBind(ClientContext &context, ScalarFunction &bound_function,
154:                                                  vector<unique_ptr<Expression>> &arguments) {
155: 	auto data = make_uniq<RegexpReplaceBindData>();
156: 
157: 	data->constant_pattern = TryParseConstantPattern(context, *arguments[1], data->constant_string);
158: 	if (arguments.size() == 4) {
159: 		ParseRegexOptions(context, *arguments[3], data->options, &data->global_replace);
160: 	}
161: 	data->options.set_log_errors(false);
162: 	return std::move(data);
163: }
164: 
165: static void RegexReplaceFunction(DataChunk &args, ExpressionState &state, Vector &result) {
166: 	auto &func_expr = state.expr.Cast<BoundFunctionExpression>();
167: 	auto &info = func_expr.bind_info->Cast<RegexpReplaceBindData>();
168: 
169: 	auto &strings = args.data[0];
170: 	auto &patterns = args.data[1];
171: 	auto &replaces = args.data[2];
172: 
173: 	if (info.constant_pattern) {
174: 		auto &lstate = ExecuteFunctionState::GetFunctionState(state)->Cast<RegexLocalState>();
175: 		BinaryExecutor::Execute<string_t, string_t, string_t>(
176: 		    strings, replaces, result, args.size(), [&](string_t input, string_t replace) {
177: 			    std::string sstring = input.GetString();
178: 			    if (info.global_replace) {
179: 				    RE2::GlobalReplace(&sstring, lstate.constant_pattern, CreateStringPiece(replace));
180: 			    } else {
181: 				    RE2::Replace(&sstring, lstate.constant_pattern, CreateStringPiece(replace));
182: 			    }
183: 			    return StringVector::AddString(result, sstring);
184: 		    });
185: 	} else {
186: 		TernaryExecutor::Execute<string_t, string_t, string_t, string_t>(
187: 		    strings, patterns, replaces, result, args.size(), [&](string_t input, string_t pattern, string_t replace) {
188: 			    RE2 re(CreateStringPiece(pattern), info.options);
189: 			    std::string sstring = input.GetString();
190: 			    if (info.global_replace) {
191: 				    RE2::GlobalReplace(&sstring, re, CreateStringPiece(replace));
192: 			    } else {
193: 				    RE2::Replace(&sstring, re, CreateStringPiece(replace));
194: 			    }
195: 			    return StringVector::AddString(result, sstring);
196: 		    });
197: 	}
198: }
199: 
200: //===--------------------------------------------------------------------===//
201: // Regexp Extract
202: //===--------------------------------------------------------------------===//
203: RegexpExtractBindData::RegexpExtractBindData() {
204: }
205: 
206: RegexpExtractBindData::RegexpExtractBindData(duckdb_re2::RE2::Options options, string constant_string_p,
207:                                              bool constant_pattern, string group_string_p)
208:     : RegexpBaseBindData(options, std::move(constant_string_p), constant_pattern),
209:       group_string(std::move(group_string_p)), rewrite(group_string) {
210: }
211: 
212: unique_ptr<FunctionData> RegexpExtractBindData::Copy() const {
213: 	return make_uniq<RegexpExtractBindData>(options, constant_string, constant_pattern, group_string);
214: }
215: 
216: bool RegexpExtractBindData::Equals(const FunctionData &other_p) const {
217: 	auto &other = other_p.Cast<RegexpExtractBindData>();
218: 	return RegexpBaseBindData::Equals(other) && group_string == other.group_string;
219: }
220: 
221: static void RegexExtractFunction(DataChunk &args, ExpressionState &state, Vector &result) {
222: 	auto &func_expr = state.expr.Cast<BoundFunctionExpression>();
223: 	const auto &info = func_expr.bind_info->Cast<RegexpExtractBindData>();
224: 
225: 	auto &strings = args.data[0];
226: 	auto &patterns = args.data[1];
227: 	if (info.constant_pattern) {
228: 		auto &lstate = ExecuteFunctionState::GetFunctionState(state)->Cast<RegexLocalState>();
229: 		UnaryExecutor::Execute<string_t, string_t>(strings, result, args.size(), [&](string_t input) {
230: 			return Extract(input, result, lstate.constant_pattern, info.rewrite);
231: 		});
232: 	} else {
233: 		BinaryExecutor::Execute<string_t, string_t, string_t>(strings, patterns, result, args.size(),
234: 		                                                      [&](string_t input, string_t pattern) {
235: 			                                                      RE2 re(CreateStringPiece(pattern), info.options);
236: 			                                                      return Extract(input, result, re, info.rewrite);
237: 		                                                      });
238: 	}
239: }
240: 
241: //===--------------------------------------------------------------------===//
242: // Regexp Extract Struct
243: //===--------------------------------------------------------------------===//
244: static void RegexExtractStructFunction(DataChunk &args, ExpressionState &state, Vector &result) {
245: 	auto &lstate = ExecuteFunctionState::GetFunctionState(state)->Cast<RegexLocalState>();
246: 
247: 	const auto count = args.size();
248: 	auto &input = args.data[0];
249: 
250: 	auto &child_entries = StructVector::GetEntries(result);
251: 	const auto groupSize = child_entries.size();
252: 	// Reference the 'input' StringBuffer, because we won't need to allocate new data
253: 	// for the result, all returned strings are substrings of the originals
254: 	for (auto &child_entry : child_entries) {
255: 		child_entry->SetAuxiliary(input.GetAuxiliary());
256: 	}
257: 
258: 	vector<RE2::Arg> argv(groupSize);
259: 	vector<RE2::Arg *> groups(groupSize);
260: 	vector<duckdb_re2::StringPiece> ws(groupSize);
261: 	for (size_t i = 0; i < groupSize; ++i) {
262: 		groups[i] = &argv[i];
263: 		argv[i] = &ws[i];
264: 	}
265: 
266: 	if (input.GetVectorType() == VectorType::CONSTANT_VECTOR) {
267: 		result.SetVectorType(VectorType::CONSTANT_VECTOR);
268: 
269: 		if (ConstantVector::IsNull(input)) {
270: 			ConstantVector::SetNull(result, true);
271: 		} else {
272: 			ConstantVector::SetNull(result, false);
273: 			auto idata = ConstantVector::GetData<string_t>(input);
274: 			auto str = CreateStringPiece(idata[0]);
275: 			auto match = duckdb_re2::RE2::PartialMatchN(str, lstate.constant_pattern, groups.data(),
276: 			                                            UnsafeNumericCast<int>(groups.size()));
277: 			for (size_t col = 0; col < child_entries.size(); ++col) {
278: 				auto &child_entry = child_entries[col];
279: 				ConstantVector::SetNull(*child_entry, false);
280: 				auto &extracted = ws[col];
281: 				auto cdata = ConstantVector::GetData<string_t>(*child_entry);
282: 				cdata[0] = string_t(extracted.data(), UnsafeNumericCast<uint32_t>(match ? extracted.size() : 0));
283: 			}
284: 		}
285: 	} else {
286: 		UnifiedVectorFormat iunified;
287: 		input.ToUnifiedFormat(count, iunified);
288: 
289: 		const auto &ivalidity = iunified.validity;
290: 		auto idata = UnifiedVectorFormat::GetData<string_t>(iunified);
291: 
292: 		// Start with a valid flat vector
293: 		result.SetVectorType(VectorType::FLAT_VECTOR);
294: 
295: 		// Start with valid children
296: 		for (size_t col = 0; col < child_entries.size(); ++col) {
297: 			auto &child_entry = child_entries[col];
298: 			child_entry->SetVectorType(VectorType::FLAT_VECTOR);
299: 		}
300: 
301: 		for (idx_t i = 0; i < count; ++i) {
302: 			const auto idx = iunified.sel->get_index(i);
303: 			if (ivalidity.RowIsValid(idx)) {
304: 				auto str = CreateStringPiece(idata[idx]);
305: 				auto match = duckdb_re2::RE2::PartialMatchN(str, lstate.constant_pattern, groups.data(),
306: 				                                            UnsafeNumericCast<int>(groups.size()));
307: 				for (size_t col = 0; col < child_entries.size(); ++col) {
308: 					auto &child_entry = child_entries[col];
309: 					auto cdata = FlatVector::GetData<string_t>(*child_entry);
310: 					auto &extracted = ws[col];
311: 					cdata[i] = string_t(extracted.data(), UnsafeNumericCast<uint32_t>(match ? extracted.size() : 0));
312: 				}
313: 			} else {
314: 				FlatVector::SetNull(result, i, true);
315: 			}
316: 		}
317: 	}
318: }
319: 
320: static unique_ptr<FunctionData> RegexExtractBind(ClientContext &context, ScalarFunction &bound_function,
321:                                                  vector<unique_ptr<Expression>> &arguments) {
322: 	D_ASSERT(arguments.size() >= 2);
323: 
324: 	duckdb_re2::RE2::Options options;
325: 
326: 	string constant_string;
327: 	bool constant_pattern = TryParseConstantPattern(context, *arguments[1], constant_string);
328: 
329: 	if (arguments.size() >= 4) {
330: 		ParseRegexOptions(context, *arguments[3], options);
331: 	}
332: 
333: 	string group_string = "\\0";
334: 	if (arguments.size() >= 3) {
335: 		if (arguments[2]->HasParameter()) {
336: 			throw ParameterNotResolvedException();
337: 		}
338: 		if (!arguments[2]->IsFoldable()) {
339: 			throw InvalidInputException("Group specification field must be a constant!");
340: 		}
341: 		Value group = ExpressionExecutor::EvaluateScalar(context, *arguments[2]);
342: 		if (group.IsNull()) {
343: 			group_string = "";
344: 		} else if (group.type().id() == LogicalTypeId::LIST) {
345: 			if (!constant_pattern) {
346: 				throw BinderException("%s with LIST requires a constant pattern", bound_function.name);
347: 			}
348: 			auto &list_children = ListValue::GetChildren(group);
349: 			if (list_children.empty()) {
350: 				throw BinderException("%s requires non-empty lists of capture names", bound_function.name);
351: 			}
352: 			case_insensitive_set_t name_collision_set;
353: 			child_list_t<LogicalType> struct_children;
354: 			for (const auto &child : list_children) {
355: 				if (child.IsNull()) {
356: 					throw BinderException("NULL group name in %s", bound_function.name);
357: 				}
358: 				const auto group_name = child.ToString();
359: 				if (name_collision_set.find(group_name) != name_collision_set.end()) {
360: 					throw BinderException("Duplicate group name \"%s\" in %s", group_name, bound_function.name);
361: 				}
362: 				name_collision_set.insert(group_name);
363: 				struct_children.emplace_back(make_pair(group_name, LogicalType::VARCHAR));
364: 			}
365: 			bound_function.return_type = LogicalType::STRUCT(struct_children);
366: 
367: 			duckdb_re2::StringPiece constant_piece(constant_string.c_str(), constant_string.size());
368: 			RE2 constant_pattern(constant_piece, options);
369: 			if (size_t(constant_pattern.NumberOfCapturingGroups()) < list_children.size()) {
370: 				throw BinderException("Not enough group names in %s", bound_function.name);
371: 			}
372: 		} else {
373: 			auto group_idx = group.GetValue<int32_t>();
374: 			if (group_idx < 0 || group_idx > 9) {
375: 				throw InvalidInputException("Group index must be between 0 and 9!");
376: 			}
377: 			group_string = "\\" + to_string(group_idx);
378: 		}
379: 	}
380: 
381: 	return make_uniq<RegexpExtractBindData>(options, std::move(constant_string), constant_pattern,
382: 	                                        std::move(group_string));
383: }
384: 
385: ScalarFunctionSet RegexpFun::GetFunctions() {
386: 	ScalarFunctionSet regexp_full_match("regexp_full_match");
387: 	regexp_full_match.AddFunction(
388: 	    ScalarFunction({LogicalType::VARCHAR, LogicalType::VARCHAR}, LogicalType::BOOLEAN,
389: 	                   RegexpMatchesFunction<RegexFullMatch>, RegexpMatchesBind, nullptr, nullptr, RegexInitLocalState,
390: 	                   LogicalType::INVALID, FunctionStability::CONSISTENT, FunctionNullHandling::SPECIAL_HANDLING));
391: 	regexp_full_match.AddFunction(
392: 	    ScalarFunction({LogicalType::VARCHAR, LogicalType::VARCHAR, LogicalType::VARCHAR}, LogicalType::BOOLEAN,
393: 	                   RegexpMatchesFunction<RegexFullMatch>, RegexpMatchesBind, nullptr, nullptr, RegexInitLocalState,
394: 	                   LogicalType::INVALID, FunctionStability::CONSISTENT, FunctionNullHandling::SPECIAL_HANDLING));
395: 	return (regexp_full_match);
396: }
397: 
398: ScalarFunctionSet RegexpMatchesFun::GetFunctions() {
399: 	ScalarFunctionSet regexp_partial_match("regexp_matches");
400: 	regexp_partial_match.AddFunction(ScalarFunction(
401: 	    {LogicalType::VARCHAR, LogicalType::VARCHAR}, LogicalType::BOOLEAN, RegexpMatchesFunction<RegexPartialMatch>,
402: 	    RegexpMatchesBind, nullptr, nullptr, RegexInitLocalState, LogicalType::INVALID, FunctionStability::CONSISTENT,
403: 	    FunctionNullHandling::SPECIAL_HANDLING));
404: 	regexp_partial_match.AddFunction(ScalarFunction(
405: 	    {LogicalType::VARCHAR, LogicalType::VARCHAR, LogicalType::VARCHAR}, LogicalType::BOOLEAN,
406: 	    RegexpMatchesFunction<RegexPartialMatch>, RegexpMatchesBind, nullptr, nullptr, RegexInitLocalState,
407: 	    LogicalType::INVALID, FunctionStability::CONSISTENT, FunctionNullHandling::SPECIAL_HANDLING));
408: 	for (auto &func : regexp_partial_match.functions) {
409: 		BaseScalarFunction::SetReturnsError(func);
410: 	}
411: 	return (regexp_partial_match);
412: }
413: 
414: ScalarFunctionSet RegexpReplaceFun::GetFunctions() {
415: 	ScalarFunctionSet regexp_replace("regexp_replace");
416: 	regexp_replace.AddFunction(ScalarFunction({LogicalType::VARCHAR, LogicalType::VARCHAR, LogicalType::VARCHAR},
417: 	                                          LogicalType::VARCHAR, RegexReplaceFunction, RegexReplaceBind, nullptr,
418: 	                                          nullptr, RegexInitLocalState));
419: 	regexp_replace.AddFunction(ScalarFunction(
420: 	    {LogicalType::VARCHAR, LogicalType::VARCHAR, LogicalType::VARCHAR, LogicalType::VARCHAR}, LogicalType::VARCHAR,
421: 	    RegexReplaceFunction, RegexReplaceBind, nullptr, nullptr, RegexInitLocalState));
422: 	return (regexp_replace);
423: }
424: 
425: ScalarFunctionSet RegexpExtractFun::GetFunctions() {
426: 	ScalarFunctionSet regexp_extract("regexp_extract");
427: 	regexp_extract.AddFunction(ScalarFunction({LogicalType::VARCHAR, LogicalType::VARCHAR}, LogicalType::VARCHAR,
428: 	                                          RegexExtractFunction, RegexExtractBind, nullptr, nullptr,
429: 	                                          RegexInitLocalState, LogicalType::INVALID, FunctionStability::CONSISTENT,
430: 	                                          FunctionNullHandling::SPECIAL_HANDLING));
431: 	regexp_extract.AddFunction(ScalarFunction({LogicalType::VARCHAR, LogicalType::VARCHAR, LogicalType::INTEGER},
432: 	                                          LogicalType::VARCHAR, RegexExtractFunction, RegexExtractBind, nullptr,
433: 	                                          nullptr, RegexInitLocalState, LogicalType::INVALID,
434: 	                                          FunctionStability::CONSISTENT, FunctionNullHandling::SPECIAL_HANDLING));
435: 	regexp_extract.AddFunction(ScalarFunction(
436: 	    {LogicalType::VARCHAR, LogicalType::VARCHAR, LogicalType::INTEGER, LogicalType::VARCHAR}, LogicalType::VARCHAR,
437: 	    RegexExtractFunction, RegexExtractBind, nullptr, nullptr, RegexInitLocalState, LogicalType::INVALID,
438: 	    FunctionStability::CONSISTENT, FunctionNullHandling::SPECIAL_HANDLING));
439: 	// REGEXP_EXTRACT(<string>, <pattern>, [<group 1 name>[, <group n name>]...])
440: 	regexp_extract.AddFunction(ScalarFunction(
441: 	    {LogicalType::VARCHAR, LogicalType::VARCHAR, LogicalType::LIST(LogicalType::VARCHAR)}, LogicalType::VARCHAR,
442: 	    RegexExtractStructFunction, RegexExtractBind, nullptr, nullptr, RegexInitLocalState, LogicalType::INVALID,
443: 	    FunctionStability::CONSISTENT, FunctionNullHandling::SPECIAL_HANDLING));
444: 	// REGEXP_EXTRACT(<string>, <pattern>, [<group 1 name>[, <group n name>]...], <options>)
445: 	regexp_extract.AddFunction(ScalarFunction(
446: 	    {LogicalType::VARCHAR, LogicalType::VARCHAR, LogicalType::LIST(LogicalType::VARCHAR), LogicalType::VARCHAR},
447: 	    LogicalType::VARCHAR, RegexExtractStructFunction, RegexExtractBind, nullptr, nullptr, RegexInitLocalState,
448: 	    LogicalType::INVALID, FunctionStability::CONSISTENT, FunctionNullHandling::SPECIAL_HANDLING));
449: 	return (regexp_extract);
450: }
451: 
452: ScalarFunctionSet RegexpExtractAllFun::GetFunctions() {
453: 	ScalarFunctionSet regexp_extract_all("regexp_extract_all");
454: 	regexp_extract_all.AddFunction(ScalarFunction(
455: 	    {LogicalType::VARCHAR, LogicalType::VARCHAR}, LogicalType::LIST(LogicalType::VARCHAR),
456: 	    RegexpExtractAll::Execute, RegexpExtractAll::Bind, nullptr, nullptr, RegexpExtractAll::InitLocalState,
457: 	    LogicalType::INVALID, FunctionStability::CONSISTENT, FunctionNullHandling::SPECIAL_HANDLING));
458: 	regexp_extract_all.AddFunction(ScalarFunction(
459: 	    {LogicalType::VARCHAR, LogicalType::VARCHAR, LogicalType::INTEGER}, LogicalType::LIST(LogicalType::VARCHAR),
460: 	    RegexpExtractAll::Execute, RegexpExtractAll::Bind, nullptr, nullptr, RegexpExtractAll::InitLocalState,
461: 	    LogicalType::INVALID, FunctionStability::CONSISTENT, FunctionNullHandling::SPECIAL_HANDLING));
462: 	regexp_extract_all.AddFunction(
463: 	    ScalarFunction({LogicalType::VARCHAR, LogicalType::VARCHAR, LogicalType::INTEGER, LogicalType::VARCHAR},
464: 	                   LogicalType::LIST(LogicalType::VARCHAR), RegexpExtractAll::Execute, RegexpExtractAll::Bind,
465: 	                   nullptr, nullptr, RegexpExtractAll::InitLocalState, LogicalType::INVALID,
466: 	                   FunctionStability::CONSISTENT, FunctionNullHandling::SPECIAL_HANDLING));
467: 	return (regexp_extract_all);
468: }
469: 
470: } // namespace duckdb
[end of src/function/scalar/string/regexp.cpp]
[start of src/include/duckdb/function/scalar/regexp.hpp]
1: //===----------------------------------------------------------------------===//
2: //                         DuckDB
3: //
4: // duckdb/function/scalar/regexp.hpp
5: //
6: //
7: //===----------------------------------------------------------------------===//
8: 
9: #pragma once
10: 
11: #include "duckdb/function/function_set.hpp"
12: #include "re2/re2.h"
13: #include "duckdb/function/built_in_functions.hpp"
14: #include "re2/stringpiece.h"
15: 
16: namespace duckdb {
17: 
18: namespace regexp_util {
19: 
20: bool TryParseConstantPattern(ClientContext &context, Expression &expr, string &constant_string);
21: void ParseRegexOptions(const string &options, duckdb_re2::RE2::Options &result, bool *global_replace = nullptr);
22: void ParseRegexOptions(ClientContext &context, Expression &expr, RE2::Options &target, bool *global_replace = nullptr);
23: 
24: inline duckdb_re2::StringPiece CreateStringPiece(const string_t &input) {
25: 	return duckdb_re2::StringPiece(input.GetData(), input.GetSize());
26: }
27: 
28: inline string_t Extract(const string_t &input, Vector &result, const RE2 &re, const duckdb_re2::StringPiece &rewrite) {
29: 	string extracted;
30: 	RE2::Extract(input.GetString(), re, rewrite, &extracted);
31: 	return StringVector::AddString(result, extracted.c_str(), extracted.size());
32: }
33: 
34: } // namespace regexp_util
35: 
36: struct RegexpExtractAll {
37: 	static void Execute(DataChunk &args, ExpressionState &state, Vector &result);
38: 	static unique_ptr<FunctionData> Bind(ClientContext &context, ScalarFunction &bound_function,
39: 	                                     vector<unique_ptr<Expression>> &arguments);
40: 	static unique_ptr<FunctionLocalState> InitLocalState(ExpressionState &state, const BoundFunctionExpression &expr,
41: 	                                                     FunctionData *bind_data);
42: };
43: 
44: struct RegexpBaseBindData : public FunctionData {
45: 	RegexpBaseBindData();
46: 	RegexpBaseBindData(duckdb_re2::RE2::Options options, string constant_string, bool constant_pattern = true);
47: 	~RegexpBaseBindData() override;
48: 
49: 	duckdb_re2::RE2::Options options;
50: 	string constant_string;
51: 	bool constant_pattern;
52: 
53: 	bool Equals(const FunctionData &other_p) const override;
54: };
55: 
56: struct RegexpMatchesBindData : public RegexpBaseBindData {
57: 	RegexpMatchesBindData(duckdb_re2::RE2::Options options, string constant_string, bool constant_pattern);
58: 	RegexpMatchesBindData(duckdb_re2::RE2::Options options, string constant_string, bool constant_pattern,
59: 	                      string range_min, string range_max, bool range_success);
60: 
61: 	string range_min;
62: 	string range_max;
63: 	bool range_success;
64: 
65: 	unique_ptr<FunctionData> Copy() const override;
66: };
67: 
68: struct RegexpReplaceBindData : public RegexpBaseBindData {
69: 	RegexpReplaceBindData();
70: 	RegexpReplaceBindData(duckdb_re2::RE2::Options options, string constant_string, bool constant_pattern,
71: 	                      bool global_replace);
72: 
73: 	bool global_replace;
74: 
75: 	unique_ptr<FunctionData> Copy() const override;
76: 	bool Equals(const FunctionData &other_p) const override;
77: };
78: 
79: struct RegexpExtractBindData : public RegexpBaseBindData {
80: 	RegexpExtractBindData();
81: 	RegexpExtractBindData(duckdb_re2::RE2::Options options, string constant_string, bool constant_pattern,
82: 	                      string group_string);
83: 
84: 	string group_string;
85: 	duckdb_re2::StringPiece rewrite;
86: 
87: 	unique_ptr<FunctionData> Copy() const override;
88: 	bool Equals(const FunctionData &other_p) const override;
89: };
90: 
91: struct RegexStringPieceArgs {
92: 	RegexStringPieceArgs() : size(0), capacity(0), group_buffer(nullptr) {
93: 	}
94: 	void Init(idx_t size) {
95: 		this->size = size;
96: 		// Allocate for one extra, for the all-encompassing match group
97: 		this->capacity = size + 1;
98: 		group_buffer = AllocateArray<duckdb_re2::StringPiece>(capacity);
99: 	}
100: 	void SetSize(idx_t size) {
101: 		this->size = size;
102: 		if (size + 1 > capacity) {
103: 			Clear();
104: 			Init(size);
105: 		}
106: 	}
107: 
108: 	RegexStringPieceArgs &operator=(RegexStringPieceArgs &&other) noexcept {
109: 		this->size = other.size;
110: 		this->capacity = other.capacity;
111: 		this->group_buffer = other.group_buffer;
112: 		other.size = 0;
113: 		other.capacity = 0;
114: 		other.group_buffer = nullptr;
115: 		return *this;
116: 	}
117: 
118: 	~RegexStringPieceArgs() {
119: 		Clear();
120: 	}
121: 
122: private:
123: 	void Clear() {
124: 		DeleteArray<duckdb_re2::StringPiece>(group_buffer, capacity);
125: 		group_buffer = nullptr;
126: 
127: 		size = 0;
128: 		capacity = 0;
129: 	}
130: 
131: public:
132: 	idx_t size;
133: 	//! The currently allocated capacity for the groups
134: 	idx_t capacity;
135: 	//! Used by ExtractAll to pre-allocate the storage for the groups
136: 	duckdb_re2::StringPiece *group_buffer;
137: };
138: 
139: struct RegexLocalState : public FunctionLocalState {
140: 	explicit RegexLocalState(RegexpBaseBindData &info, bool extract_all = false)
141: 	    : constant_pattern(duckdb_re2::StringPiece(info.constant_string.c_str(), info.constant_string.size()),
142: 	                       info.options) {
143: 		if (extract_all) {
144: 			auto group_count_p = constant_pattern.NumberOfCapturingGroups();
145: 			if (group_count_p != -1) {
146: 				group_buffer.Init(NumericCast<idx_t>(group_count_p));
147: 			}
148: 		}
149: 		D_ASSERT(info.constant_pattern);
150: 	}
151: 
152: 	RE2 constant_pattern;
153: 	//! Used by regexp_extract_all to pre-allocate the args
154: 	RegexStringPieceArgs group_buffer;
155: };
156: 
157: unique_ptr<FunctionLocalState> RegexInitLocalState(ExpressionState &state, const BoundFunctionExpression &expr,
158:                                                    FunctionData *bind_data);
159: unique_ptr<FunctionData> RegexpMatchesBind(ClientContext &context, ScalarFunction &bound_function,
160:                                            vector<unique_ptr<Expression>> &arguments);
161: 
162: } // namespace duckdb
[end of src/include/duckdb/function/scalar/regexp.hpp]
</code>
Here is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.
<patch>
--- a/file.cpp
+++ b/file.cpp
@@ -3,35 +3,44 @@
 #include <cstdlib>
 
 int euclidean(int a, int b) {
-    while (b) {
-        int temp = b;
-        b = a % b;
-        a = temp;
+    if (b == 0) {
+        return a;
     }
-    return a;
+    return euclidean(b, a % b);
 }
 
 std::vector<std::pair<int, int>> bresenham(int x0, int y0, int x1, int y1) {
     std::vector<std::pair<int, int>> points;
     int dx = abs(x1 - x0);
     int dy = abs(y1 - y0);
+    int x = x0, y = y0;
     int sx = (x0 < x1) ? 1 : -1;
     int sy = (y0 < y1) ? 1 : -1;
-    int err = dx - dy;
 
-    while (true) {
-        points.emplace_back(x0, y0);
-        if (x0 == x1 && y0 == y1) break;
-        int e2 = 2 * err;
-        if (e2 > -dy) {
+    if (dx > dy) {
+        int err = dx / 2;
+        while (x != x1) {
+            points.emplace_back(x, y);
             err -= dy;
-            x0 += sx;
+            if (err < 0) {
+                y += sy;
+                err += dx;
+            }
+            x += sx;
         }
-        if (e2 < dx) {
-            err += dx;
-            y0 += sy;
+    } else {
+        int err = dy / 2;
+        while (y != y1) {
+            points.emplace_back(x, y);
+            err -= dx;
+            if (err < 0) {
+                x += sx;
+                err += dy;
+            }
+            y += sy;
         }
     }
 
+    points.emplace_back(x, y);
     return points;
 }

</patch>

I need you to solve the provided issue by generating a single patch file that I can apply directly to this repository using git apply.
Please respond with a single patch file in the format shown above.
Make sure to only include the patch file contents so that the contents of your output can be copied into a patch file and applied directly

Respond below: