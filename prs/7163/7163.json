{
  "repo": "duckdb/duckdb",
  "pull_number": 7163,
  "instance_id": "duckdb__duckdb-7163",
  "issue_numbers": [
    "7124",
    "7124"
  ],
  "base_commit": "b475a57930f0a6c5163c82186e74b18391250ab0",
  "patch": "diff --git a/src/include/duckdb/parser/transformer.hpp b/src/include/duckdb/parser/transformer.hpp\nindex 7c76e5f044ee..9252aabbb5f8 100644\n--- a/src/include/duckdb/parser/transformer.hpp\n+++ b/src/include/duckdb/parser/transformer.hpp\n@@ -184,6 +184,7 @@ class Transformer {\n \t//! Transform a Postgres duckdb_libpgquery::T_PGSelectStmt node into a QueryNode\n \tunique_ptr<QueryNode> TransformSelectNode(duckdb_libpgquery::PGSelectStmt *node);\n \tunique_ptr<QueryNode> TransformSelectInternal(duckdb_libpgquery::PGSelectStmt *node);\n+\tvoid TransformModifiers(duckdb_libpgquery::PGSelectStmt &stmt, QueryNode &node);\n \n \t//===--------------------------------------------------------------------===//\n \t// Expression Transform\ndiff --git a/src/parser/transform/statement/transform_pivot_stmt.cpp b/src/parser/transform/statement/transform_pivot_stmt.cpp\nindex 55f7df30b946..1a1735f0b507 100644\n--- a/src/parser/transform/statement/transform_pivot_stmt.cpp\n+++ b/src/parser/transform/statement/transform_pivot_stmt.cpp\n@@ -176,6 +176,8 @@ unique_ptr<QueryNode> Transformer::TransformPivotStatement(duckdb_libpgquery::PG\n \t}\n \tpivot_ref->pivots = std::move(columns);\n \tselect_node->from_table = std::move(pivot_ref);\n+\t// transform order by/limit modifiers\n+\tTransformModifiers(*stmt, *select_node);\n \treturn std::move(select_node);\n }\n \ndiff --git a/src/parser/transform/statement/transform_select_node.cpp b/src/parser/transform/statement/transform_select_node.cpp\nindex 233ee26abb21..b32f8236448f 100644\n--- a/src/parser/transform/statement/transform_select_node.cpp\n+++ b/src/parser/transform/statement/transform_select_node.cpp\n@@ -8,6 +8,38 @@\n \n namespace duckdb {\n \n+void Transformer::TransformModifiers(duckdb_libpgquery::PGSelectStmt &stmt, QueryNode &node) {\n+\t// transform the common properties\n+\t// both the set operations and the regular select can have an ORDER BY/LIMIT attached to them\n+\tvector<OrderByNode> orders;\n+\tTransformOrderBy(stmt.sortClause, orders);\n+\tif (!orders.empty()) {\n+\t\tauto order_modifier = make_uniq<OrderModifier>();\n+\t\torder_modifier->orders = std::move(orders);\n+\t\tnode.modifiers.push_back(std::move(order_modifier));\n+\t}\n+\tif (stmt.limitCount || stmt.limitOffset) {\n+\t\tif (stmt.limitCount && stmt.limitCount->type == duckdb_libpgquery::T_PGLimitPercent) {\n+\t\t\tauto limit_percent_modifier = make_uniq<LimitPercentModifier>();\n+\t\t\tauto expr_node = reinterpret_cast<duckdb_libpgquery::PGLimitPercent *>(stmt.limitCount)->limit_percent;\n+\t\t\tlimit_percent_modifier->limit = TransformExpression(expr_node);\n+\t\t\tif (stmt.limitOffset) {\n+\t\t\t\tlimit_percent_modifier->offset = TransformExpression(stmt.limitOffset);\n+\t\t\t}\n+\t\t\tnode.modifiers.push_back(std::move(limit_percent_modifier));\n+\t\t} else {\n+\t\t\tauto limit_modifier = make_uniq<LimitModifier>();\n+\t\t\tif (stmt.limitCount) {\n+\t\t\t\tlimit_modifier->limit = TransformExpression(stmt.limitCount);\n+\t\t\t}\n+\t\t\tif (stmt.limitOffset) {\n+\t\t\t\tlimit_modifier->offset = TransformExpression(stmt.limitOffset);\n+\t\t\t}\n+\t\t\tnode.modifiers.push_back(std::move(limit_modifier));\n+\t\t}\n+\t}\n+}\n+\n unique_ptr<QueryNode> Transformer::TransformSelectInternal(duckdb_libpgquery::PGSelectStmt *stmt) {\n \tD_ASSERT(stmt->type == duckdb_libpgquery::T_PGSelectStmt);\n \tauto stack_checker = StackCheck();\n@@ -119,35 +151,7 @@ unique_ptr<QueryNode> Transformer::TransformSelectInternal(duckdb_libpgquery::PG\n \tdefault:\n \t\tthrow NotImplementedException(\"Statement type %d not implemented!\", stmt->op);\n \t}\n-\t// transform the common properties\n-\t// both the set operations and the regular select can have an ORDER BY/LIMIT attached to them\n-\tvector<OrderByNode> orders;\n-\tTransformOrderBy(stmt->sortClause, orders);\n-\tif (!orders.empty()) {\n-\t\tauto order_modifier = make_uniq<OrderModifier>();\n-\t\torder_modifier->orders = std::move(orders);\n-\t\tnode->modifiers.push_back(std::move(order_modifier));\n-\t}\n-\tif (stmt->limitCount || stmt->limitOffset) {\n-\t\tif (stmt->limitCount && stmt->limitCount->type == duckdb_libpgquery::T_PGLimitPercent) {\n-\t\t\tauto limit_percent_modifier = make_uniq<LimitPercentModifier>();\n-\t\t\tauto expr_node = reinterpret_cast<duckdb_libpgquery::PGLimitPercent *>(stmt->limitCount)->limit_percent;\n-\t\t\tlimit_percent_modifier->limit = TransformExpression(expr_node);\n-\t\t\tif (stmt->limitOffset) {\n-\t\t\t\tlimit_percent_modifier->offset = TransformExpression(stmt->limitOffset);\n-\t\t\t}\n-\t\t\tnode->modifiers.push_back(std::move(limit_percent_modifier));\n-\t\t} else {\n-\t\t\tauto limit_modifier = make_uniq<LimitModifier>();\n-\t\t\tif (stmt->limitCount) {\n-\t\t\t\tlimit_modifier->limit = TransformExpression(stmt->limitCount);\n-\t\t\t}\n-\t\t\tif (stmt->limitOffset) {\n-\t\t\t\tlimit_modifier->offset = TransformExpression(stmt->limitOffset);\n-\t\t\t}\n-\t\t\tnode->modifiers.push_back(std::move(limit_modifier));\n-\t\t}\n-\t}\n+\tTransformModifiers(*stmt, *node);\n \treturn node;\n }\n \n",
  "test_patch": "diff --git a/test/sql/pivot/pivot_example.test b/test/sql/pivot/pivot_example.test\nindex 114fcbdbc9fa..a2577c1eca2d 100644\n--- a/test/sql/pivot/pivot_example.test\n+++ b/test/sql/pivot/pivot_example.test\n@@ -150,3 +150,47 @@ PIVOT Cities ON Year USING SUM(Population), count(population) GROUP BY Country;\n ----\n NL\t1005\t1\t1065\t1\t1158\t1\n US\t8579\t2\t8783\t2\t9510\t2\n+\n+# pivot order by/limit\n+query IIII\n+PIVOT Cities ON Year USING SUM(Population) GROUP BY country ORDER BY country desc\n+----\n+US\t8579\t8783\t9510\n+NL\t1005\t1065\t1158\n+\n+query IIII\n+PIVOT Cities ON Year USING SUM(Population) GROUP BY country ORDER BY country desc LIMIT 1\n+----\n+US\t8579\t8783\t9510\n+\n+query IIII\n+PIVOT Cities ON Year USING SUM(Population) GROUP BY country ORDER BY country LIMIT 1\n+----\n+NL\t1005\t1065\t1158\n+\n+query IIII\n+PIVOT Cities ON Year USING SUM(Population) GROUP BY country ORDER BY country LIMIT 1 OFFSET 1\n+----\n+US\t8579\t8783\t9510\n+\n+query IIII\n+PIVOT Cities ON Year USING SUM(Population) GROUP BY country ORDER BY ALL\n+----\n+NL\t1005\t1065\t1158\n+US\t8579\t8783\t9510\n+\n+# unpivot order by/limit\n+query IIII\n+UNPIVOT PivotedCities ON 2000, 2010, 2020 ORDER BY ALL DESC LIMIT 1\n+----\n+US\tSeattle\t2020\t738\n+\n+query IIII\n+UNPIVOT PivotedCities ON 2000, 2010, 2020 ORDER BY ALL LIMIT 1\n+----\n+NL\tAmsterdam\t2000\t1005\n+\n+query IIII\n+UNPIVOT PivotedCities ON 2000, 2010, 2020 ORDER BY 1 LIMIT 1 OFFSET 1\n+----\n+NL\tAmsterdam\t2010\t1065\n",
  "problem_statement": "PIVOT accepts an ORDER BY clause which is ignored\n### What happens?\n\nPIVOT accepts an ORDER BY clause which is ignored\r\n\r\n`PIVOT Cities ON Year USING SUM(Population) GROUP BY country ORDER BY country desc`\r\n`PIVOT Cities ON Year USING SUM(Population) GROUP BY country ORDER BY country desc`\r\n\r\nreturn identical results: the \"order by\" is ignored. It's not in the syntax on https://duckdb.org/docs/sql/statements/pivot.html, but I wrote this out of habit: an \"order by\" following a \"group by\" is common practice. \r\n\r\nI'd be happy with a syntax error.\n\n### To Reproduce\n\n\r\n```\r\nCREATE TABLE Cities(Country VARCHAR, Name VARCHAR, Year INT, Population INT);\r\nINSERT INTO Cities VALUES ('NL', 'Amsterdam', 2000, 1005);\r\nINSERT INTO Cities VALUES ('NL', 'Amsterdam', 2010, 1065);\r\nINSERT INTO Cities VALUES ('NL', 'Amsterdam', 2020, 1158);\r\nINSERT INTO Cities VALUES ('US', 'Seattle', 2000, 564);\r\nINSERT INTO Cities VALUES ('US', 'Seattle', 2010, 608);\r\nINSERT INTO Cities VALUES ('US', 'Seattle', 2020, 738);\r\nINSERT INTO Cities VALUES ('US', 'New York City', 2000, 8015);\r\nINSERT INTO Cities VALUES ('US', 'New York City', 2010, 8175);\r\nINSERT INTO Cities VALUES ('US', 'New York City', 2020, 8772);\r\nFROM Cities;\r\nPIVOT Cities ON Year USING SUM(Population) GROUP BY country ORDER BY country desc\r\n```\r\n\n\n### OS:\n\nWindows\n\n### DuckDB Version:\n\n0.7.2.dev1734\n\n### DuckDB Client:\n\nPython\n\n### Full Name:\n\nPaul Timmins\n\n### Affiliation:\n\nIqmo\n\n### Have you tried this on the latest `master` branch?\n\n- [X] I agree\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] I agree\nPIVOT accepts an ORDER BY clause which is ignored\n### What happens?\n\nPIVOT accepts an ORDER BY clause which is ignored\r\n\r\n`PIVOT Cities ON Year USING SUM(Population) GROUP BY country ORDER BY country desc`\r\n`PIVOT Cities ON Year USING SUM(Population) GROUP BY country ORDER BY country desc`\r\n\r\nreturn identical results: the \"order by\" is ignored. It's not in the syntax on https://duckdb.org/docs/sql/statements/pivot.html, but I wrote this out of habit: an \"order by\" following a \"group by\" is common practice. \r\n\r\nI'd be happy with a syntax error.\n\n### To Reproduce\n\n\r\n```\r\nCREATE TABLE Cities(Country VARCHAR, Name VARCHAR, Year INT, Population INT);\r\nINSERT INTO Cities VALUES ('NL', 'Amsterdam', 2000, 1005);\r\nINSERT INTO Cities VALUES ('NL', 'Amsterdam', 2010, 1065);\r\nINSERT INTO Cities VALUES ('NL', 'Amsterdam', 2020, 1158);\r\nINSERT INTO Cities VALUES ('US', 'Seattle', 2000, 564);\r\nINSERT INTO Cities VALUES ('US', 'Seattle', 2010, 608);\r\nINSERT INTO Cities VALUES ('US', 'Seattle', 2020, 738);\r\nINSERT INTO Cities VALUES ('US', 'New York City', 2000, 8015);\r\nINSERT INTO Cities VALUES ('US', 'New York City', 2010, 8175);\r\nINSERT INTO Cities VALUES ('US', 'New York City', 2020, 8772);\r\nFROM Cities;\r\nPIVOT Cities ON Year USING SUM(Population) GROUP BY country ORDER BY country desc\r\n```\r\n\n\n### OS:\n\nWindows\n\n### DuckDB Version:\n\n0.7.2.dev1734\n\n### DuckDB Client:\n\nPython\n\n### Full Name:\n\nPaul Timmins\n\n### Affiliation:\n\nIqmo\n\n### Have you tried this on the latest `master` branch?\n\n- [X] I agree\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] I agree\n",
  "hints_text": "\n",
  "created_at": "2023-04-20T08:46:41Z"
}