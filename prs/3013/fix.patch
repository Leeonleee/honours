diff --git a/src/function/scalar/list/array_slice.cpp b/src/function/scalar/list/array_slice.cpp
index 6ac26b67f445..9d724d8dbc36 100644
--- a/src/function/scalar/list/array_slice.cpp
+++ b/src/function/scalar/list/array_slice.cpp
@@ -141,17 +141,11 @@ static void ArraySliceFunction(DataChunk &args, ExpressionState &state, Vector &
 	D_ASSERT(args.data.size() == 3);
 	auto count = args.size();
 
-	result.SetVectorType(VectorType::CONSTANT_VECTOR);
-	for (idx_t i = 0; i < args.ColumnCount(); i++) {
-		if (args.data[i].GetVectorType() != VectorType::CONSTANT_VECTOR) {
-			result.SetVectorType(VectorType::FLAT_VECTOR);
-		}
-	}
-
 	Vector &s = args.data[0];
 	Vector &b = args.data[1];
 	Vector &e = args.data[2];
 
+	s.Normalify(count);
 	switch (result.GetType().id()) {
 	case LogicalTypeId::LIST:
 		// Share the value dictionary as we are just going to slice it
@@ -164,6 +158,14 @@ static void ArraySliceFunction(DataChunk &args, ExpressionState &state, Vector &
 	default:
 		throw NotImplementedException("Specifier type not implemented");
 	}
+
+	result.SetVectorType(VectorType::CONSTANT_VECTOR);
+	for (idx_t i = 0; i < args.ColumnCount(); i++) {
+		if (args.data[i].GetVectorType() != VectorType::CONSTANT_VECTOR) {
+			result.SetVectorType(VectorType::FLAT_VECTOR);
+			break;
+		}
+	}
 }
 
 static unique_ptr<FunctionData> ArraySliceBind(ClientContext &context, ScalarFunction &bound_function,
