{
  "repo": "duckdb/duckdb",
  "pull_number": 12257,
  "instance_id": "duckdb__duckdb-12257",
  "issue_numbers": [
    "12248"
  ],
  "base_commit": "c466b730bdb593f737bee5bd309a84ec9b589f79",
  "patch": "diff --git a/src/main/capi/table_function-c.cpp b/src/main/capi/table_function-c.cpp\nindex a6916e8e2007..a3799a46da4c 100644\n--- a/src/main/capi/table_function-c.cpp\n+++ b/src/main/capi/table_function-c.cpp\n@@ -284,13 +284,17 @@ duckdb_state duckdb_register_table_function(duckdb_connection connection, duckdb\n \tif (tf->name.empty() || !info->bind || !info->init || !info->function) {\n \t\treturn DuckDBError;\n \t}\n-\tcon->context->RunFunctionInTransaction([&]() {\n-\t\tauto &catalog = duckdb::Catalog::GetSystemCatalog(*con->context);\n-\t\tduckdb::CreateTableFunctionInfo tf_info(*tf);\n-\n-\t\t// create the function in the catalog\n-\t\tcatalog.CreateTableFunction(*con->context, tf_info);\n-\t});\n+\ttry {\n+\t\tcon->context->RunFunctionInTransaction([&]() {\n+\t\t\tauto &catalog = duckdb::Catalog::GetSystemCatalog(*con->context);\n+\t\t\tduckdb::CreateTableFunctionInfo tf_info(*tf);\n+\n+\t\t\t// create the function in the catalog\n+\t\t\tcatalog.CreateTableFunction(*con->context, tf_info);\n+\t\t});\n+\t} catch (...) { // LCOV_EXCL_START\n+\t\treturn DuckDBError;\n+\t} // LCOV_EXCL_STOP\n \treturn DuckDBSuccess;\n }\n \n",
  "test_patch": "diff --git a/test/api/capi/capi_table_functions.cpp b/test/api/capi/capi_table_functions.cpp\nindex e7e865ec0418..42dfb30b20ac 100644\n--- a/test/api/capi/capi_table_functions.cpp\n+++ b/test/api/capi/capi_table_functions.cpp\n@@ -50,11 +50,10 @@ void my_function(duckdb_function_info info, duckdb_data_chunk output) {\n \tduckdb_data_chunk_set_size(output, i);\n }\n \n-static void capi_register_table_function(duckdb_connection connection, const char *name,\n-                                         duckdb_table_function_bind_t bind, duckdb_table_function_init_t init,\n-                                         duckdb_table_function_t f) {\n+static duckdb_state capi_register_table_function(duckdb_connection connection, const char *name,\n+                                                 duckdb_table_function_bind_t bind, duckdb_table_function_init_t init,\n+                                                 duckdb_table_function_t f) {\n \tduckdb_state status;\n-\n \t// create a table function\n \tauto function = duckdb_create_table_function();\n \tduckdb_table_function_set_name(nullptr, name);\n@@ -79,11 +78,15 @@ static void capi_register_table_function(duckdb_connection connection, const cha\n \n \t// register and cleanup\n \tstatus = duckdb_register_table_function(connection, function);\n-\tREQUIRE(status == DuckDBSuccess);\n+\tif (status == DuckDBError) {\n+\t\tduckdb_destroy_table_function(&function);\n+\t\treturn status;\n+\t}\n \n \tduckdb_destroy_table_function(&function);\n \tduckdb_destroy_table_function(&function);\n \tduckdb_destroy_table_function(nullptr);\n+\treturn status;\n }\n \n TEST_CASE(\"Test Table Functions C API\", \"[capi]\") {\n@@ -153,6 +156,15 @@ TEST_CASE(\"Test Table Function errors in C API\", \"[capi]\") {\n \tREQUIRE(result->HasError());\n }\n \n+TEST_CASE(\"Test Table Function register errors in C API\", \"[capi]\") {\n+\tCAPITester tester;\n+\tREQUIRE(tester.OpenDatabase(nullptr));\n+\n+\tREQUIRE(capi_register_table_function(tester.connection, \"x\", my_error_bind, my_init, my_function) == DuckDBSuccess);\n+\t// Try to register it again with the same name, name collision\n+\tREQUIRE(capi_register_table_function(tester.connection, \"x\", my_error_bind, my_init, my_function) == DuckDBError);\n+}\n+\n struct my_named_bind_data_struct {\n \tint64_t size;\n \tint64_t multiplier;\n",
  "problem_statement": "[C-API] duckdb_register_table_function terminates with unrecoverable error when registered with a conflicting name\n### What happens?\n\n`duckdb_register_table_function` terminates with unrecoverable error when register with a conflicting name\r\n```\r\nlibc++abi: terminating with uncaught exception of type duckdb::CatalogException: {\"exception_type\":\"Catalog\",\"exception_message\":\"Table Function with name \\\"x\\\" already exists!\",\"name\":\"x\",\"type\":\"Table Function\",\"error_subtype\":\"ENTRY_ALREADY_EXISTS\"}\r\nSIGABRT: abort\r\nPC=0x1856c6d98 m=0 sigcode=0\r\nsignal arrived during cgo execution\r\n```\r\n\r\n\n\n### To Reproduce\n\nUsing C-API in go-duckdb \r\n```\r\n    state := C.duckdb_register_table_function(duckConn.duckdbCon, tableFunction)\r\n    // we never get here\r\n    if state != 0 {\r\n        return invalidTableFunctionError()\r\n    }\r\n```\n\n### OS:\n\niOS\n\n### DuckDB Version:\n\n0.10.3\n\n### DuckDB Client:\n\ngo-duckdb\n\n### Full Name:\n\nChristian Persson\n\n### Affiliation:\n\nSift Lab / go-duckdb\n\n### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.\n\nI have tested with a stable release\n\n### Did you include all relevant data sets for reproducing the issue?\n\nNot applicable - the reproduction does not require a data set\n\n### Did you include all code required to reproduce the issue?\n\n- [ ] Yes, I have\n\n### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?\n\n- [X] Yes, I have\n",
  "hints_text": "",
  "created_at": "2024-05-27T09:25:19Z",
  "modified_files": [
    "src/main/capi/table_function-c.cpp"
  ]
}