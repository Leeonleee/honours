{
  "repo": "duckdb/duckdb",
  "pull_number": 7442,
  "instance_id": "duckdb__duckdb-7442",
  "issue_numbers": [
    "7348",
    "7348"
  ],
  "base_commit": "64aaaa2bedb7da77c8dd58bc24677a68c650a034",
  "patch": "diff --git a/src/storage/table/row_group_collection.cpp b/src/storage/table/row_group_collection.cpp\nindex 852413cf10f4..34147e74913f 100644\n--- a/src/storage/table/row_group_collection.cpp\n+++ b/src/storage/table/row_group_collection.cpp\n@@ -526,43 +526,59 @@ void RowGroupCollection::Update(TransactionData transaction, row_t *ids, const v\n void RowGroupCollection::RemoveFromIndexes(TableIndexList &indexes, Vector &row_identifiers, idx_t count) {\n \tauto row_ids = FlatVector::GetData<row_t>(row_identifiers);\n \n-\t// figure out which row_group to fetch from\n-\tauto row_group = row_groups->GetSegment(row_ids[0]);\n-\tauto row_group_vector_idx = (row_ids[0] - row_group->start) / STANDARD_VECTOR_SIZE;\n-\tauto base_row_id = row_group_vector_idx * STANDARD_VECTOR_SIZE + row_group->start;\n-\n-\t// create a selection vector from the row_ids\n-\tSelectionVector sel(STANDARD_VECTOR_SIZE);\n-\tfor (idx_t i = 0; i < count; i++) {\n-\t\tauto row_in_vector = row_ids[i] - base_row_id;\n-\t\tD_ASSERT(row_in_vector < STANDARD_VECTOR_SIZE);\n-\t\tsel.set_index(i, row_in_vector);\n-\t}\n-\n-\t// now fetch the columns from that row_group\n-\tTableScanState state;\n-\tstate.table_state.max_row = row_start + total_rows;\n-\n+\t// initialize the fetch state\n \t// FIXME: we do not need to fetch all columns, only the columns required by the indices!\n+\tTableScanState state;\n \tvector<column_t> column_ids;\n \tcolumn_ids.reserve(types.size());\n \tfor (idx_t i = 0; i < types.size(); i++) {\n \t\tcolumn_ids.push_back(i);\n \t}\n \tstate.Initialize(std::move(column_ids));\n+\tstate.table_state.max_row = row_start + total_rows;\n \n+\t// initialize the fetch chunk\n \tDataChunk result;\n \tresult.Initialize(GetAllocator(), types);\n \n-\tstate.table_state.Initialize(GetTypes());\n-\trow_group->InitializeScanWithOffset(state.table_state, row_group_vector_idx);\n-\trow_group->ScanCommitted(state.table_state, result, TableScanType::TABLE_SCAN_COMMITTED_ROWS);\n-\tresult.Slice(sel, count);\n+\tSelectionVector sel(STANDARD_VECTOR_SIZE);\n+\t// now iterate over the row ids\n+\tfor (idx_t r = 0; r < count;) {\n+\t\tresult.Reset();\n+\t\t// figure out which row_group to fetch from\n+\t\tauto row_id = row_ids[r];\n+\t\tauto row_group = row_groups->GetSegment(row_id);\n+\t\tauto row_group_vector_idx = (row_id - row_group->start) / STANDARD_VECTOR_SIZE;\n+\t\tauto base_row_id = row_group_vector_idx * STANDARD_VECTOR_SIZE + row_group->start;\n+\n+\t\t// fetch the current vector\n+\t\tstate.table_state.Initialize(GetTypes());\n+\t\trow_group->InitializeScanWithOffset(state.table_state, row_group_vector_idx);\n+\t\trow_group->ScanCommitted(state.table_state, result, TableScanType::TABLE_SCAN_COMMITTED_ROWS);\n+\t\tresult.Verify();\n+\n+\t\t// check for any remaining row ids if they also fall into this vector\n+\t\t// we try to fetch handle as many rows as possible at the same time\n+\t\tidx_t sel_count = 0;\n+\t\tfor (; r < count; r++) {\n+\t\t\tidx_t current_row = idx_t(row_ids[r]);\n+\t\t\tif (current_row < base_row_id || current_row >= base_row_id + result.size()) {\n+\t\t\t\t// this row-id does not fall into the current chunk - break\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tauto row_in_vector = current_row - base_row_id;\n+\t\t\tD_ASSERT(row_in_vector < result.size());\n+\t\t\tsel.set_index(sel_count++, row_in_vector);\n+\t\t}\n+\t\tD_ASSERT(sel_count > 0);\n+\t\t// slice the vector with all rows that are present in this vector and erase from the index\n+\t\tresult.Slice(sel, sel_count);\n \n-\tindexes.Scan([&](Index &index) {\n-\t\tindex.Delete(result, row_identifiers);\n-\t\treturn false;\n-\t});\n+\t\tindexes.Scan([&](Index &index) {\n+\t\t\tindex.Delete(result, row_identifiers);\n+\t\t\treturn false;\n+\t\t});\n+\t}\n }\n \n void RowGroupCollection::UpdateColumn(TransactionData transaction, Vector &row_ids, const vector<column_t> &column_path,\n",
  "test_patch": "diff --git a/test/sql/update/string_update_transaction_local_7348.test b/test/sql/update/string_update_transaction_local_7348.test\nnew file mode 100644\nindex 000000000000..ed27991fc6f1\n--- /dev/null\n+++ b/test/sql/update/string_update_transaction_local_7348.test\n@@ -0,0 +1,35 @@\n+# name: test/sql/update/string_update_transaction_local_7348.test\n+# description: Issue #7348 - crash when updating transaction local storage\n+# group: [update]\n+\n+statement ok\n+BEGIN;\n+\n+statement ok\n+CREATE TABLE t1(a VARCHAR(256) PRIMARY KEY, b INTEGER);\n+\n+statement ok\n+INSERT INTO t1 VALUES('    4-abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ', 2+1);\n+\n+statement ok\n+INSERT INTO t1 VALUES('   34-abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ', 18);\n+\n+statement ok\n+INSERT INTO t1 SELECT b, b+1 FROM t1 WHERE b<5;\n+\n+query II\n+FROM t1\n+----\n+    4-abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\t3\n+   34-abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\t18\n+3\t4\n+\n+statement ok\n+UPDATE t1 SET a = CONCAT(a, 'x') WHERE b%2=0;\n+\n+query II\n+FROM t1\n+----\n+    4-abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\t3\n+   34-abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZx\t18\n+3x\t4\n",
  "problem_statement": "DuckDB crashed in duckdb::Utf8Proc::Analyze at third_party/utf8proc/utf8proc_wrapper.cpp:74\n### What happens?\n\nThe DuckDB binary (`/usr/local/bin/duckdb`) crashed in `duckdb::Utf8Proc::Analyze` at `third_party/utf8proc/utf8proc_wrapper.cpp:74`.\n\n### To Reproduce\n\nPoC:\r\n```sql\r\nBEGIN;\r\nCREATE TABLE t1(a VARCHAR(256) PRIMARY KEY, b INTEGER) WITH (storage_parameter='heap');\r\nINSERT INTO t1 VALUES('    4-abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ', 2+1);\r\nINSERT INTO t1 VALUES('   34-abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ', 18);\r\nINSERT INTO t1 SELECT b, b+1 FROM t1 WHERE b<5;\r\nUPDATE t1 SET a = CONCAT(a, 'x') WHERE b%2=0;\r\n```\r\n\r\nASAN report:\r\n```\r\nAddressSanitizer:DEADLYSIGNAL\r\n=================================================================\r\n==2032597==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x55c833e0d9a1 bp 0x7fff1082c3f0 sp 0x7fff1082c320 T0)\r\n==2032597==The signal is caused by a READ memory access.\r\n==2032597==Hint: address points to the zero page.\r\n    #0 0x55c833e0d9a0 in duckdb::Utf8Proc::Analyze(char const*, unsigned long, duckdb::UnicodeInvalidReason*, unsigned long*) /root/duckdb_master/third_party/utf8proc/utf8proc_wrapper.cpp:74\r\n    #1 0x55c8344bf7ef in duckdb::string_t::Verify() const /root/duckdb_master/src/common/types/string_type.cpp:15\r\n    #2 0x55c834520c39 in duckdb::Vector::Verify(duckdb::Vector&, duckdb::SelectionVector const&, unsigned long) /root/duckdb_master/src/common/types/vector.cpp:1307\r\n    #3 0x55c834523118 in duckdb::Vector::Verify(unsigned long) /root/duckdb_master/src/common/types/vector.cpp:1440\r\n    #4 0x55c8350c5f73 in duckdb::ExpressionExecutor::Verify(duckdb::Expression const&, duckdb::Vector&, unsigned long) /root/duckdb_master/src/execution/expression_executor.cpp:137\r\n    #5 0x55c8350c7608 in duckdb::ExpressionExecutor::Execute(duckdb::Expression const&, duckdb::ExpressionState*, duckdb::SelectionVector const*, unsigned long, duckdb::Vector&) /root/duckdb_master/src/execution/expression_executor.cpp:217\r\n    #6 0x55c8350c4e9c in duckdb::ExpressionExecutor::ExecuteExpression(unsigned long, duckdb::Vector&) /root/duckdb_master/src/execution/expression_executor.cpp:105\r\n    #7 0x55c8350c403b in duckdb::ExpressionExecutor::Execute(duckdb::DataChunk*, duckdb::DataChunk&) /root/duckdb_master/src/execution/expression_executor.cpp:76\r\n    #8 0x55c835e68981 in duckdb::ExpressionExecutor::Execute(duckdb::DataChunk&, duckdb::DataChunk&) /root/duckdb_master/src/include/duckdb/execution/expression_executor.hpp:50\r\n    #9 0x55c835de07fd in duckdb::Index::ExecuteExpressions(duckdb::DataChunk&, duckdb::DataChunk&) /root/duckdb_master/src/storage/index.cpp:78\r\n    #10 0x55c835052337 in duckdb::ART::Delete(duckdb::IndexLock&, duckdb::DataChunk&, duckdb::Vector&) /root/duckdb_master/src/execution/index/art/art.cpp:519\r\n    #11 0x55c835ddf5ba in duckdb::Index::Delete(duckdb::DataChunk&, duckdb::Vector&) /root/duckdb_master/src/storage/index.cpp:48\r\n    #12 0x55c835bfe223 in operator() /root/duckdb_master/src/storage/table/row_group_collection.cpp:557\r\n    #13 0x55c835c48eaa in Scan<duckdb::RowGroupCollection::RemoveFromIndexes(duckdb::TableIndexList&, duckdb::Vector&, duckdb::idx_t)::<lambda(duckdb::Index&)> > /root/duckdb_master/src/include/duckdb/storage/table/table_index_list.hpp:26\r\n    #14 0x55c835bfee9f in duckdb::RowGroupCollection::RemoveFromIndexes(duckdb::TableIndexList&, duckdb::Vector&, unsigned long) /root/duckdb_master/src/storage/table/row_group_collection.cpp:556\r\n    #15 0x55c835df22c0 in duckdb::LocalStorage::Delete(duckdb::DataTable&, duckdb::Vector&, unsigned long) /root/duckdb_master/src/storage/local_storage.cpp:476\r\n    #16 0x55c835dd6b50 in duckdb::DataTable::Delete(duckdb::TableCatalogEntry&, duckdb::ClientContext&, duckdb::Vector&, unsigned long) /root/duckdb_master/src/storage/data_table.cpp:984\r\n    #17 0x55c837b4fd53 in duckdb::PhysicalUpdate::Sink(duckdb::ExecutionContext&, duckdb::GlobalSinkState&, duckdb::LocalSinkState&, duckdb::DataChunk&) const /root/duckdb_master/src/execution/operator/persistent/physical_update.cpp:110\r\n    #18 0x55c83577657a in duckdb::PipelineExecutor::ExecutePushInternal(duckdb::DataChunk&, unsigned long) /root/duckdb_master/src/parallel/pipeline_executor.cpp:104\r\n    #19 0x55c8357774b8 in duckdb::PipelineExecutor::FlushCachingOperatorsPush() /root/duckdb_master/src/parallel/pipeline_executor.cpp:136\r\n    #20 0x55c8357778d1 in duckdb::PipelineExecutor::PushFinalize() /root/duckdb_master/src/parallel/pipeline_executor.cpp:157\r\n    #21 0x55c835775491 in duckdb::PipelineExecutor::Execute(unsigned long) /root/duckdb_master/src/parallel/pipeline_executor.cpp:61\r\n    #22 0x55c835786cb2 in duckdb::PipelineTask::ExecuteTask(duckdb::TaskExecutionMode) /root/duckdb_master/src/parallel/pipeline.cpp:37\r\n    #23 0x55c835754309 in duckdb::ExecutorTask::Execute(duckdb::TaskExecutionMode) /root/duckdb_master/src/parallel/executor_task.cpp:17\r\n    #24 0x55c835760f99 in duckdb::Executor::ExecuteTask() /root/duckdb_master/src/parallel/executor.cpp:402\r\n    #25 0x55c83531e511 in duckdb::ClientContext::ExecuteTaskInternal(duckdb::ClientContextLock&, duckdb::PendingQueryResult&) /root/duckdb_master/src/main/client_context.cpp:439\r\n    #26 0x55c8353676a8 in duckdb::PendingQueryResult::ExecuteTaskInternal(duckdb::ClientContextLock&) /root/duckdb_master/src/main/pending_query_result.cpp:53\r\n    #27 0x55c8353679a4 in duckdb::PendingQueryResult::ExecuteInternal(duckdb::ClientContextLock&) /root/duckdb_master/src/main/pending_query_result.cpp:58\r\n    #28 0x55c835368004 in duckdb::PendingQueryResult::Execute() /root/duckdb_master/src/main/pending_query_result.cpp:70\r\n    #29 0x55c83536a5da in duckdb::PreparedStatement::Execute(duckdb::vector<duckdb::Value, std::allocator<duckdb::Value> >&, bool) /root/duckdb_master/src/main/prepared_statement.cpp:77\r\n    #30 0x55c833da8367 in duckdb_shell_sqlite3_print_duckbox /root/duckdb_master/tools/sqlite3_api_wrapper/sqlite3_api_wrapper.cpp:238\r\n    #31 0x55c833d38864 in exec_prepared_stmt /root/duckdb_master/tools/shell/shell.c:12898\r\n    #32 0x55c833d3be85 in shell_exec /root/duckdb_master/tools/shell/shell.c:13233\r\n    #33 0x55c833d719fb in runOneSqlLine /root/duckdb_master/tools/shell/shell.c:20075\r\n    #34 0x55c833d72f39 in process_input /root/duckdb_master/tools/shell/shell.c:20193\r\n    #35 0x55c833d77a00 in main /root/duckdb_master/tools/shell/shell.c:21014\r\n    #36 0x7f5a60b8f082 in __libc_start_main ../csu/libc-start.c:308\r\n    #37 0x55c833cd970d in _start (/root/duckdb_master/bin/usr/local/bin/duckdb+0xd7e470d)\r\n\r\nAddressSanitizer can not provide additional info.\r\nSUMMARY: AddressSanitizer: SEGV /root/duckdb_master/third_party/utf8proc/utf8proc_wrapper.cpp:74 in duckdb::Utf8Proc::Analyze(char const*, unsigned long, duckdb::UnicodeInvalidReason*, unsigned long*)\r\n==2032597==ABORTING\r\n```\n\n### OS:\n\nUbuntu 20.04 64bit\n\n### DuckDB Version:\n\nv0.7.2-dev2867 aa20f173b1\n\n### DuckDB Client:\n\nBinary (/usr/local/bin/duckdb)\n\n### Full Name:\n\nJingzhou Fu\n\n### Affiliation:\n\nWingtecher Lab of Tsinghua University\n\n### Have you tried this on the latest `master` branch?\n\n- [X] I agree\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] I agree\nDuckDB crashed in duckdb::Utf8Proc::Analyze at third_party/utf8proc/utf8proc_wrapper.cpp:74\n### What happens?\n\nThe DuckDB binary (`/usr/local/bin/duckdb`) crashed in `duckdb::Utf8Proc::Analyze` at `third_party/utf8proc/utf8proc_wrapper.cpp:74`.\n\n### To Reproduce\n\nPoC:\r\n```sql\r\nBEGIN;\r\nCREATE TABLE t1(a VARCHAR(256) PRIMARY KEY, b INTEGER) WITH (storage_parameter='heap');\r\nINSERT INTO t1 VALUES('    4-abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ', 2+1);\r\nINSERT INTO t1 VALUES('   34-abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ', 18);\r\nINSERT INTO t1 SELECT b, b+1 FROM t1 WHERE b<5;\r\nUPDATE t1 SET a = CONCAT(a, 'x') WHERE b%2=0;\r\n```\r\n\r\nASAN report:\r\n```\r\nAddressSanitizer:DEADLYSIGNAL\r\n=================================================================\r\n==2032597==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x55c833e0d9a1 bp 0x7fff1082c3f0 sp 0x7fff1082c320 T0)\r\n==2032597==The signal is caused by a READ memory access.\r\n==2032597==Hint: address points to the zero page.\r\n    #0 0x55c833e0d9a0 in duckdb::Utf8Proc::Analyze(char const*, unsigned long, duckdb::UnicodeInvalidReason*, unsigned long*) /root/duckdb_master/third_party/utf8proc/utf8proc_wrapper.cpp:74\r\n    #1 0x55c8344bf7ef in duckdb::string_t::Verify() const /root/duckdb_master/src/common/types/string_type.cpp:15\r\n    #2 0x55c834520c39 in duckdb::Vector::Verify(duckdb::Vector&, duckdb::SelectionVector const&, unsigned long) /root/duckdb_master/src/common/types/vector.cpp:1307\r\n    #3 0x55c834523118 in duckdb::Vector::Verify(unsigned long) /root/duckdb_master/src/common/types/vector.cpp:1440\r\n    #4 0x55c8350c5f73 in duckdb::ExpressionExecutor::Verify(duckdb::Expression const&, duckdb::Vector&, unsigned long) /root/duckdb_master/src/execution/expression_executor.cpp:137\r\n    #5 0x55c8350c7608 in duckdb::ExpressionExecutor::Execute(duckdb::Expression const&, duckdb::ExpressionState*, duckdb::SelectionVector const*, unsigned long, duckdb::Vector&) /root/duckdb_master/src/execution/expression_executor.cpp:217\r\n    #6 0x55c8350c4e9c in duckdb::ExpressionExecutor::ExecuteExpression(unsigned long, duckdb::Vector&) /root/duckdb_master/src/execution/expression_executor.cpp:105\r\n    #7 0x55c8350c403b in duckdb::ExpressionExecutor::Execute(duckdb::DataChunk*, duckdb::DataChunk&) /root/duckdb_master/src/execution/expression_executor.cpp:76\r\n    #8 0x55c835e68981 in duckdb::ExpressionExecutor::Execute(duckdb::DataChunk&, duckdb::DataChunk&) /root/duckdb_master/src/include/duckdb/execution/expression_executor.hpp:50\r\n    #9 0x55c835de07fd in duckdb::Index::ExecuteExpressions(duckdb::DataChunk&, duckdb::DataChunk&) /root/duckdb_master/src/storage/index.cpp:78\r\n    #10 0x55c835052337 in duckdb::ART::Delete(duckdb::IndexLock&, duckdb::DataChunk&, duckdb::Vector&) /root/duckdb_master/src/execution/index/art/art.cpp:519\r\n    #11 0x55c835ddf5ba in duckdb::Index::Delete(duckdb::DataChunk&, duckdb::Vector&) /root/duckdb_master/src/storage/index.cpp:48\r\n    #12 0x55c835bfe223 in operator() /root/duckdb_master/src/storage/table/row_group_collection.cpp:557\r\n    #13 0x55c835c48eaa in Scan<duckdb::RowGroupCollection::RemoveFromIndexes(duckdb::TableIndexList&, duckdb::Vector&, duckdb::idx_t)::<lambda(duckdb::Index&)> > /root/duckdb_master/src/include/duckdb/storage/table/table_index_list.hpp:26\r\n    #14 0x55c835bfee9f in duckdb::RowGroupCollection::RemoveFromIndexes(duckdb::TableIndexList&, duckdb::Vector&, unsigned long) /root/duckdb_master/src/storage/table/row_group_collection.cpp:556\r\n    #15 0x55c835df22c0 in duckdb::LocalStorage::Delete(duckdb::DataTable&, duckdb::Vector&, unsigned long) /root/duckdb_master/src/storage/local_storage.cpp:476\r\n    #16 0x55c835dd6b50 in duckdb::DataTable::Delete(duckdb::TableCatalogEntry&, duckdb::ClientContext&, duckdb::Vector&, unsigned long) /root/duckdb_master/src/storage/data_table.cpp:984\r\n    #17 0x55c837b4fd53 in duckdb::PhysicalUpdate::Sink(duckdb::ExecutionContext&, duckdb::GlobalSinkState&, duckdb::LocalSinkState&, duckdb::DataChunk&) const /root/duckdb_master/src/execution/operator/persistent/physical_update.cpp:110\r\n    #18 0x55c83577657a in duckdb::PipelineExecutor::ExecutePushInternal(duckdb::DataChunk&, unsigned long) /root/duckdb_master/src/parallel/pipeline_executor.cpp:104\r\n    #19 0x55c8357774b8 in duckdb::PipelineExecutor::FlushCachingOperatorsPush() /root/duckdb_master/src/parallel/pipeline_executor.cpp:136\r\n    #20 0x55c8357778d1 in duckdb::PipelineExecutor::PushFinalize() /root/duckdb_master/src/parallel/pipeline_executor.cpp:157\r\n    #21 0x55c835775491 in duckdb::PipelineExecutor::Execute(unsigned long) /root/duckdb_master/src/parallel/pipeline_executor.cpp:61\r\n    #22 0x55c835786cb2 in duckdb::PipelineTask::ExecuteTask(duckdb::TaskExecutionMode) /root/duckdb_master/src/parallel/pipeline.cpp:37\r\n    #23 0x55c835754309 in duckdb::ExecutorTask::Execute(duckdb::TaskExecutionMode) /root/duckdb_master/src/parallel/executor_task.cpp:17\r\n    #24 0x55c835760f99 in duckdb::Executor::ExecuteTask() /root/duckdb_master/src/parallel/executor.cpp:402\r\n    #25 0x55c83531e511 in duckdb::ClientContext::ExecuteTaskInternal(duckdb::ClientContextLock&, duckdb::PendingQueryResult&) /root/duckdb_master/src/main/client_context.cpp:439\r\n    #26 0x55c8353676a8 in duckdb::PendingQueryResult::ExecuteTaskInternal(duckdb::ClientContextLock&) /root/duckdb_master/src/main/pending_query_result.cpp:53\r\n    #27 0x55c8353679a4 in duckdb::PendingQueryResult::ExecuteInternal(duckdb::ClientContextLock&) /root/duckdb_master/src/main/pending_query_result.cpp:58\r\n    #28 0x55c835368004 in duckdb::PendingQueryResult::Execute() /root/duckdb_master/src/main/pending_query_result.cpp:70\r\n    #29 0x55c83536a5da in duckdb::PreparedStatement::Execute(duckdb::vector<duckdb::Value, std::allocator<duckdb::Value> >&, bool) /root/duckdb_master/src/main/prepared_statement.cpp:77\r\n    #30 0x55c833da8367 in duckdb_shell_sqlite3_print_duckbox /root/duckdb_master/tools/sqlite3_api_wrapper/sqlite3_api_wrapper.cpp:238\r\n    #31 0x55c833d38864 in exec_prepared_stmt /root/duckdb_master/tools/shell/shell.c:12898\r\n    #32 0x55c833d3be85 in shell_exec /root/duckdb_master/tools/shell/shell.c:13233\r\n    #33 0x55c833d719fb in runOneSqlLine /root/duckdb_master/tools/shell/shell.c:20075\r\n    #34 0x55c833d72f39 in process_input /root/duckdb_master/tools/shell/shell.c:20193\r\n    #35 0x55c833d77a00 in main /root/duckdb_master/tools/shell/shell.c:21014\r\n    #36 0x7f5a60b8f082 in __libc_start_main ../csu/libc-start.c:308\r\n    #37 0x55c833cd970d in _start (/root/duckdb_master/bin/usr/local/bin/duckdb+0xd7e470d)\r\n\r\nAddressSanitizer can not provide additional info.\r\nSUMMARY: AddressSanitizer: SEGV /root/duckdb_master/third_party/utf8proc/utf8proc_wrapper.cpp:74 in duckdb::Utf8Proc::Analyze(char const*, unsigned long, duckdb::UnicodeInvalidReason*, unsigned long*)\r\n==2032597==ABORTING\r\n```\n\n### OS:\n\nUbuntu 20.04 64bit\n\n### DuckDB Version:\n\nv0.7.2-dev2867 aa20f173b1\n\n### DuckDB Client:\n\nBinary (/usr/local/bin/duckdb)\n\n### Full Name:\n\nJingzhou Fu\n\n### Affiliation:\n\nWingtecher Lab of Tsinghua University\n\n### Have you tried this on the latest `master` branch?\n\n- [X] I agree\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] I agree\n",
  "hints_text": "Seems that cannot reproduce on the latest branch: [97f3f09](https://github.com/duckdb/duckdb/commit/97f3f0962930ba85686383c0fe5a20fddb12dbf8)\n> Seems that cannot reproduce on the latest branch: [97f3f09](https://github.com/duckdb/duckdb/commit/97f3f0962930ba85686383c0fe5a20fddb12dbf8)\r\n\r\nA little bit strange, it seems only reproducible when compiling with -DCMAKE_BUILD_TYPE=Debug. My steps in bash are the following:\r\n\r\n```bash\r\ngit clone https://github.com/duckdb/duckdb.git duckdb_97f3f09\r\ncd duckdb_97f3f09/\r\ngit checkout 97f3f09\r\nmkdir bld\r\ncd bld/\r\ncmake .. -DCMAKE_BUILD_TYPE=Debug\r\nmake -j20\r\necho \"BEGIN;                                 \r\nCREATE TABLE t1(a VARCHAR(256) PRIMARY KEY, b INTEGER) WITH (storage_parameter='heap');\r\nINSERT INTO t1 VALUES('    4-abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ', 2+1);\r\nINSERT INTO t1 VALUES('   34-abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ', 18);\r\nINSERT INTO t1 SELECT b, b+1 FROM t1 WHERE b<5;\r\nUPDATE t1 SET a = CONCAT(a, 'x') WHERE b%2=0;\" | ./duckdb\r\n```\n> Seems that cannot reproduce on the latest branch: [97f3f09](https://github.com/duckdb/duckdb/commit/97f3f0962930ba85686383c0fe5a20fddb12dbf8)\r\n\r\nI can reproduce it in the latest branch. Did you try debug build with asan?\r\n\r\nMinimal reproduction:\r\n\r\n```\r\nBEGIN;\r\nCREATE TABLE t1(a VARCHAR(10) PRIMARY KEY, b INTEGER);\r\nINSERT INTO t1 VALUES('aa', 1);\r\nINSERT INTO t1 VALUES('bb', 2);\r\nINSERT INTO t1 SELECT b, b FROM t1;\r\nUPDATE t1 SET a = a || b WHERE b%2=0;\r\n```\r\n\r\nThe problem is it tried to delete 2nd and 4th tuple and reinsert, but the scan only returns the 1st and 2nd tuple, and then it tries to access 4th tuple, which is an invalid address.\nI have read the code and the problem seems to be at `RowGroupCollection::RemoveFromIndexes`\r\n\r\nIt just use the row group that includes `row_ids[0]`, is it correct? In this case `row_ids[0]` and `row_ids[1]` are in different row group.\r\n\r\nMay be we need to loop through all row group that includes `row_id`?\nSeems that cannot reproduce on the latest branch: [97f3f09](https://github.com/duckdb/duckdb/commit/97f3f0962930ba85686383c0fe5a20fddb12dbf8)\n> Seems that cannot reproduce on the latest branch: [97f3f09](https://github.com/duckdb/duckdb/commit/97f3f0962930ba85686383c0fe5a20fddb12dbf8)\r\n\r\nA little bit strange, it seems only reproducible when compiling with -DCMAKE_BUILD_TYPE=Debug. My steps in bash are the following:\r\n\r\n```bash\r\ngit clone https://github.com/duckdb/duckdb.git duckdb_97f3f09\r\ncd duckdb_97f3f09/\r\ngit checkout 97f3f09\r\nmkdir bld\r\ncd bld/\r\ncmake .. -DCMAKE_BUILD_TYPE=Debug\r\nmake -j20\r\necho \"BEGIN;                                 \r\nCREATE TABLE t1(a VARCHAR(256) PRIMARY KEY, b INTEGER) WITH (storage_parameter='heap');\r\nINSERT INTO t1 VALUES('    4-abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ', 2+1);\r\nINSERT INTO t1 VALUES('   34-abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ', 18);\r\nINSERT INTO t1 SELECT b, b+1 FROM t1 WHERE b<5;\r\nUPDATE t1 SET a = CONCAT(a, 'x') WHERE b%2=0;\" | ./duckdb\r\n```\n> Seems that cannot reproduce on the latest branch: [97f3f09](https://github.com/duckdb/duckdb/commit/97f3f0962930ba85686383c0fe5a20fddb12dbf8)\r\n\r\nI can reproduce it in the latest branch. Did you try debug build with asan?\r\n\r\nMinimal reproduction:\r\n\r\n```\r\nBEGIN;\r\nCREATE TABLE t1(a VARCHAR(10) PRIMARY KEY, b INTEGER);\r\nINSERT INTO t1 VALUES('aa', 1);\r\nINSERT INTO t1 VALUES('bb', 2);\r\nINSERT INTO t1 SELECT b, b FROM t1;\r\nUPDATE t1 SET a = a || b WHERE b%2=0;\r\n```\r\n\r\nThe problem is it tried to delete 2nd and 4th tuple and reinsert, but the scan only returns the 1st and 2nd tuple, and then it tries to access 4th tuple, which is an invalid address.\nI have read the code and the problem seems to be at `RowGroupCollection::RemoveFromIndexes`\r\n\r\nIt just use the row group that includes `row_ids[0]`, is it correct? In this case `row_ids[0]` and `row_ids[1]` are in different row group.\r\n\r\nMay be we need to loop through all row group that includes `row_id`?",
  "created_at": "2023-05-10T13:24:08Z"
}