{
  "repo": "duckdb/duckdb",
  "pull_number": 4507,
  "instance_id": "duckdb__duckdb-4507",
  "issue_numbers": [
    "4503"
  ],
  "base_commit": "a4f452617af73a5c1e204251aae9f7868e9901c9",
  "patch": "diff --git a/src/execution/operator/persistent/buffered_csv_reader.cpp b/src/execution/operator/persistent/buffered_csv_reader.cpp\nindex 31cfef48bc90..e20a93bea8c7 100644\n--- a/src/execution/operator/persistent/buffered_csv_reader.cpp\n+++ b/src/execution/operator/persistent/buffered_csv_reader.cpp\n@@ -451,14 +451,20 @@ static bool StartsWithNumericDate(string &separator, const string &value) {\n \n string GenerateDateFormat(const string &separator, const char *format_template) {\n \tstring format_specifier = format_template;\n-\n-\t//\treplace all dashes with the separator\n-\tfor (auto pos = std::find(format_specifier.begin(), format_specifier.end(), '-'); pos != format_specifier.end();\n-\t     pos = std::find(pos + separator.size(), format_specifier.end(), '-')) {\n-\t\tformat_specifier.replace(pos, pos + 1, separator);\n+\tauto amount_of_dashes = std::count(format_specifier.begin(), format_specifier.end(), '-');\n+\tif (!amount_of_dashes) {\n+\t\treturn format_specifier;\n+\t}\n+\tstring result;\n+\tresult.reserve(format_specifier.size() - amount_of_dashes + (amount_of_dashes * separator.size()));\n+\tfor (auto &character : format_specifier) {\n+\t\tif (character == '-') {\n+\t\t\tresult += separator;\n+\t\t} else {\n+\t\t\tresult += character;\n+\t\t}\n \t}\n-\n-\treturn format_specifier;\n+\treturn result;\n }\n \n TextSearchShiftArray::TextSearchShiftArray() {\n",
  "test_patch": "diff --git a/test/sql/copy/csv/auto/test_date_format_bug_linux.test b/test/sql/copy/csv/auto/test_date_format_bug_linux.test\nnew file mode 100644\nindex 000000000000..10651f42ca6b\n--- /dev/null\n+++ b/test/sql/copy/csv/auto/test_date_format_bug_linux.test\n@@ -0,0 +1,10 @@\n+# name: test/sql/copy/csv/auto/test_date_format_bug_linux.test\n+# group: [auto]\n+\n+query I\n+SELECT *  FROM read_csv_auto('test/sql/copy/csv/data/auto/date_format_bug_linux.csv')\n+----\n+test\n+8cb123cb8\n+34fd321\n+fg5391jn4\ndiff --git a/test/sql/copy/csv/data/auto/date_format_bug_linux.csv b/test/sql/copy/csv/data/auto/date_format_bug_linux.csv\nnew file mode 100644\nindex 000000000000..60b1f3d4b57e\n--- /dev/null\n+++ b/test/sql/copy/csv/data/auto/date_format_bug_linux.csv\n@@ -0,0 +1,4 @@\n+test\n+8cb123cb8\n+34fd321\n+fg5391jn4\n\\ No newline at end of file\n",
  "problem_statement": "RuntimeError by read_csv_auto for specific value\n### What happens?\r\n\r\nI try process the csv file. It has only one column now for example.\r\n\r\n```\r\ntest\r\n8cb123cb8\r\n34fd321\r\nfg5391jn4\r\n```\r\nI used simple query for selectig all row/columns:\r\n```\r\nimprot duckdb\r\ncon = duckdb.connect()\r\nquery = \"SELECT *  FROM read_csv_auto('test.csv')\"\r\ncon.execute(query)\r\n```\r\nThen got a error:  \r\n```\r\nRuntimeError: basic_string::replace: __pos (which is 18446744073709496293) > this->size() (which is 9)\r\n```\r\n\r\nAfter some tries I undestand that script failed when trying process `8cb123cb8` value. It'is ok when I remove it.\r\n\r\n### To Reproduce\r\n\r\n1. Save csv file  as test.csv\r\n2.  Run\r\n````\r\nimprot duckdb\r\ncon = duckdb.connect()\r\nquery = \"SELECT *  FROM read_csv_auto('test.csv')\"\r\ncon.execute(query)\r\n````\r\n\r\n### OS:\r\n\r\nLinux, Ubuntu 22.04, 5.15.0-46-generic\r\n\r\n### DuckDB Version:\r\n\r\n0.4.0\r\n\r\n### DuckDB Client:\r\n\r\n0.4.0\r\n\r\n### Full Name:\r\n\r\nNick Mishustin\r\n\r\n### Affiliation:\r\n\r\npersonal\r\n\r\n### Have you tried this on the latest `master` branch?\r\n\r\n- [X] I agree\r\n\r\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\r\n\r\n- [X] I agree\n",
  "hints_text": "Sorry, I can't reproduce this with your example.\nI also can't reproduce this\r\nAre you sure you didn't accidentally insert an invisible symbol in there accidentally? Those do exist sadly\r\n\r\nAh..\r\nit is reproducable\r\n```\r\n>>> import duckdb\r\n>>> con = duckdb.connect()\r\n>>> query = \"SELECT *  FROM read_csv_auto('csv_bug.csv')\"\r\n>>> res = con.execute(query)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nduckdb.Error: Invalid Error: basic_string::replace: __pos (which is 18446744073709550116) > this->size() (which is 18)\r\n>>> \r\n\r\n```\n@Tishj @hannes \r\nHello, thanks for your answers. \r\nI reproduce it on [google colab ](https://colab.research.google.com/drive/1LjSJTHjHbT5Wvr9ckYV-RraHSkO_iUSV?usp=sharing)\r\nI attach my file here. It has only visible symbols.\r\n[test.csv](https://github.com/duckdb/duckdb/files/9434048/test.csv)\r\n\nLooks like a Linux/gcc-specific issue, we were able to reproduce there, too\n```c++\r\n   456          for (auto pos = std::find(format_specifier.begin(), format_specifier.end(), '-'); pos != format_specifier.end();\r\n-> 457               pos = std::find(pos + separator.size(), format_specifier.end(), '-')) {\r\n   458                  format_specifier.replace(pos, pos + 1, separator);\r\n   459          }\r\n   ```\r\n   crash happens here\r\n \r\n format_specifier:\r\n ```c++\r\n (lldb) p format_specifier \r\n(std::string) $8 = \"%Ycb%m-%d %H:%M:%S.%f\"\r\n```\r\nseparator: \"cb\"\r\n\r\nMy current hunch is that pos + separator.size() exceeds format_specifier.size() and mac just truncates to end, while linux offers no protection and just tries to read there, searching forward towards `format_specifier.end()` which is behind it, so it continues until it segfaults \ud83d\ude43 \r\n\r\n~~Hmm that's not it.. it didn't make much logical sense anyways, we replaced the occurrence of '-' with separator, so there is guaranteed to be at least 'separator.size()' positions left until end~~\r\nWhile writing that it hit me, the iterator is invalidated by `replace` - that's why it's crashing",
  "created_at": "2022-08-26T21:12:04Z"
}