{
  "repo": "duckdb/duckdb",
  "pull_number": 6183,
  "instance_id": "duckdb__duckdb-6183",
  "issue_numbers": [
    "6159"
  ],
  "base_commit": "f75b768239a8759a977b85413009791358799046",
  "patch": "diff --git a/tools/jdbc/src/main/java/org/duckdb/DuckDBDatabaseMetaData.java b/tools/jdbc/src/main/java/org/duckdb/DuckDBDatabaseMetaData.java\nindex a321e9302378..29a269b5d330 100644\n--- a/tools/jdbc/src/main/java/org/duckdb/DuckDBDatabaseMetaData.java\n+++ b/tools/jdbc/src/main/java/org/duckdb/DuckDBDatabaseMetaData.java\n@@ -650,8 +650,23 @@ public ResultSet getSchemas(String catalog, String schemaPattern) throws SQLExce\n \n \t@Override\n \tpublic ResultSet getTableTypes() throws SQLException {\n-\t\treturn conn.createStatement().executeQuery(\n-\t\t\t\t\"SELECT DISTINCT table_type AS 'TABLE_TYPE' FROM information_schema.tables ORDER BY \\\"TABLE_TYPE\\\"\");\n+\t\tString[] tableTypesArray = new String[]{\"BASE TABLE\", \"LOCAL TEMPORARY\", \"VIEW\"};\n+\t\tStringBuilder stringBuilder = new StringBuilder();\n+\t\tboolean first = true;\n+\t\tfor (String tableType : tableTypesArray) {\n+\t\t\tif (!first) {\n+\t\t\t\tstringBuilder.append(\"\\nUNION ALL\\n\");\n+\t\t\t}\n+\t\t\tstringBuilder.append(\"SELECT '\");\n+\t\t\tstringBuilder.append(tableType);\n+\t\t\tstringBuilder.append(\"'\");\n+\t\t\tif (first) {\n+\t\t\t\tstringBuilder.append(\" AS 'TABLE_TYPE'\");\n+\t\t\t\tfirst = false;\n+\t\t\t}\n+\t\t}\n+\t\tstringBuilder.append(\"\\nORDER BY TABLE_TYPE\");\n+\t\treturn conn.createStatement().executeQuery(stringBuilder.toString());\n \t}\n \n \t@Override\n",
  "test_patch": "diff --git a/tools/jdbc/src/test/java/org/duckdb/test/TestDuckDBJDBC.java b/tools/jdbc/src/test/java/org/duckdb/test/TestDuckDBJDBC.java\nindex e1ec0ac66aa6..a1d951545220 100644\n--- a/tools/jdbc/src/test/java/org/duckdb/test/TestDuckDBJDBC.java\n+++ b/tools/jdbc/src/test/java/org/duckdb/test/TestDuckDBJDBC.java\n@@ -21,9 +21,11 @@\n import java.sql.Timestamp;\n import java.sql.Types;\n import java.time.Duration;\n+import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Comparator;\n import java.util.HashSet;\n+import java.util.List;\n import java.util.Properties;\n import java.util.TimeZone;\n import java.time.LocalDateTime;\n@@ -1627,18 +1629,6 @@ public static void test_schema_reflection() throws Exception {\n \t\tDatabaseMetaData md = conn.getMetaData();\n \t\tResultSet rs;\n \n-\t\trs = md.getTableTypes();\n-\t\tassertTrue(rs.next());\n-\t\tassertEquals(rs.getString(\"TABLE_TYPE\"), \"BASE TABLE\");\n-\t\tassertEquals(rs.getString(1), \"BASE TABLE\");\n-\n-\t\tassertTrue(rs.next());\n-\t\tassertEquals(rs.getString(\"TABLE_TYPE\"), \"VIEW\");\n-\t\tassertEquals(rs.getString(1), \"VIEW\");\n-\n-\t\tassertFalse(rs.next());\n-\t\trs.close();\n-\n \t\trs = md.getCatalogs();\n \t\tassertTrue(rs.next());\n \t\tassertTrue(rs.getObject(\"TABLE_CAT\") != null);\n@@ -1810,6 +1800,29 @@ public static void test_schema_reflection() throws Exception {\n \t\tconn.close();\n \t}\n \n+\tpublic static void test_get_table_types() throws Exception {\n+\t\tString[] tableTypesArray = new String[]{\"BASE TABLE\", \"LOCAL TEMPORARY\", \"VIEW\"};\n+\t\tList<String> tableTypesList = new ArrayList<String>(Arrays.asList(tableTypesArray));\n+\t\ttableTypesList.sort(Comparator.naturalOrder());\n+\n+\t\tConnection conn = DriverManager.getConnection(\"jdbc:duckdb:\");\n+\t\tDatabaseMetaData databaseMetaData = conn.getMetaData();\n+\t\tResultSet rs = databaseMetaData.getTableTypes();\n+\t\t\n+\t\tfor (int i = 0; i < tableTypesArray.length; i++) {\n+\t\t\tassertTrue(rs.next(), \"Expected a row from table\");\n+\t\t\tString tableTypeFromResultSet = rs.getString(\"TABLE_TYPE\");\n+\t\t\tString tableTypeFromList = tableTypesList.get(i);\n+\t\t\tassertTrue(\n+\t\t\t\ttableTypeFromList.equals(tableTypeFromResultSet), \n+\t\t\t\t\"Error in tableTypes at row \" + (i+1) + \": \" +\n+\t\t\t\t\"value from list \" + tableTypeFromList + \" should equal \" +\n+\t\t\t\t\"value from resultset \" + tableTypeFromResultSet\n+\t\t\t);\n+\t\t}\n+\t\trs.close();\n+\t}\n+\t\n \tpublic static void test_connect_wrong_url_bug848() throws Exception {\n \t\tDriver d = new DuckDBDriver();\n \t\tassertNull(d.connect(\"jdbc:h2:\", null));\n",
  "problem_statement": "DuckDBJ: org.duckdb.DuckDBDatabaseMetaData.getTableTypes() should return a list of available table types - not the list of table types that happen to be currently in use.\n### What happens?\n\nMethod `getTableTypes()` of class `org.duckdb.DuckDBDatabaseMetaData` returns a list of table types that happen to be in use in the current database rather than a list of all available types. \r\n\r\nAccording to Javadoc of `java.sql.DatabaseMetaData` (https://docs.oracle.com/en/java/javase/11/docs/api/java.sql/java/sql/DatabaseMetaData.html#getTableTypes()), method `getTableTypes()` should:\r\n\r\n\"Retrieves the table types available in this database. The results are ordered by table type.\"\r\n\r\nThe implementation `org.duckdb.DuckDBDatabaseMetaData.getTableTypes()` (https://github.com/duckdb/duckdb/blob/master/tools/jdbc/src/main/java/org/duckdb/DuckDBDatabaseMetaData.java#L654) returns a unique list of table types from `information_schema.tables`. \r\n\r\nThe method should return a static list to indicate what types are available, not what happens to be in use at some moment in time.\r\n\r\nIf it is possible that extensions provide new table types, then perhaps (de)installation of such an extension would require a refresh of the list. \r\n\n\n### To Reproduce\n\n```\r\n\tpublic static void test_getTableTypes() throws Exception {\r\n\t\tString[] tableTypesArray = new String[]{\"BASE TABLE\", \"LOCAL TEMPORARY\", \"VIEW\"};\r\n\t\tList<String> tableTypesList = new ArrayList(Arrays.asList(tableTypesArray));\r\n    \r\n\t\tConnection conn = DriverManager.getConnection(\"jdbc:duckdb:\");\r\n\t\tDatabaseMetaData databaseMetaData = connection.getMetaData();\r\n    \r\n\t\tResultSet tableTypesResultSet = databaseMetaData.getTableTypes();\r\n\t\twhile (tableTypesResultSet.next()) {\r\n\t\t\tString tableType = tableTypesResultSet.getString(\"TABLE_TYPE\");\r\n\t\t\tif (tableTypesList.contains(tableType)){\r\n\t\t\t\ttableTypesList.remove(tableType);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthrow new Exception(\"Unexpected table type \" + tableType);\r\n\t\t\t}\r\n    }\r\n\t\tassertTrue(\r\n\t\t\tavailableTypes().size() == 0,\r\n\t\t\t\"DatabaseMetaData.getTableTypes() should return \" + String.join(\",\", tableTypesArray);\r\n\t\t);\r\n\t}\r\n\r\n```\n\n### OS:\n\nWindows 10 Pro\n\n### DuckDB Version:\n\nv0.6.2-dev2100\n\n### DuckDB Client:\n\nDuckDBJ (jdbc)\n\n### Full Name:\n\nRoland Bouman\n\n### Affiliation:\n\nJust-Bi.nl (an EPAM company)\n\n### Have you tried this on the latest `master` branch?\n\n- [X] I agree\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] I agree\n",
  "hints_text": "If so desired I can send a PR for the test suite and/or a PR to fix it. ",
  "created_at": "2023-02-10T00:41:22Z"
}