You will be provided with a partial code base and an issue statement explaining a problem to resolve.
In your output, give nothing but the code (no markdown) so that your output can be copy pasted and run immediately with no changes

<issue>
CREATE TABLE from parquet crashes latest bleeding edge
**What does happen?**
R seems to crash whenever I try to create a table from Parquet. 

**What should happen?**
Create the table without a hitch

**To Reproduce**
create table test select * from parquet_scan('H:/parquet_zstd/crsp/dsf/*')

**Environment (please complete the following information):**
Windows 10, R 4.0.2
packageVersion('duckdb')
[1] '0.2.6'

**Before submitting**
I have tried this on the latest master branch, then I resorted to 2.6 from CRAN just to make sure.

I've uploaded one example parquet file (zipped b/c that's the only accepted format).
[leftdate3_192_loop_1.zip](https://github.com/duckdb/duckdb/files/6437850/leftdate3_192_loop_1.zip)



</issue>
<code>
[start of README.md]
1: <img src="https://duckdb.org/images/DuckDB_Logo_dl.png" height="50">
2: 
3: ![.github/workflows/main.yml](https://github.com/cwida/duckdb/workflows/.github/workflows/main.yml/badge.svg?branch=master)
4: [![CodeFactor](https://www.codefactor.io/repository/github/cwida/duckdb/badge)](https://www.codefactor.io/repository/github/cwida/duckdb)
5: [![Coverage Status](https://coveralls.io/repos/github/cwida/duckdb/badge.svg?branch=master)](https://coveralls.io/github/cwida/duckdb?branch=master)
6: 
7: 
8: ## Installation
9: If you just want to install and use DuckDB, please see [our website](https://www.duckdb.org) for installation and usage instructions.
10: 
11: ## Development
12: For development, DuckDB requires [CMake](https://cmake.org), Python3 and a `C++11` compliant compiler. Run `make` in the root directory to compile the sources. For development, use `make debug` to build a non-optimized debug version. You should run `make unit` and `make allunit` to verify that your version works properly after making changes. To test performance, you can run several standard benchmarks from the root directory by executing `./build/release/benchmark/benchmark_runner`.
13: 
14: Please also refer to our [Contribution Guide](CONTRIBUTING.md).
15: 
16: 
[end of README.md]
[start of extension/parquet/include/resizable_buffer.hpp]
1: //===----------------------------------------------------------------------===//
2: //                         DuckDB
3: //
4: // resizable_buffer.hpp
5: //
6: //
7: //===----------------------------------------------------------------------===//
8: #pragma once
9: 
10: #include "duckdb.hpp"
11: #ifndef DUCKDB_AMALGAMATION
12: #include "duckdb/common/allocator.hpp"
13: #endif
14: 
15: #include <exception>
16: 
17: namespace duckdb {
18: 
19: class ByteBuffer { // on to the 10 thousandth impl
20: public:
21: 	char *ptr = nullptr;
22: 	uint64_t len = 0;
23: 
24: 	ByteBuffer() {};
25: 	ByteBuffer(char *ptr, uint64_t len) : ptr(ptr), len(len) {};
26: 
27: 	void inc(uint64_t increment) {
28: 		available(increment);
29: 		len -= increment;
30: 		ptr += increment;
31: 	}
32: 
33: 	template <class T>
34: 	T read() {
35: 		T val = get<T>();
36: 		inc(sizeof(T));
37: 		return val;
38: 	}
39: 
40: 	template <class T>
41: 	T get() {
42: 		available(sizeof(T));
43: 		T val = Load<T>((data_ptr_t)ptr);
44: 		return val;
45: 	}
46: 
47: 	void copy_to(char *dest, uint64_t len) {
48: 		available(len);
49: 		std::memcpy(dest, ptr, len);
50: 	}
51: 
52: 	void zero() {
53: 		std::memset(ptr, 0, len);
54: 	}
55: 
56: 	void available(uint64_t req_len) {
57: 		if (req_len > len) {
58: 			throw std::runtime_error("Out of buffer");
59: 		}
60: 	}
61: };
62: 
63: class ResizeableBuffer : public ByteBuffer {
64: public:
65: 	ResizeableBuffer() {
66: 	}
67: 	ResizeableBuffer(Allocator &allocator, uint64_t new_size) {
68: 		resize(allocator, new_size);
69: 	}
70: 	void resize(Allocator &allocator, uint64_t new_size) {
71: 		if (new_size > alloc_len) {
72: 			alloc_len = new_size;
73: 			allocated_data = allocator.Allocate(alloc_len);
74: 		}
75: 		len = new_size;
76: 		ptr = (char *)allocated_data->get();
77: 	}
78: 
79: private:
80: 	unique_ptr<AllocatedData> allocated_data;
81: 	idx_t alloc_len = 0;
82: };
83: 
84: } // namespace duckdb
[end of extension/parquet/include/resizable_buffer.hpp]
</code>
Here is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.
<patch>
--- a/file.cpp
+++ b/file.cpp
@@ -3,35 +3,44 @@
 #include <cstdlib>
 
 int euclidean(int a, int b) {
-    while (b) {
-        int temp = b;
-        b = a % b;
-        a = temp;
+    if (b == 0) {
+        return a;
     }
-    return a;
+    return euclidean(b, a % b);
 }
 
 std::vector<std::pair<int, int>> bresenham(int x0, int y0, int x1, int y1) {
     std::vector<std::pair<int, int>> points;
     int dx = abs(x1 - x0);
     int dy = abs(y1 - y0);
+    int x = x0, y = y0;
     int sx = (x0 < x1) ? 1 : -1;
     int sy = (y0 < y1) ? 1 : -1;
-    int err = dx - dy;
 
-    while (true) {
-        points.emplace_back(x0, y0);
-        if (x0 == x1 && y0 == y1) break;
-        int e2 = 2 * err;
-        if (e2 > -dy) {
+    if (dx > dy) {
+        int err = dx / 2;
+        while (x != x1) {
+            points.emplace_back(x, y);
             err -= dy;
-            x0 += sx;
+            if (err < 0) {
+                y += sy;
+                err += dx;
+            }
+            x += sx;
         }
-        if (e2 < dx) {
-            err += dx;
-            y0 += sy;
+    } else {
+        int err = dy / 2;
+        while (y != y1) {
+            points.emplace_back(x, y);
+            err -= dx;
+            if (err < 0) {
+                x += sx;
+                err += dy;
+            }
+            y += sy;
         }
     }
 
+    points.emplace_back(x, y);
     return points;
 }

</patch>

I need you to solve the provided issue by generating a single patch file that I can apply directly to this repository using git apply.
Please respond with a single patch file in the format shown above.
Make sure to only include the patch file contents so that the contents of your output can be copied into a patch file and applied directly

Respond below: