{
  "repo": "duckdb/duckdb",
  "pull_number": 1750,
  "instance_id": "duckdb__duckdb-1750",
  "issue_numbers": [
    "1723"
  ],
  "base_commit": "5f28f0815e762f7d3ab10fd3d50bbbcd3a63305d",
  "patch": "diff --git a/extension/parquet/include/resizable_buffer.hpp b/extension/parquet/include/resizable_buffer.hpp\nindex d0ff7dd96305..570fc8e33052 100644\n--- a/extension/parquet/include/resizable_buffer.hpp\n+++ b/extension/parquet/include/resizable_buffer.hpp\n@@ -68,12 +68,15 @@ class ResizeableBuffer : public ByteBuffer {\n \t\tresize(allocator, new_size);\n \t}\n \tvoid resize(Allocator &allocator, uint64_t new_size) {\n+\t\tlen = new_size;\n+\t\tif (new_size == 0) {\n+\t\t\treturn;\n+\t\t}\n \t\tif (new_size > alloc_len) {\n \t\t\talloc_len = new_size;\n \t\t\tallocated_data = allocator.Allocate(alloc_len);\n+\t\t\tptr = (char *)allocated_data->get();\n \t\t}\n-\t\tlen = new_size;\n-\t\tptr = (char *)allocated_data->get();\n \t}\n \n private:\n",
  "test_patch": "diff --git a/test/sql/copy/parquet/data/leftdate3_192_loop_1.parquet b/test/sql/copy/parquet/data/leftdate3_192_loop_1.parquet\nnew file mode 100644\nindex 000000000000..ae67ff15ab71\nBinary files /dev/null and b/test/sql/copy/parquet/data/leftdate3_192_loop_1.parquet differ\ndiff --git a/test/sql/copy/parquet/parquet_1723.test_slow b/test/sql/copy/parquet/parquet_1723.test_slow\nnew file mode 100644\nindex 000000000000..78ab37492efa\n--- /dev/null\n+++ b/test/sql/copy/parquet/parquet_1723.test_slow\n@@ -0,0 +1,14 @@\n+# name: test/sql/copy/parquet/parquet_1723.test_slow\n+# description: CREATE TABLE from parquet crashes latest bleeding edge\n+# group: [parquet]\n+\n+require parquet\n+\n+query I nosort query\n+select * from 'test/sql/copy/parquet/data/leftdate3_192_loop_1.parquet'\n+\n+statement ok\n+create table test as select * from 'test/sql/copy/parquet/data/leftdate3_192_loop_1.parquet'\n+\n+query I nosort query\n+select * from test\n",
  "problem_statement": "CREATE TABLE from parquet crashes latest bleeding edge\n**What does happen?**\r\nR seems to crash whenever I try to create a table from Parquet. \r\n\r\n**What should happen?**\r\nCreate the table without a hitch\r\n\r\n**To Reproduce**\r\ncreate table test select * from parquet_scan('H:/parquet_zstd/crsp/dsf/*')\r\n\r\n**Environment (please complete the following information):**\r\nWindows 10, R 4.0.2\r\npackageVersion('duckdb')\r\n[1] '0.2.6'\r\n\r\n**Before submitting**\r\nI have tried this on the latest master branch, then I resorted to 2.6 from CRAN just to make sure.\r\n\r\nI've uploaded one example parquet file (zipped b/c that's the only accepted format).\r\n[leftdate3_192_loop_1.zip](https://github.com/duckdb/duckdb/files/6437850/leftdate3_192_loop_1.zip)\r\n\r\n\n",
  "hints_text": "Can you please remember to use our issue template next time?\nDidn't see it - is it pinned somewhere?\nAlso this does not crash for me. Template should be shown when creating issue, is it not?\nAh yes, I noticed the template now. In any case, let me try to debug a bit more on various environments.\nAs this involves a CREATE TABLE AS, this could be related to #1745.\nI just rebuilt over an hour after your PR  - problem still there- will try again in the morning.  Doesn't seem there for my Linux box. FWIW I can use Arrow to read these same parquet files into memory.\nI think I have an inkling of what's going on. The column that's causing a problem is numtrd, which is completely null in this file. Early in the history of stock trading, exchanges did not record numtrd, hence in this file it is null. I'm somewhat confident this is relevant as later files - where numtrd is non-null for a significant share of entries - do not crash. It must be something related to that.\r\n\r\n\r\n[leftdate3_192_loop_1.zip](https://github.com/duckdb/duckdb/files/6460569/leftdate3_192_loop_1.zip)\r\n\r\n\r\n\nThanks for the investigation! I will have a look at this.",
  "created_at": "2021-05-11T16:36:58Z"
}