{
  "repo": "duckdb/duckdb",
  "pull_number": 14995,
  "instance_id": "duckdb__duckdb-14995",
  "issue_numbers": [
    "14953"
  ],
  "base_commit": "aa2fe677d6b8ec4bb4b35d47b5a521cd8e1a76bf",
  "patch": "diff --git a/tools/pythonpkg/duckdb_extension_config.cmake b/tools/pythonpkg/duckdb_extension_config.cmake\nindex 38622df8cc84..0c978737d879 100644\n--- a/tools/pythonpkg/duckdb_extension_config.cmake\n+++ b/tools/pythonpkg/duckdb_extension_config.cmake\n@@ -7,7 +7,6 @@\n # CMakeLists.txt file with the `BUILD_PYTHON` variable.\n # TODO: unify this by making setup.py also use this configuration, making this the config for all python builds\n duckdb_extension_load(json)\n-duckdb_extension_load(fts)\n duckdb_extension_load(tpcds)\n duckdb_extension_load(tpch)\n duckdb_extension_load(parquet)\ndiff --git a/tools/pythonpkg/src/arrow/arrow_array_stream.cpp b/tools/pythonpkg/src/arrow/arrow_array_stream.cpp\nindex 1fc37f1195bc..47700fb24d6a 100644\n--- a/tools/pythonpkg/src/arrow/arrow_array_stream.cpp\n+++ b/tools/pythonpkg/src/arrow/arrow_array_stream.cpp\n@@ -276,25 +276,13 @@ py::object GetScalar(Value &constant, const string &timezone_config, const Arrow\n \tcase LogicalTypeId::BLOB:\n \t\treturn dataset_scalar(py::bytes(constant.GetValueUnsafe<string>()));\n \tcase LogicalTypeId::DECIMAL: {\n-\t\tpy::object date_type = py::module_::import(\"pyarrow\").attr(\"decimal128\");\n+\t\tpy::object decimal_type = py::module_::import(\"pyarrow\").attr(\"decimal128\");\n \t\tuint8_t width;\n \t\tuint8_t scale;\n \t\tconstant.type().GetDecimalProperties(width, scale);\n-\t\tswitch (constant.type().InternalType()) {\n-\t\tcase PhysicalType::INT16:\n-\t\t\treturn dataset_scalar(scalar(constant.GetValue<int16_t>(), date_type(width, scale)));\n-\t\tcase PhysicalType::INT32:\n-\t\t\treturn dataset_scalar(scalar(constant.GetValue<int32_t>(), date_type(width, scale)));\n-\t\tcase PhysicalType::INT64:\n-\t\t\treturn dataset_scalar(scalar(constant.GetValue<int64_t>(), date_type(width, scale)));\n-\t\tdefault: {\n-\t\t\tauto hugeint_value = constant.GetValue<hugeint_t>();\n-\t\t\tauto hugeint_value_py = py::cast(hugeint_value.upper);\n-\t\t\thugeint_value_py = hugeint_value_py.attr(\"__mul__\")(NumericLimits<uint64_t>::Maximum());\n-\t\t\thugeint_value_py = hugeint_value_py.attr(\"__add__\")(hugeint_value.lower);\n-\t\t\treturn dataset_scalar(scalar(hugeint_value_py, date_type(width, scale)));\n-\t\t}\n-\t\t}\n+\t\t// pyarrow only allows 'decimal.Decimal' to be used to construct decimal scalars such as 0.05\n+\t\tauto val = import_cache.decimal.Decimal()(constant.ToString());\n+\t\treturn dataset_scalar(scalar(std::move(val), decimal_type(width, scale)));\n \t}\n \tdefault:\n \t\tthrow NotImplementedException(\"Unimplemented type \\\"%s\\\" for Arrow Filter Pushdown\",\n",
  "test_patch": "diff --git a/tools/pythonpkg/tests/fast/arrow/test_filter_pushdown.py b/tools/pythonpkg/tests/fast/arrow/test_filter_pushdown.py\nindex f03d8e561b45..5cc467f6c6e8 100644\n--- a/tools/pythonpkg/tests/fast/arrow/test_filter_pushdown.py\n+++ b/tools/pythonpkg/tests/fast/arrow/test_filter_pushdown.py\n@@ -32,6 +32,27 @@ def create_pyarrow_dataset(rel):\n     return ds.dataset(table)\n \n \n+def test_decimal_filter_pushdown(duckdb_cursor):\n+    pl = pytest.importorskip(\"polars\")\n+    np = pytest.importorskip(\"numpy\")\n+    np.random.seed(10)\n+\n+    df = pl.DataFrame({'x': pl.Series(np.random.uniform(-10, 10, 1000)).cast(pl.Decimal(18, 4))})\n+\n+    query = \"\"\"\n+        SELECT\n+            x,\n+            x > 0.05 AS is_x_good,\n+            x::FLOAT > 0.05 AS is_float_x_good\n+        FROM {}\n+        WHERE\n+            is_x_good\n+        ORDER BY x ASC\n+    \"\"\"\n+\n+    assert len(duckdb_cursor.sql(query.format(\"df\")).fetchall()) == 495\n+\n+\n def numeric_operators(connection, data_type, tbl_name, create_table):\n     connection.execute(\n         f\"\"\"\n",
  "problem_statement": "WHERE clause ignores Decimal comparison when using Polars DataFrame\n### What happens?\n\nWhen filtering a Polars DataFrame containing Decimal values using `WHERE column > value`, DuckDB includes rows that fail the comparison, but this only happens with Polars DataFrames - not with Parquet files or DuckDB tables containing identical data.\n\n### To Reproduce\n\n```python\r\nimport duckdb\r\nimport polars as pl\r\nimport numpy as np\r\nfrom pathlib import Path\r\nimport tempfile\r\n\r\nnp.random.seed(10)\r\n\r\nwith tempfile.TemporaryDirectory() as tmp_dir:\r\n    path = Path(tmp_dir) / \"test.parquet\"\r\n    pl.DataFrame({'x': pl.Series(np.random.uniform(-10, 10, 1000)).cast(pl.Decimal(18, 4))}).write_parquet(path, use_pyarrow=True)\r\n    \r\n    conn = duckdb.connect()\r\n    conn.sql(f\"CREATE TABLE x_table AS SELECT * FROM '{path}'\")\r\n\r\n    df_pl = pl.read_parquet(path)\r\n\r\n    query = \"\"\"\r\n    SELECT x, x > 0.05 AS is_x_good, x::FLOAT > 0.05 AS is_float_x_good\r\n    FROM {}\r\n    WHERE is_x_good\r\n    ORDER BY x ASC\r\n    \"\"\"\r\n    print(\"DuckDB table:\\n\", conn.sql(query.format('x_table')), sep='')\r\n    print(\"Parquet from DuckDB:\\n\", conn.sql(query.format(f\"read_parquet('{path}')\")), sep='')\r\n    print(\"Polars df from DuckDB:\\n\", conn.sql(query.format(\"df_pl\")), sep='')\r\n\r\n    query_cte = \"\"\"\r\n    WITH base AS(\r\n        SELECT x, x > 0.05 AS is_x_good, x::FLOAT > 0.05 AS is_float_x_good\r\n        FROM df_pl\r\n    )\r\n    SELECT *\r\n    FROM base\r\n    WHERE is_x_good\r\n    ORDER BY x ASC\r\n    \"\"\"\r\n    print(\"Polars df from DuckDB cte:\\n\", conn.sql(query_cte), sep='')\r\n```\r\n\r\n#### Expected behavior\r\nQuerying the Polars DataFrame should return the same results as querying the Parquet file or DuckDB table directly - rows where `x > 0.05` evaluates to `true`.\r\n\r\n#### Actual behavior\r\n\r\nFull output showing the discrepancy:\r\n\r\n```\r\nDuckDB table:\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502       x       \u2502 is_x_good \u2502 is_float_x_good \u2502\r\n\u2502 decimal(18,4) \u2502  boolean  \u2502     boolean     \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502        0.0533 \u2502 true      \u2502 true            \u2502\r\n\u2502        0.0714 \u2502 true      \u2502 true            \u2502\r\n\u2502        0.0901 \u2502 true      \u2502 true            \u2502\r\n\u2502        0.0968 \u2502 true      \u2502 true            \u2502\r\n\u2502        0.1011 \u2502 true      \u2502 true            \u2502\r\n\u2502        0.1395 \u2502 true      \u2502 true            \u2502\r\n\u2502        0.1520 \u2502 true      \u2502 true            \u2502\r\n\u2502        0.1867 \u2502 true      \u2502 true            \u2502\r\n\u2502        0.2066 \u2502 true      \u2502 true            \u2502\r\n\u2502        0.2126 \u2502 true      \u2502 true            \u2502\r\n\u2502           \u00b7   \u2502  \u00b7        \u2502  \u00b7              \u2502\r\n\u2502           \u00b7   \u2502  \u00b7        \u2502  \u00b7              \u2502\r\n\u2502           \u00b7   \u2502  \u00b7        \u2502  \u00b7              \u2502\r\n\u2502        9.7783 \u2502 true      \u2502 true            \u2502\r\n\u2502        9.8024 \u2502 true      \u2502 true            \u2502\r\n\u2502        9.8033 \u2502 true      \u2502 true            \u2502\r\n\u2502        9.8187 \u2502 true      \u2502 true            \u2502\r\n\u2502        9.8965 \u2502 true      \u2502 true            \u2502\r\n\u2502        9.9051 \u2502 true      \u2502 true            \u2502\r\n\u2502        9.9246 \u2502 true      \u2502 true            \u2502\r\n\u2502        9.9409 \u2502 true      \u2502 true            \u2502\r\n\u2502        9.9615 \u2502 true      \u2502 true            \u2502\r\n\u2502        9.9727 \u2502 true      \u2502 true            \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 495 rows (20 shown)               3 columns \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\nParquet from DuckDB:\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502       x       \u2502 is_x_good \u2502 is_float_x_good \u2502\r\n\u2502 decimal(18,4) \u2502  boolean  \u2502     boolean     \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502        0.0533 \u2502 true      \u2502 true            \u2502\r\n\u2502        0.0714 \u2502 true      \u2502 true            \u2502\r\n\u2502        0.0901 \u2502 true      \u2502 true            \u2502\r\n\u2502        0.0968 \u2502 true      \u2502 true            \u2502\r\n\u2502        0.1011 \u2502 true      \u2502 true            \u2502\r\n\u2502        0.1395 \u2502 true      \u2502 true            \u2502\r\n\u2502        0.1520 \u2502 true      \u2502 true            \u2502\r\n\u2502        0.1867 \u2502 true      \u2502 true            \u2502\r\n\u2502        0.2066 \u2502 true      \u2502 true            \u2502\r\n\u2502        0.2126 \u2502 true      \u2502 true            \u2502\r\n\u2502           \u00b7   \u2502  \u00b7        \u2502  \u00b7              \u2502\r\n\u2502           \u00b7   \u2502  \u00b7        \u2502  \u00b7              \u2502\r\n\u2502           \u00b7   \u2502  \u00b7        \u2502  \u00b7              \u2502\r\n\u2502        9.7783 \u2502 true      \u2502 true            \u2502\r\n\u2502        9.8024 \u2502 true      \u2502 true            \u2502\r\n\u2502        9.8033 \u2502 true      \u2502 true            \u2502\r\n\u2502        9.8187 \u2502 true      \u2502 true            \u2502\r\n\u2502        9.8965 \u2502 true      \u2502 true            \u2502\r\n\u2502        9.9051 \u2502 true      \u2502 true            \u2502\r\n\u2502        9.9246 \u2502 true      \u2502 true            \u2502\r\n\u2502        9.9409 \u2502 true      \u2502 true            \u2502\r\n\u2502        9.9615 \u2502 true      \u2502 true            \u2502\r\n\u2502        9.9727 \u2502 true      \u2502 true            \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 495 rows (20 shown)               3 columns \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\nPolars df from DuckDB:\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502       x       \u2502 is_x_good \u2502 is_float_x_good \u2502\r\n\u2502 decimal(18,4) \u2502  boolean  \u2502     boolean     \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502        0.0349 \u2502 false     \u2502 false           \u2502  <- Should not appear\r\n\u2502        0.0404 \u2502 false     \u2502 false           \u2502  <- Should not appear\r\n\u2502        0.0533 \u2502 true      \u2502 true            \u2502\r\n\u2502        0.0714 \u2502 true      \u2502 true            \u2502\r\n\u2502        0.0901 \u2502 true      \u2502 true            \u2502\r\n\u2502        0.0968 \u2502 true      \u2502 true            \u2502\r\n\u2502        0.1011 \u2502 true      \u2502 true            \u2502\r\n\u2502        0.1395 \u2502 true      \u2502 true            \u2502\r\n\u2502        0.1520 \u2502 true      \u2502 true            \u2502\r\n\u2502        0.1867 \u2502 true      \u2502 true            \u2502\r\n\u2502           \u00b7   \u2502  \u00b7        \u2502  \u00b7              \u2502\r\n\u2502           \u00b7   \u2502  \u00b7        \u2502  \u00b7              \u2502\r\n\u2502           \u00b7   \u2502  \u00b7        \u2502  \u00b7              \u2502\r\n\u2502        9.7783 \u2502 true      \u2502 true            \u2502\r\n\u2502        9.8024 \u2502 true      \u2502 true            \u2502\r\n\u2502        9.8033 \u2502 true      \u2502 true            \u2502\r\n\u2502        9.8187 \u2502 true      \u2502 true            \u2502\r\n\u2502        9.8965 \u2502 true      \u2502 true            \u2502\r\n\u2502        9.9051 \u2502 true      \u2502 true            \u2502\r\n\u2502        9.9246 \u2502 true      \u2502 true            \u2502\r\n\u2502        9.9409 \u2502 true      \u2502 true            \u2502\r\n\u2502        9.9615 \u2502 true      \u2502 true            \u2502\r\n\u2502        9.9727 \u2502 true      \u2502 true            \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 497 rows (20 shown)               3 columns \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\nPolars df from DuckDB cte:\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502       x       \u2502 is_x_good \u2502 is_float_x_good \u2502\r\n\u2502 decimal(18,4) \u2502  boolean  \u2502     boolean     \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502        0.0349 \u2502 false     \u2502 false           \u2502  <- Should not appear\r\n\u2502        0.0404 \u2502 false     \u2502 false           \u2502  <- Should not appear\r\n\u2502        0.0533 \u2502 true      \u2502 true            \u2502\r\n\u2502        0.0714 \u2502 true      \u2502 true            \u2502\r\n\u2502        0.0901 \u2502 true      \u2502 true            \u2502\r\n\u2502        0.0968 \u2502 true      \u2502 true            \u2502\r\n\u2502        0.1011 \u2502 true      \u2502 true            \u2502\r\n\u2502        0.1395 \u2502 true      \u2502 true            \u2502\r\n\u2502        0.1520 \u2502 true      \u2502 true            \u2502\r\n\u2502        0.1867 \u2502 true      \u2502 true            \u2502\r\n\u2502           \u00b7   \u2502  \u00b7        \u2502  \u00b7              \u2502\r\n\u2502           \u00b7   \u2502  \u00b7        \u2502  \u00b7              \u2502\r\n\u2502           \u00b7   \u2502  \u00b7        \u2502  \u00b7              \u2502\r\n\u2502        9.7783 \u2502 true      \u2502 true            \u2502\r\n\u2502        9.8024 \u2502 true      \u2502 true            \u2502\r\n\u2502        9.8033 \u2502 true      \u2502 true            \u2502\r\n\u2502        9.8187 \u2502 true      \u2502 true            \u2502\r\n\u2502        9.8965 \u2502 true      \u2502 true            \u2502\r\n\u2502        9.9051 \u2502 true      \u2502 true            \u2502\r\n\u2502        9.9246 \u2502 true      \u2502 true            \u2502\r\n\u2502        9.9409 \u2502 true      \u2502 true            \u2502\r\n\u2502        9.9615 \u2502 true      \u2502 true            \u2502\r\n\u2502        9.9727 \u2502 true      \u2502 true            \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 497 rows (20 shown)               3 columns \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\nWhen querying the Polars DataFrame, rows where both `is_x_good` and `is_float_x_good` are `false` appear in the results, despite the `WHERE is_x_good` clause. This doesn't happen when querying the Parquet file or DuckDB table directly.\r\n\r\nInterestingly, filtering on `WHERE is_float_x_good` (casting to FLOAT first) produces the expected results.\r\n\r\nDuckDB 1.1.1\r\nPolars 1.7.1\r\n\n\n### OS:\n\nLinux\n\n### DuckDB Version:\n\n1.1.1\n\n### DuckDB Client:\n\nPython\n\n### Hardware:\n\n_No response_\n\n### Full Name:\n\nPavel Khokhlov\n\n### Affiliation:\n\npersonal\n\n### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.\n\nI have tested with a stable release\n\n### Did you include all relevant data sets for reproducing the issue?\n\nYes\n\n### Did you include all code required to reproduce the issue?\n\n- [X] Yes, I have\n\n### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?\n\n- [X] Yes, I have\n",
  "hints_text": "",
  "created_at": "2024-11-26T16:52:22Z"
}