{
  "repo": "duckdb/duckdb",
  "pull_number": 14255,
  "instance_id": "duckdb__duckdb-14255",
  "issue_numbers": [
    "14212",
    "14212"
  ],
  "base_commit": "222c0eb90788c85a21ee322496d7a9ef001f9c37",
  "patch": "diff --git a/src/include/duckdb/planner/expression_binder/order_binder.hpp b/src/include/duckdb/planner/expression_binder/order_binder.hpp\nindex df8365cc7001..b2838c19100e 100644\n--- a/src/include/duckdb/planner/expression_binder/order_binder.hpp\n+++ b/src/include/duckdb/planner/expression_binder/order_binder.hpp\n@@ -37,6 +37,9 @@ class OrderBinder {\n \n \tunique_ptr<Expression> CreateExtraReference(unique_ptr<ParsedExpression> expr);\n \n+\t//! Sets the query component, for error messages\n+\tvoid SetQueryComponent(string component = string());\n+\n private:\n \tunique_ptr<Expression> CreateProjectionReference(ParsedExpression &expr, const idx_t index);\n \tunique_ptr<Expression> BindConstant(ParsedExpression &expr);\n@@ -46,6 +49,7 @@ class OrderBinder {\n \tvector<reference<Binder>> binders;\n \toptional_ptr<vector<unique_ptr<ParsedExpression>>> extra_list;\n \tSelectBindState &bind_state;\n+\tstring query_component = \"ORDER BY\";\n };\n \n } // namespace duckdb\ndiff --git a/src/planner/binder/query_node/bind_select_node.cpp b/src/planner/binder/query_node/bind_select_node.cpp\nindex f1bad4c335da..d58b3868efbe 100644\n--- a/src/planner/binder/query_node/bind_select_node.cpp\n+++ b/src/planner/binder/query_node/bind_select_node.cpp\n@@ -140,6 +140,7 @@ void Binder::PrepareModifiers(OrderBinder &order_binder, QueryNode &statement, B\n \t\t\t\t\t    make_uniq<ConstantExpression>(Value::INTEGER(UnsafeNumericCast<int32_t>(1 + i))));\n \t\t\t\t}\n \t\t\t}\n+\t\t\torder_binder.SetQueryComponent(\"DISTINCT ON\");\n \t\t\tfor (auto &distinct_on_target : distinct.distinct_on_targets) {\n \t\t\t\tauto expr = BindOrderExpression(order_binder, std::move(distinct_on_target));\n \t\t\t\tif (!expr) {\n@@ -147,10 +148,13 @@ void Binder::PrepareModifiers(OrderBinder &order_binder, QueryNode &statement, B\n \t\t\t\t}\n \t\t\t\tbound_distinct->target_distincts.push_back(std::move(expr));\n \t\t\t}\n+\t\t\torder_binder.SetQueryComponent();\n+\n \t\t\tbound_modifier = std::move(bound_distinct);\n \t\t\tbreak;\n \t\t}\n \t\tcase ResultModifierType::ORDER_MODIFIER: {\n+\n \t\t\tauto &order = mod->Cast<OrderModifier>();\n \t\t\tauto bound_order = make_uniq<BoundOrderModifier>();\n \t\t\tauto &config = DBConfig::GetConfig(context);\ndiff --git a/src/planner/expression_binder/order_binder.cpp b/src/planner/expression_binder/order_binder.cpp\nindex 4516df444475..ff864bbbd269 100644\n--- a/src/planner/expression_binder/order_binder.cpp\n+++ b/src/planner/expression_binder/order_binder.cpp\n@@ -61,8 +61,10 @@ optional_idx OrderBinder::TryGetProjectionReference(ParsedExpression &expr) cons\n \t\t\t// this is disabled by default (matching Postgres) - but we can control this with a setting\n \t\t\tauto &config = ClientConfig::GetConfig(binders[0].get().context);\n \t\t\tif (!config.order_by_non_integer_literal) {\n-\t\t\t\tthrow BinderException(expr, \"ORDER BY non-integer literal has no effect.\\n* SET \"\n-\t\t\t\t                            \"order_by_non_integer_literal=true to allow this behavior.\");\n+\t\t\t\tthrow BinderException(expr,\n+\t\t\t\t                      \"%s non-integer literal has no effect.\\n* SET \"\n+\t\t\t\t                      \"order_by_non_integer_literal=true to allow this behavior.\",\n+\t\t\t\t                      query_component);\n \t\t\t}\n \t\t\tbreak;\n \t\t}\n@@ -94,6 +96,14 @@ optional_idx OrderBinder::TryGetProjectionReference(ParsedExpression &expr) cons\n \treturn optional_idx();\n }\n \n+void OrderBinder::SetQueryComponent(string component) {\n+\tif (component.empty()) {\n+\t\tquery_component = \"ORDER BY\";\n+\t} else {\n+\t\tquery_component = std::move(component);\n+\t}\n+}\n+\n unique_ptr<Expression> OrderBinder::BindConstant(ParsedExpression &expr) {\n \tauto index = TryGetProjectionReference(expr);\n \tif (!index.IsValid()) {\n@@ -130,7 +140,7 @@ unique_ptr<Expression> OrderBinder::Bind(unique_ptr<ParsedExpression> expr) {\n \t\tbreak;\n \t}\n \tcase ExpressionClass::PARAMETER: {\n-\t\tthrow ParameterNotAllowedException(\"Parameter not supported in ORDER BY clause\");\n+\t\tthrow ParameterNotAllowedException(\"Parameter not supported in %s clause\", query_component);\n \t}\n \tcase ExpressionClass::COLLATE: {\n \t\tauto &collation = expr->Cast<CollateExpression>();\n",
  "test_patch": "diff --git a/test/sql/aggregate/distinct/test_distinct_on.test b/test/sql/aggregate/distinct/test_distinct_on.test\nindex f5b78ca70443..074e8212f4e2 100644\n--- a/test/sql/aggregate/distinct/test_distinct_on.test\n+++ b/test/sql/aggregate/distinct/test_distinct_on.test\n@@ -131,3 +131,23 @@ statement error\n SELECT DISTINCT ON (2) i FROM integers\n ----\n Binder Error: ORDER term out of range - should be between 1 and 1\n+\n+# DISTINCT ON constant returns an error\n+statement error\n+SELECT DISTINCT ON(i, 'literal') i FROM integers\n+----\n+DISTINCT ON non-integer literal has no effect\n+\n+statement ok\n+SET order_by_non_integer_literal=true\n+\n+query I\n+SELECT DISTINCT ON(i, 'literal') i FROM integers ORDER BY ALL\n+----\n+2\n+4\n+\n+statement error\n+PREPARE v1 AS select distinct on (?) 42;\n+----\n+Parameter not supported in DISTINCT ON clause\n",
  "problem_statement": "Literal in SELECT DISTINCT ON clause raises ORDER BY non-integer literal has no effect.\n### What happens?\r\n\r\nAfter upgrading to DuckDB 1.1.1, I encountered an issue where DuckDB raises `Binder Error: ORDER BY non-integer literal has no effect` when having literal in `SELECT DISTINCT ON (..)` clause.\r\n\r\nTurning order_by_non_integer_literal=true resolves the issue, allowing literal in DISTINCT ON.\r\n\r\nThe error message is really confusing as the initial cause does not come from the ORDER BY clause.\r\n\r\nI would rather accept literal in SELECT DISTINCT clause by default or rework the error message to point out the correct SQL clause. \r\n\r\n### To Reproduce\r\n\r\n```\r\ncon = duckdb.connect(\":memory:\")\r\ncon.execute('CREATE TABLE my_table AS SELECT 42 AS \"column_name\";')\r\ncon.execute(\"SET order_by_non_integer_literal = true;\")\r\ncon.execute(\r\n    \"SELECT DISTINCT ON (my_table.column_name, 'co2') my_table.column_name FROM my_table\"\r\n).fetchone()\r\n\r\n```\r\n\r\n### OS:\r\n\r\niOS/Linux\r\n\r\n### DuckDB Version:\r\n\r\n1.1.1\r\n\r\n### DuckDB Client:\r\n\r\nPython\r\n\r\n### Hardware:\r\n\r\n_No response_\r\n\r\n### Full Name:\r\n\r\nJonathan Wadin\r\n\r\n### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.\r\n\r\nI have not tested with any build\r\n\r\n### Did you include all relevant data sets for reproducing the issue?\r\n\r\nYes\r\n\r\n### Did you include all code required to reproduce the issue?\r\n\r\n- [x] Yes, I have\r\n\r\n### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?\r\n\r\n- [ ] Yes, I have\nLiteral in SELECT DISTINCT ON clause raises ORDER BY non-integer literal has no effect.\n### What happens?\r\n\r\nAfter upgrading to DuckDB 1.1.1, I encountered an issue where DuckDB raises `Binder Error: ORDER BY non-integer literal has no effect` when having literal in `SELECT DISTINCT ON (..)` clause.\r\n\r\nTurning order_by_non_integer_literal=true resolves the issue, allowing literal in DISTINCT ON.\r\n\r\nThe error message is really confusing as the initial cause does not come from the ORDER BY clause.\r\n\r\nI would rather accept literal in SELECT DISTINCT clause by default or rework the error message to point out the correct SQL clause. \r\n\r\n### To Reproduce\r\n\r\n```\r\ncon = duckdb.connect(\":memory:\")\r\ncon.execute('CREATE TABLE my_table AS SELECT 42 AS \"column_name\";')\r\ncon.execute(\"SET order_by_non_integer_literal = true;\")\r\ncon.execute(\r\n    \"SELECT DISTINCT ON (my_table.column_name, 'co2') my_table.column_name FROM my_table\"\r\n).fetchone()\r\n\r\n```\r\n\r\n### OS:\r\n\r\niOS/Linux\r\n\r\n### DuckDB Version:\r\n\r\n1.1.1\r\n\r\n### DuckDB Client:\r\n\r\nPython\r\n\r\n### Hardware:\r\n\r\n_No response_\r\n\r\n### Full Name:\r\n\r\nJonathan Wadin\r\n\r\n### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.\r\n\r\nI have not tested with any build\r\n\r\n### Did you include all relevant data sets for reproducing the issue?\r\n\r\nYes\r\n\r\n### Did you include all code required to reproduce the issue?\r\n\r\n- [x] Yes, I have\r\n\r\n### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?\r\n\r\n- [ ] Yes, I have\n",
  "hints_text": "Hi @wadinj, thanks for opening this issue. What's the error message that you're getting? For me, this works fine in the CLI client:\r\n\r\n```sql\r\nCREATE TABLE my_table AS SELECT 42 AS \"column_name\";\r\nSELECT * FROM my_table ORDER BY \"column_name\";\r\n```\nHi @szarnyasg, here's a reproduction: \r\n```\r\ncon = duckdb.connect(\":memory:\")\r\ncon.execute('CREATE TABLE my_table AS SELECT 42 AS \"column_name\";')\r\ncon.execute(\r\n    \"SELECT DISTINCT ON (my_table.column_name, 'any_string') my_table.column_name FROM my_table\"\r\n).fetchone()\r\n```\r\nRaising: \r\n```\r\nduckdb.duckdb.BinderException: Binder Error: ORDER BY non-integer literal has no effect.\r\n* SET order_by_non_integer_literal=true to allow this behavior.\r\nLINE 1: ...ECT DISTINCT ON (my_table.column_name, 'any_string') my_table.column_name FROM...\r\n```\r\nMy initial analysis was wrong. \r\n\r\nThe issue come from the `DISTINCT ON (...)` having literal. I would rather change the error message to specify `DISTINCT ON` vs `ORDER BY` or allow literal in `DISTINCT ON (...)` by default (if there's no other restrictions I'm not aware).\r\n\r\n\nHi @wadinj, thanks for opening this issue. What's the error message that you're getting? For me, this works fine in the CLI client:\r\n\r\n```sql\r\nCREATE TABLE my_table AS SELECT 42 AS \"column_name\";\r\nSELECT * FROM my_table ORDER BY \"column_name\";\r\n```\nHi @szarnyasg, here's a reproduction: \r\n```\r\ncon = duckdb.connect(\":memory:\")\r\ncon.execute('CREATE TABLE my_table AS SELECT 42 AS \"column_name\";')\r\ncon.execute(\r\n    \"SELECT DISTINCT ON (my_table.column_name, 'any_string') my_table.column_name FROM my_table\"\r\n).fetchone()\r\n```\r\nRaising: \r\n```\r\nduckdb.duckdb.BinderException: Binder Error: ORDER BY non-integer literal has no effect.\r\n* SET order_by_non_integer_literal=true to allow this behavior.\r\nLINE 1: ...ECT DISTINCT ON (my_table.column_name, 'any_string') my_table.column_name FROM...\r\n```\r\nMy initial analysis was wrong. \r\n\r\nThe issue come from the `DISTINCT ON (...)` having literal. I would rather change the error message to specify `DISTINCT ON` vs `ORDER BY` or allow literal in `DISTINCT ON (...)` by default (if there's no other restrictions I'm not aware).\r\n\r\n",
  "created_at": "2024-10-07T12:30:14Z"
}