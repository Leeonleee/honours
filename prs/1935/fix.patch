diff --git a/src/common/types/date.cpp b/src/common/types/date.cpp
index 6f389e252d3e..5337e4def77d 100644
--- a/src/common/types/date.cpp
+++ b/src/common/types/date.cpp
@@ -321,6 +321,12 @@ bool Date::IsValid(int32_t year, int32_t month, int32_t day) {
 	return Date::IsLeapYear(year) ? day <= Date::LEAP_DAYS[month] : day <= Date::NORMAL_DAYS[month];
 }
 
+int32_t Date::MonthDays(int32_t year, int32_t month) {
+	D_ASSERT(month >= 1 && month <= 12);
+	D_ASSERT(year >= Date::MIN_YEAR && Date::MAX_YEAR);
+	return Date::IsLeapYear(year) ? Date::LEAP_DAYS[month] : Date::NORMAL_DAYS[month];
+}
+
 date_t Date::EpochDaysToDate(int32_t epoch) {
 	return (date_t)epoch;
 }
diff --git a/src/function/scalar/operators/add.cpp b/src/function/scalar/operators/add.cpp
index b286f9e8ea39..4cbeacb34474 100644
--- a/src/function/scalar/operators/add.cpp
+++ b/src/function/scalar/operators/add.cpp
@@ -58,6 +58,7 @@ date_t AddOperator::Operation(date_t left, interval_t right) {
 			year--;
 			month += Interval::MONTHS_PER_YEAR;
 		}
+		day = MinValue<int32_t>(day, Date::MonthDays(year, month));
 		result = Date::FromDate(year, month, day);
 	} else {
 		result = left;
diff --git a/src/include/duckdb/common/types/date.hpp b/src/include/duckdb/common/types/date.hpp
index dae1aa433b66..a783f6db2bcd 100644
--- a/src/include/duckdb/common/types/date.hpp
+++ b/src/include/duckdb/common/types/date.hpp
@@ -63,6 +63,9 @@ class Date {
 	//! date
 	static bool IsValid(int32_t year, int32_t month, int32_t day);
 
+	//! The max number of days in a month of a given year
+	static int32_t MonthDays(int32_t year, int32_t month);
+
 	//! Extract the epoch from the date (seconds since 1970-01-01)
 	static int64_t Epoch(date_t date);
 	//! Extract the epoch from the date (nanoseconds since 1970-01-01)
