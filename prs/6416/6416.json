{
  "repo": "duckdb/duckdb",
  "pull_number": 6416,
  "instance_id": "duckdb__duckdb-6416",
  "issue_numbers": [
    "6410"
  ],
  "base_commit": "666d2a612508bd033261113b0af32c62b6ac2b64",
  "patch": "diff --git a/src/common/types.cpp b/src/common/types.cpp\nindex 22395eb94f68..cb47d222ae4e 100644\n--- a/src/common/types.cpp\n+++ b/src/common/types.cpp\n@@ -424,7 +424,7 @@ string LogicalType::ToString() const {\n \t\tauto &child_types = StructType::GetChildTypes(*this);\n \t\tstring ret = \"STRUCT(\";\n \t\tfor (size_t i = 0; i < child_types.size(); i++) {\n-\t\t\tret += child_types[i].first + \" \" + child_types[i].second.ToString();\n+\t\t\tret += KeywordHelper::WriteOptionallyQuoted(child_types[i].first) + \" \" + child_types[i].second.ToString();\n \t\t\tif (i < child_types.size() - 1) {\n \t\t\t\tret += \", \";\n \t\t\t}\n",
  "test_patch": "diff --git a/test/sql/export/export_quoted_structs.test b/test/sql/export/export_quoted_structs.test\nnew file mode 100644\nindex 000000000000..f5578fb47428\n--- /dev/null\n+++ b/test/sql/export/export_quoted_structs.test\n@@ -0,0 +1,57 @@\n+# name: test/sql/export/export_quoted_structs.test\n+# description: Test export database\n+# group: [export]\n+\n+# create a bunch of tables with data and views\n+\n+statement ok\n+BEGIN TRANSACTION\n+\n+# 'end' is a keyword, this has to be quoted\n+statement ok\n+create table a (s STRUCT(\"end\" VARCHAR));\n+\n+statement ok\n+insert into a values ({'a':'hello'});\n+\n+query I\n+select * from a\n+----\n+{'end': hello}\n+\n+## -- We don't support exporting user defined types yet -- ##\n+#statement ok\n+#create type \"table\" as varchar;\n+\n+## The type of the struct field can also be a user-defined type, which might need quotes\n+#statement ok\n+#create table b (s STRUCT(f1 \"table\"));\n+\n+#statement ok\n+#insert into b values ({'a':'hello'});\n+\n+#query I\n+#select * from b;\n+#----\n+#{'f1': hello}\n+\n+# now export the db\n+statement ok\n+EXPORT DATABASE '__TEST_DIR__/export_test' (FORMAT CSV)\n+\n+statement ok\n+ROLLBACK\n+\n+statement ok\n+IMPORT DATABASE '__TEST_DIR__/export_test'\n+\n+# Verify that the import was succesful\n+query I\n+select * from a\n+----\n+{'end': hello}\n+\n+#query I\n+#select * from b;\n+#----\n+#{'f1': hello}\n",
  "problem_statement": "Export Database strips quotes from struct fields\n### What happens?\n\nA struct column containing quoted fields will be exported (to `schema.sql`) without the quotes. This will cause imports to fail if the previously quoted field is a duckdb keyword, or is otherwise not a valid field name when unquoted.\n\n### To Reproduce\n\n```sql\r\nv0.7.1-dev284 6b7362d2ca\r\n...\r\nD create table a (s STRUCT(\"end\" VARCHAR));\r\nD export database 'backup';\r\nD import database 'backup';\r\nError: Parser Error: syntax error at or near \"end\"\r\nLINE 4: CREATE TABLE a(s STRUCT(end VARCHAR));\r\n```\n\n### OS:\n\nMacOS Arm\n\n### DuckDB Version:\n\nv0.7.1-dev284\n\n### DuckDB Client:\n\nsql\n\n### Full Name:\n\nAlexander Vandenberg-Rodes\n\n### Affiliation:\n\nObsidian Security\n\n### Have you tried this on the latest `master` branch?\n\n- [X] I agree\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] I agree\n",
  "hints_text": "",
  "created_at": "2023-02-22T09:31:54Z"
}