{
  "repo": "duckdb/duckdb",
  "pull_number": 6252,
  "instance_id": "duckdb__duckdb-6252",
  "issue_numbers": [
    "6236"
  ],
  "base_commit": "0f5e1ec5079971dca97de5b89c1c00303534211e",
  "patch": "diff --git a/tools/jdbc/src/main/java/org/duckdb/DuckDBDatabaseMetaData.java b/tools/jdbc/src/main/java/org/duckdb/DuckDBDatabaseMetaData.java\nindex 5731c1ce90f6..85c334463958 100644\n--- a/tools/jdbc/src/main/java/org/duckdb/DuckDBDatabaseMetaData.java\n+++ b/tools/jdbc/src/main/java/org/duckdb/DuckDBDatabaseMetaData.java\n@@ -2,6 +2,9 @@\n \n import javax.sql.rowset.CachedRowSet;\n import javax.sql.rowset.RowSetProvider;\n+\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n import java.sql.Connection;\n import java.sql.DatabaseMetaData;\n import java.sql.PreparedStatement;\n@@ -639,12 +642,43 @@ public ResultSet getSchemas() throws SQLException {\n \n \t@Override\n \tpublic ResultSet getSchemas(String catalog, String schemaPattern) throws SQLException {\n+\t\tStringWriter sw = new StringWriter();\n+\t\tPrintWriter pw = new PrintWriter(sw);\n+\t\tpw.println(\"SELECT schema_name AS 'TABLE_SCHEM', catalog_name AS 'TABLE_CATALOG'\");\n+\t\tpw.println(\"FROM information_schema.schemata\");\n+\t\tif (catalog != null || schemaPattern != null) {\n+\t\t\tpw.print(\"WHERE \");\n+\t\t}\n+\t\t\n+\t\tif (catalog != null) {\n+\t\t\tif (catalog.isEmpty()) {\n+\t\t\t\tpw.println(\"catalog_name IS NULL\");\n+\t\t\t}\n+\t\t\telse {\n+\t\t\t\tpw.println(\"catalog_name = ?\");\n+\t\t\t}\n+\t\t}\n+\t\tif (schemaPattern != null) {\n+\t\t\tif (catalog != null) {\n+\t\t\t\tpw.print(\"AND \");\n+\t\t\t}\n+\t\t\tif (schemaPattern.isEmpty()) {\n+\t\t\t\tpw.println(\"schema_name IS NULL\");\n+\t\t\t}\n+\t\t\telse {\n+\t\t\t\tpw.println(\"schema_name LIKE ?\");\n+\t\t\t}\n+\t\t}\n+\t\tpw.println(\"ORDER BY \\\"TABLE_CATALOG\\\", \\\"TABLE_SCHEM\\\"\");\n+\t\t\n+\t\tPreparedStatement ps = conn.prepareStatement(sw.toString());\n+\t\tint paramIndex = 0;\n \t\tif (catalog != null && !catalog.isEmpty()) {\n-\t\t\tthrow new SQLException(\"catalog argument is not supported\");\n+\t\t\tps.setString(++paramIndex, catalog);\n+\t\t}\n+\t\tif (schemaPattern != null && !schemaPattern.isEmpty()) {\n+\t\t\tps.setString(++paramIndex, schemaPattern);\n \t\t}\n-\t\tPreparedStatement ps = conn.prepareStatement(\n-\t\t\t\t\"SELECT schema_name AS 'TABLE_SCHEM', catalog_name AS 'TABLE_CATALOG' FROM information_schema.schemata WHERE schema_name LIKE ? ORDER BY \\\"TABLE_CATALOG\\\", \\\"TABLE_SCHEM\\\"\");\n-\t\tps.setString(1, schemaPattern);\n \t\treturn ps.executeQuery();\n \t}\n \n",
  "test_patch": "diff --git a/tools/jdbc/src/test/java/org/duckdb/test/TestDuckDBJDBC.java b/tools/jdbc/src/test/java/org/duckdb/test/TestDuckDBJDBC.java\nindex a5a4e44c3c9d..a5376666dbbb 100644\n--- a/tools/jdbc/src/test/java/org/duckdb/test/TestDuckDBJDBC.java\n+++ b/tools/jdbc/src/test/java/org/duckdb/test/TestDuckDBJDBC.java\n@@ -1864,7 +1864,90 @@ public static void test_get_table_types() throws Exception {\n \t\t\t);\n \t\t}\n \t}\n-  \n+\t\n+\tpublic static void test_get_schemas_with_params() throws Exception {\n+\t\tConnection conn = DriverManager.getConnection(\"jdbc:duckdb:\");\n+\t\tString inputCatalog = conn.getCatalog();\n+\t\tString inputSchema = conn.getSchema();\n+\t\tDatabaseMetaData databaseMetaData = conn.getMetaData();\n+\t\tResultSet resultSet = null;\n+\n+\t\t// catalog equal to current_catalog, schema null\n+\t\ttry {\n+\t\t\tresultSet = databaseMetaData.getSchemas(inputCatalog, null);\n+\t\t\tassertTrue(resultSet.next(), \"Expected at least exactly 1 row, got 0\");\n+\t\t\tdo {\n+\t\t\t\tString outputCatalog = resultSet.getString(\"TABLE_CATALOG\");\n+\t\t\t\tassertTrue(\n+\t\t\t\t\tinputCatalog.equals(outputCatalog), \n+\t\t\t\t\t\"The catalog \" + outputCatalog + \" from getSchemas should equal the argument catalog \" + inputCatalog\n+\t\t\t\t);\n+\t\t\t} while (resultSet.next());\n+\t\t}\n+\t\tcatch (SQLException ex) {\n+\t\t\tassertFalse(ex.getMessage().startsWith(\"catalog argument is not supported\"));\n+\t\t}\n+\t\tfinally {\n+\t\t\tif (resultSet != null ) {\n+\t\t\t\tresultSet.close();\n+\t\t\t}\n+\t\t\tconn.close();\n+\t\t}\n+\n+\t\t// catalog equal to current_catalog, schema '%'\n+\t\tResultSet resultSetWithNullSchema = null;\n+\t\ttry {\n+\t\t\tresultSet = databaseMetaData.getSchemas(inputCatalog, \"%\");\n+\t\t\tresultSetWithNullSchema = databaseMetaData.getSchemas(inputCatalog, null);\n+\t\t\tassertTrue(resultSet.next(), \"Expected at least exactly 1 row, got 0\");\n+\t\t\tassertTrue(resultSetWithNullSchema.next(), \"Expected at least exactly 1 row, got 0\");\n+\t\t\tdo {\n+\t\t\t\tString outputCatalog;\n+\t\t\t\toutputCatalog = resultSet.getString(\"TABLE_CATALOG\");\n+\t\t\t\tassertTrue(\n+\t\t\t\t\tinputCatalog.equals(outputCatalog), \n+\t\t\t\t\t\"The catalog \" + outputCatalog + \" from getSchemas should equal the argument catalog \" + inputCatalog\n+\t\t\t\t);\n+\t\t\t\toutputCatalog = resultSetWithNullSchema.getString(\"TABLE_CATALOG\");\n+\t\t\t\tassertTrue(\n+\t\t\t\t\tinputCatalog.equals(outputCatalog), \n+\t\t\t\t\t\"The catalog \" + outputCatalog + \" from getSchemas should equal the argument catalog \" + inputCatalog\n+\t\t\t\t);\n+\t\t\t\tString schema1 = resultSet.getString(\"TABLE_SCHEMA\");\n+\t\t\t\tString schema2 = resultSetWithNullSchema.getString(\"TABLE_SCHEMA\");\n+\t\t\t\tassertTrue(\n+\t\t\t\t\tschema1.equals(schema2), \n+\t\t\t\t\t\"schema \" + schema1 + \" from getSchemas with % should equal \" + schema2 + \" from getSchemas with null\"\n+\t\t\t\t);\n+\t\t\t} while (resultSet.next() && resultSetWithNullSchema.next());\n+\t\t}\n+\t\tcatch (SQLException ex) {\n+\t\t\tassertFalse(ex.getMessage().startsWith(\"catalog argument is not supported\"));\n+\t\t}\n+\t\tfinally {\n+\t\t\tif (resultSet != null ) {\n+\t\t\t\tresultSet.close();\n+\t\t\t}\n+\t\t\tconn.close();\n+\t\t}\n+\n+\t\t// empty catalog\n+\t\ttry {\n+\t\t\tresultSet = databaseMetaData.getSchemas(\"\", null);\n+\t\t\tassertTrue(resultSet.next() == false, \"Expected 0 schemas, got > 0\");\n+\t\t}\n+\t\tcatch (SQLException ex) {\n+\t\t\tassertFalse(ex.getMessage().startsWith(\"catalog argument is not supported\"));\n+\t\t}\n+\t\tfinally {\n+\t\t\tif (resultSet != null ) {\n+\t\t\t\tresultSet.close();\n+\t\t\t}\n+\t\t\tconn.close();\n+\t\t}\n+\t\t\n+\t}\n+\n \tpublic static void test_connect_wrong_url_bug848() throws Exception {\n \t\tDriver d = new DuckDBDriver();\n \t\tassertNull(d.connect(\"jdbc:h2:\", null));\n",
  "problem_statement": "DuckDBJ: DuckDBDatabaseMetaData.getSchemas always throws when specifying a catalog argument\n### What happens?\r\n\r\nDuckDBDatabaseMetaData.getSchemas(String catalog, String schemaPattern) always throws a SQLException when a non-null, non-empty catalog parameter is passed. https://github.com/duckdb/duckdb/blob/master/tools/jdbc/src/main/java/org/duckdb/DuckDBDatabaseMetaData.java#L643\r\n\r\nThis is similar to #6227.\r\n\r\n### To Reproduce\r\n\r\n```\r\npublic static void test_get_schemas_with_catalog() throws Exception {\r\n\tConnection conn = DriverManager.getConnection(\"jdbc:duckdb:\");\r\n\tString catalog = conn.getCatalog();\r\n\tDatabaseMetaData databaseMetaData = conn.getMetaData();\r\n\ttry {\r\n\t\tdatabaseMetaData.getSchemas(catalog, null);\r\n\t}\r\n\tcatch (SQLException ex) {\r\n\t\tassertFalse(ex.getMessage().startsWith(\"catalog argument is not supported\"));\r\n\t}\r\n}\r\n\r\n```\r\n### OS:\r\n\r\nWindows 10 Pro\r\n\r\n### DuckDB Version:\r\n\r\nv0.6.2-dev2100\r\n\r\n### DuckDB Client:\r\n\r\nDuckDBJ\r\n\r\n### Full Name:\r\n\r\nRoland Bouman\r\n\r\n### Affiliation:\r\n\r\nJust-Bi.nl (an EPAM company) \r\n\r\n### Have you tried this on the latest `master` branch?\r\n\r\n- [X] I agree\r\n\r\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\r\n\r\n- [X] I agree\n",
  "hints_text": "I am going to pick this up now.",
  "created_at": "2023-02-13T20:35:39Z"
}