{
  "repo": "duckdb/duckdb",
  "pull_number": 11171,
  "instance_id": "duckdb__duckdb-11171",
  "issue_numbers": [
    "11142"
  ],
  "base_commit": "534f3c828ac65e27b223485933056251f0f74714",
  "patch": "diff --git a/src/core_functions/scalar/list/list_reduce.cpp b/src/core_functions/scalar/list/list_reduce.cpp\nindex 1e276e712798..1f619780af2f 100644\n--- a/src/core_functions/scalar/list/list_reduce.cpp\n+++ b/src/core_functions/scalar/list/list_reduce.cpp\n@@ -11,7 +11,6 @@ struct ReduceExecuteInfo {\n \t\tactive_rows.Resize(0, info.row_count);\n \t\tactive_rows.SetAllValid(info.row_count);\n \n-\t\tright_sel.Initialize(info.row_count);\n \t\tleft_sel.Initialize(info.row_count);\n \t\tactive_rows_sel.Initialize(info.row_count);\n \n@@ -50,7 +49,6 @@ struct ReduceExecuteInfo {\n \tunique_ptr<ExpressionExecutor> expr_executor;\n \tvector<LogicalType> input_types;\n \n-\tSelectionVector right_sel;\n \tSelectionVector left_sel;\n \tSelectionVector active_rows_sel;\n };\n@@ -64,6 +62,10 @@ static bool ExecuteReduce(idx_t loops, ReduceExecuteInfo &execute_info, LambdaFu\n \t// create selection vectors for the left and right slice\n \tauto data = execute_info.active_rows.GetData();\n \n+\t// reset right_sel each iteration to prevent referencing issues\n+\tSelectionVector right_sel;\n+\tright_sel.Initialize(info.row_count);\n+\n \tidx_t bits_per_entry = sizeof(idx_t) * 8;\n \tfor (idx_t entry_idx = 0; original_row_idx < info.row_count; entry_idx++) {\n \t\tif (data[entry_idx] == 0) {\n@@ -78,8 +80,7 @@ static bool ExecuteReduce(idx_t loops, ReduceExecuteInfo &execute_info, LambdaFu\n \t\t\t}\n \t\t\tauto list_column_format_index = info.list_column_format.sel->get_index(original_row_idx);\n \t\t\tif (info.list_entries[list_column_format_index].length > loops + 1) {\n-\t\t\t\texecute_info.right_sel.set_index(reduced_row_idx,\n-\t\t\t\t                                 info.list_entries[list_column_format_index].offset + loops + 1);\n+\t\t\t\tright_sel.set_index(reduced_row_idx, info.list_entries[list_column_format_index].offset + loops + 1);\n \t\t\t\texecute_info.left_sel.set_index(reduced_row_idx, valid_row_idx);\n \t\t\t\texecute_info.active_rows_sel.set_index(reduced_row_idx, original_row_idx);\n \n@@ -102,7 +103,7 @@ static bool ExecuteReduce(idx_t loops, ReduceExecuteInfo &execute_info, LambdaFu\n \n \t// slice the left and right slice\n \texecute_info.left_slice.Slice(execute_info.left_slice, execute_info.left_sel, reduced_row_idx);\n-\tVector right_slice(*info.child_vector, execute_info.right_sel, reduced_row_idx);\n+\tVector right_slice(*info.child_vector, right_sel, reduced_row_idx);\n \n \t// create the input chunk\n \tDataChunk input_chunk;\n",
  "test_patch": "diff --git a/test/sql/function/list/lambdas/reduce.test b/test/sql/function/list/lambdas/reduce.test\nindex d4cd08b87a38..a702b0fa73ac 100644\n--- a/test/sql/function/list/lambdas/reduce.test\n+++ b/test/sql/function/list/lambdas/reduce.test\n@@ -414,3 +414,28 @@ SELECT list_reduce(s, (a, b) -> row(a.v || b.v, a.i + b.i)) FROM t_struct;\n {'v': ef, 'i': 11}\n {'v': gh, 'i': 15}\n {'v': ij, 'i': 19}\n+\n+# issue #11142\n+statement ok\n+CREATE OR REPLACE TABLE df(s STRUCT(a INT, b INT)[]);\n+\n+statement ok\n+INSERT INTO df VALUES ([row(0, 0), row(0, 1), row(0, 2)]);\n+\n+query I\n+SELECT \n+list_reduce(\n+    s, (curr, next) -> struct_pack(a:=curr.a + (next.b - curr.b), b:=next.b)\n+)\n+FROM df\n+----\n+{'a': 2, 'b': 2}\n+\n+query I\n+SELECT \n+list_reduce(\n+    [struct_pack(a:=0, b:=0), struct_pack(a:=0, b:=1), struct_pack(a:=0, b:=2)],\n+    (curr, next) -> struct_pack(a:=curr.a + (next.b - curr.b), b:=next.b)\n+)\n+----\n+{'a': 2, 'b': 2}\n",
  "problem_statement": "list_reduce gives wrong results\n### What happens?\r\n\r\n`list_reduce` sometimes gives wrong results.\r\n\r\n### To Reproduce\r\n\r\n```sql\r\nCREATE OR REPLACE TABLE df(a int, b int);\r\nINSERT INTO df VALUES (0, 0), (0, 1), (0, 2);\r\n```\r\n\r\n\r\n\r\n```sql\r\nSELECT \r\nlist_reduce(\r\n    list(struct_pack(a, b) ORDER BY b),\r\n    (state, next) -> struct_pack(a:=state.a + (next.b - state.b), b:=next.b)\r\n)\r\nFROM df\r\n```\r\nreturns\r\n```\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502           reduced            \u2502\r\n\u2502 struct(a integer, b integer) \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 {'a': 1, 'b': 2}             \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\nbut should return the last entry of \r\n```sql\r\nSELECT \r\nlist_reduce(\r\n    list(struct_pack(a, b)) OVER (ORDER BY b),\r\n    (state, next) -> struct_pack(a:=state.a + (next.b - state.b), b:=next.b)\r\n)\r\nFROM df\r\n```\r\n```\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502           reduced            \u2502\r\n\u2502 struct(a integer, b integer) \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 {'a': 0, 'b': 0}             \u2502\r\n\u2502 {'a': 1, 'b': 1}             \u2502\r\n\u2502 {'a': 2, 'b': 2}             \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\n(PS: Check https://github.com/duckdb/duckdb/discussions/10703 for what I think would be a better (and faster) future for many uses of `reduce`)\r\n\r\n\r\n\r\n### OS:\r\n\r\nLinux\r\n\r\n### DuckDB Version:\r\n\r\n'0.10.1-dev717'\r\n\r\n### DuckDB Client:\r\n\r\nPython\r\n\r\n### Full Name:\r\n\r\nSoeren Wolfers\r\n\r\n### Affiliation:\r\n\r\nG-Research\r\n\r\n### Have you tried this on the latest [nightly build](https://duckdb.org/docs/installation/?version=main)?\r\n\r\nI have tested with a nightly build\r\n\r\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\r\n\r\n- [X] Yes, I have\n",
  "hints_text": "",
  "created_at": "2024-03-15T09:47:18Z"
}