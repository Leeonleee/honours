{
  "repo": "duckdb/duckdb",
  "pull_number": 10165,
  "instance_id": "duckdb__duckdb-10165",
  "issue_numbers": [
    "10155"
  ],
  "base_commit": "10bd11d2031a9c0b56044c75b7ce01c41f9240e9",
  "patch": "diff --git a/tools/pythonpkg/src/pyresult.cpp b/tools/pythonpkg/src/pyresult.cpp\nindex b211471ab242..4db7ec841715 100644\n--- a/tools/pythonpkg/src/pyresult.cpp\n+++ b/tools/pythonpkg/src/pyresult.cpp\n@@ -244,11 +244,13 @@ py::dict DuckDBPyResult::FetchNumpyInternal(bool stream, idx_t vectors_per_chunk\n \n // TODO: unify these with an enum/flag to indicate which conversions to do\n void DuckDBPyResult::ChangeToTZType(PandasDataFrame &df) {\n+\tauto names = df.attr(\"columns\").cast<vector<string>>();\n+\n \tfor (idx_t i = 0; i < result->ColumnCount(); i++) {\n \t\tif (result->types[i] == LogicalType::TIMESTAMP_TZ) {\n \t\t\t// first localize to UTC then convert to timezone_config\n-\t\t\tauto utc_local = df[result->names[i].c_str()].attr(\"dt\").attr(\"tz_localize\")(\"UTC\");\n-\t\t\tdf[result->names[i].c_str()] = utc_local.attr(\"dt\").attr(\"tz_convert\")(result->client_properties.time_zone);\n+\t\t\tauto utc_local = df[names[i].c_str()].attr(\"dt\").attr(\"tz_localize\")(\"UTC\");\n+\t\t\tdf[names[i].c_str()] = utc_local.attr(\"dt\").attr(\"tz_convert\")(result->client_properties.time_zone);\n \t\t}\n \t}\n }\n",
  "test_patch": "diff --git a/tools/pythonpkg/tests/fast/pandas/test_timestamp.py b/tools/pythonpkg/tests/fast/pandas/test_timestamp.py\nindex be181396fdb3..b3b7bb2e6eca 100644\n--- a/tools/pythonpkg/tests/fast/pandas/test_timestamp.py\n+++ b/tools/pythonpkg/tests/fast/pandas/test_timestamp.py\n@@ -63,3 +63,14 @@ def test_timestamp_timedelta(self):\n         )\n         df_from_duck = duckdb.from_df(df).df()\n         assert df_from_duck.equals(df)\n+\n+    def test_timestamp_timezone(self, duckdb_cursor):\n+        rel = duckdb_cursor.query(\n+            \"\"\"\n+            SELECT\n+                '2019-01-01 00:00:00+00'::TIMESTAMPTZ AS dateTime,\n+                '2019-01-01 00:00:00+00'::TIMESTAMPTZ AS dateTime\n+        \"\"\"\n+        )\n+        res = rel.df()\n+        assert res['dateTime'][0] == res['dateTime_2'][0]\n",
  "problem_statement": "Pandas conversion fails when two TIMESTAMPTZ columns have the same name\n### What happens?\n\nPandas conversion fails with `TypeError: Already tz-aware, use tz_convert to convert.` when two TIMESTAMPTZ columns have the same name.\n\n### To Reproduce\n\n```python\r\nimport duckdb\r\nduckdb.query(\"\"\"SELECT '2019-01-01 00:00:00+00'::TIMESTAMPTZ AS dateTime, '2019-01-01 00:00:00+00'::TIMESTAMPTZ AS dateTime\"\"\").df()\r\n```\n\n### OS:\n\nLinux\n\n### DuckDB Version:\n\n'0.9.3-dev1996'\n\n### DuckDB Client:\n\nPython\n\n### Full Name:\n\nSoeren Wolfers\n\n### Affiliation:\n\nG-Research\n\n### Have you tried this on the latest `main` branch?\n\nI have tested with a main build\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] Yes, I have\n",
  "hints_text": "",
  "created_at": "2024-01-08T16:21:32Z"
}