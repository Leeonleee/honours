diff --git a/src/function/scalar/math/numeric.cpp b/src/function/scalar/math/numeric.cpp
index 524960f5adfa..2172aa7d12b4 100644
--- a/src/function/scalar/math/numeric.cpp
+++ b/src/function/scalar/math/numeric.cpp
@@ -179,7 +179,7 @@ void SignFun::RegisterFunction(BuiltinFunctions &set) {
 //===--------------------------------------------------------------------===//
 struct CeilOperator {
 	template <class TA, class TR> static inline TR Operation(TA left) {
-		return ceil(left);
+		return std::ceil(left);
 	}
 };
 
@@ -267,7 +267,7 @@ void CeilFun::RegisterFunction(BuiltinFunctions &set) {
 //===--------------------------------------------------------------------===//
 struct FloorOperator {
 	template <class TA, class TR> static inline TR Operation(TA left) {
-		return floor(left);
+		return std::floor(left);
 	}
 };
 
@@ -519,7 +519,7 @@ void RoundFun::RegisterFunction(BuiltinFunctions &set) {
 //===--------------------------------------------------------------------===//
 struct ExpOperator {
 	template <class TA, class TR> static inline TR Operation(TA left) {
-		return exp(left);
+		return std::exp(left);
 	}
 };
 
@@ -533,7 +533,7 @@ void ExpFun::RegisterFunction(BuiltinFunctions &set) {
 //===--------------------------------------------------------------------===//
 struct PowOperator {
 	template <class TA, class TB, class TR> static inline TR Operation(TA base, TB exponent) {
-		return pow(base, exponent);
+		return std::pow(base, exponent);
 	}
 };
 
@@ -552,7 +552,7 @@ void PowFun::RegisterFunction(BuiltinFunctions &set) {
 //===--------------------------------------------------------------------===//
 struct SqrtOperator {
 	template <class TA, class TR> static inline TR Operation(TA left) {
-		return sqrt(left);
+		return std::sqrt(left);
 	}
 };
 
@@ -566,7 +566,7 @@ void SqrtFun::RegisterFunction(BuiltinFunctions &set) {
 //===--------------------------------------------------------------------===//
 struct CbRtOperator {
 	template <class TA, class TR> static inline TR Operation(TA left) {
-		return cbrt(left);
+		return std::cbrt(left);
 	}
 };
 
@@ -581,7 +581,7 @@ void CbrtFun::RegisterFunction(BuiltinFunctions &set) {
 
 struct LnOperator {
 	template <class TA, class TR> static inline TR Operation(TA left) {
-		return log(left);
+		return std::log(left);
 	}
 };
 
@@ -595,7 +595,7 @@ void LnFun::RegisterFunction(BuiltinFunctions &set) {
 //===--------------------------------------------------------------------===//
 struct Log10Operator {
 	template <class TA, class TR> static inline TR Operation(TA left) {
-		return log10(left);
+		return std::log10(left);
 	}
 };
 
@@ -609,7 +609,7 @@ void Log10Fun::RegisterFunction(BuiltinFunctions &set) {
 //===--------------------------------------------------------------------===//
 struct Log2Operator {
 	template <class TA, class TR> static inline TR Operation(TA left) {
-		return log2(left);
+		return std::log2(left);
 	}
 };
 
@@ -664,7 +664,7 @@ void RadiansFun::RegisterFunction(BuiltinFunctions &set) {
 //===--------------------------------------------------------------------===//
 struct SinOperator {
 	template <class TA, class TR> static inline TR Operation(TA input) {
-		return sin(input);
+		return std::sin(input);
 	}
 };
 
@@ -678,7 +678,7 @@ void SinFun::RegisterFunction(BuiltinFunctions &set) {
 //===--------------------------------------------------------------------===//
 struct CosOperator {
 	template <class TA, class TR> static inline TR Operation(TA input) {
-		return (double)cos(input);
+		return (double)std::cos(input);
 	}
 };
 
@@ -692,7 +692,7 @@ void CosFun::RegisterFunction(BuiltinFunctions &set) {
 //===--------------------------------------------------------------------===//
 struct TanOperator {
 	template <class TA, class TR> static inline TR Operation(TA input) {
-		return (double)tan(input);
+		return (double)std::tan(input);
 	}
 };
 
@@ -709,7 +709,7 @@ struct ASinOperator {
 		if (input < -1 || input > 1) {
 			throw Exception("ASIN is undefined outside [-1,1]");
 		}
-		return (double)asin(input);
+		return (double)std::asin(input);
 	}
 };
 
@@ -723,7 +723,7 @@ void AsinFun::RegisterFunction(BuiltinFunctions &set) {
 //===--------------------------------------------------------------------===//
 struct ATanOperator {
 	template <class TA, class TR> static inline TR Operation(TA input) {
-		return (double)atan(input);
+		return (double)std::atan(input);
 	}
 };
 
@@ -737,7 +737,7 @@ void AtanFun::RegisterFunction(BuiltinFunctions &set) {
 //===--------------------------------------------------------------------===//
 struct ATan2 {
 	template <class TA, class TB, class TR> static inline TR Operation(TA left, TB right) {
-		return (double)atan2(left, right);
+		return (double)std::atan2(left, right);
 	}
 };
 
@@ -751,7 +751,7 @@ void Atan2Fun::RegisterFunction(BuiltinFunctions &set) {
 //===--------------------------------------------------------------------===//
 struct ACos {
 	template <class TA, class TR> static inline TR Operation(TA input) {
-		return (double)acos(input);
+		return (double)std::acos(input);
 	}
 };
 
@@ -765,7 +765,7 @@ void AcosFun::RegisterFunction(BuiltinFunctions &set) {
 //===--------------------------------------------------------------------===//
 struct CotOperator {
 	template <class TA, class TR> static inline TR Operation(TA input) {
-		return 1.0 / (double)tan(input);
+		return 1.0 / (double)std::tan(input);
 	}
 };
 
@@ -774,4 +774,32 @@ void CotFun::RegisterFunction(BuiltinFunctions &set) {
 	                               UnaryDoubleFunctionWrapper<double, CotOperator>));
 }
 
+//===--------------------------------------------------------------------===//
+// gamma
+//===--------------------------------------------------------------------===//
+struct GammaOperator {
+	template <class TA, class TR> static inline TR Operation(TA left) {
+		return std::tgamma(left);
+	}
+};
+
+void GammaFun::RegisterFunction(BuiltinFunctions &set) {
+	set.AddFunction(ScalarFunction("gamma", {LogicalType::DOUBLE}, LogicalType::DOUBLE,
+	                               UnaryDoubleFunctionWrapper<double, GammaOperator>));
+}
+
+//===--------------------------------------------------------------------===//
+// gamma
+//===--------------------------------------------------------------------===//
+struct LogGammaOperator {
+	template <class TA, class TR> static inline TR Operation(TA left) {
+		return std::lgamma(left);
+	}
+};
+
+void LogGammaFun::RegisterFunction(BuiltinFunctions &set) {
+	set.AddFunction(ScalarFunction("lgamma", {LogicalType::DOUBLE}, LogicalType::DOUBLE,
+	                               UnaryDoubleFunctionWrapper<double, LogGammaOperator>));
+}
+
 } // namespace duckdb
diff --git a/src/function/scalar/math_functions.cpp b/src/function/scalar/math_functions.cpp
index 07b40667eeab..7e98367f6629 100644
--- a/src/function/scalar/math_functions.cpp
+++ b/src/function/scalar/math_functions.cpp
@@ -27,6 +27,9 @@ void BuiltinFunctions::RegisterMathFunctions() {
 	Register<PiFun>();
 
 	Register<BitCountFun>();
+
+	Register<GammaFun>();
+	Register<LogGammaFun>();
 }
 
 } // namespace duckdb
diff --git a/src/include/duckdb/function/scalar/math_functions.hpp b/src/include/duckdb/function/scalar/math_functions.hpp
index 03be7ac39be0..ead332f38980 100644
--- a/src/include/duckdb/function/scalar/math_functions.hpp
+++ b/src/include/duckdb/function/scalar/math_functions.hpp
@@ -85,4 +85,12 @@ struct BitCountFun {
 	static void RegisterFunction(BuiltinFunctions &set);
 };
 
+struct GammaFun {
+	static void RegisterFunction(BuiltinFunctions &set);
+};
+
+struct LogGammaFun {
+	static void RegisterFunction(BuiltinFunctions &set);
+};
+
 } // namespace duckdb
