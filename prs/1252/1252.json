{
  "repo": "duckdb/duckdb",
  "pull_number": 1252,
  "instance_id": "duckdb__duckdb-1252",
  "issue_numbers": [
    "1251"
  ],
  "base_commit": "85235f75c13bd91c8ac7fe915cde76c2ddd4f14b",
  "patch": "diff --git a/src/function/scalar/math/numeric.cpp b/src/function/scalar/math/numeric.cpp\nindex 524960f5adfa..2172aa7d12b4 100644\n--- a/src/function/scalar/math/numeric.cpp\n+++ b/src/function/scalar/math/numeric.cpp\n@@ -179,7 +179,7 @@ void SignFun::RegisterFunction(BuiltinFunctions &set) {\n //===--------------------------------------------------------------------===//\n struct CeilOperator {\n \ttemplate <class TA, class TR> static inline TR Operation(TA left) {\n-\t\treturn ceil(left);\n+\t\treturn std::ceil(left);\n \t}\n };\n \n@@ -267,7 +267,7 @@ void CeilFun::RegisterFunction(BuiltinFunctions &set) {\n //===--------------------------------------------------------------------===//\n struct FloorOperator {\n \ttemplate <class TA, class TR> static inline TR Operation(TA left) {\n-\t\treturn floor(left);\n+\t\treturn std::floor(left);\n \t}\n };\n \n@@ -519,7 +519,7 @@ void RoundFun::RegisterFunction(BuiltinFunctions &set) {\n //===--------------------------------------------------------------------===//\n struct ExpOperator {\n \ttemplate <class TA, class TR> static inline TR Operation(TA left) {\n-\t\treturn exp(left);\n+\t\treturn std::exp(left);\n \t}\n };\n \n@@ -533,7 +533,7 @@ void ExpFun::RegisterFunction(BuiltinFunctions &set) {\n //===--------------------------------------------------------------------===//\n struct PowOperator {\n \ttemplate <class TA, class TB, class TR> static inline TR Operation(TA base, TB exponent) {\n-\t\treturn pow(base, exponent);\n+\t\treturn std::pow(base, exponent);\n \t}\n };\n \n@@ -552,7 +552,7 @@ void PowFun::RegisterFunction(BuiltinFunctions &set) {\n //===--------------------------------------------------------------------===//\n struct SqrtOperator {\n \ttemplate <class TA, class TR> static inline TR Operation(TA left) {\n-\t\treturn sqrt(left);\n+\t\treturn std::sqrt(left);\n \t}\n };\n \n@@ -566,7 +566,7 @@ void SqrtFun::RegisterFunction(BuiltinFunctions &set) {\n //===--------------------------------------------------------------------===//\n struct CbRtOperator {\n \ttemplate <class TA, class TR> static inline TR Operation(TA left) {\n-\t\treturn cbrt(left);\n+\t\treturn std::cbrt(left);\n \t}\n };\n \n@@ -581,7 +581,7 @@ void CbrtFun::RegisterFunction(BuiltinFunctions &set) {\n \n struct LnOperator {\n \ttemplate <class TA, class TR> static inline TR Operation(TA left) {\n-\t\treturn log(left);\n+\t\treturn std::log(left);\n \t}\n };\n \n@@ -595,7 +595,7 @@ void LnFun::RegisterFunction(BuiltinFunctions &set) {\n //===--------------------------------------------------------------------===//\n struct Log10Operator {\n \ttemplate <class TA, class TR> static inline TR Operation(TA left) {\n-\t\treturn log10(left);\n+\t\treturn std::log10(left);\n \t}\n };\n \n@@ -609,7 +609,7 @@ void Log10Fun::RegisterFunction(BuiltinFunctions &set) {\n //===--------------------------------------------------------------------===//\n struct Log2Operator {\n \ttemplate <class TA, class TR> static inline TR Operation(TA left) {\n-\t\treturn log2(left);\n+\t\treturn std::log2(left);\n \t}\n };\n \n@@ -664,7 +664,7 @@ void RadiansFun::RegisterFunction(BuiltinFunctions &set) {\n //===--------------------------------------------------------------------===//\n struct SinOperator {\n \ttemplate <class TA, class TR> static inline TR Operation(TA input) {\n-\t\treturn sin(input);\n+\t\treturn std::sin(input);\n \t}\n };\n \n@@ -678,7 +678,7 @@ void SinFun::RegisterFunction(BuiltinFunctions &set) {\n //===--------------------------------------------------------------------===//\n struct CosOperator {\n \ttemplate <class TA, class TR> static inline TR Operation(TA input) {\n-\t\treturn (double)cos(input);\n+\t\treturn (double)std::cos(input);\n \t}\n };\n \n@@ -692,7 +692,7 @@ void CosFun::RegisterFunction(BuiltinFunctions &set) {\n //===--------------------------------------------------------------------===//\n struct TanOperator {\n \ttemplate <class TA, class TR> static inline TR Operation(TA input) {\n-\t\treturn (double)tan(input);\n+\t\treturn (double)std::tan(input);\n \t}\n };\n \n@@ -709,7 +709,7 @@ struct ASinOperator {\n \t\tif (input < -1 || input > 1) {\n \t\t\tthrow Exception(\"ASIN is undefined outside [-1,1]\");\n \t\t}\n-\t\treturn (double)asin(input);\n+\t\treturn (double)std::asin(input);\n \t}\n };\n \n@@ -723,7 +723,7 @@ void AsinFun::RegisterFunction(BuiltinFunctions &set) {\n //===--------------------------------------------------------------------===//\n struct ATanOperator {\n \ttemplate <class TA, class TR> static inline TR Operation(TA input) {\n-\t\treturn (double)atan(input);\n+\t\treturn (double)std::atan(input);\n \t}\n };\n \n@@ -737,7 +737,7 @@ void AtanFun::RegisterFunction(BuiltinFunctions &set) {\n //===--------------------------------------------------------------------===//\n struct ATan2 {\n \ttemplate <class TA, class TB, class TR> static inline TR Operation(TA left, TB right) {\n-\t\treturn (double)atan2(left, right);\n+\t\treturn (double)std::atan2(left, right);\n \t}\n };\n \n@@ -751,7 +751,7 @@ void Atan2Fun::RegisterFunction(BuiltinFunctions &set) {\n //===--------------------------------------------------------------------===//\n struct ACos {\n \ttemplate <class TA, class TR> static inline TR Operation(TA input) {\n-\t\treturn (double)acos(input);\n+\t\treturn (double)std::acos(input);\n \t}\n };\n \n@@ -765,7 +765,7 @@ void AcosFun::RegisterFunction(BuiltinFunctions &set) {\n //===--------------------------------------------------------------------===//\n struct CotOperator {\n \ttemplate <class TA, class TR> static inline TR Operation(TA input) {\n-\t\treturn 1.0 / (double)tan(input);\n+\t\treturn 1.0 / (double)std::tan(input);\n \t}\n };\n \n@@ -774,4 +774,32 @@ void CotFun::RegisterFunction(BuiltinFunctions &set) {\n \t                               UnaryDoubleFunctionWrapper<double, CotOperator>));\n }\n \n+//===--------------------------------------------------------------------===//\n+// gamma\n+//===--------------------------------------------------------------------===//\n+struct GammaOperator {\n+\ttemplate <class TA, class TR> static inline TR Operation(TA left) {\n+\t\treturn std::tgamma(left);\n+\t}\n+};\n+\n+void GammaFun::RegisterFunction(BuiltinFunctions &set) {\n+\tset.AddFunction(ScalarFunction(\"gamma\", {LogicalType::DOUBLE}, LogicalType::DOUBLE,\n+\t                               UnaryDoubleFunctionWrapper<double, GammaOperator>));\n+}\n+\n+//===--------------------------------------------------------------------===//\n+// gamma\n+//===--------------------------------------------------------------------===//\n+struct LogGammaOperator {\n+\ttemplate <class TA, class TR> static inline TR Operation(TA left) {\n+\t\treturn std::lgamma(left);\n+\t}\n+};\n+\n+void LogGammaFun::RegisterFunction(BuiltinFunctions &set) {\n+\tset.AddFunction(ScalarFunction(\"lgamma\", {LogicalType::DOUBLE}, LogicalType::DOUBLE,\n+\t                               UnaryDoubleFunctionWrapper<double, LogGammaOperator>));\n+}\n+\n } // namespace duckdb\ndiff --git a/src/function/scalar/math_functions.cpp b/src/function/scalar/math_functions.cpp\nindex 07b40667eeab..7e98367f6629 100644\n--- a/src/function/scalar/math_functions.cpp\n+++ b/src/function/scalar/math_functions.cpp\n@@ -27,6 +27,9 @@ void BuiltinFunctions::RegisterMathFunctions() {\n \tRegister<PiFun>();\n \n \tRegister<BitCountFun>();\n+\n+\tRegister<GammaFun>();\n+\tRegister<LogGammaFun>();\n }\n \n } // namespace duckdb\ndiff --git a/src/include/duckdb/function/scalar/math_functions.hpp b/src/include/duckdb/function/scalar/math_functions.hpp\nindex 03be7ac39be0..ead332f38980 100644\n--- a/src/include/duckdb/function/scalar/math_functions.hpp\n+++ b/src/include/duckdb/function/scalar/math_functions.hpp\n@@ -85,4 +85,12 @@ struct BitCountFun {\n \tstatic void RegisterFunction(BuiltinFunctions &set);\n };\n \n+struct GammaFun {\n+\tstatic void RegisterFunction(BuiltinFunctions &set);\n+};\n+\n+struct LogGammaFun {\n+\tstatic void RegisterFunction(BuiltinFunctions &set);\n+};\n+\n } // namespace duckdb\n",
  "test_patch": "diff --git a/test/sql/function/numeric/test_gamma.test b/test/sql/function/numeric/test_gamma.test\nnew file mode 100644\nindex 000000000000..291ef67dbdc3\n--- /dev/null\n+++ b/test/sql/function/numeric/test_gamma.test\n@@ -0,0 +1,109 @@\n+# name: test/sql/function/numeric/test_gamma.test\n+# description: Test gamma function\n+# group: [numeric]\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+query I\n+SELECT gamma(NULL)\n+----\n+NULL\n+\n+query I\n+SELECT gamma(0)\n+----\n+NULL\n+\n+query I\n+SELECT gamma(-1)\n+----\n+NULL\n+\n+query I\n+SELECT gamma(1)\n+----\n+1\n+\n+query I\n+SELECT gamma(-0.1)\n+----\n+-10.686287021193193\n+\n+\n+query I\n+SELECT gamma(2)\n+----\n+1\n+\n+query I\n+SELECT gamma(10)\n+----\n+362880.0\n+\n+query I\n+SELECT gamma(2::tinyint)\n+----\n+1\n+\n+query I\n+SELECT gamma(2::hugeint)\n+----\n+1\n+\n+statement error\n+SELECT gamma('asdf')\n+\n+query I\n+SELECT lgamma(NULL)\n+----\n+NULL\n+\n+query I\n+SELECT lgamma(0)\n+----\n+NULL\n+\n+query I\n+SELECT lgamma(-1)\n+----\n+NULL\n+\n+query I\n+SELECT lgamma(-100)\n+----\n+NULL\n+\n+query I\n+SELECT lgamma(1)\n+----\n+0\n+\n+query I\n+SELECT lgamma(2)\n+----\n+0\n+\n+query I\n+SELECT lgamma(3)\n+----\n+0.693147180559945\n+\n+query I\n+SELECT lgamma(10)\n+----\n+12.801827480081467\n+\n+\n+query I\n+SELECT lgamma(2::tinyint)\n+----\n+0\n+\n+query I\n+SELECT lgamma(2::hugeint)\n+----\n+0\n+\n+statement error\n+SELECT lgamma('asdf')\n\\ No newline at end of file\n",
  "problem_statement": "Support for gamma function?\nHi,  it would be really swell if DuckDB had support for the [gamma function](https://en.cppreference.com/w/cpp/numeric/math/tgamma) and [log gamma function](https://en.cppreference.com/w/cpp/numeric/math/lgamma).  There are a lot of super useful statistical functions that can be implemented once you have the gamma function, and I don't think it would be a huge amount of work to implement because it's in `cmath.h`.  I'd be happy to make a pull request.\n",
  "hints_text": "Yes, happy to review a PR for this",
  "created_at": "2020-12-29T08:07:16Z"
}