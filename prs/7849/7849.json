{
  "repo": "duckdb/duckdb",
  "pull_number": 7849,
  "instance_id": "duckdb__duckdb-7849",
  "issue_numbers": [
    "7816"
  ],
  "base_commit": "3e90df65e0804ef3632de74acb249a36e89d163d",
  "patch": "diff --git a/tools/pythonpkg/duckdb-stubs/__init__.pyi b/tools/pythonpkg/duckdb-stubs/__init__.pyi\nindex be98fce94135..892c2d3d2de1 100644\n--- a/tools/pythonpkg/duckdb-stubs/__init__.pyi\n+++ b/tools/pythonpkg/duckdb-stubs/__init__.pyi\n@@ -210,7 +210,7 @@ class DuckDBPyConnection:\n     def list_type(self, type: DuckDBPyType) -> DuckDBPyType: ...\n     def map_type(self, key: DuckDBPyType, value: DuckDBPyType) -> DuckDBPyType: ...\n     def __enter__(self) -> DuckDBPyConnection: ...\n-    def __exit__(self, exc_type: object, exc: object, traceback: object) -> bool: ...\n+    def __exit__(self, exc_type: object, exc: object, traceback: object) -> None: ...\n     @property\n     def description(self) -> typing.Optional[list]: ...\n \ndiff --git a/tools/pythonpkg/src/include/duckdb_python/pyconnection/pyconnection.hpp b/tools/pythonpkg/src/include/duckdb_python/pyconnection/pyconnection.hpp\nindex cbe37535e0d5..6fedab943a76 100644\n--- a/tools/pythonpkg/src/include/duckdb_python/pyconnection/pyconnection.hpp\n+++ b/tools/pythonpkg/src/include/duckdb_python/pyconnection/pyconnection.hpp\n@@ -59,7 +59,7 @@ struct DuckDBPyConnection : public std::enable_shared_from_this<DuckDBPyConnecti\n \n \tshared_ptr<DuckDBPyConnection> Enter();\n \n-\tstatic bool Exit(DuckDBPyConnection &self, const py::object &exc_type, const py::object &exc,\n+\tstatic void Exit(DuckDBPyConnection &self, const py::object &exc_type, const py::object &exc,\n \t                 const py::object &traceback);\n \n \tstatic bool DetectAndGetEnvironment();\ndiff --git a/tools/pythonpkg/src/pyconnection.cpp b/tools/pythonpkg/src/pyconnection.cpp\nindex 827d6a72feb5..97c107717ef7 100644\n--- a/tools/pythonpkg/src/pyconnection.cpp\n+++ b/tools/pythonpkg/src/pyconnection.cpp\n@@ -1585,13 +1585,14 @@ shared_ptr<DuckDBPyConnection> DuckDBPyConnection::Enter() {\n \treturn shared_from_this();\n }\n \n-bool DuckDBPyConnection::Exit(DuckDBPyConnection &self, const py::object &exc_type, const py::object &exc,\n+void DuckDBPyConnection::Exit(DuckDBPyConnection &self, const py::object &exc_type, const py::object &exc,\n                               const py::object &traceback) {\n \tself.Close();\n \tif (exc_type.ptr() != Py_None) {\n-\t\treturn false;\n+\t\t// Propagate the exception if any occurred\n+\t\tPyErr_SetObject(exc_type.ptr(), exc.ptr());\n+\t\tthrow py::error_already_set();\n \t}\n-\treturn true;\n }\n \n void DuckDBPyConnection::Cleanup() {\n",
  "test_patch": "diff --git a/tools/pythonpkg/tests/fast/api/test_connection_close.py b/tools/pythonpkg/tests/fast/api/test_connection_close.py\nindex 33d166c70818..adc35df2a6e9 100644\n--- a/tools/pythonpkg/tests/fast/api/test_connection_close.py\n+++ b/tools/pythonpkg/tests/fast/api/test_connection_close.py\n@@ -3,6 +3,7 @@\n import duckdb\n import tempfile\n import os\n+import pytest\n \n def check_exception(f):\n     had_exception = False\n@@ -24,6 +25,13 @@ def test_connection_close(self, duckdb_cursor):\n         con.close()\n         check_exception(lambda :cursor.execute(\"select * from a\"))\n \n+    def test_open_and_exit(self):\n+        with pytest.raises(TypeError):\n+            with duckdb.connect() as connection:\n+                connection.execute(\"select 42\")\n+                # This exception does not get swallowed by __exit__\n+                raise TypeError();\n+\n     def test_reopen_connection(self, duckdb_cursor):\n         fd, db = tempfile.mkstemp()\n         os.close(fd)\n",
  "problem_statement": "Cursor context manager __exit__ type signature implies it swallows exceptions\n### What happens?\r\n\r\nThe cursor context manager `__exit__` type signature is:\r\n\r\n```python\r\n    def __exit__(self, exc_type: object, exc: object, traceback: object) -> bool: ...\r\n```\r\n\r\nBy returning a bool, this implies the context manager can swallow exceptions (see the [`object.__exit__` docs](https://docs.python.org/3/reference/datamodel.html#object.__exit__)). \r\n\r\nThis causes type checkers like pyright to [assume assigned values within the context block may be unbound](https://github.com/microsoft/pyright/issues/3701#issuecomment-1184701401).\r\n\r\nI've tested throwing an exception in the context block, and it doesn't appear that the context manager swallows exceptions. So could the return type be changed to `None` instead, which would be more accurate and avoid the type error below? \r\n\r\n### To Reproduce\r\n\r\n```python\r\nimport duckdb\r\n\r\n\r\ndef fetch(duck_conn: duckdb.DuckDBPyConnection) -> list:\r\n    with duck_conn.cursor() as cur:\r\n        #raise Exception(\"boom!\")\r\n        cur.execute(\"SELECT * from FOOBAR\")\r\n        results = cur.fetchall()\r\n\r\n    return results\r\n```\r\n\r\npyright/vscode:\r\n\r\n```\r\n10:12 - error: \"results\" is possibly unbound\r\n```    \r\n\r\n### OS:\r\n\r\ndarwin\r\n\r\n### DuckDB Version:\r\n\r\n0.8.0\r\n\r\n### DuckDB Client:\r\n\r\npython\r\n\r\n### Full Name:\r\n\r\nOliver Mannion\r\n\r\n### Affiliation:\r\n\r\nXero\r\n\r\n### Have you tried this on the latest `master` branch?\r\n\r\n- [X] I agree\r\n\r\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\r\n\r\n- [X] I agree\n",
  "hints_text": "",
  "created_at": "2023-06-06T16:04:43Z"
}