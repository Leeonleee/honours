{
  "repo": "duckdb/duckdb",
  "pull_number": 7481,
  "instance_id": "duckdb__duckdb-7481",
  "issue_numbers": [
    "6666",
    "6666"
  ],
  "base_commit": "599c3b68c2dbaf082d589b1922851abf2660377a",
  "patch": "diff --git a/src/storage/checkpoint_manager.cpp b/src/storage/checkpoint_manager.cpp\nindex ecd520f5ddc5..4a1c38cd07db 100644\n--- a/src/storage/checkpoint_manager.cpp\n+++ b/src/storage/checkpoint_manager.cpp\n@@ -337,7 +337,6 @@ void CheckpointWriter::WriteIndex(IndexCatalogEntry &index_catalog) {\n }\n \n void CheckpointReader::ReadIndex(ClientContext &context, MetaBlockReader &reader) {\n-\n \t// deserialize the index metadata\n \tauto info = IndexCatalogEntry::Deserialize(reader, context);\n \n@@ -361,10 +360,17 @@ void CheckpointReader::ReadIndex(ClientContext &context, MetaBlockReader &reader\n \t}\n \n \t// bind the parsed expressions\n+\t// add the table to the bind context\n \tauto binder = Binder::CreateBinder(context);\n-\tauto &table_ref = info->table->Cast<TableRef>();\n-\tauto bound_table = binder->Bind(table_ref);\n-\tD_ASSERT(bound_table->type == TableReferenceType::BASE_TABLE);\n+\tvector<LogicalType> column_types;\n+\tvector<string> column_names;\n+\tfor (auto &col : table_catalog.GetColumns().Logical()) {\n+\t\tcolumn_types.push_back(col.Type());\n+\t\tcolumn_names.push_back(col.Name());\n+\t}\n+\tvector<column_t> column_ids;\n+\tbinder->bind_context.AddBaseTable(0, info->table->table_name, column_names, column_types, column_ids,\n+\t                                  &table_catalog);\n \tIndexBinder idx_binder(*binder, context);\n \tunbound_expressions.reserve(parsed_expressions.size());\n \tfor (auto &expr : parsed_expressions) {\n",
  "test_patch": "diff --git a/test/sql/attach/attach_index.test b/test/sql/attach/attach_index.test\nnew file mode 100644\nindex 000000000000..eebca517eb40\n--- /dev/null\n+++ b/test/sql/attach/attach_index.test\n@@ -0,0 +1,45 @@\n+# name: test/sql/attach/attach_index.test\n+# description: Issue #6666 - ATTACH fails on duckdb database with INDEX\n+# group: [attach]\n+\n+# USE memory is no longer correct when we load a different database\n+require noforcestorage\n+\n+require skip_reload\n+\n+statement ok\n+ATTACH '__TEST_DIR__/index_db.db'\n+\n+statement ok\n+USE index_db\n+\n+statement ok\n+CREATE TABLE tbl_a (a_id INTEGER PRIMARY KEY, value VARCHAR NOT NULL)\n+\n+statement ok\n+CREATE INDEX idx_tbl_a ON tbl_a (value)\n+\n+statement ok\n+INSERT INTO tbl_a VALUES(1, 'x')\n+\n+statement ok\n+INSERT INTO tbl_a VALUES(2, 'y')\n+\n+query II\n+SELECT * FROM tbl_a WHERE a_id=2\n+----\n+2\ty\n+\n+statement ok\n+USE memory\n+\n+statement ok\n+DETACH index_db\n+\n+statement ok\n+ATTACH '__TEST_DIR__/index_db.db'\n+\n+query II\n+SELECT * FROM index_db.tbl_a WHERE a_id=2\n+----\n+2\ty\n",
  "problem_statement": "ATTACH fails on duckdb database with INDEX\n### What happens?\n\nTrying to `ATTACH` a duckdb database which has an `INDEX` fails with this exception:\r\n\r\n```python\r\nTraceback (most recent call last):\r\n  File \"test_attach.py\", line 21, in <module>\r\n    db_2.sql(f\"ATTACH '{db_1_path}' AS src_db (READ_ONLY)\")\r\nduckdb.CatalogException: Catalog Error: Table with name tbl_a does not exist!\r\nDid you mean \"system.information_schema.tables\"?\r\n```\r\n\n\n### To Reproduce\n\n```python\r\nimport os\r\n\r\nimport duckdb\r\n\r\ndb_1_path = \"db_1.duckdb\"\r\ndb_2_path = \"db_2.duckdb\"\r\n\r\nif os.path.isfile(db_1_path):\r\n    os.remove(db_1_path)\r\nif os.path.isfile(db_2_path):\r\n    os.remove(db_2_path)\r\n\r\ndb_1 = duckdb.connect(db_1_path)\r\ndb_1.execute(\"CREATE TABLE tbl_a (a_id INTEGER PRIMARY KEY, value VARCHAR NOT NULL)\")\r\ndb_1.execute(\"CREATE INDEX idx_tbl_a ON tbl_a (value)\")\r\ndb_1.execute(\"INSERT INTO tbl_a VALUES(1, 'x')\")\r\ndb_1.execute(\"INSERT INTO tbl_a VALUES(2, 'y')\")\r\ndb_1.close()\r\n\r\ndb_2 = duckdb.connect(db_2_path)\r\ndb_2.sql(f\"ATTACH '{db_1_path}' AS src_db (READ_ONLY)\")\r\ndb_2.close()\r\n```\n\n### OS:\n\nWindows 10\n\n### DuckDB Version:\n\n0.7.1\n\n### DuckDB Client:\n\nPython 3.10\n\n### Full Name:\n\n2-5\n\n### Affiliation:\n\nPrivate\n\n### Have you tried this on the latest `master` branch?\n\n- [x] I agree\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] I agree\nATTACH fails on duckdb database with INDEX\n### What happens?\n\nTrying to `ATTACH` a duckdb database which has an `INDEX` fails with this exception:\r\n\r\n```python\r\nTraceback (most recent call last):\r\n  File \"test_attach.py\", line 21, in <module>\r\n    db_2.sql(f\"ATTACH '{db_1_path}' AS src_db (READ_ONLY)\")\r\nduckdb.CatalogException: Catalog Error: Table with name tbl_a does not exist!\r\nDid you mean \"system.information_schema.tables\"?\r\n```\r\n\n\n### To Reproduce\n\n```python\r\nimport os\r\n\r\nimport duckdb\r\n\r\ndb_1_path = \"db_1.duckdb\"\r\ndb_2_path = \"db_2.duckdb\"\r\n\r\nif os.path.isfile(db_1_path):\r\n    os.remove(db_1_path)\r\nif os.path.isfile(db_2_path):\r\n    os.remove(db_2_path)\r\n\r\ndb_1 = duckdb.connect(db_1_path)\r\ndb_1.execute(\"CREATE TABLE tbl_a (a_id INTEGER PRIMARY KEY, value VARCHAR NOT NULL)\")\r\ndb_1.execute(\"CREATE INDEX idx_tbl_a ON tbl_a (value)\")\r\ndb_1.execute(\"INSERT INTO tbl_a VALUES(1, 'x')\")\r\ndb_1.execute(\"INSERT INTO tbl_a VALUES(2, 'y')\")\r\ndb_1.close()\r\n\r\ndb_2 = duckdb.connect(db_2_path)\r\ndb_2.sql(f\"ATTACH '{db_1_path}' AS src_db (READ_ONLY)\")\r\ndb_2.close()\r\n```\n\n### OS:\n\nWindows 10\n\n### DuckDB Version:\n\n0.7.1\n\n### DuckDB Client:\n\nPython 3.10\n\n### Full Name:\n\n2-5\n\n### Affiliation:\n\nPrivate\n\n### Have you tried this on the latest `master` branch?\n\n- [x] I agree\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] I agree\n",
  "hints_text": "\n",
  "created_at": "2023-05-12T12:43:00Z"
}