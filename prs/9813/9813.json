{
  "repo": "duckdb/duckdb",
  "pull_number": 9813,
  "instance_id": "duckdb__duckdb-9813",
  "issue_numbers": [
    "8596",
    "8596"
  ],
  "base_commit": "275f4a7e9564db08cc3cda211e1f63a7967308cf",
  "patch": "diff --git a/src/include/duckdb/parser/transformer.hpp b/src/include/duckdb/parser/transformer.hpp\nindex 0c03f59cfcc6..7102751974b4 100644\n--- a/src/include/duckdb/parser/transformer.hpp\n+++ b/src/include/duckdb/parser/transformer.hpp\n@@ -37,6 +37,7 @@ class OnConflictInfo;\n class UpdateSetInfo;\n struct ParserOptions;\n struct PivotColumn;\n+struct PivotColumnEntry;\n \n //! The transformer class is responsible for transforming the internal Postgres\n //! parser representation into the DuckDB representation\n@@ -176,6 +177,8 @@ class Transformer {\n \tunique_ptr<SQLStatement> CreatePivotStatement(unique_ptr<SQLStatement> statement);\n \tPivotColumn TransformPivotColumn(duckdb_libpgquery::PGPivot &pivot);\n \tvector<PivotColumn> TransformPivotList(duckdb_libpgquery::PGList &list);\n+\tstatic void TransformPivotInList(unique_ptr<ParsedExpression> &expr, PivotColumnEntry &entry,\n+\t                                 bool root_entry = true);\n \n \t//===--------------------------------------------------------------------===//\n \t// SetStatement Transform\ndiff --git a/src/parser/transform/tableref/transform_pivot.cpp b/src/parser/transform/tableref/transform_pivot.cpp\nindex a7e5afb24157..6cb5c0436b52 100644\n--- a/src/parser/transform/tableref/transform_pivot.cpp\n+++ b/src/parser/transform/tableref/transform_pivot.cpp\n@@ -7,16 +7,13 @@\n \n namespace duckdb {\n \n-static void TransformPivotInList(unique_ptr<ParsedExpression> &expr, PivotColumnEntry &entry, bool root_entry = true) {\n+void Transformer::TransformPivotInList(unique_ptr<ParsedExpression> &expr, PivotColumnEntry &entry, bool root_entry) {\n \tif (expr->type == ExpressionType::COLUMN_REF) {\n \t\tauto &colref = expr->Cast<ColumnRefExpression>();\n \t\tif (colref.IsQualified()) {\n \t\t\tthrow ParserException(\"PIVOT IN list cannot contain qualified column references\");\n \t\t}\n \t\tentry.values.emplace_back(colref.GetColumnName());\n-\t} else if (expr->type == ExpressionType::VALUE_CONSTANT) {\n-\t\tauto &constant_expr = expr->Cast<ConstantExpression>();\n-\t\tentry.values.push_back(std::move(constant_expr.value));\n \t} else if (root_entry && expr->type == ExpressionType::FUNCTION) {\n \t\tauto &function = expr->Cast<FunctionExpression>();\n \t\tif (function.function_name != \"row\") {\n@@ -28,7 +25,11 @@ static void TransformPivotInList(unique_ptr<ParsedExpression> &expr, PivotColumn\n \t} else if (root_entry && expr->type == ExpressionType::STAR) {\n \t\tentry.star_expr = std::move(expr);\n \t} else {\n-\t\tthrow ParserException(\"PIVOT IN list must contain columns or lists of columns\");\n+\t\tValue val;\n+\t\tif (!Transformer::ConstructConstantFromExpression(*expr, val)) {\n+\t\t\tthrow ParserException(\"PIVOT IN list must contain columns or lists of columns\");\n+\t\t}\n+\t\tentry.values.push_back(std::move(val));\n \t}\n }\n \n",
  "test_patch": "diff --git a/test/sql/pivot/pivot_in_boolean.test b/test/sql/pivot/pivot_in_boolean.test\nnew file mode 100644\nindex 000000000000..14ceacc46c5e\n--- /dev/null\n+++ b/test/sql/pivot/pivot_in_boolean.test\n@@ -0,0 +1,50 @@\n+# name: test/sql/pivot/pivot_in_boolean.test\n+# description: Issue #8596 - Pivot with IN clause doesn't work for a boolean column\n+# group: [pivot]\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+statement ok\n+CREATE TABLE Cities(Country VARCHAR, Name VARCHAR, Year INT, Population INT);\n+\n+statement ok\n+INSERT INTO Cities VALUES ('NL', 'Amsterdam', 2000, 1005);\n+\n+statement ok\n+INSERT INTO Cities VALUES ('NL', 'Amsterdam', 2010, 1065);\n+\n+statement ok\n+INSERT INTO Cities VALUES ('NL', 'Amsterdam', 2020, 1158);\n+\n+statement ok\n+INSERT INTO Cities VALUES ('US', 'Seattle', 2000, 564);\n+\n+statement ok\n+INSERT INTO Cities VALUES ('US', 'Seattle', 2010, 608);\n+\n+statement ok\n+INSERT INTO Cities VALUES ('US', 'Seattle', 2020, 738);\n+\n+statement ok\n+INSERT INTO Cities VALUES ('US', 'New York City', 2000, 8015);\n+\n+statement ok\n+INSERT INTO Cities VALUES ('US', 'New York City', 2010, 8175);\n+\n+statement ok\n+INSERT INTO Cities VALUES ('US', 'New York City', 2020, 8772);\n+\n+query III rowsort\n+pivot cities on (Country='NL') using avg(Population) group by name;\n+----\n+Amsterdam\tNULL\t1076.0\n+New York City\t8320.666666666666\tNULL\n+Seattle\t636.6666666666666\tNULL\n+\n+query III rowsort\n+pivot cities on (Country='NL') in (false, true) using avg(Population) group by name;\n+----\n+Amsterdam\tNULL\t1076.0\n+New York City\t8320.666666666666\tNULL\n+Seattle\t636.6666666666666\tNULL\n",
  "problem_statement": "Pivot with IN clause doesn't work for a boolean column\n### What happens?\n\nYou can use an IN clause to specify the values to make into columns. If you do this with a boolean expression, you get a strange error:\r\nError: Parser Error: PIVOT IN list must contain columns or lists of columns\r\n \r\nThis is a somewhat odd thing to want to do, but the IN clause does tell the database that columns should be created for both values. Otherwise, columns are created only for the values present.\n\n### To Reproduce\n\nRun the following SQL:\r\n-- Example data from documentation for PIVOT\r\nCREATE TABLE Cities(Country VARCHAR, Name VARCHAR, Year INT, Population INT);\r\nINSERT INTO Cities VALUES ('NL', 'Amsterdam', 2000, 1005);\r\nINSERT INTO Cities VALUES ('NL', 'Amsterdam', 2010, 1065);\r\nINSERT INTO Cities VALUES ('NL', 'Amsterdam', 2020, 1158);\r\nINSERT INTO Cities VALUES ('US', 'Seattle', 2000, 564);\r\nINSERT INTO Cities VALUES ('US', 'Seattle', 2010, 608);\r\nINSERT INTO Cities VALUES ('US', 'Seattle', 2020, 738);\r\nINSERT INTO Cities VALUES ('US', 'New York City', 2000, 8015);\r\nINSERT INTO Cities VALUES ('US', 'New York City', 2010, 8175);\r\nINSERT INTO Cities VALUES ('US', 'New York City', 2020, 8772);\r\n-- PIVOT on string column with IN clause works\r\npivot cities on Country in ('NL','US') using avg(Population) group by name;\r\n-- PIVOT on boolean expression without IN clause works\r\npivot cities on (Country='NL') using avg(Population) group by name;\r\n-- PIVOT on boolean expression with IN clause does not work\r\npivot cities on (Country='NL') in (false, true) using avg(Population) group by name;\n\n### OS:\n\nWindows amd64\n\n### DuckDB Version:\n\n0.8.2 main\n\n### DuckDB Client:\n\nCLI\n\n### Full Name:\n\nDan Cory\n\n### Affiliation:\n\nself\n\n### Have you tried this on the latest `master` branch?\n\nI have tested with a master build\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] Yes, I have\nPivot with IN clause doesn't work for a boolean column\n### What happens?\n\nYou can use an IN clause to specify the values to make into columns. If you do this with a boolean expression, you get a strange error:\r\nError: Parser Error: PIVOT IN list must contain columns or lists of columns\r\n \r\nThis is a somewhat odd thing to want to do, but the IN clause does tell the database that columns should be created for both values. Otherwise, columns are created only for the values present.\n\n### To Reproduce\n\nRun the following SQL:\r\n-- Example data from documentation for PIVOT\r\nCREATE TABLE Cities(Country VARCHAR, Name VARCHAR, Year INT, Population INT);\r\nINSERT INTO Cities VALUES ('NL', 'Amsterdam', 2000, 1005);\r\nINSERT INTO Cities VALUES ('NL', 'Amsterdam', 2010, 1065);\r\nINSERT INTO Cities VALUES ('NL', 'Amsterdam', 2020, 1158);\r\nINSERT INTO Cities VALUES ('US', 'Seattle', 2000, 564);\r\nINSERT INTO Cities VALUES ('US', 'Seattle', 2010, 608);\r\nINSERT INTO Cities VALUES ('US', 'Seattle', 2020, 738);\r\nINSERT INTO Cities VALUES ('US', 'New York City', 2000, 8015);\r\nINSERT INTO Cities VALUES ('US', 'New York City', 2010, 8175);\r\nINSERT INTO Cities VALUES ('US', 'New York City', 2020, 8772);\r\n-- PIVOT on string column with IN clause works\r\npivot cities on Country in ('NL','US') using avg(Population) group by name;\r\n-- PIVOT on boolean expression without IN clause works\r\npivot cities on (Country='NL') using avg(Population) group by name;\r\n-- PIVOT on boolean expression with IN clause does not work\r\npivot cities on (Country='NL') in (false, true) using avg(Population) group by name;\n\n### OS:\n\nWindows amd64\n\n### DuckDB Version:\n\n0.8.2 main\n\n### DuckDB Client:\n\nCLI\n\n### Full Name:\n\nDan Cory\n\n### Affiliation:\n\nself\n\n### Have you tried this on the latest `master` branch?\n\nI have tested with a master build\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] Yes, I have\n",
  "hints_text": "\n",
  "created_at": "2023-11-27T13:37:44Z"
}