{
  "repo": "duckdb/duckdb",
  "pull_number": 636,
  "instance_id": "duckdb__duckdb-636",
  "issue_numbers": [
    "617"
  ],
  "base_commit": "7df19bf81e728c14f03cf019cbc973f804c68186",
  "patch": "diff --git a/.travis.yml b/.travis.yml\nindex 47cc2849bcfe..006023575cd5 100644\n--- a/.travis.yml\n+++ b/.travis.yml\n@@ -39,14 +39,16 @@ matrix:\n         - (cd build/release && cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_ICU_EXTENSION=1 -DJDBC_DRIVER=1 ../.. && cmake --build .)\n         - build/release/test/unittest \"*\"\n         - python3.7 tools/shell/shell-test.py build/release/duckdb_cli\n+        - build/release/extension/icu/test/icu_test\n+        - python3.7 tools/rest/test_the_rest.py build/release/tools/rest\n+        - java -cp build/release/tools/jdbc/duckdb_jdbc.jar nl.cwi.da.duckdb.test.TestDuckDBJDBC\n         - (cd examples/embedded-c; make)\n         - (cd examples/embedded-c++; make)\n         - (cd examples/programmatic-querying; make)\n-        - java -cp build/release/tools/jdbc/duckdb_jdbc.jar nl.cwi.da.duckdb.test.TestDuckDBJDBC\n-        - build/release/extension/icu/test/icu_test\n+        - (cd examples/jdbc; make)\n \n       after_success:\n-        - python tools/upload-s3.py lib-linux-amd64 build/release/src/libduckdb*.so build/release/src/libduckdb*.a build/release/duckdb_cli build/release/tools/jdbc/duckdb_jdbc.jar\n+        #- python tools/upload-s3.py lib-linux-amd64 build/release/src/libduckdb*.so build/release/src/libduckdb*.a build/release/duckdb_cli build/release/tools/jdbc/duckdb_jdbc.jar\n         - python3 scripts/asset-upload.py libduckdb-linux-amd64.so=build/release/src/libduckdb*.so duckdb_cli-linux-amd64=build/release/duckdb_cli duckdb_jdbc-linux-amd64.jar=build/release/tools/jdbc/duckdb_jdbc.jar\n \n \n@@ -68,7 +70,7 @@ matrix:\n         - build/release/extension/icu/test/icu_test\n \n       after_success:\n-        - python3 tools/upload-s3.py lib-osx build/release/src/libduckdb.dylib build/release/src/libduckdb_static.a build/release/duckdb_cli build/release/tools/jdbc/duckdb_jdbc.jar\n+        #- python3 tools/upload-s3.py lib-osx build/release/src/libduckdb.dylib build/release/src/libduckdb_static.a build/release/duckdb_cli build/release/tools/jdbc/duckdb_jdbc.jar\n         - python3 scripts/asset-upload.py libduckdb-osx-amd64.dylib=build/release/src/libduckdb*.dylib duckdb_cli-osx-amd64=build/release/duckdb_cli duckdb_jdbc-osx-amd64.jar=build/release/tools/jdbc/duckdb_jdbc.jar\n \n \n@@ -96,7 +98,7 @@ matrix:\n         - extension/icu/test/Release/icu_test.exe\n \n       after_success:\n-        - C:/Python37-x64/python.exe tools/upload-s3.py lib-windows-amd64 src/Release/duckdb.dll Release/duckdb_cli.exe tools/jdbc/duckdb_jdbc.jar\n+        #- C:/Python37-x64/python.exe tools/upload-s3.py lib-windows-amd64 src/Release/duckdb.dll Release/duckdb_cli.exe tools/jdbc/duckdb_jdbc.jar\n         - C:/Python37-x64/python.exe scripts/asset-upload.py libduckdb-windows-amd64.dll=src/Release/duckdb.dll duckdb_cli-windows-amd64.exe=Release/duckdb_cli.exe duckdb_jdbc-windows-amd64.jar=tools/jdbc/duckdb_jdbc.jar\n \n \n@@ -237,7 +239,7 @@ matrix:\n \n       after_success:\n         - (cd src/amalgamation; zip ../../build/duckdb.zip duckdb.*)\n-        - python tools/upload-s3.py src-amalgamation build/duckdb.zip\n+        # - python tools/upload-s3.py src-amalgamation build/duckdb.zip\n         - python3 scripts/asset-upload.py duckdb_amalgamation.zip=build/duckdb.zip\n \n \n@@ -294,7 +296,7 @@ matrix:\n         - build/release/test/unittest \"*\"\n \n       after_success:\n-        - python tools/upload-s3.py lib-linux-i386 build/release/src/libduckdb*.so build/release/src/libduckdb*.a build/release/duckdb_cli\n+        #- python tools/upload-s3.py lib-linux-i386 build/release/src/libduckdb*.so build/release/src/libduckdb*.a build/release/duckdb_cli\n         - python3 scripts/asset-upload.py libduckdb-linux-i386.so=build/release/src/libduckdb.so duckdb_cli-linux-i386=build/release/duckdb_cli\n \n \n@@ -319,7 +321,7 @@ matrix:\n         - C:/Python37-x64/python.exe tools/shell/shell-test.py Release/duckdb_cli.exe\n \n       after_success:\n-        - C:/Python37-x64/python.exe tools/upload-s3.py lib-windows-i386 src/Release/duckdb.dll Release/duckdb_cli.exe\n+        #- C:/Python37-x64/python.exe tools/upload-s3.py lib-windows-i386 src/Release/duckdb.dll Release/duckdb_cli.exe\n         - C:/Python37-x64/python.exe scripts/asset-upload.py libduckdb-windows-i386.dll=src/Release/duckdb.dll duckdb_cli-windows-i386.exe=Release/duckdb_cli.exe duckdb_jdbc-windows-i386.jar=tools/jdbc/duckdb_jdbc.jar\n \n \n@@ -398,24 +400,7 @@ matrix:\n     #     - $SCMD /home/duckdb/build/test/unittest \"~[copy]~[sqlitelogic]~[sqlserver]~[parquet]~[.]\"\n \n \n-# APIs: REST, r / python packages\n-\n-\n-    - os: linux\n-      dist: xenial\n-      name: REST Server\n-      if: (type = push AND branch = master) OR type = pull_request OR tag =~ /^v\\d+\\.\\d+\\.\\d+$/\n-\n-      before_install:\n-        - pip install --user boto3\n-\n-      script:\n-        - cd tools/rest\n-        - python3 test_the_rest.py\n-\n-      # after_success:\n-      #   - python tools/upload-s3.py lib-linux-amd64 build/release/src/libduckdb*.so build/release/src/libduckdb*.a\n-\n+# APIs: jdbc/ r / python packages\n \n     - os: linux\n       dist: xenial\ndiff --git a/Makefile b/Makefile\nindex 893d03a71254..822bb948e549 100644\n--- a/Makefile\n+++ b/Makefile\n@@ -64,11 +64,12 @@ amaldebug:\n \tcmake --build .\n \n jdbc:\n-\tmkdir -p build/jdbc && \\\n-\tcd build/jdbc && \\\n-\tcmake $(GENERATOR) $(FORCE_COLOR) -DJDBC_DRIVER=1 -DCMAKE_BUILD_TYPE=Release ../.. && \\\n+\tmkdir -p build/release && \\\n+\tcd build/release && \\\n+\tcmake $(GENERATOR) $(FORCE_COLOR) ${WARNINGS_AS_ERRORS} ${DISABLE_UNITY_FLAG} -DJDBC_DRIVER=1 -DCMAKE_BUILD_TYPE=Release ../.. && \\\n \tcmake --build .\n \n+\n jdbcdebug:\n \tmkdir -p build/jdbcdebug && \\\n \tcd build/jdbcdebug && \\\ndiff --git a/examples/jdbc/DuckDBExample.java b/examples/jdbc/DuckDBExample.java\nnew file mode 100644\nindex 000000000000..d74dccca3b32\n--- /dev/null\n+++ b/examples/jdbc/DuckDBExample.java\n@@ -0,0 +1,47 @@\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.ResultSetMetaData;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+\n+public class DuckDBExample {\n+\tpublic static void main(String[] args) throws SQLException, ClassNotFoundException {\n+\t\tClass.forName(\"nl.cwi.da.duckdb.DuckDBDriver\");\n+\n+\t\t// this JDBC url creates a temporary in-memory database. If you want to use a\n+\t\t// persistent DB, append its file name\n+\t\tConnection conn = DriverManager.getConnection(\"jdbc:duckdb:\");\n+\n+\t\tStatement stmt = conn.createStatement();\n+\t\tstmt.execute(\"CREATE TABLE test (a INTEGER, b VARCHAR)\");\n+\n+\t\tPreparedStatement p_stmt = conn.prepareStatement(\"INSERT INTO test VALUES (?, ?);\");\n+\n+\t\tp_stmt.setInt(1, 42);\n+\t\tp_stmt.setString(2, \"Hello\");\n+\t\tp_stmt.execute();\n+\n+\t\tp_stmt.setInt(1, 43);\n+\t\tp_stmt.setString(2, \"World\");\n+\t\tp_stmt.execute();\n+\n+\t\tp_stmt.close();\n+\n+\t\tResultSet rs = stmt.executeQuery(\"SELECT * FROM test\");\n+\t\tResultSetMetaData md = rs.getMetaData();\n+\t\tint row = 1;\n+\t\twhile (rs.next()) {\n+\t\t\tfor (int col = 1; col <= md.getColumnCount(); col++) {\n+\t\t\t\tSystem.out.println(md.getColumnName(col) + \"[\" + row + \"]=\" + rs.getString(col) + \" (\"\n+\t\t\t\t\t\t+ md.getColumnTypeName(col) + \")\");\n+\t\t\t}\n+\t\t\trow++;\n+\t\t}\n+\n+\t\trs.close();\n+\t\tstmt.close();\n+\t\tconn.close();\n+\t}\n+}\ndiff --git a/examples/jdbc/Makefile b/examples/jdbc/Makefile\nnew file mode 100644\nindex 000000000000..ab4a567c15b4\n--- /dev/null\n+++ b/examples/jdbc/Makefile\n@@ -0,0 +1,14 @@\n+.PHONY: duckdb clean main\n+\n+all: duckdb main\n+\n+clean:\n+\trm *.class\n+\n+duckdb:\n+\tmake -C ../.. jdbc\n+\n+main:\n+\tjavac DuckDBExample.java\n+\tjava -cp .:../../build/release/tools/jdbc/duckdb_jdbc.jar DuckDBExample\n+\ndiff --git a/src/CMakeLists.txt b/src/CMakeLists.txt\nindex e4e7b652af0e..f2f58a0032eb 100644\n--- a/src/CMakeLists.txt\n+++ b/src/CMakeLists.txt\n@@ -7,6 +7,11 @@ if(NOT MSVC)\n     )\n endif()\n \n+# clang-tidy config from presto-cpp\n+# set(CMAKE_CXX_CLANG_TIDY clang-tidy --checks=*,-abseil-*,-android-*,-cert-err58-cpp,-clang-analyzer-osx-*,-cppcoreguidelines-avoid-c-arrays,-cppcoreguidelines-avoid-magic-numbers,-cppcoreguidelines-pro-bounds-array-to-pointer-decay,-cppcoreguidelines-pro-bounds-pointer-arithmetic,-cppcoreguidelines-pro-type-reinterpret-cast,-cppcoreguidelines-pro-type-vararg,-fuchsia-*,-google-*,-hicpp-avoid-c-arrays,-hicpp-deprecated-headers,-hicpp-no-array-decay,-hicpp-use-equals-default,-hicpp-vararg,-llvmlibc-*,-llvm-header-guard,-llvm-include-order,-mpi-*,-misc-non-private-member-variables-in-classes,-misc-no-recursion,-misc-unused-parameters,-modernize-avoid-c-arrays,-modernize-deprecated-headers,-modernize-use-nodiscard,-modernize-use-trailing-return-type,-objc-*,-openmp-*,-readability-avoid-const-params-in-decls,-readability-convert-member-functions-to-static,-readability-magic-numbers,-zircon-*)\n+\n+\n+\n if(AMALGAMATION_BUILD)\n \n   if(WIN32)\n",
  "test_patch": "diff --git a/tools/rest/test_the_rest.py b/tools/rest/test_the_rest.py\nindex 8cc41ba43931..116ede084532 100644\n--- a/tools/rest/test_the_rest.py\n+++ b/tools/rest/test_the_rest.py\n@@ -5,8 +5,13 @@\n import time\n from contextlib import closing\n import urllib.parse\n+import sys\n \n-BIN_PREFIX=\"../../build/debug/tools/rest\"\n+if (len(sys.argv) < 2):\n+\tprint(\"Usage: test_the_rest.py [path_to_tools_rest_binaries]\")\n+\tsys.exit(-1)\n+\n+BIN_PREFIX=sys.argv[1]\n DBFILE = \"tpch_sf01.duckdb\"\n \n \n@@ -17,12 +22,10 @@ def find_free_port():\n         return s.getsockname()[1]\n \n \n-# create binary\n-process = subprocess.Popen(\"make debug -C ../..\".split(' '))\n-process.wait()\n+# check for binary\n server_binary = \"%s/duckdb_rest_server\" % BIN_PREFIX\n-if process.returncode != 0 or not os.path.isfile(server_binary):\n-\traise Exception('build failed')\n+if not os.path.isfile(server_binary):\n+\traise Exception('could not find rest binary')\n \n \n # create database if not exists\n",
  "problem_statement": "Document JDBC Client\nInstallation, use, example, etc. We should also build a fat JAR that contains the dynamic libraries for most platforms\n",
  "hints_text": "",
  "created_at": "2020-05-07T07:27:35Z"
}