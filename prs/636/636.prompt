You will be provided with a partial code base and an issue statement explaining a problem to resolve.
In your output, give nothing but the code (no markdown) so that your output can be copy pasted and run immediately with no changes

<issue>
Document JDBC Client
Installation, use, example, etc. We should also build a fat JAR that contains the dynamic libraries for most platforms

</issue>
<code>
[start of README.md]
1: <img align="left" src="logo/duckdb-logo.png" height="120">
2: 
3: # DuckDB, the SQLite for Analytics
4: [![Travis](https://api.travis-ci.org/cwida/duckdb.svg?branch=master)](https://travis-ci.org/cwida/duckdb)
5: [![CodeFactor](https://www.codefactor.io/repository/github/cwida/duckdb/badge)](https://www.codefactor.io/repository/github/cwida/duckdb)
6: [![Coverage Status](https://coveralls.io/repos/github/cwida/duckdb/badge.svg?branch=master)](https://coveralls.io/github/cwida/duckdb?branch=master)
7: 
8: <br>
9: 
10: 
11: # Requirements
12: DuckDB requires [CMake](https://cmake.org) to be installed and a `C++11` compliant compiler. GCC 4.9 and newer, Clang 3.9 and newer and VisualStudio 2017 are tested on each revision.
13: 
14: ## Compiling
15: Run `make` in the root directory to compile the sources. For development, use `make debug` to build a non-optimized debug version. You may run `make unit` and `make allunit` to verify that your version works properly after making changes.
16: 
17: # Usage
18: A command line utility based on `sqlite3` can be found in either `build/release/duckdb_cli` (release, the default) or `build/debug/duckdb_cli` (debug).
19: 
20: # Embedding
21: As DuckDB is an embedded database, there is no database server to launch or client to connect to a running server. However, the database server can be embedded directly into an application using the C or C++ bindings. The main build process creates the shared library `build/release/src/libduckdb.[so|dylib|dll]` that can be linked against. A static library is built as well.
22: 
23: For examples on how to embed DuckDB into your application, see the [examples](https://github.com/cwida/duckdb/tree/master/examples) folder.
24: 
25: ## Benchmarks
26: After compiling, benchmarks can be executed from the root directory by executing `./build/release/benchmark/benchmark_runner`.
27: 
28: ## Standing on the Shoulders of Giants
29: DuckDB is implemented in C++ 11, should compile with GCC and clang, uses CMake to build and [Catch2](https://github.com/catchorg/Catch2) for testing. DuckDB uses some components from various Open-Source databases and draws inspiration from scientific publications. Here is an overview:
30: 
31: * Parser: We use the PostgreSQL parser that was [repackaged as a stand-alone library](https://github.com/lfittl/libpg_query). The translation to our own parse tree is inspired by [Peloton](https://pelotondb.io).
32: * Shell: We have adapted the [SQLite shell](https://sqlite.org/cli.html) to work with DuckDB.
33: * Tests: We use the [SQL Logic Tests from SQLite](https://www.sqlite.org/sqllogictest/doc/trunk/about.wiki) to test DuckDB.
34: * Query fuzzing: We use [SQLsmith](https://github.com/anse1/sqlsmith) to generate random queries for additional testing.
35: * Date Math: We use the date math component from [MonetDB](https://www.monetdb.org).
36: * SQL Window Functions: DuckDB's window functions implementation uses Segment Tree Aggregation as described in the paper "Efficient Processing of Window Functions in Analytical SQL Queries" by Viktor Leis, Kan Kundhikanjana, Alfons Kemper and Thomas Neumann.
37: * Execution engine: The vectorized execution engine is inspired by the paper "MonetDB/X100: Hyper-Pipelining Query Execution" by Peter Boncz, Marcin Zukowski and Niels Nes.
38: * Optimizer: DuckDB's optimizer draws inspiration from the papers "Dynamic programming strikes back" by Guido Moerkotte and Thomas Neumman as well as "Unnesting Arbitrary Queries" by Thomas Neumann and Alfons Kemper.
39: * Concurrency control: Our MVCC implementation is inspired by the paper "Fast Serializable Multi-Version Concurrency Control for Main-Memory Database Systems" by Thomas Neumann, Tobias Mühlbauer and Alfons Kemper.
40: * Regular Expression: DuckDB uses Google's [RE2](https://github.com/google/re2) regular expression engine.
41: 
42: ## Other pages
43: * [Continuous Benchmarking (CB™)](https://www.duckdb.org/benchmarks/index.html), runs TPC-H, TPC-DS and some microbenchmarks on every commit
[end of README.md]
[start of .travis.yml]
1: language: cpp
2: script: make unit
3: dist: trusty
4: 
5: before_install:
6:   - eval "${MATRIX_EVAL}"
7: 
8: env:
9:   global:
10:     - CIBW_BUILD='cp37-* cp27-*'
11:     - CIBW_TEST_REQUIRES='pytest'
12:     - CIBW_BEFORE_BUILD='pip install "numpy>=1.16" && pip install "pandas>=0.24" && pip install "pytest>=4.3" && pip install "cmake==3.13.3" && pip install "pybind11>=2.4"'
13:     - CIBW_TEST_COMMAND='python -m pytest {project}/tests'
14: 
15: 
16: matrix:
17:   include:
18: 
19:     - os: linux
20:       if: tag != master-builds
21:       dist: bionic
22:       name: GCC 9
23:       python: 3.7
24: 
25:       addons:
26:         apt:
27:           sources:
28:             - sourceline: 'ppa:ubuntu-toolchain-r/test'
29:             - sourceline: 'ppa:deadsnakes/ppa'
30:           packages:
31:             - g++-9 python3.7
32:       env:
33:         - MATRIX_EVAL="CC=gcc-9 && CXX=g++-9"
34:       before_install:
35:         - eval "${MATRIX_EVAL}"
36:         - pip install --user boto3
37:       script:
38:         - mkdir -p build/release
39:         - (cd build/release && cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_ICU_EXTENSION=1 -DJDBC_DRIVER=1 ../.. && cmake --build .)
40:         - build/release/test/unittest "*"
41:         - python3.7 tools/shell/shell-test.py build/release/duckdb_cli
42:         - (cd examples/embedded-c; make)
43:         - (cd examples/embedded-c++; make)
44:         - (cd examples/programmatic-querying; make)
45:         - java -cp build/release/tools/jdbc/duckdb_jdbc.jar nl.cwi.da.duckdb.test.TestDuckDBJDBC
46:         - build/release/extension/icu/test/icu_test
47: 
48:       after_success:
49:         - python tools/upload-s3.py lib-linux-amd64 build/release/src/libduckdb*.so build/release/src/libduckdb*.a build/release/duckdb_cli build/release/tools/jdbc/duckdb_jdbc.jar
50:         - python3 scripts/asset-upload.py libduckdb-linux-amd64.so=build/release/src/libduckdb*.so duckdb_cli-linux-amd64=build/release/duckdb_cli duckdb_jdbc-linux-amd64.jar=build/release/tools/jdbc/duckdb_jdbc.jar
51: 
52: 
53:     - os: osx
54:       if: tag != master-builds
55:       name: Xcode 11.3
56:       osx_image: xcode11.3
57: 
58:       before_install:
59:         - curl https://bootstrap.pypa.io/get-pip.py -o /tmp/get-pip.py
60:         - python3 /tmp/get-pip.py
61:         - python3 -m pip install --user boto3
62: 
63:       script:
64:         - (mkdir -p build/release && cd build/release && cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_ICU_EXTENSION=1 -DJDBC_DRIVER=1 ../.. && cmake --build .)
65:         - build/release/test/unittest
66:         - python3 tools/shell/shell-test.py build/release/duckdb_cli
67:         - java -cp build/release/tools/jdbc/duckdb_jdbc.jar nl.cwi.da.duckdb.test.TestDuckDBJDBC
68:         - build/release/extension/icu/test/icu_test
69: 
70:       after_success:
71:         - python3 tools/upload-s3.py lib-osx build/release/src/libduckdb.dylib build/release/src/libduckdb_static.a build/release/duckdb_cli build/release/tools/jdbc/duckdb_jdbc.jar
72:         - python3 scripts/asset-upload.py libduckdb-osx-amd64.dylib=build/release/src/libduckdb*.dylib duckdb_cli-osx-amd64=build/release/duckdb_cli duckdb_jdbc-osx-amd64.jar=build/release/tools/jdbc/duckdb_jdbc.jar
73: 
74: 
75:     - os: windows
76:       if: tag != master-builds
77:       name: VS 2017
78:       filter_secrets: false
79: 
80:       language: c
81: 
82:       before_script:
83:         - choco install python3 --version 3.7.3 -y --params "/InstallDir:C:\Python37-x64"
84:         - choco install jdk8 --version 8.0.211 -y --force
85: 
86:       script:
87:         - cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_GENERATOR_PLATFORM=x64 -DJDBC_DRIVER=1 -DBUILD_ICU_EXTENSION=1
88:         - cmake --build . --target duckdb --config Release
89:         - cmake --build . --target unittest --config Release
90:         - cmake --build . --target shell --config Release
91:         - cmake --build . --target jdbc --config Release
92:         - cmake --build . --target icu_test --config Release
93:         - test/Release/unittest.exe
94:         - C:/Python37-x64/python.exe tools/shell/shell-test.py Release/duckdb_cli.exe
95:         - C:/Program\ Files/Java/jdk1.8.0_211/bin/java -cp tools/jdbc/duckdb_jdbc.jar nl.cwi.da.duckdb.test.TestDuckDBJDBC
96:         - extension/icu/test/Release/icu_test.exe
97: 
98:       after_success:
99:         - C:/Python37-x64/python.exe tools/upload-s3.py lib-windows-amd64 src/Release/duckdb.dll Release/duckdb_cli.exe tools/jdbc/duckdb_jdbc.jar
100:         - C:/Python37-x64/python.exe scripts/asset-upload.py libduckdb-windows-amd64.dll=src/Release/duckdb.dll duckdb_cli-windows-amd64.exe=Release/duckdb_cli.exe duckdb_jdbc-windows-amd64.jar=tools/jdbc/duckdb_jdbc.jar
101: 
102: 
103: # checks: debug mode (with sanitizers), coveralls, valgrind, vector sizes
104: 
105:     - os: linux
106:       if: tag != master-builds
107:       dist: xenial
108:       name: GCC 9 Debug
109: 
110:       addons:
111:         apt:
112:           sources:
113:             - ubuntu-toolchain-r-test
114:           packages:
115:             - g++-9
116:       env:
117:         - MATRIX_EVAL="CC=gcc-9 && CXX=g++-9"
118:         - TREAT_WARNINGS_AS_ERRORS=1
119: 
120:     - os: osx
121:       name: Xcode 11.3 Debug
122:       if: (type = push AND branch = master) OR type = pull_request OR tag =~ /^v\d+\.\d+\.\d+$/
123: 
124:       osx_image: xcode11.3
125: 
126: 
127:     - os: linux
128:       dist: xenial
129:       name: Code Coverage
130:       if: (type = push AND branch = master) OR type = pull_request OR tag =~ /^v\d+\.\d+\.\d+$/
131: 
132:       addons:
133:         apt:
134:           sources:
135:             - ubuntu-toolchain-r-test
136: 
137:       before_install:
138:         - pip install --user cpp-coveralls
139: 
140:       script:
141:         - mkdir -p build/coverage
142:         - (cd build/coverage && cmake -E env CXXFLAGS="--coverage" cmake -DCMAKE_BUILD_TYPE=Debug ../.. && make)
143:         - build/coverage/test/unittest
144: 
145:       after_success:
146:         - coveralls -b build/coverage -E '.*CMakeCXXCompilerId.cpp' --exclude tools --exclude benchmark --exclude examples --exclude third_party --exclude test --exclude src/common/enums --exclude src/parser/transform/helpers/nodetype_to_string.cpp --exclude build/coverage/third_party/libpg_query/grammar --gcov-options '\-lp'
147: 
148: 
149:     - os: linux
150:       dist: bionic
151:       name: Valgrind
152:       if: (type = push AND branch = master) OR type = pull_request OR tag =~ /^v\d+\.\d+\.\d+$/
153: 
154:       addons:
155:         apt:
156:           sources:
157:             - ubuntu-toolchain-r-test
158:           packages:
159:             - valgrind
160: 
161:       script:
162:         - mkdir -p build/debug
163:         - (cd build/debug && cmake -DCMAKE_BUILD_TYPE=Debug -DENABLE_SANITIZER=FALSE ../.. && cmake --build .)
164:         - valgrind ./build/debug/test/unittest -s "Test TPC-H SF0.01"
165: 
166: 
167:     - os: linux
168:       dist: bionic
169:       name: GCC 9 (Vector Sizes)
170:       if: (type = push AND branch = master) OR type = pull_request OR tag =~ /^v\d+\.\d+\.\d+$/
171: 
172:       python: 3.7
173: 
174:       addons:
175:         apt:
176:           sources:
177:             - ubuntu-toolchain-r-test
178:       script:
179:         - python3 scripts/test_vector_sizes.py
180: 
181: 
182: # old compilers
183: 
184:     - os: linux
185:       name: Clang 6
186:       if: (type = push AND branch = master) OR type = pull_request OR tag =~ /^v\d+\.\d+\.\d+$/
187:       dist: xenial
188:       addons:
189:         apt:
190:           sources:
191:             - ubuntu-toolchain-r-test
192:           packages:
193:             - clang-6.0
194:       env:
195:         - MATRIX_EVAL="CC=clang-6.0 && CXX=clang++-6.0"
196:         - TREAT_WARNINGS_AS_ERRORS=1
197:         - DISABLE_UNITY=1
198: 
199: 
200:     - os: linux
201:       name: GCC 4.9
202:       if: (type = push AND branch = master) OR type = pull_request OR tag =~ /^v\d+\.\d+\.\d+$/
203:       addons:
204:          apt:
205:           sources:
206:             - ubuntu-toolchain-r-test
207:           packages:
208:             - g++-4.9 binutils-2.26
209:       env:
210:          - MATRIX_EVAL="CC=gcc-4.9 && CXX=g++-4.9"
211: 
212: 
213: # amalgamations
214: 
215:     - os: linux
216:       dist: xenial
217:       name: GCC 9 (Amalgamation)
218:       if: (type = push AND branch = master) OR type = pull_request OR tag =~ /^v\d+\.\d+\.\d+$/
219: 
220:       addons:
221:         apt:
222:           sources:
223:             - ubuntu-toolchain-r-test
224:           packages:
225:             - g++-9
226:       env:
227:         - MATRIX_EVAL="CC=gcc-9 && CXX=g++-9"
228:       before_install:
229:         - eval "${MATRIX_EVAL}"
230:         - pip install --user boto3
231: 
232:       script:
233:         - python scripts/amalgamation.py
234:         - mkdir -p build/release
235:         - (cd build/release && cmake -DAMALGAMATION_BUILD=1 -DCMAKE_BUILD_TYPE=Release ../.. && cmake --build .)
236:         - build/release/test/unittest "*"
237: 
238:       after_success:
239:         - (cd src/amalgamation; zip ../../build/duckdb.zip duckdb.*)
240:         - python tools/upload-s3.py src-amalgamation build/duckdb.zip
241:         - python3 scripts/asset-upload.py duckdb_amalgamation.zip=build/duckdb.zip
242: 
243: 
244:     - os: osx
245:       name: Xcode 11.3 (Amalgamation)
246:       if: (type = push AND branch = master) OR type = pull_request OR tag =~ /^v\d+\.\d+\.\d+$/
247: 
248:       osx_image: xcode11.3
249:       script:
250:         - python3 scripts/amalgamation.py
251:         - (mkdir -p build/release && cd build/release && cmake -DAMALGAMATION_BUILD=1 -DCMAKE_BUILD_TYPE=Release ../.. && cmake --build .)
252:         - build/release/test/unittest
253: 
254: 
255:     - os: windows
256:       name: VS 2017 (Amalgamation)
257:       if: (type = push AND branch = master) OR type = pull_request OR tag =~ /^v\d+\.\d+\.\d+$/
258: 
259:       filter_secrets: false
260:       language: c
261:       before_script:
262:         - choco install python3 --version 3.7.3 -y --params "/InstallDir:C:\Python37-x64"
263:       script:
264:         - C:/Python37-x64/python.exe scripts/amalgamation.py
265:         - cmake -DAMALGAMATION_BUILD=1 -DCMAKE_BUILD_TYPE=Release -DCMAKE_GENERATOR_PLATFORM=x64
266:         - cmake --build . --target duckdb --config Release
267:         - cmake --build . --target unittest --config Release
268:         - test/Release/unittest.exe
269: 
270: 
271: # weird platforms: 32 bit linux & windows, arm, solaris, openbsd
272: 
273: 
274:     - os: linux
275:       dist: xenial
276:       name: GCC 9 32 Bit
277:       if: (type = push AND branch = master) OR type = pull_request OR tag =~ /^v\d+\.\d+\.\d+$/
278: 
279:       addons:
280:         apt:
281:           sources:
282:             - ubuntu-toolchain-r-test
283:           packages:
284:             - g++-9 libc6-dev-i386 g++-9-multilib gcc-9-multilib gcc-multilib g++-multilib lib32readline6-dev lib32readline6
285: 
286:       env:
287:         - MATRIX_EVAL="CC=gcc-9 && CXX=g++-9"
288:       before_install:
289:         - eval "${MATRIX_EVAL}"
290:         - pip install --user boto3
291:       script:
292:         - mkdir -p build/release
293:         - (cd build/release && cmake -DFORCE_32_BIT=1 -DCMAKE_BUILD_TYPE=Release ../.. && cmake --build .)
294:         - build/release/test/unittest "*"
295: 
296:       after_success:
297:         - python tools/upload-s3.py lib-linux-i386 build/release/src/libduckdb*.so build/release/src/libduckdb*.a build/release/duckdb_cli
298:         - python3 scripts/asset-upload.py libduckdb-linux-i386.so=build/release/src/libduckdb.so duckdb_cli-linux-i386=build/release/duckdb_cli
299: 
300: 
301:     - os: windows
302:       name: VS 2017 32 Bit
303:       if: (type = push AND branch = master) OR type = pull_request OR tag =~ /^v\d+\.\d+\.\d+$/
304: 
305:       filter_secrets: false
306: 
307:       language: c
308: 
309:       before_script:
310:         - choco install python3 --version 3.7.3 -y --params "/InstallDir:C:\Python37-x64"
311:         - choco install curl -y --force
312: 
313:       script:
314:         - cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_GENERATOR_PLATFORM=Win32
315:         - cmake --build . --target duckdb --config Release
316:         - cmake --build . --target unittest --config Release
317:         - cmake --build . --target shell --config Release
318:         - test/Release/unittest.exe
319:         - C:/Python37-x64/python.exe tools/shell/shell-test.py Release/duckdb_cli.exe
320: 
321:       after_success:
322:         - C:/Python37-x64/python.exe tools/upload-s3.py lib-windows-i386 src/Release/duckdb.dll Release/duckdb_cli.exe
323:         - C:/Python37-x64/python.exe scripts/asset-upload.py libduckdb-windows-i386.dll=src/Release/duckdb.dll duckdb_cli-windows-i386.exe=Release/duckdb_cli.exe duckdb_jdbc-windows-i386.jar=tools/jdbc/duckdb_jdbc.jar
324: 
325: 
326:     - os: linux
327:       dist: xenial
328:       name: GCC 5 (ARM64)
329:       if: (type = push AND branch = master) OR type = pull_request OR tag =~ /^v\d+\.\d+\.\d+$/
330: 
331:       arch: arm64
332: 
333:       script:
334:         - mkdir -p build/debug
335:         - (cd build/debug && cmake -DEXPLICIT_EXCEPTIONS=TRUE -DCMAKE_BUILD_TYPE=Debug ../.. && cmake --build .)
336:         - build/debug/test/unittest -s "[tpch]"
337: 
338: 
339:     - os: linux
340:       dist: bionic
341:       name: Solaris VM
342:       if: (type = push AND branch = master) OR type = pull_request OR tag =~ /^v\d+\.\d+\.\d+$/
343:       sudo: true
344: 
345:       install:
346:         - wget -q https://www.virtualbox.org/download/oracle_vbox_2016.asc -O- | sudo apt-key add -
347:         - echo -e "\ndeb [arch=amd64] https://download.virtualbox.org/virtualbox/debian bionic contrib\n" | sudo tee -a /etc/apt/sources.list
348:         - sudo apt-get update > /dev/null
349:         - sudo apt-get install -y linux-headers-$(uname -r) virtualbox-5.2 rsync
350:         - wget -q "https://homepages.cwi.nl/~hannes/86Cv27lf5353lJR/Solaris10_1-13-2.ova"
351:         - VBoxManage import Solaris10_1-13-2.ova
352:         - rm Solaris10_1-13-2.ova
353:         - VBoxManage modifyvm "Solaris10_1-13" --usb off --usbehci off --usbxhci off --cpus 2 --hwvirtex on --memory 6114
354:         - VBoxManage startvm "Solaris10_1-13" --type headless
355:         - echo -e "-----BEGIN OPENSSH PRIVATE KEY-----\nb3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAABFwAAAAdzc2gtcn\nNhAAAAAwEAAQAAAQEArPN99L/D9jXUwtFjoAzhnzA5a7t/YJiSrcTm+hKSxPp/nklfu1Km\ntDbMBOrXsAqLRcMz5JZoF8G1jebXOO3u2LRB+INFsxqDV76TZjUC1y4SAX17h5UvstT3sn\naPPt+TzwX3PmF8ooN+L8hDIZpvty6m+7b09QRFx4l7+j30MgO+kjwNHUyocn7qokoyH2p4\nfzvtoWePNyL191O9GNg6LmjneG25nN/NBoFYc/Zu+XfDY3gMECNurGHVV3W4ZNpoqjpZWU\nFx4eG0tShBZ+pvuFPy669+H8b5laNEjPGYclInW8unW6T9nuaoQjc/metBwaODgkOsAR0u\nddRxR8nIUwAAA9C2NMXdtjTF3QAAAAdzc2gtcnNhAAABAQCs8330v8P2NdTC0WOgDOGfMD\nlru39gmJKtxOb6EpLE+n+eSV+7Uqa0NswE6tewCotFwzPklmgXwbWN5tc47e7YtEH4g0Wz\nGoNXvpNmNQLXLhIBfXuHlS+y1Peydo8+35PPBfc+YXyig34vyEMhmm+3Lqb7tvT1BEXHiX\nv6PfQyA76SPA0dTKhyfuqiSjIfanh/O+2hZ483IvX3U70Y2DouaOd4bbmc380GgVhz9m75\nd8NjeAwQI26sYdVXdbhk2miqOllZQXHh4bS1KEFn6m+4U/Lrr34fxvmVo0SM8ZhyUidby6\ndbpP2e5qhCNz+Z60HBo4OCQ6wBHS511HFHychTAAAAAwEAAQAAAQEAl3IwnZ0+z96bjG0m\nvAQLngXwgjIRfFieOKPvTpPtCagBEG5X8gSSDcTeKoAqlvDkvBYO3uAGDqeFf9jgJe3T9N\ncD3cW1xvw0fyVWlW1eK2cgRUXIYhV1SzfKHvBKx1eoauRieLGNHhHe8aB/iHFf2hx0BH9V\nSSiQogX2Fk8iAphr9qLuR+M0eMtsZmq9nNpk0iXiohw7b3xNb1QrewoeiXiSI4xANdbkmx\n7R2Jnm132toa+ofPZWbpRptYyzv5TWRhEob4GQSknEvS7NEep3cxnv71d1wQvCfhkMKLXH\nKrIck4X46fLa+65OV8Bq37x91kRagOl4VFBZBT61Y9+DoQAAAIEAltUA8Zx5ETlUOXdGCQ\n+ftbCLZlmlPGGabFdg/EKM+M96Q3sj7L2lIP0Htt5w/HmM3Hz9uLk/d/m20zPq8xkltwCo\nF4R80K5HA38Q26fPRpJzDhch+k7AYuQwjziPSH1uzP3BdQo74KVuyvaTk+9VoeeFslF13P\njflhvUmCyquNkAAACBANtkmGdXwaMHrFKAibQreQuQD9CBRFRDRYNWOP4nPOp7YyCY4xbf\n02kHfFUmf7UqvY36v+jTC4RJ1mJH9KVlqJOB/JLhb6Wrv3xuddcxbwaMwb6dGgsZM+iB7G\nqBlcHlrxnWi6bXXK9WpQWaLNYdE4MKgRvKTSq20glezRWDijznAAAAgQDJzyCedgs5ibpb\nhvtNy5TGXPyX2lI9qoMDV2LSJZhp5TPL/mZqITUrehs0siM9IQ4DqhL4DgKBkYOLI/W6mW\nCXkQVFkGGLovzFUMM/wpK1Ua20k+0XakblI11yK3fjd0XJ0K5FyQ1YzG9XXZ8EuZo/2p2A\n8Y/K54JYuMflOJVftQAAABZoYW5uZXNAZGFrYXIuZGEuY3dpLm5sAQID\n-----END OPENSSH PRIVATE KEY-----\n" > id_rsa_solaris
356:         - chmod 400 id_rsa_solaris
357:         - export SSHFLAGS="-o LogLevel=ERROR -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i id_rsa_solaris"
358:         - export SCMD="ssh $SSHFLAGS -p 2222 root@localhost"
359:         - sleep 60
360:         - while ! $SCMD ls ; do sleep 30 ; done
361:         - $SCMD 'bash -c "echo 'nameserver 8.8.8.8' > /etc/resolv.conf"'
362: 
363:       script:
364:         - python scripts/amalgamation.py > /dev/null
365:         - rsync -a -e "ssh $SSHFLAGS -p 2222" --exclude=.git --exclude=build --exclude=third_party/sqllogictest --exclude=third_party/imdb .  root@localhost:/duckdb
366:         - travis_wait 50 $SCMD 'rm -rf /duckdb/build && mkdir -p /duckdb/build && cd /duckdb/build && export PATH=/opt/csw/bin/:$PATH CXX=g++ CC=gcc  && cmake -DCMAKE_AR=/opt/csw/bin/gar -DCMAKE_BUILD_TYPE=Debug -DAMALGAMATION_BUILD=1 .. && gmake -j2'
367:         - $SCMD /duckdb/build/test/unittest "~[copy]~[file_system]~[.]"
368: 
369: 
370:     # - os: linux
371:     #   dist: bionic
372:     #   name: OpenBSD VM
373:     #   if: (type = push AND branch = master) OR type = pull_request OR tag =~ /^v\d+\.\d+\.\d+$/
374:     #   sudo: true
375: 
376:     #   install:
377:     #     - wget -q https://www.virtualbox.org/download/oracle_vbox_2016.asc -O- | sudo apt-key add -
378:     #     - echo -e "\ndeb [arch=amd64] https://download.virtualbox.org/virtualbox/debian bionic contrib\n" | sudo tee -a /etc/apt/sources.list
379:     #     - sudo apt-get update > /dev/null
380:     #     - sudo apt-get install -y linux-headers-$(uname -r) virtualbox-5.2 rsync
381:     #     - wget -q "https://homepages.cwi.nl/~hannes/86Cv27lf5353lJR/OpenBSD.ova"
382:     #     - VBoxManage import OpenBSD.ova
383:     #     - rm OpenBSD.ova
384:     #     - VBoxManage modifyvm "OpenBSD" --usb off --usbehci off --usbxhci off --cpus 2 --hwvirtex on --memory 6114
385:     #     - VBoxManage startvm "OpenBSD" --type headless
386:     #     - echo -e "-----BEGIN OPENSSH PRIVATE KEY-----\nb3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAABFwAAAAdzc2gtcn\nNhAAAAAwEAAQAAAQEA0I/POwsFY/l5DGvybl1amd9pqzP5ADPQGWupcNuKbSYq+sD4g5Jr\nqZ0vG9sULeYlZZFHzdbUqzdbK9rMZZOUwUwHbxViS2UlhCo0onB9bbzm6kQ2gSBaXxa8SC\nwllEdHq6c/kK50MZKVwqpBrxIJtGN08pNauhMPNMdniQZD5slkKrneTgGYnm30xNtkHStB\nY/btURWNlVd8Qedx8gSEV5628cAeKJAPOn4nrCYvy7uMWBOYqrqZii38uxdrhnZKKKENcA\ndUuFRdmFDK/0d+/0PeUYUacZm3HRU5F21440u51OdBMzBYe9AaQXQGrwKwY+YxlczlVh8g\n9XMWYBzJ3wAAA9B959FqfefRagAAAAdzc2gtcnNhAAABAQDQj887CwVj+XkMa/JuXVqZ32\nmrM/kAM9AZa6lw24ptJir6wPiDkmupnS8b2xQt5iVlkUfN1tSrN1sr2sxlk5TBTAdvFWJL\nZSWEKjSicH1tvObqRDaBIFpfFrxILCWUR0erpz+QrnQxkpXCqkGvEgm0Y3Tyk1q6Ew80x2\neJBkPmyWQqud5OAZiebfTE22QdK0Fj9u1RFY2VV3xB53HyBIRXnrbxwB4okA86fiesJi/L\nu4xYE5iqupmKLfy7F2uGdkoooQ1wB1S4VF2YUMr/R37/Q95RhRpxmbcdFTkXbXjjS7nU50\nEzMFh70BpBdAavArBj5jGVzOVWHyD1cxZgHMnfAAAAAwEAAQAAAQB6iVPfQ81p/MRDKRUq\nBM1bhKkH/qQ4mziUBu5psYN2N6ue4kvgueFpqUFpY2FKymKEd0QxyxvucLqvXIEk2P3YR/\nxCJtU2qPnO2iFMozz+gbNGRsejPEf8gFYlLVLy+KJCVySAtA7upUo6MmAfJUDwbFLkxvDS\nTKptfw70seqpJ/CdUXqrd/YAfwqGO0ZgQC59MDTGS1rXViRbTEMOxbWg9TMmvWb36vJG8i\nvSGimXL0gvhB7himZzK0z9tl8r3gHIHpiKy+67tzXyDdzXxpTJ7krBIwVgMgHwZpSy++c6\n9e6ag9LH217gWSDX4C0tAnHhjc5QqlCBwZVe/n2Kyg3pAAAAgQC1zeKHT3XLt9NfBVjhfq\nS3lMByGNCR90RS1vZe+wYVuChFCs7ztraWgMX9n7m3HvaGj+lqDPBD6mkoaYFCqKVr5GcH\nq1fij2sZeEpymhOUjX/aWGr9kdnxkvpSzYt33OU7hQIv34ViSXuyiEVb/SYXxqmwaYhCbW\noAlXqS57U3ZAAAAIEA58ImmEbbHDbA+mUZ1xugtb2heIQyVm+B1FtWtOY3B7LKgfgP5kaw\nhhVAlOfpxSyn/aNWdokE6JsFU/Vs/eiEXmn253ofF0J2kQuVD8+0m+yUMkbDYbfyc9FPsR\n1OS4cqjM8ET77EvLiqIHXO8aWr4eCOJxjDJLC0xVKOicgk/JUAAACBAOZghEZOuUgLjB1K\nQ0kMX+CTNvyKB44eY24kbp22KI4hsEw4BwyqPvCyRZsx7EBGXdGO0giVc41T6WJxwLVCbW\nmG1AC03KQ/lPXf/lzuwT4/N52hw+s4EmHlcPfoPyRFtbZuUyJqlhL4txWZdI31Ot0jxiQK\nxePoxUuMva2261ujAAAAFWhhbm5lc0BoZXJiZXJ0Mi5sb2NhbAECAwQF\n-----END OPENSSH PRIVATE KEY-----\n" > id_rsa_openbsd
387:     #     - chmod 400 id_rsa_openbsd
388:     #     - export SSHFLAGS="-o LogLevel=ERROR -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i id_rsa_openbsd"
389:     #     - export SCMD="ssh $SSHFLAGS -p 2222 root@localhost"
390:     #     - sleep 60
391:     #     - while ! $SCMD ls ; do sleep 30 ; done
392:     #     - $SCMD pkg_add gmake rsync-3.1.3
393: 
394:     #   script:
395:     #     - python scripts/amalgamation.py > /dev/null
396:     #     - rsync -a -e "ssh $SSHFLAGS -p 2222" --exclude=.git --exclude=build --exclude=third_party/sqllogictest .  root@localhost:/home/duckdb
397:     #     - travis_wait 60 $SCMD 'rm -rf /home/duckdb/build && mkdir -p /home/duckdb/build && cd /home/duckdb/build && cmake -DCMAKE_BUILD_TYPE=Debug -DAMALGAMATION_BUILD=1 .. && gmake -j2'
398:     #     - $SCMD /home/duckdb/build/test/unittest "~[copy]~[sqlitelogic]~[sqlserver]~[parquet]~[.]"
399: 
400: 
401: # APIs: REST, r / python packages
402: 
403: 
404:     - os: linux
405:       dist: xenial
406:       name: REST Server
407:       if: (type = push AND branch = master) OR type = pull_request OR tag =~ /^v\d+\.\d+\.\d+$/
408: 
409:       before_install:
410:         - pip install --user boto3
411: 
412:       script:
413:         - cd tools/rest
414:         - python3 test_the_rest.py
415: 
416:       # after_success:
417:       #   - python tools/upload-s3.py lib-linux-amd64 build/release/src/libduckdb*.so build/release/src/libduckdb*.a
418: 
419: 
420:     - os: linux
421:       dist: xenial
422:       name: JDBC Compliance
423:       if: (type = push AND branch = master) OR type = pull_request OR tag =~ /^v\d+\.\d+\.\d+$/
424: 
425:       env:
426:         - JAVA_HOME='/usr/lib/jvm/java-8-openjdk-amd64'
427: 
428:       before_install:
429:         - sudo apt-get update > /dev/null
430:         - sudo apt-get install -y openjdk-8-jdk openjdk-8-jre
431: 
432:       script:
433:         - mkdir -p build/release
434:         - (cd build/release && cmake -DCMAKE_BUILD_TYPE=Release -DJDBC_DRIVER=1 ../.. && cmake --build .)
435:         - java -cp build/release/tools/jdbc/duckdb_jdbc.jar nl.cwi.da.duckdb.test.TestDuckDBJDBC
436:         - git clone https://github.com/cwida/jdbccts.git
437:         - (cd jdbccts && make DUCKDB_JAR=../build/release/tools/jdbc/duckdb_jdbc.jar test)
438: 
439: 
440:     - os: linux
441:       if: tag != master-builds
442:       name: R Package
443: 
444:       dist: xenial
445:       language: r
446:       r: devel
447: 
448:       before_install:
449:         - pip install --user boto3
450:         - cd tools/rpkg
451:         - R -f dependencies.R
452: 
453:       install:
454:         - ./configure
455:         - R CMD build .
456:         - R CMD INSTALL duckdb_*.tar.gz
457: 
458:       script:
459:         - (cd tests && R -f testthat.R)
460:         - R -f ../../examples/R/dbi.R
461:         - R -f ../../examples/R/dplyr.R
462: 
463:       after_success:
464:         - R -e "tools::write_PACKAGES(dir = '.', type = 'source')"
465:         - python ../upload-s3.py rstats/src/contrib duckdb_*.tar.gz PACKAGES*
466:         - python ../upload-s3.py rstats duckdb_*.tar.gz
467:         - python3 ../../scripts/asset-upload.py duckdb_r_src.tar.gz=duckdb_*.tar.gz
468: 
469: 
470:     - os: osx
471:       osx_image: xcode11.3
472:       name: R Package
473:       if: (type = push AND branch = master) OR type = pull_request OR tag =~ /^v\d+\.\d+\.\d+$/
474: 
475:       language: r
476:       #r: devel
477: 
478:       before_install:
479:         - curl https://bootstrap.pypa.io/get-pip.py -o /tmp/get-pip.py
480:         - python3 /tmp/get-pip.py
481:         - python3 -m pip install --user boto3
482:         - cd tools/rpkg
483:         - R -f dependencies.R
484: 
485:       install:
486:         - ./configure
487:         - R CMD build .
488:         - R CMD INSTALL --build duckdb_*.tar.gz
489:         - R CMD INSTALL duckdb_*.tgz
490: 
491:       script:
492:         - (cd tests && R -f testthat.R)
493: 
494:       after_success:
495:         - R -e "tools::write_PACKAGES(dir = '.', type = 'mac.binary')"
496:         - python3 ../upload-s3.py rstats/bin/macosx/el-capitan/contrib/3.6 duckdb_*.tgz PACKAGES*
497:         - python3 ../upload-s3.py rstats duckdb_*.tgz
498:         - python3 ../../scripts/asset-upload.py duckdb_r_osx.tgz=duckdb_*.tgz
499: 
500: 
501:     - os: windows
502:       name: R Package
503:       filter_secrets: false
504:       if: (type = push AND branch = master) OR type = pull_request OR tag =~ /^v\d+\.\d+\.\d+$/
505: 
506:       language: cpp
507: 
508:       before_script:
509:         - choco install r.project -y --version 3.6.0
510:         - wget "https://github.com/hannesmuehleisen/choco-rtools/raw/master/rtools.3.5.0.nupkg"
511:         - choco install rtools -s rtools.3.5.0.nupkg -f -y
512:         - choco install python3 --version 3.7.3 -y --params "/InstallDir:C:\Python37-x64"
513:         - choco install curl -y --force
514: 
515:       script:
516:         - export "PATH=/c/Rtools/bin:$PATH"
517:         - cd tools/rpkg
518:         - C:/Program\ Files/R/R-3.6.0/bin/R.exe -f dependencies.R
519:         - sh configure
520:         - C:/Program\ Files/R/R-3.6.0/bin/R.exe CMD build .
521:         - C:/Program\ Files/R/R-3.6.0/bin/R.exe CMD INSTALL --build --no-multiarch duckdb_*.tar.gz
522:         - C:/Program\ Files/R/R-3.6.0/bin/R.exe CMD INSTALL duckdb_*.zip
523:         - (cd tests; C:/Program\ Files/R/R-3.6.0/bin/R.exe -f testthat.R)
524: 
525:       after_success:
526:         - C:/Python37-x64/python.exe ../upload-s3.py rstats duckdb_*.zip
527:         - C:/Program\ Files/R/R-3.6.0/bin/R.exe -e "tools::write_PACKAGES(dir = '.', type = 'win.binary')"
528:         - C:/Python37-x64/python.exe ../upload-s3.py rstats/bin/windows/contrib/3.6 duckdb_*.zip PACKAGES*
529:         - C:/Python37-x64/python.exe ../../scripts/asset-upload.py duckdb_r_windows.zip=duckdb_*.zip
530: 
531: 
532:     - os: linux
533:       if: tag != master-builds
534:       name: Python 3 Package
535:       dist: xenial
536:       language: python
537:       cache: pip
538:       env:
539:         - CIBW_BUILD='cp37-*'
540:       python: 3.7
541: 
542:       script:
543:         - pip install cibuildwheel==0.10.2 boto3
544:         - cd tools/pythonpkg
545:         - python setup.py sdist
546:         - mkdir duckdb_tarball && tar xvf dist/duckdb-*.tar.gz --strip-components=1 -C duckdb_tarball
547:         - cibuildwheel --output-dir wheelhouse duckdb_tarball
548:         - cd ../..
549:       after_success:
550:         - python tools/upload-s3.py python tools/pythonpkg/wheelhouse/*.whl tools/pythonpkg/dist/duckdb-*.tar.gz
551:        # - python3 scripts/asset-upload.py duckdb_python_src.tar.gz=tools/pythonpkg/dist/duckdb-*.tar.gz tools/pythonpkg/wheelhouse/*.whl
552: 
553: 
554:     - os: linux
555:       name: Python 2 Package
556:       if: (type = push AND branch = master) OR type = pull_request OR tag =~ /^v\d+\.\d+\.\d+$/
557: 
558:       dist: xenial
559:       language: python
560:       cache: pip
561:       env:
562:         - CIBW_BUILD='cp27-*'
563:       python: 2.7
564: 
565:       script:
566:         - pip install boto3 numpy pandas pytest
567:         - cd tools/pythonpkg
568:         - python setup.py install
569:         - python -m pytest tests
570:         - python setup.py sdist
571:         - mkdir duckdb_tarball && tar xvf dist/duckdb-*.tar.gz --strip-components=1 -C duckdb_tarball
572: 
573: 
574:     - os: osx
575:       name: Python Package
576:       if: (type = push AND branch = master) OR type = pull_request OR tag =~ /^v\d+\.\d+\.\d+$/
577: 
578:       language: generic
579:       osx_image: xcode11.3
580: 
581:       before_install:
582:         - curl https://bootstrap.pypa.io/get-pip.py -o /tmp/get-pip.py
583:         - python3 /tmp/get-pip.py
584:         - python3 -m pip install cibuildwheel==0.10.2 boto3
585: 
586:       script:
587:         - cd tools/pythonpkg
588:         - python3 setup.py sdist
589:         - mkdir duckdb_tarball && tar xvf dist/duckdb-*.tar.gz --strip-components=1 -C duckdb_tarball
590:         - cibuildwheel --output-dir wheelhouse duckdb_tarball
591:         - cd ../..
592: 
593:       after_success:
594:         - python3 tools/upload-s3.py python tools/pythonpkg/wheelhouse/*.whl
595:        # - python3 scripts/asset-upload.py tools/pythonpkg/wheelhouse/*.whl
596: 
597: 
598:     - os: windows
599:       name: Python Package
600:       if: (type = push AND branch = master) OR type = pull_request OR tag =~ /^v\d+\.\d+\.\d+$/
601: 
602:       language: cpp
603:       filter_secrets: false
604:       # no python 27 because no C++11 support in its windows toolchain
605:       env:
606:         - CIBW_BUILD='cp37-*'
607: 
608:       before_install:
609:         - choco install python3 --version 3.7.3 --sidebyside -y --forcex86 --force --params "/InstallDir:C:\Python37"
610:         - choco install python3 --version 3.7.3 --sidebyside -y --force --params "/InstallDir:C:\Python37-x64"
611:         - choco install python3 --version 3.6.8 --sidebyside -y --force --params "/InstallDir:C:\Python36-x64"
612:         - choco install python3 --version 3.6.8 --sidebyside -y --forcex86 --force --params "/InstallDir:C:\Python36"
613:         - choco install python2 --version 2.7.16 --sidebyside -y --forcex86 --force --params "/InstallDir:C:\Python27"
614:         - choco install python2 --version 2.7.16 --sidebyside -y --force --params "/InstallDir:C:\Python27-x64"
615:         - choco install curl -y --force
616:         - C:/Python37-x64/python.exe -m pip install --upgrade pip
617:         - C:/Python37-x64/python.exe -m pip install "cibuildwheel==0.10.2"
618:         - C:/Python37-x64/python.exe -m pip install "numpy>=1.16" "pandas>=0.24" "pytest>=4.3" "pybind11>=2.4"
619: 
620:       script:
621:         - cd tools/pythonpkg
622:         - C:/Python37-x64/python.exe setup.py sdist
623:         - mkdir duckdb_tarball && tar xvf dist/duckdb-*.tar.gz --strip-components=1 -C duckdb_tarball
624:         - C:/Python37-x64/python.exe -m cibuildwheel --platform windows --output-dir wheelhouse duckdb_tarball
625:         - cd ../..
626: 
627:       after_success:
628:         - C:/Python37-x64/python.exe tools/upload-s3.py python tools/pythonpkg/wheelhouse/*.whl
629:         # - C:/Python37-x64/python.exe scripts/asset-upload.py tools/pythonpkg/wheelhouse/*.whl
630: 
[end of .travis.yml]
[start of Makefile]
1: .PHONY: all opt unit clean debug release test unittest allunit docs doxygen format sqlite imdb
2: 
3: all: release
4: opt: release
5: unit: unittest
6: imdb: third_party/imdb/data
7: 
8: GENERATOR=
9: FORCE_COLOR=
10: WARNINGS_AS_ERRORS=
11: DISABLE_UNITY_FLAG=
12: ifeq ($(GEN),ninja)
13: 	GENERATOR=-G "Ninja"
14: 	FORCE_COLOR=-DFORCE_COLORED_OUTPUT=1
15: endif
16: ifeq (${TREAT_WARNINGS_AS_ERRORS}, 1)
17: 	WARNINGS_AS_ERRORS=-DTREAT_WARNINGS_AS_ERRORS=1
18: endif
19: ifeq (${DISABLE_UNITY}, 1)
20: 	DISABLE_UNITY_FLAG=-DDISABLE_UNITY=1
21: endif
22: 
23: clean:
24: 	rm -rf build
25: 
26: debug:
27: 	mkdir -p build/debug && \
28: 	cd build/debug && \
29: 	cmake $(GENERATOR) $(FORCE_COLOR) ${WARNINGS_AS_ERRORS} ${DISABLE_UNITY_FLAG} -DCMAKE_BUILD_TYPE=Debug ../.. && \
30: 	cmake --build .
31: 
32: release:
33: 	mkdir -p build/release && \
34: 	cd build/release && \
35: 	cmake $(GENERATOR) $(FORCE_COLOR) ${WARNINGS_AS_ERRORS} ${DISABLE_UNITY_FLAG} -DCMAKE_BUILD_TYPE=Release ../.. && \
36: 	cmake --build .
37: 
38: unittest: debug
39: 	build/debug/test/unittest
40: 	build/debug/tools/sqlite3_api_wrapper/test_sqlite3_api_wrapper
41: 
42: allunit: release # uses release build because otherwise allunit takes forever
43: 	build/release/test/unittest "*"
44: 
45: docs:
46: 	mkdir -p build/docs && \
47: 	doxygen Doxyfile
48: 
49: doxygen: docs
50: 	open build/docs/html/index.html
51: 
52: amalgamation:
53: 	mkdir -p build/amalgamation && \
54: 	python scripts/amalgamation.py && \
55: 	cd build/amalgamation && \
56: 	cmake $(GENERATOR) $(FORCE_COLOR) -DAMALGAMATION_BUILD=1 -DCMAKE_BUILD_TYPE=Release ../.. && \
57: 	cmake --build .
58: 
59: amaldebug:
60: 	mkdir -p build/amaldebug && \
61: 	python scripts/amalgamation.py && \
62: 	cd build/amaldebug && \
63: 	cmake $(GENERATOR) $(FORCE_COLOR) -DAMALGAMATION_BUILD=1 -DCMAKE_BUILD_TYPE=Debug ../.. && \
64: 	cmake --build .
65: 
66: jdbc:
67: 	mkdir -p build/jdbc && \
68: 	cd build/jdbc && \
69: 	cmake $(GENERATOR) $(FORCE_COLOR) -DJDBC_DRIVER=1 -DCMAKE_BUILD_TYPE=Release ../.. && \
70: 	cmake --build .
71: 
72: jdbcdebug:
73: 	mkdir -p build/jdbcdebug && \
74: 	cd build/jdbcdebug && \
75: 	cmake $(GENERATOR) $(FORCE_COLOR) -DJDBC_DRIVER=1 -DENABLE_SANITIZER=FALSE -DCMAKE_BUILD_TYPE=Debug ../.. && \
76: 	cmake --build .
77: 
78: test_compile: # test compilation of individual cpp files
79: 	python scripts/amalgamation.py --compile
80: 
81: format:
82: 	python3 scripts/format.py
83: 
84: third_party/sqllogictest:
85: 	git clone --depth=1 https://github.com/cwida/sqllogictest.git third_party/sqllogictest
86: 
87: third_party/imdb/data:
88: 	wget -i "http://download.duckdb.org/imdb/list.txt" -P third_party/imdb/data
89: 
90: sqlite: release | third_party/sqllogictest
91: 	git --git-dir third_party/sqllogictest/.git pull
92: 	./build/release/test/unittest "[sqlitelogic]"
93: 
94: sqlsmith: debug
95: 	./build/debug/third_party/sqlsmith/sqlsmith --duckdb=:memory:
[end of Makefile]
[start of src/CMakeLists.txt]
1: add_definitions(-DDUCKDB)
2: 
3: if(NOT MSVC)
4:   set(
5:     CMAKE_CXX_FLAGS_DEBUG
6:     "${CMAKE_CXX_FLAGS_DEBUG} -Wextra -Wno-unused-parameter -Wno-redundant-move -Wnarrowing"
7:     )
8: endif()
9: 
10: if(AMALGAMATION_BUILD)
11: 
12:   if(WIN32)
13:     add_definitions(/bigobj)
14:   endif()
15: 
16:   add_library(duckdb SHARED "${CMAKE_SOURCE_DIR}/src/amalgamation/duckdb.cpp")
17:   add_library(duckdb_static STATIC
18:               "${CMAKE_SOURCE_DIR}/src/amalgamation/duckdb.cpp")
19: 
20:   install(FILES "${CMAKE_SOURCE_DIR}/src/amalgamation/duckdb.hpp"
21:           DESTINATION "${INSTALL_INCLUDE_DIR}")
22: 
23: else()
24: 
25:   add_subdirectory(optimizer)
26:   add_subdirectory(planner)
27:   add_subdirectory(parser)
28:   add_subdirectory(function)
29:   add_subdirectory(catalog)
30:   add_subdirectory(common)
31:   add_subdirectory(execution)
32:   add_subdirectory(main)
33:   add_subdirectory(storage)
34:   add_subdirectory(transaction)
35: 
36:   set(DUCKDB_LINK_LIBS
37:       fmt
38:       pg_query
39:       hyperloglog
40:       re2
41:       miniz
42:       utf8proc
43:       Threads::Threads)
44: 
45:   add_library(duckdb SHARED ${ALL_OBJECT_FILES})
46:   target_link_libraries(duckdb ${DUCKDB_LINK_LIBS})
47: 
48:   add_library(duckdb_static STATIC ${ALL_OBJECT_FILES})
49:   target_link_libraries(duckdb_static ${DUCKDB_LINK_LIBS})
50: 
51:   target_include_directories(
52:     duckdb
53:     PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
54:            $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>)
55: 
56:   target_include_directories(
57:     duckdb_static
58:     PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
59:            $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>)
60: 
61:   install(DIRECTORY "${CMAKE_SOURCE_DIR}/src/include/duckdb"
62:           DESTINATION "${INSTALL_INCLUDE_DIR}"
63:           FILES_MATCHING
64:           PATTERN "*.hpp")
65:   install(FILES "${CMAKE_SOURCE_DIR}/src/include/duckdb.hpp"
66:                 "${CMAKE_SOURCE_DIR}/src/include/duckdb.h"
67:           DESTINATION "${INSTALL_INCLUDE_DIR}")
68: 
69: endif()
70: 
71: install(TARGETS duckdb duckdb_static
72:         EXPORT "${DUCKDB_EXPORT_SET}"
73:         LIBRARY DESTINATION "${INSTALL_LIB_DIR}"
74:         ARCHIVE DESTINATION "${INSTALL_LIB_DIR}")
[end of src/CMakeLists.txt]
</code>
Here is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.
<patch>
--- a/file.cpp
+++ b/file.cpp
@@ -3,35 +3,44 @@
 #include <cstdlib>
 
 int euclidean(int a, int b) {
-    while (b) {
-        int temp = b;
-        b = a % b;
-        a = temp;
+    if (b == 0) {
+        return a;
     }
-    return a;
+    return euclidean(b, a % b);
 }
 
 std::vector<std::pair<int, int>> bresenham(int x0, int y0, int x1, int y1) {
     std::vector<std::pair<int, int>> points;
     int dx = abs(x1 - x0);
     int dy = abs(y1 - y0);
+    int x = x0, y = y0;
     int sx = (x0 < x1) ? 1 : -1;
     int sy = (y0 < y1) ? 1 : -1;
-    int err = dx - dy;
 
-    while (true) {
-        points.emplace_back(x0, y0);
-        if (x0 == x1 && y0 == y1) break;
-        int e2 = 2 * err;
-        if (e2 > -dy) {
+    if (dx > dy) {
+        int err = dx / 2;
+        while (x != x1) {
+            points.emplace_back(x, y);
             err -= dy;
-            x0 += sx;
+            if (err < 0) {
+                y += sy;
+                err += dx;
+            }
+            x += sx;
         }
-        if (e2 < dx) {
-            err += dx;
-            y0 += sy;
+    } else {
+        int err = dy / 2;
+        while (y != y1) {
+            points.emplace_back(x, y);
+            err -= dx;
+            if (err < 0) {
+                x += sx;
+                err += dy;
+            }
+            y += sy;
         }
     }
 
+    points.emplace_back(x, y);
     return points;
 }

</patch>

I need you to solve the provided issue by generating a single patch file that I can apply directly to this repository using git apply.
Please respond with a single patch file in the format shown above.
Make sure to only include the patch file contents so that the contents of your output can be copied into a patch file and applied directly

Respond below: