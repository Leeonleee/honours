You will be provided with a partial code base and an issue statement explaining a problem to resolve.
In your output, give nothing but the code (no markdown) so that your output can be copy pasted and run immediately with no changes

<issue>
R segfaults on "DROP DEFAULT"
#### What happens?
R segfaults / memory not mapped.

#### To Reproduce
```r
df = data.frame(id = 1:2, x = runif(2))
path = tempfile()
con = DBI::dbConnect(duckdb::duckdb(), dbdir = path, read_only = FALSE)
DBI::dbWriteTable(con, "data", df, row.names = FALSE)
DBI::dbExecute(con, 'ALTER TABLE data ALTER COLUMN id DROP DEFAULT')
```
#### Environment
```
R version 4.1.2 (2021-11-01)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Arch Linux

Matrix products: default
BLAS/LAPACK: /usr/lib/libopenblas_haswellp-r0.3.18.so

locale:
 [1] LC_CTYPE=de_DE.utf8       LC_NUMERIC=C
 [3] LC_TIME=en_US.UTF-8       LC_COLLATE=en_US.UTF-8
 [5] LC_MONETARY=en_US.UTF-8   LC_MESSAGES=de_DE.utf8
 [7] LC_PAPER=de_DE.utf8       LC_NAME=C
 [9] LC_ADDRESS=C              LC_TELEPHONE=C
[11] LC_MEASUREMENT=de_DE.utf8 LC_IDENTIFICATION=C

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base

other attached packages:
[1] nvimcom_0.9-122   data.table_1.14.2

loaded via a namespace (and not attached):
[1] compiler_4.1.2 duckdb_0.3.1   DBI_1.1.1      tools_4.1.2    parallel_4.1.2
[6] rlang_0.4.12
```
R segfaults on "DROP DEFAULT"
#### What happens?
R segfaults / memory not mapped.

#### To Reproduce
```r
df = data.frame(id = 1:2, x = runif(2))
path = tempfile()
con = DBI::dbConnect(duckdb::duckdb(), dbdir = path, read_only = FALSE)
DBI::dbWriteTable(con, "data", df, row.names = FALSE)
DBI::dbExecute(con, 'ALTER TABLE data ALTER COLUMN id DROP DEFAULT')
```
#### Environment
```
R version 4.1.2 (2021-11-01)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Arch Linux

Matrix products: default
BLAS/LAPACK: /usr/lib/libopenblas_haswellp-r0.3.18.so

locale:
 [1] LC_CTYPE=de_DE.utf8       LC_NUMERIC=C
 [3] LC_TIME=en_US.UTF-8       LC_COLLATE=en_US.UTF-8
 [5] LC_MONETARY=en_US.UTF-8   LC_MESSAGES=de_DE.utf8
 [7] LC_PAPER=de_DE.utf8       LC_NAME=C
 [9] LC_ADDRESS=C              LC_TELEPHONE=C
[11] LC_MEASUREMENT=de_DE.utf8 LC_IDENTIFICATION=C

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base

other attached packages:
[1] nvimcom_0.9-122   data.table_1.14.2

loaded via a namespace (and not attached):
[1] compiler_4.1.2 duckdb_0.3.1   DBI_1.1.1      tools_4.1.2    parallel_4.1.2
[6] rlang_0.4.12
```

</issue>
<code>
[start of README.md]
1: <div align="center">
2:   <img src="https://duckdb.org/images/DuckDB_Logo_dl.png" height="50">
3: </div>
4: <p>&nbsp;</p>
5: 
6: <p align="center">
7:   <a href="https://github.com/duckdb/duckdb/actions">
8:     <img src="https://github.com/cwida/duckdb/workflows/.github/workflows/main.yml/badge.svg?branch=master" alt=".github/workflows/main.yml">
9:   </a>
10:   <a href="https://www.codefactor.io/repository/github/cwida/duckdb">
11:     <img src="https://www.codefactor.io/repository/github/cwida/duckdb/badge" alt="CodeFactor"/>
12:   </a>
13:   <a href="https://app.codecov.io/gh/duckdb/duckdb">
14:     <img src="https://codecov.io/gh/duckdb/duckdb/branch/master/graph/badge.svg?token=FaxjcfFghN" alt="codecov"/>
15:   </a>
16: </p>
17: 
18: ## DuckDB
19: DuckDB is a high-performance analytical database system. It is designed to be fast, reliable and easy to use. DuckDB provides a rich SQL dialect, with support far beyond basic SQL. DuckDB supports arbitrary and nested correlated subqueries, window functions, collations, complex types (arrays, structs), and more. For more information on the goals of DuckDB, please refer to [the Why DuckDB page on our website](https://duckdb.org/docs/why_duckdb.html).
20: 
21: ## Installation
22: If you want to install and use DuckDB, please see [our website](https://www.duckdb.org) for installation and usage instructions.
23: 
24: ## Data Import
25: For CSV files and Parquet files, data import is as simple as referencing the file in the FROM clause:
26: 
27: ```sql
28: SELECT * FROM 'myfile.csv';
29: SELECT * FROM 'myfile.parquet';
30: ```
31: 
32: Refer to our [Data Import](https://duckdb.org/docs/data/overview) section for more information.
33: 
34: ## SQL Reference
35: The [website](https://duckdb.org/docs/sql/introduction) contains a reference of functions and SQL constructs available in DuckDB.
36: 
37: ## Development
38: For development, DuckDB requires [CMake](https://cmake.org), Python3 and a `C++11` compliant compiler. Run `make` in the root directory to compile the sources. For development, use `make debug` to build a non-optimized debug version. You should run `make unit` and `make allunit` to verify that your version works properly after making changes. To test performance, you can run several standard benchmarks from the root directory by executing `./build/release/benchmark/benchmark_runner`.
39: 
40: Please also refer to our [Contribution Guide](CONTRIBUTING.md).
41: 
42: 
[end of README.md]
[start of src/parser/parsed_data/alter_table_info.cpp]
1: #include "duckdb/parser/parsed_data/alter_table_info.hpp"
2: #include "duckdb/common/serializer.hpp"
3: 
4: namespace duckdb {
5: 
6: void AlterInfo::Serialize(Serializer &serializer) {
7: 	serializer.Write<AlterType>(type);
8: }
9: 
10: unique_ptr<AlterInfo> AlterInfo::Deserialize(Deserializer &source) {
11: 	auto type = source.Read<AlterType>();
12: 	switch (type) {
13: 	case AlterType::ALTER_TABLE:
14: 		return AlterTableInfo::Deserialize(source);
15: 	case AlterType::ALTER_VIEW:
16: 		return AlterViewInfo::Deserialize(source);
17: 	default:
18: 		throw SerializationException("Unknown alter type for deserialization!");
19: 	}
20: }
21: 
22: void AlterTableInfo::Serialize(Serializer &serializer) {
23: 	AlterInfo::Serialize(serializer);
24: 	serializer.Write<AlterTableType>(alter_table_type);
25: 	serializer.WriteString(schema);
26: 	serializer.WriteString(name);
27: }
28: 
29: unique_ptr<AlterInfo> AlterTableInfo::Deserialize(Deserializer &source) {
30: 	auto type = source.Read<AlterTableType>();
31: 	auto schema = source.Read<string>();
32: 	auto table = source.Read<string>();
33: 	unique_ptr<AlterTableInfo> info;
34: 	switch (type) {
35: 	case AlterTableType::RENAME_COLUMN:
36: 		return RenameColumnInfo::Deserialize(source, schema, table);
37: 	case AlterTableType::RENAME_TABLE:
38: 		return RenameTableInfo::Deserialize(source, schema, table);
39: 	case AlterTableType::ADD_COLUMN:
40: 		return AddColumnInfo::Deserialize(source, schema, table);
41: 	case AlterTableType::REMOVE_COLUMN:
42: 		return RemoveColumnInfo::Deserialize(source, schema, table);
43: 	case AlterTableType::ALTER_COLUMN_TYPE:
44: 		return ChangeColumnTypeInfo::Deserialize(source, schema, table);
45: 	case AlterTableType::SET_DEFAULT:
46: 		return SetDefaultInfo::Deserialize(source, schema, table);
47: 	default:
48: 		throw SerializationException("Unknown alter table type for deserialization!");
49: 	}
50: }
51: 
52: //===--------------------------------------------------------------------===//
53: // RenameColumnInfo
54: //===--------------------------------------------------------------------===//
55: unique_ptr<AlterInfo> RenameColumnInfo::Copy() const {
56: 	return make_unique_base<AlterInfo, RenameColumnInfo>(schema, name, old_name, new_name);
57: }
58: 
59: void RenameColumnInfo::Serialize(Serializer &serializer) {
60: 	AlterTableInfo::Serialize(serializer);
61: 	serializer.WriteString(old_name);
62: 	serializer.WriteString(new_name);
63: }
64: 
65: unique_ptr<AlterInfo> RenameColumnInfo::Deserialize(Deserializer &source, string schema, string table) {
66: 	auto old_name = source.Read<string>();
67: 	auto new_name = source.Read<string>();
68: 	return make_unique<RenameColumnInfo>(move(schema), move(table), old_name, new_name);
69: }
70: 
71: //===--------------------------------------------------------------------===//
72: // RenameTableInfo
73: //===--------------------------------------------------------------------===//
74: unique_ptr<AlterInfo> RenameTableInfo::Copy() const {
75: 	return make_unique_base<AlterInfo, RenameTableInfo>(schema, name, new_table_name);
76: }
77: 
78: void RenameTableInfo::Serialize(Serializer &serializer) {
79: 	AlterTableInfo::Serialize(serializer);
80: 	serializer.WriteString(new_table_name);
81: }
82: 
83: unique_ptr<AlterInfo> RenameTableInfo::Deserialize(Deserializer &source, string schema, string table) {
84: 	auto new_name = source.Read<string>();
85: 	return make_unique<RenameTableInfo>(move(schema), move(table), new_name);
86: }
87: 
88: //===--------------------------------------------------------------------===//
89: // AddColumnInfo
90: //===--------------------------------------------------------------------===//
91: unique_ptr<AlterInfo> AddColumnInfo::Copy() const {
92: 	return make_unique_base<AlterInfo, AddColumnInfo>(schema, name, new_column.Copy());
93: }
94: 
95: void AddColumnInfo::Serialize(Serializer &serializer) {
96: 	AlterTableInfo::Serialize(serializer);
97: 	new_column.Serialize(serializer);
98: }
99: 
100: unique_ptr<AlterInfo> AddColumnInfo::Deserialize(Deserializer &source, string schema, string table) {
101: 	auto new_column = ColumnDefinition::Deserialize(source);
102: 	return make_unique<AddColumnInfo>(move(schema), move(table), move(new_column));
103: }
104: 
105: //===--------------------------------------------------------------------===//
106: // RemoveColumnInfo
107: //===--------------------------------------------------------------------===//
108: unique_ptr<AlterInfo> RemoveColumnInfo::Copy() const {
109: 	return make_unique_base<AlterInfo, RemoveColumnInfo>(schema, name, removed_column, if_exists);
110: }
111: 
112: void RemoveColumnInfo::Serialize(Serializer &serializer) {
113: 	AlterTableInfo::Serialize(serializer);
114: 	serializer.WriteString(removed_column);
115: 	serializer.Write<bool>(if_exists);
116: }
117: 
118: unique_ptr<AlterInfo> RemoveColumnInfo::Deserialize(Deserializer &source, string schema, string table) {
119: 	auto new_name = source.Read<string>();
120: 	auto if_exists = source.Read<bool>();
121: 	return make_unique<RemoveColumnInfo>(move(schema), move(table), new_name, if_exists);
122: }
123: 
124: //===--------------------------------------------------------------------===//
125: // ChangeColumnTypeInfo
126: //===--------------------------------------------------------------------===//
127: unique_ptr<AlterInfo> ChangeColumnTypeInfo::Copy() const {
128: 	return make_unique_base<AlterInfo, ChangeColumnTypeInfo>(schema, name, column_name, target_type,
129: 	                                                         expression->Copy());
130: }
131: 
132: void ChangeColumnTypeInfo::Serialize(Serializer &serializer) {
133: 	AlterTableInfo::Serialize(serializer);
134: 	serializer.WriteString(column_name);
135: 	target_type.Serialize(serializer);
136: 	serializer.WriteOptional(expression);
137: }
138: 
139: unique_ptr<AlterInfo> ChangeColumnTypeInfo::Deserialize(Deserializer &source, string schema, string table) {
140: 	auto column_name = source.Read<string>();
141: 	auto target_type = LogicalType::Deserialize(source);
142: 	auto expression = source.ReadOptional<ParsedExpression>();
143: 	return make_unique<ChangeColumnTypeInfo>(move(schema), move(table), move(column_name), move(target_type),
144: 	                                         move(expression));
145: }
146: 
147: //===--------------------------------------------------------------------===//
148: // SetDefaultInfo
149: //===--------------------------------------------------------------------===//
150: unique_ptr<AlterInfo> SetDefaultInfo::Copy() const {
151: 	return make_unique_base<AlterInfo, SetDefaultInfo>(schema, name, column_name, expression->Copy());
152: }
153: 
154: void SetDefaultInfo::Serialize(Serializer &serializer) {
155: 	AlterTableInfo::Serialize(serializer);
156: 	serializer.WriteString(column_name);
157: 	serializer.WriteOptional(expression);
158: }
159: 
160: unique_ptr<AlterInfo> SetDefaultInfo::Deserialize(Deserializer &source, string schema, string table) {
161: 	auto column_name = source.Read<string>();
162: 	auto new_default = source.ReadOptional<ParsedExpression>();
163: 	return make_unique<SetDefaultInfo>(move(schema), move(table), move(column_name), move(new_default));
164: }
165: 
166: //===--------------------------------------------------------------------===//
167: // Alter View
168: //===--------------------------------------------------------------------===//
169: void AlterViewInfo::Serialize(Serializer &serializer) {
170: 	AlterInfo::Serialize(serializer);
171: 	serializer.Write<AlterViewType>(alter_view_type);
172: 	serializer.WriteString(schema);
173: 	serializer.WriteString(name);
174: }
175: 
176: unique_ptr<AlterInfo> AlterViewInfo::Deserialize(Deserializer &source) {
177: 	auto type = source.Read<AlterViewType>();
178: 	auto schema = source.Read<string>();
179: 	auto view = source.Read<string>();
180: 	unique_ptr<AlterViewInfo> info;
181: 	switch (type) {
182: 	case AlterViewType::RENAME_VIEW:
183: 		return RenameViewInfo::Deserialize(source, schema, view);
184: 	default:
185: 		throw SerializationException("Unknown alter view type for deserialization!");
186: 	}
187: }
188: 
189: //===--------------------------------------------------------------------===//
190: // RenameViewInfo
191: //===--------------------------------------------------------------------===//
192: unique_ptr<AlterInfo> RenameViewInfo::Copy() const {
193: 	return make_unique_base<AlterInfo, RenameViewInfo>(schema, name, new_view_name);
194: }
195: 
196: void RenameViewInfo::Serialize(Serializer &serializer) {
197: 	AlterViewInfo::Serialize(serializer);
198: 	serializer.WriteString(new_view_name);
199: }
200: 
201: unique_ptr<AlterInfo> RenameViewInfo::Deserialize(Deserializer &source, string schema, string view) {
202: 	auto new_name = source.Read<string>();
203: 	return make_unique<RenameViewInfo>(move(schema), move(view), new_name);
204: }
205: 
206: } // namespace duckdb
[end of src/parser/parsed_data/alter_table_info.cpp]
</code>
Here is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.
<patch>
--- a/file.cpp
+++ b/file.cpp
@@ -3,35 +3,44 @@
 #include <cstdlib>
 
 int euclidean(int a, int b) {
-    while (b) {
-        int temp = b;
-        b = a % b;
-        a = temp;
+    if (b == 0) {
+        return a;
     }
-    return a;
+    return euclidean(b, a % b);
 }
 
 std::vector<std::pair<int, int>> bresenham(int x0, int y0, int x1, int y1) {
     std::vector<std::pair<int, int>> points;
     int dx = abs(x1 - x0);
     int dy = abs(y1 - y0);
+    int x = x0, y = y0;
     int sx = (x0 < x1) ? 1 : -1;
     int sy = (y0 < y1) ? 1 : -1;
-    int err = dx - dy;
 
-    while (true) {
-        points.emplace_back(x0, y0);
-        if (x0 == x1 && y0 == y1) break;
-        int e2 = 2 * err;
-        if (e2 > -dy) {
+    if (dx > dy) {
+        int err = dx / 2;
+        while (x != x1) {
+            points.emplace_back(x, y);
             err -= dy;
-            x0 += sx;
+            if (err < 0) {
+                y += sy;
+                err += dx;
+            }
+            x += sx;
         }
-        if (e2 < dx) {
-            err += dx;
-            y0 += sy;
+    } else {
+        int err = dy / 2;
+        while (y != y1) {
+            points.emplace_back(x, y);
+            err -= dx;
+            if (err < 0) {
+                x += sx;
+                err += dy;
+            }
+            y += sy;
         }
     }
 
+    points.emplace_back(x, y);
     return points;
 }

</patch>

I need you to solve the provided issue by generating a single patch file that I can apply directly to this repository using git apply.
Please respond with a single patch file in the format shown above.
Make sure to only include the patch file contents so that the contents of your output can be copied into a patch file and applied directly

Respond below: