{
  "repo": "duckdb/duckdb",
  "pull_number": 4256,
  "instance_id": "duckdb__duckdb-4256",
  "issue_numbers": [
    "4252"
  ],
  "base_commit": "daf0e7b95a3e3cbb6837b3ad2512859b71ae32e4",
  "patch": "diff --git a/src/optimizer/rule/comparison_simplification.cpp b/src/optimizer/rule/comparison_simplification.cpp\nindex f40e45d075ba..e930f9d9eade 100644\n--- a/src/optimizer/rule/comparison_simplification.cpp\n+++ b/src/optimizer/rule/comparison_simplification.cpp\n@@ -41,7 +41,7 @@ unique_ptr<Expression> ComparisonSimplificationRule::Apply(LogicalOperator &op,\n \t\t    !BoundCastExpression::CastIsInvertible(cast_expression->return_type, target_type)) {\n \t\t\treturn nullptr;\n \t\t}\n-\t\tauto new_constant = constant_value.TryCastAs(target_type);\n+\t\tauto new_constant = constant_value.TryCastAs(target_type, true);\n \t\tif (new_constant) {\n \t\t\tauto child_expression = move(cast_expression->child);\n \t\t\tauto new_constant_expr = make_unique<BoundConstantExpression>(constant_value);\ndiff --git a/src/parallel/executor.cpp b/src/parallel/executor.cpp\nindex e08ada33f36a..dee29fd294ae 100644\n--- a/src/parallel/executor.cpp\n+++ b/src/parallel/executor.cpp\n@@ -1,18 +1,16 @@\n #include \"duckdb/execution/executor.hpp\"\n \n+#include \"duckdb/execution/execution_context.hpp\"\n+#include \"duckdb/execution/operator/helper/physical_result_collector.hpp\"\n #include \"duckdb/execution/physical_operator.hpp\"\n #include \"duckdb/main/client_context.hpp\"\n #include \"duckdb/main/client_data.hpp\"\n-#include \"duckdb/execution/execution_context.hpp\"\n-#include \"duckdb/parallel/thread_context.hpp\"\n-#include \"duckdb/parallel/task_scheduler.hpp\"\n-#include \"duckdb/parallel/pipeline_executor.hpp\"\n-\n+#include \"duckdb/parallel/pipeline_complete_event.hpp\"\n #include \"duckdb/parallel/pipeline_event.hpp\"\n+#include \"duckdb/parallel/pipeline_executor.hpp\"\n #include \"duckdb/parallel/pipeline_finish_event.hpp\"\n-#include \"duckdb/parallel/pipeline_complete_event.hpp\"\n-\n-#include \"duckdb/execution/operator/helper/physical_result_collector.hpp\"\n+#include \"duckdb/parallel/task_scheduler.hpp\"\n+#include \"duckdb/parallel/thread_context.hpp\"\n \n #include <algorithm>\n \n@@ -208,8 +206,8 @@ void Executor::ExtractPipelines(shared_ptr<Pipeline> &pipeline, vector<shared_pt\n \t}\n \tauto child_entry = child_pipelines.find(pipeline_ptr);\n \tif (child_entry != child_pipelines.end()) {\n-\t\tfor (auto &entry : child_entry->second) {\n-\t\t\tExtractPipelines(entry, result);\n+\t\tfor (auto entry = child_entry->second.rbegin(); entry != child_entry->second.rend(); ++entry) {\n+\t\t\tExtractPipelines(*entry, result);\n \t\t}\n \t\tchild_pipelines.erase(pipeline_ptr);\n \t}\n",
  "test_patch": "diff --git a/test/sql/join/full_outer/test_full_outer_join_issue_4252.test b/test/sql/join/full_outer/test_full_outer_join_issue_4252.test\nnew file mode 100644\nindex 000000000000..7348521f7238\n--- /dev/null\n+++ b/test/sql/join/full_outer/test_full_outer_join_issue_4252.test\n@@ -0,0 +1,173 @@\n+# name: test/sql/join/full_outer/test_full_outer_join_issue_4252.test\n+# description: Test Issue: 4252\n+# group: [full_outer]\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+statement ok\n+CREATE TABLE test (x INT, y INT);\n+\n+statement ok\n+INSERT INTO test VALUES (1, 1), (2, 2), (3, 3);\n+\n+query II\n+SELECT * FROM (SELECT a2.x FROM (SELECT x FROM test WHERE x > 3) AS a1 FULL OUTER JOIN (SELECT x FROM test WHERE x = 1) AS a2 ON a1.x = a2.x) AS a3 FULL OUTER JOIN (SELECT 1 AS x) AS a4 ON a3.x = a4.x;\n+----\n+1\t1\n+\n+statement ok\n+CREATE TABLE df1(day DATE, value INTEGER, organization VARCHAR);\n+INSERT INTO df1 VALUES \n+    ('2022-01-01', 10, 'org1'),\n+    ('2022-01-05', 20, 'org2'),\n+    ('2022-01-10', 30, 'org3');\n+\n+statement ok\n+CREATE TABLE df2(day DATE, value INTEGER, organization VARCHAR);\n+INSERT INTO df2 VALUES \n+    ('2022-01-01', 100, 'org1'),\n+    ('2022-09-01', 200, 'org2'),\n+    ('2022-03-01', 300, 'org3');\n+\n+statement ok\n+CREATE TABLE df3(day DATE, value INTEGER, organization VARCHAR);\n+INSERT INTO df3 VALUES\n+    ('2022-01-02',  1000, 'org1'),\n+    ('2022-02-03',  2000, 'org2'),\n+    ('2022-04-01',  3000, 'org3');\n+\n+query II\n+SELECT \n+    coalesce(anon_1.month, anon_2.month) AS month, \n+    coalesce(coalesce(CAST(anon_1.value AS REAL), 0.0) + coalesce(CAST(anon_2.value AS REAL), 0.0), 0.0) AS value\n+FROM (\n+    SELECT coalesce(anon_3.month, anon_4.month) AS month, \n+    coalesce(coalesce(CAST(anon_3.value AS REAL), 0.0) + coalesce(CAST(anon_4.value AS REAL), 0.0), 0.0) AS value\n+    FROM (\n+        SELECT month AS month, sum(anon_5.value) AS value\n+        FROM (\n+            SELECT date_trunc('month', day) AS month, coalesce(sum(value), 0.0) AS value\n+            FROM df1\n+            WHERE day >= CAST('2022-01-01 00:00:00' AS DATE) \n+            AND day <= CAST('2022-01-31 00:00:00' AS DATE) \n+            AND (organization ILIKE 'org4') \n+            GROUP BY date_trunc('month', day)\n+        ) AS anon_5 \n+        GROUP BY GROUPING SETS((month))\n+    ) AS anon_3 \n+    FULL OUTER JOIN (\n+        SELECT month AS month, sum(anon_6.value) AS value\n+        FROM (\n+            SELECT date_trunc('month', day) AS month, coalesce(sum(value), 0.0) AS value\n+            FROM df2\n+            WHERE day >= CAST('2022-01-01 00:00:00' AS DATE) \n+            AND day <= CAST('2022-01-31 00:00:00' AS DATE) \n+            GROUP BY date_trunc('month', day)\n+        ) AS anon_6 \n+        GROUP BY GROUPING SETS((month))\n+    ) AS anon_4 ON anon_3.month = anon_4.month\n+) AS anon_1 \n+FULL OUTER JOIN (\n+    SELECT month AS month, sum(anon_7.value) AS value\n+    FROM (\n+        SELECT date_trunc('month', day) AS month, coalesce(sum(value), 0.0) AS value\n+        FROM df3\n+        WHERE day >= CAST('2022-01-01 00:00:00' AS DATE) \n+        AND day <= CAST('2022-01-31 00:00:00' AS DATE) \n+        GROUP BY date_trunc('month', day)\n+    ) AS anon_7 \n+    GROUP BY GROUPING SETS((month))\n+) AS anon_2 ON anon_1.month = anon_2.month\n+----\n+2022-01-01\t1100.0\n+\n+query II\n+SELECT \n+    coalesce(anon_1.month, anon_2.month) AS month, \n+    coalesce(coalesce(CAST(anon_1.value AS REAL), 0.0) + coalesce(CAST(anon_2.value AS REAL), 0.0), 0.0) AS value\n+FROM (\n+    SELECT coalesce(anon_3.month, anon_4.month) AS month, \n+    coalesce(coalesce(CAST(anon_3.value AS REAL), 0.0) + coalesce(CAST(anon_4.value AS REAL), 0.0), 0.0) AS value\n+    FROM (\n+        SELECT month AS month, sum(anon_5.value) AS value\n+        FROM (\n+            SELECT date_trunc('month', day) AS month, coalesce(sum(value), 0.0) AS value\n+            FROM df1\n+            WHERE day >= CAST('2022-01-01 00:00:00' AS DATE) \n+            AND day <= CAST('2022-01-31 00:00:00' AS DATE) \n+            AND (organization ILIKE 'org1') \n+            GROUP BY date_trunc('month', day)\n+        ) AS anon_5 \n+        GROUP BY GROUPING SETS((month))\n+    ) AS anon_3 \n+    FULL OUTER JOIN (\n+        SELECT month AS month, sum(anon_6.value) AS value\n+        FROM (\n+            SELECT date_trunc('month', day) AS month, coalesce(sum(value), 0.0) AS value\n+            FROM df2\n+            WHERE day >= CAST('2022-01-01 00:00:00' AS DATE) \n+            AND day <= CAST('2022-01-31 00:00:00' AS DATE) \n+            GROUP BY date_trunc('month', day)\n+        ) AS anon_6 \n+        GROUP BY GROUPING SETS((month))\n+    ) AS anon_4 ON anon_3.month = anon_4.month\n+) AS anon_1 \n+FULL OUTER JOIN (\n+    SELECT month AS month, sum(anon_7.value) AS value\n+    FROM (\n+        SELECT date_trunc('month', day) AS month, coalesce(sum(value), 0.0) AS value\n+        FROM df3\n+        WHERE day >= CAST('2022-01-01 00:00:00' AS DATE) \n+        AND day <= CAST('2022-01-31 00:00:00' AS DATE) \n+        GROUP BY date_trunc('month', day)\n+    ) AS anon_7 \n+    GROUP BY GROUPING SETS((month))\n+) AS anon_2 ON anon_1.month = anon_2.month\n+----\n+2022-01-01\t1110.0\n+\n+query II\n+SELECT \n+    coalesce(anon_1.month, anon_2.month) AS month, \n+    coalesce(coalesce(CAST(anon_1.value AS REAL), 0.0) + coalesce(CAST(anon_2.value AS REAL), 0.0), 0.0) AS value\n+FROM (\n+    SELECT coalesce(anon_3.month, anon_4.month) AS month, \n+    coalesce(coalesce(CAST(anon_3.value AS REAL), 0.0) + coalesce(CAST(anon_4.value AS REAL), 0.0), 0.0) AS value\n+    FROM (\n+        SELECT month AS month, sum(anon_6.value) AS value\n+        FROM (\n+            SELECT date_trunc('month', day) AS month, coalesce(sum(value), 0.0) AS value\n+            FROM df2\n+            WHERE day >= CAST('2022-01-01 00:00:00' AS DATE) \n+            AND day <= CAST('2022-01-31 00:00:00' AS DATE) \n+            GROUP BY date_trunc('month', day)\n+        ) AS anon_6 \n+        GROUP BY GROUPING SETS((month))\n+    ) AS anon_3 \n+    FULL OUTER JOIN (\n+        SELECT month AS month, sum(anon_5.value) AS value\n+        FROM (\n+            SELECT date_trunc('month', day) AS month, coalesce(sum(value), 0.0) AS value\n+            FROM df1\n+            WHERE day >= CAST('2022-01-01 00:00:00' AS DATE) \n+            AND day <= CAST('2022-01-31 00:00:00' AS DATE)\n+            AND (organization ILIKE 'org4') \n+            GROUP BY date_trunc('month', day)\n+        ) AS anon_5 \n+        GROUP BY GROUPING SETS((month))\n+    ) AS anon_4 ON anon_3.month = anon_4.month\n+) AS anon_1 \n+FULL OUTER JOIN (\n+    SELECT month AS month, sum(anon_7.value) AS value\n+    FROM (\n+        SELECT date_trunc('month', day) AS month, coalesce(sum(value), 0.0) AS value\n+        FROM df3\n+        WHERE day >= CAST('2022-01-01 00:00:00' AS DATE)\n+        AND day <= CAST('2022-01-31 00:00:00' AS DATE) \n+        GROUP BY date_trunc('month', day)\n+    ) AS anon_7 \n+    GROUP BY GROUPING SETS((month))\n+) AS anon_2 ON anon_1.month = anon_2.month\n+----\n+2022-01-01\t1100.0\n\\ No newline at end of file\n",
  "problem_statement": "Full outer join returning more rows than expected\n### What happens?\r\n\r\nI have two subqueries joined with a full outer join which returns more rows than it should. When I swapped the order of the two subqueries being joined the results are correct even though the results for each subquery are the same. The same query against Postgres returns the expected result (and is not affected by the order of the subqueries).\r\n\r\n\r\n### To Reproduce\r\n\r\n__Note__: The queries are more convoluted than it should because they are being generated dynamically as part of a POC I\u2019ve been working on. \r\n\r\n### The data\r\n\r\n```sql\r\nCREATE TABLE df1(day DATE, value INTEGER, organization VARCHAR);\r\nINSERT INTO df1 VALUES \r\n    ('2022-01-01', 10, 'org1'),\r\n    ('2022-01-05', 20, 'org2'),\r\n    ('2022-01-10', 30, 'org3');\r\n\r\nCREATE TABLE df2(day DATE, value INTEGER, organization VARCHAR);\r\nINSERT INTO df2 VALUES \r\n    ('2022-01-01', 100, 'org1'),\r\n    ('2022-09-01', 200, 'org2'),\r\n    ('2022-03-01', 300, 'org3');\r\n\r\nCREATE TABLE df3(day DATE, value INTEGER, organization VARCHAR);\r\nINSERT INTO df3 VALUES\r\n    ('2022-01-02',  1000, 'org1'),\r\n    ('2022-02-03',  2000, 'org2'),\r\n    ('2022-04-01',  3000, 'org3');\r\n```\r\n\r\n### The _bad_ query\r\n\r\n- __Expected results__: `[(2022-01-01, 1100.0)]`\r\n- __Actual results__: ` [(2022-01-01, 1000.0), (2022-01-01, 1100.0)]`\r\n\r\n```sql\r\nSELECT \r\n    coalesce(anon_1.month, anon_2.month) AS month, \r\n    coalesce(coalesce(CAST(anon_1.value AS REAL), 0.0) + coalesce(CAST(anon_2.value AS REAL), 0.0), 0.0) AS value\r\nFROM (\r\n    SELECT coalesce(anon_3.month, anon_4.month) AS month, \r\n    coalesce(coalesce(CAST(anon_3.value AS REAL), 0.0) + coalesce(CAST(anon_4.value AS REAL), 0.0), 0.0) AS value\r\n    FROM (\r\n        SELECT month AS month, sum(anon_5.value) AS value\r\n        FROM (\r\n            SELECT date_trunc('month', day) AS month, coalesce(sum(value), 0.0) AS value\r\n            FROM df1\r\n            WHERE CAST(day AS DATE) >= '2022-01-01 00:00:00' \r\n            AND CAST(day AS DATE) <= '2022-01-31 00:00:00' \r\n            AND (organization ILIKE 'org4') \r\n            GROUP BY date_trunc('month', day)\r\n        ) AS anon_5 \r\n        GROUP BY GROUPING SETS((month))\r\n    ) AS anon_3 \r\n    FULL OUTER JOIN (\r\n        SELECT month AS month, sum(anon_6.value) AS value\r\n        FROM (\r\n            SELECT date_trunc('month', day) AS month, coalesce(sum(value), 0.0) AS value\r\n            FROM df2\r\n            WHERE CAST(day AS DATE) >= '2022-01-01 00:00:00' \r\n            AND CAST(day AS DATE) <= '2022-01-31 00:00:00' \r\n            GROUP BY date_trunc('month', day)\r\n        ) AS anon_6 \r\n        GROUP BY GROUPING SETS((month))\r\n    ) AS anon_4 ON anon_3.month = anon_4.month\r\n) AS anon_1 \r\nFULL OUTER JOIN (\r\n    SELECT month AS month, sum(anon_7.value) AS value\r\n    FROM (\r\n        SELECT date_trunc('month', day) AS month, coalesce(sum(value), 0.0) AS value\r\n        FROM df3\r\n        WHERE CAST(day AS DATE) >= '2022-01-01 00:00:00' \r\n        AND CAST(day AS DATE) <= '2022-01-31 00:00:00' \r\n        GROUP BY date_trunc('month', day)\r\n    ) AS anon_7 \r\n    GROUP BY GROUPING SETS((month))\r\n) AS anon_2 ON anon_1.month = anon_2.month\r\n```\r\n\r\nI've been playing around with the query trying to understand what is going on and found out that if I change the `(organization ILIKE 'org4') ` filter in `anon_5` for one that returns at least one result (e.g. `org1`) the final result is correct. I include the query here for convenience:\r\n\r\n- __Expected results__: `[(2022-01-01, 1110.0)]`\r\n- __Actual results__: ` [(2022-01-01, 1110.0)]` (correct)\r\n\r\n```sql\r\nSELECT \r\n    coalesce(anon_1.month, anon_2.month) AS month, \r\n    coalesce(coalesce(CAST(anon_1.value AS REAL), 0.0) + coalesce(CAST(anon_2.value AS REAL), 0.0), 0.0) AS value\r\nFROM (\r\n    SELECT coalesce(anon_3.month, anon_4.month) AS month, \r\n    coalesce(coalesce(CAST(anon_3.value AS REAL), 0.0) + coalesce(CAST(anon_4.value AS REAL), 0.0), 0.0) AS value\r\n    FROM (\r\n        SELECT month AS month, sum(anon_5.value) AS value\r\n        FROM (\r\n            SELECT date_trunc('month', day) AS month, coalesce(sum(value), 0.0) AS value\r\n            FROM df1\r\n            WHERE CAST(day AS DATE) >= '2022-01-01 00:00:00' \r\n            AND CAST(day AS DATE) <= '2022-01-31 00:00:00' \r\n            AND (organization ILIKE 'org1') \r\n            GROUP BY date_trunc('month', day)\r\n        ) AS anon_5 \r\n        GROUP BY GROUPING SETS((month))\r\n    ) AS anon_3 \r\n    FULL OUTER JOIN (\r\n        SELECT month AS month, sum(anon_6.value) AS value\r\n        FROM (\r\n            SELECT date_trunc('month', day) AS month, coalesce(sum(value), 0.0) AS value\r\n            FROM df2\r\n            WHERE CAST(day AS DATE) >= '2022-01-01 00:00:00' \r\n            AND CAST(day AS DATE) <= '2022-01-31 00:00:00' \r\n            GROUP BY date_trunc('month', day)\r\n        ) AS anon_6 \r\n        GROUP BY GROUPING SETS((month))\r\n    ) AS anon_4 ON anon_3.month = anon_4.month\r\n) AS anon_1 \r\nFULL OUTER JOIN (\r\n    SELECT month AS month, sum(anon_7.value) AS value\r\n    FROM (\r\n        SELECT date_trunc('month', day) AS month, coalesce(sum(value), 0.0) AS value\r\n        FROM df3\r\n        WHERE CAST(day AS DATE) >= '2022-01-01 00:00:00' \r\n        AND CAST(day AS DATE) <= '2022-01-31 00:00:00' \r\n        GROUP BY date_trunc('month', day)\r\n    ) AS anon_7 \r\n    GROUP BY GROUPING SETS((month))\r\n) AS anon_2 ON anon_1.month = anon_2.month\r\n```\r\nAlso, if I swap the order in which `anon_3` and `anon_4` subqueries are joined (keeping the original `org4` filter) the results are also correct.\r\n\r\n- __Expected results__: `[(2022-01-01, 1100.0)]`\r\n- __Actual results__: ` [(2022-01-01, 1100.0)]` (correct)\r\n\r\n```sql\r\nSELECT \r\n    coalesce(anon_1.month, anon_2.month) AS month, \r\n    coalesce(coalesce(CAST(anon_1.value AS REAL), 0.0) + coalesce(CAST(anon_2.value AS REAL), 0.0), 0.0) AS value\r\nFROM (\r\n    SELECT coalesce(anon_3.month, anon_4.month) AS month, \r\n    coalesce(coalesce(CAST(anon_3.value AS REAL), 0.0) + coalesce(CAST(anon_4.value AS REAL), 0.0), 0.0) AS value\r\n    FROM (\r\n        SELECT month AS month, sum(anon_6.value) AS value\r\n        FROM (\r\n            SELECT date_trunc('month', day) AS month, coalesce(sum(value), 0.0) AS value\r\n            FROM df2\r\n            WHERE CAST(day AS DATE) >= '2022-01-01 00:00:00' \r\n            AND CAST(day AS DATE) <= '2022-01-31 00:00:00' \r\n            GROUP BY date_trunc('month', day)\r\n        ) AS anon_6 \r\n        GROUP BY GROUPING SETS((month))\r\n    ) AS anon_3 \r\n    FULL OUTER JOIN (\r\n        SELECT month AS month, sum(anon_5.value) AS value\r\n        FROM (\r\n            SELECT date_trunc('month', day) AS month, coalesce(sum(value), 0.0) AS value\r\n            FROM df1\r\n            WHERE CAST(day AS DATE) >= '2022-01-01 00:00:00' \r\n            AND CAST(day AS DATE) <= '2022-01-31 00:00:00' \r\n            AND (organization ILIKE 'org4') \r\n            GROUP BY date_trunc('month', day)\r\n        ) AS anon_5 \r\n        GROUP BY GROUPING SETS((month))\r\n    ) AS anon_4 ON anon_3.month = anon_4.month\r\n) AS anon_1 \r\nFULL OUTER JOIN (\r\n    SELECT month AS month, sum(anon_7.value) AS value\r\n    FROM (\r\n        SELECT date_trunc('month', day) AS month, coalesce(sum(value), 0.0) AS value\r\n        FROM df3\r\n        WHERE CAST(day AS DATE) >= '2022-01-01 00:00:00' \r\n        AND CAST(day AS DATE) <= '2022-01-31 00:00:00' \r\n        GROUP BY date_trunc('month', day)\r\n    ) AS anon_7 \r\n    GROUP BY GROUPING SETS((month))\r\n) AS anon_2 ON anon_1.month = anon_2.month\r\n```\r\nSo, I think that having no results from anon_5 at the left side of the outer join is messing with the final result somehow. Also, the `EXPLAIN ANALYZE` diagram is not coherent with the results I am getting from the first (bad) query. According to it I should be getting 1 resulting row not 2.\r\n\r\n### OS:\r\n\r\nDocker: python:3.9-slim-bullseye - Host: macOS 11.5.2 10. (Tried also directly in the host with same results)\r\n\r\n### DuckDB Version:\r\n\r\n0.4.0\r\n\r\n### DuckDB Client:\r\n\r\nPython\r\n\r\n### Full Name:\r\n\r\nFrancisco Espino Romero\r\n\r\n### Affiliation:\r\n\r\nCofi\r\n\r\n### Have you tried this on the latest `master` branch?\r\n\r\n- [X] I agree\r\n\r\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\r\n\r\n- [X] I agree\n",
  "hints_text": "Maybe the scheduling order of the child pipeline is reversed. Let me verify.",
  "created_at": "2022-07-31T13:33:40Z"
}