{
  "repo": "duckdb/duckdb",
  "pull_number": 4526,
  "instance_id": "duckdb__duckdb-4526",
  "issue_numbers": [
    "4506"
  ],
  "base_commit": "267d43e3d74081bba823a4c11743e031f9b82cd3",
  "patch": "diff --git a/src/common/types/hugeint.cpp b/src/common/types/hugeint.cpp\nindex 0f404e53320e..64f85e86b56b 100644\n--- a/src/common/types/hugeint.cpp\n+++ b/src/common/types/hugeint.cpp\n@@ -537,6 +537,12 @@ bool Hugeint::TryConvert(uint64_t value, hugeint_t &result) {\n \treturn true;\n }\n \n+template <>\n+bool Hugeint::TryConvert(hugeint_t value, hugeint_t &result) {\n+\tresult = value;\n+\treturn true;\n+}\n+\n template <>\n bool Hugeint::TryConvert(float value, hugeint_t &result) {\n \treturn Hugeint::TryConvert(double(value), result);\ndiff --git a/src/include/duckdb.h b/src/include/duckdb.h\nindex 8798de96f502..9e358cbc2236 100644\n--- a/src/include/duckdb.h\n+++ b/src/include/duckdb.h\n@@ -752,6 +752,16 @@ If the conversion fails because the double value is too big the result will be 0\n */\n DUCKDB_API duckdb_hugeint duckdb_double_to_hugeint(double val);\n \n+/*!\n+Converts a double value to a duckdb_decimal object.\n+\n+If the conversion fails because the double value is too big, or the width/scale are invalid the result will be 0.\n+\n+* val: The double value.\n+* returns: The converted `duckdb_decimal` element.\n+*/\n+DUCKDB_API duckdb_decimal duckdb_double_to_decimal(double val, uint8_t width, uint8_t scale);\n+\n //===--------------------------------------------------------------------===//\n // Decimal Helpers\n //===--------------------------------------------------------------------===//\n@@ -865,6 +875,11 @@ Binds an duckdb_hugeint value to the prepared statement at the specified index.\n */\n DUCKDB_API duckdb_state duckdb_bind_hugeint(duckdb_prepared_statement prepared_statement, idx_t param_idx,\n                                             duckdb_hugeint val);\n+/*!\n+Binds a duckdb_decimal value to the prepared statement at the specified index.\n+*/\n+DUCKDB_API duckdb_state duckdb_bind_decimal(duckdb_prepared_statement prepared_statement, idx_t param_idx,\n+                                            duckdb_decimal val);\n \n /*!\n Binds an uint8_t value to the prepared statement at the specified index.\ndiff --git a/src/include/duckdb/common/operator/decimal_cast_operators.hpp b/src/include/duckdb/common/operator/decimal_cast_operators.hpp\nindex 2b3ef276a488..c30b18d7ece8 100644\n--- a/src/include/duckdb/common/operator/decimal_cast_operators.hpp\n+++ b/src/include/duckdb/common/operator/decimal_cast_operators.hpp\n@@ -353,7 +353,7 @@ bool TryCastFromDecimal::Operation(hugeint_t input, double &result, string *erro\n                                    uint8_t scale);\n \n //===--------------------------------------------------------------------===//\n-// Cast Decimal -> VARCHAR\n+// Cast Decimal <-> VARCHAR\n //===--------------------------------------------------------------------===//\n template <>\n DUCKDB_API bool TryCastToDecimal::Operation(string_t input, int16_t &result, string *error_message, uint8_t width,\ndiff --git a/src/include/duckdb/main/capi_internal.hpp b/src/include/duckdb/main/capi/capi_internal.hpp\nsimilarity index 97%\nrename from src/include/duckdb/main/capi_internal.hpp\nrename to src/include/duckdb/main/capi/capi_internal.hpp\nindex 5eeeafe8b35b..be256c8e109c 100644\n--- a/src/include/duckdb/main/capi_internal.hpp\n+++ b/src/include/duckdb/main/capi/capi_internal.hpp\n@@ -1,7 +1,7 @@\n //===----------------------------------------------------------------------===//\n //                         DuckDB\n //\n-// duckdb/main/capi_internal.hpp\n+// duckdb/main/capi/capi_internal.hpp\n //\n //\n //===----------------------------------------------------------------------===//\ndiff --git a/src/include/duckdb/main/capi/cast/from_decimal.hpp b/src/include/duckdb/main/capi/cast/from_decimal.hpp\nnew file mode 100644\nindex 000000000000..0764fa3a7bdb\n--- /dev/null\n+++ b/src/include/duckdb/main/capi/cast/from_decimal.hpp\n@@ -0,0 +1,64 @@\n+//===----------------------------------------------------------------------===//\n+//                         DuckDB\n+//\n+// duckdb/main/capi/capi_cast_from_decimal.hpp\n+//\n+//\n+//===----------------------------------------------------------------------===//\n+\n+#pragma once\n+\n+#include \"duckdb/main/capi/cast/utils.hpp\"\n+\n+namespace duckdb {\n+\n+//! DECIMAL -> ?\n+template <class RESULT_TYPE>\n+bool CastDecimalCInternal(duckdb_result *source, RESULT_TYPE &result, idx_t col, idx_t row) {\n+\tauto result_data = (duckdb::DuckDBResultData *)source->internal_data;\n+\tauto &query_result = result_data->result;\n+\tauto &source_type = query_result->types[col];\n+\tauto width = duckdb::DecimalType::GetWidth(source_type);\n+\tauto scale = duckdb::DecimalType::GetScale(source_type);\n+\tvoid *source_address = UnsafeFetchPtr<hugeint_t>(source, col, row);\n+\tswitch (source_type.InternalType()) {\n+\tcase duckdb::PhysicalType::INT16:\n+\t\treturn duckdb::TryCastFromDecimal::Operation<int16_t, RESULT_TYPE>(UnsafeFetchFromPtr<int16_t>(source_address),\n+\t\t                                                                   result, nullptr, width, scale);\n+\tcase duckdb::PhysicalType::INT32:\n+\t\treturn duckdb::TryCastFromDecimal::Operation<int32_t, RESULT_TYPE>(UnsafeFetchFromPtr<int32_t>(source_address),\n+\t\t                                                                   result, nullptr, width, scale);\n+\tcase duckdb::PhysicalType::INT64:\n+\t\treturn duckdb::TryCastFromDecimal::Operation<int64_t, RESULT_TYPE>(UnsafeFetchFromPtr<int64_t>(source_address),\n+\t\t                                                                   result, nullptr, width, scale);\n+\tcase duckdb::PhysicalType::INT128:\n+\t\treturn duckdb::TryCastFromDecimal::Operation<hugeint_t, RESULT_TYPE>(\n+\t\t    UnsafeFetchFromPtr<hugeint_t>(source_address), result, nullptr, width, scale);\n+\tdefault:\n+\t\tthrow duckdb::InternalException(\"Unimplemented internal type for decimal\");\n+\t}\n+}\n+\n+//! DECIMAL -> VARCHAR\n+template <>\n+bool CastDecimalCInternal(duckdb_result *source, char *&result, idx_t col, idx_t row);\n+\n+//! DECIMAL -> DECIMAL (internal fetch)\n+template <>\n+bool CastDecimalCInternal(duckdb_result *source, duckdb_decimal &result, idx_t col, idx_t row);\n+\n+//! DECIMAL -> ...\n+template <class RESULT_TYPE>\n+RESULT_TYPE TryCastDecimalCInternal(duckdb_result *source, idx_t col, idx_t row) {\n+\tRESULT_TYPE result_value;\n+\ttry {\n+\t\tif (!CastDecimalCInternal<RESULT_TYPE>(source, result_value, col, row)) {\n+\t\t\treturn FetchDefaultValue::Operation<RESULT_TYPE>();\n+\t\t}\n+\t} catch (...) {\n+\t\treturn FetchDefaultValue::Operation<RESULT_TYPE>();\n+\t}\n+\treturn result_value;\n+}\n+\n+} // namespace duckdb\ndiff --git a/src/include/duckdb/main/capi/cast/generic.hpp b/src/include/duckdb/main/capi/cast/generic.hpp\nnew file mode 100644\nindex 000000000000..3aa708f4af29\n--- /dev/null\n+++ b/src/include/duckdb/main/capi/cast/generic.hpp\n@@ -0,0 +1,73 @@\n+//===----------------------------------------------------------------------===//\n+//                         DuckDB\n+//\n+// duckdb/main/capi/cast/generic_cast.hpp\n+//\n+//\n+//===----------------------------------------------------------------------===//\n+\n+#pragma once\n+\n+#include \"duckdb/common/types/time.hpp\"\n+#include \"duckdb/common/types/timestamp.hpp\"\n+#include \"duckdb/common/types/date.hpp\"\n+\n+#include \"duckdb/main/capi/capi_internal.hpp\"\n+#include \"duckdb/main/capi/cast/utils.hpp\"\n+#include \"duckdb/main/capi/cast/from_decimal.hpp\"\n+\n+namespace duckdb {\n+\n+template <class RESULT_TYPE, class OP = duckdb::TryCast>\n+RESULT_TYPE GetInternalCValue(duckdb_result *result, idx_t col, idx_t row) {\n+\tif (!CanFetchValue(result, col, row)) {\n+\t\treturn FetchDefaultValue::Operation<RESULT_TYPE>();\n+\t}\n+\tswitch (result->__deprecated_columns[col].__deprecated_type) {\n+\tcase DUCKDB_TYPE_BOOLEAN:\n+\t\treturn TryCastCInternal<bool, RESULT_TYPE, OP>(result, col, row);\n+\tcase DUCKDB_TYPE_TINYINT:\n+\t\treturn TryCastCInternal<int8_t, RESULT_TYPE, OP>(result, col, row);\n+\tcase DUCKDB_TYPE_SMALLINT:\n+\t\treturn TryCastCInternal<int16_t, RESULT_TYPE, OP>(result, col, row);\n+\tcase DUCKDB_TYPE_INTEGER:\n+\t\treturn TryCastCInternal<int32_t, RESULT_TYPE, OP>(result, col, row);\n+\tcase DUCKDB_TYPE_BIGINT:\n+\t\treturn TryCastCInternal<int64_t, RESULT_TYPE, OP>(result, col, row);\n+\tcase DUCKDB_TYPE_UTINYINT:\n+\t\treturn TryCastCInternal<uint8_t, RESULT_TYPE, OP>(result, col, row);\n+\tcase DUCKDB_TYPE_USMALLINT:\n+\t\treturn TryCastCInternal<uint16_t, RESULT_TYPE, OP>(result, col, row);\n+\tcase DUCKDB_TYPE_UINTEGER:\n+\t\treturn TryCastCInternal<uint32_t, RESULT_TYPE, OP>(result, col, row);\n+\tcase DUCKDB_TYPE_UBIGINT:\n+\t\treturn TryCastCInternal<uint64_t, RESULT_TYPE, OP>(result, col, row);\n+\tcase DUCKDB_TYPE_FLOAT:\n+\t\treturn TryCastCInternal<float, RESULT_TYPE, OP>(result, col, row);\n+\tcase DUCKDB_TYPE_DOUBLE:\n+\t\treturn TryCastCInternal<double, RESULT_TYPE, OP>(result, col, row);\n+\tcase DUCKDB_TYPE_DATE:\n+\t\treturn TryCastCInternal<date_t, RESULT_TYPE, OP>(result, col, row);\n+\tcase DUCKDB_TYPE_TIME:\n+\t\treturn TryCastCInternal<dtime_t, RESULT_TYPE, OP>(result, col, row);\n+\tcase DUCKDB_TYPE_TIMESTAMP:\n+\t\treturn TryCastCInternal<timestamp_t, RESULT_TYPE, OP>(result, col, row);\n+\tcase DUCKDB_TYPE_HUGEINT:\n+\t\treturn TryCastCInternal<hugeint_t, RESULT_TYPE, OP>(result, col, row);\n+\tcase DUCKDB_TYPE_DECIMAL:\n+\t\treturn TryCastDecimalCInternal<RESULT_TYPE>(result, col, row);\n+\tcase DUCKDB_TYPE_INTERVAL:\n+\t\treturn TryCastCInternal<interval_t, RESULT_TYPE, OP>(result, col, row);\n+\tcase DUCKDB_TYPE_VARCHAR:\n+\t\treturn TryCastCInternal<char *, RESULT_TYPE, FromCStringCastWrapper<OP>>(result, col, row);\n+\tcase DUCKDB_TYPE_BLOB:\n+\t\treturn TryCastCInternal<duckdb_blob, RESULT_TYPE, FromCBlobCastWrapper>(result, col, row);\n+\tdefault: { // LCOV_EXCL_START\n+\t\t// invalid type for C to C++ conversion\n+\t\tD_ASSERT(0);\n+\t\treturn FetchDefaultValue::Operation<RESULT_TYPE>();\n+\t} // LCOV_EXCL_STOP\n+\t}\n+}\n+\n+} // namespace duckdb\ndiff --git a/src/include/duckdb/main/capi/cast/to_decimal.hpp b/src/include/duckdb/main/capi/cast/to_decimal.hpp\nnew file mode 100644\nindex 000000000000..049423d5ff9f\n--- /dev/null\n+++ b/src/include/duckdb/main/capi/cast/to_decimal.hpp\n@@ -0,0 +1,134 @@\n+//===----------------------------------------------------------------------===//\n+//                         DuckDB\n+//\n+// duckdb/main/capi/capi_cast_from_decimal.hpp\n+//\n+//\n+//===----------------------------------------------------------------------===//\n+\n+#pragma once\n+\n+#include \"duckdb/main/capi/cast/utils.hpp\"\n+\n+namespace duckdb {\n+\n+template <class INTERNAL_TYPE>\n+struct ToCDecimalCastWrapper {\n+\ttemplate <class SOURCE_TYPE>\n+\tstatic bool Operation(SOURCE_TYPE input, duckdb_decimal &result, std::string *error, uint8_t width, uint8_t scale) {\n+\t\tthrow NotImplementedException(\"Type not implemented for CDecimalCastWrapper\");\n+\t}\n+};\n+\n+//! Hugeint\n+template <>\n+struct ToCDecimalCastWrapper<hugeint_t> {\n+\ttemplate <class SOURCE_TYPE>\n+\tstatic bool Operation(SOURCE_TYPE input, duckdb_decimal &result, std::string *error, uint8_t width, uint8_t scale) {\n+\t\thugeint_t intermediate_result;\n+\n+\t\tif (!TryCastToDecimal::Operation<SOURCE_TYPE, hugeint_t>(input, intermediate_result, error, width, scale)) {\n+\t\t\tresult = FetchDefaultValue::Operation<duckdb_decimal>();\n+\t\t\treturn false;\n+\t\t}\n+\t\tresult.scale = scale;\n+\t\tresult.width = width;\n+\n+\t\tduckdb_hugeint hugeint_value;\n+\t\thugeint_value.upper = intermediate_result.upper;\n+\t\thugeint_value.lower = intermediate_result.lower;\n+\t\tresult.value = hugeint_value;\n+\t\treturn true;\n+\t}\n+};\n+\n+//! FIXME: reduce duplication here by just matching on the signed-ness of the type\n+//! INTERNAL_TYPE = int16_t\n+template <>\n+struct ToCDecimalCastWrapper<int16_t> {\n+\ttemplate <class SOURCE_TYPE>\n+\tstatic bool Operation(SOURCE_TYPE input, duckdb_decimal &result, std::string *error, uint8_t width, uint8_t scale) {\n+\t\tint16_t intermediate_result;\n+\n+\t\tif (!TryCastToDecimal::Operation<SOURCE_TYPE, int16_t>(input, intermediate_result, error, width, scale)) {\n+\t\t\tresult = FetchDefaultValue::Operation<duckdb_decimal>();\n+\t\t\treturn false;\n+\t\t}\n+\t\thugeint_t hugeint_result = Hugeint::Convert(intermediate_result);\n+\n+\t\tresult.scale = scale;\n+\t\tresult.width = width;\n+\n+\t\tduckdb_hugeint hugeint_value;\n+\t\thugeint_value.upper = hugeint_result.upper;\n+\t\thugeint_value.lower = hugeint_result.lower;\n+\t\tresult.value = hugeint_value;\n+\t\treturn true;\n+\t}\n+};\n+//! INTERNAL_TYPE = int32_t\n+template <>\n+struct ToCDecimalCastWrapper<int32_t> {\n+\ttemplate <class SOURCE_TYPE>\n+\tstatic bool Operation(SOURCE_TYPE input, duckdb_decimal &result, std::string *error, uint8_t width, uint8_t scale) {\n+\t\tint32_t intermediate_result;\n+\n+\t\tif (!TryCastToDecimal::Operation<SOURCE_TYPE, int32_t>(input, intermediate_result, error, width, scale)) {\n+\t\t\tresult = FetchDefaultValue::Operation<duckdb_decimal>();\n+\t\t\treturn false;\n+\t\t}\n+\t\thugeint_t hugeint_result = Hugeint::Convert(intermediate_result);\n+\n+\t\tresult.scale = scale;\n+\t\tresult.width = width;\n+\n+\t\tduckdb_hugeint hugeint_value;\n+\t\thugeint_value.upper = hugeint_result.upper;\n+\t\thugeint_value.lower = hugeint_result.lower;\n+\t\tresult.value = hugeint_value;\n+\t\treturn true;\n+\t}\n+};\n+//! INTERNAL_TYPE = int64_t\n+template <>\n+struct ToCDecimalCastWrapper<int64_t> {\n+\ttemplate <class SOURCE_TYPE>\n+\tstatic bool Operation(SOURCE_TYPE input, duckdb_decimal &result, std::string *error, uint8_t width, uint8_t scale) {\n+\t\tint64_t intermediate_result;\n+\n+\t\tif (!TryCastToDecimal::Operation<SOURCE_TYPE, int64_t>(input, intermediate_result, error, width, scale)) {\n+\t\t\tresult = FetchDefaultValue::Operation<duckdb_decimal>();\n+\t\t\treturn false;\n+\t\t}\n+\t\thugeint_t hugeint_result = Hugeint::Convert(intermediate_result);\n+\n+\t\tresult.scale = scale;\n+\t\tresult.width = width;\n+\n+\t\tduckdb_hugeint hugeint_value;\n+\t\thugeint_value.upper = hugeint_result.upper;\n+\t\thugeint_value.lower = hugeint_result.lower;\n+\t\tresult.value = hugeint_value;\n+\t\treturn true;\n+\t}\n+};\n+\n+template <class SOURCE_TYPE, class OP>\n+duckdb_decimal TryCastToDecimalCInternal(SOURCE_TYPE source, uint8_t width, uint8_t scale) {\n+\tduckdb_decimal result;\n+\ttry {\n+\t\tif (!OP::template Operation<SOURCE_TYPE>(source, result, nullptr, width, scale)) {\n+\t\t\treturn FetchDefaultValue::Operation<duckdb_decimal>();\n+\t\t}\n+\t} catch (...) {\n+\t\treturn FetchDefaultValue::Operation<duckdb_decimal>();\n+\t}\n+\treturn result;\n+}\n+\n+template <class SOURCE_TYPE, class OP>\n+duckdb_decimal TryCastToDecimalCInternal(duckdb_result *result, idx_t col, idx_t row, uint8_t width, uint8_t scale) {\n+\treturn TryCastToDecimalCInternal<SOURCE_TYPE, OP>(UnsafeFetch<SOURCE_TYPE>(result, col, row), width, scale);\n+}\n+\n+} // namespace duckdb\ndiff --git a/src/include/duckdb/main/capi/cast/utils.hpp b/src/include/duckdb/main/capi/cast/utils.hpp\nnew file mode 100644\nindex 000000000000..2a044d71636c\n--- /dev/null\n+++ b/src/include/duckdb/main/capi/cast/utils.hpp\n@@ -0,0 +1,120 @@\n+//===----------------------------------------------------------------------===//\n+//                         DuckDB\n+//\n+// duckdb/main/capi/cast/utils.hpp\n+//\n+//\n+//===----------------------------------------------------------------------===//\n+\n+#pragma once\n+\n+#include \"duckdb/main/capi/capi_internal.hpp\"\n+#include \"duckdb/common/operator/cast_operators.hpp\"\n+#include \"duckdb/common/operator/string_cast.hpp\"\n+#include \"duckdb/common/operator/decimal_cast_operators.hpp\"\n+\n+namespace duckdb {\n+\n+//===--------------------------------------------------------------------===//\n+// Unsafe Fetch (for internal use only)\n+//===--------------------------------------------------------------------===//\n+template <class T>\n+T UnsafeFetchFromPtr(void *pointer) {\n+\treturn *((T *)pointer);\n+}\n+\n+template <class T>\n+void *UnsafeFetchPtr(duckdb_result *result, idx_t col, idx_t row) {\n+\tD_ASSERT(row < result->__deprecated_row_count);\n+\treturn (void *)&(((T *)result->__deprecated_columns[col].__deprecated_data)[row]);\n+}\n+\n+template <class T>\n+T UnsafeFetch(duckdb_result *result, idx_t col, idx_t row) {\n+\treturn UnsafeFetchFromPtr<T>(UnsafeFetchPtr<T>(result, col, row));\n+}\n+\n+//===--------------------------------------------------------------------===//\n+// Fetch Default Value\n+//===--------------------------------------------------------------------===//\n+struct FetchDefaultValue {\n+\ttemplate <class T>\n+\tstatic T Operation() {\n+\t\treturn 0;\n+\t}\n+};\n+\n+template <>\n+duckdb_decimal FetchDefaultValue::Operation();\n+template <>\n+date_t FetchDefaultValue::Operation();\n+template <>\n+dtime_t FetchDefaultValue::Operation();\n+template <>\n+timestamp_t FetchDefaultValue::Operation();\n+template <>\n+interval_t FetchDefaultValue::Operation();\n+template <>\n+char *FetchDefaultValue::Operation();\n+template <>\n+duckdb_blob FetchDefaultValue::Operation();\n+\n+//===--------------------------------------------------------------------===//\n+// String Casts\n+//===--------------------------------------------------------------------===//\n+template <class OP>\n+struct FromCStringCastWrapper {\n+\ttemplate <class SOURCE_TYPE, class RESULT_TYPE>\n+\tstatic bool Operation(SOURCE_TYPE input_str, RESULT_TYPE &result) {\n+\t\tstring_t input(input_str);\n+\t\treturn OP::template Operation<string_t, RESULT_TYPE>(input, result);\n+\t}\n+};\n+\n+template <class OP>\n+struct ToCStringCastWrapper {\n+\ttemplate <class SOURCE_TYPE, class RESULT_TYPE>\n+\tstatic bool Operation(SOURCE_TYPE input, RESULT_TYPE &result) {\n+\t\tVector result_vector(LogicalType::VARCHAR, nullptr);\n+\t\tauto result_string = OP::template Operation<SOURCE_TYPE>(input, result_vector);\n+\t\tauto result_size = result_string.GetSize();\n+\t\tauto result_data = result_string.GetDataUnsafe();\n+\n+\t\tresult = (char *)duckdb_malloc(result_size + 1);\n+\t\tmemcpy(result, result_data, result_size);\n+\t\tresult[result_size] = '\\0';\n+\t\treturn true;\n+\t}\n+};\n+\n+//===--------------------------------------------------------------------===//\n+// Blob Casts\n+//===--------------------------------------------------------------------===//\n+struct FromCBlobCastWrapper {\n+\ttemplate <class SOURCE_TYPE, class RESULT_TYPE>\n+\tstatic bool Operation(SOURCE_TYPE input_str, RESULT_TYPE &result) {\n+\t\treturn false;\n+\t}\n+};\n+\n+template <>\n+bool FromCBlobCastWrapper::Operation(duckdb_blob input, char *&result);\n+\n+template <class SOURCE_TYPE, class RESULT_TYPE, class OP>\n+RESULT_TYPE TryCastCInternal(duckdb_result *result, idx_t col, idx_t row) {\n+\tRESULT_TYPE result_value;\n+\ttry {\n+\t\tif (!OP::template Operation<SOURCE_TYPE, RESULT_TYPE>(UnsafeFetch<SOURCE_TYPE>(result, col, row),\n+\t\t                                                      result_value)) {\n+\t\t\treturn FetchDefaultValue::Operation<RESULT_TYPE>();\n+\t\t}\n+\t} catch (...) {\n+\t\treturn FetchDefaultValue::Operation<RESULT_TYPE>();\n+\t}\n+\treturn result_value;\n+}\n+\n+} // namespace duckdb\n+\n+bool CanFetchValue(duckdb_result *result, idx_t col, idx_t row);\n+bool CanUseDeprecatedFetch(duckdb_result *result, idx_t col, idx_t row);\ndiff --git a/src/main/capi/CMakeLists.txt b/src/main/capi/CMakeLists.txt\nindex 65ed8d787895..253a2c94b67d 100644\n--- a/src/main/capi/CMakeLists.txt\n+++ b/src/main/capi/CMakeLists.txt\n@@ -1,3 +1,5 @@\n+add_subdirectory(cast)\n+\n add_library_unity(\n   duckdb_main_capi\n   OBJECT\ndiff --git a/src/main/capi/appender-c.cpp b/src/main/capi/appender-c.cpp\nindex 0878262507f9..af493c94d7c0 100644\n--- a/src/main/capi/appender-c.cpp\n+++ b/src/main/capi/appender-c.cpp\n@@ -1,4 +1,4 @@\n-#include \"duckdb/main/capi_internal.hpp\"\n+#include \"duckdb/main/capi/capi_internal.hpp\"\n \n using duckdb::Appender;\n using duckdb::AppenderWrapper;\ndiff --git a/src/main/capi/arrow-c.cpp b/src/main/capi/arrow-c.cpp\nindex 601e92ce8315..93aa3f3d2cff 100644\n--- a/src/main/capi/arrow-c.cpp\n+++ b/src/main/capi/arrow-c.cpp\n@@ -1,4 +1,4 @@\n-#include \"duckdb/main/capi_internal.hpp\"\n+#include \"duckdb/main/capi/capi_internal.hpp\"\n #include \"duckdb/common/arrow/arrow_converter.hpp\"\n \n using duckdb::ArrowConverter;\ndiff --git a/src/main/capi/cast/CMakeLists.txt b/src/main/capi/cast/CMakeLists.txt\nnew file mode 100644\nindex 000000000000..2365ac522a66\n--- /dev/null\n+++ b/src/main/capi/cast/CMakeLists.txt\n@@ -0,0 +1,5 @@\n+add_library_unity(duckdb_main_capi_cast OBJECT utils-c.cpp from_decimal-c.cpp)\n+\n+set(ALL_OBJECT_FILES\n+    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_main_capi_cast>\n+    PARENT_SCOPE)\ndiff --git a/src/main/capi/cast/from_decimal-c.cpp b/src/main/capi/cast/from_decimal-c.cpp\nnew file mode 100644\nindex 000000000000..ae98934f1e30\n--- /dev/null\n+++ b/src/main/capi/cast/from_decimal-c.cpp\n@@ -0,0 +1,119 @@\n+#include \"duckdb/main/capi/cast/from_decimal.hpp\"\n+#include \"duckdb/common/types/decimal.hpp\"\n+\n+namespace duckdb {\n+\n+//! DECIMAL -> VARCHAR\n+template <>\n+bool CastDecimalCInternal(duckdb_result *source, char *&result, idx_t col, idx_t row) {\n+\tauto result_data = (duckdb::DuckDBResultData *)source->internal_data;\n+\tauto &query_result = result_data->result;\n+\tauto &source_type = query_result->types[col];\n+\tauto width = duckdb::DecimalType::GetWidth(source_type);\n+\tauto scale = duckdb::DecimalType::GetScale(source_type);\n+\tduckdb::Vector result_vec(duckdb::LogicalType::VARCHAR, false, false);\n+\tduckdb::string_t result_string;\n+\tvoid *source_address = UnsafeFetchPtr<hugeint_t>(source, col, row);\n+\tswitch (source_type.InternalType()) {\n+\tcase duckdb::PhysicalType::INT16:\n+\t\tresult_string = duckdb::StringCastFromDecimal::Operation<int16_t>(UnsafeFetchFromPtr<int16_t>(source_address),\n+\t\t                                                                  width, scale, result_vec);\n+\t\tbreak;\n+\tcase duckdb::PhysicalType::INT32:\n+\t\tresult_string = duckdb::StringCastFromDecimal::Operation<int32_t>(UnsafeFetchFromPtr<int32_t>(source_address),\n+\t\t                                                                  width, scale, result_vec);\n+\t\tbreak;\n+\tcase duckdb::PhysicalType::INT64:\n+\t\tresult_string = duckdb::StringCastFromDecimal::Operation<int64_t>(UnsafeFetchFromPtr<int64_t>(source_address),\n+\t\t                                                                  width, scale, result_vec);\n+\t\tbreak;\n+\tcase duckdb::PhysicalType::INT128:\n+\t\tresult_string = duckdb::StringCastFromDecimal::Operation<hugeint_t>(\n+\t\t    UnsafeFetchFromPtr<hugeint_t>(source_address), width, scale, result_vec);\n+\t\tbreak;\n+\tdefault:\n+\t\tthrow duckdb::InternalException(\"Unimplemented internal type for decimal\");\n+\t}\n+\tresult = (char *)duckdb_malloc(sizeof(char) * (result_string.GetSize() + 1));\n+\tmemcpy(result, result_string.GetDataUnsafe(), result_string.GetSize());\n+\tresult[result_string.GetSize()] = '\\0';\n+\treturn true;\n+}\n+\n+template <class INTERNAL_TYPE>\n+duckdb_hugeint FetchInternals(void *source_address) {\n+\tthrow duckdb::NotImplementedException(\"FetchInternals not implemented for internal type\");\n+}\n+\n+template <>\n+duckdb_hugeint FetchInternals<int16_t>(void *source_address) {\n+\tduckdb_hugeint result;\n+\tint16_t intermediate_result;\n+\n+\tif (!TryCast::Operation<int16_t, int16_t>(UnsafeFetchFromPtr<int16_t>(source_address), intermediate_result)) {\n+\t\tintermediate_result = FetchDefaultValue::Operation<int16_t>();\n+\t}\n+\thugeint_t hugeint_result = Hugeint::Cast<int16_t>(intermediate_result);\n+\tresult.lower = hugeint_result.lower;\n+\tresult.upper = hugeint_result.upper;\n+\treturn result;\n+}\n+template <>\n+duckdb_hugeint FetchInternals<int32_t>(void *source_address) {\n+\tduckdb_hugeint result;\n+\tint32_t intermediate_result;\n+\n+\tif (!TryCast::Operation<int32_t, int32_t>(UnsafeFetchFromPtr<int32_t>(source_address), intermediate_result)) {\n+\t\tintermediate_result = FetchDefaultValue::Operation<int32_t>();\n+\t}\n+\thugeint_t hugeint_result = Hugeint::Cast<int32_t>(intermediate_result);\n+\tresult.lower = hugeint_result.lower;\n+\tresult.upper = hugeint_result.upper;\n+\treturn result;\n+}\n+template <>\n+duckdb_hugeint FetchInternals<int64_t>(void *source_address) {\n+\tduckdb_hugeint result;\n+\tint64_t intermediate_result;\n+\n+\tif (!TryCast::Operation<int64_t, int64_t>(UnsafeFetchFromPtr<int64_t>(source_address), intermediate_result)) {\n+\t\tintermediate_result = FetchDefaultValue::Operation<int64_t>();\n+\t}\n+\thugeint_t hugeint_result = Hugeint::Cast<int64_t>(intermediate_result);\n+\tresult.lower = hugeint_result.lower;\n+\tresult.upper = hugeint_result.upper;\n+\treturn result;\n+}\n+template <>\n+duckdb_hugeint FetchInternals<hugeint_t>(void *source_address) {\n+\tduckdb_hugeint result;\n+\thugeint_t intermediate_result;\n+\n+\tif (!TryCast::Operation<hugeint_t, hugeint_t>(UnsafeFetchFromPtr<hugeint_t>(source_address), intermediate_result)) {\n+\t\tintermediate_result = FetchDefaultValue::Operation<hugeint_t>();\n+\t}\n+\tresult.lower = intermediate_result.lower;\n+\tresult.upper = intermediate_result.upper;\n+\treturn result;\n+}\n+\n+//! DECIMAL -> DECIMAL (internal fetch)\n+template <>\n+bool CastDecimalCInternal(duckdb_result *source, duckdb_decimal &result, idx_t col, idx_t row) {\n+\tauto result_data = (duckdb::DuckDBResultData *)source->internal_data;\n+\tresult_data->result->types[col].GetDecimalProperties(result.width, result.scale);\n+\tauto source_address = UnsafeFetchPtr<hugeint_t>(source, col, row);\n+\n+\tif (result.width > duckdb::Decimal::MAX_WIDTH_INT64) {\n+\t\tresult.value = FetchInternals<hugeint_t>(source_address);\n+\t} else if (result.width > duckdb::Decimal::MAX_WIDTH_INT32) {\n+\t\tresult.value = FetchInternals<int64_t>(source_address);\n+\t} else if (result.width > duckdb::Decimal::MAX_WIDTH_INT16) {\n+\t\tresult.value = FetchInternals<int32_t>(source_address);\n+\t} else {\n+\t\tresult.value = FetchInternals<int16_t>(source_address);\n+\t}\n+\treturn true;\n+}\n+\n+} // namespace duckdb\ndiff --git a/src/main/capi/cast/utils-c.cpp b/src/main/capi/cast/utils-c.cpp\nnew file mode 100644\nindex 000000000000..10855c54bdde\n--- /dev/null\n+++ b/src/main/capi/cast/utils-c.cpp\n@@ -0,0 +1,90 @@\n+#include \"duckdb/main/capi/cast/utils.hpp\"\n+\n+namespace duckdb {\n+\n+template <>\n+duckdb_decimal FetchDefaultValue::Operation() {\n+\tduckdb_decimal result;\n+\tresult.scale = 0;\n+\tresult.width = 0;\n+\tresult.value = {0, 0};\n+\treturn result;\n+}\n+\n+template <>\n+date_t FetchDefaultValue::Operation() {\n+\tdate_t result;\n+\tresult.days = 0;\n+\treturn result;\n+}\n+\n+template <>\n+dtime_t FetchDefaultValue::Operation() {\n+\tdtime_t result;\n+\tresult.micros = 0;\n+\treturn result;\n+}\n+\n+template <>\n+timestamp_t FetchDefaultValue::Operation() {\n+\ttimestamp_t result;\n+\tresult.value = 0;\n+\treturn result;\n+}\n+\n+template <>\n+interval_t FetchDefaultValue::Operation() {\n+\tinterval_t result;\n+\tresult.months = 0;\n+\tresult.days = 0;\n+\tresult.micros = 0;\n+\treturn result;\n+}\n+\n+template <>\n+char *FetchDefaultValue::Operation() {\n+\treturn nullptr;\n+}\n+\n+template <>\n+duckdb_blob FetchDefaultValue::Operation() {\n+\tduckdb_blob result;\n+\tresult.data = nullptr;\n+\tresult.size = 0;\n+\treturn result;\n+}\n+\n+//===--------------------------------------------------------------------===//\n+// Blob Casts\n+//===--------------------------------------------------------------------===//\n+\n+template <>\n+bool FromCBlobCastWrapper::Operation(duckdb_blob input, char *&result) {\n+\tstring_t input_str((const char *)input.data, input.size);\n+\treturn ToCStringCastWrapper<duckdb::CastFromBlob>::template Operation<string_t, char *>(input_str, result);\n+}\n+\n+} // namespace duckdb\n+\n+bool CanUseDeprecatedFetch(duckdb_result *result, idx_t col, idx_t row) {\n+\tif (!result) {\n+\t\treturn false;\n+\t}\n+\tif (!duckdb::deprecated_materialize_result(result)) {\n+\t\treturn false;\n+\t}\n+\tif (col >= result->__deprecated_column_count || row >= result->__deprecated_row_count) {\n+\t\treturn false;\n+\t}\n+\treturn true;\n+}\n+\n+bool CanFetchValue(duckdb_result *result, idx_t col, idx_t row) {\n+\tif (!CanUseDeprecatedFetch(result, col, row)) {\n+\t\treturn false;\n+\t}\n+\tif (result->__deprecated_columns[col].__deprecated_nullmask[row]) {\n+\t\treturn false;\n+\t}\n+\treturn true;\n+}\ndiff --git a/src/main/capi/config-c.cpp b/src/main/capi/config-c.cpp\nindex 2a89c89f51e2..e7c2e797f338 100644\n--- a/src/main/capi/config-c.cpp\n+++ b/src/main/capi/config-c.cpp\n@@ -1,4 +1,4 @@\n-#include \"duckdb/main/capi_internal.hpp\"\n+#include \"duckdb/main/capi/capi_internal.hpp\"\n #include \"duckdb/main/config.hpp\"\n #include \"duckdb/common/types/value.hpp\"\n \ndiff --git a/src/main/capi/data_chunk-c.cpp b/src/main/capi/data_chunk-c.cpp\nindex 4f5c58821b8e..bf87b89ca495 100644\n--- a/src/main/capi/data_chunk-c.cpp\n+++ b/src/main/capi/data_chunk-c.cpp\n@@ -1,4 +1,4 @@\n-#include \"duckdb/main/capi_internal.hpp\"\n+#include \"duckdb/main/capi/capi_internal.hpp\"\n #include \"duckdb/common/types/data_chunk.hpp\"\n #include \"duckdb/common/types/string_type.hpp\"\n #include <string.h>\ndiff --git a/src/main/capi/datetime-c.cpp b/src/main/capi/datetime-c.cpp\nindex a26fa5bb74bb..1a3390eb79dc 100644\n--- a/src/main/capi/datetime-c.cpp\n+++ b/src/main/capi/datetime-c.cpp\n@@ -1,4 +1,4 @@\n-#include \"duckdb/main/capi_internal.hpp\"\n+#include \"duckdb/main/capi/capi_internal.hpp\"\n #include \"duckdb/common/types/date.hpp\"\n #include \"duckdb/common/types/time.hpp\"\n #include \"duckdb/common/types/timestamp.hpp\"\ndiff --git a/src/main/capi/duckdb-c.cpp b/src/main/capi/duckdb-c.cpp\nindex 7a1bbcf210aa..55af050d8fc7 100644\n--- a/src/main/capi/duckdb-c.cpp\n+++ b/src/main/capi/duckdb-c.cpp\n@@ -1,4 +1,4 @@\n-#include \"duckdb/main/capi_internal.hpp\"\n+#include \"duckdb/main/capi/capi_internal.hpp\"\n \n using duckdb::Connection;\n using duckdb::DatabaseData;\ndiff --git a/src/main/capi/duckdb_value-c.cpp b/src/main/capi/duckdb_value-c.cpp\nindex 8606eb4ed3eb..af212d7599b9 100644\n--- a/src/main/capi/duckdb_value-c.cpp\n+++ b/src/main/capi/duckdb_value-c.cpp\n@@ -1,4 +1,4 @@\n-#include \"duckdb/main/capi_internal.hpp\"\n+#include \"duckdb/main/capi/capi_internal.hpp\"\n \n void duckdb_destroy_value(duckdb_value *value) {\n \tif (value && *value) {\ndiff --git a/src/main/capi/helper-c.cpp b/src/main/capi/helper-c.cpp\nindex 6e635cb8edee..3aab134a9f74 100644\n--- a/src/main/capi/helper-c.cpp\n+++ b/src/main/capi/helper-c.cpp\n@@ -1,4 +1,4 @@\n-#include \"duckdb/main/capi_internal.hpp\"\n+#include \"duckdb/main/capi/capi_internal.hpp\"\n \n namespace duckdb {\n \ndiff --git a/src/main/capi/hugeint-c.cpp b/src/main/capi/hugeint-c.cpp\nindex 253190039aae..337ec498c636 100644\n--- a/src/main/capi/hugeint-c.cpp\n+++ b/src/main/capi/hugeint-c.cpp\n@@ -1,7 +1,9 @@\n-#include \"duckdb/main/capi_internal.hpp\"\n+#include \"duckdb/main/capi/capi_internal.hpp\"\n #include \"duckdb/common/types/hugeint.hpp\"\n #include \"duckdb/common/types/decimal.hpp\"\n #include \"duckdb/common/operator/decimal_cast_operators.hpp\"\n+#include \"duckdb/main/capi/cast/utils.hpp\"\n+#include \"duckdb/main/capi/cast/to_decimal.hpp\"\n \n using duckdb::Hugeint;\n using duckdb::hugeint_t;\n@@ -14,6 +16,26 @@ double duckdb_hugeint_to_double(duckdb_hugeint val) {\n \treturn Hugeint::Cast<double>(internal);\n }\n \n+static duckdb_decimal to_decimal_cast(double val, uint8_t width, uint8_t scale) {\n+\tif (width > duckdb::Decimal::MAX_WIDTH_INT64) {\n+\t\treturn duckdb::TryCastToDecimalCInternal<double, duckdb::ToCDecimalCastWrapper<hugeint_t>>(val, width, scale);\n+\t}\n+\tif (width > duckdb::Decimal::MAX_WIDTH_INT32) {\n+\t\treturn duckdb::TryCastToDecimalCInternal<double, duckdb::ToCDecimalCastWrapper<int64_t>>(val, width, scale);\n+\t}\n+\tif (width > duckdb::Decimal::MAX_WIDTH_INT16) {\n+\t\treturn duckdb::TryCastToDecimalCInternal<double, duckdb::ToCDecimalCastWrapper<int32_t>>(val, width, scale);\n+\t}\n+\treturn duckdb::TryCastToDecimalCInternal<double, duckdb::ToCDecimalCastWrapper<int16_t>>(val, width, scale);\n+}\n+\n+duckdb_decimal duckdb_double_to_decimal(double val, uint8_t width, uint8_t scale) {\n+\tif (scale > width || width > duckdb::Decimal::MAX_WIDTH_INT128) {\n+\t\treturn duckdb::FetchDefaultValue::Operation<duckdb_decimal>();\n+\t}\n+\treturn to_decimal_cast(val, width, scale);\n+}\n+\n duckdb_hugeint duckdb_double_to_hugeint(double val) {\n \thugeint_t internal_result;\n \tif (!Value::DoubleIsFinite(val) || !Hugeint::TryConvert<double>(val, internal_result)) {\ndiff --git a/src/main/capi/logical_types-c.cpp b/src/main/capi/logical_types-c.cpp\nindex e940770c71b0..ec8b21aebc86 100644\n--- a/src/main/capi/logical_types-c.cpp\n+++ b/src/main/capi/logical_types-c.cpp\n@@ -1,4 +1,4 @@\n-#include \"duckdb/main/capi_internal.hpp\"\n+#include \"duckdb/main/capi/capi_internal.hpp\"\n \n duckdb_logical_type duckdb_create_logical_type(duckdb_type type) {\n \treturn new duckdb::LogicalType(duckdb::ConvertCTypeToCPP(type));\ndiff --git a/src/main/capi/pending-c.cpp b/src/main/capi/pending-c.cpp\nindex fe8cc501bfcf..7eec61a5f2d9 100644\n--- a/src/main/capi/pending-c.cpp\n+++ b/src/main/capi/pending-c.cpp\n@@ -1,4 +1,4 @@\n-#include \"duckdb/main/capi_internal.hpp\"\n+#include \"duckdb/main/capi/capi_internal.hpp\"\n #include \"duckdb/main/query_result.hpp\"\n #include \"duckdb/main/pending_query_result.hpp\"\n #include \"duckdb/common/preserved_error.hpp\"\ndiff --git a/src/main/capi/prepared-c.cpp b/src/main/capi/prepared-c.cpp\nindex bc9ff0e6e2b8..297c74e80238 100644\n--- a/src/main/capi/prepared-c.cpp\n+++ b/src/main/capi/prepared-c.cpp\n@@ -1,6 +1,7 @@\n-#include \"duckdb/main/capi_internal.hpp\"\n+#include \"duckdb/main/capi/capi_internal.hpp\"\n #include \"duckdb/main/query_result.hpp\"\n #include \"duckdb/main/prepared_statement_data.hpp\"\n+#include \"duckdb/common/types/decimal.hpp\"\n \n using duckdb::Connection;\n using duckdb::date_t;\n@@ -97,11 +98,15 @@ duckdb_state duckdb_bind_int64(duckdb_prepared_statement prepared_statement, idx\n \treturn duckdb_bind_value(prepared_statement, param_idx, Value::BIGINT(val));\n }\n \n-duckdb_state duckdb_bind_hugeint(duckdb_prepared_statement prepared_statement, idx_t param_idx, duckdb_hugeint val) {\n+static hugeint_t duckdb_internal_hugeint(duckdb_hugeint val) {\n \thugeint_t internal;\n \tinternal.lower = val.lower;\n \tinternal.upper = val.upper;\n-\treturn duckdb_bind_value(prepared_statement, param_idx, Value::HUGEINT(internal));\n+\treturn internal;\n+}\n+\n+duckdb_state duckdb_bind_hugeint(duckdb_prepared_statement prepared_statement, idx_t param_idx, duckdb_hugeint val) {\n+\treturn duckdb_bind_value(prepared_statement, param_idx, Value::HUGEINT(duckdb_internal_hugeint(val)));\n }\n \n duckdb_state duckdb_bind_uint8(duckdb_prepared_statement prepared_statement, idx_t param_idx, uint8_t val) {\n@@ -162,6 +167,15 @@ duckdb_state duckdb_bind_varchar_length(duckdb_prepared_statement prepared_state\n \t}\n }\n \n+duckdb_state duckdb_bind_decimal(duckdb_prepared_statement prepared_statement, idx_t param_idx, duckdb_decimal val) {\n+\tauto hugeint_val = duckdb_internal_hugeint(val.value);\n+\tif (val.width > duckdb::Decimal::MAX_WIDTH_INT64) {\n+\t\treturn duckdb_bind_value(prepared_statement, param_idx, Value::DECIMAL(hugeint_val, val.width, val.scale));\n+\t}\n+\tauto value = hugeint_val.lower;\n+\treturn duckdb_bind_value(prepared_statement, param_idx, Value::DECIMAL((int64_t)value, val.width, val.scale));\n+}\n+\n duckdb_state duckdb_bind_blob(duckdb_prepared_statement prepared_statement, idx_t param_idx, const void *data,\n                               idx_t length) {\n \treturn duckdb_bind_value(prepared_statement, param_idx, Value::BLOB((duckdb::const_data_ptr_t)data, length));\ndiff --git a/src/main/capi/replacement_scan-c.cpp b/src/main/capi/replacement_scan-c.cpp\nindex be8597b13012..7cee32a6612c 100644\n--- a/src/main/capi/replacement_scan-c.cpp\n+++ b/src/main/capi/replacement_scan-c.cpp\n@@ -1,4 +1,4 @@\n-#include \"duckdb/main/capi_internal.hpp\"\n+#include \"duckdb/main/capi/capi_internal.hpp\"\n #include \"duckdb/main/config.hpp\"\n #include \"duckdb/parser/tableref/table_function_ref.hpp\"\n #include \"duckdb/parser/expression/constant_expression.hpp\"\ndiff --git a/src/main/capi/result-c.cpp b/src/main/capi/result-c.cpp\nindex 2ea9b1a4b4ca..0e99d5ec04f9 100644\n--- a/src/main/capi/result-c.cpp\n+++ b/src/main/capi/result-c.cpp\n@@ -1,4 +1,4 @@\n-#include \"duckdb/main/capi_internal.hpp\"\n+#include \"duckdb/main/capi/capi_internal.hpp\"\n #include \"duckdb/common/types/timestamp.hpp\"\n #include \"duckdb/common/allocator.hpp\"\n \ndiff --git a/src/main/capi/table_function-c.cpp b/src/main/capi/table_function-c.cpp\nindex 6cb21f5ccfb8..9d28a83cb1af 100644\n--- a/src/main/capi/table_function-c.cpp\n+++ b/src/main/capi/table_function-c.cpp\n@@ -1,4 +1,4 @@\n-#include \"duckdb/main/capi_internal.hpp\"\n+#include \"duckdb/main/capi/capi_internal.hpp\"\n #include \"duckdb/function/table_function.hpp\"\n #include \"duckdb/parser/parsed_data/create_table_function_info.hpp\"\n #include \"duckdb/catalog/catalog.hpp\"\ndiff --git a/src/main/capi/threading-c.cpp b/src/main/capi/threading-c.cpp\nindex b02ae6b12392..e67762dcb8f9 100644\n--- a/src/main/capi/threading-c.cpp\n+++ b/src/main/capi/threading-c.cpp\n@@ -1,4 +1,4 @@\n-#include \"duckdb/main/capi_internal.hpp\"\n+#include \"duckdb/main/capi/capi_internal.hpp\"\n #include \"duckdb/parallel/task_scheduler.hpp\"\n \n using duckdb::DatabaseData;\ndiff --git a/src/main/capi/value-c.cpp b/src/main/capi/value-c.cpp\nindex 21a2fcc38bf3..48c69a1c662c 100644\n--- a/src/main/capi/value-c.cpp\n+++ b/src/main/capi/value-c.cpp\n@@ -1,235 +1,22 @@\n-#include \"duckdb/main/capi_internal.hpp\"\n+#include \"duckdb/main/capi/capi_internal.hpp\"\n #include \"duckdb/common/types/date.hpp\"\n #include \"duckdb/common/types/time.hpp\"\n #include \"duckdb/common/types/timestamp.hpp\"\n-#include \"duckdb/common/operator/cast_operators.hpp\"\n-#include \"duckdb/common/operator/string_cast.hpp\"\n+#include \"duckdb/common/types.hpp\"\n+\n+#include \"duckdb/main/capi/cast/generic.hpp\"\n \n-using duckdb::const_data_ptr_t;\n-using duckdb::Date;\n using duckdb::date_t;\n using duckdb::dtime_t;\n+using duckdb::FetchDefaultValue;\n+using duckdb::GetInternalCValue;\n using duckdb::hugeint_t;\n using duckdb::interval_t;\n-using duckdb::LogicalType;\n-using duckdb::string;\n-using duckdb::string_t;\n-using duckdb::Time;\n-using duckdb::Timestamp;\n+using duckdb::StringCast;\n using duckdb::timestamp_t;\n-using duckdb::Value;\n-using duckdb::Vector;\n-\n-namespace duckdb {\n-\n-//===--------------------------------------------------------------------===//\n-// Unsafe Fetch (for internal use only)\n-//===--------------------------------------------------------------------===//\n-template <class T>\n-T UnsafeFetch(duckdb_result *result, idx_t col, idx_t row) {\n-\tD_ASSERT(row < result->__deprecated_row_count);\n-\treturn ((T *)result->__deprecated_columns[col].__deprecated_data)[row];\n-}\n-\n-//===--------------------------------------------------------------------===//\n-// Fetch Default Value\n-//===--------------------------------------------------------------------===//\n-struct FetchDefaultValue {\n-\ttemplate <class T>\n-\tstatic T Operation() {\n-\t\treturn 0;\n-\t}\n-};\n-\n-template <>\n-date_t FetchDefaultValue::Operation() {\n-\tdate_t result;\n-\tresult.days = 0;\n-\treturn result;\n-}\n-\n-template <>\n-dtime_t FetchDefaultValue::Operation() {\n-\tdtime_t result;\n-\tresult.micros = 0;\n-\treturn result;\n-}\n-\n-template <>\n-timestamp_t FetchDefaultValue::Operation() {\n-\ttimestamp_t result;\n-\tresult.value = 0;\n-\treturn result;\n-}\n-\n-template <>\n-interval_t FetchDefaultValue::Operation() {\n-\tinterval_t result;\n-\tresult.months = 0;\n-\tresult.days = 0;\n-\tresult.micros = 0;\n-\treturn result;\n-}\n-\n-template <>\n-char *FetchDefaultValue::Operation() {\n-\treturn nullptr;\n-}\n-\n-template <>\n-duckdb_blob FetchDefaultValue::Operation() {\n-\tduckdb_blob result;\n-\tresult.data = nullptr;\n-\tresult.size = 0;\n-\treturn result;\n-}\n-\n-//===--------------------------------------------------------------------===//\n-// String Casts\n-//===--------------------------------------------------------------------===//\n-template <class OP>\n-struct FromCStringCastWrapper {\n-\ttemplate <class SOURCE_TYPE, class RESULT_TYPE>\n-\tstatic bool Operation(SOURCE_TYPE input_str, RESULT_TYPE &result) {\n-\t\tstring_t input(input_str);\n-\t\treturn OP::template Operation<string_t, RESULT_TYPE>(input, result);\n-\t}\n-};\n-\n-template <class OP>\n-struct ToCStringCastWrapper {\n-\ttemplate <class SOURCE_TYPE, class RESULT_TYPE>\n-\tstatic bool Operation(SOURCE_TYPE input, RESULT_TYPE &result) {\n-\t\tVector result_vector(LogicalType::VARCHAR, nullptr);\n-\t\tauto result_string = OP::template Operation<SOURCE_TYPE>(input, result_vector);\n-\t\tauto result_size = result_string.GetSize();\n-\t\tauto result_data = result_string.GetDataUnsafe();\n-\n-\t\tresult = (char *)duckdb_malloc(result_size + 1);\n-\t\tmemcpy(result, result_data, result_size);\n-\t\tresult[result_size] = '\\0';\n-\t\treturn true;\n-\t}\n-};\n-\n-//===--------------------------------------------------------------------===//\n-// Blob Casts\n-//===--------------------------------------------------------------------===//\n-struct FromCBlobCastWrapper {\n-\ttemplate <class SOURCE_TYPE, class RESULT_TYPE>\n-\tstatic bool Operation(SOURCE_TYPE input_str, RESULT_TYPE &result) {\n-\t\treturn false;\n-\t}\n-};\n-\n-template <>\n-bool FromCBlobCastWrapper::Operation(duckdb_blob input, char *&result) {\n-\tstring_t input_str((const char *)input.data, input.size);\n-\treturn ToCStringCastWrapper<duckdb::CastFromBlob>::template Operation<string_t, char *>(input_str, result);\n-}\n-\n-} // namespace duckdb\n-\n-using duckdb::FetchDefaultValue;\n-using duckdb::FromCBlobCastWrapper;\n-using duckdb::FromCStringCastWrapper;\n using duckdb::ToCStringCastWrapper;\n using duckdb::UnsafeFetch;\n \n-//===--------------------------------------------------------------------===//\n-// Templated Casts\n-//===--------------------------------------------------------------------===//\n-template <class SOURCE_TYPE, class RESULT_TYPE, class OP>\n-RESULT_TYPE TryCastCInternal(duckdb_result *result, idx_t col, idx_t row) {\n-\tRESULT_TYPE result_value;\n-\ttry {\n-\t\tif (!OP::template Operation<SOURCE_TYPE, RESULT_TYPE>(UnsafeFetch<SOURCE_TYPE>(result, col, row),\n-\t\t                                                      result_value)) {\n-\t\t\treturn FetchDefaultValue::Operation<RESULT_TYPE>();\n-\t\t}\n-\t} catch (...) {\n-\t\treturn FetchDefaultValue::Operation<RESULT_TYPE>();\n-\t}\n-\treturn result_value;\n-}\n-\n-static bool CanUseDeprecatedFetch(duckdb_result *result, idx_t col, idx_t row) {\n-\tif (!result) {\n-\t\treturn false;\n-\t}\n-\tif (!duckdb::deprecated_materialize_result(result)) {\n-\t\treturn false;\n-\t}\n-\tif (col >= result->__deprecated_column_count || row >= result->__deprecated_row_count) {\n-\t\treturn false;\n-\t}\n-\treturn true;\n-}\n-\n-static bool CanFetchValue(duckdb_result *result, idx_t col, idx_t row) {\n-\tif (!CanUseDeprecatedFetch(result, col, row)) {\n-\t\treturn false;\n-\t}\n-\tif (result->__deprecated_columns[col].__deprecated_nullmask[row]) {\n-\t\treturn false;\n-\t}\n-\treturn true;\n-}\n-\n-template <class RESULT_TYPE, class OP = duckdb::TryCast>\n-static RESULT_TYPE GetInternalCValue(duckdb_result *result, idx_t col, idx_t row) {\n-\tif (!CanFetchValue(result, col, row)) {\n-\t\treturn FetchDefaultValue::Operation<RESULT_TYPE>();\n-\t}\n-\tswitch (result->__deprecated_columns[col].__deprecated_type) {\n-\tcase DUCKDB_TYPE_BOOLEAN:\n-\t\treturn TryCastCInternal<bool, RESULT_TYPE, OP>(result, col, row);\n-\tcase DUCKDB_TYPE_TINYINT:\n-\t\treturn TryCastCInternal<int8_t, RESULT_TYPE, OP>(result, col, row);\n-\tcase DUCKDB_TYPE_SMALLINT:\n-\t\treturn TryCastCInternal<int16_t, RESULT_TYPE, OP>(result, col, row);\n-\tcase DUCKDB_TYPE_INTEGER:\n-\t\treturn TryCastCInternal<int32_t, RESULT_TYPE, OP>(result, col, row);\n-\tcase DUCKDB_TYPE_BIGINT:\n-\t\treturn TryCastCInternal<int64_t, RESULT_TYPE, OP>(result, col, row);\n-\tcase DUCKDB_TYPE_UTINYINT:\n-\t\treturn TryCastCInternal<uint8_t, RESULT_TYPE, OP>(result, col, row);\n-\tcase DUCKDB_TYPE_USMALLINT:\n-\t\treturn TryCastCInternal<uint16_t, RESULT_TYPE, OP>(result, col, row);\n-\tcase DUCKDB_TYPE_UINTEGER:\n-\t\treturn TryCastCInternal<uint32_t, RESULT_TYPE, OP>(result, col, row);\n-\tcase DUCKDB_TYPE_UBIGINT:\n-\t\treturn TryCastCInternal<uint64_t, RESULT_TYPE, OP>(result, col, row);\n-\tcase DUCKDB_TYPE_FLOAT:\n-\t\treturn TryCastCInternal<float, RESULT_TYPE, OP>(result, col, row);\n-\tcase DUCKDB_TYPE_DOUBLE:\n-\t\treturn TryCastCInternal<double, RESULT_TYPE, OP>(result, col, row);\n-\tcase DUCKDB_TYPE_DATE:\n-\t\treturn TryCastCInternal<date_t, RESULT_TYPE, OP>(result, col, row);\n-\tcase DUCKDB_TYPE_TIME:\n-\t\treturn TryCastCInternal<dtime_t, RESULT_TYPE, OP>(result, col, row);\n-\tcase DUCKDB_TYPE_TIMESTAMP:\n-\t\treturn TryCastCInternal<timestamp_t, RESULT_TYPE, OP>(result, col, row);\n-\tcase DUCKDB_TYPE_HUGEINT:\n-\t\treturn TryCastCInternal<hugeint_t, RESULT_TYPE, OP>(result, col, row);\n-\tcase DUCKDB_TYPE_DECIMAL:\n-\t\treturn TryCastCInternal<hugeint_t, RESULT_TYPE, OP>(result, col, row);\n-\tcase DUCKDB_TYPE_INTERVAL:\n-\t\treturn TryCastCInternal<interval_t, RESULT_TYPE, OP>(result, col, row);\n-\tcase DUCKDB_TYPE_VARCHAR:\n-\t\treturn TryCastCInternal<char *, RESULT_TYPE, FromCStringCastWrapper<OP>>(result, col, row);\n-\tcase DUCKDB_TYPE_BLOB:\n-\t\treturn TryCastCInternal<duckdb_blob, RESULT_TYPE, FromCBlobCastWrapper>(result, col, row);\n-\tdefault: // LCOV_EXCL_START\n-\t\t// invalid type for C to C++ conversion\n-\t\tD_ASSERT(0);\n-\t\treturn FetchDefaultValue::Operation<RESULT_TYPE>();\n-\t} // LCOV_EXCL_STOP\n-}\n-\n-//===--------------------------------------------------------------------===//\n-// duckdb_value_ functions\n-//===--------------------------------------------------------------------===//\n bool duckdb_value_boolean(duckdb_result *result, idx_t col, idx_t row) {\n \treturn GetInternalCValue<bool>(result, col, row);\n }\n@@ -250,16 +37,25 @@ int64_t duckdb_value_int64(duckdb_result *result, idx_t col, idx_t row) {\n \treturn GetInternalCValue<int64_t>(result, col, row);\n }\n \n-duckdb_decimal duckdb_value_decimal(duckdb_result *result, idx_t col, idx_t row) {\n-\tduckdb_decimal result_value;\n-\n+static bool ResultIsDecimal(duckdb_result *result, idx_t col) {\n+\tif (!result) {\n+\t\treturn false;\n+\t}\n+\tif (!result->internal_data) {\n+\t\treturn false;\n+\t}\n \tauto result_data = (duckdb::DuckDBResultData *)result->internal_data;\n-\tresult_data->result->types[col].GetDecimalProperties(result_value.width, result_value.scale);\n+\tauto &query_result = result_data->result;\n+\tauto &source_type = query_result->types[col];\n+\treturn source_type.id() == duckdb::LogicalTypeId::DECIMAL;\n+}\n \n-\tauto internal_value = GetInternalCValue<hugeint_t>(result, col, row);\n-\tresult_value.value.lower = internal_value.lower;\n-\tresult_value.value.upper = internal_value.upper;\n-\treturn result_value;\n+duckdb_decimal duckdb_value_decimal(duckdb_result *result, idx_t col, idx_t row) {\n+\tif (!CanFetchValue(result, col, row) || !ResultIsDecimal(result, col)) {\n+\t\treturn FetchDefaultValue::Operation<duckdb_decimal>();\n+\t}\n+\n+\treturn GetInternalCValue<duckdb_decimal>(result, col, row);\n }\n \n duckdb_hugeint duckdb_value_hugeint(duckdb_result *result, idx_t col, idx_t row) {\n@@ -322,7 +118,7 @@ duckdb_interval duckdb_value_interval(duckdb_result *result, idx_t col, idx_t ro\n }\n \n char *duckdb_value_varchar(duckdb_result *result, idx_t col, idx_t row) {\n-\treturn GetInternalCValue<char *, ToCStringCastWrapper<duckdb::StringCast>>(result, col, row);\n+\treturn GetInternalCValue<char *, ToCStringCastWrapper<StringCast>>(result, col, row);\n }\n \n char *duckdb_value_varchar_internal(duckdb_result *result, idx_t col, idx_t row) {\n",
  "test_patch": "diff --git a/test/api/capi/CMakeLists.txt b/test/api/capi/CMakeLists.txt\nindex d30f4d1429b9..160dc3c19bcb 100644\n--- a/test/api/capi/CMakeLists.txt\n+++ b/test/api/capi/CMakeLists.txt\n@@ -11,6 +11,7 @@ add_library_unity(\n   test_capi_prepared.cpp\n   test_capi_website.cpp\n   test_capi_complex_types.cpp\n+  test_capi_to_decimal.cpp\n   test_capi_replacement_scan.cpp)\n set(ALL_OBJECT_FILES\n     ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:test_sql_capi>\ndiff --git a/test/api/capi/test_capi.cpp b/test/api/capi/test_capi.cpp\nindex 60e54ea425ef..cca63177955f 100644\n--- a/test/api/capi/test_capi.cpp\n+++ b/test/api/capi/test_capi.cpp\n@@ -3,6 +3,18 @@\n using namespace duckdb;\n using namespace std;\n \n+static void require_hugeint_eq(duckdb_hugeint left, duckdb_hugeint right) {\n+\tREQUIRE(left.lower == right.lower);\n+\tREQUIRE(left.upper == right.upper);\n+}\n+\n+static void require_hugeint_eq(duckdb_hugeint left, uint64_t lower, int64_t upper) {\n+\tduckdb_hugeint temp;\n+\ttemp.lower = lower;\n+\ttemp.upper = upper;\n+\trequire_hugeint_eq(left, temp);\n+}\n+\n TEST_CASE(\"Basic test of C API\", \"[capi]\") {\n \tCAPITester tester;\n \tunique_ptr<CAPIResult> result;\n@@ -255,14 +267,125 @@ TEST_CASE(\"Test different types of C API\", \"[capi]\") {\n \tduckdb_decimal decimal = result->Fetch<duckdb_decimal>(0, 1);\n \tREQUIRE(duckdb_decimal_to_double(decimal) == 12.3);\n \t// test more decimal physical types\n-\tresult = tester.Query(\"SELECT 1.2::DECIMAL(4,1), 100.3::DECIMAL(9,1), 320938.4298::DECIMAL(18,4), \"\n-\t                      \"49082094824.904820482094::DECIMAL(30,12), NULL::DECIMAL\");\n+\tresult = tester.Query(\"SELECT \"\n+\t                      \"1.2::DECIMAL(4,1),\"\n+\t                      \"100.3::DECIMAL(9,1),\"\n+\t                      \"-320938.4298::DECIMAL(18,4),\"\n+\t                      \"49082094824.904820482094::DECIMAL(30,12),\"\n+\t                      \"NULL::DECIMAL\");\n \tREQUIRE_NO_FAIL(*result);\n \tREQUIRE(duckdb_decimal_to_double(result->Fetch<duckdb_decimal>(0, 0)) == 1.2);\n \tREQUIRE(duckdb_decimal_to_double(result->Fetch<duckdb_decimal>(1, 0)) == 100.3);\n-\tREQUIRE(duckdb_decimal_to_double(result->Fetch<duckdb_decimal>(2, 0)) == 320938.4298);\n+\tREQUIRE(duckdb_decimal_to_double(result->Fetch<duckdb_decimal>(2, 0)) == -320938.4298);\n \tREQUIRE(duckdb_decimal_to_double(result->Fetch<duckdb_decimal>(3, 0)) == 49082094824.904820482094);\n+\tREQUIRE(duckdb_decimal_to_double(result->Fetch<duckdb_decimal>(4, 0)) == 0.0);\n+\n+\tREQUIRE(!result->IsNull(0, 0));\n+\tREQUIRE(!result->IsNull(1, 0));\n+\tREQUIRE(!result->IsNull(2, 0));\n+\tREQUIRE(!result->IsNull(3, 0));\n \tREQUIRE(result->IsNull(4, 0));\n+\n+\tREQUIRE(result->Fetch<bool>(0, 0) == true);\n+\tREQUIRE(result->Fetch<bool>(1, 0) == true);\n+\tREQUIRE(result->Fetch<bool>(2, 0) == true);\n+\tREQUIRE(result->Fetch<bool>(3, 0) == true);\n+\tREQUIRE(result->Fetch<bool>(4, 0) == false);\n+\n+\tREQUIRE(result->Fetch<int8_t>(0, 0) == 1);\n+\tREQUIRE(result->Fetch<int8_t>(1, 0) == 100);\n+\tREQUIRE(result->Fetch<int8_t>(2, 0) == 0); // overflow\n+\tREQUIRE(result->Fetch<int8_t>(3, 0) == 0); // overflow\n+\tREQUIRE(result->Fetch<int8_t>(4, 0) == 0);\n+\n+\tREQUIRE(result->Fetch<uint8_t>(0, 0) == 1);\n+\tREQUIRE(result->Fetch<uint8_t>(1, 0) == 100);\n+\tREQUIRE(result->Fetch<uint8_t>(2, 0) == 0); // overflow\n+\tREQUIRE(result->Fetch<uint8_t>(3, 0) == 0); // overflow\n+\tREQUIRE(result->Fetch<uint8_t>(4, 0) == 0);\n+\n+\tREQUIRE(result->Fetch<int16_t>(0, 0) == 1);\n+\tREQUIRE(result->Fetch<int16_t>(1, 0) == 100);\n+\tREQUIRE(result->Fetch<int16_t>(2, 0) == 0); // overflow\n+\tREQUIRE(result->Fetch<int16_t>(3, 0) == 0); // overflow\n+\tREQUIRE(result->Fetch<int16_t>(4, 0) == 0);\n+\n+\tREQUIRE(result->Fetch<uint16_t>(0, 0) == 1);\n+\tREQUIRE(result->Fetch<uint16_t>(1, 0) == 100);\n+\tREQUIRE(result->Fetch<uint16_t>(2, 0) == 0); // overflow\n+\tREQUIRE(result->Fetch<uint16_t>(3, 0) == 0); // overflow\n+\tREQUIRE(result->Fetch<uint16_t>(4, 0) == 0);\n+\n+\tREQUIRE(result->Fetch<int32_t>(0, 0) == 1);\n+\tREQUIRE(result->Fetch<int32_t>(1, 0) == 100);\n+\tREQUIRE(result->Fetch<int32_t>(2, 0) == -320938);\n+\tREQUIRE(result->Fetch<int32_t>(3, 0) == 0); // overflow\n+\tREQUIRE(result->Fetch<int32_t>(4, 0) == 0);\n+\n+\tREQUIRE(result->Fetch<uint32_t>(0, 0) == 1);\n+\tREQUIRE(result->Fetch<uint32_t>(1, 0) == 100);\n+\tREQUIRE(result->Fetch<uint32_t>(2, 0) == 0); // overflow\n+\tREQUIRE(result->Fetch<uint32_t>(3, 0) == 0); // overflow\n+\tREQUIRE(result->Fetch<uint32_t>(4, 0) == 0);\n+\n+\tREQUIRE(result->Fetch<int64_t>(0, 0) == 1);\n+\tREQUIRE(result->Fetch<int64_t>(1, 0) == 100);\n+\tREQUIRE(result->Fetch<int64_t>(2, 0) == -320938);\n+\tREQUIRE(result->Fetch<int64_t>(3, 0) == 49082094825); // ceiling\n+\tREQUIRE(result->Fetch<int64_t>(4, 0) == 0);\n+\n+\tREQUIRE(result->Fetch<uint64_t>(0, 0) == 1);\n+\tREQUIRE(result->Fetch<uint64_t>(1, 0) == 100);\n+\tREQUIRE(result->Fetch<uint64_t>(2, 0) == 0); // overflow\n+\tREQUIRE(result->Fetch<uint64_t>(3, 0) == 49082094825);\n+\tREQUIRE(result->Fetch<uint64_t>(4, 0) == 0);\n+\n+\trequire_hugeint_eq(result->Fetch<duckdb_hugeint>(0, 0), 1, 0);\n+\trequire_hugeint_eq(result->Fetch<duckdb_hugeint>(1, 0), 100, 0);\n+\trequire_hugeint_eq(result->Fetch<duckdb_hugeint>(2, 0), 18446744073709230678ul, -1);\n+\trequire_hugeint_eq(result->Fetch<duckdb_hugeint>(3, 0), 49082094825, 0);\n+\trequire_hugeint_eq(result->Fetch<duckdb_hugeint>(4, 0), 0, 0);\n+\n+\tREQUIRE(result->Fetch<float>(0, 0) == 1.2f);\n+\tREQUIRE(result->Fetch<float>(1, 0) == 100.3f);\n+\tREQUIRE(floor(result->Fetch<float>(2, 0)) == -320939);\n+\tREQUIRE(floor(result->Fetch<float>(3, 0)) == 49082094824);\n+\tREQUIRE(result->Fetch<float>(4, 0) == 0.0);\n+\n+\tREQUIRE(result->Fetch<double>(0, 0) == 1.2);\n+\tREQUIRE(result->Fetch<double>(1, 0) == 100.3);\n+\tREQUIRE(result->Fetch<double>(2, 0) == -320938.4298);\n+\tREQUIRE(result->Fetch<double>(3, 0) == 49082094824.904820482094);\n+\tREQUIRE(result->Fetch<double>(4, 0) == 0.0);\n+\n+\tREQUIRE(result->Fetch<string>(0, 0) == \"1.2\");\n+\tREQUIRE(result->Fetch<string>(1, 0) == \"100.3\");\n+\tREQUIRE(result->Fetch<string>(2, 0) == \"-320938.4298\");\n+\tREQUIRE(result->Fetch<string>(3, 0) == \"49082094824.904820482094\");\n+\tREQUIRE(result->Fetch<string>(4, 0) == \"\");\n+\n+\tresult = tester.Query(\"SELECT -123.45::DECIMAL(5,2)\");\n+\tREQUIRE_NO_FAIL(*result);\n+\tREQUIRE(result->Fetch<bool>(0, 0) == true);\n+\tREQUIRE(result->Fetch<int8_t>(0, 0) == -123);\n+\tREQUIRE(result->Fetch<uint8_t>(0, 0) == 0);\n+\tREQUIRE(result->Fetch<int16_t>(0, 0) == -123);\n+\tREQUIRE(result->Fetch<uint16_t>(0, 0) == 0);\n+\tREQUIRE(result->Fetch<int32_t>(0, 0) == -123);\n+\tREQUIRE(result->Fetch<uint32_t>(0, 0) == 0);\n+\tREQUIRE(result->Fetch<int64_t>(0, 0) == -123);\n+\tREQUIRE(result->Fetch<uint64_t>(0, 0) == 0);\n+\n+\thugeint_t expected_hugeint_val;\n+\tHugeint::TryConvert(-123, expected_hugeint_val);\n+\tduckdb_hugeint expected_val;\n+\texpected_val.lower = expected_hugeint_val.lower;\n+\texpected_val.upper = expected_hugeint_val.upper;\n+\trequire_hugeint_eq(result->Fetch<duckdb_hugeint>(0, 0), expected_val);\n+\n+\tREQUIRE(result->Fetch<float>(0, 0) == -123.45f);\n+\tREQUIRE(result->Fetch<double>(0, 0) == -123.45);\n+\tREQUIRE(result->Fetch<string>(0, 0) == \"-123.45\");\n }\n \n TEST_CASE(\"Test errors in C API\", \"[capi]\") {\n@@ -423,3 +546,22 @@ TEST_CASE(\"Issue #2058: Cleanup after execution of invalid SQL statement causes\n \tduckdb_disconnect(&con);\n \tduckdb_close(&db);\n }\n+\n+TEST_CASE(\"Decimal -> Double casting issue\", \"[capi]\") {\n+\n+\tCAPITester tester;\n+\tunique_ptr<CAPIResult> result;\n+\n+\t// open the database in in-memory mode\n+\tREQUIRE(tester.OpenDatabase(nullptr));\n+\n+\tresult = tester.Query(\"select -0.5;\");\n+\tREQUIRE_NO_FAIL(*result);\n+\n+\tREQUIRE(result->ColumnType(0) == DUCKDB_TYPE_DECIMAL);\n+\tauto double_from_decimal = result->Fetch<double>(0, 0);\n+\tREQUIRE(double_from_decimal == (double)-0.5);\n+\n+\tauto string_from_decimal = result->Fetch<string>(0, 0);\n+\tREQUIRE(string_from_decimal == \"-0.5\");\n+}\ndiff --git a/test/api/capi/test_capi_prepared.cpp b/test/api/capi/test_capi_prepared.cpp\nindex 0ba93cb41db0..f2c3c121da6f 100644\n--- a/test/api/capi/test_capi_prepared.cpp\n+++ b/test/api/capi/test_capi_prepared.cpp\n@@ -57,6 +57,18 @@ TEST_CASE(\"Test prepared statements in C API\", \"[capi]\") {\n \tREQUIRE(duckdb_hugeint_to_double(duckdb_value_hugeint(&res, 0, 0)) == 64.0);\n \tduckdb_destroy_result(&res);\n \n+\t// Fetching a DECIMAL from a non-DECIMAL result returns 0\n+\tduckdb_decimal decimal = duckdb_double_to_decimal(634.3453, 7, 4);\n+\tduckdb_bind_decimal(stmt, 1, decimal);\n+\tstatus = duckdb_execute_prepared(stmt, &res);\n+\tREQUIRE(status == DuckDBSuccess);\n+\tduckdb_decimal result_decimal = duckdb_value_decimal(&res, 0, 0);\n+\tREQUIRE(result_decimal.scale == 0);\n+\tREQUIRE(result_decimal.width == 0);\n+\tREQUIRE(result_decimal.value.upper == 0);\n+\tREQUIRE(result_decimal.value.lower == 0);\n+\tduckdb_destroy_result(&res);\n+\n \tduckdb_bind_uint8(stmt, 1, 8);\n \tstatus = duckdb_execute_prepared(stmt, &res);\n \tREQUIRE(status == DuckDBSuccess);\ndiff --git a/test/api/capi/test_capi_to_decimal.cpp b/test/api/capi/test_capi_to_decimal.cpp\nnew file mode 100644\nindex 000000000000..eea82e52f0f8\n--- /dev/null\n+++ b/test/api/capi/test_capi_to_decimal.cpp\n@@ -0,0 +1,62 @@\n+#include \"capi_tester.hpp\"\n+#include \"duckdb.h\"\n+\n+using namespace duckdb;\n+using namespace std;\n+\n+int64_t Difference(int64_t left, int64_t right) {\n+\treturn abs(left - right);\n+}\n+\n+void CompareDuckDBDecimal(const duckdb_decimal &left, const duckdb_decimal &right) {\n+\tREQUIRE(left.scale == right.scale);\n+\tREQUIRE(left.width == right.width);\n+\tREQUIRE(left.value.upper == right.value.upper);\n+}\n+\n+void TestFetchAsDecimal(CAPITester &tester, string query, string type_cast) {\n+\tauto result = tester.Query(StringUtil::Format(query, type_cast));\n+\tREQUIRE_NO_FAIL(*result);\n+\n+\t// (ANYTHING BUT DECIMAL) -> DECIMAL results in 0\n+\tduckdb_decimal expected_res;\n+\texpected_res.scale = 0;\n+\texpected_res.width = 0;\n+\texpected_res.value.lower = 0;\n+\texpected_res.value.upper = 0;\n+\n+\tauto converted_res = result->Fetch<duckdb_decimal>(0, 0);\n+\tCompareDuckDBDecimal(expected_res, converted_res);\n+}\n+\n+TEST_CASE(\"Test CAPI duckdb_decimal_as_properties\", \"[capi]\") {\n+\tCAPITester tester;\n+\n+\t// open the database in in-memory mode\n+\tREQUIRE(tester.OpenDatabase(nullptr));\n+\n+\t//! From DOUBLE\n+\tTestFetchAsDecimal(tester, \"SELECT CAST(123.45678 AS %s)\", \"DOUBLE\");\n+\t//! From FLOAT\n+\tTestFetchAsDecimal(tester, \"SELECT CAST(123.45678 AS %s)\", \"FLOAT\");\n+\t//! From HUGEINT\n+\tTestFetchAsDecimal(tester, \"SELECT CAST(123124 AS %s)\", \"HUGEINT\");\n+\t//! From BIGINT\n+\tTestFetchAsDecimal(tester, \"SELECT CAST(123124 AS %s)\", \"BIGINT\");\n+\t//! From UBIGINT\n+\tTestFetchAsDecimal(tester, \"SELECT CAST(123124 AS %s)\", \"UBIGINT\");\n+\t//! From INTEGER\n+\tTestFetchAsDecimal(tester, \"SELECT CAST(123124 AS %s)\", \"INTEGER\");\n+\t//! From UINTEGER\n+\tTestFetchAsDecimal(tester, \"SELECT CAST(123124 AS %s)\", \"UINTEGER\");\n+\t//! From SMALLINT\n+\tTestFetchAsDecimal(tester, \"SELECT CAST(12312 AS %s)\", \"SMALLINT\");\n+\t//! From USMALLINT\n+\tTestFetchAsDecimal(tester, \"SELECT CAST(12312 AS %s)\", \"USMALLINT\");\n+\t//! From TINYINT\n+\tTestFetchAsDecimal(tester, \"SELECT CAST(-123 AS %s)\", \"TINYINT\");\n+\t//! From UTINYINT\n+\tTestFetchAsDecimal(tester, \"SELECT CAST(255 AS %s)\", \"UTINYINT\");\n+\t//! From VARCHAR\n+\tTestFetchAsDecimal(tester, \"SELECT CAST(123124.2342 AS %s)\", \"VARCHAR\");\n+}\n",
  "problem_statement": "Invalid float-point literal handling in statements like 'SELECT -0.5;'\n### What happens?\n\nHi!\r\n\r\nI've spotted something that seems to be a HUGE bug in number handling. \n\n### To Reproduce\n\nTry the following code:\r\n\r\n```c++\r\nduckdb_database db;\r\nduckdb_connection con;\r\n\r\nassert(duckdb_open(nullptr, &db) == DuckDBSuccess);\r\nassert(duckdb_connect(db, &con) == DuckDBSuccess);\r\n\r\nduckdb_result result;\r\nassert(duckdb_query(con, \"SELECT -0.5;\", &result) == DuckDBSuccess);\r\n\r\nauto type = duckdb_column_type(&result, 0);\r\nauto ff = duckdb_value_double(&result, 0, 0); // 1.8446744073709552E+19\r\nauto str = duckdb_value_varchar(&result, 0, 0); // \"18446744073709551611\"\r\n```\r\n\r\nIf we execute a simple query `SELECT -0.5;` the value is treated as a DECIMAL. If I try getting this value as a double, I get a very strange value of 1.8446744073709552E+19. If I try getting this value as a VARCHAR, I get \"18446744073709551611\". \r\n\r\nIf I try to explicitly specify the value type (i.e. `SELECT -0.5::DOUBLE;`), I get the correct value for all of the calls. If I try `SELECT 0.5;` query, I get just `5` for a double and `\"5\"` for a VARCHAR.\n\n### OS:\n\nmacOS\n\n### DuckDB Version:\n\nv0.4.0, da9ee49\n\n### DuckDB Client:\n\nC++\n\n### Full Name:\n\nIvan Drozdov\n\n### Affiliation:\n\nSMTU\n\n### Have you tried this on the latest `master` branch?\n\n- [X] I agree\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] I agree\n",
  "hints_text": "I think the issue here is this:\r\n```c++\r\n\tcase DUCKDB_TYPE_DECIMAL:\r\n\t\treturn TryCastCInternal<hugeint_t, RESULT_TYPE, OP>(result, col, row);\r\n```\r\nDECIMAL can have different underlying physical types, here it is always assumed to be `hugeint_t`",
  "created_at": "2022-08-29T12:55:09Z"
}