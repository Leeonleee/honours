diff --git a/extension/parquet/column_reader.cpp b/extension/parquet/column_reader.cpp
index 2dc0e2cc3d45..32887c099c99 100644
--- a/extension/parquet/column_reader.cpp
+++ b/extension/parquet/column_reader.cpp
@@ -367,7 +367,8 @@ string_t StringParquetValueConversion::DictRead(ByteBuffer &dict, uint32_t &offs
 }
 
 string_t StringParquetValueConversion::PlainRead(ByteBuffer &plain_data, ColumnReader &reader) {
-	uint32_t str_len = plain_data.read<uint32_t>();
+	auto &scr = ((StringColumnReader &)reader);
+	uint32_t str_len = scr.fixed_width_string_length == 0 ? plain_data.read<uint32_t>() : scr.fixed_width_string_length;
 	plain_data.available(str_len);
 	((StringColumnReader &)reader).VerifyString(plain_data.ptr, str_len);
 	auto ret_str = string_t(plain_data.ptr, str_len);
@@ -376,7 +377,8 @@ string_t StringParquetValueConversion::PlainRead(ByteBuffer &plain_data, ColumnR
 }
 
 void StringParquetValueConversion::PlainSkip(ByteBuffer &plain_data, ColumnReader &reader) {
-	uint32_t str_len = plain_data.read<uint32_t>();
+	auto &scr = ((StringColumnReader &)reader);
+	uint32_t str_len = scr.fixed_width_string_length == 0 ? plain_data.read<uint32_t>() : scr.fixed_width_string_length;
 	plain_data.available(str_len);
 	plain_data.inc(str_len);
 }
diff --git a/extension/parquet/include/column_reader.hpp b/extension/parquet/include/column_reader.hpp
index 8098f1818762..17574d73a754 100644
--- a/extension/parquet/include/column_reader.hpp
+++ b/extension/parquet/include/column_reader.hpp
@@ -25,6 +25,7 @@ using parquet::format::ColumnChunk;
 using parquet::format::FieldRepetitionType;
 using parquet::format::PageHeader;
 using parquet::format::SchemaElement;
+using parquet::format::Type;
 
 typedef std::bitset<STANDARD_VECTOR_SIZE> parquet_filter_t;
 
@@ -245,12 +246,19 @@ class StringColumnReader : public TemplatedColumnReader<string_t, StringParquetV
 	StringColumnReader(LogicalType type_p, const SchemaElement &schema_p, idx_t schema_idx_p, idx_t max_define_p,
 	                   idx_t max_repeat_p)
 	    : TemplatedColumnReader<string_t, StringParquetValueConversion>(type_p, schema_p, schema_idx_p, max_define_p,
-	                                                                    max_repeat_p) {};
+	                                                                    max_repeat_p) {
+		fixed_width_string_length = 0;
+		if (schema_p.type == Type::FIXED_LEN_BYTE_ARRAY) {
+			D_ASSERT(schema_p.__isset.type_length);
+			fixed_width_string_length = schema_p.type_length;
+		}
+	};
 
 	void Dictionary(shared_ptr<ByteBuffer> dictionary_data, idx_t num_entries) override;
 
 	unique_ptr<string_t[]> dict_strings;
 	void VerifyString(const char *str_data, idx_t str_len);
+	idx_t fixed_width_string_length;
 
 protected:
 	void DictReference(Vector &result) override;
diff --git a/extension/parquet/parquet_reader.cpp b/extension/parquet/parquet_reader.cpp
index 9e6872afa166..42b533f398fe 100644
--- a/extension/parquet/parquet_reader.cpp
+++ b/extension/parquet/parquet_reader.cpp
@@ -115,11 +115,19 @@ static LogicalType DeriveLogicalType(const SchemaElement &s_ele) {
 		return LogicalType::FLOAT;
 	case Type::DOUBLE:
 		return LogicalType::DOUBLE;
-		//			case parquet::format::Type::FIXED_LEN_BYTE_ARRAY: {
-		// TODO some decimals yuck
 	case Type::BYTE_ARRAY:
+	case Type::FIXED_LEN_BYTE_ARRAY:
+		if (s_ele.type == Type::FIXED_LEN_BYTE_ARRAY && !s_ele.__isset.type_length) {
+			return LogicalType::INVALID;
+		}
 		if (s_ele.__isset.converted_type) {
 			switch (s_ele.converted_type) {
+			case ConvertedType::DECIMAL:
+				if (s_ele.type == Type::FIXED_LEN_BYTE_ARRAY && s_ele.__isset.scale && s_ele.__isset.type_length) {
+					return LogicalType(LogicalTypeId::DECIMAL, s_ele.precision, s_ele.scale);
+				}
+				return LogicalType::INVALID;
+
 			case ConvertedType::UTF8:
 				return LogicalType::VARCHAR;
 			default:
@@ -127,12 +135,6 @@ static LogicalType DeriveLogicalType(const SchemaElement &s_ele) {
 			}
 		}
 		return LogicalType::BLOB;
-	case Type::FIXED_LEN_BYTE_ARRAY:
-		if (s_ele.__isset.converted_type && s_ele.converted_type == ConvertedType::DECIMAL && s_ele.__isset.scale &&
-		    s_ele.__isset.scale && s_ele.__isset.type_length) {
-			// habemus decimal
-			return LogicalType(LogicalTypeId::DECIMAL, s_ele.precision, s_ele.scale);
-		}
 	default:
 		return LogicalType::INVALID;
 	}
