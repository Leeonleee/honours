You will be provided with a partial code base and an issue statement explaining a problem to resolve.
In your output, give nothing but the code (no markdown) so that your output can be copy pasted and run immediately with no changes.
In the patch file, please make sure to include the line numbers and a blank line at the end so it can be applied using git apply.

<issue>
`SELECT * SIMILAR TO <regexp> AS <name>` ignores `<name>`
### What happens?

The newly introduced `SELECT * SIMILAR TO <pattern>` syntax (and the related `LIKE` / `GLOB` versions) ignores subsequent `AS` clauses.

Ideally, it'd treat them just like `COLUMNS(<pattern>) AS <name>` including allowing for matching group references.

### To Reproduce

```sql
SELECT * SIMILAR TO 'number(\d+)' AS '\1'
FROM (SELECT 1 AS number1, 2 AS number2, 3 AS end)
```
and
```sql
SELECT * SIMILAR TO 'number(\d+)' AS test
FROM (SELECT 1 AS number1, 2 AS number2, 3 AS end)
```
both return columns `number1` and `number2`, completely ignoring the `AS` clause.

### OS:

Linux

### DuckDB Version:

1.1.4

### DuckDB Client:

Python

### Hardware:

i5, AMD64

### Full Name:

Soeren Wolfers

### Affiliation:

G-Research

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have tested with a nightly build

### Did you include all relevant data sets for reproducing the issue?

Not applicable - the reproduction does not require a data set

### Did you include all code required to reproduce the issue?

- [X] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [X] Yes, I have

</issue>
<code>
[start of README.md]
1: <div align="center">
2:   <picture>
3:     <source media="(prefers-color-scheme: light)" srcset="logo/DuckDB_Logo-horizontal.svg">
4:     <source media="(prefers-color-scheme: dark)" srcset="logo/DuckDB_Logo-horizontal-dark-mode.svg">
5:     <img alt="DuckDB logo" src="logo/DuckDB_Logo-horizontal.svg" height="100">
6:   </picture>
7: </div>
8: <br>
9: 
10: <p align="center">
11:   <a href="https://github.com/duckdb/duckdb/actions"><img src="https://github.com/duckdb/duckdb/actions/workflows/Main.yml/badge.svg?branch=main" alt="Github Actions Badge"></a>
12:   <a href="https://discord.gg/tcvwpjfnZx"><img src="https://shields.io/discord/909674491309850675" alt="discord" /></a>
13:   <a href="https://github.com/duckdb/duckdb/releases/"><img src="https://img.shields.io/github/v/release/duckdb/duckdb?color=brightgreen&display_name=tag&logo=duckdb&logoColor=white" alt="Latest Release"></a>
14: </p>
15: 
16: ## DuckDB
17: 
18: DuckDB is a high-performance analytical database system. It is designed to be fast, reliable, portable, and easy to use. DuckDB provides a rich SQL dialect, with support far beyond basic SQL. DuckDB supports arbitrary and nested correlated subqueries, window functions, collations, complex types (arrays, structs, maps), and [several extensions designed to make SQL easier to use](https://duckdb.org/docs/guides/sql_features/friendly_sql).
19: 
20: DuckDB is available as a [standalone CLI application](https://duckdb.org/docs/api/cli/overview) and has clients for [Python](https://duckdb.org/docs/api/python/overview), [R](https://duckdb.org/docs/api/r), [Java](https://duckdb.org/docs/api/java), [Wasm](https://duckdb.org/docs/api/wasm/overview), etc., with deep integrations with packages such as [pandas](https://duckdb.org/docs/guides/python/sql_on_pandas) and [dplyr](https://duckdblabs.github.io/duckplyr/).
21: 
22: For more information on using DuckDB, please refer to the [DuckDB documentation](https://duckdb.org/docs/).
23: 
24: ## Installation
25: 
26: If you want to install DuckDB, please see [our installation page](https://duckdb.org/docs/installation/) for instructions.
27: 
28: ## Data Import
29: 
30: For CSV files and Parquet files, data import is as simple as referencing the file in the FROM clause:
31: 
32: ```sql
33: SELECT * FROM 'myfile.csv';
34: SELECT * FROM 'myfile.parquet';
35: ```
36: 
37: Refer to our [Data Import](https://duckdb.org/docs/data/overview) section for more information.
38: 
39: ## SQL Reference
40: 
41: The documentation contains a [SQL introduction and reference](https://duckdb.org/docs/sql/introduction).
42: 
43: ## Development
44: 
45: For development, DuckDB requires [CMake](https://cmake.org), Python3 and a `C++11` compliant compiler. Run `make` in the root directory to compile the sources. For development, use `make debug` to build a non-optimized debug version. You should run `make unit` and `make allunit` to verify that your version works properly after making changes. To test performance, you can run `BUILD_BENCHMARK=1 BUILD_TPCH=1 make` and then perform several standard benchmarks from the root directory by executing `./build/release/benchmark/benchmark_runner`. The details of benchmarks are in our [Benchmark Guide](benchmark/README.md).
46: 
47: Please also refer to our [Build Guide](https://duckdb.org/dev/building) and [Contribution Guide](CONTRIBUTING.md).
48: 
49: ## Support
50: 
51: See the [Support Options](https://duckdblabs.com/support/) page.
[end of README.md]
[start of src/planner/binder/expression/bind_star_expression.cpp]
1: #include "duckdb/planner/binder.hpp"
2: #include "duckdb/parser/expression/star_expression.hpp"
3: #include "duckdb/parser/expression/constant_expression.hpp"
4: #include "duckdb/parser/expression/columnref_expression.hpp"
5: #include "duckdb/parser/expression/operator_expression.hpp"
6: #include "duckdb/planner/expression_binder/table_function_binder.hpp"
7: #include "duckdb/parser/parsed_expression_iterator.hpp"
8: #include "duckdb/execution/expression_executor.hpp"
9: #include "duckdb/function/scalar/regexp.hpp"
10: #include "duckdb/parser/expression/function_expression.hpp"
11: 
12: namespace duckdb {
13: 
14: string GetColumnsStringValue(ParsedExpression &expr) {
15: 	if (expr.type == ExpressionType::COLUMN_REF) {
16: 		auto &colref = expr.Cast<ColumnRefExpression>();
17: 		return colref.GetColumnName();
18: 	} else {
19: 		return expr.ToString();
20: 	}
21: }
22: 
23: bool Binder::FindStarExpression(unique_ptr<ParsedExpression> &expr, StarExpression **star, bool is_root,
24:                                 bool in_columns) {
25: 	bool has_star = false;
26: 	if (expr->GetExpressionClass() == ExpressionClass::STAR) {
27: 		auto &current_star = expr->Cast<StarExpression>();
28: 		if (StarExpression::IsStar(*expr)) {
29: 			if (is_root) {
30: 				D_ASSERT(!in_columns);
31: 				// At the root level
32: 				*star = &current_star;
33: 				return true;
34: 			}
35: 
36: 			if (!in_columns) {
37: 				// '*' can only appear inside COLUMNS or at the root level
38: 				throw BinderException(
39: 				    "STAR expression is only allowed as the root element of an expression. Use COLUMNS(*) instead.");
40: 			}
41: 
42: 			if (!current_star.replace_list.empty()) {
43: 				// '*' inside COLUMNS can not have a REPLACE list
44: 				throw BinderException(
45: 				    "STAR expression with REPLACE list is only allowed as the root element of COLUMNS");
46: 			}
47: 
48: 			// '*' expression inside a COLUMNS - convert to a constant list of strings (column names)
49: 			vector<unique_ptr<ParsedExpression>> star_list;
50: 			bind_context.GenerateAllColumnExpressions(current_star, star_list);
51: 
52: 			vector<Value> values;
53: 			values.reserve(star_list.size());
54: 			for (auto &element : star_list) {
55: 				values.emplace_back(GetColumnsStringValue(*element));
56: 			}
57: 			D_ASSERT(!values.empty());
58: 			expr = make_uniq<ConstantExpression>(Value::LIST(LogicalType::VARCHAR, values));
59: 			return true;
60: 		}
61: 		if (in_columns) {
62: 			throw BinderException("COLUMNS expression is not allowed inside another COLUMNS expression");
63: 		}
64: 		in_columns = true;
65: 
66: 		if (*star) {
67: 			// we can have multiple
68: 			if (!(*star)->Equals(current_star)) {
69: 				throw BinderException(*expr,
70: 				                      "Multiple different STAR/COLUMNS in the same expression are not supported");
71: 			}
72: 			return true;
73: 		}
74: 		*star = &current_star;
75: 		has_star = true;
76: 	}
77: 	ParsedExpressionIterator::EnumerateChildren(*expr, [&](unique_ptr<ParsedExpression> &child_expr) {
78: 		if (FindStarExpression(child_expr, star, false, in_columns)) {
79: 			has_star = true;
80: 		}
81: 	});
82: 	return has_star;
83: }
84: 
85: void Binder::ReplaceStarExpression(unique_ptr<ParsedExpression> &expr, unique_ptr<ParsedExpression> &replacement) {
86: 	D_ASSERT(expr);
87: 	if (StarExpression::IsColumns(*expr) || StarExpression::IsStar(*expr)) {
88: 		D_ASSERT(replacement);
89: 		auto alias = expr->alias;
90: 		expr = replacement->Copy();
91: 		if (!alias.empty()) {
92: 			expr->alias = std::move(alias);
93: 		}
94: 		return;
95: 	}
96: 	ParsedExpressionIterator::EnumerateChildren(
97: 	    *expr, [&](unique_ptr<ParsedExpression> &child_expr) { ReplaceStarExpression(child_expr, replacement); });
98: }
99: 
100: static string ReplaceColumnsAlias(const string &alias, const string &column_name, optional_ptr<duckdb_re2::RE2> regex) {
101: 	string result;
102: 	result.reserve(alias.size());
103: 	for (idx_t c = 0; c < alias.size(); c++) {
104: 		if (alias[c] == '\\') {
105: 			c++;
106: 			if (c >= alias.size()) {
107: 				throw BinderException("Unterminated backslash in COLUMNS(*) \"%s\" alias. Backslashes must either be "
108: 				                      "escaped or followed by a number",
109: 				                      alias);
110: 			}
111: 			if (alias[c] == '\\') {
112: 				result += "\\";
113: 				continue;
114: 			}
115: 			if (alias[c] < '0' || alias[c] > '9') {
116: 				throw BinderException("Invalid backslash code in COLUMNS(*) \"%s\" alias. Backslashes must either be "
117: 				                      "escaped or followed by a number",
118: 				                      alias);
119: 			}
120: 			if (alias[c] == '0') {
121: 				result += column_name;
122: 			} else if (!regex) {
123: 				throw BinderException(
124: 				    "Only the backslash escape code \\0 can be used when no regex is supplied to COLUMNS(*)");
125: 			} else {
126: 				string extracted;
127: 				RE2::Extract(column_name, *regex, "\\" + alias.substr(c, 1), &extracted);
128: 				result += extracted;
129: 			}
130: 		} else {
131: 			result += alias[c];
132: 		}
133: 	}
134: 	return result;
135: }
136: 
137: void TryTransformStarLike(unique_ptr<ParsedExpression> &root) {
138: 	// detect "* LIKE [literal]" and similar expressions
139: 	if (root->expression_class != ExpressionClass::FUNCTION) {
140: 		return;
141: 	}
142: 	auto &function = root->Cast<FunctionExpression>();
143: 	if (function.children.size() != 2) {
144: 		return;
145: 	}
146: 	auto &left = function.children[0];
147: 	// expression must have a star on the LHS, and a literal on the RHS
148: 	if (left->expression_class != ExpressionClass::STAR) {
149: 		return;
150: 	}
151: 	auto &star = left->Cast<StarExpression>();
152: 	if (star.columns) {
153: 		// COLUMNS(*) has different semantics
154: 		return;
155: 	}
156: 	unordered_set<string> supported_ops {"~~", "!~~", "~~~", "!~~~", "~~*", "!~~*", "regexp_full_match"};
157: 	if (supported_ops.count(function.function_name) == 0) {
158: 		// unsupported op for * expression
159: 		throw BinderException(*root, "Function \"%s\" cannot be applied to a star expression", function.function_name);
160: 	}
161: 	auto &right = function.children[1];
162: 	if (right->expression_class != ExpressionClass::CONSTANT) {
163: 		throw BinderException(*root, "Pattern applied to a star expression must be a constant");
164: 	}
165: 	if (!star.replace_list.empty()) {
166: 		throw BinderException(*root, "Replace list cannot be combined with a filtering operation");
167: 	}
168: 	// generate a columns expression
169: 	// "* LIKE '%literal%'
170: 	// -> COLUMNS(list_filter(*, x -> x LIKE '%literal%'))
171: 	auto star_expr = std::move(left);
172: 
173: 	auto lhs = make_uniq<ColumnRefExpression>("__lambda_col");
174: 	function.children[0] = lhs->Copy();
175: 
176: 	auto lambda = make_uniq<LambdaExpression>(std::move(lhs), std::move(root));
177: 	vector<unique_ptr<ParsedExpression>> filter_children;
178: 	filter_children.push_back(std::move(star_expr));
179: 	filter_children.push_back(std::move(lambda));
180: 	auto list_filter = make_uniq<FunctionExpression>("list_filter", std::move(filter_children));
181: 
182: 	auto columns_expr = make_uniq<StarExpression>();
183: 	columns_expr->columns = true;
184: 	columns_expr->expr = std::move(list_filter);
185: 	root = std::move(columns_expr);
186: }
187: 
188: optional_ptr<ParsedExpression> Binder::GetResolvedColumnExpression(ParsedExpression &root_expr) {
189: 	optional_ptr<ParsedExpression> expr = &root_expr;
190: 	while (expr) {
191: 		if (expr->type == ExpressionType::COLUMN_REF) {
192: 			break;
193: 		}
194: 		if (expr->type == ExpressionType::OPERATOR_COALESCE) {
195: 			expr = expr->Cast<OperatorExpression>().children[0].get();
196: 		} else {
197: 			// unknown expression
198: 			return nullptr;
199: 		}
200: 	}
201: 	return expr;
202: }
203: 
204: void Binder::ExpandStarExpression(unique_ptr<ParsedExpression> expr,
205:                                   vector<unique_ptr<ParsedExpression>> &new_select_list) {
206: 	TryTransformStarLike(expr);
207: 
208: 	StarExpression *star = nullptr;
209: 	if (!FindStarExpression(expr, &star, true, false)) {
210: 		// no star expression: add it as-is
211: 		D_ASSERT(!star);
212: 		new_select_list.push_back(std::move(expr));
213: 		return;
214: 	}
215: 	D_ASSERT(star);
216: 	vector<unique_ptr<ParsedExpression>> star_list;
217: 	// we have star expressions! expand the list of star expressions
218: 	bind_context.GenerateAllColumnExpressions(*star, star_list);
219: 
220: 	unique_ptr<duckdb_re2::RE2> regex;
221: 	if (star->expr) {
222: 		// COLUMNS with an expression
223: 		// two options:
224: 		// VARCHAR parameter <- this is a regular expression
225: 		// LIST of VARCHAR parameters <- this is a set of columns
226: 		TableFunctionBinder binder(*this, context);
227: 		auto child = star->expr->Copy();
228: 		auto result = binder.Bind(child);
229: 		if (!result->IsFoldable()) {
230: 			// cannot resolve parameters here
231: 			if (star->expr->HasParameter()) {
232: 				throw ParameterNotResolvedException();
233: 			} else {
234: 				throw BinderException("Unsupported expression in COLUMNS");
235: 			}
236: 		}
237: 		auto val = ExpressionExecutor::EvaluateScalar(context, *result);
238: 		if (val.type().id() == LogicalTypeId::VARCHAR) {
239: 			// regex
240: 			if (val.IsNull()) {
241: 				throw BinderException("COLUMNS does not support NULL as regex argument");
242: 			}
243: 			auto &regex_str = StringValue::Get(val);
244: 			regex = make_uniq<duckdb_re2::RE2>(regex_str);
245: 			if (!regex->error().empty()) {
246: 				auto err = StringUtil::Format("Failed to compile regex \"%s\": %s", regex_str, regex->error());
247: 				throw BinderException(*star, err);
248: 			}
249: 			vector<unique_ptr<ParsedExpression>> new_list;
250: 			for (idx_t i = 0; i < star_list.size(); i++) {
251: 				auto child_expr = GetResolvedColumnExpression(*star_list[i]);
252: 				if (!child_expr) {
253: 					continue;
254: 				}
255: 				auto &colref = child_expr->Cast<ColumnRefExpression>();
256: 				if (!RE2::PartialMatch(colref.GetColumnName(), *regex)) {
257: 					continue;
258: 				}
259: 				new_list.push_back(std::move(star_list[i]));
260: 			}
261: 			if (new_list.empty()) {
262: 				auto err = StringUtil::Format("No matching columns found that match regex \"%s\"", regex_str);
263: 				throw BinderException(*star, err);
264: 			}
265: 			star_list = std::move(new_list);
266: 		} else if (val.type().id() == LogicalTypeId::LIST &&
267: 		           ListType::GetChildType(val.type()).id() == LogicalTypeId::VARCHAR) {
268: 			// list of varchar columns
269: 			if (val.IsNull() || ListValue::GetChildren(val).empty()) {
270: 				auto err =
271: 				    StringUtil::Format("Star expression \"%s\" resulted in an empty set of columns", star->ToString());
272: 				throw BinderException(*star, err);
273: 			}
274: 			auto &children = ListValue::GetChildren(val);
275: 			vector<unique_ptr<ParsedExpression>> new_list;
276: 			// scan the list for all selected columns and construct a lookup table
277: 			case_insensitive_map_t<bool> selected_set;
278: 			for (auto &child : children) {
279: 				if (child.IsNull()) {
280: 					throw BinderException(*star, "Columns expression does not support NULL input parameters");
281: 				}
282: 				selected_set.insert(make_pair(StringValue::Get(child), false));
283: 			}
284: 			// now check the list of all possible expressions and select which ones make it in
285: 			for (auto &expr : star_list) {
286: 				auto str = GetColumnsStringValue(*expr);
287: 				auto entry = selected_set.find(str);
288: 				if (entry != selected_set.end()) {
289: 					new_list.push_back(std::move(expr));
290: 					entry->second = true;
291: 				}
292: 			}
293: 			// check if all expressions found a match
294: 			for (auto &entry : selected_set) {
295: 				if (!entry.second) {
296: 					throw BinderException("Column \"%s\" was selected but was not found in the FROM clause",
297: 					                      entry.first);
298: 				}
299: 			}
300: 			star_list = std::move(new_list);
301: 		} else {
302: 			throw BinderException(
303: 			    *star, "COLUMNS expects either a VARCHAR argument (regex) or a LIST of VARCHAR (list of columns)");
304: 		}
305: 	}
306: 
307: 	// now perform the replacement
308: 	if (StarExpression::IsColumnsUnpacked(*star)) {
309: 		if (StarExpression::IsColumnsUnpacked(*expr)) {
310: 			throw BinderException("*COLUMNS not allowed at the root level, use COLUMNS instead");
311: 		}
312: 		ReplaceUnpackedStarExpression(expr, star_list);
313: 		new_select_list.push_back(std::move(expr));
314: 		return;
315: 	}
316: 	for (idx_t i = 0; i < star_list.size(); i++) {
317: 		auto new_expr = expr->Copy();
318: 		ReplaceStarExpression(new_expr, star_list[i]);
319: 		if (StarExpression::IsColumns(*star)) {
320: 			auto expr = GetResolvedColumnExpression(*star_list[i]);
321: 			if (expr) {
322: 				auto &colref = expr->Cast<ColumnRefExpression>();
323: 				if (new_expr->alias.empty()) {
324: 					new_expr->alias = colref.GetColumnName();
325: 				} else {
326: 					new_expr->alias = ReplaceColumnsAlias(new_expr->alias, colref.GetColumnName(), regex.get());
327: 				}
328: 			}
329: 		}
330: 		new_select_list.push_back(std::move(new_expr));
331: 	}
332: }
333: 
334: void Binder::ExpandStarExpressions(vector<unique_ptr<ParsedExpression>> &select_list,
335:                                    vector<unique_ptr<ParsedExpression>> &new_select_list) {
336: 	for (auto &select_element : select_list) {
337: 		ExpandStarExpression(std::move(select_element), new_select_list);
338: 	}
339: }
340: 
341: } // namespace duckdb
[end of src/planner/binder/expression/bind_star_expression.cpp]
</code>
Here is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.
<patch>
--- a/file.cpp
+++ b/file.cpp
@@ -3,35 +3,44 @@
 #include <cstdlib>
 
 int euclidean(int a, int b) {
-    while (b) {
-        int temp = b;
-        b = a % b;
-        a = temp;
+    if (b == 0) {
+        return a;
     }
-    return a;
+    return euclidean(b, a % b);
 }
 
 std::vector<std::pair<int, int>> bresenham(int x0, int y0, int x1, int y1) {
     std::vector<std::pair<int, int>> points;
     int dx = abs(x1 - x0);
     int dy = abs(y1 - y0);
+    int x = x0, y = y0;
     int sx = (x0 < x1) ? 1 : -1;
     int sy = (y0 < y1) ? 1 : -1;
-    int err = dx - dy;
 
-    while (true) {
-        points.emplace_back(x0, y0);
-        if (x0 == x1 && y0 == y1) break;
-        int e2 = 2 * err;
-        if (e2 > -dy) {
+    if (dx > dy) {
+        int err = dx / 2;
+        while (x != x1) {
+            points.emplace_back(x, y);
             err -= dy;
-            x0 += sx;
+            if (err < 0) {
+                y += sy;
+                err += dx;
+            }
+            x += sx;
         }
-        if (e2 < dx) {
-            err += dx;
-            y0 += sy;
+    } else {
+        int err = dy / 2;
+        while (y != y1) {
+            points.emplace_back(x, y);
+            err -= dx;
+            if (err < 0) {
+                x += sx;
+                err += dy;
+            }
+            y += sy;
         }
     }
 
+    points.emplace_back(x, y);
     return points;
 }

</patch>

I need you to solve the provided issue by generating a single patch file that I can apply directly to this repository using git apply.
Please respond with a single patch file in the format shown above.
Make sure to only include the patch file contents so that the contents of your output can be copied into a patch file and applied directly

Respond below: