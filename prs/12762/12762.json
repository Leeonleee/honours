{
  "repo": "duckdb/duckdb",
  "pull_number": 12762,
  "instance_id": "duckdb__duckdb-12762",
  "issue_numbers": [
    "12569",
    "12569"
  ],
  "base_commit": "608e5f208afb754fec7d282c4f6c9113bedbd2ca",
  "patch": "diff --git a/third_party/fmt/include/fmt/format.h b/third_party/fmt/include/fmt/format.h\nindex 37b2ab413935..ad4fe83ab438 100644\n--- a/third_party/fmt/include/fmt/format.h\n+++ b/third_party/fmt/include/fmt/format.h\n@@ -1116,7 +1116,7 @@ template <typename Char> class float_writer {\n       // 1234e-6 -> 0.001234\n       *it++ = static_cast<Char>('0');\n       int num_zeros = -full_exp;\n-      if (specs_.precision >= 0 && specs_.precision < num_zeros)\n+      if (num_digits_ == 0 && specs_.precision >= 0 && specs_.precision < num_zeros)\n         num_zeros = specs_.precision;\n       int num_digits = num_digits_;\n       if (!specs_.trailing_zeros)\n",
  "test_patch": "diff --git a/test/sql/function/string/test_format.test b/test/sql/function/string/test_format.test\nindex 44b36b0d6ec1..304e77209f74 100644\n--- a/test/sql/function/string/test_format.test\n+++ b/test/sql/function/string/test_format.test\n@@ -90,6 +90,16 @@ select format('{:b}', 123456789)\n ----\n 111010110111100110100010101\n \n+query I\n+select format('{:.2}', 0.00023404094995959);\n+----\n+0.00023\n+\n+query I\n+select format('{:.3}', 0.0);\n+----\n+0.00\n+\n # incorrect number of parameters\n # too few parameters\n statement error\n",
  "problem_statement": "Changing precision prints incorrect value (number of leading zeros) when using precision {:.2} vs {:.3}\n### What happens?\r\n\r\nIt prints 0.002 with precision `.2` and `0.00023` with precision `.3` using input number 0.000234.\r\n\r\n### To Reproduce\r\n\r\n```sql\r\nselect format('{:.2}', 0.00023404094995959);\r\n```\r\n```text\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 format('{:.2}', 0.00023404094995959) \u2502\r\n\u2502               varchar                \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 0.0023                               \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n```sql\r\nselect format('{:.3}', 0.00023404094995959);\r\n```\r\n```\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 format('{:.3}', 0.00023404094995959) \u2502\r\n\u2502               varchar                \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 0.000234                             \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\n### OS:\r\n\r\nx64\r\n\r\n### DuckDB Version:\r\n\r\n1.0.0\r\n\r\n### DuckDB Client:\r\n\r\nCLI\r\n\r\n### Full Name:\r\n\r\nAshkan Kiani\r\n\r\n### Affiliation:\r\n\r\nJane Street\r\n\r\n### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.\r\n\r\nI have tested with a stable release\r\n\r\n### Did you include all relevant data sets for reproducing the issue?\r\n\r\nNot applicable - the reproduction does not require a data set\r\n\r\n### Did you include all code required to reproduce the issue?\r\n\r\n- [X] Yes, I have\r\n\r\n### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?\r\n\r\n- [X] Yes, I have\nChanging precision prints incorrect value (number of leading zeros) when using precision {:.2} vs {:.3}\n### What happens?\r\n\r\nIt prints 0.002 with precision `.2` and `0.00023` with precision `.3` using input number 0.000234.\r\n\r\n### To Reproduce\r\n\r\n```sql\r\nselect format('{:.2}', 0.00023404094995959);\r\n```\r\n```text\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 format('{:.2}', 0.00023404094995959) \u2502\r\n\u2502               varchar                \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 0.0023                               \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n```sql\r\nselect format('{:.3}', 0.00023404094995959);\r\n```\r\n```\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 format('{:.3}', 0.00023404094995959) \u2502\r\n\u2502               varchar                \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 0.000234                             \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\n### OS:\r\n\r\nx64\r\n\r\n### DuckDB Version:\r\n\r\n1.0.0\r\n\r\n### DuckDB Client:\r\n\r\nCLI\r\n\r\n### Full Name:\r\n\r\nAshkan Kiani\r\n\r\n### Affiliation:\r\n\r\nJane Street\r\n\r\n### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.\r\n\r\nI have tested with a stable release\r\n\r\n### Did you include all relevant data sets for reproducing the issue?\r\n\r\nNot applicable - the reproduction does not require a data set\r\n\r\n### Did you include all code required to reproduce the issue?\r\n\r\n- [X] Yes, I have\r\n\r\n### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?\r\n\r\n- [X] Yes, I have\n",
  "hints_text": "@norcalli thanks, I could reproduce this.\n@norcalli thanks, I could reproduce this.",
  "created_at": "2024-06-28T14:04:19Z"
}