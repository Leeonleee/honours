{
  "repo": "duckdb/duckdb",
  "pull_number": 5665,
  "instance_id": "duckdb__duckdb-5665",
  "issue_numbers": [
    "5589"
  ],
  "base_commit": "88f54580d5666bba2df134b7c872d829154c7116",
  "patch": "diff --git a/extension/icu/CMakeLists.txt b/extension/icu/CMakeLists.txt\nindex d58cd9e823e0..d7f7b24c9b52 100644\n--- a/extension/icu/CMakeLists.txt\n+++ b/extension/icu/CMakeLists.txt\n@@ -18,6 +18,7 @@ set(ICU_EXTENSION_FILES\n     icu-datetrunc.cpp\n     icu-makedate.cpp\n     icu-strptime.cpp\n+    icu-timebucket.cpp\n     icu-timezone.cpp)\n \n add_library(icu_extension STATIC ${ICU_EXTENSION_FILES})\ndiff --git a/extension/icu/icu-dateadd.cpp b/extension/icu/icu-dateadd.cpp\nindex 9709d4dfa9bb..907dac9eeb6d 100644\n--- a/extension/icu/icu-dateadd.cpp\n+++ b/extension/icu/icu-dateadd.cpp\n@@ -1,12 +1,12 @@\n #include \"include/icu-dateadd.hpp\"\n-#include \"include/icu-datefunc.hpp\"\n \n-#include \"duckdb/parser/parsed_data/create_scalar_function_info.hpp\"\n-#include \"duckdb/planner/expression/bound_function_expression.hpp\"\n #include \"duckdb/common/operator/add.hpp\"\n #include \"duckdb/common/operator/multiply.hpp\"\n #include \"duckdb/common/types/time.hpp\"\n #include \"duckdb/common/types/timestamp.hpp\"\n+#include \"duckdb/parser/parsed_data/create_scalar_function_info.hpp\"\n+#include \"duckdb/planner/expression/bound_function_expression.hpp\"\n+#include \"include/icu-datefunc.hpp\"\n \n namespace duckdb {\n \n@@ -284,6 +284,18 @@ struct ICUDateAdd : public ICUDateFunc {\n \t}\n };\n \n+timestamp_t ICUDateFunc::Add(icu::Calendar *calendar, timestamp_t timestamp, interval_t interval) {\n+\treturn ICUCalendarAdd::Operation<timestamp_t, interval_t, timestamp_t>(timestamp, interval, calendar);\n+}\n+\n+timestamp_t ICUDateFunc::Sub(icu::Calendar *calendar, timestamp_t timestamp, interval_t interval) {\n+\treturn ICUCalendarSub::Operation<timestamp_t, interval_t, timestamp_t>(timestamp, interval, calendar);\n+}\n+\n+interval_t ICUDateFunc::Sub(icu::Calendar *calendar, timestamp_t end_date, timestamp_t start_date) {\n+\treturn ICUCalendarSub::Operation<timestamp_t, timestamp_t, interval_t>(end_date, start_date, calendar);\n+}\n+\n void RegisterICUDateAddFunctions(ClientContext &context) {\n \tICUDateAdd::AddDateAddOperators(\"+\", context);\n \tICUDateAdd::AddDateSubOperators(\"-\", context);\ndiff --git a/extension/icu/icu-extension.cpp b/extension/icu/icu-extension.cpp\nindex 9609c47d8fe5..4b3a09e1ac24 100644\n--- a/extension/icu/icu-extension.cpp\n+++ b/extension/icu/icu-extension.cpp\n@@ -14,6 +14,7 @@\n #include \"include/icu-datetrunc.hpp\"\n #include \"include/icu-makedate.hpp\"\n #include \"include/icu-strptime.hpp\"\n+#include \"include/icu-timebucket.hpp\"\n #include \"include/icu-timezone.hpp\"\n \n #include \"duckdb/main/database.hpp\"\n@@ -266,6 +267,7 @@ void ICUExtension::Load(DuckDB &db) {\n \tRegisterICUDateTruncFunctions(*con.context);\n \tRegisterICUMakeDateFunctions(*con.context);\n \tRegisterICUStrptimeFunctions(*con.context);\n+\tRegisterICUTimeBucketFunctions(*con.context);\n \tRegisterICUTimeZoneFunctions(*con.context);\n \n \t// Calendars\ndiff --git a/extension/icu/icu-timebucket.cpp b/extension/icu/icu-timebucket.cpp\nnew file mode 100644\nindex 000000000000..d62950754705\n--- /dev/null\n+++ b/extension/icu/icu-timebucket.cpp\n@@ -0,0 +1,637 @@\n+#include \"duckdb/common/exception.hpp\"\n+#include \"duckdb/common/limits.hpp\"\n+#include \"duckdb/common/operator/cast_operators.hpp\"\n+#include \"duckdb/common/operator/subtract.hpp\"\n+#include \"duckdb/common/types/interval.hpp\"\n+#include \"duckdb/common/types/time.hpp\"\n+#include \"duckdb/common/types/timestamp.hpp\"\n+#include \"duckdb/common/types/value.hpp\"\n+#include \"duckdb/common/vector_operations/binary_executor.hpp\"\n+#include \"duckdb/common/vector_operations/ternary_executor.hpp\"\n+#include \"duckdb/main/client_context.hpp\"\n+#include \"duckdb/parser/parsed_data/create_scalar_function_info.hpp\"\n+#include \"include/icu-datefunc.hpp\"\n+\n+namespace duckdb {\n+\n+struct ICUTimeBucket : public ICUDateFunc {\n+\n+\t// Use 2000-01-03 00:00:00 (Monday) as origin when bucket_width is days, hours, ... for TimescaleDB compatibility\n+\t// There are 10959 days between 1970-01-01 and 2000-01-03\n+\tconstexpr static const int64_t DEFAULT_ORIGIN_MICROS_1 = 10959 * Interval::MICROS_PER_DAY;\n+\t// Use 2000-01-01 as origin when bucket_width is months, years, ... for TimescaleDB compatibility\n+\t// There are 10957 days between 1970-01-01 and 2000-01-01\n+\tconstexpr static const int64_t DEFAULT_ORIGIN_MICROS_2 = 10957 * Interval::MICROS_PER_DAY;\n+\n+\tenum struct BucketWidthType { CONVERTIBLE_TO_MICROS, CONVERTIBLE_TO_DAYS, CONVERTIBLE_TO_MONTHS, UNCLASSIFIED };\n+\n+\tstatic inline BucketWidthType ClassifyBucketWidth(const interval_t bucket_width) {\n+\t\tif (bucket_width.months == 0 && bucket_width.days == 0 && bucket_width.micros > 0) {\n+\t\t\treturn BucketWidthType::CONVERTIBLE_TO_MICROS;\n+\t\t} else if (bucket_width.months == 0 && bucket_width.days >= 0 && bucket_width.micros == 0) {\n+\t\t\treturn BucketWidthType::CONVERTIBLE_TO_DAYS;\n+\t\t} else if (bucket_width.months > 0 && bucket_width.days == 0 && bucket_width.micros == 0) {\n+\t\t\treturn BucketWidthType::CONVERTIBLE_TO_MONTHS;\n+\t\t} else {\n+\t\t\treturn BucketWidthType::UNCLASSIFIED;\n+\t\t}\n+\t}\n+\n+\tstatic inline BucketWidthType ClassifyBucketWidthErrorThrow(const interval_t bucket_width) {\n+\t\tif (bucket_width.months == 0 && bucket_width.days == 0) {\n+\t\t\tif (bucket_width.micros <= 0) {\n+\t\t\t\tthrow NotImplementedException(\"Period must be greater than 0\");\n+\t\t\t}\n+\t\t\treturn BucketWidthType::CONVERTIBLE_TO_MICROS;\n+\t\t} else if (bucket_width.months == 0 && bucket_width.micros == 0) {\n+\t\t\tif (bucket_width.days <= 0) {\n+\t\t\t\tthrow NotImplementedException(\"Period must be greater than 0\");\n+\t\t\t}\n+\t\t\treturn BucketWidthType::CONVERTIBLE_TO_DAYS;\n+\t\t} else if (bucket_width.days == 0 && bucket_width.micros == 0) {\n+\t\t\tif (bucket_width.months <= 0) {\n+\t\t\t\tthrow NotImplementedException(\"Period must be greater than 0\");\n+\t\t\t}\n+\t\t\treturn BucketWidthType::CONVERTIBLE_TO_MONTHS;\n+\t\t} else if (bucket_width.months == 0) {\n+\t\t\tthrow NotImplementedException(\"Day intervals cannot have time component\");\n+\t\t} else {\n+\t\t\tthrow NotImplementedException(\"Month intervals cannot have day or time component\");\n+\t\t}\n+\t}\n+\n+\tstatic inline timestamp_t WidthConvertibleToMicrosCommon(int64_t bucket_width_micros, const timestamp_t ts,\n+\t                                                         const timestamp_t origin, icu::Calendar *calendar) {\n+\t\tint64_t ts_micros = SubtractOperatorOverflowCheck::Operation<int64_t, int64_t, int64_t>(\n+\t\t    Timestamp::GetEpochMicroSeconds(ts), Timestamp::GetEpochMicroSeconds(origin));\n+\t\tint64_t result_micros = (ts_micros / bucket_width_micros) * bucket_width_micros;\n+\t\tif (ts_micros < 0 && ts_micros % bucket_width_micros != 0) {\n+\t\t\tresult_micros =\n+\t\t\t    SubtractOperatorOverflowCheck::Operation<int64_t, int64_t, int64_t>(result_micros, bucket_width_micros);\n+\t\t}\n+\n+\t\treturn Add(calendar, origin, interval_t {0, 0, result_micros});\n+\t}\n+\n+\tstatic inline timestamp_t WidthConvertibleToDaysCommon(int32_t bucket_width_days, const timestamp_t ts,\n+\t                                                       const timestamp_t origin, icu::Calendar *calendar) {\n+\t\tstatic part_trunc_t trunc_days = TruncationFactory(DatePartSpecifier::DAY);\n+\t\tstatic part_sub_t sub_days = SubtractFactory(DatePartSpecifier::DAY);\n+\n+\t\tuint64_t tmp_micros = SetTime(calendar, ts);\n+\t\ttrunc_days(calendar, tmp_micros);\n+\t\ttimestamp_t truncated_ts = GetTimeUnsafe(calendar, tmp_micros);\n+\n+\t\tint64_t ts_days = sub_days(calendar, origin, truncated_ts);\n+\t\tint64_t result_days = (ts_days / bucket_width_days) * bucket_width_days;\n+\t\tif (result_days < NumericLimits<int32_t>::Minimum() || result_days > NumericLimits<int32_t>::Maximum()) {\n+\t\t\tthrow OutOfRangeException(\"Timestamp out of range\");\n+\t\t}\n+\t\tif (ts_days < 0 && ts_days % bucket_width_days != 0) {\n+\t\t\tresult_days =\n+\t\t\t    SubtractOperatorOverflowCheck::Operation<int32_t, int32_t, int32_t>(result_days, bucket_width_days);\n+\t\t}\n+\n+\t\treturn Add(calendar, origin, interval_t {0, static_cast<int32_t>(result_days), 0});\n+\t}\n+\n+\tstatic inline timestamp_t WidthConvertibleToMonthsCommon(int32_t bucket_width_months, const timestamp_t ts,\n+\t                                                         const timestamp_t origin, icu::Calendar *calendar) {\n+\t\tstatic part_trunc_t trunc_months = TruncationFactory(DatePartSpecifier::MONTH);\n+\t\tstatic part_sub_t sub_months = SubtractFactory(DatePartSpecifier::MONTH);\n+\n+\t\tuint64_t tmp_micros = SetTime(calendar, ts);\n+\t\ttrunc_months(calendar, tmp_micros);\n+\t\ttimestamp_t truncated_ts = GetTimeUnsafe(calendar, tmp_micros);\n+\n+\t\ttmp_micros = SetTime(calendar, origin);\n+\t\ttrunc_months(calendar, tmp_micros);\n+\t\ttimestamp_t truncated_origin = GetTimeUnsafe(calendar, tmp_micros);\n+\n+\t\tint64_t ts_months = sub_months(calendar, truncated_origin, truncated_ts);\n+\t\tint64_t result_months = (ts_months / bucket_width_months) * bucket_width_months;\n+\t\tif (result_months < NumericLimits<int32_t>::Minimum() || result_months > NumericLimits<int32_t>::Maximum()) {\n+\t\t\tthrow OutOfRangeException(\"Timestamp out of range\");\n+\t\t}\n+\t\tif (ts_months < 0 && ts_months % bucket_width_months != 0) {\n+\t\t\tresult_months =\n+\t\t\t    SubtractOperatorOverflowCheck::Operation<int32_t, int32_t, int32_t>(result_months, bucket_width_months);\n+\t\t}\n+\n+\t\treturn Add(calendar, truncated_origin, interval_t {static_cast<int32_t>(result_months), 0, 0});\n+\t}\n+\n+\ttemplate <typename TA, typename TB, typename TR, typename OP>\n+\tstatic void ExecuteBinary(DataChunk &args, ExpressionState &state, Vector &result) {\n+\t\tD_ASSERT(args.ColumnCount() == 2);\n+\n+\t\tauto &func_expr = (BoundFunctionExpression &)state.expr;\n+\t\tauto &info = (BindData &)*func_expr.bind_info;\n+\t\tCalendarPtr calendar(info.calendar->clone());\n+\n+\t\tBinaryExecutor::Execute<TA, TB, TR>(args.data[0], args.data[1], result, args.size(), [&](TA left, TB right) {\n+\t\t\treturn OP::template Operation<TA, TB, TR>(left, right, calendar);\n+\t\t});\n+\t}\n+\n+\ttemplate <typename TA, typename TB, typename TC, typename TR, typename OP>\n+\tstatic void ExecuteTernary(DataChunk &args, ExpressionState &state, Vector &result) {\n+\t\tD_ASSERT(args.ColumnCount() == 3);\n+\n+\t\tauto &func_expr = (BoundFunctionExpression &)state.expr;\n+\t\tauto &info = (BindData &)*func_expr.bind_info;\n+\t\tCalendarPtr calendar(info.calendar->clone());\n+\n+\t\tTernaryExecutor::Execute<TA, TB, TC, TR>(\n+\t\t    args.data[0], args.data[1], args.data[2], result, args.size(), [&](TA ta, TB tb, TC tc) {\n+\t\t\t    return OP::template Operation<TA, TB, TC, TR>(args.data[0], args.data[1], args.data[2], calendar.get());\n+\t\t    });\n+\t}\n+\n+\tstruct WidthConvertibleToMicrosBinaryOperator {\n+\t\tstatic inline timestamp_t Operation(interval_t bucket_width, timestamp_t ts, icu::Calendar *calendar) {\n+\t\t\tif (!Value::IsFinite(ts)) {\n+\t\t\t\treturn ts;\n+\t\t\t}\n+\t\t\tstatic timestamp_t origin = Timestamp::FromEpochMicroSeconds(DEFAULT_ORIGIN_MICROS_1);\n+\t\t\treturn WidthConvertibleToMicrosCommon(bucket_width.micros, ts, origin, calendar);\n+\t\t}\n+\t};\n+\n+\tstruct WidthConvertibleToDaysBinaryOperator {\n+\t\tstatic inline timestamp_t Operation(interval_t bucket_width, timestamp_t ts, icu::Calendar *calendar) {\n+\t\t\tif (!Value::IsFinite(ts)) {\n+\t\t\t\treturn ts;\n+\t\t\t}\n+\t\t\tstatic timestamp_t origin = Timestamp::FromEpochMicroSeconds(DEFAULT_ORIGIN_MICROS_1);\n+\t\t\treturn WidthConvertibleToDaysCommon(bucket_width.days, ts, origin, calendar);\n+\t\t}\n+\t};\n+\n+\tstruct WidthConvertibleToMonthsBinaryOperator {\n+\t\tstatic inline timestamp_t Operation(interval_t bucket_width, timestamp_t ts, icu::Calendar *calendar) {\n+\t\t\tif (!Value::IsFinite(ts)) {\n+\t\t\t\treturn ts;\n+\t\t\t}\n+\t\t\tstatic timestamp_t origin = Timestamp::FromEpochMicroSeconds(DEFAULT_ORIGIN_MICROS_2);\n+\t\t\treturn WidthConvertibleToMonthsCommon(bucket_width.months, ts, origin, calendar);\n+\t\t}\n+\t};\n+\n+\tstruct BinaryOperator {\n+\t\tstatic inline timestamp_t Operation(interval_t bucket_width, timestamp_t ts, icu::Calendar *calendar) {\n+\t\t\tBucketWidthType bucket_width_type = ClassifyBucketWidthErrorThrow(bucket_width);\n+\t\t\tswitch (bucket_width_type) {\n+\t\t\tcase BucketWidthType::CONVERTIBLE_TO_MICROS:\n+\t\t\t\treturn WidthConvertibleToMicrosBinaryOperator::Operation(bucket_width, ts, calendar);\n+\t\t\tcase BucketWidthType::CONVERTIBLE_TO_DAYS:\n+\t\t\t\treturn WidthConvertibleToDaysBinaryOperator::Operation(bucket_width, ts, calendar);\n+\t\t\tcase BucketWidthType::CONVERTIBLE_TO_MONTHS:\n+\t\t\t\treturn WidthConvertibleToMonthsBinaryOperator::Operation(bucket_width, ts, calendar);\n+\t\t\tdefault:\n+\t\t\t\tthrow NotImplementedException(\"Bucket type not implemented for ICU TIME_BUCKET\");\n+\t\t\t}\n+\t\t}\n+\t};\n+\n+\tstruct OffsetWidthConvertibleToMicrosTernaryOperator {\n+\t\tstatic inline timestamp_t Operation(interval_t bucket_width, timestamp_t ts, interval_t offset,\n+\t\t                                    icu::Calendar *calendar) {\n+\t\t\tif (!Value::IsFinite(ts)) {\n+\t\t\t\treturn ts;\n+\t\t\t}\n+\t\t\tstatic timestamp_t origin = Timestamp::FromEpochMicroSeconds(DEFAULT_ORIGIN_MICROS_1);\n+\t\t\treturn Add(calendar,\n+\t\t\t           WidthConvertibleToMicrosCommon(bucket_width.micros, Sub(calendar, ts, offset), origin, calendar),\n+\t\t\t           offset);\n+\t\t}\n+\t};\n+\n+\tstruct OffsetWidthConvertibleToDaysTernaryOperator {\n+\t\tstatic inline timestamp_t Operation(interval_t bucket_width, timestamp_t ts, interval_t offset,\n+\t\t                                    icu::Calendar *calendar) {\n+\t\t\tif (!Value::IsFinite(ts)) {\n+\t\t\t\treturn ts;\n+\t\t\t}\n+\t\t\tstatic timestamp_t origin = Timestamp::FromEpochMicroSeconds(DEFAULT_ORIGIN_MICROS_1);\n+\t\t\treturn Add(calendar,\n+\t\t\t           WidthConvertibleToDaysCommon(bucket_width.days, Sub(calendar, ts, offset), origin, calendar),\n+\t\t\t           offset);\n+\t\t}\n+\t};\n+\n+\tstruct OffsetWidthConvertibleToMonthsTernaryOperator {\n+\t\tstatic inline timestamp_t Operation(interval_t bucket_width, timestamp_t ts, interval_t offset,\n+\t\t                                    icu::Calendar *calendar) {\n+\t\t\tif (!Value::IsFinite(ts)) {\n+\t\t\t\treturn ts;\n+\t\t\t}\n+\t\t\tstatic timestamp_t origin = Timestamp::FromEpochMicroSeconds(DEFAULT_ORIGIN_MICROS_2);\n+\t\t\treturn Add(calendar,\n+\t\t\t           WidthConvertibleToMonthsCommon(bucket_width.months, Sub(calendar, ts, offset), origin, calendar),\n+\t\t\t           offset);\n+\t\t}\n+\t};\n+\n+\tstruct OffsetTernaryOperator {\n+\t\tstatic inline timestamp_t Operation(interval_t bucket_width, timestamp_t ts, interval_t offset,\n+\t\t                                    icu::Calendar *calendar) {\n+\t\t\tBucketWidthType bucket_width_type = ClassifyBucketWidthErrorThrow(bucket_width);\n+\t\t\tswitch (bucket_width_type) {\n+\t\t\tcase BucketWidthType::CONVERTIBLE_TO_MICROS:\n+\t\t\t\treturn OffsetWidthConvertibleToMicrosTernaryOperator::Operation(bucket_width, ts, offset, calendar);\n+\t\t\tcase BucketWidthType::CONVERTIBLE_TO_DAYS:\n+\t\t\t\treturn OffsetWidthConvertibleToDaysTernaryOperator::Operation(bucket_width, ts, offset, calendar);\n+\t\t\tcase BucketWidthType::CONVERTIBLE_TO_MONTHS:\n+\t\t\t\treturn OffsetWidthConvertibleToMonthsTernaryOperator::Operation(bucket_width, ts, offset, calendar);\n+\t\t\tdefault:\n+\t\t\t\tthrow NotImplementedException(\"Bucket type not implemented for ICU TIME_BUCKET\");\n+\t\t\t}\n+\t\t}\n+\t};\n+\n+\tstruct OriginWidthConvertibleToMicrosTernaryOperator {\n+\t\tstatic inline timestamp_t Operation(interval_t bucket_width, timestamp_t ts, timestamp_t origin,\n+\t\t                                    icu::Calendar *calendar) {\n+\t\t\tif (!Value::IsFinite(ts)) {\n+\t\t\t\treturn ts;\n+\t\t\t}\n+\t\t\treturn WidthConvertibleToMicrosCommon(bucket_width.micros, ts, origin, calendar);\n+\t\t}\n+\t};\n+\n+\tstruct OriginWidthConvertibleToDaysTernaryOperator {\n+\t\tstatic inline timestamp_t Operation(interval_t bucket_width, timestamp_t ts, timestamp_t origin,\n+\t\t                                    icu::Calendar *calendar) {\n+\t\t\tif (!Value::IsFinite(ts)) {\n+\t\t\t\treturn ts;\n+\t\t\t}\n+\t\t\treturn WidthConvertibleToDaysCommon(bucket_width.days, ts, origin, calendar);\n+\t\t}\n+\t};\n+\n+\tstruct OriginWidthConvertibleToMonthsTernaryOperator {\n+\t\tstatic inline timestamp_t Operation(interval_t bucket_width, timestamp_t ts, timestamp_t origin,\n+\t\t                                    icu::Calendar *calendar) {\n+\t\t\tif (!Value::IsFinite(ts)) {\n+\t\t\t\treturn ts;\n+\t\t\t}\n+\t\t\treturn WidthConvertibleToMonthsCommon(bucket_width.months, ts, origin, calendar);\n+\t\t}\n+\t};\n+\n+\tstruct OriginTernaryOperator {\n+\t\tstatic inline timestamp_t Operation(interval_t bucket_width, timestamp_t ts, timestamp_t origin,\n+\t\t                                    ValidityMask &mask, idx_t idx, icu::Calendar *calendar) {\n+\t\t\tif (!Value::IsFinite(origin)) {\n+\t\t\t\tmask.SetInvalid(idx);\n+\t\t\t\treturn timestamp_t(0);\n+\t\t\t}\n+\t\t\tBucketWidthType bucket_width_type = ClassifyBucketWidthErrorThrow(bucket_width);\n+\t\t\tswitch (bucket_width_type) {\n+\t\t\tcase BucketWidthType::CONVERTIBLE_TO_MICROS:\n+\t\t\t\treturn OriginWidthConvertibleToMicrosTernaryOperator::Operation(bucket_width, ts, origin, calendar);\n+\t\t\tcase BucketWidthType::CONVERTIBLE_TO_DAYS:\n+\t\t\t\treturn OriginWidthConvertibleToDaysTernaryOperator::Operation(bucket_width, ts, origin, calendar);\n+\t\t\tcase BucketWidthType::CONVERTIBLE_TO_MONTHS:\n+\t\t\t\treturn OriginWidthConvertibleToMonthsTernaryOperator::Operation(bucket_width, ts, origin, calendar);\n+\t\t\tdefault:\n+\t\t\t\tthrow NotImplementedException(\"Bucket type not implemented for ICU TIME_BUCKET\");\n+\t\t\t}\n+\t\t}\n+\t};\n+\n+\tstruct TimeZoneWidthConvertibleToMicrosBinaryOperator {\n+\t\tstatic inline timestamp_t Operation(interval_t bucket_width, timestamp_t ts, timestamp_t origin,\n+\t\t                                    icu::Calendar *calendar) {\n+\t\t\tif (!Value::IsFinite(ts)) {\n+\t\t\t\treturn ts;\n+\t\t\t}\n+\t\t\treturn WidthConvertibleToMicrosCommon(bucket_width.micros, ts, origin, calendar);\n+\t\t}\n+\t};\n+\n+\tstruct TimeZoneWidthConvertibleToDaysBinaryOperator {\n+\t\tstatic inline timestamp_t Operation(interval_t bucket_width, timestamp_t ts, timestamp_t origin,\n+\t\t                                    icu::Calendar *calendar) {\n+\t\t\tif (!Value::IsFinite(ts)) {\n+\t\t\t\treturn ts;\n+\t\t\t}\n+\t\t\treturn WidthConvertibleToDaysCommon(bucket_width.days, ts, origin, calendar);\n+\t\t}\n+\t};\n+\n+\tstruct TimeZoneWidthConvertibleToMonthsBinaryOperator {\n+\t\tstatic inline timestamp_t Operation(interval_t bucket_width, timestamp_t ts, timestamp_t origin,\n+\t\t                                    icu::Calendar *calendar) {\n+\t\t\tif (!Value::IsFinite(ts)) {\n+\t\t\t\treturn ts;\n+\t\t\t}\n+\t\t\treturn WidthConvertibleToMonthsCommon(bucket_width.months, ts, origin, calendar);\n+\t\t}\n+\t};\n+\n+\tstruct TimeZoneTernaryOperator {\n+\t\tstatic inline timestamp_t Operation(interval_t bucket_width, timestamp_t ts, string_t tz,\n+\t\t                                    icu::Calendar *calendar) {\n+\t\t\tSetTimeZone(calendar, tz);\n+\n+\t\t\ttimestamp_t origin;\n+\t\t\tBucketWidthType bucket_width_type = ClassifyBucketWidthErrorThrow(bucket_width);\n+\t\t\tswitch (bucket_width_type) {\n+\t\t\tcase BucketWidthType::CONVERTIBLE_TO_MICROS:\n+\t\t\t\torigin = ICUDateFunc::FromNaive(calendar, Timestamp::FromEpochMicroSeconds(DEFAULT_ORIGIN_MICROS_1));\n+\t\t\t\treturn TimeZoneWidthConvertibleToMicrosBinaryOperator::Operation(bucket_width, ts, origin, calendar);\n+\t\t\tcase BucketWidthType::CONVERTIBLE_TO_DAYS:\n+\t\t\t\torigin = ICUDateFunc::FromNaive(calendar, Timestamp::FromEpochMicroSeconds(DEFAULT_ORIGIN_MICROS_1));\n+\t\t\t\treturn TimeZoneWidthConvertibleToDaysBinaryOperator::Operation(bucket_width, ts, origin, calendar);\n+\t\t\tcase BucketWidthType::CONVERTIBLE_TO_MONTHS:\n+\t\t\t\torigin = ICUDateFunc::FromNaive(calendar, Timestamp::FromEpochMicroSeconds(DEFAULT_ORIGIN_MICROS_2));\n+\t\t\t\treturn TimeZoneWidthConvertibleToMonthsBinaryOperator::Operation(bucket_width, ts, origin, calendar);\n+\t\t\tdefault:\n+\t\t\t\tthrow NotImplementedException(\"Bucket type not implemented for ICU TIME_BUCKET\");\n+\t\t\t}\n+\t\t}\n+\t};\n+\n+\tstatic void ICUTimeBucketFunction(DataChunk &args, ExpressionState &state, Vector &result) {\n+\t\tD_ASSERT(args.ColumnCount() == 2);\n+\n+\t\tauto &func_expr = (BoundFunctionExpression &)state.expr;\n+\t\tauto &info = (BindData &)*func_expr.bind_info;\n+\t\tCalendarPtr calendar_ptr(info.calendar->clone());\n+\t\tauto calendar = calendar_ptr.get();\n+\t\tSetTimeZone(calendar, string_t(\"UTC\"));\n+\n+\t\tauto &bucket_width_arg = args.data[0];\n+\t\tauto &ts_arg = args.data[1];\n+\n+\t\tif (bucket_width_arg.GetVectorType() == VectorType::CONSTANT_VECTOR) {\n+\t\t\tif (ConstantVector::IsNull(bucket_width_arg)) {\n+\t\t\t\tresult.SetVectorType(VectorType::CONSTANT_VECTOR);\n+\t\t\t\tConstantVector::SetNull(result, true);\n+\t\t\t} else {\n+\t\t\t\tinterval_t bucket_width = *ConstantVector::GetData<interval_t>(bucket_width_arg);\n+\t\t\t\tBucketWidthType bucket_width_type = ClassifyBucketWidth(bucket_width);\n+\t\t\t\tswitch (bucket_width_type) {\n+\t\t\t\tcase BucketWidthType::CONVERTIBLE_TO_MICROS:\n+\t\t\t\t\tBinaryExecutor::Execute<interval_t, timestamp_t, timestamp_t>(\n+\t\t\t\t\t    bucket_width_arg, ts_arg, result, args.size(), [&](interval_t bucket_width, timestamp_t ts) {\n+\t\t\t\t\t\t    return WidthConvertibleToMicrosBinaryOperator::Operation(bucket_width, ts, calendar);\n+\t\t\t\t\t    });\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase BucketWidthType::CONVERTIBLE_TO_DAYS:\n+\t\t\t\t\tBinaryExecutor::Execute<interval_t, timestamp_t, timestamp_t>(\n+\t\t\t\t\t    bucket_width_arg, ts_arg, result, args.size(), [&](interval_t bucket_width, timestamp_t ts) {\n+\t\t\t\t\t\t    return WidthConvertibleToDaysBinaryOperator::Operation(bucket_width, ts, calendar);\n+\t\t\t\t\t    });\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase BucketWidthType::CONVERTIBLE_TO_MONTHS:\n+\t\t\t\t\tBinaryExecutor::Execute<interval_t, timestamp_t, timestamp_t>(\n+\t\t\t\t\t    bucket_width_arg, ts_arg, result, args.size(), [&](interval_t bucket_width, timestamp_t ts) {\n+\t\t\t\t\t\t    return WidthConvertibleToMonthsBinaryOperator::Operation(bucket_width, ts, calendar);\n+\t\t\t\t\t    });\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase BucketWidthType::UNCLASSIFIED:\n+\t\t\t\t\tBinaryExecutor::Execute<interval_t, timestamp_t, timestamp_t>(\n+\t\t\t\t\t    bucket_width_arg, ts_arg, result, args.size(), [&](interval_t bucket_width, timestamp_t ts) {\n+\t\t\t\t\t\t    return BinaryOperator::Operation(bucket_width, ts, calendar);\n+\t\t\t\t\t    });\n+\t\t\t\t\tbreak;\n+\t\t\t\tdefault:\n+\t\t\t\t\tthrow NotImplementedException(\"Bucket type not implemented for ICU TIME_BUCKET\");\n+\t\t\t\t}\n+\t\t\t}\n+\t\t} else {\n+\t\t\tBinaryExecutor::Execute<interval_t, timestamp_t, timestamp_t>(\n+\t\t\t    bucket_width_arg, ts_arg, result, args.size(), [&](interval_t bucket_width, timestamp_t ts) {\n+\t\t\t\t    return BinaryOperator::Operation(bucket_width, ts, calendar);\n+\t\t\t    });\n+\t\t}\n+\t}\n+\n+\tstatic void ICUTimeBucketOffsetFunction(DataChunk &args, ExpressionState &state, Vector &result) {\n+\t\tD_ASSERT(args.ColumnCount() == 3);\n+\n+\t\tauto &func_expr = (BoundFunctionExpression &)state.expr;\n+\t\tauto &info = (BindData &)*func_expr.bind_info;\n+\t\tCalendarPtr calendar_ptr(info.calendar->clone());\n+\t\tauto calendar = calendar_ptr.get();\n+\t\tSetTimeZone(calendar, string_t(\"UTC\"));\n+\n+\t\tauto &bucket_width_arg = args.data[0];\n+\t\tauto &ts_arg = args.data[1];\n+\t\tauto &offset_arg = args.data[2];\n+\n+\t\tif (bucket_width_arg.GetVectorType() == VectorType::CONSTANT_VECTOR) {\n+\t\t\tif (ConstantVector::IsNull(bucket_width_arg)) {\n+\t\t\t\tresult.SetVectorType(VectorType::CONSTANT_VECTOR);\n+\t\t\t\tConstantVector::SetNull(result, true);\n+\t\t\t} else {\n+\t\t\t\tinterval_t bucket_width = *ConstantVector::GetData<interval_t>(bucket_width_arg);\n+\t\t\t\tBucketWidthType bucket_width_type = ClassifyBucketWidth(bucket_width);\n+\t\t\t\tswitch (bucket_width_type) {\n+\t\t\t\tcase BucketWidthType::CONVERTIBLE_TO_MICROS:\n+\t\t\t\t\tTernaryExecutor::Execute<interval_t, timestamp_t, interval_t, timestamp_t>(\n+\t\t\t\t\t    bucket_width_arg, ts_arg, offset_arg, result, args.size(),\n+\t\t\t\t\t    [&](interval_t bucket_width, timestamp_t ts, interval_t offset) {\n+\t\t\t\t\t\t    return OffsetWidthConvertibleToMicrosTernaryOperator::Operation(bucket_width, ts, offset,\n+\t\t\t\t\t\t                                                                    calendar);\n+\t\t\t\t\t    });\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase BucketWidthType::CONVERTIBLE_TO_DAYS:\n+\t\t\t\t\tTernaryExecutor::Execute<interval_t, timestamp_t, interval_t, timestamp_t>(\n+\t\t\t\t\t    bucket_width_arg, ts_arg, offset_arg, result, args.size(),\n+\t\t\t\t\t    [&](interval_t bucket_width, timestamp_t ts, interval_t offset) {\n+\t\t\t\t\t\t    return OffsetWidthConvertibleToDaysTernaryOperator::Operation(bucket_width, ts, offset,\n+\t\t\t\t\t\t                                                                  calendar);\n+\t\t\t\t\t    });\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase BucketWidthType::CONVERTIBLE_TO_MONTHS:\n+\t\t\t\t\tTernaryExecutor::Execute<interval_t, timestamp_t, interval_t, timestamp_t>(\n+\t\t\t\t\t    bucket_width_arg, ts_arg, offset_arg, result, args.size(),\n+\t\t\t\t\t    [&](interval_t bucket_width, timestamp_t ts, interval_t offset) {\n+\t\t\t\t\t\t    return OffsetWidthConvertibleToMonthsTernaryOperator::Operation(bucket_width, ts, offset,\n+\t\t\t\t\t\t                                                                    calendar);\n+\t\t\t\t\t    });\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase BucketWidthType::UNCLASSIFIED:\n+\t\t\t\t\tTernaryExecutor::Execute<interval_t, timestamp_t, interval_t, timestamp_t>(\n+\t\t\t\t\t    bucket_width_arg, ts_arg, offset_arg, result, args.size(),\n+\t\t\t\t\t    [&](interval_t bucket_width, timestamp_t ts, interval_t offset) {\n+\t\t\t\t\t\t    return OffsetTernaryOperator::Operation(bucket_width, ts, offset, calendar);\n+\t\t\t\t\t    });\n+\t\t\t\t\tbreak;\n+\t\t\t\tdefault:\n+\t\t\t\t\tthrow NotImplementedException(\"Bucket type not implemented for ICU TIME_BUCKET\");\n+\t\t\t\t}\n+\t\t\t}\n+\t\t} else {\n+\t\t\tTernaryExecutor::Execute<interval_t, timestamp_t, interval_t, timestamp_t>(\n+\t\t\t    bucket_width_arg, ts_arg, offset_arg, result, args.size(),\n+\t\t\t    [&](interval_t bucket_width, timestamp_t ts, interval_t offset) {\n+\t\t\t\t    return OffsetTernaryOperator::Operation(bucket_width, ts, offset, calendar);\n+\t\t\t    });\n+\t\t}\n+\t}\n+\n+\tstatic void ICUTimeBucketOriginFunction(DataChunk &args, ExpressionState &state, Vector &result) {\n+\t\tD_ASSERT(args.ColumnCount() == 3);\n+\n+\t\tauto &func_expr = (BoundFunctionExpression &)state.expr;\n+\t\tauto &info = (BindData &)*func_expr.bind_info;\n+\t\tCalendarPtr calendar_ptr(info.calendar->clone());\n+\t\tauto calendar = calendar_ptr.get();\n+\t\tSetTimeZone(calendar, string_t(\"UTC\"));\n+\n+\t\tauto &bucket_width_arg = args.data[0];\n+\t\tauto &ts_arg = args.data[1];\n+\t\tauto &origin_arg = args.data[2];\n+\n+\t\tif (bucket_width_arg.GetVectorType() == VectorType::CONSTANT_VECTOR &&\n+\t\t    origin_arg.GetVectorType() == VectorType::CONSTANT_VECTOR) {\n+\t\t\tif (ConstantVector::IsNull(bucket_width_arg) || ConstantVector::IsNull(origin_arg) ||\n+\t\t\t    !Value::IsFinite(*ConstantVector::GetData<timestamp_t>(origin_arg))) {\n+\t\t\t\tresult.SetVectorType(VectorType::CONSTANT_VECTOR);\n+\t\t\t\tConstantVector::SetNull(result, true);\n+\t\t\t} else {\n+\t\t\t\tinterval_t bucket_width = *ConstantVector::GetData<interval_t>(bucket_width_arg);\n+\t\t\t\tBucketWidthType bucket_width_type = ClassifyBucketWidth(bucket_width);\n+\t\t\t\tswitch (bucket_width_type) {\n+\t\t\t\tcase BucketWidthType::CONVERTIBLE_TO_MICROS:\n+\t\t\t\t\tTernaryExecutor::Execute<interval_t, timestamp_t, timestamp_t, timestamp_t>(\n+\t\t\t\t\t    bucket_width_arg, ts_arg, origin_arg, result, args.size(),\n+\t\t\t\t\t    [&](interval_t bucket_width, timestamp_t ts, timestamp_t origin) {\n+\t\t\t\t\t\t    return OriginWidthConvertibleToMicrosTernaryOperator::Operation(bucket_width, ts, origin,\n+\t\t\t\t\t\t                                                                    calendar);\n+\t\t\t\t\t    });\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase BucketWidthType::CONVERTIBLE_TO_DAYS:\n+\t\t\t\t\tTernaryExecutor::Execute<interval_t, timestamp_t, timestamp_t, timestamp_t>(\n+\t\t\t\t\t    bucket_width_arg, ts_arg, origin_arg, result, args.size(),\n+\t\t\t\t\t    [&](interval_t bucket_width, timestamp_t ts, timestamp_t origin) {\n+\t\t\t\t\t\t    return OriginWidthConvertibleToDaysTernaryOperator::Operation(bucket_width, ts, origin,\n+\t\t\t\t\t\t                                                                  calendar);\n+\t\t\t\t\t    });\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase BucketWidthType::CONVERTIBLE_TO_MONTHS:\n+\t\t\t\t\tTernaryExecutor::Execute<interval_t, timestamp_t, timestamp_t, timestamp_t>(\n+\t\t\t\t\t    bucket_width_arg, ts_arg, origin_arg, result, args.size(),\n+\t\t\t\t\t    [&](interval_t bucket_width, timestamp_t ts, timestamp_t origin) {\n+\t\t\t\t\t\t    return OriginWidthConvertibleToMonthsTernaryOperator::Operation(bucket_width, ts, origin,\n+\t\t\t\t\t\t                                                                    calendar);\n+\t\t\t\t\t    });\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase BucketWidthType::UNCLASSIFIED:\n+\t\t\t\t\tTernaryExecutor::ExecuteWithNulls<interval_t, timestamp_t, timestamp_t, timestamp_t>(\n+\t\t\t\t\t    bucket_width_arg, ts_arg, origin_arg, result, args.size(),\n+\t\t\t\t\t    [&](interval_t bucket_width, timestamp_t ts, timestamp_t origin, ValidityMask &mask,\n+\t\t\t\t\t        idx_t idx) {\n+\t\t\t\t\t\t    return OriginTernaryOperator::Operation(bucket_width, ts, origin, mask, idx, calendar);\n+\t\t\t\t\t    });\n+\t\t\t\t\tbreak;\n+\t\t\t\tdefault:\n+\t\t\t\t\tthrow NotImplementedException(\"Bucket type not implemented for ICU TIME_BUCKET\");\n+\t\t\t\t}\n+\t\t\t}\n+\t\t} else {\n+\t\t\tTernaryExecutor::ExecuteWithNulls<interval_t, timestamp_t, timestamp_t, timestamp_t>(\n+\t\t\t    bucket_width_arg, ts_arg, origin_arg, result, args.size(),\n+\t\t\t    [&](interval_t bucket_width, timestamp_t ts, timestamp_t origin, ValidityMask &mask, idx_t idx) {\n+\t\t\t\t    return OriginTernaryOperator::Operation(bucket_width, ts, origin, mask, idx, calendar);\n+\t\t\t    });\n+\t\t}\n+\t}\n+\n+\tstatic void ICUTimeBucketTimeZoneFunction(DataChunk &args, ExpressionState &state, Vector &result) {\n+\t\tD_ASSERT(args.ColumnCount() == 3);\n+\n+\t\tauto &func_expr = (BoundFunctionExpression &)state.expr;\n+\t\tauto &info = (BindData &)*func_expr.bind_info;\n+\t\tCalendarPtr calendar_ptr(info.calendar->clone());\n+\t\tauto calendar = calendar_ptr.get();\n+\n+\t\tauto &bucket_width_arg = args.data[0];\n+\t\tauto &ts_arg = args.data[1];\n+\t\tauto &tz_arg = args.data[2];\n+\n+\t\tif (bucket_width_arg.GetVectorType() == VectorType::CONSTANT_VECTOR &&\n+\t\t    tz_arg.GetVectorType() == VectorType::CONSTANT_VECTOR) {\n+\t\t\tif (ConstantVector::IsNull(bucket_width_arg) || ConstantVector::IsNull(tz_arg)) {\n+\t\t\t\tresult.SetVectorType(VectorType::CONSTANT_VECTOR);\n+\t\t\t\tConstantVector::SetNull(result, true);\n+\t\t\t} else {\n+\t\t\t\tinterval_t bucket_width = *ConstantVector::GetData<interval_t>(bucket_width_arg);\n+\t\t\t\tSetTimeZone(calendar, *ConstantVector::GetData<string_t>(tz_arg));\n+\t\t\t\ttimestamp_t origin;\n+\t\t\t\tBucketWidthType bucket_width_type = ClassifyBucketWidth(bucket_width);\n+\t\t\t\tswitch (bucket_width_type) {\n+\t\t\t\tcase BucketWidthType::CONVERTIBLE_TO_MICROS:\n+\t\t\t\t\torigin =\n+\t\t\t\t\t    ICUDateFunc::FromNaive(calendar, Timestamp::FromEpochMicroSeconds(DEFAULT_ORIGIN_MICROS_1));\n+\t\t\t\t\tBinaryExecutor::Execute<interval_t, timestamp_t, timestamp_t>(\n+\t\t\t\t\t    bucket_width_arg, ts_arg, result, args.size(), [&](interval_t bucket_width, timestamp_t ts) {\n+\t\t\t\t\t\t    return TimeZoneWidthConvertibleToMicrosBinaryOperator::Operation(bucket_width, ts, origin,\n+\t\t\t\t\t\t                                                                     calendar);\n+\t\t\t\t\t    });\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase BucketWidthType::CONVERTIBLE_TO_DAYS:\n+\t\t\t\t\torigin =\n+\t\t\t\t\t    ICUDateFunc::FromNaive(calendar, Timestamp::FromEpochMicroSeconds(DEFAULT_ORIGIN_MICROS_1));\n+\t\t\t\t\tBinaryExecutor::Execute<interval_t, timestamp_t, timestamp_t>(\n+\t\t\t\t\t    bucket_width_arg, ts_arg, result, args.size(), [&](interval_t bucket_width, timestamp_t ts) {\n+\t\t\t\t\t\t    return TimeZoneWidthConvertibleToDaysBinaryOperator::Operation(bucket_width, ts, origin,\n+\t\t\t\t\t\t                                                                   calendar);\n+\t\t\t\t\t    });\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase BucketWidthType::CONVERTIBLE_TO_MONTHS:\n+\t\t\t\t\torigin =\n+\t\t\t\t\t    ICUDateFunc::FromNaive(calendar, Timestamp::FromEpochMicroSeconds(DEFAULT_ORIGIN_MICROS_2));\n+\t\t\t\t\tBinaryExecutor::Execute<interval_t, timestamp_t, timestamp_t>(\n+\t\t\t\t\t    bucket_width_arg, ts_arg, result, args.size(), [&](interval_t bucket_width, timestamp_t ts) {\n+\t\t\t\t\t\t    return TimeZoneWidthConvertibleToMonthsBinaryOperator::Operation(bucket_width, ts, origin,\n+\t\t\t\t\t\t                                                                     calendar);\n+\t\t\t\t\t    });\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase BucketWidthType::UNCLASSIFIED:\n+\t\t\t\t\tTernaryExecutor::Execute<interval_t, timestamp_t, string_t, timestamp_t>(\n+\t\t\t\t\t    bucket_width_arg, ts_arg, tz_arg, result, args.size(),\n+\t\t\t\t\t    [&](interval_t bucket_width, timestamp_t ts, string_t tz) {\n+\t\t\t\t\t\t    return TimeZoneTernaryOperator::Operation(bucket_width, ts, tz, calendar);\n+\t\t\t\t\t    });\n+\t\t\t\t\tbreak;\n+\t\t\t\tdefault:\n+\t\t\t\t\tthrow NotImplementedException(\"Bucket type not implemented for ICU TIME_BUCKET\");\n+\t\t\t\t}\n+\t\t\t}\n+\t\t} else {\n+\t\t\tTernaryExecutor::Execute<interval_t, timestamp_t, string_t, timestamp_t>(\n+\t\t\t    bucket_width_arg, ts_arg, tz_arg, result, args.size(),\n+\t\t\t    [&](interval_t bucket_width, timestamp_t ts, string_t tz) {\n+\t\t\t\t    return TimeZoneTernaryOperator::Operation(bucket_width, ts, tz, calendar);\n+\t\t\t    });\n+\t\t}\n+\t}\n+\n+\tstatic void AddTimeBucketFunction(ClientContext &context) {\n+\t\tScalarFunctionSet set(\"time_bucket\");\n+\t\tset.AddFunction(ScalarFunction({LogicalType::INTERVAL, LogicalType::TIMESTAMP_TZ}, LogicalType::TIMESTAMP_TZ,\n+\t\t                               ICUTimeBucketFunction, Bind));\n+\t\tset.AddFunction(ScalarFunction({LogicalType::INTERVAL, LogicalType::TIMESTAMP_TZ, LogicalType::INTERVAL},\n+\t\t                               LogicalType::TIMESTAMP_TZ, ICUTimeBucketOffsetFunction, Bind));\n+\t\tset.AddFunction(ScalarFunction({LogicalType::INTERVAL, LogicalType::TIMESTAMP_TZ, LogicalType::TIMESTAMP_TZ},\n+\t\t                               LogicalType::TIMESTAMP_TZ, ICUTimeBucketOriginFunction, Bind));\n+\t\tset.AddFunction(ScalarFunction({LogicalType::INTERVAL, LogicalType::TIMESTAMP_TZ, LogicalType::VARCHAR},\n+\t\t                               LogicalType::TIMESTAMP_TZ, ICUTimeBucketTimeZoneFunction, Bind));\n+\n+\t\tCreateScalarFunctionInfo func_info(set);\n+\t\tauto &catalog = Catalog::GetSystemCatalog(context);\n+\t\tcatalog.AddFunction(context, &func_info);\n+\t}\n+};\n+\n+void RegisterICUTimeBucketFunctions(ClientContext &context) {\n+\tICUTimeBucket::AddTimeBucketFunction(context);\n+}\n+\n+} // namespace duckdb\ndiff --git a/extension/icu/icu-timezone.cpp b/extension/icu/icu-timezone.cpp\nindex 29d45d50de31..83c16af30e8f 100644\n--- a/extension/icu/icu-timezone.cpp\n+++ b/extension/icu/icu-timezone.cpp\n@@ -338,6 +338,10 @@ struct ICUTimeZoneFunc : public ICUDateFunc {\n \t}\n };\n \n+timestamp_t ICUDateFunc::FromNaive(icu::Calendar *calendar, timestamp_t naive) {\n+\treturn ICUFromNaiveTimestamp::Operation(calendar, naive);\n+}\n+\n void RegisterICUTimeZoneFunctions(ClientContext &context) {\n \t//\tTable functions\n \tauto &catalog = Catalog::GetSystemCatalog(context);\ndiff --git a/extension/icu/include/icu-datefunc.hpp b/extension/icu/include/icu-datefunc.hpp\nindex 01f661c225fa..a0cd378e7fc6 100644\n--- a/extension/icu/include/icu-datefunc.hpp\n+++ b/extension/icu/include/icu-datefunc.hpp\n@@ -58,6 +58,16 @@ struct ICUDateFunc {\n \tstatic int32_t ExtractField(icu::Calendar *calendar, UCalendarDateFields field);\n \t//! Subtracts the field of the given date from the calendar\n \tstatic int64_t SubtractField(icu::Calendar *calendar, UCalendarDateFields field, timestamp_t end_date);\n+\t//! Adds the timestamp and the interval using the calendar\n+\tstatic timestamp_t Add(icu::Calendar *calendar, timestamp_t timestamp, interval_t interval);\n+\t//! Subtracts the interval from the timestamp using the calendar\n+\tstatic timestamp_t Sub(icu::Calendar *calendar, timestamp_t timestamp, interval_t interval);\n+\t//! Subtracts the latter timestamp from the former timestamp using the calendar\n+\tstatic interval_t Sub(icu::Calendar *calendar, timestamp_t end_date, timestamp_t start_date);\n+\t//! Pulls out the bin values from the timestamp assuming it is an instant,\n+\t//! constructs an ICU timestamp, and then converts that back to a DuckDB instant\n+\t//! Adding offset doesn't really work around DST because the bin values are ambiguous\n+\tstatic timestamp_t FromNaive(icu::Calendar *calendar, timestamp_t naive);\n \n \t//! Truncates the calendar time to the given part precision\n \ttypedef void (*part_trunc_t)(icu::Calendar *calendar, uint64_t &micros);\ndiff --git a/extension/icu/include/icu-timebucket.hpp b/extension/icu/include/icu-timebucket.hpp\nnew file mode 100644\nindex 000000000000..f3bf42041ceb\n--- /dev/null\n+++ b/extension/icu/include/icu-timebucket.hpp\n@@ -0,0 +1,17 @@\n+//===----------------------------------------------------------------------===//\n+//                         DuckDB\n+//\n+// icu-timebucket.hpp\n+//\n+//\n+//===----------------------------------------------------------------------===//\n+\n+#pragma once\n+\n+#include \"duckdb.hpp\"\n+\n+namespace duckdb {\n+\n+void RegisterICUTimeBucketFunctions(ClientContext &context);\n+\n+} // namespace duckdb\ndiff --git a/src/include/duckdb/common/operator/convert_to_string.hpp b/src/include/duckdb/common/operator/convert_to_string.hpp\nindex 067b75ad9832..a41c94548b73 100644\n--- a/src/include/duckdb/common/operator/convert_to_string.hpp\n+++ b/src/include/duckdb/common/operator/convert_to_string.hpp\n@@ -17,44 +17,44 @@ namespace duckdb {\n \n struct ConvertToString {\n \ttemplate <class SRC>\n-\tstatic inline string Operation(SRC input) {\n+\tDUCKDB_API static inline string Operation(SRC input) {\n \t\tthrow InternalException(\"Unrecognized type for ConvertToString %s\", GetTypeId<SRC>());\n \t}\n };\n \n template <>\n-string ConvertToString::Operation(bool input);\n+DUCKDB_API string ConvertToString::Operation(bool input);\n template <>\n-string ConvertToString::Operation(int8_t input);\n+DUCKDB_API string ConvertToString::Operation(int8_t input);\n template <>\n-string ConvertToString::Operation(int16_t input);\n+DUCKDB_API string ConvertToString::Operation(int16_t input);\n template <>\n-string ConvertToString::Operation(int32_t input);\n+DUCKDB_API string ConvertToString::Operation(int32_t input);\n template <>\n-string ConvertToString::Operation(int64_t input);\n+DUCKDB_API string ConvertToString::Operation(int64_t input);\n template <>\n-string ConvertToString::Operation(uint8_t input);\n+DUCKDB_API string ConvertToString::Operation(uint8_t input);\n template <>\n-string ConvertToString::Operation(uint16_t input);\n+DUCKDB_API string ConvertToString::Operation(uint16_t input);\n template <>\n-string ConvertToString::Operation(uint32_t input);\n+DUCKDB_API string ConvertToString::Operation(uint32_t input);\n template <>\n-string ConvertToString::Operation(uint64_t input);\n+DUCKDB_API string ConvertToString::Operation(uint64_t input);\n template <>\n-string ConvertToString::Operation(hugeint_t input);\n+DUCKDB_API string ConvertToString::Operation(hugeint_t input);\n template <>\n-string ConvertToString::Operation(float input);\n+DUCKDB_API string ConvertToString::Operation(float input);\n template <>\n-string ConvertToString::Operation(double input);\n+DUCKDB_API string ConvertToString::Operation(double input);\n template <>\n-string ConvertToString::Operation(interval_t input);\n+DUCKDB_API string ConvertToString::Operation(interval_t input);\n template <>\n-string ConvertToString::Operation(date_t input);\n+DUCKDB_API string ConvertToString::Operation(date_t input);\n template <>\n-string ConvertToString::Operation(dtime_t input);\n+DUCKDB_API string ConvertToString::Operation(dtime_t input);\n template <>\n-string ConvertToString::Operation(timestamp_t input);\n+DUCKDB_API string ConvertToString::Operation(timestamp_t input);\n template <>\n-string ConvertToString::Operation(string_t input);\n+DUCKDB_API string ConvertToString::Operation(string_t input);\n \n } // namespace duckdb\ndiff --git a/src/include/duckdb/common/operator/subtract.hpp b/src/include/duckdb/common/operator/subtract.hpp\nindex 85a3de3f94ea..5706905f0769 100644\n--- a/src/include/duckdb/common/operator/subtract.hpp\n+++ b/src/include/duckdb/common/operator/subtract.hpp\n@@ -72,7 +72,7 @@ bool TrySubtractOperator::Operation(hugeint_t left, hugeint_t right, hugeint_t &\n \n struct SubtractOperatorOverflowCheck {\n \ttemplate <class TA, class TB, class TR>\n-\tstatic inline TR Operation(TA left, TB right) {\n+\tDUCKDB_API static inline TR Operation(TA left, TB right) {\n \t\tTR result;\n \t\tif (!TrySubtractOperator::Operation(left, right, result)) {\n \t\t\tthrow OutOfRangeException(\"Overflow in subtraction of %s (%d - %d)!\", TypeIdToString(GetTypeId<TA>()), left,\n",
  "test_patch": "diff --git a/test/sql/function/timestamp/test_icu_time_bucket_timestamptz.test b/test/sql/function/timestamp/test_icu_time_bucket_timestamptz.test\nnew file mode 100644\nindex 000000000000..c231e90de33a\n--- /dev/null\n+++ b/test/sql/function/timestamp/test_icu_time_bucket_timestamptz.test\n@@ -0,0 +1,1215 @@\n+# name: test/sql/function/timestamp/test_icu_time_bucket_timestamptz.test\n+# description: Test time bucket functionality\n+# group: [timestamp]\n+\n+require icu\n+\n+statement ok\n+SET Calendar = 'gregorian';\n+\n+statement ok\n+SET TimeZone = 'America/Los_Angeles';\n+\n+statement ok\n+CREATE TABLE timestamps_tz(w INTERVAL, t TIMESTAMPTZ, shift INTERVAL, origin TIMESTAMPTZ, timezone VARCHAR);\n+\n+statement ok\n+INSERT INTO timestamps_tz VALUES ('10 days', '-infinity', '0 days', '1970-01-05 00:00:00+00', 'UTC'),\n+\t('333 microseconds', '1907-11-20 04:00:00+08', '0 microseconds', '1970-03-06 00:00:00+00', 'UTC'),\n+\t('333 microseconds', '1970-01-01 00:00:00+00', '444 microseconds', '1970-01-05 00:05:05.006006+03', 'America/Los_Angeles'),\n+\t('333 microseconds', '1979-04-10 02:02:05.003003-03', '-444 microseconds', '1962-12-10 00:05:05.006006-03', 'America/Los_Angeles'),\n+\t('333 milliseconds', '1981-09-30 02:02:06.003003+00', '0 milliseconds', '1970-02-05 00:00:00+00', 'UTC'),\n+\t('333 milliseconds', '1982-06-15 02:02:07.003003+04', '444 milliseconds', '1970-11-15 00:05:05.006006+04', 'Asia/Aden'),\n+\t('333 milliseconds', '1985-02-20 02:02:08.003003-04', '-444 milliseconds', '1980-08-05 00:05:05.006006-04', 'Asia/Aden'),\n+\t('333 seconds', '1989-06-08 02:02:09.003003+00', '0 seconds', '1970-11-25 00:00:00+00', 'UTC'),\n+\t('333 seconds', '1990-07-11 02:02:10.003003+02', '444 seconds', '1970-04-10 00:05:05.006006+02', 'Pacific/Guam'),\n+\t('333 seconds', '1991-05-12 02:02:11.003003-02', '-444 seconds', '1971-01-05 00:05:05.006006-02', 'Pacific/Guam'),\n+\t('333 minutes', '1992-10-17 02:02:12.003003+00', '0 minutes', '1950-04-24 00:00:00+00', 'UTC'),\n+\t('333 minutes', '1994-12-05 02:02:13.003003+05', '444 minute', '1970-06-09 00:05:05.006006+05', 'Europe/Berlin'),\n+\t('333 minutes', '1997-01-02 02:02:14.003003-05', '-444 minute', '1970-07-06 00:05:05.006006-05', 'Europe/Berlin'),\n+\t('333 hours', '1999-04-26 02:02:15.003003+00', '0 hours', '1970-02-05 00:00:00+00', 'UTC'),\n+\t('333 hours', '2000-01-01 00:00:00+00', '444 hours', '1970-01-05 00:05:05.006006+01', 'Europe/London'),\n+\t('333 hours', '2000-01-03 00:00:00+00', '-444 hours', '1970-03-15 00:05:05.006006-01', 'Europe/London'),\n+\t('333 hours', '2000-03-26 02:00:00+01', '0 hours', '1980-10-05 00:00:00+00', 'Europe/London'),\n+\t('333 hours', '2000-04-02 03:00:00-07', '0 hours', '1990-05-20 00:00:00+00', 'Europe/London'),\n+\t('333 hours', '2000-10-29 01:00:00+00', '0 hours', '2010-07-27 00:00:00+00', 'Europe/London'),\n+\t('333 hours', '2000-10-29 01:00:00-08', '0 hours', '2010-07-27 00:00:00+00', 'Europe/London'),\n+\t('10 days', '2008-12-31 23:59:59.999999+00', '0 days', '1970-02-27 00:00:00+00', 'UTC'),\n+\t('1 week', '2010-05-03 02:02:19.003003+00', '0 days', '1970-07-25 00:00:00+00', 'UTC'),\n+\t('10 days', '2013-08-19 02:02:20.003003+02', '2 days 4 hours', '2003-03-24 00:05:05.006006+02', 'Asia/Kolkata'),\n+\t('10 days', '2014-07-15 02:02:21.003003-02', '-2 days 4 hours', '1970-04-12 00:05:05.006006-02', 'Asia/Kolkata'),\n+\t('2 months', '2016-03-21 02:02:22.003003+00', '0 months', '1970-11-05 00:00:00+00', 'UTC'),\n+\t('2 months', '2018-02-01 02:02:23.003003+09', '1 month 1 week', '1970-05-07 00:05:05.006006+09', 'Australia/Sydney'),\n+\t('2 months', '2019-09-30 02:02:24.003003-09', '-1 month 1 week', '1969-10-09 00:05:05.006006-09', 'Australia/Sydney'),\n+\t('2 year', '2020-03-20 02:02:25.003003+11', '6 months', '2032-06-29 00:05:05.006006+11', 'Asia/Yekaterinburg'),\n+\t('2 year', '2022-07-20 02:02:26.003003-11', '-6 months', '1969-11-14 00:05:05.006006-11', 'Asia/Yekaterinburg'),\n+\t('10 days', '2024-08-12 02:02:26.003003+07', '1 year', '-infinity', 'Asia/Tokyo'),\n+\t('10 days', '2032-12-18 02:02:26.003003-07', '-1 year', 'infinity', 'Asia/Tokyo'),\n+\t('10 days', 'infinity', '0 days', '1970-01-01 00:00:00+00', 'UTC'),\n+;\n+\n+query II\n+select t, time_bucket('56 seconds'::interval, t) from timestamps_tz;\n+----\n+-infinity\t-infinity\n+1907-11-19 12:00:00-08\t1907-11-19 11:59:28-08\n+1969-12-31 16:00:00-08\t1969-12-31 15:59:28-08\n+1979-04-09 21:02:05.003003-08\t1979-04-09 21:01:36-08\n+1981-09-29 19:02:06.003003-07\t1981-09-29 19:01:36-07\n+1982-06-14 15:02:07.003003-07\t1982-06-14 15:01:36-07\n+1985-02-19 22:02:08.003003-08\t1985-02-19 22:01:28-08\n+1989-06-07 19:02:09.003003-07\t1989-06-07 19:01:44-07\n+1990-07-10 17:02:10.003003-07\t1990-07-10 17:02:08-07\n+1991-05-11 21:02:11.003003-07\t1991-05-11 21:01:36-07\n+1992-10-16 19:02:12.003003-07\t1992-10-16 19:02:00-07\n+1994-12-04 13:02:13.003003-08\t1994-12-04 13:01:44-08\n+1997-01-01 23:02:14.003003-08\t1997-01-01 23:01:20-08\n+1999-04-25 19:02:15.003003-07\t1999-04-25 19:01:20-07\n+1999-12-31 16:00:00-08\t1999-12-31 15:59:44-08\n+2000-01-02 16:00:00-08\t2000-01-02 16:00:00-08\n+2000-03-25 17:00:00-08\t2000-03-25 16:59:36-08\n+2000-04-02 03:00:00-07\t2000-04-02 03:00:00-07\n+2000-10-28 18:00:00-07\t2000-10-28 17:59:36-07\n+2000-10-29 01:00:00-08\t2000-10-29 01:59:20-07\n+2008-12-31 15:59:59.999999-08\t2008-12-31 15:59:28-08\n+2010-05-02 19:02:19.003003-07\t2010-05-02 19:02:16-07\n+2013-08-18 17:02:20.003003-07\t2013-08-18 17:01:52-07\n+2014-07-14 21:02:21.003003-07\t2014-07-14 21:01:52-07\n+2016-03-20 19:02:22.003003-07\t2016-03-20 19:02:16-07\n+2018-01-31 09:02:23.003003-08\t2018-01-31 09:02:16-08\n+2019-09-30 04:02:24.003003-07\t2019-09-30 04:01:44-07\n+2020-03-19 08:02:25.003003-07\t2020-03-19 08:02:00-07\n+2022-07-20 06:02:26.003003-07\t2022-07-20 06:02:24-07\n+2024-08-11 12:02:26.003003-07\t2024-08-11 12:02:16-07\n+2032-12-18 01:02:26.003003-08\t2032-12-18 01:02:00-08\n+infinity\tinfinity\n+\n+query II\n+select t, time_bucket('3 days'::interval, t) from timestamps_tz;\n+----\n+-infinity\t-infinity\n+1907-11-19 12:00:00-08\t1907-11-18 16:00:00-08\n+1969-12-31 16:00:00-08\t1969-12-31 16:00:00-08\n+1979-04-09 21:02:05.003003-08\t1979-04-07 16:00:00-08\n+1981-09-29 19:02:06.003003-07\t1981-09-29 17:00:00-07\n+1982-06-14 15:02:07.003003-07\t1982-06-11 17:00:00-07\n+1985-02-19 22:02:08.003003-08\t1985-02-19 16:00:00-08\n+1989-06-07 19:02:09.003003-07\t1989-06-07 17:00:00-07\n+1990-07-10 17:02:10.003003-07\t1990-07-08 17:00:00-07\n+1991-05-11 21:02:11.003003-07\t1991-05-10 17:00:00-07\n+1992-10-16 19:02:12.003003-07\t1992-10-16 17:00:00-07\n+1994-12-04 13:02:13.003003-08\t1994-12-02 16:00:00-08\n+1997-01-01 23:02:14.003003-08\t1996-12-30 16:00:00-08\n+1999-04-25 19:02:15.003003-07\t1999-04-25 17:00:00-07\n+1999-12-31 16:00:00-08\t1999-12-30 16:00:00-08\n+2000-01-02 16:00:00-08\t2000-01-02 16:00:00-08\n+2000-03-25 17:00:00-08\t2000-03-23 16:00:00-08\n+2000-04-02 03:00:00-07\t2000-04-01 16:00:00-08\n+2000-10-28 18:00:00-07\t2000-10-28 17:00:00-07\n+2000-10-29 01:00:00-08\t2000-10-28 17:00:00-07\n+2008-12-31 15:59:59.999999-08\t2008-12-30 16:00:00-08\n+2010-05-02 19:02:19.003003-07\t2010-04-30 17:00:00-07\n+2013-08-18 17:02:20.003003-07\t2013-08-18 17:00:00-07\n+2014-07-14 21:02:21.003003-07\t2014-07-14 17:00:00-07\n+2016-03-20 19:02:22.003003-07\t2016-03-20 17:00:00-07\n+2018-01-31 09:02:23.003003-08\t2018-01-30 16:00:00-08\n+2019-09-30 04:02:24.003003-07\t2019-09-28 17:00:00-07\n+2020-03-19 08:02:25.003003-07\t2020-03-17 17:00:00-07\n+2022-07-20 06:02:26.003003-07\t2022-07-17 17:00:00-07\n+2024-08-11 12:02:26.003003-07\t2024-08-08 17:00:00-07\n+2032-12-18 01:02:26.003003-08\t2032-12-15 16:00:00-08\n+infinity\tinfinity\n+\n+query II\n+select t, time_bucket('3 years'::interval, t) from timestamps_tz;\n+----\n+-infinity\t-infinity\n+1907-11-19 12:00:00-08\t1906-12-31 16:00:00-08\n+1969-12-31 16:00:00-08\t1969-12-31 16:00:00-08\n+1979-04-09 21:02:05.003003-08\t1978-12-31 16:00:00-08\n+1981-09-29 19:02:06.003003-07\t1978-12-31 16:00:00-08\n+1982-06-14 15:02:07.003003-07\t1981-12-31 16:00:00-08\n+1985-02-19 22:02:08.003003-08\t1984-12-31 16:00:00-08\n+1989-06-07 19:02:09.003003-07\t1987-12-31 16:00:00-08\n+1990-07-10 17:02:10.003003-07\t1987-12-31 16:00:00-08\n+1991-05-11 21:02:11.003003-07\t1990-12-31 16:00:00-08\n+1992-10-16 19:02:12.003003-07\t1990-12-31 16:00:00-08\n+1994-12-04 13:02:13.003003-08\t1993-12-31 16:00:00-08\n+1997-01-01 23:02:14.003003-08\t1996-12-31 16:00:00-08\n+1999-04-25 19:02:15.003003-07\t1996-12-31 16:00:00-08\n+1999-12-31 16:00:00-08\t1999-12-31 16:00:00-08\n+2000-01-02 16:00:00-08\t1999-12-31 16:00:00-08\n+2000-03-25 17:00:00-08\t1999-12-31 16:00:00-08\n+2000-04-02 03:00:00-07\t1999-12-31 16:00:00-08\n+2000-10-28 18:00:00-07\t1999-12-31 16:00:00-08\n+2000-10-29 01:00:00-08\t1999-12-31 16:00:00-08\n+2008-12-31 15:59:59.999999-08\t2005-12-31 16:00:00-08\n+2010-05-02 19:02:19.003003-07\t2008-12-31 16:00:00-08\n+2013-08-18 17:02:20.003003-07\t2011-12-31 16:00:00-08\n+2014-07-14 21:02:21.003003-07\t2011-12-31 16:00:00-08\n+2016-03-20 19:02:22.003003-07\t2014-12-31 16:00:00-08\n+2018-01-31 09:02:23.003003-08\t2017-12-31 16:00:00-08\n+2019-09-30 04:02:24.003003-07\t2017-12-31 16:00:00-08\n+2020-03-19 08:02:25.003003-07\t2017-12-31 16:00:00-08\n+2022-07-20 06:02:26.003003-07\t2020-12-31 16:00:00-08\n+2024-08-11 12:02:26.003003-07\t2023-12-31 16:00:00-08\n+2032-12-18 01:02:26.003003-08\t2029-12-31 16:00:00-08\n+infinity\tinfinity\n+\n+query II\n+select t, time_bucket(null::interval, t) from timestamps_tz;\n+----\n+-infinity\tNULL\n+1907-11-19 12:00:00-08\tNULL\n+1969-12-31 16:00:00-08\tNULL\n+1979-04-09 21:02:05.003003-08\tNULL\n+1981-09-29 19:02:06.003003-07\tNULL\n+1982-06-14 15:02:07.003003-07\tNULL\n+1985-02-19 22:02:08.003003-08\tNULL\n+1989-06-07 19:02:09.003003-07\tNULL\n+1990-07-10 17:02:10.003003-07\tNULL\n+1991-05-11 21:02:11.003003-07\tNULL\n+1992-10-16 19:02:12.003003-07\tNULL\n+1994-12-04 13:02:13.003003-08\tNULL\n+1997-01-01 23:02:14.003003-08\tNULL\n+1999-04-25 19:02:15.003003-07\tNULL\n+1999-12-31 16:00:00-08\tNULL\n+2000-01-02 16:00:00-08\tNULL\n+2000-03-25 17:00:00-08\tNULL\n+2000-04-02 03:00:00-07\tNULL\n+2000-10-28 18:00:00-07\tNULL\n+2000-10-29 01:00:00-08\tNULL\n+2008-12-31 15:59:59.999999-08\tNULL\n+2010-05-02 19:02:19.003003-07\tNULL\n+2013-08-18 17:02:20.003003-07\tNULL\n+2014-07-14 21:02:21.003003-07\tNULL\n+2016-03-20 19:02:22.003003-07\tNULL\n+2018-01-31 09:02:23.003003-08\tNULL\n+2019-09-30 04:02:24.003003-07\tNULL\n+2020-03-19 08:02:25.003003-07\tNULL\n+2022-07-20 06:02:26.003003-07\tNULL\n+2024-08-11 12:02:26.003003-07\tNULL\n+2032-12-18 01:02:26.003003-08\tNULL\n+infinity\tNULL\n+\n+query I\n+select time_bucket('3 years'::interval, null::timestamptz) from timestamps_tz;\n+----\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+\n+query III\n+select w, t, time_bucket(w, t) from timestamps_tz;\n+----\n+10 days\t-infinity\t-infinity\n+00:00:00.000333\t1907-11-19 12:00:00-08\t1907-11-19 11:59:59.999892-08\n+00:00:00.000333\t1969-12-31 16:00:00-08\t1969-12-31 15:59:59.999739-08\n+00:00:00.000333\t1979-04-09 21:02:05.003003-08\t1979-04-09 21:02:05.002683-08\n+00:00:00.333\t1981-09-29 19:02:06.003003-07\t1981-09-29 19:02:05.712-07\n+00:00:00.333\t1982-06-14 15:02:07.003003-07\t1982-06-14 15:02:06.945-07\n+00:00:00.333\t1985-02-19 22:02:08.003003-08\t1985-02-19 22:02:07.872-08\n+00:05:33\t1989-06-07 19:02:09.003003-07\t1989-06-07 19:01:57-07\n+00:05:33\t1990-07-10 17:02:10.003003-07\t1990-07-10 17:00:36-07\n+00:05:33\t1991-05-11 21:02:11.003003-07\t1991-05-11 20:58:30-07\n+05:33:00\t1992-10-16 19:02:12.003003-07\t1992-10-16 18:30:00-07\n+05:33:00\t1994-12-04 13:02:13.003003-08\t1994-12-04 08:21:00-08\n+05:33:00\t1997-01-01 23:02:14.003003-08\t1997-01-01 18:33:00-08\n+333:00:00\t1999-04-25 19:02:15.003003-07\t1999-04-14 02:00:00-07\n+333:00:00\t1999-12-31 16:00:00-08\t1999-12-19 19:00:00-08\n+333:00:00\t2000-01-02 16:00:00-08\t2000-01-02 16:00:00-08\n+333:00:00\t2000-03-25 17:00:00-08\t2000-03-12 01:00:00-08\n+333:00:00\t2000-04-02 03:00:00-07\t2000-03-25 22:00:00-08\n+333:00:00\t2000-10-28 18:00:00-07\t2000-10-20 02:00:00-07\n+333:00:00\t2000-10-29 01:00:00-08\t2000-10-20 02:00:00-07\n+10 days\t2008-12-31 15:59:59.999999-08\t2008-12-25 16:00:00-08\n+7 days\t2010-05-02 19:02:19.003003-07\t2010-05-02 17:00:00-07\n+10 days\t2013-08-18 17:02:20.003003-07\t2013-08-11 17:00:00-07\n+10 days\t2014-07-14 21:02:21.003003-07\t2014-07-07 17:00:00-07\n+2 months\t2016-03-20 19:02:22.003003-07\t2016-02-29 16:00:00-08\n+2 months\t2018-01-31 09:02:23.003003-08\t2017-12-31 16:00:00-08\n+2 months\t2019-09-30 04:02:24.003003-07\t2019-08-31 17:00:00-07\n+2 years\t2020-03-19 08:02:25.003003-07\t2019-12-31 16:00:00-08\n+2 years\t2022-07-20 06:02:26.003003-07\t2021-12-31 16:00:00-08\n+10 days\t2024-08-11 12:02:26.003003-07\t2024-08-03 17:00:00-07\n+10 days\t2032-12-18 01:02:26.003003-08\t2032-12-09 16:00:00-08\n+10 days\tinfinity\tinfinity\n+\n+query II\n+select t, time_bucket('4 seconds'::interval, t, '2 seconds'::interval) from timestamps_tz;\n+----\n+-infinity\t-infinity\n+1907-11-19 12:00:00-08\t1907-11-19 11:59:58-08\n+1969-12-31 16:00:00-08\t1969-12-31 15:59:58-08\n+1979-04-09 21:02:05.003003-08\t1979-04-09 21:02:02-08\n+1981-09-29 19:02:06.003003-07\t1981-09-29 19:02:06-07\n+1982-06-14 15:02:07.003003-07\t1982-06-14 15:02:06-07\n+1985-02-19 22:02:08.003003-08\t1985-02-19 22:02:06-08\n+1989-06-07 19:02:09.003003-07\t1989-06-07 19:02:06-07\n+1990-07-10 17:02:10.003003-07\t1990-07-10 17:02:10-07\n+1991-05-11 21:02:11.003003-07\t1991-05-11 21:02:10-07\n+1992-10-16 19:02:12.003003-07\t1992-10-16 19:02:10-07\n+1994-12-04 13:02:13.003003-08\t1994-12-04 13:02:10-08\n+1997-01-01 23:02:14.003003-08\t1997-01-01 23:02:14-08\n+1999-04-25 19:02:15.003003-07\t1999-04-25 19:02:14-07\n+1999-12-31 16:00:00-08\t1999-12-31 15:59:58-08\n+2000-01-02 16:00:00-08\t2000-01-02 15:59:58-08\n+2000-03-25 17:00:00-08\t2000-03-25 16:59:58-08\n+2000-04-02 03:00:00-07\t2000-04-02 01:59:58-08\n+2000-10-28 18:00:00-07\t2000-10-28 17:59:58-07\n+2000-10-29 01:00:00-08\t2000-10-29 01:59:58-07\n+2008-12-31 15:59:59.999999-08\t2008-12-31 15:59:58-08\n+2010-05-02 19:02:19.003003-07\t2010-05-02 19:02:18-07\n+2013-08-18 17:02:20.003003-07\t2013-08-18 17:02:18-07\n+2014-07-14 21:02:21.003003-07\t2014-07-14 21:02:18-07\n+2016-03-20 19:02:22.003003-07\t2016-03-20 19:02:22-07\n+2018-01-31 09:02:23.003003-08\t2018-01-31 09:02:22-08\n+2019-09-30 04:02:24.003003-07\t2019-09-30 04:02:22-07\n+2020-03-19 08:02:25.003003-07\t2020-03-19 08:02:22-07\n+2022-07-20 06:02:26.003003-07\t2022-07-20 06:02:26-07\n+2024-08-11 12:02:26.003003-07\t2024-08-11 12:02:26-07\n+2032-12-18 01:02:26.003003-08\t2032-12-18 01:02:26-08\n+infinity\tinfinity\n+\n+query II\n+select t, time_bucket('4 days'::interval, t, '6 hours'::interval) from timestamps_tz;\n+----\n+-infinity\t-infinity\n+1907-11-19 12:00:00-08\t1907-11-18 22:00:00-08\n+1969-12-31 16:00:00-08\t1969-12-30 22:00:00-08\n+1979-04-09 21:02:05.003003-08\t1979-04-06 22:00:00-08\n+1981-09-29 19:02:06.003003-07\t1981-09-26 23:00:00-07\n+1982-06-14 15:02:07.003003-07\t1982-06-13 23:00:00-07\n+1985-02-19 22:02:08.003003-08\t1985-02-17 22:00:00-08\n+1989-06-07 19:02:09.003003-07\t1989-06-04 23:00:00-07\n+1990-07-10 17:02:10.003003-07\t1990-07-09 23:00:00-07\n+1991-05-11 21:02:11.003003-07\t1991-05-09 23:00:00-07\n+1992-10-16 19:02:12.003003-07\t1992-10-14 23:00:00-07\n+1994-12-04 13:02:13.003003-08\t1994-12-03 22:00:00-08\n+1997-01-01 23:02:14.003003-08\t1997-01-01 22:00:00-08\n+1999-04-25 19:02:15.003003-07\t1999-04-21 23:00:00-07\n+1999-12-31 16:00:00-08\t1999-12-29 22:00:00-08\n+2000-01-02 16:00:00-08\t1999-12-29 22:00:00-08\n+2000-03-25 17:00:00-08\t2000-03-22 22:00:00-08\n+2000-04-02 03:00:00-07\t2000-03-30 22:00:00-08\n+2000-10-28 18:00:00-07\t2000-10-24 23:00:00-07\n+2000-10-29 01:00:00-08\t2000-10-28 23:00:00-07\n+2008-12-31 15:59:59.999999-08\t2008-12-29 22:00:00-08\n+2010-05-02 19:02:19.003003-07\t2010-05-01 23:00:00-07\n+2013-08-18 17:02:20.003003-07\t2013-08-17 23:00:00-07\n+2014-07-14 21:02:21.003003-07\t2014-07-11 23:00:00-07\n+2016-03-20 19:02:22.003003-07\t2016-03-18 23:00:00-07\n+2018-01-31 09:02:23.003003-08\t2018-01-27 22:00:00-08\n+2019-09-30 04:02:24.003003-07\t2019-09-27 23:00:00-07\n+2020-03-19 08:02:25.003003-07\t2020-03-17 23:00:00-07\n+2022-07-20 06:02:26.003003-07\t2022-07-17 23:00:00-07\n+2024-08-11 12:02:26.003003-07\t2024-08-07 23:00:00-07\n+2032-12-18 01:02:26.003003-08\t2032-12-15 22:00:00-08\n+infinity\tinfinity\n+\n+query II\n+select t, time_bucket('3 months'::interval, t, '6 days 11 hours'::interval) from timestamps_tz;\n+----\n+-infinity\t-infinity\n+1907-11-19 12:00:00-08\t1907-10-07 03:00:00-08\n+1969-12-31 16:00:00-08\t1969-10-07 04:00:00-07\n+1979-04-09 21:02:05.003003-08\t1979-04-07 03:00:00-08\n+1981-09-29 19:02:06.003003-07\t1981-07-07 04:00:00-07\n+1982-06-14 15:02:07.003003-07\t1982-04-07 03:00:00-08\n+1985-02-19 22:02:08.003003-08\t1985-01-07 03:00:00-08\n+1989-06-07 19:02:09.003003-07\t1989-04-07 04:00:00-07\n+1990-07-10 17:02:10.003003-07\t1990-07-07 04:00:00-07\n+1991-05-11 21:02:11.003003-07\t1991-04-07 04:00:00-07\n+1992-10-16 19:02:12.003003-07\t1992-10-07 04:00:00-07\n+1994-12-04 13:02:13.003003-08\t1994-10-07 04:00:00-07\n+1997-01-01 23:02:14.003003-08\t1996-10-07 04:00:00-07\n+1999-04-25 19:02:15.003003-07\t1999-04-07 04:00:00-07\n+1999-12-31 16:00:00-08\t1999-10-07 04:00:00-07\n+2000-01-02 16:00:00-08\t1999-10-07 04:00:00-07\n+2000-03-25 17:00:00-08\t2000-01-07 03:00:00-08\n+2000-04-02 03:00:00-07\t2000-01-07 03:00:00-08\n+2000-10-28 18:00:00-07\t2000-10-07 04:00:00-07\n+2000-10-29 01:00:00-08\t2000-10-07 04:00:00-07\n+2008-12-31 15:59:59.999999-08\t2008-10-07 04:00:00-07\n+2010-05-02 19:02:19.003003-07\t2010-04-07 04:00:00-07\n+2013-08-18 17:02:20.003003-07\t2013-07-07 04:00:00-07\n+2014-07-14 21:02:21.003003-07\t2014-07-07 04:00:00-07\n+2016-03-20 19:02:22.003003-07\t2016-01-07 03:00:00-08\n+2018-01-31 09:02:23.003003-08\t2018-01-07 03:00:00-08\n+2019-09-30 04:02:24.003003-07\t2019-07-07 04:00:00-07\n+2020-03-19 08:02:25.003003-07\t2020-01-07 03:00:00-08\n+2022-07-20 06:02:26.003003-07\t2022-07-07 04:00:00-07\n+2024-08-11 12:02:26.003003-07\t2024-07-07 04:00:00-07\n+2032-12-18 01:02:26.003003-08\t2032-10-07 04:00:00-07\n+infinity\tinfinity\n+\n+query II\n+select t, time_bucket(null::interval, t, '2 seconds'::interval) from timestamps_tz;\n+----\n+-infinity\tNULL\n+1907-11-19 12:00:00-08\tNULL\n+1969-12-31 16:00:00-08\tNULL\n+1979-04-09 21:02:05.003003-08\tNULL\n+1981-09-29 19:02:06.003003-07\tNULL\n+1982-06-14 15:02:07.003003-07\tNULL\n+1985-02-19 22:02:08.003003-08\tNULL\n+1989-06-07 19:02:09.003003-07\tNULL\n+1990-07-10 17:02:10.003003-07\tNULL\n+1991-05-11 21:02:11.003003-07\tNULL\n+1992-10-16 19:02:12.003003-07\tNULL\n+1994-12-04 13:02:13.003003-08\tNULL\n+1997-01-01 23:02:14.003003-08\tNULL\n+1999-04-25 19:02:15.003003-07\tNULL\n+1999-12-31 16:00:00-08\tNULL\n+2000-01-02 16:00:00-08\tNULL\n+2000-03-25 17:00:00-08\tNULL\n+2000-04-02 03:00:00-07\tNULL\n+2000-10-28 18:00:00-07\tNULL\n+2000-10-29 01:00:00-08\tNULL\n+2008-12-31 15:59:59.999999-08\tNULL\n+2010-05-02 19:02:19.003003-07\tNULL\n+2013-08-18 17:02:20.003003-07\tNULL\n+2014-07-14 21:02:21.003003-07\tNULL\n+2016-03-20 19:02:22.003003-07\tNULL\n+2018-01-31 09:02:23.003003-08\tNULL\n+2019-09-30 04:02:24.003003-07\tNULL\n+2020-03-19 08:02:25.003003-07\tNULL\n+2022-07-20 06:02:26.003003-07\tNULL\n+2024-08-11 12:02:26.003003-07\tNULL\n+2032-12-18 01:02:26.003003-08\tNULL\n+infinity\tNULL\n+\n+query I\n+select time_bucket('3 months'::interval, null::timestamptz, '2 seconds'::interval) from timestamps_tz;\n+----\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+\n+query II\n+select t, time_bucket('3 months'::interval, t, null::interval) from timestamps_tz;\n+----\n+-infinity\tNULL\n+1907-11-19 12:00:00-08\tNULL\n+1969-12-31 16:00:00-08\tNULL\n+1979-04-09 21:02:05.003003-08\tNULL\n+1981-09-29 19:02:06.003003-07\tNULL\n+1982-06-14 15:02:07.003003-07\tNULL\n+1985-02-19 22:02:08.003003-08\tNULL\n+1989-06-07 19:02:09.003003-07\tNULL\n+1990-07-10 17:02:10.003003-07\tNULL\n+1991-05-11 21:02:11.003003-07\tNULL\n+1992-10-16 19:02:12.003003-07\tNULL\n+1994-12-04 13:02:13.003003-08\tNULL\n+1997-01-01 23:02:14.003003-08\tNULL\n+1999-04-25 19:02:15.003003-07\tNULL\n+1999-12-31 16:00:00-08\tNULL\n+2000-01-02 16:00:00-08\tNULL\n+2000-03-25 17:00:00-08\tNULL\n+2000-04-02 03:00:00-07\tNULL\n+2000-10-28 18:00:00-07\tNULL\n+2000-10-29 01:00:00-08\tNULL\n+2008-12-31 15:59:59.999999-08\tNULL\n+2010-05-02 19:02:19.003003-07\tNULL\n+2013-08-18 17:02:20.003003-07\tNULL\n+2014-07-14 21:02:21.003003-07\tNULL\n+2016-03-20 19:02:22.003003-07\tNULL\n+2018-01-31 09:02:23.003003-08\tNULL\n+2019-09-30 04:02:24.003003-07\tNULL\n+2020-03-19 08:02:25.003003-07\tNULL\n+2022-07-20 06:02:26.003003-07\tNULL\n+2024-08-11 12:02:26.003003-07\tNULL\n+2032-12-18 01:02:26.003003-08\tNULL\n+infinity\tNULL\n+\n+query IIII\n+select w, t, shift, time_bucket(w, t, shift) from timestamps_tz;\n+----\n+10 days\t-infinity\t00:00:00\t-infinity\n+00:00:00.000333\t1907-11-19 12:00:00-08\t00:00:00\t1907-11-19 11:59:59.999892-08\n+00:00:00.000333\t1969-12-31 16:00:00-08\t00:00:00.000444\t1969-12-31 15:59:59.99985-08\n+00:00:00.000333\t1979-04-09 21:02:05.003003-08\t-00:00:00.000444\t1979-04-09 21:02:05.002905-08\n+00:00:00.333\t1981-09-29 19:02:06.003003-07\t00:00:00\t1981-09-29 19:02:05.712-07\n+00:00:00.333\t1982-06-14 15:02:07.003003-07\t00:00:00.444\t1982-06-14 15:02:06.723-07\n+00:00:00.333\t1985-02-19 22:02:08.003003-08\t-00:00:00.444\t1985-02-19 22:02:07.761-08\n+00:05:33\t1989-06-07 19:02:09.003003-07\t00:00:00\t1989-06-07 19:01:57-07\n+00:05:33\t1990-07-10 17:02:10.003003-07\t00:07:24\t1990-07-10 16:56:54-07\n+00:05:33\t1991-05-11 21:02:11.003003-07\t-00:07:24\t1991-05-11 20:56:39-07\n+05:33:00\t1992-10-16 19:02:12.003003-07\t00:00:00\t1992-10-16 18:30:00-07\n+05:33:00\t1994-12-04 13:02:13.003003-08\t07:24:00\t1994-12-04 10:12:00-08\n+05:33:00\t1997-01-01 23:02:14.003003-08\t-07:24:00\t1997-01-01 22:15:00-08\n+333:00:00\t1999-04-25 19:02:15.003003-07\t00:00:00\t1999-04-14 02:00:00-07\n+333:00:00\t1999-12-31 16:00:00-08\t444:00:00\t1999-12-24 10:00:00-08\n+333:00:00\t2000-01-02 16:00:00-08\t-444:00:00\t1999-12-29 01:00:00-08\n+333:00:00\t2000-03-25 17:00:00-08\t00:00:00\t2000-03-12 01:00:00-08\n+333:00:00\t2000-04-02 03:00:00-07\t00:00:00\t2000-03-25 22:00:00-08\n+333:00:00\t2000-10-28 18:00:00-07\t00:00:00\t2000-10-20 02:00:00-07\n+333:00:00\t2000-10-29 01:00:00-08\t00:00:00\t2000-10-20 02:00:00-07\n+10 days\t2008-12-31 15:59:59.999999-08\t00:00:00\t2008-12-25 16:00:00-08\n+7 days\t2010-05-02 19:02:19.003003-07\t00:00:00\t2010-05-02 17:00:00-07\n+10 days\t2013-08-18 17:02:20.003003-07\t2 days 04:00:00\t2013-08-13 21:00:00-07\n+10 days\t2014-07-14 21:02:21.003003-07\t-2 days 04:00:00\t2014-07-05 21:00:00-07\n+2 months\t2016-03-20 19:02:22.003003-07\t00:00:00\t2016-02-29 16:00:00-08\n+2 months\t2018-01-31 09:02:23.003003-08\t1 month 7 days\t2017-12-07 16:00:00-08\n+2 months\t2019-09-30 04:02:24.003003-07\t-1 months 7 days\t2019-08-07 17:00:00-07\n+2 years\t2020-03-19 08:02:25.003003-07\t6 months\t2018-06-30 17:00:00-07\n+2 years\t2022-07-20 06:02:26.003003-07\t-6 months\t2021-06-30 17:00:00-07\n+10 days\t2024-08-11 12:02:26.003003-07\t1 year\t2024-08-09 17:00:00-07\n+10 days\t2032-12-18 01:02:26.003003-08\t-1 years\t2032-12-14 16:00:00-08\n+10 days\tinfinity\t00:00:00\tinfinity\n+\n+query II\n+select t, time_bucket('11 seconds'::interval, t, '1990-12-10 08:08:10+03'::timestamptz) from timestamps_tz;\n+----\n+-infinity\t-infinity\n+1907-11-19 12:00:00-08\t1907-11-19 11:59:59-08\n+1969-12-31 16:00:00-08\t1969-12-31 15:59:55-08\n+1979-04-09 21:02:05.003003-08\t1979-04-09 21:02:04-08\n+1981-09-29 19:02:06.003003-07\t1981-09-29 19:02:01-07\n+1982-06-14 15:02:07.003003-07\t1982-06-14 15:02:05-07\n+1985-02-19 22:02:08.003003-08\t1985-02-19 22:02:02-08\n+1989-06-07 19:02:09.003003-07\t1989-06-07 19:02:05-07\n+1990-07-10 17:02:10.003003-07\t1990-07-10 17:02:10-07\n+1991-05-11 21:02:11.003003-07\t1991-05-11 21:02:05-07\n+1992-10-16 19:02:12.003003-07\t1992-10-16 19:02:02-07\n+1994-12-04 13:02:13.003003-08\t1994-12-04 13:02:07-08\n+1997-01-01 23:02:14.003003-08\t1997-01-01 23:02:10-08\n+1999-04-25 19:02:15.003003-07\t1999-04-25 19:02:10-07\n+1999-12-31 16:00:00-08\t1999-12-31 16:00:00-08\n+2000-01-02 16:00:00-08\t2000-01-02 15:59:59-08\n+2000-03-25 17:00:00-08\t2000-03-25 16:59:53-08\n+2000-04-02 03:00:00-07\t2000-04-02 01:59:50-08\n+2000-10-28 18:00:00-07\t2000-10-28 18:00:00-07\n+2000-10-29 01:00:00-08\t2000-10-29 01:59:58-07\n+2008-12-31 15:59:59.999999-08\t2008-12-31 15:59:55-08\n+2010-05-02 19:02:19.003003-07\t2010-05-02 19:02:16-07\n+2013-08-18 17:02:20.003003-07\t2013-08-18 17:02:14-07\n+2014-07-14 21:02:21.003003-07\t2014-07-14 21:02:13-07\n+2016-03-20 19:02:22.003003-07\t2016-03-20 19:02:14-07\n+2018-01-31 09:02:23.003003-08\t2018-01-31 09:02:19-08\n+2019-09-30 04:02:24.003003-07\t2019-09-30 04:02:14-07\n+2020-03-19 08:02:25.003003-07\t2020-03-19 08:02:21-07\n+2022-07-20 06:02:26.003003-07\t2022-07-20 06:02:24-07\n+2024-08-11 12:02:26.003003-07\t2024-08-11 12:02:20-07\n+2032-12-18 01:02:26.003003-08\t2032-12-18 01:02:26-08\n+infinity\tinfinity\n+\n+query II\n+select t, time_bucket('11 days'::interval, t, '1990-01-06 08:08:10+09'::timestamptz) from timestamps_tz;\n+----\n+-infinity\t-infinity\n+1907-11-19 12:00:00-08\t1907-11-09 15:08:10-08\n+1969-12-31 16:00:00-08\t1969-12-26 15:08:10-08\n+1979-04-09 21:02:05.003003-08\t1979-04-06 15:08:10-08\n+1981-09-29 19:02:06.003003-07\t1981-09-24 16:08:10-07\n+1982-06-14 15:02:07.003003-07\t1982-06-04 16:08:10-07\n+1985-02-19 22:02:08.003003-08\t1985-02-18 15:08:10-08\n+1989-06-07 19:02:09.003003-07\t1989-05-30 16:08:10-07\n+1990-07-10 17:02:10.003003-07\t1990-06-30 16:08:10-07\n+1991-05-11 21:02:11.003003-07\t1991-05-04 16:08:10-07\n+1992-10-16 19:02:12.003003-07\t1992-10-13 16:08:10-07\n+1994-12-04 13:02:13.003003-08\t1994-12-03 15:08:10-08\n+1997-01-01 23:02:14.003003-08\t1996-12-31 15:08:10-08\n+1999-04-25 19:02:15.003003-07\t1999-04-16 16:08:10-07\n+1999-12-31 16:00:00-08\t1999-12-25 15:08:10-08\n+2000-01-02 16:00:00-08\t1999-12-25 15:08:10-08\n+2000-03-25 17:00:00-08\t2000-03-22 15:08:10-08\n+2000-04-02 03:00:00-07\t2000-03-22 15:08:10-08\n+2000-10-28 18:00:00-07\t2000-10-28 16:08:10-07\n+2000-10-29 01:00:00-08\t2000-10-28 16:08:10-07\n+2008-12-31 15:59:59.999999-08\t2008-12-26 15:08:10-08\n+2010-05-02 19:02:19.003003-07\t2010-04-24 16:08:10-07\n+2013-08-18 17:02:20.003003-07\t2013-08-16 16:08:10-07\n+2014-07-14 21:02:21.003003-07\t2014-07-12 16:08:10-07\n+2016-03-20 19:02:22.003003-07\t2016-03-19 16:08:10-07\n+2018-01-31 09:02:23.003003-08\t2018-01-30 15:08:10-08\n+2019-09-30 04:02:24.003003-07\t2019-09-27 16:08:10-07\n+2020-03-19 08:02:25.003003-07\t2020-03-10 16:08:10-07\n+2022-07-20 06:02:26.003003-07\t2022-07-16 16:08:10-07\n+2024-08-11 12:02:26.003003-07\t2024-08-02 16:08:10-07\n+2032-12-18 01:02:26.003003-08\t2032-12-16 15:08:10-08\n+infinity\tinfinity\n+\n+query II\n+select t, time_bucket('7 months'::interval, t, '1990-01-06 08:08:10+01'::timestamptz) from timestamps_tz;\n+----\n+-infinity\t-infinity\n+1907-11-19 12:00:00-08\t1907-09-30 16:00:00-08\n+1969-12-31 16:00:00-08\t1969-07-31 17:00:00-07\n+1979-04-09 21:02:05.003003-08\t1978-11-30 16:00:00-08\n+1981-09-29 19:02:06.003003-07\t1981-03-31 16:00:00-08\n+1982-06-14 15:02:07.003003-07\t1982-05-31 17:00:00-07\n+1985-02-19 22:02:08.003003-08\t1984-09-30 17:00:00-07\n+1989-06-07 19:02:09.003003-07\t1989-05-31 17:00:00-07\n+1990-07-10 17:02:10.003003-07\t1989-12-31 16:00:00-08\n+1991-05-11 21:02:11.003003-07\t1991-02-28 16:00:00-08\n+1992-10-16 19:02:12.003003-07\t1992-04-30 17:00:00-07\n+1994-12-04 13:02:13.003003-08\t1994-08-31 17:00:00-07\n+1997-01-01 23:02:14.003003-08\t1996-12-31 16:00:00-08\n+1999-04-25 19:02:15.003003-07\t1998-09-30 17:00:00-07\n+1999-12-31 16:00:00-08\t1999-11-30 16:00:00-08\n+2000-01-02 16:00:00-08\t1999-11-30 16:00:00-08\n+2000-03-25 17:00:00-08\t1999-11-30 16:00:00-08\n+2000-04-02 03:00:00-07\t1999-11-30 16:00:00-08\n+2000-10-28 18:00:00-07\t2000-06-30 17:00:00-07\n+2000-10-29 01:00:00-08\t2000-06-30 17:00:00-07\n+2008-12-31 15:59:59.999999-08\t2008-08-31 17:00:00-07\n+2010-05-02 19:02:19.003003-07\t2009-10-31 17:00:00-07\n+2013-08-18 17:02:20.003003-07\t2013-04-30 17:00:00-07\n+2014-07-14 21:02:21.003003-07\t2014-06-30 17:00:00-07\n+2016-03-20 19:02:22.003003-07\t2015-08-31 17:00:00-07\n+2018-01-31 09:02:23.003003-08\t2017-12-31 16:00:00-08\n+2019-09-30 04:02:24.003003-07\t2019-02-28 16:00:00-08\n+2020-03-19 08:02:25.003003-07\t2019-09-30 17:00:00-07\n+2022-07-20 06:02:26.003003-07\t2022-01-31 16:00:00-08\n+2024-08-11 12:02:26.003003-07\t2024-05-31 17:00:00-07\n+2032-12-18 01:02:26.003003-08\t2032-07-31 17:00:00-07\n+infinity\tinfinity\n+\n+query II\n+select t, time_bucket(null::interval, t, '1990-01-06 08:08:10'::timestamptz) from timestamps_tz;\n+----\n+-infinity\tNULL\n+1907-11-19 12:00:00-08\tNULL\n+1969-12-31 16:00:00-08\tNULL\n+1979-04-09 21:02:05.003003-08\tNULL\n+1981-09-29 19:02:06.003003-07\tNULL\n+1982-06-14 15:02:07.003003-07\tNULL\n+1985-02-19 22:02:08.003003-08\tNULL\n+1989-06-07 19:02:09.003003-07\tNULL\n+1990-07-10 17:02:10.003003-07\tNULL\n+1991-05-11 21:02:11.003003-07\tNULL\n+1992-10-16 19:02:12.003003-07\tNULL\n+1994-12-04 13:02:13.003003-08\tNULL\n+1997-01-01 23:02:14.003003-08\tNULL\n+1999-04-25 19:02:15.003003-07\tNULL\n+1999-12-31 16:00:00-08\tNULL\n+2000-01-02 16:00:00-08\tNULL\n+2000-03-25 17:00:00-08\tNULL\n+2000-04-02 03:00:00-07\tNULL\n+2000-10-28 18:00:00-07\tNULL\n+2000-10-29 01:00:00-08\tNULL\n+2008-12-31 15:59:59.999999-08\tNULL\n+2010-05-02 19:02:19.003003-07\tNULL\n+2013-08-18 17:02:20.003003-07\tNULL\n+2014-07-14 21:02:21.003003-07\tNULL\n+2016-03-20 19:02:22.003003-07\tNULL\n+2018-01-31 09:02:23.003003-08\tNULL\n+2019-09-30 04:02:24.003003-07\tNULL\n+2020-03-19 08:02:25.003003-07\tNULL\n+2022-07-20 06:02:26.003003-07\tNULL\n+2024-08-11 12:02:26.003003-07\tNULL\n+2032-12-18 01:02:26.003003-08\tNULL\n+infinity\tNULL\n+\n+query I\n+select time_bucket('7 months'::interval, null::timestamptz, '1990-01-06 08:08:10'::timestamptz) from timestamps_tz;\n+----\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+\n+query II\n+select t, time_bucket('7 months'::interval, t, null::timestamptz) from timestamps_tz;\n+----\n+-infinity\tNULL\n+1907-11-19 12:00:00-08\tNULL\n+1969-12-31 16:00:00-08\tNULL\n+1979-04-09 21:02:05.003003-08\tNULL\n+1981-09-29 19:02:06.003003-07\tNULL\n+1982-06-14 15:02:07.003003-07\tNULL\n+1985-02-19 22:02:08.003003-08\tNULL\n+1989-06-07 19:02:09.003003-07\tNULL\n+1990-07-10 17:02:10.003003-07\tNULL\n+1991-05-11 21:02:11.003003-07\tNULL\n+1992-10-16 19:02:12.003003-07\tNULL\n+1994-12-04 13:02:13.003003-08\tNULL\n+1997-01-01 23:02:14.003003-08\tNULL\n+1999-04-25 19:02:15.003003-07\tNULL\n+1999-12-31 16:00:00-08\tNULL\n+2000-01-02 16:00:00-08\tNULL\n+2000-03-25 17:00:00-08\tNULL\n+2000-04-02 03:00:00-07\tNULL\n+2000-10-28 18:00:00-07\tNULL\n+2000-10-29 01:00:00-08\tNULL\n+2008-12-31 15:59:59.999999-08\tNULL\n+2010-05-02 19:02:19.003003-07\tNULL\n+2013-08-18 17:02:20.003003-07\tNULL\n+2014-07-14 21:02:21.003003-07\tNULL\n+2016-03-20 19:02:22.003003-07\tNULL\n+2018-01-31 09:02:23.003003-08\tNULL\n+2019-09-30 04:02:24.003003-07\tNULL\n+2020-03-19 08:02:25.003003-07\tNULL\n+2022-07-20 06:02:26.003003-07\tNULL\n+2024-08-11 12:02:26.003003-07\tNULL\n+2032-12-18 01:02:26.003003-08\tNULL\n+infinity\tNULL\n+\n+query IIII\n+select w, t, origin, time_bucket(w, t, origin) from timestamps_tz;\n+----\n+10 days\t-infinity\t1970-01-04 16:00:00-08\t-infinity\n+00:00:00.000333\t1907-11-19 12:00:00-08\t1970-03-05 16:00:00-08\t1907-11-19 11:59:59.999955-08\n+00:00:00.000333\t1969-12-31 16:00:00-08\t1970-01-04 13:05:05.006006-08\t1969-12-31 15:59:59.999786-08\n+00:00:00.000333\t1979-04-09 21:02:05.003003-08\t1962-12-09 19:05:05.006006-08\t1979-04-09 21:02:05.002757-08\n+00:00:00.333\t1981-09-29 19:02:06.003003-07\t1970-02-04 16:00:00-08\t1981-09-29 19:02:06-07\n+00:00:00.333\t1982-06-14 15:02:07.003003-07\t1970-11-14 12:05:05.006006-08\t1982-06-14 15:02:06.806006-07\n+00:00:00.333\t1985-02-19 22:02:08.003003-08\t1980-08-04 21:05:05.006006-07\t1985-02-19 22:02:07.742006-08\n+00:05:33\t1989-06-07 19:02:09.003003-07\t1970-11-24 16:00:00-08\t1989-06-07 18:59:06-07\n+00:05:33\t1990-07-10 17:02:10.003003-07\t1970-04-09 14:05:05.006006-08\t1990-07-10 16:58:11.006006-07\n+00:05:33\t1991-05-11 21:02:11.003003-07\t1971-01-04 18:05:05.006006-08\t1991-05-11 20:57:44.006006-07\n+05:33:00\t1992-10-16 19:02:12.003003-07\t1950-04-23 16:00:00-08\t1992-10-16 14:00:00-07\n+05:33:00\t1994-12-04 13:02:13.003003-08\t1970-06-08 12:05:05.006006-07\t1994-12-04 10:38:05.006006-08\n+05:33:00\t1997-01-01 23:02:14.003003-08\t1970-07-05 22:05:05.006006-07\t1997-01-01 18:23:05.006006-08\n+333:00:00\t1999-04-25 19:02:15.003003-07\t1970-02-04 16:00:00-08\t1999-04-23 14:00:00-07\n+333:00:00\t1999-12-31 16:00:00-08\t1970-01-04 15:05:05.006006-08\t1999-12-26 00:05:05.006006-08\n+333:00:00\t2000-01-02 16:00:00-08\t1970-03-14 17:05:05.006006-08\t1999-12-25 17:05:05.006006-08\n+333:00:00\t2000-03-25 17:00:00-08\t1980-10-04 17:00:00-07\t2000-03-17 16:00:00-08\n+333:00:00\t2000-04-02 03:00:00-07\t1990-05-19 17:00:00-07\t2000-03-21 07:00:00-08\n+333:00:00\t2000-10-28 18:00:00-07\t2010-07-26 17:00:00-07\t2000-10-20 20:00:00-07\n+333:00:00\t2000-10-29 01:00:00-08\t2010-07-26 17:00:00-07\t2000-10-20 20:00:00-07\n+10 days\t2008-12-31 15:59:59.999999-08\t1970-02-26 16:00:00-08\t2008-12-23 16:00:00-08\n+7 days\t2010-05-02 19:02:19.003003-07\t1970-07-24 17:00:00-07\t2010-04-30 17:00:00-07\n+10 days\t2013-08-18 17:02:20.003003-07\t2003-03-23 14:05:05.006006-08\t2013-08-17 15:05:05.006006-07\n+10 days\t2014-07-14 21:02:21.003003-07\t1970-04-11 18:05:05.006006-08\t2014-07-09 19:05:05.006006-07\n+2 months\t2016-03-20 19:02:22.003003-07\t1970-11-04 16:00:00-08\t2016-02-29 16:00:00-08\n+2 months\t2018-01-31 09:02:23.003003-08\t1970-05-06 08:05:05.006006-07\t2017-12-31 16:00:00-08\n+2 months\t2019-09-30 04:02:24.003003-07\t1969-10-09 02:05:05.006006-07\t2019-07-31 17:00:00-07\n+2 years\t2020-03-19 08:02:25.003003-07\t2032-06-28 06:05:05.006006-07\t2018-05-31 17:00:00-07\n+2 years\t2022-07-20 06:02:26.003003-07\t1969-11-14 03:05:05.006006-08\t2021-10-31 17:00:00-07\n+10 days\t2024-08-11 12:02:26.003003-07\t-infinity\tNULL\n+10 days\t2032-12-18 01:02:26.003003-08\tinfinity\tNULL\n+10 days\tinfinity\t1969-12-31 16:00:00-08\tinfinity\n+\n+query II\n+select t, time_bucket('11 seconds'::interval, t, 'Asia/Calcutta') from timestamps_tz;\n+----\n+-infinity\t-infinity\n+1907-11-19 12:00:00-08\t1907-11-19 12:00:00-08\n+1969-12-31 16:00:00-08\t1969-12-31 15:59:56-08\n+1979-04-09 21:02:05.003003-08\t1979-04-09 21:02:05-08\n+1981-09-29 19:02:06.003003-07\t1981-09-29 19:02:02-07\n+1982-06-14 15:02:07.003003-07\t1982-06-14 15:02:06-07\n+1985-02-19 22:02:08.003003-08\t1985-02-19 22:02:03-08\n+1989-06-07 19:02:09.003003-07\t1989-06-07 19:02:06-07\n+1990-07-10 17:02:10.003003-07\t1990-07-10 17:02:00-07\n+1991-05-11 21:02:11.003003-07\t1991-05-11 21:02:06-07\n+1992-10-16 19:02:12.003003-07\t1992-10-16 19:02:03-07\n+1994-12-04 13:02:13.003003-08\t1994-12-04 13:02:08-08\n+1997-01-01 23:02:14.003003-08\t1997-01-01 23:02:11-08\n+1999-04-25 19:02:15.003003-07\t1999-04-25 19:02:11-07\n+1999-12-31 16:00:00-08\t1999-12-31 15:59:50-08\n+2000-01-02 16:00:00-08\t2000-01-02 16:00:00-08\n+2000-03-25 17:00:00-08\t2000-03-25 16:59:54-08\n+2000-04-02 03:00:00-07\t2000-04-02 01:59:51-08\n+2000-10-28 18:00:00-07\t2000-10-28 17:59:50-07\n+2000-10-29 01:00:00-08\t2000-10-29 01:59:59-07\n+2008-12-31 15:59:59.999999-08\t2008-12-31 15:59:56-08\n+2010-05-02 19:02:19.003003-07\t2010-05-02 19:02:17-07\n+2013-08-18 17:02:20.003003-07\t2013-08-18 17:02:15-07\n+2014-07-14 21:02:21.003003-07\t2014-07-14 21:02:14-07\n+2016-03-20 19:02:22.003003-07\t2016-03-20 19:02:15-07\n+2018-01-31 09:02:23.003003-08\t2018-01-31 09:02:20-08\n+2019-09-30 04:02:24.003003-07\t2019-09-30 04:02:15-07\n+2020-03-19 08:02:25.003003-07\t2020-03-19 08:02:22-07\n+2022-07-20 06:02:26.003003-07\t2022-07-20 06:02:25-07\n+2024-08-11 12:02:26.003003-07\t2024-08-11 12:02:21-07\n+2032-12-18 01:02:26.003003-08\t2032-12-18 01:02:16-08\n+infinity\tinfinity\n+\n+query II\n+select t, time_bucket('5 months'::interval, t, 'Europe/Berlin') from timestamps_tz;\n+----\n+-infinity\t-infinity\n+1907-11-19 12:00:00-08\t1907-06-30 15:00:00-08\n+1969-12-31 16:00:00-08\t1969-12-31 15:00:00-08\n+1979-04-09 21:02:05.003003-08\t1979-02-28 15:00:00-08\n+1981-09-29 19:02:06.003003-07\t1981-08-31 15:00:00-07\n+1982-06-14 15:02:07.003003-07\t1982-01-31 15:00:00-08\n+1985-02-19 22:02:08.003003-08\t1984-12-31 15:00:00-08\n+1989-06-07 19:02:09.003003-07\t1989-02-28 15:00:00-08\n+1990-07-10 17:02:10.003003-07\t1990-05-31 15:00:00-07\n+1991-05-11 21:02:11.003003-07\t1991-03-31 14:00:00-08\n+1992-10-16 19:02:12.003003-07\t1992-06-30 15:00:00-07\n+1994-12-04 13:02:13.003003-08\t1994-07-31 15:00:00-07\n+1997-01-01 23:02:14.003003-08\t1996-08-31 15:00:00-07\n+1999-04-25 19:02:15.003003-07\t1999-02-28 15:00:00-08\n+1999-12-31 16:00:00-08\t1999-12-31 15:00:00-08\n+2000-01-02 16:00:00-08\t1999-12-31 15:00:00-08\n+2000-03-25 17:00:00-08\t1999-12-31 15:00:00-08\n+2000-04-02 03:00:00-07\t1999-12-31 15:00:00-08\n+2000-10-28 18:00:00-07\t2000-05-31 15:00:00-07\n+2000-10-29 01:00:00-08\t2000-05-31 15:00:00-07\n+2008-12-31 15:59:59.999999-08\t2008-09-30 15:00:00-07\n+2010-05-02 19:02:19.003003-07\t2009-12-31 15:00:00-08\n+2013-08-18 17:02:20.003003-07\t2013-04-30 15:00:00-07\n+2014-07-14 21:02:21.003003-07\t2014-02-28 15:00:00-08\n+2016-03-20 19:02:22.003003-07\t2015-10-31 16:00:00-07\n+2018-01-31 09:02:23.003003-08\t2017-11-30 15:00:00-08\n+2019-09-30 04:02:24.003003-07\t2019-07-31 15:00:00-07\n+2020-03-19 08:02:25.003003-07\t2019-12-31 15:00:00-08\n+2022-07-20 06:02:26.003003-07\t2022-06-30 15:00:00-07\n+2024-08-11 12:02:26.003003-07\t2024-07-31 15:00:00-07\n+2032-12-18 01:02:26.003003-08\t2032-11-30 15:00:00-08\n+infinity\tinfinity\n+\n+query II\n+select t, time_bucket('11 seconds'::interval, t, 'Europe/Berlin') from timestamps_tz;\n+----\n+-infinity\t-infinity\n+1907-11-19 12:00:00-08\t1907-11-19 11:59:57-08\n+1969-12-31 16:00:00-08\t1969-12-31 15:59:53-08\n+1979-04-09 21:02:05.003003-08\t1979-04-09 21:02:02-08\n+1981-09-29 19:02:06.003003-07\t1981-09-29 19:01:59-07\n+1982-06-14 15:02:07.003003-07\t1982-06-14 15:02:03-07\n+1985-02-19 22:02:08.003003-08\t1985-02-19 22:02:00-08\n+1989-06-07 19:02:09.003003-07\t1989-06-07 19:02:03-07\n+1990-07-10 17:02:10.003003-07\t1990-07-10 17:02:08-07\n+1991-05-11 21:02:11.003003-07\t1991-05-11 21:02:03-07\n+1992-10-16 19:02:12.003003-07\t1992-10-16 19:02:11-07\n+1994-12-04 13:02:13.003003-08\t1994-12-04 13:02:05-08\n+1997-01-01 23:02:14.003003-08\t1997-01-01 23:02:08-08\n+1999-04-25 19:02:15.003003-07\t1999-04-25 19:02:08-07\n+1999-12-31 16:00:00-08\t1999-12-31 15:59:58-08\n+2000-01-02 16:00:00-08\t2000-01-02 15:59:57-08\n+2000-03-25 17:00:00-08\t2000-03-25 16:59:51-08\n+2000-04-02 03:00:00-07\t2000-04-02 01:59:59-08\n+2000-10-28 18:00:00-07\t2000-10-28 17:59:58-07\n+2000-10-29 01:00:00-08\t2000-10-29 01:59:56-07\n+2008-12-31 15:59:59.999999-08\t2008-12-31 15:59:53-08\n+2010-05-02 19:02:19.003003-07\t2010-05-02 19:02:14-07\n+2013-08-18 17:02:20.003003-07\t2013-08-18 17:02:12-07\n+2014-07-14 21:02:21.003003-07\t2014-07-14 21:02:11-07\n+2016-03-20 19:02:22.003003-07\t2016-03-20 19:02:12-07\n+2018-01-31 09:02:23.003003-08\t2018-01-31 09:02:17-08\n+2019-09-30 04:02:24.003003-07\t2019-09-30 04:02:23-07\n+2020-03-19 08:02:25.003003-07\t2020-03-19 08:02:19-07\n+2022-07-20 06:02:26.003003-07\t2022-07-20 06:02:22-07\n+2024-08-11 12:02:26.003003-07\t2024-08-11 12:02:18-07\n+2032-12-18 01:02:26.003003-08\t2032-12-18 01:02:24-08\n+infinity\tinfinity\n+\n+query II\n+select t, time_bucket('5 months'::interval, t, 'Europe/London') from timestamps_tz;\n+----\n+-infinity\t-infinity\n+1907-11-19 12:00:00-08\t1907-06-30 16:00:00-08\n+1969-12-31 16:00:00-08\t1969-12-31 15:00:00-08\n+1979-04-09 21:02:05.003003-08\t1979-02-28 16:00:00-08\n+1981-09-29 19:02:06.003003-07\t1981-08-31 16:00:00-07\n+1982-06-14 15:02:07.003003-07\t1982-01-31 16:00:00-08\n+1985-02-19 22:02:08.003003-08\t1984-12-31 16:00:00-08\n+1989-06-07 19:02:09.003003-07\t1989-02-28 16:00:00-08\n+1990-07-10 17:02:10.003003-07\t1990-05-31 16:00:00-07\n+1991-05-11 21:02:11.003003-07\t1991-03-31 15:00:00-08\n+1992-10-16 19:02:12.003003-07\t1992-06-30 16:00:00-07\n+1994-12-04 13:02:13.003003-08\t1994-07-31 16:00:00-07\n+1997-01-01 23:02:14.003003-08\t1996-08-31 16:00:00-07\n+1999-04-25 19:02:15.003003-07\t1999-02-28 16:00:00-08\n+1999-12-31 16:00:00-08\t1999-12-31 16:00:00-08\n+2000-01-02 16:00:00-08\t1999-12-31 16:00:00-08\n+2000-03-25 17:00:00-08\t1999-12-31 16:00:00-08\n+2000-04-02 03:00:00-07\t1999-12-31 16:00:00-08\n+2000-10-28 18:00:00-07\t2000-05-31 16:00:00-07\n+2000-10-29 01:00:00-08\t2000-05-31 16:00:00-07\n+2008-12-31 15:59:59.999999-08\t2008-09-30 16:00:00-07\n+2010-05-02 19:02:19.003003-07\t2009-12-31 16:00:00-08\n+2013-08-18 17:02:20.003003-07\t2013-04-30 16:00:00-07\n+2014-07-14 21:02:21.003003-07\t2014-02-28 16:00:00-08\n+2016-03-20 19:02:22.003003-07\t2015-10-31 17:00:00-07\n+2018-01-31 09:02:23.003003-08\t2017-11-30 16:00:00-08\n+2019-09-30 04:02:24.003003-07\t2019-07-31 16:00:00-07\n+2020-03-19 08:02:25.003003-07\t2019-12-31 16:00:00-08\n+2022-07-20 06:02:26.003003-07\t2022-06-30 16:00:00-07\n+2024-08-11 12:02:26.003003-07\t2024-07-31 16:00:00-07\n+2032-12-18 01:02:26.003003-08\t2032-11-30 16:00:00-08\n+infinity\tinfinity\n+\n+query II\n+select t, time_bucket('11 seconds'::interval, t, 'Europe/London') from timestamps_tz;\n+----\n+-infinity\t-infinity\n+1907-11-19 12:00:00-08\t1907-11-19 12:00:00-08\n+1969-12-31 16:00:00-08\t1969-12-31 15:59:56-08\n+1979-04-09 21:02:05.003003-08\t1979-04-09 21:02:05-08\n+1981-09-29 19:02:06.003003-07\t1981-09-29 19:02:02-07\n+1982-06-14 15:02:07.003003-07\t1982-06-14 15:02:06-07\n+1985-02-19 22:02:08.003003-08\t1985-02-19 22:02:03-08\n+1989-06-07 19:02:09.003003-07\t1989-06-07 19:02:06-07\n+1990-07-10 17:02:10.003003-07\t1990-07-10 17:02:00-07\n+1991-05-11 21:02:11.003003-07\t1991-05-11 21:02:06-07\n+1992-10-16 19:02:12.003003-07\t1992-10-16 19:02:03-07\n+1994-12-04 13:02:13.003003-08\t1994-12-04 13:02:08-08\n+1997-01-01 23:02:14.003003-08\t1997-01-01 23:02:11-08\n+1999-04-25 19:02:15.003003-07\t1999-04-25 19:02:11-07\n+1999-12-31 16:00:00-08\t1999-12-31 15:59:50-08\n+2000-01-02 16:00:00-08\t2000-01-02 16:00:00-08\n+2000-03-25 17:00:00-08\t2000-03-25 16:59:54-08\n+2000-04-02 03:00:00-07\t2000-04-02 01:59:51-08\n+2000-10-28 18:00:00-07\t2000-10-28 17:59:50-07\n+2000-10-29 01:00:00-08\t2000-10-29 01:59:59-07\n+2008-12-31 15:59:59.999999-08\t2008-12-31 15:59:56-08\n+2010-05-02 19:02:19.003003-07\t2010-05-02 19:02:17-07\n+2013-08-18 17:02:20.003003-07\t2013-08-18 17:02:15-07\n+2014-07-14 21:02:21.003003-07\t2014-07-14 21:02:14-07\n+2016-03-20 19:02:22.003003-07\t2016-03-20 19:02:15-07\n+2018-01-31 09:02:23.003003-08\t2018-01-31 09:02:20-08\n+2019-09-30 04:02:24.003003-07\t2019-09-30 04:02:15-07\n+2020-03-19 08:02:25.003003-07\t2020-03-19 08:02:22-07\n+2022-07-20 06:02:26.003003-07\t2022-07-20 06:02:25-07\n+2024-08-11 12:02:26.003003-07\t2024-08-11 12:02:21-07\n+2032-12-18 01:02:26.003003-08\t2032-12-18 01:02:16-08\n+infinity\tinfinity\n+\n+query II\n+select t, time_bucket(null::interval, t, 'Asia/Calcutta') from timestamps_tz;\n+----\n+-infinity\tNULL\n+1907-11-19 12:00:00-08\tNULL\n+1969-12-31 16:00:00-08\tNULL\n+1979-04-09 21:02:05.003003-08\tNULL\n+1981-09-29 19:02:06.003003-07\tNULL\n+1982-06-14 15:02:07.003003-07\tNULL\n+1985-02-19 22:02:08.003003-08\tNULL\n+1989-06-07 19:02:09.003003-07\tNULL\n+1990-07-10 17:02:10.003003-07\tNULL\n+1991-05-11 21:02:11.003003-07\tNULL\n+1992-10-16 19:02:12.003003-07\tNULL\n+1994-12-04 13:02:13.003003-08\tNULL\n+1997-01-01 23:02:14.003003-08\tNULL\n+1999-04-25 19:02:15.003003-07\tNULL\n+1999-12-31 16:00:00-08\tNULL\n+2000-01-02 16:00:00-08\tNULL\n+2000-03-25 17:00:00-08\tNULL\n+2000-04-02 03:00:00-07\tNULL\n+2000-10-28 18:00:00-07\tNULL\n+2000-10-29 01:00:00-08\tNULL\n+2008-12-31 15:59:59.999999-08\tNULL\n+2010-05-02 19:02:19.003003-07\tNULL\n+2013-08-18 17:02:20.003003-07\tNULL\n+2014-07-14 21:02:21.003003-07\tNULL\n+2016-03-20 19:02:22.003003-07\tNULL\n+2018-01-31 09:02:23.003003-08\tNULL\n+2019-09-30 04:02:24.003003-07\tNULL\n+2020-03-19 08:02:25.003003-07\tNULL\n+2022-07-20 06:02:26.003003-07\tNULL\n+2024-08-11 12:02:26.003003-07\tNULL\n+2032-12-18 01:02:26.003003-08\tNULL\n+infinity\tNULL\n+\n+query I\n+select time_bucket('11 seconds'::interval, null::timestamptz, 'Asia/Calcutta') from timestamps_tz;\n+----\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+NULL\n+\n+query II\n+select t, time_bucket('11 seconds'::interval, t, null::text) from timestamps_tz;\n+----\n+-infinity\tNULL\n+1907-11-19 12:00:00-08\tNULL\n+1969-12-31 16:00:00-08\tNULL\n+1979-04-09 21:02:05.003003-08\tNULL\n+1981-09-29 19:02:06.003003-07\tNULL\n+1982-06-14 15:02:07.003003-07\tNULL\n+1985-02-19 22:02:08.003003-08\tNULL\n+1989-06-07 19:02:09.003003-07\tNULL\n+1990-07-10 17:02:10.003003-07\tNULL\n+1991-05-11 21:02:11.003003-07\tNULL\n+1992-10-16 19:02:12.003003-07\tNULL\n+1994-12-04 13:02:13.003003-08\tNULL\n+1997-01-01 23:02:14.003003-08\tNULL\n+1999-04-25 19:02:15.003003-07\tNULL\n+1999-12-31 16:00:00-08\tNULL\n+2000-01-02 16:00:00-08\tNULL\n+2000-03-25 17:00:00-08\tNULL\n+2000-04-02 03:00:00-07\tNULL\n+2000-10-28 18:00:00-07\tNULL\n+2000-10-29 01:00:00-08\tNULL\n+2008-12-31 15:59:59.999999-08\tNULL\n+2010-05-02 19:02:19.003003-07\tNULL\n+2013-08-18 17:02:20.003003-07\tNULL\n+2014-07-14 21:02:21.003003-07\tNULL\n+2016-03-20 19:02:22.003003-07\tNULL\n+2018-01-31 09:02:23.003003-08\tNULL\n+2019-09-30 04:02:24.003003-07\tNULL\n+2020-03-19 08:02:25.003003-07\tNULL\n+2022-07-20 06:02:26.003003-07\tNULL\n+2024-08-11 12:02:26.003003-07\tNULL\n+2032-12-18 01:02:26.003003-08\tNULL\n+infinity\tNULL\n+\n+query IIII\n+select w, t, timezone, time_bucket(w, t, timezone) from timestamps_tz;\n+----\n+10 days\t-infinity\tUTC\t-infinity\n+00:00:00.000333\t1907-11-19 12:00:00-08\tUTC\t1907-11-19 11:59:59.999892-08\n+00:00:00.000333\t1969-12-31 16:00:00-08\tAmerica/Los_Angeles\t1969-12-31 15:59:59.999901-08\n+00:00:00.000333\t1979-04-09 21:02:05.003003-08\tAmerica/Los_Angeles\t1979-04-09 21:02:05.002845-08\n+00:00:00.333\t1981-09-29 19:02:06.003003-07\tUTC\t1981-09-29 19:02:05.712-07\n+00:00:00.333\t1982-06-14 15:02:07.003003-07\tAsia/Aden\t1982-06-14 15:02:06.801-07\n+00:00:00.333\t1985-02-19 22:02:08.003003-08\tAsia/Aden\t1985-02-19 22:02:07.728-08\n+00:05:33\t1989-06-07 19:02:09.003003-07\tUTC\t1989-06-07 19:01:57-07\n+00:05:33\t1990-07-10 17:02:10.003003-07\tPacific/Guam\t1990-07-10 17:00:00-07\n+00:05:33\t1991-05-11 21:02:11.003003-07\tPacific/Guam\t1991-05-11 20:57:54-07\n+05:33:00\t1992-10-16 19:02:12.003003-07\tUTC\t1992-10-16 18:30:00-07\n+05:33:00\t1994-12-04 13:02:13.003003-08\tEurope/Berlin\t1994-12-04 12:54:00-08\n+05:33:00\t1997-01-01 23:02:14.003003-08\tEurope/Berlin\t1997-01-01 17:33:00-08\n+333:00:00\t1999-04-25 19:02:15.003003-07\tUTC\t1999-04-14 02:00:00-07\n+333:00:00\t1999-12-31 16:00:00-08\tEurope/London\t1999-12-19 19:00:00-08\n+333:00:00\t2000-01-02 16:00:00-08\tEurope/London\t2000-01-02 16:00:00-08\n+333:00:00\t2000-03-25 17:00:00-08\tEurope/London\t2000-03-12 01:00:00-08\n+333:00:00\t2000-04-02 03:00:00-07\tEurope/London\t2000-03-25 22:00:00-08\n+333:00:00\t2000-10-28 18:00:00-07\tEurope/London\t2000-10-20 02:00:00-07\n+333:00:00\t2000-10-29 01:00:00-08\tEurope/London\t2000-10-20 02:00:00-07\n+10 days\t2008-12-31 15:59:59.999999-08\tUTC\t2008-12-25 16:00:00-08\n+7 days\t2010-05-02 19:02:19.003003-07\tUTC\t2010-05-02 17:00:00-07\n+10 days\t2013-08-18 17:02:20.003003-07\tAsia/Kolkata\t2013-08-11 11:30:00-07\n+10 days\t2014-07-14 21:02:21.003003-07\tAsia/Kolkata\t2014-07-07 11:30:00-07\n+2 months\t2016-03-20 19:02:22.003003-07\tUTC\t2016-02-29 16:00:00-08\n+2 months\t2018-01-31 09:02:23.003003-08\tAustralia/Sydney\t2017-12-31 05:00:00-08\n+2 months\t2019-09-30 04:02:24.003003-07\tAustralia/Sydney\t2019-08-31 07:00:00-07\n+2 years\t2020-03-19 08:02:25.003003-07\tAsia/Yekaterinburg\t2019-12-31 11:00:00-08\n+2 years\t2022-07-20 06:02:26.003003-07\tAsia/Yekaterinburg\t2021-12-31 11:00:00-08\n+10 days\t2024-08-11 12:02:26.003003-07\tAsia/Tokyo\t2024-08-03 08:00:00-07\n+10 days\t2032-12-18 01:02:26.003003-08\tAsia/Tokyo\t2032-12-09 07:00:00-08\n+10 days\tinfinity\tUTC\tinfinity\n+\n+statement error\n+select time_bucket('-3 hours'::interval, '2019-04-05 00:00:00+03'::timestamptz);\n+\n+statement error\n+select time_bucket('-3 hours'::interval, '2019-04-05 00:00:00+03'::timestamptz, '1 hour 30 minutes'::interval);\n+\n+statement error\n+select time_bucket('-3 hours'::interval, '2019-04-05 00:00:00+03'::timestamptz, '2019-04-05 00:00:00+03'::timestamptz);\n+\n+statement error\n+select time_bucket('-1 month'::interval, '2019-04-05 00:00:00-11'::timestamptz);\n+\n+statement error\n+select time_bucket('-1 month'::interval, '2019-04-05 00:00:00-11'::timestamptz, '1 hour 30 minutes'::interval);\n+\n+statement error\n+select time_bucket('-1 month'::interval, '2019-04-05 00:00:00-11'::timestamptz, '2018-04-05 00:00:00+11'::timestamptz);\n+\n+statement error\n+select time_bucket('1 day - 172800 seconds'::interval, '2018-05-05 00:00:00+07'::timestamptz);\n+\n+statement error\n+select time_bucket('1 day - 172800 seconds'::interval, '2018-05-05 00:00:00+07'::timestamptz, '1 hour 30 minutes'::interval);\n+\n+statement error\n+select time_bucket('1 day - 172800 seconds'::interval, '2018-05-05 00:00:00+07'::timestamptz, '2018-05-05 00:00:00+07'::timestamptz);\n+\n+statement error\n+select time_bucket('1 month 1 day'::interval, '2018-05-05 00:00:00+02'::timestamptz);\n+\n+statement error\n+select time_bucket('1 month 1 day'::interval, '2018-05-05 00:00:00+02'::timestamptz, '1 hour 30 minutes'::interval);\n+\n+statement error\n+select time_bucket('1 month 1 day'::interval, '2018-05-05 00:00:00+02'::timestamptz, '2018-05-05 00:00:00+02'::timestamptz);\n+\n+statement error\n+select time_bucket('3 days'::interval, '2019-05-05 00:00:00+09'::timestamptz, '2000000000 months'::interval);\n+\n+statement error\n+select time_bucket('3 days'::interval, '2019-05-05 00:00:00+09'::timestamptz, '-2000000000 months'::interval);\n+\n+statement error\n+select time_bucket('3 months'::interval, '2019-05-05 00:00:00+00'::timestamptz, '2000000000 months'::interval);\n+\n+statement error\n+select time_bucket('3 months'::interval, '2019-05-05 00:00:00+00'::timestamptz, '-2000000000 months'::interval);\n+\n+statement error\n+select time_bucket('1 microseconds'::interval, '290279-12-24 (BC) 19:59:05.224191+00'::timestamptz);\n+\n+query I\n+select time_bucket('1 microseconds'::interval, '290279-12-24 (BC) 19:59:05.224192+00'::timestamptz);\n+----\n+290273-12-11 (BC) 12:06:07.224192-07:52\n+\n+statement error\n+select time_bucket('1 microseconds'::interval, '294247-01-10 04:00:54.775+00'::timestamptz);\n+\n+query I\n+select time_bucket('1 microseconds'::interval, '294247-01-10 04:00:54.774999+00'::timestamptz);\n+----\n+294247-01-09 20:00:54.774999-08\n+\n+query II\n+with t2 as (select '2000-03-26 00:00:00'::timestamptz + (n::text || 'hours')::interval as ts from  generate_series(0, 72, 3) t1(n)) select ts, time_bucket('10 seconds'::interval, ts, 'Europe/London') from t2;\n+----\n+2000-03-26 00:00:00-08\t2000-03-26 00:00:00-08\n+2000-03-26 03:00:00-08\t2000-03-26 03:00:00-08\n+2000-03-26 06:00:00-08\t2000-03-26 06:00:00-08\n+2000-03-26 09:00:00-08\t2000-03-26 09:00:00-08\n+2000-03-26 12:00:00-08\t2000-03-26 12:00:00-08\n+2000-03-26 15:00:00-08\t2000-03-26 15:00:00-08\n+2000-03-26 18:00:00-08\t2000-03-26 18:00:00-08\n+2000-03-26 21:00:00-08\t2000-03-26 21:00:00-08\n+2000-03-27 00:00:00-08\t2000-03-27 00:00:00-08\n+2000-03-27 03:00:00-08\t2000-03-27 03:00:00-08\n+2000-03-27 06:00:00-08\t2000-03-27 06:00:00-08\n+2000-03-27 09:00:00-08\t2000-03-27 09:00:00-08\n+2000-03-27 12:00:00-08\t2000-03-27 12:00:00-08\n+2000-03-27 15:00:00-08\t2000-03-27 15:00:00-08\n+2000-03-27 18:00:00-08\t2000-03-27 18:00:00-08\n+2000-03-27 21:00:00-08\t2000-03-27 21:00:00-08\n+2000-03-28 00:00:00-08\t2000-03-28 00:00:00-08\n+2000-03-28 03:00:00-08\t2000-03-28 03:00:00-08\n+2000-03-28 06:00:00-08\t2000-03-28 06:00:00-08\n+2000-03-28 09:00:00-08\t2000-03-28 09:00:00-08\n+2000-03-28 12:00:00-08\t2000-03-28 12:00:00-08\n+2000-03-28 15:00:00-08\t2000-03-28 15:00:00-08\n+2000-03-28 18:00:00-08\t2000-03-28 18:00:00-08\n+2000-03-28 21:00:00-08\t2000-03-28 21:00:00-08\n+2000-03-29 00:00:00-08\t2000-03-29 00:00:00-08\n+\n+query II\n+with t2 as (select '2000-10-28 00:00:00'::timestamptz + (n::text || 'hours')::interval as ts from  generate_series(0, 72, 3) t1(n)) select ts, time_bucket('10 seconds'::interval, ts, 'Europe/London') from t2;\n+----\n+2000-10-28 00:00:00-07\t2000-10-28 00:00:00-07\n+2000-10-28 03:00:00-07\t2000-10-28 03:00:00-07\n+2000-10-28 06:00:00-07\t2000-10-28 06:00:00-07\n+2000-10-28 09:00:00-07\t2000-10-28 09:00:00-07\n+2000-10-28 12:00:00-07\t2000-10-28 12:00:00-07\n+2000-10-28 15:00:00-07\t2000-10-28 15:00:00-07\n+2000-10-28 18:00:00-07\t2000-10-28 18:00:00-07\n+2000-10-28 21:00:00-07\t2000-10-28 21:00:00-07\n+2000-10-29 00:00:00-07\t2000-10-29 00:00:00-07\n+2000-10-29 02:00:00-08\t2000-10-29 02:00:00-08\n+2000-10-29 05:00:00-08\t2000-10-29 05:00:00-08\n+2000-10-29 08:00:00-08\t2000-10-29 08:00:00-08\n+2000-10-29 11:00:00-08\t2000-10-29 11:00:00-08\n+2000-10-29 14:00:00-08\t2000-10-29 14:00:00-08\n+2000-10-29 17:00:00-08\t2000-10-29 17:00:00-08\n+2000-10-29 20:00:00-08\t2000-10-29 20:00:00-08\n+2000-10-29 23:00:00-08\t2000-10-29 23:00:00-08\n+2000-10-30 02:00:00-08\t2000-10-30 02:00:00-08\n+2000-10-30 05:00:00-08\t2000-10-30 05:00:00-08\n+2000-10-30 08:00:00-08\t2000-10-30 08:00:00-08\n+2000-10-30 11:00:00-08\t2000-10-30 11:00:00-08\n+2000-10-30 14:00:00-08\t2000-10-30 14:00:00-08\n+2000-10-30 17:00:00-08\t2000-10-30 17:00:00-08\n+2000-10-30 20:00:00-08\t2000-10-30 20:00:00-08\n+2000-10-30 23:00:00-08\t2000-10-30 23:00:00-08\n",
  "problem_statement": "Implement TIME_BUCKET Function\n`time_bucket` allows for truncation/bucketing by an arbitrary interval, instead of only by whole minutes, whole hours, etc. See e.g. the [Timescale docs](https://docs.timescale.com/api/latest/hyperfunctions/time_bucket/) or [Singlestore docs](https://docs.singlestore.com/managed-service/en/reference/sql-reference/time-series-functions/time_bucket.html).\n",
  "hints_text": "I would like to work on this.\nGo ahead",
  "created_at": "2022-12-12T12:21:15Z"
}