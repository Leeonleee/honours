{
  "repo": "duckdb/duckdb",
  "pull_number": 15704,
  "instance_id": "duckdb__duckdb-15704",
  "issue_numbers": [
    "15641"
  ],
  "base_commit": "2a1d5e2ab8882b27474e733f8703ef05ebcb0524",
  "patch": "diff --git a/.github/patches/extensions/httpfs/last_modified.patch b/.github/patches/extensions/httpfs/last_modified.patch\nnew file mode 100644\nindex 000000000000..6b0f3e17852b\n--- /dev/null\n+++ b/.github/patches/extensions/httpfs/last_modified.patch\n@@ -0,0 +1,33 @@\n+diff --git a/extension/httpfs/httpfs.cpp b/extension/httpfs/httpfs.cpp\n+index e6b28e5..5847eb4 100644\n+--- a/extension/httpfs/httpfs.cpp\n++++ b/extension/httpfs/httpfs.cpp\n+@@ -772,16 +772,18 @@ void HTTPFileHandle::Initialize(optional_ptr<FileOpener> opener) {\n+ \t\tFullDownload(hfs, should_write_cache);\n+ \t}\n+ \tif (!res->headers[\"Last-Modified\"].empty()) {\n+-\t\tauto result = StrpTimeFormat::Parse(\"%a, %d %h %Y %T %Z\", res->headers[\"Last-Modified\"]);\n+-\t\tstruct tm tm {};\n+-\t\ttm.tm_year = result.data[0] - 1900;\n+-\t\ttm.tm_mon = result.data[1] - 1;\n+-\t\ttm.tm_mday = result.data[2];\n+-\t\ttm.tm_hour = result.data[3];\n+-\t\ttm.tm_min = result.data[4];\n+-\t\ttm.tm_sec = result.data[5];\n+-\t\ttm.tm_isdst = 0;\n+-\t\tlast_modified = mktime(&tm);\n++\t\tStrpTimeFormat::ParseResult result;\n++\t\tif (StrpTimeFormat::TryParse(\"%a, %d %h %Y %T %Z\", res->headers[\"Last-Modified\"], result)) {\n++\t\t\tstruct tm tm {};\n++\t\t\ttm.tm_year = result.data[0] - 1900;\n++\t\t\ttm.tm_mon = result.data[1] - 1;\n++\t\t\ttm.tm_mday = result.data[2];\n++\t\t\ttm.tm_hour = result.data[3];\n++\t\t\ttm.tm_min = result.data[4];\n++\t\t\ttm.tm_sec = result.data[5];\n++\t\t\ttm.tm_isdst = 0;\n++\t\t\tlast_modified = mktime(&tm);\n++\t\t}\n+ \t}\n+ \n+ \tif (should_write_cache) {\ndiff --git a/extension/json/buffered_json_reader.cpp b/extension/json/buffered_json_reader.cpp\nindex f99fe0321327..68a830c7fd12 100644\n--- a/extension/json/buffered_json_reader.cpp\n+++ b/extension/json/buffered_json_reader.cpp\n@@ -35,7 +35,7 @@ void JSONFileHandle::Reset() {\n \trequested_reads = 0;\n \tactual_reads = 0;\n \tlast_read_requested = false;\n-\tif (IsOpen() && CanSeek()) {\n+\tif (IsOpen() && !file_handle->IsPipe()) {\n \t\tfile_handle->Reset();\n \t}\n }\ndiff --git a/extension/json/json_functions/read_json_objects.cpp b/extension/json/json_functions/read_json_objects.cpp\nindex a0e6e6b8f4f8..c58b85fd7ea6 100644\n--- a/extension/json/json_functions/read_json_objects.cpp\n+++ b/extension/json/json_functions/read_json_objects.cpp\n@@ -64,8 +64,8 @@ TableFunction GetReadJSONObjectsTableFunction(bool list_parameter, shared_ptr<JS\n \n TableFunctionSet JSONFunctions::GetReadJSONObjectsFunction() {\n \tTableFunctionSet function_set(\"read_json_objects\");\n-\tauto function_info =\n-\t    make_shared_ptr<JSONScanInfo>(JSONScanType::READ_JSON_OBJECTS, JSONFormat::ARRAY, JSONRecordType::RECORDS);\n+\tauto function_info = make_shared_ptr<JSONScanInfo>(JSONScanType::READ_JSON_OBJECTS, JSONFormat::AUTO_DETECT,\n+\t                                                   JSONRecordType::RECORDS);\n \tfunction_set.AddFunction(GetReadJSONObjectsTableFunction(false, function_info));\n \tfunction_set.AddFunction(GetReadJSONObjectsTableFunction(true, function_info));\n \treturn function_set;\ndiff --git a/src/common/local_file_system.cpp b/src/common/local_file_system.cpp\nindex 7136dc715cc2..89990c767e36 100644\n--- a/src/common/local_file_system.cpp\n+++ b/src/common/local_file_system.cpp\n@@ -853,16 +853,27 @@ unique_ptr<FileHandle> LocalFileSystem::OpenFile(const string &path_p, FileOpenF\n \tbool open_write = flags.OpenForWriting();\n \tif (open_read && open_write) {\n \t\tdesired_access = GENERIC_READ | GENERIC_WRITE;\n-\t\tshare_mode = 0;\n \t} else if (open_read) {\n \t\tdesired_access = GENERIC_READ;\n-\t\tshare_mode = FILE_SHARE_READ;\n \t} else if (open_write) {\n \t\tdesired_access = GENERIC_WRITE;\n-\t\tshare_mode = 0;\n \t} else {\n \t\tthrow InternalException(\"READ, WRITE or both should be specified when opening a file\");\n \t}\n+\tswitch (flags.Lock()) {\n+\tcase FileLockType::NO_LOCK:\n+\t\tshare_mode = FILE_SHARE_READ | FILE_SHARE_WRITE;\n+\t\tbreak;\n+\tcase FileLockType::READ_LOCK:\n+\t\tshare_mode = FILE_SHARE_READ;\n+\t\tbreak;\n+\tcase FileLockType::WRITE_LOCK:\n+\t\tshare_mode = 0;\n+\t\tbreak;\n+\tdefault:\n+\t\tthrow InternalException(\"Unknown FileLockType\");\n+\t}\n+\n \tif (open_write) {\n \t\tif (flags.CreateFileIfNotExists()) {\n \t\t\tcreation_disposition = OPEN_ALWAYS;\ndiff --git a/src/function/scalar/strftime_format.cpp b/src/function/scalar/strftime_format.cpp\nindex 8ab46ace7058..58ccd9959e25 100644\n--- a/src/function/scalar/strftime_format.cpp\n+++ b/src/function/scalar/strftime_format.cpp\n@@ -1412,6 +1412,16 @@ StrpTimeFormat::ParseResult StrpTimeFormat::Parse(const string &format_string, c\n \treturn result;\n }\n \n+bool StrpTimeFormat::TryParse(const string &format_string, const string &text, ParseResult &result) {\n+\tStrpTimeFormat format;\n+\tformat.format_specifier = format_string;\n+\tstring error = StrTimeFormat::ParseFormatSpecifier(format_string, format);\n+\tif (!error.empty()) {\n+\t\tthrow InvalidInputException(\"Failed to parse format specifier %s: %s\", format_string, error);\n+\t}\n+\treturn format.Parse(text, result);\n+}\n+\n bool StrTimeFormat::Empty() const {\n \treturn format_specifier.empty();\n }\ndiff --git a/src/include/duckdb/function/scalar/strftime_format.hpp b/src/include/duckdb/function/scalar/strftime_format.hpp\nindex 7392be2541a1..8353ee9a64d8 100644\n--- a/src/include/duckdb/function/scalar/strftime_format.hpp\n+++ b/src/include/duckdb/function/scalar/strftime_format.hpp\n@@ -169,6 +169,7 @@ struct StrpTimeFormat : public StrTimeFormat { // NOLINT: work-around bug in cla\n \t\treturn format_specifier != other.format_specifier;\n \t}\n \tDUCKDB_API static ParseResult Parse(const string &format, const string &text);\n+\tDUCKDB_API static bool TryParse(const string &format, const string &text, ParseResult &result);\n \n \tDUCKDB_API bool Parse(string_t str, ParseResult &result, bool strict = false) const;\n \n",
  "test_patch": "diff --git a/test/sql/json/table/read_json_objects.test b/test/sql/json/table/read_json_objects.test\nindex e9c0018b897a..ecf73b6214e5 100644\n--- a/test/sql/json/table/read_json_objects.test\n+++ b/test/sql/json/table/read_json_objects.test\n@@ -9,7 +9,7 @@ require json\n statement error\n select * from read_json_objects('data/json/unterminated_quotes.ndjson')\n ----\n-Invalid Input Error: Expected top-level JSON array\n+Invalid Input Error: Malformed JSON\n \n # now it should work!\n query I\n@@ -213,7 +213,7 @@ Invalid Input Error: Malformed JSON in file \"data/json/multiple_objects_per_line\n statement error\n select * from read_json_objects('data/csv/tpcds_14.csv')\n ----\n-Invalid Input Error: Expected top-level JSON array\n+Invalid Input Error: Malformed JSON\n \n statement error\n select * from read_ndjson_objects('data/csv/tpcds_14.csv')\n@@ -224,7 +224,7 @@ Invalid Input Error: Malformed JSON in file \"data/csv/tpcds_14.csv\"\n statement error\n select * from read_json_objects('data/parquet-testing/blob.parquet')\n ----\n-Invalid Input Error: Expected top-level JSON array\n+Invalid Input Error: Malformed JSON\n \n statement error\n select * from read_ndjson_objects('data/parquet-testing/blob.parquet')\n",
  "problem_statement": "Duckdb fails to load json files in windows that are open in another app\n### What happens?\n\nUsing the duckdb command line of JDBC driver you can't load files that are open (locked) by another application. This is mainly a problem on Windows as it likes to lock files.\r\n\r\nIO Error: Cannot open file \"P:\\2025-01-09_Log.json\": The process cannot access the file because it is being used by another process.\r\n\r\nIs it possible so the code tries to open the file without gaining a lock on it, so that it can be read. I'm happy to accept that the data could change while it's being read, but with the ignore_errors=true\n\n### To Reproduce\n\nThis powershell creates a file, opens it for writing, then tries to read it.\r\n\r\n```powershell\r\n$path = \"$($ENV:HOMEPATH)\\Downloads\\t.json\"\r\nWrite-Output '{}' > $path\r\n$file = [System.IO.File]::Open($path, \"Open\", \"Write\", \"None\")\r\nduckdb -c \"select count(*) from read_json('${path}')\";\r\n$file.close()\r\n ;\r\n\r\n````\n\n### OS:\n\nWindows\n\n### DuckDB Version:\n\nv1.1.0 \n\n### DuckDB Client:\n\ncli, JDBC\n\n### Hardware:\n\n_No response_\n\n### Full Name:\n\nPaul Austin\n\n### Affiliation:\n\nAutomutatio\n\n### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.\n\nI have tested with a stable release\n\n### Did you include all relevant data sets for reproducing the issue?\n\nYes\n\n### Did you include all code required to reproduce the issue?\n\n- [X] Yes, I have\n\n### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?\n\n- [X] Yes, I have\n",
  "hints_text": "Hi @paulaustin-automutatio thanks for reporting this. We'll discuss it in our weekly meeting but to be honest I don't think there's a lot we can do here. The `ignore_errors` is supposed to ignore errors related to the file's content, not its access. So reading locked files would require the introduction of another configuration flag.\nOne question: what happens if you open the file in read mode with the Powershell script?\n@szarnyasg The actual file is being opened by the logback library in Java on a completely different machine. The example I gave was one I made up so that you can replicate the issue.\r\n\r\nIs there not a way you can read the file without a lock. I am able to read that file in Java. So my temporary work around is to copy the files from the active log directory to another directory so that I can then read them using duckdb.\nWe already open JSON files (and CSV/Parquet files, for that matter) with just a read flag without any locks. I'm assuming that the lock that the other process grabs is exclusive? If not, we might not be interpreting the other process' logs as exclusive wrongly\nI've looked into this a bit and I think this is an issue with Windows that we cannot solve:\r\n```powershell\r\nWrite-Output '{}' > my.json\r\n$file = [System.IO.File]::Open(\"C:\\Users\\duckdb\\duckdb-laurens\\my.json\", \"Open\", \"Write\", \"None\")\r\ncat my.json\r\n```\r\nErrors with:\r\n```\r\ncat: The process cannot access the file 'C:\\Users\\duckdb\\duckdb-laurens\\my.json' because it is being used by another process.\r\n```\r\nIf even `cat`, which definitely opens files in read-only mode, cannot read files that are already opened like that, I don't think DuckDB can either.\n@lnkuiper I can read the file on the same machine in Java, so it is possible\n@lnkuiper When you open the file for reading what specific base API do you use and what open mode parameters do you specify?\n@lnkuiper I think my example using the System.Io.File Open is locking more than logback in java is locking.\r\n",
  "created_at": "2025-01-14T13:03:42Z"
}