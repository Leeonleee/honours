{
  "repo": "duckdb/duckdb",
  "pull_number": 9261,
  "instance_id": "duckdb__duckdb-9261",
  "issue_numbers": [
    "9255"
  ],
  "base_commit": "fa87a54b700c0b38ef89434a0d23a13ec85fdc1d",
  "patch": "diff --git a/src/include/duckdb/planner/binder.hpp b/src/include/duckdb/planner/binder.hpp\nindex 90a7ae9459d3..b26bc284aa40 100644\n--- a/src/include/duckdb/planner/binder.hpp\n+++ b/src/include/duckdb/planner/binder.hpp\n@@ -362,6 +362,7 @@ class Binder : public std::enable_shared_from_this<Binder> {\n \n \t//! If only a schema name is provided (e.g. \"a.b\") then figure out if \"a\" is a schema or a catalog name\n \tvoid BindSchemaOrCatalog(string &catalog_name, string &schema_name);\n+\tconst string BindCatalog(string &catalog_name);\n \tSchemaCatalogEntry &BindCreateSchema(CreateInfo &info);\n \n \tunique_ptr<BoundQueryNode> BindSelectNode(SelectNode &statement, unique_ptr<BoundTableRef> from_table);\ndiff --git a/src/planner/binder/statement/bind_create.cpp b/src/planner/binder/statement/bind_create.cpp\nindex 0916da300df6..972a7128cbc2 100644\n--- a/src/planner/binder/statement/bind_create.cpp\n+++ b/src/planner/binder/statement/bind_create.cpp\n@@ -68,6 +68,16 @@ void Binder::BindSchemaOrCatalog(string &catalog, string &schema) {\n \tBindSchemaOrCatalog(context, catalog, schema);\n }\n \n+const string Binder::BindCatalog(string &catalog) {\n+\tauto &db_manager = DatabaseManager::Get(context);\n+\toptional_ptr<AttachedDatabase> database = db_manager.GetDatabase(context, catalog);\n+\tif (database) {\n+\t\treturn db_manager.GetDatabase(context, catalog).get()->GetName();\n+\t} else {\n+\t\treturn db_manager.GetDefaultDatabase(context);\n+\t}\n+}\n+\n SchemaCatalogEntry &Binder::BindSchema(CreateInfo &info) {\n \tBindSchemaOrCatalog(info.catalog, info.schema);\n \tif (IsInvalidCatalog(info.catalog) && info.temporary) {\n@@ -456,9 +466,13 @@ BoundStatement Binder::Bind(CreateStatement &stmt) {\n \n \tauto catalog_type = stmt.info->type;\n \tswitch (catalog_type) {\n-\tcase CatalogType::SCHEMA_ENTRY:\n+\tcase CatalogType::SCHEMA_ENTRY: {\n+\t\tauto &base = stmt.info->Cast<CreateInfo>();\n+\t\tauto catalog = BindCatalog(base.catalog);\n+\t\tproperties.modified_databases.insert(catalog);\n \t\tresult.plan = make_uniq<LogicalCreate>(LogicalOperatorType::LOGICAL_CREATE_SCHEMA, std::move(stmt.info));\n \t\tbreak;\n+\t}\n \tcase CatalogType::VIEW_ENTRY: {\n \t\tauto &base = stmt.info->Cast<CreateViewInfo>();\n \t\t// bind the schema\n",
  "test_patch": "diff --git a/test/sql/create/create_objects_readonly.test b/test/sql/create/create_objects_readonly.test\nnew file mode 100644\nindex 000000000000..f0e8906950fe\n--- /dev/null\n+++ b/test/sql/create/create_objects_readonly.test\n@@ -0,0 +1,47 @@\n+# name: test/sql/create/create_objects_readonly.test\n+# description: Test that creating objects fails on readonly database\n+# group: [create]\n+\n+# load the DB from disk and make some test data\n+load __TEST_DIR__/create_objects_readonly.db\n+\n+statement ok\n+create table t1 as select 'c1' as c1\n+\n+load __TEST_DIR__/create_objects_readonly.db readonly\n+\n+# cannot create a schema - database is opened in read-only mode\n+statement error\n+CREATE schema s2;\n+----\n+read-only\n+\n+# cannot create a table - database is opened in read-only mode\n+statement error\n+CREATE TABLE test AS SELECT * FROM range(10) t(i);\n+----\n+read-only\n+\n+# cannot create a view - database is opened in read-only mode\n+statement error\n+CREATE view v1 AS SELECT * FROM range(10) t(i);\n+----\n+read-only\n+\n+# cannot create a macro - database is opened in read-only mode\n+statement error\n+CREATE macro add(a, b) AS a + b;\n+----\n+read-only\n+\n+# cannot create a type - database is opened in read-only mode\n+statement error\n+CREATE TYPE mood AS ENUM ('happy', 'sad', 'curious');\n+----\n+read-only\n+\n+# cannot create a sequence - database is opened in read-only mode\n+statement error\n+CREATE SEQUENCE serial START 101;\n+----\n+read-only\n\\ No newline at end of file\n",
  "problem_statement": "Can create ephemeral schema when opening db -readonly\n### What happens?\r\n\r\nIt appears possible to add a schema entry to the catalog, though not persist it, when opening readonly, in CLI at least.\r\nThis seems inconsistent with `-readonly`. More of a nit since you can't write tables. Not a priority for us but thought I'd report it.\r\n\r\n### To Reproduce\r\n\r\n```\r\n> duckdb-main /tmp/b.ddb\r\nv0.9.1-dev120 af666ad8ba\r\nEnter \".help\" for usage hints.\r\nD create schema s1;\r\nD create table s1.t1 as select 'abc' as x;\r\nD select catalog_name, schema_name from information_schema.schemata where catalog_name='b';\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 catalog_name \u2502    schema_name     \u2502\r\n\u2502   varchar    \u2502      varchar       \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 b            \u2502 information_schema \u2502\r\n\u2502 b            \u2502 main               \u2502\r\n\u2502 b            \u2502 pg_catalog         \u2502\r\n\u2502 b            \u2502 s1                 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n-- all good\r\n\r\n> duckdb-main -readonly /tmp/b.ddb\r\n-- Loading resources from /Users/nursa/.duckdbrc\r\nv0.9.1-dev120 af666ad8ba\r\nEnter \".help\" for usage hints.\r\nD create table s1.t2 as select 'bcd' as y;\r\nError: Invalid Error: Cannot execute statement of type \"CREATE\" on database \"b\" which is attached in read-only mode!\r\n^^ expected, just proving it's actually opened readonly\r\nD create schema s2;   -- no error ?\r\nD select catalog_name, schema_name from information_schema.schemata where catalog_name='b';\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 catalog_name \u2502    schema_name     \u2502\r\n\u2502   varchar    \u2502      varchar       \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 b            \u2502 information_schema \u2502\r\n\u2502 b            \u2502 main               \u2502\r\n\u2502 b            \u2502 pg_catalog         \u2502\r\n\u2502 b            \u2502 s1                 \u2502\r\n\u2502 b            \u2502 s2                 \u2502. (!!!!)\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\n\r\n\r\n### OS:\r\n\r\nMacOS\r\n\r\n### DuckDB Version:\r\n\r\nv0.9.1-dev120 af666ad8ba\r\n\r\n### DuckDB Client:\r\n\r\nCLI\r\n\r\n### Full Name:\r\n\r\nNicholas Ursa\r\n\r\n### Affiliation:\r\n\r\nMotherduck\r\n\r\n### Have you tried this on the latest `main` branch?\r\n\r\nI have tested with a main build\r\n\r\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\r\n\r\n- [X] Yes, I have\n",
  "hints_text": "",
  "created_at": "2023-10-07T21:54:05Z"
}