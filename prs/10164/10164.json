{
  "repo": "duckdb/duckdb",
  "pull_number": 10164,
  "instance_id": "duckdb__duckdb-10164",
  "issue_numbers": [
    "10141"
  ],
  "base_commit": "10bd11d2031a9c0b56044c75b7ce01c41f9240e9",
  "patch": "diff --git a/src/planner/binder/statement/bind_create.cpp b/src/planner/binder/statement/bind_create.cpp\nindex da9d1b5ec533..6dc563ff2f91 100644\n--- a/src/planner/binder/statement/bind_create.cpp\n+++ b/src/planner/binder/statement/bind_create.cpp\n@@ -634,16 +634,13 @@ BoundStatement Binder::Bind(CreateStatement &stmt) {\n \t\t\t}\n \n \t\t\tresult.plan->AddChild(std::move(query));\n-\t\t} else if (create_type_info.type.id() == LogicalTypeId::USER) {\n+\t\t} else {\n \t\t\t// two cases:\n-\t\t\t// 1: create a type with a non-existant type as source, catalog.GetType(...) will throw exception.\n+\t\t\t// 1: create a type with a non-existent type as source, Binder::BindLogicalType(...) will throw exception.\n \t\t\t// 2: create a type alias with a custom type.\n \t\t\t// eg. CREATE TYPE a AS INT; CREATE TYPE b AS a;\n \t\t\t// We set b to be an alias for the underlying type of a\n-\t\t\tauto inner_type = Catalog::GetType(context, schema.catalog.GetName(), schema.name,\n-\t\t\t                                   UserType::GetTypeName(create_type_info.type));\n-\t\t\tinner_type.SetAlias(create_type_info.name);\n-\t\t\tcreate_type_info.type = inner_type;\n+\t\t\tBinder::BindLogicalType(context, create_type_info.type);\n \t\t}\n \t\tbreak;\n \t}\n@@ -651,7 +648,6 @@ BoundStatement Binder::Bind(CreateStatement &stmt) {\n \t\tCatalogTransaction transaction = CatalogTransaction(Catalog::GetSystemCatalog(context), context);\n \t\tproperties.return_type = StatementReturnType::QUERY_RESULT;\n \t\treturn SecretManager::Get(context).BindCreateSecret(transaction, stmt.info->Cast<CreateSecretInfo>());\n-\t\tbreak;\n \t}\n \tdefault:\n \t\tthrow Exception(\"Unrecognized type!\");\n",
  "test_patch": "diff --git a/test/issues/general/test_5664.test b/test/issues/general/test_5664.test\nindex 595648a0cf44..a4001cabae90 100644\n--- a/test/issues/general/test_5664.test\n+++ b/test/issues/general/test_5664.test\n@@ -25,4 +25,4 @@ INSERT INTO test VALUES ('duckdb');\n query I\n SELECT typeof(x) FROM test;\n ----\n-b\n+BLOB\ndiff --git a/test/sql/types/alias/nested_alias.test b/test/sql/types/alias/nested_alias.test\nnew file mode 100644\nindex 000000000000..2bc414b48b4f\n--- /dev/null\n+++ b/test/sql/types/alias/nested_alias.test\n@@ -0,0 +1,14 @@\n+# name: test/sql/types/alias/nested_alias.test\n+# description: Verify that nested aliases work correctly\n+# group: [alias]\n+\n+statement ok\n+CREATE TYPE my_int AS INT\n+\n+statement ok\n+CREATE TYPE my_int_list AS my_int[]\n+\n+query I\n+SELECT [42]::my_int_list\n+----\n+[42]\ndiff --git a/test/sql/types/alias/recursive_alias.test b/test/sql/types/alias/recursive_alias.test\nnew file mode 100644\nindex 000000000000..e0a0a59578af\n--- /dev/null\n+++ b/test/sql/types/alias/recursive_alias.test\n@@ -0,0 +1,19 @@\n+# name: test/sql/types/alias/recursive_alias.test\n+# description: Issue #10141 - DuckDB SIGSEGV when setting up ill-formed custom type\n+# group: [alias]\n+\n+# recursive type definitions are not allowed\n+statement error\n+CREATE TYPE t4 AS UNION ( v0 SETOF t4 );\n+----\n+Type with name t4 does not exist\n+\n+statement error\n+CREATE TYPE t4 AS t4[]\n+----\n+Type with name t4 does not exist\n+\n+statement error\n+CREATE TYPE t4 AS STRUCT(a t4)\n+----\n+Type with name t4 does not exist\n",
  "problem_statement": "DuckDB SIGSEGV when setting up ill-formed custom type\n### What happens?\n\nIn the latest `main` version of DuckDB (version 6b4f65a6e5b9146fc) and the released version `v0.9.2` (3c695d7b), the applications crash when executing the following query sequence: \r\n\r\n```sql\r\nCREATE TABLE v0 ( c1 INT); \r\nCREATE TABLE v2 ( c3 INT); \r\nCREATE TYPE t4 AS UNION ( v0 SETOF t4 ); \r\nALTER TABLE v2 ALTER c3 SET DATA TYPE ROW ( c3 t4 ); \r\n```\r\n\r\nHere is a crash stack trace from version 6b4f65a6e5b9: \r\n\r\n```\r\n#0  0x000055555588424b in duckdb::CatalogSet::GetEntryDetailed (this=0x55555729dde0, transaction=..., name=\"main\")\r\n    at /home/luy70/Desktop/DBMSs/duckdb/src/catalog/catalog_set.cpp:528\r\n#1  0x0000555555884391 in duckdb::CatalogSet::GetEntry (this=<optimized out>, transaction=..., name=\"main\")\r\n    at /home/luy70/Desktop/DBMSs/duckdb/src/catalog/catalog_set.cpp:551\r\n#2  0x000055555588452f in duckdb::DuckCatalog::GetSchema (this=<optimized out>, transaction=..., schema_name=\"main\", if_not_found=<optimized out>, error_context=...)\r\n    at /home/luy70/Desktop/DBMSs/duckdb/src/include/duckdb/common/unique_ptr.hpp:19\r\n#3  0x000055555587d1be in duckdb::Catalog::TryLookupEntryInternal (this=this@entry=0x55555729b130, transaction=..., type=type@entry=duckdb::CatalogType::TYPE_ENTRY,\r\n    schema=\"main\", name=\"t4\") at /home/luy70/Desktop/DBMSs/duckdb/src/include/duckdb/parser/query_error_context.hpp:21\r\n#4  0x000055555588c1f6 in duckdb::Catalog::TryLookupEntry (this=0x55555729b130, context=..., type=duckdb::CatalogType::TYPE_ENTRY, schema=\"main\", name=\"t4\",\r\n    if_not_found=duckdb::OnEntryNotFound::RETURN_NULL, error_context=...) at /home/luy70/Desktop/DBMSs/duckdb/src/catalog/catalog.cpp:607\r\n#5  0x000055555588c8c2 in duckdb::Catalog::GetEntry (this=0x55555729b130, context=..., type=<optimized out>, schema_name=\"main\", name=\"t4\", if_not_found=<optimized out>,\r\n    error_context=...) at /home/luy70/Desktop/DBMSs/duckdb/src/catalog/catalog.cpp:695\r\n#6  0x000055555588cfb4 in duckdb::Catalog::GetEntry<duckdb::TypeCatalogEntry> (error_context=..., if_not_found=duckdb::OnEntryNotFound::RETURN_NULL, name=\"t4\",\r\n    schema_name=\"main\", context=..., this=<optimized out>) at /home/luy70/Desktop/DBMSs/duckdb/src/include/duckdb/catalog/catalog.hpp:234\r\n#7  duckdb::Catalog::GetType (this=<optimized out>, context=..., schema=\"main\", name=\"t4\", if_not_found=if_not_found@entry=duckdb::OnEntryNotFound::RETURN_NULL)\r\n    at /home/luy70/Desktop/DBMSs/duckdb/src/catalog/catalog.cpp:761\r\n#8  0x0000555555e14aa9 in duckdb::Binder::BindLogicalType (context=..., type=..., catalog=..., schema=\"main\")\r\n    at /home/luy70/Desktop/DBMSs/duckdb/src/include/duckdb/common/optional_ptr.hpp:43\r\n#9  0x0000555555e14958 in duckdb::Binder::BindLogicalType (context=..., type=..., catalog=..., schema=\"main\")\r\n    at /home/luy70/Desktop/DBMSs/duckdb/src/planner/binder/statement/bind_create.cpp:230\r\n#10 0x0000555555e14afb in duckdb::Binder::BindLogicalType (context=..., type=..., catalog=..., schema=\"main\")\r\n    at /home/luy70/Desktop/DBMSs/duckdb/src/planner/binder/statement/bind_create.cpp:258\r\n#11 0x0000555555e14958 in duckdb::Binder::BindLogicalType (context=..., type=..., catalog=..., schema=\"main\")\r\n    at /home/luy70/Desktop/DBMSs/duckdb/src/planner/binder/statement/bind_create.cpp:230\r\n#12 0x0000555555e14afb in duckdb::Binder::BindLogicalType (context=..., type=..., catalog=..., schema=\"main\")\r\n    at /home/luy70/Desktop/DBMSs/duckdb/src/planner/binder/statement/bind_create.cpp:258\r\n#13 0x0000555555e14958 in duckdb::Binder::BindLogicalType (context=..., type=..., catalog=..., schema=\"main\")\r\n    at /home/luy70/Desktop/DBMSs/duckdb/src/planner/binder/statement/bind_create.cpp:230\r\n#14 0x0000555555e14afb in duckdb::Binder::BindLogicalType (context=..., type=..., catalog=..., schema=\"main\")\r\n    at /home/luy70/Desktop/DBMSs/duckdb/src/planner/binder/statement/bind_create.cpp:258\r\n... -- the same function call loop in a huge depth\r\n#23792 0x0000555555e14afb in duckdb::Binder::BindLogicalType (context=..., type=..., catalog=..., schema=\"main\")\r\n    at /home/luy70/Desktop/DBMSs/duckdb/src/planner/binder/statement/bind_create.cpp:258\r\n#23793 0x0000555555e1469b in duckdb::Binder::BindLogicalType (context=..., type=..., catalog=..., schema=\"main\")\r\n    at /home/luy70/Desktop/DBMSs/duckdb/src/planner/binder/statement/bind_create.cpp:214\r\n#23794 0x000055555622b6a7 in duckdb::DuckTableEntry::ChangeColumnType (this=0x5555572aa0a0, context=..., info=...)\r\n    at /home/luy70/Desktop/DBMSs/duckdb/src/include/duckdb/common/optional_ptr.hpp:21\r\n#23795 0x000055555622c540 in duckdb::DuckTableEntry::AlterEntry (this=0x5555572aa0a0, context=..., info=...)\r\n    at /home/luy70/Desktop/DBMSs/duckdb/src/catalog/catalog_entry/duck_table_entry.cpp:192\r\n#23796 0x000055555588e687 in duckdb::CatalogSet::AlterEntry (this=this@entry=0x555557298c08, transaction=..., name=\"v2\", alter_info=...)\r\n    at /home/luy70/Desktop/DBMSs/duckdb/src/include/duckdb/common/optional_ptr.hpp:43\r\n#23797 0x00005555562212e1 in duckdb::DuckSchemaEntry::Alter (this=0x555557298ba0, context=..., info=...)\r\n    at /home/luy70/Desktop/DBMSs/duckdb/src/catalog/catalog_entry/duck_schema_entry.cpp:250\r\n#23798 0x000055555588c780 in duckdb::Catalog::Alter (this=0x55555729b130, context=..., info=...)\r\n    at /home/luy70/Desktop/DBMSs/duckdb/src/include/duckdb/common/optional_ptr.hpp:43\r\n#23799 0x000055555643bc09 in duckdb::PhysicalAlter::GetData (this=0x55555729a530, context=..., chunk=..., input=...)\r\n    at /home/luy70/Desktop/DBMSs/duckdb/src/include/duckdb/common/unique_ptr.hpp:19\r\n#23800 0x0000555555c7dbc0 in duckdb::PipelineExecutor::FetchFromSource (this=0x55555729db30, result=...)\r\n    at /home/luy70/Desktop/DBMSs/duckdb/src/parallel/pipeline_executor.cpp:560\r\n#23801 0x0000555555c82ea3 in duckdb::PipelineExecutor::ExecutePull (this=0x55555729db30, result=...)\r\n    at /home/luy70/Desktop/DBMSs/duckdb/src/parallel/pipeline_executor.cpp:372\r\n#23802 0x0000555555c83021 in duckdb::Executor::FetchChunk (this=0x55555729d5d0) at /usr/include/c++/9/bits/unique_ptr.h:360\r\n#23803 0x0000555555c3fef1 in duckdb::ClientContext::FetchInternal (this=0x5555572995a0, lock=..., executor=..., result=...)\r\n    at /home/luy70/Desktop/DBMSs/duckdb/src/main/client_context.cpp:99\r\n#23804 0x0000555555c4069e in duckdb::ClientContext::FetchResultInternal (this=0x5555572995a0, lock=..., pending=...)\r\n    at /home/luy70/Desktop/DBMSs/duckdb/src/main/client_context.cpp:270\r\n#23805 0x0000555555c41352 in duckdb::PendingQueryResult::ExecuteInternal (this=0x5555572a84a0, lock=...) at /usr/include/c++/9/bits/shared_ptr_base.h:1020\r\n#23806 0x0000555555c41414 in duckdb::PendingQueryResult::Execute (this=0x5555572a84a0) at /home/luy70/Desktop/DBMSs/duckdb/src/include/duckdb/common/unique_ptr.hpp:19\r\n#23807 0x0000555555c43548 in duckdb::PreparedStatement::Execute (this=<optimized out>, values=..., allow_stream_result=allow_stream_result@entry=0x0)\r\n    at /home/luy70/Desktop/DBMSs/duckdb/src/include/duckdb/common/unique_ptr.hpp:38\r\n#23808 0x00005555558401f6 in duckdb_shell_sqlite3_print_duckbox (pStmt=0x5555572aad70, max_rows=0x28, max_width=0x0, null_value=0x7fffffffcbc4 \"\", columnar=0x0)\r\n    at /home/luy70/Desktop/DBMSs/duckdb/src/include/duckdb/common/unique_ptr.hpp:38\r\n#23809 0x0000555555829afb in exec_prepared_stmt (pArg=0x7fffffffcab0, pStmt=0x5555572aad70) at /home/luy70/Desktop/DBMSs/duckdb/tools/shell/shell.c:12904\r\n#23810 0x000055555582acc5 in shell_exec (pArg=<optimized out>, zSql=<optimized out>, pzErrMsg=0x7fffffffc8a8)\r\n    at /home/luy70/Desktop/DBMSs/duckdb/tools/shell/shell.c:13239\r\n#23811 0x000055555582c9fd in runOneSqlLine (p=0x7fffffffcab0, zSql=0x55555719e740 \"ALTER TABLE v2 ALTER c3 SET DATA TYPE ROW ( c3 t4 ); \", in=0x0, startline=0x7)\r\n    at /home/luy70/Desktop/DBMSs/duckdb/tools/shell/shell.c:19658\r\n#23812 0x0000555555835099 in process_input (p=0x7fffffffcab0) at /home/luy70/Desktop/DBMSs/duckdb/tools/shell/shell.c:19776\r\n#23813 0x0000555555815148 in main (argc=argc@entry=0x1, argv=argv@entry=0x7fffffffdde8) at /home/luy70/Desktop/DBMSs/duckdb/tools/shell/shell.c:20594\r\n#23814 0x00007ffff7a6f083 in __libc_start_main (main=0x555555814510 <main>, argc=0x1, argv=0x7fffffffdde8, init=<optimized out>, fini=<optimized out>,\r\n    rtld_fini=<optimized out>, stack_end=0x7fffffffddd8) at ../csu/libc-start.c:308\r\n#23815 0x000055555581879e in _start () at /usr/include/x86_64-linux-gnu/bits/stdio2.h:100\r\n```\r\n\n\n### To Reproduce\n\n1. Clone the DuckDB Git from the official repo.\r\n2. Checkout to either the latest main or release version: `v0.9.2`.\r\n3. Compile the DuckDB binary by using either make reldebug or make debug.\r\n4. Run the compiled DuckDB and input the following SQL:\r\n\r\n```sql\r\nCREATE TABLE v0 ( c1 INT); \r\nCREATE TABLE v2 ( c3 INT); \r\nCREATE TYPE t4 AS UNION ( v0 SETOF t4 ); \r\nALTER TABLE v2 ALTER c3 SET DATA TYPE ROW ( c3 t4 ); \r\n```\r\n\r\n5. Observe and log the crash information.\n\n### OS:\n\nUbuntu 20.04 LTS\n\n### DuckDB Version:\n\nv0.9.2\n\n### DuckDB Client:\n\nDuckDB official command line host\n\n### Full Name:\n\nYu Liang\n\n### Affiliation:\n\nThe Pennsylvania State University\n\n### Have you tried this on the latest `main` branch?\n\nI have tested with a main build\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] Yes, I have\n",
  "hints_text": "",
  "created_at": "2024-01-08T14:50:31Z"
}