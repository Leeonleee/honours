{
  "repo": "duckdb/duckdb",
  "pull_number": 9518,
  "instance_id": "duckdb__duckdb-9518",
  "issue_numbers": [
    "4182"
  ],
  "base_commit": "173a690d18058ca1021b3241653eec27d07eb2df",
  "patch": "diff --git a/extension/parquet/column_writer.cpp b/extension/parquet/column_writer.cpp\nindex 7303945591b2..fd942695bbd1 100644\n--- a/extension/parquet/column_writer.cpp\n+++ b/extension/parquet/column_writer.cpp\n@@ -644,6 +644,11 @@ void BasicColumnWriter::SetParquetStatistics(BasicColumnWriterState &state,\n \t\tcolumn_chunk.meta_data.statistics.__isset.max_value = true;\n \t\tcolumn_chunk.meta_data.__isset.statistics = true;\n \t}\n+\tif (HasDictionary(state)) {\n+\t\tcolumn_chunk.meta_data.statistics.distinct_count = DictionarySize(state);\n+\t\tcolumn_chunk.meta_data.statistics.__isset.distinct_count = true;\n+\t\tcolumn_chunk.meta_data.__isset.statistics = true;\n+\t}\n \tfor (const auto &write_info : state.write_info) {\n \t\tcolumn_chunk.meta_data.encodings.push_back(write_info.page_header.data_page_header.encoding);\n \t}\n@@ -1274,7 +1279,6 @@ class StringColumnWriter : public BasicColumnWriter {\n \t\tidx_t run_count = 0;\n \t\tauto strings = FlatVector::GetData<string_t>(vector);\n \t\tfor (idx_t i = 0; i < vcount; i++) {\n-\n \t\t\tif (parent && !parent->is_empty.empty() && parent->is_empty[parent_index + i]) {\n \t\t\t\tcontinue;\n \t\t\t}\n",
  "test_patch": "diff --git a/test/sql/copy/parquet/writer/parquet_write_string_distinct.test b/test/sql/copy/parquet/writer/parquet_write_string_distinct.test\nnew file mode 100644\nindex 000000000000..96cbbeb4d521\n--- /dev/null\n+++ b/test/sql/copy/parquet/writer/parquet_write_string_distinct.test\n@@ -0,0 +1,16 @@\n+# name: test/sql/copy/parquet/writer/parquet_write_string_distinct.test\n+# description: Write distinct stats for strings\n+# group: [writer]\n+\n+require parquet\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+statement ok\n+COPY (SELECT 'hello' FROM range(10)) TO '__TEST_DIR__/string_dict.parquet';\n+\n+query I\n+SELECT stats_distinct_count FROM parquet_metadata('__TEST_DIR__/string_dict.parquet');\n+----\n+1\n",
  "problem_statement": "Distinct stat is not written to parquet metadata\n#### What happens?\r\nWhen writing a table to a parquet file, the distinct stat is not set.\r\n\r\n#### To Reproduce\r\n```\r\nCREATE TABLE TEST(A int);\r\nINSERT INTO TEST VALUES(0);\r\nCOPY (SELECT * FROM TEST) TO 'test.parquet' (FORMAT 'parquet');\r\nSELECT * FROM parquet_metadata('test.parquet');\r\n```\r\nInspect the \"stats_distinct_count\" column.\r\n\r\n#### Environment (please complete the following information):\r\n - OS: Ubuntu 20.04.4 LTS\r\n - DuckDB Version: v0.4.0 da9ee490d\r\n - DuckDB Client: CLI\r\n\r\n#### Identity Disclosure:\r\n - Full Name: Halvor Linder Henriksen \r\n - Affiliation: Huawei\r\n\n",
  "hints_text": "In order to write the exact distinct count to parquet files we would need to run a `count(distinct(col))` for every column, which is very expensive.\r\n\r\nDuckDB only stores an approximate distinct count for base tables, which it potentially could write to the parquet metadata. However, this could have some bad consequences if the parquet file is then read by a parquet reader that assumes this distinct count to be accurate.\nWe could likely set it for dictionary-encoded string columns, since we know the distinct count from the dictionary.\nit will be nice to have it, it is better to pay a price for write then for read later:) \nThis issue is stale because it has been open 90 days with no activity. Remove stale label or comment or this will be closed in 30 days.\nThis issue is stale because it has been open 90 days with no activity. Remove stale label or comment or this will be closed in 30 days.",
  "created_at": "2023-10-30T14:44:39Z"
}