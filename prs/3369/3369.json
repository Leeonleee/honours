{
  "repo": "duckdb/duckdb",
  "pull_number": 3369,
  "instance_id": "duckdb__duckdb-3369",
  "issue_numbers": [
    "3367",
    "3367"
  ],
  "base_commit": "4fefffeac3e9b76755bf74319b7a7c06ae404b3e",
  "patch": "diff --git a/src/optimizer/statistics/expression/propagate_and_compress.cpp b/src/optimizer/statistics/expression/propagate_and_compress.cpp\nindex a11e186f8d9b..3f309b16d5fe 100644\n--- a/src/optimizer/statistics/expression/propagate_and_compress.cpp\n+++ b/src/optimizer/statistics/expression/propagate_and_compress.cpp\n@@ -6,6 +6,7 @@\n #include \"duckdb/planner/expression/bound_function_expression.hpp\"\n #include \"duckdb/storage/statistics/base_statistics.hpp\"\n #include \"duckdb/storage/statistics/numeric_statistics.hpp\"\n+#include \"duckdb/common/operator/subtract.hpp\"\n \n namespace duckdb {\n \n@@ -69,23 +70,21 @@ unique_ptr<Expression> TemplatedCastToSmallestType(unique_ptr<Expression> expr,\n \t\treturn expr;\n \t}\n \n-\t// Prevent signed integer overflow - we can't range map these\n-\tif (std::is_signed<T>() && signed_min_val < -((T)1 << (sizeof(T) * 8 - 2)) &&\n-\t    signed_max_val > ((T)1 << (sizeof(T) * 8 - 2))) {\n+\t// Compute range, cast to unsigned to prevent comparing signed with unsigned\n+\tT signed_range;\n+\tif (!TrySubtractOperator::Operation(signed_min_val, signed_max_val, signed_range)) {\n+\t\t// overflow in subtraction: cannot do any simplification\n \t\treturn expr;\n \t}\n-\n-\t// Compute range, cast to unsigned to prevent comparing signed with unsigned\n-\tauto signed_range = signed_max_val - signed_min_val;\n \tauto range = static_cast<typename std::make_unsigned<decltype(signed_range)>::type>(signed_range);\n \n \t// Check if this range fits in a smaller type\n \tLogicalType cast_type;\n-\tif (range < NumericLimits<uint8_t>().Maximum()) {\n+\tif (range < NumericLimits<uint8_t>::Maximum()) {\n \t\tcast_type = LogicalType::UTINYINT;\n-\t} else if (sizeof(T) > sizeof(uint16_t) && range < NumericLimits<uint16_t>().Maximum()) {\n+\t} else if (sizeof(T) > sizeof(uint16_t) && range < NumericLimits<uint16_t>::Maximum()) {\n \t\tcast_type = LogicalType::USMALLINT;\n-\t} else if (sizeof(T) > sizeof(uint32_t) && range < NumericLimits<uint32_t>().Maximum()) {\n+\t} else if (sizeof(T) > sizeof(uint32_t) && range < NumericLimits<uint32_t>::Maximum()) {\n \t\tcast_type = LogicalType::UINTEGER;\n \t} else {\n \t\treturn expr;\n",
  "test_patch": "diff --git a/test/issues/fuzz/stats_propagation_overflow.test b/test/issues/fuzz/stats_propagation_overflow.test\nnew file mode 100644\nindex 000000000000..3ab2751c3a03\n--- /dev/null\n+++ b/test/issues/fuzz/stats_propagation_overflow.test\n@@ -0,0 +1,21 @@\n+# name: test/issues/fuzz/stats_propagation_overflow.test\n+# description: Issue #3367: signed integer overflow at propagate_and_compress.cpp:79:37\n+# group: [fuzz]\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+statement ok\n+CREATE TABLE test(a BIGINT);\n+\n+statement ok\n+INSERT INTO test VALUES(-5361272612100082873);\n+\n+statement ok\n+INSERT INTO test VALUES(3877673001272535186);\n+\n+query I\n+SELECT a FROM test ORDER BY 1;\n+----\n+-5361272612100082873\n+3877673001272535186\n",
  "problem_statement": "signed integer overflow at propagate_and_compress.cpp:79:37\n#### What happens?\r\n```\r\n/root/duckdb/src/optimizer/statistics/expression/propagate_and_compress.cpp:79:37: runtime error: signed integer overflow: 3877673001272535186 - -5361272612100082873 cannot be represented in type 'long'\r\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior /root/duckdb/src/optimizer/statistics/expression/propagate_and_compress.cpp:79:37 in\r\n```\r\n\r\n#### To Reproduce\r\n```sql\r\nCREATE TABLE test(a BIGINT);\r\nINSERT INTO test VALUES(-5361272612100082873);\r\nINSERT INTO test VALUES(3877673001272535186);\r\nSELECT a FROM test ORDER BY 1;\r\n```\r\n\r\n#### Environment (please complete the following information):\r\n - OS: linux\r\n - DuckDB Version: v0.3.3-dev1399 7c5ba6c0e\r\n - DuckDB Client: /usr/local/bin/duckdb\r\n\r\n#### Before Submitting\r\n\r\n- [x] **Have you tried this on the latest `master` branch?**\r\n* **Python**: `pip install duckdb --upgrade --pre`\r\n* **R**: `install.packages(\"https://github.com/duckdb/duckdb/releases/download/master-builds/duckdb_r_src.tar.gz\", repos = NULL)`\r\n* **Other Platforms**: You can find binaries [here](https://github.com/duckdb/duckdb/releases/tag/master-builds) or compile from source.\r\n\r\n- [x] **Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?**\r\n\nsigned integer overflow at propagate_and_compress.cpp:79:37\n#### What happens?\r\n```\r\n/root/duckdb/src/optimizer/statistics/expression/propagate_and_compress.cpp:79:37: runtime error: signed integer overflow: 3877673001272535186 - -5361272612100082873 cannot be represented in type 'long'\r\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior /root/duckdb/src/optimizer/statistics/expression/propagate_and_compress.cpp:79:37 in\r\n```\r\n\r\n#### To Reproduce\r\n```sql\r\nCREATE TABLE test(a BIGINT);\r\nINSERT INTO test VALUES(-5361272612100082873);\r\nINSERT INTO test VALUES(3877673001272535186);\r\nSELECT a FROM test ORDER BY 1;\r\n```\r\n\r\n#### Environment (please complete the following information):\r\n - OS: linux\r\n - DuckDB Version: v0.3.3-dev1399 7c5ba6c0e\r\n - DuckDB Client: /usr/local/bin/duckdb\r\n\r\n#### Before Submitting\r\n\r\n- [x] **Have you tried this on the latest `master` branch?**\r\n* **Python**: `pip install duckdb --upgrade --pre`\r\n* **R**: `install.packages(\"https://github.com/duckdb/duckdb/releases/download/master-builds/duckdb_r_src.tar.gz\", repos = NULL)`\r\n* **Other Platforms**: You can find binaries [here](https://github.com/duckdb/duckdb/releases/tag/master-builds) or compile from source.\r\n\r\n- [x] **Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?**\r\n\n",
  "hints_text": "\n",
  "created_at": "2022-04-03T10:08:05Z"
}