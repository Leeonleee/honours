You will be provided with a partial code base and an issue statement explaining a problem to resolve.
In your output, give nothing but the code (no markdown) so that your output can be copy pasted and run immediately with no changes

<issue>
signed integer overflow at propagate_and_compress.cpp:79:37
#### What happens?
```
/root/duckdb/src/optimizer/statistics/expression/propagate_and_compress.cpp:79:37: runtime error: signed integer overflow: 3877673001272535186 - -5361272612100082873 cannot be represented in type 'long'
SUMMARY: UndefinedBehaviorSanitizer: undefined-behavior /root/duckdb/src/optimizer/statistics/expression/propagate_and_compress.cpp:79:37 in
```

#### To Reproduce
```sql
CREATE TABLE test(a BIGINT);
INSERT INTO test VALUES(-5361272612100082873);
INSERT INTO test VALUES(3877673001272535186);
SELECT a FROM test ORDER BY 1;
```

#### Environment (please complete the following information):
 - OS: linux
 - DuckDB Version: v0.3.3-dev1399 7c5ba6c0e
 - DuckDB Client: /usr/local/bin/duckdb

#### Before Submitting

- [x] **Have you tried this on the latest `master` branch?**
* **Python**: `pip install duckdb --upgrade --pre`
* **R**: `install.packages("https://github.com/duckdb/duckdb/releases/download/master-builds/duckdb_r_src.tar.gz", repos = NULL)`
* **Other Platforms**: You can find binaries [here](https://github.com/duckdb/duckdb/releases/tag/master-builds) or compile from source.

- [x] **Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?**

signed integer overflow at propagate_and_compress.cpp:79:37
#### What happens?
```
/root/duckdb/src/optimizer/statistics/expression/propagate_and_compress.cpp:79:37: runtime error: signed integer overflow: 3877673001272535186 - -5361272612100082873 cannot be represented in type 'long'
SUMMARY: UndefinedBehaviorSanitizer: undefined-behavior /root/duckdb/src/optimizer/statistics/expression/propagate_and_compress.cpp:79:37 in
```

#### To Reproduce
```sql
CREATE TABLE test(a BIGINT);
INSERT INTO test VALUES(-5361272612100082873);
INSERT INTO test VALUES(3877673001272535186);
SELECT a FROM test ORDER BY 1;
```

#### Environment (please complete the following information):
 - OS: linux
 - DuckDB Version: v0.3.3-dev1399 7c5ba6c0e
 - DuckDB Client: /usr/local/bin/duckdb

#### Before Submitting

- [x] **Have you tried this on the latest `master` branch?**
* **Python**: `pip install duckdb --upgrade --pre`
* **R**: `install.packages("https://github.com/duckdb/duckdb/releases/download/master-builds/duckdb_r_src.tar.gz", repos = NULL)`
* **Other Platforms**: You can find binaries [here](https://github.com/duckdb/duckdb/releases/tag/master-builds) or compile from source.

- [x] **Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?**


</issue>
<code>
[start of README.md]
1: <div align="center">
2:   <img src="https://duckdb.org/images/DuckDB_Logo_dl.png" height="50">
3: </div>
4: <p>&nbsp;</p>
5: 
6: <p align="center">
7:   <a href="https://github.com/duckdb/duckdb/actions">
8:     <img src="https://github.com/cwida/duckdb/workflows/.github/workflows/main.yml/badge.svg?branch=master" alt=".github/workflows/main.yml">
9:   </a>
10:   <a href="https://www.codefactor.io/repository/github/cwida/duckdb">
11:     <img src="https://www.codefactor.io/repository/github/cwida/duckdb/badge" alt="CodeFactor"/>
12:   </a>
13:   <a href="https://app.codecov.io/gh/duckdb/duckdb">
14:     <img src="https://codecov.io/gh/duckdb/duckdb/branch/master/graph/badge.svg?token=FaxjcfFghN" alt="codecov"/>
15:   </a>
16:   <a href="https://discord.gg/tcvwpjfnZx">
17:     <img src="https://shields.io/discord/909674491309850675" alt="discord" />
18:   </a>
19: </p>
20: 
21: ## DuckDB
22: DuckDB is a high-performance analytical database system. It is designed to be fast, reliable and easy to use. DuckDB provides a rich SQL dialect, with support far beyond basic SQL. DuckDB supports arbitrary and nested correlated subqueries, window functions, collations, complex types (arrays, structs), and more. For more information on the goals of DuckDB, please refer to [the Why DuckDB page on our website](https://duckdb.org/why_duckdb).
23: 
24: ## Installation
25: If you want to install and use DuckDB, please see [our website](https://www.duckdb.org) for installation and usage instructions.
26: 
27: ## Data Import
28: For CSV files and Parquet files, data import is as simple as referencing the file in the FROM clause:
29: 
30: ```sql
31: SELECT * FROM 'myfile.csv';
32: SELECT * FROM 'myfile.parquet';
33: ```
34: 
35: Refer to our [Data Import](https://duckdb.org/docs/data/overview) section for more information.
36: 
37: ## SQL Reference
38: The [website](https://duckdb.org/docs/sql/introduction) contains a reference of functions and SQL constructs available in DuckDB.
39: 
40: ## Development
41: For development, DuckDB requires [CMake](https://cmake.org), Python3 and a `C++11` compliant compiler. Run `make` in the root directory to compile the sources. For development, use `make debug` to build a non-optimized debug version. You should run `make unit` and `make allunit` to verify that your version works properly after making changes. To test performance, you can run several standard benchmarks from the root directory by executing `./build/release/benchmark/benchmark_runner`.
42: 
43: Please also refer to our [Contribution Guide](CONTRIBUTING.md).
44: 
45: 
[end of README.md]
[start of src/optimizer/statistics/expression/propagate_and_compress.cpp]
1: #include "duckdb/function/scalar/operators.hpp"
2: #include "duckdb/optimizer/statistics_propagator.hpp"
3: #include "duckdb/planner/bound_result_modifier.hpp"
4: #include "duckdb/planner/expression/bound_cast_expression.hpp"
5: #include "duckdb/planner/expression/bound_constant_expression.hpp"
6: #include "duckdb/planner/expression/bound_function_expression.hpp"
7: #include "duckdb/storage/statistics/base_statistics.hpp"
8: #include "duckdb/storage/statistics/numeric_statistics.hpp"
9: 
10: namespace duckdb {
11: 
12: unique_ptr<Expression> CastHugeintToSmallestType(unique_ptr<Expression> expr, NumericStatistics &num_stats) {
13: 	// Compute range
14: 	if (num_stats.min.IsNull() || num_stats.max.IsNull()) {
15: 		return expr;
16: 	}
17: 
18: 	auto min_val = num_stats.min.GetValue<hugeint_t>();
19: 	auto max_val = num_stats.max.GetValue<hugeint_t>();
20: 	if (max_val < min_val) {
21: 		return expr;
22: 	}
23: 
24: 	// Prevent overflow
25: 	if (min_val < NumericLimits<int64_t>().Minimum() && max_val > NumericLimits<int64_t>().Maximum()) {
26: 		return expr;
27: 	}
28: 
29: 	// Compute range
30: 	auto range = max_val - min_val;
31: 
32: 	// Check if this range fits in a smaller type
33: 	LogicalType cast_type;
34: 	if (range < NumericLimits<uint8_t>().Maximum()) {
35: 		cast_type = LogicalType::UTINYINT;
36: 	} else if (range < NumericLimits<uint16_t>().Maximum()) {
37: 		cast_type = LogicalType::USMALLINT;
38: 	} else if (range < NumericLimits<uint32_t>().Maximum()) {
39: 		cast_type = LogicalType::UINTEGER;
40: 	} else if (range < NumericLimits<uint64_t>().Maximum()) {
41: 		cast_type = LogicalTypeId::UBIGINT;
42: 	} else {
43: 		return expr;
44: 	}
45: 
46: 	// Create expression to map to a smaller range
47: 	auto input_type = expr->return_type;
48: 	auto minimum_expr = make_unique<BoundConstantExpression>(Value::CreateValue(min_val));
49: 	vector<unique_ptr<Expression>> arguments;
50: 	arguments.push_back(move(expr));
51: 	arguments.push_back(move(minimum_expr));
52: 	auto minus_expr = make_unique<BoundFunctionExpression>(input_type, SubtractFun::GetFunction(input_type, input_type),
53: 	                                                       move(arguments), nullptr, true);
54: 
55: 	// Cast to smaller type
56: 	return make_unique<BoundCastExpression>(move(minus_expr), cast_type);
57: }
58: 
59: template <class T>
60: unique_ptr<Expression> TemplatedCastToSmallestType(unique_ptr<Expression> expr, NumericStatistics &num_stats) {
61: 	// Compute range
62: 	if (num_stats.min.IsNull() || num_stats.max.IsNull()) {
63: 		return expr;
64: 	}
65: 
66: 	auto signed_min_val = num_stats.min.GetValue<T>();
67: 	auto signed_max_val = num_stats.max.GetValue<T>();
68: 	if (signed_max_val < signed_min_val) {
69: 		return expr;
70: 	}
71: 
72: 	// Prevent signed integer overflow - we can't range map these
73: 	if (std::is_signed<T>() && signed_min_val < -((T)1 << (sizeof(T) * 8 - 2)) &&
74: 	    signed_max_val > ((T)1 << (sizeof(T) * 8 - 2))) {
75: 		return expr;
76: 	}
77: 
78: 	// Compute range, cast to unsigned to prevent comparing signed with unsigned
79: 	auto signed_range = signed_max_val - signed_min_val;
80: 	auto range = static_cast<typename std::make_unsigned<decltype(signed_range)>::type>(signed_range);
81: 
82: 	// Check if this range fits in a smaller type
83: 	LogicalType cast_type;
84: 	if (range < NumericLimits<uint8_t>().Maximum()) {
85: 		cast_type = LogicalType::UTINYINT;
86: 	} else if (sizeof(T) > sizeof(uint16_t) && range < NumericLimits<uint16_t>().Maximum()) {
87: 		cast_type = LogicalType::USMALLINT;
88: 	} else if (sizeof(T) > sizeof(uint32_t) && range < NumericLimits<uint32_t>().Maximum()) {
89: 		cast_type = LogicalType::UINTEGER;
90: 	} else {
91: 		return expr;
92: 	}
93: 
94: 	// Create expression to map to a smaller range
95: 	auto input_type = expr->return_type;
96: 	auto minimum_expr = make_unique<BoundConstantExpression>(Value::CreateValue(signed_min_val));
97: 	vector<unique_ptr<Expression>> arguments;
98: 	arguments.push_back(move(expr));
99: 	arguments.push_back(move(minimum_expr));
100: 	auto minus_expr = make_unique<BoundFunctionExpression>(input_type, SubtractFun::GetFunction(input_type, input_type),
101: 	                                                       move(arguments), nullptr, true);
102: 
103: 	// Cast to smaller type
104: 	return make_unique<BoundCastExpression>(move(minus_expr), cast_type);
105: }
106: 
107: unique_ptr<Expression> CastToSmallestType(unique_ptr<Expression> expr, NumericStatistics &num_stats) {
108: 	auto physical_type = expr->return_type.InternalType();
109: 	switch (physical_type) {
110: 	case PhysicalType::UINT8:
111: 	case PhysicalType::INT8:
112: 		return expr;
113: 	case PhysicalType::UINT16:
114: 		return TemplatedCastToSmallestType<uint16_t>(move(expr), num_stats);
115: 	case PhysicalType::INT16:
116: 		return TemplatedCastToSmallestType<int16_t>(move(expr), num_stats);
117: 	case PhysicalType::UINT32:
118: 		return TemplatedCastToSmallestType<uint32_t>(move(expr), num_stats);
119: 	case PhysicalType::INT32:
120: 		return TemplatedCastToSmallestType<int32_t>(move(expr), num_stats);
121: 	case PhysicalType::UINT64:
122: 		return TemplatedCastToSmallestType<uint64_t>(move(expr), num_stats);
123: 	case PhysicalType::INT64:
124: 		return TemplatedCastToSmallestType<int64_t>(move(expr), num_stats);
125: 	case PhysicalType::INT128:
126: 		return CastHugeintToSmallestType(move(expr), num_stats);
127: 	default:
128: 		throw NotImplementedException("Unknown integer type!");
129: 	}
130: }
131: 
132: void StatisticsPropagator::PropagateAndCompress(unique_ptr<Expression> &expr, unique_ptr<BaseStatistics> &stats) {
133: 	stats = PropagateExpression(expr);
134: 	if (stats) {
135: 		if (expr->return_type.IsIntegral()) {
136: 			expr = CastToSmallestType(move(expr), (NumericStatistics &)*stats);
137: 		}
138: 	}
139: }
140: 
141: } // namespace duckdb
[end of src/optimizer/statistics/expression/propagate_and_compress.cpp]
</code>
Here is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.
<patch>
--- a/file.cpp
+++ b/file.cpp
@@ -3,35 +3,44 @@
 #include <cstdlib>
 
 int euclidean(int a, int b) {
-    while (b) {
-        int temp = b;
-        b = a % b;
-        a = temp;
+    if (b == 0) {
+        return a;
     }
-    return a;
+    return euclidean(b, a % b);
 }
 
 std::vector<std::pair<int, int>> bresenham(int x0, int y0, int x1, int y1) {
     std::vector<std::pair<int, int>> points;
     int dx = abs(x1 - x0);
     int dy = abs(y1 - y0);
+    int x = x0, y = y0;
     int sx = (x0 < x1) ? 1 : -1;
     int sy = (y0 < y1) ? 1 : -1;
-    int err = dx - dy;
 
-    while (true) {
-        points.emplace_back(x0, y0);
-        if (x0 == x1 && y0 == y1) break;
-        int e2 = 2 * err;
-        if (e2 > -dy) {
+    if (dx > dy) {
+        int err = dx / 2;
+        while (x != x1) {
+            points.emplace_back(x, y);
             err -= dy;
-            x0 += sx;
+            if (err < 0) {
+                y += sy;
+                err += dx;
+            }
+            x += sx;
         }
-        if (e2 < dx) {
-            err += dx;
-            y0 += sy;
+    } else {
+        int err = dy / 2;
+        while (y != y1) {
+            points.emplace_back(x, y);
+            err -= dx;
+            if (err < 0) {
+                x += sx;
+                err += dy;
+            }
+            y += sy;
         }
     }
 
+    points.emplace_back(x, y);
     return points;
 }

</patch>

I need you to solve the provided issue by generating a single patch file that I can apply directly to this repository using git apply.
Please respond with a single patch file in the format shown above.
Make sure to only include the patch file contents so that the contents of your output can be copied into a patch file and applied directly

Respond below: