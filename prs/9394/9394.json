{
  "repo": "duckdb/duckdb",
  "pull_number": 9394,
  "instance_id": "duckdb__duckdb-9394",
  "issue_numbers": [
    "7999",
    "7999"
  ],
  "base_commit": "c6b0182b300f0b1212abe7f33550ded6687b1ebf",
  "patch": "diff --git a/tools/pythonpkg/src/pyconnection.cpp b/tools/pythonpkg/src/pyconnection.cpp\nindex 8161276ccf5a..2e46b858cd6d 100644\n--- a/tools/pythonpkg/src/pyconnection.cpp\n+++ b/tools/pythonpkg/src/pyconnection.cpp\n@@ -47,6 +47,7 @@\n #include \"duckdb_python/pybind11/conversions/exception_handling_enum.hpp\"\n #include \"duckdb/parser/parsed_data/drop_info.hpp\"\n #include \"duckdb/catalog/catalog_entry/scalar_function_catalog_entry.hpp\"\n+#include \"duckdb/main/pending_query_result.hpp\"\n \n #include <random>\n \n@@ -448,7 +449,11 @@ unique_ptr<QueryResult> DuckDBPyConnection::ExecuteInternal(const string &query,\n \t\t// if there are multiple statements, we directly execute the statements besides the last one\n \t\t// we only return the result of the last statement to the user, unless one of the previous statements fails\n \t\tfor (idx_t i = 0; i + 1 < statements.size(); i++) {\n-\t\t\t// TODO: this doesn't take in any prepared parameters?\n+\t\t\tif (statements[i]->n_param != 0) {\n+\t\t\t\tthrow NotImplementedException(\n+\t\t\t\t    \"Prepared parameters are only supported for the last statement, please split your query up into \"\n+\t\t\t\t    \"separate 'execute' calls if you want to use prepared parameters\");\n+\t\t\t}\n \t\t\tauto pending_query = connection->PendingQuery(std::move(statements[i]), false);\n \t\t\tauto res = CompletePendingQuery(*pending_query);\n \n",
  "test_patch": "diff --git a/tools/pythonpkg/tests/fast/api/test_duckdb_execute.py b/tools/pythonpkg/tests/fast/api/test_duckdb_execute.py\nnew file mode 100644\nindex 000000000000..5e365c8fee7f\n--- /dev/null\n+++ b/tools/pythonpkg/tests/fast/api/test_duckdb_execute.py\n@@ -0,0 +1,38 @@\n+import duckdb\n+import pytest\n+\n+\n+class TestDuckDBExecute(object):\n+    def test_execute_basic(self, duckdb_cursor):\n+        duckdb_cursor.execute('create table t as select 5')\n+        res = duckdb_cursor.table('t').fetchall()\n+        assert res == [(5,)]\n+\n+    def test_execute_many_basic(self, duckdb_cursor):\n+        duckdb_cursor.execute(\"create table t(x int);\")\n+\n+        # This works because prepared parameter is only present in the last statement\n+        duckdb_cursor.execute(\n+            \"\"\"\n+\t\t\tdelete from t where x=5;\n+\t\t\tinsert into t(x) values($1);\n+\t\t\"\"\",\n+            (99,),\n+        )\n+        res = duckdb_cursor.table('t').fetchall()\n+        assert res == [(99,)]\n+\n+    def test_execute_many_error(self, duckdb_cursor):\n+        duckdb_cursor.execute(\"create table t(x int);\")\n+\n+        # Prepared parameter used in a statement that is not the last\n+        with pytest.raises(\n+            duckdb.NotImplementedException, match='Prepared parameters are only supported for the last statement'\n+        ):\n+            duckdb_cursor.execute(\n+                \"\"\"\n+\t\t\t\tdelete from t where x=$1;\n+\t\t\t\tinsert into t(x) values($1);\n+\t\t\t\"\"\",\n+                (99,),\n+            )\n",
  "problem_statement": "Python cursor.execute() fails if $1 is used twice in query string\n### What happens?\n\nExecuting this string where $1 is used twice:\r\n```\r\n    delete from t where x=$1;\r\n    insert into t(x) values($1);\r\n```\r\nproduces this error:\r\n```\r\nduckdb.InvalidInputException: Invalid Input Error: Attempting to execute an unsuccessful or closed pending query result\r\nError: Invalid Error: Expected 1 parameters, but none were supplied\r\n```\n\n### To Reproduce\n\n```\r\n#!/usr/bin/env python3\r\n\r\nimport duckdb\r\ncurs=duckdb.connect().cursor()\r\ncurs.execute(\"create table t(x int);\")\r\n\r\n# works\r\ncurs.execute(\"\"\"delete from t where x=$1;\r\n             \"\"\", (99,))\r\n\r\n# works\r\ncurs.execute(\"\"\"insert into t(x) values($1);\r\n             \"\"\", (99,))\r\n\r\n# fails\r\ncurs.execute(\r\n    \"\"\"\r\n    delete from t where x=$1;\r\n    insert into t(x) values($1);\r\n    \"\"\", (99,))\r\n\r\n#  File \"/Users/marhar/g/private/fullview/./duckbug.py\", line 15, in <module>\r\n#    curs.execute(\r\n# duckdb.InvalidInputException: Invalid Input Error: Attempting to execute an unsuccessful or closed pending query result\r\n# Error: Invalid Error: Expected 1 parameters, but none were supplied\r\n```\n\n### OS:\n\nMacOS\n\n### DuckDB Version:\n\n0.8.1\n\n### DuckDB Client:\n\nPython\n\n### Full Name:\n\nMark Harrison\n\n### Affiliation:\n\nTigerEye\n\n### Have you tried this on the latest `master` branch?\n\n- [X] I agree\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] I agree\nPython cursor.execute() fails if $1 is used twice in query string\n### What happens?\n\nExecuting this string where $1 is used twice:\r\n```\r\n    delete from t where x=$1;\r\n    insert into t(x) values($1);\r\n```\r\nproduces this error:\r\n```\r\nduckdb.InvalidInputException: Invalid Input Error: Attempting to execute an unsuccessful or closed pending query result\r\nError: Invalid Error: Expected 1 parameters, but none were supplied\r\n```\n\n### To Reproduce\n\n```\r\n#!/usr/bin/env python3\r\n\r\nimport duckdb\r\ncurs=duckdb.connect().cursor()\r\ncurs.execute(\"create table t(x int);\")\r\n\r\n# works\r\ncurs.execute(\"\"\"delete from t where x=$1;\r\n             \"\"\", (99,))\r\n\r\n# works\r\ncurs.execute(\"\"\"insert into t(x) values($1);\r\n             \"\"\", (99,))\r\n\r\n# fails\r\ncurs.execute(\r\n    \"\"\"\r\n    delete from t where x=$1;\r\n    insert into t(x) values($1);\r\n    \"\"\", (99,))\r\n\r\n#  File \"/Users/marhar/g/private/fullview/./duckbug.py\", line 15, in <module>\r\n#    curs.execute(\r\n# duckdb.InvalidInputException: Invalid Input Error: Attempting to execute an unsuccessful or closed pending query result\r\n# Error: Invalid Error: Expected 1 parameters, but none were supplied\r\n```\n\n### OS:\n\nMacOS\n\n### DuckDB Version:\n\n0.8.1\n\n### DuckDB Client:\n\nPython\n\n### Full Name:\n\nMark Harrison\n\n### Affiliation:\n\nTigerEye\n\n### Have you tried this on the latest `master` branch?\n\n- [X] I agree\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] I agree\n",
  "hints_text": "Thanks for raising the issue\r\nThe issue is related to them being separate statements, not that $1 is used twice in the query string.\r\n\r\nThis is currently expected but not intended behavior, we should at least throw a more descriptive error until support for this is added.\nThanks for raising the issue\r\nThe issue is related to them being separate statements, not that $1 is used twice in the query string.\r\n\r\nThis is currently expected but not intended behavior, we should at least throw a more descriptive error until support for this is added.",
  "created_at": "2023-10-19T11:53:53Z"
}