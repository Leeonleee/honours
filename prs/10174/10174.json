{
  "repo": "duckdb/duckdb",
  "pull_number": 10174,
  "instance_id": "duckdb__duckdb-10174",
  "issue_numbers": [
    "10090"
  ],
  "base_commit": "dfc1d1b7feee0fecf056ca700848249c2c09e851",
  "patch": "diff --git a/tools/pythonpkg/src/include/duckdb_python/python_objects.hpp b/tools/pythonpkg/src/include/duckdb_python/python_objects.hpp\nindex 5ef4a4bb4cb7..9fbc2fcc733a 100644\n--- a/tools/pythonpkg/src/include/duckdb_python/python_objects.hpp\n+++ b/tools/pythonpkg/src/include/duckdb_python/python_objects.hpp\n@@ -196,6 +196,7 @@ struct PyTimezone {\n \n struct PythonObject {\n \tstatic void Initialize();\n+\tstatic py::object FromStruct(const Value &value, const LogicalType &id, const ClientProperties &client_properties);\n \tstatic py::object FromValue(const Value &value, const LogicalType &id, const ClientProperties &client_properties);\n };\n \ndiff --git a/tools/pythonpkg/src/native/python_objects.cpp b/tools/pythonpkg/src/native/python_objects.cpp\nindex 80c45cac5d8b..48f79f1fa287 100644\n--- a/tools/pythonpkg/src/native/python_objects.cpp\n+++ b/tools/pythonpkg/src/native/python_objects.cpp\n@@ -367,6 +367,32 @@ InfinityType GetTimestampInfinityType(timestamp_t &timestamp) {\n \treturn InfinityType::NONE;\n }\n \n+py::object PythonObject::FromStruct(const Value &val, const LogicalType &type,\n+                                    const ClientProperties &client_properties) {\n+\tauto &struct_values = StructValue::GetChildren(val);\n+\n+\tauto &child_types = StructType::GetChildTypes(type);\n+\tif (StructType::IsUnnamed(type)) {\n+\t\tpy::tuple py_tuple(struct_values.size());\n+\t\tfor (idx_t i = 0; i < struct_values.size(); i++) {\n+\t\t\tauto &child_entry = child_types[i];\n+\t\t\tD_ASSERT(child_entry.first.empty());\n+\t\t\tauto &child_type = child_entry.second;\n+\t\t\tpy_tuple[i] = FromValue(struct_values[i], child_type, client_properties);\n+\t\t}\n+\t\treturn std::move(py_tuple);\n+\t} else {\n+\t\tpy::dict py_struct;\n+\t\tfor (idx_t i = 0; i < struct_values.size(); i++) {\n+\t\t\tauto &child_entry = child_types[i];\n+\t\t\tauto &child_name = child_entry.first;\n+\t\t\tauto &child_type = child_entry.second;\n+\t\t\tpy_struct[child_name.c_str()] = FromValue(struct_values[i], child_type, client_properties);\n+\t\t}\n+\t\treturn std::move(py_struct);\n+\t}\n+}\n+\n py::object PythonObject::FromValue(const Value &val, const LogicalType &type,\n                                    const ClientProperties &client_properties) {\n \tauto &import_cache = *DuckDBPyConnection::ImportCache();\n@@ -508,17 +534,7 @@ py::object PythonObject::FromValue(const Value &val, const LogicalType &type,\n \t\treturn std::move(py_struct);\n \t}\n \tcase LogicalTypeId::STRUCT: {\n-\t\tauto &struct_values = StructValue::GetChildren(val);\n-\n-\t\tpy::dict py_struct;\n-\t\tauto &child_types = StructType::GetChildTypes(type);\n-\t\tfor (idx_t i = 0; i < struct_values.size(); i++) {\n-\t\t\tauto &child_entry = child_types[i];\n-\t\t\tauto &child_name = child_entry.first;\n-\t\t\tauto &child_type = child_entry.second;\n-\t\t\tpy_struct[child_name.c_str()] = FromValue(struct_values[i], child_type, client_properties);\n-\t\t}\n-\t\treturn std::move(py_struct);\n+\t\treturn FromStruct(val, type, client_properties);\n \t}\n \tcase LogicalTypeId::UUID: {\n \t\tauto uuid_value = val.GetValueUnsafe<hugeint_t>();\n",
  "test_patch": "diff --git a/tools/pythonpkg/tests/fast/types/test_nested.py b/tools/pythonpkg/tests/fast/types/test_nested.py\nindex dcfc7dc71f30..efeacbeea042 100644\n--- a/tools/pythonpkg/tests/fast/types/test_nested.py\n+++ b/tools/pythonpkg/tests/fast/types/test_nested.py\n@@ -3,47 +3,51 @@\n \n class TestNested(object):\n     def test_lists(self, duckdb_cursor):\n-        duckdb_conn = duckdb.connect()\n-        result = duckdb_conn.execute(\"SELECT LIST_VALUE(1, 2, 3, 4) \").fetchall()\n+        result = duckdb_cursor.execute(\"SELECT LIST_VALUE(1, 2, 3, 4) \").fetchall()\n         assert result == [([1, 2, 3, 4],)]\n \n-        result = duckdb_conn.execute(\"SELECT LIST_VALUE() \").fetchall()\n+        result = duckdb_cursor.execute(\"SELECT LIST_VALUE() \").fetchall()\n         assert result == [([],)]\n \n-        result = duckdb_conn.execute(\"SELECT LIST_VALUE(1, 2, 3, NULL) \").fetchall()\n+        result = duckdb_cursor.execute(\"SELECT LIST_VALUE(1, 2, 3, NULL) \").fetchall()\n         assert result == [([1, 2, 3, None],)]\n \n     def test_nested_lists(self, duckdb_cursor):\n-        duckdb_conn = duckdb.connect()\n-        result = duckdb_conn.execute(\"SELECT LIST_VALUE(LIST_VALUE(1, 2, 3, 4), LIST_VALUE(1, 2, 3, 4)) \").fetchall()\n+        result = duckdb_cursor.execute(\"SELECT LIST_VALUE(LIST_VALUE(1, 2, 3, 4), LIST_VALUE(1, 2, 3, 4)) \").fetchall()\n         assert result == [([[1, 2, 3, 4], [1, 2, 3, 4]],)]\n \n-        result = duckdb_conn.execute(\"SELECT LIST_VALUE(LIST_VALUE(1, 2, 3, 4), LIST_VALUE(1, 2, 3, NULL)) \").fetchall()\n+        result = duckdb_cursor.execute(\n+            \"SELECT LIST_VALUE(LIST_VALUE(1, 2, 3, 4), LIST_VALUE(1, 2, 3, NULL)) \"\n+        ).fetchall()\n         assert result == [([[1, 2, 3, 4], [1, 2, 3, None]],)]\n \n     def test_struct(self, duckdb_cursor):\n-        duckdb_conn = duckdb.connect()\n-        result = duckdb_conn.execute(\"SELECT STRUCT_PACK(a := 42, b := 43)\").fetchall()\n+        result = duckdb_cursor.execute(\"SELECT STRUCT_PACK(a := 42, b := 43)\").fetchall()\n         assert result == [({'a': 42, 'b': 43},)]\n \n-        result = duckdb_conn.execute(\"SELECT STRUCT_PACK(a := 42, b := NULL)\").fetchall()\n+        result = duckdb_cursor.execute(\"SELECT STRUCT_PACK(a := 42, b := NULL)\").fetchall()\n         assert result == [({'a': 42, 'b': None},)]\n \n+    def test_unnamed_struct(self, duckdb_cursor):\n+        result = duckdb_cursor.execute(\"SELECT row('aa','bb') AS x\").fetchall()\n+        assert result == [(('aa', 'bb'),)]\n+\n+        result = duckdb_cursor.execute(\"SELECT row('aa',NULL) AS x\").fetchall()\n+        assert result == [(('aa', None),)]\n+\n     def test_nested_struct(self, duckdb_cursor):\n-        duckdb_conn = duckdb.connect()\n-        result = duckdb_conn.execute(\"SELECT STRUCT_PACK(a := 42, b := LIST_VALUE(10, 9, 8, 7))\").fetchall()\n+        result = duckdb_cursor.execute(\"SELECT STRUCT_PACK(a := 42, b := LIST_VALUE(10, 9, 8, 7))\").fetchall()\n         assert result == [({'a': 42, 'b': [10, 9, 8, 7]},)]\n \n-        result = duckdb_conn.execute(\"SELECT STRUCT_PACK(a := 42, b := LIST_VALUE(10, 9, 8, NULL))\").fetchall()\n+        result = duckdb_cursor.execute(\"SELECT STRUCT_PACK(a := 42, b := LIST_VALUE(10, 9, 8, NULL))\").fetchall()\n         assert result == [({'a': 42, 'b': [10, 9, 8, None]},)]\n \n     def test_map(self, duckdb_cursor):\n-        duckdb_conn = duckdb.connect()\n-        result = duckdb_conn.execute(\"select MAP(LIST_VALUE(1, 2, 3, 4),LIST_VALUE(10, 9, 8, 7))\").fetchall()\n+        result = duckdb_cursor.execute(\"select MAP(LIST_VALUE(1, 2, 3, 4),LIST_VALUE(10, 9, 8, 7))\").fetchall()\n         assert result == [({'key': [1, 2, 3, 4], 'value': [10, 9, 8, 7]},)]\n \n-        result = duckdb_conn.execute(\"select MAP(LIST_VALUE(1, 2, 3, 4),LIST_VALUE(10, 9, 8, NULL))\").fetchall()\n+        result = duckdb_cursor.execute(\"select MAP(LIST_VALUE(1, 2, 3, 4),LIST_VALUE(10, 9, 8, NULL))\").fetchall()\n         assert result == [({'key': [1, 2, 3, 4], 'value': [10, 9, 8, None]},)]\n \n-        result = duckdb_conn.execute(\"SELECT MAP() \").fetchall()\n+        result = duckdb_cursor.execute(\"SELECT MAP() \").fetchall()\n         assert result == [({'key': [], 'value': []},)]\n",
  "problem_statement": "`row` function returns a struct with a single blank key and value of last argument\n### What happens?\r\n\r\nSee example\r\n\r\n\r\n![image](https://github.com/duckdb/duckdb/assets/1071969/8eb1eb6e-0bee-4916-a36a-75cfd0e76036)\r\n\r\n\r\n\r\nvs\r\n\r\n\r\n![image](https://github.com/duckdb/duckdb/assets/1071969/554cb441-dfad-45f6-9dfc-bcffcb71f3d2)\r\n\r\n\r\n### To Reproduce\r\n\r\n```\r\nSELECT row(a, b) as x \r\nFROM (VALUES ('aa', 'bb')) T(a, b);\r\n```\r\n\r\n### OS:\r\n\r\nmacos\r\n\r\n### DuckDB Version:\r\n\r\n0.9.2\r\n\r\n### DuckDB Client:\r\n\r\npython\r\n\r\n### Full Name:\r\n\r\nMichal\r\n\r\n### Affiliation:\r\n\r\nNa\r\n\r\n### Have you tried this on the latest `main` branch?\r\n\r\nI have tested with a main build\r\n\r\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\r\n\r\n- [X] Yes, I have\n",
  "hints_text": "",
  "created_at": "2024-01-09T08:20:24Z"
}