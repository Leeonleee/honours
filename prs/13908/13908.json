{
  "repo": "duckdb/duckdb",
  "pull_number": 13908,
  "instance_id": "duckdb__duckdb-13908",
  "issue_numbers": [
    "13905"
  ],
  "base_commit": "9af117f0e6d3f2f9ade385dadc46807c1b388dd4",
  "patch": "diff --git a/src/common/types/bit.cpp b/src/common/types/bit.cpp\nindex ebd4ec3ac6e8..f263c2c42975 100644\n--- a/src/common/types/bit.cpp\n+++ b/src/common/types/bit.cpp\n@@ -180,7 +180,7 @@ void Bit::BitToBlob(string_t bit, string_t &output_blob) {\n \tidx_t size = output_blob.GetSize();\n \n \toutput[0] = UnsafeNumericCast<char>(GetFirstByte(bit));\n-\tif (size > 2) {\n+\tif (size >= 2) {\n \t\t++output;\n \t\t// First byte in bitstring contains amount of padded bits,\n \t\t// second byte in bitstring is the padded byte,\n",
  "test_patch": "diff --git a/test/sql/cast/test_bit_cast.test b/test/sql/cast/test_bit_cast.test\nindex 421ce022e688..76582943af74 100644\n--- a/test/sql/cast/test_bit_cast.test\n+++ b/test/sql/cast/test_bit_cast.test\n@@ -196,6 +196,16 @@ SELECT '1111'::BIT::BLOB;\n ----\n \\x0F\n \n+query I\n+select 'ab'::BLOB::BIT::BLOB;\n+----\n+ab\n+\n+query I\n+select 'a'::BLOB::BIT::BLOB;\n+----\n+a\n+\n query I\n SELECT bitstring('1111', 33)::BLOB;\n ----\n",
  "problem_statement": "Inconsistent results when casting `BIT` and `VARBINARY`\n### What happens?\n\nConsider the following test case generated by my fuzzer. The second query and the third query could have inconsistent results. I suppose the second query should be consistently `true,true` and the third query should thus be `ab,cd`. \n\n### To Reproduce\n\n```sql\r\nCREATE TABLE  t1(c0 VARBINARY NOT NULL);\r\nINSERT INTO t1(c0) VALUES ('ab'), ('cd');\r\n-- INSERT INTO t1(c0) VALUES ('\ud83e\udd86'); -- error\r\n-- INSERT INTO t1(c0) VALUES (NULL); -- error\r\n\r\nSELECT t1.c0 FROM t1; -- 'ab', 'cd'\r\nSELECT ((CAST(CAST(t1.c0 AS BIT) AS VARBINARY))<=(t1.c0)) FROM t1; -- true, true (incosistent, could sometimes be false, false)\r\nSELECT t1.c0 FROM t1 WHERE ((CAST(CAST(t1.c0 AS BIT) AS VARBINARY))<=(t1.c0));\r\n-- Expected: 'ab', 'cd' (2 rows)\r\n-- Actual: could be 0 row, 1 row or 2 rows\r\n```\r\n\r\nNot sure if the two `INSERT` are needed. Sometimes I could also reproduce it without executing them, but sometimes can't.\r\n\r\nKindly inform me if it's an expected behavior and whether you could reproduce the issue.\n\n### OS:\n\nubuntu 22.04\n\n### DuckDB Version:\n\nv1.1.1-dev100 9af117f0e6\n\n### DuckDB Client:\n\nCLI\n\n### Hardware:\n\n_No response_\n\n### Full Name:\n\nSuyang Zhong\n\n### Affiliation:\n\nNUS\n\n### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.\n\nI have tested with a source build\n\n### Did you include all relevant data sets for reproducing the issue?\n\nYes\n\n### Did you include all code required to reproduce the issue?\n\n- [X] Yes, I have\n\n### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?\n\n- [X] Yes, I have\n",
  "hints_text": "The use of `VARBINARY` confused me a bit, `BLOB` is more commonly used for this type\r\nAlso `col::BIT` can be used in place of `CAST(col AS BIT)` to make this easier to read, especially with multiple casts taking place",
  "created_at": "2024-09-12T15:55:51Z"
}