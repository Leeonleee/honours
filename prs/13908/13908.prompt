You will be provided with a partial code base and an issue statement explaining a problem to resolve.
In your output, give nothing but the code (no markdown) so that your output can be copy pasted and run immediately with no changes.
In the patch file, please make sure to include the line numbers and a blank line at the end so it can be applied using git apply.

<issue>
Inconsistent results when casting `BIT` and `VARBINARY`
### What happens?

Consider the following test case generated by my fuzzer. The second query and the third query could have inconsistent results. I suppose the second query should be consistently `true,true` and the third query should thus be `ab,cd`. 

### To Reproduce

```sql
CREATE TABLE  t1(c0 VARBINARY NOT NULL);
INSERT INTO t1(c0) VALUES ('ab'), ('cd');
-- INSERT INTO t1(c0) VALUES ('ðŸ¦†'); -- error
-- INSERT INTO t1(c0) VALUES (NULL); -- error

SELECT t1.c0 FROM t1; -- 'ab', 'cd'
SELECT ((CAST(CAST(t1.c0 AS BIT) AS VARBINARY))<=(t1.c0)) FROM t1; -- true, true (incosistent, could sometimes be false, false)
SELECT t1.c0 FROM t1 WHERE ((CAST(CAST(t1.c0 AS BIT) AS VARBINARY))<=(t1.c0));
-- Expected: 'ab', 'cd' (2 rows)
-- Actual: could be 0 row, 1 row or 2 rows
```

Not sure if the two `INSERT` are needed. Sometimes I could also reproduce it without executing them, but sometimes can't.

Kindly inform me if it's an expected behavior and whether you could reproduce the issue.

### OS:

ubuntu 22.04

### DuckDB Version:

v1.1.1-dev100 9af117f0e6

### DuckDB Client:

CLI

### Hardware:

_No response_

### Full Name:

Suyang Zhong

### Affiliation:

NUS

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have tested with a source build

### Did you include all relevant data sets for reproducing the issue?

Yes

### Did you include all code required to reproduce the issue?

- [X] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [X] Yes, I have

</issue>
<code>
[start of README.md]
1: <div align="center">
2:   <picture>
3:     <source media="(prefers-color-scheme: light)" srcset="logo/DuckDB_Logo-horizontal.svg">
4:     <source media="(prefers-color-scheme: dark)" srcset="logo/DuckDB_Logo-horizontal-dark-mode.svg">
5:     <img alt="DuckDB logo" src="logo/DuckDB_Logo-horizontal.svg" height="100">
6:   </picture>
7: </div>
8: <br>
9: 
10: <p align="center">
11:   <a href="https://github.com/duckdb/duckdb/actions"><img src="https://github.com/duckdb/duckdb/actions/workflows/Main.yml/badge.svg?branch=main" alt="Github Actions Badge"></a>
12:   <a href="https://discord.gg/tcvwpjfnZx"><img src="https://shields.io/discord/909674491309850675" alt="discord" /></a>
13:   <a href="https://github.com/duckdb/duckdb/releases/"><img src="https://img.shields.io/github/v/release/duckdb/duckdb?color=brightgreen&display_name=tag&logo=duckdb&logoColor=white" alt="Latest Release"></a>
14: </p>
15: 
16: ## DuckDB
17: 
18: DuckDB is a high-performance analytical database system. It is designed to be fast, reliable, portable, and easy to use. DuckDB provides a rich SQL dialect, with support far beyond basic SQL. DuckDB supports arbitrary and nested correlated subqueries, window functions, collations, complex types (arrays, structs, maps), and [several extensions designed to make SQL easier to use](https://duckdb.org/docs/guides/sql_features/friendly_sql).
19: 
20: DuckDB is available as a [standalone CLI application](https://duckdb.org/docs/api/cli/overview) and has clients for [Python](https://duckdb.org/docs/api/python/overview), [R](https://duckdb.org/docs/api/r), [Java](https://duckdb.org/docs/api/java), [Wasm](https://duckdb.org/docs/api/wasm/overview), etc., with deep integrations with packages such as [pandas](https://duckdb.org/docs/guides/python/sql_on_pandas) and [dplyr](https://duckdblabs.github.io/duckplyr/).
21: 
22: For more information on using DuckDB, please refer to the [DuckDB documentation](https://duckdb.org/docs/).
23: 
24: ## Installation
25: 
26: If you want to install DuckDB, please see [our installation page](https://duckdb.org/docs/installation) for instructions.
27: 
28: ## Data Import
29: 
30: For CSV files and Parquet files, data import is as simple as referencing the file in the FROM clause:
31: 
32: ```sql
33: SELECT * FROM 'myfile.csv';
34: SELECT * FROM 'myfile.parquet';
35: ```
36: 
37: Refer to our [Data Import](https://duckdb.org/docs/data/overview) section for more information.
38: 
39: ## SQL Reference
40: 
41: The documentation contains a [SQL introduction and reference](https://duckdb.org/docs/sql/introduction).
42: 
43: ## Development
44: 
45: For development, DuckDB requires [CMake](https://cmake.org), Python3 and a `C++11` compliant compiler. Run `make` in the root directory to compile the sources. For development, use `make debug` to build a non-optimized debug version. You should run `make unit` and `make allunit` to verify that your version works properly after making changes. To test performance, you can run `BUILD_BENCHMARK=1 BUILD_TPCH=1 make` and then perform several standard benchmarks from the root directory by executing `./build/release/benchmark/benchmark_runner`. The details of benchmarks are in our [Benchmark Guide](benchmark/README.md).
46: 
47: Please also refer to our [Build Guide](https://duckdb.org/dev/building) and [Contribution Guide](CONTRIBUTING.md).
48: 
49: ## Support
50: 
51: See the [Support Options](https://duckdblabs.com/support/) page.
[end of README.md]
[start of src/common/types/bit.cpp]
1: #include "duckdb/common/assert.hpp"
2: #include "duckdb/common/numeric_utils.hpp"
3: #include "duckdb/common/operator/cast_operators.hpp"
4: #include "duckdb/common/typedefs.hpp"
5: #include "duckdb/common/types/bit.hpp"
6: #include "duckdb/common/types/string_type.hpp"
7: 
8: namespace duckdb {
9: 
10: // **** helper functions ****
11: static char ComputePadding(idx_t len) {
12: 	return UnsafeNumericCast<char>((8 - (len % 8)) % 8);
13: }
14: 
15: idx_t Bit::ComputeBitstringLen(idx_t len) {
16: 	idx_t result = len / 8;
17: 	if (len % 8 != 0) {
18: 		result++;
19: 	}
20: 	// additional first byte to store info on zero padding
21: 	result++;
22: 	return result;
23: }
24: 
25: static inline idx_t GetBitPadding(const string_t &bit_string) {
26: 	auto data = const_data_ptr_cast(bit_string.GetData());
27: 	D_ASSERT(idx_t(data[0]) <= 8);
28: 	return data[0];
29: }
30: 
31: static inline idx_t GetBitSize(const string_t &str) {
32: 	string error_message;
33: 	idx_t str_len;
34: 	if (!Bit::TryGetBitStringSize(str, str_len, &error_message)) {
35: 		throw ConversionException(error_message);
36: 	}
37: 	return str_len;
38: }
39: 
40: uint8_t Bit::GetFirstByte(const string_t &str) {
41: 	D_ASSERT(str.GetSize() > 1);
42: 
43: 	auto data = const_data_ptr_cast(str.GetData());
44: 	return data[1] & ((1 << (8 - data[0])) - 1);
45: }
46: 
47: void Bit::Finalize(string_t &str) {
48: 	// bit strings require all padding bits to be set to 1
49: 	// this method sets all padding bits to 1
50: 	auto padding = GetBitPadding(str);
51: 	for (idx_t i = 0; i < idx_t(padding); i++) {
52: 		Bit::SetBitInternal(str, i, 1);
53: 	}
54: 	str.Finalize();
55: 	Bit::Verify(str);
56: }
57: 
58: void Bit::SetEmptyBitString(string_t &target, string_t &input) {
59: 	char *res_buf = target.GetDataWriteable();
60: 	const char *buf = input.GetData();
61: 	memset(res_buf, 0, input.GetSize());
62: 	res_buf[0] = buf[0];
63: 	Bit::Finalize(target);
64: }
65: 
66: void Bit::SetEmptyBitString(string_t &target, idx_t len) {
67: 	char *res_buf = target.GetDataWriteable();
68: 	memset(res_buf, 0, target.GetSize());
69: 	res_buf[0] = ComputePadding(len);
70: 	Bit::Finalize(target);
71: }
72: 
73: // **** casting functions ****
74: void Bit::ToString(string_t bits, char *output) {
75: 	auto data = const_data_ptr_cast(bits.GetData());
76: 	auto len = bits.GetSize();
77: 
78: 	idx_t padding = GetBitPadding(bits);
79: 	idx_t output_idx = 0;
80: 	for (idx_t bit_idx = padding; bit_idx < 8; bit_idx++) {
81: 		output[output_idx++] = data[1] & (1 << (7 - bit_idx)) ? '1' : '0';
82: 	}
83: 	for (idx_t byte_idx = 2; byte_idx < len; byte_idx++) {
84: 		for (idx_t bit_idx = 0; bit_idx < 8; bit_idx++) {
85: 			output[output_idx++] = data[byte_idx] & (1 << (7 - bit_idx)) ? '1' : '0';
86: 		}
87: 	}
88: }
89: 
90: string Bit::ToString(string_t str) {
91: 	auto len = BitLength(str);
92: 	auto buffer = make_unsafe_uniq_array_uninitialized<char>(len);
93: 	ToString(str, buffer.get());
94: 	return string(buffer.get(), len);
95: }
96: 
97: bool Bit::TryGetBitStringSize(string_t str, idx_t &str_len, string *error_message) {
98: 	auto data = const_data_ptr_cast(str.GetData());
99: 	auto len = str.GetSize();
100: 	str_len = 0;
101: 	for (idx_t i = 0; i < len; i++) {
102: 		if (data[i] == '0' || data[i] == '1') {
103: 			str_len++;
104: 		} else {
105: 			string error = StringUtil::Format("Invalid character encountered in string -> bit conversion: '%s'",
106: 			                                  string(const_char_ptr_cast(data) + i, 1));
107: 			HandleCastError::AssignError(error, error_message);
108: 			return false;
109: 		}
110: 	}
111: 	if (str_len == 0) {
112: 		string error = "Cannot cast empty string to BIT";
113: 		HandleCastError::AssignError(error, error_message);
114: 		return false;
115: 	}
116: 	str_len = ComputeBitstringLen(str_len);
117: 	return true;
118: }
119: 
120: void Bit::ToBit(string_t str, string_t &output_str) {
121: 	auto data = const_data_ptr_cast(str.GetData());
122: 	auto len = str.GetSize();
123: 	auto output = output_str.GetDataWriteable();
124: 
125: 	char byte = 0;
126: 	idx_t padded_byte = len % 8;
127: 	for (idx_t i = 0; i < padded_byte; i++) {
128: 		byte <<= 1;
129: 		if (data[i] == '1') {
130: 			byte |= 1;
131: 		}
132: 	}
133: 	if (padded_byte != 0) {
134: 		*(output++) = UnsafeNumericCast<char>((8 - padded_byte)); // the first byte contains the number of padded zeroes
135: 	}
136: 	*(output++) = byte;
137: 
138: 	for (idx_t byte_idx = padded_byte; byte_idx < len; byte_idx += 8) {
139: 		byte = 0;
140: 		for (idx_t bit_idx = 0; bit_idx < 8; bit_idx++) {
141: 			byte <<= 1;
142: 			if (data[byte_idx + bit_idx] == '1') {
143: 				byte |= 1;
144: 			}
145: 		}
146: 		*(output++) = byte;
147: 	}
148: 	Bit::Finalize(output_str);
149: }
150: 
151: string Bit::ToBit(string_t str) {
152: 	auto bit_len = GetBitSize(str);
153: 	auto buffer = make_unsafe_uniq_array_uninitialized<char>(bit_len);
154: 	string_t output_str(buffer.get(), UnsafeNumericCast<uint32_t>(bit_len));
155: 	Bit::ToBit(str, output_str);
156: 	return output_str.GetString();
157: }
158: 
159: void Bit::BlobToBit(string_t blob, string_t &output_str) {
160: 	auto data = const_data_ptr_cast(blob.GetData());
161: 	auto output = output_str.GetDataWriteable();
162: 	idx_t size = blob.GetSize();
163: 
164: 	*output = 0; // No padding
165: 	memcpy(output + 1, data, size);
166: }
167: 
168: string Bit::BlobToBit(string_t blob) {
169: 	auto buffer = make_unsafe_uniq_array_uninitialized<char>(blob.GetSize() + 1);
170: 	string_t output_str(buffer.get(), UnsafeNumericCast<uint32_t>(blob.GetSize() + 1));
171: 	Bit::BlobToBit(blob, output_str);
172: 	return output_str.GetString();
173: }
174: 
175: void Bit::BitToBlob(string_t bit, string_t &output_blob) {
176: 	D_ASSERT(bit.GetSize() == output_blob.GetSize() + 1);
177: 
178: 	auto data = const_data_ptr_cast(bit.GetData());
179: 	auto output = output_blob.GetDataWriteable();
180: 	idx_t size = output_blob.GetSize();
181: 
182: 	output[0] = UnsafeNumericCast<char>(GetFirstByte(bit));
183: 	if (size > 2) {
184: 		++output;
185: 		// First byte in bitstring contains amount of padded bits,
186: 		// second byte in bitstring is the padded byte,
187: 		// therefore the rest of the data starts at data + 2 (third byte)
188: 		memcpy(output, data + 2, size - 1);
189: 	}
190: }
191: 
192: string Bit::BitToBlob(string_t bit) {
193: 	D_ASSERT(bit.GetSize() > 1);
194: 
195: 	auto buffer = make_unsafe_uniq_array_uninitialized<char>(bit.GetSize() - 1);
196: 	string_t output_str(buffer.get(), UnsafeNumericCast<uint32_t>(bit.GetSize() - 1));
197: 	Bit::BitToBlob(bit, output_str);
198: 	return output_str.GetString();
199: }
200: 
201: // **** scalar functions ****
202: void Bit::BitString(const string_t &input, const idx_t &bit_length, string_t &result) {
203: 	char *res_buf = result.GetDataWriteable();
204: 	const char *buf = input.GetData();
205: 
206: 	auto padding = ComputePadding(bit_length);
207: 	res_buf[0] = padding;
208: 	for (idx_t i = 0; i < bit_length; i++) {
209: 		if (i < bit_length - input.GetSize()) {
210: 			Bit::SetBit(result, i, 0);
211: 		} else {
212: 			idx_t bit = buf[i - (bit_length - input.GetSize())] == '1' ? 1 : 0;
213: 			Bit::SetBit(result, i, bit);
214: 		}
215: 	}
216: 	Bit::Finalize(result);
217: }
218: 
219: idx_t Bit::BitLength(string_t bits) {
220: 	return ((bits.GetSize() - 1) * 8) - GetBitPadding(bits);
221: }
222: 
223: idx_t Bit::OctetLength(string_t bits) {
224: 	return bits.GetSize() - 1;
225: }
226: 
227: idx_t Bit::BitCount(string_t bits) {
228: 	idx_t count = 0;
229: 	const char *buf = bits.GetData();
230: 	for (idx_t byte_idx = 1; byte_idx < OctetLength(bits) + 1; byte_idx++) {
231: 		for (idx_t bit_idx = 0; bit_idx < 8; bit_idx++) {
232: 			count += (buf[byte_idx] & (1 << bit_idx)) ? 1 : 0;
233: 		}
234: 	}
235: 	return count - GetBitPadding(bits);
236: }
237: 
238: idx_t Bit::BitPosition(string_t substring, string_t bits) {
239: 	const char *buf = bits.GetData();
240: 	auto len = bits.GetSize();
241: 	auto substr_len = BitLength(substring);
242: 	idx_t substr_idx = 0;
243: 
244: 	for (idx_t bit_idx = GetBitPadding(bits); bit_idx < 8; bit_idx++) {
245: 		idx_t bit = buf[1] & (1 << (7 - bit_idx)) ? 1 : 0;
246: 		if (bit == GetBit(substring, substr_idx)) {
247: 			substr_idx++;
248: 			if (substr_idx == substr_len) {
249: 				return (bit_idx - GetBitPadding(bits)) - substr_len + 2;
250: 			}
251: 		} else {
252: 			substr_idx = 0;
253: 		}
254: 	}
255: 
256: 	for (idx_t byte_idx = 2; byte_idx < len; byte_idx++) {
257: 		for (idx_t bit_idx = 0; bit_idx < 8; bit_idx++) {
258: 			idx_t bit = buf[byte_idx] & (1 << (7 - bit_idx)) ? 1 : 0;
259: 			if (bit == GetBit(substring, substr_idx)) {
260: 				substr_idx++;
261: 				if (substr_idx == substr_len) {
262: 					return (((byte_idx - 1) * 8) + bit_idx - GetBitPadding(bits)) - substr_len + 2;
263: 				}
264: 			} else {
265: 				substr_idx = 0;
266: 			}
267: 		}
268: 	}
269: 	return 0;
270: }
271: 
272: idx_t Bit::GetBit(string_t bit_string, idx_t n) {
273: 	return Bit::GetBitInternal(bit_string, n + GetBitPadding(bit_string));
274: }
275: 
276: idx_t Bit::GetBitIndex(idx_t n) {
277: 	return n / 8 + 1;
278: }
279: 
280: idx_t Bit::GetBitInternal(string_t bit_string, idx_t n) {
281: 	const char *buf = bit_string.GetData();
282: 	auto idx = Bit::GetBitIndex(n);
283: 	D_ASSERT(idx < bit_string.GetSize());
284: 	auto byte = buf[idx] >> (7 - (n % 8));
285: 	return (byte & 1 ? 1 : 0);
286: }
287: 
288: void Bit::SetBit(string_t &bit_string, idx_t n, idx_t new_value) {
289: 	SetBitInternal(bit_string, n + GetBitPadding(bit_string), new_value);
290: 	Bit::Finalize(bit_string);
291: }
292: 
293: void Bit::SetBitInternal(string_t &bit_string, idx_t n, idx_t new_value) {
294: 	uint8_t *buf = reinterpret_cast<uint8_t *>(bit_string.GetDataWriteable());
295: 
296: 	auto idx = Bit::GetBitIndex(n);
297: 	D_ASSERT(idx < bit_string.GetSize());
298: 	auto shift_byte = UnsafeNumericCast<uint8_t>(1 << (7 - (n % 8)));
299: 	if (new_value == 0) {
300: 		shift_byte = ~shift_byte;
301: 		buf[idx] &= shift_byte;
302: 	} else {
303: 		buf[idx] |= shift_byte;
304: 	}
305: }
306: 
307: // **** BITWISE operators ****
308: void Bit::RightShift(const string_t &bit_string, const idx_t &shift, string_t &result) {
309: 	uint8_t *res_buf = reinterpret_cast<uint8_t *>(result.GetDataWriteable());
310: 	const uint8_t *buf = reinterpret_cast<const uint8_t *>(bit_string.GetData());
311: 
312: 	res_buf[0] = buf[0];
313: 	for (idx_t i = 0; i < Bit::BitLength(result); i++) {
314: 		if (i < shift) {
315: 			Bit::SetBit(result, i, 0);
316: 		} else {
317: 			idx_t bit = Bit::GetBit(bit_string, i - shift);
318: 			Bit::SetBit(result, i, bit);
319: 		}
320: 	}
321: 	Bit::Finalize(result);
322: }
323: 
324: void Bit::LeftShift(const string_t &bit_string, const idx_t &shift, string_t &result) {
325: 	uint8_t *res_buf = reinterpret_cast<uint8_t *>(result.GetDataWriteable());
326: 	const uint8_t *buf = reinterpret_cast<const uint8_t *>(bit_string.GetData());
327: 
328: 	res_buf[0] = buf[0];
329: 	for (idx_t i = 0; i < Bit::BitLength(bit_string); i++) {
330: 		if (i < (Bit::BitLength(bit_string) - shift)) {
331: 			idx_t bit = Bit::GetBit(bit_string, shift + i);
332: 			Bit::SetBit(result, i, bit);
333: 		} else {
334: 			Bit::SetBit(result, i, 0);
335: 		}
336: 	}
337: 	Bit::Finalize(result);
338: }
339: 
340: void Bit::BitwiseAnd(const string_t &rhs, const string_t &lhs, string_t &result) {
341: 	if (Bit::BitLength(lhs) != Bit::BitLength(rhs)) {
342: 		throw InvalidInputException("Cannot AND bit strings of different sizes");
343: 	}
344: 
345: 	uint8_t *buf = reinterpret_cast<uint8_t *>(result.GetDataWriteable());
346: 	const uint8_t *r_buf = reinterpret_cast<const uint8_t *>(rhs.GetData());
347: 	const uint8_t *l_buf = reinterpret_cast<const uint8_t *>(lhs.GetData());
348: 
349: 	buf[0] = l_buf[0];
350: 	for (idx_t i = 1; i < lhs.GetSize(); i++) {
351: 		buf[i] = l_buf[i] & r_buf[i];
352: 	}
353: 	Bit::Finalize(result);
354: }
355: 
356: void Bit::BitwiseOr(const string_t &rhs, const string_t &lhs, string_t &result) {
357: 	if (Bit::BitLength(lhs) != Bit::BitLength(rhs)) {
358: 		throw InvalidInputException("Cannot OR bit strings of different sizes");
359: 	}
360: 
361: 	uint8_t *buf = reinterpret_cast<uint8_t *>(result.GetDataWriteable());
362: 	const uint8_t *r_buf = reinterpret_cast<const uint8_t *>(rhs.GetData());
363: 	const uint8_t *l_buf = reinterpret_cast<const uint8_t *>(lhs.GetData());
364: 
365: 	buf[0] = l_buf[0];
366: 	for (idx_t i = 1; i < lhs.GetSize(); i++) {
367: 		buf[i] = l_buf[i] | r_buf[i];
368: 	}
369: 	Bit::Finalize(result);
370: }
371: 
372: void Bit::BitwiseXor(const string_t &rhs, const string_t &lhs, string_t &result) {
373: 	if (Bit::BitLength(lhs) != Bit::BitLength(rhs)) {
374: 		throw InvalidInputException("Cannot XOR bit strings of different sizes");
375: 	}
376: 
377: 	uint8_t *buf = reinterpret_cast<uint8_t *>(result.GetDataWriteable());
378: 	const uint8_t *r_buf = reinterpret_cast<const uint8_t *>(rhs.GetData());
379: 	const uint8_t *l_buf = reinterpret_cast<const uint8_t *>(lhs.GetData());
380: 
381: 	buf[0] = l_buf[0];
382: 	for (idx_t i = 1; i < lhs.GetSize(); i++) {
383: 		buf[i] = l_buf[i] ^ r_buf[i];
384: 	}
385: 	Bit::Finalize(result);
386: }
387: 
388: void Bit::BitwiseNot(const string_t &input, string_t &result) {
389: 	uint8_t *result_buf = reinterpret_cast<uint8_t *>(result.GetDataWriteable());
390: 	const uint8_t *buf = reinterpret_cast<const uint8_t *>(input.GetData());
391: 
392: 	result_buf[0] = buf[0];
393: 	for (idx_t i = 1; i < input.GetSize(); i++) {
394: 		result_buf[i] = ~buf[i];
395: 	}
396: 	Bit::Finalize(result);
397: }
398: 
399: void Bit::Verify(const string_t &input) {
400: #ifdef DEBUG
401: 	// bit strings require all padding bits to be set to 1
402: 	auto padding = GetBitPadding(input);
403: 	for (idx_t i = 0; i < padding; i++) {
404: 		D_ASSERT(Bit::GetBitInternal(input, i));
405: 	}
406: 	// verify bit respects the "normal" string_t rules (i.e. null padding for inlined strings, prefix matches)
407: 	input.VerifyCharacters();
408: #endif
409: }
410: 
411: } // namespace duckdb
[end of src/common/types/bit.cpp]
</code>
Here is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.
<patch>
--- a/file.cpp
+++ b/file.cpp
@@ -3,35 +3,44 @@
 #include <cstdlib>
 
 int euclidean(int a, int b) {
-    while (b) {
-        int temp = b;
-        b = a % b;
-        a = temp;
+    if (b == 0) {
+        return a;
     }
-    return a;
+    return euclidean(b, a % b);
 }
 
 std::vector<std::pair<int, int>> bresenham(int x0, int y0, int x1, int y1) {
     std::vector<std::pair<int, int>> points;
     int dx = abs(x1 - x0);
     int dy = abs(y1 - y0);
+    int x = x0, y = y0;
     int sx = (x0 < x1) ? 1 : -1;
     int sy = (y0 < y1) ? 1 : -1;
-    int err = dx - dy;
 
-    while (true) {
-        points.emplace_back(x0, y0);
-        if (x0 == x1 && y0 == y1) break;
-        int e2 = 2 * err;
-        if (e2 > -dy) {
+    if (dx > dy) {
+        int err = dx / 2;
+        while (x != x1) {
+            points.emplace_back(x, y);
             err -= dy;
-            x0 += sx;
+            if (err < 0) {
+                y += sy;
+                err += dx;
+            }
+            x += sx;
         }
-        if (e2 < dx) {
-            err += dx;
-            y0 += sy;
+    } else {
+        int err = dy / 2;
+        while (y != y1) {
+            points.emplace_back(x, y);
+            err -= dx;
+            if (err < 0) {
+                x += sx;
+                err += dy;
+            }
+            y += sy;
         }
     }
 
+    points.emplace_back(x, y);
     return points;
 }

</patch>

I need you to solve the provided issue by generating a single patch file that I can apply directly to this repository using git apply.
Please respond with a single patch file in the format shown above.
Make sure to only include the patch file contents so that the contents of your output can be copied into a patch file and applied directly

Respond below: