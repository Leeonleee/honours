diff --git a/extension/parquet/include/parquet_reader.hpp b/extension/parquet/include/parquet_reader.hpp
index 72769b9fdb5f..aa177bd31435 100644
--- a/extension/parquet/include/parquet_reader.hpp
+++ b/extension/parquet/include/parquet_reader.hpp
@@ -79,7 +79,7 @@ class ParquetReader {
 	bool ScanInternal(ParquetReaderScanState &state, DataChunk &output);
 
 	const parquet::format::RowGroup &GetGroup(ParquetReaderScanState &state);
-	void PrepareRowGroupBuffer(ParquetReaderScanState &state, idx_t col_idx);
+	void PrepareRowGroupBuffer(ParquetReaderScanState &state, idx_t out_col_idx);
 
 	template <typename... Args>
 	std::runtime_error FormatException(const string fmt_str, Args... params) {
diff --git a/extension/parquet/parquet_reader.cpp b/extension/parquet/parquet_reader.cpp
index ce4d1c79f760..c9c84663d64f 100644
--- a/extension/parquet/parquet_reader.cpp
+++ b/extension/parquet/parquet_reader.cpp
@@ -307,15 +307,16 @@ const RowGroup &ParquetReader::GetGroup(ParquetReaderScanState &state) {
 	return file_meta_data->row_groups[state.group_idx_list[state.current_group]];
 }
 
-void ParquetReader::PrepareRowGroupBuffer(ParquetReaderScanState &state, idx_t file_col_idx) {
+void ParquetReader::PrepareRowGroupBuffer(ParquetReaderScanState &state, idx_t out_col_idx) {
 	auto &group = GetGroup(state);
 
-	auto column_reader = ((StructColumnReader *)state.root_reader.get())->GetChildReader(file_col_idx);
+	auto column_reader = ((StructColumnReader *)state.root_reader.get())->GetChildReader(state.column_ids[out_col_idx]);
 
 	// TODO move this to columnreader too
 	if (state.filters) {
 		auto stats = column_reader->Stats(group.columns);
-		auto filter_entry = state.filters->filters.find(file_col_idx);
+		// filters contain output chunk index, not file col idx!
+		auto filter_entry = state.filters->filters.find(out_col_idx);
 		if (stats && filter_entry != state.filters->filters.end()) {
 			bool skip_chunk = false;
 			switch (column_reader->Type().id()) {
@@ -488,14 +489,12 @@ bool ParquetReader::ScanInternal(ParquetReaderScanState &state, DataChunk &resul
 		}
 
 		for (idx_t out_col_idx = 0; out_col_idx < result.ColumnCount(); out_col_idx++) {
-			auto file_col_idx = state.column_ids[out_col_idx];
-
 			// this is a special case where we are not interested in the actual contents of the file
-			if (file_col_idx == COLUMN_IDENTIFIER_ROW_ID) {
+			if (state.column_ids[out_col_idx] == COLUMN_IDENTIFIER_ROW_ID) {
 				continue;
 			}
 
-			PrepareRowGroupBuffer(state, file_col_idx);
+			PrepareRowGroupBuffer(state, out_col_idx);
 		}
 		return true;
 	}
diff --git a/extension/parquet/parquet_statistics.cpp b/extension/parquet/parquet_statistics.cpp
index 9d8b0403d0bd..538e70024f28 100644
--- a/extension/parquet/parquet_statistics.cpp
+++ b/extension/parquet/parquet_statistics.cpp
@@ -138,20 +138,16 @@ unique_ptr<BaseStatistics> ParquetTransformColumnStatistics(const SchemaElement
 	case LogicalTypeId::VARCHAR: {
 		auto string_stats = make_unique<StringStatistics>(type);
 		if (parquet_stats.__isset.min) {
-			memcpy(string_stats->min, (data_ptr_t)parquet_stats.min.data(),
-			       MinValue<idx_t>(parquet_stats.min.size(), StringStatistics::MAX_STRING_MINMAX_SIZE));
+			string_stats->Update(parquet_stats.min);
 		} else if (parquet_stats.__isset.min_value) {
-			memcpy(string_stats->min, (data_ptr_t)parquet_stats.min_value.data(),
-			       MinValue<idx_t>(parquet_stats.min_value.size(), StringStatistics::MAX_STRING_MINMAX_SIZE));
+			string_stats->Update(parquet_stats.min_value);
 		} else {
 			return nullptr;
 		}
 		if (parquet_stats.__isset.max) {
-			memcpy(string_stats->max, (data_ptr_t)parquet_stats.max.data(),
-			       MinValue<idx_t>(parquet_stats.max.size(), StringStatistics::MAX_STRING_MINMAX_SIZE));
+			string_stats->Update(parquet_stats.max);
 		} else if (parquet_stats.__isset.max_value) {
-			memcpy(string_stats->max, (data_ptr_t)parquet_stats.max_value.data(),
-			       MinValue<idx_t>(parquet_stats.max_value.size(), StringStatistics::MAX_STRING_MINMAX_SIZE));
+			string_stats->Update(parquet_stats.max_value);
 		} else {
 			return nullptr;
 		}
