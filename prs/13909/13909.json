{
  "repo": "duckdb/duckdb",
  "pull_number": 13909,
  "instance_id": "duckdb__duckdb-13909",
  "issue_numbers": [
    "13824",
    "13824"
  ],
  "base_commit": "9af117f0e6d3f2f9ade385dadc46807c1b388dd4",
  "patch": "diff --git a/src/core_functions/aggregate/distributive/minmax.cpp b/src/core_functions/aggregate/distributive/minmax.cpp\nindex 9c8db50bb5e3..dba09e5aa0a8 100644\n--- a/src/core_functions/aggregate/distributive/minmax.cpp\n+++ b/src/core_functions/aggregate/distributive/minmax.cpp\n@@ -4,6 +4,7 @@\n #include \"duckdb/common/vector_operations/vector_operations.hpp\"\n #include \"duckdb/common/operator/comparison_operators.hpp\"\n #include \"duckdb/common/types/null_value.hpp\"\n+#include \"duckdb/main/config.hpp\"\n #include \"duckdb/planner/expression.hpp\"\n #include \"duckdb/planner/expression/bound_comparison_expression.hpp\"\n #include \"duckdb/planner/expression_binder.hpp\"\n@@ -330,7 +331,7 @@ unique_ptr<FunctionData> BindMinMax(ClientContext &context, AggregateFunction &f\n                                     vector<unique_ptr<Expression>> &arguments) {\n \tif (arguments[0]->return_type.id() == LogicalTypeId::VARCHAR) {\n \t\tauto str_collation = StringType::GetCollation(arguments[0]->return_type);\n-\t\tif (!str_collation.empty()) {\n+\t\tif (!str_collation.empty() || !DBConfig::GetConfig(context).options.collation.empty()) {\n \t\t\t// If aggr function is min/max and uses collations, replace bound_function with arg_min/arg_max\n \t\t\t// to make sure the result's correctness.\n \t\t\tstring function_name = function.name == \"min\" ? \"arg_min\" : \"arg_max\";\n",
  "test_patch": "diff --git a/test/issues/general/test_13824.test b/test/issues/general/test_13824.test\nnew file mode 100644\nindex 000000000000..abaa64c43ce2\n--- /dev/null\n+++ b/test/issues/general/test_13824.test\n@@ -0,0 +1,37 @@\n+# name: test/issues/general/test_13824.test\n+# description: min() and max() should use default collation\n+# group: [general]\n+\n+require icu\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+statement ok\n+create table test(id int, name text)\n+\n+statement ok\n+insert into test values (1, 'a'), (2, 'b'), (3, 'c'), (4, 'A'), (5, 'G'), (6, 'd')\n+\n+query I\n+select min(name) from test\n+----\n+A\n+\n+query I\n+select max(name) from test\n+----\n+d\n+\n+statement ok\n+set default_collation = 'EN_US';\n+\n+query I\n+select min(name) from test\n+----\n+a\n+\n+query I\n+select max(name) from test\n+----\n+G\n\\ No newline at end of file\n",
  "problem_statement": "min() and max() do not respect default collation\n### What happens?\n\nThe `min()` and `max()` aggregate functions in DuckDB do not respect the default collation set using the `set default_collation = 'EN_US'`; statement. This causes the results to be different from what one would expect based on the sort order.\r\n\r\n\n\n### To Reproduce\n\n1. Create a table with some sample data:\r\n\r\n```sql\r\ncreate table test(id int, name text);\r\ninsert into test values (1, 'a'), (2, 'b'), (3, 'c'), (4, 'A'), (5, 'G'), (6, 'd');\r\n```\r\n2. Observe the default sort order\r\n```sql\r\nselect * from test order by name;\r\n```\r\n3. This returns the expected sorting:\r\n```sql\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502  id   \u2502  name   \u2502\r\n\u2502 int32 \u2502 varchar \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502     4 \u2502 A       \u2502\r\n\u2502     5 \u2502 G       \u2502\r\n\u2502     1 \u2502 a       \u2502\r\n\u2502     2 \u2502 b       \u2502\r\n\u2502     3 \u2502 c       \u2502\r\n\u2502     6 \u2502 d       \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n3. Check the min() and max() functions:\r\n```sql\r\nselect min(name) from test;\r\nselect max(name) from test;\r\n```\r\nThis also returns the expected results:\r\n\r\n```sql\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 min(\"name\") \u2502\r\n\u2502   varchar   \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 A           \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 max(\"name\") \u2502\r\n\u2502   varchar   \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 d           \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n4. Set the default collation to 'EN_US':\r\n\r\n```sql\r\nset default_collation = 'EN_US';\r\n\r\n```\r\n5. Observe the new sort order:\r\n\r\n```sql\r\nselect * from test order by name;\r\n\r\n```\r\nThis now returns a different sort order (which is expected):\r\n```sql\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502  id   \u2502  name   \u2502\r\n\u2502 int32 \u2502 varchar \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502     1 \u2502 a       \u2502\r\n\u2502     4 \u2502 A       \u2502\r\n\u2502     2 \u2502 b       \u2502\r\n\u2502     3 \u2502 c       \u2502\r\n\u2502     6 \u2502 d       \u2502\r\n\u2502     5 \u2502 G       \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n6. Check the min() and max() functions again:\r\n```sql\r\nselect min(name) from test;\r\nselect max(name) from test;\r\n```\r\nThe results are not what one would expect based on the new sort order:\r\n```sql\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 min(\"name\") \u2502\r\n\u2502   varchar   \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 A           \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 max(\"name\") \u2502\r\n\u2502   varchar   \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 d           \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\nThe `min()` should return 'a' and the `max()` should return 'G', but they are returning 'A' and 'd' respectively.\r\n\n\n### OS:\n\nUbuntu 20.04.5 LTS\n\n### DuckDB Version:\n\n1.1\n\n### DuckDB Client:\n\npython\n\n### Hardware:\n\n_No response_\n\n### Full Name:\n\nArif Aslam\n\n### Affiliation:\n\nMammoth Analytics Inc.\n\n### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.\n\nI have tested with a stable release\n\n### Did you include all relevant data sets for reproducing the issue?\n\nYes\n\n### Did you include all code required to reproduce the issue?\n\n- [X] Yes, I have\n\n### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?\n\n- [X] Yes, I have\nmin() and max() do not respect default collation\n### What happens?\n\nThe `min()` and `max()` aggregate functions in DuckDB do not respect the default collation set using the `set default_collation = 'EN_US'`; statement. This causes the results to be different from what one would expect based on the sort order.\r\n\r\n\n\n### To Reproduce\n\n1. Create a table with some sample data:\r\n\r\n```sql\r\ncreate table test(id int, name text);\r\ninsert into test values (1, 'a'), (2, 'b'), (3, 'c'), (4, 'A'), (5, 'G'), (6, 'd');\r\n```\r\n2. Observe the default sort order\r\n```sql\r\nselect * from test order by name;\r\n```\r\n3. This returns the expected sorting:\r\n```sql\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502  id   \u2502  name   \u2502\r\n\u2502 int32 \u2502 varchar \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502     4 \u2502 A       \u2502\r\n\u2502     5 \u2502 G       \u2502\r\n\u2502     1 \u2502 a       \u2502\r\n\u2502     2 \u2502 b       \u2502\r\n\u2502     3 \u2502 c       \u2502\r\n\u2502     6 \u2502 d       \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n3. Check the min() and max() functions:\r\n```sql\r\nselect min(name) from test;\r\nselect max(name) from test;\r\n```\r\nThis also returns the expected results:\r\n\r\n```sql\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 min(\"name\") \u2502\r\n\u2502   varchar   \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 A           \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 max(\"name\") \u2502\r\n\u2502   varchar   \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 d           \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n4. Set the default collation to 'EN_US':\r\n\r\n```sql\r\nset default_collation = 'EN_US';\r\n\r\n```\r\n5. Observe the new sort order:\r\n\r\n```sql\r\nselect * from test order by name;\r\n\r\n```\r\nThis now returns a different sort order (which is expected):\r\n```sql\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502  id   \u2502  name   \u2502\r\n\u2502 int32 \u2502 varchar \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502     1 \u2502 a       \u2502\r\n\u2502     4 \u2502 A       \u2502\r\n\u2502     2 \u2502 b       \u2502\r\n\u2502     3 \u2502 c       \u2502\r\n\u2502     6 \u2502 d       \u2502\r\n\u2502     5 \u2502 G       \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n6. Check the min() and max() functions again:\r\n```sql\r\nselect min(name) from test;\r\nselect max(name) from test;\r\n```\r\nThe results are not what one would expect based on the new sort order:\r\n```sql\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 min(\"name\") \u2502\r\n\u2502   varchar   \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 A           \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 max(\"name\") \u2502\r\n\u2502   varchar   \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 d           \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\nThe `min()` should return 'a' and the `max()` should return 'G', but they are returning 'A' and 'd' respectively.\r\n\n\n### OS:\n\nUbuntu 20.04.5 LTS\n\n### DuckDB Version:\n\n1.1\n\n### DuckDB Client:\n\npython\n\n### Hardware:\n\n_No response_\n\n### Full Name:\n\nArif Aslam\n\n### Affiliation:\n\nMammoth Analytics Inc.\n\n### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.\n\nI have tested with a stable release\n\n### Did you include all relevant data sets for reproducing the issue?\n\nYes\n\n### Did you include all code required to reproduce the issue?\n\n- [X] Yes, I have\n\n### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?\n\n- [X] Yes, I have\n",
  "hints_text": "\n",
  "created_at": "2024-09-12T16:27:53Z"
}