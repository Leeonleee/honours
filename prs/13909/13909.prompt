You will be provided with a partial code base and an issue statement explaining a problem to resolve.
In your output, give nothing but the code (no markdown) so that your output can be copy pasted and run immediately with no changes.
In the patch file, please make sure to include the line numbers and a blank line at the end so it can be applied using git apply.

<issue>
min() and max() do not respect default collation
### What happens?

The `min()` and `max()` aggregate functions in DuckDB do not respect the default collation set using the `set default_collation = 'EN_US'`; statement. This causes the results to be different from what one would expect based on the sort order.



### To Reproduce

1. Create a table with some sample data:

```sql
create table test(id int, name text);
insert into test values (1, 'a'), (2, 'b'), (3, 'c'), (4, 'A'), (5, 'G'), (6, 'd');
```
2. Observe the default sort order
```sql
select * from test order by name;
```
3. This returns the expected sorting:
```sql
┌───────┬─────────┐
│  id   │  name   │
│ int32 │ varchar │
├───────┼─────────┤
│     4 │ A       │
│     5 │ G       │
│     1 │ a       │
│     2 │ b       │
│     3 │ c       │
│     6 │ d       │
└───────┴─────────┘
```
3. Check the min() and max() functions:
```sql
select min(name) from test;
select max(name) from test;
```
This also returns the expected results:

```sql
┌─────────────┐
│ min("name") │
│   varchar   │
├─────────────┤
│ A           │
└─────────────┘

┌─────────────┐
│ max("name") │
│   varchar   │
├─────────────┤
│ d           │
└─────────────┘
```
4. Set the default collation to 'EN_US':

```sql
set default_collation = 'EN_US';

```
5. Observe the new sort order:

```sql
select * from test order by name;

```
This now returns a different sort order (which is expected):
```sql
┌───────┬─────────┐
│  id   │  name   │
│ int32 │ varchar │
├───────┼─────────┤
│     1 │ a       │
│     4 │ A       │
│     2 │ b       │
│     3 │ c       │
│     6 │ d       │
│     5 │ G       │
└───────┴─────────┘
```
6. Check the min() and max() functions again:
```sql
select min(name) from test;
select max(name) from test;
```
The results are not what one would expect based on the new sort order:
```sql
┌─────────────┐
│ min("name") │
│   varchar   │
├─────────────┤
│ A           │
└─────────────┘

┌─────────────┐
│ max("name") │
│   varchar   │
├─────────────┤
│ d           │
└─────────────┘
```
The `min()` should return 'a' and the `max()` should return 'G', but they are returning 'A' and 'd' respectively.


### OS:

Ubuntu 20.04.5 LTS

### DuckDB Version:

1.1

### DuckDB Client:

python

### Hardware:

_No response_

### Full Name:

Arif Aslam

### Affiliation:

Mammoth Analytics Inc.

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have tested with a stable release

### Did you include all relevant data sets for reproducing the issue?

Yes

### Did you include all code required to reproduce the issue?

- [X] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [X] Yes, I have
min() and max() do not respect default collation
### What happens?

The `min()` and `max()` aggregate functions in DuckDB do not respect the default collation set using the `set default_collation = 'EN_US'`; statement. This causes the results to be different from what one would expect based on the sort order.



### To Reproduce

1. Create a table with some sample data:

```sql
create table test(id int, name text);
insert into test values (1, 'a'), (2, 'b'), (3, 'c'), (4, 'A'), (5, 'G'), (6, 'd');
```
2. Observe the default sort order
```sql
select * from test order by name;
```
3. This returns the expected sorting:
```sql
┌───────┬─────────┐
│  id   │  name   │
│ int32 │ varchar │
├───────┼─────────┤
│     4 │ A       │
│     5 │ G       │
│     1 │ a       │
│     2 │ b       │
│     3 │ c       │
│     6 │ d       │
└───────┴─────────┘
```
3. Check the min() and max() functions:
```sql
select min(name) from test;
select max(name) from test;
```
This also returns the expected results:

```sql
┌─────────────┐
│ min("name") │
│   varchar   │
├─────────────┤
│ A           │
└─────────────┘

┌─────────────┐
│ max("name") │
│   varchar   │
├─────────────┤
│ d           │
└─────────────┘
```
4. Set the default collation to 'EN_US':

```sql
set default_collation = 'EN_US';

```
5. Observe the new sort order:

```sql
select * from test order by name;

```
This now returns a different sort order (which is expected):
```sql
┌───────┬─────────┐
│  id   │  name   │
│ int32 │ varchar │
├───────┼─────────┤
│     1 │ a       │
│     4 │ A       │
│     2 │ b       │
│     3 │ c       │
│     6 │ d       │
│     5 │ G       │
└───────┴─────────┘
```
6. Check the min() and max() functions again:
```sql
select min(name) from test;
select max(name) from test;
```
The results are not what one would expect based on the new sort order:
```sql
┌─────────────┐
│ min("name") │
│   varchar   │
├─────────────┤
│ A           │
└─────────────┘

┌─────────────┐
│ max("name") │
│   varchar   │
├─────────────┤
│ d           │
└─────────────┘
```
The `min()` should return 'a' and the `max()` should return 'G', but they are returning 'A' and 'd' respectively.


### OS:

Ubuntu 20.04.5 LTS

### DuckDB Version:

1.1

### DuckDB Client:

python

### Hardware:

_No response_

### Full Name:

Arif Aslam

### Affiliation:

Mammoth Analytics Inc.

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have tested with a stable release

### Did you include all relevant data sets for reproducing the issue?

Yes

### Did you include all code required to reproduce the issue?

- [X] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [X] Yes, I have

</issue>
<code>
[start of README.md]
1: <div align="center">
2:   <picture>
3:     <source media="(prefers-color-scheme: light)" srcset="logo/DuckDB_Logo-horizontal.svg">
4:     <source media="(prefers-color-scheme: dark)" srcset="logo/DuckDB_Logo-horizontal-dark-mode.svg">
5:     <img alt="DuckDB logo" src="logo/DuckDB_Logo-horizontal.svg" height="100">
6:   </picture>
7: </div>
8: <br>
9: 
10: <p align="center">
11:   <a href="https://github.com/duckdb/duckdb/actions"><img src="https://github.com/duckdb/duckdb/actions/workflows/Main.yml/badge.svg?branch=main" alt="Github Actions Badge"></a>
12:   <a href="https://discord.gg/tcvwpjfnZx"><img src="https://shields.io/discord/909674491309850675" alt="discord" /></a>
13:   <a href="https://github.com/duckdb/duckdb/releases/"><img src="https://img.shields.io/github/v/release/duckdb/duckdb?color=brightgreen&display_name=tag&logo=duckdb&logoColor=white" alt="Latest Release"></a>
14: </p>
15: 
16: ## DuckDB
17: 
18: DuckDB is a high-performance analytical database system. It is designed to be fast, reliable, portable, and easy to use. DuckDB provides a rich SQL dialect, with support far beyond basic SQL. DuckDB supports arbitrary and nested correlated subqueries, window functions, collations, complex types (arrays, structs, maps), and [several extensions designed to make SQL easier to use](https://duckdb.org/docs/guides/sql_features/friendly_sql).
19: 
20: DuckDB is available as a [standalone CLI application](https://duckdb.org/docs/api/cli/overview) and has clients for [Python](https://duckdb.org/docs/api/python/overview), [R](https://duckdb.org/docs/api/r), [Java](https://duckdb.org/docs/api/java), [Wasm](https://duckdb.org/docs/api/wasm/overview), etc., with deep integrations with packages such as [pandas](https://duckdb.org/docs/guides/python/sql_on_pandas) and [dplyr](https://duckdblabs.github.io/duckplyr/).
21: 
22: For more information on using DuckDB, please refer to the [DuckDB documentation](https://duckdb.org/docs/).
23: 
24: ## Installation
25: 
26: If you want to install DuckDB, please see [our installation page](https://duckdb.org/docs/installation) for instructions.
27: 
28: ## Data Import
29: 
30: For CSV files and Parquet files, data import is as simple as referencing the file in the FROM clause:
31: 
32: ```sql
33: SELECT * FROM 'myfile.csv';
34: SELECT * FROM 'myfile.parquet';
35: ```
36: 
37: Refer to our [Data Import](https://duckdb.org/docs/data/overview) section for more information.
38: 
39: ## SQL Reference
40: 
41: The documentation contains a [SQL introduction and reference](https://duckdb.org/docs/sql/introduction).
42: 
43: ## Development
44: 
45: For development, DuckDB requires [CMake](https://cmake.org), Python3 and a `C++11` compliant compiler. Run `make` in the root directory to compile the sources. For development, use `make debug` to build a non-optimized debug version. You should run `make unit` and `make allunit` to verify that your version works properly after making changes. To test performance, you can run `BUILD_BENCHMARK=1 BUILD_TPCH=1 make` and then perform several standard benchmarks from the root directory by executing `./build/release/benchmark/benchmark_runner`. The details of benchmarks are in our [Benchmark Guide](benchmark/README.md).
46: 
47: Please also refer to our [Build Guide](https://duckdb.org/dev/building) and [Contribution Guide](CONTRIBUTING.md).
48: 
49: ## Support
50: 
51: See the [Support Options](https://duckdblabs.com/support/) page.
[end of README.md]
[start of src/core_functions/aggregate/distributive/minmax.cpp]
1: #include "duckdb/catalog/catalog_entry/aggregate_function_catalog_entry.hpp"
2: #include "duckdb/core_functions/aggregate/distributive_functions.hpp"
3: #include "duckdb/common/exception.hpp"
4: #include "duckdb/common/vector_operations/vector_operations.hpp"
5: #include "duckdb/common/operator/comparison_operators.hpp"
6: #include "duckdb/common/types/null_value.hpp"
7: #include "duckdb/planner/expression.hpp"
8: #include "duckdb/planner/expression/bound_comparison_expression.hpp"
9: #include "duckdb/planner/expression_binder.hpp"
10: #include "duckdb/function/function_binder.hpp"
11: #include "duckdb/core_functions/aggregate/sort_key_helpers.hpp"
12: #include "duckdb/core_functions/aggregate/minmax_n_helpers.hpp"
13: 
14: namespace duckdb {
15: 
16: template <class T>
17: struct MinMaxState {
18: 	T value;
19: 	bool isset;
20: };
21: 
22: template <class OP>
23: static AggregateFunction GetUnaryAggregate(LogicalType type) {
24: 	switch (type.InternalType()) {
25: 	case PhysicalType::BOOL:
26: 		return AggregateFunction::UnaryAggregate<MinMaxState<int8_t>, int8_t, int8_t, OP>(type, type);
27: 	case PhysicalType::INT8:
28: 		return AggregateFunction::UnaryAggregate<MinMaxState<int8_t>, int8_t, int8_t, OP>(type, type);
29: 	case PhysicalType::INT16:
30: 		return AggregateFunction::UnaryAggregate<MinMaxState<int16_t>, int16_t, int16_t, OP>(type, type);
31: 	case PhysicalType::INT32:
32: 		return AggregateFunction::UnaryAggregate<MinMaxState<int32_t>, int32_t, int32_t, OP>(type, type);
33: 	case PhysicalType::INT64:
34: 		return AggregateFunction::UnaryAggregate<MinMaxState<int64_t>, int64_t, int64_t, OP>(type, type);
35: 	case PhysicalType::UINT8:
36: 		return AggregateFunction::UnaryAggregate<MinMaxState<uint8_t>, uint8_t, uint8_t, OP>(type, type);
37: 	case PhysicalType::UINT16:
38: 		return AggregateFunction::UnaryAggregate<MinMaxState<uint16_t>, uint16_t, uint16_t, OP>(type, type);
39: 	case PhysicalType::UINT32:
40: 		return AggregateFunction::UnaryAggregate<MinMaxState<uint32_t>, uint32_t, uint32_t, OP>(type, type);
41: 	case PhysicalType::UINT64:
42: 		return AggregateFunction::UnaryAggregate<MinMaxState<uint64_t>, uint64_t, uint64_t, OP>(type, type);
43: 	case PhysicalType::INT128:
44: 		return AggregateFunction::UnaryAggregate<MinMaxState<hugeint_t>, hugeint_t, hugeint_t, OP>(type, type);
45: 	case PhysicalType::UINT128:
46: 		return AggregateFunction::UnaryAggregate<MinMaxState<uhugeint_t>, uhugeint_t, uhugeint_t, OP>(type, type);
47: 	case PhysicalType::FLOAT:
48: 		return AggregateFunction::UnaryAggregate<MinMaxState<float>, float, float, OP>(type, type);
49: 	case PhysicalType::DOUBLE:
50: 		return AggregateFunction::UnaryAggregate<MinMaxState<double>, double, double, OP>(type, type);
51: 	case PhysicalType::INTERVAL:
52: 		return AggregateFunction::UnaryAggregate<MinMaxState<interval_t>, interval_t, interval_t, OP>(type, type);
53: 	default:
54: 		throw InternalException("Unimplemented type for min/max aggregate");
55: 	}
56: }
57: 
58: struct MinMaxBase {
59: 	template <class STATE>
60: 	static void Initialize(STATE &state) {
61: 		state.isset = false;
62: 	}
63: 
64: 	template <class INPUT_TYPE, class STATE, class OP>
65: 	static void ConstantOperation(STATE &state, const INPUT_TYPE &input, AggregateUnaryInput &unary_input,
66: 	                              idx_t count) {
67: 		if (!state.isset) {
68: 			OP::template Assign<INPUT_TYPE, STATE>(state, input, unary_input.input);
69: 			state.isset = true;
70: 		} else {
71: 			OP::template Execute<INPUT_TYPE, STATE>(state, input, unary_input.input);
72: 		}
73: 	}
74: 
75: 	template <class INPUT_TYPE, class STATE, class OP>
76: 	static void Operation(STATE &state, const INPUT_TYPE &input, AggregateUnaryInput &unary_input) {
77: 		if (!state.isset) {
78: 			OP::template Assign<INPUT_TYPE, STATE>(state, input, unary_input.input);
79: 			state.isset = true;
80: 		} else {
81: 			OP::template Execute<INPUT_TYPE, STATE>(state, input, unary_input.input);
82: 		}
83: 	}
84: 
85: 	static bool IgnoreNull() {
86: 		return true;
87: 	}
88: };
89: 
90: struct NumericMinMaxBase : public MinMaxBase {
91: 	template <class INPUT_TYPE, class STATE>
92: 	static void Assign(STATE &state, INPUT_TYPE input, AggregateInputData &) {
93: 		state.value = input;
94: 	}
95: 
96: 	template <class T, class STATE>
97: 	static void Finalize(STATE &state, T &target, AggregateFinalizeData &finalize_data) {
98: 		if (!state.isset) {
99: 			finalize_data.ReturnNull();
100: 		} else {
101: 			target = state.value;
102: 		}
103: 	}
104: };
105: 
106: struct MinOperation : public NumericMinMaxBase {
107: 	template <class INPUT_TYPE, class STATE>
108: 	static void Execute(STATE &state, INPUT_TYPE input, AggregateInputData &) {
109: 		if (LessThan::Operation<INPUT_TYPE>(input, state.value)) {
110: 			state.value = input;
111: 		}
112: 	}
113: 
114: 	template <class STATE, class OP>
115: 	static void Combine(const STATE &source, STATE &target, AggregateInputData &) {
116: 		if (!source.isset) {
117: 			// source is NULL, nothing to do
118: 			return;
119: 		}
120: 		if (!target.isset) {
121: 			// target is NULL, use source value directly
122: 			target = source;
123: 		} else if (GreaterThan::Operation(target.value, source.value)) {
124: 			target.value = source.value;
125: 		}
126: 	}
127: };
128: 
129: struct MaxOperation : public NumericMinMaxBase {
130: 	template <class INPUT_TYPE, class STATE>
131: 	static void Execute(STATE &state, INPUT_TYPE input, AggregateInputData &) {
132: 		if (GreaterThan::Operation<INPUT_TYPE>(input, state.value)) {
133: 			state.value = input;
134: 		}
135: 	}
136: 
137: 	template <class STATE, class OP>
138: 	static void Combine(const STATE &source, STATE &target, AggregateInputData &) {
139: 		if (!source.isset) {
140: 			// source is NULL, nothing to do
141: 			return;
142: 		}
143: 		if (!target.isset) {
144: 			// target is NULL, use source value directly
145: 			target = source;
146: 		} else if (LessThan::Operation(target.value, source.value)) {
147: 			target.value = source.value;
148: 		}
149: 	}
150: };
151: 
152: struct MinMaxStringState : MinMaxState<string_t> {
153: 	void Destroy() {
154: 		if (isset && !value.IsInlined()) {
155: 			delete[] value.GetData();
156: 		}
157: 	}
158: 
159: 	void Assign(string_t input) {
160: 		if (input.IsInlined()) {
161: 			// inlined string - we can directly store it into the string_t without having to allocate anything
162: 			Destroy();
163: 			value = input;
164: 		} else {
165: 			// non-inlined string, need to allocate space for it somehow
166: 			auto len = input.GetSize();
167: 			char *ptr;
168: 			if (!isset || value.GetSize() < len) {
169: 				// we cannot fit this into the current slot - destroy it and re-allocate
170: 				Destroy();
171: 				ptr = new char[len];
172: 			} else {
173: 				// this fits into the current slot - take over the pointer
174: 				ptr = value.GetDataWriteable();
175: 			}
176: 			memcpy(ptr, input.GetData(), len);
177: 
178: 			value = string_t(ptr, UnsafeNumericCast<uint32_t>(len));
179: 		}
180: 	}
181: };
182: 
183: struct StringMinMaxBase : public MinMaxBase {
184: 	template <class STATE>
185: 	static void Destroy(STATE &state, AggregateInputData &aggr_input_data) {
186: 		state.Destroy();
187: 	}
188: 
189: 	template <class INPUT_TYPE, class STATE>
190: 	static void Assign(STATE &state, INPUT_TYPE input, AggregateInputData &input_data) {
191: 		state.Assign(input);
192: 	}
193: 
194: 	template <class T, class STATE>
195: 	static void Finalize(STATE &state, T &target, AggregateFinalizeData &finalize_data) {
196: 		if (!state.isset) {
197: 			finalize_data.ReturnNull();
198: 		} else {
199: 			target = StringVector::AddStringOrBlob(finalize_data.result, state.value);
200: 		}
201: 	}
202: 
203: 	template <class STATE, class OP>
204: 	static void Combine(const STATE &source, STATE &target, AggregateInputData &input_data) {
205: 		if (!source.isset) {
206: 			// source is NULL, nothing to do
207: 			return;
208: 		}
209: 		if (!target.isset) {
210: 			// target is NULL, use source value directly
211: 			Assign(target, source.value, input_data);
212: 			target.isset = true;
213: 		} else {
214: 			OP::template Execute<string_t, STATE>(target, source.value, input_data);
215: 		}
216: 	}
217: };
218: 
219: struct MinOperationString : public StringMinMaxBase {
220: 	template <class INPUT_TYPE, class STATE>
221: 	static void Execute(STATE &state, INPUT_TYPE input, AggregateInputData &input_data) {
222: 		if (LessThan::Operation<INPUT_TYPE>(input, state.value)) {
223: 			Assign(state, input, input_data);
224: 		}
225: 	}
226: };
227: 
228: struct MaxOperationString : public StringMinMaxBase {
229: 	template <class INPUT_TYPE, class STATE>
230: 	static void Execute(STATE &state, INPUT_TYPE input, AggregateInputData &input_data) {
231: 		if (GreaterThan::Operation<INPUT_TYPE>(input, state.value)) {
232: 			Assign(state, input, input_data);
233: 		}
234: 	}
235: };
236: 
237: template <OrderType ORDER_TYPE_TEMPLATED>
238: struct VectorMinMaxBase {
239: 	static constexpr OrderType ORDER_TYPE = ORDER_TYPE_TEMPLATED;
240: 
241: 	static bool IgnoreNull() {
242: 		return true;
243: 	}
244: 
245: 	template <class STATE>
246: 	static void Initialize(STATE &state) {
247: 		state.isset = false;
248: 	}
249: 
250: 	template <class STATE>
251: 	static void Destroy(STATE &state, AggregateInputData &aggr_input_data) {
252: 		state.Destroy();
253: 	}
254: 
255: 	template <class INPUT_TYPE, class STATE>
256: 	static void Assign(STATE &state, INPUT_TYPE input, AggregateInputData &input_data) {
257: 		state.Assign(input);
258: 	}
259: 
260: 	template <class INPUT_TYPE, class STATE, class OP>
261: 	static void Execute(STATE &state, INPUT_TYPE input, AggregateInputData &input_data) {
262: 		if (!state.isset) {
263: 			Assign(state, input, input_data);
264: 			state.isset = true;
265: 			return;
266: 		}
267: 		if (LessThan::Operation<INPUT_TYPE>(input, state.value)) {
268: 			Assign(state, input, input_data);
269: 		}
270: 	}
271: 
272: 	template <class STATE, class OP>
273: 	static void Combine(const STATE &source, STATE &target, AggregateInputData &input_data) {
274: 		if (!source.isset) {
275: 			// source is NULL, nothing to do
276: 			return;
277: 		}
278: 		OP::template Execute<string_t, STATE, OP>(target, source.value, input_data);
279: 	}
280: 
281: 	template <class STATE>
282: 	static void Finalize(STATE &state, AggregateFinalizeData &finalize_data) {
283: 		if (!state.isset) {
284: 			finalize_data.ReturnNull();
285: 		} else {
286: 			CreateSortKeyHelpers::DecodeSortKey(state.value, finalize_data.result, finalize_data.result_idx,
287: 			                                    OrderModifiers(ORDER_TYPE, OrderByNullType::NULLS_LAST));
288: 		}
289: 	}
290: 
291: 	static unique_ptr<FunctionData> Bind(ClientContext &context, AggregateFunction &function,
292: 	                                     vector<unique_ptr<Expression>> &arguments) {
293: 		function.arguments[0] = arguments[0]->return_type;
294: 		function.return_type = arguments[0]->return_type;
295: 		return nullptr;
296: 	}
297: };
298: 
299: struct MinOperationVector : VectorMinMaxBase<OrderType::ASCENDING> {};
300: 
301: struct MaxOperationVector : VectorMinMaxBase<OrderType::DESCENDING> {};
302: 
303: template <typename OP, typename STATE>
304: static AggregateFunction GetMinMaxFunction(const LogicalType &type) {
305: 	return AggregateFunction(
306: 	    {type}, LogicalType::BLOB, AggregateFunction::StateSize<STATE>, AggregateFunction::StateInitialize<STATE, OP>,
307: 	    AggregateSortKeyHelpers::UnaryUpdate<STATE, OP, OP::ORDER_TYPE, false>,
308: 	    AggregateFunction::StateCombine<STATE, OP>, AggregateFunction::StateVoidFinalize<STATE, OP>, nullptr, OP::Bind,
309: 	    AggregateFunction::StateDestroy<STATE, OP>);
310: }
311: 
312: template <class OP, class OP_STRING, class OP_VECTOR>
313: static AggregateFunction GetMinMaxOperator(const LogicalType &type) {
314: 	auto internal_type = type.InternalType();
315: 	switch (internal_type) {
316: 	case PhysicalType::VARCHAR:
317: 		return AggregateFunction::UnaryAggregateDestructor<MinMaxStringState, string_t, string_t, OP_STRING>(type.id(),
318: 		                                                                                                     type.id());
319: 	case PhysicalType::LIST:
320: 	case PhysicalType::STRUCT:
321: 	case PhysicalType::ARRAY:
322: 		return GetMinMaxFunction<OP_VECTOR, MinMaxStringState>(type);
323: 	default:
324: 		return GetUnaryAggregate<OP>(type);
325: 	}
326: }
327: 
328: template <class OP, class OP_STRING, class OP_VECTOR>
329: unique_ptr<FunctionData> BindMinMax(ClientContext &context, AggregateFunction &function,
330:                                     vector<unique_ptr<Expression>> &arguments) {
331: 	if (arguments[0]->return_type.id() == LogicalTypeId::VARCHAR) {
332: 		auto str_collation = StringType::GetCollation(arguments[0]->return_type);
333: 		if (!str_collation.empty()) {
334: 			// If aggr function is min/max and uses collations, replace bound_function with arg_min/arg_max
335: 			// to make sure the result's correctness.
336: 			string function_name = function.name == "min" ? "arg_min" : "arg_max";
337: 			QueryErrorContext error_context;
338: 			auto func = Catalog::GetEntry(context, CatalogType::SCALAR_FUNCTION_ENTRY, "", "", function_name,
339: 			                              OnEntryNotFound::RETURN_NULL, error_context);
340: 
341: 			auto &func_entry = func->Cast<AggregateFunctionCatalogEntry>();
342: 
343: 			FunctionBinder function_binder(context);
344: 			vector<LogicalType> types {arguments[0]->return_type, arguments[0]->return_type};
345: 			ErrorData error;
346: 			auto best_function = function_binder.BindFunction(func_entry.name, func_entry.functions, types, error);
347: 			if (!best_function.IsValid()) {
348: 				throw BinderException(string("Fail to find corresponding function for collation min/max: ") +
349: 				                      error.Message());
350: 			}
351: 			function = func_entry.functions.GetFunctionByOffset(best_function.GetIndex());
352: 
353: 			// Create a copied child and PushCollation for it.
354: 			arguments.push_back(arguments[0]->Copy());
355: 			ExpressionBinder::PushCollation(context, arguments[1], arguments[0]->return_type);
356: 
357: 			// Bind function like arg_min/arg_max.
358: 			function.arguments[0] = arguments[0]->return_type;
359: 			function.return_type = arguments[0]->return_type;
360: 			return nullptr;
361: 		}
362: 	}
363: 
364: 	auto input_type = arguments[0]->return_type;
365: 	if (input_type.id() == LogicalTypeId::UNKNOWN) {
366: 		throw ParameterNotResolvedException();
367: 	}
368: 	auto name = std::move(function.name);
369: 	function = GetMinMaxOperator<OP, OP_STRING, OP_VECTOR>(input_type);
370: 	function.name = std::move(name);
371: 	function.order_dependent = AggregateOrderDependent::NOT_ORDER_DEPENDENT;
372: 	if (function.bind) {
373: 		return function.bind(context, function, arguments);
374: 	} else {
375: 		return nullptr;
376: 	}
377: }
378: 
379: template <class OP, class OP_STRING, class OP_VECTOR>
380: static AggregateFunction GetMinMaxOperator(string name) {
381: 	return AggregateFunction(std::move(name), {LogicalType::ANY}, LogicalType::ANY, nullptr, nullptr, nullptr, nullptr,
382: 	                         nullptr, nullptr, BindMinMax<OP, OP_STRING, OP_VECTOR>);
383: }
384: 
385: AggregateFunction MinFun::GetFunction() {
386: 	return GetMinMaxOperator<MinOperation, MinOperationString, MinOperationVector>("min");
387: }
388: 
389: AggregateFunction MaxFun::GetFunction() {
390: 	return GetMinMaxOperator<MaxOperation, MaxOperationString, MaxOperationVector>("max");
391: }
392: 
393: //---------------------------------------------------
394: // MinMaxN
395: //---------------------------------------------------
396: 
397: template <class A, class COMPARATOR>
398: class MinMaxNState {
399: public:
400: 	using VAL_TYPE = A;
401: 	using T = typename VAL_TYPE::TYPE;
402: 
403: 	UnaryAggregateHeap<T, COMPARATOR> heap;
404: 	bool is_initialized = false;
405: 
406: 	void Initialize(idx_t nval) {
407: 		heap.Initialize(nval);
408: 		is_initialized = true;
409: 	}
410: 
411: 	static const T &GetValue(const T &val) {
412: 		return val;
413: 	}
414: };
415: 
416: template <class STATE>
417: static void MinMaxNUpdate(Vector inputs[], AggregateInputData &aggr_input, idx_t input_count, Vector &state_vector,
418:                           idx_t count) {
419: 
420: 	auto &val_vector = inputs[0];
421: 	auto &n_vector = inputs[1];
422: 
423: 	UnifiedVectorFormat val_format;
424: 	UnifiedVectorFormat n_format;
425: 	UnifiedVectorFormat state_format;
426: 	;
427: 	auto val_extra_state = STATE::VAL_TYPE::CreateExtraState(val_vector, count);
428: 
429: 	STATE::VAL_TYPE::PrepareData(val_vector, count, val_extra_state, val_format);
430: 
431: 	n_vector.ToUnifiedFormat(count, n_format);
432: 	state_vector.ToUnifiedFormat(count, state_format);
433: 
434: 	auto states = UnifiedVectorFormat::GetData<STATE *>(state_format);
435: 
436: 	for (idx_t i = 0; i < count; i++) {
437: 		const auto val_idx = val_format.sel->get_index(i);
438: 		if (!val_format.validity.RowIsValid(val_idx)) {
439: 			continue;
440: 		}
441: 		const auto state_idx = state_format.sel->get_index(i);
442: 		auto &state = *states[state_idx];
443: 
444: 		// Initialize the heap if necessary and add the input to the heap
445: 		if (!state.is_initialized) {
446: 			static constexpr int64_t MAX_N = 1000000;
447: 			const auto nidx = n_format.sel->get_index(i);
448: 			if (!n_format.validity.RowIsValid(nidx)) {
449: 				throw InvalidInputException("Invalid input for MIN/MAX: n value cannot be NULL");
450: 			}
451: 			const auto nval = UnifiedVectorFormat::GetData<int64_t>(n_format)[nidx];
452: 			if (nval <= 0) {
453: 				throw InvalidInputException("Invalid input for MIN/MAX: n value must be > 0");
454: 			}
455: 			if (nval >= MAX_N) {
456: 				throw InvalidInputException("Invalid input for MIN/MAX: n value must be < %d", MAX_N);
457: 			}
458: 			state.Initialize(UnsafeNumericCast<idx_t>(nval));
459: 		}
460: 
461: 		// Now add the input to the heap
462: 		auto val_val = STATE::VAL_TYPE::Create(val_format, val_idx);
463: 		state.heap.Insert(aggr_input.allocator, val_val);
464: 	}
465: }
466: 
467: template <class VAL_TYPE, class COMPARATOR>
468: static void SpecializeMinMaxNFunction(AggregateFunction &function) {
469: 	using STATE = MinMaxNState<VAL_TYPE, COMPARATOR>;
470: 	using OP = MinMaxNOperation;
471: 
472: 	function.state_size = AggregateFunction::StateSize<STATE>;
473: 	function.initialize = AggregateFunction::StateInitialize<STATE, OP>;
474: 	function.combine = AggregateFunction::StateCombine<STATE, OP>;
475: 	function.destructor = AggregateFunction::StateDestroy<STATE, OP>;
476: 
477: 	function.finalize = MinMaxNOperation::Finalize<STATE>;
478: 	function.update = MinMaxNUpdate<STATE>;
479: }
480: 
481: template <class COMPARATOR>
482: static void SpecializeMinMaxNFunction(PhysicalType arg_type, AggregateFunction &function) {
483: 	switch (arg_type) {
484: 	case PhysicalType::VARCHAR:
485: 		SpecializeMinMaxNFunction<MinMaxStringValue, COMPARATOR>(function);
486: 		break;
487: 	case PhysicalType::INT32:
488: 		SpecializeMinMaxNFunction<MinMaxFixedValue<int32_t>, COMPARATOR>(function);
489: 		break;
490: 	case PhysicalType::INT64:
491: 		SpecializeMinMaxNFunction<MinMaxFixedValue<int64_t>, COMPARATOR>(function);
492: 		break;
493: 	case PhysicalType::FLOAT:
494: 		SpecializeMinMaxNFunction<MinMaxFixedValue<float>, COMPARATOR>(function);
495: 		break;
496: 	case PhysicalType::DOUBLE:
497: 		SpecializeMinMaxNFunction<MinMaxFixedValue<double>, COMPARATOR>(function);
498: 		break;
499: 	default:
500: 		SpecializeMinMaxNFunction<MinMaxFallbackValue, COMPARATOR>(function);
501: 		break;
502: 	}
503: }
504: 
505: template <class COMPARATOR>
506: unique_ptr<FunctionData> MinMaxNBind(ClientContext &context, AggregateFunction &function,
507:                                      vector<unique_ptr<Expression>> &arguments) {
508: 
509: 	for (auto &arg : arguments) {
510: 		if (arg->return_type.id() == LogicalTypeId::UNKNOWN) {
511: 			throw ParameterNotResolvedException();
512: 		}
513: 	}
514: 
515: 	const auto val_type = arguments[0]->return_type.InternalType();
516: 
517: 	// Specialize the function based on the input types
518: 	SpecializeMinMaxNFunction<COMPARATOR>(val_type, function);
519: 
520: 	function.return_type = LogicalType::LIST(arguments[0]->return_type);
521: 	return nullptr;
522: }
523: 
524: template <class COMPARATOR>
525: static AggregateFunction GetMinMaxNFunction() {
526: 	return AggregateFunction({LogicalTypeId::ANY, LogicalType::BIGINT}, LogicalType::LIST(LogicalType::ANY), nullptr,
527: 	                         nullptr, nullptr, nullptr, nullptr, nullptr, MinMaxNBind<COMPARATOR>, nullptr);
528: }
529: 
530: //---------------------------------------------------
531: // Function Registration
532: //---------------------------------------------------s
533: 
534: AggregateFunctionSet MinFun::GetFunctions() {
535: 	AggregateFunctionSet min("min");
536: 	min.AddFunction(GetFunction());
537: 	min.AddFunction(GetMinMaxNFunction<LessThan>());
538: 	return min;
539: }
540: 
541: AggregateFunctionSet MaxFun::GetFunctions() {
542: 	AggregateFunctionSet max("max");
543: 	max.AddFunction(GetFunction());
544: 	max.AddFunction(GetMinMaxNFunction<GreaterThan>());
545: 	return max;
546: }
547: 
548: } // namespace duckdb
[end of src/core_functions/aggregate/distributive/minmax.cpp]
</code>
Here is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.
<patch>
--- a/file.cpp
+++ b/file.cpp
@@ -3,35 +3,44 @@
 #include <cstdlib>
 
 int euclidean(int a, int b) {
-    while (b) {
-        int temp = b;
-        b = a % b;
-        a = temp;
+    if (b == 0) {
+        return a;
     }
-    return a;
+    return euclidean(b, a % b);
 }
 
 std::vector<std::pair<int, int>> bresenham(int x0, int y0, int x1, int y1) {
     std::vector<std::pair<int, int>> points;
     int dx = abs(x1 - x0);
     int dy = abs(y1 - y0);
+    int x = x0, y = y0;
     int sx = (x0 < x1) ? 1 : -1;
     int sy = (y0 < y1) ? 1 : -1;
-    int err = dx - dy;
 
-    while (true) {
-        points.emplace_back(x0, y0);
-        if (x0 == x1 && y0 == y1) break;
-        int e2 = 2 * err;
-        if (e2 > -dy) {
+    if (dx > dy) {
+        int err = dx / 2;
+        while (x != x1) {
+            points.emplace_back(x, y);
             err -= dy;
-            x0 += sx;
+            if (err < 0) {
+                y += sy;
+                err += dx;
+            }
+            x += sx;
         }
-        if (e2 < dx) {
-            err += dx;
-            y0 += sy;
+    } else {
+        int err = dy / 2;
+        while (y != y1) {
+            points.emplace_back(x, y);
+            err -= dx;
+            if (err < 0) {
+                x += sx;
+                err += dy;
+            }
+            y += sy;
         }
     }
 
+    points.emplace_back(x, y);
     return points;
 }

</patch>

I need you to solve the provided issue by generating a single patch file that I can apply directly to this repository using git apply.
Please respond with a single patch file in the format shown above.
Make sure to only include the patch file contents so that the contents of your output can be copied into a patch file and applied directly

Respond below: