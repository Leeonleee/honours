{
  "repo": "duckdb/duckdb",
  "pull_number": 2089,
  "instance_id": "duckdb__duckdb-2089",
  "issue_numbers": [
    "2074"
  ],
  "base_commit": "d43876160a2dddec0cac6cc16d8828815eae25dd",
  "patch": "diff --git a/.github/workflows/main.yml b/.github/workflows/main.yml\nindex fce99019f884..b725f6f5c37d 100644\n--- a/.github/workflows/main.yml\n+++ b/.github/workflows/main.yml\n@@ -882,7 +882,7 @@ jobs:\n       CIBW_BUILD: 'cp36-* cp37-* cp38-* cp39-*'\n       CIBW_BEFORE_BUILD: 'pip install --prefer-binary \"pandas>=0.24\" \"pytest>=4.3\"'\n       CIBW_TEST_REQUIRES: 'pytest'\n-      CIBW_BEFORE_TEST: 'pip install --prefer-binary \"pandas>=0.24\" && pip install --prefer-binary \"requests>=2.26\" && (pip install --extra-index-url https://pypi.fury.io/arrow-nightlies/ --prefer-binary --pre pyarrow || true)'\n+      CIBW_BEFORE_TEST: 'pip install --prefer-binary \"pandas>=0.24\" && pip install --prefer-binary \"requests>=2.26\" && (pip install --prefer-binary \"pyarrow>=5.0\" || true)'\n       CIBW_TEST_COMMAND: 'python -m pytest {project}/tests'\n       SETUPTOOLS_SCM_NO_LOCAL: 'yes'\n       TWINE_USERNAME: 'hfmuehleisen'\n@@ -922,7 +922,7 @@ jobs:\n       CIBW_BUILD: 'cp36-* cp37-* cp38-* cp39-*'\n       CIBW_BEFORE_BUILD: 'yum install -y openssl-devel && pip install --prefer-binary \"pandas>=0.24\" \"pytest>=4.3\"'\n       CIBW_TEST_REQUIRES: 'pytest'\n-      CIBW_BEFORE_TEST: 'yum install -y openssl && pip install --prefer-binary \"pandas>=0.24\"  && pip install --prefer-binary \"requests>=2.26\" && (pip install --extra-index-url https://pypi.fury.io/arrow-nightlies/ --prefer-binary --pre pyarrow || true)'\n+      CIBW_BEFORE_TEST: 'yum install -y openssl && pip install --prefer-binary \"pandas>=0.24\"  && (pip install --prefer-binary \"pyarrow>=5.0\" || true)'\n       CIBW_TEST_COMMAND: 'python -m pytest {project}/tests'\n       CIBW_ENVIRONMENT: 'BUILD_HTTPFS=1'\n       SETUPTOOLS_SCM_NO_LOCAL: 'yes'\n@@ -956,7 +956,7 @@ jobs:\n       CIBW_BUILD: 'cp36-* cp37-* cp38-* cp39-*'\n       CIBW_BEFORE_BUILD: 'pip install --prefer-binary \"pandas>=0.24\" \"pytest>=4.3\"'\n       CIBW_TEST_REQUIRES: 'pytest'\n-      CIBW_BEFORE_TEST: 'pip install --prefer-binary \"pandas>=0.24\" \"requests>=2.26\" && (pip install --extra-index-url https://pypi.fury.io/arrow-nightlies/ --prefer-binary --pre pyarrow || true)'\n+      CIBW_BEFORE_TEST: 'pip install --prefer-binary \"pandas>=0.24\" \"requests>=2.26\" && (pip install --prefer-binary \"pyarrow>=5.0\" || true)'\n       CIBW_TEST_COMMAND: 'python -m pytest {project}/tests'\n       CIBW_ARCHS_MACOS: 'x86_64 universal2 arm64'\n       SETUPTOOLS_SCM_NO_LOCAL: 'yes'\ndiff --git a/src/include/duckdb/parser/qualified_name.hpp b/src/include/duckdb/parser/qualified_name.hpp\nindex b90aceaeccc3..39f2cf681cef 100644\n--- a/src/include/duckdb/parser/qualified_name.hpp\n+++ b/src/include/duckdb/parser/qualified_name.hpp\n@@ -26,7 +26,7 @@ struct QualifiedName {\n \t\tvector<string> entries;\n \t\tstring entry;\n \tnormal:\n-\t\t// quote\n+\t\t//! quote\n \t\tfor (; idx < input.size(); idx++) {\n \t\t\tif (input[idx] == '\"') {\n \t\t\t\tidx++;\n@@ -43,10 +43,10 @@ struct QualifiedName {\n \t\tidx++;\n \t\tgoto normal;\n \tquoted:\n-\t\t// look for another quote\n+\t\t//! look for another quote\n \t\tfor (; idx < input.size(); idx++) {\n \t\t\tif (input[idx] == '\"') {\n-\t\t\t\t// unquote\n+\t\t\t\t//! unquote\n \t\t\t\tidx++;\n \t\t\t\tgoto normal;\n \t\t\t}\n@@ -54,7 +54,7 @@ struct QualifiedName {\n \t\t}\n \t\tthrow ParserException(\"Unterminated quote in qualified name!\");\n \tend:\n-\t\tif (entries.size() == 0) {\n+\t\tif (entries.empty()) {\n \t\t\tschema = INVALID_SCHEMA;\n \t\t\tname = entry;\n \t\t} else if (entries.size() == 1) {\ndiff --git a/tools/pythonpkg/src/pyrelation.cpp b/tools/pythonpkg/src/pyrelation.cpp\nindex 7137955f0b16..2185c364c7e3 100644\n--- a/tools/pythonpkg/src/pyrelation.cpp\n+++ b/tools/pythonpkg/src/pyrelation.cpp\n@@ -1,7 +1,7 @@\n #include \"duckdb_python/pyrelation.hpp\"\n #include \"duckdb_python/pyconnection.hpp\"\n #include \"duckdb_python/pyresult.hpp\"\n-\n+#include \"duckdb/parser/qualified_name.hpp\"\n namespace duckdb {\n \n void DuckDBPyRelation::Initialize(py::handle &m) {\n@@ -251,7 +251,14 @@ unique_ptr<DuckDBPyResult> DuckDBPyRelation::QueryDF(py::object df, const string\n }\n \n void DuckDBPyRelation::InsertInto(const string &table) {\n-\trel->Insert(table);\n+\tauto parsed_info = QualifiedName::Parse(table);\n+\tif (parsed_info.schema.empty()) {\n+\t\t//! No Schema Defined, we use default schema.\n+\t\trel->Insert(table);\n+\t} else {\n+\t\t//! Schema defined, we try to insert into it.\n+\t\trel->Insert(parsed_info.schema, parsed_info.name);\n+\t};\n }\n \n void DuckDBPyRelation::Insert(py::object params) {\n",
  "test_patch": "diff --git a/tools/pythonpkg/tests/api/test_insert_into.py b/tools/pythonpkg/tests/api/test_insert_into.py\nnew file mode 100644\nindex 000000000000..c70a1a3f35f9\n--- /dev/null\n+++ b/tools/pythonpkg/tests/api/test_insert_into.py\n@@ -0,0 +1,27 @@\n+import duckdb\n+from pandas import DataFrame\n+import pytest\n+\n+class TestInsertInto(object):\n+    def test_insert_into_schema(self, duckdb_cursor):\n+        # open connection\n+        con = duckdb.connect()\n+        con.execute('CREATE SCHEMA s')\n+        con.execute('CREATE TABLE s.t (id INTEGER PRIMARY KEY)')\n+\n+        # make relation\n+        df = DataFrame([1],columns=['id'])\n+        rel = con.from_df(df)\n+\n+        rel.insert_into('s.t')\n+\n+        assert con.execute(\"select * from s.t\").fetchall() == [(1,)]\n+\n+        # This should fail since this will go to default schema\n+        with pytest.raises(RuntimeError):\n+            rel.insert_into('t')\n+\n+        #If we add t in the default schema it should work.\n+        con.execute('CREATE TABLE t (id INTEGER PRIMARY KEY)')\n+        rel.insert_into('t')\n+        assert con.execute(\"select * from t\").fetchall() == [(1,)]\n\\ No newline at end of file\n",
  "problem_statement": "PyRelation insert_into fails if Table has designated Schema\n**What does happen?**\r\nIf a table belongs to a designated schema, the `insert_into` method will fail, whether the schema is specified or not.\r\n\r\n**What should happen?**\r\nInsert into the specified schema/table.  If only table is specified and is ambiguous (i.e. multiple schemas contain the same table name), then DuckDB should throw an error.  Also, may perhaps be helpful if `show_tables' likewise specifies schema as well, assuming one has been created.\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior. Bonus points if those are only SQL queries.\r\n```\r\nimport duckdb\r\nfrom pandas import DataFrame\r\n\r\n# open connection\r\ncon = duckdb.connect()\r\ncon.execute('CREATE SCHEMA s')\r\ncon.execute('CREATE TABLE s.t (id INTEGER PRIMARY KEY)')\r\n\r\n# make relation\r\ndf = DataFrame([1],columns=['id'])\r\nrel = con.from_df(df)\r\n\r\n# this fails\r\nrel.insert_into('s.t')\r\n\r\n# so does this\r\nrel.insert_into('t')\r\n```\r\n\r\n**Environment (please complete the following information):**\r\n - OS: Windows 10\r\n - DuckDB Version [0.2.8-dev919]\r\n\r\n**Before submitting**\r\n- [X] Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\r\n- [X] Have you tried this on the latest `master` branch? In case you cannot compile, you may find some binaries here: https://github.com/duckdb/duckdb/releases/tag/master-builds\r\n\n",
  "hints_text": "",
  "created_at": "2021-08-02T15:23:33Z"
}