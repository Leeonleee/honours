diff --git a/.github/workflows/main.yml b/.github/workflows/main.yml
index fce99019f884..b725f6f5c37d 100644
--- a/.github/workflows/main.yml
+++ b/.github/workflows/main.yml
@@ -882,7 +882,7 @@ jobs:
       CIBW_BUILD: 'cp36-* cp37-* cp38-* cp39-*'
       CIBW_BEFORE_BUILD: 'pip install --prefer-binary "pandas>=0.24" "pytest>=4.3"'
       CIBW_TEST_REQUIRES: 'pytest'
-      CIBW_BEFORE_TEST: 'pip install --prefer-binary "pandas>=0.24" && pip install --prefer-binary "requests>=2.26" && (pip install --extra-index-url https://pypi.fury.io/arrow-nightlies/ --prefer-binary --pre pyarrow || true)'
+      CIBW_BEFORE_TEST: 'pip install --prefer-binary "pandas>=0.24" && pip install --prefer-binary "requests>=2.26" && (pip install --prefer-binary "pyarrow>=5.0" || true)'
       CIBW_TEST_COMMAND: 'python -m pytest {project}/tests'
       SETUPTOOLS_SCM_NO_LOCAL: 'yes'
       TWINE_USERNAME: 'hfmuehleisen'
@@ -922,7 +922,7 @@ jobs:
       CIBW_BUILD: 'cp36-* cp37-* cp38-* cp39-*'
       CIBW_BEFORE_BUILD: 'yum install -y openssl-devel && pip install --prefer-binary "pandas>=0.24" "pytest>=4.3"'
       CIBW_TEST_REQUIRES: 'pytest'
-      CIBW_BEFORE_TEST: 'yum install -y openssl && pip install --prefer-binary "pandas>=0.24"  && pip install --prefer-binary "requests>=2.26" && (pip install --extra-index-url https://pypi.fury.io/arrow-nightlies/ --prefer-binary --pre pyarrow || true)'
+      CIBW_BEFORE_TEST: 'yum install -y openssl && pip install --prefer-binary "pandas>=0.24"  && (pip install --prefer-binary "pyarrow>=5.0" || true)'
       CIBW_TEST_COMMAND: 'python -m pytest {project}/tests'
       CIBW_ENVIRONMENT: 'BUILD_HTTPFS=1'
       SETUPTOOLS_SCM_NO_LOCAL: 'yes'
@@ -956,7 +956,7 @@ jobs:
       CIBW_BUILD: 'cp36-* cp37-* cp38-* cp39-*'
       CIBW_BEFORE_BUILD: 'pip install --prefer-binary "pandas>=0.24" "pytest>=4.3"'
       CIBW_TEST_REQUIRES: 'pytest'
-      CIBW_BEFORE_TEST: 'pip install --prefer-binary "pandas>=0.24" "requests>=2.26" && (pip install --extra-index-url https://pypi.fury.io/arrow-nightlies/ --prefer-binary --pre pyarrow || true)'
+      CIBW_BEFORE_TEST: 'pip install --prefer-binary "pandas>=0.24" "requests>=2.26" && (pip install --prefer-binary "pyarrow>=5.0" || true)'
       CIBW_TEST_COMMAND: 'python -m pytest {project}/tests'
       CIBW_ARCHS_MACOS: 'x86_64 universal2 arm64'
       SETUPTOOLS_SCM_NO_LOCAL: 'yes'
diff --git a/src/include/duckdb/parser/qualified_name.hpp b/src/include/duckdb/parser/qualified_name.hpp
index b90aceaeccc3..39f2cf681cef 100644
--- a/src/include/duckdb/parser/qualified_name.hpp
+++ b/src/include/duckdb/parser/qualified_name.hpp
@@ -26,7 +26,7 @@ struct QualifiedName {
 		vector<string> entries;
 		string entry;
 	normal:
-		// quote
+		//! quote
 		for (; idx < input.size(); idx++) {
 			if (input[idx] == '"') {
 				idx++;
@@ -43,10 +43,10 @@ struct QualifiedName {
 		idx++;
 		goto normal;
 	quoted:
-		// look for another quote
+		//! look for another quote
 		for (; idx < input.size(); idx++) {
 			if (input[idx] == '"') {
-				// unquote
+				//! unquote
 				idx++;
 				goto normal;
 			}
@@ -54,7 +54,7 @@ struct QualifiedName {
 		}
 		throw ParserException("Unterminated quote in qualified name!");
 	end:
-		if (entries.size() == 0) {
+		if (entries.empty()) {
 			schema = INVALID_SCHEMA;
 			name = entry;
 		} else if (entries.size() == 1) {
diff --git a/tools/pythonpkg/src/pyrelation.cpp b/tools/pythonpkg/src/pyrelation.cpp
index 7137955f0b16..2185c364c7e3 100644
--- a/tools/pythonpkg/src/pyrelation.cpp
+++ b/tools/pythonpkg/src/pyrelation.cpp
@@ -1,7 +1,7 @@
 #include "duckdb_python/pyrelation.hpp"
 #include "duckdb_python/pyconnection.hpp"
 #include "duckdb_python/pyresult.hpp"
-
+#include "duckdb/parser/qualified_name.hpp"
 namespace duckdb {
 
 void DuckDBPyRelation::Initialize(py::handle &m) {
@@ -251,7 +251,14 @@ unique_ptr<DuckDBPyResult> DuckDBPyRelation::QueryDF(py::object df, const string
 }
 
 void DuckDBPyRelation::InsertInto(const string &table) {
-	rel->Insert(table);
+	auto parsed_info = QualifiedName::Parse(table);
+	if (parsed_info.schema.empty()) {
+		//! No Schema Defined, we use default schema.
+		rel->Insert(table);
+	} else {
+		//! Schema defined, we try to insert into it.
+		rel->Insert(parsed_info.schema, parsed_info.name);
+	};
 }
 
 void DuckDBPyRelation::Insert(py::object params) {
