{
  "repo": "duckdb/duckdb",
  "pull_number": 12332,
  "instance_id": "duckdb__duckdb-12332",
  "issue_numbers": [
    "12328",
    "12328"
  ],
  "base_commit": "69bc31e0dc62f3302ec8e22d29f0009d482411a1",
  "patch": "diff --git a/src/common/types/vector.cpp b/src/common/types/vector.cpp\nindex aa08072ac550..ea6d642dbf4d 100644\n--- a/src/common/types/vector.cpp\n+++ b/src/common/types/vector.cpp\n@@ -860,7 +860,10 @@ void Vector::Flatten(idx_t count) {\n \t\t\t// constant NULL, set nullmask\n \t\t\tvalidity.EnsureWritable();\n \t\t\tvalidity.SetAllInvalid(count);\n-\t\t\treturn;\n+\t\t\tif (GetType().InternalType() != PhysicalType::STRUCT) {\n+\t\t\t\t// for structs we still need to flatten the child vectors as well\n+\t\t\t\treturn;\n+\t\t\t}\n \t\t}\n \t\t// non-null constant: have to repeat the constant\n \t\tswitch (GetType().InternalType()) {\n",
  "test_patch": "diff --git a/test/sql/pivot/pivot_struct_aggregate.test b/test/sql/pivot/pivot_struct_aggregate.test\nnew file mode 100644\nindex 000000000000..abc3d3168e45\n--- /dev/null\n+++ b/test/sql/pivot/pivot_struct_aggregate.test\n@@ -0,0 +1,23 @@\n+# name: test/sql/pivot/pivot_struct_aggregate.test\n+# description: Issue #12328: Segmentation fault during PIVOTING table (CLI) using struct field\n+# group: [pivot]\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+statement ok\n+create table donnees_csv as select {'year': i::varchar, 'month': i::varchar} AS donnee, i%5 as variable_id, i%10 id_niv from range(1000) t(i);\n+\n+query IIIIII\n+pivot donnees_csv on variable_id using first(donnee) group by id_niv order by all;\n+----\n+0\t{'year': 0, 'month': 0}\tNULL\tNULL\tNULL\tNULL\n+1\tNULL\t{'year': 1, 'month': 1}\tNULL\tNULL\tNULL\n+2\tNULL\tNULL\t{'year': 2, 'month': 2}\tNULL\tNULL\n+3\tNULL\tNULL\tNULL\t{'year': 3, 'month': 3}\tNULL\n+4\tNULL\tNULL\tNULL\tNULL\t{'year': 4, 'month': 4}\n+5\t{'year': 5, 'month': 5}\tNULL\tNULL\tNULL\tNULL\n+6\tNULL\t{'year': 6, 'month': 6}\tNULL\tNULL\tNULL\n+7\tNULL\tNULL\t{'year': 7, 'month': 7}\tNULL\tNULL\n+8\tNULL\tNULL\tNULL\t{'year': 8, 'month': 8}\tNULL\n+9\tNULL\tNULL\tNULL\tNULL\t{'year': 9, 'month': 9}\n",
  "problem_statement": "Segmentation fault during PIVOTING table (CLI) using struct field\n### What happens?\n\nThere is some limitation or bug during pivoting table using struct type field.\r\n\r\nI'm using the CLI. I would like to pivot a table, more than 6000 columns to produce.\r\nHere is the result : \r\n\r\n> pivot donnees_csv on variable_id using first(donnee) group by id_niv,codzone;\r\n> 85% \u2595\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588       \r\n> [1]    62343 segmentation fault  duckdb tests.db\r\n\r\nThe `donnee` field is a struct type.\r\n\r\n\r\n\n\n### To Reproduce\n\nThe table donnees_csv was materialized into a database like this :\r\n\r\n\r\n> `create or replace table donnees_csv as (`\r\n> `select build_variable_id(codind,datefin::string) as variable_id,zonage as id_niv,codzone,valeur,`\r\n> `statut,{v:valeur,s:statut} as donnee ` \r\n>`from read_csv('variables_donnees.csv', header=true)  order by id_niv,codzone);`\r\n\r\nThe `build_variable_id` is a simple function : `create or replace function build_variable_id(codind,datefin) as codind||'_'||replace(datefin,'-','_');`\r\n\r\n\r\nThe segmentation fault is coming where pivoting like this :\r\n`pivot donnees_csv on variable_id using first(donnee) group by id_niv,codzone;`\r\n\r\nWhen i limit the size of the `donnees_csv` table, it works fine. With the full size of the table, PIVOT has to produce 6000 columns.\r\n\r\nMaybe important thing : it works when pivoting using another field than `donnee`: `donnee` is a struct type field, where using `valeur` field (double type) all is fine.\r\n\n\n### OS:\n\nMacOS\n\n### DuckDB Version:\n\n10.0.3\n\n### DuckDB Client:\n\nCLI\n\n### Full Name:\n\nFrank Jardillier\n\n### Affiliation:\n\ncompas\n\n### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.\n\nI have tested with a stable release\n\n### Did you include all relevant data sets for reproducing the issue?\n\nNo - I cannot easily share my data sets due to their large size\n\n### Did you include all code required to reproduce the issue?\n\n- [X] Yes, I have\n\n### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?\n\n- [ ] Yes, I have\nSegmentation fault during PIVOTING table (CLI) using struct field\n### What happens?\n\nThere is some limitation or bug during pivoting table using struct type field.\r\n\r\nI'm using the CLI. I would like to pivot a table, more than 6000 columns to produce.\r\nHere is the result : \r\n\r\n> pivot donnees_csv on variable_id using first(donnee) group by id_niv,codzone;\r\n> 85% \u2595\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588       \r\n> [1]    62343 segmentation fault  duckdb tests.db\r\n\r\nThe `donnee` field is a struct type.\r\n\r\n\r\n\n\n### To Reproduce\n\nThe table donnees_csv was materialized into a database like this :\r\n\r\n\r\n> `create or replace table donnees_csv as (`\r\n> `select build_variable_id(codind,datefin::string) as variable_id,zonage as id_niv,codzone,valeur,`\r\n> `statut,{v:valeur,s:statut} as donnee ` \r\n>`from read_csv('variables_donnees.csv', header=true)  order by id_niv,codzone);`\r\n\r\nThe `build_variable_id` is a simple function : `create or replace function build_variable_id(codind,datefin) as codind||'_'||replace(datefin,'-','_');`\r\n\r\n\r\nThe segmentation fault is coming where pivoting like this :\r\n`pivot donnees_csv on variable_id using first(donnee) group by id_niv,codzone;`\r\n\r\nWhen i limit the size of the `donnees_csv` table, it works fine. With the full size of the table, PIVOT has to produce 6000 columns.\r\n\r\nMaybe important thing : it works when pivoting using another field than `donnee`: `donnee` is a struct type field, where using `valeur` field (double type) all is fine.\r\n\n\n### OS:\n\nMacOS\n\n### DuckDB Version:\n\n10.0.3\n\n### DuckDB Client:\n\nCLI\n\n### Full Name:\n\nFrank Jardillier\n\n### Affiliation:\n\ncompas\n\n### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.\n\nI have tested with a stable release\n\n### Did you include all relevant data sets for reproducing the issue?\n\nNo - I cannot easily share my data sets due to their large size\n\n### Did you include all code required to reproduce the issue?\n\n- [X] Yes, I have\n\n### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?\n\n- [ ] Yes, I have\n",
  "hints_text": "Can you provide `variables_donnees.csv`?\r\nWithout that I don't think we can reproduce the issue\nHere is the file\r\n\r\n[variables_donnees.csv.zip](https://github.com/user-attachments/files/15511488/variables_donnees.csv.zip)\r\n\r\nThe CSV sniffer doesn't identify `valeur` field as numeric field, i have to \"force\" it by mapping columns with the read_csv() columns options : `header=true, decimal_separator=',', columns={'codind':'varchar','datefin':'date','zonage':'varchar','codzone':'varchar','valeur':'double','statut':'varchar','datedeb':'date'}`\r\n\r\nThank you ! \r\n\nCan you provide `variables_donnees.csv`?\r\nWithout that I don't think we can reproduce the issue\nHere is the file\r\n\r\n[variables_donnees.csv.zip](https://github.com/user-attachments/files/15511488/variables_donnees.csv.zip)\r\n\r\nThe CSV sniffer doesn't identify `valeur` field as numeric field, i have to \"force\" it by mapping columns with the read_csv() columns options : `header=true, decimal_separator=',', columns={'codind':'varchar','datefin':'date','zonage':'varchar','codzone':'varchar','valeur':'double','statut':'varchar','datedeb':'date'}`\r\n\r\nThank you ! \r\n",
  "created_at": "2024-05-31T14:08:40Z"
}