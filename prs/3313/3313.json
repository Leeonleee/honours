{
  "repo": "duckdb/duckdb",
  "pull_number": 3313,
  "instance_id": "duckdb__duckdb-3313",
  "issue_numbers": [
    "3294"
  ],
  "base_commit": "8264eea013069a9a3ee3075e189c1f92c7cca5a1",
  "patch": "diff --git a/.github/workflows/Labels.yml b/.github/workflows/Labels.yml\nnew file mode 100644\nindex 000000000000..a99d2dd58b3a\n--- /dev/null\n+++ b/.github/workflows/Labels.yml\n@@ -0,0 +1,26 @@\n+name: Labels\n+\n+on:\n+  issues:\n+    types: [opened]\n+\n+jobs:\n+  change-label:\n+    runs-on: ubuntu-latest\n+\n+    env:\n+      GOLD_FOUNDATION_MEMBERS: ${{ secrets.GOLD_FOUNDATION_MEMBERS }}\n+      SILVER_FOUNDATION_MEMBERS: ${{ secrets.SILVER_FOUNDATION_MEMBERS }}\n+\n+    steps:\n+      - name: Label Issue Gold Foundation Member\n+        if: ${{ contains(fromJson(env.GOLD_FOUNDATION_MEMBERS), github.event.issue.user.login) }}\n+        uses: andymckay/labeler@master\n+        with:\n+          add-labels: \"Gold Foundation Member\"\n+\n+      - name: Label Issue Silver Foundation Member\n+        if: ${{ contains(fromJson(env.SILVER_FOUNDATION_MEMBERS), github.event.issue.user.login) }}\n+        uses: andymckay/labeler@master\n+        with:\n+          add-labels: \"Silver Foundation Member\"\n\\ No newline at end of file\ndiff --git a/src/catalog/catalog_set.cpp b/src/catalog/catalog_set.cpp\nindex 325c55d58b66..4736dda8f148 100644\n--- a/src/catalog/catalog_set.cpp\n+++ b/src/catalog/catalog_set.cpp\n@@ -271,7 +271,19 @@ void CatalogSet::CleanupEntry(CatalogEntry *catalog_entry) {\n \t\t\t// delete the entry from the dependency manager, if it is not deleted yet\n \t\t\tcatalog_entry->catalog->dependency_manager->EraseObject(catalog_entry);\n \t\t}\n-\t\tcatalog_entry->parent->child = move(catalog_entry->child);\n+\t\tauto parent = catalog_entry->parent;\n+\t\tparent->child = move(catalog_entry->child);\n+\t\tif (parent->deleted && !parent->child && !parent->parent) {\n+\t\t\tauto mapping_entry = mapping.find(parent->name);\n+\t\t\tD_ASSERT(mapping_entry != mapping.end());\n+\t\t\tauto index = mapping_entry->second->index;\n+\t\t\tauto entry = entries.find(index);\n+\t\t\tD_ASSERT(entry != entries.end());\n+\t\t\tif (entry->second.get() == parent) {\n+\t\t\t\tmapping.erase(mapping_entry);\n+\t\t\t\tentries.erase(entry);\n+\t\t\t}\n+\t\t}\n \t}\n }\n \ndiff --git a/src/execution/operator/aggregate/physical_streaming_window.cpp b/src/execution/operator/aggregate/physical_streaming_window.cpp\nindex 0e1f29251b35..3511eda9bddd 100644\n--- a/src/execution/operator/aggregate/physical_streaming_window.cpp\n+++ b/src/execution/operator/aggregate/physical_streaming_window.cpp\n@@ -12,9 +12,18 @@ PhysicalStreamingWindow::PhysicalStreamingWindow(vector<LogicalType> types, vect\n     : PhysicalOperator(type, move(types), estimated_cardinality), select_list(move(select_list)) {\n }\n \n+class StreamingWindowGlobalState : public GlobalOperatorState {\n+public:\n+\tStreamingWindowGlobalState() : row_number(1) {\n+\t}\n+\n+\t//! The next row number.\n+\tstd::atomic<int64_t> row_number;\n+};\n+\n class StreamingWindowState : public OperatorState {\n public:\n-\tStreamingWindowState() : initialized(false), row_number(1) {\n+\tStreamingWindowState() : initialized(false) {\n \t}\n \n \tvoid Initialize(DataChunk &input, const vector<unique_ptr<Expression>> &expressions) {\n@@ -45,16 +54,20 @@ class StreamingWindowState : public OperatorState {\n \n public:\n \tbool initialized;\n-\tint64_t row_number;\n \tvector<unique_ptr<Vector>> const_vectors;\n };\n \n+unique_ptr<GlobalOperatorState> PhysicalStreamingWindow::GetGlobalOperatorState(ClientContext &context) const {\n+\treturn make_unique<StreamingWindowGlobalState>();\n+}\n+\n unique_ptr<OperatorState> PhysicalStreamingWindow::GetOperatorState(ClientContext &context) const {\n \treturn make_unique<StreamingWindowState>();\n }\n \n OperatorResultType PhysicalStreamingWindow::Execute(ExecutionContext &context, DataChunk &input, DataChunk &chunk,\n-                                                    OperatorState &state_p) const {\n+                                                    GlobalOperatorState &gstate_p, OperatorState &state_p) const {\n+\tauto &gstate = (StreamingWindowGlobalState &)gstate_p;\n \tauto &state = (StreamingWindowState &)state_p;\n \tif (!state.initialized) {\n \t\tstate.Initialize(input, select_list);\n@@ -81,7 +94,7 @@ OperatorResultType PhysicalStreamingWindow::Execute(ExecutionContext &context, D\n \t\t\t// Set row numbers\n \t\t\tauto rdata = FlatVector::GetData<int64_t>(chunk.data[col_idx]);\n \t\t\tfor (idx_t i = 0; i < count; i++) {\n-\t\t\t\trdata[i] = state.row_number + i;\n+\t\t\t\trdata[i] = gstate.row_number + i;\n \t\t\t}\n \t\t\tbreak;\n \t\t}\n@@ -89,7 +102,7 @@ OperatorResultType PhysicalStreamingWindow::Execute(ExecutionContext &context, D\n \t\t\tthrow NotImplementedException(\"%s for StreamingWindow\", ExpressionTypeToString(expr.GetExpressionType()));\n \t\t}\n \t}\n-\tstate.row_number += count;\n+\tgstate.row_number += count;\n \tchunk.SetCardinality(count);\n \treturn OperatorResultType::NEED_MORE_INPUT;\n }\ndiff --git a/src/execution/operator/filter/physical_filter.cpp b/src/execution/operator/filter/physical_filter.cpp\nindex 9a467e6ea6ba..62d39c2ec022 100644\n--- a/src/execution/operator/filter/physical_filter.cpp\n+++ b/src/execution/operator/filter/physical_filter.cpp\n@@ -39,7 +39,7 @@ unique_ptr<OperatorState> PhysicalFilter::GetOperatorState(ClientContext &contex\n }\n \n OperatorResultType PhysicalFilter::Execute(ExecutionContext &context, DataChunk &input, DataChunk &chunk,\n-                                           OperatorState &state_p) const {\n+                                           GlobalOperatorState &gstate, OperatorState &state_p) const {\n \tauto &state = (FilterState &)state_p;\n \tidx_t result_count = state.executor.SelectExpression(input, state.sel);\n \tif (result_count == input.size()) {\ndiff --git a/src/execution/operator/helper/physical_streaming_sample.cpp b/src/execution/operator/helper/physical_streaming_sample.cpp\nindex 99e94d60e933..d251d5be4070 100644\n--- a/src/execution/operator/helper/physical_streaming_sample.cpp\n+++ b/src/execution/operator/helper/physical_streaming_sample.cpp\n@@ -53,7 +53,7 @@ unique_ptr<OperatorState> PhysicalStreamingSample::GetOperatorState(ClientContex\n }\n \n OperatorResultType PhysicalStreamingSample::Execute(ExecutionContext &context, DataChunk &input, DataChunk &chunk,\n-                                                    OperatorState &state) const {\n+                                                    GlobalOperatorState &gstate, OperatorState &state) const {\n \tswitch (method) {\n \tcase SampleMethod::BERNOULLI_SAMPLE:\n \t\tBernoulliSample(input, chunk, state);\ndiff --git a/src/execution/operator/join/physical_blockwise_nl_join.cpp b/src/execution/operator/join/physical_blockwise_nl_join.cpp\nindex dd447765cf3c..998e553b1168 100644\n--- a/src/execution/operator/join/physical_blockwise_nl_join.cpp\n+++ b/src/execution/operator/join/physical_blockwise_nl_join.cpp\n@@ -92,7 +92,7 @@ unique_ptr<OperatorState> PhysicalBlockwiseNLJoin::GetOperatorState(ClientContex\n }\n \n OperatorResultType PhysicalBlockwiseNLJoin::Execute(ExecutionContext &context, DataChunk &input, DataChunk &chunk,\n-                                                    OperatorState &state_p) const {\n+                                                    GlobalOperatorState &gstate_p, OperatorState &state_p) const {\n \tD_ASSERT(input.size() > 0);\n \tauto &state = (BlockwiseNLJoinState &)state_p;\n \tauto &gstate = (BlockwiseNLJoinGlobalState &)*sink_state;\ndiff --git a/src/execution/operator/join/physical_cross_product.cpp b/src/execution/operator/join/physical_cross_product.cpp\nindex 130fa7fc4c40..43a4d4ddc917 100644\n--- a/src/execution/operator/join/physical_cross_product.cpp\n+++ b/src/execution/operator/join/physical_cross_product.cpp\n@@ -51,7 +51,7 @@ unique_ptr<OperatorState> PhysicalCrossProduct::GetOperatorState(ClientContext &\n }\n \n OperatorResultType PhysicalCrossProduct::Execute(ExecutionContext &context, DataChunk &input, DataChunk &chunk,\n-                                                 OperatorState &state_p) const {\n+                                                 GlobalOperatorState &gstate, OperatorState &state_p) const {\n \tauto &state = (CrossProductOperatorState &)state_p;\n \tauto &sink = (CrossProductGlobalState &)*sink_state;\n \tauto &right_collection = sink.rhs_materialized;\ndiff --git a/src/execution/operator/join/physical_hash_join.cpp b/src/execution/operator/join/physical_hash_join.cpp\nindex 877b5850fa66..599b797a261b 100644\n--- a/src/execution/operator/join/physical_hash_join.cpp\n+++ b/src/execution/operator/join/physical_hash_join.cpp\n@@ -216,7 +216,7 @@ unique_ptr<OperatorState> PhysicalHashJoin::GetOperatorState(ClientContext &cont\n }\n \n OperatorResultType PhysicalHashJoin::Execute(ExecutionContext &context, DataChunk &input, DataChunk &chunk,\n-                                             OperatorState &state_p) const {\n+                                             GlobalOperatorState &gstate, OperatorState &state_p) const {\n \tauto &state = (PhysicalHashJoinState &)state_p;\n \tauto &sink = (HashJoinGlobalState &)*sink_state;\n \tD_ASSERT(sink.finalized);\ndiff --git a/src/execution/operator/join/physical_iejoin.cpp b/src/execution/operator/join/physical_iejoin.cpp\nindex a9850b3976e5..776af00178a1 100644\n--- a/src/execution/operator/join/physical_iejoin.cpp\n+++ b/src/execution/operator/join/physical_iejoin.cpp\n@@ -1166,7 +1166,7 @@ void PhysicalIEJoin::ResolveComplexJoin(ExecutionContext &context, DataChunk &ch\n }\n \n OperatorResultType PhysicalIEJoin::Execute(ExecutionContext &context, DataChunk &input, DataChunk &chunk,\n-                                           OperatorState &state) const {\n+                                           GlobalOperatorState &gstate, OperatorState &state) const {\n \treturn OperatorResultType::FINISHED;\n }\n \ndiff --git a/src/execution/operator/join/physical_index_join.cpp b/src/execution/operator/join/physical_index_join.cpp\nindex 409121d15571..804f709c3d11 100644\n--- a/src/execution/operator/join/physical_index_join.cpp\n+++ b/src/execution/operator/join/physical_index_join.cpp\n@@ -174,7 +174,7 @@ void PhysicalIndexJoin::GetRHSMatches(ExecutionContext &context, DataChunk &inpu\n }\n \n OperatorResultType PhysicalIndexJoin::Execute(ExecutionContext &context, DataChunk &input, DataChunk &chunk,\n-                                              OperatorState &state_p) const {\n+                                              GlobalOperatorState &gstate, OperatorState &state_p) const {\n \tauto &state = (IndexJoinOperatorState &)state_p;\n \n \tstate.result_size = 0;\ndiff --git a/src/execution/operator/join/physical_nested_loop_join.cpp b/src/execution/operator/join/physical_nested_loop_join.cpp\nindex f5d7d54e38eb..0ed0b5f32ad6 100644\n--- a/src/execution/operator/join/physical_nested_loop_join.cpp\n+++ b/src/execution/operator/join/physical_nested_loop_join.cpp\n@@ -237,7 +237,7 @@ unique_ptr<OperatorState> PhysicalNestedLoopJoin::GetOperatorState(ClientContext\n }\n \n OperatorResultType PhysicalNestedLoopJoin::Execute(ExecutionContext &context, DataChunk &input, DataChunk &chunk,\n-                                                   OperatorState &state_p) const {\n+                                                   GlobalOperatorState &gstate_p, OperatorState &state_p) const {\n \tauto &gstate = (NestedLoopJoinGlobalState &)*sink_state;\n \n \tif (gstate.right_chunks.Count() == 0) {\ndiff --git a/src/execution/operator/join/physical_piecewise_merge_join.cpp b/src/execution/operator/join/physical_piecewise_merge_join.cpp\nindex f3cb82dfdab7..3a4456db2bca 100644\n--- a/src/execution/operator/join/physical_piecewise_merge_join.cpp\n+++ b/src/execution/operator/join/physical_piecewise_merge_join.cpp\n@@ -934,7 +934,7 @@ OperatorResultType PhysicalPiecewiseMergeJoin::ResolveComplexJoin(ExecutionConte\n }\n \n OperatorResultType PhysicalPiecewiseMergeJoin::Execute(ExecutionContext &context, DataChunk &input, DataChunk &chunk,\n-                                                       OperatorState &state) const {\n+                                                       GlobalOperatorState &gstate_p, OperatorState &state) const {\n \tauto &gstate = (MergeJoinGlobalState &)*sink_state;\n \n \tif (gstate.Count() == 0) {\ndiff --git a/src/execution/operator/projection/physical_projection.cpp b/src/execution/operator/projection/physical_projection.cpp\nindex d5be51d27e3d..b4e557564716 100644\n--- a/src/execution/operator/projection/physical_projection.cpp\n+++ b/src/execution/operator/projection/physical_projection.cpp\n@@ -24,7 +24,7 @@ PhysicalProjection::PhysicalProjection(vector<LogicalType> types, vector<unique_\n }\n \n OperatorResultType PhysicalProjection::Execute(ExecutionContext &context, DataChunk &input, DataChunk &chunk,\n-                                               OperatorState &state_p) const {\n+                                               GlobalOperatorState &gstate, OperatorState &state_p) const {\n \tauto &state = (ProjectionState &)state_p;\n \tstate.executor.Execute(input, chunk);\n \treturn OperatorResultType::NEED_MORE_INPUT;\ndiff --git a/src/execution/operator/projection/physical_tableinout_function.cpp b/src/execution/operator/projection/physical_tableinout_function.cpp\nindex 9e6c2c485ce0..036e8741d5a3 100644\n--- a/src/execution/operator/projection/physical_tableinout_function.cpp\n+++ b/src/execution/operator/projection/physical_tableinout_function.cpp\n@@ -23,7 +23,7 @@ unique_ptr<OperatorState> PhysicalTableInOutFunction::GetOperatorState(ClientCon\n }\n \n OperatorResultType PhysicalTableInOutFunction::Execute(ExecutionContext &context, DataChunk &input, DataChunk &chunk,\n-                                                       OperatorState &state_p) const {\n+                                                       GlobalOperatorState &gstate, OperatorState &state_p) const {\n \tauto &state = (TableInOutFunctionState &)state_p;\n \n \tif (!state.initialized) {\ndiff --git a/src/execution/operator/projection/physical_unnest.cpp b/src/execution/operator/projection/physical_unnest.cpp\nindex 19bd9cf6bb77..c51d9b3ba8e3 100644\n--- a/src/execution/operator/projection/physical_unnest.cpp\n+++ b/src/execution/operator/projection/physical_unnest.cpp\n@@ -150,7 +150,7 @@ unique_ptr<OperatorState> PhysicalUnnest::GetOperatorState(ClientContext &contex\n }\n \n OperatorResultType PhysicalUnnest::Execute(ExecutionContext &context, DataChunk &input, DataChunk &chunk,\n-                                           OperatorState &state_p) const {\n+                                           GlobalOperatorState &gstate, OperatorState &state_p) const {\n \tauto &state = (UnnestOperatorState &)state_p;\n \tdo {\n \t\tif (state.first_fetch) {\ndiff --git a/src/execution/operator/scan/physical_expression_scan.cpp b/src/execution/operator/scan/physical_expression_scan.cpp\nindex 6bed84636c2c..e635b0e0da25 100644\n--- a/src/execution/operator/scan/physical_expression_scan.cpp\n+++ b/src/execution/operator/scan/physical_expression_scan.cpp\n@@ -21,7 +21,7 @@ unique_ptr<OperatorState> PhysicalExpressionScan::GetOperatorState(ClientContext\n }\n \n OperatorResultType PhysicalExpressionScan::Execute(ExecutionContext &context, DataChunk &input, DataChunk &chunk,\n-                                                   OperatorState &state_p) const {\n+                                                   GlobalOperatorState &gstate, OperatorState &state_p) const {\n \tauto &state = (ExpressionScanState &)state_p;\n \n \tfor (; chunk.size() + input.size() <= STANDARD_VECTOR_SIZE && state.expression_index < expressions.size();\ndiff --git a/src/execution/operator/set/physical_recursive_cte.cpp b/src/execution/operator/set/physical_recursive_cte.cpp\nindex a49b6cfb452d..a7809b99d206 100644\n--- a/src/execution/operator/set/physical_recursive_cte.cpp\n+++ b/src/execution/operator/set/physical_recursive_cte.cpp\n@@ -115,6 +115,11 @@ void PhysicalRecursiveCTE::ExecuteRecursivePipelines(ExecutionContext &context)\n \t\t\t// reset the sink state for any intermediate sinks\n \t\t\tsink->sink_state = sink->GetGlobalSinkState(context.client);\n \t\t}\n+\t\tfor (auto &op : pipeline->GetOperators()) {\n+\t\t\tif (op) {\n+\t\t\t\top->op_state = op->GetGlobalOperatorState(context.client);\n+\t\t\t}\n+\t\t}\n \t\tpipeline->Reset();\n \t}\n \tauto &executor = pipelines[0]->executor;\ndiff --git a/src/execution/physical_operator.cpp b/src/execution/physical_operator.cpp\nindex 29743aa8c543..8624663f1a52 100644\n--- a/src/execution/physical_operator.cpp\n+++ b/src/execution/physical_operator.cpp\n@@ -32,8 +32,12 @@ unique_ptr<OperatorState> PhysicalOperator::GetOperatorState(ClientContext &cont\n \treturn make_unique<OperatorState>();\n }\n \n+unique_ptr<GlobalOperatorState> PhysicalOperator::GetGlobalOperatorState(ClientContext &context) const {\n+\treturn make_unique<GlobalOperatorState>();\n+}\n+\n OperatorResultType PhysicalOperator::Execute(ExecutionContext &context, DataChunk &input, DataChunk &chunk,\n-                                             OperatorState &state) const {\n+                                             GlobalOperatorState &gstate, OperatorState &state) const {\n \tthrow InternalException(\"Calling Execute on a node that is not an operator!\");\n }\n // LCOV_EXCL_STOP\ndiff --git a/src/function/scalar/list/list_aggregates.cpp b/src/function/scalar/list/list_aggregates.cpp\nindex 48651560d359..34f542df1842 100644\n--- a/src/function/scalar/list/list_aggregates.cpp\n+++ b/src/function/scalar/list/list_aggregates.cpp\n@@ -211,7 +211,7 @@ static unique_ptr<FunctionData> ListAggregateBind(ClientContext &context, Scalar\n \n ScalarFunction ListAggregateFun::GetFunction() {\n \treturn ScalarFunction({LogicalType::LIST(LogicalType::ANY), LogicalType::VARCHAR}, LogicalType::ANY,\n-\t                      ListAggregateFunction, false, ListAggregateBind, nullptr, nullptr, nullptr);\n+\t                      ListAggregateFunction, false, false, ListAggregateBind, nullptr, nullptr, nullptr);\n }\n \n void ListAggregateFun::RegisterFunction(BuiltinFunctions &set) {\ndiff --git a/src/include/duckdb/execution/operator/aggregate/physical_streaming_window.hpp b/src/include/duckdb/execution/operator/aggregate/physical_streaming_window.hpp\nindex 2ebefb8c58f1..ddf5cbaa1204 100644\n--- a/src/include/duckdb/execution/operator/aggregate/physical_streaming_window.hpp\n+++ b/src/include/duckdb/execution/operator/aggregate/physical_streaming_window.hpp\n@@ -24,10 +24,11 @@ class PhysicalStreamingWindow : public PhysicalOperator {\n \tvector<unique_ptr<Expression>> select_list;\n \n public:\n+\tunique_ptr<GlobalOperatorState> GetGlobalOperatorState(ClientContext &context) const override;\n \tunique_ptr<OperatorState> GetOperatorState(ClientContext &context) const override;\n \n \tOperatorResultType Execute(ExecutionContext &context, DataChunk &input, DataChunk &chunk,\n-\t                           OperatorState &state) const override;\n+\t                           GlobalOperatorState &gstate, OperatorState &state) const override;\n \n \tstring ParamsToString() const override;\n };\ndiff --git a/src/include/duckdb/execution/operator/filter/physical_filter.hpp b/src/include/duckdb/execution/operator/filter/physical_filter.hpp\nindex 64df420ac64f..9848704da7b8 100644\n--- a/src/include/duckdb/execution/operator/filter/physical_filter.hpp\n+++ b/src/include/duckdb/execution/operator/filter/physical_filter.hpp\n@@ -27,7 +27,7 @@ class PhysicalFilter : public PhysicalOperator {\n \tunique_ptr<OperatorState> GetOperatorState(ClientContext &context) const override;\n \n \tOperatorResultType Execute(ExecutionContext &context, DataChunk &input, DataChunk &chunk,\n-\t                           OperatorState &state) const override;\n+\t                           GlobalOperatorState &gstate, OperatorState &state) const override;\n \n \tbool ParallelOperator() const override {\n \t\treturn true;\ndiff --git a/src/include/duckdb/execution/operator/helper/physical_streaming_sample.hpp b/src/include/duckdb/execution/operator/helper/physical_streaming_sample.hpp\nindex 66bc5cc7663a..6ab9589dcbb3 100644\n--- a/src/include/duckdb/execution/operator/helper/physical_streaming_sample.hpp\n+++ b/src/include/duckdb/execution/operator/helper/physical_streaming_sample.hpp\n@@ -27,7 +27,7 @@ class PhysicalStreamingSample : public PhysicalOperator {\n \t// Operator interface\n \tunique_ptr<OperatorState> GetOperatorState(ClientContext &context) const override;\n \tOperatorResultType Execute(ExecutionContext &context, DataChunk &input, DataChunk &chunk,\n-\t                           OperatorState &state) const override;\n+\t                           GlobalOperatorState &gstate, OperatorState &state) const override;\n \n \tbool ParallelOperator() const override {\n \t\treturn true;\ndiff --git a/src/include/duckdb/execution/operator/join/physical_blockwise_nl_join.hpp b/src/include/duckdb/execution/operator/join/physical_blockwise_nl_join.hpp\nindex 3c06a9bdbe6d..dd2333d48239 100644\n--- a/src/include/duckdb/execution/operator/join/physical_blockwise_nl_join.hpp\n+++ b/src/include/duckdb/execution/operator/join/physical_blockwise_nl_join.hpp\n@@ -27,7 +27,7 @@ class PhysicalBlockwiseNLJoin : public PhysicalJoin {\n \t// Operator Interface\n \tunique_ptr<OperatorState> GetOperatorState(ClientContext &context) const override;\n \tOperatorResultType Execute(ExecutionContext &context, DataChunk &input, DataChunk &chunk,\n-\t                           OperatorState &state) const override;\n+\t                           GlobalOperatorState &gstate, OperatorState &state) const override;\n \n \tbool ParallelOperator() const override {\n \t\treturn true;\ndiff --git a/src/include/duckdb/execution/operator/join/physical_cross_product.hpp b/src/include/duckdb/execution/operator/join/physical_cross_product.hpp\nindex e80e1f831aeb..434abdc9e26b 100644\n--- a/src/include/duckdb/execution/operator/join/physical_cross_product.hpp\n+++ b/src/include/duckdb/execution/operator/join/physical_cross_product.hpp\n@@ -22,7 +22,7 @@ class PhysicalCrossProduct : public PhysicalOperator {\n \t// Operator Interface\n \tunique_ptr<OperatorState> GetOperatorState(ClientContext &context) const override;\n \tOperatorResultType Execute(ExecutionContext &context, DataChunk &input, DataChunk &chunk,\n-\t                           OperatorState &state) const override;\n+\t                           GlobalOperatorState &gstate, OperatorState &state) const override;\n \n \tbool ParallelOperator() const override {\n \t\treturn true;\ndiff --git a/src/include/duckdb/execution/operator/join/physical_hash_join.hpp b/src/include/duckdb/execution/operator/join/physical_hash_join.hpp\nindex b043571ed2b1..336f577ea5e0 100644\n--- a/src/include/duckdb/execution/operator/join/physical_hash_join.hpp\n+++ b/src/include/duckdb/execution/operator/join/physical_hash_join.hpp\n@@ -43,7 +43,7 @@ class PhysicalHashJoin : public PhysicalComparisonJoin {\n \t// Operator Interface\n \tunique_ptr<OperatorState> GetOperatorState(ClientContext &context) const override;\n \tOperatorResultType Execute(ExecutionContext &context, DataChunk &input, DataChunk &chunk,\n-\t                           OperatorState &state) const override;\n+\t                           GlobalOperatorState &gstate, OperatorState &state) const override;\n \n \tbool ParallelOperator() const override {\n \t\treturn true;\ndiff --git a/src/include/duckdb/execution/operator/join/physical_iejoin.hpp b/src/include/duckdb/execution/operator/join/physical_iejoin.hpp\nindex eb6933ca0d13..29a4a0f9e7ca 100644\n--- a/src/include/duckdb/execution/operator/join/physical_iejoin.hpp\n+++ b/src/include/duckdb/execution/operator/join/physical_iejoin.hpp\n@@ -29,7 +29,7 @@ class PhysicalIEJoin : public PhysicalComparisonJoin {\n public:\n \t// Operator Interface\n \tOperatorResultType Execute(ExecutionContext &context, DataChunk &input, DataChunk &chunk,\n-\t                           OperatorState &state) const override;\n+\t                           GlobalOperatorState &gstate, OperatorState &state) const override;\n \n public:\n \t// Source interface\ndiff --git a/src/include/duckdb/execution/operator/join/physical_index_join.hpp b/src/include/duckdb/execution/operator/join/physical_index_join.hpp\nindex aa85139686e2..f93b33e0f7fe 100644\n--- a/src/include/duckdb/execution/operator/join/physical_index_join.hpp\n+++ b/src/include/duckdb/execution/operator/join/physical_index_join.hpp\n@@ -52,7 +52,7 @@ class PhysicalIndexJoin : public PhysicalOperator {\n public:\n \tunique_ptr<OperatorState> GetOperatorState(ClientContext &context) const override;\n \tOperatorResultType Execute(ExecutionContext &context, DataChunk &input, DataChunk &chunk,\n-\t                           OperatorState &state) const override;\n+\t                           GlobalOperatorState &gstate, OperatorState &state) const override;\n \n \tbool ParallelOperator() const override {\n \t\treturn true;\ndiff --git a/src/include/duckdb/execution/operator/join/physical_nested_loop_join.hpp b/src/include/duckdb/execution/operator/join/physical_nested_loop_join.hpp\nindex b19cba90a698..3dddc751004a 100644\n--- a/src/include/duckdb/execution/operator/join/physical_nested_loop_join.hpp\n+++ b/src/include/duckdb/execution/operator/join/physical_nested_loop_join.hpp\n@@ -27,7 +27,7 @@ class PhysicalNestedLoopJoin : public PhysicalComparisonJoin {\n \t// Operator Interface\n \tunique_ptr<OperatorState> GetOperatorState(ClientContext &context) const override;\n \tOperatorResultType Execute(ExecutionContext &context, DataChunk &input, DataChunk &chunk,\n-\t                           OperatorState &state) const override;\n+\t                           GlobalOperatorState &gstate, OperatorState &state) const override;\n \n \tbool ParallelOperator() const override {\n \t\treturn true;\ndiff --git a/src/include/duckdb/execution/operator/join/physical_piecewise_merge_join.hpp b/src/include/duckdb/execution/operator/join/physical_piecewise_merge_join.hpp\nindex c32125ee4fb3..b63e2fa8ec80 100644\n--- a/src/include/duckdb/execution/operator/join/physical_piecewise_merge_join.hpp\n+++ b/src/include/duckdb/execution/operator/join/physical_piecewise_merge_join.hpp\n@@ -31,7 +31,7 @@ class PhysicalPiecewiseMergeJoin : public PhysicalComparisonJoin {\n \t// Operator Interface\n \tunique_ptr<OperatorState> GetOperatorState(ClientContext &context) const override;\n \tOperatorResultType Execute(ExecutionContext &context, DataChunk &input, DataChunk &chunk,\n-\t                           OperatorState &state) const override;\n+\t                           GlobalOperatorState &gstate, OperatorState &state) const override;\n \n \tbool ParallelOperator() const override {\n \t\treturn true;\ndiff --git a/src/include/duckdb/execution/operator/projection/physical_projection.hpp b/src/include/duckdb/execution/operator/projection/physical_projection.hpp\nindex 7ec215172130..8dea64ed758f 100644\n--- a/src/include/duckdb/execution/operator/projection/physical_projection.hpp\n+++ b/src/include/duckdb/execution/operator/projection/physical_projection.hpp\n@@ -23,7 +23,7 @@ class PhysicalProjection : public PhysicalOperator {\n public:\n \tunique_ptr<OperatorState> GetOperatorState(ClientContext &context) const override;\n \tOperatorResultType Execute(ExecutionContext &context, DataChunk &input, DataChunk &chunk,\n-\t                           OperatorState &state) const override;\n+\t                           GlobalOperatorState &gstate, OperatorState &state) const override;\n \n \tbool ParallelOperator() const override {\n \t\treturn true;\ndiff --git a/src/include/duckdb/execution/operator/projection/physical_tableinout_function.hpp b/src/include/duckdb/execution/operator/projection/physical_tableinout_function.hpp\nindex 8daf6630d7e5..ca90a77494f6 100644\n--- a/src/include/duckdb/execution/operator/projection/physical_tableinout_function.hpp\n+++ b/src/include/duckdb/execution/operator/projection/physical_tableinout_function.hpp\n@@ -24,7 +24,7 @@ class PhysicalTableInOutFunction : public PhysicalOperator {\n public:\n \tunique_ptr<OperatorState> GetOperatorState(ClientContext &context) const override;\n \tOperatorResultType Execute(ExecutionContext &context, DataChunk &input, DataChunk &chunk,\n-\t                           OperatorState &state) const override;\n+\t                           GlobalOperatorState &gstate, OperatorState &state) const override;\n \n \tbool ParallelOperator() const override {\n \t\treturn true;\ndiff --git a/src/include/duckdb/execution/operator/projection/physical_unnest.hpp b/src/include/duckdb/execution/operator/projection/physical_unnest.hpp\nindex e0dd9a0303a3..4af41c1bcc85 100644\n--- a/src/include/duckdb/execution/operator/projection/physical_unnest.hpp\n+++ b/src/include/duckdb/execution/operator/projection/physical_unnest.hpp\n@@ -26,7 +26,7 @@ class PhysicalUnnest : public PhysicalOperator {\n public:\n \tunique_ptr<OperatorState> GetOperatorState(ClientContext &context) const override;\n \tOperatorResultType Execute(ExecutionContext &context, DataChunk &input, DataChunk &chunk,\n-\t                           OperatorState &state) const override;\n+\t                           GlobalOperatorState &gstate, OperatorState &state) const override;\n \n \tbool ParallelOperator() const override {\n \t\treturn true;\ndiff --git a/src/include/duckdb/execution/operator/scan/physical_expression_scan.hpp b/src/include/duckdb/execution/operator/scan/physical_expression_scan.hpp\nindex 141c966ba24c..aa790b1cc859 100644\n--- a/src/include/duckdb/execution/operator/scan/physical_expression_scan.hpp\n+++ b/src/include/duckdb/execution/operator/scan/physical_expression_scan.hpp\n@@ -29,7 +29,7 @@ class PhysicalExpressionScan : public PhysicalOperator {\n public:\n \tunique_ptr<OperatorState> GetOperatorState(ClientContext &context) const override;\n \tOperatorResultType Execute(ExecutionContext &context, DataChunk &input, DataChunk &chunk,\n-\t                           OperatorState &state) const override;\n+\t                           GlobalOperatorState &gstate, OperatorState &state) const override;\n \n \tbool ParallelOperator() const override {\n \t\treturn true;\ndiff --git a/src/include/duckdb/execution/physical_operator.hpp b/src/include/duckdb/execution/physical_operator.hpp\nindex debef8894bd6..ca7dec6b225f 100644\n--- a/src/include/duckdb/execution/physical_operator.hpp\n+++ b/src/include/duckdb/execution/physical_operator.hpp\n@@ -30,6 +30,12 @@ class OperatorState {\n \t}\n };\n \n+class GlobalOperatorState {\n+public:\n+\tvirtual ~GlobalOperatorState() {\n+\t}\n+};\n+\n class GlobalSinkState {\n public:\n \tGlobalSinkState() : state(SinkFinalizeType::READY) {\n@@ -83,6 +89,8 @@ class PhysicalOperator {\n \tidx_t estimated_cardinality;\n \t//! The global sink state of this operator\n \tunique_ptr<GlobalSinkState> sink_state;\n+\t//! The global state of this operator\n+\tunique_ptr<GlobalOperatorState> op_state;\n \n public:\n \tvirtual string GetName() const;\n@@ -104,8 +112,9 @@ class PhysicalOperator {\n public:\n \t// Operator interface\n \tvirtual unique_ptr<OperatorState> GetOperatorState(ClientContext &context) const;\n+\tvirtual unique_ptr<GlobalOperatorState> GetGlobalOperatorState(ClientContext &context) const;\n \tvirtual OperatorResultType Execute(ExecutionContext &context, DataChunk &input, DataChunk &chunk,\n-\t                                   OperatorState &state) const;\n+\t                                   GlobalOperatorState &gstate, OperatorState &state) const;\n \n \tvirtual bool ParallelOperator() const {\n \t\treturn false;\ndiff --git a/src/include/duckdb/parallel/pipeline.hpp b/src/include/duckdb/parallel/pipeline.hpp\nindex 42ea9e71b41e..710e8c7ba685 100644\n--- a/src/include/duckdb/parallel/pipeline.hpp\n+++ b/src/include/duckdb/parallel/pipeline.hpp\n@@ -27,7 +27,7 @@ class Pipeline : public std::enable_shared_from_this<Pipeline> {\n \tfriend class PipelineFinishEvent;\n \n public:\n-\tPipeline(Executor &execution_context);\n+\texplicit Pipeline(Executor &execution_context);\n \n \tExecutor &executor;\n \ndiff --git a/src/include/duckdb/storage/table/scan_state.hpp b/src/include/duckdb/storage/table/scan_state.hpp\nindex 715677b137a5..d51fb1012701 100644\n--- a/src/include/duckdb/storage/table/scan_state.hpp\n+++ b/src/include/duckdb/storage/table/scan_state.hpp\n@@ -72,9 +72,9 @@ struct ColumnFetchState {\n struct LocalScanState {\n \t~LocalScanState();\n \n-\tvoid SetStorage(LocalTableStorage *storage);\n+\tvoid SetStorage(shared_ptr<LocalTableStorage> storage);\n \tLocalTableStorage *GetStorage() {\n-\t\treturn storage;\n+\t\treturn storage.get();\n \t}\n \n \tidx_t chunk_index;\n@@ -83,7 +83,7 @@ struct LocalScanState {\n \tTableFilterSet *table_filters;\n \n private:\n-\tLocalTableStorage *storage = nullptr;\n+\tshared_ptr<LocalTableStorage> storage;\n };\n \n class RowGroupScanState {\ndiff --git a/src/include/duckdb/transaction/local_storage.hpp b/src/include/duckdb/transaction/local_storage.hpp\nindex 9dc6dc2f4e46..caecb83660cc 100644\n--- a/src/include/duckdb/transaction/local_storage.hpp\n+++ b/src/include/duckdb/transaction/local_storage.hpp\n@@ -16,7 +16,7 @@ class DataTable;\n class WriteAheadLog;\n struct TableAppendState;\n \n-class LocalTableStorage {\n+class LocalTableStorage : public std::enable_shared_from_this<LocalTableStorage> {\n public:\n \texplicit LocalTableStorage(DataTable &table);\n \t~LocalTableStorage();\n@@ -99,7 +99,7 @@ class LocalStorage {\n \n private:\n \tTransaction &transaction;\n-\tunordered_map<DataTable *, unique_ptr<LocalTableStorage>> table_storage;\n+\tunordered_map<DataTable *, shared_ptr<LocalTableStorage>> table_storage;\n \n \tvoid Flush(DataTable &table, LocalTableStorage &storage);\n };\ndiff --git a/src/parallel/executor.cpp b/src/parallel/executor.cpp\nindex 5d3bfdeadc6d..4f58dfda0ecc 100644\n--- a/src/parallel/executor.cpp\n+++ b/src/parallel/executor.cpp\n@@ -426,6 +426,7 @@ void Executor::AddChildPipeline(Pipeline *current) {\n \n void Executor::BuildPipelines(PhysicalOperator *op, Pipeline *current) {\n \tD_ASSERT(current);\n+\top->op_state.reset();\n \tif (op->IsSink()) {\n \t\t// operator is a sink, build a pipeline\n \t\top->sink_state.reset();\ndiff --git a/src/parallel/pipeline.cpp b/src/parallel/pipeline.cpp\nindex 915104673d51..cc1c3a7550b6 100644\n--- a/src/parallel/pipeline.cpp\n+++ b/src/parallel/pipeline.cpp\n@@ -158,6 +158,13 @@ void Pipeline::Reset() {\n \tif (sink && !sink->sink_state) {\n \t\tsink->sink_state = sink->GetGlobalSinkState(GetClientContext());\n \t}\n+\n+\tfor (auto &op : operators) {\n+\t\tif (op && !op->op_state) {\n+\t\t\top->op_state = op->GetGlobalOperatorState(GetClientContext());\n+\t\t}\n+\t}\n+\n \tResetSource();\n }\n \ndiff --git a/src/parallel/pipeline_executor.cpp b/src/parallel/pipeline_executor.cpp\nindex 76fedfe2ed3a..ce4809a1ada4 100644\n--- a/src/parallel/pipeline_executor.cpp\n+++ b/src/parallel/pipeline_executor.cpp\n@@ -272,7 +272,7 @@ OperatorResultType PipelineExecutor::Execute(DataChunk &input, DataChunk &result\n \t\t\t// if current_idx > source_idx, we pass the previous' operators output through the Execute of the current\n \t\t\t// operator\n \t\t\tStartOperator(current_operator);\n-\t\t\tauto result = current_operator->Execute(context, prev_chunk, current_chunk,\n+\t\t\tauto result = current_operator->Execute(context, prev_chunk, current_chunk, *current_operator->op_state,\n \t\t\t                                        *intermediate_states[current_intermediate - 1]);\n \t\t\tEndOperator(current_operator, &current_chunk);\n \t\t\tif (result == OperatorResultType::HAVE_MORE_OUTPUT) {\ndiff --git a/src/storage/compression/validity_uncompressed.cpp b/src/storage/compression/validity_uncompressed.cpp\nindex b1798e5ba50c..386935e43ad5 100644\n--- a/src/storage/compression/validity_uncompressed.cpp\n+++ b/src/storage/compression/validity_uncompressed.cpp\n@@ -237,7 +237,12 @@ void ValidityScanPartial(ColumnSegment &segment, ColumnScanState &state, idx_t s\n \t// the bitwise ops we use below don't work if the vector size is too small\n \tValidityMask source_mask(input_data);\n \tfor (idx_t i = 0; i < scan_count; i++) {\n-\t\tresult_mask.Set(result_offset + i, source_mask.RowIsValid(start + i));\n+\t\tif (!source_mask.RowIsValid(start + i)) {\n+\t\t\tif (result_mask.AllValid()) {\n+\t\t\t\tresult_mask.Initialize(MaxValue<idx_t>(STANDARD_VECTOR_SIZE, result_offset + scan_count));\n+\t\t\t}\n+\t\t\tresult_mask.SetInvalid(result_offset + i);\n+\t\t}\n \t}\n #else\n \t// the code below does what the fallback code above states, but using bitwise ops:\ndiff --git a/src/storage/local_storage.cpp b/src/storage/local_storage.cpp\nindex 8f4831c98477..6bb6816dc760 100644\n--- a/src/storage/local_storage.cpp\n+++ b/src/storage/local_storage.cpp\n@@ -23,7 +23,7 @@ void LocalTableStorage::InitializeScan(LocalScanState &state, TableFilterSet *ta\n \t\t// nothing to scan\n \t\treturn;\n \t}\n-\tstate.SetStorage(this);\n+\tstate.SetStorage(shared_from_this());\n \n \tstate.chunk_index = 0;\n \tstate.max_index = collection.ChunkCount() - 1;\n@@ -47,12 +47,12 @@ LocalScanState::~LocalScanState() {\n \tSetStorage(nullptr);\n }\n \n-void LocalScanState::SetStorage(LocalTableStorage *new_storage) {\n-\tif (storage != nullptr) {\n+void LocalScanState::SetStorage(shared_ptr<LocalTableStorage> new_storage) {\n+\tif (storage) {\n \t\tD_ASSERT(storage->active_scans > 0);\n \t\tstorage->active_scans--;\n \t}\n-\tstorage = new_storage;\n+\tstorage = move(new_storage);\n \tif (storage) {\n \t\tstorage->active_scans++;\n \t}\n@@ -166,7 +166,7 @@ void LocalStorage::Append(DataTable *table, DataChunk &chunk) {\n \tauto entry = table_storage.find(table);\n \tLocalTableStorage *storage;\n \tif (entry == table_storage.end()) {\n-\t\tauto new_storage = make_unique<LocalTableStorage>(*table);\n+\t\tauto new_storage = make_shared<LocalTableStorage>(*table);\n \t\tstorage = new_storage.get();\n \t\ttable_storage.insert(make_pair(table, move(new_storage)));\n \t} else {\n",
  "test_patch": "diff --git a/test/sql/delete/list_delete.test b/test/sql/delete/list_delete.test\nnew file mode 100644\nindex 000000000000..388fa7e34f42\n--- /dev/null\n+++ b/test/sql/delete/list_delete.test\n@@ -0,0 +1,28 @@\n+# name: test/sql/delete/list_delete.test\n+# description: Test list deletions\n+# group: [delete]\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+statement ok\n+CREATE TABLE aggr (k int[]);\n+\n+statement ok\n+INSERT INTO aggr VALUES ([0, 1, 1, 1, 4, 0, 3, 3, 2, 2, 4, 4, 2, 4, 0, 0, 0, 1, 2, 3, 4, 2, 3, 3, 1]);\n+\n+statement ok\n+INSERT INTO aggr VALUES ([]), ([NULL]), (NULL), ([0, 1, 1, 1, 4, NULL, 0, 3, 3, 2, NULL, 2, 4, 4, 2, 4, 0, 0, 0, 1, NULL, 2, 3, 4, 2, 3, 3, 1]);\n+\n+query I\n+SELECT COUNT(k) FROM aggr\n+----\n+4\n+\n+statement ok\n+DELETE FROM aggr;\n+\n+query I\n+SELECT COUNT(k) FROM aggr\n+----\n+0\ndiff --git a/test/sql/window/test_streaming_window.test b/test/sql/window/test_streaming_window.test\nindex 98ddfd3d9244..8d18b37108b6 100644\n--- a/test/sql/window/test_streaming_window.test\n+++ b/test/sql/window/test_streaming_window.test\n@@ -131,3 +131,79 @@ query TT\n explain select last_value(i) over (order by j), first_value(i) over () from integers\n ----\n physical_plan\t<REGEX>:.*STREAMING_WINDOW.*WINDOW.*\n+\n+#\n+# Global state tests from #3275\n+#\n+\n+# Original UNION ALL bug\n+statement ok\n+CREATE TABLE v1(id bigint);\n+\n+statement ok\n+CREATE TABLE v2(id bigint);\n+\n+statement ok\n+INSERT INTO v1 VALUES (11),  (12),  (13);\n+\n+statement ok\n+INSERT INTO v2 VALUES (21),  (22);\n+\n+statement ok\n+CREATE VIEW vertices_view AS\n+  SELECT * FROM v1\n+  UNION ALL\n+  SELECT * FROM v2;\n+\n+query II\n+SELECT id AS sparse_id, row_number() OVER () AS rnum\n+FROM vertices_view;\n+----\n+11\t1\n+12\t2\n+13\t3\n+21\t4\n+22\t5\n+\n+# Recursive CTE\n+query II\n+WITH RECURSIVE rte AS (\n+\tSELECT 1 l, 1::BIGINT r\n+\tUNION  ALL\n+\tSELECT l+1, row_number() OVER()\n+\tFROM rte\n+\tWHERE l < 3\n+)\n+SELECT * FROM rte;\n+----\n+1\t1\n+2\t1\n+3\t1\n+\n+# In a prepared statement that is executed multiple times\n+statement ok\n+PREPARE sw1 AS\n+\tSELECT i, row_number() OVER() AS row_no\n+\tFROM range(10, 20) tbl(i)\n+\tQUALIFY row_no <= ?::BIGINT\n+;\n+\n+query II\n+EXECUTE sw1(10);\n+----\n+10\t1\n+11\t2\n+12\t3\n+13\t4\n+14\t5\n+15\t6\n+16\t7\n+17\t8\n+18\t9\n+19\t10\n+\n+query II\n+EXECUTE sw1(2);\n+----\n+10\t1\n+11\t2\n",
  "problem_statement": "DELETE triggers assertion with STANDARD_VECTOR_SIZE = 2\n#### What happens?\r\n\r\nI created a table and then inserted some lists into that table. This followed by a `DELETE` on that table triggers an assertion. This happens when compiling DuckDB with a `STANDARD_VECTOR_SIZE` of 2. I am assuming that this is a bug because we test DuckDB for different vector sizes.\r\n\r\n#### To Reproduce\r\nSteps to reproduce the behavior.\r\n\r\nChange the `STANDARD_VECTOR_SIZE` in `vector_size.hpp` to 2. Then compile and run the following queries.\r\n\r\n```\r\nCREATE TABLE aggr (k int[]);\r\nINSERT INTO aggr VALUES ([0, 1, 1, 1, 4, 0, 3, 3, 2, 2, 4, 4, 2, 4, 0, 0, 0, 1, 2, 3, 4, 2, 3, 3, 1]);\r\nINSERT INTO aggr VALUES ([]), ([NULL]), (NULL), ([0, 1, 1, 1, 4, NULL, 0, 3, 3, 2, NULL, 2, 4, 4, 2, 4, 0, 0, 0, 1, NULL, 2, 3, 4, 2, 3, 3, 1]);\r\n\r\nDELETE FROM aggr;\r\n```\r\n\r\nWith the following assertion:\r\n```\r\nError: INTERNAL Error: INTERNAL Error: Assertion triggered in file \"/Users/tania/DuckDB/duckdb-master/duckdb/src/include/duckdb/common/types/validity_mask.hpp\" on line 227: row_idx <= STANDARD_VECTOR_SIZE\r\n```\r\n\r\n#### Environment (please complete the following information):\r\n - OS: iOS\r\n - DuckDB Version: 22\r\n - DuckDB Client: CLI\r\n\r\n#### Before Submitting\r\n\r\n- [x] **Have you tried this on the latest `master` branch?**\r\n* **Python**: `pip install duckdb --upgrade --pre`\r\n* **R**: `install.packages(\"https://github.com/duckdb/duckdb/releases/download/master-builds/duckdb_r_src.tar.gz\", repos = NULL)`\r\n* **Other Platforms**: You can find binaries [here](https://github.com/duckdb/duckdb/releases/tag/master-builds) or compile from source.\r\n\r\n- [x] **Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?**\r\n\n",
  "hints_text": "",
  "created_at": "2022-03-28T19:39:08Z"
}