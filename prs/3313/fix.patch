diff --git a/.github/workflows/Labels.yml b/.github/workflows/Labels.yml
new file mode 100644
index 000000000000..a99d2dd58b3a
--- /dev/null
+++ b/.github/workflows/Labels.yml
@@ -0,0 +1,26 @@
+name: Labels
+
+on:
+  issues:
+    types: [opened]
+
+jobs:
+  change-label:
+    runs-on: ubuntu-latest
+
+    env:
+      GOLD_FOUNDATION_MEMBERS: ${{ secrets.GOLD_FOUNDATION_MEMBERS }}
+      SILVER_FOUNDATION_MEMBERS: ${{ secrets.SILVER_FOUNDATION_MEMBERS }}
+
+    steps:
+      - name: Label Issue Gold Foundation Member
+        if: ${{ contains(fromJson(env.GOLD_FOUNDATION_MEMBERS), github.event.issue.user.login) }}
+        uses: andymckay/labeler@master
+        with:
+          add-labels: "Gold Foundation Member"
+
+      - name: Label Issue Silver Foundation Member
+        if: ${{ contains(fromJson(env.SILVER_FOUNDATION_MEMBERS), github.event.issue.user.login) }}
+        uses: andymckay/labeler@master
+        with:
+          add-labels: "Silver Foundation Member"
\ No newline at end of file
diff --git a/src/catalog/catalog_set.cpp b/src/catalog/catalog_set.cpp
index 325c55d58b66..4736dda8f148 100644
--- a/src/catalog/catalog_set.cpp
+++ b/src/catalog/catalog_set.cpp
@@ -271,7 +271,19 @@ void CatalogSet::CleanupEntry(CatalogEntry *catalog_entry) {
 			// delete the entry from the dependency manager, if it is not deleted yet
 			catalog_entry->catalog->dependency_manager->EraseObject(catalog_entry);
 		}
-		catalog_entry->parent->child = move(catalog_entry->child);
+		auto parent = catalog_entry->parent;
+		parent->child = move(catalog_entry->child);
+		if (parent->deleted && !parent->child && !parent->parent) {
+			auto mapping_entry = mapping.find(parent->name);
+			D_ASSERT(mapping_entry != mapping.end());
+			auto index = mapping_entry->second->index;
+			auto entry = entries.find(index);
+			D_ASSERT(entry != entries.end());
+			if (entry->second.get() == parent) {
+				mapping.erase(mapping_entry);
+				entries.erase(entry);
+			}
+		}
 	}
 }
 
diff --git a/src/execution/operator/aggregate/physical_streaming_window.cpp b/src/execution/operator/aggregate/physical_streaming_window.cpp
index 0e1f29251b35..3511eda9bddd 100644
--- a/src/execution/operator/aggregate/physical_streaming_window.cpp
+++ b/src/execution/operator/aggregate/physical_streaming_window.cpp
@@ -12,9 +12,18 @@ PhysicalStreamingWindow::PhysicalStreamingWindow(vector<LogicalType> types, vect
     : PhysicalOperator(type, move(types), estimated_cardinality), select_list(move(select_list)) {
 }
 
+class StreamingWindowGlobalState : public GlobalOperatorState {
+public:
+	StreamingWindowGlobalState() : row_number(1) {
+	}
+
+	//! The next row number.
+	std::atomic<int64_t> row_number;
+};
+
 class StreamingWindowState : public OperatorState {
 public:
-	StreamingWindowState() : initialized(false), row_number(1) {
+	StreamingWindowState() : initialized(false) {
 	}
 
 	void Initialize(DataChunk &input, const vector<unique_ptr<Expression>> &expressions) {
@@ -45,16 +54,20 @@ class StreamingWindowState : public OperatorState {
 
 public:
 	bool initialized;
-	int64_t row_number;
 	vector<unique_ptr<Vector>> const_vectors;
 };
 
+unique_ptr<GlobalOperatorState> PhysicalStreamingWindow::GetGlobalOperatorState(ClientContext &context) const {
+	return make_unique<StreamingWindowGlobalState>();
+}
+
 unique_ptr<OperatorState> PhysicalStreamingWindow::GetOperatorState(ClientContext &context) const {
 	return make_unique<StreamingWindowState>();
 }
 
 OperatorResultType PhysicalStreamingWindow::Execute(ExecutionContext &context, DataChunk &input, DataChunk &chunk,
-                                                    OperatorState &state_p) const {
+                                                    GlobalOperatorState &gstate_p, OperatorState &state_p) const {
+	auto &gstate = (StreamingWindowGlobalState &)gstate_p;
 	auto &state = (StreamingWindowState &)state_p;
 	if (!state.initialized) {
 		state.Initialize(input, select_list);
@@ -81,7 +94,7 @@ OperatorResultType PhysicalStreamingWindow::Execute(ExecutionContext &context, D
 			// Set row numbers
 			auto rdata = FlatVector::GetData<int64_t>(chunk.data[col_idx]);
 			for (idx_t i = 0; i < count; i++) {
-				rdata[i] = state.row_number + i;
+				rdata[i] = gstate.row_number + i;
 			}
 			break;
 		}
@@ -89,7 +102,7 @@ OperatorResultType PhysicalStreamingWindow::Execute(ExecutionContext &context, D
 			throw NotImplementedException("%s for StreamingWindow", ExpressionTypeToString(expr.GetExpressionType()));
 		}
 	}
-	state.row_number += count;
+	gstate.row_number += count;
 	chunk.SetCardinality(count);
 	return OperatorResultType::NEED_MORE_INPUT;
 }
diff --git a/src/execution/operator/filter/physical_filter.cpp b/src/execution/operator/filter/physical_filter.cpp
index 9a467e6ea6ba..62d39c2ec022 100644
--- a/src/execution/operator/filter/physical_filter.cpp
+++ b/src/execution/operator/filter/physical_filter.cpp
@@ -39,7 +39,7 @@ unique_ptr<OperatorState> PhysicalFilter::GetOperatorState(ClientContext &contex
 }
 
 OperatorResultType PhysicalFilter::Execute(ExecutionContext &context, DataChunk &input, DataChunk &chunk,
-                                           OperatorState &state_p) const {
+                                           GlobalOperatorState &gstate, OperatorState &state_p) const {
 	auto &state = (FilterState &)state_p;
 	idx_t result_count = state.executor.SelectExpression(input, state.sel);
 	if (result_count == input.size()) {
diff --git a/src/execution/operator/helper/physical_streaming_sample.cpp b/src/execution/operator/helper/physical_streaming_sample.cpp
index 99e94d60e933..d251d5be4070 100644
--- a/src/execution/operator/helper/physical_streaming_sample.cpp
+++ b/src/execution/operator/helper/physical_streaming_sample.cpp
@@ -53,7 +53,7 @@ unique_ptr<OperatorState> PhysicalStreamingSample::GetOperatorState(ClientContex
 }
 
 OperatorResultType PhysicalStreamingSample::Execute(ExecutionContext &context, DataChunk &input, DataChunk &chunk,
-                                                    OperatorState &state) const {
+                                                    GlobalOperatorState &gstate, OperatorState &state) const {
 	switch (method) {
 	case SampleMethod::BERNOULLI_SAMPLE:
 		BernoulliSample(input, chunk, state);
diff --git a/src/execution/operator/join/physical_blockwise_nl_join.cpp b/src/execution/operator/join/physical_blockwise_nl_join.cpp
index dd447765cf3c..998e553b1168 100644
--- a/src/execution/operator/join/physical_blockwise_nl_join.cpp
+++ b/src/execution/operator/join/physical_blockwise_nl_join.cpp
@@ -92,7 +92,7 @@ unique_ptr<OperatorState> PhysicalBlockwiseNLJoin::GetOperatorState(ClientContex
 }
 
 OperatorResultType PhysicalBlockwiseNLJoin::Execute(ExecutionContext &context, DataChunk &input, DataChunk &chunk,
-                                                    OperatorState &state_p) const {
+                                                    GlobalOperatorState &gstate_p, OperatorState &state_p) const {
 	D_ASSERT(input.size() > 0);
 	auto &state = (BlockwiseNLJoinState &)state_p;
 	auto &gstate = (BlockwiseNLJoinGlobalState &)*sink_state;
diff --git a/src/execution/operator/join/physical_cross_product.cpp b/src/execution/operator/join/physical_cross_product.cpp
index 130fa7fc4c40..43a4d4ddc917 100644
--- a/src/execution/operator/join/physical_cross_product.cpp
+++ b/src/execution/operator/join/physical_cross_product.cpp
@@ -51,7 +51,7 @@ unique_ptr<OperatorState> PhysicalCrossProduct::GetOperatorState(ClientContext &
 }
 
 OperatorResultType PhysicalCrossProduct::Execute(ExecutionContext &context, DataChunk &input, DataChunk &chunk,
-                                                 OperatorState &state_p) const {
+                                                 GlobalOperatorState &gstate, OperatorState &state_p) const {
 	auto &state = (CrossProductOperatorState &)state_p;
 	auto &sink = (CrossProductGlobalState &)*sink_state;
 	auto &right_collection = sink.rhs_materialized;
diff --git a/src/execution/operator/join/physical_hash_join.cpp b/src/execution/operator/join/physical_hash_join.cpp
index 877b5850fa66..599b797a261b 100644
--- a/src/execution/operator/join/physical_hash_join.cpp
+++ b/src/execution/operator/join/physical_hash_join.cpp
@@ -216,7 +216,7 @@ unique_ptr<OperatorState> PhysicalHashJoin::GetOperatorState(ClientContext &cont
 }
 
 OperatorResultType PhysicalHashJoin::Execute(ExecutionContext &context, DataChunk &input, DataChunk &chunk,
-                                             OperatorState &state_p) const {
+                                             GlobalOperatorState &gstate, OperatorState &state_p) const {
 	auto &state = (PhysicalHashJoinState &)state_p;
 	auto &sink = (HashJoinGlobalState &)*sink_state;
 	D_ASSERT(sink.finalized);
diff --git a/src/execution/operator/join/physical_iejoin.cpp b/src/execution/operator/join/physical_iejoin.cpp
index a9850b3976e5..776af00178a1 100644
--- a/src/execution/operator/join/physical_iejoin.cpp
+++ b/src/execution/operator/join/physical_iejoin.cpp
@@ -1166,7 +1166,7 @@ void PhysicalIEJoin::ResolveComplexJoin(ExecutionContext &context, DataChunk &ch
 }
 
 OperatorResultType PhysicalIEJoin::Execute(ExecutionContext &context, DataChunk &input, DataChunk &chunk,
-                                           OperatorState &state) const {
+                                           GlobalOperatorState &gstate, OperatorState &state) const {
 	return OperatorResultType::FINISHED;
 }
 
diff --git a/src/execution/operator/join/physical_index_join.cpp b/src/execution/operator/join/physical_index_join.cpp
index 409121d15571..804f709c3d11 100644
--- a/src/execution/operator/join/physical_index_join.cpp
+++ b/src/execution/operator/join/physical_index_join.cpp
@@ -174,7 +174,7 @@ void PhysicalIndexJoin::GetRHSMatches(ExecutionContext &context, DataChunk &inpu
 }
 
 OperatorResultType PhysicalIndexJoin::Execute(ExecutionContext &context, DataChunk &input, DataChunk &chunk,
-                                              OperatorState &state_p) const {
+                                              GlobalOperatorState &gstate, OperatorState &state_p) const {
 	auto &state = (IndexJoinOperatorState &)state_p;
 
 	state.result_size = 0;
diff --git a/src/execution/operator/join/physical_nested_loop_join.cpp b/src/execution/operator/join/physical_nested_loop_join.cpp
index f5d7d54e38eb..0ed0b5f32ad6 100644
--- a/src/execution/operator/join/physical_nested_loop_join.cpp
+++ b/src/execution/operator/join/physical_nested_loop_join.cpp
@@ -237,7 +237,7 @@ unique_ptr<OperatorState> PhysicalNestedLoopJoin::GetOperatorState(ClientContext
 }
 
 OperatorResultType PhysicalNestedLoopJoin::Execute(ExecutionContext &context, DataChunk &input, DataChunk &chunk,
-                                                   OperatorState &state_p) const {
+                                                   GlobalOperatorState &gstate_p, OperatorState &state_p) const {
 	auto &gstate = (NestedLoopJoinGlobalState &)*sink_state;
 
 	if (gstate.right_chunks.Count() == 0) {
diff --git a/src/execution/operator/join/physical_piecewise_merge_join.cpp b/src/execution/operator/join/physical_piecewise_merge_join.cpp
index f3cb82dfdab7..3a4456db2bca 100644
--- a/src/execution/operator/join/physical_piecewise_merge_join.cpp
+++ b/src/execution/operator/join/physical_piecewise_merge_join.cpp
@@ -934,7 +934,7 @@ OperatorResultType PhysicalPiecewiseMergeJoin::ResolveComplexJoin(ExecutionConte
 }
 
 OperatorResultType PhysicalPiecewiseMergeJoin::Execute(ExecutionContext &context, DataChunk &input, DataChunk &chunk,
-                                                       OperatorState &state) const {
+                                                       GlobalOperatorState &gstate_p, OperatorState &state) const {
 	auto &gstate = (MergeJoinGlobalState &)*sink_state;
 
 	if (gstate.Count() == 0) {
diff --git a/src/execution/operator/projection/physical_projection.cpp b/src/execution/operator/projection/physical_projection.cpp
index d5be51d27e3d..b4e557564716 100644
--- a/src/execution/operator/projection/physical_projection.cpp
+++ b/src/execution/operator/projection/physical_projection.cpp
@@ -24,7 +24,7 @@ PhysicalProjection::PhysicalProjection(vector<LogicalType> types, vector<unique_
 }
 
 OperatorResultType PhysicalProjection::Execute(ExecutionContext &context, DataChunk &input, DataChunk &chunk,
-                                               OperatorState &state_p) const {
+                                               GlobalOperatorState &gstate, OperatorState &state_p) const {
 	auto &state = (ProjectionState &)state_p;
 	state.executor.Execute(input, chunk);
 	return OperatorResultType::NEED_MORE_INPUT;
diff --git a/src/execution/operator/projection/physical_tableinout_function.cpp b/src/execution/operator/projection/physical_tableinout_function.cpp
index 9e6c2c485ce0..036e8741d5a3 100644
--- a/src/execution/operator/projection/physical_tableinout_function.cpp
+++ b/src/execution/operator/projection/physical_tableinout_function.cpp
@@ -23,7 +23,7 @@ unique_ptr<OperatorState> PhysicalTableInOutFunction::GetOperatorState(ClientCon
 }
 
 OperatorResultType PhysicalTableInOutFunction::Execute(ExecutionContext &context, DataChunk &input, DataChunk &chunk,
-                                                       OperatorState &state_p) const {
+                                                       GlobalOperatorState &gstate, OperatorState &state_p) const {
 	auto &state = (TableInOutFunctionState &)state_p;
 
 	if (!state.initialized) {
diff --git a/src/execution/operator/projection/physical_unnest.cpp b/src/execution/operator/projection/physical_unnest.cpp
index 19bd9cf6bb77..c51d9b3ba8e3 100644
--- a/src/execution/operator/projection/physical_unnest.cpp
+++ b/src/execution/operator/projection/physical_unnest.cpp
@@ -150,7 +150,7 @@ unique_ptr<OperatorState> PhysicalUnnest::GetOperatorState(ClientContext &contex
 }
 
 OperatorResultType PhysicalUnnest::Execute(ExecutionContext &context, DataChunk &input, DataChunk &chunk,
-                                           OperatorState &state_p) const {
+                                           GlobalOperatorState &gstate, OperatorState &state_p) const {
 	auto &state = (UnnestOperatorState &)state_p;
 	do {
 		if (state.first_fetch) {
diff --git a/src/execution/operator/scan/physical_expression_scan.cpp b/src/execution/operator/scan/physical_expression_scan.cpp
index 6bed84636c2c..e635b0e0da25 100644
--- a/src/execution/operator/scan/physical_expression_scan.cpp
+++ b/src/execution/operator/scan/physical_expression_scan.cpp
@@ -21,7 +21,7 @@ unique_ptr<OperatorState> PhysicalExpressionScan::GetOperatorState(ClientContext
 }
 
 OperatorResultType PhysicalExpressionScan::Execute(ExecutionContext &context, DataChunk &input, DataChunk &chunk,
-                                                   OperatorState &state_p) const {
+                                                   GlobalOperatorState &gstate, OperatorState &state_p) const {
 	auto &state = (ExpressionScanState &)state_p;
 
 	for (; chunk.size() + input.size() <= STANDARD_VECTOR_SIZE && state.expression_index < expressions.size();
diff --git a/src/execution/operator/set/physical_recursive_cte.cpp b/src/execution/operator/set/physical_recursive_cte.cpp
index a49b6cfb452d..a7809b99d206 100644
--- a/src/execution/operator/set/physical_recursive_cte.cpp
+++ b/src/execution/operator/set/physical_recursive_cte.cpp
@@ -115,6 +115,11 @@ void PhysicalRecursiveCTE::ExecuteRecursivePipelines(ExecutionContext &context)
 			// reset the sink state for any intermediate sinks
 			sink->sink_state = sink->GetGlobalSinkState(context.client);
 		}
+		for (auto &op : pipeline->GetOperators()) {
+			if (op) {
+				op->op_state = op->GetGlobalOperatorState(context.client);
+			}
+		}
 		pipeline->Reset();
 	}
 	auto &executor = pipelines[0]->executor;
diff --git a/src/execution/physical_operator.cpp b/src/execution/physical_operator.cpp
index 29743aa8c543..8624663f1a52 100644
--- a/src/execution/physical_operator.cpp
+++ b/src/execution/physical_operator.cpp
@@ -32,8 +32,12 @@ unique_ptr<OperatorState> PhysicalOperator::GetOperatorState(ClientContext &cont
 	return make_unique<OperatorState>();
 }
 
+unique_ptr<GlobalOperatorState> PhysicalOperator::GetGlobalOperatorState(ClientContext &context) const {
+	return make_unique<GlobalOperatorState>();
+}
+
 OperatorResultType PhysicalOperator::Execute(ExecutionContext &context, DataChunk &input, DataChunk &chunk,
-                                             OperatorState &state) const {
+                                             GlobalOperatorState &gstate, OperatorState &state) const {
 	throw InternalException("Calling Execute on a node that is not an operator!");
 }
 // LCOV_EXCL_STOP
diff --git a/src/function/scalar/list/list_aggregates.cpp b/src/function/scalar/list/list_aggregates.cpp
index 48651560d359..34f542df1842 100644
--- a/src/function/scalar/list/list_aggregates.cpp
+++ b/src/function/scalar/list/list_aggregates.cpp
@@ -211,7 +211,7 @@ static unique_ptr<FunctionData> ListAggregateBind(ClientContext &context, Scalar
 
 ScalarFunction ListAggregateFun::GetFunction() {
 	return ScalarFunction({LogicalType::LIST(LogicalType::ANY), LogicalType::VARCHAR}, LogicalType::ANY,
-	                      ListAggregateFunction, false, ListAggregateBind, nullptr, nullptr, nullptr);
+	                      ListAggregateFunction, false, false, ListAggregateBind, nullptr, nullptr, nullptr);
 }
 
 void ListAggregateFun::RegisterFunction(BuiltinFunctions &set) {
diff --git a/src/include/duckdb/execution/operator/aggregate/physical_streaming_window.hpp b/src/include/duckdb/execution/operator/aggregate/physical_streaming_window.hpp
index 2ebefb8c58f1..ddf5cbaa1204 100644
--- a/src/include/duckdb/execution/operator/aggregate/physical_streaming_window.hpp
+++ b/src/include/duckdb/execution/operator/aggregate/physical_streaming_window.hpp
@@ -24,10 +24,11 @@ class PhysicalStreamingWindow : public PhysicalOperator {
 	vector<unique_ptr<Expression>> select_list;
 
 public:
+	unique_ptr<GlobalOperatorState> GetGlobalOperatorState(ClientContext &context) const override;
 	unique_ptr<OperatorState> GetOperatorState(ClientContext &context) const override;
 
 	OperatorResultType Execute(ExecutionContext &context, DataChunk &input, DataChunk &chunk,
-	                           OperatorState &state) const override;
+	                           GlobalOperatorState &gstate, OperatorState &state) const override;
 
 	string ParamsToString() const override;
 };
diff --git a/src/include/duckdb/execution/operator/filter/physical_filter.hpp b/src/include/duckdb/execution/operator/filter/physical_filter.hpp
index 64df420ac64f..9848704da7b8 100644
--- a/src/include/duckdb/execution/operator/filter/physical_filter.hpp
+++ b/src/include/duckdb/execution/operator/filter/physical_filter.hpp
@@ -27,7 +27,7 @@ class PhysicalFilter : public PhysicalOperator {
 	unique_ptr<OperatorState> GetOperatorState(ClientContext &context) const override;
 
 	OperatorResultType Execute(ExecutionContext &context, DataChunk &input, DataChunk &chunk,
-	                           OperatorState &state) const override;
+	                           GlobalOperatorState &gstate, OperatorState &state) const override;
 
 	bool ParallelOperator() const override {
 		return true;
diff --git a/src/include/duckdb/execution/operator/helper/physical_streaming_sample.hpp b/src/include/duckdb/execution/operator/helper/physical_streaming_sample.hpp
index 66bc5cc7663a..6ab9589dcbb3 100644
--- a/src/include/duckdb/execution/operator/helper/physical_streaming_sample.hpp
+++ b/src/include/duckdb/execution/operator/helper/physical_streaming_sample.hpp
@@ -27,7 +27,7 @@ class PhysicalStreamingSample : public PhysicalOperator {
 	// Operator interface
 	unique_ptr<OperatorState> GetOperatorState(ClientContext &context) const override;
 	OperatorResultType Execute(ExecutionContext &context, DataChunk &input, DataChunk &chunk,
-	                           OperatorState &state) const override;
+	                           GlobalOperatorState &gstate, OperatorState &state) const override;
 
 	bool ParallelOperator() const override {
 		return true;
diff --git a/src/include/duckdb/execution/operator/join/physical_blockwise_nl_join.hpp b/src/include/duckdb/execution/operator/join/physical_blockwise_nl_join.hpp
index 3c06a9bdbe6d..dd2333d48239 100644
--- a/src/include/duckdb/execution/operator/join/physical_blockwise_nl_join.hpp
+++ b/src/include/duckdb/execution/operator/join/physical_blockwise_nl_join.hpp
@@ -27,7 +27,7 @@ class PhysicalBlockwiseNLJoin : public PhysicalJoin {
 	// Operator Interface
 	unique_ptr<OperatorState> GetOperatorState(ClientContext &context) const override;
 	OperatorResultType Execute(ExecutionContext &context, DataChunk &input, DataChunk &chunk,
-	                           OperatorState &state) const override;
+	                           GlobalOperatorState &gstate, OperatorState &state) const override;
 
 	bool ParallelOperator() const override {
 		return true;
diff --git a/src/include/duckdb/execution/operator/join/physical_cross_product.hpp b/src/include/duckdb/execution/operator/join/physical_cross_product.hpp
index e80e1f831aeb..434abdc9e26b 100644
--- a/src/include/duckdb/execution/operator/join/physical_cross_product.hpp
+++ b/src/include/duckdb/execution/operator/join/physical_cross_product.hpp
@@ -22,7 +22,7 @@ class PhysicalCrossProduct : public PhysicalOperator {
 	// Operator Interface
 	unique_ptr<OperatorState> GetOperatorState(ClientContext &context) const override;
 	OperatorResultType Execute(ExecutionContext &context, DataChunk &input, DataChunk &chunk,
-	                           OperatorState &state) const override;
+	                           GlobalOperatorState &gstate, OperatorState &state) const override;
 
 	bool ParallelOperator() const override {
 		return true;
diff --git a/src/include/duckdb/execution/operator/join/physical_hash_join.hpp b/src/include/duckdb/execution/operator/join/physical_hash_join.hpp
index b043571ed2b1..336f577ea5e0 100644
--- a/src/include/duckdb/execution/operator/join/physical_hash_join.hpp
+++ b/src/include/duckdb/execution/operator/join/physical_hash_join.hpp
@@ -43,7 +43,7 @@ class PhysicalHashJoin : public PhysicalComparisonJoin {
 	// Operator Interface
 	unique_ptr<OperatorState> GetOperatorState(ClientContext &context) const override;
 	OperatorResultType Execute(ExecutionContext &context, DataChunk &input, DataChunk &chunk,
-	                           OperatorState &state) const override;
+	                           GlobalOperatorState &gstate, OperatorState &state) const override;
 
 	bool ParallelOperator() const override {
 		return true;
diff --git a/src/include/duckdb/execution/operator/join/physical_iejoin.hpp b/src/include/duckdb/execution/operator/join/physical_iejoin.hpp
index eb6933ca0d13..29a4a0f9e7ca 100644
--- a/src/include/duckdb/execution/operator/join/physical_iejoin.hpp
+++ b/src/include/duckdb/execution/operator/join/physical_iejoin.hpp
@@ -29,7 +29,7 @@ class PhysicalIEJoin : public PhysicalComparisonJoin {
 public:
 	// Operator Interface
 	OperatorResultType Execute(ExecutionContext &context, DataChunk &input, DataChunk &chunk,
-	                           OperatorState &state) const override;
+	                           GlobalOperatorState &gstate, OperatorState &state) const override;
 
 public:
 	// Source interface
diff --git a/src/include/duckdb/execution/operator/join/physical_index_join.hpp b/src/include/duckdb/execution/operator/join/physical_index_join.hpp
index aa85139686e2..f93b33e0f7fe 100644
--- a/src/include/duckdb/execution/operator/join/physical_index_join.hpp
+++ b/src/include/duckdb/execution/operator/join/physical_index_join.hpp
@@ -52,7 +52,7 @@ class PhysicalIndexJoin : public PhysicalOperator {
 public:
 	unique_ptr<OperatorState> GetOperatorState(ClientContext &context) const override;
 	OperatorResultType Execute(ExecutionContext &context, DataChunk &input, DataChunk &chunk,
-	                           OperatorState &state) const override;
+	                           GlobalOperatorState &gstate, OperatorState &state) const override;
 
 	bool ParallelOperator() const override {
 		return true;
diff --git a/src/include/duckdb/execution/operator/join/physical_nested_loop_join.hpp b/src/include/duckdb/execution/operator/join/physical_nested_loop_join.hpp
index b19cba90a698..3dddc751004a 100644
--- a/src/include/duckdb/execution/operator/join/physical_nested_loop_join.hpp
+++ b/src/include/duckdb/execution/operator/join/physical_nested_loop_join.hpp
@@ -27,7 +27,7 @@ class PhysicalNestedLoopJoin : public PhysicalComparisonJoin {
 	// Operator Interface
 	unique_ptr<OperatorState> GetOperatorState(ClientContext &context) const override;
 	OperatorResultType Execute(ExecutionContext &context, DataChunk &input, DataChunk &chunk,
-	                           OperatorState &state) const override;
+	                           GlobalOperatorState &gstate, OperatorState &state) const override;
 
 	bool ParallelOperator() const override {
 		return true;
diff --git a/src/include/duckdb/execution/operator/join/physical_piecewise_merge_join.hpp b/src/include/duckdb/execution/operator/join/physical_piecewise_merge_join.hpp
index c32125ee4fb3..b63e2fa8ec80 100644
--- a/src/include/duckdb/execution/operator/join/physical_piecewise_merge_join.hpp
+++ b/src/include/duckdb/execution/operator/join/physical_piecewise_merge_join.hpp
@@ -31,7 +31,7 @@ class PhysicalPiecewiseMergeJoin : public PhysicalComparisonJoin {
 	// Operator Interface
 	unique_ptr<OperatorState> GetOperatorState(ClientContext &context) const override;
 	OperatorResultType Execute(ExecutionContext &context, DataChunk &input, DataChunk &chunk,
-	                           OperatorState &state) const override;
+	                           GlobalOperatorState &gstate, OperatorState &state) const override;
 
 	bool ParallelOperator() const override {
 		return true;
diff --git a/src/include/duckdb/execution/operator/projection/physical_projection.hpp b/src/include/duckdb/execution/operator/projection/physical_projection.hpp
index 7ec215172130..8dea64ed758f 100644
--- a/src/include/duckdb/execution/operator/projection/physical_projection.hpp
+++ b/src/include/duckdb/execution/operator/projection/physical_projection.hpp
@@ -23,7 +23,7 @@ class PhysicalProjection : public PhysicalOperator {
 public:
 	unique_ptr<OperatorState> GetOperatorState(ClientContext &context) const override;
 	OperatorResultType Execute(ExecutionContext &context, DataChunk &input, DataChunk &chunk,
-	                           OperatorState &state) const override;
+	                           GlobalOperatorState &gstate, OperatorState &state) const override;
 
 	bool ParallelOperator() const override {
 		return true;
diff --git a/src/include/duckdb/execution/operator/projection/physical_tableinout_function.hpp b/src/include/duckdb/execution/operator/projection/physical_tableinout_function.hpp
index 8daf6630d7e5..ca90a77494f6 100644
--- a/src/include/duckdb/execution/operator/projection/physical_tableinout_function.hpp
+++ b/src/include/duckdb/execution/operator/projection/physical_tableinout_function.hpp
@@ -24,7 +24,7 @@ class PhysicalTableInOutFunction : public PhysicalOperator {
 public:
 	unique_ptr<OperatorState> GetOperatorState(ClientContext &context) const override;
 	OperatorResultType Execute(ExecutionContext &context, DataChunk &input, DataChunk &chunk,
-	                           OperatorState &state) const override;
+	                           GlobalOperatorState &gstate, OperatorState &state) const override;
 
 	bool ParallelOperator() const override {
 		return true;
diff --git a/src/include/duckdb/execution/operator/projection/physical_unnest.hpp b/src/include/duckdb/execution/operator/projection/physical_unnest.hpp
index e0dd9a0303a3..4af41c1bcc85 100644
--- a/src/include/duckdb/execution/operator/projection/physical_unnest.hpp
+++ b/src/include/duckdb/execution/operator/projection/physical_unnest.hpp
@@ -26,7 +26,7 @@ class PhysicalUnnest : public PhysicalOperator {
 public:
 	unique_ptr<OperatorState> GetOperatorState(ClientContext &context) const override;
 	OperatorResultType Execute(ExecutionContext &context, DataChunk &input, DataChunk &chunk,
-	                           OperatorState &state) const override;
+	                           GlobalOperatorState &gstate, OperatorState &state) const override;
 
 	bool ParallelOperator() const override {
 		return true;
diff --git a/src/include/duckdb/execution/operator/scan/physical_expression_scan.hpp b/src/include/duckdb/execution/operator/scan/physical_expression_scan.hpp
index 141c966ba24c..aa790b1cc859 100644
--- a/src/include/duckdb/execution/operator/scan/physical_expression_scan.hpp
+++ b/src/include/duckdb/execution/operator/scan/physical_expression_scan.hpp
@@ -29,7 +29,7 @@ class PhysicalExpressionScan : public PhysicalOperator {
 public:
 	unique_ptr<OperatorState> GetOperatorState(ClientContext &context) const override;
 	OperatorResultType Execute(ExecutionContext &context, DataChunk &input, DataChunk &chunk,
-	                           OperatorState &state) const override;
+	                           GlobalOperatorState &gstate, OperatorState &state) const override;
 
 	bool ParallelOperator() const override {
 		return true;
diff --git a/src/include/duckdb/execution/physical_operator.hpp b/src/include/duckdb/execution/physical_operator.hpp
index debef8894bd6..ca7dec6b225f 100644
--- a/src/include/duckdb/execution/physical_operator.hpp
+++ b/src/include/duckdb/execution/physical_operator.hpp
@@ -30,6 +30,12 @@ class OperatorState {
 	}
 };
 
+class GlobalOperatorState {
+public:
+	virtual ~GlobalOperatorState() {
+	}
+};
+
 class GlobalSinkState {
 public:
 	GlobalSinkState() : state(SinkFinalizeType::READY) {
@@ -83,6 +89,8 @@ class PhysicalOperator {
 	idx_t estimated_cardinality;
 	//! The global sink state of this operator
 	unique_ptr<GlobalSinkState> sink_state;
+	//! The global state of this operator
+	unique_ptr<GlobalOperatorState> op_state;
 
 public:
 	virtual string GetName() const;
@@ -104,8 +112,9 @@ class PhysicalOperator {
 public:
 	// Operator interface
 	virtual unique_ptr<OperatorState> GetOperatorState(ClientContext &context) const;
+	virtual unique_ptr<GlobalOperatorState> GetGlobalOperatorState(ClientContext &context) const;
 	virtual OperatorResultType Execute(ExecutionContext &context, DataChunk &input, DataChunk &chunk,
-	                                   OperatorState &state) const;
+	                                   GlobalOperatorState &gstate, OperatorState &state) const;
 
 	virtual bool ParallelOperator() const {
 		return false;
diff --git a/src/include/duckdb/parallel/pipeline.hpp b/src/include/duckdb/parallel/pipeline.hpp
index 42ea9e71b41e..710e8c7ba685 100644
--- a/src/include/duckdb/parallel/pipeline.hpp
+++ b/src/include/duckdb/parallel/pipeline.hpp
@@ -27,7 +27,7 @@ class Pipeline : public std::enable_shared_from_this<Pipeline> {
 	friend class PipelineFinishEvent;
 
 public:
-	Pipeline(Executor &execution_context);
+	explicit Pipeline(Executor &execution_context);
 
 	Executor &executor;
 
diff --git a/src/include/duckdb/storage/table/scan_state.hpp b/src/include/duckdb/storage/table/scan_state.hpp
index 715677b137a5..d51fb1012701 100644
--- a/src/include/duckdb/storage/table/scan_state.hpp
+++ b/src/include/duckdb/storage/table/scan_state.hpp
@@ -72,9 +72,9 @@ struct ColumnFetchState {
 struct LocalScanState {
 	~LocalScanState();
 
-	void SetStorage(LocalTableStorage *storage);
+	void SetStorage(shared_ptr<LocalTableStorage> storage);
 	LocalTableStorage *GetStorage() {
-		return storage;
+		return storage.get();
 	}
 
 	idx_t chunk_index;
@@ -83,7 +83,7 @@ struct LocalScanState {
 	TableFilterSet *table_filters;
 
 private:
-	LocalTableStorage *storage = nullptr;
+	shared_ptr<LocalTableStorage> storage;
 };
 
 class RowGroupScanState {
diff --git a/src/include/duckdb/transaction/local_storage.hpp b/src/include/duckdb/transaction/local_storage.hpp
index 9dc6dc2f4e46..caecb83660cc 100644
--- a/src/include/duckdb/transaction/local_storage.hpp
+++ b/src/include/duckdb/transaction/local_storage.hpp
@@ -16,7 +16,7 @@ class DataTable;
 class WriteAheadLog;
 struct TableAppendState;
 
-class LocalTableStorage {
+class LocalTableStorage : public std::enable_shared_from_this<LocalTableStorage> {
 public:
 	explicit LocalTableStorage(DataTable &table);
 	~LocalTableStorage();
@@ -99,7 +99,7 @@ class LocalStorage {
 
 private:
 	Transaction &transaction;
-	unordered_map<DataTable *, unique_ptr<LocalTableStorage>> table_storage;
+	unordered_map<DataTable *, shared_ptr<LocalTableStorage>> table_storage;
 
 	void Flush(DataTable &table, LocalTableStorage &storage);
 };
diff --git a/src/parallel/executor.cpp b/src/parallel/executor.cpp
index 5d3bfdeadc6d..4f58dfda0ecc 100644
--- a/src/parallel/executor.cpp
+++ b/src/parallel/executor.cpp
@@ -426,6 +426,7 @@ void Executor::AddChildPipeline(Pipeline *current) {
 
 void Executor::BuildPipelines(PhysicalOperator *op, Pipeline *current) {
 	D_ASSERT(current);
+	op->op_state.reset();
 	if (op->IsSink()) {
 		// operator is a sink, build a pipeline
 		op->sink_state.reset();
diff --git a/src/parallel/pipeline.cpp b/src/parallel/pipeline.cpp
index 915104673d51..cc1c3a7550b6 100644
--- a/src/parallel/pipeline.cpp
+++ b/src/parallel/pipeline.cpp
@@ -158,6 +158,13 @@ void Pipeline::Reset() {
 	if (sink && !sink->sink_state) {
 		sink->sink_state = sink->GetGlobalSinkState(GetClientContext());
 	}
+
+	for (auto &op : operators) {
+		if (op && !op->op_state) {
+			op->op_state = op->GetGlobalOperatorState(GetClientContext());
+		}
+	}
+
 	ResetSource();
 }
 
diff --git a/src/parallel/pipeline_executor.cpp b/src/parallel/pipeline_executor.cpp
index 76fedfe2ed3a..ce4809a1ada4 100644
--- a/src/parallel/pipeline_executor.cpp
+++ b/src/parallel/pipeline_executor.cpp
@@ -272,7 +272,7 @@ OperatorResultType PipelineExecutor::Execute(DataChunk &input, DataChunk &result
 			// if current_idx > source_idx, we pass the previous' operators output through the Execute of the current
 			// operator
 			StartOperator(current_operator);
-			auto result = current_operator->Execute(context, prev_chunk, current_chunk,
+			auto result = current_operator->Execute(context, prev_chunk, current_chunk, *current_operator->op_state,
 			                                        *intermediate_states[current_intermediate - 1]);
 			EndOperator(current_operator, &current_chunk);
 			if (result == OperatorResultType::HAVE_MORE_OUTPUT) {
diff --git a/src/storage/compression/validity_uncompressed.cpp b/src/storage/compression/validity_uncompressed.cpp
index b1798e5ba50c..386935e43ad5 100644
--- a/src/storage/compression/validity_uncompressed.cpp
+++ b/src/storage/compression/validity_uncompressed.cpp
@@ -237,7 +237,12 @@ void ValidityScanPartial(ColumnSegment &segment, ColumnScanState &state, idx_t s
 	// the bitwise ops we use below don't work if the vector size is too small
 	ValidityMask source_mask(input_data);
 	for (idx_t i = 0; i < scan_count; i++) {
-		result_mask.Set(result_offset + i, source_mask.RowIsValid(start + i));
+		if (!source_mask.RowIsValid(start + i)) {
+			if (result_mask.AllValid()) {
+				result_mask.Initialize(MaxValue<idx_t>(STANDARD_VECTOR_SIZE, result_offset + scan_count));
+			}
+			result_mask.SetInvalid(result_offset + i);
+		}
 	}
 #else
 	// the code below does what the fallback code above states, but using bitwise ops:
diff --git a/src/storage/local_storage.cpp b/src/storage/local_storage.cpp
index 8f4831c98477..6bb6816dc760 100644
--- a/src/storage/local_storage.cpp
+++ b/src/storage/local_storage.cpp
@@ -23,7 +23,7 @@ void LocalTableStorage::InitializeScan(LocalScanState &state, TableFilterSet *ta
 		// nothing to scan
 		return;
 	}
-	state.SetStorage(this);
+	state.SetStorage(shared_from_this());
 
 	state.chunk_index = 0;
 	state.max_index = collection.ChunkCount() - 1;
@@ -47,12 +47,12 @@ LocalScanState::~LocalScanState() {
 	SetStorage(nullptr);
 }
 
-void LocalScanState::SetStorage(LocalTableStorage *new_storage) {
-	if (storage != nullptr) {
+void LocalScanState::SetStorage(shared_ptr<LocalTableStorage> new_storage) {
+	if (storage) {
 		D_ASSERT(storage->active_scans > 0);
 		storage->active_scans--;
 	}
-	storage = new_storage;
+	storage = move(new_storage);
 	if (storage) {
 		storage->active_scans++;
 	}
@@ -166,7 +166,7 @@ void LocalStorage::Append(DataTable *table, DataChunk &chunk) {
 	auto entry = table_storage.find(table);
 	LocalTableStorage *storage;
 	if (entry == table_storage.end()) {
-		auto new_storage = make_unique<LocalTableStorage>(*table);
+		auto new_storage = make_shared<LocalTableStorage>(*table);
 		storage = new_storage.get();
 		table_storage.insert(make_pair(table, move(new_storage)));
 	} else {
