{
  "repo": "duckdb/duckdb",
  "pull_number": 2594,
  "instance_id": "duckdb__duckdb-2594",
  "issue_numbers": [
    "2588"
  ],
  "base_commit": "ee7c56dc3b9833a3c8b7ab9cad7c724f31596280",
  "patch": "diff --git a/src/optimizer/statistics/operator/propagate_filter.cpp b/src/optimizer/statistics/operator/propagate_filter.cpp\nindex c26f9f6e55ed..8a4d73dc3621 100644\n--- a/src/optimizer/statistics/operator/propagate_filter.cpp\n+++ b/src/optimizer/statistics/operator/propagate_filter.cpp\n@@ -210,6 +210,10 @@ unique_ptr<NodeStatistics> StatisticsPropagator::PropagateStatistics(LogicalFilt\n                                                                      unique_ptr<LogicalOperator> *node_ptr) {\n \t// first propagate to the child\n \tnode_stats = PropagateStatistics(filter.children[0]);\n+\tif (filter.children[0]->type == LogicalOperatorType::LOGICAL_EMPTY_RESULT) {\n+\t\tReplaceWithEmptyResult(*node_ptr);\n+\t\treturn make_unique<NodeStatistics>(0, 0);\n+\t}\n \n \t// then propagate to each of the expressions\n \tfor (idx_t i = 0; i < filter.expressions.size(); i++) {\ndiff --git a/src/planner/expression/bound_cast_expression.cpp b/src/planner/expression/bound_cast_expression.cpp\nindex 53114f5d2bfc..37050767fe23 100644\n--- a/src/planner/expression/bound_cast_expression.cpp\n+++ b/src/planner/expression/bound_cast_expression.cpp\n@@ -57,6 +57,9 @@ bool BoundCastExpression::CastIsInvertible(const LogicalType &source_type, const\n \t\t}\n \t\treturn true;\n \t}\n+\tif (source_type.id() == LogicalTypeId::TIMESTAMP && target_type.id() == LogicalTypeId::DATE) {\n+\t\treturn false;\n+\t}\n \tif (source_type.id() == LogicalTypeId::VARCHAR) {\n \t\treturn target_type.id() == LogicalTypeId::DATE || target_type.id() == LogicalTypeId::TIME ||\n \t\t       target_type.id() == LogicalTypeId::TIMESTAMP || target_type.id() == LogicalTypeId::TIMESTAMP_NS ||\n",
  "test_patch": "diff --git a/test/sql/cast/timestamp_date_cast.test b/test/sql/cast/timestamp_date_cast.test\nnew file mode 100644\nindex 000000000000..e641732c6131\n--- /dev/null\n+++ b/test/sql/cast/timestamp_date_cast.test\n@@ -0,0 +1,24 @@\n+# name: test/sql/cast/timestamp_date_cast.test\n+# description: Issue #2588: Incorrect result with date conversion\n+# group: [cast]\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+statement ok\n+create table test as\n+select '2021-02-04 19:30:00'::timestamp t;\n+\n+query I\n+select *\n+from test\n+where (t::date) = '2021-02-04'::date;\n+----\n+2021-02-04 19:30:00\n+\n+query I\n+select *\n+from test\n+where (t::date) = '2021-02-04';\n+----\n+2021-02-04 19:30:00\n",
  "problem_statement": "Incorrect result with date conversion\n#### What happens?\r\nTimestamp field casted to date and varchar constant casted to date not equal in where clause.\r\n\r\n#### To Reproduce\r\ncreate table test as\r\nselect '2021-02-04 19:30:00'::timestamp t;\r\n\r\nThis query returns no result:\r\nselect *\r\nfrom test\r\nwhere (t::date) = '2021-02-04'::date;\r\n\r\nBut this one returns correct result:\r\nselect *\r\nfrom test\r\nwhere (t::date) = '2021-02-04';\r\n\r\n#### Environment (please complete the following information):\r\n - Ubuntu 20.04.3 WSL 2\r\n - DuckDB Version: 0.3.1-dev623 source_id: cece36693\r\n - DuckDB Client: Python\r\n\r\n#### Before Submitting\r\n\r\n- [X] **Have you tried this on the latest `master` branch?**\r\n* **Python**: `pip install duckdb --upgrade --pre`\r\n* **R**: `install.packages(\"https://github.com/duckdb/duckdb/releases/download/master-builds/duckdb_r_src.tar.gz\", repos = NULL)`\r\n* **Other Platforms**: You can find binaries [here](https://github.com/duckdb/duckdb/releases/tag/master-builds) or compile from source.\r\n\r\n- [X] **Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?**\r\n\n",
  "hints_text": "",
  "created_at": "2021-11-13T19:17:18Z"
}