{
  "repo": "duckdb/duckdb",
  "pull_number": 2482,
  "instance_id": "duckdb__duckdb-2482",
  "issue_numbers": [
    "2481"
  ],
  "base_commit": "0df5454b9bb8a12823418fc623c3e734317374d8",
  "patch": "diff --git a/src/function/scalar/math/numeric.cpp b/src/function/scalar/math/numeric.cpp\nindex eb43e9e4a5ae..9b6214c71f4a 100644\n--- a/src/function/scalar/math/numeric.cpp\n+++ b/src/function/scalar/math/numeric.cpp\n@@ -910,4 +910,32 @@ void FactorialFun::RegisterFunction(BuiltinFunctions &set) {\n \tset.AddFunction({\"factorial\", \"!__postfix\"}, fun);\n }\n \n+//===--------------------------------------------------------------------===//\n+// even\n+//===--------------------------------------------------------------------===//\n+struct EvenOperator {\n+\ttemplate <class TA, class TR>\n+\tstatic inline TR Operation(TA left) {\n+\t\tdouble value;\n+\t\tif (left >= 0) {\n+\t\t\tvalue = std::ceil(left);\n+\t\t} else {\n+\t\t\tvalue = std::ceil(-left);\n+\t\t\tvalue = -value;\n+\t\t}\n+\t\tif (std::floor(value / 2) * 2 != value) {\n+\t\t\tif (left >= 0) {\n+\t\t\t\treturn value += 1;\n+\t\t\t}\n+\t\t\treturn value -= 1;\n+\t\t}\n+\t\treturn value;\n+\t}\n+};\n+\n+void EvenFun::RegisterFunction(BuiltinFunctions &set) {\n+\tset.AddFunction(ScalarFunction(\"even\", {LogicalType::DOUBLE}, LogicalType::DOUBLE,\n+\t                               UnaryDoubleFunctionWrapper<double, EvenOperator>));\n+}\n+\n } // namespace duckdb\ndiff --git a/src/function/scalar/math_functions.cpp b/src/function/scalar/math_functions.cpp\nindex 5c1abc57f7fa..dc0bbb899314 100644\n--- a/src/function/scalar/math_functions.cpp\n+++ b/src/function/scalar/math_functions.cpp\n@@ -34,6 +34,8 @@ void BuiltinFunctions::RegisterMathFunctions() {\n \tRegister<FactorialFun>();\n \n \tRegister<NextAfterFun>();\n+\n+\tRegister<EvenFun>();\n }\n \n } // namespace duckdb\ndiff --git a/src/include/duckdb/function/scalar/math_functions.hpp b/src/include/duckdb/function/scalar/math_functions.hpp\nindex fa01ace3b8a6..e75785c75b84 100644\n--- a/src/include/duckdb/function/scalar/math_functions.hpp\n+++ b/src/include/duckdb/function/scalar/math_functions.hpp\n@@ -101,4 +101,8 @@ struct NextAfterFun {\n \tstatic void RegisterFunction(BuiltinFunctions &set);\n };\n \n+struct EvenFun {\n+\tstatic void RegisterFunction(BuiltinFunctions &set);\n+};\n+\n } // namespace duckdb\n",
  "test_patch": "diff --git a/test/sql/function/numeric/test_even.test b/test/sql/function/numeric/test_even.test\nnew file mode 100644\nindex 000000000000..bcaab1b28757\n--- /dev/null\n+++ b/test/sql/function/numeric/test_even.test\n@@ -0,0 +1,69 @@\n+# name: test/sql/function/numeric/test_even.test\n+# description: Test even\n+# group: [numeric]\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+query II\n+select i, even(i + 0.4) from generate_series(-4,4) tbl(i);\n+----\n+-4\t-4\n+-3\t-4\n+-2\t-2\n+-1\t-2\n+0\t2\n+1\t2\n+2\t4\n+3\t4\n+4\t6\n+\n+\n+query II\n+select i, even(i + 0.9) from generate_series(-4,4) tbl(i);\n+----\n+-4\t-4\n+-3\t-4\n+-2\t-2\n+-1\t-2\n+0\t2\n+1\t2\n+2\t4\n+3\t4\n+4\t6\n+\n+# decimals\n+query II\n+SELECT even(19.4), even(-19.4)\n+----\n+20\t-20\n+\n+query II\n+SELECT even(8.9), even(-8.9)\n+----\n+10\t-10\n+\n+# doubles\n+query II\n+SELECT even(45::DOUBLE), even(-35::DOUBLE)\n+----\n+46\t-36\n+\n+query I\n+SELECT even(NULL)\n+----\n+NULL\n+\n+statement error\n+SELECT even('abcd')\n+\n+# check bound\n+query I\n+SELECT even(1.7976931348623155e+308)\n+----\n+1.7976931348623155e+308\n+\n+query I\n+SELECT even(-1.7976931348623155e+308)\n+----\n+-1.7976931348623155e+308\n",
  "problem_statement": "Add support for EVEN (Fix #2478)\nI fixed the error in implementation of even function and added testcase into SQLLogicTests.\r\nI closed previous PR and created this PR.\n",
  "hints_text": "",
  "created_at": "2021-10-25T18:28:41Z"
}