You will be provided with a partial code base and an issue statement explaining a problem to resolve.
In your output, give nothing but the code (no markdown) so that your output can be copy pasted and run immediately with no changes

<issue>
list_contains doesn't handle prior selections correctly
#### What happens?
When `list_contains` is not the first predicate, it doesn't handle the previous selection correctly.

#### To Reproduce
```sql
SELECT function_name, return_type, parameter_types
FROM duckdb_functions()
WHERE function_type = 'scalar' AND list_has(parameter_types, 'TIMESTAMP')
```

#### Environment (please complete the following information):
 - OS: OSX
 - DuckDB Version: 0.3.3.-dev
 - DuckDB Client: Shell

#### Before Submitting

- [X] **Have you tried this on the latest `master` branch?**
* **Python**: `pip install duckdb --upgrade --pre`
* **R**: `install.packages("https://github.com/duckdb/duckdb/releases/download/master-builds/duckdb_r_src.tar.gz", repos = NULL)`
* **Other Platforms**: You can find binaries [here](https://github.com/duckdb/duckdb/releases/tag/master-builds) or compile from source.

- [X] **Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?**

list_contains doesn't handle prior selections correctly
#### What happens?
When `list_contains` is not the first predicate, it doesn't handle the previous selection correctly.

#### To Reproduce
```sql
SELECT function_name, return_type, parameter_types
FROM duckdb_functions()
WHERE function_type = 'scalar' AND list_has(parameter_types, 'TIMESTAMP')
```

#### Environment (please complete the following information):
 - OS: OSX
 - DuckDB Version: 0.3.3.-dev
 - DuckDB Client: Shell

#### Before Submitting

- [X] **Have you tried this on the latest `master` branch?**
* **Python**: `pip install duckdb --upgrade --pre`
* **R**: `install.packages("https://github.com/duckdb/duckdb/releases/download/master-builds/duckdb_r_src.tar.gz", repos = NULL)`
* **Other Platforms**: You can find binaries [here](https://github.com/duckdb/duckdb/releases/tag/master-builds) or compile from source.

- [X] **Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?**


</issue>
<code>
[start of README.md]
1: <div align="center">
2:   <img src="https://duckdb.org/images/DuckDB_Logo_dl.png" height="50">
3: </div>
4: <p>&nbsp;</p>
5: 
6: <p align="center">
7:   <a href="https://github.com/duckdb/duckdb/actions">
8:     <img src="https://github.com/cwida/duckdb/workflows/.github/workflows/main.yml/badge.svg?branch=master" alt=".github/workflows/main.yml">
9:   </a>
10:   <a href="https://www.codefactor.io/repository/github/cwida/duckdb">
11:     <img src="https://www.codefactor.io/repository/github/cwida/duckdb/badge" alt="CodeFactor"/>
12:   </a>
13:   <a href="https://app.codecov.io/gh/duckdb/duckdb">
14:     <img src="https://codecov.io/gh/duckdb/duckdb/branch/master/graph/badge.svg?token=FaxjcfFghN" alt="codecov"/>
15:   </a>
16:   <a href="https://discord.gg/tcvwpjfnZx">
17:     <img src="https://shields.io/discord/909674491309850675" alt="discord" />
18:   </a>
19: </p>
20: 
21: ## DuckDB
22: DuckDB is a high-performance analytical database system. It is designed to be fast, reliable and easy to use. DuckDB provides a rich SQL dialect, with support far beyond basic SQL. DuckDB supports arbitrary and nested correlated subqueries, window functions, collations, complex types (arrays, structs), and more. For more information on the goals of DuckDB, please refer to [the Why DuckDB page on our website](https://duckdb.org/why_duckdb).
23: 
24: ## Installation
25: If you want to install and use DuckDB, please see [our website](https://www.duckdb.org) for installation and usage instructions.
26: 
27: ## Data Import
28: For CSV files and Parquet files, data import is as simple as referencing the file in the FROM clause:
29: 
30: ```sql
31: SELECT * FROM 'myfile.csv';
32: SELECT * FROM 'myfile.parquet';
33: ```
34: 
35: Refer to our [Data Import](https://duckdb.org/docs/data/overview) section for more information.
36: 
37: ## SQL Reference
38: The [website](https://duckdb.org/docs/sql/introduction) contains a reference of functions and SQL constructs available in DuckDB.
39: 
40: ## Development
41: For development, DuckDB requires [CMake](https://cmake.org), Python3 and a `C++11` compliant compiler. Run `make` in the root directory to compile the sources. For development, use `make debug` to build a non-optimized debug version. You should run `make unit` and `make allunit` to verify that your version works properly after making changes. To test performance, you can run several standard benchmarks from the root directory by executing `./build/release/benchmark/benchmark_runner`.
42: 
43: Please also refer to our [Contribution Guide](CONTRIBUTING.md).
44: 
45: 
[end of README.md]
[start of src/function/scalar/list/contains_or_position.cpp]
1: #include "duckdb/planner/expression/bound_function_expression.hpp"
2: #include "duckdb/function/scalar/nested_functions.hpp"
3: #include "duckdb/planner/expression_binder.hpp"
4: 
5: namespace duckdb {
6: 
7: template <class T>
8: static inline bool ValueEqualsOrNot(const T &left, const T &right) {
9: 	return left == right;
10: }
11: 
12: template <>
13: inline bool ValueEqualsOrNot(const string_t &left, const string_t &right) {
14: 	return StringComparisonOperators::EqualsOrNot<false>(left, right);
15: }
16: 
17: struct ContainsFunctor {
18: 	static inline bool Initialize() {
19: 		return false;
20: 	}
21: 	static inline bool UpdateResultEntries(idx_t child_idx) {
22: 		return true;
23: 	}
24: };
25: 
26: struct PositionFunctor {
27: 	static inline int32_t Initialize() {
28: 		return 0;
29: 	}
30: 	static inline int32_t UpdateResultEntries(idx_t child_idx) {
31: 		return child_idx + 1;
32: 	}
33: };
34: 
35: template <class CHILD_TYPE, class RETURN_TYPE, class OP>
36: static void TemplatedContainsOrPosition(DataChunk &args, ExpressionState &state, Vector &result,
37:                                         bool is_nested = false) {
38: 	D_ASSERT(args.ColumnCount() == 2);
39: 	auto count = args.size();
40: 	Vector &list = args.data[0];
41: 	Vector &value_vector = args.data[1];
42: 
43: 	// Create a result vector of type RETURN_TYPE
44: 	result.SetVectorType(VectorType::FLAT_VECTOR);
45: 	auto result_entries = FlatVector::GetData<RETURN_TYPE>(result);
46: 	auto &result_validity = FlatVector::Validity(result);
47: 
48: 	if (list.GetType().id() == LogicalTypeId::SQLNULL) {
49: 		result_validity.SetInvalid(0);
50: 		return;
51: 	}
52: 
53: 	auto list_size = ListVector::GetListSize(list);
54: 	auto &child_vector = ListVector::GetEntry(list);
55: 
56: 	VectorData child_data;
57: 	child_vector.Orrify(list_size, child_data);
58: 
59: 	VectorData list_data;
60: 	list.Orrify(count, list_data);
61: 	auto list_entries = (list_entry_t *)list_data.data;
62: 
63: 	VectorData value_data;
64: 	value_vector.Orrify(count, value_data);
65: 
66: 	for (idx_t i = 0; i < count; i++) {
67: 		auto list_index = list_data.sel->get_index(i);
68: 		auto value_index = value_data.sel->get_index(i);
69: 
70: 		if (!list_data.validity.RowIsValid(list_index) || !value_data.validity.RowIsValid(value_index)) {
71: 			result_validity.SetInvalid(i);
72: 			continue;
73: 		}
74: 
75: 		const auto &list_entry = list_entries[list_index];
76: 		auto source_idx = child_data.sel->get_index(list_entry.offset);
77: 
78: 		// not required for a comparison of nested types
79: 		auto child_value = FlatVector::GetData<CHILD_TYPE>(child_vector);
80: 		auto values = FlatVector::GetData<CHILD_TYPE>(value_vector);
81: 
82: 		result_entries[list_index] = OP::Initialize();
83: 		for (idx_t child_idx = 0; child_idx < list_entry.length; child_idx++) {
84: 			auto child_value_idx = source_idx + child_idx;
85: 
86: 			if (!child_data.validity.RowIsValid(child_value_idx)) {
87: 				continue;
88: 			}
89: 
90: 			if (!is_nested) {
91: 				if (ValueEqualsOrNot<CHILD_TYPE>(child_value[child_value_idx], values[value_index])) {
92: 					result_entries[list_index] = OP::UpdateResultEntries(child_idx);
93: 					break; // Found value in list, no need to look further
94: 				}
95: 			} else {
96: 				// FIXME: using Value is less efficient than modifying the vector comparison code
97: 				// to more efficiently compare nested types
98: 				if (ValueEqualsOrNot<Value>(child_vector.GetValue(child_value_idx),
99: 				                            value_vector.GetValue(value_index))) {
100: 					result_entries[list_index] = OP::UpdateResultEntries(child_idx);
101: 					break; // Found value in list, no need to look further
102: 				}
103: 			}
104: 		}
105: 	}
106: }
107: 
108: template <class T, class OP>
109: static void ListContainsOrPosition(DataChunk &args, ExpressionState &state, Vector &result) {
110: 	switch (args.data[1].GetType().InternalType()) {
111: 	case PhysicalType::BOOL:
112: 	case PhysicalType::INT8:
113: 		TemplatedContainsOrPosition<int8_t, T, OP>(args, state, result);
114: 		break;
115: 	case PhysicalType::INT16:
116: 		TemplatedContainsOrPosition<int16_t, T, OP>(args, state, result);
117: 		break;
118: 	case PhysicalType::INT32:
119: 		TemplatedContainsOrPosition<int32_t, T, OP>(args, state, result);
120: 		break;
121: 	case PhysicalType::INT64:
122: 		TemplatedContainsOrPosition<int64_t, T, OP>(args, state, result);
123: 		break;
124: 	case PhysicalType::INT128:
125: 		TemplatedContainsOrPosition<hugeint_t, T, OP>(args, state, result);
126: 		break;
127: 	case PhysicalType::UINT8:
128: 		TemplatedContainsOrPosition<uint8_t, T, OP>(args, state, result);
129: 		break;
130: 	case PhysicalType::UINT16:
131: 		TemplatedContainsOrPosition<uint16_t, T, OP>(args, state, result);
132: 		break;
133: 	case PhysicalType::UINT32:
134: 		TemplatedContainsOrPosition<uint32_t, T, OP>(args, state, result);
135: 		break;
136: 	case PhysicalType::UINT64:
137: 		TemplatedContainsOrPosition<uint64_t, T, OP>(args, state, result);
138: 		break;
139: 	case PhysicalType::FLOAT:
140: 		TemplatedContainsOrPosition<float, T, OP>(args, state, result);
141: 		break;
142: 	case PhysicalType::DOUBLE:
143: 		TemplatedContainsOrPosition<double, T, OP>(args, state, result);
144: 		break;
145: 	case PhysicalType::VARCHAR:
146: 		TemplatedContainsOrPosition<string_t, T, OP>(args, state, result);
147: 		break;
148: 	case PhysicalType::MAP:
149: 	case PhysicalType::STRUCT:
150: 	case PhysicalType::LIST:
151: 		TemplatedContainsOrPosition<int8_t, T, OP>(args, state, result, true);
152: 		break;
153: 	default:
154: 		throw NotImplementedException("This function has not been implemented for this type");
155: 	}
156: }
157: 
158: static void ListContainsFunction(DataChunk &args, ExpressionState &state, Vector &result) {
159: 	return ListContainsOrPosition<bool, ContainsFunctor>(args, state, result);
160: }
161: 
162: static void ListPositionFunction(DataChunk &args, ExpressionState &state, Vector &result) {
163: 	return ListContainsOrPosition<int32_t, PositionFunctor>(args, state, result);
164: }
165: 
166: template <LogicalTypeId RETURN_TYPE>
167: static unique_ptr<FunctionData> ListContainsOrPositionBind(ClientContext &context, ScalarFunction &bound_function,
168:                                                            vector<unique_ptr<Expression>> &arguments) {
169: 	D_ASSERT(bound_function.arguments.size() == 2);
170: 
171: 	const auto &list = arguments[0]->return_type; // change to list
172: 	const auto &value = arguments[1]->return_type;
173: 	if (list.id() == LogicalTypeId::SQLNULL && value.id() == LogicalTypeId::SQLNULL) {
174: 		bound_function.arguments[0] = LogicalType::SQLNULL;
175: 		bound_function.arguments[1] = LogicalType::SQLNULL;
176: 		bound_function.return_type = LogicalType::SQLNULL;
177: 	} else if (list.id() == LogicalTypeId::SQLNULL || value.id() == LogicalTypeId::SQLNULL) {
178: 		// In case either the list or the value is NULL, return NULL
179: 		// Similar to behaviour of prestoDB
180: 		bound_function.arguments[0] = list;
181: 		bound_function.arguments[1] = value;
182: 		bound_function.return_type = LogicalTypeId::SQLNULL;
183: 	} else {
184: 		auto const &child_type = ListType::GetChildType(arguments[0]->return_type);
185: 		auto max_child_type = LogicalType::MaxLogicalType(child_type, value);
186: 		ExpressionBinder::ResolveParameterType(max_child_type);
187: 		auto list_type = LogicalType::LIST(max_child_type);
188: 
189: 		bound_function.arguments[0] = list_type;
190: 		bound_function.arguments[1] = value == max_child_type ? value : max_child_type;
191: 
192: 		// list_contains and list_position only differ in their return type
193: 		bound_function.return_type = RETURN_TYPE;
194: 	}
195: 	return make_unique<VariableReturnBindData>(bound_function.return_type);
196: }
197: 
198: static unique_ptr<FunctionData> ListContainsBind(ClientContext &context, ScalarFunction &bound_function,
199:                                                  vector<unique_ptr<Expression>> &arguments) {
200: 	return ListContainsOrPositionBind<LogicalType::BOOLEAN>(context, bound_function, arguments);
201: }
202: 
203: static unique_ptr<FunctionData> ListPositionBind(ClientContext &context, ScalarFunction &bound_function,
204:                                                  vector<unique_ptr<Expression>> &arguments) {
205: 	return ListContainsOrPositionBind<LogicalType::INTEGER>(context, bound_function, arguments);
206: }
207: 
208: ScalarFunction ListContainsFun::GetFunction() {
209: 	return ScalarFunction({LogicalType::LIST(LogicalType::ANY), LogicalType::ANY}, // argument list
210: 	                      LogicalType::BOOLEAN,                                    // return type
211: 	                      ListContainsFunction, false, false, ListContainsBind, nullptr);
212: }
213: 
214: ScalarFunction ListPositionFun::GetFunction() {
215: 	return ScalarFunction({LogicalType::LIST(LogicalType::ANY), LogicalType::ANY}, // argument list
216: 	                      LogicalType::INTEGER,                                    // return type
217: 	                      ListPositionFunction, false, false, ListPositionBind, nullptr);
218: }
219: 
220: void ListContainsFun::RegisterFunction(BuiltinFunctions &set) {
221: 	set.AddFunction({"list_contains", "array_contains", "list_has", "array_has"}, GetFunction());
222: }
223: 
224: void ListPositionFun::RegisterFunction(BuiltinFunctions &set) {
225: 	set.AddFunction({"list_position", "list_indexof", "array_position", "array_indexof"}, GetFunction());
226: }
227: } // namespace duckdb
[end of src/function/scalar/list/contains_or_position.cpp]
</code>
Here is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.
<patch>
--- a/file.cpp
+++ b/file.cpp
@@ -3,35 +3,44 @@
 #include <cstdlib>
 
 int euclidean(int a, int b) {
-    while (b) {
-        int temp = b;
-        b = a % b;
-        a = temp;
+    if (b == 0) {
+        return a;
     }
-    return a;
+    return euclidean(b, a % b);
 }
 
 std::vector<std::pair<int, int>> bresenham(int x0, int y0, int x1, int y1) {
     std::vector<std::pair<int, int>> points;
     int dx = abs(x1 - x0);
     int dy = abs(y1 - y0);
+    int x = x0, y = y0;
     int sx = (x0 < x1) ? 1 : -1;
     int sy = (y0 < y1) ? 1 : -1;
-    int err = dx - dy;
 
-    while (true) {
-        points.emplace_back(x0, y0);
-        if (x0 == x1 && y0 == y1) break;
-        int e2 = 2 * err;
-        if (e2 > -dy) {
+    if (dx > dy) {
+        int err = dx / 2;
+        while (x != x1) {
+            points.emplace_back(x, y);
             err -= dy;
-            x0 += sx;
+            if (err < 0) {
+                y += sy;
+                err += dx;
+            }
+            x += sx;
         }
-        if (e2 < dx) {
-            err += dx;
-            y0 += sy;
+    } else {
+        int err = dy / 2;
+        while (y != y1) {
+            points.emplace_back(x, y);
+            err -= dx;
+            if (err < 0) {
+                x += sx;
+                err += dy;
+            }
+            y += sy;
         }
     }
 
+    points.emplace_back(x, y);
     return points;
 }

</patch>

I need you to solve the provided issue by generating a single patch file that I can apply directly to this repository using git apply.
Please respond with a single patch file in the format shown above.
Make sure to only include the patch file contents so that the contents of your output can be copied into a patch file and applied directly

Respond below: