{
  "repo": "duckdb/duckdb",
  "pull_number": 10691,
  "instance_id": "duckdb__duckdb-10691",
  "issue_numbers": [
    "10685",
    "10685"
  ],
  "base_commit": "2a0f9e71d91aae767edfb169e187f77d782b8997",
  "patch": "diff --git a/src/parser/transform/tableref/transform_join.cpp b/src/parser/transform/tableref/transform_join.cpp\nindex 4213cb5a2f52..9c60ec244b40 100644\n--- a/src/parser/transform/tableref/transform_join.cpp\n+++ b/src/parser/transform/tableref/transform_join.cpp\n@@ -2,6 +2,9 @@\n #include \"duckdb/parser/tableref/basetableref.hpp\"\n #include \"duckdb/parser/tableref/joinref.hpp\"\n #include \"duckdb/parser/transformer.hpp\"\n+#include \"duckdb/parser/query_node/select_node.hpp\"\n+#include \"duckdb/parser/tableref/subqueryref.hpp\"\n+#include \"duckdb/parser/expression/star_expression.hpp\"\n \n namespace duckdb {\n \n@@ -70,6 +73,19 @@ unique_ptr<TableRef> Transformer::TransformJoin(duckdb_libpgquery::PGJoinExpr &r\n \t\tresult->ref_type = JoinRefType::CROSS;\n \t}\n \tresult->condition = TransformExpression(root.quals);\n+\tif (root.alias) {\n+\t\t// join with an alias - wrap it in a subquery\n+\t\tauto select_node = make_uniq<SelectNode>();\n+\t\tselect_node->select_list.push_back(make_uniq<StarExpression>());\n+\t\tselect_node->from_table = std::move(result);\n+\t\tauto select = make_uniq<SelectStatement>();\n+\t\tselect->node = std::move(select_node);\n+\t\tauto subquery = make_uniq<SubqueryRef>(std::move(select));\n+\t\tSetQueryLocation(*subquery, root.location);\n+\t\t// apply the alias to that subquery\n+\t\tsubquery->alias = TransformAlias(root.alias, subquery->column_name_alias);\n+\t\treturn std::move(subquery);\n+\t}\n \treturn std::move(result);\n }\n \n",
  "test_patch": "diff --git a/test/sql/parser/join_alias.test b/test/sql/parser/join_alias.test\nnew file mode 100644\nindex 000000000000..fa1a403e37eb\n--- /dev/null\n+++ b/test/sql/parser/join_alias.test\n@@ -0,0 +1,42 @@\n+# name: test/sql/parser/join_alias.test\n+# description: Fix #10685: JOIN clause can be aliased, but alias cannot be referenced\n+# group: [parser]\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+query II rowsort\n+select t.*\n+from (\n+  (values (1), (2)) as t1 (a)\n+  cross join\n+  (values (3), (4)) as t2 (b)\n+) as t\n+----\n+1\t3\n+1\t4\n+2\t3\n+2\t4\n+\n+# column alias\n+query II rowsort\n+select x, y\n+from (\n+  (values (1), (2)) as t1 (a)\n+  cross join\n+  (values (3), (4)) as t2 (b)\n+) as t(x, y)\n+----\n+1\t3\n+1\t4\n+2\t3\n+2\t4\n+\n+statement error\n+from (\n+  (values (1), (2)) as t1 (a)\n+  cross join\n+  (values (3), (4)) as t2 (b)\n+) as t(x, y, z)\n+----\n+has 2 columns available but 3 columns specified\n",
  "problem_statement": "JOIN clause can be aliased, but alias cannot be referenced\n### What happens?\r\n\r\nI can alias a `JOIN` clause like in the SQL standard and some other RDBMS (e.g. PostgreSQL), but I cannot reference that alias from the query.\r\n\r\n### To Reproduce\r\n\r\nTry this query, it works:\r\n\r\n```sql\r\nselect *\r\nfrom (\r\n  (values (1), (2)) as t1 (a)\r\n  cross join\r\n  (values (3), (4)) as t2 (b)\r\n) as t\r\n```\r\n\r\nAnd produces:\r\n\r\n```\r\n|a  |b  |\r\n|---|---|\r\n|1  |3  |\r\n|1  |4  |\r\n|2  |3  |\r\n|2  |4  |\r\n```\r\n\r\nSo, I can alias the `JOIN` clause, even if that's not documented here:\r\nhttps://duckdb.org/docs/sql/statements/select#from-clause\r\n\r\n<img width=\"728\" alt=\"image\" src=\"https://github.com/duckdb/duckdb/assets/734593/1b952ca1-aa2c-47f3-9b59-8d3a24e3e7ea\">\r\n\r\nHowever, I now cannot reference the `t` alias. Both of these fail:\r\n\r\n```sql\r\nselect t.*\r\nfrom (\r\n  (values (1), (2)) as t1 (a)\r\n  cross join\r\n  (values (3), (4)) as t2 (b)\r\n) as t\r\n```\r\n\r\nAnd\r\n\r\n```sql\r\nselect t.a, t.b\r\nfrom (\r\n  (values (1), (2)) as t1 (a)\r\n  cross join\r\n  (values (3), (4)) as t2 (b)\r\n) as t\r\n```\r\n\r\nThe error is:\r\n\r\n> SQL Error: java.sql.SQLException: Binder Error: Referenced table \"t\" not found!\r\n> Candidate tables: \"t1\", \"t2\"\r\n\r\n### OS:\r\n\r\nMicrosoft Windows [Version 10.0.22631.3007]\r\n\r\n### DuckDB Version:\r\n\r\n0.10.0\r\n\r\n### DuckDB Client:\r\n\r\nJDBC\r\n\r\n### Full Name:\r\n\r\nLukas Eder\r\n\r\n### Affiliation:\r\n\r\nData Geekery\r\n\r\n### Have you tried this on the latest [nightly build](https://duckdb.org/docs/installation/?version=main)?\r\n\r\nI have tested with a nightly build\r\n\r\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\r\n\r\n- [X] Yes, I have\nJOIN clause can be aliased, but alias cannot be referenced\n### What happens?\r\n\r\nI can alias a `JOIN` clause like in the SQL standard and some other RDBMS (e.g. PostgreSQL), but I cannot reference that alias from the query.\r\n\r\n### To Reproduce\r\n\r\nTry this query, it works:\r\n\r\n```sql\r\nselect *\r\nfrom (\r\n  (values (1), (2)) as t1 (a)\r\n  cross join\r\n  (values (3), (4)) as t2 (b)\r\n) as t\r\n```\r\n\r\nAnd produces:\r\n\r\n```\r\n|a  |b  |\r\n|---|---|\r\n|1  |3  |\r\n|1  |4  |\r\n|2  |3  |\r\n|2  |4  |\r\n```\r\n\r\nSo, I can alias the `JOIN` clause, even if that's not documented here:\r\nhttps://duckdb.org/docs/sql/statements/select#from-clause\r\n\r\n<img width=\"728\" alt=\"image\" src=\"https://github.com/duckdb/duckdb/assets/734593/1b952ca1-aa2c-47f3-9b59-8d3a24e3e7ea\">\r\n\r\nHowever, I now cannot reference the `t` alias. Both of these fail:\r\n\r\n```sql\r\nselect t.*\r\nfrom (\r\n  (values (1), (2)) as t1 (a)\r\n  cross join\r\n  (values (3), (4)) as t2 (b)\r\n) as t\r\n```\r\n\r\nAnd\r\n\r\n```sql\r\nselect t.a, t.b\r\nfrom (\r\n  (values (1), (2)) as t1 (a)\r\n  cross join\r\n  (values (3), (4)) as t2 (b)\r\n) as t\r\n```\r\n\r\nThe error is:\r\n\r\n> SQL Error: java.sql.SQLException: Binder Error: Referenced table \"t\" not found!\r\n> Candidate tables: \"t1\", \"t2\"\r\n\r\n### OS:\r\n\r\nMicrosoft Windows [Version 10.0.22631.3007]\r\n\r\n### DuckDB Version:\r\n\r\n0.10.0\r\n\r\n### DuckDB Client:\r\n\r\nJDBC\r\n\r\n### Full Name:\r\n\r\nLukas Eder\r\n\r\n### Affiliation:\r\n\r\nData Geekery\r\n\r\n### Have you tried this on the latest [nightly build](https://duckdb.org/docs/installation/?version=main)?\r\n\r\nI have tested with a nightly build\r\n\r\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\r\n\r\n- [X] Yes, I have\n",
  "hints_text": "\n",
  "created_at": "2024-02-15T13:12:54Z"
}