{
  "repo": "duckdb/duckdb",
  "pull_number": 1642,
  "instance_id": "duckdb__duckdb-1642",
  "issue_numbers": [
    "1618"
  ],
  "base_commit": "a5ff22b0a25001e2e60c7fcdb96896d705497d4a",
  "patch": "diff --git a/extension/parquet/parquet_reader.cpp b/extension/parquet/parquet_reader.cpp\nindex 9e6872afa166..e65e19dd894c 100644\n--- a/extension/parquet/parquet_reader.cpp\n+++ b/extension/parquet/parquet_reader.cpp\n@@ -147,7 +147,7 @@ static unique_ptr<ColumnReader> CreateReaderRecursive(const FileMetaData *file_m\n \n \tif (s_ele.__isset.repetition_type) {\n \t\tif (s_ele.repetition_type != FieldRepetitionType::REQUIRED) {\n-\t\t\tmax_define = depth;\n+\t\t\tmax_define++;\n \t\t}\n \t\tif (s_ele.repetition_type == FieldRepetitionType::REPEATED) {\n \t\t\tmax_repeat++;\n",
  "test_patch": "diff --git a/test/sql/copy/parquet/data/bug1618_struct_strings.parquet b/test/sql/copy/parquet/data/bug1618_struct_strings.parquet\nnew file mode 100644\nindex 000000000000..7a0da50fc851\nBinary files /dev/null and b/test/sql/copy/parquet/data/bug1618_struct_strings.parquet differ\ndiff --git a/test/sql/copy/parquet/parquet_1618_struct_strings.test b/test/sql/copy/parquet/parquet_1618_struct_strings.test\nnew file mode 100644\nindex 000000000000..8381be047fb7\n--- /dev/null\n+++ b/test/sql/copy/parquet/parquet_1618_struct_strings.test\n@@ -0,0 +1,24 @@\n+# name: test/sql/copy/parquet/parquet_1618_struct_strings.test\n+# description: Unclear what went wrong here in the past, but its fixed, and let's make sure it never happens again\n+# group: [parquet]\n+\n+require parquet\n+\n+query I\n+SELECT \"inner\"['str_field'] FROM parquet_scan('test/sql/copy/parquet/data/bug1618_struct_strings.parquet')\n+----\n+hello\n+NULL\n+\n+query I\n+SELECT \"inner\"['f64_field'] FROM parquet_scan('test/sql/copy/parquet/data/bug1618_struct_strings.parquet')\n+----\n+NULL\n+1.23\n+\n+query I\n+SELECT \"inner\" FROM parquet_scan('test/sql/copy/parquet/data/bug1618_struct_strings.parquet')\n+----\n+<str_field: hello, f64_field: NULL>\n+<str_field: NULL, f64_field: 1.230000>\n+\ndiff --git a/test/sql/copy/parquet/parquet_1619.test b/test/sql/copy/parquet/parquet_1619.test\nindex 9c6b8749040e..3b8d37590be3 100644\n--- a/test/sql/copy/parquet/parquet_1619.test\n+++ b/test/sql/copy/parquet/parquet_1619.test\n@@ -7,17 +7,17 @@ require parquet\n query I\n select struct_extract(\"inner\", 'f64_field') from parquet_scan('test/sql/copy/parquet/data/struct.parquet');\n ----\n-1.23\n NULL\n+1.23\n \n query I\n select (\"inner\").\"f64_field\" from parquet_scan('test/sql/copy/parquet/data/struct.parquet');\n ----\n-1.23\n NULL\n+1.23\n \n query I\n select \"inner\"['f64_field'] from parquet_scan('test/sql/copy/parquet/data/struct.parquet');\n ----\n-1.23\n NULL\n+1.23\n",
  "problem_statement": "Parquet reader doesn't appear to handle (some) fields inside nested objects\nGiven a parquet file with this schema:\r\n```\r\nmessage test {\r\n  required group inner {\r\n    optional binary str_field (STRING);\r\n    optional double f64_field;\r\n  }\r\n}\r\n```\r\n\r\n`parquet_scan` does not appear to read the `str_field` fields correctly. Using the file in `data/struct.parquet` in https://github.com/nelhage/duckdb-parquet-bugs I see:\r\n\r\n```\r\n[nelhage@monolithique:~/code/duckdb-parquet]$ parquet-tool cat data/struct.parquet\r\ninner:\r\n.str_field = hello\r\n\r\ninner:\r\n.f64_field = 1.23\r\n\r\n(GIT: master)\r\n[nelhage@monolithique:~/code/duckdb-parquet]$ duckdb test.duckdb \"select * from parquet_scan('data/struct.parquet');\"\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502                 inner                  \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 <str_field: NULL, f64_field: 1.230000> \u2502\r\n\u2502 <str_field: NULL, f64_field: NULL>     \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\nWe can see that the `f64_field` is read properly, but the `str_field` is `NULL` even when present in the file.\r\n\r\nThat test file is generated by https://github.com/nelhage/duckdb-parquet-bugs/blob/master/gen-struct.go in case it is relevant.\n",
  "hints_text": "This is interesting, from looking at the file in detail and I'm a bit confused. Specifically, the definition levels of the two columns seem off, the string one has `[1, 0]` and the float one has `[2, 0]`, neither of which makes too much sense to me.  However, Arrow's parquet reader seems to read it correctly, so the issue may be a misunderstanding on my side. Will continue.  ",
  "created_at": "2021-04-19T12:17:55Z"
}