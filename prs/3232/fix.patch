diff --git a/src/include/duckdb/optimizer/filter_pushdown.hpp b/src/include/duckdb/optimizer/filter_pushdown.hpp
index 8a207602dbad..394448aec750 100644
--- a/src/include/duckdb/optimizer/filter_pushdown.hpp
+++ b/src/include/duckdb/optimizer/filter_pushdown.hpp
@@ -53,6 +53,8 @@ class FilterPushdown {
 	unique_ptr<LogicalOperator> PushdownSetOperation(unique_ptr<LogicalOperator> op);
 	//! Push down a LogicalGet op
 	unique_ptr<LogicalOperator> PushdownGet(unique_ptr<LogicalOperator> op);
+	//! Push down a LogicalLimit op
+	unique_ptr<LogicalOperator> PushdownLimit(unique_ptr<LogicalOperator> op);
 	// Pushdown an inner join
 	unique_ptr<LogicalOperator> PushdownInnerJoin(unique_ptr<LogicalOperator> op, unordered_set<idx_t> &left_bindings,
 	                                              unordered_set<idx_t> &right_bindings);
diff --git a/src/optimizer/filter_pushdown.cpp b/src/optimizer/filter_pushdown.cpp
index 42eaa57a24f8..72f3cc7dbf2c 100644
--- a/src/optimizer/filter_pushdown.cpp
+++ b/src/optimizer/filter_pushdown.cpp
@@ -35,6 +35,8 @@ unique_ptr<LogicalOperator> FilterPushdown::Rewrite(unique_ptr<LogicalOperator>
 	}
 	case LogicalOperatorType::LOGICAL_GET:
 		return PushdownGet(move(op));
+	case LogicalOperatorType::LOGICAL_LIMIT:
+		return PushdownLimit(move(op));
 	default:
 		return FinishPushdown(move(op));
 	}
diff --git a/src/optimizer/pushdown/CMakeLists.txt b/src/optimizer/pushdown/CMakeLists.txt
index a514ac7e4718..1c2ff2e4f141 100644
--- a/src/optimizer/pushdown/CMakeLists.txt
+++ b/src/optimizer/pushdown/CMakeLists.txt
@@ -6,6 +6,7 @@ add_library_unity(
   pushdown_filter.cpp
   pushdown_get.cpp
   pushdown_inner_join.cpp
+  pushdown_limit.cpp
   pushdown_left_join.cpp
   pushdown_mark_join.cpp
   pushdown_projection.cpp
diff --git a/src/optimizer/pushdown/pushdown_limit.cpp b/src/optimizer/pushdown/pushdown_limit.cpp
new file mode 100644
index 000000000000..047898e02e4b
--- /dev/null
+++ b/src/optimizer/pushdown/pushdown_limit.cpp
@@ -0,0 +1,19 @@
+#include "duckdb/optimizer/filter_pushdown.hpp"
+#include "duckdb/optimizer/optimizer.hpp"
+#include "duckdb/planner/expression/bound_columnref_expression.hpp"
+#include "duckdb/planner/operator/logical_empty_result.hpp"
+#include "duckdb/planner/operator/logical_limit.hpp"
+
+namespace duckdb {
+
+unique_ptr<LogicalOperator> FilterPushdown::PushdownLimit(unique_ptr<LogicalOperator> op) {
+	auto &limit = (LogicalLimit &)*op;
+
+	if (!limit.limit && limit.limit_val == 0) {
+		return make_unique<LogicalEmptyResult>(move(op));
+	}
+
+	return FinishPushdown(move(op));
+}
+
+} // namespace duckdb
