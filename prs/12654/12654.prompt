You will be provided with a partial code base and an issue statement explaining a problem to resolve.
In your output, give nothing but the code (no markdown) so that your output can be copy pasted and run immediately with no changes.
In the patch file, please make sure to include the line numbers and a blank line at the end so it can be applied using git apply.

<issue>
current_timestamp cannot be used in having clause (Binder Error) 
### What happens?

in 0.10.X+ (tried 1.0.0 as well) it appears as though current_timestamp cannot be used in a having clause anymore. 

A BinderError is thrown when I try. 

in 0.10.2 (cli)
```
v0.10.2 1601d94f94
Enter ".help" for usage hints.
Connected to a transient in-memory database.
Use ".open FILENAME" to reopen on a persistent database.
D select 1 as one, max(cast('2024-06-21 12:00:00' as timestamp)) as mt group by one having mt <= current_timestamp;
Binder Error: column current_timestamp must appear in the GROUP BY clause or be used in an aggregate function
```

in 1.0.0
```
v1.0.0 1f98600c2c
Enter ".help" for usage hints.
Connected to a transient in-memory database.
Use ".open FILENAME" to reopen on a persistent database.
D select 1 as one, max(cast('2024-06-21 12:00:00' as timestamp)) as mt group by one having mt <= current_timestamp;
Binder Error: column current_timestamp must appear in the GROUP BY clause or be used in an aggregate function
```

In 0.9.2 this still works
```
❯ duckdb
v0.9.2 3c695d7ba9
Enter ".help" for usage hints.
Connected to a transient in-memory database.
Use ".open FILENAME" to reopen on a persistent database.
D select 1 as one, max(cast('2024-06-21 12:00:00' as timestamp)) as mt group by one having mt <= current_timestamp;
┌───────┬─────────────────────┐
│  one  │         mt          │
│ int32 │      timestamp      │
├───────┼─────────────────────┤
│     1 │ 2024-06-21 12:00:00 │
└───────┴─────────────────────┘
```

It appears as though get_current_timestamp() is a workaround. 

Notably these queries also work in postgres (but can't use the alias 😭 )
```sql
select 
  1 as one, 
  max(cast('2024-05-01 00:00:00' as timestamp)) as mt 
group by one 
having max(cast('2024-05-01 00:00:00' as timestamp))  <= current_timestamp;
```

### To Reproduce

Simple SQL Query:

```sql
select 
  1 as one, 
  max(cast('2024-05-01 00:00:00' as timestamp)) as mt 
group by one 
having mt <= current_timestamp;
```


### OS:

macOS 14.2 aarch64

### DuckDB Version:

0.10.2, 1.0.0

### DuckDB Client:

cli, java, wasm

### Full Name:

Jonathan Swenson

### Affiliation:

Omni

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have tested with a stable release

### Did you include all relevant data sets for reproducing the issue?

Yes

### Did you include all code required to reproduce the issue?

- [X] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [X] Yes, I have
current_timestamp cannot be used in having clause (Binder Error) 
### What happens?

in 0.10.X+ (tried 1.0.0 as well) it appears as though current_timestamp cannot be used in a having clause anymore. 

A BinderError is thrown when I try. 

in 0.10.2 (cli)
```
v0.10.2 1601d94f94
Enter ".help" for usage hints.
Connected to a transient in-memory database.
Use ".open FILENAME" to reopen on a persistent database.
D select 1 as one, max(cast('2024-06-21 12:00:00' as timestamp)) as mt group by one having mt <= current_timestamp;
Binder Error: column current_timestamp must appear in the GROUP BY clause or be used in an aggregate function
```

in 1.0.0
```
v1.0.0 1f98600c2c
Enter ".help" for usage hints.
Connected to a transient in-memory database.
Use ".open FILENAME" to reopen on a persistent database.
D select 1 as one, max(cast('2024-06-21 12:00:00' as timestamp)) as mt group by one having mt <= current_timestamp;
Binder Error: column current_timestamp must appear in the GROUP BY clause or be used in an aggregate function
```

In 0.9.2 this still works
```
❯ duckdb
v0.9.2 3c695d7ba9
Enter ".help" for usage hints.
Connected to a transient in-memory database.
Use ".open FILENAME" to reopen on a persistent database.
D select 1 as one, max(cast('2024-06-21 12:00:00' as timestamp)) as mt group by one having mt <= current_timestamp;
┌───────┬─────────────────────┐
│  one  │         mt          │
│ int32 │      timestamp      │
├───────┼─────────────────────┤
│     1 │ 2024-06-21 12:00:00 │
└───────┴─────────────────────┘
```

It appears as though get_current_timestamp() is a workaround. 

Notably these queries also work in postgres (but can't use the alias 😭 )
```sql
select 
  1 as one, 
  max(cast('2024-05-01 00:00:00' as timestamp)) as mt 
group by one 
having max(cast('2024-05-01 00:00:00' as timestamp))  <= current_timestamp;
```

### To Reproduce

Simple SQL Query:

```sql
select 
  1 as one, 
  max(cast('2024-05-01 00:00:00' as timestamp)) as mt 
group by one 
having mt <= current_timestamp;
```


### OS:

macOS 14.2 aarch64

### DuckDB Version:

0.10.2, 1.0.0

### DuckDB Client:

cli, java, wasm

### Full Name:

Jonathan Swenson

### Affiliation:

Omni

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have tested with a stable release

### Did you include all relevant data sets for reproducing the issue?

Yes

### Did you include all code required to reproduce the issue?

- [X] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [X] Yes, I have

</issue>
<code>
[start of README.md]
1: <div align="center">
2:   <picture>
3:     <source media="(prefers-color-scheme: light)" srcset="logo/DuckDB_Logo-horizontal.svg">
4:     <source media="(prefers-color-scheme: dark)" srcset="logo/DuckDB_Logo-horizontal-dark-mode.svg">
5:     <img alt="DuckDB logo" src="logo/DuckDB_Logo-horizontal.svg" height="100">
6:   </picture>
7: </div>
8: <br>
9: 
10: <p align="center">
11:   <a href="https://github.com/duckdb/duckdb/actions"><img src="https://github.com/duckdb/duckdb/actions/workflows/Main.yml/badge.svg?branch=main" alt="Github Actions Badge"></a>
12:   <a href="https://discord.gg/tcvwpjfnZx"><img src="https://shields.io/discord/909674491309850675" alt="discord" /></a>
13:   <a href="https://github.com/duckdb/duckdb/releases/"><img src="https://img.shields.io/github/v/release/duckdb/duckdb?color=brightgreen&display_name=tag&logo=duckdb&logoColor=white" alt="Latest Release"></a>
14: </p>
15: 
16: ## DuckDB
17: 
18: DuckDB is a high-performance analytical database system. It is designed to be fast, reliable, portable, and easy to use. DuckDB provides a rich SQL dialect, with support far beyond basic SQL. DuckDB supports arbitrary and nested correlated subqueries, window functions, collations, complex types (arrays, structs, maps), and [several extensions designed to make SQL easier to use](https://duckdb.org/docs/guides/sql_features/friendly_sql).
19: 
20: DuckDB is available as a [standalone CLI application](https://duckdb.org/docs/api/cli/overview) and has clients for [Python](https://duckdb.org/docs/api/python/overview), [R](https://duckdb.org/docs/api/r), [Java](https://duckdb.org/docs/api/java), [Wasm](https://duckdb.org/docs/api/wasm/overview), etc., with deep integrations with packages such as [pandas](https://duckdb.org/docs/guides/python/sql_on_pandas) and [dplyr](https://duckdblabs.github.io/duckplyr/).
21: 
22: For more information on using DuckDB, please refer to the [DuckDB documentation](https://duckdb.org/docs/).
23: 
24: ## Installation
25: 
26: If you want to install DuckDB, please see [our installation page](https://www.duckdb.org/docs/installation) for instructions.
27: 
28: ## Data Import
29: 
30: For CSV files and Parquet files, data import is as simple as referencing the file in the FROM clause:
31: 
32: ```sql
33: SELECT * FROM 'myfile.csv';
34: SELECT * FROM 'myfile.parquet';
35: ```
36: 
37: Refer to our [Data Import](https://duckdb.org/docs/data/overview) section for more information.
38: 
39: ## SQL Reference
40: 
41: The documentation contains a [SQL introduction and reference](https://duckdb.org/docs/sql/introduction).
42: 
43: ## Development
44: 
45: For development, DuckDB requires [CMake](https://cmake.org), Python3 and a `C++11` compliant compiler. Run `make` in the root directory to compile the sources. For development, use `make debug` to build a non-optimized debug version. You should run `make unit` and `make allunit` to verify that your version works properly after making changes. To test performance, you can run `BUILD_BENCHMARK=1 BUILD_TPCH=1 make` and then perform several standard benchmarks from the root directory by executing `./build/release/benchmark/benchmark_runner`. The details of benchmarks are in our [Benchmark Guide](benchmark/README.md).
46: 
47: Please also refer to our [Build Guide](https://duckdb.org/dev/building) and [Contribution Guide](CONTRIBUTING.md).
48: 
49: ## Support
50: 
51: See the [Support Options](https://duckdblabs.com/support/) page.
[end of README.md]
[start of src/planner/expression_binder/having_binder.cpp]
1: #include "duckdb/planner/expression_binder/having_binder.hpp"
2: 
3: #include "duckdb/parser/expression/columnref_expression.hpp"
4: #include "duckdb/planner/binder.hpp"
5: #include "duckdb/planner/expression_binder/aggregate_binder.hpp"
6: #include "duckdb/common/string_util.hpp"
7: #include "duckdb/planner/query_node/bound_select_node.hpp"
8: 
9: namespace duckdb {
10: 
11: HavingBinder::HavingBinder(Binder &binder, ClientContext &context, BoundSelectNode &node, BoundGroupInformation &info,
12:                            AggregateHandling aggregate_handling)
13:     : BaseSelectBinder(binder, context, node, info), column_alias_binder(node.bind_state),
14:       aggregate_handling(aggregate_handling) {
15: 	target_type = LogicalType(LogicalTypeId::BOOLEAN);
16: }
17: 
18: BindResult HavingBinder::BindLambdaReference(LambdaRefExpression &expr, idx_t depth) {
19: 	D_ASSERT(lambda_bindings && expr.lambda_idx < lambda_bindings->size());
20: 	auto &lambda_ref = expr.Cast<LambdaRefExpression>();
21: 	return (*lambda_bindings)[expr.lambda_idx].Bind(lambda_ref, depth);
22: }
23: 
24: BindResult HavingBinder::BindColumnRef(unique_ptr<ParsedExpression> &expr_ptr, idx_t depth, bool root_expression) {
25: 
26: 	// Keep the original column name to return a meaningful error message.
27: 	auto col_ref = expr_ptr->Cast<ColumnRefExpression>();
28: 	const auto &column_name = col_ref.GetColumnName();
29: 
30: 	// Try binding as a lambda parameter
31: 	if (!col_ref.IsQualified()) {
32: 		auto lambda_ref = LambdaRefExpression::FindMatchingBinding(lambda_bindings, col_ref.GetName());
33: 		if (lambda_ref) {
34: 			return BindLambdaReference(lambda_ref->Cast<LambdaRefExpression>(), depth);
35: 		}
36: 	}
37: 
38: 	// Bind the alias.
39: 	BindResult alias_result;
40: 	auto found_alias = column_alias_binder.BindAlias(*this, expr_ptr, depth, root_expression, alias_result);
41: 	if (found_alias) {
42: 		if (depth > 0) {
43: 			throw BinderException("Having clause cannot reference alias \"%s\" in correlated subquery", column_name);
44: 		}
45: 		return alias_result;
46: 	}
47: 
48: 	if (aggregate_handling != AggregateHandling::FORCE_AGGREGATES) {
49: 		return BindResult(StringUtil::Format(
50: 		    "column %s must appear in the GROUP BY clause or be used in an aggregate function", column_name));
51: 	}
52: 
53: 	if (depth > 0) {
54: 		throw BinderException("Having clause cannot reference column \"%s\" in correlated subquery and group by all",
55: 		                      column_name);
56: 	}
57: 
58: 	auto expr = duckdb::BaseSelectBinder::BindColumnRef(expr_ptr, depth, root_expression);
59: 	if (expr.HasError()) {
60: 		return expr;
61: 	}
62: 
63: 	// Return a GROUP BY column reference expression.
64: 	auto return_type = expr.expression->return_type;
65: 	auto column_binding = ColumnBinding(node.group_index, node.groups.group_expressions.size());
66: 	auto group_ref = make_uniq<BoundColumnRefExpression>(return_type, column_binding);
67: 	node.groups.group_expressions.push_back(std::move(expr.expression));
68: 	return BindResult(std::move(group_ref));
69: }
70: 
71: BindResult HavingBinder::BindWindow(WindowExpression &expr, idx_t depth) {
72: 	return BindResult("HAVING clause cannot contain window functions!");
73: }
74: 
75: } // namespace duckdb
[end of src/planner/expression_binder/having_binder.cpp]
</code>
Here is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.
<patch>
--- a/file.cpp
+++ b/file.cpp
@@ -3,35 +3,44 @@
 #include <cstdlib>
 
 int euclidean(int a, int b) {
-    while (b) {
-        int temp = b;
-        b = a % b;
-        a = temp;
+    if (b == 0) {
+        return a;
     }
-    return a;
+    return euclidean(b, a % b);
 }
 
 std::vector<std::pair<int, int>> bresenham(int x0, int y0, int x1, int y1) {
     std::vector<std::pair<int, int>> points;
     int dx = abs(x1 - x0);
     int dy = abs(y1 - y0);
+    int x = x0, y = y0;
     int sx = (x0 < x1) ? 1 : -1;
     int sy = (y0 < y1) ? 1 : -1;
-    int err = dx - dy;
 
-    while (true) {
-        points.emplace_back(x0, y0);
-        if (x0 == x1 && y0 == y1) break;
-        int e2 = 2 * err;
-        if (e2 > -dy) {
+    if (dx > dy) {
+        int err = dx / 2;
+        while (x != x1) {
+            points.emplace_back(x, y);
             err -= dy;
-            x0 += sx;
+            if (err < 0) {
+                y += sy;
+                err += dx;
+            }
+            x += sx;
         }
-        if (e2 < dx) {
-            err += dx;
-            y0 += sy;
+    } else {
+        int err = dy / 2;
+        while (y != y1) {
+            points.emplace_back(x, y);
+            err -= dx;
+            if (err < 0) {
+                x += sx;
+                err += dy;
+            }
+            y += sy;
         }
     }
 
+    points.emplace_back(x, y);
     return points;
 }

</patch>

I need you to solve the provided issue by generating a single patch file that I can apply directly to this repository using git apply.
Please respond with a single patch file in the format shown above.
Make sure to only include the patch file contents so that the contents of your output can be copied into a patch file and applied directly

Respond below: