{
  "repo": "duckdb/duckdb",
  "pull_number": 12654,
  "instance_id": "duckdb__duckdb-12654",
  "issue_numbers": [
    "12646",
    "12646"
  ],
  "base_commit": "2f818ce50d0c978f10ff13a96a8885b28f1a2494",
  "patch": "diff --git a/src/planner/expression_binder/having_binder.cpp b/src/planner/expression_binder/having_binder.cpp\nindex 1a2bd35a64d1..937c36c25e50 100644\n--- a/src/planner/expression_binder/having_binder.cpp\n+++ b/src/planner/expression_binder/having_binder.cpp\n@@ -33,6 +33,11 @@ BindResult HavingBinder::BindColumnRef(unique_ptr<ParsedExpression> &expr_ptr, i\n \t\tif (lambda_ref) {\n \t\t\treturn BindLambdaReference(lambda_ref->Cast<LambdaRefExpression>(), depth);\n \t\t}\n+\t\t// column was not found - check if it is a SQL value function\n+\t\tauto value_function = GetSQLValueFunction(col_ref.GetColumnName());\n+\t\tif (value_function) {\n+\t\t\treturn BindExpression(value_function, depth);\n+\t\t}\n \t}\n \n \t// Bind the alias.\n",
  "test_patch": "diff --git a/test/sql/parser/test_value_functions.test b/test/sql/parser/test_value_functions.test\nindex 4ad0492d078d..b25be2238c16 100644\n--- a/test/sql/parser/test_value_functions.test\n+++ b/test/sql/parser/test_value_functions.test\n@@ -46,3 +46,13 @@ statement error\n SELECT useRrr\n ----\n useRrr\n+\n+# value function in having\n+query II\n+select\n+  1 as one,\n+  max(cast('1000-05-01 00:00:00' as timestamp)) as mt\n+group by one\n+having max(cast('1000-05-01 00:00:00' as timestamp))  <= current_timestamp;\n+----\n+1\t1000-05-01 00:00:00\n",
  "problem_statement": "current_timestamp cannot be used in having clause (Binder Error) \n### What happens?\r\n\r\nin 0.10.X+ (tried 1.0.0 as well) it appears as though current_timestamp cannot be used in a having clause anymore. \r\n\r\nA BinderError is thrown when I try. \r\n\r\nin 0.10.2 (cli)\r\n```\r\nv0.10.2 1601d94f94\r\nEnter \".help\" for usage hints.\r\nConnected to a transient in-memory database.\r\nUse \".open FILENAME\" to reopen on a persistent database.\r\nD select 1 as one, max(cast('2024-06-21 12:00:00' as timestamp)) as mt group by one having mt <= current_timestamp;\r\nBinder Error: column current_timestamp must appear in the GROUP BY clause or be used in an aggregate function\r\n```\r\n\r\nin 1.0.0\r\n```\r\nv1.0.0 1f98600c2c\r\nEnter \".help\" for usage hints.\r\nConnected to a transient in-memory database.\r\nUse \".open FILENAME\" to reopen on a persistent database.\r\nD select 1 as one, max(cast('2024-06-21 12:00:00' as timestamp)) as mt group by one having mt <= current_timestamp;\r\nBinder Error: column current_timestamp must appear in the GROUP BY clause or be used in an aggregate function\r\n```\r\n\r\nIn 0.9.2 this still works\r\n```\r\n\u276f duckdb\r\nv0.9.2 3c695d7ba9\r\nEnter \".help\" for usage hints.\r\nConnected to a transient in-memory database.\r\nUse \".open FILENAME\" to reopen on a persistent database.\r\nD select 1 as one, max(cast('2024-06-21 12:00:00' as timestamp)) as mt group by one having mt <= current_timestamp;\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502  one  \u2502         mt          \u2502\r\n\u2502 int32 \u2502      timestamp      \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502     1 \u2502 2024-06-21 12:00:00 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\nIt appears as though get_current_timestamp() is a workaround. \r\n\r\nNotably these queries also work in postgres (but can't use the alias \ud83d\ude2d )\r\n```sql\r\nselect \r\n  1 as one, \r\n  max(cast('2024-05-01 00:00:00' as timestamp)) as mt \r\ngroup by one \r\nhaving max(cast('2024-05-01 00:00:00' as timestamp))  <= current_timestamp;\r\n```\r\n\r\n### To Reproduce\r\n\r\nSimple SQL Query:\r\n\r\n```sql\r\nselect \r\n  1 as one, \r\n  max(cast('2024-05-01 00:00:00' as timestamp)) as mt \r\ngroup by one \r\nhaving mt <= current_timestamp;\r\n```\r\n\r\n\r\n### OS:\r\n\r\nmacOS 14.2 aarch64\r\n\r\n### DuckDB Version:\r\n\r\n0.10.2, 1.0.0\r\n\r\n### DuckDB Client:\r\n\r\ncli, java, wasm\r\n\r\n### Full Name:\r\n\r\nJonathan Swenson\r\n\r\n### Affiliation:\r\n\r\nOmni\r\n\r\n### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.\r\n\r\nI have tested with a stable release\r\n\r\n### Did you include all relevant data sets for reproducing the issue?\r\n\r\nYes\r\n\r\n### Did you include all code required to reproduce the issue?\r\n\r\n- [X] Yes, I have\r\n\r\n### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?\r\n\r\n- [X] Yes, I have\ncurrent_timestamp cannot be used in having clause (Binder Error) \n### What happens?\r\n\r\nin 0.10.X+ (tried 1.0.0 as well) it appears as though current_timestamp cannot be used in a having clause anymore. \r\n\r\nA BinderError is thrown when I try. \r\n\r\nin 0.10.2 (cli)\r\n```\r\nv0.10.2 1601d94f94\r\nEnter \".help\" for usage hints.\r\nConnected to a transient in-memory database.\r\nUse \".open FILENAME\" to reopen on a persistent database.\r\nD select 1 as one, max(cast('2024-06-21 12:00:00' as timestamp)) as mt group by one having mt <= current_timestamp;\r\nBinder Error: column current_timestamp must appear in the GROUP BY clause or be used in an aggregate function\r\n```\r\n\r\nin 1.0.0\r\n```\r\nv1.0.0 1f98600c2c\r\nEnter \".help\" for usage hints.\r\nConnected to a transient in-memory database.\r\nUse \".open FILENAME\" to reopen on a persistent database.\r\nD select 1 as one, max(cast('2024-06-21 12:00:00' as timestamp)) as mt group by one having mt <= current_timestamp;\r\nBinder Error: column current_timestamp must appear in the GROUP BY clause or be used in an aggregate function\r\n```\r\n\r\nIn 0.9.2 this still works\r\n```\r\n\u276f duckdb\r\nv0.9.2 3c695d7ba9\r\nEnter \".help\" for usage hints.\r\nConnected to a transient in-memory database.\r\nUse \".open FILENAME\" to reopen on a persistent database.\r\nD select 1 as one, max(cast('2024-06-21 12:00:00' as timestamp)) as mt group by one having mt <= current_timestamp;\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502  one  \u2502         mt          \u2502\r\n\u2502 int32 \u2502      timestamp      \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502     1 \u2502 2024-06-21 12:00:00 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\nIt appears as though get_current_timestamp() is a workaround. \r\n\r\nNotably these queries also work in postgres (but can't use the alias \ud83d\ude2d )\r\n```sql\r\nselect \r\n  1 as one, \r\n  max(cast('2024-05-01 00:00:00' as timestamp)) as mt \r\ngroup by one \r\nhaving max(cast('2024-05-01 00:00:00' as timestamp))  <= current_timestamp;\r\n```\r\n\r\n### To Reproduce\r\n\r\nSimple SQL Query:\r\n\r\n```sql\r\nselect \r\n  1 as one, \r\n  max(cast('2024-05-01 00:00:00' as timestamp)) as mt \r\ngroup by one \r\nhaving mt <= current_timestamp;\r\n```\r\n\r\n\r\n### OS:\r\n\r\nmacOS 14.2 aarch64\r\n\r\n### DuckDB Version:\r\n\r\n0.10.2, 1.0.0\r\n\r\n### DuckDB Client:\r\n\r\ncli, java, wasm\r\n\r\n### Full Name:\r\n\r\nJonathan Swenson\r\n\r\n### Affiliation:\r\n\r\nOmni\r\n\r\n### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.\r\n\r\nI have tested with a stable release\r\n\r\n### Did you include all relevant data sets for reproducing the issue?\r\n\r\nYes\r\n\r\n### Did you include all code required to reproduce the issue?\r\n\r\n- [X] Yes, I have\r\n\r\n### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?\r\n\r\n- [X] Yes, I have\n",
  "hints_text": "I do reproduce.\r\n\r\nThis equivalent query works around the problem, working correctly:\r\n```sql\r\nselect \r\n    1 as one, \r\n    max(cast('2024-05-01 00:00:00' as timestamp)) as mt \r\n  group by one \r\n  having mt <= get_current_timestamp();\r\n```\r\n\r\nBasically using the explicit `get_current_timestamp()` instead of `current_timestamp`.\nI do reproduce.\r\n\r\nThis equivalent query works around the problem, working correctly:\r\n```sql\r\nselect \r\n    1 as one, \r\n    max(cast('2024-05-01 00:00:00' as timestamp)) as mt \r\n  group by one \r\n  having mt <= get_current_timestamp();\r\n```\r\n\r\nBasically using the explicit `get_current_timestamp()` instead of `current_timestamp`.",
  "created_at": "2024-06-23T09:19:05Z"
}