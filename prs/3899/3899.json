{
  "repo": "duckdb/duckdb",
  "pull_number": 3899,
  "instance_id": "duckdb__duckdb-3899",
  "issue_numbers": [
    "3875"
  ],
  "base_commit": "dc74756a067ba43c8845066eee5c660bc872ef79",
  "patch": "diff --git a/src/common/enums/statement_type.cpp b/src/common/enums/statement_type.cpp\nindex f21ae56eb87a..f4b38c084f3b 100644\n--- a/src/common/enums/statement_type.cpp\n+++ b/src/common/enums/statement_type.cpp\n@@ -56,6 +56,18 @@ string StatementTypeToString(StatementType type) {\n \t}\n \treturn \"INVALID\";\n }\n+\n+string StatementReturnTypeToString(StatementReturnType type) {\n+\tswitch (type) {\n+\tcase StatementReturnType::QUERY_RESULT:\n+\t\treturn \"QUERY_RESULT\";\n+\tcase StatementReturnType::CHANGED_ROWS:\n+\t\treturn \"CHANGED_ROWS\";\n+\tcase StatementReturnType::NOTHING:\n+\t\treturn \"NOTHING\";\n+\t}\n+\treturn \"INVALID\";\n+}\n // LCOV_EXCL_STOP\n \n } // namespace duckdb\ndiff --git a/src/include/duckdb/common/enums/statement_type.hpp b/src/include/duckdb/common/enums/statement_type.hpp\nindex 27afcaaf88c7..eddb1285919b 100644\n--- a/src/include/duckdb/common/enums/statement_type.hpp\n+++ b/src/include/duckdb/common/enums/statement_type.hpp\n@@ -50,6 +50,8 @@ enum class StatementReturnType : uint8_t {\n \tNOTHING       // the statement returns nothing\n };\n \n+string StatementReturnTypeToString(StatementReturnType type);\n+\n //! A struct containing various properties of a SQL statement\n struct StatementProperties {\n \tStatementProperties()\ndiff --git a/tools/rpkg/R/dbFetch__duckdb_result.R b/tools/rpkg/R/dbFetch__duckdb_result.R\nindex 4b26658de15a..9c3853ee4bf5 100644\n--- a/tools/rpkg/R/dbFetch__duckdb_result.R\n+++ b/tools/rpkg/R/dbFetch__duckdb_result.R\n@@ -35,8 +35,8 @@ dbFetch__duckdb_result <- function(res, n = -1, ...) {\n   if (!is_wholenumber(n)) {\n     stop(\"n needs to be not a whole number\")\n   }\n-  if (res@stmt_lst$type != \"SELECT\") {\n-    warning(\"Should not call dbFetch() on results that do not come from SELECT\")\n+  if (res@stmt_lst$return_type != \"QUERY_RESULT\") {\n+    warning(\"Should not call `dbFetch()` on results that do not come from a query that returns rows, e.g. a `SELECT`\")\n     return(data.frame())\n   }\n \ndiff --git a/tools/rpkg/src/statement.cpp b/tools/rpkg/src/statement.cpp\nindex 02ebdea9fe4d..28b8696e7bca 100644\n--- a/tools/rpkg/src/statement.cpp\n+++ b/tools/rpkg/src/statement.cpp\n@@ -129,6 +129,8 @@ static void VectorToR(Vector &src_vec, size_t count, void *dest, uint64_t dest_o\n \n \tretlist.push_back({\"rtypes\"_nm = rtypes});\n \tretlist.push_back({\"n_param\"_nm = stmtholder->stmt->n_param});\n+\tretlist.push_back(\n+\t    {\"return_type\"_nm = StatementReturnTypeToString(stmtholder->stmt->GetStatementProperties().return_type)});\n \n \treturn retlist;\n }\n",
  "test_patch": "diff --git a/tools/rpkg/tests/testthat/test_fetch.R b/tools/rpkg/tests/testthat/test_fetch.R\nnew file mode 100644\nindex 000000000000..2c8579c1d915\n--- /dev/null\n+++ b/tools/rpkg/tests/testthat/test_fetch.R\n@@ -0,0 +1,9 @@\n+test_that(\"dbFetch() can fetch RETURNING statements (#3875)\", {\n+  con <- dbConnect(duckdb())\n+  on.exit(dbDisconnect(con, shutdown = TRUE))\n+\n+  dbCreateTable(con, \"x\", list(a = \"int\"))\n+\n+  expect_silent(out <-dbGetQuery(con, \"INSERT INTO x VALUES (1) RETURNING (a)\"))\n+  expect_equal(out, data.frame(a = 1L))\n+})\n",
  "problem_statement": "R: RETURNING SQL clause not supported\n#### What happens?\r\n\r\n`INSERT INTO ... RETURNING ...` doesn't provide a result set, but it's available from the CLI.\r\n\r\n#### To Reproduce\r\n\r\n``` r\r\ncon <- DBI::dbConnect(duckdb::duckdb())\r\n\r\nDBI::dbExecute(con, \"CREATE TEMP TABLE x (a int, PRIMARY KEY (a))\")\r\n#> [1] 0\r\nDBI::dbGetQuery(con, \"INSERT INTO x VALUES (1) RETURNING (a)\")\r\n#> Warning in dbFetch(rs, n = n, ...): Should not call dbFetch() on results that do\r\n#> not come from SELECT\r\n#> data frame with 0 columns and 0 rows\r\n```\r\n\r\n<sup>Created on 2022-06-16 by the [reprex package](https://reprex.tidyverse.org) (v2.0.1)</sup>\r\n\r\n\r\n```\r\n\u279c  duckdb git:(d4c437597) \u2717 echo \"CREATE TEMP TABLE x (a int, PRIMARY KEY (a));\r\nINSERT INTO x VALUES (1) RETURNING (a)\r\n\" | build/debug/duckdb\r\n\u250c\u2500\u2500\u2500\u2510\r\n\u2502 a \u2502\r\n\u251c\u2500\u2500\u2500\u2524\r\n\u2502 1 \u2502\r\n\u2514\u2500\u2500\u2500\u2518\r\n```\r\n\r\n\r\n#### Environment (please complete the following information):\r\n\r\n - OS: macOS\r\n - DuckDB Version: d4c437597\r\n - DuckDB Client: R\r\n\r\n#### Before Submitting\r\n\r\n- [x] **Have you tried this on the latest `master` branch?**\r\n- [x] **Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?**\r\n\n",
  "hints_text": "I'll take a look, the error comes from the R side.\nIt is easy to obtain the results in the following way (see [where the error is triggered here](https://github.com/duckdb/duckdb/pull/3876#issuecomment-1157563322)):\r\n\r\n``` r\r\ncon <- DBI::dbConnect(duckdb::duckdb())\r\n\r\nDBI::dbExecute(con, \"CREATE TEMP TABLE x (a int, PRIMARY KEY (a))\")\r\n#> [1] 0\r\nres <- DBI::dbSendQuery(con, \"INSERT INTO x VALUES (1) RETURNING (a)\")\r\n\r\nres@env$resultset\r\n#>   a\r\n#> 1 1\r\n\r\nDBI::dbDisconnect(con, shutdown=TRUE)\r\n```\r\n\r\n<sup>Created on 2022-06-16 by the [reprex package](https://reprex.tidyverse.org) (v2.0.1.9000)</sup>\r\n\nAs pointed in #3876, also the R client should be updated to respect the query type as indicated by `GetStatementProperties().return_type`. Currently `dbFetch()` has too strict R-side condition to not allow fetching of any other than `SELECT` queries (or to be precise, `EXPLAIN` queries already have special handling).\r\n\r\nIn any case, as the example above shows, `dbSendQuery()` (that is not yet calling `dbFetch()`) is enough to get \"access\" to result set that contains the results of materialized query. I'm not quite sure whether these are always the full results (or only a first batch), but the point is that the data frame containing results has already been created there and the need for calling `dbFetch()` remains a bit unclear.\n`dbSendQuery()` and `dbFetch()` are specified by DBI and tested by DBItest, for better or worse.",
  "created_at": "2022-06-18T05:56:43Z"
}