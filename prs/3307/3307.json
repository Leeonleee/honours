{
  "repo": "duckdb/duckdb",
  "pull_number": 3307,
  "instance_id": "duckdb__duckdb-3307",
  "issue_numbers": [
    "3271",
    "3271"
  ],
  "base_commit": "261c21b4994fb26b376d25152b40210f87571bf8",
  "patch": "diff --git a/src/planner/binder/query_node/bind_select_node.cpp b/src/planner/binder/query_node/bind_select_node.cpp\nindex 6a5b6bfffea7..58828f88da6b 100644\n--- a/src/planner/binder/query_node/bind_select_node.cpp\n+++ b/src/planner/binder/query_node/bind_select_node.cpp\n@@ -55,6 +55,9 @@ unique_ptr<BoundResultModifier> Binder::BindLimit(LimitModifier &limit_mod) {\n \t\tresult->limit = BindDelimiter(context, move(limit_mod.limit), LogicalType::BIGINT, val);\n \t\tif (!result->limit) {\n \t\t\tresult->limit_val = val.GetValue<int64_t>();\n+\t\t\tif (result->limit_val < 0) {\n+\t\t\t\tthrow BinderException(\"LIMIT cannot be negative\");\n+\t\t\t}\n \t\t}\n \t}\n \tif (limit_mod.offset) {\n@@ -62,6 +65,9 @@ unique_ptr<BoundResultModifier> Binder::BindLimit(LimitModifier &limit_mod) {\n \t\tresult->offset = BindDelimiter(context, move(limit_mod.offset), LogicalType::BIGINT, val);\n \t\tif (!result->offset) {\n \t\t\tresult->offset_val = val.GetValue<int64_t>();\n+\t\t\tif (result->offset_val < 0) {\n+\t\t\t\tthrow BinderException(\"OFFSET cannot be negative\");\n+\t\t\t}\n \t\t}\n \t}\n \treturn move(result);\n",
  "test_patch": "diff --git a/test/sql/order/negative_offset.test b/test/sql/order/negative_offset.test\nnew file mode 100644\nindex 000000000000..606626ef114a\n--- /dev/null\n+++ b/test/sql/order/negative_offset.test\n@@ -0,0 +1,24 @@\n+# name: test/sql/order/negative_offset.test\n+# description: Test OFFSET keyword\n+# group: [order]\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+statement error\n+SELECT * FROM generate_series(0,10,1) LIMIT 3 OFFSET -1;\n+\n+statement error\n+SELECT * FROM generate_series(0,10,1) LIMIT -3;\n+\n+statement error\n+SELECT * FROM generate_series(0,10,1) LIMIT -1%\n+\n+statement ok\n+CREATE TABLE integers AS SELECT -1 k\n+\n+statement error\n+SELECT * FROM generate_series(0,10,1) LIMIT (SELECT k FROM integers);\n+\n+statement error\n+SELECT * FROM generate_series(0,10,1) LIMIT 1 OFFSET (SELECT k FROM integers);\ndiff --git a/test/sql/subquery/scalar/test_count_star_subquery.test b/test/sql/subquery/scalar/test_count_star_subquery.test\nindex de69d1e76434..e178d7f849ec 100644\n--- a/test/sql/subquery/scalar/test_count_star_subquery.test\n+++ b/test/sql/subquery/scalar/test_count_star_subquery.test\n@@ -6,10 +6,10 @@ statement ok\n PRAGMA enable_verification\n \n statement ok\n-CREATE TABLE integers(i INTEGER)\n+CREATE TABLE integers(i INTEGER);\n \n statement ok\n-INSERT INTO integers VALUES (1), (2), (3), (NULL)\n+INSERT INTO integers VALUES (1), (2), (3), (NULL);\n \n # COUNT(*) and SUM(i) IS NULL aggregates\n query II\n",
  "problem_statement": "OFFSET -1  - Uncaught Exception\n-1 offset causes duckdb to crash.\r\ne.g \r\n~~~\r\nCREATE  MACRO my_seq(srt, nlimit, noffset) as TABLE SELECT * FROM generate_series(srt) LIMIT nlimit OFFSET noffset;\r\nSELECT  * FROM  my_seq(10,5,-1);\r\n~~~\r\n\r\n\r\n\nOFFSET -1  - Uncaught Exception\n-1 offset causes duckdb to crash.\r\ne.g \r\n~~~\r\nCREATE  MACRO my_seq(srt, nlimit, noffset) as TABLE SELECT * FROM generate_series(srt) LIMIT nlimit OFFSET noffset;\r\nSELECT  * FROM  my_seq(10,5,-1);\r\n~~~\r\n\r\n\r\n\n",
  "hints_text": "Which DuckDB client are you using and what is your OS? Please follow the issue template in the future.\nAm using the latest code from master: \r\nDuckdb v0.3.2  **duckdb**\r\non\r\nUbuntu 20.04\nWhich DuckDB client are you using and what is your OS? Please follow the issue template in the future.\nAm using the latest code from master: \r\nDuckdb v0.3.2  **duckdb**\r\non\r\nUbuntu 20.04",
  "created_at": "2022-03-28T10:48:07Z"
}