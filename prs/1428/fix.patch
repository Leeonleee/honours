diff --git a/extension/tpch/dbgen/dbgen.cpp b/extension/tpch/dbgen/dbgen.cpp
index 8b2f6c9c18e6..e104376be6f0 100644
--- a/extension/tpch/dbgen/dbgen.cpp
+++ b/extension/tpch/dbgen/dbgen.cpp
@@ -548,8 +548,8 @@ template <class T> static void CreateTPCHTable(ClientContext &context, string sc
 		info->columns.push_back(ColumnDefinition(T::Columns[i], T::Types[i]));
 		info->constraints.push_back(make_unique<NotNullConstraint>(i));
 	}
-	Binder binder(context);
-	auto bound_info = binder.BindCreateTableInfo(move(info));
+	auto binder = Binder::CreateBinder(context);
+	auto bound_info = binder->BindCreateTableInfo(move(info));
 	auto &catalog = Catalog::GetCatalog(context);
 
 	catalog.CreateTable(context, bound_info.get());
diff --git a/src/catalog/catalog_entry/table_catalog_entry.cpp b/src/catalog/catalog_entry/table_catalog_entry.cpp
index da1d915166ce..4acb9d76f821 100644
--- a/src/catalog/catalog_entry/table_catalog_entry.cpp
+++ b/src/catalog/catalog_entry/table_catalog_entry.cpp
@@ -190,8 +190,8 @@ unique_ptr<CatalogEntry> TableCatalogEntry::RenameColumn(ClientContext &context,
 		}
 		create_info->constraints.push_back(move(copy));
 	}
-	Binder binder(context);
-	auto bound_create_info = binder.BindCreateTableInfo(move(create_info));
+	auto binder = Binder::CreateBinder(context);
+	auto bound_create_info = binder->BindCreateTableInfo(move(create_info));
 	return make_unique<TableCatalogEntry>(catalog, schema, (BoundCreateTableInfo *)bound_create_info.get(), storage);
 }
 
@@ -204,8 +204,8 @@ unique_ptr<CatalogEntry> TableCatalogEntry::AddColumn(ClientContext &context, Ad
 	info.new_column.oid = columns.size();
 	create_info->columns.push_back(info.new_column.Copy());
 
-	Binder binder(context);
-	auto bound_create_info = binder.BindCreateTableInfo(move(create_info));
+	auto binder = Binder::CreateBinder(context);
+	auto bound_create_info = binder->BindCreateTableInfo(move(create_info));
 	auto new_storage =
 	    make_shared<DataTable>(context, *storage, info.new_column, bound_create_info->bound_defaults.back().get());
 	return make_unique<TableCatalogEntry>(catalog, schema, (BoundCreateTableInfo *)bound_create_info.get(),
@@ -291,8 +291,8 @@ unique_ptr<CatalogEntry> TableCatalogEntry::RemoveColumn(ClientContext &context,
 		}
 	}
 
-	Binder binder(context);
-	auto bound_create_info = binder.BindCreateTableInfo(move(create_info));
+	auto binder = Binder::CreateBinder(context);
+	auto bound_create_info = binder->BindCreateTableInfo(move(create_info));
 	auto new_storage = make_shared<DataTable>(context, *storage, removed_index);
 	return make_unique<TableCatalogEntry>(catalog, schema, (BoundCreateTableInfo *)bound_create_info.get(),
 	                                      new_storage);
@@ -319,8 +319,8 @@ unique_ptr<CatalogEntry> TableCatalogEntry::SetDefault(ClientContext &context, S
 		create_info->constraints.push_back(move(constraint));
 	}
 
-	Binder binder(context);
-	auto bound_create_info = binder.BindCreateTableInfo(move(create_info));
+	auto binder = Binder::CreateBinder(context);
+	auto bound_create_info = binder->BindCreateTableInfo(move(create_info));
 	return make_unique<TableCatalogEntry>(catalog, schema, (BoundCreateTableInfo *)bound_create_info.get(), storage);
 }
 
@@ -366,13 +366,13 @@ unique_ptr<CatalogEntry> TableCatalogEntry::ChangeColumnType(ClientContext &cont
 		create_info->constraints.push_back(move(constraint));
 	}
 
-	Binder binder(context);
+	auto binder = Binder::CreateBinder(context);
 	// bind the specified expression
 	vector<column_t> bound_columns;
-	AlterBinder expr_binder(binder, context, name, columns, bound_columns, info.target_type);
+	AlterBinder expr_binder(*binder, context, name, columns, bound_columns, info.target_type);
 	auto expression = info.expression->Copy();
 	auto bound_expression = expr_binder.Bind(expression);
-	auto bound_create_info = binder.BindCreateTableInfo(move(create_info));
+	auto bound_create_info = binder->BindCreateTableInfo(move(create_info));
 	if (bound_columns.empty()) {
 		bound_columns.push_back(COLUMN_IDENTIFIER_ROW_ID);
 	}
@@ -532,8 +532,8 @@ unique_ptr<CatalogEntry> TableCatalogEntry::Copy(ClientContext &context) {
 		create_info->constraints.push_back(move(constraint));
 	}
 
-	Binder binder(context);
-	auto bound_create_info = binder.BindCreateTableInfo(move(create_info));
+	auto binder = Binder::CreateBinder(context);
+	auto bound_create_info = binder->BindCreateTableInfo(move(create_info));
 	return make_unique<TableCatalogEntry>(catalog, schema, (BoundCreateTableInfo *)bound_create_info.get(), storage);
 }
 
diff --git a/src/catalog/default/default_views.cpp b/src/catalog/default/default_views.cpp
index 27f7e20a0dd2..ef75ab38415e 100644
--- a/src/catalog/default/default_views.cpp
+++ b/src/catalog/default/default_views.cpp
@@ -51,8 +51,8 @@ DefaultViewGenerator::DefaultViewGenerator(Catalog &catalog, SchemaCatalogEntry
 unique_ptr<CatalogEntry> DefaultViewGenerator::CreateDefaultEntry(ClientContext &context, const string &entry_name) {
 	auto info = GetDefaultView(schema->name, entry_name);
 	if (info) {
-		Binder binder(context);
-		binder.BindCreateViewInfo(*info);
+		auto binder = Binder::CreateBinder(context);
+		binder->BindCreateViewInfo(*info);
 
 		return make_unique_base<CatalogEntry, ViewCatalogEntry>(&catalog, schema, info.get());
 	}
diff --git a/src/include/duckdb/common/types.hpp b/src/include/duckdb/common/types.hpp
index a273bc08767c..1b66c087e66a 100644
--- a/src/include/duckdb/common/types.hpp
+++ b/src/include/duckdb/common/types.hpp
@@ -84,7 +84,7 @@ template <class T>
 using buffer_ptr = single_thread_ptr<T>;
 
 template <class T, typename... Args>
-buffer_ptr<T> make_buffer(Args &&... args) {
+buffer_ptr<T> make_buffer(Args &&...args) {
 	return single_thread_make_shared<T>(std::forward<Args>(args)...);
 }
 
diff --git a/src/include/duckdb/planner/binder.hpp b/src/include/duckdb/planner/binder.hpp
index e9c22eaeef57..e3d8c03244d0 100644
--- a/src/include/duckdb/planner/binder.hpp
+++ b/src/include/duckdb/planner/binder.hpp
@@ -52,12 +52,12 @@ struct CorrelatedColumnInfo {
   tables and columns in the catalog. In the process, it also resolves types of
   all expressions.
 */
-class Binder {
+class Binder : public std::enable_shared_from_this<Binder> {
 	friend class ExpressionBinder;
 	friend class RecursiveSubqueryPlanner;
 
 public:
-	explicit Binder(ClientContext &context, Binder *parent = nullptr, bool inherit_ctes = true);
+	static shared_ptr<Binder> CreateBinder(ClientContext &context, Binder *parent = nullptr, bool inherit_ctes = true);
 
 	//! The client context
 	ClientContext &context;
@@ -127,7 +127,7 @@ class Binder {
 
 private:
 	//! The parent binder (if any)
-	Binder *parent;
+	shared_ptr<Binder> parent;
 	//! The vector of active binders
 	vector<ExpressionBinder *> active_binders;
 	//! The count of bound_tables
@@ -223,6 +223,10 @@ class Binder {
 
 	string FindBinding(const string &using_column, const string &join_side);
 	bool TryFindBinding(const string &using_column, const string &join_side, string &result);
+
+public:
+	// This should really be a private constructor, but make_shared does not allow it...
+	Binder(bool I_know_what_I_am_doing, ClientContext &context, shared_ptr<Binder> parent, bool inherit_ctes);
 };
 
 } // namespace duckdb
diff --git a/src/include/duckdb/planner/expression/bound_subquery_expression.hpp b/src/include/duckdb/planner/expression/bound_subquery_expression.hpp
index 8a517057429c..54b1bcc4bfc9 100644
--- a/src/include/duckdb/planner/expression/bound_subquery_expression.hpp
+++ b/src/include/duckdb/planner/expression/bound_subquery_expression.hpp
@@ -24,7 +24,7 @@ class BoundSubqueryExpression : public Expression {
 	}
 
 	//! The binder used to bind the subquery node
-	unique_ptr<Binder> binder;
+	shared_ptr<Binder> binder;
 	//! The bound subquery node
 	unique_ptr<BoundQueryNode> subquery;
 	//! The subquery type
diff --git a/src/include/duckdb/planner/planner.hpp b/src/include/duckdb/planner/planner.hpp
index 4898e0525e45..1c04bb5cb014 100644
--- a/src/include/duckdb/planner/planner.hpp
+++ b/src/include/duckdb/planner/planner.hpp
@@ -29,7 +29,7 @@ class Planner {
 	vector<LogicalType> types;
 	unordered_map<idx_t, vector<unique_ptr<Value>>> value_map;
 
-	Binder binder;
+	shared_ptr<Binder> binder;
 	ClientContext &context;
 
 	bool read_only;
diff --git a/src/include/duckdb/planner/query_node/bound_recursive_cte_node.hpp b/src/include/duckdb/planner/query_node/bound_recursive_cte_node.hpp
index 790bcda0d3f7..7ed87cce4220 100644
--- a/src/include/duckdb/planner/query_node/bound_recursive_cte_node.hpp
+++ b/src/include/duckdb/planner/query_node/bound_recursive_cte_node.hpp
@@ -31,9 +31,9 @@ class BoundRecursiveCTENode : public BoundQueryNode {
 	//! Index used by the set operation
 	idx_t setop_index;
 	//! The binder used by the left side of the set operation
-	unique_ptr<Binder> left_binder;
+	shared_ptr<Binder> left_binder;
 	//! The binder used by the right side of the set operation
-	unique_ptr<Binder> right_binder;
+	shared_ptr<Binder> right_binder;
 
 public:
 	idx_t GetRootIndex() override {
diff --git a/src/include/duckdb/planner/query_node/bound_set_operation_node.hpp b/src/include/duckdb/planner/query_node/bound_set_operation_node.hpp
index de3f2c7390cd..bfd9f7e9b26a 100644
--- a/src/include/duckdb/planner/query_node/bound_set_operation_node.hpp
+++ b/src/include/duckdb/planner/query_node/bound_set_operation_node.hpp
@@ -30,9 +30,9 @@ class BoundSetOperationNode : public BoundQueryNode {
 	//! Index used by the set operation
 	idx_t setop_index;
 	//! The binder used by the left side of the set operation
-	unique_ptr<Binder> left_binder;
+	shared_ptr<Binder> left_binder;
 	//! The binder used by the right side of the set operation
-	unique_ptr<Binder> right_binder;
+	shared_ptr<Binder> right_binder;
 
 public:
 	idx_t GetRootIndex() override {
diff --git a/src/include/duckdb/planner/tableref/bound_crossproductref.hpp b/src/include/duckdb/planner/tableref/bound_crossproductref.hpp
index 3c7b240b51db..034d158afc61 100644
--- a/src/include/duckdb/planner/tableref/bound_crossproductref.hpp
+++ b/src/include/duckdb/planner/tableref/bound_crossproductref.hpp
@@ -20,9 +20,9 @@ class BoundCrossProductRef : public BoundTableRef {
 	}
 
 	//! The binder used to bind the LHS of the cross product
-	unique_ptr<Binder> left_binder;
+	shared_ptr<Binder> left_binder;
 	//! The binder used to bind the RHS of the cross product
-	unique_ptr<Binder> right_binder;
+	shared_ptr<Binder> right_binder;
 	//! The left hand side of the cross product
 	unique_ptr<BoundTableRef> left;
 	//! The right hand side of the cross product
diff --git a/src/include/duckdb/planner/tableref/bound_joinref.hpp b/src/include/duckdb/planner/tableref/bound_joinref.hpp
index dbff84d9e3d8..b583a9bc0d1b 100644
--- a/src/include/duckdb/planner/tableref/bound_joinref.hpp
+++ b/src/include/duckdb/planner/tableref/bound_joinref.hpp
@@ -22,9 +22,9 @@ class BoundJoinRef : public BoundTableRef {
 	}
 
 	//! The binder used to bind the LHS of the join
-	unique_ptr<Binder> left_binder;
+	shared_ptr<Binder> left_binder;
 	//! The binder used to bind the RHS of the join
-	unique_ptr<Binder> right_binder;
+	shared_ptr<Binder> right_binder;
 	//! The left hand side of the join
 	unique_ptr<BoundTableRef> left;
 	//! The right hand side of the join
diff --git a/src/include/duckdb/planner/tableref/bound_subqueryref.hpp b/src/include/duckdb/planner/tableref/bound_subqueryref.hpp
index bd9379a5434f..78eaf2651ef0 100644
--- a/src/include/duckdb/planner/tableref/bound_subqueryref.hpp
+++ b/src/include/duckdb/planner/tableref/bound_subqueryref.hpp
@@ -17,12 +17,12 @@ namespace duckdb {
 //! Represents a cross product
 class BoundSubqueryRef : public BoundTableRef {
 public:
-	BoundSubqueryRef(unique_ptr<Binder> binder, unique_ptr<BoundQueryNode> subquery)
-	    : BoundTableRef(TableReferenceType::SUBQUERY), binder(move(binder)), subquery(move(subquery)) {
+	BoundSubqueryRef(shared_ptr<Binder> binder_p, unique_ptr<BoundQueryNode> subquery)
+	    : BoundTableRef(TableReferenceType::SUBQUERY), binder(move(binder_p)), subquery(move(subquery)) {
 	}
 
 	//! The binder used to bind the subquery
-	unique_ptr<Binder> binder;
+	shared_ptr<Binder> binder;
 	//! The bound subquery node
 	unique_ptr<BoundQueryNode> subquery;
 };
diff --git a/src/main/client_context.cpp b/src/main/client_context.cpp
index b60e5543abf2..1adc29c589ec 100644
--- a/src/main/client_context.cpp
+++ b/src/main/client_context.cpp
@@ -166,7 +166,7 @@ shared_ptr<PreparedStatementData> ClientContext::CreatePreparedStatement(ClientC
 
 	if (enable_optimizer) {
 		profiler.StartPhase("optimizer");
-		Optimizer optimizer(planner.binder, *this);
+		Optimizer optimizer(*planner.binder, *this);
 		plan = optimizer.Optimize(move(plan));
 		D_ASSERT(plan);
 		profiler.EndPhase();
@@ -730,8 +730,8 @@ void ClientContext::Append(TableDescription &description, DataChunk &chunk) {
 void ClientContext::TryBindRelation(Relation &relation, vector<ColumnDefinition> &result_columns) {
 	RunFunctionInTransaction([&]() {
 		// bind the expressions
-		Binder binder(*this);
-		auto result = relation.Bind(binder);
+		auto binder = Binder::CreateBinder(*this);
+		auto result = relation.Bind(*binder);
 		D_ASSERT(result.names.size() == result.types.size());
 		for (idx_t i = 0; i < result.names.size(); i++) {
 			result_columns.emplace_back(result.names[i], result.types[i]);
diff --git a/src/planner/binder.cpp b/src/planner/binder.cpp
index 1fa856989fb4..8c5a1ea84a7f 100644
--- a/src/planner/binder.cpp
+++ b/src/planner/binder.cpp
@@ -11,9 +11,13 @@
 
 namespace duckdb {
 
-Binder::Binder(ClientContext &context, Binder *parent_p, bool inherit_ctes_p)
-    : context(context), read_only(true), requires_valid_transaction(true), allow_stream_result(false), parent(parent_p),
-      bound_tables(0), inherit_ctes(inherit_ctes_p) {
+shared_ptr<Binder> Binder::CreateBinder(ClientContext &context, Binder *parent, bool inherit_ctes) {
+	return make_shared<Binder>(true, context, parent ? parent->shared_from_this() : nullptr, inherit_ctes);
+}
+
+Binder::Binder(bool, ClientContext &context, shared_ptr<Binder> parent_p, bool inherit_ctes_p)
+    : context(context), read_only(true), requires_valid_transaction(true), allow_stream_result(false),
+      parent(move(parent_p)), bound_tables(0), inherit_ctes(inherit_ctes_p) {
 	if (parent) {
 		// We have to inherit macro parameter bindings from the parent binder, if there is a parent.
 		macro_binding = parent->macro_binding;
diff --git a/src/planner/binder/expression/bind_subquery_expression.cpp b/src/planner/binder/expression/bind_subquery_expression.cpp
index 7addab3d9ba6..cbab7b4bbb0c 100644
--- a/src/planner/binder/expression/bind_subquery_expression.cpp
+++ b/src/planner/binder/expression/bind_subquery_expression.cpp
@@ -8,13 +8,13 @@ namespace duckdb {
 
 class BoundSubqueryNode : public QueryNode {
 public:
-	BoundSubqueryNode(unique_ptr<Binder> subquery_binder, unique_ptr<BoundQueryNode> bound_node,
+	BoundSubqueryNode(shared_ptr<Binder> subquery_binder, unique_ptr<BoundQueryNode> bound_node,
 	                  unique_ptr<SelectStatement> subquery)
 	    : QueryNode(QueryNodeType::BOUND_SUBQUERY_NODE), subquery_binder(move(subquery_binder)),
 	      bound_node(move(bound_node)), subquery(move(subquery)) {
 	}
 
-	unique_ptr<Binder> subquery_binder;
+	shared_ptr<Binder> subquery_binder;
 	unique_ptr<BoundQueryNode> bound_node;
 	unique_ptr<SelectStatement> subquery;
 
@@ -31,7 +31,7 @@ BindResult ExpressionBinder::BindExpression(SubqueryExpression &expr, idx_t dept
 	if (expr.subquery->node->type != QueryNodeType::BOUND_SUBQUERY_NODE) {
 		D_ASSERT(depth == 0);
 		// first bind the actual subquery in a new binder
-		auto subquery_binder = make_unique<Binder>(context, &binder);
+		auto subquery_binder = Binder::CreateBinder(context, &binder);
 		auto bound_node = subquery_binder->BindNode(*expr.subquery->node);
 		// check the correlated columns of the subquery for correlated columns with depth > 1
 		for (idx_t i = 0; i < subquery_binder->correlated_columns.size(); i++) {
diff --git a/src/planner/binder/query_node/bind_recursive_cte_node.cpp b/src/planner/binder/query_node/bind_recursive_cte_node.cpp
index 90cd15cfdd47..ef22f4fa2e1a 100644
--- a/src/planner/binder/query_node/bind_recursive_cte_node.cpp
+++ b/src/planner/binder/query_node/bind_recursive_cte_node.cpp
@@ -20,7 +20,7 @@ unique_ptr<BoundQueryNode> Binder::BindNode(RecursiveCTENode &statement) {
 	result->union_all = statement.union_all;
 	result->setop_index = GenerateTableIndex();
 
-	result->left_binder = make_unique<Binder>(context, this);
+	result->left_binder = Binder::CreateBinder(context, this);
 	result->left = result->left_binder->BindNode(*statement.left);
 
 	// the result types of the CTE are the types of the LHS
@@ -34,7 +34,7 @@ unique_ptr<BoundQueryNode> Binder::BindNode(RecursiveCTENode &statement) {
 	// This allows the right side to reference the CTE recursively
 	bind_context.AddGenericBinding(result->setop_index, statement.ctename, result->names, result->types);
 
-	result->right_binder = make_unique<Binder>(context, this);
+	result->right_binder = Binder::CreateBinder(context, this);
 
 	// Add bindings of left side to temporary CTE bindings context
 	result->right_binder->bind_context.AddCTEBinding(result->setop_index, statement.ctename, result->names,
diff --git a/src/planner/binder/query_node/bind_select_node.cpp b/src/planner/binder/query_node/bind_select_node.cpp
index 0a23d4484aba..a4c02a6ca928 100644
--- a/src/planner/binder/query_node/bind_select_node.cpp
+++ b/src/planner/binder/query_node/bind_select_node.cpp
@@ -39,8 +39,9 @@ unique_ptr<Expression> Binder::BindOrderExpression(OrderBinder &order_binder, un
 
 unique_ptr<Expression> BindDelimiter(ClientContext &context, unique_ptr<ParsedExpression> delimiter,
                                      int64_t &delimiter_value) {
-	Binder new_binder(context);
-	ExpressionBinder expr_binder(new_binder, context);
+
+	auto new_binder = Binder::CreateBinder(context);
+	ExpressionBinder expr_binder(*new_binder, context);
 	expr_binder.target_type = LogicalType::UBIGINT;
 	auto expr = expr_binder.Bind(delimiter);
 	if (expr->IsFoldable()) {
diff --git a/src/planner/binder/query_node/bind_setop_node.cpp b/src/planner/binder/query_node/bind_setop_node.cpp
index 3c751f4d1285..349194253538 100644
--- a/src/planner/binder/query_node/bind_setop_node.cpp
+++ b/src/planner/binder/query_node/bind_setop_node.cpp
@@ -68,10 +68,10 @@ unique_ptr<BoundQueryNode> Binder::BindNode(SetOperationNode &statement) {
 
 	result->setop_index = GenerateTableIndex();
 
-	result->left_binder = make_unique<Binder>(context, this);
+	result->left_binder = Binder::CreateBinder(context, this);
 	result->left = result->left_binder->BindNode(*statement.left);
 
-	result->right_binder = make_unique<Binder>(context, this);
+	result->right_binder = Binder::CreateBinder(context, this);
 	result->right = result->right_binder->BindNode(*statement.right);
 
 	if (!statement.modifiers.empty()) {
diff --git a/src/planner/binder/query_node/plan_subquery.cpp b/src/planner/binder/query_node/plan_subquery.cpp
index 7b9b38ce1eda..0509ceb50a4f 100644
--- a/src/planner/binder/query_node/plan_subquery.cpp
+++ b/src/planner/binder/query_node/plan_subquery.cpp
@@ -296,9 +296,9 @@ unique_ptr<Expression> Binder::PlanSubquery(BoundSubqueryExpression &expr, uniqu
 	D_ASSERT(root);
 	// first we translate the QueryNode of the subquery into a logical plan
 	// note that we do not plan nested subqueries yet
-	Binder sub_binder(context);
-	sub_binder.plan_subquery = false;
-	auto subquery_root = sub_binder.CreatePlan(*expr.subquery);
+	auto sub_binder = Binder::CreateBinder(context);
+	sub_binder->plan_subquery = false;
+	auto subquery_root = sub_binder->CreatePlan(*expr.subquery);
 	D_ASSERT(subquery_root);
 
 	// now we actually flatten the subquery
@@ -310,7 +310,7 @@ unique_ptr<Expression> Binder::PlanSubquery(BoundSubqueryExpression &expr, uniqu
 		result_expression = PlanCorrelatedSubquery(*this, expr, root, move(plan));
 	}
 	// finally, we recursively plan the nested subqueries (if there are any)
-	if (sub_binder.has_unplanned_subqueries) {
+	if (sub_binder->has_unplanned_subqueries) {
 		RecursiveSubqueryPlanner plan(*this);
 		plan.VisitOperator(*root);
 	}
diff --git a/src/planner/binder/statement/bind_export.cpp b/src/planner/binder/statement/bind_export.cpp
index 58841a3f09e5..2b73b1e274f4 100644
--- a/src/planner/binder/statement/bind_export.cpp
+++ b/src/planner/binder/statement/bind_export.cpp
@@ -66,8 +66,8 @@ BoundStatement Binder::Bind(ExportStatement &stmt) {
 		CopyStatement copy_stmt;
 		copy_stmt.info = move(info);
 
-		Binder copy_binder(context);
-		auto bound_statement = copy_binder.Bind(copy_stmt);
+		auto copy_binder = Binder::CreateBinder(context);
+		auto bound_statement = copy_binder->Bind(copy_stmt);
 		if (child_operator) {
 			// use UNION ALL to combine the individual copy statements into a single node
 			auto copy_union =
diff --git a/src/planner/binder/tableref/bind_basetableref.cpp b/src/planner/binder/tableref/bind_basetableref.cpp
index 0d2e6c32c86a..6a69aa6f34d4 100644
--- a/src/planner/binder/tableref/bind_basetableref.cpp
+++ b/src/planner/binder/tableref/bind_basetableref.cpp
@@ -89,13 +89,13 @@ unique_ptr<BoundTableRef> Binder::Bind(BaseTableRef &ref) {
 		// defined for this binder so there are no collisions between the CTEs defined
 		// for the view and for the current query
 		bool inherit_ctes = false;
-		Binder view_binder(context, this, inherit_ctes);
+		auto view_binder = Binder::CreateBinder(context, this, inherit_ctes);
 		SubqueryRef subquery(unique_ptr_cast<SQLStatement, SelectStatement>(view_catalog_entry->query->Copy()));
 		subquery.alias = ref.alias.empty() ? ref.table_name : ref.alias;
 		subquery.column_name_alias =
 		    BindContext::AliasColumnNames(subquery.alias, view_catalog_entry->aliases, ref.column_name_alias);
 		// bind the child subquery
-		auto bound_child = view_binder.Bind(subquery);
+		auto bound_child = view_binder->Bind(subquery);
 		D_ASSERT(bound_child->type == TableReferenceType::SUBQUERY);
 		// verify that the types and names match up with the expected types and names
 		auto &bound_subquery = (BoundSubqueryRef &)*bound_child;
diff --git a/src/planner/binder/tableref/bind_crossproductref.cpp b/src/planner/binder/tableref/bind_crossproductref.cpp
index 16abd6952405..79cb5de2e5f0 100644
--- a/src/planner/binder/tableref/bind_crossproductref.cpp
+++ b/src/planner/binder/tableref/bind_crossproductref.cpp
@@ -6,8 +6,8 @@ namespace duckdb {
 
 unique_ptr<BoundTableRef> Binder::Bind(CrossProductRef &ref) {
 	auto result = make_unique<BoundCrossProductRef>();
-	result->left_binder = make_unique<Binder>(context, this);
-	result->right_binder = make_unique<Binder>(context, this);
+	result->left_binder = Binder::CreateBinder(context, this);
+	result->right_binder = Binder::CreateBinder(context, this);
 	auto &left_binder = *result->left_binder;
 	auto &right_binder = *result->right_binder;
 
diff --git a/src/planner/binder/tableref/bind_joinref.cpp b/src/planner/binder/tableref/bind_joinref.cpp
index d728807f539f..8c193f906273 100644
--- a/src/planner/binder/tableref/bind_joinref.cpp
+++ b/src/planner/binder/tableref/bind_joinref.cpp
@@ -92,8 +92,8 @@ static void SetPrimaryBinding(UsingColumnSet &set, JoinType join_type, const str
 
 unique_ptr<BoundTableRef> Binder::Bind(JoinRef &ref) {
 	auto result = make_unique<BoundJoinRef>();
-	result->left_binder = make_unique<Binder>(context, this);
-	result->right_binder = make_unique<Binder>(context, this);
+	result->left_binder = Binder::CreateBinder(context, this);
+	result->right_binder = Binder::CreateBinder(context, this);
 	auto &left_binder = *result->left_binder;
 	auto &right_binder = *result->right_binder;
 
diff --git a/src/planner/binder/tableref/bind_subqueryref.cpp b/src/planner/binder/tableref/bind_subqueryref.cpp
index d27aae6ebc29..4fe116796f09 100644
--- a/src/planner/binder/tableref/bind_subqueryref.cpp
+++ b/src/planner/binder/tableref/bind_subqueryref.cpp
@@ -5,7 +5,7 @@
 namespace duckdb {
 
 unique_ptr<BoundTableRef> Binder::Bind(SubqueryRef &ref, CommonTableExpressionInfo *cte) {
-	auto binder = make_unique<Binder>(context, this);
+	auto binder = Binder::CreateBinder(context, this);
 	if (cte) {
 		binder->bound_ctes.insert(cte);
 	}
diff --git a/src/planner/planner.cpp b/src/planner/planner.cpp
index c418f71998f3..511266a67439 100644
--- a/src/planner/planner.cpp
+++ b/src/planner/planner.cpp
@@ -17,7 +17,7 @@
 
 namespace duckdb {
 
-Planner::Planner(ClientContext &context) : binder(context), context(context) {
+Planner::Planner(ClientContext &context) : binder(Binder::CreateBinder(context)), context(context) {
 }
 
 void Planner::CreatePlan(SQLStatement &statement) {
@@ -25,13 +25,13 @@ void Planner::CreatePlan(SQLStatement &statement) {
 
 	// first bind the tables and columns to the catalog
 	context.profiler.StartPhase("binder");
-	binder.parameters = &bound_parameters;
-	auto bound_statement = binder.Bind(statement);
+	binder->parameters = &bound_parameters;
+	auto bound_statement = binder->Bind(statement);
 	context.profiler.EndPhase();
 
-	this->read_only = binder.read_only;
-	this->requires_valid_transaction = binder.requires_valid_transaction;
-	this->allow_stream_result = binder.allow_stream_result;
+	this->read_only = binder->read_only;
+	this->requires_valid_transaction = binder->requires_valid_transaction;
+	this->allow_stream_result = binder->allow_stream_result;
 	this->names = bound_statement.names;
 	this->types = bound_statement.types;
 	this->plan = move(bound_statement.plan);
@@ -100,7 +100,7 @@ void Planner::PlanExecute(unique_ptr<SQLStatement> statement) {
 	// the bound prepared statement is ready: bind any supplied parameters
 	vector<Value> bind_values;
 	for (idx_t i = 0; i < stmt.values.size(); i++) {
-		ConstantBinder cbinder(binder, context, "EXECUTE statement");
+		ConstantBinder cbinder(*binder, context, "EXECUTE statement");
 		cbinder.target_type = prepared->GetType(i + 1);
 		auto bound_expr = cbinder.Bind(stmt.values[i]);
 
diff --git a/src/storage/checkpoint_manager.cpp b/src/storage/checkpoint_manager.cpp
index eb8e5a0dea15..282edb58cb45 100644
--- a/src/storage/checkpoint_manager.cpp
+++ b/src/storage/checkpoint_manager.cpp
@@ -264,8 +264,8 @@ void CheckpointManager::ReadTable(ClientContext &context, MetaBlockReader &reade
 	// deserialize the table meta data
 	auto info = TableCatalogEntry::Deserialize(reader);
 	// bind the info
-	Binder binder(context);
-	auto bound_info = binder.BindCreateTableInfo(move(info));
+	auto binder = Binder::CreateBinder(context);
+	auto bound_info = binder->BindCreateTableInfo(move(info));
 
 	// now read the actual table data and place it into the create table info
 	auto block_id = reader.Read<block_id_t>();
diff --git a/src/storage/wal_replay.cpp b/src/storage/wal_replay.cpp
index 7f04c181e8c7..bdcf143cb571 100644
--- a/src/storage/wal_replay.cpp
+++ b/src/storage/wal_replay.cpp
@@ -210,8 +210,8 @@ void ReplayState::ReplayCreateTable() {
 	}
 
 	// bind the constraints to the table again
-	Binder binder(context);
-	auto bound_info = binder.BindCreateTableInfo(move(info));
+	auto binder = Binder::CreateBinder(context);
+	auto bound_info = binder->BindCreateTableInfo(move(info));
 
 	auto &catalog = Catalog::GetCatalog(context);
 	catalog.CreateTable(context, bound_info.get());
