{
  "repo": "duckdb/duckdb",
  "pull_number": 6106,
  "instance_id": "duckdb__duckdb-6106",
  "issue_numbers": [
    "6093"
  ],
  "base_commit": "e0fc8d25d7d4fda2916ab9dcd93b9bc25f402ade",
  "patch": "diff --git a/tools/pythonpkg/src/arrow_array_stream.cpp b/tools/pythonpkg/src/arrow_array_stream.cpp\nindex e76c0620a67d..5990a16bea12 100644\n--- a/tools/pythonpkg/src/arrow_array_stream.cpp\n+++ b/tools/pythonpkg/src/arrow_array_stream.cpp\n@@ -14,6 +14,13 @@\n \n namespace duckdb {\n \n+void VerifyArrowDatasetLoaded() {\n+\tauto &import_cache = *DuckDBPyConnection::ImportCache();\n+\tif (!import_cache.arrow.dataset.IsLoaded()) {\n+\t\tthrow InvalidInputException(\"Optional module 'pyarrow.dataset' is required to perform this action\");\n+\t}\n+}\n+\n PyArrowObjectType GetArrowType(const py::handle &obj) {\n \tauto &import_cache = *DuckDBPyConnection::ImportCache();\n \n@@ -63,6 +70,8 @@ unique_ptr<ArrowArrayStreamWrapper> PythonTableArrowArrayStreamFactory::Produce(\n \tpy::handle arrow_obj_handle(factory->arrow_object);\n \tauto arrow_object_type = GetArrowType(arrow_obj_handle);\n \n+\tVerifyArrowDatasetLoaded();\n+\n \tpy::object scanner;\n \tpy::object arrow_batch_scanner = py::module_::import(\"pyarrow.dataset\").attr(\"Scanner\").attr(\"from_batches\");\n \tswitch (arrow_object_type) {\n@@ -103,6 +112,8 @@ unique_ptr<ArrowArrayStreamWrapper> PythonTableArrowArrayStreamFactory::Produce(\n }\n \n void PythonTableArrowArrayStreamFactory::GetSchema(uintptr_t factory_ptr, ArrowSchemaWrapper &schema) {\n+\tVerifyArrowDatasetLoaded();\n+\n \tpy::gil_scoped_acquire acquire;\n \tPythonTableArrowArrayStreamFactory *factory = (PythonTableArrowArrayStreamFactory *)factory_ptr;\n \tD_ASSERT(factory->arrow_object);\n@@ -204,7 +215,6 @@ py::object GetScalar(Value &constant, const string &timezone_config) {\n }\n \n py::object TransformFilterRecursive(TableFilter *filter, const string &column_name, const string &timezone_config) {\n-\n \tpy::object field = py::module_::import(\"pyarrow.dataset\").attr(\"field\");\n \tswitch (filter->filter_type) {\n \tcase TableFilterType::CONSTANT_COMPARISON: {\ndiff --git a/tools/pythonpkg/src/include/duckdb_python/import_cache/modules/arrow_module.hpp b/tools/pythonpkg/src/include/duckdb_python/import_cache/modules/arrow_module.hpp\nindex 9e637ee1788d..df58773371ac 100644\n--- a/tools/pythonpkg/src/include/duckdb_python/import_cache/modules/arrow_module.hpp\n+++ b/tools/pythonpkg/src/include/duckdb_python/import_cache/modules/arrow_module.hpp\n@@ -38,6 +38,11 @@ struct ArrowDatasetCacheItem : public PythonImportCacheItem {\n public:\n \tPythonImportCacheItem Dataset;\n \tPythonImportCacheItem Scanner;\n+\n+protected:\n+\tbool IsRequired() const override final {\n+\t\treturn false;\n+\t}\n };\n \n struct ArrowCacheItem : public PythonImportCacheItem {\n",
  "test_patch": "diff --git a/tools/pythonpkg/tests/fast/test_import_without_pyarrow_dataset.py b/tools/pythonpkg/tests/fast/test_import_without_pyarrow_dataset.py\nnew file mode 100644\nindex 000000000000..06e929e5dd53\n--- /dev/null\n+++ b/tools/pythonpkg/tests/fast/test_import_without_pyarrow_dataset.py\n@@ -0,0 +1,16 @@\n+import pytest\n+import sys\n+\n+pyarrow = pytest.importorskip(\"pyarrow\")\n+\n+class TestImportWithoutPyArrowDataset:\n+\tdef test_import(self, monkeypatch: pytest.MonkeyPatch):\n+\t\tmonkeypatch.setitem(sys.modules, \"pyarrow.dataset\", None)\n+\t\timport duckdb\n+\t\t# We should be able to import duckdb even when pyarrow.dataset is missing\n+\n+\t\trel = duckdb.query('select 1')\n+\t\tarrow_table = rel.arrow()\n+\t\twith pytest.raises(ModuleNotFoundError):\n+\t\t\t# The replacement scan functionality relies on pyarrow.dataset\n+\t\t\tduckdb.query('select * from arrow_table')\n",
  "problem_statement": "import duckdb fails on freebsd\n### What happens?\r\n\r\nImporting duckdb fails with error message missing pyarrow.dataset module.\r\n\r\npip install dataset did not help.\r\n\r\n============================================\r\nPython 3.9.16 (main, Dec 18 2022, 01:15:32)\r\nType 'copyright', 'credits' or 'license' for more information\r\nIPython 8.5.0 -- An enhanced Interactive Python. Type '?' for help.\r\n\r\n-> In [1]: import duckdb\r\n---------------------------------------------------------------------------\r\nImportError                               Traceback (most recent call last)\r\nCell In [1], line 1\r\n----> 1 import duckdb\r\n\r\nImportError: Invalid Input Error: Required module 'pyarrow.dataset' failed to import\r\n\r\n### To Reproduce\r\n\r\nimport duckdb \r\n\r\n### OS:\r\n\r\nFreeBSD\r\n\r\n### DuckDB Version:\r\n\r\n0.6.1\r\n\r\n### DuckDB Client:\r\n\r\npython\r\n\r\n### Full Name:\r\n\r\nHuskers\r\n\r\n### Affiliation:\r\n\r\nnone\r\n\r\n### Have you tried this on the latest `master` branch?\r\n\r\n- [X] I agree\r\n\r\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\r\n\r\n- [X] I agree\n",
  "hints_text": "Odd that this would be required! Maybe `pip install pyarrow` would be a workaround for now?\nSounds like your copy of pyarrow doesn't include the optional dataset module, which is unfortunate. Depending on how you installed it, you may need to uninstall it and reinstall it after setting some environment variables\n\nSee here for more details: https://arrow.apache.org/docs/developers/python.html#build-and-test\nI installed pre-compiled package from FreeBSD repo. As this did not work I tried installing using PIP both did not work.\n`pyarrow` should not be required for DuckDB - it seems like an oversight that this is getting non-optionally imported. @Tishj could you have a look?\nI think it is optional already - the issue is that we expect pyarrow to always have the dataset module as well? While it's technically optional\nYea I think Elliana is right\n```c++\nprotected:\n\tbool IsRequired() const override final {\n\t\treturn false;\n\t}\n};\n```\nI believe I added support for making individual import cache items optional as well, so this should be relatively easy to fix.\nDepending on how easing this requirement reflects on the rest of the code\n\nIt will only try to load the `pyarrow.dataset` module when it can find the `pyarrow` module.\nI could make it optional as well, and see if we can throw an error only when you try to use the arrow related code without having the `pyarrow.dataset` module \ud83d\udc4d ",
  "created_at": "2023-02-06T12:10:11Z"
}