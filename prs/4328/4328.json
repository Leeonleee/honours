{
  "repo": "duckdb/duckdb",
  "pull_number": 4328,
  "instance_id": "duckdb__duckdb-4328",
  "issue_numbers": [
    "3855",
    "3855"
  ],
  "base_commit": "e36f6e616ccd24d6d49d06982f03c846ec9ca20e",
  "patch": "diff --git a/src/common/file_system.cpp b/src/common/file_system.cpp\nindex 3e99ecd1f532..caa49d016a68 100644\n--- a/src/common/file_system.cpp\n+++ b/src/common/file_system.cpp\n@@ -2,6 +2,7 @@\n \n #include \"duckdb/common/checksum.hpp\"\n #include \"duckdb/common/exception.hpp\"\n+#include \"duckdb/common/file_opener.hpp\"\n #include \"duckdb/common/helper.hpp\"\n #include \"duckdb/common/string_util.hpp\"\n #include \"duckdb/common/windows.hpp\"\n@@ -144,7 +145,17 @@ string FileSystem::ExtractBaseName(const string &path) {\n \treturn vec[0];\n }\n \n-string FileSystem::GetHomeDirectory() {\n+string FileSystem::GetHomeDirectory(FileOpener *opener) {\n+\t// read the home_directory setting first, if it is set\n+\tif (opener) {\n+\t\tValue result;\n+\t\tif (opener->TryGetCurrentSetting(\"home_directory\", result)) {\n+\t\t\tif (!result.IsNull() && !result.ToString().empty()) {\n+\t\t\t\treturn result.ToString();\n+\t\t\t}\n+\t\t}\n+\t}\n+\t// fallback to the default home directories for the specified system\n #ifdef DUCKDB_WINDOWS\n \tconst char *homedir = getenv(\"USERPROFILE\");\n #else\n@@ -156,6 +167,16 @@ string FileSystem::GetHomeDirectory() {\n \treturn string();\n }\n \n+string FileSystem::ExpandPath(const string &path, FileOpener *opener) {\n+\tif (path.empty()) {\n+\t\treturn path;\n+\t}\n+\tif (path[0] == '~') {\n+\t\treturn GetHomeDirectory(opener) + path.substr(1);\n+\t}\n+\treturn path;\n+}\n+\n // LCOV_EXCL_START\n unique_ptr<FileHandle> FileSystem::OpenFile(const string &path, uint8_t flags, FileLockType lock,\n                                             FileCompressionType compression, FileOpener *opener) {\ndiff --git a/src/common/local_file_system.cpp b/src/common/local_file_system.cpp\nindex cb6ff414e6fc..6beca78a1ba5 100644\n--- a/src/common/local_file_system.cpp\n+++ b/src/common/local_file_system.cpp\n@@ -880,10 +880,14 @@ vector<string> LocalFileSystem::Glob(const string &path, FileOpener *opener) {\n \t\tabsolute_path = true;\n \t} else if (splits[0] == \"~\") {\n \t\t// starts with home directory\n-\t\tauto home_directory = GetHomeDirectory();\n+\t\tauto home_directory = GetHomeDirectory(opener);\n \t\tif (!home_directory.empty()) {\n \t\t\tabsolute_path = true;\n \t\t\tsplits[0] = home_directory;\n+\t\t\tD_ASSERT(path[0] == '~');\n+\t\t\tif (!HasGlob(path)) {\n+\t\t\t\treturn Glob(home_directory + path.substr(1));\n+\t\t\t}\n \t\t}\n \t}\n \t// Check if the path has a glob at all\ndiff --git a/src/execution/operator/helper/physical_load.cpp b/src/execution/operator/helper/physical_load.cpp\nindex 3858514f29b5..52878c97edf9 100644\n--- a/src/execution/operator/helper/physical_load.cpp\n+++ b/src/execution/operator/helper/physical_load.cpp\n@@ -5,11 +5,10 @@ namespace duckdb {\n \n void PhysicalLoad::GetData(ExecutionContext &context, DataChunk &chunk, GlobalSourceState &gstate_p,\n                            LocalSourceState &lstate) const {\n-\tauto &db = DatabaseInstance::GetDatabase(context.client);\n \tif (info->load_type == LoadType::INSTALL || info->load_type == LoadType::FORCE_INSTALL) {\n-\t\tExtensionHelper::InstallExtension(db, info->filename, info->load_type == LoadType::FORCE_INSTALL);\n+\t\tExtensionHelper::InstallExtension(context.client, info->filename, info->load_type == LoadType::FORCE_INSTALL);\n \t} else {\n-\t\tExtensionHelper::LoadExternalExtension(db, info->filename);\n+\t\tExtensionHelper::LoadExternalExtension(context.client, info->filename);\n \t}\n }\n \ndiff --git a/src/execution/physical_plan/plan_copy_to_file.cpp b/src/execution/physical_plan/plan_copy_to_file.cpp\nindex 757d95d4881a..e638b18de107 100644\n--- a/src/execution/physical_plan/plan_copy_to_file.cpp\n+++ b/src/execution/physical_plan/plan_copy_to_file.cpp\n@@ -6,6 +6,9 @@ namespace duckdb {\n \n unique_ptr<PhysicalOperator> PhysicalPlanGenerator::CreatePlan(LogicalCopyToFile &op) {\n \tauto plan = CreatePlan(*op.children[0]);\n+\tauto &fs = FileSystem::GetFileSystem(context);\n+\top.file_path = fs.ExpandPath(op.file_path, FileSystem::GetFileOpener(context));\n+\n \tbool use_tmp_file = op.is_file_and_exists && op.use_tmp_file;\n \tif (use_tmp_file) {\n \t\top.file_path += \".tmp\";\ndiff --git a/src/function/table/system/duckdb_extensions.cpp b/src/function/table/system/duckdb_extensions.cpp\nindex 0db911a6930c..592cdf26cb31 100644\n--- a/src/function/table/system/duckdb_extensions.cpp\n+++ b/src/function/table/system/duckdb_extensions.cpp\n@@ -66,7 +66,7 @@ unique_ptr<GlobalTableFunctionState> DuckDBExtensionsInit(ClientContext &context\n \t}\n \n \t// scan the install directory for installed extensions\n-\tauto ext_directory = ExtensionHelper::ExtensionDirectory(fs);\n+\tauto ext_directory = ExtensionHelper::ExtensionDirectory(context);\n \tfs.ListFiles(ext_directory, [&](const string &path, bool is_directory) {\n \t\tif (!StringUtil::EndsWith(path, \".duckdb_extension\")) {\n \t\t\treturn;\ndiff --git a/src/include/duckdb/common/file_system.hpp b/src/include/duckdb/common/file_system.hpp\nindex b9830b36c97c..fadf5dc060b5 100644\n--- a/src/include/duckdb/common/file_system.hpp\n+++ b/src/include/duckdb/common/file_system.hpp\n@@ -157,7 +157,9 @@ class FileSystem {\n \t//! Gets the working directory\n \tDUCKDB_API static string GetWorkingDirectory();\n \t//! Gets the users home directory\n-\tDUCKDB_API static string GetHomeDirectory();\n+\tDUCKDB_API static string GetHomeDirectory(FileOpener *opener);\n+\t//! Expands a given path, including e.g. expanding the home directory of the user\n+\tDUCKDB_API static string ExpandPath(const string &path, FileOpener *opener);\n \t//! Returns the system-available memory in bytes. Returns DConstants::INVALID_INDEX if the system function fails.\n \tDUCKDB_API static idx_t GetAvailableMemory();\n \t//! Path separator for the current file system\ndiff --git a/src/include/duckdb/main/client_config.hpp b/src/include/duckdb/main/client_config.hpp\nindex 13ea439648e4..d2f7453f7a60 100644\n--- a/src/include/duckdb/main/client_config.hpp\n+++ b/src/include/duckdb/main/client_config.hpp\n@@ -23,6 +23,8 @@ typedef std::function<unique_ptr<PhysicalResultCollector>(ClientContext &context\n     get_result_collector_t;\n \n struct ClientConfig {\n+\t//! The home directory used by the system (if any)\n+\tstring home_directory;\n \t//! If the query profiler is enabled or not.\n \tbool enable_profiler = false;\n \t//! If detailed query profiling is enabled\ndiff --git a/src/include/duckdb/main/database.hpp b/src/include/duckdb/main/database.hpp\nindex be228b62c4ec..4e4d07befbdb 100644\n--- a/src/include/duckdb/main/database.hpp\n+++ b/src/include/duckdb/main/database.hpp\n@@ -48,6 +48,8 @@ class DatabaseInstance : public std::enable_shared_from_this<DatabaseInstance> {\n \n \tDUCKDB_API const unordered_set<std::string> &LoadedExtensions();\n \n+\tDUCKDB_API bool TryGetCurrentSetting(const std::string &key, Value &result);\n+\n private:\n \tvoid Initialize(const char *path, DBConfig *config);\n \ndiff --git a/src/include/duckdb/main/extension_helper.hpp b/src/include/duckdb/main/extension_helper.hpp\nindex 275d5e8e5382..e95e3dfc2dd8 100644\n--- a/src/include/duckdb/main/extension_helper.hpp\n+++ b/src/include/duckdb/main/extension_helper.hpp\n@@ -28,10 +28,10 @@ class ExtensionHelper {\n \n \tstatic ExtensionLoadResult LoadExtension(DuckDB &db, const std::string &extension);\n \n-\tstatic void InstallExtension(DatabaseInstance &db, const string &extension, bool force_install);\n-\tstatic void LoadExternalExtension(DatabaseInstance &db, const string &extension);\n+\tstatic void InstallExtension(ClientContext &context, const string &extension, bool force_install);\n+\tstatic void LoadExternalExtension(ClientContext &context, const string &extension);\n \n-\tstatic string ExtensionDirectory(FileSystem &fs);\n+\tstatic string ExtensionDirectory(ClientContext &context);\n \n \tstatic idx_t DefaultExtensionCount();\n \tstatic DefaultExtension GetDefaultExtension(idx_t index);\ndiff --git a/src/include/duckdb/main/settings.hpp b/src/include/duckdb/main/settings.hpp\nindex af485e76d6b9..33c92910c1f7 100644\n--- a/src/include/duckdb/main/settings.hpp\n+++ b/src/include/duckdb/main/settings.hpp\n@@ -185,6 +185,14 @@ struct ForceCompressionSetting {\n \tstatic Value GetSetting(ClientContext &context);\n };\n \n+struct HomeDirectorySetting {\n+\tstatic constexpr const char *Name = \"home_directory\";\n+\tstatic constexpr const char *Description = \"Sets the home directory used by the system\";\n+\tstatic constexpr const LogicalTypeId InputType = LogicalTypeId::VARCHAR;\n+\tstatic void SetLocal(ClientContext &context, const Value &parameter);\n+\tstatic Value GetSetting(ClientContext &context);\n+};\n+\n struct LogQueryPathSetting {\n \tstatic constexpr const char *Name = \"log_query_path\";\n \tstatic constexpr const char *Description =\ndiff --git a/src/main/client_context.cpp b/src/main/client_context.cpp\nindex 9d132089043b..ffc3dd1bc0b5 100644\n--- a/src/main/client_context.cpp\n+++ b/src/main/client_context.cpp\n@@ -1317,20 +1317,17 @@ bool ClientContext::TryGetCurrentSetting(const std::string &key, Value &result)\n \t\treturn true;\n \t}\n \n-\t// then check the session values\n+\t// check the client session values\n \tconst auto &session_config_map = config.set_variables;\n-\tconst auto &global_config_map = db_config.options.set_variables;\n \n \tauto session_value = session_config_map.find(key);\n \tbool found_session_value = session_value != session_config_map.end();\n-\tauto global_value = global_config_map.find(key);\n-\tbool found_global_value = global_value != global_config_map.end();\n-\tif (!found_session_value && !found_global_value) {\n-\t\treturn false;\n+\tif (found_session_value) {\n+\t\tresult = session_value->second;\n+\t\treturn true;\n \t}\n-\n-\tresult = found_session_value ? session_value->second : global_value->second;\n-\treturn true;\n+\t// finally check the global session values\n+\treturn db->TryGetCurrentSetting(key, result);\n }\n \n ParserOptions ClientContext::GetParserOptions() const {\ndiff --git a/src/main/config.cpp b/src/main/config.cpp\nindex 2c75893e3c4e..fe68595a10b1 100644\n--- a/src/main/config.cpp\n+++ b/src/main/config.cpp\n@@ -43,6 +43,7 @@ static ConfigurationOption internal_options[] = {DUCKDB_GLOBAL(AccessModeSetting\n                                                  DUCKDB_GLOBAL(ExternalThreadsSetting),\n                                                  DUCKDB_LOCAL(FileSearchPathSetting),\n                                                  DUCKDB_GLOBAL(ForceCompressionSetting),\n+                                                 DUCKDB_LOCAL(HomeDirectorySetting),\n                                                  DUCKDB_LOCAL(LogQueryPathSetting),\n                                                  DUCKDB_LOCAL(MaximumExpressionDepthSetting),\n                                                  DUCKDB_GLOBAL(MaximumMemorySetting),\ndiff --git a/src/main/database.cpp b/src/main/database.cpp\nindex c2174992e167..0c2081bed5a3 100644\n--- a/src/main/database.cpp\n+++ b/src/main/database.cpp\n@@ -275,6 +275,20 @@ void DuckDB::SetExtensionLoaded(const std::string &name) {\n \tinstance->loaded_extensions.insert(name);\n }\n \n+bool DatabaseInstance::TryGetCurrentSetting(const std::string &key, Value &result) {\n+\t// check the session values\n+\tauto &db_config = DBConfig::GetConfig(*this);\n+\tconst auto &global_config_map = db_config.options.set_variables;\n+\n+\tauto global_value = global_config_map.find(key);\n+\tbool found_global_value = global_value != global_config_map.end();\n+\tif (!found_global_value) {\n+\t\treturn false;\n+\t}\n+\tresult = global_value->second;\n+\treturn true;\n+}\n+\n string ClientConfig::ExtractTimezone() const {\n \tauto entry = set_variables.find(\"TimeZone\");\n \tif (entry == set_variables.end()) {\ndiff --git a/src/main/extension/extension_install.cpp b/src/main/extension/extension_install.cpp\nindex 9c7589cc6d26..4d8c00c6e449 100644\n--- a/src/main/extension/extension_install.cpp\n+++ b/src/main/extension/extension_install.cpp\n@@ -19,10 +19,13 @@ const vector<string> ExtensionHelper::PathComponents() {\n \treturn vector<string> {\".duckdb\", \"extensions\", DuckDB::SourceID(), DuckDB::Platform()};\n }\n \n-string ExtensionHelper::ExtensionDirectory(FileSystem &fs) {\n-\tstring local_path = fs.GetHomeDirectory();\n+string ExtensionHelper::ExtensionDirectory(ClientContext &context) {\n+\tauto &fs = FileSystem::GetFileSystem(context);\n+\tstring local_path = fs.GetHomeDirectory(FileSystem::GetFileOpener(context));\n \tif (!fs.DirectoryExists(local_path)) {\n-\t\tthrow InternalException(\"Can't find the home directory at \" + local_path);\n+\t\tthrow IOException(\"Can't find the home directory at '%s'\\nSpecify a home directory using the SET \"\n+\t\t                  \"home_directory='/path/to/dir' option.\",\n+\t\t                  local_path);\n \t}\n \tauto path_components = PathComponents();\n \tfor (auto &path_ele : path_components) {\n@@ -34,14 +37,14 @@ string ExtensionHelper::ExtensionDirectory(FileSystem &fs) {\n \treturn local_path;\n }\n \n-void ExtensionHelper::InstallExtension(DatabaseInstance &db, const string &extension, bool force_install) {\n-\tauto &config = DBConfig::GetConfig(db);\n+void ExtensionHelper::InstallExtension(ClientContext &context, const string &extension, bool force_install) {\n+\tauto &config = DBConfig::GetConfig(context);\n \tif (!config.options.enable_external_access) {\n \t\tthrow PermissionException(\"Installing extensions is disabled through configuration\");\n \t}\n-\tauto &fs = FileSystem::GetFileSystem(db);\n+\tauto &fs = FileSystem::GetFileSystem(context);\n \n-\tstring local_path = ExtensionDirectory(fs);\n+\tstring local_path = ExtensionDirectory(context);\n \n \tauto extension_name = fs.ExtractBaseName(extension);\n \ndiff --git a/src/main/extension/extension_load.cpp b/src/main/extension/extension_load.cpp\nindex 12fff684db51..5c4812b5f583 100644\n--- a/src/main/extension/extension_load.cpp\n+++ b/src/main/extension/extension_load.cpp\n@@ -19,17 +19,18 @@ static T LoadFunctionFromDLL(void *dll, const string &function_name, const strin\n \treturn (T)function;\n }\n \n-void ExtensionHelper::LoadExternalExtension(DatabaseInstance &db, const string &extension) {\n-\tauto &config = DBConfig::GetConfig(db);\n+void ExtensionHelper::LoadExternalExtension(ClientContext &context, const string &extension) {\n+\tauto &db = DatabaseInstance::GetDatabase(context);\n+\tauto &config = DBConfig::GetConfig(context);\n \tif (!config.options.enable_external_access) {\n \t\tthrow PermissionException(\"Loading external extensions is disabled through configuration\");\n \t}\n-\tauto &fs = FileSystem::GetFileSystem(db);\n+\tauto &fs = FileSystem::GetFileSystem(context);\n \tauto filename = fs.ConvertSeparators(extension);\n \n \t// shorthand case\n \tif (!StringUtil::Contains(extension, \".\") && !StringUtil::Contains(extension, fs.PathSeparator())) {\n-\t\tstring local_path = fs.GetHomeDirectory();\n+\t\tstring local_path = fs.GetHomeDirectory(FileSystem::GetFileOpener(context));\n \t\tauto path_components = PathComponents();\n \t\tfor (auto &path_ele : path_components) {\n \t\t\tlocal_path = fs.JoinPath(local_path, path_ele);\ndiff --git a/src/main/settings/settings.cpp b/src/main/settings/settings.cpp\nindex 81933290f0c9..a2648755594f 100644\n--- a/src/main/settings/settings.cpp\n+++ b/src/main/settings/settings.cpp\n@@ -412,6 +412,19 @@ Value ForceCompressionSetting::GetSetting(ClientContext &context) {\n \treturn Value();\n }\n \n+//===--------------------------------------------------------------------===//\n+// Home Directory\n+//===--------------------------------------------------------------------===//\n+void HomeDirectorySetting::SetLocal(ClientContext &context, const Value &input) {\n+\tauto &config = ClientConfig::GetConfig(context);\n+\tconfig.home_directory = input.IsNull() ? input.ToString() : string();\n+}\n+\n+Value HomeDirectorySetting::GetSetting(ClientContext &context) {\n+\tauto &config = ClientConfig::GetConfig(context);\n+\treturn Value(config.home_directory);\n+}\n+\n //===--------------------------------------------------------------------===//\n // Log Query Path\n //===--------------------------------------------------------------------===//\ndiff --git a/tools/pythonpkg/src/pyconnection.cpp b/tools/pythonpkg/src/pyconnection.cpp\nindex 469b9fa38f37..2fac39396665 100644\n--- a/tools/pythonpkg/src/pyconnection.cpp\n+++ b/tools/pythonpkg/src/pyconnection.cpp\n@@ -463,11 +463,11 @@ void DuckDBPyConnection::Close() {\n }\n \n void DuckDBPyConnection::InstallExtension(const string &extension, bool force_install) {\n-\tExtensionHelper::InstallExtension(*connection->context->db, extension, force_install);\n+\tExtensionHelper::InstallExtension(*connection->context, extension, force_install);\n }\n \n void DuckDBPyConnection::LoadExtension(const string &extension) {\n-\tExtensionHelper::LoadExternalExtension(*connection->context->db, extension);\n+\tExtensionHelper::LoadExternalExtension(*connection->context, extension);\n }\n \n // cursor() is stupid\n",
  "test_patch": "diff --git a/test/sql/copy/csv/csv_home_directory.test b/test/sql/copy/csv/csv_home_directory.test\nnew file mode 100644\nindex 000000000000..8a5d0e374d35\n--- /dev/null\n+++ b/test/sql/copy/csv/csv_home_directory.test\n@@ -0,0 +1,61 @@\n+# name: test/sql/copy/csv/csv_home_directory.test\n+# description: CSV writer home directory\n+# group: [csv]\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+statement ok\n+SET home_directory='__TEST_DIR__'\n+\n+statement ok\n+CREATE TABLE integers AS SELECT * FROM range(10)\n+\n+statement ok\n+COPY integers TO '~/integers.csv' (FORMAT CSV);\n+\n+query I\n+SELECT * FROM '~/integers.csv'\n+----\n+0\n+1\n+2\n+3\n+4\n+5\n+6\n+7\n+8\n+9\n+\n+statement ok\n+CREATE TABLE integers_load(i INTEGER);\n+\n+statement ok\n+COPY integers_load FROM '~/integers.csv'\n+\n+query I\n+SELECT * FROM integers_load\n+----\n+0\n+1\n+2\n+3\n+4\n+5\n+6\n+7\n+8\n+9\n+\n+# glob from home directory\n+statement ok\n+COPY integers TO '~/homedir_integers1.csv'\n+\n+statement ok\n+COPY integers TO '~/homedir_integers2.csv'\n+\n+query I\n+SELECT COUNT(*) FROM '~/homedir_integers*.csv'\n+----\n+20\ndiff --git a/test/sql/copy/parquet/writer/parquet_write_home_directory.test b/test/sql/copy/parquet/writer/parquet_write_home_directory.test\nnew file mode 100644\nindex 000000000000..67cd061c7489\n--- /dev/null\n+++ b/test/sql/copy/parquet/writer/parquet_write_home_directory.test\n@@ -0,0 +1,63 @@\n+# name: test/sql/copy/parquet/writer/parquet_write_home_directory.test\n+# description: Parquet writer home directory\n+# group: [writer]\n+\n+require parquet\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+statement ok\n+SET home_directory='__TEST_DIR__'\n+\n+statement ok\n+CREATE TABLE integers AS SELECT * FROM range(10)\n+\n+statement ok\n+COPY integers TO '~/integers.parquet' (FORMAT PARQUET);\n+\n+query I\n+SELECT * FROM '~/integers.parquet'\n+----\n+0\n+1\n+2\n+3\n+4\n+5\n+6\n+7\n+8\n+9\n+\n+statement ok\n+CREATE TABLE integers_load(i INTEGER);\n+\n+statement ok\n+COPY integers_load FROM '~/integers.parquet'\n+\n+query I\n+SELECT * FROM integers_load\n+----\n+0\n+1\n+2\n+3\n+4\n+5\n+6\n+7\n+8\n+9\n+\n+# glob from home directory\n+statement ok\n+COPY integers TO '~/homedir_integers1.parquet'\n+\n+statement ok\n+COPY integers TO '~/homedir_integers2.parquet'\n+\n+query I\n+SELECT COUNT(*) FROM '~/homedir_integers*.parquet'\n+----\n+20\n",
  "problem_statement": "HTTPFS - INTERNAL Error: Can't find the home directory at \"\" when $HOME is unset/empty\n#### What happens?\r\nIn certain runtime environments (such as AWS Lambda), where the `$HOME` is deliberately unset (or set to an empty string), bootstrapping an in-memory DuckDB would result in the title-mentioned error.\r\n\r\n#### To Reproduce\r\nThe original steps were created using SQLAlchemy (through [`duckdb-engine`](https://github.com/Mause/duckdb_engine)), raised at https://github.com/Mause/duckdb_engine/issues/258 (also includes a workaround, particular to AWS Lambda runtime, is to set `HOME=/tmp` prior to invocation of `install httpfs`)\r\n\r\nThe minimal step to reproduce through DuckDB CLI is as such:\r\n\r\n```shell\r\n% env HOME='' duckdb\r\nv0.3.4 662041e2b\r\nEnter \".help\" for usage hints.\r\nConnected to a transient in-memory database.\r\nUse \".open FILENAME\" to reopen on a persistent database.\r\nD install httpfs;\r\nError: INTERNAL Error: Can't find the home directory at \r\n```\r\n\r\n#### Environment (please complete the following information):\r\n - OS: macOS 12.4 (and AWS Lambda official Python 3.9 runtime, which should be Linux)\r\n - DuckDB Version: v0.3.4 662041e2b\r\n - DuckDB Client: Python (`duckdb-engine`) and the official CLI\r\n\r\n#### Before Submitting\r\n\r\n- [x] **Have you tried this on the latest `master` branch?**\r\nFrom https://github.com/duckdb/duckdb/actions/runs/2495776338 (v0.3.5-dev1253 cdfb9f92f)\r\n\r\n- [x] **Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?**\r\nYes, the issue is still there with the ^ mentioned CI artifact\r\n\r\n```shell\r\n% env HOME='' ./duckdb \r\nv0.3.5-dev1253 cdfb9f92f\r\nEnter \".help\" for usage hints.\r\nConnected to a transient in-memory database.\r\nUse \".open FILENAME\" to reopen on a persistent database.\r\nD install httpfs;\r\nError: INTERNAL Error: Can't find the home directory at \r\n```\nHTTPFS - INTERNAL Error: Can't find the home directory at \"\" when $HOME is unset/empty\n#### What happens?\r\nIn certain runtime environments (such as AWS Lambda), where the `$HOME` is deliberately unset (or set to an empty string), bootstrapping an in-memory DuckDB would result in the title-mentioned error.\r\n\r\n#### To Reproduce\r\nThe original steps were created using SQLAlchemy (through [`duckdb-engine`](https://github.com/Mause/duckdb_engine)), raised at https://github.com/Mause/duckdb_engine/issues/258 (also includes a workaround, particular to AWS Lambda runtime, is to set `HOME=/tmp` prior to invocation of `install httpfs`)\r\n\r\nThe minimal step to reproduce through DuckDB CLI is as such:\r\n\r\n```shell\r\n% env HOME='' duckdb\r\nv0.3.4 662041e2b\r\nEnter \".help\" for usage hints.\r\nConnected to a transient in-memory database.\r\nUse \".open FILENAME\" to reopen on a persistent database.\r\nD install httpfs;\r\nError: INTERNAL Error: Can't find the home directory at \r\n```\r\n\r\n#### Environment (please complete the following information):\r\n - OS: macOS 12.4 (and AWS Lambda official Python 3.9 runtime, which should be Linux)\r\n - DuckDB Version: v0.3.4 662041e2b\r\n - DuckDB Client: Python (`duckdb-engine`) and the official CLI\r\n\r\n#### Before Submitting\r\n\r\n- [x] **Have you tried this on the latest `master` branch?**\r\nFrom https://github.com/duckdb/duckdb/actions/runs/2495776338 (v0.3.5-dev1253 cdfb9f92f)\r\n\r\n- [x] **Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?**\r\nYes, the issue is still there with the ^ mentioned CI artifact\r\n\r\n```shell\r\n% env HOME='' ./duckdb \r\nv0.3.5-dev1253 cdfb9f92f\r\nEnter \".help\" for usage hints.\r\nConnected to a transient in-memory database.\r\nUse \".open FILENAME\" to reopen on a persistent database.\r\nD install httpfs;\r\nError: INTERNAL Error: Can't find the home directory at \r\n```\n",
  "hints_text": "You could download the extension manually and LOAD from wherever you installed it, we should eventually add configuration parameter to set the extension installation path\n@samansmink \n> You could download the extension manually and LOAD from wherever you installed it, we should eventually add configuration parameter to set the extension installation path\r\n\r\nMakes sense. The current work around works well for us, which is conceptually `env HOME=/tmp <run process>` in the given container environment that doesn't have a `$HOME` set.\r\n\r\nAlong the line, but perhaps worthy of another issue, is that it'd be more user-friendly if the `httpfs` extension (or DuckDB itself, sorry not very familiar with the implementation itself yet) can default to environment variables for AWS-related configs so that users do not need to relay explicitly such as:\r\n\r\n```python\r\n# snippet of Python code\r\ninit_query = f\"\"\"\r\n    INSTALL httpfs;\r\n\r\n    LOAD httpfs;\r\n\r\n    SET s3_region='us-east-1';\r\n    SET s3_access_key_id='{os.getenv(\"AWS_ACCESS_KEY_ID\")}';\r\n    SET s3_secret_access_key='{os.getenv(\"AWS_SECRET_ACCESS_KEY\")}';\r\n\"\"\"\r\n```\r\n\r\ncould be omitted to simply be\r\n\r\n```python\r\ninit_query = f\"\"\"\r\n    INSTALL httpfs;\r\n\r\n    LOAD httpfs;\r\n\r\n    SET s3_region='us-east-1'; -- maybe even this can be omitted if region env var is set\r\n\"\"\"\r\n```\nHey duckDB team I have the same issue. So I am using the java library of duckDB from maven. I am trying to read/write directly in s3 but it fails in this step with the same exception as here people are getting : \r\n```\r\n            Class.forName(\"org.duckdb.DuckDBDriver\");\r\n            Properties prop = new Properties();\r\n            prop.setProperty(\"s3_region\", creds.region);\r\n            prop.setProperty(\"s3_session_token\", Utils.sessionToken(creds.fivetranRoleArn, creds.externalId));\r\n            Connection conn = DriverManager.getConnection(\"jdbc:duckdb:\", prop);\r\n            try (Statement stmt = conn.createStatement()) {\r\n                stmt.execute(\"INSTALL httpfs\");\r\n                stmt.execute(\"LOAD httpfs\");\r\n            }\r\n```\r\nI am getting the exception while installing httpfs `java.sql.SQLException: INTERNAL Error: Can't find the home directory at `. To resolve this I tried setting `HOME` env variable using System.setProperty() and also directly I tried to set in System.getenv() using hackfix provied [here](https://stackoverflow.com/questions/318239/how-do-i-set-environment-variables-from-java) . But no result. It still failed. \r\nWhat do I have to do to make it work ?\r\n\n> \r\n\r\n\r\n\r\n> Hey duckDB team I have the same issue. So I am using the java library of duckDB from maven. I am trying to read/write directly in s3 but it fails in this step with the same exception as here people are getting :\r\n> \r\n> ```\r\n>             Class.forName(\"org.duckdb.DuckDBDriver\");\r\n>             Properties prop = new Properties();\r\n>             prop.setProperty(\"s3_region\", creds.region);\r\n>             prop.setProperty(\"s3_session_token\", Utils.sessionToken(creds.fivetranRoleArn, creds.externalId));\r\n>             Connection conn = DriverManager.getConnection(\"jdbc:duckdb:\", prop);\r\n>             try (Statement stmt = conn.createStatement()) {\r\n>                 stmt.execute(\"INSTALL httpfs\");\r\n>                 stmt.execute(\"LOAD httpfs\");\r\n>             }\r\n> ```\r\n> \r\n> I am getting the exception while installing httpfs `java.sql.SQLException: INTERNAL Error: Can't find the home directory at `. To resolve this I tried setting `HOME` env variable using System.setProperty() and also directly I tried to set in System.getenv() using hackfix provied [here](https://stackoverflow.com/questions/318239/how-do-i-set-environment-variables-from-java) . But no result. It still failed. What do I have to do to make it work ?\r\n\r\nTry setting it externally to the java application instead?\n> \r\n\r\n\r\n\r\n> \r\n\r\n\r\n\r\n> > You could download the extension manually and LOAD from wherever you installed it, we should eventually add configuration parameter to set the extension installation path\r\n> \r\n> Makes sense. The current work around works well for us, which is conceptually `env HOME=/tmp <run process>` in the given container environment that doesn't have a `$HOME` set.\r\n> \r\n> Along the line, but perhaps worthy of another issue, is that it'd be more user-friendly if the `httpfs` extension (or DuckDB itself, sorry not very familiar with the implementation itself yet) can default to environment variables for AWS-related configs so that users do not need to relay explicitly such as:\r\n> \r\n> ```python\r\n> # snippet of Python code\r\n> init_query = f\"\"\"\r\n>     INSTALL httpfs;\r\n> \r\n>     LOAD httpfs;\r\n> \r\n>     SET s3_region='us-east-1';\r\n>     SET s3_access_key_id='{os.getenv(\"AWS_ACCESS_KEY_ID\")}';\r\n>     SET s3_secret_access_key='{os.getenv(\"AWS_SECRET_ACCESS_KEY\")}';\r\n> \"\"\"\r\n> ```\r\n> \r\n> could be omitted to simply be\r\n> \r\n> ```python\r\n> init_query = f\"\"\"\r\n>     INSTALL httpfs;\r\n> \r\n>     LOAD httpfs;\r\n> \r\n>     SET s3_region='us-east-1'; -- maybe even this can be omitted if region env var is set\r\n> \"\"\"\r\n> ```\r\n\r\nI think that would be more complicated than it first seems, due to the possibility of multiple configuration sets (I forget what aws calls them) on a single machine.\r\n\n> I think that would be more complicated than it first seems, due to the possibility of multiple configuration sets (I forget what aws calls them) on a single machine.\r\n\r\nAgree. We're perfectly content with the workaround approach. Though a tiered fallback strategy where the explicit in-query `SET <key>=<value>` gets the highest precedence could be reasonable. For instance, it's either the `SET` command or the exposed environment variables in-process.\r\n\r\n> I forget what aws calls them\r\n\r\nThey're called Named Profiles, I believe, which can be directed using the environment variable `AWS_CONFIG_FILE` too to specify.\nYou could download the extension manually and LOAD from wherever you installed it, we should eventually add configuration parameter to set the extension installation path\n@samansmink \n> You could download the extension manually and LOAD from wherever you installed it, we should eventually add configuration parameter to set the extension installation path\r\n\r\nMakes sense. The current work around works well for us, which is conceptually `env HOME=/tmp <run process>` in the given container environment that doesn't have a `$HOME` set.\r\n\r\nAlong the line, but perhaps worthy of another issue, is that it'd be more user-friendly if the `httpfs` extension (or DuckDB itself, sorry not very familiar with the implementation itself yet) can default to environment variables for AWS-related configs so that users do not need to relay explicitly such as:\r\n\r\n```python\r\n# snippet of Python code\r\ninit_query = f\"\"\"\r\n    INSTALL httpfs;\r\n\r\n    LOAD httpfs;\r\n\r\n    SET s3_region='us-east-1';\r\n    SET s3_access_key_id='{os.getenv(\"AWS_ACCESS_KEY_ID\")}';\r\n    SET s3_secret_access_key='{os.getenv(\"AWS_SECRET_ACCESS_KEY\")}';\r\n\"\"\"\r\n```\r\n\r\ncould be omitted to simply be\r\n\r\n```python\r\ninit_query = f\"\"\"\r\n    INSTALL httpfs;\r\n\r\n    LOAD httpfs;\r\n\r\n    SET s3_region='us-east-1'; -- maybe even this can be omitted if region env var is set\r\n\"\"\"\r\n```\nHey duckDB team I have the same issue. So I am using the java library of duckDB from maven. I am trying to read/write directly in s3 but it fails in this step with the same exception as here people are getting : \r\n```\r\n            Class.forName(\"org.duckdb.DuckDBDriver\");\r\n            Properties prop = new Properties();\r\n            prop.setProperty(\"s3_region\", creds.region);\r\n            prop.setProperty(\"s3_session_token\", Utils.sessionToken(creds.fivetranRoleArn, creds.externalId));\r\n            Connection conn = DriverManager.getConnection(\"jdbc:duckdb:\", prop);\r\n            try (Statement stmt = conn.createStatement()) {\r\n                stmt.execute(\"INSTALL httpfs\");\r\n                stmt.execute(\"LOAD httpfs\");\r\n            }\r\n```\r\nI am getting the exception while installing httpfs `java.sql.SQLException: INTERNAL Error: Can't find the home directory at `. To resolve this I tried setting `HOME` env variable using System.setProperty() and also directly I tried to set in System.getenv() using hackfix provied [here](https://stackoverflow.com/questions/318239/how-do-i-set-environment-variables-from-java) . But no result. It still failed. \r\nWhat do I have to do to make it work ?\r\n\n> \r\n\r\n\r\n\r\n> Hey duckDB team I have the same issue. So I am using the java library of duckDB from maven. I am trying to read/write directly in s3 but it fails in this step with the same exception as here people are getting :\r\n> \r\n> ```\r\n>             Class.forName(\"org.duckdb.DuckDBDriver\");\r\n>             Properties prop = new Properties();\r\n>             prop.setProperty(\"s3_region\", creds.region);\r\n>             prop.setProperty(\"s3_session_token\", Utils.sessionToken(creds.fivetranRoleArn, creds.externalId));\r\n>             Connection conn = DriverManager.getConnection(\"jdbc:duckdb:\", prop);\r\n>             try (Statement stmt = conn.createStatement()) {\r\n>                 stmt.execute(\"INSTALL httpfs\");\r\n>                 stmt.execute(\"LOAD httpfs\");\r\n>             }\r\n> ```\r\n> \r\n> I am getting the exception while installing httpfs `java.sql.SQLException: INTERNAL Error: Can't find the home directory at `. To resolve this I tried setting `HOME` env variable using System.setProperty() and also directly I tried to set in System.getenv() using hackfix provied [here](https://stackoverflow.com/questions/318239/how-do-i-set-environment-variables-from-java) . But no result. It still failed. What do I have to do to make it work ?\r\n\r\nTry setting it externally to the java application instead?\n> \r\n\r\n\r\n\r\n> \r\n\r\n\r\n\r\n> > You could download the extension manually and LOAD from wherever you installed it, we should eventually add configuration parameter to set the extension installation path\r\n> \r\n> Makes sense. The current work around works well for us, which is conceptually `env HOME=/tmp <run process>` in the given container environment that doesn't have a `$HOME` set.\r\n> \r\n> Along the line, but perhaps worthy of another issue, is that it'd be more user-friendly if the `httpfs` extension (or DuckDB itself, sorry not very familiar with the implementation itself yet) can default to environment variables for AWS-related configs so that users do not need to relay explicitly such as:\r\n> \r\n> ```python\r\n> # snippet of Python code\r\n> init_query = f\"\"\"\r\n>     INSTALL httpfs;\r\n> \r\n>     LOAD httpfs;\r\n> \r\n>     SET s3_region='us-east-1';\r\n>     SET s3_access_key_id='{os.getenv(\"AWS_ACCESS_KEY_ID\")}';\r\n>     SET s3_secret_access_key='{os.getenv(\"AWS_SECRET_ACCESS_KEY\")}';\r\n> \"\"\"\r\n> ```\r\n> \r\n> could be omitted to simply be\r\n> \r\n> ```python\r\n> init_query = f\"\"\"\r\n>     INSTALL httpfs;\r\n> \r\n>     LOAD httpfs;\r\n> \r\n>     SET s3_region='us-east-1'; -- maybe even this can be omitted if region env var is set\r\n> \"\"\"\r\n> ```\r\n\r\nI think that would be more complicated than it first seems, due to the possibility of multiple configuration sets (I forget what aws calls them) on a single machine.\r\n\n> I think that would be more complicated than it first seems, due to the possibility of multiple configuration sets (I forget what aws calls them) on a single machine.\r\n\r\nAgree. We're perfectly content with the workaround approach. Though a tiered fallback strategy where the explicit in-query `SET <key>=<value>` gets the highest precedence could be reasonable. For instance, it's either the `SET` command or the exposed environment variables in-process.\r\n\r\n> I forget what aws calls them\r\n\r\nThey're called Named Profiles, I believe, which can be directed using the environment variable `AWS_CONFIG_FILE` too to specify.",
  "created_at": "2022-08-08T19:33:11Z"
}