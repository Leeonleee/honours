{
  "repo": "duckdb/duckdb",
  "pull_number": 7443,
  "instance_id": "duckdb__duckdb-7443",
  "issue_numbers": [
    "6827"
  ],
  "base_commit": "64aaaa2bedb7da77c8dd58bc24677a68c650a034",
  "patch": "diff --git a/src/main/client_context.cpp b/src/main/client_context.cpp\nindex afe4a2b133bb..9e28a452fa6c 100644\n--- a/src/main/client_context.cpp\n+++ b/src/main/client_context.cpp\n@@ -1013,6 +1013,7 @@ void ClientContext::TryBindRelation(Relation &relation, vector<ColumnDefinition>\n \tD_ASSERT(!relation.GetAlias().empty());\n \tD_ASSERT(!relation.ToString().empty());\n #endif\n+\tclient_data->http_state = make_uniq<HTTPState>();\n \tRunFunctionInTransaction([&]() {\n \t\t// bind the expressions\n \t\tauto binder = Binder::CreateBinder(*this);\n",
  "test_patch": "diff --git a/tools/pythonpkg/tests/extensions/test_httpfs.py b/tools/pythonpkg/tests/extensions/test_httpfs.py\nindex f78c4d6e1ef0..fc9087dde53b 100644\n--- a/tools/pythonpkg/tests/extensions/test_httpfs.py\n+++ b/tools/pythonpkg/tests/extensions/test_httpfs.py\n@@ -10,36 +10,42 @@\n     reason='httpfs extension not available'\n )\n \n-@pytest.mark.parametrize('pandas', [NumpyPandas(), ArrowPandas()])\n-def test_httpfs(require, pandas):\n-    connection = require('httpfs')\n-    try:\n-        connection.execute(\"SELECT id, first_name, last_name FROM PARQUET_SCAN('https://raw.githubusercontent.com/cwida/duckdb/master/data/parquet-testing/userdata1.parquet') LIMIT 3;\")\n-    except RuntimeError as e:\n-        # Test will ignore result if it fails due to networking issues while running the test.\n-        if (str(e).startswith(\"HTTP HEAD error\")):\n-            return\n-        elif (str(e).startswith(\"Unable to connect\")):\n-            return\n-        else:\n-            raise e\n+class TestHTTPFS(object):\n+\tdef test_read_json_httpfs(self, require):\n+\t\tconnection = require('httpfs')\n+\t\tres = connection.read_json('https://jsonplaceholder.typicode.com/todos')\n+\t\tassert len(res.types) == 4\n \n-    result_df = connection.fetchdf()\n-    exp_result = pandas.DataFrame({\n-        'id': pandas.Series([1, 2, 3], dtype=\"int32\"),\n-        'first_name': ['Amanda', 'Albert', 'Evelyn'],\n-        'last_name': ['Jordan', 'Freeman', 'Morgan']\n-    })\n-    pandas.testing.assert_frame_equal(result_df, exp_result)\n+\t@pytest.mark.parametrize('pandas', [NumpyPandas(), ArrowPandas()])\n+\tdef test_httpfs(self, require, pandas):\n+\t\tconnection = require('httpfs')\n+\t\ttry:\n+\t\t\tconnection.execute(\"SELECT id, first_name, last_name FROM PARQUET_SCAN('https://raw.githubusercontent.com/cwida/duckdb/master/data/parquet-testing/userdata1.parquet') LIMIT 3;\")\n+\t\texcept RuntimeError as e:\n+\t\t\t# Test will ignore result if it fails due to networking issues while running the test.\n+\t\t\tif (str(e).startswith(\"HTTP HEAD error\")):\n+\t\t\t\treturn\n+\t\t\telif (str(e).startswith(\"Unable to connect\")):\n+\t\t\t\treturn\n+\t\t\telse:\n+\t\t\t\traise e\n \n-def test_http_exception(require):\n-    connection = require('httpfs')\n+\t\tresult_df = connection.fetchdf()\n+\t\texp_result = pandas.DataFrame({\n+\t\t\t'id': pandas.Series([1, 2, 3], dtype=\"int32\"),\n+\t\t\t'first_name': ['Amanda', 'Albert', 'Evelyn'],\n+\t\t\t'last_name': ['Jordan', 'Freeman', 'Morgan']\n+\t\t})\n+\t\tpandas.testing.assert_frame_equal(result_df, exp_result)\n \n-    with raises(duckdb.HTTPException) as exc:\n-        connection.execute(\"SELECT * FROM PARQUET_SCAN('https://example.com/userdata1.parquet')\")\n+\tdef test_http_exception(self, require):\n+\t\tconnection = require('httpfs')\n \n-    value = exc.value\n-    assert value.status_code == 404\n-    assert value.reason == 'Not Found'\n-    assert value.body == ''\n-    assert 'Content-Length' in value.headers\n+\t\twith raises(duckdb.HTTPException) as exc:\n+\t\t\tconnection.execute(\"SELECT * FROM PARQUET_SCAN('https://example.com/userdata1.parquet')\")\n+\n+\t\tvalue = exc.value\n+\t\tassert value.status_code == 404\n+\t\tassert value.reason == 'Not Found'\n+\t\tassert value.body == ''\n+\t\tassert 'Content-Length' in value.headers\n",
  "problem_statement": "[Python] InternalException on simple `read_json`\n### What happens?\r\n\r\n```py\r\nimport duckdb\r\n\r\nduckdb.read_json('https://jsonplaceholder.typicode.com/todos')\r\n```\r\n```\r\nduckdb.InternalException: INTERNAL Error: State was not defined in this HTTP File Handle\r\n```\r\n\r\nMost likely related to <https://github.com/duckdb/duckdb/commit/7882080cda3598a56c0156a2b8606d2ae35752ea>\r\n\r\n### OS:\r\n\r\nMacOS\r\n\r\n### DuckDB Version:\r\n\r\nmaster\r\n\r\n### DuckDB Client:\r\n\r\nPython\r\n\r\n### Full Name:\r\n\r\nThijs Bruineman\r\n\r\n### Affiliation:\r\n\r\nDuckDB Labs\r\n\r\n### Have you tried this on the latest `master` branch?\r\n\r\n- [X] I agree\r\n\r\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\r\n\r\n- [X] I agree\n",
  "hints_text": "Duplicate of https://github.com/duckdb/duckdb/issues/6793 right?\nCould be, I'll check if it's fixed \ud83d\udc4d \nSadly not fixed yet, but Pedro is on it :)\n@Tishj it seems that has been fixed already, I've added a sanity-test here https://github.com/pdet/duckdb/commit/ec1c0467453f641c4d22feadf67e4bfc51e941ed\r\n\r\nCould you verify that's what is supposed to look like and run locally as well? \n> @Tishj it seems that has been fixed already, I've added a sanity-test here [pdet@ec1c046](https://github.com/pdet/duckdb/commit/ec1c0467453f641c4d22feadf67e4bfc51e941ed)\r\n> \r\n> Could you verify that's what is supposed to look like and run locally as well?\r\n\r\nRunning on master with\r\n`BUILD_HTTPFS=1 BUILD_PYTHON=1 make debug`\r\nI can still reproduce the issue:\r\n```\r\n\u279c  duckdb git:(master) \u2717 python3\r\nPython 3.11.2 (main, Feb 16 2023, 02:55:59) [Clang 14.0.0 (clang-1400.0.29.202)] on darwin\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import duckdb \r\n>>> duckdb.read_json('https://jsonplaceholder.typicode.com/todos')\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nduckdb.InternalException: INTERNAL Error: State was not defined in this HTTP File Handle\r\n```",
  "created_at": "2023-05-10T13:34:07Z"
}