You will be provided with a partial code base and an issue statement explaining a problem to resolve.
In your output, give nothing but the code (no markdown) so that your output can be copy pasted and run immediately with no changes

<issue>
Incorrect WITH RECURSIVE query results in an infinite loop instead of a type error
#### What happens?
An incorrectly formulated `WITH RECURSIVE` query results in an infinite loop when the return values mismatch in the UNION of WITH RECURSIVE (NULL vs. string).

#### What should happen?
Postgres displays a type error with a hint to cast the result to the correct type ([SQL Fiddle](http://sqlfiddle.com/#!15/4e6f3/2)):
> ERROR: recursive query "tag_hierarchy" column 4 has type text in non-recursive term but type character varying overall
> Hint: Cast the output of the non-recursive term to the correct type. Position: 94

#### To Reproduce
Example data and queries are below. To avoid the infinite loop, change `NULL AS target` to `'' AS target` or `NULL::string AS target`.

```sql
CREATE TABLE tag(id int, name string, subclassof int);

INSERT INTO tag VALUES
  (7, 'Music',  9),
  (8, 'Movies', 9),
  (9, 'Art',    NULL)
;

WITH RECURSIVE tag_hierarchy(id, source, path, target) AS (
  SELECT id, name, name AS path, NULL AS target -- this should be '' for correct behaviour
  FROM tag
  WHERE subclassof IS NULL
 
  UNION ALL

  SELECT tag.id, tag.name, tag_hierarchy.path || ' <- ' || tag.name, tag.name AS target
  FROM tag, tag_hierarchy
  WHERE tag.subclassof = tag_hierarchy.id
)
SELECT source, path, target
FROM tag_hierarchy
;
```

The error occurs on `master` - note that DuckDB v0.2.9 works as expected and fails with:
```
Error: Conversion Error: Could not convert string 'Music' to INT32
```

#### Environment
 - OS: Fedora 35
 - DuckDB Version: `v0.3.1-dev511 c0d4ec2d7`
 - DuckDB Client: CLI

Incorrect WITH RECURSIVE query results in an infinite loop instead of a type error
#### What happens?
An incorrectly formulated `WITH RECURSIVE` query results in an infinite loop when the return values mismatch in the UNION of WITH RECURSIVE (NULL vs. string).

#### What should happen?
Postgres displays a type error with a hint to cast the result to the correct type ([SQL Fiddle](http://sqlfiddle.com/#!15/4e6f3/2)):
> ERROR: recursive query "tag_hierarchy" column 4 has type text in non-recursive term but type character varying overall
> Hint: Cast the output of the non-recursive term to the correct type. Position: 94

#### To Reproduce
Example data and queries are below. To avoid the infinite loop, change `NULL AS target` to `'' AS target` or `NULL::string AS target`.

```sql
CREATE TABLE tag(id int, name string, subclassof int);

INSERT INTO tag VALUES
  (7, 'Music',  9),
  (8, 'Movies', 9),
  (9, 'Art',    NULL)
;

WITH RECURSIVE tag_hierarchy(id, source, path, target) AS (
  SELECT id, name, name AS path, NULL AS target -- this should be '' for correct behaviour
  FROM tag
  WHERE subclassof IS NULL
 
  UNION ALL

  SELECT tag.id, tag.name, tag_hierarchy.path || ' <- ' || tag.name, tag.name AS target
  FROM tag, tag_hierarchy
  WHERE tag.subclassof = tag_hierarchy.id
)
SELECT source, path, target
FROM tag_hierarchy
;
```

The error occurs on `master` - note that DuckDB v0.2.9 works as expected and fails with:
```
Error: Conversion Error: Could not convert string 'Music' to INT32
```

#### Environment
 - OS: Fedora 35
 - DuckDB Version: `v0.3.1-dev511 c0d4ec2d7`
 - DuckDB Client: CLI


</issue>
<code>
[start of README.md]
1: <div align="center">
2:   <img src="https://duckdb.org/images/DuckDB_Logo_dl.png" height="50">
3: </div>
4: <p>&nbsp;</p>
5: 
6: <p align="center">
7:   <a href="https://github.com/duckdb/duckdb/actions">
8:     <img src="https://github.com/cwida/duckdb/workflows/.github/workflows/main.yml/badge.svg?branch=master" alt=".github/workflows/main.yml">
9:   </a>
10:   <a href="https://www.codefactor.io/repository/github/cwida/duckdb">
11:     <img src="https://www.codefactor.io/repository/github/cwida/duckdb/badge" alt="CodeFactor"/>
12:   </a>
13:   <a href="https://app.codecov.io/gh/duckdb/duckdb">
14:     <img src="https://codecov.io/gh/duckdb/duckdb/branch/master/graph/badge.svg?token=FaxjcfFghN" alt="codecov"/>
15:   </a>
16: </p>
17: 
18: ## DuckDB
19: DuckDB is a high-performance analytical database system. It is designed to be fast, reliable and easy to use. DuckDB provides a rich SQL dialect, with support far beyond basic SQL. DuckDB supports arbitrary and nested correlated subqueries, window functions, collations, complex types (arrays, structs), and more. For more information on the goals of DuckDB, please refer to [the Why DuckDB page on our website](https://duckdb.org/docs/why_duckdb.html).
20: 
21: ## Installation
22: If you want to install and use DuckDB, please see [our website](https://www.duckdb.org) for installation and usage instructions.
23: 
24: ## Data Import
25: For CSV files and Parquet files, data import is as simple as referencing the file in the FROM clause:
26: 
27: ```sql
28: SELECT * FROM 'myfile.csv';
29: SELECT * FROM 'myfile.parquet';
30: ```
31: 
32: Refer to our [Data Import](https://duckdb.org/docs/data/overview) section for more information.
33: 
34: ## SQL Reference
35: The [website](https://duckdb.org/docs/sql/introduction) contains a reference of functions and SQL constructs available in DuckDB.
36: 
37: ## Development
38: For development, DuckDB requires [CMake](https://cmake.org), Python3 and a `C++11` compliant compiler. Run `make` in the root directory to compile the sources. For development, use `make debug` to build a non-optimized debug version. You should run `make unit` and `make allunit` to verify that your version works properly after making changes. To test performance, you can run several standard benchmarks from the root directory by executing `./build/release/benchmark/benchmark_runner`.
39: 
40: Please also refer to our [Contribution Guide](CONTRIBUTING.md).
41: 
42: 
[end of README.md]
[start of src/execution/operator/set/physical_recursive_cte.cpp]
1: #include "duckdb/execution/operator/set/physical_recursive_cte.hpp"
2: 
3: #include "duckdb/common/vector_operations/vector_operations.hpp"
4: 
5: #include "duckdb/common/types/chunk_collection.hpp"
6: #include "duckdb/execution/aggregate_hashtable.hpp"
7: #include "duckdb/parallel/pipeline.hpp"
8: #include "duckdb/storage/buffer_manager.hpp"
9: #include "duckdb/parallel/task_scheduler.hpp"
10: #include "duckdb/execution/executor.hpp"
11: #include "duckdb/parallel/event.hpp"
12: 
13: namespace duckdb {
14: 
15: PhysicalRecursiveCTE::PhysicalRecursiveCTE(vector<LogicalType> types, bool union_all, unique_ptr<PhysicalOperator> top,
16:                                            unique_ptr<PhysicalOperator> bottom, idx_t estimated_cardinality)
17:     : PhysicalOperator(PhysicalOperatorType::RECURSIVE_CTE, move(types), estimated_cardinality), union_all(union_all) {
18: 	children.push_back(move(top));
19: 	children.push_back(move(bottom));
20: }
21: 
22: PhysicalRecursiveCTE::~PhysicalRecursiveCTE() {
23: }
24: 
25: //===--------------------------------------------------------------------===//
26: // Sink
27: //===--------------------------------------------------------------------===//
28: class RecursiveCTEState : public GlobalSinkState {
29: public:
30: 	explicit RecursiveCTEState(ClientContext &context, const PhysicalRecursiveCTE &op)
31: 	    : new_groups(STANDARD_VECTOR_SIZE) {
32: 		ht = make_unique<GroupedAggregateHashTable>(BufferManager::GetBufferManager(context), op.types,
33: 		                                            vector<LogicalType>(), vector<BoundAggregateExpression *>());
34: 	}
35: 
36: 	unique_ptr<GroupedAggregateHashTable> ht;
37: 
38: 	bool intermediate_empty = true;
39: 	ChunkCollection intermediate_table;
40: 	idx_t chunk_idx = 0;
41: 	SelectionVector new_groups;
42: };
43: 
44: unique_ptr<GlobalSinkState> PhysicalRecursiveCTE::GetGlobalSinkState(ClientContext &context) const {
45: 	return make_unique<RecursiveCTEState>(context, *this);
46: }
47: 
48: idx_t PhysicalRecursiveCTE::ProbeHT(DataChunk &chunk, RecursiveCTEState &state) const {
49: 	Vector dummy_addresses(LogicalType::POINTER);
50: 
51: 	// Use the HT to eliminate duplicate rows
52: 	idx_t new_group_count = state.ht->FindOrCreateGroups(chunk, dummy_addresses, state.new_groups);
53: 
54: 	// we only return entries we have not seen before (i.e. new groups)
55: 	chunk.Slice(state.new_groups, new_group_count);
56: 
57: 	return new_group_count;
58: }
59: 
60: SinkResultType PhysicalRecursiveCTE::Sink(ExecutionContext &context, GlobalSinkState &state, LocalSinkState &lstate,
61:                                           DataChunk &input) const {
62: 	auto &gstate = (RecursiveCTEState &)state;
63: 	if (!union_all) {
64: 		idx_t match_count = ProbeHT(input, gstate);
65: 		if (match_count > 0) {
66: 			gstate.intermediate_table.Append(input);
67: 		}
68: 	} else {
69: 		gstate.intermediate_table.Append(input);
70: 	}
71: 	return SinkResultType::NEED_MORE_INPUT;
72: }
73: 
74: //===--------------------------------------------------------------------===//
75: // Source
76: //===--------------------------------------------------------------------===//
77: void PhysicalRecursiveCTE::GetData(ExecutionContext &context, DataChunk &chunk, GlobalSourceState &gstate_p,
78:                                    LocalSourceState &lstate) const {
79: 	auto &gstate = (RecursiveCTEState &)*sink_state;
80: 	while (chunk.size() == 0) {
81: 		if (gstate.chunk_idx < gstate.intermediate_table.ChunkCount()) {
82: 			// scan any chunks we have collected so far
83: 			chunk.Reference(gstate.intermediate_table.GetChunk(gstate.chunk_idx));
84: 			gstate.chunk_idx++;
85: 			break;
86: 		} else {
87: 			// we have run out of chunks
88: 			// now we need to recurse
89: 			// we set up the working table as the data we gathered in this iteration of the recursion
90: 			working_table->Reset();
91: 			working_table->Merge(gstate.intermediate_table);
92: 			// and we clear the intermediate table
93: 			gstate.intermediate_table.Reset();
94: 			gstate.chunk_idx = 0;
95: 			// now we need to re-execute all of the pipelines that depend on the recursion
96: 			ExecuteRecursivePipelines(context);
97: 
98: 			// check if we obtained any results
99: 			// if not, we are done
100: 			if (gstate.intermediate_table.Count() == 0) {
101: 				break;
102: 			}
103: 		}
104: 	}
105: }
106: 
107: void PhysicalRecursiveCTE::ExecuteRecursivePipelines(ExecutionContext &context) const {
108: 	if (pipelines.empty()) {
109: 		throw InternalException("Missing pipelines for recursive CTE");
110: 	}
111: 
112: 	for (auto &pipeline : pipelines) {
113: 		auto sink = pipeline->GetSink();
114: 		if (sink != this) {
115: 			// reset the sink state for any intermediate sinks
116: 			sink->sink_state = sink->GetGlobalSinkState(context.client);
117: 		}
118: 		pipeline->Reset();
119: 	}
120: 	auto &executor = pipelines[0]->executor;
121: 
122: 	vector<shared_ptr<Event>> events;
123: 	executor.ReschedulePipelines(pipelines, events);
124: 
125: 	while (true) {
126: 		executor.WorkOnTasks();
127: 		bool finished = true;
128: 		for (auto &event : events) {
129: 			if (!event->IsFinished()) {
130: 				finished = false;
131: 				break;
132: 			}
133: 		}
134: 		if (finished) {
135: 			// all pipelines finished: done!
136: 			break;
137: 		}
138: 	}
139: }
140: 
141: } // namespace duckdb
[end of src/execution/operator/set/physical_recursive_cte.cpp]
</code>
Here is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.
<patch>
--- a/file.cpp
+++ b/file.cpp
@@ -3,35 +3,44 @@
 #include <cstdlib>
 
 int euclidean(int a, int b) {
-    while (b) {
-        int temp = b;
-        b = a % b;
-        a = temp;
+    if (b == 0) {
+        return a;
     }
-    return a;
+    return euclidean(b, a % b);
 }
 
 std::vector<std::pair<int, int>> bresenham(int x0, int y0, int x1, int y1) {
     std::vector<std::pair<int, int>> points;
     int dx = abs(x1 - x0);
     int dy = abs(y1 - y0);
+    int x = x0, y = y0;
     int sx = (x0 < x1) ? 1 : -1;
     int sy = (y0 < y1) ? 1 : -1;
-    int err = dx - dy;
 
-    while (true) {
-        points.emplace_back(x0, y0);
-        if (x0 == x1 && y0 == y1) break;
-        int e2 = 2 * err;
-        if (e2 > -dy) {
+    if (dx > dy) {
+        int err = dx / 2;
+        while (x != x1) {
+            points.emplace_back(x, y);
             err -= dy;
-            x0 += sx;
+            if (err < 0) {
+                y += sy;
+                err += dx;
+            }
+            x += sx;
         }
-        if (e2 < dx) {
-            err += dx;
-            y0 += sy;
+    } else {
+        int err = dy / 2;
+        while (y != y1) {
+            points.emplace_back(x, y);
+            err -= dx;
+            if (err < 0) {
+                x += sx;
+                err += dy;
+            }
+            y += sy;
         }
     }
 
+    points.emplace_back(x, y);
     return points;
 }

</patch>

I need you to solve the provided issue by generating a single patch file that I can apply directly to this repository using git apply.
Please respond with a single patch file in the format shown above.
Make sure to only include the patch file contents so that the contents of your output can be copied into a patch file and applied directly

Respond below: