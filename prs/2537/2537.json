{
  "repo": "duckdb/duckdb",
  "pull_number": 2537,
  "instance_id": "duckdb__duckdb-2537",
  "issue_numbers": [
    "2531",
    "2531"
  ],
  "base_commit": "5c86f109a0f1c489ee7144aa7522d3f1e58b9fb0",
  "patch": "diff --git a/src/execution/operator/set/physical_recursive_cte.cpp b/src/execution/operator/set/physical_recursive_cte.cpp\nindex 6b694b7a4dac..a49b6cfb452d 100644\n--- a/src/execution/operator/set/physical_recursive_cte.cpp\n+++ b/src/execution/operator/set/physical_recursive_cte.cpp\n@@ -124,6 +124,9 @@ void PhysicalRecursiveCTE::ExecuteRecursivePipelines(ExecutionContext &context)\n \n \twhile (true) {\n \t\texecutor.WorkOnTasks();\n+\t\tif (executor.HasError()) {\n+\t\t\texecutor.ThrowException();\n+\t\t}\n \t\tbool finished = true;\n \t\tfor (auto &event : events) {\n \t\t\tif (!event->IsFinished()) {\n",
  "test_patch": "diff --git a/test/sql/cte/recursive_cte_error.test b/test/sql/cte/recursive_cte_error.test\nnew file mode 100644\nindex 000000000000..4b7f53cd7add\n--- /dev/null\n+++ b/test/sql/cte/recursive_cte_error.test\n@@ -0,0 +1,30 @@\n+# name: test/sql/cte/recursive_cte_error.test\n+# description: Recursive CTEs with an error thrown in the pipelines\n+# group: [cte]\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+statement ok\n+CREATE TABLE tag(id int, name string, subclassof int);\n+\n+statement ok\n+INSERT INTO tag VALUES\n+  (7, 'Music',  9),\n+  (8, 'Movies', 9),\n+  (9, 'Art',    NULL)\n+;\n+\n+statement error\n+WITH RECURSIVE tag_hierarchy(id, source, path, target) AS (\n+  SELECT id, name, name AS path, NULL AS target -- this should be '' for correct behaviour\n+  FROM tag\n+  WHERE subclassof IS NULL\n+  UNION ALL\n+  SELECT tag.id, tag.name, tag_hierarchy.path || ' <- ' || tag.name, tag.name AS target\n+  FROM tag, tag_hierarchy\n+  WHERE tag.subclassof = tag_hierarchy.id\n+)\n+SELECT source, path, target\n+FROM tag_hierarchy\n+;\n",
  "problem_statement": "Incorrect WITH RECURSIVE query results in an infinite loop instead of a type error\n#### What happens?\r\nAn incorrectly formulated `WITH RECURSIVE` query results in an infinite loop when the return values mismatch in the UNION of WITH RECURSIVE (NULL vs. string).\r\n\r\n#### What should happen?\r\nPostgres displays a type error with a hint to cast the result to the correct type ([SQL Fiddle](http://sqlfiddle.com/#!15/4e6f3/2)):\r\n> ERROR: recursive query \"tag_hierarchy\" column 4 has type text in non-recursive term but type character varying overall\r\n> Hint: Cast the output of the non-recursive term to the correct type. Position: 94\r\n\r\n#### To Reproduce\r\nExample data and queries are below. To avoid the infinite loop, change `NULL AS target` to `'' AS target` or `NULL::string AS target`.\r\n\r\n```sql\r\nCREATE TABLE tag(id int, name string, subclassof int);\r\n\r\nINSERT INTO tag VALUES\r\n  (7, 'Music',  9),\r\n  (8, 'Movies', 9),\r\n  (9, 'Art',    NULL)\r\n;\r\n\r\nWITH RECURSIVE tag_hierarchy(id, source, path, target) AS (\r\n  SELECT id, name, name AS path, NULL AS target -- this should be '' for correct behaviour\r\n  FROM tag\r\n  WHERE subclassof IS NULL\r\n \r\n  UNION ALL\r\n\r\n  SELECT tag.id, tag.name, tag_hierarchy.path || ' <- ' || tag.name, tag.name AS target\r\n  FROM tag, tag_hierarchy\r\n  WHERE tag.subclassof = tag_hierarchy.id\r\n)\r\nSELECT source, path, target\r\nFROM tag_hierarchy\r\n;\r\n```\r\n\r\nThe error occurs on `master` - note that DuckDB v0.2.9 works as expected and fails with:\r\n```\r\nError: Conversion Error: Could not convert string 'Music' to INT32\r\n```\r\n\r\n#### Environment\r\n - OS: Fedora 35\r\n - DuckDB Version: `v0.3.1-dev511 c0d4ec2d7`\r\n - DuckDB Client: CLI\r\n\nIncorrect WITH RECURSIVE query results in an infinite loop instead of a type error\n#### What happens?\r\nAn incorrectly formulated `WITH RECURSIVE` query results in an infinite loop when the return values mismatch in the UNION of WITH RECURSIVE (NULL vs. string).\r\n\r\n#### What should happen?\r\nPostgres displays a type error with a hint to cast the result to the correct type ([SQL Fiddle](http://sqlfiddle.com/#!15/4e6f3/2)):\r\n> ERROR: recursive query \"tag_hierarchy\" column 4 has type text in non-recursive term but type character varying overall\r\n> Hint: Cast the output of the non-recursive term to the correct type. Position: 94\r\n\r\n#### To Reproduce\r\nExample data and queries are below. To avoid the infinite loop, change `NULL AS target` to `'' AS target` or `NULL::string AS target`.\r\n\r\n```sql\r\nCREATE TABLE tag(id int, name string, subclassof int);\r\n\r\nINSERT INTO tag VALUES\r\n  (7, 'Music',  9),\r\n  (8, 'Movies', 9),\r\n  (9, 'Art',    NULL)\r\n;\r\n\r\nWITH RECURSIVE tag_hierarchy(id, source, path, target) AS (\r\n  SELECT id, name, name AS path, NULL AS target -- this should be '' for correct behaviour\r\n  FROM tag\r\n  WHERE subclassof IS NULL\r\n \r\n  UNION ALL\r\n\r\n  SELECT tag.id, tag.name, tag_hierarchy.path || ' <- ' || tag.name, tag.name AS target\r\n  FROM tag, tag_hierarchy\r\n  WHERE tag.subclassof = tag_hierarchy.id\r\n)\r\nSELECT source, path, target\r\nFROM tag_hierarchy\r\n;\r\n```\r\n\r\nThe error occurs on `master` - note that DuckDB v0.2.9 works as expected and fails with:\r\n```\r\nError: Conversion Error: Could not convert string 'Music' to INT32\r\n```\r\n\r\n#### Environment\r\n - OS: Fedora 35\r\n - DuckDB Version: `v0.3.1-dev511 c0d4ec2d7`\r\n - DuckDB Client: CLI\r\n\n",
  "hints_text": "\n",
  "created_at": "2021-11-04T08:28:02Z"
}