{
  "repo": "duckdb/duckdb",
  "pull_number": 7018,
  "instance_id": "duckdb__duckdb-7018",
  "issue_numbers": [
    "6936"
  ],
  "base_commit": "846a32b4c8a3dae9c55b72e05e99be8cc0836ed2",
  "patch": "diff --git a/src/execution/expression_executor.cpp b/src/execution/expression_executor.cpp\nindex e98f2321e925..04932265a8cc 100644\n--- a/src/execution/expression_executor.cpp\n+++ b/src/execution/expression_executor.cpp\n@@ -56,7 +56,7 @@ Allocator &ExpressionExecutor::GetAllocator() {\n \n void ExpressionExecutor::AddExpression(const Expression &expr) {\n \texpressions.push_back(&expr);\n-\tauto state = make_uniq<ExpressionExecutorState>(expr.ToString());\n+\tauto state = make_uniq<ExpressionExecutorState>();\n \tInitialize(expr, *state);\n \tstate->Verify();\n \tstates.push_back(std::move(state));\ndiff --git a/src/execution/expression_executor_state.cpp b/src/execution/expression_executor_state.cpp\nindex f1be4482e182..401e76154d99 100644\n--- a/src/execution/expression_executor_state.cpp\n+++ b/src/execution/expression_executor_state.cpp\n@@ -31,11 +31,10 @@ ClientContext &ExpressionState::GetContext() {\n \treturn root.executor->GetContext();\n }\n \n-ExpressionState::ExpressionState(const Expression &expr, ExpressionExecutorState &root)\n-    : expr(expr), root(root), name(expr.ToString()) {\n+ExpressionState::ExpressionState(const Expression &expr, ExpressionExecutorState &root) : expr(expr), root(root) {\n }\n \n-ExpressionExecutorState::ExpressionExecutorState(const string &name) : profiler(), name(name) {\n+ExpressionExecutorState::ExpressionExecutorState() : profiler() {\n }\n \n void ExpressionState::Verify(ExpressionExecutorState &root_executor) {\ndiff --git a/src/include/duckdb/execution/expression_executor_state.hpp b/src/include/duckdb/execution/expression_executor_state.hpp\nindex 34ed4314b9b4..9e9ebe2ad2b3 100644\n--- a/src/include/duckdb/execution/expression_executor_state.hpp\n+++ b/src/include/duckdb/execution/expression_executor_state.hpp\n@@ -29,7 +29,6 @@ struct ExpressionState {\n \tvector<unique_ptr<ExpressionState>> child_states;\n \tvector<LogicalType> types;\n \tDataChunk intermediate_chunk;\n-\tstring name;\n \tCycleCounter profiler;\n \n public:\n@@ -55,12 +54,11 @@ struct ExecuteFunctionState : public ExpressionState {\n };\n \n struct ExpressionExecutorState {\n-\texplicit ExpressionExecutorState(const string &name);\n+\tExpressionExecutorState();\n \n \tunique_ptr<ExpressionState> root_state;\n \tExpressionExecutor *executor = nullptr;\n \tCycleCounter profiler;\n-\tstring name;\n \n \tvoid Verify();\n };\ndiff --git a/src/main/query_profiler.cpp b/src/main/query_profiler.cpp\nindex f3e86fa07126..4f5ca432d229 100644\n--- a/src/main/query_profiler.cpp\n+++ b/src/main/query_profiler.cpp\n@@ -690,7 +690,7 @@ ExpressionExecutorInfo::ExpressionExecutorInfo(ExpressionExecutor &executor, con\n ExpressionRootInfo::ExpressionRootInfo(ExpressionExecutorState &state, string name)\n     : current_count(state.profiler.current_count), sample_count(state.profiler.sample_count),\n       sample_tuples_count(state.profiler.sample_tuples_count), tuples_count(state.profiler.tuples_count),\n-      name(state.name), time(state.profiler.time) {\n+      name(\"expression\"), time(state.profiler.time) {\n \t// Use the name of expression-tree as extra-info\n \textra_info = std::move(name);\n \tauto expression_info_p = make_uniq<ExpressionInfo>();\n",
  "test_patch": "diff --git a/test/sql/pivot/test_pivot.test b/test/sql/pivot/test_pivot.test\nindex 2d11420788c5..63603153bc58 100644\n--- a/test/sql/pivot/test_pivot.test\n+++ b/test/sql/pivot/test_pivot.test\n@@ -14,7 +14,7 @@ CREATE TABLE Product(DaysToManufacture int, StandardCost int);\n statement ok\n INSERT INTO Product VALUES (0, 5.0885), (1, 223.88), (2, 359.1082), (4, 949.4105);\n \n-query II\n+query II rowsort\n SELECT DaysToManufacture, AVG(StandardCost) AS AverageCost\n FROM Product\n GROUP BY DaysToManufacture;\n",
  "problem_statement": "Macros and Lateral Column Alias References slower than expected\n### What happens?\r\n\r\nWhen combining extensive use of macros with lateral column alias references, performance can tank quite a bit. The same logic implemented through `LATERAL`-joins shows the expected performance on the other hand.\r\n\r\n### To Reproduce\r\n\r\n**Common Preamble:**\r\n```sql\r\nCREATE SCHEMA vec;\r\nCREATE MACRO vec.make(x, y, z) AS (x, y, z) :: struct(x real, y real, z real);\r\nCREATE MACRO vec.add(a, b) AS vec.make(a.x + b.x, a.y + b.y, a.z + b.z);\r\nCREATE MACRO vec.sub(a, b) AS vec.make(a.x - b.x, a.y - b.y, a.z - b.z);\r\nCREATE MACRO vec.mul(v, f) AS vec.make(v.x * f, v.y * f, v.z * f);\r\nCREATE MACRO vec.div(v, f) AS vec.make(v.x / f, v.y / f, v.z / f);\r\nCREATE MACRO vec.dot(a, b) AS a.x * b.x + a.y * b.y + a.z * b.z;\r\nCREATE MACRO vec.cross(a, b) AS vec.make(a.y * b.z - a.z * b.y, a.z * b.x - a.x * b.z, a.x * b.y - a.y * b.x);\r\nCREATE MACRO vec.mag(v) AS sqrt(v.x ** 2 + v.y ** 2 + v.z ** 2);\r\nCREATE MACRO vec.norm(v) AS vec.div(v, vec.mag(v));\r\n\r\n.timer on\r\n```\r\n\r\n---\r\n\r\n**Problematic Query:**\r\n```sql\r\nSELECT vec.norm(vec.add(vec.make(0,0,0), vec.make(0,0,1))) AS a,\r\n       vec.norm(vec.cross(vec.make(0,1,0), a))             AS b,\r\n       vec.add(b, b)                                       AS c;\r\n```\r\n\r\n**Result:**\r\n```\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502           a            \u2502           b            \u2502                c                 \u2502\r\n\u2502 struct(x float, y ...  \u2502 struct(x float, y ...  \u2502 struct(x float, y float, z f...  \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 {'x': 0.0, 'y': 0....  \u2502 {'x': 1.0, 'y': 0....  \u2502 {'x': 2.0, 'y': 0.0, 'z': 0.0}   \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\nRun Time (s): real 3.307 user 2.725458 sys 0.580731\r\n```\r\n\r\n---\r\n\r\n**Unproblematic Query:**\r\n```sql\r\nSELECT  a, b, vec.add(b, b) AS c\r\nFROM    (SELECT vec.norm(vec.add(vec.make(0,0,0), vec.make(0,0,1)))) AS let1(a),\r\nLATERAL (SELECT vec.norm(vec.cross(vec.make(0,1,0), a))            ) AS let2(b);\r\n```\r\n\r\n**Result:**\r\n```\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502           a            \u2502           b            \u2502                c                 \u2502\r\n\u2502 struct(x float, y ...  \u2502 struct(x float, y ...  \u2502 struct(x float, y float, z f...  \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 {'x': 0.0, 'y': 0....  \u2502 {'x': 1.0, 'y': 0....  \u2502 {'x': 2.0, 'y': 0.0, 'z': 0.0}   \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\nRun Time (s): real 0.013 user 0.011629 sys 0.001571\r\n```\r\n\r\n### OS:\r\n\r\nmac OS (aarch64)\r\n\r\n### DuckDB Version:\r\n\r\ndev (4161f39)\r\n\r\n### DuckDB Client:\r\n\r\ncli\r\n\r\n### Full Name:\r\n\r\nTim Fischer\r\n\r\n### Affiliation:\r\n\r\nDatabase Research Group T\u00fcbingen\r\n\r\n### Have you tried this on the latest `master` branch?\r\n\r\n- [X] I agree\r\n\r\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\r\n\r\n- [X] I agree\n",
  "hints_text": "Especially the planning seems to be quite a bit slower. Running `EXPLAIN` on both queries yields the following:\r\n\r\n**Problematic Query:**\r\n```\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502\r\n\u2502\u2502       Physical Plan       \u2502\u2502\r\n\u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502         PROJECTION        \u2502\r\n\u2502   \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500   \u2502\r\n\u2502{'x': 0.0, 'y': 0.0, 'z': 1\u2502\r\n\u2502            .0}            \u2502\r\n\u2502{'x': 1.0, 'y': 0.0, 'z': 0\u2502\r\n\u2502            .0}            \u2502\r\n\u2502{'x': 2.0, 'y': 0.0, 'z': 0\u2502\r\n\u2502            .0}            \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502         DUMMY_SCAN        \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n```\r\nRun Time (s): real 3.277 user 2.712688 sys 0.560248\r\n```\r\n\r\n**Unproblematic Query:**\r\n```\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502\r\n\u2502\u2502       Physical Plan       \u2502\u2502\r\n\u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502         PROJECTION        \u2502\r\n\u2502   \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500   \u2502\r\n\u2502             a             \u2502\r\n\u2502             b             \u2502\r\n\u2502             c             \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502         PROJECTION        \u2502\r\n\u2502   \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500   \u2502\r\n\u2502             a             \u2502\r\n\u2502             b             \u2502\r\n\u2502   struct_extract(b, 'x')  \u2502\r\n\u2502   struct_extract(b, 'y')  \u2502\r\n\u2502   struct_extract(b, 'z')  \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502         DELIM_JOIN        \u2502\r\n\u2502   \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500   \u2502\r\n\u2502           INNER           \u2502\r\n\u2502  a IS NOT DISTINCT FROM a \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502   \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500   \u2502              \u2502\r\n\u2502           EC: 1           \u2502              \u2502\r\n\u2502          Cost: 0          \u2502              \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518              \u2502\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502         PROJECTION        \u2502\u2502         HASH_JOIN         \u2502\r\n\u2502   \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500   \u2502\u2502   \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500   \u2502\r\n\u2502{'x': 0.0, 'y': 0.0, 'z': 1\u2502\u2502           INNER           \u2502\r\n\u2502            .0}            \u2502\u2502  a IS NOT DISTINCT FROM a \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502                           \u2502\u2502   \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500   \u2502              \u2502\r\n\u2502                           \u2502\u2502           EC: 1           \u2502              \u2502\r\n\u2502                           \u2502\u2502          Cost: 0          \u2502              \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518              \u2502\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502         DUMMY_SCAN        \u2502\u2502      COLUMN_DATA_SCAN     \u2502\u2502         PROJECTION        \u2502\r\n\u2502                           \u2502\u2502                           \u2502\u2502   \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500   \u2502\r\n\u2502                           \u2502\u2502                           \u2502\u2502 CAST(row((#0 / #1), (#2 / \u2502\r\n\u2502                           \u2502\u2502                           \u2502\u2502#1), (#3 / #1)) AS STRUCT(x\u2502\r\n\u2502                           \u2502\u2502                           \u2502\u2502  FLOAT, y FLOAT, z FLOAT))\u2502\r\n\u2502                           \u2502\u2502                           \u2502\u2502             a             \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n                                                          \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n                                                          \u2502         PROJECTION        \u2502\r\n                                                          \u2502   \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500   \u2502\r\n                                                          \u2502             #0            \u2502\r\n                                                          \u2502sqrt((((#0 ** 2.0) + (#1 **\u2502\r\n                                                          \u2502    2.0)) + (#2 ** 2.0)))  \u2502\r\n                                                          \u2502             #1            \u2502\r\n                                                          \u2502             #2            \u2502\r\n                                                          \u2502             a             \u2502\r\n                                                          \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n                                                          \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n                                                          \u2502         PROJECTION        \u2502\r\n                                                          \u2502   \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500   \u2502\r\n                                                          \u2502CAST(struct_extract(#0, 'x'\u2502\r\n                                                          \u2502        ) AS DOUBLE)       \u2502\r\n                                                          \u2502CAST(struct_extract(#0, 'y'\u2502\r\n                                                          \u2502        ) AS DOUBLE)       \u2502\r\n                                                          \u2502CAST(struct_extract(#0, 'z'\u2502\r\n                                                          \u2502        ) AS DOUBLE)       \u2502\r\n                                                          \u2502             a             \u2502\r\n                                                          \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n                                                          \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n                                                          \u2502         PROJECTION        \u2502\r\n                                                          \u2502   \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500   \u2502\r\n                                                          \u2502CAST(row(((1.0 * #0) - #1),\u2502\r\n                                                          \u2502 ((0.0 * #2) - (0.0 * #0)),\u2502\r\n                                                          \u2502    (#1 - (1.0 * #2))) AS  \u2502\r\n                                                          \u2502 STRUCT(x FLOAT, y FLOAT, z\u2502\r\n                                                          \u2502           FLOAT))         \u2502\r\n                                                          \u2502             a             \u2502\r\n                                                          \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n                                                          \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n                                                          \u2502         PROJECTION        \u2502\r\n                                                          \u2502   \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500   \u2502\r\n                                                          \u2502   struct_extract(a, 'z')  \u2502\r\n                                                          \u2502(0.0 * struct_extract(a, 'y\u2502\r\n                                                          \u2502            '))            \u2502\r\n                                                          \u2502   struct_extract(a, 'x')  \u2502\r\n                                                          \u2502             a             \u2502\r\n                                                          \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n                                                          \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n                                                          \u2502         DELIM_SCAN        \u2502\r\n                                                          \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n```\r\nRun Time (s): real 0.014 user 0.012201 sys 0.001258\r\n```\nWith `pragma profiling_mode = detailed` we get some more info about what is taking up time while planning.\r\nAll of the time seems to be going into the `ExpressionRewriter` optimizer.\nYeah, a colleague of mine produced some flame graphs for this code, and we came to the same conclusion. Though quite powerful, evaluating constant expression during plan optimization can bog down \"pre-flight\" runtime quite a bit. I believe this has nothing to do with macros or lateral column alias references; all they do in the provided example is lead to a massive expression with many duplicated subexpressions. There may be performance gains to be had when adding some dedicated handling for such cases in the expression rewriter.",
  "created_at": "2023-04-10T21:01:55Z"
}