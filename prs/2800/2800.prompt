You will be provided with a partial code base and an issue statement explaining a problem to resolve.
In your output, give nothing but the code (no markdown) so that your output can be copy pasted and run immediately with no changes

<issue>
Subquery inside IN value list error
#### What happens?
I keep posting the issues I find :)
A subquery inside an IN value list gives the error: 'Serialization Error: Cannot copy BoundSubqueryExpression' I guess this is a bug?

#### To Reproduce
`CREATE TABLE t0 (c0 TIME,c1 DOUBLE PRECISION);`
`CREATE TABLE t1 (c0 INT);`
`INSERT INTO t1 VALUES (1),(10),(7),(9),(NULL),(1),(7),(7),(0),(8),(0),(9),(NULL),(5),(3),(8),(0);`
`SELECT (FALSE) IN (TRUE, (SELECT TIME '13:35:07' FROM t1) BETWEEN t0.c0 AND t0.c0) FROM t0;`

The expected output for the SELECT query is an empty result.

#### Environment (please complete the following information):
 - OS: Linux
 - DuckDB Version: Compiled from tip of master branch.
 - DuckDB Client: DuckDB shell

#### Before Submitting

- [x] **Have you tried this on the latest `master` branch?**
* **Python**: `pip install duckdb --upgrade --pre`
* **R**: `install.packages("https://github.com/duckdb/duckdb/releases/download/master-builds/duckdb_r_src.tar.gz", repos = NULL)`
* **Other Platforms**: You can find binaries [here](https://github.com/duckdb/duckdb/releases/tag/master-builds) or compile from source.

- [x] **Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?**

Subquery inside IN value list error
#### What happens?
I keep posting the issues I find :)
A subquery inside an IN value list gives the error: 'Serialization Error: Cannot copy BoundSubqueryExpression' I guess this is a bug?

#### To Reproduce
`CREATE TABLE t0 (c0 TIME,c1 DOUBLE PRECISION);`
`CREATE TABLE t1 (c0 INT);`
`INSERT INTO t1 VALUES (1),(10),(7),(9),(NULL),(1),(7),(7),(0),(8),(0),(9),(NULL),(5),(3),(8),(0);`
`SELECT (FALSE) IN (TRUE, (SELECT TIME '13:35:07' FROM t1) BETWEEN t0.c0 AND t0.c0) FROM t0;`

The expected output for the SELECT query is an empty result.

#### Environment (please complete the following information):
 - OS: Linux
 - DuckDB Version: Compiled from tip of master branch.
 - DuckDB Client: DuckDB shell

#### Before Submitting

- [x] **Have you tried this on the latest `master` branch?**
* **Python**: `pip install duckdb --upgrade --pre`
* **R**: `install.packages("https://github.com/duckdb/duckdb/releases/download/master-builds/duckdb_r_src.tar.gz", repos = NULL)`
* **Other Platforms**: You can find binaries [here](https://github.com/duckdb/duckdb/releases/tag/master-builds) or compile from source.

- [x] **Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?**


</issue>
<code>
[start of README.md]
1: <div align="center">
2:   <img src="https://duckdb.org/images/DuckDB_Logo_dl.png" height="50">
3: </div>
4: <p>&nbsp;</p>
5: 
6: <p align="center">
7:   <a href="https://github.com/duckdb/duckdb/actions">
8:     <img src="https://github.com/cwida/duckdb/workflows/.github/workflows/main.yml/badge.svg?branch=master" alt=".github/workflows/main.yml">
9:   </a>
10:   <a href="https://www.codefactor.io/repository/github/cwida/duckdb">
11:     <img src="https://www.codefactor.io/repository/github/cwida/duckdb/badge" alt="CodeFactor"/>
12:   </a>
13:   <a href="https://app.codecov.io/gh/duckdb/duckdb">
14:     <img src="https://codecov.io/gh/duckdb/duckdb/branch/master/graph/badge.svg?token=FaxjcfFghN" alt="codecov"/>
15:   </a>
16: </p>
17: 
18: ## DuckDB
19: DuckDB is a high-performance analytical database system. It is designed to be fast, reliable and easy to use. DuckDB provides a rich SQL dialect, with support far beyond basic SQL. DuckDB supports arbitrary and nested correlated subqueries, window functions, collations, complex types (arrays, structs), and more. For more information on the goals of DuckDB, please refer to [the Why DuckDB page on our website](https://duckdb.org/docs/why_duckdb.html).
20: 
21: ## Installation
22: If you want to install and use DuckDB, please see [our website](https://www.duckdb.org) for installation and usage instructions.
23: 
24: ## Data Import
25: For CSV files and Parquet files, data import is as simple as referencing the file in the FROM clause:
26: 
27: ```sql
28: SELECT * FROM 'myfile.csv';
29: SELECT * FROM 'myfile.parquet';
30: ```
31: 
32: Refer to our [Data Import](https://duckdb.org/docs/data/overview) section for more information.
33: 
34: ## SQL Reference
35: The [website](https://duckdb.org/docs/sql/introduction) contains a reference of functions and SQL constructs available in DuckDB.
36: 
37: ## Development
38: For development, DuckDB requires [CMake](https://cmake.org), Python3 and a `C++11` compliant compiler. Run `make` in the root directory to compile the sources. For development, use `make debug` to build a non-optimized debug version. You should run `make unit` and `make allunit` to verify that your version works properly after making changes. To test performance, you can run several standard benchmarks from the root directory by executing `./build/release/benchmark/benchmark_runner`.
39: 
40: Please also refer to our [Contribution Guide](CONTRIBUTING.md).
41: 
42: 
[end of README.md]
[start of src/planner/binder/expression/bind_between_expression.cpp]
1: #include "duckdb/parser/expression/between_expression.hpp"
2: #include "duckdb/planner/expression/bound_between_expression.hpp"
3: #include "duckdb/planner/expression/bound_cast_expression.hpp"
4: #include "duckdb/planner/expression/bound_comparison_expression.hpp"
5: #include "duckdb/planner/expression/bound_conjunction_expression.hpp"
6: #include "duckdb/planner/expression_binder.hpp"
7: 
8: namespace duckdb {
9: 
10: BindResult ExpressionBinder::BindExpression(BetweenExpression &expr, idx_t depth) {
11: 	// first try to bind the children of the case expression
12: 	string error;
13: 	BindChild(expr.input, depth, error);
14: 	BindChild(expr.lower, depth, error);
15: 	BindChild(expr.upper, depth, error);
16: 	if (!error.empty()) {
17: 		return BindResult(error);
18: 	}
19: 	// the children have been successfully resolved
20: 	auto &input = (BoundExpression &)*expr.input;
21: 	auto &lower = (BoundExpression &)*expr.lower;
22: 	auto &upper = (BoundExpression &)*expr.upper;
23: 
24: 	auto input_sql_type = input.expr->return_type;
25: 	auto lower_sql_type = lower.expr->return_type;
26: 	auto upper_sql_type = upper.expr->return_type;
27: 
28: 	// cast the input types to the same type
29: 	// now obtain the result type of the input types
30: 	auto input_type = BoundComparisonExpression::BindComparison(input_sql_type, lower_sql_type);
31: 	input_type = BoundComparisonExpression::BindComparison(input_type, upper_sql_type);
32: 	// add casts (if necessary)
33: 	input.expr = BoundCastExpression::AddCastToType(move(input.expr), input_type);
34: 	lower.expr = BoundCastExpression::AddCastToType(move(lower.expr), input_type);
35: 	upper.expr = BoundCastExpression::AddCastToType(move(upper.expr), input_type);
36: 	if (input_type.id() == LogicalTypeId::VARCHAR) {
37: 		// handle collation
38: 		auto collation = StringType::GetCollation(input_type);
39: 		input.expr = PushCollation(context, move(input.expr), collation, false);
40: 		lower.expr = PushCollation(context, move(lower.expr), collation, false);
41: 		upper.expr = PushCollation(context, move(upper.expr), collation, false);
42: 	}
43: 	if (!input.expr->HasSideEffects() && !input.expr->HasParameter()) {
44: 		// the expression does not have side effects: create two comparisons
45: 		auto left_compare = make_unique<BoundComparisonExpression>(ExpressionType::COMPARE_GREATERTHANOREQUALTO,
46: 		                                                           input.expr->Copy(), move(lower.expr));
47: 		auto right_compare = make_unique<BoundComparisonExpression>(ExpressionType::COMPARE_LESSTHANOREQUALTO,
48: 		                                                            move(input.expr), move(upper.expr));
49: 		return BindResult(make_unique<BoundConjunctionExpression>(ExpressionType::CONJUNCTION_AND, move(left_compare),
50: 		                                                          move(right_compare)));
51: 	} else {
52: 		// expression has side effects: we cannot duplicate it
53: 		// create a bound_between directly
54: 		return BindResult(
55: 		    make_unique<BoundBetweenExpression>(move(input.expr), move(lower.expr), move(upper.expr), true, true));
56: 	}
57: }
58: 
59: } // namespace duckdb
[end of src/planner/binder/expression/bind_between_expression.cpp]
</code>
Here is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.
<patch>
--- a/file.cpp
+++ b/file.cpp
@@ -3,35 +3,44 @@
 #include <cstdlib>
 
 int euclidean(int a, int b) {
-    while (b) {
-        int temp = b;
-        b = a % b;
-        a = temp;
+    if (b == 0) {
+        return a;
     }
-    return a;
+    return euclidean(b, a % b);
 }
 
 std::vector<std::pair<int, int>> bresenham(int x0, int y0, int x1, int y1) {
     std::vector<std::pair<int, int>> points;
     int dx = abs(x1 - x0);
     int dy = abs(y1 - y0);
+    int x = x0, y = y0;
     int sx = (x0 < x1) ? 1 : -1;
     int sy = (y0 < y1) ? 1 : -1;
-    int err = dx - dy;
 
-    while (true) {
-        points.emplace_back(x0, y0);
-        if (x0 == x1 && y0 == y1) break;
-        int e2 = 2 * err;
-        if (e2 > -dy) {
+    if (dx > dy) {
+        int err = dx / 2;
+        while (x != x1) {
+            points.emplace_back(x, y);
             err -= dy;
-            x0 += sx;
+            if (err < 0) {
+                y += sy;
+                err += dx;
+            }
+            x += sx;
         }
-        if (e2 < dx) {
-            err += dx;
-            y0 += sy;
+    } else {
+        int err = dy / 2;
+        while (y != y1) {
+            points.emplace_back(x, y);
+            err -= dx;
+            if (err < 0) {
+                x += sx;
+                err += dy;
+            }
+            y += sy;
         }
     }
 
+    points.emplace_back(x, y);
     return points;
 }

</patch>

I need you to solve the provided issue by generating a single patch file that I can apply directly to this repository using git apply.
Please respond with a single patch file in the format shown above.
Make sure to only include the patch file contents so that the contents of your output can be copied into a patch file and applied directly

Respond below: