{
  "repo": "duckdb/duckdb",
  "pull_number": 2081,
  "instance_id": "duckdb__duckdb-2081",
  "issue_numbers": [
    "2079"
  ],
  "base_commit": "be82d667083c9ebf811f42a0611df40672712c69",
  "patch": "diff --git a/src/function/scalar/operators/arithmetic.cpp b/src/function/scalar/operators/arithmetic.cpp\nindex d342e30b1455..b795d8d90f5a 100644\n--- a/src/function/scalar/operators/arithmetic.cpp\n+++ b/src/function/scalar/operators/arithmetic.cpp\n@@ -164,6 +164,9 @@ unique_ptr<FunctionData> BindDecimalAddSubtract(ClientContext &context, ScalarFu\n \t// get the max width and scale of the input arguments\n \tuint8_t max_width = 0, max_scale = 0, max_width_over_scale = 0;\n \tfor (idx_t i = 0; i < arguments.size(); i++) {\n+\t\tif (arguments[i]->return_type.id() == LogicalTypeId::UNKNOWN) {\n+\t\t\tcontinue;\n+\t\t}\n \t\tuint8_t width, scale;\n \t\tauto can_convert = arguments[i]->return_type.GetDecimalProperties(width, scale);\n \t\tif (!can_convert) {\n@@ -173,6 +176,7 @@ unique_ptr<FunctionData> BindDecimalAddSubtract(ClientContext &context, ScalarFu\n \t\tmax_scale = MaxValue<uint8_t>(scale, max_scale);\n \t\tmax_width_over_scale = MaxValue<uint8_t>(width - scale, max_width_over_scale);\n \t}\n+\tD_ASSERT(max_width > 0);\n \t// for addition/subtraction, we add 1 to the width to ensure we don't overflow\n \tbool check_overflow = false;\n \tauto required_width = MaxValue<uint8_t>(max_scale + max_width_over_scale, max_width) + 1;\n@@ -472,6 +476,9 @@ unique_ptr<FunctionData> BindDecimalMultiply(ClientContext &context, ScalarFunct\n \tuint8_t result_width = 0, result_scale = 0;\n \tuint8_t max_width = 0;\n \tfor (idx_t i = 0; i < arguments.size(); i++) {\n+\t\tif (arguments[i]->return_type.id() == LogicalTypeId::UNKNOWN) {\n+\t\t\tcontinue;\n+\t\t}\n \t\tuint8_t width, scale;\n \t\tauto can_convert = arguments[i]->return_type.GetDecimalProperties(width, scale);\n \t\tif (!can_convert) {\n@@ -483,6 +490,7 @@ unique_ptr<FunctionData> BindDecimalMultiply(ClientContext &context, ScalarFunct\n \t\tresult_width += width;\n \t\tresult_scale += scale;\n \t}\n+\tD_ASSERT(max_width > 0);\n \tif (result_scale > Decimal::MAX_WIDTH_DECIMAL) {\n \t\tthrow OutOfRangeException(\n \t\t    \"Needed scale %d to accurately represent the multiplication result, but this is out of range of the \"\n@@ -509,7 +517,9 @@ unique_ptr<FunctionData> BindDecimalMultiply(ClientContext &context, ScalarFunct\n \t\t\tbound_function.arguments[i] = argument_type;\n \t\t} else {\n \t\t\tuint8_t width, scale;\n-\t\t\targument_type.GetDecimalProperties(width, scale);\n+\t\t\tif (!argument_type.GetDecimalProperties(width, scale)) {\n+\t\t\t\tscale = 0;\n+\t\t\t}\n \n \t\t\tbound_function.arguments[i] = LogicalType::DECIMAL(result_width, scale);\n \t\t}\n",
  "test_patch": "diff --git a/test/sql/prepared/test_issue_2079.test b/test/sql/prepared/test_issue_2079.test\nnew file mode 100644\nindex 000000000000..992e771d191e\n--- /dev/null\n+++ b/test/sql/prepared/test_issue_2079.test\n@@ -0,0 +1,30 @@\n+# name: test/sql/prepared/test_issue_2079.test\n+# description: Issue 2079: Type inference for parameterized queries\n+# group: [prepared]\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+statement ok\n+PREPARE v1 AS SELECT ? + 1.0 AS a\n+\n+query I\n+EXECUTE v1(2.0)\n+----\n+3.0\n+\n+statement ok\n+PREPARE v2 AS SELECT ? * 2.0 AS a\n+\n+query I\n+EXECUTE v2(2.0)\n+----\n+4.0\n+\n+statement ok\n+PREPARE v3 AS SELECT ? = 2.0 AS a\n+\n+query I\n+EXECUTE v3(2.0)\n+----\n+True\n",
  "problem_statement": "Type inference for parameterized queries\n**What does happen?**\r\n\r\n``` r\r\nlibrary(DBI)\r\n\r\ncon <- dbConnect(duckdb::duckdb())\r\ndbGetQuery(con, \"SELECT ? + 1.0 AS a\", params = list(2))\r\n#> Error in .local(conn, statement, ...): duckdb_prepare_R: Failed to prepare query SELECT ? + 1.0 AS a\r\n#> Error: INTERNAL Error: Could not convert type UNKNOWN to a decimal.\r\n```\r\n\r\n<sup>Created on 2021-07-30 by the [reprex package](https://reprex.tidyverse.org) (v2.0.0)</sup>\r\n\r\nContext: #1240.\r\n\r\n\r\n**What should happen?**\r\n\r\nCan we make this query work out of the box?\r\n\r\n**To Reproduce**\r\n\r\nSee reprex above.\r\n\r\n**Environment (please complete the following information):**\r\n - OS: Ubuntu 20.04\r\n - DuckDB Version: R package 0.2.6\r\n\r\n**Before submitting**\r\n- [x] Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\r\n- [x] Have you tried this on the latest `master` branch? In case you cannot compile, you may find some binaries here: https://github.com/duckdb/duckdb/releases/tag/master-builds\r\n\n",
  "hints_text": "",
  "created_at": "2021-07-30T08:17:11Z"
}