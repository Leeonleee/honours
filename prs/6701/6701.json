{
  "repo": "duckdb/duckdb",
  "pull_number": 6701,
  "instance_id": "duckdb__duckdb-6701",
  "issue_numbers": [
    "6690",
    "6690"
  ],
  "base_commit": "b35f8634bf8bb407f38a7f1ff1a750a7d4a77197",
  "patch": "diff --git a/data/csv/comma_decimal_null.csv b/data/csv/comma_decimal_null.csv\nnew file mode 100644\nindex 000000000000..ea6db5929996\n--- /dev/null\n+++ b/data/csv/comma_decimal_null.csv\n@@ -0,0 +1,9 @@\n+COD_LOCALE_PROGETTO,CUP,COD_OB_TEMATICO,OC_COD_SUBARTICOLAZ_PROGRAMMA,OC_MACROAREA,OC_COD_SLL,FINANZ_UE,FINANZ_UE_FSE,FINANZ_STATO_FSC,OC_FINANZ_STATO_PAC_NETTO,IMPEGNI,OC_IMPEGNI_GIURID_VINCOLANTI,OC_IMPEGNI_COESIONE,TOT_PAGAMENTI,OC_TOT_PAGAMENTI_BENEFICIARI,OC_TOT_PAGAMENTI_TRASFERIMENTI,COSTO_REALIZZATO,COSTO_RENDICONTABILE_UE,OC_TOT_PAGAMENTI_RENDICONTAB_UE,OC_TOT_PAGAMENTI_FSC,OC_TOT_PAGAMENTI_PAC,OC_PAGAMENTI_COESIONE,OC_DATA_INIZIO_PROGETTO,OC_DATA_FINE_PROGETTO_PREVISTA,OC_DATA_FINE_PROGETTO_EFFETTIVA,DATA_INIZIO_PREV_STUDIO_FATT,PROGRAMMATO_INDICATORE_1,REALIZZATO_INDICATORE_1\r\n+10CAPORTO-POZZUOLI 1,J86G08000450003,,1,Mezzogiorno,1517,,,\"80000000,00\",\"0,00\",\"80000000,00\",\"80000000,00\",\"80000000,00\",\"71000170,90\",\"71000170,90\",\"0,00\",\"75884160,52\",,,\"71000170,90\",\"0,00\",\"71000170,90\",20060502,20210630,,20060502,1.50,1.42\r\n+10CLCONSOLIDAMENTO1400,D54J18000600007,,5,Mezzogiorno,1803,,,\"1400000,00\",\"0,00\",,,\"0,00\",,,,\"0,00\",,,\"0,00\",\"0,00\",\"0,00\",20150928,20201231,,,300.00,\r\n+10LA13,I43B17000140005,,10,Centro-Nord,1206,,,\"424428,00\",\"0,00\",,,\"0,00\",,,,\"0,00\",,,\"0,00\",\"0,00\",\"0,00\",20180101,20230228,,,424428.00,0.00\r\n+10LA13 bis,I42J17000030005,,10,Centro-Nord,1206,,,\"525572,00\",\"0,00\",,,\"0,00\",,,,\"0,00\",,,\"0,00\",\"0,00\",\"0,00\",20180101,20230630,,,525572.00,0.00\r\n+10LOFSC_CDM_M5T2,B61E04000040003,,2,Centro-Nord,313,,,\"385000000,00\",\"0,00\",\"385000000,00\",\"385000000,00\",\"385000000,00\",\"385000000,00\",\"385000000,00\",\"0,00\",\"385000000,00\",,,\"385000000,00\",\"0,00\",\"385000000,00\",20100729,20151101,20151114,,6.70,6.70\r\n+10MAMERCAT,G71J17000090001,,5,Centro-Nord,837,,,\"577000,00\",\"0,00\",\"577000,00\",\"577000,00\",\"577000,00\",\"302612,00\",\"302612,00\",\"0,00\",\"289606,80\",,,\"289606,80\",\"0,00\",\"289606,80\",20181023,20221231,,,577000.00,289606.80\r\n+10PUITALME300//Municipality of Pogradec,B49F18000410007,,0,Estero,0,\"149920,00\",,,\"0,00\",,,\"0,00\",,,,\"0,00\",\"0,00\",\"0,00\",\"0,00\",\"0,00\",\"0,00\",20180403,20200402,,,5.00,\r\n+10PUITALME96//Ministry of Economy - Directorate for Developmen,F31I18000200007,,0,Estero,0,\"95676,55\",,,\"0,00\",\"30254,97\",\"30254,97\",\"0,00\",\"30254,97\",\"30254,97\",\"0,00\",\"30254,97\",\"0,00\",\"0,00\",\"0,00\",\"0,00\",\"0,00\",20180521,20210220,,,6.00,\r\ndiff --git a/src/execution/operator/persistent/base_csv_reader.cpp b/src/execution/operator/persistent/base_csv_reader.cpp\nindex 636308d8bdd9..bf5439a63560 100644\n--- a/src/execution/operator/persistent/base_csv_reader.cpp\n+++ b/src/execution/operator/persistent/base_csv_reader.cpp\n@@ -121,6 +121,9 @@ bool TryCastFloatingValueCommaSeparated(const string_t &value_str, const Logical\n }\n \n bool BaseCSVReader::TryCastValue(const Value &value, const LogicalType &sql_type) {\n+\tif (value.IsNull()) {\n+\t\treturn true;\n+\t}\n \tif (options.has_format[LogicalTypeId::DATE] && sql_type.id() == LogicalTypeId::DATE) {\n \t\tdate_t result;\n \t\tstring error_message;\n",
  "test_patch": "diff --git a/test/sql/copy/csv/issue_6690.test b/test/sql/copy/csv/issue_6690.test\nnew file mode 100644\nindex 000000000000..42a63b18ebfa\n--- /dev/null\n+++ b/test/sql/copy/csv/issue_6690.test\n@@ -0,0 +1,23 @@\n+# name: test/sql/copy/csv/issue_6690.test\n+# description: Issue #6690: incorrect handling of NULL values when decimal separator is defined\n+# group: [csv]\n+\n+require vector_size 512\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+statement ok\n+FROM read_csv_auto('data/csv/comma_decimal_null.csv',SEP=',',SAMPLE_SIZE=-1,header=TRUE,decimal_separator=',')\n+\n+query I\n+SELECT FINANZ_STATO_FSC FROM read_csv_auto('data/csv/comma_decimal_null.csv',SEP=',',SAMPLE_SIZE=-1,header=TRUE,decimal_separator=',')\n+----\n+80000000.0\n+1400000.0\n+424428.0\n+525572.0\n+385000000.0\n+577000.0\n+NULL\n+NULL\n",
  "problem_statement": "Wrong fields inferencing\n### What happens?\r\n\r\nHi,\r\nI have a CSV in which I have a floating number field (the decimal separator is `,`).\r\n\r\nWhen I try to convert it in parquet I have \"Invalid Input Error, because duckdb reads `80000000,00` and it expects a date string.\r\n\r\n### To Reproduce\r\n\r\nSimply run the below command, using this CSV input https://gist.githubusercontent.com/aborruso/01c663ecd4b439c9a663dc2e2c35de4a/raw/14ec04c3f45ddf1391175d34a436b4f2988e9ddb/d.csv\r\n\r\n```bash\r\necho \"COPY (SELECT * FROM read_csv_auto('d.csv',SEP=',',SAMPLE_SIZE=-1,header=TRUE,decimal_separator=',')) TO 'd.parquet' (FORMAT 'PARQUET', CODEC 'Snappy');\" |  duckdb\r\n```\r\n\r\nThe error for the field `FINANZ_STATO_FSC` is:\r\n\r\n```\r\nError: near line 1: Invalid Input Error: time field value out of range: \"80000000,00\", expected format is ([YYYY-MM-DD ]HH:MM:SS[.MS]) in column \"FINANZ_STATO_FSC\", at line 2.\r\n```\r\n\r\n### OS:\r\n\r\nDebian 11 x64\r\n\r\n### DuckDB Version:\r\n\r\nv0.7.1 b00b93f0b1\r\n\r\n### DuckDB Client:\r\n\r\ncli\r\n\r\n### Full Name:\r\n\r\nAndrea Borruso\r\n\r\n### Affiliation:\r\n\r\nonData\r\n\r\n### Have you tried this on the latest `master` branch?\r\n\r\n- [X] I agree\r\n\r\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\r\n\r\n- [X] I agree\nWrong fields inferencing\n### What happens?\r\n\r\nHi,\r\nI have a CSV in which I have a floating number field (the decimal separator is `,`).\r\n\r\nWhen I try to convert it in parquet I have \"Invalid Input Error, because duckdb reads `80000000,00` and it expects a date string.\r\n\r\n### To Reproduce\r\n\r\nSimply run the below command, using this CSV input https://gist.githubusercontent.com/aborruso/01c663ecd4b439c9a663dc2e2c35de4a/raw/14ec04c3f45ddf1391175d34a436b4f2988e9ddb/d.csv\r\n\r\n```bash\r\necho \"COPY (SELECT * FROM read_csv_auto('d.csv',SEP=',',SAMPLE_SIZE=-1,header=TRUE,decimal_separator=',')) TO 'd.parquet' (FORMAT 'PARQUET', CODEC 'Snappy');\" |  duckdb\r\n```\r\n\r\nThe error for the field `FINANZ_STATO_FSC` is:\r\n\r\n```\r\nError: near line 1: Invalid Input Error: time field value out of range: \"80000000,00\", expected format is ([YYYY-MM-DD ]HH:MM:SS[.MS]) in column \"FINANZ_STATO_FSC\", at line 2.\r\n```\r\n\r\n### OS:\r\n\r\nDebian 11 x64\r\n\r\n### DuckDB Version:\r\n\r\nv0.7.1 b00b93f0b1\r\n\r\n### DuckDB Client:\r\n\r\ncli\r\n\r\n### Full Name:\r\n\r\nAndrea Borruso\r\n\r\n### Affiliation:\r\n\r\nonData\r\n\r\n### Have you tried this on the latest `master` branch?\r\n\r\n- [X] I agree\r\n\r\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\r\n\r\n- [X] I agree\n",
  "hints_text": "Thanks for the report! We currently don't yet infer the `decimal_separator` parameter. We should indeed add support for that.\n> Thanks for the report! We currently don't yet infer the `decimal_separator` parameter. We should indeed add support for that.\r\n\r\nThank you @Mytherin, but there is something I don't understand or I probably didn't explain myself well.\r\n\r\nIn my command I set `decimal_separator=','`, so no inferencing is needed. \r\nMoreover, why if we have `80000000,00` string, duckdb returns me an error related to `[YYYY-MM-DD ]HH:MM:SS[.MS]`?\r\n\r\nI'm referring to the inferencing of this error, not to the one of decimal separator.\r\n\r\nThank you again\nYou are correct actually - this is triggering a bug due to the NULL values in the file. I will push a fix.\nThanks for the report! We currently don't yet infer the `decimal_separator` parameter. We should indeed add support for that.\n> Thanks for the report! We currently don't yet infer the `decimal_separator` parameter. We should indeed add support for that.\r\n\r\nThank you @Mytherin, but there is something I don't understand or I probably didn't explain myself well.\r\n\r\nIn my command I set `decimal_separator=','`, so no inferencing is needed. \r\nMoreover, why if we have `80000000,00` string, duckdb returns me an error related to `[YYYY-MM-DD ]HH:MM:SS[.MS]`?\r\n\r\nI'm referring to the inferencing of this error, not to the one of decimal separator.\r\n\r\nThank you again\nYou are correct actually - this is triggering a bug due to the NULL values in the file. I will push a fix.",
  "created_at": "2023-03-13T10:30:49Z"
}