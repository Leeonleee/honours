{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 2404,
  "instance_id": "dragonflydb__dragonfly-2404",
  "issue_numbers": [
    "1614"
  ],
  "base_commit": "7054fc56b113c3de5966eae8f0b71353dfcaee68",
  "patch": "diff --git a/src/server/server_family.cc b/src/server/server_family.cc\nindex 196957ce4162..9cc7851229c6 100644\n--- a/src/server/server_family.cc\n+++ b/src/server/server_family.cc\n@@ -506,6 +506,70 @@ void ClientTracking(CmdArgList args, ConnectionContext* cntx) {\n   return cntx->SendOk();\n }\n \n+void ClientKill(CmdArgList args, absl::Span<facade::Listener*> listeners, ConnectionContext* cntx) {\n+  std::function<bool(facade::Connection * conn)> evaluator;\n+\n+  if (args.size() == 1) {\n+    string_view ip_port = ArgS(args, 0);\n+    if (ip_port.find(':') != ip_port.npos) {\n+      evaluator = [ip_port](facade::Connection* conn) {\n+        return conn->RemoteEndpointStr() == ip_port;\n+      };\n+    }\n+  } else if (args.size() == 2) {\n+    ToUpper(&args[0]);\n+    string_view filter_type = ArgS(args, 0);\n+    string_view filter_value = ArgS(args, 1);\n+    if (filter_type == \"ADDR\") {\n+      evaluator = [filter_value](facade::Connection* conn) {\n+        return conn->RemoteEndpointStr() == filter_value;\n+      };\n+    } else if (filter_type == \"LADDR\") {\n+      evaluator = [filter_value](facade::Connection* conn) {\n+        return conn->LocalBindStr() == filter_value;\n+      };\n+    } else if (filter_type == \"ID\") {\n+      uint32_t id;\n+      if (absl::SimpleAtoi(filter_value, &id)) {\n+        evaluator = [id](facade::Connection* conn) { return conn->GetClientId() == id; };\n+      }\n+    }\n+    // TODO: Add support for KILL USER/TYPE/SKIPME\n+  }\n+\n+  if (!evaluator) {\n+    return cntx->SendError(kSyntaxErr);\n+  }\n+\n+  const bool is_admin_request = cntx->conn()->IsPrivileged();\n+\n+  atomic<uint32_t> killed_connections = 0;\n+  atomic<uint32_t> kill_errors = 0;\n+  auto cb = [&](unsigned thread_index, util::Connection* conn) {\n+    facade::Connection* dconn = static_cast<facade::Connection*>(conn);\n+    if (evaluator(dconn)) {\n+      if (is_admin_request || !dconn->IsPrivileged()) {\n+        dconn->ShutdownSelf();\n+        killed_connections.fetch_add(1);\n+      } else {\n+        kill_errors.fetch_add(1);\n+      }\n+    }\n+  };\n+\n+  for (auto* listener : listeners) {\n+    listener->TraverseConnections(cb);\n+  }\n+\n+  if (kill_errors.load() == 0) {\n+    return cntx->SendLong(killed_connections.load());\n+  } else {\n+    return cntx->SendError(absl::StrCat(\"Killed \", killed_connections.load(),\n+                                        \" client(s), but unable to kill \", kill_errors.load(),\n+                                        \" admin client(s).\"));\n+  }\n+}\n+\n std::string_view GetOSString() {\n   // Call uname() only once since it can be expensive. Cache the final result in a static string.\n   static string os_string = []() {\n@@ -1404,6 +1468,8 @@ void ServerFamily::Client(CmdArgList args, ConnectionContext* cntx) {\n     return ClientPauseCmd(sub_args, absl::MakeSpan(listeners_), cntx);\n   } else if (sub_cmd == \"TRACKING\") {\n     return ClientTracking(sub_args, cntx);\n+  } else if (sub_cmd == \"KILL\") {\n+    return ClientKill(sub_args, absl::MakeSpan(listeners_), cntx);\n   }\n \n   if (sub_cmd == \"SETINFO\") {\n",
  "test_patch": "diff --git a/tests/dragonfly/server_family_test.py b/tests/dragonfly/server_family_test.py\nindex e12b851e0e13..ea451d66446d 100644\n--- a/tests/dragonfly/server_family_test.py\n+++ b/tests/dragonfly/server_family_test.py\n@@ -74,15 +74,26 @@ async def test_get_databases(async_client: aioredis.Redis):\n     assert dbnum == {\"databases\": \"16\"}\n \n \n-async def test_client_list(df_factory):\n+async def test_client_kill(df_factory):\n     with df_factory.create(port=1111, admin_port=1112) as instance:\n         client = aioredis.Redis(port=instance.port)\n         admin_client = aioredis.Redis(port=instance.admin_port)\n-\n-        await client.ping()\n         await admin_client.ping()\n-        assert len(await client.execute_command(\"CLIENT LIST\")) == 2\n-        assert len(await admin_client.execute_command(\"CLIENT LIST\")) == 2\n+\n+        # This creates `client_conn` as a non-auto-reconnect client\n+        async with client.client() as client_conn:\n+            assert len(await client_conn.execute_command(\"CLIENT LIST\")) == 2\n+            assert len(await admin_client.execute_command(\"CLIENT LIST\")) == 2\n+\n+            # Can't kill admin from regular connection\n+            with pytest.raises(Exception) as e_info:\n+                await client_conn.execute_command(\"CLIENT KILL LADDR 127.0.0.1:1112\")\n+\n+            assert len(await admin_client.execute_command(\"CLIENT LIST\")) == 2\n+            await admin_client.execute_command(\"CLIENT KILL LADDR 127.0.0.1:1111\")\n+            assert len(await admin_client.execute_command(\"CLIENT LIST\")) == 1\n+            with pytest.raises(Exception) as e_info:\n+                await client_conn.ping()\n \n         await disconnect_clients(client, admin_client)\n \n",
  "problem_statement": "Add support for CLIENT KILL command\n\n",
  "hints_text": "",
  "created_at": "2024-01-11T12:51:44Z",
  "modified_files": [
    "src/server/server_family.cc"
  ],
  "modified_test_files": [
    "tests/dragonfly/server_family_test.py"
  ]
}