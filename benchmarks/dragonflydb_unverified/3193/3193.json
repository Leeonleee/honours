{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 3193,
  "instance_id": "dragonflydb__dragonfly-3193",
  "issue_numbers": [
    "3192"
  ],
  "base_commit": "5f4fb57df4c025e3cdabc625282fed3202d73a1f",
  "patch": "diff --git a/src/server/replica.cc b/src/server/replica.cc\nindex ac85a88adf05..4a5ce135f4ad 100644\n--- a/src/server/replica.cc\n+++ b/src/server/replica.cc\n@@ -38,10 +38,15 @@ ABSL_FLAG(int, master_reconnect_timeout_ms, 1000,\n           \"Timeout for re-establishing connection to a replication master\");\n ABSL_FLAG(bool, replica_partial_sync, true,\n           \"Use partial sync to reconnect when a replica connection is interrupted.\");\n-ABSL_FLAG(bool, replica_reconnect_on_master_restart, false,\n-          \"When in replica mode, and master restarts, break replication from master.\");\n+ABSL_FLAG(bool, break_replication_on_master_restart, false,\n+          \"When in replica mode, and master restarts, break replication from master to avoid \"\n+          \"flushing the replica's data.\");\n ABSL_DECLARE_FLAG(int32_t, port);\n \n+// TODO: Remove this flag on release >= 1.22\n+ABSL_FLAG(bool, replica_reconnect_on_master_restart, false,\n+          \"Deprecated - please use --break_replication_on_master_restart.\");\n+\n namespace dfly {\n \n using namespace std;\n@@ -303,7 +308,8 @@ std::error_code Replica::HandleCapaDflyResp() {\n   // If we're syncing a different replication ID, drop the saved LSNs.\n   string_view master_repl_id = ToSV(LastResponseArgs()[0].GetBuf());\n   if (master_context_.master_repl_id != master_repl_id) {\n-    if (absl::GetFlag(FLAGS_replica_reconnect_on_master_restart) &&\n+    if ((absl::GetFlag(FLAGS_replica_reconnect_on_master_restart) ||\n+         absl::GetFlag(FLAGS_break_replication_on_master_restart)) &&\n         !master_context_.master_repl_id.empty()) {\n       LOG(ERROR) << \"Encountered different master repl id (\" << master_repl_id << \" vs \"\n                  << master_context_.master_repl_id << \")\";\n",
  "test_patch": "diff --git a/tests/dragonfly/replication_test.py b/tests/dragonfly/replication_test.py\nindex c25ffdc90147..f77ef45f938f 100644\n--- a/tests/dragonfly/replication_test.py\n+++ b/tests/dragonfly/replication_test.py\n@@ -2164,7 +2164,7 @@ async def test_replica_reconnect(df_local_factory, break_conn):\n     # Connect replica to master\n     master = df_local_factory.create(proactor_threads=1)\n     replica = df_local_factory.create(\n-        proactor_threads=1, replica_reconnect_on_master_restart=break_conn\n+        proactor_threads=1, break_replication_on_master_restart=break_conn\n     )\n     df_local_factory.start_all([master, replica])\n \n",
  "problem_statement": "create new flag replica no reconnect on master restart\ndeprecate replica_reconnect_on_master_restart\r\n\n",
  "hints_text": "",
  "created_at": "2024-06-19T19:31:21Z",
  "modified_files": [
    "src/server/replica.cc"
  ],
  "modified_test_files": [
    "tests/dragonfly/replication_test.py"
  ]
}