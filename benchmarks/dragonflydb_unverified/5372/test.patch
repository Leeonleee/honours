diff --git a/src/server/dragonfly_test.cc b/src/server/dragonfly_test.cc
index 7bca1711a8f3..326aed2dd4fe 100644
--- a/src/server/dragonfly_test.cc
+++ b/src/server/dragonfly_test.cc
@@ -28,6 +28,7 @@ ABSL_DECLARE_FLAG(std::vector<std::string>, rename_command);
 ABSL_DECLARE_FLAG(bool, lua_resp2_legacy_float);
 ABSL_DECLARE_FLAG(double, eviction_memory_budget_threshold);
 ABSL_DECLARE_FLAG(std::vector<std::string>, command_alias);
+ABSL_DECLARE_FLAG(bool, latency_tracking);
 
 namespace dfly {
 
@@ -887,7 +888,8 @@ TEST_F(DflyEngineTest, CommandMetricLabels) {
 class DflyCommandAliasTest : public DflyEngineTest {
  protected:
   DflyCommandAliasTest() {
-    absl::SetFlag(&FLAGS_command_alias, {"___set=set", "___ping=ping"});
+    SetFlag(&FLAGS_command_alias, {"___set=set", "___ping=ping"});
+    SetFlag(&FLAGS_latency_tracking, true);
   }
 
   absl::FlagSaver saver_;
@@ -920,4 +922,18 @@ TEST_F(DflyCommandAliasTest, Aliasing) {
   EXPECT_THAT(metrics.cmd_stats_map, Contains(Pair("exec", Key(1))));
 }
 
+TEST_F(DflyCommandAliasTest, AliasesShareHistogramPtr) {
+  EXPECT_EQ(Run({"SET", "foo", "bar"}), "OK");
+  EXPECT_EQ(Run({"___SET", "a", "b"}), "OK");
+  EXPECT_EQ(Run({"___ping"}), "PONG");
+
+  const auto command_histograms = GetMetrics().cmd_latency_map;
+  for (const auto& key : {"set", "___set", "___ping", "ping"}) {
+    EXPECT_TRUE(command_histograms.contains(key));
+  }
+
+  EXPECT_EQ(command_histograms.at("set"), command_histograms.at("___set"));
+  EXPECT_EQ(command_histograms.at("ping"), command_histograms.at("___ping"));
+}
+
 }  // namespace dfly
diff --git a/tests/dragonfly/server_family_test.py b/tests/dragonfly/server_family_test.py
index 2d3b880d967c..73637dcd9c8a 100644
--- a/tests/dragonfly/server_family_test.py
+++ b/tests/dragonfly/server_family_test.py
@@ -221,3 +221,24 @@ def match_label_value(s: Sample, name, func):
         for sample in metrics["dragonfly_connected_clients"].samples:
             match_label_value(sample, "main", lambda v: v == 2)
             match_label_value(sample, "other", lambda v: v == 1)
+
+
+@dfly_args({"latency_tracking": True})
+async def test_latency_stats(async_client: aioredis.Redis):
+    for _ in range(100):
+        await async_client.set("foo", "bar")
+        await async_client.get("foo")
+        await async_client.get("bar")
+        await async_client.hgetall("missing")
+
+    latency_stats = await async_client.info("LATENCYSTATS")
+    for expected in {"hgetall", "set", "get"}:
+        key = f"latency_percentiles_usec_{expected}"
+        assert key in latency_stats
+        assert latency_stats[key].keys() == {"p50", "p99", "p99.9"}
+
+
+async def test_latency_stats_disabled_by_default(async_client: aioredis.Redis):
+    for _ in range(100):
+        await async_client.set("foo", "bar")
+    assert await async_client.info("LATENCYSTATS") == {}
