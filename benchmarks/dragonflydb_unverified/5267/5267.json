{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 5267,
  "instance_id": "dragonflydb__dragonfly-5267",
  "issue_numbers": [
    "4544"
  ],
  "base_commit": "7842c87b82c2bcbda6a4acd042f27569561d9af0",
  "patch": "diff --git a/src/server/rdb_load.cc b/src/server/rdb_load.cc\nindex a3444e92aeeb..75b464cfe3af 100644\n--- a/src/server/rdb_load.cc\n+++ b/src/server/rdb_load.cc\n@@ -916,7 +916,7 @@ void RdbLoaderBase::OpaqueObjLoader::HandleBlob(string_view blob) {\n   } else if (rdb_type_ == RDB_TYPE_HASH_ZIPLIST || rdb_type_ == RDB_TYPE_HASH_LISTPACK) {\n     unsigned char* lp = lpNew(blob.size());\n     switch (rdb_type_) {\n-      case RDB_TYPE_HASH_ZIPLIST:\n+      case RDB_TYPE_HASH_ZIPLIST:  // legacy format\n         if (!ziplistPairsConvertAndValidateIntegrity((const uint8_t*)blob.data(), blob.size(),\n                                                      &lp)) {\n           LOG(ERROR) << \"Zset ziplist integrity check failed.\";\n@@ -951,7 +951,7 @@ void RdbLoaderBase::OpaqueObjLoader::HandleBlob(string_view blob) {\n       pv_->InitRobj(OBJ_HASH, kEncodingListPack, lp);\n     }\n     return;\n-  } else if (rdb_type_ == RDB_TYPE_ZSET_ZIPLIST) {\n+  } else if (rdb_type_ == RDB_TYPE_ZSET_ZIPLIST) {  // legacy format\n     unsigned char* lp = lpNew(blob.size());\n     if (!ziplistPairsConvertAndValidateIntegrity((uint8_t*)blob.data(), blob.size(), &lp)) {\n       LOG(ERROR) << \"Zset ziplist integrity check failed.\";\ndiff --git a/src/server/rdb_save.cc b/src/server/rdb_save.cc\nindex 8a17dc8972c9..722fc4e40efc 100644\n--- a/src/server/rdb_save.cc\n+++ b/src/server/rdb_save.cc\n@@ -18,7 +18,6 @@ extern \"C\" {\n #include \"redis/rdb.h\"\n #include \"redis/stream.h\"\n #include \"redis/util.h\"\n-#include \"redis/ziplist.h\"\n #include \"redis/zmalloc.h\"\n #include \"redis/zset.h\"\n }\n@@ -49,15 +48,9 @@ ABSL_FLAG(dfly::CompressionMode, compression_mode, dfly::CompressionMode::MULTI_\n           \"set 2 for multi entry zstd compression on df snapshot and single entry on rdb snapshot,\"\n           \"set 3 for multi entry lz4 compression on df snapshot and single entry on rdb snapshot\");\n \n-ABSL_RETIRED_FLAG(\n-    bool, list_rdb_encode_v2, true,\n-    \"V2 rdb encoding of list uses listpack encoding format, compatible with redis 7. V1 rdb \"\n-    \"enconding of list uses ziplist encoding compatible with redis 6\");\n-\n // TODO: to retire this flag in v1.31\n-ABSL_FLAG(bool, stream_rdb_encode_v2, true,\n-          \"V2 uses format, compatible with redis 7.2 and Dragonfly v1.26+, while v1 format \"\n-          \"is compatible with redis 6\");\n+ABSL_RETIRED_FLAG(bool, stream_rdb_encode_v2, true,\n+                  \"Retired. Uses format, compatible with redis 7.2 and Dragonfly v1.26+\");\n \n namespace dfly {\n \n@@ -189,13 +182,13 @@ uint8_t RdbObjectType(const PrimeValue& pv) {\n       break;\n     case OBJ_ZSET:\n       if (compact_enc == OBJ_ENCODING_LISTPACK)\n-        return RDB_TYPE_ZSET_ZIPLIST;  // we save using the old ziplist encoding.\n+        return RDB_TYPE_ZSET_LISTPACK;\n       else if (compact_enc == OBJ_ENCODING_SKIPLIST)\n         return RDB_TYPE_ZSET_2;\n       break;\n     case OBJ_HASH:\n       if (compact_enc == kEncodingListPack)\n-        return RDB_TYPE_HASH_ZIPLIST;\n+        return RDB_TYPE_HASH_LISTPACK;\n       else if (compact_enc == kEncodingStrMap2) {\n         if (((StringMap*)pv.RObjPtr())->ExpirationUsed())\n           return RDB_TYPE_HASH_WITH_EXPIRY;  // Incompatible with Redis\n@@ -204,8 +197,7 @@ uint8_t RdbObjectType(const PrimeValue& pv) {\n       }\n       break;\n     case OBJ_STREAM:\n-      return absl::GetFlag(FLAGS_stream_rdb_encode_v2) ? RDB_TYPE_STREAM_LISTPACKS_3\n-                                                       : RDB_TYPE_STREAM_LISTPACKS;\n+      return RDB_TYPE_STREAM_LISTPACKS_3;\n     case OBJ_MODULE:\n       return RDB_TYPE_MODULE_2;\n     case OBJ_JSON:\n@@ -459,7 +451,8 @@ error_code RdbSerializer::SaveHSetObject(const PrimeValue& pv) {\n     CHECK_EQ(kEncodingListPack, pv.Encoding());\n \n     uint8_t* lp = (uint8_t*)pv.RObjPtr();\n-    RETURN_ON_ERR(SaveListPackAsZiplist(lp));\n+    size_t lp_bytes = lpBytes(lp);\n+    RETURN_ON_ERR(SaveString((uint8_t*)lp, lp_bytes));\n   }\n \n   return error_code{};\n@@ -496,9 +489,11 @@ error_code RdbSerializer::SaveZSetObject(const PrimeValue& pv) {\n       return true;\n     });\n   } else {\n-    CHECK_EQ(pv.Encoding(), unsigned(OBJ_ENCODING_LISTPACK)) << \"Unknown zset encoding\";\n+    CHECK_EQ(pv.Encoding(), unsigned(OBJ_ENCODING_LISTPACK));\n     uint8_t* lp = (uint8_t*)robj_wrapper->inner_obj();\n-    RETURN_ON_ERR(SaveListPackAsZiplist(lp));\n+    size_t lp_bytes = lpBytes(lp);\n+\n+    RETURN_ON_ERR(SaveString((uint8_t*)lp, lp_bytes));\n   }\n \n   return error_code{};\n@@ -665,36 +660,6 @@ error_code RdbSerializer::SaveBinaryDouble(double val) {\n   return WriteRaw(Bytes{buf, sizeof(buf)});\n }\n \n-error_code RdbSerializer::SaveListPackAsZiplist(uint8_t* lp) {\n-  uint8_t* lpfield = lpFirst(lp);\n-  int64_t entry_len;\n-  uint8_t* entry;\n-  uint8_t buf[32];\n-  uint8_t* zl = ziplistNew();\n-\n-  while (lpfield) {\n-    entry = lpGet(lpfield, &entry_len, buf);\n-    zl = ziplistPush(zl, entry, entry_len, ZIPLIST_TAIL);\n-    lpfield = lpNext(lp, lpfield);\n-  }\n-  size_t ziplen = ziplistBlobLen(zl);\n-  error_code ec = SaveString(string_view{reinterpret_cast<char*>(zl), ziplen});\n-  zfree(zl);\n-\n-  return ec;\n-}\n-\n-error_code RdbSerializer::SavePlainNodeAsZiplist(const quicklistNode* node) {\n-  uint8_t* zl = ziplistNew();\n-  zl = ziplistPush(zl, node->entry, node->sz, ZIPLIST_TAIL);\n-\n-  size_t ziplen = ziplistBlobLen(zl);\n-  error_code ec = SaveString(string_view{reinterpret_cast<char*>(zl), ziplen});\n-  zfree(zl);\n-\n-  return ec;\n-}\n-\n error_code RdbSerializer::SaveStreamPEL(rax* pel, bool nacks) {\n   /* Number of entries in the PEL. */\n \ndiff --git a/src/server/rdb_save.h b/src/server/rdb_save.h\nindex 3601c69ff3cf..749d527aeb6e 100644\n--- a/src/server/rdb_save.h\n+++ b/src/server/rdb_save.h\n@@ -255,10 +255,8 @@ class RdbSerializer : public SerializerBase {\n \n   std::error_code SaveLongLongAsString(int64_t value);\n   std::error_code SaveBinaryDouble(double val);\n-  std::error_code SaveListPackAsZiplist(uint8_t* lp);\n   std::error_code SaveStreamPEL(rax* pel, bool nacks);\n   std::error_code SaveStreamConsumers(bool save_active, streamCG* cg);\n-  std::error_code SavePlainNodeAsZiplist(const quicklistNode* node);\n \n   // Might preempt\n   void FlushIfNeeded(FlushState flush_state);\n",
  "test_patch": "diff --git a/src/server/generic_family_test.cc b/src/server/generic_family_test.cc\nindex a46f8bf4fa81..eb7fd5837b04 100644\n--- a/src/server/generic_family_test.cc\n+++ b/src/server/generic_family_test.cc\n@@ -830,9 +830,9 @@ TEST_F(GenericFamilyTest, Dump) {\n   ASSERT_EQ(RDB_SER_VERSION, 9);\n   uint8_t EXPECTED_STRING_DUMP[13] = {0x00, 0xc0, 0x13, 0x09, 0x00, 0x23, 0x13,\n                                       0x6f, 0x4d, 0x68, 0xf6, 0x35, 0x6e};\n-  uint8_t EXPECTED_HASH_DUMP[] = {0x0d, 0x12, 0x12, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00,\n-                                  0x02, 0x00, 0x00, 0xfe, 0x13, 0x03, 0xc0, 0xd2, 0x04, 0xff,\n-                                  0x09, 0x00, 0xb1, 0x0b, 0xae, 0x6c, 0x23, 0x5d, 0x17, 0xaa};\n+  uint8_t EXPECTED_HASH_DUMP[] = {0x10, 0xc,  0xc,  0x0,  0x0, 0x0,  0x2,  0x0,\n+                                  0x13, 0x1,  0xc4, 0xd2, 0x2, 0xff, 0x9,  0x0,\n+                                  0x68, 0x4d, 0x73, 0xa4, 0xf, 0x23, 0x4f, 0xc7};\n \n   uint8_t EXPECTED_LIST_DUMP[] = {0x12, 0x01, 0x02, '\\t', '\\t', 0x00, 0x00, 0x00,\n                                   0x01, 0x00, 0x14, 0x01, 0xff, '\\t', 0x00, 0xfb,\n@@ -843,19 +843,19 @@ TEST_F(GenericFamilyTest, Dump) {\n   EXPECT_EQ(resp, \"OK\");\n   resp = Run({\"dump\", \"z\"});\n   auto dump = resp.GetBuf();\n-  CHECK_EQ(ToSV(dump), ToSV(EXPECTED_STRING_DUMP));\n+  ASSERT_EQ(ToSV(dump), ToSV(EXPECTED_STRING_DUMP));\n \n   // Check list dump\n   EXPECT_EQ(1, CheckedInt({\"rpush\", \"l\", \"20\"}));\n   resp = Run({\"dump\", \"l\"});\n   dump = resp.GetBuf();\n-  CHECK_EQ(ToSV(dump), ToSV(EXPECTED_LIST_DUMP)) << absl::CHexEscape(resp.GetString());\n+  ASSERT_EQ(ToSV(dump), ToSV(EXPECTED_LIST_DUMP)) << absl::CHexEscape(resp.GetString());\n \n   // Check for hash dump\n   EXPECT_EQ(1, CheckedInt({\"hset\", \"z2\", \"19\", \"1234\"}));\n   resp = Run({\"dump\", \"z2\"});\n   dump = resp.GetBuf();\n-  CHECK_EQ(ToSV(dump), ToSV(EXPECTED_HASH_DUMP));\n+  ASSERT_EQ(ToSV(dump), ToSV(EXPECTED_HASH_DUMP));\n \n   // Check that when running with none existing key we're getting nil\n   resp = Run({\"dump\", \"foo\"});\n@@ -882,7 +882,7 @@ TEST_F(GenericFamilyTest, Restore) {\n   // note that value for expiration is just some valid unix time stamp from the pass\n   resp = Run(\n       {\"restore\", \"exiting-key\", \"1665476212900\", ToSV(STRING_DUMP_REDIS), \"ABSTTL\", \"REPLACE\"});\n-  CHECK_EQ(resp, \"OK\");\n+  ASSERT_EQ(resp, \"OK\");\n   resp = Run({\"get\", \"exiting-key\"});\n   EXPECT_EQ(resp.type, RespExpr::NIL);  // it was deleted as a result of restore action\n \n@@ -893,7 +893,7 @@ TEST_F(GenericFamilyTest, Restore) {\n   EXPECT_EQ(\"1234\", resp);\n   resp = Run({\"dump\", \"new-key\"});\n   auto dump = resp.GetBuf();\n-  CHECK_EQ(ToSV(dump), ToSV(STRING_DUMP_REDIS));\n+  ASSERT_EQ(ToSV(dump), ToSV(STRING_DUMP_REDIS));\n \n   // test for list\n   EXPECT_EQ(1, CheckedInt({\"rpush\", \"orig-list\", \"20\"}));\ndiff --git a/src/server/stream_family_test.cc b/src/server/stream_family_test.cc\nindex f1b9c96956a3..2564d0390fd3 100644\n--- a/src/server/stream_family_test.cc\n+++ b/src/server/stream_family_test.cc\n@@ -15,8 +15,6 @@ using namespace testing;\n using namespace std;\n using namespace util;\n \n-ABSL_DECLARE_FLAG(bool, stream_rdb_encode_v2);\n-\n namespace dfly {\n \n const auto kMatchNil = ArgType(RespExpr::NIL);\n@@ -1275,7 +1273,6 @@ TEST_F(StreamFamilyTest, SeenActiveTime) {\n   EXPECT_THAT(consumers, RespElementsAre(\"name\", \"Alice\", \"seen-time\", IntArg(1250), \"active-time\",\n                                          IntArg(1100), \"pel-count\", IntArg(1), \"pending\", _));\n \n-  absl::SetFlag(&FLAGS_stream_rdb_encode_v2, true);\n   resp = Run({\"DUMP\", \"mystream\"});\n   Run({\"del\", \"mystream\"});\n   resp = Run({\"RESTORE\", \"mystream\", \"0\", resp.GetString()});\n",
  "problem_statement": "deprecate ZIPLIST encoding in rdb_save\nStarting from 7.0 redis/valkey save their \"listpack\" zsets and hsets using RDB_TYPE_ZSET_LISTPACK and RDB_TYPE_HASH_LISTPACK respectively.  Dragonfly still uses RDB_TYPE_ZSET_ZIPLIST and RDB_TYPE_HASH_ZIPLIST encodings that have been employed by Redis 6 or older.\n\nWe should start saving using listpack format and remove ziplist dependency during the save path.\n",
  "hints_text": "Hey can this be assigned to me?\nHi @yashgul .  No one is currently working on this task, you are welcome to create a PR.\nWe usually do not assign on external contributors",
  "created_at": "2025-06-10T12:36:24Z",
  "modified_files": [
    "src/server/rdb_load.cc",
    "src/server/rdb_save.cc",
    "src/server/rdb_save.h"
  ],
  "modified_test_files": [
    "src/server/generic_family_test.cc",
    "src/server/stream_family_test.cc"
  ]
}