diff --git a/src/server/tiering/disk_storage_test.cc b/src/server/tiering/disk_storage_test.cc
index 7fd2ca9d8bc4..89dd39f022ee 100644
--- a/src/server/tiering/disk_storage_test.cc
+++ b/src/server/tiering/disk_storage_test.cc
@@ -37,7 +37,7 @@ struct DiskStorageTest : public PoolTestBase {
   void Stash(size_t index, string value) {
     pending_ops_++;
     auto buf = make_shared<string>(value);
-    storage_->Stash(io::Buffer(*buf), {}, [this, index, buf](io::Result<DiskSegment> segment) {
+    storage_->Stash(io::Buffer(*buf), [this, index, buf](io::Result<DiskSegment> segment) {
       EXPECT_TRUE(segment);
       EXPECT_GT(segment->length, 0u);
       segments_[index] = *segment;
diff --git a/src/server/tiering/op_manager_test.cc b/src/server/tiering/op_manager_test.cc
index dc3f00d50fe9..7299fc79e7d4 100644
--- a/src/server/tiering/op_manager_test.cc
+++ b/src/server/tiering/op_manager_test.cc
@@ -79,9 +79,9 @@ TEST_F(OpManagerTest, SimpleStashesWithReads) {
     Open();
 
     for (unsigned i = 0; i < 100; i++) {
-      EXPECT_FALSE(Stash(i, absl::StrCat("VALUE", i, "cancelled"), {}));
-      EXPECT_FALSE(Stash(i, absl::StrCat("VALUE", i, "cancelled"), {}));
-      EXPECT_FALSE(Stash(i, absl::StrCat("VALUE", i, "real"), {}));
+      EXPECT_FALSE(Stash(i, absl::StrCat("VALUE", i, "cancelled")));
+      EXPECT_FALSE(Stash(i, absl::StrCat("VALUE", i, "cancelled")));
+      EXPECT_FALSE(Stash(i, absl::StrCat("VALUE", i, "real")));
     }
 
     EXPECT_EQ(GetStats().pending_stash_cnt, 100);
@@ -106,7 +106,7 @@ TEST_F(OpManagerTest, DeleteAfterReads) {
   pp_->at(0)->Await([this] {
     Open();
 
-    EXPECT_FALSE(Stash(0u, absl::StrCat("DATA"), {}));
+    EXPECT_FALSE(Stash(0u, absl::StrCat("DATA")));
     while (stashed_.empty())
       util::ThisFiber::SleepFor(1ms);
 
@@ -135,7 +135,7 @@ TEST_F(OpManagerTest, ReadSamePageDifferentOffsets) {
       numbers += number;
     }
 
-    EXPECT_FALSE(Stash(0u, numbers, {}));
+    EXPECT_FALSE(Stash(0u, numbers));
     while (stashed_.empty())
       util::ThisFiber::SleepFor(1ms);
 
@@ -157,7 +157,7 @@ TEST_F(OpManagerTest, Modify) {
   pp_->at(0)->Await([this] {
     Open();
 
-    Stash(0u, "D", {});
+    Stash(0u, "D");
     while (stashed_.empty())
       util::ThisFiber::SleepFor(1ms);
 
diff --git a/src/server/tiering/small_bins_test.cc b/src/server/tiering/small_bins_test.cc
index 037e4180b1c1..e1f3c051e907 100644
--- a/src/server/tiering/small_bins_test.cc
+++ b/src/server/tiering/small_bins_test.cc
@@ -30,7 +30,7 @@ TEST_F(SmallBinsTest, SimpleStashRead) {
   // Fill single bin
   std::optional<SmallBins::FilledBin> bin;
   for (unsigned i = 0; !bin; i++)
-    bin = bins_.Stash(0, absl::StrCat("k", i), absl::StrCat("v", i), {});
+    bin = bins_.Stash(0, absl::StrCat("k", i), absl::StrCat("v", i));
 
   // Verify cut locations point to correct values
   auto segments = bins_.ReportStashed(bin->first, DiskSegment{0, 4_KB});
@@ -47,7 +47,7 @@ TEST_F(SmallBinsTest, SimpleDeleteAbort) {
   std::optional<SmallBins::FilledBin> bin;
   unsigned i = 0;
   for (; !bin; i++)
-    bin = bins_.Stash(0, absl::StrCat("k", i), absl::StrCat("v", i), {});
+    bin = bins_.Stash(0, absl::StrCat("k", i), absl::StrCat("v", i));
 
   // Delete all even values
   for (unsigned j = 0; j <= i; j += 2)
@@ -69,7 +69,7 @@ TEST_F(SmallBinsTest, PartialStashDelete) {
   std::optional<SmallBins::FilledBin> bin;
   unsigned i = 0;
   for (; !bin; i++)
-    bin = bins_.Stash(0, absl::StrCat("k", i), absl::StrCat("v", i), {});
+    bin = bins_.Stash(0, absl::StrCat("k", i), absl::StrCat("v", i));
 
   // Delete all even values
   for (unsigned j = 0; j <= i; j += 2)
@@ -103,7 +103,7 @@ TEST_F(SmallBinsTest, PartialStashDelete) {
 TEST_F(SmallBinsTest, UpdateStatsAfterDelete) {
   // caused https://github.com/dragonflydb/dragonfly/issues/3240
   for (unsigned i = 0; i < 10; i++) {
-    auto spilled_bin = bins_.Stash(0, absl::StrCat("k", i), SmallString(128), {});
+    auto spilled_bin = bins_.Stash(0, absl::StrCat("k", i), SmallString(128));
     ASSERT_FALSE(spilled_bin);
   }
 
