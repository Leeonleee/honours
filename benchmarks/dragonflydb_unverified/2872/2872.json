{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 2872,
  "instance_id": "dragonflydb__dragonfly-2872",
  "issue_numbers": [
    "2871"
  ],
  "base_commit": "5b6bf1fa963d89e07c749bcefdab767303e234ac",
  "patch": "diff --git a/src/server/json_family.cc b/src/server/json_family.cc\nindex 8626dc2129fe..85ba048fa9d5 100644\n--- a/src/server/json_family.cc\n+++ b/src/server/json_family.cc\n@@ -1715,7 +1715,10 @@ void JsonFamily::StrAppend(CmdArgList args, ConnectionContext* cntx) {\n \n void JsonFamily::ObjKeys(CmdArgList args, ConnectionContext* cntx) {\n   string_view key = ArgS(args, 0);\n-  string_view path = ArgS(args, 1);\n+  string_view path = \"$\";\n+  if (args.size() == 2) {\n+    path = ArgS(args, 1);\n+  }\n \n   JsonPathV2 expression = PARSE_PATHV2(path);\n \n@@ -2011,7 +2014,7 @@ void JsonFamily::Register(CommandRegistry* registry) {\n   *registry << CI{\"JSON.DEL\", CO::WRITE, -2, 1, 1, acl::JSON}.HFUNC(Del);\n   *registry << CI{\"JSON.FORGET\", CO::WRITE, -2, 1, 1, acl::JSON}.HFUNC(\n       Del);  // An alias of JSON.DEL.\n-  *registry << CI{\"JSON.OBJKEYS\", CO::READONLY | CO::FAST, 3, 1, 1, acl::JSON}.HFUNC(ObjKeys);\n+  *registry << CI{\"JSON.OBJKEYS\", CO::READONLY | CO::FAST, -2, 1, 1, acl::JSON}.HFUNC(ObjKeys);\n   *registry << CI{\"JSON.STRAPPEND\", CO::WRITE | CO::DENYOOM | CO::FAST, -4, 1, 1, acl::JSON}.HFUNC(\n       StrAppend);\n   *registry << CI{\"JSON.CLEAR\", CO::WRITE | CO::FAST, 3, 1, 1, acl::JSON}.HFUNC(Clear);\n",
  "test_patch": "diff --git a/src/server/json_family_test.cc b/src/server/json_family_test.cc\nindex 6cf5606950f4..c0560debc382 100644\n--- a/src/server/json_family_test.cc\n+++ b/src/server/json_family_test.cc\n@@ -581,12 +581,21 @@ TEST_F(JsonFamilyTest, ObjKeys) {\n   auto resp = Run({\"JSON.SET\", \"json\", \".\", json});\n   ASSERT_THAT(resp, \"OK\");\n \n+  resp = Run({\"JSON.OBJKEYS\", \"json\"});\n+  EXPECT_THAT(resp.GetVec(), ElementsAre(\"a\", \"b\", \"c\", \"d\", \"e\"));\n+\n   resp = Run({\"JSON.OBJKEYS\", \"json\", \"$.a\"});\n   EXPECT_THAT(resp, ArgType(RespExpr::NIL_ARRAY));\n \n   resp = Run({\"JSON.OBJKEYS\", \"json\", \"$.b\"});\n   EXPECT_THAT(resp.GetVec(), ElementsAre(\"a\"));\n \n+  resp = Run({\"JSON.OBJKEYS\", \"json\", \".b\"});\n+  EXPECT_THAT(resp.GetVec(), ElementsAre(\"a\"));\n+\n+  resp = Run({\"JSON.OBJKEYS\", \"json\", \"b\"});\n+  EXPECT_THAT(resp.GetVec(), ElementsAre(\"a\"));\n+\n   resp = Run({\"JSON.OBJKEYS\", \"json\", \"$.*\"});\n   ASSERT_THAT(resp, ArrLen(5));\n   const auto& arr = resp.GetVec();\n",
  "problem_statement": "JSON.OBJKEYS requires 2 arguments\nThe spec https://www.dragonflydb.io/docs/command-reference/json/json.objkeys\r\n\r\nsays the `path` argument is optional, but it is currently required for Dragonfly.\r\nIn addition, to check that it works with `$`, `.` and without the dot as well.\r\ni.e.  json.objkeys key $.foo, json.objkeys key .foo and json.objkeys key foo should all work.\n",
  "hints_text": "",
  "created_at": "2024-04-09T13:40:37Z",
  "modified_files": [
    "src/server/json_family.cc"
  ],
  "modified_test_files": [
    "src/server/json_family_test.cc"
  ]
}