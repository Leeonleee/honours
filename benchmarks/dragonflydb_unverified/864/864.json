{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 864,
  "instance_id": "dragonflydb__dragonfly-864",
  "issue_numbers": [
    "844"
  ],
  "base_commit": "e52b0f42c3b544fa77d4be3f416722fdcb6255e3",
  "patch": "diff --git a/src/server/json_family.cc b/src/server/json_family.cc\nindex a11222b0d393..1061a87a1bb5 100644\n--- a/src/server/json_family.cc\n+++ b/src/server/json_family.cc\n@@ -677,11 +677,16 @@ OpResult<vector<OptSizeT>> OpArrTrim(const OpArgs& op_args, string_view key, str\n                                      int start_index, int stop_index) {\n   vector<OptSizeT> vec;\n   auto cb = [&](const string& path, JsonType& val) {\n-    if (!val.is_array() || val.empty()) {\n+    if (!val.is_array()) {\n       vec.emplace_back(nullopt);\n       return;\n     }\n \n+    if (val.empty()) {\n+      vec.emplace_back(0);\n+      return;\n+    }\n+\n     size_t trim_start_index;\n     if (start_index < 0) {\n       trim_start_index = 0;\n@@ -689,28 +694,26 @@ OpResult<vector<OptSizeT>> OpArrTrim(const OpArgs& op_args, string_view key, str\n       trim_start_index = start_index;\n     }\n \n-    size_t trim_stop_index;\n+    size_t trim_end_index;\n     if ((size_t)stop_index >= val.size()) {\n-      trim_stop_index = val.size();\n+      trim_end_index = val.size();\n     } else {\n-      trim_stop_index = stop_index;\n+      trim_end_index = stop_index;\n     }\n \n-    if (trim_start_index >= val.size() || trim_start_index > trim_stop_index) {\n+    if (trim_start_index >= val.size() || trim_start_index > trim_end_index) {\n       val.erase(val.array_range().begin(), val.array_range().end());\n-      vec.emplace_back(val.size());\n+      vec.emplace_back(0);\n       return;\n     }\n \n-    auto it = std::next(val.array_range().begin(), trim_start_index);\n-    while (it != val.array_range().end()) {\n-      if (trim_start_index++ == trim_stop_index) {\n-        break;\n-      }\n-\n-      it = val.erase(it);\n+    auto trim_start_it = std::next(val.array_range().begin(), trim_start_index);\n+    auto trim_end_it = val.array_range().end();\n+    if (trim_end_index < val.size()) {\n+      trim_end_it = std::next(val.array_range().begin(), trim_end_index + 1);\n     }\n \n+    val = json_array<JsonType>(trim_start_it, trim_end_it);\n     vec.emplace_back(val.size());\n   };\n \n",
  "test_patch": "diff --git a/src/server/json_family_test.cc b/src/server/json_family_test.cc\nindex 9fb2734d54a8..8bbddc4a32d6 100644\n--- a/src/server/json_family_test.cc\n+++ b/src/server/json_family_test.cc\n@@ -715,10 +715,10 @@ TEST_F(JsonFamilyTest, ArrTrim) {\n \n   resp = Run({\"JSON.ARRTRIM\", \"json\", \"$[*]\", \"0\", \"1\"});\n   ASSERT_EQ(RespExpr::ARRAY, resp.type);\n-  EXPECT_THAT(resp.GetVec(), ElementsAre(ArgType(RespExpr::NIL), IntArg(0), IntArg(1), IntArg(2)));\n+  EXPECT_THAT(resp.GetVec(), ElementsAre(IntArg(0), IntArg(1), IntArg(2), IntArg(2)));\n \n   resp = Run({\"JSON.GET\", \"json\"});\n-  EXPECT_EQ(resp, R\"([[],[],[\"b\"],[\"b\",\"c\"]])\");\n+  EXPECT_EQ(resp, R\"([[],[\"a\"],[\"a\",\"b\"],[\"a\",\"b\"]])\");\n \n   json = R\"(\n     {\"a\":[], \"nested\": {\"a\": [1,4]}}\n@@ -729,10 +729,10 @@ TEST_F(JsonFamilyTest, ArrTrim) {\n \n   resp = Run({\"JSON.ARRTRIM\", \"json\", \"$..a\", \"0\", \"1\"});\n   ASSERT_EQ(RespExpr::ARRAY, resp.type);\n-  EXPECT_THAT(resp.GetVec(), ElementsAre(ArgType(RespExpr::NIL), IntArg(1)));\n+  EXPECT_THAT(resp.GetVec(), ElementsAre(IntArg(0), IntArg(2)));\n \n   resp = Run({\"JSON.GET\", \"json\"});\n-  EXPECT_EQ(resp, R\"({\"a\":[],\"nested\":{\"a\":[4]}})\");\n+  EXPECT_EQ(resp, R\"({\"a\":[],\"nested\":{\"a\":[1,4]}})\");\n \n   json = R\"(\n     {\"a\":[1,2,3,2], \"nested\": {\"a\": false}}\n@@ -743,10 +743,23 @@ TEST_F(JsonFamilyTest, ArrTrim) {\n \n   resp = Run({\"JSON.ARRTRIM\", \"json\", \"$..a\", \"1\", \"2\"});\n   ASSERT_EQ(RespExpr::ARRAY, resp.type);\n-  EXPECT_THAT(resp.GetVec(), ElementsAre(IntArg(3), ArgType(RespExpr::NIL)));\n+  EXPECT_THAT(resp.GetVec(), ElementsAre(IntArg(2), ArgType(RespExpr::NIL)));\n+\n+  resp = Run({\"JSON.GET\", \"json\"});\n+  EXPECT_EQ(resp, R\"({\"a\":[2,3],\"nested\":{\"a\":false}})\");\n+\n+  json = R\"(\n+    [1,2,3,4,5,6,7]\n+  )\";\n+\n+  resp = Run({\"JSON.SET\", \"json\", \"$\", json});\n+  ASSERT_THAT(resp, \"OK\");\n+\n+  resp = Run({\"JSON.ARRTRIM\", \"json\", \"$\", \"2\", \"3\"});\n+  EXPECT_THAT(resp, IntArg(2));\n \n   resp = Run({\"JSON.GET\", \"json\"});\n-  EXPECT_EQ(resp, R\"({\"a\":[1,3,2],\"nested\":{\"a\":false}})\");\n+  EXPECT_EQ(resp, R\"([3,4])\");\n }\n \n TEST_F(JsonFamilyTest, ArrInsert) {\n",
  "problem_statement": "JSON.ARRTRIM semantics is reversed\n**Describe the bug**\r\nJSON.ARRTRIM semantics is reversed\r\nIt trims the specified range instead of \"rim an array so that it contains only the specified inclusive range of elements\" (from redis docs)\r\n\r\n**To Reproduce**\r\n127.0.0.1:6379> JSON.SET key $ \"[1, 2, 3, 4, 5, 6, 7]\"\r\nOK\r\n127.0.0.1:6379> JSON.GET key\r\n\"[1,2,3,4,5,6,7]\"\r\n127.0.0.1:6379> JSON.ARRLEN key $ \r\n1) (integer) 7\r\n127.0.0.1:6379> JSON.ARRTRIM key $ 2 3 \r\nEXPECTED:\r\n1) (integer) 2\r\nGOT:\r\n1) (integer) 6\r\n127.0.0.1:6379> JSON.GET key\r\nEXPECTED:\r\n\"[3, 4]\"\r\nGOT:\r\n\"[1,2,4,5,6,7]\"\r\n\r\n\n",
  "hints_text": "",
  "created_at": "2023-02-21T22:15:59Z",
  "modified_files": [
    "src/server/json_family.cc"
  ],
  "modified_test_files": [
    "src/server/json_family_test.cc"
  ]
}