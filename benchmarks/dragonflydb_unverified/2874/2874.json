{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 2874,
  "instance_id": "dragonflydb__dragonfly-2874",
  "issue_numbers": [
    "2423"
  ],
  "base_commit": "ccffc14419d2e886ec37270cc3028a08b371a9ef",
  "patch": "diff --git a/src/server/string_family.cc b/src/server/string_family.cc\nindex 308d523e6bde..d8f27eb106e7 100644\n--- a/src/server/string_family.cc\n+++ b/src/server/string_family.cc\n@@ -541,7 +541,8 @@ SinkReplyBuilder::MGetResponse OpMGet(bool fetch_mcflag, bool fetch_mcver, const\n \n OpResult<optional<string>> SetCmd::Set(const SetParams& params, string_view key,\n                                        string_view value) {\n-  SetResultBuilder result_builder(params.flags & SET_GET);\n+  bool fetch_val = params.flags & SET_GET;\n+  SetResultBuilder result_builder(fetch_val);\n \n   EngineShard* shard = op_args_.shard;\n   auto& db_slice = shard->db_slice();\n@@ -550,15 +551,23 @@ OpResult<optional<string>> SetCmd::Set(const SetParams& params, string_view key,\n \n   VLOG(2) << \"Set \" << key << \"(\" << db_slice.shard_id() << \") \";\n \n+  // if SET_GET is not set then prev_val is null.\n+  DCHECK(fetch_val || params.prev_val == nullptr);\n+\n   if (params.IsConditionalSet()) {\n-    bool fetch_value = params.prev_val || (params.flags & SET_GET);\n+    // We do not always set prev_val and we use result_builder for that.\n+    bool fetch_value = params.prev_val || fetch_val;\n     DbSlice::ItAndUpdater find_res;\n     if (fetch_value) {\n       find_res = db_slice.FindAndFetchMutable(op_args_.db_cntx, key);\n     } else {\n       find_res = db_slice.FindMutable(op_args_.db_cntx, key);\n     }\n+\n     if (IsValid(find_res.it)) {\n+      if (find_res.it->second.ObjType() != OBJ_STRING) {\n+        return OpStatus::WRONG_TYPE;\n+      }\n       result_builder.CachePrevValueIfNeeded(find_res.it->second);\n     }\n \n@@ -576,6 +585,7 @@ OpResult<optional<string>> SetCmd::Set(const SetParams& params, string_view key,\n       }\n     }\n   }\n+\n   // At this point we either need to add missing entry, or we\n   // will override an existing one\n   // Trying to add a new entry.\n@@ -585,6 +595,9 @@ OpResult<optional<string>> SetCmd::Set(const SetParams& params, string_view key,\n \n   auto it = add_res.it;\n   if (!add_res.is_new) {\n+    if (fetch_val && it->second.ObjType() != OBJ_STRING) {\n+      return OpStatus::WRONG_TYPE;\n+    }\n     result_builder.CachePrevValueIfNeeded(it->second);\n     return std::move(result_builder).Return(SetExisting(params, it, add_res.exp_it, key, value));\n   }\n@@ -775,6 +788,10 @@ void StringFamily::Set(CmdArgList args, ConnectionContext* cntx) {\n \n   OpResult result{SetGeneric(cntx, sparams, key, value, true)};\n \n+  if (result == OpStatus::WRONG_TYPE) {\n+    return cntx->SendError(kWrongTypeErr);\n+  }\n+\n   if (sparams.flags & SetCmd::SET_GET) {\n     auto* rb = static_cast<RedisReplyBuilder*>(cntx->reply_builder());\n     // When SET_GET is used, the reply is not affected by whether anything was set.\n",
  "test_patch": "diff --git a/src/server/string_family_test.cc b/src/server/string_family_test.cc\nindex 10c94bacd374..1f85207d3efd 100644\n--- a/src/server/string_family_test.cc\n+++ b/src/server/string_family_test.cc\n@@ -197,6 +197,9 @@ TEST_F(StringFamilyTest, Set) {\n \n   resp = Run({\"set\", \"foo\", \"bar\", \"ex\", \"1\"});\n   ASSERT_THAT(resp, \"OK\");\n+\n+  ASSERT_THAT(Run({\"sadd\", \"s1\", \"1\"}), IntArg(1));\n+  ASSERT_THAT(Run({\"set\", \"s1\", \"2\"}), \"OK\");\n }\n \n TEST_F(StringFamilyTest, SetHugeKey) {\n@@ -777,6 +780,10 @@ TEST_F(StringFamilyTest, SetWithGetParam) {\n   EXPECT_THAT(Run({\"set\", \"key3\", \"not used\", \"xx\", \"get\"}), ArgType(RespExpr::NIL));\n   EXPECT_THAT(Run({\"set\", \"key2\", \"val3\", \"xx\", \"get\"}), \"val2\");\n   EXPECT_EQ(Run({\"get\", \"key2\"}), \"val3\");\n+\n+  EXPECT_THAT(Run({\"sadd\", \"key4\", \"1\"}), IntArg(1));\n+  EXPECT_THAT(Run({\"set\", \"key4\", \"2\", \"get\"}), ErrArg(\"wrong kind of value\"));\n+  EXPECT_THAT(Run({\"set\", \"key4\", \"2\", \"xx\", \"get\"}), ErrArg(\"wrong kind of value\"));\n }\n \n TEST_F(StringFamilyTest, SetWithHashtagsNoCluster) {\n",
  "problem_statement": "SET with flags XX GET return empty string if the stored key is not a string\nWhen running SET with flags XX GET we return empty string if the stored key is not a string\r\nexpected behaviour:\r\nGET -- Return the old string stored at key, or nil if key did not exist. An error is returned and SET aborted if the value stored at key is not a string.\r\n\r\nhow to reproduce:\r\nlpush key x\r\nSET key value XX GET\r\n\r\nreturn value: \"\" and we set value to key\r\nexpected: error WRONGTYPE Operation against a key holding the wrong kind of value\r\n\n",
  "hints_text": "",
  "created_at": "2024-04-09T15:50:35Z",
  "modified_files": [
    "src/server/string_family.cc"
  ],
  "modified_test_files": [
    "src/server/string_family_test.cc"
  ]
}