{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 3231,
  "instance_id": "dragonflydb__dragonfly-3231",
  "issue_numbers": [
    "3230"
  ],
  "base_commit": "55e445b5118fa18b518da4549031f97dc57097b6",
  "patch": "diff --git a/src/server/main_service.cc b/src/server/main_service.cc\nindex 1b38e35ed483..3b55113fdcbe 100644\n--- a/src/server/main_service.cc\n+++ b/src/server/main_service.cc\n@@ -704,7 +704,16 @@ Transaction::MultiMode DeduceExecMode(ExecEvalState state,\n   bool transactional = contains_global;\n   if (!transactional) {\n     for (const auto& scmd : exec_info.body) {\n-      transactional |= scmd.Cid()->IsTransactional();\n+      // We can only tell if eval is transactional based on they keycount\n+      if (absl::StartsWith(scmd.Cid()->name(), \"EVAL\")) {\n+        CmdArgVec arg_vec{};\n+        StoredCmd cmd = scmd;\n+        cmd.Fill(&arg_vec);\n+        auto keys = DetermineKeys(scmd.Cid(), absl::MakeSpan(arg_vec));\n+        transactional |= (keys && keys.value().num_args() > 0);\n+      } else {\n+        transactional |= scmd.Cid()->IsTransactional();\n+      }\n       contains_global |= scmd.Cid()->opt_mask() & CO::GLOBAL_TRANS;\n \n       // We can't run no-key-transactional commands in lock-ahead mode currently,\n",
  "test_patch": "diff --git a/src/server/multi_test.cc b/src/server/multi_test.cc\nindex c48633633c0d..225ae5523122 100644\n--- a/src/server/multi_test.cc\n+++ b/src/server/multi_test.cc\n@@ -1083,12 +1083,22 @@ TEST_F(MultiEvalTest, ScriptSquashingUknownCmd) {\n }\n \n TEST_F(MultiEvalTest, MultiAndEval) {\n+  if (auto mode = absl::GetFlag(FLAGS_multi_exec_mode); mode == Transaction::NON_ATOMIC) {\n+    GTEST_SKIP() << \"Skipped MultiAndEval test because multi_exec_mode is non atomic\";\n+    return;\n+  }\n+\n   // We had a bug in borrowing interpreters which caused a crash in this scenario\n   Run({\"multi\"});\n   Run({\"eval\", \"return redis.call('set', 'x', 'y1')\", \"1\", \"x\"});\n   Run({\"exec\"});\n \n   Run({\"eval\", \"return redis.call('set', 'x', 'y1')\", \"1\", \"x\"});\n+\n+  Run({\"multi\"});\n+  Run({\"eval\", \"return 'OK';\", \"0\"});\n+  auto resp = Run({\"exec\"});\n+  EXPECT_EQ(resp, \"OK\");\n }\n \n }  // namespace dfly\n",
  "problem_statement": "Crash dragonfly running multi eval exec\nhow to reproduce:\r\n127.0.0.1:6379(TX)> multi\r\nOK\r\n127.0.0.1:6379(TX)> EVAL \"return redis.call('GET', KEYS[1])\" 0 \r\nQUEUED\r\n127.0.0.1:6379(TX)> exec\r\n\r\nCrash stack:\r\n* For the available flags type dragonfly [--help | --helpfull]\r\n* Documentation can be found at: https://www.dragonflydb.io/docs\r\nI20240627 14:47:07.068773 2528994 dfly_main.cc:646] Starting dragonfly df-v1.19.0-90b5ec45651d1eae40a0a227e20dd766449d9b1b\r\nI20240627 14:47:07.069219 2528994 dfly_main.cc:690] maxmemory has not been specified. Deciding myself....\r\nI20240627 14:47:07.069237 2528994 dfly_main.cc:699] Found 15.94GiB available memory. Setting maxmemory to 12.75GiB\r\nI20240627 14:47:07.075276 2528995 uring_proactor.cc:182] IORing with 1024 entries, allocated 102720 bytes, cq_entries is 2048\r\nI20240627 14:47:07.150660 2528994 proactor_pool.cc:147] Running 16 io threads\r\nI20240627 14:47:07.155578 2528994 server_family.cc:721] Host OS: Linux 5.15.0-97-generic x86_64 with 16 threads\r\nI20240627 14:47:07.155720 2528994 snapshot_storage.cc:108] Load snapshot: Searching for snapshot in directory: \"/home/adi/dragonflydb/out\"\r\nI20240627 14:47:07.155874 2528994 server_family.cc:886] Loading /home/adi/dragonflydb/out/dump-2024-06-27T11:45:36-summary.dfs\r\nI20240627 14:47:07.156666 2528999 server_family.cc:939] Load finished, num keys read: 0\r\nI20240627 14:47:07.160377 2528996 listener_interface.cc:101] sock[36] AcceptServer - listening on port 6379\r\nF20240627 14:47:16.603746 2528995 transaction.cc:301] Check failed: absl::StartsWith(cid_->name(), \"EVAL\") EXEC\r\n*** Check failure stack trace: ***\r\n    @     0x55aa53415343  google::LogMessage::SendToLog()\r\n    @     0x55aa5340db07  google::LogMessage::Flush()\r\n    @     0x55aa5340f48f  google::LogMessageFatal::~LogMessageFatal()\r\n    @     0x55aa52cff1f5  dfly::Transaction::InitByKeys()\r\n    @     0x55aa52cff472  dfly::Transaction::StartMultiLockedAhead()\r\n    @     0x55aa52a2fda9  dfly::StartMultiExec()\r\n    @     0x55aa52a34fa3  dfly::Service::Exec()\r\n    @     0x55aa52ce005f  dfly::CommandId::Invoke()\r\n    @     0x55aa52a30067  dfly::Service::InvokeCmd()\r\n    @     0x55aa52a3409a  dfly::Service::DispatchCommand()\r\n    @     0x55aa52db1b81  facade::Connection::DispatchCommand()\r\n    @     0x55aa52db1e69  facade::Connection::ParseRedis()\r\n    @     0x55aa52db49cf  facade::Connection::IoLoop()\r\n    @     0x55aa52db4ead  facade::Connection::ConnectionFlow()\r\n    @     0x55aa52db6163  facade::Connection::HandleRequests()\r\n    @     0x55aa531ddc8d  util::ListenerInterface::RunSingleConnection()\r\n    @     0x55aa531de1f5  _ZN5boost7context6detail11fiber_entryINS1_12fiber_recordINS0_5fiberEN4util3fb219FixedStackAllocatorEZNS6_6detail15WorkerFiberImplIZZNS5_17ListenerInterface13RunAcceptLoopEvENKUlvE0_clEvEUlvE_JEEC4IS7_EESt17basic_string_viewIcSt11char_traitsIcEERKNS0_12preallocatedEOT_OSC_EUlOS4_E_EEEEvNS1_10transfer_tE\r\n    @     0x55aa5322358f  make_fcontext\r\n*** SIGABRT received at time=1719488836 on cpu 0 ***\r\nPC: @     0x7f0bd9ccd9fc  (unknown)  pthread_kill\r\n[1]    2528994 IOT instruction (core dumped)  ./dragonfly-x86_64 --alsologtostderr --port=6379\r\n\n",
  "hints_text": "",
  "created_at": "2024-06-27T12:16:59Z",
  "modified_files": [
    "src/server/main_service.cc"
  ],
  "modified_test_files": [
    "src/server/multi_test.cc"
  ]
}