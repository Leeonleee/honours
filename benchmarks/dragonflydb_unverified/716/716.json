{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 716,
  "instance_id": "dragonflydb__dragonfly-716",
  "issue_numbers": [
    "713"
  ],
  "base_commit": "bdfdc7d2558c91c3149865679fb414101ad98c7f",
  "patch": "diff --git a/src/core/interpreter.cc b/src/core/interpreter.cc\nindex 01f08ca2b2a8..0a06197e5ab2 100644\n--- a/src/core/interpreter.cc\n+++ b/src/core/interpreter.cc\n@@ -270,6 +270,13 @@ debug = nil\n   lua_setglobal(lua, \"loadfile\");\n   lua_pushnil(lua);\n   lua_setglobal(lua, \"dofile\");\n+\n+  // unpack was a global function until Lua 5.2, but was moved into the table module.\n+  // Register it globally to maintain compatibility.\n+  lua_getglobal(lua, \"table\");\n+  lua_getfield(lua, -1, \"unpack\");\n+  lua_remove(lua, -2);\n+  lua_setglobal(lua, \"unpack\");\n }\n \n // dest must have at least 41 chars.\ndiff --git a/src/server/zset_family.cc b/src/server/zset_family.cc\nindex 1869982a3c3f..45e718ca2bb9 100644\n--- a/src/server/zset_family.cc\n+++ b/src/server/zset_family.cc\n@@ -265,6 +265,12 @@ void IntervalVisitor::operator()(ZSetFamily::TopNScored sc) {\n }\n \n void IntervalVisitor::ActionRange(unsigned start, unsigned end) {\n+  if (params_.limit == 0)\n+    return;\n+  // Calculate new start and end given offset and limit.\n+  start += params_.offset;\n+  end = static_cast<uint32_t>(min(1ULL * start + params_.limit - 1, 1ULL * end));\n+\n   container_utils::IterateSortedSet(\n       zobj_,\n       [this](container_utils::ContainerEntry ce, double score) {\n@@ -1075,6 +1081,16 @@ void ZUnionFamilyInternal(CmdArgList args, bool store, ConnectionContext* cntx)\n   }\n }\n \n+bool ParseLimit(string_view offset_str, string_view limit_str, ZSetFamily::RangeParams* params) {\n+  int64_t limit_arg;\n+  if (!SimpleAtoi(offset_str, &params->offset) || !SimpleAtoi(limit_str, &limit_arg) ||\n+      limit_arg > UINT32_MAX) {\n+    return false;\n+  }\n+  params->limit = limit_arg < 0 ? UINT32_MAX : static_cast<uint32_t>(limit_arg);\n+  return true;\n+}\n+\n }  // namespace\n \n void ZSetFamily::ZAdd(CmdArgList args, ConnectionContext* cntx) {\n@@ -1376,9 +1392,7 @@ void ZSetFamily::ZRange(CmdArgList args, ConnectionContext* cntx) {\n       if (i + 3 > args.size()) {\n         return (*cntx)->SendError(kSyntaxErr);\n       }\n-      string_view os = ArgS(args, i + 1);\n-      string_view cs = ArgS(args, i + 2);\n-      if (!SimpleAtoi(os, &range_params.offset) || !SimpleAtoi(cs, &range_params.limit)) {\n+      if (!ParseLimit(ArgS(args, i + 1), ArgS(args, i + 2), &range_params)) {\n         return (*cntx)->SendError(kInvalidIntErr);\n       }\n       i += 2;\n@@ -1441,11 +1455,9 @@ void ZSetFamily::ZRangeByLexInternal(CmdArgList args, bool reverse, ConnectionCo\n     ToUpper(&args[4]);\n     if (ArgS(args, 4) != \"LIMIT\")\n       return (*cntx)->SendError(kSyntaxErr);\n-    string_view os = ArgS(args, 5);\n-    string_view cs = ArgS(args, 6);\n-    if (!SimpleAtoi(os, &offset) || !SimpleAtoi(cs, &count)) {\n+\n+    if (!ParseLimit(ArgS(args, 5), ArgS(args, 6), &range_params))\n       return (*cntx)->SendError(kInvalidIntErr);\n-    }\n   }\n   range_params.offset = offset;\n   range_params.limit = count;\n@@ -1728,12 +1740,9 @@ bool ZSetFamily::ParseRangeByScoreParams(CmdArgList args, RangeParams* params) {\n     } else if (cur_arg == \"LIMIT\") {\n       if (i + 3 > args.size())\n         return false;\n-\n-      string_view os = ArgS(args, i + 1);\n-      string_view cs = ArgS(args, i + 2);\n-\n-      if (!SimpleAtoi(os, &params->offset) || !SimpleAtoi(cs, &params->limit))\n+      if (!ParseLimit(ArgS(args, i + 1), ArgS(args, i + 2), params))\n         return false;\n+\n       i += 2;\n     } else {\n       return false;\n",
  "test_patch": "diff --git a/src/core/interpreter_test.cc b/src/core/interpreter_test.cc\nindex e2864f15dfe8..17aa2a7127f7 100644\n--- a/src/core/interpreter_test.cc\n+++ b/src/core/interpreter_test.cc\n@@ -321,4 +321,13 @@ TEST_F(InterpreterTest, Modules) {\n   EXPECT_EQ(\"str(\\x1\\x2test)\", ser_.res);\n }\n \n+// Since Lua 5.2 global functions were moved to separate namespaces.\n+// We need to register them globally to maintain 5.1 compatibility.\n+TEST_F(InterpreterTest, OutdatedGlobals) {\n+  // table.unpack is used in Laravel:\n+  // https://github.com/laravel/framework/blob/6a5c2ec92200cc485983f26b284f7e78470b885f/src/Illuminate/Queue/LuaScripts.php#L118\n+  EXPECT_TRUE(Execute(\"return unpack{1,2,3}\"));\n+  EXPECT_EQ(\"i(1)\", ser_.res);\n+}\n+\n }  // namespace dfly\ndiff --git a/src/server/zset_family_test.cc b/src/server/zset_family_test.cc\nindex 6a76d337df9f..7bd42f6fcde0 100644\n--- a/src/server/zset_family_test.cc\n+++ b/src/server/zset_family_test.cc\n@@ -86,6 +86,10 @@ TEST_F(ZSetFamilyTest, ZRangeRank) {\n   ASSERT_THAT(resp, ArrLen(2));\n   ASSERT_THAT(resp.GetVec(), ElementsAre(\"a\", \"1.1\"));\n \n+  resp = Run({\"zrangebyscore\", \"x\", \"-inf\", \"+inf\", \"LIMIT\", \"0\", \"-1\"});\n+  ASSERT_THAT(resp, ArrLen(2));\n+  ASSERT_THAT(resp.GetVec(), ElementsAre(\"a\", \"b\"));\n+\n   resp = Run({\"zrevrangebyscore\", \"x\", \"+inf\", \"-inf\", \"limit\", \"0\", \"5\"});\n   ASSERT_THAT(resp, ArgType(RespExpr::ARRAY));\n   ASSERT_THAT(resp.GetVec(), ElementsAre(\"b\", \"a\"));\n@@ -190,6 +194,10 @@ TEST_F(ZSetFamilyTest, ZRange) {\n   resp = Run({\"zrange\", \"key\", \"-\", \"d\", \"BYLEX\", \"BYSCORE\"});\n   EXPECT_THAT(resp, ErrArg(\"BYSCORE and BYLEX options are not compatible\"));\n \n+  resp = Run({\"zrange\", \"key\", \"0\", \"-1\", \"LIMIT\", \"3\", \"-1\"});\n+  ASSERT_THAT(resp, ArrLen(2));\n+  ASSERT_THAT(resp.GetVec(), ElementsAre(\"c\", \"e\"));\n+\n   Run({\"zremrangebyscore\", \"key\", \"0\", \"4\"});\n \n   Run({\n",
  "problem_statement": "Support laravel horizon\n**Describe the bug**\r\nHey! I created a simple application with [laravel horizon](https://laravel.com/docs/9.x/horizon) and try to use it with **dragonflydb** as queue-driver. Currently it's working with **redis 6.2.6** or **keydb 6.3.1**.\r\n\r\nI have 2 containers - `app_laravel` and `app_laravel_horizon`. First is simple api, with **GET** route `/api/test` that push `TestJob` job to queue and then `app_laravel_horizon` workers process this job. \r\n\r\n\r\n\r\n**To Reproduce**\r\n\r\n1. Run command `docker network create app_test_network`\r\n2. Create docker-compose.yml file with 3 containers -  `app_laravel`, `app_laravel_horizon`, and `redis_master` with password `redistestpassword`\r\n3. Run command `docker compose -f ./docker-compose.yml up` \r\n\r\n\r\n```\r\nversion: '3.8'\r\n\r\nx-sysctls-config: &sysctls-config\r\n  sysctls:\r\n    - net.core.somaxconn=65535\r\n    - kernel.shmmax=33554432\r\n    - kernel.shmall=16777216\r\n    - kernel.msgmax=65535\r\n    - kernel.msgmnb=65535\r\n\r\nx-logging-local: &logging-local\r\n  logging:\r\n    driver: local\r\n    options:\r\n      max-size: \"10m\"\r\n      max-file: 3\r\n\r\nnetworks:\r\n  app_test_network:\r\n    external:\r\n      name: app_test_network\r\n\r\nservices:\r\n  redis_master:\r\n    image: 'bitnami/redis:6.2.6'\r\n    ports:\r\n      - 6379:6379\r\n    environment:\r\n      - REDIS_REPLICATION_MODE=master\r\n      - REDIS_PASSWORD=redistestpassword\r\n    networks:\r\n      - app_test_network\r\n    deploy:\r\n      mode: replicated\r\n      replicas: 1\r\n      placement:\r\n        max_replicas_per_node: 1\r\n    <<: *sysctls-config\r\n    <<: *logging-local\r\n\r\n#  redis_master:\r\n#    image: 'docker.dragonflydb.io/dragonflydb/dragonfly'\r\n#    ports:\r\n#      - 6379:6379\r\n#    environment:\r\n#      - REDIS_REPLICATION_MODE=master\r\n#      - REDIS_PASSWORD=redistestpassword\r\n#    command:\r\n#      - \"--requirepass=redistestpassword\"\r\n#      - \"--save_schedule=:\" # save for every 1 minute\r\n#      - \"--dir=/data\"\r\n#      - \"--dbfilename=dump.rdb\"\r\n#      - \"--vmodule=main_service=2\"\r\n#    networks:\r\n#      - app_test_network\r\n#    deploy:\r\n#      mode: replicated\r\n#      replicas: 1\r\n#      placement:\r\n#        max_replicas_per_node: 1\r\n#    <<: *sysctls-config\r\n#    <<: *logging-local\r\n\r\n  app_laravel:\r\n    build:\r\n      context: src\r\n      dockerfile: Dockerfile\r\n    restart: always\r\n    image: fannyfan/laravel-redis-dragonfly:app_v1\r\n    command: [\"./init-octane.sh\"]\r\n    ports:\r\n      - 8000:8000\r\n    environment:\r\n      - HORIZON_FAST_WORKERS_COUNT=5\r\n      - HORIZON_SLOW_WORKERS_COUNT=5\r\n      - OCTANE_WORKERS_COUNT=5\r\n      - OCTANE_TASK_WORKERS_COUNT=1\r\n      - OCTANE_PORT=8000\r\n      - OCTANE_HOST=app\r\n      - REDIS_HOST=redis_master\r\n      - REDIS_PASSWORD=redistestpassword\r\n      - REDIS_PORT=6379\r\n    networks:\r\n      - app_test_network\r\n    deploy:\r\n      mode: replicated\r\n      replicas: 1\r\n      placement:\r\n        max_replicas_per_node: 1\r\n      restart_policy:\r\n        condition: on-failure\r\n        delay: 5s\r\n        max_attempts: 3\r\n        window: 30s\r\n    <<: *sysctls-config\r\n    <<: *logging-local\r\n\r\n  app_laravel_horizon:\r\n    image: fannyfan/laravel-redis-dragonfly:app_v1\r\n    command: [\"./init-horizon.sh\"]\r\n    restart: always\r\n    depends_on:\r\n      - redis_master\r\n    environment:\r\n      - HORIZON_FAST_WORKERS_COUNT=5\r\n      - HORIZON_SLOW_WORKERS_COUNT=5\r\n      - OCTANE_WORKERS_COUNT=5\r\n      - OCTANE_TASK_WORKERS_COUNT=1\r\n      - OCTANE_PORT=8000\r\n      - OCTANE_HOST=app\r\n      - REDIS_HOST=redis_master\r\n      - REDIS_PASSWORD=redistestpassword\r\n      - REDIS_PORT=6379\r\n    networks:\r\n      - app_test_network\r\n    deploy:\r\n      mode: replicated\r\n      replicas: 2\r\n      placement:\r\n        max_replicas_per_node: 1\r\n    <<: *sysctls-config\r\n    <<: *logging-local\r\n```\r\n\r\n**Expected behavior**\r\n1. Open `http://127.0.0.1:8000/horizon` and check that horizon status is **Active**.\r\n2. Open in browser `http://127.0.0.1:8000/api/test` or run command `docker run --rm --net=app_test_network ghcr.io/six-ddc/plow http://app_laravel:8000/api/test -c 1 -d 1s`\r\n3. Open `http://127.0.0.1:8000/horizon/jobs/completed` and see that jobs are completed.\r\n4. Connect to redis_master container, run `redis-cli -a redistestpassword` and `zrange laravel_horizon:completed_jobs 0 -1` to see completed jobs. \r\n5. Stop all containers, comment in docker-compose.yml **redis** and uncomment **dragonfly**. Rerun containers and repeat all previous steps. \r\n6. Using `dragonfly ` all jobs for some reasong hang up in `pending` state and never started..\r\n\r\n\r\n**Screenshots**\r\nUsing `redis`:\r\n\r\n![image](https://user-images.githubusercontent.com/32100589/213730338-8e2bd1df-5d89-4ccb-acf6-98ec9e810630.png)\r\n![image](https://user-images.githubusercontent.com/32100589/213730521-cb9a43b0-83f0-41e1-b42d-61308ebc1ec0.png)\r\n\r\nUsing `dragonflydb`:\r\n\r\n![image](https://user-images.githubusercontent.com/32100589/213731967-7ec31eaf-3d07-4e6d-b00d-9cbfb2ba6f5a.png)\r\n\r\n\r\n**Environment (please complete the following information):**\r\n- Docker  Version: 20.10.21\r\n- dragonflydb 0.14\n",
  "hints_text": "Maybe problem here (vendor/laravel/horizon/src/RedisQueue.php)\r\n\r\nmigrateExpiredJobs with redis return empty **array**, but dragonfly return **false**\r\n\r\n```\r\n    public function migrateExpiredJobs($from, $to)\r\n    {\r\n        return $this->getConnection()->eval(\r\n            LuaScripts::migrateExpiredJobs(), 3, $from, $to, $to.':notify', $this->currentTime(), $this->migrationBatchSize\r\n        );\r\n    }\r\n```\r\n`migrateExpiredJobs` method fron `LuaScripts`: \r\n```\r\n    public static function migrateExpiredJobs()\r\n    {\r\n        return <<<'LUA'\r\n-- Get all of the jobs with an expired \"score\"...\r\nlocal val = redis.call('zrangebyscore', KEYS[1], '-inf', ARGV[1], 'limit', 0, ARGV[2])\r\n\r\n-- If we have values in the array, we will remove them from the first queue\r\n-- and add them onto the destination queue in chunks of 100, which moves\r\n-- all of the appropriate jobs onto the destination queue very safely.\r\nif(next(val) ~= nil) then\r\n    redis.call('zremrangebyrank', KEYS[1], 0, #val - 1)\r\n\r\n    for i = 1, #val, 100 do\r\n        redis.call('rpush', KEYS[2], unpack(val, i, math.min(i+99, #val)))\r\n        -- Push a notification for every job that was migrated...\r\n        for j = i, math.min(i+99, #val) do\r\n            redis.call('rpush', KEYS[3], 1)\r\n        end\r\n    end\r\nend\r\n\r\nreturn val\r\nLUA;\r\n    }\r\n\r\n```\n\u0421onfirm that the error is in the return type, but perhaps somewhere else... \r\n\r\nRedis returns an `empty array`, dragonfly returns `false`. I added a condition locally in the php core of the library, if the value is false, then change it to array and it seems to work ..\nThank you for debugging this! \n@dranikpg , please take a look when you have time.",
  "created_at": "2023-01-22T13:30:13Z",
  "modified_files": [
    "src/core/interpreter.cc",
    "src/server/zset_family.cc"
  ],
  "modified_test_files": [
    "src/core/interpreter_test.cc",
    "src/server/zset_family_test.cc"
  ]
}