diff --git a/src/facade/acl_commands_def.h b/src/facade/acl_commands_def.h
index 0e0f0bf0f340..62e131fdd9a5 100644
--- a/src/facade/acl_commands_def.h
+++ b/src/facade/acl_commands_def.h
@@ -24,4 +24,10 @@ struct AclKeys {
   bool all_keys = false;
 };
 
+struct UserCredentials {
+  uint32_t acl_categories{0};
+  std::vector<uint64_t> acl_commands;
+  AclKeys keys;
+};
+
 }  // namespace dfly::acl
diff --git a/src/facade/conn_context.h b/src/facade/conn_context.h
index b58bef25339e..97d6a39e43c1 100644
--- a/src/facade/conn_context.h
+++ b/src/facade/conn_context.h
@@ -110,7 +110,6 @@ class ConnectionContext {
 
   // TODO fix inherit actual values from default
   std::string authed_username{"default"};
-  uint32_t acl_categories{dfly::acl::ALL};
   std::vector<uint64_t> acl_commands;
   // keys
   dfly::acl::AclKeys keys{{}, true};
diff --git a/src/server/acl/acl_family.cc b/src/server/acl/acl_family.cc
index 1feab44be067..62c4290db2d4 100644
--- a/src/server/acl/acl_family.cc
+++ b/src/server/acl/acl_family.cc
@@ -67,16 +67,16 @@ void AclFamily::List(CmdArgList args, ConnectionContext* cntx) {
     const std::string_view pass = user.Password();
     const std::string password = pass == "nopass" ? "nopass" : PrettyPrintSha(pass);
 
-    const std::string acl_cat_and_commands =
-        AclCatAndCommandToString(user.CatChanges(), user.CmdChanges());
-
     const std::string acl_keys = AclKeysToString(user.Keys());
     const std::string maybe_space_com = acl_keys.empty() ? "" : " ";
 
+    const std::string acl_cat_and_commands =
+        AclCatAndCommandToString(user.CatChanges(), user.CmdChanges());
+
     using namespace std::string_view_literals;
 
     absl::StrAppend(&buffer, username, " ", user.IsActive() ? "on "sv : "off "sv, password, " ",
-                    acl_cat_and_commands, maybe_space_com, acl_keys);
+                    acl_keys, maybe_space_com, acl_cat_and_commands);
 
     cntx->SendSimpleString(buffer);
   }
@@ -199,15 +199,17 @@ std::string AclFamily::RegistryToString() const {
     const std::string_view pass = user.Password();
     const std::string password =
         pass == "nopass" ? "nopass " : absl::StrCat("#", PrettyPrintSha(pass, true), " ");
-    const std::string acl_cat_and_commands =
-        AclCatAndCommandToString(user.CatChanges(), user.CmdChanges());
+
     const std::string acl_keys = AclKeysToString(user.Keys());
     const std::string maybe_space = acl_keys.empty() ? "" : " ";
 
+    const std::string acl_cat_and_commands =
+        AclCatAndCommandToString(user.CatChanges(), user.CmdChanges());
+
     using namespace std::string_view_literals;
 
     absl::StrAppend(&result, command, username, " ", user.IsActive() ? "ON "sv : "OFF "sv, password,
-                    acl_cat_and_commands, maybe_space, acl_keys, "
");
+                    acl_keys, maybe_space, acl_cat_and_commands, "
");
   }
 
   return result;
diff --git a/src/server/acl/helpers.cc b/src/server/acl/helpers.cc
index fde332539d7f..d54f4980baf8 100644
--- a/src/server/acl/helpers.cc
+++ b/src/server/acl/helpers.cc
@@ -25,12 +25,12 @@ namespace {
 std::string AclCatToString(uint32_t acl_category, User::Sign sign) {
   std::string res = sign == User::Sign::PLUS ? "+@" : "-@";
   if (acl_category == acl::ALL) {
-    absl::StrAppend(&res, "ALL");
+    absl::StrAppend(&res, "all");
     return res;
   }
 
   const auto& index = CategoryToIdx().at(acl_category);
-  absl::StrAppend(&res, REVERSE_CATEGORY_INDEX_TABLE[index]);
+  absl::StrAppend(&res, absl::AsciiStrToLower(REVERSE_CATEGORY_INDEX_TABLE[index]));
   return res;
 }
 
@@ -41,7 +41,7 @@ std::string AclCommandToString(size_t family, uint64_t mask, User::Sign sign) {
   std::string prefix = (sign == User::Sign::PLUS) ? "+" : "-";
   if (mask == ALL_COMMANDS) {
     for (const auto& cmd : rev_index[family]) {
-      absl::StrAppend(&res, prefix, cmd, " ");
+      absl::StrAppend(&res, prefix, absl::AsciiStrToLower(cmd), " ");
     }
     res.pop_back();
     return res;
@@ -53,7 +53,7 @@ std::string AclCommandToString(size_t family, uint64_t mask, User::Sign sign) {
     mask = mask >> 1;
   }
   --pos;
-  absl::StrAppend(&res, prefix, rev_index[family][pos]);
+  absl::StrAppend(&res, prefix, absl::AsciiStrToLower(rev_index[family][pos]));
   return res;
 }
 
diff --git a/src/server/acl/user_registry.cc b/src/server/acl/user_registry.cc
index 42d4525505be..54510344e86c 100644
--- a/src/server/acl/user_registry.cc
+++ b/src/server/acl/user_registry.cc
@@ -29,7 +29,7 @@ bool UserRegistry::RemoveUser(std::string_view username) {
   return registry_.erase(username);
 }
 
-UserRegistry::UserCredentials UserRegistry::GetCredentials(std::string_view username) const {
+UserCredentials UserRegistry::GetCredentials(std::string_view username) const {
   std::shared_lock<fb2::SharedMutex> lock(mu_);
   auto it = registry_.find(username);
   if (it == registry_.end()) {
diff --git a/src/server/acl/user_registry.h b/src/server/acl/user_registry.h
index 336a561d52f8..fef3fefd8622 100644
--- a/src/server/acl/user_registry.h
+++ b/src/server/acl/user_registry.h
@@ -42,12 +42,6 @@ class UserRegistry {
   // kills already existing connections from the removed user
   bool RemoveUser(std::string_view username);
 
-  struct UserCredentials {
-    uint32_t acl_categories{0};
-    std::vector<uint64_t> acl_commands;
-    AclKeys keys;
-  };
-
   // Acquires a read lock
   UserCredentials GetCredentials(std::string_view username) const;
 
diff --git a/src/server/conn_context.cc b/src/server/conn_context.cc
index 23108913436a..e521e150d922 100644
--- a/src/server/conn_context.cc
+++ b/src/server/conn_context.cc
@@ -6,6 +6,7 @@
 
 #include "base/logging.h"
 #include "core/heap_size.h"
+#include "facade/acl_commands_def.h"
 #include "server/acl/acl_commands_def.h"
 #include "server/command_registry.h"
 #include "server/engine_shard_set.h"
@@ -80,18 +81,31 @@ const CommandId* StoredCmd::Cid() const {
   return cid_;
 }
 
-ConnectionContext::ConnectionContext(::io::Sink* stream, facade::Connection* owner)
+ConnectionContext::ConnectionContext(::io::Sink* stream, facade::Connection* owner,
+                                     acl::UserCredentials cred)
     : facade::ConnectionContext(stream, owner) {
   if (owner) {
     skip_acl_validation = owner->IsPrivileged();
   }
-  acl_commands = std::vector<uint64_t>(acl::NumberOfFamilies(), acl::ALL_COMMANDS);
+
+  keys = std::move(cred.keys);
+  if (cred.acl_commands.empty()) {
+    acl_commands = std::vector<uint64_t>(acl::NumberOfFamilies(), acl::NONE_COMMANDS);
+  } else {
+    acl_commands = std::move(cred.acl_commands);
+  }
 }
 
 ConnectionContext::ConnectionContext(const ConnectionContext* owner, Transaction* tx,
                                      facade::CapturingReplyBuilder* crb)
     : facade::ConnectionContext(nullptr, nullptr), transaction{tx} {
-  acl_commands = std::vector<uint64_t>(acl::NumberOfFamilies(), acl::ALL_COMMANDS);
+  if (owner) {
+    acl_commands = owner->acl_commands;
+    keys = owner->keys;
+    skip_acl_validation = owner->skip_acl_validation;
+  } else {
+    acl_commands = std::vector<uint64_t>(acl::NumberOfFamilies(), acl::NONE_COMMANDS);
+  }
   if (tx) {  // If we have a carrier transaction, this context is used for squashing
     DCHECK(owner);
     conn_state.db_index = owner->conn_state.db_index;
diff --git a/src/server/conn_context.h b/src/server/conn_context.h
index 6d3c65857872..cfaacad50972 100644
--- a/src/server/conn_context.h
+++ b/src/server/conn_context.h
@@ -8,6 +8,7 @@
 #include <absl/container/flat_hash_set.h>
 
 #include "acl/acl_commands_def.h"
+#include "facade/acl_commands_def.h"
 #include "facade/conn_context.h"
 #include "facade/reply_capture.h"
 #include "server/common.h"
@@ -265,7 +266,7 @@ struct ConnectionState {
 
 class ConnectionContext : public facade::ConnectionContext {
  public:
-  ConnectionContext(::io::Sink* stream, facade::Connection* owner);
+  ConnectionContext(::io::Sink* stream, facade::Connection* owner, dfly::acl::UserCredentials cred);
 
   ConnectionContext(const ConnectionContext* owner, Transaction* tx,
                     facade::CapturingReplyBuilder* crb);
diff --git a/src/server/main_service.cc b/src/server/main_service.cc
index 0bafdfa7ccfa..7f0a4d92e3dc 100644
--- a/src/server/main_service.cc
+++ b/src/server/main_service.cc
@@ -1568,10 +1568,12 @@ bool RequirePrivilegedAuth() {
 
 facade::ConnectionContext* Service::CreateContext(util::FiberSocketBase* peer,
                                                   facade::Connection* owner) {
-  ConnectionContext* res = new ConnectionContext{peer, owner};
+  auto cred = user_registry_.GetCredentials("default");
+  ConnectionContext* res = new ConnectionContext{peer, owner, std::move(cred)};
 
   if (peer->IsUDS()) {
     res->req_auth = false;
+    res->skip_acl_validation = true;
   } else if (owner->IsPrivileged() && RequirePrivilegedAuth()) {
     res->req_auth = !GetPassword().empty();
   } else if (!owner->IsPrivileged()) {
diff --git a/src/server/replica.cc b/src/server/replica.cc
index 3e8b7d39562b..ac85a88adf05 100644
--- a/src/server/replica.cc
+++ b/src/server/replica.cc
@@ -557,7 +557,7 @@ error_code Replica::InitiateDflySync() {
 error_code Replica::ConsumeRedisStream() {
   base::IoBuf io_buf(16_KB);
   io::NullSink null_sink;  // we never reply back on the commands.
-  ConnectionContext conn_context{&null_sink, nullptr};
+  ConnectionContext conn_context{&null_sink, nullptr, {}};
   conn_context.is_replicating = true;
   conn_context.journal_emulated = true;
   conn_context.skip_acl_validation = true;
diff --git a/src/server/server_family.cc b/src/server/server_family.cc
index 7fc3b60e20eb..ac2a16afd730 100644
--- a/src/server/server_family.cc
+++ b/src/server/server_family.cc
@@ -1644,7 +1644,6 @@ void ServerFamily::Auth(CmdArgList args, ConnectionContext* cntx) {
     if (is_authorized) {
       cntx->authed_username = username;
       auto cred = registry->GetCredentials(username);
-      cntx->acl_categories = cred.acl_categories;
       cntx->acl_commands = cred.acl_commands;
       cntx->keys = std::move(cred.keys);
       cntx->authenticated = true;
@@ -2586,7 +2585,7 @@ void ServerFamily::ReplicaOf(CmdArgList args, ConnectionContext* cntx) {
 
 void ServerFamily::Replicate(string_view host, string_view port) {
   io::NullSink sink;
-  ConnectionContext ctxt{&sink, nullptr};
+  ConnectionContext ctxt{&sink, nullptr, {}};
   ctxt.skip_acl_validation = true;
 
   StringVec replicaof_params{string(host), string(port)};
