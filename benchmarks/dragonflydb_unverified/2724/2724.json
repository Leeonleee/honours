{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 2724,
  "instance_id": "dragonflydb__dragonfly-2724",
  "issue_numbers": [
    "2454"
  ],
  "base_commit": "12d76dd5c2f3fce5e8e121fb1d3e7f2629ff8c28",
  "patch": "diff --git a/src/server/main_service.cc b/src/server/main_service.cc\nindex f855a78a4644..9ed4840b56d3 100644\n--- a/src/server/main_service.cc\n+++ b/src/server/main_service.cc\n@@ -1187,12 +1187,12 @@ void Service::DispatchCommand(CmdArgList args, facade::ConnectionContext* cntx)\n \n   // if this is a read command, and client tracking has enabled,\n   // start tracking all the updates to the keys in this read command\n-  if ((cid->opt_mask() & CO::READONLY) && dfly_cntx->conn()->IsTrackingOn()) {\n+  if ((cid->opt_mask() & CO::READONLY) && dfly_cntx->conn()->IsTrackingOn() &&\n+      cid->IsTransactional()) {\n     auto cb = [&](Transaction* t, EngineShard* shard) {\n       auto keys = t->GetShardArgs(shard->shard_id());\n       return OpTrackKeys(t->GetOpArgs(shard), dfly_cntx, keys);\n     };\n-\n     dfly_cntx->transaction->Refurbish();\n     dfly_cntx->transaction->ScheduleSingleHopT(cb);\n   }\n",
  "test_patch": "diff --git a/src/server/server_family_test.cc b/src/server/server_family_test.cc\nindex f84659270673..88708f4faca2 100644\n--- a/src/server/server_family_test.cc\n+++ b/src/server/server_family_test.cc\n@@ -310,4 +310,10 @@ TEST_F(ServerFamilyTest, ClientTrackingSelectDB) {\n   EXPECT_EQ(GetInvalidationMessage(\"IO0\", 0).key, \"C\");\n }\n \n+TEST_F(ServerFamilyTest, ClientTrackingNonTransactionalBug) {\n+  Run({\"HELLO\", \"3\"});\n+  Run({\"CLIENT\", \"TRACKING\", \"ON\"});\n+\n+  Run({\"CLUSTER\", \"SLOTS\"});\n+}\n }  // namespace dfly\n",
  "problem_statement": "Incompatibility between DragonflyDB and redis/rueidis client\n**RESP3 support missing for rueidis DragonflyDB connection?**\r\n# Error when connecting to DragonflyDB with rueidis client\r\n\r\nWhen trying to connect to a DragonflyDB instance using the rueidis Redis client library in Go, I get the following panic:\r\n\r\n`panic: Unknown subcommand or wrong number of arguments for 'TRACKING'. Try CLIENT HELP.: ClientOption.DisableCache must be true for redis not supporting client-side caching or not supporting RESP3 [recovered] panic: Unknown subcommand or wrong number of arguments for 'TRACKING'. Try CLIENT HELP.: ClientOption.DisableCache must be true for redis not supporting client-side caching or not supporting RESP3`\r\n\r\n\r\nThis happens with the following code:\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t\"context\"\r\n\t\"fmt\"\r\n\r\n\t\"github.com/redis/rueidis\"\r\n)\r\n\r\nfunc main() {\r\n\tclient, err := rueidis.NewClient(rueidis.ClientOption{InitAddress: []string{\"127.0.0.1:6379\"}})\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\tdefer client.Close()\r\n\r\n\tctx := context.Background()\r\n\t// SET key val NX\r\n\terr = client.Do(ctx, client.B().Set().Key(\"key\").Value(\"val\").Nx().Build()).Error()\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\tres, err := client.Do(ctx, client.B().Get().Key(\"key\").Build()).ToString()\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\tfmt.Println(res)\r\n}\r\n\r\n```\r\nIt seems there may be an incompatibility between DragonflyDB and the rueidis client assumptions. Specifically the error suggests rueidis expects disabled client caching or RESP3 support.\r\n\r\nI checked the DragonflyDB docs but didn't see mention of RESP3 support or client caching handling.\r\n\r\nCould this be added to enable better compatibility with Redis clients like rueidis? Or is there another recommended approach for connecting to DragonflyDB from Go code?\r\n\r\nLet me know if any other details would be helpful in resolving this. Thanks!\r\n\r\n**Feel free to modify or improve this as needed. Hopefully it clearly explains the issue you are seeing. Let me know if you have any other questions!**\n",
  "hints_text": "Hi @thisismz, this should be a bug (we support both RESP3 and client side tracking). \r\n\r\nLet me get back to you on this one\nHi @thisismz , I run your example with go `1.21.6`. First, I am not quite sure how you are getting this output:\r\n\r\n>\r\npanic: Unknown subcommand or wrong number of arguments for 'TRACKING'. Try CLIENT HELP.: ClientOption.DisableCache must be true for redis not supporting client-side caching or not supporting RESP3 [recovered] panic: Unknown subcommand or wrong number of arguments for 'TRACKING'. Try CLIENT HELP.: ClientOption.DisableCache must be true for redis not supporting client-side caching or not supporting RESP3\r\n\r\nWhen I run it, I just get: `panic: syntax error`. \r\n\r\nHow I reproduced: `go mod init test && go get github.com/redis/rueidis && go run .` . The good thing is at least I managed to reproduce and figure out what the issue is. We recently added support for the `CLIENT TRACKING` subcommand in #2139 \r\nHowever, it appears that we only added partial support. The only tthing we accept is `CLIENT TRACKING ON/OFF`. However, `rueidis` sends `CLIENT TRACKING ON OPTIN` and dragonfly fails to parse the `OPTIN` arguments and returns with a `syntax error`. \r\n\r\nTherefore to resolve this we need to parse the `OPTIN` argument + test with `ruedis`. \r\n\r\n@romange what's the priority of this? Also, I noticed that we need to update the docs https://www.dragonflydb.io/docs/command-reference/compatibility to include `CLIENT TRACKING` I am mentioning it here so we don't forget\nYes, it seems that you are correct; the error appears to be different between Linux and Windows. I executed this on my MacBook and received the same error as you. let me the opportunity to double-check.\r\n\r\nHowever, it seems that by adding the following parameter, it appears that the issue has been resolved:\r\n```plaintext\r\nDisableCache: true\r\n```\r\n\r\n``` GO\r\nclient, err := rueidis.NewClient(\r\n\trueidis.ClientOption{\r\n\tInitAddress: []string{\"127.0.0.1:6379\"},\r\n\tDisableCache: true,\r\n})\r\n```\r\nBut when we set a key twice, we receive the following error:\r\n```plaintext\r\npanic: redis nil message\r\ngoroutine 1 [running]:\r\nmain.main()\r\n        /Users/mozaffari/Documents/tst/dragonfly/main.go:22 +0x590\r\n```\r\nIt seems like we might not have overwriting capabilities.\r\n\r\n> Hi @thisismz , I run your example with go `1.21.6`. First, I am not quite sure how you are getting this output:\r\n> \r\n> > \r\n> \r\n> panic: Unknown subcommand or wrong number of arguments for 'TRACKING'. Try CLIENT HELP.: ClientOption.DisableCache must be true for redis not supporting client-side caching or not supporting RESP3 [recovered] panic: Unknown subcommand or wrong number of arguments for 'TRACKING'. Try CLIENT HELP.: ClientOption.DisableCache must be true for redis not supporting client-side caching or not supporting RESP3\r\n> \r\n> When I run it, I just get: `panic: syntax error`.\r\n> \r\n> How I reproduced: `go mod init test && go get github.com/redis/rueidis && go run .` . The good thing is at least I managed to reproduce and figure out what the issue is. We recently added support for the `CLIENT TRACKING` subcommand in #2139 However, it appears that we only added partial support. The only tthing we accept is `CLIENT TRACKING ON/OFF`. However, `rueidis` sends `CLIENT TRACKING ON OPTIN` and dragonfly fails to parse the `OPTIN` arguments and returns with a `syntax error`.\r\n> \r\n> Therefore to resolve this we need to parse the `OPTIN` argument + test with `ruedis`.\r\n> \r\n> @romange what's the priority of this? Also, I noticed that we need to update the docs https://www.dragonflydb.io/docs/command-reference/compatibility to include `CLIENT TRACKING` I am mentioning it here so we don't forget\r\n\r\n\nHello @kostasrim \r\n\r\nI checked again on Windows and got the same error that was reported. \r\n\r\n> panic: Unknown subcommand or wrong number of arguments for 'TRACKING'. Try CLIENT HELP.: ClientOption.DisableCache must be true for redis not supporting client-side caching or not supporting RESP3 [recovered] panic: Unknown subcommand or wrong number of arguments for 'TRACKING'. Try CLIENT HELP.: ClientOption.DisableCache must be true for redis not supporting client-side caching or not supporting RESP3\r\n\r\nI'm using docker version 4.27.1 and \r\ndragonfly v1.13.0-f39eac5bcaf7c8ffe5c433a0e8e15747391199d9\r\nbuild time: 2023-12-04 15:59:48\r\nThe only way it works for me is when DisableCache: true,\nHi @thisismz from a quick look the `flag` `DisableCache` seems to not use the `CLIENT TRACKING` command at all and that's why it works. Moreover, the reason you are getting `nil` message is because:\r\n\r\n```\r\nerr = client.Do(ctx, client.B().Set().Key(\"key\").Value(\"val\").Nx().Build()).Error()\r\n```\r\n\r\nYou call `Nx()` which only sets the key if it does not already exist. Therefore if you use the same code above twice, the second time will get you a `nil`. You can remove `Nx` and the example will work fine. \r\n\r\n> It seems like we might not have overwriting capabilities\r\n\r\nYou used `Nx()`\nHi all,\r\n\r\nrueidis can send `CLIENT TRACKING ON` without `OPTIN` by doing this:\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t\"context\"\r\n\t\"fmt\"\r\n\t\"time\"\r\n\r\n\t\"github.com/redis/rueidis\"\r\n)\r\n\r\nfunc main() {\r\n\tclient, err := rueidis.NewClient(rueidis.ClientOption{\r\n\t\tInitAddress:           []string{\"127.0.0.1:6379\"},\r\n\t\tClientTrackingOptions: []string{},\r\n\t})\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\tdefer client.Close()\r\n\tfmt.Println(client.DoCache(context.Background(), client.B().Get().Key(\"mykey\").Cache(), time.Second).Error())\r\n}\r\n\r\n```\r\n\r\nHowever, I found dragonfly would crash on the above `client.DoCache(...)` call like this:\r\n\r\n```sh\r\nI20240313 12:17:42.688308     9 listener_interface.cc:101] sock[7] AcceptServer - listening on port 6379\r\n*** SIGSEGV received at time=1710332266 on cpu 0 ***\r\nPC: @     0xaaaae1226770  (unknown)  dfly::Transaction::Refurbish()\r\n    @     0xaaaae187cc7c        480  absl::lts_20230802::AbslFailureSignalHandler()\r\n    @     0xffffacb3b7a0       4960  (unknown)\r\n    @     0xaaaae12ce164        400  facade::Connection::DispatchOperations::operator()()\r\nE20240313 12:17:46.477110     9 server_family.cc:1532] Subcommand CACHING not supported\r\n    @     0xaaaae12d5164         32  facade::Connection::DispatchFiber()\r\n    @     0xaaaae12d576c        384  boost::context::detail::fiber_entry<>()\r\n```\r\n\r\nI used the dragonfly docker image df-v1.15.1-d6703460242ab8aa415a93f32677c5f23b5e6ec8.\r\n\r\n\nHi @rueian, I think we do not support `CACHING` subcommand and I think the issue comes from `client.B().Get().Key(\"mykey\").Cache()`, specifically the `Cache` part\nHi @kostasrim, Thank you for the prompt reply!\r\n\r\nI understand that Dragonfly doesn't support the `CACHING` subcommand at this moment. However, I think a reasonable reaction to that should be returning an error like `-ERR Unknown subcommand or wrong number of arguments for 'CACHING'. Try CLIENT HELP.` instead of crashing.\nHi @rueian, yes I agree we should not crash, I was commenting about why it would not currently work. Thank you for reporting this, I will take care of this.",
  "created_at": "2024-03-13T16:46:30Z",
  "modified_files": [
    "src/server/main_service.cc"
  ],
  "modified_test_files": [
    "src/server/server_family_test.cc"
  ]
}