{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 3580,
  "instance_id": "dragonflydb__dragonfly-3580",
  "issue_numbers": [
    "3558"
  ],
  "base_commit": "80e1dbb304ceca46a135fb0e4696e6325702e775",
  "patch": "diff --git a/src/facade/error.h b/src/facade/error.h\nindex d46b4e71bf8a..7a9c352f30be 100644\n--- a/src/facade/error.h\n+++ b/src/facade/error.h\n@@ -35,6 +35,7 @@ extern const char kClusterNotConfigured[];\n extern const char kLoadingErr[];\n extern const char kUndeclaredKeyErr[];\n extern const char kInvalidDumpValueErr[];\n+extern const char kInvalidJsonPathErr[];\n \n extern const char kSyntaxErrType[];\n extern const char kScriptErrType[];\ndiff --git a/src/facade/facade.cc b/src/facade/facade.cc\nindex ed401b78dfe1..4567135a46cf 100644\n--- a/src/facade/facade.cc\n+++ b/src/facade/facade.cc\n@@ -96,6 +96,7 @@ const char kClusterNotConfigured[] = \"Cluster is not yet configured\";\n const char kLoadingErr[] = \"-LOADING Dragonfly is loading the dataset in memory\";\n const char kUndeclaredKeyErr[] = \"script tried accessing undeclared key\";\n const char kInvalidDumpValueErr[] = \"DUMP payload version or checksum are wrong\";\n+const char kInvalidJsonPathErr[] = \"invalid JSON path\";\n \n const char kSyntaxErrType[] = \"syntax_error\";\n const char kScriptErrType[] = \"script_error\";\ndiff --git a/src/facade/op_status.cc b/src/facade/op_status.cc\nindex 84f5c8e6a880..c4c21bfd1732 100644\n--- a/src/facade/op_status.cc\n+++ b/src/facade/op_status.cc\n@@ -34,6 +34,8 @@ std::string_view StatusToMsg(OpStatus status) {\n       return \"at least 1 input key is needed for this command\";\n     case OpStatus::MEMBER_NOTFOUND:\n       return kKeyNotFoundErr;\n+    case OpStatus::INVALID_JSON_PATH:\n+      return kInvalidJsonPathErr;\n     default:\n       LOG(ERROR) << \"Unsupported status \" << status;\n       return \"Internal error\";\ndiff --git a/src/facade/op_status.h b/src/facade/op_status.h\nindex 4c5c1e92ca61..9749b9d5fd43 100644\n--- a/src/facade/op_status.h\n+++ b/src/facade/op_status.h\n@@ -30,7 +30,8 @@ enum class OpStatus : uint16_t {\n   INVALID_NUMERIC_RESULT,\n   CANCELLED,\n   AT_LEAST_ONE_KEY,\n-  MEMBER_NOTFOUND\n+  MEMBER_NOTFOUND,\n+  INVALID_JSON_PATH\n };\n \n class OpResultBase {\ndiff --git a/src/server/json_family.cc b/src/server/json_family.cc\nindex f96085fccfe3..72e1aebe0f75 100644\n--- a/src/server/json_family.cc\n+++ b/src/server/json_family.cc\n@@ -565,10 +565,14 @@ OpResult<std::string> OpJsonGet(const OpArgs& op_args, string_view key,\n       jsoncons::json_object_arg};  // see https://github.com/danielaparker/jsoncons/issues/482\n   if (paths.size() == 1) {\n     auto eval_result = eval_wrapped(paths[0].second);\n+    if (!eval_result) {\n+      return OpStatus::INVALID_JSON_PATH;\n+    }\n     out = std::move(eval_result).value();  // TODO(Print not existing path to the user)\n   } else {\n     for (const auto& [path_str, path] : paths) {\n       auto eval_result = eval_wrapped(path);\n+      DCHECK(eval_result);\n       out[path_str] = std::move(eval_result).value();  // TODO(Print not existing path to the user)\n     }\n   }\n",
  "test_patch": "diff --git a/src/server/json_family_test.cc b/src/server/json_family_test.cc\nindex 968a69ab3146..9f985f8f3a1f 100644\n--- a/src/server/json_family_test.cc\n+++ b/src/server/json_family_test.cc\n@@ -141,6 +141,25 @@ TEST_F(JsonFamilyTest, GetLegacy) {\n \n   resp = Run({\"JSON.GET\", \"json\", \"$.name\", \"$.lastSeen\"});  // V2 Response\n   ASSERT_THAT(resp, \"{\\\"$.lastSeen\\\":[1478476800],\\\"$.name\\\":[\\\"Leonard Cohen\\\"]}\");\n+\n+  json = R\"(\n+    {\"a\":\"first\",\"b\":{\"field\":\"second\"},\"c\":{\"field\":\"third\"}}\n+  )\";\n+\n+  resp = Run({\"JSON.SET\", \"json\", \"$\", json});\n+  ASSERT_THAT(resp, \"OK\");\n+\n+  resp = Run({\"JSON.GET\", \"json\", \"bar\"});  // V1 Response\n+  ASSERT_THAT(resp, ErrArg(\"ERR invalid JSON path\"));\n+\n+  resp = Run({\"JSON.GET\", \"json\", \"$.bar\"});  // V2 Response\n+  ASSERT_THAT(resp, \"[]\");\n+\n+  resp = Run({\"JSON.GET\", \"json\", \"bar\", \"$.a\"});  // V2 Response\n+  ASSERT_THAT(resp, R\"({\"$.a\":[\"first\"],\"bar\":[]})\");\n+\n+  resp = Run({\"JSON.GET\", \"json\", \"$.bar\"});  // V2 Response\n+  ASSERT_THAT(resp, \"[]\");\n }\n \n static const string PhonebookJson = R\"(\n",
  "problem_statement": "crash json.set/get\nTo reproduce:\r\n```\r\nJSON.SET foo . '{}'\r\nJSON.GET foo bar\r\n```\n",
  "hints_text": "```\r\n#3  0x0000555555b98257 in dfly::(anonymous namespace)::OpJsonGet (op_args=..., key=\"foo\", paths=std::vector of length 1, capacity 1 = {...}, \r\n    indent=std::optional [no contained value], new_line=std::optional [no contained value], space=std::optional [no contained value])\r\n    at /home/dranikpg/proj/dragonfly/src/server/json_family.cc:568\r\n```",
  "created_at": "2024-08-27T12:35:45Z",
  "modified_files": [
    "src/facade/error.h",
    "src/facade/facade.cc",
    "src/facade/op_status.cc",
    "src/facade/op_status.h",
    "src/server/json_family.cc"
  ],
  "modified_test_files": [
    "src/server/json_family_test.cc"
  ]
}