diff --git a/src/server/cluster/cluster_family_test.cc b/src/server/cluster/cluster_family_test.cc
index feaa1d6d5875..a2489e1e948b 100644
--- a/src/server/cluster/cluster_family_test.cc
+++ b/src/server/cluster/cluster_family_test.cc
@@ -597,7 +597,7 @@ TEST_F(ClusterFamilyTest, ClusterFirstConfigCallDropsEntriesNotOwnedByNode) {
   EXPECT_EQ(Run({"save", "df"}), "OK");
 
   auto save_info = service_->server_family().GetLastSaveInfo();
-  EXPECT_EQ(Run({"debug", "load", save_info.file_name}), "OK");
+  EXPECT_EQ(Run({"dfly", "load", save_info.file_name}), "OK");
   EXPECT_EQ(CheckedInt({"dbsize"}), 50000);
 
   ConfigSingleNodeCluster("abcd1234");
diff --git a/src/server/rdb_test.cc b/src/server/rdb_test.cc
index b56a6162d9f9..1c4863d135b7 100644
--- a/src/server/rdb_test.cc
+++ b/src/server/rdb_test.cc
@@ -167,7 +167,7 @@ TEST_F(RdbTest, ComressionModeSaveDragonflyAndReload) {
     ASSERT_EQ(resp, "OK");
 
     auto save_info = service_->server_family().GetLastSaveInfo();
-    resp = Run({"debug", "load", save_info.file_name});
+    resp = Run({"dfly", "load", save_info.file_name});
     ASSERT_EQ(resp, "OK");
     ASSERT_EQ(50000, CheckedInt({"dbsize"}));
   }
@@ -182,7 +182,7 @@ TEST_F(RdbTest, RdbLoaderOnReadCompressedDataShouldNotEnterEnsureReadFlow) {
   ASSERT_EQ(resp, "OK");
 
   auto save_info = service_->server_family().GetLastSaveInfo();
-  resp = Run({"debug", "load", save_info.file_name});
+  resp = Run({"dfly", "load", save_info.file_name});
   ASSERT_EQ(resp, "OK");
 }
 
@@ -265,7 +265,7 @@ TEST_F(RdbTest, ReloadExpired) {
   ASSERT_EQ(resp, "OK");
   auto save_info = service_->server_family().GetLastSaveInfo();
   AdvanceTime(2000);
-  resp = Run({"debug", "load", save_info.file_name});
+  resp = Run({"dfly", "load", save_info.file_name});
   ASSERT_EQ(resp, "OK");
   resp = Run({"get", "key"});
   ASSERT_THAT(resp, ArgType(RespExpr::NIL));
@@ -543,4 +543,26 @@ TEST_F(RdbTest, SBF) {
   EXPECT_THAT(Run({"BF.EXISTS", "k", "1"}), IntArg(1));
 }
 
+TEST_F(RdbTest, DflyLoadAppend) {
+  // Create an RDB with (k1,1) value in it saved as `filename`
+  EXPECT_EQ(Run({"set", "k1", "1"}), "OK");
+  EXPECT_EQ(Run({"save", "df"}), "OK");
+  string filename = service_->server_family().GetLastSaveInfo().file_name;
+
+  // Without APPEND option - db should be flushed
+  EXPECT_EQ(Run({"set", "k1", "TO-BE-FLUSHED"}), "OK");
+  EXPECT_EQ(Run({"set", "k2", "TO-BE-FLUSHED"}), "OK");
+  EXPECT_EQ(Run({"dfly", "load", filename}), "OK");
+  EXPECT_THAT(Run({"dbsize"}), IntArg(1));
+  EXPECT_EQ(Run({"get", "k1"}), "1");
+
+  // With APPEND option - db shouldn't be flushed, but k1 should be overridden
+  EXPECT_EQ(Run({"set", "k1", "TO-BE-OVERRIDDEN"}), "OK");
+  EXPECT_EQ(Run({"set", "k2", "2"}), "OK");
+  EXPECT_EQ(Run({"dfly", "load", filename, "append"}), "OK");
+  EXPECT_THAT(Run({"dbsize"}), IntArg(2));
+  EXPECT_EQ(Run({"get", "k1"}), "1");
+  EXPECT_EQ(Run({"get", "k2"}), "2");
+}
+
 }  // namespace dfly
diff --git a/tests/dragonfly/snapshot_test.py b/tests/dragonfly/snapshot_test.py
index 46e6a1ad35e2..f558bfd8976a 100644
--- a/tests/dragonfly/snapshot_test.py
+++ b/tests/dragonfly/snapshot_test.py
@@ -57,7 +57,7 @@ async def test_consistency(df_factory, format: str, seeder_opts: dict):
     await async_client.execute_command("SAVE", format)
     assert await async_client.flushall()
     await async_client.execute_command(
-        "DEBUG",
+        "DFLY",
         "LOAD",
         f"{dbfilename}.rdb" if format == "RDB" else f"{dbfilename}-summary.dfs",
     )
@@ -85,7 +85,7 @@ async def test_multidb(df_factory, format: str):
     await async_client.execute_command("SAVE", format)
     assert await async_client.flushall()
     await async_client.execute_command(
-        "DEBUG",
+        "DFLY",
         "LOAD",
         f"{dbfilename}.rdb" if format == "RDB" else f"{dbfilename}-summary.dfs",
     )
@@ -271,7 +271,7 @@ async def test_s3_snapshot(self, async_client):
         await async_client.execute_command("SAVE DF snapshot")
         assert await async_client.flushall()
         await async_client.execute_command(
-            "DEBUG LOAD "
+            "DFLY LOAD "
             + os.environ["DRAGONFLY_S3_BUCKET"]
             + str(self.tmp_dir)
             + "/snapshot-summary.dfs"
@@ -451,7 +451,7 @@ async def test_tiered_entries(async_client: aioredis.Redis):
     await async_client.execute_command("SAVE", "DF")
     assert await async_client.flushall()
     await async_client.execute_command(
-        "DEBUG",
+        "DFLY",
         "LOAD",
         "tiered-entries-summary.dfs",
     )
@@ -488,7 +488,7 @@ async def test_tiered_entries_throttle(async_client: aioredis.Redis):
 
     load_task = asyncio.create_task(
         async_client.execute_command(
-            "DEBUG",
+            "DFLY",
             "LOAD",
             "tiered-entries-summary.dfs",
         )
