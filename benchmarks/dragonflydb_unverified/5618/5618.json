{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 5618,
  "instance_id": "dragonflydb__dragonfly-5618",
  "issue_numbers": [
    "5611"
  ],
  "base_commit": "0ba8b9562dff354a588c2d59b1073ecac1e392c3",
  "patch": "diff --git a/src/server/server_family.cc b/src/server/server_family.cc\nindex 8146d4fff28c..b69a0d841842 100644\n--- a/src/server/server_family.cc\n+++ b/src/server/server_family.cc\n@@ -3395,9 +3395,11 @@ void ServerFamily::ReplicaOfInternal(CmdArgList args, Transaction* tx, SinkReply\n       last_master_data = replica_->Stop();\n     StopAllClusterReplicas();\n \n-    // First, switch into the loading state\n-    if (auto new_state = service_.SwitchState(GlobalState::ACTIVE, GlobalState::LOADING);\n-        new_state != GlobalState::LOADING) {\n+    const GlobalState gstate = ServerState::tlocal()->gstate();\n+    if (gstate == GlobalState::TAKEN_OVER) {\n+      service_.SwitchState(GlobalState::TAKEN_OVER, GlobalState::LOADING);\n+    } else if (auto new_state = service_.SwitchState(GlobalState::ACTIVE, GlobalState::LOADING);\n+               new_state != GlobalState::LOADING) {\n       LOG(WARNING) << new_state << \" in progress, ignored\";\n       builder->SendError(\"Invalid state\");\n       return;\n",
  "test_patch": "diff --git a/tests/dragonfly/cluster_test.py b/tests/dragonfly/cluster_test.py\nindex 730fa1568fbd..24bd26264181 100644\n--- a/tests/dragonfly/cluster_test.py\n+++ b/tests/dragonfly/cluster_test.py\n@@ -3421,3 +3421,14 @@ async def test_replica_takeover_moved(\n \n     assert await r1.client.execute_command(\"GET X\") == \"2\"\n     assert await m2.client.execute_command(\"GET FOOX\") == \"1\"\n+\n+    await r1.client.execute_command(\"flushall\")\n+    assert await r1.client.dbsize() == 0\n+    await r1.client.execute_command(\"SET newk foo\")\n+    # Now bring back m1 as a replica of r1\n+    nodes.append(m1)\n+    r1.replicas = [m1]\n+    await push_config(json.dumps(generate_config(master_nodes)), [node.client for node in nodes])\n+    await m1.client.execute_command(f\"replicaof localhost {r1.instance.port}\")\n+    await check_all_replicas_finished([m1.client], r1.client)\n+    assert await m1.client.execute_command(\"GET newk\") == \"foo\"\n",
  "problem_statement": "`REPLICAOF` fails after takeover\nWhen running `REPLTAKEOVER` in a cluster on v1.32 from nodes A to B, node A gets stuck in a `TAKEN_OVER` state, meaning we can't configure A as a replica of B with `REPLICAOF`\n\ncc @kostasrim \n",
  "hints_text": "\ud83e\uddd1\u200d\ud83c\udf73 ",
  "created_at": "2025-08-04T14:33:44Z",
  "modified_files": [
    "src/server/server_family.cc"
  ],
  "modified_test_files": [
    "tests/dragonfly/cluster_test.py"
  ]
}