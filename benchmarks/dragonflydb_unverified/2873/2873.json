{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 2873,
  "instance_id": "dragonflydb__dragonfly-2873",
  "issue_numbers": [
    "2859"
  ],
  "base_commit": "dd437693f66b1a14b30516cc3d305344fe7a2d73",
  "patch": "diff --git a/helio b/helio\nindex f76c73fc6ca8..d819bf4f1bc6 160000\n--- a/helio\n+++ b/helio\n@@ -1,1 +1,1 @@\n-Subproject commit f76c73fc6ca8cf1ada04edbb7e64a2465aa0f5b1\n+Subproject commit d819bf4f1bc61e72d9fbe0c37b2ce40354d9689d\ndiff --git a/src/server/main_service.cc b/src/server/main_service.cc\nindex fcc00b48235f..9ecbf4b1e791 100644\n--- a/src/server/main_service.cc\n+++ b/src/server/main_service.cc\n@@ -1022,7 +1022,7 @@ std::optional<ErrorReply> Service::VerifyCommandState(const CommandId* cid, CmdA\n       allowed_by_state = false;\n       break;\n     case GlobalState::TAKEN_OVER:\n-      allowed_by_state = cid->name() == \"REPLCONF\" || cid->name() == \"SAVE\";\n+      allowed_by_state = !cid->IsWriteOnly();\n       break;\n     default:\n       break;\n",
  "test_patch": "diff --git a/tests/dragonfly/replication_test.py b/tests/dragonfly/replication_test.py\nindex 64e86e7b5e21..81e1fa189e7a 100644\n--- a/tests/dragonfly/replication_test.py\n+++ b/tests/dragonfly/replication_test.py\n@@ -1265,6 +1265,46 @@ async def seed():\n     await disconnect_clients(c_master, c_replica)\n \n \n+@pytest.mark.parametrize(\"master_threads, replica_threads\", [[4, 4]])\n+@pytest.mark.asyncio\n+async def test_take_over_read_commands(df_local_factory, master_threads, replica_threads):\n+    master = df_local_factory.create(\n+        proactor_threads=master_threads,\n+        logtostderr=True,\n+    )\n+    replica = df_local_factory.create(proactor_threads=replica_threads)\n+    df_local_factory.start_all([master, replica])\n+\n+    c_master = master.client()\n+    await c_master.execute_command(\"SET foo bar\")\n+\n+    c_replica = replica.client()\n+    await c_replica.execute_command(f\"REPLICAOF localhost {master.port}\")\n+    await wait_available_async(c_replica)\n+\n+    async def prompt():\n+        client = replica.client()\n+        for i in range(50):\n+            # TODO remove try block when we no longer shut down master after take over\n+            try:\n+                res = await c_master.execute_command(\"GET foo\")\n+                assert res == \"bar\"\n+                res = await c_master.execute_command(\"CONFIG SET aclfile myfile\")\n+                assert res == \"OK\"\n+            except:\n+                pass\n+            res = await client.execute_command(\"GET foo\")\n+            assert res == \"bar\"\n+\n+    promt_task = asyncio.create_task(prompt())\n+    await c_replica.execute_command(f\"REPLTAKEOVER 5\")\n+\n+    assert await c_replica.execute_command(\"role\") == [\"master\", []]\n+    await promt_task\n+\n+    await disconnect_clients(c_master, c_replica)\n+\n+\n @pytest.mark.asyncio\n async def test_take_over_timeout(df_local_factory, df_seeder_factory):\n     master = df_local_factory.create(proactor_threads=2, logtostderr=True)\n",
  "problem_statement": "REPLTAKEOVER blocks all the commands during the critical section\nDragonfly rejects most of the commands during `TAKEN_OVER` state:\r\n\r\n```c++\r\n    case GlobalState::TAKEN_OVER:\r\n      allowed_by_state = cid->name() == \"REPLCONF\" || cid->name() == \"SAVE\";\r\n      break;\r\n```\r\n\r\nwhat's the reason for this strong condition?\r\nhere is the original discussion during the PR https://github.com/dragonflydb/dragonfly/pull/1314/files#r1233299840\r\neven if we stay with the original implementation of rejecting immediately,\r\nis not it enough to only block WRITE commands during this transition?\r\n\r\n\r\n\r\n\n",
  "hints_text": "So do we only want to block `WRITE` commands ?\r\n\r\nEdit:\r\n\r\n> is not it enough to only block WRITE commands during this transition?\r\n\r\nThe only downside I see is a possible timeout on contention.",
  "created_at": "2024-04-09T13:57:44Z",
  "modified_files": [
    "helio",
    "src/server/main_service.cc"
  ],
  "modified_test_files": [
    "tests/dragonfly/replication_test.py"
  ]
}