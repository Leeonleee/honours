You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
Support laravel horizon
**Describe the bug**
Hey! I created a simple application with [laravel horizon](https://laravel.com/docs/9.x/horizon) and try to use it with **dragonflydb** as queue-driver. Currently it's working with **redis 6.2.6** or **keydb 6.3.1**.

I have 2 containers - `app_laravel` and `app_laravel_horizon`. First is simple api, with **GET** route `/api/test` that push `TestJob` job to queue and then `app_laravel_horizon` workers process this job. 



**To Reproduce**

1. Run command `docker network create app_test_network`
2. Create docker-compose.yml file with 3 containers -  `app_laravel`, `app_laravel_horizon`, and `redis_master` with password `redistestpassword`
3. Run command `docker compose -f ./docker-compose.yml up` 


```
version: '3.8'

x-sysctls-config: &sysctls-config
  sysctls:
    - net.core.somaxconn=65535
    - kernel.shmmax=33554432
    - kernel.shmall=16777216
    - kernel.msgmax=65535
    - kernel.msgmnb=65535

x-logging-local: &logging-local
  logging:
    driver: local
    options:
      max-size: "10m"
      max-file: 3

networks:
  app_test_network:
    external:
      name: app_test_network

services:
  redis_master:
    image: 'bitnami/redis:6.2.6'
    ports:
      - 6379:6379
    environment:
      - REDIS_REPLICATION_MODE=master
      - REDIS_PASSWORD=redistestpassword
    networks:
      - app_test_network
    deploy:
      mode: replicated
      replicas: 1
      placement:
        max_replicas_per_node: 1
    <<: *sysctls-config
    <<: *logging-local

#  redis_master:
#    image: 'docker.dragonflydb.io/dragonflydb/dragonfly'
#    ports:
#      - 6379:6379
#    environment:
#      - REDIS_REPLICATION_MODE=master
#      - REDIS_PASSWORD=redistestpassword
#    command:
#      - "--requirepass=redistestpassword"
#      - "--save_schedule=:" # save for every 1 minute
#      - "--dir=/data"
#      - "--dbfilename=dump.rdb"
#      - "--vmodule=main_service=2"
#    networks:
#      - app_test_network
#    deploy:
#      mode: replicated
#      replicas: 1
#      placement:
#        max_replicas_per_node: 1
#    <<: *sysctls-config
#    <<: *logging-local

  app_laravel:
    build:
      context: src
      dockerfile: Dockerfile
    restart: always
    image: fannyfan/laravel-redis-dragonfly:app_v1
    command: ["./init-octane.sh"]
    ports:
      - 8000:8000
    environment:
      - HORIZON_FAST_WORKERS_COUNT=5
      - HORIZON_SLOW_WORKERS_COUNT=5
      - OCTANE_WORKERS_COUNT=5
      - OCTANE_TASK_WORKERS_COUNT=1
      - OCTANE_PORT=8000
      - OCTANE_HOST=app
      - REDIS_HOST=redis_master
      - REDIS_PASSWORD=redistestpassword
      - REDIS_PORT=6379
    networks:
      - app_test_network
    deploy:
      mode: replicated
      replicas: 1
      placement:
        max_replicas_per_node: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 30s
    <<: *sysctls-config
    <<: *logging-local

  app_laravel_horizon:
    image: fannyfan/laravel-redis-dragonfly:app_v1
    command: ["./init-horizon.sh"]
    restart: always
    depends_on:
      - redis_master
    environment:
      - HORIZON_FAST_WORKERS_COUNT=5
      - HORIZON_SLOW_WORKERS_COUNT=5
      - OCTANE_WORKERS_COUNT=5
      - OCTANE_TASK_WORKERS_COUNT=1
      - OCTANE_PORT=8000
      - OCTANE_HOST=app
      - REDIS_HOST=redis_master
      - REDIS_PASSWORD=redistestpassword
      - REDIS_PORT=6379
    networks:
      - app_test_network
    deploy:
      mode: replicated
      replicas: 2
      placement:
        max_replicas_per_node: 1
    <<: *sysctls-config
    <<: *logging-local
```

**Expected behavior**
1. Open `http://127.0.0.1:8000/horizon` and check that horizon status is **Active**.
2. Open in browser `http://127.0.0.1:8000/api/test` or run command `docker run --rm --net=app_test_network ghcr.io/six-ddc/plow http://app_laravel:8000/api/test -c 1 -d 1s`
3. Open `http://127.0.0.1:8000/horizon/jobs/completed` and see that jobs are completed.
4. Connect to redis_master container, run `redis-cli -a redistestpassword` and `zrange laravel_horizon:completed_jobs 0 -1` to see completed jobs. 
5. Stop all containers, comment in docker-compose.yml **redis** and uncomment **dragonfly**. Rerun containers and repeat all previous steps. 
6. Using `dragonfly ` all jobs for some reasong hang up in `pending` state and never started..


**Screenshots**
Using `redis`:

![image](https://user-images.githubusercontent.com/32100589/213730338-8e2bd1df-5d89-4ccb-acf6-98ec9e810630.png)
![image](https://user-images.githubusercontent.com/32100589/213730521-cb9a43b0-83f0-41e1-b42d-61308ebc1ec0.png)

Using `dragonflydb`:

![image](https://user-images.githubusercontent.com/32100589/213731967-7ec31eaf-3d07-4e6d-b00d-9cbfb2ba6f5a.png)


**Environment (please complete the following information):**
- Docker  Version: 20.10.21
- dragonflydb 0.14
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
