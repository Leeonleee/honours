{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 723,
  "instance_id": "dragonflydb__dragonfly-723",
  "issue_numbers": [
    "713"
  ],
  "base_commit": "b0741b40ad4cc0335989957671f0f5c1c45f4947",
  "patch": "diff --git a/src/server/transaction.cc b/src/server/transaction.cc\nindex d2674298cf60..913808080307 100644\n--- a/src/server/transaction.cc\n+++ b/src/server/transaction.cc\n@@ -1103,15 +1103,15 @@ void Transaction::UnlockMultiShardCb(const std::vector<KeyList>& sharded_keys, E\n \n   // It does not have to be that all shards in multi transaction execute this tx.\n   // Hence it could stay in the tx queue. We perform the necessary cleanup and remove it from\n-  // there.\n+  // there. The transaction is not guaranteed to be at front.\n   if (sd.pq_pos != TxQueue::kEnd) {\n-    DVLOG(1) << \"unlockmulti: TxPopFront \" << DebugId();\n+    DVLOG(1) << \"unlockmulti: TxRemove \" << DebugId();\n \n     TxQueue* txq = shard->txq();\n     DCHECK(!txq->Empty());\n-    Transaction* trans = absl::get<Transaction*>(txq->Front());\n-    DCHECK(trans == this);\n-    txq->PopFront();\n+    DCHECK_EQ(absl::get<Transaction*>(txq->At(sd.pq_pos)), this);\n+\n+    txq->Remove(sd.pq_pos);\n     sd.pq_pos = TxQueue::kEnd;\n   }\n \n",
  "test_patch": "diff --git a/src/server/dragonfly_test.cc b/src/server/dragonfly_test.cc\nindex d8333511505e..4714059e63b6 100644\n--- a/src/server/dragonfly_test.cc\n+++ b/src/server/dragonfly_test.cc\n@@ -41,6 +41,11 @@ const char kKey2[] = \"b\";\n const char kKey3[] = \"c\";\n const char kKey4[] = \"y\";\n \n+const char kKeySid0[] = \"x\";\n+const char kKeySid1[] = \"c\";\n+const char kKeySid2[] = \"b\";\n+const char kKey2Sid0[] = \"y\";\n+\n }  // namespace\n \n // This test is responsible for server and main service\n@@ -88,6 +93,15 @@ TEST_F(DflyEngineTest, Sds) {\n }\n \n TEST_F(DflyEngineTest, MultiAndEval) {\n+  ShardId sid1 = Shard(kKey1, num_threads_ - 1);\n+  ShardId sid2 = Shard(kKey2, num_threads_ - 1);\n+  ShardId sid3 = Shard(kKey3, num_threads_ - 1);\n+  ShardId sid4 = Shard(kKey4, num_threads_ - 1);\n+  EXPECT_EQ(0, sid1);\n+  EXPECT_EQ(2, sid2);\n+  EXPECT_EQ(1, sid3);\n+  EXPECT_EQ(0, sid4);\n+\n   RespExpr resp = Run({\"multi\"});\n   ASSERT_EQ(resp, \"OK\");\n \n@@ -412,6 +426,32 @@ return {offset, epoch}\n   EXPECT_THAT(resp.GetVec(), ElementsAre(IntArg(1), \"6\"));\n }\n \n+// Scenario: 1. a lua call A schedules itself on shards 0, 1, 2.\n+//           2. another lua call B schedules itself on shards 1,2 but on shard 1 (or 2) it\n+//              schedules itself before A.\n+//              the order of scheduling: shard 0: A, shard 1: B, A. shard 2: B, A.\n+//           3. A is executes its first command first, which coincendently runs only on shard 0,\n+//              hence A finishes before B and then it tries to cleanup.\n+//           4. There was an incorrect cleanup of multi-transactions that breaks for shard 1 (or 2)\n+//              because it assume the A is at front of the queue.\n+TEST_F(DflyEngineTest, EvalBug713) {\n+  const char* script = \"return redis.call('get', KEYS[1])\";\n+\n+  // A\n+  auto fb0 = pp_->at(1)->LaunchFiber([&] {\n+    fibers_ext::Yield();\n+    for (unsigned i = 0; i < 50; ++i) {\n+      Run({\"eval\", script, \"3\", kKeySid0, kKeySid1, kKeySid2});\n+    }\n+  });\n+\n+  // B\n+  for (unsigned j = 0; j < 50; ++j) {\n+    Run({\"eval\", script, \"2\", kKeySid1, kKeySid2});\n+  }\n+  fb0.Join();\n+}\n+\n TEST_F(DflyEngineTest, EvalSha) {\n   auto resp = Run({\"script\", \"load\", \"return 5\"});\n   EXPECT_THAT(resp, ArgType(RespExpr::STRING));\n",
  "problem_statement": "Support laravel horizon\n**Describe the bug**\r\nHey! I created a simple application with [laravel horizon](https://laravel.com/docs/9.x/horizon) and try to use it with **dragonflydb** as queue-driver. Currently it's working with **redis 6.2.6** or **keydb 6.3.1**.\r\n\r\nI have 2 containers - `app_laravel` and `app_laravel_horizon`. First is simple api, with **GET** route `/api/test` that push `TestJob` job to queue and then `app_laravel_horizon` workers process this job. \r\n\r\n\r\n\r\n**To Reproduce**\r\n\r\n1. Run command `docker network create app_test_network`\r\n2. Create docker-compose.yml file with 3 containers -  `app_laravel`, `app_laravel_horizon`, and `redis_master` with password `redistestpassword`\r\n3. Run command `docker compose -f ./docker-compose.yml up` \r\n\r\n\r\n```\r\nversion: '3.8'\r\n\r\nx-sysctls-config: &sysctls-config\r\n  sysctls:\r\n    - net.core.somaxconn=65535\r\n    - kernel.shmmax=33554432\r\n    - kernel.shmall=16777216\r\n    - kernel.msgmax=65535\r\n    - kernel.msgmnb=65535\r\n\r\nx-logging-local: &logging-local\r\n  logging:\r\n    driver: local\r\n    options:\r\n      max-size: \"10m\"\r\n      max-file: 3\r\n\r\nnetworks:\r\n  app_test_network:\r\n    external:\r\n      name: app_test_network\r\n\r\nservices:\r\n  redis_master:\r\n    image: 'bitnami/redis:6.2.6'\r\n    ports:\r\n      - 6379:6379\r\n    environment:\r\n      - REDIS_REPLICATION_MODE=master\r\n      - REDIS_PASSWORD=redistestpassword\r\n    networks:\r\n      - app_test_network\r\n    deploy:\r\n      mode: replicated\r\n      replicas: 1\r\n      placement:\r\n        max_replicas_per_node: 1\r\n    <<: *sysctls-config\r\n    <<: *logging-local\r\n\r\n#  redis_master:\r\n#    image: 'docker.dragonflydb.io/dragonflydb/dragonfly'\r\n#    ports:\r\n#      - 6379:6379\r\n#    environment:\r\n#      - REDIS_REPLICATION_MODE=master\r\n#      - REDIS_PASSWORD=redistestpassword\r\n#    command:\r\n#      - \"--requirepass=redistestpassword\"\r\n#      - \"--save_schedule=:\" # save for every 1 minute\r\n#      - \"--dir=/data\"\r\n#      - \"--dbfilename=dump.rdb\"\r\n#      - \"--vmodule=main_service=2\"\r\n#    networks:\r\n#      - app_test_network\r\n#    deploy:\r\n#      mode: replicated\r\n#      replicas: 1\r\n#      placement:\r\n#        max_replicas_per_node: 1\r\n#    <<: *sysctls-config\r\n#    <<: *logging-local\r\n\r\n  app_laravel:\r\n    build:\r\n      context: src\r\n      dockerfile: Dockerfile\r\n    restart: always\r\n    image: fannyfan/laravel-redis-dragonfly:app_v1\r\n    command: [\"./init-octane.sh\"]\r\n    ports:\r\n      - 8000:8000\r\n    environment:\r\n      - HORIZON_FAST_WORKERS_COUNT=5\r\n      - HORIZON_SLOW_WORKERS_COUNT=5\r\n      - OCTANE_WORKERS_COUNT=5\r\n      - OCTANE_TASK_WORKERS_COUNT=1\r\n      - OCTANE_PORT=8000\r\n      - OCTANE_HOST=app\r\n      - REDIS_HOST=redis_master\r\n      - REDIS_PASSWORD=redistestpassword\r\n      - REDIS_PORT=6379\r\n    networks:\r\n      - app_test_network\r\n    deploy:\r\n      mode: replicated\r\n      replicas: 1\r\n      placement:\r\n        max_replicas_per_node: 1\r\n      restart_policy:\r\n        condition: on-failure\r\n        delay: 5s\r\n        max_attempts: 3\r\n        window: 30s\r\n    <<: *sysctls-config\r\n    <<: *logging-local\r\n\r\n  app_laravel_horizon:\r\n    image: fannyfan/laravel-redis-dragonfly:app_v1\r\n    command: [\"./init-horizon.sh\"]\r\n    restart: always\r\n    depends_on:\r\n      - redis_master\r\n    environment:\r\n      - HORIZON_FAST_WORKERS_COUNT=5\r\n      - HORIZON_SLOW_WORKERS_COUNT=5\r\n      - OCTANE_WORKERS_COUNT=5\r\n      - OCTANE_TASK_WORKERS_COUNT=1\r\n      - OCTANE_PORT=8000\r\n      - OCTANE_HOST=app\r\n      - REDIS_HOST=redis_master\r\n      - REDIS_PASSWORD=redistestpassword\r\n      - REDIS_PORT=6379\r\n    networks:\r\n      - app_test_network\r\n    deploy:\r\n      mode: replicated\r\n      replicas: 2\r\n      placement:\r\n        max_replicas_per_node: 1\r\n    <<: *sysctls-config\r\n    <<: *logging-local\r\n```\r\n\r\n**Expected behavior**\r\n1. Open `http://127.0.0.1:8000/horizon` and check that horizon status is **Active**.\r\n2. Open in browser `http://127.0.0.1:8000/api/test` or run command `docker run --rm --net=app_test_network ghcr.io/six-ddc/plow http://app_laravel:8000/api/test -c 1 -d 1s`\r\n3. Open `http://127.0.0.1:8000/horizon/jobs/completed` and see that jobs are completed.\r\n4. Connect to redis_master container, run `redis-cli -a redistestpassword` and `zrange laravel_horizon:completed_jobs 0 -1` to see completed jobs. \r\n5. Stop all containers, comment in docker-compose.yml **redis** and uncomment **dragonfly**. Rerun containers and repeat all previous steps. \r\n6. Using `dragonfly ` all jobs for some reasong hang up in `pending` state and never started..\r\n\r\n\r\n**Screenshots**\r\nUsing `redis`:\r\n\r\n![image](https://user-images.githubusercontent.com/32100589/213730338-8e2bd1df-5d89-4ccb-acf6-98ec9e810630.png)\r\n![image](https://user-images.githubusercontent.com/32100589/213730521-cb9a43b0-83f0-41e1-b42d-61308ebc1ec0.png)\r\n\r\nUsing `dragonflydb`:\r\n\r\n![image](https://user-images.githubusercontent.com/32100589/213731967-7ec31eaf-3d07-4e6d-b00d-9cbfb2ba6f5a.png)\r\n\r\n\r\n**Environment (please complete the following information):**\r\n- Docker  Version: 20.10.21\r\n- dragonflydb 0.14\n",
  "hints_text": "Maybe problem here (vendor/laravel/horizon/src/RedisQueue.php)\r\n\r\nmigrateExpiredJobs with redis return empty **array**, but dragonfly return **false**\r\n\r\n```\r\n    public function migrateExpiredJobs($from, $to)\r\n    {\r\n        return $this->getConnection()->eval(\r\n            LuaScripts::migrateExpiredJobs(), 3, $from, $to, $to.':notify', $this->currentTime(), $this->migrationBatchSize\r\n        );\r\n    }\r\n```\r\n`migrateExpiredJobs` method fron `LuaScripts`: \r\n```\r\n    public static function migrateExpiredJobs()\r\n    {\r\n        return <<<'LUA'\r\n-- Get all of the jobs with an expired \"score\"...\r\nlocal val = redis.call('zrangebyscore', KEYS[1], '-inf', ARGV[1], 'limit', 0, ARGV[2])\r\n\r\n-- If we have values in the array, we will remove them from the first queue\r\n-- and add them onto the destination queue in chunks of 100, which moves\r\n-- all of the appropriate jobs onto the destination queue very safely.\r\nif(next(val) ~= nil) then\r\n    redis.call('zremrangebyrank', KEYS[1], 0, #val - 1)\r\n\r\n    for i = 1, #val, 100 do\r\n        redis.call('rpush', KEYS[2], unpack(val, i, math.min(i+99, #val)))\r\n        -- Push a notification for every job that was migrated...\r\n        for j = i, math.min(i+99, #val) do\r\n            redis.call('rpush', KEYS[3], 1)\r\n        end\r\n    end\r\nend\r\n\r\nreturn val\r\nLUA;\r\n    }\r\n\r\n```\n\u0421onfirm that the error is in the return type, but perhaps somewhere else... \r\n\r\nRedis returns an `empty array`, dragonfly returns `false`. I added a condition locally in the php core of the library, if the value is false, then change it to array and it seems to work ..\nThank you for debugging this! \n@dranikpg , please take a look when you have time.\n@romange @dranikpg thanks for fixing!\r\n\r\nTry to test image `ghcr.io/dragonflydb/dragonfly:alpha-ubuntu` and found new bug.\r\n\r\n**How to reproduce:**\r\nUsing docker-compose.yml from first message try to run `docker run --rm --net=app_test_network ghcr.io/six-ddc/plow http://app_laravel:8000/api/test -c 10 -d 100s`\r\n\r\nAfter 2-10 secs everything freezes and dragonfly crashed.\r\nLogs from 2 tests \r\n[dragonfly-crash-logs-2.txt](https://github.com/dragonflydb/dragonfly/files/10479842/dragonfly-crash-logs-2.txt)\r\n[dragonfly-crash-logs-1.txt](https://github.com/dragonflydb/dragonfly/files/10479844/dragonfly-crash-logs-1.txt)\r\n\r\n\r\n\nWhile debugging, some note:\r\nSometimes dragonfly is not crashed, but all workers from app is freezed for a long time (over a minute) and then return error\r\n\r\n```\r\n2023-01-23 17:30:46 [2023-01-23 14:30:45] production.ERROR: read error on connection to redis_master:6379 {\"exception\":\"[object] (RedisException(code: 0): read error on connection to redis_master:6379 at /var/www/html/vendor/laravel/framework/src/Illuminate/Redis/Connections/Connection.php:116)\r\n2023-01-23 17:30:46 [stacktrace]\r\n2023-01-23 17:30:46 #0 /var/www/html/vendor/laravel/framework/src/Illuminate/Redis/Connections/Connection.php(116): Redis->lLen('queues:slow')\r\n2023-01-23 17:30:46 #1 /var/www/html/vendor/laravel/framework/src/Illuminate/Redis/Connections/PhpRedisConnection.php(532): Illuminate\\\\Redis\\\\Connections\\\\Connection->command('llen', Array)\r\n2023-01-23 17:30:46 #2 /var/www/html/vendor/laravel/framework/src/Illuminate/Redis/Connections/Connection.php(216): Illuminate\\\\Redis\\\\Connections\\\\PhpRedisConnection->command('llen', Array)\r\n2023-01-23 17:30:46 #3 /var/www/html/vendor/laravel/framework/src/Illuminate/Redis/Connections/PhpRedisConnection.php(565): Illuminate\\\\Redis\\\\Connections\\\\Connection->__call('llen', Array)\r\n2023-01-23 17:30:46 #4 /var/www/html/vendor/laravel/horizon/src/RedisQueue.php(32): Illuminate\\\\Redis\\\\Connections\\\\PhpRedisConnection->__call('llen', Array)\r\n2023-01-23 17:30:46 #5 /var/www/html/vendor/laravel/horizon/src/AutoScaler.php(80): Laravel\\\\Horizon\\\\RedisQueue->readyNow('slow')\r\n2023-01-23 17:30:46 #6 /var/www/html/vendor/laravel/framework/src/Illuminate/Collections/Collection.php(790): Laravel\\\\Horizon\\\\AutoScaler->Laravel\\\\Horizon\\\\{closure}(Object(Laravel\\\\Horizon\\\\ProcessPool), 'slow')\r\n2023-01-23 17:30:46 #7 /var/www/html/vendor/laravel/horizon/src/AutoScaler.php(79): Illuminate\\\\Support\\\\Collection->mapWithKeys(Object(Closure))\r\n2023-01-23 17:30:46 #8 /var/www/html/vendor/laravel/horizon/src/AutoScaler.php(49): Laravel\\\\Horizon\\\\AutoScaler->timeToClearPerQueue(Object(Laravel\\\\Horizon\\\\Supervisor), Object(Illuminate\\\\Support\\\\Collection))\r\n2023-01-23 17:30:46 #9 /var/www/html/vendor/laravel/horizon/src/Supervisor.php(349): Laravel\\\\Horizon\\\\AutoScaler->scale(Object(Laravel\\\\Horizon\\\\Supervisor))\r\n2023-01-23 17:30:46 #10 /var/www/html/vendor/laravel/horizon/src/Supervisor.php(296): Laravel\\\\Horizon\\\\Supervisor->autoScale()\r\n2023-01-23 17:30:46 #11 /var/www/html/vendor/laravel/horizon/src/Supervisor.php(260): Laravel\\\\Horizon\\\\Supervisor->loop()\r\n2023-01-23 17:30:46 #12 /var/www/html/vendor/laravel/horizon/src/Console/SupervisorCommand.php(100): Laravel\\\\Horizon\\\\Supervisor->monitor()\r\n2023-01-23 17:30:46 #13 /var/www/html/vendor/laravel/horizon/src/Console/SupervisorCommand.php(75): Laravel\\\\Horizon\\\\Console\\\\SupervisorCommand->start(Object(Laravel\\\\Horizon\\\\Supervisor))\r\n2023-01-23 17:30:46 #14 /var/www/html/vendor/laravel/framework/src/Illuminate/Container/BoundMethod.php(36): Laravel\\\\Horizon\\\\Console\\\\SupervisorCommand->handle(Object(Laravel\\\\Horizon\\\\SupervisorFactory))\r\n2023-01-23 17:30:46 #15 /var/www/html/vendor/laravel/framework/src/Illuminate/Container/Util.php(41): Illuminate\\\\Container\\\\BoundMethod::Illuminate\\\\Container\\\\{closure}()\r\n2023-01-23 17:30:46 #16 /var/www/html/vendor/laravel/framework/src/Illuminate/Container/BoundMethod.php(93): Illuminate\\\\Container\\\\Util::unwrapIfClosure(Object(Closure))\r\n2023-01-23 17:30:46 #17 /var/www/html/vendor/laravel/framework/src/Illuminate/Container/BoundMethod.php(35): Illuminate\\\\Container\\\\BoundMethod::callBoundMethod(Object(Illuminate\\\\Foundation\\\\Application), Array, Object(Closure))\r\n2023-01-23 17:30:46 #18 /var/www/html/vendor/laravel/framework/src/Illuminate/Container/Container.php(663): Illuminate\\\\Container\\\\BoundMethod::call(Object(Illuminate\\\\Foundation\\\\Application), Array, Array, NULL)\r\n2023-01-23 17:30:46 #19 /var/www/html/vendor/laravel/framework/src/Illuminate/Console/Command.php(182): Illuminate\\\\Container\\\\Container->call(Array)\r\n2023-01-23 17:30:46 #20 /var/www/html/vendor/symfony/console/Command/Command.php(312): Illuminate\\\\Console\\\\Command->execute(Object(Symfony\\\\Component\\\\Console\\\\Input\\\\ArgvInput), Object(Illuminate\\\\Console\\\\OutputStyle))\r\n2023-01-23 17:30:46 #21 /var/www/html/vendor/laravel/framework/src/Illuminate/Console/Command.php(151): Symfony\\\\Component\\\\Console\\\\Command\\\\Command->run(Object(Symfony\\\\Component\\\\Console\\\\Input\\\\ArgvInput), Object(Illuminate\\\\Console\\\\OutputStyle))\r\n2023-01-23 17:30:46 #22 /var/www/html/vendor/symfony/console/Application.php(1022): Illuminate\\\\Console\\\\Command->run(Object(Symfony\\\\Component\\\\Console\\\\Input\\\\ArgvInput), Object(Symfony\\\\Component\\\\Console\\\\Output\\\\ConsoleOutput))\r\n2023-01-23 17:30:46 #23 /var/www/html/vendor/symfony/console/Application.php(314): Symfony\\\\Component\\\\Console\\\\Application->doRunCommand(Object(Laravel\\\\Horizon\\\\Console\\\\SupervisorCommand), Object(Symfony\\\\Component\\\\Console\\\\Input\\\\ArgvInput), Object(Symfony\\\\Component\\\\Console\\\\Output\\\\ConsoleOutput))\r\n2023-01-23 17:30:46 #24 /var/www/html/vendor/symfony/console/Application.php(168): Symfony\\\\Component\\\\Console\\\\Application->doRun(Object(Symfony\\\\Component\\\\Console\\\\Input\\\\ArgvInput), Object(Symfony\\\\Component\\\\Console\\\\Output\\\\ConsoleOutput))\r\n2023-01-23 17:30:46 #25 /var/www/html/vendor/laravel/framework/src/Illuminate/Console/Application.php(102): Symfony\\\\Component\\\\Console\\\\Application->run(Object(Symfony\\\\Component\\\\Console\\\\Input\\\\ArgvInput), Object(Symfony\\\\Component\\\\Console\\\\Output\\\\ConsoleOutput))\r\n2023-01-23 17:30:46 #26 /var/www/html/vendor/laravel/framework/src/Illuminate/Foundation/Console/Kernel.php(155): Illuminate\\\\Console\\\\Application->run(Object(Symfony\\\\Component\\\\Console\\\\Input\\\\ArgvInput), Object(Symfony\\\\Component\\\\Console\\\\Output\\\\ConsoleOutput))\r\n2023-01-23 17:30:46 #27 /var/www/html/artisan(35): Illuminate\\\\Foundation\\\\Console\\\\Kernel->handle(Object(Symfony\\\\Component\\\\Console\\\\Input\\\\ArgvInput), Object(Symfony\\\\Component\\\\Console\\\\Output\\\\ConsoleOutput))\r\n2023-01-23 17:30:46 #28 {main}\r\n2023-01-23 17:30:46 \"}\r\n```\nDebug point where app got deadlock\r\nhttps://github.com/laravel/framework/blob/9.x/src/Illuminate/Queue/RedisQueue.php#L153 \r\n\r\n```\r\n2023-01-23 18:38:23 [2023-01-23 15:38:22] production.INFO: push  \r\n2023-01-23 18:38:23 [2023-01-23 15:38:22] production.INFO: createPayloadArray  \r\n2023-01-23 18:38:23 [2023-01-23 15:38:22] production.INFO: enqueueUsing  \r\n2023-01-23 18:38:23 [2023-01-23 15:38:22] production.INFO: pushRaw  \r\n2023-01-23 18:38:23 [2023-01-23 15:38:22] production.INFO: pushRaw start  \r\n2023-01-23 18:38:23 [2023-01-23 15:38:22] production.INFO: queue: default  \r\n2023-01-23 18:38:23 [2023-01-23 15:38:22] production.INFO: payload: {\"uuid\":\"8ce3e32e-562d-4700-8f6e-bc93b6252246\",\"displayName\":\"App\\\\Jobs\\\\TestJob\",\"job\":\"Illuminate\\\\Queue\\\\CallQueuedHandler@call\",\"maxTries\":null,\"maxExceptions\":null,\"failOnTimeout\":false,\"backoff\":null,\"timeout\":null,\"retryUntil\":null,\"data\":{\"commandName\":\"App\\\\Jobs\\\\TestJob\",\"command\":\"O:16:\\\"App\\\\Jobs\\\\TestJob\\\":2:{s:9:\\\"cacheUuid\\\";s:36:\\\"aaf538de-a7c3-46c2-90d4-5f1ead579f67\\\";s:5:\\\"queue\\\";s:7:\\\"default\\\";}\"},\"id\":\"8ce3e32e-562d-4700-8f6e-bc93b6252246\",\"attempts\":0,\"type\":\"job\",\"tags\":[],\"pushedAt\":\"1674488302.7366\"}  \r\n```\r\n30 second delay and then got another output\r\n```\r\n2023-01-23 18:38:54 [2023-01-23 15:38:53] production.INFO: push  \r\n2023-01-23 18:38:54 [2023-01-23 15:38:53] production.INFO: createPayloadArray  \r\n2023-01-23 18:38:54 [2023-01-23 15:38:53] production.INFO: enqueueUsing  \r\n2023-01-23 18:38:54 [2023-01-23 15:38:53] production.INFO: pushRaw  \r\n2023-01-23 18:38:54 [2023-01-23 15:38:53] production.INFO: pushRaw start  \r\n2023-01-23 18:38:54 [2023-01-23 15:38:53] production.INFO: queue: default  \r\n2023-01-23 18:38:54 [2023-01-23 15:38:53] production.INFO: {\"uuid\":\"d952eb75-5b82-42dd-b033-6730e2b8297c\",\"displayName\":\"App\\\\Jobs\\\\TestJob\",\"job\":\"Illuminate\\\\Queue\\\\CallQueuedHandler@call\",\"maxTries\":null,\"maxExceptions\":null,\"failOnTimeout\":false,\"backoff\":null,\"timeout\":null,\"retryUntil\":null,\"data\":{\"commandName\":\"App\\\\Jobs\\\\TestJob\",\"command\":\"O:16:\\\"App\\\\Jobs\\\\TestJob\\\":2:{s:9:\\\"cacheUuid\\\";s:36:\\\"d84bfeca-dbb4-4b23-8bce-7cc989198b2d\\\";s:5:\\\"queue\\\";s:7:\\\"default\\\";}\"},\"id\":\"d952eb75-5b82-42dd-b033-6730e2b8297c\",\"attempts\":0,\"type\":\"job\",\"tags\":[],\"pushedAt\":\"1674488333.7774\"}\r\n```\nBelow a simplified docker compose to run against  dev dragonfly on host (outside of docker compose):\r\n\r\nwith  `docker compose -f ./docker-compose-lavarel.yml up` \r\n\r\non my machine it crashes after a few seconds:\r\n```\r\nF20230123 18:01:10.395542 1857614 transaction.cc:1113] Check failed: trans == this \r\n*** Check failure stack trace: ***\r\n    @     0x55a94ed8ab3d  google::LogMessage::Fail()\r\n    @     0x55a94ed8aa84  google::LogMessage::SendToLog()\r\n    @     0x55a94ed8a27a  google::LogMessage::Flush()\r\n    @     0x55a94ed8df5c  google::LogMessageFatal::~LogMessageFatal()\r\n    @     0x55a94e7fb7ac  dfly::Transaction::UnlockMultiShardCb()\r\n```\r\n\r\n\r\n```yaml\r\nversion: '3.8'\r\n\r\nnetworks:\r\n  app_test_network:\r\n    name: app_test_network\r\n\r\nservices:\r\n  app_laravel:\r\n    build:\r\n      context: src\r\n      dockerfile: Dockerfile\r\n    restart: always\r\n    image: fannyfan/laravel-redis-dragonfly:app_v1\r\n    command: [\"./init-octane.sh\"]\r\n    ports:\r\n      - 8000:8000\r\n    environment:\r\n      - HORIZON_FAST_WORKERS_COUNT=5\r\n      - HORIZON_SLOW_WORKERS_COUNT=5\r\n      - OCTANE_WORKERS_COUNT=5\r\n      - OCTANE_TASK_WORKERS_COUNT=1\r\n      - OCTANE_PORT=8000\r\n      - OCTANE_HOST=app\r\n      - REDIS_PASSWORD=\r\n      - REDIS_HOST=host.docker.internal\r\n      - REDIS_PORT=6379\r\n    networks:\r\n      - app_test_network\r\n    extra_hosts:\r\n      - 'host.docker.internal:host-gateway'      \r\n    deploy:\r\n      mode: replicated\r\n      replicas: 1\r\n      placement:\r\n        max_replicas_per_node: 1\r\n      \r\n  app_laravel_horizon:\r\n    image: fannyfan/laravel-redis-dragonfly:app_v1\r\n    command: [\"./init-horizon.sh\"]\r\n    restart: always\r\n    environment:\r\n      - HORIZON_FAST_WORKERS_COUNT=5\r\n      - HORIZON_SLOW_WORKERS_COUNT=5\r\n      - OCTANE_WORKERS_COUNT=5\r\n      - OCTANE_TASK_WORKERS_COUNT=1\r\n      - OCTANE_PORT=8000\r\n      - OCTANE_HOST=app\r\n      - REDIS_HOST=host.docker.internal\r\n      - REDIS_PASSWORD=\r\n      - REDIS_PORT=6379\r\n    networks:\r\n      - app_test_network\r\n    extra_hosts:\r\n      - 'host.docker.internal:host-gateway'      \r\n    deploy:\r\n      mode: replicated\r\n      replicas: 2\r\n      placement:\r\n        max_replicas_per_node: 1\r\n```",
  "created_at": "2023-01-24T11:05:51Z",
  "modified_files": [
    "src/server/transaction.cc"
  ],
  "modified_test_files": [
    "src/server/dragonfly_test.cc"
  ]
}