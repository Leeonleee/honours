diff --git a/src/server/db_slice.cc b/src/server/db_slice.cc
index 5d7db9d38dba..b6c25e10f822 100644
--- a/src/server/db_slice.cc
+++ b/src/server/db_slice.cc
@@ -1451,6 +1451,10 @@ void DbSlice::ResetEvents() {
   events_ = {};
 }
 
+void DbSlice::SetNotifyKeyspaceEvents(std::string_view notify_keyspace_events) {
+  expired_keys_events_recording_ = !notify_keyspace_events.empty();
+}
+
 void DbSlice::SendInvalidationTrackingMessage(std::string_view key) {
   if (client_tracking_map_.empty())
     return;
diff --git a/src/server/db_slice.h b/src/server/db_slice.h
index 546faac2b67b..16799530a95a 100644
--- a/src/server/db_slice.h
+++ b/src/server/db_slice.h
@@ -511,6 +511,10 @@ class DbSlice {
     return pt->Traverse(cursor, std::forward<Cb>(cb));
   }
 
+  // Does not check for non supported events. Callers must parse the string and reject it
+  // if it's not empty and not EX.
+  void SetNotifyKeyspaceEvents(std::string_view notify_keyspace_events);
+
  private:
   void PreUpdate(DbIndex db_ind, Iterator it, std::string_view key);
   void PostUpdate(DbIndex db_ind, Iterator it, std::string_view key, size_t orig_size);
diff --git a/src/server/main_service.cc b/src/server/main_service.cc
index 3e4724c4519e..7ea727f6c748 100644
--- a/src/server/main_service.cc
+++ b/src/server/main_service.cc
@@ -931,6 +931,25 @@ void Service::Init(util::AcceptServer* acceptor, std::vector<facade::Listener*>
   config_registry.RegisterMutable("table_growth_margin");
   config_registry.RegisterMutable("tcp_keepalive");
 
+  config_registry.RegisterMutable(
+      "notify_keyspace_events", [pool = &pp_](const absl::CommandLineFlag& flag) {
+        auto res = flag.TryGet<std::string>();
+        if (!res.has_value() || (!res->empty() && !absl::EqualsIgnoreCase(*res, "EX"))) {
+          return false;
+        }
+
+        pool->AwaitBrief([&res](unsigned, auto*) {
+          auto* shard = EngineShard::tlocal();
+          if (shard) {
+            auto shard_id = shard->shard_id();
+            auto& db_slice = namespaces.GetDefaultNamespace().GetDbSlice(shard_id);
+            db_slice.SetNotifyKeyspaceEvents(*res);
+          }
+        });
+
+        return true;
+      });
+
   serialization_max_chunk_size = GetFlag(FLAGS_serialization_max_chunk_size);
   uint32_t shard_num = GetFlag(FLAGS_num_shards);
   if (shard_num == 0 || shard_num > pp_.size()) {
