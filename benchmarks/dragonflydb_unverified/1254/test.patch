diff --git a/src/server/test_utils.cc b/src/server/test_utils.cc
index 9afd0cada70f..0ba6f4b9ce3a 100644
--- a/src/server/test_utils.cc
+++ b/src/server/test_utils.cc
@@ -62,16 +62,7 @@ TestConnection::TestConnection(Protocol protocol, io::StringSink* sink)
 }
 
 void TestConnection::SendPubMessageAsync(PubMessage pmsg) {
-  if (auto* ptr = std::get_if<PubMessage::MessageData>(&pmsg.data); ptr != nullptr) {
-    messages.push_back(move(*ptr));
-  } else if (auto* ptr = std::get_if<PubMessage::SubscribeData>(&pmsg.data); ptr != nullptr) {
-    RedisReplyBuilder builder(sink_);
-    const char* action[2] = {"unsubscribe", "subscribe"};
-    builder.StartArray(3);
-    builder.SendBulkString(action[ptr->add]);
-    builder.SendBulkString(ptr->channel);
-    builder.SendLong(ptr->channel_cnt);
-  }
+  messages.push_back(move(pmsg));
 }
 
 class BaseFamilyTest::TestConnWrapper {
@@ -84,7 +75,7 @@ class BaseFamilyTest::TestConnWrapper {
   RespVec ParseResponse(bool fully_consumed);
 
   // returns: type(pmessage), pattern, channel, message.
-  const facade::Connection::PubMessage::MessageData& GetPubMessage(size_t index) const;
+  const facade::Connection::PubMessage& GetPubMessage(size_t index) const;
 
   ConnectionContext* cmd_cntx() {
     return &cmd_cntx_;
@@ -375,7 +366,7 @@ RespVec BaseFamilyTest::TestConnWrapper::ParseResponse(bool fully_consumed) {
   return res;
 }
 
-const facade::Connection::PubMessage::MessageData& BaseFamilyTest::TestConnWrapper::GetPubMessage(
+const facade::Connection::PubMessage& BaseFamilyTest::TestConnWrapper::GetPubMessage(
     size_t index) const {
   CHECK_LT(index, dummy_conn_->messages.size());
   return dummy_conn_->messages[index];
@@ -406,8 +397,8 @@ size_t BaseFamilyTest::SubscriberMessagesLen(string_view conn_id) const {
   return it->second->conn()->messages.size();
 }
 
-const facade::Connection::PubMessage::MessageData& BaseFamilyTest::GetPublishedMessage(
-    string_view conn_id, size_t index) const {
+const facade::Connection::PubMessage& BaseFamilyTest::GetPublishedMessage(string_view conn_id,
+                                                                          size_t index) const {
   auto it = connections_.find(conn_id);
   CHECK(it != connections_.end());
 
diff --git a/src/server/test_utils.h b/src/server/test_utils.h
index e30710cafff6..b3f5c2ab4af7 100644
--- a/src/server/test_utils.h
+++ b/src/server/test_utils.h
@@ -23,7 +23,7 @@ class TestConnection : public facade::Connection {
 
   void SendPubMessageAsync(PubMessage pmsg) final;
 
-  std::vector<PubMessage::MessageData> messages;
+  std::vector<PubMessage> messages;
 
  private:
   io::StringSink* sink_;
@@ -87,8 +87,8 @@ class BaseFamilyTest : public ::testing::Test {
   std::string GetId() const;
   size_t SubscriberMessagesLen(std::string_view conn_id) const;
 
-  const facade::Connection::PubMessage::MessageData& GetPublishedMessage(std::string_view conn_id,
-                                                                         size_t index) const;
+  const facade::Connection::PubMessage& GetPublishedMessage(std::string_view conn_id,
+                                                            size_t index) const;
 
   static unsigned NumLocked();
 
diff --git a/tests/dragonfly/connection_test.py b/tests/dragonfly/connection_test.py
index 8de7696185c8..30ea1eb7ba18 100644
--- a/tests/dragonfly/connection_test.py
+++ b/tests/dragonfly/connection_test.py
@@ -335,3 +335,14 @@ async def test_subscribe_pipelined(async_client: aioredis.Redis):
     pipe.execute_command('subscribe channel').execute_command(
         'subscribe channel')
     await pipe.echo('bye bye').execute()
+
+async def test_subscribe_in_pipeline(async_client: aioredis.Redis):
+    pipe = async_client.pipeline(transaction=False)
+    pipe.echo("one")
+    pipe.execute_command("SUBSCRIBE ch1")
+    pipe.echo("two")
+    pipe.execute_command("SUBSCRIBE ch2")
+    pipe.echo("three")
+    res = await pipe.execute()
+
+    assert res == ['one', ['subscribe', 'ch1', 1], 'two', ['subscribe', 'ch2', 2], 'three']
