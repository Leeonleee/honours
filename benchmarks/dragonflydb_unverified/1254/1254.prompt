You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
PubSub out of order confirmations
Hi, congratulations on the release of 1.3.0! I am very excited about the new release.

However, I found there is an out-of-order issue for the SUBSCRIBE/PSUBSCRIBE responses while testing the latest release with my RESP3 client (https://github.com/redis/rueidis) by the following code:

```go
package main

import (
	"context"
	"fmt"
	"github.com/redis/rueidis"
)

func main() {
	client, err := rueidis.NewClient(rueidis.ClientOption{
		InitAddress:  []string{"127.0.0.1:6379"},
		DisableCache: true,
	})
	if err != nil {
		panic(err)
	}
	defer client.Close()
	for _, resp := range client.DoMulti(
		context.Background(),
		client.B().Set().Key("key1").Value("1").Build(),
		client.B().Get().Key("key1").Build(),
		client.B().Subscribe().Channel("ch1").Build(),
		client.B().Set().Key("key2").Value("2").Build(),
		client.B().Get().Key("key2").Build(),
		client.B().Psubscribe().Pattern("ch2").Build(),
	) {
		fmt.Println(resp.ToString())
	}
}

```

This code works will pipeline the following commands to the server in RESP3:
```
SET key1 1
GET key1
SUBSCRIBE ch1
SET key2 2
GET key2
PSUBSCRIBE ch2
```

and it works well with the official redis but easily get failed on the dragonfly.

That is because the dragonfly sends responses in an out-of-order way:

```
redis:
+ OK
$ 1
> subscribe ch1
+ OK
$ 2
> psubscribe ch2
```
```
dragonfly:
+ OK
$ 1
+ OK
$ 2
> psubscribe ch2
> subscribe ch1
```

I believe the out-of-order behavior is a bug because a SUBSCRIBE/PSUBSCRIBE/SSUBSCRIBE command may still result in an ERR response and the correct order is the only way to check if the command succeeded.
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
