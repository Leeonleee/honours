diff --git a/src/server/cluster/cluster_family_test.cc b/src/server/cluster/cluster_family_test.cc
index a2489e1e948b..173409745fb4 100644
--- a/src/server/cluster/cluster_family_test.cc
+++ b/src/server/cluster/cluster_family_test.cc
@@ -696,7 +696,7 @@ class ClusterFamilyEmulatedTest : public ClusterFamilyTest {
  public:
   ClusterFamilyEmulatedTest() {
     SetTestFlag("cluster_mode", "emulated");
-    SetTestFlag("announce_ip", "fake-host");
+    SetTestFlag("cluster_announce_ip", "fake-host");
   }
 };
 
diff --git a/tests/dragonfly/cluster_test.py b/tests/dragonfly/cluster_test.py
index 4fe63ac3c1c5..4f4c92a8a424 100644
--- a/tests/dragonfly/cluster_test.py
+++ b/tests/dragonfly/cluster_test.py
@@ -213,7 +213,7 @@ def test_cluster_pipeline(self, cluster_client: redis.RedisCluster):
 
 # Unfortunately we can't test --announce_port here because that causes the Python Cluster client to
 # throw if it can't access the port in `CLUSTER SLOTS` :|
-@dfly_args({"cluster_mode": "emulated", "announce_ip": "127.0.0.2"})
+@dfly_args({"cluster_mode": "emulated", "cluster_announce_ip": "127.0.0.2"})
 class TestEmulatedWithAnnounceIp:
     def test_cluster_slots_command(self, df_server, cluster_client: redis.RedisCluster):
         expected = {(0, 16383): {"primary": ("127.0.0.2", df_server.port), "replicas": []}}
@@ -361,7 +361,7 @@ async def test_cluster_info(async_client):
     }
 
 
-@dfly_args({"cluster_mode": "emulated", "announce_ip": "127.0.0.2"})
+@dfly_args({"cluster_mode": "emulated", "cluster_announce_ip": "127.0.0.2"})
 @pytest.mark.asyncio
 async def test_cluster_nodes(df_server, async_client):
     res = await async_client.execute_command("CLUSTER NODES")
diff --git a/tests/dragonfly/replication_test.py b/tests/dragonfly/replication_test.py
index f52e9009b6ad..e224dde77b3e 100644
--- a/tests/dragonfly/replication_test.py
+++ b/tests/dragonfly/replication_test.py
@@ -2321,7 +2321,7 @@ async def test_replica_reconnect(df_factory, break_conn):
 @pytest.mark.asyncio
 async def test_announce_ip_port(df_factory):
     master = df_factory.create()
-    replica = df_factory.create(announce_ip="overrode-host", announce_port="1337")
+    replica = df_factory.create(replica_announce_ip="overrode-host", announce_port="1337")
 
     master.start()
     replica.start()
@@ -2418,7 +2418,7 @@ async def test_replicate_old_master(
     released_dfly_path = download_dragonfly_release(dfly_version)
     master = df_factory.create(version=1.19, path=released_dfly_path, cluster_mode=cluster_mode)
     replica = df_factory.create(
-        cluster_mode=cluster_mode, announce_ip=announce_ip, announce_port=announce_port
+        cluster_mode=cluster_mode, cluster_announce_ip=announce_ip, announce_port=announce_port
     )
 
     df_factory.start_all([master, replica])
