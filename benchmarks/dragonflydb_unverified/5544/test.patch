diff --git a/tests/dragonfly/cluster_test.py b/tests/dragonfly/cluster_test.py
index b321a666b023..ac1d977f4a80 100644
--- a/tests/dragonfly/cluster_test.py
+++ b/tests/dragonfly/cluster_test.py
@@ -3357,3 +3357,59 @@ async def test_slot_migration_oom(df_factory):
     assert status[0][0] == "in"
     # Error message
     assert status[0][4] == "INCOMING_MIGRATION_OOM"
+
+
+@dfly_args({"proactor_threads": 4, "cluster_mode": "yes"})
+async def test_replica_takeover_moved(
+    df_factory: DflyInstanceFactory, df_seeder_factory: DflySeederFactory
+):
+    instances = [df_factory.create(port=next(next_port)) for i in range(4)]
+    df_factory.start_all(instances)
+
+    nodes = [await create_node_info(n) for n in instances]
+    m1, r1, m2, r2 = nodes
+    master_nodes = [m1, m2]
+
+    m1.slots = [(0, 9000)]
+    m2.slots = [(9001, 16383)]
+
+    m1.replicas = [r1]
+    m2.replicas = [r2]
+
+    await push_config(json.dumps(generate_config(master_nodes)), [node.client for node in nodes])
+
+    logging.debug("create data")
+    await m1.client.execute_command("SET X 1")
+    # Slot number 16022
+    await m2.client.execute_command("SET FOOX 1")
+
+    logging.debug("start replication")
+    await r1.client.execute_command(f"replicaof localhost {m1.instance.port}")
+    await r2.client.execute_command(f"replicaof localhost {m2.instance.port}")
+
+    await wait_available_async(r1.client)
+
+    assert await r1.client.execute_command("GET X") == "1"
+    assert await r1.client.execute_command("REPLTAKEOVER 20") == "OK"
+
+    with pytest.raises(redis.exceptions.ResponseError) as moved_error:
+        await m1.client.execute_command("GET X")
+
+    assert str(moved_error.value) == f"MOVED 7165 127.0.0.1:{r1.instance.port}"
+
+    with pytest.raises(redis.exceptions.ResponseError) as moved_error:
+        await m1.client.execute_command("GET FOOX")
+
+    assert str(moved_error.value) == f"MOVED 16022 127.0.0.1:{m2.instance.port}"
+
+    # Try write command on the new master. It should succeed because during takeover,
+    # we updated the config as well
+    assert await r1.client.execute_command("SET X 2") == "OK"
+
+    master_nodes = [r1, m2]
+    r1.slots = [(0, 9000)]
+    nodes.pop(0)
+    await push_config(json.dumps(generate_config(master_nodes)), [node.client for node in nodes])
+
+    assert await r1.client.execute_command("GET X") == "2"
+    assert await m2.client.execute_command("GET FOOX") == "1"
