{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 1156,
  "instance_id": "dragonflydb__dragonfly-1156",
  "issue_numbers": [
    "1151"
  ],
  "base_commit": "494ca14e4e42b1738ed8a07efff16eeea0bb893e",
  "patch": "diff --git a/src/server/main_service.cc b/src/server/main_service.cc\nindex a0d5f0bef350..7ce10cbfece8 100644\n--- a/src/server/main_service.cc\n+++ b/src/server/main_service.cc\n@@ -625,7 +625,7 @@ bool Service::VerifyCommand(const CommandId* cid, CmdArgList args,\n   string_view cmd_name{cid->name()};\n \n   if (cntx->req_auth && !cntx->authenticated) {\n-    if (cmd_name != \"AUTH\" && cmd_name != \"QUIT\") {\n+    if (cmd_name != \"AUTH\" && cmd_name != \"QUIT\" && cmd_name != \"HELLO\") {\n       (*cntx)->SendError(\"-NOAUTH Authentication required.\");\n       return false;\n     }\ndiff --git a/src/server/server_family.cc b/src/server/server_family.cc\nindex a5ea9dccfb7d..9fc147ebe640 100644\n--- a/src/server/server_family.cc\n+++ b/src/server/server_family.cc\n@@ -1757,16 +1757,61 @@ void ServerFamily::Info(CmdArgList args, ConnectionContext* cntx) {\n \n void ServerFamily::Hello(CmdArgList args, ConnectionContext* cntx) {\n   // If no arguments are provided default to RESP2.\n-  // AUTH and SETNAME options are not supported.\n   bool is_resp3 = false;\n+  bool has_auth = false;\n+  bool has_setname = false;\n+  string_view username;\n+  string_view password;\n+  string_view clientname;\n+\n   if (args.size() > 0) {\n     string_view proto_version = ArgS(args, 0);\n     is_resp3 = proto_version == \"3\";\n     bool valid_proto_version = proto_version == \"2\" || is_resp3;\n-    if (!valid_proto_version || args.size() > 1) {\n+    if (!valid_proto_version) {\n       (*cntx)->SendError(UnknownCmd(\"HELLO\", args));\n       return;\n     }\n+\n+    for (uint32_t i = 1; i < args.size(); i++) {\n+      auto sub_cmd = ArgS(args, i);\n+      auto moreargs = args.size() - 1 - i;\n+      if (absl::EqualsIgnoreCase(sub_cmd, \"AUTH\") && moreargs >= 2) {\n+        has_auth = true;\n+        username = ArgS(args, i + 1);\n+        password = ArgS(args, i + 2);\n+        i += 2;\n+      } else if (absl::EqualsIgnoreCase(sub_cmd, \"SETNAME\") && moreargs > 0) {\n+        has_setname = true;\n+        clientname = ArgS(args, i + 1);\n+        i += 1;\n+      } else {\n+        (*cntx)->SendError(kSyntaxErr);\n+        return;\n+      }\n+    }\n+  }\n+\n+  if (has_auth) {\n+    if (username == \"default\" && password == GetPassword()) {\n+      cntx->authenticated = true;\n+    } else {\n+      (*cntx)->SendError(facade::kAuthRejected);\n+      return;\n+    }\n+  }\n+\n+  if (cntx->req_auth && !cntx->authenticated) {\n+    (*cntx)->SendError(\n+        \"-NOAUTH HELLO must be called with the client already \"\n+        \"authenticated, otherwise the HELLO <proto> AUTH <user> <pass> \"\n+        \"option can be used to authenticate the client and \"\n+        \"select the RESP protocol version at the same time\");\n+    return;\n+  }\n+\n+  if (has_setname) {\n+    cntx->owner()->SetName(string{clientname});\n   }\n \n   int proto_version = 2;\n",
  "test_patch": "diff --git a/src/server/dragonfly_test.cc b/src/server/dragonfly_test.cc\nindex c6316e0c09e8..a5a6b7662f28 100644\n--- a/src/server/dragonfly_test.cc\n+++ b/src/server/dragonfly_test.cc\n@@ -235,11 +235,17 @@ TEST_F(DflyEngineTest, Hello) {\n                           ArgType(RespExpr::STRING), \"proto\", IntArg(3), \"id\",\n                           ArgType(RespExpr::INT64), \"mode\", \"standalone\", \"role\", \"master\"));\n \n-  // These are valid arguments to HELLO, however as they are not yet supported the implementation\n-  // is degraded to 'unknown command'.\n-  EXPECT_THAT(\n-      Run({\"hello\", \"2\", \"AUTH\", \"uname\", \"pwd\"}),\n-      ErrArg(\"ERR unknown command 'HELLO' with args beginning with: `2`, `AUTH`, `uname`, `pwd`\"));\n+  EXPECT_THAT(Run({\"hello\", \"2\", \"AUTH\", \"uname\", \"pwd\"}),\n+              ErrArg(\"WRONGPASS invalid username-password pair or user is disabled.\"));\n+\n+  EXPECT_THAT(Run({\"hello\", \"2\", \"AUTH\", \"default\", \"pwd\"}),\n+              ErrArg(\"WRONGPASS invalid username-password pair or user is disabled.\"));\n+\n+  resp = Run({\"hello\", \"3\", \"AUTH\", \"default\", \"\"});\n+  ASSERT_THAT(resp, ArrLen(14));\n+\n+  resp = Run({\"hello\", \"3\", \"AUTH\", \"default\", \"\", \"SETNAME\", \"myname\"});\n+  ASSERT_THAT(resp, ArrLen(14));\n }\n \n TEST_F(DflyEngineTest, Memcache) {\n",
  "problem_statement": "Support AUTH and SETNAME options in HELLO\nHi, hope you are all doing well.\r\n\r\nI am making a redis RESP3 client, rueidis, and one user reported an issue https://github.com/rueian/rueidis/issues/207 about my client implementation can't be authenticated by dragonflydb because my client sent AUTH option in HELLO command which is allowed by redis https://redis.io/commands/hello/.\r\n\r\nI noticed that here states Dragonfly doesn't support AUTH and SETNAME options in a HELLO command.\r\nhttps://github.com/dragonflydb/dragonfly/blob/574ae24feceba600c5aa1fe4683b7eee64fe9ce8/src/server/server_family.cc#L1758-L1760\r\n\r\nNot sure why is it, but I believe most RESP3 clients will send these options in HELLO command at once to reduce roundtrips.\r\n\r\n\r\n\r\n\n",
  "hints_text": "Thank you, @rueian - we should indeed implement it!",
  "created_at": "2023-04-28T13:36:23Z",
  "modified_files": [
    "src/server/main_service.cc",
    "src/server/server_family.cc"
  ],
  "modified_test_files": [
    "src/server/dragonfly_test.cc"
  ]
}