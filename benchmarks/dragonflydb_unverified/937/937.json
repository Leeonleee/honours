{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 937,
  "instance_id": "dragonflydb__dragonfly-937",
  "issue_numbers": [
    "935"
  ],
  "base_commit": "97e38aebd29be286e4cc07a87ace0c01b30844f5",
  "patch": "diff --git a/src/facade/dragonfly_connection.cc b/src/facade/dragonfly_connection.cc\nindex eff1079cdbbd..ba92077668ff 100644\n--- a/src/facade/dragonfly_connection.cc\n+++ b/src/facade/dragonfly_connection.cc\n@@ -300,8 +300,12 @@ void Connection::DispatchOperations::operator()(const PubMsgRecord& msg) {\n \n void Connection::DispatchOperations::operator()(Request::PipelineMsg& msg) {\n   ++stats->pipelined_cmd_cnt;\n-  bool empty = self->dispatch_q_.empty();\n-  builder->SetBatchMode(!empty);\n+  self->pipeline_msg_cnt_--;\n+\n+  bool do_batch = (self->pipeline_msg_cnt_ > 0);\n+  DVLOG(2) << \"Dispatching pipeline: \" << ToSV(msg.args.front()) << \" \" << do_batch;\n+\n+  builder->SetBatchMode(do_batch);\n   self->cc_->async_dispatch = true;\n   self->service_->DispatchCommand(CmdArgList{msg.args.data(), msg.args.size()}, self->cc_.get());\n   self->last_interaction_ = time(nullptr);\n@@ -650,13 +654,16 @@ auto Connection::ParseRedis() -> ParserStatus {\n           }\n         }\n         RespToArgList(parse_args_, &cmd_vec_);\n+\n+        DVLOG(2) << \"Sync dispatch \" << ToSV(cmd_vec_.front());\n+\n         CmdArgList cmd_list{cmd_vec_.data(), cmd_vec_.size()};\n         service_->DispatchCommand(cmd_list, cc_.get());\n         last_interaction_ = time(nullptr);\n       } else {\n         // Dispatch via queue to speedup input reading.\n         RequestPtr req = FromArgs(std::move(parse_args_), tlh);\n-\n+        ++pipeline_msg_cnt_;\n         dispatch_q_.push_back(std::move(req));\n         if (dispatch_q_.size() == 1) {\n           evc_.notify();\ndiff --git a/src/facade/dragonfly_connection.h b/src/facade/dragonfly_connection.h\nindex 2836a6d0c0b2..1621f69747a7 100644\n--- a/src/facade/dragonfly_connection.h\n+++ b/src/facade/dragonfly_connection.h\n@@ -147,6 +147,8 @@ class Connection : public util::Connection {\n   RequestPtr FromArgs(RespVec args, mi_heap_t* heap);\n \n   std::deque<RequestPtr> dispatch_q_;  // coordinated via evc_.\n+  uint32_t pipeline_msg_cnt_ = 0;\n+\n   static thread_local std::vector<RequestPtr> free_req_pool_;\n   util::fibers_ext::EventCount evc_;\n \ndiff --git a/src/facade/reply_builder.cc b/src/facade/reply_builder.cc\nindex 1e1dbdbe779c..efd91ed6125d 100644\n--- a/src/facade/reply_builder.cc\n+++ b/src/facade/reply_builder.cc\n@@ -47,13 +47,19 @@ void SinkReplyBuilder::Send(const iovec* v, uint32_t len) {\n   DCHECK(sink_);\n \n   if (should_batch_) {\n-    // TODO: to introduce flushing when too much data is batched.\n+    size_t total_size = batch_.size();\n     for (unsigned i = 0; i < len; ++i) {\n-      std::string_view src((char*)v[i].iov_base, v[i].iov_len);\n-      DVLOG(2) << \"Appending to stream \" << sink_ << \" \" << src;\n-      batch_.append(src.data(), src.size());\n+      total_size += v[i].iov_len;\n+    }\n+\n+    if (total_size < 8192) {  // Allow batching with up to 8K of data.\n+      for (unsigned i = 0; i < len; ++i) {\n+        std::string_view src((char*)v[i].iov_base, v[i].iov_len);\n+        DVLOG(2) << \"Appending to stream \" << src;\n+        batch_.append(src.data(), src.size());\n+      }\n+      return;\n     }\n-    return;\n   }\n \n   error_code ec;\n@@ -327,6 +333,8 @@ void RedisReplyBuilder::StartArray(unsigned len) {\n }\n \n void RedisReplyBuilder::SendStringArr(StrPtr str_ptr, uint32_t len) {\n+  DVLOG(2) << \"Sending array of \" << len << \" strings.\";\n+\n   // When vector length is too long, Send returns EMSGSIZE.\n   size_t vec_len = std::min<size_t>(256u, len);\n \n",
  "test_patch": "diff --git a/tests/README.md b/tests/README.md\nindex dbb8af28f669..9a5151313abe 100644\n--- a/tests/README.md\n+++ b/tests/README.md\n@@ -18,6 +18,11 @@ You can override the location of the binary using `DRAGONFLY_PATH` environment v\n - use `--df arg=val` to pass custom arguments to all dragonfly instances. Can be used multiple times.\n - use `--log-seeder file` to store all single-db commands from the lastest tests seeder inside file.\n \n+for example,\n+\n+```sh\n+pytest dragonfly/connection_test.py -s  --df logtostdout --df vmodule=dragonfly_connection=2 -k test_subscribe\n+```\n ### Before you start\n Please make sure that you have python 3 installed on you local host.\n If have more both python 2 and python 3 installed on you host, you can run the tests with the following command:\ndiff --git a/tests/dragonfly/connection_test.py b/tests/dragonfly/connection_test.py\nindex ffc014e4a01e..406947edc34f 100644\n--- a/tests/dragonfly/connection_test.py\n+++ b/tests/dragonfly/connection_test.py\n@@ -174,8 +174,8 @@ async def reader(channel: aioredis.client.PubSub, messages, max: int):\n     return True, \"success\"\n \n \n-async def run_pipeline_mode(async_client, messages):\n-    pipe = async_client.pipeline()\n+async def run_pipeline_mode(async_client: aioredis.Redis, messages):\n+    pipe = async_client.pipeline(transaction=False)\n     for key, val in messages.items():\n         pipe.set(key, val)\n     result = await pipe.execute()\n@@ -327,3 +327,9 @@ async def test_big_command(df_server, size=8 * 1024):\n \n     writer.close()\n     await writer.wait_closed()\n+\n+@pytest.mark.asyncio\n+async def test_subscribe_pipelined(async_client: aioredis.Redis):\n+    pipe = async_client.pipeline(transaction=False)\n+    pipe.execute_command('subscribe channel').execute_command('subscribe channel')\n+    await pipe.echo('bye bye').execute()\n",
  "problem_statement": "Connection drop on QUIT when busy\nThe connection is simply dropped when there are commands in the pipeline. Reproduce with a simple nc(1) session as follows.\r\n\r\n```\r\n% echo 'subscribe foo\\nunsubscribe foo\\nquit\\n'| nc localhost 6379\r\n% \r\n```\r\n\r\nThe server must respond to all three commands before closing the connection.\r\n\n",
  "hints_text": "",
  "created_at": "2023-03-13T19:28:50Z",
  "modified_files": [
    "src/facade/dragonfly_connection.cc",
    "src/facade/dragonfly_connection.h",
    "src/facade/reply_builder.cc"
  ],
  "modified_test_files": [
    "tests/README.md",
    "tests/dragonfly/connection_test.py"
  ]
}