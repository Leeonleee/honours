diff --git a/src/server/cluster/cluster_config_test.cc b/src/server/cluster/cluster_config_test.cc
index 2d1e3cb4edab..8d17a479f7ec 100644
--- a/src/server/cluster/cluster_config_test.cc
+++ b/src/server/cluster/cluster_config_test.cc
@@ -30,7 +30,6 @@ class ClusterConfigTest : public ::testing::Test {
   }
 
   const string kMyId = "my-id";
-  ClusterConfig config_{kMyId};
 };
 
 TEST_F(ClusterConfigTest, KeyTagTest) {
@@ -50,377 +49,365 @@ TEST_F(ClusterConfigTest, KeyTagTest) {
   ASSERT_EQ(key, ClusterConfig::KeyTag(key));
 }
 
-TEST_F(ClusterConfigTest, ConfigEmpty) {
-  // Test that empty-initialization causes none of the slots to be owned locally.
-  for (SlotId i : {0, 1, 10, 100, 1'000, 10'000, 16'000, 0x3FFF}) {
-    EXPECT_FALSE(config_.IsMySlot(i));
-  }
-}
-
 TEST_F(ClusterConfigTest, ConfigSetInvalidEmpty) {
-  EXPECT_FALSE(config_.SetConfig(ClusterConfig::ClusterShards{}));
+  EXPECT_EQ(ClusterConfig::CreateFromConfig(kMyId, ClusterConfig::ClusterShards{}), nullptr);
 }
 
 TEST_F(ClusterConfigTest, ConfigSetInvalidMissingSlots) {
-  EXPECT_FALSE(config_.SetConfig({{.slot_ranges = {{.start = 0, .end = 16000}},
-                                   .master = {.id = "other", .ip = "192.168.0.100", .port = 7000},
-                                   .replicas = {}}}));
+  EXPECT_EQ(ClusterConfig::CreateFromConfig(
+                kMyId, {{.slot_ranges = {{.start = 0, .end = 16000}},
+                         .master = {.id = "other", .ip = "192.168.0.100", .port = 7000},
+                         .replicas = {}}}),
+            nullptr);
 }
 
 TEST_F(ClusterConfigTest, ConfigSetInvalidDoubleBookedSlot) {
-  EXPECT_FALSE(config_.SetConfig({{.slot_ranges = {{.start = 0, .end = 0x3FFF}},
-                                   .master = {.id = "other", .ip = "192.168.0.100", .port = 7000},
-                                   .replicas = {}},
-                                  {.slot_ranges = {{.start = 0, .end = 0}},
-                                   .master = {.id = "other2", .ip = "192.168.0.101", .port = 7001},
-                                   .replicas = {}}}));
+  EXPECT_EQ(ClusterConfig::CreateFromConfig(
+                kMyId, {{.slot_ranges = {{.start = 0, .end = 0x3FFF}},
+                         .master = {.id = "other", .ip = "192.168.0.100", .port = 7000},
+                         .replicas = {}},
+                        {.slot_ranges = {{.start = 0, .end = 0}},
+                         .master = {.id = "other2", .ip = "192.168.0.101", .port = 7001},
+                         .replicas = {}}}),
+            nullptr);
 }
 
 TEST_F(ClusterConfigTest, ConfigSetInvalidSlotId) {
-  EXPECT_FALSE(config_.SetConfig({{.slot_ranges = {{.start = 0, .end = 0x3FFF + 1}},
-                                   .master = {.id = "other", .ip = "192.168.0.100", .port = 7000},
-                                   .replicas = {}}}));
+  EXPECT_EQ(ClusterConfig::CreateFromConfig(
+                kMyId, {{.slot_ranges = {{.start = 0, .end = 0x3FFF + 1}},
+                         .master = {.id = "other", .ip = "192.168.0.100", .port = 7000},
+                         .replicas = {}}}),
+            nullptr);
 }
 
 TEST_F(ClusterConfigTest, ConfigSetOk) {
-  EXPECT_TRUE(config_.SetConfig({{.slot_ranges = {{.start = 0, .end = 0x3FFF}},
-                                  .master = {.id = "other", .ip = "192.168.0.100", .port = 7000},
-                                  .replicas = {}}}));
-  EXPECT_THAT(config_.GetMasterNodeForSlot(0),
+  auto config = ClusterConfig::CreateFromConfig(
+      kMyId, {{.slot_ranges = {{.start = 0, .end = 0x3FFF}},
+               .master = {.id = "other", .ip = "192.168.0.100", .port = 7000},
+               .replicas = {}}});
+  EXPECT_NE(config, nullptr);
+  EXPECT_THAT(config->GetMasterNodeForSlot(0),
               NodeMatches(Node{.id = "other", .ip = "192.168.0.100", .port = 7000}));
+  EXPECT_THAT(config->GetOwnedSlots(), UnorderedElementsAre());
 }
 
 TEST_F(ClusterConfigTest, ConfigSetOkWithReplicas) {
-  EXPECT_TRUE(config_.SetConfig(
-      {{.slot_ranges = {{.start = 0, .end = 0x3FFF}},
-        .master = {.id = "other-master", .ip = "192.168.0.100", .port = 7000},
-        .replicas = {{.id = "other-replica", .ip = "192.168.0.101", .port = 7001}}}}));
-  EXPECT_THAT(config_.GetMasterNodeForSlot(0),
+  auto config = ClusterConfig::CreateFromConfig(
+      kMyId, {{.slot_ranges = {{.start = 0, .end = 0x3FFF}},
+               .master = {.id = "other-master", .ip = "192.168.0.100", .port = 7000},
+               .replicas = {{.id = "other-replica", .ip = "192.168.0.101", .port = 7001}}}});
+  EXPECT_NE(config, nullptr);
+  EXPECT_THAT(config->GetMasterNodeForSlot(0),
               NodeMatches(Node{.id = "other-master", .ip = "192.168.0.100", .port = 7000}));
 }
 
 TEST_F(ClusterConfigTest, ConfigSetMultipleInstances) {
-  EXPECT_TRUE(config_.SetConfig(
-      {{.slot_ranges = {{.start = 0, .end = 5'000}},
-        .master = {.id = "other-master", .ip = "192.168.0.100", .port = 7000},
-        .replicas = {{.id = "other-replica", .ip = "192.168.0.101", .port = 7001}}},
-       {.slot_ranges = {{.start = 5'001, .end = 10'000}},
-        .master = {.id = kMyId, .ip = "192.168.0.102", .port = 7002},
-        .replicas = {{.id = "other-replica2", .ip = "192.168.0.103", .port = 7003}}},
-       {.slot_ranges = {{.start = 10'001, .end = 0x3FFF}},
-        .master = {.id = "other-master3", .ip = "192.168.0.104", .port = 7004},
-        .replicas = {{.id = "other-replica3", .ip = "192.168.0.105", .port = 7005}}}}));
+  auto config = ClusterConfig::CreateFromConfig(
+      kMyId, {{.slot_ranges = {{.start = 0, .end = 5'000}},
+               .master = {.id = "other-master", .ip = "192.168.0.100", .port = 7000},
+               .replicas = {{.id = "other-replica", .ip = "192.168.0.101", .port = 7001}}},
+              {.slot_ranges = {{.start = 5'001, .end = 10'000}},
+               .master = {.id = kMyId, .ip = "192.168.0.102", .port = 7002},
+               .replicas = {{.id = "other-replica2", .ip = "192.168.0.103", .port = 7003}}},
+              {.slot_ranges = {{.start = 10'001, .end = 0x3FFF}},
+               .master = {.id = "other-master3", .ip = "192.168.0.104", .port = 7004},
+               .replicas = {{.id = "other-replica3", .ip = "192.168.0.105", .port = 7005}}}});
+  EXPECT_NE(config, nullptr);
+  SlotSet owned_slots = config->GetOwnedSlots();
+  EXPECT_EQ(owned_slots.size(), 5'000);
+
   {
     for (int i = 0; i <= 5'000; ++i) {
-      EXPECT_THAT(config_.GetMasterNodeForSlot(i),
+      EXPECT_THAT(config->GetMasterNodeForSlot(i),
                   NodeMatches(Node{.id = "other-master", .ip = "192.168.0.100", .port = 7000}));
-      EXPECT_FALSE(config_.IsMySlot(i));
+      EXPECT_FALSE(config->IsMySlot(i));
+      EXPECT_FALSE(owned_slots.contains(i));
     }
   }
   {
     for (int i = 5'001; i <= 10'000; ++i) {
-      EXPECT_THAT(config_.GetMasterNodeForSlot(i),
+      EXPECT_THAT(config->GetMasterNodeForSlot(i),
                   NodeMatches(Node{.id = kMyId, .ip = "192.168.0.102", .port = 7002}));
-      EXPECT_TRUE(config_.IsMySlot(i));
+      EXPECT_TRUE(config->IsMySlot(i));
+      EXPECT_TRUE(owned_slots.contains(i));
     }
   }
   {
     for (int i = 10'001; i <= 0x3FFF; ++i) {
-      EXPECT_THAT(config_.GetMasterNodeForSlot(i),
+      EXPECT_THAT(config->GetMasterNodeForSlot(i),
                   NodeMatches(Node{.id = "other-master3", .ip = "192.168.0.104", .port = 7004}));
-      EXPECT_FALSE(config_.IsMySlot(i));
+      EXPECT_FALSE(config->IsMySlot(i));
+      EXPECT_FALSE(owned_slots.contains(i));
     }
   }
 }
 
-TEST_F(ClusterConfigTest, ConfigSetGetDeletedSlots) {
-  auto ds =
-      config_.SetConfig({{.slot_ranges = {{.start = 0, .end = 16'380}},
-                          .master = {.id = kMyId, .ip = "192.168.0.100", .port = 7000},
-                          .replicas = {}},
-                         {.slot_ranges = {{.start = 16'381, .end = 0x3FFF}},
-                          .master = {.id = "other-master2", .ip = "192.168.0.104", .port = 7004},
-                          .replicas = {}}});
-
-  EXPECT_TRUE(ds.has_value());
-  // On first config non owned slots are returned as deleted
-  EXPECT_THAT(ds.value(), UnorderedElementsAre(16'381, 16'382, 16'383));
-
-  ds = config_.SetConfig({{.slot_ranges = {{.start = 0, .end = 16'381}},
-                           .master = {.id = kMyId, .ip = "192.168.0.100", .port = 7000},
-                           .replicas = {}},
-                          {.slot_ranges = {{.start = 16'382, .end = 0x3FFF}},
-                           .master = {.id = "other-master2", .ip = "192.168.0.104", .port = 7004},
-                           .replicas = {}}});
-
-  EXPECT_TRUE(ds.has_value());
-  EXPECT_TRUE(ds.value().empty());  // On second config no slots taken from ownership
-
-  ds = config_.SetConfig({{.slot_ranges = {{.start = 0, .end = 16'378}},
-                           .master = {.id = kMyId, .ip = "192.168.0.100", .port = 7000},
-                           .replicas = {}},
-                          {.slot_ranges = {{.start = 16'379, .end = 0x3FFF}},
-                           .master = {.id = "other-master2", .ip = "192.168.0.104", .port = 7004},
-                           .replicas = {}}});
-
-  EXPECT_TRUE(ds.has_value());
-  EXPECT_THAT(ds.value(), UnorderedElementsAre(16'379, 16'380, 16'381));
-}
-
 TEST_F(ClusterConfigTest, ConfigSetInvalidSlotRanges) {
   // Note that slot_ranges is not an object
-  EXPECT_FALSE(config_.SetConfig(ParseJson(R"json(
-      [
-        {
-          "slot_ranges": "0,16383",
-          "master": {
-            "id": "abcd1234",
-            "ip": "10.0.0.1",
-            "port": 7000
-          },
-          "replicas": []
-        }
-      ])json")));
+  EXPECT_EQ(ClusterConfig::CreateFromConfig(kMyId, ParseJson(R"json(
+                [
+                  {
+                    "slot_ranges": "0,16383",
+                    "master": {
+                      "id": "abcd1234",
+                      "ip": "10.0.0.1",
+                      "port": 7000
+                    },
+                    "replicas": []
+                  }
+                ])json")),
+            nullptr);
 }
 
 TEST_F(ClusterConfigTest, ConfigSetInvalidSlotRangeStart) {
   // Note that slot_ranges.start is not a number
-  EXPECT_FALSE(config_.SetConfig(ParseJson(R"json(
-      [
-        {
-          "slot_ranges": [
-            {
-              "start": "0",
-              "end": 16383
-            }
-          ],
-          "master": {
-            "id": "abcd1234",
-            "ip": "10.0.0.1",
-            "port": 7000
-          },
-          "replicas": []
-        }
-      ])json")));
+  EXPECT_EQ(ClusterConfig::CreateFromConfig(kMyId, ParseJson(R"json(
+                [
+                  {
+                    "slot_ranges": [
+                      {
+                        "start": "0",
+                        "end": 16383
+                      }
+                    ],
+                    "master": {
+                      "id": "abcd1234",
+                      "ip": "10.0.0.1",
+                      "port": 7000
+                    },
+                    "replicas": []
+                  }
+                ])json")),
+            nullptr);
 }
 
 TEST_F(ClusterConfigTest, ConfigSetInvalidSlotRangeEnd) {
   // Note that slot_ranges.end is not a number
-  EXPECT_FALSE(config_.SetConfig(ParseJson(R"json(
-      [
-        {
-          "slot_ranges": [
-            {
-              "start": 0,
-              "end": "16383"
-            }
-          ],
-          "master": {
-            "id": "abcd1234",
-            "ip": "10.0.0.1",
-            "port": 7000
-          },
-          "replicas": []
-        }
-      ])json")));
+  EXPECT_EQ(ClusterConfig::CreateFromConfig(kMyId, ParseJson(R"json(
+                [
+                  {
+                    "slot_ranges": [
+                      {
+                        "start": 0,
+                        "end": "16383"
+                      }
+                    ],
+                    "master": {
+                      "id": "abcd1234",
+                      "ip": "10.0.0.1",
+                      "port": 7000
+                    },
+                    "replicas": []
+                  }
+                ])json")),
+            nullptr);
 }
 
 TEST_F(ClusterConfigTest, ConfigSetInvalidMissingMaster) {
-  EXPECT_FALSE(config_.SetConfig(ParseJson(R"json(
-      [
-        {
-          "slot_ranges": [
-            {
-              "start": 0,
-              "end": 16383
-            }
-          ]
-        }
-      ])json")));
+  EXPECT_EQ(ClusterConfig::CreateFromConfig(kMyId, ParseJson(R"json(
+                [
+                  {
+                    "slot_ranges": [
+                      {
+                        "start": 0,
+                        "end": 16383
+                      }
+                    ]
+                  }
+                ])json")),
+            nullptr);
 }
 
 TEST_F(ClusterConfigTest, ConfigSetInvalidMasterNotObject) {
   // Note that master is not an object
-  EXPECT_FALSE(config_.SetConfig(ParseJson(R"json(
-      [
-        {
-          "slot_ranges": [
-            {
-              "start": 0,
-              "end": 16383
-            }
-          ],
-          "master": 123,
-          "replicas": []
-        }
-      ])json")));
+  EXPECT_EQ(ClusterConfig::CreateFromConfig(kMyId, ParseJson(R"json(
+                [
+                  {
+                    "slot_ranges": [
+                      {
+                        "start": 0,
+                        "end": 16383
+                      }
+                    ],
+                    "master": 123,
+                    "replicas": []
+                  }
+                ])json")),
+            nullptr);
 }
 
 TEST_F(ClusterConfigTest, ConfigSetInvalidMasterMissingId) {
-  EXPECT_FALSE(config_.SetConfig(ParseJson(R"json(
-      [
-        {
-          "slot_ranges": [
-            {
-              "start": 0,
-              "end": 16383
-            }
-          ],
-          "master": {
-            "ip": "10.0.0.0",
-            "port": 8000
-          },
-          "replicas": []
-        }
-      ])json")));
+  EXPECT_EQ(ClusterConfig::CreateFromConfig(kMyId, ParseJson(R"json(
+                [
+                  {
+                    "slot_ranges": [
+                      {
+                        "start": 0,
+                        "end": 16383
+                      }
+                    ],
+                    "master": {
+                      "ip": "10.0.0.0",
+                      "port": 8000
+                    },
+                    "replicas": []
+                  }
+                ])json")),
+            nullptr);
 }
 
 TEST_F(ClusterConfigTest, ConfigSetInvalidMasterMissingIp) {
-  EXPECT_FALSE(config_.SetConfig(ParseJson(R"json(
-      [
-        {
-          "slot_ranges": [
-            {
-              "start": 0,
-              "end": 16383
-            }
-          ],
-          "master": {
-            "id": "abcdefg",
-            "port": 8000
-          },
-          "replicas": []
-        }
-      ])json")));
+  EXPECT_EQ(ClusterConfig::CreateFromConfig(kMyId, ParseJson(R"json(
+                [
+                  {
+                    "slot_ranges": [
+                      {
+                        "start": 0,
+                        "end": 16383
+                      }
+                    ],
+                    "master": {
+                      "id": "abcdefg",
+                      "port": 8000
+                    },
+                    "replicas": []
+                  }
+                ])json")),
+            nullptr);
 }
 
 TEST_F(ClusterConfigTest, ConfigSetInvalidMasterMissingPort) {
-  EXPECT_FALSE(config_.SetConfig(ParseJson(R"json(
-      [
-        {
-          "slot_ranges": [
-            {
-              "start": 0,
-              "end": 16383
-            }
-          ],
-          "master": {
-            "id": "abcdefg",
-            "ip": "10.0.0.0"
-          },
-          "replicas": []
-        }
-      ])json")));
+  EXPECT_EQ(ClusterConfig::CreateFromConfig(kMyId, ParseJson(R"json(
+                [
+                  {
+                    "slot_ranges": [
+                      {
+                        "start": 0,
+                        "end": 16383
+                      }
+                    ],
+                    "master": {
+                      "id": "abcdefg",
+                      "ip": "10.0.0.0"
+                    },
+                    "replicas": []
+                  }
+                ])json")),
+            nullptr);
 }
 
 TEST_F(ClusterConfigTest, ConfigSetInvalidMissingReplicas) {
-  EXPECT_FALSE(config_.SetConfig(ParseJson(R"json(
-      [
-        {
-          "slot_ranges": [
-            {
-              "start": 0,
-              "end": 16383
-            }
-          ],
-          "master": {
-            "id": "abcdefg",
-            "ip": "10.0.0.0",
-            "port": 8000
-          }
-        }
-      ])json")));
+  EXPECT_EQ(ClusterConfig::CreateFromConfig(kMyId, ParseJson(R"json(
+                [
+                  {
+                    "slot_ranges": [
+                      {
+                        "start": 0,
+                        "end": 16383
+                      }
+                    ],
+                    "master": {
+                      "id": "abcdefg",
+                      "ip": "10.0.0.0",
+                      "port": 8000
+                    }
+                  }
+                ])json")),
+            nullptr);
 }
 
 TEST_F(ClusterConfigTest, ConfigSetInvalidRepeatingMasterId) {
-  EXPECT_FALSE(config_.SetConfig(ParseJson(R"json(
-      [
-        {
-          "slot_ranges": [
-            {
-              "start": 0,
-              "end": 10000
-            }
-          ],
-          "master": {
-            "id": "abcdefg",
-            "ip": "10.0.0.0",
-            "port": 8000
-          },
-          "replicas": []
-        },
-        {
-          "slot_ranges": [
-            {
-              "start": 10001,
-              "end": 16383
-            }
-          ],
-          "master": {
-            "id": "abcdefg",
-            "ip": "10.0.0.0",
-            "port": 8000
-          },
-          "replicas": []
-        }
-      ])json")));
+  EXPECT_EQ(ClusterConfig::CreateFromConfig(kMyId, ParseJson(R"json(
+                [
+                  {
+                    "slot_ranges": [
+                      {
+                        "start": 0,
+                        "end": 10000
+                      }
+                    ],
+                    "master": {
+                      "id": "abcdefg",
+                      "ip": "10.0.0.0",
+                      "port": 8000
+                    },
+                    "replicas": []
+                  },
+                  {
+                    "slot_ranges": [
+                      {
+                        "start": 10001,
+                        "end": 16383
+                      }
+                    ],
+                    "master": {
+                      "id": "abcdefg",
+                      "ip": "10.0.0.0",
+                      "port": 8000
+                    },
+                    "replicas": []
+                  }
+                ])json")),
+            nullptr);
 }
 
 TEST_F(ClusterConfigTest, ConfigSetInvalidRepeatingReplicaId) {
-  EXPECT_FALSE(config_.SetConfig(ParseJson(R"json(
-      [
-        {
-          "slot_ranges": [
-            {
-              "start": 0,
-              "end": 16383
-            }
-          ],
-          "master": {
-            "id": "abcdefg",
-            "ip": "10.0.0.0",
-            "port": 8000
-          },
-          "replicas": [
-            {
-              "id": "xyz",
-              "ip": "10.0.0.1",
-              "port": 8001
-            },
-            {
-              "id": "xyz",
-              "ip": "10.0.0.2",
-              "port": 8002
-            }
-          ]
-        }
-      ])json")));
+  EXPECT_EQ(ClusterConfig::CreateFromConfig(kMyId, ParseJson(R"json(
+                [
+                  {
+                    "slot_ranges": [
+                      {
+                        "start": 0,
+                        "end": 16383
+                      }
+                    ],
+                    "master": {
+                      "id": "abcdefg",
+                      "ip": "10.0.0.0",
+                      "port": 8000
+                    },
+                    "replicas": [
+                      {
+                        "id": "xyz",
+                        "ip": "10.0.0.1",
+                        "port": 8001
+                      },
+                      {
+                        "id": "xyz",
+                        "ip": "10.0.0.2",
+                        "port": 8002
+                      }
+                    ]
+                  }
+                ])json")),
+            nullptr);
 }
 
 TEST_F(ClusterConfigTest, ConfigSetInvalidRepeatingMasterAndReplicaId) {
-  EXPECT_FALSE(config_.SetConfig(ParseJson(R"json(
-      [
-        {
-          "slot_ranges": [
-            {
-              "start": 0,
-              "end": 16383
-            }
-          ],
-          "master": {
-            "id": "abcdefg",
-            "ip": "10.0.0.0",
-            "port": 8000
-          },
-          "replicas": [
-            {
-              "id": "abcdefg",
-              "ip": "10.0.0.1",
-              "port": 8001
-            }
-          ]
-        }
-      ])json")));
+  EXPECT_EQ(ClusterConfig::CreateFromConfig(kMyId, ParseJson(R"json(
+                [
+                  {
+                    "slot_ranges": [
+                      {
+                        "start": 0,
+                        "end": 16383
+                      }
+                    ],
+                    "master": {
+                      "id": "abcdefg",
+                      "ip": "10.0.0.0",
+                      "port": 8000
+                    },
+                    "replicas": [
+                      {
+                        "id": "abcdefg",
+                        "ip": "10.0.0.1",
+                        "port": 8001
+                      }
+                    ]
+                  }
+                ])json")),
+            nullptr);
 }
 
 }  // namespace dfly
diff --git a/src/server/cluster/cluster_family_test.cc b/src/server/cluster/cluster_family_test.cc
index 189ad1690be5..d2151a9470f4 100644
--- a/src/server/cluster/cluster_family_test.cc
+++ b/src/server/cluster/cluster_family_test.cc
@@ -9,7 +9,10 @@
 #include <string>
 #include <string_view>
 
+#include "absl/strings/str_replace.h"
 #include "absl/strings/substitute.h"
+#include "absl/time/clock.h"
+#include "absl/time/time.h"
 #include "base/gtest.h"
 #include "base/logging.h"
 #include "facade/facade_test.h"
@@ -29,6 +32,21 @@ class ClusterFamilyTest : public BaseFamilyTest {
 
  protected:
   static constexpr string_view kInvalidConfiguration = "Invalid cluster configuration";
+
+  void ExpectConditionWithinTimeout(const std::function<bool()>& condition,
+                                    absl::Duration timeout = absl::Seconds(5)) {
+    absl::Time deadline = absl::Now() + timeout;
+
+    while (deadline > absl::Now()) {
+      if (condition()) {
+        break;
+      }
+      absl::SleepFor(absl::Milliseconds(10));
+    }
+
+    EXPECT_LE(absl::Now(), deadline)
+        << "Timeout of " << timeout << " reached when expecting condition";
+  }
 };
 
 TEST_F(ClusterFamilyTest, DflyClusterOnlyOnAdminPort) {
@@ -560,7 +578,8 @@ TEST_F(ClusterFamilyTest, ClusterConfigDeleteSlots) {
 
   config = absl::Substitute(config_template, "abc");
   EXPECT_EQ(RunAdmin({"dflycluster", "config", config}), "OK");
-  sleep(1);
+
+  ExpectConditionWithinTimeout([&]() { return CheckedInt({"dbsize"}) == 0; });
 
   EXPECT_THAT(
       RunAdmin({"dflycluster", "getslotinfo", "slots", "1", "2"}),
@@ -570,6 +589,64 @@ TEST_F(ClusterFamilyTest, ClusterConfigDeleteSlots) {
                                                   IntArg(0), "total_writes", Not(IntArg(0)))))));
 }
 
+TEST_F(ClusterFamilyTest, ClusterConfigDeleteSomeSlots) {
+  string config_template = R"json(
+      [
+        {
+          "slot_ranges": [
+            {
+              "start": 0,
+              "end": 8000
+            }
+          ],
+          "master": {
+            "id": "$0",
+            "ip": "10.0.0.1",
+            "port": 7000
+          },
+          "replicas": []
+        },
+        {
+          "slot_ranges": [
+            {
+              "start": 8001,
+              "end": 16383
+            }
+          ],
+          "master": {
+            "id": "other",
+            "ip": "10.0.0.2",
+            "port": 7000
+          },
+          "replicas": []
+        }
+      ])json";
+  string config = absl::Substitute(config_template, RunAdmin({"dflycluster", "myid"}).GetString());
+
+  EXPECT_EQ(RunAdmin({"dflycluster", "config", config}), "OK");
+
+  Run({"debug", "populate", "1", "key", "4", "SLOTS", "7999", "7999"});
+  Run({"debug", "populate", "2", "key", "4", "SLOTS", "8000", "8000"});
+
+  EXPECT_THAT(RunAdmin({"dflycluster", "getslotinfo", "slots", "7999", "8000"}),
+              RespArray(ElementsAre(
+                  RespArray(ElementsAre(IntArg(7999), "key_count", IntArg(1), _, _, _, _)),
+                  RespArray(ElementsAre(IntArg(8000), "key_count", IntArg(2), _, _, _, _)))));
+  EXPECT_THAT(Run({"dbsize"}), IntArg(3));
+
+  // Move ownership over 8000 to other master
+  config = absl::StrReplaceAll(config, {{"8000", "7999"}, {"8001", "8000"}});
+  EXPECT_EQ(RunAdmin({"dflycluster", "config", config}), "OK");
+
+  // Verify that keys for slot 8000 were deleted, while key for slot 7999 was kept
+  ExpectConditionWithinTimeout([&]() { return CheckedInt({"dbsize"}) == 1; });
+
+  EXPECT_THAT(RunAdmin({"dflycluster", "getslotinfo", "slots", "7999", "8000"}),
+              RespArray(ElementsAre(
+                  RespArray(ElementsAre(IntArg(7999), "key_count", IntArg(1), _, _, _, _)),
+                  RespArray(ElementsAre(IntArg(8000), "key_count", IntArg(0), _, _, _, _)))));
+}
+
 TEST_F(ClusterFamilyTest, ClusterModeSelectNotAllowed) {
   EXPECT_THAT(Run({"select", "1"}), ErrArg("SELECT is not allowed in cluster mode"));
   EXPECT_EQ(Run({"select", "0"}), "OK");
@@ -604,15 +681,7 @@ TEST_F(ClusterFamilyTest, ClusterFirstConfigCallDropsEntriesNotOwnedByNode) {
             "OK");
 
   // Make sure `dbsize` all slots were removed
-  constexpr absl::Duration kMaxTime = absl::Seconds(5);
-  absl::Time deadline = absl::Now() + kMaxTime;
-  while (deadline > absl::Now()) {
-    if (CheckedInt({"dbsize"}) == 0) {
-      break;
-    }
-    sleep(1);
-  }
-  EXPECT_LE(absl::Now(), deadline);
+  ExpectConditionWithinTimeout([&]() { return CheckedInt({"dbsize"}) == 0; });
 }
 
 class ClusterFamilyEmulatedTest : public BaseFamilyTest {
