{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 1858,
  "instance_id": "dragonflydb__dragonfly-1858",
  "issue_numbers": [
    "1857"
  ],
  "base_commit": "a8f3764048300115228255ac43fa390d040a5281",
  "patch": "diff --git a/src/server/detail/save_stages_controller.cc b/src/server/detail/save_stages_controller.cc\nindex 4db66897e4bd..0151652c81d5 100644\n--- a/src/server/detail/save_stages_controller.cc\n+++ b/src/server/detail/save_stages_controller.cc\n@@ -98,6 +98,7 @@ GenericError RdbSnapshot::Start(SaveMode save_mode, const std::string& path,\n                                 const RdbSaver::GlobalData& glob_data) {\n   VLOG(1) << \"Saving RDB \" << path;\n \n+  CHECK_NOTNULL(snapshot_storage_);\n   auto res = snapshot_storage_->OpenWriteFile(path);\n   if (!res) {\n     return res.error();\ndiff --git a/src/server/server_family.cc b/src/server/server_family.cc\nindex 09b1c5e6ea13..cf13f8d5034b 100644\n--- a/src/server/server_family.cc\n+++ b/src/server/server_family.cc\n@@ -420,13 +420,6 @@ void ServerFamily::Init(util::AcceptServer* acceptor, std::vector<facade::Listen\n       pb_task_->AwaitBrief([&] { return pb_task_->AddPeriodic(period_ms, cache_cb); });\n #endif\n \n-  // check for '--replicaof' before loading anything\n-  if (ReplicaOfFlag flag = GetFlag(FLAGS_replicaof); flag.has_value()) {\n-    service_.proactor_pool().GetNextProactor()->Await(\n-        [this, &flag]() { this->Replicate(flag.host, flag.port); });\n-    return;  // DONT load any snapshots\n-  }\n-\n   string flag_dir = GetFlag(FLAGS_dir);\n   if (IsCloudPath(flag_dir)) {\n     aws_ = make_unique<cloud::AWS>(\"s3\");\n@@ -441,6 +434,13 @@ void ServerFamily::Init(util::AcceptServer* acceptor, std::vector<facade::Listen\n     snapshot_storage_ = std::make_shared<detail::FileSnapshotStorage>(nullptr);\n   }\n \n+  // check for '--replicaof' before loading anything\n+  if (ReplicaOfFlag flag = GetFlag(FLAGS_replicaof); flag.has_value()) {\n+    service_.proactor_pool().GetNextProactor()->Await(\n+        [this, &flag]() { this->Replicate(flag.host, flag.port); });\n+    return;  // DONT load any snapshots\n+  }\n+\n   const auto load_path_result = snapshot_storage_->LoadPath(flag_dir, GetFlag(FLAGS_dbfilename));\n   if (load_path_result) {\n     const std::string load_path = *load_path_result;\n",
  "test_patch": "diff --git a/tests/dragonfly/replication_test.py b/tests/dragonfly/replication_test.py\nindex 6edba4d16872..e4d3876bc0e9 100644\n--- a/tests/dragonfly/replication_test.py\n+++ b/tests/dragonfly/replication_test.py\n@@ -1541,3 +1541,30 @@ async def test_df_crash_on_memcached_error(df_local_factory):\n         memcached_client.set(b\"key\", b\"data\", noreply=False)\n \n     await c_master.close()\n+\n+\n+@pytest.mark.asyncio\n+async def test_df_crash_on_replicaof_flag(df_local_factory):\n+    master = df_local_factory.create(\n+        port=BASE_PORT,\n+        proactor_threads=2,\n+    )\n+\n+    replica = df_local_factory.create(\n+        port=master.port + 1, proactor_threads=2, replicaof=f\"127.0.0.1:{BASE_PORT}\"\n+    )\n+\n+    master.start()\n+    replica.start()\n+\n+    c_master = aioredis.Redis(port=master.port)\n+    c_replica = aioredis.Redis(port=replica.port)\n+\n+    await wait_available_async(c_master)\n+    await wait_available_async(c_replica)\n+\n+    res = await c_replica.execute_command(\"BGSAVE\")\n+    assert True == res\n+\n+    res = await c_replica.execute_command(\"DBSIZE\")\n+    assert res == 0\n",
  "problem_statement": "Replica crash after `BGSAVE` if bootstrapped with `replicaof` flag \nReplica crashes when promt with `BGSAVE` if df is bootstrapped with `replicaof` flag.\r\n\r\n**To Reproduce**\r\n1. Start a dragonfly instance `./dragonfly`\r\n2. Start another dragonfly instance with `replicaof` flag `./dragonfly --port=6380 --replicaof=127.0.0.1:6379`\r\n3. Connect with `redis-cli -p 6380` and type `BGSAVE`. Replica crashes.\r\n\r\n**Expected behavior**\r\nAn \"ok\" result\r\n\r\n\n",
  "hints_text": "",
  "created_at": "2023-09-14T13:36:34Z",
  "modified_files": [
    "src/server/detail/save_stages_controller.cc",
    "src/server/server_family.cc"
  ],
  "modified_test_files": [
    "tests/dragonfly/replication_test.py"
  ]
}