{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 2982,
  "instance_id": "dragonflydb__dragonfly-2982",
  "issue_numbers": [
    "2980"
  ],
  "base_commit": "c84b6fac4c2b983b6645c0eb1ac8fcc04f8019c7",
  "patch": "diff --git a/src/server/acl/helpers.cc b/src/server/acl/helpers.cc\nindex a68629da8fc1..b8e4fabaeeb3 100644\n--- a/src/server/acl/helpers.cc\n+++ b/src/server/acl/helpers.cc\n@@ -116,12 +116,11 @@ std::optional<std::string> MaybeParsePassword(std::string_view command, bool has\n     return std::string(command);\n   }\n \n-  char symbol = hashed ? '#' : '>';\n-  if (command[0] != symbol) {\n-    return {};\n+  if (command[0] == '>' || (hashed && command[0] == '#')) {\n+    return std::string(command.substr(1));\n   }\n \n-  return std::string(command.substr(1));\n+  return {};\n }\n \n std::optional<bool> MaybeParseStatus(std::string_view command) {\n@@ -231,7 +230,9 @@ std::variant<User::UpdateRequest, ErrorReply> ParseAclSetUser(T args,\n         return ErrorReply(\"Only one password is allowed\");\n       }\n       req.password = std::move(pass);\n-      req.is_hashed = hashed;\n+      if (hashed && absl::StartsWith(facade::ToSV(arg), \"#\")) {\n+        req.is_hashed = hashed;\n+      }\n       continue;\n     }\n \ndiff --git a/src/server/acl/helpers.h b/src/server/acl/helpers.h\nindex 2a29eeb1466e..a21fb77a6963 100644\n--- a/src/server/acl/helpers.h\n+++ b/src/server/acl/helpers.h\n@@ -23,6 +23,7 @@ std::string AclCommandToString(const std::vector<uint64_t>& acl_category);\n \n std::string PrettyPrintSha(std::string_view pass, bool all = false);\n \n+// When hashed is true, we allow passwords that start with both # and >\n std::optional<std::string> MaybeParsePassword(std::string_view command, bool hashed = false);\n \n std::optional<bool> MaybeParseStatus(std::string_view command);\n",
  "test_patch": "diff --git a/tests/dragonfly/acl_family_test.py b/tests/dragonfly/acl_family_test.py\nindex 7ce447cac782..d222d0c8c2ba 100644\n--- a/tests/dragonfly/acl_family_test.py\n+++ b/tests/dragonfly/acl_family_test.py\n@@ -323,12 +323,19 @@ async def test_bad_acl_file(df_local_factory, tmp_dir):\n @pytest.mark.asyncio\n @dfly_args({\"port\": 1111})\n async def test_good_acl_file(df_local_factory, tmp_dir):\n-    acl = create_temp_file(\"\", tmp_dir)\n+    acl = create_temp_file(\"USER MrFoo ON >mypass\", tmp_dir)\n     df = df_local_factory.create(aclfile=acl)\n \n     df.start()\n     client = df.client()\n \n+    await client.execute_command(\"ACL LOAD\")\n+    result = await client.execute_command(\"ACL LIST\")\n+    assert 2 == len(result)\n+    assert \"user MrFoo on ea71c25a7a60224 +@NONE\" in result\n+    assert \"user default on nopass +@ALL +ALL ~*\" in result\n+    await client.execute_command(\"ACL DELUSER MrFoo\")\n+\n     await client.execute_command(\"ACL SETUSER roy ON >mypass +@STRING +HSET\")\n     await client.execute_command(\"ACL SETUSER shahar >mypass +@SET\")\n     await client.execute_command(\"ACL SETUSER vlad +@STRING ~foo ~bar*\")\n",
  "problem_statement": "bug: error while parsing aclfile\n**Describe the bug**\r\n\r\nReceiving an error `acl_family.cc:271 Error while parsing aclfile: Unrecognized parameter >mypassword` while using an known valid ACL file. \r\n\r\n```bash\r\n\"USER local-testing.rot-1 ON >mypassword resetkeys ~mykey* +set +get +del +ping\"\r\n``` \r\n\r\n**To Reproduce**\r\n1. Create an ACL file with the contents above\r\n2. Deploy on Kubernetes with Dragonfly DB operator v.1.1.2\r\n3. View the logs of the StatefulSet\r\n4. See error: `acl_family.cc:271 Error while parsing aclfile`\r\n\r\n**Expected behavior**\r\nFile should be loaded successfully, according to your [documentation](https://www.dragonflydb.io/docs/managing-dragonfly/acl#passwords) `>` should be supported.\r\n\r\n**Environment (please complete the following information):**\r\n - Containerized?: Kubernetes\r\n - Dragonfly Version: v1.17.1\r\n\r\n**Additional context**\r\nThe bug may have been introduced here: https://github.com/dragonflydb/dragonfly/pull/2123\r\n\r\nAccording to the [Redis Documentation](https://redis.io/docs/latest/operate/oss_and_stack/management/security/acl/#acl-rules\r\n) `>` is used for plaintext passwords where as `#` is used for a hash value.  \r\n```\r\nConfigure valid passwords for the user:\r\n\r\n><password>: Add this password to the list of valid passwords for the user. For example >mypass will add \"mypass\" to the list of valid passwords. This directive clears the nopass flag (see later). Every user can have any number of passwords.\r\n<<password>: Remove this password from the list of valid passwords. Emits an error in case the password you are trying to remove is actually not set.\r\n#<hash>: Add this SHA-256 hash value to the list of valid passwords for the user. This hash value will be compared to the hash of a password entered for an ACL user. This allows users to store hashes in the acl.conf file rather than storing cleartext passwords. Only SHA-256 hash values are accepted as the password hash must be 64 characters and only contain lowercase hexadecimal characters.\r\n```\r\n\r\n**Non Relevant**\r\nThis is a really cool project and I appreciate all the hard work that has gone into it.  Keep up the great work!\r\n\r\n\n",
  "hints_text": "@kostasrim ",
  "created_at": "2024-04-30T21:23:03Z",
  "modified_files": [
    "src/server/acl/helpers.cc",
    "src/server/acl/helpers.h"
  ],
  "modified_test_files": [
    "tests/dragonfly/acl_family_test.py"
  ]
}