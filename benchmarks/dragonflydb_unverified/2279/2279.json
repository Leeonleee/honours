{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 2279,
  "instance_id": "dragonflydb__dragonfly-2279",
  "issue_numbers": [
    "2278"
  ],
  "base_commit": "8323c82dc549c268a9b5b1fff40beb35d6953e0a",
  "patch": "diff --git a/src/server/main_service.cc b/src/server/main_service.cc\nindex 23a14bcc8426..d1f4762338cf 100644\n--- a/src/server/main_service.cc\n+++ b/src/server/main_service.cc\n@@ -678,6 +678,12 @@ optional<Transaction::MultiMode> DeduceExecMode(ExecEvalState state,\n     for (const auto& scmd : exec_info.body) {\n       transactional |= scmd.Cid()->IsTransactional();\n       contains_global |= scmd.Cid()->opt_mask() & CO::GLOBAL_TRANS;\n+\n+      // We can't run no-key-transactional commands in lock-ahead mode currently,\n+      // because it means we have to schedule on all shards\n+      if (scmd.Cid()->opt_mask() & CO::NO_KEY_TRANSACTIONAL)\n+        contains_global = true;\n+\n       if (contains_global)\n         break;\n     }\n",
  "test_patch": "diff --git a/src/server/multi_test.cc b/src/server/multi_test.cc\nindex f1591bf95fe0..2785db5596d3 100644\n--- a/src/server/multi_test.cc\n+++ b/src/server/multi_test.cc\n@@ -920,6 +920,12 @@ TEST_F(MultiTest, EvalExpiration) {\n   EXPECT_LE(CheckedInt({\"pttl\", \"x\"}), 5000);\n }\n \n+TEST_F(MultiTest, NoKeyTransactional) {\n+  Run({\"multi\"});\n+  Run({\"ft._list\"});\n+  Run({\"exec\"});\n+}\n+\n class MultiEvalTest : public BaseFamilyTest {\n  protected:\n   MultiEvalTest() : BaseFamilyTest() {\n",
  "problem_statement": "Issue with redis-py pipelines and FT command execution\n**Describe the bug**\r\nWhen using a standard connection pool or standalone connection in Python with redis-py(5.0.1) FT.* commands complete successfully. However, if you pipeline them (scenario below) they seem cause the Dragonfly container/pod to crash with the following error:\r\n```shell\r\ndragonfly-1  | I20231208 15:17:28.355697     8 uring_proactor.cc:160] IORing with 1024 entries, allocated 102720 bytes, cq_entries is 2048\r\ndragonfly-1  | I20231208 15:17:28.430027     1 proactor_pool.cc:146] Running 8 io threads\r\ndragonfly-1  | I20231208 15:17:28.440903     1 snapshot_storage.cc:106] Load snapshot: Searching for snapshot in directory: \"/data\"\r\ndragonfly-1  | I20231208 15:17:28.441177     1 server_family.cc:673] Loading /data/dump-2023-12-08T14:57:40-summary.dfs\r\ndragonfly-1  | I20231208 15:17:28.445775     9 listener_interface.cc:101] sock[19] AcceptServer - listening on port 6379\r\ndragonfly-1  | I20231208 15:17:28.446219    12 server_family.cc:727] Load finished, num keys read: 0\r\ndragonfly-1  | F20231208 15:19:36.467346    14 transaction.cc:232] Check failed: absl::StartsWith(cid_->name(), \"EVAL\") EXEC\r\ndragonfly-1  | *** Check failure stack trace: ***\r\ndragonfly-1  |     @     0x55cbbad679f3  google::LogMessage::SendToLog()\r\ndragonfly-1  |     @     0x55cbbad601b7  google::LogMessage::Flush()\r\ndragonfly-1  |     @     0x55cbbad61b3f  google::LogMessageFatal::~LogMessageFatal()\r\ndragonfly-1  |     @     0x55cbba67add2  dfly::Transaction::InitByKeys()\r\ndragonfly-1  |     @     0x55cbba67b92c  dfly::Transaction::StartMultiLockedAhead()\r\ndragonfly-1  |     @     0x55cbba46dfe2  dfly::StartMultiExec()\r\ndragonfly-1  |     @     0x55cbba46f365  dfly::Service::Exec()\r\ndragonfly-1  |     @     0x55cbba5a0bbe  dfly::CommandId::Invoke()\r\ndragonfly-1  |     @     0x55cbba464eef  dfly::Service::InvokeCmd()\r\ndragonfly-1  |     @     0x55cbba4713bd  dfly::Service::DispatchCommand()\r\ndragonfly-1  |     @     0x55cbba738536  facade::Connection::DispatchOperations::operator()()\r\ndragonfly-1  |     @     0x55cbba73db68  facade::Connection::DispatchFiber()\r\ndragonfly-1  |     @     0x55cbba73e077  _ZN5boost7context6detail11fiber_entryINS1_12fiber_recordINS0_5fiberENS0_21basic_fixedsize_stackINS0_12stack_traitsEEEZN4util3fb26detail15WorkerFiberImplIZN6facade10Connection27LaunchDispatchFiberIfNeededEvEUlvE_JEEC4IS7_EESt17basic_string_viewIcSt11char_traitsIcEERKNS0_12preallocatedEOT_OSE_EUlOS4_E_EEEEvNS1_10transfer_tE\r\ndragonfly-1  |     @     0x55cbbab844ff  make_fcontext\r\ndragonfly-1  | *** SIGABRT received at time=1702048776 on cpu 6 ***\r\ndragonfly-1  | PC: @     0x7f1d9560600b  (unknown)  raise\r\ndragonfly-1  | [failure_signal_handler.cc : 345] RAW: Signal 11 raised at PC=0x7f1d955e5941 while already in AbslFailureSignalHandler()\r\ndragonfly-1  | *** SIGSEGV received at time=1702048776 on cpu 6 ***\r\ndragonfly-1  | PC: @     0x7f1d955e5941  (unknown)  abort\r\ndragonfly-1 exited with code 139\r\n```\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Using the following docker-compose yaml:\r\n```yaml\r\nversion: '3.8'\r\nservices:\r\n  dragonfly:\r\n    image: 'docker.dragonflydb.io/dragonflydb/dragonfly'\r\n    environment:\r\n      - DFLY_requirepass=xxxxx\r\n    ulimits:\r\n      memlock: -1\r\n    ports:\r\n      - \"6379:6379\"\r\n    # For better performance, consider `host` mode instead `port` to avoid docker NAT.\r\n    # `host` mode is NOT currently supported in Swarm Mode.\r\n    # https://docs.docker.com/compose/compose-file/compose-file-v3/#network_mode\r\n    network_mode: \"host\"\r\n    volumes:\r\n      - dragonflydata:/data\r\n    restart: unless-stopped\r\nvolumes:\r\n  dragonflydata:\r\n```\r\n2. Start with docker-compose\r\n3. Using redis-cli, create a simple index using:\r\n```shell\r\nFT.CREATE idx:something_something          \r\n  ON HASH                       \r\n    PREFIX 1 \"something_something  :\"          \r\n  SCHEMA\r\n    origin TEXT SORTABLE                     \r\n    dest TEXT SORTABLE                  \r\n    data_timestamp NUMERIC SORTABLE\r\n```\r\n4. In python, create a simple script to attempt to execute `FT._LIST` like so:\r\n```python\r\nimport redis\r\n\r\npool = redis.ConnectionPool(\r\n    max_connections=10000, host=\"localhost\", port=6379, password=\"xxxxx\", db=0\r\n)\r\nr = redis.Redis(connection_pool=pool)\r\nr = r.pipeline()\r\n\r\nprint(r.execute_command(\"FT._LIST\").execute()) # This will crash the container (it will immediately restart because of the policy but...)\r\n# Note that I have tried the same code on a reids-stack-server 7.2.0-v6 instance and it is functional.\r\n```\r\n\r\n\r\n**Expected behavior**\r\n`FT.*` Commands can be executed in a pipeline as they are on Redis via redis-py/python code.\r\n\r\n**Environment (please complete the following information):**\r\n - OS: [Ubuntu 23.10]\r\n - Kernel: Linux dragonfly-dev 6.5.0-1008-gcp #8-Ubuntu SMP Fri Oct 20 20:32:54 UTC 2023 x86_64 x86_64 x86_64 GNU/Linux\r\n - Containerized?: Docker Compose, Docker\r\n - Dragonfly Version: v1.13.0\r\n\r\n**Reproducible Code Snippet**\r\n```\r\nSee step 4 above.\r\n```\r\n\r\n**Additional context**\r\nIt is worth noting I can use things like HGET/HSET/INFO within a Pipeline context successfully so this seems to be isolated to FT commands from my cursory exploration.\r\nThis isn't pressing or anything just wanted to let you all know that this came up and I can find any handy solutions for it. If you need any add'l info I'll be happy to pass it along. Until then I will just avoid Pipelines with FT commands!\r\n\n",
  "hints_text": "",
  "created_at": "2023-12-08T17:50:53Z",
  "modified_files": [
    "src/server/main_service.cc"
  ],
  "modified_test_files": [
    "src/server/multi_test.cc"
  ]
}