{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 2813,
  "instance_id": "dragonflydb__dragonfly-2813",
  "issue_numbers": [
    "2811"
  ],
  "base_commit": "b2e2ad6e0466938c74ad7cacf91c859383d1ef04",
  "patch": "diff --git a/src/server/http_api.cc b/src/server/http_api.cc\nindex 9e6b5c9b55b5..1d74b92ec0df 100644\n--- a/src/server/http_api.cc\n+++ b/src/server/http_api.cc\n@@ -124,7 +124,7 @@ struct CaptureVisitor {\n   }\n \n   void operator()(CapturingReplyBuilder::Error err) {\n-    str = absl::StrCat(R\"({\"error\": \")\", err.first);\n+    str = absl::StrCat(R\"({\"error\": \")\", err.first, \"\\\"\");\n   }\n \n   void operator()(facade::OpStatus status) {\n@@ -132,7 +132,13 @@ struct CaptureVisitor {\n   }\n \n   void operator()(const CapturingReplyBuilder::StrArrPayload& sa) {\n-    absl::StrAppend(&str, \"not_implemented\");\n+    absl::StrAppend(&str, \"[\");\n+    for (const auto& val : sa.arr) {\n+      absl::StrAppend(&str, JsonEscape(val), \",\");\n+    }\n+    if (sa.arr.size())\n+      str.pop_back();\n+    absl::StrAppend(&str, \"]\");\n   }\n \n   void operator()(unique_ptr<CapturingReplyBuilder::CollectionPayload> cp) {\n@@ -152,7 +158,18 @@ struct CaptureVisitor {\n   }\n \n   void operator()(facade::SinkReplyBuilder::MGetResponse resp) {\n-    absl::StrAppend(&str, \"not_implemented\");\n+    absl::StrAppend(&str, \"[\");\n+    for (const auto& val : resp.resp_arr) {\n+      if (val) {\n+        absl::StrAppend(&str, JsonEscape(val->value), \",\");\n+      } else {\n+        absl::StrAppend(&str, \"null,\");\n+      }\n+    }\n+\n+    if (resp.resp_arr.size())\n+      str.pop_back();\n+    absl::StrAppend(&str, \"]\");\n   }\n \n   void operator()(const CapturingReplyBuilder::ScoredArray& sarr) {\n",
  "test_patch": "diff --git a/tests/dragonfly/connection_test.py b/tests/dragonfly/connection_test.py\nindex 3c15f5479517..c4285b567301 100755\n--- a/tests/dragonfly/connection_test.py\n+++ b/tests/dragonfly/connection_test.py\n@@ -766,4 +766,11 @@ async def test_http(df_server: DflyInstance):\n             assert resp.status == 200\n             text = await resp.text()\n             assert text.strip() == '{\"result\":\"\u041c\u0430\u0439\u044f\u0425\u0438\u043b\u043b\u0438\"}'\n+\n+        body = '[\"foo\", \"bar\"]'\n+        async with session.post(f\"http://localhost:{df_server.port}/api\", data=body) as resp:\n+            assert resp.status == 200\n+            text = await resp.text()\n+            assert text.strip() == '{\"error\": \"unknown command `FOO`\"}'\n+\n     assert await client.ttl(\"foo\") > 0\n",
  "problem_statement": "illegal JSON response in HTTP handler\nWorking with the new RESP over HTTP handler some responses are not legal json entities.\r\nHere are a few examples:\r\nABSDFS x -> {\"error\": \"unknown command `ABSDFS`}\r\nsmembers a -> {\"result\":not_implemented}\r\nllen -> {\"error\": \"wrong number of arguments for 'llen' command}\r\n\r\n**A clear and concise description of what you expected to happen.**\r\nResults should be quoted.\r\nABSDFS x -> {\"error\": \"unknown command `ABSDFS`\"}\r\nsmembers a -> {\"result\":\"not_implemented\"} moreover I think this should be an error and not a result message. \r\nllen -> {\"error\": \"wrong number of arguments for 'llen' command\"}\r\n\r\n\r\n**Environment (please complete the following information):**\r\ncompile from main branch\r\n\r\n\n",
  "hints_text": "",
  "created_at": "2024-04-01T15:51:01Z",
  "modified_files": [
    "src/server/http_api.cc"
  ],
  "modified_test_files": [
    "tests/dragonfly/connection_test.py"
  ]
}