{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 4474,
  "instance_id": "dragonflydb__dragonfly-4474",
  "issue_numbers": [
    "4473"
  ],
  "base_commit": "6f0072e462cc318f1c086293c913ebb9800c97fc",
  "patch": "diff --git a/src/server/server_family.cc b/src/server/server_family.cc\nindex c42abdc58113..8d78de1b212b 100644\n--- a/src/server/server_family.cc\n+++ b/src/server/server_family.cc\n@@ -230,7 +230,7 @@ using strings::HumanReadableNumBytes;\n \n namespace {\n \n-const auto kRedisVersion = \"7.2.0\";\n+const auto kRedisVersion = \"7.4.0\";\n \n using EngineFunc = void (ServerFamily::*)(CmdArgList args, const CommandContext&);\n \n",
  "test_patch": "diff --git a/src/server/dragonfly_test.cc b/src/server/dragonfly_test.cc\nindex 18230fe62e13..d90efdb493cf 100644\n--- a/src/server/dragonfly_test.cc\n+++ b/src/server/dragonfly_test.cc\n@@ -305,7 +305,7 @@ TEST_F(DflyEngineTestWithRegistry, Hello) {\n \n   EXPECT_THAT(\n       resp.GetVec(),\n-      ElementsAre(\"server\", \"redis\", \"version\", \"7.2.0\", \"dragonfly_version\",\n+      ElementsAre(\"server\", \"redis\", \"version\", \"7.4.0\", \"dragonfly_version\",\n                   ArgType(RespExpr::STRING), \"proto\", IntArg(2), \"id\", ArgType(RespExpr::INT64),\n                   \"mode\", testing::AnyOf(\"standalone\", \"cluster\"), \"role\", \"master\"));\n \n@@ -313,7 +313,7 @@ TEST_F(DflyEngineTestWithRegistry, Hello) {\n   ASSERT_THAT(resp, ArrLen(14));\n   EXPECT_THAT(\n       resp.GetVec(),\n-      ElementsAre(\"server\", \"redis\", \"version\", \"7.2.0\", \"dragonfly_version\",\n+      ElementsAre(\"server\", \"redis\", \"version\", \"7.4.0\", \"dragonfly_version\",\n                   ArgType(RespExpr::STRING), \"proto\", IntArg(3), \"id\", ArgType(RespExpr::INT64),\n                   \"mode\", testing::AnyOf(\"standalone\", \"cluster\"), \"role\", \"master\"));\n \ndiff --git a/tests/dragonfly/acl_family_test.py b/tests/dragonfly/acl_family_test.py\nindex d41858cd8505..f9d4b3003a0e 100644\n--- a/tests/dragonfly/acl_family_test.py\n+++ b/tests/dragonfly/acl_family_test.py\n@@ -157,7 +157,7 @@ async def test_acl_cat_commands_multi_exec_squash(df_factory):\n         await client.execute_command(f\"SET x{x} {x}\")\n     await client.execute_command(\"EXEC\")\n \n-    await client.close()\n+    await client.aclose()\n     client = aioredis.Redis(port=df.port, decode_responses=True)\n \n     # NOPERM while executing multi\n@@ -170,7 +170,7 @@ async def test_acl_cat_commands_multi_exec_squash(df_factory):\n \n     with pytest.raises(redis.exceptions.NoPermissionError):\n         await client.execute_command(f\"SET x{x} {x}\")\n-    await client.close()\n+    await client.aclose()\n \n     # NOPERM between multi and exec\n     admin_client = aioredis.Redis(port=df.port, decode_responses=True)\n@@ -198,8 +198,8 @@ async def test_acl_cat_commands_multi_exec_squash(df_factory):\n     logging.debug(f\"Result is: {res}\")\n     assert res[0].args[0] == \"kk ACL rules changed between the MULTI and EXEC\", res\n \n-    await admin_client.close()\n-    await client.close()\n+    await admin_client.aclose()\n+    await client.aclose()\n \n     # Testing acl commands\n     client = aioredis.Redis(port=df.port, decode_responses=True)\n@@ -598,7 +598,7 @@ async def test_default_user_bug(df_server):\n     client = df_server.client()\n \n     await client.execute_command(\"ACL SETUSER default -@all\")\n-    await client.close()\n+    await client.aclose()\n \n     client = df_server.client()\n \n@@ -616,7 +616,7 @@ async def test_auth_resp3_bug(df_factory):\n     await client.execute_command(\"ACL SETUSER kostas +@all ON >tmp\")\n     res = await client.execute_command(\"HELLO 3 AUTH kostas tmp\")\n     assert res[\"server\"] == \"redis\"\n-    assert res[\"version\"] == \"7.2.0\"\n+    assert res[\"version\"] == \"7.4.0\"\n     assert res[\"proto\"] == 3\n     assert res[\"mode\"] == \"standalone\"\n     assert res[\"role\"] == \"master\"\ndiff --git a/tests/dragonfly/cluster_mgr_test.py b/tests/dragonfly/cluster_mgr_test.py\nindex e683e8a11add..959b72fe0acb 100644\n--- a/tests/dragonfly/cluster_mgr_test.py\n+++ b/tests/dragonfly/cluster_mgr_test.py\n@@ -161,4 +161,4 @@ async def test_cluster_mgr(df_factory):\n     for i in range(NODES):\n         assert run_cluster_mgr([\"--action=detach\", f\"--target_port={replicas[i].port}\"])\n     await check_cluster_data(client)\n-    await client.close()\n+    await client.aclose()\ndiff --git a/tests/dragonfly/cluster_test.py b/tests/dragonfly/cluster_test.py\nindex 0d7d1b044f0c..71f4080334ac 100644\n--- a/tests/dragonfly/cluster_test.py\n+++ b/tests/dragonfly/cluster_test.py\n@@ -361,6 +361,7 @@ async def test_emulated_cluster_with_replicas(df_factory):\n             \"connected\": True,\n             \"epoch\": \"0\",\n             \"flags\": \"myself,master\",\n+            \"hostname\": \"\",\n             \"last_ping_sent\": \"0\",\n             \"last_pong_rcvd\": \"0\",\n             \"master_id\": \"-\",\n@@ -375,6 +376,7 @@ async def test_emulated_cluster_with_replicas(df_factory):\n             \"connected\": True,\n             \"epoch\": \"0\",\n             \"flags\": \"myself,master\",\n+            \"hostname\": \"\",\n             \"last_ping_sent\": \"0\",\n             \"last_pong_rcvd\": \"0\",\n             \"master_id\": \"-\",\n@@ -386,6 +388,7 @@ async def test_emulated_cluster_with_replicas(df_factory):\n             \"connected\": True,\n             \"epoch\": \"0\",\n             \"flags\": \"slave\",\n+            \"hostname\": \"\",\n             \"last_ping_sent\": \"0\",\n             \"last_pong_rcvd\": \"0\",\n             \"master_id\": master_id,\n@@ -397,6 +400,7 @@ async def test_emulated_cluster_with_replicas(df_factory):\n             \"connected\": True,\n             \"epoch\": \"0\",\n             \"flags\": \"slave\",\n+            \"hostname\": \"\",\n             \"last_ping_sent\": \"0\",\n             \"last_pong_rcvd\": \"0\",\n             \"master_id\": master_id,\n@@ -459,6 +463,7 @@ async def test_cluster_managed_service_info(df_factory):\n             \"connected\": True,\n             \"epoch\": \"0\",\n             \"flags\": \"myself,master\",\n+            \"hostname\": \"\",\n             \"last_ping_sent\": \"0\",\n             \"last_pong_rcvd\": \"0\",\n             \"master_id\": \"-\",\n@@ -472,6 +477,7 @@ async def test_cluster_managed_service_info(df_factory):\n         \"connected\": True,\n         \"epoch\": \"0\",\n         \"flags\": \"slave\",\n+        \"hostname\": \"\",\n         \"last_ping_sent\": \"0\",\n         \"last_pong_rcvd\": \"0\",\n         \"master_id\": master_id,\n@@ -1667,7 +1673,7 @@ async def test_all_finished():\n     # Compare capture\n     assert await seeder.compare(capture, nodes[0].instance.port)\n \n-    await asyncio.gather(*[c.close() for c in counter_connections])\n+    await asyncio.gather(*[c.aclose() for c in counter_connections])\n \n \n @dfly_args({\"proactor_threads\": 4, \"cluster_mode\": \"yes\"})\ndiff --git a/tests/dragonfly/connection_test.py b/tests/dragonfly/connection_test.py\nindex 6b6eb1715463..d1bddb838bce 100755\n--- a/tests/dragonfly/connection_test.py\n+++ b/tests/dragonfly/connection_test.py\n@@ -9,7 +9,12 @@\n import random\n import ssl\n from redis import asyncio as aioredis\n+import redis as base_redis\n+import hiredis\n+from redis.cache import CacheConfig\n+\n from redis.exceptions import ConnectionError as redis_conn_error, ResponseError\n+\n import async_timeout\n from dataclasses import dataclass\n from aiohttp import ClientSession\n@@ -436,7 +441,7 @@ async def publish_worker():\n         client = aioredis.Redis(connection_pool=async_pool)\n         for i in range(0, 2000):\n             await client.publish(\"channel\", f\"message-{i}\")\n-        await client.close()\n+        await client.aclose()\n \n     async def channel_reader(channel: aioredis.client.PubSub):\n         for i in range(0, 150):\n@@ -774,7 +779,7 @@ async def test_reject_non_tls_connections_on_tls(with_tls_server_args, df_factor\n     client = server.client(password=\"XXX\")\n     with pytest.raises((ResponseError)):\n         await client.dbsize()\n-    await client.close()\n+    await client.aclose()\n \n     client = server.admin_client(password=\"XXX\")\n     assert await client.dbsize() == 0\n@@ -804,7 +809,7 @@ async def test_tls_reject(\n \n     client = server.client(**with_tls_client_args, ssl_cert_reqs=None)\n     await client.ping()\n-    await client.close()\n+    await client.aclose()\n \n     client = server.client(**with_tls_client_args)\n     with pytest.raises(redis_conn_error):\n@@ -1038,3 +1043,10 @@ async def test_lib_name_ver(async_client: aioredis.Redis):\n     assert len(list) == 1\n     assert list[0][\"lib-name\"] == \"dragonfly\"\n     assert list[0][\"lib-ver\"] == \"1.2.3.4\"\n+\n+\n+async def test_hiredis(df_factory):\n+    server = df_factory.create(proactor_threads=1)\n+    server.start()\n+    client = base_redis.Redis(port=server.port, protocol=3, cache_config=CacheConfig())\n+    client.ping()\ndiff --git a/tests/dragonfly/replication_test.py b/tests/dragonfly/replication_test.py\nindex 1c905249750e..6efb4195892e 100644\n--- a/tests/dragonfly/replication_test.py\n+++ b/tests/dragonfly/replication_test.py\n@@ -260,7 +260,7 @@ async def full_sync(replica: DflyInstance, c_replica, crash_type):\n         await c_replica.execute_command(\"REPLICAOF localhost \" + str(master.port))\n         if crash_type == 0:\n             await asyncio.sleep(random.random() / 100 + 0.01)\n-            await c_replica.close()\n+            await c_replica.aclose()\n             replica.stop(kill=True)\n         else:\n             await wait_available_async(c_replica)\n@@ -281,7 +281,7 @@ async def full_sync(replica: DflyInstance, c_replica, crash_type):\n \n     async def stable_sync(replica, c_replica, crash_type):\n         await asyncio.sleep(random.random() / 100)\n-        await c_replica.close()\n+        await c_replica.aclose()\n         replica.stop(kill=True)\n \n     await asyncio.gather(*(stable_sync(*args) for args in replicas_of_type(lambda t: t == 1)))\n@@ -309,7 +309,7 @@ async def disconnect(replica, c_replica, crash_type):\n     logging.debug(\"Check phase 3 replica survived\")\n     for replica, c_replica, _ in replicas_of_type(lambda t: t == 2):\n         assert await c_replica.ping()\n-        await c_replica.close()\n+        await c_replica.aclose()\n \n     logging.debug(\"Stop streaming\")\n     seeder.stop()\n@@ -2454,7 +2454,7 @@ async def check_if_empty():\n \n     await check_if_empty()\n     assert await old_c_master.execute_command(f\"EXISTS foo\") == 1\n-    await old_c_master.close()\n+    await old_c_master.aclose()\n \n     async def assert_body(client, result=1, state=\"online\", node_role=\"slave\"):\n         async with async_timeout.timeout(10):\n@@ -2478,7 +2478,7 @@ async def assert_body(client, result=1, state=\"online\", node_role=\"slave\"):\n             await assert_body(client_b, result=0)\n \n         index = index + 1\n-        await client_b.close()\n+        await client_b.aclose()\n \n \n # This Test was intorduced in response to a bug when replicating empty hash maps with\ndiff --git a/tests/dragonfly/requirements.txt b/tests/dragonfly/requirements.txt\nindex 25fb8f69e251..93e1a5c1c99c 100644\n--- a/tests/dragonfly/requirements.txt\n+++ b/tests/dragonfly/requirements.txt\n@@ -1,14 +1,14 @@\n-async-timeout==4.0.2\n+async-timeout==4.0.3\n attrs==22.1.0\n Deprecated==1.2.13\n iniconfig==1.1.1\n-packaging==21.3\n+packaging==23.1\n pluggy==1.0.0\n py==1.11.0\n pyparsing==3.0.9\n pytest==7.1.2\n-redis==5.0.0\n-tomli==2.0.2\n+redis==5.2.1\n+tomli==2.0.1\n wrapt==1.14.1\n pytest-asyncio==0.20.1\n pytest-repeat==0.9.3\n@@ -26,3 +26,4 @@ pytest-icdiff==0.8\n pytest-timeout==2.2.0\n asyncio==3.4.3\n fakeredis[json]==2.26.2\n+hiredis==2.4.0\ndiff --git a/tests/dragonfly/snapshot_test.py b/tests/dragonfly/snapshot_test.py\nindex 5101388bebbf..b8f29fe3d3da 100644\n--- a/tests/dragonfly/snapshot_test.py\n+++ b/tests/dragonfly/snapshot_test.py\n@@ -597,7 +597,7 @@ async def test_big_value_serialization_memory_limit(df_factory, cont_type):\n     assert info[\"used_memory_peak_rss\"] < (one_gb * 1.3)\n \n     await client.execute_command(\"FLUSHALL\")\n-    await client.close()\n+    await client.aclose()\n \n \n @dfly_args(\ndiff --git a/tests/dragonfly/utility.py b/tests/dragonfly/utility.py\nindex 40f8ce1dd97e..8855d7bccbf5 100644\n--- a/tests/dragonfly/utility.py\n+++ b/tests/dragonfly/utility.py\n@@ -528,7 +528,7 @@ def _make_client(self, **kwargs):\n     async def _close_client(self, client):\n         if not self.cluster_mode:\n             await client.connection_pool.disconnect()\n-        await client.close()\n+        await client.aclose()\n \n     async def _capture_db(self, port, target_db, keys):\n         client = self._make_client(port=port, db=target_db)\ndiff --git a/tests/integration/async.py b/tests/integration/async.py\nindex 2c9926fc602b..712a90e2c8f4 100755\n--- a/tests/integration/async.py\n+++ b/tests/integration/async.py\n@@ -41,7 +41,7 @@ async def post_to_redis(sem, db_name, index):\n                 log.info(f\"after pipe.execute {key_index}\")\n         finally:\n             # log.info(f\"before close {index}\")\n-            await redis_client.close()\n+            await redis_client.aclose()\n             # log.info(f\"after close {index} {len(results)}\")\n \n \n",
  "problem_statement": "dragonfly reports redis_version:7.2.0 which is incompatible with hiredis\nhiredis rejects `ping` command because we report version `7.2` instead of `>7.4`.\n\nSee also https://github.com/dragonflydb/dragonfly/issues/2454#issuecomment-2587021353\n",
  "hints_text": "",
  "created_at": "2025-01-17T12:52:10Z",
  "modified_files": [
    "src/server/server_family.cc"
  ],
  "modified_test_files": [
    "src/server/dragonfly_test.cc",
    "tests/dragonfly/acl_family_test.py",
    "tests/dragonfly/cluster_mgr_test.py",
    "tests/dragonfly/cluster_test.py",
    "tests/dragonfly/connection_test.py",
    "tests/dragonfly/replication_test.py",
    "tests/dragonfly/requirements.txt",
    "tests/dragonfly/snapshot_test.py",
    "tests/dragonfly/utility.py",
    "tests/integration/async.py"
  ]
}