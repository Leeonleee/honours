{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 3537,
  "instance_id": "dragonflydb__dragonfly-3537",
  "issue_numbers": [
    "3535"
  ],
  "base_commit": "4835b5debc955a60e85d1137b6da0531ec8cc380",
  "patch": "diff --git a/src/server/search/search_family.cc b/src/server/search/search_family.cc\nindex 37df03b2b45f..b5163cd6c486 100644\n--- a/src/server/search/search_family.cc\n+++ b/src/server/search/search_family.cc\n@@ -462,6 +462,10 @@ void ReplySorted(search::AggregationInfo agg, const SearchParams& params,\n }  // namespace\n \n void SearchFamily::FtCreate(CmdArgList args, ConnectionContext* cntx) {\n+  if (cntx->conn_state.db_index != 0) {\n+    return cntx->SendError(\"Cannot create index on db != 0\"sv);\n+  }\n+\n   DocIndex index{};\n \n   CmdArgParser parser{args};\n",
  "test_patch": "diff --git a/src/server/search/search_family_test.cc b/src/server/search/search_family_test.cc\nindex e11869dd7d3c..e8a073dfa5bf 100644\n--- a/src/server/search/search_family_test.cc\n+++ b/src/server/search/search_family_test.cc\n@@ -88,6 +88,33 @@ TEST_F(SearchFamilyTest, CreateDropListIndex) {\n   EXPECT_EQ(Run({\"ft._list\"}), \"idx-3\");\n }\n \n+TEST_F(SearchFamilyTest, CreateDropDifferentDatabases) {\n+  // Create index on db 0\n+  auto resp =\n+      Run({\"ft.create\", \"idx-1\", \"ON\", \"HASH\", \"PREFIX\", \"1\", \"doc-\", \"SCHEMA\", \"name\", \"TEXT\"});\n+  EXPECT_EQ(resp, \"OK\");\n+\n+  EXPECT_EQ(Run({\"select\", \"1\"}), \"OK\");  // change database\n+\n+  // Creating an index on non zero database must fail\n+  resp = Run({\"ft.create\", \"idx-2\", \"ON\", \"JSON\", \"PREFIX\", \"1\", \"prefix-2\"});\n+  EXPECT_THAT(resp, ErrArg(\"ERR Cannot create index on db != 0\"));\n+\n+  // Add some data to the index\n+  Run({\"hset\", \"doc-0\", \"name\", \"Name of 0\"});\n+\n+  // ft.search must work on the another database\n+  resp = Run({\"ft.search\", \"idx-1\", \"*\"});\n+  EXPECT_THAT(resp, IsArray(IntArg(1), \"doc-0\", IsArray(\"name\", \"Name of 0\")));\n+\n+  // ft.dropindex must work on the another database\n+  EXPECT_EQ(Run({\"ft.dropindex\", \"idx-1\"}), \"OK\");\n+\n+  EXPECT_THAT(Run({\"ft.info\", \"idx-1\"}), ErrArg(\"ERR Unknown Index name\"));\n+  EXPECT_EQ(Run({\"select\", \"0\"}), \"OK\");\n+  EXPECT_THAT(Run({\"ft.info\", \"idx-1\"}), ErrArg(\"ERR Unknown Index name\"));\n+}\n+\n TEST_F(SearchFamilyTest, AlterIndex) {\n   Run({\"hset\", \"d:1\", \"color\", \"blue\", \"cost\", \"150\"});\n   Run({\"hset\", \"d:2\", \"color\", \"green\", \"cost\", \"200\"});\n",
  "problem_statement": "FT.CREATE allows to create indexes in all databases\n**Describe the bug**\r\nDragonfly allows to create indexes in all databases. At the same time, Redis allows you to create indexes only in 0 database.\r\n\r\n**Reproducible Code Snippet**\r\n```bash\r\n127.0.0.1:6379> FT.CREATE json ON JSON SCHEMA $.nested.value AS value TEXT\r\nOK\r\n127.0.0.1:6379> SELECT 1\r\nOK\r\n127.0.0.1:6379[1]> FT.CREATE json2 ON JSON SCHEMA $.anothernested.value AS value TEXT\r\nOK\r\n```\r\n\r\n**Expected behavior**\r\n```bash\r\n127.0.0.1:6488> FT.CREATE json ON JSON SCHEMA $.nested.value AS value TEXT\r\nOK\r\n127.0.0.1:6488> SELECT 1\r\nOK\r\n127.0.0.1:6488[1]> FT.CREATE json2 ON JSON SCHEMA $.anothernested.value AS value TEXT\r\n(error) Cannot create index on db != 0\r\n127.0.0.1:6488[1]> SELECT 0\r\nOK\r\n127.0.0.1:6488> FT.CREATE json2 ON JSON SCHEMA $.anothernested.value AS value TEXT\r\nOK\r\n```\n",
  "hints_text": "",
  "created_at": "2024-08-21T09:02:06Z",
  "modified_files": [
    "src/server/search/search_family.cc"
  ],
  "modified_test_files": [
    "src/server/search/search_family_test.cc"
  ]
}