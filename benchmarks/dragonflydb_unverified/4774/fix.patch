diff --git a/src/server/db_slice.cc b/src/server/db_slice.cc
index 023ab251583d..1113df69455c 100644
--- a/src/server/db_slice.cc
+++ b/src/server/db_slice.cc
@@ -62,6 +62,9 @@ static_assert(kExpireSegmentSize == 23528);
 
 void AccountObjectMemory(string_view key, unsigned type, int64_t size, DbTable* db) {
   DCHECK_NE(db, nullptr);
+  if (size == 0)
+    return;
+
   DbTableStats& stats = db->stats;
   DCHECK_GE(static_cast<int64_t>(stats.obj_memory_usage) + size, 0)
       << "Can't decrease " << size << " from " << stats.obj_memory_usage;
@@ -500,6 +503,8 @@ OpResult<DbSlice::ItAndUpdater> DbSlice::FindMutableInternal(const Context& cntx
   PreUpdateBlocking(cntx.db_index, it, key);
   // PreUpdate() might have caused a deletion of `it`
   if (res->it.IsOccupied()) {
+    DCHECK_GE(db_arr_[cntx.db_index]->stats.obj_memory_usage, res->it->second.MallocUsed());
+
     return {{it, exp_it,
              AutoUpdater({.action = AutoUpdater::DestructorAction::kRun,
                           .db_slice = this,
diff --git a/src/server/rdb_load.cc b/src/server/rdb_load.cc
index 42dcbf9241b0..b90ddd1a139d 100644
--- a/src/server/rdb_load.cc
+++ b/src/server/rdb_load.cc
@@ -2544,11 +2544,15 @@ void RdbLoader::CreateObjectOnShard(const DbContext& db_cntx, const Item* item,
                         item->val.rdb_type);
   };
 
+  // The scope is important here, as we need to ensure that the object memory is properly
+  // accounted for.
+  DbSlice::ItAndUpdater append_res;
+
   // If we're appending the item to an existing key, first load the
   // object.
   if (item->load_config.append) {
-    auto res = db_slice->FindMutable(db_cntx, item->key);
-    if (!IsValid(res.it)) {
+    append_res = db_slice->FindMutable(db_cntx, item->key);
+    if (!IsValid(append_res.it)) {
       // If the item has expired we may not find the key. Note if the key
       // is found, but expired since we started loading, we still append to
       // avoid an inconsistent state where only part of the key is loaded.
@@ -2557,7 +2561,7 @@ void RdbLoader::CreateObjectOnShard(const DbContext& db_cntx, const Item* item,
       }
       return;
     }
-    pv_ptr = &res.it->second;
+    pv_ptr = &append_res.it->second;
   }
 
   if (ec_ = FromOpaque(item->val, item->load_config, pv_ptr); ec_) {
@@ -2598,7 +2602,7 @@ void RdbLoader::CreateObjectOnShard(const DbContext& db_cntx, const Item* item,
     return;
   }
 
-  auto& res = *op_res;
+  DbSlice::ItAndUpdater& res = *op_res;
   res.it->first.SetSticky(item->is_sticky);
   if (item->has_mc_flags) {
     res.it->second.SetFlag(true);
