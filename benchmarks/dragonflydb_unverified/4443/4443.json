{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 4443,
  "instance_id": "dragonflydb__dragonfly-4443",
  "issue_numbers": [
    "4440"
  ],
  "base_commit": "7a7b671095f7181ce8e51f651650d8073bff423e",
  "patch": "diff --git a/src/server/stream_family.cc b/src/server/stream_family.cc\nindex 293093e0ec65..39b195a4f6d2 100644\n--- a/src/server/stream_family.cc\n+++ b/src/server/stream_family.cc\n@@ -257,15 +257,16 @@ bool ParseID(string_view strid, bool strict, uint64_t missing_seq, ParsedStreamI\n   return true;\n }\n \n-bool ParseRangeId(string_view id, RangeId* dest) {\n+enum class RangeBoundary { kStart, kEnd };\n+bool ParseRangeId(string_view id, RangeBoundary type, RangeId* dest) {\n   if (id.empty())\n     return false;\n   if (id[0] == '(') {\n     dest->exclude = true;\n     id.remove_prefix(1);\n   }\n-\n-  return ParseID(id, dest->exclude, 0, &dest->parsed_id);\n+  uint64 missing_seq = type == RangeBoundary::kStart ? 0 : -1;\n+  return ParseID(id, dest->exclude, missing_seq, &dest->parsed_id);\n }\n \n /* This is a wrapper function for lpGet() to directly get an integer value\n@@ -2204,7 +2205,8 @@ void XRangeGeneric(std::string_view key, std::string_view start, std::string_vie\n                    CmdArgList args, bool is_rev, Transaction* tx, SinkReplyBuilder* builder) {\n   RangeOpts range_opts;\n   RangeId rs, re;\n-  if (!ParseRangeId(start, &rs) || !ParseRangeId(end, &re)) {\n+  if (!ParseRangeId(start, RangeBoundary::kStart, &rs) ||\n+      !ParseRangeId(end, RangeBoundary::kEnd, &re)) {\n     return builder->SendError(kInvalidStreamId, kSyntaxErrType);\n   }\n \n@@ -2502,7 +2504,8 @@ bool ParseXpendingOptions(CmdArgList& args, PendingOpts& opts, SinkReplyBuilder*\n   string_view start = ArgS(args, id_indx);\n   id_indx++;\n   string_view end = ArgS(args, id_indx);\n-  if (!ParseRangeId(start, &rs) || !ParseRangeId(end, &re)) {\n+  if (!ParseRangeId(start, RangeBoundary::kStart, &rs) ||\n+      !ParseRangeId(end, RangeBoundary::kEnd, &re)) {\n     builder->SendError(kInvalidStreamId, kSyntaxErrType);\n     return false;\n   }\n@@ -3225,7 +3228,7 @@ void StreamFamily::XAutoClaim(CmdArgList args, const CommandContext& cmd_cntx) {\n   string_view start = ArgS(args, 4);\n   RangeId rs;\n \n-  if (!ParseRangeId(start, &rs)) {\n+  if (!ParseRangeId(start, RangeBoundary::kStart, &rs)) {\n     return rb->SendError(kSyntaxErr);\n   }\n \n",
  "test_patch": "diff --git a/src/server/stream_family_test.cc b/src/server/stream_family_test.cc\nindex 0b5ae10cbb42..12edae158806 100644\n--- a/src/server/stream_family_test.cc\n+++ b/src/server/stream_family_test.cc\n@@ -93,6 +93,21 @@ TEST_F(StreamFamilyTest, AddExtended) {\n   EXPECT_THAT(Run({\"xlen\", \"key4\"}), IntArg(601));\n }\n \n+TEST_F(StreamFamilyTest, XrangeRangeAutocomplete) {\n+  Run({\"xadd\", \"mystream\", \"1609459200000-0\", \"0\", \"0\"});\n+  Run({\"xadd\", \"mystream\", \"1609459200001-0\", \"1\", \"1\"});\n+  Run({\"xadd\", \"mystream\", \"1609459200001-1\", \"2\", \"2\"});\n+  Run({\"xadd\", \"mystream\", \"1609459200002-0\", \"3\", \"3\"});\n+  auto resp = Run({\"xrange\", \"mystream\", \"1609459200000\", \"1609459200001\"});\n+  EXPECT_THAT(resp, RespElementsAre(RespElementsAre(\"1609459200000-0\", RespElementsAre(\"0\", \"0\")),\n+                                    RespElementsAre(\"1609459200001-0\", RespElementsAre(\"1\", \"1\")),\n+                                    RespElementsAre(\"1609459200001-1\", RespElementsAre(\"2\", \"2\"))));\n+  resp = Run({\"xrange\", \"mystream\", \"1609459200000\", \"(1609459200001\"});\n+  EXPECT_THAT(resp, RespElementsAre(RespElementsAre(\"1609459200000-0\", RespElementsAre(\"0\", \"0\")),\n+                                    RespElementsAre(\"1609459200001-0\", RespElementsAre(\"1\", \"1\")),\n+                                    RespElementsAre(\"1609459200001-1\", RespElementsAre(\"2\", \"2\"))));\n+}\n+\n TEST_F(StreamFamilyTest, Range) {\n   Run({\"xadd\", \"key\", \"1-*\", \"f1\", \"v1\"});\n   Run({\"xadd\", \"key\", \"1-*\", \"f2\", \"v2\"});\n",
  "problem_statement": "XRANGE incorrectly interprets the `end` parameter when only the timestamp portion is provided\n### Describe the Bug\r\n- `XRANGE key start end [COUNT count]` allows passing in `start` and `end` IDs with only the timestamp portion.\r\n- For the `start` parameter, `XRANGE` auto-completes the sequence number to `0`, which is correct.\r\n- For the `end` parameter, `XRANGE` also auto-completes the sequence number to `0`, **which is incorrect**.\r\n- For the `end` parameter, **it should use the max value of an unsigned 64-bit integer as the sequence instead**.\r\n- For instance:\r\n  - `1609459200000` as the `start` parameter should be converted to `1609459200000-0`\r\n  - `1609459200000` as the `end` parameter should be converted to `1609459200000-18446744073709551615`\r\n- **Please double for check the `XREVRANGE` command as well** since the conversion logic should be the same.\r\n\r\n### To Reproduce\r\n- Start a Dragonfly server, and follow the commands below:\r\n\r\n```shell\r\n$> XADD mystream \"1609459200000-0\" sensor 0 temperature 0\r\n\"1609459200000-0\"\r\n\r\n$> XADD mystream \"1609459200001-0\" sensor 1 temperature 1\r\n\"1609459200001-0\"\r\n\r\n$> XADD mystream \"1609459200001-1\" sensor 2 temperature 2\r\n\"1609459200001-1\"\r\n\r\n$> XADD mystream \"1609459200002-0\" sensor 3 temperature 3\r\n\"1609459200002-0\"\r\n\r\n# Retrieve entries using only the timestamp portion of the IDs.\r\n# The IDs are interpreted as \"1609459200000-0\" and \"1609459200001-0\".\r\n$> XRANGE mystream \"1609459200000\" \"1609459200001\"\r\n1) 1) \"1609459200000-0\"\r\n   2) 1) \"sensor\"\r\n      2) \"0\"\r\n      3) \"temperature\"\r\n      4) \"0\"\r\n2) 1) \"1609459200001-0\"\r\n   2) 1) \"sensor\"\r\n      2) \"1\"\r\n      3) \"temperature\"\r\n      4) \"1\"\r\n\r\n# Retrieve entries using only the timestamp portion of the IDs, with exclusive range for the end ID.\r\n# The IDs are interpreted as \"1609459200000-0\" and \"(1609459200001-0\".\r\n$> XRANGE mystream \"1609459200000\" \"(1609459200001\"\r\n1) 1) \"1609459200000-0\"\r\n   2) 1) \"sensor\"\r\n      2) \"0\"\r\n      3) \"temperature\"\r\n      4) \"0\"\r\n```\r\n\r\n### Expected Behavior\r\n\r\n```shell\r\n# Add the same 4 stream entries as above.\r\n\r\n# Retrieve entries using only the timestamp portion of the IDs.\r\n# The IDs should be interpreted as \"1609459200000-0\" and \"1609459200001-18446744073709551615\"\r\n$> XRANGE mystream \"1609459200000\" \"1609459200001\"\r\n1) 1) \"1609459200000-0\"\r\n   2) 1) \"sensor\"\r\n      2) \"0\"\r\n      3) \"temperature\"\r\n      4) \"0\"\r\n2) 1) \"1609459200001-0\"\r\n   2) 1) \"sensor\"\r\n      2) \"1\"\r\n      3) \"temperature\"\r\n      4) \"1\"\r\n3) 1) \"1609459200001-1\"\r\n   2) 1) \"sensor\"\r\n      2) \"2\"\r\n      3) \"temperature\"\r\n      4) \"2\"\r\n\r\n# Retrieve entries using only the timestamp portion of the IDs, with exclusive range for the end ID.\r\n# Similarly, the IDs should be interpreted as \"1609459200000-0\" and \"(1609459200001-18446744073709551615\".\r\n$> XRANGE mystream \"1609459200000\" \"(1609459200001\"\r\n1) 1) \"1609459200000-0\"\r\n   2) 1) \"sensor\"\r\n      2) \"0\"\r\n      3) \"temperature\"\r\n      4) \"0\"\r\n2) 1) \"1609459200001-0\"\r\n   2) 1) \"sensor\"\r\n      2) \"1\"\r\n      3) \"temperature\"\r\n      4) \"1\"\r\n3) 1) \"1609459200001-1\"\r\n   2) 1) \"sensor\"\r\n      2) \"2\"\r\n      3) \"temperature\"\r\n      4) \"2\"\r\n```\n",
  "hints_text": "Thanks @Niennienzz .\r\n",
  "created_at": "2025-01-12T15:24:18Z",
  "modified_files": [
    "src/server/stream_family.cc"
  ],
  "modified_test_files": [
    "src/server/stream_family_test.cc"
  ]
}