diff --git a/src/server/stream_family.cc b/src/server/stream_family.cc
index 293093e0ec65..39b195a4f6d2 100644
--- a/src/server/stream_family.cc
+++ b/src/server/stream_family.cc
@@ -257,15 +257,16 @@ bool ParseID(string_view strid, bool strict, uint64_t missing_seq, ParsedStreamI
   return true;
 }
 
-bool ParseRangeId(string_view id, RangeId* dest) {
+enum class RangeBoundary { kStart, kEnd };
+bool ParseRangeId(string_view id, RangeBoundary type, RangeId* dest) {
   if (id.empty())
     return false;
   if (id[0] == '(') {
     dest->exclude = true;
     id.remove_prefix(1);
   }
-
-  return ParseID(id, dest->exclude, 0, &dest->parsed_id);
+  uint64 missing_seq = type == RangeBoundary::kStart ? 0 : -1;
+  return ParseID(id, dest->exclude, missing_seq, &dest->parsed_id);
 }
 
 /* This is a wrapper function for lpGet() to directly get an integer value
@@ -2204,7 +2205,8 @@ void XRangeGeneric(std::string_view key, std::string_view start, std::string_vie
                    CmdArgList args, bool is_rev, Transaction* tx, SinkReplyBuilder* builder) {
   RangeOpts range_opts;
   RangeId rs, re;
-  if (!ParseRangeId(start, &rs) || !ParseRangeId(end, &re)) {
+  if (!ParseRangeId(start, RangeBoundary::kStart, &rs) ||
+      !ParseRangeId(end, RangeBoundary::kEnd, &re)) {
     return builder->SendError(kInvalidStreamId, kSyntaxErrType);
   }
 
@@ -2502,7 +2504,8 @@ bool ParseXpendingOptions(CmdArgList& args, PendingOpts& opts, SinkReplyBuilder*
   string_view start = ArgS(args, id_indx);
   id_indx++;
   string_view end = ArgS(args, id_indx);
-  if (!ParseRangeId(start, &rs) || !ParseRangeId(end, &re)) {
+  if (!ParseRangeId(start, RangeBoundary::kStart, &rs) ||
+      !ParseRangeId(end, RangeBoundary::kEnd, &re)) {
     builder->SendError(kInvalidStreamId, kSyntaxErrType);
     return false;
   }
@@ -3225,7 +3228,7 @@ void StreamFamily::XAutoClaim(CmdArgList args, const CommandContext& cmd_cntx) {
   string_view start = ArgS(args, 4);
   RangeId rs;
 
-  if (!ParseRangeId(start, &rs)) {
+  if (!ParseRangeId(start, RangeBoundary::kStart, &rs)) {
     return rb->SendError(kSyntaxErr);
   }
 
