{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 367,
  "instance_id": "dragonflydb__dragonfly-367",
  "issue_numbers": [
    "357"
  ],
  "base_commit": "608a80411a556be17b3ad2ea97e356b3b296fecf",
  "patch": "diff --git a/CONTRIBUTORS.md b/CONTRIBUTORS.md\nindex 9a0b0fb5daac..2abda5fe9986 100644\n--- a/CONTRIBUTORS.md\n+++ b/CONTRIBUTORS.md\n@@ -4,6 +4,7 @@\n * **[Philipp Born](https://github.com/tamcore)**\n   * Helm Chart\n * **[Braydn Moore](https://github.com/braydnm)**\n+* **[Logan Raarup](https://github.com/logandk)**\n * **[Ryan Russell](https://github.com/ryanrussell)**\n   * Docs & Code Readability\n * **[Ali-Akber Saifee](https://github.com/alisaifee)**\ndiff --git a/src/server/zset_family.cc b/src/server/zset_family.cc\nindex dd5e0218243f..2d66bd7c4a07 100644\n--- a/src/server/zset_family.cc\n+++ b/src/server/zset_family.cc\n@@ -1274,6 +1274,35 @@ void ZSetFamily::ZScore(CmdArgList args, ConnectionContext* cntx) {\n   }\n }\n \n+void ZSetFamily::ZMScore(CmdArgList args, ConnectionContext* cntx) {\n+  string_view key = ArgS(args, 1);\n+\n+  absl::InlinedVector<string_view, 8> members(args.size() - 2);\n+  for (size_t i = 2; i < args.size(); ++i) {\n+    members[i - 2] = ArgS(args, i);\n+  }\n+\n+  auto cb = [&](Transaction* t, EngineShard* shard) {\n+    return OpMScore(t->GetOpArgs(shard), key, members);\n+  };\n+\n+  OpResult<MScoreResponse> result = cntx->transaction->ScheduleSingleHopT(std::move(cb));\n+\n+  if (result.status() == OpStatus::WRONG_TYPE) {\n+    return (*cntx)->SendError(kWrongTypeErr);\n+  }\n+\n+  (*cntx)->StartArray(result->size());\n+  const MScoreResponse& array = result.value();\n+  for (const auto& p : array) {\n+    if (p) {\n+      (*cntx)->SendDouble(*p);\n+    } else {\n+      (*cntx)->SendNull();\n+    }\n+  }\n+}\n+\n void ZSetFamily::ZScan(CmdArgList args, ConnectionContext* cntx) {\n   string_view key = ArgS(args, 1);\n   string_view token = ArgS(args, 2);\n@@ -1603,6 +1632,32 @@ OpResult<double> ZSetFamily::OpScore(const OpArgs& op_args, string_view key, str\n   return score;\n }\n \n+OpResult<ZSetFamily::MScoreResponse> ZSetFamily::OpMScore(const OpArgs& op_args, string_view key, ArgSlice members) {\n+  OpResult<PrimeIterator> res_it = op_args.shard->db_slice().Find(op_args.db_cntx, key, OBJ_ZSET);\n+  if (!res_it)\n+    return res_it.status();\n+\n+  MScoreResponse scores(members.size());\n+\n+  robj* zobj = res_it.value()->second.AsRObj();\n+  sds& tmp_str = op_args.shard->tmp_str1;\n+\n+  for (size_t i = 0; i < members.size(); i++) {\n+    const auto& m = members[i];\n+\n+    tmp_str = sdscpylen(tmp_str, m.data(), m.size());\n+    double score;\n+    int retval = zsetScore(zobj, tmp_str, &score);\n+    if (retval == C_OK) {\n+      scores[i] = score;\n+    } else {\n+      scores[i] = std::nullopt;\n+    }\n+  }\n+\n+  return scores;\n+}\n+\n auto ZSetFamily::OpRange(const ZRangeSpec& range_spec, const OpArgs& op_args, string_view key)\n     -> OpResult<ScoredArray> {\n   OpResult<PrimeIterator> res_it = op_args.shard->db_slice().Find(op_args.db_cntx, key, OBJ_ZSET);\n@@ -1808,6 +1863,7 @@ void ZSetFamily::Register(CommandRegistry* registry) {\n             << CI{\"ZRANGEBYLEX\", CO::READONLY, -4, 1, 1, 1}.HFUNC(ZRangeByLex)\n             << CI{\"ZRANGEBYSCORE\", CO::READONLY, -4, 1, 1, 1}.HFUNC(ZRangeByScore)\n             << CI{\"ZSCORE\", CO::READONLY | CO::FAST, 3, 1, 1, 1}.HFUNC(ZScore)\n+            << CI{\"ZMSCORE\", CO::READONLY | CO::FAST, -3, 1, 1, 1}.HFUNC(ZMScore)\n             << CI{\"ZREMRANGEBYRANK\", CO::WRITE, 4, 1, 1, 1}.HFUNC(ZRemRangeByRank)\n             << CI{\"ZREMRANGEBYSCORE\", CO::WRITE, 4, 1, 1, 1}.HFUNC(ZRemRangeByScore)\n             << CI{\"ZREMRANGEBYLEX\", CO::WRITE, 4, 1, 1, 1}.HFUNC(ZRemRangeByLex)\ndiff --git a/src/server/zset_family.h b/src/server/zset_family.h\nindex ced187e4e8ec..9ee85777bae5 100644\n--- a/src/server/zset_family.h\n+++ b/src/server/zset_family.h\n@@ -62,6 +62,7 @@ class ZSetFamily {\n   static void ZRank(CmdArgList args, ConnectionContext* cntx);\n   static void ZRem(CmdArgList args, ConnectionContext* cntx);\n   static void ZScore(CmdArgList args, ConnectionContext* cntx);\n+  static void ZMScore(CmdArgList args, ConnectionContext* cntx);\n   static void ZRangeByLex(CmdArgList args, ConnectionContext* cntx);\n   static void ZRangeByScore(CmdArgList args, ConnectionContext* cntx);\n   static void ZRemRangeByRank(CmdArgList args, ConnectionContext* cntx);\n@@ -89,6 +90,9 @@ class ZSetFamily {\n   static OpResult<unsigned> OpRem(const OpArgs& op_args, std::string_view key, ArgSlice members);\n   static OpResult<double> OpScore(const OpArgs& op_args, std::string_view key,\n                                   std::string_view member);\n+  using MScoreResponse = std::vector<std::optional<double>>;\n+  static OpResult<MScoreResponse> OpMScore(const OpArgs& op_args, std::string_view key,\n+                                  ArgSlice members);\n   static OpResult<ScoredArray> OpRange(const ZRangeSpec& range_spec, const OpArgs& op_args,\n                                        std::string_view key);\n   static OpResult<unsigned> OpRemRange(const OpArgs& op_args, std::string_view key,\n",
  "test_patch": "diff --git a/src/server/zset_family_test.cc b/src/server/zset_family_test.cc\nindex 4d31d0ce5d56..141394cbe164 100644\n--- a/src/server/zset_family_test.cc\n+++ b/src/server/zset_family_test.cc\n@@ -64,6 +64,15 @@ TEST_F(ZSetFamilyTest, ZRem) {\n   EXPECT_THAT(Run({\"zrange\", \"x\", \"(-inf\", \"(+inf\", \"byscore\"}), \"a\");\n }\n \n+TEST_F(ZSetFamilyTest, ZMScore) {\n+  Run({\"zadd\", \"zms\", \"3.14\", \"a\"});\n+  Run({\"zadd\", \"zms\", \"42\", \"another\"});\n+\n+  auto resp = Run({\"zmscore\", \"zms\", \"another\", \"a\", \"nofield\"});\n+  ASSERT_EQ(RespExpr::ARRAY, resp.type);\n+  EXPECT_THAT(resp.GetVec(), ElementsAre(\"42\", \"3.14\", ArgType(RespExpr::NIL)));\n+}\n+\n TEST_F(ZSetFamilyTest, ZRangeRank) {\n   Run({\"zadd\", \"x\", \"1.1\", \"a\", \"2.1\", \"b\"});\n   EXPECT_THAT(Run({\"zrangebyscore\", \"x\", \"0\", \"(1.1\"}), ArrLen(0));\n",
  "problem_statement": "Support ZMSCORE\nsee https://redis.io/commands/zmscore/ for more details. \n",
  "hints_text": "",
  "created_at": "2022-10-07T09:52:22Z",
  "modified_files": [
    "CONTRIBUTORS.md",
    "src/server/zset_family.cc",
    "src/server/zset_family.h"
  ],
  "modified_test_files": [
    "src/server/zset_family_test.cc"
  ]
}