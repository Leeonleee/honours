diff --git a/src/server/server_family_test.cc b/src/server/server_family_test.cc
index 07bdb956f408..e0a12c26956e 100644
--- a/src/server/server_family_test.cc
+++ b/src/server/server_family_test.cc
@@ -4,6 +4,8 @@
 
 #include "server/server_family.h"
 
+#include <absl/strings/match.h>
+
 #include "base/gtest.h"
 #include "base/logging.h"
 #include "facade/facade_test.h"
@@ -181,4 +183,21 @@ TEST_F(ServerFamilyTest, SlowLogMinusOneDisabled) {
   EXPECT_THAT(resp.GetInt(), 0);
 }
 
+TEST_F(ServerFamilyTest, ClientPause) {
+  auto start = absl::Now();
+  Run({"CLIENT", "PAUSE", "50"});
+
+  Run({"get", "key"});
+  EXPECT_GT((absl::Now() - start), absl::Milliseconds(50));
+
+  start = absl::Now();
+
+  Run({"CLIENT", "PAUSE", "50", "WRITE"});
+
+  Run({"get", "key"});
+  EXPECT_LT((absl::Now() - start), absl::Milliseconds(10));
+  Run({"set", "key", "value2"});
+  EXPECT_GT((absl::Now() - start), absl::Milliseconds(50));
+}
+
 }  // namespace dfly
diff --git a/tests/dragonfly/replication_test.py b/tests/dragonfly/replication_test.py
index 2b68c511e9ee..309d9936fbe7 100644
--- a/tests/dragonfly/replication_test.py
+++ b/tests/dragonfly/replication_test.py
@@ -1761,3 +1761,49 @@ async def test_search(df_local_factory):
     assert (await c_replica.ft("idx-m2").search(Query("*").sort_by("f2").paging(0, 1))).docs[
         0
     ].id == "k0"
+
+
+# @pytest.mark.slow
+@pytest.mark.asyncio
+async def test_client_pause_with_replica(df_local_factory, df_seeder_factory):
+    master = df_local_factory.create(proactor_threads=4)
+    replica = df_local_factory.create(proactor_threads=4)
+    df_local_factory.start_all([master, replica])
+
+    seeder = df_seeder_factory.create(port=master.port)
+
+    c_master = master.client()
+    c_replica = replica.client()
+
+    await c_replica.execute_command(f"REPLICAOF localhost {master.port}")
+    await wait_available_async(c_replica)
+
+    fill_task = asyncio.create_task(seeder.run())
+
+    # Give the seeder a bit of time.
+    await asyncio.sleep(1)
+    # block the seeder for 4 seconds
+    await c_master.execute_command("client pause 4000 write")
+    stats = await c_master.info("CommandStats")
+    info = await c_master.info("Stats")
+    await asyncio.sleep(0.5)
+    stats_after_sleep = await c_master.info("CommandStats")
+    # Check no commands are executed except info and replconf called from replica
+    for cmd, cmd_stats in stats_after_sleep.items():
+        if "cmdstat_INFO" != cmd and "cmdstat_REPLCONF" != cmd_stats:
+            assert stats[cmd] == cmd_stats
+
+    await asyncio.sleep(6)
+    seeder.stop()
+    await fill_task
+    stats_after_pause_finish = await c_master.info("CommandStats")
+    more_exeuted = False
+    for cmd, cmd_stats in stats_after_pause_finish.items():
+        if "cmdstat_INFO" != cmd and "cmdstat_REPLCONF" != cmd_stats and stats[cmd] != cmd_stats:
+            more_exeuted = True
+    assert more_exeuted
+
+    capture = await seeder.capture(port=master.port)
+    assert await seeder.compare(capture, port=replica.port)
+
+    await disconnect_clients(c_master, c_replica)
