{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 2222,
  "instance_id": "dragonflydb__dragonfly-2222",
  "issue_numbers": [
    "1876"
  ],
  "base_commit": "18a2b52f4e4cbbeb7db798000cb563d4fdc6e092",
  "patch": "diff --git a/src/server/bitops_family.cc b/src/server/bitops_family.cc\nindex 90a8157a0030..4c91f7baab21 100644\n--- a/src/server/bitops_family.cc\n+++ b/src/server/bitops_family.cc\n@@ -1003,7 +1003,7 @@ nonstd::expected<CommonAttributes, std::string> ParseCommonAttr(CmdArgParser* pr\n // Parses a list of arguments (without key) to a CommandList.\n // Returns the CommandList if the parsing completed succefully or std::string\n // to indicate an error\n-nonstd::expected<CommandList, std::string> ParseToCommandList(CmdArgList args) {\n+nonstd::expected<CommandList, std::string> ParseToCommandList(CmdArgList args, bool read_only) {\n   CommandList result;\n \n   using nonstd::make_unexpected;\n@@ -1018,6 +1018,9 @@ nonstd::expected<CommandList, std::string> ParseToCommandList(CmdArgList args) {\n \n     using namespace std::string_view_literals;\n     if (op == \"OVERFLOW\"sv) {\n+      if (read_only) {\n+        make_unexpected(\"BITFIELD_RO only supports the GET subcommand\");\n+      }\n       using pol = Overflow::Policy;\n       auto res = parser.ToUpper().Switch(\"SAT\", pol::SAT, \"WRAP\", pol::WRAP, \"FAIL\", pol::FAIL);\n       if (!parser.HasError()) {\n@@ -1039,6 +1042,10 @@ nonstd::expected<CommandList, std::string> ParseToCommandList(CmdArgList args) {\n       continue;\n     }\n \n+    if (read_only) {\n+      return make_unexpected(\"BITFIELD_RO only supports the GET subcommand\");\n+    }\n+\n     auto value = parser.ToUpper().Next<int64_t>();\n     if (parser.HasError()) {\n       parser.Error();\n@@ -1078,13 +1085,13 @@ void SendResults(const std::vector<ResultType>& results, ConnectionContext* cntx\n   }\n }\n \n-void BitField(CmdArgList args, ConnectionContext* cntx) {\n+void BitFieldGeneric(CmdArgList args, bool read_only, ConnectionContext* cntx) {\n   if (args.size() == 1) {\n     (*cntx)->SendNullArray();\n     return;\n   }\n   auto key = ArgS(args, 0);\n-  auto maybe_ops_list = ParseToCommandList(args.subspan(1));\n+  auto maybe_ops_list = ParseToCommandList(args.subspan(1), read_only);\n \n   if (!maybe_ops_list.has_value()) {\n     cntx->SendError(maybe_ops_list.error());\n@@ -1109,9 +1116,12 @@ void BitField(CmdArgList args, ConnectionContext* cntx) {\n   SendResults(*res, cntx);\n }\n \n+void BitField(CmdArgList args, ConnectionContext* cntx) {\n+  BitFieldGeneric(args, false, cntx);\n+}\n+\n void BitFieldRo(CmdArgList args, ConnectionContext* cntx) {\n-  cntx->SendError(\"Not Yet Implemented\");\n-  // return BitField(args, cntx);\n+  BitFieldGeneric(args, true, cntx);\n }\n \n #pragma GCC diagnostic pop\n",
  "test_patch": "diff --git a/src/server/bitops_family_test.cc b/src/server/bitops_family_test.cc\nindex 439fbc3cb957..18b9b7e9a102 100644\n--- a/src/server/bitops_family_test.cc\n+++ b/src/server/bitops_family_test.cc\n@@ -557,6 +557,10 @@ TEST_F(BitOpsFamilyTest, BitFieldParsing) {\n   ASSERT_THAT(Run({\"bitfield\", \"foo\", \"set\", \"u64\", \"0\", \"0\"}), expected_error);\n   ASSERT_THAT(Run({\"bitfield\", \"foo\", \"set\", \"u65\", \"0\", \"0\"}), expected_error);\n   ASSERT_THAT(Run({\"bitfield\", \"foo\", \"set\", \"i65\", \"0\", \"0\"}), expected_error);\n+\n+  expected_error = ErrArg(\"BITFIELD_RO only supports the GET subcommand\");\n+  ASSERT_THAT(Run({\"bitfield_ro\", \"foo\", \"set\", \"u1\", \"0\", \"0\"}), expected_error);\n+  ASSERT_THAT(Run({\"bitfield_ro\", \"foo\", \"incrby\", \"i64\", \"0\", \"15\"}), expected_error);\n }\n \n TEST_F(BitOpsFamilyTest, BitFieldCreate) {\n",
  "problem_statement": "implement BITFIELD_RO\nSee https://redis.io/commands/bitfield_ro/ for more details\n",
  "hints_text": "Hi, I'd like to work on this!\nSure, go ahead.\nHi @0xedl, please note that there's also `BITFIELD` command which is missing:\r\nhttps://github.com/dragonflydb/dragonfly/issues/213\r\nIt might be worth to keep that in mind when implementing, for supporting that as well :pray: \n@chakaz  actually BITFIELD is more complicated therefore I actually suggest to start with BITFIELD_RO first and do the refactoring (code reuse) later.\nAgreed, just something to keep in mind that's all :)\nHi @0xedl , are you working on the issue? If you are, consider opening a draft PR so that other could see and comment on the approach :)\nHi! I will have something ready soon! ",
  "created_at": "2023-11-27T11:10:39Z",
  "modified_files": [
    "src/server/bitops_family.cc"
  ],
  "modified_test_files": [
    "src/server/bitops_family_test.cc"
  ]
}