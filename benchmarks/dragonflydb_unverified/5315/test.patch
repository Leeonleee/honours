diff --git a/src/server/generic_family_test.cc b/src/server/generic_family_test.cc
index 1951dd33d61d..32fbd1c8e1c6 100644
--- a/src/server/generic_family_test.cc
+++ b/src/server/generic_family_test.cc
@@ -21,7 +21,6 @@ extern "C" {
 using namespace testing;
 using namespace std;
 using namespace util;
-using namespace boost;
 using absl::StrCat;
 
 namespace dfly {
@@ -453,14 +452,33 @@ TEST_F(GenericFamilyTest, Rename) {
   ren_fb.Join();
 }
 
-TEST_F(GenericFamilyTest, RenameNonString) {
-  EXPECT_EQ(1, CheckedInt({"lpush", "x", "elem"}));
-  auto resp = Run({"rename", "x", "b"});
-  ASSERT_EQ(resp, "OK");
-  ASSERT_EQ(2, last_cmd_dbg_info_.shards_count);
+TEST_F(GenericFamilyTest, RenameList) {
+  for (string_view dest : {"b", "y", "z"}) {
+    EXPECT_EQ(1, CheckedInt({"lpush", "x", "elem"}));
+    Metrics metrics = GetMetrics();
+
+    size_t list_usage = metrics.db_stats[0].memory_usage_by_type[OBJ_LIST];
+    size_t string_usage = metrics.db_stats[0].memory_usage_by_type[OBJ_STRING];
+    ASSERT_GT(list_usage, 0);
+    ASSERT_EQ(string_usage, 0);
+
+    auto resp = Run({"rename", "x", dest});
+    ASSERT_EQ(resp, "OK");
+    if (dest == "b") {
+      ASSERT_EQ(2, last_cmd_dbg_info_.shards_count);
+    } else {
+      ASSERT_EQ(1, last_cmd_dbg_info_.shards_count);
+    }
 
-  EXPECT_EQ(0, CheckedInt({"del", "x"}));
-  EXPECT_EQ(1, CheckedInt({"del", "b"}));
+    metrics = GetMetrics();
+    size_t list_usage_after = metrics.db_stats[0].memory_usage_by_type[OBJ_LIST];
+    string_usage = metrics.db_stats[0].memory_usage_by_type[OBJ_STRING];
+    ASSERT_EQ(list_usage_after, list_usage);
+    ASSERT_EQ(string_usage, 0);
+
+    EXPECT_EQ(0, CheckedInt({"del", "x"}));
+    EXPECT_EQ(1, CheckedInt({"del", dest}));
+  }
 }
 
 TEST_F(GenericFamilyTest, RenameBinary) {
diff --git a/src/server/string_family_test.cc b/src/server/string_family_test.cc
index d546644cfd12..bee1ca298392 100644
--- a/src/server/string_family_test.cc
+++ b/src/server/string_family_test.cc
@@ -810,6 +810,18 @@ TEST_F(StringFamilyTest, SetMGetWithNilResp3) {
   EXPECT_THAT(resp.GetVec(), ElementsAre("val", ArgType(RespExpr::NIL)));
 }
 
+TEST_F(StringFamilyTest, OverrideOther) {
+  Run({"lpush", "a", "fooo"});
+  Run({"set", "a", string(100, 'b')});
+  Metrics metrics = GetMetrics();
+
+  size_t list_usage = metrics.db_stats[0].memory_usage_by_type[OBJ_LIST];
+  size_t string_usage = metrics.db_stats[0].memory_usage_by_type[OBJ_STRING];
+  EXPECT_EQ(list_usage, 0);
+  EXPECT_GT(string_usage, 0);
+  EXPECT_LT(string_usage, 100);
+}
+
 TEST_F(StringFamilyTest, SetWithGetParam) {
   EXPECT_THAT(Run({"set", "key1", "val1", "get"}), ArgType(RespExpr::NIL));
   EXPECT_EQ(Run({"set", "key1", "val2", "get"}), "val1");
