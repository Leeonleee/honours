diff --git a/src/server/acl/acl_family_test.cc b/src/server/acl/acl_family_test.cc
index c13499752a07..b01d3dbff2b4 100644
--- a/src/server/acl/acl_family_test.cc
+++ b/src/server/acl/acl_family_test.cc
@@ -21,6 +21,7 @@ class AclFamilyTest : public BaseFamilyTest {
 };
 
 TEST_F(AclFamilyTest, AclSetUser) {
+  TestInitAclFam();
   auto resp = Run({"ACL", "SETUSER"});
   EXPECT_THAT(resp, ErrArg("ERR wrong number of arguments for 'acl setuser' command"));
 
@@ -34,11 +35,12 @@ TEST_F(AclFamilyTest, AclSetUser) {
   EXPECT_THAT(resp, "OK");
   resp = Run({"ACL", "LIST"});
   auto vec = resp.GetVec();
-  EXPECT_THAT(vec,
-              UnorderedElementsAre("user default on nopass +@ALL", "user vlad off nopass +@NONE"));
+  EXPECT_THAT(vec, UnorderedElementsAre("user default on nopass +@ALL +ALL",
+                                        "user vlad off nopass +@NONE"));
 }
 
 TEST_F(AclFamilyTest, AclDelUser) {
+  TestInitAclFam();
   auto resp = Run({"ACL", "DELUSER"});
   EXPECT_THAT(resp, ErrArg("ERR wrong number of arguments for 'acl deluser' command"));
 
@@ -55,10 +57,11 @@ TEST_F(AclFamilyTest, AclDelUser) {
   EXPECT_THAT(resp, "OK");
 
   resp = Run({"ACL", "LIST"});
-  EXPECT_THAT(resp.GetString(), "user default on nopass +@ALL");
+  EXPECT_THAT(resp.GetString(), "user default on nopass +@ALL +ALL");
 }
 
 TEST_F(AclFamilyTest, AclList) {
+  TestInitAclFam();
   auto resp = Run({"ACL", "LIST", "NONSENSE"});
   EXPECT_THAT(resp, ErrArg("ERR wrong number of arguments for 'acl list' command"));
 
@@ -70,12 +73,13 @@ TEST_F(AclFamilyTest, AclList) {
 
   resp = Run({"ACL", "LIST"});
   auto vec = resp.GetVec();
-  EXPECT_THAT(vec, UnorderedElementsAre("user default on nopass +@ALL",
+  EXPECT_THAT(vec, UnorderedElementsAre("user default on nopass +@ALL +ALL",
                                         "user kostas off d74ff0ee8da3b98 +@ADMIN",
                                         "user adi off d74ff0ee8da3b98 +@FAST"));
 }
 
 TEST_F(AclFamilyTest, AclAuth) {
+  TestInitAclFam();
   auto resp = Run({"ACL", "SETUSER", "shahar", ">mypass"});
   EXPECT_THAT(resp, "OK");
 
@@ -94,6 +98,7 @@ TEST_F(AclFamilyTest, AclAuth) {
 }
 
 TEST_F(AclFamilyTest, AclWhoAmI) {
+  TestInitAclFam();
   auto resp = Run({"ACL", "WHOAMI", "WHO"});
   EXPECT_THAT(resp, ErrArg("ERR wrong number of arguments for 'acl whoami' command"));
 
@@ -108,6 +113,7 @@ TEST_F(AclFamilyTest, AclWhoAmI) {
 }
 
 TEST_F(AclFamilyTest, TestAllCategories) {
+  TestInitAclFam();
   for (auto& cat : acl::REVERSE_CATEGORY_INDEX_TABLE) {
     if (cat != "_RESERVED") {
       auto resp = Run({"ACL", "SETUSER", "kostas", absl::StrCat("+@", cat)});
@@ -115,7 +121,7 @@ TEST_F(AclFamilyTest, TestAllCategories) {
 
       resp = Run({"ACL", "LIST"});
       EXPECT_THAT(resp.GetVec(),
-                  UnorderedElementsAre("user default on nopass +@ALL",
+                  UnorderedElementsAre("user default on nopass +@ALL +ALL",
                                        absl::StrCat("user kostas off nopass ", "+@", cat)));
 
       resp = Run({"ACL", "SETUSER", "kostas", absl::StrCat("-@", cat)});
@@ -123,7 +129,7 @@ TEST_F(AclFamilyTest, TestAllCategories) {
 
       resp = Run({"ACL", "LIST"});
       EXPECT_THAT(resp.GetVec(),
-                  UnorderedElementsAre("user default on nopass +@ALL",
+                  UnorderedElementsAre("user default on nopass +@ALL +ALL",
                                        absl::StrCat("user kostas off nopass ", "+@NONE")));
 
       resp = Run({"ACL", "DELUSER", "kostas"});
@@ -152,4 +158,31 @@ TEST_F(AclFamilyTest, TestAllCategories) {
   //  EXPECT_THAT(resp.GetVec(), UnorderedElementsAre("user default on nopass +@ALL", "user kostas
   //  off nopass +@NONE"));
 }
+
+TEST_F(AclFamilyTest, TestAllCommands) {
+  TestInitAclFam();
+  const auto& rev_indexer = acl::CommandsRevIndexer();
+  for (const auto& family : rev_indexer) {
+    for (const auto& command_name : family) {
+      auto resp = Run({"ACL", "SETUSER", "kostas", absl::StrCat("+", command_name)});
+      EXPECT_THAT(resp, "OK");
+
+      resp = Run({"ACL", "LIST"});
+      EXPECT_THAT(resp.GetVec(), UnorderedElementsAre("user default on nopass +@ALL +ALL",
+                                                      absl::StrCat("user kostas off nopass +@NONE ",
+                                                                   "+", command_name)));
+
+      resp = Run({"ACL", "SETUSER", "kostas", absl::StrCat("-", command_name)});
+
+      resp = Run({"ACL", "LIST"});
+      EXPECT_THAT(resp.GetVec(),
+                  UnorderedElementsAre("user default on nopass +@ALL +ALL",
+                                       absl::StrCat("user kostas off nopass ", "+@NONE")));
+
+      resp = Run({"ACL", "DELUSER", "kostas"});
+      EXPECT_THAT(resp, "OK");
+    }
+  }
+}
+
 }  // namespace dfly
diff --git a/src/server/acl/user_registry_test.cc b/src/server/acl/user_registry_test.cc
index bbdfcd3fecc1..6c3fb1788f32 100644
--- a/src/server/acl/user_registry_test.cc
+++ b/src/server/acl/user_registry_test.cc
@@ -23,7 +23,7 @@ TEST_F(UserRegistryTest, BasicOp) {
   const std::string username = "kostas";
   const std::string pass = "mypass";
 
-  User::UpdateRequest req{pass, {}, true};
+  User::UpdateRequest req{pass, {}, true, false, {}};
   registry.MaybeAddAndUpdate(username, std::move(req));
   CHECK_EQ(registry.AuthUser(username, pass), true);
   CHECK_EQ(registry.IsUserActive(username), true);
@@ -32,14 +32,14 @@ TEST_F(UserRegistryTest, BasicOp) {
 
   using Sign = User::Sign;
   std::vector<std::pair<Sign, uint32_t>> cat = {{Sign::PLUS, LIST}, {Sign::PLUS, SET}};
-  req = User::UpdateRequest{{}, std::move(cat), {}};
+  req = User::UpdateRequest{{}, std::move(cat), true, false, {}};
   registry.MaybeAddAndUpdate(username, std::move(req));
   auto acl_categories = registry.GetCredentials(username).acl_categories;
   uint32_t expected_result = NONE | LIST | SET;
   CHECK_EQ(acl_categories, expected_result);
 
   cat.push_back({Sign::MINUS, LIST});
-  req = User::UpdateRequest{{}, std::move(cat), {}};
+  req = User::UpdateRequest{{}, std::move(cat), true, false, {}};
   registry.MaybeAddAndUpdate(username, std::move(req));
   acl_categories = registry.GetCredentials(username).acl_categories;
   expected_result = NONE | SET;
diff --git a/src/server/test_utils.cc b/src/server/test_utils.cc
index efa813003a92..24daf6f7e924 100644
--- a/src/server/test_utils.cc
+++ b/src/server/test_utils.cc
@@ -562,4 +562,8 @@ void BaseFamilyTest::SetTestFlag(string_view flag_name, string_view new_value) {
   CHECK(flag->ParseFrom(new_value, &error)) << "Error: " << error;
 }
 
+void BaseFamilyTest::TestInitAclFam() {
+  service_->TestInit();
+}
+
 }  // namespace dfly
diff --git a/src/server/test_utils.h b/src/server/test_utils.h
index 7245b3cc3703..735c28133752 100644
--- a/src/server/test_utils.h
+++ b/src/server/test_utils.h
@@ -127,6 +127,8 @@ class BaseFamilyTest : public ::testing::Test {
 
   static void SetTestFlag(std::string_view flag_name, std::string_view new_value);
 
+  void TestInitAclFam();
+
   std::unique_ptr<util::ProactorPool> pp_;
   std::unique_ptr<Service> service_;
   unsigned num_threads_ = 3;
diff --git a/tests/dragonfly/acl_family_test.py b/tests/dragonfly/acl_family_test.py
index 797de4836220..f237692cad91 100644
--- a/tests/dragonfly/acl_family_test.py
+++ b/tests/dragonfly/acl_family_test.py
@@ -43,6 +43,25 @@ async def test_acl_setuser(async_client):
     result = await async_client.execute_command("ACL LIST")
     assert "user kostas on nopass +@ALL" in result
 
+    # commands
+    await async_client.execute_command("ACL SETUSER kostas +set +get +hset")
+    result = await async_client.execute_command("ACL LIST")
+    assert "user kostas on nopass +@ALL +SET +GET +HSET" in result
+
+    await async_client.execute_command("ACL SETUSER kostas -set -get +hset")
+    result = await async_client.execute_command("ACL LIST")
+    assert "user kostas on nopass +@ALL +HSET" in result
+
+    # interleaved
+    await async_client.execute_command("ACL SETUSER kostas -hset +get -get -@all")
+    result = await async_client.execute_command("ACL LIST")
+    assert "user kostas on nopass +@NONE" in result
+
+    # interleaved with categories
+    await async_client.execute_command("ACL SETUSER kostas +@string +get -get +set")
+    result = await async_client.execute_command("ACL LIST")
+    assert "user kostas on nopass +@STRING +SET" in result
+
 
 @pytest.mark.asyncio
 async def test_acl_categories(async_client):
@@ -94,11 +113,26 @@ async def test_acl_categories(async_client):
 
 
 @pytest.mark.asyncio
-async def test_acl_categories_multi_exec_squash(df_local_factory):
+async def test_acl_commands(async_client):
+    await async_client.execute_command("ACL SETUSER random ON >mypass +@NONE +set +get")
+
+    result = await async_client.execute_command("AUTH random mypass")
+    assert result == "OK"
+
+    result = await async_client.execute_command("SET foo bar")
+    assert result == "OK"
+
+    with pytest.raises(redis.exceptions.ResponseError):
+        await async_client.execute_command("ZADD myset 1 two")
+
+
+@pytest.mark.asyncio
+async def test_acl_cat_commands_multi_exec_squash(df_local_factory):
     df = df_local_factory.create(multi_exec_squash=True, port=1111)
 
     df.start()
 
+    # Testing acl categories
     client = aioredis.Redis(port=df.port)
     res = await client.execute_command("ACL SETUSER kk ON >kk +@transaction +@string")
     assert res == b"OK"
@@ -155,6 +189,34 @@ async def test_acl_categories_multi_exec_squash(df_local_factory):
     await admin_client.close()
     await client.close()
 
+    # Testing acl commands
+    client = aioredis.Redis(port=df.port)
+    res = await client.execute_command("ACL SETUSER myuser ON >kk +@transaction +set")
+    assert res == b"OK"
+
+    res = await client.execute_command("AUTH myuser kk")
+    assert res == b"OK"
+
+    await client.execute_command("MULTI")
+    assert res == b"OK"
+    for x in range(33):
+        await client.execute_command(f"SET x{x} {x}")
+    await client.execute_command("EXEC")
+
+    # NOPERM between multi and exec
+    admin_client = aioredis.Redis(port=df.port)
+    res = await admin_client.execute_command("ACL SETUSER myuser -set")
+    assert res == b"OK"
+
+    # NOPERM while executing multi
+    await client.execute_command("MULTI")
+
+    with pytest.raises(redis.exceptions.ResponseError):
+        await client.execute_command(f"SET x{x} {x}")
+
+    await admin_client.close()
+    await client.close()
+
 
 @pytest.mark.asyncio
 async def test_acl_deluser(df_server):
@@ -264,15 +326,14 @@ async def test_good_acl_file(df_local_factory, tmp_dir):
     df.start()
     client = aioredis.Redis(port=df.port)
 
-    await client.execute_command("ACL SETUSER roy ON >mypass +@STRING")
+    await client.execute_command("ACL SETUSER roy ON >mypass +@STRING +HSET")
     await client.execute_command("ACL SETUSER shahar >mypass +@SET")
     await client.execute_command("ACL SETUSER vlad +@STRING")
 
     result = await client.execute_command("ACL LIST")
-    assert 4 == len(result)
-    assert "user roy on ea71c25a7a60224 +@STRING" in result
+    assert 3 == len(result)
+    assert "user roy on ea71c25a7a60224 +@STRING +HSET" in result
     assert "user shahar off ea71c25a7a60224 +@SET" in result
-    assert "user default on nopass +@ALL" in result
     assert "user vlad off nopass +@STRING" in result
 
     result = await client.execute_command("ACL DELUSER shahar")
@@ -281,12 +342,10 @@ async def test_good_acl_file(df_local_factory, tmp_dir):
     result = await client.execute_command("ACL SAVE")
 
     result = await client.execute_command("ACL LOAD")
-    #    assert result == b"OK"
 
     result = await client.execute_command("ACL LIST")
-    assert 3 == len(result)
-    assert "user roy on ea71c25a7a60224 +@STRING" in result
-    assert "user default on nopass +@ALL" in result
+    assert 2 == len(result)
+    assert "user roy on ea71c25a7a60224 +@STRING +HSET" in result
     assert "user vlad off nopass +@STRING" in result
 
     await client.close()
