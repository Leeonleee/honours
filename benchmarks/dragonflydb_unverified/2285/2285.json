{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 2285,
  "instance_id": "dragonflydb__dragonfly-2285",
  "issue_numbers": [
    "2224"
  ],
  "base_commit": "c183bf69aade4165f1cc6eeae5e0eb6d5b267247",
  "patch": "diff --git a/src/server/db_slice.cc b/src/server/db_slice.cc\nindex 556191e6ee59..7d3fecdd7b2c 100644\n--- a/src/server/db_slice.cc\n+++ b/src/server/db_slice.cc\n@@ -935,7 +935,9 @@ void DbSlice::PreUpdate(DbIndex db_ind, PrimeIterator it) {\n       TieredStorage* tiered = shard_owner()->tiered_storage();\n       auto [offset, size] = it->second.GetExternalSlice();\n       tiered->Free(offset, size);\n+      bool has_expire = it->second.HasExpire();\n       it->second.Reset();\n+      it->second.SetExpire(has_expire);  // we keep expire data\n \n       stats->tiered_entries -= 1;\n       stats->tiered_size -= size;\ndiff --git a/src/server/tiered_storage.cc b/src/server/tiered_storage.cc\nindex 2d01524160f9..1615f6698153 100644\n--- a/src/server/tiered_storage.cc\n+++ b/src/server/tiered_storage.cc\n@@ -277,12 +277,7 @@ unsigned TieredStorage::InflightWriteRequest::ExternalizeEntries(PerDb::BinRecor\n     if (it != bin_record->enqueued_entries.end() && it->second == this) {\n       PrimeIterator pit = pt->Find(pkey);\n       size_t item_offset = page_index_ * 4096 + offset + i * bin_size;\n-\n-      // TODO: the key may be deleted or overriden. The last one is especially dangerous.\n-      // we should update active pending request with any change we make to the entry.\n-      // it should not be a problem since we have HasIoPending tag that mean we must\n-      // update the inflight request (or mark the entry as cancelled).\n-      CHECK(!pit.is_done()) << \"TBD\";\n+      CHECK(!pit.is_done());\n \n       ExternalizeEntry(item_offset, stats, &pit->second);\n       VLOG(2) << \"ExternalizeEntry: \" << it->first;\n@@ -300,9 +295,7 @@ void TieredStorage::InflightWriteRequest::Undo(PerDb::BinRecord* bin_record, DbS\n     if (it != bin_record->enqueued_entries.end() && it->second == this) {\n       PrimeIterator pit = pt->Find(pkey);\n \n-      // TODO: what happens when if the entry was deleted meanwhile\n-      // or it has been serialized again?\n-      CHECK(pit->second.HasIoPending()) << \"TBD: fix inconsistencies\";\n+      CHECK(pit->second.HasIoPending());\n       VLOG(2) << \"Undo key:\" << pkey;\n       pit->second.SetIoPending(false);\n \n",
  "test_patch": "diff --git a/src/server/tiered_storage_test.cc b/src/server/tiered_storage_test.cc\nindex d5b6fa6e80ba..dc229c80bb1a 100644\n--- a/src/server/tiered_storage_test.cc\n+++ b/src/server/tiered_storage_test.cc\n@@ -25,6 +25,7 @@ class TieredStorageTest : public BaseFamilyTest {\n   }\n \n   void FillExternalKeys(unsigned count, int val_size = 256);\n+  void FillKeysWithExpire(unsigned count, int val_size = 256, uint32_t expire = 3);\n \n   static void SetUpTestSuite();\n };\n@@ -62,6 +63,13 @@ void TieredStorageTest::FillExternalKeys(unsigned count, int val_size) {\n   }\n }\n \n+void TieredStorageTest::FillKeysWithExpire(unsigned count, int val_size, uint32_t expire) {\n+  string val(val_size, 'a');\n+  for (unsigned i = 0; i < count; ++i) {\n+    Run({\"set\", StrCat(\"k\", i), val, \"ex\", StrCat(expire)});\n+  }\n+}\n+\n TEST_F(TieredStorageTest, Basic) {\n   FillExternalKeys(5000);\n \n@@ -198,4 +206,50 @@ TEST_F(TieredStorageTest, DelBigValues) {\n   EXPECT_GT(m.db_stats[0].tiered_entries, 0u);\n }\n \n+TEST_F(TieredStorageTest, AddBigValuesWithExpire) {\n+  const int kKeyNum = 10;\n+  for (int i = 0; i < 3; ++i) {\n+    FillKeysWithExpire(kKeyNum, 8000);\n+    usleep(20000);  // 0.02 milliseconds\n+\n+    Metrics m = GetMetrics();\n+    EXPECT_EQ(m.db_stats[0].tiered_entries, 10);\n+  }\n+  for (int i = 0; i < kKeyNum; ++i) {\n+    auto resp = Run({\"ttl\", StrCat(\"k\", i)});\n+    EXPECT_GT(resp.GetInt(), 0);\n+  }\n+}\n+\n+TEST_F(TieredStorageTest, AddSmallValuesWithExpire) {\n+  const int kKeyNum = 100;\n+  for (int i = 0; i < 3; ++i) {\n+    FillKeysWithExpire(kKeyNum);\n+    usleep(20000);  // 0.02 milliseconds\n+\n+    Metrics m = GetMetrics();\n+    EXPECT_GT(m.db_stats[0].tiered_entries, 0);\n+  }\n+  for (int i = 0; i < kKeyNum; ++i) {\n+    auto resp = Run({\"ttl\", StrCat(\"k\", i)});\n+    EXPECT_GT(resp.GetInt(), 0);\n+  }\n+}\n+\n+TEST_F(TieredStorageTest, SetAndExpire) {\n+  string val(5000, 'a');\n+  Run({\"set\", \"key\", val});\n+  usleep(20000);  // 0.02 milliseconds\n+\n+  Metrics m = GetMetrics();\n+  EXPECT_EQ(m.db_stats[0].tiered_entries, 1);\n+  Run({\"expire\", \"key\", \"3\"});\n+\n+  Run({\"set\", \"key\", val});\n+  usleep(20000);  // 0.02 milliseconds\n+\n+  m = GetMetrics();\n+  EXPECT_EQ(m.db_stats[0].tiered_entries, 1);\n+  Run({\"expire\", \"key\", \"3\"});\n+}\n }  // namespace dfly\n",
  "problem_statement": "server with data tiering crash when to insert data with expire\n**Describe the bug**\r\nA clear and concise description of what the bug is.\r\n\r\n**To Reproduce**\r\nRun dragonfly with data tiering enabled\r\n\r\nRun memrier setting keys with expire time\r\nmemtier_benchmark --command \"set __key__ __data__ EX 1\" -t 4 -c 10 -d 82\r\n\r\nThe crash log:\r\nF20231127 14:36:15.970875 50748 db_slice.cc:659] Check failed: db_arr_[db_ind]->expire.Insert(main_it->first.AsRef(), ExpirePeriod(delta)).second \r\n*** Check failure stack trace: ***\r\n    @     0x555559c333e1  google::LogMessage::Fail()\r\n    @     0x555559c333e1  google::LogMessage::Fail()\r\n    @     0x555559c33327  google::LogMessage::SendToLog()\r\n    @     0x555559c33327  google::LogMessage::SendToLog()\r\n    @     0x555559c32afc  google::LogMessage::Flush()\r\n    @     0x555559c36974  google::LogMessageFatal::~LogMessageFatal()\r\n    @     0x555559c32afc  google::LogMessage::Flush()\r\n    @     0x555558fe42fa  dfly::DbSlice::AddExpire()\r\n    @     0x555559c36974  google::LogMessageFatal::~LogMessageFatal()\r\n    @     0x55555893b85a  dfly::SetCmd::SetExisting()\r\n    @     0x555558fe42fa  dfly::DbSlice::AddExpire()\r\n    @     0x55555893b85a  dfly::SetCmd::SetExisting()\r\n    @     0x55555893a507  dfly::SetCmd::Set()\r\n\r\n\n",
  "hints_text": "",
  "created_at": "2023-12-10T21:26:38Z",
  "modified_files": [
    "src/server/db_slice.cc",
    "src/server/tiered_storage.cc"
  ],
  "modified_test_files": [
    "src/server/tiered_storage_test.cc"
  ]
}