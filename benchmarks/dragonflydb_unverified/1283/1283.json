{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 1283,
  "instance_id": "dragonflydb__dragonfly-1283",
  "issue_numbers": [
    "1266"
  ],
  "base_commit": "ad7b4cf36887bed3d7e605cb368e9e3cf1715190",
  "patch": "diff --git a/src/server/main_service.cc b/src/server/main_service.cc\nindex 45e1e58373d5..0b33720bf08d 100644\n--- a/src/server/main_service.cc\n+++ b/src/server/main_service.cc\n@@ -616,13 +616,18 @@ bool Service::CheckKeysOwnership(const CommandId* cid, CmdArgList args,\n       keys_slot = slot;\n     }\n   }\n+\n   if (cross_slot) {\n     (*dfly_cntx)->SendError(\"-CROSSSLOT Keys in request don't hash to the same slot\");\n     return false;\n   }\n+\n   // Check keys slot is in my ownership\n-  if (keys_slot && !cluster_family_.cluster_config()->IsMySlot(*keys_slot)) {\n-    (*dfly_cntx)->SendError(\"MOVED\");  // TODO add more info to moved error.\n+  const auto& cluster_config = cluster_family_.cluster_config();\n+  if (keys_slot.has_value() && !cluster_config->IsMySlot(*keys_slot)) {\n+    // See more details here: https://redis.io/docs/reference/cluster-spec/#moved-redirection\n+    ClusterConfig::Node master = cluster_config->GetMasterNodeForSlot(*keys_slot);\n+    (*dfly_cntx)->SendError(absl::StrCat(\"-MOVED \", *keys_slot, \" \", master.ip, \":\", master.port));\n     return false;\n   }\n \n",
  "test_patch": "diff --git a/src/server/cluster_family_test.cc b/src/server/cluster_family_test.cc\nindex 3bd9000ba8ca..c46fb2606fca 100644\n--- a/src/server/cluster_family_test.cc\n+++ b/src/server/cluster_family_test.cc\n@@ -4,6 +4,7 @@\n \n #include <absl/flags/reflection.h>\n #include <gmock/gmock-matchers.h>\n+#include <gtest/gtest-matchers.h>\n \n #include <string>\n #include <string_view>\n@@ -151,6 +152,10 @@ TEST_F(ClusterFamilyTest, ClusterConfigNoReplicas) {\n   EXPECT_THAT(cluster_info, HasSubstr(\"cluster_slots_ok:16384\"));\n   EXPECT_THAT(cluster_info, HasSubstr(\"cluster_known_nodes:1\"));\n   EXPECT_THAT(cluster_info, HasSubstr(\"cluster_size:1\"));\n+\n+  EXPECT_THAT(Run({\"get\", \"x\"}).GetString(),\n+              testing::MatchesRegex(R\"(MOVED [0-9]+ 10.0.0.1:7000)\"));\n+\n   // TODO: Use \"CLUSTER SLOTS\" and \"CLUSTER SHARDS\" once implemented to verify new configuration\n   // takes effect.\n }\n@@ -243,6 +248,32 @@ TEST_F(ClusterFamilyTest, ClusterConfigFullMultipleInstances) {\n   EXPECT_THAT(cluster_info, HasSubstr(\"cluster_slots_ok:16384\"));\n   EXPECT_THAT(cluster_info, HasSubstr(\"cluster_known_nodes:4\"));\n   EXPECT_THAT(cluster_info, HasSubstr(\"cluster_size:2\"));\n+\n+  absl::InsecureBitGen eng;\n+  while (true) {\n+    string random_key = GetRandomHex(eng, 40);\n+    SlotId slot = ClusterConfig::KeySlot(random_key);\n+    if (slot > 10'000) {\n+      continue;\n+    }\n+\n+    EXPECT_THAT(Run({\"get\", random_key}).GetString(),\n+                testing::MatchesRegex(R\"(MOVED [0-9]+ 10.0.0.1:7000)\"));\n+    break;\n+  }\n+\n+  while (true) {\n+    string random_key = GetRandomHex(eng, 40);\n+    SlotId slot = ClusterConfig::KeySlot(random_key);\n+    if (slot <= 10'000) {\n+      continue;\n+    }\n+\n+    EXPECT_THAT(Run({\"get\", random_key}).GetString(),\n+                testing::MatchesRegex(R\"(MOVED [0-9]+ 10.0.0.2:7001)\"));\n+    break;\n+  }\n+\n   // TODO: Use \"CLUSTER SLOTS\" and \"CLUSTER SHARDS\" once implemented to verify new configuration\n   // takes effect.\n }\n",
  "problem_statement": "Moved error\nAdd host and ip to MOVED error\n",
  "hints_text": "",
  "created_at": "2023-05-23T12:23:14Z",
  "modified_files": [
    "src/server/main_service.cc"
  ],
  "modified_test_files": [
    "src/server/cluster_family_test.cc"
  ]
}