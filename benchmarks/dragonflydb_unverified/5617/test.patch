diff --git a/src/server/engine_shard_set_test.cc b/src/server/engine_shard_set_test.cc
index c6c9fa144664..5d6ea7b49325 100644
--- a/src/server/engine_shard_set_test.cc
+++ b/src/server/engine_shard_set_test.cc
@@ -30,37 +30,11 @@ using testing::Pair;
 
 class RoundRobinSharderTest : public BaseFamilyTest {
  protected:
-  RoundRobinSharderTest() : BaseFamilyTest() {
+  RoundRobinSharderTest() {
     absl::SetFlag(&FLAGS_shard_round_robin_prefix, "RR:");
     SetTestFlag("cluster_mode", "emulated");
     ResetService();
   }
-
-  map<int, int> GetShardKeyCount() {
-    map<int, int> m;
-
-    auto res = Run({"debug", "shards"});
-    for (string_view line : absl::StrSplit(res.GetString(), '
')) {
-      vector<string> parts = absl::StrSplit(line, ": ");
-      if (parts.size() != 2) {
-        continue;
-      }
-
-      string_view k = parts[0];
-      if (!absl::StartsWith(k, "shard") || !absl::EndsWith(k, "_key_count")) {
-        continue;
-      }
-
-      CHECK(absl::ConsumePrefix(&k, "shard")) << k;
-      CHECK(absl::ConsumeSuffix(&k, "_key_count")) << k;
-      int sid;
-      CHECK(absl::SimpleAtoi(k, &sid));
-      int count;
-      CHECK(absl::SimpleAtoi(parts[1], &count));
-      m[sid] = count;
-    }
-    return m;
-  }
 };
 
 TEST_F(RoundRobinSharderTest, RoundRobinShard) {
diff --git a/src/server/set_family_test.cc b/src/server/set_family_test.cc
index d751826e319f..cf1e57f74edd 100644
--- a/src/server/set_family_test.cc
+++ b/src/server/set_family_test.cc
@@ -16,7 +16,7 @@ extern "C" {
 #include "redis/zmalloc.h"
 }
 
-ABSL_DECLARE_FLAG(bool, legacy_saddex_keepttl);
+ABSL_DECLARE_FLAG(std::string, shard_round_robin_prefix);
 
 using namespace testing;
 using namespace std;
@@ -442,4 +442,30 @@ TEST_F(SetFamilyTest, CheckSetLinkExpiryTransfer) {
   EXPECT_THAT(Run("SCARD key"), IntArg(0));
 }
 
+TEST_F(SetFamilyTest, SetInter_5590) {
+  absl::FlagSaver fs;
+  // Default break num_shards=2 and threads=3
+  // TODO(#5651) fix it
+  SetTestFlag("num_shards", "4");
+  num_threads_ = 4;
+  SetTestFlag("shard_round_robin_prefix", "prefix-");
+  ResetService();
+
+  Run("DEBUG POPULATE 1 prefix- 5 RAND ELEMENTS 5000 TYPE SET");
+  Run("SADD prefix-:0 common");
+  // shard 0 has 1 key
+  EXPECT_THAT(GetShardKeyCount(), Contains(Pair(0, 1)));
+
+  Run("SADD prefix-foo bar hello common");
+  // shard 1 has 1 key
+  EXPECT_THAT(GetShardKeyCount(), Contains(Pair(0, 1)));
+  EXPECT_THAT(GetShardKeyCount(), Contains(Pair(1, 1)));
+
+  int64_t start = absl::GetCurrentTimeNanos();
+  Run("SINTER prefix-foo prefix-:0");
+  int64_t end = absl::GetCurrentTimeNanos();
+  // Less than 100 ms. Before the fix it took 3seconds.
+  EXPECT_LE(end - start, 100000000);
+}
+
 }  // namespace dfly
diff --git a/src/server/test_utils.cc b/src/server/test_utils.cc
index 3e0abaf06cfe..4bcef866e3fa 100644
--- a/src/server/test_utils.cc
+++ b/src/server/test_utils.cc
@@ -783,6 +783,32 @@ void BaseFamilyTest::SetTestFlag(string_view flag_name, string_view new_value) {
   CHECK(flag->ParseFrom(new_value, &error)) << "Error: " << error;
 }
 
+std::map<int, int> BaseFamilyTest::GetShardKeyCount() {
+  map<int, int> m;
+
+  auto res = Run({"debug", "shards"});
+  for (string_view line : absl::StrSplit(res.GetString(), '
')) {
+    vector<string> parts = absl::StrSplit(line, ": ");
+    if (parts.size() != 2) {
+      continue;
+    }
+
+    string_view k = parts[0];
+    if (!absl::StartsWith(k, "shard") || !absl::EndsWith(k, "_key_count")) {
+      continue;
+    }
+
+    CHECK(absl::ConsumePrefix(&k, "shard")) << k;
+    CHECK(absl::ConsumeSuffix(&k, "_key_count")) << k;
+    int sid;
+    CHECK(absl::SimpleAtoi(k, &sid));
+    int count;
+    CHECK(absl::SimpleAtoi(parts[1], &count));
+    m[sid] = count;
+  }
+  return m;
+}
+
 const acl::AclFamily* BaseFamilyTest::TestInitAclFam() {
   absl::SetFlag(&FLAGS_acllog_max_len, 0);
   return service_->TestInit();
diff --git a/src/server/test_utils.h b/src/server/test_utils.h
index 01d6fa638f69..d8e17883d411 100644
--- a/src/server/test_utils.h
+++ b/src/server/test_utils.h
@@ -70,7 +70,6 @@ class BaseFamilyTest : public ::testing::Test {
   void SetUp() override;
   void TearDown() override;
 
- protected:
   class TestConnWrapper;
 
   RespExpr Run(std::initializer_list<const std::string_view> list) {
@@ -160,6 +159,8 @@ class BaseFamilyTest : public ::testing::Test {
 
   const acl::AclFamily* TestInitAclFam();
 
+  std::map<int, int> GetShardKeyCount();
+
   std::unique_ptr<util::ProactorPool> pp_;
   std::unique_ptr<Service> service_;
   unsigned num_threads_ = 3;
