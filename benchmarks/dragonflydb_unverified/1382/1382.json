{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 1382,
  "instance_id": "dragonflydb__dragonfly-1382",
  "issue_numbers": [
    "1368"
  ],
  "base_commit": "f97dbad6f988f7932e5dea8632f2cd3a997e4031",
  "patch": "diff --git a/src/server/stream_family.cc b/src/server/stream_family.cc\nindex 101eeb7197ec..713ec9db2e47 100644\n--- a/src/server/stream_family.cc\n+++ b/src/server/stream_family.cc\n@@ -817,6 +817,26 @@ OpStatus OpDestroyGroup(const OpArgs& op_args, string_view key, string_view gnam\n   return OpStatus::SKIPPED;\n }\n \n+// XGROUP CREATECONSUMER key groupname consumername\n+OpResult<uint32_t> OpCreateConsumer(const OpArgs& op_args, string_view key, string_view gname,\n+                                    string_view consumer_name) {\n+  OpResult<pair<stream*, streamCG*>> cgroup_res = FindGroup(op_args, key, gname);\n+  if (!cgroup_res)\n+    return cgroup_res.status();\n+  streamCG* cg = cgroup_res->second;\n+  if (cg == nullptr)\n+    return OpStatus::SKIPPED;\n+\n+  auto* shard = op_args.shard;\n+  shard->tmp_str1 = sdscpylen(shard->tmp_str1, consumer_name.data(), consumer_name.size());\n+  streamConsumer* consumer =\n+      streamCreateConsumer(cg, shard->tmp_str1, NULL, 0, SCC_NO_NOTIFY | SCC_NO_DIRTIFY);\n+\n+  if (consumer)\n+    return OpStatus::OK;\n+  return OpStatus::KEY_EXISTS;\n+}\n+\n // XGROUP DELCONSUMER key groupname consumername\n OpResult<uint32_t> OpDelConsumer(const OpArgs& op_args, string_view key, string_view gname,\n                                  string_view consumer_name) {\n@@ -992,6 +1012,27 @@ void DestroyGroup(string_view key, string_view gname, ConnectionContext* cntx) {\n   }\n }\n \n+void CreateConsumer(string_view key, string_view gname, string_view consumer,\n+                    ConnectionContext* cntx) {\n+  auto cb = [&](Transaction* t, EngineShard* shard) {\n+    return OpCreateConsumer(t->GetOpArgs(shard), key, gname, consumer);\n+  };\n+  OpResult<uint32_t> result = cntx->transaction->ScheduleSingleHopT(std::move(cb));\n+\n+  switch (result.status()) {\n+    case OpStatus::OK:\n+      return (*cntx)->SendLong(1);\n+    case OpStatus::KEY_EXISTS:\n+      return (*cntx)->SendLong(0);\n+    case OpStatus::SKIPPED:\n+      return (*cntx)->SendError(NoGroupError(key, gname));\n+    case OpStatus::KEY_NOTFOUND:\n+      return (*cntx)->SendError(kXGroupKeyNotFound);\n+    default:\n+      (*cntx)->SendError(result.status());\n+  }\n+}\n+\n void DelConsumer(string_view key, string_view gname, string_view consumer,\n                  ConnectionContext* cntx) {\n   auto cb = [&](Transaction* t, EngineShard* shard) {\n@@ -1219,6 +1260,12 @@ void StreamFamily::XGroup(CmdArgList args, ConnectionContext* cntx) {\n       return DestroyGroup(key, gname, cntx);\n     }\n \n+    if (sub_cmd == \"CREATECONSUMER\" && args.size() == 4) {\n+      string_view gname = ArgS(args, 2);\n+      string_view cname = ArgS(args, 3);\n+      return CreateConsumer(key, gname, cname, cntx);\n+    }\n+\n     if (sub_cmd == \"DELCONSUMER\" && args.size() == 4) {\n       string_view gname = ArgS(args, 2);\n       string_view cname = ArgS(args, 3);\n",
  "test_patch": "diff --git a/src/server/stream_family_test.cc b/src/server/stream_family_test.cc\nindex 8704ea747845..325337c79f06 100644\n--- a/src/server/stream_family_test.cc\n+++ b/src/server/stream_family_test.cc\n@@ -236,6 +236,29 @@ TEST_F(StreamFamilyTest, Issue854) {\n   EXPECT_THAT(resp, ErrArg(\"is not allowed\"));\n }\n \n+TEST_F(StreamFamilyTest, XGroupConsumer) {\n+  Run({\"xgroup\", \"create\", \"foo\", \"group\", \"$\", \"MKSTREAM\"});\n+  auto resp = Run({\"xgroup\", \"createconsumer\", \"foo\", \"group\", \"bob\"});\n+  EXPECT_THAT(resp, IntArg(1));\n+  Run({\"xgroup\", \"createconsumer\", \"foo\", \"group\", \"alice\"});\n+  resp = Run({\"xinfo\", \"groups\", \"foo\"});\n+  EXPECT_THAT(resp.GetVec()[3], IntArg(2));\n+  Run({\"xgroup\", \"delconsumer\", \"foo\", \"group\", \"alice\"});\n+  resp = Run({\"xinfo\", \"groups\", \"foo\"});\n+  EXPECT_THAT(resp.GetVec()[3], IntArg(1));\n+\n+  resp = Run({\"xgroup\", \"createconsumer\", \"foo\", \"group\", \"alice\"});\n+  EXPECT_THAT(resp, IntArg(1));\n+\n+  // ensure createconsumer doesn't create consumer that already exists\n+  resp = Run({\"xgroup\", \"createconsumer\", \"foo\", \"group\", \"alice\"});\n+  EXPECT_THAT(resp, IntArg(0));\n+\n+  // nogrouperror\n+  resp = Run({\"xgroup\", \"createconsumer\", \"foo\", \"not-exists\", \"alice\"});\n+  EXPECT_THAT(resp, ErrArg(\"NOGROUP\"));\n+}\n+\n TEST_F(StreamFamilyTest, XTrim) {\n   Run({\"xadd\", \"foo\", \"1-*\", \"k\", \"v\"});\n   Run({\"xadd\", \"foo\", \"1-*\", \"k\", \"v\"});\n",
  "problem_statement": "Implement `XGROUP CREATECONSUMER`\nDragonfly doesn't support `xgroup createconsumer` subcommand. Command Info - https://redis.io/commands/xgroup-createconsumer/\r\n\n",
  "hints_text": "",
  "created_at": "2023-06-10T03:24:20Z",
  "modified_files": [
    "src/server/stream_family.cc"
  ],
  "modified_test_files": [
    "src/server/stream_family_test.cc"
  ]
}