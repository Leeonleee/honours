diff --git a/src/core/json/jsonpath_test.cc b/src/core/json/jsonpath_test.cc
index 61e7fa5687be..268e161d29b1 100644
--- a/src/core/json/jsonpath_test.cc
+++ b/src/core/json/jsonpath_test.cc
@@ -465,7 +465,7 @@ TYPED_TEST(JsonPathTest, Mutate) {
   Path path = this->driver_.TakePath();
 
   TypeParam json = ValidJson<TypeParam>(R"([1, 2, 3, 5, 6])");
-  MutateCallback cb = [&](optional<string_view>, JsonType* val) {
+  auto cb = [](optional<string_view>, JsonType* val) {
     int intval = val->as<int>();
     *val = intval + 1;
     return false;
@@ -496,7 +496,7 @@ TYPED_TEST(JsonPathTest, Mutate) {
   ASSERT_EQ(0, this->Parse("$..a.*"));
   path = this->driver_.TakePath();
 
-  MutateCallback cb2 = [&](optional<string_view> key, JsonType* val) {
+  auto cb2 = [](optional<string_view> key, JsonType* val) {
     if (val->is_int64() && !key) {  // array element
       *val = 42;
       return false;
diff --git a/src/server/dragonfly_test.cc b/src/server/dragonfly_test.cc
index 18230fe62e13..ebbba6df4242 100644
--- a/src/server/dragonfly_test.cc
+++ b/src/server/dragonfly_test.cc
@@ -774,7 +774,7 @@ TEST_F(DflyEngineTest, MemoryUsage) {
   }
 
   for (unsigned i = 0; i < 1000; ++i) {
-    Run({"rpush", "l2", StrCat(string('a', 200), i)});
+    Run({"rpush", "l2", StrCat(string(200, 'a'), i)});
   }
   auto resp = Run({"memory", "usage", "l1"});
   EXPECT_GT(*resp.GetInt(), 8000);
diff --git a/src/server/search/search_family_test.cc b/src/server/search/search_family_test.cc
index 05244a3a3971..9b845c9d17b4 100644
--- a/src/server/search/search_family_test.cc
+++ b/src/server/search/search_family_test.cc
@@ -93,9 +93,7 @@ template <typename... Args> auto IsUnordArray(Args... args) {
 template <typename Expected, size_t... Is>
 void BuildKvMatchers(std::vector<Matcher<std::pair<std::string, RespExpr>>>& kv_matchers,
                      const Expected& expected, std::index_sequence<Is...>) {
-  std::initializer_list<int>{
-      (kv_matchers.emplace_back(Pair(std::get<Is * 2>(expected), std::get<Is * 2 + 1>(expected))),
-       0)...};
+  (kv_matchers.emplace_back(Pair(std::get<Is * 2>(expected), std::get<Is * 2 + 1>(expected))), ...);
 }
 
 MATCHER_P(IsMapMatcher, expected, "") {
