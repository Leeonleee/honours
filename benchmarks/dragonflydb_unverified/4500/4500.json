{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 4500,
  "instance_id": "dragonflydb__dragonfly-4500",
  "issue_numbers": [
    "4466"
  ],
  "base_commit": "69ef9979f050694de2874b4e016ff02552f16abe",
  "patch": "diff --git a/helio b/helio\nindex 05c316e171e3..2ab4412b78af 160000\n--- a/helio\n+++ b/helio\n@@ -1,1 +1,1 @@\n-Subproject commit 05c316e171e31a6f23165b426b7caf0174f90838\n+Subproject commit 2ab4412b78afbf7d3102b472fb0e6f70b194a535\ndiff --git a/src/core/dash.h b/src/core/dash.h\nindex 05a99560f21a..6a63e842a6fa 100644\n--- a/src/core/dash.h\n+++ b/src/core/dash.h\n@@ -947,12 +947,13 @@ auto DashTable<_Key, _Value, Policy>::GetRandomCursor(absl::BitGen* bitgen) -> C\n template <typename _Key, typename _Value, typename Policy>\n template <typename Cb>\n auto DashTable<_Key, _Value, Policy>::Traverse(Cursor curs, Cb&& cb) -> Cursor {\n-  if (curs.bucket_id() >= Policy::kBucketNum)  // sanity.\n-    return 0;\n-\n   uint32_t sid = curs.segment_id(global_depth_);\n   uint8_t bid = curs.bucket_id();\n \n+  // Test validity of the cursor.\n+  if (bid >= Policy::kBucketNum || sid >= segment_.size())\n+    return 0;\n+\n   auto hash_fun = [this](const auto& k) { return policy_.HashFn(k); };\n \n   bool fetched = false;\ndiff --git a/src/server/script_mgr.cc b/src/server/script_mgr.cc\nindex 0053a02f470f..ee29617a7d1c 100644\n--- a/src/server/script_mgr.cc\n+++ b/src/server/script_mgr.cc\n@@ -43,6 +43,7 @@ ABSL_FLAG(\n     std::vector<std::string>({\n         \"351130589c64523cb98978dc32c64173a31244f3\",  // Sidekiq, see #2442\n         \"6ae15ef4678593dc61f991c9953722d67d822776\",  // Sidekiq, see #2442\n+        \"34b1048274c8e50a0cc587a3ed9c383a82bb78c5\"   // Sidekiq\n     }),\n     \"Comma-separated list of Lua script SHAs which are allowed to access undeclared keys. SHAs are \"\n     \"only looked at when loading the script, and new values do not affect already-loaded script.\");\n",
  "test_patch": "diff --git a/src/server/generic_family_test.cc b/src/server/generic_family_test.cc\nindex 68d54ea6f82c..e2c1ed605ed8 100644\n--- a/src/server/generic_family_test.cc\n+++ b/src/server/generic_family_test.cc\n@@ -872,4 +872,9 @@ TEST_F(GenericFamilyTest, RestoreOOM) {\n   EXPECT_THAT(resp, ErrArg(\"Out of memory\"));\n }\n \n+TEST_F(GenericFamilyTest, Bug4466) {\n+  auto resp = Run({\"SCAN\",\"9223372036854775808\"});  // an invalid cursor should not crash us.\n+  EXPECT_THAT(resp, RespElementsAre(\"0\", RespElementsAre()));\n+}\n+\n }  // namespace dfly\n",
  "problem_statement": "Special Redis commands can cause the Dragonfly service to crash\n## Summary\nAuthenticated users can construct specific commands that cause the dragonfly service to crash.\n\n## Details\nDragonfly version: df-v1.26.1\nPayload:\n`SCAN 9223372036854775808 MATCH *11*`\nExecuting the above payload will cause the dragonfly service to crash immediately.\nPoof:\n\n![Image](https://github.com/user-attachments/assets/bce005bf-53fd-47ec-8cdb-8bd7a05eb915)\n\n![Image](https://github.com/user-attachments/assets/57da4c74-3285-4533-942a-9829949c6d27)\n\n## Reporter\nThe problem was reported by ankki-zsyang, Shenzhen Ankki Technologies Co.Ltd.\n",
  "hints_text": "Hi @ankki-zsyang ,\n\nThank you for reporting this! We will take a look :) ",
  "created_at": "2025-01-24T08:58:11Z",
  "modified_files": [
    "helio",
    "src/core/dash.h",
    "src/server/script_mgr.cc"
  ],
  "modified_test_files": [
    "src/server/generic_family_test.cc"
  ]
}