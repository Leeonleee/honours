{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 4420,
  "instance_id": "dragonflydb__dragonfly-4420",
  "issue_numbers": [
    "4382"
  ],
  "base_commit": "ec6ac23ebc53c88ca58a416bffdb5bbb7956bd66",
  "patch": "diff --git a/src/server/zset_family.cc b/src/server/zset_family.cc\nindex 60eda900fee0..bf08072884ab 100644\n--- a/src/server/zset_family.cc\n+++ b/src/server/zset_family.cc\n@@ -67,10 +67,10 @@ struct GeoPoint {\n   double dist;\n   double score;\n   std::string member;\n-  GeoPoint() : longitude(0.0), latitude(0.0), dist(0.0), score(0.0) {};\n+  GeoPoint() : longitude(0.0), latitude(0.0), dist(0.0), score(0.0){};\n   GeoPoint(double _longitude, double _latitude, double _dist, double _score,\n            const std::string& _member)\n-      : longitude(_longitude), latitude(_latitude), dist(_dist), score(_score), member(_member) {};\n+      : longitude(_longitude), latitude(_latitude), dist(_dist), score(_score), member(_member){};\n };\n using GeoArray = std::vector<GeoPoint>;\n \n@@ -86,6 +86,10 @@ struct GeoSearchOpts {\n   bool withhash = 0;\n   GeoStoreType store = GeoStoreType::kNoStore;\n   string_view store_key;\n+\n+  bool HasWithStatement() const {\n+    return withdist || withcoord || withhash;\n+  }\n };\n \n inline zrangespec GetZrangeSpec(bool reverse, const ZSetFamily::ScoreInterval& si) {\n@@ -2135,8 +2139,8 @@ bool ValidateZMPopCommand(CmdArgList args, uint32* num_keys, bool* is_max, int*\n   }\n \n   if (!parser.Finalize()) {\n-      builder->SendError(parser.Error()->MakeReply());\n-      return false;\n+    builder->SendError(parser.Error()->MakeReply());\n+    return false;\n   }\n \n   return true;\n@@ -3079,7 +3083,9 @@ void GeoSearchStoreGeneric(Transaction* tx, SinkReplyBuilder* builder, const Geo\n     rb->StartArray(ga.size());\n     for (const auto& p : ga) {\n       // [member, dist, x, y, hash]\n-      rb->StartArray(record_size);\n+      if (geo_ops.HasWithStatement()) {\n+        rb->StartArray(record_size);\n+      }\n       rb->SendBulkString(p.member);\n       if (geo_ops.withdist) {\n         rb->SendDouble(p.dist / geo_ops.conversion);\n@@ -3137,6 +3143,7 @@ void ZSetFamily::GeoSearch(CmdArgList args, const CommandContext& cmd_cntx) {\n   // BYRADIUS or BYBOX is set\n   bool by_set = false;\n   auto* builder = cmd_cntx.rb;\n+\n   for (size_t i = 1; i < args.size(); ++i) {\n     string cur_arg = absl::AsciiStrToUpper(ArgS(args, i));\n \n@@ -3236,9 +3243,9 @@ void ZSetFamily::GeoSearch(CmdArgList args, const CommandContext& cmd_cntx) {\n       geo_ops.withcoord = true;\n     } else if (cur_arg == \"WITHDIST\") {\n       geo_ops.withdist = true;\n-    } else if (cur_arg == \"WITHHASH\")\n+    } else if (cur_arg == \"WITHHASH\") {\n       geo_ops.withhash = true;\n-    else {\n+    } else {\n       return builder->SendError(kSyntaxErr);\n     }\n   }\n",
  "test_patch": "diff --git a/src/server/zset_family_test.cc b/src/server/zset_family_test.cc\nindex e38a364fbabf..a08b07242787 100644\n--- a/src/server/zset_family_test.cc\n+++ b/src/server/zset_family_test.cc\n@@ -1258,6 +1258,9 @@ TEST_F(ZSetFamilyTest, GeoSearch) {\n                                 RespArray(ElementsAre(DoubleArg(3.7038), DoubleArg(40.4168))))),\n           RespArray(ElementsAre(\"Lisbon\", DoubleArg(502.20769462704084),\n                                 RespArray(ElementsAre(DoubleArg(9.1427), DoubleArg(38.7369))))))));\n+\n+  resp = Run({\"GEOSEARCH\", \"Europe\", \"FROMMEMBER\", \"Madrid\", \"BYRADIUS\", \"700\", \"KM\"});\n+  EXPECT_THAT(resp, RespArray(ElementsAre(\"Madrid\", \"Lisbon\")));\n }\n \n TEST_F(ZSetFamilyTest, GeoRadiusByMember) {\n",
  "problem_statement": "Wrong GEOSEARCH response format\n**Describe the bug**\r\n\r\nBased on the [documentation](https://www.dragonflydb.io/docs/command-reference/geospatial-indices/geosearch):\r\n> Without any WITH option specified, the command just returns a linear array like [\"New York\",\"Milan\",\"Paris\"].\r\nIf WITHCOORD, WITHDIST or WITHHASH options are specified, the command returns an array of arrays, where each sub-array represents a single item.\r\n\r\nHowever, Dragonfly returns an array of arrays in all cases\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n\r\n```\r\n> geoadd list 1 1 A\r\n(integer) 1\r\n\r\n> geosearch list FROMLONLAT 1 1 BYRADIUS 10 km\r\n1) 1) \"A\" <-- NESTED ARRAY RETURNED\r\n```\r\n\r\n**Expected behavior**\r\n\r\nShould match the documentation and Redis behavior:\r\n\r\n```\r\n> geoadd list 1 1 A\r\n(integer) 1\r\n\r\n> geosearch list FROMLONLAT 1 1 BYRADIUS 10 km\r\n1) \"A\"\r\n```\r\n\r\n**Environment (please complete the following information):**\r\n - OS: Ubuntu 24\r\n - Kernel: 5.15.153.1\r\n - Containerized?: Docker\r\n - Dragonfly Version: v1.26.0-c5ef553ffcc9f2f4070af4a3575c2ac0a4ccc035\n",
  "hints_text": "Hi @MartinKolarik, thank you for reporting this issue\nSame issue with `GEORADIUSBYMEMBER` as well",
  "created_at": "2025-01-07T13:32:11Z",
  "modified_files": [
    "src/server/zset_family.cc"
  ],
  "modified_test_files": [
    "src/server/zset_family_test.cc"
  ]
}