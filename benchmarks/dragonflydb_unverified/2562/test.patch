diff --git a/src/server/generic_family_test.cc b/src/server/generic_family_test.cc
index 006df7ecc357..eb241b1e25cb 100644
--- a/src/server/generic_family_test.cc
+++ b/src/server/generic_family_test.cc
@@ -467,7 +467,7 @@ TEST_F(GenericFamilyTest, Sort) {
   ASSERT_THAT(Run({"sort", "list-2"}), ErrArg("One or more scores can't be converted into double"));
 }
 
-TEST_F(GenericFamilyTest, Time) {
+TEST_F(GenericFamilyTest, TimeNoKeys) {
   auto resp = Run({"time"});
   EXPECT_THAT(resp, ArrLen(2));
   EXPECT_THAT(resp.GetVec()[0], ArgType(RespExpr::INT64));
@@ -488,6 +488,33 @@ TEST_F(GenericFamilyTest, Time) {
     int64_t val0 = get<int64_t>(resp.GetVec()[0].GetVec()[i].u);
     int64_t val1 = get<int64_t>(resp.GetVec()[1].GetVec()[i].u);
     EXPECT_EQ(val0, val1);
+    EXPECT_NE(val0, 0);
+  }
+}
+
+TEST_F(GenericFamilyTest, TimeWithKeys) {
+  auto resp = Run({"time"});
+  EXPECT_THAT(resp, ArrLen(2));
+  EXPECT_THAT(resp.GetVec()[0], ArgType(RespExpr::INT64));
+  EXPECT_THAT(resp.GetVec()[1], ArgType(RespExpr::INT64));
+
+  // Check that time is the same inside a transaction.
+  Run({"multi"});
+  Run({"time"});
+  usleep(2000);
+  Run({"time"});
+  Run({"get", "x"});
+  resp = Run({"exec"});
+  EXPECT_THAT(resp, ArrLen(3));
+
+  ASSERT_THAT(resp.GetVec()[0], ArrLen(2));
+  ASSERT_THAT(resp.GetVec()[1], ArrLen(2));
+
+  for (int i = 0; i < 2; ++i) {
+    int64_t val0 = get<int64_t>(resp.GetVec()[0].GetVec()[i].u);
+    int64_t val1 = get<int64_t>(resp.GetVec()[1].GetVec()[i].u);
+    EXPECT_EQ(val0, val1);
+    EXPECT_NE(val0, 0);
   }
 }
 
