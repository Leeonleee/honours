diff --git a/src/server/multi_test.cc b/src/server/multi_test.cc
index d61fc003da0e..9e8a5b81c205 100644
--- a/src/server/multi_test.cc
+++ b/src/server/multi_test.cc
@@ -998,6 +998,13 @@ TEST_F(MultiTest, NoKeyTransactional) {
   Run({"exec"});
 }
 
+TEST_F(MultiTest, NoKeyTransactionalMany) {
+  vector<vector<string>> cmds;
+  cmds.push_back({"rename", "x", "z"});
+  cmds.push_back({"ft._list"});
+  RunMany(cmds);
+}
+
 class MultiEvalTest : public BaseFamilyTest {
  protected:
   MultiEvalTest() : BaseFamilyTest() {
diff --git a/src/server/test_utils.cc b/src/server/test_utils.cc
index 8fe514591e87..af3cd50bfa7a 100644
--- a/src/server/test_utils.cc
+++ b/src/server/test_utils.cc
@@ -467,6 +467,25 @@ RespExpr BaseFamilyTest::Run(std::string_view id, ArgSlice slice) {
   return e;
 }
 
+void BaseFamilyTest::RunMany(const std::vector<std::vector<std::string>>& cmds) {
+  if (!ProactorBase::IsProactorThread()) {
+    return pp_->at(0)->Await([&] { return this->RunMany(cmds); });
+  }
+  TestConnWrapper* conn_wrapper = AddFindConn(Protocol::REDIS, GetId());
+  auto* context = conn_wrapper->cmd_cntx();
+  context->ns = &namespaces->GetDefaultNamespace();
+  vector<ArgSlice> args_vec(cmds.size());
+  vector<vector<string_view>> cmd_views(cmds.size());
+  for (size_t i = 0; i < cmds.size(); ++i) {
+    for (const auto& arg : cmds[i]) {
+      cmd_views[i].emplace_back(arg);
+    }
+    args_vec[i] = absl::MakeSpan(cmd_views[i]);
+  }
+  service_->DispatchManyCommands(absl::MakeSpan(args_vec), conn_wrapper->builder(), context);
+  DCHECK(context->transaction == nullptr);
+}
+
 auto BaseFamilyTest::RunMC(MP::CmdType cmd_type, string_view key, string_view value, uint32_t flags,
                            chrono::seconds ttl) -> MCResponse {
   if (!ProactorBase::IsProactorThread()) {
diff --git a/src/server/test_utils.h b/src/server/test_utils.h
index b15ff146038c..a14b3f8c8dff 100644
--- a/src/server/test_utils.h
+++ b/src/server/test_utils.h
@@ -85,6 +85,7 @@ class BaseFamilyTest : public ::testing::Test {
   RespExpr Run(absl::Span<std::string> list);
 
   RespExpr Run(std::string_view id, ArgSlice list);
+  void RunMany(const std::vector<std::vector<std::string>>& cmds);
 
   using MCResponse = std::vector<std::string>;
   MCResponse RunMC(MemcacheParser::CmdType cmd_type, std::string_view key, std::string_view value,
