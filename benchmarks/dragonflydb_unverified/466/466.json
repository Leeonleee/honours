{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 466,
  "instance_id": "dragonflydb__dragonfly-466",
  "issue_numbers": [
    "426"
  ],
  "base_commit": "a314b1b50a38b5b517113d7d7877a6aea732b811",
  "patch": "diff --git a/src/server/common.cc b/src/server/common.cc\nindex 42e28f7cab0e..f1f84a4ad727 100644\n--- a/src/server/common.cc\n+++ b/src/server/common.cc\n@@ -12,6 +12,7 @@\n extern \"C\" {\n #include \"redis/object.h\"\n #include \"redis/rdb.h\"\n+#include \"redis/util.h\"\n #include \"redis/zmalloc.h\"\n }\n \n@@ -193,4 +194,46 @@ TieredStats& TieredStats::operator+=(const TieredStats& o) {\n   return *this;\n }\n \n+OpResult<ScanOpts> ScanOpts::TryFrom(CmdArgList args) {\n+  ScanOpts scan_opts;\n+\n+  for (unsigned i = 0; i < args.size(); i += 2) {\n+    ToUpper(&args[i]);\n+    string_view opt = ArgS(args, i);\n+    if (i + 1 == args.size()) {\n+      return facade::OpStatus::SYNTAX_ERR;\n+    }\n+\n+    if (opt == \"COUNT\") {\n+      if (!absl::SimpleAtoi(ArgS(args, i + 1), &scan_opts.limit)) {\n+        return facade::OpStatus::INVALID_INT;\n+      }\n+      if (scan_opts.limit == 0)\n+        scan_opts.limit = 1;\n+      else if (scan_opts.limit > 4096)\n+        scan_opts.limit = 4096;\n+    } else if (opt == \"MATCH\") {\n+      scan_opts.pattern = ArgS(args, i + 1);\n+      if (scan_opts.pattern == \"*\")\n+        scan_opts.pattern = string_view{};\n+    } else if (opt == \"TYPE\") {\n+      ToLower(&args[i + 1]);\n+      scan_opts.type_filter = ArgS(args, i + 1);\n+    } else if (opt == \"BUCKET\") {\n+      if (!absl::SimpleAtoi(ArgS(args, i + 1), &scan_opts.bucket_id)) {\n+        return facade::OpStatus::INVALID_INT;\n+      }\n+    } else {\n+      return facade::OpStatus::SYNTAX_ERR;\n+    }\n+  }\n+  return scan_opts;\n+}\n+\n+bool ScanOpts::Matches(std::string_view val_name) const {\n+  if (pattern.empty())\n+    return true;\n+  return stringmatchlen(pattern.data(), pattern.size(), val_name.data(), val_name.size(), 0) == 1;\n+}\n+\n }  // namespace dfly\ndiff --git a/src/server/common.h b/src/server/common.h\nindex 1ed2def0bbbc..e8447ca5394b 100644\n--- a/src/server/common.h\n+++ b/src/server/common.h\n@@ -4,11 +4,11 @@\n \n #pragma once\n \n-#include <boost/fiber/mutex.hpp>\n #include <absl/strings/ascii.h>\n #include <absl/strings/str_cat.h>\n #include <absl/types/span.h>\n \n+#include <boost/fiber/mutex.hpp>\n #include <string_view>\n #include <vector>\n \n@@ -32,6 +32,7 @@ using facade::ArgS;\n using facade::CmdArgList;\n using facade::CmdArgVec;\n using facade::MutableSlice;\n+using facade::OpResult;\n \n using ArgSlice = absl::Span<const std::string_view>;\n using StringVec = std::vector<std::string>;\n@@ -196,4 +197,14 @@ using AggregateStatus = AggregateValue<facade::OpStatus>;\n static_assert(facade::OpStatus::OK == facade::OpStatus{},\n               \"Default intitialization should be OK value\");\n \n+struct ScanOpts {\n+  std::string_view pattern;\n+  size_t limit = 10;\n+  std::string_view type_filter;\n+  unsigned bucket_id = UINT_MAX;\n+\n+  bool Matches(std::string_view val_name) const;\n+  static OpResult<ScanOpts> TryFrom(CmdArgList args);\n+};\n+\n }  // namespace dfly\ndiff --git a/src/server/generic_family.cc b/src/server/generic_family.cc\nindex d7af80fa9661..503973e3b344 100644\n--- a/src/server/generic_family.cc\n+++ b/src/server/generic_family.cc\n@@ -406,14 +406,6 @@ OpStatus Renamer::UpdateDest(Transaction* t, EngineShard* es) {\n   return OpStatus::OK;\n }\n \n-struct ScanOpts {\n-  string_view pattern;\n-  string_view type_filter;\n-  size_t limit = 10;\n-\n-  unsigned bucket_id = UINT_MAX;\n-};\n-\n OpStatus OpPersist(const OpArgs& op_args, string_view key) {\n   auto& db_slice = op_args.shard->db_slice();\n   auto [it, expire_it] = db_slice.FindExt(op_args.db_cntx, key);\n@@ -514,15 +506,11 @@ bool ScanCb(const OpArgs& op_args, PrimeIterator it, const ScanOpts& opts, Strin\n     return false;\n   }\n \n-  if (opts.pattern.empty()) {\n-    res->push_back(it->first.ToString());\n-  } else {\n-    string str = it->first.ToString();\n-    if (stringmatchlen(opts.pattern.data(), opts.pattern.size(), str.data(), str.size(), 0) != 1)\n-      return false;\n-\n-    res->push_back(std::move(str));\n+  string str = it->first.ToString();\n+  if (!opts.Matches(str)) {\n+    return false;\n   }\n+  res->push_back(std::move(str));\n \n   return true;\n }\n@@ -1196,42 +1184,16 @@ void GenericFamily::Scan(CmdArgList args, ConnectionContext* cntx) {\n     return (*cntx)->SendError(\"invalid cursor\");\n   }\n \n-  ScanOpts scan_opts;\n-\n-  for (unsigned i = 2; i < args.size(); i += 2) {\n-    if (i + 1 == args.size()) {\n-      return (*cntx)->SendError(kSyntaxErr);\n-    }\n-\n-    ToUpper(&args[i]);\n-\n-    string_view opt = ArgS(args, i);\n-    if (opt == \"COUNT\") {\n-      if (!absl::SimpleAtoi(ArgS(args, i + 1), &scan_opts.limit)) {\n-        return (*cntx)->SendError(kInvalidIntErr);\n-      }\n-      if (scan_opts.limit == 0)\n-        scan_opts.limit = 1;\n-      else if (scan_opts.limit > 4096)\n-        scan_opts.limit = 4096;\n-    } else if (opt == \"MATCH\") {\n-      scan_opts.pattern = ArgS(args, i + 1);\n-      if (scan_opts.pattern == \"*\")\n-        scan_opts.pattern = string_view{};\n-    } else if (opt == \"TYPE\") {\n-      ToLower(&args[i + 1]);\n-      scan_opts.type_filter = ArgS(args, i + 1);\n-    } else if (opt == \"BUCKET\") {\n-      if (!absl::SimpleAtoi(ArgS(args, i + 1), &scan_opts.bucket_id)) {\n-        return (*cntx)->SendError(kInvalidIntErr);\n-      }\n-    } else {\n-      return (*cntx)->SendError(kSyntaxErr);\n-    }\n+  OpResult<ScanOpts> ops = ScanOpts::TryFrom(args.subspan(2));\n+  if (!ops) {\n+    DVLOG(1) << \"Scan invalid args - return \" << ops << \" to the user\";\n+    return (*cntx)->SendError(ops.status());\n   }\n \n+  ScanOpts scan_op = ops.value();\n+\n   StringVec keys;\n-  cursor = ScanGeneric(cursor, scan_opts, &keys, cntx);\n+  cursor = ScanGeneric(cursor, scan_op, &keys, cntx);\n \n   (*cntx)->StartArray(2);\n   (*cntx)->SendSimpleString(absl::StrCat(cursor));\ndiff --git a/src/server/hset_family.cc b/src/server/hset_family.cc\nindex 99fa9ca73314..b163230fae08 100644\n--- a/src/server/hset_family.cc\n+++ b/src/server/hset_family.cc\n@@ -26,48 +26,6 @@ using namespace facade;\n \n namespace {\n \n-struct ScanOpts {\n-  string_view pattern;\n-  size_t limit = 10;\n-\n-  constexpr bool Matches(std::string_view val_name) const {\n-    if (pattern.empty())\n-      return true;\n-    return stringmatchlen(pattern.data(), pattern.size(), val_name.data(), val_name.size(), 0) == 1;\n-  }\n-\n-  static OpResult<ScanOpts> TryFrom(CmdArgList args);\n-};\n-\n-OpResult<ScanOpts> ScanOpts::TryFrom(CmdArgList args) {\n-  ScanOpts scan_opts;\n-\n-  for (unsigned i = 3; i < args.size(); i += 2) {\n-    ToUpper(&args[i]);\n-    string_view opt = ArgS(args, i);\n-    if (i + 1 == args.size()) {\n-      return OpStatus::SYNTAX_ERR;\n-    }\n-\n-    if (opt == \"COUNT\") {\n-      if (!absl::SimpleAtoi(ArgS(args, i + 1), &scan_opts.limit)) {\n-        return OpStatus::INVALID_INT;\n-      }\n-      if (scan_opts.limit == 0)\n-        scan_opts.limit = 1;\n-      else if (scan_opts.limit > 4096)\n-        scan_opts.limit = 4096;\n-    } else if (opt == \"MATCH\") {\n-      scan_opts.pattern = ArgS(args, i + 1);\n-      if (scan_opts.pattern == \"*\")\n-        scan_opts.pattern = string_view{};\n-    } else {\n-      return OpStatus::SYNTAX_ERR;\n-    }\n-  }\n-  return scan_opts;\n-}\n-\n constexpr size_t kMaxListPackLen = 1024;\n using IncrByParam = std::variant<double, int64_t>;\n using OptStr = std::optional<std::string>;\n@@ -881,7 +839,7 @@ void HSetFamily::HScan(CmdArgList args, ConnectionContext* cntx) {\n     return (*cntx)->SendError(kSyntaxErr);\n   }\n \n-  OpResult<ScanOpts> ops = ScanOpts::TryFrom(args);\n+  OpResult<ScanOpts> ops = ScanOpts::TryFrom(args.subspan(3));\n   if (!ops) {\n     DVLOG(1) << \"HScan invalid args - return \" << ops << \" to the user\";\n     return (*cntx)->SendError(ops.status());\ndiff --git a/src/server/set_family.cc b/src/server/set_family.cc\nindex 29e48f293f92..fe03a8089b83 100644\n--- a/src/server/set_family.cc\n+++ b/src/server/set_family.cc\n@@ -209,14 +209,9 @@ void InitSet(ArgSlice vals, CompactObj* set) {\n   }\n }\n \n-void ScanCallback(void* privdata, const dictEntry* de) {\n-  StringVec* sv = (StringVec*)privdata;\n-  sds key = (sds)de->key;\n-  sv->push_back(string(key, sdslen(key)));\n-}\n-\n uint64_t ScanStrSet(const DbContext& db_context, const CompactObj& co, uint64_t curs,\n-                    unsigned count, StringVec* res) {\n+                    const ScanOpts& scan_op, StringVec* res) {\n+  uint32_t count = scan_op.limit;\n   long maxiterations = count * 10;\n \n   if (IsDenseEncoding(co)) {\n@@ -224,13 +219,36 @@ uint64_t ScanStrSet(const DbContext& db_context, const CompactObj& co, uint64_t\n     set->set_time(TimeNowSecRel(db_context.time_now_ms));\n \n     do {\n-      curs = set->Scan(curs, [&](const sds ptr) { res->push_back(std::string(ptr, sdslen(ptr))); });\n+      auto scan_callback = [&](const sds ptr) {\n+        string_view str{ptr, sdslen(ptr)};\n+        if (scan_op.Matches(str)) {\n+          res->push_back(std::string(str));\n+        }\n+      };\n+\n+      curs = set->Scan(curs, scan_callback);\n+\n     } while (curs && maxiterations-- && res->size() < count);\n   } else {\n     DCHECK_EQ(co.Encoding(), kEncodingStrMap);\n+    using PrivateDataRef = std::tuple<StringVec*, const ScanOpts&>;\n+    PrivateDataRef private_data_ref(res, scan_op);\n+    void* private_data = &private_data_ref;\n     dict* ds = (dict*)co.RObjPtr();\n+\n+    auto scan_callback = [](void* private_data, const dictEntry* de) {\n+      StringVec* sv = std::get<0>(*(PrivateDataRef*)private_data);\n+      const ScanOpts& scan_op = std::get<1>(*(PrivateDataRef*)private_data);\n+\n+      sds key = (sds)de->key;\n+      auto len = sdslen(key);\n+      if (scan_op.Matches(std::string_view(key, len))) {\n+        sv->emplace_back(key, len);\n+      }\n+    };\n+\n     do {\n-      curs = dictScan(ds, curs, ScanCallback, NULL, res);\n+      curs = dictScan(ds, curs, scan_callback, NULL, private_data);\n     } while (curs && maxiterations-- && res->size() < count);\n   }\n \n@@ -290,9 +308,8 @@ bool IsInSet(const DbContext& db_context, const SetType& st, string_view member)\n   }\n }\n \n-void FindInSet(StringVec& memberships,\n-\t\tconst DbContext& db_context, const SetType& st,\n-\t\tconst vector<string_view>& members) {\n+void FindInSet(StringVec& memberships, const DbContext& db_context, const SetType& st,\n+               const vector<string_view>& members) {\n   for (const auto& member : members) {\n     bool status = IsInSet(db_context, st, member);\n     memberships.emplace_back(to_string(status));\n@@ -967,7 +984,8 @@ OpResult<StringVec> OpPop(const OpArgs& op_args, string_view key, unsigned count\n   return result;\n }\n \n-OpResult<StringVec> OpScan(const OpArgs& op_args, string_view key, uint64_t* cursor) {\n+OpResult<StringVec> OpScan(const OpArgs& op_args, string_view key, uint64_t* cursor,\n+                           const ScanOpts& scan_op) {\n   OpResult<PrimeIterator> find_res = op_args.shard->db_slice().Find(op_args.db_cntx, key, OBJ_SET);\n \n   if (!find_res)\n@@ -975,18 +993,20 @@ OpResult<StringVec> OpScan(const OpArgs& op_args, string_view key, uint64_t* cur\n \n   PrimeIterator it = find_res.value();\n   StringVec res;\n-  uint32_t count = 10;\n \n   if (it->second.Encoding() == kEncodingIntSet) {\n     intset* is = (intset*)it->second.RObjPtr();\n     int64_t intele;\n     uint32_t pos = 0;\n     while (intsetGet(is, pos++, &intele)) {\n-      res.push_back(absl::StrCat(intele));\n+      std::string int_str = absl::StrCat(intele);\n+      if (scan_op.Matches(int_str)) {\n+        res.push_back(int_str);\n+      }\n     }\n     *cursor = 0;\n   } else {\n-    *cursor = ScanStrSet(op_args.db_cntx, it->second, *cursor, count, &res);\n+    *cursor = ScanStrSet(op_args.db_cntx, it->second, *cursor, scan_op, &res);\n   }\n \n   return res;\n@@ -1404,12 +1424,22 @@ void SScan(CmdArgList args, ConnectionContext* cntx) {\n     return (*cntx)->SendError(\"invalid cursor\");\n   }\n \n-  if (args.size() > 3) {\n-    return (*cntx)->SendError(\"scan options are not supported yet\");\n+  // SSCAN key cursor [MATCH pattern] [COUNT count]\n+  if (args.size() > 7) {\n+    DVLOG(1) << \"got \" << args.size() << \" this is more than it should be\";\n+    return (*cntx)->SendError(kSyntaxErr);\n   }\n \n+  OpResult<ScanOpts> ops = ScanOpts::TryFrom(args.subspan(3));\n+  if (!ops) {\n+    DVLOG(1) << \"SScan invalid args - return \" << ops << \" to the user\";\n+    return (*cntx)->SendError(ops.status());\n+  }\n+\n+  ScanOpts scan_op = ops.value();\n+\n   auto cb = [&](Transaction* t, EngineShard* shard) {\n-    return OpScan(t->GetOpArgs(shard), key, &cursor);\n+    return OpScan(t->GetOpArgs(shard), key, &cursor, scan_op);\n   };\n \n   OpResult<StringVec> result = cntx->transaction->ScheduleSingleHopT(std::move(cb));\n",
  "test_patch": "diff --git a/src/server/set_family_test.cc b/src/server/set_family_test.cc\nindex dcbcc3bd46e3..e63b318dc1fe 100644\n--- a/src/server/set_family_test.cc\n+++ b/src/server/set_family_test.cc\n@@ -138,26 +138,26 @@ TEST_F(SetFamilyTest, SMIsMember) {\n \n   auto resp = Run({\"smismember\", \"foo\"});\n   EXPECT_THAT(resp, ErrArg(\"wrong number of arguments\"));\n-  \n+\n   resp = Run({\"smismember\", \"foo1\", \"a\", \"b\"});\n   ASSERT_THAT(resp, ArgType(RespExpr::ARRAY));\n   EXPECT_THAT(resp.GetVec(), ElementsAre(\"0\", \"0\"));\n-  \n+\n   resp = Run({\"smismember\", \"foo\", \"a\", \"c\"});\n   ASSERT_THAT(resp, ArgType(RespExpr::ARRAY));\n   EXPECT_THAT(resp.GetVec(), ElementsAre(\"1\", \"0\"));\n-  \n+\n   resp = Run({\"smismember\", \"foo\", \"a\", \"b\"});\n   ASSERT_THAT(resp, ArgType(RespExpr::ARRAY));\n   EXPECT_THAT(resp.GetVec(), ElementsAre(\"1\", \"1\"));\n-  \n+\n   resp = Run({\"smismember\", \"foo\", \"d\", \"e\"});\n   ASSERT_THAT(resp, ArgType(RespExpr::ARRAY));\n   EXPECT_THAT(resp.GetVec(), ElementsAre(\"0\", \"0\"));\n-  \n+\n   resp = Run({\"smismember\", \"foo\", \"b\"});\n   EXPECT_THAT(resp, \"1\");\n-  \n+\n   resp = Run({\"smismember\", \"foo\", \"x\"});\n   EXPECT_THAT(resp, \"0\");\n }\n@@ -167,4 +167,39 @@ TEST_F(SetFamilyTest, Empty) {\n   ASSERT_THAT(resp, ArrLen(0));\n }\n \n+TEST_F(SetFamilyTest, SScan) {\n+  // Test for int set\n+  for (int i = 0; i < 15; i++) {\n+    Run({\"sadd\", \"myintset\", absl::StrCat(i)});\n+  }\n+\n+  // Note that even though this limit by 4, it would return more because\n+  // all fields are on intlist\n+  auto resp = Run({\"sscan\", \"myintset\", \"0\", \"count\", \"4\"});\n+  auto vec = StrArray(resp.GetVec()[1]);\n+  EXPECT_THAT(vec.size(), 15);\n+\n+  resp = Run({\"sscan\", \"myintset\", \"0\", \"match\", \"1*\"});\n+  vec = StrArray(resp.GetVec()[1]);\n+  EXPECT_THAT(vec, UnorderedElementsAre(\"1\", \"10\", \"11\", \"12\", \"13\", \"14\"));\n+\n+  // test string set\n+  for (int i = 0; i < 15; i++) {\n+    Run({\"sadd\", \"mystrset\", absl::StrCat(\"str-\", i)});\n+  }\n+\n+  resp = Run({\"sscan\", \"mystrset\", \"0\", \"count\", \"5\"});\n+  vec = StrArray(resp.GetVec()[1]);\n+  EXPECT_THAT(vec.size(), 5);\n+\n+  resp = Run({\"sscan\", \"mystrset\", \"0\", \"match\", \"str-1*\", \"count\", \"3\"});\n+  vec = StrArray(resp.GetVec()[1]);\n+  EXPECT_THAT(vec, IsSubsetOf({\"str-1\", \"str-10\", \"str-11\", \"str-12\", \"str-13\", \"str-14\"}));\n+\n+  // nothing should match this\n+  resp = Run({\"sscan\", \"mystrset\", \"0\", \"match\", \"1*\"});\n+  vec = StrArray(resp.GetVec()[1]);\n+  EXPECT_THAT(vec.size(), 0);\n+}\n+\n }  // namespace dfly\n",
  "problem_statement": "sscan does not support all the options\n**Describe the bug**\r\nsscan does not support \"count\" and \"match\" options\r\n\r\n**To Reproduce**\r\n```\r\nsadd foo bar\r\nsscan foo 0 count 1\r\n```\r\n\r\n**Environment (please complete the following information):**\r\n - Dragonfly Version: 0.10.0\r\n\n",
  "hints_text": "",
  "created_at": "2022-11-08T10:40:02Z",
  "modified_files": [
    "src/server/common.cc",
    "src/server/common.h",
    "src/server/generic_family.cc",
    "src/server/hset_family.cc",
    "src/server/set_family.cc"
  ],
  "modified_test_files": [
    "src/server/set_family_test.cc"
  ]
}