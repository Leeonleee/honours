diff --git a/src/facade/facade_test.h b/src/facade/facade_test.h
index 0f910468a973..c5a94a6b5209 100644
--- a/src/facade/facade_test.h
+++ b/src/facade/facade_test.h
@@ -73,6 +73,12 @@ inline ::testing::PolymorphicMatcher<RespTypeMatcher> ArgType(RespExpr::Type t)
   return ::testing::MakePolymorphicMatcher(RespTypeMatcher(t));
 }
 
+MATCHER_P(RespArray, value, "") {
+  return ExplainMatchResult(testing::AllOf(testing::Field(&RespExpr::type, RespExpr::ARRAY),
+                                           testing::Property(&RespExpr::GetVec, value)),
+                            arg, result_listener);
+}
+
 inline bool operator==(const RespExpr& left, std::string_view s) {
   return left.type == RespExpr::STRING && ToSV(left.GetBuf()) == s;
 }
diff --git a/src/server/cluster_family_test.cc b/src/server/cluster_family_test.cc
index 73190d90507f..c154de571167 100644
--- a/src/server/cluster_family_test.cc
+++ b/src/server/cluster_family_test.cc
@@ -24,10 +24,7 @@ using namespace testing;
 class ClusterFamilyTest : public BaseFamilyTest {
  public:
   ClusterFamilyTest() {
-    auto* flag = absl::FindCommandLineFlag("cluster_mode");
-    CHECK_NE(flag, nullptr);
-    string error;
-    CHECK(flag->ParseFrom("yes", &error));
+    SetTestFlag("cluster_mode", "yes");
   }
 
  protected:
@@ -67,6 +64,8 @@ TEST_F(ClusterFamilyTest, ClusterConfigInvalidJSON) {
   EXPECT_THAT(cluster_info, HasSubstr("cluster_slots_ok:0"));
   EXPECT_THAT(cluster_info, HasSubstr("cluster_known_nodes:0"));
   EXPECT_THAT(cluster_info, HasSubstr("cluster_size:0"));
+
+  EXPECT_THAT(Run({"cluster", "shards"}), ErrArg("Cluster is not yet configured"));
 }
 
 TEST_F(ClusterFamilyTest, ClusterConfigInvalidConfig) {
@@ -177,6 +176,20 @@ TEST_F(ClusterFamilyTest, ClusterConfigNoReplicas) {
   EXPECT_THAT(cluster_info, HasSubstr("cluster_known_nodes:1"));
   EXPECT_THAT(cluster_info, HasSubstr("cluster_size:1"));
 
+  EXPECT_THAT(Run({"cluster", "shards"}),
+              RespArray(ElementsAre("slots",                                            //
+                                    RespArray(ElementsAre(IntArg(0), IntArg(16'383))),  //
+                                    "nodes",                                            //
+                                    RespArray(ElementsAre(                              //
+                                        RespArray(ElementsAre(                          //
+                                            "id", "abcd1234",                           //
+                                            "endpoint", "10.0.0.1",                     //
+                                            "ip", "10.0.0.1",                           //
+                                            "port", IntArg(7000),                       //
+                                            "role", "master",                           //
+                                            "replication-offset", IntArg(0),            //
+                                            "health", "online")))))));
+
   EXPECT_THAT(Run({"get", "x"}).GetString(),
               testing::MatchesRegex(R"(MOVED [0-9]+ 10.0.0.1:7000)"));
 
@@ -216,6 +229,29 @@ TEST_F(ClusterFamilyTest, ClusterConfigFull) {
   EXPECT_THAT(cluster_info, HasSubstr("cluster_slots_ok:16384"));
   EXPECT_THAT(cluster_info, HasSubstr("cluster_known_nodes:2"));
   EXPECT_THAT(cluster_info, HasSubstr("cluster_size:1"));
+
+  EXPECT_THAT(Run({"cluster", "shards"}),
+              RespArray(ElementsAre("slots",                                            //
+                                    RespArray(ElementsAre(IntArg(0), IntArg(16'383))),  //
+                                    "nodes",                                            //
+                                    RespArray(ElementsAre(                              //
+                                        RespArray(ElementsAre(                          //
+                                            "id", "abcd1234",                           //
+                                            "endpoint", "10.0.0.1",                     //
+                                            "ip", "10.0.0.1",                           //
+                                            "port", IntArg(7000),                       //
+                                            "role", "master",                           //
+                                            "replication-offset", IntArg(0),            //
+                                            "health", "online")),                       //
+                                        RespArray(ElementsAre(                          //
+                                            "id", "wxyz",                               //
+                                            "endpoint", "10.0.0.10",                    //
+                                            "ip", "10.0.0.10",                          //
+                                            "port", IntArg(8000),                       //
+                                            "role", "replica",                          //
+                                            "replication-offset", IntArg(0),            //
+                                            "health", "online")))))));
+
   // TODO: Use "CLUSTER SLOTS" and "CLUSTER SHARDS" once implemented to verify new configuration
   // takes effect.
 }
@@ -273,6 +309,49 @@ TEST_F(ClusterFamilyTest, ClusterConfigFullMultipleInstances) {
   EXPECT_THAT(cluster_info, HasSubstr("cluster_known_nodes:4"));
   EXPECT_THAT(cluster_info, HasSubstr("cluster_size:2"));
 
+  EXPECT_THAT(Run({"cluster", "shards"}),
+              RespArray(ElementsAre(
+                  RespArray(ElementsAre("slots",                                                 //
+                                        RespArray(ElementsAre(IntArg(0), IntArg(10'000))),       //
+                                        "nodes",                                                 //
+                                        RespArray(ElementsAre(                                   //
+                                            RespArray(ElementsAre(                               //
+                                                "id", "abcd1234",                                //
+                                                "endpoint", "10.0.0.1",                          //
+                                                "ip", "10.0.0.1",                                //
+                                                "port", IntArg(7000),                            //
+                                                "role", "master",                                //
+                                                "replication-offset", IntArg(0),                 //
+                                                "health", "online")),                            //
+                                            RespArray(ElementsAre(                               //
+                                                "id", "wxyz",                                    //
+                                                "endpoint", "10.0.0.10",                         //
+                                                "ip", "10.0.0.10",                               //
+                                                "port", IntArg(8000),                            //
+                                                "role", "replica",                               //
+                                                "replication-offset", IntArg(0),                 //
+                                                "health", "online")))))),                        //
+                  RespArray(ElementsAre("slots",                                                 //
+                                        RespArray(ElementsAre(IntArg(10'001), IntArg(16'383))),  //
+                                        "nodes",                                                 //
+                                        RespArray(ElementsAre(                                   //
+                                            RespArray(ElementsAre(                               //
+                                                "id", "efgh7890",                                //
+                                                "endpoint", "10.0.0.2",                          //
+                                                "ip", "10.0.0.2",                                //
+                                                "port", IntArg(7001),                            //
+                                                "role", "master",                                //
+                                                "replication-offset", IntArg(0),                 //
+                                                "health", "online")),                            //
+                                            RespArray(ElementsAre(                               //
+                                                "id", "qwerty",                                  //
+                                                "endpoint", "10.0.0.11",                         //
+                                                "ip", "10.0.0.11",                               //
+                                                "port", IntArg(8001),                            //
+                                                "role", "replica",                               //
+                                                "replication-offset", IntArg(0),                 //
+                                                "health", "online")))))))));
+
   absl::InsecureBitGen eng;
   while (true) {
     string random_key = GetRandomHex(eng, 40);
@@ -382,10 +461,8 @@ TEST_F(ClusterFamilyTest, ClusterConfigDeleteSlots) {
 class ClusterFamilyEmulatedTest : public BaseFamilyTest {
  public:
   ClusterFamilyEmulatedTest() {
-    auto* flag = absl::FindCommandLineFlag("cluster_mode");
-    CHECK_NE(flag, nullptr);
-    string error;
-    CHECK(flag->ParseFrom("emulated", &error));
+    SetTestFlag("cluster_mode", "emulated");
+    SetTestFlag("cluster_announce_ip", "fake-host");
   }
 };
 
@@ -398,5 +475,21 @@ TEST_F(ClusterFamilyEmulatedTest, ClusterInfo) {
   EXPECT_THAT(cluster_info, HasSubstr("cluster_size:1"));
 }
 
+TEST_F(ClusterFamilyEmulatedTest, ClusterShards) {
+  EXPECT_THAT(Run({"cluster", "shards"}),
+              RespArray(ElementsAre("slots",                                                      //
+                                    RespArray(ElementsAre(IntArg(0), IntArg(16383))),             //
+                                    "nodes",                                                      //
+                                    RespArray(ElementsAre(                                        //
+                                        RespArray(ElementsAre(                                    //
+                                            "id", RunAdmin({"dflycluster", "myid"}).GetString(),  //
+                                            "endpoint", "fake-host",                              //
+                                            "ip", "fake-host",                                    //
+                                            "port", IntArg(6379),                                 //
+                                            "role", "master",                                     //
+                                            "replication-offset", IntArg(0),                      //
+                                            "health", "online")))))));
+}
+
 }  // namespace
 }  // namespace dfly
diff --git a/src/server/test_utils.cc b/src/server/test_utils.cc
index 2ed2ff98c167..6fdd8f9e5889 100644
--- a/src/server/test_utils.cc
+++ b/src/server/test_utils.cc
@@ -8,6 +8,7 @@ extern "C" {
 #include "redis/zmalloc.h"
 }
 
+#include <absl/flags/reflection.h>
 #include <absl/strings/match.h>
 #include <absl/strings/str_split.h>
 #include <mimalloc.h>
@@ -455,4 +456,11 @@ vector<string> BaseFamilyTest::StrArray(const RespExpr& expr) {
   return res;
 }
 
+void BaseFamilyTest::SetTestFlag(string_view flag_name, string_view new_value) {
+  auto* flag = absl::FindCommandLineFlag(flag_name);
+  CHECK_NE(flag, nullptr);
+  string error;
+  CHECK(flag->ParseFrom(new_value, &error)) << "Error: " << error;
+}
+
 }  // namespace dfly
diff --git a/src/server/test_utils.h b/src/server/test_utils.h
index 1c89f80be270..4d8fdf43c915 100644
--- a/src/server/test_utils.h
+++ b/src/server/test_utils.h
@@ -104,6 +104,8 @@ class BaseFamilyTest : public ::testing::Test {
 
   static unsigned NumLocked();
 
+  void SetTestFlag(std::string_view flag_name, std::string_view new_value);
+
   std::unique_ptr<util::ProactorPool> pp_;
   std::unique_ptr<Service> service_;
   unsigned num_threads_ = 3;
