{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 4776,
  "instance_id": "dragonflydb__dragonfly-4776",
  "issue_numbers": [
    "4764"
  ],
  "base_commit": "753c25e37c71419da542cb10a846692593b5146c",
  "patch": "diff --git a/src/server/cluster/cluster_config.cc b/src/server/cluster/cluster_config.cc\nindex bda2ef831075..b651a04cacaf 100644\n--- a/src/server/cluster/cluster_config.cc\n+++ b/src/server/cluster/cluster_config.cc\n@@ -351,7 +351,6 @@ bool ClusterConfig::IsMySlot(std::string_view key) const {\n \n ClusterNodeInfo ClusterConfig::GetMasterNodeForSlot(SlotId id) const {\n   CHECK_LE(id, kMaxSlotNum) << \"Requesting a non-existing slot id \" << id;\n-\n   for (const auto& shard : config_) {\n     if (shard.slot_ranges.Contains(id)) {\n       if (shard.master.id == my_id_) {\n@@ -359,7 +358,11 @@ ClusterNodeInfo ClusterConfig::GetMasterNodeForSlot(SlotId id) const {\n         // migrated\n         for (const auto& m : shard.migrations) {\n           if (m.slot_ranges.Contains(id)) {\n-            return m.node_info;\n+            for (const auto& shard : config_) {\n+              if (shard.master.id == m.node_info.id) {\n+                return shard.master;\n+              }\n+            }\n           }\n         }\n       }\n",
  "test_patch": "diff --git a/tests/dragonfly/cluster_test.py b/tests/dragonfly/cluster_test.py\nindex 313b4200d4cd..f4c625249819 100644\n--- a/tests/dragonfly/cluster_test.py\n+++ b/tests/dragonfly/cluster_test.py\n@@ -2753,6 +2753,10 @@ async def test_migration_timeout_on_sync(df_factory: DflyInstanceFactory, df_see\n     await wait_for_status(nodes[0].admin_client, nodes[1].id, \"FINISHED\", 300)\n     await wait_for_status(nodes[1].admin_client, nodes[0].id, \"FINISHED\")\n \n+    with pytest.raises(aioredis.ResponseError) as e_info:\n+        await nodes[0].client.get(\"x\")\n+    assert f\"MOVED 16287 127.0.0.1:{instances[1].port}\" == str(e_info.value)\n+\n     nodes[0].migrations = []\n     nodes[0].slots = []\n     nodes[1].slots = [(0, 16383)]\n",
  "problem_statement": "Cluster redirecting to admin port\nOnce a migration is finished in Dragonfly, but not yet finalized by the control plane (with cluster config), Dragonfly redirects to the internal IP and admin port, not the configured public domain and port\n\nSuch as we should redirect to `eq0e9hvo2-qoixobx8a.dragonflydb.cloud:6379`, but instead redirect to `10.5.34.191:9999`\n\nThis means clients can't follow the redirect, both because it needs the domain not the IP (for TLS verification), and it needs the public port not the admin port\n",
  "hints_text": "",
  "created_at": "2025-03-16T12:13:51Z",
  "modified_files": [
    "src/server/cluster/cluster_config.cc"
  ],
  "modified_test_files": [
    "tests/dragonfly/cluster_test.py"
  ]
}