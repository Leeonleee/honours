diff --git a/src/server/acl/acl_family_test.cc b/src/server/acl/acl_family_test.cc
index 367cbb1ec4b2..7e06bf514242 100644
--- a/src/server/acl/acl_family_test.cc
+++ b/src/server/acl/acl_family_test.cc
@@ -48,16 +48,16 @@ TEST_F(AclFamilyTest, AclSetUser) {
   EXPECT_THAT(resp, "OK");
   resp = Run({"ACL", "LIST"});
   auto vec = resp.GetVec();
-  EXPECT_THAT(vec, UnorderedElementsAre("user default on nopass ~* &* +@all",
-                                        "user vlad off resetchannels -@all"));
+  EXPECT_THAT(vec, UnorderedElementsAre("user default on nopass ~* &* +@all $all",
+                                        "user vlad off resetchannels -@all $all"));
 
   resp = Run({"ACL", "SETUSER", "vlad", "+ACL"});
   EXPECT_THAT(resp, "OK");
 
   resp = Run({"ACL", "LIST"});
   vec = resp.GetVec();
-  EXPECT_THAT(vec, UnorderedElementsAre("user default on nopass ~* &* +@all",
-                                        "user vlad off resetchannels -@all +acl"));
+  EXPECT_THAT(vec, UnorderedElementsAre("user default on nopass ~* &* +@all $all",
+                                        "user vlad off resetchannels -@all +acl $all"));
 
   resp = Run({"ACL", "SETUSER", "vlad", "on", ">pass", ">temp"});
   EXPECT_THAT(resp, "OK");
@@ -66,11 +66,11 @@ TEST_F(AclFamilyTest, AclSetUser) {
   vec = resp.GetVec();
   EXPECT_THAT(vec.size(), 2);
   auto contains_vlad = [](const auto& vec) {
-    const std::string default_user = "user default on nopass ~* &* +@all";
+    const std::string default_user = "user default on nopass ~* &* +@all $all";
     const std::string a_permutation =
-        "user vlad on #a6864eb339b0e1f #d74ff0ee8da3b98 resetchannels -@all +acl";
+        "user vlad on #a6864eb339b0e1f #d74ff0ee8da3b98 resetchannels -@all +acl $all";
     const std::string b_permutation =
-        "user vlad on #d74ff0ee8da3b98 #a6864eb339b0e1f resetchannels -@all +acl";
+        "user vlad on #d74ff0ee8da3b98 #a6864eb339b0e1f resetchannels -@all +acl $all";
     std::string_view other;
     if (vec[0] == default_user) {
       other = vec[1].GetView();
@@ -110,8 +110,8 @@ TEST_F(AclFamilyTest, AclSetUser) {
 
   resp = Run({"ACL", "LIST"});
   vec = resp.GetVec();
-  EXPECT_THAT(vec, UnorderedElementsAre("user default on nopass ~* &* +@all",
-                                        "user vlad on resetchannels -@all +acl"));
+  EXPECT_THAT(vec, UnorderedElementsAre("user default on nopass ~* &* +@all $all",
+                                        "user vlad on resetchannels -@all +acl $all"));
 
   // +@NONE should not exist anymore. It's not in the spec.
   resp = Run({"ACL", "SETUSER", "rand", "+@NONE"});
@@ -122,18 +122,18 @@ TEST_F(AclFamilyTest, AclSetUser) {
 
   resp = Run({"ACL", "LIST"});
   vec = resp.GetVec();
-  EXPECT_THAT(vec, UnorderedElementsAre("user default on nopass ~* &* +@all",
-                                        "user vlad on resetchannels -@all +acl",
-                                        "user rand off resetchannels +@all"));
+  EXPECT_THAT(vec, UnorderedElementsAre("user default on nopass ~* &* +@all $all",
+                                        "user vlad on resetchannels -@all +acl $all",
+                                        "user rand off resetchannels +@all $all"));
 
   resp = Run({"ACL", "SETUSER", "rand", "NOCOMMANDS"});
   EXPECT_THAT(resp, "OK");
 
   resp = Run({"ACL", "LIST"});
   vec = resp.GetVec();
-  EXPECT_THAT(vec, UnorderedElementsAre("user default on nopass ~* &* +@all",
-                                        "user vlad on resetchannels -@all +acl",
-                                        "user rand off resetchannels -@all"));
+  EXPECT_THAT(vec, UnorderedElementsAre("user default on nopass ~* &* +@all $all",
+                                        "user vlad on resetchannels -@all +acl $all",
+                                        "user rand off resetchannels -@all $all"));
 }
 
 TEST_F(AclFamilyTest, AclDelUser) {
@@ -160,7 +160,7 @@ TEST_F(AclFamilyTest, AclDelUser) {
   EXPECT_THAT(resp, IntArg(0));
 
   resp = Run({"ACL", "LIST"});
-  EXPECT_THAT(resp.GetString(), "user default on nopass ~* &* +@all");
+  EXPECT_THAT(resp.GetString(), "user default on nopass ~* &* +@all $all");
 
   Run({"ACL", "SETUSER", "michael", "ON"});
   Run({"ACL", "SETUSER", "kobe", "ON"});
@@ -181,10 +181,10 @@ TEST_F(AclFamilyTest, AclList) {
 
   resp = Run({"ACL", "LIST"});
   auto vec = resp.GetVec();
-  EXPECT_THAT(vec,
-              UnorderedElementsAre("user default on nopass ~* &* +@all",
-                                   "user kostas off #d74ff0ee8da3b98 resetchannels -@all +@admin",
-                                   "user adi off #d74ff0ee8da3b98 resetchannels -@all +@fast"));
+  EXPECT_THAT(
+      vec, UnorderedElementsAre("user default on nopass ~* &* +@all $all",
+                                "user kostas off #d74ff0ee8da3b98 resetchannels -@all +@admin $all",
+                                "user adi off #d74ff0ee8da3b98 resetchannels -@all +@fast $all"));
 }
 
 TEST_F(AclFamilyTest, AclAuth) {
@@ -233,18 +233,18 @@ TEST_F(AclFamilyTest, TestAllCategories) {
 
       resp = Run({"ACL", "LIST"});
       EXPECT_THAT(resp.GetVec(),
-                  UnorderedElementsAre("user default on nopass ~* &* +@all",
+                  UnorderedElementsAre("user default on nopass ~* &* +@all $all",
                                        absl::StrCat("user kostas off resetchannels -@all ", "+@",
-                                                    absl::AsciiStrToLower(cat))));
+                                                    absl::AsciiStrToLower(cat), " $all")));
 
       resp = Run({"ACL", "SETUSER", "kostas", absl::StrCat("-@", cat)});
       EXPECT_THAT(resp, "OK");
 
       resp = Run({"ACL", "LIST"});
       EXPECT_THAT(resp.GetVec(),
-                  UnorderedElementsAre("user default on nopass ~* &* +@all",
+                  UnorderedElementsAre("user default on nopass ~* &* +@all $all",
                                        absl::StrCat("user kostas off resetchannels -@all ", "-@",
-                                                    absl::AsciiStrToLower(cat))));
+                                                    absl::AsciiStrToLower(cat), " $all")));
 
       resp = Run({"ACL", "DELUSER", "kostas"});
       EXPECT_THAT(resp, IntArg(1));
@@ -283,17 +283,17 @@ TEST_F(AclFamilyTest, TestAllCommands) {
 
       resp = Run({"ACL", "LIST"});
       EXPECT_THAT(resp.GetVec(),
-                  UnorderedElementsAre("user default on nopass ~* &* +@all",
+                  UnorderedElementsAre("user default on nopass ~* &* +@all $all",
                                        absl::StrCat("user kostas off resetchannels -@all ", "+",
-                                                    absl::AsciiStrToLower(command_name))));
+                                                    absl::AsciiStrToLower(command_name), " $all")));
 
       resp = Run({"ACL", "SETUSER", "kostas", absl::StrCat("-", command_name)});
 
       resp = Run({"ACL", "LIST"});
       EXPECT_THAT(resp.GetVec(),
-                  UnorderedElementsAre("user default on nopass ~* &* +@all",
+                  UnorderedElementsAre("user default on nopass ~* &* +@all $all",
                                        absl::StrCat("user kostas off resetchannels -@all ", "-",
-                                                    absl::AsciiStrToLower(command_name))));
+                                                    absl::AsciiStrToLower(command_name), " $all")));
 
       resp = Run({"ACL", "DELUSER", "kostas"});
       EXPECT_THAT(resp, IntArg(1));
@@ -537,4 +537,5 @@ TEST_F(AclFamilyTest, TestPubSub) {
   EXPECT_THAT(vec[8], "channels");
   EXPECT_THAT(vec[9], "resetchannels &foo");
 }
+
 }  // namespace dfly
diff --git a/tests/dragonfly/acl_family_test.py b/tests/dragonfly/acl_family_test.py
index 393174fbe333..d885b936753b 100644
--- a/tests/dragonfly/acl_family_test.py
+++ b/tests/dragonfly/acl_family_test.py
@@ -15,60 +15,64 @@ async def test_acl_setuser(async_client):
     await async_client.execute_command("ACL SETUSER kostas")
     result = await async_client.execute_command("ACL LIST")
     assert 2 == len(result)
-    assert "user kostas off resetchannels -@all" in result
+    assert "user kostas off resetchannels -@all $all" in result
 
     await async_client.execute_command("ACL SETUSER kostas ON")
     result = await async_client.execute_command("ACL LIST")
-    assert "user kostas on resetchannels -@all" in result
+    assert "user kostas on resetchannels -@all $all" in result
 
     await async_client.execute_command("ACL SETUSER kostas +@list +@string +@admin")
     result = await async_client.execute_command("ACL LIST")
     # TODO consider printing to lowercase
-    assert "user kostas on resetchannels -@all +@list +@string +@admin" in result
+    assert "user kostas on resetchannels -@all +@list +@string +@admin $all" in result
 
     await async_client.execute_command("ACL SETUSER kostas -@list -@admin")
     result = await async_client.execute_command("ACL LIST")
-    assert "user kostas on resetchannels -@all +@string -@list -@admin" in result
+    assert "user kostas on resetchannels -@all +@string -@list -@admin $all" in result
 
     # mix and match
     await async_client.execute_command("ACL SETUSER kostas +@list -@string")
     result = await async_client.execute_command("ACL LIST")
-    assert "user kostas on resetchannels -@all -@admin +@list -@string" in result
+    assert "user kostas on resetchannels -@all -@admin +@list -@string $all" in result
 
     # mix and match interleaved
     await async_client.execute_command("ACL SETUSER kostas +@set -@set +@set")
     result = await async_client.execute_command("ACL LIST")
-    assert "user kostas on resetchannels -@all -@admin +@list -@string +@set" in result
+    assert "user kostas on resetchannels -@all -@admin +@list -@string +@set $all" in result
 
     await async_client.execute_command("ACL SETUSER kostas +@all")
     result = await async_client.execute_command("ACL LIST")
-    assert "user kostas on resetchannels -@admin +@list -@string +@set +@all" in result
+    assert "user kostas on resetchannels -@admin +@list -@string +@set +@all $all" in result
 
     # commands
     await async_client.execute_command("ACL SETUSER kostas +set +get +hset")
     result = await async_client.execute_command("ACL LIST")
     assert (
-        "user kostas on resetchannels -@admin +@list -@string +@set +@all +set +get +hset" in result
+        "user kostas on resetchannels -@admin +@list -@string +@set +@all +set +get +hset $all"
+        in result
     )
 
     await async_client.execute_command("ACL SETUSER kostas -set -get +hset")
     result = await async_client.execute_command("ACL LIST")
     assert (
-        "user kostas on resetchannels -@admin +@list -@string +@set +@all -set -get +hset" in result
+        "user kostas on resetchannels -@admin +@list -@string +@set +@all -set -get +hset $all"
+        in result
     )
 
     # interleaved
     await async_client.execute_command("ACL SETUSER kostas -hset +get -get -@all")
     result = await async_client.execute_command("ACL LIST")
     assert (
-        "user kostas on resetchannels -@admin +@list -@string +@set -set -hset -get -@all" in result
+        "user kostas on resetchannels -@admin +@list -@string +@set -set -hset -get -@all $all"
+        in result
     )
 
     # interleaved with categories
     await async_client.execute_command("ACL SETUSER kostas +@string +get -get +set")
     result = await async_client.execute_command("ACL LIST")
     assert (
-        "user kostas on resetchannels -@admin +@list +@set -hset -@all +@string -get +set" in result
+        "user kostas on resetchannels -@admin +@list +@set -hset -@all +@string -get +set $all"
+        in result
     )
 
 
@@ -340,28 +344,29 @@ async def test_good_acl_file(df_factory, tmp_dir):
     result = await client.execute_command("ACL LIST")
     assert 2 == len(result)
     assert (
-        "user MrFoo on #ea71c25a7a60224 #a6864eb339b0e1f resetchannels &bar &r*nd -@all" in result
-        or "user MrFoo on #a6864eb339b0e1f #ea71c25a7a60224 resetchannels &bar &r*nd -@all"
+        "user MrFoo on #ea71c25a7a60224 #a6864eb339b0e1f resetchannels &bar &r*nd -@all $all"
+        in result
+        or "user MrFoo on #a6864eb339b0e1f #ea71c25a7a60224 resetchannels &bar &r*nd -@all $all"
         in result
     )
-    assert "user default on nopass ~* &* +@all" in result
-    await client.execute_command("ACL SETUSER MrFoo +@all")
+    assert "user default on nopass ~* &* +@all $all" in result
+    await client.execute_command("ACL SETUSER MrFoo +@all $0")
     # Check multiple passwords work
     assert "OK" == await client.execute_command("AUTH mypass")
     assert "OK" == await client.execute_command("AUTH temp")
     assert "OK" == await client.execute_command("AUTH default")
     await client.execute_command("ACL DELUSER MrFoo")
 
-    await client.execute_command("ACL SETUSER roy ON >mypass +@string +hset")
-    await client.execute_command("ACL SETUSER shahar >mypass +@set")
-    await client.execute_command("ACL SETUSER vlad ~foo ~bar* +@string")
+    await client.execute_command("ACL SETUSER roy ON >mypass +@string +hset $1")
+    await client.execute_command("ACL SETUSER shahar >mypass +@set $2")
+    await client.execute_command("ACL SETUSER vlad ~foo ~bar* +@string $3")
 
     result = await client.execute_command("ACL LIST")
     assert 4 == len(result)
-    assert "user roy on #ea71c25a7a60224 resetchannels -@all +@string +hset" in result
-    assert "user shahar off #ea71c25a7a60224 resetchannels -@all +@set" in result
-    assert "user vlad off ~foo ~bar* resetchannels -@all +@string" in result
-    assert "user default on nopass ~* &* +@all" in result
+    assert "user roy on #ea71c25a7a60224 resetchannels -@all +@string +hset $1" in result
+    assert "user shahar off #ea71c25a7a60224 resetchannels -@all +@set $2" in result
+    assert "user vlad off ~foo ~bar* resetchannels -@all +@string $3" in result
+    assert "user default on nopass ~* &* +@all $all" in result
 
     result = await client.execute_command("ACL DELUSER shahar")
     assert result == 1
@@ -372,9 +377,9 @@ async def test_good_acl_file(df_factory, tmp_dir):
 
     result = await client.execute_command("ACL LIST")
     assert 3 == len(result)
-    assert "user roy on #ea71c25a7a60224 resetchannels -@all +@string +hset" in result
-    assert "user vlad off ~foo ~bar* resetchannels -@all +@string" in result
-    assert "user default on nopass ~* &* +@all" in result
+    assert "user roy on #ea71c25a7a60224 resetchannels -@all +@string +hset $1" in result
+    assert "user vlad off ~foo ~bar* resetchannels -@all +@string $3" in result
+    assert "user default on nopass ~* &* +@all $all" in result
 
 
 @pytest.mark.asyncio
@@ -721,3 +726,21 @@ async def subscribe_worker(channel: aioredis.client.PubSub):
     await publish_worker(publisher)
     with pytest.raises(redis.exceptions.ConnectionError):
         await subscribe_task
+
+
+@pytest.mark.asyncio
+async def test_acl_select(async_client):
+    await async_client.execute_command("ACL SETUSER kostas on >tmp +@all $1 ~*")
+    assert await async_client.execute_command("AUTH kostas tmp") == "OK"
+
+    res = await async_client.execute_command("SET foo bar")
+    assert res == "OK"
+
+    with pytest.raises(redis.exceptions.NoPermissionError):
+        await async_client.execute_command("SELECT 0")
+
+    with pytest.raises(redis.exceptions.NoPermissionError):
+        await async_client.execute_command("MOVE foo 2")
+
+    res = await async_client.client_list()
+    assert res[0]["db"] == "1"
