You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
Suboptimal P99 latency under pipelining workloads
We have not really focused on combination of P99 latency and pipelining, especially in the context 
of uncoordinated omission access patterns.  

When investigating the elevated latency phenomena even under small CPU load I noticed the following:


1. The connection fiber yields after reading 11 requests from the socket. This limits how much optimization we can do further down the road when processing batches of requests.
2. When reading from the socket we limit the socket buffer to 4KB, unless a single request requires more. Which means that when reading series of small requests from the socket we can read at most K request that fit into 4KB. This causes a similar effect of the pipelining efficiency.
3. For cluster mode, we shard our request by tags. Valkey Cluster spec allows processing a multi-key command that touches multiple tags that belong to the same slot if, i.e. `mget {foo}aaa {bar}aaa` is allowed as long as both `{foo}` and `{bar}` belong to the same shard. Dragonfly processes such requests correctly but this means these commands run on multiple shards. Unfortunately pipelining optimizations do not work well with multi-shard commands and loose this efficiency (can be fixed in the future)
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
