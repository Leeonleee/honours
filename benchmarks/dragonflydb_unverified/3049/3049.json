{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 3049,
  "instance_id": "dragonflydb__dragonfly-3049",
  "issue_numbers": [
    "3047"
  ],
  "base_commit": "6b8a8b6410c84f0d03444a6700f54fb806270253",
  "patch": "diff --git a/src/server/main_service.cc b/src/server/main_service.cc\nindex 0827bb75b8f9..99bfbf1ce610 100644\n--- a/src/server/main_service.cc\n+++ b/src/server/main_service.cc\n@@ -1000,7 +1000,7 @@ static optional<ErrorReply> VerifyConnectionAclStatus(const CommandId* cid,\n     cntx = cntx->conn_state.squashing_info->owner;\n \n   if (!acl::IsUserAllowedToInvokeCommand(*cntx, *cid, tail_args)) {\n-    return ErrorReply(absl::StrCat(\"NOPERM: \", cntx->authed_username, \" \", error_msg));\n+    return ErrorReply(absl::StrCat(\"-NOPERM \", cntx->authed_username, \" \", error_msg));\n   }\n   return nullopt;\n }\n",
  "test_patch": "diff --git a/tests/dragonfly/acl_family_test.py b/tests/dragonfly/acl_family_test.py\nindex d222d0c8c2ba..60070756b7a0 100644\n--- a/tests/dragonfly/acl_family_test.py\n+++ b/tests/dragonfly/acl_family_test.py\n@@ -159,7 +159,7 @@ async def test_acl_cat_commands_multi_exec_squash(df_local_factory):\n     await client.execute_command(\"MULTI\")\n     assert res == b\"OK\"\n \n-    with pytest.raises(redis.exceptions.ResponseError):\n+    with pytest.raises(redis.exceptions.NoPermissionError):\n         await client.execute_command(f\"SET x{x} {x}\")\n     await client.close()\n \n@@ -186,7 +186,7 @@ async def test_acl_cat_commands_multi_exec_squash(df_local_factory):\n     # return multiple errors for each command failed. Since the nature of the error\n     # is the same, that a rule has changed we should squash those error messages into\n     # one.\n-    assert res[0].args[0] == \"NOPERM: kk ACL rules changed between the MULTI and EXEC\"\n+    assert res[0].args[0] == \"kk ACL rules changed between the MULTI and EXEC\"\n \n     await admin_client.close()\n     await client.close()\n@@ -213,7 +213,7 @@ async def test_acl_cat_commands_multi_exec_squash(df_local_factory):\n     # NOPERM while executing multi\n     await client.execute_command(\"MULTI\")\n \n-    with pytest.raises(redis.exceptions.ResponseError):\n+    with pytest.raises(redis.exceptions.NoPermissionError):\n         await client.execute_command(f\"SET x{x} {x}\")\n \n     await admin_client.close()\n",
  "problem_statement": "redis-py doesn't throw NoPermissionError on ACL mismatch\n**Describe the bug**\r\nWhen a Dragonfly ACL is violated with redis-py library, it does not throw NoPermissionError but instead throws ResponseError with message starting with `NOPERM:`.\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Violate an ACL with redis-py library\r\n2. See that it throws ResponseError with `NOPERM:`\r\n\r\n**Expected behavior**\r\nredis-py should throw NoPermissionError.\r\n\r\n\r\n**Environment (please complete the following information):**\r\n - Dragonfly Version: 1.16.1\r\n\n",
  "hints_text": "Yep, we are sending the wrong error type -- I will fix this :) ",
  "created_at": "2024-05-15T15:03:13Z",
  "modified_files": [
    "src/server/main_service.cc"
  ],
  "modified_test_files": [
    "tests/dragonfly/acl_family_test.py"
  ]
}