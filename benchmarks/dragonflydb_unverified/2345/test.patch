diff --git a/src/server/blocking_controller_test.cc b/src/server/blocking_controller_test.cc
index 18df73ef2fbc..01f0ed8c8b1f 100644
--- a/src/server/blocking_controller_test.cc
+++ b/src/server/blocking_controller_test.cc
@@ -75,7 +75,8 @@ TEST_F(BlockingControllerTest, Basic) {
     EngineShard* shard = EngineShard::tlocal();
     BlockingController bc(shard);
     auto keys = trans_->GetShardArgs(shard->shard_id());
-    bc.AddWatched(keys, trans_.get());
+    bc.AddWatched(
+        keys, [](auto...) { return true; }, trans_.get());
     EXPECT_EQ(1, bc.NumWatched(0));
 
     bc.FinalizeWatched(keys, trans_.get());
@@ -89,7 +90,7 @@ TEST_F(BlockingControllerTest, Timeout) {
   trans_->Schedule();
   auto cb = [&](Transaction* t, EngineShard* shard) { return trans_->GetShardArgs(0); };
 
-  facade::OpStatus status = trans_->WaitOnWatch(tp, cb);
+  facade::OpStatus status = trans_->WaitOnWatch(tp, cb, [](auto...) { return true; });
 
   EXPECT_EQ(status, facade::OpStatus::TIMED_OUT);
   unsigned num_watched = shard_set->Await(
diff --git a/src/server/stream_family_test.cc b/src/server/stream_family_test.cc
index bd27ca3d907c..f154839b4db4 100644
--- a/src/server/stream_family_test.cc
+++ b/src/server/stream_family_test.cc
@@ -342,26 +342,18 @@ TEST_F(StreamFamilyTest, XReadGroupBlock) {
   ThisFiber::SleepFor(50us);
   pp_->at(1)->Await([&] { return Run("xadd", {"xadd", "bar", "1-*", "k5", "v5"}); });
   // The second one should be unblocked
+  ThisFiber::SleepFor(50us);
 
   fb0.Join();
   fb1.Join();
-  // temporary incorrect results
-  if (resp0.GetVec()[1].GetVec().size() == 0) {
-    EXPECT_THAT(resp0.GetVec(), ElementsAre("foo", ArrLen(0)));
-    EXPECT_THAT(resp1.GetVec(), ElementsAre("foo", ArrLen(1)));
-  } else {
+
+  if (resp0.GetVec()[0].GetString() == "foo") {
     EXPECT_THAT(resp0.GetVec(), ElementsAre("foo", ArrLen(1)));
-    EXPECT_THAT(resp1.GetVec(), ElementsAre("foo", ArrLen(0)));
+    EXPECT_THAT(resp1.GetVec(), ElementsAre("bar", ArrLen(1)));
+  } else {
+    EXPECT_THAT(resp1.GetVec(), ElementsAre("foo", ArrLen(1)));
+    EXPECT_THAT(resp0.GetVec(), ElementsAre("bar", ArrLen(1)));
   }
-
-  // correct results
-  // if (resp0.GetVec()[0].GetString() == "foo") {
-  //   EXPECT_THAT(resp0.GetVec(), ElementsAre("foo", ArrLen(1)));
-  //   EXPECT_THAT(resp1.GetVec(), ElementsAre("bar", ArrLen(1)));
-  // } else {
-  //   EXPECT_THAT(resp1.GetVec(), ElementsAre("foo", ArrLen(1)));
-  //   EXPECT_THAT(resp0.GetVec(), ElementsAre("bar", ArrLen(1)));
-  // }
 }
 
 TEST_F(StreamFamilyTest, XReadInvalidArgs) {
diff --git a/src/server/zset_family_test.cc b/src/server/zset_family_test.cc
index 1e7571057a5a..40bce478c250 100644
--- a/src/server/zset_family_test.cc
+++ b/src/server/zset_family_test.cc
@@ -677,6 +677,26 @@ TEST_F(ZSetFamilyTest, BlockingIsReleased) {
   }
 }
 
+TEST_F(ZSetFamilyTest, BlockingWithIncorrectType) {
+  RespExpr resp0;
+  RespExpr resp1;
+  auto fb0 = pp_->at(0)->LaunchFiber(Launch::dispatch, [&] {
+    resp0 = Run({"BLPOP", "list1", "0"});
+  });
+  auto fb1 = pp_->at(1)->LaunchFiber(Launch::dispatch, [&] {
+    resp1 = Run({"BZPOPMIN", "list1", "0"});
+  });
+
+  ThisFiber::SleepFor(50us);
+  pp_->at(2)->Await([&] { return Run({"ZADD", "list1", "1", "a"}); });
+  pp_->at(2)->Await([&] { return Run({"LPUSH", "list1", "0"}); });
+  fb0.Join();
+  fb1.Join();
+
+  EXPECT_THAT(resp1.GetVec(), ElementsAre("list1", "a", "1"));
+  EXPECT_THAT(resp0.GetVec(), ElementsAre("list1", "0"));
+}
+
 TEST_F(ZSetFamilyTest, BlockingTimeout) {
   RespExpr resp0;
 
