{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 5260,
  "instance_id": "dragonflydb__dragonfly-5260",
  "issue_numbers": [
    "5247"
  ],
  "base_commit": "1ee5f8f92b78201ece51848efdf882549543cb82",
  "patch": "diff --git a/src/facade/cmd_arg_parser.h b/src/facade/cmd_arg_parser.h\nindex 94e4cb429fea..27922bbcc9c6 100644\n--- a/src/facade/cmd_arg_parser.h\n+++ b/src/facade/cmd_arg_parser.h\n@@ -145,6 +145,7 @@ struct CmdArgParser {\n     return *this;\n   }\n \n+  // Expect no more arguments and return if no error has occured\n   bool Finalize() {\n     if (HasNext()) {\n       Report(UNPROCESSED, cur_i_);\ndiff --git a/src/server/conn_context.cc b/src/server/conn_context.cc\nindex 4cd9b0e6e694..fd7f0008a993 100644\n--- a/src/server/conn_context.cc\n+++ b/src/server/conn_context.cc\n@@ -173,11 +173,6 @@ void ConnectionContext::ChangeMonitor(bool start) {\n   EnableMonitoring(start);\n }\n \n-void ConnectionContext::SwitchTxCmd(const CommandId* cid) {\n-  transaction->MultiSwitchCmd(cid);\n-  this->cid = cid;\n-}\n-\n void ConnectionContext::ChangeSubscription(bool to_add, bool to_reply, CmdArgList args,\n                                            facade::RedisReplyBuilder* rb) {\n   vector<unsigned> result = ChangeSubscriptions(args, false, to_add, to_reply);\ndiff --git a/src/server/conn_context.h b/src/server/conn_context.h\nindex 9cd709668827..082d735c0d04 100644\n--- a/src/server/conn_context.h\n+++ b/src/server/conn_context.h\n@@ -310,7 +310,6 @@ class ConnectionContext : public facade::ConnectionContext {\n   void UnsubscribeAll(bool to_reply, facade::RedisReplyBuilder* rb);\n   void PUnsubscribeAll(bool to_reply, facade::RedisReplyBuilder* rb);\n   void ChangeMonitor(bool start);  // either start or stop monitor on a given connection\n-  void SwitchTxCmd(const CommandId* cid);\n \n   size_t UsedMemory() const override;\n \ndiff --git a/src/server/debugcmd.cc b/src/server/debugcmd.cc\nindex 5fad41f04318..9de704bf17f7 100644\n--- a/src/server/debugcmd.cc\n+++ b/src/server/debugcmd.cc\n@@ -1459,7 +1459,7 @@ void DebugCmd::DoPopulateBatch(const PopulateOptions& options, const PopulateBat\n         args_view.push_back(arg);\n       }\n       auto args_span = absl::MakeSpan(args_view);\n-      local_cntx.SwitchTxCmd(cid);\n+      stub_tx->MultiSwitchCmd(cid);\n       crb.SetReplyMode(ReplyMode::NONE);\n       stub_tx->InitByArgs(cntx_->ns, local_cntx.conn_state.db_index, args_span);\n \n@@ -1481,8 +1481,8 @@ void DebugCmd::DoPopulateBatch(const PopulateOptions& options, const PopulateBat\n         args_view.push_back(arg);\n       }\n       auto args_span = absl::MakeSpan(args_view);\n-      local_cntx.SwitchTxCmd(cid);\n       crb.SetReplyMode(ReplyMode::NONE);\n+      stub_tx->MultiSwitchCmd(cid);\n       stub_tx->InitByArgs(cntx_->ns, local_cntx.conn_state.db_index, args_span);\n       sf_.service().InvokeCmd(cid, args_span,\n                               CommandContext{local_cntx.transaction, &crb, &local_cntx});\ndiff --git a/src/server/list_family.cc b/src/server/list_family.cc\nindex 77213ae4c320..f0c4a7930d79 100644\n--- a/src/server/list_family.cc\n+++ b/src/server/list_family.cc\n@@ -1170,47 +1170,6 @@ void BPopGeneric(ListDir dir, CmdArgList args, Transaction* tx, SinkReplyBuilder\n   return rb->SendNullArray();\n }\n \n-struct LMPopParams {\n-  uint32_t num_keys;\n-  ListDir dir;\n-  int pop_count;\n-};\n-\n-facade::ErrorReply ParseLMPop(CmdArgList args, LMPopParams* params) {\n-  CmdArgParser parser{args};\n-\n-  if (!SimpleAtoi(parser.Next(), &params->num_keys)) {\n-    return facade::ErrorReply(kUintErr);\n-  }\n-\n-  if (params->num_keys <= 0 || !parser.HasAtLeast(params->num_keys + 1)) {\n-    return facade::ErrorReply(kSyntaxErr);\n-  }\n-\n-  parser.Skip(params->num_keys);\n-\n-  if (parser.Check(\"LEFT\")) {\n-    params->dir = ListDir::LEFT;\n-  } else if (parser.Check(\"RIGHT\")) {\n-    params->dir = ListDir::RIGHT;\n-  } else {\n-    return facade::ErrorReply(kSyntaxErr);\n-  }\n-\n-  params->pop_count = 1;\n-  if (parser.HasNext()) {\n-    if (!parser.Check(\"COUNT\", &params->pop_count)) {\n-      return facade::ErrorReply(kSyntaxErr);\n-    }\n-  }\n-\n-  if (!parser.Finalize()) {\n-    return facade::ErrorReply(parser.Error()->MakeReply());\n-  }\n-\n-  return facade::ErrorReply(OpStatus::OK);\n-}\n-\n // Returns the first non-empty key found in the shard arguments along with its type validity.\n // Returns a pair of (key, is_valid_type) where is_valid_type is true if the key exists\n // and has the correct type (LIST). If a wrong type is found, returns that key with false.\n@@ -1244,13 +1203,16 @@ optional<pair<string_view, bool>> GetFirstNonEmptyKeyFound(EngineShard* shard, T\n void ListFamily::LMPop(CmdArgList args, const CommandContext& cmd_cntx) {\n   auto* response_builder = static_cast<RedisReplyBuilder*>(cmd_cntx.rb);\n \n-  LMPopParams params;\n-  facade::ErrorReply parse_result = ParseLMPop(args, &params);\n+  CmdArgParser parser{args};\n+  parser.Skip(parser.Next<size_t>());  // skip numkeys and keys\n+\n+  ListDir dir = parser.MapNext(\"LEFT\", ListDir::LEFT, \"RIGHT\", ListDir::RIGHT);\n+  size_t pop_count = 1;\n+  if (parser.Check(\"COUNT\"))\n+    pop_count = parser.Next<size_t>();\n \n-  if (parse_result.status != OpStatus::OK) {\n-    response_builder->SendError(parse_result);\n-    return;\n-  }\n+  if (!parser.Finalize())\n+    return response_builder->SendError(parser.Error()->MakeReply());\n \n   // Create a vector to store first found key for each shard\n   vector<optional<pair<string_view, bool>>> found_keys_per_shard(shard_set->size());\n@@ -1301,10 +1263,10 @@ void ListFamily::LMPop(CmdArgList args, const CommandContext& cmd_cntx) {\n   optional<ShardId> key_shard = Shard(*key_to_pop, shard_set->size());\n   OpResult<StringVec> result;\n \n-  auto cb_pop = [&params, key_shard, &result, key = *key_to_pop](Transaction* t,\n-                                                                 EngineShard* shard) {\n+  auto cb_pop = [dir, pop_count, key_shard, &result, key = *key_to_pop](Transaction* t,\n+                                                                        EngineShard* shard) {\n     if (*key_shard == shard->shard_id()) {\n-      result = OpPop(t->GetOpArgs(shard), key, params.dir, params.pop_count, true, false);\n+      result = OpPop(t->GetOpArgs(shard), key, dir, pop_count, true, false);\n     }\n     return OpStatus::OK;\n   };\ndiff --git a/src/server/main_service.cc b/src/server/main_service.cc\nindex 0dde5bc1aa5a..1905b95834a5 100644\n--- a/src/server/main_service.cc\n+++ b/src/server/main_service.cc\n@@ -1351,6 +1351,7 @@ bool Service::InvokeCmd(const CommandId* cid, CmdArgList tail_args,\n   DCHECK(!cid->Validate(tail_args));\n \n   ConnectionContext* cntx = cmd_cntx.conn_cntx;\n+  cntx->cid = cid;\n   auto* builder = cmd_cntx.rb;\n   DCHECK(builder);\n   DCHECK(cntx);\n@@ -2283,13 +2284,10 @@ void Service::Exec(CmdArgList args, const CommandContext& cmd_cntx) {\n     } else {\n       CmdArgVec arg_vec;\n       for (const auto& scmd : exec_info.body) {\n-        VLOG(2) << \"TX CMD \" << scmd.Cid()->name() << \" \" << scmd.NumArgs();\n-\n-        cntx->SwitchTxCmd(scmd.Cid());\n-\n         CmdArgList args = scmd.ArgList(&arg_vec);\n \n         if (scmd.Cid()->IsTransactional()) {\n+          cmd_cntx.tx->MultiSwitchCmd(scmd.Cid());\n           OpStatus st = cmd_cntx.tx->InitByArgs(cntx->ns, cntx->conn_state.db_index, args);\n           if (st != OpStatus::OK) {\n             rb->SendError(st);\ndiff --git a/src/server/multi_command_squasher.cc b/src/server/multi_command_squasher.cc\nindex 36ea3122bacc..8caf9f77ee25 100644\n--- a/src/server/multi_command_squasher.cc\n+++ b/src/server/multi_command_squasher.cc\n@@ -151,10 +151,10 @@ bool MultiCommandSquasher::ExecuteStandalone(RedisReplyBuilder* rb, const Stored\n   }\n \n   auto* tx = cntx_->transaction;\n-  cntx_->SwitchTxCmd(cmd->Cid());\n-\n-  if (cmd->Cid()->IsTransactional())\n+  if (cmd->Cid()->IsTransactional()) {\n+    tx->MultiSwitchCmd(cmd->Cid());\n     tx->InitByArgs(cntx_->ns, cntx_->conn_state.db_index, args);\n+  }\n   service_->InvokeCmd(cmd->Cid(), args, CommandContext{tx, rb, cntx_});\n \n   return true;\n@@ -192,9 +192,9 @@ OpStatus MultiCommandSquasher::SquashedHopCb(EngineShard* es, RespVersion resp_v\n       }\n     }\n \n-    local_cntx.SwitchTxCmd(dispatched.cmd->Cid());\n     crb.SetReplyMode(dispatched.cmd->ReplyMode());\n \n+    local_tx->MultiSwitchCmd(dispatched.cmd->Cid());\n     local_tx->InitByArgs(cntx_->ns, local_cntx.conn_state.db_index, args);\n     service_->InvokeCmd(dispatched.cmd->Cid(), args,\n                         CommandContext{local_cntx.transaction, &crb, &local_cntx});\ndiff --git a/src/server/transaction.cc b/src/server/transaction.cc\nindex 9f5af6f75a01..168a22c30266 100644\n--- a/src/server/transaction.cc\n+++ b/src/server/transaction.cc\n@@ -318,10 +318,9 @@ void Transaction::StoreKeysInArgs(const KeyIndex& key_index) {\n }\n \n void Transaction::InitByKeys(const KeyIndex& key_index) {\n-  if (key_index.start == full_args_.size()) {  // eval with 0 keys.\n-    CHECK(absl::StartsWith(cid_->name(), \"EVAL\")) << cid_->name();\n+  // Skip initialization for key-dependent transactions without keys\n+  if ((key_index.end - key_index.start) + int(bool(key_index.bonus)) == 0)\n     return;\n-  }\n \n   DCHECK_LT(key_index.start, full_args_.size());\n \n@@ -1602,7 +1601,7 @@ OpResult<KeyIndex> DetermineKeys(const CommandId* cid, CmdArgList args) {\n \n     if (num_custom_keys == 0 &&\n         (absl::StartsWith(name, \"ZDIFF\") || absl::StartsWith(name, \"ZUNION\") ||\n-         absl::StartsWith(name, \"ZINTER\"))) {\n+         absl::StartsWith(name, \"ZINTER\") || absl::EndsWith(name, \"MPOP\"))) {\n       return OpStatus::AT_LEAST_ONE_KEY;\n     }\n \n",
  "test_patch": "diff --git a/src/server/list_family_test.cc b/src/server/list_family_test.cc\nindex cd2b36daefaf..b1ff5e4da588 100644\n--- a/src/server/list_family_test.cc\n+++ b/src/server/list_family_test.cc\n@@ -1109,7 +1109,7 @@ TEST_F(ListFamilyTest, LMPopInvalidSyntax) {\n \n   // Zero keys\n   resp = Run({\"lmpop\", \"0\", \"LEFT\", \"COUNT\", \"1\"});\n-  EXPECT_THAT(resp, ErrArg(\"syntax error\"));\n+  EXPECT_THAT(resp, ErrArg(\"at least 1 input key is needed\"));\n \n   // Number of keys is not uint\n   resp = Run({\"lmpop\", \"aa\", \"a\", \"LEFT\"});\n@@ -1256,7 +1256,7 @@ TEST_F(ListFamilyTest, LMPopEdgeCases) {\n \n   // Test with negative COUNT - should return error\n   resp = Run({\"lmpop\", \"1\", \"list\", \"LEFT\", \"COUNT\", \"-1\"});\n-  EXPECT_THAT(resp, RespArray(ElementsAre(\"list\", RespArray(ElementsAre(\"b\")))));\n+  EXPECT_THAT(resp, ErrArg(\"value is not an integer or out of range\"));\n }\n \n TEST_F(ListFamilyTest, LMPopDocExample) {\ndiff --git a/src/server/multi_test.cc b/src/server/multi_test.cc\nindex 9e8a5b81c205..57456149e86e 100644\n--- a/src/server/multi_test.cc\n+++ b/src/server/multi_test.cc\n@@ -310,6 +310,26 @@ TEST_F(MultiTest, MultiRename) {\n   EXPECT_FALSE(service_->IsShardSetLocked());\n }\n \n+// Run multi without transactional commands\n+TEST_F(MultiTest, MultiWithoutTx) {\n+  Run({\"multi\"});\n+  Run({\"ping\"});\n+  auto resp = Run({\"exec\"});\n+  EXPECT_EQ(resp, \"PONG\");\n+\n+  // EVAL without keys and default script flags should be non-transactional\n+  Run({\"multi\"});\n+  Run({\"eval\", \"return 'OK1'\", \"0\"});\n+  Run({\"ping\"});\n+  Run({\"eval\", \"return 'OK2'\", \"0\", \"not-a-key\"});\n+  Run({\"ping\"});\n+  Run({\"eval\", \"return 'OK3'\", \"0\", \"not-a-key\", \"as-well\"});\n+  Run({\"ping\"});\n+  resp = Run({\"exec\"});\n+  EXPECT_EQ(resp.GetVec()[2], \"OK2\");\n+  EXPECT_EQ(resp.GetVec()[4], \"OK3\");\n+}\n+\n TEST_F(MultiTest, MultiHop) {\n   Run({\"set\", kKey1, \"1\"});\n \ndiff --git a/src/server/set_family_test.cc b/src/server/set_family_test.cc\nindex 54bc93269aab..7dfa00b15d13 100644\n--- a/src/server/set_family_test.cc\n+++ b/src/server/set_family_test.cc\n@@ -115,6 +115,8 @@ TEST_F(SetFamilyTest, SInter) {\n   EXPECT_THAT(resp, ErrArg(\"WRONGTYPE Operation against a key\"));\n   resp = Run({\"sinterstore\", \"none1\", \"none2\"});\n   EXPECT_THAT(resp, IntArg(0));\n+\n+  EXPECT_THAT(Run({\"sinter\"}), ErrArg(\"wrong number of arguments\"));\n }\n \n TEST_F(SetFamilyTest, SInterCard) {\ndiff --git a/src/server/zset_family_test.cc b/src/server/zset_family_test.cc\nindex 7720adebf39d..bcd02715d4d4 100644\n--- a/src/server/zset_family_test.cc\n+++ b/src/server/zset_family_test.cc\n@@ -814,7 +814,7 @@ TEST_F(ZSetFamilyTest, ZMPopInvalidSyntax) {\n \n   // Zero keys.\n   resp = Run({\"zmpop\", \"0\", \"MIN\", \"COUNT\", \"1\"});\n-  EXPECT_THAT(resp, ErrArg(\"syntax error\"));\n+  EXPECT_THAT(resp, ErrArg(\"at least 1 input key is needed\"));\n \n   // Number of keys not uint.\n   resp = Run({\"zmpop\", \"aa\", \"a\", \"MIN\"});\n",
  "problem_statement": "transaction crash\nThe crash can be reproduced with one or multiple proactor_threads.\n\nRecorded traffic: \n[traffic.tar.gz](https://github.com/user-attachments/files/20638718/traffic.tar.gz)\n\nThe crash log:\n```\nF20250607 15:47:28.162160 114027 transaction.cc:521] Check failed: IsAtomicMulti() \n*** Check failure stack trace: ***\n    @     0x64f1f3fccd73  google::LogMessage::Fail()\n    @     0x64f1f3fcccb9  google::LogMessage::SendToLog()\n    @     0x64f1f3fcc46c  google::LogMessage::Flush()\n    @     0x64f1f3fd0564  google::LogMessageFatal::~LogMessageFatal()\n    @     0x64f1f3b2a364  dfly::Transaction::MultiSwitchCmd()\n    @     0x64f1f334c07a  dfly::ConnectionContext::SwitchTxCmd()\n    @     0x64f1f35c437f  dfly::Service::Exec()\n    @     0x64f1f35c7cfe  _ZZN4dfly7Service8RegisterEPNS_15CommandRegistryEENKUlN4absl12lts_202407224SpanIKSt17basic_string_viewIcSt11char_traitsIcEEEERKNS_14CommandContextEE4_clESB_SE_\n    @     0x64f1f35f04b3  _ZN3fu27abi_4006detail10invocation6invokeIRKZN4dfly7Service8RegisterEPNS4_15CommandRegistryEEUlN4absl12lts_202407224SpanIKSt17basic_string_viewIcSt11char_traitsIcEEEERKNS4_14CommandContextEE4_JSG_SJ_EEEDTclcl7forwardIT_Efp_Espcl7forwardIT0_Efp0_EEEOSN_DpOSO_\n    @     0x64f1f35eb4de  _ZN3fu27abi_4006detail12type_erasure16invocation_table14function_traitIKFvN4absl12lts_202407224SpanIKSt17basic_string_viewIcSt11char_traitsIcEEEERKN4dfly14CommandContextEEE16internal_invokerINS2_3boxILb1EZNSE_7Service8RegisterEPNSE_15CommandRegistryEEUlSD_SH_E4_SaISP_EEELb1EE6invokeEPKNS2_13data_accessorEmSD_SH_\n    @     0x64f1f3ad8a7f  _ZNK3fu27abi_4006detail12type_erasure6tables6vtableINS1_8propertyILb0ELb0EJKFvN4absl12lts_202407224SpanIKSt17basic_string_viewIcSt11char_traitsIcEEEERKN4dfly14CommandContextEEEEEE6invokeILm0EJPKNS2_13data_accessorERKmSE_SI_EEEDcDpOT0_\n    @     0x64f1f3ad8b18  _ZN3fu27abi_4006detail12type_erasure7erasureILb1ENS1_6configILb1ELb1ENS_16capacity_defaultEEENS1_8propertyILb0ELb0EJKFvN4absl12lts_202407224SpanIKSt17basic_string_viewIcSt11char_traitsIcEEEERKN4dfly14CommandContextEEEEEE6invokeILm0ERKSN_JSG_SK_EEEDcOT0_DpOT1_\n    @     0x64f1f3ad8b96  fu2::abi_400::detail::type_erasure::invocation_table::operator_impl<>::operator()()\n    @     0x64f1f3ad4fe1  dfly::CommandId::Invoke()\n    @     0x64f1f35bd448  dfly::Service::InvokeCmd()\n    @     0x64f1f35bc2e6  dfly::Service::DispatchCommand()\n    @     0x64f1f3d0d468  facade::Connection::AsyncOperations::operator()()\n    @     0x64f1f3d32334  facade::Connection::AsyncOperations::operator()<>()\n    @     0x64f1f3d2f6a9  std::__invoke_impl<>()\n    @     0x64f1f3d2af05  std::__invoke<>()\n    @     0x64f1f3d2552e  std::__detail::__variant::__gen_vtable_impl<>::__visit_invoke()\n    @     0x64f1f3d25ae4  _ZSt10__do_visitINSt8__detail9__variant21__deduce_visit_resultIvEERN6facade10Connection15AsyncOperationsEJRSt7variantIJNS5_14MonitorMessageESt10unique_ptrINS5_10PubMessageENS5_14MessageDeleterEESA_INS5_15PipelineMessageESC_ESA_INS5_17MCPipelineMessageESt14default_deleteISG_EESA_INS5_16AclUpdateMessageESH_ISK_EENS5_23MigrationRequestMessageENS5_17CheckpointMessageENS5_19InvalidationMessageEEEEEDcOT0_DpOT1_\n    @     0x64f1f3d25c29  _ZSt5visitIRN6facade10Connection15AsyncOperationsEJRSt7variantIJNS1_14MonitorMessageESt10unique_ptrINS1_10PubMessageENS1_14MessageDeleterEES6_INS1_15PipelineMessageES8_ES6_INS1_17MCPipelineMessageESt14default_deleteISC_EES6_INS1_16AclUpdateMessageESD_ISG_EENS1_23MigrationRequestMessageENS1_17CheckpointMessageENS1_19InvalidationMessageEEEEENSt13invoke_resultIT_JDpNSt13__conditionalIX21is_lvalue_reference_vIT0_EEE4typeIRNSt19variant_alternativeILm0ENSt16remove_referenceIDTcl4__ascl7declvalISR_EEEEE4typeEE4typeEOS10_EEEE4typeEOSP_DpOSR_\n    @     0x64f1f3d17c27  facade::Connection::AsyncFiber()\n    @     0x64f1f3d1961d  _ZZN6facade10Connection24LaunchAsyncFiberIfNeededEvENKUlvE_clEv\n    @     0x64f1f3d1fb4d  _ZSt13__invoke_implIvZN6facade10Connection24LaunchAsyncFiberIfNeededEvEUlvE_JEET_St14__invoke_otherOT0_DpOT1_\n    @     0x64f1f3d1f85e  _ZSt8__invokeIZN6facade10Connection24LaunchAsyncFiberIfNeededEvEUlvE_JEENSt15__invoke_resultIT_JDpT0_EE4typeEOS4_DpOS5_\n    @     0x64f1f3d1f58e  _ZSt12__apply_implIZN6facade10Connection24LaunchAsyncFiberIfNeededEvEUlvE_St5tupleIJEEJEEDcOT_OT0_St16integer_sequenceImJXspT1_EEE\n    @     0x64f1f3d1f5c8  _ZSt5applyIZN6facade10Connection24LaunchAsyncFiberIfNeededEvEUlvE_St5tupleIJEEEDcOT_OT0_\n    @     0x64f1f3d1f645  _ZN4util3fb26detail15WorkerFiberImplIZN6facade10Connection24LaunchAsyncFiberIfNeededEvEUlvE_JEE4run_EON5boost7context5fiberE\n    @     0x64f1f3d1eb2d  _ZZN4util3fb26detail15WorkerFiberImplIZN6facade10Connection24LaunchAsyncFiberIfNeededEvEUlvE_JEEC4INS0_19FixedStackAllocatorEEESt17basic_string_viewIcSt11char_traitsIcEENS0_13FiberPriorityERKN5boost7context12preallocatedEOT_OS5_ENKUlONSF_5fiberEE_clESN_\n    @     0x64f1f3d204ea  _ZSt13__invoke_implIN5boost7context5fiberERZN4util3fb26detail15WorkerFiberImplIZN6facade10Connection24LaunchAsyncFiberIfNeededEvEUlvE_JEEC4INS4_19FixedStackAllocatorEEESt17basic_string_viewIcSt11char_traitsIcEENS4_13FiberPriorityERKNS1_12preallocatedEOT_OS9_EUlOS2_E_JS2_EESL_St14__invoke_otherOT0_DpOT1_\n*** SIGABRT received at time=1749300448 on cpu 0 ***\nPC: @     0x7ef18afe2b2c  (unknown)  pthread_kill\n    @     0x64f1f4054eae         64  absl::lts_20240722::WriteFailureInfo()\n    @     0x64f1f405512a         96  absl::lts_20240722::AbslFailureSignalHandler()\n    @     0x7ef18af89330       1776  (unknown)\n    @     0x7ef18af8927e         32  raise\n    @     0x7ef18af6c8ff        192  abort\n    @     0x64f1f3fd7b9e        176  google::DumpStackTraceAndExit()\n    @     0x64f1f3fccd73         16  google::LogMessage::Fail()\n    @     0x64f1f3fcccb9        160  google::LogMessage::SendToLog()\n    @     0x64f1f3fcc46c         80  google::LogMessage::Flush()\n    @     0x64f1f3fd0564         32  google::LogMessageFatal::~LogMessageFatal()\n    @     0x64f1f3b2a364        224  dfly::Transaction::MultiSwitchCmd()\n    @     0x64f1f334c07a         32  dfly::ConnectionContext::SwitchTxCmd()\n    @     0x64f1f35c437f        432  dfly::Service::Exec()\n    @     0x64f1f35c7cfe         64  dfly::Service::Register()::{lambda()#6}::operator()()\n    @     0x64f1f35f04b3         64  fu2::abi_400::detail::invocation::invoke<>()\n    @     0x64f1f35eb4de         96  fu2::abi_400::detail::type_erasure::invocation_table::function_trait<>::internal_invoker<>::invoke()\n    @     0x64f1f3ad8a7f        112  fu2::abi_400::detail::type_erasure::tables::vtable<>::invoke<>()\n    @     0x64f1f3ad8b18        112  fu2::abi_400::detail::type_erasure::erasure<>::invoke<>()\n    @     0x64f1f3ad8b96         80  fu2::abi_400::detail::type_erasure::invocation_table::operator_impl<>::operator()()\n    @     0x64f1f3ad4fe1        112  dfly::CommandId::Invoke()\n    @     0x64f1f35bd448        624  dfly::Service::InvokeCmd()\n    @     0x64f1f35bc2e6        528  dfly::Service::DispatchCommand()\n    @     0x64f1f3d0d468        208  facade::Connection::AsyncOperations::operator()()\n    @     0x64f1f3d32334         32  facade::Connection::AsyncOperations::operator()<>()\n    @     0x64f1f3d2f6a9         48  std::__invoke_impl<>()\n    @     0x64f1f3d2af05         48  std::__invoke<>()\n    @     0x64f1f3d2552e         48  std::__detail::__variant::__gen_vtable_impl<>::__visit_invoke()\n    @     0x64f1f3d25ae4         96  std::__do_visit<>()\n    @     0x64f1f3d25c29         48  std::visit<>()\n    @     0x64f1f3d17c27        400  facade::Connection::AsyncFiber()\n    @     0x64f1f3d1961d         32  facade::Connection::LaunchAsyncFiberIfNeeded()::{lambda()#1}::operator()()\n    @     0x64f1f3d1fb4d         32  std::__invoke_impl<>()\n    @ ... and at least 11 more frames\n[1]    114025 IOT instruction (core dumped)  ./dragonfly --dbfilename= --logtostderr --proactor_threads=1 2>&1\n```\n",
  "hints_text": "",
  "created_at": "2025-06-09T18:25:18Z",
  "modified_files": [
    "src/facade/cmd_arg_parser.h",
    "src/server/conn_context.cc",
    "src/server/conn_context.h",
    "src/server/debugcmd.cc",
    "src/server/list_family.cc",
    "src/server/main_service.cc",
    "src/server/multi_command_squasher.cc",
    "src/server/transaction.cc"
  ],
  "modified_test_files": [
    "src/server/list_family_test.cc",
    "src/server/multi_test.cc",
    "src/server/set_family_test.cc",
    "src/server/zset_family_test.cc"
  ]
}