{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 2807,
  "instance_id": "dragonflydb__dragonfly-2807",
  "issue_numbers": [
    "1758"
  ],
  "base_commit": "6ca6ddb47d06adfaf519e28ea4476e3eccf5a9ad",
  "patch": "diff --git a/src/server/string_family.cc b/src/server/string_family.cc\nindex e1ef7ee92648..90acf38abc1a 100644\n--- a/src/server/string_family.cc\n+++ b/src/server/string_family.cc\n@@ -688,6 +688,10 @@ void SetCmd::RecordJournal(const SetParams& params, string_view key, string_view\n   if (params.flags & SET_STICK) {\n     cmds.push_back(\"STICK\");\n   }\n+  if (params.memcache_flags) {\n+    cmds.push_back(\"_MCFLAGS\");\n+    cmds.push_back(absl::StrCat(params.memcache_flags));\n+  }\n \n   // Skip NX/XX because SET operation was exectued.\n   // Skip GET, because its not important on replica.\n@@ -749,6 +753,8 @@ void StringFamily::Set(CmdArgList args, ConnectionContext* cntx) {\n         int_arg *= 1000;\n       }\n       sparams.expire_after_ms = int_arg;\n+    } else if (parser.Check(\"_MCFLAGS\").ExpectTail(1)) {\n+      sparams.memcache_flags = parser.Next<uint16_t>();\n     } else {\n       uint16_t flag = parser.Switch(  //\n           \"GET\", SetCmd::SET_GET, \"STICK\", SetCmd::SET_STICK, \"KEEPTTL\", SetCmd::SET_KEEP_EXPIRE,\n",
  "test_patch": "diff --git a/src/server/dragonfly_test.cc b/src/server/dragonfly_test.cc\nindex ed8875d724f2..a2a2d4eaf4cf 100644\n--- a/src/server/dragonfly_test.cc\n+++ b/src/server/dragonfly_test.cc\n@@ -347,6 +347,15 @@ TEST_F(DflyEngineTest, Memcache) {\n   EXPECT_THAT(resp, ElementsAre(\"END\"));\n }\n \n+TEST_F(DflyEngineTest, MemcacheFlags) {\n+  using MP = MemcacheParser;\n+\n+  auto resp = Run(\"resp\", {\"SET\", \"key\", \"bar\", \"_MCFLAGS\", \"42\"});\n+  ASSERT_EQ(resp, \"OK\");\n+  MCResponse resp2 = RunMC(MP::GET, \"key\");\n+  EXPECT_THAT(resp2, ElementsAre(\"VALUE key 42 3\", \"bar\", \"END\"));\n+}\n+\n TEST_F(DflyEngineTest, LimitMemory) {\n   mi_option_enable(mi_option_limit_os_alloc);\n   string blob(128, 'a');\ndiff --git a/src/server/test_utils.cc b/src/server/test_utils.cc\nindex 815c44f168ea..05870dfb22f9 100644\n--- a/src/server/test_utils.cc\n+++ b/src/server/test_utils.cc\n@@ -365,6 +365,10 @@ RespExpr BaseFamilyTest::Run(absl::Span<std::string> span) {\n }\n \n RespExpr BaseFamilyTest::Run(std::string_view id, ArgSlice slice) {\n+  if (!ProactorBase::IsProactorThread()) {\n+    return pp_->at(0)->Await([&] { return this->Run(id, slice); });\n+  }\n+\n   TestConnWrapper* conn_wrapper = AddFindConn(Protocol::REDIS, id);\n \n   CmdArgVec args = conn_wrapper->Args(slice);\n@@ -601,6 +605,8 @@ ConnectionContext::DebugInfo BaseFamilyTest::GetDebugInfo(const std::string& id)\n }\n \n auto BaseFamilyTest::AddFindConn(Protocol proto, std::string_view id) -> TestConnWrapper* {\n+  DCHECK(ProactorBase::IsProactorThread());\n+\n   unique_lock lk(mu_);\n \n   auto [it, inserted] = connections_.emplace(id, nullptr);\n",
  "problem_statement": "support memcache flags during snapshotting and replication\nmemcache has additional `flags` property for each its entries. \r\nWe maintain it in a separate datastructure `mc_flags`.  \r\n\r\n1. SAVE/LOAD procedures do not support them because it's not part of the standard Redis datastrcutures\r\n2. Also the replication ignores them. \r\n\r\nWe have a user that runs Dragonfly in memcached mode and H/A and asks for those features to improve the availability of their deployment. \r\n\n",
  "hints_text": "Is the journaling subsystem supporting memcache commands? We might need to fix this as well.\nWhat is the latest update on the issue?",
  "created_at": "2024-03-31T20:28:21Z",
  "modified_files": [
    "src/server/string_family.cc"
  ],
  "modified_test_files": [
    "src/server/dragonfly_test.cc",
    "src/server/test_utils.cc"
  ]
}