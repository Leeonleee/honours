{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 2104,
  "instance_id": "dragonflydb__dragonfly-2104",
  "issue_numbers": [
    "2102"
  ],
  "base_commit": "00f1e3d57837b5e5dfd141ab1bc823129679aa55",
  "patch": "diff --git a/src/server/hset_family.cc b/src/server/hset_family.cc\nindex 531f9a2a32d6..ff22951deaed 100644\n--- a/src/server/hset_family.cc\n+++ b/src/server/hset_family.cc\n@@ -542,7 +542,6 @@ OpResult<vector<string>> OpGetAll(const OpArgs& op_args, string_view key, uint8_\n \n   vector<string> res;\n   bool keyval = (mask == (FIELDS | VALUES));\n-  unsigned index = 0;\n \n   if (pv.Encoding() == kEncodingListPack) {\n     uint8_t* lp = (uint8_t*)pv.RObjPtr();\n@@ -551,6 +550,7 @@ OpResult<vector<string>> OpGetAll(const OpArgs& op_args, string_view key, uint8_\n     uint8_t* fptr = lpFirst(lp);\n     uint8_t intbuf[LP_INTBUF_SIZE];\n \n+    unsigned index = 0;\n     while (fptr) {\n       if (mask & FIELDS) {\n         res[index++] = LpGetView(fptr, intbuf);\n@@ -565,14 +565,15 @@ OpResult<vector<string>> OpGetAll(const OpArgs& op_args, string_view key, uint8_\n     DCHECK_EQ(pv.Encoding(), kEncodingStrMap2);\n     StringMap* sm = GetStringMap(pv, op_args.db_cntx);\n \n-    res.resize(sm->Size() * (keyval ? 2 : 1));\n+    // Some items could have expired, yet accounted for in Size(), so reserve() might overshoot\n+    res.reserve(sm->Size() * (keyval ? 2 : 1));\n     for (const auto& k_v : *sm) {\n       if (mask & FIELDS) {\n-        res[index++].assign(k_v.first, sdslen(k_v.first));\n+        res.emplace_back(k_v.first, sdslen(k_v.first));\n       }\n \n       if (mask & VALUES) {\n-        res[index++].assign(k_v.second, sdslen(k_v.second));\n+        res.emplace_back(k_v.second, sdslen(k_v.second));\n       }\n     }\n   }\n",
  "test_patch": "diff --git a/src/server/hset_family_test.cc b/src/server/hset_family_test.cc\nindex d6daf0f4d1a5..ac50cf33e6d4 100644\n--- a/src/server/hset_family_test.cc\n+++ b/src/server/hset_family_test.cc\n@@ -332,4 +332,11 @@ TEST_F(HSetFamilyTest, Issue1140) {\n   EXPECT_EQ(\"Bar\", Run({\"HGET\", \"CaseKey\", \"Foo\"}));\n }\n \n+TEST_F(HSetFamilyTest, Issue2102) {\n+  // Set key with element that will expire after 1s\n+  EXPECT_EQ(CheckedInt({\"HSETEX\", \"key\", \"10\", \"k1\", \"v1\"}), 1);\n+  AdvanceTime(10'000);\n+  EXPECT_THAT(Run({\"HGETALL\", \"key\"}), RespArray(ElementsAre()));\n+}\n+\n }  // namespace dfly\n",
  "problem_statement": "`hgetall` after entry expiration briefly returns an empty key/value\n```\r\n127.0.0.1:6379> hsetex k 10 k1 v1\r\n(integer) 1\r\n```\r\n\r\nwait >10 s\r\n\r\n```\r\n127.0.0.1:6379> hgetall k\r\n1) \"\"\r\n2) \"\"\r\n127.0.0.1:6379> hgetall k\r\n(empty array)\r\n```\r\n\r\nObviously, the middle part, where we return `[\"\", \"\"]` is flawed..\n",
  "hints_text": "",
  "created_at": "2023-11-01T19:10:47Z",
  "modified_files": [
    "src/server/hset_family.cc"
  ],
  "modified_test_files": [
    "src/server/hset_family_test.cc"
  ]
}