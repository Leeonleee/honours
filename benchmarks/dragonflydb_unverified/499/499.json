{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 499,
  "instance_id": "dragonflydb__dragonfly-499",
  "issue_numbers": [
    "496"
  ],
  "base_commit": "6f45e801375c89d2adb88055d677b11dcedacf3f",
  "patch": "diff --git a/src/server/db_slice.cc b/src/server/db_slice.cc\nindex 6ccc841cadd0..ea45dcd16c70 100644\n--- a/src/server/db_slice.cc\n+++ b/src/server/db_slice.cc\n@@ -340,7 +340,7 @@ tuple<PrimeIterator, ExpireIterator, bool> DbSlice::AddOrFind2(const Context& cn\n     auto res = FindExt(cntx, key);\n \n     if (IsValid(res.first)) {\n-      return tuple_cat(res, make_tuple(true));\n+      return tuple_cat(res, make_tuple(false));\n     }\n \n     // It's a new entry.\n",
  "test_patch": "diff --git a/src/server/dragonfly_test.cc b/src/server/dragonfly_test.cc\nindex ae262b542bfd..b5083ef6b3f5 100644\n--- a/src/server/dragonfly_test.cc\n+++ b/src/server/dragonfly_test.cc\n@@ -721,6 +721,34 @@ TEST_F(DflyEngineTest, Bug468) {\n   ASSERT_FALSE(service_->IsLocked(0, \"foo\"));\n }\n \n+TEST_F(DflyEngineTest, Bug496) {\n+  shard_set->pool()->AwaitFiberOnAll([&](unsigned index, ProactorBase* base) {\n+    EngineShard* shard = EngineShard::tlocal();\n+    if (shard == nullptr)\n+      return;\n+\n+    auto& db = shard->db_slice();\n+\n+    int cb_hits = 0;\n+    uint32_t cb_id =\n+        db.RegisterOnChange([&cb_hits](DbIndex, const DbSlice::ChangeReq&) { cb_hits++; });\n+\n+    auto [_, added] = db.AddOrFind({}, \"key-1\");\n+    EXPECT_TRUE(added);\n+    EXPECT_EQ(cb_hits, 1);\n+\n+    tie(_, added) = db.AddOrFind({}, \"key-1\");\n+    EXPECT_FALSE(added);\n+    EXPECT_EQ(cb_hits, 1);\n+\n+    tie(_, added) = db.AddOrFind({}, \"key-2\");\n+    EXPECT_TRUE(added);\n+    EXPECT_EQ(cb_hits, 2);\n+\n+    db.UnregisterOnChange(cb_id);\n+  });\n+}\n+\n // TODO: to test transactions with a single shard since then all transactions become local.\n // To consider having a parameter in dragonfly engine controlling number of shards\n // unconditionally from number of cpus. TO TEST BLPOP under multi for single/multi argument case.\n",
  "problem_statement": "bug during snapshotting\nTo reproduce:\r\n\r\n1. debug replicate 1000000\r\n2. change the var \"crash_on_new\" to true (in debugger)\r\n3. run `memtier_benchmark --ratio 1:0 -t 4 -n 1000000  --hide-histogram --key-maximum 100000 --key-prefix=\"key:\"`\r\n    it should not crash\r\n4. run \"save df\". crashes immediately.\r\n\n",
  "hints_text": "branch Bug496\nmaybe it's about time we fix \"keyspace_hits\" and \"keyspace_misses\", and this way we could do the test that reproduces it without this awkward variable.",
  "created_at": "2022-11-16T22:10:30Z",
  "modified_files": [
    "src/server/db_slice.cc"
  ],
  "modified_test_files": [
    "src/server/dragonfly_test.cc"
  ]
}