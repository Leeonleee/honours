diff --git a/tests/clickhouse-test b/tests/clickhouse-test
index 3e0d4e822b4d..75159053f26f 100755
--- a/tests/clickhouse-test
+++ b/tests/clickhouse-test
@@ -2172,4 +2172,7 @@ if __name__ == "__main__":
     if args.jobs is None:
         args.jobs = multiprocessing.cpu_count()
 
+    if args.db_engine and args.db_engine == "Ordinary":
+        MESSAGES_TO_RETRY.append(" locking attempt on ")
+
     main(args)
diff --git a/tests/config/config.d/database_atomic.xml b/tests/config/config.d/database_atomic.xml
index b3f51d51a79a..a551e710ca37 100644
--- a/tests/config/config.d/database_atomic.xml
+++ b/tests/config/config.d/database_atomic.xml
@@ -1,3 +1,8 @@
 <clickhouse>
     <database_atomic_delay_before_drop_table_sec>60</database_atomic_delay_before_drop_table_sec>
+
+    <!-- Aggressive cleanup for tests to catch more issues -->
+    <database_catalog_unused_dir_hide_timeout_sec>0</database_catalog_unused_dir_hide_timeout_sec>
+    <database_catalog_unused_dir_rm_timeout_sec>5</database_catalog_unused_dir_rm_timeout_sec>
+    <database_catalog_unused_dir_cleanup_period_sec>10</database_catalog_unused_dir_cleanup_period_sec>
 </clickhouse>
diff --git a/tests/integration/test_broken_detached_part_clean_up/configs/store_cleanup.xml b/tests/integration/test_broken_detached_part_clean_up/configs/store_cleanup.xml
new file mode 100644
index 000000000000..3b0260dd07a3
--- /dev/null
+++ b/tests/integration/test_broken_detached_part_clean_up/configs/store_cleanup.xml
@@ -0,0 +1,11 @@
+<clickhouse>
+    <database_catalog_unused_dir_hide_timeout_sec>0</database_catalog_unused_dir_hide_timeout_sec>
+    <database_catalog_unused_dir_rm_timeout_sec>15</database_catalog_unused_dir_rm_timeout_sec>
+    <database_catalog_unused_dir_cleanup_period_sec>1</database_catalog_unused_dir_cleanup_period_sec>
+
+    <!-- We don't really need [Zoo]Keeper for this test.
+    And it makes sense to have at least one test with TestKeeper. -->
+    <zookeeper>
+        <implementation>testkeeper</implementation>
+    </zookeeper>
+</clickhouse>
\ No newline at end of file
diff --git a/tests/integration/test_broken_detached_part_clean_up/test.py b/tests/integration/test_broken_detached_part_clean_up/test.py
index 3d9134bdc547..167d10ec7d1b 100644
--- a/tests/integration/test_broken_detached_part_clean_up/test.py
+++ b/tests/integration/test_broken_detached_part_clean_up/test.py
@@ -1,14 +1,15 @@
 import pytest
 
 from helpers.cluster import ClickHouseCluster
-from multiprocessing.dummy import Pool
 from helpers.corrupt_part_data_on_disk import corrupt_part_data_on_disk
 from helpers.corrupt_part_data_on_disk import break_part
 import time
 
 cluster = ClickHouseCluster(__file__)
 
-node1 = cluster.add_instance("node1", stay_alive=True, with_zookeeper=True)
+node1 = cluster.add_instance(
+    "node1", stay_alive=True, main_configs=["configs/store_cleanup.xml"]
+)
 
 path_to_data = "/var/lib/clickhouse/"
 
@@ -147,3 +148,181 @@ def test_remove_broken_detached_part_replicated_merge_tree(started_cluster):
         )
 
     remove_broken_detached_part_impl("replicated_mt", node1, "broken")
+
+
+def test_store_cleanup(started_cluster):
+    node1.query("CREATE DATABASE db UUID '10000000-1000-4000-8000-000000000001'")
+    node1.query(
+        "CREATE TABLE db.log UUID '10000000-1000-4000-8000-000000000002' ENGINE=Log AS SELECT 1"
+    )
+    node1.query(
+        "CREATE TABLE db.mt UUID '10000000-1000-4000-8000-000000000003' ENGINE=MergeTree ORDER BY tuple() AS SELECT 1"
+    )
+    node1.query(
+        "CREATE TABLE db.mem UUID '10000000-1000-4000-8000-000000000004' ENGINE=Memory AS SELECT 1"
+    )
+
+    node1.query("CREATE DATABASE db2 UUID '20000000-1000-4000-8000-000000000001'")
+    node1.query(
+        "CREATE TABLE db2.log UUID '20000000-1000-4000-8000-000000000002' ENGINE=Log AS SELECT 1"
+    )
+    node1.query("DETACH DATABASE db2")
+
+    node1.query("CREATE DATABASE db3 UUID '30000000-1000-4000-8000-000000000001'")
+    node1.query(
+        "CREATE TABLE db3.log UUID '30000000-1000-4000-8000-000000000002' ENGINE=Log AS SELECT 1"
+    )
+    node1.query(
+        "CREATE TABLE db3.log2 UUID '30000000-1000-4000-8000-000000000003' ENGINE=Log AS SELECT 1"
+    )
+    node1.query("DETACH TABLE db3.log")
+    node1.query("DETACH TABLE db3.log2 PERMANENTLY")
+
+    assert "d---------" not in node1.exec_in_container(
+        ["ls", "-l", f"{path_to_data}/store"]
+    )
+    assert "d---------" not in node1.exec_in_container(
+        ["ls", "-l", f"{path_to_data}/store/100"]
+    )
+    assert "d---------" not in node1.exec_in_container(
+        ["ls", "-l", f"{path_to_data}/store/200"]
+    )
+    assert "d---------" not in node1.exec_in_container(
+        ["ls", "-l", f"{path_to_data}/store/300"]
+    )
+
+    node1.stop_clickhouse(kill=True)
+    # All dirs related to `db` will be removed
+    node1.exec_in_container(["rm", f"{path_to_data}/metadata/db.sql"])
+
+    node1.exec_in_container(["mkdir", f"{path_to_data}/store/kek"])
+    node1.exec_in_container(["touch", f"{path_to_data}/store/12"])
+    node1.exec_in_container(["mkdir", f"{path_to_data}/store/456"])
+    node1.exec_in_container(["mkdir", f"{path_to_data}/store/456/testgarbage"])
+    node1.exec_in_container(
+        ["mkdir", f"{path_to_data}/store/456/30000000-1000-4000-8000-000000000003"]
+    )
+    node1.exec_in_container(
+        ["touch", f"{path_to_data}/store/456/45600000-1000-4000-8000-000000000003"]
+    )
+    node1.exec_in_container(
+        ["mkdir", f"{path_to_data}/store/456/45600000-1000-4000-8000-000000000004"]
+    )
+
+    node1.start_clickhouse()
+    node1.query("DETACH DATABASE db2")
+    node1.query("DETACH TABLE db3.log")
+
+    node1.wait_for_log_line("Removing access rights for unused directory")
+    time.sleep(1)
+    node1.wait_for_log_line("testgarbage")
+    node1.wait_for_log_line("directories from store")
+
+    store = node1.exec_in_container(["ls", f"{path_to_data}/store"])
+    assert "100" in store
+    assert "200" in store
+    assert "300" in store
+    assert "456" in store
+    assert "kek" in store
+    assert "12" in store
+    assert "d---------" in node1.exec_in_container(
+        ["ls", "-l", f"{path_to_data}/store"]
+    )
+    assert "d---------" in node1.exec_in_container(
+        ["ls", "-l", f"{path_to_data}/store/456"]
+    )
+
+    # Metadata is removed, so store/100 contains garbage
+    store100 = node1.exec_in_container(["ls", f"{path_to_data}/store/100"])
+    assert "10000000-1000-4000-8000-000000000001" in store100
+    assert "10000000-1000-4000-8000-000000000002" in store100
+    assert "10000000-1000-4000-8000-000000000003" in store100
+    assert "d---------" in node1.exec_in_container(
+        ["ls", "-l", f"{path_to_data}/store/100"]
+    )
+
+    # Database is detached, nothing to clean up
+    store200 = node1.exec_in_container(["ls", f"{path_to_data}/store/200"])
+    assert "20000000-1000-4000-8000-000000000001" in store200
+    assert "20000000-1000-4000-8000-000000000002" in store200
+    assert "d---------" not in node1.exec_in_container(
+        ["ls", "-l", f"{path_to_data}/store/200"]
+    )
+
+    # Tables are detached, nothing to clean up
+    store300 = node1.exec_in_container(["ls", f"{path_to_data}/store/300"])
+    assert "30000000-1000-4000-8000-000000000001" in store300
+    assert "30000000-1000-4000-8000-000000000002" in store300
+    assert "30000000-1000-4000-8000-000000000003" in store300
+    assert "d---------" not in node1.exec_in_container(
+        ["ls", "-l", f"{path_to_data}/store/300"]
+    )
+
+    # Manually created garbage
+    store456 = node1.exec_in_container(["ls", f"{path_to_data}/store/456"])
+    assert "30000000-1000-4000-8000-000000000003" in store456
+    assert "45600000-1000-4000-8000-000000000003" in store456
+    assert "45600000-1000-4000-8000-000000000004" in store456
+    assert "testgarbage" in store456
+    assert "----------" in node1.exec_in_container(
+        ["ls", "-l", f"{path_to_data}/store/456"]
+    )
+
+    node1.wait_for_log_line("Removing unused directory")
+    time.sleep(1)
+    node1.wait_for_log_line("directories from store")
+
+    store = node1.exec_in_container(["ls", f"{path_to_data}/store"])
+    assert "100" in store
+    assert "200" in store
+    assert "300" in store
+    assert "456" in store
+    assert "kek" not in store  # changed
+    assert "
12
" not in store  # changed
+    assert "d---------" not in node1.exec_in_container(
+        ["ls", "-l", f"{path_to_data}/store"]
+    )  # changed
+
+    # Metadata is removed, so store/100 contains garbage
+    store100 = node1.exec_in_container(["ls", f"{path_to_data}/store/100"])  # changed
+    assert "10000000-1000-4000-8000-000000000001" not in store100  # changed
+    assert "10000000-1000-4000-8000-000000000002" not in store100  # changed
+    assert "10000000-1000-4000-8000-000000000003" not in store100  # changed
+    assert "d---------" not in node1.exec_in_container(
+        ["ls", "-l", f"{path_to_data}/store/100"]
+    )  # changed
+
+    # Database is detached, nothing to clean up
+    store200 = node1.exec_in_container(["ls", f"{path_to_data}/store/200"])
+    assert "20000000-1000-4000-8000-000000000001" in store200
+    assert "20000000-1000-4000-8000-000000000002" in store200
+    assert "d---------" not in node1.exec_in_container(
+        ["ls", "-l", f"{path_to_data}/store/200"]
+    )
+
+    # Tables are detached, nothing to clean up
+    store300 = node1.exec_in_container(["ls", f"{path_to_data}/store/300"])
+    assert "30000000-1000-4000-8000-000000000001" in store300
+    assert "30000000-1000-4000-8000-000000000002" in store300
+    assert "30000000-1000-4000-8000-000000000003" in store300
+    assert "d---------" not in node1.exec_in_container(
+        ["ls", "-l", f"{path_to_data}/store/300"]
+    )
+
+    # Manually created garbage
+    store456 = node1.exec_in_container(["ls", f"{path_to_data}/store/456"])
+    assert "30000000-1000-4000-8000-000000000003" not in store456  # changed
+    assert "45600000-1000-4000-8000-000000000003" not in store456  # changed
+    assert "45600000-1000-4000-8000-000000000004" not in store456  # changed
+    assert "testgarbage" not in store456  # changed
+    assert "---------" not in node1.exec_in_container(
+        ["ls", "-l", f"{path_to_data}/store/456"]
+    )  # changed
+
+    node1.query("ATTACH TABLE db3.log2")
+    node1.query("ATTACH DATABASE db2")
+    node1.query("ATTACH TABLE db3.log")
+
+    assert "1
" == node1.query("SELECT * FROM db3.log")
+    assert "1
" == node1.query("SELECT * FROM db3.log2")
+    assert "1
" == node1.query("SELECT * FROM db2.log")
diff --git a/tests/queries/0_stateless/replication.lib b/tests/queries/0_stateless/replication.lib
index 6bf3c35f3441..fd32fa28ba00 100755
--- a/tests/queries/0_stateless/replication.lib
+++ b/tests/queries/0_stateless/replication.lib
@@ -45,8 +45,8 @@ function check_replication_consistency()
     while [[ $($CLICKHOUSE_CLIENT -q "SELECT count() FROM system.processes WHERE current_database=currentDatabase() AND query LIKE '%$table_name_prefix%'") -ne 1 ]]; do
         sleep 0.5;
         num_tries=$((num_tries+1))
-        if [ $num_tries -eq 100 ]; then
-            $CLICKHOUSE_CLIENT -q "SELECT count() FROM system.processes WHERE current_database=currentDatabase() AND query LIKE '%$table_name_prefix%' FORMAT Vertical"
+        if [ $num_tries -eq 200 ]; then
+            $CLICKHOUSE_CLIENT -q "SELECT * FROM system.processes WHERE current_database=currentDatabase() AND query LIKE '%$table_name_prefix%' FORMAT Vertical"
             break
         fi
     done
diff --git a/tests/queries/shell_config.sh b/tests/queries/shell_config.sh
index 87c999c2032e..866fba506e49 100644
--- a/tests/queries/shell_config.sh
+++ b/tests/queries/shell_config.sh
@@ -138,7 +138,7 @@ function wait_for_queries_to_finish()
         sleep 0.5;
         num_tries=$((num_tries+1))
         if [ $num_tries -eq 20 ]; then
-            $CLICKHOUSE_CLIENT -q "SELECT count() FROM system.processes WHERE current_database=currentDatabase() AND query NOT LIKE '%system.processes%' FORMAT Vertical"
+            $CLICKHOUSE_CLIENT -q "SELECT * FROM system.processes WHERE current_database=currentDatabase() AND query NOT LIKE '%system.processes%' FORMAT Vertical"
             break
         fi
     done
