{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 20133,
  "instance_id": "ClickHouse__ClickHouse-20133",
  "issue_numbers": [
    "18356"
  ],
  "base_commit": "20a3b9782f6265540e8af83bd6629da075ace015",
  "patch": "diff --git a/src/Functions/if.cpp b/src/Functions/if.cpp\nindex 3be4848f1ff6..614bfcf700ed 100644\n--- a/src/Functions/if.cpp\n+++ b/src/Functions/if.cpp\n@@ -532,7 +532,7 @@ class FunctionIf : public FunctionIfBase</*null_is_false=*/false>\n         return nullptr;\n     }\n \n-    ColumnPtr executeTuple(const ColumnsWithTypeAndName & arguments, size_t input_rows_count) const\n+    ColumnPtr executeTuple(const ColumnsWithTypeAndName & arguments, const DataTypePtr & result_type, size_t input_rows_count) const\n     {\n         /// Calculate function for each corresponding elements of tuples.\n \n@@ -558,6 +558,7 @@ class FunctionIf : public FunctionIfBase</*null_is_false=*/false>\n \n         const DataTypeTuple & type1 = static_cast<const DataTypeTuple &>(*arg1.type);\n         const DataTypeTuple & type2 = static_cast<const DataTypeTuple &>(*arg2.type);\n+        const DataTypeTuple & tuple_result = static_cast<const DataTypeTuple &>(*result_type);\n \n         ColumnsWithTypeAndName temporary_columns(3);\n         temporary_columns[0] = arguments[0];\n@@ -570,7 +571,7 @@ class FunctionIf : public FunctionIfBase</*null_is_false=*/false>\n             temporary_columns[1] = {col1_contents[i], type1.getElements()[i], {}};\n             temporary_columns[2] = {col2_contents[i], type2.getElements()[i], {}};\n \n-            tuple_columns[i] = executeImpl(temporary_columns, std::make_shared<DataTypeUInt8>(), input_rows_count);\n+            tuple_columns[i] = executeImpl(temporary_columns, tuple_result.getElements()[i], input_rows_count);\n         }\n \n         return ColumnTuple::create(tuple_columns);\n@@ -988,7 +989,7 @@ class FunctionIf : public FunctionIfBase</*null_is_false=*/false>\n             || (res = executeTyped<UInt128, UInt128>(cond_col, arguments, result_type, input_rows_count))\n             || (res = executeString(cond_col, arguments, result_type))\n             || (res = executeGenericArray(cond_col, arguments, result_type))\n-            || (res = executeTuple(arguments, input_rows_count))))\n+            || (res = executeTuple(arguments, result_type, input_rows_count))))\n         {\n             return executeGeneric(cond_col, arguments, input_rows_count);\n         }\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01701_if_tuple_segfault.reference b/tests/queries/0_stateless/01701_if_tuple_segfault.reference\nnew file mode 100644\nindex 000000000000..001e50da9540\n--- /dev/null\n+++ b/tests/queries/0_stateless/01701_if_tuple_segfault.reference\n@@ -0,0 +1,3 @@\n+2020-10-01 19:20:30\thello\t([0],45)\t45\t([0,1,2,3,4,5,6,7,8,9,10,11,12],[45,55,65,75,85,95,105,115,125,135,145,155,165])\n+([3],4)\n+2020-10-01 19:20:30\thello\t([0],45)\t5\t([0,1,2,3,4,5,6,7,8,9,10,11,12],[22,27,32,37,42,47,52,57,62,67,72,77,82])\ndiff --git a/tests/queries/0_stateless/01701_if_tuple_segfault.sql b/tests/queries/0_stateless/01701_if_tuple_segfault.sql\nnew file mode 100644\nindex 000000000000..93b28c578a90\n--- /dev/null\n+++ b/tests/queries/0_stateless/01701_if_tuple_segfault.sql\n@@ -0,0 +1,33 @@\n+DROP TABLE IF EXISTS agg_table;\n+\n+CREATE TABLE IF NOT EXISTS agg_table\n+(\n+    time DateTime CODEC(DoubleDelta, LZ4),\n+    xxx String,\n+    two_values Tuple(Array(UInt16), UInt32),\n+    agg_simple SimpleAggregateFunction(sum, UInt64),\n+    agg SimpleAggregateFunction(sumMap, Tuple(Array(Int16), Array(UInt64)))\n+)\n+ENGINE = AggregatingMergeTree()\n+ORDER BY (xxx, time);\n+\n+INSERT INTO agg_table SELECT toDateTime('2020-10-01 19:20:30'), 'hello', ([any(number)], sum(number)), sum(number),\n+    sumMap((arrayMap(i -> toString(i), range(13)), arrayMap(i -> (number + i), range(13)))) FROM numbers(10);\n+\n+SELECT * FROM agg_table;\n+\n+SELECT if(xxx = 'x', ([2], 3), ([3], 4)) FROM agg_table;\n+\n+SELECT if(xxx = 'x', ([2], 3), ([3], 4, 'q', 'w', 7)) FROM agg_table; --{ serverError 386 }\n+\n+ALTER TABLE agg_table UPDATE two_values = (two_values.1, two_values.2) WHERE time BETWEEN toDateTime('2020-08-01 00:00:00') AND toDateTime('2020-12-01 00:00:00') SETTINGS mutations_sync = 2;\n+\n+ALTER TABLE agg_table UPDATE agg_simple = 5 WHERE time BETWEEN toDateTime('2020-08-01 00:00:00') AND toDateTime('2020-12-01 00:00:00') SETTINGS mutations_sync = 2;\n+\n+ALTER TABLE agg_table UPDATE agg = (agg.1, agg.2) WHERE time BETWEEN toDateTime('2020-08-01 00:00:00') AND toDateTime('2020-12-01 00:00:00') SETTINGS mutations_sync = 2;\n+\n+ALTER TABLE agg_table UPDATE agg = (agg.1, arrayMap(x -> toUInt64(x / 2), agg.2)) WHERE time BETWEEN toDateTime('2020-08-01 00:00:00') AND toDateTime('2020-12-01 00:00:00') SETTINGS mutations_sync = 2;\n+\n+SELECT * FROM agg_table;\n+\n+DROP TABLE IF EXISTS agg_table;\n",
  "problem_statement": "Crash when updating tuples?\n**Describe the bug**\r\n\r\nI have a table like\r\n\r\n```\r\nCREATE TABLE IF NOT EXISTS xxx\r\n(\r\n    time DateTime CODEC(DoubleDelta, LZ4),\r\n\r\n    xxx String,\r\n    total SimpleAggregateFunction(sum, UInt64) CODEC(T64, LZ4),\r\n\r\n    agg1 SimpleAggregateFunction(sumMap, Tuple(Array(Int16), Array(UInt64))),\r\n    agg2 SimpleAggregateFunction(sumMap, Tuple(Array(Int16), Array(UInt64))),\r\n...\r\n) ENGINE = AggregatingMergeTree()\r\norder by (xxx, time)\r\n```\r\n\r\nI realized i double-inserted data into it so want to halve the counts. Already did for the total column, now doing for the `aggX` columns:\r\n\r\n```\r\nalter table xxx update agg1 = (agg1.1, arrayMap(x -> toUInt64(x / 2), agg1.2)), same for agg2 etc\r\nwhere time BETWEEN xxx AND yyy;\r\n```\r\n\r\nCrashes the server straight away (I am using your docker image):\r\n\r\n```\r\n[clickhouse] 2020.12.22 10:00:03.914392 [ 1352057 ] <Fatal> BaseDaemon: ########################################\r\n[clickhouse] 2020.12.22 10:00:03.940787 [ 1352057 ] <Fatal> BaseDaemon: (version 20.11.3.3 (official build), build id: C88CD350740ED614) (from thread 1349936) (query_id: 70ca4e69-7cb9-453e-b26d-95bc3d59dc54) Received signal Segmentation fault (11)\r\n[clickhouse] 2020.12.22 10:00:03.940881 [ 1352057 ] <Fatal> BaseDaemon: Address: 0x52080d8 Access: write. Attempted access has violated the permissions assigned to the memory area.\r\n[clickhouse] 2020.12.22 10:00:03.940927 [ 1352057 ] <Fatal> BaseDaemon: Stack trace: 0x7c8e078 0xb4ec8d5 0xb4089dd 0xb40fd73 0xb40b46a 0x91e211a 0x91e1aee 0x920d946 0x920e001 0xd93f141 0xd94331d 0xe4f9ac1 0xdb7f94f 0xdb805be 0xd903000 0xdc8c7da 0xdc8b3ad 0xe305ad6 0xe311fa7 0x10a96cdf 0x10a986ee 0x10bc58d9 0x10bc186a 0x7f2029af2609 0x7f2029a08293\r\n[clickhouse] 2020.12.22 10:00:03.941022 [ 1352057 ] <Fatal> BaseDaemon: 2. void DB::PODArrayBase<8ul, 4096ul, Allocator<false, false>, 15ul, 16ul>::resize<>(unsigned long) @ 0x7c8e078 in /usr/bin/clickhouse\r\n[clickhouse] 2020.12.22 10:00:03.941061 [ 1352057 ] <Fatal> BaseDaemon: 3. ? @ 0xb4ec8d5 in /usr/bin/clickhouse\r\n[clickhouse] 2020.12.22 10:00:03.941080 [ 1352057 ] <Fatal> BaseDaemon: 4. ? @ 0xb4089dd in /usr/bin/clickhouse\r\n[clickhouse] 2020.12.22 10:00:03.941111 [ 1352057 ] <Fatal> BaseDaemon: 5. ? @ 0xb40fd73 in /usr/bin/clickhouse\r\n[clickhouse] 2020.12.22 10:00:03.941141 [ 1352057 ] <Fatal> BaseDaemon: 6. ? @ 0xb40b46a in /usr/bin/clickhouse\r\n[clickhouse] 2020.12.22 10:00:03.941193 [ 1352057 ] <Fatal> BaseDaemon: 7. DB::IFunction::executeImplDryRun(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> >&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x91e211a in /usr/bin/clickhouse\r\n[clickhouse] 2020.12.22 10:00:03.941246 [ 1352057 ] <Fatal> BaseDaemon: 8. DB::DefaultExecutable::executeDryRun(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> >&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long) @ 0x91e1aee in /usr/bin/clickhouse\r\n[clickhouse] 2020.12.22 10:00:03.941273 [ 1352057 ] <Fatal> BaseDaemon: 9. DB::ExecutableFunctionAdaptor::executeWithoutLowCardinalityColumns(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> >&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) @ 0x920d946 in /usr/bin/clickhouse\r\n[clickhouse] 2020.12.22 10:00:03.941306 [ 1352057 ] <Fatal> BaseDaemon: 10. DB::ExecutableFunctionAdaptor::execute(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> >&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) @ 0x920e001 in /usr/bin/clickhouse\r\n[clickhouse] 2020.12.22 10:00:03.941342 [ 1352057 ] <Fatal> BaseDaemon: 11. DB::ExpressionAction::execute(DB::Block&, bool) const @ 0xd93f141 in /usr/bin/clickhouse\r\n[clickhouse] 2020.12.22 10:00:03.941383 [ 1352057 ] <Fatal> BaseDaemon: 12. DB::ExpressionActions::execute(DB::Block&, bool) const @ 0xd94331d in /usr/bin/clickhouse\r\n[clickhouse] 2020.12.22 10:00:03.942002 [ 1352057 ] <Fatal> BaseDaemon: 13. DB::ExpressionStep::ExpressionStep(DB::DataStream const&, std::__1::shared_ptr<DB::ExpressionActions>) @ 0xe4f9ac1 in /usr/bin/clickhouse\r\n[clickhouse] 2020.12.22 10:00:03.942052 [ 1352057 ] <Fatal> BaseDaemon: 14. DB::MutationsInterpreter::addStreamsForLaterStages(std::__1::vector<DB::MutationsInterpreter::Stage, std::__1::allocator<DB::MutationsInterpreter::Stage> > const&, DB::QueryPlan&) const @ 0xdb7f94f in /usr/bin/clickhouse\r\n[clickhouse] 2020.12.22 10:00:03.942088 [ 1352057 ] <Fatal> BaseDaemon: 15. DB::MutationsInterpreter::validate() @ 0xdb805be in /usr/bin/clickhouse\r\n[clickhouse] 2020.12.22 10:00:03.942804 [ 1352057 ] <Fatal> BaseDaemon: 16. DB::InterpreterAlterQuery::execute() @ 0xd903000 in /usr/bin/clickhouse\r\n[clickhouse] 2020.12.22 10:00:03.942855 [ 1352057 ] <Fatal> BaseDaemon: 17. ? @ 0xdc8c7da in /usr/bin/clickhouse\r\n[clickhouse] 2020.12.22 10:00:03.942894 [ 1352057 ] <Fatal> BaseDaemon: 18. DB::executeQuery(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, DB::Context&, bool, DB::QueryProcessingStage::Enum, bool) @ 0xdc8b3ad in /usr/bin/clickhouse\r\n[clickhouse] 2020.12.22 10:00:03.942916 [ 1352057 ] <Fatal> BaseDaemon: 19. DB::TCPHandler::runImpl() @ 0xe305ad6 in /usr/bin/clickhouse\r\n[clickhouse] 2020.12.22 10:00:03.942948 [ 1352057 ] <Fatal> BaseDaemon: 20. DB::TCPHandler::run() @ 0xe311fa7 in /usr/bin/clickhouse\r\n[clickhouse] 2020.12.22 10:00:03.942982 [ 1352057 ] <Fatal> BaseDaemon: 21. Poco::Net::TCPServerConnection::start() @ 0x10a96cdf in /usr/bin/clickhouse\r\n[clickhouse] 2020.12.22 10:00:03.943013 [ 1352057 ] <Fatal> BaseDaemon: 22. Poco::Net::TCPServerDispatcher::run() @ 0x10a986ee in /usr/bin/clickhouse\r\n[clickhouse] 2020.12.22 10:00:03.943044 [ 1352057 ] <Fatal> BaseDaemon: 23. Poco::PooledThread::run() @ 0x10bc58d9 in /usr/bin/clickhouse\r\n[clickhouse] 2020.12.22 10:00:03.943072 [ 1352057 ] <Fatal> BaseDaemon: 24. Poco::ThreadImpl::runnableEntry(void*) @ 0x10bc186a in /usr/bin/clickhouse\r\n[clickhouse] 2020.12.22 10:00:03.943142 [ 1352057 ] <Fatal> BaseDaemon: 25. start_thread @ 0x9609 in /usr/lib/x86_64-linux-gnu/libpthread-2.31.so\r\n[clickhouse] 2020.12.22 10:00:03.943181 [ 1352057 ] <Fatal> BaseDaemon: 26. clone @ 0x122293 in /usr/lib/x86_64-linux-gnu/libc-2.31.so\r\n```\r\n\n",
  "hints_text": "",
  "created_at": "2021-02-05T19:42:54Z",
  "modified_files": [
    "src/Functions/if.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/01701_if_tuple_segfault.reference",
    "b/tests/queries/0_stateless/01701_if_tuple_segfault.sql"
  ]
}