{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 11579,
  "instance_id": "ClickHouse__ClickHouse-11579",
  "issue_numbers": [
    "11490"
  ],
  "base_commit": "ba92f96a74404bc02d5455943ee45c40c0907e7c",
  "patch": "diff --git a/src/Databases/DatabaseMemory.cpp b/src/Databases/DatabaseMemory.cpp\nindex 52b1f8899435..cd5591721976 100644\n--- a/src/Databases/DatabaseMemory.cpp\n+++ b/src/Databases/DatabaseMemory.cpp\n@@ -68,7 +68,7 @@ ASTPtr DatabaseMemory::getCreateTableQueryImpl(const String & table_name, const\n {\n     std::lock_guard lock{mutex};\n     auto it = create_queries.find(table_name);\n-    if (it == create_queries.end())\n+    if (it == create_queries.end() || !it->second)\n     {\n         if (throw_on_error)\n             throw Exception(\"There is no metadata of table \" + table_name + \" in database \" + database_name, ErrorCodes::UNKNOWN_TABLE);\ndiff --git a/src/Interpreters/InterpreterShowCreateQuery.cpp b/src/Interpreters/InterpreterShowCreateQuery.cpp\nindex 30005c7b1694..b14baaafbb92 100644\n--- a/src/Interpreters/InterpreterShowCreateQuery.cpp\n+++ b/src/Interpreters/InterpreterShowCreateQuery.cpp\n@@ -69,7 +69,7 @@ BlockInputStreamPtr InterpreterShowCreateQuery::executeImpl()\n         create_query = DatabaseCatalog::instance().getDatabase(show_query->database)->getCreateDictionaryQuery(show_query->table);\n     }\n \n-    if (!create_query && show_query && show_query->temporary)\n+    if (!create_query)\n         throw Exception(\"Unable to show the create query of \" + show_query->table + \". Maybe it was created by the system.\", ErrorCodes::THERE_IS_NO_QUERY);\n \n     if (!context.getSettingsRef().show_table_uuid_in_table_create_query_if_not_nil)\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01098_temporary_and_external_tables.sh b/tests/queries/0_stateless/01098_temporary_and_external_tables.sh\nindex c984f363c316..b671019ca355 100755\n--- a/tests/queries/0_stateless/01098_temporary_and_external_tables.sh\n+++ b/tests/queries/0_stateless/01098_temporary_and_external_tables.sh\n@@ -3,7 +3,8 @@\n CURDIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n . $CURDIR/../shell_config.sh\n \n-url=\"https://${CLICKHOUSE_HOST}:${CLICKHOUSE_PORT_HTTPS}/?session_id=test_01098\"\n+url_without_session=\"https://${CLICKHOUSE_HOST}:${CLICKHOUSE_PORT_HTTPS}/?\"\n+url=\"${url_without_session}session_id=test_01098\"\n \n ${CLICKHOUSE_CURL} -m 30 -sSk \"$url\" --data \"CREATE TEMPORARY TABLE tmp_table AS SELECT number AS n FROM numbers(42)\" > /dev/null;\n \n@@ -14,3 +15,11 @@ echo \"SELECT * FROM $full_tmp_name\" | ${CLICKHOUSE_CURL} -m 60 -sSgk $url -d @-\n \n echo -ne '0\\n1\\n' | ${CLICKHOUSE_CURL} -m 30 -sSkF 'file=@-' \"$url&file_format=CSV&file_types=UInt64&query=SELECT+sum((number+GLOBAL+IN+(SELECT+number+AS+n+FROM+remote('127.0.0.2',+numbers(5))+WHERE+n+GLOBAL+IN+(SELECT+*+FROM+tmp_table)+AND+n+GLOBAL+NOT+IN+(SELECT+*+FROM+file)+))+AS+res),+sum(number*res)+FROM+remote('127.0.0.2',+numbers(10))\";\n \n+echo -ne '0\\n1\\n' | ${CLICKHOUSE_CURL} -m 30 -sSkF 'file=@-' \"$url&file_format=CSV&file_types=UInt64&query=SELECT+sleepEachRow(3)+FROM+file\" > /dev/null &\n+sleep 1\n+full_tmp_names=`echo \"SELECT $name_expr FROM system.tables WHERE database='_temporary_and_external_tables' FORMAT TSV\" | ${CLICKHOUSE_CURL} -m 30 -sSgk $url_without_session -d @-`\n+for name in $full_tmp_names\n+do\n+  ${CLICKHOUSE_CURL} -m 30 -sSk \"${url_without_session}query=SHOW+CREATE+TABLE+$name\" 1>/dev/null 2>/dev/null\n+done;\n+wait\n",
  "problem_statement": "20.4 Segmentation fault during SHOW CREATE TABLE\nDescribe the bug\r\nDuring ALTER ON CLUSTER segmentation fault may occur.\r\n\r\nClickHouse server version 20.4.4.18\r\nError message and/or stacktrace\r\n```\r\n2020.06.07 11:17:48.939477 [ 667 ] {} <Fatal> BaseDaemon: ########################################\r\n2020.06.07 11:17:48.939614 [ 667 ] {} <Fatal> BaseDaemon: (version 20.4.4.18 (official build)) (from thread 544) (query_id: 3a55e895-0716-4503-8baa-788ce119e7b8) Received signal Segmentation fault (11).\r\n2020.06.07 11:17:48.939646 [ 667 ] {} <Fatal> BaseDaemon: Address: NULL pointer. Access: read. Address not mapped to object.\r\n2020.06.07 11:17:48.939674 [ 667 ] {} <Fatal> BaseDaemon: Stack trace: 0xdf541b9 0xd419b0c 0xd41b393 0xd5499f9 0xd54d430 0x90e47fc 0x90e8256 0x102c9b83 0x10304f4b 0x103053db 0x104b2fa6 0x104ae260 0x7f88949026db 0x7f8894fd988f\r\n2020.06.07 11:17:48.939771 [ 667 ] {} <Fatal> BaseDaemon: 3. DB::formatAST(DB::IAST const&, std::__1::basic_ostream<char, std::__1::char_traits<char> >&, bool, bool) @ 0xdf541b9 in /usr/bin/clickhouse\r\n2020.06.07 11:17:48.939798 [ 667 ] {} <Fatal> BaseDaemon: 4. DB::InterpreterShowCreateQuery::executeImpl() @ 0xd419b0c in /usr/bin/clickhouse\r\n2020.06.07 11:17:48.939820 [ 667 ] {} <Fatal> BaseDaemon: 5. DB::InterpreterShowCreateQuery::execute() @ 0xd41b393 in /usr/bin/clickhouse\r\n2020.06.07 11:17:48.939841 [ 667 ] {} <Fatal> BaseDaemon: 6. ? @ 0xd5499f9 in /usr/bin/clickhouse\r\n2020.06.07 11:17:48.939878 [ 667 ] {} <Fatal> BaseDaemon: 7. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, DB::Context&, std::__1::function<void (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>) @ 0xd54d430 in /usr/bin/clickhouse\r\n2020.06.07 11:17:48.939921 [ 667 ] {} <Fatal> BaseDaemon: 8. DB::HTTPHandler::processQuery(Poco::Net::HTTPServerRequest&, HTMLForm&, Poco::Net::HTTPServerResponse&, DB::HTTPHandler::Output&) @ 0x90e47fc in /usr/bin/clickhouse\r\n2020.06.07 11:17:48.939963 [ 667 ] {} <Fatal> BaseDaemon: 9. DB::HTTPHandler::handleRequest(Poco::Net::HTTPServerRequest&, Poco::Net::HTTPServerResponse&) @ 0x90e8256 in /usr/bin/clickhouse\r\n2020.06.07 11:17:48.940008 [ 667 ] {} <Fatal> BaseDaemon: 10. Poco::Net::HTTPServerConnection::run() @ 0x102c9b83 in /usr/bin/clickhouse\r\n2020.06.07 11:17:48.941808 [ 667 ] {} <Fatal> BaseDaemon: 11. Poco::Net::TCPServerConnection::start() @ 0x10304f4b in /usr/bin/clickhouse\r\n2020.06.07 11:17:48.941898 [ 667 ] {} <Fatal> BaseDaemon: 12. Poco::Net::TCPServerDispatcher::run() @ 0x103053db in /usr/bin/clickhouse\r\n2020.06.07 11:17:48.941929 [ 667 ] {} <Fatal> BaseDaemon: 13. Poco::PooledThread::run() @ 0x104b2fa6 in /usr/bin/clickhouse\r\n2020.06.07 11:17:48.941954 [ 667 ] {} <Fatal> BaseDaemon: 14. Poco::ThreadImpl::runnableEntry(void*) @ 0x104ae260 in /usr/bin/clickhouse\r\n2020.06.07 11:17:48.941988 [ 667 ] {} <Fatal> BaseDaemon: 15. start_thread @ 0x76db in /lib/x86_64-linux-gnu/libpthread-2.27.so\r\n2020.06.07 11:17:48.942027 [ 667 ] {} <Fatal> BaseDaemon: 16. clone @ 0x12188f in /lib/x86_64-linux-gnu/libc-2.27.so\r\n```\n",
  "hints_text": "Thank you for your report. Can you provide query with id `3a55e895-0716-4503-8baa-788ce119e7b8`? You can just `grep '3a55e895-0716-4503-8baa-788ce119e7b8' /var/log/clickhouse-server/clickhouse-server.log` or select it from `system.query_log`: `select query from system.query_log where query_id='3a55e895-0716-4503-8baa-788ce119e7b8'`.\nSorry for misinformation. \r\nAccording log it was not during ALTER query itself, but during auto-introspection after ALTER query.\r\nClient - DataGrip/clickhouse-jdbc 0.2.4.\r\n```\r\n2020.06.07 11:17:48.799301 [ 544 ] {} <Trace> DynamicQueryHandler: Request URI: /?extremes=0&query_id=3a55e895-0716-4503-8baa-788ce119e7b8&database=default&password=******&session_id=DataGrip_4177231a-0a62-43c0-bb57-70461b5ebb15&compress=1          \r\n2020.06.07 11:17:48.799714 [ 544 ] {3a55e895-0716-4503-8baa-788ce119e7b8} <Debug> executeQuery: (from 10.40.20.231:57382) select version() FORMAT TabSeparatedWithNamesAndTypes;                                                                                       \r\n2020.06.07 11:17:48.799926 [ 544 ] {3a55e895-0716-4503-8baa-788ce119e7b8} <Trace> ContextAccess (default): Access granted: SELECT(dummy) ON system.one                                                                                                                 \r\n2020.06.07 11:17:48.799979 [ 544 ] {3a55e895-0716-4503-8baa-788ce119e7b8} <Trace> InterpreterSelectQuery: FetchColumns -> Complete                                                                                                                                     \r\n2020.06.07 11:17:48.800053 [ 544 ] {3a55e895-0716-4503-8baa-788ce119e7b8} <Debug> executeQuery: Query pipeline:                                                                                                                                                        \r\n2020.06.07 11:17:48.800160 [ 544 ] {3a55e895-0716-4503-8baa-788ce119e7b8} <Information> executeQuery: Read 1 rows, 1.00 B in 0.000 sec., 2588 rows/sec., 2.53 KiB/sec.                                                                                                 \r\n2020.06.07 11:17:48.800301 [ 544 ] {3a55e895-0716-4503-8baa-788ce119e7b8} <Debug> MemoryTracker: Peak memory usage (for query): 4.01 MiB.                                                                                                                              \r\n2020.06.07 11:17:48.807693 [ 544 ] {3a55e895-0716-4503-8baa-788ce119e7b8} <Debug> executeQuery: (from 10.40.20.231:57382) select version() FORMAT TabSeparatedWithNamesAndTypes;                                                                                       \r\n2020.06.07 11:17:48.807890 [ 544 ] {3a55e895-0716-4503-8baa-788ce119e7b8} <Trace> ContextAccess (default): Access granted: SELECT(dummy) ON system.one                                                                                                                 \r\n2020.06.07 11:17:48.807962 [ 544 ] {3a55e895-0716-4503-8baa-788ce119e7b8} <Trace> InterpreterSelectQuery: FetchColumns -> Complete                                                                                                                                     \r\n2020.06.07 11:17:48.808041 [ 544 ] {3a55e895-0716-4503-8baa-788ce119e7b8} <Debug> executeQuery: Query pipeline:                                                                                                                                                        \r\n2020.06.07 11:17:48.808142 [ 544 ] {3a55e895-0716-4503-8baa-788ce119e7b8} <Information> executeQuery: Read 1 rows, 1.00 B in 0.000 sec., 2518 rows/sec., 2.46 KiB/sec.                                                                                                 \r\n2020.06.07 11:17:48.808266 [ 544 ] {3a55e895-0716-4503-8baa-788ce119e7b8} <Debug> MemoryTracker: Peak memory usage (for query): 4.00 MiB.                                                                                                                              \r\n2020.06.07 11:17:48.826814 [ 625 ] {3a55e895-0716-4503-8baa-788ce119e7b8} <Debug> executeQuery: (from 10.40.20.231:57382) SELECT 1 FORMAT TabSeparatedWithNamesAndTypes;\r\n2020.06.07 11:17:48.827016 [ 625 ] {3a55e895-0716-4503-8baa-788ce119e7b8} <Trace> ContextAccess (default): Access granted: SELECT(dummy) ON system.one\r\n2020.06.07 11:17:48.827083 [ 625 ] {3a55e895-0716-4503-8baa-788ce119e7b8} <Trace> InterpreterSelectQuery: FetchColumns -> Complete\r\n2020.06.07 11:17:48.827139 [ 625 ] {3a55e895-0716-4503-8baa-788ce119e7b8} <Debug> executeQuery: Query pipeline:\r\n2020.06.07 11:17:48.827246 [ 625 ] {3a55e895-0716-4503-8baa-788ce119e7b8} <Information> executeQuery: Read 1 rows, 1.00 B in 0.000 sec., 2626 rows/sec., 2.56 KiB/sec.\r\n2020.06.07 11:17:48.827357 [ 625 ] {3a55e895-0716-4503-8baa-788ce119e7b8} <Debug> MemoryTracker: Peak memory usage (for query): 4.00 MiB.\r\n2020.06.07 11:17:48.836345 [ 544 ] {3a55e895-0716-4503-8baa-788ce119e7b8} <Debug> executeQuery: (from 10.40.20.231:57382) select currentDatabase() FORMAT TabSeparatedWithNamesAndTypes;\r\n2020.06.07 11:17:48.836556 [ 544 ] {3a55e895-0716-4503-8baa-788ce119e7b8} <Trace> ContextAccess (default): Access granted: SELECT(dummy) ON system.one\r\n2020.06.07 11:17:48.836624 [ 544 ] {3a55e895-0716-4503-8baa-788ce119e7b8} <Trace> InterpreterSelectQuery: FetchColumns -> Complete\r\n2020.06.07 11:17:48.836686 [ 544 ] {3a55e895-0716-4503-8baa-788ce119e7b8} <Debug> executeQuery: Query pipeline:\r\n2020.06.07 11:17:48.836804 [ 544 ] {3a55e895-0716-4503-8baa-788ce119e7b8} <Information> executeQuery: Read 1 rows, 1.00 B in 0.000 sec., 2526 rows/sec., 2.47 KiB/sec.\r\n2020.06.07 11:17:48.836981 [ 544 ] {3a55e895-0716-4503-8baa-788ce119e7b8} <Debug> MemoryTracker: Peak memory usage (for query): 4.00 MiB.\r\n2020.06.07 11:17:48.847214 [ 544 ] {3a55e895-0716-4503-8baa-788ce119e7b8} <Debug> executeQuery: (from 10.40.20.231:57382) select currentDatabase(), version() FORMAT TabSeparatedWithNamesAndTypes;\r\n2020.06.07 11:17:48.847439 [ 544 ] {3a55e895-0716-4503-8baa-788ce119e7b8} <Trace> ContextAccess (default): Access granted: SELECT(dummy) ON system.one\r\n2020.06.07 11:17:48.847492 [ 544 ] {3a55e895-0716-4503-8baa-788ce119e7b8} <Trace> InterpreterSelectQuery: FetchColumns -> Complete\r\n2020.06.07 11:17:48.847545 [ 544 ] {3a55e895-0716-4503-8baa-788ce119e7b8} <Debug> executeQuery: Query pipeline:\r\n2020.06.07 11:17:48.847652 [ 544 ] {3a55e895-0716-4503-8baa-788ce119e7b8} <Information> executeQuery: Read 1 rows, 1.00 B in 0.000 sec., 2636 rows/sec., 2.57 KiB/sec.\r\n2020.06.07 11:17:48.847768 [ 544 ] {3a55e895-0716-4503-8baa-788ce119e7b8} <Debug> MemoryTracker: Peak memory usage (for query): 4.00 MiB.\r\n2020.06.07 11:17:48.857383 [ 544 ] {3a55e895-0716-4503-8baa-788ce119e7b8} <Debug> executeQuery: (from 10.40.20.231:57382) select name from system.databases order by name != currentDatabase() FORMAT TabSeparatedWithNamesAndTypes;\r\n2020.06.07 11:17:48.857658 [ 544 ] {3a55e895-0716-4503-8baa-788ce119e7b8} <Trace> ContextAccess (default): Access granted: SELECT(name) ON system.databases\r\n2020.06.07 11:17:48.857709 [ 544 ] {3a55e895-0716-4503-8baa-788ce119e7b8} <Trace> ContextAccess (default): Access granted: SHOW DATABASES ON *.*\r\n2020.06.07 11:17:48.857848 [ 544 ] {3a55e895-0716-4503-8baa-788ce119e7b8} <Trace> InterpreterSelectQuery: FetchColumns -> Complete\r\n2020.06.07 11:17:48.858034 [ 544 ] {3a55e895-0716-4503-8baa-788ce119e7b8} <Debug> executeQuery: Query pipeline:\r\n2020.06.07 11:17:48.858202 [ 544 ] {3a55e895-0716-4503-8baa-788ce119e7b8} <Information> executeQuery: Read 39 rows, 4.90 KiB in 0.001 sec., 51096 rows/sec., 6.27 MiB/sec.\r\n2020.06.07 11:17:48.858333 [ 544 ] {3a55e895-0716-4503-8baa-788ce119e7b8} <Debug> MemoryTracker: Peak memory usage (for query): 4.00 MiB.\r\n2020.06.07 11:17:48.871400 [ 544 ] {3a55e895-0716-4503-8baa-788ce119e7b8} <Debug> executeQuery: (from 10.40.20.231:57382) select name, is_aggregate from system.functions FORMAT TabSeparatedWithNamesAndTypes;\r\n2020.06.07 11:17:48.871606 [ 544 ] {3a55e895-0716-4503-8baa-788ce119e7b8} <Trace> ContextAccess (default): Access granted: SELECT(name, is_aggregate) ON system.functions\r\n2020.06.07 11:17:48.872090 [ 544 ] {3a55e895-0716-4503-8baa-788ce119e7b8} <Trace> InterpreterSelectQuery: FetchColumns -> Complete\r\n2020.06.07 11:17:48.872150 [ 544 ] {3a55e895-0716-4503-8baa-788ce119e7b8} <Debug> executeQuery: Query pipeline:\r\n2020.06.07 11:17:48.872372 [ 544 ] {3a55e895-0716-4503-8baa-788ce119e7b8} <Information> executeQuery: Read 760 rows, 24.68 KiB in 0.001 sec., 829067 rows/sec., 26.29 MiB/sec.\r\n2020.06.07 11:17:48.872504 [ 544 ] {3a55e895-0716-4503-8baa-788ce119e7b8} <Debug> MemoryTracker: Peak memory usage (for query): 4.00 MiB.\r\n2020.06.07 11:17:48.887057 [ 544 ] {3a55e895-0716-4503-8baa-788ce119e7b8} <Debug> executeQuery: (from 10.40.20.231:57382) select name from system.databases order by name != currentDatabase() FORMAT TabSeparatedWithNamesAndTypes;\r\n2020.06.07 11:17:48.887326 [ 544 ] {3a55e895-0716-4503-8baa-788ce119e7b8} <Trace> ContextAccess (default): Access granted: SELECT(name) ON system.databases\r\n2020.06.07 11:17:48.887374 [ 544 ] {3a55e895-0716-4503-8baa-788ce119e7b8} <Trace> ContextAccess (default): Access granted: SHOW DATABASES ON *.*\r\n2020.06.07 11:17:48.887474 [ 544 ] {3a55e895-0716-4503-8baa-788ce119e7b8} <Trace> InterpreterSelectQuery: FetchColumns -> Complete\r\n2020.06.07 11:17:48.887557 [ 544 ] {3a55e895-0716-4503-8baa-788ce119e7b8} <Debug> executeQuery: Query pipeline:\r\n2020.06.07 11:17:48.887711 [ 544 ] {3a55e895-0716-4503-8baa-788ce119e7b8} <Information> executeQuery: Read 39 rows, 4.90 KiB in 0.001 sec., 64944 rows/sec., 7.97 MiB/sec.\r\n2020.06.07 11:17:48.887839 [ 544 ] {3a55e895-0716-4503-8baa-788ce119e7b8} <Debug> MemoryTracker: Peak memory usage (for query): 4.00 MiB.\r\n2020.06.07 11:17:48.900149 [ 544 ] {3a55e895-0716-4503-8baa-788ce119e7b8} <Debug> executeQuery: (from 10.40.20.231:57382) select name, engine,  is_temporary         from system.tables         where database = '_temporary_and_external_tables' FORMAT TabSeparatedWithNamesAndTypes;\r\n2020.06.07 11:17:48.900521 [ 544 ] {3a55e895-0716-4503-8baa-788ce119e7b8} <Trace> ContextAccess (default): Access granted: SELECT(database, name, engine, is_temporary) ON system.tables\r\n2020.06.07 11:17:48.900696 [ 544 ] {3a55e895-0716-4503-8baa-788ce119e7b8} <Trace> InterpreterSelectQuery: FetchColumns -> Complete\r\n2020.06.07 11:17:48.900767 [ 544 ] {3a55e895-0716-4503-8baa-788ce119e7b8} <Debug> executeQuery: Query pipeline:\r\n2020.06.07 11:17:48.900828 [ 544 ] {3a55e895-0716-4503-8baa-788ce119e7b8} <Trace> ContextAccess (default): Access granted: SHOW TABLES ON *.*\r\n2020.06.07 11:17:48.900948 [ 544 ] {3a55e895-0716-4503-8baa-788ce119e7b8} <Information> executeQuery: Read 2 rows, 210.00 B in 0.001 sec., 2710 rows/sec., 277.95 KiB/sec.\r\n2020.06.07 11:17:48.901109 [ 544 ] {3a55e895-0716-4503-8baa-788ce119e7b8} <Debug> MemoryTracker: Peak memory usage (for query): 4.00 MiB.\r\n2020.06.07 11:17:48.911265 [ 544 ] {3a55e895-0716-4503-8baa-788ce119e7b8} <Debug> executeQuery: (from 10.40.20.231:57382) select table, name, type, default_kind, default_expression           from system.columns           where database = '_temporary_and_external_tables' FORMAT TabSeparatedWithNamesAndTypes;\r\n2020.06.07 11:17:48.911699 [ 544 ] {3a55e895-0716-4503-8baa-788ce119e7b8} <Trace> ContextAccess (default): Access granted: SELECT(database, table, name, type, default_kind, default_expression) ON system.columns\r\n2020.06.07 11:17:48.911915 [ 544 ] {3a55e895-0716-4503-8baa-788ce119e7b8} <Trace> InterpreterSelectQuery: FetchColumns -> Complete\r\n2020.06.07 11:17:48.912011 [ 544 ] {3a55e895-0716-4503-8baa-788ce119e7b8} <Debug> executeQuery: Query pipeline:\r\n2020.06.07 11:17:48.912080 [ 544 ] {3a55e895-0716-4503-8baa-788ce119e7b8} <Trace> ContextAccess (default): Access granted: SHOW COLUMNS ON *.*\r\n2020.06.07 11:17:48.912195 [ 544 ] {3a55e895-0716-4503-8baa-788ce119e7b8} <Information> executeQuery: Read 2 rows, 285.00 B in 0.001 sec., 2295 rows/sec., 319.41 KiB/sec.\r\n2020.06.07 11:17:48.912322 [ 544 ] {3a55e895-0716-4503-8baa-788ce119e7b8} <Debug> MemoryTracker: Peak memory usage (for query): 4.00 MiB.\r\n2020.06.07 11:17:48.922569 [ 544 ] {3a55e895-0716-4503-8baa-788ce119e7b8} <Debug> executeQuery: (from 10.40.20.231:57382) show create table `_temporary_and_external_tables`.`_tmp_cd3447c1-c3fb-4b89-a5f1-4f70f46cbea6` FORMAT TabSeparatedWithNamesAndTypes;\r\n2020.06.07 11:17:48.922638 [ 544 ] {3a55e895-0716-4503-8baa-788ce119e7b8} <Trace> ContextAccess (default): Access granted: SHOW COLUMNS ON _temporary_and_external_tables.`_tmp_cd3447c1-c3fb-4b89-a5f1-4f70f46cbea6`\r\n2020.06.07 11:17:48.939614 [ 667 ] {} <Fatal> BaseDaemon: (version 20.4.4.18 (official build)) (from thread 544) (query_id: 3a55e895-0716-4503-8baa-788ce119e7b8) Received signal Segmentation fault (11).\r\n```",
  "created_at": "2020-06-10T14:35:05Z",
  "modified_files": [
    "src/Databases/DatabaseMemory.cpp",
    "src/Interpreters/InterpreterShowCreateQuery.cpp"
  ],
  "modified_test_files": [
    "tests/queries/0_stateless/01098_temporary_and_external_tables.sh"
  ]
}