diff --git a/dbms/src/Interpreters/InterpreterCreateQuery.cpp b/dbms/src/Interpreters/InterpreterCreateQuery.cpp
index b17ba8dd66f4..80536a76a157 100644
--- a/dbms/src/Interpreters/InterpreterCreateQuery.cpp
+++ b/dbms/src/Interpreters/InterpreterCreateQuery.cpp
@@ -445,8 +445,20 @@ String InterpreterCreateQuery::setEngine(
         String as_database_name = create.as_database.empty() ? context.getCurrentDatabase() : create.as_database;
         String as_table_name = create.as_table;
 
-        storage_name = as_storage->getName();
-        create.storage = typeid_cast<const ASTCreateQuery &>(*context.getCreateQuery(as_database_name, as_table_name)).storage;
+        auto as_create_ptr = context.getCreateQuery(as_database_name, as_table_name);
+        auto & as_create = typeid_cast<const ASTCreateQuery &>(*as_create_ptr);
+
+        if (!create.storage)
+        {
+            if (as_create.is_view || as_create.is_materialized_view)
+                create.storage = as_create.inner_storage;
+            else
+                create.storage = as_create.storage;
+
+            storage_name = typeid_cast<const ASTFunction &>(*create.storage).name;
+        }
+        else
+            storage_name = as_storage->getName();
     }
     else if (create.is_temporary)
         set_engine("Memory");
diff --git a/dbms/src/Parsers/ParserCreateQuery.cpp b/dbms/src/Parsers/ParserCreateQuery.cpp
index f4f939ff01ee..25037bd67b92 100644
--- a/dbms/src/Parsers/ParserCreateQuery.cpp
+++ b/dbms/src/Parsers/ParserCreateQuery.cpp
@@ -323,12 +323,10 @@ bool ParserCreateQuery::parseImpl(Pos & pos, ASTPtr & node, Expected & expected)
         /// AS SELECT ...
         if (!s_as.ignore(pos, expected))
             return false;
-        Pos before_select = pos;
-        if (!s_select.ignore(pos, expected))
-            return false;
-        pos = before_select;
+
         ParserSelectQuery select_p;
-        select_p.parse(pos, select, expected);
+        if (!select_p.parse(pos, select, expected))
+            return false;
     }
 
     auto query = std::make_shared<ASTCreateQuery>(StringRange(begin, pos));
diff --git a/dbms/src/Storages/StorageMaterializedView.cpp b/dbms/src/Storages/StorageMaterializedView.cpp
index ba861f04a066..08429ed5e5a2 100644
--- a/dbms/src/Storages/StorageMaterializedView.cpp
+++ b/dbms/src/Storages/StorageMaterializedView.cpp
@@ -19,6 +19,7 @@ namespace DB
 namespace ErrorCodes
 {
     extern const int LOGICAL_ERROR;
+    extern const int INCORRECT_QUERY;
 }
 
 
@@ -29,7 +30,7 @@ static void extractDependentTable(const ASTSelectQuery & query, String & select_
     if (!query_table)
         return;
 
-    if (const ASTIdentifier * ast_id = typeid_cast<const ASTIdentifier *>(query_table.get()))
+    if (auto ast_id = typeid_cast<const ASTIdentifier *>(query_table.get()))
     {
         auto query_database = query.database();
 
@@ -41,7 +42,7 @@ static void extractDependentTable(const ASTSelectQuery & query, String & select_
         select_database_name = typeid_cast<const ASTIdentifier &>(*query_database).name;
         select_table_name = ast_id->name;
     }
-    else if (const ASTSelectQuery * ast_select = typeid_cast<const ASTSelectQuery *>(query_table.get()))
+    else if (auto ast_select = typeid_cast<const ASTSelectQuery *>(query_table.get()))
     {
         extractDependentTable(*ast_select, select_database_name, select_table_name);
     }
@@ -66,13 +67,18 @@ StorageMaterializedView::StorageMaterializedView(
     database_name(database_name_), context(context_), columns(columns_)
 {
     ASTCreateQuery & create = typeid_cast<ASTCreateQuery &>(*query_);
+
+    if (!create.select)
+        throw Exception("SELECT query is not specified for " + getName(), ErrorCodes::INCORRECT_QUERY);
+
+    if (!create.inner_storage)
+        throw Exception("ENGINE of MaterializedView should be specified explicitly", ErrorCodes::INCORRECT_QUERY);
+
     ASTSelectQuery & select = typeid_cast<ASTSelectQuery &>(*create.select);
 
     /// If the internal query does not specify a database, retrieve it from the context and write it to the query.
     select.setDatabaseIfNeeded(database_name);
 
-    inner_query = create.select;
-
     extractDependentTable(select, select_database_name, select_table_name);
 
     if (!select_table_name.empty())
@@ -80,7 +86,8 @@ StorageMaterializedView::StorageMaterializedView(
             DatabaseAndTableName(select_database_name, select_table_name),
             DatabaseAndTableName(database_name, table_name));
 
-    auto inner_table_name = getInnerTableName();
+    String inner_table_name = getInnerTableName();
+    inner_query = create.select;
 
     /// If there is an ATTACH request, then the internal table must already be connected.
     if (!attach_)
@@ -91,18 +98,7 @@ StorageMaterializedView::StorageMaterializedView(
         manual_create_query->table = inner_table_name;
         manual_create_query->columns = create.columns;
         manual_create_query->children.push_back(manual_create_query->columns);
-
-        /// If you do not specify a storage type in the query, try retrieving it from SELECT query.
-        if (!create.inner_storage)
-        {
-            /// TODO also try to extract `params` to create a table
-            auto func = std::make_shared<ASTFunction>();
-            func->name = context.getTable(select_database_name, select_table_name)->getName();
-            manual_create_query->storage = func;
-        }
-        else
-            manual_create_query->storage = create.inner_storage;
-
+        manual_create_query->storage = create.inner_storage;
         manual_create_query->children.push_back(manual_create_query->storage);
 
         /// Execute the query.
