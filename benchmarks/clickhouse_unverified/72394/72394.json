{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 72394,
  "instance_id": "ClickHouse__ClickHouse-72394",
  "issue_numbers": [
    "71256"
  ],
  "base_commit": "dd092411ffe9da25d190a0089396b4642ee31cdb",
  "patch": "diff --git a/src/Analyzer/Passes/FunctionToSubcolumnsPass.cpp b/src/Analyzer/Passes/FunctionToSubcolumnsPass.cpp\nindex abd0a95c6f24..92dc0301fd69 100644\n--- a/src/Analyzer/Passes/FunctionToSubcolumnsPass.cpp\n+++ b/src/Analyzer/Passes/FunctionToSubcolumnsPass.cpp\n@@ -46,7 +46,7 @@ using NodeToSubcolumnTransformer = std::function<void(QueryTreeNodePtr &, Functi\n \n void optimizeFunctionLength(QueryTreeNodePtr & node, FunctionNode &, ColumnContext & ctx)\n {\n-    /// Replace `length(argument)` with `argument.size0`\n+    /// Replace `length(argument)` with `argument.size0`.\n     /// `argument` may be Array or Map.\n \n     NameAndTypePair column{ctx.column.name + \".size0\", std::make_shared<DataTypeUInt64>()};\n@@ -56,8 +56,8 @@ void optimizeFunctionLength(QueryTreeNodePtr & node, FunctionNode &, ColumnConte\n template <bool positive>\n void optimizeFunctionEmpty(QueryTreeNodePtr &, FunctionNode & function_node, ColumnContext & ctx)\n {\n-    /// Replace `empty(argument)` with `equals(argument.size0, 0)` if positive\n-    /// Replace `notEmpty(argument)` with `notEquals(argument.size0, 0)` if not positive\n+    /// Replace `empty(argument)` with `equals(argument.size0, 0)` if positive.\n+    /// Replace `notEmpty(argument)` with `notEquals(argument.size0, 0)` if not positive.\n     /// `argument` may be Array or Map.\n \n     NameAndTypePair column{ctx.column.name + \".size0\", std::make_shared<DataTypeUInt64>()};\n@@ -136,19 +136,25 @@ std::map<std::pair<TypeIndex, String>, NodeToSubcolumnTransformer> node_transfor\n     },\n     {\n         {TypeIndex::Map, \"mapKeys\"},\n-        [](QueryTreeNodePtr & node, FunctionNode & function_node, ColumnContext & ctx)\n+        [](QueryTreeNodePtr & node, FunctionNode &, ColumnContext & ctx)\n         {\n             /// Replace `mapKeys(map_argument)` with `map_argument.keys`\n-            NameAndTypePair column{ctx.column.name + \".keys\", function_node.getResultType()};\n+            const auto & data_type_map = assert_cast<const DataTypeMap &>(*ctx.column.type);\n+            auto key_type = std::make_shared<DataTypeArray>(data_type_map.getKeyType());\n+\n+            NameAndTypePair column{ctx.column.name + \".keys\", key_type};\n             node = std::make_shared<ColumnNode>(column, ctx.column_source);\n         },\n     },\n     {\n         {TypeIndex::Map, \"mapValues\"},\n-        [](QueryTreeNodePtr & node, FunctionNode & function_node, ColumnContext & ctx)\n+        [](QueryTreeNodePtr & node, FunctionNode &, ColumnContext & ctx)\n         {\n             /// Replace `mapValues(map_argument)` with `map_argument.values`\n-            NameAndTypePair column{ctx.column.name + \".values\", function_node.getResultType()};\n+            const auto & data_type_map = assert_cast<const DataTypeMap &>(*ctx.column.type);\n+            auto value_type = std::make_shared<DataTypeArray>(data_type_map.getValueType());\n+\n+            NameAndTypePair column{ctx.column.name + \".values\", value_type};\n             node = std::make_shared<ColumnNode>(column, ctx.column_source);\n         },\n     },\n@@ -439,11 +445,16 @@ class FunctionToSubcolumnsVisitorSecondPass : public InDepthQueryTreeVisitorWith\n         if (!identifiers_to_optimize.contains(qualified_name))\n             return;\n \n+        auto result_type = function_node->getResultType();\n         auto transformer_it = node_transformers.find({column.type->getTypeId(), function_node->getFunctionName()});\n+\n         if (transformer_it != node_transformers.end())\n         {\n             ColumnContext ctx{std::move(column), first_argument_column_node->getColumnSource(), getContext()};\n             transformer_it->second(node, *function_node, ctx);\n+\n+            if (!result_type->equals(*node->getResultType()))\n+                node = buildCastFunction(node, result_type, getContext());\n         }\n     }\n };\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03276_functions_to_subcolumns_lc.reference b/tests/queries/0_stateless/03276_functions_to_subcolumns_lc.reference\nnew file mode 100644\nindex 000000000000..3bc835eaeac0\n--- /dev/null\n+++ b/tests/queries/0_stateless/03276_functions_to_subcolumns_lc.reference\n@@ -0,0 +1,1 @@\n+['foo']\t['bar']\ndiff --git a/tests/queries/0_stateless/03276_functions_to_subcolumns_lc.sql b/tests/queries/0_stateless/03276_functions_to_subcolumns_lc.sql\nnew file mode 100644\nindex 000000000000..b3b8c1a79f8d\n--- /dev/null\n+++ b/tests/queries/0_stateless/03276_functions_to_subcolumns_lc.sql\n@@ -0,0 +1,14 @@\n+DROP TABLE IF EXISTS t_map_lc;\n+\n+CREATE TABLE t_map_lc\n+(\n+    kv Map(LowCardinality(String), LowCardinality(String)),\n+    k Array(LowCardinality(String)) ALIAS mapKeys(kv),\n+    v Array(LowCardinality(String)) ALIAS mapValues(kv)\n+) ENGINE = Memory;\n+\n+INSERT INTO t_map_lc VALUES (map('foo', 'bar'));\n+\n+SELECT k, v FROM t_map_lc SETTINGS optimize_functions_to_subcolumns=1;\n+\n+DROP TABLE t_map_lc;\n",
  "problem_statement": "optimize_functions_to_subcolumns can break queries\nComes from https://github.com/ClickHouse/ClickHouse/pull/70716, which I [reverted](https://github.com/ClickHouse/ClickHouse/pull/71220) because the fix introduced a breaking change and its impact was not studied.\r\n\r\n```\r\ndrop table if exists x;\r\ncreate table x\r\n(\r\n    kv Map(LowCardinality(String), LowCardinality(String)),\r\n    k Array(LowCardinality(String)) alias mapKeys(kv),\r\n    v Array(LowCardinality(String)) alias mapValues(kv)\r\n) engine=Memory();\r\ninsert into x values (map('foo', 'bar'));\r\nselect k, v from x settings optimize_functions_to_subcolumns=1;\r\n```\r\n\r\nThe problem is that we change `mapKeys(kv)` to `kv.keys` but only returns Array(String) and the other Array(LowCardinality(String))`. We should not apply analyzer passes that change types, as this leads to errors as the one produced in the query above.\n",
  "hints_text": "",
  "created_at": "2024-11-25T14:20:59Z",
  "modified_files": [
    "src/Analyzer/Passes/FunctionToSubcolumnsPass.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/03276_functions_to_subcolumns_lc.reference",
    "b/tests/queries/0_stateless/03276_functions_to_subcolumns_lc.sql"
  ]
}