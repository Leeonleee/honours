diff --git a/base/base/BFloat16.h b/base/base/BFloat16.h
index 266f125da7ce..befdf8546c25 100644
--- a/base/base/BFloat16.h
+++ b/base/base/BFloat16.h
@@ -48,6 +48,13 @@ class BFloat16
     {
     }
 
+    static constexpr BFloat16 fromBits(UInt16 bits) noexcept
+    {
+        BFloat16 res;
+        res.x = bits;
+        return res;
+    }
+
     template <typename T>
     constexpr BFloat16 & operator=(const T & other)
     {
@@ -312,3 +319,16 @@ constexpr inline auto operator/(BFloat16 a, T b)
 {
     return Float32(a) / b;
 }
+
+namespace std
+{
+template <>
+class numeric_limits<BFloat16>
+{
+public:
+    static constexpr BFloat16 lowest() noexcept { return BFloat16::fromBits(0b1111111101111111); }
+    static constexpr BFloat16 min() noexcept { return BFloat16::fromBits(0b0000000100000000); }
+    static constexpr BFloat16 max() noexcept { return BFloat16::fromBits(0b0111111101111111); }
+    static constexpr BFloat16 infinity() noexcept { return BFloat16::fromBits(0b0111111110000000); }
+};
+}
diff --git a/src/Interpreters/convertFieldToType.cpp b/src/Interpreters/convertFieldToType.cpp
index 5c9c2de6bbfc..c088a2e9298e 100644
--- a/src/Interpreters/convertFieldToType.cpp
+++ b/src/Interpreters/convertFieldToType.cpp
@@ -244,6 +244,8 @@ Field convertFieldToTypeImpl(const Field & src, const IDataType & type, const ID
             return convertNumericType<Int128>(src, type);
         if (which_type.isInt256())
             return convertNumericType<Int256>(src, type);
+        if (which_type.isBFloat16())
+            return convertNumericType<BFloat16>(src, type);
         if (which_type.isFloat32())
             return convertNumericType<Float32>(src, type);
         if (which_type.isFloat64())
