{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 26256,
  "instance_id": "ClickHouse__ClickHouse-26256",
  "issue_numbers": [
    "822"
  ],
  "base_commit": "80fed6eebf96feb735b52bad3260de161d26e1fa",
  "patch": "diff --git a/src/Storages/MergeTree/MergeTreeData.cpp b/src/Storages/MergeTree/MergeTreeData.cpp\nindex f311d58b7afa..d54adcafdb75 100644\n--- a/src/Storages/MergeTree/MergeTreeData.cpp\n+++ b/src/Storages/MergeTree/MergeTreeData.cpp\n@@ -104,6 +104,7 @@ namespace ErrorCodes\n     extern const int NO_SUCH_COLUMN_IN_TABLE;\n     extern const int LOGICAL_ERROR;\n     extern const int ILLEGAL_COLUMN;\n+    extern const int ILLEGAL_TYPE_OF_COLUMN_FOR_FILTER;\n     extern const int CORRUPTED_DATA;\n     extern const int BAD_TYPE_OF_FIELD;\n     extern const int BAD_ARGUMENTS;\n@@ -125,12 +126,36 @@ namespace ErrorCodes\n     extern const int TOO_MANY_SIMULTANEOUS_QUERIES;\n }\n \n-\n-static void checkSampleExpression(const StorageInMemoryMetadata & metadata, bool allow_sampling_expression_not_in_primary_key)\n+static void checkSampleExpression(const StorageInMemoryMetadata & metadata, bool allow_sampling_expression_not_in_primary_key, bool check_sample_column_is_correct)\n {\n     const auto & pk_sample_block = metadata.getPrimaryKey().sample_block;\n     if (!pk_sample_block.has(metadata.sampling_key.column_names[0]) && !allow_sampling_expression_not_in_primary_key)\n         throw Exception(\"Sampling expression must be present in the primary key\", ErrorCodes::BAD_ARGUMENTS);\n+\n+    if (!check_sample_column_is_correct)\n+        return;\n+\n+    const auto & sampling_key = metadata.getSamplingKey();\n+    DataTypePtr sampling_column_type = sampling_key.data_types[0];\n+\n+    bool is_correct_sample_condition = false;\n+    if (sampling_key.data_types.size() == 1)\n+    {\n+        if (typeid_cast<const DataTypeUInt64 *>(sampling_column_type.get()))\n+            is_correct_sample_condition = true;\n+        else if (typeid_cast<const DataTypeUInt32 *>(sampling_column_type.get()))\n+            is_correct_sample_condition = true;\n+        else if (typeid_cast<const DataTypeUInt16 *>(sampling_column_type.get()))\n+            is_correct_sample_condition = true;\n+        else if (typeid_cast<const DataTypeUInt8 *>(sampling_column_type.get()))\n+            is_correct_sample_condition = true;\n+    }\n+\n+    if (!is_correct_sample_condition)\n+        throw Exception(\n+            \"Invalid sampling column type in storage parameters: \" + sampling_column_type->getName()\n+            + \". Must be one unsigned integer type\",\n+            ErrorCodes::ILLEGAL_TYPE_OF_COLUMN_FOR_FILTER);\n }\n \n MergeTreeData::MergeTreeData(\n@@ -200,7 +225,8 @@ MergeTreeData::MergeTreeData(\n     if (metadata_.sampling_key.definition_ast != nullptr)\n     {\n         /// This is for backward compatibility.\n-        checkSampleExpression(metadata_, attach || settings->compatibility_allow_sampling_expression_not_in_primary_key);\n+        checkSampleExpression(metadata_, attach || settings->compatibility_allow_sampling_expression_not_in_primary_key,\n+                              settings->check_sample_column_is_correct);\n     }\n \n     checkTTLExpressions(metadata_, metadata_);\n@@ -1675,7 +1701,8 @@ void MergeTreeData::checkAlterIsPossible(const AlterCommands & commands, Context\n                     \"ALTER MODIFY SAMPLE BY is not supported for default-partitioned tables created with the old syntax\",\n                     ErrorCodes::BAD_ARGUMENTS);\n \n-            checkSampleExpression(new_metadata, getSettings()->compatibility_allow_sampling_expression_not_in_primary_key);\n+            checkSampleExpression(new_metadata, getSettings()->compatibility_allow_sampling_expression_not_in_primary_key,\n+                                  getSettings()->check_sample_column_is_correct);\n         }\n         if (command.type == AlterCommand::ADD_INDEX && !is_custom_partitioned)\n         {\ndiff --git a/src/Storages/MergeTree/MergeTreeSettings.h b/src/Storages/MergeTree/MergeTreeSettings.h\nindex 888ca80e0153..932dbb6d0fca 100644\n--- a/src/Storages/MergeTree/MergeTreeSettings.h\n+++ b/src/Storages/MergeTree/MergeTreeSettings.h\n@@ -130,6 +130,7 @@ struct Settings;\n     M(UInt64, max_concurrent_queries, 0, \"Max number of concurrently executed queries related to the MergeTree table (0 - disabled). Queries will still be limited by other max_concurrent_queries settings.\", 0) \\\n     M(UInt64, min_marks_to_honor_max_concurrent_queries, 0, \"Minimal number of marks to honor the MergeTree-level's max_concurrent_queries (0 - disabled). Queries will still be limited by other max_concurrent_queries settings.\", 0) \\\n     M(UInt64, min_bytes_to_rebalance_partition_over_jbod, 0, \"Minimal amount of bytes to enable part rebalance over JBOD array (0 - disabled).\", 0) \\\n+    M(Bool, check_sample_column_is_correct, true, \"Check columns or columns by hash for sampling are unsigned integer.\", 0) \\\n     \\\n     /** Experimental/work in progress feature. Unsafe for production. */ \\\n     M(UInt64, part_moves_between_shards_enable, 0, \"Experimental/Incomplete feature to move parts between shards. Does not take into account sharding expressions.\", 0) \\\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/00907_set_index_with_nullable_and_low_cardinality_bug.sql b/tests/queries/0_stateless/00907_set_index_with_nullable_and_low_cardinality_bug.sql\nindex 75e0e4825664..3a55a69c7264 100644\n--- a/tests/queries/0_stateless/00907_set_index_with_nullable_and_low_cardinality_bug.sql\n+++ b/tests/queries/0_stateless/00907_set_index_with_nullable_and_low_cardinality_bug.sql\n@@ -8,8 +8,7 @@ CREATE TABLE null_lc_set_index (\n   INDEX test_user_idx (user) TYPE set(0) GRANULARITY 8192\n ) ENGINE=MergeTree\n   PARTITION BY toYYYYMMDD(timestamp)\n-  ORDER BY (timestamp, action, cityHash64(user))\n-  SAMPLE BY cityHash64(user);\n+  ORDER BY (timestamp, action, cityHash64(user));\n INSERT INTO null_lc_set_index VALUES (1550883010, 'subscribe', 'alice');\n INSERT INTO null_lc_set_index VALUES (1550883020, 'follow', 'bob');\n \ndiff --git a/tests/queries/0_stateless/01942_create_table_with_sample.reference b/tests/queries/0_stateless/01942_create_table_with_sample.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/01942_create_table_with_sample.sql b/tests/queries/0_stateless/01942_create_table_with_sample.sql\nnew file mode 100644\nindex 000000000000..6320edd7a31e\n--- /dev/null\n+++ b/tests/queries/0_stateless/01942_create_table_with_sample.sql\n@@ -0,0 +1,14 @@\n+CREATE TABLE IF NOT EXISTS sample_incorrect\n+(`x` UUID)\n+ENGINE = MergeTree\n+ORDER BY tuple(x)\n+SAMPLE BY x;  -- { serverError 59 }\n+\n+DROP TABLE IF EXISTS sample_correct;\n+CREATE TABLE IF NOT EXISTS sample_correct\n+(`x` String)\n+ENGINE = MergeTree\n+ORDER BY tuple(sipHash64(x))\n+SAMPLE BY sipHash64(x);\n+\n+DROP TABLE sample_correct;\n",
  "problem_statement": "Hash functions should be checked at table creation, not at sampling time\n\r\nIt is possible to create a table within a non-UInt hash column (i.e. MD5) and insert data, although at query time it complains:\r\n\r\n```\r\nENGINE = MergeTree(normdate,MD5(id), (created_at, id,MD5(id)),8192);\r\n...\r\nCode: 59. DB::Exception: Received from localhost:9000, 127.0.0.1. DB::Exception: Invalid sampling column type in storage parameters: FixedString(16). Must be unsigned integer type..\r\n```\r\nThis probably will be better to check at creation time.\r\n\r\n\n",
  "hints_text": "BTW, what would be an optimal way to convert/alter table from UUID field(FixedString(16)) as sampling field, to something like `sipHash64(cid)`(or maybe there is a better option?), where `cid` defined as `cid FixedString(16)` and contains UUIDs in binary form from `UUIDStringToNum()`.\r\nI mean, data in table I would like to leave as it is and update/alter only `ENGINE = MergeTree(...)` part.\nIn case somebody else will face same problem sharing my solution. There is no direct way to change MergeTree() options. You have to CREATE new table, INSERT SELECT data from old table, DROP old one and RENAME newly created. \r\nI was lucky, I had only 800mil records and I could stop data flow into my Clickhouse for about 20 minutes.\r\nAnd, BTW, sipHash64() doesn't accept FixedString, only String.\n@dorantor, I think it will be better for visibility to open a new issue as this is not directly related with the reported bug. If I'm not mistaken, there must be work being done to fix these things in long term.\r\n\r\nYeah, unfortunately you need to recreate the table with the new options :(\nThe issue is still relevant.\r\nTest:\r\n\r\n```\r\nmilovidov-Pro-P30 :) CREATE TABLE test.mt (x UUID) ENGINE = MergeTree ORDER BY tuple(x) SAMPLE BY x\r\n\r\nCREATE TABLE test.mt\r\n(\r\n    `x` UUID\r\n)\r\nENGINE = MergeTree\r\nORDER BY tuple(x)\r\nSAMPLE BY x\r\n\r\nOk.\r\n\r\n0 rows in set. Elapsed: 0.012 sec. \r\n\r\nmilovidov-Pro-P30 :) SELECT * FROM test.mt SAMPLE 0.1\r\n\r\nSELECT *\r\nFROM test.mt\r\nSAMPLE 1 / 10\r\n\r\nReceived exception from server (version 19.17.1):\r\nCode: 59. DB::Exception: Received from localhost:9000. DB::Exception: Invalid sampling column type in storage parameters: UUID. Must be unsigned integer type.\r\n```\r\n\r\nCurrently it isn't assigned to anyone.",
  "created_at": "2021-07-12T17:18:23Z",
  "modified_files": [
    "src/Storages/MergeTree/MergeTreeData.cpp",
    "src/Storages/MergeTree/MergeTreeSettings.h"
  ],
  "modified_test_files": [
    "tests/queries/0_stateless/00907_set_index_with_nullable_and_low_cardinality_bug.sql",
    "b/tests/queries/0_stateless/01942_create_table_with_sample.sql"
  ]
}