{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 11208,
  "instance_id": "ClickHouse__ClickHouse-11208",
  "issue_numbers": [
    "10922"
  ],
  "base_commit": "545c9e5bace6c2112cffb1878373c880f6332f8f",
  "patch": "diff --git a/src/IO/ReadHelpers.cpp b/src/IO/ReadHelpers.cpp\nindex dccb413af2c9..0797e63cdd92 100644\n--- a/src/IO/ReadHelpers.cpp\n+++ b/src/IO/ReadHelpers.cpp\n@@ -283,7 +283,9 @@ static void parseComplexEscapeSequence(Vector & s, ReadBuffer & buf)\n     if (buf.eof())\n         throw Exception(\"Cannot parse escape sequence\", ErrorCodes::CANNOT_PARSE_ESCAPE_SEQUENCE);\n \n-    if (*buf.position() == 'x')\n+    char char_after_backslash = *buf.position();\n+\n+    if (char_after_backslash == 'x')\n     {\n         ++buf.position();\n         /// escape sequence of the form \\xAA\n@@ -291,7 +293,7 @@ static void parseComplexEscapeSequence(Vector & s, ReadBuffer & buf)\n         readPODBinary(hex_code, buf);\n         s.push_back(unhex2(hex_code));\n     }\n-    else if (*buf.position() == 'N')\n+    else if (char_after_backslash == 'N')\n     {\n         /// Support for NULLs: \\N sequence must be parsed as empty string.\n         ++buf.position();\n@@ -299,7 +301,22 @@ static void parseComplexEscapeSequence(Vector & s, ReadBuffer & buf)\n     else\n     {\n         /// The usual escape sequence of a single character.\n-        s.push_back(parseEscapeSequence(*buf.position()));\n+        char decoded_char = parseEscapeSequence(char_after_backslash);\n+\n+        /// For convenience using LIKE and regular expressions,\n+        /// we leave backslash when user write something like 'Hello 100\\%':\n+        /// it is parsed like Hello 100\\% instead of Hello 100%\n+        if (decoded_char != '\\\\'\n+            && decoded_char != '\\''\n+            && decoded_char != '\"'\n+            && decoded_char != '`'  /// MySQL style identifiers\n+            && decoded_char != '/'  /// JavaScript in HTML\n+            && !isControlASCII(decoded_char))\n+        {\n+            s.push_back('\\\\');\n+        }\n+\n+        s.push_back(decoded_char);\n         ++buf.position();\n     }\n }\n",
  "test_patch": "diff --git a/src/IO/tests/CMakeLists.txt b/src/IO/tests/CMakeLists.txt\nindex 2767ce6e2714..dfbbfa778538 100644\n--- a/src/IO/tests/CMakeLists.txt\n+++ b/src/IO/tests/CMakeLists.txt\n@@ -37,9 +37,6 @@ target_link_libraries (parse_int_perf2 PRIVATE clickhouse_common_io)\n add_executable (read_write_int read_write_int.cpp)\n target_link_libraries (read_write_int PRIVATE clickhouse_common_io)\n \n-add_executable (mempbrk mempbrk.cpp)\n-target_link_libraries (mempbrk PRIVATE clickhouse_common_io)\n-\n add_executable (o_direct_and_dirty_pages o_direct_and_dirty_pages.cpp)\n target_link_libraries (o_direct_and_dirty_pages PRIVATE clickhouse_common_io)\n \ndiff --git a/src/IO/tests/mempbrk.cpp b/src/IO/tests/mempbrk.cpp\ndeleted file mode 100644\nindex 55097d989af1..000000000000\n--- a/src/IO/tests/mempbrk.cpp\n+++ /dev/null\n@@ -1,90 +0,0 @@\n-#include <string>\n-#include <iostream>\n-#include <iomanip>\n-\n-#include <Common/Stopwatch.h>\n-\n-#include <Core/Types.h>\n-#include <IO/ReadHelpers.h>\n-#include <IO/WriteHelpers.h>\n-#include <IO/ReadBufferFromFileDescriptor.h>\n-#include <IO/WriteBufferFromFileDescriptor.h>\n-\n-#include <common/find_symbols.h>\n-\n-namespace DB\n-{\n-namespace ErrorCodes\n-{\n-    extern const int CANNOT_PARSE_ESCAPE_SEQUENCE;\n-}\n-}\n-\n-\n-namespace test\n-{\n-static void readEscapedString(DB::String & s, DB::ReadBuffer & buf)\n-    {\n-        s = \"\";\n-        while (!buf.eof())\n-        {\n-            const char * next_pos = find_first_symbols<'\\b', '\\f', '\\n', '\\r', '\\t', '\\0', '\\\\'>(buf.position(), buf.buffer().end());\n-\n-            s.append(buf.position(), next_pos - buf.position());\n-            buf.position() += next_pos - buf.position();\n-\n-            if (!buf.hasPendingData())\n-                continue;\n-\n-            if (*buf.position() == '\\t' || *buf.position() == '\\n')\n-                return;\n-\n-            if (*buf.position() == '\\\\')\n-            {\n-                ++buf.position();\n-                if (buf.eof())\n-                    throw DB::Exception(\"Cannot parse escape sequence\", DB::ErrorCodes::CANNOT_PARSE_ESCAPE_SEQUENCE);\n-                s += DB::parseEscapeSequence(*buf.position());\n-                ++buf.position();\n-            }\n-        }\n-    }\n-}\n-\n-\n-int main(int, char **)\n-{\n-    try\n-    {\n-        DB::ReadBufferFromFileDescriptor in(STDIN_FILENO);\n-//        DB::WriteBufferFromFileDescriptor out(STDOUT_FILENO);\n-        std::string s;\n-        size_t rows = 0;\n-\n-        Stopwatch watch;\n-\n-        while (!in.eof())\n-        {\n-            test::readEscapedString(s, in);\n-            in.ignore();\n-\n-            ++rows;\n-\n-/*            DB::writeEscapedString(s, out);\n-            DB::writeChar('\\n', out);*/\n-        }\n-\n-        watch.stop();\n-        std::cerr << std::fixed << std::setprecision(2)\n-            << \"Read \" << rows << \" rows (\" << in.count() / 1000000.0 << \" MB) in \" << watch.elapsedSeconds() << \" sec., \"\n-            << rows / watch.elapsedSeconds() << \" rows/sec. (\" << in.count() / watch.elapsedSeconds() / 1000000 << \" MB/s.)\"\n-            << std::endl;\n-    }\n-    catch (const DB::Exception & e)\n-    {\n-        std::cerr << e.what() << \", \" << e.displayText() << std::endl;\n-        return 1;\n-    }\n-\n-    return 0;\n-}\ndiff --git a/tests/queries/0_stateless/00342_escape_sequences.reference b/tests/queries/0_stateless/00342_escape_sequences.reference\nindex b7ecd06be787..50e0756d16fc 100644\n--- a/tests/queries/0_stateless/00342_escape_sequences.reference\n+++ b/tests/queries/0_stateless/00342_escape_sequences.reference\n@@ -1,1 +1,1 @@\n-07080C0A0D090B5C27223FAA\n+07080C0A0D090B5C27225C3FAA\ndiff --git a/tests/queries/0_stateless/00926_multimatch.sql b/tests/queries/0_stateless/00926_multimatch.sql\nindex d54e4fd22803..bf67533bb6ca 100644\n--- a/tests/queries/0_stateless/00926_multimatch.sql\n+++ b/tests/queries/0_stateless/00926_multimatch.sql\n@@ -89,4 +89,4 @@ SELECT [1, 2, 3, 11] = arraySort(multiMatchAllIndices('\u0444\u0430\u0431\u0440\u0438\u043a\u0430\u043d\u0442', ['',\n SELECT [1] = multiMatchAllIndices(materialize('/odezhda-dlya-bega/'), ['/odezhda-dlya-bega/', 'kurtki-i-vetrovki-dlya-bega', 'futbolki-i-mayki-dlya-bega']);\n SELECT [] = multiMatchAllIndices(materialize('aaaa'), ['.*aa.*aaa.*', 'aaaaaa{2}', '\\(aa\\){3}']);\n SELECT 'All tests above must return 1, all tests below return something.';\n-SELECT arraySort(multiMatchAllIndices(arrayJoin(['aaaa', 'aaaaaa', 'bbbb', 'aaaaaaaaaaaaaa']), ['.*aa.*aaa.*', 'aaaaaa{2}', '\\(aa\\){3}']));\n+SELECT arraySort(multiMatchAllIndices(arrayJoin(['aaaa', 'aaaaaa', 'bbbb', 'aaaaaaaaaaaaaa']), ['.*aa.*aaa.*', 'aaaaaa{2}', '(aa){3}']));\ndiff --git a/tests/queries/0_stateless/01075_allowed_client_hosts.reference b/tests/queries/0_stateless/01075_allowed_client_hosts.reference\nindex 73f54c6027aa..3fdea9d1cda9 100644\n--- a/tests/queries/0_stateless/01075_allowed_client_hosts.reference\n+++ b/tests/queries/0_stateless/01075_allowed_client_hosts.reference\n@@ -8,10 +8,10 @@ CREATE USER test_user_01075 HOST LOCAL, IP \\'2001:db8:11a3:9d7:1f34:8a2e:7a0:765\n CREATE USER test_user_01075 HOST LOCAL\n CREATE USER test_user_01075 HOST NONE\n CREATE USER test_user_01075 HOST LIKE \\'@.somesite.com\\'\n-CREATE USER test_user_01075 HOST REGEXP \\'.*.anothersite.com\\'\n-CREATE USER test_user_01075 HOST REGEXP \\'.*.anothersite.com\\', \\'.*.anothersite.org\\'\n-CREATE USER test_user_01075 HOST REGEXP \\'.*.anothersite2.com\\', \\'.*.anothersite2.org\\'\n-CREATE USER test_user_01075 HOST REGEXP \\'.*.anothersite3.com\\', \\'.*.anothersite3.org\\'\n+CREATE USER test_user_01075 HOST REGEXP \\'.*\\\\\\\\.anothersite\\\\\\\\.com\\'\n+CREATE USER test_user_01075 HOST REGEXP \\'.*\\\\\\\\.anothersite\\\\\\\\.com\\', \\'.*\\\\\\\\.anothersite\\\\\\\\.org\\'\n+CREATE USER test_user_01075 HOST REGEXP \\'.*\\\\\\\\.anothersite2\\\\\\\\.com\\', \\'.*\\\\\\\\.anothersite2\\\\\\\\.org\\'\n+CREATE USER test_user_01075 HOST REGEXP \\'.*\\\\\\\\.anothersite3\\\\\\\\.com\\', \\'.*\\\\\\\\.anothersite3\\\\\\\\.org\\'\n CREATE USER `test_user_01075_x@localhost` HOST LOCAL\n CREATE USER test_user_01075_x\n CREATE USER `test_user_01075_x@192.168.23.15` HOST LIKE \\'192.168.23.15\\'\ndiff --git a/tests/queries/0_stateless/01284_escape_sequences_php_mysql_style.reference b/tests/queries/0_stateless/01284_escape_sequences_php_mysql_style.reference\nnew file mode 100644\nindex 000000000000..19a5fc680ff9\n--- /dev/null\n+++ b/tests/queries/0_stateless/01284_escape_sequences_php_mysql_style.reference\n@@ -0,0 +1,3 @@\n+a\\\\_\\\\c\\\\l\\\\i\\\\c\\\\k\\\\h\\\\o\\\\u\\\\s\u001b\ta\\\\_\\\\c\\\\l\\\\i\\\\c\\\\k\\\\h\\\\o\\\\u\\\\s\\\\e\n+1\t0\t1\t1\n+1\t1\t0\t0\t0\ndiff --git a/tests/queries/0_stateless/01284_escape_sequences_php_mysql_style.sql b/tests/queries/0_stateless/01284_escape_sequences_php_mysql_style.sql\nnew file mode 100644\nindex 000000000000..36ad7b4506cc\n--- /dev/null\n+++ b/tests/queries/0_stateless/01284_escape_sequences_php_mysql_style.sql\n@@ -0,0 +1,6 @@\n+SELECT 'a\\_\\c\\l\\i\\c\\k\\h\\o\\u\\s\\e', 'a\\\\_\\\\c\\\\l\\\\i\\\\c\\\\k\\\\h\\\\o\\\\u\\\\s\\\\e';\n+select 'aXb' like 'a_b', 'aXb' like 'a\\_b', 'a_b' like 'a\\_b', 'a_b' like 'a\\\\_b';\n+SELECT match('Hello', '\\w+'), match('Hello', '\\\\w+'), match('Hello', '\\\\\\w+'), match('Hello', '\\w\\+'), match('Hello', 'w+');\n+\n+SELECT match('Hello', '\\He\\l\\l\\o'); -- { serverError 427 }\n+SELECT match('Hello', '\\H\\e\\l\\l\\o'); -- { serverError 427 }\n",
  "problem_statement": "RFC: excessive escaping in regexps and like\nIn ClickHouse you need to double escape special characters in regexp and like (for example, underscores in `like` need to be escaped with two backslashes).\r\n\r\nThe reasons for the behavior are clear (parser extract the regexp / right part of `like` as a regular literal with general rules for escaping, and then `like` function takes the string from AST and uses it's own logic).\r\n\r\nBut this is inconvenient /  for the user:\r\n1) this is a deviation from the standard (in the case of like)\r\n2) all sorts of complex regexps (which are quite noisy in general) in ClickHouse look more noisy because of double escaping. \r\n\r\nTherefore, the question is - do we want to change this?\r\n\r\nIt seems to be fundamentally feasible - when parsing, you can simply add the literal in the AST in the original representation and use other deescaping rules for the `like` / `regexp` functions.\r\n\r\nBut there are also side effects (backward compatibility, \"specialization\" of parsers / desapaping).\r\n\r\nwhat do you think of this? Do we want to change that? If so, then soon / not soon / \"maybe someday.\" Or leave it as it is?\r\n\r\nThe second column here is problematic:\r\n```\r\nselect 'aXb' like 'a_b', 'aXb' like 'a\\_b', 'a_b' like 'a\\_b', 'a_b' like 'a\\\\_b';\r\n\r\nMysql:      1 0 1 1\r\nPostgres:   1 0 1 0\r\nClickHouse  1 1 1 1\r\nSQLite:     1 0 0 0\r\n```\r\n\r\nAlexey Milovidov, [11.05.20 18:57]\r\nIn PHP, they did that in string literals, `\\{` is parsed not like `{` but like `\\{`, and therefore in functions like `preg_replace` you can write only one slash, not two. In earlier versions of MySQL in `LIKE` it was necessary to write two slashes, such as: LIKE 'hello \\\\ _ world', and then they fixed it similarly to PHP. It is not obvious whether we need to do this.\r\n\r\nSuch a  strange logic:\r\nhttps://www.db-fiddle.com/f/kCLJ917M6RFS4XoY4bDnyh/0\r\n\r\nNote that by standard, string literals do not support C-style escaping (using backslashes), this is a feature of MySQL.\r\n\r\nWe can make parsing as in PHP + customization to completely turn off C-style escapes to comply with the standard.\n",
  "hints_text": "",
  "created_at": "2020-05-26T14:29:04Z",
  "modified_files": [
    "src/IO/ReadHelpers.cpp"
  ],
  "modified_test_files": [
    "src/IO/tests/CMakeLists.txt",
    "src/IO/tests/mempbrk.cpp",
    "tests/queries/0_stateless/00342_escape_sequences.reference",
    "tests/queries/0_stateless/00926_multimatch.sql",
    "tests/queries/0_stateless/01075_allowed_client_hosts.reference",
    "b/tests/queries/0_stateless/01284_escape_sequences_php_mysql_style.reference",
    "b/tests/queries/0_stateless/01284_escape_sequences_php_mysql_style.sql"
  ]
}