{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 22063,
  "instance_id": "ClickHouse__ClickHouse-22063",
  "issue_numbers": [
    "22017"
  ],
  "base_commit": "4de5afed4eb15e1fc2f57721df0e464557410a43",
  "patch": "diff --git a/src/Interpreters/convertFieldToType.cpp b/src/Interpreters/convertFieldToType.cpp\nindex d47f64cb1dc4..5d124add0df3 100644\n--- a/src/Interpreters/convertFieldToType.cpp\n+++ b/src/Interpreters/convertFieldToType.cpp\n@@ -377,6 +377,11 @@ Field convertFieldToType(const Field & from_value, const IDataType & to_type, co\n     else if (const auto * nullable_type = typeid_cast<const DataTypeNullable *>(&to_type))\n     {\n         const IDataType & nested_type = *nullable_type->getNestedType();\n+\n+        /// NULL remains NULL after any conversion.\n+        if (WhichDataType(nested_type).isNothing())\n+            return {};\n+\n         if (from_type_hint && from_type_hint->equals(nested_type))\n             return from_value;\n         return convertFieldToTypeImpl(from_value, nested_type, from_type_hint);\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01774_tuple_null_in.reference b/tests/queries/0_stateless/01774_tuple_null_in.reference\nnew file mode 100644\nindex 000000000000..aa47d0d46d47\n--- /dev/null\n+++ b/tests/queries/0_stateless/01774_tuple_null_in.reference\n@@ -0,0 +1,2 @@\n+0\n+0\ndiff --git a/tests/queries/0_stateless/01774_tuple_null_in.sql b/tests/queries/0_stateless/01774_tuple_null_in.sql\nnew file mode 100644\nindex 000000000000..a9cc39e8840c\n--- /dev/null\n+++ b/tests/queries/0_stateless/01774_tuple_null_in.sql\n@@ -0,0 +1,2 @@\n+SELECT (NULL, NULL) = (8, 0) OR (NULL, NULL) = (3, 2) OR (NULL, NULL) = (0, 0) OR (NULL, NULL) = (3, 1);\n+SELECT (NULL, NULL) IN ((NULL, 0), (3, 1), (3, 2), (8, 0), (NULL, NULL));\n",
  "problem_statement": "Optimization for nullable tuple create invalid ClickHouse filtering\n**Describe the bug**\r\nUsing a `NULL` tuple as a left operand with a chained or operands produce an invalid ClickHouse filtering.\r\n\r\n**Does it reproduce on recent release?**\r\nCan be reproduced with `21.2.2.8`\r\n\r\n**How to reproduce**\r\n```\r\nSELECT (NULL, NULL) = (8, 0) OR (NULL, NULL) = (3, 2) OR (NULL, NULL) = (0, 0) OR (NULL, NULL) = (3, 1)\r\n\r\nReceived exception from server (version 21.2.2):\r\nCode: 53. DB::Exception: Received from 127.0.0.1:10000. DB::Exception: Type mismatch in IN or VALUES section. Expected: Nothing. Got: UInt64: While processing (NULL, NULL) IN ((0, 0), (3, 1), (3, 2), (8, 0)). \r\n```\r\n\r\n**Expected behavior**\r\nIt should return `NULL`, or at least the same output as `equals(tuple(NULL, NULL), tuple(3, 2))`\n",
  "hints_text": "```\r\n18.14.19\r\n\r\nSELECT ((NULL, NULL) = (8, 0)) OR ((NULL, NULL) = (3, 2)) OR ((NULL, NULL) = (0, 0)) OR ((NULL, NULL) = (3, 1))\r\n\r\n\u250c\u2500or(equals(tuple(NULL, NULL), tuple(8, 0)), equals(tuple(NULL, NULL), tuple(3, 2)), equals(tuple(NULL, NULL), tuple(0, 0)), equals(tuple(NULL, NULL), tuple(3, 1)))\u2500\u2510\r\n\u2502                                                                                                                                                                  1 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n19.13.7.57\r\nSELECT ((NULL, NULL) = (8, 0)) OR ((NULL, NULL) = (3, 2)) OR ((NULL, NULL) = (0, 0)) OR ((NULL, NULL) = (3, 1))\r\n\r\n\u250c\u2500or(equals(tuple(NULL, NULL), tuple(8, 0)), equals(tuple(NULL, NULL), tuple(3, 2)), equals(tuple(NULL, NULL), tuple(0, 0)), equals(tuple(NULL, NULL), tuple(3, 1)))\u2500\u2510\r\n\u2502                                                                                                                                                                  1 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n20.8.14.4\r\nSELECT ((NULL, NULL) = (8, 0)) OR ((NULL, NULL) = (3, 2)) OR ((NULL, NULL) = (0, 0)) OR ((NULL, NULL) = (3, 1))\r\nDB::Exception: Type mismatch in IN or VALUES section. Expected: Nothing. Got: UInt64.\r\n```\nAccording to the example of @den-crane, the behaviour of old versions is definitely incorrect.\r\n\r\n```\r\nSELECT ((NULL, NULL) = (8, 0)) OR ((NULL, NULL) = (3, 2)) OR ((NULL, NULL) = (0, 0)) OR ((NULL, NULL) = (3, 1))\r\n```\r\n\r\nHow it can return 1 if all conditions are false?\r\n```\r\nSELECT\r\n    (NULL, NULL) = (8, 0),\r\n    (NULL, NULL) = (3, 2),\r\n    (NULL, NULL) = (0, 0),\r\n    (NULL, NULL) = (3, 1)\r\n\r\nQuery id: d8db95d6-903c-416c-8608-24ddff21307d\r\n\r\n\u250c\u2500equals(tuple(NULL, NULL), tuple(8, 0))\u2500\u252c\u2500equals(tuple(NULL, NULL), tuple(3, 2))\u2500\u252c\u2500equals(tuple(NULL, NULL), tuple(0, 0))\u2500\u252c\u2500equals(tuple(NULL, NULL), tuple(3, 1))\u2500\u2510\r\n\u2502 \u1d3a\u1d41\u1d38\u1d38                                   \u2502 \u1d3a\u1d41\u1d38\u1d38                                   \u2502 \u1d3a\u1d41\u1d38\u1d38                                   \u2502 \u1d3a\u1d41\u1d38\u1d38                                   \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\nThe new behaviour is to tell that the types are incompatible instead of giving a wrong result.\r\nIt means that the new version of ClickHouse has this bug fixed.\r\n\r\nAlthough it can be slightly misleading that the exception is only triggered if optimization \"transform OR chains to IN\" is being in effect.",
  "created_at": "2021-03-24T00:18:19Z",
  "modified_files": [
    "src/Interpreters/convertFieldToType.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/01774_tuple_null_in.reference",
    "b/tests/queries/0_stateless/01774_tuple_null_in.sql"
  ]
}