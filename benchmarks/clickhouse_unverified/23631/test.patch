diff --git a/src/Columns/tests/gtest_weak_hash_32.cpp b/src/Columns/tests/gtest_weak_hash_32.cpp
index 0dabfc32b33d..2fa6c0ea8ac4 100644
--- a/src/Columns/tests/gtest_weak_hash_32.cpp
+++ b/src/Columns/tests/gtest_weak_hash_32.cpp
@@ -14,11 +14,11 @@
 #include <DataTypes/DataTypesNumber.h>
 
 #include <Common/WeakHash.h>
+#include <Common/hex.h>
 
 #include <unordered_map>
 #include <iostream>
 #include <sstream>
-#include <Common/hex.h>
 
 
 using namespace DB;
@@ -27,20 +27,11 @@ template <typename T>
 void checkColumn(
     const WeakHash32::Container & hash,
     const PaddedPODArray<T> & eq_class,
-    const std::function<std::string(size_t)> & print_function,
     size_t allowed_collisions = 0,
     size_t max_collisions_to_print = 10)
 {
     ASSERT_EQ(hash.size(), eq_class.size());
 
-    auto print_for_row = [&](size_t row)
-    {
-        std::string res = "row: " + std::to_string(row);
-        res += " hash: " + std::to_string(hash[row]);
-        res += " value: " + print_function(row);
-        return res;
-    };
-
     /// Check equal rows has equal hash.
     {
         std::unordered_map<T, UInt32> map;
@@ -55,11 +46,7 @@ void checkColumn(
             else
             {
                 if (it->second != hash[i])
-                {
-                    std::cout << "Different hashes for the same equivalent class (" << size_t(val) << "):
";
-                    std::cout << print_for_row(it->first) << '
';
-                    std::cout << print_for_row(i) << std::endl;
-                }
+                    std::cout << "Different hashes for the same equivalent class (" << toString(val) << ")
";
 
                 ASSERT_EQ(it->second, hash[i]);
             }
@@ -88,7 +75,6 @@ void checkColumn(
                 if (num_collisions <= max_collisions_to_print)
                 {
                     collisions_str << "Collision:
";
-                    collisions_str << print_for_row(i) << std::endl;
                 }
 
                 if (num_collisions > allowed_collisions)
@@ -117,7 +103,7 @@ TEST(WeakHash32, ColumnVectorU8)
     WeakHash32 hash(col->size());
     col->updateWeakHash32(hash);
 
-    checkColumn(hash.getData(), col->getData(), [&](size_t row) { return std::to_string(col->getElement(row)); });
+    checkColumn(hash.getData(), col->getData());
 }
 
 TEST(WeakHash32, ColumnVectorI8)
@@ -134,7 +120,7 @@ TEST(WeakHash32, ColumnVectorI8)
     WeakHash32 hash(col->size());
     col->updateWeakHash32(hash);
 
-    checkColumn(hash.getData(), col->getData(), [&](size_t row) { return std::to_string(col->getElement(row)); });
+    checkColumn(hash.getData(), col->getData());
 }
 
 TEST(WeakHash32, ColumnVectorU16)
@@ -151,7 +137,7 @@ TEST(WeakHash32, ColumnVectorU16)
     WeakHash32 hash(col->size());
     col->updateWeakHash32(hash);
 
-    checkColumn(hash.getData(), col->getData(), [&](size_t row) { return std::to_string(col->getElement(row)); });
+    checkColumn(hash.getData(), col->getData());
 }
 
 TEST(WeakHash32, ColumnVectorI16)
@@ -168,7 +154,7 @@ TEST(WeakHash32, ColumnVectorI16)
     WeakHash32 hash(col->size());
     col->updateWeakHash32(hash);
 
-    checkColumn(hash.getData(), col->getData(), [&](size_t row) { return std::to_string(col->getElement(row)); });
+    checkColumn(hash.getData(), col->getData());
 }
 
 TEST(WeakHash32, ColumnVectorU32)
@@ -185,7 +171,7 @@ TEST(WeakHash32, ColumnVectorU32)
     WeakHash32 hash(col->size());
     col->updateWeakHash32(hash);
 
-    checkColumn(hash.getData(), col->getData(), [&](size_t row) { return std::to_string(col->getElement(row)); });
+    checkColumn(hash.getData(), col->getData());
 }
 
 TEST(WeakHash32, ColumnVectorI32)
@@ -202,7 +188,7 @@ TEST(WeakHash32, ColumnVectorI32)
     WeakHash32 hash(col->size());
     col->updateWeakHash32(hash);
 
-    checkColumn(hash.getData(), col->getData(), [&](size_t row) { return std::to_string(col->getElement(row)); });
+    checkColumn(hash.getData(), col->getData());
 }
 
 TEST(WeakHash32, ColumnVectorU64)
@@ -219,7 +205,7 @@ TEST(WeakHash32, ColumnVectorU64)
     WeakHash32 hash(col->size());
     col->updateWeakHash32(hash);
 
-    checkColumn(hash.getData(), col->getData(), [&](size_t row) { return std::to_string(col->getElement(row)); });
+    checkColumn(hash.getData(), col->getData());
 }
 
 TEST(WeakHash32, ColumnVectorI64)
@@ -236,7 +222,7 @@ TEST(WeakHash32, ColumnVectorI64)
     WeakHash32 hash(col->size());
     col->updateWeakHash32(hash);
 
-    checkColumn(hash.getData(), col->getData(), [&](size_t row) { return std::to_string(col->getElement(row)); });
+    checkColumn(hash.getData(), col->getData());
 }
 
 TEST(WeakHash32, ColumnVectorU128)
@@ -250,7 +236,9 @@ TEST(WeakHash32, ColumnVectorU128)
     {
         for (uint64_t i = 0; i < 65536; ++i)
         {
-            UInt128 val(i << 32u, i << 32u);
+            UInt128 val;
+            val.items[0] = i << 32u;
+            val.items[1] = i << 32u;
             data.push_back(val);
             eq_data.push_back(i);
         }
@@ -259,7 +247,7 @@ TEST(WeakHash32, ColumnVectorU128)
     WeakHash32 hash(col->size());
     col->updateWeakHash32(hash);
 
-    checkColumn(hash.getData(), eq_data, [&](size_t row) { return col->getElement(row).toHexString(); });
+    checkColumn(hash.getData(), eq_data);
 }
 
 TEST(WeakHash32, ColumnVectorI128)
@@ -276,7 +264,7 @@ TEST(WeakHash32, ColumnVectorI128)
     WeakHash32 hash(col->size());
     col->updateWeakHash32(hash);
 
-    checkColumn(hash.getData(), col->getData(), [&](size_t row) { return std::to_string(Int64(col->getElement(row))); });
+    checkColumn(hash.getData(), col->getData());
 }
 
 TEST(WeakHash32, ColumnDecimal32)
@@ -293,7 +281,7 @@ TEST(WeakHash32, ColumnDecimal32)
     WeakHash32 hash(col->size());
     col->updateWeakHash32(hash);
 
-    checkColumn(hash.getData(), col->getData(), [&](size_t row) { return std::to_string(col->getElement(row)); });
+    checkColumn(hash.getData(), col->getData());
 }
 
 TEST(WeakHash32, ColumnDecimal64)
@@ -310,7 +298,7 @@ TEST(WeakHash32, ColumnDecimal64)
     WeakHash32 hash(col->size());
     col->updateWeakHash32(hash);
 
-    checkColumn(hash.getData(), col->getData(), [&](size_t row) { return std::to_string(col->getElement(row)); });
+    checkColumn(hash.getData(), col->getData());
 }
 
 TEST(WeakHash32, ColumnDecimal128)
@@ -327,7 +315,7 @@ TEST(WeakHash32, ColumnDecimal128)
     WeakHash32 hash(col->size());
     col->updateWeakHash32(hash);
 
-    checkColumn(hash.getData(), col->getData(), [&](size_t row) { return std::to_string(Int64(col->getElement(row))); });
+    checkColumn(hash.getData(), col->getData());
 }
 
 TEST(WeakHash32, ColumnString1)
@@ -349,7 +337,7 @@ TEST(WeakHash32, ColumnString1)
     WeakHash32 hash(col->size());
     col->updateWeakHash32(hash);
 
-    checkColumn(hash.getData(), data, [&](size_t row) { return col->getDataAt(row).toString(); });
+    checkColumn(hash.getData(), data);
 }
 
 TEST(WeakHash32, ColumnString2)
@@ -389,7 +377,7 @@ TEST(WeakHash32, ColumnString2)
     /// Now there is single collision between 'k' * 544 and 'q' * 2512 (which is calculated twice)
     size_t allowed_collisions = 4;
 
-    checkColumn(hash.getData(), data, [&](size_t row) { return col->getDataAt(row).toString(); }, allowed_collisions);
+    checkColumn(hash.getData(), data, allowed_collisions);
 }
 
 TEST(WeakHash32, ColumnString3)
@@ -427,7 +415,7 @@ TEST(WeakHash32, ColumnString3)
     WeakHash32 hash(col->size());
     col->updateWeakHash32(hash);
 
-    checkColumn(hash.getData(), data, [&](size_t row) { return col->getDataAt(row).toString(); });
+    checkColumn(hash.getData(), data);
 }
 
 TEST(WeakHash32, ColumnFixedString)
@@ -455,7 +443,7 @@ TEST(WeakHash32, ColumnFixedString)
     WeakHash32 hash(col->size());
     col->updateWeakHash32(hash);
 
-    checkColumn(hash.getData(), data, [&](size_t row) { return col->getDataAt(row).toString(); });
+    checkColumn(hash.getData(), data);
 }
 
 TEST(WeakHash32, ColumnArray)
@@ -502,15 +490,7 @@ TEST(WeakHash32, ColumnArray)
     WeakHash32 hash(col_arr->size());
     col_arr->updateWeakHash32(hash);
 
-    auto print_function = [&col_arr](size_t row)
-    {
-        auto & offsets = col_arr->getOffsets();
-        size_t s = offsets[row] - offsets[row - 1];
-        auto value = col_arr->getData().getUInt(offsets[row]);
-        return std::string("[array of size ") + std::to_string(s) + " with values " + std::to_string(value) + "]";
-    };
-
-    checkColumn(hash.getData(), eq_data, print_function);
+    checkColumn(hash.getData(), eq_data);
 }
 
 TEST(WeakHash32, ColumnArray2)
@@ -545,15 +525,7 @@ TEST(WeakHash32, ColumnArray2)
     WeakHash32 hash(col_arr->size());
     col_arr->updateWeakHash32(hash);
 
-    auto print_function = [&col_arr](size_t row)
-    {
-        auto & offsets = col_arr->getOffsets();
-        auto value1 = col_arr->getData().getUInt(offsets[row]);
-        auto value2 = col_arr->getData().getUInt(offsets[row] + 1);
-        return std::string("[") + std::to_string(value1) + ", " + std::to_string(value2) + "]";
-    };
-
-    checkColumn(hash.getData(), eq_data, print_function);
+    checkColumn(hash.getData(), eq_data);
 }
 
 TEST(WeakHash32, ColumnArrayArray)
@@ -610,20 +582,7 @@ TEST(WeakHash32, ColumnArrayArray)
     WeakHash32 hash(col_arr_arr->size());
     col_arr_arr->updateWeakHash32(hash);
 
-    auto print_function = [&col_arr_arr](size_t row2)
-    {
-        auto & offsets2 = col_arr_arr->getOffsets();
-        size_t s2 = offsets2[row2] - offsets2[row2 - 1];
-        const auto & arr2 = typeid_cast<const ColumnArray &>(col_arr_arr->getData());
-        const auto & offsets = arr2.getOffsets();
-        size_t row = offsets2[row2];
-        size_t s = offsets[row] - offsets[row - 1];
-        auto value = arr2.getData().getUInt(offsets[row]);
-        return std::string("[array of size ") + std::to_string(s2) + " with values ["
-                                "[[array of size " + std::to_string(s) + " with values " + std::to_string(value) + "]]";
-    };
-
-    checkColumn(hash.getData(), eq_data, print_function);
+    checkColumn(hash.getData(), eq_data);
 }
 
 TEST(WeakHash32, ColumnConst)
@@ -642,7 +601,7 @@ TEST(WeakHash32, ColumnConst)
     WeakHash32 hash(col_const->size());
     col_const->updateWeakHash32(hash);
 
-    checkColumn(hash.getData(), data, [&](size_t) { return std::to_string(0); });
+    checkColumn(hash.getData(), data);
 }
 
 TEST(WeakHash32, ColumnLowcardinality)
@@ -663,7 +622,7 @@ TEST(WeakHash32, ColumnLowcardinality)
     WeakHash32 hash(col->size());
     col->updateWeakHash32(hash);
 
-    checkColumn(hash.getData(), data, [&](size_t row) { return std::to_string(col->getUInt(row)); });
+    checkColumn(hash.getData(), data);
 }
 
 TEST(WeakHash32, ColumnNullable)
@@ -689,7 +648,7 @@ TEST(WeakHash32, ColumnNullable)
     WeakHash32 hash(col_null->size());
     col_null->updateWeakHash32(hash);
 
-    checkColumn(hash.getData(), eq, [&](size_t row) { return eq[row] == -1 ? "Null" : std::to_string(eq[row]); });
+    checkColumn(hash.getData(), eq);
 }
 
 TEST(WeakHash32, ColumnTupleUInt64UInt64)
@@ -720,14 +679,7 @@ TEST(WeakHash32, ColumnTupleUInt64UInt64)
     WeakHash32 hash(col_tuple->size());
     col_tuple->updateWeakHash32(hash);
 
-    auto print_func = [&](size_t row)
-    {
-        std::string l = std::to_string(col_tuple->getColumn(0).getUInt(row));
-        std::string r = std::to_string(col_tuple->getColumn(1).getUInt(row));
-        return "(" + l + ", " + r + ")";
-    };
-
-    checkColumn(hash.getData(), eq, print_func);
+    checkColumn(hash.getData(), eq);
 }
 
 TEST(WeakHash32, ColumnTupleUInt64String)
@@ -765,15 +717,8 @@ TEST(WeakHash32, ColumnTupleUInt64String)
     WeakHash32 hash(col_tuple->size());
     col_tuple->updateWeakHash32(hash);
 
-    auto print_func = [&](size_t row)
-    {
-        std::string l = std::to_string(col_tuple->getColumn(0).getUInt(row));
-        std::string r = col_tuple->getColumn(1).getDataAt(row).toString();
-        return "(" + l + ", " + r + ")";
-    };
-
     size_t allowed_collisions = 8;
-    checkColumn(hash.getData(), eq, print_func, allowed_collisions);
+    checkColumn(hash.getData(), eq, allowed_collisions);
 }
 
 TEST(WeakHash32, ColumnTupleUInt64FixedString)
@@ -811,14 +756,7 @@ TEST(WeakHash32, ColumnTupleUInt64FixedString)
     WeakHash32 hash(col_tuple->size());
     col_tuple->updateWeakHash32(hash);
 
-    auto print_func = [&](size_t row)
-    {
-        std::string l = std::to_string(col_tuple->getColumn(0).getUInt(row));
-        std::string r = col_tuple->getColumn(1).getDataAt(row).toString();
-        return "(" + l + ", " + r + ")";
-    };
-
-    checkColumn(hash.getData(), eq, print_func);
+    checkColumn(hash.getData(), eq);
 }
 
 TEST(WeakHash32, ColumnTupleUInt64Array)
@@ -865,23 +803,10 @@ TEST(WeakHash32, ColumnTupleUInt64Array)
     WeakHash32 hash(col_tuple->size());
     col_tuple->updateWeakHash32(hash);
 
-    auto print_func = [&](size_t row)
-    {
-        std::string l = std::to_string(col_tuple->getColumn(0).getUInt(row));
-
-        const auto * col_arr = typeid_cast<const ColumnArray *>(col_tuple->getColumnPtr(1).get());
-        const auto & offsets = col_arr->getOffsets();
-        size_t s = offsets[row] - offsets[row - 1];
-        auto value = col_arr->getData().getUInt(offsets[row]);
-        auto r = std::string("[array of size ") + std::to_string(s) + " with values " + std::to_string(value) + "]";
-
-        return "(" + l + ", " + r + ")";
-    };
-
     /// There are 2 collisions right now (repeated 2 times each):
     /// (0, [array of size 1212 with values 7]) vs (0, [array of size 2265 with values 17])
     /// (0, [array of size 558 with values 5]) vs (1, [array of size 879 with values 21])
 
     size_t allowed_collisions = 8;
-    checkColumn(hash.getData(), eq_data, print_func, allowed_collisions);
+    checkColumn(hash.getData(), eq_data, allowed_collisions);
 }
diff --git a/src/Common/tests/gtest_hash_table.cpp b/src/Common/tests/gtest_hash_table.cpp
index 1c673166ca9c..35fb471f07c8 100644
--- a/src/Common/tests/gtest_hash_table.cpp
+++ b/src/Common/tests/gtest_hash_table.cpp
@@ -5,11 +5,17 @@
 
 #include <Common/HashTable/HashMap.h>
 #include <Common/HashTable/HashSet.h>
+#include <Common/HashTable/Hash.h>
 
 #include <IO/ReadBufferFromString.h>
+#include <IO/WriteHelpers.h>
 
 #include <gtest/gtest.h>
 
+
+using namespace DB;
+
+
 /// To test dump functionality without using other hashes that can change
 template <typename T>
 struct DummyHash
@@ -18,12 +24,12 @@ struct DummyHash
 };
 
 template<typename HashTable>
-std::set<typename HashTable::value_type> convertToSet(const HashTable& table)
+std::set<std::string> convertToSet(const HashTable & table)
 {
-    std::set<typename HashTable::value_type> result;
+    std::set<std::string> result;
 
     for (auto v: table)
-        result.emplace(v.getValue());
+        result.emplace(toString(v.getValue()));
 
     return result;
 }
@@ -91,8 +97,8 @@ TEST(HashTable, Iteration)
     cont.insert(2);
     cont.insert(3);
 
-    std::set<int> expected = {1, 2, 3};
-    std::set<int> actual = convertToSet(cont);
+    std::set<std::string> expected = {"1", "2", "3"};
+    std::set<std::string> actual = convertToSet(cont);
 
     ASSERT_EQ(actual, expected);
 }
@@ -251,14 +257,14 @@ TEST(HashTable, SerializationDeserialization)
         cont.insert(2);
         cont.insert(3);
 
-        DB::WriteBufferFromOwnString wb;
+        WriteBufferFromOwnString wb;
         cont.writeText(wb);
 
         std::string expected = "3,1,2,3";
 
         ASSERT_EQ(wb.str(), expected);
 
-        DB::ReadBufferFromString rb(expected);
+        ReadBufferFromString rb(expected);
 
         Cont deserialized;
         deserialized.readText(rb);
@@ -273,10 +279,10 @@ TEST(HashTable, SerializationDeserialization)
         cont.insert(2);
         cont.insert(3);
 
-        DB::WriteBufferFromOwnString wb;
+        WriteBufferFromOwnString wb;
         cont.write(wb);
 
-        DB::ReadBufferFromString rb(wb.str());
+        ReadBufferFromString rb(wb.str());
 
         Cont deserialized;
         deserialized.read(rb);
@@ -286,23 +292,23 @@ TEST(HashTable, SerializationDeserialization)
         using Cont = HashSet<int, DummyHash<int>, HashTableGrower<1>>;
         Cont cont;
 
-        DB::WriteBufferFromOwnString wb;
+        WriteBufferFromOwnString wb;
         cont.writeText(wb);
 
         std::string expected = "0";
         ASSERT_EQ(wb.str(), expected);
 
-        DB::ReadBufferFromString rb(expected);
+        ReadBufferFromString rb(expected);
 
         Cont deserialized;
         deserialized.readText(rb);
         ASSERT_EQ(convertToSet(cont), convertToSet(deserialized));
     }
     {
-        using Cont = HashSet<DB::UInt128, DB::UInt128TrivialHash>;
+        using Cont = HashSet<UInt128, UInt128TrivialHash>;
         Cont cont;
 
-        DB::WriteBufferFromOwnString wb;
+        WriteBufferFromOwnString wb;
         cont.write(wb);
 
         std::string expected;
@@ -310,7 +316,7 @@ TEST(HashTable, SerializationDeserialization)
 
         ASSERT_EQ(wb.str(), expected);
 
-        DB::ReadBufferFromString rb(expected);
+        ReadBufferFromString rb(expected);
 
         Cont deserialized;
         deserialized.read(rb);
@@ -359,8 +365,8 @@ TEST(HashTable, Resize)
         cont.insert(3);
         cont.insert(1);
 
-        std::set<int> expected = {1, 3};
-        std::set<int> actual = convertToSet(cont);
+        std::set<std::string> expected = {"1", "3"};
+        std::set<std::string> actual = convertToSet(cont);
 
         ASSERT_EQ(actual, expected);
     }
diff --git a/src/Common/tests/gtest_pod_array.cpp b/src/Common/tests/gtest_pod_array.cpp
index 2f41f641b097..74fbf447f29a 100644
--- a/src/Common/tests/gtest_pod_array.cpp
+++ b/src/Common/tests/gtest_pod_array.cpp
@@ -459,18 +459,6 @@ TEST(Common, PODArrayInsertFromItself)
     }
 }
 
-TEST(Common, PODPushBackRawMany)
-{
-    PODArray<char> chars;
-    chars.push_back_raw_many(5, "first");
-    EXPECT_EQ(std::string("first"), std::string(chars.data(), chars.size()));
-    EXPECT_EQ(5, chars.size());
-    EXPECT_LE(chars.capacity() - chars.size(), 10);
-    chars.push_back_raw_many(10, "0123456789");
-    EXPECT_EQ(15, chars.size());
-    EXPECT_EQ(std::string("first0123456789"), std::string(chars.data(), chars.size()));
-}
-
 TEST(Common, PODNoOverallocation)
 {
     /// Check that PaddedPODArray allocates for smaller number of elements than the power of two due to padding.
diff --git a/src/Common/tests/gtest_wide_integer.cpp b/src/Common/tests/gtest_wide_integer.cpp
new file mode 100644
index 000000000000..982bbee804ef
--- /dev/null
+++ b/src/Common/tests/gtest_wide_integer.cpp
@@ -0,0 +1,281 @@
+#include <gtest/gtest.h>
+
+#include <cstdint>
+#include <limits>
+#include <type_traits>
+#include <initializer_list>
+
+#include <Core/Types.h>
+#include <IO/WriteHelpers.h>
+#include <IO/ReadHelpers.h>
+#include <common/demangle.h>
+
+
+static_assert(is_signed_v<Int128>);
+static_assert(!is_unsigned_v<Int128>);
+static_assert(is_integer_v<Int128>);
+static_assert(sizeof(Int128) == 16);
+
+static_assert(is_signed_v<Int256>);
+static_assert(!is_unsigned_v<Int256>);
+static_assert(is_integer_v<Int256>);
+static_assert(sizeof(Int256) == 32);
+
+static_assert(!is_signed_v<UInt128>);
+static_assert(is_unsigned_v<UInt128>);
+static_assert(is_integer_v<UInt128>);
+static_assert(sizeof(UInt128) == 16);
+
+static_assert(!is_signed_v<UInt256>);
+static_assert(is_unsigned_v<UInt256>);
+static_assert(is_integer_v<UInt256>);
+static_assert(sizeof(UInt256) == 32);
+
+
+using namespace DB;
+
+
+GTEST_TEST(WideInteger, Conversions)
+{
+    ASSERT_EQ(toString(UInt128(12345678901234567890ULL)), "12345678901234567890");
+    ASSERT_EQ(toString(UInt256(12345678901234567890ULL)), "12345678901234567890");
+
+    Int128 minus_one = -1;
+    ASSERT_EQ(minus_one.items[0], -1);
+    ASSERT_EQ(minus_one.items[1], -1);
+
+    ASSERT_EQ(0, memcmp(&minus_one, "\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF", sizeof(minus_one)));
+
+    ASSERT_EQ(minus_one, -1);
+    ASSERT_EQ(minus_one, -1LL);
+    ASSERT_EQ(minus_one, Int8(-1));
+    ASSERT_EQ(minus_one, Int16(-1));
+    ASSERT_EQ(minus_one, Int32(-1));
+    ASSERT_EQ(minus_one, Int64(-1));
+
+    ASSERT_LT(minus_one, 0);
+
+    Int128 zero = 0;
+    zero += -1;
+    ASSERT_EQ(zero, -1);
+    ASSERT_EQ(zero, minus_one);
+
+    zero += minus_one;
+    ASSERT_EQ(0, memcmp(&zero, "\xFE\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF", sizeof(zero)));
+
+    zero += 2;
+    ASSERT_EQ(zero, 0);
+
+    ASSERT_EQ(toString(Int128(-1)), "-1");
+    ASSERT_EQ(toString(Int256(-1)), "-1");
+
+    ASSERT_EQ(toString(Int128(-1LL)), "-1");
+    ASSERT_EQ(toString(Int256(-1LL)), "-1");
+
+    ASSERT_EQ(toString(Int128(-1234567890123456789LL)), "-1234567890123456789");
+    ASSERT_EQ(toString(Int256(-1234567890123456789LL)), "-1234567890123456789");
+
+    ASSERT_EQ(UInt64(UInt128(12345678901234567890ULL)), 12345678901234567890ULL);
+    ASSERT_EQ(UInt64(UInt256(12345678901234567890ULL)), 12345678901234567890ULL);
+
+    ASSERT_EQ(__uint128_t(UInt128(12345678901234567890ULL)), 12345678901234567890ULL);
+    ASSERT_EQ(__uint128_t(UInt256(12345678901234567890ULL)), 12345678901234567890ULL);
+
+    ASSERT_EQ(__int128_t(Int128(-1234567890123456789LL)), -1234567890123456789LL);
+    ASSERT_EQ(__int128_t(Int256(-1234567890123456789LL)), -1234567890123456789LL);
+
+    ASSERT_EQ(toString(Int128(-1)), "-1");
+    ASSERT_EQ(toString(Int256(-1)), "-1");
+
+    ASSERT_EQ(toString(UInt128(123.456)), "123");
+    ASSERT_EQ(toString(UInt256(123.456)), "123");
+    ASSERT_EQ(toString(Int128(-123.456)), "-123");
+    ASSERT_EQ(toString(Int256(-123.456)), "-123");
+
+    ASSERT_EQ(toString(UInt128(123.456f)), "123");
+    ASSERT_EQ(toString(UInt256(123.456f)), "123");
+    ASSERT_EQ(toString(Int128(-123.456f)), "-123");
+    ASSERT_EQ(toString(Int256(-123.456f)), "-123");
+
+    ASSERT_EQ(toString(UInt128(1) * 1000000000 * 1000000000 * 1000000000 * 1000000000), "1000000000000000000000000000000000000");
+    ASSERT_EQ(Float64(UInt128(1) * 1000000000 * 1000000000 * 1000000000 * 1000000000), 1e36);
+
+    ASSERT_EQ(toString(UInt256(1) * 1000000000 * 1000000000 * 1000000000 * 1000000000 * 1000000000 * 1000000000 * 1000000000 * 1000000000),
+        "1000000000000000000000000000000000000000000000000000000000000000000000000");
+    ASSERT_EQ(Float64(UInt256(1) * 1000000000 * 1000000000 * 1000000000 * 1000000000 * 1000000000 * 1000000000 * 1000000000 * 1000000000), 1e72);
+
+    EXPECT_EQ(toString(parse<Int128>("148873535527910577765226390751398592640")), "148873535527910577765226390751398592640");
+    EXPECT_EQ(toString(parse<UInt128>("148873535527910577765226390751398592640")), "148873535527910577765226390751398592640");
+}
+
+
+template <typename T>
+static T divide(T & numerator, T && denominator)
+{
+    if (!denominator)
+        throwError("Division by zero");
+
+    T & n = numerator;
+    T & d = denominator;
+    T x = 1;
+    T quotient = 0;
+
+    /// Multiply d to the power of two until it will be greater than n.
+    /// The factor will be collected in x.
+    while (d <= n && ((d >> (sizeof(T) * 8 - 1)) & 1) == 0)
+    {
+        x <<= 1;
+        d <<= 1;
+    }
+
+    std::cerr << toString(x) << ", " << toString(d) << "
";
+
+    while (x)
+    {
+        if (d <= n)
+        {
+            n -= d;
+            quotient |= x;
+        }
+
+        x >>= 1;
+        d >>= 1;
+    }
+
+    return quotient;
+}
+
+
+GTEST_TEST(WideInteger, Arithmetic)
+{
+    Int128 minus_one = -1;
+    Int128 zero = 0;
+
+    zero += -1;
+    ASSERT_EQ(zero, -1);
+    ASSERT_EQ(zero, minus_one);
+
+    zero += minus_one;
+    ASSERT_EQ(0, memcmp(&zero, "\xFE\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF", sizeof(zero)));
+
+    zero += 2;
+    ASSERT_EQ(zero, 0);
+
+    ASSERT_EQ(UInt256(12345678901234567890ULL) * 12345678901234567890ULL / 12345678901234567890ULL, 12345678901234567890ULL);
+    ASSERT_EQ(UInt256(12345678901234567890ULL) * UInt256(12345678901234567890ULL) / 12345678901234567890ULL, 12345678901234567890ULL);
+    ASSERT_EQ(UInt256(12345678901234567890ULL) * 12345678901234567890ULL / UInt256(12345678901234567890ULL), 12345678901234567890ULL);
+    ASSERT_EQ(UInt256(12345678901234567890ULL) * 12345678901234567890ULL / 12345678901234567890ULL, UInt256(12345678901234567890ULL));
+    ASSERT_EQ(UInt128(12345678901234567890ULL) * 12345678901234567890ULL / UInt128(12345678901234567890ULL), 12345678901234567890ULL);
+    ASSERT_EQ(UInt256(12345678901234567890ULL) * UInt128(12345678901234567890ULL) / 12345678901234567890ULL, 12345678901234567890ULL);
+
+    ASSERT_EQ(Int128(0) + Int32(-1), Int128(-1));
+
+    Int128 x(parse<Int128>("148873535527910577765226390751398592640"));
+    Int128 dividend = x / 10;
+    ASSERT_EQ(toString(dividend), "14887353552791057776522639075139859264");
+}
+
+
+GTEST_TEST(WideInteger, DecimalArithmetic)
+{
+    Decimal128 zero{};
+    Decimal32 addend = -1000;
+
+    zero += Decimal128(addend);
+    ASSERT_EQ(zero.value, -1000);
+
+    zero += addend;
+    ASSERT_EQ(zero.value, -2000);
+}
+
+
+GTEST_TEST(WideInteger, FromDouble)
+{
+    /// Check that we are being able to convert double to big integer without the help of floating point instructions.
+    /// (a prototype of a function that we may need)
+
+    double f = -123.456;
+    UInt64 u;
+    memcpy(&u, &f, sizeof(f));
+
+    bool is_negative = u >> 63;
+    uint16_t exponent = (u >> 52) & (((1ull << 12) - 1) >> 1);
+    int16_t normalized_exponent = exponent - 1023;
+    UInt64 mantissa = u & ((1ull << 52) - 1);
+
+    // std::cerr << is_negative << ", " << normalized_exponent << ", " << mantissa << "
";
+
+    /// x = sign * (2 ^ normalized_exponent + mantissa * 2 ^ (normalized_exponent - mantissa_bits))
+
+    Int128 res = 0;
+
+    if (normalized_exponent >= 128)
+    {
+    }
+    else
+    {
+        res = mantissa;
+        if (normalized_exponent > 52)
+            res <<= (normalized_exponent - 52);
+        else
+            res >>= (52 - normalized_exponent);
+
+        if (normalized_exponent > 0)
+            res += Int128(1) << normalized_exponent;
+    }
+
+    if (is_negative)
+        res = -res;
+
+    ASSERT_EQ(toString(res), "-123");
+}
+
+
+GTEST_TEST(WideInteger, Shift)
+{
+    Int128 x = 1;
+
+    auto y = x << 64;
+    ASSERT_EQ(0, memcmp(&y, "\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00", sizeof(Int128)));
+
+    auto z = y << 11;
+    ASSERT_EQ(toString(z), "37778931862957161709568");
+
+    auto a = x << 11;
+    ASSERT_EQ(a, 2048);
+
+    z >>= 64;
+    ASSERT_EQ(z, a);
+
+    x = -1;
+    y = x << 16;
+
+    ASSERT_EQ(0, memcmp(&y, "\x00\x00\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF", sizeof(Int128)));
+
+    y >>= 16;
+    ASSERT_EQ(0, memcmp(&y, "\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF", sizeof(Int128)));
+
+    y <<= 64;
+    ASSERT_EQ(0, memcmp(&y, "\x00\x00\x00\x00\x00\x00\x00\x00\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF", sizeof(Int128)));
+
+    y >>= 32;
+    ASSERT_EQ(0, memcmp(&y, "\x00\x00\x00\x00\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF", sizeof(Int128)));
+
+    y <<= 64;
+    ASSERT_EQ(0, memcmp(&y, "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xFF\xFF\xFF\xFF", sizeof(Int128)));
+}
+
+
+GTEST_TEST(WideInteger, DecimalFormatting)
+{
+    Decimal128 x(parse<Int128>("148873535527910577765226390751398592640"));
+
+    EXPECT_EQ(toString(x.value), "148873535527910577765226390751398592640");
+    EXPECT_EQ(toString(x.value / 10), "14887353552791057776522639075139859264");
+    EXPECT_EQ(toString(x.value % 10), "0");
+
+    Int128 fractional = DecimalUtils::getFractionalPart(x, 2);
+
+    EXPECT_EQ(fractional, 40);
+    EXPECT_EQ(decimalFractional(fractional, 2), "40");
+}
diff --git a/src/Core/tests/gtest_accurate_comparison.cpp b/src/Core/tests/gtest_accurate_comparison.cpp
new file mode 100644
index 000000000000..bac4ad3d72df
--- /dev/null
+++ b/src/Core/tests/gtest_accurate_comparison.cpp
@@ -0,0 +1,76 @@
+#include <gtest/gtest.h>
+#include <Core/AccurateComparison.h>
+
+using namespace DB;
+
+
+GTEST_TEST(AccurateComparison, Tests)
+{
+    /// Arbitrary assortion of cases.
+
+    ASSERT_TRUE(accurate::equalsOp(static_cast<Float32>(123), static_cast<UInt64>(123)));
+    ASSERT_TRUE(accurate::lessOp(static_cast<Float32>(123), static_cast<UInt64>(124)));
+    ASSERT_TRUE(accurate::lessOp(static_cast<Float32>(-1), static_cast<UInt64>(1)));
+    ASSERT_TRUE(accurate::lessOp(static_cast<Int64>(-1), static_cast<UInt64>(1)));
+    ASSERT_TRUE(!accurate::equalsOp(static_cast<Int64>(-1), static_cast<UInt64>(-1)));
+
+    ASSERT_TRUE(accurate::equalsOp(-0., 0));
+    ASSERT_TRUE(accurate::lessOp(-0., 1));
+    ASSERT_TRUE(accurate::lessOp(-0.5, 1));
+    ASSERT_TRUE(accurate::lessOp(0.5, 1));
+    ASSERT_TRUE(accurate::equalsOp(1.0, 1));
+    ASSERT_TRUE(accurate::greaterOp(1.1, 1));
+    ASSERT_TRUE(accurate::greaterOp(11.1, 1));
+    ASSERT_TRUE(accurate::greaterOp(11.1, 11));
+    ASSERT_TRUE(accurate::lessOp(-11.1, 11));
+    ASSERT_TRUE(accurate::lessOp(-11.1, -11));
+    ASSERT_TRUE(accurate::lessOp(-1.1, -1));
+    ASSERT_TRUE(accurate::greaterOp(-1.1, -2));
+    ASSERT_TRUE(accurate::greaterOp(1000., 100));
+    ASSERT_TRUE(accurate::greaterOp(-100., -1000));
+    ASSERT_TRUE(accurate::lessOp(100., 1000));
+    ASSERT_TRUE(accurate::lessOp(-1000., -100));
+
+    ASSERT_TRUE(accurate::lessOp(-std::numeric_limits<Float64>::infinity(), 0));
+    ASSERT_TRUE(accurate::lessOp(-std::numeric_limits<Float64>::infinity(), 1000));
+    ASSERT_TRUE(accurate::lessOp(-std::numeric_limits<Float64>::infinity(), -1000));
+    ASSERT_TRUE(accurate::greaterOp(std::numeric_limits<Float64>::infinity(), 0));
+    ASSERT_TRUE(accurate::greaterOp(std::numeric_limits<Float64>::infinity(), 1000));
+    ASSERT_TRUE(accurate::greaterOp(std::numeric_limits<Float64>::infinity(), -1000));
+
+    ASSERT_TRUE(accurate::lessOp(1, 1e100));
+    ASSERT_TRUE(accurate::lessOp(-1, 1e100));
+    ASSERT_TRUE(accurate::lessOp(-1e100, 1));
+    ASSERT_TRUE(accurate::lessOp(-1e100, -1));
+
+    /// Tricky cases with floats.
+
+    ASSERT_TRUE(accurate::equalsOp(static_cast<UInt64>(9223372036854775808ULL), static_cast<Float64>(9223372036854775808ULL)));
+    ASSERT_TRUE(accurate::equalsOp(static_cast<UInt64>(9223372036854775808ULL), static_cast<Float32>(9223372036854775808ULL)));
+
+    ASSERT_TRUE(accurate::greaterOp(static_cast<UInt64>(9223372036854776000ULL), static_cast<Float64>(9223372036854776000ULL)));
+    ASSERT_TRUE(accurate::lessOp(static_cast<UInt64>(9223372000000000000ULL), static_cast<Float32>(9223372000000000000ULL)));
+
+    ASSERT_TRUE(accurate::equalsOp(static_cast<Float32>(9223372036854775808ULL), static_cast<Float64>(9223372036854775808ULL)));
+
+    /// Integers
+
+    ASSERT_TRUE(accurate::lessOp(static_cast<UInt8>(255), 300));
+    ASSERT_TRUE(accurate::lessOp(static_cast<UInt8>(255), static_cast<Int16>(300)));
+    ASSERT_TRUE(accurate::notEqualsOp(static_cast<UInt8>(255), 44));
+    ASSERT_TRUE(accurate::notEqualsOp(static_cast<UInt8>(255), static_cast<Int16>(44)));
+
+
+/*    Float32 f = static_cast<Float32>(9223372000000000000ULL);
+    UInt64 u = static_cast<UInt64>(9223372000000000000ULL);
+    DecomposedFloat32 components(f);
+
+    std::cerr << std::fixed << std::setprecision(3) << f
+        << ", " << components.normalized_exponent()
+        << ", " << components.mantissa()
+        << ", " << (components.mantissa() << (components.normalized_exponent() - 23))
+        << ", " << (1ULL << components.normalized_exponent())
+        << ", " << (components.normalized_exponent() >= static_cast<int16_t>(8 * sizeof(UInt64) - is_signed_v<UInt64>))
+        << ": " << components.compare(u)
+        << "
";*/
+}
diff --git a/src/Storages/MergeTree/tests/gtest_ReplicatedMergeTreeLogEntry.cpp b/src/Storages/MergeTree/tests/gtest_ReplicatedMergeTreeLogEntry.cpp
deleted file mode 100644
index 03f36d866bb3..000000000000
--- a/src/Storages/MergeTree/tests/gtest_ReplicatedMergeTreeLogEntry.cpp
+++ /dev/null
@@ -1,348 +0,0 @@
-#include <Storages/MergeTree/ReplicatedMergeTreeLogEntry.h>
-
-#include <IO/ReadBufferFromString.h>
-
-#include <Core/iostream_debug_helpers.h>
-
-#include <type_traits>
-#include <regex>
-
-#include <gtest/gtest.h>
-
-namespace DB
-{
-std::ostream & operator<<(std::ostream & ostr, const MergeTreeDataPartType & type)
-{
-    return ostr << type.toString();
-}
-
-std::ostream & operator<<(std::ostream & ostr, const UInt128 & v)
-{
-    return ostr << v.toHexString();
-}
-
-template <typename T, typename Tag>
-std::ostream & operator<<(std::ostream & ostr, const StrongTypedef<T, Tag> & v)
-{
-    return ostr << v.toUnderType();
-}
-
-std::ostream & operator<<(std::ostream & ostr, const MergeType & v)
-{
-    return ostr << toString(v);
-}
-
-}
-
-namespace std
-{
-
-std::ostream & operator<<(std::ostream & ostr, const std::exception_ptr & exception)
-{
-    try
-    {
-        if (exception)
-        {
-            std::rethrow_exception(exception);
-        }
-        return ostr << "<NULL EXCEPTION>";
-    }
-    catch (const std::exception& e)
-    {
-        return ostr << e.what();
-    }
-}
-
-template <typename T>
-inline std::ostream& operator<<(std::ostream & ostr, const std::vector<T> & v)
-{
-    ostr << "[";
-    for (size_t i = 0; i < v.size(); ++i)
-    {
-        ostr << i;
-        if (i != v.size() - 1)
-            ostr << ", ";
-    }
-    return ostr << "] (" << v.size() << ") items";
-}
-
-}
-
-namespace
-{
-using namespace DB;
-
-template <typename T>
-void compareAttributes(::testing::AssertionResult & result, const char * name, const T & expected_value, const T & actual_value);
-
-#define CMP_ATTRIBUTE(attribute) compareAttributes(result, #attribute, expected.attribute, actual.attribute)
-
-::testing::AssertionResult compare(
-        const ReplicatedMergeTreeLogEntryData::ReplaceRangeEntry & expected,
-        const ReplicatedMergeTreeLogEntryData::ReplaceRangeEntry & actual)
-{
-    auto result = ::testing::AssertionSuccess();
-
-    CMP_ATTRIBUTE(drop_range_part_name);
-    CMP_ATTRIBUTE(from_database);
-    CMP_ATTRIBUTE(from_table);
-    CMP_ATTRIBUTE(src_part_names);
-    CMP_ATTRIBUTE(new_part_names);
-    CMP_ATTRIBUTE(part_names_checksums);
-    CMP_ATTRIBUTE(columns_version);
-
-    return result;
-}
-
-template <typename T>
-bool compare(const T & expected, const T & actual)
-{
-    return expected == actual;
-}
-
-template <typename T>
-::testing::AssertionResult compare(const std::shared_ptr<T> & expected, const std::shared_ptr<T> & actual)
-{
-    if (!!expected != !!actual)
-        return ::testing::AssertionFailure()
-                << "expected : " << static_cast<const void*>(expected.get())
-                << "
actual   : " << static_cast<const void*>(actual.get());
-
-    if (expected && actual)
-        return compare(*expected, *actual);
-
-    return ::testing::AssertionSuccess();
-}
-
-template <typename T>
-void compareAttributes(::testing::AssertionResult & result, const char * name, const T & expected_value, const T & actual_value)
-{
-    const auto cmp_result = compare(expected_value, actual_value);
-    if (cmp_result == false)
-    {
-        if (result)
-            result = ::testing::AssertionFailure();
-
-        result << "
Mismatching attribute: \"" << name << "\"";
-        if constexpr (std::is_same_v<std::decay_t<decltype(cmp_result)>, ::testing::AssertionResult>)
-            result << "
" << cmp_result.message();
-        else
-            result << "
\texpected: " << expected_value
-                   << "
\tactual  : " << actual_value;
-    }
-};
-
-::testing::AssertionResult compare(const ReplicatedMergeTreeLogEntryData & expected, const ReplicatedMergeTreeLogEntryData & actual)
-{
-    ::testing::AssertionResult result = ::testing::AssertionSuccess();
-
-    CMP_ATTRIBUTE(znode_name);
-    CMP_ATTRIBUTE(type);
-    CMP_ATTRIBUTE(source_replica);
-    CMP_ATTRIBUTE(new_part_name);
-    CMP_ATTRIBUTE(new_part_type);
-    CMP_ATTRIBUTE(block_id);
-    CMP_ATTRIBUTE(actual_new_part_name);
-    CMP_ATTRIBUTE(new_part_uuid);
-    CMP_ATTRIBUTE(source_parts);
-    CMP_ATTRIBUTE(deduplicate);
-    CMP_ATTRIBUTE(deduplicate_by_columns);
-    CMP_ATTRIBUTE(merge_type);
-    CMP_ATTRIBUTE(column_name);
-    CMP_ATTRIBUTE(index_name);
-    CMP_ATTRIBUTE(detach);
-    CMP_ATTRIBUTE(replace_range_entry);
-    CMP_ATTRIBUTE(alter_version);
-    CMP_ATTRIBUTE(have_mutation);
-    CMP_ATTRIBUTE(columns_str);
-    CMP_ATTRIBUTE(metadata_str);
-    CMP_ATTRIBUTE(currently_executing);
-    CMP_ATTRIBUTE(removed_by_other_entry);
-    CMP_ATTRIBUTE(num_tries);
-    CMP_ATTRIBUTE(exception);
-    CMP_ATTRIBUTE(last_attempt_time);
-    CMP_ATTRIBUTE(num_postponed);
-    CMP_ATTRIBUTE(postpone_reason);
-    CMP_ATTRIBUTE(last_postpone_time);
-    CMP_ATTRIBUTE(create_time);
-    CMP_ATTRIBUTE(quorum);
-
-    return result;
-}
-}
-
-
-class ReplicatedMergeTreeLogEntryDataTest : public ::testing::TestWithParam<std::tuple<ReplicatedMergeTreeLogEntryData, const char* /* serialized RE*/>>
-{};
-
-TEST_P(ReplicatedMergeTreeLogEntryDataTest, transcode)
-{
-    const auto & [expected, match_regex] = GetParam();
-    const auto str = expected.toString();
-
-    if (match_regex)
-    {
-        try
-        {
-            // egrep since "." matches newline and we can also use "
" explicitly
-            std::regex re(match_regex, std::regex::egrep);
-            EXPECT_TRUE(std::regex_match(str, re))
-                    << "Failed to match serialized ReplicatedMergeTreeLogEntryData: {
"
-                    << str << "} 
with regex: \"" << match_regex << "\"
";
-        }
-        catch (const std::regex_error &e)
-        {
-            FAIL() << e.what()
-                   << " on regex: " << match_regex
-                   << " (" << strlen(match_regex) << " bytes)" << std::endl;
-        }
-        catch (...)
-        {
-            throw;
-        }
-    }
-
-    ReplicatedMergeTreeLogEntryData actual;
-    {
-        DB::ReadBufferFromString buffer(str);
-        EXPECT_NO_THROW(actual.readText(buffer)) << "While reading:
" << str;
-    }
-
-    ASSERT_TRUE(compare(expected, actual)) << "Via text:
" << str;
-}
-
-// Enabling this warning would ruin test brievity without adding anything else in return,
-// since most of the fields have default constructors or be will be zero-initialized as by standard,
-// so values are predicatable and stable across runs.
-#pragma GCC diagnostic push
-#pragma GCC diagnostic ignored "-Wmissing-field-initializers"
-
-INSTANTIATE_TEST_SUITE_P(Merge, ReplicatedMergeTreeLogEntryDataTest,
-        ::testing::ValuesIn(std::initializer_list<std::tuple<ReplicatedMergeTreeLogEntryData, const char*>>{
-    {
-        {
-            // Basic: minimal set of attributes.
-            .type = ReplicatedMergeTreeLogEntryData::MERGE_PARTS,
-            .new_part_type = MergeTreeDataPartType::WIDE,
-            .create_time = 123, // 0 means 'now' which could cause flaky tests.
-        },
-        R"re(^format version: 4.+merge.+into.+deduplicate: 0.+$)re"
-    },
-    {
-        {
-            .type = ReplicatedMergeTreeLogEntryData::MERGE_PARTS,
-            .new_part_type = MergeTreeDataPartType::WIDE,
-
-            // Format version 4
-            .deduplicate = true,
-
-            .create_time = 123,
-        },
-        R"re(^format version: 4.+merge.+into.+deduplicate: 1.+$)re"
-    },
-    {
-        {
-            .type = ReplicatedMergeTreeLogEntryData::MERGE_PARTS,
-            .new_part_type = MergeTreeDataPartType::WIDE,
-
-            // Format version 5
-            .new_part_uuid = UUID(UInt128(123456789, 10111213141516)),
-
-            .create_time = 123,
-        },
-        R"re(^format version: 5.+merge.+into.+deduplicate: 0.+into_uuid: 00000000-075b-cd15-0000-093233447e0c.+$)re"
-    },
-    {
-        {
-            .type = ReplicatedMergeTreeLogEntryData::MERGE_PARTS,
-            .new_part_type = MergeTreeDataPartType::WIDE,
-
-            // Format version 6
-            .deduplicate = true,
-            .deduplicate_by_columns = {"foo", "bar", "qux"},
-
-            .create_time = 123,
-        },
-        R"re(^format version: 6.+merge.+into.+deduplicate: 1.+deduplicate_by_columns: 'foo','bar','qux'.*$)re"
-    },
-    {
-        {
-            .type = ReplicatedMergeTreeLogEntryData::MERGE_PARTS,
-            .new_part_type = MergeTreeDataPartType::WIDE,
-
-            // Mixing features
-            .new_part_uuid = UUID(UInt128(123456789, 10111213141516)),
-            .deduplicate = true,
-            .deduplicate_by_columns = {"foo", "bar", "qux"},
-
-            .create_time = 123,
-        },
-        R"re(^format version: 6.+merge.+into.+deduplicate: 1.+into_uuid: 00000000-075b-cd15-0000-093233447e0c.+deduplicate_by_columns: 'foo','bar','qux'.*$)re"
-    },
-    {
-        // Validate that exotic column names are serialized/deserialized properly
-        {
-            .type = ReplicatedMergeTreeLogEntryData::MERGE_PARTS,
-            .new_part_type = MergeTreeDataPartType::WIDE,
-
-            // Mixing features
-            .new_part_uuid = UUID(UInt128(123456789, 10111213141516)),
-            .deduplicate = true,
-            .deduplicate_by_columns = {"name with space", "\"column\"", "'column'", "колонка", "\u30ab\u30e9\u30e0", "\x01\x03 column \x10\x11\x12"},
-
-            .create_time = 123,
-        },
-        R"re(^format version: 6.+merge.+deduplicate_by_columns: 'name with space','"column"','\\'column\\'','колонка')re"
-                ",'\u30ab\u30e9\u30e0','\x01\x03 column \x10\x11\x12'.*$"
-    },
-}));
-
-#pragma GCC diagnostic pop
-
-// This is just an example of how to set all fields. Can't be used as is since depending on type,
-// only some fields are serialized/deserialized, and even if everything works perfectly,
-// some fields in deserialized object would be unset (hence differ from expected).
-// INSTANTIATE_TEST_SUITE_P(Full, ReplicatedMergeTreeLogEntryDataTest,
-//         ::testing::ValuesIn(std::initializer_list<ReplicatedMergeTreeLogEntryData>{
-//     {
-//         .znode_name = "znode name",
-//         .type = ReplicatedMergeTreeLogEntryData::MERGE_PARTS,
-//         .source_replica = "source replica",
-//         .new_part_name = "new part name",
-//         .new_part_type = MergeTreeDataPartType::WIDE,
-//         .block_id = "block id",
-//         .actual_new_part_name = "new part name",
-//         .new_part_uuid = UUID(UInt128(123456789, 10111213141516)),
-//         .source_parts = {"part1", "part2"},
-//         .deduplicate = true,
-//         .deduplicate_by_columns = {"col1", "col2"},
-//         .merge_type = MergeType::REGULAR,
-//         .column_name = "column name",
-//         .index_name = "index name",
-//         .detach = false,
-//         .replace_range_entry = std::make_shared<ReplicatedMergeTreeLogEntryData::ReplaceRangeEntry>(
-//             ReplicatedMergeTreeLogEntryData::ReplaceRangeEntry
-//             {
-//                 .drop_range_part_name = "drop range part name",
-//                 .from_database = "from database",
-//                 .src_part_names = {"src part name1", "src part name2"},
-//                 .new_part_names = {"new part name1", "new part name2"},
-//                 .columns_version = 123456,
-//             }),
-//         .alter_version = 56789,
-//         .have_mutation = false,
-//         .columns_str = "columns str",
-//         .metadata_str = "metadata str",
-//         // Those attributes are not serialized to string, hence it makes no sense to set.
-//         // .currently_executing
-//         // .removed_by_other_entry
-//         // .num_tries
-//         // .exception
-//         // .last_attempt_time
-//         // .num_postponed
-//         // .postpone_reason
-//         // .last_postpone_time,
-//         .create_time = static_cast<time_t>(123456789),
-//         .quorum = 321,
-//     },
-// }));
diff --git a/tests/integration/runner b/tests/integration/runner
index e89e10fbc213..ee116c29aa5e 100755
--- a/tests/integration/runner
+++ b/tests/integration/runner
@@ -64,7 +64,7 @@ def check_args_and_update_paths(args):
         args.src_dir = os.path.abspath(os.path.join(CLICKHOUSE_ROOT, SRC_DIR_IN_REPO))
         logging.info("src dir is not set. Will use {}".format(args.src_dir))
 
-    logging.info("base_configs_dir: {},  binary: {}, cases_dir: {} ".format(args.base_configs_dir, args.binary, args.cases_dir))
+    logging.info("base_configs_dir: {}, binary: {}, cases_dir: {} ".format(args.base_configs_dir, args.binary, args.cases_dir))
 
     for path in [args.binary, args.odbc_bridge_binary, args.library_bridge_binary, args.base_configs_dir, args.cases_dir, CLICKHOUSE_ROOT]:
         if not os.path.exists(path):
diff --git a/tests/integration/test_distributed_ddl/test.py b/tests/integration/test_distributed_ddl/test.py
index 9af27738eed2..68d8a2dab53e 100755
--- a/tests/integration/test_distributed_ddl/test.py
+++ b/tests/integration/test_distributed_ddl/test.py
@@ -341,8 +341,8 @@ def test_replicated_without_arguments(test_cluster):
                                  "CREATE TABLE test_atomic.rmt ON CLUSTER cluster (n UInt64, s String) ENGINE=ReplicatedMergeTree('/clickhouse/tables/{uuid}/{shard}', '{replica}') ORDER BY n")
     test_cluster.ddl_check_query(instance,
                                  "EXCHANGE TABLES test_atomic.rmt AND test_atomic.rmt_renamed ON CLUSTER cluster")
-    assert instance.query("SELECT countDistinct(uuid) from clusterAllReplicas('cluster', 'system', 'databases') WHERE uuid != 0 AND name='test_atomic'") == "1
"
-    assert instance.query("SELECT countDistinct(uuid) from clusterAllReplicas('cluster', 'system', 'tables') WHERE uuid != 0 AND name='rmt'") == "1
"
+    assert instance.query("SELECT countDistinct(uuid) from clusterAllReplicas('cluster', 'system', 'databases') WHERE uuid != '00000000-0000-0000-0000-000000000000' AND name='test_atomic'") == "1
"
+    assert instance.query("SELECT countDistinct(uuid) from clusterAllReplicas('cluster', 'system', 'tables') WHERE uuid != '00000000-0000-0000-0000-000000000000' AND name='rmt'") == "1
"
     test_cluster.ddl_check_query(instance,
                                  "CREATE TABLE test_atomic.rrmt ON CLUSTER cluster (n UInt64, m UInt64) ENGINE=ReplicatedReplacingMergeTree(m) ORDER BY n")
     test_cluster.ddl_check_query(instance,
diff --git a/tests/integration/test_distributed_ddl_on_cross_replication/test.py b/tests/integration/test_distributed_ddl_on_cross_replication/test.py
index 85800b2e5e6e..833a3fb1f043 100644
--- a/tests/integration/test_distributed_ddl_on_cross_replication/test.py
+++ b/tests/integration/test_distributed_ddl_on_cross_replication/test.py
@@ -20,23 +20,23 @@ def started_cluster():
         node1.query('''
             CREATE DATABASE replica_1 ON CLUSTER cross_3shards_2replicas;
             CREATE DATABASE replica_2 ON CLUSTER cross_3shards_2replicas;
-            
-            CREATE TABLE replica_1.replicated_local  
+
+            CREATE TABLE replica_1.replicated_local
             ON CLUSTER cross_3shards_2replicas (part_key Date, id UInt32, shard_id UInt32)
-            ENGINE = ReplicatedMergeTree('/clickhouse/tables/{shard}/replicated', '{replica}') 
+            ENGINE = ReplicatedMergeTree('/clickhouse/tables/{shard}/replicated', '{replica}')
             partition by part_key order by id;
-            
-            CREATE TABLE replica_1.replicated  
-            ON CLUSTER cross_3shards_2replicas as replica_1.replicated_local  
+
+            CREATE TABLE replica_1.replicated
+            ON CLUSTER cross_3shards_2replicas as replica_1.replicated_local
             ENGINE = Distributed(cross_3shards_2replicas, '', replicated_local, shard_id);
-                
-            CREATE TABLE replica_2.replicated_local 
+
+            CREATE TABLE replica_2.replicated_local
             ON CLUSTER cross_3shards_2replicas (part_key Date, id UInt32, shard_id UInt32)
-            ENGINE = ReplicatedMergeTree('/clickhouse/tables/{shard_bk}/replicated', '{replica_bk}') 
+            ENGINE = ReplicatedMergeTree('/clickhouse/tables/{shard_bk}/replicated', '{replica_bk}')
             partition by part_key order by id;
-            
-            CREATE TABLE replica_2.replicated  
-            ON CLUSTER cross_3shards_2replicas as replica_2.replicated_local  
+
+            CREATE TABLE replica_2.replicated
+            ON CLUSTER cross_3shards_2replicas as replica_2.replicated_local
             ENGINE = Distributed(cross_3shards_2replicas, '', replicated_local, shard_id);
             ''')
 
@@ -98,8 +98,8 @@ def test_atomic_database(started_cluster):
     node1.query("CREATE TABLE replica_1.rmt ON CLUSTER cross_3shards_2replicas (n UInt64, s String) ENGINE=ReplicatedMergeTree('/tables/{shard}/rmt/', '{replica}') ORDER BY n")
     node1.query("CREATE TABLE replica_2.rmt ON CLUSTER cross_3shards_2replicas (n UInt64, s String) ENGINE=ReplicatedMergeTree('/tables/{shard_bk}/rmt/', '{replica_bk}') ORDER BY n")
 
-    assert node1.query("SELECT countDistinct(uuid) from remote('node1,node2,node3', 'system', 'databases') WHERE uuid != 0 AND name='replica_1'") == "1
"
-    assert node1.query("SELECT countDistinct(uuid) from remote('node1,node2,node3', 'system', 'tables') WHERE uuid != 0 AND name='rmt'") == "2
"
+    assert node1.query("SELECT countDistinct(uuid) from remote('node1,node2,node3', 'system', 'databases') WHERE uuid != '00000000-0000-0000-0000-000000000000' AND name='replica_1'") == "1
"
+    assert node1.query("SELECT countDistinct(uuid) from remote('node1,node2,node3', 'system', 'tables') WHERE uuid != '00000000-0000-0000-0000-000000000000' AND name='rmt'") == "2
"
 
     node1.query("INSERT INTO replica_1.rmt VALUES (1, 'test')")
     node2.query("SYSTEM SYNC REPLICA replica_2.rmt", timeout=5)
diff --git a/tests/performance/single_fixed_string_groupby.xml b/tests/performance/single_fixed_string_groupby.xml
index 6bf5821707f5..8e166a124ff8 100644
--- a/tests/performance/single_fixed_string_groupby.xml
+++ b/tests/performance/single_fixed_string_groupby.xml
@@ -10,8 +10,8 @@
         INSERT INTO perf_lc_fixed_str_groupby SELECT ('number key ' || toString(number % 400)) AS a, ('number key ' || toString(number % 20)) AS b FROM numbers(30000000)
     </fill_query>
 
-    <query short="1">SELECT count() FROM perf_lc_fixed_str_groupby GROUP BY a</query>
-    <query short="1">SELECT count() FROM perf_lc_fixed_str_groupby GROUP BY b</query>
+    <query short="1">SELECT count() FROM perf_lc_fixed_str_groupby GROUP BY a FORMAT Null</query>
+    <query short="1">SELECT count() FROM perf_lc_fixed_str_groupby GROUP BY b FORMAT Null</query>
 
     <drop_query>DROP TABLE IF EXISTS perf_lc_fixed_str_groupby</drop_query>
 </test>
diff --git a/tests/queries/0_stateless/00700_decimal_arithm.reference b/tests/queries/0_stateless/00700_decimal_arithm.reference
index d0040ff5ae2c..9de0d4cbf9a1 100644
--- a/tests/queries/0_stateless/00700_decimal_arithm.reference
+++ b/tests/queries/0_stateless/00700_decimal_arithm.reference
@@ -3,11 +3,13 @@
 84	0	1764	1	1	1
 84.840	0.000	1799.456400	1.000	1.000	1.000
 84.840000000	0.000000000
+84.840000000000000000	0.000000000000000000	98.044565395307682683126962841158942720	1.000000000000000000	1.000000000000000000	1.000000000000000000
 84.840000000000000000	0.000000000000000000
 84.84	0.00	1799.4564	1.00	1.00	1.00
 63	21	-42	882	-882	2	0	2	0
 63	21	-42	882	-882	2	0	2	0
 63	21	-42	882	-882	2	0	2	0
+1.00305798474369219219752355409390731264	-0.16305798474369219219752355409390731264	1.49059173023461586584365185794205286400	-1.38847100762815390390123822295304634368	1.38847100762815390390123822295304634368	0.02000000000000000000000000000000000000	0.00500000000000000000000000000000000000
 63.420	21.420	-41.580	890.820	-890.820	2.020	0.505	2.020	0.505
 63.420000000	21.420000000	-41.580000000	890.820000000	-890.820000000	2.020000000	0.505000000	2.020000000	0.505000000
 63.420000000000000000	21.420000000000000000	-41.580000000000000000	890.820000000000000000	-890.820000000000000000	2.020000000000000000	0.505000000000000000	2.020000000000000000	0.505000000000000000
@@ -15,6 +17,7 @@
 63	-21	42	882	-882	0	2	0	2
 63	-21	42	882	-882	0	2	0	2
 63	-21	42	882	-882	0	2	0	2
+1.00305798474369219219752355409390731264	0.16305798474369219219752355409390731264	-1.49059173023461586584365185794205286400	-1.38847100762815390390123822295304634368	1.38847100762815390390123822295304634368	-0.00000000000000000000000000000000000001	0.00000000000000000000000000000000000001
 63.420	-21.420	41.580	890.820	-890.820	0.495	1.980	0.495	1.980
 63.420000000	-21.420000000	41.580000000	890.820000000	-890.820000000
 63.420000000000000000	-21.420000000000000000	41.580000000000000000	890.820000000000000000	-890.820000000000000000	0.495049504950495049	1.980198019801980198	0.495049504950495049	1.980198019801980198
diff --git a/tests/queries/0_stateless/00700_decimal_arithm.sql b/tests/queries/0_stateless/00700_decimal_arithm.sql
index 3fa2aade7430..c305a850e5b3 100644
--- a/tests/queries/0_stateless/00700_decimal_arithm.sql
+++ b/tests/queries/0_stateless/00700_decimal_arithm.sql
@@ -31,7 +31,7 @@ SELECT f + f, f - f, f * f, f / f, intDiv(f, f), intDivOrZero(f, f) FROM decimal
 SELECT g + g, g - g, g * g, g / g, intDiv(g, g), intDivOrZero(g, g) FROM decimal WHERE g > 0;
 SELECT h + h, h - h, h * h, h / h, intDiv(h, h), intDivOrZero(h, h) FROM decimal WHERE h > 0; -- { serverError 407 }
 SELECT h + h, h - h FROM decimal WHERE h > 0;
-SELECT i + i, i - i, i * i, i / i, intDiv(i, i), intDivOrZero(i, i) FROM decimal WHERE i > 0; -- { serverError 407 }
+SELECT i + i, i - i, i * i, i / i, intDiv(i, i), intDivOrZero(i, i) FROM decimal WHERE i > 0;
 SELECT i + i, i - i FROM decimal WHERE i > 0;
 SELECT j + j, j - j, j * j, j / j, intDiv(j, j), intDivOrZero(j, j) FROM decimal WHERE j > 0;
 
@@ -39,7 +39,7 @@ SELECT a + 21, a - 21, a - 84, a * 21, a * -21, a / 21, a / 84, intDiv(a, 21), i
 SELECT b + 21, b - 21, b - 84, b * 21, b * -21, b / 21, b / 84, intDiv(b, 21), intDivOrZero(b, 84) FROM decimal WHERE b = 42;
 SELECT c + 21, c - 21, c - 84, c * 21, c * -21, c / 21, c / 84, intDiv(c, 21), intDivOrZero(c, 84) FROM decimal WHERE c = 42;
 SELECT e + 21, e - 21, e - 84, e * 21, e * -21, e / 21, e / 84 FROM decimal WHERE e > 0; -- { serverError 407 }
-SELECT f + 21, f - 21, f - 84, f * 21, f * -21, f / 21, f / 84 FROM decimal WHERE f > 0; -- { serverError 407 }
+SELECT f + 21, f - 21, f - 84, f * 21, f * -21, f / 21, f / 84 FROM decimal WHERE f > 0;
 SELECT g + 21, g - 21, g - 84, g * 21, g * -21, g / 21, g / 84, intDiv(g, 21), intDivOrZero(g, 84) FROM decimal WHERE g > 0;
 SELECT h + 21, h - 21, h - 84, h * 21, h * -21, h / 21, h / 84, intDiv(h, 21), intDivOrZero(h, 84) FROM decimal WHERE h > 0;
 SELECT i + 21, i - 21, i - 84, i * 21, i * -21, i / 21, i / 84, intDiv(i, 21), intDivOrZero(i, 84) FROM decimal WHERE i > 0;
@@ -49,7 +49,7 @@ SELECT 21 + a, 21 - a, 84 - a, 21 * a, -21 * a, 21 / a, 84 / a, intDiv(21, a), i
 SELECT 21 + b, 21 - b, 84 - b, 21 * b, -21 * b, 21 / b, 84 / b, intDiv(21, b), intDivOrZero(84, b) FROM decimal WHERE b = 42;
 SELECT 21 + c, 21 - c, 84 - c, 21 * c, -21 * c, 21 / c, 84 / c, intDiv(21, c), intDivOrZero(84, c) FROM decimal WHERE c = 42;
 SELECT 21 + e, 21 - e, 84 - e, 21 * e, -21 * e, 21 / e, 84 / e FROM decimal WHERE e > 0; -- { serverError 407 }
-SELECT 21 + f, 21 - f, 84 - f, 21 * f, -21 * f, 21 / f, 84 / f FROM decimal WHERE f > 0; -- { serverError 407 }
+SELECT 21 + f, 21 - f, 84 - f, 21 * f, -21 * f, 21 / f, 84 / f FROM decimal WHERE f > 0;
 SELECT 21 + g, 21 - g, 84 - g, 21 * g, -21 * g, 21 / g, 84 / g, intDiv(21, g), intDivOrZero(84, g) FROM decimal WHERE g > 0;
 SELECT 21 + h, 21 - h, 84 - h, 21 * h, -21 * h, 21 / h, 84 / h FROM decimal WHERE h > 0; -- { serverError 407 }
 SELECT 21 + h, 21 - h, 84 - h, 21 * h, -21 * h FROM decimal WHERE h > 0;
diff --git a/tests/queries/0_stateless/00700_decimal_casts.reference b/tests/queries/0_stateless/00700_decimal_casts.reference
index 8832c2109f9a..99d8b9493981 100644
--- a/tests/queries/0_stateless/00700_decimal_casts.reference
+++ b/tests/queries/0_stateless/00700_decimal_casts.reference
@@ -157,39 +157,3 @@
 0.12345678
 0.12345678912345678
 0.1234567890123456789012345678901234567
-1234567890.0000000000000000000000000000	1234567890.00000000000000000000000000000	1234567890.00000000000000000000000000000
-1234567890.00000000	1234567890.000000000	1234567890.000000000
-12345678.0	12345678.00	12345678.00
-9223372036854775807.000000	9223372036854775807	-9223372036854775807
-9223372036854775800	9223372036854775800	-9223372036854775800
-92233720368547758.00	92233720368547758	-92233720368547758
-2147483647.0000000000	2147483647	-2147483647
-2147483647.00	2147483647	-2147483647
-92233720368547757.99	92233720368547757	-92233720368547757
-2147483640.99	2147483640	-2147483640
--0.90000000	0
--0.90000000	0
--0.90000000	0
--0.8000	0
--0.8000	0
--0.8000	0
--0.70	0
--0.70	0
--0.70	0
--0.600000	0
--0.600000	0
--0.600000	0
-18446744073709551615	18446744073709551615
-18446744073709551615.00000000	18446744073709551615
-4294967295	4294967295
-4294967295.0000000000	4294967295
-4294967295	4294967295
-4294967295.0000	4294967295
-65535	65535
-65535.0000000000	65535
-65535	65535
-65535.0000	65535
-2147483647	2147483647
--2147483647	-2147483647
-2147483647	2147483647
-9223372036854775807	9223372036854775807
diff --git a/tests/queries/0_stateless/00700_decimal_casts.sql b/tests/queries/0_stateless/00700_decimal_casts.sql
index 602ee02bc07b..8c752565feeb 100644
--- a/tests/queries/0_stateless/00700_decimal_casts.sql
+++ b/tests/queries/0_stateless/00700_decimal_casts.sql
@@ -146,123 +146,3 @@ SELECT CAST('0.12345678901234567890123456789012345678', 'Decimal(38,38)');
 SELECT CAST('0.123456789', 'Decimal(9,8)');
 SELECT CAST('0.123456789123456789', 'Decimal(18,17)');
 SELECT CAST('0.12345678901234567890123456789012345678', 'Decimal(38,37)');
-
-SELECT toDecimal128('1234567890', 28) AS x, toDecimal128(x, 29), toDecimal128(toDecimal128('1234567890', 28), 29);
-SELECT toDecimal128(toDecimal128('1234567890', 28), 30); -- { serverError 407 }
-
-SELECT toDecimal64('1234567890', 8) AS x, toDecimal64(x, 9), toDecimal64(toDecimal64('1234567890', 8), 9);
-SELECT toDecimal64(toDecimal64('1234567890', 8), 10); -- { serverError 407 }
-
-SELECT toDecimal32('12345678', 1) AS x, toDecimal32(x, 2), toDecimal32(toDecimal32('12345678', 1), 2);
-SELECT toDecimal32(toDecimal32('12345678', 1), 3); -- { serverError 407 }
-
-SELECT toDecimal64(toDecimal64('92233720368547758.1', 1), 2); -- { serverError 407 }
-SELECT toDecimal64(toDecimal64('-92233720368547758.1', 1), 2); -- { serverError 407 }
-
-SELECT toDecimal128('9223372036854775807', 6) AS x, toInt64(x), toInt64(-x);
-SELECT toDecimal128('9223372036854775809', 6) AS x, toInt64(x); -- { serverError 407 }
-SELECT toDecimal128('9223372036854775809', 6) AS x, toInt64(-x); -- { serverError 407 }
-SELECT toDecimal64('922337203685477580', 0) * 10 AS x, toInt64(x), toInt64(-x);
-SELECT toDecimal64(toDecimal64('92233720368547758.0', 1), 2) AS x, toInt64(x), toInt64(-x);
-
-SELECT toDecimal128('2147483647', 10) AS x, toInt32(x), toInt32(-x);
-SELECT toDecimal128('2147483649', 10) AS x, toInt32(x), toInt32(-x); -- { serverError 407 }
-SELECT toDecimal64('2147483647', 2) AS x, toInt32(x), toInt32(-x);
-SELECT toDecimal64('2147483649', 2) AS x, toInt32(x), toInt32(-x); -- { serverError 407 }
-
-SELECT toDecimal128('92233720368547757.99', 2) AS x, toInt64(x), toInt64(-x);
-SELECT toDecimal64('2147483640.99', 2) AS x, toInt32(x), toInt32(-x);
-
-SELECT toDecimal128('-0.9', 8) AS x, toUInt64(x);
-SELECT toDecimal64('-0.9', 8) AS x, toUInt64(x);
-SELECT toDecimal32('-0.9', 8) AS x, toUInt64(x);
-
-SELECT toDecimal128('-0.8', 4) AS x, toUInt32(x);
-SELECT toDecimal64('-0.8', 4) AS x, toUInt32(x);
-SELECT toDecimal32('-0.8', 4) AS x, toUInt32(x);
-
-SELECT toDecimal128('-0.7', 2) AS x, toUInt16(x);
-SELECT toDecimal64('-0.7', 2) AS x, toUInt16(x);
-SELECT toDecimal32('-0.7', 2) AS x, toUInt16(x);
-
-SELECT toDecimal128('-0.6', 6) AS x, toUInt8(x);
-SELECT toDecimal64('-0.6', 6) AS x, toUInt8(x);
-SELECT toDecimal32('-0.6', 6) AS x, toUInt8(x);
-
-SELECT toDecimal128('-1', 7) AS x, toUInt64(x); -- { serverError 407 }
-SELECT toDecimal128('-1', 7) AS x, toUInt32(x); -- { serverError 407 }
-SELECT toDecimal128('-1', 7) AS x, toUInt16(x); -- { serverError 407 }
-SELECT toDecimal128('-1', 7) AS x, toUInt8(x); -- { serverError 407 }
-
-SELECT toDecimal64('-1', 5) AS x, toUInt64(x); -- { serverError 407 }
-SELECT toDecimal64('-1', 5) AS x, toUInt32(x); -- { serverError 407 }
-SELECT toDecimal64('-1', 5) AS x, toUInt16(x); -- { serverError 407 }
-SELECT toDecimal64('-1', 5) AS x, toUInt8(x); -- { serverError 407 }
-
-SELECT toDecimal32('-1', 3) AS x, toUInt64(x); -- { serverError 407 }
-SELECT toDecimal32('-1', 3) AS x, toUInt32(x); -- { serverError 407 }
-SELECT toDecimal32('-1', 3) AS x, toUInt16(x); -- { serverError 407 }
-SELECT toDecimal32('-1', 3) AS x, toUInt8(x); -- { serverError 407 }
-
-SELECT toDecimal128('18446744073709551615', 0) AS x, toUInt64(x);
-SELECT toDecimal128('18446744073709551616', 0) AS x, toUInt64(x); -- { serverError 407 }
-SELECT toDecimal128('18446744073709551615', 8) AS x, toUInt64(x);
-SELECT toDecimal128('18446744073709551616', 8) AS x, toUInt64(x); -- { serverError 407 }
-
-SELECT toDecimal128('4294967295', 0) AS x, toUInt32(x);
-SELECT toDecimal128('4294967296', 0) AS x, toUInt32(x); -- { serverError 407 }
-SELECT toDecimal128('4294967295', 10) AS x, toUInt32(x);
-SELECT toDecimal128('4294967296', 10) AS x, toUInt32(x); -- { serverError 407 }
-SELECT toDecimal64('4294967295', 0) AS x, toUInt32(x);
-SELECT toDecimal64('4294967296', 0) AS x, toUInt32(x); -- { serverError 407 }
-SELECT toDecimal64('4294967295', 4) AS x, toUInt32(x);
-SELECT toDecimal64('4294967296', 4) AS x, toUInt32(x); -- { serverError 407 }
-
-SELECT toDecimal128('65535', 0) AS x, toUInt16(x);
-SELECT toDecimal128('65536', 0) AS x, toUInt16(x); -- { serverError 407 }
-SELECT toDecimal128('65535', 10) AS x, toUInt16(x);
-SELECT toDecimal128('65536', 10) AS x, toUInt16(x); -- { serverError 407 }
-SELECT toDecimal64('65535', 0) AS x, toUInt16(x);
-SELECT toDecimal64('65536', 0) AS x, toUInt16(x); -- { serverError 407 }
-SELECT toDecimal64('65535', 4) AS x, toUInt16(x);
-SELECT toDecimal64('65536', 4) AS x, toUInt16(x); -- { serverError 407 }
-
-SELECT toInt64('2147483647') AS x, toDecimal32(x, 0);
-SELECT toInt64('-2147483647') AS x, toDecimal32(x, 0);
-SELECT toUInt64('2147483647') AS x, toDecimal32(x, 0);
-SELECT toInt64('2147483649') AS x, toDecimal32(x, 0); -- { serverError 407 }
-SELECT toInt64('-2147483649') AS x, toDecimal32(x, 0); -- { serverError 407 }
-SELECT toUInt64('2147483649') AS x, toDecimal32(x, 0); -- { serverError 407 }
-
-SELECT toUInt64('9223372036854775807') AS x, toDecimal64(x, 0);
-SELECT toUInt64('9223372036854775809') AS x, toDecimal64(x, 0); -- { serverError 407 }
-
-SELECT toDecimal32(0, rowNumberInBlock()); -- { serverError 44 }
-SELECT toDecimal64(0, rowNumberInBlock()); -- { serverError 44 }
-SELECT toDecimal128(0, rowNumberInBlock()); -- { serverError 44 }
-
-SELECT toDecimal32(1/0, 0); -- { serverError 407 }
-SELECT toDecimal64(1/0, 1); -- { serverError 407 }
-SELECT toDecimal128(0/0, 2); -- { serverError 407 }
-SELECT CAST(1/0, 'Decimal(9, 0)'); -- { serverError 407 }
-SELECT CAST(1/0, 'Decimal(18, 1)'); -- { serverError 407 }
-SELECT CAST(1/0, 'Decimal(38, 2)'); -- { serverError 407 }
-SELECT CAST(0/0, 'Decimal(9, 3)'); -- { serverError 407 }
-SELECT CAST(0/0, 'Decimal(18, 4)'); -- { serverError 407 }
-SELECT CAST(0/0, 'Decimal(38, 5)'); -- { serverError 407 }
-
-select toDecimal32(10000.1, 6); -- { serverError 407 }
-select toDecimal64(10000.1, 18); -- { serverError 407 }
-select toDecimal128(1000000000000000000000.1, 18); -- { serverError 407 }
-
-select toDecimal32(-10000.1, 6); -- { serverError 407 }
-select toDecimal64(-10000.1, 18); -- { serverError 407 }
-select toDecimal128(-1000000000000000000000.1, 18); -- { serverError 407 }
-
-select toDecimal32(2147483647.0 + 1.0, 0); -- { serverError 407 }
-select toDecimal64(9223372036854775807.0, 0); -- { serverError 407 }
-select toDecimal128(170141183460469231731687303715884105729.0, 0); -- { serverError 407 }
-
-select toDecimal32(-2147483647.0 - 1.0, 0); -- { serverError 407 }
-select toDecimal64(-9223372036854775807.0, 0); -- { serverError 407 }
-select toDecimal128(-170141183460469231731687303715884105729.0, 0); -- { serverError 407 }
diff --git a/tests/queries/0_stateless/00700_decimal_casts_2.reference b/tests/queries/0_stateless/00700_decimal_casts_2.reference
new file mode 100644
index 000000000000..393baae6c476
--- /dev/null
+++ b/tests/queries/0_stateless/00700_decimal_casts_2.reference
@@ -0,0 +1,37 @@
+1234567890.0000000000000000000000000000	1234567890.00000000000000000000000000000	1234567890.00000000000000000000000000000
+-126561577.683753853853498429727072845824
+1234567890.00000000	1234567890.000000000	1234567890.000000000
+12345678.0	12345678.00	12345678.00
+9223372036854775807.000000	9223372036854775807	-9223372036854775807
+9223372036854775800	9223372036854775800	-9223372036854775800
+92233720368547758.00	92233720368547758	-92233720368547758
+2147483647.0000000000	2147483647	-2147483647
+2147483647.00	2147483647	-2147483647
+92233720368547757.99	92233720368547757	-92233720368547757
+2147483640.99	2147483640	-2147483640
+-0.90000000	0
+-0.90000000	0
+-0.90000000	0
+-0.8000	0
+-0.8000	0
+-0.8000	0
+-0.70	0
+-0.70	0
+-0.70	0
+-0.600000	0
+-0.600000	0
+-0.600000	0
+18446744073709551615	18446744073709551615
+18446744073709551615.00000000	18446744073709551615
+4294967295	4294967295
+4294967295.0000000000	4294967295
+4294967295	4294967295
+4294967295.0000	4294967295
+65535	65535
+65535.0000000000	65535
+65535	65535
+65535.0000	65535
+2147483647	2147483647
+-2147483647	-2147483647
+2147483647	2147483647
+9223372036854775807	9223372036854775807
diff --git a/tests/queries/0_stateless/00700_decimal_casts_2.sql b/tests/queries/0_stateless/00700_decimal_casts_2.sql
new file mode 100644
index 000000000000..89c95fed2713
--- /dev/null
+++ b/tests/queries/0_stateless/00700_decimal_casts_2.sql
@@ -0,0 +1,119 @@
+SELECT toDecimal128('1234567890', 28) AS x, toDecimal128(x, 29), toDecimal128(toDecimal128('1234567890', 28), 29);
+SELECT toDecimal128(toDecimal128('1234567890', 28), 30);
+
+SELECT toDecimal64('1234567890', 8) AS x, toDecimal64(x, 9), toDecimal64(toDecimal64('1234567890', 8), 9);
+SELECT toDecimal64(toDecimal64('1234567890', 8), 10); -- { serverError 407 }
+
+SELECT toDecimal32('12345678', 1) AS x, toDecimal32(x, 2), toDecimal32(toDecimal32('12345678', 1), 2);
+SELECT toDecimal32(toDecimal32('12345678', 1), 3); -- { serverError 407 }
+
+SELECT toDecimal64(toDecimal64('92233720368547758.1', 1), 2); -- { serverError 407 }
+SELECT toDecimal64(toDecimal64('-92233720368547758.1', 1), 2); -- { serverError 407 }
+
+SELECT toDecimal128('9223372036854775807', 6) AS x, toInt64(x), toInt64(-x);
+SELECT toDecimal128('9223372036854775809', 6) AS x, toInt64(x); -- { serverError 407 }
+SELECT toDecimal128('9223372036854775809', 6) AS x, toInt64(-x); -- { serverError 407 }
+SELECT toDecimal64('922337203685477580', 0) * 10 AS x, toInt64(x), toInt64(-x);
+SELECT toDecimal64(toDecimal64('92233720368547758.0', 1), 2) AS x, toInt64(x), toInt64(-x);
+
+SELECT toDecimal128('2147483647', 10) AS x, toInt32(x), toInt32(-x);
+SELECT toDecimal128('2147483649', 10) AS x, toInt32(x), toInt32(-x); -- { serverError 407 }
+SELECT toDecimal64('2147483647', 2) AS x, toInt32(x), toInt32(-x);
+SELECT toDecimal64('2147483649', 2) AS x, toInt32(x), toInt32(-x); -- { serverError 407 }
+
+SELECT toDecimal128('92233720368547757.99', 2) AS x, toInt64(x), toInt64(-x);
+SELECT toDecimal64('2147483640.99', 2) AS x, toInt32(x), toInt32(-x);
+
+SELECT toDecimal128('-0.9', 8) AS x, toUInt64(x);
+SELECT toDecimal64('-0.9', 8) AS x, toUInt64(x);
+SELECT toDecimal32('-0.9', 8) AS x, toUInt64(x);
+
+SELECT toDecimal128('-0.8', 4) AS x, toUInt32(x);
+SELECT toDecimal64('-0.8', 4) AS x, toUInt32(x);
+SELECT toDecimal32('-0.8', 4) AS x, toUInt32(x);
+
+SELECT toDecimal128('-0.7', 2) AS x, toUInt16(x);
+SELECT toDecimal64('-0.7', 2) AS x, toUInt16(x);
+SELECT toDecimal32('-0.7', 2) AS x, toUInt16(x);
+
+SELECT toDecimal128('-0.6', 6) AS x, toUInt8(x);
+SELECT toDecimal64('-0.6', 6) AS x, toUInt8(x);
+SELECT toDecimal32('-0.6', 6) AS x, toUInt8(x);
+
+SELECT toDecimal128('-1', 7) AS x, toUInt64(x); -- { serverError 407 }
+SELECT toDecimal128('-1', 7) AS x, toUInt32(x); -- { serverError 407 }
+SELECT toDecimal128('-1', 7) AS x, toUInt16(x); -- { serverError 407 }
+SELECT toDecimal128('-1', 7) AS x, toUInt8(x); -- { serverError 407 }
+
+SELECT toDecimal64('-1', 5) AS x, toUInt64(x); -- { serverError 407 }
+SELECT toDecimal64('-1', 5) AS x, toUInt32(x); -- { serverError 407 }
+SELECT toDecimal64('-1', 5) AS x, toUInt16(x); -- { serverError 407 }
+SELECT toDecimal64('-1', 5) AS x, toUInt8(x); -- { serverError 407 }
+
+SELECT toDecimal32('-1', 3) AS x, toUInt64(x); -- { serverError 407 }
+SELECT toDecimal32('-1', 3) AS x, toUInt32(x); -- { serverError 407 }
+SELECT toDecimal32('-1', 3) AS x, toUInt16(x); -- { serverError 407 }
+SELECT toDecimal32('-1', 3) AS x, toUInt8(x); -- { serverError 407 }
+
+SELECT toDecimal128('18446744073709551615', 0) AS x, toUInt64(x);
+SELECT toDecimal128('18446744073709551616', 0) AS x, toUInt64(x); -- { serverError 407 }
+SELECT toDecimal128('18446744073709551615', 8) AS x, toUInt64(x);
+SELECT toDecimal128('18446744073709551616', 8) AS x, toUInt64(x); -- { serverError 407 }
+
+SELECT toDecimal128('4294967295', 0) AS x, toUInt32(x);
+SELECT toDecimal128('4294967296', 0) AS x, toUInt32(x); -- { serverError 407 }
+SELECT toDecimal128('4294967295', 10) AS x, toUInt32(x);
+SELECT toDecimal128('4294967296', 10) AS x, toUInt32(x); -- { serverError 407 }
+SELECT toDecimal64('4294967295', 0) AS x, toUInt32(x);
+SELECT toDecimal64('4294967296', 0) AS x, toUInt32(x); -- { serverError 407 }
+SELECT toDecimal64('4294967295', 4) AS x, toUInt32(x);
+SELECT toDecimal64('4294967296', 4) AS x, toUInt32(x); -- { serverError 407 }
+
+SELECT toDecimal128('65535', 0) AS x, toUInt16(x);
+SELECT toDecimal128('65536', 0) AS x, toUInt16(x); -- { serverError 407 }
+SELECT toDecimal128('65535', 10) AS x, toUInt16(x);
+SELECT toDecimal128('65536', 10) AS x, toUInt16(x); -- { serverError 407 }
+SELECT toDecimal64('65535', 0) AS x, toUInt16(x);
+SELECT toDecimal64('65536', 0) AS x, toUInt16(x); -- { serverError 407 }
+SELECT toDecimal64('65535', 4) AS x, toUInt16(x);
+SELECT toDecimal64('65536', 4) AS x, toUInt16(x); -- { serverError 407 }
+
+SELECT toInt64('2147483647') AS x, toDecimal32(x, 0);
+SELECT toInt64('-2147483647') AS x, toDecimal32(x, 0);
+SELECT toUInt64('2147483647') AS x, toDecimal32(x, 0);
+SELECT toInt64('2147483649') AS x, toDecimal32(x, 0); -- { serverError 407 }
+SELECT toInt64('-2147483649') AS x, toDecimal32(x, 0); -- { serverError 407 }
+SELECT toUInt64('2147483649') AS x, toDecimal32(x, 0); -- { serverError 407 }
+
+SELECT toUInt64('9223372036854775807') AS x, toDecimal64(x, 0);
+SELECT toUInt64('9223372036854775809') AS x, toDecimal64(x, 0); -- { serverError 407 }
+
+SELECT toDecimal32(0, rowNumberInBlock()); -- { serverError 44 }
+SELECT toDecimal64(0, rowNumberInBlock()); -- { serverError 44 }
+SELECT toDecimal128(0, rowNumberInBlock()); -- { serverError 44 }
+
+SELECT toDecimal32(1/0, 0); -- { serverError 407 }
+SELECT toDecimal64(1/0, 1); -- { serverError 407 }
+SELECT toDecimal128(0/0, 2); -- { serverError 407 }
+SELECT CAST(1/0, 'Decimal(9, 0)'); -- { serverError 407 }
+SELECT CAST(1/0, 'Decimal(18, 1)'); -- { serverError 407 }
+SELECT CAST(1/0, 'Decimal(38, 2)'); -- { serverError 407 }
+SELECT CAST(0/0, 'Decimal(9, 3)'); -- { serverError 407 }
+SELECT CAST(0/0, 'Decimal(18, 4)'); -- { serverError 407 }
+SELECT CAST(0/0, 'Decimal(38, 5)'); -- { serverError 407 }
+
+select toDecimal32(10000.1, 6); -- { serverError 407 }
+select toDecimal64(10000.1, 18); -- { serverError 407 }
+select toDecimal128(1000000000000000000000.1, 18); -- { serverError 407 }
+
+select toDecimal32(-10000.1, 6); -- { serverError 407 }
+select toDecimal64(-10000.1, 18); -- { serverError 407 }
+select toDecimal128(-1000000000000000000000.1, 18); -- { serverError 407 }
+
+select toDecimal32(2147483647.0 + 1.0, 0); -- { serverError 407 }
+select toDecimal64(9223372036854775807.0, 0); -- { serverError 407 }
+select toDecimal128(170141183460469231731687303715884105729.0, 0); -- { serverError 407 }
+
+select toDecimal32(-2147483647.0 - 1.0, 0); -- { serverError 407 }
+select toDecimal64(-9223372036854775807.0, 0); -- { serverError 407 }
+select toDecimal128(-170141183460469231731687303715884105729.0, 0); -- { serverError 407 }
diff --git a/tests/queries/0_stateless/00700_decimal_math.reference b/tests/queries/0_stateless/00700_decimal_math.reference
index 889170047021..f58e08dc1fb2 100644
--- a/tests/queries/0_stateless/00700_decimal_math.reference
+++ b/tests/queries/0_stateless/00700_decimal_math.reference
@@ -26,5 +26,5 @@
 1.00000	0.8427007929497149	0.15729920705028513
 42.4200	115.60113124678627	1.6029995567009473e50
 0.00	0	1	0
-3.1415926535897927981986333033020522496	0	-1	-0
+3.14159265358979	0	-1	-0
 1.00	1.5707963267948966	0	0.7853981633974483
diff --git a/tests/queries/0_stateless/00700_decimal_math.sql b/tests/queries/0_stateless/00700_decimal_math.sql
index a6c1ab2f393f..237bee1c6918 100644
--- a/tests/queries/0_stateless/00700_decimal_math.sql
+++ b/tests/queries/0_stateless/00700_decimal_math.sql
@@ -36,7 +36,7 @@ SELECT toDecimal128('1.0', 5) AS x, erf(x), erfc(x);
 SELECT toDecimal128('42.42', 4) AS x, lgamma(x), tgamma(x);
 
 SELECT toDecimal128('0.0', 2) AS x, round(sin(x), 8), round(cos(x), 8), round(tan(x), 8);
-SELECT toDecimal128(pi(), 37) AS x, round(sin(x), 8), round(cos(x), 8), round(tan(x), 8);
+SELECT toDecimal128(pi(), 14) AS x, round(sin(x), 8), round(cos(x), 8), round(tan(x), 8);
 SELECT toDecimal128('1.0', 2) AS x, asin(x), acos(x), atan(x);
 
 
diff --git a/tests/queries/0_stateless/00700_decimal_round.reference b/tests/queries/0_stateless/00700_decimal_round.reference
index 11281cdeeb67..230b6863411f 100644
--- a/tests/queries/0_stateless/00700_decimal_round.reference
+++ b/tests/queries/0_stateless/00700_decimal_round.reference
@@ -58,18 +58,18 @@
 -12345.6789	-12340.0000	-12300.0000	-12000.0000	-10000.0000	0.0000
 -12345.6789	-12350.0000	-12400.0000	-13000.0000	-20000.0000	-100000.0000
 -12345.6789	-12340.0000	-12300.0000	-12000.0000	-10000.0000	0.0000
-123456789.123456784	-123456789.123456784	123456789.000000000	-123456789.000000000	123456789.123460000	-123456789.123460000	123500000.000000000	-123500000.000000000
-123456789.123456784	-123456789.123456784	123456789.000000000	-123456789.000000000	123456789.123460000	-123456789.123460000	123500000.000000000	-123500000.000000000
-123456789.123456784	-123456789.123456784	123456790.000000000	-123456789.000000000	123456789.123460000	-123456789.123450000	123500000.000000000	-123400000.000000000
-123456789.123456784	-123456789.123456784	123456789.000000000	-123456790.000000000	123456789.123450000	-123456789.123460000	123400000.000000000	-123500000.000000000
-123456789.123456784	-123456789.123456784	123456789.000000000	-123456789.000000000	123456789.123450000	-123456789.123450000	123400000.000000000	-123400000.000000000
-12345678901234567525491324606.797053952	-12345678901234567525491324606.797053952	12345678901234567525491324607.000000000	-12345678901234567525491324607.000000000	12345678901234567525491324606.797000000	-12345678901234567525491324606.797000000
-12345678901234567525491324606.797053952	-12345678901234567525491324606.797053952	12345678901234567525491324607.000000000	-12345678901234567525491324607.000000000	12345678901234567525491324606.797000000	-12345678901234567525491324606.797000000
-12345678901234567525491324606.797053952	-12345678901234567525491324606.797053952	12345678901234567525491324607.000000000	-12345678901234567525491324606.000000000	12345678901234567525491324606.798000000	-12345678901234567525491324606.797000000
-12345678901234567525491324606.797053952	-12345678901234567525491324606.797053952	12345678901234567525491324606.000000000	-12345678901234567525491324607.000000000	12345678901234567525491324606.797000000	-12345678901234567525491324606.798000000
-12345678901234567525491324606.797053952	-12345678901234567525491324606.797053952	12345678901234567525491324606.000000000	-12345678901234567525491324606.000000000	12345678901234567525491324606.797000000	-12345678901234567525491324606.797000000
-12345678901234567525491324606.797053952	-12345678901234567525491324606.797053952	12345678901234567525491324607.000000000	-12345678901234567525491324607.000000000	12345678901234567525491325000.000000000	-12345678901234567525491325000.000000000
-12345678901234567525491324606.797053952	-12345678901234567525491324606.797053952	12345678901234567525491324607.000000000	-12345678901234567525491324607.000000000	12345678901234567525491325000.000000000	-12345678901234567525491325000.000000000
-12345678901234567525491324606.797053952	-12345678901234567525491324606.797053952	12345678901234567525491324607.000000000	-12345678901234567525491324606.000000000	12345678901234567525491325000.000000000	-12345678901234567525491324000.000000000
-12345678901234567525491324606.797053952	-12345678901234567525491324606.797053952	12345678901234567525491324606.000000000	-12345678901234567525491324607.000000000	12345678901234567525491324000.000000000	-12345678901234567525491325000.000000000
-12345678901234567525491324606.797053952	-12345678901234567525491324606.797053952	12345678901234567525491324606.000000000	-12345678901234567525491324606.000000000	12345678901234567525491324000.000000000	-12345678901234567525491324000.000000000
+123456789.123456789	-123456789.123456789	123456789.000000000	-123456789.000000000	123456789.123460000	-123456789.123460000	123500000.000000000	-123500000.000000000
+123456789.123456789	-123456789.123456789	123456789.000000000	-123456789.000000000	123456789.123460000	-123456789.123460000	123500000.000000000	-123500000.000000000
+123456789.123456789	-123456789.123456789	123456790.000000000	-123456789.000000000	123456789.123460000	-123456789.123450000	123500000.000000000	-123400000.000000000
+123456789.123456789	-123456789.123456789	123456789.000000000	-123456790.000000000	123456789.123450000	-123456789.123460000	123400000.000000000	-123500000.000000000
+123456789.123456789	-123456789.123456789	123456789.000000000	-123456789.000000000	123456789.123450000	-123456789.123450000	123400000.000000000	-123400000.000000000
+12345678901234567890123456789.123456789	-12345678901234567890123456789.123456789	12345678901234567890123456789.000000000	-12345678901234567890123456789.000000000	12345678901234567890123456789.123000000	-12345678901234567890123456789.123000000
+12345678901234567890123456789.123456789	-12345678901234567890123456789.123456789	12345678901234567890123456789.000000000	-12345678901234567890123456789.000000000	12345678901234567890123456789.123000000	-12345678901234567890123456789.123000000
+12345678901234567890123456789.123456789	-12345678901234567890123456789.123456789	12345678901234567890123456790.000000000	-12345678901234567890123456789.000000000	12345678901234567890123456789.124000000	-12345678901234567890123456789.123000000
+12345678901234567890123456789.123456789	-12345678901234567890123456789.123456789	12345678901234567890123456789.000000000	-12345678901234567890123456790.000000000	12345678901234567890123456789.123000000	-12345678901234567890123456789.124000000
+12345678901234567890123456789.123456789	-12345678901234567890123456789.123456789	12345678901234567890123456789.000000000	-12345678901234567890123456789.000000000	12345678901234567890123456789.123000000	-12345678901234567890123456789.123000000
+12345678901234567890123456789.123456789	-12345678901234567890123456789.123456789	12345678901234567890123456789.000000000	-12345678901234567890123456789.000000000	12345678901234567890123457000.000000000	-12345678901234567890123457000.000000000
+12345678901234567890123456789.123456789	-12345678901234567890123456789.123456789	12345678901234567890123456789.000000000	-12345678901234567890123456789.000000000	12345678901234567890123457000.000000000	-12345678901234567890123457000.000000000
+12345678901234567890123456789.123456789	-12345678901234567890123456789.123456789	12345678901234567890123456790.000000000	-12345678901234567890123456789.000000000	12345678901234567890123457000.000000000	-12345678901234567890123456000.000000000
+12345678901234567890123456789.123456789	-12345678901234567890123456789.123456789	12345678901234567890123456789.000000000	-12345678901234567890123456790.000000000	12345678901234567890123456000.000000000	-12345678901234567890123457000.000000000
+12345678901234567890123456789.123456789	-12345678901234567890123456789.123456789	12345678901234567890123456789.000000000	-12345678901234567890123456789.000000000	12345678901234567890123456000.000000000	-12345678901234567890123456000.000000000
diff --git a/tests/queries/0_stateless/00700_decimal_round.sql b/tests/queries/0_stateless/00700_decimal_round.sql
index 318a7718de9f..c5b8dbb520bf 100644
--- a/tests/queries/0_stateless/00700_decimal_round.sql
+++ b/tests/queries/0_stateless/00700_decimal_round.sql
@@ -61,20 +61,20 @@ SELECT toDecimal128(-12345.6789, 4) AS x, ceil(x, -1), ceil(x, -2), ceil(x, -3),
 SELECT toDecimal128(-12345.6789, 4) AS x, floor(x, -1), floor(x, -2), floor(x, -3), floor(x, -4), floor(x, -5);
 SELECT toDecimal128(-12345.6789, 4) AS x, trunc(x, -1), trunc(x, -2), trunc(x, -3), trunc(x, -4), trunc(x, -5);
 
-SELECT toDecimal64(123456789.123456789, 9) AS x, -x AS y, round(x), round(y), round(x, 5), round(y, 5), round(x, -5), round(y, -5);
-SELECT toDecimal64(123456789.123456789, 9) AS x, -x AS y, roundBankers(x), roundBankers(y), roundBankers(x, 5), roundBankers(y, 5), roundBankers(x, -5), roundBankers(y, -5);
-SELECT toDecimal64(123456789.123456789, 9) AS x, -x AS y, ceil(x), ceil(y), ceil(x, 5), ceil(y, 5), ceil(x, -5), ceil(y, -5);
-SELECT toDecimal64(123456789.123456789, 9) AS x, -x AS y, floor(x), floor(y), floor(x, 5), floor(y, 5), floor(x, -5), floor(y, -5);
-SELECT toDecimal64(123456789.123456789, 9) AS x, -x AS y, trunc(x), trunc(y), trunc(x, 5), trunc(y, 5), trunc(x, -5), trunc(y, -5);
+SELECT toDecimal64('123456789.123456789', 9) AS x, -x AS y, round(x), round(y), round(x, 5), round(y, 5), round(x, -5), round(y, -5);
+SELECT toDecimal64('123456789.123456789', 9) AS x, -x AS y, roundBankers(x), roundBankers(y), roundBankers(x, 5), roundBankers(y, 5), roundBankers(x, -5), roundBankers(y, -5);
+SELECT toDecimal64('123456789.123456789', 9) AS x, -x AS y, ceil(x), ceil(y), ceil(x, 5), ceil(y, 5), ceil(x, -5), ceil(y, -5);
+SELECT toDecimal64('123456789.123456789', 9) AS x, -x AS y, floor(x), floor(y), floor(x, 5), floor(y, 5), floor(x, -5), floor(y, -5);
+SELECT toDecimal64('123456789.123456789', 9) AS x, -x AS y, trunc(x), trunc(y), trunc(x, 5), trunc(y, 5), trunc(x, -5), trunc(y, -5);
 
-SELECT toDecimal128(12345678901234567890123456789.123456789, 9) AS x, -x AS y, round(x), round(y), round(x, 3), round(y, 3);
-SELECT toDecimal128(12345678901234567890123456789.123456789, 9) AS x, -x AS y, roundBankers(x), roundBankers(y), roundBankers(x, 3), roundBankers(y, 3);
-SELECT toDecimal128(12345678901234567890123456789.123456789, 9) AS x, -x AS y, ceil(x), ceil(y), ceil(x, 3), ceil(y, 3);
-SELECT toDecimal128(12345678901234567890123456789.123456789, 9) AS x, -x AS y, floor(x), floor(y), floor(x, 3), floor(y, 3);
-SELECT toDecimal128(12345678901234567890123456789.123456789, 9) AS x, -x AS y, trunc(x), trunc(y), trunc(x, 3), trunc(y, 3);
+SELECT toDecimal128('12345678901234567890123456789.123456789', 9) AS x, -x AS y, round(x), round(y), round(x, 3), round(y, 3);
+SELECT toDecimal128('12345678901234567890123456789.123456789', 9) AS x, -x AS y, roundBankers(x), roundBankers(y), roundBankers(x, 3), roundBankers(y, 3);
+SELECT toDecimal128('12345678901234567890123456789.123456789', 9) AS x, -x AS y, ceil(x), ceil(y), ceil(x, 3), ceil(y, 3);
+SELECT toDecimal128('12345678901234567890123456789.123456789', 9) AS x, -x AS y, floor(x), floor(y), floor(x, 3), floor(y, 3);
+SELECT toDecimal128('12345678901234567890123456789.123456789', 9) AS x, -x AS y, trunc(x), trunc(y), trunc(x, 3), trunc(y, 3);
 
-SELECT toDecimal128(12345678901234567890123456789.123456789, 9) AS x, -x AS y, round(x), round(y), round(x, -3), round(y, -3);
-SELECT toDecimal128(12345678901234567890123456789.123456789, 9) AS x, -x AS y, roundBankers(x), roundBankers(y), roundBankers(x, -3), roundBankers(y, -3);
-SELECT toDecimal128(12345678901234567890123456789.123456789, 9) AS x, -x AS y, ceil(x), ceil(y), ceil(x, -3), ceil(y, -3);
-SELECT toDecimal128(12345678901234567890123456789.123456789, 9) AS x, -x AS y, floor(x), floor(y), floor(x, -3), floor(y, -3);
-SELECT toDecimal128(12345678901234567890123456789.123456789, 9) AS x, -x AS y, trunc(x), trunc(y), trunc(x, -3), trunc(y, -3);
+SELECT toDecimal128('12345678901234567890123456789.123456789', 9) AS x, -x AS y, round(x), round(y), round(x, -3), round(y, -3);
+SELECT toDecimal128('12345678901234567890123456789.123456789', 9) AS x, -x AS y, roundBankers(x), roundBankers(y), roundBankers(x, -3), roundBankers(y, -3);
+SELECT toDecimal128('12345678901234567890123456789.123456789', 9) AS x, -x AS y, ceil(x), ceil(y), ceil(x, -3), ceil(y, -3);
+SELECT toDecimal128('12345678901234567890123456789.123456789', 9) AS x, -x AS y, floor(x), floor(y), floor(x, -3), floor(y, -3);
+SELECT toDecimal128('12345678901234567890123456789.123456789', 9) AS x, -x AS y, trunc(x), trunc(y), trunc(x, -3), trunc(y, -3);
diff --git a/tests/queries/0_stateless/01035_avg.reference b/tests/queries/0_stateless/01035_avg.reference
index ec79205c6f8a..a9f31de57e11 100644
--- a/tests/queries/0_stateless/01035_avg.reference
+++ b/tests/queries/0_stateless/01035_avg.reference
@@ -1,5 +1,5 @@
-nan	nan	nan	nan	nan	nan	nan	nan	nan	nan	nan	nan	nan	nan	nan	nan	nan
--0.5	-0.5	-0.5	-0.5	-0.5	-0.5	127.493856	32355.57552	499999.5	499999.5	499999.5	499999.5	499999.5	-0.000500002	0.49999949943727	-0.000005	-0.000005257366687274546
+nan	nan	nan	nan	nan	nan	nan	nan	nan	nan	nan	nan	nan	nan	nan	nan	nan	nan
+-0.5	-0.5	-0.5	-0.5	-0.5	-0.5	127.493856	32355.57552	499999.5	499999.5	499999.5	499999.5	499999.5	499999.5	-0.000500002	0.49999949943727	-0.000005026740899901579	-0.000005257366687274546
 -2767.546272
 999999
--0.50000449943727
+-0.5000045261781699
diff --git a/tests/queries/0_stateless/01035_avg.sql b/tests/queries/0_stateless/01035_avg.sql
index a185ce816fb3..7ad083739172 100644
--- a/tests/queries/0_stateless/01035_avg.sql
+++ b/tests/queries/0_stateless/01035_avg.sql
@@ -1,6 +1,5 @@
 SET allow_experimental_bigint_types=1;
 
--- no UInt128 as for now
 CREATE TABLE IF NOT EXISTS test_01035_avg (
     i8 Int8         DEFAULT i64,
     i16 Int16       DEFAULT i64,
@@ -13,6 +12,7 @@ CREATE TABLE IF NOT EXISTS test_01035_avg (
     u16 UInt16      DEFAULT u64,
     u32 UInt32      DEFAULT u64,
     u64 UInt64,
+    u128 UInt128    DEFAULT u64,
     u256 UInt256    DEFAULT u64,
 
     f32 Float32     DEFAULT u64,
@@ -25,14 +25,14 @@ CREATE TABLE IF NOT EXISTS test_01035_avg (
 ) ENGINE = MergeTree() ORDER BY i64;
 
 SELECT avg(i8), avg(i16), avg(i32), avg(i64), avg(i128), avg(i256),
-       avg(u8), avg(u16), avg(u32), avg(u64), avg(u256),
+       avg(u8), avg(u16), avg(u32), avg(u64), avg(u128), avg(u256),
        avg(f32), avg(f64),
        avg(d32), avg(d64), avg(d128), avg(d256) FROM test_01035_avg;
 
 INSERT INTO test_01035_avg (u64) SELECT number FROM system.numbers LIMIT 1000000;
 
 SELECT avg(i8), avg(i16), avg(i32), avg(i64), avg(i128), avg(i256),
-       avg(u8), avg(u16), avg(u32), avg(u64), avg(u256),
+       avg(u8), avg(u16), avg(u32), avg(u64), avg(u128), avg(u256),
        avg(f32), avg(f64),
        avg(d32), avg(d64), avg(d128), avg(d256) FROM test_01035_avg;
 
diff --git a/tests/queries/0_stateless/01087_table_function_generate.reference b/tests/queries/0_stateless/01087_table_function_generate.reference
index d8886945caa3..c04fa831328b 100644
--- a/tests/queries/0_stateless/01087_table_function_generate.reference
+++ b/tests/queries/0_stateless/01087_table_function_generate.reference
@@ -1,14 +1,14 @@
 UInt64	Int64	UInt32	Int32	UInt16	Int16	UInt8	Int8
-2804162938822577320	-2776833771540858	3467776823	1163715250	23903	-2916	220	-117
-7885388429666205427	-1363628932535403038	484159052	-308788249	44305	13638	143	-105
-4357435422797280898	1355609803008819271	4126129912	-852056475	58858	9166	49	33
-5935810273536892891	-804738887697332962	3109335413	-80126721	13655	-31421	186	-77
-368066018677693974	-4927165984347126295	1015254922	2026080544	21973	-29626	240	108
-8124171311239967992	-1179703908046100129	1720727300	-138469036	36175	-12819	138	16
-15657812979985370729	-5733276247123822513	3254757884	-500590428	13193	30527	3	-81
-18371568619324220532	-6793779541583578394	1686821450	-455892108	52282	2284	252	-90
-821735343441964030	3148260644406230976	256251035	-885069056	55255	11455	176	90
-9558594037060121162	-2907172753635797124	4276198376	1947296644	48701	26632	97	43
+2804162938822577320	-2776833771540858	3467776823	1163715250	23903	13655	137	-41
+7885388429666205427	-1363628932535403038	484159052	-308788249	56810	-22227	51	-41
+4357435422797280898	1355609803008819271	4126129912	-852056475	64304	-11401	139	86
+5935810273536892891	-804738887697332962	3109335413	-80126721	258	12889	18	88
+368066018677693974	-4927165984347126295	1015254922	2026080544	44305	21973	16	0
+8124171311239967992	-1179703908046100129	1720727300	-138469036	61343	10573	252	-32
+15657812979985370729	-5733276247123822513	3254757884	-500590428	45913	19153	105	-102
+18371568619324220532	-6793779541583578394	1686821450	-455892108	49050	-28603	248	80
+821735343441964030	3148260644406230976	256251035	-885069056	58858	-29361	58	61
+9558594037060121162	-2907172753635797124	4276198376	1947296644	26801	-13531	204	-66
 -
 Enum8(\'hello\' = 1, \'world\' = 5)
 hello
@@ -47,16 +47,16 @@ h
 o
 -
 Date	DateTime	DateTime(\'Europe/Moscow\')
-2113-06-12	1970-10-09 02:30:14	2074-08-12 11:31:27
-2103-11-03	2106-01-30 21:52:44	2097-05-25 07:54:35
-2008-03-16	2096-12-12 00:40:50	1988-08-10 11:16:31
-2126-11-26	2096-01-15 16:31:33	2063-10-20 08:48:17
-1991-02-02	2103-02-11 16:44:39	2036-10-09 04:29:10
-2096-11-03	1980-01-02 05:18:22	2055-12-23 12:33:52
-2024-12-16	2079-06-11 16:29:02	2000-12-05 17:46:24
-2085-04-07	2100-03-01 18:50:22	1993-03-25 01:19:12
-2135-05-30	2034-08-25 19:46:33	2045-12-10 16:47:40
-2094-12-18	2069-09-30 16:07:48	2084-08-26 03:33:12
+2113-06-12	2050-12-17 02:46:35	2096-02-16 22:18:22
+2141-08-09	2013-10-17 23:35:26	1976-01-24 12:52:48
+2039-08-16	1974-11-17 23:22:46	1980-03-04 21:02:50
+1997-04-11	1972-09-18 23:44:08	2040-07-10 14:46:42
+2103-11-03	2044-11-23 20:57:12	1970-10-09 02:30:14
+2066-11-19	2029-12-10 03:13:55	2106-01-30 21:52:44
+2064-08-14	2016-07-14 11:33:45	2096-12-12 00:40:50
+2046-09-13	2085-07-10 18:51:14	2096-01-15 16:31:33
+2008-03-16	2047-05-16 23:28:36	2103-02-11 16:44:39
+2000-07-07	2105-07-19 19:29:06	1980-01-02 05:18:22
 -
 DateTime64(3)	DateTime64(6)	DateTime64(6, \'Europe/Moscow\')
 1978-06-07 23:50:57.320	2013-08-28 10:21:54.010758	1991-08-25 16:23:26.140215
@@ -225,14 +225,14 @@ RL,{Xs\\tw
 [114]	-84125.1554	('2023-06-06 06:55:06.492','bf9ab359-ef9f-ad11-7e6c-160368b1e5ea')
 [124]	-114719.5228	('2010-11-11 22:57:23.722','c1046ffb-3415-cc3a-509a-e0005856d7d7')
 -
-[]	1900051923	{	-189530.5846	h	-5.6279699579452485e47	('1984-12-06','2090-10-31 19:35:45','2038-07-15 05:22:51.805','63d9a12d-d1cf-1f3a-57c6-9bc6dddd0975')	8502
-[-102,-118]	392272782	Eb	-14818.0200	o	-2.664492247169164e59	('2024-01-16','1994-07-16 00:40:02','2034-02-02 05:30:44.960','4fa09948-d32e-8903-63df-43ad759e43f7')	DA61
-[-71]	775049089	\N	-158115.1178	w	4.1323844687113747e-305	('2103-08-04','2062-08-12 23:41:53','2074-02-13 10:29:40.749','c4a44dd7-d009-6f65-1494-9daedfa8a124')	83A7
-[-28,100]	3675466147	{	-146685.1749	h	3.6676044396877755e142	('2119-02-01','2002-06-26 03:33:41','2002-12-02 05:46:03.455','98714b2c-65e7-b5cb-a040-421e260c6d8d')	4B94
-[-23]	2514120753	(`u,	-119659.6174	w	1.3231258347475906e34	('2017-10-25','2080-03-28 08:11:25','2073-07-10 12:19:58.146','003b3b6b-088f-f941-aeb9-c26e0ee72b8e')	6B1F
-[11,-36]	3308237300	\N	171205.1896	\N	5.634708707075817e195	('2084-01-01','2041-11-11 13:19:44','2044-03-18 17:34:17.814','9e60f4cb-6e55-1deb-5ac4-d66a86a8886d')	1964
-[39]	1614362420	`4A8P	157144.0630	o	-1.1843143253872814e-255	('2061-03-10','2066-03-02 11:07:49','1997-10-22 20:14:13.755','97685503-2609-d2b9-981c-02fd75d106cb')	A35B
-[48,-120]	3848918261	1<Lu3	91487.2852	h	-1.9300793134783347e263	('2081-06-01','2031-08-07 11:29:42','2085-03-11 15:17:17.374','af838873-48b2-f609-6483-f5c08733364c')	8E7C
-[55]	3047524030	li&lF	93462.3661	h	2.8979254388809897e54	('2108-04-19','2058-07-14 01:47:30','2055-10-14 06:36:20.056','e932a7b5-173a-1304-e522-b794b8fa3f11')	35D9
-[100,-42]	3999367674		-112975.9852	h	2.658098863752086e-160	('2005-08-26','2029-04-21 12:27:59','2068-08-27 07:49:41.825','802b2a96-319b-8e60-63d9-99b88ccae237')	074E
+[]	1900051923	{	-189530.5846	h	-5.6279699579452485e47	('1984-12-06','2028-08-17 06:05:01','2036-04-02 23:52:28.468','4b3d498c-dd44-95c1-5b75-921504ec5d8d')	F743
+[-102,-118]	392272782	Eb	-14818.0200	o	-2.664492247169164e59	('2082-12-26','2052-09-09 06:50:50','2088-04-21 05:07:08.245','aeb9c26e-0ee7-2b8e-802b-2a96319b8e60')	CBF4
+[-71]	775049089	\N	-158115.1178	w	4.1323844687113747e-305	('2108-04-19','2090-07-31 16:45:26','2076-07-10 09:11:06.385','57c69bc6-dddd-0975-e932-a7b5173a1304')	EB1D
+[-28,100]	3675466147	{	-146685.1749	h	3.6676044396877755e142	('2017-10-25','2100-02-28 18:07:18','2055-10-14 06:36:20.056','14949dae-dfa8-a124-af83-887348b2f609')	6D88
+[-23]	2514120753	(`u,	-119659.6174	w	1.3231258347475906e34	('2141-04-06','2074-08-10 06:25:12','1976-12-04 18:31:55.745','86a9b3c1-4593-4d56-7762-3aa1dd22cbbf')	AD43
+[11,-36]	3308237300	\N	171205.1896	\N	5.634708707075817e195	('1974-10-31','1993-12-24 09:38:45','2038-07-15 05:22:51.805','63d999b8-8cca-e237-c4a4-4dd7d0096f65')	609E
+[39]	1614362420	`4A8P	157144.0630	o	-1.1843143253872814e-255	('2147-08-18','2072-09-28 18:27:27','2073-07-10 12:19:58.146','6483f5c0-8733-364c-4fa0-9948d32e8903')	A886
+[48,-120]	3848918261	1<Lu3	91487.2852	h	-1.9300793134783347e263	('2050-12-04','2076-04-05 09:33:05','2103-12-13 23:48:44.066','e522b794-b8fa-3f11-003b-3b6b088ff941')	556E
+[55]	3047524030	li&lF	93462.3661	h	2.8979254388809897e54	('1976-01-10','1987-07-14 00:25:51','2021-11-19 04:44:08.986','486e5b26-5fe8-fe3e-12ef-09aee40643e0')	9E75
+[100,-42]	3999367674		-112975.9852	h	2.658098863752086e-160	('2081-05-13','2071-08-07 13:34:33','1980-11-11 12:00:44.669','9754e8ac-5145-befb-63d9-a12dd1cf1f3a')	DF63
 -
diff --git a/tests/queries/0_stateless/01125_generate_random_qoega.reference b/tests/queries/0_stateless/01125_generate_random_qoega.reference
index af3f8c998962..22bc4946401e 100644
--- a/tests/queries/0_stateless/01125_generate_random_qoega.reference
+++ b/tests/queries/0_stateless/01125_generate_random_qoega.reference
@@ -1,1 +1,1 @@
-100	663736399314727673
+100	9702509002514908721
diff --git a/tests/queries/0_stateless/01128_generate_random_nested.reference b/tests/queries/0_stateless/01128_generate_random_nested.reference
index 6d2e90d81935..12701aed1ab1 100644
--- a/tests/queries/0_stateless/01128_generate_random_nested.reference
+++ b/tests/queries/0_stateless/01128_generate_random_nested.reference
@@ -1,2 +1,2 @@
-100	12122376849981951205
-109	6180823897498688294
+100	8533268631048830017
+99	923254289621389072
diff --git a/tests/queries/0_stateless/01666_gcd_ubsan.reference b/tests/queries/0_stateless/01666_gcd_ubsan.reference
index af041bdcbdea..37b1968542e1 100644
--- a/tests/queries/0_stateless/01666_gcd_ubsan.reference
+++ b/tests/queries/0_stateless/01666_gcd_ubsan.reference
@@ -5,8 +5,10 @@ SELECT gcd(-9223372036854775808, 9223372036854775807); -- { serverError 407 }
 SELECT gcd(-9223372036854775807, 9223372036854775808); -- { serverError 407 }
 SELECT gcd(9223372036854775808, -1); -- { serverError 407 }
 SELECT lcm(-170141183460469231731687303715884105728, -170141183460469231731687303715884105728); -- { serverError 43 }
-SELECT lcm(toInt128(-170141183460469231731687303715884105728), toInt128(-170141183460469231731687303715884105728)); -- { serverError 407 }
-SELECT lcm(toInt128(-170141183460469231731687303715884105720), toInt128(-170141183460469231731687303715884105720)); -- { serverError 407 }
+SELECT lcm(toInt128(-170141183460469231731687303715884105728), toInt128(-170141183460469231731687303715884105728));
+170141183460469231722463931679029329921
+SELECT lcm(toInt128(-170141183460469231731687303715884105720), toInt128(-170141183460469231731687303715884105720));
+170141183460469231722463931679029329921
 SELECT lcm(toInt128('-170141183460469231731687303715884105720'), toInt128('-170141183460469231731687303715884105720'));
 170141183460469231731687303715884105720
 SELECT gcd(-9223372036854775806, -9223372036854775806);
diff --git a/tests/queries/0_stateless/01666_gcd_ubsan.sql b/tests/queries/0_stateless/01666_gcd_ubsan.sql
index a1f501cda0b1..da41022ddebe 100644
--- a/tests/queries/0_stateless/01666_gcd_ubsan.sql
+++ b/tests/queries/0_stateless/01666_gcd_ubsan.sql
@@ -5,7 +5,7 @@ SELECT gcd(-9223372036854775808, 9223372036854775807); -- { serverError 407 }
 SELECT gcd(-9223372036854775807, 9223372036854775808); -- { serverError 407 }
 SELECT gcd(9223372036854775808, -1); -- { serverError 407 }
 SELECT lcm(-170141183460469231731687303715884105728, -170141183460469231731687303715884105728); -- { serverError 43 }
-SELECT lcm(toInt128(-170141183460469231731687303715884105728), toInt128(-170141183460469231731687303715884105728)); -- { serverError 407 }
-SELECT lcm(toInt128(-170141183460469231731687303715884105720), toInt128(-170141183460469231731687303715884105720)); -- { serverError 407 }
+SELECT lcm(toInt128(-170141183460469231731687303715884105728), toInt128(-170141183460469231731687303715884105728));
+SELECT lcm(toInt128(-170141183460469231731687303715884105720), toInt128(-170141183460469231731687303715884105720));
 SELECT lcm(toInt128('-170141183460469231731687303715884105720'), toInt128('-170141183460469231731687303715884105720'));
 SELECT gcd(-9223372036854775806, -9223372036854775806);
diff --git a/tests/queries/0_stateless/01666_lcm_ubsan.reference b/tests/queries/0_stateless/01666_lcm_ubsan.reference
index d8ed13191d33..bd1972e8a6d6 100644
--- a/tests/queries/0_stateless/01666_lcm_ubsan.reference
+++ b/tests/queries/0_stateless/01666_lcm_ubsan.reference
@@ -5,8 +5,10 @@ SELECT lcm(-9223372036854775808, 9223372036854775807); -- { serverError 407 }
 SELECT lcm(-9223372036854775807, 9223372036854775808); -- { serverError 407 }
 SELECT lcm(9223372036854775808, -1); -- { serverError 407 }
 SELECT lcm(-170141183460469231731687303715884105728, -170141183460469231731687303715884105728); -- { serverError 43 }
-SELECT lcm(toInt128(-170141183460469231731687303715884105728), toInt128(-170141183460469231731687303715884105728)); -- { serverError 407 }
-SELECT lcm(toInt128(-170141183460469231731687303715884105720), toInt128(-170141183460469231731687303715884105720)); -- { serverError 407 }
+SELECT lcm(toInt128(-170141183460469231731687303715884105728), toInt128(-170141183460469231731687303715884105728));
+170141183460469231722463931679029329921
+SELECT lcm(toInt128(-170141183460469231731687303715884105720), toInt128(-170141183460469231731687303715884105720));
+170141183460469231722463931679029329921
 SELECT lcm(toInt128('-170141183460469231731687303715884105720'), toInt128('-170141183460469231731687303715884105720'));
 170141183460469231731687303715884105720
 SELECT lcm(-9223372036854775806, -9223372036854775806);
diff --git a/tests/queries/0_stateless/01666_lcm_ubsan.sql b/tests/queries/0_stateless/01666_lcm_ubsan.sql
index b3b869c80ed4..8ebdf148a65b 100644
--- a/tests/queries/0_stateless/01666_lcm_ubsan.sql
+++ b/tests/queries/0_stateless/01666_lcm_ubsan.sql
@@ -5,7 +5,7 @@ SELECT lcm(-9223372036854775808, 9223372036854775807); -- { serverError 407 }
 SELECT lcm(-9223372036854775807, 9223372036854775808); -- { serverError 407 }
 SELECT lcm(9223372036854775808, -1); -- { serverError 407 }
 SELECT lcm(-170141183460469231731687303715884105728, -170141183460469231731687303715884105728); -- { serverError 43 }
-SELECT lcm(toInt128(-170141183460469231731687303715884105728), toInt128(-170141183460469231731687303715884105728)); -- { serverError 407 }
-SELECT lcm(toInt128(-170141183460469231731687303715884105720), toInt128(-170141183460469231731687303715884105720)); -- { serverError 407 }
+SELECT lcm(toInt128(-170141183460469231731687303715884105728), toInt128(-170141183460469231731687303715884105728));
+SELECT lcm(toInt128(-170141183460469231731687303715884105720), toInt128(-170141183460469231731687303715884105720));
 SELECT lcm(toInt128('-170141183460469231731687303715884105720'), toInt128('-170141183460469231731687303715884105720'));
 SELECT lcm(-9223372036854775806, -9223372036854775806);
diff --git a/tests/queries/0_stateless/01720_type_map_and_casts.reference b/tests/queries/0_stateless/01720_type_map_and_casts.reference
index 590bdedd7f23..760624d7f407 100644
--- a/tests/queries/0_stateless/01720_type_map_and_casts.reference
+++ b/tests/queries/0_stateless/01720_type_map_and_casts.reference
@@ -32,7 +32,7 @@ Map(UUID, UInt16)
 {'00001192-0000-4000-8000-000000000001':1,'00001192-0000-4000-7000-000000000001':2}
 0	2	1
 Map(Int128, String)
-{-1:'a',0:'b',1234567898765432193024000:'c',-1234567898765432193024000:'d'}
+{-1:'a',0:'b',1234567898765432123456789:'c',-1234567898765432123456789:'d'}
 a	b	c	d
 
 a
diff --git a/tests/queries/0_stateless/01720_type_map_and_casts.sql b/tests/queries/0_stateless/01720_type_map_and_casts.sql
index d7991999ef71..f03773d90849 100644
--- a/tests/queries/0_stateless/01720_type_map_and_casts.sql
+++ b/tests/queries/0_stateless/01720_type_map_and_casts.sql
@@ -65,15 +65,15 @@ CREATE TABLE table_map_with_key_integer (d DATE, m Map(Int128, String))
 ENGINE = MergeTree() ORDER BY d;
 
 
-INSERT INTO table_map_with_key_integer SELECT '2020-01-01', map(-1, 'a', 0, 'b', toInt128(1234567898765432123456789), 'c', toInt128(-1234567898765432123456789), 'd');
+INSERT INTO table_map_with_key_integer SELECT '2020-01-01', map(-1, 'a', 0, 'b', toInt128('1234567898765432123456789'), 'c', toInt128('-1234567898765432123456789'), 'd');
 
 SELECT 'Map(Int128, String)';
 
 SELECT m FROM table_map_with_key_integer;
-SELECT m[toInt128(-1)], m[toInt128(0)], m[toInt128(1234567898765432123456789)], m[toInt128(-1234567898765432123456789)] FROM table_map_with_key_integer;
+SELECT m[toInt128(-1)], m[toInt128(0)], m[toInt128('1234567898765432123456789')], m[toInt128('-1234567898765432123456789')] FROM table_map_with_key_integer;
 SELECT m[toInt128(number - 2)] FROM table_map_with_key_integer ARRAY JOIN [0, 1, 2, 3] AS number;
 
-SELECT m[-1], m[0], m[toInt128(1234567898765432123456789)], m[toInt128(-1234567898765432123456789)] FROM table_map_with_key_integer;
+SELECT m[-1], m[0], m[toInt128('1234567898765432123456789')], m[toInt128('-1234567898765432123456789')] FROM table_map_with_key_integer;
 SELECT m[toUInt64(0)], m[toInt64(0)], m[toUInt8(0)], m[toUInt16(0)] FROM table_map_with_key_integer;
 
 DROP TABLE IF EXISTS table_map_with_key_integer;
