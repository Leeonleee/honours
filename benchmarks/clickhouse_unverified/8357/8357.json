{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 8357,
  "instance_id": "ClickHouse__ClickHouse-8357",
  "issue_numbers": [
    "6687"
  ],
  "base_commit": "a33ade77fd4dd4619f4073b6ceeb49ac416aeb63",
  "patch": "diff --git a/dbms/src/IO/S3Common.cpp b/dbms/src/IO/S3Common.cpp\nindex a9015ca5982a..b981c34c2d24 100644\n--- a/dbms/src/IO/S3Common.cpp\n+++ b/dbms/src/IO/S3Common.cpp\n@@ -29,7 +29,7 @@ const std::pair<LogsLevel, Message::Priority> & convertLogLevel(Aws::Utils::Logg\n     return mapping.at(log_level);\n }\n \n-class AWSLogger : public Aws::Utils::Logging::LogSystemInterface\n+class AWSLogger final : public Aws::Utils::Logging::LogSystemInterface\n {\n public:\n     ~AWSLogger() final = default;\ndiff --git a/dbms/src/Interpreters/InterpreterSelectQuery.cpp b/dbms/src/Interpreters/InterpreterSelectQuery.cpp\nindex 17d6d280086d..3f8ad6f02d1d 100644\n--- a/dbms/src/Interpreters/InterpreterSelectQuery.cpp\n+++ b/dbms/src/Interpreters/InterpreterSelectQuery.cpp\n@@ -503,28 +503,31 @@ Block InterpreterSelectQuery::getSampleBlockImpl()\n \n     /// Do all AST changes here, because actions from analysis_result will be used later in readImpl.\n \n-    /// PREWHERE optimization.\n-    /// Turn off, if the table filter (row-level security) is applied.\n-    if (storage && !context->getRowPolicy()->getCondition(storage->getDatabaseName(), storage->getTableName(), RowPolicy::SELECT_FILTER))\n+    if (storage)\n     {\n         query_analyzer->makeSetsForIndex(query.where());\n         query_analyzer->makeSetsForIndex(query.prewhere());\n \n-        auto optimize_prewhere = [&](auto & merge_tree)\n+        /// PREWHERE optimization.\n+        /// Turn off, if the table filter (row-level security) is applied.\n+        if (!context->getRowPolicy()->getCondition(storage->getDatabaseName(), storage->getTableName(), RowPolicy::SELECT_FILTER))\n         {\n-            SelectQueryInfo current_info;\n-            current_info.query = query_ptr;\n-            current_info.syntax_analyzer_result = syntax_analyzer_result;\n-            current_info.sets = query_analyzer->getPreparedSets();\n-\n-            /// Try transferring some condition from WHERE to PREWHERE if enabled and viable\n-            if (settings.optimize_move_to_prewhere && query.where() && !query.prewhere() && !query.final())\n-                MergeTreeWhereOptimizer{current_info, *context, merge_tree,\n-                                        syntax_analyzer_result->requiredSourceColumns(), log};\n-        };\n-\n-        if (const auto * merge_tree_data = dynamic_cast<const MergeTreeData *>(storage.get()))\n-            optimize_prewhere(*merge_tree_data);\n+            auto optimize_prewhere = [&](auto & merge_tree)\n+            {\n+                SelectQueryInfo current_info;\n+                current_info.query = query_ptr;\n+                current_info.syntax_analyzer_result = syntax_analyzer_result;\n+                current_info.sets = query_analyzer->getPreparedSets();\n+\n+                /// Try transferring some condition from WHERE to PREWHERE if enabled and viable\n+                if (settings.optimize_move_to_prewhere && query.where() && !query.prewhere() && !query.final())\n+                    MergeTreeWhereOptimizer{current_info, *context, merge_tree,\n+                                            syntax_analyzer_result->requiredSourceColumns(), log};\n+            };\n+\n+            if (const auto * merge_tree_data = dynamic_cast<const MergeTreeData *>(storage.get()))\n+                optimize_prewhere(*merge_tree_data);\n+        }\n     }\n \n     if (storage && !options.only_analyze)\n",
  "test_patch": "diff --git a/dbms/tests/integration/test_row_policy/test.py b/dbms/tests/integration/test_row_policy/test.py\nindex 421a4b0510c1..f5136faff54c 100644\n--- a/dbms/tests/integration/test_row_policy/test.py\n+++ b/dbms/tests/integration/test_row_policy/test.py\n@@ -34,7 +34,7 @@ def started_cluster():\n             CREATE TABLE mydb.filtered_table3 (a UInt8, b UInt8, c UInt16 ALIAS a + b) ENGINE MergeTree ORDER BY a;\n             INSERT INTO mydb.filtered_table3 values (0, 0), (0, 1), (1, 0), (1, 1);\n         ''')\n-        \n+\n         yield cluster\n \n     finally:\n@@ -58,6 +58,7 @@ def test_smoke():\n     assert instance.query(\"SELECT a FROM mydb.filtered_table1\") == \"1\\n1\\n\"\n     assert instance.query(\"SELECT b FROM mydb.filtered_table1\") == \"0\\n1\\n\"\n     assert instance.query(\"SELECT a FROM mydb.filtered_table1 WHERE a = 1\") == \"1\\n1\\n\"\n+    assert instance.query(\"SELECT a FROM mydb.filtered_table1 WHERE a IN (1)\") == \"1\\n1\\n\"\n     assert instance.query(\"SELECT a = 1 FROM mydb.filtered_table1\") == \"1\\n1\\n\"\n \n     assert instance.query(\"SELECT a FROM mydb.filtered_table3\") == \"0\\n1\\n\"\n",
  "problem_statement": "'Set for IN is not created yet' error with single value IN condition and row level security\nRequests with \"IN (single value)\" criteria return an error if user has row level security restrictions.\r\n\r\nTested with version 19.13.3.26 (docker image)\r\n\r\nHow to reproduce:\r\n1) configure /etc/clickhouse-server/users.d/user.xml:\r\n\r\n```\r\n<?xml version=\"1.0\"?>\r\n<yandex>\r\n    <users>\r\n        <test>\r\n            <profile>default</profile>\r\n            <quota>default</quota>\r\n\r\n            <networks replace=\"replace\">\r\n                <ip>::/0</ip>\r\n            </networks>\r\n\r\n            <password>test</password>\r\n\r\n            <allow_databases>\r\n                <database>default</database>\r\n            </allow_databases>\r\n\r\n            <databases>\r\n                <default>\r\n                    <test_in>\r\n                        <filter>a = 'a'</filter>\r\n                    </test_in>\r\n                </default>\r\n            </databases>\r\n        </test>\r\n    </users>\r\n</yandex>\r\n```\r\n\r\n2) create table:\r\n```\r\ncreate table test_in (a String,b String,c String) Engine=MergeTree order by (a,b);\r\ninsert into test_in values('a','b','c'),('aa','bb','cc');\r\n```\r\n\r\n3) with user default:\r\n```\r\nselect * from test_in where a in ('a') => works\r\nselect * from test_in where b in ('b') => works\r\nselect * from test_in where c in ('c') => works\r\n```\r\n4) with user test:\r\n```\r\nselect * from test_in where a in ('a') => error\r\nselect * from test_in where b in ('b') => error\r\nselect * from test_in where c in ('c') => works\r\nselect * from test_in where a in ('a','a') => works\r\n```\r\nError is: 'Set for IN is not created yet.'\r\n\r\nI cannot change the requests as they are automatically generated by Grafana.\r\n\n",
  "hints_text": "",
  "created_at": "2019-12-23T15:27:21Z",
  "modified_files": [
    "dbms/src/IO/S3Common.cpp",
    "dbms/src/Interpreters/InterpreterSelectQuery.cpp"
  ],
  "modified_test_files": [
    "dbms/tests/integration/test_row_policy/test.py"
  ]
}