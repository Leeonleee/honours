{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 12275,
  "instance_id": "ClickHouse__ClickHouse-12275",
  "issue_numbers": [
    "8212",
    "4342"
  ],
  "base_commit": "0fdc29be1eef2c67c973cff531455116fa17326d",
  "patch": "diff --git a/src/DataTypes/getLeastSupertype.cpp b/src/DataTypes/getLeastSupertype.cpp\nindex 9c3ca679467f..9cd3e09758ec 100644\n--- a/src/DataTypes/getLeastSupertype.cpp\n+++ b/src/DataTypes/getLeastSupertype.cpp\n@@ -9,6 +9,7 @@\n #include <DataTypes/DataTypeArray.h>\n #include <DataTypes/DataTypeTuple.h>\n #include <DataTypes/DataTypeNullable.h>\n+#include <DataTypes/DataTypeLowCardinality.h>\n #include <DataTypes/DataTypeNothing.h>\n #include <DataTypes/DataTypeString.h>\n #include <DataTypes/DataTypeDateTime.h>\n@@ -160,6 +161,39 @@ DataTypePtr getLeastSupertype(const DataTypes & types)\n         }\n     }\n \n+    /// For LowCardinality. This is above Nullable, because LowCardinality can contain Nullable but cannot be inside Nullable.\n+    {\n+        bool have_low_cardinality = false;\n+        bool have_not_low_cardinality = false;\n+\n+        DataTypes nested_types;\n+        nested_types.reserve(types.size());\n+\n+        for (const auto & type : types)\n+        {\n+            if (const DataTypeLowCardinality * type_low_cardinality = typeid_cast<const DataTypeLowCardinality *>(type.get()))\n+            {\n+                have_low_cardinality = true;\n+                nested_types.emplace_back(type_low_cardinality->getDictionaryType());\n+            }\n+            else\n+            {\n+                have_not_low_cardinality = true;\n+                nested_types.emplace_back(type);\n+            }\n+        }\n+\n+        /// All LowCardinality gives LowCardinality.\n+        /// LowCardinality with high cardinality gives high cardinality.\n+        if (have_low_cardinality)\n+        {\n+            if (have_not_low_cardinality)\n+                return getLeastSupertype(nested_types);\n+            else\n+                return std::make_shared<DataTypeLowCardinality>(getLeastSupertype(nested_types));\n+        }\n+    }\n+\n     /// For Nullable\n     {\n         bool have_nullable = false;\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01377_supertype_low_cardinality.reference b/tests/queries/0_stateless/01377_supertype_low_cardinality.reference\nnew file mode 100644\nindex 000000000000..89c8606dd33c\n--- /dev/null\n+++ b/tests/queries/0_stateless/01377_supertype_low_cardinality.reference\n@@ -0,0 +1,71 @@\n+hello\n+hello\n+String\n+String\n+---\n+---\n+hello\n+hello\n+hello\n+hello\n+---\n+hello\n+hello\n+-\n+hello\n+hello\n+-\n+hello\n+hello\n+-\n+hello\n+hello\n+-\n+hello\n+hello\n+-\n+hello\n+hello\n+-\n+hello\n+hello\n+-\n+hello\n+hello\n+-\n+hello\n+hello\n+-\n+hello\n+hello\n+-\n+hello\n+hello\n+-\n+hello\n+hello\n+---\n+hello\n+hello\n+hello\n+-\n+hello\n+hello\n+hello\n+-\n+hello\n+hello\n+hello\n+-\n+hello\n+hello\n+hello\n+---\n+hello\n+hello\n+hello\n+hello\n+---\n+['abc','def']\n+['abc','def']\n+['abc','def']\ndiff --git a/tests/queries/0_stateless/01377_supertype_low_cardinality.sql b/tests/queries/0_stateless/01377_supertype_low_cardinality.sql\nnew file mode 100644\nindex 000000000000..9e7ed1f98b2c\n--- /dev/null\n+++ b/tests/queries/0_stateless/01377_supertype_low_cardinality.sql\n@@ -0,0 +1,71 @@\n+SELECT 'hello' UNION ALL SELECT toLowCardinality('hello');\n+SELECT toTypeName(x) FROM (SELECT 'hello' AS x UNION ALL SELECT toLowCardinality('hello'));\n+\n+SELECT '---';\n+\n+create temporary table t1(a String);\n+create temporary table t2(a LowCardinality(String));\n+select a from t1 union all select a from t2;\n+\n+SELECT '---';\n+\n+CREATE TEMPORARY TABLE a (x String);\n+CREATE TEMPORARY TABLE b (x LowCardinality(String));\n+CREATE TEMPORARY TABLE c (x Nullable(String));\n+CREATE TEMPORARY TABLE d (x LowCardinality(Nullable(String)));\n+\n+INSERT INTO a VALUES ('hello');\n+INSERT INTO b VALUES ('hello');\n+INSERT INTO c VALUES ('hello');\n+INSERT INTO d VALUES ('hello');\n+\n+SELECT x FROM a;\n+SELECT x FROM b;\n+SELECT x FROM c;\n+SELECT x FROM d;\n+\n+SELECT '---';\n+\n+SELECT x FROM a UNION ALL SELECT x FROM b;\n+SELECT '-';\n+SELECT x FROM a UNION ALL SELECT x FROM c;\n+SELECT '-';\n+SELECT x FROM a UNION ALL SELECT x FROM d;\n+SELECT '-';\n+SELECT x FROM b UNION ALL SELECT x FROM a;\n+SELECT '-';\n+SELECT x FROM b UNION ALL SELECT x FROM c;\n+SELECT '-';\n+SELECT x FROM b UNION ALL SELECT x FROM d;\n+SELECT '-';\n+SELECT x FROM c UNION ALL SELECT x FROM a;\n+SELECT '-';\n+SELECT x FROM c UNION ALL SELECT x FROM b;\n+SELECT '-';\n+SELECT x FROM c UNION ALL SELECT x FROM d;\n+SELECT '-';\n+SELECT x FROM d UNION ALL SELECT x FROM a;\n+SELECT '-';\n+SELECT x FROM d UNION ALL SELECT x FROM c;\n+SELECT '-';\n+SELECT x FROM d UNION ALL SELECT x FROM b;\n+\n+SELECT '---';\n+\n+SELECT x FROM b UNION ALL SELECT x FROM c UNION ALL SELECT x FROM d;\n+SELECT '-';\n+SELECT x FROM a UNION ALL SELECT x FROM c UNION ALL SELECT x FROM d;\n+SELECT '-';\n+SELECT x FROM a UNION ALL SELECT x FROM b UNION ALL SELECT x FROM d;\n+SELECT '-';\n+SELECT x FROM a UNION ALL SELECT x FROM b UNION ALL SELECT x FROM c;\n+\n+SELECT '---';\n+\n+SELECT x FROM a UNION ALL SELECT x FROM b UNION ALL SELECT x FROM c UNION ALL SELECT x FROM d;\n+\n+SELECT '---';\n+\n+SELECT [CAST('abc' AS LowCardinality(String)), CAST('def' AS Nullable(String))];\n+SELECT [CAST('abc' AS LowCardinality(String)), CAST('def' AS FixedString(3))];\n+SELECT [CAST('abc' AS LowCardinality(String)), CAST('def' AS LowCardinality(FixedString(3)))];\n",
  "problem_statement": "Wrong supertype for String and LowCardinality(Nullable(String)) \n```\r\nDB::Exception: There is no supertype for types String, LowCardinality(Nullable(String)) because some of them are String/FixedString and some of them are not (version 19.17.4.11)\r\n```\nNormal type and LowCardinality can not be combined with UNION ALL\n(you don't have to strictly follow this form)\r\n\r\nClickHouse fails when String and LowCardinality(String) columns are connected with UNION ALL. Steps to reproduce:\r\n\r\n```\r\ncreate temporary table t1(a String);\r\n\r\ncreate temporary table t2(a LowCardinality(String));\r\n\r\nselect a from t1 union all select a from t2;\r\n```\r\n\r\nReceived exception from server (version 19.1.6):\r\nCode: 386. DB::Exception: Received from localhost:9000, ::1. DB::Exception: There is no supertype for types String, LowCardinality(String) because some of them are String/FixedString and some of them are not.\n",
  "hints_text": "there is for queries which used UNION ALL\r\n\r\n```\r\nSELECT 'undefined' AS field FROM table AS t\r\nUNION ALL\r\nSELECT field FROM table AS t\r\n```\nduplicated with https://github.com/ClickHouse/ClickHouse/issues/4342\n`SELECT 'hello' UNION ALL SELECT toLowCardinality('hello')`\nHaving the same issue on 19.3.3\r\n\r\nCurrently you can use `CAST(a, 'String')` as workaround\r\n```sql\r\nSELECT a FROM t1 UNION ALL SELECT CAST(a, 'String') FROM t2;\r\n```\nSure cast works. One way or another. \r\n\r\nIt is also interesting that behaviour of arrays is not consistent here. I.e. element of Array(LowCardinality(String)) is String. array of LowCardinality(String) is array of String and so on.\r\n\r\nCommon supertype for String and LowCardinality(String) should help.\r\n\r\n```\r\nSELECT \r\n    cast('a', 'LowCardinality(String)') AS a, \r\n    toTypeName(a), \r\n    [a] AS array_a, \r\n    toTypeName([a]), \r\n    cast([a], 'Array(LowCardinality(String))') AS array_a_casted, \r\n    toTypeName(array_a_casted), \r\n    toTypeName(array_a_casted[1])\r\nFORMAT Vertical\r\n\r\nRow 1:\r\n\u2500\u2500\u2500\u2500\u2500\u2500\r\na:                                                                                                              a\r\ntoTypeName(cast('a', 'LowCardinality(String)')):                                                                LowCardinality(String)\r\narray_a:                                                                                                        ['a']\r\ntoTypeName(array(cast('a', 'LowCardinality(String)'))):                                                         Array(String)\r\narray_a_casted:                                                                                                 ['a']\r\ntoTypeName(cast(array(cast('a', 'LowCardinality(String)')), 'Array(LowCardinality(String))')):                  Array(LowCardinality(String))\r\ntoTypeName(arrayElement(cast(array(cast('a', 'LowCardinality(String)')), 'Array(LowCardinality(String))'), 1)): String\r\n```",
  "created_at": "2020-07-07T22:29:38Z",
  "modified_files": [
    "src/DataTypes/getLeastSupertype.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/01377_supertype_low_cardinality.reference",
    "b/tests/queries/0_stateless/01377_supertype_low_cardinality.sql"
  ]
}