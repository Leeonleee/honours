{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 63722,
  "instance_id": "ClickHouse__ClickHouse-63722",
  "issue_numbers": [
    "63653"
  ],
  "base_commit": "67cf40810a9fb96cfcd9119b8ba040471e017225",
  "patch": "diff --git a/src/Storages/VirtualColumnUtils.cpp b/src/Storages/VirtualColumnUtils.cpp\nindex e3cbff5f01b4..cec55cefda29 100644\n--- a/src/Storages/VirtualColumnUtils.cpp\n+++ b/src/Storages/VirtualColumnUtils.cpp\n@@ -219,7 +219,7 @@ void addRequestedPathFileAndSizeVirtualsToChunk(\n     }\n }\n \n-static bool canEvaluateSubtree(const ActionsDAG::Node * node, const Block & allowed_inputs)\n+static bool canEvaluateSubtree(const ActionsDAG::Node * node, const Block * allowed_inputs)\n {\n     std::stack<const ActionsDAG::Node *> nodes;\n     nodes.push(node);\n@@ -228,7 +228,10 @@ static bool canEvaluateSubtree(const ActionsDAG::Node * node, const Block & allo\n         const auto * cur = nodes.top();\n         nodes.pop();\n \n-        if (cur->type == ActionsDAG::ActionType::INPUT && !allowed_inputs.has(cur->result_name))\n+        if (cur->type == ActionsDAG::ActionType::ARRAY_JOIN)\n+            return false;\n+\n+        if (cur->type == ActionsDAG::ActionType::INPUT && allowed_inputs && !allowed_inputs->has(cur->result_name))\n             return false;\n \n         for (const auto * child : cur->children)\n@@ -336,7 +339,7 @@ static const ActionsDAG::Node * splitFilterNodeForAllowedInputs(\n         }\n     }\n \n-    if (allowed_inputs && !canEvaluateSubtree(node, *allowed_inputs))\n+    if (!canEvaluateSubtree(node, allowed_inputs))\n         return nullptr;\n \n     return node;\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01115_prewhere_array_join.reference b/tests/queries/0_stateless/01115_prewhere_array_join.reference\nindex e69de29bb2d1..573541ac9702 100644\n--- a/tests/queries/0_stateless/01115_prewhere_array_join.reference\n+++ b/tests/queries/0_stateless/01115_prewhere_array_join.reference\n@@ -0,0 +1,1 @@\n+0\ndiff --git a/tests/queries/0_stateless/01115_prewhere_array_join.sql b/tests/queries/0_stateless/01115_prewhere_array_join.sql\nindex e614bdf402b4..6ff86636d1d2 100644\n--- a/tests/queries/0_stateless/01115_prewhere_array_join.sql\n+++ b/tests/queries/0_stateless/01115_prewhere_array_join.sql\n@@ -5,3 +5,9 @@ INSERT INTO prewhere SELECT 0, randomPrintableASCII(10000) FROM numbers(10000);\n SELECT arrayJoin([light]) != 0 AS cond, length(heavy) FROM prewhere WHERE light != 0 AND cond != 0;\n \n DROP TABLE prewhere;\n+\n+DROP TABLE IF EXISTS testtable;\n+CREATE TABLE testtable (DT Datetime, Label1 String, Value UInt64) ENGINE = MergeTree() PARTITION BY DT ORDER BY Label1;\n+INSERT INTO testtable (*) Values (now(), 'app', 1);\n+SELECT arrayJoin([0, 1]) AS arrayIdx FROM testtable WHERE arrayIdx = 0;\n+DROP TABLE testtable;\n",
  "problem_statement": "Select Query Raise Error: Size of filter doesn't match size of column\n# clickhouse version\r\n24.3.3.102-lts\r\n\r\n# Describe what's wrong\r\nSelect Query Raise Enexpected Error: SQL Error [1002]: ClickHouse exception, code: 1002, host: localhost, port: 8123; Code: 9. DB::Exception: Size of filter (2) doesn't match size of column (1). (SIZES_OF_COLUMNS_DOESNT_MATCH) (version 24.3.3.102 (official build))\r\n\r\n# How to reproduce\r\n```\r\nCREATE DATABASE testdb\r\n\r\nCREATE TABLE testdb.testtable (\r\nDT Datetime,\r\nLabel1 String,\r\nValue UInt64,\r\n) ENGINE = MergeTree()\r\nPARTITION BY DT\r\nORDER BY Label1\r\n\r\nINSERT INTO testdb.testtable (*) Values (now(), 'app', 1);\r\n\r\nSELECT arrayJoin([0, 1]) AS arrayIdx FROM testdb.testtable WHERE arrayIdx = 0\r\n\r\nSQL Error [1002]: ClickHouse exception, code: 1002, host: localhost, port: 8123; Code: 9. DB::Exception: Size of filter (2) doesn't match size of column (1). (SIZES_OF_COLUMNS_DOESNT_MATCH) (version 24.3.3.102 (official build))\r\n```\r\n\r\n# Exception log from /var/log/clickhouse-server/clickhouse-server.log\r\n```\r\n2024.05.11 04:36:11.228244 [ 845 ] {bf94c746-3633-445e-af05-27a4ee4676e5} <Error> executeQuery: Code: 9. DB::Exception: Size of filter (2) doesn't match size of column (1). (SIZES_OF_COLUMNS_DOESNT_MATCH) (version 24.3.3.102 (official build)) (from 172.17.0.1:64972) (in query: select arrayJoin([0, 1]) as arrayIdx from testdb.testtable where arrayIdx = 0 FORMAT TabSeparatedWithNamesAndTypes;), Stack trace (when copying this message, always include the lines below):\r\n\r\n0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000cbc851b\r\n1. DB::Exception::Exception<unsigned long, unsigned long&>(int, FormatStringHelperImpl<std::type_identity<unsigned long>::type, std::type_identity<unsigned long&>::type>, unsigned long&&, unsigned long&) @ 0x000000000d24e658\r\n2. DB::ColumnVector<char8_t>::filter(DB::PODArray<char8_t, 4096ul, Allocator<false, false>, 63ul, 64ul> const&, long) const @ 0x00000000114aacc4\r\n3. DB::ColumnLowCardinality::filter(DB::PODArray<char8_t, 4096ul, Allocator<false, false>, 63ul, 64ul> const&, long) const @ 0x000000001143af46\r\n4. DB::VirtualColumnUtils::filterBlockWithDAG(std::shared_ptr<DB::ActionsDAG>, DB::Block&, std::shared_ptr<DB::Context const>) @ 0x0000000011a4c8a3\r\n5. DB::MergeTreeDataSelectExecutor::filterPartsByVirtualColumns(DB::MergeTreeData const&, std::vector<std::shared_ptr<DB::IMergeTreeDataPart const>, std::allocator<std::shared_ptr<DB::IMergeTreeDataPart const>>> const&, std::shared_ptr<DB::ActionsDAG> const&, std::shared_ptr<DB::Context const>) @ 0x0000000011e35293\r\n6. DB::buildIndexes(std::optional<DB::ReadFromMergeTree::Indexes>&, std::shared_ptr<DB::ActionsDAG>, DB::MergeTreeData const&, std::vector<std::shared_ptr<DB::IMergeTreeDataPart const>, std::allocator<std::shared_ptr<DB::IMergeTreeDataPart const>>> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryInfo const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&) @ 0x0000000012814f1e\r\n7. DB::ReadFromMergeTree::applyFilters(DB::ActionDAGNodes) @ 0x0000000012814654\r\n8. DB::QueryPlanOptimizations::optimizePrimaryKeyCondition(std::vector<DB::QueryPlanOptimizations::Frame, std::allocator<DB::QueryPlanOptimizations::Frame>> const&) @ 0x0000000012891b6e\r\n9. DB::QueryPlanOptimizations::optimizeTreeSecondPass(DB::QueryPlanOptimizationSettings const&, DB::QueryPlan::Node&, std::list<DB::QueryPlan::Node, std::allocator<DB::QueryPlan::Node>>&) @ 0x0000000012890815\r\n10. DB::QueryPlan::optimize(DB::QueryPlanOptimizationSettings const&) @ 0x00000000127f4fb6\r\n11. DB::QueryPlan::buildQueryPipeline(DB::QueryPlanOptimizationSettings const&, DB::BuildQueryPipelineSettings const&) @ 0x00000000127f3e6e\r\n12. DB::InterpreterSelectQueryAnalyzer::buildQueryPipeline() @ 0x0000000010e5310d\r\n13. DB::InterpreterSelectQueryAnalyzer::execute() @ 0x0000000010e529fe\r\n14. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*) @ 0x000000001126e162\r\n15. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&)>) @ 0x000000001127341e\r\n16. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000122f0075\r\n17. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000122f4b34\r\n18. DB::HTTPServerConnection::run() @ 0x00000000123740da\r\n19. Poco::Net::TCPServerConnection::start() @ 0x0000000014c9b8d2\r\n20. Poco::Net::TCPServerDispatcher::run() @ 0x0000000014c9c719\r\n21. Poco::PooledThread::run() @ 0x0000000014d94e81\r\n22. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000014d9341d\r\n23. ? @ 0x00007fad16c6d609\r\n24. ? @ 0x00007fad16b92353\r\n\r\n2024.05.11 04:36:11.228606 [ 845 ] {bf94c746-3633-445e-af05-27a4ee4676e5} <Error> DynamicQueryHandler: Code: 9. DB::Exception: Size of filter (2) doesn't match size of column (1). (SIZES_OF_COLUMNS_DOESNT_MATCH), Stack trace (when copying this message, always include the lines below):\r\n\r\n0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000cbc851b\r\n1. DB::Exception::Exception<unsigned long, unsigned long&>(int, FormatStringHelperImpl<std::type_identity<unsigned long>::type, std::type_identity<unsigned long&>::type>, unsigned long&&, unsigned long&) @ 0x000000000d24e658\r\n2. DB::ColumnVector<char8_t>::filter(DB::PODArray<char8_t, 4096ul, Allocator<false, false>, 63ul, 64ul> const&, long) const @ 0x00000000114aacc4\r\n3. DB::ColumnLowCardinality::filter(DB::PODArray<char8_t, 4096ul, Allocator<false, false>, 63ul, 64ul> const&, long) const @ 0x000000001143af46\r\n4. DB::VirtualColumnUtils::filterBlockWithDAG(std::shared_ptr<DB::ActionsDAG>, DB::Block&, std::shared_ptr<DB::Context const>) @ 0x0000000011a4c8a3\r\n5. DB::MergeTreeDataSelectExecutor::filterPartsByVirtualColumns(DB::MergeTreeData const&, std::vector<std::shared_ptr<DB::IMergeTreeDataPart const>, std::allocator<std::shared_ptr<DB::IMergeTreeDataPart const>>> const&, std::shared_ptr<DB::ActionsDAG> const&, std::shared_ptr<DB::Context const>) @ 0x0000000011e35293\r\n6. DB::buildIndexes(std::optional<DB::ReadFromMergeTree::Indexes>&, std::shared_ptr<DB::ActionsDAG>, DB::MergeTreeData const&, std::vector<std::shared_ptr<DB::IMergeTreeDataPart const>, std::allocator<std::shared_ptr<DB::IMergeTreeDataPart const>>> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryInfo const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&) @ 0x0000000012814f1e\r\n7. DB::ReadFromMergeTree::applyFilters(DB::ActionDAGNodes) @ 0x0000000012814654\r\n8. DB::QueryPlanOptimizations::optimizePrimaryKeyCondition(std::vector<DB::QueryPlanOptimizations::Frame, std::allocator<DB::QueryPlanOptimizations::Frame>> const&) @ 0x0000000012891b6e\r\n9. DB::QueryPlanOptimizations::optimizeTreeSecondPass(DB::QueryPlanOptimizationSettings const&, DB::QueryPlan::Node&, std::list<DB::QueryPlan::Node, std::allocator<DB::QueryPlan::Node>>&) @ 0x0000000012890815\r\n10. DB::QueryPlan::optimize(DB::QueryPlanOptimizationSettings const&) @ 0x00000000127f4fb6\r\n11. DB::QueryPlan::buildQueryPipeline(DB::QueryPlanOptimizationSettings const&, DB::BuildQueryPipelineSettings const&) @ 0x00000000127f3e6e\r\n12. DB::InterpreterSelectQueryAnalyzer::buildQueryPipeline() @ 0x0000000010e5310d\r\n13. DB::InterpreterSelectQueryAnalyzer::execute() @ 0x0000000010e529fe\r\n14. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*) @ 0x000000001126e162\r\n15. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&)>) @ 0x000000001127341e\r\n16. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000122f0075\r\n17. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000122f4b34\r\n18. DB::HTTPServerConnection::run() @ 0x00000000123740da\r\n19. Poco::Net::TCPServerConnection::start() @ 0x0000000014c9b8d2\r\n20. Poco::Net::TCPServerDispatcher::run() @ 0x0000000014c9c719\r\n21. Poco::PooledThread::run() @ 0x0000000014d94e81\r\n22. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000014d9341d\r\n23. ? @ 0x00007fad16c6d609\r\n24. ? @ 0x00007fad16b92353\r\n (version 24.3.3.102 (official build))\r\n```\r\n\r\n# Additional context\r\nThe select query work fine at version 22.3.6.5, We want upgrade clickhouse from 22.3.6.5 to newest LTS version 24.3.3.102, and meet this error.\r\n\r\n\n",
  "hints_text": "Reproducing scenario: https://fiddle.clickhouse.com/05dee1d8-b9da-446c-b777-98f88441798b\nFails with old analyzer as well.",
  "created_at": "2024-05-13T18:07:40Z",
  "modified_files": [
    "src/Storages/VirtualColumnUtils.cpp"
  ],
  "modified_test_files": [
    "tests/queries/0_stateless/01115_prewhere_array_join.reference",
    "tests/queries/0_stateless/01115_prewhere_array_join.sql"
  ]
}