diff --git a/src/Interpreters/HashJoin.cpp b/src/Interpreters/HashJoin.cpp
index 1c450d531d6a..2d7015bdb922 100644
--- a/src/Interpreters/HashJoin.cpp
+++ b/src/Interpreters/HashJoin.cpp
@@ -1387,6 +1387,11 @@ ColumnWithTypeAndName HashJoin::joinGet(const Block & block, const Block & block
     return keys.getByPosition(keys.columns() - 1);
 }
 
+void HashJoin::checkTypesOfKeys(const Block & block) const
+{
+    JoinCommon::checkTypesOfKeys(block, table_join->keyNamesLeft(), right_table_keys, key_names_right);
+}
+
 void HashJoin::joinBlock(Block & block, ExtraBlockPtr & not_processed)
 {
     const Names & key_names_left = table_join->keyNamesLeft();
diff --git a/src/Interpreters/HashJoin.h b/src/Interpreters/HashJoin.h
index 2e691f189c46..a36393278ff8 100644
--- a/src/Interpreters/HashJoin.h
+++ b/src/Interpreters/HashJoin.h
@@ -140,6 +140,8 @@ class HashJoin : public IJoin
       */
     bool addJoinedBlock(const Block & block, bool check_limits) override;
 
+    void checkTypesOfKeys(const Block & block) const override;
+
     /** Join data from the map (that was previously built by calls to addJoinedBlock) to the block with data from "left" table.
       * Could be called from different threads in parallel.
       */
diff --git a/src/Interpreters/IJoin.h b/src/Interpreters/IJoin.h
index 2215402e1d44..c48524e2031b 100644
--- a/src/Interpreters/IJoin.h
+++ b/src/Interpreters/IJoin.h
@@ -27,6 +27,8 @@ class IJoin
     /// @returns false, if some limit was exceeded and you should not insert more data.
     virtual bool addJoinedBlock(const Block & block, bool check_limits = true) = 0;
 
+    virtual void checkTypesOfKeys(const Block & block) const = 0;
+
     /// Join the block with data from left hand of JOIN to the right hand data (that was previously built by calls to addJoinedBlock).
     /// Could be called from different threads in parallel.
     virtual void joinBlock(Block & block, std::shared_ptr<ExtraBlock> & not_processed) = 0;
diff --git a/src/Interpreters/JoinSwitcher.h b/src/Interpreters/JoinSwitcher.h
index e750bc5eed09..83ac70044a80 100644
--- a/src/Interpreters/JoinSwitcher.h
+++ b/src/Interpreters/JoinSwitcher.h
@@ -26,6 +26,11 @@ class JoinSwitcher : public IJoin
     /// @returns false, if join-on-disk disk limit exceeded
     bool addJoinedBlock(const Block & block, bool check_limits) override;
 
+    void checkTypesOfKeys(const Block & block) const override
+    {
+        join->checkTypesOfKeys(block);
+    }
+
     void joinBlock(Block & block, std::shared_ptr<ExtraBlock> & not_processed) override
     {
         join->joinBlock(block, not_processed);
diff --git a/src/Interpreters/MergeJoin.cpp b/src/Interpreters/MergeJoin.cpp
index 0150bbe1d936..eb806caa34fa 100644
--- a/src/Interpreters/MergeJoin.cpp
+++ b/src/Interpreters/MergeJoin.cpp
@@ -666,16 +666,24 @@ bool MergeJoin::addJoinedBlock(const Block & src_block, bool)
     return saveRightBlock(std::move(block));
 }
 
+void MergeJoin::checkTypesOfKeys(const Block & block) const
+{
+    /// Do not check auxailary column for extra conditions, use original key names
+    JoinCommon::checkTypesOfKeys(block, table_join->keyNamesLeft(), right_table_keys, table_join->keyNamesRight());
+}
+
 void MergeJoin::joinBlock(Block & block, ExtraBlockPtr & not_processed)
 {
     Names lowcard_keys = lowcard_right_keys;
     if (block)
     {
+        /// We need to check type of masks before `addConditionJoinColumn`, because it assumes that types is correct
         JoinCommon::checkTypesOfMasks(block, mask_column_name_left, right_sample_block, mask_column_name_right);
 
         /// Add auxiliary column, will be removed after joining
         addConditionJoinColumn(block, JoinTableSide::Left);
 
+        /// Types of keys can be checked only after `checkTypesOfKeys`
         JoinCommon::checkTypesOfKeys(block, key_names_left, right_table_keys, key_names_right);
 
         materializeBlockInplace(block);
diff --git a/src/Interpreters/MergeJoin.h b/src/Interpreters/MergeJoin.h
index 9e765041846f..53cde2bff7c5 100644
--- a/src/Interpreters/MergeJoin.h
+++ b/src/Interpreters/MergeJoin.h
@@ -25,6 +25,7 @@ class MergeJoin : public IJoin
 
     const TableJoin & getTableJoin() const override { return *table_join; }
     bool addJoinedBlock(const Block & block, bool check_limits) override;
+    void checkTypesOfKeys(const Block & block) const override;
     void joinBlock(Block &, ExtraBlockPtr & not_processed) override;
 
     void setTotals(const Block &) override;
diff --git a/src/Interpreters/join_common.cpp b/src/Interpreters/join_common.cpp
index b097a8f61929..9a4cdd97c13a 100644
--- a/src/Interpreters/join_common.cpp
+++ b/src/Interpreters/join_common.cpp
@@ -399,7 +399,7 @@ void checkTypesOfKeys(const Block & block_left, const Names & key_names_left,
 void checkTypesOfKeys(const Block & block_left, const Names & key_names_left, const String & condition_name_left,
                       const Block & block_right, const Names & key_names_right, const String & condition_name_right)
 {
-    checkTypesOfKeys(block_left, key_names_left,block_right,key_names_right);
+    checkTypesOfKeys(block_left, key_names_left, block_right, key_names_right);
     checkTypesOfMasks(block_left, condition_name_left, block_right, condition_name_right);
 }
 
diff --git a/src/Processors/Transforms/JoiningTransform.cpp b/src/Processors/Transforms/JoiningTransform.cpp
index f099f41f4722..aceb04d7994b 100644
--- a/src/Processors/Transforms/JoiningTransform.cpp
+++ b/src/Processors/Transforms/JoiningTransform.cpp
@@ -14,8 +14,9 @@ namespace ErrorCodes
 
 Block JoiningTransform::transformHeader(Block header, const JoinPtr & join)
 {
-    ExtraBlockPtr tmp;
     LOG_DEBUG(&Poco::Logger::get("JoiningTransform"), "Before join block: '{}'", header.dumpStructure());
+    join->checkTypesOfKeys(header);
+    ExtraBlockPtr tmp;
     join->joinBlock(header, tmp);
     LOG_DEBUG(&Poco::Logger::get("JoiningTransform"), "After join block: '{}'", header.dumpStructure());
     return header;
