{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 42937,
  "instance_id": "ClickHouse__ClickHouse-42937",
  "issue_numbers": [
    "42818"
  ],
  "base_commit": "acf9a62f2ed9432ecbe52eface914a52f57db239",
  "patch": "diff --git a/src/DataTypes/Serializations/SerializationString.cpp b/src/DataTypes/Serializations/SerializationString.cpp\nindex 5bcbf2d3fdf2..59861ee18b9f 100644\n--- a/src/DataTypes/Serializations/SerializationString.cpp\n+++ b/src/DataTypes/Serializations/SerializationString.cpp\n@@ -84,11 +84,12 @@ void SerializationString::deserializeBinary(IColumn & column, ReadBuffer & istr)\n \n void SerializationString::serializeBinaryBulk(const IColumn & column, WriteBuffer & ostr, size_t offset, size_t limit) const\n {\n-    const ColumnString & column_string = typeid_cast<const ColumnString &>(column);\n+    const auto & full_column = column.convertToFullColumnIfLowCardinality();\n+    const ColumnString & column_string = typeid_cast<const ColumnString &>(*full_column);\n     const ColumnString::Chars & data = column_string.getChars();\n     const ColumnString::Offsets & offsets = column_string.getOffsets();\n \n-    size_t size = column.size();\n+    size_t size = column_string.size();\n     if (!size)\n         return;\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02475_bad_cast_low_cardinality_to_string_bug.reference b/tests/queries/0_stateless/02475_bad_cast_low_cardinality_to_string_bug.reference\nnew file mode 100644\nindex 000000000000..4ffc8576e57d\n--- /dev/null\n+++ b/tests/queries/0_stateless/02475_bad_cast_low_cardinality_to_string_bug.reference\n@@ -0,0 +1,2 @@\n+bbbbb\n+bbbbb\ndiff --git a/tests/queries/0_stateless/02475_bad_cast_low_cardinality_to_string_bug.sql b/tests/queries/0_stateless/02475_bad_cast_low_cardinality_to_string_bug.sql\nnew file mode 100644\nindex 000000000000..3b2abfb3c428\n--- /dev/null\n+++ b/tests/queries/0_stateless/02475_bad_cast_low_cardinality_to_string_bug.sql\n@@ -0,0 +1,1 @@\n+SELECT if(materialize(0), extract(materialize(CAST('aaaaaa', 'LowCardinality(String)')), '\\\\w'), extract(materialize(CAST('bbbbb', 'LowCardinality(String)')), '\\\\w*')) AS res FROM numbers(2);\n",
  "problem_statement": "Bad cast from type DB::ColumnLowCardinality to DB::ColumnString. (if+LowCardinality(String)+extract)\n**Describe what's wrong**\r\nLogical error during query\r\n\r\n**Does it reproduce on recent release?**\r\n\r\nYes\r\n\r\n**Enable crash reporting**\r\n\r\n**How to reproduce**\r\n\r\n22.3.13\r\n22.10\r\n\r\n```\r\nSELECT if(materialize(0), extract(materialize(CAST('aaaaaa', 'LowCardinality(String)')), '\\\\w'), extract(materialize(CAST('bbbbb', 'LowCardinality(String)')), '\\\\w*')) AS res\r\nFROM numbers(2)\r\n\r\nCode: 49. DB::Exception: Received from localhost:9000. DB::Exception: Bad cast from type DB::ColumnLowCardinality to DB::ColumnString. (LOGICAL_ERROR)\r\n\r\nSELECT if(materialize(0), extract(materialize(CAST('aaaaaa', 'LowCardinality(String)')), '\\\\w'), extract(materialize(CAST('bbbbb', 'LowCardinality(String)')), '\\\\w*')) AS res\r\nFROM numbers(2)\r\nSETTINGS short_circuit_function_evaluation = 'disable'\r\n\r\nQuery id: 12b09223-0b1c-4336-9d6c-7312f754fc28\r\n\r\n\u250c\u2500res\u2500\u2500\u2500\u2510\r\n\u2502 bbbbb \u2502\r\n\u2502 bbbbb \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\n**Expected behavior**\r\n\r\nQuery should work\r\n\r\n**Additional context**\r\n\r\nIt's also possible that we also have crash somewhere nearby\r\nStacktrace & LOGICAL_ERROR looks similar to this https://github.com/ClickHouse/ClickHouse/issues/30980\r\n\r\n```\r\n2022.10.31 16:03:49.028819 [ 25199 ] {} <Fatal> BaseDaemon: Address: 0x1 Access: read. Address not mapped to object.\r\n2022.10.31 16:03:49.031334 [ 25199 ] {} <Fatal> BaseDaemon: Stack trace: 0xb3b04a0 0x167b8f63 0x167b8a60 0x167b7e4a 0x167ab2a3 0x1679ecfe 0x1679e04b 0x1679d918 0x1679c3c4 0x15bba2b3 0x164cbf48 0x164d06f2 0x167576fb 0x19a16f8f 0x19a193e1 0x19bd63a9 0x19bd3700 0x7fb7d9ab3ea5 0x7fb7d97dc9fd\r\n2022.10.31 16:03:49.037644 [ 25199 ] {} <Fatal> BaseDaemon: 2. void DB::writeAnyEscapedString<(char)39, false>(char const*, char const*, DB::WriteBuffer&) @ 0xb3b04a0 in /usr/bin/clickhouse\r\n2022.10.31 16:03:49.047634 [ 25199 ] {} <Fatal> BaseDaemon: 3. DB::IRowOutputFormat::write(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn> > > const&, unsigned long) @ 0x167b8f63 in /usr/bin/clickhouse\r\n2022.10.31 16:03:49.047665 [ 25199 ] {} <Fatal> BaseDaemon: 4. DB::IRowOutputFormat::consume(DB::Chunk) @ 0x167b8a60 in /usr/bin/clickhouse\r\n2022.10.31 16:03:49.049235 [ 25199 ] {} <Fatal> BaseDaemon: 5. DB::IOutputFormat::work() @ 0x167b7e4a in /usr/bin/clickhouse\r\n2022.10.31 16:03:49.050920 [ 25199 ] {} <Fatal> BaseDaemon: 6. DB::ExecutionThreadContext::executeTask() @ 0x167ab2a3 in /usr/bin/clickhouse\r\n2022.10.31 16:03:49.050942 [ 25199 ] {} <Fatal> BaseDaemon: 7. DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*) @ 0x1679ecfe in /usr/bin/clickhouse\r\n2022.10.31 16:03:49.050960 [ 25199 ] {} <Fatal> BaseDaemon: 8. DB::PipelineExecutor::executeImpl(unsigned long) @ 0x1679e04b in /usr/bin/clickhouse\r\n2022.10.31 16:03:49.053886 [ 25199 ] {} <Fatal> BaseDaemon: 9. DB::PipelineExecutor::execute(unsigned long) @ 0x1679d918 in /usr/bin/clickhouse\r\n2022.10.31 16:03:49.056971 [ 25199 ] {} <Fatal> BaseDaemon: 10. DB::CompletedPipelineExecutor::execute() @ 0x1679c3c4 in /usr/bin/clickhouse\r\n2022.10.31 16:03:49.061374 [ 25199 ] {} <Fatal> BaseDaemon: 11. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::__1::shared_ptr<DB::Context>, std::__1::function<void (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>, std::__1::optional<DB::FormatSettings> const&) @ 0x15bba2b3 in /usr/bin/clickhouse\r\n2022.10.31 16:03:49.061495 [ 25199 ] {} <Fatal> BaseDaemon: 12. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::__1::optional<DB::CurrentThread::QueryScope>&) @ 0x164cbf48 in /usr/bin/clickhouse\r\n2022.10.31 16:03:49.061600 [ 25199 ] {} <Fatal> BaseDaemon: 13. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&) @ 0x164d06f2 in /usr/bin/clickhouse\r\n2022.10.31 16:03:49.061703 [ 25199 ] {} <Fatal> BaseDaemon: 14. DB::HTTPServerConnection::run() @ 0x167576fb in /usr/bin/clickhouse\r\n2022.10.31 16:03:49.061733 [ 25199 ] {} <Fatal> BaseDaemon: 15. Poco::Net::TCPServerConnection::start() @ 0x19a16f8f in /usr/bin/clickhouse\r\n2022.10.31 16:03:49.061750 [ 25199 ] {} <Fatal> BaseDaemon: 16. Poco::Net::TCPServerDispatcher::run() @ 0x19a193e1 in /usr/bin/clickhouse\r\n2022.10.31 16:03:49.061773 [ 25199 ] {} <Fatal> BaseDaemon: 17. Poco::PooledThread::run() @ 0x19bd63a9 in /usr/bin/clickhouse\r\n2022.10.31 16:03:49.061790 [ 25199 ] {} <Fatal> BaseDaemon: 18. Poco::ThreadImpl::runnableEntry(void*) @ 0x19bd3700 in /usr/bin/clickhouse\r\n2022.10.31 16:03:49.061826 [ 25199 ] {} <Fatal> BaseDaemon: 19. start_thread @ 0x7ea5 in /usr/lib64/libpthread-2.17.so\r\n2022.10.31 16:03:49.061857 [ 25199 ] {} <Fatal> BaseDaemon: 20. __clone @ 0xfe9fd in /usr/lib64/libc-2.17.so\r\n2022.10.31 16:03:52.823399 [ 25199 ] {} <Fatal> BaseDaemon: Calculated checksum of the binary: 503E001D1437A91819E6548330C8B27F. There is no information about the reference checksum.\r\n\r\n```\n",
  "hints_text": "@UnamedRus sorry, I didn't get how this issue and crash fixed by in https://github.com/ClickHouse/ClickHouse/issues/30980 are related ?\nCrash during serialization. & LOGICAL_ERROR from time to time.\r\nIt's also about some complex types like Nullable(String) or LowCardinality(String)",
  "created_at": "2022-11-03T16:22:28Z",
  "modified_files": [
    "src/DataTypes/Serializations/SerializationString.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02475_bad_cast_low_cardinality_to_string_bug.reference",
    "b/tests/queries/0_stateless/02475_bad_cast_low_cardinality_to_string_bug.sql"
  ]
}