diff --git a/tests/queries/0_stateless/03310_aggregate_projection_count_nullable.reference b/tests/queries/0_stateless/03310_aggregate_projection_count_nullable.reference
new file mode 100644
index 000000000000..0329867089c1
--- /dev/null
+++ b/tests/queries/0_stateless/03310_aggregate_projection_count_nullable.reference
@@ -0,0 +1,12 @@
+2025-01-01 05	1
+2025-01-01 04	1
+2025-01-01 03	1
+2025-01-01 02	1
+2025-01-01 01	1
+2025-01-01 00	1
+2025-01-01 05	1
+2025-01-01 04	1
+2025-01-01 03	1
+2025-01-01 02	1
+2025-01-01 01	1
+2025-01-01 00	1
diff --git a/tests/queries/0_stateless/03310_aggregate_projection_count_nullable.sql b/tests/queries/0_stateless/03310_aggregate_projection_count_nullable.sql
new file mode 100644
index 000000000000..6f71d23e1f73
--- /dev/null
+++ b/tests/queries/0_stateless/03310_aggregate_projection_count_nullable.sql
@@ -0,0 +1,76 @@
+-- Tags: no-parallel-replicas
+
+DROP TABLE IF EXISTS log;
+
+CREATE TABLE log(
+    collectorReceiptTime DateTime,
+    eventId String,
+    ruleId Nullable(String),
+    PROJECTION ailog_rule_count (
+    SELECT
+        collectorReceiptTime,
+        ruleId,
+        count(ruleId)
+    GROUP BY
+        collectorReceiptTime,
+        ruleId
+    )
+)
+ENGINE = MergeTree
+PARTITION BY toYYYYMMDD(collectorReceiptTime)
+ORDER BY (collectorReceiptTime, eventId);
+
+INSERT INTO log VALUES ('2025-01-01 00:02:03', 'eventId_001', Null);
+INSERT INTO log VALUES ('2025-01-01 01:04:05', 'eventId_002', Null);
+INSERT INTO log VALUES ('2025-01-01 02:06:07', 'eventId_003', Null);
+INSERT INTO log VALUES ('2025-01-01 03:08:09', 'eventId_004', Null);
+INSERT INTO log VALUES ('2025-01-01 04:10:11', 'eventId_005', Null);
+INSERT INTO log VALUES ('2025-01-01 05:12:13', 'eventId_006', Null);
+
+SELECT
+    formatDateTime(toStartOfInterval(collectorReceiptTime, toIntervalHour(1)), '%Y-%m-%d %H') AS time,
+    COUNT() AS count
+FROM log
+WHERE (collectorReceiptTime >= '2025-01-01 00:00:00') AND (collectorReceiptTime <= '2025-01-01 23:59:59')
+GROUP BY time
+ORDER BY time DESC;
+
+-- Another similar case to verify that COUNT(NOT NULL) should be able to use aggregate projection.
+
+DROP TABLE log;
+
+CREATE TABLE log(
+    collectorReceiptTime DateTime,
+    eventId String,
+    ruleId String,
+    PROJECTION ailog_rule_count (
+    SELECT
+        collectorReceiptTime,
+        ruleId,
+        count(ruleId)
+    GROUP BY
+        collectorReceiptTime,
+        ruleId
+    )
+)
+ENGINE = MergeTree
+PARTITION BY toYYYYMMDD(collectorReceiptTime)
+ORDER BY (collectorReceiptTime, eventId);
+
+INSERT INTO log VALUES ('2025-01-01 00:02:03', 'eventId_001', '');
+INSERT INTO log VALUES ('2025-01-01 01:04:05', 'eventId_002', '');
+INSERT INTO log VALUES ('2025-01-01 02:06:07', 'eventId_003', '');
+INSERT INTO log VALUES ('2025-01-01 03:08:09', 'eventId_004', '');
+INSERT INTO log VALUES ('2025-01-01 04:10:11', 'eventId_005', '');
+INSERT INTO log VALUES ('2025-01-01 05:12:13', 'eventId_006', '');
+
+SELECT
+    formatDateTime(toStartOfInterval(collectorReceiptTime, toIntervalHour(1)), '%Y-%m-%d %H') AS time,
+    COUNT() AS count
+FROM log
+WHERE (collectorReceiptTime >= '2025-01-01 00:00:00') AND (collectorReceiptTime <= '2025-01-01 23:59:59')
+GROUP BY time
+ORDER BY time DESC
+SETTINGS force_optimize_projection = 1;
+
+DROP TABLE log;
