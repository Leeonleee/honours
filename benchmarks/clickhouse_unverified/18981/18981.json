{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 18981,
  "instance_id": "ClickHouse__ClickHouse-18981",
  "issue_numbers": [
    "18051",
    "18973"
  ],
  "base_commit": "8004b0446f257984b58d2c3eb2ed019671388fdd",
  "patch": "diff --git a/src/Core/Settings.h b/src/Core/Settings.h\nindex 0c3525445235..d3575b1a3079 100644\n--- a/src/Core/Settings.h\n+++ b/src/Core/Settings.h\n@@ -372,7 +372,7 @@ class IColumn;\n     M(Bool, enable_scalar_subquery_optimization, true, \"If it is set to true, prevent scalar subqueries from (de)serializing large scalar values and possibly avoid running the same subquery more than once.\", 0) \\\n     M(Bool, optimize_trivial_count_query, true, \"Process trivial 'SELECT count() FROM table' query from metadata.\", 0) \\\n     M(UInt64, mutations_sync, 0, \"Wait for synchronous execution of ALTER TABLE UPDATE/DELETE queries (mutations). 0 - execute asynchronously. 1 - wait current server. 2 - wait all replicas if they exist.\", 0) \\\n-    M(Bool, optimize_move_functions_out_of_any, true, \"Move functions out of aggregate functions 'any', 'anyLast'.\", 0) \\\n+    M(Bool, optimize_move_functions_out_of_any, false, \"Move functions out of aggregate functions 'any', 'anyLast'.\", 0) \\\n     M(Bool, optimize_injective_functions_inside_uniq, true, \"Delete injective functions of one argument inside uniq*() functions.\", 0) \\\n     M(Bool, optimize_arithmetic_operations_in_aggregate_functions, true, \"Move arithmetic operations out of aggregation functions\", 0) \\\n     M(Bool, optimize_duplicate_order_by_and_distinct, true, \"Remove duplicate ORDER BY and DISTINCT if it's possible\", 0) \\\ndiff --git a/src/Interpreters/RewriteAnyFunctionVisitor.cpp b/src/Interpreters/RewriteAnyFunctionVisitor.cpp\nindex e8f05962862a..f7c128a5749a 100644\n--- a/src/Interpreters/RewriteAnyFunctionVisitor.cpp\n+++ b/src/Interpreters/RewriteAnyFunctionVisitor.cpp\n@@ -78,6 +78,9 @@ void RewriteAnyFunctionMatcher::visit(const ASTFunction & func, ASTPtr & ast, Da\n \n     auto & func_arguments = func.arguments->children;\n \n+    if (func_arguments.size() != 1)\n+        return;\n+\n     const auto * first_arg_func = func_arguments[0]->as<ASTFunction>();\n     if (!first_arg_func || first_arg_func->arguments->children.empty())\n         return;\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01398_any_with_alias.sql b/tests/queries/0_stateless/01398_any_with_alias.sql\nindex 32e67f3f4b6a..a65b8132c671 100644\n--- a/tests/queries/0_stateless/01398_any_with_alias.sql\n+++ b/tests/queries/0_stateless/01398_any_with_alias.sql\n@@ -1,3 +1,5 @@\n+SET optimize_move_functions_out_of_any = 1;\n+\n SELECT any(number * number) AS n FROM numbers(100) FORMAT CSVWithNames;\n EXPLAIN SYNTAX SELECT any(number * number) AS n FROM numbers(100);\n \ndiff --git a/tests/queries/0_stateless/01470_columns_transformers.reference b/tests/queries/0_stateless/01470_columns_transformers.reference\nindex a103d62167b4..ae0adb3ba602 100644\n--- a/tests/queries/0_stateless/01470_columns_transformers.reference\n+++ b/tests/queries/0_stateless/01470_columns_transformers.reference\n@@ -27,9 +27,9 @@ SELECT\n     avg(k)\n FROM columns_transformers\n SELECT\n-    toDate(any(i)),\n-    toDate(any(j)),\n-    toDate(any(k))\n+    any(toDate(i)),\n+    any(toDate(j)),\n+    any(toDate(k))\n FROM columns_transformers AS a\n SELECT\n     length(toString(j)),\n@@ -44,9 +44,9 @@ SELECT\n     avg(k)\n FROM columns_transformers\n SELECT\n-    toDate(any(i)),\n-    toDate(any(j)),\n-    toDate(any(k))\n+    any(toDate(i)),\n+    any(toDate(j)),\n+    any(toDate(k))\n FROM columns_transformers AS a\n SELECT\n     sum(i + 1 AS i),\n@@ -59,9 +59,9 @@ SELECT\n     avg(k)\n FROM columns_transformers\n SELECT\n-    toDate(any(i)),\n-    toDate(any(j)),\n-    toDate(any(k))\n+    any(toDate(i)),\n+    any(toDate(j)),\n+    any(toDate(k))\n FROM columns_transformers AS a\n SELECT\n     (i + 1) + 1 AS i,\ndiff --git a/tests/queries/0_stateless/01591_window_functions.reference b/tests/queries/0_stateless/01591_window_functions.reference\nindex ce56860ed8bf..aad784b1ac1e 100644\n--- a/tests/queries/0_stateless/01591_window_functions.reference\n+++ b/tests/queries/0_stateless/01591_window_functions.reference\n@@ -122,7 +122,7 @@ select * from (select * from numbers(5) order by rand()) order by count() over (\n 2\n 3\n 4\n-select * from (select * from numbers(5) order by rand()) group by number order by sum(any(number + 1)) over (order by min(number) desc) desc;\n+select * from (select * from numbers(5) order by rand()) group by number order by sum(any(number) + 1) over (order by min(number) desc) desc;\n \n -- different windows\n -- an explain test would also be helpful, but it's too immature now and I don't\ndiff --git a/tests/queries/0_stateless/01591_window_functions.sql b/tests/queries/0_stateless/01591_window_functions.sql\nindex 082a6652a650..30094690a92f 100644\n--- a/tests/queries/0_stateless/01591_window_functions.sql\n+++ b/tests/queries/0_stateless/01591_window_functions.sql\n@@ -41,7 +41,7 @@ select * from (select * from numbers(5) order by rand()) order by count() over (\n -- Aggregate functions as window function arguments. This query is semantically\n -- the same as the above one, only we replace `number` with\n -- `any(number) group by number` and so on.\n-select * from (select * from numbers(5) order by rand()) group by number order by sum(any(number + 1)) over (order by min(number) desc) desc;\n+select * from (select * from numbers(5) order by rand()) group by number order by sum(any(number) + 1) over (order by min(number) desc) desc;\n \n -- different windows\n -- an explain test would also be helpful, but it's too immature now and I don't\ndiff --git a/tests/queries/0_stateless/01650_any_null_if.reference b/tests/queries/0_stateless/01650_any_null_if.reference\nnew file mode 100644\nindex 000000000000..e965047ad7c5\n--- /dev/null\n+++ b/tests/queries/0_stateless/01650_any_null_if.reference\n@@ -0,0 +1,1 @@\n+Hello\ndiff --git a/tests/queries/0_stateless/01650_any_null_if.sql b/tests/queries/0_stateless/01650_any_null_if.sql\nnew file mode 100644\nindex 000000000000..17f57e92032b\n--- /dev/null\n+++ b/tests/queries/0_stateless/01650_any_null_if.sql\n@@ -0,0 +1,6 @@\n+SELECT any(nullIf(s, '')) FROM (SELECT arrayJoin(['', 'Hello']) AS s);\n+\n+SET optimize_move_functions_out_of_any = 0;\n+EXPLAIN SYNTAX select any(nullIf('', ''), 'some text'); -- { serverError 42 }\n+SET optimize_move_functions_out_of_any = 1;\n+EXPLAIN SYNTAX select any(nullIf('', ''), 'some text'); -- { serverError 42 }\n",
  "problem_statement": "inconsistent `nullIf` behavior inside function `any`\nI am using `nullIf` in aggregations to skip unwanted empty strings. Strangely enough `any` function picks `NULL`s resulting from `nullIf`, i.e. does skip them as it should do with NULLs.\r\n\r\n### Minimal reproducing code\r\n```sql\r\nselect any(nullIf('', ''), 'some text');\r\n```\r\nproduces:\r\n```\r\n\u250c\u2500nullIf('', '')\u2500\u2510\r\n\u2502 \u1d3a\u1d41\u1d38\u1d38           \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\n**Expected behavior**\r\nThis should return 'Some text'\r\n\r\n### Other example with table\r\n```sql\r\ncreate temporary table vv (m Nullable(String));\r\ninsert into vv (*) values (''), ('Some text');\r\nselect any(nullIf(m, '')) from vv;\r\n```\r\nresult:\r\n```\r\n\u250c\u2500nullIf(any(m), '')\u2500\u2510\r\n\u2502 \u1d3a\u1d41\u1d38\u1d38               \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\nexpecting 'Some text' as before\n`optimize_move_functions_out_of_any` is questionable\n**Describe the situation**\r\nThere is a setting `optimize_move_functions_out_of_any` that is turn on by default.\r\nIt moves functions out of `any` aggregate function.\r\nBut it's not always beneficial.\r\n\r\nExample:\r\n```\r\nany(substring(large_string, 1, 10))\r\n```\r\nis better than\r\n```\r\nsubstring(any(large_string), 1, 10)\r\n```\r\n\n",
  "hints_text": "bug in optimize_move_functions_out_of_any\r\n\r\n```sql\r\n\r\nCREATE TABLE b1\r\n(\r\n    `A` Nullable(String),\r\n    `B` Nullable(String)\r\n)\r\nENGINE = Log\r\n\r\ninsert into b1 values (null, '1') , ('2', null);\r\n\r\nSELECT * FROM b1\r\n\r\n\u250c\u2500A\u2500\u2500\u2500\u2500\u252c\u2500B\u2500\u2500\u2500\u2500\u2510\r\n\u2502 \u1d3a\u1d41\u1d38\u1d38 \u2502 1    \u2502\r\n\u2502 2    \u2502 \u1d3a\u1d41\u1d38\u1d38 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n\r\nSELECT any(tuple(A, B)) FROM b1\r\n\r\n\u250c\u2500tuple(any(A), any(B))\u2500\u2510\r\n\u2502 ('2','1')             \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n\r\nset optimize_move_functions_out_of_any=0\r\n\r\nSELECT any((A, B)) FROM b1;\r\n\r\n\u250c\u2500any(tuple(A, B))\u2500\u2510\r\n\u2502 (NULL,'1')       \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n\r\nSELECT any(nullIf(m, '')) FROM vv\r\n\u250c\u2500any(nullIf(m, ''))\u2500\u2510\r\n\u2502 Some text          \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\n\nI would disable it by default because of https://github.com/ClickHouse/ClickHouse/issues/18051",
  "created_at": "2021-01-12T19:54:56Z",
  "modified_files": [
    "src/Core/Settings.h",
    "src/Interpreters/RewriteAnyFunctionVisitor.cpp"
  ],
  "modified_test_files": [
    "tests/queries/0_stateless/01398_any_with_alias.sql",
    "tests/queries/0_stateless/01470_columns_transformers.reference",
    "tests/queries/0_stateless/01591_window_functions.reference",
    "tests/queries/0_stateless/01591_window_functions.sql",
    "b/tests/queries/0_stateless/01650_any_null_if.reference",
    "b/tests/queries/0_stateless/01650_any_null_if.sql"
  ]
}