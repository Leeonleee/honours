You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
Different behavior of skip index with alias in latest version
Version 24.2.3.70, index used:
```sql
CREATE TABLE t
(
    `tenant` String,
    `recordTimestamp` Int64,
    `responseBody` String,
    `colAlias` String ALIAS responseBody || 'something else',
    INDEX ngrams colAlias TYPE ngrambf_v1(3, 2097152, 3, 0) GRANULARITY 1,
)
ENGINE = MergeTree
PARTITION BY (tenant, toDate(recordTimestamp))
ORDER BY recordTimestamp;

INSERT INTO t SELECT * FROM generateRandom('tenant String, recordTimestamp Int64, responseBody String') LIMIT 100;

set send_logs_level='debug';

explain indexes=1 select tenant,recordTimestamp from t where colAlias like '%abcd%';

Expression ((Projection + Before ORDER BY))
  Expression
    ReadFromMergeTree (default.t)
    Indexes:
      MinMax
        Condition: true
        Parts: 98/98
        Granules: 98/98
      Partition
        Condition: true
        Parts: 98/98
        Granules: 98/98
      PrimaryKey
        Condition: true
        Parts: 98/98
        Granules: 98/98
      Skip
        Name: ngrams
        Description: ngrambf_v1 GRANULARITY 1
        Parts: 0/98
        Granules: 0/98
```
https://fiddle.clickhouse.com/e4b3bc3b-7b1e-4284-9705-5b16a0475138

24.3 and later versions, index not used:
https://fiddle.clickhouse.com/0b617027-0173-43d2-9606-1b09596afa1d

```sql
Expression ((Project names + Projection))
  Expression
    ReadFromMergeTree (default.t)
    Indexes:
      MinMax
        Condition: true
        Parts: 89/89
        Granules: 89/89
      Partition
        Condition: true
        Parts: 89/89
        Granules: 89/89
      PrimaryKey
        Condition: true
        Parts: 89/89
        Granules: 89/89
```

Analyzer: Skipping indexes don't work with VIEWs
**Describe the unexpected behaviour**
Newer versions of clickhouse don't use indices on views which are defined as union

**How to reproduce**
```
CREATE TABLE tab_v1
(
    content String,
    INDEX idx_content_bloom content TYPE bloom_filter(0.01)
)
ENGINE = MergeTree
ORDER BY content

CREATE TABLE tab_v2
(
    content String,
    INDEX idx_content_bloom content TYPE bloom_filter(0.01)
)
ENGINE = MergeTree
ORDER BY content


CREATE VIEW tab_v3
AS SELECT *
FROM tab_v1
UNION ALL
SELECT *
FROM tab_v2

INSERT INTO tab_v1 (content) VALUES ('aaa bbb'), ('ccc ddd')
INSERT INTO tab_v2 (content) VALUES ('eee fff'), ('ggg hhh')


SELECT *
FROM tab_v3
WHERE content = 'iii'
SETTINGS force_data_skipping_indices='idx_content_bloom'
```

**Expected behavior**
Running on version `24.8.4.13` results on this:
```
Code: 277. DB::Exception: Received from localhost:9000. DB::Exception: Index `idx_content_bloom` is not used and setting 'force_data_skipping_indices' contains it. (INDEX_NOT_USED)
```

**However, works fine on `23.10.3`**


**Additional context**
Just found a workaround for this, disabling `allow_experimental_analyzer`:
```
SELECT *
FROM tab_v3
WHERE content = 'iii'
SETTINGS force_data_skipping_indices='idx_content_bloom',allow_experimental_analyzer=0
```
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
