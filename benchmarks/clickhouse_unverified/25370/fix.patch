diff --git a/src/Interpreters/ActionsDAG.cpp b/src/Interpreters/ActionsDAG.cpp
index 35251c7b9b7b..9fa48f6ceab7 100644
--- a/src/Interpreters/ActionsDAG.cpp
+++ b/src/Interpreters/ActionsDAG.cpp
@@ -1554,6 +1554,7 @@ ConjunctionNodes getConjunctionNodes(ActionsDAG::Node * predicate, std::unordere
     struct Frame
     {
         const ActionsDAG::Node * node = nullptr;
+        /// Node is a part of predicate (predicate itself, or some part of AND)
         bool is_predicate = false;
         size_t next_child_to_visit = 0;
         size_t num_allowed_children = 0;
@@ -1595,35 +1596,27 @@ ConjunctionNodes getConjunctionNodes(ActionsDAG::Node * predicate, std::unordere
                 if (cur.node->type != ActionsDAG::ActionType::ARRAY_JOIN && cur.node->type != ActionsDAG::ActionType::INPUT)
                     allowed_nodes.emplace(cur.node);
             }
-            else if (is_conjunction)
+
+            /// Add parts of AND to result. Do not add function AND.
+            if (cur.is_predicate && ! is_conjunction)
             {
-                for (const auto * child : cur.node->children)
+                if (allowed_nodes.count(cur.node))
                 {
-                    if (allowed_nodes.count(child))
-                    {
-                        if (allowed.insert(child).second)
-                            conjunction.allowed.push_back(child);
+                    if (allowed.insert(cur.node).second)
+                        conjunction.allowed.push_back(cur.node);
 
-                    }
                 }
-            }
-            else if (cur.is_predicate)
-            {
-                if (rejected.insert(cur.node).second)
-                    conjunction.rejected.push_back(cur.node);
+                else
+                {
+                    if (rejected.insert(cur.node).second)
+                        conjunction.rejected.push_back(cur.node);
+                }
             }
 
             stack.pop();
         }
     }
 
-    if (conjunction.allowed.empty())
-    {
-        /// If nothing was added to conjunction, check if it is trivial.
-        if (allowed_nodes.count(predicate))
-            conjunction.allowed.push_back(predicate);
-    }
-
     return conjunction;
 }
 
