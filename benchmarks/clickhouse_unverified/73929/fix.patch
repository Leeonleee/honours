diff --git a/src/Processors/Formats/Impl/PrettyBlockOutputFormat.cpp b/src/Processors/Formats/Impl/PrettyBlockOutputFormat.cpp
index 64bfbf90ada3..b64e0dfbd692 100644
--- a/src/Processors/Formats/Impl/PrettyBlockOutputFormat.cpp
+++ b/src/Processors/Formats/Impl/PrettyBlockOutputFormat.cpp
@@ -31,6 +31,13 @@ PrettyBlockOutputFormat::PrettyBlockOutputFormat(
     }
 }
 
+bool PrettyBlockOutputFormat::cutInTheMiddle(size_t row_num, size_t num_rows, size_t max_rows)
+{
+    return num_rows > max_rows
+        && !(row_num < (max_rows + 1) / 2
+            || row_num >= num_rows - max_rows / 2);
+}
+
 
 /// Evaluate the visible width of the values and column names.
 /// Note that number of code points is just a rough approximation of visible string width.
@@ -38,7 +45,8 @@ void PrettyBlockOutputFormat::calculateWidths(
     const Block & header, const Chunk & chunk,
     WidthsPerColumn & widths, Widths & max_padded_widths, Widths & name_widths, Strings & names)
 {
-    size_t num_rows = std::min(chunk.getNumRows(), format_settings.pretty.max_rows);
+    size_t num_rows = chunk.getNumRows();
+    size_t num_displayed_rows = std::min<size_t>(num_rows, format_settings.pretty.max_rows);
 
     /// len(num_rows + total_rows) + len(". ")
     row_number_width = static_cast<size_t>(std::floor(std::log10(num_rows + total_rows))) + 3;
@@ -59,10 +67,14 @@ void PrettyBlockOutputFormat::calculateWidths(
         const auto & elem = header.getByPosition(i);
         const auto & column = columns[i];
 
-        widths[i].resize(num_rows);
+        widths[i].resize(num_displayed_rows);
 
+        size_t displayed_row = 0;
         for (size_t j = 0; j < num_rows; ++j)
         {
+            if (cutInTheMiddle(j, num_rows, format_settings.pretty.max_rows))
+                continue;
+
             {
                 WriteBufferFromString out_serialize(serialized_value);
                 auto serialization = elem.type->getDefaultSerialization();
@@ -80,10 +92,12 @@ void PrettyBlockOutputFormat::calculateWidths(
                     serialized_value.resize(max_byte_size);
             }
 
-            widths[i][j] = UTF8::computeWidth(reinterpret_cast<const UInt8 *>(serialized_value.data()), serialized_value.size(), prefix);
+            widths[i][displayed_row] = UTF8::computeWidth(reinterpret_cast<const UInt8 *>(serialized_value.data()), serialized_value.size(), prefix);
             max_padded_widths[i] = std::max<UInt64>(
                 max_padded_widths[i],
-                std::min<UInt64>({format_settings.pretty.max_column_pad_width, format_settings.pretty.max_value_width, widths[i][j]}));
+                std::min<UInt64>({format_settings.pretty.max_column_pad_width, format_settings.pretty.max_value_width, widths[i][displayed_row]}));
+
+            ++displayed_row;
         }
 
         /// Also, calculate the widths for the names of columns.
@@ -132,11 +146,13 @@ struct GridSymbols
     const char * bold_left_bottom_corner = "┗";
     const char * bold_right_bottom_corner = "┛";
     const char * bold_bottom_separator = "┻";
+    const char * vertical_cut = "─";
 };
 
 GridSymbols utf8_grid_symbols;
 
-GridSymbols ascii_grid_symbols {
+GridSymbols ascii_grid_symbols
+{
     "+",
     "+",
     "+",
@@ -152,7 +168,8 @@ GridSymbols ascii_grid_symbols {
     "-",
     "-",
     "|",
-    "|"
+    "|",
+    "-",
 };
 
 }
@@ -316,54 +333,80 @@ void PrettyBlockOutputFormat::writeChunk(const Chunk & chunk, PortKind port_kind
     }
     writeString(middle_names_separator_s, out);
 
-    for (size_t i = 0; i < num_rows && total_rows + i < format_settings.pretty.max_rows; ++i)
+    bool vertical_filler_written = false;
+    size_t displayed_row = 0;
+    for (size_t i = 0; i < num_rows && displayed_rows < format_settings.pretty.max_rows; ++i)
     {
-        if (i != 0)
+        if (cutInTheMiddle(i, num_rows, format_settings.pretty.max_rows))
         {
-            if (format_settings.pretty.output_format_pretty_row_numbers)
+            if (!vertical_filler_written)
             {
-                /// Write left blank
-                writeString(String(row_number_width, ' '), out);
+                if (format_settings.pretty.output_format_pretty_row_numbers)
+                    writeString(String(row_number_width, ' '), out);
+                writeString(middle_values_separator_s, out);
+
+                if (format_settings.pretty.output_format_pretty_row_numbers)
+                    writeString(String(row_number_width, ' '), out);
+                for (size_t j = 0; j < num_columns; ++j)
+                {
+                    writeCString(grid_symbols.vertical_cut, out);
+                    writeString(String(2 + max_widths[j], ' '), out);
+                }
+                writeCString(grid_symbols.vertical_cut, out);
+
+                writeCString("
", out);
+                vertical_filler_written = true;
             }
-            writeString(middle_values_separator_s, out);
         }
-
-        if (format_settings.pretty.output_format_pretty_row_numbers)
+        else
         {
-            // Write row number;
-            auto row_num_string = std::to_string(i + 1 + total_rows) + ". ";
+            if (i != 0)
+            {
+                if (format_settings.pretty.output_format_pretty_row_numbers)
+                {
+                    /// Write left blank
+                    writeString(String(row_number_width, ' '), out);
+                }
+                writeString(middle_values_separator_s, out);
+            }
 
-            for (size_t j = 0; j < row_number_width - row_num_string.size(); ++j)
-                writeChar(' ', out);
-            if (color)
-                writeCString("\033[90m", out);
-            writeString(row_num_string, out);
-            if (color)
-                writeCString("\033[0m", out);
-        }
+            if (format_settings.pretty.output_format_pretty_row_numbers)
+            {
+                // Write row number;
+                auto row_num_string = std::to_string(i + 1 + total_rows) + ". ";
 
-        writeCString(grid_symbols.bar, out);
+                for (size_t j = 0; j < row_number_width - row_num_string.size(); ++j)
+                    writeChar(' ', out);
+                if (color)
+                    writeCString("\033[90m", out);
+                writeString(row_num_string, out);
+                if (color)
+                    writeCString("\033[0m", out);
+            }
 
-        for (size_t j = 0; j < num_columns; ++j)
-        {
-            if (j != 0)
+            for (size_t j = 0; j < num_columns; ++j)
+            {
                 writeCString(grid_symbols.bar, out);
-            const auto & type = *header.getByPosition(j).type;
-            writeValueWithPadding(
-                *columns[j],
-                *serializations[j],
-                i,
-                widths[j].empty() ? max_widths[j] : widths[j][i],
-                max_widths[j],
-                cut_to_width,
-                type.shouldAlignRightInPrettyFormats(),
-                isNumber(type));
-        }
+                const auto & type = *header.getByPosition(j).type;
+                writeValueWithPadding(
+                    *columns[j],
+                    *serializations[j],
+                    i,
+                    widths[j].empty() ? max_widths[j] : widths[j][displayed_row],
+                    max_widths[j],
+                    cut_to_width,
+                    type.shouldAlignRightInPrettyFormats(),
+                    isNumber(type));
+            }
 
-        writeCString(grid_symbols.bar, out);
-        if (readable_number_tip)
-            writeReadableNumberTipIfSingleValue(out, chunk, format_settings, color);
-        writeCString("
", out);
+            writeCString(grid_symbols.bar, out);
+            if (readable_number_tip)
+                writeReadableNumberTipIfSingleValue(out, chunk, format_settings, color);
+
+            writeCString("
", out);
+            ++displayed_row;
+            ++displayed_rows;
+        }
     }
 
     if (format_settings.pretty.output_format_pretty_row_numbers)
@@ -500,9 +543,11 @@ void PrettyBlockOutputFormat::writeSuffix()
 
     if (total_rows >= format_settings.pretty.max_rows)
     {
-        writeCString("  Showed first ", out);
-        writeIntText(format_settings.pretty.max_rows, out);
-        writeCString(".
", out);
+        writeCString("  Showed ", out);
+        writeIntText(displayed_rows, out);
+        writeCString(" out of ", out);
+        writeIntText(total_rows, out);
+        writeCString(" rows.
", out);
     }
 }
 
diff --git a/src/Processors/Formats/Impl/PrettyBlockOutputFormat.h b/src/Processors/Formats/Impl/PrettyBlockOutputFormat.h
index 41a1959906e7..c8d7e02cb4b3 100644
--- a/src/Processors/Formats/Impl/PrettyBlockOutputFormat.h
+++ b/src/Processors/Formats/Impl/PrettyBlockOutputFormat.h
@@ -26,6 +26,7 @@ class PrettyBlockOutputFormat : public IOutputFormat
     void consumeExtremes(Chunk) override;
 
     size_t total_rows = 0;
+    size_t displayed_rows = 0;
     size_t row_number_width = 7; // "10000. "
 
     const FormatSettings format_settings;
@@ -52,8 +53,11 @@ class PrettyBlockOutputFormat : public IOutputFormat
     void resetFormatterImpl() override
     {
         total_rows = 0;
+        displayed_rows = 0;
     }
 
+    static bool cutInTheMiddle(size_t row_num, size_t num_rows, size_t max_rows);
+
     bool color;
     bool readable_number_tip = false;
 
@@ -77,8 +81,6 @@ void registerPrettyFormatWithNoEscapesAndMonoBlock(FormatFactory & factory, cons
                     && (format_settings.pretty.color == 1 || (format_settings.pretty.color == 2 && format_settings.is_writing_to_terminal));
             return std::make_shared<OutputFormat>(buf, sample, format_settings, mono_block, color);
         });
-        if (!mono_block)
-            factory.markOutputFormatSupportsParallelFormatting(name);
     };
     creator(factory, base_name, false, false);
     creator(factory, base_name + "NoEscapes", true, false);
diff --git a/src/Processors/Formats/Impl/PrettyCompactBlockOutputFormat.cpp b/src/Processors/Formats/Impl/PrettyCompactBlockOutputFormat.cpp
index 9ac9afc5c32a..339aa1970a5c 100644
--- a/src/Processors/Formats/Impl/PrettyCompactBlockOutputFormat.cpp
+++ b/src/Processors/Formats/Impl/PrettyCompactBlockOutputFormat.cpp
@@ -11,13 +11,6 @@
 namespace DB
 {
 
-namespace ErrorCodes
-{
-
-
-}
-
-
 namespace
 {
 
@@ -33,11 +26,13 @@ struct GridSymbols
     const char * bottom_separator = "┴";
     const char * dash = "─";
     const char * bar = "│";
+    const char * vertical_cut = "─";
 };
 
 GridSymbols utf8_grid_symbols;
 
-GridSymbols ascii_grid_symbols {
+GridSymbols ascii_grid_symbols
+{
     "+",
     "+",
     "+",
@@ -45,7 +40,8 @@ GridSymbols ascii_grid_symbols {
     "+",
     "+",
     "-",
-    "|"
+    "|",
+    "-",
 };
 
 }
@@ -149,6 +145,7 @@ void PrettyCompactBlockOutputFormat::writeBottom(const Widths & max_widths)
 
 void PrettyCompactBlockOutputFormat::writeRow(
     size_t row_num,
+    size_t displayed_row,
     const Block & header,
     const Chunk & chunk,
     const WidthsPerColumn & widths,
@@ -178,15 +175,11 @@ void PrettyCompactBlockOutputFormat::writeRow(
     if (!format_settings.pretty.max_value_width_apply_for_single_value && chunk.getNumRows() == 1 && num_columns == 1 && total_rows == 0)
         cut_to_width = 0;
 
-    writeCString(grid_symbols.bar, out);
-
     for (size_t j = 0; j < num_columns; ++j)
     {
-        if (j != 0)
-            writeCString(grid_symbols.bar, out);
-
+        writeCString(grid_symbols.bar, out);
         const auto & type = *header.getByPosition(j).type;
-        const auto & cur_widths = widths[j].empty() ? max_widths[j] : widths[j][row_num];
+        const auto & cur_widths = widths[j].empty() ? max_widths[j] : widths[j][displayed_row];
         writeValueWithPadding(*columns[j], *serializations[j], row_num, cur_widths, max_widths[j], cut_to_width, type.shouldAlignRightInPrettyFormats(), isNumber(type));
     }
 
@@ -196,6 +189,25 @@ void PrettyCompactBlockOutputFormat::writeRow(
     writeCString("
", out);
 }
 
+void PrettyCompactBlockOutputFormat::writeVerticalCut(const Chunk & chunk, const Widths & max_widths)
+{
+    const GridSymbols & grid_symbols = format_settings.pretty.charset == FormatSettings::Pretty::Charset::UTF8 ?
+                                       utf8_grid_symbols :
+                                       ascii_grid_symbols;
+
+    if (format_settings.pretty.output_format_pretty_row_numbers)
+        writeString(String(row_number_width, ' '), out);
+
+    size_t num_columns = chunk.getNumColumns();
+    for (size_t j = 0; j < num_columns; ++j)
+    {
+        writeCString(grid_symbols.vertical_cut, out);
+        writeString(String(2 + max_widths[j], ' '), out);
+    }
+    writeCString(grid_symbols.vertical_cut, out);
+    writeCString("
", out);
+}
+
 void PrettyCompactBlockOutputFormat::writeChunk(const Chunk & chunk, PortKind port_kind)
 {
     UInt64 max_rows = format_settings.pretty.max_rows;
@@ -211,8 +223,25 @@ void PrettyCompactBlockOutputFormat::writeChunk(const Chunk & chunk, PortKind po
 
     writeHeader(header, max_widths, name_widths, names, false);
 
-    for (size_t i = 0; i < num_rows && total_rows + i < max_rows; ++i)
-        writeRow(i, header, chunk, widths, max_widths);
+    bool vertical_filler_written = false;
+    size_t displayed_row = 0;
+    for (size_t i = 0; i < num_rows && displayed_rows < max_rows; ++i)
+    {
+        if (cutInTheMiddle(i, num_rows, format_settings.pretty.max_rows))
+        {
+            if (!vertical_filler_written)
+            {
+                writeVerticalCut(chunk, max_widths);
+                vertical_filler_written = true;
+            }
+        }
+        else
+        {
+            writeRow(i, displayed_row, header, chunk, widths, max_widths);
+            ++displayed_row;
+            ++displayed_rows;
+        }
+    }
 
     if ((num_rows >= format_settings.pretty.output_format_pretty_display_footer_column_names_min_rows) && format_settings.pretty.output_format_pretty_display_footer_column_names)
     {
diff --git a/src/Processors/Formats/Impl/PrettyCompactBlockOutputFormat.h b/src/Processors/Formats/Impl/PrettyCompactBlockOutputFormat.h
index 9c696facde3d..98406f21c1d9 100644
--- a/src/Processors/Formats/Impl/PrettyCompactBlockOutputFormat.h
+++ b/src/Processors/Formats/Impl/PrettyCompactBlockOutputFormat.h
@@ -21,10 +21,12 @@ class PrettyCompactBlockOutputFormat : public PrettyBlockOutputFormat
     void writeBottom(const Widths & max_widths);
     void writeRow(
         size_t row_num,
+        size_t displayed_row,
         const Block & header,
         const Chunk & chunk,
         const WidthsPerColumn & widths,
         const Widths & max_widths);
+    void writeVerticalCut(const Chunk & chunk, const Widths & max_widths);
 
     void writeChunk(const Chunk & chunk, PortKind port_kind) override;
 };
diff --git a/src/Processors/Formats/Impl/PrettySpaceBlockOutputFormat.cpp b/src/Processors/Formats/Impl/PrettySpaceBlockOutputFormat.cpp
index 0fbbd1e09290..5b8dc4293204 100644
--- a/src/Processors/Formats/Impl/PrettySpaceBlockOutputFormat.cpp
+++ b/src/Processors/Formats/Impl/PrettySpaceBlockOutputFormat.cpp
@@ -79,34 +79,58 @@ void PrettySpaceBlockOutputFormat::writeChunk(const Chunk & chunk, PortKind port
     };
     write_names(false);
 
-    for (size_t row = 0; row < num_rows && total_rows + row < max_rows; ++row)
+    bool vertical_filler_written = false;
+    size_t displayed_row = 0;
+    for (size_t row = 0; row < num_rows && displayed_rows < max_rows; ++row)
     {
-        if (format_settings.pretty.output_format_pretty_row_numbers)
+        if (cutInTheMiddle(row, num_rows, format_settings.pretty.max_rows))
         {
-            // Write row number;
-            auto row_num_string = std::to_string(row + 1 + total_rows) + ". ";
-            for (size_t i = 0; i < row_number_width - row_num_string.size(); ++i)
-                writeChar(' ', out);
-            if (color)
-                writeCString("\033[90m", out);
-            writeString(row_num_string, out);
-            if (color)
-                writeCString("\033[0m", out);
+            if (!vertical_filler_written)
+            {
+                size_t cut_width = 0;
+                if (format_settings.pretty.output_format_pretty_row_numbers)
+                    cut_width += row_number_width;
+                for (size_t j = 0; j < num_columns; ++j)
+                    cut_width += (j == 0 ? 1 : 3) + max_widths[j];
 
+                for (size_t ch = 0; ch < cut_width; ++ch)
+                    writeChar(ch % 2 ? '-' : ' ', out);
+
+                writeChar('
', out);
+                vertical_filler_written = true;
+            }
         }
-        for (size_t column = 0; column < num_columns; ++column)
+        else
         {
-            if (column != 0)
-                writeCString(" ", out);
+            if (format_settings.pretty.output_format_pretty_row_numbers)
+            {
+                // Write row number;
+                auto row_num_string = std::to_string(row + 1 + total_rows) + ". ";
+                for (size_t i = 0; i < row_number_width - row_num_string.size(); ++i)
+                    writeChar(' ', out);
+                if (color)
+                    writeCString("\033[90m", out);
+                writeString(row_num_string, out);
+                if (color)
+                    writeCString("\033[0m", out);
 
-            const auto & type = *header.getByPosition(column).type;
-            auto & cur_width = widths[column].empty() ? max_widths[column] : widths[column][row];
-            writeValueWithPadding(
-                *columns[column], *serializations[column], row, cur_width, max_widths[column], cut_to_width, type.shouldAlignRightInPrettyFormats(), isNumber(type));
+            }
+            for (size_t column = 0; column < num_columns; ++column)
+            {
+                if (column != 0)
+                    writeChar(' ', out);
+
+                const auto & type = *header.getByPosition(column).type;
+                auto & cur_width = widths[column].empty() ? max_widths[column] : widths[column][displayed_row];
+                writeValueWithPadding(
+                    *columns[column], *serializations[column], row, cur_width, max_widths[column], cut_to_width, type.shouldAlignRightInPrettyFormats(), isNumber(type));
+            }
+            if (readable_number_tip)
+                writeReadableNumberTipIfSingleValue(out, chunk, format_settings, color);
+            writeChar('
', out);
+            ++displayed_row;
+            ++displayed_rows;
         }
-        if (readable_number_tip)
-            writeReadableNumberTipIfSingleValue(out, chunk, format_settings, color);
-        writeChar('
', out);
     }
 
     /// Write blank line between last row and footer
@@ -128,9 +152,11 @@ void PrettySpaceBlockOutputFormat::writeSuffix()
 
     if (total_rows >= format_settings.pretty.max_rows)
     {
-        writeCString("
Showed first ", out);
-        writeIntText(format_settings.pretty.max_rows, out);
-        writeCString(".
", out);
+        writeCString("
Showed ", out);
+        writeIntText(displayed_rows, out);
+        writeCString(" out of ", out);
+        writeIntText(total_rows, out);
+        writeCString(" rows.
", out);
     }
 }
 
diff --git a/src/Storages/MergeTree/MergeTreeData.cpp b/src/Storages/MergeTree/MergeTreeData.cpp
index af7b55e32b7c..35009cddca93 100644
--- a/src/Storages/MergeTree/MergeTreeData.cpp
+++ b/src/Storages/MergeTree/MergeTreeData.cpp
@@ -2924,7 +2924,6 @@ void MergeTreeData::clearPartsFromFilesystemImpl(const DataPartsVector & parts_t
         );
     }
 
-
     if (!remove_parts_in_order)
     {
         /// NOTE: Under heavy system load you may get "Cannot schedule a task" from ThreadPool.
@@ -2947,7 +2946,6 @@ void MergeTreeData::clearPartsFromFilesystemImpl(const DataPartsVector & parts_t
         }
 
         runner.waitForAllToFinishAndRethrowFirstError();
-
         return;
     }
 
