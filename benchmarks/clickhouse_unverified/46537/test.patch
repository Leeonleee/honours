diff --git a/tests/queries/0_stateless/01505_trivial_count_with_partition_predicate.reference b/tests/queries/0_stateless/01505_trivial_count_with_partition_predicate.reference
index 5abc312652d4..b434c50b0703 100644
--- a/tests/queries/0_stateless/01505_trivial_count_with_partition_predicate.reference
+++ b/tests/queries/0_stateless/01505_trivial_count_with_partition_predicate.reference
@@ -1,3 +1,4 @@
+3
 0
 0
 2
diff --git a/tests/queries/0_stateless/01505_trivial_count_with_partition_predicate.sql b/tests/queries/0_stateless/01505_trivial_count_with_partition_predicate.sql
index e8643a4468cf..030db421683f 100644
--- a/tests/queries/0_stateless/01505_trivial_count_with_partition_predicate.sql
+++ b/tests/queries/0_stateless/01505_trivial_count_with_partition_predicate.sql
@@ -7,7 +7,7 @@ insert into test1 values ('2020-09-01 00:01:02', 1), ('2020-09-01 20:01:03', 2),
 
 set max_rows_to_read = 1;
 -- non-optimized
-select count() from test1 settings max_parallel_replicas = 3; -- { serverError 158 }
+select count() from test1 settings max_parallel_replicas = 3;
 -- optimized (toYear is monotonic and we provide the partition expr as is)
 select count() from test1 where toYear(toDate(p)) = 1999;
 -- non-optimized (toDate(DateTime) is always monotonic, but we cannot relaxing the predicates to do trivial count())
diff --git a/tests/queries/0_stateless/01710_normal_projection_fix1.sql b/tests/queries/0_stateless/01710_normal_projection_fix1.sql
index b4d7c6e8734b..e8ba830e5a58 100644
--- a/tests/queries/0_stateless/01710_normal_projection_fix1.sql
+++ b/tests/queries/0_stateless/01710_normal_projection_fix1.sql
@@ -7,6 +7,7 @@ insert into t values (1, 2);
 alter table t add projection x (select * order by j);
 
 insert into t values (1, 4);
+insert into t values (1, 5);
 
 set allow_experimental_projection_optimization = 1, force_optimize_projection = 1;
 
@@ -14,4 +15,6 @@ select i from t prewhere j = 4;
 
 SELECT j = 2, i FROM t PREWHERE j = 2;
 
+SELECT j = -1, j = NULL FROM t WHERE j = -1;
+
 drop table t;
diff --git a/tests/queries/0_stateless/01710_projection_aggregation_in_order.sql b/tests/queries/0_stateless/01710_projection_aggregation_in_order.sql
index 31d32da0ed35..c7ed91eb19bc 100644
--- a/tests/queries/0_stateless/01710_projection_aggregation_in_order.sql
+++ b/tests/queries/0_stateless/01710_projection_aggregation_in_order.sql
@@ -21,7 +21,7 @@ ENGINE = MergeTree
 ORDER BY (key, ts);
 
 INSERT INTO normal SELECT
-    1,
+    number,
     toDateTime('2021-12-06 00:00:00') + number,
     number
 FROM numbers(100000);
diff --git a/tests/queries/0_stateless/01710_projections_in_distributed_query.sql b/tests/queries/0_stateless/01710_projections_in_distributed_query.sql
index fa734b605cd4..7600340579d9 100644
--- a/tests/queries/0_stateless/01710_projections_in_distributed_query.sql
+++ b/tests/queries/0_stateless/01710_projections_in_distributed_query.sql
@@ -1,5 +1,7 @@
 -- Tags: distributed
 
+set enable_memory_bound_merging_of_aggregation_results=0;
+
 drop table if exists projection_test;
 
 create table projection_test (dt DateTime, cost Int64, projection p (select toStartOfMinute(dt) dt_m, sum(cost) group by dt_m)) engine MergeTree partition by toDate(dt) order by dt;
diff --git a/tests/queries/0_stateless/02319_no_columns_in_row_level_filter.reference b/tests/queries/0_stateless/02319_no_columns_in_row_level_filter.reference
index c0911ffc5980..d344f57649d6 100644
--- a/tests/queries/0_stateless/02319_no_columns_in_row_level_filter.reference
+++ b/tests/queries/0_stateless/02319_no_columns_in_row_level_filter.reference
@@ -1,4 +1,4 @@
-1000000
+0
 0
 0
 0
diff --git a/tests/queries/0_stateless/02343_aggregation_pipeline.reference b/tests/queries/0_stateless/02343_aggregation_pipeline.reference
index ec9a394d05d8..ca838fdf4e0c 100644
--- a/tests/queries/0_stateless/02343_aggregation_pipeline.reference
+++ b/tests/queries/0_stateless/02343_aggregation_pipeline.reference
@@ -92,12 +92,15 @@ ExpressionTransform × 16
   (MergingAggregated)
   Resize 1 → 16
     MergingAggregatedTransform
-      Resize 2 → 1
+      Resize 17 → 1
         (Union)
-          (ReadFromStorage)
-          AggregatingTransform
-            ExpressionTransform
-              MergeTreeInOrder 0 → 1
+          (Aggregating)
+          Resize 1 → 16
+            AggregatingTransform
+              (Expression)
+              ExpressionTransform
+                (ReadFromMergeTree)
+                MergeTreeInOrder 0 → 1
           (ReadFromRemote)
 explain pipeline SELECT k1, k3, sum(value) v FROM remote('127.0.0.{1,2}', currentDatabase(), proj_agg_02343) GROUP BY k1, k3 SETTINGS distributed_aggregation_memory_efficient = 1;
 (Expression)
@@ -109,9 +112,11 @@ ExpressionTransform × 16
         Resize 1 → 16
           GroupingAggregatedTransform 2 → 1
             (Union)
-              (ReadFromStorage)
+              (Aggregating)
               AggregatingTransform
+                (Expression)
                 ExpressionTransform
+                  (ReadFromMergeTree)
                   MergeTreeInOrder 0 → 1
               (ReadFromRemote)
 -- { echoOn }
diff --git a/tests/queries/0_stateless/02515_projections_with_totals.reference b/tests/queries/0_stateless/02515_projections_with_totals.reference
index c6359cae0323..f086fcb10e9b 100644
--- a/tests/queries/0_stateless/02515_projections_with_totals.reference
+++ b/tests/queries/0_stateless/02515_projections_with_totals.reference
@@ -1,3 +1,6 @@
 0
 
 0
+0
+
+0
diff --git a/tests/queries/0_stateless/02515_projections_with_totals.sql b/tests/queries/0_stateless/02515_projections_with_totals.sql
index 4d43d5381da8..1e4b5c6f2553 100644
--- a/tests/queries/0_stateless/02515_projections_with_totals.sql
+++ b/tests/queries/0_stateless/02515_projections_with_totals.sql
@@ -3,4 +3,8 @@ CREATE TABLE t (x UInt8, PROJECTION p (SELECT x GROUP BY x)) ENGINE = MergeTree
 INSERT INTO t VALUES (0);
 SET group_by_overflow_mode = 'any', max_rows_to_group_by = 1000, totals_mode = 'after_having_auto';
 SELECT x FROM t GROUP BY x WITH TOTALS;
+
+SET optimize_aggregation_in_order=1;
+SELECT x FROM t GROUP BY x WITH TOTALS;
+
 DROP TABLE t;
diff --git a/tests/queries/0_stateless/02521_cannot_find_column_in_projection.sql b/tests/queries/0_stateless/02521_cannot_find_column_in_projection.sql
index 255c6f56ab30..6ee8ec07178c 100644
--- a/tests/queries/0_stateless/02521_cannot_find_column_in_projection.sql
+++ b/tests/queries/0_stateless/02521_cannot_find_column_in_projection.sql
@@ -1,5 +1,3 @@
-SET allow_experimental_analyzer = 1;
-
 drop table if exists test;
 create table test(day Date, id UInt32) engine=MergeTree partition by day order by tuple();
 insert into test select toDate('2023-01-05') AS day, number from numbers(10);
diff --git a/tests/queries/0_stateless/02680_illegal_type_of_filter_projection.reference b/tests/queries/0_stateless/02680_illegal_type_of_filter_projection.reference
new file mode 100644
index 000000000000..e69de29bb2d1
diff --git a/tests/queries/0_stateless/02680_illegal_type_of_filter_projection.sql b/tests/queries/0_stateless/02680_illegal_type_of_filter_projection.sql
new file mode 100644
index 000000000000..3ef3b8a4fe6a
--- /dev/null
+++ b/tests/queries/0_stateless/02680_illegal_type_of_filter_projection.sql
@@ -0,0 +1,3 @@
+CREATE TABLE test_tuple (`p` DateTime, `i` int, `j` int) ENGINE = MergeTree PARTITION BY (toDate(p), i) ORDER BY j SETTINGS index_granularity = 1;
+insert into test_tuple values (1, 1, 1);
+SELECT count() FROM test_tuple PREWHERE sipHash64(sipHash64(p, toString(toDate(p))), toString(toDate(p))) % -0. WHERE i > NULL settings optimize_trivial_count_query=0; -- { serverError ILLEGAL_TYPE_OF_COLUMN_FOR_FILTER }
diff --git a/tests/queries/1_stateful/00172_early_constant_folding.reference b/tests/queries/1_stateful/00172_early_constant_folding.reference
index da564dc694ea..6b72183c0665 100644
--- a/tests/queries/1_stateful/00172_early_constant_folding.reference
+++ b/tests/queries/1_stateful/00172_early_constant_folding.reference
@@ -1,6 +1,9 @@
 (Expression)
-ExpressionTransform
-  (ReadFromStorage)
-  AggregatingTransform
-    ExpressionTransform
-      SourceFromSingleChunk 0 → 1
+ExpressionTransform × 10
+  (Aggregating)
+  Resize 1 → 10
+    AggregatingTransform
+      (Expression)
+      ExpressionTransform
+        (ReadFromPreparedSource)
+        SourceFromSingleChunk 0 → 1
diff --git a/tests/queries/1_stateful/00172_early_constant_folding.sql b/tests/queries/1_stateful/00172_early_constant_folding.sql
index b31e418b4926..1ed7b8719b4e 100644
--- a/tests/queries/1_stateful/00172_early_constant_folding.sql
+++ b/tests/queries/1_stateful/00172_early_constant_folding.sql
@@ -1,3 +1,4 @@
 -- Tags: no-parallel-replicas
 
+set max_threads=10;
 EXPLAIN PIPELINE SELECT count(JavaEnable) FROM test.hits WHERE WatchID = 1 OR Title = 'next' OR URL = 'prev' OR URL = '???' OR 1;
