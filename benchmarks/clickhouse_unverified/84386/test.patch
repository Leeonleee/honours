diff --git a/tests/queries/0_stateless/00944_minmax_nan.reference b/tests/queries/0_stateless/00944_minmax_nan.reference
new file mode 100644
index 000000000000..3dcb98d31b91
--- /dev/null
+++ b/tests/queries/0_stateless/00944_minmax_nan.reference
@@ -0,0 +1,21 @@
+NaN comparison
+0
+7
+0
+7
+2
+5
+MinMax index should skip all granules for column = NaN comparison
+Description: minmax GRANULARITY 1
+Parts: 0/1
+Granules: 0/1
+Description: minmax GRANULARITY 1
+Parts: 0/1
+Granules: 0/1
+MinMax index should use all granules for column <> NaN comparison
+Description: minmax GRANULARITY 1
+Parts: 1/1
+Granules: 1/1
+Description: minmax GRANULARITY 1
+Parts: 1/1
+Granules: 1/1
diff --git a/tests/queries/0_stateless/00944_minmax_nan.sql b/tests/queries/0_stateless/00944_minmax_nan.sql
new file mode 100644
index 000000000000..bb6343162140
--- /dev/null
+++ b/tests/queries/0_stateless/00944_minmax_nan.sql
@@ -0,0 +1,62 @@
+SET parallel_replicas_local_plan = 1;
+
+-- Test for issue #75523
+
+DROP TABLE IF EXISTS tab;
+
+CREATE TABLE tab (
+  id UInt64,
+  col Float,
+  INDEX col_idx col TYPE minmax
+)
+ENGINE = MergeTree()
+ORDER BY id; -- This is important. We want to have additional primary index that does not use the column `col`.
+
+INSERT INTO tab VALUES
+    (1, 1.0),
+    (2, inf),
+    (3, 2.0),
+    (4, -inf),
+    (5, 3.0),
+    (6, nan),
+    (7, -nan);
+
+SELECT 'NaN comparison';
+SELECT count() FROM tab WHERE col = nan;
+SELECT count() FROM tab WHERE col <> nan;
+SELECT count() FROM tab WHERE col = -nan;
+SELECT count() FROM tab WHERE col <> -nan;
+SELECT count() FROM tab WHERE isNaN(col);
+SELECT count() FROM tab WHERE NOT isNaN(col);
+
+SELECT 'MinMax index should skip all granules for column = NaN comparison';
+SELECT trimLeft(explain) AS explain FROM (
+    EXPLAIN indexes=1
+    SELECT count() FROM tab WHERE col = nan
+)
+WHERE explain LIKE '%Description:%' OR explain LIKE '%Parts:%' OR explain LIKE '%Granules:%'
+LIMIT 2, 3; -- Skip the primary index parts and granules.
+
+SELECT trimLeft(explain) AS explain FROM (
+    EXPLAIN indexes=1
+    SELECT count() FROM tab WHERE col = -nan
+)
+WHERE explain LIKE '%Description:%' OR explain LIKE '%Parts:%' OR explain LIKE '%Granules:%'
+LIMIT 2, 3; -- Skip the primary index parts and granules.
+
+SELECT 'MinMax index should use all granules for column <> NaN comparison';
+SELECT trimLeft(explain) AS explain FROM (
+    EXPLAIN indexes=1
+    SELECT count() FROM tab WHERE col <> nan
+)
+WHERE explain LIKE '%Description:%' OR explain LIKE '%Parts:%' OR explain LIKE '%Granules:%'
+LIMIT 2, 3; -- Skip the primary index parts and granules.
+
+SELECT trimLeft(explain) AS explain FROM (
+    EXPLAIN indexes=1
+    SELECT count() FROM tab WHERE col <> -nan
+)
+WHERE explain LIKE '%Description:%' OR explain LIKE '%Parts:%' OR explain LIKE '%Granules:%'
+LIMIT 2, 3; -- Skip the primary index parts and granules.
+
+DROP TABLE tab;
