{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 75133,
  "instance_id": "ClickHouse__ClickHouse-75133",
  "issue_numbers": [
    "75374"
  ],
  "base_commit": "9021428d19942d547ee8eaec2653355686245300",
  "patch": "diff --git a/src/Interpreters/ClientInfo.cpp b/src/Interpreters/ClientInfo.cpp\nindex 84f0f7595b73..2a2e086f16f2 100644\n--- a/src/Interpreters/ClientInfo.cpp\n+++ b/src/Interpreters/ClientInfo.cpp\n@@ -27,16 +27,24 @@ std::optional<Poco::Net::SocketAddress> ClientInfo::getLastForwardedFor() const\n         return {};\n     String last = forwarded_for.substr(forwarded_for.find_last_of(',') + 1);\n     boost::trim(last);\n-    try\n-    {\n-        return Poco::Net::SocketAddress{last};\n-    }\n-    catch (const Poco::InvalidArgumentException &)\n-    {\n-        return Poco::Net::SocketAddress{last, 0};\n-    }\n-}\n \n+    /// IPv6 address with port\n+    if (last[0] == '[')\n+        return Poco::Net::SocketAddress{Poco::Net::AddressFamily::IPv6, last};\n+\n+    int colons = std::count(last.begin(), last.end(), ':');\n+\n+    /// IPv6 address without port\n+    if (colons > 1)\n+        return Poco::Net::SocketAddress{Poco::Net::AddressFamily::IPv6, last, 0};\n+\n+    /// IPv4 address with port\n+    if (colons == 1)\n+        return Poco::Net::SocketAddress{Poco::Net::AddressFamily::IPv4, last};\n+\n+    /// IPv4 address without port\n+    return Poco::Net::SocketAddress{Poco::Net::AddressFamily::IPv4, last, 0};\n+}\n \n void ClientInfo::write(WriteBuffer & out, UInt64 server_protocol_revision) const\n {\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03321_forwarded_for.py b/tests/queries/0_stateless/03321_forwarded_for.py\nnew file mode 100755\nindex 000000000000..8db9b2878d8d\n--- /dev/null\n+++ b/tests/queries/0_stateless/03321_forwarded_for.py\n@@ -0,0 +1,19 @@\n+#!/usr/bin/env python3\n+import os\n+import sys\n+\n+CURDIR = os.path.dirname(os.path.realpath(__file__))\n+sys.path.insert(0, os.path.join(CURDIR, \"helpers\"))\n+\n+from pure_http_client import ClickHouseClient\n+\n+client = ClickHouseClient()\n+\n+print(client.query(\"SELECT 1\", headers={\"X-Forwarded-For\": \"123.124.125.126\"}, with_retries=False))\n+print(client.query(\"SELECT 1\", headers={\"X-Forwarded-For\": \"123.124.125.126:80\"}, with_retries=False))\n+print(client.query(\"SELECT 1\", headers={\"X-Forwarded-For\": \"[::1.1.1.1]:80\"}, with_retries=False))\n+print(client.query(\"SELECT 1\", headers={\"X-Forwarded-For\": \"::1.1.1.1\"}, with_retries=False))\n+print(client.query(\"SELECT 1\", headers={\"X-Forwarded-For\": \"2a06:de00:50:cafe:10::1001\"}, with_retries=False))\n+print(client.query(\"SELECT 1\", headers={\"X-Forwarded-For\": \"[2a06:de00:50:cafe:10::1001]:80\"}, with_retries=False))\n+print(client.query(\"SELECT 1\", headers={\"X-Forwarded-For\": \"localhost:80\"}, with_retries=False))\n+print(client.query(\"SELECT 1\", headers={\"X-Forwarded-For\": \"localhost\"}, with_retries=False))\ndiff --git a/tests/queries/0_stateless/03321_forwarded_for.reference b/tests/queries/0_stateless/03321_forwarded_for.reference\nnew file mode 100644\nindex 000000000000..c14ac376b364\n--- /dev/null\n+++ b/tests/queries/0_stateless/03321_forwarded_for.reference\n@@ -0,0 +1,16 @@\n+1\n+\n+1\n+\n+1\n+\n+1\n+\n+1\n+\n+1\n+\n+1\n+\n+1\n+\ndiff --git a/tests/queries/0_stateless/helpers/pure_http_client.py b/tests/queries/0_stateless/helpers/pure_http_client.py\nindex 9a947b3ad3f9..96dce5d280cc 100644\n--- a/tests/queries/0_stateless/helpers/pure_http_client.py\n+++ b/tests/queries/0_stateless/helpers/pure_http_client.py\n@@ -26,6 +26,7 @@ def query(\n         settings=dict(),\n         binary_result=False,\n         with_retries=True,\n+        headers={},\n     ):\n         NUMBER_OF_TRIES = 30 if with_retries else 1\n         DELAY = 10\n@@ -41,7 +42,11 @@ def query(\n \n         for i in range(NUMBER_OF_TRIES):\n             r = requests.post(\n-                self.host, params=params, timeout=connection_timeout, data=query\n+                self.host,\n+                params=params,\n+                timeout=connection_timeout,\n+                data=query,\n+                headers=headers,\n             )\n             if r.status_code == 200:\n                 return r.content if binary_result else r.text\n",
  "problem_statement": "IPv6 query failure since version 25\n### Company or project name\n\n_No response_\n\n### Describe what's wrong\n\nWhen I update on version 25.1.2 from 24.8, I get those errors by making queries to ClickHouse via an IPv6 address: \n\n```\nPoco::Exception. Code: 1000 \u2502  e.code() = 0 \u2502  Service not found: de00:50:cafe:10::1001 (version 25.1.2.3 (official build))\n```\n\nNote that the client address is supposed to be `2a06:de00:50:cafe:10::1001` so it looks like the client address is evaluated as IPv4 instead of IPv6.\n\n### Does it reproduce on the most recent release?\n\nYes\n\n### How to reproduce\n\nQuery ClickHouse from IPv6 address. \n\n### Expected behavior\n\n_No response_\n\n### Error message and/or stacktrace\n\n_No response_\n\n### Additional context\n\n_No response_\n",
  "hints_text": "",
  "created_at": "2025-01-28T11:55:43Z",
  "modified_files": [
    "src/Interpreters/ClientInfo.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/03321_forwarded_for.py",
    "b/tests/queries/0_stateless/03321_forwarded_for.reference",
    "tests/queries/0_stateless/helpers/pure_http_client.py"
  ]
}