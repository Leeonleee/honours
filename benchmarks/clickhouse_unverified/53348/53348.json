{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 53348,
  "instance_id": "ClickHouse__ClickHouse-53348",
  "issue_numbers": [
    "52494"
  ],
  "base_commit": "926533306c5969b77571e66163a6930cfce1cf86",
  "patch": "diff --git a/src/Analyzer/Passes/QueryAnalysisPass.cpp b/src/Analyzer/Passes/QueryAnalysisPass.cpp\nindex 0c3dc5e70d7f..348189854e8b 100644\n--- a/src/Analyzer/Passes/QueryAnalysisPass.cpp\n+++ b/src/Analyzer/Passes/QueryAnalysisPass.cpp\n@@ -1918,6 +1918,9 @@ void QueryAnalyzer::evaluateScalarSubqueryIfNeeded(QueryTreeNodePtr & node, Iden\n         subquery_settings.max_result_rows = 1;\n         subquery_settings.extremes = false;\n         subquery_context->setSettings(subquery_settings);\n+        /// When execute `INSERT INTO t WITH ... SELECT ...`, it may lead to `Unknown columns`\n+        /// exception with this settings enabled(https://github.com/ClickHouse/ClickHouse/issues/52494).\n+        subquery_context->setSetting(\"use_structure_from_insertion_table_in_table_functions\", false);\n \n         auto options = SelectQueryOptions(QueryProcessingStage::Complete, scope.subquery_depth, true /*is_subquery*/);\n         auto interpreter = std::make_unique<InterpreterSelectQueryAnalyzer>(node->toAST(), subquery_context, options);\ndiff --git a/src/Interpreters/ExecuteScalarSubqueriesVisitor.cpp b/src/Interpreters/ExecuteScalarSubqueriesVisitor.cpp\nindex ded99df9f74e..5651bdb8a9b7 100644\n--- a/src/Interpreters/ExecuteScalarSubqueriesVisitor.cpp\n+++ b/src/Interpreters/ExecuteScalarSubqueriesVisitor.cpp\n@@ -77,6 +77,10 @@ static auto getQueryInterpreter(const ASTSubquery & subquery, ExecuteScalarSubqu\n     subquery_settings.max_result_rows = 1;\n     subquery_settings.extremes = false;\n     subquery_context->setSettings(subquery_settings);\n+\n+    /// When execute `INSERT INTO t WITH ... SELECT ...`, it may lead to `Unknown columns`\n+    /// exception with this settings enabled(https://github.com/ClickHouse/ClickHouse/issues/52494).\n+    subquery_context->getQueryContext()->setSetting(\"use_structure_from_insertion_table_in_table_functions\", false);\n     if (!data.only_analyze && subquery_context->hasQueryContext())\n     {\n         /// Save current cached scalars in the context before analyzing the query\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02843_insertion_table_schema_infer.reference b/tests/queries/0_stateless/02843_insertion_table_schema_infer.reference\nnew file mode 100644\nindex 000000000000..aec86406a982\n--- /dev/null\n+++ b/tests/queries/0_stateless/02843_insertion_table_schema_infer.reference\n@@ -0,0 +1,3 @@\n+user127\t1\n+user405\t1\n+user902\t1\ndiff --git a/tests/queries/0_stateless/02843_insertion_table_schema_infer.sh b/tests/queries/0_stateless/02843_insertion_table_schema_infer.sh\nnew file mode 100755\nindex 000000000000..d806b6784563\n--- /dev/null\n+++ b/tests/queries/0_stateless/02843_insertion_table_schema_infer.sh\n@@ -0,0 +1,16 @@\n+#!/usr/bin/env bash\n+# Tags: no-parallel, no-fasttest\n+\n+set -e\n+\n+CUR_DIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+# shellcheck source=../shell_config.sh\n+. \"$CUR_DIR\"/../shell_config.sh\n+\n+DATA_DIR=$CUR_DIR/data_tsv\n+\n+$CLICKHOUSE_LOCAL --multiquery \\\n+\"CREATE VIEW users AS SELECT * FROM file('$DATA_DIR/mock_data.tsv', TSVWithNamesAndTypes); \n+ CREATE TABLE users_output (name String, tag UInt64)ENGINE = Memory;\n+ INSERT INTO users_output WITH (SELECT groupUniqArrayArray(mapKeys(Tags)) FROM users) AS unique_tags SELECT UserName AS name, length(unique_tags) AS tag FROM users;\n+ SELECT * FROM users_output;\"\ndiff --git a/tests/queries/0_stateless/data_tsv/mock_data.tsv b/tests/queries/0_stateless/data_tsv/mock_data.tsv\nnew file mode 100644\nindex 000000000000..fcf2b300b15b\n--- /dev/null\n+++ b/tests/queries/0_stateless/data_tsv/mock_data.tsv\n@@ -0,0 +1,5 @@\n+UserName\tAge\tTags\n+String\tInt8\tMap(String, UInt64)\n+user127\t20\t{'test': 123}\n+user405\t43\t{'test': 123}\n+user902\t43\t{'test': 123}\n",
  "problem_statement": "Unknown columns with use_structure_from_insertion_table_in_table_functions settings\nHow to reproduce(See also #48679):\r\n\r\n`cat mock_data.tsv`\r\n\r\n```\r\nUserName\tAge\tTags\r\nString\tInt8\tMap(String, UInt64)\r\nuser127\t20\t{'test': 123}\r\nuser405\t43\t{'test': 123}\r\nuser902\t43\t{'test': 123}\r\n```\r\n\r\n```sql\r\nCREATE VIEW users AS SELECT * FROM file('mock_data.tsv', TSVWithNamesAndTypes);\r\n\r\nCREATE TABLE users_output                                                                                                                                                                    \r\n(                                                                                                                                                                                            \r\n    `name` String,                                                                                                                                                                           \r\n    `tag` UInt64                                                                                                                                                                             \r\n)                                                                                                                                                                                            \r\nENGINE = File('TSV', 'output.tsv') ;\r\n\r\nINSERT INTO users_output WITH (\r\n        SELECT groupUniqArrayArray(mapKeys(Tags))\r\n        FROM users                             \r\n    ) AS unique_tags                           \r\nSELECT                                         \r\n    UserName AS name,                          \r\n    length(unique_tags) AS tag\r\nFROM users                                     \r\n\r\nQuery id: 5f84b12c-31a2-4892-9b89-dcf6ffd184ea\r\n\r\n\r\n0 rows in set. Elapsed: 0.004 sec. \r\n\r\nReceived exception from server (version 23.7.1):\r\nCode: 47. DB::Exception: Received from localhost:9000. DB::Exception: Unknown column: Tags, there are only columns : While processing (SELECT groupUniqArrayArray(mapKeys(Tags)) FROM users) \r\nAS unique_tags. (UNKNOWN_IDENTIFIER)\r\n\r\nSET use_structure_from_insertion_table_in_table_functions = 0;\r\n\r\nINSERT INTO users_output WITH (\r\n        SELECT groupUniqArrayArray(mapKeys(Tags))\r\n        FROM users                             \r\n    ) AS unique_tags                           \r\nSELECT                                         \r\n    UserName AS name,                          \r\n    length(unique_tags) AS tag\r\nFROM users                                     \r\n\r\nQuery id: 373bc235-c06b-4194-afbf-78a7abe88846\r\n\r\nOk.                                            \r\n\r\n0 rows in set. Elapsed: 0.014 sec.\r\n```\r\n\r\n**cc** @Avogar.\n",
  "hints_text": "",
  "created_at": "2023-08-12T08:18:38Z",
  "modified_files": [
    "src/Analyzer/Passes/QueryAnalysisPass.cpp",
    "src/Interpreters/ExecuteScalarSubqueriesVisitor.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02843_insertion_table_schema_infer.reference",
    "b/tests/queries/0_stateless/02843_insertion_table_schema_infer.sh",
    "b/tests/queries/0_stateless/data_tsv/mock_data.tsv"
  ]
}