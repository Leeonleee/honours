diff --git a/src/Common/tests/gtest_log.cpp b/src/Common/tests/gtest_log.cpp
index e755c22ba75b..419aac370d6a 100644
--- a/src/Common/tests/gtest_log.cpp
+++ b/src/Common/tests/gtest_log.cpp
@@ -15,7 +15,7 @@ TEST(Logger, Log)
 {
     Poco::Logger::root().setLevel("none");
     Poco::Logger::root().setChannel(Poco::AutoPtr<Poco::NullChannel>(new Poco::NullChannel()));
-    Poco::Logger * log = &Poco::Logger::get("Log");
+    LoggerPtr log = getLogger("Log");
 
     /// This test checks that we don't pass this string to fmtlib, because it is the only argument.
     EXPECT_NO_THROW(LOG_INFO(log, fmt::runtime("Hello {} World")));
@@ -27,7 +27,7 @@ TEST(Logger, TestLog)
 
         std::ostringstream oss; // STYLE_CHECK_ALLOW_STD_STRING_STREAM
         auto my_channel = Poco::AutoPtr<Poco::StreamChannel>(new Poco::StreamChannel(oss));
-        auto * log = &Poco::Logger::create("TestLogger", my_channel.get());
+        auto log = createLogger("TestLogger", my_channel.get());
         log->setLevel("test");
         LOG_TEST(log, "Hello World");
 
@@ -40,7 +40,7 @@ TEST(Logger, TestLog)
         {
             std::ostringstream oss; // STYLE_CHECK_ALLOW_STD_STRING_STREAM
             auto my_channel = Poco::AutoPtr<Poco::StreamChannel>(new Poco::StreamChannel(oss));
-            auto * log = &Poco::Logger::create(std::string{level} + "_Logger", my_channel.get());
+            auto log = createLogger(std::string{level} + "_Logger", my_channel.get());
             log->setLevel(level);
             LOG_TEST(log, "Hello World");
 
@@ -84,7 +84,7 @@ TEST(Logger, SideEffects)
 {
     std::ostringstream oss; // STYLE_CHECK_ALLOW_STD_STRING_STREAM
     auto my_channel = Poco::AutoPtr<Poco::StreamChannel>(new Poco::StreamChannel(oss));
-    auto * log = &Poco::Logger::create("Logger", my_channel.get());
+    auto log = createLogger("Logger", my_channel.get());
     log->setLevel("trace");
 
     /// Ensure that parameters are evaluated only once
diff --git a/src/Common/tests/gtest_poolbase.cpp b/src/Common/tests/gtest_poolbase.cpp
index 20c3281c9646..879b1b166204 100644
--- a/src/Common/tests/gtest_poolbase.cpp
+++ b/src/Common/tests/gtest_poolbase.cpp
@@ -18,7 +18,7 @@ class MyPoolBase : public PoolBase<PoolObject>
     using Ptr = PoolBase<PoolObject>::Ptr;
 
     int last_destroy_value = 0;
-    MyPoolBase() : PoolBase<PoolObject>(100, &Poco::Logger::get("MyPoolBase")) { }
+    MyPoolBase() : PoolBase<PoolObject>(100, getLogger("MyPoolBase")) { }
 
 protected:
     ObjectPtr allocObject() override { return std::make_shared<Object>(); }
diff --git a/src/Coordination/tests/gtest_coordination.cpp b/src/Coordination/tests/gtest_coordination.cpp
index c981085359e2..59a550177a46 100644
--- a/src/Coordination/tests/gtest_coordination.cpp
+++ b/src/Coordination/tests/gtest_coordination.cpp
@@ -66,7 +66,7 @@ class CoordinationTest : public ::testing::TestWithParam<CompressionParam>
 {
 protected:
     DB::KeeperContextPtr keeper_context = std::make_shared<DB::KeeperContext>(true);
-    Poco::Logger * log{&Poco::Logger::get("CoordinationTest")};
+    LoggerPtr log{getLogger("CoordinationTest")};
 
     void SetUp() override
     {
@@ -1101,7 +1101,7 @@ TEST_P(CoordinationTest, ChangelogTestReadAfterBrokenTruncate2)
 }
 
 /// Truncating only some entries from the end
-/// For compressed logs we have no reliable way of knowing how many log entries were lost 
+/// For compressed logs we have no reliable way of knowing how many log entries were lost
 /// after we truncate some bytes from the end
 TEST_F(CoordinationTest, ChangelogTestReadAfterBrokenTruncate3)
 {
@@ -1801,7 +1801,7 @@ void testLogAndStateMachine(
                 = [&snapshot_created](bool & ret, nuraft::ptr<std::exception> & /*exception*/)
             {
                 snapshot_created = ret;
-                LOG_INFO(&Poco::Logger::get("CoordinationTest"), "Snapshot finished");
+                LOG_INFO(getLogger("CoordinationTest"), "Snapshot finished");
             };
 
             state_machine->create_snapshot(s, when_done);
