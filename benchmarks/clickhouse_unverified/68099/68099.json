{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 68099,
  "instance_id": "ClickHouse__ClickHouse-68099",
  "issue_numbers": [
    "67906"
  ],
  "base_commit": "7de1c4bfc306eec8a7091a86833c68223ed4f181",
  "patch": "diff --git a/src/Processors/QueryPlan/Optimizations/removeRedundantSorting.cpp b/src/Processors/QueryPlan/Optimizations/removeRedundantSorting.cpp\nindex 7cac7bee6ecc..f0094f0f8d22 100644\n--- a/src/Processors/QueryPlan/Optimizations/removeRedundantSorting.cpp\n+++ b/src/Processors/QueryPlan/Optimizations/removeRedundantSorting.cpp\n@@ -8,6 +8,7 @@\n #include <Processors/QueryPlan/JoinStep.h>\n #include <Processors/QueryPlan/LimitByStep.h>\n #include <Processors/QueryPlan/LimitStep.h>\n+#include <Processors/QueryPlan/OffsetStep.h>\n #include <Processors/QueryPlan/Optimizations/Optimizations.h>\n #include <Processors/QueryPlan/QueryPlanVisitor.h>\n #include <Processors/QueryPlan/ReadFromMergeTree.h>\n@@ -59,9 +60,10 @@ class RemoveRedundantSorting : public QueryPlanVisitor<RemoveRedundantSorting, d\n \n         if (typeid_cast<LimitStep *>(current_step)\n             || typeid_cast<LimitByStep *>(current_step) /// (1) if there are LIMITs on top of ORDER BY, the ORDER BY is non-removable\n-            || typeid_cast<FillingStep *>(current_step) /// (2) if ORDER BY is with FILL WITH, it is non-removable\n-            || typeid_cast<SortingStep *>(current_step) /// (3) ORDER BY will change order of previous sorting\n-            || typeid_cast<AggregatingStep *>(current_step)) /// (4) aggregation change order\n+            || typeid_cast<OffsetStep *>(current_step) /// (2) OFFSET on top of ORDER BY, the ORDER BY is non-removable\n+            || typeid_cast<FillingStep *>(current_step) /// (3) if ORDER BY is with FILL WITH, it is non-removable\n+            || typeid_cast<SortingStep *>(current_step) /// (4) ORDER BY will change order of previous sorting\n+            || typeid_cast<AggregatingStep *>(current_step)) /// (5) aggregation change order\n         {\n             logStep(\"nodes_affect_order/push\", current_node);\n             nodes_affect_order.push_back(current_node);\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02496_remove_redundant_sorting.reference b/tests/queries/0_stateless/02496_remove_redundant_sorting.reference\nindex 77ef213b36d0..4d004f2f78f8 100644\n--- a/tests/queries/0_stateless/02496_remove_redundant_sorting.reference\n+++ b/tests/queries/0_stateless/02496_remove_redundant_sorting.reference\n@@ -465,6 +465,37 @@ Expression ((Projection + Before ORDER BY))\n             ReadFromStorage (SystemOne)\n -- execute\n Float64\t9007199254740994\n+-- presence of an inner OFFSET retains the ORDER BY\n+-- query\n+WITH\n+  t1 AS (\n+    SELECT a, b\n+    FROM\n+      VALUES (\n+        'b UInt32, a Int32',\n+        (1, 1),\n+        (2, 0)\n+      )\n+  )\n+SELECT\n+  SUM(a)\n+FROM (\n+  SELECT a, b\n+  FROM t1\n+  ORDER BY 1 DESC, 2\n+  OFFSET 1\n+) t2\n+-- explain\n+Expression ((Projection + Before ORDER BY))\n+  Aggregating\n+    Expression (Before GROUP BY)\n+      Offset\n+        Expression (Projection)\n+          Sorting (Sorting for ORDER BY)\n+            Expression ((Before ORDER BY + (Projection + Before ORDER BY)))\n+              ReadFromStorage (Values)\n+-- execute\n+0\n -- disable common optimization to avoid functions to be lifted up (liftUpFunctions optimization), needed for testing with stateful function\n -- neighbor() as stateful function prevents removing inner ORDER BY since its result depends on order\n -- query\ndiff --git a/tests/queries/0_stateless/02496_remove_redundant_sorting.sh b/tests/queries/0_stateless/02496_remove_redundant_sorting.sh\nindex 646e2501a991..c9bd242e429e 100755\n--- a/tests/queries/0_stateless/02496_remove_redundant_sorting.sh\n+++ b/tests/queries/0_stateless/02496_remove_redundant_sorting.sh\n@@ -302,6 +302,27 @@ FROM\n )\"\n run_query \"$query\"\n \n+echo \"-- presence of an inner OFFSET retains the ORDER BY\"\n+query=\"WITH\n+  t1 AS (\n+    SELECT a, b\n+    FROM\n+      VALUES (\n+        'b UInt32, a Int32',\n+        (1, 1),\n+        (2, 0)\n+      )\n+  )\n+SELECT\n+  SUM(a)\n+FROM (\n+  SELECT a, b\n+  FROM t1\n+  ORDER BY 1 DESC, 2\n+  OFFSET 1\n+) t2\"\n+run_query \"$query\"\n+\n echo \"-- disable common optimization to avoid functions to be lifted up (liftUpFunctions optimization), needed for testing with stateful function\"\n ENABLE_OPTIMIZATION=\"SET query_plan_enable_optimizations=0;$ENABLE_OPTIMIZATION\"\n echo \"-- neighbor() as stateful function prevents removing inner ORDER BY since its result depends on order\"\ndiff --git a/tests/queries/0_stateless/02496_remove_redundant_sorting_analyzer.reference b/tests/queries/0_stateless/02496_remove_redundant_sorting_analyzer.reference\nindex b6a2e3182dfe..dd5ac7bf7062 100644\n--- a/tests/queries/0_stateless/02496_remove_redundant_sorting_analyzer.reference\n+++ b/tests/queries/0_stateless/02496_remove_redundant_sorting_analyzer.reference\n@@ -464,6 +464,36 @@ Expression ((Project names + Projection))\n             ReadFromStorage (SystemOne)\n -- execute\n Float64\t9007199254740994\n+-- presence of an inner OFFSET retains the ORDER BY\n+-- query\n+WITH\n+  t1 AS (\n+    SELECT a, b\n+    FROM\n+      VALUES (\n+        'b UInt32, a Int32',\n+        (1, 1),\n+        (2, 0)\n+      )\n+  )\n+SELECT\n+  SUM(a)\n+FROM (\n+  SELECT a, b\n+  FROM t1\n+  ORDER BY 1 DESC, 2\n+  OFFSET 1\n+) t2\n+-- explain\n+Expression ((Project names + Projection))\n+  Aggregating\n+    Expression ((Before GROUP BY + (Change column names to column identifiers + Project names)))\n+      Offset\n+        Sorting (Sorting for ORDER BY)\n+          Expression ((Before ORDER BY + (Projection + (Change column names to column identifiers + (Project names + (Projection + Change column names to column identifiers))))))\n+            ReadFromStorage (Values)\n+-- execute\n+0\n -- disable common optimization to avoid functions to be lifted up (liftUpFunctions optimization), needed for testing with stateful function\n -- neighbor() as stateful function prevents removing inner ORDER BY since its result depends on order\n -- query\n",
  "problem_statement": "Wrong query result with `query_plan_remove_redundant_sorting`\nhttps://fiddle.clickhouse.com/e96a52c8-9b56-42f9-98de-b5b46dfc3289\n",
  "hints_text": "It looks like a bug in the optimizer that's removing sorting in subqueries when OFFSET is present and set to a value other than 0, which is not a safe optimization to apply.",
  "created_at": "2024-08-09T09:52:54Z",
  "modified_files": [
    "src/Processors/QueryPlan/Optimizations/removeRedundantSorting.cpp"
  ],
  "modified_test_files": [
    "tests/queries/0_stateless/02496_remove_redundant_sorting.reference",
    "tests/queries/0_stateless/02496_remove_redundant_sorting.sh",
    "tests/queries/0_stateless/02496_remove_redundant_sorting_analyzer.reference"
  ]
}