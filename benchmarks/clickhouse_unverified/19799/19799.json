{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 19799,
  "instance_id": "ClickHouse__ClickHouse-19799",
  "issue_numbers": [
    "19756"
  ],
  "base_commit": "10160e5adf77e0ec0182e0c46a6688780abb5824",
  "patch": "diff --git a/src/Columns/ColumnFixedString.cpp b/src/Columns/ColumnFixedString.cpp\nindex a20e5d3ca0de..55e387ff2eec 100644\n--- a/src/Columns/ColumnFixedString.cpp\n+++ b/src/Columns/ColumnFixedString.cpp\n@@ -289,7 +289,8 @@ ColumnPtr ColumnFixedString::filter(const IColumn::Filter & filt, ssize_t result\n \n     while (filt_pos < filt_end_sse)\n     {\n-        int mask = _mm_movemask_epi8(_mm_cmpgt_epi8(_mm_loadu_si128(reinterpret_cast<const __m128i *>(filt_pos)), zero16));\n+        UInt16 mask = _mm_movemask_epi8(_mm_cmpeq_epi8(_mm_loadu_si128(reinterpret_cast<const __m128i *>(filt_pos)), zero16));\n+        mask = ~mask;\n \n         if (0 == mask)\n         {\ndiff --git a/src/Columns/ColumnVector.cpp b/src/Columns/ColumnVector.cpp\nindex fcbcc63731a7..a075c10a8a97 100644\n--- a/src/Columns/ColumnVector.cpp\n+++ b/src/Columns/ColumnVector.cpp\n@@ -356,7 +356,8 @@ ColumnPtr ColumnVector<T>::filter(const IColumn::Filter & filt, ssize_t result_s\n \n     while (filt_pos < filt_end_sse)\n     {\n-        int mask = _mm_movemask_epi8(_mm_cmpgt_epi8(_mm_loadu_si128(reinterpret_cast<const __m128i *>(filt_pos)), zero16));\n+        UInt16 mask = _mm_movemask_epi8(_mm_cmpeq_epi8(_mm_loadu_si128(reinterpret_cast<const __m128i *>(filt_pos)), zero16));\n+        mask = ~mask;\n \n         if (0 == mask)\n         {\ndiff --git a/src/Columns/ColumnsCommon.cpp b/src/Columns/ColumnsCommon.cpp\nindex f3f10a25df35..3c356afa4da7 100644\n--- a/src/Columns/ColumnsCommon.cpp\n+++ b/src/Columns/ColumnsCommon.cpp\n@@ -17,13 +17,17 @@ namespace DB\n static UInt64 toBits64(const Int8 * bytes64)\n {\n     static const __m128i zero16 = _mm_setzero_si128();\n-    return static_cast<UInt64>(_mm_movemask_epi8(_mm_cmpgt_epi8(_mm_loadu_si128(reinterpret_cast<const __m128i *>(bytes64)), zero16)))\n-        | (static_cast<UInt64>(_mm_movemask_epi8(_mm_cmpgt_epi8(_mm_loadu_si128(reinterpret_cast<const __m128i *>(bytes64 + 16)), zero16)))\n-           << 16)\n-        | (static_cast<UInt64>(_mm_movemask_epi8(_mm_cmpgt_epi8(_mm_loadu_si128(reinterpret_cast<const __m128i *>(bytes64 + 32)), zero16)))\n-           << 32)\n-        | (static_cast<UInt64>(_mm_movemask_epi8(_mm_cmpgt_epi8(_mm_loadu_si128(reinterpret_cast<const __m128i *>(bytes64 + 48)), zero16)))\n-           << 48);\n+    UInt64 res =\n+        static_cast<UInt64>(_mm_movemask_epi8(_mm_cmpeq_epi8(\n+            _mm_loadu_si128(reinterpret_cast<const __m128i *>(bytes64)), zero16)))\n+        | (static_cast<UInt64>(_mm_movemask_epi8(_mm_cmpeq_epi8(\n+            _mm_loadu_si128(reinterpret_cast<const __m128i *>(bytes64 + 16)), zero16))) << 16)\n+        | (static_cast<UInt64>(_mm_movemask_epi8(_mm_cmpeq_epi8(\n+            _mm_loadu_si128(reinterpret_cast<const __m128i *>(bytes64 + 32)), zero16))) << 32)\n+        | (static_cast<UInt64>(_mm_movemask_epi8(_mm_cmpeq_epi8(\n+            _mm_loadu_si128(reinterpret_cast<const __m128i *>(bytes64 + 48)), zero16))) << 48);\n+\n+    return ~res;\n }\n #endif\n \n@@ -49,7 +53,7 @@ size_t countBytesInFilter(const UInt8 * filt, size_t sz)\n #endif\n \n     for (; pos < end; ++pos)\n-        count += *pos > 0;\n+        count += *pos != 0;\n \n     return count;\n }\n@@ -82,7 +86,7 @@ size_t countBytesInFilterWithNull(const IColumn::Filter & filt, const UInt8 * nu\n #endif\n \n     for (; pos < end; ++pos)\n-        count += (*pos & ~*pos2) > 0;\n+        count += (*pos & ~*pos2) != 0;\n \n     return count;\n }\n@@ -232,9 +236,10 @@ namespace\n \n         while (filt_pos < filt_end_aligned)\n         {\n-            const auto mask = _mm_movemask_epi8(_mm_cmpgt_epi8(\n+            UInt16 mask = _mm_movemask_epi8(_mm_cmpeq_epi8(\n                 _mm_loadu_si128(reinterpret_cast<const __m128i *>(filt_pos)),\n                 zero_vec));\n+            mask = ~mask;\n \n             if (mask == 0)\n             {\ndiff --git a/src/Common/memcmpSmall.h b/src/Common/memcmpSmall.h\nindex bafc08a9cbee..db8641cb44dd 100644\n--- a/src/Common/memcmpSmall.h\n+++ b/src/Common/memcmpSmall.h\n@@ -120,9 +120,10 @@ inline int memcmpSmallLikeZeroPaddedAllowOverflow15(const Char * a, size_t a_siz\n \n     for (size_t offset = min_size; offset < max_size; offset += 16)\n     {\n-        uint16_t mask = _mm_movemask_epi8(_mm_cmpgt_epi8(\n+        uint16_t mask = _mm_movemask_epi8(_mm_cmpeq_epi8(\n             _mm_loadu_si128(reinterpret_cast<const __m128i *>(longest + offset)),\n             zero16));\n+        mask = ~mask;\n \n         if (mask)\n         {\ndiff --git a/src/Storages/MergeTree/MergeTreeRangeReader.cpp b/src/Storages/MergeTree/MergeTreeRangeReader.cpp\nindex c13146bd35c5..4e5e7e6f9463 100644\n--- a/src/Storages/MergeTree/MergeTreeRangeReader.cpp\n+++ b/src/Storages/MergeTree/MergeTreeRangeReader.cpp\n@@ -414,18 +414,19 @@ size_t MergeTreeRangeReader::ReadResult::numZerosInTail(const UInt8 * begin, con\n         end -= 64;\n         const auto * pos = end;\n         UInt64 val =\n-                static_cast<UInt64>(_mm_movemask_epi8(_mm_cmpgt_epi8(\n+                static_cast<UInt64>(_mm_movemask_epi8(_mm_cmpeq_epi8(\n                         _mm_loadu_si128(reinterpret_cast<const __m128i *>(pos)),\n                         zero16)))\n-                | (static_cast<UInt64>(_mm_movemask_epi8(_mm_cmpgt_epi8(\n+                | (static_cast<UInt64>(_mm_movemask_epi8(_mm_cmpeq_epi8(\n                         _mm_loadu_si128(reinterpret_cast<const __m128i *>(pos + 16)),\n                         zero16))) << 16u)\n-                | (static_cast<UInt64>(_mm_movemask_epi8(_mm_cmpgt_epi8(\n+                | (static_cast<UInt64>(_mm_movemask_epi8(_mm_cmpeq_epi8(\n                         _mm_loadu_si128(reinterpret_cast<const __m128i *>(pos + 32)),\n                         zero16))) << 32u)\n-                | (static_cast<UInt64>(_mm_movemask_epi8(_mm_cmpgt_epi8(\n+                | (static_cast<UInt64>(_mm_movemask_epi8(_mm_cmpeq_epi8(\n                         _mm_loadu_si128(reinterpret_cast<const __m128i *>(pos + 48)),\n                         zero16))) << 48u);\n+        val = ~val;\n         if (val == 0)\n             count += 64;\n         else\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01674_filter_by_uint8.reference b/tests/queries/0_stateless/01674_filter_by_uint8.reference\nnew file mode 100644\nindex 000000000000..6b522898280d\n--- /dev/null\n+++ b/tests/queries/0_stateless/01674_filter_by_uint8.reference\n@@ -0,0 +1,8 @@\n+0\n+0\n+255\n+1\t['foo','bar']\t1\t1\n+2\t['foo','bar']\t2\t1\n+3\t['foo','bar']\t3\t1\n+4\t['foo','bar']\t4\t1\n+5\t['foo','bar']\t5\t1\ndiff --git a/tests/queries/0_stateless/01674_filter_by_uint8.sql b/tests/queries/0_stateless/01674_filter_by_uint8.sql\nnew file mode 100644\nindex 000000000000..960153d9c5af\n--- /dev/null\n+++ b/tests/queries/0_stateless/01674_filter_by_uint8.sql\n@@ -0,0 +1,14 @@\n+-- ORDER BY is to trigger comparison at uninitialized memory after bad filtering.\n+SELECT ignore(number) FROM numbers(256) ORDER BY arrayFilter(x -> materialize(255), materialize([257])) LIMIT 1;\n+SELECT ignore(number) FROM numbers(256) ORDER BY arrayFilter(x -> materialize(255), materialize(['257'])) LIMIT 1;\n+\n+SELECT count() FROM numbers(256) WHERE toUInt8(number);\n+\n+DROP TABLE IF EXISTS t_filter;\n+CREATE TABLE t_filter(s String, a Array(FixedString(3)), u UInt64, f UInt8)\n+ENGINE = MergeTree ORDER BY u;\n+\n+INSERT INTO t_filter SELECT toString(number), ['foo', 'bar'], number, toUInt8(number) FROM numbers(1000);\n+SELECT * FROM t_filter WHERE f LIMIT 5;\n+\n+DROP TABLE IF EXISTS t_filter;\n",
  "problem_statement": "Suspected bug in ColumnArray::updatePermutation method\n**Describe the bug**\r\nhttps://clickhouse-test-reports.s3.yandex.net/19702/c74631c650b42e4d107254a03bd82c2c2913039b/fuzzer_msan/server.log\r\n\r\nMost likely introduced here: #11006\n",
  "hints_text": "Minimal repro:\r\n\r\n```sql\r\nSELECT\r\n    number\r\n    FROM numbers(256)\r\n    ORDER BY\r\n        arrayFilter(x -> materialize(255), ['257']) ASC\r\n    LIMIT 10\r\n```",
  "created_at": "2021-01-29T07:41:50Z",
  "modified_files": [
    "src/Columns/ColumnFixedString.cpp",
    "src/Columns/ColumnVector.cpp",
    "src/Columns/ColumnsCommon.cpp",
    "src/Common/memcmpSmall.h",
    "src/Storages/MergeTree/MergeTreeRangeReader.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/01674_filter_by_uint8.reference",
    "b/tests/queries/0_stateless/01674_filter_by_uint8.sql"
  ]
}