{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 66461,
  "instance_id": "ClickHouse__ClickHouse-66461",
  "issue_numbers": [
    "66458"
  ],
  "base_commit": "90142b73ad2b078807376b405e38d9c1556182bb",
  "patch": "diff --git a/src/Processors/Formats/Impl/NpyRowInputFormat.cpp b/src/Processors/Formats/Impl/NpyRowInputFormat.cpp\nindex 65e0f9dd1927..773cbc9268e7 100644\n--- a/src/Processors/Formats/Impl/NpyRowInputFormat.cpp\n+++ b/src/Processors/Formats/Impl/NpyRowInputFormat.cpp\n@@ -445,6 +445,9 @@ bool NpyRowInputFormat::readRow(MutableColumns & columns, RowReadExtension &  /*\n         elements_in_current_column *= header.shape[i];\n     }\n \n+    if (typeid_cast<ColumnArray *>(current_column))\n+        throw Exception(ErrorCodes::BAD_ARGUMENTS, \"Unexpected nesting level of column '{}', expected {}\", column->getName(), header.shape.size() - 1);\n+\n     for (size_t i = 0; i != elements_in_current_column; ++i)\n         readValue(current_column);\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02895_npy_format.reference b/tests/queries/0_stateless/02895_npy_format.reference\nindex f9e77644a352..52972f0acbdc 100644\n--- a/tests/queries/0_stateless/02895_npy_format.reference\n+++ b/tests/queries/0_stateless/02895_npy_format.reference\n@@ -85,12 +85,12 @@ c\n [4,5,6]\n [[1,2],[3,4]]\n [[5,6],[7,8]]\n-0\n-0\n-0\n-0\n-0\n-0\n+1\n+1\n+1\n+1\n+1\n+1\n 1\n [2.199219,1.099609,3.300781]\n [4.25,3.34961,6.628906]\ndiff --git a/tests/queries/0_stateless/02895_npy_format.sh b/tests/queries/0_stateless/02895_npy_format.sh\nindex 9d05303a0911..194b2bc1fe42 100755\n--- a/tests/queries/0_stateless/02895_npy_format.sh\n+++ b/tests/queries/0_stateless/02895_npy_format.sh\n@@ -52,14 +52,14 @@ $CLICKHOUSE_LOCAL -q \"select * from file('$CURDIR/data_npy/two_dim.npy', Npy, 'v\n $CLICKHOUSE_LOCAL -q \"select * from file('$CURDIR/data_npy/three_dim.npy', Npy, 'value Array(Array(Int8))')\"\n \n $CLICKHOUSE_LOCAL -q \"select * from file('$CURDIR/data_npy/one_dim_float.npy', Npy, 'value Array(Float32)')\" 2>&1 | grep -c \"BAD_ARGUMENTS\"\n-$CLICKHOUSE_LOCAL -q \"select * from file('$CURDIR/data_npy/one_dim_float.npy', Npy, 'value UUID')\" 2>&1 | grep -c \"BAD_ARGUMENTS\"\n-$CLICKHOUSE_LOCAL -q \"select * from file('$CURDIR/data_npy/one_dim_float.npy', Npy, 'value Tuple(UInt8)')\" 2>&1 | grep -c \"BAD_ARGUMENTS\"\n+$CLICKHOUSE_LOCAL -q \"select * from file('$CURDIR/data_npy/one_dim_float.npy', Npy, 'value UUID')\" 2>&1 | grep -c \"UNKNOWN_TYPE\"\n+$CLICKHOUSE_LOCAL -q \"select * from file('$CURDIR/data_npy/one_dim_float.npy', Npy, 'value Tuple(UInt8)')\" 2>&1 | grep -c \"UNKNOWN_TYPE\"\n \n-$CLICKHOUSE_LOCAL -q \"select * from file('$CURDIR/data_npy/one_dim_float.npy', Npy, 'value Int8')\" 2>&1 | grep -c \"BAD_ARGUMENTS\"\n-$CLICKHOUSE_LOCAL -q \"select * from file('$CURDIR/data_npy/one_dim_str.npy', Npy, 'value Int8')\" 2>&1 | grep -c \"BAD_ARGUMENTS\"\n-$CLICKHOUSE_LOCAL -q \"select * from file('$CURDIR/data_npy/one_dim_unicode.npy', Npy, 'value Float32')\" 2>&1 | grep -c \"BAD_ARGUMENTS\"\n+$CLICKHOUSE_LOCAL -q \"select * from file('$CURDIR/data_npy/one_dim_float.npy', Npy, 'value Int8')\" 2>&1 | grep -c \"ILLEGAL_COLUMN\"\n+$CLICKHOUSE_LOCAL -q \"select * from file('$CURDIR/data_npy/one_dim_str.npy', Npy, 'value Int8')\" 2>&1 | grep -c \"ILLEGAL_COLUMN\"\n+$CLICKHOUSE_LOCAL -q \"select * from file('$CURDIR/data_npy/one_dim_unicode.npy', Npy, 'value Float32')\" 2>&1 | grep -c \"ILLEGAL_COLUMN\"\n \n-$CLICKHOUSE_LOCAL -q \"select * from file('$CURDIR/data_npy/complex.npy')\" 2>&1 | grep -c \"BAD_ARGUMENTS\"\n+$CLICKHOUSE_LOCAL -q \"select * from file('$CURDIR/data_npy/complex.npy')\" 2>&1 | grep -c \"CANNOT_EXTRACT_TABLE_STRUCTURE\"\n \n $CLICKHOUSE_LOCAL -q \"select * from file('$CURDIR/data_npy/float_16.npy')\"\n \n",
  "problem_statement": "Logical error: 'Bad cast from type DB::ColumnArray to DB::ColumnVector<float>' in `02895_npy_format`\n```\r\n \uf312 \ue0b0 \uf07c ~/ch/logs \ue0b0 ./clickhouse local -q \"select * from file('/home/tavplubix/ch/ClickHouse/tests/queries/0_stateless/data_npy/one_dim_float.npy', Npy, 'value Array(Float32)')\"                                                                                             \ue0b2 \u2714 \ue0b2 11s \uf252 \r\n2024.07.12 18:55:50.247333 [ 338549 ] {2202c19e-5f0f-4ea1-96ce-de4ba29dcd76} <Fatal> : Logical error: 'Bad cast from type DB::ColumnArray to DB::ColumnVector<float>'.\r\n2024.07.12 18:55:50.704358 [ 338549 ] {2202c19e-5f0f-4ea1-96ce-de4ba29dcd76} <Fatal> : Stack trace (when copying this message, always include the lines below):\r\n\r\n0. ./contrib/llvm-project/libcxx/include/exception:141: Poco::Exception::Exception(String const&, int) @ 0x000000001debd9a3\r\n1. ./build_docker/./src/Common/Exception.cpp:110: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000f7bf0d5\r\n2. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x00000000073cb380\r\n3. DB::Exception::Exception<String, String>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<String>::type>, String&&, String&&) @ 0x00000000073cd666\r\n4. DB::ColumnVector<float>& assert_cast<DB::ColumnVector<float>&, DB::IColumn&>(DB::IColumn&) @ 0x0000000009e1ee02\r\n5. ./build_docker/./src/Processors/Formats/Impl/NpyRowInputFormat.cpp:325: void DB::NpyRowInputFormat::readAndInsertFloat<float>(DB::IColumn*, std::shared_ptr<DB::IDataType const> const&, NumpyDataType const&) @ 0x0000000019ed3b33\r\n6. ./build_docker/./src/Processors/Formats/Impl/NpyRowInputFormat.cpp:419: DB::NpyRowInputFormat::readValue(DB::IColumn*) @ 0x0000000019ecd010\r\n7. ./build_docker/./src/Processors/Formats/Impl/NpyRowInputFormat.cpp:449: DB::NpyRowInputFormat::readRow(std::vector<COW<DB::IColumn>::mutable_ptr<DB::IColumn>, std::allocator<COW<DB::IColumn>::mutable_ptr<DB::IColumn>>>&, DB::RowReadExtension&) @ 0x0000000019ecd7bb\r\n8. ./build_docker/./src/Processors/Formats/IRowInputFormat.cpp:0: DB::IRowInputFormat::read() @ 0x0000000019d863c4\r\n9. ./build_docker/./src/Processors/Formats/IInputFormat.cpp:19: DB::IInputFormat::generate() @ 0x0000000019cfa255\r\n10. ./src/Processors/Chunk.h:90: DB::ISource::tryGenerate() @ 0x0000000019cc82d5\r\n11. ./contrib/llvm-project/libcxx/include/optional:344: DB::ISource::work() @ 0x0000000019cc7d0b\r\n12. ./contrib/llvm-project/libcxx/include/list:588: DB::ExecutionThreadContext::executeTask() @ 0x0000000019cec6ea\r\n13. ./build_docker/./src/Processors/Executors/PipelineExecutor.cpp:272: DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x0000000019cddb83\r\n14. ./build_docker/./src/Processors/Executors/PipelineExecutor.cpp:149: DB::PipelineExecutor::executeStep(std::atomic<bool>*) @ 0x0000000019cdd546\r\n15. ./build_docker/./src/Processors/Executors/PullingPipelineExecutor.cpp:54: DB::PullingPipelineExecutor::pull(DB::Chunk&) @ 0x0000000019cf281f\r\n16. ./build_docker/./src/Storages/StorageFile.cpp:1440: DB::StorageFileSource::generate() @ 0x0000000018c710dc\r\n17. ./src/Processors/Chunk.h:90: DB::ISource::tryGenerate() @ 0x0000000019cc82d5\r\n18. ./contrib/llvm-project/libcxx/include/optional:344: DB::ISource::work() @ 0x0000000019cc7d0b\r\n19. ./contrib/llvm-project/libcxx/include/list:588: DB::ExecutionThreadContext::executeTask() @ 0x0000000019cec6ea\r\n20. ./build_docker/./src/Processors/Executors/PipelineExecutor.cpp:272: DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x0000000019cddb83\r\n21. ./build_docker/./src/Processors/Executors/PipelineExecutor.cpp:380: void std::__function::__policy_invoker<void ()>::__call_impl<std::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreads()::$_0, void ()>>(std::__function::__policy_storage const*) @ 0x0000000019cdec93\r\n22. ./base/base/../base/wide_integer_impl.h:817: ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::worker(std::__list_iterator<ThreadFromGlobalPoolImpl<false, true>, void*>) @ 0x000000000f8ae5bc\r\n23. ./build_docker/./src/Common/ThreadPool.cpp:0: ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::scheduleImpl<void>(std::function<void ()>, Priority, std::optional<unsigned long>, bool)::'lambda0'()>(void&&)::'lambda'()::operator()() @ 0x000000000f8b2ec3\r\n24. ./contrib/llvm-project/libcxx/include/__functional/function.h:717: ? @ 0x000000000f8b2e02\r\n25. ./base/base/../base/wide_integer_impl.h:817: ThreadPoolImpl<std::thread>::worker(std::__list_iterator<std::thread, void*>) @ 0x000000000f8aa5e4\r\n26. ./contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:302: void* std::__thread_proxy[abi:v15007]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, Priority, std::optional<unsigned long>, bool)::'lambda0'()>>(void*) @ 0x000000000f8b0cb2\r\n27. __tsan_thread_start_func @ 0x0000000007343f2f\r\n28. ? @ 0x00007f91fd8b31cf\r\n29. ? @ 0x00007f91fd9346ec\r\n\r\nzsh: IOT instruction (core dumped)  ./clickhouse local -q\r\n```\n",
  "hints_text": "The query is from the test:\r\nhttps://github.com/ClickHouse/ClickHouse/blob/7854e807dd6b99faab3ac7d604fef3c52f555148/tests/queries/0_stateless/02895_npy_format.sh#L54",
  "created_at": "2024-07-12T18:13:33Z",
  "modified_files": [
    "src/Processors/Formats/Impl/NpyRowInputFormat.cpp"
  ],
  "modified_test_files": [
    "tests/queries/0_stateless/02895_npy_format.reference",
    "tests/queries/0_stateless/02895_npy_format.sh"
  ]
}