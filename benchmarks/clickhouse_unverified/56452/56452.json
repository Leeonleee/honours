{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 56452,
  "instance_id": "ClickHouse__ClickHouse-56452",
  "issue_numbers": [
    "56417"
  ],
  "base_commit": "788c66027c3f099b0d2c3881db2fa704396d48f3",
  "patch": "diff --git a/src/Processors/QueryPlan/PartsSplitter.cpp b/src/Processors/QueryPlan/PartsSplitter.cpp\nindex 90f6f49826c7..8bf877cf8b94 100644\n--- a/src/Processors/QueryPlan/PartsSplitter.cpp\n+++ b/src/Processors/QueryPlan/PartsSplitter.cpp\n@@ -241,10 +241,6 @@ ASTs buildFilters(const KeyDescription & primary_key, const std::vector<Values>\n         ASTs values_ast;\n         for (size_t i = 0; i < values.size(); ++i)\n         {\n-            /// NULL is treated as a terminator for > comparison.\n-            if (values[i].isNull())\n-                break;\n-\n             const auto & type = primary_key.data_types.at(i);\n \n             // PK may contain functions of the table columns, so we need the actual PK AST with all expressions it contains.\n@@ -255,25 +251,31 @@ ASTs buildFilters(const KeyDescription & primary_key, const std::vector<Values>\n             if (type->isNullable())\n             {\n                 pks_ast.push_back(makeASTFunction(\"isNull\", pk_ast));\n-                values_ast.push_back(std::make_shared<ASTLiteral>(0));\n+                values_ast.push_back(std::make_shared<ASTLiteral>(values[i].isNull() ? 1 : 0));\n                 pk_ast = makeASTFunction(\"assumeNotNull\", pk_ast);\n             }\n \n-            ASTPtr component_ast = std::make_shared<ASTLiteral>(values[i]);\n-            auto decayed_type = removeNullable(removeLowCardinality(primary_key.data_types.at(i)));\n-            // Values of some types (e.g. Date, DateTime) are stored in columns as numbers and we get them as just numbers from the index.\n-            // So we need an explicit Cast for them.\n-            if (isColumnedAsNumber(decayed_type->getTypeId()) && !isNumber(decayed_type->getTypeId()))\n-                component_ast = makeASTFunction(\"cast\", std::move(component_ast), std::make_shared<ASTLiteral>(decayed_type->getName()));\n+            pks_ast.push_back(pk_ast);\n \n-            pks_ast.push_back(std::move(pk_ast));\n-            values_ast.push_back(std::move(component_ast));\n+            // If value is null, the comparison is already complete by looking at the null mask column.\n+            // Here we put the pk_ast as a placeholder: (pk_null_mask, pk_ast_not_null) > (value_is_null?, pk_ast_not_null).\n+            if (values[i].isNull())\n+            {\n+                values_ast.push_back(pk_ast);\n+            }\n+            else\n+            {\n+                ASTPtr component_ast = std::make_shared<ASTLiteral>(values[i]);\n+                auto decayed_type = removeNullable(removeLowCardinality(primary_key.data_types.at(i)));\n+                // Values of some types (e.g. Date, DateTime) are stored in columns as numbers and we get them as just numbers from the index.\n+                // So we need an explicit Cast for them.\n+                if (isColumnedAsNumber(decayed_type->getTypeId()) && !isNumber(decayed_type->getTypeId()))\n+                    component_ast = makeASTFunction(\"cast\", std::move(component_ast), std::make_shared<ASTLiteral>(decayed_type->getName()));\n+\n+                values_ast.push_back(std::move(component_ast));\n+            }\n         }\n \n-        /// It indicates (pk1, ...) > (NULL, ...), which is an always false predicate.\n-        if (pks_ast.empty())\n-            return std::make_shared<ASTLiteral>(0u);\n-\n         ASTPtr pk_columns_as_tuple = makeASTFunction(\"tuple\", pks_ast);\n         ASTPtr values_as_tuple = makeASTFunction(\"tuple\", values_ast);\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02867_nullable_primary_key_final.reference b/tests/queries/0_stateless/02867_nullable_primary_key_final.reference\nindex 2e55b120f6eb..035932e1bb4a 100644\n--- a/tests/queries/0_stateless/02867_nullable_primary_key_final.reference\n+++ b/tests/queries/0_stateless/02867_nullable_primary_key_final.reference\n@@ -1,2 +1,3 @@\n 2023-09-01\t2500000000\n 2023-09-01\t166167\n+10\ndiff --git a/tests/queries/0_stateless/02867_nullable_primary_key_final.sql b/tests/queries/0_stateless/02867_nullable_primary_key_final.sql\nindex 05677789459f..773a6d35b8d0 100644\n--- a/tests/queries/0_stateless/02867_nullable_primary_key_final.sql\n+++ b/tests/queries/0_stateless/02867_nullable_primary_key_final.sql\n@@ -55,3 +55,11 @@ WHERE f2 = 'x'\n GROUP BY 1;\n \n DROP TABLE t;\n+\n+CREATE TABLE t (o Nullable(String), p Nullable(String)) ENGINE = ReplacingMergeTree ORDER BY (p, o) SETTINGS allow_nullable_key = 1, index_granularity = 2;\n+\n+INSERT INTO t SELECT number, NULL FROM numbers(10);\n+\n+SELECT count() FROM t FINAL;\n+\n+DROP TABLE t;\n",
  "problem_statement": "allow_nullable_key + Final = incorrect result\n```sql\r\nCREATE TABLE t (\r\n o Nullable(String),\r\n p Nullable(String)\r\n) ENGINE = ReplacingMergeTree\r\nORDER BY (p, o)\r\nSETTINGS allow_nullable_key = 1, index_granularity = 2;\r\n\r\ninsert into t select number, null from numbers(10);\r\n\r\nselect count() from t format Pretty;\r\n+---------+\r\n| count() |\r\n+---------+\r\n|      10 |\r\n+---------+\r\n\r\nselect count() from t FINAL format Pretty;\r\n+---------+\r\n| count() |\r\n+---------+\r\n|       4 | --<<<--- expected the same result = 10\r\n+---------+\r\n```\r\n\r\nhttps://fiddle.clickhouse.com/14cc46e6-ca3a-4e85-9568-9b4df3fb1567\r\n\r\n23.8 https://fiddle.clickhouse.com/048a71e8-52f5-4e81-a5fa-e3d6aa9fd946\r\n\r\n```\r\nselect count() from t FINAL format Pretty;\r\n+---------+\r\n| count() |\r\n+---------+\r\n|       0 |\r\n+---------+\r\n```\r\n\r\n21.8 -- correct result https://fiddle.clickhouse.com/a10eeea9-991d-4716-b4c0-6b4ed4e59673\r\n\r\nmore repro https://fiddle.clickhouse.com/d3e1d257-e233-455a-a282-1bb43cec904b\n",
  "hints_text": "`allow_nullable_key` is such an abomination.",
  "created_at": "2023-11-08T09:15:24Z",
  "modified_files": [
    "src/Processors/QueryPlan/PartsSplitter.cpp"
  ],
  "modified_test_files": [
    "tests/queries/0_stateless/02867_nullable_primary_key_final.reference",
    "tests/queries/0_stateless/02867_nullable_primary_key_final.sql"
  ]
}