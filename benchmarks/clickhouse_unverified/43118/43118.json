{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 43118,
  "instance_id": "ClickHouse__ClickHouse-43118",
  "issue_numbers": [
    "43101"
  ],
  "base_commit": "c92e91b54b439012bd9be67a97cac4fd3309fc97",
  "patch": "diff --git a/src/Analyzer/Passes/NormalizeCountVariantsPass.cpp b/src/Analyzer/Passes/NormalizeCountVariantsPass.cpp\nindex 8c92ecc3900a..b91fc94e6cd7 100644\n--- a/src/Analyzer/Passes/NormalizeCountVariantsPass.cpp\n+++ b/src/Analyzer/Passes/NormalizeCountVariantsPass.cpp\n@@ -33,18 +33,27 @@ class NormalizeCountVariantsVisitor : public InDepthQueryTreeVisitor<NormalizeCo\n \n         if (function_node->getFunctionName() == \"count\" && !first_argument_constant_literal.isNull())\n         {\n+            resolveAsCountAggregateFunction(*function_node);\n             function_node->getArguments().getNodes().clear();\n         }\n-        else if (function_node->getFunctionName() == \"sum\" && first_argument_constant_literal.getType() == Field::Types::UInt64 &&\n+        else if (function_node->getFunctionName() == \"sum\" &&\n+            first_argument_constant_literal.getType() == Field::Types::UInt64 &&\n             first_argument_constant_literal.get<UInt64>() == 1)\n         {\n-            auto result_type = function_node->getResultType();\n-            AggregateFunctionProperties properties;\n-            auto aggregate_function = AggregateFunctionFactory::instance().get(\"count\", {}, {}, properties);\n-            function_node->resolveAsAggregateFunction(std::move(aggregate_function), std::move(result_type));\n+            resolveAsCountAggregateFunction(*function_node);\n             function_node->getArguments().getNodes().clear();\n         }\n     }\n+private:\n+    static inline void resolveAsCountAggregateFunction(FunctionNode & function_node)\n+    {\n+        auto function_result_type = function_node.getResultType();\n+\n+        AggregateFunctionProperties properties;\n+        auto aggregate_function = AggregateFunctionFactory::instance().get(\"count\", {}, {}, properties);\n+\n+        function_node.resolveAsAggregateFunction(std::move(aggregate_function), std::move(function_result_type));\n+    }\n };\n \n }\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02479_analyzer_aggregation_crash.reference b/tests/queries/0_stateless/02479_analyzer_aggregation_crash.reference\nnew file mode 100644\nindex 000000000000..73d811f75f34\n--- /dev/null\n+++ b/tests/queries/0_stateless/02479_analyzer_aggregation_crash.reference\n@@ -0,0 +1,2 @@\n+10\t123456789\n+10\t123456789\ndiff --git a/tests/queries/0_stateless/02479_analyzer_aggregation_crash.sql b/tests/queries/0_stateless/02479_analyzer_aggregation_crash.sql\nnew file mode 100644\nindex 000000000000..c931a3ab6343\n--- /dev/null\n+++ b/tests/queries/0_stateless/02479_analyzer_aggregation_crash.sql\n@@ -0,0 +1,13 @@\n+SET allow_experimental_analyzer = 1;\n+SET compile_aggregate_expressions = 1;\n+SET min_count_to_compile_aggregate_expression = 0;\n+\n+DROP TABLE IF EXISTS lc_00906__fuzz_46;\n+CREATE TABLE lc_00906__fuzz_46 (`b` Int64) ENGINE = MergeTree ORDER BY b;\n+INSERT INTO lc_00906__fuzz_46 SELECT '0123456789' FROM numbers(10);\n+\n+SELECT count(3.4028234663852886e38), b FROM lc_00906__fuzz_46 GROUP BY b;\n+\n+SELECT count(1), b FROM lc_00906__fuzz_46 GROUP BY b;\n+\n+DROP TABLE lc_00906__fuzz_46;\n",
  "problem_statement": "Sigsegv Interpreters/Aggregator.cpp in memory sanitiser build\nBuild from master with memory sanitiser. Enabled analyzer.\r\nI run queries with SQLancer and server crashed. Same stack traces are reported from 3 threads but they are the same.\r\nI could not reproduce error by running the same query after server restart. Probably some data race?\r\n\r\n\r\n```\r\n2022.11.09 21:19:55.754257 [ 590431 ] {} <Fatal> BaseDaemon: ########################################\r\n2022.11.09 21:19:55.754463 [ 590431 ] {} <Fatal> BaseDaemon: (version 22.11.1.1, build id: 1A0CF0D623D74E69E4B6392E62612FD583BED321) (from thread 590424) (query_id: ee741a39-2222-4e9d-a276-7d3c85c5c5f4) (query: SELECT COUNT(-1361338261) FROM t3 GROUP BY t3.c0 SETTINGS aggregate_functions_null_for_empty=1, enable_optimize_predicate_expression=0) Received signal Segmentation fault (11)\r\n2022.11.09 21:19:55.754672 [ 590431 ] {} <Fatal> BaseDaemon: Address: NULL pointer. Access: read. Address not mapped to object.\r\n2022.11.09 21:19:55.754806 [ 590431 ] {} <Fatal> BaseDaemon: Stack trace: 0x4116a75d 0x40c03a53 0x40c0f8af 0x488baa42 0x488b39da 0x480aef58 0x48075a9d 0x4807b892 0x27d5848d 0x27d663a3 0x7f558c6fe609 0x7f558c623163\r\n2022.11.09 21:19:56.837904 [ 590431 ] {} <Fatal> BaseDaemon: 4. ./build_docker/../src/Interpreters/Aggregator.cpp:1220: void DB::Aggregator::executeImplBatch<false, true, false, DB::AggregationMethodStringNoCache<StringHashMap<char*, Allocator<true, true>>>>(DB::AggregationMethodStringNoCache<StringHashMap<char*, Allocator<true, true>>>&, DB::AggregationMethodStringNoCache<StringHashMap<char*, Allocator<true, true>>>::State&, DB::Arena*, unsigned long, unsigned long, DB::Aggregator::AggregateFunctionInstruction*, char*) const @ 0x4116a75d in /home/ubuntu/memory-ch/clickhouse\r\n2022.11.09 21:20:00.061769 [ 590431 ] {} <Fatal> BaseDaemon: 5.1. inlined from ./build_docker/../src/Interpreters/Aggregator.cpp:1021: void DB::Aggregator::executeImpl<DB::AggregationMethodStringNoCache<StringHashMap<char*, Allocator<true, true>>>>(DB::AggregationMethodStringNoCache<StringHashMap<char*, Allocator<true, true>>>&, DB::Arena*, unsigned long, unsigned long, std::__1::vector<DB::IColumn const*, std::__1::allocator<DB::IColumn const*>>&, DB::Aggregator::AggregateFunctionInstruction*, bool, char*) const\r\n2022.11.09 21:20:00.061964 [ 590431 ] {} <Fatal> BaseDaemon: 5. ./build_docker/../src/Interpreters/Aggregator.cpp:987: DB::Aggregator::executeImpl(DB::AggregatedDataVariants&, unsigned long, unsigned long, std::__1::vector<DB::IColumn const*, std::__1::allocator<DB::IColumn const*>>&, DB::Aggregator::AggregateFunctionInstruction*, bool, char*) const @ 0x40c03a53 in /home/ubuntu/memory-ch/clickhouse\r\n2022.11.09 21:20:04.587204 [ 590431 ] {} <Fatal> BaseDaemon: 6. ./build_docker/../src/Interpreters/Aggregator.cpp:1532: DB::Aggregator::executeOnBlock(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>, unsigned long, unsigned long, DB::AggregatedDataVariants&, std::__1::vector<DB::IColumn const*, std::__1::allocator<DB::IColumn const*>>&, std::__1::vector<std::__1::vector<DB::IColumn const*, std::__1::allocator<DB::IColumn const*>>, std::__1::allocator<std::__1::vector<DB::IColumn const*, std::__1::allocator<DB::IColumn const*>>>>&, bool&) const @ 0x40c0f8af in /home/ubuntu/memory-ch/clickhouse\r\n2022.11.09 21:20:05.030638 [ 590431 ] {} <Fatal> BaseDaemon: 7. ./build_docker/../src/Processors/Transforms/AggregatingTransform.cpp:533: DB::AggregatingTransform::consume(DB::Chunk) @ 0x488baa42 in /home/ubuntu/memory-ch/clickhouse\r\n2022.11.09 21:20:05.460506 [ 590431 ] {} <Fatal> BaseDaemon: 8. ./build_docker/../src/Processors/Transforms/AggregatingTransform.cpp:492: DB::AggregatingTransform::work() @ 0x488b39da in /home/ubuntu/memory-ch/clickhouse\r\n2022.11.09 21:20:05.505231 [ 590431 ] {} <Fatal> BaseDaemon: 9.1. inlined from ./build_docker/../src/Processors/Executors/ExecutionThreadContext.cpp:0: DB::executeJob(DB::ExecutingGraph::Node*, DB::ReadProgressCallback*)\r\n2022.11.09 21:20:05.505347 [ 590431 ] {} <Fatal> BaseDaemon: 9. ./build_docker/../src/Processors/Executors/ExecutionThreadContext.cpp:92: DB::ExecutionThreadContext::executeTask() @ 0x480aef58 in /home/ubuntu/memory-ch/clickhouse\r\n2022.11.09 21:20:05.667828 [ 590431 ] {} <Fatal> BaseDaemon: 10. ./build_docker/../src/Processors/Executors/PipelineExecutor.cpp:229: DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*) @ 0x48075a9d in /home/ubuntu/memory-ch/clickhouse\r\n2022.11.09 21:20:05.857874 [ 590431 ] {} <Fatal> BaseDaemon: 11.1. inlined from ./build_docker/../src/Common/ThreadPool.h:197: operator()\r\n2022.11.09 21:20:05.858104 [ 590431 ] {} <Fatal> BaseDaemon: 11.2. inlined from ./build_docker/../contrib/libcxx/include/__functional/invoke.h:394: decltype(std::declval<DB::PipelineExecutor::spawnThreads()::$_0>()()) std::__1::__invoke[abi:v15003]<ThreadFromGlobalPoolImpl<true>::ThreadFromGlobalPoolImpl<DB::PipelineExecutor::spawnThreads()::$_0>(DB::PipelineExecutor::spawnThreads()::$_0&&)::'lambda'()&>(DB::PipelineExecutor::spawnThreads()::$_0&&)\r\n2022.11.09 21:20:05.858259 [ 590431 ] {} <Fatal> BaseDaemon: 11.3. inlined from ./build_docker/../contrib/libcxx/include/__functional/invoke.h:479: void std::__1::__invoke_void_return_wrapper<void, true>::__call<ThreadFromGlobalPoolImpl<true>::ThreadFromGlobalPoolImpl<DB::PipelineExecutor::spawnThreads()::$_0>(DB::PipelineExecutor::spawnThreads()::$_0&&)::'lambda'()&>(ThreadFromGlobalPoolImpl<true>::ThreadFromGlobalPoolImpl<DB::PipelineExecutor::spawnThreads()::$_0>(DB::PipelineExecutor::spawnThreads()::$_0&&)::'lambda'()&)\r\n2022.11.09 21:20:05.858398 [ 590431 ] {} <Fatal> BaseDaemon: 11.4. inlined from ./build_docker/../contrib/libcxx/include/__functional/function.h:235: std::__1::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<true>::ThreadFromGlobalPoolImpl<DB::PipelineExecutor::spawnThreads()::$_0>(DB::PipelineExecutor::spawnThreads()::$_0&&)::'lambda'(), void ()>::operator()[abi:v15003]()\r\n2022.11.09 21:20:05.858464 [ 590431 ] {} <Fatal> BaseDaemon: 11. ./build_docker/../contrib/libcxx/include/__functional/function.h:716: void std::__1::__function::__policy_invoker<void ()>::__call_impl<std::__1::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<true>::ThreadFromGlobalPoolImpl<DB::PipelineExecutor::spawnThreads()::$_0>(DB::PipelineExecutor::spawnThreads()::$_0&&)::'lambda'(), void ()>>(std::__1::__function::__policy_storage const*) @ 0x4807b892 in /home/ubuntu/memory-ch/clickhouse\r\n2022.11.09 21:20:05.990310 [ 590431 ] {} <Fatal> BaseDaemon: 12. ./build_docker/../contrib/libcxx/include/__functional/function.h:0: ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>) @ 0x27d5848d in /home/ubuntu/memory-ch/clickhouse\r\n2022.11.09 21:20:06.153378 [ 590431 ] {} <Fatal> BaseDaemon: 13. ./build_docker/../src/Common/ThreadPool.cpp:0: void* std::__1::__thread_proxy[abi:v15003]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, long, std::__1::optional<unsigned long>, bool)::'lambda0'()>>(void*) @ 0x27d663a3 in /home/ubuntu/memory-ch/clickhouse\r\n2022.11.09 21:20:06.153552 [ 590431 ] {} <Fatal> BaseDaemon: 14. ? @ 0x7f558c6fe609 in ?\r\n2022.11.09 21:20:06.153625 [ 590431 ] {} <Fatal> BaseDaemon: 15. __clone @ 0x7f558c623163 in ?\r\n2022.11.09 21:20:08.939618 [ 590431 ] {} <Fatal> BaseDaemon: Integrity check of the executable skipped because the reference checksum could not be read. (calculated checksum: 2FEF42EBB429C3871389025BFA50FD20)\r\n```\n",
  "hints_text": "Actually I was able to reproduce\r\n```\r\nCREATE TABLE database0TLPHaving.t3 (c0 String) ENGINE = Memory() ;\r\nINSERT INTO t3(c0) VALUES ('');\r\nINSERT INTO t3(c0) VALUES ('');\r\n```\r\n\r\nAnd then run query several times `SELECT COUNT(-1361338261) FROM t3 GROUP BY t3.c0 SETTINGS aggregate_functions_null_for_empty=1, enable_optimize_predicate_expression=0`\r\n```\r\n(lldb) bt\r\n* thread #182, name = 'QueryPipelineEx', stop reason = signal SIGSEGV: invalid address (fault address: 0x0)\r\n  * frame #0: 0x000000004116a75d clickhouse`void DB::Aggregator::executeImplBatch<false, true, false, DB::AggregationMethodStringNoCache<StringHashMap<char*, Allocator<true, true> > > >(this=0x00007140001d0a10, method=0x0000715000143980, state=0x00007ffe30f489d8, aggregates_pool=0x00007040001fc5d8, row_begin=0, row_end=1, aggregate_instructions=0x0000707000200dc0, overflow_row=0x0000000000000000) const at Aggregator.cpp:1220:57\r\n    frame #1: 0x0000000040c03a53 clickhouse`DB::Aggregator::executeImpl(DB::AggregatedDataVariants&, unsigned long, unsigned long, std::__1::vector<DB::IColumn const*, std::__1::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, bool, char*) const at Aggregator.cpp:1021:17\r\n    frame #2: 0x0000000040c039b0 clickhouse`DB::Aggregator::executeImpl(this=0x00007140001d0a10, result=0x00007140001d1018, row_begin=0, row_end=1, key_columns=size=1, aggregate_instructions=0x0000707000200dc0, no_more_keys=<unavailable>, overflow_row=0x0000000000000000) const at Aggregator.cpp:987:5\r\n    frame #3: 0x0000000040c0f8af clickhouse`DB::Aggregator::executeOnBlock(this=0x00007140001d0a10, columns=<unavailable>, row_begin=0, row_end=1, result=0x00007140001d1018, key_columns=size=1, aggregate_columns=size=1, no_more_keys=0x00007140001d2930) const at Aggregator.cpp:1532:9\r\n    frame #4: 0x00000000488baa42 clickhouse`DB::AggregatingTransform::consume(this=0x00007140001d2818, chunk=Chunk @ 0x00007ffe30f48fb0) at AggregatingTransform.cpp:533:33\r\n    frame #5: 0x00000000488b39da clickhouse`DB::AggregatingTransform::work(this=0x00007140001d2818) at AggregatingTransform.cpp:492:9\r\n    frame #6: 0x00000000480aef58 clickhouse`DB::ExecutionThreadContext::executeTask() at ExecutionThreadContext.cpp:47:26\r\n    frame #7: 0x00000000480aef1e clickhouse`DB::ExecutionThreadContext::executeTask(this=<unavailable>) at ExecutionThreadContext.cpp:92:9\r\n    frame #8: 0x0000000048075a9d clickhouse`DB::PipelineExecutor::executeStepImpl(this=0x00007140001d0818, thread_num=<unavailable>, yield_flag=0x0000000000000000) at PipelineExecutor.cpp:229:26\r\n    frame #9: 0x000000004807b892 clickhouse`void std::__1::__function::__policy_invoker<void ()>::__call_impl<std::__1::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<true>::ThreadFromGlobalPoolImpl<DB::PipelineExecutor::spawnThreads()::$_0>(DB::PipelineExecutor::spawnThreads()::$_0&&)::'lambda'(), void ()> >(std::__1::__function::__policy_storage const*) [inlined] DB::PipelineExecutor::executeSingleThread(this=<unavailable>, thread_num=<unavailable>) at PipelineExecutor.cpp:195:5\r\n    frame #10: 0x000000004807b848 clickhouse`void std::__1::__function::__policy_invoker<void ()>::__call_impl<std::__1::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<true>::ThreadFromGlobalPoolImpl<DB::PipelineExecutor::spawnThreads()::$_0>(DB::PipelineExecutor::spawnThreads()::$_0&&)::'lambda'(), void ()> >(std::__1::__function::__policy_storage const*) [inlined] DB::PipelineExecutor::spawnThreads(this=<unavailable>)::$_0::operator()() const at PipelineExecutor.cpp:316:17\r\n    frame #11: 0x000000004807b7a0 clickhouse`void std::__1::__function::__policy_invoker<void ()>::__call_impl<std::__1::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<true>::ThreadFromGlobalPoolImpl<DB::PipelineExecutor::spawnThreads()::$_0>(DB::PipelineExecutor::spawnThreads()::$_0&&)::'lambda'(), void ()> >(std::__1::__function::__policy_storage const*) [inlined] decltype(__f=<unavailable>)::$_0&>()()) std::__1::__invoke[abi:v15003]<DB::PipelineExecutor::spawnThreads()::$_0&>(DB::PipelineExecutor::spawnThreads()::$_0&) at invoke.h:394:23\r\n    frame #12: 0x000000004807b7a0 clickhouse`void std::__1::__function::__policy_invoker<void ()>::__call_impl<std::__1::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<true>::ThreadFromGlobalPoolImpl<DB::PipelineExecutor::spawnThreads()::$_0>(DB::PipelineExecutor::spawnThreads()::$_0&&)::'lambda'(), void ()> >(std::__1::__function::__policy_storage const*) [inlined] decltype(__f=<unavailable>, __t=<unavailable>, (null)=<unavailable>) std::__1::__apply_tuple_impl[abi:v15003]<DB::PipelineExecutor::spawnThreads()::$_0&, std::__1::tuple<>&>(DB::PipelineExecutor::spawnThreads()::$_0&, std::__1::tuple<>&, std::__1::__tuple_indices<>) at tuple:1789:1\r\n    frame #13: 0x000000004807b7a0 clickhouse`void std::__1::__function::__policy_invoker<void ()>::__call_impl<std::__1::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<true>::ThreadFromGlobalPoolImpl<DB::PipelineExecutor::spawnThreads()::$_0>(DB::PipelineExecutor::spawnThreads()::$_0&&)::'lambda'(), void ()> >(std::__1::__function::__policy_storage const*) [inlined] decltype(__f=<unavailable>, __t=<unavailable>) std::__1::apply[abi:v15003]<DB::PipelineExecutor::spawnThreads()::$_0&, std::__1::tuple<>&>(DB::PipelineExecutor::spawnThreads()::$_0&, std::__1::tuple<>&) at tuple:1798:1\r\n    frame #14: 0x000000004807b7a0 clickhouse`void std::__1::__function::__policy_invoker<void ()>::__call_impl<std::__1::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<true>::ThreadFromGlobalPoolImpl<DB::PipelineExecutor::spawnThreads()::$_0>(DB::PipelineExecutor::spawnThreads()::$_0&&)::'lambda'(), void ()> >(std::__1::__function::__policy_storage const*) [inlined] ThreadFromGlobalPoolImpl<true>::ThreadFromGlobalPoolImpl<DB::PipelineExecutor::spawnThreads(this=<unavailable>)::$_0>(DB::PipelineExecutor::spawnThreads()::$_0&&)::'lambda'()::operator()() at ThreadPool.h:196:13\r\n    frame #15: 0x000000004807b5ab clickhouse`void std::__1::__function::__policy_invoker<void ()>::__call_impl<std::__1::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<true>::ThreadFromGlobalPoolImpl<DB::PipelineExecutor::spawnThreads()::$_0>(DB::PipelineExecutor::spawnThreads()::$_0&&)::'lambda'(), void ()> >(std::__1::__function::__policy_storage const*) [inlined] decltype(__f=<unavailable>)::$_0>()()) std::__1::__invoke[abi:v15003]<ThreadFromGlobalPoolImpl<true>::ThreadFromGlobalPoolImpl<DB::PipelineExecutor::spawnThreads()::$_0>(DB::PipelineExecutor::spawnThreads()::$_0&&)::'lambda'()&>(DB::PipelineExecutor::spawnThreads()::$_0&&) at invoke.h:394:23\r\n    frame #16: 0x000000004807b5ab clickhouse`void std::__1::__function::__policy_invoker<void ()>::__call_impl<std::__1::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<true>::ThreadFromGlobalPoolImpl<DB::PipelineExecutor::spawnThreads()::$_0>(DB::PipelineExecutor::spawnThreads()::$_0&&)::'lambda'(), void ()> >(std::__1::__function::__policy_storage const*) [inlined] void std::__1::__invoke_void_return_wrapper<void, true>::__call<ThreadFromGlobalPoolImpl<true>::ThreadFromGlobalPoolImpl<DB::PipelineExecutor::spawnThreads(__args=<unavailable>)::$_0>(DB::PipelineExecutor::spawnThreads()::$_0&&)::'lambda'()&>(ThreadFromGlobalPoolImpl<true>::ThreadFromGlobalPoolImpl<DB::PipelineExecutor::spawnThreads()::$_0>(DB::PipelineExecutor::spawnThreads()::$_0&&)::'lambda'()&) at invoke.h:479:9\r\n    frame #17: 0x000000004807b5ab clickhouse`void std::__1::__function::__policy_invoker<void ()>::__call_impl<std::__1::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<true>::ThreadFromGlobalPoolImpl<DB::PipelineExecutor::spawnThreads()::$_0>(DB::PipelineExecutor::spawnThreads()::$_0&&)::'lambda'(), void ()> >(std::__1::__function::__policy_storage const*) [inlined] std::__1::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<true>::ThreadFromGlobalPoolImpl<DB::PipelineExecutor::spawnThreads()::$_0>(DB::PipelineExecutor::spawnThreads()::$_0&&)::'lambda'(), void ()>::operator(this=<unavailable>)[abi:v15003]() at function.h:235:12\r\n    frame #18: 0x000000004807b5ab clickhouse`void std::__1::__function::__policy_invoker<void ()>::__call_impl<std::__1::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<true>::ThreadFromGlobalPoolImpl<DB::PipelineExecutor::spawnThreads(__buf=<unavailable>)::$_0>(DB::PipelineExecutor::spawnThreads()::$_0&&)::'lambda'(), void ()> >(std::__1::__function::__policy_storage const*) at function.h:716:16\r\n    frame #19: 0x0000000027d5848d clickhouse`ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>) [inlined] std::__1::__function::__policy_func<void ()>::operator(this=0x00007ffe30f497e0)[abi:v15003]() const at function.h:848:16\r\n    frame #20: 0x0000000027d5846d clickhouse`ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>) [inlined] std::__1::function<void ()>::operator(this=0x00007ffe30f497e0)() const at function.h:1197:12\r\n    frame #21: 0x0000000027d5846d clickhouse`ThreadPoolImpl<std::__1::thread>::worker(this=0x000070f0000069f0, thread_it=std::__1::list<std::__1::thread, std::__1::allocator<std::__1::thread> >::iterator @ 0x00007ffe30f496d0) at ThreadPool.cpp:294:17\r\n    frame #22: 0x0000000027d663a3 clickhouse`void* std::__1::__thread_proxy[abi:v15003]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, long, std::__1::optional<unsigned long>, bool)::'lambda0'()> >(void*) [inlined] void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(this=<unavailable>)>, long, std::__1::optional<unsigned long>, bool)::'lambda0'()::operator()() const at ThreadPool.cpp:144:73\r\n    frame #23: 0x0000000027d6635f clickhouse`void* std::__1::__thread_proxy[abi:v15003]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, long, std::__1::optional<unsigned long>, bool)::'lambda0'()> >(void*) [inlined] decltype(__f=<unavailable>)()) std::__1::__invoke[abi:v15003]<void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, long, std::__1::optional<unsigned long>, bool)::'lambda0'()>(void&&) at invoke.h:394:23\r\n    frame #24: 0x0000000027d6635f clickhouse`void* std::__1::__thread_proxy[abi:v15003]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, long, std::__1::optional<unsigned long>, bool)::'lambda0'()> >(void*) [inlined] void std::__1::__thread_execute[abi:v15003]<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, long, std::__1::optional<unsigned long>, bool)::'lambda0'()>(__t=size=2, (null)=<unavailable>)>, long, std::__1::optional<unsigned long>, bool)::'lambda0'()>&, std::__1::__tuple_indices<>) at thread:284:5\r\n    frame #25: 0x0000000027d6635b clickhouse`void* std::__1::__thread_proxy[abi:v15003]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, long, std::__1::optional<unsigned long>, bool)::'lambda0'()> >(__vp=0x00007020000c61e0) at thread:295:5\r\n    frame #26: 0x00007ffff7f92609 libpthread.so.0`start_thread(arg=<unavailable>) at pthread_create.c:477:8\r\n    frame #27: 0x00007ffff7eb7163 libc.so.6`__clone + 67\r\n```\r\n\r\n\r\n```\r\n(lldb) fr v\r\n(const bool) skip_compiled_aggregate_functions = <no location, value may have been optimized out>\r\n\r\n(const DB::Aggregator *) this = 0x00007140001d0a10\r\n(DB::AggregationMethodStringNoCache<StringHashMap<char *, Allocator<true, true> > > &) method = 0x0000715000143980: {\r\n  data = {\r\n    StringHashTable<StringHashMapSubMaps<char *, Allocator<true, true> > > = {\r\n      m0 = {\r\n        has_zero = true\r\n        zero_value_storage = (__lx = \"\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\U00000016\\0\\0r\\0\\0\\0\\0\\0\\0\\0\\0\\0\")\r\n      }\r\n      m1 = {\r\n        HashTable<unsigned long, StringHashMapCell<unsigned long, char *>, StringHashTableHash, StringHashTableGrower<8>, Allocator<true, true> > = {\r\n          m_size = 0\r\n          buf = 0x0000720000144000\r\n          grower = {\r\n            HashTableGrowerWithPrecalculation<8> = {\r\n              size_degree = 0x08 u8'\\b'\r\n              precalculated_mask = 255\r\n              precalculated_max_fill = 128\r\n            }\r\n          }\r\n        }\r\n      }\r\n      m2 = {\r\n        HashTable<wide::integer<128, unsigned int>, StringHashMapCell<wide::integer<128, unsigned int>, char *>, StringHashTableHash, StringHashTableGrower<8>, Allocator<true, true> > = {\r\n          m_size = 0\r\n          buf = 0x00007220000c0000\r\n          grower = {\r\n            HashTableGrowerWithPrecalculation<8> = {\r\n              size_degree = 0x08 u8'\\b'\r\n              precalculated_mask = 255\r\n              precalculated_max_fill = 128\r\n            }\r\n          }\r\n        }\r\n      }\r\n      m3 = {\r\n        HashTable<StringKey24, StringHashMapCell<StringKey24, char *>, StringHashTableHash, StringHashTableGrower<8>, Allocator<true, true> > = {\r\n          m_size = 0\r\n          buf = 0x0000724000022000\r\n          grower = {\r\n            HashTableGrowerWithPrecalculation<8> = {\r\n              size_degree = 0x08 u8'\\b'\r\n              precalculated_mask = 255\r\n              precalculated_max_fill = 128\r\n            }\r\n          }\r\n        }\r\n      }\r\n      ms = {\r\n        HashTable<StringRef, StringHashMapCell<StringRef, char *>, StringHashTableHash, StringHashTableGrower<8>, Allocator<true, true> > = {\r\n          m_size = 0\r\n          buf = 0x0000724000026000\r\n          grower = {\r\n            HashTableGrowerWithPrecalculation<8> = {\r\n              size_degree = 0x08 u8'\\b'\r\n              precalculated_mask = 255\r\n              precalculated_max_fill = 128\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n(DB::AggregationMethodStringNoCache<StringHashMap<char *, Allocator<true, true> > >::State &) state = 0x00007ffe30f489d8: {\r\n  DB::ColumnsHashing::columns_hashing_impl::HashMethodBase<DB::ColumnsHashing::HashMethodString<PairNoInit<StringRef, char *>, char *, true, false, false>, PairNoInit<StringRef, char *>, char *, false, false> = (cache = DB::ColumnsHashing::columns_hashing_impl::HashMethodBase<DB::ColumnsHashing::HashMethodString<PairNoInit<StringRef, char *>, char *, true, false, false>, PairNoInit<StringRef, char *>, char *, false, false>::Cache @ 0x00007ffe30f489d8)\r\n  offsets = 0x00007100002e0740\r\n  chars = 0x0000708000280740 u8\"\"\r\n}\r\n(DB::Arena *) aggregates_pool = 0x00007040001fc5d8\r\n(size_t) row_begin = 0\r\n(size_t) row_end = 1\r\n(DB::Aggregator::AggregateFunctionInstruction *) aggregate_instructions = 0x0000707000200dc0\r\n(DB::AggregateDataPtr) overflow_row = 0x0000000000000000\r\n(std::unique_ptr<char *[], std::default_delete<char *[]> >) places = \"\" {\r\n  __value_ = 0x0000701000096690\r\n}\r\n(DB::PrefetchingHelper) prefetching = {\r\n  watch = (start_ns = 0, stop_ns = 0, clock_type = 1, is_running = true)\r\n}\r\n(size_t) prefetch_look_ahead = <no location, value may have been optimized out>\r\n\r\n(std::vector<DB::ColumnData, std::allocator<DB::ColumnData> >) columns_data = size=0 {}\r\n(DB::JITAddIntoAggregateStatesFunction) add_into_aggregate_states_function = <variable not available>\r\n\r\n(size_t) i = 0\r\n(DB::Aggregator::AggregateFunctionInstruction *) inst = <variable not available>\r\n\r\n(size_t) arguments_size = <variable not available>\r\n\r\n(size_t) argument_index = 0\r\n```\r\n\n@kitaisreal It may be interesting for you as JIT is involved.\r\n\r\nversion built d02d1fd4892fac1151977b7a73122bfdd96f3e8c\r\nI get msan build via packager\r\n```~/clickhouse/docker/packager/packager --compiler clang-15 --package-type deb --output-dir ~/memory-ch/ --clickhouse-repo-path ~/clickhouse --ccache_dir ~/docker-ch/local_ccache/ --cache ccache --with-binaries programs --sanitizer memory | tee ~/packager.log```\nOur fuzzer already found this https://s3.amazonaws.com/clickhouse-test-reports/43089/5a8c62ee0140b9bed9460bdd5d146116c91ebe02/fuzzer_astfuzzerasan//report.html.\r\nReproducible example:\r\n```sql\r\nCREATE TABLE lc_00906__fuzz_46 (`b` Int64) ENGINE = MergeTree ORDER BY b;\r\nINSERT INTO lc_00906__fuzz_46 SELECT '0123456789' FROM numbers(100000000);\r\nSELECT count(3.4028234663852886e38), b FROM lc_00906__fuzz_46 GROUP BY b SETTINGS allow_experimental_analyzer = 1;\r\n```\nSame\r\n```\r\n2022.11.09 21:48:42.048746 [ 593738 ] {} <Fatal> BaseDaemon: ########################################\r\n2022.11.09 21:48:42.055343 [ 593738 ] {} <Fatal> BaseDaemon: (version 22.11.1.1, build id: 1A0CF0D623D74E69E4B6392E62612FD583BED321) (from thread 593693) (query_id: 39357a79-e68e-459d-bb45-506897fc64d3) (query: SELECT COUNT(1844676412) FROM t0 AS left GROUP BY left.c0 HAVING ((-1065660303)-(COUNT(1844676412))) UNION ALL SELECT COUNT(1844676412) FROM t0 AS left GROUP BY left.c0 HAVING (NOT (((-1065660303)-(COUNT(1844676412))))) UNION ALL SELECT COUNT(1844676412) FROM t0 AS left GROUP BY left.c0 HAVING ((((-1065660303)-(COUNT(1844676412)))) IS NULL) SETTINGS aggregate_functions_null_for_empty=1, enable_optimize_predicate_expression=0) Received signal Segmentation fault (11)\r\n2022.11.09 21:48:42.062752 [ 593738 ] {} <Fatal> BaseDaemon: Address: NULL pointer. Access: read. Address not mapped to object.\r\n2022.11.09 21:48:42.069130 [ 593738 ] {} <Fatal> BaseDaemon: Stack trace: 0x4116a75d 0x40c03a53 0x40c0f8af 0x488baa42 0x488b39da 0x480aef58 0x48075a9d 0x4807b892 0x27d5848d 0x27d663a3 0x7ffff7f92609 0x7ffff7eb7163\r\n2022.11.09 21:48:45.342805 [ 593738 ] {} <Fatal> BaseDaemon: 4. ./build_docker/../src/Interpreters/Aggregator.cpp:1220: void DB::Aggregator::executeImplBatch<false, true, false, DB::AggregationMethodStringNoCache<StringHashMap<char*, Allocator<true, true>>>>(DB::AggregationMethodStringNoCache<StringHashMap<char*, Allocator<true, true>>>&, DB::AggregationMethodStringNoCache<StringHashMap<char*, Allocator<true, true>>>::State&, DB::Arena*, unsigned long, unsigned long, DB::Aggregator::AggregateFunctionInstruction*, char*) const @ 0x4116a75d in /home/ubuntu/memory-ch/clickhouse\r\n2022.11.09 21:48:54.835188 [ 593738 ] {} <Fatal> BaseDaemon: 5.1. inlined from ./build_docker/../src/Interpreters/Aggregator.cpp:1021: void DB::Aggregator::executeImpl<DB::AggregationMethodStringNoCache<StringHashMap<char*, Allocator<true, true>>>>(DB::AggregationMethodStringNoCache<StringHashMap<char*, Allocator<true, true>>>&, DB::Arena*, unsigned long, unsigned long, std::__1::vector<DB::IColumn const*, std::__1::allocator<DB::IColumn const*>>&, DB::Aggregator::AggregateFunctionInstruction*, bool, char*) const\r\n2022.11.09 21:48:54.836057 [ 593738 ] {} <Fatal> BaseDaemon: 5. ./build_docker/../src/Interpreters/Aggregator.cpp:987: DB::Aggregator::executeImpl(DB::AggregatedDataVariants&, unsigned long, unsigned long, std::__1::vector<DB::IColumn const*, std::__1::allocator<DB::IColumn const*>>&, DB::Aggregator::AggregateFunctionInstruction*, bool, char*) const @ 0x40c03a53 in /home/ubuntu/memory-ch/clickhouse\r\n```\r\n\r\n```\r\nProcess 593487 stopped\r\n* thread #185, name = 'QueryPipelineEx', stop reason = signal SIGSEGV: invalid address (fault address: 0x0)\r\n    frame #0: 0x000000004116a75d clickhouse`void DB::Aggregator::executeImplBatch<false, true, false, DB::AggregationMethodStringNoCache<StringHashMap<char*, Allocator<true, true> > > >(this=0x00007140001e4210, method=0x000071500020ff80, state=0x00007ffe2ee399d8, aggregates_pool=0x0000704000248f58, row_begin=0, row_end=1, aggregate_instructions=0x00007070001ff380, overflow_row=0x0000000000000000) const at Aggregator.cpp:1220:57\r\n  thread #190, name = 'QueryPipelineEx', stop reason = signal SIGSEGV: invalid address (fault address: 0x0)\r\n    frame #0: 0x000000004116a75d clickhouse`void DB::Aggregator::executeImplBatch<false, true, false, DB::AggregationMethodStringNoCache<StringHashMap<char*, Allocator<true, true> > > >(this=0x00007140001e4210, method=0x0000715000200080, state=0x00007ffe2b61c9d8, aggregates_pool=0x0000704000262d18, row_begin=0, row_end=1, aggregate_instructions=0x00007070001e5ed0, overflow_row=0x0000000000000000) const at Aggregator.cpp:1220:57\r\n  thread #192, name = 'QueryPipelineEx', stop reason = signal SIGSEGV: invalid address (fault address: 0x0)\r\n    frame #0: 0x000000004116a75d clickhouse`void DB::Aggregator::executeImplBatch<false, true, false, DB::AggregationMethodStringNoCache<StringHashMap<char*, Allocator<true, true> > > >(this=0x00007140001e4210, method=0x00007150001eff00, state=0x00007ffe29f109d8, aggregates_pool=0x000070400029ec98, row_begin=0, row_end=3, aggregate_instructions=0x0000707000210870, overflow_row=0x0000000000000000) const at Aggregator.cpp:1220:57\r\n  thread #194, name = 'QueryPipelineEx', stop reason = signal SIGSEGV: invalid address (fault address: 0x0)\r\n    frame #0: 0x000000004116a75d clickhouse`void DB::Aggregator::executeImplBatch<false, true, false, DB::AggregationMethodStringNoCache<StringHashMap<char*, Allocator<true, true> > > >(this=0x00007140001e6810, method=0x00007150001cfe80, state=0x00007ffe289069d8, aggregates_pool=0x0000704000220fd8, row_begin=0, row_end=1, aggregate_instructions=0x000070700017d090, overflow_row=0x0000000000000000) const at Aggregator.cpp:1220:57\r\n  thread #195, name = 'QueryPipelineEx', stop reason = signal SIGSEGV: invalid address (fault address: 0x0)\r\n    frame #0: 0x000000004116a75d clickhouse`void DB::Aggregator::executeImplBatch<false, true, false, DB::AggregationMethodStringNoCache<StringHashMap<char*, Allocator<true, true> > > >(this=0x00007140001e6810, method=0x00007150001e0000, state=0x00007ffe27cff9d8, aggregates_pool=0x00007040001badd8, row_begin=0, row_end=1, aggregate_instructions=0x00007070001a6760, overflow_row=0x0000000000000000) const at Aggregator.cpp:1220:57\r\n  thread #196, name = 'QueryPipelineEx', stop reason = signal SIGSEGV: invalid address (fault address: 0x0)\r\n    frame #0: 0x000000004116a75d clickhouse`void DB::Aggregator::executeImplBatch<false, true, false, DB::AggregationMethodStringNoCache<StringHashMap<char*, Allocator<true, true> > > >(this=0x00007140001e6810, method=0x000071500023ff00, state=0x00007ffe268f89d8, aggregates_pool=0x000070400029cf58, row_begin=0, row_end=2, aggregate_instructions=0x0000707000207650, overflow_row=0x0000000000000000) const at Aggregator.cpp:1220:57\r\n  thread #197, name = 'QueryPipelineEx', stop reason = signal SIGSEGV: invalid address (fault address: 0x0)\r\n    frame #0: 0x000000004116a75d clickhouse`void DB::Aggregator::executeImplBatch<false, true, false, DB::AggregationMethodStringNoCache<StringHashMap<char*, Allocator<true, true> > > >(this=0x00007140001e4210, method=0x000071500014d480, state=0x00007ffe25df39d8, aggregates_pool=0x00007040001d6d18, row_begin=0, row_end=2, aggregate_instructions=0x00007070001eb260, overflow_row=0x0000000000000000) const at Aggregator.cpp:1220:57\r\n  thread #209, name = 'QueryPipelineEx', stop reason = signal SIGSEGV: invalid address (fault address: 0x0)\r\n    frame #0: 0x000000004116a75d clickhouse`void DB::Aggregator::executeImplBatch<false, true, false, DB::AggregationMethodStringNoCache<StringHashMap<char*, Allocator<true, true> > > >(this=0x00007140001e6810, method=0x00007150000f0a00, state=0x00007ffe192a99d8, aggregates_pool=0x00007040001e2f58, row_begin=0, row_end=2, aggregate_instructions=0x00007070000590f0, overflow_row=0x0000000000000000) const at Aggregator.cpp:1220:57\r\n  thread #211, name = 'QueryPipelineEx', stop reason = signal SIGSEGV: invalid address (fault address: 0x0)\r\n    frame #0: 0x000000004116a75d clickhouse`void DB::Aggregator::executeImplBatch<false, true, false, DB::AggregationMethodStringNoCache<StringHashMap<char*, Allocator<true, true> > > >(this=0x00007140001e4210, method=0x00007150000da200, state=0x00007ffe17fa39d8, aggregates_pool=0x00007040002a2e58, row_begin=0, row_end=2, aggregate_instructions=0x00007070000460e0, overflow_row=0x0000000000000000) const at Aggregator.cpp:1220:57\r\n  thread #212, name = 'QueryPipelineEx', stop reason = signal SIGSEGV: invalid address (fault address: 0x0)\r\n    frame #0: 0x000000004116a75d clickhouse`void DB::Aggregator::executeImplBatch<false, true, false, DB::AggregationMethodStringNoCache<StringHashMap<char*, Allocator<true, true> > > >(this=0x00007140001e6810, method=0x00007150000f7080, state=0x00007ffe1749e9d8, aggregates_pool=0x00007040001cc1d8, row_begin=0, row_end=2, aggregate_instructions=0x000070700005e250, overflow_row=0x0000000000000000) const at Aggregator.cpp:1220:57\r\n  thread #213, name = 'QueryPipelineEx', stop reason = signal SIGSEGV: invalid address (fault address: 0x0)\r\n    frame #0: 0x000000004116a75d clickhouse`void DB::Aggregator::executeImplBatch<false, true, false, DB::AggregationMethodStringNoCache<StringHashMap<char*, Allocator<true, true> > > >(this=0x00007140001e4210, method=0x00007150000be280, state=0x00007ffe169999d8, aggregates_pool=0x00007040001d4fd8, row_begin=0, row_end=2, aggregate_instructions=0x00007070000580c0, overflow_row=0x0000000000000000) const at Aggregator.cpp:1220:57\r\n  thread #215, name = 'QueryPipelineEx', stop reason = signal SIGSEGV: invalid address (fault address: 0x0)\r\n    frame #0: 0x000000004116a75d clickhouse`void DB::Aggregator::executeImplBatch<false, true, false, DB::AggregationMethodStringNoCache<StringHashMap<char*, Allocator<true, true> > > >(this=0x00007140001e6810, method=0x00007150000d3400, state=0x00007ffe148ca9d8, aggregates_pool=0x00007040002a6f98, row_begin=0, row_end=3, aggregate_instructions=0x000070700005a510, overflow_row=0x0000000000000000) const at Aggregator.cpp:1220:57\r\n(lldb) bt\r\n* thread #185, name = 'QueryPipelineEx', stop reason = signal SIGSEGV: invalid address (fault address: 0x0)\r\n  * frame #0: 0x000000004116a75d clickhouse`void DB::Aggregator::executeImplBatch<false, true, false, DB::AggregationMethodStringNoCache<StringHashMap<char*, Allocator<true, true> > > >(this=0x00007140001e4210, method=0x000071500020ff80, state=0x00007ffe2ee399d8, aggregates_pool=0x0000704000248f58, row_begin=0, row_end=1, aggregate_instructions=0x00007070001ff380, overflow_row=0x0000000000000000) const at Aggregator.cpp:1220:57\r\n    frame #1: 0x0000000040c03a53 clickhouse`DB::Aggregator::executeImpl(DB::AggregatedDataVariants&, unsigned long, unsigned long, std::__1::vector<DB::IColumn const*, std::__1::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, bool, char*) const at Aggregator.cpp:1021:17\r\n    frame #2: 0x0000000040c039b0 clickhouse`DB::Aggregator::executeImpl(this=0x00007140001e4210, result=0x00007140001e6c18, row_begin=0, row_end=1, key_columns=size=1, aggregate_instructions=0x00007070001ff380, no_more_keys=<unavailable>, overflow_row=0x0000000000000000) const at Aggregator.cpp:987:5\r\n    frame #3: 0x0000000040c0f8af clickhouse`DB::Aggregator::executeOnBlock(this=0x00007140001e4210, columns=<unavailable>, row_begin=0, row_end=1, result=0x00007140001e6c18, key_columns=size=1, aggregate_columns=size=1, no_more_keys=0x00007140001e1130) const at Aggregator.cpp:1532:9\r\n    frame #4: 0x00000000488baa42 clickhouse`DB::AggregatingTransform::consume(this=0x00007140001e1018, chunk=Chunk @ 0x00007ffe2ee39fb0) at AggregatingTransform.cpp:533:33\r\n    frame #5: 0x00000000488b39da clickhouse`DB::AggregatingTransform::work(this=0x00007140001e1018) at AggregatingTransform.cpp:492:9\r\n    frame #6: 0x00000000480aef58 clickhouse`DB::ExecutionThreadContext::executeTask() at ExecutionThreadContext.cpp:47:26\r\n    frame #7: 0x00000000480aef1e clickhouse`DB::ExecutionThreadContext::executeTask(this=<unavailable>) at ExecutionThreadContext.cpp:92:9\r\n    frame #8: 0x0000000048075a9d clickhouse`DB::PipelineExecutor::executeStepImpl(this=0x00007ffff3b0c918, thread_num=<unavailable>, yield_flag=0x0000000000000000) at PipelineExecutor.cpp:229:26\r\n    frame #9: 0x000000004807b892 clickhouse`void std::__1::__function::__policy_invoker<void ()>::__call_impl<std::__1::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<true>::ThreadFromGlobalPoolImpl<DB::PipelineExecutor::spawnThreads()::$_0>(DB::PipelineExecutor::spawnThreads()::$_0&&)::'lambda'(), void ()> >(std::__1::__function::__policy_storage const*) [inlined] DB::PipelineExecutor::executeSingleThread(this=<unavailable>, thread_num=<unavailable>) at PipelineExecutor.cpp:195:5\r\n    frame #10: 0x000000004807b848 clickhouse`void std::__1::__function::__policy_invoker<void ()>::__call_impl<std::__1::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<true>::ThreadFromGlobalPoolImpl<DB::PipelineExecutor::spawnThreads()::$_0>(DB::PipelineExecutor::spawnThreads()::$_0&&)::'lambda'(), void ()> >(std::__1::__function::__policy_storage const*) [inlined] DB::PipelineExecutor::spawnThreads(this=<unavailable>)::$_0::operator()() const at PipelineExecutor.cpp:316:17\r\n    frame #11: 0x000000004807b7a0 clickhouse`void std::__1::__function::__policy_invoker<void ()>::__call_impl<std::__1::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<true>::ThreadFromGlobalPoolImpl<DB::PipelineExecutor::spawnThreads()::$_0>(DB::PipelineExecutor::spawnThreads()::$_0&&)::'lambda'(), void ()> >(std::__1::__function::__policy_storage const*) [inlined] decltype(__f=<unavailable>)::$_0&>()()) std::__1::__invoke[abi:v15003]<DB::PipelineExecutor::spawnThreads()::$_0&>(DB::PipelineExecutor::spawnThreads()::$_0&) at invoke.h:394:23\r\n    frame #12: 0x000000004807b7a0 clickhouse`void std::__1::__function::__policy_invoker<void ()>::__call_impl<std::__1::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<true>::ThreadFromGlobalPoolImpl<DB::PipelineExecutor::spawnThreads()::$_0>(DB::PipelineExecutor::spawnThreads()::$_0&&)::'lambda'(), void ()> >(std::__1::__function::__policy_storage const*) [inlined] decltype(__f=<unavailable>, __t=<unavailable>, (null)=<unavailable>) std::__1::__apply_tuple_impl[abi:v15003]<DB::PipelineExecutor::spawnThreads()::$_0&, std::__1::tuple<>&>(DB::PipelineExecutor::spawnThreads()::$_0&, std::__1::tuple<>&, std::__1::__tuple_indices<>) at tuple:1789:1\r\n    frame #13: 0x000000004807b7a0 clickhouse`void std::__1::__function::__policy_invoker<void ()>::__call_impl<std::__1::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<true>::ThreadFromGlobalPoolImpl<DB::PipelineExecutor::spawnThreads()::$_0>(DB::PipelineExecutor::spawnThreads()::$_0&&)::'lambda'(), void ()> >(std::__1::__function::__policy_storage const*) [inlined] decltype(__f=<unavailable>, __t=<unavailable>) std::__1::apply[abi:v15003]<DB::PipelineExecutor::spawnThreads()::$_0&, std::__1::tuple<>&>(DB::PipelineExecutor::spawnThreads()::$_0&, std::__1::tuple<>&) at tuple:1798:1\r\n    frame #14: 0x000000004807b7a0 clickhouse`void std::__1::__function::__policy_invoker<void ()>::__call_impl<std::__1::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<true>::ThreadFromGlobalPoolImpl<DB::PipelineExecutor::spawnThreads()::$_0>(DB::PipelineExecutor::spawnThreads()::$_0&&)::'lambda'(), void ()> >(std::__1::__function::__policy_storage const*) [inlined] ThreadFromGlobalPoolImpl<true>::ThreadFromGlobalPoolImpl<DB::PipelineExecutor::spawnThreads(this=<unavailable>)::$_0>(DB::PipelineExecutor::spawnThreads()::$_0&&)::'lambda'()::operator()() at ThreadPool.h:196:13\r\n    frame #15: 0x000000004807b5ab clickhouse`void std::__1::__function::__policy_invoker<void ()>::__call_impl<std::__1::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<true>::ThreadFromGlobalPoolImpl<DB::PipelineExecutor::spawnThreads()::$_0>(DB::PipelineExecutor::spawnThreads()::$_0&&)::'lambda'(), void ()> >(std::__1::__function::__policy_storage const*) [inlined] decltype(__f=<unavailable>)::$_0>()()) std::__1::__invoke[abi:v15003]<ThreadFromGlobalPoolImpl<true>::ThreadFromGlobalPoolImpl<DB::PipelineExecutor::spawnThreads()::$_0>(DB::PipelineExecutor::spawnThreads()::$_0&&)::'lambda'()&>(DB::PipelineExecutor::spawnThreads()::$_0&&) at invoke.h:394:23\r\n    frame #16: 0x000000004807b5ab clickhouse`void std::__1::__function::__policy_invoker<void ()>::__call_impl<std::__1::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<true>::ThreadFromGlobalPoolImpl<DB::PipelineExecutor::spawnThreads()::$_0>(DB::PipelineExecutor::spawnThreads()::$_0&&)::'lambda'(), void ()> >(std::__1::__function::__policy_storage const*) [inlined] void std::__1::__invoke_void_return_wrapper<void, true>::__call<ThreadFromGlobalPoolImpl<true>::ThreadFromGlobalPoolImpl<DB::PipelineExecutor::spawnThreads(__args=<unavailable>)::$_0>(DB::PipelineExecutor::spawnThreads()::$_0&&)::'lambda'()&>(ThreadFromGlobalPoolImpl<true>::ThreadFromGlobalPoolImpl<DB::PipelineExecutor::spawnThreads()::$_0>(DB::PipelineExecutor::spawnThreads()::$_0&&)::'lambda'()&) at invoke.h:479:9\r\n    frame #17: 0x000000004807b5ab clickhouse`void std::__1::__function::__policy_invoker<void ()>::__call_impl<std::__1::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<true>::ThreadFromGlobalPoolImpl<DB::PipelineExecutor::spawnThreads()::$_0>(DB::PipelineExecutor::spawnThreads()::$_0&&)::'lambda'(), void ()> >(std::__1::__function::__policy_storage const*) [inlined] std::__1::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<true>::ThreadFromGlobalPoolImpl<DB::PipelineExecutor::spawnThreads()::$_0>(DB::PipelineExecutor::spawnThreads()::$_0&&)::'lambda'(), void ()>::operator(this=<unavailable>)[abi:v15003]() at function.h:235:12\r\n    frame #18: 0x000000004807b5ab clickhouse`void std::__1::__function::__policy_invoker<void ()>::__call_impl<std::__1::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<true>::ThreadFromGlobalPoolImpl<DB::PipelineExecutor::spawnThreads(__buf=<unavailable>)::$_0>(DB::PipelineExecutor::spawnThreads()::$_0&&)::'lambda'(), void ()> >(std::__1::__function::__policy_storage const*) at function.h:716:16\r\n    frame #19: 0x0000000027d5848d clickhouse`ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>) [inlined] std::__1::__function::__policy_func<void ()>::operator(this=0x00007ffe2ee3a7e0)[abi:v15003]() const at function.h:848:16\r\n    frame #20: 0x0000000027d5846d clickhouse`ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>) [inlined] std::__1::function<void ()>::operator(this=0x00007ffe2ee3a7e0)() const at function.h:1197:12\r\n    frame #21: 0x0000000027d5846d clickhouse`ThreadPoolImpl<std::__1::thread>::worker(this=0x000070f0000069f0, thread_it=std::__1::list<std::__1::thread, std::__1::allocator<std::__1::thread> >::iterator @ 0x00007ffe2ee3a6d0) at ThreadPool.cpp:294:17\r\n    frame #22: 0x0000000027d663a3 clickhouse`void* std::__1::__thread_proxy[abi:v15003]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, long, std::__1::optional<unsigned long>, bool)::'lambda0'()> >(void*) [inlined] void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(this=<unavailable>)>, long, std::__1::optional<unsigned long>, bool)::'lambda0'()::operator()() const at ThreadPool.cpp:144:73\r\n    frame #23: 0x0000000027d6635f clickhouse`void* std::__1::__thread_proxy[abi:v15003]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, long, std::__1::optional<unsigned long>, bool)::'lambda0'()> >(void*) [inlined] decltype(__f=<unavailable>)()) std::__1::__invoke[abi:v15003]<void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, long, std::__1::optional<unsigned long>, bool)::'lambda0'()>(void&&) at invoke.h:394:23\r\n    frame #24: 0x0000000027d6635f clickhouse`void* std::__1::__thread_proxy[abi:v15003]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, long, std::__1::optional<unsigned long>, bool)::'lambda0'()> >(void*) [inlined] void std::__1::__thread_execute[abi:v15003]<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, long, std::__1::optional<unsigned long>, bool)::'lambda0'()>(__t=size=2, (null)=<unavailable>)>, long, std::__1::optional<unsigned long>, bool)::'lambda0'()>&, std::__1::__tuple_indices<>) at thread:284:5\r\n    frame #25: 0x0000000027d6635b clickhouse`void* std::__1::__thread_proxy[abi:v15003]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, long, std::__1::optional<unsigned long>, bool)::'lambda0'()> >(__vp=0x000070200010b4a0) at thread:295:5\r\n    frame #26: 0x00007ffff7f92609 libpthread.so.0`start_thread(arg=<unavailable>) at pthread_create.c:477:8\r\n    frame #27: 0x00007ffff7eb7163 libc.so.6`__clone + 67\r\n(lldb) fr v\r\n(const bool) skip_compiled_aggregate_functions = <no location, value may have been optimized out>\r\n\r\n(const DB::Aggregator *) this = 0x00007140001e4210\r\n(DB::AggregationMethodStringNoCache<StringHashMap<char *, Allocator<true, true> > > &) method = 0x000071500020ff80: {\r\n  data = {\r\n    StringHashTable<StringHashMapSubMaps<char *, Allocator<true, true> > > = {\r\n      m0 = {\r\n        has_zero = false\r\n        zero_value_storage = (__lx = \"\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\")\r\n      }\r\n      m1 = {\r\n        HashTable<unsigned long, StringHashMapCell<unsigned long, char *>, StringHashTableHash, StringHashTableGrower<8>, Allocator<true, true> > = {\r\n          m_size = 1\r\n          buf = 0x0000720000082000\r\n          grower = {\r\n            HashTableGrowerWithPrecalculation<8> = {\r\n              size_degree = 0x08 u8'\\b'\r\n              precalculated_mask = 255\r\n              precalculated_max_fill = 128\r\n            }\r\n          }\r\n        }\r\n      }\r\n      m2 = {\r\n        HashTable<wide::integer<128, unsigned int>, StringHashMapCell<wide::integer<128, unsigned int>, char *>, StringHashTableHash, StringHashTableGrower<8>, Allocator<true, true> > = {\r\n          m_size = 0\r\n          buf = 0x000072200016f800\r\n          grower = {\r\n            HashTableGrowerWithPrecalculation<8> = {\r\n              size_degree = 0x08 u8'\\b'\r\n              precalculated_mask = 255\r\n              precalculated_max_fill = 128\r\n            }\r\n          }\r\n        }\r\n      }\r\n      m3 = {\r\n        HashTable<StringKey24, StringHashMapCell<StringKey24, char *>, StringHashTableHash, StringHashTableGrower<8>, Allocator<true, true> > = {\r\n          m_size = 0\r\n          buf = 0x0000724000036000\r\n          grower = {\r\n            HashTableGrowerWithPrecalculation<8> = {\r\n              size_degree = 0x08 u8'\\b'\r\n              precalculated_mask = 255\r\n              precalculated_max_fill = 128\r\n            }\r\n          }\r\n        }\r\n      }\r\n      ms = {\r\n        HashTable<StringRef, StringHashMapCell<StringRef, char *>, StringHashTableHash, StringHashTableGrower<8>, Allocator<true, true> > = {\r\n          m_size = 0\r\n          buf = 0x000072400003a000\r\n          grower = {\r\n            HashTableGrowerWithPrecalculation<8> = {\r\n              size_degree = 0x08 u8'\\b'\r\n              precalculated_mask = 255\r\n              precalculated_max_fill = 128\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n(DB::AggregationMethodStringNoCache<StringHashMap<char *, Allocator<true, true> > >::State &) state = 0x00007ffe2ee399d8: {\r\n  DB::ColumnsHashing::columns_hashing_impl::HashMethodBase<DB::ColumnsHashing::HashMethodString<PairNoInit<StringRef, char *>, char *, true, false, false>, PairNoInit<StringRef, char *>, char *, false, false> = (cache = DB::ColumnsHashing::columns_hashing_impl::HashMethodBase<DB::ColumnsHashing::HashMethodString<PairNoInit<StringRef, char *>, char *, true, false, false>, PairNoInit<StringRef, char *>, char *, false, false>::Cache @ 0x00007ffe2ee399d8)\r\n  offsets = 0x00007200001ff040\r\n  chars = 0x000071000006f940 u8\"AWL)\"\r\n}\r\n(DB::Arena *) aggregates_pool = 0x0000704000248f58\r\n(size_t) row_begin = 0\r\n(size_t) row_end = 1\r\n(DB::Aggregator::AggregateFunctionInstruction *) aggregate_instructions = 0x00007070001ff380\r\n(DB::AggregateDataPtr) overflow_row = 0x0000000000000000\r\n(std::unique_ptr<char *[], std::default_delete<char *[]> >) places = \"\" {\r\n  __value_ = 0x0000701000097510\r\n}\r\n(DB::PrefetchingHelper) prefetching = {\r\n  watch = (start_ns = 0, stop_ns = 0, clock_type = 1, is_running = true)\r\n}\r\n(size_t) prefetch_look_ahead = <no location, value may have been optimized out>\r\n\r\n(std::vector<DB::ColumnData, std::allocator<DB::ColumnData> >) columns_data = size=0 {}\r\n(DB::JITAddIntoAggregateStatesFunction) add_into_aggregate_states_function = <variable not available>\r\n\r\n(size_t) i = 0\r\n(DB::Aggregator::AggregateFunctionInstruction *) inst = <variable not available>\r\n\r\n(size_t) arguments_size = <variable not available>\r\n\r\n(size_t) argument_index = 0\r\n```",
  "created_at": "2022-11-10T11:51:56Z",
  "modified_files": [
    "src/Analyzer/Passes/NormalizeCountVariantsPass.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02479_analyzer_aggregation_crash.reference",
    "b/tests/queries/0_stateless/02479_analyzer_aggregation_crash.sql"
  ]
}