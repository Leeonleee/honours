diff --git a/src/Dictionaries/tests/gtest_hierarchy_dictionaries_utils.cpp b/src/Dictionaries/tests/gtest_hierarchy_dictionaries_utils.cpp
index a68f23a978fd..10d335ebbbc1 100644
--- a/src/Dictionaries/tests/gtest_hierarchy_dictionaries_utils.cpp
+++ b/src/Dictionaries/tests/gtest_hierarchy_dictionaries_utils.cpp
@@ -17,19 +17,26 @@ TEST(HierarchyDictionariesUtils, getHierarchy)
 
         auto is_key_valid_func = [&](auto key) { return child_to_parent.find(key) != nullptr; };
 
+        UInt64 hierarchy_null_value_key = 0;
         auto get_parent_key_func = [&](auto key)
         {
+            std::optional<UInt64> result;
             auto it = child_to_parent.find(key);
-            std::optional<UInt64> value = (it != nullptr ? std::make_optional(it->getMapped()) : std::nullopt);
-            return value;
+            if (it == nullptr)
+                return result;
+
+            UInt64 parent_key = it->getMapped();
+            if (parent_key == hierarchy_null_value_key)
+                return result;
+
+            result = parent_key;
+            return result;
         };
 
-        UInt64 hierarchy_null_value_key = 0;
         PaddedPODArray<UInt64> keys = {1, 2, 3, 4, 5};
 
         auto result = DB::detail::getHierarchy(
             keys,
-            hierarchy_null_value_key,
             is_key_valid_func,
             get_parent_key_func);
 
@@ -49,19 +56,26 @@ TEST(HierarchyDictionariesUtils, getHierarchy)
 
         auto is_key_valid_func = [&](auto key) { return child_to_parent.find(key) != nullptr; };
 
+        UInt64 hierarchy_null_value_key = 0;
         auto get_parent_key_func = [&](auto key)
         {
+            std::optional<UInt64> result;
             auto it = child_to_parent.find(key);
-            std::optional<UInt64> value = (it != nullptr ? std::make_optional(it->getMapped()) : std::nullopt);
-            return value;
+            if (it == nullptr)
+                return result;
+
+            UInt64 parent_key = it->getMapped();
+            if (parent_key == hierarchy_null_value_key)
+                return result;
+
+            result = parent_key;
+            return result;
         };
 
-        UInt64 hierarchy_null_value_key = 0;
         PaddedPODArray<UInt64> keys = {1, 2, 3};
 
         auto result = DB::detail::getHierarchy(
             keys,
-            hierarchy_null_value_key,
             is_key_valid_func,
             get_parent_key_func);
 
@@ -87,21 +101,28 @@ TEST(HierarchyDictionariesUtils, getIsInHierarchy)
 
         auto is_key_valid_func = [&](auto key) { return child_to_parent.find(key) != nullptr; };
 
+        UInt64 hierarchy_null_value_key = 0;
         auto get_parent_key_func = [&](auto key)
         {
+            std::optional<UInt64> result;
             auto it = child_to_parent.find(key);
-            std::optional<UInt64> value = (it != nullptr ? std::make_optional(it->getMapped()) : std::nullopt);
-            return value;
+            if (it == nullptr)
+                return result;
+
+            UInt64 parent_key = it->getMapped();
+            if (parent_key == hierarchy_null_value_key)
+                return result;
+
+            result = parent_key;
+            return result;
         };
 
-        UInt64 hierarchy_null_value_key = 0;
         PaddedPODArray<UInt64> keys = {1, 2, 3, 4, 5};
         PaddedPODArray<UInt64> keys_in = {1, 1, 1, 2, 5};
 
         PaddedPODArray<UInt8> actual = DB::detail::getIsInHierarchy(
             keys,
             keys_in,
-            hierarchy_null_value_key,
             is_key_valid_func,
             get_parent_key_func);
 
@@ -119,21 +140,28 @@ TEST(HierarchyDictionariesUtils, getIsInHierarchy)
             return child_to_parent.find(key) != nullptr;
         };
 
+        UInt64 hierarchy_null_value_key = 0;
         auto get_parent_key_func = [&](auto key)
         {
+            std::optional<UInt64> result;
             auto it = child_to_parent.find(key);
-            std::optional<UInt64> value = (it != nullptr ? std::make_optional(it->getMapped()) : std::nullopt);
-            return value;
+            if (it == nullptr)
+                return result;
+
+            UInt64 parent_key = it->getMapped();
+            if (parent_key == hierarchy_null_value_key)
+                return result;
+
+            result = parent_key;
+            return result;
         };
 
-        UInt64 hierarchy_null_value_key = 0;
         PaddedPODArray<UInt64> keys = {1, 2, 3};
         PaddedPODArray<UInt64> keys_in = {1, 2, 3};
 
         PaddedPODArray<UInt8> actual = DB::detail::getIsInHierarchy(
             keys,
             keys_in,
-            hierarchy_null_value_key,
             is_key_valid_func,
             get_parent_key_func);
 
diff --git a/tests/queries/0_stateless/02316_hierarchical_dictionaries_nullable_parent_key.reference b/tests/queries/0_stateless/02316_hierarchical_dictionaries_nullable_parent_key.reference
new file mode 100644
index 000000000000..60d9fb16c5fe
--- /dev/null
+++ b/tests/queries/0_stateless/02316_hierarchical_dictionaries_nullable_parent_key.reference
@@ -0,0 +1,138 @@
+Flat dictionary
+Get hierarchy
+[0]
+[1,0]
+[2,1,0]
+[3]
+[4,2,1,0]
+[]
+Get is in hierarchy
+1
+1
+1
+1
+1
+0
+Get children
+[1]
+[2]
+[4]
+[]
+[]
+[]
+Get all descendants
+[1,2,4]
+[2,4]
+[4]
+[]
+[]
+[]
+Get descendants at first level
+[1]
+[2]
+[4]
+[]
+[]
+[]
+Hashed dictionary
+Get hierarchy
+[0]
+[1,0]
+[2,1,0]
+[3]
+[4,2,1,0]
+[]
+Get is in hierarchy
+1
+1
+1
+1
+1
+0
+Get children
+[1]
+[2]
+[4]
+[]
+[]
+[]
+Get all descendants
+[1,2,4]
+[2,4]
+[4]
+[]
+[]
+[]
+Get descendants at first level
+[1]
+[2]
+[4]
+[]
+[]
+[]
+HashedArray dictionary
+Get hierarchy
+[0]
+[1,0]
+[2,1,0]
+[3]
+[4,2,1,0]
+[]
+Get is in hierarchy
+1
+1
+1
+1
+1
+0
+Get children
+[1]
+[2]
+[4]
+[]
+[]
+[]
+Get all descendants
+[1,2,4]
+[2,4]
+[4]
+[]
+[]
+[]
+Get descendants at first level
+[1]
+[2]
+[4]
+[]
+[]
+[]
+Cache dictionary
+Get hierarchy
+[0]
+[1,0]
+[2,1,0]
+[3]
+[4,2,1,0]
+[]
+Get is in hierarchy
+1
+1
+1
+1
+1
+0
+Direct dictionary
+Get hierarchy
+[0]
+[1,0]
+[2,1,0]
+[3]
+[4,2,1,0]
+[]
+Get is in hierarchy
+1
+1
+1
+1
+1
+0
diff --git a/tests/queries/0_stateless/02316_hierarchical_dictionaries_nullable_parent_key.sql b/tests/queries/0_stateless/02316_hierarchical_dictionaries_nullable_parent_key.sql
new file mode 100644
index 000000000000..d477d58d3987
--- /dev/null
+++ b/tests/queries/0_stateless/02316_hierarchical_dictionaries_nullable_parent_key.sql
@@ -0,0 +1,123 @@
+DROP TABLE IF EXISTS test_hierarhical_table;
+CREATE TABLE test_hierarhical_table
+(
+    id UInt64,
+    parent_id Nullable(UInt64)
+) ENGINE=TinyLog;
+
+INSERT INTO test_hierarhical_table VALUES (0, NULL), (1, 0), (2, 1), (3, NULL), (4, 2);
+
+DROP DICTIONARY IF EXISTS hierachical_flat_dictionary;
+CREATE DICTIONARY hierachical_flat_dictionary
+(
+    id UInt64,
+    parent_id Nullable(UInt64) HIERARCHICAL
+) PRIMARY KEY id
+SOURCE(CLICKHOUSE(TABLE 'test_hierarhical_table'))
+LAYOUT(FLAT())
+LIFETIME(0);
+
+SELECT 'Flat dictionary';
+
+SELECT 'Get hierarchy';
+SELECT dictGetHierarchy('hierachical_flat_dictionary', number) FROM system.numbers LIMIT 6;
+SELECT 'Get is in hierarchy';
+SELECT dictIsIn('hierachical_flat_dictionary', number, number) FROM system.numbers LIMIT 6;
+SELECT 'Get children';
+SELECT dictGetChildren('hierachical_flat_dictionary', number) FROM system.numbers LIMIT 6;
+SELECT 'Get all descendants';
+SELECT dictGetDescendants('hierachical_flat_dictionary', number) FROM system.numbers LIMIT 6;
+SELECT 'Get descendants at first level';
+SELECT dictGetDescendants('hierachical_flat_dictionary', number, 1) FROM system.numbers LIMIT 6;
+
+DROP DICTIONARY hierachical_flat_dictionary;
+
+DROP DICTIONARY IF EXISTS hierachical_hashed_dictionary;
+CREATE DICTIONARY hierachical_hashed_dictionary
+(
+    id UInt64,
+    parent_id Nullable(UInt64) HIERARCHICAL
+) PRIMARY KEY id
+SOURCE(CLICKHOUSE(TABLE 'test_hierarhical_table'))
+LAYOUT(HASHED())
+LIFETIME(0);
+
+SELECT 'Hashed dictionary';
+
+SELECT 'Get hierarchy';
+SELECT dictGetHierarchy('hierachical_hashed_dictionary', number) FROM system.numbers LIMIT 6;
+SELECT 'Get is in hierarchy';
+SELECT dictIsIn('hierachical_hashed_dictionary', number, number) FROM system.numbers LIMIT 6;
+SELECT 'Get children';
+SELECT dictGetChildren('hierachical_hashed_dictionary', number) FROM system.numbers LIMIT 6;
+SELECT 'Get all descendants';
+SELECT dictGetDescendants('hierachical_hashed_dictionary', number) FROM system.numbers LIMIT 6;
+SELECT 'Get descendants at first level';
+SELECT dictGetDescendants('hierachical_hashed_dictionary', number, 1) FROM system.numbers LIMIT 6;
+
+DROP DICTIONARY hierachical_hashed_dictionary;
+
+DROP DICTIONARY IF EXISTS hierachical_hashed_array_dictionary;
+CREATE DICTIONARY hierachical_hashed_array_dictionary
+(
+    id UInt64,
+    parent_id Nullable(UInt64) HIERARCHICAL
+) PRIMARY KEY id
+SOURCE(CLICKHOUSE(TABLE 'test_hierarhical_table'))
+LAYOUT(HASHED_ARRAY())
+LIFETIME(0);
+
+SELECT 'HashedArray dictionary';
+
+SELECT 'Get hierarchy';
+SELECT dictGetHierarchy('hierachical_hashed_array_dictionary', number) FROM system.numbers LIMIT 6;
+SELECT 'Get is in hierarchy';
+SELECT dictIsIn('hierachical_hashed_array_dictionary', number, number) FROM system.numbers LIMIT 6;
+SELECT 'Get children';
+SELECT dictGetChildren('hierachical_hashed_array_dictionary', number) FROM system.numbers LIMIT 6;
+SELECT 'Get all descendants';
+SELECT dictGetDescendants('hierachical_hashed_array_dictionary', number) FROM system.numbers LIMIT 6;
+SELECT 'Get descendants at first level';
+SELECT dictGetDescendants('hierachical_hashed_array_dictionary', number, 1) FROM system.numbers LIMIT 6;
+
+DROP DICTIONARY hierachical_hashed_array_dictionary;
+
+DROP DICTIONARY IF EXISTS hierachical_cache_dictionary;
+CREATE DICTIONARY hierachical_cache_dictionary
+(
+    id UInt64,
+    parent_id Nullable(UInt64) HIERARCHICAL
+) PRIMARY KEY id
+SOURCE(CLICKHOUSE(TABLE 'test_hierarhical_table'))
+LAYOUT(CACHE(SIZE_IN_CELLS 10))
+LIFETIME(0);
+
+SELECT 'Cache dictionary';
+
+SELECT 'Get hierarchy';
+SELECT dictGetHierarchy('hierachical_cache_dictionary', number) FROM system.numbers LIMIT 6;
+SELECT 'Get is in hierarchy';
+SELECT dictIsIn('hierachical_cache_dictionary', number, number) FROM system.numbers LIMIT 6;
+
+
+DROP DICTIONARY hierachical_cache_dictionary;
+
+DROP DICTIONARY IF EXISTS hierachical_direct_dictionary;
+CREATE DICTIONARY hierachical_direct_dictionary
+(
+    id UInt64,
+    parent_id Nullable(UInt64) HIERARCHICAL
+) PRIMARY KEY id
+SOURCE(CLICKHOUSE(TABLE 'test_hierarhical_table'))
+LAYOUT(DIRECT());
+
+SELECT 'Direct dictionary';
+
+SELECT 'Get hierarchy';
+SELECT dictGetHierarchy('hierachical_direct_dictionary', number) FROM system.numbers LIMIT 6;
+SELECT 'Get is in hierarchy';
+SELECT dictIsIn('hierachical_direct_dictionary', number, number) FROM system.numbers LIMIT 6;
+
+DROP DICTIONARY hierachical_direct_dictionary;
+
+DROP TABLE test_hierarhical_table;
