{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 20990,
  "instance_id": "ClickHouse__ClickHouse-20990",
  "issue_numbers": [
    "20880",
    "19334"
  ],
  "base_commit": "3cda69feaf1295333a1dc2f4030730bd3edbb425",
  "patch": "diff --git a/src/DataStreams/CheckConstraintsBlockOutputStream.cpp b/src/DataStreams/CheckConstraintsBlockOutputStream.cpp\nindex a967ee285027..90d6560b9a8c 100644\n--- a/src/DataStreams/CheckConstraintsBlockOutputStream.cpp\n+++ b/src/DataStreams/CheckConstraintsBlockOutputStream.cpp\n@@ -1,12 +1,15 @@\n-#include <DataStreams/CheckConstraintsBlockOutputStream.h>\n-#include <Parsers/formatAST.h>\n-#include <Interpreters/ExpressionActions.h>\n-#include <Columns/ColumnsCommon.h>\n-#include <Columns/ColumnsNumber.h>\n-#include <Columns/ColumnConst.h>\n #include <Common/assert_cast.h>\n #include <Common/quoteString.h>\n #include <Common/FieldVisitors.h>\n+#include <DataTypes/DataTypeNullable.h>\n+#include <DataTypes/DataTypeLowCardinality.h>\n+#include <Columns/ColumnsCommon.h>\n+#include <Columns/ColumnsNumber.h>\n+#include <Columns/ColumnConst.h>\n+#include <Columns/ColumnNullable.h>\n+#include <DataStreams/CheckConstraintsBlockOutputStream.h>\n+#include <Parsers/formatAST.h>\n+#include <Interpreters/ExpressionActions.h>\n \n \n namespace DB\n@@ -15,7 +18,7 @@ namespace DB\n namespace ErrorCodes\n {\n     extern const int VIOLATED_CONSTRAINT;\n-    extern const int LOGICAL_ERROR;\n+    extern const int UNSUPPORTED_METHOD;\n }\n \n \n@@ -48,62 +51,77 @@ void CheckConstraintsBlockOutputStream::write(const Block & block)\n \n             ColumnWithTypeAndName res_column = block_to_calculate.getByName(constraint_ptr->expr->getColumnName());\n \n-            if (!isUInt8(res_column.type))\n-                throw Exception(ErrorCodes::LOGICAL_ERROR, \"Constraint {} does not return a value of type UInt8\",\n+            auto result_type = removeNullable(removeLowCardinality(res_column.type));\n+\n+            if (!isUInt8(result_type))\n+                throw Exception(ErrorCodes::UNSUPPORTED_METHOD, \"Constraint {} does not return a value of type UInt8\",\n                     backQuote(constraint_ptr->name));\n \n-            if (const ColumnConst * res_const = typeid_cast<const ColumnConst *>(res_column.column.get()))\n+            auto result_column = res_column.column->convertToFullColumnIfConst()->convertToFullColumnIfLowCardinality();\n+\n+            if (const auto * column_nullable = checkAndGetColumn<ColumnNullable>(*result_column))\n             {\n-                UInt8 value = res_const->getValue<UInt64>();\n+                const auto & nested_column = column_nullable->getNestedColumnPtr();\n \n-                /// Is violated.\n-                if (!value)\n-                {\n-                    throw Exception(ErrorCodes::VIOLATED_CONSTRAINT,\n-                                    \"Constraint {} for table {} is violated, because it is a constant expression returning 0. \"\n-                                    \"It is most likely an error in table definition.\",\n-                                    backQuote(constraint_ptr->name), table_id.getNameForLogs());\n-                }\n+                /// Check if constraint value is nullable\n+                const auto & null_map = column_nullable->getNullMapColumn();\n+                const auto & data = null_map.getData();\n+                const auto * it = std::find(data.begin(), data.end(), true);\n+\n+                bool null_map_contains_null = it != data.end();\n+\n+                if (null_map_contains_null)\n+                    throw Exception(\n+                        ErrorCodes::VIOLATED_CONSTRAINT,\n+                        \"Constraint {} for table {} is violated. Expression: ({}).\"\\\n+                        \"Constraint expression returns nullable column that contains null value\",\n+                        backQuote(constraint_ptr->name),\n+                        table_id.getNameForLogs(),\n+                        serializeAST(*(constraint_ptr->expr), true));\n+\n+                result_column = nested_column;\n             }\n-            else\n-            {\n-                const ColumnUInt8 & res_column_uint8 = assert_cast<const ColumnUInt8 &>(*res_column.column);\n \n-                const UInt8 * data = res_column_uint8.getData().data();\n-                size_t size = res_column_uint8.size();\n+            const ColumnUInt8 & res_column_uint8 = assert_cast<const ColumnUInt8 &>(*result_column);\n+\n+            const UInt8 * data = res_column_uint8.getData().data();\n+            size_t size = res_column_uint8.size();\n \n-                /// Is violated.\n-                if (!memoryIsByte(data, size, 1))\n+            /// Is violated.\n+            if (!memoryIsByte(data, size, 1))\n+            {\n+                size_t row_idx = 0;\n+                for (; row_idx < size; ++row_idx)\n+                    if (data[row_idx] != 1)\n+                        break;\n+\n+                Names related_columns = constraint_expr->getRequiredColumns();\n+\n+                bool first = true;\n+                String column_values_msg;\n+                constexpr size_t approx_bytes_for_col = 32;\n+                column_values_msg.reserve(approx_bytes_for_col * related_columns.size());\n+                for (const auto & name : related_columns)\n                 {\n-                    size_t row_idx = 0;\n-                    for (; row_idx < size; ++row_idx)\n-                        if (data[row_idx] != 1)\n-                            break;\n-\n-                    Names related_columns = constraint_expr->getRequiredColumns();\n-\n-                    bool first = true;\n-                    String column_values_msg;\n-                    constexpr size_t approx_bytes_for_col = 32;\n-                    column_values_msg.reserve(approx_bytes_for_col * related_columns.size());\n-                    for (const auto & name : related_columns)\n-                    {\n-                        const IColumn & column = *block.getByName(name).column;\n-                        assert(row_idx < column.size());\n-\n-                        if (!first)\n-                            column_values_msg.append(\", \");\n-                        column_values_msg.append(backQuoteIfNeed(name));\n-                        column_values_msg.append(\" = \");\n-                        column_values_msg.append(applyVisitor(FieldVisitorToString(), column[row_idx]));\n-                        first = false;\n-                    }\n-\n-                    throw Exception(ErrorCodes::VIOLATED_CONSTRAINT,\n-                                    \"Constraint {} for table {} is violated at row {}. Expression: ({}). Column values: {}\",\n-                                    backQuote(constraint_ptr->name), table_id.getNameForLogs(), rows_written + row_idx + 1,\n-                                    serializeAST(*(constraint_ptr->expr), true), column_values_msg);\n+                    const IColumn & column = *block.getByName(name).column;\n+                    assert(row_idx < column.size());\n+\n+                    if (!first)\n+                        column_values_msg.append(\", \");\n+                    column_values_msg.append(backQuoteIfNeed(name));\n+                    column_values_msg.append(\" = \");\n+                    column_values_msg.append(applyVisitor(FieldVisitorToString(), column[row_idx]));\n+                    first = false;\n                 }\n+\n+                throw Exception(\n+                    ErrorCodes::VIOLATED_CONSTRAINT,\n+                    \"Constraint {} for table {} is violated at row {}. Expression: ({}). Column values: {}\",\n+                    backQuote(constraint_ptr->name),\n+                    table_id.getNameForLogs(),\n+                    rows_written + row_idx + 1,\n+                    serializeAST(*(constraint_ptr->expr), true),\n+                    column_values_msg);\n             }\n         }\n     }\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01720_constraints_complex_types.reference b/tests/queries/0_stateless/01720_constraints_complex_types.reference\nnew file mode 100644\nindex 000000000000..01e79c32a8c9\n--- /dev/null\n+++ b/tests/queries/0_stateless/01720_constraints_complex_types.reference\n@@ -0,0 +1,3 @@\n+1\n+2\n+3\ndiff --git a/tests/queries/0_stateless/01720_constraints_complex_types.sql b/tests/queries/0_stateless/01720_constraints_complex_types.sql\nnew file mode 100644\nindex 000000000000..273f509b6eb2\n--- /dev/null\n+++ b/tests/queries/0_stateless/01720_constraints_complex_types.sql\n@@ -0,0 +1,47 @@\n+SET allow_suspicious_low_cardinality_types = 1;\n+\n+DROP TABLE IF EXISTS constraint_on_nullable_type;\n+CREATE TABLE constraint_on_nullable_type\n+(\n+    `id` Nullable(UInt64),\n+    CONSTRAINT `c0` CHECK `id` = 1\n+)\n+ENGINE = TinyLog();\n+\n+INSERT INTO constraint_on_nullable_type VALUES (0); -- {serverError 469}\n+INSERT INTO constraint_on_nullable_type VALUES (1);\n+\n+SELECT * FROM constraint_on_nullable_type;\n+\n+DROP TABLE constraint_on_nullable_type;\n+\n+DROP TABLE IF EXISTS constraint_on_low_cardinality_type;\n+CREATE TABLE constraint_on_low_cardinality_type\n+(\n+    `id` LowCardinality(UInt64),\n+    CONSTRAINT `c0` CHECK `id` = 2\n+)\n+ENGINE = TinyLog;\n+\n+INSERT INTO constraint_on_low_cardinality_type VALUES (0); -- {serverError 469}\n+INSERT INTO constraint_on_low_cardinality_type VALUES (2);\n+\n+SELECT * FROM constraint_on_low_cardinality_type;\n+\n+DROP TABLE constraint_on_low_cardinality_type;\n+\n+DROP TABLE IF EXISTS constraint_on_low_cardinality_nullable_type;\n+\n+CREATE TABLE constraint_on_low_cardinality_nullable_type\n+(\n+    `id` LowCardinality(Nullable(UInt64)),\n+    CONSTRAINT `c0` CHECK `id` = 3\n+)\n+ENGINE = TinyLog;\n+\n+INSERT INTO constraint_on_low_cardinality_nullable_type VALUES (0); -- {serverError 469}\n+INSERT INTO constraint_on_low_cardinality_nullable_type VALUES (3);\n+\n+SELECT * FROM constraint_on_low_cardinality_nullable_type;\n+\n+DROP TABLE constraint_on_low_cardinality_nullable_type;\ndiff --git a/tests/queries/0_stateless/01721_constraints_constant_expressions.reference b/tests/queries/0_stateless/01721_constraints_constant_expressions.reference\nnew file mode 100644\nindex 000000000000..d00491fd7e5b\n--- /dev/null\n+++ b/tests/queries/0_stateless/01721_constraints_constant_expressions.reference\n@@ -0,0 +1,1 @@\n+1\ndiff --git a/tests/queries/0_stateless/01721_constraints_constant_expressions.sql b/tests/queries/0_stateless/01721_constraints_constant_expressions.sql\nnew file mode 100644\nindex 000000000000..d70c0cd4dc02\n--- /dev/null\n+++ b/tests/queries/0_stateless/01721_constraints_constant_expressions.sql\n@@ -0,0 +1,40 @@\n+DROP TABLE IF EXISTS constraint_constant_number_expression;\n+CREATE TABLE constraint_constant_number_expression\n+(\n+    id UInt64,\n+    CONSTRAINT `c0` CHECK 1,\n+    CONSTRAINT `c1` CHECK 1 < 2,\n+    CONSTRAINT `c2` CHECK isNull(cast(NULL, 'Nullable(UInt8)'))\n+) ENGINE = TinyLog();\n+\n+INSERT INTO constraint_constant_number_expression VALUES (1);\n+\n+SELECT * FROM constraint_constant_number_expression;\n+\n+DROP TABLE constraint_constant_number_expression;\n+\n+DROP TABLE IF EXISTS constraint_constant_number_expression_non_uint8;\n+CREATE TABLE constraint_constant_number_expression_non_uint8\n+(\n+    id UInt64,\n+    CONSTRAINT `c0` CHECK toUInt64(1)\n+) ENGINE = TinyLog();\n+\n+INSERT INTO constraint_constant_number_expression_non_uint8 VALUES (2); -- {serverError 1}\n+\n+SELECT * FROM constraint_constant_number_expression_non_uint8;\n+\n+DROP TABLE constraint_constant_number_expression_non_uint8;\n+\n+DROP TABLE IF EXISTS constraint_constant_nullable_expression_that_contains_null;\n+CREATE TABLE constraint_constant_nullable_expression_that_contains_null\n+(\n+    id UInt64,\n+    CONSTRAINT `c0` CHECK nullIf(1 % 2, 1)\n+) ENGINE = TinyLog();\n+\n+INSERT INTO constraint_constant_nullable_expression_that_contains_null VALUES (3); -- {serverError 469}\n+\n+SELECT * FROM constraint_constant_nullable_expression_that_contains_null;\n+\n+DROP TABLE constraint_constant_nullable_expression_that_contains_null;\ndiff --git a/tests/queries/skip_list.json b/tests/queries/skip_list.json\nindex 475b87ae36ae..36cca55779dd 100644\n--- a/tests/queries/skip_list.json\n+++ b/tests/queries/skip_list.json\n@@ -260,7 +260,8 @@\n         \"00121_drop_column_zookeeper\",\n         \"00116_storage_set\",\n         \"00083_create_merge_tree_zookeeper\",\n-        \"00062_replicated_merge_tree_alter_zookeeper\"\n+        \"00062_replicated_merge_tree_alter_zookeeper\",\n+        \"01720_constraints_complex_types\"\n     ],\n     \"polymorphic-parts\": [\n         \"01508_partition_pruning_long\", /// bug, shoud be fixed\n",
  "problem_statement": "Constraints do not work on Nullable types\nConstraints on Nullable types don't seem to work and return errors like the following:\r\n```\r\nCode: 49. DB::Exception: Received from localhost:9000. DB::Exception: Constraint `c0` does not return a value of type UInt8.\r\n```\r\n\r\n**Does it reproduce on recent release?**\r\n\r\nThis issue has been encountered on Clickhouse `20.10.2.20`. I did not test latest `master`.\r\n```\r\n$ clickhouse-server --version\r\nClickHouse server version 20.10.2.20 (official build).\r\n```\r\n\r\nEDIT: this is also reproducible with the latest stable release:\r\n```\r\n$ clickhouse-server --version\r\nClickHouse server version 21.2.4.6 (official build).\r\n```\r\n\r\n**How to reproduce**\r\n\r\nAll settings are defaults.\r\n\r\nTo reproduce the error, create the following table:\r\n```\r\nCREATE TABLE foo.bar\r\n(\r\n    `id` UInt32,\r\n    `buggy` Nullable(UInt32),\r\n    CONSTRAINT `c0` CHECK `buggy` = 1\r\n)\r\nENGINE = MergeTree()\r\nPRIMARY KEY `id`\r\nORDER BY `id`\r\n```\r\n\r\nThe table creation works fine. However, one gets an exception when trying to insert:\r\n```\r\nserver :) INSERT INTO foo.bar VALUES (0, 1)\r\n\r\nINSERT INTO foo.bar VALUES\r\n\r\n\r\nReceived exception from server (version 20.10.2):\r\nCode: 49. DB::Exception: Received from localhost:9000. DB::Exception: Constraint `c0` does not return a value of type UInt8. \r\n\r\n1 rows in set. Elapsed: 0.001 sec.\r\n```\r\n\r\nThe exception is unexpected as the constraint is a valid boolean expression. Not that I tried many variants of the constraints and the only one referring the field `buggy` that worked as expected is:\r\n ```\r\nCONSTRAINT `c0` CHECK isNull(`buggy`)\r\n```\r\n\r\n**Expected behavior**\r\n\r\nNo exception raised as the constraint is a valid boolean expression.\r\n\r\n**Error message and/or stacktrace**\r\n\r\n```\r\nCode: 49. DB::Exception: Received from localhost:9000. DB::Exception: Constraint `c0` does not return a value of type UInt8. \r\n```\r\n\r\n**Additional context**\r\n\r\nThe following issue may be related: #19334\nLogical error: 'Constraint `x0` does not return a value of type UInt8\n**Describe the bug**\r\nFound by SQLancer\r\n\r\n```\r\n2021.01.20 16:48:44.975665 [ 242 ] {fe9c2520-8d1b-437f-ab3a-b7a5de874ec4} <Fatal> : Logical error: 'Constraint `x0` does not return a value of type UInt8'.\r\n2021.01.20 16:48:44.976718 [ 583 ] {} <Fatal> BaseDaemon: ########################################\r\n2021.01.20 16:48:44.976862 [ 583 ] {} <Fatal> BaseDaemon: (version 21.1.1.5741 (official build), build id: C087AE3D41BED7F7CA23B44B06C4DFBA82F395AD) (from thread 242) (query_id: fe9c2520-8d1b-437f-ab3a-b7a5de874ec4) Received signal Aborted (6)\r\n2021.01.20 16:48:44.976968 [ 583 ] {} <Fatal> BaseDaemon:\r\n2021.01.20 16:48:44.977120 [ 583 ] {} <Fatal> BaseDaemon: Stack trace: 0x7fce18f7518b 0x7fce18f54859 0x107e4746 0x107e47f1 0x10977dcf 0x19cc24bc 0x19cc3cc1 0x19cb69ee 0x19cb6aec 0x19860887 0x1954b9c7 0x1954b727 0x19cb64f1 0x1951aafd 0x1954bf1c 0x1954ba4d 0x1a1cc305 0x1aa71165 0x1aa72bc6 0x1e2f220c 0x1e32aaec 0x1e32b2f0 0x1e46a353 0x1e4671dd 0x1e466068 0x7fce1912a609 0x7fce19051293\r\n2021.01.20 16:48:44.977329 [ 583 ] {} <Fatal> BaseDaemon: 4. raise @ 0x4618b in /usr/lib/x86_64-linux-gnu/libc-2.31.so\r\n2021.01.20 16:48:44.977452 [ 583 ] {} <Fatal> BaseDaemon: 5. abort @ 0x25859 in /usr/lib/x86_64-linux-gnu/libc-2.31.so\r\n2021.01.20 16:48:44.977769 [ 583 ] {} <Fatal> BaseDaemon: 6. ./obj-x86_64-linux-gnu/../src/Common/Exception.cpp:50: DB::handle_error_code(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0x107e4746 in /usr/bin/clickhouse\r\n2021.01.20 16:48:44.977996 [ 583 ] {} <Fatal> BaseDaemon: 7. ./obj-x86_64-linux-gnu/../src/Common/Exception.cpp:56: DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0x107e47f1 in /usr/bin/clickhouse\r\n2021.01.20 16:48:44.979260 [ 583 ] {} <Fatal> BaseDaemon: 8. ./obj-x86_64-linux-gnu/../src/Common/Exception.h:38: DB::Exception::Exception<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >(int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&&) @ 0x10977dcf in /usr/bin/clickhouse\r\n2021.01.20 16:48:45.024985 [ 583 ] {} <Fatal> BaseDaemon: 9. ./obj-x86_64-linux-gnu/../src/DataStreams/CheckConstraintsBlockOutputStream.cpp:52: DB::CheckConstraintsBlockOutputStream::write(DB::Block const&) @ 0x19cc24bc in /usr/bin/clickhouse\r\n2021.01.20 16:48:45.071994 [ 583 ] {} <Fatal> BaseDaemon: 10. ./obj-x86_64-linux-gnu/../src/DataStreams/AddingDefaultBlockOutputStream.cpp:10: DB::AddingDefaultBlockOutputStream::write(DB::Block const&) @ 0x19cc3cc1 in /usr/bin/clickhouse\r\n```\r\n\r\n**How to reproduce**\r\n``` sql\r\nCREATE TABLE IF NOT EXISTS repro\r\n(\r\n    `c0` Int32,\r\n    `c1` Int32,\r\n    `c2` Int32,\r\n    `c3` Int32,\r\n    CONSTRAINT x0 CHECK -505658794,\r\n    CONSTRAINT x1 CHECK '\u4256G*jC' < 'vjw',\r\n    CONSTRAINT x2 CHECK isNull(isNull('-505658794') OR -505658794),\r\n    CONSTRAINT x3 CHECK -1097735996\r\n)\r\nENGINE = Memory()\r\n\r\nqoega-qyp.sas.yp-c.yandex.net :) INSERT INTO repro(c2, c0, c3, c1) VALUES (1,1,1,1) ;\r\n\r\nINSERT INTO repro (c2, c0, c3, c1) VALUES\r\n\r\n\r\nReceived exception from server (version 21.1.1):\r\nCode: 49. DB::Exception: Received from localhost:9000. DB::Exception: Constraint `x0` does not return a value of type UInt8.\r\n\r\n1 rows in set. Elapsed: 0.028 sec.\r\n```\r\n\r\n\n",
  "hints_text": "\n",
  "created_at": "2021-02-19T20:07:07Z",
  "modified_files": [
    "src/DataStreams/CheckConstraintsBlockOutputStream.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/01720_constraints_complex_types.reference",
    "b/tests/queries/0_stateless/01720_constraints_complex_types.sql",
    "b/tests/queries/0_stateless/01721_constraints_constant_expressions.reference",
    "b/tests/queries/0_stateless/01721_constraints_constant_expressions.sql",
    "tests/queries/skip_list.json"
  ]
}