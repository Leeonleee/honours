{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 47241,
  "instance_id": "ClickHouse__ClickHouse-47241",
  "issue_numbers": [
    "46811"
  ],
  "base_commit": "f809f1b812725081bdefadf31efbb3056a169cd4",
  "patch": "diff --git a/src/Access/Common/AccessType.h b/src/Access/Common/AccessType.h\nindex a7827ee7c595..57fa75dc67b0 100644\n--- a/src/Access/Common/AccessType.h\n+++ b/src/Access/Common/AccessType.h\n@@ -104,6 +104,8 @@ enum class AccessType\n     M(DROP_NAMED_COLLECTION, \"\", NAMED_COLLECTION, NAMED_COLLECTION_CONTROL) /* allows to execute DROP NAMED COLLECTION */\\\n     M(DROP, \"\", GROUP, ALL) /* allows to execute {DROP|DETACH} */\\\n     \\\n+    M(UNDROP_TABLE, \"\", TABLE, ALL) /* allows to execute {UNDROP} TABLE */\\\n+    \\\n     M(TRUNCATE, \"TRUNCATE TABLE\", TABLE, ALL) \\\n     M(OPTIMIZE, \"OPTIMIZE TABLE\", TABLE, ALL) \\\n     M(BACKUP, \"\", TABLE, ALL) /* allows to backup tables */\\\ndiff --git a/src/Core/Settings.h b/src/Core/Settings.h\nindex 9fa2ba0d32fa..acc20c85165f 100644\n--- a/src/Core/Settings.h\n+++ b/src/Core/Settings.h\n@@ -720,6 +720,7 @@ class IColumn;\n     M(UInt64, insert_keeper_fault_injection_seed, 0, \"0 - random seed, otherwise the setting value\", 0) \\\n     M(Bool, force_aggregation_in_order, false, \"Force use of aggregation in order on remote nodes during distributed aggregation. PLEASE, NEVER CHANGE THIS SETTING VALUE MANUALLY!\", IMPORTANT) \\\n     M(UInt64, http_max_request_param_data_size, 10_MiB, \"Limit on size of request data used as a query parameter in predefined HTTP requests.\", 0) \\\n+    M(Bool, allow_experimental_undrop_table_query, false, \"Allow to use undrop query to restore dropped table in a limited time\", 0) \\\n     // End of COMMON_SETTINGS\n     // Please add settings related to formats into the FORMAT_FACTORY_SETTINGS and move obsolete settings to OBSOLETE_SETTINGS.\n \ndiff --git a/src/Databases/DatabaseAtomic.cpp b/src/Databases/DatabaseAtomic.cpp\nindex 7e20b6f6535b..e5320dc6ff47 100644\n--- a/src/Databases/DatabaseAtomic.cpp\n+++ b/src/Databases/DatabaseAtomic.cpp\n@@ -110,6 +110,16 @@ StoragePtr DatabaseAtomic::detachTable(ContextPtr /* context */, const String &\n     return table;\n }\n \n+void DatabaseAtomic::undropTable(ContextPtr /* context_ */, const String & table_name, const StoragePtr & table, const String & relative_table_path)\n+{\n+    std::lock_guard lock(mutex);\n+    String table_metadata_path = getObjectMetadataPath(table_name);\n+    String table_metadata_path_drop = DatabaseCatalog::instance().getPathForDroppedMetadata(table->getStorageID());\n+    renameNoReplace(table_metadata_path_drop, table_metadata_path);\n+    DatabaseOrdinary::attachTableUnlocked(table_name, table);\n+    table_name_to_path.emplace(std::make_pair(table_name, relative_table_path));\n+}\n+\n void DatabaseAtomic::dropTable(ContextPtr local_context, const String & table_name, bool sync)\n {\n     auto table = tryGetTable(table_name, local_context);\ndiff --git a/src/Databases/DatabaseAtomic.h b/src/Databases/DatabaseAtomic.h\nindex cb275812098b..b8ff719989be 100644\n--- a/src/Databases/DatabaseAtomic.h\n+++ b/src/Databases/DatabaseAtomic.h\n@@ -41,6 +41,8 @@ class DatabaseAtomic : public DatabaseOrdinary\n     void attachTable(ContextPtr context, const String & name, const StoragePtr & table, const String & relative_table_path) override;\n     StoragePtr detachTable(ContextPtr context, const String & name) override;\n \n+    void undropTable(ContextPtr context, const String & table_name, const StoragePtr & table, const String & relative_table_path) override;\n+\n     String getTableDataPath(const String & table_name) const override;\n     String getTableDataPath(const ASTCreateQuery & query) const override;\n \ndiff --git a/src/Databases/IDatabase.h b/src/Databases/IDatabase.h\nindex b8880c4c4cc8..4dbf78cb5c4b 100644\n--- a/src/Databases/IDatabase.h\n+++ b/src/Databases/IDatabase.h\n@@ -216,6 +216,11 @@ class IDatabase : public std::enable_shared_from_this<IDatabase>\n         throw Exception(ErrorCodes::NOT_IMPLEMENTED, \"There is no DETACH TABLE query for Database{}\", getEngineName());\n     }\n \n+    virtual void undropTable(ContextPtr /* context */, const String & /*name*/, const StoragePtr & /*table*/, [[maybe_unused]] const String & relative_table_path = {}) /// NOLINT\n+    {\n+        throw Exception(ErrorCodes::NOT_IMPLEMENTED, \"There is no UNDROP TABLE query for Database{}\", getEngineName());\n+    }\n+\n     /// Forget about the table without deleting it's data, but rename metadata file to prevent reloading it\n     /// with next restart. The database may not support this method.\n     virtual void detachTablePermanently(ContextPtr /*context*/, const String & /*name*/)\ndiff --git a/src/Interpreters/Context.h b/src/Interpreters/Context.h\nindex bbfbd4defdc0..b9ef5e88a2ad 100644\n--- a/src/Interpreters/Context.h\n+++ b/src/Interpreters/Context.h\n@@ -402,6 +402,7 @@ class Context: public std::enable_shared_from_this<Context>\n     /// Temporary data for query execution accounting.\n     TemporaryDataOnDiskScopePtr temp_data_on_disk;\n \n+    bool in_ddl_guard = false;\n public:\n     /// Some counters for current query execution.\n     /// Most of them are workarounds and should be removed in the future.\n@@ -1014,6 +1015,9 @@ class Context: public std::enable_shared_from_this<Context>\n     bool isInternalQuery() const { return is_internal_query; }\n     void setInternalQuery(bool internal) { is_internal_query = internal; }\n \n+    bool isInDDLGuard() const { return in_ddl_guard; }\n+    void setInDDLGuard(bool ddl_guard) { in_ddl_guard = ddl_guard; }\n+\n     ActionLocksManagerPtr getActionLocksManager() const;\n \n     enum class ApplicationType\ndiff --git a/src/Interpreters/DatabaseCatalog.cpp b/src/Interpreters/DatabaseCatalog.cpp\nindex b11a973c7b79..436bf244e4e2 100644\n--- a/src/Interpreters/DatabaseCatalog.cpp\n+++ b/src/Interpreters/DatabaseCatalog.cpp\n@@ -1,6 +1,8 @@\n #include <Interpreters/DatabaseCatalog.h>\n #include <Interpreters/Context.h>\n #include <Interpreters/loadMetadata.h>\n+#include <Interpreters/executeQuery.h>\n+#include <Interpreters/InterpreterCreateQuery.h>\n #include <Storages/IStorage.h>\n #include <Databases/IDatabase.h>\n #include <Databases/DatabaseMemory.h>\n@@ -51,6 +53,7 @@ namespace ErrorCodes\n     extern const int DATABASE_ACCESS_DENIED;\n     extern const int LOGICAL_ERROR;\n     extern const int HAVE_DEPENDENT_OBJECTS;\n+    extern const int FS_METADATA_ERROR;\n }\n \n TemporaryTableHolder::TemporaryTableHolder(ContextPtr context_, const TemporaryTableHolder::Creator & creator, const ASTPtr & query)\n@@ -869,6 +872,13 @@ String DatabaseCatalog::getPathForDroppedMetadata(const StorageID & table_id) co\n            toString(table_id.uuid) + \".sql\";\n }\n \n+String DatabaseCatalog::getPathForMetadata(const StorageID & table_id) const\n+{\n+    return getContext()->getPath() + \"metadata/\" +\n+           escapeForFileName(table_id.getDatabaseName()) + \"/\" +\n+           escapeForFileName(table_id.getTableName()) + \".sql\";\n+}\n+\n void DatabaseCatalog::enqueueDroppedTableCleanup(StorageID table_id, StoragePtr table, String dropped_metadata_path, bool ignore_delay)\n {\n     assert(table_id.hasUUID());\n@@ -936,6 +946,97 @@ void DatabaseCatalog::enqueueDroppedTableCleanup(StorageID table_id, StoragePtr\n         (*drop_task)->schedule();\n }\n \n+void DatabaseCatalog::dequeueDroppedTableCleanup(StorageID table_id)\n+{\n+    String latest_metadata_dropped_path;\n+    TableMarkedAsDropped dropped_table;\n+    {\n+        std::lock_guard lock(tables_marked_dropped_mutex);\n+        time_t latest_drop_time = std::numeric_limits<time_t>::min();\n+        auto it_dropped_table = tables_marked_dropped.end();\n+        for (auto it = tables_marked_dropped.begin(); it != tables_marked_dropped.end(); ++it)\n+        {\n+            auto storage_ptr = it->table;\n+            if (it->table_id.uuid == table_id.uuid)\n+            {\n+                it_dropped_table = it;\n+                dropped_table = *it;\n+                break;\n+            }\n+            /// If table uuid exists, only find tables with equal uuid.\n+            if (table_id.uuid != UUIDHelpers::Nil)\n+                continue;\n+            if (it->table_id.database_name == table_id.database_name &&\n+                it->table_id.table_name == table_id.table_name &&\n+                it->drop_time >= latest_drop_time)\n+            {\n+                latest_drop_time = it->drop_time;\n+                it_dropped_table = it;\n+                dropped_table = *it;\n+            }\n+        }\n+        if (it_dropped_table == tables_marked_dropped.end())\n+            throw Exception(ErrorCodes::UNKNOWN_TABLE,\n+                \"The drop task of table {} is in progress, has been dropped or the database engine doesn't support it\",\n+                table_id.getNameForLogs());\n+        latest_metadata_dropped_path = it_dropped_table->metadata_path;\n+        String table_metadata_path = getPathForMetadata(it_dropped_table->table_id);\n+\n+        /// a table is successfully marked undropped,\n+        /// if and only if its metadata file was moved to a database.\n+        /// This maybe throw exception.\n+        renameNoReplace(latest_metadata_dropped_path, table_metadata_path);\n+\n+        tables_marked_dropped.erase(it_dropped_table);\n+        [[maybe_unused]] auto removed = tables_marked_dropped_ids.erase(dropped_table.table_id.uuid);\n+        assert(removed);\n+        CurrentMetrics::sub(CurrentMetrics::TablesToDropQueueSize, 1);\n+    }\n+\n+    LOG_INFO(log, \"Trying Undrop table {} from {}\", dropped_table.table_id.getNameForLogs(), latest_metadata_dropped_path);\n+\n+    try\n+    {\n+        auto wait_dropped_table_not_in_use = [&]()\n+        {\n+            while (true)\n+            {\n+                {\n+                    std::lock_guard lock(tables_marked_dropped_mutex);\n+                    if (dropped_table.table.unique())\n+                        return;\n+                }\n+                std::this_thread::sleep_for(std::chrono::milliseconds(100));\n+            }\n+        };\n+        wait_dropped_table_not_in_use();\n+\n+        auto ast_attach = std::make_shared<ASTCreateQuery>();\n+        ast_attach->attach = true;\n+        ast_attach->setDatabase(dropped_table.table_id.database_name);\n+        ast_attach->setTable(dropped_table.table_id.table_name);\n+\n+        auto query_context = Context::createCopy(getContext());\n+        /// Attach table needs to acquire ddl guard, that has already been acquired in undrop table,\n+        /// and cannot be acquired in the attach table again.\n+        query_context->setInDDLGuard(true);\n+        InterpreterCreateQuery interpreter(ast_attach, query_context);\n+        interpreter.setForceAttach(true);\n+        interpreter.setForceRestoreData(true);\n+        interpreter.execute();\n+\n+        LOG_INFO(log, \"Table {} was successfully Undropped.\", dropped_table.table_id.getNameForLogs());\n+    }\n+    catch (...)\n+    {\n+        throw Exception(\n+            ErrorCodes::FS_METADATA_ERROR,\n+            \"Cannot undrop table {} from {}\",\n+            dropped_table.table_id.getNameForLogs(),\n+            latest_metadata_dropped_path);\n+    }\n+}\n+\n void DatabaseCatalog::dropTableDataTask()\n {\n     /// Background task that removes data of tables which were marked as dropped by Atomic databases.\n@@ -948,7 +1049,8 @@ void DatabaseCatalog::dropTableDataTask()\n     try\n     {\n         std::lock_guard lock(tables_marked_dropped_mutex);\n-        assert(!tables_marked_dropped.empty());\n+        if (tables_marked_dropped.empty())\n+            return;\n         time_t current_time = std::chrono::system_clock::to_time_t(std::chrono::system_clock::now());\n         time_t min_drop_time = std::numeric_limits<time_t>::max();\n         size_t tables_in_use_count = 0;\ndiff --git a/src/Interpreters/DatabaseCatalog.h b/src/Interpreters/DatabaseCatalog.h\nindex 88645ff72afc..51e9fbdb9360 100644\n--- a/src/Interpreters/DatabaseCatalog.h\n+++ b/src/Interpreters/DatabaseCatalog.h\n@@ -215,7 +215,9 @@ class DatabaseCatalog : boost::noncopyable, WithMutableContext\n     DatabaseAndTable tryGetByUUID(const UUID & uuid) const;\n \n     String getPathForDroppedMetadata(const StorageID & table_id) const;\n+    String getPathForMetadata(const StorageID & table_id) const;\n     void enqueueDroppedTableCleanup(StorageID table_id, StoragePtr table, String dropped_metadata_path, bool ignore_delay = false);\n+    void dequeueDroppedTableCleanup(StorageID table_id);\n \n     void waitTableFinallyDropped(const UUID & uuid);\n \ndiff --git a/src/Interpreters/InterpreterCreateQuery.cpp b/src/Interpreters/InterpreterCreateQuery.cpp\nindex 7a4d65a4d57b..0ba8b0cd40b6 100644\n--- a/src/Interpreters/InterpreterCreateQuery.cpp\n+++ b/src/Interpreters/InterpreterCreateQuery.cpp\n@@ -1107,7 +1107,8 @@ BlockIO InterpreterCreateQuery::createTable(ASTCreateQuery & create)\n \n         /// For short syntax of ATTACH query we have to lock table name here, before reading metadata\n         /// and hold it until table is attached\n-        ddl_guard = DatabaseCatalog::instance().getDDLGuard(database_name, create.getTable());\n+        if (!getContext()->isInDDLGuard())\n+            ddl_guard = DatabaseCatalog::instance().getDDLGuard(database_name, create.getTable());\n \n         bool if_not_exists = create.if_not_exists;\n \n@@ -1312,7 +1313,7 @@ bool InterpreterCreateQuery::doCreateTable(ASTCreateQuery & create,\n         return true;\n     }\n \n-    if (!ddl_guard)\n+    if (!ddl_guard && !getContext()->isInDDLGuard())\n         ddl_guard = DatabaseCatalog::instance().getDDLGuard(create.getDatabase(), create.getTable());\n \n     String data_path;\ndiff --git a/src/Interpreters/InterpreterFactory.cpp b/src/Interpreters/InterpreterFactory.cpp\nindex 502de459156a..91291090e022 100644\n--- a/src/Interpreters/InterpreterFactory.cpp\n+++ b/src/Interpreters/InterpreterFactory.cpp\n@@ -8,6 +8,7 @@\n #include <Parsers/ASTDropFunctionQuery.h>\n #include <Parsers/ASTDropIndexQuery.h>\n #include <Parsers/ASTDropQuery.h>\n+#include <Parsers/ASTUndropQuery.h>\n #include <Parsers/ASTExplainQuery.h>\n #include <Parsers/ASTInsertQuery.h>\n #include <Parsers/ASTSelectIntersectExceptQuery.h>\n@@ -60,6 +61,7 @@\n #include <Interpreters/InterpreterDropFunctionQuery.h>\n #include <Interpreters/InterpreterDropIndexQuery.h>\n #include <Interpreters/InterpreterDropQuery.h>\n+#include <Interpreters/InterpreterUndropQuery.h>\n #include <Interpreters/InterpreterExistsQuery.h>\n #include <Interpreters/InterpreterExplainQuery.h>\n #include <Interpreters/InterpreterExternalDDLQuery.h>\n@@ -161,6 +163,10 @@ std::unique_ptr<IInterpreter> InterpreterFactory::get(ASTPtr & query, ContextMut\n     {\n         return std::make_unique<InterpreterDropQuery>(query, context);\n     }\n+    else if (query->as<ASTUndropQuery>())\n+    {\n+        return std::make_unique<InterpreterUndropQuery>(query, context);\n+    }\n     else if (query->as<ASTRenameQuery>())\n     {\n         return std::make_unique<InterpreterRenameQuery>(query, context);\ndiff --git a/src/Interpreters/InterpreterUndropQuery.cpp b/src/Interpreters/InterpreterUndropQuery.cpp\nnew file mode 100644\nindex 000000000000..c4c214e75ca5\n--- /dev/null\n+++ b/src/Interpreters/InterpreterUndropQuery.cpp\n@@ -0,0 +1,78 @@\n+#include <Interpreters/Context.h>\n+#include <Interpreters/executeDDLQueryOnCluster.h>\n+#include <Interpreters/InterpreterUndropQuery.h>\n+#include <Access/Common/AccessRightsElement.h>\n+#include <Parsers/ASTUndropQuery.h>\n+\n+#include \"config.h\"\n+\n+namespace DB\n+{\n+\n+namespace ErrorCodes\n+{\n+    extern const int LOGICAL_ERROR;\n+    extern const int TABLE_ALREADY_EXISTS;\n+    extern const int SUPPORT_IS_DISABLED;\n+}\n+\n+InterpreterUndropQuery::InterpreterUndropQuery(const ASTPtr & query_ptr_, ContextMutablePtr context_) : WithMutableContext(context_), query_ptr(query_ptr_)\n+{\n+}\n+\n+\n+BlockIO InterpreterUndropQuery::execute()\n+{\n+    if (!getContext()->getSettingsRef().allow_experimental_undrop_table_query)\n+        throw Exception(ErrorCodes::SUPPORT_IS_DISABLED,\n+                        \"Undrop table is experimental. \"\n+                        \"Set `allow_experimental_undrop_table_query` setting to enable it\");\n+\n+    getContext()->checkAccess(AccessType::UNDROP_TABLE);\n+    auto & undrop = query_ptr->as<ASTUndropQuery &>();\n+    if (!undrop.cluster.empty() && !maybeRemoveOnCluster(query_ptr, getContext()))\n+    {\n+        DDLQueryOnClusterParams params;\n+        params.access_to_check = getRequiredAccessForDDLOnCluster();\n+        return executeDDLQueryOnCluster(query_ptr, getContext(), params);\n+    }\n+\n+    if (undrop.table)\n+        return executeToTable(undrop);\n+    else\n+        throw Exception(ErrorCodes::LOGICAL_ERROR, \"Nothing to undrop, both names are empty\");\n+}\n+\n+BlockIO InterpreterUndropQuery::executeToTable(ASTUndropQuery & query)\n+{\n+    auto table_id = StorageID(query);\n+\n+    auto context = getContext();\n+    if (table_id.database_name.empty())\n+    {\n+        table_id.database_name = context->getCurrentDatabase();\n+        query.setDatabase(table_id.database_name);\n+    }\n+\n+    auto guard = DatabaseCatalog::instance().getDDLGuard(table_id.database_name, table_id.table_name);\n+\n+    auto database = DatabaseCatalog::instance().getDatabase(table_id.database_name);\n+    if (database->isTableExist(table_id.table_name, getContext()))\n+        throw Exception(\n+            ErrorCodes::TABLE_ALREADY_EXISTS, \"Cannot Undrop table, {} already exists\", table_id);\n+\n+    database->checkMetadataFilenameAvailability(table_id.table_name);\n+\n+    DatabaseCatalog::instance().dequeueDroppedTableCleanup(table_id);\n+    return {};\n+}\n+\n+AccessRightsElements InterpreterUndropQuery::getRequiredAccessForDDLOnCluster() const\n+{\n+    AccessRightsElements required_access;\n+    const auto & undrop = query_ptr->as<const ASTUndropQuery &>();\n+\n+    required_access.emplace_back(AccessType::UNDROP_TABLE, undrop.getDatabase(), undrop.getTable());\n+    return required_access;\n+}\n+}\ndiff --git a/src/Interpreters/InterpreterUndropQuery.h b/src/Interpreters/InterpreterUndropQuery.h\nnew file mode 100644\nindex 000000000000..a47617fd17f6\n--- /dev/null\n+++ b/src/Interpreters/InterpreterUndropQuery.h\n@@ -0,0 +1,29 @@\n+#pragma once\n+\n+#include <Databases/IDatabase.h>\n+#include <Interpreters/IInterpreter.h>\n+#include <Parsers/ASTUndropQuery.h>\n+\n+namespace DB\n+{\n+\n+class Context;\n+using DatabaseAndTable = std::pair<DatabasePtr, StoragePtr>;\n+class AccessRightsElements;\n+\n+\n+class InterpreterUndropQuery : public IInterpreter, WithMutableContext\n+{\n+public:\n+    InterpreterUndropQuery(const ASTPtr & query_ptr_, ContextMutablePtr context_);\n+\n+    /// Undrop table.\n+    BlockIO execute() override;\n+\n+private:\n+    AccessRightsElements getRequiredAccessForDDLOnCluster() const;\n+    ASTPtr query_ptr;\n+\n+    BlockIO executeToTable(ASTUndropQuery & query);\n+};\n+}\ndiff --git a/src/Parsers/ASTUndropQuery.cpp b/src/Parsers/ASTUndropQuery.cpp\nnew file mode 100644\nindex 000000000000..0b8a18b12c95\n--- /dev/null\n+++ b/src/Parsers/ASTUndropQuery.cpp\n@@ -0,0 +1,42 @@\n+#include <Parsers/ASTUndropQuery.h>\n+#include <Common/quoteString.h>\n+#include <IO/Operators.h>\n+\n+\n+namespace DB\n+{\n+\n+String ASTUndropQuery::getID(char delim) const\n+{\n+    return \"UndropQuery\" + (delim + getDatabase()) + delim + getTable();\n+}\n+\n+ASTPtr ASTUndropQuery::clone() const\n+{\n+    auto res = std::make_shared<ASTUndropQuery>(*this);\n+    cloneOutputOptions(*res);\n+    cloneTableOptions(*res);\n+    return res;\n+}\n+\n+void ASTUndropQuery::formatQueryImpl(const FormatSettings & settings, FormatState &, FormatStateStacked) const\n+{\n+    settings.ostr << (settings.hilite ? hilite_keyword : \"\");\n+    settings.ostr << \"UNDROP \";\n+    settings.ostr << \"TABLE \";\n+    settings.ostr << (settings.hilite ? hilite_none : \"\");\n+\n+    assert (table);\n+    if (!database)\n+        settings.ostr << backQuoteIfNeed(getTable());\n+    else\n+        settings.ostr << backQuoteIfNeed(getDatabase()) + \".\" << backQuoteIfNeed(getTable());\n+\n+    if (uuid != UUIDHelpers::Nil)\n+        settings.ostr << (settings.hilite ? hilite_keyword : \"\") << \" UUID \" << (settings.hilite ? hilite_none : \"\")\n+            << quoteString(toString(uuid));\n+\n+    formatOnCluster(settings);\n+}\n+\n+}\ndiff --git a/src/Parsers/ASTUndropQuery.h b/src/Parsers/ASTUndropQuery.h\nnew file mode 100644\nindex 000000000000..7aac4c86c5b3\n--- /dev/null\n+++ b/src/Parsers/ASTUndropQuery.h\n@@ -0,0 +1,30 @@\n+#pragma once\n+\n+#include <Parsers/ASTQueryWithTableAndOutput.h>\n+#include <Parsers/ASTQueryWithOnCluster.h>\n+\n+\n+namespace DB\n+{\n+\n+/** UNDROP query\n+  */\n+class ASTUndropQuery : public ASTQueryWithTableAndOutput, public ASTQueryWithOnCluster\n+{\n+public:\n+    /** Get the text that identifies this element. */\n+    String getID(char) const override;\n+    ASTPtr clone() const override;\n+\n+    ASTPtr getRewrittenASTWithoutOnCluster(const WithoutOnClusterASTRewriteParams & params) const override\n+    {\n+        return removeOnCluster<ASTUndropQuery>(clone(), params.default_database);\n+    }\n+\n+    QueryKind getQueryKind() const override { return QueryKind::Undrop; }\n+\n+protected:\n+    void formatQueryImpl(const FormatSettings & settings, FormatState &, FormatStateStacked) const override;\n+};\n+\n+}\ndiff --git a/src/Parsers/IAST.h b/src/Parsers/IAST.h\nindex 5928506aa5b7..606a822eceeb 100644\n--- a/src/Parsers/IAST.h\n+++ b/src/Parsers/IAST.h\n@@ -268,6 +268,7 @@ class IAST : public std::enable_shared_from_this<IAST>, public TypePromotion<IAS\n         Delete,\n         Create,\n         Drop,\n+        Undrop,\n         Rename,\n         Optimize,\n         Check,\ndiff --git a/src/Parsers/ParserQueryWithOutput.cpp b/src/Parsers/ParserQueryWithOutput.cpp\nindex 7024d8cbe11a..d6cf9109be05 100644\n--- a/src/Parsers/ParserQueryWithOutput.cpp\n+++ b/src/Parsers/ParserQueryWithOutput.cpp\n@@ -6,6 +6,7 @@\n #include <Parsers/ParserCreateQuery.h>\n #include <Parsers/ParserDescribeTableQuery.h>\n #include <Parsers/ParserDropQuery.h>\n+#include <Parsers/ParserUndropQuery.h>\n #include <Parsers/ParserExplainQuery.h>\n #include <Parsers/ParserKillQueryQuery.h>\n #include <Parsers/ParserOptimizeQuery.h>\n@@ -44,6 +45,7 @@ bool ParserQueryWithOutput::parseImpl(Pos & pos, ASTPtr & node, Expected & expec\n     ParserAlterQuery alter_p;\n     ParserRenameQuery rename_p;\n     ParserDropQuery drop_p;\n+    ParserUndropQuery undrop_p;\n     ParserCheckQuery check_p;\n     ParserOptimizeQuery optimize_p;\n     ParserKillQueryQuery kill_query_p;\n@@ -71,6 +73,7 @@ bool ParserQueryWithOutput::parseImpl(Pos & pos, ASTPtr & node, Expected & expec\n         || alter_p.parse(pos, query, expected)\n         || rename_p.parse(pos, query, expected)\n         || drop_p.parse(pos, query, expected)\n+        || undrop_p.parse(pos, query, expected)\n         || check_p.parse(pos, query, expected)\n         || kill_query_p.parse(pos, query, expected)\n         || optimize_p.parse(pos, query, expected)\ndiff --git a/src/Parsers/ParserUndropQuery.cpp b/src/Parsers/ParserUndropQuery.cpp\nnew file mode 100644\nindex 000000000000..3784ab0f3539\n--- /dev/null\n+++ b/src/Parsers/ParserUndropQuery.cpp\n@@ -0,0 +1,81 @@\n+#include <Parsers/ASTUndropQuery.h>\n+\n+#include <Parsers/CommonParsers.h>\n+#include <Parsers/ParserUndropQuery.h>\n+#include \"Parsers/ASTLiteral.h\"\n+\n+\n+namespace DB\n+{\n+\n+namespace\n+{\n+\n+bool parseUndropQuery(IParser::Pos & pos, ASTPtr & node, Expected & expected)\n+{\n+    ParserKeyword s_table(\"TABLE\");\n+    ParserToken s_dot(TokenType::Dot);\n+    ParserIdentifier name_p(true);\n+\n+    ASTPtr database;\n+    ASTPtr table;\n+    String cluster_str;\n+    /// We can specify the table's uuid for exact undrop.\n+    /// because the same name of a table can be created and deleted multiple times,\n+    /// and can generate multiple different uuids.\n+    UUID uuid = UUIDHelpers::Nil;\n+\n+    if (!s_table.ignore(pos, expected))\n+        return false;\n+    if (!name_p.parse(pos, table, expected))\n+        return false;\n+    if (s_dot.ignore(pos, expected))\n+    {\n+        database = table;\n+        if (!name_p.parse(pos, table, expected))\n+            return false;\n+    }\n+    if (ParserKeyword(\"UUID\").ignore(pos, expected))\n+    {\n+        ParserStringLiteral uuid_p;\n+        ASTPtr ast_uuid;\n+        if (!uuid_p.parse(pos, ast_uuid, expected))\n+            return false;\n+        uuid = parseFromString<UUID>(ast_uuid->as<ASTLiteral>()->value.get<String>());\n+    }\n+    if (ParserKeyword{\"ON\"}.ignore(pos, expected))\n+    {\n+        if (!ASTQueryWithOnCluster::parse(pos, cluster_str, expected))\n+            return false;\n+    }\n+    auto query = std::make_shared<ASTUndropQuery>();\n+    node = query;\n+\n+    query->database = database;\n+    query->table = table;\n+    query->uuid = uuid;\n+\n+    if (database)\n+        query->children.push_back(database);\n+\n+    assert (table);\n+    query->children.push_back(table);\n+\n+    query->cluster = cluster_str;\n+\n+    return true;\n+}\n+\n+}\n+\n+bool ParserUndropQuery::parseImpl(Pos & pos, ASTPtr & node, Expected & expected)\n+{\n+    ParserKeyword s_undrop(\"UNDROP\");\n+\n+    if (s_undrop.ignore(pos, expected))\n+        return parseUndropQuery(pos, node, expected);\n+    else\n+        return false;\n+}\n+\n+}\ndiff --git a/src/Parsers/ParserUndropQuery.h b/src/Parsers/ParserUndropQuery.h\nnew file mode 100644\nindex 000000000000..4b2896003960\n--- /dev/null\n+++ b/src/Parsers/ParserUndropQuery.h\n@@ -0,0 +1,20 @@\n+#pragma once\n+\n+#include <Parsers/IParserBase.h>\n+#include <Parsers/ExpressionElementParsers.h>\n+\n+\n+namespace DB\n+{\n+\n+/** Query like this:\n+  * UNDROP TABLE [db.]name [UUID uuid]\n+  */\n+class ParserUndropQuery : public IParserBase\n+{\n+protected:\n+    const char * getName() const  override{ return \"UNDROP query\"; }\n+    bool parseImpl(Pos & pos, ASTPtr & node, Expected & expected) override;\n+};\n+\n+}\n",
  "test_patch": "diff --git a/src/Access/tests/gtest_access_rights_ops.cpp b/src/Access/tests/gtest_access_rights_ops.cpp\nindex 025f70af5876..5f1f13ca5a21 100644\n--- a/src/Access/tests/gtest_access_rights_ops.cpp\n+++ b/src/Access/tests/gtest_access_rights_ops.cpp\n@@ -48,7 +48,7 @@ TEST(AccessRights, Union)\n     ASSERT_EQ(lhs.toString(),\n               \"GRANT INSERT ON *.*, \"\n               \"GRANT SHOW, SELECT, ALTER, CREATE DATABASE, CREATE TABLE, CREATE VIEW, \"\n-              \"CREATE DICTIONARY, DROP DATABASE, DROP TABLE, DROP VIEW, DROP DICTIONARY, \"\n+              \"CREATE DICTIONARY, DROP DATABASE, DROP TABLE, DROP VIEW, DROP DICTIONARY, UNDROP TABLE, \"\n               \"TRUNCATE, OPTIMIZE, BACKUP, CREATE ROW POLICY, ALTER ROW POLICY, DROP ROW POLICY, \"\n               \"SHOW ROW POLICIES, SYSTEM MERGES, SYSTEM TTL MERGES, SYSTEM FETCHES, \"\n               \"SYSTEM MOVES, SYSTEM SENDS, SYSTEM REPLICATION QUEUES, \"\ndiff --git a/tests/integration/test_grant_and_revoke/test.py b/tests/integration/test_grant_and_revoke/test.py\nindex 4d89e6255d3b..4ad046fe5d23 100644\n--- a/tests/integration/test_grant_and_revoke/test.py\n+++ b/tests/integration/test_grant_and_revoke/test.py\n@@ -184,7 +184,7 @@ def test_grant_all_on_table():\n     assert (\n         instance.query(\"SHOW GRANTS FOR B\")\n         == \"GRANT SHOW TABLES, SHOW COLUMNS, SHOW DICTIONARIES, SELECT, INSERT, ALTER TABLE, ALTER VIEW, CREATE TABLE, CREATE VIEW, CREATE DICTIONARY, \"\n-        \"DROP TABLE, DROP VIEW, DROP DICTIONARY, TRUNCATE, OPTIMIZE, BACKUP, CREATE ROW POLICY, ALTER ROW POLICY, DROP ROW POLICY, SHOW ROW POLICIES, \"\n+        \"DROP TABLE, DROP VIEW, DROP DICTIONARY, UNDROP TABLE, TRUNCATE, OPTIMIZE, BACKUP, CREATE ROW POLICY, ALTER ROW POLICY, DROP ROW POLICY, SHOW ROW POLICIES, \"\n         \"SYSTEM MERGES, SYSTEM TTL MERGES, SYSTEM FETCHES, SYSTEM MOVES, SYSTEM SENDS, SYSTEM REPLICATION QUEUES, SYSTEM DROP REPLICA, SYSTEM SYNC REPLICA, \"\n         \"SYSTEM RESTART REPLICA, SYSTEM RESTORE REPLICA, SYSTEM WAIT LOADING PARTS, SYSTEM FLUSH DISTRIBUTED, dictGet ON test.table TO B\\n\"\n     )\ndiff --git a/tests/integration/test_undrop_query/__init__.py b/tests/integration/test_undrop_query/__init__.py\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/integration/test_undrop_query/configs/with_delay_config.xml b/tests/integration/test_undrop_query/configs/with_delay_config.xml\nnew file mode 100644\nindex 000000000000..c672b187b018\n--- /dev/null\n+++ b/tests/integration/test_undrop_query/configs/with_delay_config.xml\n@@ -0,0 +1,3 @@\n+<clickhouse>\n+    <database_atomic_delay_before_drop_table_sec>5</database_atomic_delay_before_drop_table_sec>\n+</clickhouse>\ndiff --git a/tests/integration/test_undrop_query/test.py b/tests/integration/test_undrop_query/test.py\nnew file mode 100644\nindex 000000000000..63d92d84541a\n--- /dev/null\n+++ b/tests/integration/test_undrop_query/test.py\n@@ -0,0 +1,59 @@\n+import pytest\n+import uuid\n+import random\n+import logging\n+import time\n+\n+from helpers.cluster import ClickHouseCluster\n+\n+cluster = ClickHouseCluster(__file__)\n+\n+node = cluster.add_instance(\"node\", main_configs=[\"configs/with_delay_config.xml\"])\n+\n+\n+@pytest.fixture(scope=\"module\")\n+def started_cluster():\n+    try:\n+        cluster.start()\n+        yield cluster\n+\n+    finally:\n+        cluster.shutdown()\n+\n+\n+def test_undrop_drop_and_undrop_loop(started_cluster):\n+    count = 0\n+    node.query(\"set allow_experimental_undrop_table_query = 1;\")\n+    while count < 10:\n+        random_sec = random.randint(0, 10)\n+        table_uuid = uuid.uuid1().__str__()\n+        logging.info(\n+            \"random_sec: \" + random_sec.__str__() + \", table_uuid: \" + table_uuid\n+        )\n+        node.query(\n+            \"create table test_undrop_loop\"\n+            + count.__str__()\n+            + \" UUID '\"\n+            + table_uuid\n+            + \"' (id Int32) Engine=MergeTree() order by id;\"\n+        )\n+        node.query(\"drop table test_undrop_loop\" + count.__str__() + \";\")\n+        time.sleep(random_sec)\n+        if random_sec >= 5:\n+            error = node.query_and_get_error(\n+                \"undrop table test_undrop_loop\"\n+                + count.__str__()\n+                + \" uuid '\"\n+                + table_uuid\n+                + \"' settings allow_experimental_undrop_table_query = 1;\"\n+            )\n+            assert \"UNKNOWN_TABLE\" in error\n+        else:\n+            node.query(\n+                \"undrop table test_undrop_loop\"\n+                + count.__str__()\n+                + \" uuid '\"\n+                + table_uuid\n+                + \"' settings allow_experimental_undrop_table_query = 1;\"\n+            )\n+            count = count + 1\ndiff --git a/tests/queries/0_stateless/01271_show_privileges.reference b/tests/queries/0_stateless/01271_show_privileges.reference\nindex 94ab2d8b01d2..553fee1f4356 100644\n--- a/tests/queries/0_stateless/01271_show_privileges.reference\n+++ b/tests/queries/0_stateless/01271_show_privileges.reference\n@@ -62,6 +62,7 @@ DROP DICTIONARY\t[]\tDICTIONARY\tDROP\n DROP FUNCTION\t[]\tGLOBAL\tDROP\n DROP NAMED COLLECTION\t[]\tNAMED_COLLECTION\tNAMED COLLECTION CONTROL\n DROP\t[]\t\\N\tALL\n+UNDROP TABLE\t[]\tTABLE\tALL\n TRUNCATE\t['TRUNCATE TABLE']\tTABLE\tALL\n OPTIMIZE\t['OPTIMIZE TABLE']\tTABLE\tALL\n BACKUP\t[]\tTABLE\tALL\ndiff --git a/tests/queries/0_stateless/02117_show_create_table_system.reference b/tests/queries/0_stateless/02117_show_create_table_system.reference\nindex 6fb596573054..b07d6e011613 100644\n--- a/tests/queries/0_stateless/02117_show_create_table_system.reference\n+++ b/tests/queries/0_stateless/02117_show_create_table_system.reference\n@@ -289,7 +289,7 @@ CREATE TABLE system.grants\n (\n     `user_name` Nullable(String),\n     `role_name` Nullable(String),\n-    `access_type` Enum16('SHOW DATABASES' = 0, 'SHOW TABLES' = 1, 'SHOW COLUMNS' = 2, 'SHOW DICTIONARIES' = 3, 'SHOW' = 4, 'SHOW FILESYSTEM CACHES' = 5, 'SELECT' = 6, 'INSERT' = 7, 'ALTER UPDATE' = 8, 'ALTER DELETE' = 9, 'ALTER ADD COLUMN' = 10, 'ALTER MODIFY COLUMN' = 11, 'ALTER DROP COLUMN' = 12, 'ALTER COMMENT COLUMN' = 13, 'ALTER CLEAR COLUMN' = 14, 'ALTER RENAME COLUMN' = 15, 'ALTER MATERIALIZE COLUMN' = 16, 'ALTER COLUMN' = 17, 'ALTER MODIFY COMMENT' = 18, 'ALTER ORDER BY' = 19, 'ALTER SAMPLE BY' = 20, 'ALTER ADD INDEX' = 21, 'ALTER DROP INDEX' = 22, 'ALTER MATERIALIZE INDEX' = 23, 'ALTER CLEAR INDEX' = 24, 'ALTER INDEX' = 25, 'ALTER ADD PROJECTION' = 26, 'ALTER DROP PROJECTION' = 27, 'ALTER MATERIALIZE PROJECTION' = 28, 'ALTER CLEAR PROJECTION' = 29, 'ALTER PROJECTION' = 30, 'ALTER ADD CONSTRAINT' = 31, 'ALTER DROP CONSTRAINT' = 32, 'ALTER CONSTRAINT' = 33, 'ALTER TTL' = 34, 'ALTER MATERIALIZE TTL' = 35, 'ALTER SETTINGS' = 36, 'ALTER MOVE PARTITION' = 37, 'ALTER FETCH PARTITION' = 38, 'ALTER FREEZE PARTITION' = 39, 'ALTER DATABASE SETTINGS' = 40, 'ALTER NAMED COLLECTION' = 41, 'ALTER TABLE' = 42, 'ALTER DATABASE' = 43, 'ALTER VIEW REFRESH' = 44, 'ALTER VIEW MODIFY QUERY' = 45, 'ALTER VIEW' = 46, 'ALTER' = 47, 'CREATE DATABASE' = 48, 'CREATE TABLE' = 49, 'CREATE VIEW' = 50, 'CREATE DICTIONARY' = 51, 'CREATE TEMPORARY TABLE' = 52, 'CREATE ARBITRARY TEMPORARY TABLE' = 53, 'CREATE FUNCTION' = 54, 'CREATE NAMED COLLECTION' = 55, 'CREATE' = 56, 'DROP DATABASE' = 57, 'DROP TABLE' = 58, 'DROP VIEW' = 59, 'DROP DICTIONARY' = 60, 'DROP FUNCTION' = 61, 'DROP NAMED COLLECTION' = 62, 'DROP' = 63, 'TRUNCATE' = 64, 'OPTIMIZE' = 65, 'BACKUP' = 66, 'KILL QUERY' = 67, 'KILL TRANSACTION' = 68, 'MOVE PARTITION BETWEEN SHARDS' = 69, 'CREATE USER' = 70, 'ALTER USER' = 71, 'DROP USER' = 72, 'CREATE ROLE' = 73, 'ALTER ROLE' = 74, 'DROP ROLE' = 75, 'ROLE ADMIN' = 76, 'CREATE ROW POLICY' = 77, 'ALTER ROW POLICY' = 78, 'DROP ROW POLICY' = 79, 'CREATE QUOTA' = 80, 'ALTER QUOTA' = 81, 'DROP QUOTA' = 82, 'CREATE SETTINGS PROFILE' = 83, 'ALTER SETTINGS PROFILE' = 84, 'DROP SETTINGS PROFILE' = 85, 'SHOW USERS' = 86, 'SHOW ROLES' = 87, 'SHOW ROW POLICIES' = 88, 'SHOW QUOTAS' = 89, 'SHOW SETTINGS PROFILES' = 90, 'SHOW ACCESS' = 91, 'ACCESS MANAGEMENT' = 92, 'SHOW NAMED COLLECTIONS' = 93, 'SHOW NAMED COLLECTIONS SECRETS' = 94, 'NAMED COLLECTION CONTROL' = 95, 'SYSTEM SHUTDOWN' = 96, 'SYSTEM DROP DNS CACHE' = 97, 'SYSTEM DROP MARK CACHE' = 98, 'SYSTEM DROP UNCOMPRESSED CACHE' = 99, 'SYSTEM DROP MMAP CACHE' = 100, 'SYSTEM DROP QUERY CACHE' = 101, 'SYSTEM DROP COMPILED EXPRESSION CACHE' = 102, 'SYSTEM DROP FILESYSTEM CACHE' = 103, 'SYSTEM DROP SCHEMA CACHE' = 104, 'SYSTEM DROP S3 CLIENT CACHE' = 105, 'SYSTEM DROP CACHE' = 106, 'SYSTEM RELOAD CONFIG' = 107, 'SYSTEM RELOAD USERS' = 108, 'SYSTEM RELOAD SYMBOLS' = 109, 'SYSTEM RELOAD DICTIONARY' = 110, 'SYSTEM RELOAD MODEL' = 111, 'SYSTEM RELOAD FUNCTION' = 112, 'SYSTEM RELOAD EMBEDDED DICTIONARIES' = 113, 'SYSTEM RELOAD' = 114, 'SYSTEM RESTART DISK' = 115, 'SYSTEM MERGES' = 116, 'SYSTEM TTL MERGES' = 117, 'SYSTEM FETCHES' = 118, 'SYSTEM MOVES' = 119, 'SYSTEM DISTRIBUTED SENDS' = 120, 'SYSTEM REPLICATED SENDS' = 121, 'SYSTEM SENDS' = 122, 'SYSTEM REPLICATION QUEUES' = 123, 'SYSTEM DROP REPLICA' = 124, 'SYSTEM SYNC REPLICA' = 125, 'SYSTEM RESTART REPLICA' = 126, 'SYSTEM RESTORE REPLICA' = 127, 'SYSTEM WAIT LOADING PARTS' = 128, 'SYSTEM SYNC DATABASE REPLICA' = 129, 'SYSTEM SYNC TRANSACTION LOG' = 130, 'SYSTEM SYNC FILE CACHE' = 131, 'SYSTEM FLUSH DISTRIBUTED' = 132, 'SYSTEM FLUSH LOGS' = 133, 'SYSTEM FLUSH' = 134, 'SYSTEM THREAD FUZZER' = 135, 'SYSTEM UNFREEZE' = 136, 'SYSTEM' = 137, 'dictGet' = 138, 'addressToLine' = 139, 'addressToLineWithInlines' = 140, 'addressToSymbol' = 141, 'demangle' = 142, 'INTROSPECTION' = 143, 'FILE' = 144, 'URL' = 145, 'REMOTE' = 146, 'MONGO' = 147, 'MEILISEARCH' = 148, 'MYSQL' = 149, 'POSTGRES' = 150, 'SQLITE' = 151, 'ODBC' = 152, 'JDBC' = 153, 'HDFS' = 154, 'S3' = 155, 'HIVE' = 156, 'SOURCES' = 157, 'CLUSTER' = 158, 'ALL' = 159, 'NONE' = 160),\n+    `access_type` Enum16('SHOW DATABASES' = 0, 'SHOW TABLES' = 1, 'SHOW COLUMNS' = 2, 'SHOW DICTIONARIES' = 3, 'SHOW' = 4, 'SHOW FILESYSTEM CACHES' = 5, 'SELECT' = 6, 'INSERT' = 7, 'ALTER UPDATE' = 8, 'ALTER DELETE' = 9, 'ALTER ADD COLUMN' = 10, 'ALTER MODIFY COLUMN' = 11, 'ALTER DROP COLUMN' = 12, 'ALTER COMMENT COLUMN' = 13, 'ALTER CLEAR COLUMN' = 14, 'ALTER RENAME COLUMN' = 15, 'ALTER MATERIALIZE COLUMN' = 16, 'ALTER COLUMN' = 17, 'ALTER MODIFY COMMENT' = 18, 'ALTER ORDER BY' = 19, 'ALTER SAMPLE BY' = 20, 'ALTER ADD INDEX' = 21, 'ALTER DROP INDEX' = 22, 'ALTER MATERIALIZE INDEX' = 23, 'ALTER CLEAR INDEX' = 24, 'ALTER INDEX' = 25, 'ALTER ADD PROJECTION' = 26, 'ALTER DROP PROJECTION' = 27, 'ALTER MATERIALIZE PROJECTION' = 28, 'ALTER CLEAR PROJECTION' = 29, 'ALTER PROJECTION' = 30, 'ALTER ADD CONSTRAINT' = 31, 'ALTER DROP CONSTRAINT' = 32, 'ALTER CONSTRAINT' = 33, 'ALTER TTL' = 34, 'ALTER MATERIALIZE TTL' = 35, 'ALTER SETTINGS' = 36, 'ALTER MOVE PARTITION' = 37, 'ALTER FETCH PARTITION' = 38, 'ALTER FREEZE PARTITION' = 39, 'ALTER DATABASE SETTINGS' = 40, 'ALTER NAMED COLLECTION' = 41, 'ALTER TABLE' = 42, 'ALTER DATABASE' = 43, 'ALTER VIEW REFRESH' = 44, 'ALTER VIEW MODIFY QUERY' = 45, 'ALTER VIEW' = 46, 'ALTER' = 47, 'CREATE DATABASE' = 48, 'CREATE TABLE' = 49, 'CREATE VIEW' = 50, 'CREATE DICTIONARY' = 51, 'CREATE TEMPORARY TABLE' = 52, 'CREATE ARBITRARY TEMPORARY TABLE' = 53, 'CREATE FUNCTION' = 54, 'CREATE NAMED COLLECTION' = 55, 'CREATE' = 56, 'DROP DATABASE' = 57, 'DROP TABLE' = 58, 'DROP VIEW' = 59, 'DROP DICTIONARY' = 60, 'DROP FUNCTION' = 61, 'DROP NAMED COLLECTION' = 62, 'DROP' = 63, 'UNDROP TABLE' = 64, 'TRUNCATE' = 65, 'OPTIMIZE' = 66, 'BACKUP' = 67, 'KILL QUERY' = 68, 'KILL TRANSACTION' = 69, 'MOVE PARTITION BETWEEN SHARDS' = 70, 'CREATE USER' = 71, 'ALTER USER' = 72, 'DROP USER' = 73, 'CREATE ROLE' = 74, 'ALTER ROLE' = 75, 'DROP ROLE' = 76, 'ROLE ADMIN' = 77, 'CREATE ROW POLICY' = 78, 'ALTER ROW POLICY' = 79, 'DROP ROW POLICY' = 80, 'CREATE QUOTA' = 81, 'ALTER QUOTA' = 82, 'DROP QUOTA' = 83, 'CREATE SETTINGS PROFILE' = 84, 'ALTER SETTINGS PROFILE' = 85, 'DROP SETTINGS PROFILE' = 86, 'SHOW USERS' = 87, 'SHOW ROLES' = 88, 'SHOW ROW POLICIES' = 89, 'SHOW QUOTAS' = 90, 'SHOW SETTINGS PROFILES' = 91, 'SHOW ACCESS' = 92, 'ACCESS MANAGEMENT' = 93, 'SHOW NAMED COLLECTIONS' = 94, 'SHOW NAMED COLLECTIONS SECRETS' = 95, 'NAMED COLLECTION CONTROL' = 96, 'SYSTEM SHUTDOWN' = 97, 'SYSTEM DROP DNS CACHE' = 98, 'SYSTEM DROP MARK CACHE' = 99, 'SYSTEM DROP UNCOMPRESSED CACHE' = 100, 'SYSTEM DROP MMAP CACHE' = 101, 'SYSTEM DROP QUERY CACHE' = 102, 'SYSTEM DROP COMPILED EXPRESSION CACHE' = 103, 'SYSTEM DROP FILESYSTEM CACHE' = 104, 'SYSTEM DROP SCHEMA CACHE' = 105, 'SYSTEM DROP S3 CLIENT CACHE' = 106, 'SYSTEM DROP CACHE' = 107, 'SYSTEM RELOAD CONFIG' = 108, 'SYSTEM RELOAD USERS' = 109, 'SYSTEM RELOAD SYMBOLS' = 110, 'SYSTEM RELOAD DICTIONARY' = 111, 'SYSTEM RELOAD MODEL' = 112, 'SYSTEM RELOAD FUNCTION' = 113, 'SYSTEM RELOAD EMBEDDED DICTIONARIES' = 114, 'SYSTEM RELOAD' = 115, 'SYSTEM RESTART DISK' = 116, 'SYSTEM MERGES' = 117, 'SYSTEM TTL MERGES' = 118, 'SYSTEM FETCHES' = 119, 'SYSTEM MOVES' = 120, 'SYSTEM DISTRIBUTED SENDS' = 121, 'SYSTEM REPLICATED SENDS' = 122, 'SYSTEM SENDS' = 123, 'SYSTEM REPLICATION QUEUES' = 124, 'SYSTEM DROP REPLICA' = 125, 'SYSTEM SYNC REPLICA' = 126, 'SYSTEM RESTART REPLICA' = 127, 'SYSTEM RESTORE REPLICA' = 128, 'SYSTEM WAIT LOADING PARTS' = 129, 'SYSTEM SYNC DATABASE REPLICA' = 130, 'SYSTEM SYNC TRANSACTION LOG' = 131, 'SYSTEM SYNC FILE CACHE' = 132, 'SYSTEM FLUSH DISTRIBUTED' = 133, 'SYSTEM FLUSH LOGS' = 134, 'SYSTEM FLUSH' = 135, 'SYSTEM THREAD FUZZER' = 136, 'SYSTEM UNFREEZE' = 137, 'SYSTEM' = 138, 'dictGet' = 139, 'addressToLine' = 140, 'addressToLineWithInlines' = 141, 'addressToSymbol' = 142, 'demangle' = 143, 'INTROSPECTION' = 144, 'FILE' = 145, 'URL' = 146, 'REMOTE' = 147, 'MONGO' = 148, 'MEILISEARCH' = 149, 'MYSQL' = 150, 'POSTGRES' = 151, 'SQLITE' = 152, 'ODBC' = 153, 'JDBC' = 154, 'HDFS' = 155, 'S3' = 156, 'HIVE' = 157, 'SOURCES' = 158, 'CLUSTER' = 159, 'ALL' = 160, 'NONE' = 161),\n     `database` Nullable(String),\n     `table` Nullable(String),\n     `column` Nullable(String),\n@@ -570,10 +570,10 @@ ENGINE = SystemPartsColumns\n COMMENT 'SYSTEM TABLE is built on the fly.'\n CREATE TABLE system.privileges\n (\n-    `privilege` Enum16('SHOW DATABASES' = 0, 'SHOW TABLES' = 1, 'SHOW COLUMNS' = 2, 'SHOW DICTIONARIES' = 3, 'SHOW' = 4, 'SHOW FILESYSTEM CACHES' = 5, 'SELECT' = 6, 'INSERT' = 7, 'ALTER UPDATE' = 8, 'ALTER DELETE' = 9, 'ALTER ADD COLUMN' = 10, 'ALTER MODIFY COLUMN' = 11, 'ALTER DROP COLUMN' = 12, 'ALTER COMMENT COLUMN' = 13, 'ALTER CLEAR COLUMN' = 14, 'ALTER RENAME COLUMN' = 15, 'ALTER MATERIALIZE COLUMN' = 16, 'ALTER COLUMN' = 17, 'ALTER MODIFY COMMENT' = 18, 'ALTER ORDER BY' = 19, 'ALTER SAMPLE BY' = 20, 'ALTER ADD INDEX' = 21, 'ALTER DROP INDEX' = 22, 'ALTER MATERIALIZE INDEX' = 23, 'ALTER CLEAR INDEX' = 24, 'ALTER INDEX' = 25, 'ALTER ADD PROJECTION' = 26, 'ALTER DROP PROJECTION' = 27, 'ALTER MATERIALIZE PROJECTION' = 28, 'ALTER CLEAR PROJECTION' = 29, 'ALTER PROJECTION' = 30, 'ALTER ADD CONSTRAINT' = 31, 'ALTER DROP CONSTRAINT' = 32, 'ALTER CONSTRAINT' = 33, 'ALTER TTL' = 34, 'ALTER MATERIALIZE TTL' = 35, 'ALTER SETTINGS' = 36, 'ALTER MOVE PARTITION' = 37, 'ALTER FETCH PARTITION' = 38, 'ALTER FREEZE PARTITION' = 39, 'ALTER DATABASE SETTINGS' = 40, 'ALTER NAMED COLLECTION' = 41, 'ALTER TABLE' = 42, 'ALTER DATABASE' = 43, 'ALTER VIEW REFRESH' = 44, 'ALTER VIEW MODIFY QUERY' = 45, 'ALTER VIEW' = 46, 'ALTER' = 47, 'CREATE DATABASE' = 48, 'CREATE TABLE' = 49, 'CREATE VIEW' = 50, 'CREATE DICTIONARY' = 51, 'CREATE TEMPORARY TABLE' = 52, 'CREATE ARBITRARY TEMPORARY TABLE' = 53, 'CREATE FUNCTION' = 54, 'CREATE NAMED COLLECTION' = 55, 'CREATE' = 56, 'DROP DATABASE' = 57, 'DROP TABLE' = 58, 'DROP VIEW' = 59, 'DROP DICTIONARY' = 60, 'DROP FUNCTION' = 61, 'DROP NAMED COLLECTION' = 62, 'DROP' = 63, 'TRUNCATE' = 64, 'OPTIMIZE' = 65, 'BACKUP' = 66, 'KILL QUERY' = 67, 'KILL TRANSACTION' = 68, 'MOVE PARTITION BETWEEN SHARDS' = 69, 'CREATE USER' = 70, 'ALTER USER' = 71, 'DROP USER' = 72, 'CREATE ROLE' = 73, 'ALTER ROLE' = 74, 'DROP ROLE' = 75, 'ROLE ADMIN' = 76, 'CREATE ROW POLICY' = 77, 'ALTER ROW POLICY' = 78, 'DROP ROW POLICY' = 79, 'CREATE QUOTA' = 80, 'ALTER QUOTA' = 81, 'DROP QUOTA' = 82, 'CREATE SETTINGS PROFILE' = 83, 'ALTER SETTINGS PROFILE' = 84, 'DROP SETTINGS PROFILE' = 85, 'SHOW USERS' = 86, 'SHOW ROLES' = 87, 'SHOW ROW POLICIES' = 88, 'SHOW QUOTAS' = 89, 'SHOW SETTINGS PROFILES' = 90, 'SHOW ACCESS' = 91, 'ACCESS MANAGEMENT' = 92, 'SHOW NAMED COLLECTIONS' = 93, 'SHOW NAMED COLLECTIONS SECRETS' = 94, 'NAMED COLLECTION CONTROL' = 95, 'SYSTEM SHUTDOWN' = 96, 'SYSTEM DROP DNS CACHE' = 97, 'SYSTEM DROP MARK CACHE' = 98, 'SYSTEM DROP UNCOMPRESSED CACHE' = 99, 'SYSTEM DROP MMAP CACHE' = 100, 'SYSTEM DROP QUERY CACHE' = 101, 'SYSTEM DROP COMPILED EXPRESSION CACHE' = 102, 'SYSTEM DROP FILESYSTEM CACHE' = 103, 'SYSTEM DROP SCHEMA CACHE' = 104, 'SYSTEM DROP S3 CLIENT CACHE' = 105, 'SYSTEM DROP CACHE' = 106, 'SYSTEM RELOAD CONFIG' = 107, 'SYSTEM RELOAD USERS' = 108, 'SYSTEM RELOAD SYMBOLS' = 109, 'SYSTEM RELOAD DICTIONARY' = 110, 'SYSTEM RELOAD MODEL' = 111, 'SYSTEM RELOAD FUNCTION' = 112, 'SYSTEM RELOAD EMBEDDED DICTIONARIES' = 113, 'SYSTEM RELOAD' = 114, 'SYSTEM RESTART DISK' = 115, 'SYSTEM MERGES' = 116, 'SYSTEM TTL MERGES' = 117, 'SYSTEM FETCHES' = 118, 'SYSTEM MOVES' = 119, 'SYSTEM DISTRIBUTED SENDS' = 120, 'SYSTEM REPLICATED SENDS' = 121, 'SYSTEM SENDS' = 122, 'SYSTEM REPLICATION QUEUES' = 123, 'SYSTEM DROP REPLICA' = 124, 'SYSTEM SYNC REPLICA' = 125, 'SYSTEM RESTART REPLICA' = 126, 'SYSTEM RESTORE REPLICA' = 127, 'SYSTEM WAIT LOADING PARTS' = 128, 'SYSTEM SYNC DATABASE REPLICA' = 129, 'SYSTEM SYNC TRANSACTION LOG' = 130, 'SYSTEM SYNC FILE CACHE' = 131, 'SYSTEM FLUSH DISTRIBUTED' = 132, 'SYSTEM FLUSH LOGS' = 133, 'SYSTEM FLUSH' = 134, 'SYSTEM THREAD FUZZER' = 135, 'SYSTEM UNFREEZE' = 136, 'SYSTEM' = 137, 'dictGet' = 138, 'addressToLine' = 139, 'addressToLineWithInlines' = 140, 'addressToSymbol' = 141, 'demangle' = 142, 'INTROSPECTION' = 143, 'FILE' = 144, 'URL' = 145, 'REMOTE' = 146, 'MONGO' = 147, 'MEILISEARCH' = 148, 'MYSQL' = 149, 'POSTGRES' = 150, 'SQLITE' = 151, 'ODBC' = 152, 'JDBC' = 153, 'HDFS' = 154, 'S3' = 155, 'HIVE' = 156, 'SOURCES' = 157, 'CLUSTER' = 158, 'ALL' = 159, 'NONE' = 160),\n+    `privilege` Enum16('SHOW DATABASES' = 0, 'SHOW TABLES' = 1, 'SHOW COLUMNS' = 2, 'SHOW DICTIONARIES' = 3, 'SHOW' = 4, 'SHOW FILESYSTEM CACHES' = 5, 'SELECT' = 6, 'INSERT' = 7, 'ALTER UPDATE' = 8, 'ALTER DELETE' = 9, 'ALTER ADD COLUMN' = 10, 'ALTER MODIFY COLUMN' = 11, 'ALTER DROP COLUMN' = 12, 'ALTER COMMENT COLUMN' = 13, 'ALTER CLEAR COLUMN' = 14, 'ALTER RENAME COLUMN' = 15, 'ALTER MATERIALIZE COLUMN' = 16, 'ALTER COLUMN' = 17, 'ALTER MODIFY COMMENT' = 18, 'ALTER ORDER BY' = 19, 'ALTER SAMPLE BY' = 20, 'ALTER ADD INDEX' = 21, 'ALTER DROP INDEX' = 22, 'ALTER MATERIALIZE INDEX' = 23, 'ALTER CLEAR INDEX' = 24, 'ALTER INDEX' = 25, 'ALTER ADD PROJECTION' = 26, 'ALTER DROP PROJECTION' = 27, 'ALTER MATERIALIZE PROJECTION' = 28, 'ALTER CLEAR PROJECTION' = 29, 'ALTER PROJECTION' = 30, 'ALTER ADD CONSTRAINT' = 31, 'ALTER DROP CONSTRAINT' = 32, 'ALTER CONSTRAINT' = 33, 'ALTER TTL' = 34, 'ALTER MATERIALIZE TTL' = 35, 'ALTER SETTINGS' = 36, 'ALTER MOVE PARTITION' = 37, 'ALTER FETCH PARTITION' = 38, 'ALTER FREEZE PARTITION' = 39, 'ALTER DATABASE SETTINGS' = 40, 'ALTER NAMED COLLECTION' = 41, 'ALTER TABLE' = 42, 'ALTER DATABASE' = 43, 'ALTER VIEW REFRESH' = 44, 'ALTER VIEW MODIFY QUERY' = 45, 'ALTER VIEW' = 46, 'ALTER' = 47, 'CREATE DATABASE' = 48, 'CREATE TABLE' = 49, 'CREATE VIEW' = 50, 'CREATE DICTIONARY' = 51, 'CREATE TEMPORARY TABLE' = 52, 'CREATE ARBITRARY TEMPORARY TABLE' = 53, 'CREATE FUNCTION' = 54, 'CREATE NAMED COLLECTION' = 55, 'CREATE' = 56, 'DROP DATABASE' = 57, 'DROP TABLE' = 58, 'DROP VIEW' = 59, 'DROP DICTIONARY' = 60, 'DROP FUNCTION' = 61, 'DROP NAMED COLLECTION' = 62, 'DROP' = 63, 'UNDROP TABLE' = 64, 'TRUNCATE' = 65, 'OPTIMIZE' = 66, 'BACKUP' = 67, 'KILL QUERY' = 68, 'KILL TRANSACTION' = 69, 'MOVE PARTITION BETWEEN SHARDS' = 70, 'CREATE USER' = 71, 'ALTER USER' = 72, 'DROP USER' = 73, 'CREATE ROLE' = 74, 'ALTER ROLE' = 75, 'DROP ROLE' = 76, 'ROLE ADMIN' = 77, 'CREATE ROW POLICY' = 78, 'ALTER ROW POLICY' = 79, 'DROP ROW POLICY' = 80, 'CREATE QUOTA' = 81, 'ALTER QUOTA' = 82, 'DROP QUOTA' = 83, 'CREATE SETTINGS PROFILE' = 84, 'ALTER SETTINGS PROFILE' = 85, 'DROP SETTINGS PROFILE' = 86, 'SHOW USERS' = 87, 'SHOW ROLES' = 88, 'SHOW ROW POLICIES' = 89, 'SHOW QUOTAS' = 90, 'SHOW SETTINGS PROFILES' = 91, 'SHOW ACCESS' = 92, 'ACCESS MANAGEMENT' = 93, 'SHOW NAMED COLLECTIONS' = 94, 'SHOW NAMED COLLECTIONS SECRETS' = 95, 'NAMED COLLECTION CONTROL' = 96, 'SYSTEM SHUTDOWN' = 97, 'SYSTEM DROP DNS CACHE' = 98, 'SYSTEM DROP MARK CACHE' = 99, 'SYSTEM DROP UNCOMPRESSED CACHE' = 100, 'SYSTEM DROP MMAP CACHE' = 101, 'SYSTEM DROP QUERY CACHE' = 102, 'SYSTEM DROP COMPILED EXPRESSION CACHE' = 103, 'SYSTEM DROP FILESYSTEM CACHE' = 104, 'SYSTEM DROP SCHEMA CACHE' = 105, 'SYSTEM DROP S3 CLIENT CACHE' = 106, 'SYSTEM DROP CACHE' = 107, 'SYSTEM RELOAD CONFIG' = 108, 'SYSTEM RELOAD USERS' = 109, 'SYSTEM RELOAD SYMBOLS' = 110, 'SYSTEM RELOAD DICTIONARY' = 111, 'SYSTEM RELOAD MODEL' = 112, 'SYSTEM RELOAD FUNCTION' = 113, 'SYSTEM RELOAD EMBEDDED DICTIONARIES' = 114, 'SYSTEM RELOAD' = 115, 'SYSTEM RESTART DISK' = 116, 'SYSTEM MERGES' = 117, 'SYSTEM TTL MERGES' = 118, 'SYSTEM FETCHES' = 119, 'SYSTEM MOVES' = 120, 'SYSTEM DISTRIBUTED SENDS' = 121, 'SYSTEM REPLICATED SENDS' = 122, 'SYSTEM SENDS' = 123, 'SYSTEM REPLICATION QUEUES' = 124, 'SYSTEM DROP REPLICA' = 125, 'SYSTEM SYNC REPLICA' = 126, 'SYSTEM RESTART REPLICA' = 127, 'SYSTEM RESTORE REPLICA' = 128, 'SYSTEM WAIT LOADING PARTS' = 129, 'SYSTEM SYNC DATABASE REPLICA' = 130, 'SYSTEM SYNC TRANSACTION LOG' = 131, 'SYSTEM SYNC FILE CACHE' = 132, 'SYSTEM FLUSH DISTRIBUTED' = 133, 'SYSTEM FLUSH LOGS' = 134, 'SYSTEM FLUSH' = 135, 'SYSTEM THREAD FUZZER' = 136, 'SYSTEM UNFREEZE' = 137, 'SYSTEM' = 138, 'dictGet' = 139, 'addressToLine' = 140, 'addressToLineWithInlines' = 141, 'addressToSymbol' = 142, 'demangle' = 143, 'INTROSPECTION' = 144, 'FILE' = 145, 'URL' = 146, 'REMOTE' = 147, 'MONGO' = 148, 'MEILISEARCH' = 149, 'MYSQL' = 150, 'POSTGRES' = 151, 'SQLITE' = 152, 'ODBC' = 153, 'JDBC' = 154, 'HDFS' = 155, 'S3' = 156, 'HIVE' = 157, 'SOURCES' = 158, 'CLUSTER' = 159, 'ALL' = 160, 'NONE' = 161),\n     `aliases` Array(String),\n     `level` Nullable(Enum8('GLOBAL' = 0, 'DATABASE' = 1, 'TABLE' = 2, 'DICTIONARY' = 3, 'VIEW' = 4, 'COLUMN' = 5, 'NAMED_COLLECTION' = 6)),\n-    `parent_group` Nullable(Enum16('SHOW DATABASES' = 0, 'SHOW TABLES' = 1, 'SHOW COLUMNS' = 2, 'SHOW DICTIONARIES' = 3, 'SHOW' = 4, 'SHOW FILESYSTEM CACHES' = 5, 'SELECT' = 6, 'INSERT' = 7, 'ALTER UPDATE' = 8, 'ALTER DELETE' = 9, 'ALTER ADD COLUMN' = 10, 'ALTER MODIFY COLUMN' = 11, 'ALTER DROP COLUMN' = 12, 'ALTER COMMENT COLUMN' = 13, 'ALTER CLEAR COLUMN' = 14, 'ALTER RENAME COLUMN' = 15, 'ALTER MATERIALIZE COLUMN' = 16, 'ALTER COLUMN' = 17, 'ALTER MODIFY COMMENT' = 18, 'ALTER ORDER BY' = 19, 'ALTER SAMPLE BY' = 20, 'ALTER ADD INDEX' = 21, 'ALTER DROP INDEX' = 22, 'ALTER MATERIALIZE INDEX' = 23, 'ALTER CLEAR INDEX' = 24, 'ALTER INDEX' = 25, 'ALTER ADD PROJECTION' = 26, 'ALTER DROP PROJECTION' = 27, 'ALTER MATERIALIZE PROJECTION' = 28, 'ALTER CLEAR PROJECTION' = 29, 'ALTER PROJECTION' = 30, 'ALTER ADD CONSTRAINT' = 31, 'ALTER DROP CONSTRAINT' = 32, 'ALTER CONSTRAINT' = 33, 'ALTER TTL' = 34, 'ALTER MATERIALIZE TTL' = 35, 'ALTER SETTINGS' = 36, 'ALTER MOVE PARTITION' = 37, 'ALTER FETCH PARTITION' = 38, 'ALTER FREEZE PARTITION' = 39, 'ALTER DATABASE SETTINGS' = 40, 'ALTER NAMED COLLECTION' = 41, 'ALTER TABLE' = 42, 'ALTER DATABASE' = 43, 'ALTER VIEW REFRESH' = 44, 'ALTER VIEW MODIFY QUERY' = 45, 'ALTER VIEW' = 46, 'ALTER' = 47, 'CREATE DATABASE' = 48, 'CREATE TABLE' = 49, 'CREATE VIEW' = 50, 'CREATE DICTIONARY' = 51, 'CREATE TEMPORARY TABLE' = 52, 'CREATE ARBITRARY TEMPORARY TABLE' = 53, 'CREATE FUNCTION' = 54, 'CREATE NAMED COLLECTION' = 55, 'CREATE' = 56, 'DROP DATABASE' = 57, 'DROP TABLE' = 58, 'DROP VIEW' = 59, 'DROP DICTIONARY' = 60, 'DROP FUNCTION' = 61, 'DROP NAMED COLLECTION' = 62, 'DROP' = 63, 'TRUNCATE' = 64, 'OPTIMIZE' = 65, 'BACKUP' = 66, 'KILL QUERY' = 67, 'KILL TRANSACTION' = 68, 'MOVE PARTITION BETWEEN SHARDS' = 69, 'CREATE USER' = 70, 'ALTER USER' = 71, 'DROP USER' = 72, 'CREATE ROLE' = 73, 'ALTER ROLE' = 74, 'DROP ROLE' = 75, 'ROLE ADMIN' = 76, 'CREATE ROW POLICY' = 77, 'ALTER ROW POLICY' = 78, 'DROP ROW POLICY' = 79, 'CREATE QUOTA' = 80, 'ALTER QUOTA' = 81, 'DROP QUOTA' = 82, 'CREATE SETTINGS PROFILE' = 83, 'ALTER SETTINGS PROFILE' = 84, 'DROP SETTINGS PROFILE' = 85, 'SHOW USERS' = 86, 'SHOW ROLES' = 87, 'SHOW ROW POLICIES' = 88, 'SHOW QUOTAS' = 89, 'SHOW SETTINGS PROFILES' = 90, 'SHOW ACCESS' = 91, 'ACCESS MANAGEMENT' = 92, 'SHOW NAMED COLLECTIONS' = 93, 'SHOW NAMED COLLECTIONS SECRETS' = 94, 'NAMED COLLECTION CONTROL' = 95, 'SYSTEM SHUTDOWN' = 96, 'SYSTEM DROP DNS CACHE' = 97, 'SYSTEM DROP MARK CACHE' = 98, 'SYSTEM DROP UNCOMPRESSED CACHE' = 99, 'SYSTEM DROP MMAP CACHE' = 100, 'SYSTEM DROP QUERY CACHE' = 101, 'SYSTEM DROP COMPILED EXPRESSION CACHE' = 102, 'SYSTEM DROP FILESYSTEM CACHE' = 103, 'SYSTEM DROP SCHEMA CACHE' = 104, 'SYSTEM DROP S3 CLIENT CACHE' = 105, 'SYSTEM DROP CACHE' = 106, 'SYSTEM RELOAD CONFIG' = 107, 'SYSTEM RELOAD USERS' = 108, 'SYSTEM RELOAD SYMBOLS' = 109, 'SYSTEM RELOAD DICTIONARY' = 110, 'SYSTEM RELOAD MODEL' = 111, 'SYSTEM RELOAD FUNCTION' = 112, 'SYSTEM RELOAD EMBEDDED DICTIONARIES' = 113, 'SYSTEM RELOAD' = 114, 'SYSTEM RESTART DISK' = 115, 'SYSTEM MERGES' = 116, 'SYSTEM TTL MERGES' = 117, 'SYSTEM FETCHES' = 118, 'SYSTEM MOVES' = 119, 'SYSTEM DISTRIBUTED SENDS' = 120, 'SYSTEM REPLICATED SENDS' = 121, 'SYSTEM SENDS' = 122, 'SYSTEM REPLICATION QUEUES' = 123, 'SYSTEM DROP REPLICA' = 124, 'SYSTEM SYNC REPLICA' = 125, 'SYSTEM RESTART REPLICA' = 126, 'SYSTEM RESTORE REPLICA' = 127, 'SYSTEM WAIT LOADING PARTS' = 128, 'SYSTEM SYNC DATABASE REPLICA' = 129, 'SYSTEM SYNC TRANSACTION LOG' = 130, 'SYSTEM SYNC FILE CACHE' = 131, 'SYSTEM FLUSH DISTRIBUTED' = 132, 'SYSTEM FLUSH LOGS' = 133, 'SYSTEM FLUSH' = 134, 'SYSTEM THREAD FUZZER' = 135, 'SYSTEM UNFREEZE' = 136, 'SYSTEM' = 137, 'dictGet' = 138, 'addressToLine' = 139, 'addressToLineWithInlines' = 140, 'addressToSymbol' = 141, 'demangle' = 142, 'INTROSPECTION' = 143, 'FILE' = 144, 'URL' = 145, 'REMOTE' = 146, 'MONGO' = 147, 'MEILISEARCH' = 148, 'MYSQL' = 149, 'POSTGRES' = 150, 'SQLITE' = 151, 'ODBC' = 152, 'JDBC' = 153, 'HDFS' = 154, 'S3' = 155, 'HIVE' = 156, 'SOURCES' = 157, 'CLUSTER' = 158, 'ALL' = 159, 'NONE' = 160))\n+    `parent_group` Nullable(Enum16('SHOW DATABASES' = 0, 'SHOW TABLES' = 1, 'SHOW COLUMNS' = 2, 'SHOW DICTIONARIES' = 3, 'SHOW' = 4, 'SHOW FILESYSTEM CACHES' = 5, 'SELECT' = 6, 'INSERT' = 7, 'ALTER UPDATE' = 8, 'ALTER DELETE' = 9, 'ALTER ADD COLUMN' = 10, 'ALTER MODIFY COLUMN' = 11, 'ALTER DROP COLUMN' = 12, 'ALTER COMMENT COLUMN' = 13, 'ALTER CLEAR COLUMN' = 14, 'ALTER RENAME COLUMN' = 15, 'ALTER MATERIALIZE COLUMN' = 16, 'ALTER COLUMN' = 17, 'ALTER MODIFY COMMENT' = 18, 'ALTER ORDER BY' = 19, 'ALTER SAMPLE BY' = 20, 'ALTER ADD INDEX' = 21, 'ALTER DROP INDEX' = 22, 'ALTER MATERIALIZE INDEX' = 23, 'ALTER CLEAR INDEX' = 24, 'ALTER INDEX' = 25, 'ALTER ADD PROJECTION' = 26, 'ALTER DROP PROJECTION' = 27, 'ALTER MATERIALIZE PROJECTION' = 28, 'ALTER CLEAR PROJECTION' = 29, 'ALTER PROJECTION' = 30, 'ALTER ADD CONSTRAINT' = 31, 'ALTER DROP CONSTRAINT' = 32, 'ALTER CONSTRAINT' = 33, 'ALTER TTL' = 34, 'ALTER MATERIALIZE TTL' = 35, 'ALTER SETTINGS' = 36, 'ALTER MOVE PARTITION' = 37, 'ALTER FETCH PARTITION' = 38, 'ALTER FREEZE PARTITION' = 39, 'ALTER DATABASE SETTINGS' = 40, 'ALTER NAMED COLLECTION' = 41, 'ALTER TABLE' = 42, 'ALTER DATABASE' = 43, 'ALTER VIEW REFRESH' = 44, 'ALTER VIEW MODIFY QUERY' = 45, 'ALTER VIEW' = 46, 'ALTER' = 47, 'CREATE DATABASE' = 48, 'CREATE TABLE' = 49, 'CREATE VIEW' = 50, 'CREATE DICTIONARY' = 51, 'CREATE TEMPORARY TABLE' = 52, 'CREATE ARBITRARY TEMPORARY TABLE' = 53, 'CREATE FUNCTION' = 54, 'CREATE NAMED COLLECTION' = 55, 'CREATE' = 56, 'DROP DATABASE' = 57, 'DROP TABLE' = 58, 'DROP VIEW' = 59, 'DROP DICTIONARY' = 60, 'DROP FUNCTION' = 61, 'DROP NAMED COLLECTION' = 62, 'DROP' = 63, 'UNDROP TABLE' = 64, 'TRUNCATE' = 65, 'OPTIMIZE' = 66, 'BACKUP' = 67, 'KILL QUERY' = 68, 'KILL TRANSACTION' = 69, 'MOVE PARTITION BETWEEN SHARDS' = 70, 'CREATE USER' = 71, 'ALTER USER' = 72, 'DROP USER' = 73, 'CREATE ROLE' = 74, 'ALTER ROLE' = 75, 'DROP ROLE' = 76, 'ROLE ADMIN' = 77, 'CREATE ROW POLICY' = 78, 'ALTER ROW POLICY' = 79, 'DROP ROW POLICY' = 80, 'CREATE QUOTA' = 81, 'ALTER QUOTA' = 82, 'DROP QUOTA' = 83, 'CREATE SETTINGS PROFILE' = 84, 'ALTER SETTINGS PROFILE' = 85, 'DROP SETTINGS PROFILE' = 86, 'SHOW USERS' = 87, 'SHOW ROLES' = 88, 'SHOW ROW POLICIES' = 89, 'SHOW QUOTAS' = 90, 'SHOW SETTINGS PROFILES' = 91, 'SHOW ACCESS' = 92, 'ACCESS MANAGEMENT' = 93, 'SHOW NAMED COLLECTIONS' = 94, 'SHOW NAMED COLLECTIONS SECRETS' = 95, 'NAMED COLLECTION CONTROL' = 96, 'SYSTEM SHUTDOWN' = 97, 'SYSTEM DROP DNS CACHE' = 98, 'SYSTEM DROP MARK CACHE' = 99, 'SYSTEM DROP UNCOMPRESSED CACHE' = 100, 'SYSTEM DROP MMAP CACHE' = 101, 'SYSTEM DROP QUERY CACHE' = 102, 'SYSTEM DROP COMPILED EXPRESSION CACHE' = 103, 'SYSTEM DROP FILESYSTEM CACHE' = 104, 'SYSTEM DROP SCHEMA CACHE' = 105, 'SYSTEM DROP S3 CLIENT CACHE' = 106, 'SYSTEM DROP CACHE' = 107, 'SYSTEM RELOAD CONFIG' = 108, 'SYSTEM RELOAD USERS' = 109, 'SYSTEM RELOAD SYMBOLS' = 110, 'SYSTEM RELOAD DICTIONARY' = 111, 'SYSTEM RELOAD MODEL' = 112, 'SYSTEM RELOAD FUNCTION' = 113, 'SYSTEM RELOAD EMBEDDED DICTIONARIES' = 114, 'SYSTEM RELOAD' = 115, 'SYSTEM RESTART DISK' = 116, 'SYSTEM MERGES' = 117, 'SYSTEM TTL MERGES' = 118, 'SYSTEM FETCHES' = 119, 'SYSTEM MOVES' = 120, 'SYSTEM DISTRIBUTED SENDS' = 121, 'SYSTEM REPLICATED SENDS' = 122, 'SYSTEM SENDS' = 123, 'SYSTEM REPLICATION QUEUES' = 124, 'SYSTEM DROP REPLICA' = 125, 'SYSTEM SYNC REPLICA' = 126, 'SYSTEM RESTART REPLICA' = 127, 'SYSTEM RESTORE REPLICA' = 128, 'SYSTEM WAIT LOADING PARTS' = 129, 'SYSTEM SYNC DATABASE REPLICA' = 130, 'SYSTEM SYNC TRANSACTION LOG' = 131, 'SYSTEM SYNC FILE CACHE' = 132, 'SYSTEM FLUSH DISTRIBUTED' = 133, 'SYSTEM FLUSH LOGS' = 134, 'SYSTEM FLUSH' = 135, 'SYSTEM THREAD FUZZER' = 136, 'SYSTEM UNFREEZE' = 137, 'SYSTEM' = 138, 'dictGet' = 139, 'addressToLine' = 140, 'addressToLineWithInlines' = 141, 'addressToSymbol' = 142, 'demangle' = 143, 'INTROSPECTION' = 144, 'FILE' = 145, 'URL' = 146, 'REMOTE' = 147, 'MONGO' = 148, 'MEILISEARCH' = 149, 'MYSQL' = 150, 'POSTGRES' = 151, 'SQLITE' = 152, 'ODBC' = 153, 'JDBC' = 154, 'HDFS' = 155, 'S3' = 156, 'HIVE' = 157, 'SOURCES' = 158, 'CLUSTER' = 159, 'ALL' = 160, 'NONE' = 161))\n )\n ENGINE = SystemPrivileges\n COMMENT 'SYSTEM TABLE is built on the fly.'\ndiff --git a/tests/queries/0_stateless/02681_undrop_query.reference b/tests/queries/0_stateless/02681_undrop_query.reference\nnew file mode 100644\nindex 000000000000..5df6c392eb9f\n--- /dev/null\n+++ b/tests/queries/0_stateless/02681_undrop_query.reference\n@@ -0,0 +1,32 @@\n+test MergeTree undrop\n+02681_undrop_mergetree\n+1\n+2\n+3\n+test detach\n+UPDATE num = 2 WHERE id = 1\n+test MergeTree with cluster\n+02681_undrop_uuid_on_cluster\n+1\n+2\n+3\n+test MergeTree without uuid on cluster\n+02681_undrop_no_uuid_on_cluster\n+1\n+2\n+3\n+test ReplicatedMergeTree undrop\n+02681_undrop_replicatedmergetree\n+1\n+2\n+3\n+test Log undrop\n+02681_undrop_log\n+1\n+2\n+3\n+test Distributed undrop\n+02681_undrop_distributed\n+test MergeTree drop and undrop multiple times\n+02681_undrop_multiple\n+3\ndiff --git a/tests/queries/0_stateless/02681_undrop_query.sql b/tests/queries/0_stateless/02681_undrop_query.sql\nnew file mode 100644\nindex 000000000000..ead1a8bb3050\n--- /dev/null\n+++ b/tests/queries/0_stateless/02681_undrop_query.sql\n@@ -0,0 +1,90 @@\n+-- Tags: no-ordinary-database, no-replicated-database, distributed, zookeeper\n+\n+set database_atomic_wait_for_drop_and_detach_synchronously = 0;\n+set allow_experimental_undrop_table_query = 1;\n+\n+select 'test MergeTree undrop';\n+drop table if exists 02681_undrop_mergetree sync;\n+create table 02681_undrop_mergetree (id Int32) Engine=MergeTree() order by id;\n+insert into 02681_undrop_mergetree values (1),(2),(3);\n+drop table 02681_undrop_mergetree;\n+select table from system.dropped_tables where table = '02681_undrop_mergetree' limit 1;\n+undrop table 02681_undrop_mergetree;\n+select * from 02681_undrop_mergetree order by id;\n+drop table 02681_undrop_mergetree sync;\n+\n+select 'test detach';\n+drop table if exists 02681_undrop_detach sync;\n+create table 02681_undrop_detach (id Int32, num Int32) Engine=MergeTree() order by id;\n+insert into 02681_undrop_detach values (1, 1);\n+detach table 02681_undrop_detach;\n+undrop table 02681_undrop_detach; -- { serverError 57 }\n+attach table 02681_undrop_detach;\n+alter table 02681_undrop_detach update num = 2 where id = 1;\n+select command from system.mutations where table='02681_undrop_detach' limit 1;\n+drop table 02681_undrop_detach sync;\n+\n+select 'test MergeTree with cluster';\n+drop table if exists 02681_undrop_uuid_on_cluster on cluster test_shard_localhost sync format Null;\n+create table 02681_undrop_uuid_on_cluster on cluster test_shard_localhost (id Int32) Engine=MergeTree() order by id format Null;\n+insert into 02681_undrop_uuid_on_cluster values (1),(2),(3);\n+drop table 02681_undrop_uuid_on_cluster on cluster test_shard_localhost format Null;\n+select table from system.dropped_tables where table = '02681_undrop_uuid_on_cluster' limit 1;\n+undrop table 02681_undrop_uuid_on_cluster on cluster test_shard_localhost format Null;\n+select * from 02681_undrop_uuid_on_cluster order by id;\n+drop table 02681_undrop_uuid_on_cluster sync;\n+\n+select 'test MergeTree without uuid on cluster';\n+drop table if exists 02681_undrop_no_uuid_on_cluster on cluster test_shard_localhost sync format Null;\n+create table 02681_undrop_no_uuid_on_cluster on cluster test_shard_localhost (id Int32) Engine=MergeTree() order by id format Null;\n+insert into 02681_undrop_no_uuid_on_cluster values (1),(2),(3);\n+drop table 02681_undrop_no_uuid_on_cluster on cluster test_shard_localhost format Null;\n+select table from system.dropped_tables where table = '02681_undrop_no_uuid_on_cluster' limit 1;\n+undrop table 02681_undrop_no_uuid_on_cluster on cluster test_shard_localhost format Null;\n+select * from 02681_undrop_no_uuid_on_cluster order by id;\n+drop table 02681_undrop_no_uuid_on_cluster on cluster test_shard_localhost sync format Null;\n+\n+select 'test ReplicatedMergeTree undrop';\n+drop table if exists 02681_undrop_replicatedmergetree sync;\n+create table 02681_undrop_replicatedmergetree (id Int32) Engine=ReplicatedMergeTree('/clickhouse/tables/{database}/02681_undrop_replicatedmergetree', 'test_undrop') order by id;\n+insert into 02681_undrop_replicatedmergetree values (1),(2),(3);\n+drop table 02681_undrop_replicatedmergetree;\n+select table from system.dropped_tables where table = '02681_undrop_replicatedmergetree' limit 1;\n+undrop table 02681_undrop_replicatedmergetree;\n+select * from 02681_undrop_replicatedmergetree order by id;\n+drop table 02681_undrop_replicatedmergetree sync;\n+\n+select 'test Log undrop';\n+drop table if exists 02681_undrop_log sync;\n+create table 02681_undrop_log (id Int32) Engine=Log();\n+insert into 02681_undrop_log values (1),(2),(3);\n+drop table 02681_undrop_log;\n+select table from system.dropped_tables where table = '02681_undrop_log' limit 1;\n+undrop table 02681_undrop_log;\n+select * from 02681_undrop_log order by id;\n+drop table 02681_undrop_log sync;\n+\n+select 'test Distributed undrop';\n+drop table if exists 02681_undrop_distributed sync;\n+create table 02681_undrop_distributed (id Int32) Engine = Distributed(test_shard_localhost, currentDatabase(), 02681_undrop, rand());\n+drop table 02681_undrop_distributed;\n+select table from system.dropped_tables where table = '02681_undrop_distributed' limit 1;\n+undrop table 02681_undrop_distributed;\n+drop table 02681_undrop_distributed sync;\n+\n+select 'test MergeTree drop and undrop multiple times';\n+drop table if exists 02681_undrop_multiple sync;\n+create table 02681_undrop_multiple (id Int32) Engine=MergeTree() order by id;\n+insert into 02681_undrop_multiple values (1);\n+drop table 02681_undrop_multiple;\n+create table 02681_undrop_multiple (id Int32) Engine=MergeTree() order by id;\n+insert into 02681_undrop_multiple values (2);\n+drop table 02681_undrop_multiple;\n+create table 02681_undrop_multiple (id Int32) Engine=MergeTree() order by id;\n+insert into 02681_undrop_multiple values (3);\n+drop table 02681_undrop_multiple;\n+select table from system.dropped_tables where table = '02681_undrop_multiple' limit 1;\n+undrop table 02681_undrop_multiple;\n+select * from 02681_undrop_multiple order by id;\n+undrop table 02681_undrop_multiple; -- { serverError 57 }\n+drop table 02681_undrop_multiple sync;\ndiff --git a/tests/queries/0_stateless/02681_undrop_query_uuid.reference b/tests/queries/0_stateless/02681_undrop_query_uuid.reference\nnew file mode 100644\nindex 000000000000..9d36a21dbda7\n--- /dev/null\n+++ b/tests/queries/0_stateless/02681_undrop_query_uuid.reference\n@@ -0,0 +1,5 @@\n+test MergeTree with uuid\n+02681_undrop_uuid\n+1\n+2\n+3\ndiff --git a/tests/queries/0_stateless/02681_undrop_query_uuid.sh b/tests/queries/0_stateless/02681_undrop_query_uuid.sh\nnew file mode 100755\nindex 000000000000..c7d87bad3d42\n--- /dev/null\n+++ b/tests/queries/0_stateless/02681_undrop_query_uuid.sh\n@@ -0,0 +1,17 @@\n+#!/usr/bin/env bash\n+# Tags: no-ordinary-database, no-replicated-database\n+\n+CURDIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+# shellcheck source=../shell_config.sh\n+. \"$CURDIR\"/../shell_config.sh\n+\n+echo 'test MergeTree with uuid'\n+${CLICKHOUSE_CLIENT} -q \"drop table if exists 02681_undrop_uuid sync;\"\n+uuid=$(${CLICKHOUSE_CLIENT} --query \"SELECT reinterpretAsUUID(currentDatabase())\")\n+${CLICKHOUSE_CLIENT} -q \"create table 02681_undrop_uuid UUID '$uuid' (id Int32) Engine=MergeTree() order by id;\"\n+${CLICKHOUSE_CLIENT} -q \"insert into 02681_undrop_uuid values (1),(2),(3);\"\n+${CLICKHOUSE_CLIENT} -q \"drop table 02681_undrop_uuid settings database_atomic_wait_for_drop_and_detach_synchronously = 0;\"\n+${CLICKHOUSE_CLIENT} -q \"select table from system.dropped_tables where table = '02681_undrop_uuid' limit 1;\"\n+${CLICKHOUSE_CLIENT} -q \"undrop table 02681_undrop_uuid UUID '$uuid' settings allow_experimental_undrop_table_query = 1;\"\n+${CLICKHOUSE_CLIENT} -q \"select * from 02681_undrop_uuid order by id;\"\n+${CLICKHOUSE_CLIENT} -q \"drop table 02681_undrop_uuid sync;\"\n",
  "problem_statement": "UNDROP command\n**Use case**\r\n\r\n```\r\nUNDROP TABLE tbl;\r\n```\r\n\r\nJust like in snowflake.\r\n\r\nhttps://docs.snowflake.com/en/sql-reference/sql/undrop\r\n\r\nCurrently ClickHouse doesn't remove objects for 8 minutes interval, but it could be longer period in future. \r\n\n",
  "hints_text": "",
  "created_at": "2023-03-04T16:32:39Z",
  "modified_files": [
    "src/Access/Common/AccessType.h",
    "src/Core/Settings.h",
    "src/Databases/DatabaseAtomic.cpp",
    "src/Databases/DatabaseAtomic.h",
    "src/Databases/IDatabase.h",
    "src/Interpreters/Context.h",
    "src/Interpreters/DatabaseCatalog.cpp",
    "src/Interpreters/DatabaseCatalog.h",
    "src/Interpreters/InterpreterCreateQuery.cpp",
    "src/Interpreters/InterpreterFactory.cpp",
    "b/src/Interpreters/InterpreterUndropQuery.cpp",
    "b/src/Interpreters/InterpreterUndropQuery.h",
    "b/src/Parsers/ASTUndropQuery.cpp",
    "b/src/Parsers/ASTUndropQuery.h",
    "src/Parsers/IAST.h",
    "src/Parsers/ParserQueryWithOutput.cpp",
    "b/src/Parsers/ParserUndropQuery.cpp",
    "b/src/Parsers/ParserUndropQuery.h"
  ],
  "modified_test_files": [
    "src/Access/tests/gtest_access_rights_ops.cpp",
    "tests/integration/test_grant_and_revoke/test.py",
    "b/tests/integration/test_undrop_query/configs/with_delay_config.xml",
    "b/tests/integration/test_undrop_query/test.py",
    "tests/queries/0_stateless/01271_show_privileges.reference",
    "tests/queries/0_stateless/02117_show_create_table_system.reference",
    "b/tests/queries/0_stateless/02681_undrop_query.reference",
    "b/tests/queries/0_stateless/02681_undrop_query.sql",
    "b/tests/queries/0_stateless/02681_undrop_query_uuid.reference",
    "b/tests/queries/0_stateless/02681_undrop_query_uuid.sh"
  ]
}