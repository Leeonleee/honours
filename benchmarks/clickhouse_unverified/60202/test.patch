diff --git a/tests/performance/dotProduct.xml b/tests/performance/dotProduct.xml
new file mode 100644
index 000000000000..6e056964ebb6
--- /dev/null
+++ b/tests/performance/dotProduct.xml
@@ -0,0 +1,62 @@
+<test>
+
+    <substitutions>
+        <substitution>
+            <name>element_type</name>
+            <values>
+                <!-- integer cases are not relevant in practice for vector search, disable to reduce test runtime -->
+                <!-- <value>UInt8</value> -->
+                <!-- <value>Int16</value> -->
+                <!-- <value>Int32</value> -->
+                <!-- <value>Int64</value> -->
+                <value>Float32</value>
+                <value>Float64</value>
+            </values>
+        </substitution>
+    </substitutions>
+
+    <create_query>
+        CREATE TABLE vecs_{element_type} (
+            v Array({element_type})
+        ) ENGINE=Memory;
+    </create_query>
+
+    <!-- Gererate arrays with random data -->
+    <!-- Dimension = 150 is realistic for vector search use cases -->
+
+    <fill_query>
+        INSERT INTO vecs_{element_type}
+        SELECT v FROM (
+            SELECT
+                number AS n,
+                [
+                    rand(n*10), rand(n*10+1), rand(n*10+2), rand(n*10+3), rand(n*10+4), rand(n*10+5), rand(n*10+6), rand(n*10+7), rand(n*10+8), rand(n*10+9),
+                    rand(n*10+10), rand(n*10+11), rand(n*10+12), rand(n*10+13), rand(n*10+14), rand(n*10+15), rand(n*10+16), rand(n*10+17), rand(n*10+18), rand(n*10+19),
+                    rand(n*10+20), rand(n*10+21), rand(n*10+22), rand(n*10+23), rand(n*10+24), rand(n*10+25), rand(n*10+26), rand(n*10+27), rand(n*10+28), rand(n*10+29),
+                    rand(n*10+30), rand(n*10+31), rand(n*10+32), rand(n*10+33), rand(n*10+34), rand(n*10+35), rand(n*10+36), rand(n*10+37), rand(n*10+38), rand(n*10+39),
+                    rand(n*10+40), rand(n*10+41), rand(n*10+42), rand(n*10+43), rand(n*10+44), rand(n*10+45), rand(n*10+46), rand(n*10+47), rand(n*10+48), rand(n*10+49),
+                    rand(n*10+50), rand(n*10+51), rand(n*10+52), rand(n*10+53), rand(n*10+54), rand(n*10+55), rand(n*10+56), rand(n*10+57), rand(n*10+58), rand(n*10+59),
+                    rand(n*10+60), rand(n*10+61), rand(n*10+62), rand(n*10+63), rand(n*10+64), rand(n*10+65), rand(n*10+66), rand(n*10+67), rand(n*10+68), rand(n*10+69),
+                    rand(n*10+70), rand(n*10+71), rand(n*10+72), rand(n*10+73), rand(n*10+74), rand(n*10+75), rand(n*10+76), rand(n*10+77), rand(n*10+78), rand(n*10+79),
+                    rand(n*10+80), rand(n*10+81), rand(n*10+82), rand(n*10+83), rand(n*10+84), rand(n*10+85), rand(n*10+86), rand(n*10+87), rand(n*10+88), rand(n*10+89),
+                    rand(n*10+90), rand(n*10+91), rand(n*10+92), rand(n*10+93), rand(n*10+94), rand(n*10+95), rand(n*10+96), rand(n*10+97), rand(n*10+98), rand(n*10+99),
+                    rand(n*10+100), rand(n*10+101), rand(n*10+102), rand(n*10+103), rand(n*10+104), rand(n*10+105), rand(n*10+106), rand(n*10+107), rand(n*10+108), rand(n*10+109),
+                    rand(n*10+110), rand(n*10+111), rand(n*10+112), rand(n*10+113), rand(n*10+114), rand(n*10+115), rand(n*10+116), rand(n*10+117), rand(n*10+118), rand(n*10+119),
+                    rand(n*10+120), rand(n*10+121), rand(n*10+122), rand(n*10+123), rand(n*10+124), rand(n*10+125), rand(n*10+126), rand(n*10+127), rand(n*10+128), rand(n*10+129),
+                    rand(n*10+130), rand(n*10+131), rand(n*10+132), rand(n*10+133), rand(n*10+134), rand(n*10+135), rand(n*10+136), rand(n*10+137), rand(n*10+138), rand(n*10+139),
+                    rand(n*10+140), rand(n*10+141), rand(n*10+142), rand(n*10+143), rand(n*10+144), rand(n*10+145), rand(n*10+146), rand(n*10+147), rand(n*10+148), rand(n*10+149)
+                ] AS v
+            FROM system.numbers
+            LIMIT 5000000
+        );
+    </fill_query>
+
+    <settings>
+        <max_threads>1</max_threads>
+    </settings>
+
+    <query>SELECT sum(dp) FROM (SELECT dotProduct(v, v) AS dp FROM vecs_{element_type})</query>
+
+    <drop_query>DROP TABLE vecs_{element_type}</drop_query>
+
+</test>
diff --git a/tests/performance/norm_distance.xml b/tests/performance/norm_distance.xml
index 1e879607dac7..69ed71d026f8 100644
--- a/tests/performance/norm_distance.xml
+++ b/tests/performance/norm_distance.xml
@@ -4,11 +4,11 @@
         <substitution>
             <name>element_type</name>
             <values>
-                <!-- 8 and 16 bit cases are not relevant in practice, disable to reduce test runtime -->
+                <!-- integer cases are not relevant in practice for vector search, disable to reduce test runtime -->
                 <!-- <value>UInt8</value> -->
                 <!-- <value>Int16</value> -->
-                <value>Int32</value>
-                <value>Int64</value>
+                <!-- <value>Int32</value> -->
+                <!-- <value>Int64</value> -->
                 <value>Float32</value>
                 <value>Float64</value>
             </values>
diff --git a/tests/queries/0_stateless/02708_dotProduct.reference b/tests/queries/0_stateless/02708_dotProduct.reference
new file mode 100644
index 000000000000..5cc9a9f05023
--- /dev/null
+++ b/tests/queries/0_stateless/02708_dotProduct.reference
@@ -0,0 +1,34 @@
+-- Negative tests
+-- Tests
+   -- Array
+[1,2,3]	[4,5,6]	32	UInt16
+[1,2,3]	[4,5,6]	32	UInt32
+[1,2,3]	[4,5,6]	32	UInt64
+[1,2,3]	[4,5,6]	32	UInt64
+[-1,-2,-3]	[4,5,6]	-32	Int16
+[-1,-2,-3]	[4,5,6]	-32	Int32
+[-1,-2,-3]	[4,5,6]	-32	Int64
+[-1,-2,-3]	[4,5,6]	-32	Int64
+[1,2,3]	[4,5,6]	32	Float32
+[1,2,3]	[4,5,6]	32	Float64
+   -- Tuple
+(1,2,3)	(4,5,6)	32	UInt64
+(1,2,3)	(4,5,6)	32	UInt64
+(1,2,3)	(4,5,6)	32	UInt64
+(1,2,3)	(4,5,6)	32	UInt64
+(-1,-2,-3)	(4,5,6)	-32	Int64
+(-1,-2,-3)	(4,5,6)	-32	Int64
+(-1,-2,-3)	(4,5,6)	-32	Int64
+(-1,-2,-3)	(4,5,6)	-32	Int64
+(1,2,3)	(4,5,6)	32	Float64
+(1,2,3)	(4,5,6)	32	Float64
+-- Non-const argument
+[1,2,3]	[4,5,6]	32	UInt16
+ -- Array with mixed element arguments types (result type is the supertype)
+[1,2,3]	[4,5,6]	32	Float32
+ -- Tuple with mixed element arguments types
+(1,2,3)	(4,5,6)	32	Float64
+-- Aliases
+32
+32
+32
diff --git a/tests/queries/0_stateless/02708_dotProduct.sql b/tests/queries/0_stateless/02708_dotProduct.sql
new file mode 100644
index 000000000000..6ad615664e87
--- /dev/null
+++ b/tests/queries/0_stateless/02708_dotProduct.sql
@@ -0,0 +1,47 @@
+SELECT '-- Negative tests';
+
+SELECT arrayDotProduct([1, 2]); -- { serverError NUMBER_OF_ARGUMENTS_DOESNT_MATCH }
+SELECT arrayDotProduct([1, 2], 'abc'); -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }
+SELECT arrayDotProduct('abc', [1, 2]); -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }
+SELECT arrayDotProduct([1, 2], ['abc', 'def']); -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }
+SELECT arrayDotProduct([1, 2], [3, 4, 5]); -- { serverError BAD_ARGUMENTS }
+SELECT dotProduct([1, 2], (3, 4, 5)); -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }
+
+SELECT '-- Tests';
+SELECT '   -- Array';
+SELECT [1, 2, 3]::Array(UInt8) AS x, [4, 5, 6]::Array(UInt8) AS y, dotProduct(x, y) AS res, toTypeName(res);
+SELECT [1, 2, 3]::Array(UInt16) AS x, [4, 5, 6]::Array(UInt16) AS y, dotProduct(x, y) AS res, toTypeName(res);
+SELECT [1, 2, 3]::Array(UInt32) AS x, [4, 5, 6]::Array(UInt32) AS y, dotProduct(x, y) AS res, toTypeName(res);
+SELECT [1, 2, 3]::Array(UInt64) AS x, [4, 5, 6]::Array(UInt64) AS y, dotProduct(x, y) AS res, toTypeName(res);
+SELECT [-1, -2, -3]::Array(Int8) AS x, [4, 5, 6]::Array(Int8) AS y, dotProduct(x, y) AS res, toTypeName(res);
+SELECT [-1, -2, -3]::Array(Int16) AS x, [4, 5, 6]::Array(Int16) AS y, dotProduct(x, y) AS res, toTypeName(res);
+SELECT [-1, -2, -3]::Array(Int32) AS x, [4, 5, 6]::Array(Int32) AS y, dotProduct(x, y) AS res, toTypeName(res);
+SELECT [-1, -2, -3]::Array(Int64) AS x, [4, 5, 6]::Array(Int64) AS y, dotProduct(x, y) AS res, toTypeName(res);
+SELECT [1, 2, 3]::Array(Float32) AS x, [4, 5, 6]::Array(Float32) AS y, dotProduct(x, y) AS res, toTypeName(res);
+SELECT [1, 2, 3]::Array(Float64) AS x, [4, 5, 6]::Array(Float64) AS y, dotProduct(x, y) AS res, toTypeName(res);
+
+SELECT '   -- Tuple';
+SELECT (1::UInt8, 2::UInt8, 3::UInt8) AS x, (4::UInt8, 5::UInt8, 6::UInt8) AS y, dotProduct(x, y) AS res, toTypeName(res);
+SELECT (1::UInt16, 2::UInt16, 3::UInt16) AS x, (4::UInt16, 5::UInt16, 6::UInt16) AS y, dotProduct(x, y) AS res, toTypeName(res);
+SELECT (1::UInt32, 2::UInt32, 3::UInt32) AS x, (4::UInt32, 5::UInt32, 6::UInt32) AS y, dotProduct(x, y) AS res, toTypeName(res);
+SELECT (1::UInt64, 2::UInt64, 3::UInt64) AS x, (4::UInt64, 5::UInt64, 6::UInt64) AS y, dotProduct(x, y) AS res, toTypeName(res);
+SELECT (-1::Int8, -2::Int8, -3::Int8) AS x, (4::Int8, 5::Int8, 6::Int8) AS y, dotProduct(x, y) AS res, toTypeName(res);
+SELECT (-1::Int16, -2::Int16, -3::Int16) AS x, (4::Int16, 5::Int16, 6::Int16) AS y, dotProduct(x, y) AS res, toTypeName(res);
+SELECT (-1::Int32, -2::Int32, -3::Int32) AS x, (4::Int32, 5::Int32, 6::Int32) AS y, dotProduct(x, y) AS res, toTypeName(res);
+SELECT (-1::Int64, -2::Int64, -3::Int64) AS x, (4::Int64, 5::Int64, 6::Int64) AS y, dotProduct(x, y) AS res, toTypeName(res);
+SELECT (1::Float32, 2::Float32, 3::Float32) AS x, (4::Float32, 5::Float32, 6::Float32) AS y, dotProduct(x, y) AS res, toTypeName(res);
+SELECT (1::Float64, 2::Float64, 3::Float64) AS x, (4::Float64, 5::Float64, 6::Float64) AS y, dotProduct(x, y) AS res, toTypeName(res);
+
+SELECT '-- Non-const argument';
+SELECT materialize([1::UInt8, 2::UInt8, 3::UInt8]) AS x, [4::UInt8, 5::UInt8, 6::UInt8] AS y, dotProduct(x, y) AS res, toTypeName(res);
+
+SELECT ' -- Array with mixed element arguments types (result type is the supertype)';
+SELECT [1::UInt16, 2::UInt8, 3::Float32] AS x, [4::Int16, 5::Float32, 6::UInt8] AS y, dotProduct(x, y) AS res, toTypeName(res);
+
+SELECT ' -- Tuple with mixed element arguments types';
+SELECT (1::UInt16, 2::UInt8, 3::Float32) AS x, (4::Int16, 5::Float32, 6::UInt8) AS y, dotProduct(x, y) AS res, toTypeName(res);
+
+SELECT '-- Aliases';
+SELECT scalarProduct([1, 2, 3], [4, 5, 6]);
+SELECT scalarProduct((1, 2, 3), (4, 5, 6));
+SELECT arrayDotProduct([1, 2, 3], [4, 5, 6]); -- actually no alias but the internal function for arrays
diff --git a/tests/queries/0_stateless/02708_dot_product.reference b/tests/queries/0_stateless/02708_dot_product.reference
deleted file mode 100644
index 45e53871aa23..000000000000
--- a/tests/queries/0_stateless/02708_dot_product.reference
+++ /dev/null
@@ -1,14 +0,0 @@
-3881.304
-3881.304
-3881.304
-376.5
-230
-0
-0
-Float64
-Float32
-Float64
-Float64
-UInt16
-UInt64
-Int64
diff --git a/tests/queries/0_stateless/02708_dot_product.sql b/tests/queries/0_stateless/02708_dot_product.sql
deleted file mode 100644
index e94cb577bf40..000000000000
--- a/tests/queries/0_stateless/02708_dot_product.sql
+++ /dev/null
@@ -1,55 +0,0 @@
-SELECT dotProduct([12, 2.22, 302], [1.32, 231.2, 11.1]);
-
-SELECT scalarProduct([12, 2.22, 302], [1.32, 231.2, 11.1]);
-
-SELECT arrayDotProduct([12, 2.22, 302], [1.32, 231.2, 11.1]);
-
-SELECT dotProduct([1.3, 2, 3, 4, 5], [222, 12, 5.3, 2, 8]);
-
-SELECT dotProduct([1, 1, 1, 1, 1], [222, 12, 0, -12, 8]);
-
-SELECT round(dotProduct([12345678901234567], [1]) - dotProduct(tuple(12345678901234567), tuple(1)), 2);
-
-SELECT round(dotProduct([-1, 2, 3.002], [2, 3.4, 4]) - dotProduct((-1, 2, 3.002), (2, 3.4, 4)), 2);
-
-DROP TABLE IF EXISTS product_fp64_fp64;
-CREATE TABLE product_fp64_fp64 (x Array(Float64), y Array(Float64)) engine = MergeTree() order by x;
-INSERT INTO TABLE product_fp64_fp64 (x, y) values ([1, 2], [3, 4]);
-SELECT toTypeName(dotProduct(x, y)) from product_fp64_fp64;
-DROP TABLE product_fp64_fp64;
-
-DROP TABLE IF EXISTS product_fp32_fp32;
-CREATE TABLE product_fp32_fp32 (x Array(Float32), y Array(Float32)) engine = MergeTree() order by x;
-INSERT INTO TABLE product_fp32_fp32 (x, y) values ([1, 2], [3, 4]);
-SELECT toTypeName(dotProduct(x, y)) from product_fp32_fp32;
-DROP TABLE product_fp32_fp32;
-
-DROP TABLE IF EXISTS product_fp32_fp64;
-CREATE TABLE product_fp32_fp64 (x Array(Float32), y Array(Float64)) engine = MergeTree() order by x;
-INSERT INTO TABLE product_fp32_fp64 (x, y) values ([1, 2], [3, 4]);
-SELECT toTypeName(dotProduct(x, y)) from product_fp32_fp64;
-DROP TABLE product_fp32_fp64;
-
-DROP TABLE IF EXISTS product_uint8_fp64;
-CREATE TABLE product_uint8_fp64 (x Array(UInt8), y Array(Float64)) engine = MergeTree() order by x;
-INSERT INTO TABLE product_uint8_fp64 (x, y) values ([1, 2], [3, 4]);
-SELECT toTypeName(dotProduct(x, y)) from product_uint8_fp64;
-DROP TABLE product_uint8_fp64;
-
-DROP TABLE IF EXISTS product_uint8_uint8;
-CREATE TABLE product_uint8_uint8 (x Array(UInt8), y Array(UInt8)) engine = MergeTree() order by x;
-INSERT INTO TABLE product_uint8_uint8 (x, y) values ([1, 2], [3, 4]);
-SELECT toTypeName(dotProduct(x, y)) from product_uint8_uint8;
-DROP TABLE product_uint8_uint8;
-
-DROP TABLE IF EXISTS product_uint64_uint64;
-CREATE TABLE product_uint64_uint64 (x Array(UInt64), y Array(UInt64)) engine = MergeTree() order by x;
-INSERT INTO TABLE product_uint64_uint64 (x, y) values ([1, 2], [3, 4]);
-SELECT toTypeName(dotProduct(x, y)) from product_uint64_uint64;
-DROP TABLE product_uint64_uint64;
-
-DROP TABLE IF EXISTS product_int32_uint64;
-CREATE TABLE product_int32_uint64 (x Array(Int32), y Array(UInt64)) engine = MergeTree() order by x;
-INSERT INTO TABLE product_int32_uint64 (x, y) values ([1, 2], [3, 4]);
-SELECT toTypeName(dotProduct(x, y)) from product_int32_uint64;
-DROP TABLE product_int32_uint64;
