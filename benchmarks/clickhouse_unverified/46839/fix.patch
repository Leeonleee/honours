diff --git a/src/Storages/IndicesDescription.cpp b/src/Storages/IndicesDescription.cpp
index 2e07aceeaa95..a93ac248c98e 100644
--- a/src/Storages/IndicesDescription.cpp
+++ b/src/Storages/IndicesDescription.cpp
@@ -94,14 +94,15 @@ IndexDescription IndexDescription::getIndexFromAST(const ASTPtr & definition_ast
 
     auto syntax = TreeRewriter(context).analyze(expr_list, columns.getAllPhysical());
     result.expression = ExpressionAnalyzer(expr_list, syntax, context).getActions(true);
-    Block block_without_columns = result.expression->getSampleBlock();
+    result.sample_block = result.expression->getSampleBlock();
 
-    for (size_t i = 0; i < block_without_columns.columns(); ++i)
+    for (auto & elem : result.sample_block)
     {
-        const auto & column = block_without_columns.getByPosition(i);
-        result.column_names.emplace_back(column.name);
-        result.data_types.emplace_back(column.type);
-        result.sample_block.insert(ColumnWithTypeAndName(column.type->createColumn(), column.type, column.name));
+        if (!elem.column)
+            elem.column = elem.type->createColumn();
+
+        result.column_names.push_back(elem.name);
+        result.data_types.push_back(elem.type);
     }
 
     const auto & definition_arguments = index_definition->type->arguments;
diff --git a/src/Storages/MergeTree/MergeTreeData.cpp b/src/Storages/MergeTree/MergeTreeData.cpp
index 0d4e54453d77..f49ecba13854 100644
--- a/src/Storages/MergeTree/MergeTreeData.cpp
+++ b/src/Storages/MergeTree/MergeTreeData.cpp
@@ -524,7 +524,6 @@ void MergeTreeData::checkProperties(
 
         for (const auto & index : new_metadata.secondary_indices)
         {
-
             MergeTreeIndexFactory::instance().validate(index, attach);
 
             if (indices_names.find(index.name) != indices_names.end())
diff --git a/src/Storages/MergeTree/MergeTreeIndices.cpp b/src/Storages/MergeTree/MergeTreeIndices.cpp
index 2be9ecd8de35..6ae96d001711 100644
--- a/src/Storages/MergeTree/MergeTreeIndices.cpp
+++ b/src/Storages/MergeTree/MergeTreeIndices.cpp
@@ -35,6 +35,7 @@ MergeTreeIndexPtr MergeTreeIndexFactory::get(
 {
     auto it = creators.find(index.type);
     if (it == creators.end())
+    {
         throw Exception(ErrorCodes::INCORRECT_QUERY,
                 "Unknown Index type '{}'. Available index types: {}", index.type,
                 std::accumulate(creators.cbegin(), creators.cend(), std::string{},
@@ -46,6 +47,7 @@ MergeTreeIndexPtr MergeTreeIndexFactory::get(
                                 return left + ", " + right.first;
                         })
                 );
+    }
 
     return it->second(index);
 }
@@ -61,8 +63,31 @@ MergeTreeIndices MergeTreeIndexFactory::getMany(const std::vector<IndexDescripti
 
 void MergeTreeIndexFactory::validate(const IndexDescription & index, bool attach) const
 {
+    /// Do not allow constant and non-deterministic expressions.
+    /// Do not throw on attach for compatibility.
+    if (!attach)
+    {
+        if (index.expression->hasArrayJoin())
+            throw Exception(ErrorCodes::INCORRECT_QUERY, "Secondary index '{}' cannot contain array joins", index.name);
+
+        try
+        {
+            index.expression->assertDeterministic();
+        }
+        catch (Exception & e)
+        {
+            e.addMessage(fmt::format("for secondary index '{}'", index.name));
+            throw;
+        }
+
+        for (const auto & elem : index.sample_block)
+            if (elem.column && (isColumnConst(*elem.column) || elem.column->isDummy()))
+                throw Exception(ErrorCodes::INCORRECT_QUERY, "Secondary index '{}' cannot contain constants", index.name);
+    }
+
     auto it = validators.find(index.type);
     if (it == validators.end())
+    {
         throw Exception(ErrorCodes::INCORRECT_QUERY,
             "Unknown Index type '{}'. Available index types: {}", index.type,
                 std::accumulate(
@@ -77,6 +102,7 @@ void MergeTreeIndexFactory::validate(const IndexDescription & index, bool attach
                             return left + ", " + right.first;
                     })
             );
+    }
 
     it->second(index, attach);
 }
