You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
Queries to S3 having glob patterns takes a long time to complete
**Describe the situation**
There is a huge difference wrt query response time when querying S3 with or without glob patterns in the S3 URL 

**How to reproduce**
Below is an example query without glob pattern
> SELECT Column1, Column2, _path
FROM s3('https://test-s3-bucket.s3.us-west-2.amazonaws.com/Partition1/202308210735/*.parquet',  <aws_access_key_id>, <aws_secret_access_key>) LIMIT 2

Below is an example query with glob pattern
> SELECT Column1, Column2, _path
FROM s3('https://test-s3-bucket.s3.us-west-2.amazonaws.com/Partition1/{202308210735,DUMMY}/*.parquet',  <aws_access_key_id>, <aws_secret_access_key>) LIMIT 2

Effectively both the queries should be reading or parsing the same number of files ("DUMMY" used the glob pattern is non-existent). 
The resulting response time is approximately **1.5s** for query without glob pattern.
But the same query with blob pattern is taking around **140s**

* Which ClickHouse server version to use
**_ClickHouse client version 23.7.3.14 (official build)._**

**Expected performance**
The response time in both cases should be more or less the same.

**Additional context**
Data stored in S3 is of parquet format. There are multiple files within `202308210735`. As is obvious from the pattern, the data is time partitioned and there will be multiple folders like `202308210740`, `202308210745` etc..
Additionally, there are multiple top-level folders as well (eg) `Partition1`, `Partition2` etc..

I did run query analysis of both the queries and from that its quite clear that the glob pattern based query is leading a substantially higher S3ListObject & S3Reads. Below is a snapshot of the comparision

<img width="561" alt="image" src="https://github.com/ClickHouse/ClickHouse/assets/14892092/e6e27262-274e-4e16-aab8-f46c2596de63">


S3 Wildcard Issue When Using OR (Not usable)
There is an issue with performance when using the S3 Wildcard below.

**Clickhouse Versions Tested (We have about 20 total servers):** 
- clickhouse/clickhouse-server:23.4.2.11 
- clickhouse/clickhouse-server:23.1.3.5
- clickhouse/clickhouse-server:23.2.1.2537

**_Wildcard Used from Documentation:_** {some_string,another_string,yet_another_one} â€” Substitutes any of strings 'some_string', 'another_string', 'yet_another_one'

_**Without Wildcard:**_ 
- **Expected result:** Return all data under presto_data/config/bts_id=555251 folder (5 files, 4MB total)
- **S3 Path:** us-east-1.amazonaws.com/presto_data/config/bts_id=555251/*
- **Speed:** Finishes in about 1 second

_**With Wildcard:**_
- **Expected result:** Return all data under presto_data/config/bts_id=555251 folder (5 files, 4MB total) AND presto_data/config/bts_id=555256 folder (4 files, 3MB total)
- **S3 Path:** us-east-1.amazonaws.com/presto_data/config/bts_id=_**{555251,555256}**_/*
- **Speed:** Never Finishes; Memory Limit Error after about 150 seconds

Thanks!
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
