diff --git a/tests/queries/0_stateless/02067_lost_part_s3.reference b/tests/queries/0_stateless/02067_lost_part_s3.reference
new file mode 100644
index 000000000000..f6f7853d3b69
--- /dev/null
+++ b/tests/queries/0_stateless/02067_lost_part_s3.reference
@@ -0,0 +1,3 @@
+10000
+10000
+10000
diff --git a/tests/queries/0_stateless/02067_lost_part_s3.sql b/tests/queries/0_stateless/02067_lost_part_s3.sql
new file mode 100644
index 000000000000..ee3297331cde
--- /dev/null
+++ b/tests/queries/0_stateless/02067_lost_part_s3.sql
@@ -0,0 +1,32 @@
+DROP TABLE IF EXISTS partslost_0;
+DROP TABLE IF EXISTS partslost_1;
+DROP TABLE IF EXISTS partslost_2;
+
+CREATE TABLE partslost_0 (x String) ENGINE=ReplicatedMergeTree('/clickhouse/table/{database}_02067_lost/partslost', '0') ORDER BY tuple() SETTINGS min_rows_for_wide_part = 0, min_bytes_for_wide_part = 0, old_parts_lifetime = 1, cleanup_delay_period = 1, cleanup_delay_period_random_add = 1;
+
+CREATE TABLE partslost_1 (x String) ENGINE=ReplicatedMergeTree('/clickhouse/table/{database}_02067_lost/partslost', '1') ORDER BY tuple() SETTINGS min_rows_for_wide_part = 0, min_bytes_for_wide_part = 0, old_parts_lifetime = 1, cleanup_delay_period = 1, cleanup_delay_period_random_add = 1;
+
+CREATE TABLE partslost_2 (x String) ENGINE=ReplicatedMergeTree('/clickhouse/table/{database}_02067_lost/partslost', '2') ORDER BY tuple() SETTINGS min_rows_for_wide_part = 0, min_bytes_for_wide_part = 0, old_parts_lifetime = 1, cleanup_delay_period = 1, cleanup_delay_period_random_add = 1;
+
+
+INSERT INTO partslost_0 SELECT toString(number) AS x from system.numbers LIMIT 10000;
+
+ALTER TABLE partslost_0 ADD INDEX idx x TYPE tokenbf_v1(285000, 3, 12345) GRANULARITY 3;
+
+ALTER TABLE partslost_0 MATERIALIZE INDEX idx;
+
+-- In worst case doesn't check anything, but it's not flaky
+select sleep(3) FORMAT Null;
+select sleep(3) FORMAT Null;
+select sleep(3) FORMAT Null;
+select sleep(3) FORMAT Null;
+
+ALTER TABLE partslost_0 DROP INDEX idx;
+
+select count() from partslost_0;
+select count() from partslost_1;
+select count() from partslost_2;
+
+DROP TABLE IF EXISTS partslost_0;
+DROP TABLE IF EXISTS partslost_1;
+DROP TABLE IF EXISTS partslost_2;
diff --git a/tests/queries/0_stateless/02271_replace_partition_many_tables.reference b/tests/queries/0_stateless/02271_replace_partition_many_tables.reference
new file mode 100644
index 000000000000..627e1097cda3
--- /dev/null
+++ b/tests/queries/0_stateless/02271_replace_partition_many_tables.reference
@@ -0,0 +1,5 @@
+1
+1
+1
+1
+1
diff --git a/tests/queries/0_stateless/02271_replace_partition_many_tables.sql b/tests/queries/0_stateless/02271_replace_partition_many_tables.sql
new file mode 100644
index 000000000000..a31a2bee58a6
--- /dev/null
+++ b/tests/queries/0_stateless/02271_replace_partition_many_tables.sql
@@ -0,0 +1,82 @@
+DROP TABLE IF EXISTS replace_partition_source;
+DROP TABLE IF EXISTS replace_partition_dest1;
+DROP TABLE IF EXISTS replace_partition_dest1_2;
+DROP TABLE IF EXISTS replace_partition_dest2;
+DROP TABLE IF EXISTS replace_partition_dest2_2;
+
+CREATE TABLE replace_partition_source
+(
+    key UInt64
+)
+ENGINE = ReplicatedMergeTree('/test/02271_replace_partition_many/{database}/source', '1')
+PARTITION BY key
+ORDER BY tuple();
+
+INSERT INTO replace_partition_source VALUES (1);
+
+CREATE TABLE replace_partition_dest1
+(
+    key UInt64
+)
+ENGINE = ReplicatedMergeTree('/test/02271_replace_partition_many/{database}/dest1', '1')
+PARTITION BY key
+ORDER BY tuple();
+
+CREATE TABLE replace_partition_dest1_2
+(
+    key UInt64
+)
+ENGINE = ReplicatedMergeTree('/test/02271_replace_partition_many/{database}/dest1', '2')
+PARTITION BY key
+ORDER BY tuple();
+
+
+CREATE TABLE replace_partition_dest2
+(
+    key UInt64
+)
+ENGINE = ReplicatedMergeTree('/test/02271_replace_partition_many/{database}/dest2', '1')
+PARTITION BY key
+ORDER BY tuple();
+
+CREATE TABLE replace_partition_dest2_2
+(
+    key UInt64
+)
+ENGINE = ReplicatedMergeTree('/test/02271_replace_partition_many/{database}/dest2', '2')
+PARTITION BY key
+ORDER BY tuple();
+
+
+ALTER TABLE replace_partition_dest1 REPLACE PARTITION 1 FROM replace_partition_source;
+ALTER TABLE replace_partition_dest2 REPLACE PARTITION 1 FROM replace_partition_source;
+
+OPTIMIZE TABLE replace_partition_source FINAL;
+
+SELECT sleep(3) FORMAT Null;
+SELECT sleep(3) FORMAT Null;
+SELECT sleep(3) FORMAT Null;
+SELECT sleep(3) FORMAT Null;
+SELECT sleep(3) FORMAT Null;
+
+OPTIMIZE TABLE replace_partition_dest1_2 FINAL;
+OPTIMIZE TABLE replace_partition_dest2_2 FINAL;
+
+SELECT sleep(3) FORMAT Null;
+SELECT sleep(3) FORMAT Null;
+SELECT sleep(3) FORMAT Null;
+SELECT sleep(3) FORMAT Null;
+SELECT sleep(3) FORMAT Null;
+
+SELECT * FROM replace_partition_source;
+SELECT * FROM replace_partition_dest1;
+SELECT * FROM replace_partition_dest2;
+SELECT * FROM replace_partition_dest1_2;
+SELECT * FROM replace_partition_dest2_2;
+
+
+--DROP TABLE IF EXISTS replace_partition_source;
+--DROP TABLE IF EXISTS replace_partition_dest1;
+--DROP TABLE IF EXISTS replace_partition_dest1_2;
+--DROP TABLE IF EXISTS replace_partition_dest2;
+--DROP TABLE IF EXISTS replace_partition_dest2_2;
