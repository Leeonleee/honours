{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 52135,
  "instance_id": "ClickHouse__ClickHouse-52135",
  "issue_numbers": [
    "52100"
  ],
  "base_commit": "d058715cfc988bce7b3cf1160295b03f86bc5205",
  "patch": "diff --git a/docs/en/sql-reference/aggregate-functions/reference/grouparray.md b/docs/en/sql-reference/aggregate-functions/reference/grouparray.md\nindex 18048fa4f710..ad678443df69 100644\n--- a/docs/en/sql-reference/aggregate-functions/reference/grouparray.md\n+++ b/docs/en/sql-reference/aggregate-functions/reference/grouparray.md\n@@ -44,3 +44,5 @@ Result:\n ```\n \n The groupArray function will remove \u1d3a\u1d41\u1d38\u1d38 value based on the above results.\n+\n+- Alias: `array_agg`.\ndiff --git a/src/AggregateFunctions/AggregateFunctionGroupArray.cpp b/src/AggregateFunctions/AggregateFunctionGroupArray.cpp\nindex bb1368b9ff8a..1c54038929ba 100644\n--- a/src/AggregateFunctions/AggregateFunctionGroupArray.cpp\n+++ b/src/AggregateFunctions/AggregateFunctionGroupArray.cpp\n@@ -125,6 +125,7 @@ void registerAggregateFunctionGroupArray(AggregateFunctionFactory & factory)\n     AggregateFunctionProperties properties = { .returns_default_when_only_null = false, .is_order_dependent = true };\n \n     factory.registerFunction(\"groupArray\", { createAggregateFunctionGroupArray<false>, properties });\n+    factory.registerAlias(\"array_agg\", \"groupArray\", AggregateFunctionFactory::CaseInsensitive);\n     factory.registerFunction(\"groupArraySample\", { createAggregateFunctionGroupArraySample, properties });\n     factory.registerFunction(\"groupArrayLast\", { createAggregateFunctionGroupArray<true>, properties });\n }\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02813_array_agg.reference b/tests/queries/0_stateless/02813_array_agg.reference\nnew file mode 100644\nindex 000000000000..202f6aa4bac1\n--- /dev/null\n+++ b/tests/queries/0_stateless/02813_array_agg.reference\n@@ -0,0 +1,6 @@\n+['hello, world!','hello, world!','hello, world!','hello, world!','hello, world!']\n+['hello, world!']\n+['hello, world!']\n+['hello, world!']\n+['hello, world!']\n+['hello, world!']\ndiff --git a/tests/queries/0_stateless/02813_array_agg.sql b/tests/queries/0_stateless/02813_array_agg.sql\nnew file mode 100644\nindex 000000000000..91d8d0774d3b\n--- /dev/null\n+++ b/tests/queries/0_stateless/02813_array_agg.sql\n@@ -0,0 +1,10 @@\n+drop table if exists t;\n+create table t (n Int32, s String) engine=MergeTree order by n;\n+\n+insert into t select number, 'hello, world!' from numbers (5);\n+\n+select array_agg(s) from t;\n+\n+select aRray_Agg(s) from t group by n;\n+\n+drop table t;\n",
  "problem_statement": "A compatibility alias `array_agg` for PostgreSQL, equivalent to the `groupArray` aggregate function.\n**Use case**\r\n\r\nSomeone send a PostgreSQL query to ClickHouse and forgot that it is ClickHouse.\r\n\r\n**Describe the solution you'd like**\r\n\r\nIt is nice to introduce an alias.\r\n\r\n**Additional context**\r\n\r\nThis task is trivial. There is a chance the behavior is different in regard to aggregation of NULL values, but it is ok for the scope of this task.\n",
  "hints_text": "",
  "created_at": "2023-07-15T14:55:02Z",
  "modified_files": [
    "docs/en/sql-reference/aggregate-functions/reference/grouparray.md",
    "src/AggregateFunctions/AggregateFunctionGroupArray.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02813_array_agg.reference",
    "b/tests/queries/0_stateless/02813_array_agg.sql"
  ]
}