{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 26172,
  "instance_id": "ClickHouse__ClickHouse-26172",
  "issue_numbers": [
    "25862"
  ],
  "base_commit": "91330be0afec9ad2fa36d67ed717de341e39fa46",
  "patch": "diff --git a/programs/client/Client.cpp b/programs/client/Client.cpp\nindex 9c1c8338321c..a50538f01011 100644\n--- a/programs/client/Client.cpp\n+++ b/programs/client/Client.cpp\n@@ -301,26 +301,9 @@ class Client : public Poco::Util::Application\n         }\n         catch (const Exception & e)\n         {\n-            bool print_stack_trace = config().getBool(\"stacktrace\", false);\n-\n-            std::string text = e.displayText();\n-\n-            /** If exception is received from server, then stack trace is embedded in message.\n-              * If exception is thrown on client, then stack trace is in separate field.\n-              */\n+            bool print_stack_trace = config().getBool(\"stacktrace\", false) && e.code() != ErrorCodes::NETWORK_ERROR;\n \n-            auto embedded_stack_trace_pos = text.find(\"Stack trace\");\n-            if (std::string::npos != embedded_stack_trace_pos && !print_stack_trace)\n-                text.resize(embedded_stack_trace_pos);\n-\n-            std::cerr << \"Code: \" << e.code() << \". \" << text << std::endl << std::endl;\n-\n-            /// Don't print the stack trace on the client if it was logged on the server.\n-            /// Also don't print the stack trace in case of network errors.\n-            if (print_stack_trace && e.code() != ErrorCodes::NETWORK_ERROR && std::string::npos == embedded_stack_trace_pos)\n-            {\n-                std::cerr << \"Stack trace:\" << std::endl << e.getStackTraceString();\n-            }\n+            std::cerr << getExceptionMessage(e, print_stack_trace, true) << std::endl << std::endl;\n \n             /// If exception code isn't zero, we should return non-zero return code anyway.\n             return e.code() ? e.code() : -1;\n@@ -633,17 +616,10 @@ class Client : public Poco::Util::Application\n                 }\n                 catch (const Exception & e)\n                 {\n-                    // We don't need to handle the test hints in the interactive\n-                    // mode.\n-                    std::cerr << std::endl\n-                              << \"Exception on client:\" << std::endl\n-                              << \"Code: \" << e.code() << \". \" << e.displayText() << std::endl;\n-\n-                    if (config().getBool(\"stacktrace\", false))\n-                        std::cerr << \"Stack trace:\" << std::endl << e.getStackTraceString() << std::endl;\n-\n-                    std::cerr << std::endl;\n+                    /// We don't need to handle the test hints in the interactive mode.\n \n+                    bool print_stack_trace = config().getBool(\"stacktrace\", false);\n+                    std::cerr << \"Exception on client:\" << std::endl << getExceptionMessage(e, print_stack_trace, true) << std::endl << std::endl;\n                     client_exception = std::make_unique<Exception>(e);\n                 }\n \n@@ -940,18 +916,11 @@ class Client : public Poco::Util::Application\n     {\n         if (server_exception)\n         {\n-            std::string text = server_exception->displayText();\n-            auto embedded_stack_trace_pos = text.find(\"Stack trace\");\n-            if (std::string::npos != embedded_stack_trace_pos && !config().getBool(\"stacktrace\", false))\n-            {\n-                text.resize(embedded_stack_trace_pos);\n-            }\n+            bool print_stack_trace = config().getBool(\"stacktrace\", false);\n             std::cerr << \"Received exception from server (version \" << server_version << \"):\" << std::endl\n-                      << \"Code: \" << server_exception->code() << \". \" << text << std::endl;\n+                << getExceptionMessage(*server_exception, print_stack_trace, true) << std::endl;\n             if (is_interactive)\n-            {\n                 std::cerr << std::endl;\n-            }\n         }\n \n         if (client_exception)\n@@ -1410,8 +1379,7 @@ class Client : public Poco::Util::Application\n                 {\n                     // Just report it, we'll terminate below.\n                     fmt::print(stderr,\n-                        \"Error while reconnecting to the server: Code: {}: {}\\n\",\n-                        getCurrentExceptionCode(),\n+                        \"Error while reconnecting to the server: {}\\n\",\n                         getCurrentExceptionMessage(true));\n \n                     assert(!connection->isConnected());\n@@ -2596,8 +2564,7 @@ class Client : public Poco::Util::Application\n             }\n             catch (const Exception & e)\n             {\n-                std::string text = e.displayText();\n-                std::cerr << \"Code: \" << e.code() << \". \" << text << std::endl;\n+                std::cerr << getExceptionMessage(e, false) << std::endl;\n                 std::cerr << \"Table \u2116\" << i << std::endl << std::endl;\n                 /// Avoid the case when error exit code can possibly overflow to normal (zero).\n                 auto exit_code = e.code() % 256;\n@@ -2740,8 +2707,7 @@ int mainEntryClickHouseClient(int argc, char ** argv)\n     }\n     catch (const DB::Exception & e)\n     {\n-        std::string text = e.displayText();\n-        std::cerr << \"Code: \" << e.code() << \". \" << text << std::endl;\n+        std::cerr << DB::getExceptionMessage(e, false) << std::endl;\n         return 1;\n     }\n     catch (...)\ndiff --git a/src/Common/Exception.cpp b/src/Common/Exception.cpp\nindex e98cd3c30464..641f8bbe0f0e 100644\n--- a/src/Common/Exception.cpp\n+++ b/src/Common/Exception.cpp\n@@ -313,7 +313,7 @@ std::string getCurrentExceptionMessage(bool with_stacktrace, bool check_embedded\n         try\n         {\n             stream << \"Poco::Exception. Code: \" << ErrorCodes::POCO_EXCEPTION << \", e.code() = \" << e.code()\n-                << \", e.displayText() = \" << e.displayText()\n+                << \", \" << e.displayText()\n                 << (with_stacktrace ? \", Stack trace (when copying this message, always include the lines below):\\n\\n\" + getExceptionStackTraceString(e) : \"\")\n                 << (with_extra_info ? getExtraExceptionInfo(e) : \"\")\n                 << \" (version \" << VERSION_STRING << VERSION_OFFICIAL << \")\";\n@@ -433,7 +433,12 @@ std::string getExceptionMessage(const Exception & e, bool with_stacktrace, bool\n             }\n         }\n \n-        stream << \"Code: \" << e.code() << \", e.displayText() = \" << text;\n+        stream << \"Code: \" << e.code() << \". \" << text;\n+\n+        if (!text.empty() && text.back() != '.')\n+            stream << '.';\n+\n+        stream << \" (\" << ErrorCodes::getName(e.code()) << \")\";\n \n         if (with_stacktrace && !has_embedded_stack_trace)\n             stream << \", Stack trace (when copying this message, always include the lines below):\\n\\n\" << e.getStackTraceString();\ndiff --git a/src/Server/GRPCServer.cpp b/src/Server/GRPCServer.cpp\nindex 82e5ed4d0db1..1f776ddb6bc1 100644\n--- a/src/Server/GRPCServer.cpp\n+++ b/src/Server/GRPCServer.cpp\n@@ -1150,7 +1150,7 @@ namespace\n     {\n         io.onException();\n \n-        LOG_ERROR(log, \"Code: {}, e.displayText() = {}, Stack trace:\\n\\n{}\", exception.code(), exception.displayText(), exception.getStackTraceString());\n+        LOG_ERROR(log, getExceptionMessage(exception, true));\n \n         if (responder && !responder_finished)\n         {\ndiff --git a/src/Server/TCPHandler.cpp b/src/Server/TCPHandler.cpp\nindex 108b7b8070a0..c63196208990 100644\n--- a/src/Server/TCPHandler.cpp\n+++ b/src/Server/TCPHandler.cpp\n@@ -149,7 +149,7 @@ void TCPHandler::runImpl()\n         if (!DatabaseCatalog::instance().isDatabaseExist(default_database))\n         {\n             Exception e(\"Database \" + backQuote(default_database) + \" doesn't exist\", ErrorCodes::UNKNOWN_DATABASE);\n-            LOG_ERROR(log, \"Code: {}, e.displayText() = {}, Stack trace:\\n\\n{}\", e.code(), e.displayText(), e.getStackTraceString());\n+            LOG_ERROR(log, getExceptionMessage(e, true));\n             sendException(e, connection_context->getSettingsRef().calculate_text_stack_trace);\n             return;\n         }\n@@ -422,7 +422,7 @@ void TCPHandler::runImpl()\n                 }\n \n                 const auto & e = *exception;\n-                LOG_ERROR(log, \"Code: {}, e.displayText() = {}, Stack trace:\\n\\n{}\", e.code(), e.displayText(), e.getStackTraceString());\n+                LOG_ERROR(log, getExceptionMessage(e, true));\n                 sendException(*exception, send_exception_with_stack_trace);\n             }\n         }\n",
  "test_patch": "diff --git a/tests/integration/test_distributed_respect_user_timeouts/test.py b/tests/integration/test_distributed_respect_user_timeouts/test.py\nindex 662bf7fa6ded..a97c7c3d3556 100644\n--- a/tests/integration/test_distributed_respect_user_timeouts/test.py\n+++ b/tests/integration/test_distributed_respect_user_timeouts/test.py\n@@ -33,7 +33,7 @@\n                \"ORDER BY node\"),\n }\n \n-EXCEPTION_NETWORK = 'e.displayText() = DB::NetException: '\n+EXCEPTION_NETWORK = 'DB::NetException: '\n EXCEPTION_TIMEOUT = 'Timeout exceeded while reading from socket ('\n EXCEPTION_CONNECT = 'Timeout: connect timed out: '\n \n@@ -76,13 +76,13 @@ def _check_exception(exception, expected_tries=3):\n \n     for i, line in enumerate(lines[3:3 + expected_tries]):\n         expected_lines = (\n-            'Code: 209, ' + EXCEPTION_NETWORK + EXCEPTION_TIMEOUT,\n-            'Code: 209, ' + EXCEPTION_NETWORK + EXCEPTION_CONNECT,\n+            'Code: 209. ' + EXCEPTION_NETWORK + EXCEPTION_TIMEOUT,\n+            'Code: 209. ' + EXCEPTION_NETWORK + EXCEPTION_CONNECT,\n             EXCEPTION_TIMEOUT,\n         )\n \n         assert any(line.startswith(expected) for expected in expected_lines), \\\n-            'Unexpected exception at one of the connection attempts'\n+            'Unexpected exception \"{}\" at one of the connection attempts'.format(line)\n \n     assert lines[3 + expected_tries] == '', 'Wrong number of connect attempts'\n \ndiff --git a/tests/integration/test_mysql_protocol/test.py b/tests/integration/test_mysql_protocol/test.py\nindex 6533a6a23f95..070aa9967fc9 100644\n--- a/tests/integration/test_mysql_protocol/test.py\n+++ b/tests/integration/test_mysql_protocol/test.py\n@@ -95,8 +95,11 @@ def test_mysql_client(started_cluster):\n     '''.format(host=started_cluster.get_instance_ip('node'), port=server_port), demux=True)\n \n     assert stdout.decode() == 'count()\\n1\\n'\n-    assert stderr[0:182].decode() == \"mysql: [Warning] Using a password on the command line interface can be insecure.\\n\" \\\n-                            \"ERROR 81 (00000) at line 1: Code: 81, e.displayText() = DB::Exception: Database system2 doesn't exist\"\n+    expected_msg = '\\n'.join([\n+        \"mysql: [Warning] Using a password on the command line interface can be insecure.\",\n+        \"ERROR 81 (00000) at line 1: Code: 81. DB::Exception: Database system2 doesn't exist\",\n+    ])\n+    assert stderr[:len(expected_msg)].decode() == expected_msg\n \n     code, (stdout, stderr) = started_cluster.mysql_client_container.exec_run('''\n         mysql --protocol tcp -h {host} -P {port} default -u default --password=123\n@@ -122,8 +125,11 @@ def test_mysql_client_exception(started_cluster):\n         -e \"CREATE TABLE default.t1_remote_mysql AS mysql('127.0.0.1:10086','default','t1_local','default','');\"\n     '''.format(host=started_cluster.get_instance_ip('node'), port=server_port), demux=True)\n \n-    assert stderr[0:258].decode() == \"mysql: [Warning] Using a password on the command line interface can be insecure.\\n\" \\\n-            \"ERROR 1000 (00000) at line 1: Poco::Exception. Code: 1000, e.code() = 0, e.displayText() = Exception: Connections to all replicas failed: default@127.0.0.1:10086 as user default\"\n+    expected_msg = '\\n'.join([\n+        \"mysql: [Warning] Using a password on the command line interface can be insecure.\",\n+        \"ERROR 1000 (00000) at line 1: Poco::Exception. Code: 1000, e.code() = 0, Exception: Connections to all replicas failed: default@127.0.0.1:10086 as user default\",\n+    ])\n+    assert stderr[:len(expected_msg)].decode() == expected_msg\n \n \n def test_mysql_affected_rows(started_cluster):\n@@ -328,8 +334,7 @@ def test_python_client(started_cluster):\n     with pytest.raises(pymysql.InternalError) as exc_info:\n         client.query('select name from tables')\n \n-    assert exc_info.value.args[1][\n-           0:77] == \"Code: 60, e.displayText() = DB::Exception: Table default.tables doesn't exist\"\n+    assert exc_info.value.args[1].startswith(\"Code: 60. DB::Exception: Table default.tables doesn't exist\"), exc_info.value.args[1]\n \n     cursor = client.cursor(pymysql.cursors.DictCursor)\n     cursor.execute(\"select 1 as a, '\u0442\u0435\u0441\u0442' as b\")\n@@ -348,8 +353,7 @@ def test_python_client(started_cluster):\n     with pytest.raises(pymysql.InternalError) as exc_info:\n         client.query('select name from tables')\n \n-    assert exc_info.value.args[1][\n-           0:77] == \"Code: 60, e.displayText() = DB::Exception: Table default.tables doesn't exist\"\n+    assert exc_info.value.args[1].startswith(\"Code: 60. DB::Exception: Table default.tables doesn't exist\"), exc_info.value.args[1]\n \n     cursor = client.cursor(pymysql.cursors.DictCursor)\n     cursor.execute(\"select 1 as a, '\u0442\u0435\u0441\u0442' as b\")\n@@ -360,7 +364,7 @@ def test_python_client(started_cluster):\n     with pytest.raises(pymysql.InternalError) as exc_info:\n         client.select_db('system2')\n \n-    assert exc_info.value.args[1][0:73] == \"Code: 81, e.displayText() = DB::Exception: Database system2 doesn't exist\"\n+    assert exc_info.value.args[1].startswith(\"Code: 81. DB::Exception: Database system2 doesn't exist\"), exc_info.value.args[1]\n \n     cursor = client.cursor(pymysql.cursors.DictCursor)\n     cursor.execute('CREATE DATABASE x')\ndiff --git a/tests/integration/test_replicated_fetches_timeouts/test.py b/tests/integration/test_replicated_fetches_timeouts/test.py\nindex 963ec2487fdb..88763265270e 100644\n--- a/tests/integration/test_replicated_fetches_timeouts/test.py\n+++ b/tests/integration/test_replicated_fetches_timeouts/test.py\n@@ -78,7 +78,7 @@ def test_no_stall(started_cluster):\n                 \"\"\"\n                 SELECT count()\n                 FROM system.replication_queue\n-                WHERE last_exception LIKE '%e.displayText() = Timeout%'\n+                WHERE last_exception LIKE '%Timeout%'\n                     AND last_exception NOT LIKE '%connect timed out%'\n                 \"\"\").strip())\n \ndiff --git a/tests/integration/test_storage_kafka/test.py b/tests/integration/test_storage_kafka/test.py\nindex 51b2052baae2..b9fc0b2272f0 100644\n--- a/tests/integration/test_storage_kafka/test.py\n+++ b/tests/integration/test_storage_kafka/test.py\n@@ -66,7 +66,7 @@ def get_kafka_producer(port, serializer, retries):\n         except Exception as e:\n             errors += [str(e)]\n             time.sleep(1)\n-    \n+\n     raise Exception(\"Connection not establised, {}\".format(errors))\n \n def producer_serializer(x):\n@@ -1339,7 +1339,7 @@ def test_librdkafka_compression(kafka_cluster):\n \n     Example of corruption:\n \n-        2020.12.10 09:59:56.831507 [ 20 ] {} <Error> void DB::StorageKafka::threadFunc(size_t): Code: 27, e.displayText() = DB::Exception: Cannot parse input: expected '\"' before: 'foo\"}': (while reading the value of key value): (at row 1)\n+        2020.12.10 09:59:56.831507 [ 20 ] {} <Error> void DB::StorageKafka::threadFunc(size_t): Code: 27. DB::Exception: Cannot parse input: expected '\"' before: 'foo\"}': (while reading the value of key value): (at row 1)\n \n     To trigger this regression there should duplicated messages\n \ndiff --git a/tests/queries/0_stateless/00429_long_http_bufferization.sh b/tests/queries/0_stateless/00429_long_http_bufferization.sh\nindex aab9aeba9376..394e8e990522 100755\n--- a/tests/queries/0_stateless/00429_long_http_bufferization.sh\n+++ b/tests/queries/0_stateless/00429_long_http_bufferization.sh\n@@ -18,7 +18,7 @@ function ch_url() {\n \n # Check correct exceptions handling\n \n-exception_pattern=\"displayText() = DB::Exception:[[:print:]]*\"\n+exception_pattern=\"DB::Exception:[[:print:]]*\"\n \n function check_only_exception() {\n     local res\ndiff --git a/tests/queries/0_stateless/00900_long_parquet_load.reference b/tests/queries/0_stateless/00900_long_parquet_load.reference\nindex 621bca2ec0ea..36bbbc1b15df 100644\n--- a/tests/queries/0_stateless/00900_long_parquet_load.reference\n+++ b/tests/queries/0_stateless/00900_long_parquet_load.reference\n@@ -89,7 +89,7 @@ idx10\t['This','is','a','test']\n 23.00\n 24.00\n === Try load data from datapage_v2.snappy.parquet\n-Code: 33. DB::ParsingEx---tion: Error while reading Parquet data: IOError: Not yet implemented: Unsupported encoding.: data for INSERT was parsed from stdin\n+Code: 33. DB::ParsingEx---tion: Error while reading Parquet data: IOError: Not yet implemented: Unsupported encoding.: data for INSERT was parsed from stdin. (CANNOT_READ_ALL_DATA)\n \n === Try load data from dict-page-offset-zero.parquet\n 1552\ndiff --git a/tests/queries/0_stateless/01175_distributed_ddl_output_mode_long.reference b/tests/queries/0_stateless/01175_distributed_ddl_output_mode_long.reference\nindex 0cc8c788fed1..ca79d4a022ee 100644\n--- a/tests/queries/0_stateless/01175_distributed_ddl_output_mode_long.reference\n+++ b/tests/queries/0_stateless/01175_distributed_ddl_output_mode_long.reference\n@@ -1,25 +1,25 @@\n none\n Received exception from server:\n-Code: 57. Error: Received from localhost:9000. Error: There was an error on [localhost:9000]: Code: 57, e.displayText() = Error: Table default.throw already exists\n+Code: 57. Error: Received from localhost:9000. Error: There was an error on [localhost:9000]: Code: 57. Error: Table default.throw already exists. (TABLE_ALREADY_EXISTS)\n Received exception from server:\n-Code: 159. Error: Received from localhost:9000. Error: Watching task <task> is executing longer than distributed_ddl_task_timeout (=8) seconds. There are 1 unfinished hosts (0 of them are currently active), they are going to execute the query in background.\n+Code: 159. Error: Received from localhost:9000. Error: Watching task <task> is executing longer than distributed_ddl_task_timeout (=8) seconds. There are 1 unfinished hosts (0 of them are currently active), they are going to execute the query in background.(TIMEOUT_EXCEEDED)\n throw\n localhost\t9000\t0\t\t0\t0\n-localhost\t9000\t57\tCode: 57, e.displayText() = Error: Table default.throw already exists.\t0\t0\n+localhost\t9000\t57\tCode: 57. Error: Table default.throw already exists. (TABLE_ALREADY_EXISTS)\t0\t0\n Received exception from server:\n-Code: 57. Error: Received from localhost:9000. Error: There was an error on [localhost:9000]: Code: 57, e.displayText() = Error: Table default.throw already exists\n+Code: 57. Error: Received from localhost:9000. Error: There was an error on [localhost:9000]: Code: 57. Error: Table default.throw already exists. (TABLE_ALREADY_EXISTS)\n localhost\t9000\t0\t\t1\t0\n Received exception from server:\n-Code: 159. Error: Received from localhost:9000. Error: Watching task <task> is executing longer than distributed_ddl_task_timeout (=8) seconds. There are 1 unfinished hosts (0 of them are currently active), they are going to execute the query in background.\n+Code: 159. Error: Received from localhost:9000. Error: Watching task <task> is executing longer than distributed_ddl_task_timeout (=8) seconds. There are 1 unfinished hosts (0 of them are currently active), they are going to execute the query in background.(TIMEOUT_EXCEEDED)\n null_status_on_timeout\n localhost\t9000\t0\t\t0\t0\n-localhost\t9000\t57\tCode: 57, e.displayText() = Error: Table default.null_status already exists.\t0\t0\n+localhost\t9000\t57\tCode: 57. Error: Table default.null_status already exists. (TABLE_ALREADY_EXISTS)\t0\t0\n Received exception from server:\n-Code: 57. Error: Received from localhost:9000. Error: There was an error on [localhost:9000]: Code: 57, e.displayText() = Error: Table default.null_status already exists\n+Code: 57. Error: Received from localhost:9000. Error: There was an error on [localhost:9000]: Code: 57. Error: Table default.null_status already exists. (TABLE_ALREADY_EXISTS)\n localhost\t9000\t0\t\t1\t0\n localhost\t1\t\\N\t\\N\t1\t0\n never_throw\n localhost\t9000\t0\t\t0\t0\n-localhost\t9000\t57\tCode: 57, e.displayText() = Error: Table default.never_throw already exists.\t0\t0\n+localhost\t9000\t57\tCode: 57. Error: Table default.never_throw already exists. (TABLE_ALREADY_EXISTS)\t0\t0\n localhost\t9000\t0\t\t1\t0\n localhost\t1\t\\N\t\\N\t1\t0\ndiff --git a/tests/queries/0_stateless/01889_clickhouse_client_config_format.reference b/tests/queries/0_stateless/01889_clickhouse_client_config_format.reference\nindex aa7748928f13..202e32a583e5 100644\n--- a/tests/queries/0_stateless/01889_clickhouse_client_config_format.reference\n+++ b/tests/queries/0_stateless/01889_clickhouse_client_config_format.reference\n@@ -13,4 +13,4 @@ yml\n yaml\n 2\n ini\n-Code: 347. Unknown format of '/config_default.ini' config\n+Code: 347. Unknown format of '/config_default.ini' config. (CANNOT_LOAD_CONFIG)\n",
  "problem_statement": "Show server error code name in clickhouse client\nI hereby agree to the terms of the CLA available at: https://yandex.ru/legal/cla/?lang=en\r\n\r\nChangelog category (leave one):\r\n- Improvement\r\n\r\n\r\nChangelog entry (a user-readable short description of the changes that goes to CHANGELOG.md):\r\n\r\nShow server error code name in client\r\n\n",
  "hints_text": "We can also do it in more generic way: include the name of the error code in exception message.\r\n\r\n`Code: 395. DB::Exception: Received from localhost:9000. DB::Exception: Value passed to 'throwIf' function is non zero: While processing throwIf(1).`\r\n\r\n`Code: 395. DB::Exception: Received from localhost:9000. DB::Exception: Value passed to 'throwIf' function is non zero: While processing throwIf(1). (FUNCTION_THROW_IF_VALUE_IS_NON_ZERO)`\r\n\n@alexey-milovidov \r\n> We can also do it in more generic way: include the name of the error code in exception message.\r\n\r\nYou mean to only to change order not to break tests?\n> You mean to only to change order not to break tests?\r\n\r\nI mean, add it to the place where exception messages are formed: getCurrentExceptionMessage, etc.\r\n(And also, yes - add the name at the end to avoid breaking of 3rd party scripts).",
  "created_at": "2021-07-10T02:44:47Z",
  "modified_files": [
    "programs/client/Client.cpp",
    "src/Common/Exception.cpp",
    "src/Server/GRPCServer.cpp",
    "src/Server/TCPHandler.cpp"
  ],
  "modified_test_files": [
    "tests/integration/test_distributed_respect_user_timeouts/test.py",
    "tests/integration/test_mysql_protocol/test.py",
    "tests/integration/test_replicated_fetches_timeouts/test.py",
    "tests/integration/test_storage_kafka/test.py",
    "tests/queries/0_stateless/00429_long_http_bufferization.sh",
    "tests/queries/0_stateless/00900_long_parquet_load.reference",
    "tests/queries/0_stateless/01175_distributed_ddl_output_mode_long.reference",
    "tests/queries/0_stateless/01889_clickhouse_client_config_format.reference"
  ]
}