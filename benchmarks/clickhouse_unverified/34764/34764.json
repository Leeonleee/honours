{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 34764,
  "instance_id": "ClickHouse__ClickHouse-34764",
  "issue_numbers": [
    "29698"
  ],
  "base_commit": "26d0e5438c86e52a145aaaf4cb523c399989a878",
  "patch": "diff --git a/src/DataTypes/EnumValues.h b/src/DataTypes/EnumValues.h\nindex 17c292c5551f..0747cd4aed8c 100644\n--- a/src/DataTypes/EnumValues.h\n+++ b/src/DataTypes/EnumValues.h\n@@ -29,7 +29,7 @@ class EnumValues : public IHints<1, EnumValues<T>>\n     void fillMaps();\n \n public:\n-    EnumValues(const Values & values_);\n+    explicit EnumValues(const Values & values_);\n \n     const Values & getValues() const { return values; }\n \ndiff --git a/src/Interpreters/Aggregator.h b/src/Interpreters/Aggregator.h\nindex 05c9133cb352..3457e01f98f6 100644\n--- a/src/Interpreters/Aggregator.h\n+++ b/src/Interpreters/Aggregator.h\n@@ -184,7 +184,9 @@ struct AggregationMethodOneNumber\n     AggregationMethodOneNumber() = default;\n \n     template <typename Other>\n-    AggregationMethodOneNumber(const Other & other) : data(other.data) {}\n+    explicit AggregationMethodOneNumber(const Other & other) : data(other.data)\n+    {\n+    }\n \n     /// To use one `Method` in different threads, use different `State`.\n     using State = ColumnsHashing::HashMethodOneNumber<typename Data::value_type,\n@@ -219,7 +221,9 @@ struct AggregationMethodString\n     AggregationMethodString() = default;\n \n     template <typename Other>\n-    AggregationMethodString(const Other & other) : data(other.data) {}\n+    explicit AggregationMethodString(const Other & other) : data(other.data)\n+    {\n+    }\n \n     using State = ColumnsHashing::HashMethodString<typename Data::value_type, Mapped>;\n \n@@ -247,7 +251,9 @@ struct AggregationMethodStringNoCache\n     AggregationMethodStringNoCache() = default;\n \n     template <typename Other>\n-    AggregationMethodStringNoCache(const Other & other) : data(other.data) {}\n+    explicit AggregationMethodStringNoCache(const Other & other) : data(other.data)\n+    {\n+    }\n \n     using State = ColumnsHashing::HashMethodString<typename Data::value_type, Mapped, true, false>;\n \n@@ -275,7 +281,9 @@ struct AggregationMethodFixedString\n     AggregationMethodFixedString() = default;\n \n     template <typename Other>\n-    AggregationMethodFixedString(const Other & other) : data(other.data) {}\n+    explicit AggregationMethodFixedString(const Other & other) : data(other.data)\n+    {\n+    }\n \n     using State = ColumnsHashing::HashMethodFixedString<typename Data::value_type, Mapped>;\n \n@@ -302,7 +310,9 @@ struct AggregationMethodFixedStringNoCache\n     AggregationMethodFixedStringNoCache() = default;\n \n     template <typename Other>\n-    AggregationMethodFixedStringNoCache(const Other & other) : data(other.data) {}\n+    explicit AggregationMethodFixedStringNoCache(const Other & other) : data(other.data)\n+    {\n+    }\n \n     using State = ColumnsHashing::HashMethodFixedString<typename Data::value_type, Mapped, true, false>;\n \n@@ -373,7 +383,9 @@ struct AggregationMethodKeysFixed\n     AggregationMethodKeysFixed() = default;\n \n     template <typename Other>\n-    AggregationMethodKeysFixed(const Other & other) : data(other.data) {}\n+    explicit AggregationMethodKeysFixed(const Other & other) : data(other.data)\n+    {\n+    }\n \n     using State = ColumnsHashing::HashMethodKeysFixed<\n         typename Data::value_type,\n@@ -462,7 +474,9 @@ struct AggregationMethodSerialized\n     AggregationMethodSerialized() = default;\n \n     template <typename Other>\n-    AggregationMethodSerialized(const Other & other) : data(other.data) {}\n+    explicit AggregationMethodSerialized(const Other & other) : data(other.data)\n+    {\n+    }\n \n     using State = ColumnsHashing::HashMethodSerialized<typename Data::value_type, Mapped>;\n \ndiff --git a/src/Storages/AlterCommands.cpp b/src/Storages/AlterCommands.cpp\nindex 90e10abfa927..dd458967fc7b 100644\n--- a/src/Storages/AlterCommands.cpp\n+++ b/src/Storages/AlterCommands.cpp\n@@ -516,8 +516,13 @@ void AlterCommand::apply(StorageInMemoryMetadata & metadata, ContextPtr context)\n                     });\n \n             if (insert_it == metadata.secondary_indices.end())\n-                throw Exception(\"Wrong index name. Cannot find index \" + backQuote(after_index_name) + \" to insert after.\",\n-                        ErrorCodes::BAD_ARGUMENTS);\n+            {\n+                auto hints = metadata.secondary_indices.getHints(after_index_name);\n+                auto hints_string = !hints.empty() ? \", may be you meant: \" + toString(hints) : \"\";\n+                throw Exception(\n+                    \"Wrong index name. Cannot find index \" + backQuote(after_index_name) + \" to insert after\" + hints_string,\n+                    ErrorCodes::BAD_ARGUMENTS);\n+            }\n \n             ++insert_it;\n         }\n@@ -540,7 +545,10 @@ void AlterCommand::apply(StorageInMemoryMetadata & metadata, ContextPtr context)\n             {\n                 if (if_exists)\n                     return;\n-                throw Exception(\"Wrong index name. Cannot find index \" + backQuote(index_name) + \" to drop.\", ErrorCodes::BAD_ARGUMENTS);\n+                auto hints = metadata.secondary_indices.getHints(index_name);\n+                auto hints_string = !hints.empty() ? \", may be you meant: \" + toString(hints) : \"\";\n+                throw Exception(\n+                    \"Wrong index name. Cannot find index \" + backQuote(index_name) + \" to drop\" + hints_string, ErrorCodes::BAD_ARGUMENTS);\n             }\n \n             metadata.secondary_indices.erase(erase_it);\n@@ -582,7 +590,7 @@ void AlterCommand::apply(StorageInMemoryMetadata & metadata, ContextPtr context)\n         {\n             if (if_exists)\n                 return;\n-            throw Exception(\"Wrong constraint name. Cannot find constraint `\" + constraint_name + \"` to drop.\",\n+            throw Exception(\"Wrong constraint name. Cannot find constraint `\" + constraint_name + \"` to drop\",\n                     ErrorCodes::BAD_ARGUMENTS);\n         }\n         constraints.erase(erase_it);\ndiff --git a/src/Storages/ConstraintsDescription.h b/src/Storages/ConstraintsDescription.h\nindex ad8bd371f38c..a5095a79ccb7 100644\n--- a/src/Storages/ConstraintsDescription.h\n+++ b/src/Storages/ConstraintsDescription.h\n@@ -14,7 +14,7 @@ struct ConstraintsDescription\n {\n public:\n     ConstraintsDescription() { update(); }\n-    ConstraintsDescription(const ASTs & constraints_);\n+    explicit ConstraintsDescription(const ASTs & constraints_);\n     ConstraintsDescription(const ConstraintsDescription & other);\n     ConstraintsDescription & operator=(const ConstraintsDescription & other);\n \ndiff --git a/src/Storages/IndicesDescription.cpp b/src/Storages/IndicesDescription.cpp\nindex 9cdf96951726..a0a1bcbce2dd 100644\n--- a/src/Storages/IndicesDescription.cpp\n+++ b/src/Storages/IndicesDescription.cpp\n@@ -172,4 +172,13 @@ ExpressionActionsPtr IndicesDescription::getSingleExpressionForIndices(const Col\n     return ExpressionAnalyzer(combined_expr_list, syntax_result, context).getActions(false);\n }\n \n+Names IndicesDescription::getAllRegisteredNames() const\n+{\n+    Names result;\n+    for (const auto & index : *this)\n+    {\n+        result.emplace_back(index.name);\n+    }\n+    return result;\n+}\n }\ndiff --git a/src/Storages/IndicesDescription.h b/src/Storages/IndicesDescription.h\nindex 7071ec89890a..72e0748778f7 100644\n--- a/src/Storages/IndicesDescription.h\n+++ b/src/Storages/IndicesDescription.h\n@@ -8,6 +8,7 @@\n #include <Interpreters/ExpressionActions.h>\n #include <Parsers/IAST_fwd.h>\n #include <Storages/ColumnsDescription.h>\n+#include <Common/NamePrompter.h>\n \n namespace DB\n {\n@@ -61,7 +62,7 @@ struct IndexDescription\n };\n \n /// All secondary indices in storage\n-struct IndicesDescription : public std::vector<IndexDescription>\n+struct IndicesDescription : public std::vector<IndexDescription>, IHints<1, IndicesDescription>\n {\n     /// Index with name exists\n     bool has(const String & name) const;\n@@ -72,6 +73,9 @@ struct IndicesDescription : public std::vector<IndexDescription>\n \n     /// Return common expression for all stored indices\n     ExpressionActionsPtr getSingleExpressionForIndices(const ColumnsDescription & columns, ContextPtr context) const;\n+\n+public:\n+    Names getAllRegisteredNames() const override;\n };\n \n }\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02225_hints_for_indeices.reference b/tests/queries/0_stateless/02225_hints_for_indeices.reference\nnew file mode 100644\nindex 000000000000..2c94e4837100\n--- /dev/null\n+++ b/tests/queries/0_stateless/02225_hints_for_indeices.reference\n@@ -0,0 +1,2 @@\n+OK\n+OK\ndiff --git a/tests/queries/0_stateless/02225_hints_for_indeices.sh b/tests/queries/0_stateless/02225_hints_for_indeices.sh\nnew file mode 100755\nindex 000000000000..f4cfa17f8dbe\n--- /dev/null\n+++ b/tests/queries/0_stateless/02225_hints_for_indeices.sh\n@@ -0,0 +1,17 @@\n+#!/usr/bin/env bash\n+\n+CURDIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+# shellcheck source=../shell_config.sh\n+. \"$CURDIR\"/../shell_config.sh\n+\n+$CLICKHOUSE_CLIENT --query=\"DROP TABLE IF EXISTS t\"\n+\n+$CLICKHOUSE_CLIENT --query=\"CREATE TABLE t ENGINE=MergeTree ORDER BY n AS SELECT number AS n FROM numbers(10)\"\n+\n+$CLICKHOUSE_CLIENT --query=\"ALTER TABLE t ADD INDEX test_index n TYPE minmax GRANULARITY 32\"\n+\n+$CLICKHOUSE_CLIENT --query=\"ALTER TABLE t DROP INDEX test_indes\" 2>&1 | grep -q \"may be you meant: \\['test_index'\\]\" && echo 'OK' || echo 'FAIL'\n+\n+$CLICKHOUSE_CLIENT --query=\"ALTER TABLE t ADD INDEX  test_index1 n TYPE minmax GRANULARITY 4 AFTER test_indes\" 2>&1 | grep -q \"may be you meant: \\['test_index'\\]\" && echo 'OK' || echo 'FAIL'\n+\n+$CLICKHOUSE_CLIENT --query=\"DROP TABLE t\"\n",
  "problem_statement": "Name hints should work for data skipping indices.\n**Use case**\r\n\r\n```\r\nReceived exception from server (version 21.11.1):\r\nCode: 36. DB::Exception: Received from localhost:9000. DB::Exception: Wrong index name. Cannot find index `test_pentagram` to drop.. (BAD_ARGUMENTS)\r\n\r\ngithub-explorer.ru-central1.internal :) ALTER TABLE hackernews DROP INDEX text_pentagram\r\n```\r\n\r\nIt did not show me the typo.\n",
  "hints_text": "@alexey-milovidov @kitaisreal can I take this issue?\r\n\n@iamrajhans yes you can take it.\n@iamrajhans Any success?",
  "created_at": "2022-02-20T11:46:52Z",
  "modified_files": [
    "src/DataTypes/EnumValues.h",
    "src/Interpreters/Aggregator.h",
    "src/Storages/AlterCommands.cpp",
    "src/Storages/ConstraintsDescription.h",
    "src/Storages/IndicesDescription.cpp",
    "src/Storages/IndicesDescription.h"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02225_hints_for_indeices.reference",
    "b/tests/queries/0_stateless/02225_hints_for_indeices.sh"
  ]
}