diff --git a/src/Interpreters/join_common.cpp b/src/Interpreters/join_common.cpp
index 4c124f99e571..9a9253cee758 100644
--- a/src/Interpreters/join_common.cpp
+++ b/src/Interpreters/join_common.cpp
@@ -268,6 +268,10 @@ void joinTotals(const Block & totals, const Block & columns_to_add, const TableJ
         {
             if (table_join.rightBecomeNullable(col.type))
                 JoinCommon::convertColumnToNullable(col);
+
+            /// In case of arrayJoin it can be not one row
+            if (col.column->size() != 1)
+                col.column = col.column->cloneResized(1);
         }
 
         for (size_t i = 0; i < totals_without_keys.columns(); ++i)
diff --git a/src/Processors/Transforms/JoiningTransform.cpp b/src/Processors/Transforms/JoiningTransform.cpp
index 26630f80b179..dea887fd7d70 100644
--- a/src/Processors/Transforms/JoiningTransform.cpp
+++ b/src/Processors/Transforms/JoiningTransform.cpp
@@ -38,7 +38,11 @@ void JoiningTransform::transform(Chunk & chunk)
     if (on_totals)
     {
         /// We have to make chunk empty before return
-        block = getInputPort().getHeader().cloneWithColumns(chunk.detachColumns());
+        /// In case of using `arrayJoin` we can get more or less rows than one
+        auto cols = chunk.detachColumns();
+        for (auto & col : cols)
+            col = col->cloneResized(1);
+        block = getInputPort().getHeader().cloneWithColumns(std::move(cols));
 
         /// Drop totals if both out stream and joined stream doesn't have ones.
         /// See comment in ExpressionTransform.h
