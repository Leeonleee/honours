{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 8387,
  "instance_id": "ClickHouse__ClickHouse-8387",
  "issue_numbers": [
    "8360"
  ],
  "base_commit": "d029ee3d4157cff9938779de1ba4f1aa4db0566e",
  "patch": "diff --git a/dbms/src/Common/Dwarf.h b/dbms/src/Common/Dwarf.h\nindex 2f97212d4d7c..9abb526a2103 100644\n--- a/dbms/src/Common/Dwarf.h\n+++ b/dbms/src/Common/Dwarf.h\n@@ -127,8 +127,8 @@ class Dwarf final\n         uint64_t line = 0;\n     };\n \n-    /**\n-      * Find the file and line number information corresponding to address.\n+    /** Find the file and line number information corresponding to address.\n+      * The address must be physical - offset in object file without offset in virtual memory where the object is loaded.\n       */\n     bool findAddress(uintptr_t address, LocationInfo & info, LocationInfoMode mode) const;\n \ndiff --git a/dbms/src/Common/StackTrace.cpp b/dbms/src/Common/StackTrace.cpp\nindex 2f3c4e9c2fa6..597ed2028fa0 100644\n--- a/dbms/src/Common/StackTrace.cpp\n+++ b/dbms/src/Common/StackTrace.cpp\n@@ -258,10 +258,14 @@ static void toStringEveryLineImpl(const StackTrace::Frames & frames, size_t offs\n \n     for (size_t i = offset; i < size; ++i)\n     {\n-        const void * addr = frames[i];\n+        const void * virtual_addr = frames[i];\n+        auto object = symbol_index.findObject(virtual_addr);\n+        uintptr_t virtual_offset = object ? uintptr_t(object->address_begin) : 0;\n+        const void * physical_addr = reinterpret_cast<const void *>(uintptr_t(virtual_addr) - virtual_offset);\n+\n+        out << i << \". \" << physical_addr << \" \";\n \n-        out << i << \". \" << addr << \" \";\n-        auto symbol = symbol_index.findSymbol(addr);\n+        auto symbol = symbol_index.findSymbol(virtual_addr);\n         if (symbol)\n         {\n             int status = 0;\n@@ -272,18 +276,17 @@ static void toStringEveryLineImpl(const StackTrace::Frames & frames, size_t offs\n \n         out << \" \";\n \n-        if (auto object = symbol_index.findObject(addr))\n+        if (object)\n         {\n             if (std::filesystem::exists(object->name))\n             {\n                 auto dwarf_it = dwarfs.try_emplace(object->name, *object->elf).first;\n \n                 DB::Dwarf::LocationInfo location;\n-                if (dwarf_it->second.findAddress(uintptr_t(addr) - uintptr_t(object->address_begin), location, DB::Dwarf::LocationInfoMode::FAST))\n+                if (dwarf_it->second.findAddress(uintptr_t(physical_addr), location, DB::Dwarf::LocationInfoMode::FAST))\n                     out << location.file.toString() << \":\" << location.line;\n-                else\n-                    out << object->name;\n             }\n+            out << \" in \" << object->name;\n         }\n         else\n             out << \"?\";\ndiff --git a/dbms/src/Common/SymbolIndex.h b/dbms/src/Common/SymbolIndex.h\nindex 0e249c59bb23..1e762780dad5 100644\n--- a/dbms/src/Common/SymbolIndex.h\n+++ b/dbms/src/Common/SymbolIndex.h\n@@ -38,6 +38,7 @@ class SymbolIndex : private boost::noncopyable\n         std::unique_ptr<Elf> elf;\n     };\n \n+    /// Address in virtual memory should be passed. These addresses include offset where the object is loaded in memory.\n     const Symbol * findSymbol(const void * address) const;\n     const Object * findObject(const void * address) const;\n \n",
  "test_patch": "diff --git a/dbms/src/Common/tests/symbol_index.cpp b/dbms/src/Common/tests/symbol_index.cpp\nindex d1867cb524e6..1c7e0ffc27d7 100644\n--- a/dbms/src/Common/tests/symbol_index.cpp\n+++ b/dbms/src/Common/tests/symbol_index.cpp\n@@ -49,7 +49,7 @@ int main(int argc, char ** argv)\n     Dwarf dwarf(*object->elf);\n \n     Dwarf::LocationInfo location;\n-    if (dwarf.findAddress(uintptr_t(address), location, Dwarf::LocationInfoMode::FAST))\n+    if (dwarf.findAddress(uintptr_t(address) - uintptr_t(info.dli_fbase), location, Dwarf::LocationInfoMode::FAST))\n         std::cerr << location.file.toString() << \":\" << location.line << \"\\n\";\n     else\n         std::cerr << \"Dwarf: Not found\\n\";\n",
  "problem_statement": "trace_log and stacktrace in logs dump virtual addresses instead of relative addresses\nAbsolute memory addresses in virtual memory are not stable and can differ between 2 runs.\r\n\r\nSame ClickHouse version, same computer, 2 running instances, collect same stacktrace, and when check results:\r\n\r\n```sql\r\nselect arrayMap(x -> '0x'||lower(hex(x)),trace) as stacktrace from system.trace_log limit 2\\G\r\n```\r\n\r\nInstance 1:\r\n```\r\nRow 1:\r\n\u2500\u2500\u2500\u2500\u2500\u2500\r\nstacktrace: ['0x7f16ce92cfc3','0x55a3a2b131c4','0x55a39d797502','0x55a3a073cd24','0x55a3a10679d1','0x55a3a10690e5','0x55a3a0efad1a','0x55a3a07c87f7','0x55a3a0efacfb','0x55a3a07c87f7','0x55a3a07c133b','0x55a3a07c1700','0x55a39d60228e','0x55a39d60289e','0x55a39d5ffd5c','0x55a3a331d1e0','0x7f16cf0006db','0x7f16ce91d88f']\r\n\r\nRow 2:\r\n\u2500\u2500\u2500\u2500\u2500\u2500\r\nstacktrace: ['0x7f16ce92cfc3','0x55a3a2b131c4','0x55a39d797502','0x55a3a073cd24','0x55a3a10679d1','0x55a3a10690e5','0x55a3a0efad1a','0x55a3a07c87f7','0x55a3a0efacfb','0x55a3a07c87f7','0x55a3a07c133b','0x55a3a07c1700','0x55a39d60228e','0x55a39d60289e','0x55a39d5ffd5c','0x55a3a331d1e0','0x7f16cf0006db','0x7f16ce91d88f']\r\n\r\n2 rows in set. Elapsed: 0.005 sec. \r\n```\r\n\r\nInstance 2:\r\n```\r\nRow 1:\r\n\u2500\u2500\u2500\u2500\u2500\u2500\r\nstacktrace: ['0x7f95bf2f3fc3','0x559b1552c1c4','0x559b101b0502','0x559b13155d24','0x559b13a809d1','0x559b13a820e5','0x559b13913d1a','0x559b131e17f7','0x559b13913cfb','0x559b131e17f7','0x559b131da33b','0x559b131da700','0x559b1001b28e','0x559b1001b89e','0x559b10018d5c','0x559b15d361e0','0x7f95bf9c76db','0x7f95bf2e488f']\r\n\r\nRow 2:\r\n\u2500\u2500\u2500\u2500\u2500\u2500\r\nstacktrace: ['0x7f95bf2f3fc3','0x559b1552c1c4','0x559b101b0502','0x559b13155d24','0x559b13a809d1','0x559b13a820e5','0x559b13913d1a','0x559b131e17f7','0x559b13913cfb','0x559b131e17f7','0x559b131da33b','0x559b131da700','0x559b1001b28e','0x559b1001b89e','0x559b10018d5c','0x559b15d361e0','0x7f95bf9c76db','0x7f95bf2e488f']\r\n\r\n2 rows in set. Elapsed: 0.005 sec. \r\n```\r\n\r\nAs you can see the suffixes are the same, while the beginning differs. \r\n\r\nIt looks like we use absolute in-memory address instead of an executable relative. \r\n\r\nIt looks like that line has the calculations: https://github.com/ClickHouse/ClickHouse/blob/master/dbms/src/Common/StackTrace.cpp#L282\r\n\r\nSee also: https://stackoverflow.com/questions/34094781/find-an-instruction-in-an-executable-file-given-its-address-in-a-running-proces\r\n\r\n/cc @laplab \n",
  "hints_text": "",
  "created_at": "2019-12-24T20:11:01Z",
  "modified_files": [
    "dbms/src/Common/Dwarf.h",
    "dbms/src/Common/StackTrace.cpp",
    "dbms/src/Common/SymbolIndex.h"
  ],
  "modified_test_files": [
    "dbms/src/Common/tests/symbol_index.cpp"
  ]
}