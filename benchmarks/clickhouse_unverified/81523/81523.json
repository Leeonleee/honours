{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 81523,
  "instance_id": "ClickHouse__ClickHouse-81523",
  "issue_numbers": [
    "71967"
  ],
  "base_commit": "5ad43269b2ee320775ac6b7f5cd3696ff352ce4c",
  "patch": "diff --git a/src/DataTypes/Serializations/SerializationInterval.cpp b/src/DataTypes/Serializations/SerializationInterval.cpp\nindex 1882ca764b50..6c723d375c85 100644\n--- a/src/DataTypes/Serializations/SerializationInterval.cpp\n+++ b/src/DataTypes/Serializations/SerializationInterval.cpp\n@@ -3,6 +3,8 @@\n #include <Columns/ColumnsNumber.h>\n #include <IO/WriteBuffer.h>\n #include <Parsers/Kusto/Formatters.h>\n+#include <base/arithmeticOverflow.h>\n+\n \n namespace DB\n {\n@@ -12,29 +14,7 @@ namespace ErrorCodes\n {\n     extern const int ILLEGAL_COLUMN;\n     extern const int NOT_IMPLEMENTED;\n-}\n-\n-void SerializationKustoInterval::serializeText(\n-    const IColumn & column, const size_t row, WriteBuffer & ostr, const FormatSettings &) const\n-{\n-    const auto * interval_column = checkAndGetColumn<ColumnInterval>(&column);\n-    if (!interval_column)\n-        throw Exception(ErrorCodes::ILLEGAL_COLUMN, \"Expected column of underlying type of Interval\");\n-\n-    const auto & value = interval_column->getData()[row];\n-    const auto ticks = kind.toAvgNanoseconds() * value / 100;\n-    const auto interval_as_string = formatKQLTimespan(ticks);\n-    ostr.write(interval_as_string.c_str(), interval_as_string.length());\n-}\n-\n-void SerializationKustoInterval::deserializeText(\n-    [[maybe_unused]] IColumn & column,\n-    [[maybe_unused]] ReadBuffer & istr,\n-    [[maybe_unused]] const FormatSettings & settings,\n-    [[maybe_unused]] const bool whole) const\n-{\n-    throw Exception(\n-        ErrorCodes::NOT_IMPLEMENTED, \"Deserialization is not implemented for {}\", kind.toNameOfFunctionToIntervalDataType());\n+    extern const int BAD_ARGUMENTS;\n }\n \n SerializationInterval::SerializationInterval(IntervalKind interval_kind_) : interval_kind(std::move(interval_kind_))\n@@ -208,4 +188,28 @@ void SerializationInterval::serializeTextRaw(const IColumn & column, size_t row,\n {\n     dispatch(&ISerialization::serializeTextRaw, settings.interval.output_format, column, row, ostr, settings);\n }\n+\n+/// Everything below is trash for the Kusto dialect:\n+\n+void SerializationKustoInterval::serializeText(\n+    const IColumn & column, const size_t row, WriteBuffer & ostr, const FormatSettings &) const\n+{\n+    const auto * interval_column = checkAndGetColumn<ColumnInterval>(&column);\n+    if (!interval_column)\n+        throw Exception(ErrorCodes::ILLEGAL_COLUMN, \"Expected column of underlying type of Interval\");\n+\n+    Int64 value = interval_column->getData()[row];\n+    Int64 ticks = 0;\n+    if (common::mulOverflow(kind.toAvgNanoseconds(), value, ticks))\n+        throw Exception(ErrorCodes::BAD_ARGUMENTS, \"Formatting an interval in Kusto dialect will overflow\");\n+    ticks = ticks / 100;\n+    std::string interval_as_string = formatKQLTimespan(ticks);\n+    ostr.write(interval_as_string.c_str(), interval_as_string.length());\n+}\n+\n+void SerializationKustoInterval::deserializeText(IColumn &, ReadBuffer &, const FormatSettings &, const bool) const\n+{\n+    throw Exception(ErrorCodes::NOT_IMPLEMENTED, \"Deserialization in the Kusto dialect is not implemented\");\n+}\n+\n }\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03537_kusto_ubsan.reference b/tests/queries/0_stateless/03537_kusto_ubsan.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/03537_kusto_ubsan.sql b/tests/queries/0_stateless/03537_kusto_ubsan.sql\nnew file mode 100644\nindex 000000000000..f1573eb9f780\n--- /dev/null\n+++ b/tests/queries/0_stateless/03537_kusto_ubsan.sql\n@@ -0,0 +1,2 @@\n+SET interval_output_format = 'kusto';\n+SELECT INTERVAL 3508 MONTH; -- { clientError BAD_ARGUMENTS }\n",
  "problem_statement": "Kusto output format overflow\n**Describe the bug**\r\nSetting Kusto interval output format has overflow issues.\r\n\r\n**How to reproduce**\r\nRun Fiddle:\r\nhttps://fiddle.clickhouse.com/a1c752c2-3364-4ce6-bd35-233dc767eb04\r\n\r\nThe number shows negative in Fiddle, but with UBSAN locally:\r\n```\r\nsrc/DataTypes/Serializations/SerializationInterval.cpp:25:48: runtime error: signed integer overflow: 2629746000000000 * 3508 cannot be represented in type 'long'\r\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior src/DataTypes/Serializations/SerializationInterval.cpp:25:48 \r\n########## Short fault info ############\r\n(version 24.11.1.1, build id: , git hash: 1896f8df9324bd513701b07e1fbd3ff592525a47, architecture: x86_64) (from thread 2217955) Received signal -3\r\nSignal description: sanitizer trap\r\nSanitizer trap.\r\nStack trace: 0x000055557bd570d7 0x000055557c59814e 0x000055557092fec4 0x000055557093ab5b 0x000055558610fbb9 0x00005555861109ab 0x000055558a4eba04 0x000055558a4f986f 0x000055558a4f34b1 0x000055558a1917ce 0x0000555589deb758 0x0000555589dfe25b 0x0000555589dfd29f 0x0000555589dfb180 0x0000555589df6fe5 0x000055557c043e3f 0x000055557c047c7b 0x000055557c048647 0x000055557c03dc33 0x000055558e4a56dd 0x000055557c054cb1 0x0000555570940b98 0x00007ffff7c2a3b8 0x00007ffff7c2a47b 0x000055557092602e\r\n########################################\r\n(version 24.11.1.1, build id: , git hash: 1896f8df9324bd513701b07e1fbd3ff592525a47) (from thread 2217955) (no query) Received signal sanitizer trap (-3)\r\nSanitizer trap.\r\nStack trace: 0x000055557bd570d7 0x000055557c59814e 0x000055557092fec4 0x000055557093ab5b 0x000055558610fbb9 0x00005555861109ab 0x000055558a4eba04 0x000055558a4f986f 0x000055558a4f34b1 0x000055558a1917ce 0x0000555589deb758 0x0000555589dfe25b 0x0000555589dfd29f 0x0000555589dfb180 0x0000555589df6fe5 0x000055557c043e3f 0x000055557c047c7b 0x000055557c048647 0x000055557c03dc33 0x000055558e4a56dd 0x000055557c054cb1 0x0000555570940b98 0x00007ffff7c2a3b8 0x00007ffff7c2a47b 0x000055557092602e\r\n0. src/Common/StackTrace.cpp:380: StackTrace::tryCapture() @ 0x00000000268030d7\r\n1.0. inlined from src/Common/StackTrace.h:48: StackTrace\r\n1. src/Common/SignalHandlers.cpp:186: sanitizerDeathCallback() @ 0x000000002704414e\r\n2. __sanitizer::Die() @ 0x000000001b3dbec4\r\n3. ? @ 0x000000001b3e6b5b\r\n4. src/DataTypes/Serializations/SerializationInterval.cpp:25: DB::SerializationKustoInterval::serializeText(DB::IColumn const&, unsigned long, DB::WriteBuffer&, DB::FormatSettings const&) const @ 0x0000000030bbbbb9\r\n5. src/DataTypes/Serializations/SerializationInterval.cpp:180: DB::SerializationInterval::serializeText(DB::IColumn const&, unsigned long, DB::WriteBuffer&, DB::FormatSettings const&) const @ 0x0000000030bbc9ab\r\n6. src/Processors/Formats/Impl/PrettyBlockOutputFormat.cpp:68: DB::PrettyBlockOutputFormat::calculateWidths(DB::Block const&, DB::Chunk const&, std::vector<DB::PODArray<unsigned long, 4096ul, Allocator<false, false>, 0ul, 0ul>, std::allocator<DB::PODArray<unsigned long, 4096ul, Allocator<false, false>, 0ul, 0ul>>>&, DB::PODArray<unsigned long, 4096ul, Allocator<false, false>, 0ul, 0ul>&, DB::PODArray<unsigned long, 4096ul, Allocator<false, false>, 0ul, 0ul>&) @ 0x0000000034f97a04\r\n7. src/Processors/Formats/Impl/PrettyCompactBlockOutputFormat.cpp:208: DB::PrettyCompactBlockOutputFormat::writeChunk(DB::Chunk const&, DB::IOutputFormat::PortKind) @ 0x0000000034fa586f\r\n8. src/Processors/Formats/Impl/PrettyBlockOutputFormat.cpp:453: DB::PrettyBlockOutputFormat::consume(DB::Chunk) @ 0x0000000034f9f4b1\r\n9. src/Processors/Formats/IOutputFormat.cpp:117: DB::IOutputFormat::write(DB::Block const&) @ 0x0000000034c3d7ce\r\n10. src/Client/ClientBase.cpp:450: DB::ClientBase::onData(DB::Block&, std::shared_ptr<DB::IAST>) @ 0x0000000034897758\r\n11. src/Client/ClientBase.cpp:1261: DB::ClientBase::receiveAndProcessPacket(std::shared_ptr<DB::IAST>, bool) @ 0x00000000348aa25b\r\n12. src/Client/ClientBase.cpp:1227: DB::ClientBase::receiveResult(std::shared_ptr<DB::IAST>, int, bool) @ 0x00000000348a929f\r\n13. src/Client/ClientBase.cpp:1116: DB::ClientBase::processOrdinaryQuery(String const&, std::shared_ptr<DB::IAST>) @ 0x00000000348a7180\r\n14. src/Client/ClientBase.cpp:2074: DB::ClientBase::processParsedSingleQuery(String const&, String const&, std::shared_ptr<DB::IAST>, std::optional<bool>, bool) @ 0x00000000348a2fe5\r\n15. programs/client/Client.cpp:661: DB::Client::processFuzzingStep(String const&, std::shared_ptr<DB::IAST> const&, bool) @ 0x0000000026aefe3f\r\n16. programs/client/Client.cpp:975: DB::Client::ProcessBuzzHouseQuery(String const&) @ 0x0000000026af3c7b\r\n17. programs/client/Client.cpp:1019: DB::Client::buzzHouse() @ 0x0000000026af4647\r\n18. programs/client/Client.cpp:412: DB::Client::main(std::vector<String, std::allocator<String>> const&) @ 0x0000000026ae9c33\r\n19. base/poco/Util/src/Application.cpp:315: Poco::Util::Application::run() @ 0x0000000038f516dd\r\n20. programs/client/Client.cpp:1657: mainEntryClickHouseClient(int, char**) @ 0x0000000026b00cb1\r\n21. programs/main.cpp:246: main @ 0x000000001b3ecb98\r\n22. ? @ 0x00007ffff7c2a3b8\r\n23. ? @ 0x00007ffff7c2a47b\r\n24. _start @ 0x000000001b3d202e\r\n```\n",
  "hints_text": "",
  "created_at": "2025-06-08T22:05:39Z",
  "modified_files": [
    "src/DataTypes/Serializations/SerializationInterval.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/03537_kusto_ubsan.sql"
  ]
}