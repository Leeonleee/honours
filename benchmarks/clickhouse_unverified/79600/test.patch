diff --git a/tests/queries/0_stateless/03411_analyzer_scalar_correlated_subquery.reference b/tests/queries/0_stateless/03411_analyzer_scalar_correlated_subquery.reference
new file mode 100644
index 000000000000..ec4565a687cc
--- /dev/null
+++ b/tests/queries/0_stateless/03411_analyzer_scalar_correlated_subquery.reference
@@ -0,0 +1,35 @@
+QUERY id: 0
+  PROJECTION COLUMNS
+    number UInt64
+  PROJECTION
+    LIST id: 1, nodes: 1
+      COLUMN id: 2, column_name: number, result_type: UInt64, source_id: 3
+  JOIN TREE
+    TABLE_FUNCTION id: 3, alias: __table1, table_function_name: numbers
+      ARGUMENTS
+        LIST id: 4, nodes: 1
+          CONSTANT id: 5, constant_value: UInt64_2, constant_value_type: UInt8
+  WHERE
+    FUNCTION id: 6, function_name: equals, function_type: ordinary, result_type: UInt8
+      ARGUMENTS
+        LIST id: 7, nodes: 2
+          QUERY id: 8, alias: __table2, is_subquery: 1, is_correlated: 1
+            CORRELATED COLUMNS
+              LIST id: 9, nodes: 1
+                COLUMN id: 10, column_name: number, result_type: UInt64, source_id: 3
+            PROJECTION COLUMNS
+              count() UInt64
+            PROJECTION
+              LIST id: 11, nodes: 1
+                FUNCTION id: 12, function_name: count, function_type: aggregate, result_type: UInt64
+            JOIN TREE
+              TABLE id: 13, alias: __table3, table_name: system.one
+            WHERE
+              FUNCTION id: 14, function_name: equals, function_type: ordinary, result_type: UInt8
+                ARGUMENTS
+                  LIST id: 15, nodes: 2
+                    COLUMN id: 10, column_name: number, result_type: UInt64, source_id: 3
+                    CONSTANT id: 16, constant_value: UInt64_2, constant_value_type: UInt8
+          CONSTANT id: 17, constant_value: UInt64_0, constant_value_type: UInt8
+0
+1
diff --git a/tests/queries/0_stateless/03411_analyzer_scalar_correlated_subquery.sql b/tests/queries/0_stateless/03411_analyzer_scalar_correlated_subquery.sql
new file mode 100644
index 000000000000..a4efc07412c0
--- /dev/null
+++ b/tests/queries/0_stateless/03411_analyzer_scalar_correlated_subquery.sql
@@ -0,0 +1,11 @@
+set enable_analyzer = 1;
+set allow_experimental_correlated_subqueries = 1;
+
+EXPLAIN QUERY TREE
+SELECT *
+FROM numbers(2)
+WHERE (SELECT count() FROM system.one WHERE number = 2) = 0;
+
+SELECT *
+FROM numbers(2)
+WHERE (SELECT count() FROM system.one WHERE number = 2) = 0;
diff --git a/tests/queries/0_stateless/03447_analyzer_correlated_subqueries_tpc_h.reference b/tests/queries/0_stateless/03447_analyzer_correlated_subqueries_tpc_h.reference
new file mode 100644
index 000000000000..e69de29bb2d1
diff --git a/tests/queries/0_stateless/03447_analyzer_correlated_subqueries_tpc_h.sql b/tests/queries/0_stateless/03447_analyzer_correlated_subqueries_tpc_h.sql
new file mode 100644
index 000000000000..36c100d581f6
--- /dev/null
+++ b/tests/queries/0_stateless/03447_analyzer_correlated_subqueries_tpc_h.sql
@@ -0,0 +1,314 @@
+CREATE TABLE nation (
+    n_nationkey  Int32,
+    n_name       String,
+    n_regionkey  Int32,
+    n_comment    String)
+ORDER BY (n_nationkey);
+
+CREATE TABLE region (
+    r_regionkey  Int32,
+    r_name       String,
+    r_comment    String)
+ORDER BY (r_regionkey);
+
+CREATE TABLE part (
+    p_partkey     Int32,
+    p_name        String,
+    p_mfgr        String,
+    p_brand       String,
+    p_type        String,
+    p_size        Int32,
+    p_container   String,
+    p_retailprice Decimal(15,2),
+    p_comment     String)
+ORDER BY (p_partkey);
+
+CREATE TABLE supplier (
+    s_suppkey     Int32,
+    s_name        String,
+    s_address     String,
+    s_nationkey   Int32,
+    s_phone       String,
+    s_acctbal     Decimal(15,2),
+    s_comment     String)
+ORDER BY (s_suppkey);
+
+CREATE TABLE partsupp (
+    ps_partkey     Int32,
+    ps_suppkey     Int32,
+    ps_availqty    Int32,
+    ps_supplycost  Decimal(15,2),
+    ps_comment     String)
+ORDER BY (ps_partkey, ps_suppkey);
+
+CREATE TABLE customer (
+    c_custkey     Int32,
+    c_name        String,
+    c_address     String,
+    c_nationkey   Int32,
+    c_phone       String,
+    c_acctbal     Decimal(15,2),
+    c_mktsegment  String,
+    c_comment     String)
+ORDER BY (c_custkey);
+
+CREATE TABLE orders  (
+    o_orderkey       Int32,
+    o_custkey        Int32,
+    o_orderstatus    String,
+    o_totalprice     Decimal(15,2),
+    o_orderdate      Date,
+    o_orderpriority  String,
+    o_clerk          String,
+    o_shippriority   Int32,
+    o_comment        String)
+ORDER BY (o_orderkey);
+-- The following is an alternative order key which is not compliant with the official TPC-H rules but recommended by sec. 4.5 in
+-- "Quantifying TPC-H Choke Points and Their Optimizations":
+-- ORDER BY (o_orderdate, o_orderkey);
+
+CREATE TABLE lineitem (
+    l_orderkey       Int32,
+    l_partkey        Int32,
+    l_suppkey        Int32,
+    l_linenumber     Int32,
+    l_quantity       Decimal(15,2),
+    l_extendedprice  Decimal(15,2),
+    l_discount       Decimal(15,2),
+    l_tax            Decimal(15,2),
+    l_returnflag     String,
+    l_linestatus     String,
+    l_shipdate       Date,
+    l_commitdate     Date,
+    l_receiptdate    Date,
+    l_shipinstruct   String,
+    l_shipmode       String,
+    l_comment        String)
+ORDER BY (l_orderkey, l_linenumber);
+-- The following is an alternative order key which is not compliant with the official TPC-H rules but recommended by sec. 4.5 in
+-- "Quantifying TPC-H Choke Points and Their Optimizations":
+-- ORDER BY (l_shipdate, l_orderkey, l_linenumber);
+
+INSERT INTO nation SELECT * FROM generateRandom() LIMIT 1;
+INSERT INTO region SELECT * FROM generateRandom() LIMIT 1;
+INSERT INTO part SELECT * FROM generateRandom() LIMIT 1;
+INSERT INTO supplier SELECT * FROM generateRandom() LIMIT 1;
+INSERT INTO partsupp SELECT * FROM generateRandom() LIMIT 1;
+INSERT INTO customer SELECT * FROM generateRandom() LIMIT 1;
+INSERT INTO orders SELECT * FROM generateRandom() LIMIT 1;
+INSERT INTO lineitem SELECT * FROM generateRandom() LIMIT 1;
+
+set enable_analyzer = 1;
+set allow_experimental_correlated_subqueries = 1;
+SET enable_parallel_replicas = 0;
+
+-- Q2
+SELECT
+    s_acctbal,
+    s_name,
+    n_name,
+    p_partkey,
+    p_mfgr,
+    s_address,
+    s_phone,
+    s_comment
+FROM
+    part,
+    supplier,
+    partsupp,
+    nation,
+    region
+WHERE
+    p_partkey = ps_partkey
+    AND s_suppkey = ps_suppkey
+    AND p_size = 15
+    AND p_type LIKE '%BRASS'
+    AND s_nationkey = n_nationkey
+    AND n_regionkey = r_regionkey
+    AND r_name = 'EUROPE'
+    AND ps_supplycost = (
+        SELECT
+            min(ps_supplycost)
+        FROM
+            partsupp,
+            supplier,
+            nation,
+            region
+        WHERE
+            p_partkey = ps_partkey
+            AND s_suppkey = ps_suppkey
+            AND s_nationkey = n_nationkey
+            AND n_regionkey = r_regionkey
+            AND r_name = 'EUROPE'
+    )
+ORDER BY
+    s_acctbal DESC,
+    n_name,
+    s_name,
+    p_partkey
+FORMAT Null;
+
+-- Q4
+SELECT
+    o_orderpriority,
+    count(*) AS order_count
+FROM
+    orders
+WHERE
+    o_orderdate >= DATE '1993-07-01'
+    AND o_orderdate < DATE '1993-07-01' + INTERVAL '3' MONTH
+    AND EXISTS (
+        SELECT
+            *
+        FROM
+            lineitem
+        WHERE
+            l_orderkey = o_orderkey
+            AND l_commitdate < l_receiptdate
+    )
+GROUP BY
+    o_orderpriority
+ORDER BY
+    o_orderpriority
+FORMAT Null;
+
+-- Q17
+SELECT
+    sum(l_extendedprice) / 7.0 AS avg_yearly
+FROM
+    lineitem,
+    part
+WHERE
+    p_partkey = l_partkey
+    AND p_brand = 'Brand#23'
+    AND p_container = 'MED BOX'
+    AND l_quantity < (
+        SELECT
+            0.2 * avg(l_quantity)
+        FROM
+            lineitem
+        WHERE
+            l_partkey = p_partkey
+    )
+FORMAT Null;
+
+-- Q20
+SELECT
+    s_name,
+    s_address
+FROM
+    supplier,
+    nation
+WHERE
+    s_suppkey in (
+        SELECT
+            ps_suppkey
+        FROM
+            partsupp
+        WHERE
+            ps_partkey in (
+                SELECT
+                    p_partkey
+                FROM
+                    part
+                WHERE
+                    p_name LIKE 'forest%'
+            )
+            AND ps_availqty > (
+                SELECT
+                    0.5 * sum(l_quantity)
+                FROM
+                    lineitem
+                WHERE
+                    l_partkey = ps_partkey
+                    AND l_suppkey = ps_suppkey
+                    AND l_shipdate >= DATE '1994-01-01'
+                    AND l_shipdate < DATE '1994-01-01' + INTERVAL '1' year
+            )
+    )
+    AND s_nationkey = n_nationkey
+    AND n_name = 'CANADA'
+ORDER BY
+    s_name
+FORMAT Null;
+
+-- Q21
+SELECT
+    s_name,
+    count(*) AS numwait
+FROM
+    supplier,
+    lineitem l1,
+    orders,
+    nation
+WHERE
+    s_suppkey = l1.l_suppkey
+    AND o_orderkey = l1.l_orderkey
+    AND o_orderstatus = 'F'
+    AND l1.l_receiptdate > l1.l_commitdate
+    AND EXISTS (
+        SELECT
+            *
+        FROM
+            lineitem l2
+        WHERE
+            l2.l_orderkey = l1.l_orderkey
+            AND l2.l_suppkey <> l1.l_suppkey
+    )
+    AND NOT EXISTS (
+        SELECT
+            *
+        FROM
+            lineitem l3
+        WHERE
+            l3.l_orderkey = l1.l_orderkey
+            AND l3.l_suppkey <> l1.l_suppkey
+            AND l3.l_receiptdate > l3.l_commitdate
+    )
+    AND s_nationkey = n_nationkey
+    AND n_name = 'SAUDI ARABIA'
+GROUP BY
+    s_name
+ORDER BY
+    numwait DESC,
+    s_name
+FORMAT Null;
+
+-- Q22
+SELECT
+    cntrycode,
+    count(*) AS numcust,
+    sum(c_acctbal) AS totacctbal
+FROM (
+    SELECT
+        substring(c_phone FROM 1 for 2) AS cntrycode,
+        c_acctbal
+    FROM
+        customer
+    WHERE
+        substring(c_phone FROM 1 for 2) in
+            ('13', '31', '23', '29', '30', '18', '17')
+        AND c_acctbal > (
+            SELECT
+                avg(c_acctbal)
+            FROM
+                customer
+            WHERE
+                c_acctbal > 0.00
+                AND substring(c_phone FROM 1 for 2) in
+                    ('13', '31', '23', '29', '30', '18', '17')
+        )
+        AND NOT EXISTS (
+            SELECT
+                *
+            FROM
+                orders
+            WHERE
+                o_custkey = c_custkey
+        )
+    ) AS custsale
+GROUP BY
+    cntrycode
+ORDER BY
+    cntrycode
+FORMAT Null;
