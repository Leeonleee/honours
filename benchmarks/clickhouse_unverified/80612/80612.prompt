You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
Logical error with ShardNumColumnToFunctionPass
### Describe the bug

Easy to reproduce. Only happens with new analyzer.

### How to reproduce

Use `test_cluster_two_shards` remote server configuration from tests, then run:

```sql
SET join_use_nulls = 1;
CREATE TABLE t0 (c0 Int) ENGINE = Memory();
CREATE TABLE t1 (c0 Int) ENGINE = Distributed('test_cluster_two_shards', default, t0);
SELECT t1._shard_num % t1._shard_num FROM t1 FULL JOIN (SELECT 1 AS c0) tx ON TRUE;
```

### Error message and/or stacktrace

Stack trace:

```
<Fatal> : Logical error: 'Function shardNum() % shardNum() expects argument 1 to have Nullable(UInt32) type but receives UInt32 after running ShardNumColumnToFunctionPass pass'.
<Fatal> : Stack trace (when copying this message, always include the lines below):

0. std::exception::exception[abi:ne180100]() @ 0x00000000197ec5b4
1. base/poco/Foundation/src/Exception.cpp:27: Poco::Exception::Exception(String const&, int) @ 0x000000003982c080
2. src/Common/Exception.cpp:106: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000002561c26b
3. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000001969da76
4. src/Common/Exception.h:123: DB::Exception::Exception<String, unsigned long, String, String, String const&>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<unsigned long>::type, std::type_identity<String>::type, std::type_identity<String>::type, std::type_identity<String const&>::type>, String&&, unsigned long&&, String&&, String&&, String const&) @ 0x000000003185aeb7
5. src/Analyzer/QueryTreePassManager.cpp:148: DB::InDepthQueryTreeVisitor<DB::(anonymous namespace)::ValidationChecker, false>::visit(std::shared_ptr<DB::IQueryTreeNode>&) @ 0x0000000031856165
6. src/Analyzer/InDepthQueryTreeVisitor.h:90: DB::InDepthQueryTreeVisitor<DB::(anonymous namespace)::ValidationChecker, false>::visit(std::shared_ptr<DB::IQueryTreeNode>&) @ 0x0000000031856408
7. src/Analyzer/InDepthQueryTreeVisitor.h:90: DB::InDepthQueryTreeVisitor<DB::(anonymous namespace)::ValidationChecker, false>::visit(std::shared_ptr<DB::IQueryTreeNode>&) @ 0x0000000031856408
8. src/Analyzer/QueryTreePassManager.cpp:186: DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x00000000318552a2
9. src/Interpreters/InterpreterSelectQueryAnalyzer.cpp:149: DB::(anonymous namespace)::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) @ 0x0000000031dcc170
10. src/Interpreters/InterpreterSelectQueryAnalyzer.cpp:167: DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000031dc9dd7
11. contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:597: std::__unique_if<DB::InterpreterSelectQueryAnalyzer>::__unique_single std::make_unique[abi:ne180100]<DB::InterpreterSelectQueryAnalyzer, std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context> const&, DB::SelectQueryOptions const&>(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context> const&, DB::SelectQueryOptions const&) @ 0x0000000031dced2e
12. src/Interpreters/InterpreterSelectQueryAnalyzer.cpp:292: std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne180100]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) @ 0x0000000031dce6a5
13. contrib/llvm-project/libcxx/include/__functional/function.h:714: ? @ 0x0000000031d16c6f
14. src/Interpreters/executeQuery.cpp:1389: DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000322eec7d
15. src/Interpreters/executeQuery.cpp:1622: DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x00000000322e997b
16. src/Server/TCPHandler.cpp:662: DB::TCPHandler::runImpl() @ 0x00000000356d591c
17. src/Server/TCPHandler.cpp:2625: DB::TCPHandler::run() @ 0x000000003570476e
18. base/poco/Net/src/TCPServerConnection.cpp:40: Poco::Net::TCPServerConnection::start() @ 0x0000000039956622
19. base/poco/Net/src/TCPServerDispatcher.cpp:115: Poco::Net::TCPServerDispatcher::run() @ 0x00000000399572f2
20. base/poco/Foundation/src/ThreadPool.cpp:205: Poco::PooledThread::run() @ 0x00000000398c0a77
21. base/poco/Foundation/src/Thread_POSIX.cpp:335: Poco::ThreadImpl::runnableEntry(void*) @ 0x00000000398bc4ae
22. ? @ 0x00007ffff7ca1e2e
23. ? @ 0x00007ffff7d33a4c
```
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
