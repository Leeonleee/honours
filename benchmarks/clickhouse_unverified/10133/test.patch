diff --git a/tests/queries/0_stateless/00561_storage_join.sql b/tests/queries/0_stateless/00561_storage_join.sql
index 08f768157029..62ca80d31fe2 100644
--- a/tests/queries/0_stateless/00561_storage_join.sql
+++ b/tests/queries/0_stateless/00561_storage_join.sql
@@ -1,5 +1,3 @@
-SET any_join_distinct_right_table_keys = 1;
-
 drop table IF EXISTS joinbug;
 
 CREATE TABLE joinbug (
@@ -21,7 +19,7 @@ CREATE TABLE joinbug_join (
   val UInt64,
   val2 Int32,
   created UInt64
-) ENGINE = Join(ANY, INNER, id2);
+) ENGINE = Join(SEMI, LEFT, id2);
 
 insert into joinbug_join (id, id2, val, val2, created)
 select id, id2, val, val2, created
@@ -36,7 +34,7 @@ select id, id2, val, val2, created
 from (
    SELECT toUInt64(arrayJoin(range(50))) AS id2
 ) js1
-ANY INNER JOIN joinbug_join using id2;
+SEMI LEFT JOIN joinbug_join using id2;
 
 DROP TABLE joinbug;
 DROP TABLE joinbug_join;
diff --git a/tests/queries/0_stateless/01115_join_with_dictionary.reference b/tests/queries/0_stateless/01115_join_with_dictionary.reference
new file mode 100644
index 000000000000..f909a3d61f52
--- /dev/null
+++ b/tests/queries/0_stateless/01115_join_with_dictionary.reference
@@ -0,0 +1,103 @@
+flat: left on
+0	0	0	0	0
+1	1	1	1	1
+2	2	2	2	2
+3	3	3	3	3
+4	0	0		0
+flat: left
+0	0	0	0
+1	1	1	1
+2	2	2	2
+3	3	3	3
+4	0		0
+flat: any left
+0	0	0	0
+1	1	1	1
+2	2	2	2
+3	3	3	3
+4	0		0
+flat: semi left
+0	0	0	0
+1	1	1	1
+2	2	2	2
+3	3	3	3
+flat: anti left
+4	0		0
+flat: inner
+0	0	0	0
+1	1	1	1
+flat: inner on
+0	0	0	0	0
+1	1	1	1	1
+2	2	2	2	2
+3	3	3	3	3
+hashed: left on
+0	0	0	0	0
+1	1	1	1	1
+2	2	2	2	2
+3	3	3	3	3
+4	\N	\N	\N	\N
+hashed: left
+0	0	0	0
+1	1	1	1
+2	2	2	2
+3	3	3	3
+4	\N	\N	\N
+hashed: any left
+0	0	0	0
+1	1	1	1
+2	2	2	2
+3	3	3	3
+4	\N	\N	\N
+hashed: semi left
+0	0	0	0
+1	1	1	1
+2	2	2	2
+3	3	3	3
+hashed: anti left
+4	\N	\N	\N
+hashed: inner
+0	0	0	0
+1	1	1	1
+hashed: inner on
+0	0	0	0	0
+1	1	1	1	1
+2	2	2	2	2
+3	3	3	3	3
+complex_cache (smoke)
+0	\N	\N	\N	\N
+1	\N	\N	\N	\N
+2	\N	\N	\N	\N
+3	\N	\N	\N	\N
+4	\N	\N	\N	\N
+not optimized (smoke)
+0	0	0	0
+1	1	1	1
+2	2	2	2
+3	3	3	3
+-
+0	0	0	0	0
+1	1	1	1	1
+\N	2	2	2	2
+\N	3	3	3	3
+-
+2	2	2	2
+3	3	3	3
+4	\N	\N	\N
+5	\N	\N	\N
+\N	0	0	0
+\N	1	1	1
+-
+0	0	0	0
+1	1	1	1
+-
+0	0	0	0
+1	1	1	1
+3	3	3	3
+2	2	2	2
+-
+0	0	0	0
+1	1	1	1
+-
+3	3	3	3
+2	2	2	2
diff --git a/tests/queries/0_stateless/01115_join_with_dictionary.sql b/tests/queries/0_stateless/01115_join_with_dictionary.sql
new file mode 100644
index 000000000000..65704f2b3eba
--- /dev/null
+++ b/tests/queries/0_stateless/01115_join_with_dictionary.sql
@@ -0,0 +1,90 @@
+SET send_logs_level = 'none';
+
+DROP DATABASE IF EXISTS db_01115;
+CREATE DATABASE db_01115 Engine = Ordinary;
+
+USE db_01115;
+
+DROP DICTIONARY IF EXISTS dict_flat;
+DROP DICTIONARY IF EXISTS dict_hashed;
+DROP DICTIONARY IF EXISTS dict_complex_cache;
+
+CREATE TABLE t1 (key UInt64, a UInt8, b String, c Float64) ENGINE = MergeTree() ORDER BY key;
+INSERT INTO t1 SELECT number, number, toString(number), number from numbers(4);
+
+CREATE DICTIONARY dict_flat (key UInt64 DEFAULT 0, a UInt8 DEFAULT 42, b String DEFAULT 'x', c Float64 DEFAULT 42.0)
+PRIMARY KEY key
+SOURCE(CLICKHOUSE(HOST 'localhost' PORT 9000 USER 'default' TABLE 't1' PASSWORD '' DB 'db_01115'))
+LIFETIME(MIN 1 MAX 10)
+LAYOUT(FLAT());
+
+CREATE DICTIONARY db_01115.dict_hashed (key UInt64 DEFAULT 0, a UInt8 DEFAULT 42, b String DEFAULT 'x', c Float64 DEFAULT 42.0)
+PRIMARY KEY key
+SOURCE(CLICKHOUSE(HOST 'localhost' PORT 9000 USER 'default' TABLE 't1' DB 'db_01115'))
+LIFETIME(MIN 1 MAX 10)
+LAYOUT(HASHED());
+
+CREATE DICTIONARY dict_complex_cache (key UInt64 DEFAULT 0, a UInt8 DEFAULT 42, b String DEFAULT 'x', c Float64 DEFAULT 42.0)
+PRIMARY KEY key, b
+SOURCE(CLICKHOUSE(HOST 'localhost' PORT 9000 USER 'default' TABLE 't1' DB 'db_01115'))
+LIFETIME(MIN 1 MAX 10)
+LAYOUT(COMPLEX_KEY_CACHE(SIZE_IN_CELLS 1));
+
+SET join_use_nulls = 0;
+
+SELECT 'flat: left on';
+SELECT * FROM (SELECT number AS key FROM numbers(5)) s1 LEFT JOIN dict_flat d ON s1.key = d.key ORDER BY s1.key;
+SELECT 'flat: left';
+SELECT * FROM (SELECT number AS key FROM numbers(5)) s1 LEFT JOIN dict_flat d USING(key) ORDER BY key;
+SELECT 'flat: any left';
+SELECT * FROM (SELECT number AS key FROM numbers(5)) s1 ANY LEFT JOIN dict_flat d USING(key) ORDER BY key;
+SELECT 'flat: semi left';
+SELECT * FROM (SELECT number AS key FROM numbers(5)) s1 SEMI JOIN dict_flat d USING(key) ORDER BY key;
+SELECT 'flat: anti left';
+SELECT * FROM (SELECT number AS key FROM numbers(5)) s1 ANTI JOIN dict_flat d USING(key) ORDER BY key;
+SELECT 'flat: inner';
+SELECT * FROM (SELECT number AS key FROM numbers(2)) s1 JOIN dict_flat d USING(key);
+SELECT 'flat: inner on';
+SELECT * FROM (SELECT number AS k FROM numbers(100)) s1 JOIN dict_flat d ON k = key ORDER BY k;
+
+SET join_use_nulls = 1;
+
+SELECT 'hashed: left on';
+SELECT * FROM (SELECT number AS key FROM numbers(5)) s1 LEFT JOIN dict_hashed d ON s1.key = d.key ORDER BY s1.key;
+SELECT 'hashed: left';
+SELECT * FROM (SELECT number AS key FROM numbers(5)) s1 LEFT JOIN dict_hashed d USING(key) ORDER BY key;
+SELECT 'hashed: any left';
+SELECT * FROM (SELECT number AS key FROM numbers(5)) s1 ANY LEFT JOIN dict_hashed d USING(key) ORDER BY key;
+SELECT 'hashed: semi left';
+SELECT * FROM (SELECT number AS key FROM numbers(5)) s1 SEMI JOIN dict_hashed d USING(key) ORDER BY key;
+SELECT 'hashed: anti left';
+SELECT * FROM (SELECT number AS key FROM numbers(5)) s1 ANTI JOIN dict_hashed d USING(key) ORDER BY key;
+SELECT 'hashed: inner';
+SELECT * FROM (SELECT number AS key FROM numbers(2)) s1 JOIN dict_hashed d USING(key);
+SELECT 'hashed: inner on';
+SELECT * FROM (SELECT number AS k FROM numbers(100)) s1 JOIN dict_hashed d ON k = key ORDER BY k;
+
+SELECT 'complex_cache (smoke)';
+SELECT * FROM (SELECT number AS key FROM numbers(5)) s1 LEFT JOIN dict_complex_cache d ON s1.key = d.key ORDER BY s1.key;
+
+SELECT 'not optimized (smoke)';
+SELECT * FROM (SELECT number AS key FROM numbers(2)) s1 RIGHT JOIN dict_flat d USING(key) ORDER BY key;
+SELECT '-';
+SELECT * FROM (SELECT number AS key FROM numbers(2)) s1 RIGHT JOIN dict_flat d ON s1.key = d.key ORDER BY d.key;
+SELECT '-';
+SELECT * FROM (SELECT number + 2 AS key FROM numbers(4)) s1 FULL JOIN dict_flat d USING(key) ORDER BY s1.key, d.key;
+SELECT '-';
+SELECT * FROM (SELECT number AS key FROM numbers(2)) s1 ANY INNER JOIN dict_flat d USING(key);
+SELECT '-';
+SELECT * FROM (SELECT number AS key FROM numbers(2)) s1 ANY RIGHT JOIN dict_flat d USING(key);
+SELECT '-';
+SELECT * FROM (SELECT number AS key FROM numbers(2)) s1 SEMI RIGHT JOIN dict_flat d USING(key);
+SELECT '-';
+SELECT * FROM (SELECT number AS key FROM numbers(2)) s1 ANTI RIGHT JOIN dict_flat d USING(key);
+
+DROP DICTIONARY dict_flat;
+DROP DICTIONARY dict_hashed;
+DROP DICTIONARY dict_complex_cache;
+
+DROP TABLE t1;
+DROP DATABASE IF EXISTS db_01115;
diff --git a/tests/queries/1_stateful/00065_loyalty_with_storage_join.sql b/tests/queries/1_stateful/00065_loyalty_with_storage_join.sql
index d3e73faa7bea..15a2a75cf589 100644
--- a/tests/queries/1_stateful/00065_loyalty_with_storage_join.sql
+++ b/tests/queries/1_stateful/00065_loyalty_with_storage_join.sql
@@ -1,16 +1,14 @@
-SET any_join_distinct_right_table_keys = 1;
-
 USE test;
 
 DROP TABLE IF EXISTS join;
-CREATE TABLE join (UserID UInt64, loyalty Int8) ENGINE = Join(ANY, INNER, UserID);
+CREATE TABLE join (UserID UInt64, loyalty Int8) ENGINE = Join(SEMI, LEFT, UserID);
 
 INSERT INTO join
 SELECT
     UserID,
     toInt8(if((sum(SearchEngineID = 2) AS yandex) > (sum(SearchEngineID = 3) AS google),
-	yandex / (yandex + google), 
-	-google / (yandex + google)) * 10) AS loyalty
+    yandex / (yandex + google), 
+    -google / (yandex + google)) * 10) AS loyalty
 FROM hits
 WHERE (SearchEngineID = 2) OR (SearchEngineID = 3)
 GROUP BY UserID
@@ -19,17 +17,17 @@ HAVING (yandex + google) > 10;
 SELECT
     loyalty,
     count()
-FROM hits ANY INNER JOIN join USING UserID
+FROM hits SEMI LEFT JOIN join USING UserID
 GROUP BY loyalty
 ORDER BY loyalty ASC;
 
 DETACH TABLE join;
-ATTACH TABLE join (UserID UInt64, loyalty Int8) ENGINE = Join(ANY, INNER, UserID);
+ATTACH TABLE join (UserID UInt64, loyalty Int8) ENGINE = Join(SEMI, LEFT, UserID);
 
 SELECT
     loyalty,
     count()
-FROM hits ANY INNER JOIN join USING UserID
+FROM hits SEMI LEFT JOIN join USING UserID
 GROUP BY loyalty
 ORDER BY loyalty ASC;
 
