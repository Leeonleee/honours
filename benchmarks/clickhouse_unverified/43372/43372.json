{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 43372,
  "instance_id": "ClickHouse__ClickHouse-43372",
  "issue_numbers": [
    "43257"
  ],
  "base_commit": "0efceae6ce622138f6088cb0287fb5bd2d3d33a0",
  "patch": "diff --git a/src/Analyzer/Passes/AggregateFunctionsArithmericOperationsPass.cpp b/src/Analyzer/Passes/AggregateFunctionsArithmericOperationsPass.cpp\nindex e4e99c6e9472..01072e0b3fcf 100644\n--- a/src/Analyzer/Passes/AggregateFunctionsArithmericOperationsPass.cpp\n+++ b/src/Analyzer/Passes/AggregateFunctionsArithmericOperationsPass.cpp\n@@ -117,8 +117,9 @@ class AggregateFunctionsArithmericOperationsVisitor : public InDepthQueryTreeVis\n             if (!function_name_if_constant_is_negative.empty() &&\n                 left_argument_constant_value_literal < zeroField(left_argument_constant_value_literal))\n             {\n-                resolveAggregateFunctionNode(*aggregate_function_node, function_name_if_constant_is_negative);\n+                lower_function_name = function_name_if_constant_is_negative;\n             }\n+            resolveAggregateFunctionNode(*aggregate_function_node, inner_function_arguments_nodes[1], lower_function_name);\n \n             auto inner_function = aggregate_function_arguments_nodes[0];\n             auto inner_function_right_argument = std::move(inner_function_arguments_nodes[1]);\n@@ -133,8 +134,9 @@ class AggregateFunctionsArithmericOperationsVisitor : public InDepthQueryTreeVis\n             if (!function_name_if_constant_is_negative.empty() &&\n                 right_argument_constant_value_literal < zeroField(right_argument_constant_value_literal))\n             {\n-                resolveAggregateFunctionNode(*aggregate_function_node, function_name_if_constant_is_negative);\n+                lower_function_name = function_name_if_constant_is_negative;\n             }\n+            resolveAggregateFunctionNode(*aggregate_function_node, inner_function_arguments_nodes[0], function_name_if_constant_is_negative);\n \n             auto inner_function = aggregate_function_arguments_nodes[0];\n             auto inner_function_left_argument = std::move(inner_function_arguments_nodes[0]);\n@@ -145,13 +147,13 @@ class AggregateFunctionsArithmericOperationsVisitor : public InDepthQueryTreeVis\n     }\n \n private:\n-    static inline void resolveAggregateFunctionNode(FunctionNode & function_node, const String & aggregate_function_name)\n+    static inline void resolveAggregateFunctionNode(FunctionNode & function_node, QueryTreeNodePtr & argument, const String & aggregate_function_name)\n     {\n         auto function_aggregate_function = function_node.getAggregateFunction();\n \n         AggregateFunctionProperties properties;\n         auto aggregate_function = AggregateFunctionFactory::instance().get(aggregate_function_name,\n-            function_aggregate_function->getArgumentTypes(),\n+            { argument->getResultType() },\n             function_aggregate_function->getParameters(),\n             properties);\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02481_optimize_aggregation_arithmetics.reference b/tests/queries/0_stateless/02481_optimize_aggregation_arithmetics.reference\nnew file mode 100644\nindex 000000000000..1cc6fc5d4b15\n--- /dev/null\n+++ b/tests/queries/0_stateless/02481_optimize_aggregation_arithmetics.reference\n@@ -0,0 +1,81 @@\n+-- { echoOn }\n+EXPLAIN actions=1\n+    (\n+        SELECT round(avg(log(2) * number), 6) AS k\n+        FROM numbers(10000000)\n+        GROUP BY number % 3, number % 2\n+    )\n+SETTINGS allow_experimental_analyzer=1;\n+Expression ((Project names + Projection))\n+Actions: INPUT : 0 -> avg(number_0) Float64 : 0\n+         COLUMN Const(Float64) -> 0.6931471805599453_Float64 Float64 : 1\n+         COLUMN Const(UInt8) -> 6_UInt8 UInt8 : 2\n+         FUNCTION multiply(0.6931471805599453_Float64 :: 1, avg(number_0) :: 0) -> multiply(0.6931471805599453_Float64, avg(number_0)) Float64 : 3\n+         FUNCTION round(multiply(0.6931471805599453_Float64, avg(number_0)) :: 3, 6_UInt8 :: 2) -> round(multiply(0.6931471805599453_Float64, avg(number_0)), 6_UInt8) Float64 : 0\n+         ALIAS round(multiply(0.6931471805599453_Float64, avg(number_0)), 6_UInt8) :: 0 -> k Float64 : 2\n+Positions: 2\n+  Aggregating\n+  Keys: modulo(number_0, 3_UInt8), modulo(number_0, 2_UInt8)\n+  Aggregates:\n+      avg(number_0)\n+        Function: avg(UInt64) \u2192 Float64\n+        Arguments: number_0\n+    Expression ((Before GROUP BY + Change column names to column identifiers))\n+    Actions: INPUT : 0 -> number UInt64 : 0\n+             COLUMN Const(UInt8) -> 3_UInt8 UInt8 : 1\n+             COLUMN Const(UInt8) -> 2_UInt8 UInt8 : 2\n+             ALIAS number :: 0 -> number_0 UInt64 : 3\n+             FUNCTION modulo(number_0 : 3, 3_UInt8 :: 1) -> modulo(number_0, 3_UInt8) UInt8 : 0\n+             FUNCTION modulo(number_0 : 3, 2_UInt8 :: 2) -> modulo(number_0, 2_UInt8) UInt8 : 1\n+    Positions: 0 1 3\n+      ReadFromStorage (SystemNumbers)\n+EXPLAIN actions=1\n+    (\n+        SELECT round(log(2) * avg(number), 6) AS k\n+        FROM numbers(10000000)\n+        GROUP BY number % 3, number % 2\n+    )\n+SETTINGS allow_experimental_analyzer=1;\n+Expression ((Project names + Projection))\n+Actions: INPUT : 0 -> avg(number_0) Float64 : 0\n+         COLUMN Const(Float64) -> 0.6931471805599453_Float64 Float64 : 1\n+         COLUMN Const(UInt8) -> 6_UInt8 UInt8 : 2\n+         FUNCTION multiply(0.6931471805599453_Float64 :: 1, avg(number_0) :: 0) -> multiply(0.6931471805599453_Float64, avg(number_0)) Float64 : 3\n+         FUNCTION round(multiply(0.6931471805599453_Float64, avg(number_0)) :: 3, 6_UInt8 :: 2) -> round(multiply(0.6931471805599453_Float64, avg(number_0)), 6_UInt8) Float64 : 0\n+         ALIAS round(multiply(0.6931471805599453_Float64, avg(number_0)), 6_UInt8) :: 0 -> k Float64 : 2\n+Positions: 2\n+  Aggregating\n+  Keys: modulo(number_0, 3_UInt8), modulo(number_0, 2_UInt8)\n+  Aggregates:\n+      avg(number_0)\n+        Function: avg(UInt64) \u2192 Float64\n+        Arguments: number_0\n+    Expression ((Before GROUP BY + Change column names to column identifiers))\n+    Actions: INPUT : 0 -> number UInt64 : 0\n+             COLUMN Const(UInt8) -> 3_UInt8 UInt8 : 1\n+             COLUMN Const(UInt8) -> 2_UInt8 UInt8 : 2\n+             ALIAS number :: 0 -> number_0 UInt64 : 3\n+             FUNCTION modulo(number_0 : 3, 3_UInt8 :: 1) -> modulo(number_0, 3_UInt8) UInt8 : 0\n+             FUNCTION modulo(number_0 : 3, 2_UInt8 :: 2) -> modulo(number_0, 2_UInt8) UInt8 : 1\n+    Positions: 0 1 3\n+      ReadFromStorage (SystemNumbers)\n+SELECT round(avg(log(2) * number), 6) AS k\n+FROM numbers(10000000)\n+GROUP BY number % 3, number % 2\n+SETTINGS allow_experimental_analyzer=1;\n+3465734.516505\n+3465735.209653\n+3465735.9028\n+3465736.595947\n+3465735.209653\n+3465735.9028\n+SELECT round(log(2) * avg(number), 6) AS k\n+FROM numbers(10000000)\n+GROUP BY number % 3, number % 2\n+SETTINGS allow_experimental_analyzer=0;\n+3465734.516505\n+3465735.209653\n+3465735.9028\n+3465736.595947\n+3465735.209653\n+3465735.9028\ndiff --git a/tests/queries/0_stateless/02481_optimize_aggregation_arithmetics.sql b/tests/queries/0_stateless/02481_optimize_aggregation_arithmetics.sql\nnew file mode 100644\nindex 000000000000..5fec5a798139\n--- /dev/null\n+++ b/tests/queries/0_stateless/02481_optimize_aggregation_arithmetics.sql\n@@ -0,0 +1,26 @@\n+-- { echoOn }\n+EXPLAIN actions=1\n+    (\n+        SELECT round(avg(log(2) * number), 6) AS k\n+        FROM numbers(10000000)\n+        GROUP BY number % 3, number % 2\n+    )\n+SETTINGS allow_experimental_analyzer=1;\n+\n+EXPLAIN actions=1\n+    (\n+        SELECT round(log(2) * avg(number), 6) AS k\n+        FROM numbers(10000000)\n+        GROUP BY number % 3, number % 2\n+    )\n+SETTINGS allow_experimental_analyzer=1;\n+\n+SELECT round(avg(log(2) * number), 6) AS k\n+FROM numbers(10000000)\n+GROUP BY number % 3, number % 2\n+SETTINGS allow_experimental_analyzer=1;\n+\n+SELECT round(log(2) * avg(number), 6) AS k\n+FROM numbers(10000000)\n+GROUP BY number % 3, number % 2\n+SETTINGS allow_experimental_analyzer=0;\n",
  "problem_statement": "Aggregation result is incorrect using new analyzer\nQuery:\r\n```sql\r\nSELECT round(avg(log(2) * number), 6) AS k FROM numbers(10000000)\r\nGROUP BY (number % 2) * (number % 3), number % 3, number % 2\r\nHAVING avg(log(2) * number) > 3465735.3 ORDER BY k\r\nSETTINGS allow_experimental_analyzer=1, optimize_group_by_function_keys=0;\r\n```\r\nOutput:\r\n```\r\nOk.\r\n\r\n0 rows in set. Elapsed: 0.079 sec. Processed 10.01 million rows, 80.06 MB (127.02 million rows/s., 1.02 GB/s.)\r\n```\r\n\r\nQuery:\r\n```sql\r\nSELECT round(avg(log(2) * number), 6) AS k FROM numbers(10000000)\r\nGROUP BY (number % 2) * (number % 3), number % 3, number % 2\r\nHAVING avg(log(2) * number) > 3465735.3 ORDER BY k\r\nSETTINGS allow_experimental_analyzer=0, optimize_group_by_function_keys=0;\r\n```\r\n\r\nOutput:\r\n```\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500k\u2500\u2510\r\n\u2502   3465735.9028 \u2502\r\n\u2502   3465735.9028 \u2502\r\n\u2502 3465736.595947 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n3 rows in set. Elapsed: 0.085 sec. Processed 10.01 million rows, 80.06 MB (117.56 million rows/s., 940.52 MB/s.)\r\n```\r\n\r\ncc @kitaisreal \n",
  "hints_text": "",
  "created_at": "2022-11-18T16:18:45Z",
  "modified_files": [
    "src/Analyzer/Passes/AggregateFunctionsArithmericOperationsPass.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02481_optimize_aggregation_arithmetics.reference",
    "b/tests/queries/0_stateless/02481_optimize_aggregation_arithmetics.sql"
  ]
}