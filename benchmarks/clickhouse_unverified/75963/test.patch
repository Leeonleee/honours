diff --git a/src/Common/tests/gtest_poco_json.cpp b/src/Common/tests/gtest_poco_json.cpp
new file mode 100644
index 000000000000..7070e8a8673b
--- /dev/null
+++ b/src/Common/tests/gtest_poco_json.cpp
@@ -0,0 +1,50 @@
+#include <gtest/gtest.h>
+
+#include <Poco/JSON/JSON.h>
+#include <Poco/JSON/Object.h>
+#include <Poco/JSON/Parser.h>
+#include <Poco/JSON/Stringifier.h>
+
+#include <Common/Exception.h>
+
+using namespace std::literals;
+
+
+TEST(PocoJSON, roundtrip)
+{
+    /** We patched Poco library to support certain invalid JSONs
+      * in favor of perfect roundtrip of binary data, including zero bytes and invalid UTF-8.
+      *
+      * This is needed for consistency with ClickHouse's JSONEachRow format,
+      * and to allow storing SQL queries (which can contain binary data) inside serialized JSONs
+      * without extra encoding.
+      *
+      * Keep in mind that binary data inside string literals still has to be escaped, at least characters \ and "
+      */
+    try
+    {
+        std::string source_str("{\"hello\0ʏᑫᘈᶆᴋᾰ\\\"\": \"world\
\\t\\rᖴᘍ᎐᙮ᗝᾴ\xFFwtf\xAA\xBB\xCC\xDD\"}"sv);
+        std::string formatted_str("{\"hello\\u0000ʏᑫᘈᶆᴋᾰ\\\"\":\"world\
\\t\\rᖴᘍ᎐᙮ᗝᾴ\xFFwtf\xAA\xBB\xCC\xDD\"}"sv);
+
+        Poco::JSON::Parser parser;
+        Poco::Dynamic::Var res_json = parser.parse(source_str);
+        const Poco::JSON::Object::Ptr & object = res_json.extract<Poco::JSON::Object::Ptr>();
+
+        std::stringstream destination;
+        Poco::JSON::Stringifier::stringify(*object, destination);
+
+        EXPECT_EQ(formatted_str, destination.str());
+
+        Poco::Dynamic::Var res_json2 = parser.parse(destination.str());
+        const Poco::JSON::Object::Ptr & object2 = res_json.extract<Poco::JSON::Object::Ptr>();
+
+        std::stringstream destination2;
+        Poco::JSON::Stringifier::stringify(*object2, destination2);
+
+        EXPECT_EQ(destination.str(), destination2.str());
+    }
+    catch (...)
+    {
+        std::cerr << DB::getCurrentExceptionMessage(true) << "
";
+    }
+}
diff --git a/tests/queries/0_stateless/03356_tables_with_binary_identifiers_invalid_utf8.reference b/tests/queries/0_stateless/03356_tables_with_binary_identifiers_invalid_utf8.reference
new file mode 100644
index 000000000000..3e67fe1ac4f3
--- /dev/null
+++ b/tests/queries/0_stateless/03356_tables_with_binary_identifiers_invalid_utf8.reference
@@ -0,0 +1,2 @@
+123
+123
diff --git a/tests/queries/0_stateless/03356_tables_with_binary_identifiers_invalid_utf8.sql b/tests/queries/0_stateless/03356_tables_with_binary_identifiers_invalid_utf8.sql
new file mode 100644
index 000000000000..a4257b3abad0
--- /dev/null
+++ b/tests/queries/0_stateless/03356_tables_with_binary_identifiers_invalid_utf8.sql
@@ -0,0 +1,11 @@
+-- Tags: no-random-merge-tree-settings
+DROP TABLE IF EXISTS test;
+CREATE TABLE test (`\xFF\0привет���` UInt8) ENGINE = MergeTree ORDER BY `\xFF\0привет���` COMMENT '\0';
+
+INSERT INTO test VALUES (123);
+SELECT * FROM test;
+DETACH TABLE test;
+ATTACH TABLE test;
+
+SELECT * FROM test;
+DROP TABLE test;
