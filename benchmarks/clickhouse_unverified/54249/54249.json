{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 54249,
  "instance_id": "ClickHouse__ClickHouse-54249",
  "issue_numbers": [
    "49970"
  ],
  "base_commit": "de4971c71e5a64cb3dae1bc1761a938a71ccdfae",
  "patch": "diff --git a/docs/en/interfaces/cli.md b/docs/en/interfaces/cli.md\nindex 36afb94433aa..f018f3a248e2 100644\n--- a/docs/en/interfaces/cli.md\n+++ b/docs/en/interfaces/cli.md\n@@ -30,7 +30,7 @@ It may lack support for new features.\n \n ## Usage {#cli_usage}\n \n-The client can be used in interactive and non-interactive (batch) mode. \n+The client can be used in interactive and non-interactive (batch) mode.\n \n ### Gather your connection details\n <ConnectionDetails />\n@@ -177,8 +177,8 @@ You can pass parameters to `clickhouse-client` (all parameters have a default va\n - `--user, -u` \u2013 The username. Default value: default.\n - `--password` \u2013 The password. Default value: empty string.\n - `--ask-password` - Prompt the user to enter a password.\n-- `--query, -q` \u2013 The query to process when using non-interactive mode. Cannot be used simultaneously with `--queries-file`.\n-- `--queries-file` \u2013 file path with queries to execute. Cannot be used simultaneously with `--query`.\n+- `--query, -q` \u2013 The query to process when using non-interactive mode. `--query` can be specified multiple times, e.g. `--query \"SELECT 1\" --query \"SELECT 2\"`. Cannot be used simultaneously with `--queries-file`.\n+- `--queries-file` \u2013 file path with queries to execute. `--queries-file` can be specified multiple times, e.g. `--query queries1.sql --query queries2.sql`. Cannot be used simultaneously with `--query`.\n - `--multiquery, -n` \u2013 If specified, multiple queries separated by semicolons can be listed after the `--query` option. For convenience, it is also possible to omit `--query` and pass the queries directly after `--multiquery`.\n - `--multiline, -m` \u2013 If specified, allow multiline queries (do not send the query on Enter).\n - `--database, -d` \u2013 Select the current default database. Default value: the current database from the server settings (\u2018default\u2019 by default).\ndiff --git a/docs/en/operations/utilities/clickhouse-local.md b/docs/en/operations/utilities/clickhouse-local.md\nindex 737c2b81deef..c863282efc1f 100644\n--- a/docs/en/operations/utilities/clickhouse-local.md\n+++ b/docs/en/operations/utilities/clickhouse-local.md\n@@ -202,8 +202,8 @@ Arguments:\n - `-S`, `--structure` \u2014 table structure for input data.\n - `--input-format` \u2014 input format, `TSV` by default.\n - `-f`, `--file` \u2014 path to data, `stdin` by default.\n-- `-q`, `--query` \u2014 queries to execute with `;` as delimiter. Cannot be used simultaneously with `--queries-file`.\n-- `--queries-file` - file path with queries to execute. Cannot be used simultaneously with `--query`.\n+- `-q`, `--query` \u2014 queries to execute with `;` as delimiter. `--query` can be specified multiple times, e.g. `--query \"SELECT 1\" --query \"SELECT 2\"`. Cannot be used simultaneously with `--queries-file`.\n+- `--queries-file` - file path with queries to execute. `--queries-file` can be specified multiple times, e.g. `--query queries1.sql --query queries2.sql`. Cannot be used simultaneously with `--query`.\n - `--multiquery, -n` \u2013 If specified, multiple queries separated by semicolons can be listed after the `--query` option. For convenience, it is also possible to omit `--query` and pass the queries directly after `--multiquery`.\n - `-N`, `--table` \u2014 table name where to put output data, `table` by default.\n - `--format`, `--output-format` \u2014 output format, `TSV` by default.\ndiff --git a/docs/ru/interfaces/cli.md b/docs/ru/interfaces/cli.md\nindex aa6ae3629e8a..47ab6474fc02 100644\n--- a/docs/ru/interfaces/cli.md\n+++ b/docs/ru/interfaces/cli.md\n@@ -128,7 +128,7 @@ $ clickhouse-client --param_tbl=\"numbers\" --param_db=\"system\" --param_col=\"numbe\n -   `--port` \u2014 \u043f\u043e\u0440\u0442 \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f, \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u2014 9000. \u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435: \u0434\u043b\u044f HTTP-\u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430 \u0438 \u043d\u0430\u0442\u0438\u0432\u043d\u043e\u0433\u043e \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0440\u0430\u0437\u043d\u044b\u0435 \u043f\u043e\u0440\u0442\u044b.\n -   `--user, -u` \u2014 \u0438\u043c\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u2014 \u2018default\u2019.\n -   `--password` \u2014 \u043f\u0430\u0440\u043e\u043b\u044c, \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u2014 \u043f\u0443\u0441\u0442\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430.\n--   `--query, -q` \u2014 \u0437\u0430\u043f\u0440\u043e\u0441 \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f, \u043f\u0440\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 \u0432 \u043d\u0435\u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435.\n+-   `--query, -q` \u2014 \u0437\u0430\u043f\u0440\u043e\u0441 \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f, \u043f\u0440\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 \u0432 \u043d\u0435\u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435. \u0414\u043e\u043f\u0443\u0441\u043a\u0430\u0435\u0442\u0441\u044f \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u0435 `--query` \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437 (`--query \"SELECT 1;\" --query \"SELECT 2;\"...`).\n -   `--queries-file` - \u043f\u0443\u0442\u044c \u043a \u0444\u0430\u0439\u043b\u0443 \u0441 \u0437\u0430\u043f\u0440\u043e\u0441\u0430\u043c\u0438 \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u043d\u0443 \u0438\u0437 \u043e\u043f\u0446\u0438\u0439: `query` \u0438\u043b\u0438 `queries-file`.\n -   `--database, -d` \u2014 \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0443\u044e \u0411\u0414. \u0411\u0435\u0437 \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0431\u0435\u0440\u0435\u0442\u0441\u044f \u0438\u0437 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0430 (\u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u2014 \u0411\u0414 \u2018default\u2019).\n -   `--multiline, -m` \u2014 \u0435\u0441\u043b\u0438 \u0443\u043a\u0430\u0437\u0430\u043d\u043e \u2014 \u0440\u0430\u0437\u0440\u0435\u0448\u0438\u0442\u044c \u043c\u043d\u043e\u0433\u043e\u0441\u0442\u0440\u043e\u0447\u043d\u044b\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b, \u043d\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441 \u043f\u043e \u043d\u0430\u0436\u0430\u0442\u0438\u044e Enter.\ndiff --git a/docs/zh/interfaces/cli.md b/docs/zh/interfaces/cli.md\nindex 80d13154a762..a6b4d10dd2ff 100644\n--- a/docs/zh/interfaces/cli.md\n+++ b/docs/zh/interfaces/cli.md\n@@ -116,7 +116,7 @@ $ clickhouse-client --param_tuple_in_tuple=\"(10, ('dt', 10))\" -q \"SELECT * FROM\n -   `--port` \u2013 \u8fde\u63a5\u7684\u7aef\u53e3\uff0c\u9ed8\u8ba4\u503c\uff1a9000\u3002\u6ce8\u610fHTTP\u63a5\u53e3\u4ee5\u53caTCP\u539f\u751f\u63a5\u53e3\u4f7f\u7528\u7684\u662f\u4e0d\u540c\u7aef\u53e3\u3002\n -   `--user, -u` \u2013 \u7528\u6237\u540d\u3002 \u9ed8\u8ba4\u503c\uff1a`default`\u3002\n -   `--password` \u2013 \u5bc6\u7801\u3002 \u9ed8\u8ba4\u503c\uff1a\u7a7a\u5b57\u7b26\u4e32\u3002\n--   `--query, -q` \u2013 \u4f7f\u7528\u975e\u4ea4\u4e92\u6a21\u5f0f\u67e5\u8be2\u3002\n+-   `--query, -q` \u2013 \u4f7f\u7528\u975e\u4ea4\u4e92\u6a21\u5f0f\u67e5\u8be2\u3002 \u5141\u8bb8\u591a\u6b21\u6307\u5b9a `--query`\uff08`--query \"SELECT 1;\" --query \"SELECT 2;\"...`\uff09\u3002\n -   `--database, -d` \u2013 \u9ed8\u8ba4\u5f53\u524d\u64cd\u4f5c\u7684\u6570\u636e\u5e93. \u9ed8\u8ba4\u503c\uff1a\u670d\u52a1\u7aef\u9ed8\u8ba4\u7684\u914d\u7f6e\uff08\u9ed8\u8ba4\u662f`default`\uff09\u3002\n -   `--multiline, -m` \u2013 \u5982\u679c\u6307\u5b9a\uff0c\u5141\u8bb8\u591a\u884c\u8bed\u53e5\u67e5\u8be2\uff08Enter\u4ec5\u4ee3\u8868\u6362\u884c\uff0c\u4e0d\u4ee3\u8868\u67e5\u8be2\u8bed\u53e5\u5b8c\u7ed3\uff09\u3002\n -   `--multiquery, -n` \u2013 \u5982\u679c\u6307\u5b9a, \u5141\u8bb8\u5904\u7406\u7528`;`\u53f7\u5206\u9694\u7684\u591a\u4e2a\u67e5\u8be2\uff0c\u53ea\u5728\u975e\u4ea4\u4e92\u6a21\u5f0f\u4e0b\u751f\u6548\u3002\ndiff --git a/programs/client/Client.cpp b/programs/client/Client.cpp\nindex 929e59ed8529..64823f9ec7f1 100644\n--- a/programs/client/Client.cpp\n+++ b/programs/client/Client.cpp\n@@ -1189,7 +1189,7 @@ void Client::processOptions(const OptionsDescription & options_description,\n \n void Client::processConfig()\n {\n-    if (config().has(\"query\") && config().has(\"queries-file\"))\n+    if (!queries.empty() && config().has(\"queries-file\"))\n         throw Exception(ErrorCodes::BAD_ARGUMENTS, \"Options '--query' and '--queries-file' cannot be specified at the same time\");\n \n     /// Batch mode is enabled if one of the following is true:\n@@ -1200,9 +1200,9 @@ void Client::processConfig()\n     /// - --queries-file command line option is present.\n     ///   The value of the option is used as file with query (or of multiple queries) to execute.\n \n-    delayed_interactive = config().has(\"interactive\") && (config().has(\"query\") || config().has(\"queries-file\"));\n+    delayed_interactive = config().has(\"interactive\") && (!queries.empty() || config().has(\"queries-file\"));\n     if (stdin_is_a_tty\n-        && (delayed_interactive || (!config().has(\"query\") && queries_files.empty())))\n+        && (delayed_interactive || (queries.empty() && queries_files.empty())))\n     {\n         is_interactive = true;\n     }\ndiff --git a/programs/local/LocalServer.cpp b/programs/local/LocalServer.cpp\nindex 5c522b678ef1..cacfe4dc1623 100644\n--- a/programs/local/LocalServer.cpp\n+++ b/programs/local/LocalServer.cpp\n@@ -319,7 +319,7 @@ static bool checkIfStdinIsRegularFile()\n \n std::string LocalServer::getInitialCreateTableQuery()\n {\n-    if (!config().has(\"table-structure\") && !config().has(\"table-file\") && !config().has(\"table-data-format\") && (!checkIfStdinIsRegularFile() || !config().has(\"query\")))\n+    if (!config().has(\"table-structure\") && !config().has(\"table-file\") && !config().has(\"table-data-format\") && (!checkIfStdinIsRegularFile() || queries.empty()))\n         return {};\n \n     auto table_name = backQuoteIfNeed(config().getString(\"table-name\", \"table\"));\n@@ -461,7 +461,7 @@ try\n     if (first_time)\n     {\n \n-    if (queries_files.empty() && !config().has(\"query\"))\n+    if (queries_files.empty() && queries.empty())\n     {\n         std::cerr << \"\\033[31m\" << \"ClickHouse compiled in fuzzing mode.\" << \"\\033[0m\" << std::endl;\n         std::cerr << \"\\033[31m\" << \"You have to provide a query with --query or --queries-file option.\" << \"\\033[0m\" << std::endl;\n@@ -473,7 +473,7 @@ try\n #else\n     is_interactive = stdin_is_a_tty\n         && (config().hasOption(\"interactive\")\n-            || (!config().has(\"query\") && !config().has(\"table-structure\") && queries_files.empty() && !config().has(\"table-file\")));\n+            || (queries.empty() && !config().has(\"table-structure\") && queries_files.empty() && !config().has(\"table-file\")));\n #endif\n     if (!is_interactive)\n     {\n@@ -569,10 +569,10 @@ void LocalServer::updateLoggerLevel(const String & logs_level)\n \n void LocalServer::processConfig()\n {\n-    if (config().has(\"query\") && config().has(\"queries-file\"))\n+    if (!queries.empty() && config().has(\"queries-file\"))\n         throw Exception(ErrorCodes::BAD_ARGUMENTS, \"Options '--query' and '--queries-file' cannot be specified at the same time\");\n \n-    delayed_interactive = config().has(\"interactive\") && (config().has(\"query\") || config().has(\"queries-file\"));\n+    delayed_interactive = config().has(\"interactive\") && (!queries.empty() || config().has(\"queries-file\"));\n     if (is_interactive && !delayed_interactive)\n     {\n         if (config().has(\"multiquery\"))\ndiff --git a/src/Client/ClientBase.cpp b/src/Client/ClientBase.cpp\nindex fc1163469465..859665c64b3a 100644\n--- a/src/Client/ClientBase.cpp\n+++ b/src/Client/ClientBase.cpp\n@@ -2495,23 +2495,34 @@ void ClientBase::runNonInteractive()\n         return;\n     }\n \n-    String text;\n-    if (config().has(\"query\"))\n+    if (!queries.empty())\n     {\n-        text += config().getRawString(\"query\"); /// Poco configuration should not process substitutions in form of ${...} inside query.\n+        for (const auto & query : queries)\n+        {\n+            if (query_fuzzer_runs)\n+            {\n+                if (!processWithFuzzing(query))\n+                    return;\n+            }\n+            else\n+            {\n+                if (!processQueryText(query))\n+                    return;\n+            }\n+        }\n     }\n     else\n     {\n         /// If 'query' parameter is not set, read a query from stdin.\n         /// The query is read entirely into memory (streaming is disabled).\n         ReadBufferFromFileDescriptor in(STDIN_FILENO);\n+        String text;\n         readStringUntilEOF(text, in);\n+        if (query_fuzzer_runs)\n+            processWithFuzzing(text);\n+        else\n+            processQueryText(text);\n     }\n-\n-    if (query_fuzzer_runs)\n-        processWithFuzzing(text);\n-    else\n-        processQueryText(text);\n }\n \n \n@@ -2680,8 +2691,8 @@ void ClientBase::init(int argc, char ** argv)\n     stderr_is_a_tty = isatty(STDERR_FILENO);\n     terminal_width = getTerminalWidth();\n \n-    Arguments common_arguments{\"\"}; /// 0th argument is ignored.\n     std::vector<Arguments> external_tables_arguments;\n+    Arguments common_arguments = {\"\"}; /// 0th argument is ignored.\n     std::vector<Arguments> hosts_and_ports_arguments;\n \n     readArguments(argc, argv, common_arguments, external_tables_arguments, hosts_and_ports_arguments);\n@@ -2699,7 +2710,6 @@ void ClientBase::init(int argc, char ** argv)\n     }\n \n \n-    po::variables_map options;\n     OptionsDescription options_description;\n     options_description.main_description.emplace(createOptionsDescription(\"Main options\", terminal_width));\n \n@@ -2711,9 +2721,8 @@ void ClientBase::init(int argc, char ** argv)\n \n         (\"config-file,C\", po::value<std::string>(), \"config-file path\")\n \n-        (\"query,q\", po::value<std::string>(), \"query\")\n-        (\"queries-file\", po::value<std::vector<std::string>>()->multitoken(),\n-            \"file path with queries to execute; multiple files can be specified (--queries-file file1 file2...)\")\n+        (\"query,q\", po::value<std::vector<std::string>>()->multitoken(), R\"(query; can be specified multiple times (--query \"SELECT 1\" --query \"SELECT 2\"...))\")\n+        (\"queries-file\", po::value<std::vector<std::string>>()->multitoken(), \"file path with queries to execute; multiple files can be specified (--queries-file file1 file2...)\")\n         (\"multiquery,n\", \"If specified, multiple queries separated by semicolons can be listed after --query. For convenience, it is also possible to omit --query and pass the queries directly after --multiquery.\")\n         (\"multiline,m\", \"If specified, allow multiline queries (do not send the query on Enter)\")\n         (\"database,d\", po::value<std::string>(), \"database\")\n@@ -2734,8 +2743,7 @@ void ClientBase::init(int argc, char ** argv)\n         (\"log-level\", po::value<std::string>(), \"log level\")\n         (\"server_logs_file\", po::value<std::string>(), \"put server logs into specified file\")\n \n-        (\"suggestion_limit\", po::value<int>()->default_value(10000),\n-            \"Suggestion limit for how many databases, tables and columns to fetch.\")\n+        (\"suggestion_limit\", po::value<int>()->default_value(10000), \"Suggestion limit for how many databases, tables and columns to fetch.\")\n \n         (\"format,f\", po::value<std::string>(), \"default output format\")\n         (\"vertical,E\", \"vertical output format, same as --format=Vertical or FORMAT Vertical or \\\\G at end of command\")\n@@ -2773,6 +2781,7 @@ void ClientBase::init(int argc, char ** argv)\n         std::transform(external_options.begin(), external_options.end(), std::back_inserter(cmd_options), getter);\n     }\n \n+    po::variables_map options;\n     parseAndCheckOptions(options_description, options, common_arguments);\n     po::notify(options);\n \n@@ -2800,7 +2809,7 @@ void ClientBase::init(int argc, char ** argv)\n     if (options.count(\"time\"))\n         print_time_to_stderr = true;\n     if (options.count(\"query\"))\n-        config().setString(\"query\", options[\"query\"].as<std::string>());\n+        queries = options[\"query\"].as<std::vector<std::string>>();\n     if (options.count(\"query_id\"))\n         config().setString(\"query_id\", options[\"query_id\"].as<std::string>());\n     if (options.count(\"database\"))\ndiff --git a/src/Client/ClientBase.h b/src/Client/ClientBase.h\nindex d877905302d6..eabc79b7432f 100644\n--- a/src/Client/ClientBase.h\n+++ b/src/Client/ClientBase.h\n@@ -202,6 +202,7 @@ class ClientBase : public Poco::Util::Application, public IHints<2, ClientBase>\n     std::optional<Suggest> suggest;\n     bool load_suggestions = false;\n \n+    std::vector<String> queries; /// Queries passed via '--query'\n     std::vector<String> queries_files; /// If not empty, queries will be read from these files\n     std::vector<String> interleave_queries_files; /// If not empty, run queries from these files before processing every file from 'queries_files'.\n     std::vector<String> cmd_options;\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/00754_distributed_optimize_skip_select_on_unused_shards.reference b/tests/queries/0_stateless/00754_distributed_optimize_skip_select_on_unused_shards.reference\nindex aa5098932309..add8c239ade3 100644\n--- a/tests/queries/0_stateless/00754_distributed_optimize_skip_select_on_unused_shards.reference\n+++ b/tests/queries/0_stateless/00754_distributed_optimize_skip_select_on_unused_shards.reference\n@@ -1,7 +1,7 @@\n OK\n OK\n 1\n-FAIL\n+OK\n 0\n 4\n 2\n@@ -9,8 +9,8 @@ FAIL\n 1\n 1\n 4\n-FAIL\n-FAIL\n-FAIL\n-FAIL\n-FAIL\n+OK\n+OK\n+OK\n+OK\n+OK\ndiff --git a/tests/queries/0_stateless/00754_distributed_optimize_skip_select_on_unused_shards_with_prewhere.reference b/tests/queries/0_stateless/00754_distributed_optimize_skip_select_on_unused_shards_with_prewhere.reference\nindex 611f0fd25850..4c66ccfd2a20 100644\n--- a/tests/queries/0_stateless/00754_distributed_optimize_skip_select_on_unused_shards_with_prewhere.reference\n+++ b/tests/queries/0_stateless/00754_distributed_optimize_skip_select_on_unused_shards_with_prewhere.reference\n@@ -1,15 +1,15 @@\n OK\n OK\n 1\n-FAIL\n+OK\n 0\n 1\n 4\n 4\n 2\n 4\n-FAIL\n-FAIL\n-FAIL\n-FAIL\n-FAIL\n+OK\n+OK\n+OK\n+OK\n+OK\ndiff --git a/tests/queries/0_stateless/01339_client_unrecognized_option.sh b/tests/queries/0_stateless/01339_client_unrecognized_option.sh\nindex b3488d010c2d..0cfb705185e5 100755\n--- a/tests/queries/0_stateless/01339_client_unrecognized_option.sh\n+++ b/tests/queries/0_stateless/01339_client_unrecognized_option.sh\n@@ -11,7 +11,7 @@ $CLICKHOUSE_CLIENT -xyzgarbage 2>&1 | grep -q \"UNRECOGNIZED_ARGUMENTS\" && echo '\n \n $CLICKHOUSE_CLIENT --xyzgarbage 2>&1 | grep -q \"UNRECOGNIZED_ARGUMENTS\" && echo 'OK' || echo 'FAIL'\n \n-cat /etc/passwd | sed 's/:/\\t/g' | $CLICKHOUSE_CLIENT --query=\"SELECT shell, count() AS c FROM passwd GROUP BY shell ORDER BY c DESC\" --external --file=- --name=passwd --structure='login String, unused String, uid UInt16, gid UInt16, comment String, home String, shell String' xyzgarbage 2>&1 | grep -q \"BAD_ARGUMENTS\" && echo 'OK' || echo 'FAIL'\n+cat /etc/passwd | sed 's/:/\\t/g' | $CLICKHOUSE_CLIENT --query=\"SELECT shell, count() AS c FROM passwd GROUP BY shell ORDER BY c DESC\" --external --file=- --name=passwd --structure='login String, unused String, uid UInt16, gid UInt16, comment String, home String, shell String' xyzgarbage 2>&1 | grep -q \"SYNTAX_ERROR\" && echo 'OK' || echo 'FAIL'\n \n cat /etc/passwd | sed 's/:/\\t/g' | $CLICKHOUSE_CLIENT --query=\"SELECT shell, count() AS c FROM passwd GROUP BY shell ORDER BY c DESC\" --external -xyzgarbage --file=- --name=passwd --structure='login String, unused String, uid UInt16, gid UInt16, comment String, home String, shell String' 2>&1 | grep -q \"Bad arguments\" && echo 'OK' || echo 'FAIL'\n \ndiff --git a/tests/queries/0_stateless/02751_multiquery_with_argument.reference b/tests/queries/0_stateless/02751_multiquery_with_argument.reference\nindex df9771b6bd3a..843fffb476ce 100644\n--- a/tests/queries/0_stateless/02751_multiquery_with_argument.reference\n+++ b/tests/queries/0_stateless/02751_multiquery_with_argument.reference\n@@ -18,9 +18,6 @@ Bad arguments\n Bad arguments\n Bad arguments\n BAD_ARGUMENTS\n-Bad arguments\n BAD_ARGUMENTS\n Bad arguments\n Bad arguments\n-Bad arguments\n-Bad arguments\ndiff --git a/tests/queries/0_stateless/02751_multiquery_with_argument.sh b/tests/queries/0_stateless/02751_multiquery_with_argument.sh\nindex ce53ede33319..d742cc0ad90e 100755\n--- a/tests/queries/0_stateless/02751_multiquery_with_argument.sh\n+++ b/tests/queries/0_stateless/02751_multiquery_with_argument.sh\n@@ -30,9 +30,6 @@ $CLICKHOUSE_LOCAL -n --multiquery \"SELECT 307; SELECT 308;\" 2>&1 | grep -o 'Bad\n $CLICKHOUSE_LOCAL --multiquery \"SELECT 309; SELECT 310;\" --multiquery  2>&1 | grep -o 'Bad arguments'\n $CLICKHOUSE_LOCAL --multiquery \"SELECT 311;\" --multiquery \"SELECT 312;\" 2>&1 | grep -o 'Bad arguments'\n $CLICKHOUSE_LOCAL --multiquery \"SELECT 313;\" -n \"SELECT 314;\" 2>&1 | grep -o 'BAD_ARGUMENTS'\n-$CLICKHOUSE_LOCAL --multiquery \"SELECT 315;\" --query \"SELECT 316;\" 2>&1 | grep -o 'Bad arguments'\n $CLICKHOUSE_LOCAL -n \"SELECT 320\" --query \"SELECT 317;\" 2>&1 | grep -o 'BAD_ARGUMENTS'\n-$CLICKHOUSE_LOCAL --query --multiquery --multiquery \"SELECT 318;\" 2>&1 | grep -o 'Bad arguments'\n-$CLICKHOUSE_LOCAL --query --multiquery \"SELECT 319;\" 2>&1 | grep -o 'Bad arguments'\n $CLICKHOUSE_LOCAL --query -n \"SELECT 400;\" 2>&1 | grep -o 'Bad arguments'\n-$CLICKHOUSE_LOCAL --query -n --multiquery \"SELECT 401;\" 2>&1 | grep -o 'Bad arguments'\n\\ No newline at end of file\n+$CLICKHOUSE_LOCAL --query -n --multiquery \"SELECT 401;\" 2>&1 | grep -o 'Bad arguments'\ndiff --git a/tests/queries/0_stateless/02771_multiple_query_arguments.reference b/tests/queries/0_stateless/02771_multiple_query_arguments.reference\nnew file mode 100644\nindex 000000000000..5cad23947c86\n--- /dev/null\n+++ b/tests/queries/0_stateless/02771_multiple_query_arguments.reference\n@@ -0,0 +1,17 @@\n+101\n+101\n+202\n+202\n+Multi-statements are not allowed\n+Empty query\n+Bad arguments\n+Syntax error\n+101\n+101\n+202\n+202\n+303\n+303\n+303\n+Bad arguments\n+Syntax error\ndiff --git a/tests/queries/0_stateless/02771_multiple_query_arguments.sh b/tests/queries/0_stateless/02771_multiple_query_arguments.sh\nnew file mode 100755\nindex 000000000000..435e0a333155\n--- /dev/null\n+++ b/tests/queries/0_stateless/02771_multiple_query_arguments.sh\n@@ -0,0 +1,21 @@\n+#!/usr/bin/env bash\n+\n+CURDIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+# shellcheck source=../shell_config.sh\n+. \"$CURDIR\"/../shell_config.sh\n+\n+# clickhouse-client\n+$CLICKHOUSE_CLIENT --query \"SELECT 101\" --query \"SELECT 101\"\n+$CLICKHOUSE_CLIENT --query \"SELECT 202;\" --query \"SELECT 202;\"\n+$CLICKHOUSE_CLIENT --query \"SELECT 303\" --query \"SELECT 303; SELECT 303\" 2>&1 | grep -o 'Multi-statements are not allowed'\n+$CLICKHOUSE_CLIENT --query \"\" --query \"\" 2>&1 | grep -o 'Empty query'\n+$CLICKHOUSE_CLIENT --query \"SELECT 303\" --query 2>&1 | grep -o 'Bad arguments'\n+$CLICKHOUSE_CLIENT --query \"SELECT 303\" --query \"SELE\" 2>&1 | grep -o 'Syntax error'\n+\n+# clickhouse-local\n+$CLICKHOUSE_LOCAL --query \"SELECT 101\" --query \"SELECT 101\"\n+$CLICKHOUSE_LOCAL --query \"SELECT 202;\" --query \"SELECT 202;\"\n+$CLICKHOUSE_LOCAL --query \"SELECT 303\" --query \"SELECT 303; SELECT 303\" 2>&1 # behaves differently than clickhouse-client, TODO make it consistent\n+$CLICKHOUSE_LOCAL --query \"\" --query \"\" 2>&1 # behaves equally different than clickhouse-client TODO\n+$CLICKHOUSE_LOCAL --query \"SELECT 303\" --query 2>&1 | grep -o 'Bad arguments'\n+$CLICKHOUSE_LOCAL --query \"SELECT 303\" --query \"SELE\" 2>&1 | grep -o 'Syntax error'\n",
  "problem_statement": "Allow specifying `--query` multiple times in the command line\n**Describe the issue**\r\n```\r\nmilovidov@milovidov-desktop:~/work/ClickHouse$ clickhouse-local --query \"SELECT 1\" --query \"SELECT 2\"\r\nBad arguments: option '--query' cannot be specified more than once\r\n```\r\n\n",
  "hints_text": "take\nRelated: #49870\n> Related: #49870\r\n\r\nGot it. I think specifying --query multiple times will still support.\nclickhouse-client  consistently rejects parameters passed more than once. Examples:\r\n\r\n``` bash\r\n~/Downloads (main >) $ ./clickhouse client -q \"SELECT 1\" --max_threads 2 --max_threads 3\r\nBad arguments: option '--max_threads' cannot be specified more than once                \r\n\r\n./clickhouse client -C config1.xml -C config2.xml\r\nBad arguments: option '--config-file' cannot be specified more than once\r\n```\r\n\r\nThe only exception I found was `--queries-file`:\r\n\r\n``` bash\r\n./clickhouse client --queries-file queries1.sql --queries-file queries2.sql\r\n```\r\n\r\nSo yes, if we can specify multiple query files, we should also be able to specify `--query` multiple times.",
  "created_at": "2023-09-04T11:59:20Z",
  "modified_files": [
    "docs/en/interfaces/cli.md",
    "docs/en/operations/utilities/clickhouse-local.md",
    "docs/ru/interfaces/cli.md",
    "docs/zh/interfaces/cli.md",
    "programs/client/Client.cpp",
    "programs/local/LocalServer.cpp",
    "src/Client/ClientBase.cpp",
    "src/Client/ClientBase.h"
  ],
  "modified_test_files": [
    "tests/queries/0_stateless/00754_distributed_optimize_skip_select_on_unused_shards.reference",
    "tests/queries/0_stateless/00754_distributed_optimize_skip_select_on_unused_shards_with_prewhere.reference",
    "tests/queries/0_stateless/01339_client_unrecognized_option.sh",
    "tests/queries/0_stateless/02751_multiquery_with_argument.reference",
    "tests/queries/0_stateless/02751_multiquery_with_argument.sh",
    "b/tests/queries/0_stateless/02771_multiple_query_arguments.reference",
    "b/tests/queries/0_stateless/02771_multiple_query_arguments.sh"
  ]
}