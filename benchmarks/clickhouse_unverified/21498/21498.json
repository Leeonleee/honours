{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 21498,
  "instance_id": "ClickHouse__ClickHouse-21498",
  "issue_numbers": [
    "21481"
  ],
  "base_commit": "f6f739eca5d032261fb5826dfb8e9c647ca3e8d8",
  "patch": "diff --git a/src/Interpreters/Cluster.cpp b/src/Interpreters/Cluster.cpp\nindex fb9788e84c47..c3f72fa7bdf6 100644\n--- a/src/Interpreters/Cluster.cpp\n+++ b/src/Interpreters/Cluster.cpp\n@@ -563,6 +563,7 @@ Cluster::Cluster(Cluster::ReplicasAsShardsTag, const Cluster & from, const Setti\n     if (from.addresses_with_failover.empty())\n         throw Exception(\"Cluster is empty\", ErrorCodes::LOGICAL_ERROR);\n \n+    UInt32 shard_num = 0;\n     std::set<std::pair<String, int>> unique_hosts;\n     for (size_t shard_index : ext::range(0, from.shards_info.size()))\n     {\n@@ -573,6 +574,8 @@ Cluster::Cluster(Cluster::ReplicasAsShardsTag, const Cluster & from, const Setti\n                 continue;   /// Duplicate host, skip.\n \n             ShardInfo info;\n+            info.shard_num = ++shard_num;\n+\n             if (address.is_local)\n                 info.local_addresses.push_back(address);\n \ndiff --git a/src/Interpreters/MutationsInterpreter.cpp b/src/Interpreters/MutationsInterpreter.cpp\nindex 05f1a6be2b38..6e732ea6783e 100644\n--- a/src/Interpreters/MutationsInterpreter.cpp\n+++ b/src/Interpreters/MutationsInterpreter.cpp\n@@ -273,10 +273,9 @@ MutationsInterpreter::MutationsInterpreter(\n     , commands(std::move(commands_))\n     , context(context_)\n     , can_execute(can_execute_)\n+    , select_limits(SelectQueryOptions().analyze(!can_execute).ignoreLimits())\n {\n     mutation_ast = prepare(!can_execute);\n-    SelectQueryOptions limits = SelectQueryOptions().analyze(!can_execute).ignoreLimits();\n-    select_interpreter = std::make_unique<InterpreterSelectQuery>(mutation_ast, context, storage, metadata_snapshot_, limits);\n }\n \n static NameSet getKeyColumns(const StoragePtr & storage, const StorageMetadataPtr & metadata_snapshot)\n@@ -767,6 +766,9 @@ QueryPipelinePtr MutationsInterpreter::addStreamsForLaterStages(const std::vecto\n \n void MutationsInterpreter::validate()\n {\n+    if (!select_interpreter)\n+        select_interpreter = std::make_unique<InterpreterSelectQuery>(mutation_ast, context, storage, metadata_snapshot, select_limits);\n+\n     const Settings & settings = context.getSettingsRef();\n \n     /// For Replicated* storages mutations cannot employ non-deterministic functions\n@@ -794,6 +796,9 @@ BlockInputStreamPtr MutationsInterpreter::execute()\n     if (!can_execute)\n         throw Exception(\"Cannot execute mutations interpreter because can_execute flag set to false\", ErrorCodes::LOGICAL_ERROR);\n \n+    if (!select_interpreter)\n+        select_interpreter = std::make_unique<InterpreterSelectQuery>(mutation_ast, context, storage, metadata_snapshot, select_limits);\n+\n     QueryPlan plan;\n     select_interpreter->buildQueryPlan(plan);\n \ndiff --git a/src/Interpreters/MutationsInterpreter.h b/src/Interpreters/MutationsInterpreter.h\nindex 18658e605adb..dcebba5743ec 100644\n--- a/src/Interpreters/MutationsInterpreter.h\n+++ b/src/Interpreters/MutationsInterpreter.h\n@@ -76,6 +76,7 @@ class MutationsInterpreter\n     MutationCommands commands;\n     Context context;\n     bool can_execute;\n+    SelectQueryOptions select_limits;\n \n     ASTPtr mutation_ast;\n \n",
  "test_patch": "diff --git a/tests/config/config.d/clusters.xml b/tests/config/config.d/clusters.xml\nindex c0babf0ff89a..86dba46e07ab 100644\n--- a/tests/config/config.d/clusters.xml\n+++ b/tests/config/config.d/clusters.xml\n@@ -16,5 +16,17 @@\n                  </replica>\n              </shard>\n          </test_cluster_two_shards_different_databases>\n+\t    <test_cluster_one_shard_two_replicas>\n+           <shard>\n+               <replica>\n+                   <host>127.0.0.1</host>\n+                   <port>9000</port>\n+               </replica>\n+               <replica>\n+                   <host>127.0.0.2</host>\n+                   <port>9000</port>\n+               </replica>\n+           </shard>\n+        </test_cluster_one_shard_two_replicas>\n     </remote_servers>\n-</yandex>\n\\ No newline at end of file\n+</yandex>\ndiff --git a/tests/queries/0_stateless/01753_mutate_table_predicated_with_table.reference b/tests/queries/0_stateless/01753_mutate_table_predicated_with_table.reference\nnew file mode 100644\nindex 000000000000..d00491fd7e5b\n--- /dev/null\n+++ b/tests/queries/0_stateless/01753_mutate_table_predicated_with_table.reference\n@@ -0,0 +1,1 @@\n+1\ndiff --git a/tests/queries/0_stateless/01753_mutate_table_predicated_with_table.sql b/tests/queries/0_stateless/01753_mutate_table_predicated_with_table.sql\nnew file mode 100644\nindex 000000000000..efb444eb4b1f\n--- /dev/null\n+++ b/tests/queries/0_stateless/01753_mutate_table_predicated_with_table.sql\n@@ -0,0 +1,12 @@\n+DROP TABLE IF EXISTS mmm;\n+\n+CREATE TABLE mmm ENGINE=MergeTree ORDER BY number\n+AS SELECT number, rand() % 10 AS a FROM numbers(1000);\n+\n+ALTER TABLE mmm DELETE WHERE a IN (SELECT a FROM mmm) SETTINGS mutations_sync=1;\n+\n+SELECT is_done FROM system.mutations WHERE table = 'mmm' and database=currentDatabase();\n+\n+SELECT * FROM mmm;\n+\n+DROP TABLE IF EXISTS mmm;\ndiff --git a/tests/queries/0_stateless/01754_cluster_all_replicas_shard_num.reference b/tests/queries/0_stateless/01754_cluster_all_replicas_shard_num.reference\nnew file mode 100644\nindex 000000000000..d308efd86622\n--- /dev/null\n+++ b/tests/queries/0_stateless/01754_cluster_all_replicas_shard_num.reference\n@@ -0,0 +1,9 @@\n+1\n+1\n+1\n+2\n+1\n+2\n+1\n+1\n+2\ndiff --git a/tests/queries/0_stateless/01754_cluster_all_replicas_shard_num.sql b/tests/queries/0_stateless/01754_cluster_all_replicas_shard_num.sql\nnew file mode 100644\nindex 000000000000..833f86c538da\n--- /dev/null\n+++ b/tests/queries/0_stateless/01754_cluster_all_replicas_shard_num.sql\n@@ -0,0 +1,8 @@\n+SELECT _shard_num FROM cluster('test_shard_localhost', system.one);\n+SELECT _shard_num FROM clusterAllReplicas('test_shard_localhost', system.one);\n+\n+SELECT _shard_num FROM cluster('test_cluster_two_shards', system.one) ORDER BY _shard_num;\n+SELECT _shard_num FROM clusterAllReplicas('test_cluster_two_shards', system.one) ORDER BY _shard_num;\n+\n+SELECT _shard_num FROM cluster('test_cluster_one_shard_two_replicas', system.one) ORDER BY _shard_num;\n+SELECT _shard_num FROM clusterAllReplicas('test_cluster_one_shard_two_replicas', system.one) ORDER BY _shard_num;\ndiff --git a/tests/server-test.xml b/tests/server-test.xml\nindex 0b5e8f760a87..dd21d55c78c7 100644\n--- a/tests/server-test.xml\n+++ b/tests/server-test.xml\n@@ -140,4 +140,4 @@\n             <replace>[hidden]</replace>\n         </rule>\n     </query_masking_rules>\n-</yandex>\n\\ No newline at end of file\n+</yandex>\n",
  "problem_statement": "_shard_num and clusterAllReplicas()\n\r\n**Bug description**\r\nUnlike `cluster()`, `clusterAllReplicas()` does not implement `_shard_num`. \r\n\r\nI would expect\r\n```\r\nSELECT _shard_num\r\nFROM clusterAllReplicas(prod, system.one)\r\nORDER BY _shard_num ASC\r\nFORMAT PrettyCompactMonoBlock\r\n\r\n\u250c\u2500_shard_num\u2500\u2510\r\n\u2502          0 \u2502\r\n\u2502          0 \u2502\r\n\u2502          0 \u2502\r\n\u2502          0 \u2502\r\n\u2502          0 \u2502\r\n\u2502          0 \u2502\r\n\u2502          0 \u2502\r\n\u2502          0 \u2502\r\n\u2502          0 \u2502\r\n\u2502          0 \u2502\r\n\u2502          0 \u2502\r\n\u2502          0 \u2502\r\n\u2502          0 \u2502\r\n\u2502          0 \u2502\r\n\u2502          0 \u2502\r\n\u2502          0 \u2502\r\n\u2502          0 \u2502\r\n\u2502          0 \u2502\r\n\u2502          0 \u2502\r\n\u2502          0 \u2502\r\n\u2502          0 \u2502\r\n\u2502          0 \u2502\r\n\u2502          0 \u2502\r\n\u2502          0 \u2502\r\n\u2502          0 \u2502\r\n\u2502          0 \u2502\r\n\u2502          0 \u2502\r\n\u2502          0 \u2502\r\n\u2502          0 \u2502\r\n\u2502          0 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\nto have an output more useful like\r\n```\r\nSELECT _shard_num\r\nFROM cluster(prod, system.one)\r\nORDER BY _shard_num ASC\r\nFORMAT PrettyCompactMonoBlock\r\n\r\n\u250c\u2500_shard_num\u2500\u2510\r\n\u2502          1 \u2502\r\n\u2502          2 \u2502\r\n\u2502          3 \u2502\r\n\u2502          4 \u2502\r\n\u2502          5 \u2502\r\n\u2502          6 \u2502\r\n\u2502          7 \u2502\r\n\u2502          8 \u2502\r\n\u2502          9 \u2502\r\n\u2502         10 \u2502\r\n\u2502         11 \u2502\r\n\u2502         12 \u2502\r\n\u2502         13 \u2502\r\n\u2502         14 \u2502\r\n\u2502         15 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\n**Releases where this has been tested**\r\n\r\n* v20.3.12.112-stable\r\n\r\n**References**\r\n\r\n[cluster, clusterAllReplicas documentation](https://clickhouse.tech/docs/en/sql-reference/table-functions/cluster/)\r\n\r\n[_shard_num documentation](https://clickhouse.tech/docs/en/engines/table-engines/special/distributed/#virtual-columns)\r\n\n",
  "hints_text": "",
  "created_at": "2021-03-06T14:42:40Z",
  "modified_files": [
    "src/Interpreters/Cluster.cpp",
    "src/Interpreters/MutationsInterpreter.cpp",
    "src/Interpreters/MutationsInterpreter.h"
  ],
  "modified_test_files": [
    "tests/config/config.d/clusters.xml",
    "b/tests/queries/0_stateless/01753_mutate_table_predicated_with_table.reference",
    "b/tests/queries/0_stateless/01753_mutate_table_predicated_with_table.sql",
    "b/tests/queries/0_stateless/01754_cluster_all_replicas_shard_num.reference",
    "b/tests/queries/0_stateless/01754_cluster_all_replicas_shard_num.sql",
    "tests/server-test.xml"
  ]
}