You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
Add a metric to monitor bad requests (INSERT, SELECT, etc.)
**Use case**
We have a service which inserts data. Once our devops accidentally checked the logs of CH and found this service was making wrong INSERT requests for a week. That's was because of a wrong migration script which didn't update a table field correctly, so we were consistently getting an error like this:
```
2019.10.02 10:48:24.410700 [ 53 ] {18b9d57a-0d07-4cfe-9b86-c2d2b931be2b} <Debug> executeQuery: (from 10.0.0.1:51588) INSERT INTO stats.events FORMAT JSONEachRow 
2019.10.02 10:48:24.411091 [ 53 ] {18b9d57a-0d07-4cfe-9b86-c2d2b931be2b} <Debug> executeQuery: Query pipeline:
NullAndDoCopy
 InputStreamFromASTInsertQuery
2019.10.02 10:48:24.411413 [ 53 ] {18b9d57a-0d07-4cfe-9b86-c2d2b931be2b} <Error> executeQuery: Code: 117, e.displayText() = DB::Exception: Unknown field found while parsing JSONEachRow format: version: (at row 1)
 (version 19.13.1.11 (official build)) (from 10.0.0.1:51588) (in query: INSERT INTO stats.events FORMAT JSONEachRow ), Stack trace:
0. /usr/bin/clickhouse-server(StackTrace::StackTrace()+0x30) [0x7f58f30]
1. /usr/bin/clickhouse-server(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x25) [0x3c427b5]
2. /usr/bin/clickhouse-server() [0x39ea700]
3. /usr/bin/clickhouse-server(DB::JSONEachRowRowInputStream::readJSONObject(std::vector<COW<DB::IColumn>::mutable_ptr<DB::IColumn>, std::allocator<COW<DB::IColumn>::mutable_ptr<DB::IColumn> > >&)+0xe65) [0x7141805]
4. /usr/bin/clickhouse-server(DB::JSONEachRowRowInputStream::read(std::vector<COW<DB::IColumn>::mutable_ptr<DB::IColumn>, std::allocator<COW<DB::IColumn>::mutable_ptr<DB::IColumn> > >&, DB::RowReadExtension&)+0x10a) [0x7141bea]
5. /usr/bin/clickhouse-server(DB::BlockInputStreamFromRowInputStream::readImpl()+0x170) [0x757d1c0]
6. /usr/bin/clickhouse-server(DB::IBlockInputStream::read()+0x187) [0x6c04667]
7. /usr/bin/clickhouse-server(DB::InputStreamFromASTInsertQuery::readImpl()+0x28) [0x6e899f8]
8. /usr/bin/clickhouse-server(DB::IBlockInputStream::read()+0x187) [0x6c04667]
9. /usr/bin/clickhouse-server(DB::copyData(DB::IBlockInputStream&, DB::IBlockOutputStream&, std::atomic<bool>*)+0x6b) [0x6c1c9db]
10. /usr/bin/clickhouse-server(DB::NullAndDoCopyBlockInputStream::readImpl()+0x25) [0x6d437c5]
11. /usr/bin/clickhouse-server(DB::IBlockInputStream::read()+0x187) [0x6c04667]
12. /usr/bin/clickhouse-server(DB::copyData(DB::IBlockInputStream&, DB::IBlockOutputStream&, std::atomic<bool>*)+0x6b) [0x6c1c9db]
13. /usr/bin/clickhouse-server(DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, DB::Context&, std::function<void (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>, std::function<void (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>)+0x6a7) [0x6e88dd7]
14. /usr/bin/clickhouse-server(DB::HTTPHandler::processQuery(Poco::Net::HTTPServerRequest&, HTMLForm&, Poco::Net::HTTPServerResponse&, DB::HTTPHandler::Output&)+0x1a5e) [0x3c8fc3e]
15. /usr/bin/clickhouse-server(DB::HTTPHandler::handleRequest(Poco::Net::HTTPServerRequest&, Poco::Net::HTTPServerResponse&)+0x45a) [0x3c91fba]
16. /usr/bin/clickhouse-server(Poco::Net::HTTPServerConnection::run()+0x2a9) [0x7932009]
17. /usr/bin/clickhouse-server(Poco::Net::TCPServerConnection::start()+0x10) [0x792cde0]
18. /usr/bin/clickhouse-server(Poco::Net::TCPServerDispatcher::run()+0xed) [0x792d4fd]
19. /usr/bin/clickhouse-server(Poco::PooledThread::run()+0x81) [0x8057e21]
20. /usr/bin/clickhouse-server(Poco::ThreadImpl::runnableEntry(void*)+0x3c) [0x8055bcc]
21. /usr/bin/clickhouse-server() [0xba2baa0]
22. /lib/x86_64-linux-gnu/libpthread.so.0(+0x76db) [0x7f4f81ad76db]
```

As service was in alpha stage, it was not well-tested by our QAs. We are using https://github.com/f1yegor/clickhouse_exporter with alerts on several metrics. Of course we didn't notice this bug, because CH doesn't have any related metric.

**Describe the solution you'd like**
Add a new row into `system.events`, like `FailedInserts`. CH already has `DelayedInserts` and `RejectedInserts`.
Or maybe even more generic metric, like `FailedRequests`, because I can predict we can have issues with wrong SELECT requests to CH due to bad data sanitization.

**Describe alternatives you've considered**
We currently see 2 alternatives, but they will be more complex to implement:
- Monitor CH logs and try to match for exceptions
- Make a service that sends INSERT requests to send error metrics
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
