{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 14525,
  "instance_id": "ClickHouse__ClickHouse-14525",
  "issue_numbers": [
    "2455",
    "1697"
  ],
  "base_commit": "f60267a383a8436855f941f74658b3380c9d2c09",
  "patch": "diff --git a/src/Dictionaries/ExecutableDictionarySource.cpp b/src/Dictionaries/ExecutableDictionarySource.cpp\nindex 918cf0732ab8..cc2507272612 100644\n--- a/src/Dictionaries/ExecutableDictionarySource.cpp\n+++ b/src/Dictionaries/ExecutableDictionarySource.cpp\n@@ -1,12 +1,13 @@\n #include \"ExecutableDictionarySource.h\"\n \n-#include <future>\n-#include <thread>\n+#include <functional>\n #include <ext/scope_guard.h>\n #include <DataStreams/IBlockOutputStream.h>\n #include <DataStreams/OwningBlockInputStream.h>\n #include <Interpreters/Context.h>\n #include <IO/WriteHelpers.h>\n+#include <IO/ReadHelpers.h>\n+#include <IO/copyData.h>\n #include <Common/ShellCommand.h>\n #include <Common/ThreadPool.h>\n #include <common/logger_useful.h>\n@@ -16,6 +17,7 @@\n #include \"DictionaryStructure.h\"\n #include \"registerDictionaries.h\"\n \n+\n namespace DB\n {\n static const UInt64 max_block_size = 8192;\n@@ -31,15 +33,23 @@ namespace\n     /// Owns ShellCommand and calls wait for it.\n     class ShellCommandOwningBlockInputStream : public OwningBlockInputStream<ShellCommand>\n     {\n+    private:\n+        Poco::Logger * log;\n     public:\n-        ShellCommandOwningBlockInputStream(const BlockInputStreamPtr & impl, std::unique_ptr<ShellCommand> own_)\n-            : OwningBlockInputStream(std::move(impl), std::move(own_))\n+        ShellCommandOwningBlockInputStream(Poco::Logger * log_, const BlockInputStreamPtr & impl, std::unique_ptr<ShellCommand> command_)\n+            : OwningBlockInputStream(std::move(impl), std::move(command_)), log(log_)\n         {\n         }\n \n         void readSuffix() override\n         {\n             OwningBlockInputStream<ShellCommand>::readSuffix();\n+\n+            std::string err;\n+            readStringUntilEOF(err, own->err);\n+            if (!err.empty())\n+                LOG_ERROR(log, \"Having stderr: {}\", err);\n+\n             own->wait();\n         }\n     };\n@@ -80,7 +90,7 @@ BlockInputStreamPtr ExecutableDictionarySource::loadAll()\n     LOG_TRACE(log, \"loadAll {}\", toString());\n     auto process = ShellCommand::execute(command);\n     auto input_stream = context.getInputFormat(format, process->out, sample_block, max_block_size);\n-    return std::make_shared<ShellCommandOwningBlockInputStream>(input_stream, std::move(process));\n+    return std::make_shared<ShellCommandOwningBlockInputStream>(log, input_stream, std::move(process));\n }\n \n BlockInputStreamPtr ExecutableDictionarySource::loadUpdatedAll()\n@@ -95,67 +105,73 @@ BlockInputStreamPtr ExecutableDictionarySource::loadUpdatedAll()\n     LOG_TRACE(log, \"loadUpdatedAll {}\", command_with_update_field);\n     auto process = ShellCommand::execute(command_with_update_field);\n     auto input_stream = context.getInputFormat(format, process->out, sample_block, max_block_size);\n-    return std::make_shared<ShellCommandOwningBlockInputStream>(input_stream, std::move(process));\n+    return std::make_shared<ShellCommandOwningBlockInputStream>(log, input_stream, std::move(process));\n }\n \n namespace\n {\n-    /** A stream, that also runs and waits for background thread\n-      * (that will feed data into pipe to be read from the other side of the pipe).\n+    /** A stream, that runs child process and sends data to its stdin in background thread,\n+      *  and receives data from its stdout.\n       */\n     class BlockInputStreamWithBackgroundThread final : public IBlockInputStream\n     {\n     public:\n         BlockInputStreamWithBackgroundThread(\n-            const BlockInputStreamPtr & stream_, std::unique_ptr<ShellCommand> && command_, std::packaged_task<void()> && task_)\n-            : stream{stream_}, command{std::move(command_)}, task(std::move(task_)), thread([this] {\n-                task();\n-                command->in.close();\n-            })\n+            const Context & context,\n+            const std::string & format,\n+            const Block & sample_block,\n+            const std::string & command_str,\n+            Poco::Logger * log_,\n+            std::function<void(WriteBufferFromFile &)> && send_data_)\n+            : log(log_),\n+            command(ShellCommand::execute(command_str)),\n+            send_data(std::move(send_data_)),\n+            thread([this] { send_data(command->in); })\n         {\n-            children.push_back(stream);\n+            stream = context.getInputFormat(format, command->out, sample_block, max_block_size);\n         }\n \n         ~BlockInputStreamWithBackgroundThread() override\n         {\n             if (thread.joinable())\n-            {\n-                try\n-                {\n-                    readSuffix();\n-                }\n-                catch (...)\n-                {\n-                    tryLogCurrentException(__PRETTY_FUNCTION__);\n-                }\n-            }\n+                thread.join();\n         }\n \n-        Block getHeader() const override { return stream->getHeader(); }\n+        Block getHeader() const override\n+        {\n+            return stream->getHeader();\n+        }\n \n     private:\n-        Block readImpl() override { return stream->read(); }\n+        Block readImpl() override\n+        {\n+            return stream->read();\n+        }\n+\n+        void readPrefix() override\n+        {\n+            stream->readPrefix();\n+        }\n \n         void readSuffix() override\n         {\n-            IBlockInputStream::readSuffix();\n-            if (!wait_called)\n-            {\n-                wait_called = true;\n-                command->wait();\n-            }\n-            thread.join();\n-            /// To rethrow an exception, if any.\n-            task.get_future().get();\n+            stream->readSuffix();\n+\n+            std::string err;\n+            readStringUntilEOF(err, command->err);\n+            if (!err.empty())\n+                LOG_ERROR(log, \"Having stderr: {}\", err);\n+\n+            command->wait();\n         }\n \n         String getName() const override { return \"WithBackgroundThread\"; }\n \n+        Poco::Logger * log;\n         BlockInputStreamPtr stream;\n         std::unique_ptr<ShellCommand> command;\n-        std::packaged_task<void()> task;\n+        std::function<void(WriteBufferFromFile &)> send_data;\n         ThreadFromGlobalPool thread;\n-        bool wait_called = false;\n     };\n \n }\n@@ -164,28 +180,29 @@ namespace\n BlockInputStreamPtr ExecutableDictionarySource::loadIds(const std::vector<UInt64> & ids)\n {\n     LOG_TRACE(log, \"loadIds {} size = {}\", toString(), ids.size());\n-    auto process = ShellCommand::execute(command);\n-\n-    auto output_stream = context.getOutputFormat(format, process->in, sample_block);\n-    auto input_stream = context.getInputFormat(format, process->out, sample_block, max_block_size);\n \n     return std::make_shared<BlockInputStreamWithBackgroundThread>(\n-        input_stream, std::move(process), std::packaged_task<void()>([output_stream, &ids]() mutable { formatIDs(output_stream, ids); }));\n+        context, format, sample_block, command, log,\n+        [&ids, this](WriteBufferFromFile & out) mutable\n+        {\n+            auto output_stream = context.getOutputFormat(format, out, sample_block);\n+            formatIDs(output_stream, ids);\n+            out.close();\n+        });\n }\n \n BlockInputStreamPtr ExecutableDictionarySource::loadKeys(const Columns & key_columns, const std::vector<size_t> & requested_rows)\n {\n     LOG_TRACE(log, \"loadKeys {} size = {}\", toString(), requested_rows.size());\n-    auto process = ShellCommand::execute(command);\n-\n-    auto output_stream = context.getOutputFormat(format, process->in, sample_block);\n-    auto input_stream = context.getInputFormat(format, process->out, sample_block, max_block_size);\n \n     return std::make_shared<BlockInputStreamWithBackgroundThread>(\n-        input_stream, std::move(process), std::packaged_task<void()>([output_stream, key_columns, &requested_rows, this]() mutable\n+        context, format, sample_block, command, log,\n+        [key_columns, &requested_rows, this](WriteBufferFromFile & out) mutable\n         {\n+            auto output_stream = context.getOutputFormat(format, out, sample_block);\n             formatKeys(dict_struct, output_stream, key_columns, requested_rows);\n-        }));\n+            out.close();\n+        });\n }\n \n bool ExecutableDictionarySource::isModified() const\n",
  "test_patch": "diff --git a/docker/test/fasttest/run.sh b/docker/test/fasttest/run.sh\nindex 3317bb060434..ccbadb84f27f 100755\n--- a/docker/test/fasttest/run.sh\n+++ b/docker/test/fasttest/run.sh\n@@ -10,7 +10,7 @@ stage=${stage:-}\n \n # A variable to pass additional flags to CMake.\n # Here we explicitly default it to nothing so that bash doesn't complain about\n-# it being undefined. Also read it as array so that we can pass an empty list \n+# it being undefined. Also read it as array so that we can pass an empty list\n # of additional variable to cmake properly, and it doesn't generate an extra\n # empty parameter.\n read -ra FASTTEST_CMAKE_FLAGS <<< \"${FASTTEST_CMAKE_FLAGS:-}\"\n@@ -127,6 +127,7 @@ ln -s /usr/share/clickhouse-test/config/access_management.xml /etc/clickhouse-se\n ln -s /usr/share/clickhouse-test/config/ints_dictionary.xml /etc/clickhouse-server/\n ln -s /usr/share/clickhouse-test/config/strings_dictionary.xml /etc/clickhouse-server/\n ln -s /usr/share/clickhouse-test/config/decimals_dictionary.xml /etc/clickhouse-server/\n+ln -s /usr/share/clickhouse-test/config/executable_dictionary.xml /etc/clickhouse-server/\n ln -s /usr/share/clickhouse-test/config/macros.xml /etc/clickhouse-server/config.d/\n ln -s /usr/share/clickhouse-test/config/disks.xml /etc/clickhouse-server/config.d/\n #ln -s /usr/share/clickhouse-test/config/secure_ports.xml /etc/clickhouse-server/config.d/\ndiff --git a/docker/test/stateless/run.sh b/docker/test/stateless/run.sh\nindex 2ff15ca9c6a7..4a9ad8918835 100755\n--- a/docker/test/stateless/run.sh\n+++ b/docker/test/stateless/run.sh\n@@ -24,6 +24,7 @@ ln -s /usr/share/clickhouse-test/config/access_management.xml /etc/clickhouse-se\n ln -s /usr/share/clickhouse-test/config/ints_dictionary.xml /etc/clickhouse-server/\n ln -s /usr/share/clickhouse-test/config/strings_dictionary.xml /etc/clickhouse-server/\n ln -s /usr/share/clickhouse-test/config/decimals_dictionary.xml /etc/clickhouse-server/\n+ln -s /usr/share/clickhouse-test/config/executable_dictionary.xml /etc/clickhouse-server/\n ln -s /usr/share/clickhouse-test/config/macros.xml /etc/clickhouse-server/config.d/\n ln -s /usr/share/clickhouse-test/config/disks.xml /etc/clickhouse-server/config.d/\n ln -s /usr/share/clickhouse-test/config/secure_ports.xml /etc/clickhouse-server/config.d/\ndiff --git a/docker/test/stateless_unbundled/run.sh b/docker/test/stateless_unbundled/run.sh\nindex 2ff15ca9c6a7..4a9ad8918835 100755\n--- a/docker/test/stateless_unbundled/run.sh\n+++ b/docker/test/stateless_unbundled/run.sh\n@@ -24,6 +24,7 @@ ln -s /usr/share/clickhouse-test/config/access_management.xml /etc/clickhouse-se\n ln -s /usr/share/clickhouse-test/config/ints_dictionary.xml /etc/clickhouse-server/\n ln -s /usr/share/clickhouse-test/config/strings_dictionary.xml /etc/clickhouse-server/\n ln -s /usr/share/clickhouse-test/config/decimals_dictionary.xml /etc/clickhouse-server/\n+ln -s /usr/share/clickhouse-test/config/executable_dictionary.xml /etc/clickhouse-server/\n ln -s /usr/share/clickhouse-test/config/macros.xml /etc/clickhouse-server/config.d/\n ln -s /usr/share/clickhouse-test/config/disks.xml /etc/clickhouse-server/config.d/\n ln -s /usr/share/clickhouse-test/config/secure_ports.xml /etc/clickhouse-server/config.d/\ndiff --git a/docker/test/stateless_with_coverage/run.sh b/docker/test/stateless_with_coverage/run.sh\nindex 64317ee62fd9..c3ccb18659bf 100755\n--- a/docker/test/stateless_with_coverage/run.sh\n+++ b/docker/test/stateless_with_coverage/run.sh\n@@ -57,6 +57,7 @@ ln -s /usr/share/clickhouse-test/config/access_management.xml /etc/clickhouse-se\n ln -s /usr/share/clickhouse-test/config/ints_dictionary.xml /etc/clickhouse-server/\n ln -s /usr/share/clickhouse-test/config/strings_dictionary.xml /etc/clickhouse-server/\n ln -s /usr/share/clickhouse-test/config/decimals_dictionary.xml /etc/clickhouse-server/\n+ln -s /usr/share/clickhouse-test/config/executable_dictionary.xml /etc/clickhouse-server/\n ln -s /usr/share/clickhouse-test/config/macros.xml /etc/clickhouse-server/config.d/\n ln -s /usr/share/clickhouse-test/config/disks.xml /etc/clickhouse-server/config.d/\n ln -s /usr/share/clickhouse-test/config/secure_ports.xml /etc/clickhouse-server/config.d/\ndiff --git a/src/Common/tests/CMakeLists.txt b/src/Common/tests/CMakeLists.txt\nindex f6c232cdd220..8de9424e0448 100644\n--- a/src/Common/tests/CMakeLists.txt\n+++ b/src/Common/tests/CMakeLists.txt\n@@ -84,3 +84,6 @@ target_link_libraries (procfs_metrics_provider_perf PRIVATE clickhouse_common_io\n \n add_executable (average average.cpp)\n target_link_libraries (average PRIVATE clickhouse_common_io)\n+\n+add_executable (shell_command_inout shell_command_inout.cpp)\n+target_link_libraries (shell_command_inout PRIVATE clickhouse_common_io)\ndiff --git a/src/Common/tests/shell_command_inout.cpp b/src/Common/tests/shell_command_inout.cpp\nnew file mode 100644\nindex 000000000000..615700cd0423\n--- /dev/null\n+++ b/src/Common/tests/shell_command_inout.cpp\n@@ -0,0 +1,47 @@\n+#include <thread>\n+\n+#include <Common/ShellCommand.h>\n+#include <Common/Exception.h>\n+\n+#include <IO/ReadBufferFromFileDescriptor.h>\n+#include <IO/WriteBufferFromFileDescriptor.h>\n+#include <IO/copyData.h>\n+\n+/** This example shows how we can proxy stdin to ShellCommand and obtain stdout in streaming fashion. */\n+\n+int main(int argc, char ** argv)\n+try\n+{\n+    using namespace DB;\n+\n+    if (argc < 2)\n+    {\n+        std::cerr << \"Usage: shell_command_inout 'command...' < in > out\\n\";\n+        return 1;\n+    }\n+\n+    auto command = ShellCommand::execute(argv[1]);\n+\n+    ReadBufferFromFileDescriptor in(STDIN_FILENO);\n+    WriteBufferFromFileDescriptor out(STDOUT_FILENO);\n+    WriteBufferFromFileDescriptor err(STDERR_FILENO);\n+\n+    /// Background thread sends data and foreground thread receives result.\n+\n+    std::thread thread([&]\n+    {\n+        copyData(in, command->in);\n+        command->in.close();\n+    });\n+\n+    copyData(command->out, out);\n+    copyData(command->err, err);\n+\n+    thread.join();\n+    return 0;\n+}\n+catch (...)\n+{\n+    std::cerr << DB::getCurrentExceptionMessage(true) << '\\n';\n+    throw;\n+}\ndiff --git a/tests/config/executable_dictionary.xml b/tests/config/executable_dictionary.xml\nnew file mode 100644\nindex 000000000000..50df32e2ec60\n--- /dev/null\n+++ b/tests/config/executable_dictionary.xml\n@@ -0,0 +1,108 @@\n+<dictionaries>\n+\n+<dictionary>\n+    <name>executable_complex</name>\n+    <source>\n+        <executable>\n+            <format>JSONEachRow</format>\n+            <command>cd /; clickhouse-local --input-format JSONEachRow --output-format JSONEachRow --structure 'x UInt64, y UInt64' --query \"SELECT x, y, x + y AS a, x * y AS b FROM table\"</command>\n+        </executable>\n+    </source>\n+    <lifetime>0</lifetime>\n+    <layout>\n+        <complex_key_cache>\n+            <size_in_cells>1000</size_in_cells>\n+        </complex_key_cache>\n+    </layout>\n+    <structure>\n+        <key>\n+            <attribute>\n+                <name>x</name>\n+                <type>UInt64</type>\n+            </attribute>\n+            <attribute>\n+                <name>y</name>\n+                <type>UInt64</type>\n+            </attribute>\n+        </key>\n+        <attribute>\n+            <name>a</name>\n+            <type>UInt64</type>\n+            <null_value>0</null_value>\n+        </attribute>\n+        <attribute>\n+            <name>b</name>\n+            <type>UInt64</type>\n+            <null_value>0</null_value>\n+        </attribute>\n+    </structure>\n+</dictionary>\n+\n+<dictionary>\n+    <name>executable_simple</name>\n+    <source>\n+        <executable>\n+            <format>JSONEachRow</format>\n+            <command>cd /; clickhouse-local --input-format JSONEachRow --output-format JSONEachRow --structure 'x UInt64' --query \"SELECT x, x + x AS a, x * x AS b FROM table\"</command>\n+        </executable>\n+    </source>\n+    <lifetime>0</lifetime>\n+    <layout>\n+        <cache>\n+            <size_in_cells>1000</size_in_cells>\n+        </cache>\n+    </layout>\n+    <structure>\n+        <id>\n+            <name>x</name>\n+        </id>\n+        <attribute>\n+            <name>a</name>\n+            <type>UInt64</type>\n+            <null_value>0</null_value>\n+        </attribute>\n+        <attribute>\n+            <name>b</name>\n+            <type>UInt64</type>\n+            <null_value>0</null_value>\n+        </attribute>\n+    </structure>\n+</dictionary>\n+\n+<dictionary>\n+    <name>executable_complex_direct</name>\n+    <source>\n+        <executable>\n+            <format>JSONEachRow</format>\n+            <command>cd /; clickhouse-local --input-format JSONEachRow --output-format JSONEachRow --structure 'x UInt64, y UInt64' --query \"SELECT x, y, x + y AS a, x * y AS b FROM table\"</command>\n+        </executable>\n+    </source>\n+    <lifetime>0</lifetime>\n+    <layout>\n+        <complex_key_direct />\n+    </layout>\n+    <structure>\n+        <key>\n+            <attribute>\n+                <name>x</name>\n+                <type>UInt64</type>\n+            </attribute>\n+            <attribute>\n+                <name>y</name>\n+                <type>UInt64</type>\n+            </attribute>\n+        </key>\n+        <attribute>\n+            <name>a</name>\n+            <type>UInt64</type>\n+            <null_value>0</null_value>\n+        </attribute>\n+        <attribute>\n+            <name>b</name>\n+            <type>UInt64</type>\n+            <null_value>0</null_value>\n+        </attribute>\n+    </structure>\n+</dictionary>\n+\n+</dictionaries>\ndiff --git a/tests/queries/0_stateless/01474_executable_dictionary.reference b/tests/queries/0_stateless/01474_executable_dictionary.reference\nnew file mode 100644\nindex 000000000000..4d0994b08c3f\n--- /dev/null\n+++ b/tests/queries/0_stateless/01474_executable_dictionary.reference\n@@ -0,0 +1,3 @@\n+999999\t1999998\t999998000001\n+999999\t1999998\t999998000001\n+999999\t1999998\t999998000001\ndiff --git a/tests/queries/0_stateless/01474_executable_dictionary.sql b/tests/queries/0_stateless/01474_executable_dictionary.sql\nnew file mode 100644\nindex 000000000000..727cf47f79fd\n--- /dev/null\n+++ b/tests/queries/0_stateless/01474_executable_dictionary.sql\n@@ -0,0 +1,3 @@\n+SELECT number, dictGet('executable_complex', 'a', (number, number)) AS a, dictGet('executable_complex', 'b', (number, number)) AS b FROM numbers(1000000) WHERE number = 999999;\n+SELECT number, dictGet('executable_complex_direct', 'a', (number, number)) AS a, dictGet('executable_complex_direct', 'b', (number, number)) AS b FROM numbers(1000000) WHERE number = 999999;\n+SELECT number, dictGet('executable_simple', 'a', number) AS a, dictGet('executable_simple', 'b', number) AS b FROM numbers(1000000) WHERE number = 999999;\ndiff --git a/tests/queries/0_stateless/arcadia_skip_list.txt b/tests/queries/0_stateless/arcadia_skip_list.txt\nindex 698b38460e47..71e67c811cd0 100644\n--- a/tests/queries/0_stateless/arcadia_skip_list.txt\n+++ b/tests/queries/0_stateless/arcadia_skip_list.txt\n@@ -139,4 +139,5 @@\n 01455_time_zones\n 01456_ast_optimizations_over_distributed\n 01460_DistributedFilesToInsert\n+01474_executable_dictionary\n 01474_bad_global_join\ndiff --git a/tests/queries/skip_list.json b/tests/queries/skip_list.json\nindex adfc5f0e5824..0aa98499d429 100644\n--- a/tests/queries/skip_list.json\n+++ b/tests/queries/skip_list.json\n@@ -18,7 +18,8 @@\n         \"00152_insert_different_granularity\",\n         \"00151_replace_partition_with_different_granularity\",\n         \"00157_cache_dictionary\",\n-        \"01193_metadata_loading\"\n+        \"01193_metadata_loading\",\n+        \"01474_executable_dictionary\" /// informational stderr from sanitizer at start\n     ],\n     \"address-sanitizer\": [\n         \"00281\",\n",
  "problem_statement": "\u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 linux \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0447\u0435\u0440\u0435\u0437 \u0441\u043b\u043e\u0432\u0430\u0440\u0438\n\u0414\u043e\u0431\u0440\u044b\u0439 \u0434\u0435\u043d\u044c. \u041f\u043e\u0434\u0441\u043a\u0430\u0436\u0438\u0442\u0435 \u043f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430 \u043a\u0430\u043a \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0431\u043b\u043e\u043a execute command \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u044f\u0445?\r\n\r\n\u041c\u043d\u0435 \u043d\u0443\u0436\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u043b\u0438\u043d\u0443\u043a\u0441 \u043a\u043e\u043c\u0430\u043d\u0434\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0437\u0430\u043c\u0435\u043d\u044f\u0442\u044c \u0432\u0441\u0435 html entities \u043d\u0430 \u043d\u0443\u0436\u043d\u044b\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u044b.\r\n\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u0443 \u043c\u0435\u043d\u044f \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 \u0435\u0441\u0442\u044c \u043a\u043e\u043b\u043e\u043d\u043a\u0430 name - \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0435\u0441\u0442\u044c \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0438 &quot; &apos; \r\n\r\n\u041c\u043d\u0435 \u043d\u0443\u0436\u043d\u043e \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u0432 \u0438\u043c\u0435\u043d\u0438 \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 \u044d\u0442\u0438 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0438 \u043d\u0430 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u0437\u043d\u0430\u043a\r\n\u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043a\u043e\u043c\u0430\u043d\u0434\u044b:\r\n\r\n`echo 'Rib &lt;' | recode html..ascii `\r\n\r\n\u041c\u043e\u0436\u043d\u043e \u043b\u0438 \u044d\u0442\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0441\u043b\u043e\u0432\u0430\u0440\u0435\u0439?\nExecutable external dictionary doesn't get any STDIN\nAccording to docs when layout of executable dict configured as complex_key_cache list of needed keys will be written in STDIN of program, but it doesn't.\r\n\r\nI asked about my issue in [Telegram](https://t.me/clickhouse_ru) and @proller recommended me to try `<command>tee id.log</command>` to log STDIN. As result  I got empty log.\r\n\r\nChecked on Clickhouse v1.1.54318, v1.1.54327.\r\nOS: Centos 7 (built using Altinity's script)\n",
  "hints_text": "\u0414\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 executable \u0441\u043b\u043e\u0432\u0430\u0440\u044f\u043c\u0438 \u0432\u0430\u0436\u043d\u043e, \u0447\u0442\u043e\u0431\u044b STDOUT \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u043b \u043e\u0431\u0440\u0430\u0442\u043d\u043e \u0442\u0430\u043a\u043e\u0435 \u0436\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043a\u043b\u044e\u0447\u0430, \u043a\u0430\u043a\u043e\u0435 \u0431\u044b\u043b\u043e \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043e \u043f\u0440\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 dictGet*.\r\n\r\n\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \r\n\u043f\u0440\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 dictGetUInt64('geoip2', 'asn', tuple(ip)) \u0438 \u0444\u043e\u0440\u043c\u0430\u0442\u0430 JSONEachRow:\r\n\u0434\u043b\u044f STDIN {\"ip\": \"8.8.8.8\"} \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u0435\u043d \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u0432 STDOUT {\"ip\": \"8.8.8.8\", \"asn\": 15169}\r\n\r\n\u041f\u043e \u044d\u0442\u043e\u0439 \u043f\u0440\u0438\u0447\u0438\u043d\u0435 \u043d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442, \u043d\u0443\u0436\u043d\u043e \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u0438 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u0441\u043e\u043f\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043b\u044e\u0447\u0430.\r\n\r\n_\u0422\u0430\u043a\u0436\u0435 \u0445\u043e\u0447\u0443 \u043e\u0431\u0440\u0430\u0442\u0438\u0442\u044c \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435, \u0447\u0442\u043e CH \u043f\u043e \u043a\u0430\u043a\u043e\u0439-\u0442\u043e \u043f\u0440\u0438\u0447\u0438\u043d\u0435 \u043d\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 STDIN, \u0434\u043e \u0442\u0435\u0445 \u043f\u043e\u0440, \u043f\u043e\u043a\u0430 \u0432\u0430\u0448\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043d\u0435 \u043d\u0430\u0447\u043d\u0435\u0442 \u0437\u0430\u043f\u0438\u0441\u044c \u0432 STDOUT  (\u0441\u043c. #1697)_\n\u0415\u0449\u0451 \u0438\u0437 \"\u043f\u043e\u0431\u043e\u0447\u043d\u044b\u0445\" \u044d\u0444\u0444\u0435\u043a\u0442\u043e\u0432 - \u0437\u0430\u043f\u0440\u043e\u0441 \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c\u0441\u044f \u0432 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0442\u043e\u043a\u043e\u0432, \u043d\u043e \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u0441\u043b\u043e\u0432\u0430\u0440\u044e \u0431\u0443\u0434\u0435\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u043d\u0438\u043c \u043f\u043e\u0442\u043e\u043a\u043e\u043c. \u0422.\u0435. \u044d\u0442\u043e \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e \u0442\u0430\u043a: \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0431\u044b\u0441\u0442\u0440\u043e \u0438 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u044e\u0442\u0441\u044f, \u043d\u0443 \u0441\u043a\u0430\u0436\u0435\u043c \u0432 16 \u043f\u043e\u0442\u043e\u043a\u043e\u0432, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0432\u0441\u0435 \u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u0430, \u0430 \u043f\u043e\u0442\u043e\u043c \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u0442 \u043c\u043e\u043c\u0435\u043d\u0442 \u043a\u043e\u0433\u0434\u0430 \u043d\u0443\u0436\u043d\u043e \"\u0437\u0430\u0433\u043b\u044f\u043d\u0443\u0442\u044c \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u044c\" \u0438 \u0432\u0441\u0435 \u0440\u0435\u0437\u043a\u043e \u0437\u0430\u043c\u0435\u0434\u043b\u044f\u0435\u0442\u0441\u044f, \u0442.\u043a. \u0432\u0441\u0435 16 \u043f\u043e\u0442\u043e\u043a\u043e\u0432 \"\u0432\u0441\u0442\u0430\u044e\u0442 \u0432 \u043e\u0447\u0435\u0440\u0435\u0434\u044c\" \u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0438\u0437 \u0441\u043b\u043e\u0432\u0430\u0440\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c\u0441\u044f \u0432 \u043e\u0434\u043d\u043e\u043c \u043f\u043e\u0442\u043e\u043a\u0435 \u0438 \u0442\u044f\u043d\u0443\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0431\u043b\u043e\u043a \u0437\u0430 \u0431\u043b\u043e\u043a\u043e\u043c (\u043e\u0431\u044b\u0447\u043d\u043e \u043f\u043e 65 \u0442\u044b\u0441\u044f\u0447 \u0437\u0430\u043f\u0438\u0441\u0435\u0439 \u0432 \u0431\u043b\u043e\u043a\u0435).\r\n\r\n\u0417\u042b. \u041e\u0447\u0435\u043d\u044c \u0445\u043e\u0442\u0435\u043b\u043e\u0441\u044c \u0431\u044b \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \"\u043f\u043e\u0434\u043a\u0440\u0443\u0442\u0438\u0442\u044c\" \u0442\u043e \u043a\u0430\u043a \u043a\u043b\u0438\u043a\u0445\u0430\u0443\u0441 \u0447\u0438\u0442\u0430\u0435\u0442 \u0441\u043b\u043e\u0432\u0430\u0440\u0438 - \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u0440\u0430\u0437\u0440\u0435\u0448\u0430\u0442\u044c \u0447\u0438\u0442\u0430\u0442\u044c \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u043e (\u0434\u0430\u0436\u0435 \u0432 \u0443\u0449\u0435\u0440\u0431 \u0442\u043e\u043c\u0443, \u0447\u0442\u043e \u0442\u0435 \u0436\u0435 \u0441\u0430\u043c\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u043c\u043d\u043e\u0433\u043e\u043a\u0440\u0430\u0442\u043d\u043e \u0437\u0430\u043f\u0440\u043e\u0448\u0435\u043d\u044b \u0441 \u0440\u0430\u0437\u043d\u044b\u0445 \u043f\u043e\u0442\u043e\u043a\u043e\u0432, \u043d\u0443 \u0438 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0435 \u043d\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0449\u0438\u0445 \u043f\u043e\u0442\u043e\u043a\u043e\u0432), \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0442\u0435 \u0436\u0435 \u043f\u043e\u0434\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043c\u043d\u043e\u0433\u043e\u043a\u0440\u0430\u0442\u043d\u043e (\u0432 \u0442\u043e\u043c \u0447\u0438\u0441\u043b\u0435 \u0432 \u0440\u0430\u0437\u043d\u044b\u0445 \u0441\u043b\u043e\u0432\u0430\u0440\u0430\u0445), \u0438\u0437\u043c\u0435\u043d\u044f\u0442\u044c \u0440\u0430\u0437\u043c\u0435\u0440 \u0431\u043b\u043e\u043a\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442\u0441\u044f \"\u0437\u0430 \u043e\u0434\u0438\u043d \u0440\u0430\u0437\", \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0441\u043f\u043e\u0441\u043e\u0431 \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f - \"no store / no cache\" - \u043a\u043e\u0433\u0434\u0430 \u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u044e\u0442\u0441\u044f \u0438\u0437 \u0432\u043d\u0435\u0448\u043d\u0435\u0433\u043e \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0430 \u043a\u0430\u0436\u0434\u044b\u0439 \u0440\u0430\u0437, \u0431\u0435\u0437 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0436\u0438\u0437\u043d\u0438, \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0432 \u043f\u0430\u043c\u044f\u0442\u0438 \u0438 \u0442.\u043f. (\u044d\u0442\u043e \u043a\u043e\u043d\u0435\u0447\u043d\u043e \u043e\u0447\u0435\u043d\u044c \u043c\u0435\u0434\u043b\u0435\u043d\u043d\u043e, \u043d\u043e \u043f\u0440\u0438 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u044f\u0445 \u0438 \u0442\u0430\u043a \u043b\u0443\u0447\u0448\u0435, \u0447\u0435\u043c \u0442\u043e \u0436\u0435 \u0441\u0430\u043c\u043e\u0435 \u043d\u043e \u0441 \u0431\u0435\u0441\u043f\u043e\u043b\u0435\u0437\u043d\u044b\u043c \u043a\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c). \n@namikhnenko\r\n@evillique\r\n@kekekekule\n@filimonov This feature was implemented by @nikitamikhaylov in #8303\nCan you show your dictionary config and minimal queries with this dictionary ?\nDictionary config example:\r\n\r\n    <dictionaries>\r\n    <dictionary>\r\n        <name>geolite2_city</name>\r\n        <source>\r\n           <executable>\r\n                <command>tee /usr/share/GeoIP/test.log | /usr/share/GeoIP/get_country.py</command>\r\n                <format>JSONEachRow</format>\r\n            </executable>\r\n        </source>\r\n        <layout>\r\n            <complex_key_cache>\r\n                <size_in_cells>10000</size_in_cells>\r\n            </complex_key_cache>\r\n        </layout>\r\n        <structure>\r\n            <key>\r\n                <attribute>\r\n                    <name>ip</name>\r\n                    <type>String</type>\r\n                </attribute>\r\n            </key>\r\n            <attribute>\r\n                <name>geoname_id</name>\r\n                <type>UInt32</type>\r\n                <null_value>0</null_value>\r\n            </attribute>\r\n            <attribute>\r\n                <name>iso_code</name>\r\n                <type>String</type>\r\n                <null_value></null_value>\r\n            </attribute>\r\n        </structure>\r\n        <lifetime>\r\n            <min>3500</min>\r\n            <max>3500</max>\r\n        </lifetime>\r\n    </dictionary>\r\n    </dictionaries>\r\n\r\nSimple query:\r\n    SELECT dictGetString('geolite2_city', 'iso_code', tuple('8.8.8.8'));\r\n\r\nI tried to change source format (TabSeparated, CSV etc.) and executable type (bash/python/c) - no difference.\n\u0441\u0442\u043e\u043b\u043a\u043d\u0443\u043b\u0441\u044f \u0441 \u044d\u0442\u043e\u0439 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u043e\u0439. \u0442\u0430\u043a\u043e\u0435 \u0432\u043f\u0435\u0447\u0430\u0442\u043b\u0435\u043d\u0438\u0435 \u0447\u0442\u043e \u0432 stdin \u043a\u043b\u0438\u043a\u0445\u0430\u0443\u0441 \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0435 \u043f\u0438\u0448\u0435\u0442\n\u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043b \u0440\u043e\u0432\u043d\u043e \u044d\u0442\u043e\u0442 \u043f\u0440\u0438\u043c\u0435\u0440 - \u0438 \u0432\u0441\u0435 \u0445\u043e\u0440\u043e\u0448\u043e , \u0432 \u043b\u043e\u0433\u0435 \u043f\u043e\u044f\u0432\u0438\u043b\u043e\u0441\u044c {\"ip\":\"8.8.8.8\"}\r\n\u041e\u0434\u043d\u043e \u0437\u0430\u043c\u0435\u0447\u0430\u043d\u0438\u0435 - \u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043f\u043e\u0434 \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 clickhouse \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u0434\u043e\u0441\u0442\u0443\u043f \u043d\u0430 \u0437\u0430\u043f\u0438\u0441\u044c \u0432 /usr/share/GeoIP/test.log\nI checked this issue on latest stable v1.1.54342 - all works fine.\r\nProbably there are some troubles in previous versions (v1.1.54318, v1.1.54327) or something strange happened during building to rpm.\r\nClosed.\nI just faced with this or related issue again.\r\n\r\nDuring the test for more different valid ip-addresses, using query \r\n`SELECT dictGetString('geolite2_city', 'iso_code', tuple('8.8.8.8'));`\r\nI found that sometimes this query hangs and in this case tee log is empty.\r\n\r\nI tried to kill hang query from CH - unsuccessfully. Then I found proc and manually send \r\n`{\"ip\":\"8.8.8.8\"}` to it's stdin > hang query completed.\nI found that CH send data to process's STDIN only when process already send STDOUT.\r\nSo, I temporary solved this by adding **`echo ''`** to the top of my script.\r\n\r\nIs this an expected behavior?\r\n\nIt's not expected.\nThis issue is still relevant.\nI don't know, I have not used this for a long time\n@nikitamikhaylov Maybe you can look at this?\n@millin `This issue is still relevant.` is not a question :)",
  "created_at": "2020-09-07T06:42:17Z",
  "modified_files": [
    "src/Dictionaries/ExecutableDictionarySource.cpp"
  ],
  "modified_test_files": [
    "docker/test/fasttest/run.sh",
    "docker/test/stateless/run.sh",
    "docker/test/stateless_unbundled/run.sh",
    "docker/test/stateless_with_coverage/run.sh",
    "src/Common/tests/CMakeLists.txt",
    "b/src/Common/tests/shell_command_inout.cpp",
    "b/tests/config/executable_dictionary.xml",
    "b/tests/queries/0_stateless/01474_executable_dictionary.reference",
    "b/tests/queries/0_stateless/01474_executable_dictionary.sql",
    "tests/queries/0_stateless/arcadia_skip_list.txt",
    "tests/queries/skip_list.json"
  ]
}