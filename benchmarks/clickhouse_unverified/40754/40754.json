{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 40754,
  "instance_id": "ClickHouse__ClickHouse-40754",
  "issue_numbers": [
    "39991"
  ],
  "base_commit": "5cbe7e08464a0ed2744551eec8d4ac8f03dc4e75",
  "patch": "diff --git a/src/Columns/ColumnObject.cpp b/src/Columns/ColumnObject.cpp\nindex e76862ad9889..6a43e239e5c8 100644\n--- a/src/Columns/ColumnObject.cpp\n+++ b/src/Columns/ColumnObject.cpp\n@@ -12,6 +12,7 @@\n #include <Interpreters/castColumn.h>\n #include <Interpreters/convertFieldToType.h>\n #include <Common/HashTable/HashSet.h>\n+#include <Processors/Transforms/ColumnGathererTransform.h>\n \n namespace DB\n {\n@@ -821,6 +822,44 @@ MutableColumnPtr ColumnObject::cloneResized(size_t new_size) const\n     return applyForSubcolumns([&](const auto & subcolumn) { return subcolumn.cloneResized(new_size); });\n }\n \n+void ColumnObject::getPermutation(PermutationSortDirection, PermutationSortStability, size_t, int, Permutation & res) const\n+{\n+    res.resize(num_rows);\n+    std::iota(res.begin(), res.end(), 0);\n+}\n+\n+void ColumnObject::compareColumn(const IColumn & rhs, size_t rhs_row_num,\n+                                 PaddedPODArray<UInt64> * row_indexes, PaddedPODArray<Int8> & compare_results,\n+                                 int direction, int nan_direction_hint) const\n+{\n+    return doCompareColumn<ColumnObject>(assert_cast<const ColumnObject &>(rhs), rhs_row_num, row_indexes,\n+                                        compare_results, direction, nan_direction_hint);\n+}\n+\n+void ColumnObject::getExtremes(Field & min, Field & max) const\n+{\n+    if (num_rows == 0)\n+    {\n+        min = Object();\n+        max = Object();\n+    }\n+    else\n+    {\n+        get(0, min);\n+        get(0, max);\n+    }\n+}\n+\n+MutableColumns ColumnObject::scatter(ColumnIndex num_columns, const Selector & selector) const\n+{\n+    return scatterImpl<ColumnObject>(num_columns, selector);\n+}\n+\n+void ColumnObject::gather(ColumnGathererStream & gatherer)\n+{\n+    gatherer.gather(*this);\n+}\n+\n const ColumnObject::Subcolumn & ColumnObject::getSubcolumn(const PathInData & key) const\n {\n     if (const auto * node = subcolumns.findLeaf(key))\ndiff --git a/src/Columns/ColumnObject.h b/src/Columns/ColumnObject.h\nindex 4dc5bb5ce249..9c959ba12e36 100644\n--- a/src/Columns/ColumnObject.h\n+++ b/src/Columns/ColumnObject.h\n@@ -15,7 +15,7 @@ namespace DB\n \n namespace ErrorCodes\n {\n-    extern const int LOGICAL_ERROR;\n+    extern const int NOT_IMPLEMENTED;\n }\n \n /// Info that represents a scalar or array field in a decomposed view.\n@@ -220,6 +220,19 @@ class ColumnObject final : public COWHelper<IColumn, ColumnObject>\n     ColumnPtr replicate(const Offsets & offsets) const override;\n     MutableColumnPtr cloneResized(size_t new_size) const override;\n \n+    /// Order of rows in ColumnObject is undefined.\n+    void getPermutation(PermutationSortDirection, PermutationSortStability, size_t, int, Permutation & res) const override;\n+    void compareColumn(const IColumn & rhs, size_t rhs_row_num,\n+                       PaddedPODArray<UInt64> * row_indexes, PaddedPODArray<Int8> & compare_results,\n+                       int direction, int nan_direction_hint) const override;\n+\n+    void updatePermutation(PermutationSortDirection, PermutationSortStability, size_t, int, Permutation &, EqualRanges &) const override {}\n+    int compareAt(size_t, size_t, const IColumn &, int) const override { return 0; }\n+    void getExtremes(Field & min, Field & max) const override;\n+\n+    MutableColumns scatter(ColumnIndex num_columns, const Selector & selector) const override;\n+    void gather(ColumnGathererStream & gatherer) override;\n+\n     /// All other methods throw exception.\n \n     StringRef getDataAt(size_t) const override { throwMustBeConcrete(); }\n@@ -232,14 +245,7 @@ class ColumnObject final : public COWHelper<IColumn, ColumnObject>\n     void updateWeakHash32(WeakHash32 &) const override { throwMustBeConcrete(); }\n     void updateHashFast(SipHash &) const override { throwMustBeConcrete(); }\n     void expand(const Filter &, bool) override { throwMustBeConcrete(); }\n-    int compareAt(size_t, size_t, const IColumn &, int) const override { throwMustBeConcrete(); }\n-    void compareColumn(const IColumn &, size_t, PaddedPODArray<UInt64> *, PaddedPODArray<Int8> &, int, int) const override { throwMustBeConcrete(); }\n     bool hasEqualValues() const override { throwMustBeConcrete(); }\n-    void getPermutation(PermutationSortDirection, PermutationSortStability, size_t, int, Permutation &) const override { throwMustBeConcrete(); }\n-    void updatePermutation(PermutationSortDirection, PermutationSortStability, size_t, int, Permutation &, EqualRanges &) const override { throwMustBeConcrete(); }\n-    MutableColumns scatter(ColumnIndex, const Selector &) const override { throwMustBeConcrete(); }\n-    void gather(ColumnGathererStream &) override { throwMustBeConcrete(); }\n-    void getExtremes(Field &, Field &) const override { throwMustBeConcrete(); }\n     size_t byteSizeAt(size_t) const override { throwMustBeConcrete(); }\n     double getRatioOfDefaultRows(double) const override { throwMustBeConcrete(); }\n     void getIndicesOfNonDefaultRows(Offsets &, size_t, size_t) const override { throwMustBeConcrete(); }\n@@ -247,7 +253,7 @@ class ColumnObject final : public COWHelper<IColumn, ColumnObject>\n private:\n     [[noreturn]] static void throwMustBeConcrete()\n     {\n-        throw Exception(\"ColumnObject must be converted to ColumnTuple before use\", ErrorCodes::LOGICAL_ERROR);\n+        throw Exception(\"ColumnObject must be converted to ColumnTuple before use\", ErrorCodes::NOT_IMPLEMENTED);\n     }\n \n     template <typename Func>\ndiff --git a/src/DataTypes/Serializations/SerializationObject.cpp b/src/DataTypes/Serializations/SerializationObject.cpp\nindex cf49fa8798d8..c18eda791eaa 100644\n--- a/src/DataTypes/Serializations/SerializationObject.cpp\n+++ b/src/DataTypes/Serializations/SerializationObject.cpp\n@@ -258,7 +258,12 @@ void SerializationObject<Parser>::serializeBinaryBulkWithMultipleStreams(\n     auto * state_object = checkAndGetState<SerializeStateObject>(state);\n \n     if (!column_object.isFinalized())\n-        throw Exception(ErrorCodes::LOGICAL_ERROR, \"Cannot write non-finalized ColumnObject\");\n+    {\n+        auto finalized_object = column_object.clone();\n+        assert_cast<ColumnObject &>(*finalized_object).finalize();\n+        serializeBinaryBulkWithMultipleStreams(*finalized_object, offset, limit, settings, state);\n+        return;\n+    }\n \n     auto [tuple_column, tuple_type] = unflattenObjectToTuple(column_object);\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01825_type_json_order_by.reference b/tests/queries/0_stateless/01825_type_json_order_by.reference\nnew file mode 100644\nindex 000000000000..611d28351279\n--- /dev/null\n+++ b/tests/queries/0_stateless/01825_type_json_order_by.reference\n@@ -0,0 +1,6 @@\n+0\n+0\n+{\"k\":\"v\"}\n+\n+{\"k\":\"v\"}\n+{\"k\":\"v\"}\ndiff --git a/tests/queries/0_stateless/01825_type_json_order_by.sql b/tests/queries/0_stateless/01825_type_json_order_by.sql\nnew file mode 100644\nindex 000000000000..1d5768fe0b48\n--- /dev/null\n+++ b/tests/queries/0_stateless/01825_type_json_order_by.sql\n@@ -0,0 +1,5 @@\n+-- Tags: no-fasttest\n+\n+SELECT dummy FROM system.one ORDER BY materialize('{\"k\":\"v\"}'::JSON);\n+SELECT dummy FROM system.one ORDER BY materialize('{\"k\":\"v\"}'::JSON), dummy;\n+SELECT materialize('{\"k\":\"v\"}'::JSON) SETTINGS extremes = 1;\n",
  "problem_statement": "Logical error: 'ColumnObject must be converted to ColumnTuple before use'\nhttps://s3.amazonaws.com/clickhouse-test-reports/36171/ece37d2bd91fee26e066e736464ed65c99129e77/fuzzer_astfuzzerubsan//report.html\r\n```\r\n2022.08.08 16:32:04.568557 [ 132 ] {} <Trace> BaseDaemon: Received signal 6\r\n2022.08.08 16:32:04.568692 [ 456 ] {} <Fatal> BaseDaemon: ########################################\r\n2022.08.08 16:32:04.568869 [ 456 ] {} <Fatal> BaseDaemon: (version 22.8.1.1, build id: 8F5483B425261E20) (from thread 433) (query_id: 05f5eb61-18e9-447f-a337-693d6bce6717) (query: SELECT NULL, [NULL, NULL, NULL, NULL, NULL, NULL, NULL, 7, 1000.0001220703125, 10000000000., NULL, NULL, NULL, NULL], NULL AS name FROM system.numbers_mt ORDER BY CAST('', 'Object(Nullable(\\'json\\'))') ASC, name ASC NULLS LAST LIMIT 3 FORMAT `Null`) Received signal Aborted (6)\r\n2022.08.08 16:32:04.569023 [ 456 ] {} <Fatal> BaseDaemon:\r\n2022.08.08 16:32:04.569295 [ 456 ] {} <Fatal> BaseDaemon: Stack trace: 0x7ff4c6fd600b 0x7ff4c6fb5859 0x101ac143 0x101ac3ef 0x2608fedc 0x2608d749 0x273c6400 0x273c5fd8 0x273c485e 0x27496a85 0x27494f3b 0x274924ef 0x25bf82ab 0x26f91c45 0x26f9176b 0x26f817c3 0x26f82e20 0x26f82ceb 0x1028ad12 0x1028d963 0x7ff4c718d609 0x7ff4c70b2133\r\n2022.08.08 16:32:04.569548 [ 456 ] {} <Fatal> BaseDaemon: 3. raise in ?\r\n2022.08.08 16:32:04.569738 [ 456 ] {} <Fatal> BaseDaemon: 4. abort in ?\r\n2022.08.08 16:32:04.586789 [ 456 ] {} <Fatal> BaseDaemon: 5. ./build_docker/../src/Common/Exception.cpp:47: DB::abortOnFailedAssertion(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) in /workspace/clickhouse\r\n2022.08.08 16:32:04.601510 [ 456 ] {} <Fatal> BaseDaemon: 6. ./build_docker/../src/Common/Exception.cpp:70: DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int, bool) in /workspace/clickhouse\r\n2022.08.08 16:32:04.626884 [ 456 ] {} <Fatal> BaseDaemon: 7. ./build_docker/../src/Columns/ColumnObject.h:0: DB::ColumnObject::throwMustBeConcrete() in /workspace/clickhouse\r\n2022.08.08 16:32:04.652323 [ 456 ] {} <Fatal> BaseDaemon: 8. ./build_docker/../src/Columns/ColumnObject.h:235: DB::ColumnObject::compareAt(unsigned long, unsigned long, DB::IColumn const&, int) const in /workspace/clickhouse\r\n2022.08.08 16:32:04.720406 [ 456 ] {} <Fatal> BaseDaemon: 9.1. inlined from ./build_docker/../src/Core/SortCursor.h:229: DB::SortCursor::greaterAt(DB::SortCursor const&, unsigned long, unsigned long) const\r\n2022.08.08 16:32:04.720448 [ 456 ] {} <Fatal> BaseDaemon: 9.2. inlined from ../src/Core/SortCursor.h:174: DB::SortCursorHelper<DB::SortCursor>::greater(DB::SortCursorHelper<DB::SortCursor> const&) const\r\n2022.08.08 16:32:04.720495 [ 456 ] {} <Fatal> BaseDaemon: 9.3. inlined from ../src/Core/SortCursor.h:185: DB::SortCursorHelper<DB::SortCursor>::operator<(DB::SortCursorHelper<DB::SortCursor> const&) const\r\n2022.08.08 16:32:04.720538 [ 456 ] {} <Fatal> BaseDaemon: 9. ../contrib/libcxx/include/__algorithm/comp.h:73: std::__1::__less<DB::SortCursor, DB::SortCursor>::operator()(DB::SortCursor const&, DB::SortCursor const&) const in /workspace/clickhouse\r\n2022.08.08 16:32:04.793955 [ 456 ] {} <Fatal> BaseDaemon: 10. ./build_docker/../contrib/libcxx/include/__algorithm/sift_down.h:47: void std::__1::__sift_down<std::__1::__less<DB::SortCursor, DB::SortCursor>&, std::__1::__wrap_iter<DB::SortCursor*> >(std::__1::__wrap_iter<DB::SortCursor*>, std::__1::__less<DB::SortCursor, DB::SortCursor>&, std::__1::iterator_traits<std::__1::__wrap_iter<DB::SortCursor*> >::difference_type, std::__1::__wrap_iter<DB::SortCursor*>) in /workspace/clickhouse\r\n2022.08.08 16:32:04.860325 [ 456 ] {} <Fatal> BaseDaemon: 11.1. inlined from ./build_docker/../contrib/libcxx/include/__algorithm/make_heap.h:33: void std::__1::__make_heap<std::__1::__less<DB::SortCursor, DB::SortCursor>&, std::__1::__wrap_iter<DB::SortCursor*> >(std::__1::__wrap_iter<DB::SortCursor*>, std::__1::__wrap_iter<DB::SortCursor*>, std::__1::__less<DB::SortCursor, DB::SortCursor>&)\r\n2022.08.08 16:32:04.860365 [ 456 ] {} <Fatal> BaseDaemon: 11.2. inlined from ../contrib/libcxx/include/__algorithm/make_heap.h:46: void std::__1::make_heap<std::__1::__wrap_iter<DB::SortCursor*>, std::__1::__less<DB::SortCursor, DB::SortCursor> >(std::__1::__wrap_iter<DB::SortCursor*>, std::__1::__wrap_iter<DB::SortCursor*>, std::__1::__less<DB::SortCursor, DB::SortCursor>)\r\n2022.08.08 16:32:04.860413 [ 456 ] {} <Fatal> BaseDaemon: 11.3. inlined from ../contrib/libcxx/include/__algorithm/make_heap.h:54: void std::__1::make_heap<std::__1::__wrap_iter<DB::SortCursor*> >(std::__1::__wrap_iter<DB::SortCursor*>, std::__1::__wrap_iter<DB::SortCursor*>)\r\n2022.08.08 16:32:04.860459 [ 456 ] {} <Fatal> BaseDaemon: 11. ../src/Core/SortCursor.h:363: DB::SortingQueueImpl<DB::SortCursor, (DB::SortingQueueStrategy)1>::SortingQueueImpl<std::__1::vector<DB::SortCursorImpl, std::__1::allocator<DB::SortCursorImpl> > >(std::__1::vector<DB::SortCursorImpl, std::__1::allocator<DB::SortCursorImpl> >&) in /workspace/clickhouse\r\n2022.08.08 16:32:04.942624 [ 456 ] {} <Fatal> BaseDaemon: 12.1. inlined from ./build_docker/../contrib/libcxx/include/vector:1251: std::__1::vector<DB::SortCursor, std::__1::allocator<DB::SortCursor> >::operator=(std::__1::vector<DB::SortCursor, std::__1::allocator<DB::SortCursor> >&&)\r\n2022.08.08 16:32:04.942659 [ 456 ] {} <Fatal> BaseDaemon: 12.2. inlined from ../src/Core/SortCursor.h:344: DB::SortingQueueImpl<DB::SortCursor, (DB::SortingQueueStrategy)1>::operator=(DB::SortingQueueImpl<DB::SortCursor, (DB::SortingQueueStrategy)1>&&)\r\n2022.08.08 16:32:04.942706 [ 456 ] {} <Fatal> BaseDaemon: 12.3. inlined from ../src/Processors/Merges/Algorithms/MergingSortedAlgorithm.cpp:87: operator()<DB::SortingQueueImpl<DB::SortCursor, DB::SortingQueueStrategy::Batch> >\r\n2022.08.08 16:32:04.942759 [ 456 ] {} <Fatal> BaseDaemon: 12. ../contrib/libcxx/include/type_traits:3648: decltype(static_cast<DB::MergingSortedAlgorithm::initialize(std::__1::vector<DB::IMergingAlgorithm::Input, std::__1::allocator<DB::IMergingAlgorithm::Input> >)::$_1&>(fp)(static_cast<DB::SortingQueueImpl<DB::SortCursor, (DB::SortingQueueStrategy)1>&>(fp0))) std::__1::__invoke_constexpr<DB::MergingSortedAlgorithm::initialize(std::__1::vector<DB::IMergingAlgorithm::Input, std::__1::allocator<DB::IMergingAlgorithm::Input> >)::$_1&, DB::SortingQueueImpl<DB::SortCursor, (DB::SortingQueueStrategy)1>&>(DB::MergingSortedAlgorithm::initialize(std::__1::vector<DB::IMergingAlgorithm::Input, std::__1::allocator<DB::IMergingAlgorithm::Input> >)::$_1&, DB::SortingQueueImpl<DB::SortCursor, (DB::SortingQueueStrategy)1>&) in /workspace/clickhouse\r\n```\r\ncc @CurtizJ \n",
  "hints_text": "```\r\nCREATE TABLE defaults_all_columns (n UInt8 DEFAULT 42, s String DEFAULT concat('test', CAST(n, 'String'))) ENGINE = Memory;\r\nINSERT INTO defaults_all_columns FORMAT JSONEachRow {\"n\": 1, \"s\": \"hello\"} {};\r\nINSERT INTO defaults_all_columns FORMAT JSONEachRow {\"n\": 2}, {\"s\": \"world\"};\r\n\r\nSELECT *\r\nFROM defaults_all_columns\r\nORDER BY\r\n    CAST('', 'Object(Nullable(\\'json\\'))') ASC NULLS FIRST,\r\n    'Obje\\0t(\\'json\\')Object(\\'json\\')' DESC NULLS LAST,\r\n    'Object\\0Nulla\\0le(\\'json\\')\\0Ob\\0ect\\0Nullable(\\'json\\')\\0Object\\0Nulla\\0le(\\'json\\')\\0Ob\\0ect\\0Nullable(\\'json\\')\\0' DESC NULLS FIRST\r\n\r\nReceived exception from server (version 22.8.1):\r\nCode: 49. DB::Exception: Received from localhost:9000. DB::Exception: ColumnObject must be converted to ColumnTuple before use: While executing MergingSortedTransform. (LOGICAL_ERROR)\r\n\r\n```\nhttps://s3.amazonaws.com/clickhouse-test-reports/0/bb48a1dfdaf437b0ae82af4cbeb63e5cf48ff18c/fuzzer_astfuzzerubsan//report.html ",
  "created_at": "2022-08-29T14:33:21Z",
  "modified_files": [
    "src/Columns/ColumnObject.cpp",
    "src/Columns/ColumnObject.h",
    "src/DataTypes/Serializations/SerializationObject.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/01825_type_json_order_by.reference",
    "b/tests/queries/0_stateless/01825_type_json_order_by.sql"
  ]
}