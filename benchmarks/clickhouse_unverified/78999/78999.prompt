You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
rows_before_limit_at_least and COUNT(*) OVER() window function do not return expected count with LIMIT BY
We want to implement pagination using LIMIT (and OFFSET) and for that we need the total number of rows. We have so far used the rows_before_limit_at_least for this but have experienced that it for some queries do not give the expected result. It gives a number bigger than what is actually true. The issue can be boiled down to the following example:

```
create table if not exists test
(
    id      Int8,
    text    String,
    number  Int8
)
    engine = MergeTree()
        PARTITION BY id % 2
        ORDER BY (id, text);

insert into test (id, text, number)
VALUES (1, 'a', 1),
       (1, 'b', 2),
       (2, 'c', 3);

select id, text, sum(number), COUNT(*) OVER() as window_function_count
from test
group by id, text
order by text desc
limit 1 by id
limit 5
settings allow_experimental_window_functions = 1
FORMAT
JSON
```

which gives the following output:

```
{
	"meta":
	[
		{
			"name": "id",
			"type": "Int8"
		},
		{
			"name": "text",
			"type": "String"
		},
		{
			"name": "sum(number)",
			"type": "Int64"
		},
		{
			"name": "window_function_count",
			"type": "UInt64"
		}
	],

	"data":
	[
		{
			"id": 2,
			"text": "c",
			"sum(number)": "3",
			"window_function_count": "3"
		},
		{
			"id": 1,
			"text": "b",
			"sum(number)": "2",
			"window_function_count": "3"
		}                                                                                                                                                             
	],

	"rows": 2,

	"rows_before_limit_at_least": 3,

	"statistics":
	{
		"elapsed": 0.009523299,
		"rows_read": 3,
		"bytes_read": 36
	}
}

```

As expected the result returns two rows as it is limited to one row for each `id`, but both the count over window function and the `rows_before_limit_at_least` says there are three rows which is clearly not the case for this query. They count in the row which should be excluded by the `LIMIT 1 BY id`.

**So the question is:** Is this as expected or is it a bug? And in the case that this is expected behavior is there a different way to get the total rows without doing a query with count(*) as well as the "normal" query?
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
