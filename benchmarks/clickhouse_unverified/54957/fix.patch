diff --git a/docs/en/operations/server-configuration-parameters/settings.md b/docs/en/operations/server-configuration-parameters/settings.md
index a2fba612f76f..a45609eca159 100644
--- a/docs/en/operations/server-configuration-parameters/settings.md
+++ b/docs/en/operations/server-configuration-parameters/settings.md
@@ -2427,6 +2427,8 @@ This section contains the following parameters:
   * hostname_levenshtein_distance - just like nearest_hostname, but it compares hostname in a levenshtein distance manner.
   * first_or_random - selects the first ZooKeeper node, if it's not available then randomly selects one of remaining ZooKeeper nodes.
   * round_robin - selects the first ZooKeeper node, if reconnection happens selects the next.
+- `use_compression` â€” If set to true, enables compression in Keeper protocol.
+
 
 **Example configuration**
 
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index d2985665db38..bf9cdd557d4c 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -89,6 +89,17 @@ add_headers_and_sources(clickhouse_common_io IO/Resource)
 add_headers_and_sources(clickhouse_common_io IO/S3)
 list (REMOVE_ITEM clickhouse_common_io_sources Common/malloc.cpp Common/new_delete.cpp)
 
+
+add_headers_and_sources(clickhouse_compression Compression)
+add_headers_and_sources(clickhouse_compression Parsers)
+add_headers_and_sources(clickhouse_compression Core)
+#Included these specific files to avoid linking grpc
+add_glob(clickhouse_compression_headers Server/ServerType.h)
+add_glob(clickhouse_compression_sources Server/ServerType.cpp)
+add_headers_and_sources(clickhouse_compression Common/SSH)
+add_library(clickhouse_compression ${clickhouse_compression_headers} ${clickhouse_compression_sources})
+
+
 add_headers_and_sources(dbms Disks/IO)
 add_headers_and_sources(dbms Disks/ObjectStorages)
 if (TARGET ch_contrib::sqlite)
@@ -270,6 +281,7 @@ target_include_directories (clickhouse_common_io PUBLIC "${ClickHouse_SOURCE_DIR
 
 if (TARGET ch_contrib::llvm)
     dbms_target_link_libraries (PUBLIC ch_contrib::llvm)
+    target_link_libraries (clickhouse_compression PUBLIC ch_contrib::llvm)
 endif ()
 
 if (TARGET ch_contrib::gwp_asan)
@@ -293,6 +305,18 @@ target_link_libraries (clickhouse_common_io
             common
             ch_contrib::double_conversion
             ch_contrib::dragonbox_to_chars
+            ch_contrib::libdivide
+)
+
+
+target_link_libraries (clickhouse_compression
+        PUBLIC
+            string_utils
+            pcg_random
+            clickhouse_parsers
+        PRIVATE
+            ch_contrib::lz4
+            ch_contrib::roaring
 )
 
 # Use X86 AVX2/AVX512 instructions to accelerate filter operations
@@ -340,6 +364,7 @@ if (TARGET ch_contrib::crc32-vpmsum)
 
 if (TARGET ch_contrib::ssh)
  target_link_libraries(clickhouse_common_io PUBLIC ch_contrib::ssh)
+ target_link_libraries(clickhouse_compression PUBLIC ch_contrib::ssh)
 endif()
 
 dbms_target_link_libraries(PUBLIC ch_contrib::abseil_swiss_tables)
@@ -363,10 +388,12 @@ endif()
 
 if (TARGET ch_contrib::krb5)
     dbms_target_link_libraries(PRIVATE ch_contrib::krb5)
+    target_link_libraries (clickhouse_compression PRIVATE ch_contrib::krb5)
 endif()
 
 if (TARGET ch_contrib::nuraft)
     dbms_target_link_libraries(PUBLIC ch_contrib::nuraft)
+    target_link_libraries (clickhouse_compression PUBLIC ch_contrib::nuraft)
 endif()
 
 dbms_target_link_libraries (
@@ -436,6 +463,7 @@ endif ()
 
 if (TARGET ch_contrib::ldap)
     dbms_target_link_libraries (PRIVATE ch_contrib::ldap ch_contrib::lber)
+    target_link_libraries (clickhouse_compression PRIVATE ch_contrib::ldap ch_contrib::lber)
 endif ()
 dbms_target_link_libraries (PUBLIC ch_contrib::sparsehash)
 
diff --git a/src/Common/ZooKeeper/CMakeLists.txt b/src/Common/ZooKeeper/CMakeLists.txt
index 3f7e87ff4a7e..aa06375bd6a3 100644
--- a/src/Common/ZooKeeper/CMakeLists.txt
+++ b/src/Common/ZooKeeper/CMakeLists.txt
@@ -10,6 +10,7 @@ target_compile_definitions (clickhouse_common_zookeeper PRIVATE -DZOOKEEPER_LOG)
 target_link_libraries (clickhouse_common_zookeeper
     PUBLIC
         clickhouse_common_io
+        clickhouse_compression
         common
     PRIVATE
         string_utils
@@ -20,6 +21,7 @@ add_library(clickhouse_common_zookeeper_no_log ${clickhouse_common_zookeeper_hea
 target_link_libraries (clickhouse_common_zookeeper_no_log
     PUBLIC
         clickhouse_common_io
+        clickhouse_compression
         common
     PRIVATE
         string_utils
diff --git a/src/Common/ZooKeeper/ZooKeeperArgs.cpp b/src/Common/ZooKeeper/ZooKeeperArgs.cpp
index 55ba2d02e550..539ecdd02043 100644
--- a/src/Common/ZooKeeper/ZooKeeperArgs.cpp
+++ b/src/Common/ZooKeeper/ZooKeeperArgs.cpp
@@ -214,6 +214,10 @@ void ZooKeeperArgs::initFromKeeperSection(const Poco::Util::AbstractConfiguratio
                 .max_sec = config.getUInt(config_name + "." + key + ".max"),
             };
         }
+        else if (key == "use_compression")
+        {
+            use_compression = config.getBool(config_name + "." + key);
+        }
         else
             throw KeeperException(Coordination::Error::ZBADARGUMENTS, "Unknown key {} in config file", key);
     }
diff --git a/src/Common/ZooKeeper/ZooKeeperArgs.h b/src/Common/ZooKeeper/ZooKeeperArgs.h
index 9c48de02f619..ff44a1b191b5 100644
--- a/src/Common/ZooKeeper/ZooKeeperArgs.h
+++ b/src/Common/ZooKeeper/ZooKeeperArgs.h
@@ -44,6 +44,7 @@ struct ZooKeeperArgs
     double recv_sleep_probability = 0.0;
     UInt64 send_sleep_ms = 0;
     UInt64 recv_sleep_ms = 0;
+    bool use_compression = false;
 
     SessionLifetimeConfiguration fallback_session_lifetime = {};
     DB::GetPriorityForLoadBalancing get_priority_load_balancing;
diff --git a/src/Common/ZooKeeper/ZooKeeperCommon.cpp b/src/Common/ZooKeeper/ZooKeeperCommon.cpp
index e9803d165e19..592d142e9250 100644
--- a/src/Common/ZooKeeper/ZooKeeperCommon.cpp
+++ b/src/Common/ZooKeeper/ZooKeeperCommon.cpp
@@ -27,7 +27,6 @@ void ZooKeeperResponse::write(WriteBuffer & out) const
     if (error == Error::ZOK)
         writeImpl(buf);
     Coordination::write(buf.str(), out);
-    out.next();
 }
 
 std::string ZooKeeperRequest::toString() const
@@ -49,7 +48,6 @@ void ZooKeeperRequest::write(WriteBuffer & out) const
     Coordination::write(getOpNum(), buf);
     writeImpl(buf);
     Coordination::write(buf.str(), out);
-    out.next();
 }
 
 void ZooKeeperSyncRequest::writeImpl(WriteBuffer & out) const
diff --git a/src/Common/ZooKeeper/ZooKeeperConstants.h b/src/Common/ZooKeeper/ZooKeeperConstants.h
index a1d1be86a34c..1a868963b572 100644
--- a/src/Common/ZooKeeper/ZooKeeperConstants.h
+++ b/src/Common/ZooKeeper/ZooKeeperConstants.h
@@ -46,6 +46,7 @@ enum class OpNum : int32_t
 OpNum getOpNum(int32_t raw_op_num);
 
 static constexpr int32_t ZOOKEEPER_PROTOCOL_VERSION = 0;
+static constexpr int32_t ZOOKEEPER_PROTOCOL_VERSION_WITH_COMPRESSION = 10;
 static constexpr int32_t KEEPER_PROTOCOL_VERSION_CONNECTION_REJECT = 42;
 static constexpr int32_t CLIENT_HANDSHAKE_LENGTH = 44;
 static constexpr int32_t CLIENT_HANDSHAKE_LENGTH_WITH_READONLY = 45;
diff --git a/src/Common/ZooKeeper/ZooKeeperImpl.cpp b/src/Common/ZooKeeper/ZooKeeperImpl.cpp
index 709dabf15063..5e84a4310979 100644
--- a/src/Common/ZooKeeper/ZooKeeperImpl.cpp
+++ b/src/Common/ZooKeeper/ZooKeeperImpl.cpp
@@ -16,6 +16,9 @@
 #include <Common/ZooKeeper/ZooKeeperIO.h>
 #include <Common/logger_useful.h>
 #include <Common/setThreadName.h>
+#include <Compression/CompressedReadBuffer.h>
+#include <Compression/CompressedWriteBuffer.h>
+#include <Compression/CompressionFactory.h>
 
 #include "Coordination/KeeperConstants.h"
 #include "config.h"
@@ -274,13 +277,34 @@ using namespace DB;
 template <typename T>
 void ZooKeeper::write(const T & x)
 {
-    Coordination::write(x, *out);
+    Coordination::write(x, getWriteBuffer());
 }
 
 template <typename T>
 void ZooKeeper::read(T & x)
 {
-    Coordination::read(x, *in);
+    Coordination::read(x, getReadBuffer());
+}
+
+WriteBuffer & ZooKeeper::getWriteBuffer()
+{
+    if (compressed_out)
+        return *compressed_out;
+    return *out;
+}
+
+void ZooKeeper::flushWriteBuffer()
+{
+    if (compressed_out)
+         compressed_out->next();
+    out->next();
+}
+
+ReadBuffer & ZooKeeper::getReadBuffer()
+{
+    if (compressed_in)
+        return *compressed_in;
+    return *in;
 }
 
 static void removeRootPath(String & path, const String & chroot)
@@ -345,7 +369,23 @@ ZooKeeper::ZooKeeper(
     if (args.enable_fault_injections_during_startup)
         setupFaultDistributions();
 
-    connect(nodes, args.connection_timeout_ms * 1000);
+    try
+    {
+        use_compression = args.use_compression;
+        connect(nodes, args.connection_timeout_ms * 1000);
+    }
+    catch (...)
+    {
+        /// If we get exception & compression is enabled, then its possible that keeper does not support compression,
+        /// try without compression
+        if (use_compression)
+        {
+            use_compression = false;
+            connect(nodes, args.connection_timeout_ms * 1000);
+        }
+        else
+            throw;
+    }
 
     if (!args.auth_scheme.empty())
         sendAuth(args.auth_scheme, args.identity);
@@ -424,6 +464,8 @@ void ZooKeeper::connect(
 
                 in.emplace(socket);
                 out.emplace(socket);
+                compressed_in.reset();
+                compressed_out.reset();
 
                 try
                 {
@@ -444,7 +486,14 @@ void ZooKeeper::connect(
                     e.addMessage("while receiving handshake from ZooKeeper");
                     throw;
                 }
+
                 connected = true;
+                if (use_compression)
+                {
+                    compressed_in.emplace(*in);
+                    compressed_out.emplace(*out, CompressionCodecFactory::instance().get("ZSTD", {}));
+                }
+
                 original_index = static_cast<Int8>(node.original_index);
 
                 if (i != 0)
@@ -511,16 +560,17 @@ void ZooKeeper::sendHandshake()
     std::array<char, passwd_len> passwd {};
 
     write(handshake_length);
-    write(ZOOKEEPER_PROTOCOL_VERSION);
+    if (use_compression)
+        write(ZOOKEEPER_PROTOCOL_VERSION_WITH_COMPRESSION);
+    else
+        write(ZOOKEEPER_PROTOCOL_VERSION);
     write(last_zxid_seen);
     write(timeout);
     write(previous_session_id);
     write(passwd);
-
-    out->next();
+    flushWriteBuffer();
 }
 
-
 void ZooKeeper::receiveHandshake()
 {
     int32_t handshake_length;
@@ -533,18 +583,22 @@ void ZooKeeper::receiveHandshake()
         throw Exception(Error::ZMARSHALLINGERROR, "Unexpected handshake length received: {}", handshake_length);
 
     read(protocol_version_read);
-    if (protocol_version_read != ZOOKEEPER_PROTOCOL_VERSION)
+
+    /// Special way to tell a client that server is not ready to serve it.
+    /// It's better for faster failover than just connection drop.
+    /// Implemented in clickhouse-keeper.
+    if (protocol_version_read == KEEPER_PROTOCOL_VERSION_CONNECTION_REJECT)
+        throw Exception::fromMessage(Error::ZCONNECTIONLOSS,
+                                     "Keeper server rejected the connection during the handshake. "
+                                     "Possibly it's overloaded, doesn't see leader or stale");
+
+    if (use_compression)
     {
-        /// Special way to tell a client that server is not ready to serve it.
-        /// It's better for faster failover than just connection drop.
-        /// Implemented in clickhouse-keeper.
-        if (protocol_version_read == KEEPER_PROTOCOL_VERSION_CONNECTION_REJECT)
-            throw Exception::fromMessage(Error::ZCONNECTIONLOSS,
-                            "Keeper server rejected the connection during the handshake. "
-                            "Possibly it's overloaded, doesn't see leader or stale");
-        else
-            throw Exception(Error::ZMARSHALLINGERROR, "Unexpected protocol version: {}", protocol_version_read);
+        if (protocol_version_read != ZOOKEEPER_PROTOCOL_VERSION_WITH_COMPRESSION)
+            throw Exception(Error::ZMARSHALLINGERROR,"Unexpected protocol version with compression: {}", protocol_version_read);
     }
+    else if (protocol_version_read != ZOOKEEPER_PROTOCOL_VERSION)
+        throw Exception(Error::ZMARSHALLINGERROR, "Unexpected protocol version: {}", protocol_version_read);
 
     read(timeout);
     if (timeout != args.session_timeout_ms)
@@ -562,7 +616,8 @@ void ZooKeeper::sendAuth(const String & scheme, const String & data)
     request.scheme = scheme;
     request.data = data;
     request.xid = AUTH_XID;
-    request.write(*out);
+    request.write(getWriteBuffer());
+    flushWriteBuffer();
 
     int32_t length;
     XID read_xid;
@@ -578,10 +633,14 @@ void ZooKeeper::sendAuth(const String & scheme, const String & data)
     if (read_xid != AUTH_XID)
         throw Exception(Error::ZMARSHALLINGERROR, "Unexpected event received in reply to auth request: {}", read_xid);
 
-    int32_t actual_length = static_cast<int32_t>(in->count() - count_before_event);
-    if (length != actual_length)
+    if (!use_compression)
+    {
+        int32_t actual_length = static_cast<int32_t>(in->count() - count_before_event);
+        if (length != actual_length)
         throw Exception(Error::ZMARSHALLINGERROR, "Response length doesn't match. Expected: {}, actual: {}", length, actual_length);
 
+    }
+
     if (err != Error::ZOK)
         throw Exception(Error::ZMARSHALLINGERROR, "Error received in reply to auth request. Code: {}. Message: {}",
                         static_cast<int32_t>(err), err);
@@ -637,7 +696,8 @@ void ZooKeeper::sendThread()
                     info.request->addRootPath(args.chroot);
 
                     info.request->probably_sent = true;
-                    info.request->write(*out);
+                    info.request->write(getWriteBuffer());
+                    flushWriteBuffer();
 
                     logOperationIfNeeded(info.request);
 
@@ -653,7 +713,8 @@ void ZooKeeper::sendThread()
 
                 ZooKeeperHeartbeatRequest request;
                 request.xid = PING_XID;
-                request.write(*out);
+                request.write(getWriteBuffer());
+                flushWriteBuffer();
             }
 
             ProfileEvents::increment(ProfileEvents::ZooKeeperBytesSent, out->count() - prev_bytes_sent);
@@ -825,7 +886,7 @@ void ZooKeeper::receiveEvent()
         }
         else
         {
-            response->readImpl(*in);
+            response->readImpl(getReadBuffer());
             response->removeRootPath(args.chroot);
         }
         /// Instead of setting the watch in sendEvent, set it in receiveEvent because need to check the response.
@@ -858,9 +919,14 @@ void ZooKeeper::receiveEvent()
             }
         }
 
-        int32_t actual_length = static_cast<int32_t>(in->count() - count_before_event);
-        if (length != actual_length)
-            throw Exception(Error::ZMARSHALLINGERROR, "Response length doesn't match. Expected: {}, actual: {}", length, actual_length);
+        if (!use_compression)
+        {
+            int32_t actual_length = static_cast<int32_t>(in->count() - count_before_event);
+
+            if (length != actual_length)
+                throw Exception(Error::ZMARSHALLINGERROR, "Response length doesn't match. Expected: {}, actual: {}",
+                                length, actual_length);
+        }
 
         logOperationIfNeeded(request_info.request, response, /* finalize= */ false, elapsed_ms);
     }
diff --git a/src/Common/ZooKeeper/ZooKeeperImpl.h b/src/Common/ZooKeeper/ZooKeeperImpl.h
index 8b3633982008..13e1dc9e3cd8 100644
--- a/src/Common/ZooKeeper/ZooKeeperImpl.h
+++ b/src/Common/ZooKeeper/ZooKeeperImpl.h
@@ -15,6 +15,8 @@
 #include <IO/WriteBuffer.h>
 #include <IO/ReadBufferFromPocoSocket.h>
 #include <IO/WriteBufferFromPocoSocket.h>
+#include <Compression/CompressedReadBuffer.h>
+#include <Compression/CompressedWriteBuffer.h>
 
 #include <Poco/Net/StreamSocket.h>
 #include <Poco/Net/SocketAddress.h>
@@ -239,8 +241,13 @@ class ZooKeeper final : public IKeeper
     Poco::Net::StreamSocket socket;
     /// To avoid excessive getpeername(2) calls.
     Poco::Net::SocketAddress socket_address;
+
     std::optional<ReadBufferFromPocoSocket> in;
     std::optional<WriteBufferFromPocoSocket> out;
+    std::optional<CompressedReadBuffer> compressed_in;
+    std::optional<CompressedWriteBuffer> compressed_out;
+
+    bool use_compression = false;
 
     int64_t session_id = 0;
 
@@ -328,6 +335,10 @@ class ZooKeeper final : public IKeeper
     template <typename T>
     void read(T &);
 
+    WriteBuffer & getWriteBuffer();
+    void flushWriteBuffer();
+    ReadBuffer & getReadBuffer();
+
     void logOperationIfNeeded(const ZooKeeperRequestPtr & request, const ZooKeeperResponsePtr & response = nullptr, bool finalize = false, UInt64 elapsed_ms = 0);
 
     void initFeatureFlags();
diff --git a/src/Common/ZooKeeper/examples/CMakeLists.txt b/src/Common/ZooKeeper/examples/CMakeLists.txt
index e8932fd3088d..a99fbe55dd89 100644
--- a/src/Common/ZooKeeper/examples/CMakeLists.txt
+++ b/src/Common/ZooKeeper/examples/CMakeLists.txt
@@ -2,7 +2,7 @@ clickhouse_add_executable(zkutil_test_commands zkutil_test_commands.cpp)
 target_link_libraries(zkutil_test_commands PRIVATE clickhouse_common_zookeeper_no_log)
 
 clickhouse_add_executable(zkutil_test_commands_new_lib zkutil_test_commands_new_lib.cpp)
-target_link_libraries(zkutil_test_commands_new_lib PRIVATE clickhouse_common_zookeeper_no_log string_utils)
+target_link_libraries(zkutil_test_commands_new_lib PRIVATE clickhouse_common_zookeeper_no_log clickhouse_compression string_utils)
 
 clickhouse_add_executable(zkutil_test_async zkutil_test_async.cpp)
 target_link_libraries(zkutil_test_async PRIVATE clickhouse_common_zookeeper_no_log)
diff --git a/src/Server/KeeperTCPHandler.cpp b/src/Server/KeeperTCPHandler.cpp
index 742300f9b2eb..30233134fa8c 100644
--- a/src/Server/KeeperTCPHandler.cpp
+++ b/src/Server/KeeperTCPHandler.cpp
@@ -20,6 +20,7 @@
 #include <queue>
 #include <mutex>
 #include <Coordination/FourLetterCommand.h>
+#include <IO/CompressionMethod.h>
 #include <base/hex.h>
 
 
@@ -110,13 +111,13 @@ struct SocketInterruptablePollWrapper
         return pipe.fds_rw[1];
     }
 
-    PollResult poll(Poco::Timespan remaining_time, const std::shared_ptr<ReadBufferFromPocoSocket> & in)
+    PollResult poll(Poco::Timespan remaining_time, const ReadBufferFromPocoSocket & in)
     {
 
         bool socket_ready = false;
         bool fd_ready = false;
 
-        if (in->available() != 0)
+        if (in.available() != 0)
             socket_ready = true;
 
         if (response_in.available() != 0)
@@ -242,12 +243,15 @@ KeeperTCPHandler::KeeperTCPHandler(
     KeeperTCPHandler::registerConnection(this);
 }
 
-void KeeperTCPHandler::sendHandshake(bool has_leader)
+void KeeperTCPHandler::sendHandshake(bool has_leader, bool & use_compression)
 {
     Coordination::write(Coordination::SERVER_HANDSHAKE_LENGTH, *out);
     if (has_leader)
     {
-        Coordination::write(Coordination::ZOOKEEPER_PROTOCOL_VERSION, *out);
+        if (use_compression)
+            Coordination::write(Coordination::ZOOKEEPER_PROTOCOL_VERSION_WITH_COMPRESSION, *out);
+        else
+            Coordination::write(Coordination::ZOOKEEPER_PROTOCOL_VERSION, *out);
     }
     else
     {
@@ -269,7 +273,7 @@ void KeeperTCPHandler::run()
     runImpl();
 }
 
-Poco::Timespan KeeperTCPHandler::receiveHandshake(int32_t handshake_length)
+Poco::Timespan KeeperTCPHandler::receiveHandshake(int32_t handshake_length, bool & use_compression)
 {
     int32_t protocol_version;
     int64_t last_zxid_seen;
@@ -282,9 +286,11 @@ Poco::Timespan KeeperTCPHandler::receiveHandshake(int32_t handshake_length)
 
     Coordination::read(protocol_version, *in);
 
-    if (protocol_version != Coordination::ZOOKEEPER_PROTOCOL_VERSION)
+    if (protocol_version != Coordination::ZOOKEEPER_PROTOCOL_VERSION && protocol_version != Coordination::ZOOKEEPER_PROTOCOL_VERSION_WITH_COMPRESSION)
         throw Exception(ErrorCodes::UNEXPECTED_PACKET_FROM_CLIENT, "Unexpected protocol version: {}", toString(protocol_version));
 
+    use_compression = (protocol_version == Coordination::ZOOKEEPER_PROTOCOL_VERSION_WITH_COMPRESSION);
+
     Coordination::read(last_zxid_seen, *in);
     Coordination::read(timeout_ms, *in);
 
@@ -309,8 +315,12 @@ void KeeperTCPHandler::runImpl()
     socket().setSendTimeout(send_timeout);
     socket().setNoDelay(true);
 
-    in = std::make_shared<ReadBufferFromPocoSocket>(socket());
-    out = std::make_shared<WriteBufferFromPocoSocket>(socket());
+    in.emplace(socket());
+    out.emplace(socket());
+    compressed_in.reset();
+    compressed_out.reset();
+
+    bool use_compression = false;
 
     if (in->eof())
     {
@@ -343,7 +353,7 @@ void KeeperTCPHandler::runImpl()
     try
     {
         int32_t handshake_length = header;
-        auto client_timeout = receiveHandshake(handshake_length);
+        auto client_timeout = receiveHandshake(handshake_length, use_compression);
 
         if (client_timeout.totalMilliseconds() == 0)
             client_timeout = Poco::Timespan(Coordination::DEFAULT_SESSION_TIMEOUT_MS * Poco::Timespan::MILLISECONDS);
@@ -367,20 +377,26 @@ void KeeperTCPHandler::runImpl()
         catch (const Exception & e)
         {
             LOG_WARNING(log, "Cannot receive session id {}", e.displayText());
-            sendHandshake(false);
+            sendHandshake(/* has_leader */ false, use_compression);
             return;
 
         }
 
-        sendHandshake(true);
+        sendHandshake(/* has_leader */ true, use_compression);
     }
     else
     {
         LOG_WARNING(log, "Ignoring user request, because the server is not active yet");
-        sendHandshake(false);
+        sendHandshake(/* has_leader */ false, use_compression);
         return;
     }
 
+    if (use_compression)
+    {
+        compressed_in.emplace(*in);
+        compressed_out.emplace(*out, CompressionCodecFactory::instance().get("ZSTD",{}));
+    }
+
     auto response_fd = poll_wrapper->getResponseFD();
     auto response_callback = [responses_ = this->responses, response_fd](const Coordination::ZooKeeperResponsePtr & response)
     {
@@ -415,7 +431,7 @@ void KeeperTCPHandler::runImpl()
         {
             using namespace std::chrono_literals;
 
-            PollResult result = poll_wrapper->poll(session_timeout, in);
+            PollResult result = poll_wrapper->poll(session_timeout, *in);
             log_long_operation("Polling socket");
             if (result.has_requests && !close_received)
             {
@@ -467,7 +483,8 @@ void KeeperTCPHandler::runImpl()
                 updateStats(response);
                 packageSent();
 
-                response->write(*out);
+                response->write(getWriteBuffer());
+                flushWriteBuffer();
                 log_long_operation("Sending response");
                 if (response->error == Coordination::Error::ZSESSIONEXPIRED)
                 {
@@ -525,7 +542,7 @@ bool KeeperTCPHandler::tryExecuteFourLetterWordCmd(int32_t command)
         try
         {
             String res = command_ptr->run();
-            out->write(res.data(), res.size());
+            out->write(res.data(),res.size());
             out->next();
         }
         catch (...)
@@ -537,19 +554,41 @@ bool KeeperTCPHandler::tryExecuteFourLetterWordCmd(int32_t command)
     }
 }
 
+WriteBuffer & KeeperTCPHandler::getWriteBuffer()
+{
+    if (compressed_out)
+        return *compressed_out;
+    return *out;
+}
+
+void KeeperTCPHandler::flushWriteBuffer()
+{
+    if (compressed_out)
+        compressed_out->next();
+    out->next();
+}
+
+ReadBuffer & KeeperTCPHandler::getReadBuffer()
+{
+    if (compressed_in)
+        return *compressed_in;
+    return *in;
+}
+
 std::pair<Coordination::OpNum, Coordination::XID> KeeperTCPHandler::receiveRequest()
 {
+    auto & read_buffer = getReadBuffer();
     int32_t length;
-    Coordination::read(length, *in);
+    Coordination::read(length, read_buffer);
     int32_t xid;
-    Coordination::read(xid, *in);
+    Coordination::read(xid, read_buffer);
 
     Coordination::OpNum opnum;
-    Coordination::read(opnum, *in);
+    Coordination::read(opnum, read_buffer);
 
     Coordination::ZooKeeperRequestPtr request = Coordination::ZooKeeperRequestFactory::instance().get(opnum);
     request->xid = xid;
-    request->readImpl(*in);
+    request->readImpl(read_buffer);
 
     if (!keeper_dispatcher->putRequest(request, session_id))
         throw Exception(ErrorCodes::TIMEOUT_EXCEEDED, "Session {} already disconnected", session_id);
diff --git a/src/Server/KeeperTCPHandler.h b/src/Server/KeeperTCPHandler.h
index 588cdf6305e7..adb1baa084f9 100644
--- a/src/Server/KeeperTCPHandler.h
+++ b/src/Server/KeeperTCPHandler.h
@@ -17,6 +17,8 @@
 #include <unordered_map>
 #include <Coordination/KeeperConnectionStats.h>
 #include <Poco/Timestamp.h>
+#include <Compression/CompressedReadBuffer.h>
+#include <Compression/CompressedWriteBuffer.h>
 
 namespace DB
 {
@@ -78,15 +80,21 @@ class KeeperTCPHandler : public Poco::Net::TCPServerConnection
     Coordination::XID close_xid = Coordination::CLOSE_XID;
 
     /// Streams for reading/writing from/to client connection socket.
-    std::shared_ptr<ReadBufferFromPocoSocket> in;
-    std::shared_ptr<WriteBufferFromPocoSocket> out;
+    std::optional<ReadBufferFromPocoSocket> in;
+    std::optional<WriteBufferFromPocoSocket> out;
+    std::optional<CompressedReadBuffer> compressed_in;
+    std::optional<CompressedWriteBuffer> compressed_out;
 
     std::atomic<bool> connected{false};
 
     void runImpl();
 
-    void sendHandshake(bool has_leader);
-    Poco::Timespan receiveHandshake(int32_t handshake_length);
+    WriteBuffer & getWriteBuffer();
+    void flushWriteBuffer();
+    ReadBuffer & getReadBuffer();
+
+    void sendHandshake(bool has_leader, bool & use_compression);
+    Poco::Timespan receiveHandshake(int32_t handshake_length, bool & use_compression);
 
     static bool isHandShake(int32_t handshake_length);
     bool tryExecuteFourLetterWordCmd(int32_t command);
diff --git a/utils/keeper-bench/Runner.cpp b/utils/keeper-bench/Runner.cpp
index bc9945020174..13855c6d94e9 100644
--- a/utils/keeper-bench/Runner.cpp
+++ b/utils/keeper-bench/Runner.cpp
@@ -127,6 +127,9 @@ void Runner::parseHostsFromConfig(const Poco::Util::AbstractConfiguration & conf
 
         if (config.has(key + ".connection_timeout_ms"))
             connection_info.connection_timeout_ms = config.getInt(key + ".connection_timeout_ms");
+
+        if (config.has(key + ".use_compression"))
+            connection_info.use_compression = config.getBool(key + ".use_compression");
     };
 
     fill_connection_details("connections", default_connection_info);
@@ -430,8 +433,9 @@ std::shared_ptr<Coordination::ZooKeeper> Runner::getConnection(const ConnectionI
     nodes.push_back(node);
     zkutil::ZooKeeperArgs args;
     args.session_timeout_ms = connection_info.session_timeout_ms;
-    args.connection_timeout_ms = connection_info.operation_timeout_ms;
-    args.operation_timeout_ms = connection_info.connection_timeout_ms;
+    args.connection_timeout_ms = connection_info.connection_timeout_ms;
+    args.operation_timeout_ms = connection_info.operation_timeout_ms;
+    args.use_compression = connection_info.use_compression;
     return std::make_shared<Coordination::ZooKeeper>(nodes, args, nullptr);
 }
 
diff --git a/utils/keeper-bench/Runner.h b/utils/keeper-bench/Runner.h
index 14d9b13938b1..4f4a75e6ecf1 100644
--- a/utils/keeper-bench/Runner.h
+++ b/utils/keeper-bench/Runner.h
@@ -79,6 +79,7 @@ class Runner
         int32_t session_timeout_ms = Coordination::DEFAULT_SESSION_TIMEOUT_MS;
         int32_t connection_timeout_ms = Coordination::DEFAULT_CONNECTION_TIMEOUT_MS;
         int32_t operation_timeout_ms = Coordination::DEFAULT_OPERATION_TIMEOUT_MS;
+        bool use_compression = false;
 
         size_t sessions = 1;
     };
