diff --git a/tests/performance/window_functions_distinct.xml b/tests/performance/window_functions_distinct.xml
new file mode 100644
index 000000000000..9e352eda6cd8
--- /dev/null
+++ b/tests/performance/window_functions_distinct.xml
@@ -0,0 +1,32 @@
+<test>
+    <query>
+        SELECT number, avg(DISTINCT number) OVER () FROM numbers(0, 100_000) FORMAT Null;
+    </query>
+
+    <query>
+        SELECT number, avg(DISTINCT number) OVER (ORDER BY number) FROM numbers(0, 100_000) FORMAT Null;
+    </query>
+
+    <query>
+        SELECT number, avg(DISTINCT number) OVER (ORDER BY number ROWS BETWEEN UNBOUNDED PRECEDING AND 20 FOLLOWING)
+        FROM numbers(0, 100_000) FORMAT Null;
+    </query>
+
+    <query>
+        SELECT number, s, min(DISTINCT s) OVER(PARTITION BY number % 5_000) AS min_varlen_string
+        FROM
+        (
+            SELECT number, toString(number % 10_000) AS s
+            FROM numbers(100_000)
+        ) FORMAT Null;
+    </query>
+
+    <query>
+        SELECT s, ts, argMax(DISTINCT ts, s) OVER(PARTITION BY ts % 5_000) AS value_with_max_ts
+        FROM
+        (
+            SELECT number AS ts, toString(number % 10_000) AS s
+            FROM numbers(100_000)
+        ) FORMAT Null;
+    </query>
+</test>
diff --git a/tests/queries/0_stateless/01656_sequence_next_node_distinct.reference b/tests/queries/0_stateless/01656_sequence_next_node_distinct.reference
new file mode 100644
index 000000000000..c3cabd178db2
--- /dev/null
+++ b/tests/queries/0_stateless/01656_sequence_next_node_distinct.reference
@@ -0,0 +1,6 @@
+(forward, head, A->B)	0	\N
+(forward, head, A->B)	1	B
+(forward, head, A->B)	1	\N
+(forward, head, A->B)	2	\N
+
+(forward, head, A->B)	0	\N
diff --git a/tests/queries/0_stateless/01656_sequence_next_node_distinct.sql b/tests/queries/0_stateless/01656_sequence_next_node_distinct.sql
new file mode 100644
index 000000000000..f88a780f665d
--- /dev/null
+++ b/tests/queries/0_stateless/01656_sequence_next_node_distinct.sql
@@ -0,0 +1,46 @@
+SET allow_experimental_funnel_functions = 1;
+
+DROP TABLE IF EXISTS events_demo;
+
+CREATE TABLE events_demo (
+  id UInt32,
+  dt DateTime,
+  action Nullable(String)
+) ENGINE = MergeTree()
+ORDER BY
+  (id, dt);
+
+INSERT INTO
+  events_demo (id, dt, action)
+VALUES
+  (1, '2025-06-17 09:00:00', 'A'),
+  (1, '2025-06-17 09:00:10', 'B'),
+  (1, '2025-06-17 09:00:20', 'B'),
+  (1, '2025-06-17 09:00:30', 'C'),
+  (1, '2025-06-17 09:00:40', NULL),
+  (2, '2025-06-17 08:00:00', 'X'),
+  (2, '2025-06-17 08:00:00', 'X'),
+  (2, '2025-06-17 08:00:10', 'A'),
+  (2, '2025-06-17 08:00:20', NULL),
+  (2, '2025-06-17 08:00:30', 'Y'),
+  (2, '2025-06-17 08:00:30', 'Y'),
+  (2, '2025-06-17 08:00:40', 'A'),
+  (2, '2025-06-17 08:00:50', 'Y'),
+  (1, '2025-06-17 09:00:40', NULL);
+
+SELECT
+  DISTINCT '(forward, head, A->B)',
+  id,
+  sequenceNextNodeDistinct('forward', 'head', 4) (
+    dt,
+    action,
+    action = 'A',
+    toNullable(1 IS NOT NULL)
+    AND (NOT toNullable(isNullable(1)))
+  ) IGNORE NULLS AS next_node
+FROM
+  events_demo
+GROUP BY
+  * WITH ROLLUP WITH TOTALS
+ORDER BY
+  ALL ASC NULLS LAST;
diff --git a/tests/queries/0_stateless/02676_to_decimal_string.reference b/tests/queries/0_stateless/02676_to_decimal_string.reference
index 4c27ee5b5286..b1c93f5bd3bd 100644
--- a/tests/queries/0_stateless/02676_to_decimal_string.reference
+++ b/tests/queries/0_stateless/02676_to_decimal_string.reference
@@ -19,3 +19,7 @@
 128.78932312332132985464000000000000000000000000000000000000000000000000000000000
 128.7893231233
 -128.78932312332132985464123123789323123321329854600000000000000000000000000000000
+1
+1
+-1
+-1
diff --git a/tests/queries/0_stateless/02676_to_decimal_string.sql b/tests/queries/0_stateless/02676_to_decimal_string.sql
index 1dae139deb1c..d24deb91be97 100644
--- a/tests/queries/0_stateless/02676_to_decimal_string.sql
+++ b/tests/queries/0_stateless/02676_to_decimal_string.sql
@@ -39,3 +39,9 @@ SELECT toDecimalString('256.256'::Decimal256(45), *); -- {serverError ILLEGAL_CO
 SELECT toDecimalString('128.128'::Decimal128(30), 'str'); -- {serverError ILLEGAL_TYPE_OF_ARGUMENT}
 SELECT toDecimalString('64.64'::Decimal64(10)); -- {serverError NUMBER_OF_ARGUMENTS_DOESNT_MATCH}
 SELECT toDecimalString('64.64'::Decimal64(10), 3, 3); -- {serverError NUMBER_OF_ARGUMENTS_DOESNT_MATCH}
+
+-- Zero precision checks
+SELECT toDecimalString(1, 0);
+SELECT toDecimalString(1.123456, 0);  -- rounding
+SELECT toDecimalString(-1, 0);
+SELECT toDecimalString(-1.123456, 0);  -- rounding
diff --git a/tests/queries/0_stateless/03447_window_functions_distinct.reference b/tests/queries/0_stateless/03447_window_functions_distinct.reference
new file mode 100644
index 000000000000..e952bff25f43
--- /dev/null
+++ b/tests/queries/0_stateless/03447_window_functions_distinct.reference
@@ -0,0 +1,68 @@
+Single Numeric Data:
+0	10
+1	10
+2	10
+3	10
+4	10
+0	0
+1	1
+2	3
+3	6
+4	10
+0	0	30
+2	2	30
+9	11	30
+4	15	21
+8	23	17
+0	23	17
+2	23	17
+8	23	15
+0	23	7
+7	30	7
+Single Generic Plain Column:
+0	0	0
+1	1	0
+2	2	0
+3	3	0
+4	4	0
+5	0	0
+6	1	0
+7	2	0
+8	3	0
+9	4	0
+10	0	0
+Single Generic Non-Plain Column:
+['0','1']	['0','1']
+['1','2']	['0','1']
+['2','3']	['0','1']
+['3','4']	['0','1']
+['4','5']	['0','1']
+['5','6']	['0','1']
+['6','7']	['0','1']
+['7','8']	['0','1']
+['8','9']	['0','1']
+['9','10']	['0','1']
+Multiple Generic Columns:
+0	0	4
+1	1	9
+2	2	4
+3	3	9
+4	4	4
+0	5	9
+1	6	4
+2	7	9
+3	8	4
+4	9	9
+0	10	4
+Aggregate State Checks:
+6	9	10	6	9
+5	7	9	5	7
+5	7	9	5	7
+9	12	14	9	12
+10	13	20	10	13
+11	14	22	11	14
+12	15	24	12	15
+13	16	26	13	16
+14	17	28	14	17
+15	18	30	15	18
+6	9	12	10	15	14	15	15	15
diff --git a/tests/queries/0_stateless/03447_window_functions_distinct.sql b/tests/queries/0_stateless/03447_window_functions_distinct.sql
new file mode 100644
index 000000000000..d54eeee5404e
--- /dev/null
+++ b/tests/queries/0_stateless/03447_window_functions_distinct.sql
@@ -0,0 +1,61 @@
+SELECT 'Single Numeric Data:';
+SELECT number, sum(DISTINCT number) OVER () FROM numbers(0, 5) ORDER BY number;
+SELECT number, sum(DISTINCT number) OVER (ORDER BY number) FROM numbers(0, 5) ORDER BY number;
+
+WITH intHash64(number) % 10 AS x
+SELECT
+    x,
+    sumDistinct(x) OVER (ORDER BY number ASC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS a,
+    sumDistinct(x) OVER (ORDER BY number ASC ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) AS b
+FROM numbers(10);
+
+SELECT 'Single Generic Plain Column:';
+SELECT number, s, min(DISTINCT s) OVER(PARTITION BY number % 2) AS min_varlen_string
+FROM
+(
+    SELECT number, toString(number % 5) AS s
+    FROM numbers(11)
+) ORDER BY number;
+
+SELECT 'Single Generic Non-Plain Column:';
+SELECT arr, min(DISTINCT arr) OVER (ORDER BY arr)
+FROM
+(
+    SELECT [toString(number), toString(number+1)] AS arr
+    FROM numbers(10)
+) ORDER BY arr;
+
+SELECT 'Multiple Generic Columns:';
+SELECT s, ts, argMax(DISTINCT ts, s) OVER(PARTITION BY ts % 2) AS value_with_max_ts
+FROM
+(
+    SELECT number AS ts, toString(number % 5) AS s
+    FROM numbers(11)
+) ORDER BY ts;
+
+SELECT 'Aggregate State Checks:';
+WITH
+    arrayReduce('sumDistinctState', [1 + number, 2, 3]) AS a,
+    arrayReduce('sumDistinctState', [2 + number, 3, 4]) AS b
+SELECT
+    finalizeAggregation(a),
+    finalizeAggregation(b),
+    finalizeAggregation(a + b),
+    finalizeAggregation(a * 2),
+    finalizeAggregation(b * 2)
+FROM numbers(10);
+
+WITH
+    arrayReduce('sumDistinctState', [1, 2, 3]) AS a,
+    arrayReduce('sumDistinctState', [2, 3, 4]) AS b,
+    arrayReduce('sumDistinctState', [3, 4, 5]) AS c
+SELECT
+    finalizeAggregation(a),
+    finalizeAggregation(b),
+    finalizeAggregation(c),
+    finalizeAggregation(a + b),
+    finalizeAggregation(a + c),
+    finalizeAggregation(b + c),
+    finalizeAggregation((a + b) + c),
+    finalizeAggregation((b + c) + a),
+    finalizeAggregation((c + a) + b);
diff --git a/tests/queries/0_stateless/03448_window_functions_distinct_distributed.reference b/tests/queries/0_stateless/03448_window_functions_distinct_distributed.reference
new file mode 100644
index 000000000000..933f22c74a41
--- /dev/null
+++ b/tests/queries/0_stateless/03448_window_functions_distinct_distributed.reference
@@ -0,0 +1,8 @@
+49999.5
+49999.5
+[(0,'4'),(1,'4'),(2,'4'),(3,'4'),(4,'4'),(5,'4'),(6,'4'),(7,'4'),(8,'4'),(9,'4')]
+[(0,0),(0,5),(0,10),(1,0),(1,1),(1,5),(1,10),(2,0),(2,2),(2,5),(2,10),(3,0),(3,5),(3,10),(4,0),(4,1),(4,5),(4,10),(5,0),(5,5),(5,10),(6,0),(6,5),(6,10),(7,0),(7,1),(7,5),(7,10),(8,0),(8,5),(8,10),(9,0),(9,5),(9,10)]
+49999.5
+49999.5
+[(0,'4'),(1,'4'),(2,'4'),(3,'4'),(4,'4'),(5,'4'),(6,'4'),(7,'4'),(8,'4'),(9,'4')]
+[(0,0),(0,5),(0,10),(1,0),(1,1),(1,5),(1,10),(2,0),(2,2),(2,5),(2,10),(3,0),(3,5),(3,10),(4,0),(4,1),(4,5),(4,10),(5,0),(5,5),(5,10),(6,0),(6,5),(6,10),(7,0),(7,1),(7,5),(7,10),(8,0),(8,5),(8,10),(9,0),(9,5),(9,10)]
diff --git a/tests/queries/0_stateless/03448_window_functions_distinct_distributed.sql b/tests/queries/0_stateless/03448_window_functions_distinct_distributed.sql
new file mode 100644
index 000000000000..cab3ca071149
--- /dev/null
+++ b/tests/queries/0_stateless/03448_window_functions_distinct_distributed.sql
@@ -0,0 +1,73 @@
+-- Tags: distributed
+
+SET distributed_aggregation_memory_efficient = 1;
+
+SELECT any(total) AS total_distinct_avg
+FROM (
+    SELECT number,
+        avgDistinct(number) OVER () AS total
+    FROM remote('127.0.0.{1,2,3}', numbers_mt(100_000))
+);
+
+SELECT max(running_avg) AS final_running_avg
+FROM (
+    SELECT number,
+        avgDistinct(number) OVER (ORDER BY number) AS running_avg
+    FROM remote('127.0.0.{1,2,3}', numbers_mt(100_000))
+);
+
+SELECT
+    arraySort(groupUniqArray((partition_mod, max_val))) AS max_strings_per_partition
+FROM (
+    SELECT
+        number % 10 AS partition_mod,
+        maxDistinct(toString(number % 5)) OVER (PARTITION BY number % 7) AS max_val
+    FROM remote('127.0.0.{1,2,3}', numbers_mt(100_000))
+);
+
+SELECT
+    arraySort(groupUniqArray((partition_mod, argMin_val))) AS argmin_per_partition
+FROM (
+    SELECT
+        number                             AS ts,
+        ts % 10                            AS partition_mod,
+        toString(ts % 5)                   AS s,
+        argMinDistinct(ts, s) OVER (PARTITION BY ts % 3 ORDER BY ts) AS argMin_val
+    FROM remote('127.0.0.{1,2,3}', numbers_mt(100_000)) ORDER BY ts
+);
+
+SET distributed_aggregation_memory_efficient = 0;
+
+SELECT any(total) AS total_distinct_avg
+FROM (
+    SELECT number,
+        avgDistinct(number) OVER () AS total
+    FROM remote('127.0.0.{1,2,3}', numbers_mt(100_000))
+);
+
+SELECT max(running_avg) AS final_running_avg
+FROM (
+    SELECT number,
+        avgDistinct(number) OVER (ORDER BY number) AS running_avg
+    FROM remote('127.0.0.{1,2,3}', numbers_mt(100_000))
+);
+
+SELECT
+    arraySort(groupUniqArray((partition_mod, max_val))) AS max_strings_per_partition
+FROM (
+    SELECT
+        number % 10 AS partition_mod,
+        maxDistinct(toString(number % 5)) OVER (PARTITION BY number % 7) AS max_val
+    FROM remote('127.0.0.{1,2,3}', numbers_mt(100_000))
+);
+
+SELECT
+    arraySort(groupUniqArray((partition_mod, argMin_val))) AS argmin_per_partition
+FROM (
+    SELECT
+        number                             AS ts,
+        ts % 10                            AS partition_mod,
+        toString(ts % 5)                   AS s,
+        argMinDistinct(ts, s) OVER (PARTITION BY ts % 3 ORDER BY ts) AS argMin_val
+    FROM remote('127.0.0.{1,2,3}', numbers_mt(100_000)) ORDER BY ts
+);
