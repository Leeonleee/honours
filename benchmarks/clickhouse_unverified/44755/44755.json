{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 44755,
  "instance_id": "ClickHouse__ClickHouse-44755",
  "issue_numbers": [
    "44736"
  ],
  "base_commit": "aa41e9b7754bd0d10928dc3f8591fe266697b7cd",
  "patch": "diff --git a/src/Interpreters/JoinToSubqueryTransformVisitor.cpp b/src/Interpreters/JoinToSubqueryTransformVisitor.cpp\nindex 15d12de527df..a57b8d2354b6 100644\n--- a/src/Interpreters/JoinToSubqueryTransformVisitor.cpp\n+++ b/src/Interpreters/JoinToSubqueryTransformVisitor.cpp\n@@ -60,6 +60,7 @@ class ExtractAsterisksMatcher\n     struct Data\n     {\n         std::unordered_map<String, NamesAndTypesList> table_columns;\n+        std::unordered_map<String, String> table_name_alias;\n         std::vector<String> tables_order;\n         std::shared_ptr<ASTExpressionList> new_select_expression_list;\n \n@@ -71,6 +72,7 @@ class ExtractAsterisksMatcher\n                 String table_name = table.table.getQualifiedNamePrefix(false);\n                 NamesAndTypesList columns = table.columns;\n                 tables_order.push_back(table_name);\n+                table_name_alias.emplace(table.table.table /* table_name */, table_name /* alias_name */);\n                 table_columns.emplace(std::move(table_name), std::move(columns));\n             }\n         }\n@@ -85,9 +87,21 @@ class ExtractAsterisksMatcher\n             ASTs & columns,\n             ShouldAddColumnPredicate should_add_column_predicate = [](const String &) { return true; })\n         {\n-            auto it = table_columns.find(table_name);\n+            String name = table_name;\n+            auto it = table_columns.find(name);\n             if (it == table_columns.end())\n-                throw Exception(\"Unknown qualified identifier: \" + table_name, ErrorCodes::UNKNOWN_IDENTIFIER);\n+            {\n+                auto table_name_it = table_name_alias.find(table_name);\n+                if (table_name_it != table_name_alias.end())\n+                {\n+                    name = table_name_it->second;\n+                    it = table_columns.find(table_name_it->second);\n+                    if (it == table_columns.end())\n+                        throw Exception(\"Unknown qualified identifier: \" + table_name, ErrorCodes::UNKNOWN_IDENTIFIER);\n+                }\n+                else\n+                    throw Exception(\"Unknown qualified identifier: \" + table_name, ErrorCodes::UNKNOWN_IDENTIFIER);\n+            }\n \n             for (const auto & column : it->second)\n             {\n@@ -146,8 +160,6 @@ class ExtractAsterisksMatcher\n             {\n                 has_asterisks = true;\n \n-                if (child->children.size() != 1)\n-                    throw Exception(\"Logical error: qualified asterisk must have exactly one child\", ErrorCodes::LOGICAL_ERROR);\n                 auto & identifier = child->children[0]->as<ASTTableIdentifier &>();\n \n                 data.addTableColumns(identifier.name(), columns);\n@@ -155,7 +167,10 @@ class ExtractAsterisksMatcher\n                 // QualifiedAsterisk's transformers start to appear at child 1\n                 for (const auto * it = qualified_asterisk->children.begin() + 1; it != qualified_asterisk->children.end(); ++it)\n                 {\n-                    IASTColumnsTransformer::transform(*it, columns);\n+                    if (it->get()->as<ASTColumnsApplyTransformer>() || it->get()->as<ASTColumnsExceptTransformer>() || it->get()->as<ASTColumnsReplaceTransformer>())\n+                        IASTColumnsTransformer::transform(*it, columns);\n+                    else\n+                        throw Exception(\"Logical error: qualified asterisk must only have children of IASTColumnsTransformer type\", ErrorCodes::LOGICAL_ERROR);\n                 }\n             }\n             else if (const auto * columns_list_matcher = child->as<ASTColumnsListMatcher>())\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02518_qualified_asterisks_alias_table_name.reference b/tests/queries/0_stateless/02518_qualified_asterisks_alias_table_name.reference\nnew file mode 100644\nindex 000000000000..b250b4e6616e\n--- /dev/null\n+++ b/tests/queries/0_stateless/02518_qualified_asterisks_alias_table_name.reference\n@@ -0,0 +1,1 @@\n+1\ta\t1\tb\t1\tc\ndiff --git a/tests/queries/0_stateless/02518_qualified_asterisks_alias_table_name.sql b/tests/queries/0_stateless/02518_qualified_asterisks_alias_table_name.sql\nnew file mode 100644\nindex 000000000000..808fa58a9933\n--- /dev/null\n+++ b/tests/queries/0_stateless/02518_qualified_asterisks_alias_table_name.sql\n@@ -0,0 +1,25 @@\n+DROP TABLE IF EXISTS test_table_join_1;\n+CREATE TABLE test_table_join_1 (id UInt64, value String) ENGINE = TinyLog;\n+\n+DROP TABLE IF EXISTS test_table_join_2;\n+CREATE TABLE test_table_join_2 (id UInt64, value String) ENGINE = TinyLog;\n+\n+DROP TABLE IF EXISTS test_table_join_3;\n+CREATE TABLE test_table_join_3 (id UInt64, value String ) ENGINE = TinyLog;\n+\n+INSERT INTO test_table_join_1 VALUES (1, 'a');\n+INSERT INTO test_table_join_2 VALUES (1, 'b');\n+INSERT INTO test_table_join_3 VALUES (1, 'c');\n+\n+\n+SELECT\n+    test_table_join_1.* APPLY toString,\n+    test_table_join_2.* APPLY toString,\n+    test_table_join_3.* APPLY toString\n+FROM test_table_join_1 AS t1\n+         INNER JOIN test_table_join_2 AS t2 ON t1.id = t2.id\n+         INNER JOIN test_table_join_3 AS t3 ON t2.id = t3.id;\n+\n+DROP TABLE test_table_join_1;\n+DROP TABLE test_table_join_2;\n+DROP TABLE test_table_join_3;\n\\ No newline at end of file\n",
  "problem_statement": "Logical error: qualified asterisk must have exactly one child\n```\r\nclickhouse-local -n <<<\"\r\n\r\nDROP TABLE IF EXISTS test_table_join_1;\r\nCREATE TABLE test_table_join_1\r\n(\r\n    id UInt64,\r\n    value String\r\n) ENGINE = TinyLog;\r\n\r\nDROP TABLE IF EXISTS test_table_join_2;\r\nCREATE TABLE test_table_join_2\r\n(\r\n    id UInt64,\r\n    value String\r\n) ENGINE = TinyLog;\r\n\r\nDROP TABLE IF EXISTS test_table_join_3;\r\nCREATE TABLE test_table_join_3\r\n(\r\n    id UInt64,\r\n    value String\r\n) ENGINE = TinyLog;\r\n\r\nDESCRIBE TABLE\r\n(\r\n    SELECT\r\n        test_table_join_1.* APPLY toString,\r\n        test_table_join_2.* APPLY toString,\r\n        test_table_join_3.* APPLY toString\r\n    FROM test_table_join_1 AS t1\r\n    INNER JOIN test_table_join_2 AS t2 ON t1.id = t2.id\r\n    INNER JOIN test_table_join_3 AS t3 ON t2.id = t3.id\r\n)\r\n\"\r\nCode: 49. DB::Exception: Logical error: qualified asterisk must have exactly one child: While processing test_table_join_1.* APPLY toString, test_table_join_2.* APPLY toString, test_table_join_3.* APPLY toString: While processing SELECT test_table_join_1.* APPLY toString, test_table_join_2.* APPLY toString, test_table_join_3.* APPLY toString FROM test_table_join_1 AS t1 INNER JOIN test_table_join_2 AS t2 ON t1.id = t2.id INNER JOIN test_table_join_3 AS t3 ON t2.id = t3.id. (LOGICAL_ERROR)\r\n```\r\n\r\nhttps://s3.amazonaws.com/clickhouse-test-reports/0/f84064d05acd76e5098e14f42f15656960f29da6/fuzzer_astfuzzerubsan/report.html\n",
  "hints_text": "",
  "created_at": "2022-12-30T15:14:11Z",
  "modified_files": [
    "src/Interpreters/JoinToSubqueryTransformVisitor.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02518_qualified_asterisks_alias_table_name.reference",
    "b/tests/queries/0_stateless/02518_qualified_asterisks_alias_table_name.sql"
  ]
}