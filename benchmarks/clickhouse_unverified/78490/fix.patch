diff --git a/src/Client/ClientBase.cpp b/src/Client/ClientBase.cpp
index 45388d290766..7d23d97562e5 100644
--- a/src/Client/ClientBase.cpp
+++ b/src/Client/ClientBase.cpp
@@ -61,6 +61,7 @@
 #include <Interpreters/ReplaceQueryParameterVisitor.h>
 #include <Interpreters/ProfileEventsExt.h>
 #include <Interpreters/InterpreterSetQuery.h>
+#include <Interpreters/processColumnTransformers.h>
 #include <IO/Ask.h>
 #include <IO/ReadHelpers.h>
 #include <IO/WriteBufferFromOStream.h>
@@ -1903,6 +1904,19 @@ void ClientBase::sendData(Block & sample, const ColumnsDescription & columns_des
             columns_for_storage_file.add(std::move(column));
         }
 
+        if (parsed_insert_query->columns)
+        {
+            auto columns = processColumnTransformers(client_context->getCurrentDatabase(), client_context->getInsertionTable(), columns_for_storage_file, parsed_insert_query->columns);
+            ColumnsDescription reordered_description{};
+            for (const auto & col_name : columns->children)
+            {
+                auto col = columns_for_storage_file.get(col_name->getColumnName());
+                reordered_description.add(std::move(col));
+            }
+
+            columns_for_storage_file = std::move(reordered_description);
+        }
+
         StorageFile::CommonArguments args{
             WithContext(client_context),
             parsed_insert_query->table_id,
diff --git a/src/Interpreters/processColumnTransformers.cpp b/src/Interpreters/processColumnTransformers.cpp
index 5ef331eb1196..94b369ddf7f1 100644
--- a/src/Interpreters/processColumnTransformers.cpp
+++ b/src/Interpreters/processColumnTransformers.cpp
@@ -12,27 +12,29 @@
 namespace DB
 {
 
-ASTPtr processColumnTransformers(
-        const String & current_database,
-        const StoragePtr & table,
-        const StorageMetadataPtr & metadata_snapshot,
-        ASTPtr query_columns)
+namespace
+{
+ASTPtr processColumnTransformersImpl(
+    const ColumnsDescription & columns,
+    const NamesAndTypesList & virtual_columns,
+    ASTPtr query_columns,
+    const String & current_database,
+    const StorageID & storage_id)
 {
-    const auto & columns = metadata_snapshot->getColumns();
     auto names_and_types = columns.getOrdinary();
     removeDuplicateColumns(names_and_types);
 
     TablesWithColumns tables_with_columns;
     {
         auto table_expr = std::make_shared<ASTTableExpression>();
-        table_expr->database_and_table_name = std::make_shared<ASTTableIdentifier>(table->getStorageID());
+        table_expr->database_and_table_name = std::make_shared<ASTTableIdentifier>(storage_id);
         table_expr->children.push_back(table_expr->database_and_table_name);
         tables_with_columns.emplace_back(DatabaseAndTableWithAlias(*table_expr, current_database), names_and_types);
     }
 
     tables_with_columns[0].addHiddenColumns(columns.getMaterialized());
     tables_with_columns[0].addHiddenColumns(columns.getAliases());
-    tables_with_columns[0].addHiddenColumns(table->getVirtualsList());
+    tables_with_columns[0].addHiddenColumns(virtual_columns);
 
     NameSet source_columns_set;
     for (const auto & identifier : query_columns->children)
@@ -45,5 +47,24 @@ ASTPtr processColumnTransformers(
 
     return columns_ast;
 }
+}
+
+ASTPtr processColumnTransformers(
+        const String & current_database,
+        const StoragePtr & table,
+        const StorageMetadataPtr & metadata_snapshot,
+        ASTPtr query_columns)
+{
+    return processColumnTransformersImpl(metadata_snapshot->columns, table->getVirtualsList(), query_columns, current_database, table->getStorageID());
+}
+
+ASTPtr processColumnTransformers(
+        const String & current_database,
+        const StorageID & table_id,
+        const ColumnsDescription & columns,
+        ASTPtr query_columns)
+{
+    return processColumnTransformersImpl(columns, {}, query_columns, current_database, table_id);
+}
 
 }
diff --git a/src/Interpreters/processColumnTransformers.h b/src/Interpreters/processColumnTransformers.h
index 8c15cf60a022..7408b09563ca 100644
--- a/src/Interpreters/processColumnTransformers.h
+++ b/src/Interpreters/processColumnTransformers.h
@@ -8,6 +8,8 @@ namespace DB
 
 struct StorageInMemoryMetadata;
 using StorageMetadataPtr = std::shared_ptr<const StorageInMemoryMetadata>;
+class ColumnsDescription;
+struct StorageID;
 
 /// Process column transformers (e.g. * EXCEPT(a)), asterisks and qualified columns.
 ASTPtr processColumnTransformers(
@@ -16,4 +18,10 @@ ASTPtr processColumnTransformers(
         const StorageMetadataPtr & metadata_snapshot,
         ASTPtr query_columns);
 
+ASTPtr processColumnTransformers(
+        const String & current_database,
+        const StorageID & table_id,
+        const ColumnsDescription & columns,
+        ASTPtr query_columns);
+
 }
