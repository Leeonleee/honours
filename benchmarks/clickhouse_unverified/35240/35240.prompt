You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
toIPv6(x) doesn't work the same way as CAST(x AS IPv6)
```
:) select toIPv6(IPv6StringToNum('::1bc0')) format JSON

SELECT toIPv6(IPv6StringToNum('::1bc0'))
FORMAT JSON

Received exception from server (version 19.11.0):
Code: 43. DB::Exception: Received from localhost:9000, ::1. DB::Exception: Illegal type FixedString(16) of argument of function toIPv6. 

0 rows in set. Elapsed: 0.088 sec. 

:) select toIPv6('::1bc0') format JSON                 

SELECT toIPv6('::1bc0')
FORMAT JSON

{
        "meta":
        [
                {
                        "name": "toIPv6('::1bc0')",
                        "type": "IPv6"
                }
        ],

        "data":
        [
                {
                        "toIPv6('::1bc0')": "::1bc0"
                }
        ],

        "rows": 1,

        "statistics":
        {
                "elapsed": 0.000128767,
                "rows_read": 1,
                "bytes_read": 1
        }
}

1 rows in set. Elapsed: 0.001 sec. 

:) select CAST(IPv6StringToNum('::1bc0') AS IPv6) format JSON

SELECT CAST(IPv6StringToNum('::1bc0'), 'IPv6')
FORMAT JSON

{
        "meta":
        [
                {
                        "name": "CAST(IPv6StringToNum('::1bc0'), 'IPv6')",
                        "type": "IPv6"
                }
        ],

        "data":
        [
                {
                        "CAST(IPv6StringToNum('::1bc0'), 'IPv6')": "::1bc0"
                }
        ],

        "rows": 1,

        "statistics":
        {
                "elapsed": 0.000189836,
                "rows_read": 1,
                "bytes_read": 1
        }
}

1 rows in set. Elapsed: 0.001 sec.
```
CAST to IPv6 on empty strings changed between 21.x and 22.x
**Describe the issue**
On empty strings, the behaviour of the function `CAST('', 'IPv6')` changed between the versions 21.x and 22.x

**How to reproduce**
On 21.8.14.5:
```
SELECT CAST('', 'IPv6');
Returns: 
	
::
```

On 22.2.2.1:
```
SELECT CAST('', 'IPv6');
Triggers error: 

Code: 441. DB::Exception: Invalid IPv6 value.: While processing CAST('', 'IPv6'). (CANNOT_PARSE_DOMAIN_VALUE_FROM_STRING) (version 22.2.2.1)

```

**Additional context**
This can prevent some users from upgrading to 22.x when the use of this function is spread across a number of table definitions and environments. The following workaround `CAST(toFixedString('', 16), 'IPv6')` works but the manual task of updating all the occurrences is challenging.

IPv4OrZero or toIPv4OrNull does not exist.
Clickhouse recommend to use IPv4OrZero or toIPv4OrNull functions in error message, but they do not actually exist.


**How to reproduce**
Clickhouse version 21.5

```
SELECT CAST('127.0.0.1', 'IPv4')

Query id: f7ce4a55-0e57-41a8-b771-8fd6be54d41b


0 rows in set. Elapsed: 0.002 sec.

Received exception from server (version 21.5.1):
Code: 6. DB::Exception: Received from localhost:9000. DB::Exception: Cannot parse string '127.0.0.1' as IPv4: syntax error at position 3 (parsed just '127'). Note: there are toIPv4OrZero and toIPv4OrNull functions, which returns zero/NULL instead of throwing exception.: While processing CAST('127.0.0.1', 'IPv4').


localdomain  :) SELECT toIPv4OrZero('127.0.0.1')　;

SELECT toIPv4OrZero('127.0.0.1')

0 rows in set. Elapsed: 0.002 sec.

Received exception from server (version 21.5.1):
Code: 46. DB::Exception: Received from localhost:9000. DB::Exception: Unknown function toIPv4OrZero. Maybe you meant: ['toInt8OrZero','toInt64OrZero']: While processing toIPv4OrZero('127.0.0.1').

localdomain  :) SELECT toIPv4OrNull('127.0.0.1')　;

SELECT toIPv4OrNull('127.0.0.1')

0 rows in set. Elapsed: 0.002 sec.

Received exception from server (version 21.5.1):
Code: 46. DB::Exception: Received from localhost:9000. DB::Exception: Unknown function toIPv4OrNull. Maybe you meant: ['toInt8OrNull','toInt64OrNull']: While processing toIPv4OrNull('127.0.0.1').

localdomain  :) SELECT toIPv4('127.0.0.1')　;

SELECT toIPv4('127.0.0.1')


┌─toIPv4('127.0.0.1')─┐
│ 127.0.0.1           │
└─────────────────────┘

1 rows in set. Elapsed: 0.003 sec.

```
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
