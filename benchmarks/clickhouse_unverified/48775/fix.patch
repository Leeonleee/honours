diff --git a/src/Dictionaries/ExecutableDictionarySource.cpp b/src/Dictionaries/ExecutableDictionarySource.cpp
index 91f914fb7ad2..e40ef07de9ee 100644
--- a/src/Dictionaries/ExecutableDictionarySource.cpp
+++ b/src/Dictionaries/ExecutableDictionarySource.cpp
@@ -114,7 +114,10 @@ QueryPipeline ExecutableDictionarySource::loadAll()
     auto command = configuration.command;
     updateCommandIfNeeded(command, coordinator_configuration.execute_direct, context);
 
-    return QueryPipeline(coordinator->createPipe(command, configuration.command_arguments, sample_block, context));
+    ShellCommandSourceConfiguration command_configuration {
+        .check_exit_code = true,
+    };
+    return QueryPipeline(coordinator->createPipe(command, configuration.command_arguments, {}, sample_block, context, command_configuration));
 }
 
 QueryPipeline ExecutableDictionarySource::loadUpdatedAll()
@@ -148,7 +151,11 @@ QueryPipeline ExecutableDictionarySource::loadUpdatedAll()
     update_time = new_update_time;
 
     LOG_TRACE(log, "loadUpdatedAll {}", command);
-    return QueryPipeline(coordinator->createPipe(command, command_arguments, sample_block, context));
+
+    ShellCommandSourceConfiguration command_configuration {
+        .check_exit_code = true,
+    };
+    return QueryPipeline(coordinator->createPipe(command, command_arguments, {}, sample_block, context, command_configuration));
 }
 
 QueryPipeline ExecutableDictionarySource::loadIds(const std::vector<UInt64> & ids)
@@ -179,7 +186,11 @@ QueryPipeline ExecutableDictionarySource::getStreamForBlock(const Block & block)
     Pipes shell_input_pipes;
     shell_input_pipes.emplace_back(std::move(shell_input_pipe));
 
-    auto pipe = coordinator->createPipe(command, configuration.command_arguments, std::move(shell_input_pipes), sample_block, context);
+    ShellCommandSourceConfiguration command_configuration {
+        .check_exit_code = true,
+    };
+
+    auto pipe = coordinator->createPipe(command, configuration.command_arguments, std::move(shell_input_pipes), sample_block, context, command_configuration);
 
     if (configuration.implicit_key)
         pipe.addTransform(std::make_shared<TransformWithAdditionalColumns>(block, pipe.getHeader()));
diff --git a/src/Dictionaries/ExecutablePoolDictionarySource.cpp b/src/Dictionaries/ExecutablePoolDictionarySource.cpp
index 0cc7696585f6..94685060a466 100644
--- a/src/Dictionaries/ExecutablePoolDictionarySource.cpp
+++ b/src/Dictionaries/ExecutablePoolDictionarySource.cpp
@@ -132,6 +132,7 @@ QueryPipeline ExecutablePoolDictionarySource::getStreamForBlock(const Block & bl
     ShellCommandSourceConfiguration command_configuration;
     command_configuration.read_fixed_number_of_rows = true;
     command_configuration.number_of_rows_to_read = block.rows();
+    command_configuration.check_exit_code = true;
 
     Pipes shell_input_pipes;
     shell_input_pipes.emplace_back(std::move(shell_input_pipe));
diff --git a/src/Processors/Sources/ShellCommandSource.cpp b/src/Processors/Sources/ShellCommandSource.cpp
index 8a7bbcf3261c..ace175f251ce 100644
--- a/src/Processors/Sources/ShellCommandSource.cpp
+++ b/src/Processors/Sources/ShellCommandSource.cpp
@@ -352,7 +352,11 @@ namespace
                 }
 
                 if (!executor->pull(chunk))
+                {
+                    if (configuration.check_exit_code)
+                        command->wait();
                     return {};
+                }
 
                 current_read_rows += chunk.getNumRows();
             }
diff --git a/src/Processors/Sources/ShellCommandSource.h b/src/Processors/Sources/ShellCommandSource.h
index b9afaa345cf6..6dc6781cc4c9 100644
--- a/src/Processors/Sources/ShellCommandSource.h
+++ b/src/Processors/Sources/ShellCommandSource.h
@@ -33,6 +33,9 @@ struct ShellCommandSourceConfiguration
     size_t number_of_rows_to_read = 0;
     /// Max block size
     size_t max_block_size = DEFAULT_BLOCK_SIZE;
+    /// Will throw if the command exited with
+    /// non-zero status code
+    size_t check_exit_code = false;
 };
 
 class ShellCommandSourceCoordinator
