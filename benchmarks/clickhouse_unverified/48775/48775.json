{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 48775,
  "instance_id": "ClickHouse__ClickHouse-48775",
  "issue_numbers": [
    "37572"
  ],
  "base_commit": "6288a177082b9f2a76e13f2da5a1062ea33910a6",
  "patch": "diff --git a/src/Dictionaries/ExecutableDictionarySource.cpp b/src/Dictionaries/ExecutableDictionarySource.cpp\nindex 91f914fb7ad2..e40ef07de9ee 100644\n--- a/src/Dictionaries/ExecutableDictionarySource.cpp\n+++ b/src/Dictionaries/ExecutableDictionarySource.cpp\n@@ -114,7 +114,10 @@ QueryPipeline ExecutableDictionarySource::loadAll()\n     auto command = configuration.command;\n     updateCommandIfNeeded(command, coordinator_configuration.execute_direct, context);\n \n-    return QueryPipeline(coordinator->createPipe(command, configuration.command_arguments, sample_block, context));\n+    ShellCommandSourceConfiguration command_configuration {\n+        .check_exit_code = true,\n+    };\n+    return QueryPipeline(coordinator->createPipe(command, configuration.command_arguments, {}, sample_block, context, command_configuration));\n }\n \n QueryPipeline ExecutableDictionarySource::loadUpdatedAll()\n@@ -148,7 +151,11 @@ QueryPipeline ExecutableDictionarySource::loadUpdatedAll()\n     update_time = new_update_time;\n \n     LOG_TRACE(log, \"loadUpdatedAll {}\", command);\n-    return QueryPipeline(coordinator->createPipe(command, command_arguments, sample_block, context));\n+\n+    ShellCommandSourceConfiguration command_configuration {\n+        .check_exit_code = true,\n+    };\n+    return QueryPipeline(coordinator->createPipe(command, command_arguments, {}, sample_block, context, command_configuration));\n }\n \n QueryPipeline ExecutableDictionarySource::loadIds(const std::vector<UInt64> & ids)\n@@ -179,7 +186,11 @@ QueryPipeline ExecutableDictionarySource::getStreamForBlock(const Block & block)\n     Pipes shell_input_pipes;\n     shell_input_pipes.emplace_back(std::move(shell_input_pipe));\n \n-    auto pipe = coordinator->createPipe(command, configuration.command_arguments, std::move(shell_input_pipes), sample_block, context);\n+    ShellCommandSourceConfiguration command_configuration {\n+        .check_exit_code = true,\n+    };\n+\n+    auto pipe = coordinator->createPipe(command, configuration.command_arguments, std::move(shell_input_pipes), sample_block, context, command_configuration);\n \n     if (configuration.implicit_key)\n         pipe.addTransform(std::make_shared<TransformWithAdditionalColumns>(block, pipe.getHeader()));\ndiff --git a/src/Dictionaries/ExecutablePoolDictionarySource.cpp b/src/Dictionaries/ExecutablePoolDictionarySource.cpp\nindex 0cc7696585f6..94685060a466 100644\n--- a/src/Dictionaries/ExecutablePoolDictionarySource.cpp\n+++ b/src/Dictionaries/ExecutablePoolDictionarySource.cpp\n@@ -132,6 +132,7 @@ QueryPipeline ExecutablePoolDictionarySource::getStreamForBlock(const Block & bl\n     ShellCommandSourceConfiguration command_configuration;\n     command_configuration.read_fixed_number_of_rows = true;\n     command_configuration.number_of_rows_to_read = block.rows();\n+    command_configuration.check_exit_code = true;\n \n     Pipes shell_input_pipes;\n     shell_input_pipes.emplace_back(std::move(shell_input_pipe));\ndiff --git a/src/Processors/Sources/ShellCommandSource.cpp b/src/Processors/Sources/ShellCommandSource.cpp\nindex 8a7bbcf3261c..ace175f251ce 100644\n--- a/src/Processors/Sources/ShellCommandSource.cpp\n+++ b/src/Processors/Sources/ShellCommandSource.cpp\n@@ -352,7 +352,11 @@ namespace\n                 }\n \n                 if (!executor->pull(chunk))\n+                {\n+                    if (configuration.check_exit_code)\n+                        command->wait();\n                     return {};\n+                }\n \n                 current_read_rows += chunk.getNumRows();\n             }\ndiff --git a/src/Processors/Sources/ShellCommandSource.h b/src/Processors/Sources/ShellCommandSource.h\nindex b9afaa345cf6..6dc6781cc4c9 100644\n--- a/src/Processors/Sources/ShellCommandSource.h\n+++ b/src/Processors/Sources/ShellCommandSource.h\n@@ -33,6 +33,9 @@ struct ShellCommandSourceConfiguration\n     size_t number_of_rows_to_read = 0;\n     /// Max block size\n     size_t max_block_size = DEFAULT_BLOCK_SIZE;\n+    /// Will throw if the command exited with\n+    /// non-zero status code\n+    size_t check_exit_code = false;\n };\n \n class ShellCommandSourceCoordinator\n",
  "test_patch": "diff --git a/tests/integration/test_executable_dictionary/dictionaries/executable_missing_strict_check_dictionary.xml b/tests/integration/test_executable_dictionary/dictionaries/executable_missing_strict_check_dictionary.xml\nnew file mode 100644\nindex 000000000000..8562851e69c6\n--- /dev/null\n+++ b/tests/integration/test_executable_dictionary/dictionaries/executable_missing_strict_check_dictionary.xml\n@@ -0,0 +1,29 @@\n+<dictionaries>\n+  <dictionary>\n+    <name>executable_input_missing_executable</name>\n+    <source>\n+      <executable>\n+        <!-- OOPS! executable not found -->\n+        <command>executable_not_found</command>\n+        <format>CSV</format>\n+      </executable>\n+    </source>\n+    <lifetime>\n+      <min>86400</min>\n+      <max>90000</max>\n+    </lifetime>\n+    <layout>\n+      <flat />\n+    </layout>\n+    <structure>\n+        <id>\n+            <name>input</name>\n+        </id>\n+        <attribute>\n+            <name>result</name>\n+            <type>String</type>\n+            <null_value></null_value>\n+        </attribute>\n+    </structure>\n+  </dictionary>\n+</dictionaries>\ndiff --git a/tests/integration/test_executable_dictionary/test.py b/tests/integration/test_executable_dictionary/test.py\nindex 43e6ec0a8000..22f3442bb959 100644\n--- a/tests/integration/test_executable_dictionary/test.py\n+++ b/tests/integration/test_executable_dictionary/test.py\n@@ -217,33 +217,21 @@ def test_executable_implicit_input_argument_python(started_cluster):\n \n def test_executable_input_signalled_python(started_cluster):\n     skip_test_msan(node)\n-    assert (\n-        node.query(\n-            \"SELECT dictGet('executable_input_signalled_python', 'result', toUInt64(1))\"\n-        )\n-        == \"Default result\\n\"\n+    assert node.query_and_get_error(\n+        \"SELECT dictGet('executable_input_signalled_python', 'result', toUInt64(1))\"\n     )\n-    assert (\n-        node.query(\n-            \"SELECT dictGet('executable_input_signalled_pool_python', 'result', toUInt64(1))\"\n-        )\n-        == \"Default result\\n\"\n+    assert node.query_and_get_error(\n+        \"SELECT dictGet('executable_input_signalled_pool_python', 'result', toUInt64(1))\"\n     )\n \n \n def test_executable_implicit_input_signalled_python(started_cluster):\n     skip_test_msan(node)\n-    assert (\n-        node.query(\n-            \"SELECT dictGet('executable_implicit_input_signalled_python', 'result', toUInt64(1))\"\n-        )\n-        == \"Default result\\n\"\n+    assert node.query_and_get_error(\n+        \"SELECT dictGet('executable_implicit_input_signalled_python', 'result', toUInt64(1))\"\n     )\n-    assert (\n-        node.query(\n-            \"SELECT dictGet('executable_implicit_input_signalled_pool_python', 'result', toUInt64(1))\"\n-        )\n-        == \"Default result\\n\"\n+    assert node.query_and_get_error(\n+        \"SELECT dictGet('executable_implicit_input_signalled_pool_python', 'result', toUInt64(1))\"\n     )\n \n \n@@ -482,3 +470,23 @@ def test_executable_source_updated_python(started_cluster):\n         )\n         == \"Value 1 1\\n\"\n     )\n+\n+\n+def test_executable_source_exit_code_check(started_cluster):\n+    skip_test_msan(node)\n+    assert \"DB::Exception\" in node.query_and_get_error(\n+        \"SELECT * FROM dictionary(executable_input_missing_executable) ORDER BY input\"\n+    )\n+    assert \"DB::Exception\" in node.query_and_get_error(\n+        \"SELECT dictGet('executable_input_missing_executable', 'result', toUInt64(1))\"\n+    )\n+\n+    assert (\n+        node.query(\n+            \"SELECT status FROM system.dictionaries WHERE name='executable_input_missing_executable'\"\n+        )\n+        == \"FAILED\\n\"\n+    )\n+    assert \"DB::Exception\" in node.query(\n+        \"SELECT last_exception FROM system.dictionaries WHERE name='executable_input_missing_executable'\"\n+    )\n",
  "problem_statement": "Dictionaries that failed to execute get reported as successfully loaded\n**Describe the unexpected behaviour**\r\nA dictionary that depends on an executable that's missing gets reported as successfully loaded.\r\n\r\n**Relevant version**\r\nObserved in 22.3+\r\n\r\n**How to reproduce**\r\nCreated an integration test for the repro:\r\n[tests/integration/test_dictionaries_broken_config/test.py::test_broken_dict[missing_executable]](https://github.com/ClickHouse/ClickHouse/commit/9d1f8aa684628557a214b16c337ceb27e2fc14cf#diff-aad2ab88d46a3363a74367a643c8978338f5dbdb847864a741119cf7bf4bc584R44)\r\n\r\nTLDR is\r\n\r\n1. Create a dictionary with the following configuration:\r\n```\r\n  <source>\r\n    <executable>\r\n      <!-- OOPS! executable not found -->\r\n      <command>executable_not_found</command>\r\n      <format>CSV</format>\r\n    </executable>\r\n  </source>\r\n```\r\n2. `SELECT status FROM system.dictionaries` will show `LOADED`\r\n\r\n**Expected behavior**\r\n`21.8` behaves differently (more correct IMO):\r\n\r\n `SELECT status FROM system.dictionaries` will show `FAILED`\r\n`dictGet` will result in client receiving an exception `DB::Exception: Child process was exited with return code 127`\r\n\r\n**Additional context**\r\nPossibly related issue: https://github.com/ClickHouse/ClickHouse/issues/37571\r\n\n",
  "hints_text": "",
  "created_at": "2023-04-14T09:34:50Z",
  "modified_files": [
    "src/Dictionaries/ExecutableDictionarySource.cpp",
    "src/Dictionaries/ExecutablePoolDictionarySource.cpp",
    "src/Processors/Sources/ShellCommandSource.cpp",
    "src/Processors/Sources/ShellCommandSource.h"
  ],
  "modified_test_files": [
    "b/tests/integration/test_executable_dictionary/dictionaries/executable_missing_strict_check_dictionary.xml",
    "tests/integration/test_executable_dictionary/test.py"
  ]
}