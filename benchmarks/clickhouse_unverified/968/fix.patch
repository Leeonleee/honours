diff --git a/dbms/src/Common/ConfigProcessor.cpp b/dbms/src/Common/ConfigProcessor.cpp
index e0202b559b9e..4c08df0602c9 100644
--- a/dbms/src/Common/ConfigProcessor.cpp
+++ b/dbms/src/Common/ConfigProcessor.cpp
@@ -11,15 +11,11 @@
 #include <Poco/Util/XMLConfiguration.h>
 
 #include <Common/ZooKeeper/ZooKeeperNodeCache.h>
+#include <Common/StringUtils.h>
 
 using namespace Poco::XML;
 
 
-static bool endsWith(const std::string & s, const std::string & suffix)
-{
-    return s.size() >= suffix.size() && s.substr(s.size() - suffix.size()) == suffix;
-}
-
 /// Extracts from a string the first encountered number consisting of at least two digits.
 static std::string numberFromHost(const std::string & s)
 {
@@ -27,7 +23,7 @@ static std::string numberFromHost(const std::string & s)
     {
         std::string res;
         size_t j = i;
-        while (j < s.size() && isdigit(s[j]))
+        while (j < s.size() && isNumericASCII(s[j]))
             res += s[j++];
         if (res.size() >= 2)
         {
diff --git a/dbms/src/Functions/FunctionsStringSearch.cpp b/dbms/src/Functions/FunctionsStringSearch.cpp
index daf595f74150..dbc64a2cc2fe 100644
--- a/dbms/src/Functions/FunctionsStringSearch.cpp
+++ b/dbms/src/Functions/FunctionsStringSearch.cpp
@@ -587,7 +587,7 @@ struct ReplaceRegexpImpl
         {
             if (s[i] == '\\' && i + 1 < s.size())
             {
-                if (isdigit(s[i + 1])) /// Substitution
+                if (isNumericASCII(s[i + 1])) /// Substitution
                 {
                     if (!now.empty())
                     {
diff --git a/dbms/src/IO/ReadHelpers.cpp b/dbms/src/IO/ReadHelpers.cpp
index d6fc6d34e598..acc3706fa831 100644
--- a/dbms/src/IO/ReadHelpers.cpp
+++ b/dbms/src/IO/ReadHelpers.cpp
@@ -683,7 +683,7 @@ void skipJSONFieldPlain(ReadBuffer & buf, const StringRef & name_of_filed)
         NullSink sink;
         readJSONStringInto(sink, buf);
     }
-    else if (isNumericASCII(*buf.position())) /// skip number
+    else if (isNumericASCII(*buf.position()) || *buf.position() == '-' || *buf.position() == '+') /// skip number
     {
         double v;
         if (!tryReadFloatText(v, buf))
@@ -737,7 +737,7 @@ void skipJSONFieldPlain(ReadBuffer & buf, const StringRef & name_of_filed)
     }
     else
     {
-        throw Exception("Unexpected symbol for key '" + name_of_filed.toString() + "'", ErrorCodes::INCORRECT_DATA);
+        throw Exception("Unexpected symbol '" + std::string(*buf.position(), 1) + "' for key '" + name_of_filed.toString() + "'", ErrorCodes::INCORRECT_DATA);
     }
 }
 
diff --git a/dbms/src/Storages/MergeTree/MergeTreeData.cpp b/dbms/src/Storages/MergeTree/MergeTreeData.cpp
index 91bf9b6407a0..cd4807fb3ab4 100644
--- a/dbms/src/Storages/MergeTree/MergeTreeData.cpp
+++ b/dbms/src/Storages/MergeTree/MergeTreeData.cpp
@@ -1706,7 +1706,7 @@ static std::pair<String, DayNum_t> getMonthNameAndDayNum(const Field & partition
         ? toString(partition.get<UInt64>())
         : partition.safeGet<String>();
 
-    if (month_name.size() != 6 || !std::all_of(month_name.begin(), month_name.end(), isdigit))
+    if (month_name.size() != 6 || !std::all_of(month_name.begin(), month_name.end(), isNumericASCII))
         throw Exception("Invalid partition format: " + month_name + ". Partition should consist of 6 digits: YYYYMM",
             ErrorCodes::INVALID_PARTITION_NAME);
 
diff --git a/dbms/src/TableFunctions/TableFunctionRemote.cpp b/dbms/src/TableFunctions/TableFunctionRemote.cpp
index 20bcb35ecdce..128f6d500364 100644
--- a/dbms/src/TableFunctions/TableFunctionRemote.cpp
+++ b/dbms/src/TableFunctions/TableFunctionRemote.cpp
@@ -52,7 +52,7 @@ static bool parseNumber(const String & description, size_t l, size_t r, size_t &
     res = 0;
     for (size_t pos = l; pos < r; pos ++)
     {
-        if (!isdigit(description[pos]))
+        if (!isNumericASCII(description[pos]))
             return false;
         res = res * 10 + description[pos] - '0';
         if (res > 1e15)
