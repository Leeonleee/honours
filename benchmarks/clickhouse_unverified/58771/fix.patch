diff --git a/src/Dictionaries/PolygonDictionaryUtils.cpp b/src/Dictionaries/PolygonDictionaryUtils.cpp
index c28c7c15aa7b..2af97d3fc6fa 100644
--- a/src/Dictionaries/PolygonDictionaryUtils.cpp
+++ b/src/Dictionaries/PolygonDictionaryUtils.cpp
@@ -267,7 +267,7 @@ bool SlabsPolygonIndex::find(const Point & point, size_t & id) const
     Coord y = point.y();
 
     /** Not in bounding box */
-    if (x < sorted_x[0] || x > sorted_x.back())
+    if (x < sorted_x.front() || x > sorted_x.back())
         return false;
 
     bool found = false;
diff --git a/src/Dictionaries/PolygonDictionaryUtils.h b/src/Dictionaries/PolygonDictionaryUtils.h
index 63d97e9dabd4..5268cb93f780 100644
--- a/src/Dictionaries/PolygonDictionaryUtils.h
+++ b/src/Dictionaries/PolygonDictionaryUtils.h
@@ -157,6 +157,12 @@ class DividedCell : public ICell<ReturnCell>
         auto y_ratio = y * kSplit;
         auto x_bin = static_cast<int>(x_ratio);
         auto y_bin = static_cast<int>(y_ratio);
+        /// In case if we have a lot of values and argument is very close to max_x (max_y) so x_ratio (y_ratio) = 1.
+        if (x_bin == kSplit)
+            --x_bin;
+        /// => x_bin (y_bin) will be 4, which can lead to wrong vector access.
+        if (y_bin == kSplit)
+            --y_bin;
         return children[y_bin + x_bin * kSplit]->find(x_ratio - x_bin, y_ratio - y_bin);
     }
 
