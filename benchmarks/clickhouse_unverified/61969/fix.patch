diff --git a/src/TableFunctions/TableFunctionNumbers.cpp b/src/TableFunctions/TableFunctionNumbers.cpp
index 16f56eab9812..7d8004003748 100644
--- a/src/TableFunctions/TableFunctionNumbers.cpp
+++ b/src/TableFunctions/TableFunctionNumbers.cpp
@@ -71,21 +71,30 @@ StoragePtr TableFunctionNumbers<multithreaded>::executeImpl(
     {
         auto arguments = function->arguments->children;
 
-        if ((arguments.empty()) || (arguments.size() >= 4))
+        if (arguments.size() >= 4)
             throw Exception(
-                ErrorCodes::NUMBER_OF_ARGUMENTS_DOESNT_MATCH, "Table function '{}' requires 'length' or 'offset, length'.", getName());
-
-        UInt64 offset = arguments.size() >= 2 ? evaluateArgument(context, arguments[0]) : 0;
-        UInt64 length = arguments.size() >= 2 ? evaluateArgument(context, arguments[1]) : evaluateArgument(context, arguments[0]);
-        UInt64 step = arguments.size() == 3 ? evaluateArgument(context, arguments[2]) : 1;
-
-        if (!step)
-            throw Exception(ErrorCodes::BAD_ARGUMENTS, "Table function {} requires step to be a positive number", getName());
-
-        auto res = std::make_shared<StorageSystemNumbers>(
-            StorageID(getDatabaseName(), table_name), multithreaded, std::string{"number"}, length, offset, step);
-        res->startup();
-        return res;
+                ErrorCodes::NUMBER_OF_ARGUMENTS_DOESNT_MATCH, "Table function '{}' cannot have more than three params", getName());
+        if (!arguments.empty())
+        {
+            UInt64 offset = arguments.size() >= 2 ? evaluateArgument(context, arguments[0]) : 0;
+            UInt64 length = arguments.size() >= 2 ? evaluateArgument(context, arguments[1]) : evaluateArgument(context, arguments[0]);
+            UInt64 step = arguments.size() == 3 ? evaluateArgument(context, arguments[2]) : 1;
+
+            if (!step)
+                throw Exception(ErrorCodes::BAD_ARGUMENTS, "Table function {} requires step to be a positive number", getName());
+
+            auto res = std::make_shared<StorageSystemNumbers>(
+                StorageID(getDatabaseName(), table_name), multithreaded, std::string{"number"}, length, offset, step);
+            res->startup();
+            return res;
+        }
+        else
+        {
+            auto res = std::make_shared<StorageSystemNumbers>(
+                StorageID(getDatabaseName(), table_name), multithreaded, std::string{"number"});
+            res->startup();
+            return res;
+        }
     }
     throw Exception(ErrorCodes::NUMBER_OF_ARGUMENTS_DOESNT_MATCH, "Table function '{}' requires 'limit' or 'offset, limit'.", getName());
 }
diff --git a/src/TableFunctions/TableFunctionZeros.cpp b/src/TableFunctions/TableFunctionZeros.cpp
index f23b6540959c..5cc02c3e76bf 100644
--- a/src/TableFunctions/TableFunctionZeros.cpp
+++ b/src/TableFunctions/TableFunctionZeros.cpp
@@ -55,15 +55,24 @@ StoragePtr TableFunctionZeros<multithreaded>::executeImpl(const ASTPtr & ast_fun
     {
         auto arguments = function->arguments->children;
 
-        if (arguments.size() != 1)
-            throw Exception(ErrorCodes::NUMBER_OF_ARGUMENTS_DOESNT_MATCH, "Table function '{}' requires 'length'.", getName());
-
-
-        UInt64 length = evaluateArgument(context, arguments[0]);
-
-        auto res = std::make_shared<StorageSystemZeros>(StorageID(getDatabaseName(), table_name), multithreaded, length);
-        res->startup();
-        return res;
+        if (arguments.size() > 1)
+            throw Exception(ErrorCodes::NUMBER_OF_ARGUMENTS_DOESNT_MATCH, "Table function '{}' cannot have more than one params", getName());
+
+        if (!arguments.empty())
+        {
+            UInt64 length = evaluateArgument(context, arguments[0]);
+
+            auto res = std::make_shared<StorageSystemZeros>(StorageID(getDatabaseName(), table_name), multithreaded, length);
+            res->startup();
+            return res;
+        }
+        else
+        {
+            /// zero-argument, the same as system.zeros
+            auto res = std::make_shared<StorageSystemZeros>(StorageID(getDatabaseName(), table_name), multithreaded);
+            res->startup();
+            return res;
+        }
     }
     throw Exception(ErrorCodes::NUMBER_OF_ARGUMENTS_DOESNT_MATCH, "Table function '{}' requires 'limit'.", getName());
 }
