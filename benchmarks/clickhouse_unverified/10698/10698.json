{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 10698,
  "instance_id": "ClickHouse__ClickHouse-10698",
  "issue_numbers": [
    "10674"
  ],
  "base_commit": "f19f4930ce0b6635a5b084a6239084670d665fa5",
  "patch": "diff --git a/src/Interpreters/InterpreterSelectQuery.cpp b/src/Interpreters/InterpreterSelectQuery.cpp\nindex 290bc26856a0..a189ca38753b 100644\n--- a/src/Interpreters/InterpreterSelectQuery.cpp\n+++ b/src/Interpreters/InterpreterSelectQuery.cpp\n@@ -853,14 +853,14 @@ void InterpreterSelectQuery::executeImpl(TPipeline & pipeline, const BlockInputS\n                 {\n                     pipeline.addSimpleTransform([&](const Block & block, QueryPipeline::StreamType stream_type) -> ProcessorPtr\n                     {\n-                        if (stream_type == QueryPipeline::StreamType::Totals)\n-                            return nullptr;\n+                        bool on_totals = stream_type == QueryPipeline::StreamType::Totals;\n \n                         return std::make_shared<FilterTransform>(\n                             block,\n                             expressions.filter_info->actions,\n                             expressions.filter_info->column_name,\n-                            expressions.filter_info->do_remove_column);\n+                            expressions.filter_info->do_remove_column,\n+                            on_totals);\n                     });\n                 }\n                 else\n@@ -1608,9 +1608,10 @@ void InterpreterSelectQuery::executeWhere(Pipeline & pipeline, const ExpressionA\n \n void InterpreterSelectQuery::executeWhere(QueryPipeline & pipeline, const ExpressionActionsPtr & expression, bool remove_filter)\n {\n-    pipeline.addSimpleTransform([&](const Block & block)\n+    pipeline.addSimpleTransform([&](const Block & block, QueryPipeline::StreamType stream_type)\n     {\n-        return std::make_shared<FilterTransform>(block, expression, getSelectQuery().where()->getColumnName(), remove_filter);\n+        bool on_totals = stream_type == QueryPipeline::StreamType::Totals;\n+        return std::make_shared<FilterTransform>(block, expression, getSelectQuery().where()->getColumnName(), remove_filter, on_totals);\n     });\n }\n \n@@ -1869,11 +1870,10 @@ void InterpreterSelectQuery::executeHaving(QueryPipeline & pipeline, const Expre\n {\n     pipeline.addSimpleTransform([&](const Block & header, QueryPipeline::StreamType stream_type) -> ProcessorPtr\n     {\n-        if (stream_type == QueryPipeline::StreamType::Totals)\n-            return nullptr;\n+        bool on_totals = stream_type == QueryPipeline::StreamType::Totals;\n \n         /// TODO: do we need to save filter there?\n-        return std::make_shared<FilterTransform>(header, expression, getSelectQuery().having()->getColumnName(), false);\n+        return std::make_shared<FilterTransform>(header, expression, getSelectQuery().having()->getColumnName(), false, on_totals);\n     });\n }\n \ndiff --git a/src/Processors/Transforms/FilterTransform.cpp b/src/Processors/Transforms/FilterTransform.cpp\nindex 9d4c97183b5f..e35a399a0eec 100644\n--- a/src/Processors/Transforms/FilterTransform.cpp\n+++ b/src/Processors/Transforms/FilterTransform.cpp\n@@ -47,11 +47,13 @@ FilterTransform::FilterTransform(\n     const Block & header_,\n     ExpressionActionsPtr expression_,\n     String filter_column_name_,\n-    bool remove_filter_column_)\n+    bool remove_filter_column_,\n+    bool on_totals_)\n     : ISimpleTransform(header_, transformHeader(header_, expression_, filter_column_name_, remove_filter_column_), true)\n     , expression(std::move(expression_))\n     , filter_column_name(std::move(filter_column_name_))\n     , remove_filter_column(remove_filter_column_)\n+    , on_totals(on_totals_)\n {\n     transformed_header = getInputPort().getHeader();\n     expression->execute(transformed_header);\n@@ -64,11 +66,12 @@ FilterTransform::FilterTransform(\n \n IProcessor::Status FilterTransform::prepare()\n {\n-    if (constant_filter_description.always_false\n-        /// Optimization for `WHERE column in (empty set)`.\n-        /// The result will not change after set was created, so we can skip this check.\n-        /// It is implemented in prepare() stop pipeline before reading from input port.\n-        || (!are_prepared_sets_initialized && expression->checkColumnIsAlwaysFalse(filter_column_name)))\n+    if (!on_totals\n+        && (constant_filter_description.always_false\n+            /// Optimization for `WHERE column in (empty set)`.\n+            /// The result will not change after set was created, so we can skip this check.\n+            /// It is implemented in prepare() stop pipeline before reading from input port.\n+            || (!are_prepared_sets_initialized && expression->checkColumnIsAlwaysFalse(filter_column_name))))\n     {\n         input.close();\n         output.finish();\n@@ -99,12 +102,17 @@ void FilterTransform::transform(Chunk & chunk)\n     {\n         Block block = getInputPort().getHeader().cloneWithColumns(columns);\n         columns.clear();\n-        expression->execute(block);\n+\n+        if (on_totals)\n+            expression->executeOnTotals(block);\n+        else\n+            expression->execute(block);\n+\n         num_rows_before_filtration = block.rows();\n         columns = block.getColumns();\n     }\n \n-    if (constant_filter_description.always_true)\n+    if (constant_filter_description.always_true || on_totals)\n     {\n         chunk.setColumns(std::move(columns), num_rows_before_filtration);\n         removeFilterIfNeed(chunk);\ndiff --git a/src/Processors/Transforms/FilterTransform.h b/src/Processors/Transforms/FilterTransform.h\nindex 2eb321474de3..45ec9da2ea3f 100644\n--- a/src/Processors/Transforms/FilterTransform.h\n+++ b/src/Processors/Transforms/FilterTransform.h\n@@ -16,7 +16,8 @@ class FilterTransform : public ISimpleTransform\n {\n public:\n     FilterTransform(\n-        const Block & header_, ExpressionActionsPtr expression_, String filter_column_name_, bool remove_filter_column_);\n+        const Block & header_, ExpressionActionsPtr expression_, String filter_column_name_,\n+        bool remove_filter_column_, bool on_totals_ = false);\n \n     String getName() const override { return \"FilterTransform\"; }\n \n@@ -29,6 +30,7 @@ class FilterTransform : public ISimpleTransform\n     ExpressionActionsPtr expression;\n     String filter_column_name;\n     bool remove_filter_column;\n+    bool on_totals;\n \n     ConstantFilterDescription constant_filter_description;\n     size_t filter_column_position = 0;\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01272_totals_and_filter_bug.reference b/tests/queries/0_stateless/01272_totals_and_filter_bug.reference\nnew file mode 100644\nindex 000000000000..0db840561fdf\n--- /dev/null\n+++ b/tests/queries/0_stateless/01272_totals_and_filter_bug.reference\n@@ -0,0 +1,7 @@\n+1\t1\n+\n+0\t2\n+-\n+test1\t10\t0\n+\n+\t30\t70\ndiff --git a/tests/queries/0_stateless/01272_totals_and_filter_bug.sql b/tests/queries/0_stateless/01272_totals_and_filter_bug.sql\nnew file mode 100644\nindex 000000000000..a6082ae9f118\n--- /dev/null\n+++ b/tests/queries/0_stateless/01272_totals_and_filter_bug.sql\n@@ -0,0 +1,34 @@\n+select * from (select number, count() from numbers(2) group by number with totals) where number > 0 settings enable_optimize_predicate_expression=0;\n+\n+select '-';\n+\n+CREATE TABLE foo (server_date Date, dimension_1 String, metric_1 UInt32) ENGINE = MergeTree() PARTITION BY toYYYYMM(server_date) ORDER BY (server_date);\n+CREATE TABLE bar (server_date Date, dimension_1 String, metric_2 UInt32) ENGINE = MergeTree() PARTITION BY toYYYYMM(server_date) ORDER BY (server_date);\n+\n+INSERT INTO foo VALUES ('2020-01-01', 'test1', 10), ('2020-01-01', 'test2', 20);\n+INSERT INTO bar VALUES ('2020-01-01', 'test2', 30), ('2020-01-01', 'test3', 40);\n+\n+SELECT \n+    dimension_1, \n+    sum_metric_1, \n+    sum_metric_2\n+FROM \n+(\n+    SELECT \n+        dimension_1, \n+        sum(metric_1) AS sum_metric_1\n+    FROM foo\n+    GROUP BY dimension_1\n+        WITH TOTALS\n+) AS subquery_1\n+ALL FULL OUTER JOIN \n+(\n+    SELECT \n+        dimension_1, \n+        sum(metric_2) AS sum_metric_2\n+    FROM bar\n+    GROUP BY dimension_1\n+        WITH TOTALS\n+) AS subquery_2 USING (dimension_1)\n+WHERE sum_metric_2 < 20\n+ORDER BY dimension_1 ASC;\n",
  "problem_statement": "TOTALS row disappears in some queries\n**Describe the bug**\r\nAfter upgrading from 19.6.2.11 to 20.3.7.46, I've noticed that TOTALS row disappeared from some queries where it was previously available. I could not determine what is causing this, but it looks like a bug (or at least some inconsistency).\r\n\r\n**How to reproduce**\r\n* Which ClickHouse server version to use\r\n\r\n20.3.7.46\r\n\r\n* Which interface to use, if matters\r\n\r\nnative clickhouse-client\r\n\r\n* Non-default settings, if any\r\n\r\ndefault single server setup from docker\r\n\r\n* `CREATE TABLE` statements for all tables involved\r\n\r\n```sql\r\nCREATE TABLE foo (server_date Date, dimension_1 String, metric_1 UInt32) ENGINE = MergeTree() PARTITION BY toYYYYMM(server_date) ORDER BY (server_date);\r\nCREATE TABLE bar (server_date Date, dimension_1 String, metric_2 UInt32) ENGINE = MergeTree() PARTITION BY toYYYYMM(server_date) ORDER BY (server_date);\r\n```\r\n\r\n* Sample data for all these tables, use [clickhouse-obfuscator](https://github.com/ClickHouse/ClickHouse/blob/master/programs/obfuscator/Obfuscator.cpp#L42-L80) if necessary\r\n\r\n```sql\r\nINSERT INTO foo VALUES ('2020-01-01', 'test1', 10), ('2020-01-01', 'test2', 20);\r\nINSERT INTO bar VALUES ('2020-01-01', 'test2', 30), ('2020-01-01', 'test3', 40);\r\n```\r\n\r\n* Queries to run that lead to unexpected result\r\n\r\nQuery without any filters, TOTALS row is available:\r\n\r\n```sql\r\nSELECT \r\n    dimension_1, \r\n    sum_metric_1, \r\n    sum_metric_2\r\nFROM \r\n(\r\n    SELECT \r\n        dimension_1, \r\n        sum(metric_1) AS sum_metric_1\r\n    FROM foo\r\n    GROUP BY dimension_1\r\n        WITH TOTALS\r\n) AS subquery_1\r\nALL FULL OUTER JOIN \r\n(\r\n    SELECT \r\n        dimension_1, \r\n        sum(metric_2) AS sum_metric_2\r\n    FROM bar\r\n    GROUP BY dimension_1\r\n        WITH TOTALS\r\n) AS subquery_2 USING (dimension_1)\r\nORDER BY dimension_1 ASC\r\n\r\n\u250c\u2500dimension_1\u2500\u252c\u2500sum_metric_1\u2500\u252c\u2500sum_metric_2\u2500\u2510\r\n\u2502 test1       \u2502           10 \u2502            0 \u2502\r\n\u2502 test2       \u2502           20 \u2502           30 \u2502\r\n\u2502 test3       \u2502            0 \u2502           40 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\nTotals:\r\n\u250c\u2500dimension_1\u2500\u252c\u2500sum_metric_1\u2500\u252c\u2500sum_metric_2\u2500\u2510\r\n\u2502             \u2502           30 \u2502           70 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n2 rows in set. Elapsed: 0.004 sec. \r\n```\r\n\r\nAnother similar query with `sum_metric_2 > 20` filter, TOTALS row is still available:\r\n\r\n```sql\r\nSELECT \r\n    dimension_1, \r\n    sum_metric_1, \r\n    sum_metric_2\r\nFROM \r\n(\r\n    SELECT \r\n        dimension_1, \r\n        sum(metric_1) AS sum_metric_1\r\n    FROM foo\r\n    GROUP BY dimension_1\r\n        WITH TOTALS\r\n) AS subquery_1\r\nALL FULL OUTER JOIN \r\n(\r\n    SELECT \r\n        dimension_1, \r\n        sum(metric_2) AS sum_metric_2\r\n    FROM bar\r\n    GROUP BY dimension_1\r\n        WITH TOTALS\r\n) AS subquery_2 USING (dimension_1)\r\nWHERE sum_metric_2 > 20\r\nORDER BY dimension_1 ASC\r\n\r\n\u250c\u2500dimension_1\u2500\u252c\u2500sum_metric_1\u2500\u252c\u2500sum_metric_2\u2500\u2510\r\n\u2502 test2       \u2502           20 \u2502           30 \u2502\r\n\u2502 test3       \u2502            0 \u2502           40 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\nTotals:\r\n\u250c\u2500dimension_1\u2500\u252c\u2500sum_metric_1\u2500\u252c\u2500sum_metric_2\u2500\u2510\r\n\u2502             \u2502           30 \u2502           70 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n2 rows in set. Elapsed: 0.004 sec. \r\n```\r\n\r\nAnd finally the exact same query, but with a `sum_metric_2 < 20` filter, TOTALS row disappears :confused: \r\n\r\n```sql\r\nSELECT \r\n    dimension_1, \r\n    sum_metric_1, \r\n    sum_metric_2\r\nFROM \r\n(\r\n    SELECT \r\n        dimension_1, \r\n        sum(metric_1) AS sum_metric_1\r\n    FROM foo\r\n    GROUP BY dimension_1\r\n        WITH TOTALS\r\n) AS subquery_1\r\nALL FULL OUTER JOIN \r\n(\r\n    SELECT \r\n        dimension_1, \r\n        sum(metric_2) AS sum_metric_2\r\n    FROM bar\r\n    GROUP BY dimension_1\r\n        WITH TOTALS\r\n) AS subquery_2 USING (dimension_1)\r\nWHERE sum_metric_2 < 20\r\nORDER BY dimension_1 ASC\r\n\r\n\u250c\u2500dimension_1\u2500\u252c\u2500sum_metric_1\u2500\u252c\u2500sum_metric_2\u2500\u2510\r\n\u2502 test1       \u2502           10 \u2502            0 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n1 rows in set. Elapsed: 0.004 sec.\r\n```\r\n\r\nIs there some kind of workaround to get the totals row in the last query?\n",
  "hints_text": "20.3.7 already has some related patch https://github.com/ClickHouse/ClickHouse/commit/e8cec7688c60330da9bbe5520cf7c66eac9d44e8\r\nLooks like it's not enough.",
  "created_at": "2020-05-06T12:37:17Z",
  "modified_files": [
    "src/Interpreters/InterpreterSelectQuery.cpp",
    "src/Processors/Transforms/FilterTransform.cpp",
    "src/Processors/Transforms/FilterTransform.h"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/01272_totals_and_filter_bug.reference",
    "b/tests/queries/0_stateless/01272_totals_and_filter_bug.sql"
  ]
}