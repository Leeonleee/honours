{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 58954,
  "instance_id": "ClickHouse__ClickHouse-58954",
  "issue_numbers": [
    "58822"
  ],
  "base_commit": "ab4d0d293a0b80699b2b6085c807a8322e8ef28d",
  "patch": "diff --git a/src/DataTypes/DataTypesNumber.cpp b/src/DataTypes/DataTypesNumber.cpp\nindex 1c0c418411bd..e472021e756a 100644\n--- a/src/DataTypes/DataTypesNumber.cpp\n+++ b/src/DataTypes/DataTypesNumber.cpp\n@@ -87,6 +87,7 @@ void registerDataTypeNumbers(DataTypeFactory & factory)\n     factory.registerAlias(\"MEDIUMINT SIGNED\", \"Int32\", DataTypeFactory::CaseInsensitive);\n     factory.registerAlias(\"INT SIGNED\", \"Int32\", DataTypeFactory::CaseInsensitive);\n     factory.registerAlias(\"INTEGER SIGNED\", \"Int32\", DataTypeFactory::CaseInsensitive);\n+    factory.registerAlias(\"SIGNED\", \"Int64\", DataTypeFactory::CaseInsensitive);\n     factory.registerAlias(\"BIGINT SIGNED\", \"Int64\", DataTypeFactory::CaseInsensitive);\n     factory.registerAlias(\"TINYINT UNSIGNED\", \"UInt8\", DataTypeFactory::CaseInsensitive);\n     factory.registerAlias(\"INT1 UNSIGNED\", \"UInt8\", DataTypeFactory::CaseInsensitive);\n@@ -94,9 +95,10 @@ void registerDataTypeNumbers(DataTypeFactory & factory)\n     factory.registerAlias(\"MEDIUMINT UNSIGNED\", \"UInt32\", DataTypeFactory::CaseInsensitive);\n     factory.registerAlias(\"INT UNSIGNED\", \"UInt32\", DataTypeFactory::CaseInsensitive);\n     factory.registerAlias(\"INTEGER UNSIGNED\", \"UInt32\", DataTypeFactory::CaseInsensitive);\n+    factory.registerAlias(\"UNSIGNED\", \"UInt64\", DataTypeFactory::CaseInsensitive);\n     factory.registerAlias(\"BIGINT UNSIGNED\", \"UInt64\", DataTypeFactory::CaseInsensitive);\n-    factory.registerAlias(\"BIT\", \"UInt64\", DataTypeFactory::CaseInsensitive);  /// MySQL\n-    factory.registerAlias(\"SET\", \"UInt64\", DataTypeFactory::CaseInsensitive);  /// MySQL\n+    factory.registerAlias(\"BIT\", \"UInt64\", DataTypeFactory::CaseInsensitive);\n+    factory.registerAlias(\"SET\", \"UInt64\", DataTypeFactory::CaseInsensitive);\n     factory.registerAlias(\"YEAR\", \"UInt16\", DataTypeFactory::CaseInsensitive);\n     factory.registerAlias(\"TIME\", \"Int64\", DataTypeFactory::CaseInsensitive);\n }\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02969_mysql_cast_type_aliases.reference b/tests/queries/0_stateless/02969_mysql_cast_type_aliases.reference\nnew file mode 100644\nindex 000000000000..5555c9185008\n--- /dev/null\n+++ b/tests/queries/0_stateless/02969_mysql_cast_type_aliases.reference\n@@ -0,0 +1,28 @@\n+-- Uppercase tests\n+Binary(N)\tfoo\tFixedString(3)\n+Char\t44\tString\n+Date\t2021-02-03\tDate\n+DateTime\t2021-02-03 12:01:02\tDateTime\n+Decimal\t45\tDecimal(10, 0)\n+Decimal(M)\t46\tDecimal(4, 0)\n+Decimal(M, D)\t47.21\tDecimal(4, 2)\n+Double\t48.11\tFloat64\n+JSON\t{\"foo\":\"bar\"}\tObject(\\'json\\')\n+Real\t49.22\tFloat32\n+Signed\t50\tInt64\n+Unsigned\t52\tUInt64\n+Year\t2007\tUInt16\n+-- Lowercase tests\n+Binary(N)\tfoo\tFixedString(3)\n+Char\t44\tString\n+Date\t2021-02-03\tDate\n+DateTime\t2021-02-03 12:01:02\tDateTime\n+Decimal\t45\tDecimal(10, 0)\n+Decimal(M)\t46\tDecimal(4, 0)\n+Decimal(M, D)\t47.21\tDecimal(4, 2)\n+Double\t48.11\tFloat64\n+JSON\t{\"foo\":\"bar\"}\tObject(\\'json\\')\n+Real\t49.22\tFloat32\n+Signed\t50\tInt64\n+Unsigned\t52\tUInt64\n+Year\t2007\tUInt16\ndiff --git a/tests/queries/0_stateless/02969_mysql_cast_type_aliases.sql b/tests/queries/0_stateless/02969_mysql_cast_type_aliases.sql\nnew file mode 100644\nindex 000000000000..7b5735cdebc0\n--- /dev/null\n+++ b/tests/queries/0_stateless/02969_mysql_cast_type_aliases.sql\n@@ -0,0 +1,46 @@\n+-- See https://dev.mysql.com/doc/refman/8.0/en/cast-functions.html#function_cast\n+-- Tests are in order of the type appearance in the docs\n+\n+SET allow_experimental_object_type = 1;\n+\n+SELECT '-- Uppercase tests';\n+-- Not supported as it is translated to FixedString without arguments\n+-- SELECT 'Binary' AS mysql_type, CAST('' AS BINARY) AS result, toTypeName(result) AS native_type;\n+SELECT 'Binary(N)' AS mysql_type, CAST('foo' AS BINARY(3)) AS result, toTypeName(result) AS native_type;\n+SELECT 'Char' AS mysql_type, CAST(44 AS CHAR) AS result, toTypeName(result) AS native_type;\n+SELECT 'Date' AS mysql_type, CAST('2021-02-03' AS DATE) AS result, toTypeName(result) AS native_type;\n+SELECT 'DateTime' AS mysql_type, CAST('2021-02-03 12:01:02' AS DATETIME) AS result, toTypeName(result) AS native_type;\n+SELECT 'Decimal' AS mysql_type, CAST(45.1 AS DECIMAL) AS result, toTypeName(result) AS native_type;\n+SELECT 'Decimal(M)' AS mysql_type, CAST(46.2 AS DECIMAL(4)) AS result, toTypeName(result) AS native_type;\n+SELECT 'Decimal(M, D)' AS mysql_type, CAST(47.21 AS DECIMAL(4, 2)) AS result, toTypeName(result) AS native_type;\n+SELECT 'Double' AS mysql_type, CAST(48.11 AS DOUBLE) AS result, toTypeName(result) AS native_type;\n+SELECT 'JSON' AS mysql_type, CAST('{\\\"foo\\\":\\\"bar\\\"}' AS JSON) AS result, toTypeName(result) AS native_type;\n+SELECT 'Real' AS mysql_type, CAST(49.22 AS REAL) AS result, toTypeName(result) AS native_type;\n+SELECT 'Signed' AS mysql_type, CAST(50 AS SIGNED) AS result, toTypeName(result) AS native_type;\n+SELECT 'Unsigned' AS mysql_type, CAST(52 AS UNSIGNED) AS result, toTypeName(result) AS native_type;\n+-- Could be added as an alias, but SIGNED INTEGER in CAST context means UInt64, \n+-- while INTEGER SIGNED as a column definition means UInt32.\n+-- SELECT 'Signed integer' AS mysql_type, CAST(51 AS SIGNED INTEGER) AS result, toTypeName(result) AS native_type;\n+-- SELECT 'Unsigned integer' AS mysql_type, CAST(53 AS UNSIGNED INTEGER) AS result, toTypeName(result) AS native_type;\n+SELECT 'Year' AS mysql_type, CAST(2007 AS YEAR) AS result, toTypeName(result) AS native_type;\n+-- Currently, expects UInt64 as an argument\n+-- SELECT 'Time' AS mysql_type, CAST('12:45' AS TIME) AS result, toTypeName(result) AS native_type;\n+\n+SELECT '-- Lowercase tests';\n+-- select 'Binary' as mysql_type, cast('' as binary) as result, toTypeName(result) as native_type;\n+select 'Binary(N)' as mysql_type, cast('foo' as binary(3)) as result, toTypeName(result) as native_type;\n+select 'Char' as mysql_type, cast(44 as char) as result, toTypeName(result) as native_type;\n+select 'Date' as mysql_type, cast('2021-02-03' as date) as result, toTypeName(result) as native_type;\n+select 'DateTime' as mysql_type, cast('2021-02-03 12:01:02' as datetime) as result, toTypeName(result) as native_type;\n+select 'Decimal' as mysql_type, cast(45.1 as decimal) as result, toTypeName(result) as native_type;\n+select 'Decimal(M)' as mysql_type, cast(46.2 as decimal(4)) as result, toTypeName(result) as native_type;\n+select 'Decimal(M, D)' as mysql_type, cast(47.21 as decimal(4, 2)) as result, toTypeName(result) as native_type;\n+select 'Double' as mysql_type, cast(48.11 as double) as result, toTypeName(result) as native_type;\n+select 'JSON' as mysql_type, cast('{\\\"foo\\\":\\\"bar\\\"}' as json) as result, toTypeName(result) as native_type;\n+select 'Real' as mysql_type, cast(49.22 as real) as result, toTypeName(result) as native_type;\n+select 'Signed' as mysql_type, cast(50 as signed) as result, toTypeName(result) as native_type;\n+select 'Unsigned' as mysql_type, cast(52 as unsigned) as result, toTypeName(result) as native_type;\n+-- select 'Signed integer' as mysql_type, cast(51 as signed integer) as result, toTypeName(result) as native_type;\n+-- select 'Unsigned integer' as mysql_type, cast(53 as unsigned integer) as result, toTypeName(result) as native_type;\n+select 'Year' as mysql_type, cast(2007 as year) as result, toTypeName(result) as native_type;\n+-- select 'Time' as mysql_type, cast('12:45' as time) as result, toTypeName(result) as native_type;\n",
  "problem_statement": "MySQL compatibility: support CAST AS SIGNED\n**Use case**\r\n\r\nCertain queries generated by Looker Studio do the following:\r\n\r\n```sql\r\nSELECT CAST(DATE_FORMAT(CAST(DATE_FORMAT(time, '%Y-%m-%d %H:%i:%s') AS DATETIME), '%w') AS SIGNED) AS qt_duv6kvlmdd,\r\n       COUNT(1)                                                                                    AS qt_jxd1bulmdd,\r\n       author\r\nFROM commits\r\nGROUP BY qt_duv6kvlmdd, author;\r\n```\r\n\r\nThis example uses the [commits](https://clickhouse.com/docs/en/getting-started/example-datasets/github) dataset.\r\n\r\nAs of 23.12, the result is an error:\r\n\r\n```\r\nCode: 50. DB::Exception: Received from localhost:9000. \r\nDB::Exception: Unknown data type family: SIGNED: \r\nWhile processing CAST(DATE_FORMAT(CAST(DATE_FORMAT(time, '%Y-%m-%d %H:%i:%s'), 'DATETIME'), '%w'), 'SIGNED') AS qt_duv6kvlmdd. \r\n(UNKNOWN_TYPE)\r\n```\r\n\r\n**Describe the solution you'd like**\r\n\r\nNo errors; `CAST x AS SIGNED` produces an Int64, `CAST x AS UNSIGNED` produces a UInt64.\r\nSee https://dev.mysql.com/doc/refman/8.0/en/cast-functions.html#function_cast for more details.\n",
  "hints_text": "The solution is to add an type aliases. Similar ones exist (like `INTEGER UNSIGNED`\n@Algunenano, thanks, I will look into it \ud83d\udc4d \r\n",
  "created_at": "2024-01-18T16:33:59Z",
  "modified_files": [
    "src/DataTypes/DataTypesNumber.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02969_mysql_cast_type_aliases.reference",
    "b/tests/queries/0_stateless/02969_mysql_cast_type_aliases.sql"
  ]
}