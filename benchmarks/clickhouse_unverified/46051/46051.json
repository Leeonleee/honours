{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 46051,
  "instance_id": "ClickHouse__ClickHouse-46051",
  "issue_numbers": [
    "30642"
  ],
  "base_commit": "376eeeb8422c8e356c2f0d9fb894cb7c492dba99",
  "patch": "diff --git a/docs/en/operations/settings/settings.md b/docs/en/operations/settings/settings.md\nindex 0dee95e1aa70..de3cc00e4c94 100644\n--- a/docs/en/operations/settings/settings.md\n+++ b/docs/en/operations/settings/settings.md\n@@ -4578,6 +4578,17 @@ Type: Int64\n \n Default: 0\n \n+## rewrite_count_distinct_if_with_count_distinct_implementation\n+\n+Allows you to rewrite `countDistcintIf` with [count_distinct_implementation](#settings-count_distinct_implementation) setting.\n+\n+Possible values:\n+\n+- true \u2014 Allow.\n+- false \u2014 Disallow.\n+\n+Default value: `false`.\n+\n ## precise_float_parsing {#precise_float_parsing}\n \n Switches [Float32/Float64](../../sql-reference/data-types/float.md) parsing algorithms:\ndiff --git a/src/Core/Settings.h b/src/Core/Settings.h\nindex ed210a02c92d..77802bebc4c1 100644\n--- a/src/Core/Settings.h\n+++ b/src/Core/Settings.h\n@@ -536,6 +536,7 @@ class IColumn;\n     M(Bool, optimize_move_functions_out_of_any, false, \"Move functions out of aggregate functions 'any', 'anyLast'.\", 0) \\\n     M(Bool, optimize_normalize_count_variants, true, \"Rewrite aggregate functions that semantically equals to count() as count().\", 0) \\\n     M(Bool, optimize_injective_functions_inside_uniq, true, \"Delete injective functions of one argument inside uniq*() functions.\", 0) \\\n+    M(Bool, rewrite_count_distinct_if_with_count_distinct_implementation, false, \"Rewrite countDistinctIf with count_distinct_implementation configuration\", 0) \\\n     M(Bool, convert_query_to_cnf, false, \"Convert SELECT query to CNF\", 0) \\\n     M(Bool, optimize_or_like_chain, false, \"Optimize multiple OR LIKE into multiMatchAny. This optimization should not be enabled by default, because it defies index analysis in some cases.\", 0) \\\n     M(Bool, optimize_arithmetic_operations_in_aggregate_functions, true, \"Move arithmetic operations out of aggregation functions\", 0) \\\ndiff --git a/src/Core/SettingsChangesHistory.h b/src/Core/SettingsChangesHistory.h\nindex 70b702f1b330..dcb67165addf 100644\n--- a/src/Core/SettingsChangesHistory.h\n+++ b/src/Core/SettingsChangesHistory.h\n@@ -80,6 +80,7 @@ namespace SettingsChangesHistory\n /// It's used to implement `compatibility` setting (see https://github.com/ClickHouse/ClickHouse/issues/35972)\n static std::map<ClickHouseVersion, SettingsChangesHistory::SettingsChanges> settings_changes_history =\n {\n+    {\"23.8\", {{\"rewrite_count_distinct_if_with_count_distinct_implementation\", false, true, \"Rewrite countDistinctIf with count_distinct_implementation configuration\"}}},\n     {\"23.7\", {{\"function_sleep_max_microseconds_per_block\", 0, 3000000, \"In previous versions, the maximum sleep time of 3 seconds was applied only for `sleep`, but not for `sleepEachRow` function. In the new version, we introduce this setting. If you set compatibility with the previous versions, we will disable the limit altogether.\"}}},\n     {\"23.6\", {{\"http_send_timeout\", 180, 30, \"3 minutes seems crazy long. Note that this is timeout for a single network write call, not for the whole upload operation.\"},\n               {\"http_receive_timeout\", 180, 30, \"See http_send_timeout.\"}}},\ndiff --git a/src/Interpreters/TreeRewriter.cpp b/src/Interpreters/TreeRewriter.cpp\nindex 246843d39c28..5b384a5f74b8 100644\n--- a/src/Interpreters/TreeRewriter.cpp\n+++ b/src/Interpreters/TreeRewriter.cpp\n@@ -110,6 +110,9 @@ using CustomizeCountDistinctVisitor = InDepthNodeVisitor<OneTypeMatcher<Customiz\n char countifdistinct[] = \"countifdistinct\";\n using CustomizeCountIfDistinctVisitor = InDepthNodeVisitor<OneTypeMatcher<CustomizeFunctionsData<countifdistinct>>, true>;\n \n+char countdistinctif[] = \"countdistinctif\";\n+using CustomizeCountDistinctIfVisitor = InDepthNodeVisitor<OneTypeMatcher<CustomizeFunctionsData<countdistinctif>>, true>;\n+\n char in[] = \"in\";\n using CustomizeInVisitor = InDepthNodeVisitor<OneTypeMatcher<CustomizeFunctionsData<in>>, true>;\n \n@@ -1368,6 +1371,12 @@ void TreeRewriter::normalize(\n     CustomizeIfDistinctVisitor::Data data_distinct_if{\"DistinctIf\"};\n     CustomizeIfDistinctVisitor(data_distinct_if).visit(query);\n \n+    if (settings.rewrite_count_distinct_if_with_count_distinct_implementation)\n+    {\n+        CustomizeCountDistinctIfVisitor::Data data_count_distinct_if{settings.count_distinct_implementation.toString() + \"If\"};\n+        CustomizeCountDistinctIfVisitor(data_count_distinct_if).visit(query);\n+    }\n+\n     ExistsExpressionVisitor::Data exists;\n     ExistsExpressionVisitor(exists).visit(query);\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02554_rewrite_count_distinct_if_with_count_distinct_implementation.reference b/tests/queries/0_stateless/02554_rewrite_count_distinct_if_with_count_distinct_implementation.reference\nnew file mode 100644\nindex 000000000000..efc3cd99060a\n--- /dev/null\n+++ b/tests/queries/0_stateless/02554_rewrite_count_distinct_if_with_count_distinct_implementation.reference\n@@ -0,0 +1,6 @@\n+2\n+SELECT countDistinctIf(number % 10, (number % 5) = 2)\n+FROM numbers(1000)\n+2\n+SELECT uniqExactIf(number % 10, (number % 5) = 2)\n+FROM numbers(1000)\ndiff --git a/tests/queries/0_stateless/02554_rewrite_count_distinct_if_with_count_distinct_implementation.sql b/tests/queries/0_stateless/02554_rewrite_count_distinct_if_with_count_distinct_implementation.sql\nnew file mode 100644\nindex 000000000000..a81f53c1ef6d\n--- /dev/null\n+++ b/tests/queries/0_stateless/02554_rewrite_count_distinct_if_with_count_distinct_implementation.sql\n@@ -0,0 +1,8 @@\n+-- Tags: no-parallel\n+SELECT countDistinctIf(number % 10, number % 5 = 2) FROM numbers(1000);\n+EXPLAIN SYNTAX SELECT countDistinctIf(number % 10, number % 5 = 2) FROM numbers(1000);\n+\n+-- disable by default\n+SET rewrite_count_distinct_if_with_count_distinct_implementation = 1;\n+SELECT countDistinctIf(number % 10, number % 5 = 2) FROM numbers(1000);\n+EXPLAIN SYNTAX SELECT countDistinctIf(number % 10, number % 5 = 2) FROM numbers(1000);\n",
  "problem_statement": "countDistinctIf with Date use much more memory than UInt16\n**Describe the situation**\r\ncountDistinctIf with Date datatype use more memory than UInt16\r\n\r\n**How to reproduce**\r\nClickHouse version 21.11\r\n\r\n```\r\nSELECT countDistinctIf(materialize(toUInt16(today())), 1)\r\nFROM numbers_mt(100000000)\r\nGROUP BY number % 1000000\r\nFORMAT `Null`\r\n\r\nPeak memory usage (for query): 1.51 GiB.\r\n\r\n0 rows in set. Elapsed: 2.465 sec. Processed 100.00 million rows, 800.00 MB (40.57 million rows/s., 324.57 MB/s.)\r\n\r\nSELECT countDistinctIf(materialize(today()), 1)\r\nFROM numbers_mt(100000000)\r\nGROUP BY number % 1000000\r\nFORMAT `Null`\r\n\r\nPeak memory usage (for query): 4.51 GiB.\r\n\r\n0 rows in set. Elapsed: 4.455 sec. Processed 100.00 million rows, 800.00 MB (22.44 million rows/s., 179.56 MB/s.)\r\n```\r\n\r\n\r\n**Expected performance**\r\nSpeed and memory usage should be  the same as for UInt16\r\n\n",
  "hints_text": "Hello, it's because ClickHouse did not rewrite `countDistinctIf` into `uniqExactIf`.\r\n\r\nYou can try:\r\n\r\n1. SELECT uniqExactIf(materialize(today()), 1) FROM numbers_mt(100000000) GROUP BY number % 1000000 FORMAT `Null`\r\n\r\n2. SELECT countIfDistinct(materialize(today()), 1) FROM numbers_mt(100000000) GROUP BY number % 1000000 FORMAT `Null`\r\n\r\n\r\n\r\nOr create a patch to improve this.",
  "created_at": "2023-02-05T11:36:39Z",
  "modified_files": [
    "docs/en/operations/settings/settings.md",
    "src/Core/Settings.h",
    "src/Core/SettingsChangesHistory.h",
    "src/Interpreters/TreeRewriter.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02554_rewrite_count_distinct_if_with_count_distinct_implementation.reference",
    "b/tests/queries/0_stateless/02554_rewrite_count_distinct_if_with_count_distinct_implementation.sql"
  ]
}