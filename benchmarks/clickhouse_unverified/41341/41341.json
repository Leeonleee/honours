{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 41341,
  "instance_id": "ClickHouse__ClickHouse-41341",
  "issue_numbers": [
    "40913"
  ],
  "base_commit": "a02fede0e84a28d1462533af741d23379bad408f",
  "patch": "diff --git a/programs/server/config.xml b/programs/server/config.xml\nindex 448203a72ec5..ab79e7a2e4cf 100644\n--- a/programs/server/config.xml\n+++ b/programs/server/config.xml\n@@ -462,8 +462,9 @@\n     <tmp_path>/var/lib/clickhouse/tmp/</tmp_path>\n \n     <!-- Disable AuthType plaintext_password and no_password for ACL. -->\n-    <!-- <allow_plaintext_password>0</allow_plaintext_password> -->\n-    <!-- <allow_no_password>0</allow_no_password> -->`\n+    <allow_plaintext_password>1</allow_plaintext_password>\n+    <allow_no_password>1</allow_no_password>\n+    <allow_implicit_no_password>1</allow_implicit_no_password>\n \n     <!-- Policy from the <storage_configuration> for the temporary files.\n          If not set <tmp_path> is used, otherwise <tmp_path> is ignored.\ndiff --git a/src/Access/AccessControl.cpp b/src/Access/AccessControl.cpp\nindex e7dfdc976b92..04642df6f404 100644\n--- a/src/Access/AccessControl.cpp\n+++ b/src/Access/AccessControl.cpp\n@@ -162,6 +162,7 @@ void AccessControl::setUpFromMainConfig(const Poco::Util::AbstractConfiguration\n     if (config_.has(\"custom_settings_prefixes\"))\n         setCustomSettingsPrefixes(config_.getString(\"custom_settings_prefixes\"));\n \n+    setImplicitNoPasswordAllowed(config_.getBool(\"allow_implicit_no_password\", true));\n     setNoPasswordAllowed(config_.getBool(\"allow_no_password\", true));\n     setPlaintextPasswordAllowed(config_.getBool(\"allow_plaintext_password\", true));\n \n@@ -499,6 +500,15 @@ void AccessControl::checkSettingNameIsAllowed(const std::string_view setting_nam\n     custom_settings_prefixes->checkSettingNameIsAllowed(setting_name);\n }\n \n+void AccessControl::setImplicitNoPasswordAllowed(bool allow_implicit_no_password_)\n+{\n+    allow_implicit_no_password = allow_implicit_no_password_;\n+}\n+\n+bool AccessControl::isImplicitNoPasswordAllowed() const\n+{\n+    return allow_implicit_no_password;\n+}\n \n void AccessControl::setNoPasswordAllowed(bool allow_no_password_)\n {\ndiff --git a/src/Access/AccessControl.h b/src/Access/AccessControl.h\nindex bf42941f5019..607e01191781 100644\n--- a/src/Access/AccessControl.h\n+++ b/src/Access/AccessControl.h\n@@ -134,6 +134,11 @@ class AccessControl : public MultipleAccessStorage\n     bool isSettingNameAllowed(const std::string_view name) const;\n     void checkSettingNameIsAllowed(const std::string_view name) const;\n \n+    /// Allows implicit user creation without password (by default it's allowed).\n+    /// In other words, allow 'CREATE USER' queries without 'IDENTIFIED WITH' clause.\n+    void setImplicitNoPasswordAllowed(const bool allow_implicit_no_password_);\n+    bool isImplicitNoPasswordAllowed() const;\n+\n     /// Allows users without password (by default it's allowed).\n     void setNoPasswordAllowed(const bool allow_no_password_);\n     bool isNoPasswordAllowed() const;\n@@ -222,6 +227,7 @@ class AccessControl : public MultipleAccessStorage\n     std::unique_ptr<AccessChangesNotifier> changes_notifier;\n     std::atomic_bool allow_plaintext_password = true;\n     std::atomic_bool allow_no_password = true;\n+    std::atomic_bool allow_implicit_no_password = true;\n     std::atomic_bool users_without_row_policies_can_read_rows = false;\n     std::atomic_bool on_cluster_queries_require_cluster_grant = false;\n     std::atomic_bool select_from_system_db_requires_grant = false;\ndiff --git a/src/Interpreters/Access/InterpreterCreateUserQuery.cpp b/src/Interpreters/Access/InterpreterCreateUserQuery.cpp\nindex 26f359a43129..c36dd1c98d60 100644\n--- a/src/Interpreters/Access/InterpreterCreateUserQuery.cpp\n+++ b/src/Interpreters/Access/InterpreterCreateUserQuery.cpp\n@@ -100,9 +100,14 @@ BlockIO InterpreterCreateUserQuery::execute()\n     auto & access_control = getContext()->getAccessControl();\n     auto access = getContext()->getAccess();\n     access->checkAccess(query.alter ? AccessType::ALTER_USER : AccessType::CREATE_USER);\n+    bool implicit_no_password_allowed = access_control.isImplicitNoPasswordAllowed();\n     bool no_password_allowed = access_control.isNoPasswordAllowed();\n     bool plaintext_password_allowed = access_control.isPlaintextPasswordAllowed();\n \n+     if (!query.attach && !query.alter && !query.auth_data && !implicit_no_password_allowed)\n+        throw Exception(ErrorCodes::BAD_ARGUMENTS,\n+            \"Authentication type NO_PASSWORD must be explicitly specified, check the setting allow_implicit_no_password in the server configuration\");\n+\n     std::optional<RolesOrUsersSet> default_roles_from_query;\n     if (query.default_roles)\n     {\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02422_allow_implicit_no_password.config.xml b/tests/queries/0_stateless/02422_allow_implicit_no_password.config.xml\nnew file mode 100644\nindex 000000000000..69153f072973\n--- /dev/null\n+++ b/tests/queries/0_stateless/02422_allow_implicit_no_password.config.xml\n@@ -0,0 +1,22 @@\n+<clickhouse>\n+    <logger>\n+        <level>trace</level>\n+        <console>true</console>\n+    </logger>\n+\n+    <tcp_port>9000</tcp_port>\n+    <allow_implicit_no_password>0</allow_implicit_no_password>\n+    <path>.</path>\n+    <mark_cache_size>0</mark_cache_size>\n+   <!-- Sources to read users, roles, access rights, profiles of settings, quotas. -->\n+    <user_directories>\n+\t    <users_xml>\n+            <!-- Path to configuration file with predefined users. -->\n+            <path>users.xml</path>\n+        </users_xml>\n+        <local_directory>\n+            <!-- Path to folder where users created by SQL commands are stored. -->\n+\t<path>./</path>\n+        </local_directory>\n+    </user_directories>\n+</clickhouse>\ndiff --git a/tests/queries/0_stateless/02422_allow_implicit_no_password.reference b/tests/queries/0_stateless/02422_allow_implicit_no_password.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/02422_allow_implicit_no_password.sh b/tests/queries/0_stateless/02422_allow_implicit_no_password.sh\nnew file mode 100755\nindex 000000000000..013c367e0797\n--- /dev/null\n+++ b/tests/queries/0_stateless/02422_allow_implicit_no_password.sh\n@@ -0,0 +1,85 @@\n+#!/usr/bin/env bash\n+# Tags: no-tsan, no-asan, no-ubsan, no-msan, no-parallel, no-fasttest\n+# Tag no-tsan: requires jemalloc to track small allocations\n+# Tag no-asan: requires jemalloc to track small allocations\n+# Tag no-ubsan: requires jemalloc to track small allocations\n+# Tag no-msan: requires jemalloc to track small allocations\n+\n+CURDIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+# shellcheck source=../shell_config.sh\n+. \"$CURDIR\"/../shell_config.sh\n+\n+cp /etc/clickhouse-server/users.xml \"$CURDIR\"/users.xml\n+sed -i 's/<password><\\/password>/<password_sha256_hex>c64c5e4e53ea1a9f1427d2713b3a22bbebe8940bc807adaf654744b1568c70ab<\\/password_sha256_hex>/g' \"$CURDIR\"/users.xml\n+ sed -i 's/<!-- <access_management>1<\\/access_management> -->/<access_management>1<\\/access_management>/g' \"$CURDIR\"/users.xml\n+\n+server_opts=(\n+    \"--config-file=$CURDIR/$(basename \"${BASH_SOURCE[0]}\" .sh).config.xml\"\n+    \"--\"\n+    # to avoid multiple listen sockets (complexity for port discovering)\n+    \"--listen_host=127.1\"\n+    # we will discover the real port later.\n+    \"--tcp_port=0\"\n+    \"--shutdown_wait_unfinished=0\"\n+)\n+\n+CLICKHOUSE_WATCHDOG_ENABLE=0 $CLICKHOUSE_SERVER_BINARY \"${server_opts[@]}\" &> clickhouse-server.stderr &\n+server_pid=$!\n+\n+server_port=\n+i=0 retries=300\n+# wait until server will start to listen (max 30 seconds)\n+while [[ -z $server_port ]] && [[ $i -lt $retries ]]; do\n+    server_port=$(lsof -n -a -P -i tcp -s tcp:LISTEN -p $server_pid 2>/dev/null | awk -F'[ :]' '/LISTEN/ { print $(NF-1) }')\n+    ((++i))\n+    sleep 0.1\n+    if ! kill -0 $server_pid >& /dev/null; then\n+        echo \"No server (pid $server_pid)\"\n+        break\n+    fi\n+done\n+if [[ -z $server_port ]]; then\n+    echo \"Cannot wait for LISTEN socket\" >&2\n+    exit 1\n+fi\n+\n+# wait for the server to start accepting tcp connections (max 30 seconds)\n+i=0 retries=300\n+while ! $CLICKHOUSE_CLIENT_BINARY  -u default --password='1w2swhb1' --host 127.1 --port \"$server_port\" --format Null -q 'select 1' 2>/dev/null && [[ $i -lt $retries ]]; do\n+    sleep 0.1\n+    if ! kill -0 $server_pid >& /dev/null; then\n+        echo \"No server (pid $server_pid)\"\n+        break\n+    fi\n+done\n+\n+\n+if ! $CLICKHOUSE_CLIENT_BINARY  -u default --password='1w2swhb1' --host 127.1 --port \"$server_port\" --format Null -q 'select 1'; then\n+    echo \"Cannot wait until server will start accepting connections on <tcp_port>\" >&2\n+    exit 1\n+fi\n+\n+$CLICKHOUSE_CLIENT_BINARY  -u default --password='1w2swhb1' --host 127.1 --port \"$server_port\" -q \"DROP USER IF EXISTS u1_02422, u2_02422, u3_02422\";\n+\n+$CLICKHOUSE_CLIENT_BINARY  -u default --password='1w2swhb1' --host 127.1 --port \"$server_port\" -q \"CREATE USER u1_02422\" \" -- { serverError 516 } --\" &> /dev/null ;\n+\n+$CLICKHOUSE_CLIENT_BINARY  -u default --password='1w2swhb1' --host 127.1 --port \"$server_port\" -q \"CREATE USER u2_02422 IDENTIFIED WITH no_password \"\n+\n+$CLICKHOUSE_CLIENT_BINARY  -u default --password='1w2swhb1' --host 127.1 --port \"$server_port\" -q \"CREATE USER u3_02422 IDENTIFIED BY 'qwe123'\";\n+\n+$CLICKHOUSE_CLIENT_BINARY  -u default --password='1w2swhb1' --host 127.1 --port \"$server_port\" -q \"DROP USER u2_02422, u3_02422\";\n+\n+\n+# no sleep, since flushing to stderr should not be buffered.\n+ grep  'User is not allowed to Create users' clickhouse-server.stderr\n+\n+\n+# send TERM and save the error code to ensure that it is 0 (EXIT_SUCCESS)\n+kill $server_pid\n+wait $server_pid\n+return_code=$?\n+\n+rm -f clickhouse-server.stderr\n+rm -f \"$CURDIR\"/users.xml\n+\n+exit $return_code\n",
  "problem_statement": "An option to prevent creating a user identified with no password when the section IDENTIFIED WITH is omitted.\n**Describe the solution you'd like**\r\n\r\nAn option to make the `IDENTIFIED WITH` section mandatory.\r\n\n",
  "hints_text": "It seems like we can already forbid creating users without a password with `allow_no_password` setting in config [here](https://github.com/ClickHouse/ClickHouse/blob/master/programs/server/config.xml#L466). There are even examples of its work in [this](https://github.com/ClickHouse/ClickHouse/blob/master/tests/queries/0_stateless/02207_allow_plaintext_and_no_password.sh) test.\r\n\r\nOr do we need something different?\nYes, it is different.\r\n\r\nIt allows creating users with no password when you write `IDENTIFIED WITH NO_PASSWORD`.",
  "created_at": "2022-09-15T08:08:25Z",
  "modified_files": [
    "programs/server/config.xml",
    "src/Access/AccessControl.cpp",
    "src/Access/AccessControl.h",
    "src/Interpreters/Access/InterpreterCreateUserQuery.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02422_allow_implicit_no_password.config.xml",
    "b/tests/queries/0_stateless/02422_allow_implicit_no_password.sh"
  ]
}