diff --git a/tests/queries/0_stateless/02232_functions_to_subcolumns_alias.reference b/tests/queries/0_stateless/02232_functions_to_subcolumns_alias.reference
new file mode 100644
index 000000000000..f18e41e497e1
--- /dev/null
+++ b/tests/queries/0_stateless/02232_functions_to_subcolumns_alias.reference
@@ -0,0 +1,8 @@
+cnt
+2
+t0	t0
+100	100
+0	0
+hit
+1
+0
diff --git a/tests/queries/0_stateless/02232_functions_to_subcolumns_alias.sql b/tests/queries/0_stateless/02232_functions_to_subcolumns_alias.sql
new file mode 100644
index 000000000000..89383ed4ba3f
--- /dev/null
+++ b/tests/queries/0_stateless/02232_functions_to_subcolumns_alias.sql
@@ -0,0 +1,10 @@
+DROP TABLE IF EXISTS t_functions_to_subcolumns_alias;
+
+CREATE TABLE t_functions_to_subcolumns_alias (id UInt64, t Tuple(UInt64, String), m Map(String, UInt64)) ENGINE = Memory;
+INSERT INTO t_functions_to_subcolumns_alias VALUES (1, (100, 'abc'), map('foo', 1, 'bar', 2)) (2, NULL, map());
+
+SELECT count(id) AS cnt FROM t_functions_to_subcolumns_alias FORMAT TSVWithNames;
+SELECT tupleElement(t, 1) as t0, t0 FROM t_functions_to_subcolumns_alias FORMAT TSVWithNames;
+SELECT mapContains(m, 'foo') AS hit FROM t_functions_to_subcolumns_alias FORMAT TSVWithNames;
+
+DROP TABLE t_functions_to_subcolumns_alias;
