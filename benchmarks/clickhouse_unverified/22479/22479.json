{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 22479,
  "instance_id": "ClickHouse__ClickHouse-22479",
  "issue_numbers": [
    "14314"
  ],
  "base_commit": "c3a9cbe01c1c07d21cd1f89b31291a194fc21b25",
  "patch": "diff --git a/src/Dictionaries/ClickHouseDictionarySource.cpp b/src/Dictionaries/ClickHouseDictionarySource.cpp\nindex 5e69df2c8a02..d89271932eb8 100644\n--- a/src/Dictionaries/ClickHouseDictionarySource.cpp\n+++ b/src/Dictionaries/ClickHouseDictionarySource.cpp\n@@ -18,97 +18,72 @@\n namespace DB\n {\n \n-static const size_t MAX_CONNECTIONS = 16;\n-\n-inline static UInt16 getPortFromContext(const Context & context, bool secure)\n+namespace ErrorCodes\n {\n-    return secure ? context.getTCPPortSecure().value_or(0) : context.getTCPPort();\n+    extern const int BAD_ARGUMENTS;\n }\n \n-static ConnectionPoolWithFailoverPtr createPool(\n-    const std::string & host,\n-    UInt16 port,\n-    bool secure,\n-    const std::string & db,\n-    const std::string & user,\n-    const std::string & password)\n+namespace\n {\n-    ConnectionPoolPtrs pools;\n-    pools.emplace_back(std::make_shared<ConnectionPool>(\n-        MAX_CONNECTIONS,\n-        host,\n-        port,\n-        db,\n-        user,\n-        password,\n-        \"\", /* cluster */\n-        \"\", /* cluster_secret */\n-        \"ClickHouseDictionarySource\",\n-        Protocol::Compression::Enable,\n-        secure ? Protocol::Secure::Enable : Protocol::Secure::Disable));\n-    return std::make_shared<ConnectionPoolWithFailover>(pools, LoadBalancing::RANDOM);\n-}\n+    constexpr size_t MAX_CONNECTIONS = 16;\n+\n+    inline UInt16 getPortFromContext(const Context & context, bool secure)\n+    {\n+        return secure ? context.getTCPPortSecure().value_or(0) : context.getTCPPort();\n+    }\n+\n+    ConnectionPoolWithFailoverPtr createPool(const ClickHouseDictionarySource::Configuration & configuration)\n+    {\n+        if (configuration.is_local)\n+            return nullptr;\n+\n+        ConnectionPoolPtrs pools;\n+        pools.emplace_back(std::make_shared<ConnectionPool>(\n+            MAX_CONNECTIONS,\n+            configuration.host,\n+            configuration.port,\n+            configuration.db,\n+            configuration.user,\n+            configuration.password,\n+            \"\", /* cluster */\n+            \"\", /* cluster_secret */\n+            \"ClickHouseDictionarySource\",\n+            Protocol::Compression::Enable,\n+            configuration.secure ? Protocol::Secure::Enable : Protocol::Secure::Disable));\n+\n+        return std::make_shared<ConnectionPoolWithFailover>(pools, LoadBalancing::RANDOM);\n+    }\n \n+}\n \n ClickHouseDictionarySource::ClickHouseDictionarySource(\n     const DictionaryStructure & dict_struct_,\n-    const Poco::Util::AbstractConfiguration & config,\n-    const std::string & path_to_settings,\n-    const std::string & config_prefix,\n+    const Configuration & configuration_,\n     const Block & sample_block_,\n-    const Context & context_,\n-    const std::string & default_database)\n+    const Context & context_)\n     : update_time{std::chrono::system_clock::from_time_t(0)}\n     , dict_struct{dict_struct_}\n-    , secure(config.getBool(config_prefix + \".secure\", false))\n-    , host{config.getString(config_prefix + \".host\", \"localhost\")}\n-    , port(config.getInt(config_prefix + \".port\", getPortFromContext(context_, secure)))\n-    , user{config.getString(config_prefix + \".user\", \"default\")}\n-    , password{config.getString(config_prefix + \".password\", \"\")}\n-    , db{config.getString(config_prefix + \".db\", default_database)}\n-    , table{config.getString(config_prefix + \".table\")}\n-    , where{config.getString(config_prefix + \".where\", \"\")}\n-    , update_field{config.getString(config_prefix + \".update_field\", \"\")}\n-    , invalidate_query{config.getString(config_prefix + \".invalidate_query\", \"\")}\n-    , query_builder{dict_struct, db, \"\", table, where, IdentifierQuotingStyle::Backticks}\n+    , configuration{configuration_}\n+    , query_builder{dict_struct, configuration.db, \"\", configuration.table, configuration.where, IdentifierQuotingStyle::Backticks}\n     , sample_block{sample_block_}\n-    , context(context_)\n-    , is_local{isLocalAddress({host, port}, getPortFromContext(context_, secure))}\n-    , pool{is_local ? nullptr : createPool(host, port, secure, db, user, password)}\n+    , context{context_}\n+    , pool{createPool(configuration)}\n     , load_all_query{query_builder.composeLoadAllQuery()}\n {\n-    /// We should set user info even for the case when the dictionary is loaded in-process (without TCP communication).\n-    if (is_local)\n-    {\n-        context.setUser(user, password, Poco::Net::SocketAddress(\"127.0.0.1\", 0));\n-        context = copyContextAndApplySettings(path_to_settings, context, config);\n-    }\n-\n     /// Query context is needed because some code in executeQuery function may assume it exists.\n     /// Current example is Context::getSampleBlockCache from InterpreterSelectWithUnionQuery::getSampleBlock.\n     context.makeQueryContext();\n }\n \n-\n ClickHouseDictionarySource::ClickHouseDictionarySource(const ClickHouseDictionarySource & other)\n     : update_time{other.update_time}\n     , dict_struct{other.dict_struct}\n-    , secure{other.secure}\n-    , host{other.host}\n-    , port{other.port}\n-    , user{other.user}\n-    , password{other.password}\n-    , db{other.db}\n-    , table{other.table}\n-    , where{other.where}\n-    , update_field{other.update_field}\n-    , invalidate_query{other.invalidate_query}\n+    , configuration{other.configuration}\n     , invalidate_query_response{other.invalidate_query_response}\n-    , query_builder{dict_struct, db, \"\", table, where, IdentifierQuotingStyle::Backticks}\n+    , query_builder{dict_struct, configuration.db, \"\", configuration.table, configuration.where, IdentifierQuotingStyle::Backticks}\n     , sample_block{other.sample_block}\n-    , context(other.context)\n-    , is_local{other.is_local}\n-    , pool{is_local ? nullptr : createPool(host, port, secure, db, user, password)}\n+    , context{other.context}\n+    , pool{createPool(configuration)}\n     , load_all_query{other.load_all_query}\n {\n     context.makeQueryContext();\n@@ -121,7 +96,7 @@ std::string ClickHouseDictionarySource::getUpdateFieldAndDate()\n         time_t hr_time = std::chrono::system_clock::to_time_t(update_time) - 1;\n         std::string str_time = DateLUT::instance().timeToString(hr_time);\n         update_time = std::chrono::system_clock::now();\n-        return query_builder.composeUpdateQuery(update_field, str_time);\n+        return query_builder.composeUpdateQuery(configuration.update_field, str_time);\n     }\n     else\n     {\n@@ -155,9 +130,9 @@ BlockInputStreamPtr ClickHouseDictionarySource::loadKeys(const Columns & key_col\n \n bool ClickHouseDictionarySource::isModified() const\n {\n-    if (!invalidate_query.empty())\n+    if (!configuration.invalidate_query.empty())\n     {\n-        auto response = doInvalidateQuery(invalidate_query);\n+        auto response = doInvalidateQuery(configuration.invalidate_query);\n         LOG_TRACE(log, \"Invalidate query has returned: {}, previous value: {}\", response, invalidate_query_response);\n         if (invalidate_query_response == response)\n             return false;\n@@ -168,21 +143,21 @@ bool ClickHouseDictionarySource::isModified() const\n \n bool ClickHouseDictionarySource::hasUpdateField() const\n {\n-    return !update_field.empty();\n+    return !configuration.update_field.empty();\n }\n \n std::string ClickHouseDictionarySource::toString() const\n {\n-    return \"ClickHouse: \" + db + '.' + table + (where.empty() ? \"\" : \", where: \" + where);\n+    const std::string & where = configuration.where;\n+    return \"ClickHouse: \" + configuration.db + '.' + configuration.table + (where.empty() ? \"\" : \", where: \" + where);\n }\n \n-\n BlockInputStreamPtr ClickHouseDictionarySource::createStreamForQuery(const String & query)\n {\n     /// Sample block should not contain first row default values\n     auto empty_sample_block = sample_block.cloneEmpty();\n \n-    if (is_local)\n+    if (configuration.is_local)\n     {\n         auto stream = executeQuery(query, context, true).getInputStream();\n         stream = std::make_shared<ConvertingBlockInputStream>(stream, empty_sample_block, ConvertingBlockInputStream::MatchColumnsMode::Position);\n@@ -195,7 +170,7 @@ BlockInputStreamPtr ClickHouseDictionarySource::createStreamForQuery(const Strin\n std::string ClickHouseDictionarySource::doInvalidateQuery(const std::string & request) const\n {\n     LOG_TRACE(log, \"Performing invalidate query\");\n-    if (is_local)\n+    if (configuration.is_local)\n     {\n         Context query_context = context;\n         auto input_block = executeQuery(request, query_context, true).getInputStream();\n@@ -210,7 +185,6 @@ std::string ClickHouseDictionarySource::doInvalidateQuery(const std::string & re\n     }\n }\n \n-\n void registerDictionarySourceClickHouse(DictionarySourceFactory & factory)\n {\n     auto create_table_source = [=](const DictionaryStructure & dict_struct,\n@@ -218,12 +192,48 @@ void registerDictionarySourceClickHouse(DictionarySourceFactory & factory)\n                                  const std::string & config_prefix,\n                                  Block & sample_block,\n                                  const Context & context,\n-                                 const std::string & default_database,\n+                                 const std::string & default_database [[maybe_unused]],\n                                  bool /* check_config */) -> DictionarySourcePtr\n     {\n-        return std::make_unique<ClickHouseDictionarySource>(\n-            dict_struct, config, config_prefix, config_prefix + \".clickhouse\", sample_block, context, default_database);\n+        bool secure = config.getBool(config_prefix + \".secure\", false);\n+        Context context_copy = context;\n+\n+        UInt16 default_port = getPortFromContext(context_copy, secure);\n+\n+        std::string settings_config_prefix = config_prefix + \".clickhouse\";\n+        std::string host = config.getString(settings_config_prefix + \".host\", \"localhost\");\n+        UInt16 port = static_cast<UInt16>(config.getUInt(settings_config_prefix + \".port\", default_port));\n+\n+        ClickHouseDictionarySource::Configuration configuration {\n+            .secure = config.getBool(settings_config_prefix + \".secure\", false),\n+            .host = host,\n+            .port = port,\n+            .user = config.getString(settings_config_prefix + \".user\", \"default\"),\n+            .password = config.getString(settings_config_prefix + \".password\", \"\"),\n+            .db = config.getString(settings_config_prefix + \".db\", default_database),\n+            .table = config.getString(settings_config_prefix + \".table\"),\n+            .where = config.getString(settings_config_prefix + \".where\", \"\"),\n+            .update_field = config.getString(settings_config_prefix + \".update_field\", \"\"),\n+            .invalidate_query = config.getString(settings_config_prefix + \".invalidate_query\", \"\"),\n+            .is_local = isLocalAddress({host, port}, default_port)\n+        };\n+\n+        /// We should set user info even for the case when the dictionary is loaded in-process (without TCP communication).\n+        if (configuration.is_local)\n+        {\n+            context_copy.setUser(configuration.user, configuration.password, Poco::Net::SocketAddress(\"127.0.0.1\", 0));\n+            context_copy = copyContextAndApplySettings(config_prefix, context_copy, config);\n+        }\n+\n+        String dictionary_name = config.getString(\".dictionary.name\", \"\");\n+        String dictionary_database = config.getString(\".dictionary.database\", \"\");\n+\n+        if (dictionary_name == configuration.table && dictionary_database == configuration.db)\n+            throw Exception(ErrorCodes::BAD_ARGUMENTS, \"ClickHouseDictionarySource table cannot be dictionary table\");\n+\n+        return std::make_unique<ClickHouseDictionarySource>(dict_struct, configuration, sample_block, context_copy);\n     };\n+\n     factory.registerSource(\"clickhouse\", create_table_source);\n }\n \ndiff --git a/src/Dictionaries/ClickHouseDictionarySource.h b/src/Dictionaries/ClickHouseDictionarySource.h\nindex 4f26dd168496..ac615848b494 100644\n--- a/src/Dictionaries/ClickHouseDictionarySource.h\n+++ b/src/Dictionaries/ClickHouseDictionarySource.h\n@@ -18,14 +18,26 @@ namespace DB\n class ClickHouseDictionarySource final : public IDictionarySource\n {\n public:\n+    struct Configuration\n+    {\n+        const bool secure;\n+        const std::string host;\n+        const UInt16 port;\n+        const std::string user;\n+        const std::string password;\n+        const std::string db;\n+        const std::string table;\n+        const std::string where;\n+        const std::string update_field;\n+        const std::string invalidate_query;\n+        const bool is_local;\n+    };\n+\n     ClickHouseDictionarySource(\n         const DictionaryStructure & dict_struct_,\n-        const Poco::Util::AbstractConfiguration & config,\n-        const std::string & path_to_settings,\n-        const std::string & config_prefix,\n+        const Configuration & configuration_,\n         const Block & sample_block_,\n-        const Context & context,\n-        const std::string & default_database);\n+        const Context & context);\n \n     /// copy-constructor is provided in order to support cloneability\n     ClickHouseDictionarySource(const ClickHouseDictionarySource & other);\n@@ -50,7 +62,7 @@ class ClickHouseDictionarySource final : public IDictionarySource\n \n     /// Used for detection whether the hashtable should be preallocated\n     /// (since if there is WHERE then it can filter out too much)\n-    bool hasWhere() const { return !where.empty(); }\n+    bool hasWhere() const { return !configuration.where.empty(); }\n \n private:\n     std::string getUpdateFieldAndDate();\n@@ -61,21 +73,11 @@ class ClickHouseDictionarySource final : public IDictionarySource\n \n     std::chrono::time_point<std::chrono::system_clock> update_time;\n     const DictionaryStructure dict_struct;\n-    const bool secure;\n-    const std::string host;\n-    const UInt16 port;\n-    const std::string user;\n-    const std::string password;\n-    const std::string db;\n-    const std::string table;\n-    const std::string where;\n-    const std::string update_field;\n-    std::string invalidate_query;\n+    const Configuration configuration;\n     mutable std::string invalidate_query_response;\n     ExternalQueryBuilder query_builder;\n     Block sample_block;\n     Context context;\n-    const bool is_local;\n     ConnectionPoolWithFailoverPtr pool;\n     const std::string load_all_query;\n     Poco::Logger * log = &Poco::Logger::get(\"ClickHouseDictionarySource\");\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01780_clickhouse_dictionary_source_loop.reference b/tests/queries/0_stateless/01780_clickhouse_dictionary_source_loop.reference\nnew file mode 100644\nindex 000000000000..0cfb83aa2f26\n--- /dev/null\n+++ b/tests/queries/0_stateless/01780_clickhouse_dictionary_source_loop.reference\n@@ -0,0 +1,3 @@\n+1\t1\n+2\t2\n+3\t3\ndiff --git a/tests/queries/0_stateless/01780_clickhouse_dictionary_source_loop.sql b/tests/queries/0_stateless/01780_clickhouse_dictionary_source_loop.sql\nnew file mode 100644\nindex 000000000000..5673e646a470\n--- /dev/null\n+++ b/tests/queries/0_stateless/01780_clickhouse_dictionary_source_loop.sql\n@@ -0,0 +1,53 @@\n+DROP DATABASE IF EXISTS 01780_db;\n+CREATE DATABASE 01780_db;\n+\n+DROP DICTIONARY IF EXISTS dict1;\n+CREATE DICTIONARY dict1\n+(\n+    id UInt64,\n+    value String\n+)\n+PRIMARY KEY id\n+SOURCE(CLICKHOUSE(HOST 'localhost' PORT 9000 TABLE 'dict1'))\n+LAYOUT(DIRECT());\n+\n+SELECT * FROM dict1; --{serverError 36}\n+\n+DROP DICTIONARY dict1;\n+\n+DROP DICTIONARY IF EXISTS dict2;\n+CREATE DICTIONARY 01780_db.dict2\n+(\n+    id UInt64,\n+    value String\n+)\n+PRIMARY KEY id\n+SOURCE(CLICKHOUSE(HOST 'localhost' PORT 9000 DATABASE '01780_db' TABLE 'dict2'))\n+LAYOUT(DIRECT());\n+\n+SELECT * FROM 01780_db.dict2; --{serverError 36}\n+DROP DICTIONARY 01780_db.dict2;\n+\n+DROP TABLE IF EXISTS 01780_db.dict3_source;\n+CREATE TABLE 01780_db.dict3_source\n+(\n+    id UInt64,\n+    value String\n+) ENGINE = TinyLog;\n+\n+INSERT INTO 01780_db.dict3_source VALUES (1, '1'), (2, '2'), (3, '3');\n+\n+CREATE DICTIONARY 01780_db.dict3\n+(\n+    id UInt64,\n+    value String\n+)\n+PRIMARY KEY id\n+SOURCE(CLICKHOUSE(HOST 'localhost' PORT 9000 TABLE 'dict3_source' DATABASE '01780_db'))\n+LAYOUT(DIRECT());\n+\n+SELECT * FROM 01780_db.dict3;\n+\n+DROP DICTIONARY 01780_db.dict3;\n+\n+DROP DATABASE 01780_db;\ndiff --git a/tests/queries/skip_list.json b/tests/queries/skip_list.json\nindex 1064ddd8b4f1..af3081241e80 100644\n--- a/tests/queries/skip_list.json\n+++ b/tests/queries/skip_list.json\n@@ -694,6 +694,7 @@\n         \"01685_ssd_cache_dictionary_complex_key\",\n         \"01760_system_dictionaries\",\n         \"01760_polygon_dictionaries\",\n-        \"01778_hierarchical_dictionaries\"\n+        \"01778_hierarchical_dictionaries\",\n+        \"01780_clickhouse_dictionary_source_loop\"\n     ]\n }\n",
  "problem_statement": "It is possible to create a dictionary that looks at itself. Query from this dictionary will hang.\n```\r\nmilovidov-desktop :) CREATE DICTIONARY dict\r\n:-] (\r\n:-]     k1 UInt64,\r\n:-]     k2 UInt8,\r\n:-]     value String\r\n:-] )\r\n:-] PRIMARY KEY k1, k2\r\n:-] SOURCE(CLICKHOUSE(HOST 'localhost' PORT 9000 USER 'default' TABLE 'dict'))\r\n:-] LIFETIME(1000)\r\n:-] LAYOUT(COMPLEX_KEY_HASHED());\r\n\r\nCREATE DICTIONARY dict\r\n(\r\n    `k1` UInt64,\r\n    `k2` UInt8,\r\n    `value` String\r\n)\r\nPRIMARY KEY k1, k2\r\nSOURCE(CLICKHOUSE(HOST 'localhost' PORT 9000 USER 'default' TABLE 'dict'))\r\nLIFETIME(MIN 0 MAX 1000)\r\nLAYOUT(COMPLEX_KEY_HASHED())\r\n\r\nOk.\r\n\r\n0 rows in set. Elapsed: 0.001 sec. \r\n\r\nmilovidov-desktop :) SELECT dictGetString('default.dict', 'third_column', (1, 2, 3, 4, 5, 6, 7, 8, 9, 10));\r\n\r\nSELECT dictGetString('default.dict', 'third_column', (1, 2, 3, 4, 5, 6, 7, 8, 9, 10))\r\n```\n",
  "hints_text": "",
  "created_at": "2021-04-01T22:07:06Z",
  "modified_files": [
    "src/Dictionaries/ClickHouseDictionarySource.cpp",
    "src/Dictionaries/ClickHouseDictionarySource.h"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/01780_clickhouse_dictionary_source_loop.reference",
    "b/tests/queries/0_stateless/01780_clickhouse_dictionary_source_loop.sql",
    "tests/queries/skip_list.json"
  ]
}