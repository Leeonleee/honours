You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
[RFC] Boost up CI with source files Digest
This proposes a new source digesting technique in the CI pipeline aimed at improving overall efficiency, including computational resource utilization, reliability, pipeline execution time, and artifact/job reusability. It addresses the CI execution flow and does not cover the content of tests/checks running in the pipeline.

By source files digesting, we mean a technique that calculates a hash value over a specific part of the CH source code to facilitate the reuse of build artifacts, skip jobs if already run, and more.

### Three Ways to Improve CI with source files Digest:

1. **Digest to Reuse Build Artifacts:**
   - To reuse build artifacts whenever possible, the digest is calculated over CH source files `./src`, `./base`, `./cmake`, `./programs`, git submodules, and builder docker image(s). This is simplified bash commands to give an idea how digest is calculated for a build:
```bash
SOURCE_DIGEST=$(find ./src -type f | xargs md5sum | sort | md5sum)
MODULES_DIGEST=$(git submodule status | md5sum)
DOCKER_BUILDER_DIGEST=$(find ./docker/packager/ -type f | xargs md5sum | sort | md5sum)
BUILD_DIGEST=$(echo $SOURCE_DIGEST-$MODULES_DIGEST-$DOCKER_BUILDER_DIGEST | md5sum)
```
   - CI build jobs should calculate this digest before the build and check if the desired build with the resulting digest is already uploaded on S3. If uploaded, the job is skipped. The digest is part of the S3 URL path, e.g.: `https://s3.console.aws.amazon.com/s3/buckets/clickhouse-builds?prefix=PRs/storage/<digest>/package_release/clickhouse`.

>    **Benefits:**
>    - Can be done on a shallow cloned repo without git history or GH API usage.
>    - Artifact reuse across any git branches.
>    - Locally Reproducible.
> 
>    **Possible Obstacles:**
>    - GitHub's merge from master before testing may modify sources and digest value, decreasing the artifact reuse rate. Possible solution: Disable merge from master.
>    - Automatic build versioning may modify sources. Possible solution: Count digest before autogeneration.

2. **Digest to tag docker images:**
   - Instead of relying on GH API, git history, and CH CI database, propose calculating the digest for a docker image and using this digest as the image tag.
   - The digest is calculated based on docker files and dependent-on docker images. Shallow clone is enough to calculate docker digest. If a docker image with the resulting tag exists, CI reuses it; otherwise, it builds it.
   - This works automatically on any repo branch: master, release, or PR and avoids rebuilding docker image whenever possible.

3. **Tests Digest:**
   - A digest could be calculated against each test category (Functional, Integration, etc.). If this digest is written to the CI checks database, it provides a means to skip certain Test Cases for a specific build and test digests match. This could be beneficial in case of job re-run due to AWS spot instance restarts.
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
