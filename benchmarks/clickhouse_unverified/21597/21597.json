{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 21597,
  "instance_id": "ClickHouse__ClickHouse-21597",
  "issue_numbers": [
    "17917"
  ],
  "base_commit": "647246006afb8cfe83a5f50cd3923f4d7e9f484f",
  "patch": "diff --git a/CMakeLists.txt b/CMakeLists.txt\nindex 9002f1df140c..76b79a0b6c84 100644\n--- a/CMakeLists.txt\n+++ b/CMakeLists.txt\n@@ -169,7 +169,7 @@ endif ()\n set (CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -rdynamic\")\n \n if (OS_LINUX)\n-    find_program (OBJCOPY_PATH NAMES \"llvm-objcopy\" \"llvm-objcopy-11\" \"llvm-objcopy-10\" \"llvm-objcopy-9\" \"llvm-objcopy-8\" \"objcopy\")\n+    find_program (OBJCOPY_PATH NAMES \"llvm-objcopy\" \"llvm-objcopy-12\" \"llvm-objcopy-11\" \"llvm-objcopy-10\" \"llvm-objcopy-9\" \"llvm-objcopy-8\" \"objcopy\")\n     if (OBJCOPY_PATH)\n         message(STATUS \"Using objcopy: ${OBJCOPY_PATH}.\")\n \n@@ -331,7 +331,7 @@ if (COMPILER_CLANG)\n     endif ()\n \n     # Always prefer llvm tools when using clang. For instance, we cannot use GNU ar when llvm LTO is enabled\n-    find_program (LLVM_AR_PATH NAMES \"llvm-ar\" \"llvm-ar-11\" \"llvm-ar-10\" \"llvm-ar-9\" \"llvm-ar-8\")\n+    find_program (LLVM_AR_PATH NAMES \"llvm-ar\" \"llvm-ar-12\" \"llvm-ar-11\" \"llvm-ar-10\" \"llvm-ar-9\" \"llvm-ar-8\")\n \n     if (LLVM_AR_PATH)\n         message(STATUS \"Using llvm-ar: ${LLVM_AR_PATH}.\")\n@@ -340,7 +340,7 @@ if (COMPILER_CLANG)\n         message(WARNING \"Cannot find llvm-ar. System ar will be used instead. It does not work with ThinLTO.\")\n     endif ()\n \n-    find_program (LLVM_RANLIB_PATH NAMES \"llvm-ranlib\" \"llvm-ranlib-11\" \"llvm-ranlib-10\" \"llvm-ranlib-9\" \"llvm-ranlib-8\")\n+    find_program (LLVM_RANLIB_PATH NAMES \"llvm-ranlib\" \"llvm-ranlib-12\" \"llvm-ranlib-11\" \"llvm-ranlib-10\" \"llvm-ranlib-9\" \"llvm-ranlib-8\")\n \n     if (LLVM_RANLIB_PATH)\n         message(STATUS \"Using llvm-ranlib: ${LLVM_RANLIB_PATH}.\")\ndiff --git a/base/common/wide_integer_impl.h b/base/common/wide_integer_impl.h\nindex a34e757eaa5b..5b981326e259 100644\n--- a/base/common/wide_integer_impl.h\n+++ b/base/common/wide_integer_impl.h\n@@ -249,15 +249,15 @@ struct integer<Bits, Signed>::_impl\n             return;\n         }\n \n-        const T alpha = t / max_int;\n+        const T alpha = t / static_cast<T>(max_int);\n \n-        if (alpha <= max_int)\n+        if (alpha <= static_cast<T>(max_int))\n             self = static_cast<uint64_t>(alpha);\n         else // max(double) / 2^64 will surely contain less than 52 precision bits, so speed up computations.\n             set_multiplier<double>(self, alpha);\n \n         self *= max_int;\n-        self += static_cast<uint64_t>(t - alpha * max_int); // += b_i\n+        self += static_cast<uint64_t>(t - alpha * static_cast<T>(max_int)); // += b_i\n     }\n \n     constexpr static void wide_integer_from_bultin(integer<Bits, Signed>& self, double rhs) noexcept {\n@@ -275,7 +275,7 @@ struct integer<Bits, Signed>::_impl\n             \"On your system long double has less than 64 precision bits,\"\n             \"which may result in UB when initializing double from int64_t\");\n \n-        if ((rhs > 0 && rhs < max_int) || (rhs < 0 && rhs > min_int))\n+        if ((rhs > 0 && rhs < static_cast<long double>(max_int)) || (rhs < 0 && rhs > static_cast<long double>(min_int)))\n         {\n             self = static_cast<int64_t>(rhs);\n             return;\ndiff --git a/base/readpassphrase/CMakeLists.txt b/base/readpassphrase/CMakeLists.txt\nindex 574130ce6e39..51b12106eca6 100644\n--- a/base/readpassphrase/CMakeLists.txt\n+++ b/base/readpassphrase/CMakeLists.txt\n@@ -4,5 +4,5 @@\n add_library(readpassphrase readpassphrase.c)\n \n set_target_properties(readpassphrase PROPERTIES LINKER_LANGUAGE C)\n-target_compile_options(readpassphrase PRIVATE -Wno-unused-result -Wno-reserved-id-macro)\n+target_compile_options(readpassphrase PRIVATE -Wno-unused-result -Wno-reserved-id-macro -Wno-disabled-macro-expansion)\n target_include_directories(readpassphrase PUBLIC .)\ndiff --git a/base/readpassphrase/readpassphrase.c b/base/readpassphrase/readpassphrase.c\nindex 9e8097643bb4..8a7d31539150 100644\n--- a/base/readpassphrase/readpassphrase.c\n+++ b/base/readpassphrase/readpassphrase.c\n@@ -94,7 +94,7 @@ readpassphrase(const char *prompt, char *buf, size_t bufsiz, int flags)\n     if (input != STDIN_FILENO && tcgetattr(input, &oterm) == 0) {\n         memcpy(&term, &oterm, sizeof(term));\n         if (!(flags & RPP_ECHO_ON))\n-            term.c_lflag &= ~(ECHO | ECHONL);\n+            term.c_lflag &= ~((unsigned int) (ECHO | ECHONL));\n #ifdef VSTATUS\n         if (term.c_cc[VSTATUS] != _POSIX_VDISABLE)\n             term.c_cc[VSTATUS] = _POSIX_VDISABLE;\ndiff --git a/cmake/tools.cmake b/cmake/tools.cmake\nindex cc4046d24696..abb11843d594 100644\n--- a/cmake/tools.cmake\n+++ b/cmake/tools.cmake\n@@ -75,8 +75,13 @@ if (OS_LINUX AND NOT LINKER_NAME)\n endif ()\n \n if (LINKER_NAME)\n-    set (CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -fuse-ld=${LINKER_NAME}\")\n-    set (CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} -fuse-ld=${LINKER_NAME}\")\n+    if (COMPILER_CLANG AND (CMAKE_CXX_COMPILER_VERSION VERSION_GREATER 12.0.0 OR CMAKE_CXX_COMPILER_VERSION VERSION_EQUAL 12.0.0))\n+        set (CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} --ld-path=${LINKER_NAME}\")\n+        set (CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} --ld-path=${LINKER_NAME}\")\n+    else ()\n+        set (CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -fuse-ld=${LINKER_NAME}\")\n+        set (CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} -fuse-ld=${LINKER_NAME}\")\n+    endif ()\n \n     message(STATUS \"Using custom linker by name: ${LINKER_NAME}\")\n endif ()\ndiff --git a/contrib/boringssl b/contrib/boringssl\nindex 8b2bf912ba04..fd9ce1a0406f 160000\n--- a/contrib/boringssl\n+++ b/contrib/boringssl\n@@ -1,1 +1,1 @@\n-Subproject commit 8b2bf912ba04823cfe9e7e8f5bb60cb7f6252449\n+Subproject commit fd9ce1a0406f571507068b9555d0b545b8a18332\ndiff --git a/contrib/cassandra b/contrib/cassandra\nindex b446d7eb68e6..c097fb5c7e63 160000\n--- a/contrib/cassandra\n+++ b/contrib/cassandra\n@@ -1,1 +1,1 @@\n-Subproject commit b446d7eb68e6962f431e2b3771313bfe9a2bbd93\n+Subproject commit c097fb5c7e63cc430016d9a8b240d8e63fbefa52\ndiff --git a/contrib/mariadb-connector-c b/contrib/mariadb-connector-c\nindex 21f451d4d315..f4476ee7311b 160000\n--- a/contrib/mariadb-connector-c\n+++ b/contrib/mariadb-connector-c\n@@ -1,1 +1,1 @@\n-Subproject commit 21f451d4d3157ffed31ec60a8b76c407190e66bd\n+Subproject commit f4476ee7311b35b593750f6ae2cbdb62a4006374\ndiff --git a/docs/en/development/build.md b/docs/en/development/build.md\nindex f98329e748f8..3181f26800d0 100644\n--- a/docs/en/development/build.md\n+++ b/docs/en/development/build.md\n@@ -170,7 +170,7 @@ $ ./release\n Normally all tools of the ClickHouse bundle, such as `clickhouse-server`, `clickhouse-client` etc., are linked into a single static executable, `clickhouse`. This executable must be re-linked on every change, which might be slow. Two common ways to improve linking time are to use `lld` linker, and use the 'split' build configuration, which builds a separate binary for every tool, and further splits the code into serveral shared libraries. To enable these tweaks, pass the following flags to `cmake`:\n \n ```\n--DCMAKE_C_FLAGS=\"-fuse-ld=lld\" -DCMAKE_CXX_FLAGS=\"-fuse-ld=lld\" -DUSE_STATIC_LIBRARIES=0 -DSPLIT_SHARED_LIBRARIES=1 -DCLICKHOUSE_SPLIT_BINARY=1\n+-DCMAKE_C_FLAGS=\"--ld-path=lld\" -DCMAKE_CXX_FLAGS=\"--ld-path=lld\" -DUSE_STATIC_LIBRARIES=0 -DSPLIT_SHARED_LIBRARIES=1 -DCLICKHOUSE_SPLIT_BINARY=1\n ```\n \n ## You Don\u2019t Have to Build ClickHouse {#you-dont-have-to-build-clickhouse}\ndiff --git a/src/Functions/DivisionUtils.h b/src/Functions/DivisionUtils.h\nindex 2b4c07b1cfff..174ea7ee7975 100644\n--- a/src/Functions/DivisionUtils.h\n+++ b/src/Functions/DivisionUtils.h\n@@ -105,7 +105,7 @@ struct DivideIntegralImpl\n             auto res = checkedDivision(CastA(a), CastB(b));\n \n             if constexpr (std::is_floating_point_v<decltype(res)>)\n-                if (isNaN(res) || res >= std::numeric_limits<Result>::max() || res <= std::numeric_limits<Result>::lowest())\n+                if (isNaN(res) || res >= static_cast<double>(std::numeric_limits<Result>::max()) || res <= std::numeric_limits<Result>::lowest())\n                     throw Exception(\"Cannot perform integer division, because it will produce infinite or too large number\",\n                         ErrorCodes::ILLEGAL_DIVISION);\n \n",
  "test_patch": "diff --git a/contrib/googletest b/contrib/googletest\nindex 356f2d264a48..e7e591764bab 160000\n--- a/contrib/googletest\n+++ b/contrib/googletest\n@@ -1,1 +1,1 @@\n-Subproject commit 356f2d264a485db2fcc50ec1c672e0d37b6cb39b\n+Subproject commit e7e591764baba0a0c3c9ad0014430e7a27331d16\ndiff --git a/src/Compression/tests/gtest_compressionCodec.cpp b/src/Compression/tests/gtest_compressionCodec.cpp\nindex e9470536ae88..0acd15e48c35 100644\n--- a/src/Compression/tests/gtest_compressionCodec.cpp\n+++ b/src/Compression/tests/gtest_compressionCodec.cpp\n@@ -749,7 +749,7 @@ auto RandomishGenerator = [](auto i)\n {\n     using T = decltype(i);\n     double sin_value = sin(static_cast<double>(i * i)) * i;\n-    if (sin_value < std::numeric_limits<T>::lowest() || sin_value > std::numeric_limits<T>::max())\n+    if (sin_value < std::numeric_limits<T>::lowest() || sin_value > static_cast<double>(std::numeric_limits<T>::max()))\n         return T{};\n     return T(sin_value);\n };\n",
  "problem_statement": "`-fuse-ld` is replaced by `--ld-path` in Clang\n**Operating system**\r\nLinux Mint 19\r\n\r\n**Cmake version**\r\n3.16.3\r\n\r\n**Ninja version**\r\n1.10.0\r\n\r\n**Compiler name and version**\r\nclang 12.0.0\r\n\r\n**Full cmake and/or ninja output**\r\n```\r\nclang: warning: '-fuse-ld=' taking a path is deprecated. Use '--ld-path=' instead\r\n```\r\n\r\nSee also: https://reviews.llvm.org/D83015\n",
  "hints_text": "https://github.com/ClickHouse/ClickHouse/pull/15481\r\n\r\nbut it was closed because of no use cases.\nLet's continue. We can test for clang version and use the new option if it is clang 12.",
  "created_at": "2021-03-10T15:23:26Z",
  "modified_files": [
    "CMakeLists.txt",
    "base/common/wide_integer_impl.h",
    "base/readpassphrase/CMakeLists.txt",
    "base/readpassphrase/readpassphrase.c",
    "cmake/tools.cmake",
    "contrib/boringssl",
    "contrib/cassandra",
    "contrib/mariadb-connector-c",
    "docs/en/development/build.md",
    "src/Functions/DivisionUtils.h"
  ],
  "modified_test_files": [
    "contrib/googletest",
    "src/Compression/tests/gtest_compressionCodec.cpp"
  ]
}