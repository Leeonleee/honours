diff --git a/src/Interpreters/ExpressionAnalyzer.h b/src/Interpreters/ExpressionAnalyzer.h
index f158df30204d..ddb41a00f842 100644
--- a/src/Interpreters/ExpressionAnalyzer.h
+++ b/src/Interpreters/ExpressionAnalyzer.h
@@ -139,14 +139,12 @@ class ExpressionAnalyzer : protected ExpressionAnalyzerData, private boost::nonc
     void makeWindowDescriptionFromAST(const Context & context, const WindowDescriptions & existing_descriptions, WindowDescription & desc, const IAST * ast);
     void makeWindowDescriptions(ActionsDAGPtr actions);
 
-    /**
-      * Create Set from a subquery or a table expression in the query. The created set is suitable for using the index.
+    /** Create Set from a subquery or a table expression in the query. The created set is suitable for using the index.
       * The set will not be created if its size hits the limit.
       */
     void tryMakeSetForIndexFromSubquery(const ASTPtr & subquery_or_table_name, const SelectQueryOptions & query_options = {});
 
-    /**
-      * Checks if subquery is not a plain StorageSet.
+    /** Checks if subquery is not a plain StorageSet.
       * Because while making set we will read data from StorageSet which is not allowed.
       * Returns valid SetPtr from StorageSet if the latter is used after IN or nullptr otherwise.
       */
diff --git a/src/Storages/StorageJoin.h b/src/Storages/StorageJoin.h
index 2a28ff6d01b6..390af09422c2 100644
--- a/src/Storages/StorageJoin.h
+++ b/src/Storages/StorageJoin.h
@@ -76,14 +76,10 @@ class StorageJoin final : public StorageSetOrJoinBase
     Block getRightSampleBlock() const
     {
         auto metadata_snapshot = getInMemoryMetadataPtr();
-        Block block = metadata_snapshot->getSampleBlock().sortColumns();
+        Block block = metadata_snapshot->getSampleBlock();
         if (use_nulls && isLeftOrFull(kind))
-        {
             for (auto & col : block)
-            {
                 JoinCommon::convertColumnToNullable(col);
-            }
-        }
         return block;
     }
 
diff --git a/src/Storages/StorageSet.cpp b/src/Storages/StorageSet.cpp
index 2f586a3c26cb..48f8adfece25 100644
--- a/src/Storages/StorageSet.cpp
+++ b/src/Storages/StorageSet.cpp
@@ -81,12 +81,11 @@ SetOrJoinSink::SetOrJoinSink(
 
 void SetOrJoinSink::consume(Chunk chunk)
 {
-    /// Sort columns in the block. This is necessary, since Set and Join count on the same column order in different blocks.
-    Block sorted_block = getHeader().cloneWithColumns(chunk.detachColumns()).sortColumns();
+    Block block = getHeader().cloneWithColumns(chunk.detachColumns());
 
-    table.insertBlock(sorted_block, getContext());
+    table.insertBlock(block, getContext());
     if (persistent)
-        backup_stream.write(sorted_block);
+        backup_stream.write(block);
 }
 
 void SetOrJoinSink::onFinish()
@@ -147,9 +146,7 @@ StorageSet::StorageSet(
     : StorageSetOrJoinBase{disk_, relative_path_, table_id_, columns_, constraints_, comment, persistent_}
     , set(std::make_shared<Set>(SizeLimits(), false, true))
 {
-
     Block header = getInMemoryMetadataPtr()->getSampleBlock();
-    header = header.sortColumns();
     set->setHeader(header.getColumnsWithTypeAndName());
 
     restore();
@@ -170,7 +167,6 @@ void StorageSet::truncate(const ASTPtr &, const StorageMetadataPtr & metadata_sn
     disk->createDirectories(fs::path(path) / "tmp/");
 
     Block header = metadata_snapshot->getSampleBlock();
-    header = header.sortColumns();
 
     increment = 0;
     set = std::make_shared<Set>(SizeLimits(), false, true);
