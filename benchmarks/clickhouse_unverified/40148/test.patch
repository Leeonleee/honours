diff --git a/tests/integration/test_replicated_database/configs/config.xml b/tests/integration/test_replicated_database/configs/config.xml
index 9d217943bd72..16cd942e975d 100644
--- a/tests/integration/test_replicated_database/configs/config.xml
+++ b/tests/integration/test_replicated_database/configs/config.xml
@@ -1,3 +1,6 @@
 <clickhouse>
     <database_atomic_delay_before_drop_table_sec>10</database_atomic_delay_before_drop_table_sec>
+    <merge_tree>
+        <initialization_retry_period>10</initialization_retry_period>
+    </merge_tree>
 </clickhouse>
diff --git a/tests/integration/test_replicated_database/test.py b/tests/integration/test_replicated_database/test.py
index f716fac85082..0cf237d57f35 100644
--- a/tests/integration/test_replicated_database/test.py
+++ b/tests/integration/test_replicated_database/test.py
@@ -788,23 +788,24 @@ def test_startup_without_zk(started_cluster):
     main_node.query(
         "CREATE DATABASE startup ENGINE = Replicated('/clickhouse/databases/startup', 'shard1', 'replica1');"
     )
-    # main_node.query("CREATE TABLE startup.rmt (n int) ENGINE=ReplicatedMergeTree order by n")
-    main_node.query("CREATE TABLE startup.rmt (n int) ENGINE=MergeTree order by n")
+    main_node.query(
+        "CREATE TABLE startup.rmt (n int) ENGINE=ReplicatedMergeTree order by n"
+    )
+
     main_node.query("INSERT INTO startup.rmt VALUES (42)")
     with PartitionManager() as pm:
         pm.drop_instance_zk_connections(main_node)
-        main_node.restart_clickhouse(stop_start_wait_sec=30)
+        main_node.restart_clickhouse(stop_start_wait_sec=60)
         assert main_node.query("SELECT (*,).1 FROM startup.rmt") == "42
"
 
-    for _ in range(10):
-        try:
-            main_node.query("CREATE TABLE startup.m (n int) ENGINE=Memory")
-            break
-        except:
-            time.sleep(1)
+    # we need to wait until the table is not readonly
+    main_node.query_with_retry("INSERT INTO startup.rmt VALUES(42)")
+
+    main_node.query_with_retry("CREATE TABLE startup.m (n int) ENGINE=Memory")
 
     main_node.query("EXCHANGE TABLES startup.rmt AND startup.m")
     assert main_node.query("SELECT (*,).1 FROM startup.m") == "42
"
+
     main_node.query("DROP DATABASE startup SYNC")
 
 
