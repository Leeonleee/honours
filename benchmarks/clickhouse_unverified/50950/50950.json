{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 50950,
  "instance_id": "ClickHouse__ClickHouse-50950",
  "issue_numbers": [
    "50707"
  ],
  "base_commit": "2abd5800700e040a7dbd6d1cbc6cbcc82437bbe7",
  "patch": "diff --git a/src/Client/ClientBase.cpp b/src/Client/ClientBase.cpp\nindex 6f295c110702..ea51c5fd0f8e 100644\n--- a/src/Client/ClientBase.cpp\n+++ b/src/Client/ClientBase.cpp\n@@ -103,6 +103,7 @@ namespace ErrorCodes\n     extern const int UNRECOGNIZED_ARGUMENTS;\n     extern const int LOGICAL_ERROR;\n     extern const int CANNOT_OPEN_FILE;\n+    extern const int FILE_ALREADY_EXISTS;\n }\n \n }\n@@ -568,30 +569,17 @@ try\n                 CompressionMethod compression_method = chooseCompressionMethod(out_file, compression_method_string);\n                 UInt64 compression_level = 3;\n \n-                if (query_with_output->is_outfile_append && compression_method != CompressionMethod::None)\n-                {\n-                    throw Exception(\n-                        ErrorCodes::BAD_ARGUMENTS,\n-                        \"Cannot append to compressed file. Please use uncompressed file or remove APPEND keyword.\");\n-                }\n-\n                 if (query_with_output->compression_level)\n                 {\n                     const auto & compression_level_node = query_with_output->compression_level->as<ASTLiteral &>();\n-                    bool res = compression_level_node.value.tryGet<UInt64>(compression_level);\n-                    auto range = getCompressionLevelRange(compression_method);\n-\n-                    if (!res || compression_level < range.first || compression_level > range.second)\n-                        throw Exception(\n-                            ErrorCodes::BAD_ARGUMENTS,\n-                            \"Invalid compression level, must be positive integer in range {}-{}\",\n-                            range.first,\n-                            range.second);\n+                    compression_level_node.value.tryGet<UInt64>(compression_level);\n                 }\n \n                 auto flags = O_WRONLY | O_EXCL;\n                 if (query_with_output->is_outfile_append)\n                     flags |= O_APPEND;\n+                else if (query_with_output->is_outfile_truncate)\n+                    flags |= O_TRUNC;\n                 else\n                     flags |= O_CREAT;\n \n@@ -872,6 +860,67 @@ void ClientBase::processOrdinaryQuery(const String & query_to_execute, ASTPtr pa\n         }\n     }\n \n+    // Run some local checks to make sure queries into output file will work before sending to server.\n+    if (const auto * query_with_output = dynamic_cast<const ASTQueryWithOutput *>(parsed_query.get()))\n+    {\n+        String out_file;\n+        if (query_with_output->out_file)\n+        {\n+            const auto & out_file_node = query_with_output->out_file->as<ASTLiteral &>();\n+            out_file = out_file_node.value.safeGet<std::string>();\n+\n+            std::string compression_method_string;\n+\n+            if (query_with_output->compression)\n+            {\n+                const auto & compression_method_node = query_with_output->compression->as<ASTLiteral &>();\n+                compression_method_string = compression_method_node.value.safeGet<std::string>();\n+            }\n+\n+            CompressionMethod compression_method = chooseCompressionMethod(out_file, compression_method_string);\n+            UInt64 compression_level = 3;\n+\n+            if (query_with_output->is_outfile_append && query_with_output->is_outfile_truncate)\n+            {\n+                throw Exception(\n+                    ErrorCodes::BAD_ARGUMENTS,\n+                    \"Cannot use INTO OUTFILE with APPEND and TRUNCATE simultaneously.\");\n+            }\n+\n+            if (query_with_output->is_outfile_append && compression_method != CompressionMethod::None)\n+            {\n+                throw Exception(\n+                    ErrorCodes::BAD_ARGUMENTS,\n+                    \"Cannot append to compressed file. Please use uncompressed file or remove APPEND keyword.\");\n+            }\n+\n+            if (query_with_output->compression_level)\n+            {\n+                const auto & compression_level_node = query_with_output->compression_level->as<ASTLiteral &>();\n+                bool res = compression_level_node.value.tryGet<UInt64>(compression_level);\n+                auto range = getCompressionLevelRange(compression_method);\n+\n+                if (!res || compression_level < range.first || compression_level > range.second)\n+                    throw Exception(\n+                        ErrorCodes::BAD_ARGUMENTS,\n+                        \"Invalid compression level, must be positive integer in range {}-{}\",\n+                        range.first,\n+                        range.second);\n+            }\n+\n+            if (fs::exists(out_file))\n+            {\n+                if (!query_with_output->is_outfile_append && !query_with_output->is_outfile_truncate)\n+                {\n+                    throw Exception(\n+                        ErrorCodes::FILE_ALREADY_EXISTS,\n+                        \"File {} exists, consider using APPEND or TRUNCATE.\",\n+                        out_file);\n+                }\n+            }\n+        }\n+    }\n+\n     const auto & settings = global_context->getSettingsRef();\n     const Int32 signals_before_stop = settings.partial_result_on_first_cancel ? 2 : 1;\n \ndiff --git a/src/Client/Suggest.cpp b/src/Client/Suggest.cpp\nindex 4e38add0ef5f..c9cc27b43373 100644\n--- a/src/Client/Suggest.cpp\n+++ b/src/Client/Suggest.cpp\n@@ -43,7 +43,7 @@ Suggest::Suggest()\n         \"IN\",           \"KILL\",     \"QUERY\",  \"SYNC\",      \"ASYNC\",    \"TEST\",        \"BETWEEN\",  \"TRUNCATE\",    \"USER\",    \"ROLE\",\n         \"PROFILE\",      \"QUOTA\",    \"POLICY\", \"ROW\",       \"GRANT\",    \"REVOKE\",      \"OPTION\",   \"ADMIN\",       \"EXCEPT\",  \"REPLACE\",\n         \"IDENTIFIED\",   \"HOST\",     \"NAME\",   \"READONLY\",  \"WRITABLE\", \"PERMISSIVE\",  \"FOR\",      \"RESTRICTIVE\", \"RANDOMIZED\",\n-        \"INTERVAL\",     \"LIMITS\",   \"ONLY\",   \"TRACKING\",  \"IP\",       \"REGEXP\",      \"ILIKE\",    \"CLEANUP\"\n+        \"INTERVAL\",     \"LIMITS\",   \"ONLY\",   \"TRACKING\",  \"IP\",       \"REGEXP\",      \"ILIKE\",    \"CLEANUP\",     \"APPEND\"\n     });\n }\n \ndiff --git a/src/Parsers/ASTQueryWithOutput.cpp b/src/Parsers/ASTQueryWithOutput.cpp\nindex 5f717715a695..4bf1e6cb2311 100644\n--- a/src/Parsers/ASTQueryWithOutput.cpp\n+++ b/src/Parsers/ASTQueryWithOutput.cpp\n@@ -39,6 +39,8 @@ void ASTQueryWithOutput::formatImpl(const FormatSettings & s, FormatState & stat\n         s.ostr << (s.hilite ? hilite_keyword : \"\");\n         if (is_outfile_append)\n             s.ostr << \" APPEND\";\n+        if (is_outfile_truncate)\n+            s.ostr << \" TRUNCATE\";\n         if (is_into_outfile_with_stdout)\n             s.ostr << \" AND STDOUT\";\n         s.ostr << (s.hilite ? hilite_none : \"\");\ndiff --git a/src/Parsers/ASTQueryWithOutput.h b/src/Parsers/ASTQueryWithOutput.h\nindex 7db021405e7f..6f9cafc89a96 100644\n--- a/src/Parsers/ASTQueryWithOutput.h\n+++ b/src/Parsers/ASTQueryWithOutput.h\n@@ -17,6 +17,7 @@ class ASTQueryWithOutput : public IAST\n     ASTPtr out_file;\n     bool is_into_outfile_with_stdout = false;\n     bool is_outfile_append = false;\n+    bool is_outfile_truncate = false;\n     ASTPtr format;\n     ASTPtr settings_ast;\n     ASTPtr compression;\ndiff --git a/src/Parsers/ParserQueryWithOutput.cpp b/src/Parsers/ParserQueryWithOutput.cpp\nindex 6796f4528c4d..2bfe7353be41 100644\n--- a/src/Parsers/ParserQueryWithOutput.cpp\n+++ b/src/Parsers/ParserQueryWithOutput.cpp\n@@ -109,6 +109,12 @@ bool ParserQueryWithOutput::parseImpl(Pos & pos, ASTPtr & node, Expected & expec\n             query_with_output.is_outfile_append = true;\n         }\n \n+        ParserKeyword s_truncate(\"TRUNCATE\");\n+        if (s_truncate.ignore(pos, expected))\n+        {\n+            query_with_output.is_outfile_truncate = true;\n+        }\n+\n         ParserKeyword s_stdout(\"AND STDOUT\");\n         if (s_stdout.ignore(pos, expected))\n         {\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02050_clickhouse_client_local_exception.sh b/tests/queries/0_stateless/02050_clickhouse_client_local_exception.sh\nindex eac085a914ed..a2bb29377aca 100755\n--- a/tests/queries/0_stateless/02050_clickhouse_client_local_exception.sh\n+++ b/tests/queries/0_stateless/02050_clickhouse_client_local_exception.sh\n@@ -10,4 +10,4 @@ function cleanup()\n     rm \"${CLICKHOUSE_TMP}/test_exception\"\n }\n trap cleanup EXIT\n-$CLICKHOUSE_LOCAL --query=\"SELECT 1 INTO OUTFILE '${CLICKHOUSE_TMP}/test_exception' FORMAT Native\" 2>&1 | grep -q \"Code: 76. DB::ErrnoException:\" && echo 'OK' || echo 'FAIL' ||:\n+$CLICKHOUSE_LOCAL --query=\"SELECT 1 INTO OUTFILE '${CLICKHOUSE_TMP}/test_exception' FORMAT Native\" 2>&1 | grep -q \"Code: 504. DB::Exception:\" && echo 'OK' || echo 'FAIL' ||:\ndiff --git a/tests/queries/0_stateless/02346_into_outfile_and_stdout.sh b/tests/queries/0_stateless/02346_into_outfile_and_stdout.sh\nindex 021dc9125d40..38145ab3e518 100755\n--- a/tests/queries/0_stateless/02346_into_outfile_and_stdout.sh\n+++ b/tests/queries/0_stateless/02346_into_outfile_and_stdout.sh\n@@ -66,7 +66,7 @@ performBadQuery \"bad_query_incorrect_usage\" \"SELECT 1, 2, 3 INTO OUTFILE AND STD\n \n performBadQuery \"bad_query_no_into_outfile\" \"SELECT 1, 2, 3 AND STDOUT'\" \"SYNTAX_ERROR\"\n \n-performFileExists \"bad_query_file_exists\" \"SELECT 1, 2, 3 INTO OUTFILE '${CLICKHOUSE_TMP}/test_into_outfile_and_stdout_bad_query_file_exists.out' AND STDOUT\" \"File exists. (CANNOT_OPEN_FILE)\"\n+performFileExists \"bad_query_file_exists\" \"SELECT 1, 2, 3 INTO OUTFILE '${CLICKHOUSE_TMP}/test_into_outfile_and_stdout_bad_query_file_exists.out' AND STDOUT\" \"File ${CLICKHOUSE_TMP}/test_into_outfile_and_stdout_bad_query_file_exists.out exists, consider using APPEND or TRUNCATE.\"\n \n performCompression \"compression\" \"SELECT * FROM (SELECT 'Hello, World! From clickhouse.') INTO OUTFILE '${CLICKHOUSE_TMP}/test_into_outfile_and_stdout_compression.gz' AND STDOUT COMPRESSION 'GZ' FORMAT TabSeparated\"\n \n",
  "problem_statement": "Bad usability of exception messages when a file already exists in INTO OUTFILE\n**Describe the issue**\r\n```\r\nmilovidov-desktop :) SELECT * FROM numbers(10) INTO OUTFILE 'numbers.tsv'\r\n\r\nSELECT *\r\nFROM numbers(10)\r\nINTO OUTFILE 'numbers.tsv'\r\n\r\nQuery id: 4512f761-2b36-4a25-9ccd-22982a17eb64\r\n\r\nOk.\r\nException on client:\r\nCode: 76. DB::Exception: Code: 76. DB::ErrnoException: Cannot open file numbers.tsv, errno: 17, strerror: File exists. (CANNOT_OPEN_FILE) (version 23.5.1.1). (CANNOT_OPEN_FILE)\r\n```\r\n\r\n1. It prints Ok, but then prints the exception message.\r\n2. It prints `Code: 76.` and `Exception` twice.\r\n3. It prints `CANNOT_OPEN_FILE` twice.\r\n4. It does not suggest the usage of the `APPEND` syntax.\n",
  "hints_text": "How can we enforce file override? FYI, I added exclamation mark suffix for this in JDBC driver, for example:\r\n```sql\r\nSELECT * FROM numbers(10) INTO OUTFILE '~/numbers.tsv'\r\nfile         |format|compression|level|bytes|\r\n-------------+------+-----------+-----+-----+\r\n~/numbers.tsv|TSV   |none       |   -1|   20|\r\n\r\nSELECT * FROM numbers(10) INTO OUTFILE '~/numbers.tsv'\r\nSQL Error [HY000]: Output file [/Users/zhicwu/numbers.tsv] already exists!\r\n\r\nSELECT * FROM numbers(10) INTO OUTFILE '~/numbers.tsv!'\r\nfile         |format|compression|level|bytes|\r\n-------------+------+-----------+-----+-----+\r\n~/numbers.tsv|TSV   |none       |   -1|   20|\r\n```\n@zhicwu Introduce `INTO OUTFILE '...' TRUNCATE` similarly to `INTO OUTFILE '...' APPEND`.\r\n\r\nPS. I don't like the idea of an exclamation mark because it is a \"mini-language\" inside a file name, and maybe the file name can contain an exclamation mark already.\nThanks. Will sync the change in jdbc driver for consistency.",
  "created_at": "2023-06-13T17:09:01Z",
  "modified_files": [
    "src/Client/ClientBase.cpp",
    "src/Client/Suggest.cpp",
    "src/Parsers/ASTQueryWithOutput.cpp",
    "src/Parsers/ASTQueryWithOutput.h",
    "src/Parsers/ParserQueryWithOutput.cpp"
  ],
  "modified_test_files": [
    "tests/queries/0_stateless/02050_clickhouse_client_local_exception.sh",
    "tests/queries/0_stateless/02346_into_outfile_and_stdout.sh"
  ]
}