{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 43020,
  "instance_id": "ClickHouse__ClickHouse-43020",
  "issue_numbers": [
    "32439",
    "37431",
    "42221",
    "43011"
  ],
  "base_commit": "1c288e47dea4197808243358f8370c1c4e70de80",
  "patch": "diff --git a/.gitmodules b/.gitmodules\nindex 0805b6d54926..406e8a7e11e7 100644\n--- a/.gitmodules\n+++ b/.gitmodules\n@@ -104,13 +104,13 @@\n \turl = https://github.com/ClickHouse/aws-sdk-cpp.git\n [submodule \"aws-c-event-stream\"]\n \tpath = contrib/aws-c-event-stream\n-\turl = https://github.com/ClickHouse/aws-c-event-stream.git\n+\turl = https://github.com/awslabs/aws-c-event-stream.git\n [submodule \"aws-c-common\"]\n \tpath = contrib/aws-c-common\n \turl = https://github.com/ClickHouse/aws-c-common.git\n [submodule \"aws-checksums\"]\n \tpath = contrib/aws-checksums\n-\turl = https://github.com/ClickHouse/aws-checksums.git\n+\turl = https://github.com/awslabs/aws-checksums.git\n [submodule \"contrib/curl\"]\n \tpath = contrib/curl\n \turl = https://github.com/curl/curl.git\n@@ -294,3 +294,33 @@\n [submodule \"contrib/libdivide\"]\n \tpath = contrib/libdivide\n \turl = https://github.com/ridiculousfish/libdivide.git\n+[submodule \"contrib/aws-crt-cpp\"]\n+\tpath = contrib/aws-crt-cpp\n+\turl = https://github.com/ClickHouse/aws-crt-cpp.git\n+[submodule \"contrib/aws-c-io\"]\n+\tpath = contrib/aws-c-io\n+\turl = https://github.com/ClickHouse/aws-c-io.git\n+[submodule \"contrib/aws-c-mqtt\"]\n+\tpath = contrib/aws-c-mqtt\n+\turl = https://github.com/awslabs/aws-c-mqtt.git\n+[submodule \"contrib/aws-c-auth\"]\n+\tpath = contrib/aws-c-auth\n+\turl = https://github.com/awslabs/aws-c-auth.git\n+[submodule \"contrib/aws-c-cal\"]\n+\tpath = contrib/aws-c-cal\n+\turl = https://github.com/ClickHouse/aws-c-cal.git\n+[submodule \"contrib/aws-c-sdkutils\"]\n+\tpath = contrib/aws-c-sdkutils\n+\turl = https://github.com/awslabs/aws-c-sdkutils.git\n+[submodule \"contrib/aws-c-http\"]\n+\tpath = contrib/aws-c-http\n+\turl = https://github.com/awslabs/aws-c-http.git\n+[submodule \"contrib/aws-c-s3\"]\n+\tpath = contrib/aws-c-s3\n+\turl = https://github.com/awslabs/aws-c-s3.git\n+[submodule \"contrib/aws-c-compression\"]\n+\tpath = contrib/aws-c-compression\n+\turl = https://github.com/awslabs/aws-c-compression.git\n+[submodule \"contrib/aws-s2n-tls\"]\n+\tpath = contrib/aws-s2n-tls\n+\turl = https://github.com/aws/s2n-tls.git\ndiff --git a/contrib/CMakeLists.txt b/contrib/CMakeLists.txt\nindex 6f80059498ea..13c4722e149f 100644\n--- a/contrib/CMakeLists.txt\n+++ b/contrib/CMakeLists.txt\n@@ -115,12 +115,25 @@ endif()\n add_contrib (llvm-project-cmake llvm-project)\n add_contrib (libfuzzer-cmake llvm-project)\n add_contrib (libxml2-cmake libxml2)\n-add_contrib (aws-s3-cmake\n+\n+add_contrib (aws-cmake\n     aws\n+    aws-c-auth\n+    aws-c-cal\n     aws-c-common\n+    aws-c-compression\n     aws-c-event-stream\n+    aws-c-http\n+    aws-c-io\n+    aws-c-mqtt\n+    aws-c-s3\n+    aws-c-sdkutils\n+    aws-s2n-tls\n     aws-checksums\n+    aws-crt-cpp\n+    aws-cmake\n )\n+\n add_contrib (base64-cmake base64)\n add_contrib (simdjson-cmake simdjson)\n add_contrib (rapidjson-cmake rapidjson)\ndiff --git a/contrib/aws b/contrib/aws\nindex 00b036045433..4a12641211d4 160000\n--- a/contrib/aws\n+++ b/contrib/aws\n@@ -1,1 +1,1 @@\n-Subproject commit 00b03604543367d7e310cb0993973fdcb723ea79\n+Subproject commit 4a12641211d4dbc8e2fdb2dd0f1eea0927db9252\ndiff --git a/contrib/aws-c-auth b/contrib/aws-c-auth\nnew file mode 160000\nindex 000000000000..30df6c407e2d\n--- /dev/null\n+++ b/contrib/aws-c-auth\n@@ -0,0 +1,1 @@\n+Subproject commit 30df6c407e2df43bd244e2c34c9b4a4b87372bfb\ndiff --git a/contrib/aws-c-cal b/contrib/aws-c-cal\nnew file mode 160000\nindex 000000000000..85dd7664b786\n--- /dev/null\n+++ b/contrib/aws-c-cal\n@@ -0,0 +1,1 @@\n+Subproject commit 85dd7664b786a389c6fb1a6f031ab4bb2282133d\ndiff --git a/contrib/aws-c-common b/contrib/aws-c-common\nindex 736a82d1697c..324fd1d973cc 160000\n--- a/contrib/aws-c-common\n+++ b/contrib/aws-c-common\n@@ -1,1 +1,1 @@\n-Subproject commit 736a82d1697c108b04a277e66438a7f4e19b6857\n+Subproject commit 324fd1d973ccb25c813aa747bf1759cfde5121c5\ndiff --git a/contrib/aws-c-compression b/contrib/aws-c-compression\nnew file mode 160000\nindex 000000000000..b517b7decd0d\n--- /dev/null\n+++ b/contrib/aws-c-compression\n@@ -0,0 +1,1 @@\n+Subproject commit b517b7decd0dac30be2162f5186c250221c53aff\ndiff --git a/contrib/aws-c-event-stream b/contrib/aws-c-event-stream\nindex 3bc33662f9cc..39bfa94a14b7 160000\n--- a/contrib/aws-c-event-stream\n+++ b/contrib/aws-c-event-stream\n@@ -1,1 +1,1 @@\n-Subproject commit 3bc33662f9ccff4f4cbcf9509cc78c26e022fde0\n+Subproject commit 39bfa94a14b7126bf0c1330286ef8db452d87e66\ndiff --git a/contrib/aws-c-http b/contrib/aws-c-http\nnew file mode 160000\nindex 000000000000..2c5a2a7d5556\n--- /dev/null\n+++ b/contrib/aws-c-http\n@@ -0,0 +1,1 @@\n+Subproject commit 2c5a2a7d5556600b9782ffa6c9d7e09964df1abc\ndiff --git a/contrib/aws-c-io b/contrib/aws-c-io\nnew file mode 160000\nindex 000000000000..5d32c453560d\n--- /dev/null\n+++ b/contrib/aws-c-io\n@@ -0,0 +1,1 @@\n+Subproject commit 5d32c453560d0823df521a686bf7fbacde7f9be3\ndiff --git a/contrib/aws-c-mqtt b/contrib/aws-c-mqtt\nnew file mode 160000\nindex 000000000000..882c689561a3\n--- /dev/null\n+++ b/contrib/aws-c-mqtt\n@@ -0,0 +1,1 @@\n+Subproject commit 882c689561a3db1466330ccfe3b63637e0a575d3\ndiff --git a/contrib/aws-c-s3 b/contrib/aws-c-s3\nnew file mode 160000\nindex 000000000000..a41255ece72a\n--- /dev/null\n+++ b/contrib/aws-c-s3\n@@ -0,0 +1,1 @@\n+Subproject commit a41255ece72a7c887bba7f9d998ca3e14f4c8a1b\ndiff --git a/contrib/aws-c-sdkutils b/contrib/aws-c-sdkutils\nnew file mode 160000\nindex 000000000000..25bf5cf225f9\n--- /dev/null\n+++ b/contrib/aws-c-sdkutils\n@@ -0,0 +1,1 @@\n+Subproject commit 25bf5cf225f977c3accc6a05a0a7a181ef2a4a30\ndiff --git a/contrib/aws-checksums b/contrib/aws-checksums\nindex 519d6d909381..48e7c0e01479 160000\n--- a/contrib/aws-checksums\n+++ b/contrib/aws-checksums\n@@ -1,1 +1,1 @@\n-Subproject commit 519d6d9093819b6cf89ffff589a27ef8f83d0f65\n+Subproject commit 48e7c0e01479232f225c8044d76c84e74192889d\ndiff --git a/contrib/aws-cmake/AwsFeatureTests.cmake b/contrib/aws-cmake/AwsFeatureTests.cmake\nnew file mode 100644\nindex 000000000000..54727e08d6b0\n--- /dev/null\n+++ b/contrib/aws-cmake/AwsFeatureTests.cmake\n@@ -0,0 +1,114 @@\n+# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+# SPDX-License-Identifier: Apache-2.0.\n+\n+include(CheckCSourceRuns)\n+\n+option(USE_CPU_EXTENSIONS \"Whenever possible, use functions optimized for CPUs with specific extensions (ex: SSE, AVX).\" ON)\n+\n+# In the current (11/2/21) state of mingw64, the packaged gcc is not capable of emitting properly aligned avx2 instructions under certain circumstances.\n+# This leads to crashes for windows builds using mingw64 when invoking the avx2-enabled versions of certain functions.  Until we can find a better\n+# work-around, disable avx2 (and all other extensions) in mingw builds.\n+#\n+# https://gcc.gnu.org/bugzilla/show_bug.cgi?id=54412\n+#\n+if (MINGW)\n+    message(STATUS \"MINGW detected!  Disabling avx2 and other CPU extensions\")\n+    set(USE_CPU_EXTENSIONS OFF)\n+endif()\n+\n+if(NOT CMAKE_CROSSCOMPILING)\n+    check_c_source_runs(\"\n+    #include <stdbool.h>\n+    bool foo(int a, int b, int *c) {\n+        return __builtin_mul_overflow(a, b, c);\n+    }\n+\n+    int main() {\n+        int out;\n+        if (foo(1, 2, &out)) {\n+            return 0;\n+        }\n+\n+        return 0;\n+    }\" AWS_HAVE_GCC_OVERFLOW_MATH_EXTENSIONS)\n+\n+    if (USE_CPU_EXTENSIONS)\n+        check_c_source_runs(\"\n+        int main() {\n+        int foo = 42;\n+        _mulx_u32(1, 2, &foo);\n+        return foo != 2;\n+        }\" AWS_HAVE_MSVC_MULX)\n+    endif()\n+\n+endif()\n+\n+check_c_source_compiles(\"\n+    #include <Windows.h>\n+    #if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)\n+    int main() {\n+        return 0;\n+    }\n+    #else\n+    it's not windows desktop\n+    #endif\n+\" AWS_HAVE_WINAPI_DESKTOP)\n+\n+check_c_source_compiles(\"\n+    int main() {\n+#if !(defined(__x86_64__) || defined(__i386__) || defined(_M_X64) || defined(_M_IX86))\n+#    error \\\"not intel\\\"\n+#endif\n+        return 0;\n+    }\n+\" AWS_ARCH_INTEL)\n+\n+check_c_source_compiles(\"\n+    int main() {\n+#if !(defined(__aarch64__) || defined(_M_ARM64))\n+#    error \\\"not arm64\\\"\n+#endif\n+        return 0;\n+    }\n+\" AWS_ARCH_ARM64)\n+\n+check_c_source_compiles(\"\n+    int main() {\n+#if !(defined(__arm__) || defined(_M_ARM))\n+#    error \\\"not arm\\\"\n+#endif\n+        return 0;\n+    }\n+\" AWS_ARCH_ARM32)\n+\n+check_c_source_compiles(\"\n+int main() {\n+    int foo = 42, bar = 24;\n+    __asm__ __volatile__(\\\"\\\":\\\"=r\\\"(foo):\\\"r\\\"(bar):\\\"memory\\\");\n+}\" AWS_HAVE_GCC_INLINE_ASM)\n+\n+check_c_source_compiles(\"\n+#include <sys/auxv.h>\n+int main() {\n+#ifdef __linux__\n+    getauxval(AT_HWCAP);\n+    getauxval(AT_HWCAP2);\n+#endif\n+    return 0;\n+}\" AWS_HAVE_AUXV)\n+\n+string(REGEX MATCH \"^(aarch64|arm)\" ARM_CPU \"${CMAKE_SYSTEM_PROCESSOR}\")\n+if(NOT LEGACY_COMPILER_SUPPORT OR ARM_CPU)\n+    check_c_source_compiles(\"\n+    #include <execinfo.h>\n+    int main() {\n+        backtrace(NULL, 0);\n+        return 0;\n+    }\" AWS_HAVE_EXECINFO)\n+endif()\n+\n+check_c_source_compiles(\"\n+#include <linux/if_link.h>\n+int main() {\n+    return 1;\n+}\" AWS_HAVE_LINUX_IF_LINK_H)\ndiff --git a/contrib/aws-cmake/AwsSIMD.cmake b/contrib/aws-cmake/AwsSIMD.cmake\nnew file mode 100644\nindex 000000000000..bd6f4064e78b\n--- /dev/null\n+++ b/contrib/aws-cmake/AwsSIMD.cmake\n@@ -0,0 +1,74 @@\n+# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+# SPDX-License-Identifier: Apache-2.0.\n+\n+include(CheckCCompilerFlag)\n+include(CheckIncludeFile)\n+\n+if (USE_CPU_EXTENSIONS)\n+    if (MSVC)\n+        check_c_compiler_flag(\"/arch:AVX2\" HAVE_M_AVX2_FLAG)\n+        if (HAVE_M_AVX2_FLAG)\n+            set(AVX2_CFLAGS \"/arch:AVX2\")\n+        endif()\n+    else()\n+        check_c_compiler_flag(-mavx2 HAVE_M_AVX2_FLAG)\n+        if (HAVE_M_AVX2_FLAG)\n+            set(AVX2_CFLAGS \"-mavx -mavx2\")\n+        endif()\n+    endif()\n+\n+\n+    cmake_push_check_state()\n+    set(CMAKE_REQUIRED_FLAGS \"${CMAKE_REQUIRED_FLAGS} ${AVX2_CFLAGS}\")\n+\n+    check_c_source_compiles(\"\n+        #include <immintrin.h>\n+        #include <emmintrin.h>\n+        #include <string.h>\n+\n+        int main() {\n+            __m256i vec;\n+            memset(&vec, 0, sizeof(vec));\n+\n+            _mm256_shuffle_epi8(vec, vec);\n+            _mm256_set_epi32(1,2,3,4,5,6,7,8);\n+            _mm256_permutevar8x32_epi32(vec, vec);\n+\n+            return 0;\n+        }\"  HAVE_AVX2_INTRINSICS)\n+\n+    check_c_source_compiles(\"\n+        #include <immintrin.h>\n+        #include <string.h>\n+\n+        int main() {\n+            __m256i vec;\n+            memset(&vec, 0, sizeof(vec));\n+            return (int)_mm256_extract_epi64(vec, 2);\n+        }\" HAVE_MM256_EXTRACT_EPI64)\n+\n+    cmake_pop_check_state()\n+endif() # USE_CPU_EXTENSIONS\n+\n+macro(simd_add_definition_if target definition)\n+    if(${definition})\n+        target_compile_definitions(${target} PRIVATE -D${definition})\n+    endif(${definition})\n+endmacro(simd_add_definition_if)\n+\n+# Configure private preprocessor definitions for SIMD-related features\n+# Does not set any processor feature codegen flags\n+function(simd_add_definitions target)\n+    simd_add_definition_if(${target} HAVE_AVX2_INTRINSICS)\n+    simd_add_definition_if(${target} HAVE_MM256_EXTRACT_EPI64)\n+endfunction(simd_add_definitions)\n+\n+# Adds source files only if AVX2 is supported. These files will be built with\n+# avx2 intrinsics enabled.\n+# Usage: simd_add_source_avx2(target file1.c file2.c ...)\n+function(simd_add_source_avx2 target)\n+    foreach(file ${ARGN})\n+        target_sources(${target} PRIVATE ${file})\n+        set_source_files_properties(${file} PROPERTIES COMPILE_FLAGS \"${AVX2_CFLAGS}\")\n+    endforeach()\n+endfunction(simd_add_source_avx2)\ndiff --git a/contrib/aws-cmake/AwsThreadAffinity.cmake b/contrib/aws-cmake/AwsThreadAffinity.cmake\nnew file mode 100644\nindex 000000000000..9e53481272c6\n--- /dev/null\n+++ b/contrib/aws-cmake/AwsThreadAffinity.cmake\n@@ -0,0 +1,50 @@\n+# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+# SPDX-License-Identifier: Apache-2.0.\n+\n+include(CheckSymbolExists)\n+\n+# Check if the platform supports setting thread affinity\n+# (important for hitting full NIC entitlement on NUMA architectures)\n+function(aws_set_thread_affinity_method target)\n+\n+    # Non-POSIX, Android, and Apple platforms do not support thread affinity.\n+    if (NOT UNIX OR ANDROID OR APPLE)\n+        target_compile_definitions(${target} PRIVATE\n+            -DAWS_AFFINITY_METHOD=AWS_AFFINITY_METHOD_NONE)\n+        return()\n+    endif()\n+\n+    cmake_push_check_state()\n+    list(APPEND CMAKE_REQUIRED_DEFINITIONS -D_GNU_SOURCE)\n+    list(APPEND CMAKE_REQUIRED_LIBRARIES pthread)\n+\n+    set(headers \"pthread.h\")\n+    # BSDs put nonportable pthread declarations in a separate header.\n+    if(CMAKE_SYSTEM_NAME MATCHES BSD)\n+        set(headers \"${headers};pthread_np.h\")\n+    endif()\n+\n+    # Using pthread attrs is the preferred method, but is glibc-specific.\n+    check_symbol_exists(pthread_attr_setaffinity_np \"${headers}\" USE_PTHREAD_ATTR_SETAFFINITY)\n+    if (USE_PTHREAD_ATTR_SETAFFINITY)\n+        target_compile_definitions(${target} PRIVATE\n+            -DAWS_AFFINITY_METHOD=AWS_AFFINITY_METHOD_PTHREAD_ATTR)\n+        return()\n+    endif()\n+\n+    # This method is still nonportable, but is supported by musl and BSDs.\n+    check_symbol_exists(pthread_setaffinity_np \"${headers}\" USE_PTHREAD_SETAFFINITY)\n+    if (USE_PTHREAD_SETAFFINITY)\n+        target_compile_definitions(${target} PRIVATE\n+            -DAWS_AFFINITY_METHOD=AWS_AFFINITY_METHOD_PTHREAD)\n+        return()\n+    endif()\n+\n+    # If we got here, we expected thread affinity support but didn't find it.\n+    # We still build with degraded NUMA performance, but show a warning.\n+    message(WARNING \"No supported method for setting thread affinity\")\n+    target_compile_definitions(${target} PRIVATE\n+        -DAWS_AFFINITY_METHOD=AWS_AFFINITY_METHOD_NONE)\n+\n+    cmake_pop_check_state()\n+endfunction()\ndiff --git a/contrib/aws-cmake/AwsThreadName.cmake b/contrib/aws-cmake/AwsThreadName.cmake\nnew file mode 100644\nindex 000000000000..a67416b4f83c\n--- /dev/null\n+++ b/contrib/aws-cmake/AwsThreadName.cmake\n@@ -0,0 +1,61 @@\n+# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+# SPDX-License-Identifier: Apache-2.0.\n+\n+include(CheckSymbolExists)\n+\n+# Check how the platform supports setting thread name\n+function(aws_set_thread_name_method target)\n+\n+    if (WINDOWS)\n+        # On Windows we do a runtime check, instead of compile-time check\n+        return()\n+    elseif (APPLE)\n+        # All Apple platforms we support have the same function, so no need for compile-time check.\n+        return()\n+    endif()\n+\n+    cmake_push_check_state()\n+    list(APPEND CMAKE_REQUIRED_DEFINITIONS -D_GNU_SOURCE)\n+    list(APPEND CMAKE_REQUIRED_LIBRARIES pthread)\n+\n+    # The start of the test program\n+    set(c_source_start \"\n+        #define _GNU_SOURCE\n+        #include <pthread.h>\n+\n+        #if defined(__FreeBSD__) || defined(__NETBSD__)\n+        #include <pthread_np.h>\n+        #endif\n+\n+        int main() {\n+            pthread_t thread_id;\n+        \")\n+\n+    # The end of the test program\n+    set(c_source_end \"}\")\n+\n+    # pthread_setname_np() usually takes 2 args\n+    check_c_source_compiles(\"\n+        ${c_source_start}\n+        pthread_setname_np(thread_id, \\\"asdf\\\");\n+        ${c_source_end}\"\n+        PTHREAD_SETNAME_TAKES_2ARGS)\n+    if (PTHREAD_SETNAME_TAKES_2ARGS)\n+        target_compile_definitions(${target} PRIVATE -DAWS_PTHREAD_SETNAME_TAKES_2ARGS)\n+        return()\n+    endif()\n+\n+    # But on NetBSD it takes 3!\n+    check_c_source_compiles(\"\n+        ${c_source_start}\n+        pthread_setname_np(thread_id, \\\"asdf\\\", NULL);\n+        ${c_source_end}\n+        \" PTHREAD_SETNAME_TAKES_3ARGS)\n+    if (PTHREAD_SETNAME_TAKES_3ARGS)\n+        target_compile_definitions(${target} PRIVATE -DAWS_PTHREAD_SETNAME_TAKES_3ARGS)\n+        return()\n+    endif()\n+\n+    # And on many older/weirder platforms it's just not supported\n+    cmake_pop_check_state()\n+endfunction()\ndiff --git a/contrib/aws-cmake/CMakeLists.txt b/contrib/aws-cmake/CMakeLists.txt\nnew file mode 100644\nindex 000000000000..52533cd6483d\n--- /dev/null\n+++ b/contrib/aws-cmake/CMakeLists.txt\n@@ -0,0 +1,376 @@\n+set(ENABLE_AWS_S3_DEFAULT OFF)\n+\n+if(ENABLE_LIBRARIES AND (OS_LINUX OR OS_DARWIN) AND TARGET OpenSSL::Crypto)\n+    set(ENABLE_AWS_S3_DEFAULT ON)\n+endif()\n+\n+option(ENABLE_AWS_S3 \"Enable AWS S3\" ${ENABLE_AWS_S3_DEFAULT})\n+\n+if(ENABLE_AWS_S3)\n+    if(NOT TARGET OpenSSL::Crypto)\n+        message (${RECONFIGURE_MESSAGE_LEVEL} \"Can't use AWS SDK without OpenSSL\")\n+    elseif(NOT (OS_LINUX OR OS_DARWIN))\n+        message (${RECONFIGURE_MESSAGE_LEVEL} \"Can't use AWS SDK with platform ${CMAKE_SYSTEM_NAME}\")\n+    endif()\n+endif()\n+\n+if(NOT ENABLE_AWS_S3)\n+    message(STATUS \"Not using AWS S3\")\n+    return()\n+endif()\n+\n+\n+# Utilities.\n+include(\"${ClickHouse_SOURCE_DIR}/contrib/aws-cmake/AwsFeatureTests.cmake\")\n+include(\"${ClickHouse_SOURCE_DIR}/contrib/aws-cmake/AwsThreadAffinity.cmake\")\n+include(\"${ClickHouse_SOURCE_DIR}/contrib/aws-cmake/AwsThreadName.cmake\")\n+include(\"${ClickHouse_SOURCE_DIR}/contrib/aws-cmake/AwsSIMD.cmake\")\n+\n+\n+# Gather sources and options.\n+set(AWS_SOURCES)\n+set(AWS_PUBLIC_INCLUDES)\n+set(AWS_PRIVATE_INCLUDES)\n+set(AWS_PUBLIC_COMPILE_DEFS)\n+set(AWS_PRIVATE_COMPILE_DEFS)\n+set(AWS_PRIVATE_LIBS)\n+\n+if (CMAKE_BUILD_TYPE_UC STREQUAL \"DEBUG\")\n+    list(APPEND AWS_PRIVATE_COMPILE_DEFS \"-DDEBUG_BUILD\")\n+endif()\n+\n+set(ENABLE_OPENSSL_ENCRYPTION ON)\n+if (ENABLE_OPENSSL_ENCRYPTION)\n+    list(APPEND AWS_PRIVATE_COMPILE_DEFS \"-DENABLE_OPENSSL_ENCRYPTION\")\n+endif()\n+\n+set(USE_S2N ON)\n+if (USE_S2N)\n+    list(APPEND AWS_PRIVATE_COMPILE_DEFS \"-DUSE_S2N\")\n+endif()\n+\n+\n+# Directories.\n+SET(AWS_SDK_DIR \"${ClickHouse_SOURCE_DIR}/contrib/aws\")\n+SET(AWS_SDK_CORE_DIR \"${AWS_SDK_DIR}/aws-cpp-sdk-core\")\n+SET(AWS_SDK_S3_DIR \"${AWS_SDK_DIR}/aws-cpp-sdk-s3\")\n+\n+SET(AWS_AUTH_DIR \"${ClickHouse_SOURCE_DIR}/contrib/aws-c-auth\")\n+SET(AWS_CAL_DIR \"${ClickHouse_SOURCE_DIR}/contrib/aws-c-cal\")\n+SET(AWS_CHECKSUMS_DIR \"${ClickHouse_SOURCE_DIR}/contrib/aws-checksums\")\n+SET(AWS_COMMON_DIR \"${ClickHouse_SOURCE_DIR}/contrib/aws-c-common\")\n+SET(AWS_COMPRESSION_DIR \"${ClickHouse_SOURCE_DIR}/contrib/aws-c-compression\")\n+SET(AWS_CRT_DIR \"${ClickHouse_SOURCE_DIR}/contrib/aws-crt-cpp\")\n+SET(AWS_EVENT_STREAM_DIR \"${ClickHouse_SOURCE_DIR}/contrib/aws-c-event-stream\")\n+SET(AWS_HTTP_DIR \"${ClickHouse_SOURCE_DIR}/contrib/aws-c-http\")\n+SET(AWS_IO_DIR \"${ClickHouse_SOURCE_DIR}/contrib/aws-c-io\")\n+SET(AWS_MQTT_DIR \"${ClickHouse_SOURCE_DIR}/contrib/aws-c-mqtt\")\n+SET(AWS_S2N_TLS_DIR \"${ClickHouse_SOURCE_DIR}/contrib/aws-s2n-tls\")\n+SET(AWS_S3_DIR \"${ClickHouse_SOURCE_DIR}/contrib/aws-c-s3\")\n+SET(AWS_SDKUTILS_DIR \"${ClickHouse_SOURCE_DIR}/contrib/aws-c-sdkutils\")\n+\n+\n+# aws-cpp-sdk-core\n+file(GLOB AWS_SDK_CORE_SRC\n+    \"${AWS_SDK_CORE_DIR}/source/*.cpp\"\n+    \"${AWS_SDK_CORE_DIR}/source/auth/*.cpp\"\n+    \"${AWS_SDK_CORE_DIR}/source/auth/bearer-token-provider/*.cpp\"\n+    \"${AWS_SDK_CORE_DIR}/source/auth/signer/*.cpp\"\n+    \"${AWS_SDK_CORE_DIR}/source/auth/signer-provider/*.cpp\"\n+    \"${AWS_SDK_CORE_DIR}/source/client/*.cpp\"\n+    \"${AWS_SDK_CORE_DIR}/source/config/*.cpp\"\n+    \"${AWS_SDK_CORE_DIR}/source/config/defaults/*.cpp\"\n+    \"${AWS_SDK_CORE_DIR}/source/endpoint/*.cpp\"\n+    \"${AWS_SDK_CORE_DIR}/source/endpoint/internal/*.cpp\"\n+    \"${AWS_SDK_CORE_DIR}/source/external/cjson/*.cpp\"\n+    \"${AWS_SDK_CORE_DIR}/source/external/tinyxml2/*.cpp\"\n+    \"${AWS_SDK_CORE_DIR}/source/http/*.cpp\"\n+    \"${AWS_SDK_CORE_DIR}/source/http/standard/*.cpp\"\n+    \"${AWS_SDK_CORE_DIR}/source/internal/*.cpp\"\n+    \"${AWS_SDK_CORE_DIR}/source/monitoring/*.cpp\"\n+    \"${AWS_SDK_CORE_DIR}/source/utils/*.cpp\"\n+    \"${AWS_SDK_CORE_DIR}/source/utils/base64/*.cpp\"\n+    \"${AWS_SDK_CORE_DIR}/source/utils/crypto/*.cpp\"\n+    \"${AWS_SDK_CORE_DIR}/source/utils/crypto/openssl/*.cpp\"\n+    \"${AWS_SDK_CORE_DIR}/source/utils/crypto/factory/*.cpp\"\n+    \"${AWS_SDK_CORE_DIR}/source/utils/event/*.cpp\"\n+    \"${AWS_SDK_CORE_DIR}/source/utils/json/*.cpp\"\n+    \"${AWS_SDK_CORE_DIR}/source/utils/logging/*.cpp\"\n+    \"${AWS_SDK_CORE_DIR}/source/utils/memory/*.cpp\"\n+    \"${AWS_SDK_CORE_DIR}/source/utils/memory/stl/*.cpp\"\n+    \"${AWS_SDK_CORE_DIR}/source/utils/stream/*.cpp\"\n+    \"${AWS_SDK_CORE_DIR}/source/utils/threading/*.cpp\"\n+    \"${AWS_SDK_CORE_DIR}/source/utils/xml/*.cpp\"\n+)\n+\n+if(OS_LINUX OR OS_DARWIN)\n+    file(GLOB AWS_SDK_CORE_NET_SRC \"${AWS_SDK_CORE_DIR}/source/net/linux-shared/*.cpp\")\n+    file(GLOB AWS_SDK_CORE_PLATFORM_SRC \"${AWS_SDK_CORE_DIR}/source/platform/linux-shared/*.cpp\")\n+else()\n+    file(GLOB AWS_SDK_CORE_NET_SRC \"${AWS_SDK_CORE_DIR}/source/net/*.cpp\")\n+    set(AWS_SDK_CORE_PLATFORM_SRC)\n+endif()\n+\n+OPTION(USE_AWS_MEMORY_MANAGEMENT \"Aws memory management\" OFF)\n+configure_file(\"${AWS_SDK_CORE_DIR}/include/aws/core/SDKConfig.h.in\"\n+    \"${CMAKE_CURRENT_BINARY_DIR}/include/aws/core/SDKConfig.h\" @ONLY)\n+\n+list(APPEND AWS_PUBLIC_COMPILE_DEFS \"-DAWS_SDK_VERSION_MAJOR=1\")\n+list(APPEND AWS_PUBLIC_COMPILE_DEFS \"-DAWS_SDK_VERSION_MINOR=10\")\n+list(APPEND AWS_PUBLIC_COMPILE_DEFS \"-DAWS_SDK_VERSION_PATCH=36\")\n+    \n+list(APPEND AWS_SOURCES ${AWS_SDK_CORE_SRC} ${AWS_SDK_CORE_NET_SRC} ${AWS_SDK_CORE_PLATFORM_SRC})\n+\n+list(APPEND AWS_PUBLIC_INCLUDES\n+    \"${AWS_SDK_CORE_DIR}/include/\"\n+    \"${CMAKE_CURRENT_BINARY_DIR}/include\"\n+)\n+\n+\n+# aws-cpp-sdk-s3\n+file(GLOB AWS_SDK_S3_SRC\n+    \"${AWS_SDK_S3_DIR}/source/*.cpp\"\n+    \"${AWS_SDK_S3_DIR}/source/model/*.cpp\"\n+)\n+\n+list(APPEND AWS_SOURCES ${AWS_SDK_S3_SRC})\n+list(APPEND AWS_PUBLIC_INCLUDES \"${AWS_SDK_S3_DIR}/include/\")\n+\n+\n+# aws-c-auth\n+file(GLOB AWS_AUTH_SRC\n+    \"${AWS_AUTH_DIR}/source/*.c\"\n+)\n+\n+list(APPEND AWS_SOURCES ${AWS_AUTH_SRC})\n+list(APPEND AWS_PUBLIC_INCLUDES \"${AWS_AUTH_DIR}/include/\")\n+\n+\n+# aws-c-cal\n+file(GLOB AWS_CAL_SRC\n+    \"${AWS_CAL_DIR}/source/*.c\"\n+)\n+\n+if (ENABLE_OPENSSL_ENCRYPTION)\n+    file(GLOB AWS_CAL_OS_SRC\n+        \"${AWS_CAL_DIR}/source/unix/*.c\"\n+    )\n+    list(APPEND AWS_PRIVATE_LIBS OpenSSL::Crypto)\n+endif()\n+\n+list(APPEND AWS_SOURCES ${AWS_CAL_SRC} ${AWS_CAL_OS_SRC})\n+list(APPEND AWS_PRIVATE_INCLUDES \"${AWS_CAL_DIR}/include/\")\n+\n+\n+# aws-c-event-stream\n+file(GLOB AWS_EVENT_STREAM_SRC\n+    \"${AWS_EVENT_STREAM_DIR}/source/*.c\"\n+)\n+\n+list(APPEND AWS_SOURCES ${AWS_EVENT_STREAM_SRC})\n+list(APPEND AWS_PRIVATE_INCLUDES \"${AWS_EVENT_STREAM_DIR}/include/\")\n+\n+\n+# aws-c-common\n+file(GLOB AWS_COMMON_SRC\n+    \"${AWS_COMMON_DIR}/source/*.c\"\n+    \"${AWS_COMMON_DIR}/source/external/*.c\"\n+    \"${AWS_COMMON_DIR}/source/posix/*.c\"\n+)\n+\n+file(GLOB AWS_COMMON_ARCH_SRC\n+    \"${AWS_COMMON_DIR}/source/arch/generic/*.c\"\n+)\n+\n+if (AWS_ARCH_INTEL)\n+    file(GLOB AWS_COMMON_ARCH_SRC\n+        \"${AWS_COMMON_DIR}/source/arch/intel/cpuid.c\"\n+        \"${AWS_COMMON_DIR}/source/arch/intel/asm/*.c\"\n+    )\n+elseif (AWS_ARCH_ARM64 OR AWS_ARCH_ARM32)\n+    if (AWS_HAVE_AUXV)\n+        file(GLOB AWS_COMMON_ARCH_SRC\n+            \"${AWS_COMMON_DIR}/source/arch/arm/asm/*.c\"\n+        )\n+    endif()\n+endif()\n+\n+set(AWS_COMMON_AVX2_SRC)\n+if (HAVE_AVX2_INTRINSICS)\n+    list(APPEND AWS_PRIVATE_COMPILE_DEFS \"-DUSE_SIMD_ENCODING\")\n+    set(AWS_COMMON_AVX2_SRC \"${AWS_COMMON_DIR}/source/arch/intel/encoding_avx2.c\")\n+    set_source_files_properties(${AWS_COMMON_AVX2_SRC} PROPERTIES COMPILE_FLAGS \"${AVX2_CFLAGS}\")\n+endif()\n+\n+configure_file(\"${AWS_COMMON_DIR}/include/aws/common/config.h.in\"\n+    \"${CMAKE_CURRENT_BINARY_DIR}/include/aws/common/config.h\" @ONLY)\n+\n+list(APPEND AWS_SOURCES ${AWS_COMMON_SRC} ${AWS_COMMON_ARCH_SRC} ${AWS_COMMON_AVX2_SRC})\n+\n+list(APPEND AWS_PUBLIC_INCLUDES\n+    \"${AWS_COMMON_DIR}/include/\"\n+    \"${CMAKE_CURRENT_BINARY_DIR}/include\"\n+)\n+\n+\n+# aws-checksums\n+file(GLOB AWS_CHECKSUMS_SRC\n+    \"${AWS_CHECKSUMS_DIR}/source/*.c\"\n+    \"${AWS_CHECKSUMS_DIR}/source/intel/*.c\"\n+    \"${AWS_CHECKSUMS_DIR}/source/intel/asm/*.c\"\n+    \"${AWS_CHECKSUMS_DIR}/source/arm/*.c\"\n+)\n+\n+if(AWS_ARCH_INTEL AND AWS_HAVE_GCC_INLINE_ASM)\n+    file(GLOB AWS_CHECKSUMS_ARCH_SRC\n+            \"${AWS_CHECKSUMS_DIR}/source/intel/asm/*.c\"\n+    )\n+endif()\n+\n+if (AWS_ARCH_ARM64)\n+    file(GLOB AWS_CHECKSUMS_ARCH_SRC\n+        \"${AWS_CHECKSUMS_DIR}/source/arm/*.c\"\n+    )\n+    set_source_files_properties(\"${AWS_CHECKSUMS_DIR}/source/arm/crc32c_arm.c\" PROPERTIES COMPILE_FLAGS -march=armv8-a+crc)\n+elseif (AWS_ARCH_ARM32)\n+    if (AWS_ARM32_CRC)\n+        file(GLOB AWS_CHECKSUMS_ARCH_SRC\n+            \"${AWS_CHECKSUMS_DIR}/source/arm/*.c\"\n+            \"${AWS_CHECKSUMS_DIR}/source/arm/asm/*.c\"\n+        )\n+        set_source_files_properties(source/arm/crc32c_arm.c PROPERTIES COMPILE_FLAGS -march=armv8-a+crc)\n+    endif()\n+endif()\n+\n+list(APPEND AWS_SOURCES ${AWS_CHECKSUMS_SRC} ${AWS_CHECKSUMS_ARCH_SRC})\n+list(APPEND AWS_PRIVATE_INCLUDES \"${AWS_CHECKSUMS_DIR}/include/\")\n+\n+\n+# aws-c-io\n+file(GLOB AWS_IO_SRC\n+    \"${AWS_IO_DIR}/source/*.c\"\n+)\n+\n+if (OS_LINUX)\n+    file(GLOB AWS_IO_OS_SRC\n+        \"${AWS_IO_DIR}/source/linux/*.c\"\n+        \"${AWS_IO_DIR}/source/posix/*.c\"\n+    )\n+elseif (OS_DARWIN)\n+    file(GLOB AWS_IO_OS_SRC\n+        \"${AWS_IO_DIR}/source/bsd/*.c\"\n+        \"${AWS_IO_DIR}/source/posix/*.c\"\n+    )\n+endif()\n+\n+set(AWS_IO_TLS_SRC)\n+if (USE_S2N)\n+    file(GLOB AWS_IO_TLS_SRC\n+            \"${AWS_IO_DIR}/source/s2n/*.c\"\n+    )\n+endif()\n+\n+list(APPEND AWS_SOURCES ${AWS_IO_SRC} ${AWS_IO_OS_SRC} ${AWS_IO_TLS_SRC})\n+list(APPEND AWS_PUBLIC_INCLUDES \"${AWS_IO_DIR}/include/\")\n+\n+\n+# aws-s2n-tls\n+if (USE_S2N)\n+    file(GLOB AWS_S2N_TLS_SRC\n+        \"${AWS_S2N_TLS_DIR}/crypto/*.c\"\n+        \"${AWS_S2N_TLS_DIR}/error/*.c\"\n+        \"${AWS_S2N_TLS_DIR}/stuffer/*.c\"\n+        \"${AWS_S2N_TLS_DIR}/pq-crypto/*.c\"\n+        \"${AWS_S2N_TLS_DIR}/pq-crypto/kyber_r3/*.c\"\n+        \"${AWS_S2N_TLS_DIR}/tls/*.c\"\n+        \"${AWS_S2N_TLS_DIR}/tls/extensions/*.c\"\n+        \"${AWS_S2N_TLS_DIR}/utils/*.c\"\n+    )\n+\n+    list(APPEND AWS_SOURCES ${AWS_S2N_TLS_SRC})\n+\n+    list(APPEND AWS_PRIVATE_INCLUDES\n+        \"${AWS_S2N_TLS_DIR}/\"\n+        \"${AWS_S2N_TLS_DIR}/api/\"\n+    )\n+endif()\n+\n+\n+# aws-crt-cpp\n+file(GLOB AWS_CRT_SRC\n+    \"${AWS_CRT_DIR}/source/*.cpp\"\n+    \"${AWS_CRT_DIR}/source/auth/*.cpp\"\n+    \"${AWS_CRT_DIR}/source/crypto/*.cpp\"\n+    \"${AWS_CRT_DIR}/source/endpoints/*.cpp\"\n+    \"${AWS_CRT_DIR}/source/external/*.cpp\"\n+    \"${AWS_CRT_DIR}/source/http/*.cpp\"\n+    \"${AWS_CRT_DIR}/source/io/*.cpp\"\n+)\n+\n+list(APPEND AWS_SOURCES ${AWS_CRT_SRC})\n+list(APPEND AWS_PUBLIC_INCLUDES \"${AWS_CRT_DIR}/include/\")\n+\n+\n+# aws-c-mqtt\n+file(GLOB AWS_MQTT_SRC\n+    \"${AWS_MQTT_DIR}/source/*.c\"\n+)\n+\n+list(APPEND AWS_SOURCES ${AWS_MQTT_SRC})\n+list(APPEND AWS_PUBLIC_INCLUDES \"${AWS_MQTT_DIR}/include/\")\n+\n+\n+# aws-c-http\n+file(GLOB AWS_HTTP_SRC\n+    \"${AWS_HTTP_DIR}/source/*.c\"\n+)\n+\n+list(APPEND AWS_SOURCES ${AWS_HTTP_SRC})\n+list(APPEND AWS_PRIVATE_INCLUDES \"${AWS_HTTP_DIR}/include/\")\n+\n+\n+# aws-c-compression\n+file(GLOB AWS_COMPRESSION_SRC\n+    \"${AWS_COMPRESSION_DIR}/source/*.c\"\n+)\n+\n+list(APPEND AWS_SOURCES ${AWS_COMPRESSION_SRC})\n+list(APPEND AWS_PRIVATE_INCLUDES \"${AWS_COMPRESSION_DIR}/include/\")\n+\n+\n+# aws-c-s3\n+file(GLOB AWS_S3_SRC\n+    \"${AWS_S3_DIR}/source/*.c\"\n+)\n+\n+list(APPEND AWS_SOURCES ${AWS_S3_SRC})\n+list(APPEND AWS_PRIVATE_INCLUDES \"${AWS_S3_DIR}/include/\")\n+\n+\n+# aws-c-sdkutils\n+file(GLOB AWS_SDKUTILS_SRC\n+    \"${AWS_SDKUTILS_DIR}/source/*.c\"\n+)\n+\n+list(APPEND AWS_SOURCES ${AWS_SDKUTILS_SRC})\n+list(APPEND AWS_PUBLIC_INCLUDES \"${AWS_SDKUTILS_DIR}/include/\")\n+\n+\n+# Add library.\n+add_library(_aws ${AWS_SOURCES})\n+\n+target_include_directories(_aws SYSTEM BEFORE PUBLIC ${AWS_PUBLIC_INCLUDES})\n+target_include_directories(_aws SYSTEM BEFORE PRIVATE ${AWS_PRIVATE_INCLUDES})\n+target_compile_definitions(_aws PUBLIC ${AWS_PUBLIC_COMPILE_DEFS})\n+target_compile_definitions(_aws PRIVATE ${AWS_PRIVATE_COMPILE_DEFS})\n+target_link_libraries(_aws PRIVATE ${AWS_PRIVATE_LIBS})\n+\n+aws_set_thread_affinity_method(_aws)\n+aws_set_thread_name_method(_aws)\n+\n+# The library is large - avoid bloat.\n+if (OMIT_HEAVY_DEBUG_SYMBOLS)\n+    target_compile_options (_aws PRIVATE -g0)\n+endif()\n+\n+add_library(ch_contrib::aws_s3 ALIAS _aws)\ndiff --git a/contrib/aws-crt-cpp b/contrib/aws-crt-cpp\nnew file mode 160000\nindex 000000000000..ec0bea288f45\n--- /dev/null\n+++ b/contrib/aws-crt-cpp\n@@ -0,0 +1,1 @@\n+Subproject commit ec0bea288f451d884c0d80d534bc5c66241c39a4\ndiff --git a/contrib/aws-s2n-tls b/contrib/aws-s2n-tls\nnew file mode 160000\nindex 000000000000..15d534e8a9ca\n--- /dev/null\n+++ b/contrib/aws-s2n-tls\n@@ -0,0 +1,1 @@\n+Subproject commit 15d534e8a9ca1eda6bacee514e37d08b4f38a526\ndiff --git a/contrib/aws-s3-cmake/CMakeLists.txt b/contrib/aws-s3-cmake/CMakeLists.txt\ndeleted file mode 100644\nindex eabed6017226..000000000000\n--- a/contrib/aws-s3-cmake/CMakeLists.txt\n+++ /dev/null\n@@ -1,122 +0,0 @@\n-if(NOT OS_FREEBSD)\n-    option(ENABLE_S3 \"Enable S3\" ${ENABLE_LIBRARIES})\n-elseif(ENABLE_S3)\n-    message (${RECONFIGURE_MESSAGE_LEVEL} \"Can't use S3 on FreeBSD\")\n-endif()\n-\n-if(NOT ENABLE_S3)\n-    message(STATUS \"Not using S3\")\n-    return()\n-endif()\n-\n-SET(AWS_S3_LIBRARY_DIR \"${ClickHouse_SOURCE_DIR}/contrib/aws/aws-cpp-sdk-s3\")\n-SET(AWS_CORE_LIBRARY_DIR \"${ClickHouse_SOURCE_DIR}/contrib/aws/aws-cpp-sdk-core\")\n-SET(AWS_CHECKSUMS_LIBRARY_DIR \"${ClickHouse_SOURCE_DIR}/contrib/aws-checksums\")\n-SET(AWS_COMMON_LIBRARY_DIR \"${ClickHouse_SOURCE_DIR}/contrib/aws-c-common\")\n-SET(AWS_EVENT_STREAM_LIBRARY_DIR \"${ClickHouse_SOURCE_DIR}/contrib/aws-c-event-stream\")\n-\n-OPTION(USE_AWS_MEMORY_MANAGEMENT \"Aws memory management\" OFF)\n-configure_file(\"${AWS_CORE_LIBRARY_DIR}/include/aws/core/SDKConfig.h.in\"\n-    \"${CMAKE_CURRENT_BINARY_DIR}/include/aws/core/SDKConfig.h\" @ONLY)\n-\n-configure_file(\"${AWS_COMMON_LIBRARY_DIR}/include/aws/common/config.h.in\"\n-    \"${CMAKE_CURRENT_BINARY_DIR}/include/aws/common/config.h\" @ONLY)\n-\n-\n-file(GLOB AWS_CORE_SOURCES\n-    \"${AWS_CORE_LIBRARY_DIR}/source/*.cpp\"\n-    \"${AWS_CORE_LIBRARY_DIR}/source/auth/*.cpp\"\n-    \"${AWS_CORE_LIBRARY_DIR}/source/client/*.cpp\"\n-    \"${AWS_CORE_LIBRARY_DIR}/source/http/*.cpp\"\n-    \"${AWS_CORE_LIBRARY_DIR}/source/http/standard/*.cpp\"\n-    \"${AWS_CORE_LIBRARY_DIR}/source/config/*.cpp\"\n-    \"${AWS_CORE_LIBRARY_DIR}/source/external/cjson/*.cpp\"\n-    \"${AWS_CORE_LIBRARY_DIR}/source/external/tinyxml2/*.cpp\"\n-    \"${AWS_CORE_LIBRARY_DIR}/source/internal/*.cpp\"\n-    \"${AWS_CORE_LIBRARY_DIR}/source/monitoring/*.cpp\"\n-    \"${AWS_CORE_LIBRARY_DIR}/source/net/*.cpp\"\n-    \"${AWS_CORE_LIBRARY_DIR}/source/linux-shared/*.cpp\"\n-    \"${AWS_CORE_LIBRARY_DIR}/source/platform/linux-shared/*.cpp\"\n-    \"${AWS_CORE_LIBRARY_DIR}/source/utils/*.cpp\"\n-    \"${AWS_CORE_LIBRARY_DIR}/source/utils/base64/*.cpp\"\n-    \"${AWS_CORE_LIBRARY_DIR}/source/utils/event/*.cpp\"\n-    \"${AWS_CORE_LIBRARY_DIR}/source/utils/crypto/*.cpp\"\n-    \"${AWS_CORE_LIBRARY_DIR}/source/utils/crypto/openssl/*.cpp\"\n-    \"${AWS_CORE_LIBRARY_DIR}/source/utils/crypto/factory/*.cpp\"\n-    \"${AWS_CORE_LIBRARY_DIR}/source/utils/json/*.cpp\"\n-    \"${AWS_CORE_LIBRARY_DIR}/source/utils/logging/*.cpp\"\n-    \"${AWS_CORE_LIBRARY_DIR}/source/utils/memory/*.cpp\"\n-    \"${AWS_CORE_LIBRARY_DIR}/source/utils/memory/stl/*.cpp\"\n-    \"${AWS_CORE_LIBRARY_DIR}/source/utils/stream/*.cpp\"\n-    \"${AWS_CORE_LIBRARY_DIR}/source/utils/threading/*.cpp\"\n-    \"${AWS_CORE_LIBRARY_DIR}/source/utils/xml/*.cpp\"\n-)\n-\n-file(GLOB AWS_S3_SOURCES\n-    \"${AWS_S3_LIBRARY_DIR}/source/*.cpp\"\n-)\n-\n-file(GLOB AWS_S3_MODEL_SOURCES\n-    \"${AWS_S3_LIBRARY_DIR}/source/model/*.cpp\"\n-)\n-\n-file(GLOB AWS_EVENT_STREAM_SOURCES\n-    \"${AWS_EVENT_STREAM_LIBRARY_DIR}/source/*.c\"\n-)\n-\n-file(GLOB AWS_COMMON_SOURCES\n-    \"${AWS_COMMON_LIBRARY_DIR}/source/*.c\"\n-    \"${AWS_COMMON_LIBRARY_DIR}/source/posix/*.c\"\n-)\n-\n-file(GLOB AWS_CHECKSUMS_SOURCES\n-    \"${AWS_CHECKSUMS_LIBRARY_DIR}/source/*.c\"\n-    \"${AWS_CHECKSUMS_LIBRARY_DIR}/source/intel/*.c\"\n-    \"${AWS_CHECKSUMS_LIBRARY_DIR}/source/arm/*.c\"\n-)\n-\n-file(GLOB S3_UNIFIED_SRC\n-    ${AWS_EVENT_STREAM_SOURCES}\n-    ${AWS_COMMON_SOURCES}\n-    ${AWS_S3_SOURCES}\n-    ${AWS_S3_MODEL_SOURCES}\n-    ${AWS_CORE_SOURCES}\n-)\n-\n-set(S3_INCLUDES\n-    \"${AWS_COMMON_LIBRARY_DIR}/include/\"\n-    \"${AWS_EVENT_STREAM_LIBRARY_DIR}/include/\"\n-    \"${AWS_S3_LIBRARY_DIR}/include/\"\n-    \"${AWS_CORE_LIBRARY_DIR}/include/\"\n-    \"${CMAKE_CURRENT_BINARY_DIR}/include/\"\n-)\n-\n-add_library(_aws_s3_checksums ${AWS_CHECKSUMS_SOURCES})\n-target_include_directories(_aws_s3_checksums SYSTEM PUBLIC \"${AWS_CHECKSUMS_LIBRARY_DIR}/include/\")\n-if(CMAKE_BUILD_TYPE_UC STREQUAL \"DEBUG\")\n-    target_compile_definitions(_aws_s3_checksums PRIVATE \"-DDEBUG_BUILD\")\n-endif()\n-set_target_properties(_aws_s3_checksums PROPERTIES LINKER_LANGUAGE C)\n-set_property(TARGET _aws_s3_checksums PROPERTY C_STANDARD 99)\n-\n-add_library(_aws_s3 ${S3_UNIFIED_SRC})\n-\n-target_compile_definitions(_aws_s3 PUBLIC \"AWS_SDK_VERSION_MAJOR=1\")\n-target_compile_definitions(_aws_s3 PUBLIC \"AWS_SDK_VERSION_MINOR=7\")\n-target_compile_definitions(_aws_s3 PUBLIC \"AWS_SDK_VERSION_PATCH=231\")\n-target_include_directories(_aws_s3 SYSTEM BEFORE PUBLIC ${S3_INCLUDES})\n-\n-if (TARGET OpenSSL::SSL)\n-    target_compile_definitions(_aws_s3 PUBLIC -DENABLE_OPENSSL_ENCRYPTION)\n-    target_link_libraries(_aws_s3 PRIVATE OpenSSL::Crypto OpenSSL::SSL)\n-endif()\n-\n-target_link_libraries(_aws_s3 PRIVATE _aws_s3_checksums)\n-\n-# The library is large - avoid bloat.\n-if (OMIT_HEAVY_DEBUG_SYMBOLS)\n-    target_compile_options (_aws_s3 PRIVATE -g0)\n-    target_compile_options (_aws_s3_checksums PRIVATE -g0)\n-endif()\n-\n-add_library(ch_contrib::aws_s3 ALIAS _aws_s3)\ndiff --git a/contrib/sysroot b/contrib/sysroot\nindex 0f41651860fa..f0081b2649b9 160000\n--- a/contrib/sysroot\n+++ b/contrib/sysroot\n@@ -1,1 +1,1 @@\n-Subproject commit 0f41651860fa4a530ecd68b93a15b8fd77397adf\n+Subproject commit f0081b2649b94837855f3bc7d05ef326b100bad8\ndiff --git a/src/IO/S3/PocoHTTPClient.cpp b/src/IO/S3/PocoHTTPClient.cpp\nindex 33dd3250c9fb..6153842520ba 100644\n--- a/src/IO/S3/PocoHTTPClient.cpp\n+++ b/src/IO/S3/PocoHTTPClient.cpp\n@@ -177,7 +177,7 @@ namespace\n     bool checkRequestCanReturn2xxAndErrorInBody(Aws::Http::HttpRequest & request)\n     {\n         auto query_params = request.GetQueryStringParameters();\n-        if (request.HasHeader(\"z-amz-copy-source\"))\n+        if (request.HasHeader(\"x-amz-copy-source\"))\n         {\n             /// CopyObject https://docs.aws.amazon.com/AmazonS3/latest/API/API_CopyObject.html\n             if (query_params.empty())\ndiff --git a/src/IO/S3Common.cpp b/src/IO/S3Common.cpp\nindex c03f7f073101..a1a4267496fd 100644\n--- a/src/IO/S3Common.cpp\n+++ b/src/IO/S3Common.cpp\n@@ -149,13 +149,12 @@ class AWSEC2MetadataClient : public Aws::Internal::AWSHttpResourceClient\n     static constexpr char EC2_IMDS_TOKEN_TTL_DEFAULT_VALUE[] = \"21600\";\n     static constexpr char EC2_IMDS_TOKEN_TTL_HEADER[] = \"x-aws-ec2-metadata-token-ttl-seconds\";\n \n-    static constexpr char EC2_DEFAULT_METADATA_ENDPOINT[] = \"http://169.254.169.254\";\n-\n public:\n     /// See EC2MetadataClient.\n \n-    explicit AWSEC2MetadataClient(const Aws::Client::ClientConfiguration & client_configuration)\n+    explicit AWSEC2MetadataClient(const Aws::Client::ClientConfiguration & client_configuration, const char * endpoint_)\n         : Aws::Internal::AWSHttpResourceClient(client_configuration)\n+        , endpoint(endpoint_)\n         , logger(&Poco::Logger::get(\"AWSEC2InstanceProfileConfigLoader\"))\n     {\n     }\n@@ -180,7 +179,7 @@ class AWSEC2MetadataClient : public Aws::Internal::AWSHttpResourceClient\n         {\n             std::lock_guard locker(token_mutex);\n \n-            LOG_TRACE(logger, \"Getting default credentials for EC2 instance.\");\n+            LOG_TRACE(logger, \"Getting default credentials for ec2 instance from {}\", endpoint);\n             auto result = GetResourceWithAWSWebServiceResult(endpoint.c_str(), EC2_SECURITY_CREDENTIALS_RESOURCE, nullptr);\n             credentials_string = result.GetPayload();\n             if (result.GetResponseCode() == Aws::Http::HttpResponseCode::UNAUTHORIZED)\n@@ -286,12 +285,50 @@ class AWSEC2MetadataClient : public Aws::Internal::AWSHttpResourceClient\n     }\n \n private:\n-    const Aws::String endpoint = EC2_DEFAULT_METADATA_ENDPOINT;\n+    const Aws::String endpoint;\n     mutable std::recursive_mutex token_mutex;\n     mutable Aws::String token;\n     Poco::Logger * logger;\n };\n \n+std::shared_ptr<AWSEC2MetadataClient> InitEC2MetadataClient(const Aws::Client::ClientConfiguration & client_configuration)\n+{\n+    Aws::String ec2_metadata_service_endpoint = Aws::Environment::GetEnv(\"AWS_EC2_METADATA_SERVICE_ENDPOINT\");\n+    auto * logger = &Poco::Logger::get(\"AWSEC2InstanceProfileConfigLoader\");\n+    if (ec2_metadata_service_endpoint.empty())\n+    {\n+        Aws::String ec2_metadata_service_endpoint_mode = Aws::Environment::GetEnv(\"AWS_EC2_METADATA_SERVICE_ENDPOINT_MODE\");\n+        if (ec2_metadata_service_endpoint_mode.length() == 0)\n+        {\n+            ec2_metadata_service_endpoint = \"http://169.254.169.254\"; //default to IPv4 default endpoint\n+        }\n+        else\n+        {\n+            if (ec2_metadata_service_endpoint_mode.length() == 4)\n+            {\n+                if (Aws::Utils::StringUtils::CaselessCompare(ec2_metadata_service_endpoint_mode.c_str(), \"ipv4\"))\n+                {\n+                    ec2_metadata_service_endpoint = \"http://169.254.169.254\"; //default to IPv4 default endpoint\n+                }\n+                else if (Aws::Utils::StringUtils::CaselessCompare(ec2_metadata_service_endpoint_mode.c_str(), \"ipv6\"))\n+                {\n+                    ec2_metadata_service_endpoint = \"http://[fd00:ec2::254]\";\n+                }\n+                else\n+                {\n+                    LOG_ERROR(logger, \"AWS_EC2_METADATA_SERVICE_ENDPOINT_MODE can only be set to ipv4 or ipv6, received: {}\", ec2_metadata_service_endpoint_mode);\n+                }\n+            }\n+            else\n+            {\n+                LOG_ERROR(logger, \"AWS_EC2_METADATA_SERVICE_ENDPOINT_MODE can only be set to ipv4 or ipv6, received: {}\", ec2_metadata_service_endpoint_mode);\n+            }\n+        }\n+    }\n+    LOG_INFO(logger, \"Using IMDS endpoint: {}\", ec2_metadata_service_endpoint);\n+    return std::make_shared<AWSEC2MetadataClient>(client_configuration, ec2_metadata_service_endpoint.c_str());\n+}\n+\n class AWSEC2InstanceProfileConfigLoader : public Aws::Config::AWSProfileConfigLoader\n {\n public:\n@@ -646,7 +683,7 @@ class S3CredentialsProviderChain : public Aws::Auth::AWSCredentialsProviderChain\n \n                 aws_client_configuration.retryStrategy = std::make_shared<Aws::Client::DefaultRetryStrategy>(1, 1000);\n \n-                auto ec2_metadata_client = std::make_shared<AWSEC2MetadataClient>(aws_client_configuration);\n+                auto ec2_metadata_client = InitEC2MetadataClient(aws_client_configuration);\n                 auto config_loader = std::make_shared<AWSEC2InstanceProfileConfigLoader>(ec2_metadata_client, !use_insecure_imds_request);\n \n                 AddProvider(std::make_shared<AWSInstanceProfileCredentialsProvider>(config_loader));\n",
  "test_patch": "diff --git a/tests/integration/test_s3_ec2_metadata/__init__.py b/tests/integration/test_s3_ec2_metadata/__init__.py\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/integration/test_s3_ec2_metadata/configs/use_environment_credentials.xml b/tests/integration/test_s3_ec2_metadata/configs/use_environment_credentials.xml\nnew file mode 100644\nindex 000000000000..db901ec0823b\n--- /dev/null\n+++ b/tests/integration/test_s3_ec2_metadata/configs/use_environment_credentials.xml\n@@ -0,0 +1,5 @@\n+<clickhouse>\n+    <s3>\n+        <use_environment_credentials>1</use_environment_credentials>\n+    </s3>\n+</clickhouse>\ndiff --git a/tests/integration/test_s3_ec2_metadata/ec2_metadata_server/request_response_server.py b/tests/integration/test_s3_ec2_metadata/ec2_metadata_server/request_response_server.py\nnew file mode 100644\nindex 000000000000..f347866be58c\n--- /dev/null\n+++ b/tests/integration/test_s3_ec2_metadata/ec2_metadata_server/request_response_server.py\n@@ -0,0 +1,36 @@\n+import http.server\n+import sys\n+\n+\n+class RequestHandler(http.server.BaseHTTPRequestHandler):\n+    def get_response(self):\n+        if self.path == \"/\":\n+            return \"OK\"\n+        elif self.path == \"/latest/meta-data/iam/security-credentials\":\n+            return \"myrole\"\n+        elif self.path == \"/latest/meta-data/iam/security-credentials/myrole\":\n+            return '{ \"Code\" : \"Success\", \"Type\" : \"AWS-HMAC\", \"AccessKeyId\" : \"minio\", \"SecretAccessKey\" : \"minio123\" }'\n+        else:\n+            return None\n+\n+    def do_HEAD(self):\n+        response = self.get_response()\n+        if response:\n+            self.send_response(200)\n+            self.send_header(\"Content-Type\", \"text/plain\")\n+            self.send_header(\"Content-Length\", len(response.encode()))\n+            self.end_headers()\n+        else:\n+            self.send_response(404)\n+            self.send_header(\"Content-Type\", \"text/plain\")\n+            self.end_headers()\n+\n+    def do_GET(self):\n+        self.do_HEAD()\n+        response = self.get_response()\n+        if response:\n+            self.wfile.write(response.encode())\n+\n+\n+httpd = http.server.HTTPServer((\"0.0.0.0\", int(sys.argv[1])), RequestHandler)\n+httpd.serve_forever()\ndiff --git a/tests/integration/test_s3_ec2_metadata/test.py b/tests/integration/test_s3_ec2_metadata/test.py\nnew file mode 100644\nindex 000000000000..982656df0098\n--- /dev/null\n+++ b/tests/integration/test_s3_ec2_metadata/test.py\n@@ -0,0 +1,94 @@\n+import pytest\n+from helpers.cluster import ClickHouseCluster\n+import logging\n+import os\n+import time\n+\n+SCRIPT_DIR = os.path.dirname(os.path.realpath(__file__))\n+\n+EC2_METADATA_SERVER_HOSTNAME = \"resolver\"\n+EC2_METADATA_SERVER_PORT = 8080\n+\n+cluster = ClickHouseCluster(__file__)\n+\n+node = cluster.add_instance(\n+    \"node\",\n+    with_minio=True,\n+    main_configs=[\"configs/use_environment_credentials.xml\"],\n+    env_variables={\n+        \"AWS_EC2_METADATA_SERVICE_ENDPOINT\": f\"{EC2_METADATA_SERVER_HOSTNAME}:{EC2_METADATA_SERVER_PORT}\",\n+    },\n+)\n+\n+\n+def start_ec2_metadata_server():\n+    logging.info(\"Starting EC2 metadata server\")\n+    container_id = cluster.get_container_id(\"resolver\")\n+\n+    cluster.copy_file_to_container(\n+        container_id,\n+        os.path.join(SCRIPT_DIR, \"ec2_metadata_server/request_response_server.py\"),\n+        \"request_response_server.py\",\n+    )\n+\n+    cluster.exec_in_container(\n+        container_id,\n+        [\"python\", \"request_response_server.py\", str(EC2_METADATA_SERVER_PORT)],\n+        detach=True,\n+    )\n+\n+    # Wait for the server to start.\n+    num_attempts = 100\n+    for attempt in range(num_attempts):\n+        ping_response = cluster.exec_in_container(\n+            container_id,\n+            [\"curl\", \"-s\", f\"http://localhost:{EC2_METADATA_SERVER_PORT}/\"],\n+            nothrow=True,\n+        )\n+        if ping_response != \"OK\":\n+            if attempt == num_attempts - 1:\n+                assert ping_response == \"OK\", 'Expected \"OK\", but got \"{}\"'.format(\n+                    ping_response\n+                )\n+            else:\n+                time.sleep(1)\n+        else:\n+            logging.debug(\n+                f\"request_response_server.py answered {ping_response} on attempt {attempt}\"\n+            )\n+            break\n+\n+    logging.info(\"EC2 metadata server started\")\n+\n+\n+@pytest.fixture(scope=\"module\", autouse=True)\n+def start_cluster():\n+    try:\n+        cluster.start()\n+        start_ec2_metadata_server()\n+        yield\n+    finally:\n+        cluster.shutdown()\n+\n+\n+def test_credentials_from_ec2_metadata():\n+    node.query(\n+        f\"INSERT INTO FUNCTION s3('http://{cluster.minio_host}:{cluster.minio_port}/{cluster.minio_bucket}/test1.jsonl') SELECT * FROM numbers(100)\"\n+    )\n+\n+    assert (\n+        \"100\"\n+        == node.query(\n+            f\"SELECT count() FROM s3('http://{cluster.minio_host}:{cluster.minio_port}/{cluster.minio_bucket}/test1.jsonl')\"\n+        ).strip()\n+    )\n+\n+    expected_logs = [\n+        \"Getting default credentials for ec2 instance from resolver:8080\",\n+        \"Calling EC2MetadataService resource, /latest/meta-data/iam/security-credentials returned credential string myrole\",\n+        \"Calling EC2MetadataService resource /latest/meta-data/iam/security-credentials/myrole\",\n+        \"Successfully pulled credentials from EC2MetadataService with access key\",\n+    ]\n+\n+    for expected_msg in expected_logs:\n+        node.contains_in_log(\"AWSEC2InstanceProfileConfigLoader: \" + expected_msg)\n",
  "problem_statement": "Update AWS S3 SDK\n> wondering on support for aws s3 object lambda - basically instead of providing with a bucket name, this functioanilty allows to provide a bucket ARN arn:aws:s3-object-lambda:eu-west-1:407416054022:accesspoint/test .\r\n> What happens in the background is that a request to an s3 object with GET, will first run a lambda funtion on the specified object. This is need for GDPR compliance.\r\n> with the current cpp sdk installed with version 21.8 I get the following error -\r\n> Custom endpoint is not compatible with Access Point ARN or Outposts ARN in Bucket field.\r\n> you can see here https://github.com/aws/aws-sdk-cpp/blob/e4223509ba1bcc5807dfb4f1afef01fdc83ad8c2/aws-cpp-sdk-s3/include/aws/s3/S3ARN.h#L27 that support was added to the SDK on 18/3/2021.\r\n> sdk version that introduced it is 1.8.168, while if I'm not mistaken the current sdk in use in CH is 1.7.321\r\n> \r\n> Any plans of bumping the SDK version soon ?\nTesting new AWS SDK\n### Changelog category (leave one):\r\n- Improvement\r\n\r\n### Changelog entry (a user-readable short description of the changes that goes to CHANGELOG.md):\r\nImproved AWS SDK version. It is updated to aws/aws-sdk-cpp@c0ac56d08feef24985dbb56d3e7980bc87d7bf68, tag: [1.9.261](https://github.com/aws/aws-sdk-cpp/releases/tag/1.9.261)\r\nSee ClickHouse/aws-sdk-cpp#10. Fixes #32439.\nSTS Assume Role from profile is not supported\nKind of a re-raise of #39526\r\nThe problem is:\r\nClickhouse uses a pretty old `aws-sdk-cpp` and re-implements some \"later\" features on top of it.\r\nBut that version does not support the so called `STSProfileCredentialsProvider` which is used for delegation via profiles (see [here](https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-role.html#cli-configure-role-xaccount))\r\n\r\nI.e. this one doesn't work:\r\n```\r\n[profile crossaccountrole]\r\nrole_arn = arn:aws:iam::234567890123:role/SomeRole\r\nsource_profile = default\r\nexternal_id = 123456\r\n```\r\n\r\nI think it can be fixed by reusing a newer `aws-sdk-cpp` ([here](https://github.com/aws/aws-sdk-cpp/blob/bb1fdce01cc7e8ae2fe7162f24c8836e9d3ab0a2/aws-cpp-sdk-identity-management/source/auth/STSProfileCredentialsProvider.cpp))\r\nI can start working on it.\nUpdate azure sdk submodule\nThere was some interesting fixes.\r\n\r\nP.S. for now I'm using my own fork.\r\n\r\n### Changelog category (leave one):\r\n- Build/Testing/Packaging Improvement\r\n\r\n### Changelog entry (a user-readable short description of the changes that goes to CHANGELOG.md):\r\nUpdate azure sdk submodule\n",
  "hints_text": "Yes, we should update it.\n@filimonov Let's do it.\n@filimonov Why not?\n@filimonov Please update it as you want.\n@filimonov It is time to update AWS SDK.\n@excitoon was assigned to that. But he stuck with some other things... \r\n\r\nLet me try... \n> sdk version that introduced it is 1.8.168, while if I'm not mistaken the current sdk in use in CH is 1.7.321\r\n\r\nIt's actually 1.8.121. \r\n\r\nCurrent is 1.9.237\nLet's update it.\nIt is building now but we need to run some tests.\nLooks abandoned. Please resubmit.\nOkay. As I can see only `ppc` is not working.\nS3 SDK should be updated.\n> I can start working on it.\r\n\r\nhttps://github.com/ClickHouse/ClickHouse/pull/43020\n@alexey-milovidov sorry, still working on Morton index rn\nPlease, create PR with your interesting changes to our fork.\n@alesapin the plan is to upgrade via a temporary repository location first to run some tests, since extras repositories does not have CI\nConflicts with #43020.\nHow? That PR updates only **aws**, not **azure**.\nI misread this. Let's continue.\nUgh, now it is not compatible with boringssl, azure sdk requires some patches.",
  "created_at": "2022-11-07T22:25:07Z",
  "modified_files": [
    ".gitmodules",
    "contrib/CMakeLists.txt",
    "contrib/aws",
    "b/contrib/aws-c-auth",
    "b/contrib/aws-c-cal",
    "contrib/aws-c-common",
    "b/contrib/aws-c-compression",
    "contrib/aws-c-event-stream",
    "b/contrib/aws-c-http",
    "b/contrib/aws-c-io",
    "b/contrib/aws-c-mqtt",
    "b/contrib/aws-c-s3",
    "b/contrib/aws-c-sdkutils",
    "contrib/aws-checksums",
    "b/contrib/aws-cmake/AwsFeatureTests.cmake",
    "b/contrib/aws-cmake/AwsSIMD.cmake",
    "b/contrib/aws-cmake/AwsThreadAffinity.cmake",
    "b/contrib/aws-cmake/AwsThreadName.cmake",
    "b/contrib/aws-cmake/CMakeLists.txt",
    "b/contrib/aws-crt-cpp",
    "b/contrib/aws-s2n-tls",
    "contrib/aws-s3-cmake/CMakeLists.txt",
    "contrib/sysroot",
    "src/IO/S3/PocoHTTPClient.cpp",
    "src/IO/S3Common.cpp"
  ],
  "modified_test_files": [
    "b/tests/integration/test_s3_ec2_metadata/configs/use_environment_credentials.xml",
    "b/tests/integration/test_s3_ec2_metadata/ec2_metadata_server/request_response_server.py",
    "b/tests/integration/test_s3_ec2_metadata/test.py"
  ]
}