{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 75081,
  "instance_id": "ClickHouse__ClickHouse-75081",
  "issue_numbers": [
    "74353"
  ],
  "base_commit": "1eecaa0905e1d604231a12ad2088d189c12744c1",
  "patch": "diff --git a/src/Analyzer/Passes/FunctionToSubcolumnsPass.cpp b/src/Analyzer/Passes/FunctionToSubcolumnsPass.cpp\nindex beffb777d131..65c8cb1f3a7b 100644\n--- a/src/Analyzer/Passes/FunctionToSubcolumnsPass.cpp\n+++ b/src/Analyzer/Passes/FunctionToSubcolumnsPass.cpp\n@@ -386,7 +386,10 @@ class FunctionToSubcolumnsVisitorFirstPass : public InDepthQueryTreeVisitorWithC\n     void enterImpl(const TableNode & table_node)\n     {\n         auto table_name = table_node.getStorage()->getStorageID().getFullTableName();\n-        if (processed_tables.emplace(table_name).second)\n+\n+        /// If table occurs in query several times (e.g., in subquery), process only once\n+        /// because we collect only static properties of the table, which are the same for each occurrence.\n+        if (!processed_tables.emplace(table_name).second)\n             return;\n \n         auto add_key_columns = [&](const auto & key_columns)\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03321_functions_to_subcolumns_skip_index.reference b/tests/queries/0_stateless/03321_functions_to_subcolumns_skip_index.reference\nnew file mode 100644\nindex 000000000000..c0b7bee91122\n--- /dev/null\n+++ b/tests/queries/0_stateless/03321_functions_to_subcolumns_skip_index.reference\n@@ -0,0 +1,6 @@\n+Granules: 3/3\n+Granules: 1/3\n+1\n+Granules: 3/3\n+Granules: 1/3\n+1\t{'1':'1'}\ndiff --git a/tests/queries/0_stateless/03321_functions_to_subcolumns_skip_index.sql b/tests/queries/0_stateless/03321_functions_to_subcolumns_skip_index.sql\nnew file mode 100644\nindex 000000000000..b1ac8ce1a652\n--- /dev/null\n+++ b/tests/queries/0_stateless/03321_functions_to_subcolumns_skip_index.sql\n@@ -0,0 +1,48 @@\n+-- Tags: no-parallel-replicas\n+\n+DROP TABLE IF EXISTS bloom_filter_test;\n+\n+CREATE TABLE bloom_filter_test\n+(\n+    id UInt64,\n+    m Map(String, String),\n+    INDEX idx_mk mapKeys(m) TYPE bloom_filter GRANULARITY 1\n+)\n+ENGINE = MergeTree\n+ORDER BY id\n+SETTINGS index_granularity = 1;\n+\n+INSERT INTO bloom_filter_test VALUES (1, {'1': '1'}), (2, {'2': '2'}), (3, {'3': '3'});\n+\n+SET enable_analyzer = 1;\n+SET optimize_functions_to_subcolumns = 1;\n+\n+SELECT trim(explain) FROM\n+(\n+    EXPLAIN indexes = 1\n+    SELECT id          -- 'm' not in projection columns\n+    FROM bloom_filter_test\n+    WHERE mapContains(m, '1')\n+    ORDER BY id\n+) WHERE explain LIKE '%Granules:%';\n+\n+SELECT id          -- 'm' not in projection columns\n+FROM bloom_filter_test\n+WHERE mapContains(m, '1')\n+ORDER BY id;\n+\n+SELECT trim(explain) FROM\n+(\n+    EXPLAIN indexes = 1\n+    SELECT *           -- 'm' in projection columns\n+    FROM bloom_filter_test\n+    WHERE mapContains(m, '1')\n+    ORDER BY id\n+) WHERE explain LIKE '%Granules:%';\n+\n+SELECT *           -- 'm' in projection columns\n+FROM bloom_filter_test\n+WHERE mapContains(m, '1')\n+ORDER BY id;\n+\n+DROP TABLE bloom_filter_test;\n",
  "problem_statement": "Analyzer: Bloom filter indexes don't work with Map type\n**Describe the situation**\r\nBloom filter indexes(include bloom_filter, tokenbf_v1 and ngrambf_v1) don't work with Map type in some cases when new analyzer is enabled.\r\n\r\n**How to reproduce**\r\nSee: https://fiddle.clickhouse.com/43d44eba-f612-41af-a95c-3726e4363d5e\r\n\r\n**Additional context**\r\nThe new Analyzer `FunctionToSubcolumnsPass` will replace `mapContains(map_argument, argument)` with `has(map_argument.keys, argument)`(In some cases), and bloom filter condition will use `mapKeys(column)` to evaluate indexes, then `mapKeys(map_argument.keys)` may not match anything.\r\n\n",
  "hints_text": "```\r\nSET optimize_functions_to_subcolumns = 0\r\n```\r\n\r\nhttps://fiddle.clickhouse.com/1e0f43e3-f0c1-4edb-b989-0cbbfaee009b\r\n\r\nCaused by \r\nhttps://github.com/ClickHouse/ClickHouse/pull/68053\r\n https://github.com/ClickHouse/ClickHouse/pull/70716\n`optimize_functions_to_subcolumns` should be disabled automatically for index columns. I'll check what is wrong.",
  "created_at": "2025-01-27T17:00:24Z",
  "modified_files": [
    "src/Analyzer/Passes/FunctionToSubcolumnsPass.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/03321_functions_to_subcolumns_skip_index.reference",
    "b/tests/queries/0_stateless/03321_functions_to_subcolumns_skip_index.sql"
  ]
}