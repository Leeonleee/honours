diff --git a/base/daemon/BaseDaemon.cpp b/base/daemon/BaseDaemon.cpp
index b3f6f05143db..2b703f7fa3a2 100644
--- a/base/daemon/BaseDaemon.cpp
+++ b/base/daemon/BaseDaemon.cpp
@@ -63,6 +63,9 @@
 #include <Common/Elf.h>
 #include <filesystem>
 
+#include <loggers/OwnFormattingChannel.h>
+#include <loggers/OwnPatternFormatter.h>
+
 #include <Common/config_version.h>
 
 #if defined(OS_DARWIN)
@@ -1001,6 +1004,14 @@ void BaseDaemon::setupWatchdog()
             memcpy(argv0, new_process_name, std::min(strlen(new_process_name), original_process_name.size()));
         }
 
+        /// If streaming compression of logs is used then we write watchdog logs to cerr
+        if (config().getRawString("logger.stream_compress", "false") == "true")
+        {
+            Poco::AutoPtr<OwnPatternFormatter> pf = new OwnPatternFormatter;
+            Poco::AutoPtr<DB::OwnFormattingChannel> log = new DB::OwnFormattingChannel(pf, new Poco::ConsoleChannel(std::cerr));
+            logger().setChannel(log);
+        }
+
         logger().information(fmt::format("Will watch for the process with pid {}", pid));
 
         /// Forward signals to the child process.
diff --git a/base/loggers/Loggers.cpp b/base/loggers/Loggers.cpp
index 0f41296819e8..5eb9ef951764 100644
--- a/base/loggers/Loggers.cpp
+++ b/base/loggers/Loggers.cpp
@@ -62,7 +62,13 @@ void Loggers::buildLoggers(Poco::Util::AbstractConfiguration & config, Poco::Log
     if (!log_path.empty())
     {
         createDirectory(log_path);
-        std::cerr << "Logging " << log_level_string << " to " << log_path << std::endl;
+
+        std::string ext;
+        if (config.getRawString("logger.stream_compress", "false") == "true")
+            ext = ".lz4";
+
+        std::cerr << "Logging " << log_level_string << " to " << log_path << ext << std::endl;
+
         auto log_level = Poco::Logger::parseLevel(log_level_string);
         if (log_level > max_log_level)
         {
@@ -75,6 +81,7 @@ void Loggers::buildLoggers(Poco::Util::AbstractConfiguration & config, Poco::Log
         log_file->setProperty(Poco::FileChannel::PROP_ROTATION, config.getRawString("logger.size", "100M"));
         log_file->setProperty(Poco::FileChannel::PROP_ARCHIVE, "number");
         log_file->setProperty(Poco::FileChannel::PROP_COMPRESS, config.getRawString("logger.compress", "true"));
+        log_file->setProperty(Poco::FileChannel::PROP_STREAMCOMPRESS, config.getRawString("logger.stream_compress", "false"));
         log_file->setProperty(Poco::FileChannel::PROP_PURGECOUNT, config.getRawString("logger.count", "1"));
         log_file->setProperty(Poco::FileChannel::PROP_FLUSH, config.getRawString("logger.flush", "true"));
         log_file->setProperty(Poco::FileChannel::PROP_ROTATEONOPEN, config.getRawString("logger.rotateOnOpen", "false"));
@@ -100,13 +107,18 @@ void Loggers::buildLoggers(Poco::Util::AbstractConfiguration & config, Poco::Log
             max_log_level = errorlog_level;
         }
 
-        std::cerr << "Logging errors to " << errorlog_path << std::endl;
+        std::string ext;
+        if (config.getRawString("logger.stream_compress", "false") == "true")
+            ext = ".lz4";
+
+        std::cerr << "Logging errors to " << errorlog_path << ext << std::endl;
 
         error_log_file = new Poco::FileChannel;
         error_log_file->setProperty(Poco::FileChannel::PROP_PATH, fs::weakly_canonical(errorlog_path));
         error_log_file->setProperty(Poco::FileChannel::PROP_ROTATION, config.getRawString("logger.size", "100M"));
         error_log_file->setProperty(Poco::FileChannel::PROP_ARCHIVE, "number");
         error_log_file->setProperty(Poco::FileChannel::PROP_COMPRESS, config.getRawString("logger.compress", "true"));
+        error_log_file->setProperty(Poco::FileChannel::PROP_STREAMCOMPRESS, config.getRawString("logger.stream_compress", "false"));
         error_log_file->setProperty(Poco::FileChannel::PROP_PURGECOUNT, config.getRawString("logger.count", "1"));
         error_log_file->setProperty(Poco::FileChannel::PROP_FLUSH, config.getRawString("logger.flush", "true"));
         error_log_file->setProperty(Poco::FileChannel::PROP_ROTATEONOPEN, config.getRawString("logger.rotateOnOpen", "false"));
diff --git a/contrib/poco b/contrib/poco
index 173fb3171783..258b9ba6cd24 160000
--- a/contrib/poco
+++ b/contrib/poco
@@ -1,1 +1,1 @@
-Subproject commit 173fb31717837d366152c508619b09dcf11786da
+Subproject commit 258b9ba6cd245ff88e9346f75c43464c403f329d
diff --git a/contrib/poco-cmake/Foundation/CMakeLists.txt b/contrib/poco-cmake/Foundation/CMakeLists.txt
index a9a4933873cf..0c13d1093441 100644
--- a/contrib/poco-cmake/Foundation/CMakeLists.txt
+++ b/contrib/poco-cmake/Foundation/CMakeLists.txt
@@ -51,6 +51,7 @@ if (USE_INTERNAL_POCO_LIBRARY)
         "${LIBRARY_DIR}/Foundation/src/Channel.cpp"
         "${LIBRARY_DIR}/Foundation/src/Checksum.cpp"
         "${LIBRARY_DIR}/Foundation/src/Clock.cpp"
+        "${LIBRARY_DIR}/Foundation/src/CompressedLogFile.cpp"
         "${LIBRARY_DIR}/Foundation/src/Condition.cpp"
         "${LIBRARY_DIR}/Foundation/src/Configurable.cpp"
         "${LIBRARY_DIR}/Foundation/src/ConsoleChannel.cpp"
@@ -222,7 +223,7 @@ if (USE_INTERNAL_POCO_LIBRARY)
             POCO_OS_FAMILY_UNIX
     )
     target_include_directories (_poco_foundation SYSTEM PUBLIC "${LIBRARY_DIR}/Foundation/include")
-    target_link_libraries (_poco_foundation PRIVATE Poco::Foundation::PCRE ${ZLIB_LIBRARIES})
+    target_link_libraries (_poco_foundation PRIVATE Poco::Foundation::PCRE ${ZLIB_LIBRARIES} lz4)
 else ()
     add_library (Poco::Foundation UNKNOWN IMPORTED GLOBAL)
 
