You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
Deadlock with TinyLog engine (20.8)
After migrating 19.9 -> 20.8 the query like:

```
INSERT INTO tinylog 
SELECT FROM tab WHERE ( x IN (SELECT FROM tinylog))
```

Locked ( read- write operating in sub-select )
Deadlock on sync insert into Distributed over Log
```
create table t_local(a int) engine Log;

create table t_dist (a int) engine Distributed(test_shard_localhost, 'default', 't_local', cityHash64(a));

set insert_distributed_sync = 1;

insert into t_dist values (1);

Received exception from server (version 20.9.1):
Code: 209. DB::Exception: Received from localhost:9000. DB::Exception: Timeout exceeded while reading from socket (127.0.0.3:9000): while receiving packet from 127.0.0.3:9000: Insertion status:
Wrote 0 blocks and 0 rows on shard 0 replica 0, 127.0.0.2:9000 (average 300005 ms per block)
Wrote 0 blocks and 0 rows on shard 1 replica 0, 127.0.0.3:9000 (average 300005 ms per block)
Wrote 1 blocks and 0 rows on shard 2 replica 0, 127.0.0.4:9000 (average 6 ms per block)
. Stack trace:
```

Info from `system.stack_trace`:
```
WITH arrayJoin(trace) AS addr
SELECT 
    thread_id,
    query_id,
    substr(concat(addressToLine(addr), '#', demangle(addressToSymbol(addr))), 1, 100)
FROM system.stack_trace
WHERE query_id IN 
(
    SELECT query_id
    FROM system.processes
    WHERE initial_query_id = 'bf7b408d-e84f-4e52-9f30-c73c8d43d0c5'
)

┌─thread_id─┬─query_id─────────────────────────────┬─substr(concat(addressToLine(addr), '#', demangle(addressToSymbol(addr))), 1, 100)────────────────────┐
│    268738 │ bf7b408d-e84f-4e52-9f30-c73c8d43d0c5 │ /lib/x86_64-linux-gnu/libpthread-2.31.so#pthread_cond_wait@@GLIBC_2.3.2                              │
│    268738 │ bf7b408d-e84f-4e52-9f30-c73c8d43d0c5 │ /home/akuzm/ch1/ch/contrib/libcxx/include/__threading_support:353#std::__1::__libcpp_condvar_wait(pt │
│    268738 │ bf7b408d-e84f-4e52-9f30-c73c8d43d0c5 │ /home/akuzm/ch1/ch/contrib/libcxx/src/condition_variable.cpp:44#std::__1::condition_variable::wait(s │
│    268738 │ bf7b408d-e84f-4e52-9f30-c73c8d43d0c5 │ /home/akuzm/ch1/ch/contrib/libcxx/src/shared_mutex.cpp:31#std::__1::__shared_mutex_base::lock()      │
│    268738 │ bf7b408d-e84f-4e52-9f30-c73c8d43d0c5 │ /home/akuzm/ch1/ch/contrib/libcxx/include/shared_mutex:190#std::__1::shared_mutex::lock()            │
│    268738 │ bf7b408d-e84f-4e52-9f30-c73c8d43d0c5 │ /home/akuzm/ch1/ch/contrib/libcxx/include/__mutex_base:119#std::__1::unique_lock<std::__1::shared_mu │
│    268738 │ bf7b408d-e84f-4e52-9f30-c73c8d43d0c5 │ /home/akuzm/ch1/ch/src/Storages/StorageLog.cpp:0#DB::StorageLog::loadMarks()                         │
│    268738 │ bf7b408d-e84f-4e52-9f30-c73c8d43d0c5 │ /home/akuzm/ch1/ch/src/Storages/StorageLog.cpp:657#DB::StorageLog::write(std::__1::shared_ptr<DB::IA │
│    268738 │ bf7b408d-e84f-4e52-9f30-c73c8d43d0c5 │ /home/akuzm/ch1/ch/src/DataStreams/PushingToViewsBlockOutputStream.cpp:122#DB::PushingToViewsBlockOu │
│    268738 │ bf7b408d-e84f-4e52-9f30-c73c8d43d0c5 │ /home/akuzm/ch1/ch/contrib/libcxx/include/memory:2214#std::__1::__compressed_pair_elem<DB::PushingTo │
│    268738 │ bf7b408d-e84f-4e52-9f30-c73c8d43d0c5 │ /home/akuzm/ch1/ch/contrib/libcxx/include/memory:2299#std::__1::__compressed_pair<std::__1::allocato │
│    268738 │ bf7b408d-e84f-4e52-9f30-c73c8d43d0c5 │ /home/akuzm/ch1/ch/contrib/libcxx/include/memory:3569#std::__1::__shared_ptr_emplace<DB::PushingToVi │
│    268738 │ bf7b408d-e84f-4e52-9f30-c73c8d43d0c5 │ /home/akuzm/ch1/ch/contrib/libcxx/include/memory:4400#std::__1::enable_if<!(is_array<DB::PushingToVi │
│    268738 │ bf7b408d-e84f-4e52-9f30-c73c8d43d0c5 │ /home/akuzm/ch1/ch/src/Interpreters/InterpreterInsertQuery.cpp:313#DB::InterpreterInsertQuery::execu │
│    268738 │ bf7b408d-e84f-4e52-9f30-c73c8d43d0c5 │ /home/akuzm/ch1/ch/src/Storages/Distributed/DistributedBlockOutputStream.cpp:340#DB::DistributedBloc │
│    268738 │ bf7b408d-e84f-4e52-9f30-c73c8d43d0c5 │ /home/akuzm/ch1/ch/contrib/libcxx/include/type_traits:3519#decltype(std::__1::forward<DB::Distribute │
│    268738 │ bf7b408d-e84f-4e52-9f30-c73c8d43d0c5 │ /home/akuzm/ch1/ch/contrib/libcxx/include/__functional_base:349#void std::__1::__invoke_void_return_ │
│    268738 │ bf7b408d-e84f-4e52-9f30-c73c8d43d0c5 │ /home/akuzm/ch1/ch/contrib/libcxx/include/functional:1540#std::__1::__function::__alloc_func<DB::Dis │
│    268738 │ bf7b408d-e84f-4e52-9f30-c73c8d43d0c5 │ /home/akuzm/ch1/ch/contrib/libcxx/include/functional:1714#std::__1::__function::__func<DB::Distribut │
│    268738 │ bf7b408d-e84f-4e52-9f30-c73c8d43d0c5 │ /home/akuzm/ch1/ch/contrib/libcxx/include/functional:1867#std::__1::__function::__value_func<void () │
│    268738 │ bf7b408d-e84f-4e52-9f30-c73c8d43d0c5 │ /home/akuzm/ch1/ch/contrib/libcxx/include/functional:2473#std::__1::function<void ()>::operator()()  │
│    268738 │ bf7b408d-e84f-4e52-9f30-c73c8d43d0c5 │ /home/akuzm/ch1/ch/src/Common/ThreadPool.cpp:235#ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_ │
│    268738 │ bf7b408d-e84f-4e52-9f30-c73c8d43d0c5 │ /home/akuzm/ch1/ch/src/Common/ThreadPool.cpp:116#void ThreadPoolImpl<ThreadFromGlobalPool>::schedule │
│    268738 │ bf7b408d-e84f-4e52-9f30-c73c8d43d0c5 │ /home/akuzm/ch1/ch/contrib/libcxx/include/type_traits:3525#decltype(std::__1::forward<void>(fp)(std: │
│    268738 │ bf7b408d-e84f-4e52-9f30-c73c8d43d0c5 │ /home/akuzm/ch1/ch/contrib/libcxx/include/tuple:1415#decltype(auto) std::__1::__apply_tuple_impl<voi │
│    268738 │ bf7b408d-e84f-4e52-9f30-c73c8d43d0c5 │ /home/akuzm/ch1/ch/contrib/libcxx/include/tuple:1424#decltype(auto) std::__1::apply<void ThreadPoolI │
│    269092 │ bf7b408d-e84f-4e52-9f30-c73c8d43d0c5 │ /lib/x86_64-linux-gnu/libpthread-2.31.so#pthread_cond_wait@@GLIBC_2.3.2                              │
│    269092 │ bf7b408d-e84f-4e52-9f30-c73c8d43d0c5 │ /home/akuzm/ch1/ch/contrib/libcxx/include/__threading_support:353#std::__1::__libcpp_condvar_wait(pt │
│    269092 │ bf7b408d-e84f-4e52-9f30-c73c8d43d0c5 │ /home/akuzm/ch1/ch/contrib/libcxx/src/condition_variable.cpp:44#std::__1::condition_variable::wait(s │
│    269092 │ bf7b408d-e84f-4e52-9f30-c73c8d43d0c5 │ /home/akuzm/ch1/ch/contrib/libcxx/include/__mutex_base:408#void std::__1::condition_variable::wait<T │
│    269092 │ bf7b408d-e84f-4e52-9f30-c73c8d43d0c5 │ /home/akuzm/ch1/ch/src/Common/ThreadPool.cpp:160#ThreadPoolImpl<ThreadFromGlobalPool>::wait()        │
│    269092 │ bf7b408d-e84f-4e52-9f30-c73c8d43d0c5 │ /home/akuzm/ch1/ch/src/Storages/Distributed/DistributedBlockOutputStream.cpp:226#DB::DistributedBloc │
│    269092 │ bf7b408d-e84f-4e52-9f30-c73c8d43d0c5 │ /home/akuzm/ch1/ch/src/Storages/Distributed/DistributedBlockOutputStream.cpp:407#DB::DistributedBloc │
│    269092 │ bf7b408d-e84f-4e52-9f30-c73c8d43d0c5 │ /home/akuzm/ch1/ch/src/Storages/Distributed/DistributedBlockOutputStream.cpp:134#DB::DistributedBloc │
│    269092 │ bf7b408d-e84f-4e52-9f30-c73c8d43d0c5 │ /home/akuzm/ch1/ch/src/DataStreams/PushingToViewsBlockOutputStream.cpp:0#DB::PushingToViewsBlockOutp │
│    269092 │ bf7b408d-e84f-4e52-9f30-c73c8d43d0c5 │ /home/akuzm/ch1/ch/src/DataStreams/AddingDefaultBlockOutputStream.cpp:10#DB::AddingDefaultBlockOutpu │
│    269092 │ bf7b408d-e84f-4e52-9f30-c73c8d43d0c5 │ /home/akuzm/ch1/ch/src/DataStreams/CountingBlockOutputStream.cpp:19#DB::CountingBlockOutputStream::w │
│    269092 │ bf7b408d-e84f-4e52-9f30-c73c8d43d0c5 │ /home/akuzm/ch1/ch/src/Server/TCPHandler.cpp:979#DB::TCPHandler::receiveData(bool)                   │
│    269092 │ bf7b408d-e84f-4e52-9f30-c73c8d43d0c5 │ /home/akuzm/ch1/ch/src/Server/TCPHandler.cpp:814#DB::TCPHandler::receivePacket()                     │
│    269092 │ bf7b408d-e84f-4e52-9f30-c73c8d43d0c5 │ /home/akuzm/ch1/ch/src/Server/TCPHandler.cpp:441#DB::TCPHandler::readDataNext(unsigned long const&,  │
│    269092 │ bf7b408d-e84f-4e52-9f30-c73c8d43d0c5 │ /home/akuzm/ch1/ch/src/Server/TCPHandler.cpp:472#DB::TCPHandler::readData(DB::Settings const&)       │
│    269092 │ bf7b408d-e84f-4e52-9f30-c73c8d43d0c5 │ /home/akuzm/ch1/ch/src/Server/TCPHandler.cpp:501#DB::TCPHandler::processInsertQuery(DB::Settings con │
│    269092 │ bf7b408d-e84f-4e52-9f30-c73c8d43d0c5 │ /home/akuzm/ch1/ch/src/Server/TCPHandler.cpp:263#DB::TCPHandler::runImpl()                           │
│    269092 │ bf7b408d-e84f-4e52-9f30-c73c8d43d0c5 │ /home/akuzm/ch1/ch/src/Server/TCPHandler.cpp:1217#DB::TCPHandler::run()                              │
│    269092 │ bf7b408d-e84f-4e52-9f30-c73c8d43d0c5 │ /home/akuzm/ch1/ch/contrib/poco/Net/src/TCPServerConnection.cpp:43#Poco::Net::TCPServerConnection::s │
│    269092 │ bf7b408d-e84f-4e52-9f30-c73c8d43d0c5 │ /home/akuzm/ch1/ch/contrib/poco/Net/src/TCPServerDispatcher.cpp:114#Poco::Net::TCPServerDispatcher:: │
│    269092 │ bf7b408d-e84f-4e52-9f30-c73c8d43d0c5 │ /home/akuzm/ch1/ch/contrib/poco/Foundation/src/ThreadPool.cpp:199#Poco::PooledThread::run()          │
│    269092 │ bf7b408d-e84f-4e52-9f30-c73c8d43d0c5 │ /home/akuzm/ch1/ch/contrib/poco/Foundation/src/Thread.cpp:56#Poco::(anonymous namespace)::RunnableHo │
│    269092 │ bf7b408d-e84f-4e52-9f30-c73c8d43d0c5 │ /home/akuzm/ch1/ch/contrib/poco/Foundation/src/Thread_POSIX.cpp:345#Poco::ThreadImpl::runnableEntry( │
│    269092 │ bf7b408d-e84f-4e52-9f30-c73c8d43d0c5 │ /lib/x86_64-linux-gnu/libpthread-2.31.so#start_thread                                                │
│    269092 │ bf7b408d-e84f-4e52-9f30-c73c8d43d0c5 │ /build/glibc-YYA7BZ/glibc-2.31/misc/../sysdeps/unix/sysv/linux/x86_64/clone.S:97#clone               │
└───────────┴──────────────────────────────────────┴──────────────────────────────────────────────────────────────────────────────────────────────────────┘

51 rows in set. Elapsed: 0.142 sec. 

```
Fix insert select deadlock for log family engine (former PR #5097)
I hereby agree to the terms of the CLA available at: https://yandex.ru/legal/cla/?lang=en

For changelog. Remove if this is non-significant change.

Category (leave one):
- Bug Fix

Resuming PR #5097 originally started by @zhang2014 

2 MV writing to same target with engine=Log can lead to deadlock
It's actually a footgun and rather expected, but still better to try avoid those deadlock when possible. 

```
create table src1 engine=Null as system.numbers;
create table dst1 engine=Log as system.numbers;
create materialized view a1 to dst1 as select * from src1;
create materialized view b1 to dst1 as select * from src1;
insert into src1 values (1);
```

maybe we should use that new rw lock with timeouts here?
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
