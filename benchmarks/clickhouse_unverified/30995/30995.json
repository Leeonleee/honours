{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 30995,
  "instance_id": "ClickHouse__ClickHouse-30995",
  "issue_numbers": [
    "30897"
  ],
  "base_commit": "94a66f724e31561fe594621f9abcff1ad1baa16e",
  "patch": "diff --git a/src/Storages/MergeTree/MergeTreeData.cpp b/src/Storages/MergeTree/MergeTreeData.cpp\nindex c5c14cd24a8d..dd95e3eaee20 100644\n--- a/src/Storages/MergeTree/MergeTreeData.cpp\n+++ b/src/Storages/MergeTree/MergeTreeData.cpp\n@@ -3423,7 +3423,6 @@ Pipe MergeTreeData::alterPartition(\n \n                     case PartitionCommand::MoveDestinationType::TABLE:\n                     {\n-                        checkPartitionCanBeDropped(command.partition);\n                         String dest_database = query_context->resolveDatabase(command.to_database);\n                         auto dest_storage = DatabaseCatalog::instance().getTable({dest_database, command.to_table}, query_context);\n                         movePartitionToTable(dest_storage, command.partition, query_context);\n@@ -3445,7 +3444,8 @@ Pipe MergeTreeData::alterPartition(\n \n             case PartitionCommand::REPLACE_PARTITION:\n             {\n-                checkPartitionCanBeDropped(command.partition);\n+                if (command.replace)\n+                    checkPartitionCanBeDropped(command.partition);\n                 String from_database = query_context->resolveDatabase(command.from_database);\n                 auto from_storage = DatabaseCatalog::instance().getTable({from_database, command.from_table}, query_context);\n                 replacePartitionFrom(from_storage, command.partition, command.replace, query_context);\n",
  "test_patch": "diff --git a/tests/integration/test_attach_partition_with_large_destination/__init__.py b/tests/integration/test_attach_partition_with_large_destination/__init__.py\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/integration/test_attach_partition_with_large_destination/configs/config.xml b/tests/integration/test_attach_partition_with_large_destination/configs/config.xml\nnew file mode 100644\nindex 000000000000..0500e2ad5542\n--- /dev/null\n+++ b/tests/integration/test_attach_partition_with_large_destination/configs/config.xml\n@@ -0,0 +1,4 @@\n+<clickhouse>\n+    <max_table_size_to_drop>1</max_table_size_to_drop>\n+    <max_partition_size_to_drop>1</max_partition_size_to_drop>\n+</clickhouse>\ndiff --git a/tests/integration/test_attach_partition_with_large_destination/test.py b/tests/integration/test_attach_partition_with_large_destination/test.py\nnew file mode 100644\nindex 000000000000..50f24f7a01e5\n--- /dev/null\n+++ b/tests/integration/test_attach_partition_with_large_destination/test.py\n@@ -0,0 +1,50 @@\n+import pytest\n+\n+from helpers.cluster import ClickHouseCluster\n+\n+cluster = ClickHouseCluster(__file__)\n+node = cluster.add_instance('node', main_configs=[\"configs/config.xml\"], with_zookeeper=True)\n+\n+\n+@pytest.fixture(scope=\"module\")\n+def started_cluster():\n+    try:\n+        cluster.start()\n+        yield cluster\n+    finally:\n+        cluster.shutdown()\n+\n+def create_force_drop_flag(node):\n+    force_drop_flag_path = \"/var/lib/clickhouse/flags/force_drop_table\"\n+    node.exec_in_container([\"bash\", \"-c\", \"touch {} && chmod a=rw {}\".format(force_drop_flag_path, force_drop_flag_path)], user=\"root\")\n+\n+@pytest.mark.parametrize(\"engine\", ['Ordinary', 'Atomic'])\n+def test_attach_partition_with_large_destination(started_cluster, engine):\n+    # Initialize\n+    node.query(\"CREATE DATABASE db ENGINE={}\".format(engine))\n+    node.query(\"CREATE TABLE db.destination (n UInt64) ENGINE=ReplicatedMergeTree('/test/destination', 'r1') ORDER BY n PARTITION BY n % 2\")\n+    node.query(\"CREATE TABLE db.source_1 (n UInt64) ENGINE=ReplicatedMergeTree('/test/source_1', 'r1') ORDER BY n PARTITION BY n % 2\")\n+    node.query(\"INSERT INTO db.source_1 VALUES (1), (2), (3), (4)\")\n+    node.query(\"CREATE TABLE db.source_2 (n UInt64) ENGINE=ReplicatedMergeTree('/test/source_2', 'r1') ORDER BY n PARTITION BY n % 2\")\n+    node.query(\"INSERT INTO db.source_2 VALUES (5), (6), (7), (8)\")\n+\n+    # Attach partition when destination partition is empty\n+    node.query(\"ALTER TABLE db.destination ATTACH PARTITION 0 FROM db.source_1\")\n+    assert node.query(\"SELECT n FROM db.destination ORDER BY n\") == \"2\\n4\\n\"\n+\n+    # REPLACE PARTITION should still respect max_partition_size_to_drop\n+    assert node.query_and_get_error(\"ALTER TABLE db.destination REPLACE PARTITION 0 FROM db.source_2\")\n+    assert node.query(\"SELECT n FROM db.destination ORDER BY n\") == \"2\\n4\\n\"\n+\n+    # Attach partition when destination partition is larger than max_partition_size_to_drop\n+    node.query(\"ALTER TABLE db.destination ATTACH PARTITION 0 FROM db.source_2\")\n+    assert node.query(\"SELECT n FROM db.destination ORDER BY n\") == \"2\\n4\\n6\\n8\\n\"\n+\n+    # Cleanup\n+    create_force_drop_flag(node)\n+    node.query(\"DROP TABLE db.source_1 SYNC\")\n+    create_force_drop_flag(node)\n+    node.query(\"DROP TABLE db.source_2 SYNC\")\n+    create_force_drop_flag(node)\n+    node.query(\"DROP TABLE db.destination SYNC\")\n+    node.query(\"DROP DATABASE db\")\n\\ No newline at end of file\n",
  "problem_statement": "ATTACH PARTITION fails when existing destination table's partition is large\n**Unexpected behavior**\r\nATTACH PARTITION command fails when destination table's existing partition size is large than `max_partition_size_to_drop`\r\n\r\nAttaching a tiny sample of few hundred rows from `db.source_table_sample` to `db.destination_table_full` fails because partition `202108` size is (53.46 GB) which is larger than default `max_partition_size_to_drop` (50GB)\r\n\r\nError message:\r\n```sql\r\nALTER TABLE db.destination_table_full\r\n    ATTACH PARTITION 202108 FROM db.source_table_sample\r\n\r\nQuery id: adf2c8fb-ba8a-4846-9c32-fabdb0d387b9\r\n\r\n\r\n0 rows in set. Elapsed: 0.002 sec.\r\n\r\nReceived exception from server (version 21.7.11):\r\nCode: 359. DB::Exception: Received from localhost:9440. DB::Exception: Table or Partition in db.destination_table_full was not dropped.\r\nReason:\r\n1. Size (53.46 GB) is greater than max_[table/partition]_size_to_drop (50.00 GB)\r\n2. File '/drives/ssd1/clickhouse/flags/force_drop_table' intended to force DROP doesn't exist\r\nHow to fix this:\r\n1. Either increase (or set to zero) max_[table/partition]_size_to_drop in server config\r\n2. Either create forcing file /drives/ssd1/clickhouse/flags/force_drop_table and make sure that ClickHouse has write permission for it.\r\nExample:\r\nsudo touch '/drives/ssd1/clickhouse/flags/force_drop_table' && sudo chmod 666 '/drives/ssd1/clickhouse/flags/force_drop_table'.\r\n```\r\n\r\nHowever, if I try to do the same in a new empty table `db.destination_table_sample`, it can attach partition successfully.\r\n\r\n```sql\r\nALTER TABLE db.destination_table_sample\r\n    ATTACH PARTITION 202108 FROM db.source_table_sample\r\n\r\nQuery id: f1567cf5-b1da-476c-aebb-3cf9f767849e\r\n\r\nOk.\r\n\r\n0 rows in set. Elapsed: 0.003 sec.\r\n```\r\n\r\n\r\nHow I calculated partition size:\r\n```sql\r\nSELECT\r\n    partition,\r\n    formatReadableSize(sum(bytes_on_disk)),\r\n    round(((sum(bytes_on_disk) / 1000) / 1000) / 1000, 2) AS GB\r\nFROM system.parts\r\nWHERE table = 'destination_table_full'\r\nGROUP BY partition\r\n\r\nQuery id: 33862450-3dd5-410e-aee0-30fbee339b68\r\n\r\n\u250c\u2500partition\u2500\u252c\u2500formatReadableSize(sum(bytes_on_disk))\u2500\u252c\u2500\u2500\u2500\u2500GB\u2500\u2510\r\n\u2502 202107    \u2502 2.07 GiB                               \u2502  2.22 \u2502\r\n\u2502 202108    \u2502 49.79 GiB                              \u2502 53.46 \u2502\r\n\u2502 202110    \u2502 5.85 GiB                               \u2502  6.28 \u2502\r\n\u2502 202109    \u2502 17.89 GiB                              \u2502 19.21 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\n**Expected behavior**\r\nPartitions should be attached successfully regardless of `max_partition_size_to_drop` value\r\n\r\n**How to reproduce**\r\nClickHouse server version: ClickHouse server version 21.7.11.3 (official build).\r\nWhich interface to use: clickhouse-client (I originally noticed this behavior in the logs of clickhouse-copier)\n",
  "hints_text": "One more thing that seems strange to me is that the same error message is printed even if the partition to attach doesn't exist.\r\n\r\nWhen existing partition size in destination table is large:\r\n```sql\r\nALTER TABLE db.destination_table_full\r\n    ATTACH PARTITION 202108 FROM db.non_existing_table\r\n\r\nQuery id: 43a47b0a-e284-4653-a872-acbfecd715b8\r\n\r\n\r\n0 rows in set. Elapsed: 0.002 sec.\r\n\r\nReceived exception from server (version 21.7.11):\r\nCode: 359. DB::Exception: Received from localhost:9440. DB::Exception: Table or Partition in db.destination_table_full was not dropped.\r\nReason:\r\n1. Size (53.46 GB) is greater than max_[table/partition]_size_to_drop (50.00 GB)\r\n2. File '/drives/ssd1/clickhouse/flags/force_drop_table' intended to force DROP doesn't exist\r\nHow to fix this:\r\n1. Either increase (or set to zero) max_[table/partition]_size_to_drop in server config\r\n2. Either create forcing file /drives/ssd1/clickhouse/flags/force_drop_table and make sure that ClickHouse has write permission for it.\r\nExample:\r\nsudo touch '/drives/ssd1/clickhouse/flags/force_drop_table' && sudo chmod 666 '/drives/ssd1/clickhouse/flags/force_drop_table'.\r\n```\r\n\r\nWhen existing partition size in destination table is small:\r\n```sql\r\n\r\nALTER TABLE db.destination_table_full\r\n    ATTACH PARTITION 202107 FROM db.non_existing_table\r\n\r\nQuery id: b0203b41-a841-4857-8dbd-8582d07d1aa7\r\n\r\n\r\n0 rows in set. Elapsed: 0.002 sec.\r\n\r\nReceived exception from server (version 21.7.11):\r\nCode: 60. DB::Exception: Received from localhost:9440. DB::Exception: Table db.non_existing_table doesn't exist.\r\n```\r\n\nAfter looking into source code, I found that `ATTACH PARTITION ... FROM ...` gets interpreted as `ASTAlterCommand::REPLACE_PARTITION` command with `replace` flag set to `false` ([code](https://github.com/ClickHouse/ClickHouse/blob/ad06ed3526fd66bf5d77a31744a6f2b8aa40ce8d/src/Parsers/ParserAlterQuery.cpp#L504-L505)).\r\nThat's why it enters the code path for REPLACE_PARTITION [here](https://github.com/ClickHouse/ClickHouse/blob/ad06ed3526fd66bf5d77a31744a6f2b8aa40ce8d/src/Storages/MergeTree/MergeTreeData.cpp#L3448) which checks that partition can be dropped (even before resolving source table which explains the different error messages in my previous comment). \r\n\r\n```c++\r\n            case PartitionCommand::ATTACH_PARTITION:\r\n                current_command_results = attachPartition(command.partition, metadata_snapshot, command.part, query_context);\r\n                break;\r\n            case PartitionCommand::MOVE_PARTITION:\r\n            {\r\n               // ...\r\n            }\r\n            break;\r\n\r\n            case PartitionCommand::REPLACE_PARTITION:\r\n            {\r\n                checkPartitionCanBeDropped(command.partition);\r\n                String from_database = query_context->resolveDatabase(command.from_database);\r\n                auto from_storage = DatabaseCatalog::instance().getTable({from_database, command.from_table}, query_context);\r\n                replacePartitionFrom(from_storage, command.partition, command.replace, query_context);\r\n            }\r\n            break;\r\n```\r\n\r\nI believe this check isn't needed in the case of `ATTACH PARTITION ... FROM ...` commands that were interpreted as `REPLACE_PARTITION` and it might make sense to skip this check if `command->replace` is `false`",
  "created_at": "2021-11-02T12:23:43Z",
  "modified_files": [
    "src/Storages/MergeTree/MergeTreeData.cpp"
  ],
  "modified_test_files": [
    "b/tests/integration/test_attach_partition_with_large_destination/configs/config.xml",
    "b/tests/integration/test_attach_partition_with_large_destination/test.py"
  ]
}