diff --git a/docker/test/fasttest/run.sh b/docker/test/fasttest/run.sh
index c4493de477c8..00af261f6c89 100755
--- a/docker/test/fasttest/run.sh
+++ b/docker/test/fasttest/run.sh
@@ -396,6 +396,9 @@ function run_tests
 
         # needs s3
         01944_insert_partition_by
+
+        # depends on Go
+        02013_zlib_read_after_eof
     )
 
     time clickhouse-test --hung-check -j 8 --order=random --use-skip-list \
diff --git a/docker/test/stateless/Dockerfile b/docker/test/stateless/Dockerfile
index f5fa86a6f339..39c8a2e53580 100644
--- a/docker/test/stateless/Dockerfile
+++ b/docker/test/stateless/Dockerfile
@@ -24,6 +24,8 @@ RUN apt-get update -y \
             python3-pip \
             qemu-user-static \
             sudo \
+            # golang version 1.13 on Ubuntu 20 is enough for tests
+            golang \
             telnet \
             tree \
             unixodbc \
diff --git a/tests/queries/0_stateless/02013_zlib_read_after_eof.go b/tests/queries/0_stateless/02013_zlib_read_after_eof.go
new file mode 100644
index 000000000000..a97a1438bdff
--- /dev/null
+++ b/tests/queries/0_stateless/02013_zlib_read_after_eof.go
@@ -0,0 +1,61 @@
+package main
+
+import (
+	"compress/gzip"
+	"fmt"
+	"io"
+	"io/ioutil"
+	"net/http"
+	"net/url"
+	"os"
+)
+
+func compress(data io.Reader) io.Reader {
+	pr, pw := io.Pipe()
+	gw := gzip.NewWriter(pw)
+
+	go func() {
+		_, _ = io.Copy(gw, data)
+		gw.Close()
+		pw.Close()
+	}()
+
+	return pr
+}
+
+func main() {
+	database := os.Getenv("CLICKHOUSE_DATABASE")
+	p, err := url.Parse("http://localhost:8123/")
+	if err != nil {
+		panic(err)
+	}
+	q := p.Query()
+
+	q.Set("query", "INSERT INTO "+database+".graphite FORMAT RowBinary")
+	p.RawQuery = q.Encode()
+	queryUrl := p.String()
+
+	var req *http.Request
+
+	req, err = http.NewRequest("POST", queryUrl, compress(os.Stdin))
+	req.Header.Add("Content-Encoding", "gzip")
+
+	if err != nil {
+		panic(err)
+	}
+
+	client := &http.Client{
+		Transport: &http.Transport{DisableKeepAlives: true},
+	}
+	resp, err := client.Do(req)
+	if err != nil {
+		panic(err)
+	}
+	defer resp.Body.Close()
+
+	body, _ := ioutil.ReadAll(resp.Body)
+
+	if resp.StatusCode != 200 {
+		panic(fmt.Errorf("clickhouse response status %d: %s", resp.StatusCode, string(body)))
+	}
+}
diff --git a/tests/queries/0_stateless/02013_zlib_read_after_eof.reference b/tests/queries/0_stateless/02013_zlib_read_after_eof.reference
new file mode 100644
index 000000000000..5caff40c4a0c
--- /dev/null
+++ b/tests/queries/0_stateless/02013_zlib_read_after_eof.reference
@@ -0,0 +1,1 @@
+10000
diff --git a/tests/queries/0_stateless/02013_zlib_read_after_eof.sh b/tests/queries/0_stateless/02013_zlib_read_after_eof.sh
new file mode 100755
index 000000000000..d74dca6cc61c
--- /dev/null
+++ b/tests/queries/0_stateless/02013_zlib_read_after_eof.sh
@@ -0,0 +1,18 @@
+#!/usr/bin/env bash
+
+CUR_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
+# shellcheck source=../shell_config.sh
+. "$CUR_DIR"/../shell_config.sh
+
+DATA_FILE=$CUR_DIR/data_zlib/02013_zlib_read_after_eof_data
+
+$CLICKHOUSE_CLIENT -q "DROP TABLE IF EXISTS graphite;"
+
+$CLICKHOUSE_CLIENT -q "CREATE TABLE graphite(\`Path\` String, \`Value\` Float64, \`Time\` UInt32, \`Date\` Date, \`Timestamp\` UInt32) \
+    ENGINE = MergeTree PARTITION BY toYYYYMM(Date) ORDER BY (Path, Time) SETTINGS index_granularity = 8192;"
+
+cat "$DATA_FILE" | go run $CUR_DIR/02013_zlib_read_after_eof.go
+
+$CLICKHOUSE_CLIENT -q "SELECT count() FROM graphite;"
+
+$CLICKHOUSE_CLIENT -q "drop table graphite;"
diff --git a/tests/queries/0_stateless/data_zlib/02013_zlib_read_after_eof_data b/tests/queries/0_stateless/data_zlib/02013_zlib_read_after_eof_data
new file mode 100644
index 000000000000..3e57c0824627
Binary files /dev/null and b/tests/queries/0_stateless/data_zlib/02013_zlib_read_after_eof_data differ
