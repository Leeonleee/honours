diff --git a/src/Core/Settings.h b/src/Core/Settings.h
index 42ae645615aa..dbac8a7ec537 100644
--- a/src/Core/Settings.h
+++ b/src/Core/Settings.h
@@ -903,6 +903,7 @@ class IColumn;
     M(UInt64, output_format_pretty_max_value_width, 10000, "Maximum width of value to display in Pretty formats. If greater - it will be cut.", 0) \
     M(Bool, output_format_pretty_color, true, "Use ANSI escape sequences to paint colors in Pretty formats", 0) \
     M(String, output_format_pretty_grid_charset, "UTF-8", "Charset for printing grid borders. Available charsets: ASCII, UTF-8 (default one).", 0) \
+    M(Milliseconds, output_format_pretty_squash_ms, 100, "Squash blocks in Pretty formats if the time passed after the previous block is not greater than the specified threshold in milliseconds. This avoids printing miltiple small blocks.", 0) \
     M(UInt64, output_format_parquet_row_group_size, 1000000, "Target row group size in rows.", 0) \
     M(UInt64, output_format_parquet_row_group_size_bytes, 512 * 1024 * 1024, "Target row group size in bytes, before compression.", 0) \
     M(Bool, output_format_parquet_string_as_string, false, "Use Parquet String type instead of Binary for String columns.", 0) \
diff --git a/src/Formats/FormatFactory.cpp b/src/Formats/FormatFactory.cpp
index 082ccb859702..d7e9c33c8224 100644
--- a/src/Formats/FormatFactory.cpp
+++ b/src/Formats/FormatFactory.cpp
@@ -128,6 +128,7 @@ FormatSettings getFormatSettings(ContextPtr context, const Settings & settings)
     format_settings.pretty.max_rows = settings.output_format_pretty_max_rows;
     format_settings.pretty.max_value_width = settings.output_format_pretty_max_value_width;
     format_settings.pretty.output_format_pretty_row_numbers = settings.output_format_pretty_row_numbers;
+    format_settings.pretty.squash_milliseconds = static_cast<UInt64>(settings.output_format_pretty_squash_ms);
     format_settings.protobuf.input_flatten_google_wrappers = settings.input_format_protobuf_flatten_google_wrappers;
     format_settings.protobuf.output_nullables_with_google_wrappers = settings.output_format_protobuf_nullables_with_google_wrappers;
     format_settings.protobuf.skip_fields_with_unsupported_types_in_schema_inference = settings.input_format_protobuf_skip_fields_with_unsupported_types_in_schema_inference;
diff --git a/src/Formats/FormatSettings.h b/src/Formats/FormatSettings.h
index b9a55ffaa830..3a2e818d540b 100644
--- a/src/Formats/FormatSettings.h
+++ b/src/Formats/FormatSettings.h
@@ -227,6 +227,7 @@ struct FormatSettings
         UInt64 max_rows = 10000;
         UInt64 max_column_pad_width = 250;
         UInt64 max_value_width = 10000;
+        UInt64 squash_milliseconds = 100;
         bool color = true;
 
         bool output_format_pretty_row_numbers = false;
diff --git a/src/Processors/Formats/Impl/PrettyBlockOutputFormat.cpp b/src/Processors/Formats/Impl/PrettyBlockOutputFormat.cpp
index 14648e68f94a..bfcc4c101d90 100644
--- a/src/Processors/Formats/Impl/PrettyBlockOutputFormat.cpp
+++ b/src/Processors/Formats/Impl/PrettyBlockOutputFormat.cpp
@@ -137,21 +137,25 @@ void PrettyBlockOutputFormat::write(Chunk chunk, PortKind port_kind)
         total_rows += chunk.getNumRows();
         return;
     }
-    if (mono_block)
+
+    if (mono_block
+        || (format_settings.pretty.squash_milliseconds
+            && time_after_previous_chunk.elapsedMilliseconds() <= format_settings.pretty.squash_milliseconds))
     {
         if (port_kind == PortKind::Main)
         {
-            if (mono_chunk)
-                mono_chunk.append(chunk);
+            if (squashed_chunk)
+                squashed_chunk.append(chunk);
             else
-                mono_chunk = std::move(chunk);
+                squashed_chunk = std::move(chunk);
             return;
         }
 
         /// Should be written from writeSuffix()
-        assert(!mono_chunk);
+        assert(!squashed_chunk);
     }
 
+    writeSquashedChunkIfNeeded();
     writeChunk(chunk, port_kind);
 }
 
@@ -389,18 +393,20 @@ void PrettyBlockOutputFormat::consumeExtremes(Chunk chunk)
 }
 
 
-void PrettyBlockOutputFormat::writeMonoChunkIfNeeded()
+void PrettyBlockOutputFormat::writeSquashedChunkIfNeeded()
 {
-    if (mono_chunk)
+    if (squashed_chunk)
     {
-        writeChunk(mono_chunk, PortKind::Main);
-        mono_chunk.clear();
+        writeChunk(squashed_chunk, PortKind::Main);
+        squashed_chunk.clear();
+        if (format_settings.pretty.squash_milliseconds)
+            time_after_previous_chunk.restart();
     }
 }
 
 void PrettyBlockOutputFormat::writeSuffix()
 {
-    writeMonoChunkIfNeeded();
+    writeSquashedChunkIfNeeded();
 
     if (total_rows >= format_settings.pretty.max_rows)
     {
diff --git a/src/Processors/Formats/Impl/PrettyBlockOutputFormat.h b/src/Processors/Formats/Impl/PrettyBlockOutputFormat.h
index dfb23ac63f92..621f13871964 100644
--- a/src/Processors/Formats/Impl/PrettyBlockOutputFormat.h
+++ b/src/Processors/Formats/Impl/PrettyBlockOutputFormat.h
@@ -39,7 +39,7 @@ class PrettyBlockOutputFormat : public IOutputFormat
 
     void write(Chunk chunk, PortKind port_kind);
     virtual void writeChunk(const Chunk & chunk, PortKind port_kind);
-    void writeMonoChunkIfNeeded();
+    void writeSquashedChunkIfNeeded();
     void writeSuffix() override;
 
     void onRowsReadBeforeUpdate() override { total_rows = getRowsReadBefore(); }
@@ -59,11 +59,11 @@ class PrettyBlockOutputFormat : public IOutputFormat
 
 private:
     bool mono_block;
-    /// For mono_block == true only
-    Chunk mono_chunk;
+    Chunk squashed_chunk;
+    Stopwatch time_after_previous_chunk; /// For squashing.
 };
 
-template <class OutputFormat>
+template <typename OutputFormat>
 void registerPrettyFormatWithNoEscapesAndMonoBlock(FormatFactory & factory, const String & base_name)
 {
     auto creator = [&](FormatFactory & fact, const String & name, bool no_escapes, bool mono_block)
@@ -81,8 +81,6 @@ void registerPrettyFormatWithNoEscapesAndMonoBlock(FormatFactory & factory, cons
             }
             return std::make_shared<OutputFormat>(buf, sample, format_settings, mono_block);
         });
-        if (!mono_block)
-            factory.markOutputFormatSupportsParallelFormatting(name);
     };
     creator(factory, base_name, false, false);
     creator(factory, base_name + "NoEscapes", true, false);
diff --git a/src/Processors/Formats/Impl/PrettySpaceBlockOutputFormat.cpp b/src/Processors/Formats/Impl/PrettySpaceBlockOutputFormat.cpp
index 0fb1a413a6cd..e54d88a11b20 100644
--- a/src/Processors/Formats/Impl/PrettySpaceBlockOutputFormat.cpp
+++ b/src/Processors/Formats/Impl/PrettySpaceBlockOutputFormat.cpp
@@ -100,7 +100,7 @@ void PrettySpaceBlockOutputFormat::writeChunk(const Chunk & chunk, PortKind port
 
 void PrettySpaceBlockOutputFormat::writeSuffix()
 {
-    writeMonoChunkIfNeeded();
+    writeSquashedChunkIfNeeded();
 
     if (total_rows >= format_settings.pretty.max_rows)
     {
