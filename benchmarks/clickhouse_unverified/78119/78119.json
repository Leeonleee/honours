{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 78119,
  "instance_id": "ClickHouse__ClickHouse-78119",
  "issue_numbers": [
    "57590"
  ],
  "base_commit": "bbbf612e19a8c391d0f4185bb739d1f182a6e651",
  "patch": "diff --git a/docs/en/operations/system-tables/information_schema.md b/docs/en/operations/system-tables/information_schema.md\nindex 4b7fe5b14648..c48ebb3ffbe5 100644\n--- a/docs/en/operations/system-tables/information_schema.md\n+++ b/docs/en/operations/system-tables/information_schema.md\n@@ -205,10 +205,9 @@ Columns:\n     - `FOREIGN TABLE`\n     - `LOCAL TEMPORARY`\n     - `SYSTEM VIEW`\n-- `table_rows` ([Nullable](../../sql-reference/data-types/nullable.md)([UInt64](../../sql-reference/data-types/int-uint.md))) \u2014 The total\n-  number of rows. NULL if it could not be determined.\n-- `data_length` ([Nullable](../../sql-reference/data-types/nullable.md)([UInt64](../../sql-reference/data-types/int-uint.md))) \u2014 The size of\n-  the data on-disk. NULL if it could not be determined.\n+- `table_rows` ([Nullable](../../sql-reference/data-types/nullable.md)([UInt64](../../sql-reference/data-types/int-uint.md))) \u2014 The total number of rows. NULL if it could not be determined.\n+- `data_length` ([Nullable](../../sql-reference/data-types/nullable.md)([UInt64](../../sql-reference/data-types/int-uint.md))) \u2014 The size of the data on-disk. NULL if it could not be determined.\n+- `index_length` ([Nullable](../../sql-reference/data-types/nullable.md)([UInt64](../../sql-reference/data-types/int-uint.md))) \u2014 The total size of the primary key, secondary indexes, and all marks.\n - `table_collation` ([Nullable](../../sql-reference/data-types/nullable.md)([String](../../sql-reference/data-types/string.md))) \u2014 The table default collation. Always `utf8mb4_0900_ai_ci`.\n - `table_comment` ([Nullable](../../sql-reference/data-types/nullable.md)([String](../../sql-reference/data-types/string.md))) \u2014 The comment used when creating the table.\n \ndiff --git a/src/Storages/System/attachInformationSchemaTables.cpp b/src/Storages/System/attachInformationSchemaTables.cpp\nindex 701e5c05fc12..330601d9f395 100644\n--- a/src/Storages/System/attachInformationSchemaTables.cpp\n+++ b/src/Storages/System/attachInformationSchemaTables.cpp\n@@ -64,6 +64,7 @@ static constexpr std::string_view tables = R\"(\n         `table_type` String,\n         `table_rows` Nullable(UInt64),\n         `data_length` Nullable(UInt64),\n+        `index_length` Nullable(UInt64),\n         `table_collation` Nullable(String),\n         `table_comment` Nullable(String),\n         `TABLE_CATALOG` String,\n@@ -88,6 +89,9 @@ static constexpr std::string_view tables = R\"(\n                 )            AS table_type,\n         total_rows AS table_rows,\n         total_bytes AS data_length,\n+        sum(p.primary_key_size + p.marks_bytes\n+            + p.secondary_indices_compressed_bytes + p.secondary_indices_marks_bytes\n+        ) AS index_length,\n         'utf8mb4_0900_ai_ci' AS table_collation,\n         comment              AS table_comment,\n         table_catalog        AS TABLE_CATALOG,\n@@ -98,7 +102,17 @@ static constexpr std::string_view tables = R\"(\n         data_length          AS DATA_LENGTH,\n         table_collation      AS TABLE_COLLATION,\n         table_comment        AS TABLE_COMMENT\n-    FROM system.tables\n+    FROM system.tables t\n+    LEFT JOIN system.parts p ON (t.database = p.database AND t.name = p.table)\n+    GROUP BY\n+        t.database,\n+        t.name,\n+        t.is_temporary,\n+        t.engine,\n+        t.has_own_data,\n+        t.total_rows,\n+        t.total_bytes,\n+        t.comment\n )\";\n \n static constexpr std::string_view views = R\"(\n",
  "test_patch": "diff --git a/tests/integration/test_select_access_rights/test_from_system_tables.py b/tests/integration/test_select_access_rights/test_from_system_tables.py\nindex 5fb69d266258..9d5d509d65a6 100644\n--- a/tests/integration/test_select_access_rights/test_from_system_tables.py\n+++ b/tests/integration/test_select_access_rights/test_from_system_tables.py\n@@ -162,6 +162,19 @@ def test_information_schema():\n     )\n \n     node.query(\"GRANT SELECT ON information_schema.* TO sqluser\")\n+    expected_error = (\n+        \"necessary to have the grant SELECT(database, `table`) ON system.parts\"\n+    )\n+    assert expected_error in node.query_and_get_error(\n+        \"SELECT count() FROM information_schema.tables WHERE table_name='table1'\",\n+        user=\"sqluser\",\n+    )\n+    assert expected_error in node.query_and_get_error(\n+        \"SELECT count() FROM information_schema.tables WHERE table_name='table2'\",\n+        user=\"sqluser\",\n+    )\n+\n+    node.query(\"GRANT SELECT ON system.parts TO sqluser\")\n     assert (\n         node.query(\n             \"SELECT count() FROM information_schema.tables WHERE table_name='table1'\",\ndiff --git a/tests/queries/0_stateless/01161_information_schema.reference b/tests/queries/0_stateless/01161_information_schema.reference\nindex 6fbcce3ba940..0a69b764d1e7 100644\n--- a/tests/queries/0_stateless/01161_information_schema.reference\n+++ b/tests/queries/0_stateless/01161_information_schema.reference\n@@ -42,11 +42,11 @@ views\n INFORMATION_SCHEMA\tINFORMATION_SCHEMA\tdefault\t\\N\t\\N\t\\N\t\\N\tINFORMATION_SCHEMA\tINFORMATION_SCHEMA\tdefault\t\\N\t\\N\t\\N\t\\N\n information_schema\tinformation_schema\tdefault\t\\N\t\\N\t\\N\t\\N\tinformation_schema\tinformation_schema\tdefault\t\\N\t\\N\t\\N\t\\N\n -- information_schema.tables\n-default\tdefault\tkcu1\tBASE TABLE\t0\t0\tutf8mb4_0900_ai_ci\t\tdefault\tdefault\tkcu1\tBASE TABLE\t0\t0\tutf8mb4_0900_ai_ci\t\n-default\tdefault\tkcu2\tBASE TABLE\t0\t0\tutf8mb4_0900_ai_ci\t\tdefault\tdefault\tkcu2\tBASE TABLE\t0\t0\tutf8mb4_0900_ai_ci\t\n-default\tdefault\tmv\tVIEW\t0\t0\tutf8mb4_0900_ai_ci\t\tdefault\tdefault\tmv\tVIEW\t0\t0\tutf8mb4_0900_ai_ci\t\n-default\tdefault\tt\tFOREIGN TABLE\t0\t0\tutf8mb4_0900_ai_ci\t\tdefault\tdefault\tt\tFOREIGN TABLE\t0\t0\tutf8mb4_0900_ai_ci\t\n-default\tdefault\tv\tVIEW\t\\N\t\\N\tutf8mb4_0900_ai_ci\t\tdefault\tdefault\tv\tVIEW\t\\N\t\\N\tutf8mb4_0900_ai_ci\t\n+default\tdefault\tkcu1\tBASE TABLE\t0\t0\t0\tutf8mb4_0900_ai_ci\t\tdefault\tdefault\tkcu1\tBASE TABLE\t0\t0\tutf8mb4_0900_ai_ci\t\n+default\tdefault\tkcu2\tBASE TABLE\t0\t0\t0\tutf8mb4_0900_ai_ci\t\tdefault\tdefault\tkcu2\tBASE TABLE\t0\t0\tutf8mb4_0900_ai_ci\t\n+default\tdefault\tmv\tVIEW\t0\t0\t0\tutf8mb4_0900_ai_ci\t\tdefault\tdefault\tmv\tVIEW\t0\t0\tutf8mb4_0900_ai_ci\t\n+default\tdefault\tt\tFOREIGN TABLE\t0\t0\t0\tutf8mb4_0900_ai_ci\t\tdefault\tdefault\tt\tFOREIGN TABLE\t0\t0\tutf8mb4_0900_ai_ci\t\n+default\tdefault\tv\tVIEW\t\\N\t\\N\t0\tutf8mb4_0900_ai_ci\t\tdefault\tdefault\tv\tVIEW\t\\N\t\\N\tutf8mb4_0900_ai_ci\t\n -- information_schema.views\n default\tdefault\tmv\tSELECT * FROM system.one\tNONE\tNO\tYES\tNO\tNO\tNO\tdefault\tdefault\tmv\tSELECT * FROM system.one\tNONE\tNO\tYES\tNO\tNO\tNO\n default\tdefault\tv\tSELECT n, f FROM default.t\tNONE\tNO\tNO\tNO\tNO\tNO\tdefault\tdefault\tv\tSELECT n, f FROM default.t\tNONE\tNO\tNO\tNO\tNO\tNO\ndiff --git a/tests/queries/0_stateless/02206_information_schema_show_database.reference b/tests/queries/0_stateless/02206_information_schema_show_database.reference\nindex 2cc93c56e82a..36c5273a9412 100644\n--- a/tests/queries/0_stateless/02206_information_schema_show_database.reference\n+++ b/tests/queries/0_stateless/02206_information_schema_show_database.reference\n@@ -1,6 +1,6 @@\n CREATE DATABASE INFORMATION_SCHEMA\\nENGINE = Memory\n CREATE VIEW INFORMATION_SCHEMA.COLUMNS\\n(\\n    `table_catalog` String,\\n    `table_schema` String,\\n    `table_name` String,\\n    `column_name` String,\\n    `ordinal_position` UInt64,\\n    `column_default` String,\\n    `is_nullable` String,\\n    `data_type` String,\\n    `character_maximum_length` Nullable(UInt64),\\n    `character_octet_length` Nullable(UInt64),\\n    `numeric_precision` Nullable(UInt64),\\n    `numeric_precision_radix` Nullable(UInt64),\\n    `numeric_scale` Nullable(UInt64),\\n    `datetime_precision` Nullable(UInt64),\\n    `character_set_catalog` Nullable(String),\\n    `character_set_schema` Nullable(String),\\n    `character_set_name` Nullable(String),\\n    `collation_catalog` Nullable(String),\\n    `collation_schema` Nullable(String),\\n    `collation_name` Nullable(String),\\n    `domain_catalog` Nullable(String),\\n    `domain_schema` Nullable(String),\\n    `domain_name` Nullable(String),\\n    `extra` Nullable(String),\\n    `column_comment` String,\\n    `column_type` String,\\n    `TABLE_CATALOG` String,\\n    `TABLE_SCHEMA` String,\\n    `TABLE_NAME` String,\\n    `COLUMN_NAME` String,\\n    `ORDINAL_POSITION` UInt64,\\n    `COLUMN_DEFAULT` String,\\n    `IS_NULLABLE` String,\\n    `DATA_TYPE` String,\\n    `CHARACTER_MAXIMUM_LENGTH` Nullable(UInt64),\\n    `CHARACTER_OCTET_LENGTH` Nullable(UInt64),\\n    `NUMERIC_PRECISION` Nullable(UInt64),\\n    `NUMERIC_PRECISION_RADIX` Nullable(UInt64),\\n    `NUMERIC_SCALE` Nullable(UInt64),\\n    `DATETIME_PRECISION` Nullable(UInt64),\\n    `CHARACTER_SET_CATALOG` Nullable(String),\\n    `CHARACTER_SET_SCHEMA` Nullable(String),\\n    `CHARACTER_SET_NAME` Nullable(String),\\n    `COLLATION_CATALOG` Nullable(String),\\n    `COLLATION_SCHEMA` Nullable(String),\\n    `COLLATION_NAME` Nullable(String),\\n    `DOMAIN_CATALOG` Nullable(String),\\n    `DOMAIN_SCHEMA` Nullable(String),\\n    `DOMAIN_NAME` Nullable(String),\\n    `EXTRA` Nullable(String),\\n    `COLUMN_COMMENT` String,\\n    `COLUMN_TYPE` String\\n)\\nSQL SECURITY INVOKER\\nAS SELECT\\n    database AS table_catalog,\\n    database AS table_schema,\\n    `table` AS table_name,\\n    name AS column_name,\\n    position AS ordinal_position,\\n    default_expression AS column_default,\\n    type LIKE \\'Nullable(%)\\' AS is_nullable,\\n    type AS data_type,\\n    character_octet_length AS character_maximum_length,\\n    character_octet_length,\\n    numeric_precision,\\n    numeric_precision_radix,\\n    numeric_scale,\\n    datetime_precision,\\n    NULL AS character_set_catalog,\\n    NULL AS character_set_schema,\\n    NULL AS character_set_name,\\n    NULL AS collation_catalog,\\n    NULL AS collation_schema,\\n    NULL AS collation_name,\\n    NULL AS domain_catalog,\\n    NULL AS domain_schema,\\n    NULL AS domain_name,\\n    multiIf(default_kind = \\'DEFAULT\\', \\'DEFAULT_GENERATED\\', default_kind = \\'MATERIALIZED\\', \\'STORED GENERATED\\', default_kind = \\'ALIAS\\', \\'VIRTUAL GENERATED\\', \\'\\') AS extra,\\n    comment AS column_comment,\\n    type AS column_type,\\n    table_catalog AS TABLE_CATALOG,\\n    table_schema AS TABLE_SCHEMA,\\n    table_name AS TABLE_NAME,\\n    column_name AS COLUMN_NAME,\\n    ordinal_position AS ORDINAL_POSITION,\\n    column_default AS COLUMN_DEFAULT,\\n    is_nullable AS IS_NULLABLE,\\n    data_type AS DATA_TYPE,\\n    character_maximum_length AS CHARACTER_MAXIMUM_LENGTH,\\n    character_octet_length AS CHARACTER_OCTET_LENGTH,\\n    numeric_precision AS NUMERIC_PRECISION,\\n    numeric_precision_radix AS NUMERIC_PRECISION_RADIX,\\n    numeric_scale AS NUMERIC_SCALE,\\n    datetime_precision AS DATETIME_PRECISION,\\n    character_set_catalog AS CHARACTER_SET_CATALOG,\\n    character_set_schema AS CHARACTER_SET_SCHEMA,\\n    character_set_name AS CHARACTER_SET_NAME,\\n    collation_catalog AS COLLATION_CATALOG,\\n    collation_schema AS COLLATION_SCHEMA,\\n    collation_name AS COLLATION_NAME,\\n    domain_catalog AS DOMAIN_CATALOG,\\n    domain_schema AS DOMAIN_SCHEMA,\\n    domain_name AS DOMAIN_NAME,\\n    extra AS EXTRA,\\n    column_comment AS COLUMN_COMMENT,\\n    column_type AS COLUMN_TYPE\\nFROM system.columns\n-CREATE VIEW INFORMATION_SCHEMA.TABLES (`table_catalog` String, `table_schema` String, `table_name` String, `table_type` String, `table_rows` Nullable(UInt64), `data_length` Nullable(UInt64), `table_collation` Nullable(String), `table_comment` Nullable(String), `TABLE_CATALOG` String, `TABLE_SCHEMA` String, `TABLE_NAME` String, `TABLE_TYPE` String, `TABLE_ROWS` Nullable(UInt64), `DATA_LENGTH` Nullable(UInt64), `TABLE_COLLATION` Nullable(String), `TABLE_COMMENT` Nullable(String)) SQL SECURITY INVOKER AS SELECT database AS table_catalog, database AS table_schema, name AS table_name, multiIf(is_temporary, \\'LOCAL TEMPORARY\\', engine LIKE \\'%View\\', \\'VIEW\\', engine LIKE \\'System%\\', \\'SYSTEM VIEW\\', has_own_data = 0, \\'FOREIGN TABLE\\', \\'BASE TABLE\\') AS table_type, total_rows AS table_rows, total_bytes AS data_length, \\'utf8mb4_0900_ai_ci\\' AS table_collation, comment AS table_comment, table_catalog AS TABLE_CATALOG, table_schema AS TABLE_SCHEMA, table_name AS TABLE_NAME, table_type AS TABLE_TYPE, table_rows AS TABLE_ROWS, data_length AS DATA_LENGTH, table_collation AS TABLE_COLLATION, table_comment AS TABLE_COMMENT FROM system.tables\n-CREATE VIEW INFORMATION_SCHEMA.tables (`table_catalog` String, `table_schema` String, `table_name` String, `table_type` String, `table_rows` Nullable(UInt64), `data_length` Nullable(UInt64), `table_collation` Nullable(String), `table_comment` Nullable(String), `TABLE_CATALOG` String, `TABLE_SCHEMA` String, `TABLE_NAME` String, `TABLE_TYPE` String, `TABLE_ROWS` Nullable(UInt64), `DATA_LENGTH` Nullable(UInt64), `TABLE_COLLATION` Nullable(String), `TABLE_COMMENT` Nullable(String)) SQL SECURITY INVOKER AS SELECT database AS table_catalog, database AS table_schema, name AS table_name, multiIf(is_temporary, \\'LOCAL TEMPORARY\\', engine LIKE \\'%View\\', \\'VIEW\\', engine LIKE \\'System%\\', \\'SYSTEM VIEW\\', has_own_data = 0, \\'FOREIGN TABLE\\', \\'BASE TABLE\\') AS table_type, total_rows AS table_rows, total_bytes AS data_length, \\'utf8mb4_0900_ai_ci\\' AS table_collation, comment AS table_comment, table_catalog AS TABLE_CATALOG, table_schema AS TABLE_SCHEMA, table_name AS TABLE_NAME, table_type AS TABLE_TYPE, table_rows AS TABLE_ROWS, data_length AS DATA_LENGTH, table_collation AS TABLE_COLLATION, table_comment AS TABLE_COMMENT FROM system.tables\n-CREATE VIEW information_schema.TABLES (`table_catalog` String, `table_schema` String, `table_name` String, `table_type` String, `table_rows` Nullable(UInt64), `data_length` Nullable(UInt64), `table_collation` Nullable(String), `table_comment` Nullable(String), `TABLE_CATALOG` String, `TABLE_SCHEMA` String, `TABLE_NAME` String, `TABLE_TYPE` String, `TABLE_ROWS` Nullable(UInt64), `DATA_LENGTH` Nullable(UInt64), `TABLE_COLLATION` Nullable(String), `TABLE_COMMENT` Nullable(String)) SQL SECURITY INVOKER AS SELECT database AS table_catalog, database AS table_schema, name AS table_name, multiIf(is_temporary, \\'LOCAL TEMPORARY\\', engine LIKE \\'%View\\', \\'VIEW\\', engine LIKE \\'System%\\', \\'SYSTEM VIEW\\', has_own_data = 0, \\'FOREIGN TABLE\\', \\'BASE TABLE\\') AS table_type, total_rows AS table_rows, total_bytes AS data_length, \\'utf8mb4_0900_ai_ci\\' AS table_collation, comment AS table_comment, table_catalog AS TABLE_CATALOG, table_schema AS TABLE_SCHEMA, table_name AS TABLE_NAME, table_type AS TABLE_TYPE, table_rows AS TABLE_ROWS, data_length AS DATA_LENGTH, table_collation AS TABLE_COLLATION, table_comment AS TABLE_COMMENT FROM system.tables\n-CREATE VIEW information_schema.tables (`table_catalog` String, `table_schema` String, `table_name` String, `table_type` String, `table_rows` Nullable(UInt64), `data_length` Nullable(UInt64), `table_collation` Nullable(String), `table_comment` Nullable(String), `TABLE_CATALOG` String, `TABLE_SCHEMA` String, `TABLE_NAME` String, `TABLE_TYPE` String, `TABLE_ROWS` Nullable(UInt64), `DATA_LENGTH` Nullable(UInt64), `TABLE_COLLATION` Nullable(String), `TABLE_COMMENT` Nullable(String)) SQL SECURITY INVOKER AS SELECT database AS table_catalog, database AS table_schema, name AS table_name, multiIf(is_temporary, \\'LOCAL TEMPORARY\\', engine LIKE \\'%View\\', \\'VIEW\\', engine LIKE \\'System%\\', \\'SYSTEM VIEW\\', has_own_data = 0, \\'FOREIGN TABLE\\', \\'BASE TABLE\\') AS table_type, total_rows AS table_rows, total_bytes AS data_length, \\'utf8mb4_0900_ai_ci\\' AS table_collation, comment AS table_comment, table_catalog AS TABLE_CATALOG, table_schema AS TABLE_SCHEMA, table_name AS TABLE_NAME, table_type AS TABLE_TYPE, table_rows AS TABLE_ROWS, data_length AS DATA_LENGTH, table_collation AS TABLE_COLLATION, table_comment AS TABLE_COMMENT FROM system.tables\n+CREATE VIEW INFORMATION_SCHEMA.TABLES (`table_catalog` String, `table_schema` String, `table_name` String, `table_type` String, `table_rows` Nullable(UInt64), `data_length` Nullable(UInt64), `index_length` Nullable(UInt64), `table_collation` Nullable(String), `table_comment` Nullable(String), `TABLE_CATALOG` String, `TABLE_SCHEMA` String, `TABLE_NAME` String, `TABLE_TYPE` String, `TABLE_ROWS` Nullable(UInt64), `DATA_LENGTH` Nullable(UInt64), `TABLE_COLLATION` Nullable(String), `TABLE_COMMENT` Nullable(String)) SQL SECURITY INVOKER AS SELECT database AS table_catalog, database AS table_schema, name AS table_name, multiIf(is_temporary, \\'LOCAL TEMPORARY\\', engine LIKE \\'%View\\', \\'VIEW\\', engine LIKE \\'System%\\', \\'SYSTEM VIEW\\', has_own_data = 0, \\'FOREIGN TABLE\\', \\'BASE TABLE\\') AS table_type, total_rows AS table_rows, total_bytes AS data_length, sum(((p.primary_key_size + p.marks_bytes) + p.secondary_indices_compressed_bytes) + p.secondary_indices_marks_bytes) AS index_length, \\'utf8mb4_0900_ai_ci\\' AS table_collation, comment AS table_comment, table_catalog AS TABLE_CATALOG, table_schema AS TABLE_SCHEMA, table_name AS TABLE_NAME, table_type AS TABLE_TYPE, table_rows AS TABLE_ROWS, data_length AS DATA_LENGTH, table_collation AS TABLE_COLLATION, table_comment AS TABLE_COMMENT FROM system.tables AS t LEFT JOIN system.parts AS p ON (t.database = p.database) AND (t.name = p.`table`) GROUP BY t.database, t.name, t.is_temporary, t.engine, t.has_own_data, t.total_rows, t.total_bytes, t.comment\n+CREATE VIEW INFORMATION_SCHEMA.tables (`table_catalog` String, `table_schema` String, `table_name` String, `table_type` String, `table_rows` Nullable(UInt64), `data_length` Nullable(UInt64), `index_length` Nullable(UInt64), `table_collation` Nullable(String), `table_comment` Nullable(String), `TABLE_CATALOG` String, `TABLE_SCHEMA` String, `TABLE_NAME` String, `TABLE_TYPE` String, `TABLE_ROWS` Nullable(UInt64), `DATA_LENGTH` Nullable(UInt64), `TABLE_COLLATION` Nullable(String), `TABLE_COMMENT` Nullable(String)) SQL SECURITY INVOKER AS SELECT database AS table_catalog, database AS table_schema, name AS table_name, multiIf(is_temporary, \\'LOCAL TEMPORARY\\', engine LIKE \\'%View\\', \\'VIEW\\', engine LIKE \\'System%\\', \\'SYSTEM VIEW\\', has_own_data = 0, \\'FOREIGN TABLE\\', \\'BASE TABLE\\') AS table_type, total_rows AS table_rows, total_bytes AS data_length, sum(((p.primary_key_size + p.marks_bytes) + p.secondary_indices_compressed_bytes) + p.secondary_indices_marks_bytes) AS index_length, \\'utf8mb4_0900_ai_ci\\' AS table_collation, comment AS table_comment, table_catalog AS TABLE_CATALOG, table_schema AS TABLE_SCHEMA, table_name AS TABLE_NAME, table_type AS TABLE_TYPE, table_rows AS TABLE_ROWS, data_length AS DATA_LENGTH, table_collation AS TABLE_COLLATION, table_comment AS TABLE_COMMENT FROM system.tables AS t LEFT JOIN system.parts AS p ON (t.database = p.database) AND (t.name = p.`table`) GROUP BY t.database, t.name, t.is_temporary, t.engine, t.has_own_data, t.total_rows, t.total_bytes, t.comment\n+CREATE VIEW information_schema.TABLES (`table_catalog` String, `table_schema` String, `table_name` String, `table_type` String, `table_rows` Nullable(UInt64), `data_length` Nullable(UInt64), `index_length` Nullable(UInt64), `table_collation` Nullable(String), `table_comment` Nullable(String), `TABLE_CATALOG` String, `TABLE_SCHEMA` String, `TABLE_NAME` String, `TABLE_TYPE` String, `TABLE_ROWS` Nullable(UInt64), `DATA_LENGTH` Nullable(UInt64), `TABLE_COLLATION` Nullable(String), `TABLE_COMMENT` Nullable(String)) SQL SECURITY INVOKER AS SELECT database AS table_catalog, database AS table_schema, name AS table_name, multiIf(is_temporary, \\'LOCAL TEMPORARY\\', engine LIKE \\'%View\\', \\'VIEW\\', engine LIKE \\'System%\\', \\'SYSTEM VIEW\\', has_own_data = 0, \\'FOREIGN TABLE\\', \\'BASE TABLE\\') AS table_type, total_rows AS table_rows, total_bytes AS data_length, sum(((p.primary_key_size + p.marks_bytes) + p.secondary_indices_compressed_bytes) + p.secondary_indices_marks_bytes) AS index_length, \\'utf8mb4_0900_ai_ci\\' AS table_collation, comment AS table_comment, table_catalog AS TABLE_CATALOG, table_schema AS TABLE_SCHEMA, table_name AS TABLE_NAME, table_type AS TABLE_TYPE, table_rows AS TABLE_ROWS, data_length AS DATA_LENGTH, table_collation AS TABLE_COLLATION, table_comment AS TABLE_COMMENT FROM system.tables AS t LEFT JOIN system.parts AS p ON (t.database = p.database) AND (t.name = p.`table`) GROUP BY t.database, t.name, t.is_temporary, t.engine, t.has_own_data, t.total_rows, t.total_bytes, t.comment\n+CREATE VIEW information_schema.tables (`table_catalog` String, `table_schema` String, `table_name` String, `table_type` String, `table_rows` Nullable(UInt64), `data_length` Nullable(UInt64), `index_length` Nullable(UInt64), `table_collation` Nullable(String), `table_comment` Nullable(String), `TABLE_CATALOG` String, `TABLE_SCHEMA` String, `TABLE_NAME` String, `TABLE_TYPE` String, `TABLE_ROWS` Nullable(UInt64), `DATA_LENGTH` Nullable(UInt64), `TABLE_COLLATION` Nullable(String), `TABLE_COMMENT` Nullable(String)) SQL SECURITY INVOKER AS SELECT database AS table_catalog, database AS table_schema, name AS table_name, multiIf(is_temporary, \\'LOCAL TEMPORARY\\', engine LIKE \\'%View\\', \\'VIEW\\', engine LIKE \\'System%\\', \\'SYSTEM VIEW\\', has_own_data = 0, \\'FOREIGN TABLE\\', \\'BASE TABLE\\') AS table_type, total_rows AS table_rows, total_bytes AS data_length, sum(((p.primary_key_size + p.marks_bytes) + p.secondary_indices_compressed_bytes) + p.secondary_indices_marks_bytes) AS index_length, \\'utf8mb4_0900_ai_ci\\' AS table_collation, comment AS table_comment, table_catalog AS TABLE_CATALOG, table_schema AS TABLE_SCHEMA, table_name AS TABLE_NAME, table_type AS TABLE_TYPE, table_rows AS TABLE_ROWS, data_length AS DATA_LENGTH, table_collation AS TABLE_COLLATION, table_comment AS TABLE_COMMENT FROM system.tables AS t LEFT JOIN system.parts AS p ON (t.database = p.database) AND (t.name = p.`table`) GROUP BY t.database, t.name, t.is_temporary, t.engine, t.has_own_data, t.total_rows, t.total_bytes, t.comment\ndiff --git a/tests/queries/0_stateless/03397_information_schema_tables_index_length.reference b/tests/queries/0_stateless/03397_information_schema_tables_index_length.reference\nnew file mode 100644\nindex 000000000000..872fd820314f\n--- /dev/null\n+++ b/tests/queries/0_stateless/03397_information_schema_tables_index_length.reference\n@@ -0,0 +1,4 @@\n+OK\n+OK\n+2\n+OK\ndiff --git a/tests/queries/0_stateless/03397_information_schema_tables_index_length.sql b/tests/queries/0_stateless/03397_information_schema_tables_index_length.sql\nnew file mode 100644\nindex 000000000000..4ec3d4a1832e\n--- /dev/null\n+++ b/tests/queries/0_stateless/03397_information_schema_tables_index_length.sql\n@@ -0,0 +1,29 @@\n+-- https://github.com/ClickHouse/ClickHouse/issues/57590\n+\n+DROP TABLE IF EXISTS tab_with_primary_key_index;\n+CREATE TABLE tab_with_primary_key_index (id UInt32, a UInt32) ENGINE = MergeTree ORDER BY id;\n+INSERT INTO tab_with_primary_key_index SELECT number, number % 2 ? 1 : number FROM numbers(10);\n+\n+DROP TABLE IF EXISTS tab_with_primary_key_index_and_skipping_index;\n+CREATE TABLE tab_with_primary_key_index_and_skipping_index (id UInt32, a UInt32, INDEX idx a TYPE set(0)) ENGINE = MergeTree ORDER BY id;\n+INSERT INTO tab_with_primary_key_index_and_skipping_index SELECT number, number % 2 ? 1 : number FROM numbers(10);\n+\n+-- Check that information_schema.tables.index_length is larger than 0 for both tables\n+SELECT if(index_length > 0, 'OK', 'FAIL')\n+FROM information_schema.tables\n+WHERE table_name LIKE 'tab_with_primary_key_index%'\n+    AND table_schema = currentDatabase();\n+\n+-- A very crude check that information_schema.tables.index_length is different for both tables\n+SELECT count(*)\n+FROM information_schema.tables\n+WHERE table_name LIKE 'tab_with_primary_key_index%'\n+    AND table_schema = currentDatabase();\n+\n+DROP TABLE tab_with_primary_key_index;\n+\n+-- Check that information_schema.tables.index_length is 0 for non-MergeTree tables\n+SELECT if(index_length = 0, 'OK', 'FAIL')\n+FROM information_schema.tables\n+WHERE table_name = 'tables'\n+    AND table_schema = 'system'; -- table engine is 'SystemTables'\n",
  "problem_statement": "Add `information_schema.tables.index_length`\n**Use case**\r\n\r\nMySQL compatibility.\r\n\r\n**Describe the solution you'd like**\r\n\r\nThe sum of the compressed size of the primary key, secondary indices, and all marks.\n",
  "hints_text": "",
  "created_at": "2025-03-22T11:58:16Z",
  "modified_files": [
    "docs/en/operations/system-tables/information_schema.md",
    "src/Storages/System/attachInformationSchemaTables.cpp"
  ],
  "modified_test_files": [
    "tests/integration/test_select_access_rights/test_from_system_tables.py",
    "tests/queries/0_stateless/01161_information_schema.reference",
    "tests/queries/0_stateless/02206_information_schema_show_database.reference",
    "b/tests/queries/0_stateless/03397_information_schema_tables_index_length.reference",
    "b/tests/queries/0_stateless/03397_information_schema_tables_index_length.sql"
  ]
}