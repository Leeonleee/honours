diff --git a/src/Interpreters/SystemLog.h b/src/Interpreters/SystemLog.h
index 48cff8bf0614..7d533a3bab7a 100644
--- a/src/Interpreters/SystemLog.h
+++ b/src/Interpreters/SystemLog.h
@@ -22,6 +22,7 @@
 #include <Interpreters/InterpreterCreateQuery.h>
 #include <Interpreters/InterpreterRenameQuery.h>
 #include <Interpreters/InterpreterInsertQuery.h>
+#include <Interpreters/Context.h>
 #include <Common/setThreadName.h>
 #include <Common/ThreadPool.h>
 #include <IO/WriteHelpers.h>
@@ -62,7 +63,6 @@ namespace ErrorCodes
 
 #define DBMS_SYSTEM_LOG_QUEUE_SIZE 1048576
 
-class Context;
 class QueryLog;
 class QueryThreadLog;
 class PartLog;
@@ -425,7 +425,11 @@ void SystemLog<LogElement>::flushImpl(const std::vector<LogElement> & to_flush,
         insert->table_id = table_id;
         ASTPtr query_ptr(insert.release());
 
-        InterpreterInsertQuery interpreter(query_ptr, context);
+        // we need query context to do inserts to target table with MV containing subqueries or joins
+        auto insert_context = Context(context);
+        insert_context.makeQueryContext();
+
+        InterpreterInsertQuery interpreter(query_ptr, insert_context);
         BlockIO io = interpreter.execute();
 
         io.out->writePrefix();
diff --git a/src/Storages/Kafka/StorageKafka.cpp b/src/Storages/Kafka/StorageKafka.cpp
index 6499941a68de..f1d7650c7857 100644
--- a/src/Storages/Kafka/StorageKafka.cpp
+++ b/src/Storages/Kafka/StorageKafka.cpp
@@ -125,7 +125,6 @@ StorageKafka::StorageKafka(
     std::unique_ptr<KafkaSettings> kafka_settings_)
     : IStorage(table_id_)
     , global_context(context_.getGlobalContext())
-    , kafka_context(std::make_shared<Context>(global_context))
     , kafka_settings(std::move(kafka_settings_))
     , topics(parseTopics(global_context.getMacros()->expand(kafka_settings->kafka_topic_list.value)))
     , brokers(global_context.getMacros()->expand(kafka_settings->kafka_broker_list.value))
@@ -145,9 +144,6 @@ StorageKafka::StorageKafka(
     setInMemoryMetadata(storage_metadata);
     task = global_context.getSchedulePool().createTask(log->name(), [this]{ threadFunc(); });
     task->deactivate();
-
-    kafka_context->makeQueryContext();
-    kafka_context->applySettingsChanges(settings_adjustments);
 }
 
 SettingsChanges StorageKafka::createSettingsAdjustments()
@@ -530,6 +526,10 @@ bool StorageKafka::streamToViews()
 
     size_t block_size = getMaxBlockSize();
 
+    auto kafka_context = std::make_shared<Context>(global_context);
+    kafka_context->makeQueryContext();
+    kafka_context->applySettingsChanges(settings_adjustments);
+
     // Create a stream for each consumer and join them in a union stream
     // Only insert into dependent views and expect that input blocks contain virtual columns
     InterpreterInsertQuery interpreter(insert, *kafka_context, false, true, true);
diff --git a/src/Storages/Kafka/StorageKafka.h b/src/Storages/Kafka/StorageKafka.h
index 6f479ba20892..b7e6ea2a7e0c 100644
--- a/src/Storages/Kafka/StorageKafka.h
+++ b/src/Storages/Kafka/StorageKafka.h
@@ -70,7 +70,6 @@ class StorageKafka final : public ext::shared_ptr_helper<StorageKafka>, public I
 private:
     // Configuration and state
     Context & global_context;
-    std::shared_ptr<Context> kafka_context;
     std::unique_ptr<KafkaSettings> kafka_settings;
     const Names topics;
     const String brokers;
diff --git a/src/Storages/StorageBuffer.cpp b/src/Storages/StorageBuffer.cpp
index 85b61dd34f99..3bc88f5a2897 100644
--- a/src/Storages/StorageBuffer.cpp
+++ b/src/Storages/StorageBuffer.cpp
@@ -713,7 +713,10 @@ void StorageBuffer::writeBlockToDestination(const Block & block, StoragePtr tabl
     for (const auto & column : block_to_write)
         list_of_columns->children.push_back(std::make_shared<ASTIdentifier>(column.name));
 
-    InterpreterInsertQuery interpreter{insert, global_context, allow_materialized};
+    auto insert_context = Context(global_context);
+    insert_context.makeQueryContext();
+
+    InterpreterInsertQuery interpreter{insert, insert_context, allow_materialized};
 
     auto block_io = interpreter.execute();
     block_io.out->writePrefix();
