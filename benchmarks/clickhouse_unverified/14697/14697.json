{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 14697,
  "instance_id": "ClickHouse__ClickHouse-14697",
  "issue_numbers": [
    "14677"
  ],
  "base_commit": "3113aa6cfefbf5eee6de6541ffd1f20596f8f8d2",
  "patch": "diff --git a/base/common/throwError.h b/base/common/throwError.h\nnew file mode 100644\nindex 000000000000..b495a0fbc7af\n--- /dev/null\n+++ b/base/common/throwError.h\n@@ -0,0 +1,13 @@\n+#pragma once\n+#include <stdexcept>\n+\n+/// Throw DB::Exception-like exception before its definition.\n+/// DB::Exception derived from Poco::Exception derived from std::exception.\n+/// DB::Exception generally cought as Poco::Exception. std::exception generally has other catch blocks and could lead to other outcomes.\n+/// DB::Exception is not defined yet. It'd better to throw Poco::Exception but we do not want to include any big header here, even <string>.\n+/// So we throw some std::exception instead in the hope its catch block is the same as DB::Exception one.\n+template <typename T>\n+inline void throwError(const T & err)\n+{\n+    throw std::runtime_error(err);\n+}\ndiff --git a/base/common/types.h b/base/common/types.h\nindex a02398a3365e..2982781ce1f3 100644\n--- a/base/common/types.h\n+++ b/base/common/types.h\n@@ -23,8 +23,8 @@ using UInt64 = uint64_t;\n \n using Int128 = __int128;\n \n-using wInt256 = std::wide_integer<256, signed>;\n-using wUInt256 = std::wide_integer<256, unsigned>;\n+using wInt256 = wide::integer<256, signed>;\n+using wUInt256 = wide::integer<256, unsigned>;\n \n static_assert(sizeof(wInt256) == 32);\n static_assert(sizeof(wUInt256) == 32);\n@@ -119,12 +119,6 @@ template <> struct is_big_int<wUInt256> { static constexpr bool value = true; };\n template <typename T>\n inline constexpr bool is_big_int_v = is_big_int<T>::value;\n \n-template <typename T>\n-inline std::string bigintToString(const T & x)\n-{\n-    return to_string(x);\n-}\n-\n template <typename To, typename From>\n inline To bigint_cast(const From & x [[maybe_unused]])\n {\ndiff --git a/base/common/wide_integer.h b/base/common/wide_integer.h\nindex 67d0b3f04da1..2aeac072b3f8 100644\n--- a/base/common/wide_integer.h\n+++ b/base/common/wide_integer.h\n@@ -22,79 +22,87 @@\n  * without express or implied warranty.\n  */\n \n-#include <climits> // CHAR_BIT\n-#include <cmath>\n #include <cstdint>\n #include <limits>\n #include <type_traits>\n+#include <initializer_list>\n \n-namespace std\n+namespace wide\n {\n template <size_t Bits, typename Signed>\n-class wide_integer;\n+class integer;\n+}\n+\n+namespace std\n+{\n \n template <size_t Bits, typename Signed, size_t Bits2, typename Signed2>\n-struct common_type<wide_integer<Bits, Signed>, wide_integer<Bits2, Signed2>>;\n+struct common_type<wide::integer<Bits, Signed>, wide::integer<Bits2, Signed2>>;\n \n template <size_t Bits, typename Signed, typename Arithmetic>\n-struct common_type<wide_integer<Bits, Signed>, Arithmetic>;\n+struct common_type<wide::integer<Bits, Signed>, Arithmetic>;\n \n template <typename Arithmetic, size_t Bits, typename Signed>\n-struct common_type<Arithmetic, wide_integer<Bits, Signed>>;\n+struct common_type<Arithmetic, wide::integer<Bits, Signed>>;\n+\n+}\n+\n+namespace wide\n+{\n \n template <size_t Bits, typename Signed>\n-class wide_integer\n+class integer\n {\n public:\n     using base_type = uint8_t;\n     using signed_base_type = int8_t;\n \n     // ctors\n-    wide_integer() = default;\n+    integer() = default;\n \n     template <typename T>\n-    constexpr wide_integer(T rhs) noexcept;\n+    constexpr integer(T rhs) noexcept;\n     template <typename T>\n-    constexpr wide_integer(std::initializer_list<T> il) noexcept;\n+    constexpr integer(std::initializer_list<T> il) noexcept;\n \n     // assignment\n     template <size_t Bits2, typename Signed2>\n-    constexpr wide_integer<Bits, Signed> & operator=(const wide_integer<Bits2, Signed2> & rhs) noexcept;\n+    constexpr integer<Bits, Signed> & operator=(const integer<Bits2, Signed2> & rhs) noexcept;\n \n     template <typename Arithmetic>\n-    constexpr wide_integer<Bits, Signed> & operator=(Arithmetic rhs) noexcept;\n+    constexpr integer<Bits, Signed> & operator=(Arithmetic rhs) noexcept;\n \n     template <typename Arithmetic>\n-    constexpr wide_integer<Bits, Signed> & operator*=(const Arithmetic & rhs);\n+    constexpr integer<Bits, Signed> & operator*=(const Arithmetic & rhs);\n \n     template <typename Arithmetic>\n-    constexpr wide_integer<Bits, Signed> & operator/=(const Arithmetic & rhs);\n+    constexpr integer<Bits, Signed> & operator/=(const Arithmetic & rhs);\n \n     template <typename Arithmetic>\n-    constexpr wide_integer<Bits, Signed> & operator+=(const Arithmetic & rhs) noexcept(is_same<Signed, unsigned>::value);\n+    constexpr integer<Bits, Signed> & operator+=(const Arithmetic & rhs) noexcept(std::is_same_v<Signed, unsigned>);\n \n     template <typename Arithmetic>\n-    constexpr wide_integer<Bits, Signed> & operator-=(const Arithmetic & rhs) noexcept(is_same<Signed, unsigned>::value);\n+    constexpr integer<Bits, Signed> & operator-=(const Arithmetic & rhs) noexcept(std::is_same_v<Signed, unsigned>);\n \n     template <typename Integral>\n-    constexpr wide_integer<Bits, Signed> & operator%=(const Integral & rhs);\n+    constexpr integer<Bits, Signed> & operator%=(const Integral & rhs);\n \n     template <typename Integral>\n-    constexpr wide_integer<Bits, Signed> & operator&=(const Integral & rhs) noexcept;\n+    constexpr integer<Bits, Signed> & operator&=(const Integral & rhs) noexcept;\n \n     template <typename Integral>\n-    constexpr wide_integer<Bits, Signed> & operator|=(const Integral & rhs) noexcept;\n+    constexpr integer<Bits, Signed> & operator|=(const Integral & rhs) noexcept;\n \n     template <typename Integral>\n-    constexpr wide_integer<Bits, Signed> & operator^=(const Integral & rhs) noexcept;\n+    constexpr integer<Bits, Signed> & operator^=(const Integral & rhs) noexcept;\n \n-    constexpr wide_integer<Bits, Signed> & operator<<=(int n);\n-    constexpr wide_integer<Bits, Signed> & operator>>=(int n) noexcept;\n+    constexpr integer<Bits, Signed> & operator<<=(int n) noexcept;\n+    constexpr integer<Bits, Signed> & operator>>=(int n) noexcept;\n \n-    constexpr wide_integer<Bits, Signed> & operator++() noexcept(is_same<Signed, unsigned>::value);\n-    constexpr wide_integer<Bits, Signed> operator++(int) noexcept(is_same<Signed, unsigned>::value);\n-    constexpr wide_integer<Bits, Signed> & operator--() noexcept(is_same<Signed, unsigned>::value);\n-    constexpr wide_integer<Bits, Signed> operator--(int) noexcept(is_same<Signed, unsigned>::value);\n+    constexpr integer<Bits, Signed> & operator++() noexcept(std::is_same_v<Signed, unsigned>);\n+    constexpr integer<Bits, Signed> operator++(int) noexcept(std::is_same_v<Signed, unsigned>);\n+    constexpr integer<Bits, Signed> & operator--() noexcept(std::is_same_v<Signed, unsigned>);\n+    constexpr integer<Bits, Signed> operator--(int) noexcept(std::is_same_v<Signed, unsigned>);\n \n     // observers\n \n@@ -114,10 +122,10 @@ class wide_integer\n \n private:\n     template <size_t Bits2, typename Signed2>\n-    friend class wide_integer;\n+    friend class integer;\n \n-    friend class numeric_limits<wide_integer<Bits, signed>>;\n-    friend class numeric_limits<wide_integer<Bits, unsigned>>;\n+    friend class std::numeric_limits<integer<Bits, signed>>;\n+    friend class std::numeric_limits<integer<Bits, unsigned>>;\n \n     base_type m_arr[_impl::arr_size];\n };\n@@ -134,115 +142,117 @@ using __only_integer = typename std::enable_if<IntegralConcept<T>() && IntegralC\n \n // Unary operators\n template <size_t Bits, typename Signed>\n-constexpr wide_integer<Bits, Signed> operator~(const wide_integer<Bits, Signed> & lhs) noexcept;\n+constexpr integer<Bits, Signed> operator~(const integer<Bits, Signed> & lhs) noexcept;\n \n template <size_t Bits, typename Signed>\n-constexpr wide_integer<Bits, Signed> operator-(const wide_integer<Bits, Signed> & lhs) noexcept(is_same<Signed, unsigned>::value);\n+constexpr integer<Bits, Signed> operator-(const integer<Bits, Signed> & lhs) noexcept(std::is_same_v<Signed, unsigned>);\n \n template <size_t Bits, typename Signed>\n-constexpr wide_integer<Bits, Signed> operator+(const wide_integer<Bits, Signed> & lhs) noexcept(is_same<Signed, unsigned>::value);\n+constexpr integer<Bits, Signed> operator+(const integer<Bits, Signed> & lhs) noexcept(std::is_same_v<Signed, unsigned>);\n \n // Binary operators\n template <size_t Bits, typename Signed, size_t Bits2, typename Signed2>\n-std::common_type_t<wide_integer<Bits, Signed>, wide_integer<Bits2, Signed2>> constexpr\n-operator*(const wide_integer<Bits, Signed> & lhs, const wide_integer<Bits2, Signed2> & rhs);\n+std::common_type_t<integer<Bits, Signed>, integer<Bits2, Signed2>> constexpr\n+operator*(const integer<Bits, Signed> & lhs, const integer<Bits2, Signed2> & rhs);\n template <typename Arithmetic, typename Arithmetic2, class = __only_arithmetic<Arithmetic, Arithmetic2>>\n std::common_type_t<Arithmetic, Arithmetic2> constexpr operator*(const Arithmetic & rhs, const Arithmetic2 & lhs);\n \n template <size_t Bits, typename Signed, size_t Bits2, typename Signed2>\n-std::common_type_t<wide_integer<Bits, Signed>, wide_integer<Bits2, Signed2>> constexpr\n-operator/(const wide_integer<Bits, Signed> & lhs, const wide_integer<Bits2, Signed2> & rhs);\n+std::common_type_t<integer<Bits, Signed>, integer<Bits2, Signed2>> constexpr\n+operator/(const integer<Bits, Signed> & lhs, const integer<Bits2, Signed2> & rhs);\n template <typename Arithmetic, typename Arithmetic2, class = __only_arithmetic<Arithmetic, Arithmetic2>>\n std::common_type_t<Arithmetic, Arithmetic2> constexpr operator/(const Arithmetic & rhs, const Arithmetic2 & lhs);\n \n template <size_t Bits, typename Signed, size_t Bits2, typename Signed2>\n-std::common_type_t<wide_integer<Bits, Signed>, wide_integer<Bits2, Signed2>> constexpr\n-operator+(const wide_integer<Bits, Signed> & lhs, const wide_integer<Bits2, Signed2> & rhs);\n+std::common_type_t<integer<Bits, Signed>, integer<Bits2, Signed2>> constexpr\n+operator+(const integer<Bits, Signed> & lhs, const integer<Bits2, Signed2> & rhs);\n template <typename Arithmetic, typename Arithmetic2, class = __only_arithmetic<Arithmetic, Arithmetic2>>\n std::common_type_t<Arithmetic, Arithmetic2> constexpr operator+(const Arithmetic & rhs, const Arithmetic2 & lhs);\n \n template <size_t Bits, typename Signed, size_t Bits2, typename Signed2>\n-std::common_type_t<wide_integer<Bits, Signed>, wide_integer<Bits2, Signed2>> constexpr\n-operator-(const wide_integer<Bits, Signed> & lhs, const wide_integer<Bits2, Signed2> & rhs);\n+std::common_type_t<integer<Bits, Signed>, integer<Bits2, Signed2>> constexpr\n+operator-(const integer<Bits, Signed> & lhs, const integer<Bits2, Signed2> & rhs);\n template <typename Arithmetic, typename Arithmetic2, class = __only_arithmetic<Arithmetic, Arithmetic2>>\n std::common_type_t<Arithmetic, Arithmetic2> constexpr operator-(const Arithmetic & rhs, const Arithmetic2 & lhs);\n \n template <size_t Bits, typename Signed, size_t Bits2, typename Signed2>\n-std::common_type_t<wide_integer<Bits, Signed>, wide_integer<Bits2, Signed2>> constexpr\n-operator%(const wide_integer<Bits, Signed> & lhs, const wide_integer<Bits2, Signed2> & rhs);\n+std::common_type_t<integer<Bits, Signed>, integer<Bits2, Signed2>> constexpr\n+operator%(const integer<Bits, Signed> & lhs, const integer<Bits2, Signed2> & rhs);\n template <typename Integral, typename Integral2, class = __only_integer<Integral, Integral2>>\n std::common_type_t<Integral, Integral2> constexpr operator%(const Integral & rhs, const Integral2 & lhs);\n \n template <size_t Bits, typename Signed, size_t Bits2, typename Signed2>\n-std::common_type_t<wide_integer<Bits, Signed>, wide_integer<Bits2, Signed2>> constexpr\n-operator&(const wide_integer<Bits, Signed> & lhs, const wide_integer<Bits2, Signed2> & rhs);\n+std::common_type_t<integer<Bits, Signed>, integer<Bits2, Signed2>> constexpr\n+operator&(const integer<Bits, Signed> & lhs, const integer<Bits2, Signed2> & rhs);\n template <typename Integral, typename Integral2, class = __only_integer<Integral, Integral2>>\n std::common_type_t<Integral, Integral2> constexpr operator&(const Integral & rhs, const Integral2 & lhs);\n \n template <size_t Bits, typename Signed, size_t Bits2, typename Signed2>\n-std::common_type_t<wide_integer<Bits, Signed>, wide_integer<Bits2, Signed2>> constexpr\n-operator|(const wide_integer<Bits, Signed> & lhs, const wide_integer<Bits2, Signed2> & rhs);\n+std::common_type_t<integer<Bits, Signed>, integer<Bits2, Signed2>> constexpr\n+operator|(const integer<Bits, Signed> & lhs, const integer<Bits2, Signed2> & rhs);\n template <typename Integral, typename Integral2, class = __only_integer<Integral, Integral2>>\n std::common_type_t<Integral, Integral2> constexpr operator|(const Integral & rhs, const Integral2 & lhs);\n \n template <size_t Bits, typename Signed, size_t Bits2, typename Signed2>\n-std::common_type_t<wide_integer<Bits, Signed>, wide_integer<Bits2, Signed2>> constexpr\n-operator^(const wide_integer<Bits, Signed> & lhs, const wide_integer<Bits2, Signed2> & rhs);\n+std::common_type_t<integer<Bits, Signed>, integer<Bits2, Signed2>> constexpr\n+operator^(const integer<Bits, Signed> & lhs, const integer<Bits2, Signed2> & rhs);\n template <typename Integral, typename Integral2, class = __only_integer<Integral, Integral2>>\n std::common_type_t<Integral, Integral2> constexpr operator^(const Integral & rhs, const Integral2 & lhs);\n \n // TODO: Integral\n template <size_t Bits, typename Signed>\n-constexpr wide_integer<Bits, Signed> operator<<(const wide_integer<Bits, Signed> & lhs, int n) noexcept;\n+constexpr integer<Bits, Signed> operator<<(const integer<Bits, Signed> & lhs, int n) noexcept;\n template <size_t Bits, typename Signed>\n-constexpr wide_integer<Bits, Signed> operator>>(const wide_integer<Bits, Signed> & lhs, int n) noexcept;\n+constexpr integer<Bits, Signed> operator>>(const integer<Bits, Signed> & lhs, int n) noexcept;\n \n template <size_t Bits, typename Signed, typename Int, typename = std::enable_if_t<!std::is_same_v<Int, int>>>\n-constexpr wide_integer<Bits, Signed> operator<<(const wide_integer<Bits, Signed> & lhs, Int n) noexcept\n+constexpr integer<Bits, Signed> operator<<(const integer<Bits, Signed> & lhs, Int n) noexcept\n {\n     return lhs << int(n);\n }\n template <size_t Bits, typename Signed, typename Int, typename = std::enable_if_t<!std::is_same_v<Int, int>>>\n-constexpr wide_integer<Bits, Signed> operator>>(const wide_integer<Bits, Signed> & lhs, Int n) noexcept\n+constexpr integer<Bits, Signed> operator>>(const integer<Bits, Signed> & lhs, Int n) noexcept\n {\n     return lhs >> int(n);\n }\n \n template <size_t Bits, typename Signed, size_t Bits2, typename Signed2>\n-constexpr bool operator<(const wide_integer<Bits, Signed> & lhs, const wide_integer<Bits2, Signed2> & rhs);\n+constexpr bool operator<(const integer<Bits, Signed> & lhs, const integer<Bits2, Signed2> & rhs);\n template <typename Arithmetic, typename Arithmetic2, class = __only_arithmetic<Arithmetic, Arithmetic2>>\n constexpr bool operator<(const Arithmetic & rhs, const Arithmetic2 & lhs);\n \n template <size_t Bits, typename Signed, size_t Bits2, typename Signed2>\n-constexpr bool operator>(const wide_integer<Bits, Signed> & lhs, const wide_integer<Bits2, Signed2> & rhs);\n+constexpr bool operator>(const integer<Bits, Signed> & lhs, const integer<Bits2, Signed2> & rhs);\n template <typename Arithmetic, typename Arithmetic2, class = __only_arithmetic<Arithmetic, Arithmetic2>>\n constexpr bool operator>(const Arithmetic & rhs, const Arithmetic2 & lhs);\n \n template <size_t Bits, typename Signed, size_t Bits2, typename Signed2>\n-constexpr bool operator<=(const wide_integer<Bits, Signed> & lhs, const wide_integer<Bits2, Signed2> & rhs);\n+constexpr bool operator<=(const integer<Bits, Signed> & lhs, const integer<Bits2, Signed2> & rhs);\n template <typename Arithmetic, typename Arithmetic2, class = __only_arithmetic<Arithmetic, Arithmetic2>>\n constexpr bool operator<=(const Arithmetic & rhs, const Arithmetic2 & lhs);\n \n template <size_t Bits, typename Signed, size_t Bits2, typename Signed2>\n-constexpr bool operator>=(const wide_integer<Bits, Signed> & lhs, const wide_integer<Bits2, Signed2> & rhs);\n+constexpr bool operator>=(const integer<Bits, Signed> & lhs, const integer<Bits2, Signed2> & rhs);\n template <typename Arithmetic, typename Arithmetic2, class = __only_arithmetic<Arithmetic, Arithmetic2>>\n constexpr bool operator>=(const Arithmetic & rhs, const Arithmetic2 & lhs);\n \n template <size_t Bits, typename Signed, size_t Bits2, typename Signed2>\n-constexpr bool operator==(const wide_integer<Bits, Signed> & lhs, const wide_integer<Bits2, Signed2> & rhs);\n+constexpr bool operator==(const integer<Bits, Signed> & lhs, const integer<Bits2, Signed2> & rhs);\n template <typename Arithmetic, typename Arithmetic2, class = __only_arithmetic<Arithmetic, Arithmetic2>>\n constexpr bool operator==(const Arithmetic & rhs, const Arithmetic2 & lhs);\n \n template <size_t Bits, typename Signed, size_t Bits2, typename Signed2>\n-constexpr bool operator!=(const wide_integer<Bits, Signed> & lhs, const wide_integer<Bits2, Signed2> & rhs);\n+constexpr bool operator!=(const integer<Bits, Signed> & lhs, const integer<Bits2, Signed2> & rhs);\n template <typename Arithmetic, typename Arithmetic2, class = __only_arithmetic<Arithmetic, Arithmetic2>>\n constexpr bool operator!=(const Arithmetic & rhs, const Arithmetic2 & lhs);\n \n-template <size_t Bits, typename Signed>\n-std::string to_string(const wide_integer<Bits, Signed> & n);\n+}\n+\n+namespace std\n+{\n \n template <size_t Bits, typename Signed>\n-struct hash<wide_integer<Bits, Signed>>;\n+struct hash<wide::integer<Bits, Signed>>;\n \n }\n \ndiff --git a/base/common/wide_integer_impl.h b/base/common/wide_integer_impl.h\nindex c77a9120a55a..26bd6704bdc6 100644\n--- a/base/common/wide_integer_impl.h\n+++ b/base/common/wide_integer_impl.h\n@@ -1,19 +1,47 @@\n /// Original is here https://github.com/cerevra/int\n #pragma once\n \n-#include \"wide_integer.h\"\n+#include \"throwError.h\"\n \n-#include <array>\n-#include <cstring>\n+#ifndef CHAR_BIT\n+#define CHAR_BIT 8\n+#endif\n+\n+namespace wide\n+{\n+\n+template <typename T>\n+struct IsWideInteger\n+{\n+    static const constexpr bool value = false;\n+};\n+\n+template <size_t Bits, typename Signed>\n+struct IsWideInteger<wide::integer<Bits, Signed>>\n+{\n+    static const constexpr bool value = true;\n+};\n+\n+template <typename T>\n+static constexpr bool ArithmeticConcept() noexcept\n+{\n+    return std::is_arithmetic_v<T> || IsWideInteger<T>::value;\n+}\n+\n+template <typename T>\n+static constexpr bool IntegralConcept() noexcept\n+{\n+    return std::is_integral_v<T> || IsWideInteger<T>::value;\n+}\n+\n+}\n \n namespace std\n {\n-#define CT(x) \\\n-    std::common_type_t<std::decay_t<decltype(rhs)>, std::decay_t<decltype(lhs)>> { x }\n \n // numeric limits\n template <size_t Bits, typename Signed>\n-class numeric_limits<wide_integer<Bits, Signed>>\n+class numeric_limits<wide::integer<Bits, Signed>>\n {\n public:\n     static constexpr bool is_specialized = true;\n@@ -40,103 +68,84 @@ class numeric_limits<wide_integer<Bits, Signed>>\n     static constexpr bool traps = true;\n     static constexpr bool tinyness_before = false;\n \n-    static constexpr wide_integer<Bits, Signed> min() noexcept\n+    static constexpr wide::integer<Bits, Signed> min() noexcept\n     {\n         if (is_same<Signed, signed>::value)\n         {\n-            using T = wide_integer<Bits, signed>;\n+            using T = wide::integer<Bits, signed>;\n             T res{};\n-            res.m_arr[T::_impl::big(0)] = std::numeric_limits<typename wide_integer<Bits, Signed>::signed_base_type>::min();\n+            res.m_arr[T::_impl::big(0)] = std::numeric_limits<typename wide::integer<Bits, Signed>::signed_base_type>::min();\n             return res;\n         }\n         return 0;\n     }\n \n-    static constexpr wide_integer<Bits, Signed> max() noexcept\n+    static constexpr wide::integer<Bits, Signed> max() noexcept\n     {\n-        using T = wide_integer<Bits, Signed>;\n+        using T = wide::integer<Bits, Signed>;\n         T res{};\n         res.m_arr[T::_impl::big(0)] = is_same<Signed, signed>::value\n-            ? std::numeric_limits<typename wide_integer<Bits, Signed>::signed_base_type>::max()\n-            : std::numeric_limits<typename wide_integer<Bits, Signed>::base_type>::max();\n-        for (int i = 1; i < wide_integer<Bits, Signed>::_impl::arr_size; ++i)\n+            ? std::numeric_limits<typename wide::integer<Bits, Signed>::signed_base_type>::max()\n+            : std::numeric_limits<typename wide::integer<Bits, Signed>::base_type>::max();\n+        for (int i = 1; i < wide::integer<Bits, Signed>::_impl::arr_size; ++i)\n         {\n-            res.m_arr[T::_impl::big(i)] = std::numeric_limits<typename wide_integer<Bits, Signed>::base_type>::max();\n+            res.m_arr[T::_impl::big(i)] = std::numeric_limits<typename wide::integer<Bits, Signed>::base_type>::max();\n         }\n         return res;\n     }\n \n-    static constexpr wide_integer<Bits, Signed> lowest() noexcept { return min(); }\n-    static constexpr wide_integer<Bits, Signed> epsilon() noexcept { return 0; }\n-    static constexpr wide_integer<Bits, Signed> round_error() noexcept { return 0; }\n-    static constexpr wide_integer<Bits, Signed> infinity() noexcept { return 0; }\n-    static constexpr wide_integer<Bits, Signed> quiet_NaN() noexcept { return 0; }\n-    static constexpr wide_integer<Bits, Signed> signaling_NaN() noexcept { return 0; }\n-    static constexpr wide_integer<Bits, Signed> denorm_min() noexcept { return 0; }\n-};\n-\n-template <typename T>\n-struct IsWideInteger\n-{\n-    static const constexpr bool value = false;\n-};\n-\n-template <size_t Bits, typename Signed>\n-struct IsWideInteger<wide_integer<Bits, Signed>>\n-{\n-    static const constexpr bool value = true;\n+    static constexpr wide::integer<Bits, Signed> lowest() noexcept { return min(); }\n+    static constexpr wide::integer<Bits, Signed> epsilon() noexcept { return 0; }\n+    static constexpr wide::integer<Bits, Signed> round_error() noexcept { return 0; }\n+    static constexpr wide::integer<Bits, Signed> infinity() noexcept { return 0; }\n+    static constexpr wide::integer<Bits, Signed> quiet_NaN() noexcept { return 0; }\n+    static constexpr wide::integer<Bits, Signed> signaling_NaN() noexcept { return 0; }\n+    static constexpr wide::integer<Bits, Signed> denorm_min() noexcept { return 0; }\n };\n \n-template <typename T>\n-static constexpr bool ArithmeticConcept() noexcept\n-{\n-    return std::is_arithmetic_v<T> || IsWideInteger<T>::value;\n-}\n-\n-template <typename T>\n-static constexpr bool IntegralConcept() noexcept\n-{\n-    return std::is_integral_v<T> || IsWideInteger<T>::value;\n-}\n-\n // type traits\n template <size_t Bits, typename Signed, size_t Bits2, typename Signed2>\n-struct common_type<wide_integer<Bits, Signed>, wide_integer<Bits2, Signed2>>\n+struct common_type<wide::integer<Bits, Signed>, wide::integer<Bits2, Signed2>>\n {\n     using type = std::conditional_t < Bits == Bits2,\n-          wide_integer<\n+          wide::integer<\n               Bits,\n-              std::conditional_t<(std::is_same<Signed, Signed2>::value && std::is_same<Signed2, signed>::value), signed, unsigned>>,\n-          std::conditional_t<Bits2<Bits, wide_integer<Bits, Signed>, wide_integer<Bits2, Signed2>>>;\n+              std::conditional_t<(std::is_same_v<Signed, Signed2> && std::is_same_v<Signed2, signed>), signed, unsigned>>,\n+          std::conditional_t<Bits2<Bits, wide::integer<Bits, Signed>, wide::integer<Bits2, Signed2>>>;\n };\n \n template <size_t Bits, typename Signed, typename Arithmetic>\n-struct common_type<wide_integer<Bits, Signed>, Arithmetic>\n+struct common_type<wide::integer<Bits, Signed>, Arithmetic>\n {\n-    static_assert(ArithmeticConcept<Arithmetic>(), \"\");\n+    static_assert(wide::ArithmeticConcept<Arithmetic>());\n \n     using type = std::conditional_t<\n-        std::is_floating_point<Arithmetic>::value,\n+        std::is_floating_point_v<Arithmetic>,\n         Arithmetic,\n         std::conditional_t<\n             sizeof(Arithmetic) < Bits * sizeof(long),\n-            wide_integer<Bits, Signed>,\n+            wide::integer<Bits, Signed>,\n             std::conditional_t<\n                 Bits * sizeof(long) < sizeof(Arithmetic),\n                 Arithmetic,\n                 std::conditional_t<\n-                    Bits * sizeof(long) == sizeof(Arithmetic) && (is_same<Signed, signed>::value || std::is_signed<Arithmetic>::value),\n+                    Bits * sizeof(long) == sizeof(Arithmetic) && (std::is_same_v<Signed, signed> || std::is_signed_v<Arithmetic>),\n                     Arithmetic,\n-                    wide_integer<Bits, Signed>>>>>;\n+                    wide::integer<Bits, Signed>>>>>;\n };\n \n template <typename Arithmetic, size_t Bits, typename Signed>\n-struct common_type<Arithmetic, wide_integer<Bits, Signed>> : std::common_type<wide_integer<Bits, Signed>, Arithmetic>\n+struct common_type<Arithmetic, wide::integer<Bits, Signed>> : common_type<wide::integer<Bits, Signed>, Arithmetic>\n {\n };\n \n+}\n+\n+namespace wide\n+{\n+\n template <size_t Bits, typename Signed>\n-struct wide_integer<Bits, Signed>::_impl\n+struct integer<Bits, Signed>::_impl\n {\n     static_assert(Bits % CHAR_BIT == 0, \"=)\");\n \n@@ -152,7 +161,7 @@ struct wide_integer<Bits, Signed>::_impl\n     static constexpr unsigned any(unsigned idx) { return idx; }\n \n     template <size_t B, class T>\n-    constexpr static bool is_negative(const wide_integer<B, T> & n) noexcept\n+    constexpr static bool is_negative(const integer<B, T> & n) noexcept\n     {\n         if constexpr (std::is_same_v<T, signed>)\n             return static_cast<signed_base_type>(n.m_arr[big(0)]) < 0;\n@@ -161,7 +170,7 @@ struct wide_integer<Bits, Signed>::_impl\n     }\n \n     template <size_t B, class S>\n-    constexpr static wide_integer<B, S> make_positive(const wide_integer<B, S> & n) noexcept\n+    constexpr static integer<B, S> make_positive(const integer<B, S> & n) noexcept\n     {\n         return is_negative(n) ? operator_unary_minus(n) : n;\n     }\n@@ -178,7 +187,7 @@ struct wide_integer<Bits, Signed>::_impl\n     }\n \n     template <typename Integral>\n-    constexpr static void wide_integer_from_bultin(wide_integer<Bits, Signed> & self, Integral rhs) noexcept\n+    constexpr static void wide_integer_from_bultin(integer<Bits, Signed> & self, Integral rhs) noexcept\n     {\n         auto r = _impl::to_Integral(rhs);\n \n@@ -197,7 +206,7 @@ struct wide_integer<Bits, Signed>::_impl\n         }\n     }\n \n-    constexpr static void wide_integer_from_bultin(wide_integer<Bits, Signed> & self, double rhs) noexcept\n+    constexpr static void wide_integer_from_bultin(integer<Bits, Signed> & self, double rhs) noexcept\n     {\n         if ((rhs > 0 && rhs < std::numeric_limits<uint64_t>::max()) || (rhs < 0 && rhs > std::numeric_limits<int64_t>::min()))\n         {\n@@ -223,10 +232,10 @@ struct wide_integer<Bits, Signed>::_impl\n \n     template <size_t Bits2, typename Signed2>\n     constexpr static void\n-    wide_integer_from_wide_integer(wide_integer<Bits, Signed> & self, const wide_integer<Bits2, Signed2> & rhs) noexcept\n+    wide_integer_from_wide_integer(integer<Bits, Signed> & self, const integer<Bits2, Signed2> & rhs) noexcept\n     {\n         //        int Bits_to_copy = std::min(arr_size, rhs.arr_size);\n-        auto rhs_arr_size = wide_integer<Bits2, Signed2>::_impl::arr_size;\n+        auto rhs_arr_size = integer<Bits2, Signed2>::_impl::arr_size;\n         int base_elems_to_copy = _impl::arr_size < rhs_arr_size ? _impl::arr_size : rhs_arr_size;\n         for (int i = 0; i < base_elems_to_copy; ++i)\n         {\n@@ -244,14 +253,14 @@ struct wide_integer<Bits, Signed>::_impl\n         return sizeof(T) * CHAR_BIT <= Bits;\n     }\n \n-    constexpr static wide_integer<Bits, unsigned> shift_left(const wide_integer<Bits, unsigned> & rhs, int n)\n+    constexpr static integer<Bits, unsigned> shift_left(const integer<Bits, unsigned> & rhs, int n) noexcept\n     {\n         if (static_cast<size_t>(n) >= base_bits * arr_size)\n             return 0;\n         if (n <= 0)\n             return rhs;\n \n-        wide_integer<Bits, Signed> lhs = rhs;\n+        integer<Bits, Signed> lhs = rhs;\n         int bit_shift = n % base_bits;\n         unsigned n_bytes = n / base_bits;\n         if (bit_shift)\n@@ -275,23 +284,19 @@ struct wide_integer<Bits, Signed>::_impl\n         return lhs;\n     }\n \n-    constexpr static wide_integer<Bits, signed> shift_left(const wide_integer<Bits, signed> & rhs, int n)\n+    constexpr static integer<Bits, signed> shift_left(const integer<Bits, signed> & rhs, int n) noexcept\n     {\n-        // static_assert(is_negative(rhs), \"shift left for negative lhsbers is underfined!\");\n-        if (is_negative(rhs))\n-            throw std::runtime_error(\"shift left for negative lhsbers is underfined!\");\n-\n-        return wide_integer<Bits, signed>(shift_left(wide_integer<Bits, unsigned>(rhs), n));\n+        return integer<Bits, signed>(shift_left(integer<Bits, unsigned>(rhs), n));\n     }\n \n-    constexpr static wide_integer<Bits, unsigned> shift_right(const wide_integer<Bits, unsigned> & rhs, int n) noexcept\n+    constexpr static integer<Bits, unsigned> shift_right(const integer<Bits, unsigned> & rhs, int n) noexcept\n     {\n         if (static_cast<size_t>(n) >= base_bits * arr_size)\n             return 0;\n         if (n <= 0)\n             return rhs;\n \n-        wide_integer<Bits, Signed> lhs = rhs;\n+        integer<Bits, Signed> lhs = rhs;\n         int bit_shift = n % base_bits;\n         unsigned n_bytes = n / base_bits;\n         if (bit_shift)\n@@ -315,7 +320,7 @@ struct wide_integer<Bits, Signed>::_impl\n         return lhs;\n     }\n \n-    constexpr static wide_integer<Bits, signed> shift_right(const wide_integer<Bits, signed> & rhs, int n) noexcept\n+    constexpr static integer<Bits, signed> shift_right(const integer<Bits, signed> & rhs, int n) noexcept\n     {\n         if (static_cast<size_t>(n) >= base_bits * arr_size)\n             return 0;\n@@ -324,14 +329,14 @@ struct wide_integer<Bits, Signed>::_impl\n \n         bool is_neg = is_negative(rhs);\n         if (!is_neg)\n-            return shift_right(wide_integer<Bits, unsigned>(rhs), n);\n+            return shift_right(integer<Bits, unsigned>(rhs), n);\n \n-        wide_integer<Bits, Signed> lhs = rhs;\n+        integer<Bits, Signed> lhs = rhs;\n         int bit_shift = n % base_bits;\n         unsigned n_bytes = n / base_bits;\n         if (bit_shift)\n         {\n-            lhs = shift_right(wide_integer<Bits, unsigned>(lhs), bit_shift);\n+            lhs = shift_right(integer<Bits, unsigned>(lhs), bit_shift);\n             lhs.m_arr[big(0)] |= std::numeric_limits<base_type>::max() << (base_bits - bit_shift);\n         }\n         if (n_bytes)\n@@ -349,8 +354,8 @@ struct wide_integer<Bits, Signed>::_impl\n     }\n \n     template <typename T>\n-    constexpr static wide_integer<Bits, Signed>\n-    operator_plus_T(const wide_integer<Bits, Signed> & lhs, T rhs) noexcept(is_same<Signed, unsigned>::value)\n+    constexpr static integer<Bits, Signed>\n+    operator_plus_T(const integer<Bits, Signed> & lhs, T rhs) noexcept(std::is_same_v<Signed, unsigned>)\n     {\n         if (rhs < 0)\n             return _operator_minus_T(lhs, -rhs);\n@@ -360,10 +365,10 @@ struct wide_integer<Bits, Signed>::_impl\n \n private:\n     template <typename T>\n-    constexpr static wide_integer<Bits, Signed>\n-    _operator_minus_T(const wide_integer<Bits, Signed> & lhs, T rhs) noexcept(is_same<Signed, unsigned>::value)\n+    constexpr static integer<Bits, Signed>\n+    _operator_minus_T(const integer<Bits, Signed> & lhs, T rhs) noexcept(std::is_same_v<Signed, unsigned>)\n     {\n-        wide_integer<Bits, Signed> res = lhs;\n+        integer<Bits, Signed> res = lhs;\n \n         bool is_underflow = false;\n         int r_idx = 0;\n@@ -399,10 +404,10 @@ struct wide_integer<Bits, Signed>::_impl\n     }\n \n     template <typename T>\n-    constexpr static wide_integer<Bits, Signed>\n-    _operator_plus_T(const wide_integer<Bits, Signed> & lhs, T rhs) noexcept(is_same<Signed, unsigned>::value)\n+    constexpr static integer<Bits, Signed>\n+    _operator_plus_T(const integer<Bits, Signed> & lhs, T rhs) noexcept(std::is_same_v<Signed, unsigned>)\n     {\n-        wide_integer<Bits, Signed> res = lhs;\n+        integer<Bits, Signed> res = lhs;\n \n         bool is_overflow = false;\n         int r_idx = 0;\n@@ -438,27 +443,27 @@ struct wide_integer<Bits, Signed>::_impl\n     }\n \n public:\n-    constexpr static wide_integer<Bits, Signed> operator_unary_tilda(const wide_integer<Bits, Signed> & lhs) noexcept\n+    constexpr static integer<Bits, Signed> operator_unary_tilda(const integer<Bits, Signed> & lhs) noexcept\n     {\n-        wide_integer<Bits, Signed> res{};\n+        integer<Bits, Signed> res{};\n \n         for (int i = 0; i < arr_size; ++i)\n             res.m_arr[any(i)] = ~lhs.m_arr[any(i)];\n         return res;\n     }\n \n-    constexpr static wide_integer<Bits, Signed>\n-    operator_unary_minus(const wide_integer<Bits, Signed> & lhs) noexcept(is_same<Signed, unsigned>::value)\n+    constexpr static integer<Bits, Signed>\n+    operator_unary_minus(const integer<Bits, Signed> & lhs) noexcept(std::is_same_v<Signed, unsigned>)\n     {\n         return operator_plus_T(operator_unary_tilda(lhs), 1);\n     }\n \n     template <typename T>\n-    constexpr static auto operator_plus(const wide_integer<Bits, Signed> & lhs, const T & rhs) noexcept(is_same<Signed, unsigned>::value)\n+    constexpr static auto operator_plus(const integer<Bits, Signed> & lhs, const T & rhs) noexcept(std::is_same_v<Signed, unsigned>)\n     {\n         if constexpr (should_keep_size<T>())\n         {\n-            wide_integer<Bits, Signed> t = rhs;\n+            integer<Bits, Signed> t = rhs;\n             if (is_negative(t))\n                 return _operator_minus_wide_integer(lhs, operator_unary_minus(t));\n             else\n@@ -467,17 +472,17 @@ struct wide_integer<Bits, Signed>::_impl\n         else\n         {\n             static_assert(T::_impl::_is_wide_integer, \"\");\n-            return std::common_type_t<wide_integer<Bits, Signed>, wide_integer<T::_impl::_Bits, Signed>>::_impl::operator_plus(\n-                wide_integer<T::_impl::_Bits, Signed>(lhs), rhs);\n+            return std::common_type_t<integer<Bits, Signed>, integer<T::_impl::_Bits, Signed>>::_impl::operator_plus(\n+                integer<T::_impl::_Bits, Signed>(lhs), rhs);\n         }\n     }\n \n     template <typename T>\n-    constexpr static auto operator_minus(const wide_integer<Bits, Signed> & lhs, const T & rhs) noexcept(is_same<Signed, unsigned>::value)\n+    constexpr static auto operator_minus(const integer<Bits, Signed> & lhs, const T & rhs) noexcept(std::is_same_v<Signed, unsigned>)\n     {\n         if constexpr (should_keep_size<T>())\n         {\n-            wide_integer<Bits, Signed> t = rhs;\n+            integer<Bits, Signed> t = rhs;\n             if (is_negative(t))\n                 return _operator_plus_wide_integer(lhs, operator_unary_minus(t));\n             else\n@@ -486,16 +491,16 @@ struct wide_integer<Bits, Signed>::_impl\n         else\n         {\n             static_assert(T::_impl::_is_wide_integer, \"\");\n-            return std::common_type_t<wide_integer<Bits, Signed>, wide_integer<T::_impl::_Bits, Signed>>::_impl::operator_minus(\n-                wide_integer<T::_impl::_Bits, Signed>(lhs), rhs);\n+            return std::common_type_t<integer<Bits, Signed>, integer<T::_impl::_Bits, Signed>>::_impl::operator_minus(\n+                integer<T::_impl::_Bits, Signed>(lhs), rhs);\n         }\n     }\n \n private:\n-    constexpr static wide_integer<Bits, Signed> _operator_minus_wide_integer(\n-        const wide_integer<Bits, Signed> & lhs, const wide_integer<Bits, Signed> & rhs) noexcept(is_same<Signed, unsigned>::value)\n+    constexpr static integer<Bits, Signed> _operator_minus_wide_integer(\n+        const integer<Bits, Signed> & lhs, const integer<Bits, Signed> & rhs) noexcept(std::is_same_v<Signed, unsigned>)\n     {\n-        wide_integer<Bits, Signed> res = lhs;\n+        integer<Bits, Signed> res = lhs;\n \n         bool is_underflow = false;\n         for (int idx = 0; idx < arr_size; ++idx)\n@@ -518,10 +523,10 @@ struct wide_integer<Bits, Signed>::_impl\n         return res;\n     }\n \n-    constexpr static wide_integer<Bits, Signed> _operator_plus_wide_integer(\n-        const wide_integer<Bits, Signed> & lhs, const wide_integer<Bits, Signed> & rhs) noexcept(is_same<Signed, unsigned>::value)\n+    constexpr static integer<Bits, Signed> _operator_plus_wide_integer(\n+        const integer<Bits, Signed> & lhs, const integer<Bits, Signed> & rhs) noexcept(std::is_same_v<Signed, unsigned>)\n     {\n-        wide_integer<Bits, Signed> res = lhs;\n+        integer<Bits, Signed> res = lhs;\n \n         bool is_overflow = false;\n         for (int idx = 0; idx < arr_size; ++idx)\n@@ -546,14 +551,14 @@ struct wide_integer<Bits, Signed>::_impl\n \n public:\n     template <typename T>\n-    constexpr static auto operator_star(const wide_integer<Bits, Signed> & lhs, const T & rhs)\n+    constexpr static auto operator_star(const integer<Bits, Signed> & lhs, const T & rhs)\n     {\n         if constexpr (should_keep_size<T>())\n         {\n-            const wide_integer<Bits, unsigned> a = make_positive(lhs);\n-            wide_integer<Bits, unsigned> t = make_positive(wide_integer<Bits, Signed>(rhs));\n+            const integer<Bits, unsigned> a = make_positive(lhs);\n+            integer<Bits, unsigned> t = make_positive(integer<Bits, Signed>(rhs));\n \n-            wide_integer<Bits, Signed> res = 0;\n+            integer<Bits, Signed> res = 0;\n \n             for (size_t i = 0; i < arr_size * base_bits; ++i)\n             {\n@@ -563,7 +568,7 @@ struct wide_integer<Bits, Signed>::_impl\n                 t = shift_right(t, 1);\n             }\n \n-            if (is_same<Signed, signed>::value && is_negative(wide_integer<Bits, Signed>(rhs)) != is_negative(lhs))\n+            if (std::is_same_v<Signed, signed> && is_negative(integer<Bits, Signed>(rhs)) != is_negative(lhs))\n                 res = operator_unary_minus(res);\n \n             return res;\n@@ -571,19 +576,19 @@ struct wide_integer<Bits, Signed>::_impl\n         else\n         {\n             static_assert(T::_impl::_is_wide_integer, \"\");\n-            return std::common_type_t<wide_integer<Bits, Signed>, T>::_impl::operator_star(T(lhs), rhs);\n+            return std::common_type_t<integer<Bits, Signed>, T>::_impl::operator_star(T(lhs), rhs);\n         }\n     }\n \n     template <typename T>\n-    constexpr static bool operator_more(const wide_integer<Bits, Signed> & lhs, const T & rhs) noexcept\n+    constexpr static bool operator_more(const integer<Bits, Signed> & lhs, const T & rhs) noexcept\n     {\n         if constexpr (should_keep_size<T>())\n         {\n             // static_assert(Signed == std::is_signed<T>::value,\n             //               \"warning: operator_more: comparison of integers of different signs\");\n \n-            wide_integer<Bits, Signed> t = rhs;\n+            integer<Bits, Signed> t = rhs;\n \n             if (std::numeric_limits<T>::is_signed && (is_negative(lhs) != is_negative(t)))\n                 return is_negative(t);\n@@ -599,19 +604,19 @@ struct wide_integer<Bits, Signed>::_impl\n         else\n         {\n             static_assert(T::_impl::_is_wide_integer, \"\");\n-            return std::common_type_t<wide_integer<Bits, Signed>, T>::_impl::operator_more(T(lhs), rhs);\n+            return std::common_type_t<integer<Bits, Signed>, T>::_impl::operator_more(T(lhs), rhs);\n         }\n     }\n \n     template <typename T>\n-    constexpr static bool operator_less(const wide_integer<Bits, Signed> & lhs, const T & rhs) noexcept\n+    constexpr static bool operator_less(const integer<Bits, Signed> & lhs, const T & rhs) noexcept\n     {\n         if constexpr (should_keep_size<T>())\n         {\n             // static_assert(Signed == std::is_signed<T>::value,\n             //               \"warning: operator_less: comparison of integers of different signs\");\n \n-            wide_integer<Bits, Signed> t = rhs;\n+            integer<Bits, Signed> t = rhs;\n \n             if (std::numeric_limits<T>::is_signed && (is_negative(lhs) != is_negative(t)))\n                 return is_negative(lhs);\n@@ -625,16 +630,16 @@ struct wide_integer<Bits, Signed>::_impl\n         else\n         {\n             static_assert(T::_impl::_is_wide_integer, \"\");\n-            return std::common_type_t<wide_integer<Bits, Signed>, T>::_impl::operator_less(T(lhs), rhs);\n+            return std::common_type_t<integer<Bits, Signed>, T>::_impl::operator_less(T(lhs), rhs);\n         }\n     }\n \n     template <typename T>\n-    constexpr static bool operator_eq(const wide_integer<Bits, Signed> & lhs, const T & rhs) noexcept\n+    constexpr static bool operator_eq(const integer<Bits, Signed> & lhs, const T & rhs) noexcept\n     {\n         if constexpr (should_keep_size<T>())\n         {\n-            wide_integer<Bits, Signed> t = rhs;\n+            integer<Bits, Signed> t = rhs;\n \n             for (int i = 0; i < arr_size; ++i)\n                 if (lhs.m_arr[any(i)] != t.m_arr[any(i)])\n@@ -645,17 +650,17 @@ struct wide_integer<Bits, Signed>::_impl\n         else\n         {\n             static_assert(T::_impl::_is_wide_integer, \"\");\n-            return std::common_type_t<wide_integer<Bits, Signed>, T>::_impl::operator_eq(T(lhs), rhs);\n+            return std::common_type_t<integer<Bits, Signed>, T>::_impl::operator_eq(T(lhs), rhs);\n         }\n     }\n \n     template <typename T>\n-    constexpr static auto operator_pipe(const wide_integer<Bits, Signed> & lhs, const T & rhs) noexcept\n+    constexpr static auto operator_pipe(const integer<Bits, Signed> & lhs, const T & rhs) noexcept\n     {\n         if constexpr (should_keep_size<T>())\n         {\n-            wide_integer<Bits, Signed> t = rhs;\n-            wide_integer<Bits, Signed> res = lhs;\n+            integer<Bits, Signed> t = rhs;\n+            integer<Bits, Signed> res = lhs;\n \n             for (int i = 0; i < arr_size; ++i)\n                 res.m_arr[any(i)] |= t.m_arr[any(i)];\n@@ -664,17 +669,17 @@ struct wide_integer<Bits, Signed>::_impl\n         else\n         {\n             static_assert(T::_impl::_is_wide_integer, \"\");\n-            return std::common_type_t<wide_integer<Bits, Signed>, T>::_impl::operator_pipe(T(lhs), rhs);\n+            return std::common_type_t<integer<Bits, Signed>, T>::_impl::operator_pipe(T(lhs), rhs);\n         }\n     }\n \n     template <typename T>\n-    constexpr static auto operator_amp(const wide_integer<Bits, Signed> & lhs, const T & rhs) noexcept\n+    constexpr static auto operator_amp(const integer<Bits, Signed> & lhs, const T & rhs) noexcept\n     {\n         if constexpr (should_keep_size<T>())\n         {\n-            wide_integer<Bits, Signed> t = rhs;\n-            wide_integer<Bits, Signed> res = lhs;\n+            integer<Bits, Signed> t = rhs;\n+            integer<Bits, Signed> res = lhs;\n \n             for (int i = 0; i < arr_size; ++i)\n                 res.m_arr[any(i)] &= t.m_arr[any(i)];\n@@ -683,7 +688,7 @@ struct wide_integer<Bits, Signed>::_impl\n         else\n         {\n             static_assert(T::_impl::_is_wide_integer, \"\");\n-            return std::common_type_t<wide_integer<Bits, Signed>, T>::_impl::operator_amp(T(lhs), rhs);\n+            return std::common_type_t<integer<Bits, Signed>, T>::_impl::operator_amp(T(lhs), rhs);\n         }\n     }\n \n@@ -702,7 +707,7 @@ struct wide_integer<Bits, Signed>::_impl\n         }\n \n         if (is_zero)\n-            throw std::domain_error(\"divide by zero\");\n+            throwError(\"divide by zero\");\n \n         T n = lhserator;\n         T d = denominator;\n@@ -733,15 +738,15 @@ struct wide_integer<Bits, Signed>::_impl\n \n public:\n     template <typename T>\n-    constexpr static auto operator_slash(const wide_integer<Bits, Signed> & lhs, const T & rhs)\n+    constexpr static auto operator_slash(const integer<Bits, Signed> & lhs, const T & rhs)\n     {\n         if constexpr (should_keep_size<T>())\n         {\n-            wide_integer<Bits, Signed> o = rhs;\n-            wide_integer<Bits, Signed> quotient{}, remainder{};\n+            integer<Bits, Signed> o = rhs;\n+            integer<Bits, Signed> quotient{}, remainder{};\n             divide(make_positive(lhs), make_positive(o), quotient, remainder);\n \n-            if (is_same<Signed, signed>::value && is_negative(o) != is_negative(lhs))\n+            if (std::is_same_v<Signed, signed> && is_negative(o) != is_negative(lhs))\n                 quotient = operator_unary_minus(quotient);\n \n             return quotient;\n@@ -749,20 +754,20 @@ struct wide_integer<Bits, Signed>::_impl\n         else\n         {\n             static_assert(T::_impl::_is_wide_integer, \"\");\n-            return std::common_type_t<wide_integer<Bits, Signed>, wide_integer<T::_impl::_Bits, Signed>>::operator_slash(T(lhs), rhs);\n+            return std::common_type_t<integer<Bits, Signed>, integer<T::_impl::_Bits, Signed>>::operator_slash(T(lhs), rhs);\n         }\n     }\n \n     template <typename T>\n-    constexpr static auto operator_percent(const wide_integer<Bits, Signed> & lhs, const T & rhs)\n+    constexpr static auto operator_percent(const integer<Bits, Signed> & lhs, const T & rhs)\n     {\n         if constexpr (should_keep_size<T>())\n         {\n-            wide_integer<Bits, Signed> o = rhs;\n-            wide_integer<Bits, Signed> quotient{}, remainder{};\n+            integer<Bits, Signed> o = rhs;\n+            integer<Bits, Signed> quotient{}, remainder{};\n             divide(make_positive(lhs), make_positive(o), quotient, remainder);\n \n-            if (is_same<Signed, signed>::value && is_negative(lhs))\n+            if (std::is_same_v<Signed, signed> && is_negative(lhs))\n                 remainder = operator_unary_minus(remainder);\n \n             return remainder;\n@@ -770,18 +775,18 @@ struct wide_integer<Bits, Signed>::_impl\n         else\n         {\n             static_assert(T::_impl::_is_wide_integer, \"\");\n-            return std::common_type_t<wide_integer<Bits, Signed>, wide_integer<T::_impl::_Bits, Signed>>::operator_percent(T(lhs), rhs);\n+            return std::common_type_t<integer<Bits, Signed>, integer<T::_impl::_Bits, Signed>>::operator_percent(T(lhs), rhs);\n         }\n     }\n \n     // ^\n     template <typename T>\n-    constexpr static auto operator_circumflex(const wide_integer<Bits, Signed> & lhs, const T & rhs) noexcept\n+    constexpr static auto operator_circumflex(const integer<Bits, Signed> & lhs, const T & rhs) noexcept\n     {\n         if constexpr (should_keep_size<T>())\n         {\n-            wide_integer<Bits, Signed> t(rhs);\n-            wide_integer<Bits, Signed> res = lhs;\n+            integer<Bits, Signed> t(rhs);\n+            integer<Bits, Signed> res = lhs;\n \n             for (int i = 0; i < arr_size; ++i)\n                 res.m_arr[any(i)] ^= t.m_arr[any(i)];\n@@ -794,11 +799,11 @@ struct wide_integer<Bits, Signed>::_impl\n         }\n     }\n \n-    constexpr static wide_integer<Bits, Signed> from_str(const char * c)\n+    constexpr static integer<Bits, Signed> from_str(const char * c)\n     {\n-        wide_integer<Bits, Signed> res = 0;\n+        integer<Bits, Signed> res = 0;\n \n-        bool is_neg = is_same<Signed, signed>::value && *c == '-';\n+        bool is_neg = std::is_same_v<Signed, signed> && *c == '-';\n         if (is_neg)\n             ++c;\n \n@@ -827,7 +832,7 @@ struct wide_integer<Bits, Signed>::_impl\n                     ++c;\n                 }\n                 else\n-                    throw std::runtime_error(\"invalid char from\");\n+                    throwError(\"invalid char from\");\n             }\n         }\n         else\n@@ -835,7 +840,7 @@ struct wide_integer<Bits, Signed>::_impl\n             while (*c)\n             {\n                 if (*c < '0' || *c > '9')\n-                    throw std::runtime_error(\"invalid char from\");\n+                    throwError(\"invalid char from\");\n \n                 res = operator_star(res, 10U);\n                 res = operator_plus_T(res, *c - '0');\n@@ -854,7 +859,7 @@ struct wide_integer<Bits, Signed>::_impl\n \n template <size_t Bits, typename Signed>\n template <typename T>\n-constexpr wide_integer<Bits, Signed>::wide_integer(T rhs) noexcept\n+constexpr integer<Bits, Signed>::integer(T rhs) noexcept\n     : m_arr{}\n {\n     if constexpr (IsWideInteger<T>::value)\n@@ -865,7 +870,7 @@ constexpr wide_integer<Bits, Signed>::wide_integer(T rhs) noexcept\n \n template <size_t Bits, typename Signed>\n template <typename T>\n-constexpr wide_integer<Bits, Signed>::wide_integer(std::initializer_list<T> il) noexcept\n+constexpr integer<Bits, Signed>::integer(std::initializer_list<T> il) noexcept\n     : m_arr{}\n {\n     if (il.size() == 1)\n@@ -881,7 +886,7 @@ constexpr wide_integer<Bits, Signed>::wide_integer(std::initializer_list<T> il)\n \n template <size_t Bits, typename Signed>\n template <size_t Bits2, typename Signed2>\n-constexpr wide_integer<Bits, Signed> & wide_integer<Bits, Signed>::operator=(const wide_integer<Bits2, Signed2> & rhs) noexcept\n+constexpr integer<Bits, Signed> & integer<Bits, Signed>::operator=(const integer<Bits2, Signed2> & rhs) noexcept\n {\n     _impl::wide_integer_from_wide_integer(*this, rhs);\n     return *this;\n@@ -889,7 +894,7 @@ constexpr wide_integer<Bits, Signed> & wide_integer<Bits, Signed>::operator=(con\n \n template <size_t Bits, typename Signed>\n template <typename T>\n-constexpr wide_integer<Bits, Signed> & wide_integer<Bits, Signed>::operator=(T rhs) noexcept\n+constexpr integer<Bits, Signed> & integer<Bits, Signed>::operator=(T rhs) noexcept\n {\n     _impl::wide_integer_from_bultin(*this, rhs);\n     return *this;\n@@ -897,7 +902,7 @@ constexpr wide_integer<Bits, Signed> & wide_integer<Bits, Signed>::operator=(T r\n \n template <size_t Bits, typename Signed>\n template <typename T>\n-constexpr wide_integer<Bits, Signed> & wide_integer<Bits, Signed>::operator*=(const T & rhs)\n+constexpr integer<Bits, Signed> & integer<Bits, Signed>::operator*=(const T & rhs)\n {\n     *this = *this * rhs;\n     return *this;\n@@ -905,7 +910,7 @@ constexpr wide_integer<Bits, Signed> & wide_integer<Bits, Signed>::operator*=(co\n \n template <size_t Bits, typename Signed>\n template <typename T>\n-constexpr wide_integer<Bits, Signed> & wide_integer<Bits, Signed>::operator/=(const T & rhs)\n+constexpr integer<Bits, Signed> & integer<Bits, Signed>::operator/=(const T & rhs)\n {\n     *this = *this / rhs;\n     return *this;\n@@ -913,7 +918,7 @@ constexpr wide_integer<Bits, Signed> & wide_integer<Bits, Signed>::operator/=(co\n \n template <size_t Bits, typename Signed>\n template <typename T>\n-constexpr wide_integer<Bits, Signed> & wide_integer<Bits, Signed>::operator+=(const T & rhs) noexcept(is_same<Signed, unsigned>::value)\n+constexpr integer<Bits, Signed> & integer<Bits, Signed>::operator+=(const T & rhs) noexcept(std::is_same_v<Signed, unsigned>)\n {\n     *this = *this + rhs;\n     return *this;\n@@ -921,7 +926,7 @@ constexpr wide_integer<Bits, Signed> & wide_integer<Bits, Signed>::operator+=(co\n \n template <size_t Bits, typename Signed>\n template <typename T>\n-constexpr wide_integer<Bits, Signed> & wide_integer<Bits, Signed>::operator-=(const T & rhs) noexcept(is_same<Signed, unsigned>::value)\n+constexpr integer<Bits, Signed> & integer<Bits, Signed>::operator-=(const T & rhs) noexcept(std::is_same_v<Signed, unsigned>)\n {\n     *this = *this - rhs;\n     return *this;\n@@ -929,7 +934,7 @@ constexpr wide_integer<Bits, Signed> & wide_integer<Bits, Signed>::operator-=(co\n \n template <size_t Bits, typename Signed>\n template <typename T>\n-constexpr wide_integer<Bits, Signed> & wide_integer<Bits, Signed>::operator%=(const T & rhs)\n+constexpr integer<Bits, Signed> & integer<Bits, Signed>::operator%=(const T & rhs)\n {\n     *this = *this % rhs;\n     return *this;\n@@ -937,7 +942,7 @@ constexpr wide_integer<Bits, Signed> & wide_integer<Bits, Signed>::operator%=(co\n \n template <size_t Bits, typename Signed>\n template <typename T>\n-constexpr wide_integer<Bits, Signed> & wide_integer<Bits, Signed>::operator&=(const T & rhs) noexcept\n+constexpr integer<Bits, Signed> & integer<Bits, Signed>::operator&=(const T & rhs) noexcept\n {\n     *this = *this & rhs;\n     return *this;\n@@ -945,7 +950,7 @@ constexpr wide_integer<Bits, Signed> & wide_integer<Bits, Signed>::operator&=(co\n \n template <size_t Bits, typename Signed>\n template <typename T>\n-constexpr wide_integer<Bits, Signed> & wide_integer<Bits, Signed>::operator|=(const T & rhs) noexcept\n+constexpr integer<Bits, Signed> & integer<Bits, Signed>::operator|=(const T & rhs) noexcept\n {\n     *this = *this | rhs;\n     return *this;\n@@ -953,35 +958,35 @@ constexpr wide_integer<Bits, Signed> & wide_integer<Bits, Signed>::operator|=(co\n \n template <size_t Bits, typename Signed>\n template <typename T>\n-constexpr wide_integer<Bits, Signed> & wide_integer<Bits, Signed>::operator^=(const T & rhs) noexcept\n+constexpr integer<Bits, Signed> & integer<Bits, Signed>::operator^=(const T & rhs) noexcept\n {\n     *this = *this ^ rhs;\n     return *this;\n }\n \n template <size_t Bits, typename Signed>\n-constexpr wide_integer<Bits, Signed> & wide_integer<Bits, Signed>::operator<<=(int n)\n+constexpr integer<Bits, Signed> & integer<Bits, Signed>::operator<<=(int n) noexcept\n {\n     *this = _impl::shift_left(*this, n);\n     return *this;\n }\n \n template <size_t Bits, typename Signed>\n-constexpr wide_integer<Bits, Signed> & wide_integer<Bits, Signed>::operator>>=(int n) noexcept\n+constexpr integer<Bits, Signed> & integer<Bits, Signed>::operator>>=(int n) noexcept\n {\n     *this = _impl::shift_right(*this, n);\n     return *this;\n }\n \n template <size_t Bits, typename Signed>\n-constexpr wide_integer<Bits, Signed> & wide_integer<Bits, Signed>::operator++() noexcept(is_same<Signed, unsigned>::value)\n+constexpr integer<Bits, Signed> & integer<Bits, Signed>::operator++() noexcept(std::is_same_v<Signed, unsigned>)\n {\n     *this = _impl::operator_plus(*this, 1);\n     return *this;\n }\n \n template <size_t Bits, typename Signed>\n-constexpr wide_integer<Bits, Signed> wide_integer<Bits, Signed>::operator++(int) noexcept(is_same<Signed, unsigned>::value)\n+constexpr integer<Bits, Signed> integer<Bits, Signed>::operator++(int) noexcept(std::is_same_v<Signed, unsigned>)\n {\n     auto tmp = *this;\n     *this = _impl::operator_plus(*this, 1);\n@@ -989,14 +994,14 @@ constexpr wide_integer<Bits, Signed> wide_integer<Bits, Signed>::operator++(int)\n }\n \n template <size_t Bits, typename Signed>\n-constexpr wide_integer<Bits, Signed> & wide_integer<Bits, Signed>::operator--() noexcept(is_same<Signed, unsigned>::value)\n+constexpr integer<Bits, Signed> & integer<Bits, Signed>::operator--() noexcept(std::is_same_v<Signed, unsigned>)\n {\n     *this = _impl::operator_minus(*this, 1);\n     return *this;\n }\n \n template <size_t Bits, typename Signed>\n-constexpr wide_integer<Bits, Signed> wide_integer<Bits, Signed>::operator--(int) noexcept(is_same<Signed, unsigned>::value)\n+constexpr integer<Bits, Signed> integer<Bits, Signed>::operator--(int) noexcept(std::is_same_v<Signed, unsigned>)\n {\n     auto tmp = *this;\n     *this = _impl::operator_minus(*this, 1);\n@@ -1004,14 +1009,14 @@ constexpr wide_integer<Bits, Signed> wide_integer<Bits, Signed>::operator--(int)\n }\n \n template <size_t Bits, typename Signed>\n-constexpr wide_integer<Bits, Signed>::operator bool() const noexcept\n+constexpr integer<Bits, Signed>::operator bool() const noexcept\n {\n     return !_impl::operator_eq(*this, 0);\n }\n \n template <size_t Bits, typename Signed>\n template <class T, class>\n-constexpr wide_integer<Bits, Signed>::operator T() const noexcept\n+constexpr integer<Bits, Signed>::operator T() const noexcept\n {\n     static_assert(std::numeric_limits<T>::is_integer, \"\");\n     T res = 0;\n@@ -1023,12 +1028,12 @@ constexpr wide_integer<Bits, Signed>::operator T() const noexcept\n }\n \n template <size_t Bits, typename Signed>\n-constexpr wide_integer<Bits, Signed>::operator long double() const noexcept\n+constexpr integer<Bits, Signed>::operator long double() const noexcept\n {\n     if (_impl::operator_eq(*this, 0))\n         return 0;\n \n-    wide_integer<Bits, Signed> tmp = *this;\n+    integer<Bits, Signed> tmp = *this;\n     if (_impl::is_negative(*this))\n         tmp = -tmp;\n \n@@ -1048,42 +1053,45 @@ constexpr wide_integer<Bits, Signed>::operator long double() const noexcept\n }\n \n template <size_t Bits, typename Signed>\n-constexpr wide_integer<Bits, Signed>::operator double() const noexcept\n+constexpr integer<Bits, Signed>::operator double() const noexcept\n {\n     return static_cast<long double>(*this);\n }\n \n template <size_t Bits, typename Signed>\n-constexpr wide_integer<Bits, Signed>::operator float() const noexcept\n+constexpr integer<Bits, Signed>::operator float() const noexcept\n {\n     return static_cast<long double>(*this);\n }\n \n // Unary operators\n template <size_t Bits, typename Signed>\n-constexpr wide_integer<Bits, Signed> operator~(const wide_integer<Bits, Signed> & lhs) noexcept\n+constexpr integer<Bits, Signed> operator~(const integer<Bits, Signed> & lhs) noexcept\n {\n-    return wide_integer<Bits, Signed>::_impl::operator_unary_tilda(lhs);\n+    return integer<Bits, Signed>::_impl::operator_unary_tilda(lhs);\n }\n \n template <size_t Bits, typename Signed>\n-constexpr wide_integer<Bits, Signed> operator-(const wide_integer<Bits, Signed> & lhs) noexcept(is_same<Signed, unsigned>::value)\n+constexpr integer<Bits, Signed> operator-(const integer<Bits, Signed> & lhs) noexcept(std::is_same_v<Signed, unsigned>)\n {\n-    return wide_integer<Bits, Signed>::_impl::operator_unary_minus(lhs);\n+    return integer<Bits, Signed>::_impl::operator_unary_minus(lhs);\n }\n \n template <size_t Bits, typename Signed>\n-constexpr wide_integer<Bits, Signed> operator+(const wide_integer<Bits, Signed> & lhs) noexcept(is_same<Signed, unsigned>::value)\n+constexpr integer<Bits, Signed> operator+(const integer<Bits, Signed> & lhs) noexcept(std::is_same_v<Signed, unsigned>)\n {\n     return lhs;\n }\n \n+#define CT(x) \\\n+    std::common_type_t<std::decay_t<decltype(rhs)>, std::decay_t<decltype(lhs)>> { x }\n+\n // Binary operators\n template <size_t Bits, typename Signed, size_t Bits2, typename Signed2>\n-std::common_type_t<wide_integer<Bits, Signed>, wide_integer<Bits2, Signed2>> constexpr\n-operator*(const wide_integer<Bits, Signed> & lhs, const wide_integer<Bits2, Signed2> & rhs)\n+std::common_type_t<integer<Bits, Signed>, integer<Bits2, Signed2>> constexpr\n+operator*(const integer<Bits, Signed> & lhs, const integer<Bits2, Signed2> & rhs)\n {\n-    return std::common_type_t<wide_integer<Bits, Signed>, wide_integer<Bits2, Signed2>>::_impl::operator_star(lhs, rhs);\n+    return std::common_type_t<integer<Bits, Signed>, integer<Bits2, Signed2>>::_impl::operator_star(lhs, rhs);\n }\n \n template <typename Arithmetic, typename Arithmetic2, class>\n@@ -1093,10 +1101,10 @@ std::common_type_t<Arithmetic, Arithmetic2> constexpr operator*(const Arithmetic\n }\n \n template <size_t Bits, typename Signed, size_t Bits2, typename Signed2>\n-std::common_type_t<wide_integer<Bits, Signed>, wide_integer<Bits2, Signed2>> constexpr\n-operator/(const wide_integer<Bits, Signed> & lhs, const wide_integer<Bits2, Signed2> & rhs)\n+std::common_type_t<integer<Bits, Signed>, integer<Bits2, Signed2>> constexpr\n+operator/(const integer<Bits, Signed> & lhs, const integer<Bits2, Signed2> & rhs)\n {\n-    return std::common_type_t<wide_integer<Bits, Signed>, wide_integer<Bits2, Signed2>>::_impl::operator_slash(lhs, rhs);\n+    return std::common_type_t<integer<Bits, Signed>, integer<Bits2, Signed2>>::_impl::operator_slash(lhs, rhs);\n }\n template <typename Arithmetic, typename Arithmetic2, class>\n std::common_type_t<Arithmetic, Arithmetic2> constexpr operator/(const Arithmetic & lhs, const Arithmetic2 & rhs)\n@@ -1105,10 +1113,10 @@ std::common_type_t<Arithmetic, Arithmetic2> constexpr operator/(const Arithmetic\n }\n \n template <size_t Bits, typename Signed, size_t Bits2, typename Signed2>\n-std::common_type_t<wide_integer<Bits, Signed>, wide_integer<Bits2, Signed2>> constexpr\n-operator+(const wide_integer<Bits, Signed> & lhs, const wide_integer<Bits2, Signed2> & rhs)\n+std::common_type_t<integer<Bits, Signed>, integer<Bits2, Signed2>> constexpr\n+operator+(const integer<Bits, Signed> & lhs, const integer<Bits2, Signed2> & rhs)\n {\n-    return std::common_type_t<wide_integer<Bits, Signed>, wide_integer<Bits2, Signed2>>::_impl::operator_plus(lhs, rhs);\n+    return std::common_type_t<integer<Bits, Signed>, integer<Bits2, Signed2>>::_impl::operator_plus(lhs, rhs);\n }\n template <typename Arithmetic, typename Arithmetic2, class>\n std::common_type_t<Arithmetic, Arithmetic2> constexpr operator+(const Arithmetic & lhs, const Arithmetic2 & rhs)\n@@ -1117,10 +1125,10 @@ std::common_type_t<Arithmetic, Arithmetic2> constexpr operator+(const Arithmetic\n }\n \n template <size_t Bits, typename Signed, size_t Bits2, typename Signed2>\n-std::common_type_t<wide_integer<Bits, Signed>, wide_integer<Bits2, Signed2>> constexpr\n-operator-(const wide_integer<Bits, Signed> & lhs, const wide_integer<Bits2, Signed2> & rhs)\n+std::common_type_t<integer<Bits, Signed>, integer<Bits2, Signed2>> constexpr\n+operator-(const integer<Bits, Signed> & lhs, const integer<Bits2, Signed2> & rhs)\n {\n-    return std::common_type_t<wide_integer<Bits, Signed>, wide_integer<Bits2, Signed2>>::_impl::operator_minus(lhs, rhs);\n+    return std::common_type_t<integer<Bits, Signed>, integer<Bits2, Signed2>>::_impl::operator_minus(lhs, rhs);\n }\n template <typename Arithmetic, typename Arithmetic2, class>\n std::common_type_t<Arithmetic, Arithmetic2> constexpr operator-(const Arithmetic & lhs, const Arithmetic2 & rhs)\n@@ -1129,10 +1137,10 @@ std::common_type_t<Arithmetic, Arithmetic2> constexpr operator-(const Arithmetic\n }\n \n template <size_t Bits, typename Signed, size_t Bits2, typename Signed2>\n-std::common_type_t<wide_integer<Bits, Signed>, wide_integer<Bits2, Signed2>> constexpr\n-operator%(const wide_integer<Bits, Signed> & lhs, const wide_integer<Bits2, Signed2> & rhs)\n+std::common_type_t<integer<Bits, Signed>, integer<Bits2, Signed2>> constexpr\n+operator%(const integer<Bits, Signed> & lhs, const integer<Bits2, Signed2> & rhs)\n {\n-    return std::common_type_t<wide_integer<Bits, Signed>, wide_integer<Bits2, Signed2>>::_impl::operator_percent(lhs, rhs);\n+    return std::common_type_t<integer<Bits, Signed>, integer<Bits2, Signed2>>::_impl::operator_percent(lhs, rhs);\n }\n template <typename Integral, typename Integral2, class>\n std::common_type_t<Integral, Integral2> constexpr operator%(const Integral & lhs, const Integral2 & rhs)\n@@ -1141,10 +1149,10 @@ std::common_type_t<Integral, Integral2> constexpr operator%(const Integral & lhs\n }\n \n template <size_t Bits, typename Signed, size_t Bits2, typename Signed2>\n-std::common_type_t<wide_integer<Bits, Signed>, wide_integer<Bits2, Signed2>> constexpr\n-operator&(const wide_integer<Bits, Signed> & lhs, const wide_integer<Bits2, Signed2> & rhs)\n+std::common_type_t<integer<Bits, Signed>, integer<Bits2, Signed2>> constexpr\n+operator&(const integer<Bits, Signed> & lhs, const integer<Bits2, Signed2> & rhs)\n {\n-    return std::common_type_t<wide_integer<Bits, Signed>, wide_integer<Bits2, Signed2>>::_impl::operator_amp(lhs, rhs);\n+    return std::common_type_t<integer<Bits, Signed>, integer<Bits2, Signed2>>::_impl::operator_amp(lhs, rhs);\n }\n template <typename Integral, typename Integral2, class>\n std::common_type_t<Integral, Integral2> constexpr operator&(const Integral & lhs, const Integral2 & rhs)\n@@ -1153,10 +1161,10 @@ std::common_type_t<Integral, Integral2> constexpr operator&(const Integral & lhs\n }\n \n template <size_t Bits, typename Signed, size_t Bits2, typename Signed2>\n-std::common_type_t<wide_integer<Bits, Signed>, wide_integer<Bits2, Signed2>> constexpr\n-operator|(const wide_integer<Bits, Signed> & lhs, const wide_integer<Bits2, Signed2> & rhs)\n+std::common_type_t<integer<Bits, Signed>, integer<Bits2, Signed2>> constexpr\n+operator|(const integer<Bits, Signed> & lhs, const integer<Bits2, Signed2> & rhs)\n {\n-    return std::common_type_t<wide_integer<Bits, Signed>, wide_integer<Bits2, Signed2>>::_impl::operator_pipe(lhs, rhs);\n+    return std::common_type_t<integer<Bits, Signed>, integer<Bits2, Signed2>>::_impl::operator_pipe(lhs, rhs);\n }\n template <typename Integral, typename Integral2, class>\n std::common_type_t<Integral, Integral2> constexpr operator|(const Integral & lhs, const Integral2 & rhs)\n@@ -1165,10 +1173,10 @@ std::common_type_t<Integral, Integral2> constexpr operator|(const Integral & lhs\n }\n \n template <size_t Bits, typename Signed, size_t Bits2, typename Signed2>\n-std::common_type_t<wide_integer<Bits, Signed>, wide_integer<Bits2, Signed2>> constexpr\n-operator^(const wide_integer<Bits, Signed> & lhs, const wide_integer<Bits2, Signed2> & rhs)\n+std::common_type_t<integer<Bits, Signed>, integer<Bits2, Signed2>> constexpr\n+operator^(const integer<Bits, Signed> & lhs, const integer<Bits2, Signed2> & rhs)\n {\n-    return std::common_type_t<wide_integer<Bits, Signed>, wide_integer<Bits2, Signed2>>::_impl::operator_circumflex(lhs, rhs);\n+    return std::common_type_t<integer<Bits, Signed>, integer<Bits2, Signed2>>::_impl::operator_circumflex(lhs, rhs);\n }\n template <typename Integral, typename Integral2, class>\n std::common_type_t<Integral, Integral2> constexpr operator^(const Integral & lhs, const Integral2 & rhs)\n@@ -1177,20 +1185,20 @@ std::common_type_t<Integral, Integral2> constexpr operator^(const Integral & lhs\n }\n \n template <size_t Bits, typename Signed>\n-constexpr wide_integer<Bits, Signed> operator<<(const wide_integer<Bits, Signed> & lhs, int n) noexcept\n+constexpr integer<Bits, Signed> operator<<(const integer<Bits, Signed> & lhs, int n) noexcept\n {\n-    return wide_integer<Bits, Signed>::_impl::shift_left(lhs, n);\n+    return integer<Bits, Signed>::_impl::shift_left(lhs, n);\n }\n template <size_t Bits, typename Signed>\n-constexpr wide_integer<Bits, Signed> operator>>(const wide_integer<Bits, Signed> & lhs, int n) noexcept\n+constexpr integer<Bits, Signed> operator>>(const integer<Bits, Signed> & lhs, int n) noexcept\n {\n-    return wide_integer<Bits, Signed>::_impl::shift_right(lhs, n);\n+    return integer<Bits, Signed>::_impl::shift_right(lhs, n);\n }\n \n template <size_t Bits, typename Signed, size_t Bits2, typename Signed2>\n-constexpr bool operator<(const wide_integer<Bits, Signed> & lhs, const wide_integer<Bits2, Signed2> & rhs)\n+constexpr bool operator<(const integer<Bits, Signed> & lhs, const integer<Bits2, Signed2> & rhs)\n {\n-    return std::common_type_t<wide_integer<Bits, Signed>, wide_integer<Bits2, Signed2>>::_impl::operator_less(lhs, rhs);\n+    return std::common_type_t<integer<Bits, Signed>, integer<Bits2, Signed2>>::_impl::operator_less(lhs, rhs);\n }\n template <typename Arithmetic, typename Arithmetic2, class>\n constexpr bool operator<(const Arithmetic & lhs, const Arithmetic2 & rhs)\n@@ -1199,9 +1207,9 @@ constexpr bool operator<(const Arithmetic & lhs, const Arithmetic2 & rhs)\n }\n \n template <size_t Bits, typename Signed, size_t Bits2, typename Signed2>\n-constexpr bool operator>(const wide_integer<Bits, Signed> & lhs, const wide_integer<Bits2, Signed2> & rhs)\n+constexpr bool operator>(const integer<Bits, Signed> & lhs, const integer<Bits2, Signed2> & rhs)\n {\n-    return std::common_type_t<wide_integer<Bits, Signed>, wide_integer<Bits2, Signed2>>::_impl::operator_more(lhs, rhs);\n+    return std::common_type_t<integer<Bits, Signed>, integer<Bits2, Signed2>>::_impl::operator_more(lhs, rhs);\n }\n template <typename Arithmetic, typename Arithmetic2, class>\n constexpr bool operator>(const Arithmetic & lhs, const Arithmetic2 & rhs)\n@@ -1210,10 +1218,10 @@ constexpr bool operator>(const Arithmetic & lhs, const Arithmetic2 & rhs)\n }\n \n template <size_t Bits, typename Signed, size_t Bits2, typename Signed2>\n-constexpr bool operator<=(const wide_integer<Bits, Signed> & lhs, const wide_integer<Bits2, Signed2> & rhs)\n+constexpr bool operator<=(const integer<Bits, Signed> & lhs, const integer<Bits2, Signed2> & rhs)\n {\n-    return std::common_type_t<wide_integer<Bits, Signed>, wide_integer<Bits2, Signed2>>::_impl::operator_less(lhs, rhs)\n-        || std::common_type_t<wide_integer<Bits, Signed>, wide_integer<Bits2, Signed2>>::_impl::operator_eq(lhs, rhs);\n+    return std::common_type_t<integer<Bits, Signed>, integer<Bits2, Signed2>>::_impl::operator_less(lhs, rhs)\n+        || std::common_type_t<integer<Bits, Signed>, integer<Bits2, Signed2>>::_impl::operator_eq(lhs, rhs);\n }\n template <typename Arithmetic, typename Arithmetic2, class>\n constexpr bool operator<=(const Arithmetic & lhs, const Arithmetic2 & rhs)\n@@ -1222,10 +1230,10 @@ constexpr bool operator<=(const Arithmetic & lhs, const Arithmetic2 & rhs)\n }\n \n template <size_t Bits, typename Signed, size_t Bits2, typename Signed2>\n-constexpr bool operator>=(const wide_integer<Bits, Signed> & lhs, const wide_integer<Bits2, Signed2> & rhs)\n+constexpr bool operator>=(const integer<Bits, Signed> & lhs, const integer<Bits2, Signed2> & rhs)\n {\n-    return std::common_type_t<wide_integer<Bits, Signed>, wide_integer<Bits2, Signed2>>::_impl::operator_more(lhs, rhs)\n-        || std::common_type_t<wide_integer<Bits, Signed>, wide_integer<Bits2, Signed2>>::_impl::operator_eq(lhs, rhs);\n+    return std::common_type_t<integer<Bits, Signed>, integer<Bits2, Signed2>>::_impl::operator_more(lhs, rhs)\n+        || std::common_type_t<integer<Bits, Signed>, integer<Bits2, Signed2>>::_impl::operator_eq(lhs, rhs);\n }\n template <typename Arithmetic, typename Arithmetic2, class>\n constexpr bool operator>=(const Arithmetic & lhs, const Arithmetic2 & rhs)\n@@ -1234,9 +1242,9 @@ constexpr bool operator>=(const Arithmetic & lhs, const Arithmetic2 & rhs)\n }\n \n template <size_t Bits, typename Signed, size_t Bits2, typename Signed2>\n-constexpr bool operator==(const wide_integer<Bits, Signed> & lhs, const wide_integer<Bits2, Signed2> & rhs)\n+constexpr bool operator==(const integer<Bits, Signed> & lhs, const integer<Bits2, Signed2> & rhs)\n {\n-    return std::common_type_t<wide_integer<Bits, Signed>, wide_integer<Bits2, Signed2>>::_impl::operator_eq(lhs, rhs);\n+    return std::common_type_t<integer<Bits, Signed>, integer<Bits2, Signed2>>::_impl::operator_eq(lhs, rhs);\n }\n template <typename Arithmetic, typename Arithmetic2, class>\n constexpr bool operator==(const Arithmetic & lhs, const Arithmetic2 & rhs)\n@@ -1245,9 +1253,9 @@ constexpr bool operator==(const Arithmetic & lhs, const Arithmetic2 & rhs)\n }\n \n template <size_t Bits, typename Signed, size_t Bits2, typename Signed2>\n-constexpr bool operator!=(const wide_integer<Bits, Signed> & lhs, const wide_integer<Bits2, Signed2> & rhs)\n+constexpr bool operator!=(const integer<Bits, Signed> & lhs, const integer<Bits2, Signed2> & rhs)\n {\n-    return !std::common_type_t<wide_integer<Bits, Signed>, wide_integer<Bits2, Signed2>>::_impl::operator_eq(lhs, rhs);\n+    return !std::common_type_t<integer<Bits, Signed>, integer<Bits2, Signed2>>::_impl::operator_eq(lhs, rhs);\n }\n template <typename Arithmetic, typename Arithmetic2, class>\n constexpr bool operator!=(const Arithmetic & lhs, const Arithmetic2 & rhs)\n@@ -1255,35 +1263,17 @@ constexpr bool operator!=(const Arithmetic & lhs, const Arithmetic2 & rhs)\n     return CT(lhs) != CT(rhs);\n }\n \n-template <size_t Bits, typename Signed>\n-inline std::string to_string(const wide_integer<Bits, Signed> & n)\n-{\n-    std::string res;\n-    if (wide_integer<Bits, Signed>::_impl::operator_eq(n, 0U))\n-        return \"0\";\n-\n-    wide_integer<Bits, unsigned> t;\n-    bool is_neg = wide_integer<Bits, Signed>::_impl::is_negative(n);\n-    if (is_neg)\n-        t = wide_integer<Bits, Signed>::_impl::operator_unary_minus(n);\n-    else\n-        t = n;\n-\n-    while (!wide_integer<Bits, unsigned>::_impl::operator_eq(t, 0U))\n-    {\n-        res.insert(res.begin(), '0' + char(wide_integer<Bits, unsigned>::_impl::operator_percent(t, 10U)));\n-        t = wide_integer<Bits, unsigned>::_impl::operator_slash(t, 10U);\n-    }\n+#undef CT\n \n-    if (is_neg)\n-        res.insert(res.begin(), '-');\n-    return res;\n }\n \n+namespace std\n+{\n+\n template <size_t Bits, typename Signed>\n-struct hash<wide_integer<Bits, Signed>>\n+struct hash<wide::integer<Bits, Signed>>\n {\n-    std::size_t operator()(const wide_integer<Bits, Signed> & lhs) const\n+    std::size_t operator()(const wide::integer<Bits, Signed> & lhs) const\n     {\n         static_assert(Bits % (sizeof(size_t) * 8) == 0);\n \n@@ -1293,9 +1283,8 @@ struct hash<wide_integer<Bits, Signed>>\n         size_t res = 0;\n         for (unsigned i = 0; i < count; ++i)\n             res ^= ptr[i];\n-        return hash<size_t>()(res);\n+        return res;\n     }\n };\n \n-#undef CT\n }\ndiff --git a/base/common/wide_integer_to_string.h b/base/common/wide_integer_to_string.h\nnew file mode 100644\nindex 000000000000..9908ef4be7a8\n--- /dev/null\n+++ b/base/common/wide_integer_to_string.h\n@@ -0,0 +1,35 @@\n+#pragma once\n+\n+#include <string>\n+\n+#include \"wide_integer.h\"\n+\n+namespace wide\n+{\n+\n+template <size_t Bits, typename Signed>\n+inline std::string to_string(const integer<Bits, Signed> & n)\n+{\n+    std::string res;\n+    if (integer<Bits, Signed>::_impl::operator_eq(n, 0U))\n+        return \"0\";\n+\n+    integer<Bits, unsigned> t;\n+    bool is_neg = integer<Bits, Signed>::_impl::is_negative(n);\n+    if (is_neg)\n+        t = integer<Bits, Signed>::_impl::operator_unary_minus(n);\n+    else\n+        t = n;\n+\n+    while (!integer<Bits, unsigned>::_impl::operator_eq(t, 0U))\n+    {\n+        res.insert(res.begin(), '0' + char(integer<Bits, unsigned>::_impl::operator_percent(t, 10U)));\n+        t = integer<Bits, unsigned>::_impl::operator_slash(t, 10U);\n+    }\n+\n+    if (is_neg)\n+        res.insert(res.begin(), '-');\n+    return res;\n+}\n+\n+}\ndiff --git a/src/IO/WriteHelpers.h b/src/IO/WriteHelpers.h\nindex 3b9eced09bd2..1f0fe0950593 100644\n--- a/src/IO/WriteHelpers.h\n+++ b/src/IO/WriteHelpers.h\n@@ -11,6 +11,7 @@\n #include <common/LocalDateTime.h>\n #include <common/find_symbols.h>\n #include <common/StringRef.h>\n+#include <common/wide_integer_to_string.h>\n \n #include <Core/DecimalFunctions.h>\n #include <Core/Types.h>\n@@ -42,6 +43,12 @@ namespace ErrorCodes\n     extern const int ILLEGAL_TYPE_OF_ARGUMENT;\n }\n \n+template <typename T>\n+inline std::string bigintToString(const T & x)\n+{\n+    return to_string(x);\n+}\n+\n /// Helper functions for formatted and binary output.\n \n inline void writeChar(char x, WriteBuffer & buf)\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01475_fix_bigint_shift.reference b/tests/queries/0_stateless/01475_fix_bigint_shift.reference\nnew file mode 100644\nindex 000000000000..c278273c760b\n--- /dev/null\n+++ b/tests/queries/0_stateless/01475_fix_bigint_shift.reference\n@@ -0,0 +1,2 @@\n+-4\n+-4\ndiff --git a/tests/queries/0_stateless/01475_fix_bigint_shift.sql b/tests/queries/0_stateless/01475_fix_bigint_shift.sql\nnew file mode 100644\nindex 000000000000..d16cdeca85d1\n--- /dev/null\n+++ b/tests/queries/0_stateless/01475_fix_bigint_shift.sql\n@@ -0,0 +1,2 @@\n+SELECT bitShiftLeft(toInt64(-2), 1);\n+SELECT bitShiftLeft(toInt256(-2), 1);\n",
  "problem_statement": "(unreleased) debug assertion in some arithmetic operations on UInt256\n`SELECT bitShiftLeft(toInt256(-2), number)`\r\n\r\n`shift left for negative lhsbers is underfined!`\r\n\r\nSee https://clickhouse-test-reports.s3.yandex.net/14525/44726c37c3003ec8112dbf32efa350bd595163b3/fuzzer/report.html#fail1\n",
  "hints_text": "It's more then debug assert. There's `operator << (...) noexcept` that calls `shiftLeft()` that is not a noexcept func.",
  "created_at": "2020-09-10T12:46:23Z",
  "modified_files": [
    "b/base/common/throwError.h",
    "base/common/types.h",
    "base/common/wide_integer.h",
    "base/common/wide_integer_impl.h",
    "b/base/common/wide_integer_to_string.h",
    "src/IO/WriteHelpers.h"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/01475_fix_bigint_shift.reference",
    "b/tests/queries/0_stateless/01475_fix_bigint_shift.sql"
  ]
}