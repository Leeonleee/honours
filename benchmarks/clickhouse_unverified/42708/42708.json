{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 42708,
  "instance_id": "ClickHouse__ClickHouse-42708",
  "issue_numbers": [
    "42414"
  ],
  "base_commit": "9ac829d4c4beee74f3e11da2b9c16e0ac0399066",
  "patch": "diff --git a/docs/en/sql-reference/table-functions/index.md b/docs/en/sql-reference/table-functions/index.md\nindex d09adcd13d61..94b23bc695c6 100644\n--- a/docs/en/sql-reference/table-functions/index.md\n+++ b/docs/en/sql-reference/table-functions/index.md\n@@ -39,3 +39,7 @@ You can\u2019t use table functions if the [allow_ddl](../../operations/settings/per\n | [s3](../../sql-reference/table-functions/s3.md)                  | Creates a [S3](../../engines/table-engines/integrations/s3.md)-engine table.                                                           |\n | [sqlite](../../sql-reference/table-functions/sqlite.md)          | Creates a [sqlite](../../engines/table-engines/integrations/sqlite.md)-engine table.                                                       |\n \n+:::note\n+Only these table functions are enabled in readonly mode :\n+null, view, viewIfPermitted, numbers, numbers_mt, generateRandom, values, cluster, clusterAllReplicas \n+:::\n\\ No newline at end of file\ndiff --git a/src/Storages/System/StorageSystemTableFunctions.cpp b/src/Storages/System/StorageSystemTableFunctions.cpp\nindex 308cbc5686db..07a504edc5e7 100644\n--- a/src/Storages/System/StorageSystemTableFunctions.cpp\n+++ b/src/Storages/System/StorageSystemTableFunctions.cpp\n@@ -1,16 +1,23 @@\n #include <Storages/System/StorageSystemTableFunctions.h>\n-\n #include <TableFunctions/TableFunctionFactory.h>\n+#include <DataTypes/DataTypesNumber.h>\n+\n namespace DB\n {\n \n+namespace ErrorCodes\n+{\n+    extern const int UNKNOWN_FUNCTION;\n+}\n+\n NamesAndTypesList StorageSystemTableFunctions::getNamesAndTypes()\n {\n     return\n-    {\n-        {\"name\", std::make_shared<DataTypeString>()},\n-        {\"description\", std::make_shared<DataTypeString>()}\n-    };\n+        {\n+            {\"name\", std::make_shared<DataTypeString>()},\n+            {\"description\", std::make_shared<DataTypeString>()},\n+            {\"allow_readonly\", std::make_shared<DataTypeUInt8>()}\n+       };\n }\n \n void StorageSystemTableFunctions::fillData(MutableColumns & res_columns, ContextPtr, const SelectQueryInfo &) const\n@@ -20,7 +27,15 @@ void StorageSystemTableFunctions::fillData(MutableColumns & res_columns, Context\n     for (const auto & function_name : functions_names)\n     {\n         res_columns[0]->insert(function_name);\n-        res_columns[1]->insert(factory.getDocumentation(function_name).description);\n+\n+        auto properties = factory.tryGetProperties(function_name);\n+        if (properties)\n+        {\n+            res_columns[1]->insert(properties->documentation.description);\n+            res_columns[2]->insert(properties->allow_readonly);\n+        }\n+        else\n+            throw Exception(ErrorCodes::UNKNOWN_FUNCTION, \"Unknown table function {}\", function_name);\n     }\n }\n \ndiff --git a/src/TableFunctions/ITableFunction.cpp b/src/TableFunctions/ITableFunction.cpp\nindex 82b6230dc304..da0de7e47f6e 100644\n--- a/src/TableFunctions/ITableFunction.cpp\n+++ b/src/TableFunctions/ITableFunction.cpp\n@@ -4,6 +4,7 @@\n #include <Storages/StorageTableFunction.h>\n #include <Access/Common/AccessFlags.h>\n #include <Common/ProfileEvents.h>\n+#include <TableFunctions/TableFunctionFactory.h>\n \n \n namespace ProfileEvents\n@@ -25,8 +26,8 @@ StoragePtr ITableFunction::execute(const ASTPtr & ast_function, ContextPtr conte\n     ProfileEvents::increment(ProfileEvents::TableFunctionExecute);\n \n     AccessFlags required_access = getSourceAccessType();\n-    String function_name = getName();\n-    if ((function_name != \"null\") && (function_name != \"view\") && (function_name != \"viewIfPermitted\"))\n+    auto table_function_properties = TableFunctionFactory::instance().tryGetProperties(getName());\n+    if (!(table_function_properties && table_function_properties->allow_readonly))\n         required_access |= AccessType::CREATE_TEMPORARY_TABLE;\n     context->checkAccess(required_access);\n \ndiff --git a/src/TableFunctions/ITableFunction.h b/src/TableFunctions/ITableFunction.h\nindex 4b9a87b93f17..a05edcd32c82 100644\n--- a/src/TableFunctions/ITableFunction.h\n+++ b/src/TableFunctions/ITableFunction.h\n@@ -4,6 +4,7 @@\n #include <Storages/IStorage_fwd.h>\n #include <Storages/ColumnsDescription.h>\n #include <Access/Common/AccessType.h>\n+#include <Common/Documentation.h>\n \n #include <memory>\n #include <string>\n@@ -79,6 +80,14 @@ class ITableFunction : public std::enable_shared_from_this<ITableFunction>\n     virtual const char * getStorageTypeName() const = 0;\n };\n \n+/// Properties of table function that are independent of argument types and parameters.\n+struct TableFunctionProperties\n+{\n+    Documentation documentation;\n+    bool allow_readonly = false;\n+};\n+\n+\n using TableFunctionPtr = std::shared_ptr<ITableFunction>;\n \n \ndiff --git a/src/TableFunctions/TableFunctionExplain.cpp b/src/TableFunctions/TableFunctionExplain.cpp\nindex 02493aa9b0e7..02b9308ed224 100644\n--- a/src/TableFunctions/TableFunctionExplain.cpp\n+++ b/src/TableFunctions/TableFunctionExplain.cpp\n@@ -91,7 +91,7 @@ InterpreterExplainQuery TableFunctionExplain::getInterpreter(ContextPtr context)\n \n void registerTableFunctionExplain(TableFunctionFactory & factory)\n {\n-    factory.registerFunction<TableFunctionExplain>({R\"(\n+    factory.registerFunction<TableFunctionExplain>({.documentation = {R\"(\n Returns result of EXPLAIN query.\n \n The function should not be called directly but can be invoked via `SELECT * FROM (EXPLAIN <query>)`.\n@@ -103,7 +103,7 @@ You can use this query to process the result of EXPLAIN further using SQL (e.g.,\n \n )\",\n {{\"1\", \"SELECT explain FROM (EXPLAIN AST SELECT * FROM system.numbers) WHERE explain LIKE '%Asterisk%'\"}}\n-});\n+}});\n \n }\n \ndiff --git a/src/TableFunctions/TableFunctionFactory.cpp b/src/TableFunctions/TableFunctionFactory.cpp\nindex 5ed22e393005..3d2a72ddc9e6 100644\n--- a/src/TableFunctions/TableFunctionFactory.cpp\n+++ b/src/TableFunctions/TableFunctionFactory.cpp\n@@ -16,16 +16,15 @@ namespace ErrorCodes\n     extern const int LOGICAL_ERROR;\n }\n \n-\n void TableFunctionFactory::registerFunction(\n-    const std::string & name, TableFunctionCreator creator, Documentation doc, CaseSensitiveness case_sensitiveness)\n+    const std::string & name, Value value, CaseSensitiveness case_sensitiveness)\n {\n-    if (!table_functions.emplace(name, TableFunctionFactoryData{creator, doc}).second)\n+    if (!table_functions.emplace(name, value).second)\n         throw Exception(\"TableFunctionFactory: the table function name '\" + name + \"' is not unique\",\n             ErrorCodes::LOGICAL_ERROR);\n \n     if (case_sensitiveness == CaseInsensitive\n-        && !case_insensitive_table_functions.emplace(Poco::toLower(name), TableFunctionFactoryData{creator, doc}).second)\n+        && !case_insensitive_table_functions.emplace(Poco::toLower(name), value).second)\n         throw Exception(\"TableFunctionFactory: the case insensitive table function name '\" + name + \"' is not unique\",\n                         ErrorCodes::LOGICAL_ERROR);\n }\n@@ -59,13 +58,13 @@ TableFunctionPtr TableFunctionFactory::tryGet(\n     auto it = table_functions.find(name);\n     if (table_functions.end() != it)\n     {\n-        res = it->second.first();\n+        res = it->second.creator();\n     }\n     else\n     {\n         it = case_insensitive_table_functions.find(Poco::toLower(name));\n         if (case_insensitive_table_functions.end() != it)\n-            res = it->second.first();\n+            res = it->second.creator();\n     }\n \n     if (!res)\n@@ -86,13 +85,29 @@ bool TableFunctionFactory::isTableFunctionName(const std::string & name) const\n     return table_functions.contains(name);\n }\n \n-Documentation TableFunctionFactory::getDocumentation(const std::string & name) const\n+std::optional<TableFunctionProperties> TableFunctionFactory::tryGetProperties(const String & name) const\n {\n-    auto it = table_functions.find(name);\n-    if (it == table_functions.end())\n-        throw Exception(ErrorCodes::UNKNOWN_FUNCTION, \"Unknown table function {}\", name);\n+    return tryGetPropertiesImpl(name);\n+}\n+\n+std::optional<TableFunctionProperties> TableFunctionFactory::tryGetPropertiesImpl(const String & name_param) const\n+{\n+    String name = getAliasToOrName(name_param);\n+    Value found;\n+\n+    /// Find by exact match.\n+    if (auto it = table_functions.find(name); it != table_functions.end())\n+    {\n+        found = it->second;\n+    }\n+\n+    if (auto jt = case_insensitive_table_functions.find(Poco::toLower(name)); jt != case_insensitive_table_functions.end())\n+        found = jt->second;\n+\n+    if (found.creator)\n+        return found.properties;\n \n-    return it->second.second;\n+    return {};\n }\n \n TableFunctionFactory & TableFunctionFactory::instance()\ndiff --git a/src/TableFunctions/TableFunctionFactory.h b/src/TableFunctions/TableFunctionFactory.h\nindex 8ff352ff9acf..2cc648ba1815 100644\n--- a/src/TableFunctions/TableFunctionFactory.h\n+++ b/src/TableFunctions/TableFunctionFactory.h\n@@ -3,7 +3,6 @@\n #include <TableFunctions/ITableFunction.h>\n #include <Common/IFactoryWithAliases.h>\n #include <Common/NamePrompter.h>\n-#include <Common/Documentation.h>\n \n #include <functional>\n #include <memory>\n@@ -18,7 +17,24 @@ namespace DB\n class Context;\n \n using TableFunctionCreator = std::function<TableFunctionPtr()>;\n-using TableFunctionFactoryData = std::pair<TableFunctionCreator, Documentation>;\n+\n+struct TableFunctionFactoryData\n+{\n+    TableFunctionCreator creator;\n+    TableFunctionProperties properties;\n+\n+    TableFunctionFactoryData() = default;\n+    TableFunctionFactoryData(const TableFunctionFactoryData &) = default;\n+    TableFunctionFactoryData & operator = (const TableFunctionFactoryData &) = default;\n+\n+    template <typename Creator>\n+        requires (!std::is_same_v<Creator, TableFunctionFactoryData>)\n+    TableFunctionFactoryData(Creator creator_, TableFunctionProperties properties_ = {}) /// NOLINT\n+        : creator(std::forward<Creator>(creator_)), properties(std::move(properties_))\n+    {\n+    }\n+};\n+\n \n /** Lets you get a table function by its name.\n   */\n@@ -31,15 +47,16 @@ class TableFunctionFactory final: private boost::noncopyable, public IFactoryWit\n     /// No locking, you must register all functions before usage of get.\n     void registerFunction(\n         const std::string & name,\n-        TableFunctionCreator creator,\n-        Documentation doc = {},\n+        Value value,\n         CaseSensitiveness case_sensitiveness = CaseSensitive);\n \n     template <typename Function>\n-    void registerFunction(Documentation doc = {}, CaseSensitiveness case_sensitiveness = CaseSensitive)\n+    void registerFunction(TableFunctionProperties properties = {}, CaseSensitiveness case_sensitiveness = CaseSensitive)\n     {\n         auto creator = []() -> TableFunctionPtr { return std::make_shared<Function>(); };\n-        registerFunction(Function::name, std::move(creator), std::move(doc), case_sensitiveness);\n+        registerFunction(Function::name,\n+                         TableFunctionFactoryData{std::move(creator), {std::move(properties)}} ,\n+                         case_sensitiveness);\n     }\n \n     /// Throws an exception if not found.\n@@ -48,7 +65,7 @@ class TableFunctionFactory final: private boost::noncopyable, public IFactoryWit\n     /// Returns nullptr if not found.\n     TableFunctionPtr tryGet(const std::string & name, ContextPtr context) const;\n \n-    Documentation getDocumentation(const std::string & name) const;\n+    std::optional<TableFunctionProperties> tryGetProperties(const String & name) const;\n \n     bool isTableFunctionName(const std::string & name) const;\n \n@@ -61,6 +78,8 @@ class TableFunctionFactory final: private boost::noncopyable, public IFactoryWit\n \n     String getFactoryName() const override { return \"TableFunctionFactory\"; }\n \n+    std::optional<TableFunctionProperties> tryGetPropertiesImpl(const String & name) const;\n+\n     TableFunctions table_functions;\n     TableFunctions case_insensitive_table_functions;\n };\ndiff --git a/src/TableFunctions/TableFunctionGenerateRandom.cpp b/src/TableFunctions/TableFunctionGenerateRandom.cpp\nindex 8d1c06c7c4dd..1ddbb48962d4 100644\n--- a/src/TableFunctions/TableFunctionGenerateRandom.cpp\n+++ b/src/TableFunctions/TableFunctionGenerateRandom.cpp\n@@ -91,7 +91,7 @@ StoragePtr TableFunctionGenerateRandom::executeImpl(const ASTPtr & /*ast_functio\n \n void registerTableFunctionGenerate(TableFunctionFactory & factory)\n {\n-    factory.registerFunction<TableFunctionGenerateRandom>();\n+    factory.registerFunction<TableFunctionGenerateRandom>({.documentation = {}, .allow_readonly = true});\n }\n \n }\ndiff --git a/src/TableFunctions/TableFunctionNull.cpp b/src/TableFunctions/TableFunctionNull.cpp\nindex 1a35830b06c4..9ff07cc19460 100644\n--- a/src/TableFunctions/TableFunctionNull.cpp\n+++ b/src/TableFunctions/TableFunctionNull.cpp\n@@ -52,6 +52,6 @@ StoragePtr TableFunctionNull::executeImpl(const ASTPtr & /*ast_function*/, Conte\n \n void registerTableFunctionNull(TableFunctionFactory & factory)\n {\n-    factory.registerFunction<TableFunctionNull>();\n+    factory.registerFunction<TableFunctionNull>({.documentation = {}, .allow_readonly = true});\n }\n }\ndiff --git a/src/TableFunctions/TableFunctionNumbers.cpp b/src/TableFunctions/TableFunctionNumbers.cpp\nindex 0ef1d3815d9d..2056cd838f58 100644\n--- a/src/TableFunctions/TableFunctionNumbers.cpp\n+++ b/src/TableFunctions/TableFunctionNumbers.cpp\n@@ -51,8 +51,8 @@ StoragePtr TableFunctionNumbers<multithreaded>::executeImpl(const ASTPtr & ast_f\n \n void registerTableFunctionNumbers(TableFunctionFactory & factory)\n {\n-    factory.registerFunction<TableFunctionNumbers<true>>();\n-    factory.registerFunction<TableFunctionNumbers<false>>();\n+    factory.registerFunction<TableFunctionNumbers<true>>({.documentation = {}, .allow_readonly = true});\n+    factory.registerFunction<TableFunctionNumbers<false>>({.documentation = {}, .allow_readonly = true});\n }\n \n template <bool multithreaded>\ndiff --git a/src/TableFunctions/TableFunctionRemote.cpp b/src/TableFunctions/TableFunctionRemote.cpp\nindex 2c62e29810f6..14e0774cf06c 100644\n--- a/src/TableFunctions/TableFunctionRemote.cpp\n+++ b/src/TableFunctions/TableFunctionRemote.cpp\n@@ -346,8 +346,8 @@ void registerTableFunctionRemote(TableFunctionFactory & factory)\n {\n     factory.registerFunction(\"remote\", [] () -> TableFunctionPtr { return std::make_shared<TableFunctionRemote>(\"remote\"); });\n     factory.registerFunction(\"remoteSecure\", [] () -> TableFunctionPtr { return std::make_shared<TableFunctionRemote>(\"remote\", /* secure = */ true); });\n-    factory.registerFunction(\"cluster\", [] () -> TableFunctionPtr { return std::make_shared<TableFunctionRemote>(\"cluster\"); });\n-    factory.registerFunction(\"clusterAllReplicas\", [] () -> TableFunctionPtr { return std::make_shared<TableFunctionRemote>(\"clusterAllReplicas\"); });\n+    factory.registerFunction(\"cluster\", {[] () -> TableFunctionPtr { return std::make_shared<TableFunctionRemote>(\"cluster\"); }, {.documentation = {}, .allow_readonly = true}});\n+    factory.registerFunction(\"clusterAllReplicas\", {[] () -> TableFunctionPtr { return std::make_shared<TableFunctionRemote>(\"clusterAllReplicas\"); }, {.documentation = {}, .allow_readonly = true}});\n }\n \n }\ndiff --git a/src/TableFunctions/TableFunctionValues.cpp b/src/TableFunctions/TableFunctionValues.cpp\nindex 7b8de69a4f89..055748252755 100644\n--- a/src/TableFunctions/TableFunctionValues.cpp\n+++ b/src/TableFunctions/TableFunctionValues.cpp\n@@ -147,7 +147,7 @@ StoragePtr TableFunctionValues::executeImpl(const ASTPtr & ast_function, Context\n \n void registerTableFunctionValues(TableFunctionFactory & factory)\n {\n-    factory.registerFunction<TableFunctionValues>({}, TableFunctionFactory::CaseInsensitive);\n+    factory.registerFunction<TableFunctionValues>({.documentation = {}, .allow_readonly = true}, TableFunctionFactory::CaseInsensitive);\n }\n \n }\ndiff --git a/src/TableFunctions/TableFunctionView.cpp b/src/TableFunctions/TableFunctionView.cpp\nindex c53d26a794b8..c999cba08e9e 100644\n--- a/src/TableFunctions/TableFunctionView.cpp\n+++ b/src/TableFunctions/TableFunctionView.cpp\n@@ -55,7 +55,7 @@ StoragePtr TableFunctionView::executeImpl(\n \n void registerTableFunctionView(TableFunctionFactory & factory)\n {\n-    factory.registerFunction<TableFunctionView>();\n+    factory.registerFunction<TableFunctionView>({.documentation = {}, .allow_readonly = true});\n }\n \n }\ndiff --git a/src/TableFunctions/TableFunctionViewIfPermitted.cpp b/src/TableFunctions/TableFunctionViewIfPermitted.cpp\nindex ba3d2cb9d160..6128fe0a36f8 100644\n--- a/src/TableFunctions/TableFunctionViewIfPermitted.cpp\n+++ b/src/TableFunctions/TableFunctionViewIfPermitted.cpp\n@@ -107,7 +107,7 @@ bool TableFunctionViewIfPermitted::isPermitted(const ContextPtr & context, const\n \n void registerTableFunctionViewIfPermitted(TableFunctionFactory & factory)\n {\n-    factory.registerFunction<TableFunctionViewIfPermitted>();\n+    factory.registerFunction<TableFunctionViewIfPermitted>({.documentation = {}, .allow_readonly = true});\n }\n \n }\ndiff --git a/src/TableFunctions/TableFunctionZeros.cpp b/src/TableFunctions/TableFunctionZeros.cpp\nindex 126166b547b5..5874fca67e64 100644\n--- a/src/TableFunctions/TableFunctionZeros.cpp\n+++ b/src/TableFunctions/TableFunctionZeros.cpp\n@@ -48,7 +48,7 @@ StoragePtr TableFunctionZeros<multithreaded>::executeImpl(const ASTPtr & ast_fun\n \n void registerTableFunctionZeros(TableFunctionFactory & factory)\n {\n-    factory.registerFunction<TableFunctionZeros<true>>({R\"(\n+    factory.registerFunction<TableFunctionZeros<true>>({.documentation = {R\"(\n Generates a stream of zeros (a table with one column 'zero' of type 'UInt8') of specified size.\n \n This table function is used in performance tests, where you want to spend as little time as possible to data generation while testing some other parts of queries.\n@@ -62,9 +62,9 @@ This query will test the speed of `randomPrintableASCII` function using single t\n See also the `system.zeros` table.\n )\",\n {{\"1\", \"SELECT count() FROM zeros(100000000) WHERE NOT ignore(randomPrintableASCII(10))\"}}\n-});\n+}});\n \n-    factory.registerFunction<TableFunctionZeros<false>>({R\"(\n+    factory.registerFunction<TableFunctionZeros<false>>({.documentation = {R\"(\n Generates a stream of zeros (a table with one column 'zero' of type 'UInt8') of specified size.\n \n This table function is used in performance tests, where you want to spend as little time as possible to data generation while testing some other parts of queries.\n@@ -78,7 +78,7 @@ This query will test the speed of `randomPrintableASCII` function using multiple\n See also the `system.zeros` table.\n )\",\n {{\"1\", \"SELECT count() FROM zeros_mt(1000000000) WHERE NOT ignore(randomPrintableASCII(10))\"}}\n-});\n+}});\n }\n \n template <bool multithreaded>\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02117_show_create_table_system.reference b/tests/queries/0_stateless/02117_show_create_table_system.reference\nindex ad27b86c6f5b..65362e9f35db 100644\n--- a/tests/queries/0_stateless/02117_show_create_table_system.reference\n+++ b/tests/queries/0_stateless/02117_show_create_table_system.reference\n@@ -1013,7 +1013,8 @@ COMMENT 'SYSTEM TABLE is built on the fly.'\n CREATE TABLE system.table_functions\n (\n     `name` String,\n-    `description` String\n+    `description` String,\n+    `allow_readonly` UInt8\n )\n ENGINE = SystemTableFunctions\n COMMENT 'SYSTEM TABLE is built on the fly.'\ndiff --git a/tests/queries/0_stateless/02473_functions_in_readonly_mode.reference b/tests/queries/0_stateless/02473_functions_in_readonly_mode.reference\nnew file mode 100644\nindex 000000000000..500004a06b29\n--- /dev/null\n+++ b/tests/queries/0_stateless/02473_functions_in_readonly_mode.reference\n@@ -0,0 +1,3 @@\n+0\n+123\n+0\ndiff --git a/tests/queries/0_stateless/02473_functions_in_readonly_mode.sql b/tests/queries/0_stateless/02473_functions_in_readonly_mode.sql\nnew file mode 100644\nindex 000000000000..c5c82d2e2bf3\n--- /dev/null\n+++ b/tests/queries/0_stateless/02473_functions_in_readonly_mode.sql\n@@ -0,0 +1,4 @@\n+SELECT * from numbers(1);\n+SELECT * from format('TSV', '123');\n+SELECT * from numbers(1) SETTINGS readonly=1;\n+SELECT * from format('TSV', '123') SETTINGS readonly=1; -- { serverError READONLY }\n\\ No newline at end of file\n",
  "problem_statement": "Table functions `cluster` and `clusterAllReplicas` can be enabled in readonly mode.\nMost of the table functions are disabled in readonly mode, as they allow to enter of arbitrary addresses, and without the `remote_url_allow_hosts` configured, it may open up the server to SSRF. Some table functions can be heavy and risky (like the `format` table function) and should be disabled as well.\r\n\r\nBut the `cluster` table function does not allow to enter of an arbitrary hostname and is lightweight, so we can allow it in the readonly mode. The same is for the `numbers`, `numbers_mt`, `generateRandom`, and `values`.\r\n\r\n**Use case**\r\n\r\nMetrics dashboard.\r\n\r\n**Describe the solution you'd like**\r\n\r\nSee `ITableFunction::execute`\r\nCurrently, it is implemented with hard coding:\r\n\r\n```\r\nif ((function_name != \"null\") && (function_name != \"view\") && (function_name != \"viewIfPermitted\"))\r\n    required_access |= AccessType::CREATE_TEMPORARY_TABLE;\r\n```\r\n\r\nwhich is not suitable anymore and needs to be rewritten to metadata struct in the factory, similarly to `AggregateFunctionProperties`.\r\nThen we can add a field `allow_readonly` to the `system.table_functions` table.\r\n\n",
  "hints_text": "",
  "created_at": "2022-10-26T16:51:16Z",
  "modified_files": [
    "docs/en/sql-reference/table-functions/index.md",
    "src/Storages/System/StorageSystemTableFunctions.cpp",
    "src/TableFunctions/ITableFunction.cpp",
    "src/TableFunctions/ITableFunction.h",
    "src/TableFunctions/TableFunctionExplain.cpp",
    "src/TableFunctions/TableFunctionFactory.cpp",
    "src/TableFunctions/TableFunctionFactory.h",
    "src/TableFunctions/TableFunctionGenerateRandom.cpp",
    "src/TableFunctions/TableFunctionNull.cpp",
    "src/TableFunctions/TableFunctionNumbers.cpp",
    "src/TableFunctions/TableFunctionRemote.cpp",
    "src/TableFunctions/TableFunctionValues.cpp",
    "src/TableFunctions/TableFunctionView.cpp",
    "src/TableFunctions/TableFunctionViewIfPermitted.cpp",
    "src/TableFunctions/TableFunctionZeros.cpp"
  ],
  "modified_test_files": [
    "tests/queries/0_stateless/02117_show_create_table_system.reference",
    "b/tests/queries/0_stateless/02473_functions_in_readonly_mode.reference",
    "b/tests/queries/0_stateless/02473_functions_in_readonly_mode.sql"
  ]
}