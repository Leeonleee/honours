{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 48611,
  "instance_id": "ClickHouse__ClickHouse-48611",
  "issue_numbers": [
    "47952"
  ],
  "base_commit": "51688bb771c3de31baf8d1e285366fb55c31c744",
  "patch": "diff --git a/src/DataTypes/getLeastSupertype.cpp b/src/DataTypes/getLeastSupertype.cpp\nindex 3c33289c3047..9d42d82ce91e 100644\n--- a/src/DataTypes/getLeastSupertype.cpp\n+++ b/src/DataTypes/getLeastSupertype.cpp\n@@ -88,7 +88,7 @@ DataTypePtr getNumericType(const TypeIndexSet & types)\n             maximize(max_bits_of_unsigned_integer, 8);\n         else if (type == TypeIndex::UInt16)\n             maximize(max_bits_of_unsigned_integer, 16);\n-        else if (type == TypeIndex::UInt32)\n+        else if (type == TypeIndex::UInt32 || type == TypeIndex::IPv4)\n             maximize(max_bits_of_unsigned_integer, 32);\n         else if (type == TypeIndex::UInt64)\n             maximize(max_bits_of_unsigned_integer, 64);\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02713_ip4_uint_compare.reference b/tests/queries/0_stateless/02713_ip4_uint_compare.reference\nnew file mode 100644\nindex 000000000000..fdc2de3fbcbb\n--- /dev/null\n+++ b/tests/queries/0_stateless/02713_ip4_uint_compare.reference\n@@ -0,0 +1,1 @@\n+1\t0\t1\t1\t1\t1\t0\ndiff --git a/tests/queries/0_stateless/02713_ip4_uint_compare.sql b/tests/queries/0_stateless/02713_ip4_uint_compare.sql\nnew file mode 100644\nindex 000000000000..ec8d65843298\n--- /dev/null\n+++ b/tests/queries/0_stateless/02713_ip4_uint_compare.sql\n@@ -0,0 +1,9 @@\n+WITH toIPv4('127.0.0.10') AS ip\n+SELECT\n+    ip = 2130706442::UInt32,\n+    ip = 0::UInt32,\n+    ip < 2130706443::UInt32,\n+    ip > 2130706441::UInt32,\n+    ip <= 2130706442::UInt32,\n+    ip >= 2130706442::UInt32,\n+    ip != 2130706442::UInt32;\n",
  "problem_statement": "using IPv4 field in WHERE clause gives \"no supertype for types UInt32, IPv4\"\n(you don't have to strictly follow this form)\r\n\r\n**Describe the issue**\r\nIn 19.5.3.8, we could do this:\r\n  WHERE ip = IPv4StringToNum('1.2.3.4')\r\n\r\nfor ip of type IPv4 or Nullable(IPv4)\r\nIn 22.12.5.34, it also works.\r\n\r\nIn 23.2.4.12, we get instead a DB::Exception\r\n\r\n**How to reproduce**\r\n* Which ClickHouse server versions are incompatible\r\nregression seems to be in 23.2.4.12 at least.  22.12.5.34 is \"ok\".\r\n\r\n* Which interface to use, if matters\r\n\r\n* Non-default settings, if any\r\n* `CREATE TABLE` statements for all tables involved\r\n\r\n```\r\nCREATE TABLE test (\r\n  `dateseen` DateTime,\r\n  `ip` IPv4\r\n)\r\nENGINE = MergeTree()\r\nPARTITION BY toYYYYMM(`dateseen`)\r\nORDER BY (`ip`)\r\n```\r\n\r\n* Sample data for all these tables, use [clickhouse-obfuscator](https://github.com/ClickHouse/ClickHouse/blob/master/programs/obfuscator/Obfuscator.cpp#L42-L80) if necessary\r\n\r\nNo data needed.  It appears in the query parsing/planning stage.\r\n\r\n* Queries to run that lead to unexpected result\r\n```\r\nSELECT *\r\nFROM test\r\nWHERE ip = IPv4StringToNum('1.2.3.4')\r\n```\r\n**Error message and/or stacktrace**\r\n\r\nclient side:\r\n```\r\nReceived exception from server (version 23.2.4):\r\nCode: 386. DB::Exception: Received from XXXXX:19000. DB::Exception: There is no supertype for types UInt32, IPv4 because some of them are numbers and some of them are not: while executing 'FUNCTION equals(ip : 1, IPv4StringToNum('1.2.3.4') : 3) -> equals(ip, IPv4StringToNum('1.2.3.4')) UInt8 : 4'.\r\n```\r\n\r\nserver side (clickhouse-server.err.log):\r\n```\r\n2023.03.23 11:18:32.528497 [ 48 ] {b5b50ffa-95b0-404d-bbab-3539290f4715} <Error> TCPHandler: Code: 386. DB::Exception: There is no supertype for types UInt32, IPv4 because some of them are numbers and some of them are not: while executing 'FUNCTION equals(ip : 1, IPv4StringToNum('1.2.3.4') : 3) -> equals(ip, IPv4StringToNum('1.2.3.4')) UInt8 : 4'. (NO_COMMON_TYPE), Stack trace (when copying this message, always include the lines below):                                                                                                \r\n\r\n0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0xe0c86b5 in /usr/bin/clickhouse\r\n1. ? @ 0xce30bad in /usr/bin/clickhouse\r\n2. ? @ 0x12949f07 in /usr/bin/clickhouse\r\n3. ? @ 0x12948c0c in /usr/bin/clickhouse\r\n4. std::__1::shared_ptr<DB::IDataType const> DB::getLeastSupertype<(DB::LeastSupertypeOnError)0>(std::__1::vector<std::__1::shared_ptr<DB::IDataType const>, std::__1::allocator<std::__1::shared_ptr<DB::IDataType const>>> const&) @ 0x12947b0c in /usr/bin/clickhouse\r\n5. ? @ 0xa311937 in /usr/bin/clickhouse\r\n6. ? @ 0xa2f8ea4 in /usr/bin/clickhouse\r\n7. ? @ 0x893fc0e in /usr/bin/clickhouse\r\n8. DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x123b866b in /usr/bin/clickhouse\r\n9. DB::IExecutableFunction::executeWithoutSparseColumns(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x123b90ec in /usr/bin/clickhouse\r\n10. DB::IExecutableFunction::execute(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x123ba35b in /usr/bin/clickhouse\r\n11. DB::ExpressionActions::execute(DB::Block&, unsigned long&, bool) const @ 0x12cb9cfb in /usr/bin/clickhouse\r\n12. DB::ExpressionActions::execute(DB::Block&, bool) const @ 0x12cbade6 in /usr/bin/clickhouse\r\n13. DB::ExpressionAnalysisResult::ExpressionAnalysisResult(DB::SelectQueryExpressionAnalyzer&, std::__1::shared_ptr<DB::StorageInMemoryMetadata const> const&, bool, bool, bool, std::__1::shared_ptr<DB::FilterDAGInfo> const&, std::__1::shared_ptr<DB::FilterDAGInfo> const&, DB::Block const&) @ 0x12ce1f34 in /usr/bin/clickhouse\r\n14. DB::InterpreterSelectQuery::getSampleBlockImpl() @ 0x135d6f71 in /usr/bin/clickhouse\r\n15. ? @ 0x135cfcba in /usr/bin/clickhouse\r\n16. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, std::__1::shared_ptr<DB::Context> const&, std::__1::optional<DB::Pipe>, std::__1::shared_ptr<DB::IStorage> const&,\r\nDB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, std::__1::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::__1::shared_ptr<DB::PreparedSets>) @ 0x135c9fb9 in /usr/bin/clickhouse\r\n17. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, std::__1::shared_ptr<DB::Context const> const&, std::__1::optional<DB::Pipe>, std::__1::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, std::__1::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::__1::shared_ptr<DB::PreparedSets>) @ 0x135c73d4 in /usr/bin/clickhouse\r\n18. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, std::__1::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::__1::shared_ptr<DB::PreparedSets>) @ 0x135cc2ac in /usr/bin/clickhouse\r\n19. DB::MergeTreeData::getQueryProcessingStageWithAggregateProjection(std::__1::shared_ptr<DB::Context const>, std::__1::shared_ptr<DB::StorageSnapshot> const&, DB::SelectQueryInfo&) const @ 0x142aba2e in /usr/bin/clickhouse\r\n20. DB::MergeTreeData::getQueryProcessingStage(std::__1::shared_ptr<DB::Context const>, DB::QueryProcessingStage::Enum, std::__1::shared_ptr<DB::StorageSnapshot> const&, DB::SelectQueryInfo&) const @ 0x142b0083 in /usr/bin/clickhouse\r\n21. DB::InterpreterSelectQuery::getSampleBlockImpl() @ 0x135d6ee9 in /usr/bin/clickhouse\r\n22. ? @ 0x135cfcba in /usr/bin/clickhouse\r\n23. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, std::__1::shared_ptr<DB::Context> const&, std::__1::optional<DB::Pipe>, std::__1::shared_ptr<DB::IStorage> const&,\r\nDB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, std::__1::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::__1::shared_ptr<DB::PreparedSets>) @ 0x135c9fb9 in /usr/bin/clickhouse\r\n24. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::__1::shared_ptr<DB::IAST> const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&) @ 0x1365bd02 in /usr/bin/clickhouse\r\n25. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::__1::shared_ptr<DB::IAST> const&, std::__1::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&) @ 0x13659caa in /usr/bin/clickhouse\r\n26. DB::InterpreterFactory::get(std::__1::shared_ptr<DB::IAST>&, std::__1::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x13582f50 in /usr/bin/clickhouse\r\n27. ? @ 0x1397f260 in /usr/bin/clickhouse\r\n28. DB::executeQuery(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) @ 0x1397c9ad in /usr/bin/clickhouse\r\n29. DB::TCPHandler::runImpl() @ 0x14703d39 in /usr/bin/clickhouse\r\n30. DB::TCPHandler::run() @ 0x14719259 in /usr/bin/clickhouse\r\n31. Poco::Net::TCPServerConnection::start() @ 0x1761d1b4 in /usr/bin/clickhouse\r\n```\r\n\r\n\r\n**Additional context**\r\nAdd any other context about the problem here.\r\n\n",
  "hints_text": "`select toIPv4('1.2.3.4') = IPv4StringToNum('1.2.3.4')`\r\n\r\nThat is unexpected, it worked before by an accident.\r\n\r\nExpected to use `toIPv4('1.2.3.4')`, or `toIPv4OrDefault('1.2.3.4');\n> That is unexpected, it worked before by an accident.\r\n\r\nWhy?\r\n\r\nQuite a bit of tools allow to pass IPv4 as UInt32.\r\n\r\nSo the same situation like DateTime & unixtimestamp, IMO\n@UnamedRus \r\nSo you mean that you expect `select toIPv4('1.2.3.4') = 1::UInt32;` to work?\r\nWhy we had two functions then `toIPv4` and `IPv4StringToNum` ?\nWe have both conversions - `toIPv4` and `toUInt32`, so it can go both ways - `WHERE ip = toIPv4('1.2.3.4')` or `WHERE toUInt32(ip) = IPv4StringToNum('1.2.3.4')`\r\nHowever, it's probably make sense to allow comparison between IPv4 and UInt32 - I'll take a look.",
  "created_at": "2023-04-10T19:03:40Z",
  "modified_files": [
    "src/DataTypes/getLeastSupertype.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02713_ip4_uint_compare.reference",
    "b/tests/queries/0_stateless/02713_ip4_uint_compare.sql"
  ]
}