You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
Logical Error: Trying to get name of not a column: Asterisk
### Describe the bug

From this run: https://s3.amazonaws.com/clickhouse-test-reports/json.html?PR=81707&sha=e48035419022ec3f9c3e220e4cf2d50468c27f6b&name_0=PR&name_1=AST%20fuzzer%20%28amd_tsan%29

Seems not related to https://github.com/ClickHouse/ClickHouse/issues/72537

### How to reproduce

Run Fiddle: https://fiddle.clickhouse.com/d751dd51-61e8-46f9-8fa1-c1496cdcd75c

### Error message and/or stacktrace

Stack trace:

```
<Fatal> : Logical error: 'Trying to get name of not a column: Asterisk'.
<Fatal> : Stack trace (when copying this message, always include the lines below):

0. contrib/llvm-project/libcxx/include/__exception/exception.h:113: Poco::Exception::Exception(String const&, int) @ 0x000000001d4d28d2
1. src/Common/Exception.cpp:110: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x0000000011e6f1c6
2. src/Common/Exception.h:119: DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000ba670ac
3. src/Common/Exception.h:137: DB::Exception::Exception<String>(int, FormatStringHelperImpl<std::type_identity<String>::type>, String&&) @ 0x000000000ba66d56
4. src/Parsers/IAST.h:55: DB::IAST::appendColumnNameWithoutAlias(DB::WriteBuffer&) const @ 0x000000001203137a
5. src/Parsers/IAST.cpp:263: DB::IAST::getColumnNameWithoutAlias() const @ 0x000000001a2c5e37
6. src/Interpreters/ActionsVisitor.cpp:1058: DB::ActionsMatcher::visit(DB::ASTFunction const&, std::shared_ptr<DB::IAST> const&, DB::ActionsMatcher::Data&) @ 0x0000000016f8e70f
7. src/Interpreters/InDepthNodeVisitor.h:71: DB::InDepthNodeVisitor<DB::ActionsMatcher, true, false, std::shared_ptr<DB::IAST> const>::doVisit(std::shared_ptr<DB::IAST> const&) @ 0x0000000016f828b5
8. src/Interpreters/InDepthNodeVisitor.h:61: DB::ExpressionAnalyzer::getRootActions(std::shared_ptr<DB::IAST> const&, bool, DB::ActionsDAG&, bool) @ 0x0000000016f697c8
9. src/Interpreters/ExpressionAnalyzer.cpp:1870: DB::ExpressionAnalyzer::getActionsDAG(bool, bool) @ 0x0000000016f78e16
10. src/Storages/TTLDescription.cpp:191: DB::buildExpressionAndSets(std::shared_ptr<DB::IAST>&, DB::NamesAndTypesList const&, std::shared_ptr<DB::Context const> const&) @ 0x00000000187b27c7
11. src/Storages/TTLDescription.cpp:240: DB::TTLDescription::getTTLFromAST(std::shared_ptr<DB::IAST> const&, DB::ColumnsDescription const&, std::shared_ptr<DB::Context const>, DB::KeyDescription const&, bool) @ 0x00000000187b2eff
12. src/Storages/AlterCommands.cpp:1369: DB::AlterCommands::apply(DB::StorageInMemoryMetadata&, std::shared_ptr<DB::Context const>) const @ 0x000000001844ceb6
13. src/Storages/MergeTree/MergeTreeData.cpp:3762: DB::MergeTreeData::checkAlterIsPossible(DB::AlterCommands const&, std::shared_ptr<DB::Context const>) const @ 0x0000000018af695b
14. src/Interpreters/InterpreterAlterQuery.cpp:216: DB::InterpreterAlterQuery::executeToTable(DB::ASTAlterQuery const&) @ 0x0000000016fe4bd7
15. src/Interpreters/InterpreterAlterQuery.cpp:78: DB::InterpreterAlterQuery::execute() @ 0x0000000016fe28cd
16. src/Interpreters/executeQuery.cpp:1523: DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x0000000017376c97
17. src/Interpreters/executeQuery.cpp:1715: DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x0000000017370ff1
18. src/Server/TCPHandler.cpp:687: DB::TCPHandler::runImpl() @ 0x00000000190fb846
19. src/Server/TCPHandler.cpp:2677: DB::TCPHandler::run() @ 0x0000000019114dc4
20. base/poco/Net/src/TCPServerConnection.cpp:40: Poco::Net::TCPServerConnection::start() @ 0x000000001d577b27
21. base/poco/Net/src/TCPServerDispatcher.cpp:115: Poco::Net::TCPServerDispatcher::run() @ 0x000000001d578025
22. base/poco/Foundation/src/ThreadPool.cpp:205: Poco::PooledThread::run() @ 0x000000001d52065f
23. base/poco/Foundation/src/Thread_POSIX.cpp:335: Poco::ThreadImpl::runnableEntry(void*) @ 0x000000001d51e211
24. start_thread @ 0x00000000000a2ef1
25. __clone3 @ 0x000000000013445c

```
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
