{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 22425,
  "instance_id": "ClickHouse__ClickHouse-22425",
  "issue_numbers": [
    "22008"
  ],
  "base_commit": "58862b5c4d2852709f403c19dac7bb00ad37e84f",
  "patch": "diff --git a/src/DataStreams/NativeBlockOutputStream.cpp b/src/DataStreams/NativeBlockOutputStream.cpp\nindex da68376201ff..2a016c9a0c81 100644\n--- a/src/DataStreams/NativeBlockOutputStream.cpp\n+++ b/src/DataStreams/NativeBlockOutputStream.cpp\n@@ -41,7 +41,7 @@ void NativeBlockOutputStream::flush()\n }\n \n \n-void NativeBlockOutputStream::writeData(const IDataType & type, const ColumnPtr & column, WriteBuffer & ostr, UInt64 offset, UInt64 limit)\n+static void writeData(const IDataType & type, const ColumnPtr & column, WriteBuffer & ostr, UInt64 offset, UInt64 limit)\n {\n     /** If there are columns-constants - then we materialize them.\n       * (Since the data type does not know how to serialize / deserialize constants.)\ndiff --git a/src/DataStreams/NativeBlockOutputStream.h b/src/DataStreams/NativeBlockOutputStream.h\nindex 64ccd267634e..c47d7b2f1c3d 100644\n--- a/src/DataStreams/NativeBlockOutputStream.h\n+++ b/src/DataStreams/NativeBlockOutputStream.h\n@@ -30,8 +30,6 @@ class NativeBlockOutputStream : public IBlockOutputStream\n     void write(const Block & block) override;\n     void flush() override;\n \n-    static void writeData(const IDataType & type, const ColumnPtr & column, WriteBuffer & ostr, UInt64 offset, UInt64 limit);\n-\n     String getContentType() const override { return \"application/octet-stream\"; }\n \n private:\ndiff --git a/src/Processors/Formats/Impl/ParallelFormattingOutputFormat.cpp b/src/Processors/Formats/Impl/ParallelFormattingOutputFormat.cpp\nindex 0ebca3661b42..ce7dd1abd512 100644\n--- a/src/Processors/Formats/Impl/ParallelFormattingOutputFormat.cpp\n+++ b/src/Processors/Formats/Impl/ParallelFormattingOutputFormat.cpp\n@@ -80,9 +80,11 @@ namespace DB\n     }\n \n \n-    void ParallelFormattingOutputFormat::collectorThreadFunction()\n+    void ParallelFormattingOutputFormat::collectorThreadFunction(const ThreadGroupStatusPtr & thread_group)\n     {\n         setThreadName(\"Collector\");\n+        if (thread_group)\n+            CurrentThread::attachToIfDetached(thread_group);\n \n         try\n         {\n@@ -135,9 +137,11 @@ namespace DB\n     }\n \n \n-    void ParallelFormattingOutputFormat::formatterThreadFunction(size_t current_unit_number)\n+    void ParallelFormattingOutputFormat::formatterThreadFunction(size_t current_unit_number, const ThreadGroupStatusPtr & thread_group)\n     {\n         setThreadName(\"Formatter\");\n+        if (thread_group)\n+            CurrentThread::attachToIfDetached(thread_group);\n \n         try\n         {\ndiff --git a/src/Processors/Formats/Impl/ParallelFormattingOutputFormat.h b/src/Processors/Formats/Impl/ParallelFormattingOutputFormat.h\nindex 584aa364d278..8b9e8293c695 100644\n--- a/src/Processors/Formats/Impl/ParallelFormattingOutputFormat.h\n+++ b/src/Processors/Formats/Impl/ParallelFormattingOutputFormat.h\n@@ -76,7 +76,10 @@ class ParallelFormattingOutputFormat : public IOutputFormat\n         /// Just heuristic. We need one thread for collecting, one thread for receiving chunks\n         /// and n threads for formatting.\n         processing_units.resize(params.max_threads_for_parallel_formatting + 2);\n-        collector_thread = ThreadFromGlobalPool([&] { collectorThreadFunction(); });\n+        collector_thread = ThreadFromGlobalPool([thread_group = CurrentThread::getGroup(), this]\n+        {\n+            collectorThreadFunction(thread_group);\n+        });\n         LOG_TRACE(&Poco::Logger::get(\"ParallelFormattingOutputFormat\"), \"Parallel formatting is being used\");\n     }\n \n@@ -200,14 +203,17 @@ class ParallelFormattingOutputFormat : public IOutputFormat\n \n     void scheduleFormatterThreadForUnitWithNumber(size_t ticket_number)\n     {\n-        pool.scheduleOrThrowOnError([this, ticket_number] { formatterThreadFunction(ticket_number); });\n+        pool.scheduleOrThrowOnError([this, thread_group = CurrentThread::getGroup(), ticket_number]\n+        {\n+            formatterThreadFunction(ticket_number, thread_group);\n+        });\n     }\n \n     /// Collects all temporary buffers into main WriteBuffer.\n-    void collectorThreadFunction();\n+    void collectorThreadFunction(const ThreadGroupStatusPtr & thread_group);\n \n     /// This function is executed in ThreadPool and the only purpose of it is to format one Chunk into a continuous buffer in memory.\n-    void formatterThreadFunction(size_t current_unit_number);\n+    void formatterThreadFunction(size_t current_unit_number, const ThreadGroupStatusPtr & thread_group);\n };\n \n }\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01783_parallel_formatting_memory.reference b/tests/queries/0_stateless/01783_parallel_formatting_memory.reference\nnew file mode 100644\nindex 000000000000..c5cdc5cf0bba\n--- /dev/null\n+++ b/tests/queries/0_stateless/01783_parallel_formatting_memory.reference\n@@ -0,0 +1,1 @@\n+Code: 241\ndiff --git a/tests/queries/0_stateless/01783_parallel_formatting_memory.sh b/tests/queries/0_stateless/01783_parallel_formatting_memory.sh\nnew file mode 100755\nindex 000000000000..0b8cb0bc6be5\n--- /dev/null\n+++ b/tests/queries/0_stateless/01783_parallel_formatting_memory.sh\n@@ -0,0 +1,7 @@\n+#!/usr/bin/env bash\n+\n+CUR_DIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+# shellcheck source=../shell_config.sh\n+. \"$CUR_DIR\"/../shell_config.sh\n+\n+$CLICKHOUSE_CURL -sS \"$CLICKHOUSE_URL&max_memory_usage=1G\" -d \"SELECT range(65535) FROM system.one ARRAY JOIN range(65536) AS number\" | grep -oF 'Code: 241'\n",
  "problem_statement": "Memory limit sometimes doesn't work with TSan\n(you don't have to strictly follow this form)\r\n\r\n**Describe the bug**\r\nThe following query leads to OOM if server was built with thread sanitizer.\r\n\r\n```sql\r\nSELECT range(65535) FROM system.one ARRAY JOIN range(65536) AS number\r\n\n",
  "hints_text": "Because `new`/`delete` hooks are disabled with sanitizers.\nBut we have to find a way to enable them.\n@alexey-milovidov \r\nThreadSanitizer redefines global new and delete [here](https://github.com/llvm/llvm-project/blob/3d039f65015f0e7878b77c542a89493dcdd755d0/compiler-rt/lib/tsan/rtl/tsan_new_delete.cpp#L118). InternalFree is declared [here](https://github.com/llvm/llvm-project/blob/3d039f65015f0e7878b77c542a89493dcdd755d0/compiler-rt/lib/sanitizer_common/sanitizer_allocator.cpp#L205)\r\nAnd it uses Deallocate method from SanitizerAllocatorCombined declared [here](https://github.com/llvm/llvm-project/blob/3d039f65015f0e7878b77c542a89493dcdd755d0/compiler-rt/lib/sanitizer_common/sanitizer_allocator_combined.h#L89)\r\nWhich will use some SizeClassAllocator and its methods. The idea of this allocator is to divide all allocation by its size to some buckets.\r\n\r\nThe main methods are [GetSizeClass](https://github.com/llvm/llvm-project/blob/62ec4ac90738a5f2d209ed28c822223e58aaaeb7/compiler-rt/lib/sanitizer_common/sanitizer_allocator_primary64.h#L180) and [ClassIdToSize](https://github.com/llvm/llvm-project/blob/62ec4ac90738a5f2d209ed28c822223e58aaaeb7/compiler-rt/lib/sanitizer_common/sanitizer_allocator_primary64.h#L314) \r\n\r\nThere method are fully defined by constants and [here](https://github.com/llvm/llvm-project/blob/62ec4ac90738a5f2d209ed28c822223e58aaaeb7/compiler-rt/lib/sanitizer_common/sanitizer_allocator_size_class_map.h#L145) is the main method to get size of allocation.\r\n\r\nSo, how I think we can simply implement some function in our codebase based on these constants and use it in out MemoryTracker. Maybe I can try to do this...\nLet's try to do it. Caveats:\r\n\r\n- we can throw from `new` but cannot throw exception from C function malloc;\r\n- it is needed for TSan, ASan and MSan (I hope there will be no many differencies).\n@alexey-milovidov \r\n\r\n> Because `new`/`delete` hooks are disabled with sanitizers.\r\n\r\nBTW, It is only disabled for gcc compiler https://github.com/ClickHouse/ClickHouse/blob/6fb444f732b6c6315e5d511690949175ca21d6c8/src/CMakeLists.txt#L143-L144\r\n\r\nAnd do you mean these operator overloading under the word 'hook'? https://github.com/ClickHouse/ClickHouse/blob/b9a7d59f3bf09d898191a18aa23be2ee6af0ecef/src/Common/new_delete.cpp#L98-L122\r\n\r\nThe main problem is that sanitizer's `new`/`delete` overloadings behave like LD_PRELOAD. So we don't have any access to them. For example, we can write `assert(false)` in operator new overloading in our codebase, but the server will start and work...\n> And do you mean these operator overloading under the word 'hook'? \r\n\r\nYes.\r\n\r\n> BTW, It is only disabled for gcc compiler \r\n\r\nI see, there is a case when jemalloc is disabled:\r\n```\r\nmalloc_usable_size(ptr)\r\n```\r\nIt's more complicated...\r\n\nBTW, the case from @CurtizJ may be not related to new/delete.\n@nikitamikhaylov This is the issue with parallel formatting.\n```\r\ncurl 'http://localhost:8123/' -d \"SELECT range(65535) FROM system.one ARRAY JOIN range(65536) AS number\" | pv > /dev/null\r\n```\r\n\r\n```\r\ngdb\r\nbr MemoryTracker::logMemoryUsage\r\n```\r\n\r\n```\r\nThread 142 \"Formatter\" hit Breakpoint 1, MemoryTracker::logMemoryUsage (this=this@entry=0x121aa020 <total_memory_tracker>, current=current@entry=41950399192) at ../src/Common/MemoryTracker.cpp:123\r\n123         const auto * description = description_ptr.load(std::memory_order_relaxed);\r\n(gdb) bt\r\n#0  MemoryTracker::logMemoryUsage (this=this@entry=0x121aa020 <total_memory_tracker>, current=current@entry=41950399192) at ../src/Common/MemoryTracker.cpp:123\r\n#1  0x00000000089e79b4 in MemoryTracker::updatePeak (this=0x121aa020 <total_memory_tracker>, will_be=41950399192) at ../src/Common/MemoryTracker.cpp:242\r\n#2  MemoryTracker::alloc (this=0x121aa020 <total_memory_tracker>, size=<optimized out>) at ../src/Common/MemoryTracker.cpp:226\r\n#3  0x00000000089e79c7 in MemoryTracker::alloc (this=0x7fff0efd9570, size=41950399192) at ../src/Common/MemoryTracker.cpp:229\r\n#4  0x0000000008a11c78 in Allocator<false, false>::realloc (this=0x7fff42efd098, buf=0x7fece3167000, old_size=34359771150, new_size=50082873360, alignment=0) at ../src/Common/Allocator.h:138\r\n#5  0x000000000f0552b9 in DB::Memory<Allocator<false, false> >::resize (this=0x7fff42efd098, new_size=<optimized out>) at ../src/IO/BufferWithOwnMemory.h:88\r\n#6  DB::BufferWithOutsideMemory<DB::WriteBuffer>::nextImpl (this=0x7fff0efd93f8) at ../src/IO/BufferWithOwnMemory.h:178\r\n#7  0x000000000eff50ac in DB::WriteBuffer::next (this=0x7fff0efd93f8) at ../src/IO/WriteBuffer.h:47\r\n#8  DB::IOutputFormat::flush (this=<optimized out>) at ../src/Processors/Formats/IOutputFormat.cpp:108\r\n#9  0x000000000f054853 in DB::ParallelFormattingOutputFormat::formatterThreadFunction (this=0x7fff42eadc18, current_unit_number=<optimized out>)\r\n    at ../src/Processors/Formats/Impl/ParallelFormattingOutputFormat.cpp:188\r\n#10 0x0000000008a099db in std::__1::__function::__policy_func<void ()>::operator()() const (this=0x7fff0efd9480) at ../contrib/libcxx/include/functional:2221\r\n#11 std::__1::function<void ()>::operator()() const (this=0x7fff0efd9480) at ../contrib/libcxx/include/functional:2560\r\n#12 ThreadPoolImpl<ThreadFromGlobalPool>::worker (this=this@entry=0x7fff42eadd78, thread_it=thread_it@entry=...) at ../src/Common/ThreadPool.cpp:247\r\n#13 0x0000000008a0b39f in ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::{lambda()#3}::operator()() const (this=<optimized out>)\r\n    at ../src/Common/ThreadPool.cpp:124\r\n#14 std::__1::__invoke_constexpr<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::{lambda()#3}&> (__f=...)\r\n    at ../contrib/libcxx/include/type_traits:3682\r\n#15 std::__1::__apply_tuple_impl<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::{lambda()#3}&, std::__1::tuple<>&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::{lambda()#3}&, std::__1::tuple<>&, std::__1::__tuple_indices<>) (__f=..., __t=...)\r\n    at ../contrib/libcxx/include/tuple:1415\r\n#16 std::__1::apply<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::{lambda()#3}&, std::__1::tuple<>&>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::{lambda()#3}&, std::__1::tuple<>&) (__f=..., __t=...) at ../contrib/libcxx/include/tuple:1424\r\n#17 ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() (this=<optimized out>) at ../src/Common/ThreadPool.h:178\r\n#18 0x0000000008a0835b in std::__1::__function::__policy_func<void ()>::operator()() const (this=0x7fff0efd9780) at ../contrib/libcxx/include/functional:2221\r\n#19 std::__1::function<void ()>::operator()() const (this=0x7fff0efd9780) at ../contrib/libcxx/include/functional:2560\r\n#20 ThreadPoolImpl<std::__1::thread>::worker (this=0x7ffff70d7a00, thread_it=...) at ../src/Common/ThreadPool.cpp:247\r\n#21 0x0000000008a0a653 in ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::{lambda()#3}::operator()() const (this=0x28)\r\n    at ../src/Common/ThreadPool.cpp:124\r\n#22 std::__1::__invoke<ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::{lambda()#3}> (__f=...)\r\n    at ../contrib/libcxx/include/type_traits:3676\r\n#23 std::__1::__thread_execute<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::{lambda()#3}>(std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::{lambda()#3}>&, std::__1::__tuple_indices<>) (__t=...) at ../contrib/libcxx/include/thread:280\r\n#24 std::__1::__thread_proxy<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::{lambda()#3}> >(std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::{lambda()#3}>) (__vp=<optimized out>) at ../contrib/libcxx/include/thread:291\r\n#25 0x00007ffff7f77609 in start_thread (arg=<optimized out>) at pthread_create.c:477\r\n#26 0x00007ffff7e9e293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95\r\n```\nLooks like there are two issues:\r\n- query context is not attached to the parallel formatting threads;\r\n- parallel formatting may want to allocate excessive amounts of memory.",
  "created_at": "2021-04-01T03:23:19Z",
  "modified_files": [
    "src/DataStreams/NativeBlockOutputStream.cpp",
    "src/DataStreams/NativeBlockOutputStream.h",
    "src/Processors/Formats/Impl/ParallelFormattingOutputFormat.cpp",
    "src/Processors/Formats/Impl/ParallelFormattingOutputFormat.h"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/01783_parallel_formatting_memory.reference",
    "b/tests/queries/0_stateless/01783_parallel_formatting_memory.sh"
  ]
}