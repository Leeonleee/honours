{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 55080,
  "instance_id": "ClickHouse__ClickHouse-55080",
  "issue_numbers": [
    "55078"
  ],
  "base_commit": "ce734149f7190021a0c3fa628d4623027074a867",
  "patch": "diff --git a/src/Functions/FunctionsStringDistance.cpp b/src/Functions/FunctionsStringDistance.cpp\nindex 5845dd33fb4e..98a04170dd48 100644\n--- a/src/Functions/FunctionsStringDistance.cpp\n+++ b/src/Functions/FunctionsStringDistance.cpp\n@@ -108,27 +108,6 @@ struct ByteHammingDistanceImpl\n     }\n };\n \n-struct ByteJaccardIndexImpl\n-{\n-    using ResultType = Float64;\n-    static ResultType inline process(\n-        const char * __restrict haystack, size_t haystack_size, const char * __restrict needle, size_t needle_size)\n-    {\n-        if (haystack_size == 0 || needle_size == 0)\n-            return 0;\n-\n-        std::unordered_set<char> haystack_set(haystack, haystack + haystack_size);\n-        std::unordered_set<char> needle_set(needle, needle + needle_size);\n-\n-        size_t intersect = 0;\n-        for (auto elem : haystack_set)\n-        {\n-            intersect += needle_set.contains(elem);\n-        }\n-        return static_cast<Float64>(intersect) / (haystack_set.size() + needle_set.size() - intersect);\n-    }\n-};\n-\n struct ByteEditDistanceImpl\n {\n     using ResultType = UInt64;\n@@ -185,33 +164,24 @@ struct NameByteHammingDistance\n     static constexpr auto name = \"byteHammingDistance\";\n };\n \n-struct NameByteJaccardIndex\n+struct NameEditDistance\n {\n-    static constexpr auto name = \"byteJaccardIndex\";\n-};\n-\n-struct NameByteEditDistance\n-{\n-    static constexpr auto name = \"byteEditDistance\";\n+    static constexpr auto name = \"editDistance\";\n };\n \n using FunctionByteHammingDistance = FunctionsStringSimilarity<FunctionStringDistanceImpl<ByteHammingDistanceImpl>, NameByteHammingDistance>;\n \n-using FunctionByteJaccardIndex = FunctionsStringSimilarity<FunctionStringDistanceImpl<ByteJaccardIndexImpl>, NameByteJaccardIndex>;\n-\n-using FunctionByteEditDistance = FunctionsStringSimilarity<FunctionStringDistanceImpl<ByteEditDistanceImpl>, NameByteEditDistance>;\n+using FunctionByteEditDistance = FunctionsStringSimilarity<FunctionStringDistanceImpl<ByteEditDistanceImpl>, NameEditDistance>;\n \n-REGISTER_FUNCTION(StringHammingDistance)\n+REGISTER_FUNCTION(StringDistance)\n {\n     factory.registerFunction<FunctionByteHammingDistance>(\n-        FunctionDocumentation{.description = R\"(Calculates the hamming distance between two bytes strings.)\"});\n+        FunctionDocumentation{.description = R\"(Calculates Hamming distance between two byte-strings.)\"});\n     factory.registerAlias(\"mismatches\", NameByteHammingDistance::name);\n \n-    factory.registerFunction<FunctionByteJaccardIndex>(\n-        FunctionDocumentation{.description = R\"(Calculates the jaccard similarity index between two bytes strings.)\"});\n-\n     factory.registerFunction<FunctionByteEditDistance>(\n-        FunctionDocumentation{.description = R\"(Calculates the edit distance between two bytes strings.)\"});\n-    factory.registerAlias(\"byteLevenshteinDistance\", NameByteEditDistance::name);\n+        FunctionDocumentation{.description = R\"(Calculates the edit distance between two byte-strings.)\"});\n+\n+    factory.registerAlias(\"levenshteinDistance\", NameEditDistance::name);\n }\n }\ndiff --git a/src/Functions/array/arrayJaccardIndex.cpp b/src/Functions/array/arrayJaccardIndex.cpp\nindex 755e0f8278f8..c2a4fee48451 100644\n--- a/src/Functions/array/arrayJaccardIndex.cpp\n+++ b/src/Functions/array/arrayJaccardIndex.cpp\n@@ -1,5 +1,4 @@\n #include <Columns/ColumnArray.h>\n-#include <Columns/ColumnsNumber.h>\n #include <Columns/IColumn.h>\n #include <DataTypes/DataTypeArray.h>\n #include <DataTypes/DataTypesNumber.h>\n@@ -7,11 +6,9 @@\n #include <Functions/FunctionFactory.h>\n #include <Functions/FunctionHelpers.h>\n #include <DataTypes/DataTypeNothing.h>\n-#include <DataTypes/getMostSubtype.h>\n #include <Core/ColumnsWithTypeAndName.h>\n #include <Core/ColumnWithTypeAndName.h>\n #include <Interpreters/Context_fwd.h>\n-#include <base/types.h>\n \n namespace DB\n {\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02884_string_distance_function.reference b/tests/queries/0_stateless/02884_string_distance_function.reference\nindex e8353d894815..cedc23cc84d1 100644\n--- a/tests/queries/0_stateless/02884_string_distance_function.reference\n+++ b/tests/queries/0_stateless/02884_string_distance_function.reference\n@@ -1,9 +1,7 @@\n const arguments byteHammingDistance\n 0\n-const arguments byteEditDistance\n+const arguments editDistance\n 6\n-const arguments byteJaccardIndex\n-0.4\n byteHammingDistance\n 1\n 7\n@@ -32,17 +30,12 @@ mismatches(alias)\n 6\n 3\n 10\n-byteJaccardIndex\n-0.8571428571428571\n-0.8571428571428571\n-0\n-0.4\n-byteEditDistance\n+editDistance\n 1\n 1\n 7\n 6\n-byteLevenshteinDistance\n+levenshteinDistance\n 1\n 1\n 7\ndiff --git a/tests/queries/0_stateless/02884_string_distance_function.sql b/tests/queries/0_stateless/02884_string_distance_function.sql\nindex d19f8a9f43c5..1ddb9bfbafda 100644\n--- a/tests/queries/0_stateless/02884_string_distance_function.sql\n+++ b/tests/queries/0_stateless/02884_string_distance_function.sql\n@@ -1,9 +1,9 @@\n select 'const arguments byteHammingDistance';\n select byteHammingDistance('abcd', 'abcd');\n-select 'const arguments byteEditDistance';\n-select byteEditDistance('clickhouse', 'mouse');\n-select 'const arguments byteJaccardIndex';\n-select byteJaccardIndex('clickhouse', 'mouse');\n+select 'const arguments editDistance';\n+select editDistance('clickhouse', 'mouse');\n+/*select 'const arguments jaccardIndex';\n+select jaccardIndex('clickhouse', 'mouse');*/\n \n drop table if exists t;\n create table t\n@@ -25,13 +25,13 @@ select mismatches(s1, s2) from t;\n select mismatches('abc', s2) from t;\n select mismatches(s2, 'def') from t;\n \n-select 'byteJaccardIndex';\n-select byteJaccardIndex(s1, s2) from t;\n-select 'byteEditDistance';\n-select byteEditDistance(s1, s2) from t;\n-select 'byteLevenshteinDistance';\n-select byteLevenshteinDistance(s1, s2) from t;\n+/*select 'byteJaccardIndex';\n+select byteJaccardIndex(s1, s2) from t;*/\n+select 'editDistance';\n+select editDistance(s1, s2) from t;\n+select 'levenshteinDistance';\n+select levenshteinDistance(s1, s2) from t;\n \n-SELECT byteEditDistance(randomString(power(2, 17)), 'abc'); -- { serverError TOO_LARGE_STRING_SIZE}\n+SELECT editDistance(randomString(power(2, 17)), 'abc'); -- { serverError TOO_LARGE_STRING_SIZE}\n \n drop table t;\n",
  "problem_statement": "`byteJaccardIndex` is slow\n**Describe the unexpected behaviour**\r\n\r\n```\r\n        std::unordered_set<char> haystack_set(haystack, haystack + haystack_size);\r\n        std::unordered_set<char> needle_set(needle, needle + needle_size);\r\n```\r\n\r\n```\r\nplay-eu :) SELECT DISTINCT arrayJoin(tokens(lower(text))) AS word, byteJaccardIndex(word, 'clickhouse') AS distance FROM hackernews ORDER BY distance DESC LIMIT 20\r\n\r\nSELECT DISTINCT\r\n    arrayJoin(tokens(lower(text))) AS word,\r\n    byteJaccardIndex(word, 'clickhouse') AS distance\r\nFROM hackernews\r\nORDER BY distance DESC\r\nLIMIT 20\r\n\r\nQuery id: 5d3d9a9a-eb45-42a5-92d2-d38738dc32ea\r\n\r\n\u250c\u2500word\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500distance\u2500\u2510\r\n\u2502 clickhouse      \u2502                  1 \u2502\r\n\u2502 clickhouses     \u2502                  1 \u2502\r\n\u2502 clikhouse       \u2502                  1 \u2502\r\n\u2502 clickehouse     \u2502                  1 \u2502\r\n\u2502 clikchouse      \u2502                  1 \u2502\r\n\u2502 chickenlicious  \u2502                0.9 \u2502\r\n\u2502 bokehlicious    \u2502                0.9 \u2502\r\n\u2502 22clickhouse    \u2502                0.9 \u2502\r\n\u2502 flushcookies    \u2502                0.9 \u2502\r\n\u2502 clickhousecloud \u2502                0.9 \u2502\r\n\u2502 licheckouts     \u2502                0.9 \u2502\r\n\u2502 clickhousesql   \u2502                0.9 \u2502\r\n\u2502 suchlike        \u2502 0.8888888888888888 \u2502\r\n\u2502 choleski        \u2502 0.8888888888888888 \u2502\r\n\u2502 clickhous       \u2502 0.8888888888888888 \u2502\r\n\u2502 suckhole        \u2502 0.8888888888888888 \u2502\r\n\u2502 suchlikes       \u2502 0.8888888888888888 \u2502\r\n\u2502 chuckholes      \u2502 0.8888888888888888 \u2502\r\n\u2502 suckholes       \u2502 0.8888888888888888 \u2502\r\n\u2502 clickholes      \u2502 0.8888888888888888 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n20 rows in set. Elapsed: 48.896 sec. Processed 37.17 million rows, 12.72 GB (760.21 thousand rows/s., 260.16 MB/s.)\r\nPeak memory usage: 1.83 GiB.\r\n```\n",
  "hints_text": "@ucasfl ^",
  "created_at": "2023-09-28T04:32:39Z",
  "modified_files": [
    "src/Functions/FunctionsStringDistance.cpp",
    "src/Functions/array/arrayJaccardIndex.cpp"
  ],
  "modified_test_files": [
    "tests/queries/0_stateless/02884_string_distance_function.reference",
    "tests/queries/0_stateless/02884_string_distance_function.sql"
  ]
}