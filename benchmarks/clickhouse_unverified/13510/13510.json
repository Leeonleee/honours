{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 13510,
  "instance_id": "ClickHouse__ClickHouse-13510",
  "issue_numbers": [
    "13368"
  ],
  "base_commit": "ddf0fe30b37ff989a2187f53bbc34e783551c9c2",
  "patch": "diff --git a/src/Functions/lcm.cpp b/src/Functions/lcm.cpp\nindex 9230a292c433..e014fa64cc31 100644\n--- a/src/Functions/lcm.cpp\n+++ b/src/Functions/lcm.cpp\n@@ -1,6 +1,28 @@\n #include <Functions/FunctionFactory.h>\n #include <Functions/FunctionBinaryArithmetic.h>\n+\n #include <numeric>\n+#include <limits>\n+#include <type_traits>\n+\n+\n+namespace\n+{\n+\n+template <typename T>\n+constexpr T abs(T value) noexcept\n+{\n+    if constexpr (std::is_signed_v<T>)\n+    {\n+        if (value >= 0 || value == std::numeric_limits<T>::min())\n+            return value;\n+        return -value;\n+    }\n+    else\n+        return value;\n+}\n+\n+}\n \n \n namespace DB\n@@ -18,9 +40,22 @@ struct LCMImpl\n     {\n         throwIfDivisionLeadsToFPE(typename NumberTraits::ToInteger<A>::Type(a), typename NumberTraits::ToInteger<B>::Type(b));\n         throwIfDivisionLeadsToFPE(typename NumberTraits::ToInteger<B>::Type(b), typename NumberTraits::ToInteger<A>::Type(a));\n-        return std::lcm(\n-            typename NumberTraits::ToInteger<Result>::Type(a),\n-            typename NumberTraits::ToInteger<Result>::Type(b));\n+\n+        /** It's tempting to use std::lcm function.\n+          * But it has undefined behaviour on overflow.\n+          * And assert in debug build.\n+          * We need some well defined behaviour instead\n+          * (example: throw an exception or overflow in implementation specific way).\n+          */\n+\n+        using Int = typename NumberTraits::ToInteger<Result>::Type;\n+        using Unsigned = std::make_unsigned_t<Int>;\n+\n+        Unsigned val1 = abs<Int>(a) / std::gcd(Int(a), Int(b));\n+        Unsigned val2 = abs<Int>(b);\n+\n+        /// Overflow in implementation specific way.\n+        return Result(val1 * val2);\n     }\n \n #if USE_EMBEDDED_COMPILER\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01435_lcm_overflow.reference b/tests/queries/0_stateless/01435_lcm_overflow.reference\nnew file mode 100644\nindex 000000000000..eebd14705df3\n--- /dev/null\n+++ b/tests/queries/0_stateless/01435_lcm_overflow.reference\n@@ -0,0 +1,8 @@\n+30\n+30\n+30\n+30\n+0\n+0\n+0\n+0\ndiff --git a/tests/queries/0_stateless/01435_lcm_overflow.sql b/tests/queries/0_stateless/01435_lcm_overflow.sql\nnew file mode 100644\nindex 000000000000..f70200eb2d80\n--- /dev/null\n+++ b/tests/queries/0_stateless/01435_lcm_overflow.sql\n@@ -0,0 +1,10 @@\n+SELECT lcm(15, 10);\n+SELECT lcm(-15, 10);\n+SELECT lcm(15, -10);\n+SELECT lcm(-15, -10);\n+\n+-- Implementation specific result on overflow:\n+SELECT ignore(lcm(256, 9223372036854775807));\n+SELECT ignore(lcm(256, -9223372036854775807));\n+SELECT ignore(lcm(-256, 9223372036854775807));\n+SELECT ignore(lcm(-256, -9223372036854775807));\n",
  "problem_statement": "Assert in lcm function.\n```\r\nSELECT lcm(256, 9223372036854775807)\r\n```\r\n\n",
  "hints_text": "",
  "created_at": "2020-08-07T23:02:31Z",
  "modified_files": [
    "src/Functions/lcm.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/01435_lcm_overflow.reference",
    "b/tests/queries/0_stateless/01435_lcm_overflow.sql"
  ]
}