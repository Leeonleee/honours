{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 73846,
  "instance_id": "ClickHouse__ClickHouse-73846",
  "issue_numbers": [
    "49244"
  ],
  "base_commit": "48ec28b8b936bc02fa7ecfaf7f2f3d384c190fad",
  "patch": "diff --git a/docs/ru/operations/opentelemetry.md b/docs/ru/operations/opentelemetry.md\nindex af6d3eef2055..983b39780278 100644\n--- a/docs/ru/operations/opentelemetry.md\n+++ b/docs/ru/operations/opentelemetry.md\n@@ -4,7 +4,7 @@ sidebar_position: 62\n sidebar_label: \u041f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 OpenTelemetry\n ---\n \n-# [\u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u0430\u043b\u044c\u043d\u043e] \u041f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 OpenTelemetry\n+# \u041f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 OpenTelemetry\n \n ClickHouse \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 [OpenTelemetry](https://opentelemetry.io/) \u2014 \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u0439 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442 \u0434\u043b\u044f \u0441\u0431\u043e\u0440\u0430 \u0442\u0440\u0430\u0441\u0441\u0438\u0440\u043e\u0432\u043e\u043a \u0438 \u043c\u0435\u0442\u0440\u0438\u043a \u0438\u0437 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.\n \ndiff --git a/docs/zh/operations/opentelemetry.mdx b/docs/zh/operations/opentelemetry.mdx\nindex 1d567140f439..eb7f3accedaa 100644\n--- a/docs/zh/operations/opentelemetry.mdx\n+++ b/docs/zh/operations/opentelemetry.mdx\n@@ -2,7 +2,7 @@\n slug: /zh/operations/opentelemetry\n sidebar_position: 62\n sidebar_label: OpenTelemetry Support\n-title: \"[experimental] OpenTelemetry Support\"\n+title: \"OpenTelemetry Support\"\n ---\n \n import Content from '@site/docs/en/operations/opentelemetry.md';\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03008_deduplication_cases_from_docs.sql b/tests/queries/0_stateless/03008_deduplication_cases_from_docs.sql\nindex 7927a6b1edf9..1bd7ef09c356 100644\n--- a/tests/queries/0_stateless/03008_deduplication_cases_from_docs.sql\n+++ b/tests/queries/0_stateless/03008_deduplication_cases_from_docs.sql\n@@ -1,4 +1,3 @@\n--- #########\n select 'Different materialized view insert into one underlayed table equal data.';\n \n DROP TABLE IF EXISTS dst;\n@@ -81,8 +80,6 @@ DROP TABLE mv_first;\n DROP TABLE mv_dst;\n DROP TABLE dst;\n \n-\n--- #########\n select 'Different insert operations generate the same data after transformation in underlied table of materialized view.';\n \n DROP TABLE IF EXISTS dst;\n@@ -151,8 +148,6 @@ ORDER by all;\n DROP TABLE mv_dst;\n DROP TABLE dst;\n \n-\n--- #########\n select 'Indentical blocks in insertion with `insert_deduplication_token`';\n \n DROP TABLE IF EXISTS dst;\n@@ -217,8 +212,6 @@ ORDER by all;\n \n DROP TABLE dst;\n \n-\n--- #########\n select 'Indentical blocks in insertion';\n \n DROP TABLE IF EXISTS dst;\n@@ -250,8 +243,6 @@ ORDER by all;\n \n DROP TABLE dst;\n \n-\n--- #########\n select 'Indentical blocks after materialised view`s transformation';\n \n DROP TABLE IF EXISTS dst;\n",
  "problem_statement": "Roadmap to promote the opentelemetry tracing feature to be production ready\nThe distributed tracing feature is heavily used in our environment to deal with problems in distributed environment and it has to be proven a powerful feature for a long time that helps us solve or find out many complicated problems. \r\nMost of the work that are implemented in our own branch has been contributed back to the community.\r\n\r\nThe main features in the master branch now are as follows:\r\n1. Trace on cluster DDLs\r\n2. Trace a query on local node and its sub-queries on remote node\r\n3. Trace async or sync INSERT on distributed table\r\n4. Trace queries from HTTP/TCP/GRPC\r\n5. Propagate tracing context to downstream servers via URL engine\r\n\r\nBut the status of this feature is still marked as [experienmental](https://clickhouse.com/docs/en/operations/opentelemetry). \r\nFrom the community perspective, I think it's time for us to give a plan to promot it as a production ready feature. \r\n\r\nBefore that, here some things that I can come across to be completed:\r\n\r\n1. Standardize the attribute names as defined in the [opentelemetry specification](https://opentelemetry.io/docs/reference/specification/trace/semantic_conventions/). \r\n    The attribute names now can be defined in anyway, it's better to use current specification to standardize some of them to allow the logs can be easily handled by some other external visulization tools. **This is NOT backward compatible.**\r\n2. Investigate the root cause of https://github.com/ClickHouse/ClickHouse/issues/49185\r\n     Even though it occurs in Debug build, but it indicates that this may lead to incorrect logs in the Release build if it happens\r\n3. Add `trace_id` column to `system.query_log`\r\n    This will give a clear info in the query log that if a query is traced or not. And then it can be used to search/join the `opentelemetry_span_logs` table\r\n4. Support Materialized View in the distributed tracing\r\n     See: https://github.com/ClickHouse/ClickHouse/pull/41672\r\n5. Propagate the tracing context to remote S3\r\n    Some S3-compatible remote storages support this distributed tracing feature. It would give us the ability to deal with problems between ClickHouse and underlying S3 storage.\r\n\r\nWhat do you think? @alexey-milovidov \r\n\r\n\n",
  "hints_text": "1. Yes, let's change the attribute names to match some standards until it is too late.\r\n2. This error is related to the usage of fibers due to enabling hedged requests. @Avogar is investigating it.\r\n3. Let's do it.\r\n4. This pull request is still a draft, let's go ahead.\r\n5. This is of low priority, but why not... Also check https://github.com/ClickHouse/ClickHouse/pull/34585, you can continue in another PR.\nI've just been playing with this via python asynch library which includes some support for it. There is what seems to be non-standard behaviour with `traceparent` in that the CH `opentelemetry_span_log` takes the span id as `parent_span_id` but does not take the `trace_id` (which in python at least is not a uuid). I think that what seems to be standard behaviour in otel ecosystem is that prior to going to production-ready status (and while these other changes are being made) it should probably be changed so that CH `trace_id` can be anything, and that it accepts this from the `traceparent` parameter?\n> the CH opentelemetry_span_log takes the span id as parent_span_id but does not take the trace_id (which in python at least is not a uuid). \r\n\r\nIf you look at the code in ClickHouse, it follows the opentelemtry standard to parse the `traceparent`. I don't know how it happens, but you can give an example.\nSure, but it seems like what the behaviour of other otel systems (eg python and java integrations) is is that trace-id is also inherited from traceparent, whereas with clickhouse it is not and there is a uuid type restriction on it which would need lifting for it to be allowed\nDepends on #52584\n\ud83d\udc4b  @alexey-milovidov ooc, is there an update with regards to this issue? (since the dependent issues seem to be marked clsoed) \nIf @FrankChen021 says it is production-ready, we can remove the experimental flag.\nI don't see there will be breaking changes of this feature in future. \r\nEven some of the work in this issue have not been done, we can see them as improvements of this future.  \r\nSo, let's mark it as production ready.",
  "created_at": "2024-12-26T11:20:52Z",
  "modified_files": [
    "docs/ru/operations/opentelemetry.md",
    "docs/zh/operations/opentelemetry.mdx"
  ],
  "modified_test_files": [
    "tests/queries/0_stateless/03008_deduplication_cases_from_docs.sql"
  ]
}