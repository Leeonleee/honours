{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 10365,
  "instance_id": "ClickHouse__ClickHouse-10365",
  "issue_numbers": [
    "515"
  ],
  "base_commit": "a7d360b72ba30aab13bfc8b48601e72db72d219e",
  "patch": "diff --git a/src/Core/Defines.h b/src/Core/Defines.h\nindex fe614cec6bde..5552de3b0457 100644\n--- a/src/Core/Defines.h\n+++ b/src/Core/Defines.h\n@@ -98,3 +98,6 @@\n \n /// Default limit on recursion depth of recursive descend parser.\n #define DBMS_DEFAULT_MAX_PARSER_DEPTH 1000\n+\n+/// Max depth of hierarchical dictionary\n+#define DBMS_HIERARCHICAL_DICTIONARY_MAX_DEPTH 1000\ndiff --git a/src/Dictionaries/CacheDictionary.cpp b/src/Dictionaries/CacheDictionary.cpp\nindex 30bd521c0bba..f75b063e4e37 100644\n--- a/src/Dictionaries/CacheDictionary.cpp\n+++ b/src/Dictionaries/CacheDictionary.cpp\n@@ -10,6 +10,7 @@\n #include <Common/ProfilingScopedRWLock.h>\n #include <Common/randomSeed.h>\n #include <Common/typeid_cast.h>\n+#include <Core/Defines.h>\n #include <ext/range.h>\n #include <ext/size.h>\n #include <Common/setThreadName.h>\n@@ -17,6 +18,7 @@\n #include \"DictionaryBlockInputStream.h\"\n #include \"DictionaryFactory.h\"\n \n+\n namespace ProfileEvents\n {\n extern const Event DictCacheKeysRequested;\n@@ -144,7 +146,7 @@ void CacheDictionary::isInImpl(const PaddedPODArray<Key> & child_ids, const Ance\n     PaddedPODArray<Key> children(out_size, 0);\n     PaddedPODArray<Key> parents(child_ids.begin(), child_ids.end());\n \n-    while (true)\n+    for (size_t i = 0; i < DBMS_HIERARCHICAL_DICTIONARY_MAX_DEPTH; ++i)\n     {\n         size_t out_idx = 0;\n         size_t parents_idx = 0;\n@@ -218,7 +220,7 @@ void CacheDictionary::isInConstantVector(const Key child_id, const PaddedPODArra\n     std::vector<Key> ancestors(1, child_id);\n \n     /// Iteratively find all ancestors for child.\n-    while (true)\n+    for (size_t i = 0; i < DBMS_HIERARCHICAL_DICTIONARY_MAX_DEPTH; ++i)\n     {\n         toParent(child, parent);\n \ndiff --git a/src/Dictionaries/Embedded/RegionsHierarchy.h b/src/Dictionaries/Embedded/RegionsHierarchy.h\nindex 25625284e32b..7f42a76ecc2a 100644\n--- a/src/Dictionaries/Embedded/RegionsHierarchy.h\n+++ b/src/Dictionaries/Embedded/RegionsHierarchy.h\n@@ -4,6 +4,7 @@\n #include <boost/noncopyable.hpp>\n #include <common/types.h>\n #include \"GeodataProviders/IHierarchiesProvider.h\"\n+#include <Core/Defines.h>\n \n \n class IRegionsHierarchyDataProvider;\n@@ -59,7 +60,7 @@ class RegionsHierarchy : private boost::noncopyable\n         if (lhs >= parents.size())\n             return false;\n \n-        while (lhs != 0 && lhs != rhs)\n+        for (size_t i = 0; lhs != 0 && lhs != rhs && i < DBMS_HIERARCHICAL_DICTIONARY_MAX_DEPTH; ++i)\n             lhs = parents[lhs];\n \n         return lhs != 0;\ndiff --git a/src/Dictionaries/FlatDictionary.cpp b/src/Dictionaries/FlatDictionary.cpp\nindex b70fe95346d7..fd2275f384db 100644\n--- a/src/Dictionaries/FlatDictionary.cpp\n+++ b/src/Dictionaries/FlatDictionary.cpp\n@@ -2,6 +2,8 @@\n #include <IO/WriteHelpers.h>\n #include \"DictionaryBlockInputStream.h\"\n #include \"DictionaryFactory.h\"\n+#include <Core/Defines.h>\n+\n \n namespace DB\n {\n@@ -77,7 +79,7 @@ void FlatDictionary::isInImpl(const ChildType & child_ids, const AncestorType &\n         auto id = getAt(child_ids, row);\n         const auto ancestor_id = getAt(ancestor_ids, row);\n \n-        while (id < loaded_size && id != null_value && id != ancestor_id)\n+        for (size_t i = 0; id < loaded_size && id != null_value && id != ancestor_id && i < DBMS_HIERARCHICAL_DICTIONARY_MAX_DEPTH; ++i)\n             id = attr[id];\n \n         out[row] = id != null_value && id == ancestor_id;\ndiff --git a/src/Dictionaries/HashedDictionary.cpp b/src/Dictionaries/HashedDictionary.cpp\nindex c401142584c8..f889c8207701 100644\n--- a/src/Dictionaries/HashedDictionary.cpp\n+++ b/src/Dictionaries/HashedDictionary.cpp\n@@ -2,6 +2,8 @@\n #include <ext/size.h>\n #include \"DictionaryBlockInputStream.h\"\n #include \"DictionaryFactory.h\"\n+#include <Core/Defines.h>\n+\n \n namespace\n {\n@@ -87,7 +89,7 @@ void HashedDictionary::isInAttrImpl(const AttrType & attr, const ChildType & chi\n         auto id = getAt(child_ids, row);\n         const auto ancestor_id = getAt(ancestor_ids, row);\n \n-        while (id != null_value && id != ancestor_id)\n+        for (size_t i = 0; id != null_value && id != ancestor_id && i < DBMS_HIERARCHICAL_DICTIONARY_MAX_DEPTH; ++i)\n         {\n             auto it = attr.find(id);\n             if (it != std::end(attr))\ndiff --git a/src/Functions/FunctionsEmbeddedDictionaries.h b/src/Functions/FunctionsEmbeddedDictionaries.h\nindex a8078bc47b7c..d337f9ea363c 100644\n--- a/src/Functions/FunctionsEmbeddedDictionaries.h\n+++ b/src/Functions/FunctionsEmbeddedDictionaries.h\n@@ -16,6 +16,7 @@\n #include <Dictionaries/Embedded/RegionsNames.h>\n #include <IO/WriteHelpers.h>\n #include <Common/typeid_cast.h>\n+#include <Core/Defines.h>\n \n #if !defined(ARCADIA_BUILD)\n #    include <Common/config.h>\n@@ -450,7 +451,7 @@ class FunctionHierarchyWithDictionary : public IFunction\n             for (size_t i = 0; i < size; ++i)\n             {\n                 T cur = vec_from[i];\n-                while (cur)\n+                for (size_t depth = 0; cur && depth < DBMS_HIERARCHICAL_DICTIONARY_MAX_DEPTH; ++depth)\n                 {\n                     res_values.push_back(cur);\n                     cur = Transform::toParent(cur, dict);\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01251_dict_is_in_infinite_loop.reference b/tests/queries/0_stateless/01251_dict_is_in_infinite_loop.reference\nnew file mode 100644\nindex 000000000000..757d2858524a\n--- /dev/null\n+++ b/tests/queries/0_stateless/01251_dict_is_in_infinite_loop.reference\n@@ -0,0 +1,39 @@\n+1\n+1\n+1\n+1\n+1\n+0\n+0\n+0\n+0\n+[11,22]\n+[22,11]\n+[11,22]\n+[22,11]\n+1\n+1\n+1\n+1\n+1\n+0\n+0\n+0\n+0\n+[11,22]\n+[22,11]\n+[11,22]\n+[22,11]\n+1\n+1\n+1\n+1\n+1\n+255\n+255\n+0\n+255\n+[11,22]\n+[22,11]\n+[11,22]\n+[22,11]\ndiff --git a/tests/queries/0_stateless/01251_dict_is_in_infinite_loop.sql b/tests/queries/0_stateless/01251_dict_is_in_infinite_loop.sql\nnew file mode 100644\nindex 000000000000..decf65dc8cf8\n--- /dev/null\n+++ b/tests/queries/0_stateless/01251_dict_is_in_infinite_loop.sql\n@@ -0,0 +1,97 @@\n+DROP DATABASE IF EXISTS database_for_dict;\n+CREATE DATABASE database_for_dict Engine = Ordinary;\n+\n+DROP TABLE IF EXISTS database_for_dict.dict_source;\n+CREATE TABLE database_for_dict.dict_source (id UInt64, parent_id UInt64, value String) ENGINE = Memory;\n+INSERT INTO database_for_dict.dict_source VALUES (1, 0, 'hello'), (2, 1, 'world'), (3, 2, 'upyachka'), (11, 22, 'a'), (22, 11, 'b');\n+\n+DROP DICTIONARY IF EXISTS database_for_dict.dictionary_with_hierarchy;\n+\n+CREATE DICTIONARY database_for_dict.dictionary_with_hierarchy\n+(\n+    id UInt64, parent_id UInt64 HIERARCHICAL, value String\n+)\n+PRIMARY KEY id\n+SOURCE(CLICKHOUSE(host 'localhost' port 9000 user 'default' db 'database_for_dict' table 'dict_source'))\n+LAYOUT(HASHED())\n+LIFETIME(MIN 1 MAX 1);\n+\n+SELECT dictIsIn('database_for_dict.dictionary_with_hierarchy', toUInt64(2), toUInt64(1));\n+\n+SELECT dictIsIn('database_for_dict.dictionary_with_hierarchy', toUInt64(22), toUInt64(11));\n+SELECT dictIsIn('database_for_dict.dictionary_with_hierarchy', materialize(toUInt64(22)), toUInt64(11));\n+SELECT dictIsIn('database_for_dict.dictionary_with_hierarchy', toUInt64(11), materialize(toUInt64(22)));\n+SELECT dictIsIn('database_for_dict.dictionary_with_hierarchy', materialize(toUInt64(22)), materialize(toUInt64(11)));\n+\n+SELECT dictIsIn('database_for_dict.dictionary_with_hierarchy', toUInt64(22), toUInt64(111));\n+SELECT dictIsIn('database_for_dict.dictionary_with_hierarchy', materialize(toUInt64(22)), toUInt64(111));\n+SELECT dictIsIn('database_for_dict.dictionary_with_hierarchy', toUInt64(11), materialize(toUInt64(222)));\n+SELECT dictIsIn('database_for_dict.dictionary_with_hierarchy', materialize(toUInt64(22)), materialize(toUInt64(111)));\n+\n+SELECT dictGetHierarchy('database_for_dict.dictionary_with_hierarchy', toUInt64(11));\n+SELECT dictGetHierarchy('database_for_dict.dictionary_with_hierarchy', toUInt64(22));\n+SELECT dictGetHierarchy('database_for_dict.dictionary_with_hierarchy', materialize(toUInt64(11)));\n+SELECT dictGetHierarchy('database_for_dict.dictionary_with_hierarchy', materialize(toUInt64(22)));\n+\n+\n+DROP DICTIONARY IF EXISTS database_for_dict.dictionary_with_hierarchy;\n+\n+CREATE DICTIONARY database_for_dict.dictionary_with_hierarchy\n+(\n+    id UInt64, parent_id UInt64 HIERARCHICAL, value String\n+)\n+PRIMARY KEY id\n+SOURCE(CLICKHOUSE(host 'localhost' port 9000 user 'default' db 'database_for_dict' table 'dict_source'))\n+LAYOUT(FLAT())\n+LIFETIME(MIN 1 MAX 1);\n+\n+SELECT dictIsIn('database_for_dict.dictionary_with_hierarchy', toUInt64(2), toUInt64(1));\n+\n+SELECT dictIsIn('database_for_dict.dictionary_with_hierarchy', toUInt64(22), toUInt64(11));\n+SELECT dictIsIn('database_for_dict.dictionary_with_hierarchy', materialize(toUInt64(22)), toUInt64(11));\n+SELECT dictIsIn('database_for_dict.dictionary_with_hierarchy', toUInt64(11), materialize(toUInt64(22)));\n+SELECT dictIsIn('database_for_dict.dictionary_with_hierarchy', materialize(toUInt64(22)), materialize(toUInt64(11)));\n+\n+SELECT dictIsIn('database_for_dict.dictionary_with_hierarchy', toUInt64(22), toUInt64(111));\n+SELECT dictIsIn('database_for_dict.dictionary_with_hierarchy', materialize(toUInt64(22)), toUInt64(111));\n+SELECT dictIsIn('database_for_dict.dictionary_with_hierarchy', toUInt64(11), materialize(toUInt64(222)));\n+SELECT dictIsIn('database_for_dict.dictionary_with_hierarchy', materialize(toUInt64(22)), materialize(toUInt64(111)));\n+\n+SELECT dictGetHierarchy('database_for_dict.dictionary_with_hierarchy', toUInt64(11));\n+SELECT dictGetHierarchy('database_for_dict.dictionary_with_hierarchy', toUInt64(22));\n+SELECT dictGetHierarchy('database_for_dict.dictionary_with_hierarchy', materialize(toUInt64(11)));\n+SELECT dictGetHierarchy('database_for_dict.dictionary_with_hierarchy', materialize(toUInt64(22)));\n+\n+\n+DROP DICTIONARY IF EXISTS database_for_dict.dictionary_with_hierarchy;\n+\n+CREATE DICTIONARY database_for_dict.dictionary_with_hierarchy\n+(\n+    id UInt64, parent_id UInt64 HIERARCHICAL, value String\n+)\n+PRIMARY KEY id\n+SOURCE(CLICKHOUSE(host 'localhost' port 9000 user 'default' db 'database_for_dict' table 'dict_source'))\n+LAYOUT(CACHE(SIZE_IN_CELLS 10))\n+LIFETIME(MIN 1 MAX 1);\n+\n+SELECT dictIsIn('database_for_dict.dictionary_with_hierarchy', toUInt64(2), toUInt64(1));\n+\n+SELECT dictIsIn('database_for_dict.dictionary_with_hierarchy', toUInt64(22), toUInt64(11));\n+SELECT dictIsIn('database_for_dict.dictionary_with_hierarchy', materialize(toUInt64(22)), toUInt64(11));\n+SELECT dictIsIn('database_for_dict.dictionary_with_hierarchy', toUInt64(11), materialize(toUInt64(22)));\n+SELECT dictIsIn('database_for_dict.dictionary_with_hierarchy', materialize(toUInt64(22)), materialize(toUInt64(11)));\n+\n+SELECT dictIsIn('database_for_dict.dictionary_with_hierarchy', toUInt64(22), toUInt64(111));\n+SELECT dictIsIn('database_for_dict.dictionary_with_hierarchy', materialize(toUInt64(22)), toUInt64(111));\n+SELECT dictIsIn('database_for_dict.dictionary_with_hierarchy', toUInt64(11), materialize(toUInt64(222)));\n+SELECT dictIsIn('database_for_dict.dictionary_with_hierarchy', materialize(toUInt64(22)), materialize(toUInt64(111)));\n+\n+SELECT dictGetHierarchy('database_for_dict.dictionary_with_hierarchy', toUInt64(11));\n+SELECT dictGetHierarchy('database_for_dict.dictionary_with_hierarchy', toUInt64(22));\n+SELECT dictGetHierarchy('database_for_dict.dictionary_with_hierarchy', materialize(toUInt64(11)));\n+SELECT dictGetHierarchy('database_for_dict.dictionary_with_hierarchy', materialize(toUInt64(22)));\n+\n+\n+DROP DICTIONARY database_for_dict.dictionary_with_hierarchy;\n+DROP TABLE database_for_dict.dict_source;\n+DROP DATABASE database_for_dict;\n",
  "problem_statement": "A loop in a hierarchical dictionary crashes the server\nThe functions `dictIsIn()` and `dictGetHierarchy()` are not very robust in the face of a dictionary with a hierarchical loop.\r\n\r\nIf you define by mistake a dictionary with a loop in the parent ID attribute (even just by using `<null_value>` in an incorrect way), then `dictIsIn()` goes into an infinite loop and `dictGetHierarchy()` starts allocating memory for an infinite array.\r\n\r\nThey cannot be terminated by the client and need a `pkill -9 clickhouse-serv`\r\n\r\nAs a related note, the dictionaries seem to use a [hardcoded parent ID = zero](https://github.com/yandex/ClickHouse/blob/ed5b5211101fcff939a85bff90b8d764b7992d4a/dbms/include/DB/Dictionaries/IDictionary.h#L79) to mean \"no parent\" or \"root node.\" But zero is actually a valid ID for a dictionary! I think this should at least be documented.\n",
  "hints_text": "@alesapin \r\nPlease verify if it's possible to trigger this issue with the new dictionaries DDL queries.\nFor `dictGetHierarchy` it was fixed in #1064",
  "created_at": "2020-04-20T02:40:56Z",
  "modified_files": [
    "src/Core/Defines.h",
    "src/Dictionaries/CacheDictionary.cpp",
    "src/Dictionaries/Embedded/RegionsHierarchy.h",
    "src/Dictionaries/FlatDictionary.cpp",
    "src/Dictionaries/HashedDictionary.cpp",
    "src/Functions/FunctionsEmbeddedDictionaries.h"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/01251_dict_is_in_infinite_loop.reference",
    "b/tests/queries/0_stateless/01251_dict_is_in_infinite_loop.sql"
  ]
}