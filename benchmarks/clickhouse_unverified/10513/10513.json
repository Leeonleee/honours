{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 10513,
  "instance_id": "ClickHouse__ClickHouse-10513",
  "issue_numbers": [
    "9335"
  ],
  "base_commit": "d1464a441f0fc49114353c51a5cd00031dcd0397",
  "patch": "diff --git a/base/common/DateLUTImpl.h b/base/common/DateLUTImpl.h\nindex cb41d2ef1c1e..6841598b7ca4 100644\n--- a/base/common/DateLUTImpl.h\n+++ b/base/common/DateLUTImpl.h\n@@ -287,8 +287,8 @@ class DateLUTImpl\n         if (offset_is_whole_number_of_hours_everytime)\n             return (t / 60) % 60;\n \n-        time_t date = find(t).date;\n-        return (t - date) / 60 % 60;\n+        UInt32 date = find(t).date;\n+        return (UInt32(t) - date) / 60 % 60;\n     }\n \n     inline time_t toStartOfMinute(time_t t) const { return t / 60 * 60; }\n@@ -301,9 +301,8 @@ class DateLUTImpl\n         if (offset_is_whole_number_of_hours_everytime)\n             return t / 3600 * 3600;\n \n-        time_t date = find(t).date;\n-        /// Still can return wrong values for time at 1970-01-01 if the UTC offset was non-whole number of hours.\n-        return date + (t - date) / 3600 * 3600;\n+        UInt32 date = find(t).date;\n+        return date + (UInt32(t) - date) / 3600 * 3600;\n     }\n \n     /** Number of calendar day since the beginning of UNIX epoch (1970-01-01 is zero)\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01262_fractional_timezone_near_start_of_epoch.reference b/tests/queries/0_stateless/01262_fractional_timezone_near_start_of_epoch.reference\nnew file mode 100644\nindex 000000000000..9a0204fb0293\n--- /dev/null\n+++ b/tests/queries/0_stateless/01262_fractional_timezone_near_start_of_epoch.reference\n@@ -0,0 +1,3 @@\n+1970-01-01 08:16:40\n+16\n+1970-01-01 08:00:00\ndiff --git a/tests/queries/0_stateless/01262_fractional_timezone_near_start_of_epoch.sql b/tests/queries/0_stateless/01262_fractional_timezone_near_start_of_epoch.sql\nnew file mode 100644\nindex 000000000000..62ecc000ab4d\n--- /dev/null\n+++ b/tests/queries/0_stateless/01262_fractional_timezone_near_start_of_epoch.sql\n@@ -0,0 +1,3 @@\n+SELECT toDateTime(10000, 'Asia/Calcutta');\n+SELECT toMinute(toDateTime(10000, 'Asia/Calcutta'));\n+SELECT toStartOfHour(toDateTime(10000, 'Asia/Calcutta'));\n",
  "problem_statement": "DATETIME Datatype Issues near begining of unix epoch\nHi Team.\r\nI am trying to insert a row in a table with datetime type column.\r\n```\r\nCREATE TABLE test.table1 (\r\n`pc` String,\r\n `pf` String,\r\n `gi` UInt32,\r\n `gu` UInt32,\r\n `d0` Nullable(DateTime),\r\n timestamp DateTime\r\n) ENGINE = ReplicatedReplacingMergeTree('/clickhouse/{cluster}/tables/{shard}/test-table1', '{replica}') PARTITION BY toYYYYMM(timestamp) ORDER BY (pc, pf, gi, gu) SETTINGS index_granularity = 8192; \r\n\r\ninsert into test.table1(pc, pf, gi, gu, d0) Values('test','java',12,0,'1970-01-01 05:50:34');\r\ninsert into test.table1(pc, pf, gi, gu, d0) Values('test','java',11,0,toUnixTimestamp('1970-01-01 05:50:34'));\r\n```\r\nThese insert queries gets save successfully, but when we fetch the result from clickhouse the data is not correct;\r\n![clickhouse](https://user-images.githubusercontent.com/15169061/75136827-e23b1100-570b-11ea-8ab4-2225c7fe26b4.png)\r\n\r\n\r\nDateTime column Data stored in clickhouse gets corrupted.\r\nPlease assist here.\n",
  "hints_text": "DateTime type does not support properly the dates close to beginning of the epoch. Dates after 1970-01-02 should work properly.\r\n\r\nDateTime64 - will have that support (work in progress).\r\n\r\nFor now, the best workaround is to store such dates as numbers of as strings, and do conversions outside of clickhouse. \nIt works in UTC\r\n\r\nSELECT *\r\nFROM table1\r\n```\r\n\r\n\u250c\u2500pc\u2500\u2500\u2500\u252c\u2500pf\u2500\u2500\u2500\u252c\u2500gi\u2500\u252c\u2500gu\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500d0\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500timestamp\u2500\u2510\r\n\u2502 test \u2502 java \u2502 12 \u2502  0 \u2502 1970-01-01 05:50:34 \u2502 0000-00-00 00:00:00 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\u250c\u2500pc\u2500\u2500\u2500\u252c\u2500pf\u2500\u2500\u2500\u252c\u2500gi\u2500\u252c\u2500gu\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500d0\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500timestamp\u2500\u2510\r\n\u2502 test \u2502 java \u2502 11 \u2502  0 \u2502 1970-01-01 05:50:34 \u2502 0000-00-00 00:00:00 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\nIf you use Japan Standard Time  GMT+9, then this issue expected. CH does not support timestamps before UTC 0\n@den-crane It doesn't work for me in UTC.\r\nAs the table was created without providing any zone value, so the default value of datetime would be UTC based. And as you saw in my previous comment, it returned corrupted values on retrieval. \nI can reproduce the issue with the following queries:\r\n```\r\nSELECT toDateTime('1970-01-01 05:50:34', 'Asia/Calcutta');\r\nSELECT toDateTime(toUnixTimestamp('1970-01-01 05:50:34'), 'Asia/Calcutta');\r\n```",
  "created_at": "2020-04-26T16:23:31Z",
  "modified_files": [
    "base/common/DateLUTImpl.h"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/01262_fractional_timezone_near_start_of_epoch.reference",
    "b/tests/queries/0_stateless/01262_fractional_timezone_near_start_of_epoch.sql"
  ]
}