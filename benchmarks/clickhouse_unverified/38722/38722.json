{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 38722,
  "instance_id": "ClickHouse__ClickHouse-38722",
  "issue_numbers": [
    "38396"
  ],
  "base_commit": "c2486f3637a08c582e110a249ac86485ea7499c3",
  "patch": "diff --git a/src/AggregateFunctions/AggregateFunctionRankCorrelation.h b/src/AggregateFunctions/AggregateFunctionRankCorrelation.h\nindex a9bf8254f35d..670dd5948f7e 100644\n--- a/src/AggregateFunctions/AggregateFunctionRankCorrelation.h\n+++ b/src/AggregateFunctions/AggregateFunctionRankCorrelation.h\n@@ -31,8 +31,8 @@ struct RankCorrelationData : public StatisticalSample<Float64, Float64>\n         RanksArray ranks_y;\n         std::tie(ranks_y, std::ignore) = computeRanksAndTieCorrection(this->y);\n \n-        /// In our case sizes of both samples are equal.\n-        const auto size = this->size_x;\n+        /// Sizes can be non-equal due to skipped NaNs.\n+        const auto size = std::min(this->size_x, this->size_y);\n \n         /// Count d^2 sum\n         Float64 answer = 0;\ndiff --git a/src/AggregateFunctions/StatCommon.h b/src/AggregateFunctions/StatCommon.h\nindex 29163b63f778..ff824ca11b89 100644\n--- a/src/AggregateFunctions/StatCommon.h\n+++ b/src/AggregateFunctions/StatCommon.h\n@@ -31,8 +31,8 @@ std::pair<RanksArray, Float64> computeRanksAndTieCorrection(const Values & value\n     /// Save initial positions, than sort indices according to the values.\n     std::vector<size_t> indexes(size);\n     std::iota(indexes.begin(), indexes.end(), 0);\n-    ::sort(indexes.begin(), indexes.end(),\n-                [&] (size_t lhs, size_t rhs) { return values[lhs] < values[rhs]; });\n+    std::sort(indexes.begin(), indexes.end(),\n+        [&] (size_t lhs, size_t rhs) { return values[lhs] < values[rhs]; });\n \n     size_t left = 0;\n     Float64 tie_numenator = 0;\n@@ -74,12 +74,18 @@ struct StatisticalSample\n \n     void addX(X value, Arena * arena)\n     {\n+        if (isNaN(value))\n+            return;\n+\n         ++size_x;\n         x.push_back(value, arena);\n     }\n \n     void addY(Y value, Arena * arena)\n     {\n+        if (isNaN(value))\n+            return;\n+\n         ++size_y;\n         y.push_back(value, arena);\n     }\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01848_http_insert_segfault.sh b/tests/queries/0_stateless/01848_http_insert_segfault.sh\nindex c766e9794ae0..1f2e9eebcdce 100755\n--- a/tests/queries/0_stateless/01848_http_insert_segfault.sh\n+++ b/tests/queries/0_stateless/01848_http_insert_segfault.sh\n@@ -1,7 +1,9 @@\n #!/usr/bin/env bash\n+# Tags: no-tsan\n+# Sometimes is takes longer than 60 seconds under TSan.\n \n- CUR_DIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n- # shellcheck source=../shell_config.sh\n- . \"$CUR_DIR\"/../shell_config.sh\n+CUR_DIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+# shellcheck source=../shell_config.sh\n+. \"$CUR_DIR\"/../shell_config.sh\n \n- ${CLICKHOUSE_LOCAL} -q \"select col1, initializeAggregation('argMaxState', col2, insertTime) as col2, now() as insertTime FROM generateRandom('col1 String, col2 Array(Float64)') LIMIT 1000000 FORMAT CSV\"  | ${CLICKHOUSE_CURL} -s 'http://localhost:8123/?query=INSERT%20INTO%20non_existing_table%20SELECT%20col1%2C%20initializeAggregation(%27argMaxState%27%2C%20col2%2C%20insertTime)%20as%20col2%2C%20now()%20as%20insertTime%20FROM%20input(%27col1%20String%2C%20col2%20Array(Float64)%27)%20FORMAT%20CSV' --data-binary @- | grep -q \"Table default.non_existing_table doesn't exist\" && echo 'Ok.' || echo 'FAIL' ||:\n+${CLICKHOUSE_LOCAL} --query \"select col1, initializeAggregation('argMaxState', col2, insertTime) as col2, now() as insertTime FROM generateRandom('col1 String, col2 Array(Float64)') LIMIT 1000000 FORMAT CSV\"  | ${CLICKHOUSE_CURL} -s 'http://localhost:8123/?query=INSERT%20INTO%20non_existing_table%20SELECT%20col1%2C%20initializeAggregation(%27argMaxState%27%2C%20col2%2C%20insertTime)%20as%20col2%2C%20now()%20as%20insertTime%20FROM%20input(%27col1%20String%2C%20col2%20Array(Float64)%27)%20FORMAT%20CSV' --data-binary @- | grep -q \"Table default.non_existing_table doesn't exist\" && echo 'Ok.' || echo 'FAIL' ||:\ndiff --git a/tests/queries/0_stateless/02347_rank_corr_nan.reference b/tests/queries/0_stateless/02347_rank_corr_nan.reference\nnew file mode 100644\nindex 000000000000..6db331af7253\n--- /dev/null\n+++ b/tests/queries/0_stateless/02347_rank_corr_nan.reference\n@@ -0,0 +1,1 @@\n+nan\ndiff --git a/tests/queries/0_stateless/02347_rank_corr_nan.sql b/tests/queries/0_stateless/02347_rank_corr_nan.sql\nnew file mode 100644\nindex 000000000000..0fd755259e6c\n--- /dev/null\n+++ b/tests/queries/0_stateless/02347_rank_corr_nan.sql\n@@ -0,0 +1,1 @@\n+SELECT rankCorr(number, nan) FROM numbers(10);\n",
  "problem_statement": "RankCorrelationData::getResult() takes long time\n```\r\nCREATE TABLE default.`01802_empsalary`\r\n(\r\n    `depname` LowCardinality(String),\r\n    `empno` UInt64,\r\n    `salary` Int32,\r\n    `enroll_date` Date\r\n)\r\nENGINE = MergeTree\r\nORDER BY enroll_date\r\nSETTINGS index_granularity = 8192;\r\ninsert into 01802_empsalary values ('sales',1,5000,'2006-10-01'),('develop',8,6000,'2006-10-01'),('personnel',2,3900,'2006-12-23'),('develop',10,5200,'2007-08-01'),('sales',3,4800,'2007-08-01'),('sales',4,4801,'2007-08-08'),('develop',11,5200,'2007-08-15'),('personnel',5,3500,'2007-12-10'),('develop',7,4200,'2008-01-01'),('develop',9,4500,'2008-01-01');\r\n```\r\n\r\nQuery hangs\r\n```\r\nSELECT rankCorr(salary, nan) OVER (ORDER BY salary ASC Rows BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) AS func\r\nFROM `01802_empsalary\r\n```\r\n\r\n```\r\nWITH arrayMap(x -> demangle(addressToSymbol(x)), trace) AS `all`\r\nSELECT\r\n    thread_name,\r\n    thread_id,\r\n    query_id,\r\n    arrayStringConcat(`all`, '\\n') AS res\r\nFROM system.stack_trace\r\nWHERE query_id = '41603474-6fdc-4790-bbed-53d919014ba5'\r\n\r\nQuery id: 9662b2c0-2a67-418c-8340-d3f19fea5c75\r\n\r\nRow 1:\r\n\u2500\u2500\u2500\u2500\u2500\u2500\r\nthread_name: TCPHandler\r\nthread_id:   21417\r\nquery_id:    41603474-6fdc-4790-bbed-53d919014ba5\r\nres:\r\nConcurrentBoundedQueue<DB::Chunk>::popImpl(DB::Chunk&, std::__1::optional<unsigned long>)\r\nDB::LazyOutputFormat::getChunk(unsigned long)\r\nDB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)\r\nDB::PullingAsyncPipelineExecutor::pull(DB::Block&, unsigned long)\r\nDB::TCPHandler::processOrdinaryQueryWithProcessors()\r\nDB::TCPHandler::runImpl()\r\nDB::TCPHandler::run()\r\nPoco::Net::TCPServerConnection::start()\r\nPoco::Net::TCPServerDispatcher::run()\r\nPoco::PooledThread::run()\r\nPoco::ThreadImpl::runnableEntry(void*)\r\n\r\n__clone\r\n\r\nRow 2:\r\n\u2500\u2500\u2500\u2500\u2500\u2500\r\nthread_name: QueryPullPipeEx\r\nthread_id:   35307\r\nquery_id:    41603474-6fdc-4790-bbed-53d919014ba5\r\nres:         std::__1::pair<std::__1::vector<double, std::__1::allocator<double> >, double> DB::computeRanksAndTieCorrection<DB::PODArray<double, 32ul, DB::MixedArenaAllocator<4096ul, Allocator<false, false>, DB::AlignedArenaAllocator<8ul>, 8ul>, 0ul, 0ul> >(DB::PODArray<double, 32ul, DB::MixedArenaAllocator<4096ul, Allocator<false, false>, DB::AlignedArenaAllocator<8ul>, 8ul>, 0ul, 0ul> const&)\r\nDB::RankCorrelationData::getResult()\r\nDB::AggregateFunctionRankCorrelation::insertResultInto(char*, DB::IColumn&, DB::Arena*) const\r\nDB::WindowTransform::writeOutCurrentRow()\r\nDB::WindowTransform::appendChunk(DB::Chunk&)\r\nDB::WindowTransform::work()\r\nDB::ExecutionThreadContext::executeTask()\r\nDB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*)\r\nDB::PipelineExecutor::executeImpl(unsigned long)\r\nDB::PipelineExecutor::execute(unsigned long)\r\nvoid std::__1::__function::__policy_invoker<void ()>::__call_impl<std::__1::__function::__default_alloc_func<ThreadFromGlobalPool::ThreadFromGlobalPool<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::'lambda'(), void ()> >(std::__1::__function::__policy_storage const*)\r\nThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>)\r\nvoid* std::__1::__thread_proxy<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::'lambda0'()> >(void*)\r\n\r\n__clone\r\n\r\n2 rows in set. Elapsed: 0.020 sec.\r\n```\n",
  "hints_text": "```\r\n(gdb) p values[0]\r\n$21 = (const double &) @0x621001e6a640: nan(0x8000000000000)\r\n```\r\n\r\nhttps://github.com/ClickHouse/ClickHouse/blob/85a1204e959885bbed869477f8c4893914972661/src/AggregateFunctions/StatCommon.h#L43\r\n\r\nnan!=nan?\n`SELECT rankCorr(number, nan) FROM numbers(10)`",
  "created_at": "2022-07-02T01:40:27Z",
  "modified_files": [
    "src/AggregateFunctions/AggregateFunctionRankCorrelation.h",
    "src/AggregateFunctions/StatCommon.h"
  ],
  "modified_test_files": [
    "tests/queries/0_stateless/01848_http_insert_segfault.sh",
    "b/tests/queries/0_stateless/02347_rank_corr_nan.reference",
    "b/tests/queries/0_stateless/02347_rank_corr_nan.sql"
  ]
}